source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1c3b4.5 = global i32 0
@global_var_1c3c4.6 = global i32* @global_var_1c3b4.5
@global_var_1c524.12 = global i32 0
@global_var_e1a4.18 = constant i32 -382906384
@global_var_1c540.23 = global i32 0
@global_var_8314.24 = constant i32 -352321546
@global_var_ff00.25 = constant i32 -476053496
@global_var_121d0.26 = constant i32 -481296384
@global_var_c444.32 = constant i32 -382906384
@global_var_c908.34 = constant i32 -382906384
@global_var_bad4.36 = constant i32 -382906384
@global_var_b388.38 = constant i32 -382906384
@global_var_ac14.40 = constant i32 -382906384
@global_var_a3b4.42 = constant i32 -382906384
@global_var_9154.45 = constant i32 -382906384
@global_var_89d8.47 = constant i32 -382906384
@global_var_9870.49 = constant i32 -382906384
@global_var_1c5dc.51 = global i32 0
@global_var_1c5e4.63 = global i32 0
@global_var_13e14.65 = constant i32 47
@global_var_1c5e0.68 = global i32 0
@global_var_1c544.70 = global i32 0
@global_var_e064.72 = constant i32 -382910448
@global_var_1c3d0.74 = global i32 69416
@global_var_1c3c8.76 = global i32 -1
@global_var_13e18.81 = constant [15 x i8] c"212.237.54.173\00"
@global_var_1c5ec.84 = local_unnamed_addr global i32 0
@global_var_1c5eb.85 = local_unnamed_addr global i32 0
@global_var_1c5ea.86 = local_unnamed_addr global i32 0
@global_var_1c548.88 = global i32 0
@global_var_dedc.90 = constant i32 -442556408
@global_var_1c5e9.94 = local_unnamed_addr global i32 0
@global_var_13e28.98 = constant i32 10
@global_var_1c3cc.100 = global i32 -1
@global_var_11574.104 = constant i32 -382910448
@global_var_10f28.105 = constant i32 -382910224
@global_var_13e2c.108 = constant i32 16777216
@global_var_1c550.110 = global i32 0
@global_var_1c55c.112 = global i32 0
@global_var_1c554.114 = global i32 0
@global_var_1c558.116 = global i32 0
@global_var_1c594.130 = global i32 0
@global_var_1c560.132 = global i32 0
@global_var_1c58c.134 = global i32 0
@global_var_1c600.139 = global i32 0
@global_var_1c5f8.143 = global i32 0
@global_var_1c5fc.145 = global i32 0
@global_var_1c567.148 = local_unnamed_addr global i32 0
@global_var_1c566.149 = local_unnamed_addr global i32 0
@global_var_1c578.151 = global i32 0
@global_var_1c569.153 = local_unnamed_addr global i32 0
@global_var_1c56d.154 = local_unnamed_addr global i32 0
@global_var_1c56c.155 = local_unnamed_addr global i32 0
@global_var_1c57b.156 = local_unnamed_addr global i32 0
@global_var_1c579.157 = local_unnamed_addr global i32 0
@global_var_1c568.158 = local_unnamed_addr global i32 0
@global_var_1c57a.159 = local_unnamed_addr global i32 0
@global_var_1c587.161 = local_unnamed_addr global i32 0
@global_var_1c586.162 = local_unnamed_addr global i32 0
@global_var_13eb8.164 = constant [5 x i8] c"&;; \00"
@global_var_13ebc.166 = constant i32 536542976
@global_var_13e34.168 = constant [5 x i8] c"5:?;\00"
@global_var_13e3c.170 = constant [9 x i8] c"<!: acam\00"
@global_var_13e48.172 = constant [7 x i8] c" 18:1 \00"
@global_var_13e50.174 = constant [8 x i8] c"0125!8 \00"
@global_var_13e58.176 = constant [9 x i8] c"$5''#;&0\00"
@global_var_13e64.178 = constant [6 x i8] c"509=:\00"
@global_var_13e6c.180 = constant [6 x i8] c"\22=.,\22\00"
@global_var_13e74.182 = constant [8 x i8] c"'!$$;& \00"
@global_var_13e7c.184 = constant i32 423502179
@global_var_13e8c.186 = constant [6 x i8] c"efg`a\00"
@global_var_13e94.188 = constant [5 x i8] c"!'1&\00"
@global_var_13e9c.190 = constant i32 943467547
@global_var_13ea8.192 = constant i32 322070023
@global_var_1c570.193 = local_unnamed_addr global i32 0
@global_var_1c56e.195 = local_unnamed_addr global i32 0
@global_var_1c56f.196 = local_unnamed_addr global i32 0
@global_var_1c588.198 = local_unnamed_addr global i32 0
@global_var_1c589.199 = local_unnamed_addr global i32 0
@global_var_13eb4.205 = constant [3 x i8] c"\0D\0A\00"
@global_var_13ec6.207 = constant i32 2096127
@global_var_13ebd.209 = constant i32 2095871
@global_var_1c608.212 = global i32 0
@global_var_1c3d8.215 = global i32 -555811921
@global_var_13ecc.220 = constant [3 x i8] c"Qm\00"
@global_var_1c610.221 = local_unnamed_addr global i32 0
@global_var_1c614.222 = local_unnamed_addr global i32 0
@global_var_1c615.223 = local_unnamed_addr global i32 0
@global_var_13ed0.225 = constant [14 x i8] c"0;'9-=$z78!6T\00"
@global_var_1c618.226 = local_unnamed_addr global i32 0
@global_var_1c61c.227 = local_unnamed_addr global i32 0
@global_var_1c61d.228 = local_unnamed_addr global i32 0
@global_var_1c620.229 = local_unnamed_addr global i32 0
@global_var_1c624.230 = local_unnamed_addr global i32 0
@global_var_1c625.231 = local_unnamed_addr global i32 0
@global_var_13ee0.233 = constant i32 59987
@global_var_1c628.234 = local_unnamed_addr global i32 0
@global_var_1c62c.235 = local_unnamed_addr global i32 0
@global_var_1c62d.236 = local_unnamed_addr global i32 0
@global_var_14060.238 = constant i32 808465680
@global_var_1c634.239 = local_unnamed_addr global i32 0
@global_var_1c630.240 = local_unnamed_addr global i32 0
@global_var_1c635.241 = local_unnamed_addr global i32 0
@global_var_13ee4.243 = constant [7 x i8] c"'<188T\00"
@global_var_1c638.244 = local_unnamed_addr global i32 0
@global_var_1c63c.245 = local_unnamed_addr global i32 0
@global_var_1c63d.246 = local_unnamed_addr global i32 0
@global_var_13eec.248 = constant [8 x i8] c"1:5681T\00"
@global_var_1c640.249 = local_unnamed_addr global i32 0
@global_var_1c644.250 = local_unnamed_addr global i32 0
@global_var_1c645.251 = local_unnamed_addr global i32 0
@global_var_13ef4.253 = constant [8 x i8] c"'-' 19T\00"
@global_var_1c648.254 = local_unnamed_addr global i32 0
@global_var_1c64c.255 = local_unnamed_addr global i32 0
@global_var_1c64d.256 = local_unnamed_addr global i32 0
@global_var_13efc.258 = constant [4 x i8] c"'<T\00"
@global_var_1c654.259 = local_unnamed_addr global i32 0
@global_var_1c650.260 = local_unnamed_addr global i32 0
@global_var_1c655.261 = local_unnamed_addr global i32 0
@global_var_13f00.263 = constant i32 977090171
@global_var_1c65c.264 = local_unnamed_addr global i32 0
@global_var_1c658.265 = local_unnamed_addr global i32 0
@global_var_1c65d.266 = local_unnamed_addr global i32 0
@global_var_13f14.268 = constant i32 470227742
@global_var_1c664.269 = local_unnamed_addr global i32 0
@global_var_1c660.270 = local_unnamed_addr global i32 0
@global_var_1c665.271 = local_unnamed_addr global i32 0
@global_var_13f30.273 = constant [10 x i8] c":7;&&17 T\00"
@global_var_1c66c.274 = local_unnamed_addr global i32 0
@global_var_1c668.275 = local_unnamed_addr global i32 0
@global_var_1c66d.276 = local_unnamed_addr global i32 0
@global_var_13f3c.278 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_1c670.279 = local_unnamed_addr global i32 0
@global_var_1c674.280 = local_unnamed_addr global i32 0
@global_var_1c675.281 = local_unnamed_addr global i32 0
@global_var_13f50.283 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_1c67c.284 = local_unnamed_addr global i32 0
@global_var_1c678.285 = local_unnamed_addr global i32 0
@global_var_1c67d.286 = local_unnamed_addr global i32 0
@global_var_13f68.288 = constant [8 x i8] c"{$&;7{T\00"
@global_var_1c680.289 = local_unnamed_addr global i32 0
@global_var_1c684.290 = local_unnamed_addr global i32 0
@global_var_1c685.291 = local_unnamed_addr global i32 0
@global_var_13f70.293 = constant [6 x i8] c"{1,1T\00"
@global_var_1c68c.294 = local_unnamed_addr global i32 0
@global_var_1c688.295 = local_unnamed_addr global i32 0
@global_var_1c68d.296 = local_unnamed_addr global i32 0
@global_var_13f78.298 = constant [5 x i8] c"{20T\00"
@global_var_1c694.299 = local_unnamed_addr global i32 0
@global_var_1c690.300 = local_unnamed_addr global i32 0
@global_var_1c695.301 = local_unnamed_addr global i32 0
@global_var_13f80.303 = constant [7 x i8] c"{95$'T\00"
@global_var_1c698.304 = local_unnamed_addr global i32 0
@global_var_1c69c.305 = local_unnamed_addr global i32 0
@global_var_1c69d.306 = local_unnamed_addr global i32 0
@global_var_13f88.308 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_1c6a0.309 = local_unnamed_addr global i32 0
@global_var_1c6a4.310 = local_unnamed_addr global i32 0
@global_var_1c6a5.311 = local_unnamed_addr global i32 0
@global_var_13f98.313 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_1c708.314 = local_unnamed_addr global i32 0
@global_var_1c70c.315 = local_unnamed_addr global i32 0
@global_var_1c70d.316 = local_unnamed_addr global i32 0
@global_var_13fa4.318 = constant [8 x i8] c"z5:=91T\00"
@global_var_1c710.319 = local_unnamed_addr global i32 0
@global_var_1c714.320 = local_unnamed_addr global i32 0
@global_var_1c715.321 = local_unnamed_addr global i32 0
@global_var_13fac.323 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_1c6a8.324 = local_unnamed_addr global i32 0
@global_var_1c6ac.325 = local_unnamed_addr global i32 0
@global_var_1c6ad.326 = local_unnamed_addr global i32 0
@global_var_13fc0.328 = constant [24 x i8] c"3e567`09;ga<:$f8=1d?>2T\00"
@global_var_1c6b0.329 = local_unnamed_addr global i32 0
@global_var_1c6b4.330 = local_unnamed_addr global i32 0
@global_var_1c6b5.331 = local_unnamed_addr global i32 0
@global_var_13fd8.333 = constant [9 x i8] c"5''#;&0T\00"
@global_var_1c6b8.334 = local_unnamed_addr global i32 0
@global_var_1c6bc.335 = local_unnamed_addr global i32 0
@global_var_1c6bd.336 = local_unnamed_addr global i32 0
@global_var_14080.338 = constant i32 557516544
@global_var_1c6c4.339 = local_unnamed_addr global i32 0
@global_var_1c6c0.340 = local_unnamed_addr global i32 0
@global_var_1c6c5.341 = local_unnamed_addr global i32 0
@global_var_13fe4.343 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_1c6cc.344 = local_unnamed_addr global i32 0
@global_var_1c6c8.345 = local_unnamed_addr global i32 0
@global_var_1c6cd.346 = local_unnamed_addr global i32 0
@global_var_13ff8.348 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_1c6d4.349 = local_unnamed_addr global i32 0
@global_var_1c6d0.350 = local_unnamed_addr global i32 0
@global_var_1c6d5.351 = local_unnamed_addr global i32 0
@global_var_14008.353 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_1c6d8.354 = local_unnamed_addr global i32 0
@global_var_1c6dc.355 = local_unnamed_addr global i32 0
@global_var_1c6dd.356 = local_unnamed_addr global i32 0
@global_var_14018.358 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_1c6e4.359 = local_unnamed_addr global i32 0
@global_var_1c6e0.360 = local_unnamed_addr global i32 0
@global_var_1c6e5.361 = local_unnamed_addr global i32 0
@global_var_1402c.363 = constant [9 x i8] c"$662*7!E\00"
@global_var_1c6e8.364 = local_unnamed_addr global i32 0
@global_var_1c6ec.365 = local_unnamed_addr global i32 0
@global_var_1c6ed.366 = local_unnamed_addr global i32 0
@global_var_14038.368 = constant [6 x i8] c";3=:T\00"
@global_var_1c6f4.369 = local_unnamed_addr global i32 0
@global_var_1c6f0.370 = local_unnamed_addr global i32 0
@global_var_1c6f5.371 = local_unnamed_addr global i32 0
@global_var_14040.373 = constant [7 x i8] c"1: 1&T\00"
@global_var_1c6f8.374 = local_unnamed_addr global i32 0
@global_var_1c6fc.375 = local_unnamed_addr global i32 0
@global_var_1c6fd.376 = local_unnamed_addr global i32 0
@global_var_14048.378 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_1c705.379 = local_unnamed_addr global i32 0
@global_var_1c700.380 = local_unnamed_addr global i32 0
@global_var_1c704.381 = local_unnamed_addr global i32 0
@global_var_12bb8.384 = constant i32 -476053504
@global_var_11944.388 = constant i32 -443219956
@global_var_11ab0.393 = constant i32 -376111092
@global_var_1c5d0.396 = global i32 0
@global_var_11c2c.398 = constant i32 -456978431
@global_var_1c718.400 = global i32 0
@global_var_1c598.402 = global i32 0
@global_var_1c4d8.405 = global i32 256
@global_var_1c3dc.406 = global i32* @global_var_1c4d8.405
@global_var_1c5c0.409 = global i32 0
@global_var_1c798.411 = global i32 0
@global_var_1336c.412 = constant i32 -382910416
@global_var_11bb0.413 = constant i32 -509595648
@global_var_12250.420 = constant i32 -442564520
@global_var_1c4e4.426 = global i32 0
@global_var_117f0.428 = constant i32 -481230848
@global_var_1c5b0.430 = global i32 0
@global_var_12fbc.432 = constant i32 -509587456
@global_var_141a4.434 = constant i32 33554944
@global_var_1c51c.435 = global i32* @global_var_141a4.434
@global_var_1c4fc.438 = global i32 0
@global_var_1c5b4.442 = local_unnamed_addr global i32 0
@global_var_12970.444 = constant i32 -352321419
@global_var_1c3a8.448 = global i32 -1
@global_var_1c5c4.451 = global i32 0
@global_var_1c5c8.453 = local_unnamed_addr global i32 0
@global_var_12ba4.454 = constant i32 -390234096
@global_var_14098.456 = constant [10 x i8] c"/dev/null\00"
@global_var_1c5cc.458 = global i32 0
@global_var_1c5b8.463 = local_unnamed_addr global i32 0
@global_var_1c5bc.465 = global i32 0
@global_var_11b90.467 = constant i32 -369096946
@global_var_1c514 = external local_unnamed_addr global i32
@global_var_11b48.477 = constant i32 -442564608
@global_var_12e6c.479 = constant i32 -335544664
@global_var_12f88.482 = constant i32 -275775369
@global_var_13700.483 = constant i32 -382910352
@global_var_1c5d8.485 = global i32 0
@global_var_1c7b0.488 = global i32 0
@global_var_1c7b4.490 = global i32 0
@global_var_1c3ac.493 = global i32 0
@global_var_1c520.3 = external global i8*
@global_var_1c53c.21 = external global i8*
@global_var_1c53d.30 = global i8 0
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1c3d4.78 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1c5e8.83 = external global i8*
@global_var_1c54c.103 = external global i8*
@global_var_1c590.136 = external global i8*
@global_var_1c591.137 = local_unnamed_addr global i8 0
@global_var_1c564.147 = external global i8*
@global_var_1c584.152 = local_unnamed_addr global i8 0
@global_var_1c585.160 = local_unnamed_addr global i8 0
@global_var_1c57c.197 = local_unnamed_addr global i8 0
@global_var_1c574.194 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_13dc4(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1c520.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1c520.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1c3c4.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1c3c4.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1c3c4.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1c3c4.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1c520.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1c3c4.6, { 1, 0 }
  uselistorder i8** @global_var_1c520.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 115640 to i32*), align 8
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 115640

bb2:                                              ; preds = %.thread
  ret i32 115640

; uselistorder directives
  uselistorder i32 115640, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_12c58(i32 ptrtoint (i32* @global_var_e1a4.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 81408, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_12620()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_81cc = urem i32 %arg1, 256
  %v2_81d0 = icmp eq i32 %v1_81cc, 0
  %v1_81d8 = urem i32 %arg3, 256
  br i1 %v2_81d0, label %dec_label_pc_821c, label %dec_label_pc_81e4

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81cc
  %v0_81e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e4 = add i32 %v0_81e4, 4
  %v2_81e4 = inttoptr i32 %v1_81e4 to i8*
  %v3_81e4 = load i8, i8* %v2_81e4, align 1
  %v4_81e4 = zext i8 %v3_81e4 to i32
  %v9_81e8 = icmp eq i32 %v4_81e4, %v1_81d8
  br i1 %v9_81e8, label %dec_label_pc_8224, label %dec_label_pc_820c.preheader

dec_label_pc_820c.preheader:                      ; preds = %dec_label_pc_81e4
  br label %dec_label_pc_820c

dec_label_pc_81fc:                                ; preds = %dec_label_pc_820c
  %v1_81fc = add i32 %v0_8204.in, 12
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %v1_81d8
  br i1 %v9_8200, label %dec_label_pc_8224, label %dec_label_pc_820c

dec_label_pc_820c:                                ; preds = %dec_label_pc_820c.preheader, %dec_label_pc_81fc
  %v0_8204.in = phi i32 [ %v0_81e4, %dec_label_pc_820c.preheader ], [ %v0_8204, %dec_label_pc_81fc ]
  %v0_820c = phi i32 [ 0, %dec_label_pc_820c.preheader ], [ %v1_820c, %dec_label_pc_81fc ]
  %v0_8204 = add i32 %v0_8204.in, 8
  %v1_820c = add i32 %v0_820c, 1
  %v9_8210 = icmp eq i32 %v1_820c, %v1_81cc
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  br i1 %v9_8210, label %dec_label_pc_821c, label %dec_label_pc_81fc

dec_label_pc_821c:                                ; preds = %dec_label_pc_820c, %dec_label_pc_81cc
  ret i32 %arg4

dec_label_pc_8224:                                ; preds = %dec_label_pc_81fc, %dec_label_pc_81e4
  %v0_8224 = phi i32 [ %v0_81e4, %dec_label_pc_81e4 ], [ %v0_8204, %dec_label_pc_81fc ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  ret i32 %v2_8224

; uselistorder directives
  uselistorder i32 %v1_820c, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 0, 2 }
  uselistorder i32 %v0_8204.in, { 1, 0 }
  uselistorder i32 %v0_81e4, { 1, 0, 2 }
  uselistorder i32 %v1_81d8, { 1, 0 }
  uselistorder i32 %v1_81cc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_820c, { 1, 0 }
}

define i32 @function_8230(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8230:
  store i32 %arg1, i32* @r6, align 4
  %v1_823c = urem i32 %arg2, 256
  store i32 %v1_823c, i32* @r7, align 4
  %v0_8248 = call i32 @function_115a0()
  %v7_824c = icmp eq i32 %v0_8248, -1
  %tmp23 = icmp slt i32 %v0_8248, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_8230
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_8230
  %. = zext i1 %v7_824c to i32
  store i32 %., i32* @r5, align 4
  %v2_8264 = icmp eq i1 %v7_824c, false
  br i1 %v2_8264, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  ret i32 %v0_8248

bb26:                                             ; preds = %bb24
  %v0_826c = call i32 @function_115a0()
  %v7_8270 = icmp eq i32 %v0_826c, -1
  store i32 %v0_826c, i32* @r4, align 4
  br i1 %v7_8270, label %dec_label_pc_82a0, label %dec_label_pc_827c

dec_label_pc_827c:                                ; preds = %bb26
  %v2_827c = icmp eq i32 %v0_826c, 0
  br i1 %v2_827c, label %dec_label_pc_8284, label %dec_label_pc_82a8

dec_label_pc_8284:                                ; preds = %dec_label_pc_827c
  %v0_8284 = load i32, i32* @r6, align 4
  %v1_8288 = call i32 @function_129a8(i32 %v0_8284)
  %v0_828c = call i32 @function_115f8()
  %v2_8294 = call i32 @function_11674(i32 %v0_828c, i32 9)
  %v0_8298 = load i32, i32* @r4, align 4
  %v1_829c = call i32 @function_12914(i32 %v0_8298)
  br label %dec_label_pc_82a0

dec_label_pc_82a0:                                ; preds = %bb26, %dec_label_pc_8284
  %v0_82a0 = load i32, i32* @r5, align 4
  %v1_82a4 = call i32 @function_12914(i32 %v0_82a0)
  br label %dec_label_pc_82a8

dec_label_pc_82a8:                                ; preds = %dec_label_pc_827c, %dec_label_pc_82a0
  %v2_82ac = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_82ac = zext i8 %v2_82ac to i32
  %v2_82b0 = icmp eq i8 %v2_82ac, 0
  br i1 %v2_82b0, label %dec_label_pc_82f4, label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82a8
  %v2_82bc = load i32, i32* @global_var_1c540.23, align 4
  %v1_82c0 = inttoptr i32 %v2_82bc to i32*
  %v2_82c0 = load i32, i32* %v1_82c0, align 4
  store i32 %v2_82c0, i32* @ip, align 4
  %v1_82c4 = add i32 %v2_82c0, 4
  %v2_82c4 = inttoptr i32 %v1_82c4 to i8*
  %v3_82c4 = load i8, i8* %v2_82c4, align 1
  %v4_82c4 = zext i8 %v3_82c4 to i32
  %v1_82c8 = load i32, i32* @r7, align 4
  %v9_82c8 = icmp eq i32 %v4_82c4, %v1_82c8
  br i1 %v9_82c8, label %dec_label_pc_82fc, label %dec_label_pc_82e8.preheader

dec_label_pc_82e8.preheader:                      ; preds = %dec_label_pc_82b8
  %v1_82cc = load i32, i32* @r5, align 4
  br label %dec_label_pc_82e8

dec_label_pc_82d8:                                ; preds = %dec_label_pc_82e8
  %v4_82d8 = mul i32 %v1_82e8, 4
  %v5_82d8 = add i32 %v4_82d8, %v2_82bc
  %v6_82d8 = inttoptr i32 %v5_82d8 to i32*
  %v7_82d8 = load i32, i32* %v6_82d8, align 4
  store i32 %v7_82d8, i32* @ip, align 4
  %v1_82dc = add i32 %v7_82d8, 4
  %v2_82dc = inttoptr i32 %v1_82dc to i8*
  %v3_82dc = load i8, i8* %v2_82dc, align 1
  %v4_82dc = zext i8 %v3_82dc to i32
  %v9_82e0 = icmp eq i32 %v4_82dc, %v1_82c8
  br i1 %v9_82e0, label %dec_label_pc_82fc, label %dec_label_pc_82e8

dec_label_pc_82e8:                                ; preds = %dec_label_pc_82e8.preheader, %dec_label_pc_82d8
  %v0_82e8 = phi i32 [ %v1_82cc, %dec_label_pc_82e8.preheader ], [ %v1_82e8, %dec_label_pc_82d8 ]
  %v1_82e8 = add i32 %v0_82e8, 1
  %v9_82ec = icmp eq i32 %v1_82e8, %v3_82ac
  br i1 %v9_82ec, label %dec_label_pc_82f4, label %dec_label_pc_82d8

dec_label_pc_82f4:                                ; preds = %dec_label_pc_82e8, %dec_label_pc_82a8, %dec_label_pc_82fc
  %v1_82f8 = call i32 @function_12914(i32 0)
  %v0_8310.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %dec_label_pc_82d8, %dec_label_pc_82b8, %dec_label_pc_82f4
  %v0_8310 = phi i32 [ %v2_82c0, %dec_label_pc_82b8 ], [ %v0_8310.pre, %dec_label_pc_82f4 ], [ %v7_82d8, %dec_label_pc_82d8 ]
  %v1_8310 = inttoptr i32 %v0_8310 to i32*
  %v2_8310 = load i32, i32* %v1_8310, align 4
  call void @__pseudo_branch(i32 %v2_8310)
  br label %dec_label_pc_82f4

; uselistorder directives
  uselistorder i32 %v1_82e8, { 2, 0, 1 }
  uselistorder i32 %v0_826c, { 1, 2, 0 }
  uselistorder i1 %v7_824c, { 1, 0 }
  uselistorder i32 %v0_8248, { 2, 1, 0 }
  uselistorder label %dec_label_pc_82fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82e8, { 1, 0 }
  uselistorder label %dec_label_pc_82a8, { 1, 0 }
  uselistorder label %dec_label_pc_82a0, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_8320(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8320:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_8320 = load i32, i32* @r4, align 4
  %v6_8320 = load i32, i32* @r5, align 4
  %v9_8320 = load i32, i32* @r6, align 4
  %v12_8320 = load i32, i32* @r7, align 4
  %v15_8320 = load i32, i32* @r8, align 4
  %v18_8320 = load i32, i32* @sb, align 4
  %v21_8320 = load i32, i32* @sl, align 4
  %v27_8320 = load i32, i32* @lr, align 4
  %v7_8324 = icmp eq i32 %arg2, 3
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_8330 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8330, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_8344, label %dec_label_pc_8338

dec_label_pc_8338:                                ; preds = %dec_label_pc_8320
  %v7_8338 = icmp eq i32 %arg2, 4
  store i1 %v7_8338, i1* %cpsr_z.global-to-local, align 1
  %v1_833c = inttoptr i32 %v0_8330 to i32*
  %v2_833c = load i32, i32* %v1_833c, align 4
  store i32 %v2_833c, i32* @sl, align 4
  br i1 %v7_8338, label %dec_label_pc_8344, label %dec_label_pc_834c

dec_label_pc_8344:                                ; preds = %dec_label_pc_8368, %.dec_label_pc_8344_crit_edge, %dec_label_pc_8338, %dec_label_pc_835c, %dec_label_pc_834c, %dec_label_pc_8320
  %v29_8348 = phi i32 [ %v29_8348.pre, %.dec_label_pc_8344_crit_edge ], [ %v0_8330, %dec_label_pc_8368 ], [ %v0_8330, %dec_label_pc_8338 ], [ %v0_8330, %dec_label_pc_835c ], [ %v0_8330, %dec_label_pc_834c ], [ %v0_8330, %dec_label_pc_8320 ]
  store i32 %v9_8320, i32* @r6, align 4
  store i32 %v12_8320, i32* @r7, align 4
  store i32 %v18_8320, i32* @sb, align 4
  store i32 %v21_8320, i32* @sl, align 4
  ret i32 %v29_8348

dec_label_pc_834c:                                ; preds = %dec_label_pc_8338
  %v7_834c = icmp eq i32 %arg2, 5
  store i1 %v7_834c, i1* %cpsr_z.global-to-local, align 1
  %v1_8350 = add i32 %v0_8330, 4
  %v2_8350 = inttoptr i32 %v1_8350 to i8*
  %v3_8350 = load i8, i8* %v2_8350, align 1
  %v4_8350 = zext i8 %v3_8350 to i32
  store i32 %v4_8350, i32* %r1.global-to-local, align 4
  br i1 %v7_834c, label %dec_label_pc_8344, label %dec_label_pc_835c

dec_label_pc_835c:                                ; preds = %dec_label_pc_834c
  %v1_835c = add i32 %v0_8330, 5
  %v2_835c = inttoptr i32 %v1_835c to i8*
  %v3_835c = load i8, i8* %v2_835c, align 1
  %v4_835c = zext i8 %v3_835c to i32
  store i32 %v4_835c, i32* @r7, align 4
  %v2_8360 = icmp eq i8 %v3_835c, 0
  store i1 %v2_8360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8360, label %dec_label_pc_8344, label %dec_label_pc_8368

dec_label_pc_8368:                                ; preds = %dec_label_pc_835c
  %v3_8368 = mul nuw nsw i32 %v4_835c, 4
  store i32 %v3_8368, i32* @sb, align 4
  %v1_836c = add i32 %arg2, -6
  store i32 %v1_836c, i32* @r6, align 4
  %v2_8370 = mul nuw nsw i32 %v4_835c, 5
  store i32 %v2_8370, i32* @r8, align 4
  %v3_8374 = icmp ult i32 %v1_836c, %v2_8370
  %v9_8374 = icmp eq i32 %v1_836c, %v2_8370
  store i1 %v9_8374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8374, label %dec_label_pc_8344, label %dec_label_pc_837c

dec_label_pc_837c:                                ; preds = %dec_label_pc_8368
  store i32 %v4_835c, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_8384 = call i32 @function_12178(i32 %v4_835c, i32 24)
  store i32 %v2_8384, i32* %r0.global-to-local, align 4
  %v0_8388 = load i32, i32* @r7, align 4
  %v2_8388 = icmp eq i32 %v0_8388, 0
  store i1 %v2_8388, i1* %cpsr_z.global-to-local, align 1
  %v0_8390 = load i32, i32* @r4, align 4
  %v1_8390 = add i32 %v0_8390, 6
  store i32 %v1_8390, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_8388, 1
  br i1 %tmp27, label %dec_label_pc_83e8thread-pre-split, label %dec_label_pc_8398

dec_label_pc_8398:                                ; preds = %dec_label_pc_837c
  store i32 %v2_8384, i32* %r1.global-to-local, align 4
  %v1_839c = load i32, i32* @r8, align 4
  %v2_839c = add i32 %v1_839c, %v0_8390
  store i32 %v2_839c, i32* %ip.global-to-local, align 4
  store i32 %v0_8390, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_83ac

dec_label_pc_83ac:                                ; preds = %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge, %dec_label_pc_8398
  %v2_83bc = phi i32 [ %v1_83d0, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v2_8384, %dec_label_pc_8398 ]
  %v1_83b8 = phi i32 [ %v1_83b8.pre, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v2_839c, %dec_label_pc_8398 ]
  %v0_83b4 = phi i32 [ %v0_83ac.pre, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v0_8390, %dec_label_pc_8398 ]
  %v1_83ac = add i32 %v0_83b4, 10
  %v2_83ac = inttoptr i32 %v1_83ac to i8*
  %v3_83ac = load i8, i8* %v2_83ac, align 1
  %v1_83b0 = add i32 %v0_83b4, 6
  %v2_83b0 = inttoptr i32 %v1_83b0 to i32*
  %v3_83b0 = load i32, i32* %v2_83b0, align 4
  store i32 %v3_83b0, i32* %r2.global-to-local, align 4
  %v1_83b4 = add i32 %v0_83b4, 5
  store i32 %v1_83b4, i32* %r0.global-to-local, align 4
  %v9_83b8 = icmp eq i32 %v1_83b4, %v1_83b8
  store i1 %v9_83b8, i1* %cpsr_z.global-to-local, align 1
  %v3_83bc = add i32 %v2_83bc, 20
  %v4_83bc = inttoptr i32 %v3_83bc to i8*
  store i8 %v3_83ac, i8* %v4_83bc, align 1
  %v0_83c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_83c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_83c0 = add i32 %v1_83c0, 4
  %v3_83c0 = inttoptr i32 %v2_83c0 to i32*
  store i32 %v0_83c0, i32* %v3_83c0, align 4
  %v0_83c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_83c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_83c4 = add i32 %v1_83c4, 16
  %v3_83c4 = inttoptr i32 %v2_83c4 to i32*
  store i32 %v0_83c4, i32* %v3_83c4, align 4
  %v0_83c8 = load i32, i32* @r4, align 4
  %v1_83c8 = trunc i32 %v0_83c8 to i8
  %v2_83c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_83c8 = inttoptr i32 %v2_83c8 to i8*
  store i8 %v1_83c8, i8* %v3_83c8, align 1
  %v0_83cc = load i32, i32* @lr, align 4
  %v1_83cc = trunc i32 %v0_83cc to i8
  %v2_83cc = load i32, i32* %r1.global-to-local, align 4
  %v3_83cc = add i32 %v2_83cc, 1
  %v4_83cc = inttoptr i32 %v3_83cc to i8*
  store i8 %v1_83cc, i8* %v4_83cc, align 1
  %v0_83d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_83d0 = add i32 %v0_83d0, 24
  store i32 %v1_83d0, i32* %r1.global-to-local, align 4
  %v0_83d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83d4, label %dec_label_pc_83d8, label %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge

dec_label_pc_83ac.dec_label_pc_83ac_crit_edge:    ; preds = %dec_label_pc_83ac
  %v0_83ac.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_83b8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_83ac

dec_label_pc_83d8:                                ; preds = %dec_label_pc_83ac
  %v0_83d8 = load i32, i32* @sb, align 4
  %v1_83d8 = load i32, i32* @r7, align 4
  %v1_83dc = load i32, i32* @r5, align 4
  %sum = add i32 %v1_83d8, %v0_83d8
  %v2_83dc = sub i32 %v1_83dc, %sum
  %v0_83e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_83e0 = add i32 %v0_83e0, 6
  store i32 %v1_83e0, i32* %fp.global-to-local, align 4
  %v1_83e4 = add i32 %v2_83dc, -6
  store i32 %v1_83e4, i32* @r6, align 4
  br label %dec_label_pc_83e8

dec_label_pc_83e8thread-pre-split:                ; preds = %dec_label_pc_837c
  %v0_83e8.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_83e8

dec_label_pc_83e8:                                ; preds = %dec_label_pc_83e8thread-pre-split, %dec_label_pc_83d8
  %v0_83f4 = phi i32 [ %v1_8390, %dec_label_pc_83e8thread-pre-split ], [ %v1_83e0, %dec_label_pc_83d8 ]
  %v1_83ec = phi i32 [ %v0_83e8.pr, %dec_label_pc_83e8thread-pre-split ], [ %v1_83e4, %dec_label_pc_83d8 ]
  %v2_83e8 = icmp eq i32 %v1_83ec, 0
  store i1 %v2_83e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83e8, label %dec_label_pc_8520, label %dec_label_pc_83f4

dec_label_pc_83f4:                                ; preds = %dec_label_pc_83e8
  %v1_83f4 = inttoptr i32 %v0_83f4 to i8*
  %v2_83f4 = load i8, i8* %v1_83f4, align 1
  %v3_83f4 = zext i8 %v2_83f4 to i32
  store i32 %v3_83f4, i32* @sb, align 4
  %v2_83f8 = icmp eq i8 %v2_83f4, 0
  store i1 %v2_83f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83f8, label %dec_label_pc_84d8, label %dec_label_pc_8408

dec_label_pc_8408:                                ; preds = %dec_label_pc_83f4
  store i32 %v3_83f4, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_8410 = call i32 @function_12178(i32 %v3_83f4, i32 8)
  store i32 %v2_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @sb, align 4
  %v2_8414 = icmp eq i32 %v0_8414, 0
  store i1 %v2_8414, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_8414, 1
  br i1 %tmp28, label %dec_label_pc_84d8, label %dec_label_pc_8424

dec_label_pc_8424:                                ; preds = %dec_label_pc_8408
  %v0_8424 = load i32, i32* @r6, align 4
  %v1_8424 = add i32 %v0_8424, -1
  store i32 %v1_8424, i32* %r2.global-to-local, align 4
  %v7_8424 = icmp eq i32 %v0_8424, 1
  store i1 %v7_8424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8424, label %dec_label_pc_8520, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8424
  %v0_842c = load i32, i32* %fp.global-to-local, align 4
  %v1_842c = add i32 %v0_842c, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v1_8430 = add i32 %v0_8424, -2
  store i32 %v1_8430, i32* %r2.global-to-local, align 4
  %v7_8430 = icmp eq i32 %v1_8424, 1
  store i1 %v7_8430, i1* %cpsr_z.global-to-local, align 1
  %v3_8434 = add i32 %v2_8410, 4
  %v4_8434 = inttoptr i32 %v3_8434 to i8*
  store i8 %v3_842c, i8* %v4_8434, align 1
  %v0_8438 = load i32, i32* %fp.global-to-local, align 4
  %v1_8438 = add i32 %v0_8438, 1
  store i32 %v1_8438, i32* %r0.global-to-local, align 4
  %v0_843c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_843c, label %dec_label_pc_8520, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v0_8438, 2
  %v2_8440 = inttoptr i32 %v1_8440 to i8*
  %v3_8440 = load i8, i8* %v2_8440, align 1
  %v4_8440 = zext i8 %v3_8440 to i32
  store i32 %v4_8440, i32* @r4, align 4
  %v0_8444 = load i32, i32* %r2.global-to-local, align 4
  %v1_8444 = add i32 %v0_8444, -1
  store i32 %v1_8444, i32* @r8, align 4
  %v9_8448 = icmp eq i32 %v1_8444, %v4_8440
  store i1 %v9_8448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8440, i32* %r0.global-to-local, align 4
  %v5_8450 = icmp slt i32 %v1_8444, %v4_8440
  br i1 %v5_8450, label %dec_label_pc_8520, label %dec_label_pc_8454

dec_label_pc_8454:                                ; preds = %dec_label_pc_8440
  store i32 %v2_8410, i32* @r5, align 4
  %v1_845c = add i32 %v2_8410, 8
  %v1_8460 = add i32 %v0_8438, 3
  store i32 %v1_8460, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_84a4

dec_label_pc_8470:                                ; preds = %dec_label_pc_84a4
  %v0_8470 = load i32, i32* @r8, align 4
  %v1_8470 = load i32, i32* @r4, align 4
  %v2_8470 = sub i32 %v0_8470, %v1_8470
  store i32 %v2_8470, i32* %r2.global-to-local, align 4
  %v9_8470 = icmp eq i32 %v0_8470, %v1_8470
  store i1 %v9_8470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8470, label %dec_label_pc_8520, label %dec_label_pc_8478

dec_label_pc_8478:                                ; preds = %dec_label_pc_8470
  %v1_8478 = load i32, i32* @r6, align 4
  %v2_8478 = add i32 %v1_8478, %v1_8470
  %v3_8478 = inttoptr i32 %v2_8478 to i8*
  %v4_8478 = load i8, i8* %v3_8478, align 1
  store i32 %v2_8478, i32* %r0.global-to-local, align 4
  %v1_8480 = add i32 %v2_8470, -1
  store i32 %v1_8480, i32* %r2.global-to-local, align 4
  %v7_8480 = icmp eq i32 %v2_8470, 1
  store i1 %v7_8480, i1* %cpsr_z.global-to-local, align 1
  %v3_8484 = add i32 %v2_8484, 4
  %v4_8484 = inttoptr i32 %v3_8484 to i8*
  store i8 %v4_8478, i8* %v4_8484, align 1
  %v0_8488 = load i32, i32* %r0.global-to-local, align 4
  %v0_848c = load i32, i32* %r2.global-to-local, align 4
  %v1_848c = add i32 %v0_848c, -1
  store i32 %v1_848c, i32* @r8, align 4
  %v1_8490 = add i32 %v0_8488, 2
  store i32 %v1_8490, i32* @r6, align 4
  %v0_8494 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8494, label %dec_label_pc_8520, label %dec_label_pc_8498

dec_label_pc_8498:                                ; preds = %dec_label_pc_8478
  %v1_8488 = add i32 %v0_8488, 1
  %v2_8498 = inttoptr i32 %v1_8488 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* @r4, align 4
  %v2_849c = sub i32 %v1_848c, %v4_8498
  %tmp30 = sub i32 0, %v2_849c
  %v6_849c = and i32 %v1_848c, %tmp30
  %v7_849c = icmp slt i32 %v6_849c, 0
  %v8_849c = icmp slt i32 %v2_849c, 0
  %v9_849c = icmp eq i32 %v1_848c, %v4_8498
  store i1 %v9_849c, i1* %cpsr_z.global-to-local, align 1
  %v2_84a0 = xor i1 %v8_849c, %v7_849c
  br i1 %v2_84a0, label %dec_label_pc_8520, label %dec_label_pc_84a4

dec_label_pc_84a4:                                ; preds = %dec_label_pc_8498, %dec_label_pc_8454
  %v0_84a8 = phi i32 [ %v4_8440, %dec_label_pc_8454 ], [ %v4_8498, %dec_label_pc_8498 ]
  %v2_8484 = phi i32 [ %v1_845c, %dec_label_pc_8454 ], [ %v1_84c8, %dec_label_pc_8498 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_84a8 = add nuw nsw i32 %v0_84a8, 1
  store i32 %v1_84a8, i32* %r0.global-to-local, align 4
  %v2_84ac = call i32 @function_12178(i32 %v1_84a8, i32 1)
  store i32 %v2_84ac, i32* %r0.global-to-local, align 4
  %v0_84b0 = load i32, i32* @r6, align 4
  store i32 %v0_84b0, i32* %r1.global-to-local, align 4
  %v1_84b4 = load i32, i32* @r5, align 4
  %v2_84b4 = inttoptr i32 %v1_84b4 to i32*
  store i32 %v2_84ac, i32* %v2_84b4, align 4
  %v0_84b8 = load i32, i32* @r4, align 4
  store i32 %v0_84b8, i32* %r2.global-to-local, align 4
  %v3_84bc = call i32 @function_10cec(i32 %v2_84ac, i32 %v0_84b0, i32 %v0_84b8)
  store i32 %v3_84bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8484, i32* @r5, align 4
  %v0_84c4 = load i32, i32* %fp.global-to-local, align 4
  %v1_84c4 = add i32 %v0_84c4, 1
  store i32 %v1_84c4, i32* %fp.global-to-local, align 4
  %v1_84c8 = add i32 %v2_8484, 8
  store i32 %v1_84c8, i32* %ip.global-to-local, align 4
  %v1_84cc = load i32, i32* @sb, align 4
  %v9_84cc = icmp eq i32 %v1_84c4, %v1_84cc
  store i1 %v9_84cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_84cc, label %dec_label_pc_84d8, label %dec_label_pc_8470

dec_label_pc_84d8:                                ; preds = %dec_label_pc_84a4, %dec_label_pc_8408, %dec_label_pc_83f4
  %stack_var_-48.1 = phi i32 [ %v3_83f4, %dec_label_pc_83f4 ], [ %v0_8414, %dec_label_pc_8408 ], [ %v0_8414, %dec_label_pc_84a4 ]
  %stack_var_-52.2 = phi i32 [ %v3_83f4, %dec_label_pc_83f4 ], [ %v2_8410, %dec_label_pc_8408 ], [ %v2_8410, %dec_label_pc_84a4 ]
  %v0_84d8 = call i32 @function_11b48()
  %v0_84dc = load i32, i32* @sl, align 4
  %v1_84dc = and i32 %v0_84dc, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_84e8 = mul i32 %v0_84dc, 16777216
  %v4_84ec = mul i32 %v1_84dc, 256
  %v5_84ec = or i32 %v4_84ec, %v3_84e8
  store i32 %v5_84ec, i32* %r1.global-to-local, align 4
  %v1_84e4 = udiv i32 %v0_84dc, 256
  %v3_84f0 = and i32 %v1_84e4, 65280
  store i32 %v3_84f0, i32* %r2.global-to-local, align 4
  %v2_84f8 = inttoptr i32 %v0_84d8 to i32*
  store i32 0, i32* %v2_84f8, align 4
  %v0_84fc = load i32, i32* %r2.global-to-local, align 4
  %v1_84fc = load i32, i32* @sl, align 4
  %v4_84fc = udiv i32 %v1_84fc, 16777216
  %v5_84fc = or i32 %v4_84fc, %v0_84fc
  %v0_8500 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* @ip, align 4
  %v1_8508 = load i32, i32* %r1.global-to-local, align 4
  %v2_8508 = or i32 %v5_84fc, %v1_8508
  store i32 %v2_8508, i32* %r0.global-to-local, align 4
  store i32 %v4_8350, i32* %r1.global-to-local, align 4
  %v0_8514 = load i32, i32* @r7, align 4
  store i32 %v0_8514, i32* %r2.global-to-local, align 4
  %v6_851c = trunc i32 %v0_8500 to i8
  %v7_851c = call i32 @function_8230(i32 %v2_8508, i32 %v4_8350, i32 %v0_8514, i32 %v2_8384, i8 %v6_851c, i32 %stack_var_-52.2)
  store i32 %v7_851c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8498, %dec_label_pc_8478, %dec_label_pc_8470, %dec_label_pc_8440, %dec_label_pc_842c, %dec_label_pc_8424, %dec_label_pc_83e8, %dec_label_pc_84d8
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_83e8 ], [ %stack_var_-52.2, %dec_label_pc_84d8 ], [ %v2_8410, %dec_label_pc_8424 ], [ %v2_8410, %dec_label_pc_842c ], [ %v2_8410, %dec_label_pc_8440 ], [ %v2_8410, %dec_label_pc_8470 ], [ %v2_8410, %dec_label_pc_8478 ], [ %v2_8410, %dec_label_pc_8498 ]
  store i32 %v2_8384, i32* %r1.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v2_8384, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8524, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_8520
  store i32 %v2_8384, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_8520, %bb
  %v1_852c = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_852c, i32 ptrtoint (i32* @global_var_121d0.26 to i32))
  %v2_8534 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_8534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8534, label %.dec_label_pc_8344_crit_edge, label %dec_label_pc_853c

.dec_label_pc_8344_crit_edge:                     ; preds = %bb31
  %v29_8348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8344

dec_label_pc_853c:                                ; preds = %bb31
  %v0_853c = load i32, i32* @sb, align 4
  %v2_853c = icmp eq i32 %v0_853c, 0
  store i1 %v2_853c, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_853c, 1
  br i1 %tmp32, label %dec_label_pc_8564, label %dec_label_pc_8544

dec_label_pc_8544:                                ; preds = %dec_label_pc_853c
  br label %dec_label_pc_8548

dec_label_pc_8548:                                ; preds = %dec_label_pc_8548, %dec_label_pc_8544
  %v0_8554 = phi i32 [ %v1_8554, %dec_label_pc_8548 ], [ 0, %dec_label_pc_8544 ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_854c = mul i32 %v0_8554, 8
  %v5_854c = add i32 %v4_854c, %stack_var_-52.3
  %v6_854c = inttoptr i32 %v5_854c to i32*
  %v7_854c = load i32, i32* %v6_854c, align 4
  store i32 %v7_854c, i32* %r0.global-to-local, align 4
  %v2_8550 = icmp eq i32 %v7_854c, 0
  store i1 %v2_8550, i1* %cpsr_z.global-to-local, align 1
  %v1_8554 = add i32 %v0_8554, 1
  %v1_8558 = xor i1 %v2_8550, true
  call void @__pseudo_cond_branch(i1 %v1_8558, i32 ptrtoint (i32* @global_var_121d0.26 to i32))
  %v0_855c = load i32, i32* @sb, align 4
  %v9_855c = icmp eq i32 %v0_855c, %v1_8554
  store i1 %v9_855c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_855c, label %dec_label_pc_8564, label %dec_label_pc_8548

dec_label_pc_8564:                                ; preds = %dec_label_pc_8548, %dec_label_pc_853c
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_8320, i32* @r4, align 4
  store i32 %v6_8320, i32* @r5, align 4
  store i32 %v9_8320, i32* @r6, align 4
  store i32 %v12_8320, i32* @r7, align 4
  store i32 %v15_8320, i32* @r8, align 4
  store i32 %v18_8320, i32* @sb, align 4
  store i32 %v21_8320, i32* @sl, align 4
  store i32 %v27_8320, i32* @lr, align 4
  %v0_8570 = call i32 @function_121d0()
  store i32 %v0_8570, i32* %r0.global-to-local, align 4
  ret i32 %v0_8570

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_84dc, { 1, 0, 2 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_84c8, { 1, 0 }
  uselistorder i32 %v2_8484, { 2, 1, 0 }
  uselistorder i32 %v2_849c, { 1, 0 }
  uselistorder i32 %v4_8498, { 0, 2, 1, 3 }
  uselistorder i32 %v1_848c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8488, { 1, 0 }
  uselistorder i32 %v0_8424, { 0, 2, 1 }
  uselistorder i32 %v0_8414, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8410, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_83f4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_83d0, { 1, 0 }
  uselistorder i32 %v0_83b4, { 0, 2, 1 }
  uselistorder i32 %v0_8390, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8384, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_8370, { 2, 1, 0 }
  uselistorder i32 %v4_835c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_8350, { 1, 0, 2 }
  uselistorder i32 %v0_8330, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 22, 2, 20, 3, 21, 4, 7, 11, 8, 5, 6, 9, 10, 17, 12, 14, 13, 15, 16, 19, 18, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 4, 2, 0, 3, 5, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_8520, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8344, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_8574(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8574:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8574 = urem i32 %arg1, 256
  %v2_8578 = icmp eq i32 %v1_8574, 0
  %v3_857c = load i32, i32* @r4, align 4
  br i1 %v2_8578, label %dec_label_pc_85c4, label %dec_label_pc_8588

dec_label_pc_8588:                                ; preds = %dec_label_pc_8574
  %v0_8588 = load i32, i32* %r1.global-to-local, align 4
  %v1_8588 = add i32 %v0_8588, 4
  %v2_8588 = inttoptr i32 %v1_8588 to i8*
  %v3_8588 = load i8, i8* %v2_8588, align 1
  %v4_8588 = zext i8 %v3_8588 to i32
  %v1_858c = urem i32 %arg3, 256
  %v9_8590 = icmp eq i32 %v4_8588, %v1_858c
  br i1 %v9_8590, label %dec_label_pc_85cc, label %dec_label_pc_85b4.preheader

dec_label_pc_85b4.preheader:                      ; preds = %dec_label_pc_8588
  br label %dec_label_pc_85b4

dec_label_pc_85a4:                                ; preds = %dec_label_pc_85b4
  %v1_85a4 = add i32 %v0_85ac.in, 12
  %v2_85a4 = inttoptr i32 %v1_85a4 to i8*
  %v3_85a4 = load i8, i8* %v2_85a4, align 1
  %v4_85a4 = zext i8 %v3_85a4 to i32
  %v9_85a8 = icmp eq i32 %v1_858c, %v4_85a4
  br i1 %v9_85a8, label %dec_label_pc_85cc, label %dec_label_pc_85b4

dec_label_pc_85b4:                                ; preds = %dec_label_pc_85b4.preheader, %dec_label_pc_85a4
  %v0_85ac.in = phi i32 [ %v0_8588, %dec_label_pc_85b4.preheader ], [ %v0_85ac, %dec_label_pc_85a4 ]
  %v0_85b4 = phi i32 [ 0, %dec_label_pc_85b4.preheader ], [ %v1_85b4, %dec_label_pc_85a4 ]
  %v0_85ac = add i32 %v0_85ac.in, 8
  %v1_85b4 = add i32 %v0_85b4, 1
  %v9_85b8 = icmp eq i32 %v1_8574, %v1_85b4
  store i32 %v0_85ac, i32* %r1.global-to-local, align 4
  br i1 %v9_85b8, label %dec_label_pc_85c4, label %dec_label_pc_85a4

dec_label_pc_85c4:                                ; preds = %dec_label_pc_85b4, %dec_label_pc_85cc, %dec_label_pc_8574
  store i32 %v3_857c, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_85cc:                                ; preds = %dec_label_pc_85a4, %dec_label_pc_8588
  %v0_85cc = phi i32 [ %v0_8588, %dec_label_pc_8588 ], [ %v0_85ac, %dec_label_pc_85a4 ]
  %v1_85cc = inttoptr i32 %v0_85cc to i32*
  %v2_85cc = load i32, i32* %v1_85cc, align 4
  store i32 %v2_85cc, i32* @r0, align 4
  %v2_85d0 = icmp eq i32 %v2_85cc, 0
  br i1 %v2_85d0, label %dec_label_pc_85c4, label %dec_label_pc_85d8

dec_label_pc_85d8:                                ; preds = %dec_label_pc_85cc
  store i32 %v3_857c, i32* @r4, align 4
  %v1_85dc = call i32 @function_11c6c(i32 %v2_85cc)
  ret i32 %v1_85dc

; uselistorder directives
  uselistorder i32 %v1_85b4, { 1, 0 }
  uselistorder i32 %v0_85ac, { 1, 0, 2 }
  uselistorder i32 %v0_85ac.in, { 1, 0 }
  uselistorder i32 %v1_858c, { 1, 0 }
  uselistorder i32 %v0_8588, { 1, 0, 2 }
  uselistorder i32 %v3_857c, { 1, 0 }
  uselistorder i32 %v1_8574, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_85c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_85b4, { 1, 0 }
}

define i32 @function_85e0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_85e0:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_85e0 = urem i32 %arg1, 256
  %v2_85e4 = icmp eq i32 %v1_85e0, 0
  %v3_85e8 = load i32, i32* @r4, align 4
  %v6_85e8 = load i32, i32* @lr, align 4
  br i1 %v2_85e4, label %dec_label_pc_8630, label %dec_label_pc_85f4

dec_label_pc_85f4:                                ; preds = %dec_label_pc_85e0
  %v0_85f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_85f4 = add i32 %v0_85f4, 4
  %v2_85f4 = inttoptr i32 %v1_85f4 to i8*
  %v3_85f4 = load i8, i8* %v2_85f4, align 1
  %v4_85f4 = zext i8 %v3_85f4 to i32
  %v1_85f8 = urem i32 %arg3, 256
  %v9_85fc = icmp eq i32 %v4_85f4, %v1_85f8
  br i1 %v9_85fc, label %dec_label_pc_8638, label %dec_label_pc_8620.preheader

dec_label_pc_8620.preheader:                      ; preds = %dec_label_pc_85f4
  br label %dec_label_pc_8620

dec_label_pc_8610:                                ; preds = %dec_label_pc_8620
  %v1_8610 = add i32 %v0_8618.in, 12
  %v2_8610 = inttoptr i32 %v1_8610 to i8*
  %v3_8610 = load i8, i8* %v2_8610, align 1
  %v4_8610 = zext i8 %v3_8610 to i32
  %v9_8614 = icmp eq i32 %v1_85f8, %v4_8610
  br i1 %v9_8614, label %dec_label_pc_8638, label %dec_label_pc_8620

dec_label_pc_8620:                                ; preds = %dec_label_pc_8620.preheader, %dec_label_pc_8610
  %v0_8618.in = phi i32 [ %v0_85f4, %dec_label_pc_8620.preheader ], [ %v0_8618, %dec_label_pc_8610 ]
  %v0_8620 = phi i32 [ 0, %dec_label_pc_8620.preheader ], [ %v1_8620, %dec_label_pc_8610 ]
  %v0_8618 = add i32 %v0_8618.in, 8
  %v1_8620 = add i32 %v0_8620, 1
  store i32 %v1_8620, i32* @lr, align 4
  %v9_8624 = icmp eq i32 %v1_85e0, %v1_8620
  store i32 %v0_8618, i32* %r1.global-to-local, align 4
  br i1 %v9_8624, label %dec_label_pc_8630, label %dec_label_pc_8610

dec_label_pc_8630:                                ; preds = %dec_label_pc_8620, %dec_label_pc_8638, %dec_label_pc_85e0
  store i32 %v3_85e8, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_8638:                                ; preds = %dec_label_pc_8610, %dec_label_pc_85f4
  %v0_8638 = phi i32 [ %v0_85f4, %dec_label_pc_85f4 ], [ %v0_8618, %dec_label_pc_8610 ]
  %v1_8638 = inttoptr i32 %v0_8638 to i32*
  %v2_8638 = load i32, i32* %v1_8638, align 4
  %v2_863c = icmp eq i32 %v2_8638, 0
  br i1 %v2_863c, label %dec_label_pc_8630, label %dec_label_pc_8644

dec_label_pc_8644:                                ; preds = %dec_label_pc_8638
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_85e8, i32* @r4, align 4
  store i32 %v6_85e8, i32* @lr, align 4
  %v2_864c = inttoptr i32 %v2_8638 to i8*
  %v3_864c = call i32 @function_10d9c(i8* %v2_864c, i32 10)
  ret i32 %v3_864c

; uselistorder directives
  uselistorder i32 %v1_8620, { 1, 2, 0 }
  uselistorder i32 %v0_8618, { 1, 0, 2 }
  uselistorder i32 %v0_8618.in, { 1, 0 }
  uselistorder i32 %v1_85f8, { 1, 0 }
  uselistorder i32 %v0_85f4, { 1, 0, 2 }
  uselistorder i32 %v3_85e8, { 1, 0 }
  uselistorder i32 %v1_85e0, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_8630, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8620, { 1, 0 }
}

define i32 @function_8650(i32 %arg1) local_unnamed_addr {
dec_label_pc_8650:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8650 = load i32, i32* @r4, align 4
  store i32 %v3_8650, i32* %stack_var_-24, align 4
  %v6_8650 = load i32, i32* @r5, align 4
  %v9_8650 = load i32, i32* @r6, align 4
  %v12_8650 = load i32, i32* @r7, align 4
  %v15_8650 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_865c = call i32 @function_12178(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1c53c.21 to i32), i32* @r4, align 4
  %v2_8664 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_8664 = zext i8 %v2_8664 to i32
  store i32 ptrtoint (i32* @global_var_1c540.23 to i32), i32* @r6, align 4
  store i32 48568, i32* %r2.global-to-local, align 4
  store i32 %v2_865c, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8678 = mul nuw nsw i32 %v3_8664, 4
  store i32 %v3_8678, i32* %r1.global-to-local, align 4
  %v2_867c = load i32, i32* @global_var_1c540.23, align 4
  %v2_8680 = inttoptr i32 %v2_865c to i32*
  store i32 48568, i32* %v2_8680, align 4
  %v3_8684 = load i32, i32* @r5, align 4
  %v4_8684 = add i32 %v3_8684, 4
  %v5_8684 = inttoptr i32 %v4_8684 to i8*
  store i8 0, i8* %v5_8684, align 1
  %v0_8688 = load i32, i32* %r1.global-to-local, align 4
  %v1_8688 = add i32 %v0_8688, 4
  store i32 %v1_8688, i32* %r1.global-to-local, align 4
  %v5_868c = call i32 @function_122c0(i32 %v2_867c, i32 %v1_8688, i32 48568, i32 0)
  %v2_8690 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_8690 = zext i8 %v2_8690 to i32
  store i32 %v3_8690, i32* %r3.global-to-local, align 4
  store i32 %v5_868c, i32* %ip.global-to-local, align 4
  %v0_8698 = load i32, i32* @r5, align 4
  %v5_8698 = mul nuw nsw i32 %v3_8690, 4
  %v6_8698 = add i32 %v5_8698, %v5_868c
  %v7_8698 = inttoptr i32 %v6_8698 to i32*
  store i32 %v0_8698, i32* %v7_8698, align 4
  store i32 ptrtoint (i8* @global_var_1c53d.30 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_86a8 = load i32, i32* @r4, align 4
  %v4_86a8 = inttoptr i32 %v3_86a8 to i8*
  store i8 ptrtoint (i8* @global_var_1c53d.30 to i8), i8* %v4_86a8, align 1
  %v0_86ac = load i32, i32* %ip.global-to-local, align 4
  %v1_86ac = load i32, i32* @r6, align 4
  %v2_86ac = inttoptr i32 %v1_86ac to i32*
  store i32 %v0_86ac, i32* %v2_86ac, align 4
  %v2_86b0 = call i32 @function_12178(i32 1, i32 8)
  %v2_86b4 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_86b4 = zext i8 %v2_86b4 to i32
  store i32 ptrtoint (i32* @global_var_c444.32 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_86b0, i32* @r5, align 4
  %v3_86c4 = mul nuw nsw i32 %v3_86b4, 4
  store i32 %v3_86c4, i32* %r1.global-to-local, align 4
  %v2_86c8 = load i32, i32* @global_var_1c540.23, align 4
  %v2_86cc = inttoptr i32 %v2_86b0 to i32*
  store i32 ptrtoint (i32* @global_var_c444.32 to i32), i32* %v2_86cc, align 4
  %v0_86d0 = load i32, i32* @r8, align 4
  %v1_86d0 = trunc i32 %v0_86d0 to i8
  %v2_86d0 = load i32, i32* @r5, align 4
  %v3_86d0 = add i32 %v2_86d0, 4
  %v4_86d0 = inttoptr i32 %v3_86d0 to i8*
  store i8 %v1_86d0, i8* %v4_86d0, align 1
  %v0_86d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_86d4 = add i32 %v0_86d4, 4
  store i32 %v1_86d4, i32* %r1.global-to-local, align 4
  %v5_86d8 = call i32 @function_122c0(i32 %v2_86c8, i32 %v1_86d4, i32 sext (i8 ptrtoint (i8* @global_var_1c53d.30 to i8) to i32), i32 ptrtoint (i32* @global_var_c444.32 to i32))
  %v2_86dc = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_86dc = zext i8 %v2_86dc to i32
  store i32 %v3_86dc, i32* %r3.global-to-local, align 4
  store i32 %v5_86d8, i32* %ip.global-to-local, align 4
  %v0_86e4 = load i32, i32* @r5, align 4
  %v5_86e4 = mul nuw nsw i32 %v3_86dc, 4
  %v6_86e4 = add i32 %v5_86e4, %v5_86d8
  %v7_86e4 = inttoptr i32 %v6_86e4 to i32*
  store i32 %v0_86e4, i32* %v7_86e4, align 4
  %v0_86e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_86e8 = load i32, i32* @r8, align 4
  %v2_86e8 = add i32 %v1_86e8, %v0_86e8
  store i32 %v2_86e8, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_86f4 = load i32, i32* @r6, align 4
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  store i32 %v0_86f4, i32* %v2_86f4, align 4
  %v0_86f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86f8 = trunc i32 %v0_86f8 to i8
  %v2_86f8 = load i32, i32* @r4, align 4
  %v3_86f8 = inttoptr i32 %v2_86f8 to i8*
  store i8 %v1_86f8, i8* %v3_86f8, align 1
  %v2_86fc = call i32 @function_12178(i32 %v1_86e8, i32 8)
  %v2_8700 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_8700 = zext i8 %v2_8700 to i32
  store i32 ptrtoint (i32* @global_var_c908.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86fc, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8710 = mul nuw nsw i32 %v3_8700, 4
  store i32 %v3_8710, i32* %r1.global-to-local, align 4
  %v2_8714 = load i32, i32* @global_var_1c540.23, align 4
  %v2_8718 = inttoptr i32 %v2_86fc to i32*
  store i32 ptrtoint (i32* @global_var_c908.34 to i32), i32* %v2_8718, align 4
  %v3_871c = load i32, i32* @r5, align 4
  %v4_871c = add i32 %v3_871c, 4
  %v5_871c = inttoptr i32 %v4_871c to i8*
  store i8 2, i8* %v5_871c, align 1
  %v0_8720 = load i32, i32* %r1.global-to-local, align 4
  %v1_8720 = add i32 %v0_8720, 4
  store i32 %v1_8720, i32* %r1.global-to-local, align 4
  %v5_8724 = call i32 @function_122c0(i32 %v2_8714, i32 %v1_8720, i32 ptrtoint (i32* @global_var_c908.34 to i32), i32 2)
  %v2_8728 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_8728 = zext i8 %v2_8728 to i32
  store i32 %v3_8728, i32* %r3.global-to-local, align 4
  store i32 %v5_8724, i32* %ip.global-to-local, align 4
  %v1_8730 = load i32, i32* @r8, align 4
  %v2_8730 = add i32 %v1_8730, %v3_8728
  %v3_8730 = trunc i32 %v2_8730 to i8
  store i32 %v2_8730, i32* %r2.global-to-local, align 4
  %v0_8734 = load i32, i32* @r5, align 4
  %v5_8734 = mul nuw nsw i32 %v3_8728, 4
  %v6_8734 = add i32 %v5_8734, %v5_8724
  %v7_8734 = inttoptr i32 %v6_8734 to i32*
  store i32 %v0_8734, i32* %v7_8734, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_873c = load i32, i32* @r8, align 4
  %v3_8740 = load i32, i32* @r4, align 4
  %v4_8740 = inttoptr i32 %v3_8740 to i8*
  store i8 %v3_8730, i8* %v4_8740, align 1
  %v0_8744 = load i32, i32* %ip.global-to-local, align 4
  %v1_8744 = load i32, i32* @r6, align 4
  %v2_8744 = inttoptr i32 %v1_8744 to i32*
  store i32 %v0_8744, i32* %v2_8744, align 4
  %v2_8748 = call i32 @function_12178(i32 %v0_873c, i32 8)
  %v2_874c = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_874c = zext i8 %v2_874c to i32
  store i32 ptrtoint (i32* @global_var_bad4.36 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8748, i32* @r5, align 4
  %v3_875c = mul nuw nsw i32 %v3_874c, 4
  store i32 %v3_875c, i32* %r1.global-to-local, align 4
  %v2_8760 = load i32, i32* @global_var_1c540.23, align 4
  %v2_8764 = inttoptr i32 %v2_8748 to i32*
  store i32 ptrtoint (i32* @global_var_bad4.36 to i32), i32* %v2_8764, align 4
  %v0_8768 = load i32, i32* @r7, align 4
  %v1_8768 = trunc i32 %v0_8768 to i8
  %v2_8768 = load i32, i32* @r5, align 4
  %v3_8768 = add i32 %v2_8768, 4
  %v4_8768 = inttoptr i32 %v3_8768 to i8*
  store i8 %v1_8768, i8* %v4_8768, align 1
  %v0_876c = load i32, i32* %r1.global-to-local, align 4
  %v1_876c = add i32 %v0_876c, 4
  store i32 %v1_876c, i32* %r1.global-to-local, align 4
  %v5_8770 = call i32 @function_122c0(i32 %v2_8760, i32 %v1_876c, i32 %v2_8730, i32 ptrtoint (i32* @global_var_bad4.36 to i32))
  %v2_8774 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_8774 = zext i8 %v2_8774 to i32
  store i32 %v3_8774, i32* %r3.global-to-local, align 4
  store i32 %v5_8770, i32* %ip.global-to-local, align 4
  %v0_877c = load i32, i32* @r5, align 4
  %v5_877c = mul nuw nsw i32 %v3_8774, 4
  %v6_877c = add i32 %v5_877c, %v5_8770
  %v7_877c = inttoptr i32 %v6_877c to i32*
  store i32 %v0_877c, i32* %v7_877c, align 4
  %v0_8780 = load i32, i32* %r3.global-to-local, align 4
  %v1_8780 = load i32, i32* @r8, align 4
  %v2_8780 = add i32 %v1_8780, %v0_8780
  store i32 %v2_8780, i32* %r2.global-to-local, align 4
  %v0_8784 = load i32, i32* @r7, align 4
  store i32 %v0_8784, i32* %r1.global-to-local, align 4
  %v0_878c = load i32, i32* %ip.global-to-local, align 4
  %v1_878c = load i32, i32* @r6, align 4
  %v2_878c = inttoptr i32 %v1_878c to i32*
  store i32 %v0_878c, i32* %v2_878c, align 4
  %v0_8790 = load i32, i32* %r2.global-to-local, align 4
  %v1_8790 = trunc i32 %v0_8790 to i8
  %v2_8790 = load i32, i32* @r4, align 4
  %v3_8790 = inttoptr i32 %v2_8790 to i8*
  store i8 %v1_8790, i8* %v3_8790, align 1
  %v2_8794 = call i32 @function_12178(i32 %v1_8780, i32 %v0_8784)
  %v2_8798 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_8798 = zext i8 %v2_8798 to i32
  store i32 ptrtoint (i32* @global_var_b388.38 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8794, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_87a8 = mul nuw nsw i32 %v3_8798, 4
  store i32 %v3_87a8, i32* %r1.global-to-local, align 4
  %v2_87ac = load i32, i32* @global_var_1c540.23, align 4
  %v2_87b0 = inttoptr i32 %v2_8794 to i32*
  store i32 ptrtoint (i32* @global_var_b388.38 to i32), i32* %v2_87b0, align 4
  %v3_87b4 = load i32, i32* @r5, align 4
  %v4_87b4 = add i32 %v3_87b4, 4
  %v5_87b4 = inttoptr i32 %v4_87b4 to i8*
  store i8 3, i8* %v5_87b4, align 1
  %v0_87b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_87b8 = add i32 %v0_87b8, 4
  store i32 %v1_87b8, i32* %r1.global-to-local, align 4
  %v5_87bc = call i32 @function_122c0(i32 %v2_87ac, i32 %v1_87b8, i32 ptrtoint (i32* @global_var_b388.38 to i32), i32 3)
  %v2_87c0 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_87c0 = zext i8 %v2_87c0 to i32
  store i32 %v3_87c0, i32* %r3.global-to-local, align 4
  store i32 %v5_87bc, i32* %ip.global-to-local, align 4
  %v0_87c8 = load i32, i32* @r5, align 4
  %v5_87c8 = mul nuw nsw i32 %v3_87c0, 4
  %v6_87c8 = add i32 %v5_87c8, %v5_87bc
  %v7_87c8 = inttoptr i32 %v6_87c8 to i32*
  store i32 %v0_87c8, i32* %v7_87c8, align 4
  %v0_87cc = load i32, i32* %r3.global-to-local, align 4
  %v1_87cc = load i32, i32* @r8, align 4
  %v2_87cc = add i32 %v1_87cc, %v0_87cc
  store i32 %v2_87cc, i32* %r2.global-to-local, align 4
  %v0_87d0 = load i32, i32* @r7, align 4
  store i32 %v0_87d0, i32* %r1.global-to-local, align 4
  %v0_87d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_87d8 = load i32, i32* @r6, align 4
  %v2_87d8 = inttoptr i32 %v1_87d8 to i32*
  store i32 %v0_87d8, i32* %v2_87d8, align 4
  %v0_87dc = load i32, i32* %r2.global-to-local, align 4
  %v1_87dc = trunc i32 %v0_87dc to i8
  %v2_87dc = load i32, i32* @r4, align 4
  %v3_87dc = inttoptr i32 %v2_87dc to i8*
  store i8 %v1_87dc, i8* %v3_87dc, align 1
  %v2_87e0 = call i32 @function_12178(i32 %v1_87cc, i32 %v0_87d0)
  %v2_87e4 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_87e4 = zext i8 %v2_87e4 to i32
  store i32 ptrtoint (i32* @global_var_ac14.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87e0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_87f4 = mul nuw nsw i32 %v3_87e4, 4
  store i32 %v3_87f4, i32* %r1.global-to-local, align 4
  %v2_87f8 = load i32, i32* @global_var_1c540.23, align 4
  %v2_87fc = inttoptr i32 %v2_87e0 to i32*
  store i32 ptrtoint (i32* @global_var_ac14.40 to i32), i32* %v2_87fc, align 4
  %v3_8800 = load i32, i32* @r5, align 4
  %v4_8800 = add i32 %v3_8800, 4
  %v5_8800 = inttoptr i32 %v4_8800 to i8*
  store i8 4, i8* %v5_8800, align 1
  %v0_8804 = load i32, i32* %r1.global-to-local, align 4
  %v1_8804 = add i32 %v0_8804, 4
  store i32 %v1_8804, i32* %r1.global-to-local, align 4
  %v5_8808 = call i32 @function_122c0(i32 %v2_87f8, i32 %v1_8804, i32 ptrtoint (i32* @global_var_ac14.40 to i32), i32 4)
  %v2_880c = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_880c = zext i8 %v2_880c to i32
  store i32 %v3_880c, i32* %r3.global-to-local, align 4
  store i32 %v5_8808, i32* %ip.global-to-local, align 4
  %v0_8814 = load i32, i32* @r5, align 4
  %v5_8814 = mul nuw nsw i32 %v3_880c, 4
  %v6_8814 = add i32 %v5_8814, %v5_8808
  %v7_8814 = inttoptr i32 %v6_8814 to i32*
  store i32 %v0_8814, i32* %v7_8814, align 4
  %v0_8818 = load i32, i32* %r3.global-to-local, align 4
  %v1_8818 = load i32, i32* @r8, align 4
  %v2_8818 = add i32 %v1_8818, %v0_8818
  store i32 %v2_8818, i32* %r2.global-to-local, align 4
  %v0_881c = load i32, i32* @r7, align 4
  store i32 %v0_881c, i32* %r1.global-to-local, align 4
  %v0_8824 = load i32, i32* %ip.global-to-local, align 4
  %v1_8824 = load i32, i32* @r6, align 4
  %v2_8824 = inttoptr i32 %v1_8824 to i32*
  store i32 %v0_8824, i32* %v2_8824, align 4
  %v0_8828 = load i32, i32* %r2.global-to-local, align 4
  %v1_8828 = trunc i32 %v0_8828 to i8
  %v2_8828 = load i32, i32* @r4, align 4
  %v3_8828 = inttoptr i32 %v2_8828 to i8*
  store i8 %v1_8828, i8* %v3_8828, align 1
  %v2_882c = call i32 @function_12178(i32 %v1_8818, i32 %v0_881c)
  %v2_8830 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_8830 = zext i8 %v2_8830 to i32
  store i32 ptrtoint (i32* @global_var_a3b4.42 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_882c, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_8840 = mul nuw nsw i32 %v3_8830, 4
  store i32 %v3_8840, i32* %r1.global-to-local, align 4
  %v2_8844 = load i32, i32* @global_var_1c540.23, align 4
  %v2_8848 = inttoptr i32 %v2_882c to i32*
  store i32 ptrtoint (i32* @global_var_a3b4.42 to i32), i32* %v2_8848, align 4
  %v3_884c = load i32, i32* @r5, align 4
  %v4_884c = add i32 %v3_884c, 4
  %v5_884c = inttoptr i32 %v4_884c to i8*
  store i8 5, i8* %v5_884c, align 1
  %v0_8850 = load i32, i32* %r1.global-to-local, align 4
  %v1_8850 = add i32 %v0_8850, 4
  store i32 %v1_8850, i32* %r1.global-to-local, align 4
  %v5_8854 = call i32 @function_122c0(i32 %v2_8844, i32 %v1_8850, i32 ptrtoint (i32* @global_var_a3b4.42 to i32), i32 5)
  %v2_8858 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_8858 = zext i8 %v2_8858 to i32
  store i32 %v3_8858, i32* %r3.global-to-local, align 4
  store i32 %v5_8854, i32* %ip.global-to-local, align 4
  %v0_8860 = load i32, i32* @r5, align 4
  %v5_8860 = mul nuw nsw i32 %v3_8858, 4
  %v6_8860 = add i32 %v5_8860, %v5_8854
  %v7_8860 = inttoptr i32 %v6_8860 to i32*
  store i32 %v0_8860, i32* %v7_8860, align 4
  %v0_8864 = load i32, i32* %r3.global-to-local, align 4
  %v1_8864 = load i32, i32* @r8, align 4
  %v2_8864 = add i32 %v1_8864, %v0_8864
  store i32 %v2_8864, i32* %r2.global-to-local, align 4
  %v0_8868 = load i32, i32* @r7, align 4
  store i32 %v0_8868, i32* %r1.global-to-local, align 4
  %v0_8870 = load i32, i32* %ip.global-to-local, align 4
  %v1_8870 = load i32, i32* @r6, align 4
  %v2_8870 = inttoptr i32 %v1_8870 to i32*
  store i32 %v0_8870, i32* %v2_8870, align 4
  %v0_8874 = load i32, i32* %r2.global-to-local, align 4
  %v1_8874 = trunc i32 %v0_8874 to i8
  %v2_8874 = load i32, i32* @r4, align 4
  %v3_8874 = inttoptr i32 %v2_8874 to i8*
  store i8 %v1_8874, i8* %v3_8874, align 1
  %v2_8878 = call i32 @function_12178(i32 %v1_8864, i32 %v0_8868)
  %v2_887c = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_887c = zext i8 %v2_887c to i32
  store i32 39764, i32* %r2.global-to-local, align 4
  store i32 %v2_8878, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_888c = mul nuw nsw i32 %v3_887c, 4
  store i32 %v3_888c, i32* %r1.global-to-local, align 4
  %v2_8890 = load i32, i32* @global_var_1c540.23, align 4
  %v2_8894 = inttoptr i32 %v2_8878 to i32*
  store i32 39764, i32* %v2_8894, align 4
  %v3_8898 = load i32, i32* @r5, align 4
  %v4_8898 = add i32 %v3_8898, 4
  %v5_8898 = inttoptr i32 %v4_8898 to i8*
  store i8 10, i8* %v5_8898, align 1
  %v0_889c = load i32, i32* %r1.global-to-local, align 4
  %v1_889c = add i32 %v0_889c, 4
  store i32 %v1_889c, i32* %r1.global-to-local, align 4
  %v5_88a0 = call i32 @function_122c0(i32 %v2_8890, i32 %v1_889c, i32 39764, i32 10)
  %v2_88a4 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_88a4 = zext i8 %v2_88a4 to i32
  store i32 %v3_88a4, i32* %r3.global-to-local, align 4
  store i32 %v5_88a0, i32* %ip.global-to-local, align 4
  %v0_88ac = load i32, i32* @r5, align 4
  %v5_88ac = mul nuw nsw i32 %v3_88a4, 4
  %v6_88ac = add i32 %v5_88ac, %v5_88a0
  %v7_88ac = inttoptr i32 %v6_88ac to i32*
  store i32 %v0_88ac, i32* %v7_88ac, align 4
  %v0_88b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88b0 = load i32, i32* @r8, align 4
  %v2_88b0 = add i32 %v1_88b0, %v0_88b0
  store i32 %v2_88b0, i32* %r2.global-to-local, align 4
  %v0_88b4 = load i32, i32* @r7, align 4
  store i32 %v0_88b4, i32* %r1.global-to-local, align 4
  %v0_88bc = load i32, i32* %ip.global-to-local, align 4
  %v1_88bc = load i32, i32* @r6, align 4
  %v2_88bc = inttoptr i32 %v1_88bc to i32*
  store i32 %v0_88bc, i32* %v2_88bc, align 4
  %v0_88c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_88c0 = trunc i32 %v0_88c0 to i8
  %v2_88c0 = load i32, i32* @r4, align 4
  %v3_88c0 = inttoptr i32 %v2_88c0 to i8*
  store i8 %v1_88c0, i8* %v3_88c0, align 1
  %v2_88c4 = call i32 @function_12178(i32 %v1_88b0, i32 %v0_88b4)
  %v2_88c8 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_88c8 = zext i8 %v2_88c8 to i32
  store i32 ptrtoint (i32* @global_var_9154.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88c4, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_88d8 = mul nuw nsw i32 %v3_88c8, 4
  store i32 %v3_88d8, i32* %r1.global-to-local, align 4
  %v2_88dc = load i32, i32* @global_var_1c540.23, align 4
  %v2_88e0 = inttoptr i32 %v2_88c4 to i32*
  store i32 ptrtoint (i32* @global_var_9154.45 to i32), i32* %v2_88e0, align 4
  %v3_88e4 = load i32, i32* @r5, align 4
  %v4_88e4 = add i32 %v3_88e4, 4
  %v5_88e4 = inttoptr i32 %v4_88e4 to i8*
  store i8 6, i8* %v5_88e4, align 1
  %v0_88e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_88e8 = add i32 %v0_88e8, 4
  store i32 %v1_88e8, i32* %r1.global-to-local, align 4
  %v5_88ec = call i32 @function_122c0(i32 %v2_88dc, i32 %v1_88e8, i32 ptrtoint (i32* @global_var_9154.45 to i32), i32 6)
  %v2_88f0 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_88f0 = zext i8 %v2_88f0 to i32
  store i32 %v3_88f0, i32* %r3.global-to-local, align 4
  store i32 %v5_88ec, i32* %ip.global-to-local, align 4
  %v0_88f8 = load i32, i32* @r5, align 4
  %v5_88f8 = mul nuw nsw i32 %v3_88f0, 4
  %v6_88f8 = add i32 %v5_88f8, %v5_88ec
  %v7_88f8 = inttoptr i32 %v6_88f8 to i32*
  store i32 %v0_88f8, i32* %v7_88f8, align 4
  %v0_88fc = load i32, i32* %r3.global-to-local, align 4
  %v1_88fc = load i32, i32* @r8, align 4
  %v2_88fc = add i32 %v1_88fc, %v0_88fc
  store i32 %v2_88fc, i32* %r2.global-to-local, align 4
  %v0_8900 = load i32, i32* @r7, align 4
  store i32 %v0_8900, i32* %r1.global-to-local, align 4
  %v0_8908 = load i32, i32* %ip.global-to-local, align 4
  %v1_8908 = load i32, i32* @r6, align 4
  %v2_8908 = inttoptr i32 %v1_8908 to i32*
  store i32 %v0_8908, i32* %v2_8908, align 4
  %v0_890c = load i32, i32* %r2.global-to-local, align 4
  %v1_890c = trunc i32 %v0_890c to i8
  %v2_890c = load i32, i32* @r4, align 4
  %v3_890c = inttoptr i32 %v2_890c to i8*
  store i8 %v1_890c, i8* %v3_890c, align 1
  %v2_8910 = call i32 @function_12178(i32 %v1_88fc, i32 %v0_8900)
  %v2_8914 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_8914 = zext i8 %v2_8914 to i32
  store i32 ptrtoint (i32* @global_var_89d8.47 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8910, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_8924 = mul nuw nsw i32 %v3_8914, 4
  store i32 %v3_8924, i32* %r1.global-to-local, align 4
  %v2_8928 = load i32, i32* @global_var_1c540.23, align 4
  %v2_892c = inttoptr i32 %v2_8910 to i32*
  store i32 ptrtoint (i32* @global_var_89d8.47 to i32), i32* %v2_892c, align 4
  %v3_8930 = load i32, i32* @r5, align 4
  %v4_8930 = add i32 %v3_8930, 4
  %v5_8930 = inttoptr i32 %v4_8930 to i8*
  store i8 7, i8* %v5_8930, align 1
  %v0_8934 = load i32, i32* %r1.global-to-local, align 4
  %v1_8934 = add i32 %v0_8934, 4
  store i32 %v1_8934, i32* %r1.global-to-local, align 4
  %v5_8938 = call i32 @function_122c0(i32 %v2_8928, i32 %v1_8934, i32 ptrtoint (i32* @global_var_89d8.47 to i32), i32 7)
  %v2_893c = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_893c = zext i8 %v2_893c to i32
  store i32 %v3_893c, i32* %r3.global-to-local, align 4
  store i32 %v5_8938, i32* %ip.global-to-local, align 4
  %v0_8944 = load i32, i32* @r5, align 4
  %v5_8944 = mul nuw nsw i32 %v3_893c, 4
  %v6_8944 = add i32 %v5_8944, %v5_8938
  %v7_8944 = inttoptr i32 %v6_8944 to i32*
  store i32 %v0_8944, i32* %v7_8944, align 4
  %v0_8948 = load i32, i32* %r3.global-to-local, align 4
  %v1_8948 = load i32, i32* @r8, align 4
  %v2_8948 = add i32 %v1_8948, %v0_8948
  store i32 %v2_8948, i32* %r2.global-to-local, align 4
  %v0_894c = load i32, i32* @r7, align 4
  store i32 %v0_894c, i32* %r1.global-to-local, align 4
  %v1_8954 = trunc i32 %v2_8948 to i8
  %v2_8954 = load i32, i32* @r4, align 4
  %v3_8954 = inttoptr i32 %v2_8954 to i8*
  store i8 %v1_8954, i8* %v3_8954, align 1
  %v0_8958 = load i32, i32* %ip.global-to-local, align 4
  %v1_8958 = load i32, i32* @r6, align 4
  %v2_8958 = inttoptr i32 %v1_8958 to i32*
  store i32 %v0_8958, i32* %v2_8958, align 4
  %v2_895c = call i32 @function_12178(i32 %v1_8948, i32 %v0_894c)
  %v2_8960 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_8960 = zext i8 %v2_8960 to i32
  store i32 ptrtoint (i32* @global_var_9870.49 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_895c, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_8970 = mul nuw nsw i32 %v3_8960, 4
  store i32 %v3_8970, i32* %r1.global-to-local, align 4
  %v2_8974 = load i32, i32* @global_var_1c540.23, align 4
  %v2_8978 = inttoptr i32 %v2_895c to i32*
  store i32 ptrtoint (i32* @global_var_9870.49 to i32), i32* %v2_8978, align 4
  %v3_897c = load i32, i32* @r5, align 4
  %v4_897c = add i32 %v3_897c, 4
  %v5_897c = inttoptr i32 %v4_897c to i8*
  store i8 9, i8* %v5_897c, align 1
  %v0_8980 = load i32, i32* %r1.global-to-local, align 4
  %v1_8980 = add i32 %v0_8980, 4
  store i32 %v1_8980, i32* %r1.global-to-local, align 4
  %v5_8984 = call i32 @function_122c0(i32 %v2_8974, i32 %v1_8980, i32 ptrtoint (i32* @global_var_9870.49 to i32), i32 9)
  %v2_8988 = load i8, i8* bitcast (i8** @global_var_1c53c.21 to i8*), align 4
  %v3_8988 = zext i8 %v2_8988 to i32
  store i32 %v3_8988, i32* %r3.global-to-local, align 4
  %v1_898c = load i32, i32* @r6, align 4
  %v2_898c = inttoptr i32 %v1_898c to i32*
  store i32 %v5_8984, i32* %v2_898c, align 4
  %v0_8990 = load i32, i32* @r5, align 4
  %v2_8990 = load i32, i32* %r3.global-to-local, align 4
  %v5_8990 = mul i32 %v2_8990, 4
  %v6_8990 = add i32 %v5_8990, %v5_8984
  %v7_8990 = inttoptr i32 %v6_8990 to i32*
  store i32 %v0_8990, i32* %v7_8990, align 4
  %v0_8994 = load i32, i32* %r3.global-to-local, align 4
  %v1_8994 = load i32, i32* @r8, align 4
  %v2_8994 = add i32 %v1_8994, %v0_8994
  store i32 %v2_8994, i32* %r2.global-to-local, align 4
  %v1_899c = trunc i32 %v2_8994 to i8
  %v2_899c = load i32, i32* @r4, align 4
  %v3_899c = inttoptr i32 %v2_899c to i8*
  store i8 %v1_899c, i8* %v3_899c, align 1
  %v2_89a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_89a0, i32* @r4, align 4
  store i32 %v6_8650, i32* @r5, align 4
  store i32 %v9_8650, i32* @r6, align 4
  store i32 %v12_8650, i32* @r7, align 4
  store i32 %v15_8650, i32* @r8, align 4
  ret i32 %v1_8994

; uselistorder directives
  uselistorder i32 %v1_8994, { 1, 0 }
  uselistorder i32 %v1_8948, { 1, 0 }
  uselistorder i32 %v1_88fc, { 1, 0 }
  uselistorder i32 %v1_88b0, { 1, 0 }
  uselistorder i32 %v1_8864, { 1, 0 }
  uselistorder i32 %v1_8818, { 1, 0 }
  uselistorder i32 %v1_87cc, { 1, 0 }
  uselistorder i32 %v1_8780, { 1, 0 }
  uselistorder i32 %v2_8730, { 0, 2, 1 }
  uselistorder i32 %v3_8728, { 1, 0, 2 }
  uselistorder i32 %v1_86e8, { 1, 0 }
  uselistorder i32* @global_var_1c540.23, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11 }
  uselistorder i8* bitcast (i8** @global_var_1c53c.21 to i8*), { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_89d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_89d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_89d8 = load i32, i32* @r4, align 4
  %v15_89d8 = load i32, i32* @r8, align 4
  %v21_89d8 = load i32, i32* @sl, align 4
  %v1_89dc = urem i32 %arg1, 256
  store i32 %v1_89dc, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_89dc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_89f4 = urem i32 %arg3, 256
  store i32 %v1_89f4, i32* @r4, align 4
  %v2_89f8 = call i32 @function_12178(i32 %v1_89dc, i32 4)
  %v0_89fc = load i32, i32* @r5, align 4
  store i32 %v0_89fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8a0c = load i32, i32* @r4, align 4
  store i32 %v0_8a0c, i32* %r0.global-to-local, align 4
  %v5_8a10 = inttoptr i32 %v0_89fc to i32*
  %v6_8a10 = call i32 @function_85e0(i32 %v0_8a0c, i32* %v5_8a10, i32 2, i32 0, i32 %v2_89f8)
  %v1_8a1c = urem i32 %v6_8a10, 256
  store i32 %v1_8a1c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8a28 = load i32, i32* @r5, align 4
  store i32 %v0_8a28, i32* %r1.global-to-local, align 4
  %v0_8a2c = load i32, i32* @r4, align 4
  store i32 %v0_8a2c, i32* %r0.global-to-local, align 4
  %v5_8a30 = trunc i32 %v6_8a10 to i8
  %v6_8a34 = inttoptr i32 %v0_8a28 to i32*
  %v7_8a34 = call i32 @function_85e0(i32 %v0_8a2c, i32* %v6_8a34, i32 3, i32 65535, i32 %v6_8a10)
  %v0_8a38 = load i32, i32* @r5, align 4
  store i32 %v0_8a38, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_8a34, i32* @r7, align 4
  %v0_8a48 = load i32, i32* @r4, align 4
  store i32 %v0_8a48, i32* %r0.global-to-local, align 4
  %v5_8a4c = inttoptr i32 %v0_8a38 to i32*
  %v6_8a4c = call i32 @function_85e0(i32 %v0_8a48, i32* %v5_8a4c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_8a54 = urem i32 %v6_8a4c, 256
  store i32 %v1_8a54, i32* %ip.global-to-local, align 4
  %v0_8a58 = load i32, i32* @r5, align 4
  store i32 %v0_8a58, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a64 = load i32, i32* @r4, align 4
  store i32 %v0_8a64, i32* %r0.global-to-local, align 4
  %v5_8a68 = trunc i32 %v6_8a4c to i8
  %v6_8a6c = inttoptr i32 %v0_8a58 to i32*
  %v7_8a6c = call i32 @function_85e0(i32 %v0_8a64, i32* %v6_8a6c, i32 5, i32 1, i32 %v6_8a4c)
  %v1_8a78 = urem i32 %v7_8a6c, 256
  store i32 %v1_8a78, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8a84 = load i32, i32* @r5, align 4
  store i32 %v0_8a84, i32* %r1.global-to-local, align 4
  %v0_8a88 = load i32, i32* @r4, align 4
  store i32 %v0_8a88, i32* %r0.global-to-local, align 4
  %v5_8a90 = inttoptr i32 %v0_8a84 to i32*
  %v6_8a90 = call i32 @function_85e0(i32 %v0_8a88, i32* %v5_8a90, i32 6, i32 65535, i32 %v1_8a78)
  %v0_8a98 = load i32, i32* @r5, align 4
  store i32 %v0_8a98, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8a90, i32* @sl, align 4
  %v0_8aa8 = load i32, i32* @r4, align 4
  store i32 %v0_8aa8, i32* %r0.global-to-local, align 4
  %v5_8aac = inttoptr i32 %v0_8a98 to i32*
  %v6_8aac = call i32 @function_85e0(i32 %v0_8aa8, i32* %v5_8aac, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_8ab0 = load i32, i32* @r5, align 4
  store i32 %v0_8ab0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_8aac, i32* @r8, align 4
  %v0_8ac0 = load i32, i32* @r4, align 4
  store i32 %v0_8ac0, i32* %r0.global-to-local, align 4
  %v5_8ac4 = inttoptr i32 %v0_8ab0 to i32*
  %v6_8ac4 = call i32 @function_85e0(i32 %v0_8ac0, i32* %v5_8ac4, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8ad4 = load i32, i32* @r5, align 4
  store i32 %v0_8ad4, i32* %r1.global-to-local, align 4
  %v0_8ad8 = load i32, i32* @r4, align 4
  store i32 %v0_8ad8, i32* %r0.global-to-local, align 4
  %v5_8adc = inttoptr i32 %v0_8ad4 to i32*
  %v6_8adc = call i32 @function_85e0(i32 %v0_8ad8, i32* %v5_8adc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_8ae4 = urem i32 %v6_8adc, 256
  store i32 %v1_8ae4, i32* %ip.global-to-local, align 4
  %v0_8ae8 = load i32, i32* @r5, align 4
  store i32 %v0_8ae8, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8af4 = load i32, i32* @r4, align 4
  store i32 %v0_8af4, i32* %r0.global-to-local, align 4
  %v5_8afc = inttoptr i32 %v0_8ae8 to i32*
  %v6_8afc = call i32 @function_85e0(i32 %v0_8af4, i32* %v5_8afc, i32 19, i32 0, i32 %v1_8ae4)
  %v0_8b04 = load i32, i32* @r5, align 4
  store i32 %v0_8b04, i32* %r1.global-to-local, align 4
  %v2_8b08 = load i32, i32* @global_var_1c5dc.51, align 4
  store i32 %v2_8b08, i32* %r3.global-to-local, align 4
  store i32 %v6_8afc, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_8b14 = load i32, i32* @r4, align 4
  store i32 %v0_8b14, i32* %r0.global-to-local, align 4
  %v5_8b18 = inttoptr i32 %v0_8b04 to i32*
  %v6_8b18 = call i32 @function_85e0(i32 %v0_8b14, i32* %v5_8b18, i32 25, i32 %v2_8b08, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_8b2c = call i32 @function_11e8c(i32 2, i32 3, i32 6)
  store i32 %v3_8b2c, i32* %r0.global-to-local, align 4
  %v7_8b30 = icmp eq i32 %v3_8b2c, -1
  store i1 %v7_8b30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b30, label %dec_label_pc_9014, label %dec_label_pc_8b3c

dec_label_pc_8b3c:                                ; preds = %dec_label_pc_89d8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_8b44 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_8b44, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_8b58 = call i32 @function_11e5c(i32 %v3_8b2c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_8b58, i32* %r0.global-to-local, align 4
  %v7_8b5c = icmp eq i32 %v6_8b58, -1
  store i1 %v7_8b5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b5c, label %dec_label_pc_900c, label %dec_label_pc_8b64

dec_label_pc_8b64:                                ; preds = %dec_label_pc_8b3c
  %v0_8b64 = load i32, i32* @sl, align 4
  %v3_8b64 = mul i32 %v0_8b64, 65536
  store i32 %v3_8b64, i32* %sl.global-to-local, align 4
  %v0_8b68 = load i32, i32* @r8, align 4
  %v3_8b68 = mul i32 %v0_8b68, 65536
  store i32 %v3_8b68, i32* %r8.global-to-local, align 4
  %v0_8b70 = load i32, i32* @r7, align 4
  %v3_8b70 = mul i32 %v0_8b70, 65536
  %v0_8b74 = load i32, i32* @r6, align 4
  %v1_8b74 = urem i32 %v0_8b74, 256
  store i32 0, i32* %stack_var_-40, align 4
  %v3_8b7c = urem i32 %v0_8b70, 65536
  store i32 %v3_8b7c, i32* %r2.global-to-local, align 4
  %v3_8b80 = urem i32 %v0_8b64, 65536
  store i32 %v3_8b80, i32* %r3.global-to-local, align 4
  %v3_8b84 = urem i32 %v0_8b68, 65536
  store i32 %v3_8b84, i32* %r1.global-to-local, align 4
  %v0_8b88 = load i32, i32* @fp, align 4
  %v2_8b88 = icmp eq i32 %v0_8b88, 0
  store i1 %v2_8b88, i1* %cpsr_z.global-to-local, align 1
  %tmp88 = icmp slt i32 %v0_8b88, 1
  br i1 %tmp88, label %dec_label_pc_9134, label %dec_label_pc_8ba8

dec_label_pc_8ba8:                                ; preds = %dec_label_pc_8b64
  %v3_8bac = mul i32 %v6_8ac4, 65536
  %v0_8b70.not = or i32 %v0_8b70, -65536
  %v1_8bb4 = xor i32 %v0_8b70.not, 65535
  %v1_8bbc = add i32 %v3_8bac, 4325376
  %v1_8bc0 = urem i32 %v0_8b64, 256
  %v3_8bc8 = udiv i32 %v1_8bbc, 256
  %v1_8bcc = add i32 %v3_8bac, 524288
  %v1_8bd4 = add i32 %v3_8bac, 1835008
  %v1_8bd8 = urem i32 %v0_8b68, 256
  %v1_8bdc = and i32 %v3_8bc8, 65280
  store i32 %v1_8bdc, i32* %r0.global-to-local, align 4
  %v3_8be4 = udiv i32 %v1_8bd4, 256
  %tmp89 = mul nsw i32 %v1_8bb4, 256
  %v1_8bfc = and i32 %v3_8be4, 65280
  store i32 %v1_8bfc, i32* %ip.global-to-local, align 4
  %v1_8c00 = and i32 %tmp89, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  store i32 %v1_8c00, i32* @lr, align 4
  %tmp91 = udiv i32 %v1_8bb4, 256
  %v4_8bec = sdiv i32 %v1_8bbc, 16777216
  %v5_8c1c = trunc i32 %tmp91 to i8
  %v3_8c28 = mul nuw nsw i32 %v1_8bc0, 256
  %v3_8c30 = ashr i32 %v1_8bbc, 31
  %v3_8c34 = mul nuw nsw i32 %v1_8bd8, 256
  store i32 %v3_8c34, i32* @r5, align 4
  %tmp92 = udiv i32 %v0_8b64, 256
  %v4_8c38 = urem i32 %tmp92, 256
  %v5_8c38 = or i32 %v4_8c38, %v3_8c28
  store i32 %v5_8c38, i32* @r7, align 4
  %v3_8c3c = udiv i32 %v1_8bcc, 256
  %tmp93 = udiv i32 %v0_8b68, 256
  %v4_8c40 = urem i32 %tmp93, 256
  %v5_8c40 = or i32 %v4_8c40, %v3_8c34
  store i32 %v5_8c40, i32* %sl.global-to-local, align 4
  %v5_8c44 = trunc i32 %v3_8c30 to i8
  %v3_8c4c = sdiv i32 %v3_8b70, 16777216
  %v7_8c4c = sdiv i32 %v1_8bd4, 16777216
  %v1_8c50 = and i32 %v3_8c3c, 65280
  store i32 %v1_8c50, i32* @r6, align 4
  %v3_8c54 = ashr i32 %v3_8b70, 31
  %v3_8c58 = ashr i32 %v1_8bd4, 31
  %v3_8c5c = udiv i32 %v1_8bb4, 65536
  %v4_8c60 = udiv i32 %v1_8bcc, 16777216
  %v5_8c60 = or i32 %v4_8c60, %v1_8c50
  store i32 %v5_8c60, i32* %r8.global-to-local, align 4
  store i32 %v1_8bc0, i32* %r1.global-to-local, align 4
  store i32 %v1_8bd8, i32* %r2.global-to-local, align 4
  %v3_8c7837 = udiv i32 %v1_8c50, 256
  store i32 %v3_8c7837, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_8dd8 = icmp eq i32 %v1_8b74, 0
  %sext16 = mul i32 %v0_8b64, 16777216
  %v4_8dec = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_8bcc, 256
  %v4_8e00 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_8b68, 16777216
  %v4_8e08 = sdiv i32 %sext18, 16777216
  %v1_8e10 = trunc i32 %v4_8e00 to i8
  br label %dec_label_pc_8c8c

dec_label_pc_8c8c:                                ; preds = %bb105, %dec_label_pc_8ba8
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8c98 = call i32 @function_12178(i32 1510, i32 4)
  store i32 %v2_8c98, i32* %r0.global-to-local, align 4
  store i32 %v2_89f8, i32* %r1.global-to-local, align 4
  %v3_8ca0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8ca0, i32* %r3.global-to-local, align 4
  %v2_8ca4 = load i32, i32* @r4, align 4
  %v5_8ca4 = mul i32 %v2_8ca4, 4
  %v6_8ca4 = add i32 %v5_8ca4, %v2_89f8
  %v7_8ca4 = inttoptr i32 %v6_8ca4 to i32*
  store i32 %v2_8c98, i32* %v7_8ca4, align 4
  %v0_8ca8 = load i32, i32* %r1.global-to-local, align 4
  %v1_8ca8 = load i32, i32* %r3.global-to-local, align 4
  %v4_8ca8 = mul i32 %v1_8ca8, 4
  %v5_8ca8 = add i32 %v4_8ca8, %v0_8ca8
  %v6_8ca8 = inttoptr i32 %v5_8ca8 to i32*
  %v7_8ca8 = load i32, i32* %v6_8ca8, align 4
  store i32 %v7_8ca8, i32* %r4.global-to-local, align 4
  %v1_8cac = inttoptr i32 %v7_8ca8 to i8*
  %v2_8cac = load i8, i8* %v1_8cac, align 1
  %tmp = urem i8 %v2_8cac, 16
  %v1_8cb0 = zext i8 %tmp to i32
  %v1_8cb4 = or i32 %v1_8cb0, 64
  store i32 %v1_8cb4, i32* %r2.global-to-local, align 4
  %v1_8cb8 = trunc i32 %v1_8cb4 to i8
  store i8 %v1_8cb8, i8* %v1_8cac, align 1
  %v0_8cbc = load i32, i32* %r4.global-to-local, align 4
  %v1_8cbc = inttoptr i32 %v0_8cbc to i8*
  %v2_8cbc = load i8, i8* %v1_8cbc, align 1
  %v1_8cc0 = and i8 %v2_8cbc, -16
  %v1_8cc4 = or i8 %v1_8cc0, 5
  store i32 %v1_8a78, i32* %r2.global-to-local, align 4
  store i8 %v1_8cc4, i8* %v1_8cbc, align 1
  %v2_8cd4 = load i32, i32* %r4.global-to-local, align 4
  %v3_8cd4 = add i32 %v2_8cd4, 1
  %v4_8cd4 = inttoptr i32 %v3_8cd4 to i8*
  store i8 %v5_8a30, i8* %v4_8cd4, align 1
  store i32 %v6_8a4c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_8ce0 = load i32, i32* %r4.global-to-local, align 4
  %v3_8ce0 = add i32 %v2_8ce0, 8
  %v4_8ce0 = inttoptr i32 %v3_8ce0 to i8*
  store i8 %v5_8a68, i8* %v4_8ce0, align 1
  %v0_8ce4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8ce4 = load i32, i32* %ip.global-to-local, align 4
  %v9_8ce4 = icmp eq i32 %v0_8ce4, %v1_8ce4
  store i1 %v9_8ce4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8c30, i32* %r3.global-to-local, align 4
  store i32 %v4_8bec, i32* %r2.global-to-local, align 4
  %v2_8cf0 = load i32, i32* %r4.global-to-local, align 4
  %v3_8cf0 = add i32 %v2_8cf0, 3
  %v4_8cf0 = inttoptr i32 %v3_8cf0 to i8*
  store i8 %v5_8c44, i8* %v4_8cf0, align 1
  %v0_8cf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cf4 = trunc i32 %v0_8cf4 to i8
  %v2_8cf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_8cf4 = add i32 %v2_8cf4, 2
  %v4_8cf4 = inttoptr i32 %v3_8cf4 to i8*
  store i8 %v1_8cf4, i8* %v4_8cf4, align 1
  %v0_8cf8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cf8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_8c8c
  store i32 %v3_8c54, i32* %r2.global-to-local, align 4
  %extract.t114 = trunc i32 %v3_8c54 to i8
  br label %bb94

bb:                                               ; preds = %dec_label_pc_8c8c
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_8c54, i32* %r2.global-to-local, align 4
  %v3_8d00 = load i32, i32* %r4.global-to-local, align 4
  %v4_8d00 = add i32 %v3_8d00, 6
  %v5_8d00 = inttoptr i32 %v4_8d00 to i8*
  store i8 64, i8* %v5_8d00, align 1
  %v0_8d08.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t115 = trunc i32 %v0_8d08.pre to i8
  br label %bb94

bb94:                                             ; preds = %.thread, %bb
  %v3_8c54.sink.off0 = phi i8 [ %extract.t114, %.thread ], [ %extract.t115, %bb ]
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8d08 = load i32, i32* %r4.global-to-local, align 4
  %v3_8d08 = add i32 %v2_8d08, 5
  %v4_8d08 = inttoptr i32 %v3_8d08 to i8*
  store i8 %v3_8c54.sink.off0, i8* %v4_8d08, align 1
  store i32 %v3_8c4c, i32* %r1.global-to-local, align 4
  %v0_8d10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8d10, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_8d10 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_8d10, i32* %r2.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_8d14 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d14 = trunc i32 %v0_8d14 to i8
  %v2_8d14 = load i32, i32* %r4.global-to-local, align 4
  %v3_8d14 = add i32 %v2_8d14, 9
  %v4_8d14 = inttoptr i32 %v3_8d14 to i8*
  store i8 %v1_8d14, i8* %v4_8d14, align 1
  %v0_8d18 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8d18, label %bb98, label %bb97

bb97:                                             ; preds = %bb96
  %v1_8d18 = load i32, i32* %r2.global-to-local, align 4
  %v2_8d18 = trunc i32 %v1_8d18 to i8
  %v3_8d18 = load i32, i32* %r4.global-to-local, align 4
  %v4_8d18 = add i32 %v3_8d18, 7
  %v5_8d18 = inttoptr i32 %v4_8d18 to i8*
  store i8 %v2_8d18, i8* %v5_8d18, align 1
  br label %bb98

bb98:                                             ; preds = %bb96, %bb97
  %v3_8d1c = load i32, i32* %stack_var_-40, align 4
  %v5_8d24 = mul i32 %v3_8d1c, 24
  store i32 %v5_8d24, i32* %r3.global-to-local, align 4
  store i32 %v6_8b18, i32* %r2.global-to-local, align 4
  %v1_8d2c = load i32, i32* %r4.global-to-local, align 4
  %v2_8d2c = add i32 %v1_8d2c, 12
  %v3_8d2c = inttoptr i32 %v2_8d2c to i32*
  store i32 %v6_8b18, i32* %v3_8d2c, align 4
  %v0_8d30 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d30 = load i32, i32* @sb, align 4
  %v2_8d30 = add i32 %v1_8d30, %v0_8d30
  store i32 %v2_8d30, i32* %r3.global-to-local, align 4
  %v1_8d34 = add i32 %v2_8d30, 16
  %v2_8d34 = inttoptr i32 %v1_8d34 to i32*
  %v3_8d34 = load i32, i32* %v2_8d34, align 4
  store i32 %v3_8d34, i32* %r2.global-to-local, align 4
  %v0_8d38 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d38 = trunc i32 %v0_8d38 to i8
  %v2_8d38 = load i32, i32* %r4.global-to-local, align 4
  %v3_8d38 = add i32 %v2_8d38, 4
  %v4_8d38 = inttoptr i32 %v3_8d38 to i8*
  store i8 %v1_8d38, i8* %v4_8d38, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_8d40 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d40 = add i32 %v0_8d40, 20
  store i32 %v1_8d40, i32* %r1.global-to-local, align 4
  %v3_8d44 = add i32 %v0_8d40, 22
  %v4_8d44 = inttoptr i32 %v3_8d44 to i8*
  store i8 101, i8* %v4_8d44, align 1
  %v0_8d48 = load i32, i32* %r2.global-to-local, align 4
  %v1_8d48 = load i32, i32* %r4.global-to-local, align 4
  %v2_8d48 = add i32 %v1_8d48, 16
  %v3_8d48 = inttoptr i32 %v2_8d48 to i32*
  store i32 %v0_8d48, i32* %v3_8d48, align 4
  %v0_8d4c = load i32, i32* %r4.global-to-local, align 4
  %v1_8d4c = add i32 %v0_8d4c, 24
  store i32 %v1_8d4c, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_8d54 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d54 = add i32 %v0_8d54, -93
  store i32 %v1_8d54, i32* %r3.global-to-local, align 4
  %v2_8d58 = load i32, i32* %r1.global-to-local, align 4
  %v3_8d58 = add i32 %v2_8d58, 3
  %v4_8d58 = inttoptr i32 %v3_8d58 to i8*
  store i8 88, i8* %v4_8d58, align 1
  %v0_8d5c = load i32, i32* %r3.global-to-local, align 4
  %v1_8d5c = trunc i32 %v0_8d5c to i8
  %v2_8d5c = load i32, i32* %r0.global-to-local, align 4
  %v3_8d5c = add i32 %v2_8d5c, 12
  %v4_8d5c = inttoptr i32 %v3_8d5c to i8*
  store i8 %v1_8d5c, i8* %v4_8d5c, align 1
  %v0_8d60 = load i32, i32* %ip.global-to-local, align 4
  %v1_8d60 = trunc i32 %v0_8d60 to i8
  %v2_8d60 = load i32, i32* %r0.global-to-local, align 4
  %v3_8d60 = add i32 %v2_8d60, 13
  %v4_8d60 = inttoptr i32 %v3_8d60 to i8*
  store i8 %v1_8d60, i8* %v4_8d60, align 1
  %v0_8d64 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d64 = add i32 %v0_8d64, 38
  %v2_8d64 = inttoptr i32 %v1_8d64 to i8*
  %v3_8d64 = load i8, i8* %v2_8d64, align 1
  %tmp116 = urem i8 %v3_8d64, 16
  %v1_8d68 = zext i8 %tmp116 to i32
  %v1_8d6c = or i32 %v1_8d68, 64
  store i32 %v1_8d6c, i32* %r3.global-to-local, align 4
  %v1_8d70 = trunc i32 %v1_8d6c to i8
  store i8 %v1_8d70, i8* %v2_8d64, align 1
  %v0_8d74 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d74 = add i32 %v0_8d74, 38
  %v2_8d74 = inttoptr i32 %v1_8d74 to i8*
  %v3_8d74 = load i8, i8* %v2_8d74, align 1
  %v1_8d78 = and i8 %v3_8d74, -16
  %v1_8d7c = or i8 %v1_8d78, 5
  store i8 %v1_8d7c, i8* %v2_8d74, align 1
  %v0_8d88 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d88 = add i32 %v0_8d88, 38
  store i32 %v1_8d88, i32* @r5, align 4
  %v3_8d8c = add i32 %v0_8d88, 39
  %v4_8d8c = inttoptr i32 %v3_8d8c to i8*
  store i8 %v5_8a30, i8* %v4_8d8c, align 1
  store i32 %v7_8c4c, i32* %r1.global-to-local, align 4
  store i32 %tmp91, i32* %r3.global-to-local, align 4
  store i32 %v3_8c58, i32* %r2.global-to-local, align 4
  %v2_8d9c = load i32, i32* @r5, align 4
  %v3_8d9c = add i32 %v2_8d9c, 4
  %v4_8d9c = inttoptr i32 %v3_8d9c to i8*
  store i8 %v5_8c1c, i8* %v4_8d9c, align 1
  %v0_8da0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8da0 = trunc i32 %v0_8da0 to i8
  %v2_8da0 = load i32, i32* @r5, align 4
  %v3_8da0 = add i32 %v2_8da0, 2
  %v4_8da0 = inttoptr i32 %v3_8da0 to i8*
  store i8 %v1_8da0, i8* %v4_8da0, align 1
  %v0_8da4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8da4, label %bb100, label %bb99

bb99:                                             ; preds = %bb98
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %bb98, %bb99
  store i32 %v3_8c5c, i32* %r1.global-to-local, align 4
  %v0_8dac = load i32, i32* %r2.global-to-local, align 4
  %v1_8dac = trunc i32 %v0_8dac to i8
  %v2_8dac = load i32, i32* @r5, align 4
  %v3_8dac = add i32 %v2_8dac, 3
  %v4_8dac = inttoptr i32 %v3_8dac to i8*
  store i8 %v1_8dac, i8* %v4_8dac, align 1
  store i32 %v6_8a4c, i32* %r2.global-to-local, align 4
  %v0_8db4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8db4, label %bb102, label %bb101

bb101:                                            ; preds = %bb100
  %v1_8db4 = load i32, i32* %r3.global-to-local, align 4
  %v2_8db4 = trunc i32 %v1_8db4 to i8
  %v3_8db4 = load i32, i32* @r5, align 4
  %v4_8db4 = add i32 %v3_8db4, 6
  %v5_8db4 = inttoptr i32 %v4_8db4 to i8*
  store i8 %v2_8db4, i8* %v5_8db4, align 1
  br label %bb102

bb102:                                            ; preds = %bb100, %bb101
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_8dbc = load i32, i32* %r1.global-to-local, align 4
  %v1_8dbc = trunc i32 %v0_8dbc to i8
  %v2_8dbc = load i32, i32* @r5, align 4
  %v3_8dbc = add i32 %v2_8dbc, 5
  %v4_8dbc = inttoptr i32 %v3_8dbc to i8*
  store i8 %v1_8dbc, i8* %v4_8dbc, align 1
  %v0_8dc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_8dc0 = trunc i32 %v0_8dc0 to i8
  %v2_8dc0 = load i32, i32* @r5, align 4
  %v3_8dc0 = add i32 %v2_8dc0, 8
  %v4_8dc0 = inttoptr i32 %v3_8dc0 to i8*
  store i8 %v1_8dc0, i8* %v4_8dc0, align 1
  %v0_8dc4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8dc4, label %bb104, label %bb103

bb103:                                            ; preds = %bb102
  %v1_8dc4 = load i32, i32* %ip.global-to-local, align 4
  %v2_8dc4 = trunc i32 %v1_8dc4 to i8
  %v3_8dc4 = load i32, i32* @r5, align 4
  %v4_8dc4 = add i32 %v3_8dc4, 7
  %v5_8dc4 = inttoptr i32 %v4_8dc4 to i8*
  store i8 %v2_8dc4, i8* %v5_8dc4, align 1
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v0_8dc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8dc8 = trunc i32 %v0_8dc8 to i8
  %v2_8dc8 = load i32, i32* @r5, align 4
  %v3_8dc8 = add i32 %v2_8dc8, 9
  %v4_8dc8 = inttoptr i32 %v3_8dc8 to i8*
  store i8 %v1_8dc8, i8* %v4_8dc8, align 1
  %v0_8dcc = call i32 @function_e958()
  store i32 %v0_8dcc, i32* %r0.global-to-local, align 4
  store i32 %v1_8b74, i32* %r1.global-to-local, align 4
  store i1 %v2_8dd8, i1* %cpsr_z.global-to-local, align 1
  %v1_8ddc = sub i32 1023, %v0_8dcc
  store i32 %v1_8ddc, i32* %r3.global-to-local, align 4
  br i1 %v2_8dd8, label %.thread21, label %.thread22

.thread21:                                        ; preds = %bb104
  %v2_8de4 = load i32, i32* @r5, align 4
  %v3_8de4 = add i32 %v2_8de4, 16
  %v4_8de4 = inttoptr i32 %v3_8de4 to i32*
  store i32 %v1_8ddc, i32* %v4_8de4, align 4
  br label %bb105

.thread22:                                        ; preds = %bb104
  %v1_8de0 = load i32, i32* %r4.global-to-local, align 4
  %v2_8de0 = add i32 %v1_8de0, 16
  %v3_8de0 = inttoptr i32 %v2_8de0 to i32*
  %v4_8de0 = load i32, i32* %v3_8de0, align 4
  store i32 %v4_8de0, i32* %r3.global-to-local, align 4
  %v2_8de8 = load i32, i32* @r5, align 4
  %v3_8de8 = add i32 %v2_8de8, 16
  %v4_8de8 = inttoptr i32 %v3_8de8 to i32*
  store i32 %v4_8de0, i32* %v4_8de8, align 4
  br label %bb105

bb105:                                            ; preds = %.thread21, %.thread22
  store i32 %v4_8dec, i32* %r3.global-to-local, align 4
  %v0_8df0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8df0 = add i32 %v0_8df0, 58
  store i32 %v1_8df0, i32* @r6, align 4
  %v1_8df4 = load i32, i32* @r5, align 4
  %v2_8df4 = add i32 %v1_8df4, 12
  %v3_8df4 = inttoptr i32 %v2_8df4 to i32*
  store i32 %v0_8dcc, i32* %v3_8df4, align 4
  %v0_8df8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8df8 = trunc i32 %v0_8df8 to i8
  %v2_8df8 = load i32, i32* @r6, align 4
  %v3_8df8 = add i32 %v2_8df8, 1
  %v4_8df8 = inttoptr i32 %v3_8df8 to i8*
  store i8 %v1_8df8, i8* %v4_8df8, align 1
  %v3_8dfc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8dfc, i32* %r3.global-to-local, align 4
  store i32 %v4_8e00, i32* %r2.global-to-local, align 4
  %v1_8e04 = add i32 %v3_8dfc, 1
  store i32 %v1_8e04, i32* @r4, align 4
  store i32 %v4_8e08, i32* %r1.global-to-local, align 4
  %v1_8e0c = load i32, i32* @fp, align 4
  %v9_8e0c = icmp eq i32 %v1_8e04, %v1_8e0c
  store i1 %v9_8e0c, i1* %cpsr_z.global-to-local, align 1
  %v2_8e10 = load i32, i32* @r6, align 4
  %v3_8e10 = add i32 %v2_8e10, 5
  %v4_8e10 = inttoptr i32 %v3_8e10 to i8*
  store i8 %v1_8e10, i8* %v4_8e10, align 1
  %v0_8e14 = load i32, i32* @r7, align 4
  %v1_8e14 = trunc i32 %v0_8e14 to i8
  %v2_8e14 = load i32, i32* @r6, align 4
  %v3_8e14 = inttoptr i32 %v2_8e14 to i8*
  store i8 %v1_8e14, i8* %v3_8e14, align 1
  %v0_8e18 = load i32, i32* %sl.global-to-local, align 4
  %v1_8e18 = trunc i32 %v0_8e18 to i8
  %v2_8e18 = load i32, i32* @r6, align 4
  %v3_8e18 = add i32 %v2_8e18, 2
  %v4_8e18 = inttoptr i32 %v3_8e18 to i8*
  store i8 %v1_8e18, i8* %v4_8e18, align 1
  %v0_8e1c = load i32, i32* %r1.global-to-local, align 4
  %v1_8e1c = trunc i32 %v0_8e1c to i8
  %v2_8e1c = load i32, i32* @r6, align 4
  %v3_8e1c = add i32 %v2_8e1c, 3
  %v4_8e1c = inttoptr i32 %v3_8e1c to i8*
  store i8 %v1_8e1c, i8* %v4_8e1c, align 1
  %v0_8e20 = load i32, i32* %r8.global-to-local, align 4
  %v1_8e20 = trunc i32 %v0_8e20 to i8
  %v2_8e20 = load i32, i32* @r6, align 4
  %v3_8e20 = add i32 %v2_8e20, 4
  %v4_8e20 = inttoptr i32 %v3_8e20 to i8*
  store i8 %v1_8e20, i8* %v4_8e20, align 1
  %v0_8e24 = load i32, i32* @r4, align 4
  store i32 %v0_8e24, i32* %stack_var_-40, align 4
  %v5_8e28 = icmp slt i32 %v1_8e04, %v1_8e0c
  br i1 %v5_8e28, label %dec_label_pc_8c8c, label %dec_label_pc_8e2c

dec_label_pc_8e2c:                                ; preds = %bb105
  %v1_8e34 = add i32 %v6_8ac4, 8
  store i32 %v1_8e34, i32* %r2.global-to-local, align 4
  %v1_8e38 = add i32 %v6_8ac4, 66
  store i32 %v1_8e38, i32* %r3.global-to-local, align 4
  %v0_8e44.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_8e44.preheader

dec_label_pc_8e44.preheader:                      ; preds = %dec_label_pc_8e2c, %dec_label_pc_9134
  %v0_8e44.pre = phi i32 [ %v0_8e44.pre.pre, %dec_label_pc_8e2c ], [ %v0_8b88, %dec_label_pc_9134 ]
  %stack_var_-160.0.ph = phi i32 [ %v1_8e38, %dec_label_pc_8e2c ], [ %v1_9140, %dec_label_pc_9134 ]
  %stack_var_-156.0.ph = phi i32 [ %v1_8e34, %dec_label_pc_8e2c ], [ %v1_913c, %dec_label_pc_9134 ]
  %v3_9094 = icmp eq i32 %v3_8b7c, 65535
  %v2_9104 = icmp eq i32 %v1_8b74, 0
  %v2_8ee8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_8f00 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8f10 = ptrtoint i32* %stack_var_-52 to i32
  %v2_8f1c = ptrtoint i32* %stack_var_-50 to i32
  %v2_8f30 = icmp eq i32 %v1_8ae4, 0
  %v2_8e8c = icmp eq i32 %v6_8b18, -1
  %v7_8e8c = icmp eq i32 %v6_8b18, -1
  br label %dec_label_pc_8e44

dec_label_pc_8e44:                                ; preds = %dec_label_pc_8f38, %dec_label_pc_8e44.preheader
  %v0_8e44 = phi i32 [ %v0_8e44.pre, %dec_label_pc_8e44.preheader ], [ %v1_8ffc, %dec_label_pc_8f38 ]
  %v2_8e44 = icmp eq i32 %v0_8e44, 0
  store i1 %v2_8e44, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp106 = icmp slt i32 %v0_8e44, 1
  br label %dec_label_pc_8e4c

dec_label_pc_8e4c:                                ; preds = %dec_label_pc_8e4c, %dec_label_pc_8e44
  br i1 %tmp106, label %dec_label_pc_8e4c, label %dec_label_pc_8e50

dec_label_pc_8e50:                                ; preds = %dec_label_pc_8e4c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_8e5c

dec_label_pc_8e5c:                                ; preds = %dec_label_pc_8f38, %dec_label_pc_8e50
  %v1_8e70 = phi i32 [ %v1_8ff8, %dec_label_pc_8f38 ], [ 0, %dec_label_pc_8e50 ]
  %v5_8e60 = mul i32 %v1_8e70, 24
  %v1_8e64 = load i32, i32* @sb, align 4
  %v2_8e64 = add i32 %v1_8e64, %v5_8e60
  store i32 %v2_8e64, i32* %r3.global-to-local, align 4
  store i32 %v2_89f8, i32* %r1.global-to-local, align 4
  %v1_8e6c = add i32 %v2_8e64, 20
  %v2_8e6c = inttoptr i32 %v1_8e6c to i8*
  %v3_8e6c = load i8, i8* %v2_8e6c, align 1
  %v4_8e6c = zext i8 %v3_8e6c to i32
  store i32 %v4_8e6c, i32* %r2.global-to-local, align 4
  %v4_8e70 = mul i32 %v1_8e70, 4
  %v5_8e70 = add i32 %v4_8e70, %v2_89f8
  %v6_8e70 = inttoptr i32 %v5_8e70 to i32*
  %v7_8e70 = load i32, i32* %v6_8e70, align 4
  store i32 %v7_8e70, i32* @r5, align 4
  %v7_8e74 = icmp eq i8 %v3_8e6c, 31
  store i1 %v7_8e74, i1* %cpsr_z.global-to-local, align 1
  %v1_8e78 = add i32 %v7_8e70, 24
  store i32 %v1_8e78, i32* @r8, align 4
  %v1_8e7c = add i32 %v7_8e70, 38
  store i32 %v1_8e7c, i32* @r6, align 4
  %v1_8e80 = add i32 %v7_8e70, 58
  store i32 %v1_8e80, i32* @r7, align 4
  %tmp117 = icmp ult i8 %v3_8e6c, 32
  br i1 %tmp117, label %dec_label_pc_901c, label %dec_label_pc_8e88

dec_label_pc_8e88:                                ; preds = %dec_label_pc_8e5c
  store i32 %v6_8b18, i32* %r2.global-to-local, align 4
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e8c, label %dec_label_pc_9084, label %dec_label_pc_8e94

dec_label_pc_8e94:                                ; preds = %dec_label_pc_901c, %dec_label_pc_8e88
  store i32 %v3_8b7c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9094, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9094, label %dec_label_pc_90a0, label %dec_label_pc_8ea8

dec_label_pc_8ea8:                                ; preds = %dec_label_pc_9084.dec_label_pc_8ea8_crit_edge, %dec_label_pc_8e94
  %v1_8eac = phi i32 [ %v1_8eac.pre, %dec_label_pc_9084.dec_label_pc_8ea8_crit_edge ], [ 65535, %dec_label_pc_8e94 ]
  store i32 %v3_8b80, i32* %r1.global-to-local, align 4
  %v9_8eac = icmp eq i32 %v3_8b80, %v1_8eac
  store i1 %v9_8eac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8eac, label %dec_label_pc_90d8, label %dec_label_pc_8eb4

dec_label_pc_8eb4:                                ; preds = %dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge, %dec_label_pc_8ea8
  %v1_8eb8 = phi i32 [ %v1_8eb8.pre, %dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge ], [ %v1_8eac, %dec_label_pc_8ea8 ]
  store i32 %v3_8b84, i32* %r2.global-to-local, align 4
  %v9_8eb8 = icmp eq i32 %v3_8b84, %v1_8eb8
  store i1 %v9_8eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8eb8, label %dec_label_pc_90f4, label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %dec_label_pc_90d8, %dec_label_pc_8eb4
  store i32 %v1_8b74, i32* %r3.global-to-local, align 4
  store i1 %v2_9104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9104, label %dec_label_pc_9118, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_8ec0
  %v1_8ec8 = load i32, i32* @r5, align 4
  %v2_8ec8 = add i32 %v1_8ec8, 16
  %v3_8ec8 = inttoptr i32 %v2_8ec8 to i32*
  %v4_8ec8 = load i32, i32* %v3_8ec8, align 4
  store i32 %v4_8ec8, i32* %r3.global-to-local, align 4
  %v2_8ecc = load i32, i32* @r6, align 4
  %v3_8ecc = add i32 %v2_8ecc, 16
  %v4_8ecc = inttoptr i32 %v3_8ecc to i32*
  store i32 %v4_8ec8, i32* %v4_8ecc, align 4
  br label %dec_label_pc_8ed4

dec_label_pc_8ed4:                                ; preds = %bb109, %.thread23, %dec_label_pc_9118
  %v0_8ed4 = call i32 @function_e958()
  store i32 %v0_8ed4, i32* %r0.global-to-local, align 4
  store i32 %v0_8ed4, i32* %stack_var_-44, align 4
  %v0_8edc = call i32 @function_e958()
  store i32 %v0_8edc, i32* %r0.global-to-local, align 4
  store i32 %v0_8edc, i32* %stack_var_-48, align 4
  %v0_8ee4 = call i32 @function_e958()
  store i32 %v2_8ee8, i32* %r1.global-to-local, align 4
  store i32 %v0_8ee4, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8ef4 = load i32, i32* @r8, align 4
  store i32 %v0_8ef4, i32* %r0.global-to-local, align 4
  %v3_8ef8 = call i32 @function_10cec(i32 %v0_8ef4, i32 %v2_8ee8, i32 4)
  %v0_8efc = load i32, i32* @r8, align 4
  %v1_8efc = add i32 %v0_8efc, 6
  store i32 %v1_8efc, i32* %r0.global-to-local, align 4
  store i32 %v2_8f00, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8f08 = call i32 @function_10cec(i32 %v1_8efc, i32 %v2_8f00, i32 4)
  %v0_8f0c = load i32, i32* @r8, align 4
  %v1_8f0c = add i32 %v0_8f0c, 4
  store i32 %v1_8f0c, i32* %r0.global-to-local, align 4
  store i32 %v2_8f10, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8f18 = call i32 @function_10cec(i32 %v1_8f0c, i32 %v2_8f10, i32 2)
  store i32 %v2_8f1c, i32* %r1.global-to-local, align 4
  %v0_8f20 = load i32, i32* @r8, align 4
  %v1_8f20 = add i32 %v0_8f20, 10
  store i32 %v1_8f20, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8f28 = call i32 @function_10cec(i32 %v1_8f20, i32 %v2_8f1c, i32 2)
  store i32 %v3_8f28, i32* %r0.global-to-local, align 4
  store i32 %v1_8ae4, i32* %r1.global-to-local, align 4
  store i1 %v2_8f30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f30, label %dec_label_pc_8f38, label %dec_label_pc_9124

dec_label_pc_8f38:                                ; preds = %dec_label_pc_8ed4, %dec_label_pc_9124
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8f3c = load i32, i32* @sl, align 4
  %v1_8f3c = trunc i32 %v0_8f3c to i8
  %v2_8f3c = load i32, i32* @r5, align 4
  %v3_8f3c = add i32 %v2_8f3c, 10
  %v4_8f3c = inttoptr i32 %v3_8f3c to i8*
  store i8 %v1_8f3c, i8* %v4_8f3c, align 1
  %v0_8f40 = load i32, i32* @sl, align 4
  %v1_8f40 = trunc i32 %v0_8f40 to i8
  %v2_8f40 = load i32, i32* @r5, align 4
  %v3_8f40 = add i32 %v2_8f40, 11
  %v4_8f40 = inttoptr i32 %v3_8f40 to i8*
  store i8 %v1_8f40, i8* %v4_8f40, align 1
  %v0_8f44 = load i32, i32* @r5, align 4
  store i32 %v0_8f44, i32* @r0, align 4
  %v2_8f48 = call i32 @function_d0b8(i32 %v0_8f44, i32 20)
  %v3_8f48 = trunc i32 %v2_8f48 to i8
  %v4_8f4c = sdiv i32 %v2_8f48, 256
  store i32 %v4_8f4c, i32* %r3.global-to-local, align 4
  %v1_8f50 = trunc i32 %v4_8f4c to i8
  %v2_8f50 = load i32, i32* @r5, align 4
  %v3_8f50 = add i32 %v2_8f50, 11
  %v4_8f50 = inttoptr i32 %v3_8f50 to i8*
  store i8 %v1_8f50, i8* %v4_8f50, align 1
  %v3_8f54 = load i32, i32* @r5, align 4
  %v4_8f54 = add i32 %v3_8f54, 10
  %v5_8f54 = inttoptr i32 %v4_8f54 to i8*
  store i8 %v3_8f48, i8* %v5_8f54, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8f5c = load i32, i32* @sl, align 4
  %v1_8f5c = trunc i32 %v0_8f5c to i8
  %v2_8f5c = load i32, i32* @r6, align 4
  %v3_8f5c = add i32 %v2_8f5c, 10
  %v4_8f5c = inttoptr i32 %v3_8f5c to i8*
  store i8 %v1_8f5c, i8* %v4_8f5c, align 1
  %v0_8f60 = load i32, i32* @sl, align 4
  %v1_8f60 = trunc i32 %v0_8f60 to i8
  %v2_8f60 = load i32, i32* @r6, align 4
  %v3_8f60 = add i32 %v2_8f60, 11
  %v4_8f60 = inttoptr i32 %v3_8f60 to i8*
  store i8 %v1_8f60, i8* %v4_8f60, align 1
  %v0_8f64 = load i32, i32* @r6, align 4
  store i32 %v0_8f64, i32* @r0, align 4
  %v2_8f68 = call i32 @function_d0b8(i32 %v0_8f64, i32 20)
  %v3_8f68 = trunc i32 %v2_8f68 to i8
  store i32 %v2_8f68, i32* %r0.global-to-local, align 4
  %v4_8f6c = sdiv i32 %v2_8f68, 256
  store i32 %v4_8f6c, i32* %r3.global-to-local, align 4
  %v3_8f70 = load i32, i32* @r6, align 4
  %v4_8f70 = add i32 %v3_8f70, 10
  %v5_8f70 = inttoptr i32 %v4_8f70 to i8*
  store i8 %v3_8f68, i8* %v5_8f70, align 1
  %v0_8f74 = load i32, i32* %r3.global-to-local, align 4
  %v1_8f74 = trunc i32 %v0_8f74 to i8
  %v2_8f74 = load i32, i32* @r6, align 4
  %v3_8f74 = add i32 %v2_8f74, 11
  %v4_8f74 = inttoptr i32 %v3_8f74 to i8*
  store i8 %v1_8f74, i8* %v4_8f74, align 1
  %v0_8f78 = load i32, i32* @r7, align 4
  %v1_8f78 = add i32 %v0_8f78, 4
  %v2_8f78 = inttoptr i32 %v1_8f78 to i8*
  %v3_8f78 = load i8, i8* %v2_8f78, align 1
  %v4_8f78 = zext i8 %v3_8f78 to i32
  store i32 %v4_8f78, i32* %r3.global-to-local, align 4
  %v1_8f7c = add i32 %v0_8f78, 5
  %v2_8f7c = inttoptr i32 %v1_8f7c to i8*
  %v3_8f7c = load i8, i8* %v2_8f7c, align 1
  %v4_8f7c = zext i8 %v3_8f7c to i32
  store i32 %v0_8f78, i32* @r1, align 4
  %v4_8f84 = mul nuw nsw i32 %v4_8f7c, 256
  %v5_8f84 = or i32 %v4_8f84, %v4_8f78
  store i32 %v5_8f84, i32* %r2.global-to-local, align 4
  %v0_8f88 = load i32, i32* @sl, align 4
  %v1_8f88 = trunc i32 %v0_8f88 to i8
  %v3_8f88 = add i32 %v0_8f78, 6
  %v4_8f88 = inttoptr i32 %v3_8f88 to i8*
  store i8 %v1_8f88, i8* %v4_8f88, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_8f90 = load i32, i32* @sl, align 4
  %v1_8f90 = trunc i32 %v0_8f90 to i8
  %v2_8f90 = load i32, i32* @r7, align 4
  %v3_8f90 = add i32 %v2_8f90, 7
  %v4_8f90 = inttoptr i32 %v3_8f90 to i8*
  store i8 %v1_8f90, i8* %v4_8f90, align 1
  %v0_8f94 = load i32, i32* @r6, align 4
  store i32 %v0_8f94, i32* %r0.global-to-local, align 4
  %v4_8f98 = call i32 @function_d114(i32 %v0_8f94, i32 %v0_8f78, i32 %v5_8f84, i32 %stack_var_-156.0.ph)
  %v5_8f98 = trunc i32 %v4_8f98 to i8
  store i32 %v4_8f98, i32* %r0.global-to-local, align 4
  %v3_8f9c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8f9c, i32* %r3.global-to-local, align 4
  %v3_8fa0 = mul i32 %v3_8f9c, 32
  store i32 %v3_8fa0, i32* %r2.global-to-local, align 4
  %v0_8fa4 = load i32, i32* @r5, align 4
  %v1_8fa4 = add i32 %v0_8fa4, 16
  %v2_8fa4 = inttoptr i32 %v1_8fa4 to i32*
  %v3_8fa4 = load i32, i32* %v2_8fa4, align 4
  store i32 %v3_8fa4, i32* %r1.global-to-local, align 4
  %v5_8fa8 = mul i32 %v3_8f9c, 24
  store i32 %v5_8fa8, i32* %r2.global-to-local, align 4
  %v4_8fac42 = udiv i32 %v4_8f98, 256
  %v1_8fb0 = trunc i32 %v4_8fac42 to i8
  %v2_8fb0 = load i32, i32* @r7, align 4
  %v3_8fb0 = add i32 %v2_8fb0, 7
  %v4_8fb0 = inttoptr i32 %v3_8fb0 to i8*
  store i8 %v1_8fb0, i8* %v4_8fb0, align 1
  %v0_8fb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8fb4 = load i32, i32* @sb, align 4
  %v2_8fb4 = add i32 %v1_8fb4, %v0_8fb4
  store i32 %v2_8fb4, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8fbc = load i32, i32* @r7, align 4
  %v4_8fbc = add i32 %v3_8fbc, 6
  %v5_8fbc = inttoptr i32 %v4_8fbc to i8*
  store i8 %v5_8f98, i8* %v5_8fbc, align 1
  %v0_8fc0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8fc0 = load i32, i32* %lr.global-to-local, align 4
  %v2_8fc0 = add i32 %v1_8fc0, 4
  %v3_8fc0 = inttoptr i32 %v2_8fc0 to i32*
  store i32 %v0_8fc0, i32* %v3_8fc0, align 4
  %v0_8fc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8fc4 = trunc i32 %v0_8fc4 to i8
  %v2_8fc4 = load i32, i32* %r2.global-to-local, align 4
  %v3_8fc4 = load i32, i32* @sb, align 4
  %v4_8fc4 = add i32 %v3_8fc4, %v2_8fc4
  %v5_8fc4 = inttoptr i32 %v4_8fc4 to i8*
  store i8 %v1_8fc4, i8* %v5_8fc4, align 1
  %v0_8fc8 = load i32, i32* @sl, align 4
  %v1_8fc8 = trunc i32 %v0_8fc8 to i8
  %v2_8fc8 = load i32, i32* %lr.global-to-local, align 4
  %v3_8fc8 = add i32 %v2_8fc8, 2
  %v4_8fc8 = inttoptr i32 %v3_8fc8 to i8*
  store i8 %v1_8fc8, i8* %v4_8fc8, align 1
  %v0_8fcc = load i32, i32* @sl, align 4
  %v1_8fcc = trunc i32 %v0_8fcc to i8
  %v2_8fcc = load i32, i32* %lr.global-to-local, align 4
  %v3_8fcc = add i32 %v2_8fcc, 1
  %v4_8fcc = inttoptr i32 %v3_8fcc to i8*
  store i8 %v1_8fcc, i8* %v4_8fcc, align 1
  %v0_8fd0 = load i32, i32* @sl, align 4
  %v1_8fd0 = trunc i32 %v0_8fd0 to i8
  %v2_8fd0 = load i32, i32* %lr.global-to-local, align 4
  %v3_8fd0 = add i32 %v2_8fd0, 3
  %v4_8fd0 = inttoptr i32 %v3_8fd0 to i8*
  store i8 %v1_8fd0, i8* %v4_8fd0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8fdc = load i32, i32* @r5, align 4
  store i32 %v0_8fdc, i32* %r1.global-to-local, align 4
  store i32 %v3_8b2c, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_8fe8 = load i32, i32* %lr.global-to-local, align 4
  %v6_8ff0 = inttoptr i32 %v0_8fdc to i32*
  %v7_8ff0 = call i32 @function_11e28(i32 %v3_8b2c, i32* %v6_8ff0, i32 %stack_var_-160.0.ph, i32 16384, i32 %v0_8fe8, i32 16)
  %v3_8ff4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8ff4, i32* %r3.global-to-local, align 4
  %v1_8ff8 = add i32 %v3_8ff4, 1
  store i32 %v1_8ff8, i32* %r0.global-to-local, align 4
  %v1_8ffc = load i32, i32* @fp, align 4
  %v9_8ffc = icmp eq i32 %v1_8ff8, %v1_8ffc
  store i1 %v9_8ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8ff8, i32* %stack_var_-40, align 4
  %v6_9004 = icmp slt i32 %v1_8ff8, %v1_8ffc
  br i1 %v6_9004, label %dec_label_pc_8e5c, label %dec_label_pc_8e44

dec_label_pc_900c:                                ; preds = %dec_label_pc_8b3c
  store i32 %v3_8b2c, i32* %r0.global-to-local, align 4
  %v1_9010 = call i32 @function_11574(i32 %v3_8b2c)
  store i32 %v1_9010, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9014

dec_label_pc_9014:                                ; preds = %dec_label_pc_89d8, %dec_label_pc_900c
  %v29_9018 = phi i32 [ %v3_8b2c, %dec_label_pc_89d8 ], [ %v1_9010, %dec_label_pc_900c ]
  store i32 %v3_89d8, i32* %r4.global-to-local, align 4
  store i32 %v15_89d8, i32* %r8.global-to-local, align 4
  store i32 %v21_89d8, i32* %sl.global-to-local, align 4
  ret i32 %v29_9018

dec_label_pc_901c:                                ; preds = %dec_label_pc_8e5c
  %v1_901c = add i32 %v2_8e64, 16
  %v2_901c = inttoptr i32 %v1_901c to i32*
  %v3_901c = load i32, i32* %v2_901c, align 4
  store i32 %v3_901c, i32* %r4.global-to-local, align 4
  %v0_9020 = call i32 @function_e958()
  store i32 %v0_9020, i32* %r0.global-to-local, align 4
  %v3_9024 = load i32, i32* %stack_var_-40, align 4
  %v5_902c = mul i32 %v3_9024, 24
  %v0_9030 = load i32, i32* %r4.global-to-local, align 4
  %v1_9034 = load i32, i32* @sb, align 4
  %v2_9034 = add i32 %v1_9034, %v5_902c
  store i32 %v2_9034, i32* %r1.global-to-local, align 4
  %v1_9038 = and i32 %v0_9030, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_9038, i32* %r3.global-to-local, align 4
  %v1_9030 = udiv i32 %v0_9030, 256
  %v3_903c = and i32 %v1_9030, 65280
  store i32 %v3_903c, i32* %r2.global-to-local, align 4
  %v3_9040 = mul i32 %v0_9030, 16777216
  store i32 %v3_9040, i32* %ip.global-to-local, align 4
  %v1_9044 = add i32 %v2_9034, 20
  %v2_9044 = inttoptr i32 %v1_9044 to i8*
  %v3_9044 = load i8, i8* %v2_9044, align 1
  %v4_9044 = zext i8 %v3_9044 to i32
  store i32 %v4_9044, i32* %lr.global-to-local, align 4
  %v4_9048 = mul i32 %v1_9038, 256
  %v5_9048 = or i32 %v4_9048, %v3_9040
  store i32 %v5_9048, i32* %ip.global-to-local, align 4
  %v4_904c = udiv i32 %v0_9030, 16777216
  %v5_904c = or i32 %v3_903c, %v4_904c
  %v2_9050 = or i32 %v5_904c, %v5_9048
  %v7_9054 = lshr i32 %v0_9020, %v4_9044
  %v8_9054 = add i32 %v7_9054, %v2_9050
  %v3_9060 = mul i32 %v8_9054, 16777216
  %v1_9064 = and i32 %v8_9054, 65280
  store i32 %v1_9064, i32* %r0.global-to-local, align 4
  store i32 %v6_8b18, i32* %r2.global-to-local, align 4
  %v4_9070 = mul nuw nsw i32 %v1_9064, 256
  %v5_9070 = or i32 %v4_9070, %v3_9060
  store i32 %v5_9070, i32* %r1.global-to-local, align 4
  %v2_9074 = call i32 @llvm.bswap.i32(i32 %v8_9054)
  store i32 %v2_9074, i32* %r3.global-to-local, align 4
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  %v1_907c = load i32, i32* @r5, align 4
  %v2_907c = add i32 %v1_907c, 16
  %v3_907c = inttoptr i32 %v2_907c to i32*
  store i32 %v2_9074, i32* %v3_907c, align 4
  br i1 %v2_8e8c, label %dec_label_pc_9084, label %dec_label_pc_8e94

dec_label_pc_9084:                                ; preds = %dec_label_pc_901c, %dec_label_pc_8e88
  %v0_9084 = call i32 @function_e958()
  store i32 %v0_9084, i32* %r0.global-to-local, align 4
  store i32 %v3_8b7c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9094, i1* %cpsr_z.global-to-local, align 1
  %v1_9098 = load i32, i32* @r5, align 4
  %v2_9098 = add i32 %v1_9098, 12
  %v3_9098 = inttoptr i32 %v2_9098 to i32*
  store i32 %v0_9084, i32* %v3_9098, align 4
  br i1 %v3_9094, label %dec_label_pc_90a0, label %dec_label_pc_9084.dec_label_pc_8ea8_crit_edge

dec_label_pc_9084.dec_label_pc_8ea8_crit_edge:    ; preds = %dec_label_pc_9084
  %v1_8eac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8ea8

dec_label_pc_90a0:                                ; preds = %dec_label_pc_9084, %dec_label_pc_8e94
  %v0_90a0 = call i32 @function_e958()
  %v3_90a8 = urem i32 %v0_90a0, 65536
  store i32 %v3_90a8, i32* %r0.global-to-local, align 4
  %v1_90b0 = sub nsw i32 999, %v3_90a8
  store i32 %v1_90b0, i32* %r2.global-to-local, align 4
  %v3_90b4 = sdiv i32 %v1_90b0, 256
  store i32 %v3_90b4, i32* %r1.global-to-local, align 4
  %v3_90b839 = udiv i32 %v3_90a8, 256
  store i32 %v3_90b839, i32* %r3.global-to-local, align 4
  %v1_90bc = trunc i32 %v3_90b839 to i8
  %v2_90bc = load i32, i32* @r5, align 4
  %v3_90bc = add i32 %v2_90bc, 5
  %v4_90bc = inttoptr i32 %v3_90bc to i8*
  store i8 %v1_90bc, i8* %v4_90bc, align 1
  %v0_90c0 = load i32, i32* %r0.global-to-local, align 4
  %v1_90c0 = trunc i32 %v0_90c0 to i8
  %v2_90c0 = load i32, i32* @r5, align 4
  %v3_90c0 = add i32 %v2_90c0, 4
  %v4_90c0 = inttoptr i32 %v3_90c0 to i8*
  store i8 %v1_90c0, i8* %v4_90c0, align 1
  %v0_90c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_90c4 = trunc i32 %v0_90c4 to i8
  %v2_90c4 = load i32, i32* @r6, align 4
  %v3_90c4 = add i32 %v2_90c4, 5
  %v4_90c4 = inttoptr i32 %v3_90c4 to i8*
  store i8 %v1_90c4, i8* %v4_90c4, align 1
  store i32 %v3_8b80, i32* %r1.global-to-local, align 4
  %v1_90cc = load i32, i32* @r4, align 4
  %v9_90cc = icmp eq i32 %v3_8b80, %v1_90cc
  store i1 %v9_90cc, i1* %cpsr_z.global-to-local, align 1
  %v0_90d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_90d0 = trunc i32 %v0_90d0 to i8
  %v2_90d0 = load i32, i32* @r6, align 4
  %v3_90d0 = add i32 %v2_90d0, 4
  %v4_90d0 = inttoptr i32 %v3_90d0 to i8*
  store i8 %v1_90d0, i8* %v4_90d0, align 1
  %v0_90d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_90d4, label %dec_label_pc_90d8, label %dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge

dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge:    ; preds = %dec_label_pc_90a0
  %v1_8eb8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8eb4

dec_label_pc_90d8:                                ; preds = %dec_label_pc_90a0, %dec_label_pc_8ea8
  %v0_90d8 = call i32 @function_e958()
  %v1_90d8 = trunc i32 %v0_90d8 to i8
  store i32 %v0_90d8, i32* %r0.global-to-local, align 4
  store i32 %v3_8b84, i32* %r2.global-to-local, align 4
  %v4_90e0 = sdiv i32 %v0_90d8, 256
  store i32 %v4_90e0, i32* %r3.global-to-local, align 4
  %v1_90e4 = load i32, i32* @r4, align 4
  %v9_90e4 = icmp eq i32 %v3_8b84, %v1_90e4
  store i1 %v9_90e4, i1* %cpsr_z.global-to-local, align 1
  %v3_90e8 = load i32, i32* @r5, align 4
  %v4_90e8 = add i32 %v3_90e8, 58
  %v5_90e8 = inttoptr i32 %v4_90e8 to i8*
  store i8 %v1_90d8, i8* %v5_90e8, align 1
  %v0_90ec = load i32, i32* %r3.global-to-local, align 4
  %v1_90ec = trunc i32 %v0_90ec to i8
  %v2_90ec = load i32, i32* @r7, align 4
  %v3_90ec = add i32 %v2_90ec, 1
  %v4_90ec = inttoptr i32 %v3_90ec to i8*
  store i8 %v1_90ec, i8* %v4_90ec, align 1
  %v0_90f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_90f0, label %dec_label_pc_90f4, label %dec_label_pc_8ec0

dec_label_pc_90f4:                                ; preds = %dec_label_pc_90d8, %dec_label_pc_8eb4
  %v0_90f4 = call i32 @function_e958()
  %v1_90f4 = trunc i32 %v0_90f4 to i8
  store i32 %v0_90f4, i32* %r0.global-to-local, align 4
  %v4_90f843 = udiv i32 %v0_90f4, 256
  %v1_90fc = trunc i32 %v4_90f843 to i8
  %v2_90fc = load i32, i32* @r7, align 4
  %v3_90fc = add i32 %v2_90fc, 3
  %v4_90fc = inttoptr i32 %v3_90fc to i8*
  store i8 %v1_90fc, i8* %v4_90fc, align 1
  store i32 %v1_8b74, i32* %r3.global-to-local, align 4
  store i1 %v2_9104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9104, label %bb108, label %bb107

bb107:                                            ; preds = %dec_label_pc_90f4
  %v1_9108 = load i32, i32* @r5, align 4
  %v2_9108 = add i32 %v1_9108, 16
  %v3_9108 = inttoptr i32 %v2_9108 to i32*
  %v4_9108 = load i32, i32* %v3_9108, align 4
  store i32 %v4_9108, i32* %r3.global-to-local, align 4
  br label %bb108

bb108:                                            ; preds = %dec_label_pc_90f4, %bb107
  %v3_910c = load i32, i32* @r7, align 4
  %v4_910c = add i32 %v3_910c, 2
  %v5_910c = inttoptr i32 %v4_910c to i8*
  store i8 %v1_90f4, i8* %v5_910c, align 1
  %v0_9110 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9110, label %dec_label_pc_9118, label %bb109

bb109:                                            ; preds = %bb108
  %v1_9110 = load i32, i32* %r3.global-to-local, align 4
  %v2_9110 = load i32, i32* @r6, align 4
  %v3_9110 = add i32 %v2_9110, 16
  %v4_9110 = inttoptr i32 %v3_9110 to i32*
  store i32 %v1_9110, i32* %v4_9110, align 4
  br label %dec_label_pc_8ed4

dec_label_pc_9118:                                ; preds = %dec_label_pc_8ec0, %bb108
  %v0_9118 = call i32 @function_e958()
  store i32 %v0_9118, i32* %r0.global-to-local, align 4
  %v1_911c = load i32, i32* @r6, align 4
  %v2_911c = add i32 %v1_911c, 16
  %v3_911c = inttoptr i32 %v2_911c to i32*
  store i32 %v0_9118, i32* %v3_911c, align 4
  br label %dec_label_pc_8ed4

dec_label_pc_9124:                                ; preds = %dec_label_pc_8ed4
  %v0_9124 = load i32, i32* @r7, align 4
  %v1_9124 = add i32 %v0_9124, 8
  store i32 %v1_9124, i32* %r0.global-to-local, align 4
  store i32 %v6_8ac4, i32* @r1, align 4
  %v1_912c = inttoptr i32 %v1_9124 to i8*
  %v2_912c = call i32 @function_ead8(i8* %v1_912c)
  store i32 %v2_912c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8f38

dec_label_pc_9134:                                ; preds = %dec_label_pc_8b64
  %v1_913c = add i32 %v6_8ac4, 8
  store i32 %v1_913c, i32* %r1.global-to-local, align 4
  %v1_9140 = add i32 %v6_8ac4, 66
  store i32 %v1_9140, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_8e44.preheader

; uselistorder directives
  uselistorder i32 %v1_9140, { 1, 0 }
  uselistorder i32 %v1_913c, { 1, 0 }
  uselistorder i32 %v0_90f4, { 0, 2, 1 }
  uselistorder i32 %v0_90d8, { 0, 2, 1 }
  uselistorder i32 %v3_90a8, { 0, 2, 1 }
  uselistorder i32 %v2_9074, { 1, 0 }
  uselistorder i32 %v8_9054, { 1, 2, 0 }
  uselistorder i32 %v3_9040, { 1, 0 }
  uselistorder i32 %v0_9030, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8ffc, { 1, 2, 0 }
  uselistorder i32 %v1_8ff8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_8f9c, { 1, 0, 2 }
  uselistorder i32 %v4_8f98, { 0, 2, 1 }
  uselistorder i32 %v0_8f78, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_8f68, { 0, 2, 1 }
  uselistorder i32 %v4_8f4c, { 1, 0 }
  uselistorder i32 %v7_8e70, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8e44, { 1, 0 }
  uselistorder i1 %v7_8e8c, { 2, 1, 0 }
  uselistorder i1 %v2_9104, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9094, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8dcc, { 1, 0, 2 }
  uselistorder i32 %v3_8c54, { 1, 0, 2 }
  uselistorder i32 %v3_8c34, { 1, 0 }
  uselistorder i32 %tmp91, { 1, 0 }
  uselistorder i32 %v1_8bd8, { 1, 0 }
  uselistorder i32 %v1_8bd4, { 2, 1, 0 }
  uselistorder i32 %v1_8bc0, { 1, 0 }
  uselistorder i32 %v1_8bbc, { 2, 1, 0 }
  uselistorder i32 %v1_8bb4, { 0, 2, 1 }
  uselistorder i32 %v3_8bac, { 2, 1, 0 }
  uselistorder i32 %v0_8b88, { 1, 0, 2 }
  uselistorder i32 %v3_8b7c, { 2, 1, 3, 0 }
  uselistorder i32 %v1_8b74, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_8b70, { 1, 0 }
  uselistorder i32 %v0_8b70, { 2, 1, 0 }
  uselistorder i32 %v0_8b68, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_8b64, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_8b5c, { 1, 0 }
  uselistorder i1 %v7_8b30, { 1, 0 }
  uselistorder i32 %v3_8b2c, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_8b18, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_8ae4, { 1, 2, 3, 0 }
  uselistorder i32 %v6_8ac4, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8a78, { 1, 2, 0 }
  uselistorder i32 %v6_8a4c, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v6_8a10, { 1, 2, 0 }
  uselistorder i32 %v2_89f8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_89dc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 46, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 42, 41, 43, 44, 46, 45, 48, 47, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 9, 10, 7, 8, 12, 11, 13, 1, 14, 15, 16, 4, 17, 18, 20, 19, 21, 22, 23, 24, 26, 25, 30, 27, 28, 29, 33, 31, 32, 3, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder label %dec_label_pc_9118, { 1, 0 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %dec_label_pc_9014, { 1, 0 }
  uselistorder label %dec_label_pc_8f38, { 1, 0 }
  uselistorder label %dec_label_pc_8ed4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8e44.preheader, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
}

define i32 @function_9154(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9154:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9154 = load i32, i32* @r4, align 4
  %v15_9154 = load i32, i32* @r8, align 4
  %v1_9158 = urem i32 %arg1, 256
  store i32 %v1_9158, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_9158, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9170 = urem i32 %arg3, 256
  store i32 %v1_9170, i32* @r4, align 4
  %v2_9174 = call i32 @function_12178(i32 %v1_9158, i32 4)
  %v0_9178 = load i32, i32* @r5, align 4
  store i32 %v0_9178, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9188 = load i32, i32* @r4, align 4
  store i32 %v0_9188, i32* %r0.global-to-local, align 4
  %v5_918c = inttoptr i32 %v0_9178 to i32*
  %v6_918c = call i32 @function_85e0(i32 %v0_9188, i32* %v5_918c, i32 2, i32 0, i32 %v2_9174)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_91a4 = load i32, i32* @r5, align 4
  store i32 %v0_91a4, i32* %r1.global-to-local, align 4
  %v0_91a8 = load i32, i32* @r4, align 4
  store i32 %v0_91a8, i32* %r0.global-to-local, align 4
  %v5_91ac = trunc i32 %v6_918c to i8
  %v6_91b0 = inttoptr i32 %v0_91a4 to i32*
  %v7_91b0 = call i32 @function_85e0(i32 %v0_91a8, i32* %v6_91b0, i32 3, i32 65535, i32 %v6_918c)
  %v0_91b4 = load i32, i32* @r5, align 4
  store i32 %v0_91b4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_91b0, i32* @r7, align 4
  %v0_91c4 = load i32, i32* @r4, align 4
  store i32 %v0_91c4, i32* %r0.global-to-local, align 4
  %v5_91c8 = inttoptr i32 %v0_91b4 to i32*
  %v6_91c8 = call i32 @function_85e0(i32 %v0_91c4, i32* %v5_91c8, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v0_91d4 = load i32, i32* @r5, align 4
  store i32 %v0_91d4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_91e0 = load i32, i32* @r4, align 4
  store i32 %v0_91e0, i32* %r0.global-to-local, align 4
  %v5_91e4 = trunc i32 %v6_91c8 to i8
  %v6_91e8 = inttoptr i32 %v0_91d4 to i32*
  %v7_91e8 = call i32 @function_85e0(i32 %v0_91e0, i32* %v6_91e8, i32 5, i32 1, i32 %v6_91c8)
  %v1_91f4 = urem i32 %v7_91e8, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9200 = load i32, i32* @r5, align 4
  store i32 %v0_9200, i32* %r1.global-to-local, align 4
  %v0_9204 = load i32, i32* @r4, align 4
  store i32 %v0_9204, i32* %r0.global-to-local, align 4
  %v5_920c = inttoptr i32 %v0_9200 to i32*
  %v6_920c = call i32 @function_85e0(i32 %v0_9204, i32* %v5_920c, i32 6, i32 65535, i32 %v1_91f4)
  %v0_9214 = load i32, i32* @r5, align 4
  store i32 %v0_9214, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_920c, i32* @sl, align 4
  %v0_9224 = load i32, i32* @r4, align 4
  store i32 %v0_9224, i32* %r0.global-to-local, align 4
  %v5_9228 = inttoptr i32 %v0_9214 to i32*
  %v6_9228 = call i32 @function_85e0(i32 %v0_9224, i32* %v5_9228, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_922c = load i32, i32* @r5, align 4
  store i32 %v0_922c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_9228, i32* @r8, align 4
  %v0_923c = load i32, i32* @r4, align 4
  store i32 %v0_923c, i32* %r0.global-to-local, align 4
  %v5_9240 = inttoptr i32 %v0_922c to i32*
  %v6_9240 = call i32 @function_85e0(i32 %v0_923c, i32* %v5_9240, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9250 = load i32, i32* @r5, align 4
  store i32 %v0_9250, i32* %r1.global-to-local, align 4
  %v0_9254 = load i32, i32* @r4, align 4
  store i32 %v0_9254, i32* %r0.global-to-local, align 4
  %v5_9258 = inttoptr i32 %v0_9250 to i32*
  %v6_9258 = call i32 @function_85e0(i32 %v0_9254, i32* %v5_9258, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9260 = urem i32 %v6_9258, 256
  %v0_9264 = load i32, i32* @r5, align 4
  store i32 %v0_9264, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9270 = load i32, i32* @r4, align 4
  store i32 %v0_9270, i32* %r0.global-to-local, align 4
  %v5_9278 = inttoptr i32 %v0_9264 to i32*
  %v6_9278 = call i32 @function_85e0(i32 %v0_9270, i32* %v5_9278, i32 19, i32 0, i32 %v1_9260)
  %v0_9280 = load i32, i32* @r5, align 4
  store i32 %v0_9280, i32* %r1.global-to-local, align 4
  %v2_9284 = load i32, i32* @global_var_1c5dc.51, align 4
  store i32 %v2_9284, i32* %r3.global-to-local, align 4
  store i32 %v6_9278, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9290 = load i32, i32* @r4, align 4
  store i32 %v0_9290, i32* %r0.global-to-local, align 4
  %v5_9294 = inttoptr i32 %v0_9280 to i32*
  %v6_9294 = call i32 @function_85e0(i32 %v0_9290, i32* %v5_9294, i32 25, i32 %v2_9284, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_92a8 = call i32 @function_11e8c(i32 2, i32 3, i32 6)
  store i32 %v3_92a8, i32* %r0.global-to-local, align 4
  %v7_92ac = icmp eq i32 %v3_92a8, -1
  store i1 %v7_92ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_92ac, label %dec_label_pc_972c, label %dec_label_pc_92b8

dec_label_pc_92b8:                                ; preds = %dec_label_pc_9154
  store i32 1, i32* %stack_var_-40, align 4
  %v6_92c0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_92c0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_92d4 = call i32 @function_11e5c(i32 %v3_92a8, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_92d4, i32* %r0.global-to-local, align 4
  %v7_92d8 = icmp eq i32 %v6_92d4, -1
  store i1 %v7_92d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_92d8, label %dec_label_pc_9724, label %dec_label_pc_92e0

dec_label_pc_92e0:                                ; preds = %dec_label_pc_92b8
  %v0_92e0 = load i32, i32* @sl, align 4
  %v0_92ec = load i32, i32* @r8, align 4
  %v3_92ec = mul i32 %v0_92ec, 65536
  store i32 %v3_92ec, i32* %r8.global-to-local, align 4
  %v0_92f0 = load i32, i32* @r7, align 4
  %v0_92f4 = load i32, i32* @r6, align 4
  %v1_92f4 = urem i32 %v0_92f4, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_92fc = urem i32 %v0_92e0, 65536
  store i32 %v3_92fc, i32* %r2.global-to-local, align 4
  %v3_9300 = urem i32 %v0_92ec, 65536
  store i32 %v3_9300, i32* %r3.global-to-local, align 4
  %v0_9304 = load i32, i32* @fp, align 4
  %v2_9304 = icmp eq i32 %v0_9304, 0
  store i1 %v2_9304, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_9314 = urem i32 %v0_92f0, 65536
  store i32 %v3_9314, i32* @sl, align 4
  %tmp84 = icmp slt i32 %v0_9304, 1
  br i1 %tmp84, label %dec_label_pc_9850, label %dec_label_pc_9324

dec_label_pc_9324:                                ; preds = %dec_label_pc_92e0
  %v3_9328 = mul i32 %v6_9240, 65536
  %v1_932c = add i32 %v3_9328, 3407872
  %v3_9334 = udiv i32 %v1_932c, 256
  %v0_92f0.not = or i32 %v0_92f0, -65536
  %v1_9344 = xor i32 %v0_92f0.not, 65535
  %v1_9348 = urem i32 %v0_92ec, 256
  %tmp85 = mul nsw i32 %v1_9344, 256
  %v1_9360 = and i32 %v3_9334, 65280
  %v1_9364 = add i32 %v3_9328, 524288
  %v4_9368 = udiv i32 %v1_932c, 16777216
  %v5_9368 = or i32 %v1_9360, %v4_9368
  store i32 %v5_9368, i32* %r0.global-to-local, align 4
  %v1_936c = add i32 %v3_9328, 1835008
  %v1_9374 = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  store i32 %v1_9374, i32* @lr, align 4
  %tmp86 = udiv i32 %v1_9344, 256
  %tmp87 = udiv i32 %v0_92f0, 256
  %v5_9388 = trunc i32 %tmp86 to i8
  %tmp88 = udiv i32 %v0_92e0, 256
  %sext29 = mul i32 %tmp87, 16777216
  %v4_93a8 = sdiv i32 %sext29, 16777216
  %v3_93b4 = mul nuw nsw i32 %v1_9348, 256
  store i32 %v3_93b4, i32* @r5, align 4
  %v3_93b8 = udiv i32 %v1_9364, 256
  %tmp89 = udiv i32 %v0_92ec, 256
  %v4_93c0 = urem i32 %tmp89, 256
  %v5_93c0 = or i32 %v4_93c0, %v3_93b4
  store i32 %v5_93c0, i32* @r7, align 4
  %v3_93c4 = ashr i32 %sext29, 31
  %v3_93d0 = sdiv i32 %v1_936c, 16777216
  %v1_93d4 = and i32 %v3_93b8, 65280
  store i32 %v1_93d4, i32* @r6, align 4
  %sext30 = mul i32 %tmp88, 16777216
  %v4_93dc = sdiv i32 %sext30, 16777216
  %v3_93e0 = ashr i32 %v1_936c, 31
  %v3_93e4 = udiv i32 %v1_9344, 65536
  %v4_93e8 = udiv i32 %v1_9364, 16777216
  %v5_93e8 = or i32 %v1_93d4, %v4_93e8
  store i32 %v5_93e8, i32* %r8.global-to-local, align 4
  %v3_93f4 = ashr i32 %sext30, 31
  store i32 %v3_93f4, i32* %r1.global-to-local, align 4
  store i32 %v1_9348, i32* %r2.global-to-local, align 4
  %v3_93fc41 = udiv i32 %v1_93d4, 256
  store i32 %v3_93fc41, i32* %r3.global-to-local, align 4
  %v5_9404 = trunc i32 %v3_93f4 to i8
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v1_932c, 256
  %v4_9468 = sdiv i32 %sext, 16777216
  %sext16 = mul nuw i32 %v4_9368, 16777216
  %v4_9478 = sdiv i32 %sext16, 16777216
  %v2_954c = icmp eq i32 %v1_92f4, 0
  %sext20 = mul i32 %v1_9364, 256
  %v4_956c = sdiv i32 %sext20, 16777216
  %sext21 = mul i32 %v0_92ec, 16777216
  %v7_9584 = sdiv i32 %sext21, 16777216
  %v1_9474 = trunc i32 %v4_9468 to i8
  br label %dec_label_pc_9414

dec_label_pc_9414:                                ; preds = %bb96, %dec_label_pc_9324
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9420 = call i32 @function_12178(i32 1510, i32 4)
  store i32 %v2_9420, i32* %r0.global-to-local, align 4
  store i32 %v2_9174, i32* %r1.global-to-local, align 4
  %v3_9428 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9428, i32* %r3.global-to-local, align 4
  %v2_942c = load i32, i32* @r4, align 4
  %v5_942c = mul i32 %v2_942c, 4
  %v6_942c = add i32 %v5_942c, %v2_9174
  %v7_942c = inttoptr i32 %v6_942c to i32*
  store i32 %v2_9420, i32* %v7_942c, align 4
  %v0_9430 = load i32, i32* %r1.global-to-local, align 4
  %v1_9430 = load i32, i32* %r3.global-to-local, align 4
  %v4_9430 = mul i32 %v1_9430, 4
  %v5_9430 = add i32 %v4_9430, %v0_9430
  %v6_9430 = inttoptr i32 %v5_9430 to i32*
  %v7_9430 = load i32, i32* %v6_9430, align 4
  store i32 %v7_9430, i32* %r4.global-to-local, align 4
  %v1_9434 = inttoptr i32 %v7_9430 to i8*
  %v2_9434 = load i8, i8* %v1_9434, align 1
  %tmp = urem i8 %v2_9434, 16
  %v1_9438 = zext i8 %tmp to i32
  %v1_943c = or i32 %v1_9438, 64
  store i32 %v1_943c, i32* %r2.global-to-local, align 4
  %v1_9440 = trunc i32 %v1_943c to i8
  store i8 %v1_9440, i8* %v1_9434, align 1
  %v0_9444 = load i32, i32* %r4.global-to-local, align 4
  %v1_9444 = inttoptr i32 %v0_9444 to i8*
  %v2_9444 = load i8, i8* %v1_9444, align 1
  %v1_9448 = and i8 %v2_9444, -16
  %v1_944c = or i8 %v1_9448, 5
  store i32 %v1_91f4, i32* %r2.global-to-local, align 4
  store i8 %v1_944c, i8* %v1_9444, align 1
  %v2_945c = load i32, i32* %r4.global-to-local, align 4
  %v3_945c = add i32 %v2_945c, 1
  %v4_945c = inttoptr i32 %v3_945c to i8*
  store i8 %v5_91ac, i8* %v4_945c, align 1
  store i32 %v6_91c8, i32* %r1.global-to-local, align 4
  %v2_9464 = load i32, i32* %r4.global-to-local, align 4
  %v3_9464 = add i32 %v2_9464, 8
  %v4_9464 = inttoptr i32 %v3_9464 to i8*
  store i8 %v5_91e4, i8* %v4_9464, align 1
  store i32 %v4_9468, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_9470 = load i32, i32* %r2.global-to-local, align 4
  %v9_9470 = icmp eq i32 %v0_9470, 0
  store i1 %v9_9470, i1* %cpsr_z.global-to-local, align 1
  %v2_9474 = load i32, i32* %r4.global-to-local, align 4
  %v3_9474 = add i32 %v2_9474, 3
  %v4_9474 = inttoptr i32 %v3_9474 to i8*
  store i8 %v1_9474, i8* %v4_9474, align 1
  store i32 %v4_9478, i32* %r2.global-to-local, align 4
  %v0_947c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_947c, label %.thread23, label %.thread

.thread:                                          ; preds = %dec_label_pc_9414
  %v1_947c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_947c, i32* %r3.global-to-local, align 4
  %v2_9480 = trunc i32 %v1_947c to i8
  %v3_9480 = load i32, i32* %r4.global-to-local, align 4
  %v4_9480 = add i32 %v3_9480, 7
  %v5_9480 = inttoptr i32 %v4_9480 to i8*
  store i8 %v2_9480, i8* %v5_9480, align 1
  %v0_9484.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9484.pr.pr, label %.thread23, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9488 = load i32, i32* %r4.global-to-local, align 4
  %v4_9488 = add i32 %v3_9488, 6
  %v5_9488 = inttoptr i32 %v4_9488 to i8*
  store i8 64, i8* %v5_9488, align 1
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_9414, %.thread, %bb
  %v0_948c = load i32, i32* %r2.global-to-local, align 4
  %v1_948c = trunc i32 %v0_948c to i8
  %v2_948c = load i32, i32* %r4.global-to-local, align 4
  %v3_948c = add i32 %v2_948c, 2
  %v4_948c = inttoptr i32 %v3_948c to i8*
  store i8 %v1_948c, i8* %v4_948c, align 1
  store i32 %v3_93c4, i32* %r2.global-to-local, align 4
  store i32 %v4_93a8, i32* %r1.global-to-local, align 4
  %v2_949c = load i32, i32* %r4.global-to-local, align 4
  %v3_949c = add i32 %v2_949c, 9
  %v4_949c = inttoptr i32 %v3_949c to i8*
  store i8 47, i8* %v4_949c, align 1
  %v0_94a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_94a0 = trunc i32 %v0_94a0 to i8
  %v2_94a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_94a0 = add i32 %v2_94a0, 5
  %v4_94a0 = inttoptr i32 %v3_94a0 to i8*
  store i8 %v1_94a0, i8* %v4_94a0, align 1
  %v3_94a4 = load i32, i32* %stack_var_-40, align 4
  %v5_94ac = mul i32 %v3_94a4, 24
  store i32 %v5_94ac, i32* %r3.global-to-local, align 4
  store i32 %v6_9294, i32* %r2.global-to-local, align 4
  %v1_94b4 = load i32, i32* %r4.global-to-local, align 4
  %v2_94b4 = add i32 %v1_94b4, 12
  %v3_94b4 = inttoptr i32 %v2_94b4 to i32*
  store i32 %v6_9294, i32* %v3_94b4, align 4
  %v0_94b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_94b8 = load i32, i32* @sb, align 4
  %v2_94b8 = add i32 %v1_94b8, %v0_94b8
  store i32 %v2_94b8, i32* %r3.global-to-local, align 4
  %v0_94bc = load i32, i32* %r1.global-to-local, align 4
  %v1_94bc = trunc i32 %v0_94bc to i8
  %v2_94bc = load i32, i32* %r4.global-to-local, align 4
  %v3_94bc = add i32 %v2_94bc, 4
  %v4_94bc = inttoptr i32 %v3_94bc to i8*
  store i8 %v1_94bc, i8* %v4_94bc, align 1
  %v0_94c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94c0 = add i32 %v0_94c0, 16
  %v2_94c0 = inttoptr i32 %v1_94c0 to i32*
  %v3_94c0 = load i32, i32* %v2_94c0, align 4
  store i32 %v3_94c0, i32* %r2.global-to-local, align 4
  %v0_94c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_94c4 = add i32 %v0_94c4, 20
  store i32 %v1_94c4, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_94cc = load i32, i32* %r0.global-to-local, align 4
  %v1_94cc = trunc i32 %v0_94cc to i8
  %v3_94cc = add i32 %v0_94c4, 23
  %v4_94cc = inttoptr i32 %v3_94cc to i8*
  store i8 %v1_94cc, i8* %v4_94cc, align 1
  %v0_94d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94d0 = trunc i32 %v0_94d0 to i8
  %v2_94d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_94d0 = add i32 %v2_94d0, 2
  %v4_94d0 = inttoptr i32 %v3_94d0 to i8*
  store i8 %v1_94d0, i8* %v4_94d0, align 1
  %v0_94d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_94d4 = add i32 %v0_94d4, 24
  %v2_94d4 = inttoptr i32 %v1_94d4 to i8*
  %v3_94d4 = load i8, i8* %v2_94d4, align 1
  %tmp104 = urem i8 %v3_94d4, 16
  %v1_94d8 = zext i8 %tmp104 to i32
  %v1_94dc = or i32 %v1_94d8, 64
  store i32 %v1_94dc, i32* %r3.global-to-local, align 4
  %v1_94e0 = trunc i32 %v1_94dc to i8
  store i8 %v1_94e0, i8* %v2_94d4, align 1
  %v0_94e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_94e4 = load i32, i32* %r4.global-to-local, align 4
  %v2_94e4 = add i32 %v1_94e4, 16
  %v3_94e4 = inttoptr i32 %v2_94e4 to i32*
  store i32 %v0_94e4, i32* %v3_94e4, align 4
  %v0_94e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_94e8 = add i32 %v0_94e8, 24
  %v2_94e8 = inttoptr i32 %v1_94e8 to i8*
  %v3_94e8 = load i8, i8* %v2_94e8, align 1
  %v1_94ec = and i8 %v3_94e8, -16
  %v1_94f0 = or i8 %v1_94ec, 5
  store i8 %v1_94f0, i8* %v2_94e8, align 1
  %v0_94fc = load i32, i32* %r4.global-to-local, align 4
  %v1_94fc = add i32 %v0_94fc, 24
  store i32 %v1_94fc, i32* @r5, align 4
  %v3_9500 = add i32 %v0_94fc, 25
  %v4_9500 = inttoptr i32 %v3_9500 to i8*
  store i8 %v5_91ac, i8* %v4_9500, align 1
  store i32 %v3_93d0, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_93e0, i32* %r2.global-to-local, align 4
  %v2_9510 = load i32, i32* @r5, align 4
  %v3_9510 = add i32 %v2_9510, 4
  %v4_9510 = inttoptr i32 %v3_9510 to i8*
  store i8 %v5_9388, i8* %v4_9510, align 1
  %v0_9514 = load i32, i32* %r1.global-to-local, align 4
  %v1_9514 = trunc i32 %v0_9514 to i8
  %v2_9514 = load i32, i32* @r5, align 4
  %v3_9514 = add i32 %v2_9514, 2
  %v4_9514 = inttoptr i32 %v3_9514 to i8*
  store i8 %v1_9514, i8* %v4_9514, align 1
  %v0_9518 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9518, label %bb91, label %bb90

bb90:                                             ; preds = %.thread23
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %.thread23, %bb90
  store i32 %v3_93e4, i32* %r1.global-to-local, align 4
  %v0_9520 = load i32, i32* %r2.global-to-local, align 4
  %v1_9520 = trunc i32 %v0_9520 to i8
  %v2_9520 = load i32, i32* @r5, align 4
  %v3_9520 = add i32 %v2_9520, 3
  %v4_9520 = inttoptr i32 %v3_9520 to i8*
  store i8 %v1_9520, i8* %v4_9520, align 1
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  %v0_9528 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9528, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  %v1_9528 = load i32, i32* %r3.global-to-local, align 4
  %v2_9528 = trunc i32 %v1_9528 to i8
  %v3_9528 = load i32, i32* @r5, align 4
  %v4_9528 = add i32 %v3_9528, 6
  %v5_9528 = inttoptr i32 %v4_9528 to i8*
  store i8 %v2_9528, i8* %v5_9528, align 1
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9530 = load i32, i32* %r1.global-to-local, align 4
  %v1_9530 = trunc i32 %v0_9530 to i8
  %v2_9530 = load i32, i32* @r5, align 4
  %v3_9530 = add i32 %v2_9530, 5
  %v4_9530 = inttoptr i32 %v3_9530 to i8*
  store i8 %v1_9530, i8* %v4_9530, align 1
  %v0_9534 = load i32, i32* %r2.global-to-local, align 4
  %v1_9534 = trunc i32 %v0_9534 to i8
  %v2_9534 = load i32, i32* @r5, align 4
  %v3_9534 = add i32 %v2_9534, 8
  %v4_9534 = inttoptr i32 %v3_9534 to i8*
  store i8 %v1_9534, i8* %v4_9534, align 1
  %v0_9538 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9538, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_9538 = load i32, i32* %r0.global-to-local, align 4
  %v2_9538 = trunc i32 %v1_9538 to i8
  %v3_9538 = load i32, i32* @r5, align 4
  %v4_9538 = add i32 %v3_9538, 7
  %v5_9538 = inttoptr i32 %v4_9538 to i8*
  store i8 %v2_9538, i8* %v5_9538, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  %v0_953c = load i32, i32* %r3.global-to-local, align 4
  %v1_953c = trunc i32 %v0_953c to i8
  %v2_953c = load i32, i32* @r5, align 4
  %v3_953c = add i32 %v2_953c, 9
  %v4_953c = inttoptr i32 %v3_953c to i8*
  store i8 %v1_953c, i8* %v4_953c, align 1
  %v0_9540 = call i32 @function_e958()
  store i32 %v0_9540, i32* %r0.global-to-local, align 4
  store i32 %v1_92f4, i32* %r1.global-to-local, align 4
  store i1 %v2_954c, i1* %cpsr_z.global-to-local, align 1
  %v1_9550 = sub i32 1023, %v0_9540
  store i32 %v1_9550, i32* %r3.global-to-local, align 4
  br i1 %v2_954c, label %.thread24, label %.thread25

.thread24:                                        ; preds = %bb95
  %v2_9558 = load i32, i32* @r5, align 4
  %v3_9558 = add i32 %v2_9558, 16
  %v4_9558 = inttoptr i32 %v3_9558 to i32*
  store i32 %v1_9550, i32* %v4_9558, align 4
  br label %bb96

.thread25:                                        ; preds = %bb95
  %v1_9554 = load i32, i32* %r4.global-to-local, align 4
  %v2_9554 = add i32 %v1_9554, 16
  %v3_9554 = inttoptr i32 %v2_9554 to i32*
  %v4_9554 = load i32, i32* %v3_9554, align 4
  store i32 %v4_9554, i32* %r3.global-to-local, align 4
  %v2_955c = load i32, i32* @r5, align 4
  %v3_955c = add i32 %v2_955c, 16
  %v4_955c = inttoptr i32 %v3_955c to i32*
  store i32 %v4_9554, i32* %v4_955c, align 4
  br label %bb96

bb96:                                             ; preds = %.thread24, %.thread25
  store i32 %v4_93dc, i32* %r3.global-to-local, align 4
  %v0_9564 = load i32, i32* %r4.global-to-local, align 4
  %v1_9564 = add i32 %v0_9564, 44
  store i32 %v1_9564, i32* @r6, align 4
  %v1_9568 = load i32, i32* @r5, align 4
  %v2_9568 = add i32 %v1_9568, 12
  %v3_9568 = inttoptr i32 %v2_9568 to i32*
  store i32 %v0_9540, i32* %v3_9568, align 4
  store i32 %v4_956c, i32* %r2.global-to-local, align 4
  %v0_9570 = load i32, i32* %r3.global-to-local, align 4
  %v1_9570 = trunc i32 %v0_9570 to i8
  %v2_9570 = load i32, i32* @r6, align 4
  %v3_9570 = inttoptr i32 %v2_9570 to i8*
  store i8 %v1_9570, i8* %v3_9570, align 1
  %v3_9574 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9574, i32* %r3.global-to-local, align 4
  %v0_9578 = load i32, i32* %r2.global-to-local, align 4
  %v1_9578 = trunc i32 %v0_9578 to i8
  %v2_9578 = load i32, i32* @r6, align 4
  %v3_9578 = add i32 %v2_9578, 5
  %v4_9578 = inttoptr i32 %v3_9578 to i8*
  store i8 %v1_9578, i8* %v4_9578, align 1
  %v0_957c = load i32, i32* %r3.global-to-local, align 4
  %v1_957c = add i32 %v0_957c, 1
  store i32 %v1_957c, i32* @r4, align 4
  store i32 %v3_93f4, i32* %r1.global-to-local, align 4
  store i32 %v7_9584, i32* %r2.global-to-local, align 4
  %v1_9588 = load i32, i32* @fp, align 4
  %v9_9588 = icmp eq i32 %v1_957c, %v1_9588
  store i1 %v9_9588, i1* %cpsr_z.global-to-local, align 1
  %v2_958c = load i32, i32* @r6, align 4
  %v3_958c = add i32 %v2_958c, 1
  %v4_958c = inttoptr i32 %v3_958c to i8*
  store i8 %v5_9404, i8* %v4_958c, align 1
  %v0_9590 = load i32, i32* @r7, align 4
  %v1_9590 = trunc i32 %v0_9590 to i8
  %v2_9590 = load i32, i32* @r6, align 4
  %v3_9590 = add i32 %v2_9590, 2
  %v4_9590 = inttoptr i32 %v3_9590 to i8*
  store i8 %v1_9590, i8* %v4_9590, align 1
  %v0_9594 = load i32, i32* %r2.global-to-local, align 4
  %v1_9594 = trunc i32 %v0_9594 to i8
  %v2_9594 = load i32, i32* @r6, align 4
  %v3_9594 = add i32 %v2_9594, 3
  %v4_9594 = inttoptr i32 %v3_9594 to i8*
  store i8 %v1_9594, i8* %v4_9594, align 1
  %v0_9598 = load i32, i32* %r8.global-to-local, align 4
  %v1_9598 = trunc i32 %v0_9598 to i8
  %v2_9598 = load i32, i32* @r6, align 4
  %v3_9598 = add i32 %v2_9598, 4
  %v4_9598 = inttoptr i32 %v3_9598 to i8*
  store i8 %v1_9598, i8* %v4_9598, align 1
  %v0_959c = load i32, i32* @r4, align 4
  store i32 %v0_959c, i32* %stack_var_-40, align 4
  %v5_95a0 = icmp slt i32 %v1_957c, %v1_9588
  br i1 %v5_95a0, label %dec_label_pc_9414, label %dec_label_pc_95a4

dec_label_pc_95a4:                                ; preds = %bb96
  %v1_95ac = add i32 %v6_9240, 8
  store i32 %v1_95ac, i32* %r3.global-to-local, align 4
  %v1_95b0 = add i32 %v6_9240, 52
  store i32 %v1_95b0, i32* %r1.global-to-local, align 4
  %v0_95bc.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_95bc.preheader

dec_label_pc_95bc.preheader:                      ; preds = %dec_label_pc_95a4, %dec_label_pc_9850
  %v0_95bc.pre = phi i32 [ %v0_95bc.pre.pre, %dec_label_pc_95a4 ], [ %v0_9304, %dec_label_pc_9850 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_95b0, %dec_label_pc_95a4 ], [ %v1_985c, %dec_label_pc_9850 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_95ac, %dec_label_pc_95a4 ], [ %v1_9858, %dec_label_pc_9850 ]
  %v2_9834 = icmp eq i32 %v1_9260, 0
  %v2_9634 = icmp eq i32 %v1_92f4, 0
  %v2_9600 = icmp eq i32 %v6_9294, -1
  %v7_9600 = icmp eq i32 %v6_9294, -1
  br label %dec_label_pc_95bc

dec_label_pc_95bc:                                ; preds = %dec_label_pc_9650, %dec_label_pc_95bc.preheader
  %v0_95bc = phi i32 [ %v0_95bc.pre, %dec_label_pc_95bc.preheader ], [ %v1_9714, %dec_label_pc_9650 ]
  %v2_95bc = icmp eq i32 %v0_95bc, 0
  store i1 %v2_95bc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_95bc, 1
  br label %dec_label_pc_95c4

dec_label_pc_95c4:                                ; preds = %dec_label_pc_95c4, %dec_label_pc_95bc
  br i1 %tmp97, label %dec_label_pc_95c4, label %dec_label_pc_95c8

dec_label_pc_95c8:                                ; preds = %dec_label_pc_95c4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_95d4

dec_label_pc_95d4:                                ; preds = %dec_label_pc_9650, %dec_label_pc_95c8
  %v1_95e8 = phi i32 [ %v1_9710, %dec_label_pc_9650 ], [ 0, %dec_label_pc_95c8 ]
  %v5_95d8 = mul i32 %v1_95e8, 24
  %v1_95dc = load i32, i32* @sb, align 4
  %v2_95dc = add i32 %v1_95dc, %v5_95d8
  store i32 %v2_95dc, i32* %r3.global-to-local, align 4
  store i32 %v2_9174, i32* %r1.global-to-local, align 4
  %v1_95e4 = add i32 %v2_95dc, 20
  %v2_95e4 = inttoptr i32 %v1_95e4 to i8*
  %v3_95e4 = load i8, i8* %v2_95e4, align 1
  %v4_95e4 = zext i8 %v3_95e4 to i32
  store i32 %v4_95e4, i32* %r2.global-to-local, align 4
  %v4_95e8 = mul i32 %v1_95e8, 4
  %v5_95e8 = add i32 %v4_95e8, %v2_9174
  %v6_95e8 = inttoptr i32 %v5_95e8 to i32*
  %v7_95e8 = load i32, i32* %v6_95e8, align 4
  store i32 %v7_95e8, i32* @r5, align 4
  %v7_95ec = icmp eq i8 %v3_95e4, 31
  store i1 %v7_95ec, i1* %cpsr_z.global-to-local, align 1
  %v1_95f0 = add i32 %v7_95e8, 24
  store i32 %v1_95f0, i32* @r6, align 4
  %v1_95f4 = add i32 %v7_95e8, 44
  store i32 %v1_95f4, i32* @r7, align 4
  %tmp105 = icmp ult i8 %v3_95e4, 32
  br i1 %tmp105, label %dec_label_pc_9734, label %dec_label_pc_95fc

dec_label_pc_95fc:                                ; preds = %dec_label_pc_95d4
  store i32 %v6_9294, i32* %r2.global-to-local, align 4
  store i1 %v7_9600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9600, label %dec_label_pc_979c, label %dec_label_pc_9608

dec_label_pc_9608:                                ; preds = %dec_label_pc_9734, %dec_label_pc_95fc
  store i32 65535, i32* @r4, align 4
  %v0_9610 = load i32, i32* @sl, align 4
  %v9_9610 = icmp eq i32 %v0_9610, 65535
  store i1 %v9_9610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9610, label %dec_label_pc_97b4, label %dec_label_pc_9618

dec_label_pc_9618:                                ; preds = %dec_label_pc_979c.dec_label_pc_9618_crit_edge, %dec_label_pc_9608
  %v1_961c = phi i32 [ %v1_961c.pre, %dec_label_pc_979c.dec_label_pc_9618_crit_edge ], [ 65535, %dec_label_pc_9608 ]
  store i32 %v3_92fc, i32* %r3.global-to-local, align 4
  %v9_961c = icmp eq i32 %v3_92fc, %v1_961c
  store i1 %v9_961c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_961c, label %dec_label_pc_97ec, label %dec_label_pc_9624

dec_label_pc_9624:                                ; preds = %dec_label_pc_97b4.dec_label_pc_9624_crit_edge, %dec_label_pc_9618
  %v1_9628 = phi i32 [ %v1_9628.pre, %dec_label_pc_97b4.dec_label_pc_9624_crit_edge ], [ %v1_961c, %dec_label_pc_9618 ]
  store i32 %v3_9300, i32* %r1.global-to-local, align 4
  %v9_9628 = icmp eq i32 %v3_9300, %v1_9628
  store i1 %v9_9628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9628, label %dec_label_pc_9808, label %dec_label_pc_9630

dec_label_pc_9630:                                ; preds = %dec_label_pc_97ec, %dec_label_pc_9624
  store i32 %v1_92f4, i32* %r2.global-to-local, align 4
  store i1 %v2_9634, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9634, label %dec_label_pc_982c, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_9630
  %v1_9638 = load i32, i32* @r5, align 4
  %v2_9638 = add i32 %v1_9638, 16
  %v3_9638 = inttoptr i32 %v2_9638 to i32*
  %v4_9638 = load i32, i32* %v3_9638, align 4
  store i32 %v4_9638, i32* %r3.global-to-local, align 4
  %v2_963c = load i32, i32* @r6, align 4
  %v3_963c = add i32 %v2_963c, 16
  %v4_963c = inttoptr i32 %v3_963c to i32*
  store i32 %v4_9638, i32* %v4_963c, align 4
  br label %dec_label_pc_9644

dec_label_pc_9644:                                ; preds = %bb102, %.thread26
  store i32 %v1_9260, i32* %r3.global-to-local, align 4
  store i1 %v2_9834, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9834, label %dec_label_pc_9650, label %dec_label_pc_9840

dec_label_pc_9650:                                ; preds = %dec_label_pc_9644, %dec_label_pc_982c, %dec_label_pc_9840
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9654 = load i32, i32* @r8, align 4
  %v1_9654 = trunc i32 %v0_9654 to i8
  %v2_9654 = load i32, i32* @r5, align 4
  %v3_9654 = add i32 %v2_9654, 10
  %v4_9654 = inttoptr i32 %v3_9654 to i8*
  store i8 %v1_9654, i8* %v4_9654, align 1
  %v0_9658 = load i32, i32* @r8, align 4
  %v1_9658 = trunc i32 %v0_9658 to i8
  %v2_9658 = load i32, i32* @r5, align 4
  %v3_9658 = add i32 %v2_9658, 11
  %v4_9658 = inttoptr i32 %v3_9658 to i8*
  store i8 %v1_9658, i8* %v4_9658, align 1
  %v0_965c = load i32, i32* @r5, align 4
  store i32 %v0_965c, i32* @r0, align 4
  %v2_9660 = call i32 @function_d0b8(i32 %v0_965c, i32 20)
  %v3_9660 = trunc i32 %v2_9660 to i8
  %v4_9664 = sdiv i32 %v2_9660, 256
  store i32 %v4_9664, i32* %r3.global-to-local, align 4
  %v1_9668 = trunc i32 %v4_9664 to i8
  %v2_9668 = load i32, i32* @r5, align 4
  %v3_9668 = add i32 %v2_9668, 11
  %v4_9668 = inttoptr i32 %v3_9668 to i8*
  store i8 %v1_9668, i8* %v4_9668, align 1
  %v3_966c = load i32, i32* @r5, align 4
  %v4_966c = add i32 %v3_966c, 10
  %v5_966c = inttoptr i32 %v4_966c to i8*
  store i8 %v3_9660, i8* %v5_966c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9674 = load i32, i32* @r8, align 4
  %v1_9674 = trunc i32 %v0_9674 to i8
  %v2_9674 = load i32, i32* @r6, align 4
  %v3_9674 = add i32 %v2_9674, 10
  %v4_9674 = inttoptr i32 %v3_9674 to i8*
  store i8 %v1_9674, i8* %v4_9674, align 1
  %v0_9678 = load i32, i32* @r8, align 4
  %v1_9678 = trunc i32 %v0_9678 to i8
  %v2_9678 = load i32, i32* @r6, align 4
  %v3_9678 = add i32 %v2_9678, 11
  %v4_9678 = inttoptr i32 %v3_9678 to i8*
  store i8 %v1_9678, i8* %v4_9678, align 1
  %v0_967c = load i32, i32* @r6, align 4
  store i32 %v0_967c, i32* @r0, align 4
  %v2_9680 = call i32 @function_d0b8(i32 %v0_967c, i32 20)
  %v3_9680 = trunc i32 %v2_9680 to i8
  store i32 %v2_9680, i32* %r0.global-to-local, align 4
  %v4_9684 = sdiv i32 %v2_9680, 256
  store i32 %v4_9684, i32* %r3.global-to-local, align 4
  %v3_9688 = load i32, i32* @r6, align 4
  %v4_9688 = add i32 %v3_9688, 10
  %v5_9688 = inttoptr i32 %v4_9688 to i8*
  store i8 %v3_9680, i8* %v5_9688, align 1
  %v0_968c = load i32, i32* %r3.global-to-local, align 4
  %v1_968c = trunc i32 %v0_968c to i8
  %v2_968c = load i32, i32* @r6, align 4
  %v3_968c = add i32 %v2_968c, 11
  %v4_968c = inttoptr i32 %v3_968c to i8*
  store i8 %v1_968c, i8* %v4_968c, align 1
  %v0_9690 = load i32, i32* @r7, align 4
  %v1_9690 = add i32 %v0_9690, 4
  %v2_9690 = inttoptr i32 %v1_9690 to i8*
  %v3_9690 = load i8, i8* %v2_9690, align 1
  %v4_9690 = zext i8 %v3_9690 to i32
  store i32 %v4_9690, i32* %r3.global-to-local, align 4
  %v1_9694 = add i32 %v0_9690, 5
  %v2_9694 = inttoptr i32 %v1_9694 to i8*
  %v3_9694 = load i8, i8* %v2_9694, align 1
  %v4_9694 = zext i8 %v3_9694 to i32
  store i32 %v0_9690, i32* @r1, align 4
  %v4_969c = mul nuw nsw i32 %v4_9694, 256
  %v5_969c = or i32 %v4_969c, %v4_9690
  store i32 %v5_969c, i32* %r2.global-to-local, align 4
  %v0_96a0 = load i32, i32* @r8, align 4
  %v1_96a0 = trunc i32 %v0_96a0 to i8
  %v3_96a0 = add i32 %v0_9690, 6
  %v4_96a0 = inttoptr i32 %v3_96a0 to i8*
  store i8 %v1_96a0, i8* %v4_96a0, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_96a8 = load i32, i32* @r8, align 4
  %v1_96a8 = trunc i32 %v0_96a8 to i8
  %v2_96a8 = load i32, i32* @r7, align 4
  %v3_96a8 = add i32 %v2_96a8, 7
  %v4_96a8 = inttoptr i32 %v3_96a8 to i8*
  store i8 %v1_96a8, i8* %v4_96a8, align 1
  %v0_96ac = load i32, i32* @r6, align 4
  store i32 %v0_96ac, i32* %r0.global-to-local, align 4
  %v4_96b0 = call i32 @function_d114(i32 %v0_96ac, i32 %v0_9690, i32 %v5_969c, i32 %stack_var_-152.0.ph)
  %v5_96b0 = trunc i32 %v4_96b0 to i8
  store i32 %v4_96b0, i32* %r0.global-to-local, align 4
  %v3_96b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_96b4, i32* %r3.global-to-local, align 4
  %v3_96b8 = mul i32 %v3_96b4, 32
  store i32 %v3_96b8, i32* %r2.global-to-local, align 4
  %v0_96bc = load i32, i32* @r5, align 4
  %v1_96bc = add i32 %v0_96bc, 16
  %v2_96bc = inttoptr i32 %v1_96bc to i32*
  %v3_96bc = load i32, i32* %v2_96bc, align 4
  store i32 %v3_96bc, i32* %r1.global-to-local, align 4
  %v5_96c0 = mul i32 %v3_96b4, 24
  store i32 %v5_96c0, i32* %r2.global-to-local, align 4
  %v4_96c442 = udiv i32 %v4_96b0, 256
  %v1_96c8 = trunc i32 %v4_96c442 to i8
  %v2_96c8 = load i32, i32* @r7, align 4
  %v3_96c8 = add i32 %v2_96c8, 7
  %v4_96c8 = inttoptr i32 %v3_96c8 to i8*
  store i8 %v1_96c8, i8* %v4_96c8, align 1
  %v0_96cc = load i32, i32* %r2.global-to-local, align 4
  %v1_96cc = load i32, i32* @sb, align 4
  %v2_96cc = add i32 %v1_96cc, %v0_96cc
  store i32 %v2_96cc, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_96d4 = load i32, i32* @r7, align 4
  %v4_96d4 = add i32 %v3_96d4, 6
  %v5_96d4 = inttoptr i32 %v4_96d4 to i8*
  store i8 %v5_96b0, i8* %v5_96d4, align 1
  %v0_96d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_96d8 = load i32, i32* %lr.global-to-local, align 4
  %v2_96d8 = add i32 %v1_96d8, 4
  %v3_96d8 = inttoptr i32 %v2_96d8 to i32*
  store i32 %v0_96d8, i32* %v3_96d8, align 4
  %v0_96dc = load i32, i32* %r3.global-to-local, align 4
  %v1_96dc = trunc i32 %v0_96dc to i8
  %v2_96dc = load i32, i32* %r2.global-to-local, align 4
  %v3_96dc = load i32, i32* @sb, align 4
  %v4_96dc = add i32 %v3_96dc, %v2_96dc
  %v5_96dc = inttoptr i32 %v4_96dc to i8*
  store i8 %v1_96dc, i8* %v5_96dc, align 1
  %v0_96e0 = load i32, i32* @r8, align 4
  %v1_96e0 = trunc i32 %v0_96e0 to i8
  %v2_96e0 = load i32, i32* %lr.global-to-local, align 4
  %v3_96e0 = add i32 %v2_96e0, 2
  %v4_96e0 = inttoptr i32 %v3_96e0 to i8*
  store i8 %v1_96e0, i8* %v4_96e0, align 1
  %v0_96e4 = load i32, i32* @r8, align 4
  %v1_96e4 = trunc i32 %v0_96e4 to i8
  %v2_96e4 = load i32, i32* %lr.global-to-local, align 4
  %v3_96e4 = add i32 %v2_96e4, 1
  %v4_96e4 = inttoptr i32 %v3_96e4 to i8*
  store i8 %v1_96e4, i8* %v4_96e4, align 1
  %v0_96e8 = load i32, i32* @r8, align 4
  %v1_96e8 = trunc i32 %v0_96e8 to i8
  %v2_96e8 = load i32, i32* %lr.global-to-local, align 4
  %v3_96e8 = add i32 %v2_96e8, 3
  %v4_96e8 = inttoptr i32 %v3_96e8 to i8*
  store i8 %v1_96e8, i8* %v4_96e8, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_96f4 = load i32, i32* @r5, align 4
  store i32 %v0_96f4, i32* %r1.global-to-local, align 4
  store i32 %v3_92a8, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_9700 = load i32, i32* %lr.global-to-local, align 4
  %v6_9708 = inttoptr i32 %v0_96f4 to i32*
  %v7_9708 = call i32 @function_11e28(i32 %v3_92a8, i32* %v6_9708, i32 %stack_var_-120.0.ph, i32 16384, i32 %v0_9700, i32 16)
  %v3_970c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_970c, i32* %r3.global-to-local, align 4
  %v1_9710 = add i32 %v3_970c, 1
  store i32 %v1_9710, i32* %r0.global-to-local, align 4
  %v1_9714 = load i32, i32* @fp, align 4
  %v9_9714 = icmp eq i32 %v1_9710, %v1_9714
  store i1 %v9_9714, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9710, i32* %stack_var_-40, align 4
  %v6_971c = icmp slt i32 %v1_9710, %v1_9714
  br i1 %v6_971c, label %dec_label_pc_95d4, label %dec_label_pc_95bc

dec_label_pc_9724:                                ; preds = %dec_label_pc_92b8
  store i32 %v3_92a8, i32* %r0.global-to-local, align 4
  %v1_9728 = call i32 @function_11574(i32 %v3_92a8)
  store i32 %v1_9728, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_972c

dec_label_pc_972c:                                ; preds = %dec_label_pc_9154, %dec_label_pc_9724
  %v29_9730 = phi i32 [ %v3_92a8, %dec_label_pc_9154 ], [ %v1_9728, %dec_label_pc_9724 ]
  store i32 %v3_9154, i32* %r4.global-to-local, align 4
  store i32 %v15_9154, i32* %r8.global-to-local, align 4
  ret i32 %v29_9730

dec_label_pc_9734:                                ; preds = %dec_label_pc_95d4
  %v1_9734 = add i32 %v2_95dc, 16
  %v2_9734 = inttoptr i32 %v1_9734 to i32*
  %v3_9734 = load i32, i32* %v2_9734, align 4
  store i32 %v3_9734, i32* %r4.global-to-local, align 4
  %v0_9738 = call i32 @function_e958()
  store i32 %v0_9738, i32* %r0.global-to-local, align 4
  %v3_973c = load i32, i32* %stack_var_-40, align 4
  %v5_9744 = mul i32 %v3_973c, 24
  %v0_9748 = load i32, i32* %r4.global-to-local, align 4
  %v1_974c = load i32, i32* @sb, align 4
  %v2_974c = add i32 %v1_974c, %v5_9744
  store i32 %v2_974c, i32* %r1.global-to-local, align 4
  %v1_9750 = and i32 %v0_9748, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_9750, i32* %r3.global-to-local, align 4
  %v1_9748 = udiv i32 %v0_9748, 256
  %v3_9754 = and i32 %v1_9748, 65280
  store i32 %v3_9754, i32* %r2.global-to-local, align 4
  %v3_9758 = mul i32 %v0_9748, 16777216
  %v1_975c = add i32 %v2_974c, 20
  %v2_975c = inttoptr i32 %v1_975c to i8*
  %v3_975c = load i8, i8* %v2_975c, align 1
  %v4_975c = zext i8 %v3_975c to i32
  store i32 %v4_975c, i32* %lr.global-to-local, align 4
  %v4_9760 = mul i32 %v1_9750, 256
  %v5_9760 = or i32 %v4_9760, %v3_9758
  %v4_9764 = udiv i32 %v0_9748, 16777216
  %v5_9764 = or i32 %v3_9754, %v4_9764
  %v2_9768 = or i32 %v5_9764, %v5_9760
  %v7_976c = lshr i32 %v0_9738, %v4_975c
  %v8_976c = add i32 %v7_976c, %v2_9768
  %v3_9778 = mul i32 %v8_976c, 16777216
  %v1_977c = and i32 %v8_976c, 65280
  store i32 %v1_977c, i32* %r0.global-to-local, align 4
  store i32 %v6_9294, i32* %r2.global-to-local, align 4
  %v4_9788 = mul nuw nsw i32 %v1_977c, 256
  %v5_9788 = or i32 %v4_9788, %v3_9778
  store i32 %v5_9788, i32* %r1.global-to-local, align 4
  %v2_978c = call i32 @llvm.bswap.i32(i32 %v8_976c)
  store i32 %v2_978c, i32* %r3.global-to-local, align 4
  store i1 %v7_9600, i1* %cpsr_z.global-to-local, align 1
  %v1_9794 = load i32, i32* @r5, align 4
  %v2_9794 = add i32 %v1_9794, 16
  %v3_9794 = inttoptr i32 %v2_9794 to i32*
  store i32 %v2_978c, i32* %v3_9794, align 4
  br i1 %v2_9600, label %dec_label_pc_979c, label %dec_label_pc_9608

dec_label_pc_979c:                                ; preds = %dec_label_pc_9734, %dec_label_pc_95fc
  %v0_979c = call i32 @function_e958()
  store i32 %v0_979c, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_97a8 = load i32, i32* @sl, align 4
  %v9_97a8 = icmp eq i32 %v0_97a8, 65535
  store i1 %v9_97a8, i1* %cpsr_z.global-to-local, align 1
  %v1_97ac = load i32, i32* @r5, align 4
  %v2_97ac = add i32 %v1_97ac, 12
  %v3_97ac = inttoptr i32 %v2_97ac to i32*
  store i32 %v0_979c, i32* %v3_97ac, align 4
  br i1 %v9_97a8, label %dec_label_pc_97b4, label %dec_label_pc_979c.dec_label_pc_9618_crit_edge

dec_label_pc_979c.dec_label_pc_9618_crit_edge:    ; preds = %dec_label_pc_979c
  %v1_961c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9618

dec_label_pc_97b4:                                ; preds = %dec_label_pc_979c, %dec_label_pc_9608
  %v0_97b4 = call i32 @function_e958()
  %v3_97bc = urem i32 %v0_97b4, 65536
  store i32 %v3_97bc, i32* %r0.global-to-local, align 4
  %v3_97c015 = udiv i32 %v0_97b4, 256
  %v1_97c4 = trunc i32 %v3_97c015 to i8
  %v2_97c4 = load i32, i32* @r5, align 4
  %v3_97c4 = add i32 %v2_97c4, 5
  %v4_97c4 = inttoptr i32 %v3_97c4 to i8*
  store i8 %v1_97c4, i8* %v4_97c4, align 1
  %v0_97c8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_92fc, i32* %r3.global-to-local, align 4
  %v1_97d0 = sub i32 999, %v0_97c8
  store i32 %v1_97d0, i32* %r2.global-to-local, align 4
  %v3_97d4 = sdiv i32 %v1_97d0, 256
  store i32 %v3_97d4, i32* %r1.global-to-local, align 4
  %v1_97d8 = load i32, i32* @r4, align 4
  %v9_97d8 = icmp eq i32 %v3_92fc, %v1_97d8
  store i1 %v9_97d8, i1* %cpsr_z.global-to-local, align 1
  %v1_97dc = trunc i32 %v0_97c8 to i8
  %v2_97dc = load i32, i32* @r5, align 4
  %v3_97dc = add i32 %v2_97dc, 4
  %v4_97dc = inttoptr i32 %v3_97dc to i8*
  store i8 %v1_97dc, i8* %v4_97dc, align 1
  %v0_97e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_97e0 = trunc i32 %v0_97e0 to i8
  %v2_97e0 = load i32, i32* @r6, align 4
  %v3_97e0 = add i32 %v2_97e0, 5
  %v4_97e0 = inttoptr i32 %v3_97e0 to i8*
  store i8 %v1_97e0, i8* %v4_97e0, align 1
  %v0_97e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_97e4 = trunc i32 %v0_97e4 to i8
  %v2_97e4 = load i32, i32* @r6, align 4
  %v3_97e4 = add i32 %v2_97e4, 4
  %v4_97e4 = inttoptr i32 %v3_97e4 to i8*
  store i8 %v1_97e4, i8* %v4_97e4, align 1
  %v0_97e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_97e8, label %dec_label_pc_97ec, label %dec_label_pc_97b4.dec_label_pc_9624_crit_edge

dec_label_pc_97b4.dec_label_pc_9624_crit_edge:    ; preds = %dec_label_pc_97b4
  %v1_9628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9624

dec_label_pc_97ec:                                ; preds = %dec_label_pc_97b4, %dec_label_pc_9618
  %v0_97ec = call i32 @function_e958()
  %v1_97ec = trunc i32 %v0_97ec to i8
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  store i32 %v3_9300, i32* %r1.global-to-local, align 4
  %v4_97f4 = sdiv i32 %v0_97ec, 256
  store i32 %v4_97f4, i32* %r3.global-to-local, align 4
  %v1_97f8 = load i32, i32* @r4, align 4
  %v9_97f8 = icmp eq i32 %v3_9300, %v1_97f8
  store i1 %v9_97f8, i1* %cpsr_z.global-to-local, align 1
  %v3_97fc = load i32, i32* @r5, align 4
  %v4_97fc = add i32 %v3_97fc, 44
  %v5_97fc = inttoptr i32 %v4_97fc to i8*
  store i8 %v1_97ec, i8* %v5_97fc, align 1
  %v0_9800 = load i32, i32* %r3.global-to-local, align 4
  %v1_9800 = trunc i32 %v0_9800 to i8
  %v2_9800 = load i32, i32* @r7, align 4
  %v3_9800 = add i32 %v2_9800, 1
  %v4_9800 = inttoptr i32 %v3_9800 to i8*
  store i8 %v1_9800, i8* %v4_9800, align 1
  %v0_9804 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9804, label %dec_label_pc_9808, label %dec_label_pc_9630

dec_label_pc_9808:                                ; preds = %dec_label_pc_97ec, %dec_label_pc_9624
  %v0_9808 = call i32 @function_e958()
  %v1_9808 = trunc i32 %v0_9808 to i8
  store i32 %v0_9808, i32* %r0.global-to-local, align 4
  store i32 %v1_92f4, i32* %r2.global-to-local, align 4
  %v4_9810 = sdiv i32 %v0_9808, 256
  store i32 %v4_9810, i32* %r3.global-to-local, align 4
  store i1 %v2_9634, i1* %cpsr_z.global-to-local, align 1
  %v1_9818 = trunc i32 %v4_9810 to i8
  %v2_9818 = load i32, i32* @r7, align 4
  %v3_9818 = add i32 %v2_9818, 3
  %v4_9818 = inttoptr i32 %v3_9818 to i8*
  store i8 %v1_9818, i8* %v4_9818, align 1
  %v0_981c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_981c, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_9808
  %v1_981c = load i32, i32* @r5, align 4
  %v2_981c = add i32 %v1_981c, 16
  %v3_981c = inttoptr i32 %v2_981c to i32*
  %v4_981c = load i32, i32* %v3_981c, align 4
  store i32 %v4_981c, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_9808, %bb100
  %v3_9820 = load i32, i32* @r7, align 4
  %v4_9820 = add i32 %v3_9820, 2
  %v5_9820 = inttoptr i32 %v4_9820 to i8*
  store i8 %v1_9808, i8* %v5_9820, align 1
  %v0_9824 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9824, label %dec_label_pc_982c, label %bb102

bb102:                                            ; preds = %bb101
  %v1_9824 = load i32, i32* %r3.global-to-local, align 4
  %v2_9824 = load i32, i32* @r6, align 4
  %v3_9824 = add i32 %v2_9824, 16
  %v4_9824 = inttoptr i32 %v3_9824 to i32*
  store i32 %v1_9824, i32* %v4_9824, align 4
  br label %dec_label_pc_9644

dec_label_pc_982c:                                ; preds = %dec_label_pc_9630, %bb101
  %v0_982c = call i32 @function_e958()
  store i32 %v0_982c, i32* %r0.global-to-local, align 4
  store i32 %v1_9260, i32* %r3.global-to-local, align 4
  store i1 %v2_9834, i1* %cpsr_z.global-to-local, align 1
  %v1_9838 = load i32, i32* @r6, align 4
  %v2_9838 = add i32 %v1_9838, 16
  %v3_9838 = inttoptr i32 %v2_9838 to i32*
  store i32 %v0_982c, i32* %v3_9838, align 4
  br i1 %v2_9834, label %dec_label_pc_9650, label %dec_label_pc_9840

dec_label_pc_9840:                                ; preds = %dec_label_pc_9644, %dec_label_pc_982c
  %v0_9840 = load i32, i32* @r7, align 4
  %v1_9840 = add i32 %v0_9840, 8
  store i32 %v1_9840, i32* %r0.global-to-local, align 4
  store i32 %v6_9240, i32* @r1, align 4
  %v1_9848 = inttoptr i32 %v1_9840 to i8*
  %v2_9848 = call i32 @function_ead8(i8* %v1_9848)
  store i32 %v2_9848, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9650

dec_label_pc_9850:                                ; preds = %dec_label_pc_92e0
  %v1_9858 = add i32 %v6_9240, 8
  store i32 %v1_9858, i32* %r2.global-to-local, align 4
  %v1_985c = add i32 %v6_9240, 52
  store i32 %v1_985c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_95bc.preheader

; uselistorder directives
  uselistorder i32 %v1_985c, { 1, 0 }
  uselistorder i32 %v1_9858, { 1, 0 }
  uselistorder i32 %v4_9810, { 1, 0 }
  uselistorder i32 %v0_9808, { 0, 2, 1 }
  uselistorder i32 %v0_97ec, { 0, 2, 1 }
  uselistorder i32 %v2_978c, { 1, 0 }
  uselistorder i32 %v8_976c, { 1, 2, 0 }
  uselistorder i32 %v0_9748, { 1, 0, 2, 3 }
  uselistorder i32 %v1_9714, { 1, 2, 0 }
  uselistorder i32 %v1_9710, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_96b4, { 1, 0, 2 }
  uselistorder i32 %v4_96b0, { 0, 2, 1 }
  uselistorder i32 %v0_9690, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_9680, { 0, 2, 1 }
  uselistorder i32 %v4_9664, { 1, 0 }
  uselistorder i32 %v7_95e8, { 1, 0, 2 }
  uselistorder i32 %v0_95bc, { 1, 0 }
  uselistorder i1 %v7_9600, { 2, 1, 0 }
  uselistorder i1 %v2_9834, { 2, 3, 1, 0 }
  uselistorder i32 %v1_957c, { 1, 0, 2 }
  uselistorder i32 %v0_9540, { 1, 0, 2 }
  uselistorder i32 %v3_93f4, { 0, 2, 1 }
  uselistorder i32 %v3_93b4, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0 }
  uselistorder i32 %v1_936c, { 1, 0 }
  uselistorder i32 %v1_9348, { 1, 0 }
  uselistorder i32 %v1_9344, { 0, 2, 1 }
  uselistorder i32 %v3_9328, { 2, 1, 0 }
  uselistorder i32 %v0_9304, { 1, 0, 2 }
  uselistorder i32 %v1_92f4, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_92f0, { 0, 2, 1 }
  uselistorder i32 %v0_92ec, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_92d8, { 1, 0 }
  uselistorder i1 %v7_92ac, { 1, 0 }
  uselistorder i32 %v3_92a8, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_9294, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_9260, { 1, 0, 2, 3 }
  uselistorder i32 %v6_9240, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_91c8, { 2, 1, 0, 3 }
  uselistorder i32 %v2_9174, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_9158, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 23, 19, 20, 21, 22, 26, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_9840, { 1, 0 }
  uselistorder label %dec_label_pc_982c, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_972c, { 1, 0 }
  uselistorder label %dec_label_pc_9650, { 2, 1, 0 }
  uselistorder label %dec_label_pc_95bc.preheader, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %.thread23, { 2, 1, 0 }
}

define i32 @function_9870(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9870:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_9870 = load i32, i32* @fp, align 4
  %v1_9874 = urem i32 %arg1, 256
  store i32 %v1_9874, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_988c = urem i32 %arg3, 256
  store i32 %v1_988c, i32* @r4, align 4
  %v2_9890 = call i32 @function_12178(i32 %v1_9874, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_9890, i32* @sl, align 4
  %v0_989c = load i32, i32* @r7, align 4
  %v2_98a0 = call i32 @function_12178(i32 %v0_989c, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_98ac = load i32, i32* @r6, align 4
  store i32 %v0_98ac, i32* %r1.global-to-local, align 4
  store i32 %v2_98a0, i32* @sb, align 4
  %v0_98bc = load i32, i32* @r4, align 4
  %v5_98c0 = inttoptr i32 %v0_98ac to i32*
  %v6_98c0 = call i32 @function_85e0(i32 %v0_98bc, i32* %v5_98c0, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_98c8 = urem i32 %v6_98c0, 65536
  %v0_98cc = load i32, i32* @r6, align 4
  store i32 %v0_98cc, i32* %r1.global-to-local, align 4
  %v0_98d4 = load i32, i32* @r5, align 4
  %v0_98d8 = load i32, i32* @r4, align 4
  %v5_98e0 = inttoptr i32 %v0_98cc to i32*
  %v6_98e0 = call i32 @function_85e0(i32 %v0_98d8, i32* %v5_98e0, i32 6, i32 %v0_98d4, i32 %v3_98c8)
  %v0_98e4 = load i32, i32* @r6, align 4
  store i32 %v0_98e4, i32* %r1.global-to-local, align 4
  %v3_98e8 = mul i32 %v6_98e0, 65536
  store i32 %v3_98e8, i32* %fp.global-to-local, align 4
  %v0_98f4 = load i32, i32* @r4, align 4
  %v5_98f8 = inttoptr i32 %v0_98e4 to i32*
  %v6_98f8 = call i32 @function_85e0(i32 %v0_98f4, i32* %v5_98f8, i32 0, i32 1024, i32 ptrtoint (i32* @0 to i32))
  %v0_9904 = load i32, i32* @r6, align 4
  store i32 %v0_9904, i32* %r1.global-to-local, align 4
  %v0_9908 = load i32, i32* @r4, align 4
  %v3_9910 = urem i32 %v6_98f8, 65536
  store i32 %v3_9910, i32* @r6, align 4
  %v5_9914 = inttoptr i32 %v0_9904 to i32*
  %v6_9914 = call i32 @function_85e0(i32 %v0_9908, i32* %v5_9914, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_9918 = load i32, i32* %fp.global-to-local, align 4
  %v3_9918 = udiv i32 %v0_9918, 65536
  %v1_9920 = load i32, i32* @r5, align 4
  %v9_9920 = icmp eq i32 %v3_9918, %v1_9920
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_9920, label %dec_label_pc_9948, label %bb

bb:                                               ; preds = %dec_label_pc_9870
  %v2_9934 = mul nuw nsw i32 %v3_9918, 256
  %v4_9938 = and i32 %v2_9934, 65280
  %v1_993c = urem i32 %v6_9914, 256
  store i32 %v1_993c, i32* @r8, align 4
  %v5_9940 = udiv i32 %v0_9918, 16777216
  %v6_9940 = or i32 %v4_9938, %v5_9940
  br label %dec_label_pc_9954

dec_label_pc_9948:                                ; preds = %dec_label_pc_9870
  %v1_993c7 = urem i32 %v6_9914, 256
  store i32 %v1_993c7, i32* @r8, align 4
  %v0_9948 = call i32 @function_e958()
  %v3_9950 = urem i32 %v0_9948, 65536
  br label %dec_label_pc_9954

dec_label_pc_9954:                                ; preds = %bb, %dec_label_pc_9948
  %storemerge17 = phi i32 [ %v6_9940, %bb ], [ %v3_9950, %dec_label_pc_9948 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_9954 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_9954, 1
  br i1 %tmp41, label %dec_label_pc_9afc.preheader, label %dec_label_pc_995c

dec_label_pc_9afc.preheader:                      ; preds = %dec_label_pc_9a58, %dec_label_pc_9954
  %storemerge3.in12.ph = phi i32 [ %v0_9954, %dec_label_pc_9954 ], [ %v1_99b0, %dec_label_pc_9a58 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_9ac4, label %dec_label_pc_9ac8.lr.ph

dec_label_pc_995c:                                ; preds = %dec_label_pc_9954
  store i32 %v3_98c8, i32* %r1.global-to-local, align 4
  %v3_9960 = udiv i32 %v6_98c0, 256
  %v5_996c = trunc i32 %v3_9960 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_9984 = udiv i32 %v6_98c0, 65536
  store i32 %v3_9984, i32* @r4, align 4
  %v4_9994 = trunc i32 %v3_9984 to i8
  store i8 %v4_9994, i8* %stack_var_-80, align 1
  %v3_9aa4 = icmp eq i32 %v3_98c8, 65535
  %v2_99cc = ptrtoint i32* %stack_var_-52 to i32
  %v3_99fc = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_9a88

dec_label_pc_999c:                                ; preds = %dec_label_pc_9a88
  %v2_999c = load i8, i8* %stack_var_-80, align 1
  %v3_999c = sext i8 %v2_999c to i32
  store i32 %v3_999c, i32* %r1.global-to-local, align 4
  store i32 %v3_9960, i32* @r4, align 4
  %v2_99a0 = load i32, i32* @r5, align 4
  %v3_99a0 = add i32 %v2_99a0, 2
  %v4_99a0 = inttoptr i32 %v3_99a0 to i8*
  store i8 %v5_996c, i8* %v4_99a0, align 1
  %v0_99a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_99a4 = trunc i32 %v0_99a4 to i8
  %v2_99a4 = load i32, i32* @r5, align 4
  %v3_99a4 = add i32 %v2_99a4, 3
  %v4_99a4 = inttoptr i32 %v3_99a4 to i8*
  store i8 %v1_99a4, i8* %v4_99a4, align 1
  br label %dec_label_pc_99a8

dec_label_pc_99a8:                                ; preds = %dec_label_pc_9ab0, %dec_label_pc_999c
  %v1_99b0 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_99c0 = call i32 @function_11e8c(i32 2, i32 2, i32 0)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_99c8 = icmp eq i32 %v3_99c0, -1
  store i32 %v2_99cc, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_99dc = load i32, i32* @sb, align 4
  %v3_99dc = add i32 %v2_99dc, %stack_var_-60.0
  %v4_99dc = inttoptr i32 %v3_99dc to i32*
  store i32 %v3_99c0, i32* %v4_99dc, align 4
  br i1 %v7_99c8, label %dec_label_pc_9b08, label %dec_label_pc_99e4

dec_label_pc_99e4:                                ; preds = %dec_label_pc_99a8
  store i32 2, i32* %stack_var_-52, align 4
  %v4_99fc = call i32 @function_11cbc(i32 %v3_99c0, %sockaddr* %v3_99fc, i32 16)
  %v0_9a00 = load i32, i32* @r5, align 4
  %v1_9a00 = add i32 %v0_9a00, 20
  %v2_9a00 = inttoptr i32 %v1_9a00 to i8*
  %v3_9a00 = load i8, i8* %v2_9a00, align 1
  %tmp = icmp ugt i8 %v3_9a00, 31
  br i1 %tmp, label %dec_label_pc_9a58, label %dec_label_pc_9a0c

dec_label_pc_9a0c:                                ; preds = %dec_label_pc_99e4
  %v1_9a0c = add i32 %v0_9a00, 16
  %v2_9a0c = inttoptr i32 %v1_9a0c to i32*
  %v3_9a0c = load i32, i32* %v2_9a0c, align 4
  store i32 %v3_9a0c, i32* @r4, align 4
  %v0_9a10 = call i32 @function_e958()
  %v0_9a14 = load i32, i32* @r4, align 4
  %v1_9a18 = and i32 %v0_9a14, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v1_9a14 = udiv i32 %v0_9a14, 256
  %v3_9a1c = and i32 %v1_9a14, 65280
  %v3_9a20 = mul i32 %v0_9a14, 16777216
  %v4_9a24 = mul i32 %v1_9a18, 256
  %v5_9a24 = or i32 %v4_9a24, %v3_9a20
  store i32 %v5_9a24, i32* %r1.global-to-local, align 4
  %v4_9a28 = udiv i32 %v0_9a14, 16777216
  %v5_9a28 = or i32 %v3_9a1c, %v4_9a28
  %v0_9a2c = load i32, i32* @r5, align 4
  %v1_9a2c = add i32 %v0_9a2c, 20
  %v2_9a2c = inttoptr i32 %v1_9a2c to i8*
  %v3_9a2c = load i8, i8* %v2_9a2c, align 1
  %v4_9a2c = zext i8 %v3_9a2c to i32
  %v2_9a30 = or i32 %v5_9a24, %v5_9a28
  %v7_9a34 = lshr i32 %v0_9a10, %v4_9a2c
  %v8_9a34 = add i32 %v7_9a34, %v2_9a30
  %v3_9a40 = mul i32 %v8_9a34, 16777216
  %v1_9a44 = and i32 %v8_9a34, 65280
  %v4_9a48 = mul nuw nsw i32 %v1_9a44, 256
  %v5_9a48 = or i32 %v4_9a48, %v3_9a40
  store i32 %v5_9a48, i32* %r1.global-to-local, align 4
  %v2_9a50 = call i32 @llvm.bswap.i32(i32 %v8_9a34)
  %v2_9a54 = add i32 %v0_9a2c, 4
  %v3_9a54 = inttoptr i32 %v2_9a54 to i32*
  store i32 %v2_9a50, i32* %v3_9a54, align 4
  %v0_9a64.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9a58

dec_label_pc_9a58:                                ; preds = %dec_label_pc_99e4, %dec_label_pc_9a0c
  %v0_9a64 = phi i32 [ %v0_9a00, %dec_label_pc_99e4 ], [ %v0_9a64.pre, %dec_label_pc_9a0c ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_9a60 = load i32, i32* @sb, align 4
  %v2_9a60 = add i32 %v1_9a60, %stack_var_-60.0
  %v3_9a60 = inttoptr i32 %v2_9a60 to i32*
  %v4_9a60 = load i32, i32* %v3_9a60, align 4
  store i32 %v0_9a64, i32* %r1.global-to-local, align 4
  %v3_9a68 = inttoptr i32 %v0_9a64 to %sockaddr*
  %v4_9a68 = call i32 @function_11ce8(i32 %v4_9a60, %sockaddr* %v3_9a68, i32 16)
  %v1_9a74 = add i32 %stack_var_-60.0, 4
  %v1_9a78 = load i32, i32* @r7, align 4
  %v9_9a78 = icmp eq i32 %v1_99b0, %v1_9a78
  %v0_9a80 = load i32, i32* @r5, align 4
  %v1_9a80 = add i32 %v0_9a80, 24
  store i32 %v1_9a80, i32* @r5, align 4
  br i1 %v9_9a78, label %dec_label_pc_9afc.preheader, label %dec_label_pc_9a88

dec_label_pc_9a88:                                ; preds = %dec_label_pc_9a58, %dec_label_pc_995c
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_995c ], [ %v1_9a74, %dec_label_pc_9a58 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_995c ], [ %v1_99b0, %dec_label_pc_9a58 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_9a94 = call i32 @function_12178(i32 65535, i32 1)
  store i32 %v3_98c8, i32* %r1.global-to-local, align 4
  %v2_9aa8 = load i32, i32* @sl, align 4
  %v3_9aa8 = add i32 %v2_9aa8, %stack_var_-60.0
  %v4_9aa8 = inttoptr i32 %v3_9aa8 to i32*
  store i32 %v2_9a94, i32* %v4_9aa8, align 4
  br i1 %v3_9aa4, label %dec_label_pc_9ab0, label %dec_label_pc_999c

dec_label_pc_9ab0:                                ; preds = %dec_label_pc_9a88
  %v0_9ab0 = call i32 @function_e958()
  %v1_9ab0 = trunc i32 %v0_9ab0 to i8
  %v4_9ab4 = sdiv i32 %v0_9ab0, 256
  %v1_9ab8 = trunc i32 %v4_9ab4 to i8
  %v2_9ab8 = load i32, i32* @r5, align 4
  %v3_9ab8 = add i32 %v2_9ab8, 3
  %v4_9ab8 = inttoptr i32 %v3_9ab8 to i8*
  store i8 %v1_9ab8, i8* %v4_9ab8, align 1
  %v3_9abc = load i32, i32* @r5, align 4
  %v4_9abc = add i32 %v3_9abc, 2
  %v5_9abc = inttoptr i32 %v4_9abc to i8*
  store i8 %v1_9ab0, i8* %v5_9abc, align 1
  br label %dec_label_pc_99a8

dec_label_pc_9ac4:                                ; preds = %dec_label_pc_9afc.loopexit, %dec_label_pc_9afc.preheader, %dec_label_pc_9b00.loopexit, %dec_label_pc_9ac4
  br label %dec_label_pc_9ac4

dec_label_pc_9ac8:                                ; preds = %dec_label_pc_9ac8.lr.ph, %dec_label_pc_9b00.loopexit
  %v0_9ac8 = load i32, i32* @r8, align 4
  %v2_9ac8 = icmp eq i32 %v0_9ac8, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_9ac8, label %dec_label_pc_9ad0, label %dec_label_pc_9b10

dec_label_pc_9ad0:                                ; preds = %dec_label_pc_9ac8
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_9ad8

dec_label_pc_9ad8:                                ; preds = %dec_label_pc_9ad8, %dec_label_pc_9ad0
  %v0_9ae0 = phi i32 [ %v1_9ae0, %dec_label_pc_9ad8 ], [ 0, %dec_label_pc_9ad0 ]
  %v0_9ad8 = phi i32 [ %v1_9af4, %dec_label_pc_9ad8 ], [ 0, %dec_label_pc_9ad0 ]
  %v1_9ad8 = load i32, i32* @sb, align 4
  %v2_9ad8 = add i32 %v1_9ad8, %v0_9ad8
  %v3_9ad8 = inttoptr i32 %v2_9ad8 to i32*
  %v4_9ad8 = load i32, i32* %v3_9ad8, align 4
  %v1_9adc = load i32, i32* @sl, align 4
  %v2_9adc = add i32 %v1_9adc, %v0_9ad8
  %v3_9adc = inttoptr i32 %v2_9adc to i32*
  %v4_9adc = load i32, i32* %v3_9adc, align 4
  store i32 %v4_9adc, i32* %r1.global-to-local, align 4
  %v1_9ae0 = add i32 %v0_9ae0, 1
  %v0_9ae4 = load i32, i32* @r6, align 4
  %v4_9aec = inttoptr i32 %v4_9adc to i32*
  %v5_9aec = call i32 @function_11dfc(i32 %v4_9ad8, i32* %v4_9aec, i32 %v0_9ae4, i32 16384)
  %v1_9af0 = load i32, i32* @r7, align 4
  %v9_9af0 = icmp eq i32 %v1_9ae0, %v1_9af0
  %v0_9af4 = load i32, i32* @r4, align 4
  %v1_9af4 = add i32 %v0_9af4, 4
  store i32 %v1_9af4, i32* @r4, align 4
  br i1 %v9_9af0, label %dec_label_pc_9afc.loopexit, label %dec_label_pc_9ad8

dec_label_pc_9afc.loopexit:                       ; preds = %dec_label_pc_9ad8
  %tmp4247 = icmp slt i32 %v1_9ae0, 1
  br i1 %tmp4247, label %dec_label_pc_9ac4, label %dec_label_pc_9ac8.lr.ph

dec_label_pc_9ac8.lr.ph:                          ; preds = %dec_label_pc_9afc.preheader, %dec_label_pc_9afc.loopexit
  br label %dec_label_pc_9ac8

dec_label_pc_9b00.loopexit:                       ; preds = %dec_label_pc_9b18
  %tmp42 = icmp slt i32 %v0_9b40, 1
  br i1 %tmp42, label %dec_label_pc_9ac4, label %dec_label_pc_9ac8

dec_label_pc_9b08:                                ; preds = %dec_label_pc_99a8
  store i32 %v24_9870, i32* %fp.global-to-local, align 4
  ret i32 %v3_99c0

dec_label_pc_9b10:                                ; preds = %dec_label_pc_9ac8
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_9b18

dec_label_pc_9b18:                                ; preds = %dec_label_pc_9b18, %dec_label_pc_9b10
  %v0_9b18 = phi i32 [ %v1_9b44, %dec_label_pc_9b18 ], [ 0, %dec_label_pc_9b10 ]
  %v1_9b18 = load i32, i32* @sl, align 4
  %v2_9b18 = add i32 %v1_9b18, %v0_9b18
  %v3_9b18 = inttoptr i32 %v2_9b18 to i32*
  %v4_9b18 = load i32, i32* %v3_9b18, align 4
  store i32 %v4_9b18, i32* @r4, align 4
  %v0_9b1c = load i32, i32* @r6, align 4
  store i32 %v0_9b1c, i32* @r1, align 4
  %v1_9b24 = inttoptr i32 %v4_9b18 to i8*
  %v2_9b24 = call i32 @function_ead8(i8* %v1_9b24)
  %v0_9b28 = load i32, i32* @r5, align 4
  %v1_9b28 = add i32 %v0_9b28, 1
  store i32 %v1_9b28, i32* @r5, align 4
  %v0_9b2c = load i32, i32* @fp, align 4
  %v1_9b2c = load i32, i32* @sb, align 4
  %v2_9b2c = add i32 %v1_9b2c, %v0_9b2c
  %v3_9b2c = inttoptr i32 %v2_9b2c to i32*
  %v4_9b2c = load i32, i32* %v3_9b2c, align 4
  %v0_9b30 = load i32, i32* @r4, align 4
  store i32 %v0_9b30, i32* %r1.global-to-local, align 4
  %v0_9b34 = load i32, i32* @r6, align 4
  %v4_9b3c = inttoptr i32 %v0_9b30 to i32*
  %v5_9b3c = call i32 @function_11dfc(i32 %v4_9b2c, i32* %v4_9b3c, i32 %v0_9b34, i32 16384)
  %v0_9b40 = load i32, i32* @r5, align 4
  %v1_9b40 = load i32, i32* @r7, align 4
  %v9_9b40 = icmp eq i32 %v0_9b40, %v1_9b40
  %v0_9b44 = load i32, i32* @fp, align 4
  %v1_9b44 = add i32 %v0_9b44, 4
  store i32 %v1_9b44, i32* @fp, align 4
  br i1 %v9_9b40, label %dec_label_pc_9b00.loopexit, label %dec_label_pc_9b18

; uselistorder directives
  uselistorder i32 %v1_9b44, { 1, 0 }
  uselistorder i32 %v0_9b40, { 1, 0 }
  uselistorder i32 %v1_9af4, { 1, 0 }
  uselistorder i32 %v1_9ae0, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_9a64, { 1, 0 }
  uselistorder i32 %v8_9a34, { 1, 2, 0 }
  uselistorder i32 %v0_9a14, { 1, 0, 2, 3 }
  uselistorder i32 %v3_99c0, { 1, 3, 2, 0 }
  uselistorder i32 %v1_99b0, { 1, 2, 0 }
  uselistorder i32 %v3_9984, { 1, 0 }
  uselistorder i32 %v3_9960, { 1, 0 }
  uselistorder i32 %v3_98c8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_9874, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 4, 1, 13, 14, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 18, 17, 19, 3, 2, 0 }
  uselistorder label %dec_label_pc_9ac8.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_9ac8, { 1, 0 }
  uselistorder label %dec_label_pc_9ac4, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_9a58, { 1, 0 }
  uselistorder label %dec_label_pc_9954, { 1, 0 }
}

define i32 @function_9b54(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9b54:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_9b58 = urem i32 %arg1, 256
  store i32 %v1_9b58, i32* @fp, align 4
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9b70 = urem i32 %arg3, 256
  store i32 %v1_9b70, i32* @r4, align 4
  %v2_9b74 = call i32 @function_12178(i32 %v1_9b58, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_9b80 = load i32, i32* @fp, align 4
  store i32 %v0_9b80, i32* %r0.global-to-local, align 4
  %v2_9b84 = call i32 @function_12178(i32 %v0_9b80, i32 4)
  %v0_9b88 = load i32, i32* @r5, align 4
  store i32 %v0_9b88, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9b98 = load i32, i32* @r4, align 4
  store i32 %v0_9b98, i32* %r0.global-to-local, align 4
  %v5_9b9c = inttoptr i32 %v0_9b88 to i32*
  %v6_9b9c = call i32 @function_85e0(i32 %v0_9b98, i32* %v5_9b9c, i32 2, i32 0, i32 %v2_9b84)
  %v1_9ba8 = urem i32 %v6_9b9c, 256
  store i32 %v1_9ba8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9bb4 = load i32, i32* @r5, align 4
  store i32 %v0_9bb4, i32* %r1.global-to-local, align 4
  %v0_9bb8 = load i32, i32* @r4, align 4
  store i32 %v0_9bb8, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_9b9c, 16777216
  %v5_9bc0 = sdiv i32 %sext, 16777216
  %v6_9bc0 = inttoptr i32 %v0_9bb4 to i32*
  %v7_9bc0 = call i32 @function_85e0(i32 %v0_9bb8, i32* %v6_9bc0, i32 3, i32 65535, i32 %v5_9bc0)
  %v0_9bc4 = load i32, i32* @r5, align 4
  store i32 %v0_9bc4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9bc0, i32* @r6, align 4
  %v0_9bd4 = load i32, i32* @r4, align 4
  store i32 %v0_9bd4, i32* %r0.global-to-local, align 4
  %v5_9bd8 = inttoptr i32 %v0_9bc4 to i32*
  %v6_9bd8 = call i32 @function_85e0(i32 %v0_9bd4, i32* %v5_9bd8, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9be0 = urem i32 %v6_9bd8, 256
  store i32 %v1_9be0, i32* %ip.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r5, align 4
  store i32 %v0_9be4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9bf0 = load i32, i32* @r4, align 4
  store i32 %v0_9bf0, i32* %r0.global-to-local, align 4
  %sext6 = mul i32 %v6_9bd8, 16777216
  %v5_9bf8 = sdiv i32 %sext6, 16777216
  %v6_9bf8 = inttoptr i32 %v0_9be4 to i32*
  %v7_9bf8 = call i32 @function_85e0(i32 %v0_9bf0, i32* %v6_9bf8, i32 5, i32 1, i32 %v5_9bf8)
  %v1_9c04 = urem i32 %v7_9bf8, 256
  store i32 %v1_9c04, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9c0c = load i32, i32* @r5, align 4
  store i32 %v0_9c0c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9c14 = load i32, i32* @r4, align 4
  store i32 %v0_9c14, i32* %r0.global-to-local, align 4
  %v5_9c1c = inttoptr i32 %v0_9c0c to i32*
  %v6_9c1c = call i32 @function_85e0(i32 %v0_9c14, i32* %v5_9c1c, i32 7, i32 65535, i32 %v1_9c04)
  %v0_9c20 = load i32, i32* @r5, align 4
  store i32 %v0_9c20, i32* %r1.global-to-local, align 4
  %v3_9c24 = mul i32 %v6_9c1c, 65536
  store i32 %v3_9c24, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c30 = load i32, i32* @r4, align 4
  store i32 %v0_9c30, i32* %r0.global-to-local, align 4
  %v5_9c34 = inttoptr i32 %v0_9c20 to i32*
  %v6_9c34 = call i32 @function_85e0(i32 %v0_9c30, i32* %v5_9c34, i32 11, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9c3c = urem i32 %v6_9c34, 256
  store i32 %v1_9c3c, i32* %ip.global-to-local, align 4
  %v0_9c40 = load i32, i32* @r5, align 4
  store i32 %v0_9c40, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c4c = load i32, i32* @r4, align 4
  store i32 %v0_9c4c, i32* %r0.global-to-local, align 4
  %v5_9c54 = inttoptr i32 %v0_9c40 to i32*
  %v6_9c54 = call i32 @function_85e0(i32 %v0_9c4c, i32* %v5_9c54, i32 12, i32 1, i32 %v1_9c3c)
  %v1_9c5c = urem i32 %v6_9c54, 256
  store i32 %v1_9c5c, i32* %ip.global-to-local, align 4
  %v0_9c60 = load i32, i32* @r5, align 4
  store i32 %v0_9c60, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c6c = load i32, i32* @r4, align 4
  store i32 %v0_9c6c, i32* %r0.global-to-local, align 4
  %v5_9c74 = inttoptr i32 %v0_9c60 to i32*
  %v6_9c74 = call i32 @function_85e0(i32 %v0_9c6c, i32* %v5_9c74, i32 13, i32 1, i32 %v1_9c5c)
  %v1_9c7c = urem i32 %v6_9c74, 256
  store i32 %v1_9c7c, i32* %ip.global-to-local, align 4
  %v0_9c80 = load i32, i32* @r5, align 4
  store i32 %v0_9c80, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c8c = load i32, i32* @r4, align 4
  store i32 %v0_9c8c, i32* %r0.global-to-local, align 4
  %v5_9c94 = inttoptr i32 %v0_9c80 to i32*
  %v6_9c94 = call i32 @function_85e0(i32 %v0_9c8c, i32* %v5_9c94, i32 14, i32 1, i32 %v1_9c7c)
  %v1_9c9c = urem i32 %v6_9c94, 256
  store i32 %v1_9c9c, i32* %ip.global-to-local, align 4
  %v0_9ca0 = load i32, i32* @r5, align 4
  store i32 %v0_9ca0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9cac = load i32, i32* @r4, align 4
  store i32 %v0_9cac, i32* %r0.global-to-local, align 4
  %v5_9cb4 = inttoptr i32 %v0_9ca0 to i32*
  %v6_9cb4 = call i32 @function_85e0(i32 %v0_9cac, i32* %v5_9cb4, i32 15, i32 1, i32 %v1_9c9c)
  %v1_9cbc = urem i32 %v6_9cb4, 256
  store i32 %v1_9cbc, i32* %ip.global-to-local, align 4
  %v0_9cc0 = load i32, i32* @r5, align 4
  store i32 %v0_9cc0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9ccc = load i32, i32* @r4, align 4
  store i32 %v0_9ccc, i32* %r0.global-to-local, align 4
  %v5_9cd4 = inttoptr i32 %v0_9cc0 to i32*
  %v6_9cd4 = call i32 @function_85e0(i32 %v0_9ccc, i32* %v5_9cd4, i32 16, i32 1, i32 %v1_9cbc)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_9cd4, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9ce4 = load i32, i32* @r5, align 4
  store i32 %v0_9ce4, i32* %r1.global-to-local, align 4
  %v0_9ce8 = load i32, i32* @r4, align 4
  store i32 %v0_9ce8, i32* %r0.global-to-local, align 4
  %v1_9cec = urem i32 %v6_9cd4, 256
  store i32 %v1_9cec, i32* @r8, align 4
  %v5_9cf0 = inttoptr i32 %v0_9ce4 to i32*
  %v6_9cf0 = call i32 @function_85e0(i32 %v0_9ce8, i32* %v5_9cf0, i32 0, i32 768, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9cfc = load i32, i32* @r5, align 4
  store i32 %v0_9cfc, i32* %r1.global-to-local, align 4
  store i32 %v6_9cf0, i32* @sb, align 4
  %v0_9d04 = load i32, i32* @r4, align 4
  store i32 %v0_9d04, i32* %r0.global-to-local, align 4
  %v5_9d08 = inttoptr i32 %v0_9cfc to i32*
  %v6_9d08 = call i32 @function_85e0(i32 %v0_9d04, i32* %v5_9d08, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_9d14 = urem i32 %v6_9d08, 256
  store i32 %v1_9d14, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9d24 = call i32 @function_11e8c(i32 2, i32 3, i32 6)
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v0_9d28 = load i32, i32* @r7, align 4
  %v3_9d28 = udiv i32 %v0_9d28, 65536
  store i32 %v3_9d28, i32* %r1.global-to-local, align 4
  %v7_9d2c = icmp eq i32 %v3_9d24, -1
  store i1 %v7_9d2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9d2c, label %dec_label_pc_9f88, label %dec_label_pc_9d3c

dec_label_pc_9d3c:                                ; preds = %dec_label_pc_9b54
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9d44 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9d44, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_9d58 = call i32 @function_11e5c(i32 %v3_9d24, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_9d58, i32* %r0.global-to-local, align 4
  %v7_9d5c = icmp eq i32 %v6_9d58, -1
  store i1 %v7_9d5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9d5c, label %dec_label_pc_9f80, label %dec_label_pc_9d64

dec_label_pc_9d64:                                ; preds = %dec_label_pc_9d3c
  %v0_9d64 = load i32, i32* @fp, align 4
  %v2_9d64 = icmp eq i32 %v0_9d64, 0
  store i1 %v2_9d64, i1* %cpsr_z.global-to-local, align 1
  %v0_9d68 = load i32, i32* @r6, align 4
  %v3_9d68 = mul i32 %v0_9d68, 65536
  store i32 %v3_9d68, i32* %r0.global-to-local, align 4
  %v3_9d6c = urem i32 %v0_9d68, 65536
  store i32 %v3_9d6c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_9d64, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_9d90.preheader

.thread18:                                        ; preds = %dec_label_pc_9d64
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_a214

dec_label_pc_9d90.preheader:                      ; preds = %dec_label_pc_9d64
  %v5_9d74 = load i32, i32* @r7, align 4
  %v8_9d74 = udiv i32 %v5_9d74, 16777216
  %tmp73 = udiv i32 %v0_9d68, 256
  %v8_9d78 = urem i32 %tmp73, 256
  store i32 %v8_9d78, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_9e7c = icmp ugt i32 %v0_9d28, -65537
  %v2_9ea0 = ptrtoint i32* %stack_var_-60 to i32
  %v3_9eac = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_9edc = ptrtoint i32* %stack_var_-76 to i32
  %v2_9ee0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_9ee4 = ptrtoint i32* %stack_var_-332 to i32
  %v4_9f30 = zext i8 %tmp31 to i32
  %v4_9f34 = zext i8 %tmp30 to i32
  %v4_9f40 = mul nuw nsw i32 %v4_9f34, 256
  %v4_9f50 = zext i8 %tmp to i32
  %v1_9f54 = and i32 %v4_9f50, 18
  %v2_9f58 = icmp eq i32 %v1_9f54, 18
  %v1_9e8c = mul nuw nsw i32 %v3_9d28, 256
  %v4_9e90 = and i32 %v1_9e8c, 65280
  %v5_9e90 = or i32 %v8_9d74, %v4_9e90
  %v3_9e9493 = udiv i32 %v4_9e90, 256
  %v1_9e98 = trunc i32 %v3_9e9493 to i8
  %v1_a05c = mul i32 %v0_9d68, 256
  %v4_a064 = and i32 %v1_a05c, 65280
  %v5_9f40 = or i32 %v4_9f30, %v4_9f40
  %v1_9f60 = and i32 %v4_9f50, 5
  %v2_9f60 = icmp eq i32 %v1_9f60, 0
  %v1_9e9c = trunc i32 %v8_9d74 to i8
  %v5_a064 = or i32 %v8_9d78, %v4_a064
  %v1_a084 = trunc i32 %v5_9bc0 to i8
  %v1_a164 = urem i32 %v6_9c34, 2
  %tmp94 = sub nsw i32 0, %v1_a164
  %v4_a16c = and i32 %tmp94, 32
  %v1_a17c = urem i32 %v6_9c54, 2
  %tmp95 = sub nsw i32 0, %v1_a17c
  %v4_a184 = and i32 %tmp95, 16
  %v1_a194 = urem i32 %v6_9c74, 2
  %tmp96 = sub nsw i32 0, %v1_a194
  %v4_a19c = and i32 %tmp96, 8
  %v1_a1ac = urem i32 %v6_9c94, 2
  %tmp97 = sub nsw i32 0, %v1_a1ac
  %v4_a1b4 = and i32 %tmp97, 4
  %v1_a1c4 = urem i32 %v6_9cb4, 2
  %tmp98 = sub nsw i32 0, %v1_a1c4
  %v3_a1cc = and i32 %tmp98, 2
  br label %dec_label_pc_9d90

dec_label_pc_9d90:                                ; preds = %dec_label_pc_a200, %dec_label_pc_9f68, %dec_label_pc_9d90.preheader
  store i32 %v8_9d78, i32* %r3.global-to-local, align 4
  %v0_9d9c = load i32, i32* @sb, align 4
  %v1_9d9c = add i32 %v0_9d9c, 40
  store i32 %v1_9d9c, i32* @sl, align 4
  br label %dec_label_pc_9da0

dec_label_pc_9da0:                                ; preds = %dec_label_pc_9f74, %dec_label_pc_9d90
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9dac = call i32 @function_11e8c(i32 2, i32 1, i32 0)
  store i32 %v3_9dac, i32* %r0.global-to-local, align 4
  %v7_9db0 = icmp eq i32 %v3_9dac, -1
  store i1 %v7_9db0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9dac, i32* @r7, align 4
  br i1 %v7_9db0, label %dec_label_pc_a200, label %dec_label_pc_9dbc

dec_label_pc_9dbc:                                ; preds = %dec_label_pc_9da0
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_9dc4 = call i32 @function_114b0(i32 %v3_9dac, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9dcc = or i32 %v2_9dc4, 2048
  store i32 %v1_9dcc, i32* @r2, align 4
  %v0_9dd0 = load i32, i32* @r7, align 4
  store i32 %v0_9dd0, i32* %r0.global-to-local, align 4
  %v2_9dd4 = call i32 @function_114b0(i32 %v0_9dd0, i32 4)
  store i32 %v2_9dd4, i32* %r0.global-to-local, align 4
  %v3_9dd8 = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9de8 = mul i32 %v3_9dd8, 24
  store i32 %v5_9de8, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_9df8 = add i32 %v5_9de8, %arg2
  store i32 %v2_9df8, i32* %r2.global-to-local, align 4
  %v1_9dfc = add i32 %v2_9df8, 20
  %v2_9dfc = inttoptr i32 %v1_9dfc to i8*
  %v3_9dfc = load i8, i8* %v2_9dfc, align 1
  %v4_9dfc = zext i8 %v3_9dfc to i32
  store i32 %v4_9dfc, i32* %r3.global-to-local, align 4
  %v2_9e00 = icmp ugt i8 %v3_9dfc, 30
  %v7_9e00 = icmp eq i8 %v3_9dfc, 31
  store i1 %v7_9e00, i1* %cpsr_z.global-to-local, align 1
  %v2_9e04 = xor i1 %v7_9e00, true
  %v3_9e04 = and i1 %v2_9e00, %v2_9e04
  %v5_9e04 = add i32 %v2_9df8, 16
  %v6_9e04 = inttoptr i32 %v5_9e04 to i32*
  %v7_9e04 = load i32, i32* %v6_9e04, align 4
  br i1 %v3_9e04, label %dec_label_pc_9e70, label %dec_label_pc_9e10

dec_label_pc_9e10:                                ; preds = %dec_label_pc_9dbc
  store i32 %v7_9e04, i32* @r4, align 4
  %v0_9e14 = call i32 @function_e958()
  store i32 %v0_9e14, i32* %r0.global-to-local, align 4
  %v3_9e18 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_9e24 = mul i32 %v3_9e18, 24
  %v0_9e28 = load i32, i32* @r4, align 4
  %v2_9e2c = add i32 %v5_9e24, %arg2
  store i32 %v2_9e2c, i32* %r1.global-to-local, align 4
  %v1_9e30 = and i32 %v0_9e28, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_9e30, i32* %r3.global-to-local, align 4
  %v1_9e28 = udiv i32 %v0_9e28, 256
  %v3_9e34 = and i32 %v1_9e28, 65280
  store i32 %v3_9e34, i32* %r2.global-to-local, align 4
  %v3_9e38 = mul i32 %v0_9e28, 16777216
  store i32 %v3_9e38, i32* %ip.global-to-local, align 4
  %v1_9e3c = add i32 %v2_9e2c, 20
  %v2_9e3c = inttoptr i32 %v1_9e3c to i8*
  %v3_9e3c = load i8, i8* %v2_9e3c, align 1
  %v4_9e3c = zext i8 %v3_9e3c to i32
  store i32 %v4_9e3c, i32* %lr.global-to-local, align 4
  %v4_9e40 = mul i32 %v1_9e30, 256
  %v5_9e40 = or i32 %v4_9e40, %v3_9e38
  store i32 %v5_9e40, i32* %ip.global-to-local, align 4
  %v4_9e44 = udiv i32 %v0_9e28, 16777216
  %v5_9e44 = or i32 %v3_9e34, %v4_9e44
  %v2_9e48 = or i32 %v5_9e44, %v5_9e40
  %v7_9e4c = lshr i32 %v0_9e14, %v4_9e3c
  %v8_9e4c = add i32 %v7_9e4c, %v2_9e48
  store i32 %v8_9e4c, i32* %r2.global-to-local, align 4
  %v3_9e58 = mul i32 %v8_9e4c, 16777216
  %v1_9e5c = and i32 %v8_9e4c, 65280
  store i32 %v1_9e5c, i32* %r0.global-to-local, align 4
  %v4_9e60 = mul nuw nsw i32 %v1_9e5c, 256
  %v5_9e60 = or i32 %v4_9e60, %v3_9e58
  store i32 %v5_9e60, i32* %r1.global-to-local, align 4
  %v2_9e68 = call i32 @llvm.bswap.i32(i32 %v8_9e4c)
  br label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_9dbc, %dec_label_pc_9e10
  %storemerge25 = phi i32 [ %v2_9e68, %dec_label_pc_9e10 ], [ %v7_9e04, %dec_label_pc_9dbc ]
  store i32 %v3_9d28, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9e7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9e7c, label %dec_label_pc_9f90, label %dec_label_pc_9e84

dec_label_pc_9e84:                                ; preds = %dec_label_pc_9e70
  store i32 %v8_9d74, i32* %ip.global-to-local, align 4
  store i32 %v5_9e90, i32* %r3.global-to-local, align 4
  store i32 %v3_9e9493, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9ea0

dec_label_pc_9ea0:                                ; preds = %dec_label_pc_9f90, %dec_label_pc_9e84
  %stack_var_-57.0 = phi i8 [ %v1_9f98, %dec_label_pc_9f90 ], [ %v1_9e98, %dec_label_pc_9e84 ]
  %storemerge = phi i8 [ %v1_9f90, %dec_label_pc_9f90 ], [ %v1_9e9c, %dec_label_pc_9e84 ]
  store i32 %v2_9ea0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9ea8 = load i32, i32* @r7, align 4
  store i32 %v0_9ea8, i32* %r0.global-to-local, align 4
  %v4_9eac = call i32 @function_11ce8(i32 %v0_9ea8, %sockaddr* nonnull %v3_9eac, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9eb4 = call i32 @function_11844(i32* null)
  store i32 %v2_9eb4, i32* %r0.global-to-local, align 4
  store i32 %v2_9eb4, i32* @r4, align 4
  %v9_9f14 = icmp eq i32 %tmp32, %storemerge25
  %v4_9f38 = zext i8 %storemerge to i32
  %v4_9f3c = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_9f14 to i32
  %v9_9f28 = icmp eq i1 %v9_9f14, false
  %v4_9f44 = mul nuw nsw i32 %v4_9f3c, 256
  %v5_9f44 = or i32 %v4_9f44, %v4_9f38
  %v9_9f48 = icmp eq i32 %v5_9f44, %v5_9f40
  br label %dec_label_pc_9ed0

dec_label_pc_9ec0:                                ; preds = %.thread23, %dec_label_pc_9f30, %dec_label_pc_9f60, %bb75
  %v2_9ec0 = call i32 @function_11844(i32* null)
  %v0_9ec4 = load i32, i32* @r4, align 4
  %v2_9ec4 = sub i32 %v2_9ec0, %v0_9ec4
  store i32 %v2_9ec4, i32* %r0.global-to-local, align 4
  %v7_9ec8 = icmp eq i32 %v2_9ec4, 10
  store i1 %v7_9ec8, i1* %cpsr_z.global-to-local, align 1
  %v8_9ecc = icmp sgt i32 %v2_9ec4, 10
  br i1 %v8_9ecc, label %dec_label_pc_9f74, label %dec_label_pc_9ed0

dec_label_pc_9ed0:                                ; preds = %dec_label_pc_9ec0, %dec_label_pc_9ea0
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_9edc, i32* %lr.global-to-local, align 4
  store i32 %v2_9ee0, i32* %ip.global-to-local, align 4
  store i32 %v2_9ee4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v7_9ef8 = call i32 @function_11dc8(i32 %v3_9d24, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_9edc, i32 %v2_9ee0)
  store i32 %v7_9ef8, i32* %r2.global-to-local, align 4
  %v7_9f00 = icmp eq i32 %v7_9ef8, -1
  store i1 %v7_9f00, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9f00, label %dec_label_pc_9f88, label %dec_label_pc_9f0c

dec_label_pc_9f0c:                                ; preds = %dec_label_pc_9ed0
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_9f20 = icmp eq i32 %v7_9ef8, 40
  store i1 %v7_9f20, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_9ef8, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_9f0c
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9ec0

bb75:                                             ; preds = %dec_label_pc_9f0c
  store i1 %v9_9f28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9f28, label %dec_label_pc_9ec0, label %dec_label_pc_9f30

dec_label_pc_9f30:                                ; preds = %bb75
  store i32 %v4_9f34, i32* %r1.global-to-local, align 4
  store i32 %v4_9f38, i32* %ip.global-to-local, align 4
  store i32 %v4_9f3c, i32* %r2.global-to-local, align 4
  store i32 %v5_9f40, i32* %r3.global-to-local, align 4
  store i32 %v5_9f44, i32* @r5, align 4
  store i1 %v9_9f48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9f48, label %dec_label_pc_9f50, label %dec_label_pc_9ec0

dec_label_pc_9f50:                                ; preds = %dec_label_pc_9f30
  store i32 %v4_9f50, i32* %r2.global-to-local, align 4
  store i32 %v1_9f54, i32* %r3.global-to-local, align 4
  store i1 %v2_9f58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9f58, label %dec_label_pc_9fa4, label %dec_label_pc_9f60

dec_label_pc_9f60:                                ; preds = %dec_label_pc_9f50
  store i1 %v2_9f60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9f60, label %dec_label_pc_9ec0, label %dec_label_pc_9f68

dec_label_pc_9f68:                                ; preds = %dec_label_pc_9f60
  %v0_9f68 = load i32, i32* @r7, align 4
  store i32 %v0_9f68, i32* %r0.global-to-local, align 4
  %v1_9f6c = call i32 @function_11574(i32 %v0_9f68)
  store i32 %v1_9f6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9d90

dec_label_pc_9f74:                                ; preds = %dec_label_pc_9ec0
  %v0_9f74 = load i32, i32* @r7, align 4
  store i32 %v0_9f74, i32* %r0.global-to-local, align 4
  %v1_9f78 = call i32 @function_11574(i32 %v0_9f74)
  store i32 %v1_9f78, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9da0

dec_label_pc_9f80:                                ; preds = %dec_label_pc_9d3c
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v1_9f84 = call i32 @function_11574(i32 %v3_9d24)
  store i32 %v1_9f84, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f88

dec_label_pc_9f88:                                ; preds = %dec_label_pc_9ed0, %dec_label_pc_9b54, %dec_label_pc_9f80
  %v29_9f8c = phi i32 [ %v3_9d24, %dec_label_pc_9b54 ], [ %v1_9f84, %dec_label_pc_9f80 ], [ 0, %dec_label_pc_9ed0 ]
  ret i32 %v29_9f8c

dec_label_pc_9f90:                                ; preds = %dec_label_pc_9e70
  %v0_9f90 = call i32 @function_e958()
  %v1_9f90 = trunc i32 %v0_9f90 to i8
  store i32 %v0_9f90, i32* %r0.global-to-local, align 4
  %v4_9f94 = sdiv i32 %v0_9f90, 256
  store i32 %v4_9f94, i32* %r3.global-to-local, align 4
  %v1_9f98 = trunc i32 %v4_9f94 to i8
  br label %dec_label_pc_9ea0

dec_label_pc_9fa4:                                ; preds = %dec_label_pc_9f50
  %v3_9fa4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9fa4, i32* @r4, align 4
  store i32 %v2_9b74, i32* %r2.global-to-local, align 4
  %v3_9fac = mul i32 %v3_9fa4, 16
  store i32 %v3_9fac, i32* %ip.global-to-local, align 4
  %v3_9fb0 = add i32 %v3_9fac, %v2_9b74
  %v4_9fb0 = inttoptr i32 %v3_9fb0 to i32*
  store i32 %storemerge25, i32* %v4_9fb0, align 4
  %v0_9fb4 = load i32, i32* @r6, align 4
  %v1_9fb4 = add i32 %v0_9fb4, 4
  %v2_9fb4 = inttoptr i32 %v1_9fb4 to i32*
  %v3_9fb4 = load i32, i32* %v2_9fb4, align 4
  store i32 %v3_9fb4, i32* %r0.global-to-local, align 4
  %v1_9fbc = and i32 %v3_9fb4, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_9fbc, i32* %r1.global-to-local, align 4
  store i32 %v2_9b74, i32* %lr.global-to-local, align 4
  %v3_9fc4 = mul i32 %v3_9fb4, 16777216
  %v1_9fb8 = udiv i32 %v3_9fb4, 256
  %v3_9fc8 = and i32 %v1_9fb8, 65280
  %v4_9fcc = mul i32 %v1_9fbc, 256
  %v5_9fcc = or i32 %v4_9fcc, %v3_9fc4
  store i32 %v5_9fcc, i32* %r2.global-to-local, align 4
  %v4_9fd0 = udiv i32 %v3_9fb4, 16777216
  %v5_9fd0 = or i32 %v3_9fc8, %v4_9fd0
  %v1_9fd4 = load i32, i32* %ip.global-to-local, align 4
  %v2_9fd4 = add i32 %v1_9fd4, %v2_9b74
  store i32 %v2_9fd4, i32* %ip.global-to-local, align 4
  %v2_9fd8 = or i32 %v5_9fd0, %v5_9fcc
  store i32 %v2_9fd8, i32* %r3.global-to-local, align 4
  %v2_9fdc = add i32 %v2_9fd4, 4
  %v3_9fdc = inttoptr i32 %v2_9fdc to i32*
  store i32 %v2_9fd8, i32* %v3_9fdc, align 4
  %v0_9fe0 = load i32, i32* @r6, align 4
  %v1_9fe0 = add i32 %v0_9fe0, 8
  %v2_9fe0 = inttoptr i32 %v1_9fe0 to i32*
  %v3_9fe0 = load i32, i32* %v2_9fe0, align 4
  store i32 %v3_9fe0, i32* %r0.global-to-local, align 4
  %v1_9fe8 = and i32 %v3_9fe0, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_9fe8, i32* %r1.global-to-local, align 4
  %v3_9fec = mul i32 %v3_9fe0, 16777216
  %v1_9fe4 = udiv i32 %v3_9fe0, 256
  %v3_9ff0 = and i32 %v1_9fe4, 65280
  %v4_9ff4 = mul i32 %v1_9fe8, 256
  %v5_9ff4 = or i32 %v4_9ff4, %v3_9fec
  store i32 %v5_9ff4, i32* %r2.global-to-local, align 4
  %v4_9ff8 = udiv i32 %v3_9fe0, 16777216
  %v5_9ff8 = or i32 %v3_9ff0, %v4_9ff8
  %v2_9ffc = or i32 %v5_9ff8, %v5_9ff4
  store i32 %v2_9ffc, i32* %r3.global-to-local, align 4
  %v1_a000 = load i32, i32* %ip.global-to-local, align 4
  %v2_a000 = add i32 %v1_a000, 8
  %v3_a000 = inttoptr i32 %v2_a000 to i32*
  store i32 %v2_9ffc, i32* %v3_a000, align 4
  %v0_a004 = load i32, i32* @r6, align 4
  %v1_a004 = inttoptr i32 %v0_a004 to i32*
  %v2_a004 = load i32, i32* %v1_a004, align 4
  %v3_a008 = udiv i32 %v2_a004, 65536
  store i32 %v3_a008, i32* %r2.global-to-local, align 4
  %v3_a00c3 = udiv i32 %v2_a004, 16777216
  store i32 %v3_a00c3, i32* %r1.global-to-local, align 4
  %v0_a010 = load i32, i32* @r5, align 4
  %v3_a010 = sdiv i32 %v0_a010, 256
  store i32 %v3_a010, i32* %r3.global-to-local, align 4
  %v1_a014 = trunc i32 %v3_a010 to i8
  %v2_a014 = load i32, i32* %ip.global-to-local, align 4
  %v3_a014 = add i32 %v2_a014, 15
  %v4_a014 = inttoptr i32 %v3_a014 to i8*
  store i8 %v1_a014, i8* %v4_a014, align 1
  %v0_a018 = load i32, i32* %r1.global-to-local, align 4
  %v1_a018 = trunc i32 %v0_a018 to i8
  %v2_a018 = load i32, i32* %ip.global-to-local, align 4
  %v3_a018 = add i32 %v2_a018, 13
  %v4_a018 = inttoptr i32 %v3_a018 to i8*
  store i8 %v1_a018, i8* %v4_a018, align 1
  %v0_a01c = load i32, i32* %r2.global-to-local, align 4
  %v1_a01c = trunc i32 %v0_a01c to i8
  %v2_a01c = load i32, i32* %ip.global-to-local, align 4
  %v3_a01c = add i32 %v2_a01c, 12
  %v4_a01c = inttoptr i32 %v3_a01c to i8*
  store i8 %v1_a01c, i8* %v4_a01c, align 1
  %v0_a020 = load i32, i32* @r5, align 4
  %v1_a020 = trunc i32 %v0_a020 to i8
  %v2_a020 = load i32, i32* %ip.global-to-local, align 4
  %v3_a020 = add i32 %v2_a020, 14
  %v4_a020 = inttoptr i32 %v3_a020 to i8*
  store i8 %v1_a020, i8* %v4_a020, align 1
  %v0_a024 = load i32, i32* @sl, align 4
  store i32 %v0_a024, i32* %r0.global-to-local, align 4
  %v1_a028 = call i32 @function_12024(i32 %v0_a024)
  store i32 %v1_a028, i32* %r0.global-to-local, align 4
  store i32 %v2_9b84, i32* %r1.global-to-local, align 4
  %v3_a030 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a030, i32* %r2.global-to-local, align 4
  %v2_a034 = load i32, i32* @r4, align 4
  %v5_a034 = mul i32 %v2_a034, 4
  %v6_a034 = add i32 %v5_a034, %v2_9b84
  %v7_a034 = inttoptr i32 %v6_a034 to i32*
  store i32 %v1_a028, i32* %v7_a034, align 4
  %v0_a038 = load i32, i32* %r1.global-to-local, align 4
  %v1_a038 = load i32, i32* %r2.global-to-local, align 4
  %v4_a038 = mul i32 %v1_a038, 4
  %v5_a038 = add i32 %v4_a038, %v0_a038
  %v6_a038 = inttoptr i32 %v5_a038 to i32*
  %v7_a038 = load i32, i32* %v6_a038, align 4
  store i32 %v7_a038, i32* @r4, align 4
  %v1_a03c = inttoptr i32 %v7_a038 to i8*
  %v2_a03c = load i8, i8* %v1_a03c, align 1
  %tmp100 = urem i8 %v2_a03c, 16
  %v1_a040 = zext i8 %tmp100 to i32
  %v1_a044 = or i32 %v1_a040, 64
  store i32 %v1_a044, i32* %r3.global-to-local, align 4
  %v1_a048 = trunc i32 %v1_a044 to i8
  store i8 %v1_a048, i8* %v1_a03c, align 1
  %v0_a04c = load i32, i32* @r4, align 4
  %v1_a04c = inttoptr i32 %v0_a04c to i8*
  %v2_a04c = load i8, i8* %v1_a04c, align 1
  store i32 %v3_9d6c, i32* %ip.global-to-local, align 4
  %v1_a058 = and i8 %v2_a04c, -16
  %v1_a060 = or i8 %v1_a058, 5
  store i32 %v5_a064, i32* %r0.global-to-local, align 4
  %v0_a068 = load i32, i32* @sl, align 4
  %v3_a068 = mul i32 %v0_a068, 65536
  store i32 %v3_a068, i32* %r2.global-to-local, align 4
  store i32 %v1_9c04, i32* %lr.global-to-local, align 4
  store i8 %v1_a060, i8* %v1_a04c, align 1
  store i32 %v5_9bc0, i32* %r1.global-to-local, align 4
  %v0_a078 = load i32, i32* %r2.global-to-local, align 4
  %v3_a078 = udiv i32 %v0_a078, 65536
  %v1_a07c = urem i32 %v3_a078, 256
  store i32 %v1_a07c, i32* %r3.global-to-local, align 4
  %v3_a080 = udiv i32 %v0_a078, 16777216
  store i32 %v3_a080, i32* %r2.global-to-local, align 4
  %v2_a084 = load i32, i32* @r4, align 4
  %v3_a084 = add i32 %v2_a084, 1
  %v4_a084 = inttoptr i32 %v3_a084 to i8*
  store i8 %v1_a084, i8* %v4_a084, align 1
  %v0_a088 = load i32, i32* %r2.global-to-local, align 4
  %v1_a088 = load i32, i32* %r3.global-to-local, align 4
  %v4_a088 = mul i32 %v1_a088, 256
  %v5_a088 = or i32 %v4_a088, %v0_a088
  store i32 %v5_a088, i32* %r2.global-to-local, align 4
  %v1_a08c = trunc i32 %v0_a088 to i8
  %v2_a08c = load i32, i32* @r4, align 4
  %v3_a08c = add i32 %v2_a08c, 2
  %v4_a08c = inttoptr i32 %v3_a08c to i8*
  store i8 %v1_a08c, i8* %v4_a08c, align 1
  %v0_a090 = load i32, i32* %lr.global-to-local, align 4
  %v2_a090 = icmp eq i32 %v0_a090, 0
  store i1 %v2_a090, i1* %cpsr_z.global-to-local, align 1
  %v0_a094 = load i32, i32* %r2.global-to-local, align 4
  %v3_a094 = sdiv i32 %v0_a094, 256
  store i32 %v3_a094, i32* %r3.global-to-local, align 4
  store i32 %v5_9bf8, i32* %r2.global-to-local, align 4
  %v1_a09c = trunc i32 %v3_a094 to i8
  %v2_a09c = load i32, i32* @r4, align 4
  %v3_a09c = add i32 %v2_a09c, 3
  %v4_a09c = inttoptr i32 %v3_a09c to i8*
  store i8 %v1_a09c, i8* %v4_a09c, align 1
  %v0_a0a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0a0, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_9fa4
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_9fa4, %bb76
  %v0_a0a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a0a4 = trunc i32 %v0_a0a4 to i8
  %v2_a0a4 = load i32, i32* @r4, align 4
  %v3_a0a4 = add i32 %v2_a0a4, 8
  %v4_a0a4 = inttoptr i32 %v3_a0a4 to i8*
  store i8 %v1_a0a4, i8* %v4_a0a4, align 1
  %v0_a0a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0a8, label %.thread5, label %bb78

bb78:                                             ; preds = %bb77
  %v1_a0a8 = load i32, i32* %r3.global-to-local, align 4
  %v2_a0a8 = trunc i32 %v1_a0a8 to i8
  %v3_a0a8 = load i32, i32* @r4, align 4
  %v4_a0a8 = add i32 %v3_a0a8, 6
  %v5_a0a8 = inttoptr i32 %v4_a0a8 to i8*
  store i8 %v2_a0a8, i8* %v5_a0a8, align 1
  %v0_a0ac.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0ac.pr, label %.thread5, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_a0b4 = load i32, i32* @r4, align 4
  %v3_a0b4 = add i32 %v2_a0b4, 9
  %v4_a0b4 = inttoptr i32 %v3_a0b4 to i8*
  store i8 6, i8* %v4_a0b4, align 1
  %v0_a0b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0b8, label %bb81, label %bb80

bb80:                                             ; preds = %.thread5
  %v1_a0b8 = load i32, i32* %r2.global-to-local, align 4
  %v2_a0b8 = trunc i32 %v1_a0b8 to i8
  %v3_a0b8 = load i32, i32* @r4, align 4
  %v4_a0b8 = add i32 %v3_a0b8, 7
  %v5_a0b8 = inttoptr i32 %v4_a0b8 to i8*
  store i8 %v2_a0b8, i8* %v5_a0b8, align 1
  br label %bb81

bb81:                                             ; preds = %.thread5, %bb80
  %v2_a0c0 = load i32, i32* @global_var_1c5dc.51, align 4
  store i32 %v2_a0c0, i32* %r3.global-to-local, align 4
  %v0_a0c4 = load i32, i32* %r0.global-to-local, align 4
  %v3_a0c4 = sdiv i32 %v0_a0c4, 256
  store i32 %v3_a0c4, i32* %ip.global-to-local, align 4
  %v1_a0c8 = load i32, i32* @r4, align 4
  %v2_a0c8 = add i32 %v1_a0c8, 12
  %v3_a0c8 = inttoptr i32 %v2_a0c8 to i32*
  store i32 %v2_a0c0, i32* %v3_a0c8, align 4
  %v0_a0cc = load i32, i32* %ip.global-to-local, align 4
  %v1_a0cc = trunc i32 %v0_a0cc to i8
  %v2_a0cc = load i32, i32* @r4, align 4
  %v3_a0cc = add i32 %v2_a0cc, 5
  %v4_a0cc = inttoptr i32 %v3_a0cc to i8*
  store i8 %v1_a0cc, i8* %v4_a0cc, align 1
  %v3_a0d0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a0d0, i32* %r2.global-to-local, align 4
  store i32 %v2_9b74, i32* %ip.global-to-local, align 4
  %v4_a0d8 = mul i32 %v3_a0d0, 16
  %v5_a0d8 = add i32 %v4_a0d8, %v2_9b74
  %v6_a0d8 = inttoptr i32 %v5_a0d8 to i32*
  %v7_a0d8 = load i32, i32* %v6_a0d8, align 4
  store i32 %v7_a0d8, i32* %r3.global-to-local, align 4
  %v0_a0dc = load i32, i32* %r0.global-to-local, align 4
  %v1_a0dc = trunc i32 %v0_a0dc to i8
  %v2_a0dc = load i32, i32* @r4, align 4
  %v3_a0dc = add i32 %v2_a0dc, 4
  %v4_a0dc = inttoptr i32 %v3_a0dc to i8*
  store i8 %v1_a0dc, i8* %v4_a0dc, align 1
  %v0_a0e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a0e0 = load i32, i32* @r4, align 4
  %v2_a0e0 = add i32 %v1_a0e0, 16
  %v3_a0e0 = inttoptr i32 %v2_a0e0 to i32*
  store i32 %v0_a0e0, i32* %v3_a0e0, align 4
  %v0_a0e4 = load i32, i32* %r2.global-to-local, align 4
  %v3_a0e4 = mul i32 %v0_a0e4, 16
  %v1_a0e8 = load i32, i32* %ip.global-to-local, align 4
  %v2_a0e8 = add i32 %v1_a0e8, %v3_a0e4
  store i32 %v2_a0e8, i32* %r2.global-to-local, align 4
  %v1_a0ec = add i32 %v2_a0e8, 13
  %v2_a0ec = inttoptr i32 %v1_a0ec to i8*
  %v3_a0ec = load i8, i8* %v2_a0ec, align 1
  %v4_a0ec = zext i8 %v3_a0ec to i32
  store i32 %v4_a0ec, i32* %r1.global-to-local, align 4
  %v1_a0f0 = add i32 %v2_a0e8, 12
  %v2_a0f0 = inttoptr i32 %v1_a0f0 to i8*
  %v3_a0f0 = load i8, i8* %v2_a0f0, align 1
  %v4_a0f0 = zext i8 %v3_a0f0 to i32
  %v4_a0f4 = mul nuw nsw i32 %v4_a0ec, 256
  %v5_a0f4 = or i32 %v4_a0f0, %v4_a0f4
  store i32 %v5_a0f4, i32* %r3.global-to-local, align 4
  %v2_a0f8 = load i32, i32* @r4, align 4
  %v3_a0f8 = add i32 %v2_a0f8, 20
  %v4_a0f8 = inttoptr i32 %v3_a0f8 to i8*
  store i8 %v3_a0f0, i8* %v4_a0f8, align 1
  %v0_a0fc = load i32, i32* @r4, align 4
  %v1_a0fc = add i32 %v0_a0fc, 20
  store i32 %v1_a0fc, i32* @r6, align 4
  %v0_a100 = load i32, i32* %r3.global-to-local, align 4
  %v3_a100 = sdiv i32 %v0_a100, 256
  store i32 %v3_a100, i32* %r3.global-to-local, align 4
  %v1_a104 = trunc i32 %v3_a100 to i8
  %v3_a104 = add i32 %v0_a0fc, 21
  %v4_a104 = inttoptr i32 %v3_a104 to i8*
  store i8 %v1_a104, i8* %v4_a104, align 1
  %v0_a108 = load i32, i32* @r6, align 4
  %v1_a108 = add i32 %v0_a108, 13
  %v2_a108 = inttoptr i32 %v1_a108 to i8*
  %v3_a108 = load i8, i8* %v2_a108, align 1
  %v4_a108 = zext i8 %v3_a108 to i32
  store i32 %v4_a108, i32* %r3.global-to-local, align 4
  %v0_a10c = load i32, i32* %r2.global-to-local, align 4
  %v1_a10c = add i32 %v0_a10c, 8
  %v2_a10c = inttoptr i32 %v1_a10c to i32*
  %v3_a10c = load i32, i32* %v2_a10c, align 4
  store i32 %v3_a10c, i32* %r1.global-to-local, align 4
  %v1_a110 = or i32 %v4_a108, 1
  store i32 %v1_a110, i32* %r3.global-to-local, align 4
  %v1_a114 = add i32 %v0_a10c, 15
  %v2_a114 = inttoptr i32 %v1_a114 to i8*
  %v3_a114 = load i8, i8* %v2_a114, align 1
  %v4_a114 = zext i8 %v3_a114 to i32
  store i32 %v4_a114, i32* %ip.global-to-local, align 4
  %v1_a118 = add i32 %v0_a10c, 14
  %v2_a118 = inttoptr i32 %v1_a118 to i8*
  %v3_a118 = load i8, i8* %v2_a118, align 1
  %v4_a118 = zext i8 %v3_a118 to i32
  store i32 %v4_a118, i32* %r0.global-to-local, align 4
  %v2_a11c = add i32 %v0_a108, 4
  %v3_a11c = inttoptr i32 %v2_a11c to i32*
  store i32 %v3_a10c, i32* %v3_a11c, align 4
  %v0_a120 = load i32, i32* %r2.global-to-local, align 4
  %v1_a120 = add i32 %v0_a120, 4
  %v2_a120 = inttoptr i32 %v1_a120 to i32*
  %v3_a120 = load i32, i32* %v2_a120, align 4
  store i32 %v3_a120, i32* %lr.global-to-local, align 4
  %v0_a124 = load i32, i32* %r3.global-to-local, align 4
  %v1_a124 = trunc i32 %v0_a124 to i8
  %v2_a124 = load i32, i32* @r6, align 4
  %v3_a124 = add i32 %v2_a124, 13
  %v4_a124 = inttoptr i32 %v3_a124 to i8*
  store i8 %v1_a124, i8* %v4_a124, align 1
  %v0_a128 = load i32, i32* @r6, align 4
  %v1_a128 = add i32 %v0_a128, 12
  %v2_a128 = inttoptr i32 %v1_a128 to i8*
  %v3_a128 = load i8, i8* %v2_a128, align 1
  %v4_a128 = zext i8 %v3_a128 to i32
  store i32 %v4_a128, i32* %r2.global-to-local, align 4
  %v1_a12c = add i32 %v0_a128, 13
  %v2_a12c = inttoptr i32 %v1_a12c to i8*
  %v3_a12c = load i8, i8* %v2_a12c, align 1
  %v4_a12c = zext i8 %v3_a12c to i32
  %v0_a130 = load i32, i32* %r0.global-to-local, align 4
  %v1_a130 = load i32, i32* %ip.global-to-local, align 4
  %v4_a130 = mul i32 %v1_a130, 256
  %v5_a130 = or i32 %v4_a130, %v0_a130
  store i32 %v5_a130, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_a128, 16
  %v1_a134 = zext i8 %tmp101 to i32
  %v3_a138 = sdiv i32 %v5_a130, 256
  store i32 %v3_a138, i32* %r1.global-to-local, align 4
  %v1_a13c = or i32 %v1_a134, 128
  store i32 %v1_a13c, i32* %r2.global-to-local, align 4
  %v1_a140 = or i32 %v4_a12c, 16
  store i32 %v1_a140, i32* %r3.global-to-local, align 4
  %v1_a144 = trunc i32 %v3_a138 to i8
  %v3_a144 = add i32 %v0_a128, 3
  %v4_a144 = inttoptr i32 %v3_a144 to i8*
  store i8 %v1_a144, i8* %v4_a144, align 1
  %v0_a148 = load i32, i32* %lr.global-to-local, align 4
  %v1_a148 = load i32, i32* @r6, align 4
  %v2_a148 = add i32 %v1_a148, 8
  %v3_a148 = inttoptr i32 %v2_a148 to i32*
  store i32 %v0_a148, i32* %v3_a148, align 4
  %v0_a14c = load i32, i32* %r2.global-to-local, align 4
  %v1_a14c = trunc i32 %v0_a14c to i8
  %v2_a14c = load i32, i32* @r6, align 4
  %v3_a14c = add i32 %v2_a14c, 12
  %v4_a14c = inttoptr i32 %v3_a14c to i8*
  store i8 %v1_a14c, i8* %v4_a14c, align 1
  %v0_a150 = load i32, i32* %r3.global-to-local, align 4
  %v1_a150 = trunc i32 %v0_a150 to i8
  %v2_a150 = load i32, i32* @r6, align 4
  %v3_a150 = add i32 %v2_a150, 13
  %v4_a150 = inttoptr i32 %v3_a150 to i8*
  store i8 %v1_a150, i8* %v4_a150, align 1
  %v0_a154 = load i32, i32* %r0.global-to-local, align 4
  %v1_a154 = trunc i32 %v0_a154 to i8
  %v2_a154 = load i32, i32* @r6, align 4
  %v3_a154 = add i32 %v2_a154, 2
  %v4_a154 = inttoptr i32 %v3_a154 to i8*
  store i8 %v1_a154, i8* %v4_a154, align 1
  %v0_a158 = call i32 @function_e958()
  %v1_a158 = trunc i32 %v0_a158 to i8
  store i32 %v0_a158, i32* %r0.global-to-local, align 4
  store i32 %v1_9c3c, i32* %lr.global-to-local, align 4
  %v0_a160 = load i32, i32* @r6, align 4
  %v1_a160 = add i32 %v0_a160, 13
  %v2_a160 = inttoptr i32 %v1_a160 to i8*
  %v3_a160 = load i8, i8* %v2_a160, align 1
  %v4_a160 = zext i8 %v3_a160 to i32
  store i32 %v1_a164, i32* %r2.global-to-local, align 4
  %v1_a168 = and i32 %v4_a160, 223
  %v5_a16c = or i32 %v1_a168, %v4_a16c
  store i32 %v5_a16c, i32* %r3.global-to-local, align 4
  %v1_a170 = trunc i32 %v5_a16c to i8
  store i8 %v1_a170, i8* %v2_a160, align 1
  store i32 %v1_9c5c, i32* %r1.global-to-local, align 4
  %v0_a178 = load i32, i32* @r6, align 4
  %v1_a178 = add i32 %v0_a178, 13
  %v2_a178 = inttoptr i32 %v1_a178 to i8*
  %v3_a178 = load i8, i8* %v2_a178, align 1
  %v4_a178 = zext i8 %v3_a178 to i32
  store i32 %v1_a17c, i32* %r3.global-to-local, align 4
  %v1_a180 = and i32 %v4_a178, 239
  %v5_a184 = or i32 %v1_a180, %v4_a184
  store i32 %v5_a184, i32* %r2.global-to-local, align 4
  %v1_a188 = trunc i32 %v5_a184 to i8
  store i8 %v1_a188, i8* %v2_a178, align 1
  store i32 %v1_9c7c, i32* %ip.global-to-local, align 4
  %v0_a190 = load i32, i32* @r6, align 4
  %v1_a190 = add i32 %v0_a190, 13
  %v2_a190 = inttoptr i32 %v1_a190 to i8*
  %v3_a190 = load i8, i8* %v2_a190, align 1
  %v4_a190 = zext i8 %v3_a190 to i32
  store i32 %v1_a194, i32* %r2.global-to-local, align 4
  %v1_a198 = and i32 %v4_a190, 247
  %v5_a19c = or i32 %v1_a198, %v4_a19c
  store i32 %v5_a19c, i32* %r3.global-to-local, align 4
  %v1_a1a0 = trunc i32 %v5_a19c to i8
  store i8 %v1_a1a0, i8* %v2_a190, align 1
  %v0_a1a8 = load i32, i32* @r6, align 4
  %v1_a1a8 = add i32 %v0_a1a8, 13
  %v2_a1a8 = inttoptr i32 %v1_a1a8 to i8*
  %v3_a1a8 = load i8, i8* %v2_a1a8, align 1
  %v4_a1a8 = zext i8 %v3_a1a8 to i32
  store i32 %v1_a1ac, i32* %r3.global-to-local, align 4
  %v1_a1b0 = and i32 %v4_a1a8, 251
  %v5_a1b4 = or i32 %v1_a1b0, %v4_a1b4
  store i32 %v5_a1b4, i32* %r2.global-to-local, align 4
  %v1_a1b8 = trunc i32 %v5_a1b4 to i8
  store i8 %v1_a1b8, i8* %v2_a1a8, align 1
  store i32 %v1_9cbc, i32* %r1.global-to-local, align 4
  %v0_a1c0 = load i32, i32* @r6, align 4
  %v1_a1c0 = add i32 %v0_a1c0, 13
  %v2_a1c0 = inttoptr i32 %v1_a1c0 to i8*
  %v3_a1c0 = load i8, i8* %v2_a1c0, align 1
  %v4_a1c0 = zext i8 %v3_a1c0 to i32
  store i32 %v1_a1c4, i32* %r2.global-to-local, align 4
  %v1_a1c8 = and i32 %v4_a1c0, 253
  %v4_a1cc = or i32 %v1_a1c8, %v3_a1cc
  store i32 %v4_a1cc, i32* %r3.global-to-local, align 4
  %v1_a1d0 = trunc i32 %v4_a1cc to i8
  store i8 %v1_a1d0, i8* %v2_a1c0, align 1
  %v0_a1d4 = load i32, i32* @r6, align 4
  %v1_a1d4 = add i32 %v0_a1d4, 13
  %v2_a1d4 = inttoptr i32 %v1_a1d4 to i8*
  %v3_a1d4 = load i8, i8* %v2_a1d4, align 1
  %v4_a1d4 = zext i8 %v3_a1d4 to i32
  %v0_a1d8 = load i32, i32* @r8, align 4
  %v1_a1d8 = urem i32 %v0_a1d8, 2
  %v1_a1dc = and i32 %v4_a1d4, 254
  store i32 %v1_a1dc, i32* %r2.global-to-local, align 4
  %v4_a1e027 = udiv i32 %v0_a158, 256
  %v2_a1e4 = or i32 %v1_a1dc, %v1_a1d8
  store i32 %v2_a1e4, i32* %r3.global-to-local, align 4
  %v1_a1e8 = trunc i32 %v4_a1e027 to i8
  %v3_a1e8 = add i32 %v0_a1d4, 15
  %v4_a1e8 = inttoptr i32 %v3_a1e8 to i8*
  store i8 %v1_a1e8, i8* %v4_a1e8, align 1
  %v3_a1ec = load i32, i32* @r6, align 4
  %v4_a1ec = add i32 %v3_a1ec, 14
  %v5_a1ec = inttoptr i32 %v4_a1ec to i8*
  store i8 %v1_a158, i8* %v5_a1ec, align 1
  %v0_a1f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1f0 = trunc i32 %v0_a1f0 to i8
  %v2_a1f0 = load i32, i32* @r6, align 4
  %v3_a1f0 = add i32 %v2_a1f0, 13
  %v4_a1f0 = inttoptr i32 %v3_a1f0 to i8*
  store i8 %v1_a1f0, i8* %v4_a1f0, align 1
  %v0_a1f4 = load i32, i32* @r4, align 4
  %v1_a1f4 = add i32 %v0_a1f4, 40
  store i32 %v1_a1f4, i32* %r0.global-to-local, align 4
  %v0_a1f8 = load i32, i32* @sb, align 4
  store i32 %v0_a1f8, i32* @r1, align 4
  %v1_a1fc = inttoptr i32 %v1_a1f4 to i8*
  %v2_a1fc = call i32 @function_ead8(i8* %v1_a1fc)
  store i32 %v2_a1fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a200

dec_label_pc_a200:                                ; preds = %dec_label_pc_9da0, %bb81
  %v3_a200 = load i32, i32* %stack_var_-40, align 4
  %v1_a204 = add i32 %v3_a200, 1
  store i32 %v1_a204, i32* %r3.global-to-local, align 4
  %v1_a208 = load i32, i32* @fp, align 4
  %v9_a208 = icmp eq i32 %v1_a204, %v1_a208
  store i1 %v9_a208, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a204, i32* %stack_var_-40, align 4
  %v5_a210 = icmp slt i32 %v1_a204, %v1_a208
  br i1 %v5_a210, label %dec_label_pc_9d90, label %dec_label_pc_a214

dec_label_pc_a214:                                ; preds = %dec_label_pc_a200, %.thread18
  %v0_a21c12 = phi i32 [ %v0_9d64, %.thread18 ], [ %v1_a208, %dec_label_pc_a200 ]
  %v0_a214 = load i32, i32* @sb, align 4
  %v1_a214 = add i32 %v0_a214, 40
  store i32 %v1_a214, i32* @sl, align 4
  %v1_a218 = add i32 %v0_a214, 20
  store i32 %v1_a218, i32* @r7, align 4
  %v2_a268 = icmp eq i32 %v1_9d14, 0
  %v6_a248 = inttoptr i32 %v2_9b84 to i32*
  %v3_a250 = icmp eq i32 %v3_9d6c, 65535
  br label %dec_label_pc_a21c

dec_label_pc_a21c:                                ; preds = %dec_label_pc_a278, %dec_label_pc_a214
  %v0_a21c = phi i32 [ %v1_a358, %dec_label_pc_a278 ], [ %v0_a21c12, %dec_label_pc_a214 ]
  %v2_a21c = icmp eq i32 %v0_a21c, 0
  store i1 %v2_a21c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_a21c, 1
  br label %dec_label_pc_a224

dec_label_pc_a224:                                ; preds = %dec_label_pc_a224, %dec_label_pc_a21c
  br i1 %tmp82, label %dec_label_pc_a224, label %dec_label_pc_a228

dec_label_pc_a228:                                ; preds = %dec_label_pc_a224
  %v0_a228 = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_a228, 256
  %v1_a230 = and i32 %tmp83, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp84 = udiv i32 %v0_a228, 256
  %v4_a234 = urem i32 %tmp84, 256
  %v5_a234 = or i32 %v4_a234, %v1_a230
  store i32 %v5_a234, i32* @r8, align 4
  store i32 %v2_9b84, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_9d6c, i32* %ip.global-to-local, align 4
  %v7_a248 = load i32, i32* %v6_a248, align 4
  store i32 %v7_a248, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_a250, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_a25c = add i32 %v7_a248, 20
  store i32 %v1_a25c, i32* @r5, align 4
  br i1 %v3_a250, label %dec_label_pc_a384, label %dec_label_pc_a264

dec_label_pc_a264:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a228
  %v0_a26c = phi i32 [ %v7_a370, %dec_label_pc_a364 ], [ %v7_a248, %dec_label_pc_a228 ]
  store i32 %v1_9d14, i32* %lr.global-to-local, align 4
  store i1 %v2_a268, i1* %cpsr_z.global-to-local, align 1
  %v1_a26c = add i32 %v0_a26c, 40
  store i32 %v1_a26c, i32* %r0.global-to-local, align 4
  %v0_a270 = load i32, i32* @sb, align 4
  store i32 %v0_a270, i32* @r1, align 4
  br i1 %v2_a268, label %dec_label_pc_a278, label %dec_label_pc_a3a8

dec_label_pc_a278:                                ; preds = %dec_label_pc_a264, %dec_label_pc_a384, %dec_label_pc_a3a8
  %v2_a278 = phi i32 [ %v0_a26c, %dec_label_pc_a264 ], [ %v0_a39c, %dec_label_pc_a384 ], [ %v2_a278.pre, %dec_label_pc_a3a8 ]
  %v0_a278 = load i32, i32* @r6, align 4
  %v1_a278 = trunc i32 %v0_a278 to i8
  %v3_a278 = add i32 %v2_a278, 10
  %v4_a278 = inttoptr i32 %v3_a278 to i8*
  store i8 %v1_a278, i8* %v4_a278, align 1
  %v0_a27c = load i32, i32* @r6, align 4
  %v1_a27c = trunc i32 %v0_a27c to i8
  %v2_a27c = load i32, i32* @r4, align 4
  %v3_a27c = add i32 %v2_a27c, 11
  %v4_a27c = inttoptr i32 %v3_a27c to i8*
  store i8 %v1_a27c, i8* %v4_a27c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a284 = load i32, i32* @r4, align 4
  store i32 %v0_a284, i32* @r0, align 4
  %v2_a288 = call i32 @function_d0b8(i32 %v0_a284, i32 20)
  %v3_a288 = trunc i32 %v2_a288 to i8
  store i32 %v2_a288, i32* %r0.global-to-local, align 4
  %v3_a28c = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_9b74, i32* %r2.global-to-local, align 4
  %v3_a294 = mul i32 %v3_a28c, 16
  %v2_a298 = add i32 %v3_a294, %v2_9b74
  store i32 %v2_a298, i32* %r1.global-to-local, align 4
  %v1_a29c = add i32 %v2_a298, 4
  %v2_a29c = inttoptr i32 %v1_a29c to i32*
  %v3_a29c = load i32, i32* %v2_a29c, align 4
  %v3_a2a0 = mul i32 %v3_a29c, 65536
  store i32 %v3_a2a0, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_a29c, 256
  %v1_a2a8 = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp86 = udiv i32 %v3_a29c, 256
  %v4_a2ac = urem i32 %tmp86, 256
  %v5_a2ac = or i32 %v4_a2ac, %v1_a2a8
  store i32 %v5_a2ac, i32* %r2.global-to-local, align 4
  %v1_a2b0 = add i32 %v3_a29c, 1
  store i32 %v1_a2b0, i32* %r3.global-to-local, align 4
  store i32 %v1_a2b0, i32* %v2_a29c, align 4
  %v0_a2b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2b8 = load i32, i32* @r5, align 4
  %v2_a2b8 = add i32 %v1_a2b8, 4
  %v3_a2b8 = inttoptr i32 %v2_a2b8 to i32*
  store i32 %v0_a2b8, i32* %v3_a2b8, align 4
  %v0_a2bc = load i32, i32* %r1.global-to-local, align 4
  %v1_a2bc = add i32 %v0_a2bc, 8
  %v2_a2bc = inttoptr i32 %v1_a2bc to i32*
  %v3_a2bc = load i32, i32* %v2_a2bc, align 4
  %tmp87 = mul i32 %v3_a2bc, 256
  %v1_a2c8 = and i32 %tmp87, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp88 = udiv i32 %v3_a2bc, 256
  %v4_a2cc = urem i32 %tmp88, 256
  %v5_a2cc = or i32 %v4_a2cc, %v1_a2c8
  store i32 %v5_a2cc, i32* %r2.global-to-local, align 4
  %v4_a2d028 = udiv i32 %v2_a288, 256
  %v1_a2d4 = trunc i32 %v4_a2d028 to i8
  %v2_a2d4 = load i32, i32* @r4, align 4
  %v3_a2d4 = add i32 %v2_a2d4, 11
  %v4_a2d4 = inttoptr i32 %v3_a2d4 to i8*
  store i8 %v1_a2d4, i8* %v4_a2d4, align 1
  %v3_a2d8 = load i32, i32* @r4, align 4
  %v4_a2d8 = add i32 %v3_a2d8, 10
  %v5_a2d8 = inttoptr i32 %v4_a2d8 to i8*
  store i8 %v3_a288, i8* %v5_a2d8, align 1
  %v0_a2dc = load i32, i32* %r2.global-to-local, align 4
  %v1_a2dc = load i32, i32* @r5, align 4
  %v2_a2dc = add i32 %v1_a2dc, 8
  %v3_a2dc = inttoptr i32 %v2_a2dc to i32*
  store i32 %v0_a2dc, i32* %v3_a2dc, align 4
  %v0_a2e0 = load i32, i32* @r5, align 4
  store i32 %v0_a2e0, i32* @r1, align 4
  %v0_a2e4 = load i32, i32* @r8, align 4
  store i32 %v0_a2e4, i32* %r2.global-to-local, align 4
  %v0_a2e8 = load i32, i32* @r7, align 4
  store i32 %v0_a2e8, i32* %r3.global-to-local, align 4
  %v0_a2ec = load i32, i32* @r4, align 4
  store i32 %v0_a2ec, i32* %r0.global-to-local, align 4
  %v0_a2f0 = load i32, i32* @r6, align 4
  %v1_a2f0 = trunc i32 %v0_a2f0 to i8
  %v3_a2f0 = add i32 %v0_a2e0, 16
  %v4_a2f0 = inttoptr i32 %v3_a2f0 to i8*
  store i8 %v1_a2f0, i8* %v4_a2f0, align 1
  %v0_a2f4 = load i32, i32* @r6, align 4
  %v1_a2f4 = trunc i32 %v0_a2f4 to i8
  %v2_a2f4 = load i32, i32* @r5, align 4
  %v3_a2f4 = add i32 %v2_a2f4, 17
  %v4_a2f4 = inttoptr i32 %v3_a2f4 to i8*
  store i8 %v1_a2f4, i8* %v4_a2f4, align 1
  %v4_a2f8 = call i32 @function_d114(i32 %v0_a2ec, i32 %v0_a2e0, i32 %v0_a2e4, i32 %v0_a2e8)
  %v5_a2f8 = trunc i32 %v4_a2f8 to i8
  store i32 %v4_a2f8, i32* %r0.global-to-local, align 4
  %v4_a2fc29 = udiv i32 %v4_a2f8, 256
  %v1_a300 = trunc i32 %v4_a2fc29 to i8
  %v2_a300 = load i32, i32* @r5, align 4
  %v3_a300 = add i32 %v2_a300, 17
  %v4_a300 = inttoptr i32 %v3_a300 to i8*
  store i8 %v1_a300, i8* %v4_a300, align 1
  %v3_a304 = load i32, i32* @r5, align 4
  %v4_a304 = add i32 %v3_a304, 16
  %v5_a304 = inttoptr i32 %v4_a304 to i8*
  store i8 %v5_a2f8, i8* %v5_a304, align 1
  %v3_a308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a308, i32* %r3.global-to-local, align 4
  %v0_a30c = load i32, i32* @r4, align 4
  %v1_a30c = add i32 %v0_a30c, 20
  %v2_a30c = inttoptr i32 %v1_a30c to i32*
  %v3_a30c = load i32, i32* %v2_a30c, align 4
  %v5_a314 = mul i32 %v3_a308, 24
  %v3_a31c = udiv i32 %v3_a30c, 65536
  store i32 %v3_a31c, i32* %r2.global-to-local, align 4
  %v2_a320 = add i32 %v5_a314, %arg2
  store i32 %v2_a320, i32* %ip.global-to-local, align 4
  %v3_a3244 = udiv i32 %v3_a30c, 16777216
  %v1_a328 = trunc i32 %v3_a3244 to i8
  %v3_a328 = add i32 %v2_a320, 3
  %v4_a328 = inttoptr i32 %v3_a328 to i8*
  store i8 %v1_a328, i8* %v4_a328, align 1
  %v0_a32c = load i32, i32* %r2.global-to-local, align 4
  %v1_a32c = trunc i32 %v0_a32c to i8
  %v2_a32c = load i32, i32* %ip.global-to-local, align 4
  %v3_a32c = add i32 %v2_a32c, 2
  %v4_a32c = inttoptr i32 %v3_a32c to i8*
  store i8 %v1_a32c, i8* %v4_a32c, align 1
  %v0_a330 = load i32, i32* @r4, align 4
  store i32 %v0_a330, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v0_a33c = load i32, i32* @sl, align 4
  store i32 %v0_a33c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_a344 = load i32, i32* %ip.global-to-local, align 4
  %v6_a34c = inttoptr i32 %v0_a330 to i32*
  %v7_a34c = call i32 @function_11e28(i32 %v3_9d24, i32* %v6_a34c, i32 %v0_a33c, i32 16384, i32 %v0_a344, i32 16)
  %v3_a350 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a350, i32* %r3.global-to-local, align 4
  %v1_a354 = add i32 %v3_a350, 1
  store i32 %v1_a354, i32* %r0.global-to-local, align 4
  %v1_a358 = load i32, i32* @fp, align 4
  %v9_a358 = icmp eq i32 %v1_a354, %v1_a358
  store i1 %v9_a358, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a354, i32* %stack_var_-40, align 4
  %v6_a360 = icmp slt i32 %v1_a354, %v1_a358
  br i1 %v6_a360, label %dec_label_pc_a364, label %dec_label_pc_a21c

dec_label_pc_a364:                                ; preds = %dec_label_pc_a278
  store i32 %v2_9b84, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_9d6c, i32* %ip.global-to-local, align 4
  %v4_a370 = mul i32 %v1_a354, 4
  %v5_a370 = add i32 %v4_a370, %v2_9b84
  %v6_a370 = inttoptr i32 %v5_a370 to i32*
  %v7_a370 = load i32, i32* %v6_a370, align 4
  store i32 %v7_a370, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_a250, i1* %cpsr_z.global-to-local, align 1
  %v1_a37c = add i32 %v7_a370, 20
  store i32 %v1_a37c, i32* @r5, align 4
  br i1 %v3_a250, label %dec_label_pc_a384, label %dec_label_pc_a264

dec_label_pc_a384:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a228
  %v0_a384 = call i32 @function_e958()
  %v1_a384 = trunc i32 %v0_a384 to i8
  store i32 %v1_9d14, i32* %lr.global-to-local, align 4
  %v4_a38c = sdiv i32 %v0_a384, 256
  store i32 %v4_a38c, i32* %r3.global-to-local, align 4
  store i1 %v2_a268, i1* %cpsr_z.global-to-local, align 1
  %v3_a394 = load i32, i32* @r4, align 4
  %v4_a394 = add i32 %v3_a394, 4
  %v5_a394 = inttoptr i32 %v4_a394 to i8*
  store i8 %v1_a384, i8* %v5_a394, align 1
  %v0_a398 = load i32, i32* %r3.global-to-local, align 4
  %v1_a398 = trunc i32 %v0_a398 to i8
  %v2_a398 = load i32, i32* @r4, align 4
  %v3_a398 = add i32 %v2_a398, 5
  %v4_a398 = inttoptr i32 %v3_a398 to i8*
  store i8 %v1_a398, i8* %v4_a398, align 1
  %v0_a39c = load i32, i32* @r4, align 4
  %v1_a39c = add i32 %v0_a39c, 40
  store i32 %v1_a39c, i32* %r0.global-to-local, align 4
  %v0_a3a0 = load i32, i32* @sb, align 4
  store i32 %v0_a3a0, i32* @r1, align 4
  %v0_a3a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a3a4, label %dec_label_pc_a278, label %dec_label_pc_a3a8

dec_label_pc_a3a8:                                ; preds = %dec_label_pc_a264, %dec_label_pc_a384
  %v0_a3a8 = phi i32 [ %v1_a26c, %dec_label_pc_a264 ], [ %v1_a39c, %dec_label_pc_a384 ]
  %v1_a3a8 = inttoptr i32 %v0_a3a8 to i8*
  %v2_a3a8 = call i32 @function_ead8(i8* %v1_a3a8)
  store i32 %v2_a3a8, i32* %r0.global-to-local, align 4
  %v2_a278.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a278

; uselistorder directives
  uselistorder i32 %v0_a39c, { 1, 0 }
  uselistorder i32 %v7_a370, { 1, 2, 0 }
  uselistorder i32 %v1_a358, { 1, 2, 0 }
  uselistorder i32 %v1_a354, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_a2f8, { 0, 2, 1 }
  uselistorder i32 %v0_a2e0, { 1, 0, 2 }
  uselistorder i32 %v3_a2bc, { 1, 0 }
  uselistorder i32 %v3_a29c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_a288, { 0, 2, 1 }
  uselistorder i32 %v0_a26c, { 1, 0 }
  uselistorder i32 %v0_a228, { 1, 0 }
  uselistorder i32 %v0_a21c, { 1, 0 }
  uselistorder i1 %v3_a250, { 2, 3, 1, 0 }
  uselistorder i32 %v1_a204, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a158, { 0, 2, 1 }
  uselistorder i32 %v3_a138, { 1, 0 }
  uselistorder i32 %v0_a10c, { 1, 0, 2 }
  uselistorder i32 %v3_a100, { 1, 0 }
  uselistorder i32 %v3_a094, { 1, 0 }
  uselistorder i32 %v0_a088, { 1, 0 }
  uselistorder i32 %v3_a010, { 1, 0 }
  uselistorder i32 %v3_9fe0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_9fb4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_9fac, { 1, 0 }
  uselistorder i32 %v4_9f94, { 1, 0 }
  uselistorder i32 %v0_9f90, { 0, 2, 1 }
  uselistorder i1 %v7_9f00, { 1, 0 }
  uselistorder i32 %v7_9ef8, { 0, 2, 1, 3 }
  uselistorder i32 %v5_9f44, { 1, 0 }
  uselistorder i1 %v9_9f28, { 1, 0 }
  uselistorder i32 %v4_9f3c, { 1, 0 }
  uselistorder i32 %v4_9f38, { 1, 0 }
  uselistorder i32 %v8_9e4c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_9e38, { 1, 0 }
  uselistorder i32 %v0_9e28, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9db0, { 1, 0 }
  uselistorder i32 %v3_9dac, { 2, 1, 0, 3 }
  uselistorder i32 %v1_a1c4, { 1, 0 }
  uselistorder i32 %v1_a1ac, { 1, 0 }
  uselistorder i32 %v1_a194, { 1, 0 }
  uselistorder i32 %v1_a17c, { 1, 0 }
  uselistorder i32 %v1_a164, { 1, 0 }
  uselistorder i32 %v5_9f40, { 1, 0 }
  uselistorder i32 %v3_9e9493, { 1, 0 }
  uselistorder i1 %v2_9f58, { 1, 0 }
  uselistorder i32 %v1_9f54, { 1, 0 }
  uselistorder i32 %v4_9f50, { 2, 0, 1 }
  uselistorder i32 %v4_9f34, { 1, 0 }
  uselistorder i1 %v3_9e7c, { 1, 0 }
  uselistorder i32 %v8_9d78, { 2, 1, 0 }
  uselistorder i32 %v8_9d74, { 1, 2, 0 }
  uselistorder i32 %v3_9d6c, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_9d68, { 0, 1, 3, 2 }
  uselistorder i1 %v7_9d5c, { 1, 0 }
  uselistorder i1 %v7_9d2c, { 1, 0 }
  uselistorder i32 %v3_9d28, { 2, 0, 1 }
  uselistorder i32 %v3_9d24, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_9d14, { 1, 3, 2, 0 }
  uselistorder i32 %v1_9cbc, { 1, 2, 0 }
  uselistorder i32 %v1_9c9c, { 1, 0 }
  uselistorder i32 %v1_9c7c, { 1, 2, 0 }
  uselistorder i32 %v1_9c5c, { 1, 2, 0 }
  uselistorder i32 %v1_9c3c, { 1, 2, 0 }
  uselistorder i32 %v1_9c04, { 1, 2, 0 }
  uselistorder i32 %v5_9bc0, { 0, 2, 1 }
  uselistorder i32 %v2_9b84, { 0, 4, 5, 2, 1, 3, 6 }
  uselistorder i32 %v2_9b74, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_9b58, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 5, 7, 6, 11, 8, 9, 12, 10, 20, 13, 14, 15, 16, 17, 18, 19, 24, 21, 22, 23, 25, 27, 26, 29, 28, 32, 30, 33, 34, 31, 1, 36, 35, 37, 38, 40, 39, 44, 41, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_a3a8, { 1, 0 }
  uselistorder label %dec_label_pc_a278, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a200, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread5, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_9f88, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9ec0, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_9e70, { 1, 0 }
}

define i32 @function_a3b4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a3b4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_a3b8 = urem i32 %arg1, 256
  store i32 %v1_a3b8, i32* @fp, align 4
  store i32 %v1_a3b8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a3d0 = urem i32 %arg3, 256
  store i32 %v1_a3d0, i32* @r4, align 4
  %v2_a3d4 = call i32 @function_12178(i32 %v1_a3b8, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_a3e0 = load i32, i32* @fp, align 4
  store i32 %v0_a3e0, i32* %r0.global-to-local, align 4
  %v2_a3e4 = call i32 @function_12178(i32 %v0_a3e0, i32 4)
  %v0_a3e8 = load i32, i32* @r5, align 4
  store i32 %v0_a3e8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a3f8 = load i32, i32* @r4, align 4
  store i32 %v0_a3f8, i32* %r0.global-to-local, align 4
  %v5_a3fc = inttoptr i32 %v0_a3e8 to i32*
  %v6_a3fc = call i32 @function_85e0(i32 %v0_a3f8, i32* %v5_a3fc, i32 2, i32 0, i32 %v2_a3e4)
  %v1_a408 = urem i32 %v6_a3fc, 256
  store i32 %v1_a408, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a414 = load i32, i32* @r5, align 4
  store i32 %v0_a414, i32* %r1.global-to-local, align 4
  %v0_a418 = load i32, i32* @r4, align 4
  store i32 %v0_a418, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a3fc, 16777216
  %v5_a420 = sdiv i32 %sext, 16777216
  %v6_a420 = inttoptr i32 %v0_a414 to i32*
  %v7_a420 = call i32 @function_85e0(i32 %v0_a418, i32* %v6_a420, i32 3, i32 65535, i32 %v5_a420)
  %v0_a424 = load i32, i32* @r5, align 4
  store i32 %v0_a424, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a420, i32* @r6, align 4
  %v0_a434 = load i32, i32* @r4, align 4
  store i32 %v0_a434, i32* %r0.global-to-local, align 4
  %v5_a438 = inttoptr i32 %v0_a424 to i32*
  %v6_a438 = call i32 @function_85e0(i32 %v0_a434, i32* %v5_a438, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a440 = urem i32 %v6_a438, 256
  store i32 %v1_a440, i32* %ip.global-to-local, align 4
  %v0_a444 = load i32, i32* @r5, align 4
  store i32 %v0_a444, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a450 = load i32, i32* @r4, align 4
  store i32 %v0_a450, i32* %r0.global-to-local, align 4
  %sext6 = mul i32 %v6_a438, 16777216
  %v5_a458 = sdiv i32 %sext6, 16777216
  %v6_a458 = inttoptr i32 %v0_a444 to i32*
  %v7_a458 = call i32 @function_85e0(i32 %v0_a450, i32* %v6_a458, i32 5, i32 1, i32 %v5_a458)
  %v1_a464 = urem i32 %v7_a458, 256
  store i32 %v1_a464, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a46c = load i32, i32* @r5, align 4
  store i32 %v0_a46c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a474 = load i32, i32* @r4, align 4
  store i32 %v0_a474, i32* %r0.global-to-local, align 4
  %v5_a47c = inttoptr i32 %v0_a46c to i32*
  %v6_a47c = call i32 @function_85e0(i32 %v0_a474, i32* %v5_a47c, i32 7, i32 65535, i32 %v1_a464)
  %v0_a480 = load i32, i32* @r5, align 4
  store i32 %v0_a480, i32* %r1.global-to-local, align 4
  %v3_a484 = mul i32 %v6_a47c, 65536
  store i32 %v3_a484, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a490 = load i32, i32* @r4, align 4
  store i32 %v0_a490, i32* %r0.global-to-local, align 4
  %v5_a494 = inttoptr i32 %v0_a480 to i32*
  %v6_a494 = call i32 @function_85e0(i32 %v0_a490, i32* %v5_a494, i32 11, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_a49c = urem i32 %v6_a494, 256
  store i32 %v1_a49c, i32* %ip.global-to-local, align 4
  %v0_a4a0 = load i32, i32* @r5, align 4
  store i32 %v0_a4a0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a4ac = load i32, i32* @r4, align 4
  store i32 %v0_a4ac, i32* %r0.global-to-local, align 4
  %v5_a4b4 = inttoptr i32 %v0_a4a0 to i32*
  %v6_a4b4 = call i32 @function_85e0(i32 %v0_a4ac, i32* %v5_a4b4, i32 12, i32 1, i32 %v1_a49c)
  %v1_a4bc = urem i32 %v6_a4b4, 256
  store i32 %v1_a4bc, i32* %ip.global-to-local, align 4
  %v0_a4c0 = load i32, i32* @r5, align 4
  store i32 %v0_a4c0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a4cc = load i32, i32* @r4, align 4
  store i32 %v0_a4cc, i32* %r0.global-to-local, align 4
  %v5_a4d4 = inttoptr i32 %v0_a4c0 to i32*
  %v6_a4d4 = call i32 @function_85e0(i32 %v0_a4cc, i32* %v5_a4d4, i32 13, i32 1, i32 %v1_a4bc)
  %v1_a4dc = urem i32 %v6_a4d4, 256
  store i32 %v1_a4dc, i32* %ip.global-to-local, align 4
  %v0_a4e0 = load i32, i32* @r5, align 4
  store i32 %v0_a4e0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a4ec = load i32, i32* @r4, align 4
  store i32 %v0_a4ec, i32* %r0.global-to-local, align 4
  %v5_a4f4 = inttoptr i32 %v0_a4e0 to i32*
  %v6_a4f4 = call i32 @function_85e0(i32 %v0_a4ec, i32* %v5_a4f4, i32 14, i32 0, i32 %v1_a4dc)
  %v1_a4fc = urem i32 %v6_a4f4, 256
  store i32 %v1_a4fc, i32* %ip.global-to-local, align 4
  %v0_a500 = load i32, i32* @r5, align 4
  store i32 %v0_a500, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a50c = load i32, i32* @r4, align 4
  store i32 %v0_a50c, i32* %r0.global-to-local, align 4
  %v5_a514 = inttoptr i32 %v0_a500 to i32*
  %v6_a514 = call i32 @function_85e0(i32 %v0_a50c, i32* %v5_a514, i32 15, i32 0, i32 %v1_a4fc)
  %v1_a51c = urem i32 %v6_a514, 256
  store i32 %v1_a51c, i32* %ip.global-to-local, align 4
  %v0_a520 = load i32, i32* @r5, align 4
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a52c = load i32, i32* @r4, align 4
  store i32 %v0_a52c, i32* %r0.global-to-local, align 4
  %v5_a534 = inttoptr i32 %v0_a520 to i32*
  %v6_a534 = call i32 @function_85e0(i32 %v0_a52c, i32* %v5_a534, i32 16, i32 0, i32 %v1_a51c)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_a534, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_a544 = load i32, i32* @r5, align 4
  store i32 %v0_a544, i32* %r1.global-to-local, align 4
  %v0_a548 = load i32, i32* @r4, align 4
  store i32 %v0_a548, i32* %r0.global-to-local, align 4
  %v1_a54c = urem i32 %v6_a534, 256
  store i32 %v1_a54c, i32* @r8, align 4
  %v5_a550 = inttoptr i32 %v0_a544 to i32*
  %v6_a550 = call i32 @function_85e0(i32 %v0_a548, i32* %v5_a550, i32 0, i32 768, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a55c = load i32, i32* @r5, align 4
  store i32 %v0_a55c, i32* %r1.global-to-local, align 4
  store i32 %v6_a550, i32* @sb, align 4
  %v0_a564 = load i32, i32* @r4, align 4
  store i32 %v0_a564, i32* %r0.global-to-local, align 4
  %v5_a568 = inttoptr i32 %v0_a55c to i32*
  %v6_a568 = call i32 @function_85e0(i32 %v0_a564, i32* %v5_a568, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_a574 = urem i32 %v6_a568, 256
  store i32 %v1_a574, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a584 = call i32 @function_11e8c(i32 2, i32 3, i32 6)
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v0_a588 = load i32, i32* @r7, align 4
  %v3_a588 = udiv i32 %v0_a588, 65536
  store i32 %v3_a588, i32* %r1.global-to-local, align 4
  %v7_a58c = icmp eq i32 %v3_a584, -1
  store i1 %v7_a58c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a58c, label %dec_label_pc_a7e8, label %dec_label_pc_a59c

dec_label_pc_a59c:                                ; preds = %dec_label_pc_a3b4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a5a4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a5a4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a5b8 = call i32 @function_11e5c(i32 %v3_a584, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_a5b8, i32* %r0.global-to-local, align 4
  %v7_a5bc = icmp eq i32 %v6_a5b8, -1
  store i1 %v7_a5bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a5bc, label %dec_label_pc_a7e0, label %dec_label_pc_a5c4

dec_label_pc_a5c4:                                ; preds = %dec_label_pc_a59c
  %v0_a5c4 = load i32, i32* @fp, align 4
  %v2_a5c4 = icmp eq i32 %v0_a5c4, 0
  store i1 %v2_a5c4, i1* %cpsr_z.global-to-local, align 1
  %v0_a5c8 = load i32, i32* @r6, align 4
  %v3_a5c8 = mul i32 %v0_a5c8, 65536
  store i32 %v3_a5c8, i32* %r0.global-to-local, align 4
  %v3_a5cc = urem i32 %v0_a5c8, 65536
  store i32 %v3_a5cc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_a5c4, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_a5f0.preheader

.thread18:                                        ; preds = %dec_label_pc_a5c4
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_aa74

dec_label_pc_a5f0.preheader:                      ; preds = %dec_label_pc_a5c4
  %v5_a5d4 = load i32, i32* @r7, align 4
  %v8_a5d4 = udiv i32 %v5_a5d4, 16777216
  %tmp73 = udiv i32 %v0_a5c8, 256
  %v8_a5d8 = urem i32 %tmp73, 256
  store i32 %v8_a5d8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_a6dc = icmp ugt i32 %v0_a588, -65537
  %v2_a700 = ptrtoint i32* %stack_var_-60 to i32
  %v3_a70c = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_a73c = ptrtoint i32* %stack_var_-76 to i32
  %v2_a740 = ptrtoint i32* %stack_var_-44 to i32
  %v2_a744 = ptrtoint i32* %stack_var_-332 to i32
  %v4_a790 = zext i8 %tmp31 to i32
  %v4_a794 = zext i8 %tmp30 to i32
  %v4_a7a0 = mul nuw nsw i32 %v4_a794, 256
  %v4_a7b0 = zext i8 %tmp to i32
  %v1_a7b4 = and i32 %v4_a7b0, 18
  %v2_a7b8 = icmp eq i32 %v1_a7b4, 18
  %v1_a6ec = mul nuw nsw i32 %v3_a588, 256
  %v4_a6f0 = and i32 %v1_a6ec, 65280
  %v5_a6f0 = or i32 %v8_a5d4, %v4_a6f0
  %v3_a6f493 = udiv i32 %v4_a6f0, 256
  %v1_a6f8 = trunc i32 %v3_a6f493 to i8
  %v1_a8bc = mul i32 %v0_a5c8, 256
  %v4_a8c4 = and i32 %v1_a8bc, 65280
  %v5_a7a0 = or i32 %v4_a790, %v4_a7a0
  %v1_a7c0 = and i32 %v4_a7b0, 5
  %v2_a7c0 = icmp eq i32 %v1_a7c0, 0
  %v1_a6fc = trunc i32 %v8_a5d4 to i8
  %v5_a8c4 = or i32 %v8_a5d8, %v4_a8c4
  %v1_a8e4 = trunc i32 %v5_a420 to i8
  %v1_a9c4 = urem i32 %v6_a494, 2
  %tmp94 = sub nsw i32 0, %v1_a9c4
  %v4_a9cc = and i32 %tmp94, 32
  %v1_a9dc = urem i32 %v6_a4b4, 2
  %tmp95 = sub nsw i32 0, %v1_a9dc
  %v4_a9e4 = and i32 %tmp95, 16
  %v1_a9f4 = urem i32 %v6_a4d4, 2
  %tmp96 = sub nsw i32 0, %v1_a9f4
  %v4_a9fc = and i32 %tmp96, 8
  %v1_aa0c = urem i32 %v6_a4f4, 2
  %tmp97 = sub nsw i32 0, %v1_aa0c
  %v4_aa14 = and i32 %tmp97, 4
  %v1_aa24 = urem i32 %v6_a514, 2
  %tmp98 = sub nsw i32 0, %v1_aa24
  %v3_aa2c = and i32 %tmp98, 2
  br label %dec_label_pc_a5f0

dec_label_pc_a5f0:                                ; preds = %dec_label_pc_aa60, %dec_label_pc_a7c8, %dec_label_pc_a5f0.preheader
  store i32 %v8_a5d8, i32* %r3.global-to-local, align 4
  %v0_a5fc = load i32, i32* @sb, align 4
  %v1_a5fc = add i32 %v0_a5fc, 40
  store i32 %v1_a5fc, i32* @sl, align 4
  br label %dec_label_pc_a600

dec_label_pc_a600:                                ; preds = %dec_label_pc_a7d4, %dec_label_pc_a5f0
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a60c = call i32 @function_11e8c(i32 2, i32 1, i32 0)
  store i32 %v3_a60c, i32* %r0.global-to-local, align 4
  %v7_a610 = icmp eq i32 %v3_a60c, -1
  store i1 %v7_a610, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a60c, i32* @r7, align 4
  br i1 %v7_a610, label %dec_label_pc_aa60, label %dec_label_pc_a61c

dec_label_pc_a61c:                                ; preds = %dec_label_pc_a600
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_a624 = call i32 @function_114b0(i32 %v3_a60c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a62c = or i32 %v2_a624, 2048
  store i32 %v1_a62c, i32* @r2, align 4
  %v0_a630 = load i32, i32* @r7, align 4
  store i32 %v0_a630, i32* %r0.global-to-local, align 4
  %v2_a634 = call i32 @function_114b0(i32 %v0_a630, i32 4)
  store i32 %v2_a634, i32* %r0.global-to-local, align 4
  %v3_a638 = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_a648 = mul i32 %v3_a638, 24
  store i32 %v5_a648, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_a658 = add i32 %v5_a648, %arg2
  store i32 %v2_a658, i32* %r2.global-to-local, align 4
  %v1_a65c = add i32 %v2_a658, 20
  %v2_a65c = inttoptr i32 %v1_a65c to i8*
  %v3_a65c = load i8, i8* %v2_a65c, align 1
  %v4_a65c = zext i8 %v3_a65c to i32
  store i32 %v4_a65c, i32* %r3.global-to-local, align 4
  %v2_a660 = icmp ugt i8 %v3_a65c, 30
  %v7_a660 = icmp eq i8 %v3_a65c, 31
  store i1 %v7_a660, i1* %cpsr_z.global-to-local, align 1
  %v2_a664 = xor i1 %v7_a660, true
  %v3_a664 = and i1 %v2_a660, %v2_a664
  %v5_a664 = add i32 %v2_a658, 16
  %v6_a664 = inttoptr i32 %v5_a664 to i32*
  %v7_a664 = load i32, i32* %v6_a664, align 4
  br i1 %v3_a664, label %dec_label_pc_a6d0, label %dec_label_pc_a670

dec_label_pc_a670:                                ; preds = %dec_label_pc_a61c
  store i32 %v7_a664, i32* @r4, align 4
  %v0_a674 = call i32 @function_e958()
  store i32 %v0_a674, i32* %r0.global-to-local, align 4
  %v3_a678 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_a684 = mul i32 %v3_a678, 24
  %v0_a688 = load i32, i32* @r4, align 4
  %v2_a68c = add i32 %v5_a684, %arg2
  store i32 %v2_a68c, i32* %r1.global-to-local, align 4
  %v1_a690 = and i32 %v0_a688, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_a690, i32* %r3.global-to-local, align 4
  %v1_a688 = udiv i32 %v0_a688, 256
  %v3_a694 = and i32 %v1_a688, 65280
  store i32 %v3_a694, i32* %r2.global-to-local, align 4
  %v3_a698 = mul i32 %v0_a688, 16777216
  store i32 %v3_a698, i32* %ip.global-to-local, align 4
  %v1_a69c = add i32 %v2_a68c, 20
  %v2_a69c = inttoptr i32 %v1_a69c to i8*
  %v3_a69c = load i8, i8* %v2_a69c, align 1
  %v4_a69c = zext i8 %v3_a69c to i32
  store i32 %v4_a69c, i32* %lr.global-to-local, align 4
  %v4_a6a0 = mul i32 %v1_a690, 256
  %v5_a6a0 = or i32 %v4_a6a0, %v3_a698
  store i32 %v5_a6a0, i32* %ip.global-to-local, align 4
  %v4_a6a4 = udiv i32 %v0_a688, 16777216
  %v5_a6a4 = or i32 %v3_a694, %v4_a6a4
  %v2_a6a8 = or i32 %v5_a6a4, %v5_a6a0
  %v7_a6ac = lshr i32 %v0_a674, %v4_a69c
  %v8_a6ac = add i32 %v7_a6ac, %v2_a6a8
  store i32 %v8_a6ac, i32* %r2.global-to-local, align 4
  %v3_a6b8 = mul i32 %v8_a6ac, 16777216
  %v1_a6bc = and i32 %v8_a6ac, 65280
  store i32 %v1_a6bc, i32* %r0.global-to-local, align 4
  %v4_a6c0 = mul nuw nsw i32 %v1_a6bc, 256
  %v5_a6c0 = or i32 %v4_a6c0, %v3_a6b8
  store i32 %v5_a6c0, i32* %r1.global-to-local, align 4
  %v2_a6c8 = call i32 @llvm.bswap.i32(i32 %v8_a6ac)
  br label %dec_label_pc_a6d0

dec_label_pc_a6d0:                                ; preds = %dec_label_pc_a61c, %dec_label_pc_a670
  %storemerge25 = phi i32 [ %v2_a6c8, %dec_label_pc_a670 ], [ %v7_a664, %dec_label_pc_a61c ]
  store i32 %v3_a588, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_a6dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a6dc, label %dec_label_pc_a7f0, label %dec_label_pc_a6e4

dec_label_pc_a6e4:                                ; preds = %dec_label_pc_a6d0
  store i32 %v8_a5d4, i32* %ip.global-to-local, align 4
  store i32 %v5_a6f0, i32* %r3.global-to-local, align 4
  store i32 %v3_a6f493, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_a700

dec_label_pc_a700:                                ; preds = %dec_label_pc_a7f0, %dec_label_pc_a6e4
  %stack_var_-57.0 = phi i8 [ %v1_a7f8, %dec_label_pc_a7f0 ], [ %v1_a6f8, %dec_label_pc_a6e4 ]
  %storemerge = phi i8 [ %v1_a7f0, %dec_label_pc_a7f0 ], [ %v1_a6fc, %dec_label_pc_a6e4 ]
  store i32 %v2_a700, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a708 = load i32, i32* @r7, align 4
  store i32 %v0_a708, i32* %r0.global-to-local, align 4
  %v4_a70c = call i32 @function_11ce8(i32 %v0_a708, %sockaddr* nonnull %v3_a70c, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a714 = call i32 @function_11844(i32* null)
  store i32 %v2_a714, i32* %r0.global-to-local, align 4
  store i32 %v2_a714, i32* @r4, align 4
  %v9_a774 = icmp eq i32 %tmp32, %storemerge25
  %v4_a798 = zext i8 %storemerge to i32
  %v4_a79c = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_a774 to i32
  %v9_a788 = icmp eq i1 %v9_a774, false
  %v4_a7a4 = mul nuw nsw i32 %v4_a79c, 256
  %v5_a7a4 = or i32 %v4_a7a4, %v4_a798
  %v9_a7a8 = icmp eq i32 %v5_a7a4, %v5_a7a0
  br label %dec_label_pc_a730

dec_label_pc_a720:                                ; preds = %.thread23, %dec_label_pc_a790, %dec_label_pc_a7c0, %bb75
  %v2_a720 = call i32 @function_11844(i32* null)
  %v0_a724 = load i32, i32* @r4, align 4
  %v2_a724 = sub i32 %v2_a720, %v0_a724
  store i32 %v2_a724, i32* %r0.global-to-local, align 4
  %v7_a728 = icmp eq i32 %v2_a724, 10
  store i1 %v7_a728, i1* %cpsr_z.global-to-local, align 1
  %v8_a72c = icmp sgt i32 %v2_a724, 10
  br i1 %v8_a72c, label %dec_label_pc_a7d4, label %dec_label_pc_a730

dec_label_pc_a730:                                ; preds = %dec_label_pc_a720, %dec_label_pc_a700
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_a73c, i32* %lr.global-to-local, align 4
  store i32 %v2_a740, i32* %ip.global-to-local, align 4
  store i32 %v2_a744, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v7_a758 = call i32 @function_11dc8(i32 %v3_a584, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_a73c, i32 %v2_a740)
  store i32 %v7_a758, i32* %r2.global-to-local, align 4
  %v7_a760 = icmp eq i32 %v7_a758, -1
  store i1 %v7_a760, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_a760, label %dec_label_pc_a7e8, label %dec_label_pc_a76c

dec_label_pc_a76c:                                ; preds = %dec_label_pc_a730
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_a780 = icmp eq i32 %v7_a758, 40
  store i1 %v7_a780, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_a758, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_a76c
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a720

bb75:                                             ; preds = %dec_label_pc_a76c
  store i1 %v9_a788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a788, label %dec_label_pc_a720, label %dec_label_pc_a790

dec_label_pc_a790:                                ; preds = %bb75
  store i32 %v4_a794, i32* %r1.global-to-local, align 4
  store i32 %v4_a798, i32* %ip.global-to-local, align 4
  store i32 %v4_a79c, i32* %r2.global-to-local, align 4
  store i32 %v5_a7a0, i32* %r3.global-to-local, align 4
  store i32 %v5_a7a4, i32* @r5, align 4
  store i1 %v9_a7a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a7a8, label %dec_label_pc_a7b0, label %dec_label_pc_a720

dec_label_pc_a7b0:                                ; preds = %dec_label_pc_a790
  store i32 %v4_a7b0, i32* %r2.global-to-local, align 4
  store i32 %v1_a7b4, i32* %r3.global-to-local, align 4
  store i1 %v2_a7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a7b8, label %dec_label_pc_a804, label %dec_label_pc_a7c0

dec_label_pc_a7c0:                                ; preds = %dec_label_pc_a7b0
  store i1 %v2_a7c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a7c0, label %dec_label_pc_a720, label %dec_label_pc_a7c8

dec_label_pc_a7c8:                                ; preds = %dec_label_pc_a7c0
  %v0_a7c8 = load i32, i32* @r7, align 4
  store i32 %v0_a7c8, i32* %r0.global-to-local, align 4
  %v1_a7cc = call i32 @function_11574(i32 %v0_a7c8)
  store i32 %v1_a7cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a5f0

dec_label_pc_a7d4:                                ; preds = %dec_label_pc_a720
  %v0_a7d4 = load i32, i32* @r7, align 4
  store i32 %v0_a7d4, i32* %r0.global-to-local, align 4
  %v1_a7d8 = call i32 @function_11574(i32 %v0_a7d4)
  store i32 %v1_a7d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a600

dec_label_pc_a7e0:                                ; preds = %dec_label_pc_a59c
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v1_a7e4 = call i32 @function_11574(i32 %v3_a584)
  store i32 %v1_a7e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a7e8

dec_label_pc_a7e8:                                ; preds = %dec_label_pc_a730, %dec_label_pc_a3b4, %dec_label_pc_a7e0
  %v29_a7ec = phi i32 [ %v3_a584, %dec_label_pc_a3b4 ], [ %v1_a7e4, %dec_label_pc_a7e0 ], [ 0, %dec_label_pc_a730 ]
  ret i32 %v29_a7ec

dec_label_pc_a7f0:                                ; preds = %dec_label_pc_a6d0
  %v0_a7f0 = call i32 @function_e958()
  %v1_a7f0 = trunc i32 %v0_a7f0 to i8
  store i32 %v0_a7f0, i32* %r0.global-to-local, align 4
  %v4_a7f4 = sdiv i32 %v0_a7f0, 256
  store i32 %v4_a7f4, i32* %r3.global-to-local, align 4
  %v1_a7f8 = trunc i32 %v4_a7f4 to i8
  br label %dec_label_pc_a700

dec_label_pc_a804:                                ; preds = %dec_label_pc_a7b0
  %v3_a804 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a804, i32* @r4, align 4
  store i32 %v2_a3d4, i32* %r2.global-to-local, align 4
  %v3_a80c = mul i32 %v3_a804, 16
  store i32 %v3_a80c, i32* %ip.global-to-local, align 4
  %v3_a810 = add i32 %v3_a80c, %v2_a3d4
  %v4_a810 = inttoptr i32 %v3_a810 to i32*
  store i32 %storemerge25, i32* %v4_a810, align 4
  %v0_a814 = load i32, i32* @r6, align 4
  %v1_a814 = add i32 %v0_a814, 4
  %v2_a814 = inttoptr i32 %v1_a814 to i32*
  %v3_a814 = load i32, i32* %v2_a814, align 4
  store i32 %v3_a814, i32* %r0.global-to-local, align 4
  %v1_a81c = and i32 %v3_a814, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_a81c, i32* %r1.global-to-local, align 4
  store i32 %v2_a3d4, i32* %lr.global-to-local, align 4
  %v3_a824 = mul i32 %v3_a814, 16777216
  %v1_a818 = udiv i32 %v3_a814, 256
  %v3_a828 = and i32 %v1_a818, 65280
  %v4_a82c = mul i32 %v1_a81c, 256
  %v5_a82c = or i32 %v4_a82c, %v3_a824
  store i32 %v5_a82c, i32* %r2.global-to-local, align 4
  %v4_a830 = udiv i32 %v3_a814, 16777216
  %v5_a830 = or i32 %v3_a828, %v4_a830
  %v1_a834 = load i32, i32* %ip.global-to-local, align 4
  %v2_a834 = add i32 %v1_a834, %v2_a3d4
  store i32 %v2_a834, i32* %ip.global-to-local, align 4
  %v2_a838 = or i32 %v5_a830, %v5_a82c
  store i32 %v2_a838, i32* %r3.global-to-local, align 4
  %v2_a83c = add i32 %v2_a834, 4
  %v3_a83c = inttoptr i32 %v2_a83c to i32*
  store i32 %v2_a838, i32* %v3_a83c, align 4
  %v0_a840 = load i32, i32* @r6, align 4
  %v1_a840 = add i32 %v0_a840, 8
  %v2_a840 = inttoptr i32 %v1_a840 to i32*
  %v3_a840 = load i32, i32* %v2_a840, align 4
  store i32 %v3_a840, i32* %r0.global-to-local, align 4
  %v1_a848 = and i32 %v3_a840, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_a848, i32* %r1.global-to-local, align 4
  %v3_a84c = mul i32 %v3_a840, 16777216
  %v1_a844 = udiv i32 %v3_a840, 256
  %v3_a850 = and i32 %v1_a844, 65280
  %v4_a854 = mul i32 %v1_a848, 256
  %v5_a854 = or i32 %v4_a854, %v3_a84c
  store i32 %v5_a854, i32* %r2.global-to-local, align 4
  %v4_a858 = udiv i32 %v3_a840, 16777216
  %v5_a858 = or i32 %v3_a850, %v4_a858
  %v2_a85c = or i32 %v5_a858, %v5_a854
  store i32 %v2_a85c, i32* %r3.global-to-local, align 4
  %v1_a860 = load i32, i32* %ip.global-to-local, align 4
  %v2_a860 = add i32 %v1_a860, 8
  %v3_a860 = inttoptr i32 %v2_a860 to i32*
  store i32 %v2_a85c, i32* %v3_a860, align 4
  %v0_a864 = load i32, i32* @r6, align 4
  %v1_a864 = inttoptr i32 %v0_a864 to i32*
  %v2_a864 = load i32, i32* %v1_a864, align 4
  %v3_a868 = udiv i32 %v2_a864, 65536
  store i32 %v3_a868, i32* %r2.global-to-local, align 4
  %v3_a86c3 = udiv i32 %v2_a864, 16777216
  store i32 %v3_a86c3, i32* %r1.global-to-local, align 4
  %v0_a870 = load i32, i32* @r5, align 4
  %v3_a870 = sdiv i32 %v0_a870, 256
  store i32 %v3_a870, i32* %r3.global-to-local, align 4
  %v1_a874 = trunc i32 %v3_a870 to i8
  %v2_a874 = load i32, i32* %ip.global-to-local, align 4
  %v3_a874 = add i32 %v2_a874, 15
  %v4_a874 = inttoptr i32 %v3_a874 to i8*
  store i8 %v1_a874, i8* %v4_a874, align 1
  %v0_a878 = load i32, i32* %r1.global-to-local, align 4
  %v1_a878 = trunc i32 %v0_a878 to i8
  %v2_a878 = load i32, i32* %ip.global-to-local, align 4
  %v3_a878 = add i32 %v2_a878, 13
  %v4_a878 = inttoptr i32 %v3_a878 to i8*
  store i8 %v1_a878, i8* %v4_a878, align 1
  %v0_a87c = load i32, i32* %r2.global-to-local, align 4
  %v1_a87c = trunc i32 %v0_a87c to i8
  %v2_a87c = load i32, i32* %ip.global-to-local, align 4
  %v3_a87c = add i32 %v2_a87c, 12
  %v4_a87c = inttoptr i32 %v3_a87c to i8*
  store i8 %v1_a87c, i8* %v4_a87c, align 1
  %v0_a880 = load i32, i32* @r5, align 4
  %v1_a880 = trunc i32 %v0_a880 to i8
  %v2_a880 = load i32, i32* %ip.global-to-local, align 4
  %v3_a880 = add i32 %v2_a880, 14
  %v4_a880 = inttoptr i32 %v3_a880 to i8*
  store i8 %v1_a880, i8* %v4_a880, align 1
  %v0_a884 = load i32, i32* @sl, align 4
  store i32 %v0_a884, i32* %r0.global-to-local, align 4
  %v1_a888 = call i32 @function_12024(i32 %v0_a884)
  store i32 %v1_a888, i32* %r0.global-to-local, align 4
  store i32 %v2_a3e4, i32* %r1.global-to-local, align 4
  %v3_a890 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a890, i32* %r2.global-to-local, align 4
  %v2_a894 = load i32, i32* @r4, align 4
  %v5_a894 = mul i32 %v2_a894, 4
  %v6_a894 = add i32 %v5_a894, %v2_a3e4
  %v7_a894 = inttoptr i32 %v6_a894 to i32*
  store i32 %v1_a888, i32* %v7_a894, align 4
  %v0_a898 = load i32, i32* %r1.global-to-local, align 4
  %v1_a898 = load i32, i32* %r2.global-to-local, align 4
  %v4_a898 = mul i32 %v1_a898, 4
  %v5_a898 = add i32 %v4_a898, %v0_a898
  %v6_a898 = inttoptr i32 %v5_a898 to i32*
  %v7_a898 = load i32, i32* %v6_a898, align 4
  store i32 %v7_a898, i32* @r4, align 4
  %v1_a89c = inttoptr i32 %v7_a898 to i8*
  %v2_a89c = load i8, i8* %v1_a89c, align 1
  %tmp100 = urem i8 %v2_a89c, 16
  %v1_a8a0 = zext i8 %tmp100 to i32
  %v1_a8a4 = or i32 %v1_a8a0, 64
  store i32 %v1_a8a4, i32* %r3.global-to-local, align 4
  %v1_a8a8 = trunc i32 %v1_a8a4 to i8
  store i8 %v1_a8a8, i8* %v1_a89c, align 1
  %v0_a8ac = load i32, i32* @r4, align 4
  %v1_a8ac = inttoptr i32 %v0_a8ac to i8*
  %v2_a8ac = load i8, i8* %v1_a8ac, align 1
  store i32 %v3_a5cc, i32* %ip.global-to-local, align 4
  %v1_a8b8 = and i8 %v2_a8ac, -16
  %v1_a8c0 = or i8 %v1_a8b8, 5
  store i32 %v5_a8c4, i32* %r0.global-to-local, align 4
  %v0_a8c8 = load i32, i32* @sl, align 4
  %v3_a8c8 = mul i32 %v0_a8c8, 65536
  store i32 %v3_a8c8, i32* %r2.global-to-local, align 4
  store i32 %v1_a464, i32* %lr.global-to-local, align 4
  store i8 %v1_a8c0, i8* %v1_a8ac, align 1
  store i32 %v5_a420, i32* %r1.global-to-local, align 4
  %v0_a8d8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a8d8 = udiv i32 %v0_a8d8, 65536
  %v1_a8dc = urem i32 %v3_a8d8, 256
  store i32 %v1_a8dc, i32* %r3.global-to-local, align 4
  %v3_a8e0 = udiv i32 %v0_a8d8, 16777216
  store i32 %v3_a8e0, i32* %r2.global-to-local, align 4
  %v2_a8e4 = load i32, i32* @r4, align 4
  %v3_a8e4 = add i32 %v2_a8e4, 1
  %v4_a8e4 = inttoptr i32 %v3_a8e4 to i8*
  store i8 %v1_a8e4, i8* %v4_a8e4, align 1
  %v0_a8e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a8e8 = load i32, i32* %r3.global-to-local, align 4
  %v4_a8e8 = mul i32 %v1_a8e8, 256
  %v5_a8e8 = or i32 %v4_a8e8, %v0_a8e8
  store i32 %v5_a8e8, i32* %r2.global-to-local, align 4
  %v1_a8ec = trunc i32 %v0_a8e8 to i8
  %v2_a8ec = load i32, i32* @r4, align 4
  %v3_a8ec = add i32 %v2_a8ec, 2
  %v4_a8ec = inttoptr i32 %v3_a8ec to i8*
  store i8 %v1_a8ec, i8* %v4_a8ec, align 1
  %v0_a8f0 = load i32, i32* %lr.global-to-local, align 4
  %v2_a8f0 = icmp eq i32 %v0_a8f0, 0
  store i1 %v2_a8f0, i1* %cpsr_z.global-to-local, align 1
  %v0_a8f4 = load i32, i32* %r2.global-to-local, align 4
  %v3_a8f4 = sdiv i32 %v0_a8f4, 256
  store i32 %v3_a8f4, i32* %r3.global-to-local, align 4
  store i32 %v5_a458, i32* %r2.global-to-local, align 4
  %v1_a8fc = trunc i32 %v3_a8f4 to i8
  %v2_a8fc = load i32, i32* @r4, align 4
  %v3_a8fc = add i32 %v2_a8fc, 3
  %v4_a8fc = inttoptr i32 %v3_a8fc to i8*
  store i8 %v1_a8fc, i8* %v4_a8fc, align 1
  %v0_a900 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a900, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_a804
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_a804, %bb76
  %v0_a904 = load i32, i32* %r2.global-to-local, align 4
  %v1_a904 = trunc i32 %v0_a904 to i8
  %v2_a904 = load i32, i32* @r4, align 4
  %v3_a904 = add i32 %v2_a904, 8
  %v4_a904 = inttoptr i32 %v3_a904 to i8*
  store i8 %v1_a904, i8* %v4_a904, align 1
  %v0_a908 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a908, label %.thread5, label %bb78

bb78:                                             ; preds = %bb77
  %v1_a908 = load i32, i32* %r3.global-to-local, align 4
  %v2_a908 = trunc i32 %v1_a908 to i8
  %v3_a908 = load i32, i32* @r4, align 4
  %v4_a908 = add i32 %v3_a908, 6
  %v5_a908 = inttoptr i32 %v4_a908 to i8*
  store i8 %v2_a908, i8* %v5_a908, align 1
  %v0_a90c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a90c.pr, label %.thread5, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_a914 = load i32, i32* @r4, align 4
  %v3_a914 = add i32 %v2_a914, 9
  %v4_a914 = inttoptr i32 %v3_a914 to i8*
  store i8 6, i8* %v4_a914, align 1
  %v0_a918 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a918, label %bb81, label %bb80

bb80:                                             ; preds = %.thread5
  %v1_a918 = load i32, i32* %r2.global-to-local, align 4
  %v2_a918 = trunc i32 %v1_a918 to i8
  %v3_a918 = load i32, i32* @r4, align 4
  %v4_a918 = add i32 %v3_a918, 7
  %v5_a918 = inttoptr i32 %v4_a918 to i8*
  store i8 %v2_a918, i8* %v5_a918, align 1
  br label %bb81

bb81:                                             ; preds = %.thread5, %bb80
  %v2_a920 = load i32, i32* @global_var_1c5dc.51, align 4
  store i32 %v2_a920, i32* %r3.global-to-local, align 4
  %v0_a924 = load i32, i32* %r0.global-to-local, align 4
  %v3_a924 = sdiv i32 %v0_a924, 256
  store i32 %v3_a924, i32* %ip.global-to-local, align 4
  %v1_a928 = load i32, i32* @r4, align 4
  %v2_a928 = add i32 %v1_a928, 12
  %v3_a928 = inttoptr i32 %v2_a928 to i32*
  store i32 %v2_a920, i32* %v3_a928, align 4
  %v0_a92c = load i32, i32* %ip.global-to-local, align 4
  %v1_a92c = trunc i32 %v0_a92c to i8
  %v2_a92c = load i32, i32* @r4, align 4
  %v3_a92c = add i32 %v2_a92c, 5
  %v4_a92c = inttoptr i32 %v3_a92c to i8*
  store i8 %v1_a92c, i8* %v4_a92c, align 1
  %v3_a930 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a930, i32* %r2.global-to-local, align 4
  store i32 %v2_a3d4, i32* %ip.global-to-local, align 4
  %v4_a938 = mul i32 %v3_a930, 16
  %v5_a938 = add i32 %v4_a938, %v2_a3d4
  %v6_a938 = inttoptr i32 %v5_a938 to i32*
  %v7_a938 = load i32, i32* %v6_a938, align 4
  store i32 %v7_a938, i32* %r3.global-to-local, align 4
  %v0_a93c = load i32, i32* %r0.global-to-local, align 4
  %v1_a93c = trunc i32 %v0_a93c to i8
  %v2_a93c = load i32, i32* @r4, align 4
  %v3_a93c = add i32 %v2_a93c, 4
  %v4_a93c = inttoptr i32 %v3_a93c to i8*
  store i8 %v1_a93c, i8* %v4_a93c, align 1
  %v0_a940 = load i32, i32* %r3.global-to-local, align 4
  %v1_a940 = load i32, i32* @r4, align 4
  %v2_a940 = add i32 %v1_a940, 16
  %v3_a940 = inttoptr i32 %v2_a940 to i32*
  store i32 %v0_a940, i32* %v3_a940, align 4
  %v0_a944 = load i32, i32* %r2.global-to-local, align 4
  %v3_a944 = mul i32 %v0_a944, 16
  %v1_a948 = load i32, i32* %ip.global-to-local, align 4
  %v2_a948 = add i32 %v1_a948, %v3_a944
  store i32 %v2_a948, i32* %r2.global-to-local, align 4
  %v1_a94c = add i32 %v2_a948, 13
  %v2_a94c = inttoptr i32 %v1_a94c to i8*
  %v3_a94c = load i8, i8* %v2_a94c, align 1
  %v4_a94c = zext i8 %v3_a94c to i32
  store i32 %v4_a94c, i32* %r1.global-to-local, align 4
  %v1_a950 = add i32 %v2_a948, 12
  %v2_a950 = inttoptr i32 %v1_a950 to i8*
  %v3_a950 = load i8, i8* %v2_a950, align 1
  %v4_a950 = zext i8 %v3_a950 to i32
  %v4_a954 = mul nuw nsw i32 %v4_a94c, 256
  %v5_a954 = or i32 %v4_a950, %v4_a954
  store i32 %v5_a954, i32* %r3.global-to-local, align 4
  %v2_a958 = load i32, i32* @r4, align 4
  %v3_a958 = add i32 %v2_a958, 20
  %v4_a958 = inttoptr i32 %v3_a958 to i8*
  store i8 %v3_a950, i8* %v4_a958, align 1
  %v0_a95c = load i32, i32* @r4, align 4
  %v1_a95c = add i32 %v0_a95c, 20
  store i32 %v1_a95c, i32* @r6, align 4
  %v0_a960 = load i32, i32* %r3.global-to-local, align 4
  %v3_a960 = sdiv i32 %v0_a960, 256
  store i32 %v3_a960, i32* %r3.global-to-local, align 4
  %v1_a964 = trunc i32 %v3_a960 to i8
  %v3_a964 = add i32 %v0_a95c, 21
  %v4_a964 = inttoptr i32 %v3_a964 to i8*
  store i8 %v1_a964, i8* %v4_a964, align 1
  %v0_a968 = load i32, i32* @r6, align 4
  %v1_a968 = add i32 %v0_a968, 13
  %v2_a968 = inttoptr i32 %v1_a968 to i8*
  %v3_a968 = load i8, i8* %v2_a968, align 1
  %v4_a968 = zext i8 %v3_a968 to i32
  store i32 %v4_a968, i32* %r3.global-to-local, align 4
  %v0_a96c = load i32, i32* %r2.global-to-local, align 4
  %v1_a96c = add i32 %v0_a96c, 8
  %v2_a96c = inttoptr i32 %v1_a96c to i32*
  %v3_a96c = load i32, i32* %v2_a96c, align 4
  store i32 %v3_a96c, i32* %r1.global-to-local, align 4
  %v1_a970 = or i32 %v4_a968, 1
  store i32 %v1_a970, i32* %r3.global-to-local, align 4
  %v1_a974 = add i32 %v0_a96c, 15
  %v2_a974 = inttoptr i32 %v1_a974 to i8*
  %v3_a974 = load i8, i8* %v2_a974, align 1
  %v4_a974 = zext i8 %v3_a974 to i32
  store i32 %v4_a974, i32* %ip.global-to-local, align 4
  %v1_a978 = add i32 %v0_a96c, 14
  %v2_a978 = inttoptr i32 %v1_a978 to i8*
  %v3_a978 = load i8, i8* %v2_a978, align 1
  %v4_a978 = zext i8 %v3_a978 to i32
  store i32 %v4_a978, i32* %r0.global-to-local, align 4
  %v2_a97c = add i32 %v0_a968, 4
  %v3_a97c = inttoptr i32 %v2_a97c to i32*
  store i32 %v3_a96c, i32* %v3_a97c, align 4
  %v0_a980 = load i32, i32* %r2.global-to-local, align 4
  %v1_a980 = add i32 %v0_a980, 4
  %v2_a980 = inttoptr i32 %v1_a980 to i32*
  %v3_a980 = load i32, i32* %v2_a980, align 4
  store i32 %v3_a980, i32* %lr.global-to-local, align 4
  %v0_a984 = load i32, i32* %r3.global-to-local, align 4
  %v1_a984 = trunc i32 %v0_a984 to i8
  %v2_a984 = load i32, i32* @r6, align 4
  %v3_a984 = add i32 %v2_a984, 13
  %v4_a984 = inttoptr i32 %v3_a984 to i8*
  store i8 %v1_a984, i8* %v4_a984, align 1
  %v0_a988 = load i32, i32* @r6, align 4
  %v1_a988 = add i32 %v0_a988, 12
  %v2_a988 = inttoptr i32 %v1_a988 to i8*
  %v3_a988 = load i8, i8* %v2_a988, align 1
  %v4_a988 = zext i8 %v3_a988 to i32
  store i32 %v4_a988, i32* %r2.global-to-local, align 4
  %v1_a98c = add i32 %v0_a988, 13
  %v2_a98c = inttoptr i32 %v1_a98c to i8*
  %v3_a98c = load i8, i8* %v2_a98c, align 1
  %v4_a98c = zext i8 %v3_a98c to i32
  %v0_a990 = load i32, i32* %r0.global-to-local, align 4
  %v1_a990 = load i32, i32* %ip.global-to-local, align 4
  %v4_a990 = mul i32 %v1_a990, 256
  %v5_a990 = or i32 %v4_a990, %v0_a990
  store i32 %v5_a990, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_a988, 16
  %v1_a994 = zext i8 %tmp101 to i32
  %v3_a998 = sdiv i32 %v5_a990, 256
  store i32 %v3_a998, i32* %r1.global-to-local, align 4
  %v1_a99c = or i32 %v1_a994, 128
  store i32 %v1_a99c, i32* %r2.global-to-local, align 4
  %v1_a9a0 = or i32 %v4_a98c, 16
  store i32 %v1_a9a0, i32* %r3.global-to-local, align 4
  %v1_a9a4 = trunc i32 %v3_a998 to i8
  %v3_a9a4 = add i32 %v0_a988, 3
  %v4_a9a4 = inttoptr i32 %v3_a9a4 to i8*
  store i8 %v1_a9a4, i8* %v4_a9a4, align 1
  %v0_a9a8 = load i32, i32* %lr.global-to-local, align 4
  %v1_a9a8 = load i32, i32* @r6, align 4
  %v2_a9a8 = add i32 %v1_a9a8, 8
  %v3_a9a8 = inttoptr i32 %v2_a9a8 to i32*
  store i32 %v0_a9a8, i32* %v3_a9a8, align 4
  %v0_a9ac = load i32, i32* %r2.global-to-local, align 4
  %v1_a9ac = trunc i32 %v0_a9ac to i8
  %v2_a9ac = load i32, i32* @r6, align 4
  %v3_a9ac = add i32 %v2_a9ac, 12
  %v4_a9ac = inttoptr i32 %v3_a9ac to i8*
  store i8 %v1_a9ac, i8* %v4_a9ac, align 1
  %v0_a9b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a9b0 = trunc i32 %v0_a9b0 to i8
  %v2_a9b0 = load i32, i32* @r6, align 4
  %v3_a9b0 = add i32 %v2_a9b0, 13
  %v4_a9b0 = inttoptr i32 %v3_a9b0 to i8*
  store i8 %v1_a9b0, i8* %v4_a9b0, align 1
  %v0_a9b4 = load i32, i32* %r0.global-to-local, align 4
  %v1_a9b4 = trunc i32 %v0_a9b4 to i8
  %v2_a9b4 = load i32, i32* @r6, align 4
  %v3_a9b4 = add i32 %v2_a9b4, 2
  %v4_a9b4 = inttoptr i32 %v3_a9b4 to i8*
  store i8 %v1_a9b4, i8* %v4_a9b4, align 1
  %v0_a9b8 = call i32 @function_e958()
  %v1_a9b8 = trunc i32 %v0_a9b8 to i8
  store i32 %v0_a9b8, i32* %r0.global-to-local, align 4
  store i32 %v1_a49c, i32* %lr.global-to-local, align 4
  %v0_a9c0 = load i32, i32* @r6, align 4
  %v1_a9c0 = add i32 %v0_a9c0, 13
  %v2_a9c0 = inttoptr i32 %v1_a9c0 to i8*
  %v3_a9c0 = load i8, i8* %v2_a9c0, align 1
  %v4_a9c0 = zext i8 %v3_a9c0 to i32
  store i32 %v1_a9c4, i32* %r2.global-to-local, align 4
  %v1_a9c8 = and i32 %v4_a9c0, 223
  %v5_a9cc = or i32 %v1_a9c8, %v4_a9cc
  store i32 %v5_a9cc, i32* %r3.global-to-local, align 4
  %v1_a9d0 = trunc i32 %v5_a9cc to i8
  store i8 %v1_a9d0, i8* %v2_a9c0, align 1
  store i32 %v1_a4bc, i32* %r1.global-to-local, align 4
  %v0_a9d8 = load i32, i32* @r6, align 4
  %v1_a9d8 = add i32 %v0_a9d8, 13
  %v2_a9d8 = inttoptr i32 %v1_a9d8 to i8*
  %v3_a9d8 = load i8, i8* %v2_a9d8, align 1
  %v4_a9d8 = zext i8 %v3_a9d8 to i32
  store i32 %v1_a9dc, i32* %r3.global-to-local, align 4
  %v1_a9e0 = and i32 %v4_a9d8, 239
  %v5_a9e4 = or i32 %v1_a9e0, %v4_a9e4
  store i32 %v5_a9e4, i32* %r2.global-to-local, align 4
  %v1_a9e8 = trunc i32 %v5_a9e4 to i8
  store i8 %v1_a9e8, i8* %v2_a9d8, align 1
  store i32 %v1_a4dc, i32* %ip.global-to-local, align 4
  %v0_a9f0 = load i32, i32* @r6, align 4
  %v1_a9f0 = add i32 %v0_a9f0, 13
  %v2_a9f0 = inttoptr i32 %v1_a9f0 to i8*
  %v3_a9f0 = load i8, i8* %v2_a9f0, align 1
  %v4_a9f0 = zext i8 %v3_a9f0 to i32
  store i32 %v1_a9f4, i32* %r2.global-to-local, align 4
  %v1_a9f8 = and i32 %v4_a9f0, 247
  %v5_a9fc = or i32 %v1_a9f8, %v4_a9fc
  store i32 %v5_a9fc, i32* %r3.global-to-local, align 4
  %v1_aa00 = trunc i32 %v5_a9fc to i8
  store i8 %v1_aa00, i8* %v2_a9f0, align 1
  %v0_aa08 = load i32, i32* @r6, align 4
  %v1_aa08 = add i32 %v0_aa08, 13
  %v2_aa08 = inttoptr i32 %v1_aa08 to i8*
  %v3_aa08 = load i8, i8* %v2_aa08, align 1
  %v4_aa08 = zext i8 %v3_aa08 to i32
  store i32 %v1_aa0c, i32* %r3.global-to-local, align 4
  %v1_aa10 = and i32 %v4_aa08, 251
  %v5_aa14 = or i32 %v1_aa10, %v4_aa14
  store i32 %v5_aa14, i32* %r2.global-to-local, align 4
  %v1_aa18 = trunc i32 %v5_aa14 to i8
  store i8 %v1_aa18, i8* %v2_aa08, align 1
  store i32 %v1_a51c, i32* %r1.global-to-local, align 4
  %v0_aa20 = load i32, i32* @r6, align 4
  %v1_aa20 = add i32 %v0_aa20, 13
  %v2_aa20 = inttoptr i32 %v1_aa20 to i8*
  %v3_aa20 = load i8, i8* %v2_aa20, align 1
  %v4_aa20 = zext i8 %v3_aa20 to i32
  store i32 %v1_aa24, i32* %r2.global-to-local, align 4
  %v1_aa28 = and i32 %v4_aa20, 253
  %v4_aa2c = or i32 %v1_aa28, %v3_aa2c
  store i32 %v4_aa2c, i32* %r3.global-to-local, align 4
  %v1_aa30 = trunc i32 %v4_aa2c to i8
  store i8 %v1_aa30, i8* %v2_aa20, align 1
  %v0_aa34 = load i32, i32* @r6, align 4
  %v1_aa34 = add i32 %v0_aa34, 13
  %v2_aa34 = inttoptr i32 %v1_aa34 to i8*
  %v3_aa34 = load i8, i8* %v2_aa34, align 1
  %v4_aa34 = zext i8 %v3_aa34 to i32
  %v0_aa38 = load i32, i32* @r8, align 4
  %v1_aa38 = urem i32 %v0_aa38, 2
  %v1_aa3c = and i32 %v4_aa34, 254
  store i32 %v1_aa3c, i32* %r2.global-to-local, align 4
  %v4_aa4027 = udiv i32 %v0_a9b8, 256
  %v2_aa44 = or i32 %v1_aa3c, %v1_aa38
  store i32 %v2_aa44, i32* %r3.global-to-local, align 4
  %v1_aa48 = trunc i32 %v4_aa4027 to i8
  %v3_aa48 = add i32 %v0_aa34, 15
  %v4_aa48 = inttoptr i32 %v3_aa48 to i8*
  store i8 %v1_aa48, i8* %v4_aa48, align 1
  %v3_aa4c = load i32, i32* @r6, align 4
  %v4_aa4c = add i32 %v3_aa4c, 14
  %v5_aa4c = inttoptr i32 %v4_aa4c to i8*
  store i8 %v1_a9b8, i8* %v5_aa4c, align 1
  %v0_aa50 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa50 = trunc i32 %v0_aa50 to i8
  %v2_aa50 = load i32, i32* @r6, align 4
  %v3_aa50 = add i32 %v2_aa50, 13
  %v4_aa50 = inttoptr i32 %v3_aa50 to i8*
  store i8 %v1_aa50, i8* %v4_aa50, align 1
  %v0_aa54 = load i32, i32* @r4, align 4
  %v1_aa54 = add i32 %v0_aa54, 40
  store i32 %v1_aa54, i32* %r0.global-to-local, align 4
  %v0_aa58 = load i32, i32* @sb, align 4
  store i32 %v0_aa58, i32* @r1, align 4
  %v1_aa5c = inttoptr i32 %v1_aa54 to i8*
  %v2_aa5c = call i32 @function_ead8(i8* %v1_aa5c)
  store i32 %v2_aa5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aa60

dec_label_pc_aa60:                                ; preds = %dec_label_pc_a600, %bb81
  %v3_aa60 = load i32, i32* %stack_var_-40, align 4
  %v1_aa64 = add i32 %v3_aa60, 1
  store i32 %v1_aa64, i32* %r3.global-to-local, align 4
  %v1_aa68 = load i32, i32* @fp, align 4
  %v9_aa68 = icmp eq i32 %v1_aa64, %v1_aa68
  store i1 %v9_aa68, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aa64, i32* %stack_var_-40, align 4
  %v5_aa70 = icmp slt i32 %v1_aa64, %v1_aa68
  br i1 %v5_aa70, label %dec_label_pc_a5f0, label %dec_label_pc_aa74

dec_label_pc_aa74:                                ; preds = %dec_label_pc_aa60, %.thread18
  %v0_aa7c12 = phi i32 [ %v0_a5c4, %.thread18 ], [ %v1_aa68, %dec_label_pc_aa60 ]
  %v0_aa74 = load i32, i32* @sb, align 4
  %v1_aa74 = add i32 %v0_aa74, 40
  store i32 %v1_aa74, i32* @sl, align 4
  %v1_aa78 = add i32 %v0_aa74, 20
  store i32 %v1_aa78, i32* @r7, align 4
  %v2_aac8 = icmp eq i32 %v1_a574, 0
  %v6_aaa8 = inttoptr i32 %v2_a3e4 to i32*
  %v3_aab0 = icmp eq i32 %v3_a5cc, 65535
  br label %dec_label_pc_aa7c

dec_label_pc_aa7c:                                ; preds = %dec_label_pc_aad8, %dec_label_pc_aa74
  %v0_aa7c = phi i32 [ %v1_abb8, %dec_label_pc_aad8 ], [ %v0_aa7c12, %dec_label_pc_aa74 ]
  %v2_aa7c = icmp eq i32 %v0_aa7c, 0
  store i1 %v2_aa7c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_aa7c, 1
  br label %dec_label_pc_aa84

dec_label_pc_aa84:                                ; preds = %dec_label_pc_aa84, %dec_label_pc_aa7c
  br i1 %tmp82, label %dec_label_pc_aa84, label %dec_label_pc_aa88

dec_label_pc_aa88:                                ; preds = %dec_label_pc_aa84
  %v0_aa88 = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_aa88, 256
  %v1_aa90 = and i32 %tmp83, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp84 = udiv i32 %v0_aa88, 256
  %v4_aa94 = urem i32 %tmp84, 256
  %v5_aa94 = or i32 %v4_aa94, %v1_aa90
  store i32 %v5_aa94, i32* @r8, align 4
  store i32 %v2_a3e4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_a5cc, i32* %ip.global-to-local, align 4
  %v7_aaa8 = load i32, i32* %v6_aaa8, align 4
  store i32 %v7_aaa8, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_aab0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_aabc = add i32 %v7_aaa8, 20
  store i32 %v1_aabc, i32* @r5, align 4
  br i1 %v3_aab0, label %dec_label_pc_abe4, label %dec_label_pc_aac4

dec_label_pc_aac4:                                ; preds = %dec_label_pc_abc4, %dec_label_pc_aa88
  %v0_aacc = phi i32 [ %v7_abd0, %dec_label_pc_abc4 ], [ %v7_aaa8, %dec_label_pc_aa88 ]
  store i32 %v1_a574, i32* %lr.global-to-local, align 4
  store i1 %v2_aac8, i1* %cpsr_z.global-to-local, align 1
  %v1_aacc = add i32 %v0_aacc, 40
  store i32 %v1_aacc, i32* %r0.global-to-local, align 4
  %v0_aad0 = load i32, i32* @sb, align 4
  store i32 %v0_aad0, i32* @r1, align 4
  br i1 %v2_aac8, label %dec_label_pc_aad8, label %dec_label_pc_ac08

dec_label_pc_aad8:                                ; preds = %dec_label_pc_aac4, %dec_label_pc_abe4, %dec_label_pc_ac08
  %v2_aad8 = phi i32 [ %v0_aacc, %dec_label_pc_aac4 ], [ %v0_abfc, %dec_label_pc_abe4 ], [ %v2_aad8.pre, %dec_label_pc_ac08 ]
  %v0_aad8 = load i32, i32* @r6, align 4
  %v1_aad8 = trunc i32 %v0_aad8 to i8
  %v3_aad8 = add i32 %v2_aad8, 10
  %v4_aad8 = inttoptr i32 %v3_aad8 to i8*
  store i8 %v1_aad8, i8* %v4_aad8, align 1
  %v0_aadc = load i32, i32* @r6, align 4
  %v1_aadc = trunc i32 %v0_aadc to i8
  %v2_aadc = load i32, i32* @r4, align 4
  %v3_aadc = add i32 %v2_aadc, 11
  %v4_aadc = inttoptr i32 %v3_aadc to i8*
  store i8 %v1_aadc, i8* %v4_aadc, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_aae4 = load i32, i32* @r4, align 4
  store i32 %v0_aae4, i32* @r0, align 4
  %v2_aae8 = call i32 @function_d0b8(i32 %v0_aae4, i32 20)
  %v3_aae8 = trunc i32 %v2_aae8 to i8
  store i32 %v2_aae8, i32* %r0.global-to-local, align 4
  %v3_aaec = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_a3d4, i32* %r2.global-to-local, align 4
  %v3_aaf4 = mul i32 %v3_aaec, 16
  %v2_aaf8 = add i32 %v3_aaf4, %v2_a3d4
  store i32 %v2_aaf8, i32* %r1.global-to-local, align 4
  %v1_aafc = add i32 %v2_aaf8, 4
  %v2_aafc = inttoptr i32 %v1_aafc to i32*
  %v3_aafc = load i32, i32* %v2_aafc, align 4
  %v3_ab00 = mul i32 %v3_aafc, 65536
  store i32 %v3_ab00, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_aafc, 256
  %v1_ab08 = and i32 %tmp85, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp86 = udiv i32 %v3_aafc, 256
  %v4_ab0c = urem i32 %tmp86, 256
  %v5_ab0c = or i32 %v4_ab0c, %v1_ab08
  store i32 %v5_ab0c, i32* %r2.global-to-local, align 4
  %v1_ab10 = add i32 %v3_aafc, 1
  store i32 %v1_ab10, i32* %r3.global-to-local, align 4
  store i32 %v1_ab10, i32* %v2_aafc, align 4
  %v0_ab18 = load i32, i32* %r2.global-to-local, align 4
  %v1_ab18 = load i32, i32* @r5, align 4
  %v2_ab18 = add i32 %v1_ab18, 4
  %v3_ab18 = inttoptr i32 %v2_ab18 to i32*
  store i32 %v0_ab18, i32* %v3_ab18, align 4
  %v0_ab1c = load i32, i32* %r1.global-to-local, align 4
  %v1_ab1c = add i32 %v0_ab1c, 8
  %v2_ab1c = inttoptr i32 %v1_ab1c to i32*
  %v3_ab1c = load i32, i32* %v2_ab1c, align 4
  %tmp87 = mul i32 %v3_ab1c, 256
  %v1_ab28 = and i32 %tmp87, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp88 = udiv i32 %v3_ab1c, 256
  %v4_ab2c = urem i32 %tmp88, 256
  %v5_ab2c = or i32 %v4_ab2c, %v1_ab28
  store i32 %v5_ab2c, i32* %r2.global-to-local, align 4
  %v4_ab3028 = udiv i32 %v2_aae8, 256
  %v1_ab34 = trunc i32 %v4_ab3028 to i8
  %v2_ab34 = load i32, i32* @r4, align 4
  %v3_ab34 = add i32 %v2_ab34, 11
  %v4_ab34 = inttoptr i32 %v3_ab34 to i8*
  store i8 %v1_ab34, i8* %v4_ab34, align 1
  %v3_ab38 = load i32, i32* @r4, align 4
  %v4_ab38 = add i32 %v3_ab38, 10
  %v5_ab38 = inttoptr i32 %v4_ab38 to i8*
  store i8 %v3_aae8, i8* %v5_ab38, align 1
  %v0_ab3c = load i32, i32* %r2.global-to-local, align 4
  %v1_ab3c = load i32, i32* @r5, align 4
  %v2_ab3c = add i32 %v1_ab3c, 8
  %v3_ab3c = inttoptr i32 %v2_ab3c to i32*
  store i32 %v0_ab3c, i32* %v3_ab3c, align 4
  %v0_ab40 = load i32, i32* @r5, align 4
  store i32 %v0_ab40, i32* @r1, align 4
  %v0_ab44 = load i32, i32* @r8, align 4
  store i32 %v0_ab44, i32* %r2.global-to-local, align 4
  %v0_ab48 = load i32, i32* @r7, align 4
  store i32 %v0_ab48, i32* %r3.global-to-local, align 4
  %v0_ab4c = load i32, i32* @r4, align 4
  store i32 %v0_ab4c, i32* %r0.global-to-local, align 4
  %v0_ab50 = load i32, i32* @r6, align 4
  %v1_ab50 = trunc i32 %v0_ab50 to i8
  %v3_ab50 = add i32 %v0_ab40, 16
  %v4_ab50 = inttoptr i32 %v3_ab50 to i8*
  store i8 %v1_ab50, i8* %v4_ab50, align 1
  %v0_ab54 = load i32, i32* @r6, align 4
  %v1_ab54 = trunc i32 %v0_ab54 to i8
  %v2_ab54 = load i32, i32* @r5, align 4
  %v3_ab54 = add i32 %v2_ab54, 17
  %v4_ab54 = inttoptr i32 %v3_ab54 to i8*
  store i8 %v1_ab54, i8* %v4_ab54, align 1
  %v4_ab58 = call i32 @function_d114(i32 %v0_ab4c, i32 %v0_ab40, i32 %v0_ab44, i32 %v0_ab48)
  %v5_ab58 = trunc i32 %v4_ab58 to i8
  store i32 %v4_ab58, i32* %r0.global-to-local, align 4
  %v4_ab5c29 = udiv i32 %v4_ab58, 256
  %v1_ab60 = trunc i32 %v4_ab5c29 to i8
  %v2_ab60 = load i32, i32* @r5, align 4
  %v3_ab60 = add i32 %v2_ab60, 17
  %v4_ab60 = inttoptr i32 %v3_ab60 to i8*
  store i8 %v1_ab60, i8* %v4_ab60, align 1
  %v3_ab64 = load i32, i32* @r5, align 4
  %v4_ab64 = add i32 %v3_ab64, 16
  %v5_ab64 = inttoptr i32 %v4_ab64 to i8*
  store i8 %v5_ab58, i8* %v5_ab64, align 1
  %v3_ab68 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ab68, i32* %r3.global-to-local, align 4
  %v0_ab6c = load i32, i32* @r4, align 4
  %v1_ab6c = add i32 %v0_ab6c, 20
  %v2_ab6c = inttoptr i32 %v1_ab6c to i32*
  %v3_ab6c = load i32, i32* %v2_ab6c, align 4
  %v5_ab74 = mul i32 %v3_ab68, 24
  %v3_ab7c = udiv i32 %v3_ab6c, 65536
  store i32 %v3_ab7c, i32* %r2.global-to-local, align 4
  %v2_ab80 = add i32 %v5_ab74, %arg2
  store i32 %v2_ab80, i32* %ip.global-to-local, align 4
  %v3_ab844 = udiv i32 %v3_ab6c, 16777216
  %v1_ab88 = trunc i32 %v3_ab844 to i8
  %v3_ab88 = add i32 %v2_ab80, 3
  %v4_ab88 = inttoptr i32 %v3_ab88 to i8*
  store i8 %v1_ab88, i8* %v4_ab88, align 1
  %v0_ab8c = load i32, i32* %r2.global-to-local, align 4
  %v1_ab8c = trunc i32 %v0_ab8c to i8
  %v2_ab8c = load i32, i32* %ip.global-to-local, align 4
  %v3_ab8c = add i32 %v2_ab8c, 2
  %v4_ab8c = inttoptr i32 %v3_ab8c to i8*
  store i8 %v1_ab8c, i8* %v4_ab8c, align 1
  %v0_ab90 = load i32, i32* @r4, align 4
  store i32 %v0_ab90, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v0_ab9c = load i32, i32* @sl, align 4
  store i32 %v0_ab9c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_aba4 = load i32, i32* %ip.global-to-local, align 4
  %v6_abac = inttoptr i32 %v0_ab90 to i32*
  %v7_abac = call i32 @function_11e28(i32 %v3_a584, i32* %v6_abac, i32 %v0_ab9c, i32 16384, i32 %v0_aba4, i32 16)
  %v3_abb0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_abb0, i32* %r3.global-to-local, align 4
  %v1_abb4 = add i32 %v3_abb0, 1
  store i32 %v1_abb4, i32* %r0.global-to-local, align 4
  %v1_abb8 = load i32, i32* @fp, align 4
  %v9_abb8 = icmp eq i32 %v1_abb4, %v1_abb8
  store i1 %v9_abb8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_abb4, i32* %stack_var_-40, align 4
  %v6_abc0 = icmp slt i32 %v1_abb4, %v1_abb8
  br i1 %v6_abc0, label %dec_label_pc_abc4, label %dec_label_pc_aa7c

dec_label_pc_abc4:                                ; preds = %dec_label_pc_aad8
  store i32 %v2_a3e4, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_a5cc, i32* %ip.global-to-local, align 4
  %v4_abd0 = mul i32 %v1_abb4, 4
  %v5_abd0 = add i32 %v4_abd0, %v2_a3e4
  %v6_abd0 = inttoptr i32 %v5_abd0 to i32*
  %v7_abd0 = load i32, i32* %v6_abd0, align 4
  store i32 %v7_abd0, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_aab0, i1* %cpsr_z.global-to-local, align 1
  %v1_abdc = add i32 %v7_abd0, 20
  store i32 %v1_abdc, i32* @r5, align 4
  br i1 %v3_aab0, label %dec_label_pc_abe4, label %dec_label_pc_aac4

dec_label_pc_abe4:                                ; preds = %dec_label_pc_abc4, %dec_label_pc_aa88
  %v0_abe4 = call i32 @function_e958()
  %v1_abe4 = trunc i32 %v0_abe4 to i8
  store i32 %v1_a574, i32* %lr.global-to-local, align 4
  %v4_abec = sdiv i32 %v0_abe4, 256
  store i32 %v4_abec, i32* %r3.global-to-local, align 4
  store i1 %v2_aac8, i1* %cpsr_z.global-to-local, align 1
  %v3_abf4 = load i32, i32* @r4, align 4
  %v4_abf4 = add i32 %v3_abf4, 4
  %v5_abf4 = inttoptr i32 %v4_abf4 to i8*
  store i8 %v1_abe4, i8* %v5_abf4, align 1
  %v0_abf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abf8 = trunc i32 %v0_abf8 to i8
  %v2_abf8 = load i32, i32* @r4, align 4
  %v3_abf8 = add i32 %v2_abf8, 5
  %v4_abf8 = inttoptr i32 %v3_abf8 to i8*
  store i8 %v1_abf8, i8* %v4_abf8, align 1
  %v0_abfc = load i32, i32* @r4, align 4
  %v1_abfc = add i32 %v0_abfc, 40
  store i32 %v1_abfc, i32* %r0.global-to-local, align 4
  %v0_ac00 = load i32, i32* @sb, align 4
  store i32 %v0_ac00, i32* @r1, align 4
  %v0_ac04 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac04, label %dec_label_pc_aad8, label %dec_label_pc_ac08

dec_label_pc_ac08:                                ; preds = %dec_label_pc_aac4, %dec_label_pc_abe4
  %v0_ac08 = phi i32 [ %v1_aacc, %dec_label_pc_aac4 ], [ %v1_abfc, %dec_label_pc_abe4 ]
  %v1_ac08 = inttoptr i32 %v0_ac08 to i8*
  %v2_ac08 = call i32 @function_ead8(i8* %v1_ac08)
  store i32 %v2_ac08, i32* %r0.global-to-local, align 4
  %v2_aad8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_aad8

; uselistorder directives
  uselistorder i32 %v0_abfc, { 1, 0 }
  uselistorder i32 %v7_abd0, { 1, 2, 0 }
  uselistorder i32 %v1_abb8, { 1, 2, 0 }
  uselistorder i32 %v1_abb4, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_ab58, { 0, 2, 1 }
  uselistorder i32 %v0_ab40, { 1, 0, 2 }
  uselistorder i32 %v3_ab1c, { 1, 0 }
  uselistorder i32 %v3_aafc, { 3, 2, 0, 1 }
  uselistorder i32 %v2_aae8, { 0, 2, 1 }
  uselistorder i32 %v0_aacc, { 1, 0 }
  uselistorder i32 %v0_aa88, { 1, 0 }
  uselistorder i32 %v0_aa7c, { 1, 0 }
  uselistorder i1 %v3_aab0, { 2, 3, 1, 0 }
  uselistorder i32 %v1_aa64, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a9b8, { 0, 2, 1 }
  uselistorder i32 %v3_a998, { 1, 0 }
  uselistorder i32 %v0_a96c, { 1, 0, 2 }
  uselistorder i32 %v3_a960, { 1, 0 }
  uselistorder i32 %v3_a8f4, { 1, 0 }
  uselistorder i32 %v0_a8e8, { 1, 0 }
  uselistorder i32 %v3_a870, { 1, 0 }
  uselistorder i32 %v3_a840, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_a814, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_a80c, { 1, 0 }
  uselistorder i32 %v4_a7f4, { 1, 0 }
  uselistorder i32 %v0_a7f0, { 0, 2, 1 }
  uselistorder i1 %v7_a760, { 1, 0 }
  uselistorder i32 %v7_a758, { 0, 2, 1, 3 }
  uselistorder i32 %v5_a7a4, { 1, 0 }
  uselistorder i1 %v9_a788, { 1, 0 }
  uselistorder i32 %v4_a79c, { 1, 0 }
  uselistorder i32 %v4_a798, { 1, 0 }
  uselistorder i32 %v8_a6ac, { 1, 2, 0, 3 }
  uselistorder i32 %v3_a698, { 1, 0 }
  uselistorder i32 %v0_a688, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a610, { 1, 0 }
  uselistorder i32 %v3_a60c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_aa24, { 1, 0 }
  uselistorder i32 %v1_aa0c, { 1, 0 }
  uselistorder i32 %v1_a9f4, { 1, 0 }
  uselistorder i32 %v1_a9dc, { 1, 0 }
  uselistorder i32 %v1_a9c4, { 1, 0 }
  uselistorder i32 %v5_a7a0, { 1, 0 }
  uselistorder i32 %v3_a6f493, { 1, 0 }
  uselistorder i1 %v2_a7b8, { 1, 0 }
  uselistorder i32 %v1_a7b4, { 1, 0 }
  uselistorder i32 %v4_a7b0, { 2, 0, 1 }
  uselistorder i32 %v4_a794, { 1, 0 }
  uselistorder i1 %v3_a6dc, { 1, 0 }
  uselistorder i32 %v8_a5d8, { 2, 1, 0 }
  uselistorder i32 %v8_a5d4, { 1, 2, 0 }
  uselistorder i32 %v3_a5cc, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_a5c8, { 0, 1, 3, 2 }
  uselistorder i1 %v7_a5bc, { 1, 0 }
  uselistorder i1 %v7_a58c, { 1, 0 }
  uselistorder i32 %v3_a588, { 2, 0, 1 }
  uselistorder i32 %v3_a584, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_a574, { 1, 3, 2, 0 }
  uselistorder i32 %v1_a51c, { 1, 2, 0 }
  uselistorder i32 %v1_a4fc, { 1, 0 }
  uselistorder i32 %v1_a4dc, { 1, 2, 0 }
  uselistorder i32 %v1_a4bc, { 1, 2, 0 }
  uselistorder i32 %v1_a49c, { 1, 2, 0 }
  uselistorder i32 %v1_a464, { 1, 2, 0 }
  uselistorder i32 %v5_a420, { 0, 2, 1 }
  uselistorder i32 %v2_a3e4, { 0, 4, 5, 2, 1, 3, 6 }
  uselistorder i32 %v2_a3d4, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_a3b8, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 19, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 28, 27, 31, 29, 32, 33, 30, 34, 36, 35, 37, 38, 40, 39, 44, 41, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 768, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_ac08, { 1, 0 }
  uselistorder label %dec_label_pc_aad8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_aa60, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread5, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_a7e8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a720, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_a6d0, { 1, 0 }
}

define i32 @function_ac14(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ac14:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_ac18 = urem i32 %arg1, 256
  store i32 %v1_ac18, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_ac30 = urem i32 %arg3, 256
  store i32 %v1_ac30, i32* @r4, align 4
  %v2_ac34 = call i32 @function_12178(i32 %v1_ac18, i32 4)
  %v0_ac38 = load i32, i32* @r5, align 4
  store i32 %v0_ac38, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ac48 = load i32, i32* @r4, align 4
  %v5_ac4c = inttoptr i32 %v0_ac38 to i32*
  %v6_ac4c = call i32 @function_85e0(i32 %v0_ac48, i32* %v5_ac4c, i32 2, i32 0, i32 %v2_ac34)
  %v1_ac58 = urem i32 %v6_ac4c, 256
  store i32 %v1_ac58, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ac64 = load i32, i32* @r5, align 4
  store i32 %v0_ac64, i32* %r1.global-to-local, align 4
  %v0_ac68 = load i32, i32* @r4, align 4
  %v5_ac6c = trunc i32 %v6_ac4c to i8
  %v6_ac70 = inttoptr i32 %v0_ac64 to i32*
  %v7_ac70 = call i32 @function_85e0(i32 %v0_ac68, i32* %v6_ac70, i32 3, i32 65535, i32 %v6_ac4c)
  %v0_ac74 = load i32, i32* @r5, align 4
  store i32 %v0_ac74, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_ac70, i32* @r8, align 4
  %v0_ac84 = load i32, i32* @r4, align 4
  %v5_ac88 = inttoptr i32 %v0_ac74 to i32*
  %v6_ac88 = call i32 @function_85e0(i32 %v0_ac84, i32* %v5_ac88, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_ac90 = urem i32 %v6_ac88, 256
  store i32 %v1_ac90, i32* %ip.global-to-local, align 4
  %v0_ac94 = load i32, i32* @r5, align 4
  store i32 %v0_ac94, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_aca0 = load i32, i32* @r4, align 4
  %sext13 = mul i32 %v6_ac88, 16777216
  %v5_aca8 = sdiv i32 %sext13, 16777216
  %v6_aca8 = inttoptr i32 %v0_ac94 to i32*
  %v7_aca8 = call i32 @function_85e0(i32 %v0_aca0, i32* %v6_aca8, i32 5, i32 0, i32 %v5_aca8)
  %v1_acb4 = urem i32 %v7_aca8, 256
  store i32 %v1_acb4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_acc0 = load i32, i32* @r5, align 4
  store i32 %v0_acc0, i32* %r1.global-to-local, align 4
  %v0_acc4 = load i32, i32* @r4, align 4
  %v5_accc = inttoptr i32 %v0_acc0 to i32*
  %v6_accc = call i32 @function_85e0(i32 %v0_acc4, i32* %v5_accc, i32 6, i32 65535, i32 %v1_acb4)
  %v0_acd4 = load i32, i32* @r5, align 4
  store i32 %v0_acd4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_accc, i32* @r7, align 4
  %v0_ace4 = load i32, i32* @r4, align 4
  %v5_ace8 = inttoptr i32 %v0_acd4 to i32*
  %v6_ace8 = call i32 @function_85e0(i32 %v0_ace4, i32* %v5_ace8, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_acf0 = load i32, i32* @r5, align 4
  store i32 %v0_acf0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_ace8, i32* @r6, align 4
  %v0_ad00 = load i32, i32* @r4, align 4
  %v5_ad04 = inttoptr i32 %v0_acf0 to i32*
  %v6_ad04 = call i32 @function_85e0(i32 %v0_ad00, i32* %v5_ad04, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_ad10 = load i32, i32* @r5, align 4
  store i32 %v0_ad10, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_ad1c = load i32, i32* @r4, align 4
  %v5_ad20 = inttoptr i32 %v0_ad10 to i32*
  %v6_ad20 = call i32 @function_85e0(i32 %v0_ad1c, i32* %v5_ad20, i32 18, i32 65535, i32 %v6_ad04)
  %v0_ad24 = load i32, i32* @r5, align 4
  store i32 %v0_ad24, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad34 = load i32, i32* @r4, align 4
  %v5_ad38 = inttoptr i32 %v0_ad24 to i32*
  %v6_ad38 = call i32 @function_85e0(i32 %v0_ad34, i32* %v5_ad38, i32 11, i32 0, i32 %v6_ad20)
  %v0_ad3c = load i32, i32* @r5, align 4
  store i32 %v0_ad3c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ad4c = load i32, i32* @r4, align 4
  %v5_ad50 = inttoptr i32 %v0_ad3c to i32*
  %v6_ad50 = call i32 @function_85e0(i32 %v0_ad4c, i32* %v5_ad50, i32 12, i32 1, i32 %v6_ad38)
  %v0_ad54 = load i32, i32* @r5, align 4
  store i32 %v0_ad54, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad64 = load i32, i32* @r4, align 4
  %v5_ad68 = inttoptr i32 %v0_ad54 to i32*
  %v6_ad68 = call i32 @function_85e0(i32 %v0_ad64, i32* %v5_ad68, i32 13, i32 0, i32 %v6_ad50)
  %v0_ad6c = load i32, i32* @r5, align 4
  store i32 %v0_ad6c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad7c = load i32, i32* @r4, align 4
  %v5_ad80 = inttoptr i32 %v0_ad6c to i32*
  %v6_ad80 = call i32 @function_85e0(i32 %v0_ad7c, i32* %v5_ad80, i32 14, i32 0, i32 %v6_ad68)
  %v0_ad84 = load i32, i32* @r5, align 4
  store i32 %v0_ad84, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad94 = load i32, i32* @r4, align 4
  %v5_ad98 = inttoptr i32 %v0_ad84 to i32*
  %v6_ad98 = call i32 @function_85e0(i32 %v0_ad94, i32* %v5_ad98, i32 15, i32 0, i32 %v6_ad80)
  %v0_ad9c = load i32, i32* @r5, align 4
  store i32 %v0_ad9c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_adac = load i32, i32* @r4, align 4
  %v5_adb0 = inttoptr i32 %v0_ad9c to i32*
  %v6_adb0 = call i32 @function_85e0(i32 %v0_adac, i32* %v5_adb0, i32 16, i32 0, i32 %v6_ad98)
  %v0_adb4 = load i32, i32* @r5, align 4
  store i32 %v0_adb4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_adc4 = load i32, i32* @r4, align 4
  %v5_adc8 = inttoptr i32 %v0_adb4 to i32*
  %v6_adc8 = call i32 @function_85e0(i32 %v0_adc4, i32* %v5_adc8, i32 0, i32 512, i32 %v6_adb0)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_add8 = load i32, i32* @r5, align 4
  store i32 %v0_add8, i32* %r1.global-to-local, align 4
  %v0_addc = load i32, i32* @r4, align 4
  %v5_ade0 = inttoptr i32 %v0_add8 to i32*
  %v6_ade0 = call i32 @function_85e0(i32 %v0_addc, i32* %v5_ade0, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_adec = load i32, i32* @global_var_1c5dc.51, align 4
  store i32 %v2_adec, i32* %r3.global-to-local, align 4
  %v1_adf0 = urem i32 %v6_ade0, 256
  store i32 %v1_adf0, i32* %ip.global-to-local, align 4
  %v0_adf4 = load i32, i32* @r5, align 4
  store i32 %v0_adf4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_adfc = load i32, i32* @r4, align 4
  %v5_ae04 = inttoptr i32 %v0_adf4 to i32*
  %v6_ae04 = call i32 @function_8574(i32 %v0_adfc, i32* %v5_ae04, i32 25, i32 %v2_adec, i32 %v1_adf0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ae18 = call i32 @function_11e8c(i32 2, i32 3, i32 6)
  %v7_ae1c = icmp eq i32 %v3_ae18, -1
  store i1 %v7_ae1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae1c, label %dec_label_pc_b254, label %dec_label_pc_ae28

dec_label_pc_ae28:                                ; preds = %dec_label_pc_ac14
  store i32 1, i32* %stack_var_-40, align 4
  %v6_ae30 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_ae30, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_ae44 = call i32 @function_11e5c(i32 %v3_ae18, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_ae48 = icmp eq i32 %v6_ae44, -1
  store i1 %v7_ae48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae48, label %dec_label_pc_b24c, label %dec_label_pc_ae50

dec_label_pc_ae50:                                ; preds = %dec_label_pc_ae28
  %v0_ae50 = load i32, i32* @r8, align 4
  %v0_ae54 = load i32, i32* @r7, align 4
  %v0_ae58 = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ae60 = urem i32 %v0_ae50, 65536
  store i32 %v3_ae60, i32* %r2.global-to-local, align 4
  %v3_ae64 = urem i32 %v0_ae54, 65536
  store i32 %v3_ae64, i32* %r3.global-to-local, align 4
  %v3_ae68 = urem i32 %v0_ae58, 65536
  store i32 %v3_ae68, i32* %ip.global-to-local, align 4
  %v0_ae6c = load i32, i32* @fp, align 4
  %v2_ae6c = icmp eq i32 %v0_ae6c, 0
  store i1 %v2_ae6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp75 = icmp slt i32 %v0_ae6c, 1
  br i1 %tmp75, label %dec_label_pc_b36c, label %dec_label_pc_ae84

dec_label_pc_ae84:                                ; preds = %dec_label_pc_ae50
  %v1_ae8c = add i32 %v6_adc8, 40
  %tmp76 = mul i32 %v1_ae8c, 256
  %v1_aea0 = urem i32 %v0_ae54, 256
  %v1_aea4 = and i32 %tmp76, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %v3_aea8 = mul nuw nsw i32 %v1_aea0, 256
  %v1_aeb0 = urem i32 %v0_ae58, 256
  %tmp77 = udiv i32 %v0_ae58, 256
  %v3_aeb4 = urem i32 %tmp77, 256
  %tmp78 = udiv i32 %v1_ae8c, 256
  %v4_aeb8 = urem i32 %tmp78, 256
  %v5_aeb8 = or i32 %v4_aeb8, %v1_aea4
  store i32 %v5_aeb8, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_ae54, 256
  %v4_aebc = urem i32 %tmp79, 256
  %v5_aebc = or i32 %v4_aebc, %v3_aea8
  store i32 %v5_aebc, i32* @sl, align 4
  %v4_aec0 = mul nuw nsw i32 %v1_aeb0, 256
  %v5_aec0 = or i32 %v4_aec0, %v3_aeb4
  store i32 %v5_aec0, i32* @r6, align 4
  %tmp80 = udiv i32 %v0_ae50, 256
  %v3_aed0 = urem i32 %tmp80, 256
  %v1_aed4 = urem i32 %v0_ae50, 256
  %tmp81 = mul i32 %v6_ad04, 256
  %v1_aedc = and i32 %tmp81, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %v1_aee0 = urem i32 %v6_ad38, 2
  %v1_aee4 = urem i32 %v6_ad50, 2
  %v1_aee8 = urem i32 %v6_ad68, 2
  %tmp82 = udiv i32 %v6_ad04, 256
  %v4_aeec = urem i32 %tmp82, 256
  %v5_aeec = or i32 %v4_aeec, %v1_aedc
  store i32 %v5_aeec, i32* @r8, align 4
  %v1_af0c = urem i32 %v6_ad80, 2
  %v1_af10 = urem i32 %v6_ad98, 2
  %v1_af14 = urem i32 %v6_adb0, 2
  %v1_af18 = urem i32 %v6_ad68, 256
  %v4_af1c = mul nuw nsw i32 %v1_aed4, 256
  %v5_af1c = or i32 %v4_af1c, %v3_aed0
  store i32 %v5_af1c, i32* @r5, align 4
  %v3_af3025 = udiv i32 %v1_aea4, 256
  store i32 %v3_af3025, i32* %r3.global-to-local, align 4
  store i32 %v1_aed4, i32* %ip.global-to-local, align 4
  store i32 %v1_aea0, i32* %r1.global-to-local, align 4
  store i32 %v1_aeb0, i32* %r2.global-to-local, align 4
  %v5_af4c = trunc i32 %v0_ae54 to i8
  store i32 0, i32* @r4, align 4
  %sext8 = mul i32 %v0_ae50, 16777216
  %v4_afb4 = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %tmp78, 16777216
  %v4_afc8 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %v1_aea4, 65536
  %v4_afcc = sdiv i32 %sext10, 16777216
  %tmp = sub nsw i32 0, %v1_aee0
  %v4_b01c = and i32 %tmp, 32
  %tmp93 = sub nsw i32 0, %v1_aee4
  %v4_b030 = and i32 %tmp93, 16
  %tmp94 = sub nsw i32 0, %v1_aee8
  %v4_b044 = and i32 %tmp94, 8
  %tmp95 = sub nsw i32 0, %v1_af0c
  %v4_b058 = and i32 %tmp95, 4
  %tmp96 = sub nsw i32 0, %v1_af10
  %v3_b06c = and i32 %tmp96, 2
  %sext11 = mul i32 %v0_ae58, 16777216
  %v7_b09c = sdiv i32 %sext11, 16777216
  %v1_afb0 = trunc i32 %v5_aca8 to i8
  %extract.t = trunc i32 %v4_afb4 to i8
  %v3_b09c = sext i8 %v5_af4c to i32
  %v2_b0c0 = icmp eq i32 %v1_af18, 0
  br label %dec_label_pc_af58

dec_label_pc_af58:                                ; preds = %bb89, %dec_label_pc_ae84
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_af64 = call i32 @function_12178(i32 1510, i32 1)
  store i32 %v2_ac34, i32* %ip.global-to-local, align 4
  %v2_af70 = load i32, i32* @r4, align 4
  %v5_af70 = mul i32 %v2_af70, 4
  %v6_af70 = add i32 %v5_af70, %v2_ac34
  %v7_af70 = inttoptr i32 %v6_af70 to i32*
  store i32 %v2_af64, i32* %v7_af70, align 4
  %v3_af74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_af74, i32* %r3.global-to-local, align 4
  %v0_af78 = load i32, i32* %ip.global-to-local, align 4
  %v4_af78 = mul i32 %v3_af74, 4
  %v5_af78 = add i32 %v0_af78, %v4_af78
  %v6_af78 = inttoptr i32 %v5_af78 to i32*
  %v7_af78 = load i32, i32* %v6_af78, align 4
  store i32 %v7_af78, i32* @r7, align 4
  %v1_af7c = inttoptr i32 %v7_af78 to i8*
  %v2_af7c = load i8, i8* %v1_af7c, align 1
  %tmp97 = urem i8 %v2_af7c, 16
  %v1_af80 = zext i8 %tmp97 to i32
  %v1_af84 = or i32 %v1_af80, 64
  store i32 %v1_af84, i32* %r2.global-to-local, align 4
  %v1_af88 = trunc i32 %v1_af84 to i8
  store i8 %v1_af88, i8* %v1_af7c, align 1
  %v0_af8c = load i32, i32* @r7, align 4
  %v1_af8c = inttoptr i32 %v0_af8c to i8*
  %v2_af8c = load i8, i8* %v1_af8c, align 1
  %v1_af90 = and i8 %v2_af8c, -16
  %v1_af94 = or i8 %v1_af90, 5
  store i32 %v1_acb4, i32* %r1.global-to-local, align 4
  store i8 %v1_af94, i8* %v1_af8c, align 1
  %v2_afa4 = load i32, i32* @r7, align 4
  %v3_afa4 = add i32 %v2_afa4, 1
  %v4_afa4 = inttoptr i32 %v3_afa4 to i8*
  store i8 %v5_ac6c, i8* %v4_afa4, align 1
  store i32 %v5_aca8, i32* %r3.global-to-local, align 4
  %v0_afac = load i32, i32* %r1.global-to-local, align 4
  %v2_afac = icmp eq i32 %v0_afac, 0
  store i1 %v2_afac, i1* %cpsr_z.global-to-local, align 1
  %v2_afb0 = load i32, i32* @r7, align 4
  %v3_afb0 = add i32 %v2_afb0, 8
  %v4_afb0 = inttoptr i32 %v3_afb0 to i8*
  store i8 %v1_afb0, i8* %v4_afb0, align 1
  store i32 %v4_afb4, i32* %r2.global-to-local, align 4
  %v0_afb8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afb8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_af58
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_afbc = load i32, i32* @r7, align 4
  %v4_afbc = add i32 %v3_afbc, 6
  %v5_afbc = inttoptr i32 %v4_afbc to i8*
  store i8 64, i8* %v5_afbc, align 1
  %v0_afc4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t26 = trunc i32 %v0_afc4.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_af58, %bb
  %v0_afc4.off0 = phi i8 [ %extract.t, %dec_label_pc_af58 ], [ %extract.t26, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_afc4 = load i32, i32* @r7, align 4
  %v3_afc4 = add i32 %v2_afc4, 5
  %v4_afc4 = inttoptr i32 %v3_afc4 to i8*
  store i8 %v0_afc4.off0, i8* %v4_afc4, align 1
  store i32 %v4_afc8, i32* %ip.global-to-local, align 4
  store i32 %v4_afcc, i32* %r1.global-to-local, align 4
  %v0_afd0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afd0, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  %v0_afd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afd4 = trunc i32 %v0_afd4 to i8
  %v2_afd4 = load i32, i32* @r7, align 4
  %v3_afd4 = add i32 %v2_afd4, 9
  %v4_afd4 = inttoptr i32 %v3_afd4 to i8*
  store i8 %v1_afd4, i8* %v4_afd4, align 1
  %v0_afd8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afd8, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_afd8 = load i32, i32* %r2.global-to-local, align 4
  %v2_afd8 = trunc i32 %v1_afd8 to i8
  %v3_afd8 = load i32, i32* @r7, align 4
  %v4_afd8 = add i32 %v3_afd8, 7
  %v5_afd8 = inttoptr i32 %v4_afd8 to i8*
  store i8 %v2_afd8, i8* %v5_afd8, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_afdc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_afdc, i32* %r2.global-to-local, align 4
  %v0_afe0 = load i32, i32* %ip.global-to-local, align 4
  %v1_afe0 = trunc i32 %v0_afe0 to i8
  %v2_afe0 = load i32, i32* @r7, align 4
  %v3_afe0 = add i32 %v2_afe0, 2
  %v4_afe0 = inttoptr i32 %v3_afe0 to i8*
  store i8 %v1_afe0, i8* %v4_afe0, align 1
  store i32 %v6_ae04, i32* %ip.global-to-local, align 4
  %v0_afe8 = load i32, i32* %r2.global-to-local, align 4
  %v3_afe8 = mul i32 %v0_afe8, 32
  store i32 %v3_afe8, i32* %r3.global-to-local, align 4
  %v1_afec = load i32, i32* @r7, align 4
  %v2_afec = add i32 %v1_afec, 12
  %v3_afec = inttoptr i32 %v2_afec to i32*
  store i32 %v6_ae04, i32* %v3_afec, align 4
  %v0_aff0 = load i32, i32* %r3.global-to-local, align 4
  %v1_aff0 = load i32, i32* %r2.global-to-local, align 4
  %tmp98 = mul i32 %v1_aff0, -8
  %v5_aff0 = add i32 %v0_aff0, %tmp98
  %v1_aff4 = load i32, i32* @sb, align 4
  %v2_aff4 = add i32 %v1_aff4, %v5_aff0
  store i32 %v2_aff4, i32* %r3.global-to-local, align 4
  %v1_aff8 = add i32 %v2_aff4, 16
  %v2_aff8 = inttoptr i32 %v1_aff8 to i32*
  %v3_aff8 = load i32, i32* %v2_aff8, align 4
  store i32 %v3_aff8, i32* %r2.global-to-local, align 4
  %v0_affc = load i32, i32* %r1.global-to-local, align 4
  %v1_affc = trunc i32 %v0_affc to i8
  %v2_affc = load i32, i32* @r7, align 4
  %v3_affc = add i32 %v2_affc, 3
  %v4_affc = inttoptr i32 %v3_affc to i8*
  store i8 %v1_affc, i8* %v4_affc, align 1
  %v0_b000 = load i32, i32* @r5, align 4
  %v1_b000 = trunc i32 %v0_b000 to i8
  %v2_b000 = load i32, i32* @r7, align 4
  %v3_b000 = add i32 %v2_b000, 4
  %v4_b000 = inttoptr i32 %v3_b000 to i8*
  store i8 %v1_b000, i8* %v4_b000, align 1
  %v0_b004 = load i32, i32* %r2.global-to-local, align 4
  %v1_b004 = load i32, i32* @r7, align 4
  %v2_b004 = add i32 %v1_b004, 16
  %v3_b004 = inttoptr i32 %v2_b004 to i32*
  store i32 %v0_b004, i32* %v3_b004, align 4
  %v0_b008 = load i32, i32* @sl, align 4
  %v1_b008 = trunc i32 %v0_b008 to i8
  %v2_b008 = load i32, i32* @r7, align 4
  %v3_b008 = add i32 %v2_b008, 20
  %v4_b008 = inttoptr i32 %v3_b008 to i8*
  store i8 %v1_b008, i8* %v4_b008, align 1
  %v0_b00c = load i32, i32* @r7, align 4
  %v1_b00c = add i32 %v0_b00c, 20
  store i32 %v1_b00c, i32* @r4, align 4
  %v1_b010 = add i32 %v0_b00c, 33
  %v2_b010 = inttoptr i32 %v1_b010 to i8*
  %v3_b010 = load i8, i8* %v2_b010, align 1
  %v4_b010 = zext i8 %v3_b010 to i32
  store i32 %v1_aee0, i32* %r1.global-to-local, align 4
  %v1_b018 = and i32 %v4_b010, 223
  %v5_b01c = or i32 %v1_b018, %v4_b01c
  store i32 %v5_b01c, i32* %r3.global-to-local, align 4
  %v1_b020 = trunc i32 %v5_b01c to i8
  store i8 %v1_b020, i8* %v2_b010, align 1
  %v0_b024 = load i32, i32* @r4, align 4
  %v1_b024 = add i32 %v0_b024, 13
  %v2_b024 = inttoptr i32 %v1_b024 to i8*
  %v3_b024 = load i8, i8* %v2_b024, align 1
  %v4_b024 = zext i8 %v3_b024 to i32
  store i32 %v1_aee4, i32* %r3.global-to-local, align 4
  %v1_b02c = and i32 %v4_b024, 239
  %v5_b030 = or i32 %v1_b02c, %v4_b030
  store i32 %v5_b030, i32* %r2.global-to-local, align 4
  %v1_b034 = trunc i32 %v5_b030 to i8
  store i8 %v1_b034, i8* %v2_b024, align 1
  %v0_b038 = load i32, i32* @r4, align 4
  %v1_b038 = add i32 %v0_b038, 13
  %v2_b038 = inttoptr i32 %v1_b038 to i8*
  %v3_b038 = load i8, i8* %v2_b038, align 1
  %v4_b038 = zext i8 %v3_b038 to i32
  store i32 %v1_aee8, i32* %ip.global-to-local, align 4
  %v1_b040 = and i32 %v4_b038, 247
  %v5_b044 = or i32 %v1_b040, %v4_b044
  store i32 %v5_b044, i32* %r3.global-to-local, align 4
  %v1_b048 = trunc i32 %v5_b044 to i8
  store i8 %v1_b048, i8* %v2_b038, align 1
  %v0_b04c = load i32, i32* @r4, align 4
  %v1_b04c = add i32 %v0_b04c, 13
  %v2_b04c = inttoptr i32 %v1_b04c to i8*
  %v3_b04c = load i8, i8* %v2_b04c, align 1
  %v4_b04c = zext i8 %v3_b04c to i32
  store i32 %v1_af0c, i32* %r1.global-to-local, align 4
  %v1_b054 = and i32 %v4_b04c, 251
  %v5_b058 = or i32 %v1_b054, %v4_b058
  store i32 %v5_b058, i32* %r2.global-to-local, align 4
  %v1_b05c = trunc i32 %v5_b058 to i8
  store i8 %v1_b05c, i8* %v2_b04c, align 1
  %v0_b060 = load i32, i32* @r4, align 4
  %v1_b060 = add i32 %v0_b060, 13
  %v2_b060 = inttoptr i32 %v1_b060 to i8*
  %v3_b060 = load i8, i8* %v2_b060, align 1
  %v4_b060 = zext i8 %v3_b060 to i32
  store i32 %v1_af10, i32* %r2.global-to-local, align 4
  %v1_b068 = and i32 %v4_b060, 253
  %v4_b06c = or i32 %v1_b068, %v3_b06c
  store i32 %v4_b06c, i32* %r3.global-to-local, align 4
  %v1_b070 = trunc i32 %v4_b06c to i8
  store i8 %v1_b070, i8* %v2_b060, align 1
  %v0_b074 = load i32, i32* @r4, align 4
  %v1_b074 = add i32 %v0_b074, 12
  %v2_b074 = inttoptr i32 %v1_b074 to i8*
  %v3_b074 = load i8, i8* %v2_b074, align 1
  %v4_b074 = zext i8 %v3_b074 to i32
  store i32 %v4_b074, i32* %r2.global-to-local, align 4
  %v1_b078 = add i32 %v0_b074, 13
  %v2_b078 = inttoptr i32 %v1_b078 to i8*
  %v3_b078 = load i8, i8* %v2_b078, align 1
  %v4_b078 = zext i8 %v3_b078 to i32
  store i32 %v1_af14, i32* %ip.global-to-local, align 4
  %tmp99 = urem i8 %v3_b074, 16
  %v1_b080 = zext i8 %tmp99 to i32
  %v1_b084 = and i32 %v4_b078, 254
  %v2_b088 = or i32 %v1_b084, %v1_af14
  store i32 %v2_b088, i32* %r3.global-to-local, align 4
  %v1_b08c = or i32 %v1_b080, 80
  store i32 %v1_b08c, i32* %r2.global-to-local, align 4
  %v1_b090 = trunc i32 %v2_b088 to i8
  store i8 %v1_b090, i8* %v2_b078, align 1
  %v0_b094 = load i32, i32* %r2.global-to-local, align 4
  %v1_b094 = trunc i32 %v0_b094 to i8
  %v2_b094 = load i32, i32* @r4, align 4
  %v3_b094 = add i32 %v2_b094, 12
  %v4_b094 = inttoptr i32 %v3_b094 to i8*
  store i8 %v1_b094, i8* %v4_b094, align 1
  store i32 %v3_b09c, i32* %r1.global-to-local, align 4
  store i32 %v7_b09c, i32* %r2.global-to-local, align 4
  %v2_b0a0 = load i32, i32* @r4, align 4
  %v3_b0a0 = add i32 %v2_b0a0, 1
  %v4_b0a0 = inttoptr i32 %v3_b0a0 to i8*
  store i8 %v5_af4c, i8* %v4_b0a0, align 1
  %v0_b0a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b0a4 = trunc i32 %v0_b0a4 to i8
  %v2_b0a4 = load i32, i32* @r4, align 4
  %v3_b0a4 = add i32 %v2_b0a4, 3
  %v4_b0a4 = inttoptr i32 %v3_b0a4 to i8*
  store i8 %v1_b0a4, i8* %v4_b0a4, align 1
  %v0_b0a8 = load i32, i32* @r6, align 4
  %v1_b0a8 = trunc i32 %v0_b0a8 to i8
  %v2_b0a8 = load i32, i32* @r4, align 4
  %v3_b0a8 = add i32 %v2_b0a8, 2
  %v4_b0a8 = inttoptr i32 %v3_b0a8 to i8*
  store i8 %v1_b0a8, i8* %v4_b0a8, align 1
  %v0_b0ac = load i32, i32* @r8, align 4
  %v1_b0ac = load i32, i32* @r4, align 4
  %v2_b0ac = add i32 %v1_b0ac, 4
  %v3_b0ac = inttoptr i32 %v2_b0ac to i32*
  store i32 %v0_b0ac, i32* %v3_b0ac, align 4
  %v0_b0b0 = call i32 @function_e958()
  store i32 %v1_af18, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_b0b0, 16777216
  %v1_b0b8 = sdiv i32 %sext, 16777216
  store i32 %v1_b0b8, i32* %r2.global-to-local, align 4
  %v3_b0bc = ashr i32 %sext, 31
  store i32 %v3_b0bc, i32* %r3.global-to-local, align 4
  store i1 %v2_b0c0, i1* %cpsr_z.global-to-local, align 1
  %v1_b0c4 = trunc i32 %v3_b0bc to i8
  %v2_b0c4 = load i32, i32* @r4, align 4
  %v3_b0c4 = add i32 %v2_b0c4, 15
  %v4_b0c4 = inttoptr i32 %v3_b0c4 to i8*
  store i8 %v1_b0c4, i8* %v4_b0c4, align 1
  %v0_b0c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_b0d4.pre = load i32, i32* @r4, align 4
  br i1 %v0_b0c8, label %.thread12, label %bb87

bb87:                                             ; preds = %bb86
  %v2_b0c8 = add i32 %v2_b0d4.pre, 13
  %v3_b0c8 = inttoptr i32 %v2_b0c8 to i8*
  %v4_b0c8 = load i8, i8* %v3_b0c8, align 1
  %v5_b0c8 = zext i8 %v4_b0c8 to i32
  %v2_b0cc = or i32 %v5_b0c8, 8
  store i32 %v2_b0cc, i32* %r3.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb86, %bb87
  store i32 %v6_adc8, i32* @r1, align 4
  %v0_b0d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b0d4 = trunc i32 %v0_b0d4 to i8
  %v3_b0d4 = add i32 %v2_b0d4.pre, 14
  %v4_b0d4 = inttoptr i32 %v3_b0d4 to i8*
  store i8 %v1_b0d4, i8* %v4_b0d4, align 1
  %v0_b0d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b0d8, label %bb89, label %bb88

bb88:                                             ; preds = %.thread12
  %v1_b0d8 = load i32, i32* %r3.global-to-local, align 4
  %v2_b0d8 = trunc i32 %v1_b0d8 to i8
  %v3_b0d8 = load i32, i32* @r4, align 4
  %v4_b0d8 = add i32 %v3_b0d8, 13
  %v5_b0d8 = inttoptr i32 %v4_b0d8 to i8*
  store i8 %v2_b0d8, i8* %v5_b0d8, align 1
  br label %bb89

bb89:                                             ; preds = %.thread12, %bb88
  %v0_b0dc = load i32, i32* @r7, align 4
  %v1_b0dc = add i32 %v0_b0dc, 40
  %v1_b0e0 = inttoptr i32 %v1_b0dc to i8*
  %v2_b0e0 = call i32 @function_ead8(i8* %v1_b0e0)
  %v3_b0e4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b0e4, i32* %r3.global-to-local, align 4
  %v1_b0e8 = add i32 %v3_b0e4, 1
  store i32 %v1_b0e8, i32* @r4, align 4
  %v0_b0ec = load i32, i32* @fp, align 4
  %v9_b0ec = icmp eq i32 %v0_b0ec, %v1_b0e8
  store i1 %v9_b0ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b0e8, i32* %stack_var_-40, align 4
  %v8_b0f4 = icmp sgt i32 %v0_b0ec, %v1_b0e8
  br i1 %v8_b0f4, label %dec_label_pc_af58, label %dec_label_pc_b0f8

dec_label_pc_b0f8:                                ; preds = %bb89
  store i32 %v6_adc8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_b100.preheader

dec_label_pc_b100.preheader:                      ; preds = %dec_label_pc_b0f8, %dec_label_pc_b36c
  %v0_b10017 = phi i32 [ %v0_b0ec, %dec_label_pc_b0f8 ], [ %v0_ae6c, %dec_label_pc_b36c ]
  %stack_var_-168.0.ph = phi i32 [ %v1_ae8c, %dec_label_pc_b0f8 ], [ %v1_b374, %dec_label_pc_b36c ]
  %storemerge = add i32 %v6_adc8, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_b2b8 = icmp eq i32 %v6_ae04, -1
  %v8_b2b8 = icmp eq i32 %v6_ae04, -1
  %v3_b2d4 = icmp eq i32 %v3_ae60, 65535
  %v2_b350 = icmp eq i32 %v1_adf0, 0
  br label %dec_label_pc_b100

dec_label_pc_b100:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b100.preheader
  %v0_b100 = phi i32 [ %v0_b10017, %dec_label_pc_b100.preheader ], [ %v0_b23c, %dec_label_pc_b1a8 ]
  %v2_b100 = icmp eq i32 %v0_b100, 0
  store i1 %v2_b100, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp90 = icmp slt i32 %v0_b100, 1
  br label %dec_label_pc_b108

dec_label_pc_b108:                                ; preds = %dec_label_pc_b108, %dec_label_pc_b100
  br i1 %tmp90, label %dec_label_pc_b108, label %dec_label_pc_b10c

dec_label_pc_b10c:                                ; preds = %dec_label_pc_b108
  %v0_b10c = load i32, i32* @r8, align 4
  %v3_b10c = mul i32 %v0_b10c, 65536
  store i32 %v3_b10c, i32* %r2.global-to-local, align 4
  %tmp91 = mul i32 %v0_b10c, 256
  %v1_b114 = and i32 %tmp91, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  store i32 %v1_b114, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp92 = udiv i32 %v0_b10c, 256
  %v4_b120 = urem i32 %tmp92, 256
  %v5_b120 = or i32 %v4_b120, %v1_b114
  store i32 %v5_b120, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_b128

dec_label_pc_b128:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b10c
  %v1_b13c = phi i32 [ %v1_b238, %dec_label_pc_b1a8 ], [ 0, %dec_label_pc_b10c ]
  %v5_b12c = mul i32 %v1_b13c, 24
  %v1_b130 = load i32, i32* @sb, align 4
  %v2_b130 = add i32 %v1_b130, %v5_b12c
  store i32 %v2_b130, i32* %r3.global-to-local, align 4
  store i32 %v2_ac34, i32* %ip.global-to-local, align 4
  %v1_b138 = add i32 %v2_b130, 20
  %v2_b138 = inttoptr i32 %v1_b138 to i8*
  %v3_b138 = load i8, i8* %v2_b138, align 1
  %v4_b138 = zext i8 %v3_b138 to i32
  store i32 %v4_b138, i32* %r2.global-to-local, align 4
  %v4_b13c = mul i32 %v1_b13c, 4
  %v5_b13c = add i32 %v4_b13c, %v2_ac34
  %v6_b13c = inttoptr i32 %v5_b13c to i32*
  %v7_b13c = load i32, i32* %v6_b13c, align 4
  store i32 %v7_b13c, i32* @r5, align 4
  %v7_b140 = icmp eq i8 %v3_b138, 31
  store i1 %v7_b140, i1* %cpsr_z.global-to-local, align 1
  %v1_b144 = add i32 %v7_b13c, 20
  store i32 %v1_b144, i32* @r6, align 4
  %tmp100 = icmp ult i8 %v3_b138, 32
  br i1 %tmp100, label %dec_label_pc_b25c, label %dec_label_pc_b14c

dec_label_pc_b14c:                                ; preds = %dec_label_pc_b128
  store i32 %v6_ae04, i32* %r1.global-to-local, align 4
  store i1 %v8_b2b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_b2b8, label %dec_label_pc_b2c4, label %dec_label_pc_b158

dec_label_pc_b158:                                ; preds = %dec_label_pc_b25c, %dec_label_pc_b14c
  store i32 %v3_ae60, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b2d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b2d4, label %dec_label_pc_b2e0, label %dec_label_pc_b16c

dec_label_pc_b16c:                                ; preds = %dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge, %dec_label_pc_b158
  %v1_b170 = phi i32 [ %v1_b170.pre, %dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge ], [ 65535, %dec_label_pc_b158 ]
  store i32 %v3_ae64, i32* %r3.global-to-local, align 4
  %v9_b170 = icmp eq i32 %v3_ae64, %v1_b170
  store i1 %v9_b170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b170, label %dec_label_pc_b2fc, label %dec_label_pc_b178

dec_label_pc_b178:                                ; preds = %dec_label_pc_b2e0.dec_label_pc_b178_crit_edge, %dec_label_pc_b16c
  %v1_b17c = phi i32 [ %v1_b17c.pre, %dec_label_pc_b2e0.dec_label_pc_b178_crit_edge ], [ %v1_b170, %dec_label_pc_b16c ]
  store i32 %v3_ae68, i32* %ip.global-to-local, align 4
  %v9_b17c = icmp eq i32 %v3_ae68, %v1_b17c
  store i1 %v9_b17c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b17c, label %dec_label_pc_b318, label %dec_label_pc_b184

dec_label_pc_b184:                                ; preds = %dec_label_pc_b2fc.dec_label_pc_b184_crit_edge, %dec_label_pc_b178
  %v1_b188 = phi i32 [ %v1_b188.pre, %dec_label_pc_b2fc.dec_label_pc_b184_crit_edge ], [ %v1_b17c, %dec_label_pc_b178 ]
  store i32 %v6_ad04, i32* %r1.global-to-local, align 4
  %v9_b188 = icmp eq i32 %v6_ad04, %v1_b188
  store i1 %v9_b188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b188, label %dec_label_pc_b334, label %dec_label_pc_b190

dec_label_pc_b190:                                ; preds = %dec_label_pc_b318.dec_label_pc_b190_crit_edge, %dec_label_pc_b184
  %v1_b194 = phi i32 [ %v1_b194.pre, %dec_label_pc_b318.dec_label_pc_b190_crit_edge ], [ %v1_b188, %dec_label_pc_b184 ]
  store i32 %v6_ad20, i32* %r2.global-to-local, align 4
  %v9_b194 = icmp eq i32 %v6_ad20, %v1_b194
  store i1 %v9_b194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b194, label %dec_label_pc_b348, label %dec_label_pc_b19c

dec_label_pc_b19c:                                ; preds = %dec_label_pc_b334, %dec_label_pc_b190
  store i32 %v1_adf0, i32* %r3.global-to-local, align 4
  store i1 %v2_b350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b350, label %dec_label_pc_b1a8, label %dec_label_pc_b35c

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_b19c, %dec_label_pc_b348, %dec_label_pc_b35c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b1ac = load i32, i32* @r7, align 4
  %v1_b1ac = trunc i32 %v0_b1ac to i8
  %v2_b1ac = load i32, i32* @r5, align 4
  %v3_b1ac = add i32 %v2_b1ac, 10
  %v4_b1ac = inttoptr i32 %v3_b1ac to i8*
  store i8 %v1_b1ac, i8* %v4_b1ac, align 1
  %v0_b1b0 = load i32, i32* @r7, align 4
  %v1_b1b0 = trunc i32 %v0_b1b0 to i8
  %v2_b1b0 = load i32, i32* @r5, align 4
  %v3_b1b0 = add i32 %v2_b1b0, 11
  %v4_b1b0 = inttoptr i32 %v3_b1b0 to i8*
  store i8 %v1_b1b0, i8* %v4_b1b0, align 1
  %v0_b1b4 = load i32, i32* @r5, align 4
  store i32 %v0_b1b4, i32* @r0, align 4
  %v2_b1b8 = call i32 @function_d0b8(i32 %v0_b1b4, i32 20)
  %v3_b1b8 = trunc i32 %v2_b1b8 to i8
  %v4_b1bc28 = udiv i32 %v2_b1b8, 256
  %v1_b1c0 = trunc i32 %v4_b1bc28 to i8
  %v2_b1c0 = load i32, i32* @r5, align 4
  %v3_b1c0 = add i32 %v2_b1c0, 11
  %v4_b1c0 = inttoptr i32 %v3_b1c0 to i8*
  store i8 %v1_b1c0, i8* %v4_b1c0, align 1
  %v3_b1c4 = load i32, i32* @r5, align 4
  %v4_b1c4 = add i32 %v3_b1c4, 10
  %v5_b1c4 = inttoptr i32 %v4_b1c4 to i8*
  store i8 %v3_b1b8, i8* %v5_b1c4, align 1
  %v0_b1c8 = load i32, i32* @r6, align 4
  store i32 %v0_b1c8, i32* @r1, align 4
  %v0_b1cc = load i32, i32* @sl, align 4
  store i32 %v0_b1cc, i32* %r2.global-to-local, align 4
  %v0_b1d0 = load i32, i32* @r8, align 4
  store i32 %v0_b1d0, i32* %r3.global-to-local, align 4
  %v0_b1d4 = load i32, i32* @r7, align 4
  %v1_b1d4 = trunc i32 %v0_b1d4 to i8
  %v3_b1d4 = add i32 %v0_b1c8, 16
  %v4_b1d4 = inttoptr i32 %v3_b1d4 to i8*
  store i8 %v1_b1d4, i8* %v4_b1d4, align 1
  %v0_b1d8 = load i32, i32* @r7, align 4
  %v1_b1d8 = trunc i32 %v0_b1d8 to i8
  %v2_b1d8 = load i32, i32* @r6, align 4
  %v3_b1d8 = add i32 %v2_b1d8, 17
  %v4_b1d8 = inttoptr i32 %v3_b1d8 to i8*
  store i8 %v1_b1d8, i8* %v4_b1d8, align 1
  %v0_b1dc = load i32, i32* @r5, align 4
  %v4_b1e0 = call i32 @function_d114(i32 %v0_b1dc, i32 %v0_b1c8, i32 %v0_b1cc, i32 %v0_b1d0)
  %v5_b1e0 = trunc i32 %v4_b1e0 to i8
  %v4_b1e429 = udiv i32 %v4_b1e0, 256
  %v1_b1e8 = trunc i32 %v4_b1e429 to i8
  %v2_b1e8 = load i32, i32* @r6, align 4
  %v3_b1e8 = add i32 %v2_b1e8, 17
  %v4_b1e8 = inttoptr i32 %v3_b1e8 to i8*
  store i8 %v1_b1e8, i8* %v4_b1e8, align 1
  %v3_b1ec = load i32, i32* @r6, align 4
  %v4_b1ec = add i32 %v3_b1ec, 16
  %v5_b1ec = inttoptr i32 %v4_b1ec to i8*
  store i8 %v5_b1e0, i8* %v5_b1ec, align 1
  %v3_b1f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b1f0, i32* %r3.global-to-local, align 4
  %v0_b1f4 = load i32, i32* @r5, align 4
  %v1_b1f4 = add i32 %v0_b1f4, 20
  %v2_b1f4 = inttoptr i32 %v1_b1f4 to i32*
  %v3_b1f4 = load i32, i32* %v2_b1f4, align 4
  %v3_b1fc = udiv i32 %v3_b1f4, 65536
  store i32 %v3_b1fc, i32* %r2.global-to-local, align 4
  %v5_b200 = mul i32 %v3_b1f0, 24
  %v1_b204 = load i32, i32* @sb, align 4
  %v2_b204 = add i32 %v1_b204, %v5_b200
  store i32 %v2_b204, i32* %ip.global-to-local, align 4
  %v3_b20827 = udiv i32 %v3_b1f4, 16777216
  %v1_b20c = trunc i32 %v3_b20827 to i8
  %v3_b20c = add i32 %v2_b204, 3
  %v4_b20c = inttoptr i32 %v3_b20c to i8*
  store i8 %v1_b20c, i8* %v4_b20c, align 1
  %v0_b210 = load i32, i32* %r2.global-to-local, align 4
  %v1_b210 = trunc i32 %v0_b210 to i8
  %v2_b210 = load i32, i32* %ip.global-to-local, align 4
  %v3_b210 = add i32 %v2_b210, 2
  %v4_b210 = inttoptr i32 %v3_b210 to i8*
  store i8 %v1_b210, i8* %v4_b210, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b218 = load i32, i32* @r5, align 4
  store i32 %v0_b218, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b228 = load i32, i32* %ip.global-to-local, align 4
  %v6_b230 = inttoptr i32 %v0_b218 to i32*
  %v7_b230 = call i32 @function_11e28(i32 %v3_ae18, i32* %v6_b230, i32 %stack_var_-168.0.ph, i32 16384, i32 %v0_b228, i32 16)
  %v3_b234 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b234, i32* %r3.global-to-local, align 4
  %v1_b238 = add i32 %v3_b234, 1
  %v0_b23c = load i32, i32* @fp, align 4
  %v9_b23c = icmp eq i32 %v0_b23c, %v1_b238
  store i1 %v9_b23c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b238, i32* %stack_var_-40, align 4
  %v7_b244 = icmp sgt i32 %v0_b23c, %v1_b238
  br i1 %v7_b244, label %dec_label_pc_b128, label %dec_label_pc_b100

dec_label_pc_b24c:                                ; preds = %dec_label_pc_ae28
  %v1_b250 = call i32 @function_11574(i32 %v3_ae18)
  br label %dec_label_pc_b254

dec_label_pc_b254:                                ; preds = %dec_label_pc_ac14, %dec_label_pc_b24c
  %v29_b258 = phi i32 [ %v3_ae18, %dec_label_pc_ac14 ], [ %v1_b250, %dec_label_pc_b24c ]
  ret i32 %v29_b258

dec_label_pc_b25c:                                ; preds = %dec_label_pc_b128
  %v1_b25c = add i32 %v2_b130, 16
  %v2_b25c = inttoptr i32 %v1_b25c to i32*
  %v3_b25c = load i32, i32* %v2_b25c, align 4
  %v0_b260 = call i32 @function_e958()
  %v3_b264 = load i32, i32* %stack_var_-40, align 4
  %v5_b26c = mul i32 %v3_b264, 24
  %v1_b274 = load i32, i32* @sb, align 4
  %v2_b274 = add i32 %v1_b274, %v5_b26c
  store i32 %v2_b274, i32* %r1.global-to-local, align 4
  %v1_b278 = and i32 %v3_b25c, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_b278, i32* %r3.global-to-local, align 4
  %v1_b270 = udiv i32 %v3_b25c, 256
  %v3_b27c = and i32 %v1_b270, 65280
  store i32 %v3_b27c, i32* %r2.global-to-local, align 4
  %v3_b280 = mul i32 %v3_b25c, 16777216
  store i32 %v3_b280, i32* %ip.global-to-local, align 4
  %v1_b284 = add i32 %v2_b274, 20
  %v2_b284 = inttoptr i32 %v1_b284 to i8*
  %v3_b284 = load i8, i8* %v2_b284, align 1
  %v4_b284 = zext i8 %v3_b284 to i32
  %v4_b288 = mul i32 %v1_b278, 256
  %v5_b288 = or i32 %v4_b288, %v3_b280
  store i32 %v5_b288, i32* %ip.global-to-local, align 4
  %v4_b28c = udiv i32 %v3_b25c, 16777216
  %v5_b28c = or i32 %v3_b27c, %v4_b28c
  %v2_b290 = or i32 %v5_b28c, %v5_b288
  %v7_b294 = lshr i32 %v0_b260, %v4_b284
  %v8_b294 = add i32 %v7_b294, %v2_b290
  store i32 %v8_b294, i32* %r2.global-to-local, align 4
  %v2_b2b0 = call i32 @llvm.bswap.i32(i32 %v8_b294)
  store i32 %v2_b2b0, i32* %r3.global-to-local, align 4
  store i32 %v6_ae04, i32* %r1.global-to-local, align 4
  store i1 %v8_b2b8, i1* %cpsr_z.global-to-local, align 1
  %v1_b2bc = load i32, i32* @r5, align 4
  %v2_b2bc = add i32 %v1_b2bc, 16
  %v3_b2bc = inttoptr i32 %v2_b2bc to i32*
  store i32 %v2_b2b0, i32* %v3_b2bc, align 4
  br i1 %v3_b2b8, label %dec_label_pc_b2c4, label %dec_label_pc_b158

dec_label_pc_b2c4:                                ; preds = %dec_label_pc_b25c, %dec_label_pc_b14c
  %v0_b2c4 = call i32 @function_e958()
  store i32 %v3_ae60, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b2d4, i1* %cpsr_z.global-to-local, align 1
  %v1_b2d8 = load i32, i32* @r5, align 4
  %v2_b2d8 = add i32 %v1_b2d8, 12
  %v3_b2d8 = inttoptr i32 %v2_b2d8 to i32*
  store i32 %v0_b2c4, i32* %v3_b2d8, align 4
  br i1 %v3_b2d4, label %dec_label_pc_b2e0, label %dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge

dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge:    ; preds = %dec_label_pc_b2c4
  %v1_b170.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b16c

dec_label_pc_b2e0:                                ; preds = %dec_label_pc_b2c4, %dec_label_pc_b158
  %v0_b2e0 = call i32 @function_e958()
  %v1_b2e0 = trunc i32 %v0_b2e0 to i8
  %v4_b2e430 = udiv i32 %v0_b2e0, 256
  %v1_b2e8 = trunc i32 %v4_b2e430 to i8
  %v2_b2e8 = load i32, i32* @r5, align 4
  %v3_b2e8 = add i32 %v2_b2e8, 5
  %v4_b2e8 = inttoptr i32 %v3_b2e8 to i8*
  store i8 %v1_b2e8, i8* %v4_b2e8, align 1
  store i32 %v3_ae64, i32* %r3.global-to-local, align 4
  %v1_b2f0 = load i32, i32* @r4, align 4
  %v9_b2f0 = icmp eq i32 %v3_ae64, %v1_b2f0
  store i1 %v9_b2f0, i1* %cpsr_z.global-to-local, align 1
  %v3_b2f4 = load i32, i32* @r5, align 4
  %v4_b2f4 = add i32 %v3_b2f4, 4
  %v5_b2f4 = inttoptr i32 %v4_b2f4 to i8*
  store i8 %v1_b2e0, i8* %v5_b2f4, align 1
  %v0_b2f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b2f8, label %dec_label_pc_b2fc, label %dec_label_pc_b2e0.dec_label_pc_b178_crit_edge

dec_label_pc_b2e0.dec_label_pc_b178_crit_edge:    ; preds = %dec_label_pc_b2e0
  %v1_b17c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b178

dec_label_pc_b2fc:                                ; preds = %dec_label_pc_b2e0, %dec_label_pc_b16c
  %v0_b2fc = call i32 @function_e958()
  %v1_b2fc = trunc i32 %v0_b2fc to i8
  store i32 %v3_ae68, i32* %ip.global-to-local, align 4
  %v4_b304 = sdiv i32 %v0_b2fc, 256
  store i32 %v4_b304, i32* %r3.global-to-local, align 4
  %v1_b308 = load i32, i32* @r4, align 4
  %v9_b308 = icmp eq i32 %v3_ae68, %v1_b308
  store i1 %v9_b308, i1* %cpsr_z.global-to-local, align 1
  %v3_b30c = load i32, i32* @r5, align 4
  %v4_b30c = add i32 %v3_b30c, 20
  %v5_b30c = inttoptr i32 %v4_b30c to i8*
  store i8 %v1_b2fc, i8* %v5_b30c, align 1
  %v0_b310 = load i32, i32* %r3.global-to-local, align 4
  %v1_b310 = trunc i32 %v0_b310 to i8
  %v2_b310 = load i32, i32* @r6, align 4
  %v3_b310 = add i32 %v2_b310, 1
  %v4_b310 = inttoptr i32 %v3_b310 to i8*
  store i8 %v1_b310, i8* %v4_b310, align 1
  %v0_b314 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b314, label %dec_label_pc_b318, label %dec_label_pc_b2fc.dec_label_pc_b184_crit_edge

dec_label_pc_b2fc.dec_label_pc_b184_crit_edge:    ; preds = %dec_label_pc_b2fc
  %v1_b188.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b184

dec_label_pc_b318:                                ; preds = %dec_label_pc_b2fc, %dec_label_pc_b178
  %v0_b318 = call i32 @function_e958()
  %v1_b318 = trunc i32 %v0_b318 to i8
  store i32 %v6_ad04, i32* %r1.global-to-local, align 4
  %v4_b320 = sdiv i32 %v0_b318, 256
  store i32 %v4_b320, i32* %r3.global-to-local, align 4
  %v1_b324 = load i32, i32* @r4, align 4
  %v9_b324 = icmp eq i32 %v6_ad04, %v1_b324
  store i1 %v9_b324, i1* %cpsr_z.global-to-local, align 1
  %v1_b328 = trunc i32 %v4_b320 to i8
  %v2_b328 = load i32, i32* @r6, align 4
  %v3_b328 = add i32 %v2_b328, 3
  %v4_b328 = inttoptr i32 %v3_b328 to i8*
  store i8 %v1_b328, i8* %v4_b328, align 1
  %v3_b32c = load i32, i32* @r6, align 4
  %v4_b32c = add i32 %v3_b32c, 2
  %v5_b32c = inttoptr i32 %v4_b32c to i8*
  store i8 %v1_b318, i8* %v5_b32c, align 1
  %v0_b330 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b330, label %dec_label_pc_b334, label %dec_label_pc_b318.dec_label_pc_b190_crit_edge

dec_label_pc_b318.dec_label_pc_b190_crit_edge:    ; preds = %dec_label_pc_b318
  %v1_b194.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b190

dec_label_pc_b334:                                ; preds = %dec_label_pc_b318, %dec_label_pc_b184
  %v0_b334 = call i32 @function_e958()
  store i32 %v6_ad20, i32* %r2.global-to-local, align 4
  %v1_b33c = load i32, i32* @r4, align 4
  %v9_b33c = icmp eq i32 %v6_ad20, %v1_b33c
  store i1 %v9_b33c, i1* %cpsr_z.global-to-local, align 1
  %v1_b340 = load i32, i32* @r6, align 4
  %v2_b340 = add i32 %v1_b340, 4
  %v3_b340 = inttoptr i32 %v2_b340 to i32*
  store i32 %v0_b334, i32* %v3_b340, align 4
  br i1 %v9_b33c, label %dec_label_pc_b348, label %dec_label_pc_b19c

dec_label_pc_b348:                                ; preds = %dec_label_pc_b334, %dec_label_pc_b190
  %v0_b348 = call i32 @function_e958()
  store i32 %v1_adf0, i32* %r3.global-to-local, align 4
  store i1 %v2_b350, i1* %cpsr_z.global-to-local, align 1
  %v1_b354 = load i32, i32* @r6, align 4
  %v2_b354 = add i32 %v1_b354, 8
  %v3_b354 = inttoptr i32 %v2_b354 to i32*
  store i32 %v0_b348, i32* %v3_b354, align 4
  br i1 %v2_b350, label %dec_label_pc_b1a8, label %dec_label_pc_b35c

dec_label_pc_b35c:                                ; preds = %dec_label_pc_b19c, %dec_label_pc_b348
  %v0_b35c = load i32, i32* @r5, align 4
  %v1_b35c = add i32 %v0_b35c, 40
  store i32 %v6_adc8, i32* @r1, align 4
  %v1_b364 = inttoptr i32 %v1_b35c to i8*
  %v2_b364 = call i32 @function_ead8(i8* %v1_b364)
  br label %dec_label_pc_b1a8

dec_label_pc_b36c:                                ; preds = %dec_label_pc_ae50
  store i32 %v6_adc8, i32* %r3.global-to-local, align 4
  %v1_b374 = add i32 %v6_adc8, 40
  store i32 %v1_b374, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b100.preheader

; uselistorder directives
  uselistorder i32 %v1_b374, { 1, 0 }
  uselistorder i32 %v4_b320, { 1, 0 }
  uselistorder i32 %v2_b2b0, { 1, 0 }
  uselistorder i32 %v3_b280, { 1, 0 }
  uselistorder i32 %v3_b25c, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b23c, { 1, 2, 0 }
  uselistorder i32 %v1_b238, { 2, 0, 3, 1 }
  uselistorder i32 %v0_b1c8, { 1, 0, 2 }
  uselistorder i32 %v0_b10c, { 2, 0, 1 }
  uselistorder i32 %v0_b100, { 1, 0 }
  uselistorder i1 %v2_b350, { 2, 3, 1, 0 }
  uselistorder i1 %v3_b2d4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b0e8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_af4c, { 1, 0 }
  uselistorder i32 %v1_af14, { 1, 0 }
  uselistorder i32 %v1_af10, { 1, 0 }
  uselistorder i32 %v1_af0c, { 1, 0 }
  uselistorder i32 %v1_aee8, { 1, 0 }
  uselistorder i32 %v1_aee4, { 1, 0 }
  uselistorder i32 %v1_aee0, { 1, 0 }
  uselistorder i32 %v1_aed4, { 1, 0 }
  uselistorder i32 %v1_aeb0, { 1, 0 }
  uselistorder i32 %v1_aea0, { 1, 0 }
  uselistorder i32 %v1_ae8c, { 2, 1, 0 }
  uselistorder i32 %v0_ae6c, { 1, 0, 2 }
  uselistorder i32 %v3_ae60, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ae54, { 3, 0, 1, 2 }
  uselistorder i32 %v0_ae50, { 0, 2, 1, 3 }
  uselistorder i1 %v7_ae48, { 1, 0 }
  uselistorder i1 %v7_ae1c, { 1, 0 }
  uselistorder i32 %v3_ae18, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_ae04, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_adf0, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_adc8, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_ad20, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_ad04, { 2, 5, 4, 3, 1, 0, 6 }
  uselistorder i32 %v1_acb4, { 1, 2, 0 }
  uselistorder i32 %v5_aca8, { 0, 2, 1 }
  uselistorder i32 %v6_ac4c, { 1, 2, 0 }
  uselistorder i32 %v2_ac34, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_ac18, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder label %dec_label_pc_b35c, { 1, 0 }
  uselistorder label %dec_label_pc_b254, { 1, 0 }
  uselistorder label %dec_label_pc_b1a8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b100.preheader, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b388(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b388:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b388 = load i32, i32* @r4, align 4
  %v12_b388 = load i32, i32* @r7, align 4
  %v1_b38c = urem i32 %arg1, 256
  store i32 %v1_b38c, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_b38c, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b3a4 = urem i32 %arg3, 256
  store i32 %v1_b3a4, i32* @r4, align 4
  %v2_b3a8 = call i32 @function_12178(i32 %v1_b38c, i32 4)
  %v0_b3ac = load i32, i32* @r5, align 4
  store i32 %v0_b3ac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_b3a8, i32* %fp.global-to-local, align 4
  %v0_b3bc = load i32, i32* @r4, align 4
  store i32 %v0_b3bc, i32* %r0.global-to-local, align 4
  %v5_b3c0 = inttoptr i32 %v0_b3ac to i32*
  %v6_b3c0 = call i32 @function_85e0(i32 %v0_b3bc, i32* %v5_b3c0, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_b3cc = urem i32 %v6_b3c0, 256
  store i32 %v1_b3cc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b3d8 = load i32, i32* @r5, align 4
  store i32 %v0_b3d8, i32* %r1.global-to-local, align 4
  %v0_b3dc = load i32, i32* @r4, align 4
  store i32 %v0_b3dc, i32* %r0.global-to-local, align 4
  %v5_b3e0 = trunc i32 %v6_b3c0 to i8
  %v6_b3e4 = inttoptr i32 %v0_b3d8 to i32*
  %v7_b3e4 = call i32 @function_85e0(i32 %v0_b3dc, i32* %v6_b3e4, i32 3, i32 65535, i32 %v6_b3c0)
  %v0_b3e8 = load i32, i32* @r5, align 4
  store i32 %v0_b3e8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b3f8 = load i32, i32* @r4, align 4
  store i32 %v0_b3f8, i32* %r0.global-to-local, align 4
  %v5_b3fc = inttoptr i32 %v0_b3e8 to i32*
  %v6_b3fc = call i32 @function_85e0(i32 %v0_b3f8, i32* %v5_b3fc, i32 4, i32 64, i32 %v7_b3e4)
  %v1_b404 = urem i32 %v6_b3fc, 256
  store i32 %v1_b404, i32* %ip.global-to-local, align 4
  %v0_b408 = load i32, i32* @r5, align 4
  store i32 %v0_b408, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b414 = load i32, i32* @r4, align 4
  store i32 %v0_b414, i32* %r0.global-to-local, align 4
  %sext9 = mul i32 %v6_b3fc, 16777216
  %v5_b41c = sdiv i32 %sext9, 16777216
  %v6_b41c = inttoptr i32 %v0_b408 to i32*
  %v7_b41c = call i32 @function_85e0(i32 %v0_b414, i32* %v6_b41c, i32 5, i32 1, i32 %v5_b41c)
  %v1_b428 = urem i32 %v7_b41c, 256
  store i32 %v1_b428, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b434 = load i32, i32* @r5, align 4
  store i32 %v0_b434, i32* %r1.global-to-local, align 4
  %v0_b438 = load i32, i32* @r4, align 4
  store i32 %v0_b438, i32* %r0.global-to-local, align 4
  %v5_b440 = inttoptr i32 %v0_b434 to i32*
  %v6_b440 = call i32 @function_85e0(i32 %v0_b438, i32* %v5_b440, i32 6, i32 65535, i32 %v1_b428)
  %v0_b448 = load i32, i32* @r5, align 4
  store i32 %v0_b448, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b440, i32* @r7, align 4
  %v0_b458 = load i32, i32* @r4, align 4
  store i32 %v0_b458, i32* %r0.global-to-local, align 4
  %v5_b45c = inttoptr i32 %v0_b448 to i32*
  %v6_b45c = call i32 @function_85e0(i32 %v0_b458, i32* %v5_b45c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b464 = load i32, i32* @r5, align 4
  store i32 %v0_b464, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_b45c, i32* @r6, align 4
  %v0_b474 = load i32, i32* @r4, align 4
  store i32 %v0_b474, i32* %r0.global-to-local, align 4
  %v5_b478 = inttoptr i32 %v0_b464 to i32*
  %v6_b478 = call i32 @function_85e0(i32 %v0_b474, i32* %v5_b478, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b47c = load i32, i32* @r5, align 4
  store i32 %v0_b47c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b48c = load i32, i32* @r4, align 4
  store i32 %v0_b48c, i32* %r0.global-to-local, align 4
  %v5_b490 = inttoptr i32 %v0_b47c to i32*
  %v6_b490 = call i32 @function_85e0(i32 %v0_b48c, i32* %v5_b490, i32 18, i32 0, i32 %v6_b478)
  %v0_b494 = load i32, i32* @r5, align 4
  store i32 %v0_b494, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4a4 = load i32, i32* @r4, align 4
  store i32 %v0_b4a4, i32* %r0.global-to-local, align 4
  %v5_b4a8 = inttoptr i32 %v0_b494 to i32*
  %v6_b4a8 = call i32 @function_85e0(i32 %v0_b4a4, i32* %v5_b4a8, i32 11, i32 0, i32 %v6_b490)
  %v0_b4ac = load i32, i32* @r5, align 4
  store i32 %v0_b4ac, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4bc = load i32, i32* @r4, align 4
  store i32 %v0_b4bc, i32* %r0.global-to-local, align 4
  %v5_b4c0 = inttoptr i32 %v0_b4ac to i32*
  %v6_b4c0 = call i32 @function_85e0(i32 %v0_b4bc, i32* %v5_b4c0, i32 12, i32 0, i32 %v6_b4a8)
  %v0_b4c4 = load i32, i32* @r5, align 4
  store i32 %v0_b4c4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4d4 = load i32, i32* @r4, align 4
  store i32 %v0_b4d4, i32* %r0.global-to-local, align 4
  %v5_b4d8 = inttoptr i32 %v0_b4c4 to i32*
  %v6_b4d8 = call i32 @function_85e0(i32 %v0_b4d4, i32* %v5_b4d8, i32 13, i32 0, i32 %v6_b4c0)
  %v0_b4dc = load i32, i32* @r5, align 4
  store i32 %v0_b4dc, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4ec = load i32, i32* @r4, align 4
  store i32 %v0_b4ec, i32* %r0.global-to-local, align 4
  %v5_b4f0 = inttoptr i32 %v0_b4dc to i32*
  %v6_b4f0 = call i32 @function_85e0(i32 %v0_b4ec, i32* %v5_b4f0, i32 14, i32 0, i32 %v6_b4d8)
  %v0_b4f4 = load i32, i32* @r5, align 4
  store i32 %v0_b4f4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b504 = load i32, i32* @r4, align 4
  store i32 %v0_b504, i32* %r0.global-to-local, align 4
  %v5_b508 = inttoptr i32 %v0_b4f4 to i32*
  %v6_b508 = call i32 @function_85e0(i32 %v0_b504, i32* %v5_b508, i32 15, i32 1, i32 %v6_b4f0)
  %v0_b50c = load i32, i32* @r5, align 4
  store i32 %v0_b50c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b51c = load i32, i32* @r4, align 4
  store i32 %v0_b51c, i32* %r0.global-to-local, align 4
  %v5_b520 = inttoptr i32 %v0_b50c to i32*
  %v6_b520 = call i32 @function_85e0(i32 %v0_b51c, i32* %v5_b520, i32 16, i32 0, i32 %v6_b508)
  %v2_b52c = load i32, i32* @global_var_1c5dc.51, align 4
  store i32 %v2_b52c, i32* %r3.global-to-local, align 4
  %v0_b530 = load i32, i32* @r5, align 4
  store i32 %v0_b530, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b538 = load i32, i32* @r4, align 4
  store i32 %v0_b538, i32* %r0.global-to-local, align 4
  %v5_b53c = inttoptr i32 %v0_b530 to i32*
  %v6_b53c = call i32 @function_8574(i32 %v0_b538, i32* %v5_b53c, i32 25, i32 %v2_b52c, i32 %v6_b520)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b550 = call i32 @function_11e8c(i32 2, i32 3, i32 6)
  store i32 %v3_b550, i32* %r0.global-to-local, align 4
  %v7_b554 = icmp eq i32 %v3_b550, -1
  store i1 %v7_b554, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b550, i32* %sb.global-to-local, align 4
  br i1 %v7_b554, label %dec_label_pc_bac8, label %dec_label_pc_b560

dec_label_pc_b560:                                ; preds = %dec_label_pc_b388
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b568 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b568, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b57c = call i32 @function_11e5c(i32 %v3_b550, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_b57c, i32* %r0.global-to-local, align 4
  %v7_b580 = icmp eq i32 %v6_b57c, -1
  store i1 %v7_b580, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b580, label %dec_label_pc_bac0, label %dec_label_pc_b588

dec_label_pc_b588:                                ; preds = %dec_label_pc_b560
  %v3_b58c = mul i32 %v7_b3e4, 65536
  store i32 %v3_b58c, i32* %r4.global-to-local, align 4
  %v3_b590 = urem i32 %v7_b3e4, 65536
  %v0_b5a0 = load i32, i32* @r7, align 4
  %v3_b5a0 = mul i32 %v0_b5a0, 65536
  store i32 %v3_b5a0, i32* %r0.global-to-local, align 4
  %v0_b5a4 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b5ac = urem i32 %v0_b5a0, 65536
  store i32 %v3_b5ac, i32* %ip.global-to-local, align 4
  %v3_b5b0 = urem i32 %v0_b5a4, 65536
  store i32 %v3_b5b0, i32* %r2.global-to-local, align 4
  %v1_b5b4 = urem i32 %v6_b4a8, 256
  store i32 %v1_b5b4, i32* %r3.global-to-local, align 4
  %v0_b5b8 = load i32, i32* @sl, align 4
  %v2_b5b8 = icmp eq i32 %v0_b5b8, 0
  store i1 %v2_b5b8, i1* %cpsr_z.global-to-local, align 1
  %tmp69 = icmp slt i32 %v0_b5b8, 1
  br i1 %tmp69, label %dec_label_pc_b86c, label %dec_label_pc_b5cc

dec_label_pc_b5cc:                                ; preds = %dec_label_pc_b588
  %v3_b5d4 = mul i32 %v6_b478, 65536
  store i32 %v3_b5d4, i32* @lr, align 4
  %v1_b5e4 = urem i32 %v0_b5a4, 256
  %tmp70 = udiv i32 %v0_b5a0, 256
  %v3_b5e8 = urem i32 %tmp70, 256
  %v1_b5ec = urem i32 %v0_b5a0, 256
  %v4_b5f0 = mul nuw nsw i32 %v1_b5ec, 256
  %v5_b5f0 = or i32 %v4_b5f0, %v3_b5e8
  store i32 %v5_b5f0, i32* @r7, align 4
  %tmp71 = udiv i32 %v7_b3e4, 256
  %tmp72 = mul i32 %v6_b478, 256
  %v1_b60c = and i32 %tmp72, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %v1_b610 = urem i32 %v6_b4a8, 2
  %v3_b614 = mul nuw nsw i32 %v1_b5e4, 256
  store i32 %v3_b614, i32* %r1.global-to-local, align 4
  %v5_b618 = trunc i32 %tmp71 to i8
  %tmp73 = udiv i32 %v0_b5a4, 256
  %v4_b61c = urem i32 %tmp73, 256
  %v5_b61c = or i32 %v4_b61c, %v3_b614
  store i32 %v5_b61c, i32* @r6, align 4
  %v1_b620 = urem i32 %v6_b4c0, 2
  %v1_b624 = urem i32 %v6_b4d8, 2
  %tmp74 = udiv i32 %v6_b478, 256
  %v4_b628 = urem i32 %tmp74, 256
  %v5_b628 = or i32 %v4_b628, %v1_b60c
  store i32 %v5_b628, i32* @r5, align 4
  %v1_b648 = urem i32 %v6_b4f0, 2
  %v1_b64c = urem i32 %v6_b508, 2
  %v1_b658 = urem i32 %v6_b520, 2
  store i32 %v1_b658, i32* %r0.global-to-local, align 4
  %v3_b65c = udiv i32 %v7_b3e4, 65536
  store i32 %v3_b65c, i32* %r2.global-to-local, align 4
  store i32 %v1_b5ec, i32* %r3.global-to-local, align 4
  store i32 %v1_b5e4, i32* %ip.global-to-local, align 4
  %v5_b674 = trunc i32 %v0_b5a4 to i8
  store i32 0, i32* @r4, align 4
  %tmp = sub nsw i32 0, %v1_b610
  %v4_b738 = and i32 %tmp, 32
  %tmp77 = sub nsw i32 0, %v1_b620
  %v4_b74c = and i32 %tmp77, 16
  %tmp78 = sub nsw i32 0, %v1_b624
  %v4_b760 = and i32 %tmp78, 8
  %tmp79 = sub nsw i32 0, %v1_b648
  %v4_b774 = and i32 %tmp79, 4
  %tmp80 = sub nsw i32 0, %v1_b64c
  %v3_b788 = and i32 %tmp80, 2
  %v7_b7b8 = sext i8 %v5_b674 to i32
  %sext = mul i32 %v0_b5a0, 16777216
  %v3_b7b8 = sdiv i32 %sext, 16777216
  br label %dec_label_pc_b67c

dec_label_pc_b67c:                                ; preds = %bb76, %dec_label_pc_b5cc
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_b684 = call i32 @function_12178(i32 128, i32 1)
  store i32 %v2_b684, i32* %r0.global-to-local, align 4
  %v3_b688 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b688, i32* %r2.global-to-local, align 4
  %v1_b68c = load i32, i32* %fp.global-to-local, align 4
  %v2_b68c = load i32, i32* @r4, align 4
  %v5_b68c = mul i32 %v2_b68c, 4
  %v6_b68c = add i32 %v5_b68c, %v1_b68c
  %v7_b68c = inttoptr i32 %v6_b68c to i32*
  store i32 %v2_b684, i32* %v7_b68c, align 4
  %v0_b690 = load i32, i32* %fp.global-to-local, align 4
  %v1_b690 = load i32, i32* %r2.global-to-local, align 4
  %v4_b690 = mul i32 %v1_b690, 4
  %v5_b690 = add i32 %v4_b690, %v0_b690
  %v6_b690 = inttoptr i32 %v5_b690 to i32*
  %v7_b690 = load i32, i32* %v6_b690, align 4
  store i32 %v7_b690, i32* %r4.global-to-local, align 4
  %v1_b694 = inttoptr i32 %v7_b690 to i8*
  %v2_b694 = load i8, i8* %v1_b694, align 1
  %tmp81 = urem i8 %v2_b694, 16
  %v1_b698 = zext i8 %tmp81 to i32
  %v1_b69c = or i32 %v1_b698, 64
  store i32 %v1_b69c, i32* %r3.global-to-local, align 4
  %v1_b6a0 = trunc i32 %v1_b69c to i8
  store i8 %v1_b6a0, i8* %v1_b694, align 1
  %v0_b6a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b6a4 = inttoptr i32 %v0_b6a4 to i8*
  %v2_b6a4 = load i8, i8* %v1_b6a4, align 1
  %v1_b6a8 = and i8 %v2_b6a4, -16
  %v1_b6ac = or i8 %v1_b6a8, 5
  store i32 %v1_b428, i32* %r0.global-to-local, align 4
  store i8 %v1_b6ac, i8* %v1_b6a4, align 1
  %v2_b6bc = load i32, i32* %r4.global-to-local, align 4
  %v3_b6bc = add i32 %v2_b6bc, 1
  %v4_b6bc = inttoptr i32 %v3_b6bc to i8*
  store i8 %v5_b3e0, i8* %v4_b6bc, align 1
  store i32 %v5_b41c, i32* %r2.global-to-local, align 4
  %v2_b6c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6c8 = add i32 %v2_b6c8, 4
  %v4_b6c8 = inttoptr i32 %v3_b6c8 to i8*
  store i8 %v5_b618, i8* %v4_b6c8, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_b6d4 = load i32, i32* %r0.global-to-local, align 4
  %v2_b6d4 = icmp eq i32 %v0_b6d4, 0
  store i1 %v2_b6d4, i1* %cpsr_z.global-to-local, align 1
  %v2_b6d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6d8 = add i32 %v2_b6d8, 3
  %v4_b6d8 = inttoptr i32 %v3_b6d8 to i8*
  store i8 60, i8* %v4_b6d8, align 1
  store i32 %v3_b65c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b6e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b6e4 = trunc i32 %v0_b6e4 to i8
  %v2_b6e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6e4 = add i32 %v2_b6e4, 8
  %v4_b6e4 = inttoptr i32 %v3_b6e4 to i8*
  store i8 %v1_b6e4, i8* %v4_b6e4, align 1
  %v0_b6e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_b6e8 = trunc i32 %v0_b6e8 to i8
  %v2_b6e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6e8 = add i32 %v2_b6e8, 9
  %v4_b6e8 = inttoptr i32 %v3_b6e8 to i8*
  store i8 %v1_b6e8, i8* %v4_b6e8, align 1
  %v0_b6ec = load i32, i32* %r3.global-to-local, align 4
  %v1_b6ec = trunc i32 %v0_b6ec to i8
  %v2_b6ec = load i32, i32* %r4.global-to-local, align 4
  %v3_b6ec = add i32 %v2_b6ec, 2
  %v4_b6ec = inttoptr i32 %v3_b6ec to i8*
  store i8 %v1_b6ec, i8* %v4_b6ec, align 1
  %v3_b6f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b6f0, i32* %r2.global-to-local, align 4
  %v0_b6f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6f4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b67c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b6f8 = load i32, i32* %r4.global-to-local, align 4
  %v4_b6f8 = add i32 %v3_b6f8, 6
  %v5_b6f8 = inttoptr i32 %v4_b6f8 to i8*
  store i8 64, i8* %v5_b6f8, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b67c, %bb
  %v0_b6fc = load i32, i32* %r0.global-to-local, align 4
  %v1_b6fc = trunc i32 %v0_b6fc to i8
  %v2_b6fc = load i32, i32* %r4.global-to-local, align 4
  %v3_b6fc = add i32 %v2_b6fc, 5
  %v4_b6fc = inttoptr i32 %v3_b6fc to i8*
  store i8 %v1_b6fc, i8* %v4_b6fc, align 1
  %v0_b700 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b700, label %.thread8, label %bb75

.thread8:                                         ; preds = %.thread
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  br label %bb76

bb75:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  %v3_b708 = load i32, i32* %r4.global-to-local, align 4
  %v4_b708 = add i32 %v3_b708, 7
  %v5_b708 = inttoptr i32 %v4_b708 to i8*
  store i8 0, i8* %v5_b708, align 1
  %v0_b710.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %.thread8, %bb75
  %v0_b710 = phi i32 [ %v6_b53c, %.thread8 ], [ %v0_b710.pre, %bb75 ]
  %v0_b70c = load i32, i32* %r2.global-to-local, align 4
  %v3_b70c = mul i32 %v0_b70c, 32
  store i32 %v3_b70c, i32* %r3.global-to-local, align 4
  %v1_b710 = load i32, i32* %r4.global-to-local, align 4
  %v2_b710 = add i32 %v1_b710, 12
  %v3_b710 = inttoptr i32 %v2_b710 to i32*
  store i32 %v0_b710, i32* %v3_b710, align 4
  %v0_b714 = load i32, i32* %r3.global-to-local, align 4
  %v1_b714 = load i32, i32* %r2.global-to-local, align 4
  %tmp82 = mul i32 %v1_b714, -8
  %v5_b714 = add i32 %v0_b714, %tmp82
  %v1_b718 = load i32, i32* @r8, align 4
  %v2_b718 = add i32 %v1_b718, %v5_b714
  store i32 %v2_b718, i32* %r3.global-to-local, align 4
  %v1_b71c = add i32 %v2_b718, 16
  %v2_b71c = inttoptr i32 %v1_b71c to i32*
  %v3_b71c = load i32, i32* %v2_b71c, align 4
  store i32 %v3_b71c, i32* %r2.global-to-local, align 4
  %v0_b720 = load i32, i32* @r7, align 4
  %v1_b720 = trunc i32 %v0_b720 to i8
  %v2_b720 = load i32, i32* %r4.global-to-local, align 4
  %v3_b720 = add i32 %v2_b720, 20
  %v4_b720 = inttoptr i32 %v3_b720 to i8*
  store i8 %v1_b720, i8* %v4_b720, align 1
  %v0_b724 = load i32, i32* %r2.global-to-local, align 4
  %v1_b724 = load i32, i32* %r4.global-to-local, align 4
  %v2_b724 = add i32 %v1_b724, 16
  %v3_b724 = inttoptr i32 %v2_b724 to i32*
  store i32 %v0_b724, i32* %v3_b724, align 4
  %v0_b728 = load i32, i32* %r4.global-to-local, align 4
  %v1_b728 = add i32 %v0_b728, 20
  store i32 %v1_b728, i32* %r1.global-to-local, align 4
  %v1_b72c = add i32 %v0_b728, 33
  %v2_b72c = inttoptr i32 %v1_b72c to i8*
  %v3_b72c = load i8, i8* %v2_b72c, align 1
  %v4_b72c = zext i8 %v3_b72c to i32
  store i32 %v1_b610, i32* %r2.global-to-local, align 4
  %v1_b734 = and i32 %v4_b72c, 223
  %v5_b738 = or i32 %v1_b734, %v4_b738
  store i32 %v5_b738, i32* %r3.global-to-local, align 4
  %v1_b73c = trunc i32 %v5_b738 to i8
  store i8 %v1_b73c, i8* %v2_b72c, align 1
  %v0_b740 = load i32, i32* %r1.global-to-local, align 4
  %v1_b740 = add i32 %v0_b740, 13
  %v2_b740 = inttoptr i32 %v1_b740 to i8*
  %v3_b740 = load i8, i8* %v2_b740, align 1
  %v4_b740 = zext i8 %v3_b740 to i32
  store i32 %v1_b620, i32* %r3.global-to-local, align 4
  %v1_b748 = and i32 %v4_b740, 239
  %v5_b74c = or i32 %v1_b748, %v4_b74c
  store i32 %v5_b74c, i32* %r2.global-to-local, align 4
  %v1_b750 = trunc i32 %v5_b74c to i8
  store i8 %v1_b750, i8* %v2_b740, align 1
  %v0_b754 = load i32, i32* %r1.global-to-local, align 4
  %v1_b754 = add i32 %v0_b754, 13
  %v2_b754 = inttoptr i32 %v1_b754 to i8*
  %v3_b754 = load i8, i8* %v2_b754, align 1
  %v4_b754 = zext i8 %v3_b754 to i32
  store i32 %v1_b624, i32* %ip.global-to-local, align 4
  %v1_b75c = and i32 %v4_b754, 247
  %v5_b760 = or i32 %v1_b75c, %v4_b760
  store i32 %v5_b760, i32* %r3.global-to-local, align 4
  %v1_b764 = trunc i32 %v5_b760 to i8
  store i8 %v1_b764, i8* %v2_b754, align 1
  %v0_b768 = load i32, i32* %r1.global-to-local, align 4
  %v1_b768 = add i32 %v0_b768, 13
  %v2_b768 = inttoptr i32 %v1_b768 to i8*
  %v3_b768 = load i8, i8* %v2_b768, align 1
  %v4_b768 = zext i8 %v3_b768 to i32
  store i32 %v1_b648, i32* %r0.global-to-local, align 4
  %v1_b770 = and i32 %v4_b768, 251
  %v5_b774 = or i32 %v1_b770, %v4_b774
  store i32 %v5_b774, i32* %r2.global-to-local, align 4
  %v1_b778 = trunc i32 %v5_b774 to i8
  store i8 %v1_b778, i8* %v2_b768, align 1
  %v0_b77c = load i32, i32* %r1.global-to-local, align 4
  %v1_b77c = add i32 %v0_b77c, 13
  %v2_b77c = inttoptr i32 %v1_b77c to i8*
  %v3_b77c = load i8, i8* %v2_b77c, align 1
  %v4_b77c = zext i8 %v3_b77c to i32
  store i32 %v1_b64c, i32* %r2.global-to-local, align 4
  %v1_b784 = and i32 %v4_b77c, 253
  %v4_b788 = or i32 %v1_b784, %v3_b788
  store i32 %v4_b788, i32* %r3.global-to-local, align 4
  %v1_b78c = trunc i32 %v4_b788 to i8
  store i8 %v1_b78c, i8* %v2_b77c, align 1
  %v0_b790 = load i32, i32* %r1.global-to-local, align 4
  %v1_b790 = add i32 %v0_b790, 12
  %v2_b790 = inttoptr i32 %v1_b790 to i8*
  %v3_b790 = load i8, i8* %v2_b790, align 1
  %v4_b790 = zext i8 %v3_b790 to i32
  store i32 %v4_b790, i32* %r2.global-to-local, align 4
  %v1_b794 = add i32 %v0_b790, 13
  %v2_b794 = inttoptr i32 %v1_b794 to i8*
  %v3_b794 = load i8, i8* %v2_b794, align 1
  %v4_b794 = zext i8 %v3_b794 to i32
  %tmp83 = urem i8 %v3_b790, 16
  %v1_b79c = zext i8 %tmp83 to i32
  %v1_b7a0 = and i32 %v4_b794, 254
  %v2_b7a4 = or i32 %v1_b7a0, %v1_b658
  %v1_b7a8 = or i32 %v1_b79c, 160
  store i32 %v1_b7a8, i32* %r2.global-to-local, align 4
  %v1_b7ac = trunc i32 %v2_b7a4 to i8
  store i8 %v1_b7ac, i8* %v2_b794, align 1
  %v0_b7b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b7b0 = trunc i32 %v0_b7b0 to i8
  %v2_b7b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b7b0 = add i32 %v2_b7b0, 12
  %v4_b7b0 = inttoptr i32 %v3_b7b0 to i8*
  store i8 %v1_b7b0, i8* %v4_b7b0, align 1
  store i32 %v3_b7b8, i32* %r0.global-to-local, align 4
  store i32 %v7_b7b8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_b7c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_b7c4 = add i32 %v2_b7c4, 3
  %v4_b7c4 = inttoptr i32 %v3_b7c4 to i8*
  store i8 %v5_b674, i8* %v4_b7c4, align 1
  %v0_b7c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_b7c8 = trunc i32 %v0_b7c8 to i8
  %v2_b7c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_b7c8 = add i32 %v2_b7c8, 1
  %v4_b7c8 = inttoptr i32 %v3_b7c8 to i8*
  store i8 %v1_b7c8, i8* %v4_b7c8, align 1
  %v0_b7cc = load i32, i32* @r6, align 4
  %v1_b7cc = trunc i32 %v0_b7cc to i8
  %v2_b7cc = load i32, i32* %r1.global-to-local, align 4
  %v3_b7cc = add i32 %v2_b7cc, 2
  %v4_b7cc = inttoptr i32 %v3_b7cc to i8*
  store i8 %v1_b7cc, i8* %v4_b7cc, align 1
  %v0_b7d0 = load i32, i32* @r5, align 4
  %v1_b7d0 = load i32, i32* %r1.global-to-local, align 4
  %v2_b7d0 = add i32 %v1_b7d0, 4
  %v3_b7d0 = inttoptr i32 %v2_b7d0 to i32*
  store i32 %v0_b7d0, i32* %v3_b7d0, align 4
  %v0_b7d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_b7d4 = trunc i32 %v0_b7d4 to i8
  %v2_b7d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b7d4 = add i32 %v2_b7d4, 41
  %v4_b7d4 = inttoptr i32 %v3_b7d4 to i8*
  store i8 %v1_b7d4, i8* %v4_b7d4, align 1
  %v0_b7d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7d8 = trunc i32 %v0_b7d8 to i8
  %v2_b7d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b7d8 = add i32 %v2_b7d8, 40
  %v4_b7d8 = inttoptr i32 %v3_b7d8 to i8*
  store i8 %v1_b7d8, i8* %v4_b7d8, align 1
  %v0_b7dc = call i32 @function_e958()
  %v1_b7e0 = mul i32 %v0_b7dc, 256
  %v1_b7e4 = and i32 %v1_b7e0, 3840
  %v1_b7e8 = or i32 %v1_b7e4, 356352
  %v3_b7f0 = add nuw nsw i32 %v1_b7e8, 2048
  %v1_b7f4 = and i32 %v3_b7f0, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v3_b7fc7 = udiv i32 %v1_b7f4, 256
  store i32 %v3_b7fc7, i32* %r1.global-to-local, align 4
  %v0_b800 = load i32, i32* %r4.global-to-local, align 4
  %v1_b800 = add i32 %v0_b800, 42
  store i32 %v1_b800, i32* %r2.global-to-local, align 4
  %v4_b804 = inttoptr i32 %v1_b800 to i8*
  store i8 5, i8* %v4_b804, align 1
  %v0_b808 = load i32, i32* %r1.global-to-local, align 4
  %v1_b808 = trunc i32 %v0_b808 to i8
  %v2_b808 = load i32, i32* %r2.global-to-local, align 4
  %v3_b808 = add i32 %v2_b808, 1
  %v4_b808 = inttoptr i32 %v3_b808 to i8*
  store i8 %v1_b808, i8* %v4_b808, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_b814 = load i32, i32* %r4.global-to-local, align 4
  %v3_b814 = add i32 %v2_b814, 47
  %v4_b814 = inttoptr i32 %v3_b814 to i8*
  store i8 10, i8* %v4_b814, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b820 = load i32, i32* %r3.global-to-local, align 4
  %v1_b820 = trunc i32 %v0_b820 to i8
  %v2_b820 = load i32, i32* %r4.global-to-local, align 4
  %v3_b820 = add i32 %v2_b820, 46
  %v4_b820 = inttoptr i32 %v3_b820 to i8*
  store i8 %v1_b820, i8* %v4_b820, align 1
  %v0_b824 = load i32, i32* %r2.global-to-local, align 4
  %v1_b824 = trunc i32 %v0_b824 to i8
  %v2_b824 = load i32, i32* %r4.global-to-local, align 4
  %v3_b824 = add i32 %v2_b824, 45
  %v4_b824 = inttoptr i32 %v3_b824 to i8*
  store i8 %v1_b824, i8* %v4_b824, align 1
  %v0_b828 = load i32, i32* %r0.global-to-local, align 4
  %v1_b828 = trunc i32 %v0_b828 to i8
  %v2_b828 = load i32, i32* %r4.global-to-local, align 4
  %v3_b828 = add i32 %v2_b828, 44
  %v4_b828 = inttoptr i32 %v3_b828 to i8*
  store i8 %v1_b828, i8* %v4_b828, align 1
  %v0_b82c = call i32 @function_e958()
  store i32 %v0_b82c, i32* %r0.global-to-local, align 4
  %v2_b834 = load i32, i32* %r4.global-to-local, align 4
  %v3_b834 = add i32 %v2_b834, 56
  %v4_b834 = inttoptr i32 %v3_b834 to i8*
  store i8 1, i8* %v4_b834, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_b844 = load i32, i32* %r4.global-to-local, align 4
  %v2_b844 = add i32 %v1_b844, 48
  %v3_b844 = inttoptr i32 %v2_b844 to i32*
  store i32 %v0_b82c, i32* %v3_b844, align 4
  %v0_b848 = load i32, i32* %r2.global-to-local, align 4
  %v1_b848 = trunc i32 %v0_b848 to i8
  %v2_b848 = load i32, i32* %r4.global-to-local, align 4
  %v3_b848 = add i32 %v2_b848, 58
  %v4_b848 = inttoptr i32 %v3_b848 to i8*
  store i8 %v1_b848, i8* %v4_b848, align 1
  %v0_b84c = load i32, i32* %r3.global-to-local, align 4
  %v1_b84c = trunc i32 %v0_b84c to i8
  %v2_b84c = load i32, i32* %r4.global-to-local, align 4
  %v3_b84c = add i32 %v2_b84c, 59
  %v4_b84c = inttoptr i32 %v3_b84c to i8*
  store i8 %v1_b84c, i8* %v4_b84c, align 1
  %v0_b850 = load i32, i32* %ip.global-to-local, align 4
  %v1_b850 = load i32, i32* %r4.global-to-local, align 4
  %v2_b850 = add i32 %v1_b850, 52
  %v3_b850 = inttoptr i32 %v2_b850 to i32*
  store i32 %v0_b850, i32* %v3_b850, align 4
  %v0_b854 = load i32, i32* %r2.global-to-local, align 4
  %v1_b854 = trunc i32 %v0_b854 to i8
  %v2_b854 = load i32, i32* %r4.global-to-local, align 4
  %v3_b854 = add i32 %v2_b854, 57
  %v4_b854 = inttoptr i32 %v3_b854 to i8*
  store i8 %v1_b854, i8* %v4_b854, align 1
  %v3_b858 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b858, i32* %r3.global-to-local, align 4
  %v1_b85c = add i32 %v3_b858, 1
  store i32 %v1_b85c, i32* @r4, align 4
  %v0_b860 = load i32, i32* @sl, align 4
  %v9_b860 = icmp eq i32 %v0_b860, %v1_b85c
  store i1 %v9_b860, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b85c, i32* %stack_var_-40, align 4
  %v8_b868 = icmp sgt i32 %v0_b860, %v1_b85c
  br i1 %v8_b868, label %dec_label_pc_b67c, label %dec_label_pc_b86c

dec_label_pc_b86c:                                ; preds = %bb76, %dec_label_pc_b588
  %v0_b86c = phi i32 [ %v0_b5b8, %dec_label_pc_b588 ], [ %v0_b860, %bb76 ]
  %v2_b86c = icmp eq i32 %v0_b86c, 0
  store i1 %v2_b86c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ba24 = icmp eq i32 %v3_b590, 65535
  %v2_baa0 = icmp eq i32 %v1_b5b4, 0
  %v2_b8a8 = icmp eq i32 %v6_b53c, -1
  %v7_b8a8 = icmp eq i32 %v6_b53c, -1
  br label %dec_label_pc_b874.outer

dec_label_pc_b874.outer:                          ; preds = %dec_label_pc_b9a0, %dec_label_pc_b86c
  %v1_b874.ph.in = phi i32 [ %v1_b994, %dec_label_pc_b9a0 ], [ %v0_b86c, %dec_label_pc_b86c ]
  %v0_b874.ph = phi i1 [ %v2_b9a0, %dec_label_pc_b9a0 ], [ %v2_b86c, %dec_label_pc_b86c ]
  %v1_b874.ph = icmp slt i32 %v1_b874.ph.in, 0
  %v4_b874 = or i1 %v1_b874.ph, %v0_b874.ph
  br label %dec_label_pc_b874

dec_label_pc_b874:                                ; preds = %dec_label_pc_b874.outer, %dec_label_pc_b874
  br i1 %v4_b874, label %dec_label_pc_b874, label %dec_label_pc_b878

dec_label_pc_b878:                                ; preds = %dec_label_pc_b874
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_b884

dec_label_pc_b884:                                ; preds = %dec_label_pc_b900, %dec_label_pc_b878
  %v1_b894 = phi i32 [ %v1_b990, %dec_label_pc_b900 ], [ 0, %dec_label_pc_b878 ]
  %v5_b888 = mul i32 %v1_b894, 24
  %v1_b88c = load i32, i32* @r8, align 4
  %v2_b88c = add i32 %v1_b88c, %v5_b888
  store i32 %v2_b88c, i32* %r3.global-to-local, align 4
  %v1_b890 = add i32 %v2_b88c, 20
  %v2_b890 = inttoptr i32 %v1_b890 to i8*
  %v3_b890 = load i8, i8* %v2_b890, align 1
  %v4_b890 = zext i8 %v3_b890 to i32
  store i32 %v4_b890, i32* %r2.global-to-local, align 4
  %v0_b894 = load i32, i32* %fp.global-to-local, align 4
  %v4_b894 = mul i32 %v1_b894, 4
  %v5_b894 = add i32 %v0_b894, %v4_b894
  %v6_b894 = inttoptr i32 %v5_b894 to i32*
  %v7_b894 = load i32, i32* %v6_b894, align 4
  store i32 %v7_b894, i32* @r5, align 4
  %v7_b898 = icmp eq i8 %v3_b890, 31
  store i1 %v7_b898, i1* %cpsr_z.global-to-local, align 1
  %v1_b89c = add i32 %v7_b894, 20
  store i32 %v1_b89c, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_b890, 32
  br i1 %tmp84, label %dec_label_pc_b9ac, label %dec_label_pc_b8a4

dec_label_pc_b8a4:                                ; preds = %dec_label_pc_b884
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  store i1 %v7_b8a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b8a8, label %dec_label_pc_ba14, label %dec_label_pc_b8b0

dec_label_pc_b8b0:                                ; preds = %dec_label_pc_b9ac, %dec_label_pc_b8a4
  store i32 %v3_b590, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ba24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ba24, label %dec_label_pc_ba30, label %dec_label_pc_b8c4

dec_label_pc_b8c4:                                ; preds = %dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge, %dec_label_pc_b8b0
  %v1_b8c8 = phi i32 [ %v1_b8c8.pre, %dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge ], [ 65535, %dec_label_pc_b8b0 ]
  store i32 %v3_b5ac, i32* %r3.global-to-local, align 4
  %v9_b8c8 = icmp eq i32 %v3_b5ac, %v1_b8c8
  store i1 %v9_b8c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8c8, label %dec_label_pc_ba4c, label %dec_label_pc_b8d0

dec_label_pc_b8d0:                                ; preds = %dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge, %dec_label_pc_b8c4
  %v1_b8d4 = phi i32 [ %v1_b8d4.pre, %dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge ], [ %v1_b8c8, %dec_label_pc_b8c4 ]
  store i32 %v3_b5b0, i32* %ip.global-to-local, align 4
  %v9_b8d4 = icmp eq i32 %v3_b5b0, %v1_b8d4
  store i1 %v9_b8d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8d4, label %dec_label_pc_ba68, label %dec_label_pc_b8dc

dec_label_pc_b8dc:                                ; preds = %dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge, %dec_label_pc_b8d0
  %v1_b8e0 = phi i32 [ %v1_b8e0.pre, %dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge ], [ %v1_b8d4, %dec_label_pc_b8d0 ]
  store i32 %v6_b478, i32* %r0.global-to-local, align 4
  %v9_b8e0 = icmp eq i32 %v6_b478, %v1_b8e0
  store i1 %v9_b8e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8e0, label %dec_label_pc_ba84, label %dec_label_pc_b8e8

dec_label_pc_b8e8:                                ; preds = %dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge, %dec_label_pc_b8dc
  %v1_b8ec = phi i32 [ %v1_b8ec.pre, %dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge ], [ %v1_b8e0, %dec_label_pc_b8dc ]
  store i32 %v6_b490, i32* %r2.global-to-local, align 4
  %v9_b8ec = icmp eq i32 %v6_b490, %v1_b8ec
  store i1 %v9_b8ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8ec, label %dec_label_pc_ba98, label %dec_label_pc_b8f4

dec_label_pc_b8f4:                                ; preds = %dec_label_pc_ba84, %dec_label_pc_b8e8
  store i32 %v1_b5b4, i32* %r3.global-to-local, align 4
  store i1 %v2_baa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_baa0, label %dec_label_pc_b900, label %dec_label_pc_baac

dec_label_pc_b900:                                ; preds = %dec_label_pc_b8f4, %dec_label_pc_ba98, %dec_label_pc_baac
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b904 = load i32, i32* %r7.global-to-local, align 4
  %v1_b904 = trunc i32 %v0_b904 to i8
  %v2_b904 = load i32, i32* @r5, align 4
  %v3_b904 = add i32 %v2_b904, 10
  %v4_b904 = inttoptr i32 %v3_b904 to i8*
  store i8 %v1_b904, i8* %v4_b904, align 1
  %v0_b908 = load i32, i32* %r7.global-to-local, align 4
  %v1_b908 = trunc i32 %v0_b908 to i8
  %v2_b908 = load i32, i32* @r5, align 4
  %v3_b908 = add i32 %v2_b908, 11
  %v4_b908 = inttoptr i32 %v3_b908 to i8*
  store i8 %v1_b908, i8* %v4_b908, align 1
  %v0_b90c = load i32, i32* @r5, align 4
  store i32 %v0_b90c, i32* @r0, align 4
  %v2_b910 = call i32 @function_d0b8(i32 %v0_b90c, i32 20)
  %v3_b910 = trunc i32 %v2_b910 to i8
  %v4_b91427 = udiv i32 %v2_b910, 256
  %v1_b918 = trunc i32 %v4_b91427 to i8
  %v2_b918 = load i32, i32* @r5, align 4
  %v3_b918 = add i32 %v2_b918, 11
  %v4_b918 = inttoptr i32 %v3_b918 to i8*
  store i8 %v1_b918, i8* %v4_b918, align 1
  %v3_b91c = load i32, i32* @r5, align 4
  %v4_b91c = add i32 %v3_b91c, 10
  %v5_b91c = inttoptr i32 %v4_b91c to i8*
  store i8 %v3_b910, i8* %v5_b91c, align 1
  %v0_b920 = load i32, i32* @r6, align 4
  store i32 %v0_b920, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_b92c = load i32, i32* %r7.global-to-local, align 4
  %v1_b92c = trunc i32 %v0_b92c to i8
  %v3_b92c = add i32 %v0_b920, 16
  %v4_b92c = inttoptr i32 %v3_b92c to i8*
  store i8 %v1_b92c, i8* %v4_b92c, align 1
  %v0_b930 = load i32, i32* %r7.global-to-local, align 4
  %v1_b930 = trunc i32 %v0_b930 to i8
  %v2_b930 = load i32, i32* @r6, align 4
  %v3_b930 = add i32 %v2_b930, 17
  %v4_b930 = inttoptr i32 %v3_b930 to i8*
  store i8 %v1_b930, i8* %v4_b930, align 1
  %v0_b934 = load i32, i32* @r5, align 4
  store i32 %v0_b934, i32* %r0.global-to-local, align 4
  %v4_b938 = call i32 @function_d114(i32 %v0_b934, i32 %v0_b920, i32 10240, i32 40)
  %v5_b938 = trunc i32 %v4_b938 to i8
  store i32 %v4_b938, i32* %r0.global-to-local, align 4
  %v4_b93c28 = udiv i32 %v4_b938, 256
  %v1_b940 = trunc i32 %v4_b93c28 to i8
  %v2_b940 = load i32, i32* @r6, align 4
  %v3_b940 = add i32 %v2_b940, 17
  %v4_b940 = inttoptr i32 %v3_b940 to i8*
  store i8 %v1_b940, i8* %v4_b940, align 1
  %v3_b944 = load i32, i32* @r6, align 4
  %v4_b944 = add i32 %v3_b944, 16
  %v5_b944 = inttoptr i32 %v4_b944 to i8*
  store i8 %v5_b938, i8* %v5_b944, align 1
  %v3_b948 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b948, i32* %r3.global-to-local, align 4
  %v0_b94c = load i32, i32* @r5, align 4
  %v1_b94c = add i32 %v0_b94c, 20
  %v2_b94c = inttoptr i32 %v1_b94c to i32*
  %v3_b94c = load i32, i32* %v2_b94c, align 4
  %v3_b954 = udiv i32 %v3_b94c, 65536
  store i32 %v3_b954, i32* %r2.global-to-local, align 4
  %v5_b958 = mul i32 %v3_b948, 24
  %v1_b95c = load i32, i32* @r8, align 4
  %v2_b95c = add i32 %v1_b95c, %v5_b958
  store i32 %v2_b95c, i32* %ip.global-to-local, align 4
  %v3_b96026 = udiv i32 %v3_b94c, 16777216
  %v1_b964 = trunc i32 %v3_b96026 to i8
  %v3_b964 = add i32 %v2_b95c, 3
  %v4_b964 = inttoptr i32 %v3_b964 to i8*
  store i8 %v1_b964, i8* %v4_b964, align 1
  %v0_b968 = load i32, i32* %r2.global-to-local, align 4
  %v1_b968 = trunc i32 %v0_b968 to i8
  %v2_b968 = load i32, i32* %ip.global-to-local, align 4
  %v3_b968 = add i32 %v2_b968, 2
  %v4_b968 = inttoptr i32 %v3_b968 to i8*
  store i8 %v1_b968, i8* %v4_b968, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b970 = load i32, i32* @r5, align 4
  store i32 %v0_b970, i32* %r1.global-to-local, align 4
  %v0_b974 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_b974, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b980 = load i32, i32* %ip.global-to-local, align 4
  %v6_b988 = inttoptr i32 %v0_b970 to i32*
  %v7_b988 = call i32 @function_11e28(i32 %v0_b974, i32* %v6_b988, i32 60, i32 16384, i32 %v0_b980, i32 16)
  %v3_b98c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b98c, i32* %r3.global-to-local, align 4
  %v1_b990 = add i32 %v3_b98c, 1
  store i32 %v1_b990, i32* %r0.global-to-local, align 4
  %v1_b994 = load i32, i32* @sl, align 4
  %v9_b994 = icmp eq i32 %v1_b990, %v1_b994
  store i1 %v9_b994, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b990, i32* %stack_var_-40, align 4
  %v5_b99c = icmp slt i32 %v1_b990, %v1_b994
  br i1 %v5_b99c, label %dec_label_pc_b884, label %dec_label_pc_b9a0

dec_label_pc_b9a0:                                ; preds = %dec_label_pc_b900
  %v2_b9a0 = icmp eq i32 %v1_b994, 0
  store i1 %v2_b9a0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b874.outer

dec_label_pc_b9ac:                                ; preds = %dec_label_pc_b884
  %v1_b9ac = add i32 %v2_b88c, 16
  %v2_b9ac = inttoptr i32 %v1_b9ac to i32*
  %v3_b9ac = load i32, i32* %v2_b9ac, align 4
  store i32 %v3_b9ac, i32* %r4.global-to-local, align 4
  %v0_b9b0 = call i32 @function_e958()
  store i32 %v0_b9b0, i32* %r0.global-to-local, align 4
  %v3_b9b4 = load i32, i32* %stack_var_-40, align 4
  %v5_b9bc = mul i32 %v3_b9b4, 24
  %v0_b9c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b9c4 = load i32, i32* @r8, align 4
  %v2_b9c4 = add i32 %v1_b9c4, %v5_b9bc
  store i32 %v2_b9c4, i32* %r1.global-to-local, align 4
  %v1_b9c8 = and i32 %v0_b9c0, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_b9c8, i32* %r3.global-to-local, align 4
  %v1_b9c0 = udiv i32 %v0_b9c0, 256
  %v3_b9cc = and i32 %v1_b9c0, 65280
  store i32 %v3_b9cc, i32* %r2.global-to-local, align 4
  %v3_b9d0 = mul i32 %v0_b9c0, 16777216
  store i32 %v3_b9d0, i32* %ip.global-to-local, align 4
  %v1_b9d4 = add i32 %v2_b9c4, 20
  %v2_b9d4 = inttoptr i32 %v1_b9d4 to i8*
  %v3_b9d4 = load i8, i8* %v2_b9d4, align 1
  %v4_b9d4 = zext i8 %v3_b9d4 to i32
  %v4_b9d8 = mul i32 %v1_b9c8, 256
  %v5_b9d8 = or i32 %v4_b9d8, %v3_b9d0
  store i32 %v5_b9d8, i32* %ip.global-to-local, align 4
  %v4_b9dc = udiv i32 %v0_b9c0, 16777216
  %v5_b9dc = or i32 %v3_b9cc, %v4_b9dc
  %v2_b9e0 = or i32 %v5_b9dc, %v5_b9d8
  %v7_b9e4 = lshr i32 %v0_b9b0, %v4_b9d4
  %v8_b9e4 = add i32 %v7_b9e4, %v2_b9e0
  store i32 %v8_b9e4, i32* %r2.global-to-local, align 4
  %v3_b9f0 = mul i32 %v8_b9e4, 16777216
  %v1_b9e8 = mul i32 %v8_b9e4, 256
  %v4_b9f4 = and i32 %v1_b9e8, 16711680
  %v5_b9f4 = or i32 %v4_b9f4, %v3_b9f0
  store i32 %v5_b9f4, i32* %r1.global-to-local, align 4
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  %v2_ba04 = call i32 @llvm.bswap.i32(i32 %v8_b9e4)
  store i32 %v2_ba04, i32* %r3.global-to-local, align 4
  store i1 %v7_b8a8, i1* %cpsr_z.global-to-local, align 1
  %v1_ba0c = load i32, i32* @r5, align 4
  %v2_ba0c = add i32 %v1_ba0c, 16
  %v3_ba0c = inttoptr i32 %v2_ba0c to i32*
  store i32 %v2_ba04, i32* %v3_ba0c, align 4
  br i1 %v2_b8a8, label %dec_label_pc_ba14, label %dec_label_pc_b8b0

dec_label_pc_ba14:                                ; preds = %dec_label_pc_b9ac, %dec_label_pc_b8a4
  %v0_ba14 = call i32 @function_e958()
  store i32 %v0_ba14, i32* %r0.global-to-local, align 4
  store i32 %v3_b590, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ba24, i1* %cpsr_z.global-to-local, align 1
  %v1_ba28 = load i32, i32* @r5, align 4
  %v2_ba28 = add i32 %v1_ba28, 12
  %v3_ba28 = inttoptr i32 %v2_ba28 to i32*
  store i32 %v0_ba14, i32* %v3_ba28, align 4
  br i1 %v3_ba24, label %dec_label_pc_ba30, label %dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge

dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge:    ; preds = %dec_label_pc_ba14
  %v1_b8c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8c4

dec_label_pc_ba30:                                ; preds = %dec_label_pc_ba14, %dec_label_pc_b8b0
  %v0_ba30 = call i32 @function_e958()
  %v1_ba30 = trunc i32 %v0_ba30 to i8
  store i32 %v0_ba30, i32* %r0.global-to-local, align 4
  %v4_ba3429 = udiv i32 %v0_ba30, 256
  %v1_ba38 = trunc i32 %v4_ba3429 to i8
  %v2_ba38 = load i32, i32* @r5, align 4
  %v3_ba38 = add i32 %v2_ba38, 5
  %v4_ba38 = inttoptr i32 %v3_ba38 to i8*
  store i8 %v1_ba38, i8* %v4_ba38, align 1
  store i32 %v3_b5ac, i32* %r3.global-to-local, align 4
  %v1_ba40 = load i32, i32* @r4, align 4
  %v9_ba40 = icmp eq i32 %v3_b5ac, %v1_ba40
  store i1 %v9_ba40, i1* %cpsr_z.global-to-local, align 1
  %v3_ba44 = load i32, i32* @r5, align 4
  %v4_ba44 = add i32 %v3_ba44, 4
  %v5_ba44 = inttoptr i32 %v4_ba44 to i8*
  store i8 %v1_ba30, i8* %v5_ba44, align 1
  %v0_ba48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba48, label %dec_label_pc_ba4c, label %dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge

dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge:    ; preds = %dec_label_pc_ba30
  %v1_b8d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8d0

dec_label_pc_ba4c:                                ; preds = %dec_label_pc_ba30, %dec_label_pc_b8c4
  %v0_ba4c = call i32 @function_e958()
  %v1_ba4c = trunc i32 %v0_ba4c to i8
  store i32 %v0_ba4c, i32* %r0.global-to-local, align 4
  store i32 %v3_b5b0, i32* %ip.global-to-local, align 4
  %v4_ba54 = sdiv i32 %v0_ba4c, 256
  store i32 %v4_ba54, i32* %r3.global-to-local, align 4
  %v1_ba58 = load i32, i32* @r4, align 4
  %v9_ba58 = icmp eq i32 %v3_b5b0, %v1_ba58
  store i1 %v9_ba58, i1* %cpsr_z.global-to-local, align 1
  %v3_ba5c = load i32, i32* @r5, align 4
  %v4_ba5c = add i32 %v3_ba5c, 20
  %v5_ba5c = inttoptr i32 %v4_ba5c to i8*
  store i8 %v1_ba4c, i8* %v5_ba5c, align 1
  %v0_ba60 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba60 = trunc i32 %v0_ba60 to i8
  %v2_ba60 = load i32, i32* @r6, align 4
  %v3_ba60 = add i32 %v2_ba60, 1
  %v4_ba60 = inttoptr i32 %v3_ba60 to i8*
  store i8 %v1_ba60, i8* %v4_ba60, align 1
  %v0_ba64 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba64, label %dec_label_pc_ba68, label %dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge

dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge:    ; preds = %dec_label_pc_ba4c
  %v1_b8e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8dc

dec_label_pc_ba68:                                ; preds = %dec_label_pc_ba4c, %dec_label_pc_b8d0
  %v0_ba68 = call i32 @function_e958()
  %v1_ba68 = trunc i32 %v0_ba68 to i8
  %v4_ba6c = sdiv i32 %v0_ba68, 256
  store i32 %v4_ba6c, i32* %r3.global-to-local, align 4
  %v3_ba70 = load i32, i32* @r6, align 4
  %v4_ba70 = add i32 %v3_ba70, 2
  %v5_ba70 = inttoptr i32 %v4_ba70 to i8*
  store i8 %v1_ba68, i8* %v5_ba70, align 1
  store i32 %v6_b478, i32* %r0.global-to-local, align 4
  %v1_ba78 = load i32, i32* @r4, align 4
  %v9_ba78 = icmp eq i32 %v6_b478, %v1_ba78
  store i1 %v9_ba78, i1* %cpsr_z.global-to-local, align 1
  %v0_ba7c = load i32, i32* %r3.global-to-local, align 4
  %v1_ba7c = trunc i32 %v0_ba7c to i8
  %v2_ba7c = load i32, i32* @r6, align 4
  %v3_ba7c = add i32 %v2_ba7c, 3
  %v4_ba7c = inttoptr i32 %v3_ba7c to i8*
  store i8 %v1_ba7c, i8* %v4_ba7c, align 1
  %v0_ba80 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba80, label %dec_label_pc_ba84, label %dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge

dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge:    ; preds = %dec_label_pc_ba68
  %v1_b8ec.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8e8

dec_label_pc_ba84:                                ; preds = %dec_label_pc_ba68, %dec_label_pc_b8dc
  %v0_ba84 = call i32 @function_e958()
  store i32 %v0_ba84, i32* %r0.global-to-local, align 4
  store i32 %v6_b490, i32* %r2.global-to-local, align 4
  %v1_ba8c = load i32, i32* @r4, align 4
  %v9_ba8c = icmp eq i32 %v6_b490, %v1_ba8c
  store i1 %v9_ba8c, i1* %cpsr_z.global-to-local, align 1
  %v1_ba90 = load i32, i32* @r6, align 4
  %v2_ba90 = add i32 %v1_ba90, 4
  %v3_ba90 = inttoptr i32 %v2_ba90 to i32*
  store i32 %v0_ba84, i32* %v3_ba90, align 4
  br i1 %v9_ba8c, label %dec_label_pc_ba98, label %dec_label_pc_b8f4

dec_label_pc_ba98:                                ; preds = %dec_label_pc_ba84, %dec_label_pc_b8e8
  %v0_ba98 = call i32 @function_e958()
  store i32 %v0_ba98, i32* %r0.global-to-local, align 4
  store i32 %v1_b5b4, i32* %r3.global-to-local, align 4
  store i1 %v2_baa0, i1* %cpsr_z.global-to-local, align 1
  %v1_baa4 = load i32, i32* @r6, align 4
  %v2_baa4 = add i32 %v1_baa4, 8
  %v3_baa4 = inttoptr i32 %v2_baa4 to i32*
  store i32 %v0_ba98, i32* %v3_baa4, align 4
  br i1 %v2_baa0, label %dec_label_pc_b900, label %dec_label_pc_baac

dec_label_pc_baac:                                ; preds = %dec_label_pc_b8f4, %dec_label_pc_ba98
  %v0_baac = call i32 @function_e958()
  %v1_baac = trunc i32 %v0_baac to i8
  store i32 %v0_baac, i32* %r0.global-to-local, align 4
  %v4_bab0 = sdiv i32 %v0_baac, 256
  store i32 %v4_bab0, i32* %r3.global-to-local, align 4
  %v1_bab4 = trunc i32 %v4_bab0 to i8
  %v2_bab4 = load i32, i32* @r6, align 4
  %v3_bab4 = add i32 %v2_bab4, 19
  %v4_bab4 = inttoptr i32 %v3_bab4 to i8*
  store i8 %v1_bab4, i8* %v4_bab4, align 1
  %v3_bab8 = load i32, i32* @r6, align 4
  %v4_bab8 = add i32 %v3_bab8, 18
  %v5_bab8 = inttoptr i32 %v4_bab8 to i8*
  store i8 %v1_baac, i8* %v5_bab8, align 1
  br label %dec_label_pc_b900

dec_label_pc_bac0:                                ; preds = %dec_label_pc_b560
  %v0_bac0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_bac0, i32* %r0.global-to-local, align 4
  %v1_bac4 = call i32 @function_11574(i32 %v0_bac0)
  store i32 %v1_bac4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bac8

dec_label_pc_bac8:                                ; preds = %dec_label_pc_b388, %dec_label_pc_bac0
  %v29_bacc = phi i32 [ %v3_b550, %dec_label_pc_b388 ], [ %v1_bac4, %dec_label_pc_bac0 ]
  store i32 %v3_b388, i32* %r4.global-to-local, align 4
  store i32 %v12_b388, i32* %r7.global-to-local, align 4
  ret i32 %v29_bacc

; uselistorder directives
  uselistorder i32 %v4_bab0, { 1, 0 }
  uselistorder i32 %v0_baac, { 0, 2, 1 }
  uselistorder i32 %v0_ba4c, { 0, 2, 1 }
  uselistorder i32 %v0_ba30, { 0, 2, 1 }
  uselistorder i32 %v2_ba04, { 1, 0 }
  uselistorder i32 %v8_b9e4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_b9d0, { 1, 0 }
  uselistorder i32 %v0_b9c0, { 1, 0, 2, 3 }
  uselistorder i1 %v2_b9a0, { 1, 0 }
  uselistorder i32 %v1_b994, { 1, 2, 3, 0 }
  uselistorder i32 %v1_b990, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_b938, { 0, 2, 1 }
  uselistorder i32 %v0_b920, { 1, 0, 2 }
  uselistorder i1 %v7_b8a8, { 2, 1, 0 }
  uselistorder i1 %v2_baa0, { 2, 3, 1, 0 }
  uselistorder i1 %v3_ba24, { 3, 2, 0, 1 }
  uselistorder i32 %v1_b85c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_b674, { 1, 0 }
  uselistorder i32 %v3_b65c, { 1, 0 }
  uselistorder i32 %v1_b658, { 1, 0 }
  uselistorder i32 %v1_b64c, { 1, 0 }
  uselistorder i32 %v1_b648, { 1, 0 }
  uselistorder i32 %v1_b624, { 1, 0 }
  uselistorder i32 %v1_b620, { 1, 0 }
  uselistorder i32 %v3_b614, { 1, 0 }
  uselistorder i32 %v1_b610, { 1, 0 }
  uselistorder i32 %v1_b5ec, { 1, 0 }
  uselistorder i32 %v1_b5e4, { 1, 0 }
  uselistorder i32 %v1_b5b4, { 2, 1, 3, 0 }
  uselistorder i32 %v3_b5ac, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_b5a4, { 3, 0, 1, 2 }
  uselistorder i32 %v0_b5a0, { 0, 2, 1, 4, 3 }
  uselistorder i1 %v7_b580, { 1, 0 }
  uselistorder i1 %v7_b554, { 1, 0 }
  uselistorder i32 %v3_b550, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b53c, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_b490, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_b478, { 6, 5, 4, 3, 2, 0, 1, 7 }
  uselistorder i32 %v1_b428, { 1, 2, 0 }
  uselistorder i32 %v7_b3e4, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v6_b3c0, { 1, 2, 0 }
  uselistorder i32 %v1_b38c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 6, 7, 5, 8, 9, 11, 10, 13, 12, 14, 16, 15, 17, 18, 19, 22, 20, 21, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder label %dec_label_pc_bac8, { 1, 0 }
  uselistorder label %dec_label_pc_baac, { 1, 0 }
  uselistorder label %dec_label_pc_b900, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b874, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_bad4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bad4:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_bad4 = load i32, i32* @fp, align 4
  %v1_bad8 = urem i32 %arg1, 256
  store i32 %v1_bad8, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_baf0 = urem i32 %arg3, 256
  store i32 %v1_baf0, i32* @r4, align 4
  %v2_baf4 = call i32 @function_12178(i32 %v1_bad8, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_baf4, i32* @sl, align 4
  %v0_bb00 = load i32, i32* @r7, align 4
  %v2_bb04 = call i32 @function_12178(i32 %v0_bb00, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_bb10 = load i32, i32* @r6, align 4
  store i32 %v0_bb10, i32* %r1.global-to-local, align 4
  store i32 %v2_bb04, i32* @sb, align 4
  %v0_bb20 = load i32, i32* @r4, align 4
  %v5_bb24 = inttoptr i32 %v0_bb10 to i32*
  %v6_bb24 = call i32 @function_85e0(i32 %v0_bb20, i32* %v5_bb24, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_bb2c = urem i32 %v6_bb24, 65536
  %v0_bb30 = load i32, i32* @r6, align 4
  store i32 %v0_bb30, i32* %r1.global-to-local, align 4
  %v0_bb38 = load i32, i32* @r5, align 4
  %v0_bb3c = load i32, i32* @r4, align 4
  %v5_bb44 = inttoptr i32 %v0_bb30 to i32*
  %v6_bb44 = call i32 @function_85e0(i32 %v0_bb3c, i32* %v5_bb44, i32 6, i32 %v0_bb38, i32 %v3_bb2c)
  %v0_bb48 = load i32, i32* @r6, align 4
  store i32 %v0_bb48, i32* %r1.global-to-local, align 4
  %v3_bb4c = mul i32 %v6_bb44, 65536
  store i32 %v3_bb4c, i32* %fp.global-to-local, align 4
  %v0_bb58 = load i32, i32* @r4, align 4
  %v5_bb5c = inttoptr i32 %v0_bb48 to i32*
  %v6_bb5c = call i32 @function_85e0(i32 %v0_bb58, i32* %v5_bb5c, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  %v0_bb68 = load i32, i32* @r6, align 4
  store i32 %v0_bb68, i32* %r1.global-to-local, align 4
  %v0_bb6c = load i32, i32* @r4, align 4
  %v3_bb74 = urem i32 %v6_bb5c, 65536
  store i32 %v3_bb74, i32* @r6, align 4
  %v5_bb78 = inttoptr i32 %v0_bb68 to i32*
  %v6_bb78 = call i32 @function_85e0(i32 %v0_bb6c, i32* %v5_bb78, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_bb7c = load i32, i32* %fp.global-to-local, align 4
  %v3_bb7c = udiv i32 %v0_bb7c, 65536
  %v1_bb84 = load i32, i32* @r5, align 4
  %v9_bb84 = icmp eq i32 %v3_bb7c, %v1_bb84
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_bb84, label %dec_label_pc_bbac, label %bb

bb:                                               ; preds = %dec_label_pc_bad4
  %v2_bb98 = mul nuw nsw i32 %v3_bb7c, 256
  %v4_bb9c = and i32 %v2_bb98, 65280
  %v1_bba0 = urem i32 %v6_bb78, 256
  store i32 %v1_bba0, i32* @r8, align 4
  %v5_bba4 = udiv i32 %v0_bb7c, 16777216
  %v6_bba4 = or i32 %v4_bb9c, %v5_bba4
  br label %dec_label_pc_bbb8

dec_label_pc_bbac:                                ; preds = %dec_label_pc_bad4
  %v1_bba07 = urem i32 %v6_bb78, 256
  store i32 %v1_bba07, i32* @r8, align 4
  %v0_bbac = call i32 @function_e958()
  %v3_bbb4 = urem i32 %v0_bbac, 65536
  br label %dec_label_pc_bbb8

dec_label_pc_bbb8:                                ; preds = %bb, %dec_label_pc_bbac
  %storemerge17 = phi i32 [ %v6_bba4, %bb ], [ %v3_bbb4, %dec_label_pc_bbac ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_bbb8 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_bbb8, 1
  br i1 %tmp41, label %dec_label_pc_bd60.preheader, label %dec_label_pc_bbc0

dec_label_pc_bd60.preheader:                      ; preds = %dec_label_pc_bcbc, %dec_label_pc_bbb8
  %storemerge3.in12.ph = phi i32 [ %v0_bbb8, %dec_label_pc_bbb8 ], [ %v1_bc14, %dec_label_pc_bcbc ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_bd28, label %dec_label_pc_bd2c.lr.ph

dec_label_pc_bbc0:                                ; preds = %dec_label_pc_bbb8
  store i32 %v3_bb2c, i32* %r1.global-to-local, align 4
  %v3_bbc4 = udiv i32 %v6_bb24, 256
  %v5_bbd0 = trunc i32 %v3_bbc4 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_bbe8 = udiv i32 %v6_bb24, 65536
  store i32 %v3_bbe8, i32* @r4, align 4
  %v4_bbf8 = trunc i32 %v3_bbe8 to i8
  store i8 %v4_bbf8, i8* %stack_var_-80, align 1
  %v3_bd08 = icmp eq i32 %v3_bb2c, 65535
  %v2_bc30 = ptrtoint i32* %stack_var_-52 to i32
  %v3_bc60 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_bcec

dec_label_pc_bc00:                                ; preds = %dec_label_pc_bcec
  %v2_bc00 = load i8, i8* %stack_var_-80, align 1
  %v3_bc00 = sext i8 %v2_bc00 to i32
  store i32 %v3_bc00, i32* %r1.global-to-local, align 4
  store i32 %v3_bbc4, i32* @r4, align 4
  %v2_bc04 = load i32, i32* @r5, align 4
  %v3_bc04 = add i32 %v2_bc04, 2
  %v4_bc04 = inttoptr i32 %v3_bc04 to i8*
  store i8 %v5_bbd0, i8* %v4_bc04, align 1
  %v0_bc08 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc08 = trunc i32 %v0_bc08 to i8
  %v2_bc08 = load i32, i32* @r5, align 4
  %v3_bc08 = add i32 %v2_bc08, 3
  %v4_bc08 = inttoptr i32 %v3_bc08 to i8*
  store i8 %v1_bc08, i8* %v4_bc08, align 1
  br label %dec_label_pc_bc0c

dec_label_pc_bc0c:                                ; preds = %dec_label_pc_bd14, %dec_label_pc_bc00
  %v1_bc14 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_bc24 = call i32 @function_11e8c(i32 2, i32 2, i32 17)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_bc2c = icmp eq i32 %v3_bc24, -1
  store i32 %v2_bc30, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_bc40 = load i32, i32* @sb, align 4
  %v3_bc40 = add i32 %v2_bc40, %stack_var_-60.0
  %v4_bc40 = inttoptr i32 %v3_bc40 to i32*
  store i32 %v3_bc24, i32* %v4_bc40, align 4
  br i1 %v7_bc2c, label %dec_label_pc_bd6c, label %dec_label_pc_bc48

dec_label_pc_bc48:                                ; preds = %dec_label_pc_bc0c
  store i32 2, i32* %stack_var_-52, align 4
  %v4_bc60 = call i32 @function_11cbc(i32 %v3_bc24, %sockaddr* %v3_bc60, i32 16)
  %v0_bc64 = load i32, i32* @r5, align 4
  %v1_bc64 = add i32 %v0_bc64, 20
  %v2_bc64 = inttoptr i32 %v1_bc64 to i8*
  %v3_bc64 = load i8, i8* %v2_bc64, align 1
  %tmp = icmp ugt i8 %v3_bc64, 31
  br i1 %tmp, label %dec_label_pc_bcbc, label %dec_label_pc_bc70

dec_label_pc_bc70:                                ; preds = %dec_label_pc_bc48
  %v1_bc70 = add i32 %v0_bc64, 16
  %v2_bc70 = inttoptr i32 %v1_bc70 to i32*
  %v3_bc70 = load i32, i32* %v2_bc70, align 4
  store i32 %v3_bc70, i32* @r4, align 4
  %v0_bc74 = call i32 @function_e958()
  %v0_bc78 = load i32, i32* @r4, align 4
  %v1_bc7c = and i32 %v0_bc78, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v1_bc78 = udiv i32 %v0_bc78, 256
  %v3_bc80 = and i32 %v1_bc78, 65280
  %v3_bc84 = mul i32 %v0_bc78, 16777216
  %v4_bc88 = mul i32 %v1_bc7c, 256
  %v5_bc88 = or i32 %v4_bc88, %v3_bc84
  store i32 %v5_bc88, i32* %r1.global-to-local, align 4
  %v4_bc8c = udiv i32 %v0_bc78, 16777216
  %v5_bc8c = or i32 %v3_bc80, %v4_bc8c
  %v0_bc90 = load i32, i32* @r5, align 4
  %v1_bc90 = add i32 %v0_bc90, 20
  %v2_bc90 = inttoptr i32 %v1_bc90 to i8*
  %v3_bc90 = load i8, i8* %v2_bc90, align 1
  %v4_bc90 = zext i8 %v3_bc90 to i32
  %v2_bc94 = or i32 %v5_bc88, %v5_bc8c
  %v7_bc98 = lshr i32 %v0_bc74, %v4_bc90
  %v8_bc98 = add i32 %v7_bc98, %v2_bc94
  %v3_bca4 = mul i32 %v8_bc98, 16777216
  %v1_bca8 = and i32 %v8_bc98, 65280
  %v4_bcac = mul nuw nsw i32 %v1_bca8, 256
  %v5_bcac = or i32 %v4_bcac, %v3_bca4
  store i32 %v5_bcac, i32* %r1.global-to-local, align 4
  %v2_bcb4 = call i32 @llvm.bswap.i32(i32 %v8_bc98)
  %v2_bcb8 = add i32 %v0_bc90, 4
  %v3_bcb8 = inttoptr i32 %v2_bcb8 to i32*
  store i32 %v2_bcb4, i32* %v3_bcb8, align 4
  %v0_bcc8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bcbc

dec_label_pc_bcbc:                                ; preds = %dec_label_pc_bc48, %dec_label_pc_bc70
  %v0_bcc8 = phi i32 [ %v0_bc64, %dec_label_pc_bc48 ], [ %v0_bcc8.pre, %dec_label_pc_bc70 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_bcc4 = load i32, i32* @sb, align 4
  %v2_bcc4 = add i32 %v1_bcc4, %stack_var_-60.0
  %v3_bcc4 = inttoptr i32 %v2_bcc4 to i32*
  %v4_bcc4 = load i32, i32* %v3_bcc4, align 4
  store i32 %v0_bcc8, i32* %r1.global-to-local, align 4
  %v3_bccc = inttoptr i32 %v0_bcc8 to %sockaddr*
  %v4_bccc = call i32 @function_11ce8(i32 %v4_bcc4, %sockaddr* %v3_bccc, i32 16)
  %v1_bcd8 = add i32 %stack_var_-60.0, 4
  %v1_bcdc = load i32, i32* @r7, align 4
  %v9_bcdc = icmp eq i32 %v1_bc14, %v1_bcdc
  %v0_bce4 = load i32, i32* @r5, align 4
  %v1_bce4 = add i32 %v0_bce4, 24
  store i32 %v1_bce4, i32* @r5, align 4
  br i1 %v9_bcdc, label %dec_label_pc_bd60.preheader, label %dec_label_pc_bcec

dec_label_pc_bcec:                                ; preds = %dec_label_pc_bcbc, %dec_label_pc_bbc0
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_bbc0 ], [ %v1_bcd8, %dec_label_pc_bcbc ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_bbc0 ], [ %v1_bc14, %dec_label_pc_bcbc ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_bcf8 = call i32 @function_12178(i32 65535, i32 1)
  store i32 %v3_bb2c, i32* %r1.global-to-local, align 4
  %v2_bd0c = load i32, i32* @sl, align 4
  %v3_bd0c = add i32 %v2_bd0c, %stack_var_-60.0
  %v4_bd0c = inttoptr i32 %v3_bd0c to i32*
  store i32 %v2_bcf8, i32* %v4_bd0c, align 4
  br i1 %v3_bd08, label %dec_label_pc_bd14, label %dec_label_pc_bc00

dec_label_pc_bd14:                                ; preds = %dec_label_pc_bcec
  %v0_bd14 = call i32 @function_e958()
  %v1_bd14 = trunc i32 %v0_bd14 to i8
  %v4_bd18 = sdiv i32 %v0_bd14, 256
  %v1_bd1c = trunc i32 %v4_bd18 to i8
  %v2_bd1c = load i32, i32* @r5, align 4
  %v3_bd1c = add i32 %v2_bd1c, 3
  %v4_bd1c = inttoptr i32 %v3_bd1c to i8*
  store i8 %v1_bd1c, i8* %v4_bd1c, align 1
  %v3_bd20 = load i32, i32* @r5, align 4
  %v4_bd20 = add i32 %v3_bd20, 2
  %v5_bd20 = inttoptr i32 %v4_bd20 to i8*
  store i8 %v1_bd14, i8* %v5_bd20, align 1
  br label %dec_label_pc_bc0c

dec_label_pc_bd28:                                ; preds = %dec_label_pc_bd60.loopexit, %dec_label_pc_bd60.preheader, %dec_label_pc_bd64.loopexit, %dec_label_pc_bd28
  br label %dec_label_pc_bd28

dec_label_pc_bd2c:                                ; preds = %dec_label_pc_bd2c.lr.ph, %dec_label_pc_bd64.loopexit
  %v0_bd2c = load i32, i32* @r8, align 4
  %v2_bd2c = icmp eq i32 %v0_bd2c, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_bd2c, label %dec_label_pc_bd34, label %dec_label_pc_bd74

dec_label_pc_bd34:                                ; preds = %dec_label_pc_bd2c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_bd3c

dec_label_pc_bd3c:                                ; preds = %dec_label_pc_bd3c, %dec_label_pc_bd34
  %v0_bd44 = phi i32 [ %v1_bd44, %dec_label_pc_bd3c ], [ 0, %dec_label_pc_bd34 ]
  %v0_bd3c = phi i32 [ %v1_bd58, %dec_label_pc_bd3c ], [ 0, %dec_label_pc_bd34 ]
  %v1_bd3c = load i32, i32* @sb, align 4
  %v2_bd3c = add i32 %v1_bd3c, %v0_bd3c
  %v3_bd3c = inttoptr i32 %v2_bd3c to i32*
  %v4_bd3c = load i32, i32* %v3_bd3c, align 4
  %v1_bd40 = load i32, i32* @sl, align 4
  %v2_bd40 = add i32 %v1_bd40, %v0_bd3c
  %v3_bd40 = inttoptr i32 %v2_bd40 to i32*
  %v4_bd40 = load i32, i32* %v3_bd40, align 4
  store i32 %v4_bd40, i32* %r1.global-to-local, align 4
  %v1_bd44 = add i32 %v0_bd44, 1
  %v0_bd48 = load i32, i32* @r6, align 4
  %v4_bd50 = inttoptr i32 %v4_bd40 to i32*
  %v5_bd50 = call i32 @function_11dfc(i32 %v4_bd3c, i32* %v4_bd50, i32 %v0_bd48, i32 16384)
  %v1_bd54 = load i32, i32* @r7, align 4
  %v9_bd54 = icmp eq i32 %v1_bd44, %v1_bd54
  %v0_bd58 = load i32, i32* @r4, align 4
  %v1_bd58 = add i32 %v0_bd58, 4
  store i32 %v1_bd58, i32* @r4, align 4
  br i1 %v9_bd54, label %dec_label_pc_bd60.loopexit, label %dec_label_pc_bd3c

dec_label_pc_bd60.loopexit:                       ; preds = %dec_label_pc_bd3c
  %tmp4247 = icmp slt i32 %v1_bd44, 1
  br i1 %tmp4247, label %dec_label_pc_bd28, label %dec_label_pc_bd2c.lr.ph

dec_label_pc_bd2c.lr.ph:                          ; preds = %dec_label_pc_bd60.preheader, %dec_label_pc_bd60.loopexit
  br label %dec_label_pc_bd2c

dec_label_pc_bd64.loopexit:                       ; preds = %dec_label_pc_bd7c
  %tmp42 = icmp slt i32 %v0_bda4, 1
  br i1 %tmp42, label %dec_label_pc_bd28, label %dec_label_pc_bd2c

dec_label_pc_bd6c:                                ; preds = %dec_label_pc_bc0c
  store i32 %v24_bad4, i32* %fp.global-to-local, align 4
  ret i32 %v3_bc24

dec_label_pc_bd74:                                ; preds = %dec_label_pc_bd2c
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_bd7c

dec_label_pc_bd7c:                                ; preds = %dec_label_pc_bd7c, %dec_label_pc_bd74
  %v0_bd7c = phi i32 [ %v1_bda8, %dec_label_pc_bd7c ], [ 0, %dec_label_pc_bd74 ]
  %v1_bd7c = load i32, i32* @sl, align 4
  %v2_bd7c = add i32 %v1_bd7c, %v0_bd7c
  %v3_bd7c = inttoptr i32 %v2_bd7c to i32*
  %v4_bd7c = load i32, i32* %v3_bd7c, align 4
  store i32 %v4_bd7c, i32* @r4, align 4
  %v0_bd80 = load i32, i32* @r6, align 4
  store i32 %v0_bd80, i32* @r1, align 4
  %v1_bd88 = inttoptr i32 %v4_bd7c to i8*
  %v2_bd88 = call i32 @function_ead8(i8* %v1_bd88)
  %v0_bd8c = load i32, i32* @r5, align 4
  %v1_bd8c = add i32 %v0_bd8c, 1
  store i32 %v1_bd8c, i32* @r5, align 4
  %v0_bd90 = load i32, i32* @fp, align 4
  %v1_bd90 = load i32, i32* @sb, align 4
  %v2_bd90 = add i32 %v1_bd90, %v0_bd90
  %v3_bd90 = inttoptr i32 %v2_bd90 to i32*
  %v4_bd90 = load i32, i32* %v3_bd90, align 4
  %v0_bd94 = load i32, i32* @r4, align 4
  store i32 %v0_bd94, i32* %r1.global-to-local, align 4
  %v0_bd98 = load i32, i32* @r6, align 4
  %v4_bda0 = inttoptr i32 %v0_bd94 to i32*
  %v5_bda0 = call i32 @function_11dfc(i32 %v4_bd90, i32* %v4_bda0, i32 %v0_bd98, i32 16384)
  %v0_bda4 = load i32, i32* @r5, align 4
  %v1_bda4 = load i32, i32* @r7, align 4
  %v9_bda4 = icmp eq i32 %v0_bda4, %v1_bda4
  %v0_bda8 = load i32, i32* @fp, align 4
  %v1_bda8 = add i32 %v0_bda8, 4
  store i32 %v1_bda8, i32* @fp, align 4
  br i1 %v9_bda4, label %dec_label_pc_bd64.loopexit, label %dec_label_pc_bd7c

; uselistorder directives
  uselistorder i32 %v1_bda8, { 1, 0 }
  uselistorder i32 %v0_bda4, { 1, 0 }
  uselistorder i32 %v1_bd58, { 1, 0 }
  uselistorder i32 %v1_bd44, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_bcc8, { 1, 0 }
  uselistorder i32 %v8_bc98, { 1, 2, 0 }
  uselistorder i32 %v0_bc78, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bc24, { 1, 3, 2, 0 }
  uselistorder i32 %v1_bc14, { 1, 2, 0 }
  uselistorder i32 %v3_bbe8, { 1, 0 }
  uselistorder i32 %v3_bbc4, { 1, 0 }
  uselistorder i32 %v3_bb2c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_bad8, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_bd2c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_bd2c, { 1, 0 }
  uselistorder label %dec_label_pc_bd28, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_bcbc, { 1, 0 }
  uselistorder label %dec_label_pc_bbb8, { 1, 0 }
}

define i32 @function_bdb8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bdb8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_bdb8 = load i32, i32* @sb, align 4
  %v24_bdb8 = load i32, i32* @fp, align 4
  %v1_bdbc = urem i32 %arg1, 256
  store i32 %v1_bdbc, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_bdbc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_bdd4 = urem i32 %arg3, 256
  store i32 %v1_bdd4, i32* @r4, align 4
  %v2_bdd8 = call i32 @function_12178(i32 %v1_bdbc, i32 4)
  %v0_bddc = load i32, i32* @r5, align 4
  store i32 %v0_bddc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bdec = load i32, i32* @r4, align 4
  store i32 %v0_bdec, i32* %r0.global-to-local, align 4
  %v5_bdf0 = inttoptr i32 %v0_bddc to i32*
  %v6_bdf0 = call i32 @function_85e0(i32 %v0_bdec, i32* %v5_bdf0, i32 2, i32 0, i32 %v2_bdd8)
  %v1_bdfc = urem i32 %v6_bdf0, 256
  store i32 %v1_bdfc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_be08 = load i32, i32* @r5, align 4
  store i32 %v0_be08, i32* %r1.global-to-local, align 4
  %v0_be0c = load i32, i32* @r4, align 4
  store i32 %v0_be0c, i32* %r0.global-to-local, align 4
  %v5_be10 = trunc i32 %v6_bdf0 to i8
  %v6_be14 = inttoptr i32 %v0_be08 to i32*
  %v7_be14 = call i32 @function_85e0(i32 %v0_be0c, i32* %v6_be14, i32 3, i32 65535, i32 %v6_bdf0)
  %v0_be18 = load i32, i32* @r5, align 4
  store i32 %v0_be18, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_be14, i32* %fp.global-to-local, align 4
  %v0_be28 = load i32, i32* @r4, align 4
  store i32 %v0_be28, i32* %r0.global-to-local, align 4
  %v5_be2c = inttoptr i32 %v0_be18 to i32*
  %v6_be2c = call i32 @function_85e0(i32 %v0_be28, i32* %v5_be2c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_be34 = urem i32 %v6_be2c, 256
  store i32 %v1_be34, i32* %ip.global-to-local, align 4
  %v0_be38 = load i32, i32* @r5, align 4
  store i32 %v0_be38, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_be44 = load i32, i32* @r4, align 4
  store i32 %v0_be44, i32* %r0.global-to-local, align 4
  %v5_be48 = trunc i32 %v6_be2c to i8
  %v6_be4c = inttoptr i32 %v0_be38 to i32*
  %v7_be4c = call i32 @function_85e0(i32 %v0_be44, i32* %v6_be4c, i32 5, i32 0, i32 %v6_be2c)
  %v1_be58 = urem i32 %v7_be4c, 256
  store i32 %v1_be58, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_be64 = load i32, i32* @r5, align 4
  store i32 %v0_be64, i32* %r1.global-to-local, align 4
  %v0_be68 = load i32, i32* @r4, align 4
  store i32 %v0_be68, i32* %r0.global-to-local, align 4
  %v5_be70 = inttoptr i32 %v0_be64 to i32*
  %v6_be70 = call i32 @function_85e0(i32 %v0_be68, i32* %v5_be70, i32 6, i32 65535, i32 %v1_be58)
  %v0_be78 = load i32, i32* @r5, align 4
  store i32 %v0_be78, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_be70, i32* @r7, align 4
  %v0_be88 = load i32, i32* @r4, align 4
  store i32 %v0_be88, i32* %r0.global-to-local, align 4
  %v5_be8c = inttoptr i32 %v0_be78 to i32*
  %v6_be8c = call i32 @function_85e0(i32 %v0_be88, i32* %v5_be8c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_be90 = load i32, i32* @r5, align 4
  store i32 %v0_be90, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_be8c, i32* %sb.global-to-local, align 4
  %v0_bea0 = load i32, i32* @r4, align 4
  store i32 %v0_bea0, i32* %r0.global-to-local, align 4
  %v5_bea4 = inttoptr i32 %v0_be90 to i32*
  %v6_bea4 = call i32 @function_85e0(i32 %v0_bea0, i32* %v5_bea4, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_beb0 = load i32, i32* @r5, align 4
  store i32 %v0_beb0, i32* %r1.global-to-local, align 4
  store i32 %v6_bea4, i32* @r6, align 4
  %v0_beb8 = load i32, i32* @r4, align 4
  store i32 %v0_beb8, i32* %r0.global-to-local, align 4
  %v5_bebc = inttoptr i32 %v0_beb0 to i32*
  %v6_bebc = call i32 @function_85e0(i32 %v0_beb8, i32* %v5_bebc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_bec8 = load i32, i32* @global_var_1c5dc.51, align 4
  store i32 %v2_bec8, i32* %r3.global-to-local, align 4
  %v1_becc = urem i32 %v6_bebc, 256
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  %v0_bed0 = load i32, i32* @r5, align 4
  store i32 %v0_bed0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bed8 = load i32, i32* @r4, align 4
  store i32 %v0_bed8, i32* %r0.global-to-local, align 4
  %v5_bee0 = inttoptr i32 %v0_bed0 to i32*
  %v6_bee0 = call i32 @function_85e0(i32 %v0_bed8, i32* %v5_bee0, i32 25, i32 %v2_bec8, i32 %v1_becc)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bef4 = call i32 @function_11e8c(i32 2, i32 3, i32 17)
  store i32 %v3_bef4, i32* %r0.global-to-local, align 4
  %v7_bef8 = icmp eq i32 %v3_bef4, -1
  store i1 %v7_bef8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bef8, label %dec_label_pc_c320, label %dec_label_pc_bf04

dec_label_pc_bf04:                                ; preds = %dec_label_pc_bdb8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bf0c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bf0c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_bf20 = call i32 @function_11e5c(i32 %v3_bef4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_bf20, i32* %r0.global-to-local, align 4
  %v7_bf24 = icmp eq i32 %v6_bf20, -1
  store i1 %v7_bf24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bf24, label %dec_label_pc_c318, label %dec_label_pc_bf2c

dec_label_pc_bf2c:                                ; preds = %dec_label_pc_bf04
  %v0_bf2c = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_bf38 = urem i32 %v0_bf2c, 65536
  store i32 %v3_bf38, i32* %r2.global-to-local, align 4
  %v3_bf3c = icmp ugt i32 %v3_bf38, 1459
  %v9_bf3c = icmp eq i32 %v3_bf38, 1460
  store i1 %v9_bf3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bf3c, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_bf2c
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_bf2c, %bb
  %v0_bf44 = phi i32 [ %v3_bf38, %dec_label_pc_bf2c ], [ 1460, %bb ]
  %v0_bf48 = load i32, i32* %fp.global-to-local, align 4
  %v3_bf48 = mul i32 %v0_bf48, 65536
  store i32 %v3_bf48, i32* %r0.global-to-local, align 4
  %v3_bf4c = urem i32 %v0_bf48, 65536
  store i32 %v3_bf4c, i32* %r2.global-to-local, align 4
  %v0_bf50 = load i32, i32* @sl, align 4
  %v2_bf50 = icmp eq i32 %v0_bf50, 0
  store i1 %v2_bf50, i1* %cpsr_z.global-to-local, align 1
  %v0_bf54 = load i32, i32* %sb.global-to-local, align 4
  %v0_bf58 = load i32, i32* @r7, align 4
  %tmp72 = icmp slt i32 %v0_bf50, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_bf44, i32* %r2.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_bf80 = phi i32 [ %v3_bf4c, %bb71 ], [ %v0_bf44, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_bf68 = urem i32 %v0_bf58, 65536
  store i32 %v3_bf68, i32* %r3.global-to-local, align 4
  %v3_bf6c = urem i32 %v0_bf54, 65536
  store i32 %v3_bf6c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_bf88

.thread:                                          ; preds = %bb74
  %v6_bf7c = add nsw i32 %v5_bf80, 28
  store i32 %v6_bf7c, i32* @fp, align 4
  %v6_bf80 = add nsw i32 %v5_bf80, 8
  store i32 %v6_bf80, i32* @sb, align 4
  br label %dec_label_pc_c0fc

dec_label_pc_bf88:                                ; preds = %bb74
  %v1_bf8c = add nuw nsw i32 %v0_bf44, 28
  store i32 %v1_bf8c, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_bf8c, 256
  %v1_bf98 = and i32 %tmp75, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp76 = udiv i32 %v0_bf48, 256
  %v3_bf9c = urem i32 %tmp76, 256
  %v2_bfb0 = icmp eq i32 %v1_be58, 0
  store i1 %v2_bfb0, i1* %cpsr_z.global-to-local, align 1
  %v1_bfb4 = urem i32 %v0_bf48, 256
  %v1_bfbc = add nuw nsw i32 %v0_bf44, 8
  store i32 %v1_bfbc, i32* @sb, align 4
  %v1_bfc4 = urem i32 %v0_bf58, 256
  %v1_bfc8 = urem i32 %v0_bf54, 256
  store i32 %v1_bfc8, i32* %ip.global-to-local, align 4
  store i32 %v1_bf98, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_bfbc, 256
  %v4_bfd4 = mul nuw nsw i32 %v1_bfb4, 256
  %v5_bfd4 = or i32 %v4_bfd4, %v3_bf9c
  store i32 %v5_bfd4, i32* %r0.global-to-local, align 4
  %v3_bfd8 = mul nuw nsw i32 %v1_bfc4, 256
  store i32 %v3_bfd8, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_bf54, 256
  %v3_bfdc = urem i32 %tmp78, 256
  %v1_bfe0 = and i32 %tmp77, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  store i32 %v1_bfe0, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_bf8c, 256
  %v4_bfe4 = urem i32 %tmp79, 256
  %v5_bfe4 = or i32 %v4_bfe4, %v1_bf98
  store i32 %v5_bfe4, i32* @lr, align 4
  %tmp80 = udiv i32 %v0_bf58, 256
  %v4_bfe8 = urem i32 %tmp80, 256
  %v5_bfe8 = or i32 %v4_bfe8, %v3_bfd8
  store i32 %v5_bfe8, i32* @r4, align 4
  %v5_bfec = trunc i32 %tmp79 to i8
  %v5_bff0 = trunc i32 %tmp76 to i8
  %v4_bff4 = mul nuw nsw i32 %v1_bfc8, 256
  %v5_bff4 = or i32 %v4_bff4, %v3_bfdc
  store i32 %v5_bff4, i32* @r5, align 4
  %tmp81 = udiv i32 %v1_bfbc, 256
  %v4_bff8 = urem i32 %tmp81, 256
  %v5_bff8 = or i32 %v4_bff8, %v1_bfe0
  store i32 %v5_bff8, i32* @r7, align 4
  br i1 %v2_bfb0, label %dec_label_pc_c000, label %dec_label_pc_c328

dec_label_pc_c000:                                ; preds = %dec_label_pc_bf88
  %v3_c00036 = udiv i32 %v1_bf98, 256
  store i32 %v3_c00036, i32* %ip.global-to-local, align 4
  store i32 %v1_bfb4, i32* %r0.global-to-local, align 4
  store i32 %v1_bfc4, i32* %r1.global-to-local, align 4
  store i32 %v1_bfc8, i32* %r2.global-to-local, align 4
  %v3_c01037 = udiv i32 %v1_bfe0, 256
  store i32 %v3_c01037, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_c0b4 = sext i8 %v5_bff0 to i32
  %sext15 = mul i32 %v0_bf48, 16777216
  %v4_c0b8 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_bf58, 16777216
  %v4_c0d0 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_bfe0, 65536
  %v4_c0d4 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_bf54, 16777216
  %v4_c0d8 = sdiv i32 %sext18, 16777216
  %v1_c0c0 = trunc i32 %v3_c00036 to i8
  %v1_c0e0 = trunc i32 %v4_c0d4 to i8
  br label %dec_label_pc_c02c

dec_label_pc_c02c:                                ; preds = %dec_label_pc_c02c, %dec_label_pc_c000
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_c038 = call i32 @function_12178(i32 1510, i32 1)
  store i32 %v2_c038, i32* %r0.global-to-local, align 4
  store i32 %v2_bdd8, i32* %ip.global-to-local, align 4
  %v3_c040 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c040, i32* %r2.global-to-local, align 4
  %v2_c044 = load i32, i32* @r6, align 4
  %v5_c044 = mul i32 %v2_c044, 4
  %v6_c044 = add i32 %v5_c044, %v2_bdd8
  %v7_c044 = inttoptr i32 %v6_c044 to i32*
  store i32 %v2_c038, i32* %v7_c044, align 4
  %v0_c048 = load i32, i32* %ip.global-to-local, align 4
  %v1_c048 = load i32, i32* %r2.global-to-local, align 4
  %v4_c048 = mul i32 %v1_c048, 4
  %v5_c048 = add i32 %v4_c048, %v0_c048
  %v6_c048 = inttoptr i32 %v5_c048 to i32*
  %v7_c048 = load i32, i32* %v6_c048, align 4
  store i32 %v7_c048, i32* %r1.global-to-local, align 4
  %v1_c04c = inttoptr i32 %v7_c048 to i8*
  %v2_c04c = load i8, i8* %v1_c04c, align 1
  %tmp = urem i8 %v2_c04c, 16
  %v1_c050 = zext i8 %tmp to i32
  %v1_c054 = or i32 %v1_c050, 64
  store i32 %v1_c054, i32* %r3.global-to-local, align 4
  %v1_c058 = trunc i32 %v1_c054 to i8
  store i8 %v1_c058, i8* %v1_c04c, align 1
  %v0_c05c = load i32, i32* %r1.global-to-local, align 4
  %v1_c05c = inttoptr i32 %v0_c05c to i8*
  %v2_c05c = load i8, i8* %v1_c05c, align 1
  %v3_c05c = zext i8 %v2_c05c to i32
  %v1_c060 = and i32 %v3_c05c, 240
  %v1_c064 = or i32 %v1_c060, 5
  store i32 %v1_c064, i32* %r2.global-to-local, align 4
  %v3_c06c = add i32 %v0_c05c, 9
  %v4_c06c = inttoptr i32 %v3_c06c to i8*
  store i8 17, i8* %v4_c06c, align 1
  %v0_c070 = load i32, i32* %r2.global-to-local, align 4
  %v1_c070 = trunc i32 %v0_c070 to i8
  %v2_c070 = load i32, i32* %r1.global-to-local, align 4
  %v3_c070 = inttoptr i32 %v2_c070 to i8*
  store i8 %v1_c070, i8* %v3_c070, align 1
  store i32 %v6_bdf0, i32* %r0.global-to-local, align 4
  %v2_c078 = load i32, i32* %r1.global-to-local, align 4
  %v3_c078 = add i32 %v2_c078, 1
  %v4_c078 = inttoptr i32 %v3_c078 to i8*
  store i8 %v5_be10, i8* %v4_c078, align 1
  %v2_c080 = load i32, i32* %r1.global-to-local, align 4
  %v3_c080 = add i32 %v2_c080, 8
  %v4_c080 = inttoptr i32 %v3_c080 to i8*
  store i8 %v5_be48, i8* %v4_c080, align 1
  %v3_c084 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c084, i32* %r2.global-to-local, align 4
  store i32 %v6_bee0, i32* %ip.global-to-local, align 4
  %v3_c08c = mul i32 %v3_c084, 32
  store i32 %v3_c08c, i32* %r3.global-to-local, align 4
  %v1_c090 = load i32, i32* %r1.global-to-local, align 4
  %v2_c090 = add i32 %v1_c090, 12
  %v3_c090 = inttoptr i32 %v2_c090 to i32*
  store i32 %v6_bee0, i32* %v3_c090, align 4
  %v0_c094 = load i32, i32* %r3.global-to-local, align 4
  %v1_c094 = load i32, i32* %r2.global-to-local, align 4
  %tmp84 = mul i32 %v1_c094, -8
  %v5_c094 = add i32 %v0_c094, %tmp84
  %v1_c098 = load i32, i32* @r8, align 4
  %v2_c098 = add i32 %v5_c094, %v1_c098
  store i32 %v2_c098, i32* %r3.global-to-local, align 4
  %v1_c09c = add i32 %v2_c098, 16
  %v2_c09c = inttoptr i32 %v1_c09c to i32*
  %v3_c09c = load i32, i32* %v2_c09c, align 4
  %v1_c0a0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c0a0 = add i32 %v1_c0a0, 16
  %v3_c0a0 = inttoptr i32 %v2_c0a0 to i32*
  store i32 %v3_c09c, i32* %v3_c0a0, align 4
  %v0_c0a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0a8 = add i32 %v0_c0a8, 1
  store i32 %v1_c0a8, i32* @r6, align 4
  %v2_c0ac = load i32, i32* %r1.global-to-local, align 4
  %v3_c0ac = add i32 %v2_c0ac, 2
  %v4_c0ac = inttoptr i32 %v3_c0ac to i8*
  store i8 %v5_bfec, i8* %v4_c0ac, align 1
  store i32 %v4_c0b4, i32* %ip.global-to-local, align 4
  store i32 %v4_c0b8, i32* %r0.global-to-local, align 4
  %v0_c0bc = load i32, i32* %r1.global-to-local, align 4
  %v1_c0bc = add i32 %v0_c0bc, 20
  store i32 %v1_c0bc, i32* %r3.global-to-local, align 4
  %v3_c0c0 = add i32 %v0_c0bc, 3
  %v4_c0c0 = inttoptr i32 %v3_c0c0 to i8*
  store i8 %v1_c0c0, i8* %v4_c0c0, align 1
  %v0_c0c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_c0c4 = trunc i32 %v0_c0c4 to i8
  %v2_c0c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c0c4 = add i32 %v2_c0c4, 4
  %v4_c0c4 = inttoptr i32 %v3_c0c4 to i8*
  store i8 %v1_c0c4, i8* %v4_c0c4, align 1
  %v0_c0c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_c0c8 = trunc i32 %v0_c0c8 to i8
  %v2_c0c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c0c8 = add i32 %v2_c0c8, 5
  %v4_c0c8 = inttoptr i32 %v3_c0c8 to i8*
  store i8 %v1_c0c8, i8* %v4_c0c8, align 1
  %v0_c0cc = load i32, i32* @r4, align 4
  %v1_c0cc = trunc i32 %v0_c0cc to i8
  %v2_c0cc = load i32, i32* %r1.global-to-local, align 4
  %v3_c0cc = add i32 %v2_c0cc, 20
  %v4_c0cc = inttoptr i32 %v3_c0cc to i8*
  store i8 %v1_c0cc, i8* %v4_c0cc, align 1
  store i32 %v4_c0d0, i32* %r2.global-to-local, align 4
  store i32 %v4_c0d4, i32* %r1.global-to-local, align 4
  store i32 %v4_c0d8, i32* %ip.global-to-local, align 4
  %v0_c0dc = load i32, i32* @r6, align 4
  %v1_c0dc = load i32, i32* @sl, align 4
  %v9_c0dc = icmp eq i32 %v0_c0dc, %v1_c0dc
  store i1 %v9_c0dc, i1* %cpsr_z.global-to-local, align 1
  %v2_c0e0 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0e0 = add i32 %v2_c0e0, 5
  %v4_c0e0 = inttoptr i32 %v3_c0e0 to i8*
  store i8 %v1_c0e0, i8* %v4_c0e0, align 1
  %v0_c0e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0e4 = trunc i32 %v0_c0e4 to i8
  %v2_c0e4 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0e4 = add i32 %v2_c0e4, 1
  %v4_c0e4 = inttoptr i32 %v3_c0e4 to i8*
  store i8 %v1_c0e4, i8* %v4_c0e4, align 1
  %v0_c0e8 = load i32, i32* @r5, align 4
  %v1_c0e8 = trunc i32 %v0_c0e8 to i8
  %v2_c0e8 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0e8 = add i32 %v2_c0e8, 2
  %v4_c0e8 = inttoptr i32 %v3_c0e8 to i8*
  store i8 %v1_c0e8, i8* %v4_c0e8, align 1
  %v0_c0ec = load i32, i32* %ip.global-to-local, align 4
  %v1_c0ec = trunc i32 %v0_c0ec to i8
  %v2_c0ec = load i32, i32* %r3.global-to-local, align 4
  %v3_c0ec = add i32 %v2_c0ec, 3
  %v4_c0ec = inttoptr i32 %v3_c0ec to i8*
  store i8 %v1_c0ec, i8* %v4_c0ec, align 1
  %v0_c0f0 = load i32, i32* @r7, align 4
  %v1_c0f0 = trunc i32 %v0_c0f0 to i8
  %v2_c0f0 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0f0 = add i32 %v2_c0f0, 4
  %v4_c0f0 = inttoptr i32 %v3_c0f0 to i8*
  store i8 %v1_c0f0, i8* %v4_c0f0, align 1
  %v0_c0f4 = load i32, i32* @r6, align 4
  store i32 %v0_c0f4, i32* %stack_var_-40, align 4
  %v5_c0f8 = icmp slt i32 %v0_c0dc, %v1_c0dc
  br i1 %v5_c0f8, label %dec_label_pc_c02c, label %dec_label_pc_c0fc

dec_label_pc_c0fc:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c02c, %.thread
  %v0_c0fc = load i32, i32* @sl, align 4
  %v2_c0fc = icmp eq i32 %v0_c0fc, 0
  store i1 %v2_c0fc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c2a8 = icmp eq i32 %v3_bf4c, 65535
  %v2_c174 = icmp eq i32 %v1_becc, 0
  %v2_c13c = icmp eq i32 %v6_bee0, -1
  %v7_c13c = icmp eq i32 %v6_bee0, -1
  br label %dec_label_pc_c104.outer

dec_label_pc_c104.outer:                          ; preds = %dec_label_pc_c224, %dec_label_pc_c0fc
  %v1_c104.ph.in = phi i32 [ %v1_c218, %dec_label_pc_c224 ], [ %v0_c0fc, %dec_label_pc_c0fc ]
  %v0_c104.ph = phi i1 [ %v2_c224, %dec_label_pc_c224 ], [ %v2_c0fc, %dec_label_pc_c0fc ]
  %v1_c104.ph = icmp slt i32 %v1_c104.ph.in, 0
  %v4_c104 = or i1 %v1_c104.ph, %v0_c104.ph
  br label %dec_label_pc_c104

dec_label_pc_c104:                                ; preds = %dec_label_pc_c104.outer, %dec_label_pc_c104
  br i1 %v4_c104, label %dec_label_pc_c104, label %dec_label_pc_c108

dec_label_pc_c108:                                ; preds = %dec_label_pc_c104
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c114

dec_label_pc_c114:                                ; preds = %dec_label_pc_c17c, %dec_label_pc_c108
  %v1_c128 = phi i32 [ %v1_c214, %dec_label_pc_c17c ], [ 0, %dec_label_pc_c108 ]
  %v5_c118 = mul i32 %v1_c128, 24
  %v1_c11c = load i32, i32* @r8, align 4
  %v2_c11c = add i32 %v1_c11c, %v5_c118
  store i32 %v2_c11c, i32* %r3.global-to-local, align 4
  store i32 %v2_bdd8, i32* %ip.global-to-local, align 4
  %v1_c124 = add i32 %v2_c11c, 20
  %v2_c124 = inttoptr i32 %v1_c124 to i8*
  %v3_c124 = load i8, i8* %v2_c124, align 1
  %v4_c124 = zext i8 %v3_c124 to i32
  store i32 %v4_c124, i32* %r2.global-to-local, align 4
  %v4_c128 = mul i32 %v1_c128, 4
  %v5_c128 = add i32 %v4_c128, %v2_bdd8
  %v6_c128 = inttoptr i32 %v5_c128 to i32*
  %v7_c128 = load i32, i32* %v6_c128, align 4
  store i32 %v7_c128, i32* @r5, align 4
  %v7_c12c = icmp eq i8 %v3_c124, 31
  store i1 %v7_c12c, i1* %cpsr_z.global-to-local, align 1
  %v1_c130 = add i32 %v7_c128, 20
  store i32 %v1_c130, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_c124, 32
  br i1 %tmp85, label %dec_label_pc_c230, label %dec_label_pc_c138

dec_label_pc_c138:                                ; preds = %dec_label_pc_c114
  store i32 %v6_bee0, i32* %r0.global-to-local, align 4
  store i1 %v7_c13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c13c, label %dec_label_pc_c298, label %dec_label_pc_c144

dec_label_pc_c144:                                ; preds = %dec_label_pc_c230, %dec_label_pc_c138
  store i32 %v3_bf4c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c2a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c2a8, label %dec_label_pc_c2b4, label %dec_label_pc_c158

dec_label_pc_c158:                                ; preds = %dec_label_pc_c298.dec_label_pc_c158_crit_edge, %dec_label_pc_c144
  %v1_c15c = phi i32 [ %v1_c15c.pre, %dec_label_pc_c298.dec_label_pc_c158_crit_edge ], [ 65535, %dec_label_pc_c144 ]
  store i32 %v3_bf68, i32* %r2.global-to-local, align 4
  %v9_c15c = icmp eq i32 %v3_bf68, %v1_c15c
  store i1 %v9_c15c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c15c, label %dec_label_pc_c2d0, label %dec_label_pc_c164

dec_label_pc_c164:                                ; preds = %dec_label_pc_c2b4.dec_label_pc_c164_crit_edge, %dec_label_pc_c158
  %v1_c168 = phi i32 [ %v1_c168.pre, %dec_label_pc_c2b4.dec_label_pc_c164_crit_edge ], [ %v1_c15c, %dec_label_pc_c158 ]
  store i32 %v3_bf6c, i32* %r3.global-to-local, align 4
  %v9_c168 = icmp eq i32 %v3_bf6c, %v1_c168
  store i1 %v9_c168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c168, label %dec_label_pc_c2ec, label %dec_label_pc_c170

dec_label_pc_c170:                                ; preds = %dec_label_pc_c2d0, %dec_label_pc_c164
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  store i1 %v2_c174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c174, label %dec_label_pc_c17c, label %dec_label_pc_c308

dec_label_pc_c17c:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c2ec, %dec_label_pc_c308
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c180 = load i32, i32* @r7, align 4
  %v1_c180 = trunc i32 %v0_c180 to i8
  %v2_c180 = load i32, i32* @r5, align 4
  %v3_c180 = add i32 %v2_c180, 10
  %v4_c180 = inttoptr i32 %v3_c180 to i8*
  store i8 %v1_c180, i8* %v4_c180, align 1
  %v0_c184 = load i32, i32* @r7, align 4
  %v1_c184 = trunc i32 %v0_c184 to i8
  %v2_c184 = load i32, i32* @r5, align 4
  %v3_c184 = add i32 %v2_c184, 11
  %v4_c184 = inttoptr i32 %v3_c184 to i8*
  store i8 %v1_c184, i8* %v4_c184, align 1
  %v0_c188 = load i32, i32* @r5, align 4
  store i32 %v0_c188, i32* @r0, align 4
  %v2_c18c = call i32 @function_d0b8(i32 %v0_c188, i32 20)
  %v3_c18c = trunc i32 %v2_c18c to i8
  store i32 %v2_c18c, i32* %r0.global-to-local, align 4
  %v4_c190 = sdiv i32 %v2_c18c, 256
  store i32 %v4_c190, i32* %r3.global-to-local, align 4
  %v1_c194 = trunc i32 %v4_c190 to i8
  %v2_c194 = load i32, i32* @r5, align 4
  %v3_c194 = add i32 %v2_c194, 11
  %v4_c194 = inttoptr i32 %v3_c194 to i8*
  store i8 %v1_c194, i8* %v4_c194, align 1
  %v3_c198 = load i32, i32* @r5, align 4
  %v4_c198 = add i32 %v3_c198, 10
  %v5_c198 = inttoptr i32 %v4_c198 to i8*
  store i8 %v3_c18c, i8* %v5_c198, align 1
  %v0_c19c = load i32, i32* @r7, align 4
  %v1_c19c = trunc i32 %v0_c19c to i8
  %v2_c19c = load i32, i32* @r6, align 4
  %v3_c19c = add i32 %v2_c19c, 6
  %v4_c19c = inttoptr i32 %v3_c19c to i8*
  store i8 %v1_c19c, i8* %v4_c19c, align 1
  %v0_c1a0 = load i32, i32* @r7, align 4
  %v1_c1a0 = trunc i32 %v0_c1a0 to i8
  %v2_c1a0 = load i32, i32* @r6, align 4
  %v3_c1a0 = add i32 %v2_c1a0, 7
  %v4_c1a0 = inttoptr i32 %v3_c1a0 to i8*
  store i8 %v1_c1a0, i8* %v4_c1a0, align 1
  %v0_c1a4 = load i32, i32* @r5, align 4
  %v1_c1a4 = add i32 %v0_c1a4, 24
  %v2_c1a4 = inttoptr i32 %v1_c1a4 to i8*
  %v3_c1a4 = load i8, i8* %v2_c1a4, align 1
  %v4_c1a4 = zext i8 %v3_c1a4 to i32
  store i32 %v4_c1a4, i32* %r3.global-to-local, align 4
  %v1_c1a8 = add i32 %v0_c1a4, 25
  %v2_c1a8 = inttoptr i32 %v1_c1a8 to i8*
  %v3_c1a8 = load i8, i8* %v2_c1a8, align 1
  %v4_c1a8 = zext i8 %v3_c1a8 to i32
  %v0_c1ac = load i32, i32* @r6, align 4
  store i32 %v0_c1ac, i32* @r1, align 4
  %v4_c1b0 = mul nuw nsw i32 %v4_c1a8, 256
  %v5_c1b0 = or i32 %v4_c1b0, %v4_c1a4
  store i32 %v5_c1b0, i32* %r2.global-to-local, align 4
  store i32 %v0_c1a4, i32* %r0.global-to-local, align 4
  %v0_c1b8 = load i32, i32* @sb, align 4
  store i32 %v0_c1b8, i32* %r3.global-to-local, align 4
  %v4_c1bc = call i32 @function_d114(i32 %v0_c1a4, i32 %v0_c1ac, i32 %v5_c1b0, i32 %v0_c1b8)
  %v5_c1bc = trunc i32 %v4_c1bc to i8
  store i32 %v4_c1bc, i32* %r0.global-to-local, align 4
  %v4_c1c038 = udiv i32 %v4_c1bc, 256
  %v1_c1c4 = trunc i32 %v4_c1c038 to i8
  %v2_c1c4 = load i32, i32* @r6, align 4
  %v3_c1c4 = add i32 %v2_c1c4, 7
  %v4_c1c4 = inttoptr i32 %v3_c1c4 to i8*
  store i8 %v1_c1c4, i8* %v4_c1c4, align 1
  %v3_c1c8 = load i32, i32* @r6, align 4
  %v4_c1c8 = add i32 %v3_c1c8, 6
  %v5_c1c8 = inttoptr i32 %v4_c1c8 to i8*
  store i8 %v5_c1bc, i8* %v5_c1c8, align 1
  %v3_c1cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c1cc, i32* %r3.global-to-local, align 4
  %v0_c1d0 = load i32, i32* @r5, align 4
  %v1_c1d0 = add i32 %v0_c1d0, 20
  %v2_c1d0 = inttoptr i32 %v1_c1d0 to i32*
  %v3_c1d0 = load i32, i32* %v2_c1d0, align 4
  %v3_c1d8 = udiv i32 %v3_c1d0, 65536
  store i32 %v3_c1d8, i32* %r2.global-to-local, align 4
  %v5_c1dc = mul i32 %v3_c1cc, 24
  %v1_c1e0 = load i32, i32* @r8, align 4
  %v2_c1e0 = add i32 %v1_c1e0, %v5_c1dc
  store i32 %v2_c1e0, i32* %ip.global-to-local, align 4
  %v3_c1e435 = udiv i32 %v3_c1d0, 16777216
  %v1_c1e8 = trunc i32 %v3_c1e435 to i8
  %v3_c1e8 = add i32 %v2_c1e0, 3
  %v4_c1e8 = inttoptr i32 %v3_c1e8 to i8*
  store i8 %v1_c1e8, i8* %v4_c1e8, align 1
  %v0_c1ec = load i32, i32* %r2.global-to-local, align 4
  %v1_c1ec = trunc i32 %v0_c1ec to i8
  %v2_c1ec = load i32, i32* %ip.global-to-local, align 4
  %v3_c1ec = add i32 %v2_c1ec, 2
  %v4_c1ec = inttoptr i32 %v3_c1ec to i8*
  store i8 %v1_c1ec, i8* %v4_c1ec, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c1f4 = load i32, i32* @r5, align 4
  store i32 %v0_c1f4, i32* %r1.global-to-local, align 4
  store i32 %v3_bef4, i32* %r0.global-to-local, align 4
  %v0_c1fc = load i32, i32* @fp, align 4
  store i32 %v0_c1fc, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c204 = load i32, i32* %ip.global-to-local, align 4
  %v6_c20c = inttoptr i32 %v0_c1f4 to i32*
  %v7_c20c = call i32 @function_11e28(i32 %v3_bef4, i32* %v6_c20c, i32 %v0_c1fc, i32 16384, i32 %v0_c204, i32 16)
  %v3_c210 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c210, i32* %r3.global-to-local, align 4
  %v1_c214 = add i32 %v3_c210, 1
  store i32 %v1_c214, i32* %r0.global-to-local, align 4
  %v1_c218 = load i32, i32* @sl, align 4
  %v9_c218 = icmp eq i32 %v1_c214, %v1_c218
  store i1 %v9_c218, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c214, i32* %stack_var_-40, align 4
  %v5_c220 = icmp slt i32 %v1_c214, %v1_c218
  br i1 %v5_c220, label %dec_label_pc_c114, label %dec_label_pc_c224

dec_label_pc_c224:                                ; preds = %dec_label_pc_c17c
  %v2_c224 = icmp eq i32 %v1_c218, 0
  store i1 %v2_c224, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c104.outer

dec_label_pc_c230:                                ; preds = %dec_label_pc_c114
  %v1_c230 = add i32 %v2_c11c, 16
  %v2_c230 = inttoptr i32 %v1_c230 to i32*
  %v3_c230 = load i32, i32* %v2_c230, align 4
  %v0_c234 = call i32 @function_e958()
  store i32 %v0_c234, i32* %r0.global-to-local, align 4
  %v3_c238 = load i32, i32* %stack_var_-40, align 4
  %v5_c240 = mul i32 %v3_c238, 24
  %v1_c248 = load i32, i32* @r8, align 4
  %v2_c248 = add i32 %v1_c248, %v5_c240
  store i32 %v2_c248, i32* %r1.global-to-local, align 4
  %v1_c24c = and i32 %v3_c230, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_c24c, i32* %r3.global-to-local, align 4
  %v1_c244 = udiv i32 %v3_c230, 256
  %v3_c250 = and i32 %v1_c244, 65280
  store i32 %v3_c250, i32* %r2.global-to-local, align 4
  %v3_c254 = mul i32 %v3_c230, 16777216
  store i32 %v3_c254, i32* %ip.global-to-local, align 4
  %v1_c258 = add i32 %v2_c248, 20
  %v2_c258 = inttoptr i32 %v1_c258 to i8*
  %v3_c258 = load i8, i8* %v2_c258, align 1
  %v4_c258 = zext i8 %v3_c258 to i32
  %v4_c25c = mul i32 %v1_c24c, 256
  %v5_c25c = or i32 %v4_c25c, %v3_c254
  store i32 %v5_c25c, i32* %ip.global-to-local, align 4
  %v4_c260 = udiv i32 %v3_c230, 16777216
  %v5_c260 = or i32 %v3_c250, %v4_c260
  %v2_c264 = or i32 %v5_c260, %v5_c25c
  %v7_c268 = lshr i32 %v0_c234, %v4_c258
  %v8_c268 = add i32 %v7_c268, %v2_c264
  store i32 %v8_c268, i32* %r2.global-to-local, align 4
  %v3_c274 = mul i32 %v8_c268, 16777216
  %v1_c26c = mul i32 %v8_c268, 256
  %v4_c278 = and i32 %v1_c26c, 16711680
  %v5_c278 = or i32 %v4_c278, %v3_c274
  store i32 %v5_c278, i32* %r1.global-to-local, align 4
  store i32 %v6_bee0, i32* %r0.global-to-local, align 4
  %v2_c288 = call i32 @llvm.bswap.i32(i32 %v8_c268)
  store i32 %v2_c288, i32* %r3.global-to-local, align 4
  store i1 %v7_c13c, i1* %cpsr_z.global-to-local, align 1
  %v1_c290 = load i32, i32* @r5, align 4
  %v2_c290 = add i32 %v1_c290, 16
  %v3_c290 = inttoptr i32 %v2_c290 to i32*
  store i32 %v2_c288, i32* %v3_c290, align 4
  br i1 %v2_c13c, label %dec_label_pc_c298, label %dec_label_pc_c144

dec_label_pc_c298:                                ; preds = %dec_label_pc_c230, %dec_label_pc_c138
  %v0_c298 = call i32 @function_e958()
  store i32 %v0_c298, i32* %r0.global-to-local, align 4
  store i32 %v3_bf4c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c2a8, i1* %cpsr_z.global-to-local, align 1
  %v1_c2ac = load i32, i32* @r5, align 4
  %v2_c2ac = add i32 %v1_c2ac, 12
  %v3_c2ac = inttoptr i32 %v2_c2ac to i32*
  store i32 %v0_c298, i32* %v3_c2ac, align 4
  br i1 %v3_c2a8, label %dec_label_pc_c2b4, label %dec_label_pc_c298.dec_label_pc_c158_crit_edge

dec_label_pc_c298.dec_label_pc_c158_crit_edge:    ; preds = %dec_label_pc_c298
  %v1_c15c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c158

dec_label_pc_c2b4:                                ; preds = %dec_label_pc_c298, %dec_label_pc_c144
  %v0_c2b4 = call i32 @function_e958()
  %v1_c2b4 = trunc i32 %v0_c2b4 to i8
  store i32 %v0_c2b4, i32* %r0.global-to-local, align 4
  store i32 %v3_bf68, i32* %r2.global-to-local, align 4
  %v4_c2bc = sdiv i32 %v0_c2b4, 256
  store i32 %v4_c2bc, i32* %r3.global-to-local, align 4
  %v1_c2c0 = load i32, i32* @r4, align 4
  %v9_c2c0 = icmp eq i32 %v3_bf68, %v1_c2c0
  store i1 %v9_c2c0, i1* %cpsr_z.global-to-local, align 1
  %v1_c2c4 = trunc i32 %v4_c2bc to i8
  %v2_c2c4 = load i32, i32* @r5, align 4
  %v3_c2c4 = add i32 %v2_c2c4, 5
  %v4_c2c4 = inttoptr i32 %v3_c2c4 to i8*
  store i8 %v1_c2c4, i8* %v4_c2c4, align 1
  %v3_c2c8 = load i32, i32* @r5, align 4
  %v4_c2c8 = add i32 %v3_c2c8, 4
  %v5_c2c8 = inttoptr i32 %v4_c2c8 to i8*
  store i8 %v1_c2b4, i8* %v5_c2c8, align 1
  %v0_c2cc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2cc, label %dec_label_pc_c2d0, label %dec_label_pc_c2b4.dec_label_pc_c164_crit_edge

dec_label_pc_c2b4.dec_label_pc_c164_crit_edge:    ; preds = %dec_label_pc_c2b4
  %v1_c168.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c164

dec_label_pc_c2d0:                                ; preds = %dec_label_pc_c2b4, %dec_label_pc_c158
  %v0_c2d0 = call i32 @function_e958()
  %v1_c2d0 = trunc i32 %v0_c2d0 to i8
  store i32 %v0_c2d0, i32* %r0.global-to-local, align 4
  %v4_c2d4 = sdiv i32 %v0_c2d0, 256
  store i32 %v4_c2d4, i32* %r3.global-to-local, align 4
  %v3_c2d8 = load i32, i32* @r5, align 4
  %v4_c2d8 = add i32 %v3_c2d8, 20
  %v5_c2d8 = inttoptr i32 %v4_c2d8 to i8*
  store i8 %v1_c2d0, i8* %v5_c2d8, align 1
  %v0_c2dc = load i32, i32* %r3.global-to-local, align 4
  %v1_c2dc = trunc i32 %v0_c2dc to i8
  %v2_c2dc = load i32, i32* @r6, align 4
  %v3_c2dc = add i32 %v2_c2dc, 1
  %v4_c2dc = inttoptr i32 %v3_c2dc to i8*
  store i8 %v1_c2dc, i8* %v4_c2dc, align 1
  store i32 %v3_bf6c, i32* %r3.global-to-local, align 4
  %v1_c2e4 = load i32, i32* @r4, align 4
  %v9_c2e4 = icmp eq i32 %v3_bf6c, %v1_c2e4
  store i1 %v9_c2e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c2e4, label %dec_label_pc_c2ec, label %dec_label_pc_c170

dec_label_pc_c2ec:                                ; preds = %dec_label_pc_c2d0, %dec_label_pc_c164
  %v0_c2ec = call i32 @function_e958()
  %v1_c2ec = trunc i32 %v0_c2ec to i8
  store i32 %v0_c2ec, i32* %r0.global-to-local, align 4
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  %v4_c2f4 = sdiv i32 %v0_c2ec, 256
  store i32 %v4_c2f4, i32* %r3.global-to-local, align 4
  store i1 %v2_c174, i1* %cpsr_z.global-to-local, align 1
  %v1_c2fc = trunc i32 %v4_c2f4 to i8
  %v2_c2fc = load i32, i32* @r6, align 4
  %v3_c2fc = add i32 %v2_c2fc, 3
  %v4_c2fc = inttoptr i32 %v3_c2fc to i8*
  store i8 %v1_c2fc, i8* %v4_c2fc, align 1
  %v3_c300 = load i32, i32* @r6, align 4
  %v4_c300 = add i32 %v3_c300, 2
  %v5_c300 = inttoptr i32 %v4_c300 to i8*
  store i8 %v1_c2ec, i8* %v5_c300, align 1
  %v0_c304 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c304, label %dec_label_pc_c17c, label %dec_label_pc_c308

dec_label_pc_c308:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c2ec
  %v0_c308 = load i32, i32* @r5, align 4
  %v1_c308 = add i32 %v0_c308, 28
  store i32 %v1_c308, i32* %r0.global-to-local, align 4
  store i32 %v0_bf44, i32* @r1, align 4
  %v1_c310 = inttoptr i32 %v1_c308 to i8*
  %v2_c310 = call i32 @function_ead8(i8* %v1_c310)
  store i32 %v2_c310, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c17c

dec_label_pc_c318:                                ; preds = %dec_label_pc_bf04
  store i32 %v3_bef4, i32* %r0.global-to-local, align 4
  %v1_c31c = call i32 @function_11574(i32 %v3_bef4)
  store i32 %v1_c31c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c320

dec_label_pc_c320:                                ; preds = %dec_label_pc_bdb8, %dec_label_pc_c318
  %v29_c324 = phi i32 [ %v3_bef4, %dec_label_pc_bdb8 ], [ %v1_c31c, %dec_label_pc_c318 ]
  store i32 %v18_bdb8, i32* %sb.global-to-local, align 4
  store i32 %v24_bdb8, i32* %fp.global-to-local, align 4
  ret i32 %v29_c324

dec_label_pc_c328:                                ; preds = %dec_label_pc_bf88
  %v3_c32c = sext i8 %v5_bfec to i32
  %v7_c32c = sext i8 %v5_bff0 to i32
  %v3_c330 = sdiv i32 %v3_c32c, 256
  store i32 %v3_c330, i32* %r0.global-to-local, align 4
  %v3_c334 = sdiv i32 %v7_c32c, 256
  store i32 %v3_c334, i32* %r1.global-to-local, align 4
  store i32 %v1_bfc4, i32* %r2.global-to-local, align 4
  store i32 %v1_bfc8, i32* %r3.global-to-local, align 4
  %v3_c34034 = udiv i32 %v1_bfe0, 256
  store i32 %v3_c34034, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %sext11 = mul i32 %v1_bfe0, 65536
  %v4_c404 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v0_bf58, 16777216
  %v4_c408 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_bf54, 16777216
  %v4_c424 = sdiv i32 %sext13, 16777216
  %v1_c410 = trunc i32 %v3_c334 to i8
  %v1_c42c = trunc i32 %v4_c424 to i8
  br label %dec_label_pc_c35c

dec_label_pc_c35c:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c328
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_c368 = call i32 @function_12178(i32 1510, i32 1)
  store i32 %v2_c368, i32* %r0.global-to-local, align 4
  store i32 %v2_bdd8, i32* %r1.global-to-local, align 4
  %v3_c370 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c370, i32* %r2.global-to-local, align 4
  %v2_c374 = load i32, i32* @r6, align 4
  %v5_c374 = mul i32 %v2_c374, 4
  %v6_c374 = add i32 %v5_c374, %v2_bdd8
  %v7_c374 = inttoptr i32 %v6_c374 to i32*
  store i32 %v2_c368, i32* %v7_c374, align 4
  %v0_c378 = load i32, i32* %r1.global-to-local, align 4
  %v1_c378 = load i32, i32* %r2.global-to-local, align 4
  %v4_c378 = mul i32 %v1_c378, 4
  %v5_c378 = add i32 %v4_c378, %v0_c378
  %v6_c378 = inttoptr i32 %v5_c378 to i32*
  %v7_c378 = load i32, i32* %v6_c378, align 4
  store i32 %v7_c378, i32* %r1.global-to-local, align 4
  %v1_c37c = inttoptr i32 %v7_c378 to i8*
  %v2_c37c = load i8, i8* %v1_c37c, align 1
  %tmp86 = urem i8 %v2_c37c, 16
  %v1_c380 = zext i8 %tmp86 to i32
  %v1_c384 = or i32 %v1_c380, 64
  store i32 %v1_c384, i32* %r3.global-to-local, align 4
  %v1_c388 = trunc i32 %v1_c384 to i8
  store i8 %v1_c388, i8* %v1_c37c, align 1
  %v0_c38c = load i32, i32* %r1.global-to-local, align 4
  %v1_c38c = inttoptr i32 %v0_c38c to i8*
  %v2_c38c = load i8, i8* %v1_c38c, align 1
  %v3_c38c = zext i8 %v2_c38c to i32
  %v1_c390 = and i32 %v3_c38c, 240
  %v1_c394 = or i32 %v1_c390, 5
  store i32 %v1_c394, i32* %r2.global-to-local, align 4
  %v3_c39c = add i32 %v0_c38c, 9
  %v4_c39c = inttoptr i32 %v3_c39c to i8*
  store i8 17, i8* %v4_c39c, align 1
  %v0_c3a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3a0 = trunc i32 %v0_c3a0 to i8
  %v2_c3a0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3a0 = inttoptr i32 %v2_c3a0 to i8*
  store i8 %v1_c3a0, i8* %v3_c3a0, align 1
  %v2_c3a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3a8 = add i32 %v2_c3a8, 1
  %v4_c3a8 = inttoptr i32 %v3_c3a8 to i8*
  store i8 %v5_be10, i8* %v4_c3a8, align 1
  store i32 %v6_be2c, i32* %r0.global-to-local, align 4
  %v2_c3b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3b0 = add i32 %v2_c3b0, 8
  %v4_c3b0 = inttoptr i32 %v3_c3b0 to i8*
  store i8 %v5_be48, i8* %v4_c3b0, align 1
  %v3_c3b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c3b4, i32* %r2.global-to-local, align 4
  store i32 %v6_bee0, i32* %ip.global-to-local, align 4
  %v3_c3bc = mul i32 %v3_c3b4, 32
  store i32 %v3_c3bc, i32* %r3.global-to-local, align 4
  %v1_c3c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c3c0 = add i32 %v1_c3c0, 12
  %v3_c3c0 = inttoptr i32 %v2_c3c0 to i32*
  store i32 %v6_bee0, i32* %v3_c3c0, align 4
  %v0_c3c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3c4 = load i32, i32* %r2.global-to-local, align 4
  %tmp87 = mul i32 %v1_c3c4, -8
  %v5_c3c4 = add i32 %v0_c3c4, %tmp87
  %v1_c3c8 = load i32, i32* @r8, align 4
  %v2_c3c8 = add i32 %v5_c3c4, %v1_c3c8
  store i32 %v2_c3c8, i32* %r3.global-to-local, align 4
  %v1_c3cc = add i32 %v2_c3c8, 16
  %v2_c3cc = inttoptr i32 %v1_c3cc to i32*
  %v3_c3cc = load i32, i32* %v2_c3cc, align 4
  store i32 %v3_c3cc, i32* %ip.global-to-local, align 4
  %v1_c3d0 = add i32 %v1_c3c4, 1
  store i32 %v1_c3d0, i32* @r6, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c3dc = load i32, i32* %r1.global-to-local, align 4
  %v3_c3dc = add i32 %v2_c3dc, 6
  %v4_c3dc = inttoptr i32 %v3_c3dc to i8*
  store i8 64, i8* %v4_c3dc, align 1
  %v0_c3e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3e0 = trunc i32 %v0_c3e0 to i8
  %v2_c3e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3e0 = add i32 %v2_c3e0, 7
  %v4_c3e0 = inttoptr i32 %v3_c3e0 to i8*
  store i8 %v1_c3e0, i8* %v4_c3e0, align 1
  %v0_c3e4 = load i32, i32* %ip.global-to-local, align 4
  %v1_c3e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_c3e4 = add i32 %v1_c3e4, 16
  %v3_c3e4 = inttoptr i32 %v2_c3e4 to i32*
  store i32 %v0_c3e4, i32* %v3_c3e4, align 4
  store i32 %v3_c330, i32* %r3.global-to-local, align 4
  store i32 %v7_c32c, i32* %ip.global-to-local, align 4
  %v2_c3f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3f4 = add i32 %v2_c3f4, 2
  %v4_c3f4 = inttoptr i32 %v3_c3f4 to i8*
  store i8 %v5_bfec, i8* %v4_c3f4, align 1
  %v0_c3f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3f8 = trunc i32 %v0_c3f8 to i8
  %v2_c3f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3f8 = add i32 %v2_c3f8, 3
  %v4_c3f8 = inttoptr i32 %v3_c3f8 to i8*
  store i8 %v1_c3f8, i8* %v4_c3f8, align 1
  %v0_c3fc = load i32, i32* %ip.global-to-local, align 4
  %v1_c3fc = trunc i32 %v0_c3fc to i8
  %v2_c3fc = load i32, i32* %r1.global-to-local, align 4
  %v3_c3fc = add i32 %v2_c3fc, 4
  %v4_c3fc = inttoptr i32 %v3_c3fc to i8*
  store i8 %v1_c3fc, i8* %v4_c3fc, align 1
  store i32 %v3_c334, i32* %r2.global-to-local, align 4
  store i32 %v4_c404, i32* %r3.global-to-local, align 4
  store i32 %v4_c408, i32* %ip.global-to-local, align 4
  %v0_c40c = load i32, i32* %r1.global-to-local, align 4
  %v1_c40c = add i32 %v0_c40c, 20
  store i32 %v1_c40c, i32* %r0.global-to-local, align 4
  %v3_c410 = add i32 %v0_c40c, 5
  %v4_c410 = inttoptr i32 %v3_c410 to i8*
  store i8 %v1_c410, i8* %v4_c410, align 1
  %v0_c414 = load i32, i32* @r4, align 4
  %v1_c414 = trunc i32 %v0_c414 to i8
  %v2_c414 = load i32, i32* %r1.global-to-local, align 4
  %v3_c414 = add i32 %v2_c414, 20
  %v4_c414 = inttoptr i32 %v3_c414 to i8*
  store i8 %v1_c414, i8* %v4_c414, align 1
  %v0_c418 = load i32, i32* %r3.global-to-local, align 4
  %v1_c418 = trunc i32 %v0_c418 to i8
  %v2_c418 = load i32, i32* %r0.global-to-local, align 4
  %v3_c418 = add i32 %v2_c418, 5
  %v4_c418 = inttoptr i32 %v3_c418 to i8*
  store i8 %v1_c418, i8* %v4_c418, align 1
  %v0_c41c = load i32, i32* %ip.global-to-local, align 4
  %v1_c41c = trunc i32 %v0_c41c to i8
  %v2_c41c = load i32, i32* %r0.global-to-local, align 4
  %v3_c41c = add i32 %v2_c41c, 1
  %v4_c41c = inttoptr i32 %v3_c41c to i8*
  store i8 %v1_c41c, i8* %v4_c41c, align 1
  %v0_c420 = load i32, i32* @r5, align 4
  %v1_c420 = trunc i32 %v0_c420 to i8
  %v2_c420 = load i32, i32* %r0.global-to-local, align 4
  %v3_c420 = add i32 %v2_c420, 2
  %v4_c420 = inttoptr i32 %v3_c420 to i8*
  store i8 %v1_c420, i8* %v4_c420, align 1
  store i32 %v4_c424, i32* %r1.global-to-local, align 4
  %v0_c428 = load i32, i32* @r6, align 4
  %v1_c428 = load i32, i32* @sl, align 4
  %v9_c428 = icmp eq i32 %v0_c428, %v1_c428
  store i1 %v9_c428, i1* %cpsr_z.global-to-local, align 1
  %v2_c42c = load i32, i32* %r0.global-to-local, align 4
  %v3_c42c = add i32 %v2_c42c, 3
  %v4_c42c = inttoptr i32 %v3_c42c to i8*
  store i8 %v1_c42c, i8* %v4_c42c, align 1
  %v0_c430 = load i32, i32* @r7, align 4
  %v1_c430 = trunc i32 %v0_c430 to i8
  %v2_c430 = load i32, i32* %r0.global-to-local, align 4
  %v3_c430 = add i32 %v2_c430, 4
  %v4_c430 = inttoptr i32 %v3_c430 to i8*
  store i8 %v1_c430, i8* %v4_c430, align 1
  %v0_c434 = load i32, i32* @r6, align 4
  store i32 %v0_c434, i32* %stack_var_-40, align 4
  %v5_c438 = icmp slt i32 %v0_c428, %v1_c428
  br i1 %v5_c438, label %dec_label_pc_c35c, label %dec_label_pc_c0fc

; uselistorder directives
  uselistorder i32 %v1_c3c4, { 1, 0 }
  uselistorder i32 %v3_c334, { 2, 1, 0 }
  uselistorder i32 %v3_c330, { 1, 0 }
  uselistorder i32 %v7_c32c, { 1, 0 }
  uselistorder i32 %v4_c2f4, { 1, 0 }
  uselistorder i32 %v0_c2ec, { 0, 2, 1 }
  uselistorder i32 %v0_c2d0, { 0, 2, 1 }
  uselistorder i32 %v4_c2bc, { 1, 0 }
  uselistorder i32 %v0_c2b4, { 0, 2, 1 }
  uselistorder i32 %v2_c288, { 1, 0 }
  uselistorder i32 %v8_c268, { 2, 0, 1, 3 }
  uselistorder i32 %v3_c254, { 1, 0 }
  uselistorder i32 %v3_c230, { 2, 3, 1, 0 }
  uselistorder i1 %v2_c224, { 1, 0 }
  uselistorder i32 %v1_c218, { 1, 2, 3, 0 }
  uselistorder i32 %v1_c214, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_c1bc, { 0, 2, 1 }
  uselistorder i32 %v0_c1a4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_c190, { 1, 0 }
  uselistorder i32 %v2_c18c, { 0, 2, 1 }
  uselistorder i1 %v7_c13c, { 2, 1, 0 }
  uselistorder i1 %v3_c2a8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c00036, { 1, 0 }
  uselistorder i8 %v5_bfec, { 0, 2, 1 }
  uselistorder i32 %v3_bfd8, { 1, 0 }
  uselistorder i32 %v1_bfc8, { 2, 3, 0, 1 }
  uselistorder i32 %v1_bfc4, { 1, 2, 0 }
  uselistorder i32 %v1_bfbc, { 1, 0, 2 }
  uselistorder i32 %v1_bfb4, { 1, 0 }
  uselistorder i32 %v1_bf8c, { 1, 0, 2 }
  uselistorder i32 %v3_bf6c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_bf4c, { 2, 1, 4, 3, 0 }
  uselistorder i32 %v0_bf48, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v0_bf44, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_bf38, { 3, 1, 2, 0 }
  uselistorder i1 %v7_bf24, { 1, 0 }
  uselistorder i1 %v7_bef8, { 1, 0 }
  uselistorder i32 %v3_bef4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_bee0, { 2, 1, 7, 5, 0, 6, 4, 3 }
  uselistorder i32 %v1_becc, { 3, 1, 2, 4, 0 }
  uselistorder i32 %v1_be58, { 1, 2, 0 }
  uselistorder i32 %v6_be2c, { 2, 1, 3, 0 }
  uselistorder i32 %v6_bdf0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_bdd8, { 0, 3, 1, 5, 2, 4, 6 }
  uselistorder i32 %v1_bdbc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 10, 8, 9, 12, 11, 14, 13, 15, 16, 17, 19, 18, 21, 20, 22, 24, 23, 30, 25, 26, 27, 28, 29, 35, 31, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_c320, { 1, 0 }
  uselistorder label %dec_label_pc_c308, { 1, 0 }
  uselistorder label %dec_label_pc_c17c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c104, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_c444(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c444:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c444 = load i32, i32* @r4, align 4
  %v12_c444 = load i32, i32* @r7, align 4
  %v1_c448 = urem i32 %arg1, 256
  store i32 %v1_c448, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_c45c = urem i32 %arg3, 256
  store i32 %v1_c45c, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_c464 = call i32 @function_12178(i32 %v1_c448, i32 4)
  %v0_c468 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c474 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c47c = inttoptr i32 %v0_c468 to i32*
  %v6_c47c = call i32 @function_85e0(i32 %v0_c474, i32* %v5_c47c, i32 2, i32 0, i32 %v2_c464)
  %v1_c488 = urem i32 %v6_c47c, 256
  store i32 %v1_c488, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c494 = load i32, i32* @r4, align 4
  %v0_c498 = load i32, i32* @r5, align 4
  %v5_c49c = trunc i32 %v6_c47c to i8
  %v6_c4a0 = inttoptr i32 %v0_c498 to i32*
  %v7_c4a0 = call i32 @function_85e0(i32 %v0_c494, i32* %v6_c4a0, i32 3, i32 65535, i32 %v6_c47c)
  %v0_c4a4 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c4a0, i32* @r7, align 4
  %v0_c4b4 = load i32, i32* @r4, align 4
  %v5_c4b8 = inttoptr i32 %v0_c4a4 to i32*
  %v6_c4b8 = call i32 @function_85e0(i32 %v0_c4b4, i32* %v5_c4b8, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_c4c0 = urem i32 %v6_c4b8, 256
  store i32 %v1_c4c0, i32* %ip.global-to-local, align 4
  %v0_c4c4 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c4d0 = load i32, i32* @r4, align 4
  %v5_c4d4 = trunc i32 %v6_c4b8 to i8
  %v6_c4d8 = inttoptr i32 %v0_c4c4 to i32*
  %v7_c4d8 = call i32 @function_85e0(i32 %v0_c4d0, i32* %v6_c4d8, i32 5, i32 0, i32 %v6_c4b8)
  %v1_c4e4 = urem i32 %v7_c4d8, 256
  store i32 %v1_c4e4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c4f0 = load i32, i32* @r4, align 4
  %v0_c4f4 = load i32, i32* @r5, align 4
  %v5_c4fc = inttoptr i32 %v0_c4f4 to i32*
  %v6_c4fc = call i32 @function_85e0(i32 %v0_c4f0, i32* %v5_c4fc, i32 6, i32 65535, i32 %v1_c4e4)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c50c = load i32, i32* @r5, align 4
  store i32 %v6_c4fc, i32* @r6, align 4
  %v0_c514 = load i32, i32* @r4, align 4
  %v5_c518 = inttoptr i32 %v0_c50c to i32*
  %v6_c518 = call i32 @function_85e0(i32 %v0_c514, i32* %v5_c518, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c518, i32* @r4, align 4
  %v1_c524 = call i32 @function_10628(i32 23)
  %v3_c530 = call i32 @function_10544(i32 23, i32* nonnull %stack_var_-44)
  store i32 %v3_c530, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_c544 = call i32 @function_11e8c(i32 2, i32 3, i32 17)
  %v7_c548 = icmp eq i32 %v3_c544, -1
  store i1 %v7_c548, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c544, i32* %fp.global-to-local, align 4
  br i1 %v7_c548, label %dec_label_pc_c8fc, label %dec_label_pc_c554

dec_label_pc_c554:                                ; preds = %dec_label_pc_c444
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c55c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c55c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c570 = call i32 @function_11e5c(i32 %v3_c544, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_c574 = icmp eq i32 %v6_c570, -1
  store i1 %v7_c574, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c574, label %dec_label_pc_c8f4, label %dec_label_pc_c57c

dec_label_pc_c57c:                                ; preds = %dec_label_pc_c554
  %v0_c57c = load i32, i32* @r4, align 4
  %v3_c57c = mul i32 %v0_c57c, 65536
  store i32 %v3_c57c, i32* @lr, align 4
  %v0_c580 = load i32, i32* @r7, align 4
  %v0_c584 = load i32, i32* @r6, align 4
  %v3_c584 = mul i32 %v0_c584, 65536
  store i32 %v3_c584, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_c58c = urem i32 %v0_c580, 65536
  %v3_c590 = urem i32 %v0_c584, 65536
  store i32 %v3_c590, i32* %r2.global-to-local, align 4
  %v3_c594 = urem i32 %v0_c57c, 65536
  store i32 %v3_c594, i32* %r3.global-to-local, align 4
  %v0_c598 = load i32, i32* %sb.global-to-local, align 4
  %v2_c598 = icmp eq i32 %v0_c598, 0
  store i1 %v2_c598, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp50 = icmp slt i32 %v0_c598, 1
  br i1 %tmp50, label %dec_label_pc_c71c, label %dec_label_pc_c5b0

dec_label_pc_c5b0:                                ; preds = %dec_label_pc_c57c
  %v1_c5b4 = urem i32 %v0_c57c, 256
  %v1_c5b8 = urem i32 %v0_c584, 256
  %v1_c5bc = urem i32 %v0_c580, 256
  %v3_c5c0 = mul nuw nsw i32 %v1_c5b8, 256
  %v3_c5c4 = mul nuw nsw i32 %v1_c5b4, 256
  %tmp51 = udiv i32 %v0_c580, 256
  %v3_c5c8 = urem i32 %tmp51, 256
  %v4_c5cc = mul nuw nsw i32 %v1_c5bc, 256
  %v5_c5cc = or i32 %v4_c5cc, %v3_c5c8
  store i32 %v5_c5cc, i32* @r7, align 4
  %tmp52 = udiv i32 %v0_c57c, 256
  %v4_c5d0 = urem i32 %tmp52, 256
  %v5_c5d0 = or i32 %v4_c5d0, %v3_c5c4
  store i32 %v5_c5d0, i32* @r5, align 4
  %tmp53 = udiv i32 %v0_c584, 256
  %v4_c5d4 = urem i32 %tmp53, 256
  %v5_c5d4 = or i32 %v4_c5d4, %v3_c5c0
  store i32 %v5_c5d4, i32* @r6, align 4
  store i32 %v1_c5b8, i32* %r2.global-to-local, align 4
  store i32 %v1_c5b4, i32* %r3.global-to-local, align 4
  %v2_c650 = icmp eq i32 %v1_c4e4, 0
  %sext = mul i32 %v0_c580, 16777216
  %v4_c670 = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v0_c584, 16777216
  %v4_c6cc = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_c57c, 16777216
  %v4_c6ec = sdiv i32 %sext7, 16777216
  br label %dec_label_pc_c5f0

dec_label_pc_c5f0:                                ; preds = %bb57, %dec_label_pc_c5b0
  %v2_c5f8 = call i32 @function_12178(i32 128, i32 1)
  store i32 %v2_c464, i32* %r2.global-to-local, align 4
  %v3_c600 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c600, i32* %r3.global-to-local, align 4
  %v2_c604 = load i32, i32* @r4, align 4
  %v5_c604 = mul i32 %v2_c604, 4
  %v6_c604 = add i32 %v5_c604, %v2_c464
  %v7_c604 = inttoptr i32 %v6_c604 to i32*
  store i32 %v2_c5f8, i32* %v7_c604, align 4
  %v0_c608 = load i32, i32* %r2.global-to-local, align 4
  %v1_c608 = load i32, i32* %r3.global-to-local, align 4
  %v4_c608 = mul i32 %v1_c608, 4
  %v5_c608 = add i32 %v4_c608, %v0_c608
  %v6_c608 = inttoptr i32 %v5_c608 to i32*
  %v7_c608 = load i32, i32* %v6_c608, align 4
  store i32 %v7_c608, i32* @lr, align 4
  %v1_c60c = inttoptr i32 %v7_c608 to i8*
  %v2_c60c = load i8, i8* %v1_c60c, align 1
  %tmp = urem i8 %v2_c60c, 16
  %v1_c610 = zext i8 %tmp to i32
  %v1_c614 = or i32 %v1_c610, 64
  store i32 %v1_c614, i32* %r3.global-to-local, align 4
  %v1_c618 = trunc i32 %v1_c614 to i8
  store i8 %v1_c618, i8* %v1_c60c, align 1
  %v0_c61c = load i32, i32* @lr, align 4
  %v1_c61c = inttoptr i32 %v0_c61c to i8*
  %v2_c61c = load i8, i8* %v1_c61c, align 1
  %v1_c620 = and i8 %v2_c61c, -16
  %v1_c624 = or i8 %v1_c620, 5
  store i8 %v1_c624, i8* %v1_c61c, align 1
  %v2_c630 = load i32, i32* @lr, align 4
  %v3_c630 = add i32 %v2_c630, 1
  %v4_c630 = inttoptr i32 %v3_c630 to i8*
  store i8 %v5_c49c, i8* %v4_c630, align 1
  %v3_c634 = load i32, i32* %stack_var_-44, align 4
  %v1_c638 = add i32 %v3_c634, 32
  %tmp54 = mul i32 %v1_c638, 256
  %v1_c644 = and i32 %tmp54, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp55 = udiv i32 %v1_c638, 256
  %v4_c648 = urem i32 %tmp55, 256
  %v5_c648 = or i32 %v4_c648, %v1_c644
  store i32 %v5_c648, i32* %r2.global-to-local, align 4
  store i1 %v2_c650, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_c4b8, i32* %r3.global-to-local, align 4
  %v2_c658 = load i32, i32* @lr, align 4
  %v3_c658 = add i32 %v2_c658, 8
  %v4_c658 = inttoptr i32 %v3_c658 to i8*
  store i8 %v5_c4d4, i8* %v4_c658, align 1
  %v0_c65c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c65c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c5f0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c660 = load i32, i32* @lr, align 4
  %v4_c660 = add i32 %v3_c660, 6
  %v5_c660 = inttoptr i32 %v4_c660 to i8*
  store i8 64, i8* %v5_c660, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c5f0, %bb
  %v0_c664 = load i32, i32* %r2.global-to-local, align 4
  %v1_c664 = trunc i32 %v0_c664 to i8
  %v2_c664 = load i32, i32* @lr, align 4
  %v3_c664 = add i32 %v2_c664, 2
  %v4_c664 = inttoptr i32 %v3_c664 to i8*
  store i8 %v1_c664, i8* %v4_c664, align 1
  %v0_c668 = load i32, i32* %r2.global-to-local, align 4
  %v3_c668 = sdiv i32 %v0_c668, 256
  store i32 %v3_c668, i32* %ip.global-to-local, align 4
  store i32 %v4_c670, i32* %r2.global-to-local, align 4
  %v2_c674 = load i32, i32* @lr, align 4
  %v3_c674 = add i32 %v2_c674, 9
  %v4_c674 = inttoptr i32 %v3_c674 to i8*
  store i8 17, i8* %v4_c674, align 1
  store i32 ptrtoint (i32* @global_var_1c5dc.51 to i32), i32* %r3.global-to-local, align 4
  %v0_c67c = load i32, i32* %r2.global-to-local, align 4
  %v1_c67c = trunc i32 %v0_c67c to i8
  %v2_c67c = load i32, i32* @lr, align 4
  %v3_c67c = add i32 %v2_c67c, 5
  %v4_c67c = inttoptr i32 %v3_c67c to i8*
  store i8 %v1_c67c, i8* %v4_c67c, align 1
  %v0_c680 = load i32, i32* %ip.global-to-local, align 4
  %v1_c680 = trunc i32 %v0_c680 to i8
  %v2_c680 = load i32, i32* @lr, align 4
  %v3_c680 = add i32 %v2_c680, 3
  %v4_c680 = inttoptr i32 %v3_c680 to i8*
  store i8 %v1_c680, i8* %v4_c680, align 1
  %v0_c684 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c684, label %.thread8, label %bb56

.thread8:                                         ; preds = %.thread
  %v3_c6889 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c6889, i32* %ip.global-to-local, align 4
  br label %bb57

bb56:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c688 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c688, i32* %ip.global-to-local, align 4
  %v3_c68c = load i32, i32* @lr, align 4
  %v4_c68c = add i32 %v3_c68c, 7
  %v5_c68c = inttoptr i32 %v4_c68c to i8*
  store i8 0, i8* %v5_c68c, align 1
  %v0_c694.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %bb56
  %v0_c694 = phi i32 [ %v3_c6889, %.thread8 ], [ %v0_c694.pre, %bb56 ]
  %v2_c690 = load i32, i32* @global_var_1c5dc.51, align 4
  store i32 %v2_c690, i32* %r2.global-to-local, align 4
  %v3_c694 = mul i32 %v0_c694, 32
  store i32 %v3_c694, i32* %r3.global-to-local, align 4
  %v1_c698 = load i32, i32* @lr, align 4
  %v2_c698 = add i32 %v1_c698, 12
  %v3_c698 = inttoptr i32 %v2_c698 to i32*
  store i32 %v2_c690, i32* %v3_c698, align 4
  %v0_c69c = load i32, i32* %r3.global-to-local, align 4
  %v1_c69c = load i32, i32* %ip.global-to-local, align 4
  %tmp60 = mul i32 %v1_c69c, -8
  %v5_c69c = add i32 %v0_c69c, %tmp60
  %v1_c6a0 = load i32, i32* @sl, align 4
  %v2_c6a0 = add i32 %v5_c69c, %v1_c6a0
  store i32 %v2_c6a0, i32* %r3.global-to-local, align 4
  %v1_c6a4 = add i32 %v2_c6a0, 16
  %v2_c6a4 = inttoptr i32 %v1_c6a4 to i32*
  %v3_c6a4 = load i32, i32* %v2_c6a4, align 4
  %v1_c6a8 = load i32, i32* @lr, align 4
  %v2_c6a8 = add i32 %v1_c6a8, 16
  %v3_c6a8 = inttoptr i32 %v2_c6a8 to i32*
  store i32 %v3_c6a4, i32* %v3_c6a8, align 4
  %v3_c6ac = load i32, i32* %stack_var_-44, align 4
  %v1_c6b0 = add i32 %v3_c6ac, 12
  %tmp58 = mul i32 %v1_c6b0, 256
  %v1_c6c0 = and i32 %tmp58, and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960)
  %tmp59 = udiv i32 %v1_c6b0, 256
  %v4_c6c4 = urem i32 %tmp59, 256
  %v5_c6c4 = or i32 %v4_c6c4, %v1_c6c0
  store i32 %v5_c6c4, i32* %ip.global-to-local, align 4
  %v1_c6c8 = load i32, i32* @lr, align 4
  %v2_c6c8 = add i32 %v1_c6c8, 28
  %v3_c6c8 = inttoptr i32 %v2_c6c8 to i32*
  store i32 -1, i32* %v3_c6c8, align 4
  store i32 %v4_c6cc, i32* %r2.global-to-local, align 4
  %v0_c6d0 = load i32, i32* @lr, align 4
  %v1_c6d0 = add i32 %v0_c6d0, 20
  store i32 %v1_c6d0, i32* %r4.global-to-local, align 4
  %v0_c6d4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c6d4 = sdiv i32 %v0_c6d4, 256
  store i32 %v3_c6d4, i32* %r3.global-to-local, align 4
  %v0_c6d8 = load i32, i32* @r7, align 4
  %v1_c6d8 = trunc i32 %v0_c6d8 to i8
  %v3_c6d8 = add i32 %v0_c6d0, 4
  %v4_c6d8 = inttoptr i32 %v3_c6d8 to i8*
  store i8 %v1_c6d8, i8* %v4_c6d8, align 1
  %v0_c6dc = load i32, i32* @r6, align 4
  %v1_c6dc = trunc i32 %v0_c6dc to i8
  %v2_c6dc = load i32, i32* @lr, align 4
  %v3_c6dc = add i32 %v2_c6dc, 20
  %v4_c6dc = inttoptr i32 %v3_c6dc to i8*
  store i8 %v1_c6dc, i8* %v4_c6dc, align 1
  %v0_c6e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c6e0 = trunc i32 %v0_c6e0 to i8
  %v2_c6e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6e0 = add i32 %v2_c6e0, 5
  %v4_c6e0 = inttoptr i32 %v3_c6e0 to i8*
  store i8 %v1_c6e0, i8* %v4_c6e0, align 1
  %v0_c6e4 = load i32, i32* @r5, align 4
  %v1_c6e4 = trunc i32 %v0_c6e4 to i8
  %v2_c6e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6e4 = add i32 %v2_c6e4, 2
  %v4_c6e4 = inttoptr i32 %v3_c6e4 to i8*
  store i8 %v1_c6e4, i8* %v4_c6e4, align 1
  %v0_c6e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6e8 = trunc i32 %v0_c6e8 to i8
  %v2_c6e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6e8 = add i32 %v2_c6e8, 1
  %v4_c6e8 = inttoptr i32 %v3_c6e8 to i8*
  store i8 %v1_c6e8, i8* %v4_c6e8, align 1
  store i32 %v4_c6ec, i32* %r3.global-to-local, align 4
  %v0_c6f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_c6f0 = trunc i32 %v0_c6f0 to i8
  %v2_c6f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6f0 = add i32 %v2_c6f0, 4
  %v4_c6f0 = inttoptr i32 %v3_c6f0 to i8*
  store i8 %v1_c6f0, i8* %v4_c6f0, align 1
  %v0_c6f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c6f4 = trunc i32 %v0_c6f4 to i8
  %v2_c6f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6f4 = add i32 %v2_c6f4, 3
  %v4_c6f4 = inttoptr i32 %v3_c6f4 to i8*
  store i8 %v1_c6f4, i8* %v4_c6f4, align 1
  %v0_c6f8 = load i32, i32* %r8.global-to-local, align 4
  %v0_c6fc = load i32, i32* @lr, align 4
  %v1_c6fc = add i32 %v0_c6fc, 32
  %v3_c700 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c700, i32* %r2.global-to-local, align 4
  %v3_c704 = call i32 @function_10cec(i32 %v1_c6fc, i32 %v0_c6f8, i32 %v3_c700)
  %v3_c708 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c708, i32* %r3.global-to-local, align 4
  %v1_c70c = add i32 %v3_c708, 1
  store i32 %v1_c70c, i32* @r4, align 4
  %v1_c710 = load i32, i32* %sb.global-to-local, align 4
  %v9_c710 = icmp eq i32 %v1_c70c, %v1_c710
  store i1 %v9_c710, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c70c, i32* %stack_var_-40, align 4
  %v5_c718 = icmp slt i32 %v1_c70c, %v1_c710
  br i1 %v5_c718, label %dec_label_pc_c5f0, label %dec_label_pc_c71c

dec_label_pc_c71c:                                ; preds = %bb57, %dec_label_pc_c57c
  %v0_c71c = phi i32 [ %v0_c598, %dec_label_pc_c57c ], [ %v1_c710, %bb57 ]
  %v2_c71c = icmp eq i32 %v0_c71c, 0
  store i1 %v2_c71c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c764 = icmp eq i32 %v3_c58c, 65535
  br label %dec_label_pc_c724.outer

dec_label_pc_c724.outer:                          ; preds = %dec_label_pc_c834, %dec_label_pc_c71c
  %v1_c724.ph.in = phi i32 [ %v1_c828, %dec_label_pc_c834 ], [ %v0_c71c, %dec_label_pc_c71c ]
  %v0_c724.ph = phi i1 [ %v2_c834, %dec_label_pc_c834 ], [ %v2_c71c, %dec_label_pc_c71c ]
  %v1_c724.ph = icmp slt i32 %v1_c724.ph.in, 0
  %v4_c724 = or i1 %v1_c724.ph, %v0_c724.ph
  br label %dec_label_pc_c724

dec_label_pc_c724:                                ; preds = %dec_label_pc_c724.outer, %dec_label_pc_c724
  br i1 %v4_c724, label %dec_label_pc_c724, label %dec_label_pc_c728

dec_label_pc_c728:                                ; preds = %dec_label_pc_c724
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_c734

dec_label_pc_c734:                                ; preds = %dec_label_pc_c784, %dec_label_pc_c728
  %v1_c748 = phi i32 [ %v1_c824, %dec_label_pc_c784 ], [ 0, %dec_label_pc_c728 ]
  %v5_c738 = mul i32 %v1_c748, 24
  %v1_c73c = load i32, i32* @sl, align 4
  %v2_c73c = add i32 %v1_c73c, %v5_c738
  store i32 %v2_c73c, i32* %r3.global-to-local, align 4
  %v1_c744 = add i32 %v2_c73c, 20
  %v2_c744 = inttoptr i32 %v1_c744 to i8*
  %v3_c744 = load i8, i8* %v2_c744, align 1
  %v4_c744 = zext i8 %v3_c744 to i32
  store i32 %v4_c744, i32* %r2.global-to-local, align 4
  %v4_c748 = mul i32 %v1_c748, 4
  %v5_c748 = add i32 %v4_c748, %v2_c464
  %v6_c748 = inttoptr i32 %v5_c748 to i32*
  %v7_c748 = load i32, i32* %v6_c748, align 4
  store i32 %v7_c748, i32* @r5, align 4
  %v7_c750 = icmp eq i8 %v3_c744, 31
  store i1 %v7_c750, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_c758 = add i32 %v7_c748, 20
  store i32 %v1_c758, i32* @r6, align 4
  %tmp61 = icmp ult i8 %v3_c744, 32
  br i1 %tmp61, label %dec_label_pc_c840, label %dec_label_pc_c760

dec_label_pc_c760:                                ; preds = %dec_label_pc_c734
  store i32 %v3_c58c, i32* %r2.global-to-local, align 4
  store i1 %v3_c764, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c764, label %dec_label_pc_c8a8, label %dec_label_pc_c76c

dec_label_pc_c76c:                                ; preds = %dec_label_pc_c840.dec_label_pc_c76c_crit_edge, %dec_label_pc_c760
  %v1_c770 = phi i32 [ %v1_c770.pre, %dec_label_pc_c840.dec_label_pc_c76c_crit_edge ], [ 65535, %dec_label_pc_c760 ]
  store i32 %v3_c590, i32* %r3.global-to-local, align 4
  %v9_c770 = icmp eq i32 %v3_c590, %v1_c770
  store i1 %v9_c770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c770, label %dec_label_pc_c8c4, label %dec_label_pc_c778

dec_label_pc_c778:                                ; preds = %dec_label_pc_c8a8.dec_label_pc_c778_crit_edge, %dec_label_pc_c76c
  %v1_c77c = phi i32 [ %v1_c77c.pre, %dec_label_pc_c8a8.dec_label_pc_c778_crit_edge ], [ %v1_c770, %dec_label_pc_c76c ]
  %v9_c77c = icmp eq i32 %v3_c594, %v1_c77c
  store i1 %v9_c77c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c77c, label %dec_label_pc_c8e0, label %dec_label_pc_c784

dec_label_pc_c784:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c778, %dec_label_pc_c8e0
  %v0_c788 = load i32, i32* %r8.global-to-local, align 4
  %v1_c788 = trunc i32 %v0_c788 to i8
  %v2_c788 = load i32, i32* @r5, align 4
  %v3_c788 = add i32 %v2_c788, 10
  %v4_c788 = inttoptr i32 %v3_c788 to i8*
  store i8 %v1_c788, i8* %v4_c788, align 1
  %v0_c78c = load i32, i32* %r8.global-to-local, align 4
  %v1_c78c = trunc i32 %v0_c78c to i8
  %v2_c78c = load i32, i32* @r5, align 4
  %v3_c78c = add i32 %v2_c78c, 11
  %v4_c78c = inttoptr i32 %v3_c78c to i8*
  store i8 %v1_c78c, i8* %v4_c78c, align 1
  %v0_c790 = load i32, i32* @r5, align 4
  store i32 %v0_c790, i32* @r0, align 4
  %v2_c794 = call i32 @function_d0b8(i32 %v0_c790, i32 20)
  %v3_c794 = trunc i32 %v2_c794 to i8
  %v4_c798 = sdiv i32 %v2_c794, 256
  store i32 %v4_c798, i32* %r3.global-to-local, align 4
  %v1_c79c = trunc i32 %v4_c798 to i8
  %v2_c79c = load i32, i32* @r5, align 4
  %v3_c79c = add i32 %v2_c79c, 11
  %v4_c79c = inttoptr i32 %v3_c79c to i8*
  store i8 %v1_c79c, i8* %v4_c79c, align 1
  %v3_c7a0 = load i32, i32* @r5, align 4
  %v4_c7a0 = add i32 %v3_c7a0, 10
  %v5_c7a0 = inttoptr i32 %v4_c7a0 to i8*
  store i8 %v3_c794, i8* %v5_c7a0, align 1
  %v0_c7a4 = load i32, i32* %r8.global-to-local, align 4
  %v1_c7a4 = trunc i32 %v0_c7a4 to i8
  %v2_c7a4 = load i32, i32* @r6, align 4
  %v3_c7a4 = add i32 %v2_c7a4, 6
  %v4_c7a4 = inttoptr i32 %v3_c7a4 to i8*
  store i8 %v1_c7a4, i8* %v4_c7a4, align 1
  %v0_c7a8 = load i32, i32* %r8.global-to-local, align 4
  %v1_c7a8 = trunc i32 %v0_c7a8 to i8
  %v2_c7a8 = load i32, i32* @r6, align 4
  %v3_c7a8 = add i32 %v2_c7a8, 7
  %v4_c7a8 = inttoptr i32 %v3_c7a8 to i8*
  store i8 %v1_c7a8, i8* %v4_c7a8, align 1
  %v0_c7ac = load i32, i32* @r5, align 4
  %v1_c7ac = add i32 %v0_c7ac, 24
  %v2_c7ac = inttoptr i32 %v1_c7ac to i8*
  %v3_c7ac = load i8, i8* %v2_c7ac, align 1
  %v4_c7ac = zext i8 %v3_c7ac to i32
  store i32 %v4_c7ac, i32* %r3.global-to-local, align 4
  %v1_c7b0 = add i32 %v0_c7ac, 25
  %v2_c7b0 = inttoptr i32 %v1_c7b0 to i8*
  %v3_c7b0 = load i8, i8* %v2_c7b0, align 1
  %v4_c7b0 = zext i8 %v3_c7b0 to i32
  %v4_c7b4 = mul nuw nsw i32 %v4_c7b0, 256
  %v5_c7b4 = or i32 %v4_c7b4, %v4_c7ac
  store i32 %v5_c7b4, i32* %r2.global-to-local, align 4
  %v3_c7b8 = load i32, i32* %stack_var_-44, align 4
  %v0_c7bc = load i32, i32* @r6, align 4
  store i32 %v0_c7bc, i32* @r1, align 4
  %v1_c7c0 = add i32 %v3_c7b8, 12
  store i32 %v1_c7c0, i32* %r3.global-to-local, align 4
  %v4_c7c8 = call i32 @function_d114(i32 %v0_c7ac, i32 %v0_c7bc, i32 %v5_c7b4, i32 %v1_c7c0)
  %v5_c7c8 = trunc i32 %v4_c7c8 to i8
  %v4_c7cc24 = udiv i32 %v4_c7c8, 256
  %v1_c7d0 = trunc i32 %v4_c7cc24 to i8
  %v2_c7d0 = load i32, i32* @r6, align 4
  %v3_c7d0 = add i32 %v2_c7d0, 7
  %v4_c7d0 = inttoptr i32 %v3_c7d0 to i8*
  store i8 %v1_c7d0, i8* %v4_c7d0, align 1
  %v3_c7d4 = load i32, i32* @r6, align 4
  %v4_c7d4 = add i32 %v3_c7d4, 6
  %v5_c7d4 = inttoptr i32 %v4_c7d4 to i8*
  store i8 %v5_c7c8, i8* %v5_c7d4, align 1
  %v3_c7d8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c7d8, i32* %r3.global-to-local, align 4
  %v0_c7dc = load i32, i32* @r5, align 4
  %v1_c7dc = add i32 %v0_c7dc, 20
  %v2_c7dc = inttoptr i32 %v1_c7dc to i32*
  %v3_c7dc = load i32, i32* %v2_c7dc, align 4
  %v5_c7e4 = mul i32 %v3_c7d8, 24
  %v1_c7e8 = load i32, i32* @sl, align 4
  %v2_c7e8 = add i32 %v1_c7e8, %v5_c7e4
  store i32 %v2_c7e8, i32* %ip.global-to-local, align 4
  %v3_c7ec = udiv i32 %v3_c7dc, 65536
  store i32 %v3_c7ec, i32* %r2.global-to-local, align 4
  %v1_c7f0 = trunc i32 %v3_c7ec to i8
  %v3_c7f0 = add i32 %v2_c7e8, 2
  %v4_c7f0 = inttoptr i32 %v3_c7f0 to i8*
  store i8 %v1_c7f0, i8* %v4_c7f0, align 1
  %v0_c7f4 = load i32, i32* %r2.global-to-local, align 4
  %v3_c7f425 = udiv i32 %v0_c7f4, 256
  %v3_c7f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c7f8, i32* %r2.global-to-local, align 4
  %v1_c7fc = trunc i32 %v3_c7f425 to i8
  %v2_c7fc = load i32, i32* %ip.global-to-local, align 4
  %v3_c7fc = add i32 %v2_c7fc, 3
  %v4_c7fc = inttoptr i32 %v3_c7fc to i8*
  store i8 %v1_c7fc, i8* %v4_c7fc, align 1
  %v0_c800 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c808 = load i32, i32* %r2.global-to-local, align 4
  %v1_c808 = add i32 %v0_c808, 32
  store i32 %v1_c808, i32* %r2.global-to-local, align 4
  %v0_c80c = load i32, i32* %fp.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c814 = load i32, i32* %ip.global-to-local, align 4
  %v6_c81c = inttoptr i32 %v0_c800 to i32*
  %v7_c81c = call i32 @function_11e28(i32 %v0_c80c, i32* %v6_c81c, i32 %v1_c808, i32 16384, i32 %v0_c814, i32 16)
  %v3_c820 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c820, i32* %r3.global-to-local, align 4
  %v1_c824 = add i32 %v3_c820, 1
  %v1_c828 = load i32, i32* %sb.global-to-local, align 4
  %v9_c828 = icmp eq i32 %v1_c824, %v1_c828
  store i1 %v9_c828, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c824, i32* %stack_var_-40, align 4
  %v5_c830 = icmp slt i32 %v1_c824, %v1_c828
  br i1 %v5_c830, label %dec_label_pc_c734, label %dec_label_pc_c834

dec_label_pc_c834:                                ; preds = %dec_label_pc_c784
  %v2_c834 = icmp eq i32 %v1_c828, 0
  store i1 %v2_c834, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c724.outer

dec_label_pc_c840:                                ; preds = %dec_label_pc_c734
  %v1_c840 = add i32 %v2_c73c, 16
  %v2_c840 = inttoptr i32 %v1_c840 to i32*
  %v3_c840 = load i32, i32* %v2_c840, align 4
  store i32 %v3_c840, i32* @r4, align 4
  %v0_c844 = call i32 @function_e958()
  %v3_c848 = load i32, i32* %stack_var_-40, align 4
  %v5_c850 = mul i32 %v3_c848, 24
  %v0_c854 = load i32, i32* @r4, align 4
  %v1_c858 = and i32 %v0_c854, ptrtoint (i32* @global_var_ff00.25 to i32)
  store i32 %v1_c858, i32* %r3.global-to-local, align 4
  %v1_c854 = udiv i32 %v0_c854, 256
  %v3_c85c = and i32 %v1_c854, 65280
  store i32 %v3_c85c, i32* %r2.global-to-local, align 4
  %v1_c860 = load i32, i32* @sl, align 4
  %v2_c860 = add i32 %v1_c860, %v5_c850
  store i32 %v2_c860, i32* %ip.global-to-local, align 4
  %v3_c864 = mul i32 %v0_c854, 16777216
  %v4_c868 = mul i32 %v1_c858, 256
  %v5_c868 = or i32 %v4_c868, %v3_c864
  %v1_c86c = add i32 %v2_c860, 20
  %v2_c86c = inttoptr i32 %v1_c86c to i8*
  %v3_c86c = load i8, i8* %v2_c86c, align 1
  %v4_c86c = zext i8 %v3_c86c to i32
  %v4_c870 = udiv i32 %v0_c854, 16777216
  %v5_c870 = or i32 %v3_c85c, %v4_c870
  %v2_c874 = or i32 %v5_c870, %v5_c868
  %v7_c878 = lshr i32 %v0_c844, %v4_c86c
  %v8_c878 = add i32 %v7_c878, %v2_c874
  store i32 %v3_c58c, i32* %r2.global-to-local, align 4
  %v2_c898 = call i32 @llvm.bswap.i32(i32 %v8_c878)
  store i32 %v2_c898, i32* %r3.global-to-local, align 4
  %v1_c89c = load i32, i32* %r7.global-to-local, align 4
  %v9_c89c = icmp eq i32 %v3_c58c, %v1_c89c
  store i1 %v9_c89c, i1* %cpsr_z.global-to-local, align 1
  %v1_c8a0 = load i32, i32* @r5, align 4
  %v2_c8a0 = add i32 %v1_c8a0, 16
  %v3_c8a0 = inttoptr i32 %v2_c8a0 to i32*
  store i32 %v2_c898, i32* %v3_c8a0, align 4
  br i1 %v9_c89c, label %dec_label_pc_c8a8, label %dec_label_pc_c840.dec_label_pc_c76c_crit_edge

dec_label_pc_c840.dec_label_pc_c76c_crit_edge:    ; preds = %dec_label_pc_c840
  %v1_c770.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c76c

dec_label_pc_c8a8:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c760
  %v0_c8a8 = call i32 @function_e958()
  %v1_c8a8 = trunc i32 %v0_c8a8 to i8
  %v4_c8ac26 = udiv i32 %v0_c8a8, 256
  %v1_c8b0 = trunc i32 %v4_c8ac26 to i8
  %v2_c8b0 = load i32, i32* @r5, align 4
  %v3_c8b0 = add i32 %v2_c8b0, 5
  %v4_c8b0 = inttoptr i32 %v3_c8b0 to i8*
  store i8 %v1_c8b0, i8* %v4_c8b0, align 1
  store i32 %v3_c590, i32* %r3.global-to-local, align 4
  %v1_c8b8 = load i32, i32* %r7.global-to-local, align 4
  %v9_c8b8 = icmp eq i32 %v3_c590, %v1_c8b8
  store i1 %v9_c8b8, i1* %cpsr_z.global-to-local, align 1
  %v3_c8bc = load i32, i32* @r5, align 4
  %v4_c8bc = add i32 %v3_c8bc, 4
  %v5_c8bc = inttoptr i32 %v4_c8bc to i8*
  store i8 %v1_c8a8, i8* %v5_c8bc, align 1
  %v0_c8c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c8c0, label %dec_label_pc_c8c4, label %dec_label_pc_c8a8.dec_label_pc_c778_crit_edge

dec_label_pc_c8a8.dec_label_pc_c778_crit_edge:    ; preds = %dec_label_pc_c8a8
  %v1_c77c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c778

dec_label_pc_c8c4:                                ; preds = %dec_label_pc_c8a8, %dec_label_pc_c76c
  %v0_c8c4 = call i32 @function_e958()
  %v1_c8c4 = trunc i32 %v0_c8c4 to i8
  %v4_c8cc = sdiv i32 %v0_c8c4, 256
  store i32 %v4_c8cc, i32* %r3.global-to-local, align 4
  %v1_c8d0 = load i32, i32* %r7.global-to-local, align 4
  %v9_c8d0 = icmp eq i32 %v3_c594, %v1_c8d0
  store i1 %v9_c8d0, i1* %cpsr_z.global-to-local, align 1
  %v3_c8d4 = load i32, i32* @r5, align 4
  %v4_c8d4 = add i32 %v3_c8d4, 20
  %v5_c8d4 = inttoptr i32 %v4_c8d4 to i8*
  store i8 %v1_c8c4, i8* %v5_c8d4, align 1
  %v0_c8d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c8d8 = trunc i32 %v0_c8d8 to i8
  %v2_c8d8 = load i32, i32* @r6, align 4
  %v3_c8d8 = add i32 %v2_c8d8, 1
  %v4_c8d8 = inttoptr i32 %v3_c8d8 to i8*
  store i8 %v1_c8d8, i8* %v4_c8d8, align 1
  %v0_c8dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c8dc, label %dec_label_pc_c8e0, label %dec_label_pc_c784

dec_label_pc_c8e0:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c778
  %v0_c8e0 = call i32 @function_e958()
  %v1_c8e0 = trunc i32 %v0_c8e0 to i8
  %v4_c8e4 = sdiv i32 %v0_c8e0, 256
  store i32 %v4_c8e4, i32* %r3.global-to-local, align 4
  %v1_c8e8 = trunc i32 %v4_c8e4 to i8
  %v2_c8e8 = load i32, i32* @r6, align 4
  %v3_c8e8 = add i32 %v2_c8e8, 3
  %v4_c8e8 = inttoptr i32 %v3_c8e8 to i8*
  store i8 %v1_c8e8, i8* %v4_c8e8, align 1
  %v3_c8ec = load i32, i32* @r6, align 4
  %v4_c8ec = add i32 %v3_c8ec, 2
  %v5_c8ec = inttoptr i32 %v4_c8ec to i8*
  store i8 %v1_c8e0, i8* %v5_c8ec, align 1
  br label %dec_label_pc_c784

dec_label_pc_c8f4:                                ; preds = %dec_label_pc_c554
  %v0_c8f4 = load i32, i32* %fp.global-to-local, align 4
  %v1_c8f8 = call i32 @function_11574(i32 %v0_c8f4)
  br label %dec_label_pc_c8fc

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c444, %dec_label_pc_c8f4
  %v29_c900 = phi i32 [ %v3_c544, %dec_label_pc_c444 ], [ %v1_c8f8, %dec_label_pc_c8f4 ]
  store i32 %v3_c444, i32* %r4.global-to-local, align 4
  store i32 %v12_c444, i32* %r7.global-to-local, align 4
  ret i32 %v29_c900

; uselistorder directives
  uselistorder i32 %v4_c8e4, { 1, 0 }
  uselistorder i32 %v2_c898, { 1, 0 }
  uselistorder i32 %v0_c854, { 1, 0, 2, 3 }
  uselistorder i1 %v2_c834, { 1, 0 }
  uselistorder i32 %v1_c828, { 1, 2, 3, 0 }
  uselistorder i32 %v1_c824, { 2, 0, 3, 1 }
  uselistorder i32 %v3_c7ec, { 1, 0 }
  uselistorder i32 %v4_c798, { 1, 0 }
  uselistorder i1 %v3_c764, { 1, 0 }
  uselistorder i32 %v1_c70c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c6b0, { 1, 0 }
  uselistorder i32 %v1_c638, { 1, 0 }
  uselistorder i32 %v1_c5b8, { 1, 0 }
  uselistorder i32 %v1_c5b4, { 1, 0 }
  uselistorder i32 %v0_c584, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c57c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_c574, { 1, 0 }
  uselistorder i1 %v7_c548, { 1, 0 }
  uselistorder i32 %v3_c544, { 1, 2, 3, 0 }
  uselistorder i32 %v1_c4e4, { 1, 2, 0 }
  uselistorder i32 %v6_c4b8, { 2, 1, 3, 0 }
  uselistorder i32 %v6_c47c, { 1, 2, 0 }
  uselistorder i32 %v1_c448, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 6, 2, 1, 3, 0, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 39, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i32 and (i32 ptrtoint (i32* @global_var_ff00.25 to i32), i32 16776960), { 6, 7, 0, 8, 1, 9, 2, 3, 10, 11, 12, 13, 14, 15, 4, 5 }
  uselistorder label %dec_label_pc_c8fc, { 1, 0 }
  uselistorder label %dec_label_pc_c784, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c724, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c908(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c908:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_c908 = load i32, i32* @r4, align 4
  %v15_c908 = load i32, i32* @r8, align 4
  %v18_c908 = load i32, i32* @sb, align 4
  %v21_c908 = load i32, i32* @sl, align 4
  %v24_c908 = load i32, i32* @fp, align 4
  %v1_c914 = urem i32 %arg1, 256
  store i32 %v1_c914, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_c920 = urem i32 %arg3, 256
  store i32 %v1_c920, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_c92c = call i32 @function_12178(i32 %v1_c914, i32 4)
  %v0_c930 = load i32, i32* @r5, align 4
  store i32 %v0_c930, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c93c = load i32, i32* @r4, align 4
  store i32 %v0_c93c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c944 = inttoptr i32 %v0_c930 to i32*
  %v6_c944 = call i32 @function_85e0(i32 %v0_c93c, i32* %v5_c944, i32 2, i32 0, i32 %v2_c92c)
  %v1_c950 = urem i32 %v6_c944, 256
  store i32 %v1_c950, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c95c = load i32, i32* @r4, align 4
  store i32 %v0_c95c, i32* %r0.global-to-local, align 4
  %v0_c960 = load i32, i32* @r5, align 4
  store i32 %v0_c960, i32* %r1.global-to-local, align 4
  %v5_c964 = trunc i32 %v6_c944 to i8
  %v6_c968 = inttoptr i32 %v0_c960 to i32*
  %v7_c968 = call i32 @function_85e0(i32 %v0_c95c, i32* %v6_c968, i32 3, i32 65535, i32 %v6_c944)
  %v0_c96c = load i32, i32* @r5, align 4
  store i32 %v0_c96c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_c978 = load i32, i32* @r4, align 4
  store i32 %v0_c978, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_c980 = inttoptr i32 %v0_c96c to i32*
  %v6_c980 = call i32 @function_85e0(i32 %v0_c978, i32* %v5_c980, i32 4, i32 64, i32 %v7_c968)
  %v1_c988 = urem i32 %v6_c980, 256
  store i32 %v1_c988, i32* %ip.global-to-local, align 4
  %v0_c98c = load i32, i32* @r5, align 4
  store i32 %v0_c98c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c998 = load i32, i32* @r4, align 4
  store i32 %v0_c998, i32* %r0.global-to-local, align 4
  %sext35 = mul i32 %v6_c980, 16777216
  %v5_c9a0 = sdiv i32 %sext35, 16777216
  %v6_c9a0 = inttoptr i32 %v0_c98c to i32*
  %v7_c9a0 = call i32 @function_85e0(i32 %v0_c998, i32* %v6_c9a0, i32 5, i32 0, i32 %v5_c9a0)
  %v1_c9ac = urem i32 %v7_c9a0, 256
  store i32 %v1_c9ac, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c9b8 = load i32, i32* @r4, align 4
  store i32 %v0_c9b8, i32* %r0.global-to-local, align 4
  %v0_c9bc = load i32, i32* @r5, align 4
  store i32 %v0_c9bc, i32* %r1.global-to-local, align 4
  %v5_c9c4 = inttoptr i32 %v0_c9bc to i32*
  %v6_c9c4 = call i32 @function_85e0(i32 %v0_c9b8, i32* %v5_c9c4, i32 6, i32 65535, i32 %v1_c9ac)
  %v0_c9c8 = load i32, i32* @r5, align 4
  store i32 %v0_c9c8, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_c9c4, i32* %fp.global-to-local, align 4
  %v0_c9d8 = load i32, i32* @r4, align 4
  store i32 %v0_c9d8, i32* %r0.global-to-local, align 4
  %v5_c9dc = inttoptr i32 %v0_c9c8 to i32*
  %v6_c9dc = call i32 @function_85e0(i32 %v0_c9d8, i32* %v5_c9dc, i32 7, i32 53, i32 ptrtoint (i32* @0 to i32))
  %v0_c9e4 = load i32, i32* @r5, align 4
  store i32 %v0_c9e4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v6_c9dc, i32* %sb.global-to-local, align 4
  %v0_c9f4 = load i32, i32* @r4, align 4
  store i32 %v0_c9f4, i32* %r0.global-to-local, align 4
  %v5_c9f8 = inttoptr i32 %v0_c9e4 to i32*
  %v6_c9f8 = call i32 @function_85e0(i32 %v0_c9f4, i32* %v5_c9f8, i32 9, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_c9fc = load i32, i32* @r5, align 4
  store i32 %v0_c9fc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v6_c9f8, i32* @sl, align 4
  %v0_ca0c = load i32, i32* @r4, align 4
  store i32 %v0_ca0c, i32* %r0.global-to-local, align 4
  %v5_ca10 = inttoptr i32 %v0_c9fc to i32*
  %v6_ca10 = call i32 @function_85e0(i32 %v0_ca0c, i32* %v5_ca10, i32 0, i32 12, i32 ptrtoint (i32* @0 to i32))
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca1c = load i32, i32* @r5, align 4
  store i32 %v0_ca1c, i32* %r1.global-to-local, align 4
  store i32 %v6_ca10, i32* %r8.global-to-local, align 4
  %v0_ca24 = load i32, i32* @r4, align 4
  store i32 %v0_ca24, i32* %r0.global-to-local, align 4
  %v4_ca28 = inttoptr i32 %v0_ca1c to i32*
  %v5_ca28 = call i32 @function_81cc(i32 %v0_ca24, i32* %v4_ca28, i32 8, i32 0)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_ca34 = call i32 @function_10628(i32 24)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_ca40 = call i32 @function_10544(i32 24, i32* null)
  store i32 %v3_ca40, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_ca48 = inttoptr i32 %v3_ca40 to i8*
  %v3_ca48 = call i32 @function_116a0(i8* %v2_ca48, i32 0)
  store i32 %v3_ca48, i32* @r4, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_ca54 = call i32 @function_10570(i32 24)
  store i32 %v1_ca54, i32* %r0.global-to-local, align 4
  %v0_ca58 = load i32, i32* @r4, align 4
  %v1_ca58 = icmp slt i32 %v0_ca58, 0
  %v2_ca58 = icmp eq i32 %v0_ca58, 0
  store i1 %v2_ca58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_ca58, label %dec_label_pc_d024, label %dec_label_pc_ca60

dec_label_pc_ca60:                                ; preds = %dec_label_pc_c908
  %v2_ca64 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_ca64, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_ca64, i32* %r1.global-to-local, align 4
  store i32 %v0_ca58, i32* %r0.global-to-local, align 4
  %v4_ca74 = call i32 @function_1173c(i32 %v0_ca58, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_ca74, i32* @r5, align 4
  %v0_ca7c = load i32, i32* @r4, align 4
  store i32 %v0_ca7c, i32* %r0.global-to-local, align 4
  %v1_ca80 = call i32 @function_11574(i32 %v0_ca7c)
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_ca88 = call i32 @function_10628(i32 25)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_ca94 = call i32 @function_10544(i32 25, i32* null)
  %v0_ca98 = load i32, i32* @r5, align 4
  store i32 %v0_ca98, i32* @r1, align 4
  store i32 %v3_ca94, i32* %r2.global-to-local, align 4
  store i32 %v2_ca64, i32* %r0.global-to-local, align 4
  %v3_caa4 = bitcast i32* %stack_var_-2120 to i8*
  %v4_caa4 = call i32 @function_10fc4(i8* %v3_caa4, i32 %v0_ca98, i32 %v3_ca94)
  store i32 %v4_caa4, i32* @r4, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_cab0 = call i32 @function_10570(i32 25)
  store i32 %v1_cab0, i32* %r0.global-to-local, align 4
  %v0_cab4 = load i32, i32* @r4, align 4
  %v7_cab4 = icmp eq i32 %v0_cab4, -1
  store i1 %v7_cab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cab4, label %dec_label_pc_d024, label %dec_label_pc_cabc

dec_label_pc_cabc:                                ; preds = %dec_label_pc_ca60
  %v0_cabc = load i32, i32* @r5, align 4
  %v9_cabc = icmp eq i32 %v0_cabc, %v0_cab4
  store i1 %v9_cabc, i1* %cpsr_z.global-to-local, align 1
  %v7_cac0 = icmp sgt i32 %v0_cabc, %v0_cab4
  br i1 %v7_cac0, label %dec_label_pc_cac4, label %dec_label_pc_d024

dec_label_pc_cac4:                                ; preds = %dec_label_pc_cabc
  store i32 %v0_cabc, i32* %r3.global-to-local, align 4
  store i32 %v0_cab4, i32* %r2.global-to-local, align 4
  %v0_cad4 = load i32, i32* @r6, align 4
  %v2_cad4 = add i32 %v0_cad4, %v0_cab4
  store i32 %v2_cad4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_cadc = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_cadc, i32* @r7, align 4
  %v1_cb0c = add i32 %v0_cabc, -1
  br label %dec_label_pc_cb04

dec_label_pc_cae8:                                ; preds = %dec_label_pc_cb2c, %bb138
  %v9_cae8 = icmp eq i32 %v0_caf4, %v1_cb0c
  store i1 %v9_cae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cae8, label %dec_label_pc_cb38, label %dec_label_pc_caf0

dec_label_pc_caf0:                                ; preds = %dec_label_pc_cb1c, %dec_label_pc_cae8, %bb
  %v0_cb2842 = phi i32 [ %v0_cb28, %dec_label_pc_cb1c ], [ %v0_cb2843, %dec_label_pc_cae8 ], [ %v0_cb28, %bb ]
  %v0_cb0838 = phi i32 [ 0, %dec_label_pc_cb1c ], [ %v0_cb0839, %dec_label_pc_cae8 ], [ 0, %bb ]
  store i32 %v0_cabc, i32* %r0.global-to-local, align 4
  %v1_caf4 = add i32 %v0_caf4, 1
  store i32 %v1_caf4, i32* %r2.global-to-local, align 4
  %v9_caf8 = icmp eq i32 %v0_cabc, %v1_caf4
  store i1 %v9_caf8, i1* %cpsr_z.global-to-local, align 1
  %v1_cafc = add i32 %v0_cafc, 1
  store i32 %v1_cafc, i32* @r7, align 4
  br i1 %v9_caf8, label %dec_label_pc_d024, label %dec_label_pc_cb04

dec_label_pc_cb04:                                ; preds = %dec_label_pc_caf0, %dec_label_pc_cac4
  %v0_cafc = phi i32 [ %v1_cafc, %dec_label_pc_caf0 ], [ %v2_cadc, %dec_label_pc_cac4 ]
  %v0_caf4 = phi i32 [ %v1_caf4, %dec_label_pc_caf0 ], [ %v0_cab4, %dec_label_pc_cac4 ]
  %v0_cb28 = phi i32 [ %v0_cb2842, %dec_label_pc_caf0 ], [ 0, %dec_label_pc_cac4 ]
  %v0_cb08 = phi i32 [ %v0_cb0838, %dec_label_pc_caf0 ], [ 0, %dec_label_pc_cac4 ]
  %v0_cb10 = phi i32 [ %v1_cb10, %dec_label_pc_caf0 ], [ %v2_cad4, %dec_label_pc_cac4 ]
  %v1_cb04 = inttoptr i32 %v0_cb10 to i8*
  %v2_cb04 = load i8, i8* %v1_cb04, align 1
  %v3_cb04 = zext i8 %v2_cb04 to i32
  store i32 %v3_cb04, i32* %r3.global-to-local, align 4
  %v2_cb08 = icmp eq i32 %v0_cb08, 0
  store i1 %v2_cb08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cb0c, i32* %ip.global-to-local, align 4
  %v1_cb10 = add i32 %v0_cb10, 1
  store i32 %v1_cb10, i32* %r1.global-to-local, align 4
  %v1_cb14 = add nsw i32 %v3_cb04, -48
  store i32 %v1_cb14, i32* %r0.global-to-local, align 4
  br i1 %v2_cb08, label %dec_label_pc_cb1c, label %dec_label_pc_cb2c

dec_label_pc_cb1c:                                ; preds = %dec_label_pc_cb04
  %v7_cb1c = icmp eq i8 %v2_cb04, 9
  store i1 %v7_cb1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb1c, label %dec_label_pc_caf0, label %bb

bb:                                               ; preds = %dec_label_pc_cb1c
  %v8_cb20 = icmp eq i8 %v2_cb04, 32
  store i1 %v8_cb20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_cb20, label %dec_label_pc_caf0, label %dec_label_pc_cb28

dec_label_pc_cb28:                                ; preds = %bb
  %v1_cb28 = add i32 %v0_cb28, 1
  store i32 %v1_cb28, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_cb2c

dec_label_pc_cb2c:                                ; preds = %dec_label_pc_cb04, %dec_label_pc_cb28
  %v0_cb2843 = phi i32 [ %v0_cb28, %dec_label_pc_cb04 ], [ %v1_cb28, %dec_label_pc_cb28 ]
  %v0_cb0839 = phi i32 [ %v0_cb08, %dec_label_pc_cb04 ], [ %v1_cb28, %dec_label_pc_cb28 ]
  %v7_cb2c = icmp eq i8 %v2_cb04, 46
  store i1 %v7_cb2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb2c, label %dec_label_pc_cae8, label %bb138

bb138:                                            ; preds = %dec_label_pc_cb2c
  %v8_cb30 = icmp eq i32 %v1_cb14, 9
  store i1 %v8_cb30, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_cb14, 10
  br i1 %tmp, label %dec_label_pc_cae8, label %dec_label_pc_cb38

dec_label_pc_cb38:                                ; preds = %dec_label_pc_cae8, %bb138
  %v0_caf4.lcssa = phi i32 [ %v1_cb0c, %dec_label_pc_cae8 ], [ %v0_caf4, %bb138 ]
  %v2_cb3c = sub i32 %v0_caf4.lcssa, %v0_cab4
  store i32 %v2_cb3c, i32* %r2.global-to-local, align 4
  store i32 %v2_cad4, i32* %r1.global-to-local, align 4
  store i32 %v2_cadc, i32* %r0.global-to-local, align 4
  %v3_cb48 = call i32 @function_10cec(i32 %v2_cadc, i32 %v2_cad4, i32 %v2_cb3c)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_cadc, i32* @r0, align 4
  %v2_cb58 = load i32, i32* @r7, align 4
  %v3_cb58 = inttoptr i32 %v2_cb58 to i8*
  store i8 0, i8* %v3_cb58, align 1
  %v1_cb5c = call i32 @function_11c6c(i32 %v2_cadc)
  store i32 %v1_cb5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cb64

dec_label_pc_cb6419:                              ; preds = %dec_label_pc_d024
  unreachable

dec_label_pc_cb64:                                ; preds = %dec_label_pc_d09c, %dec_label_pc_d08c, %dec_label_pc_d080, %dec_label_pc_d06c, %dec_label_pc_cb38
  %v29_d06874 = phi i32 [ %v1_d028, %dec_label_pc_d09c ], [ %v1_d028, %dec_label_pc_d08c ], [ %v1_d028, %dec_label_pc_d080 ], [ %v1_d028, %dec_label_pc_d06c ], [ %v1_cb5c, %dec_label_pc_cb38 ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_d09c ], [ 104859200, %dec_label_pc_d08c ], [ 707416650, %dec_label_pc_d080 ], [ 134744072, %dec_label_pc_d06c ], [ %v1_cb5c, %dec_label_pc_cb38 ]
  store i32 %v5_ca28, i32* %ip.global-to-local, align 4
  %v2_cb68 = icmp eq i32 %v5_ca28, 0
  store i1 %v2_cb68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cb68, label %dec_label_pc_d060, label %dec_label_pc_cb70

dec_label_pc_cb70:                                ; preds = %dec_label_pc_cb64
  store i32 %v5_ca28, i32* %r0.global-to-local, align 4
  %v1_cb74 = inttoptr i32 %v5_ca28 to i8*
  %v2_cb74 = call i32 @function_10c70(i8* %v1_cb74)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_cb88 = call i32 @function_11e8c(i32 2, i32 3, i32 17)
  store i32 %v3_cb88, i32* %r0.global-to-local, align 4
  %v7_cb8c = icmp eq i32 %v3_cb88, -1
  store i1 %v7_cb8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb8c, label %dec_label_pc_d060, label %dec_label_pc_cb98

dec_label_pc_cb98:                                ; preds = %dec_label_pc_cb70
  store i32 1, i32* %stack_var_-40, align 4
  %v6_cba4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_cba4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_cbb8 = call i32 @function_11e5c(i32 %v3_cb88, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_cbb8, i32* %r0.global-to-local, align 4
  %v7_cbbc = icmp eq i32 %v6_cbb8, -1
  store i1 %v7_cbbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cbbc, label %dec_label_pc_d058, label %dec_label_pc_cbc4

dec_label_pc_cbc4:                                ; preds = %dec_label_pc_cb98
  store i32 %v1_c914, i32* %r0.global-to-local, align 4
  %v3_cbcc = mul i32 %v7_c968, 65536
  store i32 %v3_cbcc, i32* %lr.global-to-local, align 4
  %v0_cbd0 = load i32, i32* @sl, align 4
  %v3_cbd0 = mul i32 %v0_cbd0, 65536
  store i32 %v3_cbd0, i32* %sl.global-to-local, align 4
  %v0_cbd4 = load i32, i32* %r8.global-to-local, align 4
  %v0_cbd8 = load i32, i32* %fp.global-to-local, align 4
  %v0_cbdc = load i32, i32* %sb.global-to-local, align 4
  %v3_cbdc = mul i32 %v0_cbdc, 65536
  store i32 %v3_cbdc, i32* %sb.global-to-local, align 4
  %v5_cbe0 = trunc i32 %v0_cbd4 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_cbe8 = urem i32 %v7_c968, 65536
  store i32 %v3_cbe8, i32* %r2.global-to-local, align 4
  %v3_cbec = urem i32 %v0_cbd8, 65536
  store i32 %v3_cbec, i32* %r3.global-to-local, align 4
  %v3_cbf0 = urem i32 %v0_cbdc, 65536
  store i32 %v3_cbf0, i32* %r4.global-to-local, align 4
  %v3_cbf4 = urem i32 %v0_cbd0, 65536
  store i32 %v3_cbf4, i32* %r8.global-to-local, align 4
  %v2_cbf8 = icmp eq i32 %v1_c914, 0
  store i1 %v2_cbf8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_cbf8, label %dec_label_pc_d048, label %dec_label_pc_cc1c

dec_label_pc_cc1c:                                ; preds = %dec_label_pc_cbc4
  %v4_cc20 = sext i8 %v5_cbe0 to i32
  %v2_cc24 = add i32 %v4_cc20, %v2_cb74
  store i32 %v2_cc24, i32* @fp, align 4
  %v3_cc28 = mul i32 %v2_cc24, 65536
  %v1_cc2c = add i32 %v3_cc28, 1769472
  store i32 %v1_cc2c, i32* @r6, align 4
  %v1_cc30 = add i32 %v3_cc28, 3080192
  %v1_cc44 = urem i32 %v0_cbd0, 256
  %v3_cc54 = udiv i32 %v1_cc2c, 256
  %v1_cc58 = urem i32 %v7_c968, 256
  %v1_cc5c = and i32 %v3_cc54, 65280
  %v1_cc60 = urem i32 %v0_cbdc, 256
  %v3_cc64 = mul nuw nsw i32 %v1_cc44, 256
  %v1_cc6c = urem i32 %v0_cbd8, 256
  %v3_cc70 = mul nuw nsw i32 %v1_cc60, 256
  %tmp139 = udiv i32 %v0_cbd0, 256
  %v4_cc74 = urem i32 %tmp139, 256
  %v5_cc74 = or i32 %v4_cc74, %v3_cc64
  store i32 %v5_cc74, i32* %r8.global-to-local, align 4
  %v4_cc78 = udiv i32 %v1_cc2c, 16777216
  %v5_cc78 = or i32 %v1_cc5c, %v4_cc78
  store i32 %v5_cc78, i32* %sl.global-to-local, align 4
  %tmp140 = udiv i32 %v0_cbd8, 256
  %v3_cc84 = urem i32 %tmp140, 256
  %v4_cc88 = sdiv i32 %v1_cc30, 16777216
  %tmp141 = udiv i32 %v7_c968, 256
  %v4_cc90 = mul nuw nsw i32 %v1_cc6c, 256
  %v5_cc90 = or i32 %v4_cc90, %v3_cc84
  store i32 %v5_cc90, i32* @r5, align 4
  %tmp142 = udiv i32 %v0_cbdc, 256
  %v4_cc94 = urem i32 %tmp142, 256
  %v5_cc94 = or i32 %v4_cc94, %v3_cc70
  store i32 %v5_cc94, i32* %sb.global-to-local, align 4
  store i32 %v1_cc58, i32* %r0.global-to-local, align 4
  %v1_cca0 = add i32 %v2_cb74, 1
  store i32 %v1_cca0, i32* @r7, align 4
  %v3_cca4 = ashr i32 %v1_cc30, 31
  store i32 %v3_cca4, i32* @lr, align 4
  store i32 %v1_cc6c, i32* %r1.global-to-local, align 4
  store i32 %v1_cc60, i32* %r2.global-to-local, align 4
  %v3_ccb075 = udiv i32 %v1_cc5c, 256
  store i32 %v3_ccb075, i32* %r3.global-to-local, align 4
  store i32 %v1_cc44, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext13 = mul i32 %tmp141, 16777216
  %v4_cd40 = sdiv i32 %sext13, 16777216
  %sext14 = mul i32 %v7_c968, 16777216
  %v4_cd44 = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v1_cc2c, 256
  %v4_cd74 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_cbdc, 16777216
  %v4_cd78 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_cbd8, 16777216
  %v4_cd9c = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_cbd0, 16777216
  %v4_cda8 = sdiv i32 %sext18, 16777216
  %v1_cd24 = trunc i32 %v4_cc88 to i8
  %extract.t = trunc i32 %v3_cca4 to i8
  br label %dec_label_pc_ccd4

dec_label_pc_ccd4:                                ; preds = %dec_label_pc_ce3c, %dec_label_pc_cc1c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_ccdc = call i32 @function_12178(i32 600, i32 1)
  store i32 %v2_ccdc, i32* %r0.global-to-local, align 4
  store i32 %v2_c92c, i32* %lr.global-to-local, align 4
  %v3_cce4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cce4, i32* %r3.global-to-local, align 4
  %v2_cce8 = load i32, i32* @r4, align 4
  %v5_cce8 = mul i32 %v2_cce8, 4
  %v6_cce8 = add i32 %v5_cce8, %v2_c92c
  %v7_cce8 = inttoptr i32 %v6_cce8 to i32*
  store i32 %v2_ccdc, i32* %v7_cce8, align 4
  %v0_ccec = load i32, i32* %lr.global-to-local, align 4
  %v1_ccec = load i32, i32* %r3.global-to-local, align 4
  %v4_ccec = mul i32 %v1_ccec, 4
  %v5_ccec = add i32 %v4_ccec, %v0_ccec
  %v6_ccec = inttoptr i32 %v5_ccec to i32*
  %v7_ccec = load i32, i32* %v6_ccec, align 4
  store i32 %v7_ccec, i32* %r1.global-to-local, align 4
  %v1_ccf0 = inttoptr i32 %v7_ccec to i8*
  %v2_ccf0 = load i8, i8* %v1_ccf0, align 1
  %tmp154 = urem i8 %v2_ccf0, 16
  %v1_ccf4 = zext i8 %tmp154 to i32
  %v1_ccf8 = or i32 %v1_ccf4, 64
  store i32 %v1_ccf8, i32* %r2.global-to-local, align 4
  %v1_ccfc = trunc i32 %v1_ccf8 to i8
  store i8 %v1_ccfc, i8* %v1_ccf0, align 1
  %v0_cd00 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd00 = inttoptr i32 %v0_cd00 to i8*
  %v2_cd00 = load i8, i8* %v1_cd00, align 1
  %v1_cd04 = and i8 %v2_cd00, -16
  %v1_cd08 = or i8 %v1_cd04, 5
  store i32 %v1_c9ac, i32* %r0.global-to-local, align 4
  store i8 %v1_cd08, i8* %v1_cd00, align 1
  store i32 %v6_c944, i32* %r2.global-to-local, align 4
  %v2_cd18 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd18 = add i32 %v2_cd18, 1
  %v4_cd18 = inttoptr i32 %v3_cd18 to i8*
  store i8 %v5_c964, i8* %v4_cd18, align 1
  store i32 %v4_cc88, i32* %r3.global-to-local, align 4
  %v0_cd20 = load i32, i32* %r0.global-to-local, align 4
  %v2_cd20 = icmp eq i32 %v0_cd20, 0
  store i1 %v2_cd20, i1* %cpsr_z.global-to-local, align 1
  %v2_cd24 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd24 = add i32 %v2_cd24, 2
  %v4_cd24 = inttoptr i32 %v3_cd24 to i8*
  store i8 %v1_cd24, i8* %v4_cd24, align 1
  store i32 %v3_cca4, i32* %r4.global-to-local, align 4
  store i32 %v5_c9a0, i32* %r0.global-to-local, align 4
  %v0_cd30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd30, label %.thread20, label %bb143

bb143:                                            ; preds = %dec_label_pc_ccd4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_cd34 = load i32, i32* %r1.global-to-local, align 4
  %v4_cd34 = add i32 %v3_cd34, 6
  %v5_cd34 = inttoptr i32 %v4_cd34 to i8*
  store i8 64, i8* %v5_cd34, align 1
  %v0_cd3c.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t76 = trunc i32 %v0_cd3c.pre to i8
  br label %.thread20

.thread20:                                        ; preds = %dec_label_pc_ccd4, %bb143
  %v0_cd3c.off0 = phi i8 [ %extract.t, %dec_label_pc_ccd4 ], [ %extract.t76, %bb143 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_cd3c = load i32, i32* %r1.global-to-local, align 4
  %v3_cd3c = add i32 %v2_cd3c, 3
  %v4_cd3c = inttoptr i32 %v3_cd3c to i8*
  store i8 %v0_cd3c.off0, i8* %v4_cd3c, align 1
  store i32 %v4_cd40, i32* %ip.global-to-local, align 4
  store i32 %v4_cd44, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c5dc.51 to i32), i32* %r4.global-to-local, align 4
  %v0_cd4c = load i32, i32* %r0.global-to-local, align 4
  %v1_cd4c = trunc i32 %v0_cd4c to i8
  %v2_cd4c = load i32, i32* %r1.global-to-local, align 4
  %v3_cd4c = add i32 %v2_cd4c, 8
  %v4_cd4c = inttoptr i32 %v3_cd4c to i8*
  store i8 %v1_cd4c, i8* %v4_cd4c, align 1
  %v0_cd50 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd50 = trunc i32 %v0_cd50 to i8
  %v2_cd50 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd50 = add i32 %v2_cd50, 9
  %v4_cd50 = inttoptr i32 %v3_cd50 to i8*
  store i8 %v1_cd50, i8* %v4_cd50, align 1
  %v0_cd54 = load i32, i32* %lr.global-to-local, align 4
  %v1_cd54 = trunc i32 %v0_cd54 to i8
  %v2_cd54 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd54 = add i32 %v2_cd54, 5
  %v4_cd54 = inttoptr i32 %v3_cd54 to i8*
  store i8 %v1_cd54, i8* %v4_cd54, align 1
  %v0_cd58 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd58, label %.thread21, label %bb144

.thread21:                                        ; preds = %.thread20
  %v2_cd5c22 = load i32, i32* @global_var_1c5dc.51, align 4
  store i32 %v2_cd5c22, i32* %r3.global-to-local, align 4
  store i32 %v4_cc20, i32* %lr.global-to-local, align 4
  br label %bb145

bb144:                                            ; preds = %.thread20
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_cd5c = load i32, i32* @global_var_1c5dc.51, align 4
  store i32 %v2_cd5c, i32* %r3.global-to-local, align 4
  store i32 %v4_cc20, i32* %lr.global-to-local, align 4
  %v3_cd64 = load i32, i32* %r1.global-to-local, align 4
  %v4_cd64 = add i32 %v3_cd64, 7
  %v5_cd64 = inttoptr i32 %v4_cd64 to i8*
  store i8 0, i8* %v5_cd64, align 1
  %v0_cd6c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_cd70.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb145

bb145:                                            ; preds = %.thread21, %bb144
  %v0_cd70 = phi i32 [ %v2_cd5c22, %.thread21 ], [ %v0_cd70.pre, %bb144 ]
  %v0_cd6c = phi i32 [ %v4_cc20, %.thread21 ], [ %v0_cd6c.pre, %bb144 ]
  %v0_cd68 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd68 = add i32 %v0_cd6c, 41
  %v2_cd6c = add i32 %v1_cd68, %v0_cd68
  store i32 %v2_cd6c, i32* %r4.global-to-local, align 4
  %v2_cd70 = add i32 %v0_cd68, 12
  %v3_cd70 = inttoptr i32 %v2_cd70 to i32*
  store i32 %v0_cd70, i32* %v3_cd70, align 4
  store i32 %v4_cd74, i32* %r2.global-to-local, align 4
  store i32 %v4_cd78, i32* %r3.global-to-local, align 4
  %v0_cd7c = load i32, i32* %r1.global-to-local, align 4
  %v1_cd7c = add i32 %v0_cd7c, 20
  store i32 %v1_cd7c, i32* %r0.global-to-local, align 4
  %v0_cd80 = load i32, i32* %ip.global-to-local, align 4
  %v1_cd80 = trunc i32 %v0_cd80 to i8
  %v3_cd80 = add i32 %v0_cd7c, 4
  %v4_cd80 = inttoptr i32 %v3_cd80 to i8*
  store i8 %v1_cd80, i8* %v4_cd80, align 1
  %v0_cd84 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd84 = trunc i32 %v0_cd84 to i8
  %v2_cd84 = load i32, i32* %r0.global-to-local, align 4
  %v3_cd84 = add i32 %v2_cd84, 5
  %v4_cd84 = inttoptr i32 %v3_cd84 to i8*
  store i8 %v1_cd84, i8* %v4_cd84, align 1
  %v0_cd88 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd88 = trunc i32 %v0_cd88 to i8
  %v2_cd88 = load i32, i32* %r0.global-to-local, align 4
  %v3_cd88 = add i32 %v2_cd88, 3
  %v4_cd88 = inttoptr i32 %v3_cd88 to i8*
  store i8 %v1_cd88, i8* %v4_cd88, align 1
  %v0_cd8c = load i32, i32* %sb.global-to-local, align 4
  %v1_cd8c = trunc i32 %v0_cd8c to i8
  %v2_cd8c = load i32, i32* %r0.global-to-local, align 4
  %v3_cd8c = add i32 %v2_cd8c, 2
  %v4_cd8c = inttoptr i32 %v3_cd8c to i8*
  store i8 %v1_cd8c, i8* %v4_cd8c, align 1
  %v0_cd90 = load i32, i32* %sl.global-to-local, align 4
  %v1_cd90 = trunc i32 %v0_cd90 to i8
  %v2_cd90 = load i32, i32* %r0.global-to-local, align 4
  %v3_cd90 = add i32 %v2_cd90, 4
  %v4_cd90 = inttoptr i32 %v3_cd90 to i8*
  store i8 %v1_cd90, i8* %v4_cd90, align 1
  %v0_cd94 = load i32, i32* @r5, align 4
  %v1_cd94 = trunc i32 %v0_cd94 to i8
  %v2_cd94 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd94 = add i32 %v2_cd94, 20
  %v4_cd94 = inttoptr i32 %v3_cd94 to i8*
  store i8 %v1_cd94, i8* %v4_cd94, align 1
  store i32 %v4_cd9c, i32* %r2.global-to-local, align 4
  %v1_cda0 = load i32, i32* %r1.global-to-local, align 4
  %v2_cda0 = add i32 %v1_cda0, 16
  %v3_cda0 = inttoptr i32 %v2_cda0 to i32*
  store i32 %stack_var_-2176.0, i32* %v3_cda0, align 4
  %v0_cda4 = load i32, i32* %r2.global-to-local, align 4
  %v1_cda4 = trunc i32 %v0_cda4 to i8
  %v2_cda4 = load i32, i32* %r0.global-to-local, align 4
  %v3_cda4 = add i32 %v2_cda4, 1
  %v4_cda4 = inttoptr i32 %v3_cda4 to i8*
  store i8 %v1_cda4, i8* %v4_cda4, align 1
  store i32 %v4_cda8, i32* %lr.global-to-local, align 4
  store i32 %v4_cc20, i32* %r0.global-to-local, align 4
  %v0_cdb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_cdb0 = add i32 %v0_cdb0, 28
  store i32 %v1_cdb0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_cdbc = load i32, i32* %r8.global-to-local, align 4
  %v1_cdbc = trunc i32 %v0_cdbc to i8
  %v4_cdbc = inttoptr i32 %v1_cdb0 to i8*
  store i8 %v1_cdbc, i8* %v4_cdbc, align 1
  %v0_cdc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_cdc0 = trunc i32 %v0_cdc0 to i8
  %v2_cdc0 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdc0 = add i32 %v2_cdc0, 5
  %v4_cdc0 = inttoptr i32 %v3_cdc0 to i8*
  store i8 %v1_cdc0, i8* %v4_cdc0, align 1
  %v0_cdc4 = load i32, i32* %lr.global-to-local, align 4
  %v1_cdc4 = trunc i32 %v0_cdc4 to i8
  %v2_cdc4 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdc4 = add i32 %v2_cdc4, 1
  %v4_cdc4 = inttoptr i32 %v3_cdc4 to i8*
  store i8 %v1_cdc4, i8* %v4_cdc4, align 1
  %v0_cdc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cdc8 = trunc i32 %v0_cdc8 to i8
  %v2_cdc8 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdc8 = add i32 %v2_cdc8, 2
  %v4_cdc8 = inttoptr i32 %v3_cdc8 to i8*
  store i8 %v1_cdc8, i8* %v4_cdc8, align 1
  %v0_cdcc = load i32, i32* @r6, align 4
  %v1_cdcc = trunc i32 %v0_cdcc to i8
  %v2_cdcc = load i32, i32* %ip.global-to-local, align 4
  %v3_cdcc = add i32 %v2_cdcc, 3
  %v4_cdcc = inttoptr i32 %v3_cdcc to i8*
  store i8 %v1_cdcc, i8* %v4_cdcc, align 1
  %v0_cdd0 = load i32, i32* @r6, align 4
  %v1_cdd0 = trunc i32 %v0_cdd0 to i8
  %v2_cdd0 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdd0 = add i32 %v2_cdd0, 4
  %v4_cdd0 = inttoptr i32 %v3_cdd0 to i8*
  store i8 %v1_cdd0, i8* %v4_cdd0, align 1
  %v0_cdd4 = load i32, i32* %r0.global-to-local, align 4
  %v1_cdd4 = trunc i32 %v0_cdd4 to i8
  %v2_cdd4 = load i32, i32* %r1.global-to-local, align 4
  %v3_cdd4 = add i32 %v2_cdd4, 40
  %v4_cdd4 = inttoptr i32 %v3_cdd4 to i8*
  store i8 %v1_cdd4, i8* %v4_cdd4, align 1
  store i32 %v5_ca28, i32* %r1.global-to-local, align 4
  %v0_cddc = load i32, i32* @r7, align 4
  store i32 %v0_cddc, i32* %r2.global-to-local, align 4
  %v0_cde0 = load i32, i32* %r4.global-to-local, align 4
  %v1_cde0 = add i32 %v0_cde0, 1
  store i32 %v1_cde0, i32* %r0.global-to-local, align 4
  %v3_cde4 = call i32 @function_10cec(i32 %v1_cde0, i32 %v5_ca28, i32 %v0_cddc)
  store i32 %v3_cde4, i32* %r0.global-to-local, align 4
  store i32 %v2_cb74, i32* %r1.global-to-local, align 4
  %v1_cdec = load i32, i32* @r6, align 4
  %v9_cdec = icmp eq i32 %v2_cb74, %v1_cdec
  store i1 %v9_cdec, i1* %cpsr_z.global-to-local, align 1
  %v7_cdf0 = icmp sgt i32 %v2_cb74, %v1_cdec
  store i32 %v1_cdec, i32* %lr.global-to-local, align 4
  %v0_ce00 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ce00, i32* %r2.global-to-local, align 4
  %extract.t78 = trunc i32 %v1_cdec to i8
  br i1 %v7_cdf0, label %dec_label_pc_cdfc, label %dec_label_pc_ce3c

dec_label_pc_cdfc:                                ; preds = %bb145
  store i32 %v1_cdec, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ce08

dec_label_pc_ce08:                                ; preds = %bb148, %dec_label_pc_cdfc
  %v0_ce2485151 = phi i32 [ %v0_ce2485152, %bb148 ], [ %v1_cdec, %dec_label_pc_cdfc ]
  %v1_ce1832 = phi i32 [ %v1_ce2891, %bb148 ], [ %v1_cdec, %dec_label_pc_cdfc ]
  %v1_ce14.off0 = phi i8 [ %v1_ce1456.off0, %bb148 ], [ %extract.t78, %dec_label_pc_cdfc ]
  %v0_ce1831 = phi i32 [ %v0_ce18315488, %bb148 ], [ %v0_ce00, %dec_label_pc_cdfc ]
  store i32 %v5_ca28, i32* %ip.global-to-local, align 4
  %v2_ce0c = add i32 %v1_ce1832, %v5_ca28
  %v3_ce0c = inttoptr i32 %v2_ce0c to i8*
  %v4_ce0c = load i8, i8* %v3_ce0c, align 1
  %v6_ce0c = zext i8 %v4_ce0c to i32
  store i32 %v6_ce0c, i32* %r3.global-to-local, align 4
  %v7_ce10 = icmp eq i8 %v4_ce0c, 46
  store i1 %v7_ce10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ce10, label %bb146, label %.thread30

.thread30:                                        ; preds = %dec_label_pc_ce08
  %v2_ce1833 = add i32 %v1_ce1832, %v0_ce1831
  store i32 %v2_ce1833, i32* %r0.global-to-local, align 4
  br label %.thread34

bb146:                                            ; preds = %dec_label_pc_ce08
  %v3_ce14 = load i32, i32* %r2.global-to-local, align 4
  %v4_ce14 = inttoptr i32 %v3_ce14 to i8*
  store i8 %v1_ce14.off0, i8* %v4_ce14, align 1
  %v0_ce1c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_ce18 = load i32, i32* %r4.global-to-local, align 4
  %v1_ce18 = load i32, i32* %r1.global-to-local, align 4
  %v2_ce18 = add i32 %v1_ce18, %v0_ce18
  store i32 %v2_ce18, i32* %r0.global-to-local, align 4
  br i1 %v0_ce1c.pr, label %bb147, label %bb146..thread34_crit_edge

bb146..thread34_crit_edge:                        ; preds = %bb146
  %v0_ce2485.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread34

bb147:                                            ; preds = %bb146
  %v2_ce1c = add i32 %v2_ce18, 1
  store i32 %v2_ce1c, i32* %r2.global-to-local, align 4
  store i32 %v2_cb74, i32* %r0.global-to-local, align 4
  %v0_ce24 = load i32, i32* %lr.global-to-local, align 4
  %v1_ce24 = add i32 %v0_ce24, 1
  store i32 %v1_ce24, i32* %ip.global-to-local, align 4
  %v1_ce28 = add i32 %v1_ce18, 1
  store i32 %v1_ce28, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb148

.thread34:                                        ; preds = %bb146..thread34_crit_edge, %.thread30
  %v0_ce2485 = phi i32 [ %v0_ce2485.pre, %bb146..thread34_crit_edge ], [ %v0_ce2485151, %.thread30 ]
  %v0_ce28.ph = phi i32 [ %v1_ce18, %bb146..thread34_crit_edge ], [ %v1_ce1832, %.thread30 ]
  %v0_ce183154.ph = phi i32 [ %v0_ce18, %bb146..thread34_crit_edge ], [ %v0_ce1831, %.thread30 ]
  store i32 %v2_cb74, i32* %r0.global-to-local, align 4
  %v1_ce2486 = add i32 %v0_ce2485, 1
  store i32 %v1_ce2486, i32* %ip.global-to-local, align 4
  %v1_ce2887 = add i32 %v0_ce28.ph, 1
  store i32 %v1_ce2887, i32* %r1.global-to-local, align 4
  %v2_ce30 = urem i32 %v1_ce2486, 256
  store i32 %v2_ce30, i32* %lr.global-to-local, align 4
  %extract.t81 = trunc i32 %v1_ce2486 to i8
  br label %bb148

bb148:                                            ; preds = %bb147, %.thread34
  %v0_ce2485152 = phi i32 [ 0, %bb147 ], [ %v2_ce30, %.thread34 ]
  %v1_ce2891 = phi i32 [ %v1_ce28, %bb147 ], [ %v1_ce2887, %.thread34 ]
  %v0_ce18315488 = phi i32 [ %v0_ce18, %bb147 ], [ %v0_ce183154.ph, %.thread34 ]
  %v1_ce1456.off0 = phi i8 [ 0, %bb147 ], [ %extract.t81, %.thread34 ]
  %v9_ce34 = icmp eq i32 %v2_cb74, %v1_ce2891
  store i1 %v9_ce34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ce34, label %dec_label_pc_ce3c.loopexit, label %dec_label_pc_ce08

dec_label_pc_ce3c.loopexit:                       ; preds = %bb148
  %v2_ce3c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ce3c

dec_label_pc_ce3c:                                ; preds = %dec_label_pc_ce3c.loopexit, %bb145
  %v2_ce3c = phi i32 [ %v2_ce3c.pre, %dec_label_pc_ce3c.loopexit ], [ %v0_ce00, %bb145 ]
  %v0_ce3c.off0 = phi i8 [ %v1_ce1456.off0, %dec_label_pc_ce3c.loopexit ], [ %extract.t78, %bb145 ]
  %v3_ce3c = inttoptr i32 %v2_ce3c to i8*
  store i8 %v0_ce3c.off0, i8* %v3_ce3c, align 1
  %v3_ce40 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_cb74, i32* %r1.global-to-local, align 4
  %v0_ce48 = load i32, i32* %r4.global-to-local, align 4
  %v2_ce48 = add i32 %v0_ce48, %v2_cb74
  store i32 %v2_ce48, i32* %r3.global-to-local, align 4
  %v1_ce4c = add i32 %v3_ce40, 1
  store i32 %v1_ce4c, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v9_ce5c = icmp eq i32 %v1_c914, %v1_ce4c
  store i1 %v9_ce5c, i1* %cpsr_z.global-to-local, align 1
  %v1_ce60 = add i32 %v2_ce48, 2
  store i32 %v1_ce60, i32* %r2.global-to-local, align 4
  %v4_ce64 = inttoptr i32 %v1_ce60 to i8*
  store i8 0, i8* %v4_ce64, align 1
  %v0_ce68 = load i32, i32* @lr, align 4
  %v1_ce68 = trunc i32 %v0_ce68 to i8
  %v2_ce68 = load i32, i32* %r2.global-to-local, align 4
  %v3_ce68 = add i32 %v2_ce68, 3
  %v4_ce68 = inttoptr i32 %v3_ce68 to i8*
  store i8 %v1_ce68, i8* %v4_ce68, align 1
  %v0_ce6c = load i32, i32* @lr, align 4
  %v1_ce6c = trunc i32 %v0_ce6c to i8
  %v2_ce6c = load i32, i32* %r2.global-to-local, align 4
  %v3_ce6c = add i32 %v2_ce6c, 1
  %v4_ce6c = inttoptr i32 %v3_ce6c to i8*
  store i8 %v1_ce6c, i8* %v4_ce6c, align 1
  %v0_ce70 = load i32, i32* %ip.global-to-local, align 4
  %v1_ce70 = trunc i32 %v0_ce70 to i8
  %v2_ce70 = load i32, i32* %r2.global-to-local, align 4
  %v3_ce70 = add i32 %v2_ce70, 2
  %v4_ce70 = inttoptr i32 %v3_ce70 to i8*
  store i8 %v1_ce70, i8* %v4_ce70, align 1
  %v0_ce74 = load i32, i32* @r4, align 4
  store i32 %v0_ce74, i32* %stack_var_-40, align 4
  %v8_ce78 = icmp sgt i32 %v1_c914, %v1_ce4c
  br i1 %v8_ce78, label %dec_label_pc_ccd4, label %dec_label_pc_ce7c

dec_label_pc_ce7c:                                ; preds = %dec_label_pc_ce3c, %dec_label_pc_d048
  %v4_ceec.pre-phi = phi i32 [ %v4_d04c, %dec_label_pc_d048 ], [ %v4_cc20, %dec_label_pc_ce3c ]
  store i32 %v1_c914, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_cbf8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ce88

dec_label_pc_ce88:                                ; preds = %dec_label_pc_ce88, %dec_label_pc_cfac, %dec_label_pc_ce7c
  br i1 %v2_cbf8, label %dec_label_pc_ce88, label %dec_label_pc_ce8c

dec_label_pc_ce8c:                                ; preds = %dec_label_pc_ce88
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_ce9c = load i32, i32* @fp, align 4
  %v1_ce9c = add i32 %v0_ce9c, 27
  store i32 %v1_ce9c, i32* @sb, align 4
  %v1_cea0 = add i32 %v0_ce9c, 47
  store i32 %v1_cea0, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_cea8

dec_label_pc_cea8:                                ; preds = %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge, %dec_label_pc_ce8c
  %v1_cec8 = phi i32 [ %v1_ceb4.pre, %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge ], [ 65535, %dec_label_pc_ce8c ]
  %v1_ceb0 = phi i32 [ %v1_cf98, %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge ], [ 0, %dec_label_pc_ce8c ]
  store i32 %v2_c92c, i32* %r3.global-to-local, align 4
  store i32 %v3_cbe8, i32* %r8.global-to-local, align 4
  %v4_ceb0 = mul i32 %v1_ceb0, 4
  %v5_ceb0 = add i32 %v4_ceb0, %v2_c92c
  %v6_ceb0 = inttoptr i32 %v5_ceb0 to i32*
  %v7_ceb0 = load i32, i32* %v6_ceb0, align 4
  store i32 %v7_ceb0, i32* @r4, align 4
  %v9_ceb4 = icmp eq i32 %v3_cbe8, %v1_cec8
  store i1 %v9_ceb4, i1* %cpsr_z.global-to-local, align 1
  %v1_ceb8 = add i32 %v7_ceb0, 20
  store i32 %v1_ceb8, i32* @r5, align 4
  %v1_cebc = add i32 %v7_ceb0, 28
  store i32 %v1_cebc, i32* @r8, align 4
  br i1 %v9_ceb4, label %dec_label_pc_cfbc, label %dec_label_pc_cec4

dec_label_pc_cec4:                                ; preds = %dec_label_pc_cea8
  store i32 %v3_cbec, i32* %ip.global-to-local, align 4
  %v9_cec8 = icmp eq i32 %v3_cbec, %v1_cec8
  store i1 %v9_cec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cec8, label %dec_label_pc_cfd8, label %dec_label_pc_ced0

dec_label_pc_ced0:                                ; preds = %dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge, %dec_label_pc_cec4
  %v1_ced4 = phi i32 [ %v1_ced4.pre, %dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge ], [ %v1_cec8, %dec_label_pc_cec4 ]
  store i32 %v3_cbf0, i32* %lr.global-to-local, align 4
  %v9_ced4 = icmp eq i32 %v3_cbf0, %v1_ced4
  store i1 %v9_ced4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ced4, label %dec_label_pc_cff4, label %dec_label_pc_cedc

dec_label_pc_cedc:                                ; preds = %dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge, %dec_label_pc_ced0
  %v1_cee0 = phi i32 [ %v1_cee0.pre, %dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge ], [ %v1_ced4, %dec_label_pc_ced0 ]
  store i32 %v3_cbf4, i32* %r0.global-to-local, align 4
  %v9_cee0 = icmp eq i32 %v3_cbf4, %v1_cee0
  store i1 %v9_cee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cee0, label %dec_label_pc_d010, label %dec_label_pc_cee8

dec_label_pc_cee8:                                ; preds = %dec_label_pc_cff4, %dec_label_pc_cedc, %dec_label_pc_d010
  %v0_cee8 = load i32, i32* @r4, align 4
  %v1_cee8 = add i32 %v0_cee8, 41
  store i32 %v1_cee8, i32* %r0.global-to-local, align 4
  store i32 %v4_ceec.pre-phi, i32* %r1.global-to-local, align 4
  %v2_cef0 = call i32 @function_ea0c(i32 %v1_cee8, i32 %v4_ceec.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cef8 = load i32, i32* @r7, align 4
  %v1_cef8 = trunc i32 %v0_cef8 to i8
  %v2_cef8 = load i32, i32* @r4, align 4
  %v3_cef8 = add i32 %v2_cef8, 10
  %v4_cef8 = inttoptr i32 %v3_cef8 to i8*
  store i8 %v1_cef8, i8* %v4_cef8, align 1
  %v0_cefc = load i32, i32* @r7, align 4
  %v1_cefc = trunc i32 %v0_cefc to i8
  %v2_cefc = load i32, i32* @r4, align 4
  %v3_cefc = add i32 %v2_cefc, 11
  %v4_cefc = inttoptr i32 %v3_cefc to i8*
  store i8 %v1_cefc, i8* %v4_cefc, align 1
  %v0_cf00 = load i32, i32* @r4, align 4
  store i32 %v0_cf00, i32* @r0, align 4
  %v2_cf04 = call i32 @function_d0b8(i32 %v0_cf00, i32 20)
  %v3_cf04 = trunc i32 %v2_cf04 to i8
  store i32 %v2_cf04, i32* %r0.global-to-local, align 4
  %v4_cf08 = sdiv i32 %v2_cf04, 256
  store i32 %v4_cf08, i32* %r3.global-to-local, align 4
  %v1_cf0c = trunc i32 %v4_cf08 to i8
  %v2_cf0c = load i32, i32* @r4, align 4
  %v3_cf0c = add i32 %v2_cf0c, 11
  %v4_cf0c = inttoptr i32 %v3_cf0c to i8*
  store i8 %v1_cf0c, i8* %v4_cf0c, align 1
  %v3_cf10 = load i32, i32* @r4, align 4
  %v4_cf10 = add i32 %v3_cf10, 10
  %v5_cf10 = inttoptr i32 %v4_cf10 to i8*
  store i8 %v3_cf04, i8* %v5_cf10, align 1
  %v0_cf14 = load i32, i32* @r7, align 4
  %v1_cf14 = trunc i32 %v0_cf14 to i8
  %v2_cf14 = load i32, i32* @r5, align 4
  %v3_cf14 = add i32 %v2_cf14, 6
  %v4_cf14 = inttoptr i32 %v3_cf14 to i8*
  store i8 %v1_cf14, i8* %v4_cf14, align 1
  %v0_cf18 = load i32, i32* @r7, align 4
  %v1_cf18 = trunc i32 %v0_cf18 to i8
  %v2_cf18 = load i32, i32* @r5, align 4
  %v3_cf18 = add i32 %v2_cf18, 7
  %v4_cf18 = inttoptr i32 %v3_cf18 to i8*
  store i8 %v1_cf18, i8* %v4_cf18, align 1
  %v0_cf1c = load i32, i32* @r4, align 4
  %v1_cf1c = add i32 %v0_cf1c, 24
  %v2_cf1c = inttoptr i32 %v1_cf1c to i8*
  %v3_cf1c = load i8, i8* %v2_cf1c, align 1
  %v4_cf1c = zext i8 %v3_cf1c to i32
  store i32 %v4_cf1c, i32* %r3.global-to-local, align 4
  %v1_cf20 = add i32 %v0_cf1c, 25
  %v2_cf20 = inttoptr i32 %v1_cf20 to i8*
  %v3_cf20 = load i8, i8* %v2_cf20, align 1
  %v4_cf20 = zext i8 %v3_cf20 to i32
  %v0_cf24 = load i32, i32* @r5, align 4
  store i32 %v0_cf24, i32* @r1, align 4
  %v4_cf28 = mul nuw nsw i32 %v4_cf20, 256
  %v5_cf28 = or i32 %v4_cf28, %v4_cf1c
  store i32 %v5_cf28, i32* %r2.global-to-local, align 4
  store i32 %v0_cf1c, i32* %r0.global-to-local, align 4
  %v0_cf30 = load i32, i32* @sb, align 4
  store i32 %v0_cf30, i32* %r3.global-to-local, align 4
  %v4_cf34 = call i32 @function_d114(i32 %v0_cf1c, i32 %v0_cf24, i32 %v5_cf28, i32 %v0_cf30)
  %v5_cf34 = trunc i32 %v4_cf34 to i8
  store i32 %v4_cf34, i32* %r0.global-to-local, align 4
  %v3_cf38 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_cf48 = mul i32 %v3_cf38, 24
  %v2_cf4c = add i32 %v5_cf48, %arg2
  store i32 %v2_cf4c, i32* %lr.global-to-local, align 4
  %v4_cf50 = sdiv i32 %v4_cf34, 256
  store i32 %v4_cf50, i32* %r3.global-to-local, align 4
  %v3_cf54 = load i32, i32* @r5, align 4
  %v4_cf54 = add i32 %v3_cf54, 6
  %v5_cf54 = inttoptr i32 %v4_cf54 to i8*
  store i8 %v5_cf34, i8* %v5_cf54, align 1
  %v0_cf58 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf58 = trunc i32 %v0_cf58 to i8
  %v2_cf58 = load i32, i32* @r5, align 4
  %v3_cf58 = add i32 %v2_cf58, 7
  %v4_cf58 = inttoptr i32 %v3_cf58 to i8*
  store i8 %v1_cf58, i8* %v4_cf58, align 1
  %v0_cf5c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf5c = load i32, i32* %lr.global-to-local, align 4
  %v2_cf5c = add i32 %v1_cf5c, 4
  %v3_cf5c = inttoptr i32 %v2_cf5c to i32*
  store i32 %v0_cf5c, i32* %v3_cf5c, align 4
  %v0_cf60 = load i32, i32* @r4, align 4
  %v1_cf60 = add i32 %v0_cf60, 20
  %v2_cf60 = inttoptr i32 %v1_cf60 to i32*
  %v3_cf60 = load i32, i32* %v2_cf60, align 4
  %v3_cf64 = udiv i32 %v3_cf60, 65536
  store i32 %v3_cf64, i32* %r3.global-to-local, align 4
  %v3_cf6812 = udiv i32 %v3_cf60, 16777216
  %v1_cf6c = trunc i32 %v3_cf6812 to i8
  %v2_cf6c = load i32, i32* %lr.global-to-local, align 4
  %v3_cf6c = add i32 %v2_cf6c, 3
  %v4_cf6c = inttoptr i32 %v3_cf6c to i8*
  store i8 %v1_cf6c, i8* %v4_cf6c, align 1
  %v0_cf70 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf70 = trunc i32 %v0_cf70 to i8
  %v2_cf70 = load i32, i32* %lr.global-to-local, align 4
  %v3_cf70 = add i32 %v2_cf70, 2
  %v4_cf70 = inttoptr i32 %v3_cf70 to i8*
  store i8 %v1_cf70, i8* %v4_cf70, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_cf7c = load i32, i32* @r4, align 4
  store i32 %v0_cf7c, i32* %r1.global-to-local, align 4
  store i32 %v3_cb88, i32* %r0.global-to-local, align 4
  %v0_cf84 = load i32, i32* @sl, align 4
  store i32 %v0_cf84, i32* %r2.global-to-local, align 4
  %v0_cf88 = load i32, i32* %lr.global-to-local, align 4
  %v6_cf90 = inttoptr i32 %v0_cf7c to i32*
  %v7_cf90 = call i32 @function_11e28(i32 %v3_cb88, i32* %v6_cf90, i32 %v0_cf84, i32 16384, i32 %v0_cf88, i32 16)
  %v3_cf94 = load i32, i32* %stack_var_-40, align 4
  %v1_cf98 = add i32 %v3_cf94, 1
  store i32 %v1_cf98, i32* %r0.global-to-local, align 4
  store i32 %v1_c914, i32* %r3.global-to-local, align 4
  %v9_cfa0 = icmp eq i32 %v1_c914, %v1_cf98
  store i1 %v9_cfa0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cf98, i32* %stack_var_-40, align 4
  %v8_cfa8 = icmp sgt i32 %v1_c914, %v1_cf98
  br i1 %v8_cfa8, label %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge, label %dec_label_pc_cfac

dec_label_pc_cee8.dec_label_pc_cea8_crit_edge:    ; preds = %dec_label_pc_cee8
  %v1_ceb4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_cea8

dec_label_pc_cfac:                                ; preds = %dec_label_pc_cee8
  store i32 %v1_c914, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ce88

dec_label_pc_cfbc:                                ; preds = %dec_label_pc_cea8
  %v0_cfbc = call i32 @function_e958()
  %v1_cfbc = trunc i32 %v0_cfbc to i8
  store i32 %v0_cfbc, i32* %r0.global-to-local, align 4
  store i32 %v3_cbec, i32* %ip.global-to-local, align 4
  %v4_cfc4 = sdiv i32 %v0_cfbc, 256
  store i32 %v4_cfc4, i32* %r3.global-to-local, align 4
  %v1_cfc8 = load i32, i32* @r6, align 4
  %v9_cfc8 = icmp eq i32 %v3_cbec, %v1_cfc8
  store i1 %v9_cfc8, i1* %cpsr_z.global-to-local, align 1
  %v1_cfcc = trunc i32 %v4_cfc4 to i8
  %v2_cfcc = load i32, i32* @r4, align 4
  %v3_cfcc = add i32 %v2_cfcc, 5
  %v4_cfcc = inttoptr i32 %v3_cfcc to i8*
  store i8 %v1_cfcc, i8* %v4_cfcc, align 1
  %v3_cfd0 = load i32, i32* @r4, align 4
  %v4_cfd0 = add i32 %v3_cfd0, 4
  %v5_cfd0 = inttoptr i32 %v4_cfd0 to i8*
  store i8 %v1_cfbc, i8* %v5_cfd0, align 1
  %v0_cfd4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cfd4, label %dec_label_pc_cfd8, label %dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge

dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge:    ; preds = %dec_label_pc_cfbc
  %v1_ced4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ced0

dec_label_pc_cfd8:                                ; preds = %dec_label_pc_cfbc, %dec_label_pc_cec4
  %v0_cfd8 = call i32 @function_e958()
  %v1_cfd8 = trunc i32 %v0_cfd8 to i8
  store i32 %v0_cfd8, i32* %r0.global-to-local, align 4
  store i32 %v3_cbf0, i32* %lr.global-to-local, align 4
  %v4_cfe0 = sdiv i32 %v0_cfd8, 256
  store i32 %v4_cfe0, i32* %r3.global-to-local, align 4
  %v1_cfe4 = load i32, i32* @r6, align 4
  %v9_cfe4 = icmp eq i32 %v3_cbf0, %v1_cfe4
  store i1 %v9_cfe4, i1* %cpsr_z.global-to-local, align 1
  %v3_cfe8 = load i32, i32* @r4, align 4
  %v4_cfe8 = add i32 %v3_cfe8, 20
  %v5_cfe8 = inttoptr i32 %v4_cfe8 to i8*
  store i8 %v1_cfd8, i8* %v5_cfe8, align 1
  %v0_cfec = load i32, i32* %r3.global-to-local, align 4
  %v1_cfec = trunc i32 %v0_cfec to i8
  %v2_cfec = load i32, i32* @r5, align 4
  %v3_cfec = add i32 %v2_cfec, 1
  %v4_cfec = inttoptr i32 %v3_cfec to i8*
  store i8 %v1_cfec, i8* %v4_cfec, align 1
  %v0_cff0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cff0, label %dec_label_pc_cff4, label %dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge

dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge:    ; preds = %dec_label_pc_cfd8
  %v1_cee0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_cedc

dec_label_pc_cff4:                                ; preds = %dec_label_pc_cfd8, %dec_label_pc_ced0
  %v0_cff4 = call i32 @function_e958()
  %v1_cff4 = trunc i32 %v0_cff4 to i8
  %v4_cff8 = sdiv i32 %v0_cff4, 256
  store i32 %v4_cff8, i32* %r3.global-to-local, align 4
  %v3_cffc = load i32, i32* @r5, align 4
  %v4_cffc = add i32 %v3_cffc, 2
  %v5_cffc = inttoptr i32 %v4_cffc to i8*
  store i8 %v1_cff4, i8* %v5_cffc, align 1
  store i32 %v3_cbf4, i32* %r0.global-to-local, align 4
  %v1_d004 = load i32, i32* @r6, align 4
  %v9_d004 = icmp eq i32 %v3_cbf4, %v1_d004
  store i1 %v9_d004, i1* %cpsr_z.global-to-local, align 1
  %v0_d008 = load i32, i32* %r3.global-to-local, align 4
  %v1_d008 = trunc i32 %v0_d008 to i8
  %v2_d008 = load i32, i32* @r5, align 4
  %v3_d008 = add i32 %v2_d008, 3
  %v4_d008 = inttoptr i32 %v3_d008 to i8*
  store i8 %v1_d008, i8* %v4_d008, align 1
  %v0_d00c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d00c, label %dec_label_pc_d010, label %dec_label_pc_cee8

dec_label_pc_d010:                                ; preds = %dec_label_pc_cff4, %dec_label_pc_cedc
  %v0_d010 = call i32 @function_e958()
  %v1_d010 = trunc i32 %v0_d010 to i8
  store i32 %v0_d010, i32* %r0.global-to-local, align 4
  %v4_d014 = sdiv i32 %v0_d010, 256
  store i32 %v4_d014, i32* %r3.global-to-local, align 4
  %v3_d018 = load i32, i32* @r4, align 4
  %v4_d018 = add i32 %v3_d018, 28
  %v5_d018 = inttoptr i32 %v4_d018 to i8*
  store i8 %v1_d010, i8* %v5_d018, align 1
  %v0_d01c = load i32, i32* %r3.global-to-local, align 4
  %v1_d01c = trunc i32 %v0_d01c to i8
  %v2_d01c = load i32, i32* @r8, align 4
  %v3_d01c = add i32 %v2_d01c, 1
  %v4_d01c = inttoptr i32 %v3_d01c to i8*
  store i8 %v1_d01c, i8* %v4_d01c, align 1
  br label %dec_label_pc_cee8

dec_label_pc_d024:                                ; preds = %dec_label_pc_caf0, %dec_label_pc_cabc, %dec_label_pc_ca60, %dec_label_pc_c908
  %v0_d024 = call i32 @function_e958()
  %v1_d028 = urem i32 %v0_d024, 4
  store i32 %v1_d028, i32* %r0.global-to-local, align 4
  %v2_d02c = icmp eq i32 %v1_d028, 3
  store i1 %v2_d02c, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_d024 to i2
  switch i2 %trunc, label %dec_label_pc_cb6419 [
    i2 0, label %dec_label_pc_d06c
    i2 1, label %dec_label_pc_d080
    i2 -2, label %dec_label_pc_d08c
    i2 -1, label %dec_label_pc_d09c
  ]

dec_label_pc_d048:                                ; preds = %dec_label_pc_cbc4
  store i32 %v2_cb74, i32* %r0.global-to-local, align 4
  %v4_d04c = sext i8 %v5_cbe0 to i32
  store i32 %v4_d04c, i32* %r1.global-to-local, align 4
  %v2_d050 = add i32 %v4_d04c, %v2_cb74
  store i32 %v2_d050, i32* @fp, align 4
  br label %dec_label_pc_ce7c

dec_label_pc_d058:                                ; preds = %dec_label_pc_cb98
  store i32 %v3_cb88, i32* %r0.global-to-local, align 4
  %v1_d05c = call i32 @function_11574(i32 %v3_cb88)
  store i32 %v1_d05c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d060

dec_label_pc_d060:                                ; preds = %dec_label_pc_cb70, %dec_label_pc_cb64, %dec_label_pc_d058
  %v29_d068 = phi i32 [ %v3_cb88, %dec_label_pc_cb70 ], [ %v29_d06874, %dec_label_pc_cb64 ], [ %v1_d05c, %dec_label_pc_d058 ]
  store i32 %v3_c908, i32* %r4.global-to-local, align 4
  store i32 %v15_c908, i32* %r8.global-to-local, align 4
  store i32 %v18_c908, i32* %sb.global-to-local, align 4
  store i32 %v21_c908, i32* %sl.global-to-local, align 4
  store i32 %v24_c908, i32* %fp.global-to-local, align 4
  ret i32 %v29_d068

dec_label_pc_d06c:                                ; preds = %dec_label_pc_d024
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_cb64

dec_label_pc_d080:                                ; preds = %dec_label_pc_d024
  store i32 707416650, i32* @r4, align 4
  br label %dec_label_pc_cb64

dec_label_pc_d08c:                                ; preds = %dec_label_pc_d024
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_cb64

dec_label_pc_d09c:                                ; preds = %dec_label_pc_d024
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_cb64

; uselistorder directives
  uselistorder i32 %v4_d04c, { 0, 2, 1 }
  uselistorder i32 %v1_d028, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_d024, { 1, 0 }
  uselistorder i32 %v0_d010, { 0, 2, 1 }
  uselistorder i32 %v0_cfd8, { 0, 2, 1 }
  uselistorder i32 %v4_cfc4, { 1, 0 }
  uselistorder i32 %v0_cfbc, { 0, 2, 1 }
  uselistorder i32 %v1_cf98, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_cf34, { 0, 2, 1 }
  uselistorder i32 %v0_cf1c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_cf08, { 1, 0 }
  uselistorder i32 %v2_cf04, { 0, 2, 1 }
  uselistorder i32 %v7_ceb0, { 1, 0, 2 }
  uselistorder i32 %v4_ceec.pre-phi, { 1, 0 }
  uselistorder i32 %v2_ce30, { 1, 0 }
  uselistorder i32 %v1_ce2486, { 1, 0, 2 }
  uselistorder i32 %v1_ce18, { 2, 1, 0 }
  uselistorder i32 %v0_ce18, { 1, 2, 0 }
  uselistorder i32 %v0_ce1831, { 1, 0 }
  uselistorder i32 %v1_ce1832, { 2, 0, 1 }
  uselistorder i8 %extract.t78, { 1, 0 }
  uselistorder i32 %v1_cdec, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_cd68, { 1, 0 }
  uselistorder i32 %v3_cca4, { 1, 0, 2 }
  uselistorder i32 %v1_cc6c, { 1, 0 }
  uselistorder i32 %v1_cc60, { 1, 0 }
  uselistorder i32 %v1_cc44, { 1, 0 }
  uselistorder i32 %v1_cc30, { 1, 0 }
  uselistorder i32 %v3_cc28, { 1, 0 }
  uselistorder i32 %v4_cc20, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_cbe0, { 1, 0 }
  uselistorder i32 %v0_cbdc, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_cbd0, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_cbbc, { 1, 0 }
  uselistorder i1 %v7_cb8c, { 1, 0 }
  uselistorder i32 %v3_cb88, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_cb74, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v1_cb5c, { 1, 0, 2 }
  uselistorder i1 %v7_cb2c, { 1, 0 }
  uselistorder i32 %v1_cb28, { 1, 0, 2 }
  uselistorder i1 %v8_cb20, { 1, 0 }
  uselistorder i1 %v7_cb1c, { 1, 0 }
  uselistorder i32 %v1_cb10, { 1, 0 }
  uselistorder i8 %v2_cb04, { 2, 0, 1, 3 }
  uselistorder i32 %v0_cb08, { 1, 0 }
  uselistorder i32 %v0_cb28, { 3, 0, 2, 1 }
  uselistorder i32 %v0_caf4, { 0, 2, 1 }
  uselistorder i32 %v1_cb0c, { 0, 2, 1 }
  uselistorder i32 %v2_cadc, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v2_cad4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_cabc, { 1, 2, 0, 3, 4, 5 }
  uselistorder i1 %v7_cab4, { 1, 0 }
  uselistorder i32 %v0_cab4, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder i32 %v0_ca58, { 1, 0, 3, 2 }
  uselistorder i32 %v5_ca28, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_c9ac, { 1, 2, 0 }
  uselistorder i32 %v7_c968, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_c944, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c92c, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_c914, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 13, 8, 12, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 46, 45, 47, 49, 48, 51, 50, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 2, 3, 4, 7, 6, 8, 10, 9, 11, 13, 12, 14, 15, 16, 17, 29, 18, 19, 1, 34, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 38, 35, 36, 37, 39, 41, 40, 42, 68, 43, 45, 44, 47, 46, 48, 49, 51, 50, 52, 54, 53, 67, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 15, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 41, { 2, 3, 4, 0, 1 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32)* @function_85e0, { 67, 68, 69, 70, 71, 72, 73, 74, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 85, 86, 87, 88, 89, 90, 91, 92, 103, 104, 105, 106, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102 }
  uselistorder label %dec_label_pc_d060, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cee8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ce88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ce7c, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %.thread20, { 1, 0 }
  uselistorder label %dec_label_pc_cb38, { 1, 0 }
  uselistorder label %dec_label_pc_cb2c, { 1, 0 }
  uselistorder label %dec_label_pc_caf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cae8, { 1, 0 }
}

define i32 @function_d0b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d0b8:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_d0e8, label %dec_label_pc_d0c4

dec_label_pc_d0c4:                                ; preds = %dec_label_pc_d0b8
  %v0_d0c8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_d0c8

dec_label_pc_d0c8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0c4
  %v0_d0dc = phi i32 [ %v2_d0dc, %dec_label_pc_d0c8 ], [ 0, %dec_label_pc_d0c4 ]
  %v0_d0d0 = phi i32 [ %v1_d0d0, %dec_label_pc_d0c8 ], [ %arg1, %dec_label_pc_d0c4 ]
  %v0_d0e0 = phi i32 [ %v1_d0e0, %dec_label_pc_d0c8 ], [ %v0_d0c8.pre, %dec_label_pc_d0c4 ]
  %v1_d0c8 = inttoptr i32 %v0_d0e0 to i8*
  %v2_d0c8 = load i8, i8* %v1_d0c8, align 1
  %v3_d0c8 = zext i8 %v2_d0c8 to i32
  %v1_d0cc = add i32 %v0_d0e0, 1
  %v2_d0cc = inttoptr i32 %v1_d0cc to i8*
  %v3_d0cc = load i8, i8* %v2_d0cc, align 1
  %v4_d0cc = zext i8 %v3_d0cc to i32
  %v1_d0d0 = add i32 %v0_d0d0, -2
  %v4_d0d4 = mul nuw nsw i32 %v4_d0cc, 256
  %v5_d0d4 = or i32 %v4_d0d4, %v3_d0c8
  %v2_d0dc = add i32 %v5_d0d4, %v0_d0dc
  %v1_d0e0 = add i32 %v0_d0e0, 2
  store i32 %v1_d0e0, i32* @r0, align 4
  %v1_d0d0.cmp = icmp ugt i32 %v1_d0d0, 1
  br i1 %v1_d0d0.cmp, label %dec_label_pc_d0c8, label %dec_label_pc_d0e8

dec_label_pc_d0e8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0b8
  %v1_d0f0 = phi i32 [ 0, %dec_label_pc_d0b8 ], [ %v2_d0dc, %dec_label_pc_d0c8 ]
  %v0_d0e8 = phi i32 [ %arg1, %dec_label_pc_d0b8 ], [ %v1_d0d0, %dec_label_pc_d0c8 ]
  %v7_d0e8 = icmp eq i32 %v0_d0e8, 1
  br i1 %v7_d0e8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d0e8
  %v1_d0ec = load i32, i32* @r0, align 4
  %v2_d0ec = inttoptr i32 %v1_d0ec to i8*
  %v3_d0ec = load i8, i8* %v2_d0ec, align 1
  %v4_d0ec = zext i8 %v3_d0ec to i32
  %v3_d0f0 = add i32 %v1_d0f0, %v4_d0ec
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d0e8, %bb
  %v0_d0f4 = phi i32 [ %v1_d0f0, %dec_label_pc_d0e8 ], [ %v3_d0f0, %bb ]
  %v3_d0f8 = urem i32 %v0_d0f4, 65536
  %v4_d0fc = udiv i32 %v0_d0f4, 65536
  %v5_d0fc = add nuw nsw i32 %v4_d0fc, %v3_d0f8
  %v4_d100 = udiv i32 %v5_d0fc, 65536
  %v5_d100 = add nuw nsw i32 %v4_d100, %v5_d0fc
  %v1_d104 = urem i32 %v5_d100, 65536
  %v3_d10c = xor i32 %v1_d104, 65535
  ret i32 %v3_d10c

; uselistorder directives
  uselistorder i32 %v5_d0fc, { 1, 0 }
  uselistorder i32 %v1_d0e0, { 1, 0 }
  uselistorder i32 %v1_d0d0, { 1, 0, 2 }
  uselistorder i32 %v0_d0e0, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d114(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d114:
  %v3_d124 = urem i32 %arg2, 65536
  %v1_d128 = add i32 %arg1, 12
  %v1_d12c = inttoptr i32 %v1_d128 to i32*
  %v2_d12c = load i32, i32* %v1_d12c, align 4
  %v3_d12c = add i32 %arg1, 16
  %v4_d12c = inttoptr i32 %v3_d12c to i32*
  %v5_d12c = load i32, i32* %v4_d12c, align 4
  %v7_d130 = icmp sgt i32 %arg3, 1
  br i1 %v7_d130, label %dec_label_pc_d13c.preheader, label %dec_label_pc_d15c

dec_label_pc_d13c.preheader:                      ; preds = %dec_label_pc_d114
  %v0_d13c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_d13c

dec_label_pc_d13c:                                ; preds = %dec_label_pc_d13c.preheader, %dec_label_pc_d13c
  %v0_d150 = phi i32 [ 0, %dec_label_pc_d13c.preheader ], [ %v2_d150, %dec_label_pc_d13c ]
  %v0_d144 = phi i32 [ %arg3, %dec_label_pc_d13c.preheader ], [ %v1_d144, %dec_label_pc_d13c ]
  %v0_d154 = phi i32 [ %v0_d13c.pre, %dec_label_pc_d13c.preheader ], [ %v1_d154, %dec_label_pc_d13c ]
  %v1_d13c = inttoptr i32 %v0_d154 to i8*
  %v2_d13c = load i8, i8* %v1_d13c, align 1
  %v3_d13c = zext i8 %v2_d13c to i32
  %v1_d140 = add i32 %v0_d154, 1
  %v2_d140 = inttoptr i32 %v1_d140 to i8*
  %v3_d140 = load i8, i8* %v2_d140, align 1
  %v4_d140 = zext i8 %v3_d140 to i32
  %v1_d144 = add nsw i32 %v0_d144, -2
  %v4_d148 = mul nuw nsw i32 %v4_d140, 256
  %v5_d148 = or i32 %v4_d148, %v3_d13c
  %v2_d150 = add i32 %v5_d148, %v0_d150
  %v1_d154 = add i32 %v0_d154, 2
  store i32 %v1_d154, i32* @r1, align 4
  %v8_d158 = icmp sgt i32 %v1_d144, 1
  br i1 %v8_d158, label %dec_label_pc_d13c, label %dec_label_pc_d15c

dec_label_pc_d15c:                                ; preds = %dec_label_pc_d13c, %dec_label_pc_d114
  %v1_d164 = phi i32 [ 0, %dec_label_pc_d114 ], [ %v2_d150, %dec_label_pc_d13c ]
  %v0_d15c = phi i32 [ %arg3, %dec_label_pc_d114 ], [ %v1_d144, %dec_label_pc_d13c ]
  %v7_d15c = icmp eq i32 %v0_d15c, 1
  br i1 %v7_d15c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d15c
  %v1_d160 = load i32, i32* @r1, align 4
  %v2_d160 = inttoptr i32 %v1_d160 to i8*
  %v3_d160 = load i8, i8* %v2_d160, align 1
  %v4_d160 = zext i8 %v3_d160 to i32
  %v3_d164 = add i32 %v4_d160, %v1_d164
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d15c, %bb
  %v0_d188 = phi i32 [ %v1_d164, %dec_label_pc_d15c ], [ %v3_d164, %bb ]
  %v3_d16c = urem i32 %v2_d12c, 65536
  %v1_d174 = add i32 %arg1, 9
  %v2_d174 = inttoptr i32 %v1_d174 to i8*
  %v3_d174 = load i8, i8* %v2_d174, align 1
  %v4_d174 = zext i8 %v3_d174 to i32
  %v3_d178 = urem i32 %v5_d12c, 65536
  %v4_d17c = udiv i32 %v2_d12c, 65536
  %v3_d184 = mul nuw nsw i32 %v4_d174, 256
  %v4_d188 = udiv i32 %v5_d12c, 65536
  %v5_d188 = add i32 %v0_d188, %v4_d188
  %v2_d18c = add i32 %v5_d188, %v3_d184
  %v5_d17c = add nuw nsw i32 %v3_d16c, %v3_d124
  %v2_d180 = add nuw nsw i32 %v5_d17c, %v4_d17c
  %v2_d190 = add nuw nsw i32 %v2_d180, %v3_d178
  %v2_d194 = add i32 %v2_d18c, %v2_d190
  %tmp = icmp ult i32 %v2_d194, 65536
  br i1 %tmp, label %dec_label_pc_d1b4, label %dec_label_pc_d1a0

dec_label_pc_d1a0:                                ; preds = %.thread, %dec_label_pc_d1a0
  %v2_d1a81 = phi i32 [ %v2_d1a8, %dec_label_pc_d1a0 ], [ %v2_d194, %.thread ]
  %v3_d1ac2.in = phi i32 [ %v2_d1a8, %dec_label_pc_d1a0 ], [ %v2_d194, %.thread ]
  %v3_d1ac2 = udiv i32 %v3_d1ac2.in, 65536
  %v3_d1a4 = urem i32 %v2_d1a81, 65536
  %v2_d1a8 = add nuw nsw i32 %v3_d1a4, %v3_d1ac2
  %tmp14 = icmp ult i32 %v2_d1a8, 65536
  br i1 %tmp14, label %dec_label_pc_d1b4.loopexit, label %dec_label_pc_d1a0

dec_label_pc_d1b4.loopexit:                       ; preds = %dec_label_pc_d1a0
  br label %dec_label_pc_d1b4

dec_label_pc_d1b4:                                ; preds = %dec_label_pc_d1b4.loopexit, %.thread
  %v0_d1b4 = phi i32 [ %v2_d1a8, %dec_label_pc_d1b4.loopexit ], [ %v2_d194, %.thread ]
  %v1_d1b4 = urem i32 %v0_d1b4, 65536
  %v3_d1bc = xor i32 %v1_d1b4, 65535
  ret i32 %v3_d1bc

; uselistorder directives
  uselistorder i32 %v2_d1a8, { 2, 1, 3, 0 }
  uselistorder i32 %v2_d194, { 3, 0, 2, 1 }
  uselistorder i32 %v1_d164, { 1, 0 }
  uselistorder i32 %v1_d154, { 1, 0 }
  uselistorder i32 %v1_d144, { 0, 2, 1 }
  uselistorder i32 %v0_d154, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d1a0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_d13c, { 1, 0 }
}

define i32 @function_d1c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_d1c4:
  %v2_d1c8 = load i32, i32* @global_var_1c5e4.63, align 4
  %v2_d1d0 = call i32 @function_11674(i32 %v2_d1c8, i32 9)
  %v0_d1d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d1d4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_d1c4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_d1c4, %bb
  ret i32 %v2_d1d0

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_d1d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_d1d8:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d1d8 = load i32, i32* @r4, align 4
  store i32 %v3_d1d8, i32* %stack_var_-36, align 4
  %v6_d1d8 = load i32, i32* @r5, align 4
  %v9_d1d8 = load i32, i32* @r6, align 4
  %v12_d1d8 = load i32, i32* @r7, align 4
  %v15_d1d8 = load i32, i32* @r8, align 4
  %v18_d1d8 = load i32, i32* @sb, align 4
  %v21_d1d8 = load i32, i32* @sl, align 4
  %v24_d1d8 = load i32, i32* @fp, align 4
  %v2_d1ec = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_d1ec, i32* @sl, align 4
  %v3_d1f4 = mul i32 %arg1, 65536
  store i32 %v3_d1f4, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_d200 = ptrtoint i32* %stack_var_-8773 to i32
  %v2_d20c = bitcast i32* %stack_var_-4677 to i8*
  %v3_d20c = call i32 @function_11bb0(i8* %v2_d20c, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_d224 = bitcast i32* %stack_var_-8773 to i8*
  %v3_d224 = call i32 @function_11bb0(i8* %v2_d224, i32 0)
  %v2_d228 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_d228, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_d248 = call i32 @function_11bb0(i8* nonnull %stack_var_-581, i32 0)
  %v2_d24c = ptrtoint i8* %stack_var_-68 to i32
  %v1_d254 = load i32, i32* @r5, align 4
  %v4_d254 = udiv i32 %v1_d254, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_d274 = trunc i32 %v4_d254 to i8
  %v4_d274 = call i32 @function_110d4(i8 %v3_d274, i32 16, i32 %v2_d24c)
  %v2_d27c = call i32 @function_10c70(i8* nonnull %stack_var_-68)
  %v7_d280 = icmp eq i32 %v2_d27c, 2
  br i1 %v7_d280, label %dec_label_pc_d748, label %dec_label_pc_d288

dec_label_pc_d288:                                ; preds = %dec_label_pc_d1d8, %dec_label_pc_d748
  %v1_d28c = call i32 @function_10628(i32 15)
  %v1_d294 = call i32 @function_10628(i32 16)
  %v1_d29c = call i32 @function_10628(i32 17)
  %v1_d2a4 = call i32 @function_10628(i32 19)
  %v0_d2a8 = load i32, i32* @r4, align 4
  %v2_d2b0 = inttoptr i32 %v0_d2a8 to i32*
  %v3_d2b0 = call i32 @function_10544(i32 19, i32* %v2_d2b0)
  %v0_d2b4 = load i32, i32* @r4, align 4
  %v2_d2b8 = inttoptr i32 %v3_d2b0 to i8*
  %v3_d2b8 = call i32 @function_116a0(i8* %v2_d2b8, i32 %v0_d2b4)
  %v7_d2bc = icmp eq i32 %v3_d2b8, -1
  store i32 %v3_d2b8, i32* @r8, align 4
  br i1 %v7_d2bc, label %dec_label_pc_d6e4, label %dec_label_pc_d2c8.preheader

dec_label_pc_d2c8.preheader:                      ; preds = %dec_label_pc_d288
  %v4_d2d458 = call i32 @function_10ec8(i8* nonnull %stack_var_-581, i32 512, i32 %v3_d2b8)
  %v2_d2d860 = icmp eq i32 %v4_d2d458, 0
  br i1 %v2_d2d860, label %dec_label_pc_d468.loopexit, label %dec_label_pc_d2e0.lr.ph

dec_label_pc_d2e0.lr.ph:                          ; preds = %dec_label_pc_d2c8.preheader
  %v2_d328 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_d2e0

dec_label_pc_d2e0:                                ; preds = %dec_label_pc_d2e0.lr.ph, %dec_label_pc_d2c8.backedge
  %v3_d2e4 = load i8, i8* %stack_var_-581, align 1
  %v4_d2e4 = sext i8 %v3_d2e4 to i32
  %v2_d2e8 = icmp eq i8 %v3_d2e4, 0
  br i1 %v2_d2e8, label %bb126, label %bb

bb:                                               ; preds = %dec_label_pc_d2e0
  %v8_d2ec = icmp eq i8 %v3_d2e4, 58
  br i1 %v8_d2ec, label %.thread6, label %dec_label_pc_d300

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_d318

bb126:                                            ; preds = %dec_label_pc_d2e0
  br label %dec_label_pc_d318

dec_label_pc_d300:                                ; preds = %bb
  %v1_d308.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d304

dec_label_pc_d304:                                ; preds = %bb127, %dec_label_pc_d300
  %v0_d304 = phi i32 [ %v1_d304, %bb127 ], [ 0, %dec_label_pc_d300 ]
  %v1_d304 = add i32 %v0_d304, 1
  %v2_d308 = add i32 %v1_d304, %v1_d308.pre
  %v3_d308 = inttoptr i32 %v2_d308 to i8*
  %v4_d308 = load i8, i8* %v3_d308, align 1
  %v6_d308 = zext i8 %v4_d308 to i32
  %v2_d30c = icmp eq i8 %v4_d308, 0
  br i1 %v2_d30c, label %dec_label_pc_d318, label %bb127

bb127:                                            ; preds = %dec_label_pc_d304
  %v8_d310 = icmp eq i8 %v4_d308, 58
  br i1 %v8_d310, label %dec_label_pc_d318, label %dec_label_pc_d304

dec_label_pc_d318:                                ; preds = %dec_label_pc_d304, %bb127, %bb126, %.thread6
  %v1_d344 = phi i32 [ 0, %.thread6 ], [ 0, %bb126 ], [ %v1_d304, %bb127 ], [ %v1_d304, %dec_label_pc_d304 ]
  %v0_d318 = phi i32 [ %v4_d2e4, %.thread6 ], [ %v4_d2e4, %bb126 ], [ %v6_d308, %bb127 ], [ %v6_d308, %dec_label_pc_d304 ]
  %v2_d318 = icmp eq i32 %v0_d318, 0
  br i1 %v2_d318, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d320

dec_label_pc_d2c8.backedge:                       ; preds = %dec_label_pc_d318, %dec_label_pc_d3f0, %dec_label_pc_d43c, %dec_label_pc_d364
  %v0_d2d0 = load i32, i32* @r8, align 4
  %v4_d2d4 = call i32 @function_10ec8(i8* nonnull %stack_var_-581, i32 512, i32 %v0_d2d0)
  %v2_d2d8 = icmp eq i32 %v4_d2d4, 0
  br i1 %v2_d2d8, label %dec_label_pc_d468.loopexit, label %dec_label_pc_d2e0

dec_label_pc_d320:                                ; preds = %dec_label_pc_d318
  %v1_d324 = add i32 %v1_d344, 2
  %v2_d32c = add i32 %v1_d324, %v2_d328
  %v1_d330 = add i32 %v2_d32c, -545
  %v2_d330 = inttoptr i32 %v1_d330 to i8*
  %v3_d330 = load i8, i8* %v2_d330, align 1
  %v2_d334 = icmp eq i8 %v3_d330, 0
  br i1 %v2_d334, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_d320
  %v8_d338 = icmp eq i8 %v3_d330, 32
  br i1 %v8_d338, label %.thread10, label %dec_label_pc_d344

.thread10:                                        ; preds = %bb128
  store i32 %v1_d324, i32* @r5, align 4
  br label %dec_label_pc_d364

bb129:                                            ; preds = %dec_label_pc_d320
  store i32 %v1_d324, i32* @r5, align 4
  br label %dec_label_pc_d364

dec_label_pc_d344:                                ; preds = %bb128
  %v0_d344 = load i32, i32* @r6, align 4
  %v2_d344 = add i32 %v0_d344, %v1_d344
  br label %dec_label_pc_d348

dec_label_pc_d348:                                ; preds = %bb130, %dec_label_pc_d344
  %v0_d35413 = phi i32 [ %v1_d354, %bb130 ], [ %v2_d344, %dec_label_pc_d344 ]
  %v1_d348 = add i32 %v0_d35413, 3
  %v2_d348 = inttoptr i32 %v1_d348 to i8*
  %v3_d348 = load i8, i8* %v2_d348, align 1
  %v2_d34c = icmp eq i8 %v3_d348, 0
  br i1 %v2_d34c, label %.thread12, label %bb130

.thread12:                                        ; preds = %dec_label_pc_d348
  %v1_d35414 = add i32 %v0_d35413, 1
  br label %dec_label_pc_d35c

bb130:                                            ; preds = %dec_label_pc_d348
  %v8_d350 = icmp eq i8 %v3_d348, 32
  %v1_d354 = add i32 %v0_d35413, 1
  br i1 %v8_d350, label %dec_label_pc_d35c, label %dec_label_pc_d348

dec_label_pc_d35c:                                ; preds = %bb130, %.thread12
  %v1_d35415 = phi i32 [ %v1_d35414, %.thread12 ], [ %v1_d354, %bb130 ]
  %v2_d35c = sub i32 %v1_d35415, %v0_d344
  %v1_d360 = add i32 %v2_d35c, 2
  store i32 %v1_d360, i32* @r5, align 4
  br label %dec_label_pc_d364

dec_label_pc_d364:                                ; preds = %bb129, %.thread10, %dec_label_pc_d35c
  %v1_d370 = phi i32 [ %v1_d324, %.thread10 ], [ %v1_d324, %bb129 ], [ %v1_d360, %dec_label_pc_d35c ]
  %v0_d364 = load i32, i32* @r6, align 4
  %v2_d364 = add i32 %v0_d364, %v1_d324
  store i32 %v2_d364, i32* @r4, align 4
  %v2_d370 = add i32 %v1_d370, %v2_d328
  store i32 0, i32* @r7, align 4
  %v3_d37c = add i32 %v2_d370, -545
  %v4_d37c = inttoptr i32 %v3_d37c to i8*
  store i8 0, i8* %v4_d37c, align 1
  %v1_d380 = inttoptr i32 %v2_d364 to i8*
  %v2_d380 = call i32 @function_10c70(i8* %v1_d380)
  store i32 %v2_d380, i32* @r1, align 4
  %v0_d38c = load i32, i32* @r4, align 4
  %v3_d390 = inttoptr i32 %v0_d38c to i8*
  %v4_d390 = call i32 @function_10fc4(i8* %v3_d390, i32 %v2_d380, i32 %v2_d24c)
  %v7_d394 = icmp eq i32 %v4_d390, -1
  br i1 %v7_d394, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d3b0.preheader

dec_label_pc_d3b0.preheader:                      ; preds = %dec_label_pc_d364
  %v1_d398 = load i32, i32* @r7, align 4
  %v1_d39c = load i32, i32* @r6, align 4
  %v2_d39c = load i32, i32* @r5, align 4
  %v3_d39c = add i32 %v2_d39c, %v1_d39c
  store i32 %v1_d398, i32* @lr, align 4
  store i32 %v1_d398, i32* @r4, align 4
  %v1_d3b050 = add i32 %v3_d39c, 2
  %v2_d3b051 = inttoptr i32 %v1_d3b050 to i8*
  %v3_d3b052 = load i8, i8* %v2_d3b051, align 1
  %v2_d3b454 = icmp eq i8 %v3_d3b052, 0
  %v1_d3b856 = add i32 %v2_d39c, 2
  br i1 %v2_d3b454, label %dec_label_pc_d3f0, label %dec_label_pc_d3c0

dec_label_pc_d3c0:                                ; preds = %dec_label_pc_d3b0.preheader, %dec_label_pc_d3b0.backedge
  %v0_d3f086 = phi i32 [ %v0_d3f085, %dec_label_pc_d3b0.backedge ], [ %v1_d398, %dec_label_pc_d3b0.preheader ]
  %v0_d3d8.pr = phi i32 [ %v0_d3d8.pr71, %dec_label_pc_d3b0.backedge ], [ %v1_d398, %dec_label_pc_d3b0.preheader ]
  %v0_d6f4 = phi i32 [ %v0_d6f474, %dec_label_pc_d3b0.backedge ], [ %v1_d398, %dec_label_pc_d3b0.preheader ]
  %v0_d3b882 = phi i32 [ %v1_d3b8, %dec_label_pc_d3b0.backedge ], [ %v1_d3b856, %dec_label_pc_d3b0.preheader ]
  %v0_d3e8 = phi i32 [ %v0_d3b0, %dec_label_pc_d3b0.backedge ], [ %v3_d39c, %dec_label_pc_d3b0.preheader ]
  %v1_d3c4.in = phi i8 [ %v3_d3b0, %dec_label_pc_d3b0.backedge ], [ %v3_d3b052, %dec_label_pc_d3b0.preheader ]
  %v7_d3c0 = icmp eq i8 %v1_d3c4.in, 9
  br i1 %v7_d3c0, label %.thread23, label %bb131

bb131:                                            ; preds = %dec_label_pc_d3c0
  %v8_d3c4 = icmp eq i8 %v1_d3c4.in, 32
  br i1 %v8_d3c4, label %.thread23.thread35, label %dec_label_pc_d3d8

.thread23.thread35:                               ; preds = %bb131
  br label %dec_label_pc_d3e4

.thread23:                                        ; preds = %dec_label_pc_d3c0
  br label %dec_label_pc_d3e4

dec_label_pc_d3d8:                                ; preds = %bb131
  %v7_d3d8 = icmp eq i32 %v0_d3d8.pr, 1
  br i1 %v7_d3d8, label %dec_label_pc_d6f4, label %dec_label_pc_d3e0

dec_label_pc_d3e0:                                ; preds = %dec_label_pc_d6f4, %dec_label_pc_d3d8
  %v0_d3e479 = phi i32 [ %v1_d6f4, %dec_label_pc_d6f4 ], [ %v0_d6f4, %dec_label_pc_d3d8 ]
  br label %dec_label_pc_d3e4

dec_label_pc_d3e4:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_d3e0
  %v0_d3e4 = phi i32 [ %v0_d6f4, %.thread23.thread35 ], [ %v0_d6f4, %.thread23 ], [ %v0_d3e479, %dec_label_pc_d3e0 ]
  %v0_d3d8.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_d3e0 ]
  %v7_d3ec = icmp sgt i32 %v0_d3e4, 6
  br i1 %v7_d3ec, label %dec_label_pc_d3f0, label %dec_label_pc_d3b0.backedge

dec_label_pc_d3f0:                                ; preds = %dec_label_pc_d3b0.backedge, %dec_label_pc_d3e4, %dec_label_pc_d3b0.preheader
  %v1_d440 = phi i32 [ %v1_d3b856, %dec_label_pc_d3b0.preheader ], [ %v1_d3b8, %dec_label_pc_d3b0.backedge ], [ %v0_d3b882, %dec_label_pc_d3e4 ]
  %v0_d3f0 = phi i32 [ %v1_d398, %dec_label_pc_d3b0.preheader ], [ %v0_d3f085, %dec_label_pc_d3b0.backedge ], [ %v0_d3f086, %dec_label_pc_d3e4 ]
  %v2_d3f0 = icmp eq i32 %v0_d3f0, 0
  br i1 %v2_d3f0, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d3fc

dec_label_pc_d3fc:                                ; preds = %dec_label_pc_d3f0
  %v2_d404 = add i32 %v1_d440, %v2_d328
  %v1_d408 = add i32 %v2_d404, -545
  %v2_d408 = inttoptr i32 %v1_d408 to i8*
  %v3_d408 = load i8, i8* %v2_d408, align 1
  %v2_d40c = icmp eq i8 %v3_d408, 0
  br i1 %v2_d40c, label %dec_label_pc_d43c, label %bb132

bb132:                                            ; preds = %dec_label_pc_d3fc
  %v8_d410 = icmp eq i8 %v3_d408, 32
  br i1 %v8_d410, label %dec_label_pc_d43c, label %dec_label_pc_d418

dec_label_pc_d418:                                ; preds = %bb132
  %v2_d418 = add i32 %v1_d440, %v1_d39c
  br label %dec_label_pc_d41c

dec_label_pc_d41c:                                ; preds = %bb133, %dec_label_pc_d418
  %v0_d42828 = phi i32 [ %v1_d428, %bb133 ], [ %v1_d440, %dec_label_pc_d418 ]
  %v0_d41c = phi i32 [ %v1_d41c, %bb133 ], [ %v2_d418, %dec_label_pc_d418 ]
  %v1_d41c = add i32 %v0_d41c, 1
  %v2_d41c = inttoptr i32 %v1_d41c to i8*
  %v3_d41c = load i8, i8* %v2_d41c, align 1
  %v2_d420 = icmp eq i8 %v3_d41c, 0
  br i1 %v2_d420, label %.thread27, label %bb133

.thread27:                                        ; preds = %dec_label_pc_d41c
  %v1_d42829 = add i32 %v0_d42828, 1
  br label %dec_label_pc_d430

bb133:                                            ; preds = %dec_label_pc_d41c
  %v8_d424 = icmp eq i8 %v3_d41c, 32
  %v1_d428 = add i32 %v0_d42828, 1
  br i1 %v8_d424, label %dec_label_pc_d430, label %dec_label_pc_d41c

dec_label_pc_d430:                                ; preds = %bb133, %.thread27
  %v1_d438 = phi i32 [ %v1_d42829, %.thread27 ], [ %v1_d428, %bb133 ]
  %v2_d438 = add i32 %v1_d438, %v2_d328
  br label %dec_label_pc_d43c

dec_label_pc_d43c:                                ; preds = %dec_label_pc_d3fc, %bb132, %dec_label_pc_d430
  %v2_d448 = phi i32 [ %v2_d404, %dec_label_pc_d3fc ], [ %v2_d404, %bb132 ], [ %v2_d438, %dec_label_pc_d430 ]
  %v2_d440 = add i32 %v1_d440, %v1_d39c
  store i32 %v2_d440, i32* @r4, align 4
  %v3_d448 = add i32 %v2_d448, -545
  %v4_d448 = inttoptr i32 %v3_d448 to i8*
  store i8 0, i8* %v4_d448, align 1
  %v1_d44c = inttoptr i32 %v2_d440 to i8*
  %v2_d44c = call i32 @function_10c70(i8* %v1_d44c)
  %v8_d454 = icmp sgt i32 %v2_d44c, 15
  br i1 %v8_d454, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d458

dec_label_pc_d458:                                ; preds = %dec_label_pc_d43c
  %v0_d45c = load i32, i32* @r4, align 4
  %v2_d460 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_d460, i32* @r0, align 4
  %v2_d464 = bitcast i32* %stack_var_-52 to i8*
  %v3_d464 = call i32 @function_10c98(i8* %v2_d464, i32 %v0_d45c)
  br label %dec_label_pc_d468

dec_label_pc_d468.loopexit:                       ; preds = %dec_label_pc_d2c8.backedge, %dec_label_pc_d2c8.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre95 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_d468

dec_label_pc_d468:                                ; preds = %dec_label_pc_d468.loopexit, %dec_label_pc_d458
  %v1_d478.pre-phi = phi i8* [ %.pre95, %dec_label_pc_d468.loopexit ], [ %v2_d464, %dec_label_pc_d458 ]
  %v2_d474.pre-phi = phi i32 [ %.pre, %dec_label_pc_d468.loopexit ], [ %v2_d460, %dec_label_pc_d458 ]
  %v0_d468 = load i32, i32* @r8, align 4
  %v1_d46c = call i32 @function_11574(i32 %v0_d468)
  %v2_d478 = call i32 @function_10c70(i8* %v1_d478.pre-phi)
  store i32 %v2_d478, i32* @r4, align 4
  %v2_d47c = icmp eq i32 %v2_d478, 0
  br i1 %v2_d47c, label %dec_label_pc_d724, label %dec_label_pc_d484

dec_label_pc_d484:                                ; preds = %dec_label_pc_d468
  %v3_d48c = call i32 @function_10544(i32 15, i32* null)
  store i32 %v3_d48c, i32* @r0, align 4
  %v1_d490 = call i32 @function_1197c(i32 %v3_d48c)
  store i32 %v1_d490, i32* @r8, align 4
  %v2_d494 = icmp eq i32 %v1_d490, 0
  br i1 %v2_d494, label %dec_label_pc_d6c4, label %dec_label_pc_d4a4.preheader

dec_label_pc_d4a4.preheader:                      ; preds = %dec_label_pc_d484
  store i32 0, i32* @r5, align 4
  %v1_d4a845 = inttoptr i32 %v1_d490 to i32*
  %v2_d4a846 = call i32 @function_11a78(i32* %v1_d4a845)
  %v2_d4ac48 = icmp eq i32 %v2_d4a846, 0
  br i1 %v2_d4ac48, label %dec_label_pc_d6b8, label %dec_label_pc_d4b4.preheader

dec_label_pc_d4a4.loopexit:                       ; preds = %dec_label_pc_d4bc, %dec_label_pc_d4d0, %dec_label_pc_d538
  %v0_d4a4 = load i32, i32* @r8, align 4
  %v1_d4a8 = inttoptr i32 %v0_d4a4 to i32*
  %v2_d4a8 = call i32 @function_11a78(i32* %v1_d4a8)
  %v2_d4ac = icmp eq i32 %v2_d4a8, 0
  br i1 %v2_d4ac, label %dec_label_pc_d6b8, label %dec_label_pc_d4b4.preheader

dec_label_pc_d4b4.preheader:                      ; preds = %dec_label_pc_d4a4.preheader, %dec_label_pc_d4a4.loopexit
  %v0_d4bc94 = phi i32 [ %v2_d4a8, %dec_label_pc_d4a4.loopexit ], [ %v2_d4a846, %dec_label_pc_d4a4.preheader ]
  br label %dec_label_pc_d4b4

dec_label_pc_d4b4:                                ; preds = %dec_label_pc_d4b4.preheader, %dec_label_pc_d6a0
  %v0_d4c8 = phi i32 [ %v0_d4bc94, %dec_label_pc_d4b4.preheader ], [ %v2_d6ac, %dec_label_pc_d6a0 ]
  %v0_d4b4 = load i32, i32* @r5, align 4
  %v2_d4b4 = icmp eq i32 %v0_d4b4, 0
  br i1 %v2_d4b4, label %dec_label_pc_d4bc, label %dec_label_pc_d6b8

dec_label_pc_d4bc:                                ; preds = %dec_label_pc_d4b4
  %v1_d4bc = add i32 %v0_d4c8, 11
  %v2_d4bc = inttoptr i32 %v1_d4bc to i8*
  %v3_d4bc = load i8, i8* %v2_d4bc, align 1
  %v4_d4bc = zext i8 %v3_d4bc to i32
  %v1_d4c0 = add nsw i32 %v4_d4bc, -48
  store i32 %v1_d4bc, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_d4c0, 9
  br i1 %tmp, label %dec_label_pc_d4a4.loopexit, label %dec_label_pc_d4d0

dec_label_pc_d4d0:                                ; preds = %dec_label_pc_d4bc
  %v3_d4d8 = call i32 @function_10544(i32 15, i32* null)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v3_d4e4 = call i32 @function_10c98(i8* %v2_d20c, i32 %v3_d4d8)
  %v2_d4ec = call i32 @function_10c70(i8* %v2_d20c)
  %v0_d4f0 = load i32, i32* @r7, align 4
  %v0_d4f4 = load i32, i32* @sl, align 4
  %v2_d4f4 = add i32 %v0_d4f4, %v2_d4ec
  store i32 %v2_d4f4, i32* @r0, align 4
  %v2_d4f8 = inttoptr i32 %v2_d4f4 to i8*
  %v3_d4f8 = call i32 @function_10c98(i8* %v2_d4f8, i32 %v0_d4f0)
  %v2_d500 = call i32 @function_10c70(i8* %v2_d20c)
  %v0_d504 = load i32, i32* @r5, align 4
  store i32 %v2_d500, i32* @r4, align 4
  %v2_d510 = inttoptr i32 %v0_d504 to i32*
  %v3_d510 = call i32 @function_10544(i32 16, i32* %v2_d510)
  %v0_d518 = load i32, i32* @sl, align 4
  %v1_d518 = load i32, i32* @r4, align 4
  %v2_d518 = add i32 %v1_d518, %v0_d518
  store i32 %v2_d518, i32* @r0, align 4
  %v2_d51c = inttoptr i32 %v2_d518 to i8*
  %v3_d51c = call i32 @function_10c98(i8* %v2_d51c, i32 %v3_d510)
  %v4_d52c = call i32 @function_11768(i8* %v2_d20c, i32 %v2_d200, i32 4096)
  %v7_d530 = icmp eq i32 %v4_d52c, -1
  br i1 %v7_d530, label %dec_label_pc_d4a4.loopexit, label %dec_label_pc_d538

dec_label_pc_d538:                                ; preds = %dec_label_pc_d4d0
  %v0_d538 = load i32, i32* @r5, align 4
  %v2_d540 = inttoptr i32 %v0_d538 to i32*
  %v3_d540 = call i32 @function_10544(i32 15, i32* %v2_d540)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v3_d54c = call i32 @function_10c98(i8* %v2_d20c, i32 %v3_d540)
  %v2_d554 = call i32 @function_10c70(i8* %v2_d20c)
  %v0_d558 = load i32, i32* @r7, align 4
  %v0_d55c = load i32, i32* @sl, align 4
  %v2_d55c = add i32 %v0_d55c, %v2_d554
  store i32 %v2_d55c, i32* @r0, align 4
  %v2_d560 = inttoptr i32 %v2_d55c to i8*
  %v3_d560 = call i32 @function_10c98(i8* %v2_d560, i32 %v0_d558)
  %v2_d568 = call i32 @function_10c70(i8* %v2_d20c)
  %v0_d56c = load i32, i32* @r5, align 4
  store i32 %v2_d568, i32* @r4, align 4
  %v2_d578 = inttoptr i32 %v0_d56c to i32*
  %v3_d578 = call i32 @function_10544(i32 17, i32* %v2_d578)
  %v0_d580 = load i32, i32* @sl, align 4
  %v1_d580 = load i32, i32* @r4, align 4
  %v2_d580 = add i32 %v1_d580, %v0_d580
  store i32 %v2_d580, i32* @r0, align 4
  %v2_d584 = inttoptr i32 %v2_d580 to i8*
  %v3_d584 = call i32 @function_10c98(i8* %v2_d584, i32 %v3_d578)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v1_d58c = call i32 @function_1197c(i32 %v2_d1ec)
  store i32 %v1_d58c, i32* @sb, align 4
  %v2_d590 = icmp eq i32 %v1_d58c, 0
  br i1 %v2_d590, label %dec_label_pc_d4a4.loopexit, label %dec_label_pc_d598.preheader

dec_label_pc_d598.preheader:                      ; preds = %dec_label_pc_d538
  %v1_d59c40 = inttoptr i32 %v1_d58c to i32*
  %v2_d59c41 = call i32 @function_11a78(i32* %v1_d59c40)
  store i32 %v2_d59c41, i32* @r6, align 4
  %v2_d5a043 = icmp eq i32 %v2_d59c41, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d200, i32* @r0, align 4
  br i1 %v2_d5a043, label %dec_label_pc_d6a0, label %dec_label_pc_d5b0thread-pre-split

dec_label_pc_d598.loopexit:                       ; preds = %dec_label_pc_d5b8, %dec_label_pc_d650
  %v0_d598 = load i32, i32* @sb, align 4
  %v1_d59c = inttoptr i32 %v0_d598 to i32*
  %v2_d59c = call i32 @function_11a78(i32* %v1_d59c)
  store i32 %v2_d59c, i32* @r6, align 4
  %v2_d5a0 = icmp eq i32 %v2_d59c, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d200, i32* @r0, align 4
  br i1 %v2_d5a0, label %dec_label_pc_d6a0, label %dec_label_pc_d5b0thread-pre-split

dec_label_pc_d5b0thread-pre-split:                ; preds = %dec_label_pc_d598.preheader, %dec_label_pc_d598.loopexit
  %v0_d5b0.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_d5b0

dec_label_pc_d5b0:                                ; preds = %dec_label_pc_d5b0thread-pre-split, %dec_label_pc_d678
  %v0_d5b0 = phi i32 [ %v0_d5b0.pr, %dec_label_pc_d5b0thread-pre-split ], [ 1, %dec_label_pc_d678 ]
  %v2_d5b0 = icmp eq i32 %v0_d5b0, 0
  br i1 %v2_d5b0, label %dec_label_pc_d5b8, label %dec_label_pc_d6a0

dec_label_pc_d5b8:                                ; preds = %dec_label_pc_d5b0
  %v0_d5b8 = call i32 @function_10d10()
  %v0_d5bc = load i32, i32* @r5, align 4
  %v2_d5c4 = inttoptr i32 %v0_d5bc to i32*
  %v3_d5c4 = call i32 @function_10544(i32 15, i32* %v2_d5c4)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v3_d5d0 = call i32 @function_10c98(i8* %v2_d20c, i32 %v3_d5c4)
  %v2_d5d8 = call i32 @function_10c70(i8* %v2_d20c)
  %v0_d5dc = load i32, i32* @r7, align 4
  %v0_d5e0 = load i32, i32* @sl, align 4
  %v2_d5e0 = add i32 %v0_d5e0, %v2_d5d8
  store i32 %v2_d5e0, i32* @r0, align 4
  %v2_d5e4 = inttoptr i32 %v2_d5e0 to i8*
  %v3_d5e4 = call i32 @function_10c98(i8* %v2_d5e4, i32 %v0_d5dc)
  %v2_d5ec = call i32 @function_10c70(i8* %v2_d20c)
  %v0_d5f0 = load i32, i32* @r5, align 4
  store i32 %v2_d5ec, i32* @r4, align 4
  %v2_d5fc = inttoptr i32 %v0_d5f0 to i32*
  %v3_d5fc = call i32 @function_10544(i32 17, i32* %v2_d5fc)
  %v0_d604 = load i32, i32* @sl, align 4
  %v1_d604 = load i32, i32* @r4, align 4
  %v2_d604 = add i32 %v1_d604, %v0_d604
  store i32 %v2_d604, i32* @r0, align 4
  %v2_d608 = inttoptr i32 %v2_d604 to i8*
  %v3_d608 = call i32 @function_10c98(i8* %v2_d608, i32 %v3_d5fc)
  %v2_d610 = call i32 @function_10c70(i8* %v2_d20c)
  %v0_d618 = load i32, i32* @sl, align 4
  %v2_d618 = add i32 %v0_d618, %v2_d610
  store i32 %v2_d618, i32* @r0, align 4
  %v2_d61c = inttoptr i32 %v2_d618 to i8*
  %v3_d61c = call i32 @function_10c98(i8* %v2_d61c, i32 ptrtoint (i32* @global_var_13e14.65 to i32))
  %v2_d624 = call i32 @function_10c70(i8* %v2_d20c)
  %v0_d628 = load i32, i32* @r6, align 4
  %v1_d628 = add i32 %v0_d628, 11
  %v0_d62c = load i32, i32* @sl, align 4
  %v2_d62c = add i32 %v0_d62c, %v2_d624
  store i32 %v2_d62c, i32* @r0, align 4
  %v2_d630 = inttoptr i32 %v2_d62c to i8*
  %v3_d630 = call i32 @function_10c98(i8* %v2_d630, i32 %v1_d628)
  %v4_d640 = call i32 @function_11768(i8* %v2_d20c, i32 %v2_d200, i32 4096)
  %v7_d644 = icmp eq i32 %v4_d640, -1
  br i1 %v7_d644, label %dec_label_pc_d598.loopexit, label %dec_label_pc_d650

dec_label_pc_d650:                                ; preds = %dec_label_pc_d5b8
  %v2_d650 = call i32 @function_10c70(i8* %v2_d224)
  store i32 %v2_d650, i32* @r1, align 4
  %v4_d664 = call i32 @function_10fc4(i8* %v2_d224, i32 %v2_d650, i32 %v2_d474.pre-phi)
  %v7_d668 = icmp eq i32 %v4_d664, -1
  br i1 %v7_d668, label %dec_label_pc_d598.loopexit, label %dec_label_pc_d678

dec_label_pc_d678:                                ; preds = %dec_label_pc_d650
  %v0_d670 = load i32, i32* @r7, align 4
  %v2_d678 = inttoptr i32 %v0_d670 to i8*
  %v3_d678 = call i32 @function_10d9c(i8* %v2_d678, i32 10)
  %v2_d680 = call i32 @function_11674(i32 %v3_d678, i32 9)
  %v0_d684 = load i32, i32* @sb, align 4
  %v1_d688 = inttoptr i32 %v0_d684 to i32*
  %v2_d688 = call i32 @function_11a78(i32* %v1_d688)
  store i32 %v2_d688, i32* @r6, align 4
  %v2_d68c = icmp eq i32 %v2_d688, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d200, i32* @r0, align 4
  br i1 %v2_d68c, label %dec_label_pc_d6a0, label %dec_label_pc_d5b0

dec_label_pc_d6a0:                                ; preds = %dec_label_pc_d598.loopexit, %dec_label_pc_d678, %dec_label_pc_d5b0, %dec_label_pc_d598.preheader
  %v0_d6a0 = load i32, i32* @sb, align 4
  %v1_d6a4 = inttoptr i32 %v0_d6a0 to i32*
  %v2_d6a4 = call i32 @function_118c8(i32* %v1_d6a4)
  %v0_d6a8 = load i32, i32* @r8, align 4
  %v1_d6ac = inttoptr i32 %v0_d6a8 to i32*
  %v2_d6ac = call i32 @function_11a78(i32* %v1_d6ac)
  %v2_d6b0 = icmp eq i32 %v2_d6ac, 0
  br i1 %v2_d6b0, label %dec_label_pc_d6b8, label %dec_label_pc_d4b4

dec_label_pc_d6b8:                                ; preds = %dec_label_pc_d4a4.loopexit, %dec_label_pc_d6a0, %dec_label_pc_d4b4, %dec_label_pc_d4a4.preheader
  %v0_d6b8 = load i32, i32* @r8, align 4
  %v1_d6bc = inttoptr i32 %v0_d6b8 to i32*
  %v2_d6bc = call i32 @function_118c8(i32* %v1_d6bc)
  %v0_d6c0 = load i32, i32* @r5, align 4
  %v1_d6c0 = urem i32 %v0_d6c0, 256
  br label %dec_label_pc_d6c4

dec_label_pc_d6c4:                                ; preds = %dec_label_pc_d484, %dec_label_pc_d6b8
  %storemerge = phi i32 [ %v1_d6c0, %dec_label_pc_d6b8 ], [ 0, %dec_label_pc_d484 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_d6c8 = call i32 @function_129a8(i32 1)
  %v1_d6d0 = call i32 @function_10570(i32 15)
  %v1_d6d8 = call i32 @function_10570(i32 16)
  %v1_d6e0 = call i32 @function_10570(i32 17)
  br label %dec_label_pc_d6e4

dec_label_pc_d6e4:                                ; preds = %dec_label_pc_d288, %dec_label_pc_d724, %dec_label_pc_d6c4
  %v0_d6e4 = load i32, i32* @r4, align 4
  %v2_d6f0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d6f0, i32* @r4, align 4
  store i32 %v6_d1d8, i32* @r5, align 4
  store i32 %v9_d1d8, i32* @r6, align 4
  store i32 %v12_d1d8, i32* @r7, align 4
  store i32 %v15_d1d8, i32* @r8, align 4
  store i32 %v18_d1d8, i32* @sb, align 4
  store i32 %v21_d1d8, i32* @sl, align 4
  store i32 %v24_d1d8, i32* @fp, align 4
  ret i32 %v0_d6e4

dec_label_pc_d6f4:                                ; preds = %dec_label_pc_d3d8
  %v1_d6f4 = add i32 %v0_d6f4, 1
  store i32 %v1_d6f4, i32* @lr, align 4
  %v7_d6f8 = icmp eq i32 %v0_d6f4, 0
  br i1 %v7_d6f8, label %dec_label_pc_d700, label %dec_label_pc_d3e0

dec_label_pc_d700:                                ; preds = %dec_label_pc_d6f4
  %v1_d700 = add i32 %v0_d3e8, 3
  %v2_d700 = inttoptr i32 %v1_d700 to i8*
  %v3_d700 = load i8, i8* %v2_d700, align 1
  %v7_d704 = icmp eq i8 %v3_d700, 65
  br i1 %v7_d704, label %dec_label_pc_d714, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_d700
  br label %dec_label_pc_d3b0.backedge

dec_label_pc_d714:                                ; preds = %dec_label_pc_d700
  store i32 %v1_d6f4, i32* @r4, align 4
  br label %dec_label_pc_d3b0.backedge

dec_label_pc_d3b0.backedge:                       ; preds = %.thread33, %dec_label_pc_d714, %dec_label_pc_d3e4
  %v0_d3f085 = phi i32 [ %v1_d6f4, %dec_label_pc_d714 ], [ %v0_d3f086, %dec_label_pc_d3e4 ], [ %v0_d3f086, %.thread33 ]
  %v0_d6f474 = phi i32 [ %v1_d6f4, %dec_label_pc_d714 ], [ %v0_d3e4, %dec_label_pc_d3e4 ], [ %v1_d6f4, %.thread33 ]
  %v0_d3d8.pr71 = phi i32 [ 0, %dec_label_pc_d714 ], [ %v0_d3d8.pr72, %dec_label_pc_d3e4 ], [ 0, %.thread33 ]
  %v0_d3b0 = add i32 %v0_d3e8, 1
  %v1_d3b0 = add i32 %v0_d3e8, 3
  %v2_d3b0 = inttoptr i32 %v1_d3b0 to i8*
  %v3_d3b0 = load i8, i8* %v2_d3b0, align 1
  %v2_d3b4 = icmp eq i8 %v3_d3b0, 0
  %v1_d3b8 = add i32 %v0_d3b882, 1
  br i1 %v2_d3b4, label %dec_label_pc_d3f0, label %dec_label_pc_d3c0

dec_label_pc_d724:                                ; preds = %dec_label_pc_d468
  %v1_d728 = call i32 @function_10570(i32 15)
  %v1_d730 = call i32 @function_10570(i32 16)
  %v1_d738 = call i32 @function_10570(i32 17)
  %v1_d740 = call i32 @function_10570(i32 19)
  br label %dec_label_pc_d6e4

dec_label_pc_d748:                                ; preds = %dec_label_pc_d1d8
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_d288

; uselistorder directives
  uselistorder i32 %v1_d3b8, { 1, 0 }
  uselistorder i8 %v3_d3b0, { 1, 0 }
  uselistorder i32 %v0_d3f085, { 1, 0 }
  uselistorder i32 %v1_d6f4, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_d6ac, { 1, 0 }
  uselistorder i32 %v1_d41c, { 1, 0 }
  uselistorder i32 %v0_d42828, { 1, 0 }
  uselistorder i32 %v1_d440, { 0, 3, 1, 2 }
  uselistorder i32 %v0_d3e4, { 1, 0 }
  uselistorder i32 %v0_d3b882, { 1, 0 }
  uselistorder i32 %v0_d6f4, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_d3f086, { 1, 2, 0 }
  uselistorder i32 %v1_d3b856, { 1, 0 }
  uselistorder i32 %v2_d39c, { 1, 0 }
  uselistorder i32 %v1_d398, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_d35413, { 1, 0, 2 }
  uselistorder i32 %v0_d344, { 1, 0 }
  uselistorder i32 %v1_d324, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_d2b8, { 1, 2, 0 }
  uselistorder i32 %v2_d200, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_d1ec, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_10d9c, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_10ec8, { 1, 0 }
  uselistorder label %dec_label_pc_d3b0.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d6e4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d6c4, { 1, 0 }
  uselistorder label %dec_label_pc_d6b8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d6a0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d5b0, { 1, 0 }
  uselistorder label %dec_label_pc_d5b0thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_d598.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_d4b4, { 1, 0 }
  uselistorder label %dec_label_pc_d4b4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d4a4.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d43c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d3e4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d3c0, { 1, 0 }
  uselistorder label %dec_label_pc_d364, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d2c8.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_d318, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d2e0, { 1, 0 }
  uselistorder label %dec_label_pc_d288, { 1, 0 }
}

define i32 @function_d774(i32 %arg1) local_unnamed_addr {
dec_label_pc_d774:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-208 = alloca i32, align 4
  %stack_var_-4304 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-8412 = alloca i32, align 4
  %stack_var_-8356 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d774 = load i32, i32* @r4, align 4
  store i32 %v3_d774, i32* %stack_var_-36, align 4
  %v6_d774 = load i32, i32* @r5, align 4
  %v9_d774 = load i32, i32* @r6, align 4
  %v12_d774 = load i32, i32* @r7, align 4
  %v15_d774 = load i32, i32* @r8, align 4
  %v18_d774 = load i32, i32* @sb, align 4
  %v21_d774 = load i32, i32* @sl, align 4
  %v24_d774 = load i32, i32* @fp, align 4
  %v2_d784 = call i32 @function_11844(i32* null)
  store i32 %v2_d784, i32* @r7, align 4
  %v0_d78c = call i32 @function_115a0()
  %v7_d790 = icmp eq i32 %v0_d78c, -1
  %. = zext i1 %v7_d790 to i32
  %tmp141 = icmp slt i32 %v0_d78c, 1
  %storemerge108 = select i1 %tmp141, i32 %., i32 1
  store i32 %storemerge108, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1c5e4.63 to i32), i32* %r3.global-to-local, align 4
  %v2_d7ac = icmp eq i32 %storemerge108, 0
  store i32 %v0_d78c, i32* @global_var_1c5e4.63, align 4
  br i1 %v2_d7ac, label %dec_label_pc_d7c4, label %dec_label_pc_d7b8

dec_label_pc_d7b8:                                ; preds = %dec_label_pc_da58, %dec_label_pc_d930, %dec_label_pc_d774
  %v29_d7c0 = phi i32 [ %v3_d9e4, %dec_label_pc_d930 ], [ %v0_d78c, %dec_label_pc_d774 ], [ 0, %dec_label_pc_da58 ]
  %v2_d7c0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d7c0, i32* @r4, align 4
  store i32 %v6_d774, i32* @r5, align 4
  store i32 %v9_d774, i32* @r6, align 4
  store i32 %v12_d774, i32* @r7, align 4
  store i32 %v15_d774, i32* @r8, align 4
  store i32 %v18_d774, i32* @sb, align 4
  store i32 %v21_d774, i32* @sl, align 4
  store i32 %v24_d774, i32* @fp, align 4
  ret i32 %v29_d7c0

dec_label_pc_d7c4:                                ; preds = %dec_label_pc_d774
  %v2_d7c4 = ptrtoint i32* %stack_var_-220 to i32
  store i32 2, i32* @r6, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v1_d7dc = call i32 @function_d1d8(i32 5888)
  store i32 %v2_d7c4, i32* %ip.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_d7e8 = load i32, i32* @r6, align 4
  %v0_d7f0 = load i32, i32* @r5, align 4
  store i32 %v0_d7f0, i32* %r2.global-to-local, align 4
  %v3_d7fc = call i32 @function_11e8c(i32 %v0_d7e8, i32 1, i32 %v0_d7f0)
  %v7_d800 = icmp eq i32 %v3_d7fc, -1
  store i32 %v3_d7fc, i32* @r4, align 4
  br i1 %v7_d800, label %dec_label_pc_d828, label %dec_label_pc_d80c

dec_label_pc_d80c:                                ; preds = %dec_label_pc_d7c4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d818 = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_d818 = call i32 @function_11cbc(i32 %v3_d7fc, %sockaddr* %v3_d818, i32 16)
  %v0_d81c = load i32, i32* @r4, align 4
  %v2_d824 = call i32 @function_11d70(i32 %v0_d81c, i32 1)
  br label %dec_label_pc_d828

dec_label_pc_d828:                                ; preds = %dec_label_pc_d7c4, %dec_label_pc_d80c
  %v1_d82c = call i32 @function_d1d8(i32 5632)
  store i32 %v2_d7c4, i32* %ip.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_d838 = load i32, i32* @r6, align 4
  %v0_d840 = load i32, i32* @r5, align 4
  store i32 %v0_d840, i32* %r2.global-to-local, align 4
  %v3_d84c = call i32 @function_11e8c(i32 %v0_d838, i32 1, i32 %v0_d840)
  %v7_d850 = icmp eq i32 %v3_d84c, -1
  store i32 %v3_d84c, i32* @r4, align 4
  br i1 %v7_d850, label %dec_label_pc_d878, label %dec_label_pc_d85c

dec_label_pc_d85c:                                ; preds = %dec_label_pc_d828
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d868 = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_d868 = call i32 @function_11cbc(i32 %v3_d84c, %sockaddr* %v3_d868, i32 16)
  %v0_d86c = load i32, i32* @r4, align 4
  %v2_d874 = call i32 @function_11d70(i32 %v0_d86c, i32 1)
  br label %dec_label_pc_d878

dec_label_pc_d878:                                ; preds = %dec_label_pc_d828, %dec_label_pc_d85c
  %v1_d880 = call i32 @function_d1d8(i32 58811)
  store i32 229, i32* %ip.global-to-local, align 4
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v0_d898 = load i32, i32* @r6, align 4
  %v0_d8a0 = load i32, i32* @r5, align 4
  store i32 %v0_d8a0, i32* %r2.global-to-local, align 4
  %v3_d8a8 = call i32 @function_11e8c(i32 %v0_d898, i32 1, i32 %v0_d8a0)
  %v7_d8ac = icmp eq i32 %v3_d8a8, -1
  store i32 %v3_d8a8, i32* @r4, align 4
  br i1 %v7_d8ac, label %dec_label_pc_d8d4, label %dec_label_pc_d8b8

dec_label_pc_d8b8:                                ; preds = %dec_label_pc_d878
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d8c4 = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_d8c4 = call i32 @function_11cbc(i32 %v3_d8a8, %sockaddr* %v3_d8c4, i32 16)
  %v0_d8c8 = load i32, i32* @r4, align 4
  %v2_d8d0 = call i32 @function_11d70(i32 %v0_d8c8, i32 1)
  br label %dec_label_pc_d8d4

dec_label_pc_d8d4:                                ; preds = %dec_label_pc_d878, %dec_label_pc_d8b8
  %v1_d8dc = call i32 @function_d1d8(i32 50951)
  store i32 199, i32* %ip.global-to-local, align 4
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v0_d8f4 = load i32, i32* @r6, align 4
  %v0_d8fc = load i32, i32* @r5, align 4
  store i32 %v0_d8fc, i32* %r2.global-to-local, align 4
  %v3_d904 = call i32 @function_11e8c(i32 %v0_d8f4, i32 1, i32 %v0_d8fc)
  %v7_d908 = icmp eq i32 %v3_d904, -1
  store i32 %v3_d904, i32* @r4, align 4
  br i1 %v7_d908, label %dec_label_pc_d930, label %dec_label_pc_d914

dec_label_pc_d914:                                ; preds = %dec_label_pc_d8d4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d920 = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_d920 = call i32 @function_11cbc(i32 %v3_d904, %sockaddr* %v3_d920, i32 16)
  %v0_d924 = load i32, i32* @r4, align 4
  %v2_d92c = call i32 @function_11d70(i32 %v0_d924, i32 1)
  br label %dec_label_pc_d930

dec_label_pc_d930:                                ; preds = %dec_label_pc_d8d4, %dec_label_pc_d914
  %v1_d934 = call i32 @function_129a8(i32 5)
  %v1_d93c = call i32 @function_12024(i32 4096)
  store i32 ptrtoint (i32* @global_var_1c5e0.68 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c544.70 to i32), i32* %r3.global-to-local, align 4
  store i32 %v1_d93c, i32* %r2.global-to-local, align 4
  %v0_d94c = load i32, i32* @r5, align 4
  %v1_d94c = trunc i32 %v0_d94c to i8
  %v3_d94c = inttoptr i32 %v1_d93c to i8*
  store i8 %v1_d94c, i8* %v3_d94c, align 1
  %v0_d954 = load i32, i32* %r2.global-to-local, align 4
  %v1_d954 = load i32, i32* %ip.global-to-local, align 4
  %v2_d954 = inttoptr i32 %v1_d954 to i32*
  store i32 %v0_d954, i32* %v2_d954, align 4
  %v0_d958 = load i32, i32* @r5, align 4
  %v1_d958 = load i32, i32* %r3.global-to-local, align 4
  %v2_d958 = inttoptr i32 %v1_d958 to i32*
  store i32 %v0_d958, i32* %v2_d958, align 4
  %v1_d95c = call i32 @function_10628(i32 15)
  %v1_d964 = call i32 @function_10628(i32 16)
  %v2_d968 = ptrtoint i32* %stack_var_-8356 to i32
  store i32 %v2_d968, i32* %stack_var_-8412, align 4
  %v0_d974 = load i32, i32* @r5, align 4
  %v2_d978 = inttoptr i32 %v0_d974 to i32*
  %v3_d978 = call i32 @function_10544(i32 15, i32* %v2_d978)
  %v1_d980 = add i32 %v2_d968, -44
  store i32 %v1_d980, i32* %r2.global-to-local, align 4
  store i32 %v1_d980, i32* @r0, align 4
  store i32 %v1_d980, i32* %stack_var_-8412, align 4
  %v2_d990 = inttoptr i32 %v1_d980 to i8*
  %v3_d990 = call i32 @function_10c98(i8* %v2_d990, i32 %v3_d978)
  store i32 %v1_d980, i32* %r3.global-to-local, align 4
  %v2_d998 = add i32 %v1_d980, %v3_d990
  store i32 %v2_d998, i32* @r4, align 4
  %v0_d99c = call i32 @function_115cc()
  %v2_d9a4 = ptrtoint i32* %stack_var_-80 to i32
  store i32 %v2_d9a4, i32* %r2.global-to-local, align 4
  %v3_d9ac = trunc i32 %v0_d99c to i8
  %v4_d9ac = call i32 @function_110d4(i8 %v3_d9ac, i32 10, i32 %v2_d9a4)
  %v0_d9b4 = load i32, i32* @r4, align 4
  store i32 %v0_d9b4, i32* @r0, align 4
  %v2_d9b8 = inttoptr i32 %v0_d9b4 to i8*
  %v3_d9b8 = call i32 @function_10c98(i8* %v2_d9b8, i32 %v4_d9ac)
  %v0_d9bc = load i32, i32* @r5, align 4
  %v0_d9c0 = load i32, i32* @r4, align 4
  %v2_d9c0 = add i32 %v0_d9c0, %v3_d9b8
  store i32 %v2_d9c0, i32* @r4, align 4
  %v2_d9c8 = inttoptr i32 %v0_d9bc to i32*
  %v3_d9c8 = call i32 @function_10544(i32 16, i32* %v2_d9c8)
  %v0_d9d0 = load i32, i32* @r4, align 4
  store i32 %v0_d9d0, i32* @r0, align 4
  %v2_d9d4 = inttoptr i32 %v0_d9d0 to i8*
  %v3_d9d4 = call i32 @function_10c98(i8* %v2_d9d4, i32 %v3_d9c8)
  %v0_d9d8 = load i32, i32* @r5, align 4
  store i32 %v3_d9d4, i32* @r6, align 4
  %v2_d9e0 = load i32, i32* %stack_var_-8412, align 4
  %v2_d9e4 = inttoptr i32 %v2_d9e0 to i8*
  %v3_d9e4 = call i32 @function_116a0(i8* %v2_d9e4, i32 %v0_d9d8)
  %v7_d9e8 = icmp eq i32 %v3_d9e4, -1
  br i1 %v7_d9e8, label %dec_label_pc_d7b8, label %dec_label_pc_d9f0

dec_label_pc_d9f0:                                ; preds = %dec_label_pc_d930
  %v1_d9f0 = call i32 @function_11574(i32 %v3_d9e4)
  %v1_d9f8 = call i32 @function_10570(i32 15)
  %v1_da00 = call i32 @function_10570(i32 16)
  store i32 ptrtoint (i32* @global_var_1c5e0.68 to i32), i32* %ip.global-to-local, align 4
  %v2_da0c = load i32, i32* @global_var_1c5e0.68, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_da14 = load i32, i32* %stack_var_-8412, align 4
  %v3_da18 = inttoptr i32 %v2_da14 to i8*
  %v4_da18 = call i32 @function_11768(i8* %v3_da18, i32 %v2_da0c, i32 4095)
  %v7_da1c = icmp eq i32 %v4_da18, -1
  br i1 %v7_da1c, label %.thread5, label %bb144

bb144:                                            ; preds = %dec_label_pc_d9f0
  %v3_da24 = load i32, i32* @global_var_1c5e0.68, align 4
  store i32 %v3_da24, i32* %r3.global-to-local, align 4
  %v1_da28 = load i32, i32* @r5, align 4
  %v2_da28 = trunc i32 %v1_da28 to i8
  %v5_da28 = add i32 %v3_da24, %v4_da18
  %v6_da28 = inttoptr i32 %v5_da28 to i8*
  store i8 %v2_da28, i8* %v6_da28, align 1
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_d9f0, %bb144
  %v2_da2c = load i32, i32* %stack_var_-8412, align 4
  store i32 %v2_da2c, i32* %r2.global-to-local, align 4
  %v0_da30 = load i32, i32* @r4, align 4
  %v1_da30 = load i32, i32* @r6, align 4
  %v2_da30 = sub i32 %v0_da30, %v2_da2c
  %v2_da38 = add i32 %v2_da30, %v1_da30
  store i32 %v2_da38, i32* @r1, align 4
  store i32 %v2_da2c, i32* @r0, align 4
  %v0_da44 = call i32 @function_10d10()
  %v0_da48 = load i32, i32* @r7, align 4
  store i32 %v0_da48, i32* @r4, align 4
  %v0_da4c = load i32, i32* @r5, align 4
  %v2_da50 = ptrtoint i32* %stack_var_-4304 to i32
  store i32 %v2_da50, i32* @sl, align 4
  store i32 400, i32* @r5, align 4
  %v2_db4c = ptrtoint i32* %stack_var_-208 to i32
  %v2_db50 = bitcast i32* %stack_var_-208 to i8*
  %v2_db9c = ptrtoint i32* %stack_var_-144 to i32
  %v2_dba0 = bitcast i32* %stack_var_-144 to i8*
  %v2_dc18 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_da58

dec_label_pc_da58:                                ; preds = %dec_label_pc_db10, %.thread5
  %stack_var_-8404.0 = phi i32 [ %v0_da4c, %.thread5 ], [ %stack_var_-8404.3, %dec_label_pc_db10 ]
  %v1_da5c = call i32 @function_10628(i32 15)
  %v3_da68 = call i32 @function_10544(i32 15, i32* null)
  store i32 %v3_da68, i32* @r0, align 4
  %v1_da6c = call i32 @function_1197c(i32 %v3_da68)
  store i32 %v1_da6c, i32* @sb, align 4
  %v2_da70 = icmp eq i32 %v1_da6c, 0
  br i1 %v2_da70, label %dec_label_pc_d7b8, label %dec_label_pc_da78

dec_label_pc_da78:                                ; preds = %dec_label_pc_da58
  %v1_da7c = call i32 @function_10570(i32 15)
  %v0_da8068 = load i32, i32* @sb, align 4
  %v1_da8469 = inttoptr i32 %v0_da8068 to i32*
  %v2_da8470 = call i32 @function_11a78(i32* %v1_da8469)
  %v2_da8872 = icmp eq i32 %v2_da8470, 0
  br i1 %v2_da8872, label %dec_label_pc_db10, label %dec_label_pc_da90.preheader

dec_label_pc_da90.preheader:                      ; preds = %dec_label_pc_da78, %dec_label_pc_da80.backedge
  %v0_da9081 = phi i32 [ %v2_da84, %dec_label_pc_da80.backedge ], [ %v2_da8470, %dec_label_pc_da78 ]
  %stack_var_-8404.173 = phi i32 [ %stack_var_-8404.1.be, %dec_label_pc_da80.backedge ], [ %stack_var_-8404.0, %dec_label_pc_da78 ]
  br label %dec_label_pc_da90

dec_label_pc_da90:                                ; preds = %dec_label_pc_da90.preheader, %dec_label_pc_daf8
  %v0_daa0 = phi i32 [ %v2_db04, %dec_label_pc_daf8 ], [ %v0_da9081, %dec_label_pc_da90.preheader ]
  %stack_var_-8404.2 = phi i32 [ %v1_dab4, %dec_label_pc_daf8 ], [ %stack_var_-8404.173, %dec_label_pc_da90.preheader ]
  %v1_da90 = add i32 %v0_daa0, 11
  %v2_da90 = inttoptr i32 %v1_da90 to i8*
  %v3_da90 = load i8, i8* %v2_da90, align 1
  %v4_da90 = zext i8 %v3_da90 to i32
  %v1_da94 = add nsw i32 %v4_da90, -48
  store i32 %v1_da94, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_da94, 9
  br i1 %tmp, label %dec_label_pc_da80.backedge, label %dec_label_pc_daa0

dec_label_pc_daa0:                                ; preds = %dec_label_pc_da90
  store i32 %v1_da90, i32* @r6, align 4
  %v2_daa8 = call i32 @function_12768(i8* %v2_da90)
  %v0_dab0 = load i32, i32* @r5, align 4
  %v1_dab4 = add i32 %stack_var_-8404.2, 1
  store i32 %v1_dab4, i32* %r3.global-to-local, align 4
  store i32 %v2_daa8, i32* @r7, align 4
  %v5_dac0 = icmp slt i32 %v0_dab0, %v2_daa8
  %v2_db20 = call i32 @function_11844(i32* null)
  br i1 %v5_dac0, label %dec_label_pc_db1c, label %dec_label_pc_dac4

dec_label_pc_dac4:                                ; preds = %dec_label_pc_daa0
  %v0_dacc = load i32, i32* @r4, align 4
  %v2_dacc = sub i32 %v2_db20, %v0_dacc
  %v7_dad4 = icmp slt i32 %v2_dacc, 601
  br i1 %v7_dad4, label %dec_label_pc_dadc, label %.thread6

.thread6:                                         ; preds = %dec_label_pc_dac4
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_da80.backedge

dec_label_pc_dadc:                                ; preds = %dec_label_pc_dac4
  %v0_dadc = load i32, i32* @r7, align 4
  %v7_dae0 = icmp slt i32 %v0_dadc, 401
  br i1 %v7_dae0, label %dec_label_pc_da80.backedge, label %dec_label_pc_dae4

dec_label_pc_dae4:                                ; preds = %dec_label_pc_dadc
  %v2_daec = call i32 @function_112fc(i32 %v1_dab4, i32 10)
  %v2_daf0 = icmp eq i32 %v2_daec, 0
  br i1 %v2_daf0, label %dec_label_pc_daf8, label %dec_label_pc_da80.backedge

dec_label_pc_daf8:                                ; preds = %dec_label_pc_dae4
  %v1_dafc = call i32 @function_129a8(i32 1)
  %v0_db00 = load i32, i32* @sb, align 4
  %v1_db04 = inttoptr i32 %v0_db00 to i32*
  %v2_db04 = call i32 @function_11a78(i32* %v1_db04)
  %v2_db08 = icmp eq i32 %v2_db04, 0
  br i1 %v2_db08, label %dec_label_pc_db10, label %dec_label_pc_da90

dec_label_pc_db10:                                ; preds = %dec_label_pc_da80.backedge, %dec_label_pc_daf8, %dec_label_pc_da78
  %stack_var_-8404.3 = phi i32 [ %stack_var_-8404.0, %dec_label_pc_da78 ], [ %v1_dab4, %dec_label_pc_daf8 ], [ %stack_var_-8404.1.be, %dec_label_pc_da80.backedge ]
  %v0_db10 = load i32, i32* @sb, align 4
  %v1_db14 = inttoptr i32 %v0_db10 to i32*
  %v2_db14 = call i32 @function_118c8(i32* %v1_db14)
  br label %dec_label_pc_da58

dec_label_pc_db1c:                                ; preds = %dec_label_pc_daa0
  %v1_db2c = call i32 @function_10628(i32 15)
  %v1_db34 = call i32 @function_10628(i32 16)
  %v3_db40 = call i32 @function_10544(i32 15, i32* null)
  store i32 %v2_db4c, i32* @r0, align 4
  %v3_db50 = call i32 @function_10c98(i8* %v2_db50, i32 %v3_db40)
  store i32 %v2_db4c, i32* %ip.global-to-local, align 4
  %v2_db5c = add i32 %v3_db50, %v2_db4c
  %v0_db60 = load i32, i32* @r6, align 4
  store i32 %v2_db5c, i32* @r0, align 4
  %v2_db68 = inttoptr i32 %v2_db5c to i8*
  %v3_db68 = call i32 @function_10c98(i8* %v2_db68, i32 %v0_db60)
  %v3_db78 = call i32 @function_10544(i32 16, i32* null)
  %v2_db80 = add i32 %v3_db68, %v2_db5c
  store i32 %v2_db80, i32* @r0, align 4
  %v2_db84 = inttoptr i32 %v2_db80 to i8*
  %v3_db84 = call i32 @function_10c98(i8* %v2_db84, i32 %v3_db78)
  %v3_db90 = call i32 @function_10544(i32 15, i32* null)
  store i32 %v2_db9c, i32* @r0, align 4
  %v3_dba0 = call i32 @function_10c98(i8* %v2_dba0, i32 %v3_db90)
  %v2_dbac = add i32 %v3_dba0, %v2_db9c
  store i32 %v2_dbac, i32* @r5, align 4
  store i32 %v2_dbac, i32* @r0, align 4
  %v0_dbb4 = load i32, i32* @r6, align 4
  %v2_dbb8 = inttoptr i32 %v2_dbac to i8*
  %v3_dbb8 = call i32 @function_10c98(i8* %v2_dbb8, i32 %v0_dbb4)
  store i32 %v3_dbb8, i32* @r4, align 4
  %v3_dbc8 = call i32 @function_10544(i32 32, i32* null)
  %v0_dbd0 = load i32, i32* @r5, align 4
  %v1_dbd0 = load i32, i32* @r4, align 4
  %v2_dbd0 = add i32 %v1_dbd0, %v0_dbd0
  store i32 %v2_dbd0, i32* @r0, align 4
  %v2_dbd4 = inttoptr i32 %v2_dbd0 to i8*
  %v3_dbd4 = call i32 @function_10c98(i8* %v2_dbd4, i32 %v3_dbc8)
  %v1_dbdc = call i32 @function_10570(i32 15)
  %v1_dbe4 = call i32 @function_10570(i32 16)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_dbf8 = load i32, i32* %stack_var_-8412, align 4
  %v4_dbfc = call i32 @function_11768(i8* %v2_db50, i32 %v2_dbf8, i32 4095)
  %v7_dc04 = icmp eq i32 %v4_dbfc, -1
  store i32 %v4_dbfc, i32* @r5, align 4
  store i32 -8364, i32* @r2, align 4
  br i1 %v7_dc04, label %dec_label_pc_dccc, label %dec_label_pc_dc14

dec_label_pc_dc14:                                ; preds = %dec_label_pc_db1c
  store i32 %v2_dc18, i32* %ip.global-to-local, align 4
  %v2_dc1c = add i32 %v4_dbfc, %v2_dc18
  store i32 %v2_dc1c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_dc24 = add i32 %v2_dc1c, -8364
  %v5_dc24 = inttoptr i32 %v4_dc24 to i8*
  store i8 0, i8* %v5_dc24, align 1
  %v1_dc2c = call i32 @function_10628(i32 33)
  %v0_dc30 = load i32, i32* @r4, align 4
  %v2_dc38 = inttoptr i32 %v0_dc30 to i32*
  %v3_dc38 = call i32 @function_10544(i32 33, i32* %v2_dc38)
  %v0_dc3c = load i32, i32* @r5, align 4
  %v1_dc3c = add i32 %v0_dc3c, -1
  store i32 %v1_dc3c, i32* @r1, align 4
  store i32 %v3_dc38, i32* %r2.global-to-local, align 4
  %v2_dc44 = load i32, i32* %stack_var_-8412, align 4
  %v3_dc48 = inttoptr i32 %v2_dc44 to i8*
  %v4_dc48 = call i32 @function_10fc4(i8* %v3_dc48, i32 %v1_dc3c, i32 %v3_dc38)
  %v7_dc4c = icmp eq i32 %v4_dc48, -1
  br i1 %v7_dc4c, label %dec_label_pc_dc68, label %dec_label_pc_dc54

dec_label_pc_dc54:                                ; preds = %dec_label_pc_dc14
  %v2_dc54 = load i32, i32* %stack_var_-8412, align 4
  %v1_dc58 = inttoptr i32 %v2_dc54 to i8*
  %v2_dc58 = call i32 @function_11870(i8* %v1_dc58)
  %v0_dc5c = load i32, i32* @r7, align 4
  %v2_dc64 = call i32 @function_11674(i32 %v0_dc5c, i32 9)
  br label %dec_label_pc_dc68

dec_label_pc_dc68:                                ; preds = %dec_label_pc_dc14, %dec_label_pc_dc54
  %v1_dc6c = call i32 @function_10570(i32 33)
  %v0_dc70 = call i32 @function_115cc()
  %v0_dc74 = load i32, i32* @r7, align 4
  %v9_dc74 = icmp eq i32 %v0_dc74, %v0_dc70
  br i1 %v9_dc74, label %dec_label_pc_dca0, label %dec_label_pc_dc7c

dec_label_pc_dc7c:                                ; preds = %dec_label_pc_dc68
  %v0_dc7c = call i32 @function_115f8()
  %v0_dc80 = load i32, i32* @r7, align 4
  %v9_dc80 = icmp eq i32 %v0_dc80, %v0_dc7c
  br i1 %v9_dc80, label %dec_label_pc_dca0, label %dec_label_pc_dc88

dec_label_pc_dc88:                                ; preds = %dec_label_pc_dc7c
  store i32 ptrtoint (i32* @global_var_1c5e0.68 to i32), i32* %r2.global-to-local, align 4
  %v2_dc8c = load i32, i32* %stack_var_-8412, align 4
  %v2_dc90 = load i32, i32* @global_var_1c5e0.68, align 4
  %v3_dc94 = inttoptr i32 %v2_dc8c to i8*
  %v4_dc94 = call i32 @function_11050(i8* %v3_dc94, i32 %v2_dc90, i32 ptrtoint (i32* @global_var_1c5e0.68 to i32))
  %v2_dc98 = icmp eq i32 %v4_dc94, 0
  br i1 %v2_dc98, label %dec_label_pc_dcac, label %dec_label_pc_dc88.dec_label_pc_dca0_crit_edge

dec_label_pc_dc88.dec_label_pc_dca0_crit_edge:    ; preds = %dec_label_pc_dc88
  %v0_dca4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_dca0

dec_label_pc_dca0:                                ; preds = %dec_label_pc_dc88.dec_label_pc_dca0_crit_edge, %dec_label_pc_dc7c, %dec_label_pc_dc68
  %v0_dca4 = phi i32 [ %v0_dca4.pre, %dec_label_pc_dc88.dec_label_pc_dca0_crit_edge ], [ %v0_dc7c, %dec_label_pc_dc7c ], [ %v0_dc70, %dec_label_pc_dc68 ]
  store i32 %v2_db20, i32* @r4, align 4
  store i32 %v0_dca4, i32* @r5, align 4
  br label %dec_label_pc_da80.backedge

dec_label_pc_dcac:                                ; preds = %dec_label_pc_dc88
  %v2_dcb0 = load i32, i32* %stack_var_-8412, align 4
  %v2_dcb4 = inttoptr i32 %v2_dcb0 to i8*
  %v3_dcb4 = call i32 @function_116a0(i8* %v2_dcb4, i32 0)
  %v7_dcb8 = icmp eq i32 %v3_dcb4, -1
  store i32 %v3_dcb4, i32* @r4, align 4
  br i1 %v7_dcb8, label %dec_label_pc_dec0, label %dec_label_pc_dcc4

dec_label_pc_dcc4:                                ; preds = %dec_label_pc_dcac, %dec_label_pc_dec0
  %v0_dcc4 = phi i32 [ %v3_dcb4, %dec_label_pc_dcac ], [ %v0_dcc4.pre, %dec_label_pc_dec0 ]
  %v1_dcc8 = call i32 @function_11574(i32 %v0_dcc4)
  br label %dec_label_pc_dccc

dec_label_pc_dccc:                                ; preds = %dec_label_pc_db1c, %dec_label_pc_dcc4
  %v3_dcd8 = call i32 @function_116a0(i8* %v2_db50, i32 0)
  %v7_dcdc = icmp eq i32 %v3_dcd8, -1
  store i32 %v3_dcd8, i32* @fp, align 4
  br i1 %v7_dcdc, label %dec_label_pc_de68, label %dec_label_pc_dce8

dec_label_pc_dce8:                                ; preds = %dec_label_pc_dccc
  %v1_dcec = call i32 @function_10628(i32 20)
  %v1_dcf4 = call i32 @function_10628(i32 21)
  %v1_dcfc = call i32 @function_10628(i32 22)
  %v3_dd0c = call i32 @function_10544(i32 20, i32* nonnull %stack_var_-40)
  store i32 %v3_dd0c, i32* @r5, align 4
  %v3_dd20 = call i32 @function_10544(i32 21, i32* nonnull %stack_var_-44)
  store i32 %v3_dd20, i32* @r6, align 4
  %v3_dd34 = call i32 @function_10544(i32 22, i32* nonnull %stack_var_-48)
  store i32 %v3_dd34, i32* @r8, align 4
  br label %dec_label_pc_dd3c

dec_label_pc_dd3c:                                ; preds = %dec_label_pc_ddc4, %.thread29, %dec_label_pc_dd8c, %dec_label_pc_dce8
  %v0_dd3c = load i32, i32* @fp, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_dd48 = call i32 @function_1173c(i32 %v0_dd3c, i32* nonnull %stack_var_-4304, i32 4096)
  %tmp145 = icmp slt i32 %v4_dd48, 1
  br i1 %tmp145, label %dec_label_pc_de9c, label %dec_label_pc_dd54

dec_label_pc_dd54:                                ; preds = %dec_label_pc_dd3c
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v3_dd58 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dd58, i32* @r4, align 4
  %v5_dd60 = icmp slt i32 %v4_dd48, %v3_dd58
  br i1 %v5_dd60, label %dec_label_pc_dd70, label %dec_label_pc_dde0.lr.ph

dec_label_pc_dde0.lr.ph:                          ; preds = %dec_label_pc_dd54
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_dde0.pre = load i32, i32* @r5, align 4
  %v1_dde4.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_dde0

dec_label_pc_dd70:                                ; preds = %dec_label_pc_ddd8.backedge, %dec_label_pc_dd54
  store i32 %v2_d7c4, i32* %ip.global-to-local, align 4
  %v3_dd74 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_dd74, i32* @r4, align 4
  %v5_dd7c = icmp slt i32 %v4_dd48, %v3_dd74
  br i1 %v5_dd7c, label %dec_label_pc_dd8c, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_dd70
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_de0c52 = icmp eq i32 %v4_dd48, 0
  br i1 %v2_de0c52, label %dec_label_pc_dd8c, label %dec_label_pc_de14.lr.ph

dec_label_pc_de14.lr.ph:                          ; preds = %.thread23
  %v0_de14.pre = load i32, i32* @r6, align 4
  %v1_de18.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_de14

dec_label_pc_dd8c:                                ; preds = %dec_label_pc_de0c.backedge, %.thread23, %dec_label_pc_dd70
  %v3_dd90 = load i32, i32* %stack_var_-48, align 4
  %v5_dd98 = icmp slt i32 %v4_dd48, %v3_dd90
  br i1 %v5_dd98, label %dec_label_pc_dd3c, label %.thread29

.thread29:                                        ; preds = %dec_label_pc_dd8c
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_dda461 = icmp eq i32 %v4_dd48, 0
  br i1 %v2_dda461, label %dec_label_pc_dd3c, label %dec_label_pc_ddac.lr.ph

dec_label_pc_ddac.lr.ph:                          ; preds = %.thread29
  %v0_ddac.pre = load i32, i32* @r8, align 4
  %v1_ddb0.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_ddac

dec_label_pc_ddac:                                ; preds = %dec_label_pc_ddc4, %dec_label_pc_ddac.lr.ph
  %v0_dda4.in = phi i32 [ %v4_dd48, %dec_label_pc_ddac.lr.ph ], [ %v0_dda4, %dec_label_pc_ddc4 ]
  %v0_ddc4 = phi i32 [ 0, %dec_label_pc_ddac.lr.ph ], [ %v1_ddc4, %dec_label_pc_ddc4 ]
  %v0_ddb8 = phi i32 [ 0, %dec_label_pc_ddac.lr.ph ], [ %v1_ddb8., %dec_label_pc_ddc4 ]
  %v0_dda4 = add i32 %v0_dda4.in, -1
  %v2_ddac = add i32 %v0_ddb8, %v0_ddac.pre
  %v3_ddac = inttoptr i32 %v2_ddac to i8*
  %v4_ddac = load i8, i8* %v3_ddac, align 1
  %v6_ddac = zext i8 %v4_ddac to i32
  store i32 %v6_ddac, i32* %r2.global-to-local, align 4
  %v2_ddb0 = add i32 %v0_ddc4, %v1_ddb0.pre
  %v3_ddb0 = inttoptr i32 %v2_ddb0 to i8*
  %v4_ddb0 = load i8, i8* %v3_ddb0, align 1
  %v6_ddb0 = zext i8 %v4_ddb0 to i32
  store i32 %v6_ddb0, i32* %r3.global-to-local, align 4
  %v9_ddb4 = icmp eq i8 %v4_ddb0, %v4_ddac
  %v1_ddb8 = add i32 %v0_ddb8, 1
  %v1_ddb8. = select i1 %v9_ddb4, i32 %v1_ddb8, i32 0
  br i1 %v9_ddb4, label %dec_label_pc_de34, label %dec_label_pc_ddc4

dec_label_pc_ddc4:                                ; preds = %dec_label_pc_de34, %dec_label_pc_ddac
  %v1_ddc4 = add i32 %v0_ddc4, 1
  store i32 %v1_ddc4, i32* %ip.global-to-local, align 4
  %v2_dda4 = icmp eq i32 %v0_dda4, 0
  br i1 %v2_dda4, label %dec_label_pc_dd3c, label %dec_label_pc_ddac

dec_label_pc_ddcc:                                ; preds = %dec_label_pc_dde0
  %v9_ddcc = icmp eq i32 %v3_dd58, %v1_ddec.
  br i1 %v9_ddcc, label %dec_label_pc_de3c, label %dec_label_pc_ddd8.backedge

dec_label_pc_ddd8.backedge:                       ; preds = %dec_label_pc_dde0, %dec_label_pc_ddcc
  %storemerge74 = add i32 %storemerge74.in, 1
  %v2_ddd8 = icmp eq i32 %v0_ddd8, 0
  br i1 %v2_ddd8, label %dec_label_pc_dd70, label %dec_label_pc_dde0

dec_label_pc_dde0:                                ; preds = %dec_label_pc_ddd8.backedge, %dec_label_pc_dde0.lr.ph
  %v0_ddd8.in = phi i32 [ %v4_dd48, %dec_label_pc_dde0.lr.ph ], [ %v0_ddd8, %dec_label_pc_ddd8.backedge ]
  %storemerge74.in = phi i32 [ 0, %dec_label_pc_dde0.lr.ph ], [ %storemerge74, %dec_label_pc_ddd8.backedge ]
  %v0_ddec = phi i32 [ 0, %dec_label_pc_dde0.lr.ph ], [ %v1_ddec., %dec_label_pc_ddd8.backedge ]
  %v0_ddd8 = add i32 %v0_ddd8.in, -1
  %v2_dde0 = add i32 %v0_ddec, %v0_dde0.pre
  %v3_dde0 = inttoptr i32 %v2_dde0 to i8*
  %v4_dde0 = load i8, i8* %v3_dde0, align 1
  %v6_dde0 = zext i8 %v4_dde0 to i32
  store i32 %v6_dde0, i32* %r2.global-to-local, align 4
  %v2_dde4 = add i32 %storemerge74.in, %v1_dde4.pre
  %v3_dde4 = inttoptr i32 %v2_dde4 to i8*
  %v4_dde4 = load i8, i8* %v3_dde4, align 1
  %v6_dde4 = zext i8 %v4_dde4 to i32
  store i32 %v6_dde4, i32* %r3.global-to-local, align 4
  %v9_dde8 = icmp eq i8 %v4_dde4, %v4_dde0
  %v1_ddec = add i32 %v0_ddec, 1
  %v1_ddec. = select i1 %v9_dde8, i32 %v1_ddec, i32 0
  store i32 %v1_ddec., i32* %ip.global-to-local, align 4
  br i1 %v9_dde8, label %dec_label_pc_ddcc, label %dec_label_pc_ddd8.backedge

dec_label_pc_de00:                                ; preds = %dec_label_pc_de14
  %v9_de00 = icmp eq i32 %v3_dd74, %v1_de20.
  br i1 %v9_de00, label %dec_label_pc_de3c, label %dec_label_pc_de0c.backedge

dec_label_pc_de0c.backedge:                       ; preds = %dec_label_pc_de14, %dec_label_pc_de00
  %storemerge = add i32 %storemerge.in, 1
  %v2_de0c = icmp eq i32 %v0_de0c, 0
  br i1 %v2_de0c, label %dec_label_pc_dd8c, label %dec_label_pc_de14

dec_label_pc_de14:                                ; preds = %dec_label_pc_de0c.backedge, %dec_label_pc_de14.lr.ph
  %v0_de0c.in = phi i32 [ %v4_dd48, %dec_label_pc_de14.lr.ph ], [ %v0_de0c, %dec_label_pc_de0c.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_de14.lr.ph ], [ %storemerge, %dec_label_pc_de0c.backedge ]
  %v0_de20 = phi i32 [ 0, %dec_label_pc_de14.lr.ph ], [ %v1_de20., %dec_label_pc_de0c.backedge ]
  %v0_de0c = add i32 %v0_de0c.in, -1
  %v2_de14 = add i32 %v0_de20, %v0_de14.pre
  %v3_de14 = inttoptr i32 %v2_de14 to i8*
  %v4_de14 = load i8, i8* %v3_de14, align 1
  %v6_de14 = zext i8 %v4_de14 to i32
  store i32 %v6_de14, i32* %r2.global-to-local, align 4
  %v2_de18 = add i32 %storemerge.in, %v1_de18.pre
  %v3_de18 = inttoptr i32 %v2_de18 to i8*
  %v4_de18 = load i8, i8* %v3_de18, align 1
  %v6_de18 = zext i8 %v4_de18 to i32
  store i32 %v6_de18, i32* %r3.global-to-local, align 4
  %v9_de1c = icmp eq i8 %v4_de18, %v4_de14
  %v1_de20 = add i32 %v0_de20, 1
  %v1_de20. = select i1 %v9_de1c, i32 %v1_de20, i32 0
  store i32 %v1_de20., i32* %ip.global-to-local, align 4
  br i1 %v9_de1c, label %dec_label_pc_de00, label %dec_label_pc_de0c.backedge

dec_label_pc_de34:                                ; preds = %dec_label_pc_ddac
  %v9_de34 = icmp eq i32 %v3_dd90, %v1_ddb8.
  br i1 %v9_de34, label %dec_label_pc_de3c, label %dec_label_pc_ddc4

dec_label_pc_de3c:                                ; preds = %dec_label_pc_ddcc, %dec_label_pc_de00, %dec_label_pc_de34
  %v1_de40 = call i32 @function_10570(i32 20)
  %v1_de48 = call i32 @function_10570(i32 21)
  %v1_de50 = call i32 @function_10570(i32 22)
  %v0_de54 = load i32, i32* @fp, align 4
  %v1_de58 = call i32 @function_11574(i32 %v0_de54)
  %v0_de5c = load i32, i32* @r7, align 4
  %v2_de64 = call i32 @function_11674(i32 %v0_de5c, i32 9)
  br label %dec_label_pc_de68

dec_label_pc_de68:                                ; preds = %dec_label_pc_dccc, %dec_label_pc_de9c, %dec_label_pc_de3c
  store i32 64, i32* @r1, align 4
  store i32 %v2_db4c, i32* @r0, align 4
  %v0_de74 = call i32 @function_10d10()
  store i32 %v2_db9c, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_de84 = call i32 @function_10d10()
  %v1_de8c = call i32 @function_129a8(i32 1)
  store i32 %v2_db20, i32* @r4, align 4
  %v0_de94 = load i32, i32* @r7, align 4
  store i32 %v0_de94, i32* @r5, align 4
  br label %dec_label_pc_da80.backedge

dec_label_pc_da80.backedge:                       ; preds = %dec_label_pc_dae4, %dec_label_pc_dadc, %dec_label_pc_da90, %dec_label_pc_de68, %dec_label_pc_dca0, %.thread6
  %stack_var_-8404.1.be = phi i32 [ %v1_dab4, %dec_label_pc_de68 ], [ %v1_dab4, %dec_label_pc_dca0 ], [ %v1_dab4, %.thread6 ], [ %stack_var_-8404.2, %dec_label_pc_da90 ], [ %v1_dab4, %dec_label_pc_dadc ], [ %v1_dab4, %dec_label_pc_dae4 ]
  %v0_da80 = load i32, i32* @sb, align 4
  %v1_da84 = inttoptr i32 %v0_da80 to i32*
  %v2_da84 = call i32 @function_11a78(i32* %v1_da84)
  %v2_da88 = icmp eq i32 %v2_da84, 0
  br i1 %v2_da88, label %dec_label_pc_db10, label %dec_label_pc_da90.preheader

dec_label_pc_de9c:                                ; preds = %dec_label_pc_dd3c
  %v1_dea0 = call i32 @function_10570(i32 20)
  %v1_dea8 = call i32 @function_10570(i32 21)
  %v1_deb0 = call i32 @function_10570(i32 22)
  %v0_deb4 = load i32, i32* @fp, align 4
  %v1_deb8 = call i32 @function_11574(i32 %v0_deb4)
  br label %dec_label_pc_de68

dec_label_pc_dec0:                                ; preds = %dec_label_pc_dcac
  %v0_dec0 = load i32, i32* @r7, align 4
  %v2_dec8 = call i32 @function_11674(i32 %v0_dec0, i32 9)
  %v0_dcc4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dcc4

; uselistorder directives
  uselistorder i32 %v2_da84, { 1, 0 }
  uselistorder i32 %stack_var_-8404.1.be, { 1, 0 }
  uselistorder i32 %v1_de20., { 2, 1, 0 }
  uselistorder i1 %v9_de1c, { 1, 0 }
  uselistorder i32 %v0_de20, { 1, 0 }
  uselistorder i32 %v1_ddec., { 2, 1, 0 }
  uselistorder i1 %v9_dde8, { 1, 0 }
  uselistorder i32 %v0_ddec, { 1, 0 }
  uselistorder i32 %v1_ddc4, { 1, 0 }
  uselistorder i32 %v1_ddb8., { 1, 0 }
  uselistorder i1 %v9_ddb4, { 1, 0 }
  uselistorder i32 %v0_ddb8, { 1, 0 }
  uselistorder i32 %v0_ddc4, { 1, 0 }
  uselistorder i32 %v4_dd48, { 0, 2, 1, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 %v3_dcd8, { 1, 0 }
  uselistorder i32 %v3_dcb4, { 1, 2, 0 }
  uselistorder i32 %v4_dbfc, { 1, 2, 0 }
  uselistorder i32 %v2_db04, { 1, 0 }
  uselistorder i32 %v1_dab4, { 0, 1, 5, 4, 3, 2, 7, 8, 6 }
  uselistorder i32 %stack_var_-8404.0, { 1, 0 }
  uselistorder i32 %v2_db9c, { 1, 0, 2 }
  uselistorder i32 %v2_db4c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_da2c, { 1, 0, 2 }
  uselistorder i32 %v4_da18, { 1, 0 }
  uselistorder i32 %v3_d9e4, { 2, 0, 1 }
  uselistorder i32 %v1_d980, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_d904, { 2, 1, 0 }
  uselistorder i32 %v3_d8a8, { 1, 2, 0 }
  uselistorder i32 %v3_d84c, { 1, 2, 0 }
  uselistorder i32 %v3_d7fc, { 1, 2, 0 }
  uselistorder i32 %storemerge108, { 1, 0 }
  uselistorder i32 %v0_d78c, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-40, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 0 }
  uselistorder i32* %ip.global-to-local, { 15, 3, 4, 1, 0, 5, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 (i32*)* @function_11a78, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_1197c, { 2, 1, 0 }
  uselistorder i32* @global_var_1c5e0.68, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_1c5e4.63, { 0, 2, 1 }
  uselistorder label %dec_label_pc_da80.backedge, { 3, 4, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_de68, { 1, 2, 0 }
  uselistorder label %dec_label_pc_de3c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_dccc, { 1, 0 }
  uselistorder label %dec_label_pc_dcc4, { 1, 0 }
  uselistorder label %dec_label_pc_dc68, { 1, 0 }
  uselistorder label %dec_label_pc_da90, { 1, 0 }
  uselistorder label %dec_label_pc_da90.preheader, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %dec_label_pc_d930, { 1, 0 }
  uselistorder label %dec_label_pc_d8d4, { 1, 0 }
  uselistorder label %dec_label_pc_d878, { 1, 0 }
  uselistorder label %dec_label_pc_d828, { 1, 0 }
}

define i32 @function_dedc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_dedc:
  store i32 ptrtoint (i32* @global_var_e064.72 to i32), i32* @global_var_1c3d0.74, align 4
  ret i32 %arg1
}

define i32 @function_def4(i32 %arg1) local_unnamed_addr {
dec_label_pc_def4:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_def4 = load i32, i32* @r4, align 4
  %v9_def4 = load i32, i32* @r6, align 4
  %v12_def4 = load i32, i32* @r7, align 4
  %v15_def4 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_df10 = call i32 @function_11e8c(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1c3c8.76 to i32), i32* @r6, align 4
  %v7_df18 = icmp eq i32 %v3_df10, -1
  store i32 %v3_df10, i32* @global_var_1c3c8.76, align 4
  br i1 %v7_df18, label %dec_label_pc_dfd8, label %dec_label_pc_df24

dec_label_pc_df24:                                ; preds = %dec_label_pc_def4
  %v0_df28 = load i32, i32* @r4, align 4
  %v6_df38 = call i32 @function_11e5c(i32 %v3_df10, i32 %v0_df28, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_df3c = load i32, i32* @global_var_1c3c8.76, align 4
  store i32 %v2_df3c, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_df4c = call i32 @function_114b0(i32 %v2_df3c, i32 3)
  %v1_df54 = or i32 %v2_df4c, 2048
  store i32 %v1_df54, i32* @r2, align 4
  %v0_df58 = load i32, i32* @r4, align 4
  %v2_df5c = call i32 @function_114b0(i32 %v0_df58, i32 4)
  store i32 ptrtoint (i8** @global_var_1c3d4.78 to i32), i32* @r8, align 4
  %v2_df64 = load i8, i8* bitcast (i8** @global_var_1c3d4.78 to i8*), align 4
  %v2_df68 = icmp eq i8 %v2_df64, 0
  br i1 %v2_df68, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_df24
  br label %bb

.thread:                                          ; preds = %dec_label_pc_df24
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_dfa0 = call i32 @function_11b48()
  %v0_dfa4 = load i32, i32* @r5, align 4
  %v2_dfa4 = inttoptr i32 %v0_dfa0 to i32*
  store i32 %v0_dfa4, i32* %v2_dfa4, align 4
  %v2_dfa8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_dfa8, i32* @r7, align 4
  store i32 %v0_dfa0, i32* @r4, align 4
  %v2_dfb4 = load i32, i32* @global_var_1c3c8.76, align 4
  %v3_dfbc = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_dfbc = call i32 @function_11cbc(i32 %v2_dfb4, %sockaddr* %v3_dfbc, i32 16)
  %v7_dfc0 = icmp eq i32 %v4_dfbc, -1
  br i1 %v7_dfc0, label %dec_label_pc_dfe0, label %dec_label_pc_dfc8

dec_label_pc_dfc8:                                ; preds = %bb
  %v2_dfd0 = load i32, i32* @global_var_1c3c8.76, align 4
  %v2_dfd4 = call i32 @function_11d70(i32 %v2_dfd0, i32 1)
  br label %dec_label_pc_dfd8

dec_label_pc_dfd8:                                ; preds = %dec_label_pc_def4, %dec_label_pc_dfec, %dec_label_pc_dfc8
  %v20_dfdc = phi i32 [ %v3_df10, %dec_label_pc_def4 ], [ %v1_e03c, %dec_label_pc_dfec ], [ %v2_dfd4, %dec_label_pc_dfc8 ]
  store i32 %v3_def4, i32* @r4, align 4
  store i32 %v9_def4, i32* @r6, align 4
  store i32 %v12_def4, i32* @r7, align 4
  store i32 %v15_def4, i32* @r8, align 4
  ret i32 %v20_dfdc

dec_label_pc_dfe0:                                ; preds = %bb
  %v0_dfe0 = load i32, i32* @r4, align 4
  %v1_dfe0 = inttoptr i32 %v0_dfe0 to i32*
  %v2_dfe0 = load i32, i32* %v1_dfe0, align 4
  %v7_dfe4 = icmp eq i32 %v2_dfe0, 99
  br i1 %v7_dfe4, label %dec_label_pc_e044, label %dec_label_pc_dfec

dec_label_pc_dfec:                                ; preds = %dec_label_pc_e044, %bb21, %dec_label_pc_dfe0
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_e004 = load i32, i32* @global_var_1c3c8.76, align 4
  %v4_e01c = call i32 @function_11ce8(i32 %v2_e004, %sockaddr* %v3_dfbc, i32 16)
  %v1_e024 = call i32 @function_129a8(i32 5)
  %v2_e028 = load i32, i32* @global_var_1c3c8.76, align 4
  %v1_e02c = call i32 @function_11574(i32 %v2_e028)
  %v1_e038 = call i32 @function_d1d8(i32 23815)
  %v1_e03c = call i32 @function_def4(i32 %v1_e038)
  br label %dec_label_pc_dfd8

dec_label_pc_e044:                                ; preds = %dec_label_pc_dfe0
  %v2_e044 = load i8, i8* bitcast (i8** @global_var_1c3d4.78 to i8*), align 4
  %v3_e044 = zext i8 %v2_e044 to i32
  %v1_e048 = load i32, i32* @r5, align 4
  %v9_e048 = icmp eq i32 %v3_e044, %v1_e048
  br i1 %v9_e048, label %dec_label_pc_dfec, label %bb21

bb21:                                             ; preds = %dec_label_pc_e044
  %v2_e050 = trunc i32 %v1_e048 to i8
  store i8 %v2_e050, i8* bitcast (i8** @global_var_1c3d4.78 to i8*), align 4
  br label %dec_label_pc_dfec

; uselistorder directives
  uselistorder i32 %v3_df10, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_d1d8, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_11d70, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_11cbc, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i8* bitcast (i8** @global_var_1c3d4.78 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1c3d4.78, { 1, 0 }
  uselistorder label %dec_label_pc_dfec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_dfd8, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_e064() local_unnamed_addr {
dec_label_pc_e064:
  %stack_var_-8 = alloca i32, align 4
  %v3_e064 = load i32, i32* @r4, align 4
  store i32 %v3_e064, i32* %stack_var_-8, align 4
  %v1_e06c = call i32 @function_10628(i32 1)
  store i32 ptrtoint ([15 x i8]* @global_var_13e18.81 to i32), i32* @r0, align 4
  %v2_e074 = call i32 @function_11c6c(i32 ptrtoint ([15 x i8]* @global_var_13e18.81 to i32))
  store i32 %v2_e074, i32* @global_var_1c5ec.84, align 4
  %v3_e088 = call i32 @function_10544(i32 1, i32* null)
  %v4_e088 = inttoptr i32 %v3_e088 to i8*
  %v2_e08c = add i32 %v3_e088, 1
  %v3_e08c = inttoptr i32 %v2_e08c to i8*
  %v4_e08c = load i8, i8* %v3_e08c, align 1
  %v3_e090 = load i8, i8* %v4_e088, align 1
  store i8 %v4_e08c, i8* bitcast (i32* @global_var_1c5eb.85 to i8*), align 4
  store i8 %v3_e090, i8* bitcast (i32* @global_var_1c5ea.86 to i8*), align 4
  %v2_e0a8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_e0a8, i32* @r4, align 4
  %v1_e0ac = call i32 @function_10570(i32 1)
  %v0_e0b0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e0b0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e064
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e064, %bb
  ret i32 %v1_e0ac

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_e0b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_e0b8:
  %stack_var_-16 = alloca i32, align 4
  %v3_e0b8 = load i32, i32* @r4, align 4
  %v6_e0b8 = load i32, i32* @r5, align 4
  %v2_e0bc = ptrtoint i32* %stack_var_-16 to i32
  %v0_e0c0 = call i32 @function_115a0()
  %v7_e0c4 = icmp eq i32 %v0_e0c0, -1
  %. = zext i1 %v7_e0c4 to i32
  %tmp11 = icmp slt i32 %v0_e0c0, 1
  %storemerge5 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge5, i32* @r5, align 4
  %v2_e0e0 = icmp eq i32 %storemerge5, 0
  store i32 %v0_e0c0, i32* @global_var_1c548.88, align 4
  br i1 %v2_e0e0, label %dec_label_pc_e0f4, label %dec_label_pc_e0ec

dec_label_pc_e0ec:                                ; preds = %dec_label_pc_e0b8
  store i32 %v3_e0b8, i32* @r4, align 4
  store i32 %v6_e0b8, i32* @r5, align 4
  ret i32 %v0_e0c0

dec_label_pc_e0f4:                                ; preds = %dec_label_pc_e0b8
  store i32 1, i32* %stack_var_-16, align 4
  %v1_e100 = call i32 @function_10628(i32 26)
  %v1_e108 = call i32 @function_10628(i32 27)
  %v0_e10c = load i32, i32* @r5, align 4
  %v2_e114 = inttoptr i32 %v0_e10c to i32*
  %v3_e114 = call i32 @function_10544(i32 26, i32* %v2_e114)
  %v2_e11c = inttoptr i32 %v3_e114 to i8*
  %v3_e11c = call i32 @function_116a0(i8* %v2_e11c, i32 2)
  %v7_e120 = icmp eq i32 %v3_e11c, -1
  store i32 %v3_e11c, i32* @r4, align 4
  br i1 %v7_e120, label %dec_label_pc_e168, label %dec_label_pc_e12c

dec_label_pc_e12c:                                ; preds = %dec_label_pc_e168, %dec_label_pc_e0f4
  %v0_e138 = phi i32 [ %v3_e178, %dec_label_pc_e168 ], [ %v3_e11c, %dec_label_pc_e0f4 ]
  %v3_e140 = call i32 @function_11624(i32 %v0_e138, i32 -2147199228, i32 %v2_e0bc)
  br label %dec_label_pc_e144

dec_label_pc_e144:                                ; preds = %dec_label_pc_e144, %dec_label_pc_e12c
  %v0_e150 = load i32, i32* @r4, align 4
  %v3_e158 = call i32 @function_11624(i32 %v0_e150, i32 -2147199227, i32 0)
  %v1_e160 = call i32 @function_129a8(i32 10)
  br label %dec_label_pc_e144

dec_label_pc_e168:                                ; preds = %dec_label_pc_e0f4
  %v0_e168 = load i32, i32* @r5, align 4
  %v2_e170 = inttoptr i32 %v0_e168 to i32*
  %v3_e170 = call i32 @function_10544(i32 27, i32* %v2_e170)
  %v2_e178 = inttoptr i32 %v3_e170 to i8*
  %v3_e178 = call i32 @function_116a0(i8* %v2_e178, i32 2)
  %v3_e17c = icmp eq i32 %v3_e178, -1
  store i32 %v3_e178, i32* @r4, align 4
  br i1 %v3_e17c, label %dec_label_pc_e188, label %dec_label_pc_e12c

dec_label_pc_e188:                                ; preds = %dec_label_pc_e168
  %v1_e18c = call i32 @function_10570(i32 26)
  %v1_e194 = call i32 @function_10570(i32 27)
  %v0_e198 = load i32, i32* @r5, align 4
  %v1_e19c = call i32 @function_12914(i32 %v0_e198)
  %v0_e1a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e1a0, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_e188
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_e188, %bb14
  ret i32 %v1_e19c

; uselistorder directives
  uselistorder i32 %v3_e178, { 1, 2, 0 }
  uselistorder i32 %v3_e11c, { 1, 2, 0 }
  uselistorder i32 %storemerge5, { 1, 0 }
  uselistorder i32 %v0_e0c0, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11624, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_e1a4(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_e1a4:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e1a4 = load i32, i32* @r4, align 4
  store i32 %v3_e1a4, i32* %stack_var_-36, align 4
  %v6_e1a4 = load i32, i32* @r5, align 4
  %v9_e1a4 = load i32, i32* @r6, align 4
  %v15_e1a4 = load i32, i32* @r8, align 4
  %v2_e1b0 = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_e1b0, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_e1b0, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v1_e1c8 = call i32 @function_11ee8(i32 %v2_e1b0)
  store i32 %v2_e1b0, i32* @r0, align 4
  %v2_e1d4 = call i32 @function_11eb8(i32 %v2_e1b0, i32 2)
  %v0_e1d8 = load i32, i32* @r5, align 4
  store i32 %v0_e1d8, i32* %r2.global-to-local, align 4
  %v3_e1e4 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  %v4_e1e4 = call i32 @function_117f0(i32 %v0_e1d8, %_TYPEDEF_sigset_t* %v3_e1e4, i32 %v0_e1d8)
  %v2_e1f0 = call i32 @function_11f00(i32 17, i32 1)
  %v2_e1fc = call i32 @function_11f00(i32 5, i32 ptrtoint (i32* @global_var_dedc.90 to i32))
  %v0_e200 = call i32 @function_10f28()
  store i32 %v0_e200, i32* @global_var_1c5dc.51, align 4
  store i32 1494907824, i32* %r2.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1c5eb.85 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1c5e8.83 to i8*), align 4
  store i32 1494907824, i32* @global_var_1c5ec.84, align 4
  %v0_e228 = load i32, i32* @r5, align 4
  %v1_e228 = trunc i32 %v0_e228 to i8
  store i8 %v1_e228, i8* bitcast (i32* @global_var_1c5ea.86 to i8*), align 4
  store i8 %v1_e228, i8* bitcast (i32* @global_var_1c5e9.94 to i8*), align 4
  %v6_e230 = call i32 @function_106e0(i32 %v0_e200, i32 ptrtoint (i8** @global_var_1c5e8.83 to i32), i32 1494907824, i32 2)
  store i32 ptrtoint (i32* @global_var_e064.72 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_e064.72 to i32), i32* @global_var_1c3d0.74, align 4
  %v2_e244 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_e244, i32* @sb, align 4
  %v1_e248 = call i32 @function_def4(i32 %v6_e230)
  %v1_e24c = call i32 @function_e9b0(i32 %v1_e248)
  store i32 %v2_e244, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_e258 = call i32 @function_10d10()
  %v0_e25c = load i32, i32* @r6, align 4
  %v7_e25c = icmp eq i32 %v0_e25c, 2
  br i1 %v7_e25c, label %dec_label_pc_e388, label %dec_label_pc_e264

dec_label_pc_e264:                                ; preds = %dec_label_pc_e388, %dec_label_pc_e1a4, %dec_label_pc_e398
  %v0_e264 = call i32 @function_e958()
  store i32 %v0_e264, i32* %r6.global-to-local, align 4
  %v0_e26c = load i32, i32* @r8, align 4
  %v1_e26c = inttoptr i32 %v0_e26c to i32*
  %v2_e26c = load i32, i32* %v1_e26c, align 4
  %v1_e270 = inttoptr i32 %v2_e26c to i8*
  %v2_e270 = call i32 @function_10c70(i8* %v1_e270)
  %v0_e278 = load i32, i32* @r8, align 4
  %v1_e278 = inttoptr i32 %v0_e278 to i32*
  %v2_e278 = load i32, i32* %v1_e278, align 4
  %v1_e27c = inttoptr i32 %v2_e278 to i8*
  %v2_e27c = call i32 @function_10c70(i8* %v1_e27c)
  %v1_e280 = sub i32 20, %v2_e270
  store i32 %v2_e27c, i32* @r5, align 4
  %v0_e288 = load i32, i32* %r6.global-to-local, align 4
  %v2_e28c = call i32 @function_112fc(i32 %v0_e288, i32 %v1_e280)
  %v1_e294 = load i32, i32* @r5, align 4
  %v2_e294 = add i32 %v1_e294, %v2_e28c
  store i32 %v2_e294, i32* @r4, align 4
  %v2_e298 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_e298, i32* @r6, align 4
  %v2_e2a4 = call i32 @function_ea0c(i32 %v2_e298, i32 %v2_e294)
  %v2_e2a8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_e2a8, i32* %r2.global-to-local, align 4
  %v1_e2ac = load i32, i32* @r4, align 4
  %v2_e2ac = add i32 %v1_e2ac, %v2_e2a8
  store i32 %v2_e2ac, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_e2b8 = load i32, i32* @r8, align 4
  %v1_e2b8 = inttoptr i32 %v0_e2b8 to i32*
  %v2_e2b8 = load i32, i32* %v1_e2b8, align 4
  store i32 %v2_e2b8, i32* @r0, align 4
  %v3_e2bc = add i32 %v2_e2ac, -72
  %v4_e2bc = inttoptr i32 %v3_e2bc to i8*
  store i8 0, i8* %v4_e2bc, align 1
  %v2_e2c0 = inttoptr i32 %v2_e2b8 to i8*
  %v3_e2c0 = call i32 @function_10c98(i8* %v2_e2c0, i32 %v2_e298)
  store i32 32, i32* @r1, align 4
  store i32 %v2_e298, i32* @r0, align 4
  %v0_e2cc = call i32 @function_10d10()
  %v0_e2d0 = call i32 @function_e958()
  store i32 %v0_e2d0, i32* @r7, align 4
  %v0_e2d8 = load i32, i32* @r8, align 4
  %v1_e2d8 = inttoptr i32 %v0_e2d8 to i32*
  %v2_e2d8 = load i32, i32* %v1_e2d8, align 4
  %v1_e2dc = inttoptr i32 %v2_e2d8 to i8*
  %v2_e2dc = call i32 @function_10c70(i8* %v1_e2dc)
  %v0_e2e4 = load i32, i32* @r8, align 4
  %v1_e2e4 = inttoptr i32 %v0_e2e4 to i32*
  %v2_e2e4 = load i32, i32* %v1_e2e4, align 4
  %v1_e2e8 = inttoptr i32 %v2_e2e4 to i8*
  %v2_e2e8 = call i32 @function_10c70(i8* %v1_e2e8)
  %v1_e2ec = sub i32 20, %v2_e2dc
  store i32 %v2_e2e8, i32* @r5, align 4
  %v0_e2f4 = load i32, i32* @r7, align 4
  %v2_e2f8 = call i32 @function_112fc(i32 %v0_e2f4, i32 %v1_e2ec)
  %v1_e2fc = load i32, i32* @r5, align 4
  %v2_e2fc = add i32 %v1_e2fc, %v2_e2f8
  store i32 %v2_e2fc, i32* @r4, align 4
  %v2_e308 = call i32 @function_ea0c(i32 %v2_e298, i32 %v2_e2fc)
  %v1_e310 = load i32, i32* @r4, align 4
  %v2_e310 = add i32 %v1_e310, %v2_e2a8
  store i32 %v2_e310, i32* @r3, align 4
  %v0_e314 = load i32, i32* @sl, align 4
  %v1_e314 = trunc i32 %v0_e314 to i8
  %v3_e314 = add i32 %v2_e310, -72
  %v4_e314 = inttoptr i32 %v3_e314 to i8*
  store i8 %v1_e314, i8* %v4_e314, align 1
  %v2_e320 = call i32 @function_1170c(i32 15, i32 %v2_e298)
  %v1_e328 = call i32 @function_10628(i32 5)
  %v3_e338 = call i32 @function_10544(i32 5, i32* nonnull %stack_var_-44)
  %v3_e33c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e33c, i32* %r2.global-to-local, align 4
  %v3_e348 = inttoptr i32 %v3_e338 to i32*
  %v4_e348 = call i32 @function_1189c(i32 1, i32* %v3_e348, i32 %v3_e33c)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e358 = call i32 @function_1189c(i32 1, i32* nonnull @global_var_13e28.98, i32 1)
  %v1_e360 = call i32 @function_10570(i32 5)
  %v1_e364 = call i32 @function_8650(i32 %v1_e360)
  %v1_e368 = call i32 @function_d774(i32 %v1_e364)
  %v1_e36c = call i32 @function_e0b8(i32 %v1_e368)
  %v0_e370 = call i32 @function_115a0()
  %v1_e374 = load i32, i32* @sl, align 4
  %v7_e378 = icmp sgt i32 %v0_e370, %v1_e374
  br i1 %v7_e378, label %dec_label_pc_e37c, label %dec_label_pc_e3c0

dec_label_pc_e37c:                                ; preds = %dec_label_pc_e264
  store i32 %v6_e1a4, i32* %r5.global-to-local, align 4
  store i32 %v9_e1a4, i32* %r6.global-to-local, align 4
  store i32 %v15_e1a4, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_e388:                                ; preds = %dec_label_pc_e1a4
  %v0_e388 = load i32, i32* @r8, align 4
  %v1_e388 = add i32 %v0_e388, 4
  %v2_e388 = inttoptr i32 %v1_e388 to i32*
  %v3_e388 = load i32, i32* %v2_e388, align 4
  %v1_e38c = inttoptr i32 %v3_e388 to i8*
  %v2_e38c = call i32 @function_10c70(i8* %v1_e38c)
  %v8_e394 = icmp sgt i32 %v2_e38c, 31
  br i1 %v8_e394, label %dec_label_pc_e264, label %dec_label_pc_e398

dec_label_pc_e398:                                ; preds = %dec_label_pc_e388
  %v0_e398 = load i32, i32* @r8, align 4
  %v1_e398 = add i32 %v0_e398, 4
  %v2_e398 = inttoptr i32 %v1_e398 to i32*
  %v3_e398 = load i32, i32* %v2_e398, align 4
  store i32 %v2_e244, i32* @r0, align 4
  %v2_e3a0 = bitcast i32* %stack_var_-140 to i8*
  %v3_e3a0 = call i32 @function_10c98(i8* %v2_e3a0, i32 %v3_e398)
  %v0_e3a4 = load i32, i32* @r8, align 4
  %v1_e3a4 = add i32 %v0_e3a4, 4
  %v2_e3a4 = inttoptr i32 %v1_e3a4 to i32*
  %v3_e3a4 = load i32, i32* %v2_e3a4, align 4
  %v1_e3ac = inttoptr i32 %v3_e3a4 to i8*
  %v2_e3ac = call i32 @function_10c70(i8* %v1_e3ac)
  store i32 %v2_e3ac, i32* @r1, align 4
  store i32 %v3_e3a4, i32* @r0, align 4
  %v0_e3b8 = call i32 @function_10d10()
  br label %dec_label_pc_e264

dec_label_pc_e3c0:                                ; preds = %dec_label_pc_e264
  %v1_e3c0 = call i32 @function_117c4(i32 %v0_e370)
  %v0_e3c8 = load i32, i32* @sl, align 4
  %v1_e3cc = call i32 @function_11574(i32 %v0_e3c8)
  %v1_e3d4 = call i32 @function_11574(i32 1)
  %v1_e3dc = call i32 @function_11574(i32 2)
  %v1_e3e0 = call i32 @function_8650(i32 %v1_e3dc)
  %v1_e3e4 = call i32 @function_d774(i32 %v1_e3e0)
  %v1_e3e8 = call i32 @function_e0b8(i32 %v1_e3e4)
  %v1_e3ec = call i32 @function_ee34(i32 %v1_e3e8)
  %v2_e3fc = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_e3fc, i32* @r6, align 4
  %v2_e400 = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_e400, i32* @r7, align 4
  %v2_e4d8 = ptrtoint i32* %stack_var_-60 to i32
  %v2_e718 = ptrtoint i32* %stack_var_-52 to i32
  %v4_e72c = bitcast i8** %stack_var_-38 to i32*
  %v2_e884 = ptrtoint i32* %stack_var_-1548 to i32
  %v2_e73c = ptrtoint i32* %stack_var_-48 to i32
  %v1_e7dc = bitcast i32* %stack_var_-140 to i8*
  %v5_e7a8 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v1_e7b8 = sub i32 0, %v1_e3c0
  br label %dec_label_pc_e404

dec_label_pc_e404:                                ; preds = %dec_label_pc_e404.backedge, %dec_label_pc_e3c0
  %v2_e40c45 = phi i32 [ %v2_e40c45.pre, %dec_label_pc_e404.backedge ], [ %v2_e3fc, %dec_label_pc_e3c0 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_e40c47 = inttoptr i32 %v2_e40c45 to i32*
  store i32 0, i32* %v4_e40c47, align 4
  %v0_e41048 = load i32, i32* %r3.global-to-local, align 4
  %v1_e41049 = add i32 %v0_e41048, 4
  store i32 %v1_e41049, i32* %r3.global-to-local, align 4
  %v7_e41450 = icmp eq i32 %v1_e41049, 128
  br i1 %v7_e41450, label %dec_label_pc_e41c, label %dec_label_pc_e40c.dec_label_pc_e40c_crit_edge

dec_label_pc_e40c.dec_label_pc_e40c_crit_edge:    ; preds = %dec_label_pc_e404, %dec_label_pc_e40c.dec_label_pc_e40c_crit_edge
  %v1_e41051 = phi i32 [ %v1_e410, %dec_label_pc_e40c.dec_label_pc_e40c_crit_edge ], [ %v1_e41049, %dec_label_pc_e404 ]
  %v0_e40c.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_e40c = load i32, i32* @r6, align 4
  %v3_e40c = add i32 %v2_e40c, %v1_e41051
  %v4_e40c = inttoptr i32 %v3_e40c to i32*
  store i32 %v0_e40c.pre, i32* %v4_e40c, align 4
  %v0_e410 = load i32, i32* %r3.global-to-local, align 4
  %v1_e410 = add i32 %v0_e410, 4
  store i32 %v1_e410, i32* %r3.global-to-local, align 4
  %v7_e414 = icmp eq i32 %v1_e410, 128
  br i1 %v7_e414, label %dec_label_pc_e41c, label %dec_label_pc_e40c.dec_label_pc_e40c_crit_edge

dec_label_pc_e41c:                                ; preds = %dec_label_pc_e40c.dec_label_pc_e40c_crit_edge, %dec_label_pc_e404
  %v0_e41c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e41c, i32* %r3.global-to-local, align 4
  store i32 %v0_e41c, i32* @r4, align 4
  %v2_e42452 = load i32, i32* @r7, align 4
  %v3_e42453 = add i32 %v2_e42452, %v0_e41c
  %v4_e42454 = inttoptr i32 %v3_e42453 to i32*
  store i32 %v0_e41c, i32* %v4_e42454, align 4
  %v0_e42855 = load i32, i32* %r3.global-to-local, align 4
  %v1_e42856 = add i32 %v0_e42855, 4
  store i32 %v1_e42856, i32* %r3.global-to-local, align 4
  %v7_e42c57 = icmp eq i32 %v1_e42856, 128
  br i1 %v7_e42c57, label %dec_label_pc_e434, label %dec_label_pc_e424.dec_label_pc_e424_crit_edge

dec_label_pc_e424.dec_label_pc_e424_crit_edge:    ; preds = %dec_label_pc_e41c, %dec_label_pc_e424.dec_label_pc_e424_crit_edge
  %v1_e42858 = phi i32 [ %v1_e428, %dec_label_pc_e424.dec_label_pc_e424_crit_edge ], [ %v1_e42856, %dec_label_pc_e41c ]
  %v0_e424.pre = load i32, i32* @r4, align 4
  %v2_e424 = load i32, i32* @r7, align 4
  %v3_e424 = add i32 %v2_e424, %v1_e42858
  %v4_e424 = inttoptr i32 %v3_e424 to i32*
  store i32 %v0_e424.pre, i32* %v4_e424, align 4
  %v0_e428 = load i32, i32* %r3.global-to-local, align 4
  %v1_e428 = add i32 %v0_e428, 4
  store i32 %v1_e428, i32* %r3.global-to-local, align 4
  %v7_e42c = icmp eq i32 %v1_e428, 128
  br i1 %v7_e42c, label %dec_label_pc_e434, label %dec_label_pc_e424.dec_label_pc_e424_crit_edge

dec_label_pc_e434:                                ; preds = %dec_label_pc_e424.dec_label_pc_e424_crit_edge, %dec_label_pc_e41c
  store i32 ptrtoint (i32* @global_var_1c3c8.76 to i32), i32* %r2.global-to-local, align 4
  %v2_e438 = load i32, i32* @global_var_1c3c8.76, align 4
  %v7_e43c = icmp eq i32 %v2_e438, -1
  br i1 %v7_e43c, label %dec_label_pc_e468, label %dec_label_pc_e444

dec_label_pc_e444:                                ; preds = %dec_label_pc_e434
  %v3_e444 = udiv i32 %v2_e438, 32
  %v3_e448 = mul nuw nsw i32 %v3_e444, 4
  %v2_e450 = add i32 %v3_e448, %v2_e2a8
  store i32 %v2_e450, i32* %r3.global-to-local, align 4
  %v1_e454 = add i32 %v2_e450, -360
  %v2_e454 = inttoptr i32 %v1_e454 to i32*
  %v3_e454 = load i32, i32* %v2_e454, align 4
  %v1_e458 = urem i32 %v2_e438, 32
  %v7_e460 = shl i32 1, %v1_e458
  %v8_e460 = or i32 %v3_e454, %v7_e460
  store i32 %v8_e460, i32* %r2.global-to-local, align 4
  store i32 %v8_e460, i32* %v2_e454, align 4
  br label %dec_label_pc_e468

dec_label_pc_e468:                                ; preds = %dec_label_pc_e434, %dec_label_pc_e444
  %v2_e468 = load i32, i32* @global_var_1c3cc.100, align 4
  store i32 %v2_e468, i32* %r3.global-to-local, align 4
  %v7_e46c = icmp eq i32 %v2_e468, -1
  store i32 ptrtoint (i32* @global_var_1c3cc.100 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_e46c, label %dec_label_pc_e6a4, label %dec_label_pc_e478

dec_label_pc_e478:                                ; preds = %dec_label_pc_e6a4, %dec_label_pc_e468, %.thread
  store i32 ptrtoint (i8** @global_var_1c54c.103 to i32), i32* %r2.global-to-local, align 4
  %v2_e47c = load i8, i8* bitcast (i8** @global_var_1c54c.103 to i8*), align 4
  %v2_e480 = icmp eq i8 %v2_e47c, 0
  %v2_e5c0 = load i32, i32* @global_var_1c3cc.100, align 4
  %v3_e5c4 = udiv i32 %v2_e5c0, 32
  store i32 %v3_e5c4, i32* %r3.global-to-local, align 4
  br i1 %v2_e480, label %dec_label_pc_e5c0, label %dec_label_pc_e488

dec_label_pc_e488:                                ; preds = %dec_label_pc_e478
  %v3_e490 = mul nuw nsw i32 %v3_e5c4, 4
  %v2_e498 = add i32 %v3_e490, %v2_e2a8
  store i32 %v2_e498, i32* %r3.global-to-local, align 4
  %v1_e49c = add i32 %v2_e498, -488
  %v2_e49c = inttoptr i32 %v1_e49c to i32*
  %v3_e49c = load i32, i32* %v2_e49c, align 4
  %v1_e4a0 = urem i32 %v2_e5c0, 32
  %v7_e4a8 = shl i32 1, %v1_e4a0
  %v8_e4a8 = or i32 %v3_e49c, %v7_e4a8
  store i32 %v8_e4a8, i32* %r2.global-to-local, align 4
  store i32 %v8_e4a8, i32* %v2_e49c, align 4
  br label %dec_label_pc_e4b0

dec_label_pc_e4b0:                                ; preds = %dec_label_pc_e5c0, %dec_label_pc_e488
  %v2_e4b4 = load i32, i32* @global_var_1c3c8.76, align 4
  %v2_e4b8 = load i32, i32* @global_var_1c3cc.100, align 4
  store i32 %v2_e4b8, i32* %r3.global-to-local, align 4
  %v5_e4c4 = icmp slt i32 %v2_e4b4, %v2_e4b8
  br i1 %v5_e4c4, label %bb, label %bb42

bb:                                               ; preds = %dec_label_pc_e4b0
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_e4b0, %bb
  %v0_e4dc = phi i32 [ %v2_e4b4, %dec_label_pc_e4b0 ], [ %v2_e4b8, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e4dc = add i32 %v0_e4dc, 1
  store i32 %v2_e400, i32* %r2.global-to-local, align 4
  %v5_e4f0 = call i32 @function_11794(i32 %v1_e4dc, i32 %v2_e3fc, i32 %v2_e400, i32 0, i32 %v2_e4d8)
  %v8_e4f4 = icmp eq i32 %v5_e4f0, -1
  store i32 %v5_e4f0, i32* %r3.global-to-local, align 4
  br i1 %v8_e4f4, label %dec_label_pc_e404.backedge, label %dec_label_pc_e500

dec_label_pc_e500:                                ; preds = %bb42
  %v6_e4f0 = trunc i32 %v5_e4f0 to i8
  %v3_e500 = icmp eq i8 %v6_e4f0, 0
  br i1 %v3_e500, label %dec_label_pc_e508, label %dec_label_pc_e528

dec_label_pc_e508:                                ; preds = %dec_label_pc_e500
  %v0_e508 = load i32, i32* @sl, align 4
  %v6_e514 = inttoptr i32 %v5_e4f0 to i8*
  store i8* %v6_e514, i8** %stack_var_-38, align 4
  %v2_e518 = call i32 @function_113c8(i32 %v0_e508, i32 6)
  %v2_e51c = icmp eq i32 %v2_e518, 0
  %v0_e520 = load i32, i32* @sl, align 4
  %v1_e520 = add i32 %v0_e520, 1
  store i32 %v1_e520, i32* @sl, align 4
  br i1 %v2_e51c, label %dec_label_pc_e714, label %dec_label_pc_e528

dec_label_pc_e528:                                ; preds = %dec_label_pc_e500, %dec_label_pc_e508, %dec_label_pc_e714
  store i32 ptrtoint (i32* @global_var_1c3c8.76 to i32), i32* %r2.global-to-local, align 4
  %v2_e52c = load i32, i32* @global_var_1c3c8.76, align 4
  %v7_e530 = icmp eq i32 %v2_e52c, -1
  br i1 %v7_e530, label %dec_label_pc_e55c, label %dec_label_pc_e538

dec_label_pc_e538:                                ; preds = %dec_label_pc_e528
  %v3_e538 = udiv i32 %v2_e52c, 32
  %v3_e53c = mul nuw nsw i32 %v3_e538, 4
  %v2_e544 = add i32 %v3_e53c, %v2_e2a8
  store i32 %v2_e544, i32* %r3.global-to-local, align 4
  %v1_e548 = add i32 %v2_e544, -360
  %v2_e548 = inttoptr i32 %v1_e548 to i32*
  %v3_e548 = load i32, i32* %v2_e548, align 4
  %v1_e54c = urem i32 %v2_e52c, 32
  %v6_e550 = lshr i32 %v3_e548, %v1_e54c
  store i32 %v6_e550, i32* %r2.global-to-local, align 4
  %v1_e554 = urem i32 %v6_e550, 2
  %v2_e554 = icmp eq i32 %v1_e554, 0
  br i1 %v2_e554, label %dec_label_pc_e55c, label %dec_label_pc_e790

dec_label_pc_e55c:                                ; preds = %dec_label_pc_e538, %dec_label_pc_e528
  store i32 ptrtoint (i8** @global_var_1c54c.103 to i32), i32* %r3.global-to-local, align 4
  %v2_e560 = load i8, i8* bitcast (i8** @global_var_1c54c.103 to i8*), align 4
  %v3_e560 = zext i8 %v2_e560 to i32
  store i32 %v3_e560, i32* @r4, align 4
  %v2_e564 = icmp eq i8 %v2_e560, 0
  %v2_e5ec = load i32, i32* @global_var_1c3cc.100, align 4
  br i1 %v2_e564, label %dec_label_pc_e5ec, label %dec_label_pc_e56c

dec_label_pc_e56c:                                ; preds = %dec_label_pc_e55c
  %v3_e570 = udiv i32 %v2_e5ec, 32
  %v3_e578 = mul nuw nsw i32 %v3_e570, 4
  %v2_e57c = add i32 %v3_e578, %v2_e2a8
  store i32 %v2_e57c, i32* %r3.global-to-local, align 4
  %v1_e580 = add i32 %v2_e57c, -488
  %v2_e580 = inttoptr i32 %v1_e580 to i32*
  %v3_e580 = load i32, i32* %v2_e580, align 4
  %v1_e584 = urem i32 %v2_e5ec, 32
  %v6_e588 = lshr i32 %v3_e580, %v1_e584
  store i32 %v6_e588, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1c54c.103 to i32), i32* %r3.global-to-local, align 4
  %v1_e594 = urem i32 %v6_e588, 2
  %v2_e594 = icmp eq i32 %v1_e594, 0
  store i8 0, i8* bitcast (i8** @global_var_1c54c.103 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1c3cc.100 to i32), i32* @r5, align 4
  br i1 %v2_e594, label %dec_label_pc_e5a4, label %dec_label_pc_e734

dec_label_pc_e5a4:                                ; preds = %dec_label_pc_e56c
  store i32 58796, i32* @lr, align 4
  %v1_e5a8 = icmp ne i32 %v2_e5ec, -1
  call void @__pseudo_cond_branch(i1 %v1_e5a8, i32 ptrtoint (i32* @global_var_11574.104 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e5b0 = load i32, i32* @r5, align 4
  %v2_e5b0 = inttoptr i32 %v1_e5b0 to i32*
  store i32 -1, i32* %v2_e5b0, align 4
  %v1_e5b8 = call i32 @function_129a8(i32 1)
  br label %dec_label_pc_e404.backedge

dec_label_pc_e404.backedge:                       ; preds = %dec_label_pc_e5a4, %dec_label_pc_e690, %dec_label_pc_e768, %dec_label_pc_e828, %dec_label_pc_e84c, %dec_label_pc_e900, %dec_label_pc_e90c, %bb42, %dec_label_pc_e5ec, %dec_label_pc_e5fc, %dec_label_pc_e7d8, %bb44, %dec_label_pc_e8ac, %dec_label_pc_e83c
  %v2_e40c45.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e404

dec_label_pc_e5c0:                                ; preds = %dec_label_pc_e478
  store i32 %v2_e2a8, i32* %r2.global-to-local, align 4
  %v3_e5cc = mul nuw nsw i32 %v3_e5c4, 4
  %v2_e5d0 = add i32 %v3_e5cc, %v2_e2a8
  store i32 %v2_e5d0, i32* %r3.global-to-local, align 4
  %v1_e5d4 = add i32 %v2_e5d0, -360
  %v2_e5d4 = inttoptr i32 %v1_e5d4 to i32*
  %v3_e5d4 = load i32, i32* %v2_e5d4, align 4
  %v1_e5d8 = urem i32 %v2_e5c0, 32
  %v7_e5e0 = shl i32 1, %v1_e5d8
  %v8_e5e0 = or i32 %v3_e5d4, %v7_e5e0
  store i32 %v8_e5e0, i32* %r2.global-to-local, align 4
  store i32 %v8_e5e0, i32* %v2_e5d4, align 4
  br label %dec_label_pc_e4b0

dec_label_pc_e5ec:                                ; preds = %dec_label_pc_e55c
  %v7_e5f0 = icmp eq i32 %v2_e5ec, -1
  store i32 ptrtoint (i32* @global_var_1c3cc.100 to i32), i32* @r5, align 4
  br i1 %v7_e5f0, label %dec_label_pc_e404.backedge, label %dec_label_pc_e5fc

dec_label_pc_e5fc:                                ; preds = %dec_label_pc_e5ec
  %v3_e5fc = udiv i32 %v2_e5ec, 32
  %v3_e600 = mul nuw nsw i32 %v3_e5fc, 4
  %v2_e608 = add i32 %v3_e600, %v2_e2a8
  store i32 %v2_e608, i32* %r3.global-to-local, align 4
  %v1_e60c = add i32 %v2_e608, -360
  %v2_e60c = inttoptr i32 %v1_e60c to i32*
  %v3_e60c = load i32, i32* %v2_e60c, align 4
  %v1_e610 = urem i32 %v2_e5ec, 32
  %v6_e614 = lshr i32 %v3_e60c, %v1_e610
  store i32 %v6_e614, i32* %r2.global-to-local, align 4
  %v1_e618 = urem i32 %v6_e614, 2
  %v2_e618 = icmp eq i32 %v1_e618, 0
  br i1 %v2_e618, label %dec_label_pc_e404.backedge, label %dec_label_pc_e620

dec_label_pc_e620:                                ; preds = %dec_label_pc_e5fc
  %v6_e620 = inttoptr i32 %v3_e560 to i8*
  store i8* %v6_e620, i8** %stack_var_-38, align 4
  %v0_e628 = call i32 @function_11b48()
  %v0_e62c = load i32, i32* @r4, align 4
  %v2_e62c = inttoptr i32 %v0_e628 to i32*
  store i32 %v0_e62c, i32* %v2_e62c, align 4
  store i32 %v0_e628, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e640 = load i32, i32* @global_var_1c3cc.100, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_e64c = call i32 @function_11d9c(i32 %v2_e640, i32* %v4_e72c, i32 2, i32 16386)
  %v7_e650 = icmp eq i32 %v5_e64c, -1
  br i1 %v7_e650, label %dec_label_pc_e83c, label %dec_label_pc_e658

dec_label_pc_e658:                                ; preds = %dec_label_pc_e620
  %v2_e658 = icmp eq i32 %v5_e64c, 0
  br i1 %v2_e658, label %dec_label_pc_e84c, label %dec_label_pc_e660

dec_label_pc_e660:                                ; preds = %dec_label_pc_e658
  %v3_e660 = load i8*, i8** %stack_var_-38, align 4
  %v4_e660 = ptrtoint i8* %v3_e660 to i32
  store i32 %v3_e560, i32* %r3.global-to-local, align 4
  %v4_e668 = mul nuw nsw i32 %v3_e560, 256
  %v5_e668 = or i32 %v4_e660, %v4_e668
  store i32 %v5_e668, i32* %r2.global-to-local, align 4
  %v7_e668 = icmp eq i32 %v5_e668, 0
  br i1 %v7_e668, label %dec_label_pc_e90c, label %dec_label_pc_e670

dec_label_pc_e670:                                ; preds = %dec_label_pc_e660
  %v1_e670 = mul i32 %v4_e660, 256
  %v3_e674 = and i32 %v1_e670, 65280
  %v4_e678 = udiv i32 %v5_e668, 256
  %v5_e678 = or i32 %v3_e674, %v4_e678
  %v6_e678 = trunc i32 %v4_e678 to i8
  store i32 %v5_e678, i32* %r2.global-to-local, align 4
  %v4_e67c = udiv i32 %v5_e668, 65536
  store i32 %v4_e67c, i32* %r3.global-to-local, align 4
  %v3_e680 = icmp slt i8 %v6_e678, 0
  %v7_e688 = inttoptr i32 %v4_e678 to i8*
  store i8* %v7_e688, i8** %stack_var_-38, align 4
  br i1 %v3_e680, label %dec_label_pc_e690, label %dec_label_pc_e87c

dec_label_pc_e690:                                ; preds = %dec_label_pc_e670
  %v2_e690 = load i32, i32* @global_var_1c3cc.100, align 4
  %v1_e694 = call i32 @function_11574(i32 %v2_e690)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e69c = load i32, i32* @r5, align 4
  %v2_e69c = inttoptr i32 %v1_e69c to i32*
  store i32 -1, i32* %v2_e69c, align 4
  br label %dec_label_pc_e404.backedge

dec_label_pc_e6a4:                                ; preds = %dec_label_pc_e468
  %v0_e6ac = load i32, i32* @r4, align 4
  store i32 %v0_e6ac, i32* %r2.global-to-local, align 4
  %v3_e6b0 = call i32 @function_11e8c(i32 2, i32 1, i32 %v0_e6ac)
  %v7_e6b4 = icmp eq i32 %v3_e6b0, -1
  store i32 %v3_e6b0, i32* %r5.global-to-local, align 4
  %v1_e6bc = load i32, i32* %r8.global-to-local, align 4
  %v2_e6bc = inttoptr i32 %v1_e6bc to i32*
  store i32 %v3_e6b0, i32* %v2_e6bc, align 4
  br i1 %v7_e6b4, label %dec_label_pc_e478, label %dec_label_pc_e6c4

dec_label_pc_e6c4:                                ; preds = %dec_label_pc_e6a4
  %v0_e6c4 = load i32, i32* @r4, align 4
  store i32 %v0_e6c4, i32* @r2, align 4
  %v2_e6cc = call i32 @function_114b0(i32 %v3_e6b0, i32 3)
  %v1_e6d4 = or i32 %v2_e6cc, 2048
  store i32 %v1_e6d4, i32* @r2, align 4
  %v0_e6d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_e6dc = call i32 @function_114b0(i32 %v0_e6d8, i32 4)
  store i32 ptrtoint (i32* @global_var_1c3d0.74 to i32), i32* %r2.global-to-local, align 4
  %v2_e6e4 = load i32, i32* @global_var_1c3d0.74, align 4
  store i32 %v2_e6e4, i32* %r3.global-to-local, align 4
  %v2_e6e8 = icmp eq i32 %v2_e6e4, 0
  br i1 %v2_e6e8, label %.thread, label %bb43

bb43:                                             ; preds = %dec_label_pc_e6c4
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_10f28.105 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e6c4, %bb43
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_e6fc = load i32, i32* @global_var_1c3cc.100, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1c54c.103 to i8*), align 4
  %v5_e70c = call i32 @function_11ce8(i32 %v2_e6fc, %sockaddr* bitcast (i8** @global_var_1c5e8.83 to %sockaddr*), i32 16)
  br label %dec_label_pc_e478

dec_label_pc_e714:                                ; preds = %dec_label_pc_e508
  %v2_e71c = load i32, i32* @global_var_1c3cc.100, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e72c = call i32 @function_11dfc(i32 %v2_e71c, i32* nonnull %v4_e72c, i32 2, i32 16384)
  br label %dec_label_pc_e528

dec_label_pc_e734:                                ; preds = %dec_label_pc_e56c
  store i32 4, i32* @r4, align 4
  store i32 %v2_e73c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_e758 = call i32 @function_11d40(i32 %v2_e5ec, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_e718)
  %v3_e75c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_e75c, i32* %r3.global-to-local, align 4
  %v2_e760 = icmp eq i32 %v3_e75c, 0
  br i1 %v2_e760, label %dec_label_pc_e7d8, label %dec_label_pc_e768

dec_label_pc_e768:                                ; preds = %dec_label_pc_e734
  %v2_e768 = load i32, i32* @global_var_1c3cc.100, align 4
  %v1_e76c = call i32 @function_11574(i32 %v2_e768)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e774 = load i32, i32* @r5, align 4
  %v2_e774 = inttoptr i32 %v1_e774 to i32*
  store i32 -1, i32* %v2_e774, align 4
  %v0_e778 = call i32 @function_e958()
  %v2_e780 = call i32 @function_112fc(i32 %v0_e778, i32 10)
  %v1_e784 = add i32 %v2_e780, 1
  %v1_e788 = call i32 @function_129a8(i32 %v1_e784)
  br label %dec_label_pc_e404.backedge

dec_label_pc_e790:                                ; preds = %dec_label_pc_e538
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_e73c, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_e7a8 = call i32 @function_11c90(i32 %v2_e52c, %sockaddr* %v5_e7a8, i32 %v2_e73c, i32 16, i32 16)
  %v1_e7ac = call i32 @function_d1c4(i32 %v6_e7a8)
  store i32 %v1_e3c0, i32* %r2.global-to-local, align 4
  %v2_e7bc = call i32 @function_11674(i32 %v1_e7b8, i32 9)
  store i32 ptrtoint (i32* @global_var_1c548.88 to i32), i32* %r3.global-to-local, align 4
  %v2_e7c4 = load i32, i32* @global_var_1c548.88, align 4
  %v2_e7c8 = icmp eq i32 %v2_e7c4, 0
  br i1 %v2_e7c8, label %dec_label_pc_e7d0, label %dec_label_pc_e870

dec_label_pc_e7d0:                                ; preds = %dec_label_pc_e790, %dec_label_pc_e870
  %v1_e7d4 = call i32 @function_12914(i32 0)
  br label %dec_label_pc_e7d8

dec_label_pc_e7d8:                                ; preds = %dec_label_pc_e734, %dec_label_pc_e7d0
  %v2_e7dc = call i32 @function_10c70(i8* %v1_e7dc)
  %sext = mul i32 %v2_e7dc, 16777216
  %v1_e7e0 = sdiv i32 %sext, 16777216
  %v7_e7e0 = inttoptr i32 %v1_e7e0 to i8*
  store i8* %v7_e7e0, i8** %stack_var_-38, align 4
  %v0_e7e4 = call i32 @function_10f28()
  store i32 %v0_e7e4, i32* @global_var_1c5dc.51, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e7f8 = load i32, i32* @r4, align 4
  store i32 %v0_e7f8, i32* %r2.global-to-local, align 4
  %v0_e7fc = load i32, i32* @r5, align 4
  %v1_e7fc = inttoptr i32 %v0_e7fc to i32*
  %v2_e7fc = load i32, i32* %v1_e7fc, align 4
  %v5_e800 = call i32 @function_11dfc(i32 %v2_e7fc, i32* nonnull @global_var_13e2c.108, i32 %v0_e7f8, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_e80c = load i32, i32* @r5, align 4
  %v1_e80c = inttoptr i32 %v0_e80c to i32*
  %v2_e80c = load i32, i32* %v1_e80c, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e818 = call i32 @function_11dfc(i32 %v2_e80c, i32* %v4_e72c, i32 1, i32 16384)
  %v3_e81c = load i8*, i8** %stack_var_-38, align 4
  %v4_e81c = ptrtoint i8* %v3_e81c to i32
  store i32 %v4_e81c, i32* %r2.global-to-local, align 4
  %v3_e820 = icmp eq i8* %v3_e81c, null
  br i1 %v3_e820, label %dec_label_pc_e404.backedge, label %dec_label_pc_e828

dec_label_pc_e828:                                ; preds = %dec_label_pc_e7d8
  %v0_e828 = load i32, i32* @r5, align 4
  %v1_e828 = inttoptr i32 %v0_e828 to i32*
  %v2_e828 = load i32, i32* %v1_e828, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_e834 = call i32 @function_11dfc(i32 %v2_e828, i32* nonnull %stack_var_-140, i32 %v4_e81c, i32 16384)
  br label %dec_label_pc_e404.backedge

dec_label_pc_e83c:                                ; preds = %dec_label_pc_e87c, %dec_label_pc_e620
  %v0_e83c = load i32, i32* @r8, align 4
  %v1_e83c = inttoptr i32 %v0_e83c to i32*
  %v2_e83c = load i32, i32* %v1_e83c, align 4
  store i32 %v2_e83c, i32* %r3.global-to-local, align 4
  %v7_e840 = icmp eq i32 %v2_e83c, 4
  br i1 %v7_e840, label %dec_label_pc_e404.backedge, label %bb44

bb44:                                             ; preds = %dec_label_pc_e83c
  %v8_e844 = icmp eq i32 %v2_e83c, 11
  br i1 %v8_e844, label %dec_label_pc_e404.backedge, label %dec_label_pc_e84c

dec_label_pc_e84c:                                ; preds = %dec_label_pc_e8a4, %bb44, %dec_label_pc_e658
  %v2_e84c = load i32, i32* @global_var_1c3cc.100, align 4
  store i32 59480, i32* @lr, align 4
  %v1_e854 = icmp ne i32 %v2_e84c, -1
  call void @__pseudo_cond_branch(i1 %v1_e854, i32 ptrtoint (i32* @global_var_11574.104 to i32))
  store i32 ptrtoint (i32* @global_var_1c3cc.100 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1c3cc.100, align 4
  %v1_e868 = call i32 @function_129a8(i32 1)
  br label %dec_label_pc_e404.backedge

dec_label_pc_e870:                                ; preds = %dec_label_pc_e790
  %v2_e874 = call i32 @function_11674(i32 %v2_e7c4, i32 9)
  br label %dec_label_pc_e7d0

dec_label_pc_e87c:                                ; preds = %dec_label_pc_e670
  %v0_e87c = load i32, i32* @r4, align 4
  %v1_e87c = load i32, i32* @r8, align 4
  %v2_e87c = inttoptr i32 %v1_e87c to i32*
  store i32 %v0_e87c, i32* %v2_e87c, align 4
  store i32 %v2_e884, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e890 = load i32, i32* @global_var_1c3cc.100, align 4
  %v9_e898 = call i32 @function_11d9c(i32 %v2_e890, i32* nonnull %stack_var_-1548, i32 %v4_e678, i32 16386)
  %v7_e89c = icmp eq i32 %v9_e898, -1
  br i1 %v7_e89c, label %dec_label_pc_e83c, label %dec_label_pc_e8a4

dec_label_pc_e8a4:                                ; preds = %dec_label_pc_e87c
  %v2_e8a4 = icmp eq i32 %v9_e898, 0
  br i1 %v2_e8a4, label %dec_label_pc_e84c, label %dec_label_pc_e8ac

dec_label_pc_e8ac:                                ; preds = %dec_label_pc_e8a4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_e8bc = load i32, i32* @global_var_1c3cc.100, align 4
  %v5_e8c0 = call i32 @function_11d9c(i32 %v2_e8bc, i32* nonnull %v4_e72c, i32 2, i32 16384)
  %v3_e8c4 = load i8*, i8** %stack_var_-38, align 4
  %v4_e8c4 = ptrtoint i8* %v3_e8c4 to i32
  %v4_e8c8 = urem i32 %v4_e67c, 256
  %v4_e8cc = mul i32 %v4_e8c4, 256
  %v5_e8cc = or i32 %v4_e8cc, %v4_e8c8
  store i32 %v5_e8cc, i32* %r2.global-to-local, align 4
  %v3_e8d4 = sdiv i32 %v4_e8cc, 256
  store i32 %v3_e8d4, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_e8e0 = load i32, i32* @global_var_1c3cc.100, align 4
  %v6_e8e8 = inttoptr i32 %v5_e8cc to i8*
  store i8* %v6_e8e8, i8** %stack_var_-38, align 4
  %v8_e8ec = call i32 @function_11d9c(i32 %v2_e8e0, i32* nonnull %stack_var_-1548, i32 %v5_e8cc, i32 16384)
  %v3_e8f0 = load i8*, i8** %stack_var_-38, align 4
  %v4_e8f0 = ptrtoint i8* %v3_e8f0 to i32
  store i32 %v4_e8f0, i32* %r2.global-to-local, align 4
  %v4_e8f4 = urem i32 %v3_e8d4, 256
  store i32 %v4_e8f4, i32* %r3.global-to-local, align 4
  %v6_e8f8 = mul nuw nsw i32 %v4_e8f4, 256
  %v7_e8f8 = or i32 %v4_e8f0, %v6_e8f8
  %v9_e8f8 = icmp eq i32 %v7_e8f8, 0
  br i1 %v9_e8f8, label %dec_label_pc_e404.backedge, label %dec_label_pc_e900

dec_label_pc_e900:                                ; preds = %dec_label_pc_e8ac
  %v7_e904 = call i32 @function_8320(i32* nonnull %stack_var_-1548, i32 %v7_e8f8, i32 %v4_e8f0, i32 %v4_e8f4)
  br label %dec_label_pc_e404.backedge

dec_label_pc_e90c:                                ; preds = %dec_label_pc_e660
  %v2_e910 = load i32, i32* @global_var_1c3cc.100, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e920 = call i32 @function_11d9c(i32 %v2_e910, i32* nonnull %v4_e72c, i32 2, i32 16384)
  br label %dec_label_pc_e404.backedge

; uselistorder directives
  uselistorder i32 %v4_e8f4, { 2, 0, 1 }
  uselistorder i32 %v4_e8f0, { 1, 0, 2 }
  uselistorder i32 %v3_e8d4, { 1, 0 }
  uselistorder i32 %v5_e8cc, { 1, 0, 2 }
  uselistorder i32 %v4_e8cc, { 1, 0 }
  uselistorder i32 %v9_e898, { 1, 0 }
  uselistorder i32 %v3_e6b0, { 1, 3, 2, 0 }
  uselistorder i32 %v4_e678, { 2, 3, 0, 1 }
  uselistorder i32 %v5_e64c, { 1, 0 }
  uselistorder i32 %v2_e5ec, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_e52c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_e4f0, { 2, 3, 1, 0 }
  uselistorder i32 %v2_e438, { 2, 1, 0 }
  uselistorder i32 %v1_e428, { 1, 2, 0 }
  uselistorder i32 %v1_e410, { 1, 2, 0 }
  uselistorder i32 %v2_e73c, { 1, 0, 2 }
  uselistorder i32* %v4_e72c, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v2_e400, { 1, 0, 2 }
  uselistorder i32 %v2_e3fc, { 1, 0, 2 }
  uselistorder i32 %v2_e2a8, { 0, 1, 8, 2, 3, 4, 5, 6, 7, 9 }
  uselistorder i32 %v2_e298, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_e1b0, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 4 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 33, 24, 34, 35, 36, 47, 48, 40, 41, 37, 45, 46, 38, 39, 42, 43, 44 }
  uselistorder i32* @global_var_1c548.88, { 1, 2, 0 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @function_129a8, { 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i8* bitcast (i8** @global_var_1c54c.103 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1c54c.103, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1c54c.103 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1c3cc.100, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 15, 14 }
  uselistorder i32* @global_var_1c3c8.76, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32 (i32)* @function_e0b8, { 1, 0 }
  uselistorder i32 (i32)* @function_d774, { 1, 0 }
  uselistorder i32 (i32)* @function_8650, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_ea0c, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_def4, { 1, 0 }
  uselistorder i32* @global_var_1c3d0.74, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_e064.72 to i32), { 0, 2, 1 }
  uselistorder i8** @global_var_1c5e8.83, { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_11f00, { 1, 0 }
  uselistorder label %dec_label_pc_e7d8, { 1, 0 }
  uselistorder label %dec_label_pc_e7d0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e404.backedge, { 6, 5, 12, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_e528, { 2, 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_e478, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e468, { 1, 0 }
  uselistorder label %dec_label_pc_e424.dec_label_pc_e424_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e40c.dec_label_pc_e40c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e264, { 2, 0, 1 }
}

define i32 @function_e958() local_unnamed_addr {
dec_label_pc_e958:
  %v2_e964 = load i32, i32* @global_var_1c550.110, align 4
  %v2_e968 = load i32, i32* @global_var_1c55c.112, align 4
  store i32 ptrtoint (i32* @global_var_1c554.114 to i32), i32* @lr, align 4
  %v4_e974 = mul i32 %v2_e964, 2048
  %v5_e974 = xor i32 %v4_e974, %v2_e964
  %v4_e978 = udiv i32 %v2_e968, 524288
  %v5_e978 = xor i32 %v4_e978, %v2_e968
  %v2_e97c = load i32, i32* @global_var_1c554.114, align 4
  %v2_e980 = load i32, i32* @global_var_1c558.116, align 4
  %v2_e984 = xor i32 %v5_e978, %v5_e974
  %v4_e988 = udiv i32 %v5_e974, 256
  %v5_e988 = xor i32 %v2_e984, %v4_e988
  store i32 %v2_e97c, i32* @global_var_1c550.110, align 4
  store i32 %v2_e980, i32* @global_var_1c554.114, align 4
  store i32 %v2_e968, i32* @global_var_1c558.116, align 4
  store i32 %v5_e988, i32* @global_var_1c55c.112, align 4
  ret i32 %v5_e988

; uselistorder directives
  uselistorder i32 %v2_e968, { 2, 1, 0 }
  uselistorder i32 %v2_e964, { 1, 0 }
}

define i32 @function_e9b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_e9b0:
  %stack_var_-12 = alloca i32, align 4
  %v3_e9b0 = load i32, i32* @r4, align 4
  store i32 %v3_e9b0, i32* %stack_var_-12, align 4
  %v2_e9b8 = call i32 @function_11844(i32* null)
  store i32 %v2_e9b8, i32* @global_var_1c550.110, align 4
  %v0_e9c4 = call i32 @function_115cc()
  store i32 %v0_e9c4, i32* @r4, align 4
  %v0_e9cc = call i32 @function_115f8()
  %v0_e9d4 = load i32, i32* @r4, align 4
  %v2_e9d4 = xor i32 %v0_e9d4, %v0_e9cc
  store i32 %v2_e9d4, i32* @r4, align 4
  store i32 %v2_e9d4, i32* @global_var_1c554.114, align 4
  %v1_e9dc = call i32 @function_11b54(i32 %v0_e9cc)
  %v2_e9e0 = load i32, i32* @global_var_1c554.114, align 4
  %v2_e9ec = xor i32 %v2_e9e0, %v1_e9dc
  store i32 %v2_e9ec, i32* @global_var_1c55c.112, align 4
  store i32 %v1_e9dc, i32* @global_var_1c558.116, align 4
  %v2_e9f8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_e9f8, i32* @r4, align 4
  ret i32 %v1_e9dc

; uselistorder directives
  uselistorder i32 %v1_e9dc, { 1, 2, 0 }
  uselistorder i32 %v0_e9cc, { 1, 0 }
  uselistorder i32 ()* @function_115f8, { 2, 1, 0 }
}

define i32 @function_ea0c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ea0c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ea0c = load i32, i32* @r4, align 4
  store i32 %v3_ea0c, i32* %stack_var_-36, align 4
  %v6_ea0c = load i32, i32* @r5, align 4
  %v9_ea0c = load i32, i32* @r6, align 4
  %v12_ea0c = load i32, i32* @r7, align 4
  %v28_ea0c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_ea14 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_ea20 = call i32 @function_10628(i32 31)
  %v3_ea2c = call i32 @function_10544(i32 31, i32* null)
  %v2_ea38 = inttoptr i32 %v3_ea2c to i8*
  %v3_ea38 = call i32 @function_11c50(i32 %v2_ea14, i8* %v2_ea38)
  %v2_ea3c = icmp eq i32 %arg2, 0
  br i1 %v2_ea3c, label %dec_label_pc_eab8, label %dec_label_pc_ea44

dec_label_pc_ea44:                                ; preds = %dec_label_pc_ea0c
  store i32 ptrtoint (i32* @global_var_1c550.110 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c554.114 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c558.116 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1c55c.112 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_ea8c = bitcast i32* %stack_var_-68 to i8*
  br label %dec_label_pc_ea58

dec_label_pc_ea58:                                ; preds = %dec_label_pc_ea58.dec_label_pc_ea58_crit_edge, %dec_label_pc_ea44
  %v1_ea7c = phi i32 [ %v1_ea7c.pre, %dec_label_pc_ea58.dec_label_pc_ea58_crit_edge ], [ ptrtoint (i32* @global_var_1c550.110 to i32), %dec_label_pc_ea44 ]
  %v2_ea58 = load i32, i32* @global_var_1c55c.112, align 4
  store i32 %v2_ea58, i32* %r2.global-to-local, align 4
  %v2_ea5c = load i32, i32* @global_var_1c550.110, align 4
  %v4_ea60 = udiv i32 %v2_ea58, 524288
  %v5_ea60 = xor i32 %v4_ea60, %v2_ea58
  %v4_ea64 = mul i32 %v2_ea5c, 2048
  %v5_ea64 = xor i32 %v4_ea64, %v2_ea5c
  %v2_ea68 = xor i32 %v5_ea60, %v5_ea64
  %v2_ea6c = load i32, i32* @global_var_1c554.114, align 4
  %v2_ea70 = load i32, i32* @global_var_1c558.116, align 4
  store i32 %v2_ea70, i32* %ip.global-to-local, align 4
  %v4_ea74 = udiv i32 %v5_ea64, 256
  %v5_ea74 = xor i32 %v2_ea68, %v4_ea74
  store i32 %v5_ea74, i32* @r4, align 4
  %v2_ea7c = inttoptr i32 %v1_ea7c to i32*
  store i32 %v2_ea6c, i32* %v2_ea7c, align 4
  %v0_ea80 = load i32, i32* %ip.global-to-local, align 4
  %v1_ea80 = load i32, i32* %r8.global-to-local, align 4
  %v2_ea80 = inttoptr i32 %v1_ea80 to i32*
  store i32 %v0_ea80, i32* %v2_ea80, align 4
  %v0_ea84 = load i32, i32* %r2.global-to-local, align 4
  %v1_ea84 = load i32, i32* @r7, align 4
  %v2_ea84 = inttoptr i32 %v1_ea84 to i32*
  store i32 %v0_ea84, i32* %v2_ea84, align 4
  %v0_ea88 = load i32, i32* @r4, align 4
  %v1_ea88 = load i32, i32* @r6, align 4
  %v2_ea88 = inttoptr i32 %v1_ea88 to i32*
  store i32 %v0_ea88, i32* %v2_ea88, align 4
  %v2_ea8c = call i32 @function_10c70(i8* %v1_ea8c)
  %v0_ea94 = load i32, i32* @r4, align 4
  %v2_ea98 = call i32 @function_112fc(i32 %v0_ea94, i32 %v2_ea8c)
  %v2_eaa0 = add i32 %v2_ea98, %v28_ea0c
  %v1_eaa4 = add i32 %v2_eaa0, -32
  %v2_eaa4 = inttoptr i32 %v1_eaa4 to i8*
  %v3_eaa4 = load i8, i8* %v2_eaa4, align 1
  %v2_eaa8 = load i32, i32* @r5, align 4
  %v3_eaa8 = load i32, i32* %fp.global-to-local, align 4
  %v4_eaa8 = add i32 %v3_eaa8, %v2_eaa8
  %v5_eaa8 = inttoptr i32 %v4_eaa8 to i8*
  store i8 %v3_eaa4, i8* %v5_eaa8, align 1
  %v0_eaac = load i32, i32* @r5, align 4
  %v1_eaac = add i32 %v0_eaac, 1
  store i32 %v1_eaac, i32* @r5, align 4
  %v1_eab0 = load i32, i32* %sb.global-to-local, align 4
  %v9_eab0 = icmp eq i32 %v1_eaac, %v1_eab0
  br i1 %v9_eab0, label %dec_label_pc_eab8, label %dec_label_pc_ea58.dec_label_pc_ea58_crit_edge

dec_label_pc_ea58.dec_label_pc_ea58_crit_edge:    ; preds = %dec_label_pc_ea58
  %v1_ea7c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_ea58

dec_label_pc_eab8:                                ; preds = %dec_label_pc_ea58, %dec_label_pc_ea0c
  %v1_eabc = call i32 @function_10570(i32 31)
  %v2_eac4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_eac4, i32* @r4, align 4
  store i32 %v6_ea0c, i32* @r5, align 4
  store i32 %v9_ea0c, i32* @r6, align 4
  store i32 %v12_ea0c, i32* @r7, align 4
  ret i32 %v1_eabc

; uselistorder directives
  uselistorder i32 %v2_ea5c, { 1, 0 }
  uselistorder i32 %v2_ea58, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
}

define i32 @function_ead8(i8* %arg1) local_unnamed_addr {
dec_label_pc_ead8:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_ead8 = load i32, i32* @r4, align 4
  store i32 %v3_ead8, i32* %stack_var_-36, align 4
  %v9_ead8 = load i32, i32* @r6, align 4
  %v12_ead8 = load i32, i32* @r7, align 4
  %v15_ead8 = load i32, i32* @r8, align 4
  %v18_ead8 = load i32, i32* @sb, align 4
  %v21_ead8 = load i32, i32* @sl, align 4
  %v24_ead8 = load i32, i32* @fp, align 4
  %v0_eadc = load i32, i32* @r1, align 4
  store i32 %v0_eadc, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_eadc, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_ead8
  store i32 %v3_ead8, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_ead8
  store i32 ptrtoint (i32* @global_var_1c55c.112 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c558.116 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c554.114 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c550.110 to i32), i32* %r8.global-to-local, align 4
  %v2_eaf8 = load i32, i32* @global_var_1c55c.112, align 4
  store i32 %v2_eaf8, i32* @lr, align 4
  %v2_eafc = load i32, i32* @global_var_1c558.116, align 4
  store i32 %v2_eafc, i32* %r7.global-to-local, align 4
  %v2_eb00 = load i32, i32* @global_var_1c554.114, align 4
  store i32 %v2_eb00, i32* %r6.global-to-local, align 4
  %v2_eb04 = load i32, i32* @global_var_1c550.110, align 4
  br label %dec_label_pc_eb30

dec_label_pc_eb0c:                                ; preds = %dec_label_pc_eb5c
  %v3_eb64 = sdiv i32 %v5_eb48, 256
  %v1_eb0c = trunc i32 %v3_eb64 to i8
  %v3_eb0c = add i32 %v9_eb50, 1
  %v4_eb0c = inttoptr i32 %v3_eb0c to i8*
  store i8 %v1_eb0c, i8* %v4_eb0c, align 1
  %v0_eb10 = load i32, i32* %r3.global-to-local, align 4
  %v1_eb10 = trunc i32 %v0_eb10 to i8
  %v2_eb10 = load i32, i32* %r5.global-to-local, align 4
  %v3_eb10 = inttoptr i32 %v2_eb10 to i8*
  store i8 %v1_eb10, i8* %v3_eb10, align 1
  %v0_eb14 = load i32, i32* %r5.global-to-local, align 4
  %v1_eb14 = add i32 %v0_eb14, 2
  store i32 %v1_eb14, i32* %r5.global-to-local, align 4
  %v0_eb18.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_eb18

dec_label_pc_eb18:                                ; preds = %.thread, %dec_label_pc_eb0c
  %v0_eb18 = phi i32 [ %v9_eb54, %.thread ], [ %v0_eb18.pre, %dec_label_pc_eb0c ]
  %v2_eb0c7 = phi i32 [ %v12_eb50, %.thread ], [ %v1_eb14, %dec_label_pc_eb0c ]
  %tmp22 = icmp slt i32 %v0_eb18, 1
  br i1 %tmp22, label %dec_label_pc_eb98, label %dec_label_pc_eb24

dec_label_pc_eb24:                                ; preds = %dec_label_pc_eb18
  %v0_eb1c = load i32, i32* %r6.global-to-local, align 4
  %v0_eb24 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_eb24, i32* %r6.global-to-local, align 4
  %v0_eb28 = load i32, i32* @lr, align 4
  store i32 %v0_eb28, i32* %r7.global-to-local, align 4
  %v0_eb2c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_eb2c, i32* @lr, align 4
  br label %dec_label_pc_eb30

dec_label_pc_eb30:                                ; preds = %bb21, %dec_label_pc_eb24
  %v0_eb80 = phi i32 [ %v2_eb00, %bb21 ], [ %v0_eb24, %dec_label_pc_eb24 ]
  %v9_eb50 = phi i32 [ %tmp, %bb21 ], [ %v2_eb0c7, %dec_label_pc_eb24 ]
  %v0_eb68 = phi i32 [ %v0_eadc, %bb21 ], [ %v0_eb18, %dec_label_pc_eb24 ]
  %v0_eb74 = phi i32 [ %v2_eaf8, %bb21 ], [ %v0_eb2c, %dec_label_pc_eb24 ]
  %v0_eb70 = phi i32 [ %v2_eb04, %bb21 ], [ %v0_eb1c, %dec_label_pc_eb24 ]
  %v4_eb30 = mul i32 %v0_eb70, 2048
  %v5_eb30 = xor i32 %v4_eb30, %v0_eb70
  %v4_eb34 = udiv i32 %v0_eb74, 524288
  %v5_eb34 = xor i32 %v4_eb34, %v0_eb74
  %v2_eb38 = xor i32 %v5_eb34, %v5_eb30
  %v4_eb48 = udiv i32 %v5_eb30, 256
  %v5_eb48 = xor i32 %v4_eb48, %v2_eb38
  store i32 %v5_eb48, i32* %r3.global-to-local, align 4
  %v7_eb50 = icmp sgt i32 %v0_eb68, 3
  br i1 %v7_eb50, label %.thread, label %dec_label_pc_eb5c

.thread:                                          ; preds = %dec_label_pc_eb30
  %v10_eb50 = inttoptr i32 %v9_eb50 to i32*
  store i32 %v5_eb48, i32* %v10_eb50, align 4
  %v11_eb50 = load i32, i32* %r5.global-to-local, align 4
  %v12_eb50 = add i32 %v11_eb50, 4
  store i32 %v12_eb50, i32* %r5.global-to-local, align 4
  %v8_eb54 = load i32, i32* %r4.global-to-local, align 4
  %v9_eb54 = add i32 %v8_eb54, -4
  store i32 %v9_eb54, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_eb18

dec_label_pc_eb5c:                                ; preds = %dec_label_pc_eb30
  store i32 %v5_eb48, i32* %r3.global-to-local, align 4
  %v7_eb60 = icmp eq i32 %v0_eb68, 1
  %v1_eb68 = add i32 %v0_eb68, -2
  store i32 %v1_eb68, i32* %r4.global-to-local, align 4
  br i1 %v7_eb60, label %dec_label_pc_eb70, label %dec_label_pc_eb0c

dec_label_pc_eb70:                                ; preds = %dec_label_pc_eb5c
  store i32 %v5_eb48, i32* %r3.global-to-local, align 4
  %v1_eb80 = load i32, i32* %r8.global-to-local, align 4
  %v2_eb80 = inttoptr i32 %v1_eb80 to i32*
  store i32 %v0_eb80, i32* %v2_eb80, align 4
  %v0_eb84 = load i32, i32* %r7.global-to-local, align 4
  %v1_eb84 = load i32, i32* %sl.global-to-local, align 4
  %v2_eb84 = inttoptr i32 %v1_eb84 to i32*
  store i32 %v0_eb84, i32* %v2_eb84, align 4
  %v0_eb88 = load i32, i32* @lr, align 4
  %v1_eb88 = load i32, i32* %sb.global-to-local, align 4
  %v2_eb88 = inttoptr i32 %v1_eb88 to i32*
  store i32 %v0_eb88, i32* %v2_eb88, align 4
  %v0_eb8c = load i32, i32* %r3.global-to-local, align 4
  %v1_eb8c = load i32, i32* %fp.global-to-local, align 4
  %v2_eb8c = inttoptr i32 %v1_eb8c to i32*
  store i32 %v0_eb8c, i32* %v2_eb8c, align 4
  %v0_eb90 = load i32, i32* %r3.global-to-local, align 4
  %v1_eb90 = trunc i32 %v0_eb90 to i8
  %v2_eb90 = load i32, i32* %r5.global-to-local, align 4
  %v3_eb90 = inttoptr i32 %v2_eb90 to i8*
  store i8 %v1_eb90, i8* %v3_eb90, align 1
  %v2_eb94 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_eb94, i32* @r4, align 4
  store i32 %v9_ead8, i32* @r6, align 4
  store i32 %v12_ead8, i32* @r7, align 4
  store i32 %v15_ead8, i32* @r8, align 4
  store i32 %v18_ead8, i32* @sb, align 4
  store i32 %v21_ead8, i32* @sl, align 4
  store i32 %v24_ead8, i32* @fp, align 4
  ret i32 %v5_eb30

dec_label_pc_eb98:                                ; preds = %dec_label_pc_eb18
  %v0_eb98 = load i32, i32* %r3.global-to-local, align 4
  %v1_eb98 = load i32, i32* %fp.global-to-local, align 4
  %v2_eb98 = inttoptr i32 %v1_eb98 to i32*
  store i32 %v0_eb98, i32* %v2_eb98, align 4
  %v0_eb9c = load i32, i32* @lr, align 4
  %v1_eb9c = load i32, i32* %sb.global-to-local, align 4
  %v2_eb9c = inttoptr i32 %v1_eb9c to i32*
  store i32 %v0_eb9c, i32* %v2_eb9c, align 4
  %v0_eba0 = load i32, i32* %r7.global-to-local, align 4
  %v1_eba0 = load i32, i32* %sl.global-to-local, align 4
  %v2_eba0 = inttoptr i32 %v1_eba0 to i32*
  store i32 %v0_eba0, i32* %v2_eba0, align 4
  %v0_eba4 = load i32, i32* %r6.global-to-local, align 4
  %v1_eba4 = load i32, i32* %r8.global-to-local, align 4
  %v2_eba4 = inttoptr i32 %v1_eba4 to i32*
  store i32 %v0_eba4, i32* %v2_eba4, align 4
  %v2_eba8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_eba8, i32* @r4, align 4
  store i32 %v9_ead8, i32* @r6, align 4
  store i32 %v12_ead8, i32* @r7, align 4
  store i32 %v15_ead8, i32* @r8, align 4
  store i32 %v18_ead8, i32* @sb, align 4
  store i32 %v21_ead8, i32* @sl, align 4
  store i32 %v24_ead8, i32* @fp, align 4
  ret i32 %v5_eb30

; uselistorder directives
  uselistorder i32 %v9_eb54, { 1, 0 }
  uselistorder i32 %v12_eb50, { 1, 0 }
  uselistorder i32 %v5_eb48, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_eb30, { 1, 2, 0, 3 }
  uselistorder i32 %v0_eb70, { 1, 0 }
  uselistorder i32 %v0_eb74, { 1, 0 }
  uselistorder i32 %v0_eb18, { 1, 0 }
  uselistorder i32 %v24_ead8, { 1, 0 }
  uselistorder i32 %v21_ead8, { 1, 0 }
  uselistorder i32 %v18_ead8, { 1, 0 }
  uselistorder i32 %v15_ead8, { 1, 0 }
  uselistorder i32 %v12_ead8, { 1, 0 }
  uselistorder i32 %v9_ead8, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 4, 3, 0 }
  uselistorder i32* %r6.global-to-local, { 1, 3, 2, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 6, 5, 1, 3, 4, 0 }
  uselistorder i32* %r4.global-to-local, { 2, 4, 3, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* @global_var_1c550.110, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1c550.110 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1c554.114, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1c558.116, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1c55c.112, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_eb30, { 1, 0 }
}

define i32 @function_ebbc() local_unnamed_addr {
dec_label_pc_ebbc:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_ebbc = load i32, i32* @r4, align 4
  store i32 %v3_ebbc, i32* %stack_var_-16, align 4
  %v0_ebc0 = load i32, i32* @r0, align 4
  store i32 %v0_ebc0, i32* %r5.global-to-local, align 4
  %v1_ebc4 = add i32 %v0_ebc0, 4
  %v2_ebc4 = inttoptr i32 %v1_ebc4 to i32*
  %v3_ebc4 = load i32, i32* %v2_ebc4, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 60392, i32* @lr, align 4
  %v1_ebe4 = icmp ne i32 %v3_ebc4, -1
  call void @__pseudo_cond_branch(i1 %v1_ebe4, i32 ptrtoint (i32* @global_var_11574.104 to i32))
  %v3_ebf4 = call i32 @function_11e8c(i32 2, i32 1, i32 0)
  store i32 %v3_ebf4, i32* %r3.global-to-local, align 4
  %v7_ebfc = icmp eq i32 %v3_ebf4, -1
  store i32 256, i32* @r1, align 4
  %v0_ec04 = load i32, i32* %r5.global-to-local, align 4
  %v1_ec04 = add i32 %v0_ec04, 28
  store i32 %v1_ec04, i32* @r0, align 4
  %v2_ec08 = add i32 %v0_ec04, 4
  %v3_ec08 = inttoptr i32 %v2_ec08 to i32*
  store i32 %v3_ebf4, i32* %v3_ec08, align 4
  br i1 %v7_ebfc, label %dec_label_pc_ebbc.dec_label_pc_ec84_crit_edge, label %dec_label_pc_ec10

dec_label_pc_ebbc.dec_label_pc_ec84_crit_edge:    ; preds = %dec_label_pc_ebbc
  %v14_ec88.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_ec84

dec_label_pc_ec10:                                ; preds = %dec_label_pc_ebbc
  %v0_ec10 = load i32, i32* %r6.global-to-local, align 4
  %v1_ec10 = load i32, i32* %r5.global-to-local, align 4
  %v2_ec10 = add i32 %v1_ec10, 24
  %v3_ec10 = inttoptr i32 %v2_ec10 to i32*
  store i32 %v0_ec10, i32* %v3_ec10, align 4
  %v0_ec14 = call i32 @function_10d10()
  %v0_ec18 = load i32, i32* %r5.global-to-local, align 4
  %v1_ec18 = add i32 %v0_ec18, 4
  %v2_ec18 = inttoptr i32 %v1_ec18 to i32*
  %v3_ec18 = load i32, i32* %v2_ec18, align 4
  store i32 %v3_ec18, i32* @r4, align 4
  %v0_ec20 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_ec20, i32* @r2, align 4
  %v2_ec28 = call i32 @function_114b0(i32 %v3_ec18, i32 3)
  %v1_ec30 = or i32 %v2_ec28, 2048
  store i32 %v1_ec30, i32* @r2, align 4
  %v0_ec34 = load i32, i32* @r4, align 4
  %v2_ec38 = call i32 @function_114b0(i32 %v0_ec34, i32 4)
  store i32 ptrtoint (i32* @global_var_1c594.130 to i32), i32* %r3.global-to-local, align 4
  %v0_ec40 = load i32, i32* %r5.global-to-local, align 4
  %v1_ec40 = add i32 %v0_ec40, 20
  %v2_ec40 = inttoptr i32 %v1_ec40 to i32*
  %v3_ec40 = load i32, i32* %v2_ec40, align 4
  store i32 %v3_ec40, i32* @r4, align 4
  %v2_ec44 = load i32, i32* @global_var_1c594.130, align 4
  %v1_ec48 = add i32 %v0_ec40, 16
  %v2_ec48 = inttoptr i32 %v1_ec48 to i32*
  %v3_ec48 = load i32, i32* %v2_ec48, align 4
  store i32 %v3_ec48, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_ec50 = add i32 %v0_ec40, 8
  %v3_ec50 = inttoptr i32 %v2_ec50 to i32*
  store i32 %v2_ec44, i32* %v3_ec50, align 4
  %v0_ec54 = load i32, i32* %r3.global-to-local, align 4
  %v1_ec54 = load i32, i32* %r5.global-to-local, align 4
  %v2_ec54 = add i32 %v1_ec54, 12
  %v3_ec54 = inttoptr i32 %v2_ec54 to i32*
  store i32 %v0_ec54, i32* %v3_ec54, align 4
  %v0_ec5c = load i32, i32* %r5.global-to-local, align 4
  %v1_ec5c = add i32 %v0_ec5c, 4
  %v2_ec5c = inttoptr i32 %v1_ec5c to i32*
  %v3_ec5c = load i32, i32* %v2_ec5c, align 4
  %v0_ec60 = load i32, i32* %r3.global-to-local, align 4
  %v2_ec60 = mul i32 %v0_ec60, 2
  store i32 %v2_ec60, i32* %r3.global-to-local, align 4
  store i32 %v2_ec60, i32* %stack_var_-32, align 4
  %v3_ec80 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_ec80 = call i32 @function_11ce8(i32 %v3_ec5c, %sockaddr* %v3_ec80, i32 16)
  br label %dec_label_pc_ec84

dec_label_pc_ec84:                                ; preds = %dec_label_pc_ebbc.dec_label_pc_ec84_crit_edge, %dec_label_pc_ec10
  %v14_ec88 = phi i32 [ %v14_ec88.pre, %dec_label_pc_ebbc.dec_label_pc_ec84_crit_edge ], [ %v4_ec80, %dec_label_pc_ec10 ]
  %v2_ec88 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_ec88, i32* @r4, align 4
  ret i32 %v14_ec88

; uselistorder directives
  uselistorder i32 %v2_ec60, { 1, 0 }
  uselistorder i32 %v3_ebf4, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32 ()* @function_10d10, { 7, 6, 5, 4, 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_ec84, { 1, 0 }
}

define i32 @function_ec90(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_ec90:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_ec90 = load i32, i32* @r4, align 4
  %v6_ec90 = load i32, i32* @r5, align 4
  %v9_ec90 = load i32, i32* @r6, align 4
  %v12_ec90 = load i32, i32* @r7, align 4
  %v15_ec90 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1c560.132 to i32), i32* @r8, align 4
  %v2_ec98 = load i32, i32* @global_var_1c560.132, align 4
  store i32 ptrtoint (i32* @global_var_1c58c.134 to i32), i32* %sb.global-to-local, align 4
  %v3_eca4 = mul i32 %v2_ec98, 16
  store i32 %v3_eca4, i32* %r3.global-to-local, align 4
  %v3_ecac = urem i32 %arg3, 65536
  store i32 %v3_ecac, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_ecb8 = load i32, i32* @global_var_1c58c.134, align 4
  %v1_ecbc = add i32 %v3_eca4, 16
  store i32 %v1_ecbc, i32* %r1.global-to-local, align 4
  store i32 %v3_ecac, i32* %stack_var_-44, align 4
  %v15_ecc4 = call i32 @function_122c0(i32 %v2_ecb8, i32 %v1_ecbc, i32 %v3_ecac, i32 %v3_eca4)
  store i32 %v15_ecc4, i32* %sl.global-to-local, align 4
  %v0_eccc = load i32, i32* @r5, align 4
  %v1_ecd0 = load i32, i32* %sb.global-to-local, align 4
  %v2_ecd0 = inttoptr i32 %v1_ecd0 to i32*
  store i32 %v15_ecc4, i32* %v2_ecd0, align 4
  %v2_ecd4 = load i32, i32* @global_var_1c560.132, align 4
  store i32 %v2_ecd4, i32* %fp.global-to-local, align 4
  %v1_ecd8 = inttoptr i32 %v0_eccc to i8*
  %v2_ecd8 = call i32 @function_10c70(i8* %v1_ecd8)
  %sext = mul i32 %v2_ecd8, 16777216
  %v1_ecdc = sdiv i32 %sext, 16777216
  %v2_ecdc = add nsw i32 %v1_ecdc, 1
  store i32 %v2_ecdc, i32* @r4, align 4
  store i32 %v1_ecdc, i32* @r7, align 4
  %v1_ece8 = call i32 @function_12024(i32 %v2_ecdc)
  %v0_ecec = load i32, i32* @r5, align 4
  store i32 %v0_ecec, i32* %r1.global-to-local, align 4
  %v0_ecf0 = load i32, i32* @r4, align 4
  store i32 %v0_ecf0, i32* %r2.global-to-local, align 4
  store i32 %v1_ece8, i32* @r6, align 4
  %v3_ecf8 = call i32 @function_10cec(i32 %v1_ece8, i32 %v0_ecec, i32 %v0_ecf0)
  %v0_ecfc = load i32, i32* @r7, align 4
  %tmp21 = icmp slt i32 %v0_ecfc, 1
  %extract.t6 = trunc i32 %v0_ecfc to i8
  br i1 %tmp21, label %dec_label_pc_ed20, label %dec_label_pc_ed04

dec_label_pc_ed04:                                ; preds = %dec_label_pc_ec90
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ed08

dec_label_pc_ed08:                                ; preds = %dec_label_pc_ed08, %dec_label_pc_ed04
  %v2_ed10 = phi i32 [ %v1_ed14, %dec_label_pc_ed08 ], [ 0, %dec_label_pc_ed04 ]
  %v1_ed08 = load i32, i32* @r6, align 4
  %v2_ed08 = add i32 %v1_ed08, %v2_ed10
  %v3_ed08 = inttoptr i32 %v2_ed08 to i8*
  %v4_ed08 = load i8, i8* %v3_ed08, align 1
  %v6_ed08 = zext i8 %v4_ed08 to i32
  %v1_ed0c = xor i32 %v6_ed08, 84
  store i32 %v1_ed0c, i32* %r3.global-to-local, align 4
  %v1_ed10 = trunc i32 %v1_ed0c to i8
  store i8 %v1_ed10, i8* %v3_ed08, align 1
  %v0_ed14 = load i32, i32* %r2.global-to-local, align 4
  %v1_ed14 = add i32 %v0_ed14, 1
  store i32 %v1_ed14, i32* %r2.global-to-local, align 4
  %v0_ed18 = load i32, i32* @r7, align 4
  %v9_ed18 = icmp eq i32 %v0_ed18, %v1_ed14
  br i1 %v9_ed18, label %dec_label_pc_ed20.loopexit, label %dec_label_pc_ed08

dec_label_pc_ed20.loopexit:                       ; preds = %dec_label_pc_ed08
  %extract.t = trunc i32 %v1_ed14 to i8
  br label %dec_label_pc_ed20

dec_label_pc_ed20:                                ; preds = %dec_label_pc_ed20.loopexit, %dec_label_pc_ec90
  %v0_ed30.off0 = phi i8 [ %extract.t, %dec_label_pc_ed20.loopexit ], [ %extract.t6, %dec_label_pc_ec90 ]
  %v2_ed20 = load i32, i32* @global_var_1c560.132, align 4
  %v2_ed24 = load i32, i32* @global_var_1c58c.134, align 4
  store i32 %v2_ed24, i32* %r2.global-to-local, align 4
  %v3_ed28 = mul i32 %v2_ed20, 16
  %v2_ed2c = add i32 %v2_ed24, %v3_ed28
  store i32 %v2_ed2c, i32* %r3.global-to-local, align 4
  %v3_ed30 = add i32 %v2_ed2c, 12
  %v4_ed30 = inttoptr i32 %v3_ed30 to i8*
  store i8 %v0_ed30.off0, i8* %v4_ed30, align 1
  %v0_ed34 = load i32, i32* @r6, align 4
  %v1_ed34 = load i32, i32* %sl.global-to-local, align 4
  %v2_ed34 = load i32, i32* %fp.global-to-local, align 4
  %v5_ed34 = mul i32 %v2_ed34, 16
  %v6_ed34 = add i32 %v5_ed34, %v1_ed34
  %v7_ed34 = inttoptr i32 %v6_ed34 to i32*
  store i32 %v0_ed34, i32* %v7_ed34, align 4
  %v2_ed3c = load i32, i32* @global_var_1c560.132, align 4
  store i32 %v2_ed3c, i32* @r7, align 4
  %v2_ed40 = load i32, i32* @global_var_1c58c.134, align 4
  store i32 %v2_ed40, i32* %sl.global-to-local, align 4
  %v1_ed44 = inttoptr i32 %arg2 to i8*
  %v2_ed44 = call i32 @function_10c70(i8* %v1_ed44)
  %sext1 = mul i32 %v2_ed44, 16777216
  %v1_ed48 = sdiv i32 %sext1, 16777216
  %v2_ed48 = add nsw i32 %v1_ed48, 1
  store i32 %v2_ed48, i32* @r4, align 4
  store i32 %v1_ed48, i32* @r5, align 4
  %v1_ed54 = call i32 @function_12024(i32 %v2_ed48)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_ed5c = load i32, i32* @r4, align 4
  store i32 %v0_ed5c, i32* %r2.global-to-local, align 4
  store i32 %v1_ed54, i32* %r6.global-to-local, align 4
  %v3_ed64 = call i32 @function_10cec(i32 %v1_ed54, i32 %arg2, i32 %v0_ed5c)
  %v0_ed68 = load i32, i32* @r5, align 4
  %tmp22 = icmp slt i32 %v0_ed68, 1
  %extract.t8 = trunc i32 %v0_ed68 to i8
  br i1 %tmp22, label %dec_label_pc_ed8c, label %dec_label_pc_ed70

dec_label_pc_ed70:                                ; preds = %dec_label_pc_ed20
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ed74

dec_label_pc_ed74:                                ; preds = %dec_label_pc_ed74, %dec_label_pc_ed70
  %v2_ed7c = phi i32 [ %v1_ed80, %dec_label_pc_ed74 ], [ 0, %dec_label_pc_ed70 ]
  %v1_ed74 = load i32, i32* %r6.global-to-local, align 4
  %v2_ed74 = add i32 %v1_ed74, %v2_ed7c
  %v3_ed74 = inttoptr i32 %v2_ed74 to i8*
  %v4_ed74 = load i8, i8* %v3_ed74, align 1
  %v6_ed74 = zext i8 %v4_ed74 to i32
  %v1_ed78 = xor i32 %v6_ed74, 84
  store i32 %v1_ed78, i32* %r3.global-to-local, align 4
  %v1_ed7c = trunc i32 %v1_ed78 to i8
  store i8 %v1_ed7c, i8* %v3_ed74, align 1
  %v0_ed80 = load i32, i32* %r2.global-to-local, align 4
  %v1_ed80 = add i32 %v0_ed80, 1
  store i32 %v1_ed80, i32* %r2.global-to-local, align 4
  %v0_ed84 = load i32, i32* @r5, align 4
  %v9_ed84 = icmp eq i32 %v0_ed84, %v1_ed80
  br i1 %v9_ed84, label %dec_label_pc_ed8c.loopexit, label %dec_label_pc_ed74

dec_label_pc_ed8c.loopexit:                       ; preds = %dec_label_pc_ed74
  %extract.t7 = trunc i32 %v1_ed80 to i8
  br label %dec_label_pc_ed8c

dec_label_pc_ed8c:                                ; preds = %dec_label_pc_ed8c.loopexit, %dec_label_pc_ed20
  %v0_ed9c.off0 = phi i8 [ %extract.t7, %dec_label_pc_ed8c.loopexit ], [ %extract.t8, %dec_label_pc_ed20 ]
  %v2_ed8c = load i32, i32* @global_var_1c560.132, align 4
  %v2_ed90 = load i32, i32* @global_var_1c58c.134, align 4
  %v3_ed94 = mul i32 %v2_ed8c, 16
  %v2_ed98 = or i32 %v3_ed94, 13
  %v3_ed9c = add i32 %v2_ed98, %v2_ed90
  %v4_ed9c = inttoptr i32 %v3_ed9c to i8*
  store i8 %v0_ed9c.off0, i8* %v4_ed9c, align 1
  %v2_eda4 = load i32, i32* @global_var_1c560.132, align 4
  store i32 %v2_eda4, i32* %lr.global-to-local, align 4
  %v4_eda8 = load i8, i8* @global_var_1c591.137, align 1
  %v5_eda8 = zext i8 %v4_eda8 to i32
  %v3_edac = load i8, i8* bitcast (i8** @global_var_1c590.136 to i8*), align 4
  %v4_edac = zext i8 %v3_edac to i32
  %v2_edb0 = load i32, i32* @global_var_1c58c.134, align 4
  %v4_edb4 = mul nuw nsw i32 %v5_eda8, 256
  %v5_edb4 = or i32 %v4_edac, %v4_edb4
  store i32 %v5_edb4, i32* %r2.global-to-local, align 4
  %v3_edb8 = mul i32 %v2_eda4, 16
  %v2_edbc = add i32 %v2_edb0, %v3_edb8
  store i32 %v2_edbc, i32* %r1.global-to-local, align 4
  %v3_edc4 = add i32 %v2_edbc, 9
  %v4_edc4 = inttoptr i32 %v3_edc4 to i8*
  store i8 %v4_eda8, i8* %v4_edc4, align 1
  %v0_edc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_edc8 = trunc i32 %v0_edc8 to i8
  %v2_edc8 = load i32, i32* %r1.global-to-local, align 4
  %v3_edc8 = add i32 %v2_edc8, 8
  %v4_edc8 = inttoptr i32 %v3_edc8 to i8*
  store i8 %v1_edc8, i8* %v4_edc8, align 1
  %v4_edcc = load i8, i8* @global_var_1c591.137, align 1
  %v5_edcc = zext i8 %v4_edcc to i32
  %v3_edd0 = load i8, i8* bitcast (i8** @global_var_1c590.136 to i8*), align 4
  %v4_edd0 = zext i8 %v3_edd0 to i32
  %v4_edd4 = mul nuw nsw i32 %v5_edcc, 256
  %v5_edd4 = or i32 %v4_edd0, %v4_edd4
  %v2_edd8 = load i32, i32* %stack_var_-44, align 4
  %v2_eddc = add i32 %v5_edd4, %v2_edd8
  store i32 %v2_eddc, i32* %r3.global-to-local, align 4
  %v3_ede09 = udiv i32 %v2_eddc, 256
  %v1_ede4 = trunc i32 %v3_ede09 to i8
  %v2_ede4 = load i32, i32* %r1.global-to-local, align 4
  %v3_ede4 = add i32 %v2_ede4, 11
  %v4_ede4 = inttoptr i32 %v3_ede4 to i8*
  store i8 %v1_ede4, i8* %v4_ede4, align 1
  %v0_ede8 = load i32, i32* %r3.global-to-local, align 4
  %v1_ede8 = trunc i32 %v0_ede8 to i8
  %v2_ede8 = load i32, i32* %r1.global-to-local, align 4
  %v3_ede8 = add i32 %v2_ede8, 10
  %v4_ede8 = inttoptr i32 %v3_ede8 to i8*
  store i8 %v1_ede8, i8* %v4_ede8, align 1
  %v4_edec = load i8, i8* @global_var_1c591.137, align 1
  %v5_edec = zext i8 %v4_edec to i32
  %v3_edf0 = load i8, i8* bitcast (i8** @global_var_1c590.136 to i8*), align 4
  %v4_edf0 = zext i8 %v3_edf0 to i32
  %v4_edf4 = mul nuw nsw i32 %v5_edec, 256
  %v5_edf4 = or i32 %v4_edf0, %v4_edf4
  %v2_edf8 = load i32, i32* %stack_var_-44, align 4
  %v2_edfc = add i32 %v5_edf4, %v2_edf8
  store i32 %v2_edfc, i32* %r2.global-to-local, align 4
  %v0_ee00 = load i32, i32* @r7, align 4
  %v3_ee00 = mul i32 %v0_ee00, 16
  %v1_ee04 = load i32, i32* %sl.global-to-local, align 4
  %v2_ee04 = add i32 %v1_ee04, %v3_ee00
  store i32 %v2_ee04, i32* %r3.global-to-local, align 4
  %v0_ee08 = load i32, i32* %lr.global-to-local, align 4
  %v1_ee08 = add i32 %v0_ee08, 1
  store i32 %v1_ee08, i32* @lr, align 4
  %v3_ee0c = sdiv i32 %v2_edfc, 256
  store i32 %v3_ee0c, i32* %r1.global-to-local, align 4
  %v0_ee10 = load i32, i32* %r6.global-to-local, align 4
  %v2_ee10 = add i32 %v2_ee04, 4
  %v3_ee10 = inttoptr i32 %v2_ee10 to i32*
  store i32 %v0_ee10, i32* %v3_ee10, align 4
  %v0_ee14 = load i32, i32* @lr, align 4
  %v1_ee14 = load i32, i32* @r8, align 4
  %v2_ee14 = inttoptr i32 %v1_ee14 to i32*
  store i32 %v0_ee14, i32* %v2_ee14, align 4
  %v0_ee18 = load i32, i32* %r1.global-to-local, align 4
  %v1_ee18 = trunc i32 %v0_ee18 to i8
  store i8 %v1_ee18, i8* @global_var_1c591.137, align 1
  %v0_ee1c = load i32, i32* %r2.global-to-local, align 4
  %v1_ee1c = trunc i32 %v0_ee1c to i8
  store i8 %v1_ee1c, i8* bitcast (i8** @global_var_1c590.136 to i8*), align 4
  store i32 %v3_ec90, i32* @r4, align 4
  store i32 %v6_ec90, i32* @r5, align 4
  store i32 %v9_ec90, i32* @r6, align 4
  store i32 %v12_ec90, i32* @r7, align 4
  store i32 %v15_ec90, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1c590.136 to i32)

; uselistorder directives
  uselistorder i32 %v1_ed80, { 0, 2, 3, 1 }
  uselistorder i32 %v1_ed54, { 1, 0 }
  uselistorder i32 %v1_ed14, { 0, 2, 3, 1 }
  uselistorder i32 %v1_ece8, { 1, 0 }
  uselistorder i32 %v3_ecac, { 1, 2, 0 }
  uselistorder i32 %v3_eca4, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_10c70, { 0, 1, 22, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23 }
  uselistorder i32 (i32, i32, i32, i32)* @function_122c0, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_ee34(i32 %arg1) local_unnamed_addr {
dec_label_pc_ee34:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp260 = call i32 @__decompiler_undefined_function_0()
  %tmp261 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %tmp289 = call i8* @__decompiler_undefined_function_2()
  %stack_var_-36 = alloca i32, align 4
  %v3_ee34 = load i32, i32* @r4, align 4
  store i32 %v3_ee34, i32* %stack_var_-36, align 4
  %v15_ee34 = load i32, i32* @r8, align 4
  %v18_ee34 = load i32, i32* @sb, align 4
  %v21_ee34 = load i32, i32* @sl, align 4
  %v0_ee40 = call i32 @function_115a0()
  store i32 %v0_ee40, i32* %r0.global-to-local, align 4
  %v7_ee44 = icmp eq i32 %v0_ee40, -1
  %. = zext i1 %v7_ee44 to i32
  %tmp292 = icmp slt i32 %v0_ee40, 1
  %storemerge251 = select i1 %tmp292, i32 %., i32 1
  store i32 %storemerge251, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1c600.139 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee60 = icmp eq i32 %storemerge251, 0
  store i1 %v2_ee60, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_ee40, i32* @global_var_1c600.139, align 4
  br i1 %v2_ee60, label %dec_label_pc_ee78, label %dec_label_pc_ee6c

dec_label_pc_ee6c:                                ; preds = %dec_label_pc_ee34
  store i32 %v3_ee34, i32* %r4.global-to-local, align 4
  store i32 %v15_ee34, i32* %r8.global-to-local, align 4
  store i32 %v18_ee34, i32* @sb, align 4
  store i32 %v21_ee34, i32* @sl, align 4
  ret i32 %v0_ee40

dec_label_pc_ee78:                                ; preds = %dec_label_pc_ee34
  %v0_ee78 = call i32 @function_10f28()
  store i32 %v0_ee78, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c5dc.51 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_ee78, i32* @global_var_1c5dc.51, align 4
  %v1_ee84 = call i32 @function_e9b0(i32 %v0_ee78)
  %v0_ee88 = load i32, i32* @r4, align 4
  store i32 %v0_ee88, i32* %r0.global-to-local, align 4
  %v1_ee8c = inttoptr i32 %v0_ee88 to i32*
  %v2_ee8c = call i32 @function_11844(i32* %v1_ee8c)
  store i32 ptrtoint (i32* @global_var_1c594.130 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_ee8c, i32* @global_var_1c594.130, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_eea0 = call i32 @function_12178(i32 256, i32 288)
  store i32 %v2_eea0, i32* %lr.global-to-local, align 4
  %v0_eeac = load i32, i32* @r4, align 4
  store i32 %v0_eeac, i32* %stack_var_-52, align 4
  store i32 %v2_eea0, i32* @global_var_1c5f8.143, align 4
  store i32 %v0_eeac, i32* %r3.global-to-local, align 4
  store i32 %v0_eeac, i32* @r5, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_eeac, i32* %ip.global-to-local, align 4
  %v1_eec4 = add i32 %v2_eea0, 4
  store i32 %v1_eec4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_eec8

dec_label_pc_eec8:                                ; preds = %dec_label_pc_eec8.dec_label_pc_eec8_crit_edge, %dec_label_pc_ee78
  %v0_eee0 = phi i32 [ %v0_eee0.pre, %dec_label_pc_eec8.dec_label_pc_eec8_crit_edge ], [ %v0_eeac, %dec_label_pc_ee78 ]
  %v0_eed0 = phi i32 [ %v0_eee8, %dec_label_pc_eec8.dec_label_pc_eec8_crit_edge ], [ %v0_eeac, %dec_label_pc_ee78 ]
  %v1_eed8 = phi i32 [ %v1_eed8.pre, %dec_label_pc_eec8.dec_label_pc_eec8_crit_edge ], [ %v2_eea0, %dec_label_pc_ee78 ]
  %v3_eec8 = mul i32 %v0_eed0, 256
  store i32 %v3_eec8, i32* %r2.global-to-local, align 4
  %v1_eed0 = add i32 %v0_eed0, 1
  store i32 %v1_eed0, i32* %ip.global-to-local, align 4
  %v2_eed4 = mul i32 %v0_eed0, 288
  %v2_eed8 = add i32 %v1_eed8, 12
  %v2_eee0 = add i32 %v2_eed8, %v2_eed4
  %v3_eee0 = inttoptr i32 %v2_eee0 to i32*
  store i32 %v0_eee0, i32* %v3_eee0, align 4
  %v0_eee4 = load i32, i32* %r0.global-to-local, align 4
  %v1_eee4 = load i32, i32* %r1.global-to-local, align 4
  %v2_eee4 = inttoptr i32 %v1_eee4 to i32*
  store i32 %v0_eee4, i32* %v2_eee4, align 4
  %v3_eee4 = load i32, i32* %r1.global-to-local, align 4
  %v4_eee4 = add i32 %v3_eee4, 288
  store i32 %v4_eee4, i32* %r1.global-to-local, align 4
  %v0_eee8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_eee8, i32* %r3.global-to-local, align 4
  %v7_eeec = icmp sgt i32 %v1_eed0, 255
  br i1 %v7_eeec, label %dec_label_pc_eef0, label %dec_label_pc_eec8.dec_label_pc_eec8_crit_edge

dec_label_pc_eec8.dec_label_pc_eec8_crit_edge:    ; preds = %dec_label_pc_eec8
  %v1_eed8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_eee0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_eec8

dec_label_pc_eef0:                                ; preds = %dec_label_pc_eec8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_eee8, i32* %stack_var_-52, align 4
  %v3_ef00 = call i32 @function_11e8c(i32 2, i32 3, i32 6)
  store i32 %v3_ef00, i32* %r0.global-to-local, align 4
  %v2_ef08 = icmp eq i32 %v3_ef00, -1
  store i1 %v2_ef08, i1* %cpsr_c.global-to-local, align 1
  %v7_ef08 = icmp eq i32 %v3_ef00, -1
  store i1 %v7_ef08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ef00, i32* @r4, align 4
  store i32 %v3_ef00, i32* @global_var_1c5fc.145, align 4
  br i1 %v7_ef08, label %dec_label_pc_f6d8, label %dec_label_pc_ef18

dec_label_pc_ef18:                                ; preds = %dec_label_pc_eef0
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_ef1c = load i32, i32* @r5, align 4
  store i32 %v0_ef1c, i32* @r2, align 4
  %v2_ef20 = call i32 @function_114b0(i32 %v3_ef00, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_ef28 = or i32 %v2_ef20, 2048
  store i32 %v1_ef28, i32* @r2, align 4
  %v0_ef2c = load i32, i32* @r4, align 4
  store i32 %v0_ef2c, i32* %r0.global-to-local, align 4
  %v2_ef30 = call i32 @function_114b0(i32 %v0_ef2c, i32 4)
  %v2_ef3c = load i32, i32* @global_var_1c5fc.145, align 4
  store i32 %v2_ef3c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_ef44 = load i32, i32* @r5, align 4
  store i32 %v0_ef44, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_ef4c = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_ef4c, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_ef5c = call i32 @function_11e5c(i32 %v2_ef3c, i32 %v0_ef44, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_ef5c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef60 = icmp eq i32 %v6_ef5c, 0
  store i1 %v2_ef60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef60, label %dec_label_pc_ef68, label %dec_label_pc_f7c8

dec_label_pc_ef68:                                ; preds = %dec_label_pc_ef18, %dec_label_pc_ef68
  %v0_ef68 = call i32 @function_e958()
  %v3_ef6c = mul i32 %v0_ef68, 65536
  store i32 %v3_ef6c, i32* %r0.global-to-local, align 4
  %v1_ef78 = mul i32 %v0_ef68, 256
  %v3_ef7c = and i32 %v1_ef78, 65280
  %tmp295 = udiv i32 %v0_ef68, 256
  %v4_ef80 = urem i32 %tmp295, 256
  %v5_ef80 = or i32 %v4_ef80, %v3_ef7c
  store i32 %v5_ef80, i32* %r3.global-to-local, align 4
  %v2_ef84 = icmp ugt i32 %v5_ef80, 1023
  store i1 %v2_ef84, i1* %cpsr_c.global-to-local, align 1
  %v7_ef84 = icmp eq i32 %v5_ef80, 1024
  store i1 %v7_ef84, i1* %cpsr_z.global-to-local, align 1
  %v3_ef88 = icmp ult i32 %v5_ef80, 1022
  br i1 %v3_ef88, label %dec_label_pc_ef68, label %dec_label_pc_ef8c

dec_label_pc_ef8c:                                ; preds = %dec_label_pc_ef68
  %v5_ef74.le = trunc i32 %v0_ef68 to i8
  store i32 ptrtoint (i8** @global_var_1c564.147 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1c564.147 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1c567.148 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1c566.149 to i8*), align 4
  %v0_efc0 = call i32 @function_e958()
  %v1_efc0 = trunc i32 %v0_efc0 to i8
  store i32 %v0_efc0, i32* %r0.global-to-local, align 4
  %v3_efc8 = load i8, i8* @global_var_1c584.152, align 1
  store i32 ptrtoint (i8** @global_var_1c564.147 to i32), i32* %lr.global-to-local, align 4
  %v4_efd0250 = udiv i32 %v0_efc0, 256
  %v1_efd4 = trunc i32 %v4_efd0250 to i8
  store i8 %v1_efd4, i8* bitcast (i32* @global_var_1c569.153 to i8*), align 4
  %v4_efd8 = sext i8 %v5_ef74.le to i32
  store i8 6, i8* bitcast (i32* @global_var_1c56d.154 to i8*), align 4
  %tmp = urem i8 %v3_efc8, 16
  %v1_efe4 = zext i8 %tmp to i32
  store i32 ptrtoint (i32* @global_var_1c578.151 to i32), i32* %r2.global-to-local, align 4
  %v1_efec = and i32 %v4_efd8, 128
  %v2_efec = icmp ne i32 %v1_efec, 0
  store i1 %v2_efec, i1* %cpsr_c.global-to-local, align 1
  %v3_efec = sdiv i32 %v4_efd8, 256
  store i32 %v3_efec, i32* %ip.global-to-local, align 4
  %v1_eff0 = or i32 %v1_efe4, 80
  store i32 %v1_eff0, i32* %r1.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1c56c.155 to i8*), align 4
  %v1_effc = trunc i32 %v1_eff0 to i8
  store i8 %v1_effc, i8* @global_var_1c584.152, align 1
  store i8 23, i8* bitcast (i32* @global_var_1c57b.156 to i8*), align 4
  store i32 %v4_efd8, i32* %r3.global-to-local, align 4
  %v1_f00c = trunc i32 %v3_efec to i8
  store i8 %v1_f00c, i8* bitcast (i32* @global_var_1c579.157 to i8*), align 4
  store i8 %v1_efc0, i8* bitcast (i32* @global_var_1c568.158 to i8*), align 4
  store i8 %v5_ef74.le, i8* bitcast (i32* @global_var_1c578.151 to i8*), align 4
  %v0_f018 = load i32, i32* @r5, align 4
  %v1_f018 = trunc i32 %v0_f018 to i8
  store i8 %v1_f018, i8* bitcast (i32* @global_var_1c57a.159 to i8*), align 4
  %v0_f01c = call i32 @function_e958()
  %v1_f01c = trunc i32 %v0_f01c to i8
  %v3_f024 = load i8, i8* @global_var_1c585.160, align 1
  %v4_f024 = zext i8 %v3_f024 to i32
  store i32 ptrtoint (i32* @global_var_1c578.151 to i32), i32* @lr, align 4
  %v2_f02c = and i32 %v0_f01c, 128
  %v3_f02c = icmp ne i32 %v2_f02c, 0
  store i1 %v3_f02c, i1* %cpsr_c.global-to-local, align 1
  %v4_f02c = sdiv i32 %v0_f01c, 256
  store i32 %v4_f02c, i32* %ip.global-to-local, align 4
  %v1_f030 = or i32 %v4_f024, 2
  store i32 %v1_f030, i32* %r3.global-to-local, align 4
  store i32 %v0_f01c, i32* @r4, align 4
  %v1_f038 = trunc i32 %v4_f02c to i8
  store i8 %v1_f038, i8* bitcast (i32* @global_var_1c587.161 to i8*), align 4
  %v1_f03c = trunc i32 %v1_f030 to i8
  store i8 %v1_f03c, i8* @global_var_1c585.160, align 1
  store i8 %v1_f01c, i8* bitcast (i32* @global_var_1c586.162 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13ebc.166 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_f050 = call i32 @function_ec90(i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), i32 ptrtoint (i32* @global_var_13ebc.166 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13e34.168 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_f060 = call i32 @function_ec90(i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), i32 ptrtoint ([5 x i8]* @global_var_13e34.168 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13e3c.170 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f070 = call i32 @function_ec90(i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), i32 ptrtoint ([9 x i8]* @global_var_13e3c.170 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_13e48.172 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_13e48.172 to i32), i32* %r1.global-to-local, align 4
  %v5_f080 = call i32 @function_ec90(i32 ptrtoint ([7 x i8]* @global_var_13e48.172 to i32), i32 ptrtoint ([7 x i8]* @global_var_13e48.172 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_13e50.174 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13ebc.166 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f090 = call i32 @function_ec90(i32 ptrtoint ([8 x i8]* @global_var_13e50.174 to i32), i32 ptrtoint (i32* @global_var_13ebc.166 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_13e58.176 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f0a0 = call i32 @function_ec90(i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), i32 ptrtoint ([9 x i8]* @global_var_13e58.176 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_13e64.178 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13e64.178 to i32), i32* %r1.global-to-local, align 4
  %v5_f0b0 = call i32 @function_ec90(i32 ptrtoint ([6 x i8]* @global_var_13e64.178 to i32), i32 ptrtoint ([6 x i8]* @global_var_13e64.178 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13e6c.180 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f0c0 = call i32 @function_ec90(i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), i32 ptrtoint ([6 x i8]* @global_var_13e6c.180 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_13e74.182 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_13e74.182 to i32), i32* %r1.global-to-local, align 4
  %v5_f0d0 = call i32 @function_ec90(i32 ptrtoint ([8 x i8]* @global_var_13e74.182 to i32), i32 ptrtoint ([8 x i8]* @global_var_13e74.182 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_13e50.174 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_f0e0 = call i32 @function_ec90(i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), i32 ptrtoint ([8 x i8]* @global_var_13e50.174 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13e7c.184 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_f0f0 = call i32 @function_ec90(i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), i32 ptrtoint (i32* @global_var_13e7c.184 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13e8c.186 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f100 = call i32 @function_ec90(i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), i32 ptrtoint ([6 x i8]* @global_var_13e8c.186 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_13e94.188 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_13e94.188 to i32), i32* %r1.global-to-local, align 4
  %v5_f110 = call i32 @function_ec90(i32 ptrtoint ([5 x i8]* @global_var_13e94.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_13e94.188 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_13e94.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_13e8c.186 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f120 = call i32 @function_ec90(i32 ptrtoint ([5 x i8]* @global_var_13e94.188 to i32), i32 ptrtoint ([6 x i8]* @global_var_13e8c.186 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_13e50.174 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13e9c.190 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_f130 = call i32 @function_ec90(i32 ptrtoint ([8 x i8]* @global_var_13e50.174 to i32), i32 ptrtoint (i32* @global_var_13e9c.190 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_13e50.174 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13ea8.192 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_f140 = call i32 @function_ec90(i32 ptrtoint ([8 x i8]* @global_var_13e50.174 to i32), i32 ptrtoint (i32* @global_var_13ea8.192 to i32), i32 15)
  %v2_f148 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_f148, i32* %r0.global-to-local, align 4
  %v2_f14c = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_f14c, i32* %r1.global-to-local, align 4
  %tmp296 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_f158

dec_label_pc_f158:                                ; preds = %dec_label_pc_f8d8, %dec_label_pc_ef8c
  %v0_f4fc = phi i32 [ %v2_f148, %dec_label_pc_ef8c ], [ %stack_var_-1872.2, %dec_label_pc_f8d8 ]
  %stack_var_-1868.0 = phi i8 [ %v5_ef74.le, %dec_label_pc_ef8c ], [ %stack_var_-1868.2, %dec_label_pc_f8d8 ]
  %stack_var_-1876.0 = phi i8* [ %tmp296, %dec_label_pc_ef8c ], [ %stack_var_-1876.2, %dec_label_pc_f8d8 ]
  store i32 ptrtoint (i32* @global_var_1c594.130 to i32), i32* %r2.global-to-local, align 4
  %v2_f15c = load i32, i32* @global_var_1c594.130, align 4
  store i32 %v2_f15c, i32* %r8.global-to-local, align 4
  %v0_f160 = load i32, i32* @fp, align 4
  %v3_f160 = icmp uge i32 %v0_f160, %v2_f15c
  store i1 %v3_f160, i1* %cpsr_c.global-to-local, align 1
  %v9_f160 = icmp eq i32 %v0_f160, %v2_f15c
  store i1 %v9_f160, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f160, label %dec_label_pc_f48c, label %dec_label_pc_f168

dec_label_pc_f168:                                ; preds = %dec_label_pc_f158
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_f460 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_f174

dec_label_pc_f174:                                ; preds = %.thread66.dec_label_pc_f174_crit_edge, %dec_label_pc_f168
  %v0_f174 = phi i32 [ %v0_f174.pre, %.thread66.dec_label_pc_f174_crit_edge ], [ 0, %dec_label_pc_f168 ]
  store i32 %v0_f174, i32* %stack_var_-92, align 4
  %v0_f184 = call i32 @function_e958()
  %v1_f184 = trunc i32 %v0_f184 to i8
  store i32 %v0_f184, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c5dc.51 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1c564.147 to i32), i32* %lr.global-to-local, align 4
  %v2_f190 = load i32, i32* @global_var_1c5dc.51, align 4
  store i32 %v2_f190, i32* %r2.global-to-local, align 4
  %v2_f194 = and i32 %v0_f184, 128
  %v3_f194 = icmp ne i32 %v2_f194, 0
  store i1 %v3_f194, i1* %cpsr_c.global-to-local, align 1
  %v4_f194 = sdiv i32 %v0_f184, 256
  store i32 %v4_f194, i32* %r3.global-to-local, align 4
  %v1_f198 = trunc i32 %v4_f194 to i8
  store i8 %v1_f198, i8* bitcast (i32* @global_var_1c569.153 to i8*), align 4
  store i32 %v2_f190, i32* @global_var_1c570.193, align 4
  store i8 %v1_f184, i8* bitcast (i32* @global_var_1c568.158 to i8*), align 4
  br label %dec_label_pc_f1a4

dec_label_pc_f1a4:                                ; preds = %dec_label_pc_f2fc, %dec_label_pc_f1d4, %dec_label_pc_f330, %dec_label_pc_f324, %dec_label_pc_f318, %dec_label_pc_f30c, %.thread51, %.thread35, %.thread31, %.thread27, %bb322, %bb321, %bb320, %bb319, %bb318, %bb317, %bb316, %bb315, %bb314, %bb313, %dec_label_pc_f270, %dec_label_pc_f268, %bb307, %dec_label_pc_f238, %dec_label_pc_f214, %bb300, %dec_label_pc_f1e4, %bb299, %dec_label_pc_f1cc, %bb298, %bb324, %dec_label_pc_f174
  %v0_f1a4 = call i32 @function_e958()
  store i32 %v0_f1a4, i32* %r0.global-to-local, align 4
  %v1_f1a8 = urem i32 %v0_f1a4, 256
  store i32 %v1_f1a8, i32* %r1.global-to-local, align 4
  %v3_f1ac = udiv i32 %v0_f1a4, 256
  store i32 %v3_f1ac, i32* %r3.global-to-local, align 4
  %v3_f1b0 = udiv i32 %v0_f1a4, 65536
  store i32 %v3_f1b0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f1b4 = icmp eq i32 %v1_f1a8, 0
  store i1 %v2_f1b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f1b4, label %bb298, label %bb297

bb297:                                            ; preds = %dec_label_pc_f1a4
  %v3_f1b8 = icmp ugt i32 %v1_f1a8, 126
  store i1 %v3_f1b8, i1* %cpsr_c.global-to-local, align 1
  %v8_f1b8 = icmp eq i32 %v1_f1a8, 127
  store i1 %v8_f1b8, i1* %cpsr_z.global-to-local, align 1
  br label %bb298

bb298:                                            ; preds = %dec_label_pc_f1a4, %bb297
  %v0_f1c8 = phi i1 [ true, %dec_label_pc_f1a4 ], [ %v8_f1b8, %bb297 ]
  %v1_f1bc = urem i32 %v3_f1ac, 256
  store i32 %v1_f1bc, i32* %ip.global-to-local, align 4
  %v1_f1c0 = urem i32 %v3_f1b0, 256
  store i32 %v1_f1c0, i32* %r2.global-to-local, align 4
  %v1_f1c4 = and i32 %v0_f1a4, 8388608
  %v2_f1c4 = icmp ne i32 %v1_f1c4, 0
  store i1 %v2_f1c4, i1* %cpsr_c.global-to-local, align 1
  %v3_f1c4 = udiv i32 %v0_f1a4, 16777216
  store i32 %v3_f1c4, i32* %r0.global-to-local, align 4
  br i1 %v0_f1c8, label %dec_label_pc_f1a4, label %dec_label_pc_f1cc

dec_label_pc_f1cc:                                ; preds = %bb298
  %v2_f1cc = icmp ugt i32 %v1_f1a8, 2
  store i1 %v2_f1cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f1cc = icmp eq i32 %v1_f1a8, 3
  store i1 %v7_f1cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1cc, label %dec_label_pc_f1a4, label %dec_label_pc_f1d4

dec_label_pc_f1d4:                                ; preds = %dec_label_pc_f1cc
  %v1_f1d4 = add nsw i32 %v1_f1a8, -15
  store i32 %v1_f1d4, i32* %r3.global-to-local, align 4
  %v2_f1d8 = icmp ugt i32 %v1_f1a8, 55
  store i1 %v2_f1d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f1d8 = icmp eq i32 %v1_f1a8, 56
  store i1 %v7_f1d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1d8, label %dec_label_pc_f1a4, label %bb299

bb299:                                            ; preds = %dec_label_pc_f1d4
  %v3_f1dc = icmp ne i32 %v1_f1d4, 0
  store i1 %v3_f1dc, i1* %cpsr_c.global-to-local, align 1
  %v8_f1dc = icmp eq i32 %v1_f1d4, 1
  store i1 %v8_f1dc, i1* %cpsr_z.global-to-local, align 1
  %v2_f1e0 = xor i1 %v3_f1dc, true
  %v3_f1e0 = or i1 %v8_f1dc, %v2_f1e0
  br i1 %v3_f1e0, label %dec_label_pc_f1a4, label %dec_label_pc_f1e4

dec_label_pc_f1e4:                                ; preds = %bb299
  %v2_f1e4 = icmp ugt i32 %v1_f1a8, 9
  store i1 %v2_f1e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f1e4 = icmp eq i32 %v1_f1a8, 10
  store i1 %v7_f1e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1e4, label %dec_label_pc_f1a4, label %dec_label_pc_f1ec

dec_label_pc_f1ec:                                ; preds = %dec_label_pc_f1e4
  %v2_f1ec = icmp ugt i32 %v1_f1a8, 191
  store i1 %v2_f1ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f1ec = icmp eq i32 %v1_f1a8, 192
  store i1 %v7_f1ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1ec, label %bb300, label %dec_label_pc_f1f8

bb300:                                            ; preds = %dec_label_pc_f1ec
  %v3_f1f0 = icmp ugt i32 %v1_f1bc, 167
  store i1 %v3_f1f0, i1* %cpsr_c.global-to-local, align 1
  %v8_f1f0 = icmp eq i32 %v1_f1bc, 168
  store i1 %v8_f1f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f1f0, label %dec_label_pc_f1a4, label %dec_label_pc_f1f8

dec_label_pc_f1f8:                                ; preds = %dec_label_pc_f1ec, %bb300
  %v7_f1f8 = icmp eq i32 %v1_f1a8, 172
  %.371 = zext i1 %v7_f1f8 to i32
  store i32 %.371, i32* %r3.global-to-local, align 4
  %v2_f204 = icmp ugt i32 %v1_f1bc, 14
  store i1 %v2_f204, i1* %cpsr_c.global-to-local, align 1
  %v7_f204 = icmp eq i32 %v1_f1bc, 15
  store i1 %v7_f204, i1* %cpsr_z.global-to-local, align 1
  %v2_f208 = xor i1 %v2_f204, true
  %v3_f208 = or i1 %v7_f204, %v2_f208
  br i1 %v3_f208, label %.thread11, label %bb303

.thread11:                                        ; preds = %dec_label_pc_f1f8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f21c

bb303:                                            ; preds = %dec_label_pc_f1f8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f20c = icmp eq i1 %v7_f1f8, false
  store i1 %v2_f20c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f20c, label %dec_label_pc_f21c, label %dec_label_pc_f214

dec_label_pc_f214:                                ; preds = %bb303
  %v2_f214 = icmp ugt i32 %v1_f1bc, 30
  store i1 %v2_f214, i1* %cpsr_c.global-to-local, align 1
  %v7_f214 = icmp eq i32 %v1_f1bc, 31
  store i1 %v7_f214, i1* %cpsr_z.global-to-local, align 1
  %v2_f218 = xor i1 %v2_f214, true
  %v3_f218 = or i1 %v7_f214, %v2_f218
  br i1 %v3_f218, label %dec_label_pc_f1a4, label %dec_label_pc_f21c

dec_label_pc_f21c:                                ; preds = %.thread11, %dec_label_pc_f214, %bb303
  %v7_f21c = icmp eq i32 %v1_f1a8, 100
  %.372 = zext i1 %v7_f21c to i32
  store i32 %.372, i32* %r3.global-to-local, align 4
  %v2_f228 = icmp ugt i32 %v1_f1bc, 62
  store i1 %v2_f228, i1* %cpsr_c.global-to-local, align 1
  %v7_f228 = icmp eq i32 %v1_f1bc, 63
  store i1 %v7_f228, i1* %cpsr_z.global-to-local, align 1
  %v2_f22c = xor i1 %v2_f228, true
  %v3_f22c = or i1 %v7_f228, %v2_f22c
  br i1 %v3_f22c, label %.thread16, label %bb306

.thread16:                                        ; preds = %dec_label_pc_f21c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f240

bb306:                                            ; preds = %dec_label_pc_f21c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f230 = icmp eq i1 %v7_f21c, false
  store i1 %v2_f230, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f230, label %dec_label_pc_f240, label %dec_label_pc_f238

dec_label_pc_f238:                                ; preds = %bb306
  %v2_f238 = icmp ugt i32 %v1_f1bc, 125
  store i1 %v2_f238, i1* %cpsr_c.global-to-local, align 1
  %v7_f238 = icmp eq i32 %v1_f1bc, 126
  store i1 %v7_f238, i1* %cpsr_z.global-to-local, align 1
  %v2_f23c = xor i1 %v2_f238, true
  %v3_f23c = or i1 %v7_f238, %v2_f23c
  br i1 %v3_f23c, label %dec_label_pc_f1a4, label %dec_label_pc_f240

dec_label_pc_f240:                                ; preds = %.thread16, %dec_label_pc_f238, %bb306
  %v2_f240 = icmp ugt i32 %v1_f1a8, 168
  store i1 %v2_f240, i1* %cpsr_c.global-to-local, align 1
  %v7_f240 = icmp eq i32 %v1_f1a8, 169
  store i1 %v7_f240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f240, label %bb307, label %dec_label_pc_f24c

bb307:                                            ; preds = %dec_label_pc_f240
  %v3_f244 = icmp eq i32 %v1_f1bc, 255
  store i1 %v3_f244, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f244, label %dec_label_pc_f1a4, label %dec_label_pc_f24c

dec_label_pc_f24c:                                ; preds = %dec_label_pc_f240, %bb307
  %v7_f24c = icmp eq i32 %v1_f1a8, 198
  %.373 = zext i1 %v7_f24c to i32
  store i32 %.373, i32* %r3.global-to-local, align 4
  %v2_f258 = icmp ugt i32 %v1_f1bc, 16
  store i1 %v2_f258, i1* %cpsr_c.global-to-local, align 1
  %v7_f258 = icmp eq i32 %v1_f1bc, 17
  store i1 %v7_f258, i1* %cpsr_z.global-to-local, align 1
  %v2_f25c = xor i1 %v2_f258, true
  %v3_f25c = or i1 %v7_f258, %v2_f25c
  br i1 %v3_f25c, label %.thread22, label %bb310

.thread22:                                        ; preds = %dec_label_pc_f24c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f270

bb310:                                            ; preds = %dec_label_pc_f24c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f260 = icmp eq i1 %v7_f24c, false
  store i1 %v2_f260, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f260, label %dec_label_pc_f270, label %dec_label_pc_f268

dec_label_pc_f268:                                ; preds = %bb310
  %v2_f268 = icmp ugt i32 %v1_f1bc, 18
  store i1 %v2_f268, i1* %cpsr_c.global-to-local, align 1
  %v7_f268 = icmp eq i32 %v1_f1bc, 19
  store i1 %v7_f268, i1* %cpsr_z.global-to-local, align 1
  %v2_f26c = xor i1 %v2_f268, true
  %v3_f26c = or i1 %v7_f268, %v2_f26c
  br i1 %v3_f26c, label %dec_label_pc_f1a4, label %dec_label_pc_f270

dec_label_pc_f270:                                ; preds = %.thread22, %dec_label_pc_f268, %bb310
  %v2_f270 = icmp ugt i32 %v1_f1a8, 222
  store i1 %v2_f270, i1* %cpsr_c.global-to-local, align 1
  %v7_f270 = icmp eq i32 %v1_f1a8, 223
  store i1 %v7_f270, i1* %cpsr_z.global-to-local, align 1
  %v2_f274 = xor i1 %v7_f270, true
  %v3_f274 = and i1 %v2_f270, %v2_f274
  br i1 %v3_f274, label %dec_label_pc_f1a4, label %dec_label_pc_f278

dec_label_pc_f278:                                ; preds = %dec_label_pc_f270
  %v7_f278 = icmp eq i32 %v1_f1a8, 106
  %.374 = zext i1 %v7_f278 to i32
  store i32 %.374, i32* @lr, align 4
  %v2_f284 = icmp ugt i32 %v1_f1bc, 185
  store i1 %v2_f284, i1* %cpsr_c.global-to-local, align 1
  %v7_f284 = icmp eq i32 %v1_f1bc, 186
  store i1 %v7_f284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f284, label %bb313, label %dec_label_pc_f290

bb313:                                            ; preds = %dec_label_pc_f278
  %v2_f278 = icmp ugt i32 %v1_f1a8, 105
  store i1 %v2_f278, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_f278, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f278, label %dec_label_pc_f1a4, label %dec_label_pc_f290

dec_label_pc_f290:                                ; preds = %dec_label_pc_f278, %bb313
  %v2_f290 = icmp ugt i32 %v1_f1bc, 186
  store i1 %v2_f290, i1* %cpsr_c.global-to-local, align 1
  %v7_f290 = icmp eq i32 %v1_f1bc, 187
  store i1 %v7_f290, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f290, label %.thread27, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_f290
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f2a4

.thread27:                                        ; preds = %dec_label_pc_f290
  store i32 %.374, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f29c = icmp eq i1 %v7_f278, false
  store i1 %v2_f29c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f29c, label %dec_label_pc_f2a4, label %dec_label_pc_f1a4

dec_label_pc_f2a4:                                ; preds = %.thread28, %.thread27
  %v2_f2a4 = icmp ugt i32 %v1_f1bc, 184
  store i1 %v2_f2a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f2a4 = icmp eq i32 %v1_f1bc, 185
  store i1 %v7_f2a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2a4, label %.thread31, label %.thread32

.thread32:                                        ; preds = %dec_label_pc_f2a4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f2b8

.thread31:                                        ; preds = %dec_label_pc_f2a4
  store i32 %.374, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f2b0 = icmp eq i1 %v7_f278, false
  store i1 %v2_f2b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f2b0, label %dec_label_pc_f2b8, label %dec_label_pc_f1a4

dec_label_pc_f2b8:                                ; preds = %.thread32, %.thread31
  %v2_f2b8 = icmp ugt i32 %v1_f1bc, 183
  store i1 %v2_f2b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2b8 = icmp eq i32 %v1_f1bc, 184
  store i1 %v7_f2b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2b8, label %.thread35, label %.thread36

.thread36:                                        ; preds = %dec_label_pc_f2b8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f2cc

.thread35:                                        ; preds = %dec_label_pc_f2b8
  store i32 %.374, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f2c4 = icmp eq i1 %v7_f278, false
  store i1 %v2_f2c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f2c4, label %dec_label_pc_f2cc, label %dec_label_pc_f1a4

dec_label_pc_f2cc:                                ; preds = %.thread36, %.thread35
  %v2_f2cc = icmp ugt i32 %v1_f1a8, 149
  store i1 %v2_f2cc, i1* %cpsr_c.global-to-local, align 1
  %v7_f2cc = icmp eq i32 %v1_f1a8, 150
  store i1 %v7_f2cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2cc, label %bb314, label %dec_label_pc_f2d8

bb314:                                            ; preds = %dec_label_pc_f2cc
  %v3_f2d0 = icmp ugt i32 %v1_f1bc, 30
  store i1 %v3_f2d0, i1* %cpsr_c.global-to-local, align 1
  %v8_f2d0 = icmp eq i32 %v1_f1bc, 31
  store i1 %v8_f2d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f2d0, label %dec_label_pc_f1a4, label %dec_label_pc_f2d8

dec_label_pc_f2d8:                                ; preds = %dec_label_pc_f2cc, %bb314
  %v2_f2d8 = icmp ugt i32 %v1_f1a8, 48
  store i1 %v2_f2d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f2d8 = icmp eq i32 %v1_f1a8, 49
  store i1 %v7_f2d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2d8, label %bb315, label %dec_label_pc_f2e4

bb315:                                            ; preds = %dec_label_pc_f2d8
  %v3_f2dc = icmp ugt i32 %v1_f1bc, 50
  store i1 %v3_f2dc, i1* %cpsr_c.global-to-local, align 1
  %v8_f2dc = icmp eq i32 %v1_f1bc, 51
  store i1 %v8_f2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f2dc, label %dec_label_pc_f1a4, label %dec_label_pc_f2e4

dec_label_pc_f2e4:                                ; preds = %dec_label_pc_f2d8, %bb315
  %v2_f2e4 = icmp ugt i32 %v1_f1a8, 177
  store i1 %v2_f2e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f2e4 = icmp eq i32 %v1_f1a8, 178
  store i1 %v7_f2e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2e4, label %bb316, label %dec_label_pc_f2f0

bb316:                                            ; preds = %dec_label_pc_f2e4
  %v3_f2e8 = icmp ugt i32 %v1_f1bc, 61
  store i1 %v3_f2e8, i1* %cpsr_c.global-to-local, align 1
  %v8_f2e8 = icmp eq i32 %v1_f1bc, 62
  store i1 %v8_f2e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f2e8, label %dec_label_pc_f1a4, label %dec_label_pc_f2f0

dec_label_pc_f2f0:                                ; preds = %dec_label_pc_f2e4, %bb316
  %v2_f2f0 = icmp ugt i32 %v1_f1a8, 159
  store i1 %v2_f2f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f2f0 = icmp eq i32 %v1_f1a8, 160
  store i1 %v7_f2f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2f0, label %bb317, label %dec_label_pc_f2fc

bb317:                                            ; preds = %dec_label_pc_f2f0
  %v3_f2f4 = icmp ugt i32 %v1_f1bc, 12
  store i1 %v3_f2f4, i1* %cpsr_c.global-to-local, align 1
  %v8_f2f4 = icmp eq i32 %v1_f1bc, 13
  store i1 %v8_f2f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f2f4, label %dec_label_pc_f1a4, label %dec_label_pc_f2fc

dec_label_pc_f2fc:                                ; preds = %dec_label_pc_f2f0, %bb317
  %v1_f2fc = add nsw i32 %v1_f1a8, -6
  store i32 %v1_f2fc, i32* %r3.global-to-local, align 4
  %v2_f300 = icmp ugt i32 %v1_f1a8, 10
  store i1 %v2_f300, i1* %cpsr_c.global-to-local, align 1
  %v7_f300 = icmp eq i32 %v1_f1a8, 11
  store i1 %v7_f300, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f300, label %dec_label_pc_f1a4, label %bb318

bb318:                                            ; preds = %dec_label_pc_f2fc
  %v3_f304 = icmp ne i32 %v1_f2fc, 0
  store i1 %v3_f304, i1* %cpsr_c.global-to-local, align 1
  %v8_f304 = icmp eq i32 %v1_f2fc, 1
  store i1 %v8_f304, i1* %cpsr_z.global-to-local, align 1
  %v2_f308 = xor i1 %v3_f304, true
  %v3_f308 = or i1 %v8_f304, %v2_f308
  br i1 %v3_f308, label %dec_label_pc_f1a4, label %dec_label_pc_f30c

dec_label_pc_f30c:                                ; preds = %bb318
  %v2_f30c = icmp ugt i32 %v1_f1a8, 21
  store i1 %v2_f30c, i1* %cpsr_c.global-to-local, align 1
  %v7_f30c = icmp eq i32 %v1_f1a8, 22
  store i1 %v7_f30c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f30c, label %dec_label_pc_f1a4, label %bb319

bb319:                                            ; preds = %dec_label_pc_f30c
  %v3_f310 = icmp ugt i32 %v1_f1a8, 20
  store i1 %v3_f310, i1* %cpsr_c.global-to-local, align 1
  %v8_f310 = icmp eq i32 %v1_f1a8, 21
  store i1 %v8_f310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f310, label %dec_label_pc_f1a4, label %dec_label_pc_f318

dec_label_pc_f318:                                ; preds = %bb319
  %v2_f318 = icmp ugt i32 %v1_f1a8, 27
  store i1 %v2_f318, i1* %cpsr_c.global-to-local, align 1
  %v7_f318 = icmp eq i32 %v1_f1a8, 28
  store i1 %v7_f318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f318, label %dec_label_pc_f1a4, label %bb320

bb320:                                            ; preds = %dec_label_pc_f318
  %v3_f31c = icmp ugt i32 %v1_f1a8, 25
  store i1 %v3_f31c, i1* %cpsr_c.global-to-local, align 1
  %v8_f31c = icmp eq i32 %v1_f1a8, 26
  store i1 %v8_f31c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f31c, label %dec_label_pc_f1a4, label %dec_label_pc_f324

dec_label_pc_f324:                                ; preds = %bb320
  %v2_f324 = icmp ugt i32 %v1_f1a8, 29
  store i1 %v2_f324, i1* %cpsr_c.global-to-local, align 1
  %v7_f324 = icmp eq i32 %v1_f1a8, 30
  store i1 %v7_f324, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f324, label %dec_label_pc_f1a4, label %bb321

bb321:                                            ; preds = %dec_label_pc_f324
  %v3_f328 = icmp ugt i32 %v1_f1a8, 28
  store i1 %v3_f328, i1* %cpsr_c.global-to-local, align 1
  %v8_f328 = icmp eq i32 %v1_f1a8, 29
  store i1 %v8_f328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f328, label %dec_label_pc_f1a4, label %dec_label_pc_f330

dec_label_pc_f330:                                ; preds = %bb321
  %v2_f330 = icmp ugt i32 %v1_f1a8, 54
  store i1 %v2_f330, i1* %cpsr_c.global-to-local, align 1
  %v7_f330 = icmp eq i32 %v1_f1a8, 55
  store i1 %v7_f330, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f330, label %dec_label_pc_f1a4, label %bb322

bb322:                                            ; preds = %dec_label_pc_f330
  %v3_f334 = icmp ugt i32 %v1_f1a8, 32
  store i1 %v3_f334, i1* %cpsr_c.global-to-local, align 1
  %v8_f334 = icmp eq i32 %v1_f1a8, 33
  store i1 %v8_f334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f334, label %dec_label_pc_f1a4, label %dec_label_pc_f33c

dec_label_pc_f33c:                                ; preds = %bb322
  %v2_f33c = icmp ugt i32 %v1_f1a8, 214
  store i1 %v2_f33c, i1* %cpsr_c.global-to-local, align 1
  %v7_f33c = icmp eq i32 %v1_f1a8, 215
  store i1 %v7_f33c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f33c, label %.thread51, label %bb323

bb323:                                            ; preds = %dec_label_pc_f33c
  %v3_f340 = icmp ugt i32 %v1_f1a8, 213
  store i1 %v3_f340, i1* %cpsr_c.global-to-local, align 1
  %v8_f340 = icmp eq i32 %v1_f1a8, 214
  store i1 %v8_f340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f340, label %bb324, label %dec_label_pc_f350

.thread51:                                        ; preds = %dec_label_pc_f33c
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f1a4

bb324:                                            ; preds = %bb323
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f1a4

dec_label_pc_f350:                                ; preds = %bb323
  store i32 0, i32* @r4, align 4
  %v5_f35c = call i32 @llvm.bswap.i32(i32 %v0_f1a4)
  store i32 %v5_f35c, i32* %r3.global-to-local, align 4
  %tmp325 = and i32 %v0_f1a4, 65280
  %tmp326 = call i32 @llvm.bswap.i32(i32 %tmp325)
  %v1_f364 = and i32 %v5_f35c, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v3_f368 = mul nuw i32 %v3_f1c4, 16777216
  %v3_f36c = udiv i32 %tmp326, 256
  %v4_f370 = mul i32 %v1_f364, 256
  %tmp327 = and i32 %v0_f1a4, 32768
  %v3_f374 = icmp ne i32 %tmp327, 0
  store i1 %v3_f374, i1* %cpsr_c.global-to-local, align 1
  %v4_f374 = udiv i32 %v5_f35c, 16777216
  store i32 ptrtoint (i8** @global_var_1c564.147 to i32), i32* @r0, align 4
  %v5_f374 = or i32 %v4_f374, %v3_f368
  %v5_f370 = or i32 %v5_f374, %v4_f370
  %v2_f37c = or i32 %v5_f370, %v3_f36c
  store i32 %v2_f37c, i32* %r2.global-to-local, align 4
  %v5_f380 = trunc i32 %v4_f374 to i8
  store i8 %v5_f380, i8* @global_var_1c574.194, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1c56e.195 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1c56f.196 to i8*), align 4
  %v3_f390 = call i32 @function_d0b8(i32 ptrtoint (i8** @global_var_1c564.147 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1c564.147 to i32), i32* %ip.global-to-local, align 4
  %sext7 = mul i32 %v3_f390, 16777216
  %v1_f398 = sdiv i32 %sext7, 16777216
  store i32 %v1_f398, i32* %r3.global-to-local, align 4
  %v2_f39c = and i32 %v1_f398, 128
  %v3_f39c = icmp ne i32 %v2_f39c, 0
  store i1 %v3_f39c, i1* %cpsr_c.global-to-local, align 1
  %v4_f39c = ashr i32 %sext7, 31
  store i32 %v4_f39c, i32* %r2.global-to-local, align 4
  %v1_f3a0 = trunc i32 %v1_f398 to i8
  store i8 %v1_f3a0, i8* bitcast (i32* @global_var_1c56e.195 to i8*), align 4
  %v1_f3a4 = trunc i32 %v4_f39c to i8
  store i8 %v1_f3a4, i8* bitcast (i32* @global_var_1c56f.196 to i8*), align 4
  %v3_f3a8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f3a8, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_f3b0 = call i32 @function_113c8(i32 %v3_f3a8, i32 10)
  store i32 %v4_f3b0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3b4 = icmp eq i32 %v4_f3b0, 0
  store i1 %v2_f3b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f3b4, label %.thread231, label %bb328

.thread231:                                       ; preds = %dec_label_pc_f350
  store i32 ptrtoint (i32* @global_var_1c578.151 to i32), i32* @lr, align 4
  br label %.thread61.thread104

bb328:                                            ; preds = %dec_label_pc_f350
  store i32 ptrtoint (i32* @global_var_1c578.151 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_f3c4 = load i32, i32* @r4, align 4
  %v2_f3c4 = trunc i32 %v1_f3c4 to i8
  store i8 %v2_f3c4, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1c578.151 to i32), i32 2) to i8*), align 2
  %v0_f3c8.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f3c8.pr.pre, label %.thread61.thread104, label %.thread58

.thread58:                                        ; preds = %bb328
  %v1_f3c8 = load i32, i32* %r3.global-to-local, align 4
  %v2_f3c8 = trunc i32 %v1_f3c8 to i8
  %v3_f3c8 = load i32, i32* %r0.global-to-local, align 4
  %v4_f3c8 = add i32 %v3_f3c8, 3
  %v5_f3c8 = inttoptr i32 %v4_f3c8 to i8*
  store i8 %v2_f3c8, i8* %v5_f3c8, align 1
  %v0_f3d0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1c564.147 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_f3d0.pr.pr, label %.thread64, label %.thread66

.thread61.thread104:                              ; preds = %bb328, %.thread231
  store i32 ptrtoint (i8** @global_var_1c564.147 to i32), i32* %r0.global-to-local, align 4
  br label %.thread64

.thread64:                                        ; preds = %.thread58, %.thread61.thread104
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_f3d8 = load i32, i32* @lr, align 4
  %v4_f3d8 = add i32 %v3_f3d8, 2
  %v5_f3d8 = inttoptr i32 %v4_f3d8 to i8*
  store i8 9, i8* %v5_f3d8, align 1
  %v0_f3dc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f3dc.pr.pr, label %bb329, label %.thread66

bb329:                                            ; preds = %.thread64
  %v1_f3dc = load i32, i32* %r2.global-to-local, align 4
  %v2_f3dc = trunc i32 %v1_f3dc to i8
  %v3_f3dc = load i32, i32* @lr, align 4
  %v4_f3dc = add i32 %v3_f3dc, 3
  %v5_f3dc = inttoptr i32 %v4_f3dc to i8*
  store i8 %v2_f3dc, i8* %v5_f3dc, align 1
  br label %.thread66

.thread66:                                        ; preds = %.thread58, %.thread64, %bb329
  %v4_f3e0 = load i8, i8* @global_var_1c574.194, align 1
  %v5_f3e0 = sext i8 %v4_f3e0 to i32
  store i32 %v5_f3e0, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c578.151 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c578.151 to i32), i32* @r1, align 4
  store i8 %v4_f3e0, i8* @global_var_1c57c.197, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_f3f8 = load i32, i32* %sl.global-to-local, align 4
  %v1_f3f8 = trunc i32 %v0_f3f8 to i8
  store i8 %v1_f3f8, i8* bitcast (i32* @global_var_1c588.198 to i8*), align 4
  store i8 %v1_f3f8, i8* bitcast (i32* @global_var_1c589.199 to i8*), align 4
  %v5_f400 = call i32 @function_d114(i32 ptrtoint (i8** @global_var_1c564.147 to i32), i32 ptrtoint (i32* @global_var_1c578.151 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_f400, 16777216
  %v1_f408 = sdiv i32 %sext, 16777216
  %v3_f410 = ashr i32 %sext, 31
  %v2_f414 = load i32, i32* @global_var_1c578.151, align 4
  %v1_f41c = trunc i32 %v3_f410 to i8
  store i8 %v1_f41c, i8* bitcast (i32* @global_var_1c589.199 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_f430 = load i8, i8* @global_var_1c574.194, align 1
  %v4_f430 = sext i8 %v3_f430 to i32
  store i32 %v4_f430, i32* @r4, align 4
  %v2_f434 = load i32, i32* @global_var_1c5fc.145, align 4
  store i32 %v2_f434, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c578.151 to i32), i32* %ip.global-to-local, align 4
  %v1_f444 = and i32 %v2_f414, 8388608
  %v2_f444 = icmp ne i32 %v1_f444, 0
  store i1 %v2_f444, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1c564.147 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v1_f458 = trunc i32 %v1_f408 to i8
  store i8 %v1_f458, i8* bitcast (i32* @global_var_1c588.198 to i8*), align 4
  store i32 %v2_f460, i32* %lr.global-to-local, align 4
  %v8_f470 = call i32 @function_11e28(i32 %v2_f434, i32* bitcast (i8** @global_var_1c564.147 to i32*), i32 40, i32 16384, i32 %v2_f460, i32 16)
  store i32 %v8_f470, i32* %r0.global-to-local, align 4
  %v3_f474 = load i32, i32* %stack_var_-52, align 4
  %v1_f478 = add i32 %v3_f474, 1
  store i32 %v1_f478, i32* %r3.global-to-local, align 4
  %v3_f47c = icmp ugt i32 %v1_f478, 383
  store i1 %v3_f47c, i1* %cpsr_c.global-to-local, align 1
  %v8_f47c = icmp eq i32 %v1_f478, 384
  store i1 %v8_f47c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f478, i32* %stack_var_-52, align 4
  %v5_f484 = icmp slt i32 %v1_f478, 384
  br i1 %v5_f484, label %.thread66.dec_label_pc_f174_crit_edge, label %dec_label_pc_f488

.thread66.dec_label_pc_f174_crit_edge:            ; preds = %.thread66
  %v0_f174.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f174

dec_label_pc_f488:                                ; preds = %.thread66
  %v0_f488 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_f488, i32* @fp, align 4
  br label %dec_label_pc_f48c

dec_label_pc_f48c:                                ; preds = %dec_label_pc_f158, %dec_label_pc_f488
  %v0_f48c = call i32 @function_11b48()
  store i32 %v0_f48c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v0_f48c, i32* @sb, align 4
  %v6_f4c4 = inttoptr i32 %v0_f4fc to i32*
  %v1_f4ec = add i32 %v0_f4fc, 16
  %v2_f4ec = inttoptr i32 %v1_f4ec to i32*
  %v4_f508 = ptrtoint i8* %stack_var_-1876.0 to i32
  %v1_f510 = add i32 %v4_f508, 1
  %v2_f510 = inttoptr i32 %v1_f510 to i8*
  %v1_f534 = add i32 %v4_f508, 2
  %v2_f534 = inttoptr i32 %v1_f534 to i8*
  %v1_f538 = add i32 %v4_f508, 3
  %v2_f538 = inttoptr i32 %v1_f538 to i8*
  %v4_f53c = sext i8 %stack_var_-1868.0 to i32
  %v1_f550 = add i32 %v4_f508, 13
  %v2_f550 = inttoptr i32 %v1_f550 to i8*
  %v1_f61c = bitcast i8* %stack_var_-1876.0 to i32*
  %v1_f4fc = add i32 %v0_f4fc, 9
  %v2_f4fc = inttoptr i32 %v1_f4fc to i8*
  %v1_f574 = add i32 %v4_f508, 8
  %v2_f574 = inttoptr i32 %v1_f574 to i32*
  %v1_f5b4 = add i32 %v0_f4fc, 12
  %v2_f5b4 = inttoptr i32 %v1_f5b4 to i32*
  br label %dec_label_pc_f498

dec_label_pc_f498:                                ; preds = %dec_label_pc_f574, %dec_label_pc_f56c, %dec_label_pc_f564, %dec_label_pc_f530, %dec_label_pc_f520, %dec_label_pc_f4fc, %dec_label_pc_f4e4, %dec_label_pc_f55c, %dec_label_pc_f54c, %dec_label_pc_f4dc, %dec_label_pc_f614, %dec_label_pc_f48c
  %v1_f49c = phi i32 [ %v0_f48c, %dec_label_pc_f48c ], [ %v1_f49c.pre.pre, %dec_label_pc_f614 ], [ %v0_f4d0, %dec_label_pc_f4dc ], [ %v0_f4d0, %dec_label_pc_f54c ], [ %v0_f4d0, %dec_label_pc_f55c ], [ %v0_f4d0, %dec_label_pc_f4e4 ], [ %v0_f4d0, %dec_label_pc_f4fc ], [ %v0_f4d0, %dec_label_pc_f520 ], [ %v0_f4d0, %dec_label_pc_f530 ], [ %v0_f4d0, %dec_label_pc_f564 ], [ %v0_f4d0, %dec_label_pc_f56c ], [ %v0_f4d0, %dec_label_pc_f574 ]
  %v2_f49c = inttoptr i32 %v1_f49c to i32*
  store i32 0, i32* %v2_f49c, align 4
  %v2_f4a8 = load i32, i32* @global_var_1c5fc.145, align 4
  store i32 %v2_f4a8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_f4fc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_f4c4 = call i32 @function_11dc8(i32 %v2_f4a8, i32* %v6_f4c4, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_f4c4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f4c8 = icmp eq i32 %v7_f4c4, 0
  store i1 %v2_f4c8, i1* %cpsr_z.global-to-local, align 1
  %tmp330 = icmp slt i32 %v7_f4c4, 1
  br i1 %tmp330, label %dec_label_pc_f6e0, label %dec_label_pc_f4d0

dec_label_pc_f4d0:                                ; preds = %dec_label_pc_f498
  %v0_f4d0 = load i32, i32* @sb, align 4
  %v1_f4d0 = inttoptr i32 %v0_f4d0 to i32*
  %v2_f4d0 = load i32, i32* %v1_f4d0, align 4
  store i32 %v2_f4d0, i32* %r3.global-to-local, align 4
  %v2_f4d4 = icmp ugt i32 %v2_f4d0, 10
  store i1 %v2_f4d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f4d4 = icmp eq i32 %v2_f4d0, 11
  store i1 %v7_f4d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f4d4, label %dec_label_pc_f6e0, label %dec_label_pc_f4dc

dec_label_pc_f4dc:                                ; preds = %dec_label_pc_f4d0
  %v2_f4dc = icmp ugt i32 %v7_f4c4, 38
  store i1 %v2_f4dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f4dc = icmp eq i32 %v7_f4c4, 39
  store i1 %v7_f4dc, i1* %cpsr_z.global-to-local, align 1
  %v2_f4e0 = xor i1 %v2_f4dc, true
  %v3_f4e0 = or i1 %v7_f4dc, %v2_f4e0
  br i1 %v3_f4e0, label %dec_label_pc_f498, label %dec_label_pc_f4e4

dec_label_pc_f4e4:                                ; preds = %dec_label_pc_f4dc
  store i32 %v0_f4fc, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c5dc.51 to i32), i32* %r0.global-to-local, align 4
  %v3_f4ec = load i32, i32* %v2_f4ec, align 4
  store i32 %v3_f4ec, i32* %r2.global-to-local, align 4
  %v2_f4f0 = load i32, i32* @global_var_1c5dc.51, align 4
  store i32 %v2_f4f0, i32* %r3.global-to-local, align 4
  %v3_f4f4 = icmp uge i32 %v3_f4ec, %v2_f4f0
  store i1 %v3_f4f4, i1* %cpsr_c.global-to-local, align 1
  %v9_f4f4 = icmp eq i32 %v3_f4ec, %v2_f4f0
  store i1 %v9_f4f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f4f4, label %dec_label_pc_f4fc, label %dec_label_pc_f498

dec_label_pc_f4fc:                                ; preds = %dec_label_pc_f4e4
  %v3_f4fc = load i8, i8* %v2_f4fc, align 1
  %v4_f4fc = zext i8 %v3_f4fc to i32
  store i32 %v4_f4fc, i32* %r3.global-to-local, align 4
  %v2_f500 = icmp ugt i8 %v3_f4fc, 5
  store i1 %v2_f500, i1* %cpsr_c.global-to-local, align 1
  %v7_f500 = icmp eq i8 %v3_f4fc, 6
  store i1 %v7_f500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f500, label %dec_label_pc_f508, label %dec_label_pc_f498

dec_label_pc_f508:                                ; preds = %dec_label_pc_f4fc
  store i32 %v4_f508, i32* %r1.global-to-local, align 4
  %v2_f50c = load i8, i8* %stack_var_-1876.0, align 1
  %v3_f50c = zext i8 %v2_f50c to i32
  store i32 %v3_f50c, i32* %r2.global-to-local, align 4
  %v3_f510 = load i8, i8* %v2_f510, align 1
  %v4_f510 = zext i8 %v3_f510 to i32
  store i32 %v4_f510, i32* %r3.global-to-local, align 4
  %v4_f514 = mul nuw nsw i32 %v4_f510, 256
  %v5_f514 = or i32 %v4_f514, %v3_f50c
  store i32 %v5_f514, i32* %r2.global-to-local, align 4
  %v2_f518 = icmp ugt i32 %v5_f514, 5887
  store i1 %v2_f518, i1* %cpsr_c.global-to-local, align 1
  %v7_f518 = icmp eq i32 %v5_f514, 5888
  store i1 %v7_f518, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f518, label %dec_label_pc_f530, label %dec_label_pc_f520

dec_label_pc_f520:                                ; preds = %dec_label_pc_f508
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_f528 = icmp ugt i32 %v5_f514, 4872
  store i1 %v3_f528, i1* %cpsr_c.global-to-local, align 1
  %v9_f528 = icmp eq i32 %v5_f514, 4873
  store i1 %v9_f528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f528, label %dec_label_pc_f530, label %dec_label_pc_f498

dec_label_pc_f530:                                ; preds = %dec_label_pc_f520, %dec_label_pc_f508
  store i32 %v4_f508, i32* %r2.global-to-local, align 4
  %v3_f534 = load i8, i8* %v2_f534, align 1
  %v4_f534 = zext i8 %v3_f534 to i32
  store i32 %v4_f534, i32* %r3.global-to-local, align 4
  %v3_f538 = load i8, i8* %v2_f538, align 1
  %v4_f538 = zext i8 %v3_f538 to i32
  store i32 %v4_f538, i32* %r2.global-to-local, align 4
  store i32 %v4_f53c, i32* %ip.global-to-local, align 4
  %v4_f540 = mul nuw nsw i32 %v4_f538, 256
  %v5_f540 = or i32 %v4_f540, %v4_f534
  store i32 %v5_f540, i32* %r3.global-to-local, align 4
  %v3_f544 = icmp uge i32 %v5_f540, %v4_f53c
  store i1 %v3_f544, i1* %cpsr_c.global-to-local, align 1
  %v9_f544 = icmp eq i32 %v5_f540, %v4_f53c
  store i1 %v9_f544, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f544, label %dec_label_pc_f54c, label %dec_label_pc_f498

dec_label_pc_f54c:                                ; preds = %dec_label_pc_f530
  store i32 %v4_f508, i32* %lr.global-to-local, align 4
  %v3_f550 = load i8, i8* %v2_f550, align 1
  %v4_f550 = zext i8 %v3_f550 to i32
  store i32 %v4_f550, i32* %r3.global-to-local, align 4
  %v1_f554 = and i32 %v4_f550, 2
  %v2_f554 = icmp eq i32 %v1_f554, 0
  store i1 %v2_f554, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f554, label %dec_label_pc_f498, label %dec_label_pc_f55c

dec_label_pc_f55c:                                ; preds = %dec_label_pc_f54c
  %v1_f55c = and i32 %v4_f550, 16
  %v2_f55c = icmp eq i32 %v1_f55c, 0
  store i1 %v2_f55c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f55c, label %dec_label_pc_f498, label %dec_label_pc_f564

dec_label_pc_f564:                                ; preds = %dec_label_pc_f55c
  %v1_f564 = and i32 %v4_f550, 4
  %v2_f564 = icmp eq i32 %v1_f564, 0
  store i1 %v2_f564, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f564, label %dec_label_pc_f56c, label %dec_label_pc_f498

dec_label_pc_f56c:                                ; preds = %dec_label_pc_f564
  %tmp477 = urem i8 %v3_f550, 2
  %v2_f56c = icmp eq i8 %tmp477, 0
  store i1 %v2_f56c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f56c, label %dec_label_pc_f574, label %dec_label_pc_f498

dec_label_pc_f574:                                ; preds = %dec_label_pc_f56c
  %v3_f574 = load i32, i32* %v2_f574, align 4
  %v1_f57c = and i32 %v3_f574, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v3_f580 = mul i32 %v3_f574, 16777216
  %v1_f578 = udiv i32 %v3_f574, 256
  %v3_f584 = and i32 %v1_f578, 65280
  %v4_f588 = mul i32 %v1_f57c, 256
  %v4_f58c = udiv i32 %v3_f574, 16777216
  %v5_f58c = or i32 %v4_f58c, %v3_f580
  %v5_f588 = or i32 %v5_f58c, %v4_f588
  %v2_f590 = or i32 %v5_f588, %v3_f584
  %v1_f594 = add i32 %v2_f590, -1
  %v1_f598 = udiv i32 %v1_f594, 256
  %v3_f59c = and i32 %v1_f598, 65280
  %v1_f5a0 = and i32 %v1_f594, 65280
  store i32 %v1_f5a0, i32* %r2.global-to-local, align 4
  %v3_f5a4 = mul i32 %v1_f594, 16777216
  %v4_f5a8 = udiv i32 %v1_f594, 16777216
  %v5_f5a8 = or i32 %v3_f59c, %v4_f5a8
  store i32 %v5_f5a8, i32* %r1.global-to-local, align 4
  store i32 %v0_f4fc, i32* %r3.global-to-local, align 4
  %v4_f5b0 = mul nuw nsw i32 %v1_f5a0, 256
  %v5_f5b0 = or i32 %v4_f5b0, %v3_f5a4
  store i32 %v5_f5b0, i32* %r0.global-to-local, align 4
  %v3_f5b4 = load i32, i32* %v2_f5b4, align 4
  store i32 %v3_f5b4, i32* %r2.global-to-local, align 4
  %v2_f5b8 = call i32 @llvm.bswap.i32(i32 %v1_f594)
  store i32 %v2_f5b8, i32* %ip.global-to-local, align 4
  %v3_f5bc = icmp uge i32 %v2_f5b8, %v3_f5b4
  store i1 %v3_f5bc, i1* %cpsr_c.global-to-local, align 1
  %v9_f5bc = icmp eq i32 %v2_f5b8, %v3_f5b4
  store i1 %v9_f5bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f5bc, label %dec_label_pc_f5c4, label %dec_label_pc_f498

dec_label_pc_f5c4:                                ; preds = %dec_label_pc_f574
  %v0_f5c4 = load i32, i32* @r4, align 4
  %v2_f5c4 = icmp ugt i32 %v0_f5c4, 254
  store i1 %v2_f5c4, i1* %cpsr_c.global-to-local, align 1
  %v7_f5c4 = icmp eq i32 %v0_f5c4, 255
  store i1 %v7_f5c4, i1* %cpsr_z.global-to-local, align 1
  %v8_f5c8 = icmp sgt i32 %v0_f5c4, 255
  br i1 %v8_f5c8, label %dec_label_pc_f6e0, label %dec_label_pc_f5cc

dec_label_pc_f5cc:                                ; preds = %dec_label_pc_f5c4
  store i32 ptrtoint (i32* @global_var_1c5f8.143 to i32), i32* %lr.global-to-local, align 4
  %v3_f5d0 = mul i32 %v0_f5c4, 256
  store i32 %v3_f5d0, i32* %r2.global-to-local, align 4
  %v2_f5d4 = load i32, i32* @global_var_1c5f8.143, align 4
  store i32 %v2_f5d4, i32* %r1.global-to-local, align 4
  %v2_f5dc = mul i32 %v0_f5c4, 288
  store i32 %v2_f5dc, i32* %r3.global-to-local, align 4
  %v2_f5e0 = add i32 %v2_f5d4, %v2_f5dc
  store i32 %v2_f5e0, i32* @r0, align 4
  %v1_f5e4 = add i32 %v2_f5e0, 12
  %v2_f5e4 = inttoptr i32 %v1_f5e4 to i32*
  %v3_f5e4 = load i32, i32* %v2_f5e4, align 4
  store i32 %v3_f5e4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f5e8 = icmp eq i32 %v3_f5e4, 0
  store i1 %v2_f5e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f5e8, label %dec_label_pc_f614, label %dec_label_pc_f5f4.preheader

dec_label_pc_f5f4.preheader:                      ; preds = %dec_label_pc_f5cc
  %v2_f5ec = add i32 %v2_f5e0, 288
  store i32 %v2_f5ec, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f5f4

dec_label_pc_f5f4:                                ; preds = %dec_label_pc_f5f4.preheader, %dec_label_pc_f600
  %v0_f600 = phi i32 [ %v2_f5ec, %dec_label_pc_f5f4.preheader ], [ %v1_f60c, %dec_label_pc_f600 ]
  %v0_f5f4 = phi i32 [ %v0_f5c4, %dec_label_pc_f5f4.preheader ], [ %v1_f5f4, %dec_label_pc_f600 ]
  %v1_f5f4 = add i32 %v0_f5f4, 1
  store i32 %v1_f5f4, i32* @r4, align 4
  %v7_f5f8 = icmp eq i32 %v1_f5f4, 256
  br i1 %v7_f5f8, label %dec_label_pc_f6e0.loopexit, label %dec_label_pc_f600

dec_label_pc_f600:                                ; preds = %dec_label_pc_f5f4
  store i32 %v0_f600, i32* @r0, align 4
  %v1_f604 = add i32 %v0_f600, 12
  %v2_f604 = inttoptr i32 %v1_f604 to i32*
  %v3_f604 = load i32, i32* %v2_f604, align 4
  %v2_f608 = icmp eq i32 %v3_f604, 0
  %v1_f60c = add i32 %v0_f600, 288
  store i32 %v1_f60c, i32* %r3.global-to-local, align 4
  br i1 %v2_f608, label %dec_label_pc_f614.loopexit, label %dec_label_pc_f5f4

dec_label_pc_f614.loopexit:                       ; preds = %dec_label_pc_f600
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f614

dec_label_pc_f614:                                ; preds = %dec_label_pc_f614.loopexit, %dec_label_pc_f5cc
  %v1_f614 = phi i32 [ %v0_f600, %dec_label_pc_f614.loopexit ], [ %v2_f5e0, %dec_label_pc_f5cc ]
  %v2_f614 = add i32 %v1_f614, 16
  %v3_f614 = inttoptr i32 %v2_f614 to i32*
  store i32 %v3_f5b4, i32* %v3_f614, align 4
  store i32 %v4_f508, i32* %r1.global-to-local, align 4
  %v2_f61c = load i32, i32* %v1_f61c, align 4
  store i32 %v2_f61c, i32* %r2.global-to-local, align 4
  %v1_f620 = and i32 %v2_f61c, 128
  %v2_f620 = icmp ne i32 %v1_f620, 0
  store i1 %v2_f620, i1* %cpsr_c.global-to-local, align 1
  %v3_f620 = sdiv i32 %v2_f61c, 256
  store i32 %v3_f620, i32* %r3.global-to-local, align 4
  %v1_f624 = trunc i32 %v3_f620 to i8
  %v2_f624 = load i32, i32* @r0, align 4
  %v3_f624 = add i32 %v2_f624, 21
  %v4_f624 = inttoptr i32 %v3_f624 to i8*
  store i8 %v1_f624, i8* %v4_f624, align 1
  %v0_f628 = load i32, i32* %r2.global-to-local, align 4
  %v1_f628 = trunc i32 %v0_f628 to i8
  %v2_f628 = load i32, i32* @r0, align 4
  %v3_f628 = add i32 %v2_f628, 20
  %v4_f628 = inttoptr i32 %v3_f628 to i8*
  store i8 %v1_f628, i8* %v4_f628, align 1
  %v0_f62c = call i32 @function_ebbc()
  store i32 %v0_f62c, i32* %r0.global-to-local, align 4
  %v1_f49c.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_f498

dec_label_pc_f634:                                ; preds = %dec_label_pc_104d0
  store i32 %v2_fa14, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f644 = load i32, i32* @r4, align 4
  store i32 %v0_f644, i32* %r0.global-to-local, align 4
  %v0_f648 = load i32, i32* @r5, align 4
  store i32 %v0_f648, i32* %stack_var_-56, align 4
  %v6_f64c = call i32 @function_11dfc(i32 %v0_f644, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_ff0c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f660 = load i32, i32* @r4, align 4
  store i32 %v0_f660, i32* %r0.global-to-local, align 4
  %v5_f664 = call i32 @function_11dfc(i32 %v0_f660, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_f66c = load i32, i32* @r6, align 4
  store i32 %v0_f66c, i32* %r2.global-to-local, align 4
  %v2_f670 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_f670, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f678 = load i32, i32* @r4, align 4
  store i32 %v0_f678, i32* %r0.global-to-local, align 4
  %v5_f67c = call i32 @function_11dfc(i32 %v0_f678, i32* nonnull %stack_var_-38, i32 %v0_f66c, i32 16384)
  %v0_f680 = load i32, i32* @sl, align 4
  %v1_f680 = add i32 %v0_f680, 12
  store i32 %v1_f680, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f68c = load i32, i32* @r4, align 4
  store i32 %v0_f68c, i32* %r0.global-to-local, align 4
  %v4_f690 = inttoptr i32 %v1_f680 to i32*
  %v5_f690 = call i32 @function_11dfc(i32 %v0_f68c, i32* %v4_f690, i32 1, i32 16384)
  store i32 %v5_f690, i32* %r0.global-to-local, align 4
  %v0_f694 = load i32, i32* @sl, align 4
  %v1_f694 = inttoptr i32 %v0_f694 to i32*
  %v2_f694 = load i32, i32* %v1_f694, align 4
  store i32 %v2_f694, i32* %r1.global-to-local, align 4
  %v1_f698 = add i32 %v0_f694, 12
  %v2_f698 = inttoptr i32 %v1_f698 to i8*
  %v3_f698 = load i8, i8* %v2_f698, align 1
  %v4_f698 = zext i8 %v3_f698 to i32
  store i32 %v4_f698, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f6a0 = load i32, i32* @r4, align 4
  store i32 %v0_f6a0, i32* %r0.global-to-local, align 4
  %v4_f6a4 = inttoptr i32 %v2_f694 to i32*
  %v5_f6a4 = call i32 @function_11dfc(i32 %v0_f6a0, i32* %v4_f6a4, i32 %v4_f698, i32 16384)
  %v0_f6a8 = load i32, i32* @sl, align 4
  %v1_f6a8 = add i32 %v0_f6a8, 13
  store i32 %v1_f6a8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f6b4 = load i32, i32* @r4, align 4
  store i32 %v0_f6b4, i32* %r0.global-to-local, align 4
  %v4_f6b8 = inttoptr i32 %v1_f6a8 to i32*
  %v5_f6b8 = call i32 @function_11dfc(i32 %v0_f6b4, i32* %v4_f6b8, i32 1, i32 16384)
  %v0_f6bc = load i32, i32* @r4, align 4
  store i32 %v0_f6bc, i32* %r0.global-to-local, align 4
  %v0_f6c0 = load i32, i32* @sl, align 4
  %v1_f6c0 = add i32 %v0_f6c0, 13
  %v2_f6c0 = inttoptr i32 %v1_f6c0 to i8*
  %v3_f6c0 = load i8, i8* %v2_f6c0, align 1
  %v4_f6c0 = zext i8 %v3_f6c0 to i32
  store i32 %v4_f6c0, i32* %r2.global-to-local, align 4
  %v1_f6c4 = add i32 %v0_f6c0, 4
  %v2_f6c4 = inttoptr i32 %v1_f6c4 to i32*
  %v3_f6c4 = load i32, i32* %v2_f6c4, align 4
  store i32 %v3_f6c4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f6cc = inttoptr i32 %v3_f6c4 to i32*
  %v5_f6cc = call i32 @function_11dfc(i32 %v0_f6bc, i32* %v4_f6cc, i32 %v4_f6c0, i32 16384)
  %v0_f6d0 = load i32, i32* @r4, align 4
  store i32 %v0_f6d0, i32* %r0.global-to-local, align 4
  %v1_f6d4 = call i32 @function_11574(i32 %v0_f6d0)
  store i32 %v1_f6d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f6d8

dec_label_pc_f6d8:                                ; preds = %dec_label_pc_104b4, %dec_label_pc_eef0, %dec_label_pc_f7c8, %dec_label_pc_f634
  %stack_var_-1872.1 = phi i32 [ %tmp260, %dec_label_pc_eef0 ], [ %stack_var_-1872.2, %dec_label_pc_104b4 ], [ %stack_var_-1872.2, %dec_label_pc_f634 ], [ %tmp260, %dec_label_pc_f7c8 ]
  %stack_var_-1868.1 = phi i8 [ %tmp261, %dec_label_pc_eef0 ], [ %stack_var_-1868.2, %dec_label_pc_104b4 ], [ %stack_var_-1868.2, %dec_label_pc_f634 ], [ %tmp261, %dec_label_pc_f7c8 ]
  %stack_var_-1876.1 = phi i8* [ %tmp289, %dec_label_pc_eef0 ], [ %stack_var_-1876.2, %dec_label_pc_104b4 ], [ %stack_var_-1876.2, %dec_label_pc_f634 ], [ %tmp289, %dec_label_pc_f7c8 ]
  %v0_f6d8 = load i32, i32* @r5, align 4
  store i32 %v0_f6d8, i32* %r0.global-to-local, align 4
  %v1_f6dc = call i32 @function_12914(i32 %v0_f6d8)
  store i32 %v1_f6dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f6e0

dec_label_pc_f6e0.loopexit:                       ; preds = %dec_label_pc_f5f4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f6e0

dec_label_pc_f6e0:                                ; preds = %dec_label_pc_f5c4, %dec_label_pc_f4d0, %dec_label_pc_f498, %dec_label_pc_f6e0.loopexit, %dec_label_pc_f6d8
  %stack_var_-1872.2 = phi i32 [ %stack_var_-1872.1, %dec_label_pc_f6d8 ], [ %v0_f4fc, %dec_label_pc_f6e0.loopexit ], [ %v0_f4fc, %dec_label_pc_f498 ], [ %v0_f4fc, %dec_label_pc_f4d0 ], [ %v0_f4fc, %dec_label_pc_f5c4 ]
  %stack_var_-1868.2 = phi i8 [ %stack_var_-1868.1, %dec_label_pc_f6d8 ], [ %stack_var_-1868.0, %dec_label_pc_f6e0.loopexit ], [ %stack_var_-1868.0, %dec_label_pc_f498 ], [ %stack_var_-1868.0, %dec_label_pc_f4d0 ], [ %stack_var_-1868.0, %dec_label_pc_f5c4 ]
  %stack_var_-1876.2 = phi i8* [ %stack_var_-1876.1, %dec_label_pc_f6d8 ], [ %stack_var_-1876.0, %dec_label_pc_f6e0.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_f498 ], [ %stack_var_-1876.0, %dec_label_pc_f4d0 ], [ %stack_var_-1876.0, %dec_label_pc_f5c4 ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1664, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_f6f4430 = load i32, i32* @sp, align 4
  %v3_f6f4431 = add i32 %v2_f6f4430, 1664
  %v4_f6f4432 = inttoptr i32 %v3_f6f4431 to i32*
  store i32 0, i32* %v4_f6f4432, align 4
  br label %dec_label_pc_f6e8.dec_label_pc_f6e8_crit_edge

dec_label_pc_f6e8.dec_label_pc_f6e8_crit_edge:    ; preds = %dec_label_pc_f6e0, %dec_label_pc_f6e8.dec_label_pc_f6e8_crit_edge
  %v0_f6e8.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_f6f4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_f6e8 = add i32 %v0_f6e8.pre, 1664
  store i32 %v1_f6e8, i32* %ip.global-to-local, align 4
  %v1_f6ec = add i32 %v0_f6e8.pre, 4
  store i32 %v1_f6ec, i32* %r3.global-to-local, align 4
  %v7_f6f0 = icmp eq i32 %v1_f6ec, 128
  %v2_f6f4 = load i32, i32* @sp, align 4
  %v3_f6f4 = add i32 %v2_f6f4, %v1_f6e8
  %v4_f6f4 = inttoptr i32 %v3_f6f4 to i32*
  store i32 %v0_f6f4.pre, i32* %v4_f6f4, align 4
  br i1 %v7_f6f0, label %dec_label_pc_f6fc, label %dec_label_pc_f6e8.dec_label_pc_f6e8_crit_edge

dec_label_pc_f6fc:                                ; preds = %dec_label_pc_f6e8.dec_label_pc_f6e8_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f6fc = load i32, i32* %r2.global-to-local, align 4
  %v1_f700424 = add i32 %v0_f6fc, 1536
  store i32 %v1_f700424, i32* %lr.global-to-local, align 4
  %v1_f704425 = add i32 %v0_f6fc, 4
  store i32 %v1_f704425, i32* %r3.global-to-local, align 4
  %v7_f708426 = icmp eq i32 %v1_f704425, 128
  %v2_f70c427 = load i32, i32* @sp, align 4
  %v3_f70c428 = add i32 %v2_f70c427, %v1_f700424
  %v4_f70c429 = inttoptr i32 %v3_f70c428 to i32*
  store i32 %v0_f6fc, i32* %v4_f70c429, align 4
  br i1 %v7_f708426, label %dec_label_pc_f714, label %dec_label_pc_f700.dec_label_pc_f700_crit_edge

dec_label_pc_f700.dec_label_pc_f700_crit_edge:    ; preds = %dec_label_pc_f6fc, %dec_label_pc_f700.dec_label_pc_f700_crit_edge
  %v0_f700.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_f70c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_f700 = add i32 %v0_f700.pre, 1536
  store i32 %v1_f700, i32* %lr.global-to-local, align 4
  %v1_f704 = add i32 %v0_f700.pre, 4
  store i32 %v1_f704, i32* %r3.global-to-local, align 4
  %v7_f708 = icmp eq i32 %v1_f704, 128
  %v2_f70c = load i32, i32* @sp, align 4
  %v3_f70c = add i32 %v2_f70c, %v1_f700
  %v4_f70c = inttoptr i32 %v3_f70c to i32*
  store i32 %v0_f70c.pre, i32* %v4_f70c, align 4
  br i1 %v7_f708, label %dec_label_pc_f714, label %dec_label_pc_f700.dec_label_pc_f700_crit_edge

dec_label_pc_f714:                                ; preds = %dec_label_pc_f700.dec_label_pc_f700_crit_edge, %dec_label_pc_f6fc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f714 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f714, i32* @r6, align 4
  store i32 %v0_f714, i32* @r5, align 4
  store i32 %v0_f714, i32* @r7, align 4
  store i32 %v0_f714, i32* %stack_var_-52, align 4
  %v2_f7e8 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_f790

dec_label_pc_f728:                                ; preds = %dec_label_pc_f7b8, %dec_label_pc_f790
  %storemerge244 = phi i32 [ 30, %dec_label_pc_f790 ], [ 5, %dec_label_pc_f7b8 ]
  store i32 %storemerge244, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c594.130 to i32), i32* %r2.global-to-local, align 4
  %v2_f72c = load i32, i32* @global_var_1c594.130, align 4
  store i32 %v2_f72c, i32* %r3.global-to-local, align 4
  %v1_f730 = add i32 %v2_f7a4, 8
  %v2_f730 = inttoptr i32 %v1_f730 to i32*
  %v3_f730 = load i32, i32* %v2_f730, align 4
  store i32 %v3_f730, i32* %r2.global-to-local, align 4
  %v2_f734 = sub i32 %v2_f72c, %v3_f730
  store i32 %v2_f734, i32* %r3.global-to-local, align 4
  %v3_f738 = icmp uge i32 %v2_f734, %storemerge244
  store i1 %v3_f738, i1* %cpsr_c.global-to-local, align 1
  %v9_f738 = icmp eq i32 %v2_f734, %storemerge244
  store i1 %v9_f738, i1* %cpsr_z.global-to-local, align 1
  %v2_f73c = xor i1 %v9_f738, true
  %v3_f73c = and i1 %v3_f738, %v2_f73c
  br i1 %v3_f73c, label %dec_label_pc_f80c, label %dec_label_pc_f740

dec_label_pc_f740:                                ; preds = %dec_label_pc_f728
  store i1 %v2_f7ac, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_f7ac, i1* %cpsr_z.global-to-local, align 1
  %v1_f7d8 = add i32 %v2_f7a4, 4
  %v2_f7d8 = inttoptr i32 %v1_f7d8 to i32*
  %v3_f7d8 = load i32, i32* %v2_f7d8, align 4
  br i1 %v7_f7ac, label %dec_label_pc_f7d8, label %dec_label_pc_f748

dec_label_pc_f748:                                ; preds = %dec_label_pc_f740
  store i32 %v3_f7d8, i32* %ip.global-to-local, align 4
  %v3_f750 = udiv i32 %v3_f7d8, 32
  store i32 %v2_f7e8, i32* %r0.global-to-local, align 4
  %v3_f758 = mul nuw nsw i32 %v3_f750, 4
  %v2_f75c = add i32 %v3_f758, %v2_f7e8
  store i32 %v2_f75c, i32* %r3.global-to-local, align 4
  %v1_f760 = add i32 %v2_f75c, -184
  %v2_f760 = inttoptr i32 %v1_f760 to i32*
  %v3_f760 = load i32, i32* %v2_f760, align 4
  %v1_f764 = urem i32 %v3_f7d8, 32
  store i32 %v1_f764, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_f76c = shl i32 1, %v1_f764
  %v8_f76c = or i32 %v3_f760, %v7_f76c
  store i32 %v8_f76c, i32* %r2.global-to-local, align 4
  store i32 %v8_f76c, i32* %v2_f760, align 4
  %v0_f774 = load i32, i32* @r6, align 4
  %v1_f774 = load i32, i32* %ip.global-to-local, align 4
  %v3_f774 = icmp uge i32 %v0_f774, %v1_f774
  store i1 %v3_f774, i1* %cpsr_c.global-to-local, align 1
  %v9_f774 = icmp eq i32 %v0_f774, %v1_f774
  store i1 %v9_f774, i1* %cpsr_z.global-to-local, align 1
  %v5_f778 = icmp slt i32 %v0_f774, %v1_f774
  br i1 %v5_f778, label %bb332, label %bb333

bb332:                                            ; preds = %dec_label_pc_f748
  store i32 %v1_f774, i32* @r6, align 4
  br label %bb333

bb333:                                            ; preds = %dec_label_pc_f7b8, %dec_label_pc_f84c, %dec_label_pc_f840, %bb335, %dec_label_pc_f748, %bb332
  %v3_f77c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f77c, i32* %r3.global-to-local, align 4
  %v1_f780 = add i32 %v3_f77c, 1
  store i32 %v1_f780, i32* %r2.global-to-local, align 4
  %v2_f784 = icmp ugt i32 %v1_f780, 254
  store i1 %v2_f784, i1* %cpsr_c.global-to-local, align 1
  %v7_f784 = icmp eq i32 %v1_f780, 255
  store i1 %v7_f784, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f780, i32* %stack_var_-52, align 4
  %v8_f78c = icmp sgt i32 %v1_f780, 255
  br i1 %v8_f78c, label %dec_label_pc_f858, label %dec_label_pc_f790

dec_label_pc_f790:                                ; preds = %bb333, %dec_label_pc_f714
  %v0_f79c = phi i32 [ %v1_f780, %bb333 ], [ %v0_f714, %dec_label_pc_f714 ]
  store i32 ptrtoint (i32* @global_var_1c5f8.143 to i32), i32* %r0.global-to-local, align 4
  %v3_f794 = mul i32 %v0_f79c, 256
  store i32 %v3_f794, i32* %r3.global-to-local, align 4
  %v2_f798 = load i32, i32* @global_var_1c5f8.143, align 4
  store i32 %v2_f798, i32* %r1.global-to-local, align 4
  %v2_f7a0 = mul i32 %v0_f79c, 288
  store i32 %v2_f7a0, i32* %r2.global-to-local, align 4
  %v2_f7a4 = add i32 %v2_f798, %v2_f7a0
  store i32 %v2_f7a4, i32* @r4, align 4
  %v1_f7a8 = add i32 %v2_f7a4, 12
  %v2_f7a8 = inttoptr i32 %v1_f7a8 to i32*
  %v3_f7a8 = load i32, i32* %v2_f7a8, align 4
  store i32 %v3_f7a8, i32* %ip.global-to-local, align 4
  %v2_f7ac = icmp ne i32 %v3_f7a8, 0
  store i1 %v2_f7ac, i1* %cpsr_c.global-to-local, align 1
  %v7_f7ac = icmp eq i32 %v3_f7a8, 1
  store i1 %v7_f7ac, i1* %cpsr_z.global-to-local, align 1
  %v2_f7b0 = xor i1 %v7_f7ac, true
  %v3_f7b0 = and i1 %v2_f7ac, %v2_f7b0
  br i1 %v3_f7b0, label %dec_label_pc_f728, label %dec_label_pc_f7b8

dec_label_pc_f7b8:                                ; preds = %dec_label_pc_f790
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f7b8 = icmp eq i32 %v3_f7a8, 0
  store i1 %v2_f7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f7b8, label %bb333, label %dec_label_pc_f728

dec_label_pc_f7c8:                                ; preds = %dec_label_pc_ef18
  store i32 ptrtoint (i32* @global_var_1c5fc.145 to i32), i32* %r2.global-to-local, align 4
  %v2_f7cc = load i32, i32* @global_var_1c5fc.145, align 4
  store i32 %v2_f7cc, i32* %r0.global-to-local, align 4
  %v1_f7d0 = call i32 @function_11574(i32 %v2_f7cc)
  store i32 %v1_f7d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f6d8

dec_label_pc_f7d8:                                ; preds = %dec_label_pc_f740
  store i32 %v3_f7d8, i32* %r0.global-to-local, align 4
  %v3_f7e0 = udiv i32 %v3_f7d8, 32
  %v3_f7e4 = mul nuw nsw i32 %v3_f7e0, 4
  store i32 %v2_f7e8, i32* %lr.global-to-local, align 4
  %v2_f7ec = add i32 %v3_f7e4, %v2_f7e8
  store i32 %v2_f7ec, i32* %r3.global-to-local, align 4
  %v1_f7f0 = add i32 %v2_f7ec, -312
  %v2_f7f0 = inttoptr i32 %v1_f7f0 to i32*
  %v3_f7f0 = load i32, i32* %v2_f7f0, align 4
  %v1_f7f4 = urem i32 %v3_f7d8, 32
  store i32 %v1_f7f4, i32* %r1.global-to-local, align 4
  %v7_f7f8 = shl i32 1, %v1_f7f4
  %v8_f7f8 = or i32 %v3_f7f0, %v7_f7f8
  store i32 %v8_f7f8, i32* %r2.global-to-local, align 4
  %v0_f7fc = load i32, i32* @r5, align 4
  %v3_f7fc = icmp uge i32 %v0_f7fc, %v3_f7d8
  store i1 %v3_f7fc, i1* %cpsr_c.global-to-local, align 1
  %v9_f7fc = icmp eq i32 %v0_f7fc, %v3_f7d8
  store i1 %v9_f7fc, i1* %cpsr_z.global-to-local, align 1
  %v5_f800 = icmp slt i32 %v0_f7fc, %v3_f7d8
  br i1 %v5_f800, label %bb334, label %bb335

bb334:                                            ; preds = %dec_label_pc_f7d8
  store i32 %v3_f7d8, i32* @r5, align 4
  br label %bb335

bb335:                                            ; preds = %dec_label_pc_f7d8, %bb334
  store i32 %v8_f7f8, i32* %v2_f7f0, align 4
  br label %bb333

dec_label_pc_f80c:                                ; preds = %dec_label_pc_f728
  %v1_f80c = add i32 %v2_f7a4, 4
  %v2_f80c = inttoptr i32 %v1_f80c to i32*
  %v3_f80c = load i32, i32* %v2_f80c, align 4
  store i32 %v3_f80c, i32* %r0.global-to-local, align 4
  %v1_f810 = call i32 @function_11574(i32 %v3_f80c)
  store i32 %v1_f810, i32* %r0.global-to-local, align 4
  %v0_f814 = load i32, i32* @r4, align 4
  %v1_f814 = add i32 %v0_f814, 12
  %v2_f814 = inttoptr i32 %v1_f814 to i32*
  %v3_f814 = load i32, i32* %v2_f814, align 4
  store i32 %v3_f814, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f81c = icmp ugt i32 %v3_f814, 1
  store i1 %v2_f81c, i1* %cpsr_c.global-to-local, align 1
  %v7_f81c = icmp eq i32 %v3_f814, 2
  store i1 %v7_f81c, i1* %cpsr_z.global-to-local, align 1
  %v2_f820 = add i32 %v0_f814, 4
  %v3_f820 = inttoptr i32 %v2_f820 to i32*
  store i32 -1, i32* %v3_f820, align 4
  %v2_f824 = xor i1 %v2_f81c, true
  %v3_f824 = or i1 %v7_f81c, %v2_f824
  br i1 %v3_f824, label %dec_label_pc_f84c, label %dec_label_pc_f828

dec_label_pc_f828:                                ; preds = %dec_label_pc_f80c
  %v0_f828 = load i32, i32* @r4, align 4
  %v1_f828 = add i32 %v0_f828, 284
  %v2_f828 = inttoptr i32 %v1_f828 to i8*
  %v3_f828 = load i8, i8* %v2_f828, align 1
  %v4_f828 = zext i8 %v3_f828 to i32
  %v1_f82c = add nuw nsw i32 %v4_f828, 1
  %v1_f830 = urem i32 %v1_f82c, 256
  store i32 %v1_f830, i32* %r3.global-to-local, align 4
  %v2_f834 = icmp ugt i32 %v1_f830, 9
  store i1 %v2_f834, i1* %cpsr_c.global-to-local, align 1
  %v7_f834 = icmp eq i32 %v1_f830, 10
  store i1 %v7_f834, i1* %cpsr_z.global-to-local, align 1
  %v1_f838 = trunc i32 %v1_f82c to i8
  store i8 %v1_f838, i8* %v2_f828, align 1
  %v0_f83c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f83c, label %dec_label_pc_f84c, label %dec_label_pc_f840

dec_label_pc_f840:                                ; preds = %dec_label_pc_f828
  %v0_f840 = load i32, i32* @r4, align 4
  store i32 %v0_f840, i32* @r0, align 4
  %v0_f844 = call i32 @function_ebbc()
  store i32 %v0_f844, i32* %r0.global-to-local, align 4
  br label %bb333

dec_label_pc_f84c:                                ; preds = %dec_label_pc_f828, %dec_label_pc_f80c
  %v0_f84c = load i32, i32* @r7, align 4
  %v1_f84c = load i32, i32* @r4, align 4
  %v2_f84c = add i32 %v1_f84c, 12
  %v3_f84c = inttoptr i32 %v2_f84c to i32*
  store i32 %v0_f84c, i32* %v3_f84c, align 4
  %v0_f850 = load i32, i32* @r7, align 4
  %v1_f850 = trunc i32 %v0_f850 to i8
  %v2_f850 = load i32, i32* @r4, align 4
  %v3_f850 = add i32 %v2_f850, 284
  %v4_f850 = inttoptr i32 %v3_f850 to i8*
  store i8 %v1_f850, i8* %v4_f850, align 1
  br label %bb333

dec_label_pc_f858:                                ; preds = %bb333
  store i32 1, i32* %stack_var_-64, align 4
  %v0_f860 = load i32, i32* @r6, align 4
  %v1_f860 = load i32, i32* @r5, align 4
  %v3_f860 = icmp uge i32 %v0_f860, %v1_f860
  store i1 %v3_f860, i1* %cpsr_c.global-to-local, align 1
  %v9_f860 = icmp eq i32 %v0_f860, %v1_f860
  store i1 %v9_f860, i1* %cpsr_z.global-to-local, align 1
  %v5_f864 = icmp slt i32 %v0_f860, %v1_f860
  %storemerge106 = select i1 %v5_f864, i32 %v1_f860, i32 %v0_f860
  %v2_f86c = ptrtoint i32* %stack_var_-76 to i32
  %v2_f870 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_f870, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_f878 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_f878, i32* %ip.global-to-local, align 4
  %v2_f87c = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_f87c, i32* %r1.global-to-local, align 4
  %v1_f880 = add i32 %storemerge106, 1
  store i32 %v1_f880, i32* %r0.global-to-local, align 4
  %v5_f88c = call i32 @function_11794(i32 %v1_f880, i32 %v2_f87c, i32 %v2_f870, i32 0, i32 %v2_f878)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_f894 = call i32 @function_11844(i32* null)
  store i32 ptrtoint (i32* @global_var_1c594.130 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_f894, i32* @global_var_1c594.130, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_10228 = ptrtoint i32* %stack_var_-41 to i32
  %v2_10238 = ptrtoint i32* %stack_var_-73 to i32
  %v2_fa14 = ptrtoint i32* %stack_var_-56 to i32
  %v2_ff0c = ptrtoint i32* %stack_var_-48 to i32
  br label %dec_label_pc_f8ec

dec_label_pc_f8b0:                                ; preds = %dec_label_pc_f910, %dec_label_pc_1046c
  %v0_f8c8 = phi i32 [ %v3_f904, %dec_label_pc_f910 ], [ %v0_f8b0.pre, %dec_label_pc_1046c ]
  %v3_f8b0 = udiv i32 %v0_f8c8, 32
  %v3_f8b8 = mul nuw nsw i32 %v3_f8b0, 4
  store i32 %v2_f7e8, i32* @lr, align 4
  %v2_f8c0 = add i32 %v3_f8b8, %v2_f7e8
  store i32 %v2_f8c0, i32* %r3.global-to-local, align 4
  %v1_f8c4 = add i32 %v2_f8c0, -184
  %v2_f8c4 = inttoptr i32 %v1_f8c4 to i32*
  %v3_f8c4 = load i32, i32* %v2_f8c4, align 4
  %v1_f8c8 = urem i32 %v0_f8c8, 32
  store i32 %v1_f8c8, i32* %r1.global-to-local, align 4
  %v2_f8cc = add nsw i32 %v1_f8c8, -1
  %v3_f8cc = shl i32 1, %v2_f8cc
  %v4_f8cc = and i32 %v3_f8cc, %v3_f8c4
  %v5_f8cc = icmp ne i32 %v4_f8cc, 0
  store i1 %v5_f8cc, i1* %cpsr_c.global-to-local, align 1
  %v6_f8cc = lshr i32 %v3_f8c4, %v1_f8c8
  store i32 %v6_f8cc, i32* %r2.global-to-local, align 4
  %v1_f8d0 = urem i32 %v6_f8cc, 2
  %v2_f8d0 = icmp eq i32 %v1_f8d0, 0
  store i1 %v2_f8d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f8d0, label %dec_label_pc_f8d8, label %dec_label_pc_faa0.preheader

dec_label_pc_faa0.preheader:                      ; preds = %dec_label_pc_f8b0
  %v0_faa0127 = load i32, i32* @r6, align 4
  %v1_faa0128 = add i32 %v0_faa0127, 12
  %v2_faa0129 = inttoptr i32 %v1_faa0128 to i32*
  %v3_faa0130 = load i32, i32* %v2_faa0129, align 4
  store i32 %v3_faa0130, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_faa4126132 = icmp eq i32 %v3_faa0130, 0
  store i1 %v2_faa4126132, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_faa4126132, label %dec_label_pc_f8d8, label %dec_label_pc_faac.lr.ph

dec_label_pc_f8d8:                                ; preds = %dec_label_pc_faa0.loopexit, %dec_label_pc_faa4.backedge, %dec_label_pc_faa0.preheader, %dec_label_pc_f8b0, %.thread240, %dec_label_pc_1039c, %dec_label_pc_f8ec, %dec_label_pc_10480, %dec_label_pc_103dc
  %v3_f8d8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f8d8, i32* %r3.global-to-local, align 4
  %v1_f8dc = add i32 %v3_f8d8, 1
  store i32 %v1_f8dc, i32* %r2.global-to-local, align 4
  %v2_f8e0 = icmp ugt i32 %v1_f8dc, 254
  store i1 %v2_f8e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f8e0 = icmp eq i32 %v1_f8dc, 255
  store i1 %v7_f8e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f8dc, i32* %stack_var_-52, align 4
  %v8_f8e8 = icmp sgt i32 %v1_f8dc, 255
  br i1 %v8_f8e8, label %dec_label_pc_f158, label %dec_label_pc_f8ec

dec_label_pc_f8ec:                                ; preds = %dec_label_pc_f8d8, %dec_label_pc_f858
  %v0_f8f8 = phi i32 [ %v1_f8dc, %dec_label_pc_f8d8 ], [ 0, %dec_label_pc_f858 ]
  store i32 ptrtoint (i32* @global_var_1c5f8.143 to i32), i32* %ip.global-to-local, align 4
  %v3_f8f0 = mul i32 %v0_f8f8, 256
  store i32 %v3_f8f0, i32* %r3.global-to-local, align 4
  %v2_f8f4 = load i32, i32* @global_var_1c5f8.143, align 4
  store i32 %v2_f8f4, i32* %r1.global-to-local, align 4
  %v2_f8fc = mul i32 %v0_f8f8, 288
  store i32 %v2_f8fc, i32* %r2.global-to-local, align 4
  %v2_f900 = add i32 %v2_f8f4, %v2_f8fc
  store i32 %v2_f900, i32* @r6, align 4
  %v1_f904 = add i32 %v2_f900, 4
  %v2_f904 = inttoptr i32 %v1_f904 to i32*
  %v3_f904 = load i32, i32* %v2_f904, align 4
  store i32 %v3_f904, i32* @r4, align 4
  %v2_f908 = icmp eq i32 %v3_f904, -1
  store i1 %v2_f908, i1* %cpsr_c.global-to-local, align 1
  %v7_f908 = icmp eq i32 %v3_f904, -1
  store i1 %v7_f908, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f908, label %dec_label_pc_f8d8, label %dec_label_pc_f910

dec_label_pc_f910:                                ; preds = %dec_label_pc_f8ec
  %v3_f910 = udiv i32 %v3_f904, 32
  %v3_f918 = mul nuw nsw i32 %v3_f910, 4
  store i32 %v2_f7e8, i32* %lr.global-to-local, align 4
  %v2_f920 = add i32 %v3_f918, %v2_f7e8
  store i32 %v2_f920, i32* %r3.global-to-local, align 4
  %v1_f924 = add i32 %v2_f920, -312
  %v2_f924 = inttoptr i32 %v1_f924 to i32*
  %v3_f924 = load i32, i32* %v2_f924, align 4
  %v1_f928 = urem i32 %v3_f904, 32
  store i32 %v1_f928, i32* %r1.global-to-local, align 4
  %v2_f92c = add nsw i32 %v1_f928, -1
  %v3_f92c = shl i32 1, %v2_f92c
  %v4_f92c = and i32 %v3_f924, %v3_f92c
  %v5_f92c = icmp ne i32 %v4_f92c, 0
  store i1 %v5_f92c, i1* %cpsr_c.global-to-local, align 1
  %v6_f92c = lshr i32 %v3_f924, %v1_f928
  store i32 %v6_f92c, i32* %r2.global-to-local, align 4
  %v1_f930 = urem i32 %v6_f92c, 2
  %v2_f930 = icmp eq i32 %v1_f930, 0
  store i1 %v2_f930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f930, label %dec_label_pc_f8b0, label %dec_label_pc_f938

dec_label_pc_f938:                                ; preds = %dec_label_pc_f910
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_ff0c, i32* %r3.global-to-local, align 4
  store i32 %v2_fa14, i32* %ip.global-to-local, align 4
  store i32 %v3_f904, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_f968 = call i32 @function_11d40(i32 %v3_f904, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_fa14)
  %v3_f96c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_f96c, i32* %r3.global-to-local, align 4
  %v2_f970 = or i32 %v3_f96c, %v6_f968
  store i32 %v2_f970, i32* %r0.global-to-local, align 4
  %v4_f970 = icmp eq i32 %v2_f970, 0
  store i1 %v4_f970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_f970, label %dec_label_pc_f978, label %dec_label_pc_10480

dec_label_pc_f978:                                ; preds = %dec_label_pc_f938
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_f97c = load i32, i32* @r6, align 4
  %v2_f97c = add i32 %v1_f97c, 12
  %v3_f97c = inttoptr i32 %v2_f97c to i32*
  store i32 2, i32* %v3_f97c, align 4
  %v0_f980 = call i32 @function_e958()
  store i32 %v0_f980, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1c590.136 to i32), i32* %r3.global-to-local, align 4
  %v3_f988 = load i8, i8* @global_var_1c591.137, align 1
  %v4_f988 = zext i8 %v3_f988 to i32
  store i32 %v4_f988, i32* %r2.global-to-local, align 4
  %v2_f98c = load i8, i8* bitcast (i8** @global_var_1c590.136 to i8*), align 4
  %v3_f98c = zext i8 %v2_f98c to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_f990 = mul nuw nsw i32 %v4_f988, 256
  %v5_f990 = or i32 %v3_f98c, %v4_f990
  store i32 %v5_f990, i32* %r1.global-to-local, align 4
  %v2_f994 = call i32 @function_112fc(i32 %v0_f980, i32 %v5_f990)
  store i32 ptrtoint (i32* @global_var_1c560.132 to i32), i32* %r3.global-to-local, align 4
  %v2_f99c = load i32, i32* @global_var_1c560.132, align 4
  store i32 %v2_f99c, i32* %lr.global-to-local, align 4
  %v1_f9a4 = load i32, i32* @r5, align 4
  %v9_f9a4 = icmp eq i32 %v2_f99c, %v1_f9a4
  store i1 %v9_f9a4, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_f9a8 = urem i32 %v2_f994, 65536
  store i32 %v3_f9a8, i32* %r0.global-to-local, align 4
  %v7_f9ac = icmp sgt i32 %v2_f99c, %v1_f9a4
  br i1 %v7_f9ac, label %dec_label_pc_f9b0, label %dec_label_pc_10468

dec_label_pc_f9b0:                                ; preds = %dec_label_pc_f978
  %v2_f9b4 = load i32, i32* @global_var_1c58c.134, align 4
  store i32 %v2_f9b4, i32* %r3.global-to-local, align 4
  store i32 %v1_f9a4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f9d0

dec_label_pc_f9c0:                                ; preds = %dec_label_pc_f9e8, %dec_label_pc_f9d0
  %v1_f9c0 = add i32 %v0_f9c0, 1
  store i32 %v1_f9c0, i32* %ip.global-to-local, align 4
  %v3_f9c4 = icmp uge i32 %v1_f9c0, %v2_f99c
  store i1 %v3_f9c4, i1* %cpsr_c.global-to-local, align 1
  %v9_f9c4 = icmp eq i32 %v1_f9c0, %v2_f99c
  store i1 %v9_f9c4, i1* %cpsr_z.global-to-local, align 1
  %v1_f9c8 = add i32 %v0_f9c8, 16
  store i32 %v1_f9c8, i32* %r3.global-to-local, align 4
  br i1 %v9_f9c4, label %dec_label_pc_10468, label %dec_label_pc_f9d0

dec_label_pc_f9d0:                                ; preds = %dec_label_pc_f9c0, %dec_label_pc_f9b0
  %v0_f9c0 = phi i32 [ %v1_f9c0, %dec_label_pc_f9c0 ], [ %v1_f9a4, %dec_label_pc_f9b0 ]
  %v0_f9c8 = phi i32 [ %v1_f9c8, %dec_label_pc_f9c0 ], [ %v2_f9b4, %dec_label_pc_f9b0 ]
  store i32 %v0_f9c8, i32* %r1.global-to-local, align 4
  %v1_f9d4 = add i32 %v0_f9c8, 9
  %v2_f9d4 = inttoptr i32 %v1_f9d4 to i8*
  %v3_f9d4 = load i8, i8* %v2_f9d4, align 1
  %v4_f9d4 = zext i8 %v3_f9d4 to i32
  store i32 %v4_f9d4, i32* %r2.global-to-local, align 4
  %v1_f9d8 = add i32 %v0_f9c8, 8
  %v2_f9d8 = inttoptr i32 %v1_f9d8 to i8*
  %v3_f9d8 = load i8, i8* %v2_f9d8, align 1
  %v4_f9d8 = zext i8 %v3_f9d8 to i32
  %v4_f9dc = mul nuw nsw i32 %v4_f9d4, 256
  %v5_f9dc = or i32 %v4_f9d8, %v4_f9dc
  store i32 %v5_f9dc, i32* %r3.global-to-local, align 4
  %v3_f9e0 = icmp uge i32 %v5_f9dc, %v3_f9a8
  store i1 %v3_f9e0, i1* %cpsr_c.global-to-local, align 1
  %v9_f9e0 = icmp eq i32 %v5_f9dc, %v3_f9a8
  store i1 %v9_f9e0, i1* %cpsr_z.global-to-local, align 1
  %v2_f9e4 = xor i1 %v9_f9e0, true
  %v3_f9e4 = and i1 %v3_f9e0, %v2_f9e4
  br i1 %v3_f9e4, label %dec_label_pc_f9c0, label %dec_label_pc_f9e8

dec_label_pc_f9e8:                                ; preds = %dec_label_pc_f9d0
  %v1_f9e8 = add i32 %v0_f9c8, 10
  %v2_f9e8 = inttoptr i32 %v1_f9e8 to i8*
  %v3_f9e8 = load i8, i8* %v2_f9e8, align 1
  %v4_f9e8 = zext i8 %v3_f9e8 to i32
  store i32 %v4_f9e8, i32* %r3.global-to-local, align 4
  %v1_f9ec = add i32 %v0_f9c8, 11
  %v2_f9ec = inttoptr i32 %v1_f9ec to i8*
  %v3_f9ec = load i8, i8* %v2_f9ec, align 1
  %v4_f9ec = zext i8 %v3_f9ec to i32
  store i32 %v4_f9ec, i32* %r2.global-to-local, align 4
  %v4_f9f0 = mul nuw nsw i32 %v4_f9ec, 256
  %v5_f9f0 = or i32 %v4_f9f0, %v4_f9e8
  store i32 %v5_f9f0, i32* %r3.global-to-local, align 4
  %v3_f9f4 = icmp uge i32 %v5_f9f0, %v3_f9a8
  store i1 %v3_f9f4, i1* %cpsr_c.global-to-local, align 1
  %v9_f9f4 = icmp eq i32 %v5_f9f0, %v3_f9a8
  store i1 %v9_f9f4, i1* %cpsr_z.global-to-local, align 1
  %v2_f9f8 = xor i1 %v3_f9f4, true
  %v3_f9f8 = or i1 %v9_f9f4, %v2_f9f8
  br i1 %v3_f9f8, label %dec_label_pc_f9c0, label %dec_label_pc_1046c

dec_label_pc_fa00:                                ; preds = %dec_label_pc_fc68, %dec_label_pc_fc3c, %dec_label_pc_fc84
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_fa04 = call i32 @function_10628(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_fa0c = call i32 @function_10628(i32 30)
  store i32 %v2_fa14, i32* %r1.global-to-local, align 4
  store i32 29, i32* %r0.global-to-local, align 4
  %v3_fa1c = call i32 @function_10544(i32 29, i32* nonnull %stack_var_-56)
  store i32 %v3_fa1c, i32* @r4, align 4
  store i32 %v2_fa14, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_fa30 = call i32 @function_10544(i32 30, i32* nonnull %stack_var_-56)
  %v3_fa34 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_fa30, i32* @r5, align 4
  %v0_fa3c = load i32, i32* @r4, align 4
  store i32 %v0_fa3c, i32* %r2.global-to-local, align 4
  %v1_fa40 = add i32 %v3_fa34, -1
  store i32 %v1_fa40, i32* %r3.global-to-local, align 4
  %v0_fa44 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_fa44, i32* %r0.global-to-local, align 4
  %v0_fa48 = load i32, i32* @r6, align 4
  %v1_fa48 = add i32 %v0_fa48, 24
  %v2_fa48 = inttoptr i32 %v1_fa48 to i32*
  %v3_fa48 = load i32, i32* %v2_fa48, align 4
  store i32 %v3_fa48, i32* %r1.global-to-local, align 4
  %v4_fa4c = call i32 @function_10d34(i32 %v0_fa44, i32 %v3_fa48, i32 %v0_fa3c, i32 %v1_fa40)
  store i32 %v4_fa4c, i32* %r0.global-to-local, align 4
  %v2_fa50 = icmp eq i32 %v4_fa4c, -1
  store i1 %v2_fa50, i1* %cpsr_c.global-to-local, align 1
  %v7_fa50 = icmp eq i32 %v4_fa4c, -1
  store i1 %v7_fa50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa50, label %dec_label_pc_fa60, label %dec_label_pc_fa88

dec_label_pc_fa60:                                ; preds = %dec_label_pc_fa00
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_fa60 = load i32, i32* %stack_var_-56, align 4
  %v0_fa64 = load i32, i32* @r5, align 4
  store i32 %v0_fa64, i32* %r2.global-to-local, align 4
  %v1_fa68 = add i32 %v3_fa60, -1
  store i32 %v1_fa68, i32* %r3.global-to-local, align 4
  %v0_fa6c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_fa6c, i32* %r0.global-to-local, align 4
  %v0_fa70 = load i32, i32* @r6, align 4
  %v1_fa70 = add i32 %v0_fa70, 24
  %v2_fa70 = inttoptr i32 %v1_fa70 to i32*
  %v3_fa70 = load i32, i32* %v2_fa70, align 4
  store i32 %v3_fa70, i32* %r1.global-to-local, align 4
  %v4_fa74 = call i32 @function_10d34(i32 %v0_fa6c, i32 %v3_fa70, i32 %v0_fa64, i32 %v1_fa68)
  store i32 %v4_fa74, i32* %r0.global-to-local, align 4
  %v2_fa78 = icmp eq i32 %v4_fa74, -1
  store i1 %v2_fa78, i1* %cpsr_c.global-to-local, align 1
  %v7_fa78 = icmp eq i32 %v4_fa74, -1
  store i1 %v7_fa78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa78, label %dec_label_pc_1049c, label %dec_label_pc_fa88

dec_label_pc_fa88:                                ; preds = %dec_label_pc_fa60, %dec_label_pc_fa00
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_fa8c = call i32 @function_10570(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_fa94 = call i32 @function_10570(i32 30)
  store i32 %v1_fa94, i32* %r0.global-to-local, align 4
  %v0_fa98 = load i32, i32* @r7, align 4
  %v3_fa98 = icmp eq i32 %v0_fa98, -1
  store i1 %v3_fa98, i1* %cpsr_c.global-to-local, align 1
  %v8_fa98 = icmp eq i32 %v0_fa98, -1
  store i1 %v8_fa98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fa98, label %dec_label_pc_faa0.loopexit, label %dec_label_pc_fca0

dec_label_pc_faa0.loopexit:                       ; preds = %dec_label_pc_fc2c, %dec_label_pc_102d8, %dec_label_pc_fb20, %dec_label_pc_fa88, %dec_label_pc_102c4
  %v0_faa0 = load i32, i32* @r6, align 4
  %v1_faa0 = add i32 %v0_faa0, 12
  %v2_faa0 = inttoptr i32 %v1_faa0 to i32*
  %v3_faa0 = load i32, i32* %v2_faa0, align 4
  store i32 %v3_faa0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_faa4126 = icmp eq i32 %v3_faa0, 0
  store i1 %v2_faa4126, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_faa4126, label %dec_label_pc_f8d8, label %dec_label_pc_faac.lr.ph

dec_label_pc_faac.lr.ph:                          ; preds = %dec_label_pc_faa0.preheader, %dec_label_pc_faa0.loopexit
  %v0_faac159 = phi i32 [ %v0_faa0, %dec_label_pc_faa0.loopexit ], [ %v0_faa0127, %dec_label_pc_faa0.preheader ]
  br label %dec_label_pc_faac

dec_label_pc_faac:                                ; preds = %dec_label_pc_faa4.backedge.thread, %dec_label_pc_faa4.backedge, %dec_label_pc_faa4.backedge.thread473, %dec_label_pc_faac.lr.ph
  %v0_10414 = phi i32 [ %v0_faac159, %dec_label_pc_faac.lr.ph ], [ %v0_faac156, %dec_label_pc_faa4.backedge ], [ %v0_fb20, %dec_label_pc_faa4.backedge.thread ], [ %v0_fb20, %dec_label_pc_faa4.backedge.thread473 ]
  %v1_faac = add i32 %v0_10414, 24
  %v2_faac = inttoptr i32 %v1_faac to i32*
  %v3_faac = load i32, i32* %v2_faac, align 4
  store i32 %v3_faac, i32* %r3.global-to-local, align 4
  %v2_fab0 = icmp ugt i32 %v3_faac, 255
  store i1 %v2_fab0, i1* %cpsr_c.global-to-local, align 1
  %v7_fab0 = icmp eq i32 %v3_faac, 256
  store i1 %v7_fab0, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_10414, 28
  store i32 %.pre, i32* %r8.global-to-local, align 4
  br i1 %v7_fab0, label %dec_label_pc_10414, label %dec_label_pc_fabc

dec_label_pc_fabc:                                ; preds = %dec_label_pc_faac, %dec_label_pc_10414
  store i32 0, i32* @r5, align 4
  %v1_fac0 = load i32, i32* @sb, align 4
  %v2_fac0 = inttoptr i32 %v1_fac0 to i32*
  store i32 0, i32* %v2_fac0, align 4
  %v0_fac4 = load i32, i32* @r6, align 4
  %v1_fac4 = add i32 %v0_fac4, 24
  %v2_fac4 = inttoptr i32 %v1_fac4 to i32*
  %v3_fac4 = load i32, i32* %v2_fac4, align 4
  store i32 %v3_fac4, i32* %r2.global-to-local, align 4
  %v0_fac8 = load i32, i32* %r8.global-to-local, align 4
  %v2_fac8 = add i32 %v0_fac8, %v3_fac4
  store i32 %v2_fac8, i32* @r4, align 4
  %v1_facc = add i32 %v0_fac4, 4
  %v2_facc = inttoptr i32 %v1_facc to i32*
  %v3_facc = load i32, i32* %v2_facc, align 4
  store i32 %v3_facc, i32* %r0.global-to-local, align 4
  %v1_fad0 = sub i32 256, %v3_fac4
  store i32 %v1_fad0, i32* %r2.global-to-local, align 4
  store i32 %v2_fac8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fadc = inttoptr i32 %v2_fac8 to i32*
  %v5_fadc = call i32 @function_11d9c(i32 %v3_facc, i32* %v4_fadc, i32 %v1_fad0, i32 16384)
  store i32 %v5_fadc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fae0 = icmp eq i32 %v5_fadc, 0
  store i1 %v2_fae0, i1* %cpsr_z.global-to-local, align 1
  %tmp336 = icmp slt i32 %v5_fadc, 1
  br i1 %tmp336, label %dec_label_pc_10390, label %dec_label_pc_fae8

dec_label_pc_fae8:                                ; preds = %dec_label_pc_fabc
  %v0_fae8 = load i32, i32* @r5, align 4
  store i32 %v0_fae8, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_faf0

dec_label_pc_faf0:                                ; preds = %bb338, %dec_label_pc_fae8
  %v3_faf8 = phi i32 [ %v1_fafc, %bb338 ], [ %v0_fae8, %dec_label_pc_fae8 ]
  %v1_faf0 = load i32, i32* @r4, align 4
  %v2_faf0 = add i32 %v1_faf0, %v3_faf8
  %v3_faf0 = inttoptr i32 %v2_faf0 to i8*
  %v4_faf0 = load i8, i8* %v3_faf0, align 1
  %v6_faf0 = zext i8 %v4_faf0 to i32
  store i32 %v6_faf0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_faf4 = icmp eq i8 %v4_faf0, 0
  store i1 %v2_faf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_faf4, label %bb337, label %bb338

bb337:                                            ; preds = %dec_label_pc_faf0
  %v1_faf8 = load i32, i32* %r1.global-to-local, align 4
  %v2_faf8 = trunc i32 %v1_faf8 to i8
  store i8 %v2_faf8, i8* %v3_faf0, align 1
  %v0_fafc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb338

bb338:                                            ; preds = %dec_label_pc_faf0, %bb337
  %v0_fafc = phi i32 [ %v3_faf8, %dec_label_pc_faf0 ], [ %v0_fafc.pre, %bb337 ]
  %v1_fafc = add i32 %v0_fafc, 1
  store i32 %v1_fafc, i32* %r2.global-to-local, align 4
  %v3_fb00 = icmp uge i32 %v5_fadc, %v1_fafc
  store i1 %v3_fb00, i1* %cpsr_c.global-to-local, align 1
  %v9_fb00 = icmp eq i32 %v5_fadc, %v1_fafc
  store i1 %v9_fb00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fb00, label %dec_label_pc_fb08, label %dec_label_pc_faf0

dec_label_pc_fb08:                                ; preds = %bb338, %dec_label_pc_10394
  store i32 ptrtoint (i32* @global_var_1c594.130 to i32), i32* %r1.global-to-local, align 4
  %v0_fb0c = load i32, i32* @r6, align 4
  %v1_fb0c = add i32 %v0_fb0c, 24
  %v2_fb0c = inttoptr i32 %v1_fb0c to i32*
  %v3_fb0c = load i32, i32* %v2_fb0c, align 4
  %v2_fb10 = load i32, i32* @global_var_1c594.130, align 4
  store i32 %v2_fb10, i32* %r3.global-to-local, align 4
  %v2_fb14 = add i32 %v3_fb0c, %v5_fadc
  store i32 %v2_fb14, i32* %ip.global-to-local, align 4
  store i32 %v2_fb14, i32* %v2_fb0c, align 4
  %v0_fb1c = load i32, i32* %r3.global-to-local, align 4
  %v1_fb1c = load i32, i32* @r6, align 4
  %v2_fb1c = add i32 %v1_fb1c, 8
  %v3_fb1c = inttoptr i32 %v2_fb1c to i32*
  store i32 %v0_fb1c, i32* %v3_fb1c, align 4
  br label %dec_label_pc_fb20

dec_label_pc_fb20:                                ; preds = %dec_label_pc_ffdc, %dec_label_pc_fb08
  %v0_fb20 = load i32, i32* @r6, align 4
  %v1_fb20 = add i32 %v0_fb20, 12
  %v2_fb20 = inttoptr i32 %v1_fb20 to i32*
  %v3_fb20 = load i32, i32* %v2_fb20, align 4
  store i32 %v3_fb20, i32* %r2.global-to-local, align 4
  %v1_fb24 = add i32 %v3_fb20, -2
  store i32 %v1_fb24, i32* %r3.global-to-local, align 4
  %v7_fb28 = icmp eq i32 %v1_fb24, 8
  store i1 %v7_fb28, i1* %cpsr_z.global-to-local, align 1
  %v5_fb2c = and i32 %v1_fb24, 1073741824
  %v6_fb2c = icmp ne i32 %v5_fb2c, 0
  store i1 %v6_fb2c, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_fb20, label %dec_label_pc_faa0.loopexit [
    i32 2, label %dec_label_pc_fb58
    i32 3, label %dec_label_pc_fc3c
    i32 4, label %dec_label_pc_fce4
    i32 5, label %dec_label_pc_fd7c
    i32 6, label %dec_label_pc_fea4
    i32 7, label %dec_label_pc_10168
    i32 8, label %dec_label_pc_10000
    i32 9, label %dec_label_pc_100b4
    i32 10, label %dec_label_pc_ff58
  ]

dec_label_pc_fb58:                                ; preds = %dec_label_pc_fb20
  %v1_fb58 = add i32 %v0_fb20, 24
  %v2_fb58 = inttoptr i32 %v1_fb58 to i32*
  %v3_fb58 = load i32, i32* %v2_fb58, align 4
  store i32 %v3_fb58, i32* %ip.global-to-local, align 4
  %v0_fb5c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_fb5c, i32* @r5, align 4
  store i32 0, i32* @r7, align 4
  %v1_fb64 = add i32 %v0_fb20, 29
  store i32 %v1_fb64, i32* @r4, align 4
  store i32 -4, i32* %sl.global-to-local, align 4
  %v3_fb6c117 = icmp eq i32 %v3_fb58, 0
  store i1 %v3_fb6c117, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_fb6c117, i1* %cpsr_z.global-to-local, align 1
  %v6_fb70124 = icmp sgt i32 %v3_fb58, 0
  br i1 %v6_fb70124, label %dec_label_pc_fb74.preheader, label %dec_label_pc_fc1c

dec_label_pc_fb6c.loopexit:                       ; preds = %dec_label_pc_fb8c
  %v2_fb94 = add i32 %v1_fb94, 2
  store i32 %v2_fb94, i32* @r5, align 4
  %v2_fb98 = add i32 %v1_fb98, 2
  store i32 %v2_fb98, i32* @r4, align 4
  %v2_fb9c = add i32 %v1_fb9c, 2
  store i32 %v2_fb9c, i32* @r7, align 4
  %v3_fb6c = icmp uge i32 %v2_fb9c, %v1_fb6c
  store i1 %v3_fb6c, i1* %cpsr_c.global-to-local, align 1
  %v9_fb6c = icmp eq i32 %v2_fb9c, %v1_fb6c
  store i1 %v9_fb6c, i1* %cpsr_z.global-to-local, align 1
  %v6_fb70 = icmp slt i32 %v2_fb9c, %v1_fb6c
  br i1 %v6_fb70, label %dec_label_pc_fb74.preheader, label %dec_label_pc_fc1c

dec_label_pc_fb74.preheader:                      ; preds = %dec_label_pc_fb58, %dec_label_pc_fb6c.loopexit
  %v6_fc24198 = phi i32 [ %v6_fc24199, %dec_label_pc_fb6c.loopexit ], [ %v0_fb20, %dec_label_pc_fb58 ]
  %v1_fb9c187 = phi i32 [ %v2_fb9c, %dec_label_pc_fb6c.loopexit ], [ 0, %dec_label_pc_fb58 ]
  %v1_fb94185 = phi i32 [ %v2_fb94, %dec_label_pc_fb6c.loopexit ], [ %v0_fb5c, %dec_label_pc_fb58 ]
  %v1_fb80183 = phi i32 [ %v1_fb6c, %dec_label_pc_fb6c.loopexit ], [ %v3_fb58, %dec_label_pc_fb58 ]
  %v0_fb74181 = phi i32 [ %v2_fb98, %dec_label_pc_fb6c.loopexit ], [ %v1_fb64, %dec_label_pc_fb58 ]
  br label %dec_label_pc_fb74

dec_label_pc_fb74:                                ; preds = %dec_label_pc_fb74.preheader, %dec_label_pc_fbfc
  %v6_fc24199 = phi i32 [ %v6_fc24198, %dec_label_pc_fb74.preheader ], [ %v0_fc04, %dec_label_pc_fbfc ]
  %v1_fb9c = phi i32 [ %v1_fb9c187, %dec_label_pc_fb74.preheader ], [ %v1_fc08, %dec_label_pc_fbfc ]
  %v1_fb94 = phi i32 [ %v1_fb94185, %dec_label_pc_fb74.preheader ], [ %v1_fc10, %dec_label_pc_fbfc ]
  %v1_fb6c = phi i32 [ %v1_fb80183, %dec_label_pc_fb74.preheader ], [ %v3_fc04, %dec_label_pc_fbfc ]
  %v1_fb98 = phi i32 [ %v0_fb74181, %dec_label_pc_fb74.preheader ], [ %v1_fc14, %dec_label_pc_fbfc ]
  %v1_fb74 = add i32 %v1_fb98, -1
  %v2_fb74 = inttoptr i32 %v1_fb74 to i8*
  %v3_fb74 = load i8, i8* %v2_fb74, align 1
  %v4_fb74 = zext i8 %v3_fb74 to i32
  store i32 %v4_fb74, i32* %r3.global-to-local, align 4
  %v2_fb78 = icmp eq i8 %v3_fb74, -1
  store i1 %v2_fb78, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_fb78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fb78, label %dec_label_pc_fb80, label %dec_label_pc_fc1c

dec_label_pc_fb80:                                ; preds = %dec_label_pc_fb74
  %v0_fb80 = load i32, i32* %r8.global-to-local, align 4
  %v2_fb80 = add i32 %v0_fb80, %v1_fb6c
  store i32 %v2_fb80, i32* %r2.global-to-local, align 4
  %v3_fb84 = icmp uge i32 %v2_fb80, %v1_fb98
  store i1 %v3_fb84, i1* %cpsr_c.global-to-local, align 1
  %v9_fb84 = icmp eq i32 %v2_fb80, %v1_fb98
  store i1 %v9_fb84, i1* %cpsr_z.global-to-local, align 1
  %v2_fb88 = xor i1 %v3_fb84, true
  %v3_fb88 = or i1 %v9_fb84, %v2_fb88
  br i1 %v3_fb88, label %dec_label_pc_fc1c, label %dec_label_pc_fb8c

dec_label_pc_fb8c:                                ; preds = %dec_label_pc_fb80
  %v1_fb8c = inttoptr i32 %v1_fb98 to i8*
  %v2_fb8c = load i8, i8* %v1_fb8c, align 1
  %v3_fb8c = zext i8 %v2_fb8c to i32
  store i32 %v3_fb8c, i32* %r3.global-to-local, align 4
  %v2_fb90 = icmp eq i8 %v2_fb8c, -1
  store i1 %v2_fb90, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_fb90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fb90, label %dec_label_pc_fb6c.loopexit, label %dec_label_pc_fba4

dec_label_pc_fba4:                                ; preds = %dec_label_pc_fb8c
  %v2_fba4 = icmp ugt i8 %v2_fb8c, -4
  store i1 %v2_fba4, i1* %cpsr_c.global-to-local, align 1
  %v7_fba4 = icmp eq i8 %v2_fb8c, -3
  store i1 %v7_fba4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fba4, label %dec_label_pc_1021c, label %dec_label_pc_fbac

dec_label_pc_fbac:                                ; preds = %dec_label_pc_fba4
  %v1_fbac = add i32 %v1_fb94, 2
  store i32 %v1_fbac, i32* %r3.global-to-local, align 4
  %v3_fbb0 = icmp uge i32 %v2_fb80, %v1_fbac
  store i1 %v3_fbb0, i1* %cpsr_c.global-to-local, align 1
  %v9_fbb0 = icmp eq i32 %v2_fb80, %v1_fbac
  store i1 %v9_fbb0, i1* %cpsr_z.global-to-local, align 1
  %v2_fbb4 = xor i1 %v3_fbb0, true
  %v3_fbb4 = or i1 %v9_fbb0, %v2_fbb4
  br i1 %v3_fbb4, label %dec_label_pc_fc1c, label %dec_label_pc_fbb8

dec_label_pc_fbb8:                                ; preds = %dec_label_pc_10274, %bb361, %bb360, %dec_label_pc_fbac
  %v0_fbb8 = load i32, i32* @r4, align 4
  %v1_fbb8 = inttoptr i32 %v0_fbb8 to i8*
  %v2_fbb8 = load i8, i8* %v1_fbb8, align 1
  %v3_fbb8 = zext i8 %v2_fbb8 to i32
  store i32 %v3_fbb8, i32* %r3.global-to-local, align 4
  %v2_fbbc = icmp ugt i8 %v2_fbb8, -4
  store i1 %v2_fbbc, i1* %cpsr_c.global-to-local, align 1
  %v7_fbbc = icmp eq i8 %v2_fbb8, -3
  store i1 %v7_fbbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbbc, label %bb339, label %dec_label_pc_fbc8

bb339:                                            ; preds = %dec_label_pc_fbb8
  %v1_fbc0 = load i32, i32* %sl.global-to-local, align 4
  %v2_fbc0 = trunc i32 %v1_fbc0 to i8
  store i8 %v2_fbc0, i8* %v1_fbb8, align 1
  %v0_fbc4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fbc4.pr, label %.thread86, label %.dec_label_pc_fbc8_crit_edge

.dec_label_pc_fbc8_crit_edge:                     ; preds = %bb339
  %v0_fbc8.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fbc8

dec_label_pc_fbc8:                                ; preds = %.dec_label_pc_fbc8_crit_edge, %dec_label_pc_fbb8
  %v0_fbc8 = phi i32 [ %v0_fbc8.pre, %.dec_label_pc_fbc8_crit_edge ], [ %v3_fbb8, %dec_label_pc_fbb8 ]
  %v2_fbc8 = icmp ugt i32 %v0_fbc8, 250
  store i1 %v2_fbc8, i1* %cpsr_c.global-to-local, align 1
  %v7_fbc8 = icmp eq i32 %v0_fbc8, 251
  store i1 %v7_fbc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbc8, label %bb340, label %.thread86

bb340:                                            ; preds = %dec_label_pc_fbc8
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_fbd0 = load i32, i32* @r4, align 4
  %v4_fbd0 = inttoptr i32 %v3_fbd0 to i8*
  store i8 -3, i8* %v4_fbd0, align 1
  br label %.thread86

.thread86:                                        ; preds = %dec_label_pc_fbc8, %bb339, %bb340
  %v0_fbd4 = load i32, i32* @r4, align 4
  %v1_fbd4 = add i32 %v0_fbd4, 1
  %v2_fbd4 = inttoptr i32 %v1_fbd4 to i8*
  %v3_fbd4 = load i8, i8* %v2_fbd4, align 1
  %v4_fbd4 = zext i8 %v3_fbd4 to i32
  store i32 %v4_fbd4, i32* %r3.global-to-local, align 4
  %v2_fbd8 = icmp ugt i8 %v3_fbd4, -4
  store i1 %v2_fbd8, i1* %cpsr_c.global-to-local, align 1
  %v7_fbd8 = icmp eq i8 %v3_fbd4, -3
  store i1 %v7_fbd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbd8, label %bb341, label %dec_label_pc_fbe4

bb341:                                            ; preds = %.thread86
  %v1_fbdc = load i32, i32* %sl.global-to-local, align 4
  %v2_fbdc = trunc i32 %v1_fbdc to i8
  store i8 %v2_fbdc, i8* %v2_fbd4, align 1
  %v0_fbe0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fbe0.pr, label %.thread88, label %.dec_label_pc_fbe4_crit_edge

.dec_label_pc_fbe4_crit_edge:                     ; preds = %bb341
  %v0_fbe4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fbe4

dec_label_pc_fbe4:                                ; preds = %.dec_label_pc_fbe4_crit_edge, %.thread86
  %v0_fbe4 = phi i32 [ %v0_fbe4.pre, %.dec_label_pc_fbe4_crit_edge ], [ %v4_fbd4, %.thread86 ]
  %v2_fbe4 = icmp ugt i32 %v0_fbe4, 250
  store i1 %v2_fbe4, i1* %cpsr_c.global-to-local, align 1
  %v7_fbe4 = icmp eq i32 %v0_fbe4, 251
  store i1 %v7_fbe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbe4, label %bb342, label %.thread88

bb342:                                            ; preds = %dec_label_pc_fbe4
  store i32 -3, i32* %ip.global-to-local, align 4
  %v3_fbec = load i32, i32* @r4, align 4
  %v4_fbec = add i32 %v3_fbec, 1
  %v5_fbec = inttoptr i32 %v4_fbec to i8*
  store i8 -3, i8* %v5_fbec, align 1
  br label %.thread88

.thread88:                                        ; preds = %dec_label_pc_fbe4, %bb341, %bb342
  %v0_fbf0 = load i32, i32* @r6, align 4
  %v1_fbf0 = add i32 %v0_fbf0, 4
  %v2_fbf0 = inttoptr i32 %v1_fbf0 to i32*
  %v3_fbf0 = load i32, i32* %v2_fbf0, align 4
  store i32 %v3_fbf0, i32* %r0.global-to-local, align 4
  %v0_fbf4 = load i32, i32* @r5, align 4
  br label %dec_label_pc_fbfc

dec_label_pc_fbfc:                                ; preds = %dec_label_pc_103e8, %.thread88
  %v0_fc00 = phi i32 [ %v3_10404, %dec_label_pc_103e8 ], [ %v3_fbf0, %.thread88 ]
  %storemerge6 = phi i32 [ %v2_10238, %dec_label_pc_103e8 ], [ %v0_fbf4, %.thread88 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_103e8 ], [ 3, %.thread88 ]
  store i32 %storemerge6, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc00 = inttoptr i32 %storemerge6 to i32*
  %v5_fc00 = call i32 @function_11dfc(i32 %v0_fc00, i32* %v4_fc00, i32 %storemerge, i32 16384)
  store i32 %v5_fc00, i32* %r0.global-to-local, align 4
  %v0_fc04 = load i32, i32* @r6, align 4
  %v1_fc04 = add i32 %v0_fc04, 24
  %v2_fc04 = inttoptr i32 %v1_fc04 to i32*
  %v3_fc04 = load i32, i32* %v2_fc04, align 4
  store i32 %v3_fc04, i32* %ip.global-to-local, align 4
  %v0_fc08 = load i32, i32* @r7, align 4
  %v1_fc08 = add i32 %v0_fc08, 3
  store i32 %v1_fc08, i32* @r7, align 4
  %v3_fc0c = icmp uge i32 %v1_fc08, %v3_fc04
  store i1 %v3_fc0c, i1* %cpsr_c.global-to-local, align 1
  %v9_fc0c = icmp eq i32 %v1_fc08, %v3_fc04
  store i1 %v9_fc0c, i1* %cpsr_z.global-to-local, align 1
  %v0_fc10 = load i32, i32* @r5, align 4
  %v1_fc10 = add i32 %v0_fc10, 3
  store i32 %v1_fc10, i32* @r5, align 4
  %v0_fc14 = load i32, i32* @r4, align 4
  %v1_fc14 = add i32 %v0_fc14, 3
  store i32 %v1_fc14, i32* @r4, align 4
  %v5_fc18 = icmp slt i32 %v1_fc08, %v3_fc04
  br i1 %v5_fc18, label %dec_label_pc_fb74, label %dec_label_pc_fc1c

dec_label_pc_fc1c:                                ; preds = %dec_label_pc_fb6c.loopexit, %dec_label_pc_fb74, %dec_label_pc_fbfc, %dec_label_pc_fbac, %dec_label_pc_fb80, %dec_label_pc_fb58, %dec_label_pc_1021c.dec_label_pc_fc1c.loopexit_crit_edge
  %v6_fc24 = phi i32 [ %v0_10244, %dec_label_pc_1021c.dec_label_pc_fc1c.loopexit_crit_edge ], [ %v0_fb20, %dec_label_pc_fb58 ], [ %v6_fc24199, %dec_label_pc_fb74 ], [ %v0_fc04, %dec_label_pc_fbfc ], [ %v6_fc24199, %dec_label_pc_fbac ], [ %v6_fc24199, %dec_label_pc_fb80 ], [ %v6_fc24199, %dec_label_pc_fb6c.loopexit ]
  %v0_fc2c.pre = phi i32 [ %v0_fc1c.pre.pre, %dec_label_pc_1021c.dec_label_pc_fc1c.loopexit_crit_edge ], [ 0, %dec_label_pc_fb58 ], [ %v1_fb9c, %dec_label_pc_fb74 ], [ %v1_fc08, %dec_label_pc_fbfc ], [ %v1_fb9c, %dec_label_pc_fbac ], [ %v1_fb9c, %dec_label_pc_fb80 ], [ %v2_fb9c, %dec_label_pc_fb6c.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc1c = icmp eq i32 %v0_fc2c.pre, 0
  store i1 %v2_fc1c, i1* %cpsr_z.global-to-local, align 1
  %tmp343 = icmp slt i32 %v0_fc2c.pre, 1
  br i1 %tmp343, label %dec_label_pc_fc2c, label %.thread235

.thread235:                                       ; preds = %dec_label_pc_fc1c
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_fc24 = add i32 %v6_fc24, 12
  %v8_fc24 = inttoptr i32 %v7_fc24 to i32*
  store i32 3, i32* %v8_fc24, align 4
  br label %dec_label_pc_ffdc

dec_label_pc_fc2c:                                ; preds = %dec_label_pc_fc1c, %dec_label_pc_101bc, %dec_label_pc_10108, %dec_label_pc_10054, %dec_label_pc_10324, %dec_label_pc_fef8, %dec_label_pc_fdd0, %dec_label_pc_fd38, %dec_label_pc_fca0
  %v0_fc2c = phi i32 [ %v1_101b0, %dec_label_pc_101bc ], [ %v1_100fc, %dec_label_pc_10108 ], [ %v1_10048, %dec_label_pc_10054 ], [ %v0_1031c, %dec_label_pc_10324 ], [ %v1_feec, %dec_label_pc_fef8 ], [ %v1_fdc4, %dec_label_pc_fdd0 ], [ %v0_fd38, %dec_label_pc_fd38 ], [ %v0_fca0, %dec_label_pc_fca0 ], [ %v0_fc2c.pre, %dec_label_pc_fc1c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc2c = icmp eq i32 %v0_fc2c, 0
  store i1 %v2_fc2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fc2c, label %dec_label_pc_faa0.loopexit, label %dec_label_pc_fc34

dec_label_pc_fc34:                                ; preds = %dec_label_pc_fc2c
  %v0_fc34 = load i32, i32* @r6, align 4
  %v1_fc34 = add i32 %v0_fc34, 24
  %v2_fc34 = inttoptr i32 %v1_fc34 to i32*
  %v3_fc34 = load i32, i32* %v2_fc34, align 4
  store i32 %v3_fc34, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ffdc

dec_label_pc_fc3c:                                ; preds = %dec_label_pc_fb20
  %v1_fc3c = add i32 %v0_fb20, 24
  %v2_fc3c = inttoptr i32 %v1_fc3c to i32*
  %v3_fc3c = load i32, i32* %v2_fc3c, align 4
  store i32 %v3_fc3c, i32* %r3.global-to-local, align 4
  %v1_fc40 = add i32 %v3_fc3c, -1
  store i32 %v1_fc40, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc44 = icmp eq i32 %v1_fc40, 0
  store i1 %v2_fc44, i1* %cpsr_z.global-to-local, align 1
  %v5_fc48 = icmp sgt i32 %v1_fc40, 0
  br i1 %v5_fc48, label %dec_label_pc_fc70, label %dec_label_pc_fa00

dec_label_pc_fc50:                                ; preds = %bb344
  %v2_fc50 = icmp ugt i8 %v3_fc74, 35
  store i1 %v2_fc50, i1* %cpsr_c.global-to-local, align 1
  %v7_fc50 = icmp eq i8 %v3_fc74, 36
  store i1 %v7_fc50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc50, label %dec_label_pc_fc84, label %dec_label_pc_fc58

dec_label_pc_fc58:                                ; preds = %dec_label_pc_fc50
  %v2_fc58 = icmp ugt i8 %v3_fc74, 34
  store i1 %v2_fc58, i1* %cpsr_c.global-to-local, align 1
  %v7_fc58 = icmp eq i8 %v3_fc74, 35
  store i1 %v7_fc58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc58, label %dec_label_pc_fc84, label %dec_label_pc_fc60

dec_label_pc_fc60:                                ; preds = %dec_label_pc_fc58
  %v2_fc60 = icmp ugt i8 %v3_fc74, 36
  store i1 %v2_fc60, i1* %cpsr_c.global-to-local, align 1
  %v7_fc60 = icmp eq i8 %v3_fc74, 37
  store i1 %v7_fc60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc60, label %dec_label_pc_fc84, label %dec_label_pc_fc68

dec_label_pc_fc68:                                ; preds = %dec_label_pc_fc60
  %v1_fc68 = add i32 %v0_fc84, -1
  store i32 %v1_fc68, i32* %r0.global-to-local, align 4
  %v2_fc68 = icmp ne i32 %v0_fc84, 0
  store i1 %v2_fc68, i1* %cpsr_c.global-to-local, align 1
  %v7_fc68 = icmp eq i32 %v0_fc84, 1
  store i1 %v7_fc68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc68, label %dec_label_pc_fa00, label %dec_label_pc_fc70

dec_label_pc_fc70:                                ; preds = %dec_label_pc_fc3c, %dec_label_pc_fc68
  %v0_fc84 = phi i32 [ %v1_fc68, %dec_label_pc_fc68 ], [ %v1_fc40, %dec_label_pc_fc3c ]
  %v2_fc70 = add i32 %v0_fc84, %v0_fb20
  store i32 %v2_fc70, i32* %r3.global-to-local, align 4
  %v1_fc74 = add i32 %v2_fc70, 28
  %v2_fc74 = inttoptr i32 %v1_fc74 to i8*
  %v3_fc74 = load i8, i8* %v2_fc74, align 1
  %v4_fc74 = zext i8 %v3_fc74 to i32
  store i32 %v4_fc74, i32* %r3.global-to-local, align 4
  %v2_fc78 = icmp ugt i8 %v3_fc74, 61
  store i1 %v2_fc78, i1* %cpsr_c.global-to-local, align 1
  %v7_fc78 = icmp eq i8 %v3_fc74, 62
  store i1 %v7_fc78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc78, label %dec_label_pc_fc84, label %bb344

bb344:                                            ; preds = %dec_label_pc_fc70
  %v3_fc7c = icmp ugt i8 %v3_fc74, 57
  store i1 %v3_fc7c, i1* %cpsr_c.global-to-local, align 1
  %v8_fc7c = icmp eq i8 %v3_fc74, 58
  store i1 %v8_fc7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fc7c, label %dec_label_pc_fc84, label %dec_label_pc_fc50

dec_label_pc_fc84:                                ; preds = %dec_label_pc_fc70, %bb344, %dec_label_pc_fc60, %dec_label_pc_fc58, %dec_label_pc_fc50
  %v1_fc84 = add i32 %v0_fc84, 1
  store i32 %v1_fc84, i32* @r7, align 4
  %v2_fc88 = icmp eq i32 %v1_fc84, -1
  store i1 %v2_fc88, i1* %cpsr_c.global-to-local, align 1
  %v7_fc88 = icmp eq i32 %v0_fc84, -2
  store i1 %v7_fc88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc88, label %dec_label_pc_fa00, label %dec_label_pc_fc90

dec_label_pc_fc90:                                ; preds = %dec_label_pc_fc84
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_fc94 = call i32 @function_10570(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_fc9c = call i32 @function_10570(i32 30)
  store i32 %v1_fc9c, i32* %r0.global-to-local, align 4
  %v0_fca0.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_fca0

dec_label_pc_fca0:                                ; preds = %dec_label_pc_fa88, %dec_label_pc_fc90
  %v0_fca0 = phi i32 [ %v0_fa98, %dec_label_pc_fa88 ], [ %v0_fca0.pre, %dec_label_pc_fc90 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fca0 = icmp eq i32 %v0_fca0, 0
  store i1 %v2_fca0, i1* %cpsr_z.global-to-local, align 1
  %tmp345 = icmp slt i32 %v0_fca0, 1
  br i1 %tmp345, label %dec_label_pc_fc2c, label %dec_label_pc_fca8

dec_label_pc_fca8:                                ; preds = %dec_label_pc_fca0
  %v0_fca8 = load i32, i32* @r6, align 4
  %v1_fca8 = inttoptr i32 %v0_fca8 to i32*
  %v2_fca8 = load i32, i32* %v1_fca8, align 4
  store i32 %v2_fca8, i32* %r3.global-to-local, align 4
  %v1_fcac = add i32 %v0_fca8, 4
  %v2_fcac = inttoptr i32 %v1_fcac to i32*
  %v3_fcac = load i32, i32* %v2_fcac, align 4
  store i32 %v3_fcac, i32* %r0.global-to-local, align 4
  %v1_fcb0 = add i32 %v2_fca8, 12
  %v2_fcb0 = inttoptr i32 %v1_fcb0 to i8*
  %v3_fcb0 = load i8, i8* %v2_fcb0, align 1
  %v4_fcb0 = zext i8 %v3_fcb0 to i32
  store i32 %v4_fcb0, i32* %r2.global-to-local, align 4
  %v1_fcb4 = inttoptr i32 %v2_fca8 to i32*
  %v2_fcb4 = load i32, i32* %v1_fcb4, align 4
  store i32 %v2_fcb4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fcbc = inttoptr i32 %v2_fcb4 to i32*
  %v5_fcbc = call i32 @function_11dfc(i32 %v3_fcac, i32* %v4_fcbc, i32 %v4_fcb0, i32 16384)
  store i32 %v5_fcbc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fcc4 = load i32, i32* @r6, align 4
  %v1_fcc4 = add i32 %v0_fcc4, 4
  %v2_fcc4 = inttoptr i32 %v1_fcc4 to i32*
  %v3_fcc4 = load i32, i32* %v2_fcc4, align 4
  store i32 %v3_fcc4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13eb4.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fcd0 = call i32 @function_11dfc(i32 %v3_fcc4, i32* bitcast ([3 x i8]* @global_var_13eb4.205 to i32*), i32 2, i32 16384)
  store i32 %v5_fcd0, i32* %r0.global-to-local, align 4
  %v0_fcd4 = load i32, i32* @r6, align 4
  %v1_fcd4 = add i32 %v0_fcd4, 24
  %v2_fcd4 = inttoptr i32 %v1_fcd4 to i32*
  %v3_fcd4 = load i32, i32* %v2_fcd4, align 4
  store i32 %v3_fcd4, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_fcdc = add i32 %v0_fcd4, 12
  %v3_fcdc = inttoptr i32 %v2_fcdc to i32*
  store i32 4, i32* %v3_fcdc, align 4
  br label %dec_label_pc_ffdc

dec_label_pc_fce4:                                ; preds = %dec_label_pc_fb20
  %v1_fce4 = add i32 %v0_fb20, 24
  %v2_fce4 = inttoptr i32 %v1_fce4 to i32*
  %v3_fce4 = load i32, i32* %v2_fce4, align 4
  store i32 %v3_fce4, i32* %r3.global-to-local, align 4
  %v1_fce8 = add i32 %v3_fce4, -1
  store i32 %v1_fce8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fcec = icmp eq i32 %v1_fce8, 0
  store i1 %v2_fcec, i1* %cpsr_z.global-to-local, align 1
  %v5_fcf0 = icmp sgt i32 %v1_fce8, 0
  br i1 %v5_fcf0, label %dec_label_pc_fd10, label %dec_label_pc_10284

dec_label_pc_fcf8:                                ; preds = %bb346
  %v2_fcf8 = icmp ugt i8 %v3_fd14, 35
  store i1 %v2_fcf8, i1* %cpsr_c.global-to-local, align 1
  %v7_fcf8 = icmp eq i8 %v3_fd14, 36
  store i1 %v7_fcf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcf8, label %dec_label_pc_fd24, label %dec_label_pc_fd00

dec_label_pc_fd00:                                ; preds = %dec_label_pc_fcf8
  %v2_fd00 = icmp ugt i8 %v3_fd14, 34
  store i1 %v2_fd00, i1* %cpsr_c.global-to-local, align 1
  %v7_fd00 = icmp eq i8 %v3_fd14, 35
  store i1 %v7_fd00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd00, label %dec_label_pc_fd24, label %dec_label_pc_fd08

dec_label_pc_fd08:                                ; preds = %dec_label_pc_fd00
  %v1_fd08 = add i32 %v0_fd24, -1
  store i32 %v1_fd08, i32* %r0.global-to-local, align 4
  %v2_fd08 = icmp ne i32 %v0_fd24, 0
  store i1 %v2_fd08, i1* %cpsr_c.global-to-local, align 1
  %v7_fd08 = icmp eq i32 %v0_fd24, 1
  store i1 %v7_fd08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd08, label %dec_label_pc_10284, label %dec_label_pc_fd10

dec_label_pc_fd10:                                ; preds = %dec_label_pc_fce4, %dec_label_pc_fd08
  %v0_fd24 = phi i32 [ %v1_fd08, %dec_label_pc_fd08 ], [ %v1_fce8, %dec_label_pc_fce4 ]
  %v2_fd10 = add i32 %v0_fd24, %v0_fb20
  store i32 %v2_fd10, i32* %r3.global-to-local, align 4
  %v1_fd14 = add i32 %v2_fd10, 28
  %v2_fd14 = inttoptr i32 %v1_fd14 to i8*
  %v3_fd14 = load i8, i8* %v2_fd14, align 1
  %v4_fd14 = zext i8 %v3_fd14 to i32
  store i32 %v4_fd14, i32* %r3.global-to-local, align 4
  %v2_fd18 = icmp ugt i8 %v3_fd14, 61
  store i1 %v2_fd18, i1* %cpsr_c.global-to-local, align 1
  %v7_fd18 = icmp eq i8 %v3_fd14, 62
  store i1 %v7_fd18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd18, label %dec_label_pc_fd24, label %bb346

bb346:                                            ; preds = %dec_label_pc_fd10
  %v3_fd1c = icmp ugt i8 %v3_fd14, 57
  store i1 %v3_fd1c, i1* %cpsr_c.global-to-local, align 1
  %v8_fd1c = icmp eq i8 %v3_fd14, 58
  store i1 %v8_fd1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fd1c, label %dec_label_pc_fd24, label %dec_label_pc_fcf8

dec_label_pc_fd24:                                ; preds = %dec_label_pc_fd10, %bb346, %dec_label_pc_fd00, %dec_label_pc_fcf8
  %v1_fd24 = add i32 %v0_fd24, 1
  store i32 %v1_fd24, i32* @r7, align 4
  %v2_fd28 = icmp eq i32 %v1_fd24, -1
  store i1 %v2_fd28, i1* %cpsr_c.global-to-local, align 1
  %v7_fd28 = icmp eq i32 %v0_fd24, -2
  store i1 %v7_fd28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd28, label %dec_label_pc_10284, label %dec_label_pc_fd30

dec_label_pc_fd30:                                ; preds = %dec_label_pc_fd24
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_fd34 = call i32 @function_10570(i32 28)
  store i32 %v1_fd34, i32* %r0.global-to-local, align 4
  %v0_fd38.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_fd38

dec_label_pc_fd38:                                ; preds = %dec_label_pc_102c4, %dec_label_pc_fd30
  %v0_fd38 = phi i32 [ %v0_102cc, %dec_label_pc_102c4 ], [ %v0_fd38.pre, %dec_label_pc_fd30 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd38 = icmp eq i32 %v0_fd38, 0
  store i1 %v2_fd38, i1* %cpsr_z.global-to-local, align 1
  %tmp347 = icmp slt i32 %v0_fd38, 1
  br i1 %tmp347, label %dec_label_pc_fc2c, label %dec_label_pc_fd40

dec_label_pc_fd40:                                ; preds = %dec_label_pc_fd38
  %v0_fd40 = load i32, i32* @r6, align 4
  %v1_fd40 = inttoptr i32 %v0_fd40 to i32*
  %v2_fd40 = load i32, i32* %v1_fd40, align 4
  store i32 %v2_fd40, i32* %r3.global-to-local, align 4
  %v1_fd44 = add i32 %v0_fd40, 4
  %v2_fd44 = inttoptr i32 %v1_fd44 to i32*
  %v3_fd44 = load i32, i32* %v2_fd44, align 4
  store i32 %v3_fd44, i32* %r0.global-to-local, align 4
  %v1_fd48 = add i32 %v2_fd40, 13
  %v2_fd48 = inttoptr i32 %v1_fd48 to i8*
  %v3_fd48 = load i8, i8* %v2_fd48, align 1
  %v4_fd48 = zext i8 %v3_fd48 to i32
  store i32 %v4_fd48, i32* %r2.global-to-local, align 4
  %v1_fd4c = add i32 %v2_fd40, 4
  %v2_fd4c = inttoptr i32 %v1_fd4c to i32*
  %v3_fd4c = load i32, i32* %v2_fd4c, align 4
  store i32 %v3_fd4c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fd54 = inttoptr i32 %v3_fd4c to i32*
  %v5_fd54 = call i32 @function_11dfc(i32 %v3_fd44, i32* %v4_fd54, i32 %v4_fd48, i32 16384)
  store i32 %v5_fd54, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fd5c = load i32, i32* @r6, align 4
  %v1_fd5c = add i32 %v0_fd5c, 4
  %v2_fd5c = inttoptr i32 %v1_fd5c to i32*
  %v3_fd5c = load i32, i32* %v2_fd5c, align 4
  store i32 %v3_fd5c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13eb4.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fd68 = call i32 @function_11dfc(i32 %v3_fd5c, i32* bitcast ([3 x i8]* @global_var_13eb4.205 to i32*), i32 2, i32 16384)
  store i32 %v5_fd68, i32* %r0.global-to-local, align 4
  %v0_fd6c = load i32, i32* @r6, align 4
  %v1_fd6c = add i32 %v0_fd6c, 24
  %v2_fd6c = inttoptr i32 %v1_fd6c to i32*
  %v3_fd6c = load i32, i32* %v2_fd6c, align 4
  store i32 %v3_fd6c, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_fd74 = add i32 %v0_fd6c, 12
  %v3_fd74 = inttoptr i32 %v2_fd74 to i32*
  store i32 5, i32* %v3_fd74, align 4
  br label %dec_label_pc_ffdc

dec_label_pc_fd7c:                                ; preds = %dec_label_pc_fb20
  %v1_fd7c = add i32 %v0_fb20, 24
  %v2_fd7c = inttoptr i32 %v1_fd7c to i32*
  %v3_fd7c = load i32, i32* %v2_fd7c, align 4
  store i32 %v3_fd7c, i32* %ip.global-to-local, align 4
  %v1_fd80 = add i32 %v3_fd7c, -1
  store i32 %v1_fd80, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd84 = icmp eq i32 %v1_fd80, 0
  store i1 %v2_fd84, i1* %cpsr_z.global-to-local, align 1
  %v5_fd88 = icmp sgt i32 %v1_fd80, 0
  br i1 %v5_fd88, label %dec_label_pc_fdb0, label %dec_label_pc_faa4.backedge.thread

dec_label_pc_fd90:                                ; preds = %bb348
  %v2_fd90 = icmp ugt i8 %v3_fdb4, 35
  store i1 %v2_fd90, i1* %cpsr_c.global-to-local, align 1
  %v7_fd90 = icmp eq i8 %v3_fdb4, 36
  store i1 %v7_fd90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd90, label %dec_label_pc_fdc4, label %dec_label_pc_fd98

dec_label_pc_fd98:                                ; preds = %dec_label_pc_fd90
  %v2_fd98 = icmp ugt i8 %v3_fdb4, 34
  store i1 %v2_fd98, i1* %cpsr_c.global-to-local, align 1
  %v7_fd98 = icmp eq i8 %v3_fdb4, 35
  store i1 %v7_fd98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd98, label %dec_label_pc_fdc4, label %dec_label_pc_fda0

dec_label_pc_fda0:                                ; preds = %dec_label_pc_fd98
  %v2_fda0 = icmp ugt i8 %v3_fdb4, 36
  store i1 %v2_fda0, i1* %cpsr_c.global-to-local, align 1
  %v7_fda0 = icmp eq i8 %v3_fdb4, 37
  store i1 %v7_fda0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fda0, label %dec_label_pc_fdc4, label %dec_label_pc_fda8

dec_label_pc_fda8:                                ; preds = %dec_label_pc_fda0
  %v1_fda8 = add i32 %v0_fdc4, -1
  store i32 %v1_fda8, i32* %r0.global-to-local, align 4
  %v2_fda8 = icmp ne i32 %v0_fdc4, 0
  store i1 %v2_fda8, i1* %cpsr_c.global-to-local, align 1
  %v7_fda8 = icmp eq i32 %v0_fdc4, 1
  store i1 %v7_fda8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fda8, label %dec_label_pc_faa4.backedge.thread473, label %dec_label_pc_fdb0

dec_label_pc_fdb0:                                ; preds = %dec_label_pc_fd7c, %dec_label_pc_fda8
  %v0_fdc4 = phi i32 [ %v1_fda8, %dec_label_pc_fda8 ], [ %v1_fd80, %dec_label_pc_fd7c ]
  %v2_fdb0 = add i32 %v0_fdc4, %v0_fb20
  store i32 %v2_fdb0, i32* %r3.global-to-local, align 4
  %v1_fdb4 = add i32 %v2_fdb0, 28
  %v2_fdb4 = inttoptr i32 %v1_fdb4 to i8*
  %v3_fdb4 = load i8, i8* %v2_fdb4, align 1
  %v4_fdb4 = zext i8 %v3_fdb4 to i32
  store i32 %v4_fdb4, i32* %r3.global-to-local, align 4
  %v2_fdb8 = icmp ugt i8 %v3_fdb4, 61
  store i1 %v2_fdb8, i1* %cpsr_c.global-to-local, align 1
  %v7_fdb8 = icmp eq i8 %v3_fdb4, 62
  store i1 %v7_fdb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdb8, label %dec_label_pc_fdc4, label %bb348

bb348:                                            ; preds = %dec_label_pc_fdb0
  %v3_fdbc = icmp ugt i8 %v3_fdb4, 57
  store i1 %v3_fdbc, i1* %cpsr_c.global-to-local, align 1
  %v8_fdbc = icmp eq i8 %v3_fdb4, 58
  store i1 %v8_fdbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fdbc, label %dec_label_pc_fdc4, label %dec_label_pc_fd90

dec_label_pc_fdc4:                                ; preds = %dec_label_pc_fdb0, %bb348, %dec_label_pc_fda0, %dec_label_pc_fd98, %dec_label_pc_fd90
  %v1_fdc4 = add i32 %v0_fdc4, 1
  store i32 %v1_fdc4, i32* @r7, align 4
  %v2_fdc8 = icmp eq i32 %v1_fdc4, -1
  store i1 %v2_fdc8, i1* %cpsr_c.global-to-local, align 1
  %v7_fdc8 = icmp eq i32 %v0_fdc4, -2
  store i1 %v7_fdc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdc8, label %dec_label_pc_faa4.backedge.thread473, label %dec_label_pc_fdd0

dec_label_pc_fdd0:                                ; preds = %dec_label_pc_fdc4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fdd0 = icmp eq i32 %v1_fdc4, 0
  store i1 %v2_fdd0, i1* %cpsr_z.global-to-local, align 1
  %tmp349 = icmp slt i32 %v1_fdc4, 1
  br i1 %tmp349, label %dec_label_pc_fc2c, label %dec_label_pc_fdd8

dec_label_pc_fdd8:                                ; preds = %dec_label_pc_fdd0
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_fddc = call i32 @function_10628(i32 7)
  store i32 %v2_fa14, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_fdec = call i32 @function_10544(i32 7, i32* nonnull %stack_var_-56)
  store i32 %v3_fdec, i32* %r0.global-to-local, align 4
  %v3_fdf0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_fdf0, i32* %r2.global-to-local, align 4
  store i32 %v3_fdec, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fdfc = load i32, i32* @r6, align 4
  %v1_fdfc = add i32 %v0_fdfc, 4
  %v2_fdfc = inttoptr i32 %v1_fdfc to i32*
  %v3_fdfc = load i32, i32* %v2_fdfc, align 4
  store i32 %v3_fdfc, i32* %r0.global-to-local, align 4
  %v4_fe00 = inttoptr i32 %v3_fdec to i32*
  %v5_fe00 = call i32 @function_11dfc(i32 %v3_fdfc, i32* %v4_fe00, i32 %v3_fdf0, i32 16384)
  store i32 %v5_fe00, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13eb4.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fe10 = load i32, i32* @r6, align 4
  %v1_fe10 = add i32 %v0_fe10, 4
  %v2_fe10 = inttoptr i32 %v1_fe10 to i32*
  %v3_fe10 = load i32, i32* %v2_fe10, align 4
  store i32 %v3_fe10, i32* %r0.global-to-local, align 4
  %v5_fe14 = call i32 @function_11dfc(i32 %v3_fe10, i32* bitcast ([3 x i8]* @global_var_13eb4.205 to i32*), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_fe1c = call i32 @function_10570(i32 7)
  store i32 %v1_fe1c, i32* %r0.global-to-local, align 4
  %v0_fe20 = load i32, i32* @r6, align 4
  %v1_fe20 = add i32 %v0_fe20, 24
  %v2_fe20 = inttoptr i32 %v1_fe20 to i32*
  %v3_fe20 = load i32, i32* %v2_fe20, align 4
  store i32 %v3_fe20, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_fe28 = add i32 %v0_fe20, 12
  %v3_fe28 = inttoptr i32 %v2_fe28 to i32*
  store i32 6, i32* %v3_fe28, align 4
  br label %dec_label_pc_ffdc

dec_label_pc_fea4:                                ; preds = %dec_label_pc_fb20
  %v1_fea4 = add i32 %v0_fb20, 24
  %v2_fea4 = inttoptr i32 %v1_fea4 to i32*
  %v3_fea4 = load i32, i32* %v2_fea4, align 4
  store i32 %v3_fea4, i32* %ip.global-to-local, align 4
  %v1_fea8 = add i32 %v3_fea4, -1
  store i32 %v1_fea8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_feac = icmp eq i32 %v1_fea8, 0
  store i1 %v2_feac, i1* %cpsr_z.global-to-local, align 1
  %v5_feb0 = icmp sgt i32 %v1_fea8, 0
  br i1 %v5_feb0, label %dec_label_pc_fed8, label %dec_label_pc_faa4.backedge.thread

dec_label_pc_feb8:                                ; preds = %bb350
  %v2_feb8 = icmp ugt i8 %v3_fedc, 35
  store i1 %v2_feb8, i1* %cpsr_c.global-to-local, align 1
  %v7_feb8 = icmp eq i8 %v3_fedc, 36
  store i1 %v7_feb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_feb8, label %dec_label_pc_feec, label %dec_label_pc_fec0

dec_label_pc_fec0:                                ; preds = %dec_label_pc_feb8
  %v2_fec0 = icmp ugt i8 %v3_fedc, 34
  store i1 %v2_fec0, i1* %cpsr_c.global-to-local, align 1
  %v7_fec0 = icmp eq i8 %v3_fedc, 35
  store i1 %v7_fec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fec0, label %dec_label_pc_feec, label %dec_label_pc_fec8

dec_label_pc_fec8:                                ; preds = %dec_label_pc_fec0
  %v2_fec8 = icmp ugt i8 %v3_fedc, 36
  store i1 %v2_fec8, i1* %cpsr_c.global-to-local, align 1
  %v7_fec8 = icmp eq i8 %v3_fedc, 37
  store i1 %v7_fec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fec8, label %dec_label_pc_feec, label %dec_label_pc_fed0

dec_label_pc_fed0:                                ; preds = %dec_label_pc_fec8
  %v1_fed0 = add i32 %v0_feec, -1
  store i32 %v1_fed0, i32* %r0.global-to-local, align 4
  %v2_fed0 = icmp ne i32 %v0_feec, 0
  store i1 %v2_fed0, i1* %cpsr_c.global-to-local, align 1
  %v7_fed0 = icmp eq i32 %v0_feec, 1
  store i1 %v7_fed0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fed0, label %dec_label_pc_faa4.backedge.thread473, label %dec_label_pc_fed8

dec_label_pc_fed8:                                ; preds = %dec_label_pc_fea4, %dec_label_pc_fed0
  %v0_feec = phi i32 [ %v1_fed0, %dec_label_pc_fed0 ], [ %v1_fea8, %dec_label_pc_fea4 ]
  %v2_fed8 = add i32 %v0_feec, %v0_fb20
  store i32 %v2_fed8, i32* %r3.global-to-local, align 4
  %v1_fedc = add i32 %v2_fed8, 28
  %v2_fedc = inttoptr i32 %v1_fedc to i8*
  %v3_fedc = load i8, i8* %v2_fedc, align 1
  %v4_fedc = zext i8 %v3_fedc to i32
  store i32 %v4_fedc, i32* %r3.global-to-local, align 4
  %v2_fee0 = icmp ugt i8 %v3_fedc, 61
  store i1 %v2_fee0, i1* %cpsr_c.global-to-local, align 1
  %v7_fee0 = icmp eq i8 %v3_fedc, 62
  store i1 %v7_fee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fee0, label %dec_label_pc_feec, label %bb350

bb350:                                            ; preds = %dec_label_pc_fed8
  %v3_fee4 = icmp ugt i8 %v3_fedc, 57
  store i1 %v3_fee4, i1* %cpsr_c.global-to-local, align 1
  %v8_fee4 = icmp eq i8 %v3_fedc, 58
  store i1 %v8_fee4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fee4, label %dec_label_pc_feec, label %dec_label_pc_feb8

dec_label_pc_feec:                                ; preds = %dec_label_pc_fed8, %bb350, %dec_label_pc_fec8, %dec_label_pc_fec0, %dec_label_pc_feb8
  %v1_feec = add i32 %v0_feec, 1
  store i32 %v1_feec, i32* @r7, align 4
  %v2_fef0 = icmp eq i32 %v1_feec, -1
  store i1 %v2_fef0, i1* %cpsr_c.global-to-local, align 1
  %v7_fef0 = icmp eq i32 %v0_feec, -2
  store i1 %v7_fef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fef0, label %dec_label_pc_faa4.backedge.thread473, label %dec_label_pc_fef8

dec_label_pc_fef8:                                ; preds = %dec_label_pc_feec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fef8 = icmp eq i32 %v1_feec, 0
  store i1 %v2_fef8, i1* %cpsr_z.global-to-local, align 1
  %tmp351 = icmp slt i32 %v1_feec, 1
  br i1 %tmp351, label %dec_label_pc_fc2c, label %dec_label_pc_ff00

dec_label_pc_ff00:                                ; preds = %dec_label_pc_fef8
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_ff04 = call i32 @function_10628(i32 8)
  store i32 %v2_ff0c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_ff14 = call i32 @function_10544(i32 8, i32* nonnull %stack_var_-48)
  store i32 %v3_ff14, i32* %r0.global-to-local, align 4
  %v3_ff18 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_ff18, i32* %r2.global-to-local, align 4
  store i32 %v3_ff14, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ff24 = load i32, i32* @r6, align 4
  %v1_ff24 = add i32 %v0_ff24, 4
  %v2_ff24 = inttoptr i32 %v1_ff24 to i32*
  %v3_ff24 = load i32, i32* %v2_ff24, align 4
  store i32 %v3_ff24, i32* %r0.global-to-local, align 4
  %v4_ff28 = inttoptr i32 %v3_ff14 to i32*
  %v5_ff28 = call i32 @function_11dfc(i32 %v3_ff24, i32* %v4_ff28, i32 %v3_ff18, i32 16384)
  store i32 %v5_ff28, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13eb4.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ff38 = load i32, i32* @r6, align 4
  %v1_ff38 = add i32 %v0_ff38, 4
  %v2_ff38 = inttoptr i32 %v1_ff38 to i32*
  %v3_ff38 = load i32, i32* %v2_ff38, align 4
  store i32 %v3_ff38, i32* %r0.global-to-local, align 4
  %v5_ff3c = call i32 @function_11dfc(i32 %v3_ff38, i32* bitcast ([3 x i8]* @global_var_13eb4.205 to i32*), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_ff44 = call i32 @function_10570(i32 8)
  store i32 %v1_ff44, i32* %r0.global-to-local, align 4
  %v0_ff48 = load i32, i32* @r6, align 4
  %v1_ff48 = add i32 %v0_ff48, 24
  %v2_ff48 = inttoptr i32 %v1_ff48 to i32*
  %v3_ff48 = load i32, i32* %v2_ff48, align 4
  store i32 %v3_ff48, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_ff50 = add i32 %v0_ff48, 12
  %v3_ff50 = inttoptr i32 %v2_ff50 to i32*
  store i32 7, i32* %v3_ff50, align 4
  br label %dec_label_pc_ffdc

dec_label_pc_ff58:                                ; preds = %dec_label_pc_fb20
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_ff5c = call i32 @function_10628(i32 12)
  store i32 %v2_fa14, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v3_ff6c = call i32 @function_10544(i32 12, i32* nonnull %stack_var_-56)
  %v3_ff70 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_ff6c, i32* %r2.global-to-local, align 4
  %v1_ff78 = add i32 %v3_ff70, -1
  store i32 %v1_ff78, i32* %r3.global-to-local, align 4
  %v0_ff7c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_ff7c, i32* %r0.global-to-local, align 4
  %v0_ff80 = load i32, i32* @r6, align 4
  %v1_ff80 = add i32 %v0_ff80, 24
  %v2_ff80 = inttoptr i32 %v1_ff80 to i32*
  %v3_ff80 = load i32, i32* %v2_ff80, align 4
  store i32 %v3_ff80, i32* %r1.global-to-local, align 4
  %v4_ff84 = call i32 @function_10d34(i32 %v0_ff7c, i32 %v3_ff80, i32 %v3_ff6c, i32 %v1_ff78)
  %v2_ff88 = icmp eq i32 %v4_ff84, -1
  store i1 %v2_ff88, i1* %cpsr_c.global-to-local, align 1
  %v7_ff88 = icmp eq i32 %v4_ff84, -1
  store i1 %v7_ff88, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_ff84, i32* @r4, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_102dc = call i32 @function_10570(i32 12)
  br i1 %v7_ff88, label %dec_label_pc_102d8, label %dec_label_pc_ff94

dec_label_pc_ff94:                                ; preds = %dec_label_pc_ff58
  store i32 %v1_102dc, i32* %r0.global-to-local, align 4
  %v0_ff9c = load i32, i32* @r6, align 4
  %v1_ff9c = add i32 %v0_ff9c, 4
  %v2_ff9c = inttoptr i32 %v1_ff9c to i32*
  %v3_ff9c = load i32, i32* %v2_ff9c, align 4
  store i32 %v3_ff9c, i32* %r0.global-to-local, align 4
  %v1_ffa0 = call i32 @function_11574(i32 %v3_ff9c)
  store i32 %v1_ffa0, i32* %r0.global-to-local, align 4
  %v0_ffa4 = load i32, i32* @r6, align 4
  %v1_ffa4 = add i32 %v0_ffa4, 284
  %v2_ffa4 = inttoptr i32 %v1_ffa4 to i8*
  %v3_ffa4 = load i8, i8* %v2_ffa4, align 1
  %v4_ffa4 = zext i8 %v3_ffa4 to i32
  %v1_ffa8 = add nuw nsw i32 %v4_ffa4, 1
  %v1_ffac = urem i32 %v1_ffa8, 256
  store i32 %v1_ffac, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_ffb4 = icmp ugt i32 %v1_ffac, 9
  store i1 %v2_ffb4, i1* %cpsr_c.global-to-local, align 1
  %v7_ffb4 = icmp eq i32 %v1_ffac, 10
  store i1 %v7_ffb4, i1* %cpsr_z.global-to-local, align 1
  %v2_ffb8 = add i32 %v0_ffa4, 4
  %v3_ffb8 = inttoptr i32 %v2_ffb8 to i32*
  store i32 -1, i32* %v3_ffb8, align 4
  %v0_ffbc = load i32, i32* %r3.global-to-local, align 4
  %v1_ffbc = trunc i32 %v0_ffbc to i8
  %v2_ffbc = load i32, i32* @r6, align 4
  %v3_ffbc = add i32 %v2_ffbc, 284
  %v4_ffbc = inttoptr i32 %v3_ffbc to i8*
  store i8 %v1_ffbc, i8* %v4_ffbc, align 1
  %v0_ffc0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ffc0, label %dec_label_pc_ffc4, label %dec_label_pc_10438

dec_label_pc_ffc4:                                ; preds = %dec_label_pc_ff94
  store i32 0, i32* @lr, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_ffcc = load i32, i32* @r6, align 4
  %v1_ffcc = add i32 %v0_ffcc, 24
  %v2_ffcc = inttoptr i32 %v1_ffcc to i32*
  %v3_ffcc = load i32, i32* %v2_ffcc, align 4
  store i32 %v3_ffcc, i32* %ip.global-to-local, align 4
  %v3_ffd0 = add i32 %v0_ffcc, 284
  %v4_ffd0 = inttoptr i32 %v3_ffd0 to i8*
  store i8 0, i8* %v4_ffd0, align 1
  %v0_ffd4 = load i32, i32* %r0.global-to-local, align 4
  %v1_ffd4 = load i32, i32* @r6, align 4
  %v2_ffd4 = add i32 %v1_ffd4, 12
  %v3_ffd4 = inttoptr i32 %v2_ffd4 to i32*
  store i32 %v0_ffd4, i32* %v3_ffd4, align 4
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_ffdc

dec_label_pc_ffdc:                                ; preds = %.thread235, %dec_label_pc_101c4, %dec_label_pc_10110, %dec_label_pc_1005c, %dec_label_pc_10438, %dec_label_pc_10374, %dec_label_pc_ff00, %dec_label_pc_fdd8, %dec_label_pc_fd40, %dec_label_pc_fca8, %dec_label_pc_fc34, %dec_label_pc_ffc4
  %v0_ffdc = load i32, i32* %ip.global-to-local, align 4
  %v1_ffdc = load i32, i32* @r7, align 4
  %v2_ffdc = sub i32 %v0_ffdc, %v1_ffdc
  %v3_ffdc = icmp uge i32 %v0_ffdc, %v1_ffdc
  store i1 %v3_ffdc, i1* %cpsr_c.global-to-local, align 1
  %v4_ffdc = xor i32 %v1_ffdc, %v0_ffdc
  %v5_ffdc = xor i32 %v2_ffdc, %v0_ffdc
  %v6_ffdc = and i32 %v5_ffdc, %v4_ffdc
  %v7_ffdc = icmp slt i32 %v6_ffdc, 0
  %v8_ffdc = icmp slt i32 %v2_ffdc, 0
  %v9_ffdc = icmp eq i32 %v0_ffdc, %v1_ffdc
  store i1 %v9_ffdc, i1* %cpsr_z.global-to-local, align 1
  %v2_ffe0 = xor i1 %v8_ffdc, %v7_ffdc
  %v0_ffdc.v1_ffdc = select i1 %v2_ffe0, i32 %v0_ffdc, i32 %v1_ffdc
  store i32 %v0_ffdc.v1_ffdc, i32* %r1.global-to-local, align 4
  %v2_ffe8 = sub i32 %v0_ffdc, %v0_ffdc.v1_ffdc
  store i32 %v2_ffe8, i32* @r2, align 4
  %v1_ffec = load i32, i32* @r6, align 4
  %v2_ffec = add i32 %v1_ffec, 24
  %v3_ffec = inttoptr i32 %v2_ffec to i32*
  store i32 %v2_ffe8, i32* %v3_ffec, align 4
  %v0_fff0 = load i32, i32* %r8.global-to-local, align 4
  %v1_fff0 = load i32, i32* %r1.global-to-local, align 4
  %v2_fff0 = add i32 %v1_fff0, %v0_fff0
  store i32 %v2_fff0, i32* @r1, align 4
  store i32 %v0_fff0, i32* @r0, align 4
  %v3_fff8 = call i32 @function_11ba0(i32 %v0_fff0, i32 %v2_fff0, i32 %v2_ffe8)
  store i32 %v3_fff8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fb20

dec_label_pc_10000:                               ; preds = %dec_label_pc_fb20
  %v1_10000 = add i32 %v0_fb20, 24
  %v2_10000 = inttoptr i32 %v1_10000 to i32*
  %v3_10000 = load i32, i32* %v2_10000, align 4
  store i32 %v3_10000, i32* %ip.global-to-local, align 4
  %v1_10004 = add i32 %v3_10000, -1
  store i32 %v1_10004, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10008 = icmp eq i32 %v1_10004, 0
  store i1 %v2_10008, i1* %cpsr_z.global-to-local, align 1
  %v5_1000c = icmp sgt i32 %v1_10004, 0
  br i1 %v5_1000c, label %dec_label_pc_10034, label %dec_label_pc_faa4.backedge.thread

dec_label_pc_10014:                               ; preds = %bb354
  %v2_10014 = icmp ugt i8 %v3_10038, 35
  store i1 %v2_10014, i1* %cpsr_c.global-to-local, align 1
  %v7_10014 = icmp eq i8 %v3_10038, 36
  store i1 %v7_10014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10014, label %dec_label_pc_10048, label %dec_label_pc_1001c

dec_label_pc_1001c:                               ; preds = %dec_label_pc_10014
  %v2_1001c = icmp ugt i8 %v3_10038, 34
  store i1 %v2_1001c, i1* %cpsr_c.global-to-local, align 1
  %v7_1001c = icmp eq i8 %v3_10038, 35
  store i1 %v7_1001c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1001c, label %dec_label_pc_10048, label %dec_label_pc_10024

dec_label_pc_10024:                               ; preds = %dec_label_pc_1001c
  %v2_10024 = icmp ugt i8 %v3_10038, 36
  store i1 %v2_10024, i1* %cpsr_c.global-to-local, align 1
  %v7_10024 = icmp eq i8 %v3_10038, 37
  store i1 %v7_10024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10024, label %dec_label_pc_10048, label %dec_label_pc_1002c

dec_label_pc_1002c:                               ; preds = %dec_label_pc_10024
  %v1_1002c = add i32 %v0_10048, -1
  store i32 %v1_1002c, i32* %r0.global-to-local, align 4
  %v2_1002c = icmp ne i32 %v0_10048, 0
  store i1 %v2_1002c, i1* %cpsr_c.global-to-local, align 1
  %v7_1002c = icmp eq i32 %v0_10048, 1
  store i1 %v7_1002c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1002c, label %dec_label_pc_faa4.backedge.thread473, label %dec_label_pc_10034

dec_label_pc_10034:                               ; preds = %dec_label_pc_10000, %dec_label_pc_1002c
  %v0_10048 = phi i32 [ %v1_1002c, %dec_label_pc_1002c ], [ %v1_10004, %dec_label_pc_10000 ]
  %v2_10034 = add i32 %v0_10048, %v0_fb20
  store i32 %v2_10034, i32* %r3.global-to-local, align 4
  %v1_10038 = add i32 %v2_10034, 28
  %v2_10038 = inttoptr i32 %v1_10038 to i8*
  %v3_10038 = load i8, i8* %v2_10038, align 1
  %v4_10038 = zext i8 %v3_10038 to i32
  store i32 %v4_10038, i32* %r3.global-to-local, align 4
  %v2_1003c = icmp ugt i8 %v3_10038, 61
  store i1 %v2_1003c, i1* %cpsr_c.global-to-local, align 1
  %v7_1003c = icmp eq i8 %v3_10038, 62
  store i1 %v7_1003c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1003c, label %dec_label_pc_10048, label %bb354

bb354:                                            ; preds = %dec_label_pc_10034
  %v3_10040 = icmp ugt i8 %v3_10038, 57
  store i1 %v3_10040, i1* %cpsr_c.global-to-local, align 1
  %v8_10040 = icmp eq i8 %v3_10038, 58
  store i1 %v8_10040, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10040, label %dec_label_pc_10048, label %dec_label_pc_10014

dec_label_pc_10048:                               ; preds = %dec_label_pc_10034, %bb354, %dec_label_pc_10024, %dec_label_pc_1001c, %dec_label_pc_10014
  %v1_10048 = add i32 %v0_10048, 1
  store i32 %v1_10048, i32* @r7, align 4
  %v2_1004c = icmp eq i32 %v1_10048, -1
  store i1 %v2_1004c, i1* %cpsr_c.global-to-local, align 1
  %v7_1004c = icmp eq i32 %v0_10048, -2
  store i1 %v7_1004c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1004c, label %dec_label_pc_faa4.backedge.thread473, label %dec_label_pc_10054

dec_label_pc_10054:                               ; preds = %dec_label_pc_10048
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10054 = icmp eq i32 %v1_10048, 0
  store i1 %v2_10054, i1* %cpsr_z.global-to-local, align 1
  %tmp355 = icmp slt i32 %v1_10048, 1
  br i1 %tmp355, label %dec_label_pc_fc2c, label %dec_label_pc_1005c

dec_label_pc_1005c:                               ; preds = %dec_label_pc_10054
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_10060 = call i32 @function_10628(i32 9)
  store i32 %v2_fa14, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_10070 = call i32 @function_10544(i32 9, i32* nonnull %stack_var_-56)
  store i32 %v3_10070, i32* %r0.global-to-local, align 4
  %v3_10074 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10074, i32* %r2.global-to-local, align 4
  store i32 %v3_10070, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10080 = load i32, i32* @r6, align 4
  %v1_10080 = add i32 %v0_10080, 4
  %v2_10080 = inttoptr i32 %v1_10080 to i32*
  %v3_10080 = load i32, i32* %v2_10080, align 4
  store i32 %v3_10080, i32* %r0.global-to-local, align 4
  %v4_10084 = inttoptr i32 %v3_10070 to i32*
  %v5_10084 = call i32 @function_11dfc(i32 %v3_10080, i32* %v4_10084, i32 %v3_10074, i32 16384)
  store i32 %v5_10084, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13eb4.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10094 = load i32, i32* @r6, align 4
  %v1_10094 = add i32 %v0_10094, 4
  %v2_10094 = inttoptr i32 %v1_10094 to i32*
  %v3_10094 = load i32, i32* %v2_10094, align 4
  store i32 %v3_10094, i32* %r0.global-to-local, align 4
  %v5_10098 = call i32 @function_11dfc(i32 %v3_10094, i32* bitcast ([3 x i8]* @global_var_13eb4.205 to i32*), i32 2, i32 16384)
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_100a0 = call i32 @function_10570(i32 9)
  store i32 %v1_100a0, i32* %r0.global-to-local, align 4
  %v0_100a4 = load i32, i32* @r6, align 4
  %v1_100a4 = add i32 %v0_100a4, 24
  %v2_100a4 = inttoptr i32 %v1_100a4 to i32*
  %v3_100a4 = load i32, i32* %v2_100a4, align 4
  store i32 %v3_100a4, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_100ac = add i32 %v0_100a4, 12
  %v3_100ac = inttoptr i32 %v2_100ac to i32*
  store i32 9, i32* %v3_100ac, align 4
  br label %dec_label_pc_ffdc

dec_label_pc_100b4:                               ; preds = %dec_label_pc_fb20
  %v1_100b4 = add i32 %v0_fb20, 24
  %v2_100b4 = inttoptr i32 %v1_100b4 to i32*
  %v3_100b4 = load i32, i32* %v2_100b4, align 4
  store i32 %v3_100b4, i32* %ip.global-to-local, align 4
  %v1_100b8 = add i32 %v3_100b4, -1
  store i32 %v1_100b8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_100bc = icmp eq i32 %v1_100b8, 0
  store i1 %v2_100bc, i1* %cpsr_z.global-to-local, align 1
  %v5_100c0 = icmp sgt i32 %v1_100b8, 0
  br i1 %v5_100c0, label %dec_label_pc_100e8, label %dec_label_pc_faa4.backedge.thread

dec_label_pc_100c8:                               ; preds = %bb356
  %v2_100c8 = icmp ugt i8 %v3_100ec, 35
  store i1 %v2_100c8, i1* %cpsr_c.global-to-local, align 1
  %v7_100c8 = icmp eq i8 %v3_100ec, 36
  store i1 %v7_100c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100c8, label %dec_label_pc_100fc, label %dec_label_pc_100d0

dec_label_pc_100d0:                               ; preds = %dec_label_pc_100c8
  %v2_100d0 = icmp ugt i8 %v3_100ec, 34
  store i1 %v2_100d0, i1* %cpsr_c.global-to-local, align 1
  %v7_100d0 = icmp eq i8 %v3_100ec, 35
  store i1 %v7_100d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100d0, label %dec_label_pc_100fc, label %dec_label_pc_100d8

dec_label_pc_100d8:                               ; preds = %dec_label_pc_100d0
  %v2_100d8 = icmp ugt i8 %v3_100ec, 36
  store i1 %v2_100d8, i1* %cpsr_c.global-to-local, align 1
  %v7_100d8 = icmp eq i8 %v3_100ec, 37
  store i1 %v7_100d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100d8, label %dec_label_pc_100fc, label %dec_label_pc_100e0

dec_label_pc_100e0:                               ; preds = %dec_label_pc_100d8
  %v1_100e0 = add i32 %v0_100fc, -1
  store i32 %v1_100e0, i32* %r0.global-to-local, align 4
  %v2_100e0 = icmp ne i32 %v0_100fc, 0
  store i1 %v2_100e0, i1* %cpsr_c.global-to-local, align 1
  %v7_100e0 = icmp eq i32 %v0_100fc, 1
  store i1 %v7_100e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100e0, label %dec_label_pc_faa4.backedge.thread473, label %dec_label_pc_100e8

dec_label_pc_100e8:                               ; preds = %dec_label_pc_100b4, %dec_label_pc_100e0
  %v0_100fc = phi i32 [ %v1_100e0, %dec_label_pc_100e0 ], [ %v1_100b8, %dec_label_pc_100b4 ]
  %v2_100e8 = add i32 %v0_100fc, %v0_fb20
  store i32 %v2_100e8, i32* %r3.global-to-local, align 4
  %v1_100ec = add i32 %v2_100e8, 28
  %v2_100ec = inttoptr i32 %v1_100ec to i8*
  %v3_100ec = load i8, i8* %v2_100ec, align 1
  %v4_100ec = zext i8 %v3_100ec to i32
  store i32 %v4_100ec, i32* %r3.global-to-local, align 4
  %v2_100f0 = icmp ugt i8 %v3_100ec, 61
  store i1 %v2_100f0, i1* %cpsr_c.global-to-local, align 1
  %v7_100f0 = icmp eq i8 %v3_100ec, 62
  store i1 %v7_100f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100f0, label %dec_label_pc_100fc, label %bb356

bb356:                                            ; preds = %dec_label_pc_100e8
  %v3_100f4 = icmp ugt i8 %v3_100ec, 57
  store i1 %v3_100f4, i1* %cpsr_c.global-to-local, align 1
  %v8_100f4 = icmp eq i8 %v3_100ec, 58
  store i1 %v8_100f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_100f4, label %dec_label_pc_100fc, label %dec_label_pc_100c8

dec_label_pc_100fc:                               ; preds = %dec_label_pc_100e8, %bb356, %dec_label_pc_100d8, %dec_label_pc_100d0, %dec_label_pc_100c8
  %v1_100fc = add i32 %v0_100fc, 1
  store i32 %v1_100fc, i32* @r7, align 4
  %v2_10100 = icmp eq i32 %v1_100fc, -1
  store i1 %v2_10100, i1* %cpsr_c.global-to-local, align 1
  %v7_10100 = icmp eq i32 %v0_100fc, -2
  store i1 %v7_10100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10100, label %dec_label_pc_faa4.backedge.thread473, label %dec_label_pc_10108

dec_label_pc_10108:                               ; preds = %dec_label_pc_100fc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10108 = icmp eq i32 %v1_100fc, 0
  store i1 %v2_10108, i1* %cpsr_z.global-to-local, align 1
  %tmp357 = icmp slt i32 %v1_100fc, 1
  br i1 %tmp357, label %dec_label_pc_fc2c, label %dec_label_pc_10110

dec_label_pc_10110:                               ; preds = %dec_label_pc_10108
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10114 = call i32 @function_10628(i32 10)
  store i32 %v2_fa14, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_10124 = call i32 @function_10544(i32 10, i32* nonnull %stack_var_-56)
  store i32 %v3_10124, i32* %r0.global-to-local, align 4
  %v3_10128 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10128, i32* %r2.global-to-local, align 4
  store i32 %v3_10124, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10134 = load i32, i32* @r6, align 4
  %v1_10134 = add i32 %v0_10134, 4
  %v2_10134 = inttoptr i32 %v1_10134 to i32*
  %v3_10134 = load i32, i32* %v2_10134, align 4
  store i32 %v3_10134, i32* %r0.global-to-local, align 4
  %v4_10138 = inttoptr i32 %v3_10124 to i32*
  %v5_10138 = call i32 @function_11dfc(i32 %v3_10134, i32* %v4_10138, i32 %v3_10128, i32 16384)
  store i32 %v5_10138, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13eb4.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10148 = load i32, i32* @r6, align 4
  %v1_10148 = add i32 %v0_10148, 4
  %v2_10148 = inttoptr i32 %v1_10148 to i32*
  %v3_10148 = load i32, i32* %v2_10148, align 4
  store i32 %v3_10148, i32* %r0.global-to-local, align 4
  %v5_1014c = call i32 @function_11dfc(i32 %v3_10148, i32* bitcast ([3 x i8]* @global_var_13eb4.205 to i32*), i32 2, i32 16384)
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10154 = call i32 @function_10570(i32 10)
  store i32 %v1_10154, i32* %r0.global-to-local, align 4
  %v0_10158 = load i32, i32* @r6, align 4
  %v1_10158 = add i32 %v0_10158, 24
  %v2_10158 = inttoptr i32 %v1_10158 to i32*
  %v3_10158 = load i32, i32* %v2_10158, align 4
  store i32 %v3_10158, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_10160 = add i32 %v0_10158, 12
  %v3_10160 = inttoptr i32 %v2_10160 to i32*
  store i32 10, i32* %v3_10160, align 4
  br label %dec_label_pc_ffdc

dec_label_pc_10168:                               ; preds = %dec_label_pc_fb20
  %v1_10168 = add i32 %v0_fb20, 24
  %v2_10168 = inttoptr i32 %v1_10168 to i32*
  %v3_10168 = load i32, i32* %v2_10168, align 4
  store i32 %v3_10168, i32* %ip.global-to-local, align 4
  %v1_1016c = add i32 %v3_10168, -1
  store i32 %v1_1016c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10170 = icmp eq i32 %v1_1016c, 0
  store i1 %v2_10170, i1* %cpsr_z.global-to-local, align 1
  %v5_10174 = icmp sgt i32 %v1_1016c, 0
  br i1 %v5_10174, label %dec_label_pc_1019c, label %dec_label_pc_faa4.backedge.thread

dec_label_pc_1017c:                               ; preds = %bb358
  %v2_1017c = icmp ugt i8 %v3_101a0, 35
  store i1 %v2_1017c, i1* %cpsr_c.global-to-local, align 1
  %v7_1017c = icmp eq i8 %v3_101a0, 36
  store i1 %v7_1017c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1017c, label %dec_label_pc_101b0, label %dec_label_pc_10184

dec_label_pc_10184:                               ; preds = %dec_label_pc_1017c
  %v2_10184 = icmp ugt i8 %v3_101a0, 34
  store i1 %v2_10184, i1* %cpsr_c.global-to-local, align 1
  %v7_10184 = icmp eq i8 %v3_101a0, 35
  store i1 %v7_10184, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10184, label %dec_label_pc_101b0, label %dec_label_pc_1018c

dec_label_pc_1018c:                               ; preds = %dec_label_pc_10184
  %v2_1018c = icmp ugt i8 %v3_101a0, 36
  store i1 %v2_1018c, i1* %cpsr_c.global-to-local, align 1
  %v7_1018c = icmp eq i8 %v3_101a0, 37
  store i1 %v7_1018c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1018c, label %dec_label_pc_101b0, label %dec_label_pc_10194

dec_label_pc_10194:                               ; preds = %dec_label_pc_1018c
  %v1_10194 = add i32 %v0_101b0, -1
  store i32 %v1_10194, i32* %r0.global-to-local, align 4
  %v2_10194 = icmp ne i32 %v0_101b0, 0
  store i1 %v2_10194, i1* %cpsr_c.global-to-local, align 1
  %v7_10194 = icmp eq i32 %v0_101b0, 1
  store i1 %v7_10194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10194, label %dec_label_pc_faa4.backedge.thread473, label %dec_label_pc_1019c

dec_label_pc_1019c:                               ; preds = %dec_label_pc_10168, %dec_label_pc_10194
  %v0_101b0 = phi i32 [ %v1_10194, %dec_label_pc_10194 ], [ %v1_1016c, %dec_label_pc_10168 ]
  %v2_1019c = add i32 %v0_101b0, %v0_fb20
  store i32 %v2_1019c, i32* %r3.global-to-local, align 4
  %v1_101a0 = add i32 %v2_1019c, 28
  %v2_101a0 = inttoptr i32 %v1_101a0 to i8*
  %v3_101a0 = load i8, i8* %v2_101a0, align 1
  %v4_101a0 = zext i8 %v3_101a0 to i32
  store i32 %v4_101a0, i32* %r3.global-to-local, align 4
  %v2_101a4 = icmp ugt i8 %v3_101a0, 61
  store i1 %v2_101a4, i1* %cpsr_c.global-to-local, align 1
  %v7_101a4 = icmp eq i8 %v3_101a0, 62
  store i1 %v7_101a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101a4, label %dec_label_pc_101b0, label %bb358

bb358:                                            ; preds = %dec_label_pc_1019c
  %v3_101a8 = icmp ugt i8 %v3_101a0, 57
  store i1 %v3_101a8, i1* %cpsr_c.global-to-local, align 1
  %v8_101a8 = icmp eq i8 %v3_101a0, 58
  store i1 %v8_101a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_101a8, label %dec_label_pc_101b0, label %dec_label_pc_1017c

dec_label_pc_101b0:                               ; preds = %dec_label_pc_1019c, %bb358, %dec_label_pc_1018c, %dec_label_pc_10184, %dec_label_pc_1017c
  %v1_101b0 = add i32 %v0_101b0, 1
  store i32 %v1_101b0, i32* @r7, align 4
  %v2_101b4 = icmp eq i32 %v1_101b0, -1
  store i1 %v2_101b4, i1* %cpsr_c.global-to-local, align 1
  %v7_101b4 = icmp eq i32 %v0_101b0, -2
  store i1 %v7_101b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101b4, label %dec_label_pc_faa4.backedge.thread473, label %dec_label_pc_101bc

dec_label_pc_101bc:                               ; preds = %dec_label_pc_101b0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101bc = icmp eq i32 %v1_101b0, 0
  store i1 %v2_101bc, i1* %cpsr_z.global-to-local, align 1
  %tmp359 = icmp slt i32 %v1_101b0, 1
  br i1 %tmp359, label %dec_label_pc_fc2c, label %dec_label_pc_101c4

dec_label_pc_101c4:                               ; preds = %dec_label_pc_101bc
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_101c8 = call i32 @function_10628(i32 6)
  store i32 %v2_ff0c, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_101d8 = call i32 @function_10544(i32 6, i32* nonnull %stack_var_-48)
  store i32 %v3_101d8, i32* %r0.global-to-local, align 4
  %v3_101dc = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_101dc, i32* %r2.global-to-local, align 4
  store i32 %v3_101d8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_101e8 = load i32, i32* @r6, align 4
  %v1_101e8 = add i32 %v0_101e8, 4
  %v2_101e8 = inttoptr i32 %v1_101e8 to i32*
  %v3_101e8 = load i32, i32* %v2_101e8, align 4
  store i32 %v3_101e8, i32* %r0.global-to-local, align 4
  %v4_101ec = inttoptr i32 %v3_101d8 to i32*
  %v5_101ec = call i32 @function_11dfc(i32 %v3_101e8, i32* %v4_101ec, i32 %v3_101dc, i32 16384)
  store i32 %v5_101ec, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_13eb4.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_101fc = load i32, i32* @r6, align 4
  %v1_101fc = add i32 %v0_101fc, 4
  %v2_101fc = inttoptr i32 %v1_101fc to i32*
  %v3_101fc = load i32, i32* %v2_101fc, align 4
  store i32 %v3_101fc, i32* %r0.global-to-local, align 4
  %v5_10200 = call i32 @function_11dfc(i32 %v3_101fc, i32* bitcast ([3 x i8]* @global_var_13eb4.205 to i32*), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_10208 = call i32 @function_10570(i32 6)
  store i32 %v1_10208, i32* %r0.global-to-local, align 4
  %v0_1020c = load i32, i32* @r6, align 4
  %v1_1020c = add i32 %v0_1020c, 24
  %v2_1020c = inttoptr i32 %v1_1020c to i32*
  %v3_1020c = load i32, i32* %v2_1020c, align 4
  store i32 %v3_1020c, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_10214 = add i32 %v0_1020c, 12
  %v3_10214 = inttoptr i32 %v2_10214 to i32*
  store i32 8, i32* %v3_10214, align 4
  br label %dec_label_pc_ffdc

dec_label_pc_1021c:                               ; preds = %dec_label_pc_fba4
  store i32 ptrtoint (i32* @global_var_13ec6.207 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_10228, i32* @r0, align 4
  %v3_1022c = call i32 @function_11b90(i32 %v2_10228, i32 ptrtoint (i32* @global_var_13ec6.207 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_10238, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_13ebd.209 to i32), i32* @r1, align 4
  %v3_10240 = call i32 @function_11b90(i32 %v2_10238, i32 ptrtoint (i32* @global_var_13ebd.209 to i32), i32 9)
  store i32 %v3_10240, i32* %r0.global-to-local, align 4
  %v0_10244 = load i32, i32* @r6, align 4
  %v1_10244 = add i32 %v0_10244, 24
  %v2_10244 = inttoptr i32 %v1_10244 to i32*
  %v3_10244 = load i32, i32* %v2_10244, align 4
  store i32 %v3_10244, i32* %ip.global-to-local, align 4
  %v0_10248 = load i32, i32* @r5, align 4
  %v1_10248 = add i32 %v0_10248, 2
  store i32 %v1_10248, i32* %r2.global-to-local, align 4
  %v0_1024c = load i32, i32* %r8.global-to-local, align 4
  %v2_1024c = add i32 %v0_1024c, %v3_10244
  store i32 %v2_1024c, i32* %r3.global-to-local, align 4
  %v3_10250 = icmp uge i32 %v2_1024c, %v1_10248
  store i1 %v3_10250, i1* %cpsr_c.global-to-local, align 1
  %v9_10250 = icmp eq i32 %v2_1024c, %v1_10248
  store i1 %v9_10250, i1* %cpsr_z.global-to-local, align 1
  %v2_10254 = xor i1 %v3_10250, true
  %v3_10254 = or i1 %v9_10250, %v2_10254
  br i1 %v3_10254, label %dec_label_pc_1021c.dec_label_pc_fc1c.loopexit_crit_edge, label %dec_label_pc_10258

dec_label_pc_1021c.dec_label_pc_fc1c.loopexit_crit_edge: ; preds = %dec_label_pc_1021c
  %v0_fc1c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_fc1c

dec_label_pc_10258:                               ; preds = %dec_label_pc_1021c
  %v0_10258 = load i32, i32* @r4, align 4
  %v1_10258 = add i32 %v0_10258, 1
  %v2_10258 = inttoptr i32 %v1_10258 to i8*
  %v3_10258 = load i8, i8* %v2_10258, align 1
  %v4_10258 = zext i8 %v3_10258 to i32
  store i32 %v4_10258, i32* %r3.global-to-local, align 4
  %v2_1025c = icmp ugt i8 %v3_10258, 30
  store i1 %v2_1025c, i1* %cpsr_c.global-to-local, align 1
  %v7_1025c = icmp eq i8 %v3_10258, 31
  store i1 %v7_1025c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1025c, label %dec_label_pc_103e8, label %dec_label_pc_10264

dec_label_pc_10264:                               ; preds = %dec_label_pc_10258
  %v1_10264 = add i32 %v0_10258, -1
  %v2_10264 = inttoptr i32 %v1_10264 to i8*
  %v3_10264 = load i8, i8* %v2_10264, align 1
  %v4_10264 = zext i8 %v3_10264 to i32
  store i32 %v4_10264, i32* %r3.global-to-local, align 4
  %v2_10268 = icmp ugt i8 %v3_10264, -4
  store i1 %v2_10268, i1* %cpsr_c.global-to-local, align 1
  %v7_10268 = icmp eq i8 %v3_10264, -3
  store i1 %v7_10268, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10268, label %bb360, label %dec_label_pc_10274

bb360:                                            ; preds = %dec_label_pc_10264
  %v1_1026c = load i32, i32* %sl.global-to-local, align 4
  %v2_1026c = trunc i32 %v1_1026c to i8
  store i8 %v2_1026c, i8* %v2_10264, align 1
  %v0_10270.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10270.pr, label %dec_label_pc_fbb8, label %.dec_label_pc_10274_crit_edge

.dec_label_pc_10274_crit_edge:                    ; preds = %bb360
  %v0_10274.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10274

dec_label_pc_10274:                               ; preds = %.dec_label_pc_10274_crit_edge, %dec_label_pc_10264
  %v0_10274 = phi i32 [ %v0_10274.pre, %.dec_label_pc_10274_crit_edge ], [ %v4_10264, %dec_label_pc_10264 ]
  %v2_10274 = icmp ugt i32 %v0_10274, 250
  store i1 %v2_10274, i1* %cpsr_c.global-to-local, align 1
  %v7_10274 = icmp eq i32 %v0_10274, 251
  store i1 %v7_10274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10274, label %bb361, label %dec_label_pc_fbb8

bb361:                                            ; preds = %dec_label_pc_10274
  store i32 -3, i32* %r2.global-to-local, align 4
  %v3_1027c = load i32, i32* @r4, align 4
  %v4_1027c = add i32 %v3_1027c, -1
  %v5_1027c = inttoptr i32 %v4_1027c to i8*
  store i8 -3, i8* %v5_1027c, align 1
  br label %dec_label_pc_fbb8

dec_label_pc_10284:                               ; preds = %dec_label_pc_fd08, %dec_label_pc_fce4, %dec_label_pc_fd24
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_10288 = call i32 @function_10628(i32 28)
  store i32 %v2_fa14, i32* %r1.global-to-local, align 4
  store i32 28, i32* %r0.global-to-local, align 4
  %v3_10298 = call i32 @function_10544(i32 28, i32* nonnull %stack_var_-56)
  %v3_1029c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10298, i32* %r2.global-to-local, align 4
  %v1_102a4 = add i32 %v3_1029c, -1
  store i32 %v1_102a4, i32* %r3.global-to-local, align 4
  %v0_102a8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_102a8, i32* %r0.global-to-local, align 4
  %v0_102ac = load i32, i32* @r6, align 4
  %v1_102ac = add i32 %v0_102ac, 24
  %v2_102ac = inttoptr i32 %v1_102ac to i32*
  %v3_102ac = load i32, i32* %v2_102ac, align 4
  store i32 %v3_102ac, i32* %r1.global-to-local, align 4
  %v4_102b0 = call i32 @function_10d34(i32 %v0_102a8, i32 %v3_102ac, i32 %v3_10298, i32 %v1_102a4)
  store i32 %v4_102b0, i32* %r0.global-to-local, align 4
  %v1_102b4 = add i32 %v4_102b0, 1
  store i32 %v1_102b4, i32* @r7, align 4
  %v2_102b4 = icmp eq i32 %v4_102b0, -1
  store i1 %v2_102b4, i1* %cpsr_c.global-to-local, align 1
  %v7_102b4 = icmp eq i32 %v1_102b4, 0
  store i1 %v7_102b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102b4, label %thread-pre-split98, label %bb362

bb362:                                            ; preds = %dec_label_pc_10284
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split98

thread-pre-split98:                               ; preds = %dec_label_pc_10284, %bb362
  %v0_102bc = phi i1 [ false, %bb362 ], [ true, %dec_label_pc_10284 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_102bc, i1* %cpsr_z.global-to-local, align 1
  store i32 28, i32* %r0.global-to-local, align 4
  %v1_10450 = call i32 @function_10570(i32 28)
  store i32 %v1_10450, i32* %r0.global-to-local, align 4
  br i1 %v0_102bc, label %dec_label_pc_1044c, label %dec_label_pc_102c4

dec_label_pc_102c4:                               ; preds = %thread-pre-split98
  %v0_102cc = load i32, i32* @r7, align 4
  %v3_102cc = icmp eq i32 %v0_102cc, -1
  store i1 %v3_102cc, i1* %cpsr_c.global-to-local, align 1
  %v8_102cc = icmp eq i32 %v0_102cc, -1
  store i1 %v8_102cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_102cc, label %dec_label_pc_faa0.loopexit, label %dec_label_pc_fd38

dec_label_pc_102d8:                               ; preds = %dec_label_pc_ff58
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_102e4 = call i32 @function_10628(i32 11)
  store i32 %v2_fa14, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v3_102f4 = call i32 @function_10544(i32 11, i32* nonnull %stack_var_-56)
  store i32 %v3_102f4, i32* %r0.global-to-local, align 4
  %v3_102f8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_102f4, i32* %r2.global-to-local, align 4
  %v1_10300 = add i32 %v3_102f8, -1
  store i32 %v1_10300, i32* %r3.global-to-local, align 4
  %v0_10304 = load i32, i32* @r6, align 4
  %v1_10304 = add i32 %v0_10304, 24
  %v2_10304 = inttoptr i32 %v1_10304 to i32*
  %v3_10304 = load i32, i32* %v2_10304, align 4
  store i32 %v3_10304, i32* %r1.global-to-local, align 4
  %v0_10308 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10308, i32* %r0.global-to-local, align 4
  %v4_1030c = call i32 @function_10d34(i32 %v0_10308, i32 %v3_10304, i32 %v3_102f4, i32 %v1_10300)
  store i32 %v4_1030c, i32* @r7, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_10318 = call i32 @function_10570(i32 11)
  store i32 %v1_10318, i32* %r0.global-to-local, align 4
  %v0_1031c = load i32, i32* @r7, align 4
  %v2_1031c = icmp eq i32 %v0_1031c, -1
  store i1 %v2_1031c, i1* %cpsr_c.global-to-local, align 1
  %v7_1031c = icmp eq i32 %v0_1031c, -1
  store i1 %v7_1031c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1031c, label %dec_label_pc_faa0.loopexit, label %dec_label_pc_10324

dec_label_pc_10324:                               ; preds = %dec_label_pc_102d8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10324 = icmp eq i32 %v0_1031c, 0
  store i1 %v2_10324, i1* %cpsr_z.global-to-local, align 1
  %tmp363 = icmp slt i32 %v0_1031c, 1
  br i1 %tmp363, label %dec_label_pc_fc2c, label %dec_label_pc_1032c

dec_label_pc_1032c:                               ; preds = %dec_label_pc_10324
  %v0_1032c = load i32, i32* @r6, align 4
  %v1_1032c = add i32 %v0_1032c, 21
  %v2_1032c = inttoptr i32 %v1_1032c to i8*
  %v3_1032c = load i8, i8* %v2_1032c, align 1
  %v4_1032c = zext i8 %v3_1032c to i32
  store i32 %v4_1032c, i32* %r3.global-to-local, align 4
  %v1_10330 = add i32 %v0_1032c, 20
  %v2_10330 = inttoptr i32 %v1_10330 to i8*
  %v3_10330 = load i8, i8* %v2_10330, align 1
  %v4_10330 = zext i8 %v3_10330 to i32
  store i32 %v4_10330, i32* %r2.global-to-local, align 4
  %v1_10334 = add i32 %v0_1032c, 16
  %v2_10334 = inttoptr i32 %v1_10334 to i32*
  %v3_10334 = load i32, i32* %v2_10334, align 4
  store i32 %v3_10334, i32* %r1.global-to-local, align 4
  %v4_10338 = mul nuw nsw i32 %v4_1032c, 256
  %v5_10338 = or i32 %v4_10330, %v4_10338
  store i32 %v5_10338, i32* %r2.global-to-local, align 4
  %v1_1033c = and i32 %v4_10330, 128
  %v2_1033c = icmp ne i32 %v1_1033c, 0
  store i1 %v2_1033c, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_1032c, i32* %r3.global-to-local, align 4
  store i32 %v3_10334, i32* %stack_var_-48, align 4
  store i32 %v5_10338, i32* %stack_var_-38, align 4
  %v1_1034c = inttoptr i32 %v0_1032c to i32*
  %v2_1034c = load i32, i32* %v1_1034c, align 4
  store i32 %v2_1034c, i32* @sl, align 4
  %v0_10350 = call i32 @function_115a0()
  store i32 %v0_10350, i32* %r0.global-to-local, align 4
  %v7_10354 = icmp eq i32 %v0_10350, -1
  %.375 = zext i1 %v7_10354 to i32
  store i32 %.375, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10360 = icmp eq i32 %v0_10350, 0
  store i1 %v2_10360, i1* %cpsr_z.global-to-local, align 1
  %tmp366 = icmp slt i32 %v0_10350, 1
  br i1 %tmp366, label %bb367, label %.thread101

.thread101:                                       ; preds = %dec_label_pc_1032c
  store i32 1, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10374

bb367:                                            ; preds = %dec_label_pc_1032c
  store i32 %.375, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1036c = icmp eq i1 %v7_10354, false
  store i1 %v2_1036c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1036c, label %dec_label_pc_104b4, label %dec_label_pc_10374

dec_label_pc_10374:                               ; preds = %.thread101, %bb367
  %v0_10374 = load i32, i32* @r6, align 4
  %v1_10374 = add i32 %v0_10374, 4
  %v2_10374 = inttoptr i32 %v1_10374 to i32*
  %v3_10374 = load i32, i32* %v2_10374, align 4
  store i32 %v3_10374, i32* %r0.global-to-local, align 4
  %v1_10378 = call i32 @function_11574(i32 %v3_10374)
  store i32 %v1_10378, i32* %r0.global-to-local, align 4
  %v0_1037c = load i32, i32* @r6, align 4
  %v1_1037c = add i32 %v0_1037c, 24
  %v2_1037c = inttoptr i32 %v1_1037c to i32*
  %v3_1037c = load i32, i32* %v2_1037c, align 4
  store i32 %v3_1037c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_10384 = load i32, i32* @r4, align 4
  %v2_10384 = add i32 %v0_1037c, 4
  %v3_10384 = inttoptr i32 %v2_10384 to i32*
  store i32 %v0_10384, i32* %v3_10384, align 4
  %v0_10388 = load i32, i32* %r2.global-to-local, align 4
  %v1_10388 = load i32, i32* @r6, align 4
  %v2_10388 = add i32 %v1_10388, 12
  %v3_10388 = inttoptr i32 %v2_10388 to i32*
  store i32 %v0_10388, i32* %v3_10388, align 4
  br label %dec_label_pc_ffdc

dec_label_pc_10390:                               ; preds = %dec_label_pc_fabc
  br i1 %v2_fae0, label %dec_label_pc_1045c, label %dec_label_pc_10394

dec_label_pc_10394:                               ; preds = %dec_label_pc_10390
  %v3_10394 = icmp eq i32 %v5_fadc, -1
  store i1 %v3_10394, i1* %cpsr_c.global-to-local, align 1
  %v8_10394 = icmp eq i32 %v5_fadc, -1
  store i1 %v8_10394, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10394, label %dec_label_pc_1039c, label %dec_label_pc_fb08

dec_label_pc_1039c:                               ; preds = %dec_label_pc_10394
  %v0_1039c = load i32, i32* @sb, align 4
  %v1_1039c = inttoptr i32 %v0_1039c to i32*
  %v2_1039c = load i32, i32* %v1_1039c, align 4
  store i32 %v2_1039c, i32* %r3.global-to-local, align 4
  %v2_103a0 = icmp ugt i32 %v2_1039c, 10
  store i1 %v2_103a0, i1* %cpsr_c.global-to-local, align 1
  %v7_103a0 = icmp eq i32 %v2_1039c, 11
  store i1 %v7_103a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103a0, label %dec_label_pc_f8d8, label %dec_label_pc_103a8

dec_label_pc_103a8:                               ; preds = %dec_label_pc_1039c, %dec_label_pc_1045c
  %v0_103a8 = load i32, i32* @r6, align 4
  %v1_103a8 = add i32 %v0_103a8, 4
  %v2_103a8 = inttoptr i32 %v1_103a8 to i32*
  %v3_103a8 = load i32, i32* %v2_103a8, align 4
  store i32 %v3_103a8, i32* %r0.global-to-local, align 4
  %v1_103ac = call i32 @function_11574(i32 %v3_103a8)
  store i32 %v1_103ac, i32* %r0.global-to-local, align 4
  %v0_103b0 = load i32, i32* @r6, align 4
  %v1_103b0 = add i32 %v0_103b0, 284
  %v2_103b0 = inttoptr i32 %v1_103b0 to i8*
  %v3_103b0 = load i8, i8* %v2_103b0, align 1
  %v4_103b0 = zext i8 %v3_103b0 to i32
  %v1_103b4 = add nuw nsw i32 %v4_103b0, 1
  %v1_103b8 = urem i32 %v1_103b4, 256
  store i32 %v1_103b8, i32* %r3.global-to-local, align 4
  %v2_103bc = icmp ugt i32 %v1_103b8, 8
  store i1 %v2_103bc, i1* %cpsr_c.global-to-local, align 1
  %v7_103bc = icmp eq i32 %v1_103b8, 9
  store i1 %v7_103bc, i1* %cpsr_z.global-to-local, align 1
  %v2_103c0 = xor i1 %v7_103bc, true
  %v3_103c0 = and i1 %v2_103bc, %v2_103c0
  br i1 %v3_103c0, label %bb368, label %bb369

bb368:                                            ; preds = %dec_label_pc_103a8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb369

bb369:                                            ; preds = %dec_label_pc_103a8, %bb368
  store i32 -1, i32* @r4, align 4
  %v1_103c8 = trunc i32 %v1_103b4 to i8
  store i8 %v1_103c8, i8* %v2_103b0, align 1
  %v0_103cc = load i32, i32* @r4, align 4
  %v1_103cc = load i32, i32* @r6, align 4
  %v2_103cc = add i32 %v1_103cc, 4
  %v3_103cc = inttoptr i32 %v2_103cc to i32*
  store i32 %v0_103cc, i32* %v3_103cc, align 4
  %v0_103d0 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_103d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_103d0 = xor i1 %v1_103d0, true
  %v3_103d0 = and i1 %v0_103d0, %v2_103d0
  br i1 %v3_103d0, label %bb370, label %.thread240

bb370:                                            ; preds = %bb369
  %v4_103d0 = load i32, i32* %r0.global-to-local, align 4
  %v5_103d0 = load i32, i32* @r6, align 4
  %v6_103d0 = add i32 %v5_103d0, 12
  %v7_103d0 = inttoptr i32 %v6_103d0 to i32*
  store i32 %v4_103d0, i32* %v7_103d0, align 4
  %v4_103d4 = load i32, i32* %r0.global-to-local, align 4
  %v5_103d4 = trunc i32 %v4_103d4 to i8
  %v6_103d4 = load i32, i32* @r6, align 4
  %v7_103d4 = add i32 %v6_103d4, 284
  %v8_103d4 = inttoptr i32 %v7_103d4 to i8*
  store i8 %v5_103d4, i8* %v8_103d4, align 1
  %v0_103d8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_103d8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread240

.thread240:                                       ; preds = %bb369, %bb370
  %v1_103d8 = phi i1 [ %v1_103d8.pre, %bb370 ], [ %v1_103d0, %bb369 ]
  %v0_103d8 = phi i1 [ %v0_103d8.pre, %bb370 ], [ %v0_103d0, %bb369 ]
  %v2_103d8 = xor i1 %v1_103d8, true
  %v3_103d8 = and i1 %v0_103d8, %v2_103d8
  br i1 %v3_103d8, label %dec_label_pc_f8d8, label %dec_label_pc_103dc

dec_label_pc_103dc:                               ; preds = %.thread240
  %v0_103dc = load i32, i32* @r6, align 4
  store i32 %v0_103dc, i32* @r0, align 4
  %v0_103e0 = call i32 @function_ebbc()
  store i32 %v0_103e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f8d8

dec_label_pc_103e8:                               ; preds = %dec_label_pc_10258
  store i32 %v2_10228, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_103f8 = add i32 %v0_10244, 4
  %v2_103f8 = inttoptr i32 %v1_103f8 to i32*
  %v3_103f8 = load i32, i32* %v2_103f8, align 4
  store i32 %v3_103f8, i32* %r0.global-to-local, align 4
  %v5_103fc = call i32 @function_11dfc(i32 %v3_103f8, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_103fc, i32* %r0.global-to-local, align 4
  store i32 %v2_f86c, i32* %r1.global-to-local, align 4
  %v0_10404 = load i32, i32* @r6, align 4
  %v1_10404 = add i32 %v0_10404, 4
  %v2_10404 = inttoptr i32 %v1_10404 to i32*
  %v3_10404 = load i32, i32* %v2_10404, align 4
  store i32 %v3_10404, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fbfc

dec_label_pc_10414:                               ; preds = %dec_label_pc_faac
  store i32 %.pre, i32* @r0, align 4
  %v1_1041c = add i32 %v0_10414, 92
  store i32 %v1_1041c, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_10424 = call i32 @function_11ba0(i32 %.pre, i32 %v1_1041c, i32 192)
  store i32 %v3_10424, i32* %r0.global-to-local, align 4
  %v0_10428 = load i32, i32* @r6, align 4
  %v1_10428 = add i32 %v0_10428, 24
  %v2_10428 = inttoptr i32 %v1_10428 to i32*
  %v3_10428 = load i32, i32* %v2_10428, align 4
  store i32 %v3_10428, i32* %r3.global-to-local, align 4
  %v1_1042c = add i32 %v3_10428, -64
  store i32 %v1_1042c, i32* %ip.global-to-local, align 4
  store i32 %v1_1042c, i32* %v2_10428, align 4
  br label %dec_label_pc_fabc

dec_label_pc_10438:                               ; preds = %dec_label_pc_ff94
  %v0_10438 = load i32, i32* @r6, align 4
  store i32 %v0_10438, i32* @r0, align 4
  %v0_1043c = call i32 @function_ebbc()
  store i32 %v0_1043c, i32* %r0.global-to-local, align 4
  %v0_10440 = load i32, i32* @r6, align 4
  %v1_10440 = add i32 %v0_10440, 24
  %v2_10440 = inttoptr i32 %v1_10440 to i32*
  %v3_10440 = load i32, i32* %v2_10440, align 4
  store i32 %v3_10440, i32* %ip.global-to-local, align 4
  %v0_10444 = load i32, i32* @r4, align 4
  store i32 %v0_10444, i32* @r7, align 4
  br label %dec_label_pc_ffdc

dec_label_pc_1044c:                               ; preds = %thread-pre-split98
  %v0_10454 = load i32, i32* @r6, align 4
  %v1_10454 = add i32 %v0_10454, 12
  %v2_10454 = inttoptr i32 %v1_10454 to i32*
  %v3_10454 = load i32, i32* %v2_10454, align 4
  br label %dec_label_pc_faa4.backedge

dec_label_pc_1045c:                               ; preds = %dec_label_pc_10390
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_10460 = load i32, i32* @sb, align 4
  %v2_10460 = inttoptr i32 %v1_10460 to i32*
  store i32 104, i32* %v2_10460, align 4
  br label %dec_label_pc_103a8

dec_label_pc_10468:                               ; preds = %dec_label_pc_f9c0, %dec_label_pc_f978
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1046c

dec_label_pc_1046c:                               ; preds = %dec_label_pc_f9e8, %dec_label_pc_10468
  %v0_10474 = phi i32 [ 0, %dec_label_pc_10468 ], [ %v0_f9c8, %dec_label_pc_f9e8 ]
  %v0_1046c = load i32, i32* @r6, align 4
  %v1_1046c = add i32 %v0_1046c, 4
  %v2_1046c = inttoptr i32 %v1_1046c to i32*
  %v3_1046c = load i32, i32* %v2_1046c, align 4
  store i32 %v3_1046c, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_10474 = inttoptr i32 %v0_1046c to i32*
  store i32 %v0_10474, i32* %v2_10474, align 4
  %v0_10478 = load i32, i32* %ip.global-to-local, align 4
  %v1_10478 = load i32, i32* @r6, align 4
  %v2_10478 = add i32 %v1_10478, 24
  %v3_10478 = inttoptr i32 %v2_10478 to i32*
  store i32 %v0_10478, i32* %v3_10478, align 4
  %v0_f8b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_f8b0

dec_label_pc_10480:                               ; preds = %dec_label_pc_f938
  %v0_10480 = load i32, i32* @r6, align 4
  %v1_10480 = add i32 %v0_10480, 4
  %v2_10480 = inttoptr i32 %v1_10480 to i32*
  %v3_10480 = load i32, i32* %v2_10480, align 4
  store i32 %v3_10480, i32* %r0.global-to-local, align 4
  %v1_10484 = call i32 @function_11574(i32 %v3_10480)
  store i32 %v1_10484, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_1048c = load i32, i32* @r5, align 4
  %v1_1048c = load i32, i32* @r6, align 4
  %v2_1048c = add i32 %v1_1048c, 12
  %v3_1048c = inttoptr i32 %v2_1048c to i32*
  store i32 %v0_1048c, i32* %v3_1048c, align 4
  %v0_10490 = load i32, i32* %r4.global-to-local, align 4
  %v1_10490 = load i32, i32* @r6, align 4
  %v2_10490 = add i32 %v1_10490, 4
  %v3_10490 = inttoptr i32 %v2_10490 to i32*
  store i32 %v0_10490, i32* %v3_10490, align 4
  %v0_10494 = load i32, i32* @r5, align 4
  %v1_10494 = trunc i32 %v0_10494 to i8
  %v2_10494 = load i32, i32* @r6, align 4
  %v3_10494 = add i32 %v2_10494, 284
  %v4_10494 = inttoptr i32 %v3_10494 to i8*
  store i8 %v1_10494, i8* %v4_10494, align 1
  br label %dec_label_pc_f8d8

dec_label_pc_1049c:                               ; preds = %dec_label_pc_fa60
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 29, i32* %r0.global-to-local, align 4
  %v1_104a0 = call i32 @function_10570(i32 29)
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_104a8 = call i32 @function_10570(i32 30)
  store i32 %v1_104a8, i32* %r0.global-to-local, align 4
  %v0_104ac = load i32, i32* @r6, align 4
  %v1_104ac = add i32 %v0_104ac, 12
  %v2_104ac = inttoptr i32 %v1_104ac to i32*
  %v3_104ac = load i32, i32* %v2_104ac, align 4
  br label %dec_label_pc_faa4.backedge

dec_label_pc_faa4.backedge.thread:                ; preds = %dec_label_pc_fd7c, %dec_label_pc_fea4, %dec_label_pc_10000, %dec_label_pc_100b4, %dec_label_pc_10168
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_faac

dec_label_pc_faa4.backedge.thread473:             ; preds = %dec_label_pc_fda8, %dec_label_pc_fed0, %dec_label_pc_10194, %dec_label_pc_1002c, %dec_label_pc_100e0, %dec_label_pc_fdc4, %dec_label_pc_feec, %dec_label_pc_10048, %dec_label_pc_100fc, %dec_label_pc_101b0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_faac

dec_label_pc_faa4.backedge:                       ; preds = %dec_label_pc_1049c, %dec_label_pc_1044c
  %storemerge476 = phi i32 [ %v3_10454, %dec_label_pc_1044c ], [ %v3_104ac, %dec_label_pc_1049c ]
  %v0_faa4.be = phi i32 [ %v3_10454, %dec_label_pc_1044c ], [ %v3_104ac, %dec_label_pc_1049c ]
  %v0_faac156 = phi i32 [ %v0_10454, %dec_label_pc_1044c ], [ %v0_104ac, %dec_label_pc_1049c ]
  store i32 %storemerge476, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_faa4 = icmp eq i32 %v0_faa4.be, 0
  store i1 %v2_faa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_faa4, label %dec_label_pc_f8d8, label %dec_label_pc_faac

dec_label_pc_104b4:                               ; preds = %bb367
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_104c0 = call i32 @function_11e8c(i32 2, i32 1, i32 0)
  store i32 %v3_104c0, i32* %r0.global-to-local, align 4
  %v2_104c4 = icmp eq i32 %v3_104c0, -1
  store i1 %v2_104c4, i1* %cpsr_c.global-to-local, align 1
  %v7_104c4 = icmp eq i32 %v3_104c0, -1
  store i1 %v7_104c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_104c0, i32* @r4, align 4
  br i1 %v7_104c4, label %dec_label_pc_f6d8, label %dec_label_pc_104d0

dec_label_pc_104d0:                               ; preds = %dec_label_pc_104b4
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_104d4 = call i32 @function_10628(i32 4)
  store i32 2, i32* @r6, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_13e18.81 to i32), i32* @r0, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v2_104e8 = call i32 @function_11c6c(i32 ptrtoint ([15 x i8]* @global_var_13e18.81 to i32))
  %v0_104ec = load i32, i32* @r5, align 4
  store i32 %v0_104ec, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_104f8 = inttoptr i32 %v0_104ec to i32*
  %v3_104f8 = call i32 @function_10544(i32 4, i32* %v2_104f8)
  %v4_104f8 = inttoptr i32 %v3_104f8 to i8*
  store i32 %v3_104f8, i32* %r0.global-to-local, align 4
  %v2_104fc = add i32 %v3_104f8, 1
  %v3_104fc = inttoptr i32 %v2_104fc to i8*
  %v4_104fc = load i8, i8* %v3_104fc, align 1
  %v5_104fc = zext i8 %v4_104fc to i32
  store i32 %v5_104fc, i32* %r2.global-to-local, align 4
  %v3_10500 = load i8, i8* %v4_104f8, align 1
  %v4_10500 = zext i8 %v3_10500 to i32
  %v4_10504 = mul nuw nsw i32 %v5_104fc, 256
  %v5_10504 = or i32 %v4_10500, %v4_10504
  store i32 %v5_10504, i32* %r3.global-to-local, align 4
  %v1_10508 = and i32 %v4_10500, 128
  %v2_10508 = icmp ne i32 %v1_10508, 0
  store i1 %v2_10508, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_104fc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10518 = call i32 @function_10570(i32 4)
  %v0_1051c = load i32, i32* @r4, align 4
  store i32 %v0_1051c, i32* %r0.global-to-local, align 4
  %v2_10520 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_10520, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_10528 = bitcast i32* %stack_var_-92 to %sockaddr*
  %v4_10528 = call i32 @function_11ce8(i32 %v0_1051c, %sockaddr* %v3_10528, i32 16)
  store i32 %v4_10528, i32* %r0.global-to-local, align 4
  %v3_1052c = icmp eq i32 %v4_10528, -1
  store i1 %v3_1052c, i1* %cpsr_c.global-to-local, align 1
  %v8_1052c = icmp eq i32 %v4_10528, -1
  store i1 %v8_1052c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1052c, label %dec_label_pc_10534, label %dec_label_pc_f634

dec_label_pc_10534:                               ; preds = %dec_label_pc_104d0
  %v0_10534 = load i32, i32* @r4, align 4
  store i32 %v0_10534, i32* %r0.global-to-local, align 4
  %v1_10538 = call i32 @function_11574(i32 %v0_10534)
  %v0_1053c = load i32, i32* @r5, align 4
  store i32 %v0_1053c, i32* %r0.global-to-local, align 4
  %v1_10540 = call i32 @function_12914(i32 %v0_1053c)
  store i32 %v1_10540, i32* %r0.global-to-local, align 4
  ret i32 %v1_10540

; uselistorder directives
  uselistorder i32 %v4_10500, { 1, 0 }
  uselistorder i32 %v5_104fc, { 1, 0, 2 }
  uselistorder i1 %v7_104c4, { 1, 0 }
  uselistorder i32 %v3_104c0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_104ac, { 1, 0 }
  uselistorder i32 %v3_10454, { 1, 0 }
  uselistorder i32 %v3_10404, { 1, 0 }
  uselistorder i1 %v1_103d0, { 1, 0 }
  uselistorder i32 %v1_103b8, { 2, 1, 0 }
  uselistorder i32 %v1_103b4, { 1, 0 }
  uselistorder i1 %v2_1036c, { 1, 0 }
  uselistorder i32 %.375, { 1, 0 }
  uselistorder i1 %v7_10354, { 1, 0 }
  uselistorder i32 %v0_10350, { 2, 1, 0, 3 }
  uselistorder i32 %v4_10330, { 1, 0, 2 }
  uselistorder i32 %v4_1032c, { 1, 0, 2 }
  uselistorder i1 %v7_1031c, { 1, 0 }
  uselistorder i32 %v0_1031c, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v0_102cc, { 0, 2, 1 }
  uselistorder i1 %v0_102bc, { 1, 0 }
  uselistorder i32 %v4_102b0, { 1, 0, 2 }
  uselistorder i32 %v0_10244, { 1, 2, 0 }
  uselistorder i1 %v7_101b4, { 1, 0 }
  uselistorder i32 %v1_101b0, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_101a8, { 1, 0 }
  uselistorder i8 %v3_101a0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_101b0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_1018c, { 1, 0 }
  uselistorder i1 %v7_10184, { 1, 0 }
  uselistorder i1 %v7_1017c, { 1, 0 }
  uselistorder i1 %v7_10100, { 1, 0 }
  uselistorder i32 %v1_100fc, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_100f4, { 1, 0 }
  uselistorder i8 %v3_100ec, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_100fc, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_100d8, { 1, 0 }
  uselistorder i1 %v7_100d0, { 1, 0 }
  uselistorder i1 %v7_100c8, { 1, 0 }
  uselistorder i1 %v7_1004c, { 1, 0 }
  uselistorder i32 %v1_10048, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10040, { 1, 0 }
  uselistorder i8 %v3_10038, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10048, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10024, { 1, 0 }
  uselistorder i1 %v7_1001c, { 1, 0 }
  uselistorder i1 %v7_10014, { 1, 0 }
  uselistorder i32 %v0_fff0, { 1, 2, 0 }
  uselistorder i32 %v2_ffdc, { 1, 0 }
  uselistorder i32 %v1_ffdc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_ffdc, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i32 %v1_ffac, { 2, 1, 0 }
  uselistorder i1 %v7_ff88, { 1, 0 }
  uselistorder i32 %v4_ff84, { 1, 0, 2 }
  uselistorder i1 %v7_fef0, { 1, 0 }
  uselistorder i32 %v1_feec, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_fee4, { 1, 0 }
  uselistorder i8 %v3_fedc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_feec, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_fec8, { 1, 0 }
  uselistorder i1 %v7_fec0, { 1, 0 }
  uselistorder i1 %v7_feb8, { 1, 0 }
  uselistorder i1 %v7_fdc8, { 1, 0 }
  uselistorder i32 %v1_fdc4, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_fdbc, { 1, 0 }
  uselistorder i8 %v3_fdb4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fdc4, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_fda0, { 1, 0 }
  uselistorder i1 %v7_fd98, { 1, 0 }
  uselistorder i1 %v7_fd90, { 1, 0 }
  uselistorder i32 %v0_fd38, { 2, 1, 0 }
  uselistorder i1 %v7_fd28, { 1, 0 }
  uselistorder i1 %v8_fd1c, { 1, 0 }
  uselistorder i8 %v3_fd14, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_fd24, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_fd00, { 1, 0 }
  uselistorder i1 %v7_fcf8, { 1, 0 }
  uselistorder i32 %v0_fca0, { 2, 1, 0 }
  uselistorder i1 %v7_fc88, { 1, 0 }
  uselistorder i1 %v8_fc7c, { 1, 0 }
  uselistorder i8 %v3_fc74, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fc84, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_fc60, { 1, 0 }
  uselistorder i1 %v7_fc58, { 1, 0 }
  uselistorder i1 %v7_fc50, { 1, 0 }
  uselistorder i32 %v0_fc2c.pre, { 0, 2, 1 }
  uselistorder i32 %v1_fc14, { 1, 0 }
  uselistorder i32 %v1_fc10, { 1, 0 }
  uselistorder i32 %v1_fc08, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_fc04, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_fc04, { 0, 2, 1 }
  uselistorder i1 %v7_fba4, { 1, 0 }
  uselistorder i1 %v2_fb90, { 1, 0, 2 }
  uselistorder i1 %v2_fb78, { 1, 0, 2 }
  uselistorder i32 %v1_fb98, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_fb6c, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_fb94, { 1, 0 }
  uselistorder i32 %v2_fb9c, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v3_fb58, { 0, 2, 1, 3 }
  uselistorder i32 %v0_fb20, { 4, 17, 5, 19, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_fafc, { 1, 2, 3, 0 }
  uselistorder i32 %v3_faf8, { 1, 0 }
  uselistorder i32 %v5_fadc, { 0, 4, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v2_fac8, { 1, 0, 2 }
  uselistorder i32 %v3_fac4, { 1, 0, 2 }
  uselistorder i32 %v0_10414, { 1, 0, 2 }
  uselistorder i32 %v0_fa98, { 1, 0, 2 }
  uselistorder i1 %v7_fa78, { 1, 0 }
  uselistorder i1 %v7_fa50, { 1, 0 }
  uselistorder i32 %v0_f9c8, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_f9a8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_f99c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_f928, { 2, 1, 0 }
  uselistorder i32 %v3_f924, { 1, 0 }
  uselistorder i1 %v7_f908, { 1, 0 }
  uselistorder i32 %v3_f904, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_f8f8, { 1, 0 }
  uselistorder i32 %v1_f8dc, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_f8c8, { 2, 1, 0 }
  uselistorder i32 %v3_f8c4, { 1, 0 }
  uselistorder i32 %v0_f8c8, { 1, 0 }
  uselistorder i32 %v2_ff0c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_fa14, { 3, 8, 5, 6, 2, 7, 9, 10, 1, 0, 4 }
  uselistorder i32 %v2_10238, { 1, 2, 0 }
  uselistorder i32 %v1_f860, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f860, { 0, 1, 3, 2 }
  uselistorder i32 %v1_f830, { 2, 1, 0 }
  uselistorder i32 %v1_f82c, { 1, 0 }
  uselistorder i32 %v0_f7fc, { 0, 2, 1 }
  uselistorder i32 %v1_f7f4, { 1, 0 }
  uselistorder i1 %v7_f7ac, { 0, 3, 1, 2 }
  uselistorder i1 %v2_f7ac, { 1, 2, 0 }
  uselistorder i32 %v2_f7a4, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_f79c, { 1, 0 }
  uselistorder i32 %v1_f780, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_f774, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f774, { 0, 2, 1 }
  uselistorder i32 %v1_f764, { 1, 0 }
  uselistorder i32 %v3_f7d8, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge244, { 1, 0, 2 }
  uselistorder i32 %v2_f7e8, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i8* %stack_var_-1876.2, { 0, 2, 1 }
  uselistorder i8 %stack_var_-1868.2, { 0, 2, 1 }
  uselistorder i32 %stack_var_-1872.2, { 0, 2, 1 }
  uselistorder i32 %v3_f620, { 1, 0 }
  uselistorder i32 %v1_f60c, { 1, 0 }
  uselistorder i32 %v1_f5f4, { 1, 2, 0 }
  uselistorder i32 %v0_f600, { 0, 3, 2, 1 }
  uselistorder i32 %v0_f5c4, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_f5b8, { 2, 1, 0 }
  uselistorder i32 %v1_f594, { 3, 1, 0, 4, 2 }
  uselistorder i32 %v3_f574, { 1, 2, 0, 3 }
  uselistorder i1 %v2_f56c, { 1, 0 }
  uselistorder i32 %v0_f4d0, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_f508, { 1, 2, 4, 8, 0, 3, 6, 5, 7 }
  uselistorder i32 %v1_f478, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_f39c, { 1, 0 }
  uselistorder i32 %v1_f398, { 2, 0, 1 }
  uselistorder i32 %v4_f374, { 1, 0 }
  uselistorder i32 %v5_f35c, { 0, 2, 1 }
  uselistorder i1 %v2_f2c4, { 1, 0 }
  uselistorder i1 %v2_f2b0, { 1, 0 }
  uselistorder i1 %v2_f29c, { 1, 0 }
  uselistorder i32 %.374, { 3, 2, 1, 0 }
  uselistorder i1 %v7_f278, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_f260, { 1, 0 }
  uselistorder i1 %v3_f244, { 1, 0, 2 }
  uselistorder i1 %v2_f230, { 1, 0 }
  uselistorder i1 %v2_f20c, { 1, 0 }
  uselistorder i32 %v1_f1bc, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f1a8, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f1a4, { 4, 5, 6, 0, 7, 1, 2, 3, 8 }
  uselistorder i32 %v4_f194, { 1, 0 }
  uselistorder i32 %v0_f184, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f160, { 1, 0 }
  uselistorder i8* %stack_var_-1876.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %v0_f4fc, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i32 %v4_f02c, { 1, 0 }
  uselistorder i32 %v0_f01c, { 2, 0, 1, 3 }
  uselistorder i32 %v3_efec, { 1, 0 }
  uselistorder i32 %v4_efd8, { 2, 0, 1 }
  uselistorder i32 %v0_efc0, { 0, 2, 1 }
  uselistorder i32 %v0_ef68, { 3, 2, 0, 1 }
  uselistorder i1 %v7_ef08, { 1, 0 }
  uselistorder i32 %v3_ef00, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_eee8, { 0, 2, 1 }
  uselistorder i32 %v0_eed0, { 2, 1, 0 }
  uselistorder i32 %v0_eeac, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge251, { 1, 0 }
  uselistorder i32 %v0_ee40, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %stack_var_-56, { 9, 7, 10, 3, 11, 6, 12, 5, 13, 8, 14, 4, 15, 16, 1, 2, 17, 19, 0, 18 }
  uselistorder i32* %stack_var_-48, { 4, 5, 3, 6, 2, 7, 0, 8, 9, 1 }
  uselistorder i32* %stack_var_-38, { 1, 0, 2 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 6, 1, 5, 4, 9, 10, 7, 8, 11, 12, 13 }
  uselistorder i32* %r3.global-to-local, { 12, 64, 63, 37, 65, 66, 136, 13, 14, 15, 27, 38, 39, 40, 41, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 51, 52, 53, 34, 35, 36, 42, 43, 44, 45, 46, 47, 48, 49, 50, 67, 68, 69, 70, 71, 72, 54, 55, 73, 74, 76, 75, 77, 78, 79, 80, 81, 83, 85, 84, 82, 86, 87, 88, 89, 95, 90, 91, 92, 93, 96, 145, 146, 97, 147, 148, 56, 57, 58, 59, 60, 61, 62, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 135, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 127, 130, 129, 94, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144 }
  uselistorder i32* %r2.global-to-local, { 9, 10, 11, 14, 29, 12, 13, 15, 16, 17, 25, 30, 31, 0, 1, 2, 3, 5, 4, 6, 8, 7, 18, 19, 21, 20, 22, 23, 24, 26, 28, 27, 35, 37, 36, 32, 33, 34, 46, 47, 48, 49, 50, 51, 52, 38, 39, 53, 54, 55, 56, 57, 59, 61, 60, 121, 58, 62, 63, 64, 65, 66, 70, 67, 68, 69, 71, 74, 73, 75, 72, 76, 40, 41, 42, 43, 44, 45, 122, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 83, 84, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120 }
  uselistorder i32* %r1.global-to-local, { 10, 11, 12, 13, 43, 29, 30, 14, 15, 16, 25, 26, 1, 2, 3, 4, 5, 6, 7, 8, 9, 57, 58, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 31, 32, 0, 44, 45, 46, 47, 33, 34, 35, 36, 48, 49, 50, 52, 53, 51, 54, 55, 59, 56, 97, 37, 38, 39, 40, 41, 42, 98, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96 }
  uselistorder i32* %r0.global-to-local, { 31, 30, 32, 34, 33, 35, 37, 36, 38, 40, 39, 105, 106, 107, 134, 133, 41, 135, 99, 101, 100, 137, 139, 140, 136, 141, 138, 43, 42, 44, 46, 45, 47, 49, 48, 50, 81, 80, 83, 82, 84, 85, 102, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 10, 12, 11, 14, 13, 16, 15, 17, 18, 19, 20, 22, 21, 24, 23, 26, 25, 27, 28, 29, 108, 52, 53, 55, 54, 56, 51, 57, 58, 59, 60, 62, 61, 64, 63, 66, 65, 67, 68, 69, 71, 70, 72, 74, 73, 76, 75, 77, 78, 79, 87, 86, 89, 88, 93, 90, 91, 92, 110, 109, 112, 111, 95, 94, 96, 97, 98, 104, 103, 144, 142, 114, 113, 115, 117, 116, 119, 118, 120, 121, 122, 151, 143, 146, 145, 147, 148, 150, 149, 152, 155, 153, 154, 160, 156, 159, 157, 158, 162, 161, 124, 123, 125, 126, 127, 129, 128, 130, 131, 132, 165, 163, 164, 167, 166, 168, 170, 169, 195, 171, 172, 173, 175, 174, 176, 177, 179, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 197, 200, 199, 201, 205, 204, 202, 203, 206, 207, 208, 209 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 14, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 21, 22, 6, 23, 7, 14, 0, 2, 1, 4, 3, 5, 19, 8, 9, 10, 11, 12, 13, 18, 20, 15, 16, 17, 24, 25, 26, 27, 28, 29, 32, 30, 31, 33, 49, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i1* %cpsr_z.global-to-local, { 27, 28, 111, 221, 220, 97, 102, 101, 103, 104, 105, 29, 207, 31, 32, 33, 55, 56, 57, 74, 75, 76, 77, 78, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 93, 34, 35, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 95, 66, 71, 72, 67, 68, 69, 70, 73, 94, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 212, 106, 107, 108, 109, 110, 213, 96, 30, 98, 99, 100, 112, 114, 113, 115, 116, 118, 120, 119, 214, 117, 121, 122, 123, 124, 125, 126, 131, 127, 128, 129, 130, 217, 218, 215, 216, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 149, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 206, 173, 174, 205, 175, 176, 204, 177, 178, 179, 180, 181, 182, 203, 183, 184, 185, 186, 187, 202, 188, 189, 190, 201, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 208, 209, 210, 219, 211 }
  uselistorder i1* %cpsr_c.global-to-local, { 27, 28, 29, 108, 219, 218, 94, 99, 98, 100, 101, 102, 30, 203, 31, 32, 33, 34, 55, 56, 57, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 90, 35, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 58, 59, 63, 64, 60, 61, 62, 65, 92, 66, 71, 72, 67, 68, 69, 70, 73, 91, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 210, 103, 104, 105, 106, 107, 211, 93, 202, 95, 96, 97, 109, 111, 110, 112, 113, 115, 117, 116, 212, 114, 118, 119, 120, 121, 122, 127, 123, 124, 125, 126, 215, 216, 213, 128, 214, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 201, 166, 167, 200, 168, 169, 199, 170, 171, 172, 173, 174, 175, 198, 176, 177, 178, 179, 180, 197, 181, 182, 183, 196, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 204, 205, 206, 207, 208, 217, 209 }
  uselistorder i32 (i32)* @function_11c6c, { 2, 1, 0, 3 }
  uselistorder i32 ptrtoint ([15 x i8]* @global_var_13e18.81 to i32), { 0, 2, 1, 3 }
  uselistorder i8 31, { 8, 2, 3, 0, 4, 5, 9, 10, 1, 6, 7 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_13eb4.205 to i32*), { 2, 4, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_13eb4.205, { 1, 0 }
  uselistorder i8 58, { 4, 6, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8 34, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 36, { 7, 8, 11, 12, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 8, 9, 12, 13, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 (i32)* @function_10570, { 37, 28, 27, 36, 32, 40, 39, 38, 35, 34, 33, 31, 30, 29, 26, 25, 5, 24, 23, 22, 41, 2, 1, 0, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 4, 3 }
  uselistorder i32 (i32, i32, i32, i32)* @function_10d34, { 4, 2, 3, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_10544, { 3, 4, 8, 0, 1, 2, 5, 6, 7, 9, 10, 34, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 35 }
  uselistorder i32 (i32)* @function_10628, { 28, 27, 23, 31, 30, 29, 26, 25, 24, 22, 21, 3, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 1, 0, 2 }
  uselistorder i8* bitcast (i8** @global_var_1c590.136 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1c591.137, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1c590.136 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11794, { 1, 0 }
  uselistorder i32 284, { 3, 4, 5, 0, 1, 2, 6, 7 }
  uselistorder i32 1536, { 1, 0 }
  uselistorder i32 1664, { 2, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_11dfc, { 12, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29 }
  uselistorder i32 ()* @function_ebbc, { 3, 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i32 5888, { 1, 0 }
  uselistorder i32 16384, { 13, 60, 12, 48, 0, 49, 1, 50, 2, 51, 3, 52, 4, 53, 5, 54, 6, 55, 7, 56, 8, 57, 30, 58, 31, 59, 28, 62, 29, 63, 27, 61, 38, 71, 32, 64, 33, 65, 34, 66, 35, 67, 36, 68, 37, 69, 9, 70, 10, 72, 11, 73, 40, 74, 15, 75, 41, 76, 42, 77, 43, 78, 14, 79, 39, 80, 16, 81, 17, 82, 18, 83, 44, 45, 19, 84, 20, 85, 22, 86, 21, 87, 24, 88, 23, 89, 46, 47, 25, 90, 26, 91 }
  uselistorder i32 (i32, i32, i32, i32)* @function_d114, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_113c8, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_d0b8, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* @global_var_1c574.194, { 2, 1, 0 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32* @fp, { 2, 3, 48, 49, 50, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0, 45, 46, 47, 51, 1, 52, 53, 54 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_13e94.188 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_13e8c.186 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_13e50.174 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @function_ec90, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_13ebc.166 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_13eb8.164 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8* @global_var_1c585.160, { 1, 0 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_1c578.151 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8* @global_var_1c584.152, { 1, 0 }
  uselistorder i8** @global_var_1c564.147, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1c564.147 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1024, { 1, 0 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @function_e958, { 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 20, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 1, 0, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_11e5c, { 0, 8, 1, 2, 3, 4, 5, 6, 7, 9, 10 }
  uselistorder i32 2048, { 6, 5, 0, 1, 2, 7, 8, 4, 9, 3, 10, 11 }
  uselistorder i32* @global_var_1c5fc.145, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1c5f8.143, { 1, 2, 3, 4, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1c594.130, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32)* @function_e9b0, { 1, 0 }
  uselistorder i32* @global_var_1c5dc.51, { 4, 5, 1, 2, 3, 6, 0, 7, 15, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 ()* @function_10f28, { 2, 1, 0 }
  uselistorder i32 ()* @function_115a0, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @sl, { 3, 4, 5, 6, 7, 8, 9, 84, 85, 86, 10, 11, 12, 13, 14, 15, 16, 0, 1, 2, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* @sb, { 2, 3, 4, 0, 5, 6, 7, 8, 72, 73, 74, 9, 12, 10, 11, 1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 76, 77, 78, 79, 80, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder label %dec_label_pc_faa4.backedge.thread473, { 9, 2, 8, 4, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_faa4.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1046c, { 1, 0 }
  uselistorder label %.thread240, { 1, 0 }
  uselistorder label %bb369, { 1, 0 }
  uselistorder label %dec_label_pc_103a8, { 1, 0 }
  uselistorder label %dec_label_pc_10374, { 1, 0 }
  uselistorder label %thread-pre-split98, { 1, 0 }
  uselistorder label %dec_label_pc_10284, { 2, 0, 1 }
  uselistorder label %dec_label_pc_101b0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_1019c, { 1, 0 }
  uselistorder label %dec_label_pc_100fc, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_100e8, { 1, 0 }
  uselistorder label %dec_label_pc_10048, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10034, { 1, 0 }
  uselistorder label %dec_label_pc_ffdc, { 4, 5, 1, 2, 3, 11, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_feec, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_fed8, { 1, 0 }
  uselistorder label %dec_label_pc_fdc4, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_fdb0, { 1, 0 }
  uselistorder label %dec_label_pc_fd24, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_fd10, { 1, 0 }
  uselistorder label %dec_label_pc_fca0, { 1, 0 }
  uselistorder label %dec_label_pc_fc84, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_fc70, { 1, 0 }
  uselistorder label %dec_label_pc_fc2c, { 4, 1, 2, 3, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_fc1c, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread88, { 2, 0, 1 }
  uselistorder label %.thread86, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fbb8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_fb74, { 1, 0 }
  uselistorder label %dec_label_pc_fb74.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_fb08, { 1, 0 }
  uselistorder label %bb338, { 1, 0 }
  uselistorder label %dec_label_pc_fabc, { 1, 0 }
  uselistorder label %dec_label_pc_faac, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_faac.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_faa0.loopexit, { 1, 4, 0, 2, 3 }
  uselistorder label %dec_label_pc_fa00, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f8d8, { 1, 7, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_f8b0, { 1, 0 }
  uselistorder label %bb335, { 1, 0 }
  uselistorder label %bb333, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_f700.dec_label_pc_f700_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f6e8.dec_label_pc_f6e8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f6e0, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_f6d8, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_f5f4, { 1, 0 }
  uselistorder label %dec_label_pc_f498, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_f48c, { 1, 0 }
  uselistorder label %.thread66, { 2, 1, 0 }
  uselistorder label %.thread64, { 1, 0 }
  uselistorder label %dec_label_pc_f2fc, { 1, 0 }
  uselistorder label %dec_label_pc_f2f0, { 1, 0 }
  uselistorder label %dec_label_pc_f2e4, { 1, 0 }
  uselistorder label %dec_label_pc_f2d8, { 1, 0 }
  uselistorder label %dec_label_pc_f2cc, { 1, 0 }
  uselistorder label %dec_label_pc_f2b8, { 1, 0 }
  uselistorder label %dec_label_pc_f2a4, { 1, 0 }
  uselistorder label %dec_label_pc_f290, { 1, 0 }
  uselistorder label %dec_label_pc_f270, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f24c, { 1, 0 }
  uselistorder label %dec_label_pc_f240, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f21c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f1f8, { 1, 0 }
  uselistorder label %bb298, { 1, 0 }
  uselistorder label %dec_label_pc_f1a4, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_ef68, { 1, 0 }
}

define i32 @function_10544(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10544:
  %v3_10548 = mul i32 %arg1, 8
  %v2_1054c = add i32 %v3_10548, ptrtoint (i32* @global_var_1c608.212 to i32)
  %v2_10550 = icmp eq i32* %arg2, null
  br i1 %v2_10550, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10544
  %v3_1055c11 = inttoptr i32 %v2_1054c to i32*
  %v4_1055c12 = load i32, i32* %v3_1055c11, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_10544
  %v2_10554 = add i32 %v3_10548, add (i32 ptrtoint (i32* @global_var_1c608.212 to i32), i32 5)
  %v3_10554 = inttoptr i32 %v2_10554 to i8*
  %v4_10554 = load i8, i8* %v3_10554, align 1
  %v5_10554 = zext i8 %v4_10554 to i32
  store i32 %v5_10554, i32* @r2, align 4
  %v2_10558 = add i32 %v3_10548, add (i32 ptrtoint (i32* @global_var_1c608.212 to i32), i32 4)
  %v3_10558 = inttoptr i32 %v2_10558 to i8*
  %v4_10558 = load i8, i8* %v3_10558, align 4
  %v5_10558 = zext i8 %v4_10558 to i32
  %v3_1055c = inttoptr i32 %v2_1054c to i32*
  %v4_1055c = load i32, i32* %v3_1055c, align 4
  %v5_10560 = mul nuw nsw i32 %v5_10554, 256
  %v6_10560 = or i32 %v5_10558, %v5_10560
  store i32 %v6_10560, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_1055c714 = phi i32 [ %v4_1055c12, %.thread ], [ %v4_1055c, %bb ]
  ret i32 %v4_1055c714

; uselistorder directives
  uselistorder i32 %v2_1054c, { 1, 0 }
  uselistorder i32 %v3_10548, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_10570(i32 %arg1) local_unnamed_addr {
dec_label_pc_10570:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10570 = mul i32 %arg1, 8
  %v3_10574 = load i32, i32* @r4, align 4
  store i32 %v3_10574, i32* %stack_var_-20, align 4
  %v3_10584 = and i32 %v3_10570, 2040
  %v2_10588 = add i32 %v3_10584, ptrtoint (i32* @global_var_1c608.212 to i32)
  store i32 %v2_10588, i32* @lr, align 4
  %v1_10590 = add i32 %v3_10584, add (i32 ptrtoint (i32* @global_var_1c608.212 to i32), i32 4)
  store i32 %v1_10590, i32* %r7.global-to-local, align 4
  %v2_10594 = load i32, i32* @global_var_1c3d8.215, align 4
  store i32 %v2_10594, i32* @r2, align 4
  %v2_10598 = inttoptr i32 %v1_10590 to i8*
  %v3_10598 = load i8, i8* %v2_10598, align 4
  %v4_10598 = zext i8 %v3_10598 to i32
  store i32 %v4_10598, i32* @r1, align 4
  %v1_1059c = add i32 %v3_10584, add (i32 ptrtoint (i32* @global_var_1c608.212 to i32), i32 5)
  %v2_1059c = inttoptr i32 %v1_1059c to i8*
  %v3_1059c = load i8, i8* %v2_1059c, align 1
  %v4_1059c = zext i8 %v3_1059c to i32
  %v3_105a0 = udiv i32 %v2_10594, 256
  %v4_105a4 = mul nuw nsw i32 %v4_1059c, 256
  %v5_105a4 = or i32 %v4_105a4, %v4_10598
  %v7_105a4 = icmp eq i32 %v5_105a4, 0
  store i1 %v7_105a4, i1* @cpsr_z, align 1
  %v3_105a8 = udiv i32 %v2_10594, 65536
  %v1_105ac = urem i32 %v3_105a0, 256
  store i32 %v1_105ac, i32* %r6.global-to-local, align 4
  %v1_105b0 = urem i32 %v3_105a8, 256
  store i32 %v1_105b0, i32* %r5.global-to-local, align 4
  %v3_105b4 = udiv i32 %v2_10594, 16777216
  store i32 %v3_105b4, i32* %r4.global-to-local, align 4
  %v1_105b8 = urem i32 %v2_10594, 256
  br i1 %v7_105a4, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10570
  store i32 %v3_10574, i32* @r4, align 4
  ret i32 %v1_105b8

bb8:                                              ; preds = %dec_label_pc_10570
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_105c4

dec_label_pc_105c4:                               ; preds = %dec_label_pc_105c4, %bb8
  %v2_105d0 = phi i32 [ %v1_1060c, %dec_label_pc_105c4 ], [ 0, %bb8 ]
  %v0_105c4 = phi i32 [ %v0_10604, %dec_label_pc_105c4 ], [ %v2_10588, %bb8 ]
  %v1_105c4 = inttoptr i32 %v0_105c4 to i32*
  %v2_105c4 = load i32, i32* %v1_105c4, align 4
  %v2_105c8 = add i32 %v2_105c4, %v2_105d0
  %v3_105c8 = inttoptr i32 %v2_105c8 to i8*
  %v4_105c8 = load i8, i8* %v3_105c8, align 1
  %v6_105c8 = zext i8 %v4_105c8 to i32
  %v2_105cc = xor i32 %v6_105c8, %v1_105b8
  %v1_105d0 = trunc i32 %v2_105cc to i8
  store i8 %v1_105d0, i8* %v3_105c8, align 1
  %v0_105d4 = load i32, i32* @lr, align 4
  %v1_105d4 = inttoptr i32 %v0_105d4 to i32*
  %v2_105d4 = load i32, i32* %v1_105d4, align 4
  %v0_105d8 = load i32, i32* %ip.global-to-local, align 4
  %v2_105d8 = add i32 %v0_105d8, %v2_105d4
  %v3_105d8 = inttoptr i32 %v2_105d8 to i8*
  %v4_105d8 = load i8, i8* %v3_105d8, align 1
  %v6_105d8 = zext i8 %v4_105d8 to i32
  %v0_105dc = load i32, i32* %r6.global-to-local, align 4
  %v2_105dc = xor i32 %v0_105dc, %v6_105d8
  %v1_105e0 = trunc i32 %v2_105dc to i8
  store i8 %v1_105e0, i8* %v3_105d8, align 1
  %v0_105e4 = load i32, i32* @lr, align 4
  %v1_105e4 = inttoptr i32 %v0_105e4 to i32*
  %v2_105e4 = load i32, i32* %v1_105e4, align 4
  %v0_105e8 = load i32, i32* %ip.global-to-local, align 4
  %v2_105e8 = add i32 %v0_105e8, %v2_105e4
  %v3_105e8 = inttoptr i32 %v2_105e8 to i8*
  %v4_105e8 = load i8, i8* %v3_105e8, align 1
  %v6_105e8 = zext i8 %v4_105e8 to i32
  %v0_105ec = load i32, i32* %r5.global-to-local, align 4
  %v2_105ec = xor i32 %v0_105ec, %v6_105e8
  %v1_105f0 = trunc i32 %v2_105ec to i8
  store i8 %v1_105f0, i8* %v3_105e8, align 1
  %v0_105f4 = load i32, i32* @lr, align 4
  %v1_105f4 = inttoptr i32 %v0_105f4 to i32*
  %v2_105f4 = load i32, i32* %v1_105f4, align 4
  store i32 %v2_105f4, i32* @r1, align 4
  %v0_105f8 = load i32, i32* %ip.global-to-local, align 4
  %v2_105f8 = add i32 %v0_105f8, %v2_105f4
  %v3_105f8 = inttoptr i32 %v2_105f8 to i8*
  %v4_105f8 = load i8, i8* %v3_105f8, align 1
  %v6_105f8 = zext i8 %v4_105f8 to i32
  %v0_105fc = load i32, i32* %r4.global-to-local, align 4
  %v2_105fc = xor i32 %v0_105fc, %v6_105f8
  %v1_10600 = trunc i32 %v2_105fc to i8
  store i8 %v1_10600, i8* %v3_105f8, align 1
  %v0_10604 = load i32, i32* @lr, align 4
  %v1_10604 = add i32 %v0_10604, 4
  %v2_10604 = inttoptr i32 %v1_10604 to i8*
  %v3_10604 = load i8, i8* %v2_10604, align 1
  %v4_10604 = zext i8 %v3_10604 to i32
  %v0_10608 = load i32, i32* %r7.global-to-local, align 4
  %v1_10608 = add i32 %v0_10608, 1
  %v2_10608 = inttoptr i32 %v1_10608 to i8*
  %v3_10608 = load i8, i8* %v2_10608, align 1
  %v4_10608 = zext i8 %v3_10608 to i32
  %v0_1060c = load i32, i32* %ip.global-to-local, align 4
  %v1_1060c = add i32 %v0_1060c, 1
  store i32 %v1_1060c, i32* %ip.global-to-local, align 4
  %v4_10610 = mul nuw nsw i32 %v4_10608, 256
  %v5_10610 = or i32 %v4_10610, %v4_10604
  store i32 %v5_10610, i32* @r2, align 4
  %v9_10614 = icmp eq i32 %v5_10610, %v1_1060c
  store i1 %v9_10614, i1* @cpsr_z, align 1
  %v8_10618 = icmp sgt i32 %v5_10610, %v1_1060c
  br i1 %v8_10618, label %dec_label_pc_105c4, label %dec_label_pc_1061c

dec_label_pc_1061c:                               ; preds = %dec_label_pc_105c4
  %v2_1061c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1061c, i32* @r4, align 4
  ret i32 %v1_105b8

; uselistorder directives
  uselistorder i32 %v1_1060c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_10604, { 1, 0 }
  uselistorder i32 %v1_105b8, { 0, 2, 1 }
  uselistorder i32 %v2_10594, { 3, 0, 1, 2, 4 }
}

define i32 @function_10628(i32 %arg1) local_unnamed_addr {
dec_label_pc_10628:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10628 = mul i32 %arg1, 8
  %v3_1062c = load i32, i32* @r4, align 4
  store i32 %v3_1062c, i32* %stack_var_-20, align 4
  %v3_1063c = and i32 %v3_10628, 2040
  %v2_10640 = add i32 %v3_1063c, ptrtoint (i32* @global_var_1c608.212 to i32)
  store i32 %v2_10640, i32* @lr, align 4
  %v1_10648 = add i32 %v3_1063c, add (i32 ptrtoint (i32* @global_var_1c608.212 to i32), i32 4)
  store i32 %v1_10648, i32* %r7.global-to-local, align 4
  %v2_1064c = load i32, i32* @global_var_1c3d8.215, align 4
  store i32 %v2_1064c, i32* @r2, align 4
  %v2_10650 = inttoptr i32 %v1_10648 to i8*
  %v3_10650 = load i8, i8* %v2_10650, align 4
  %v4_10650 = zext i8 %v3_10650 to i32
  %v1_10654 = add i32 %v3_1063c, add (i32 ptrtoint (i32* @global_var_1c608.212 to i32), i32 5)
  %v2_10654 = inttoptr i32 %v1_10654 to i8*
  %v3_10654 = load i8, i8* %v2_10654, align 1
  %v4_10654 = zext i8 %v3_10654 to i32
  %v3_10658 = udiv i32 %v2_1064c, 256
  %v4_1065c = mul nuw nsw i32 %v4_10654, 256
  %v5_1065c = or i32 %v4_1065c, %v4_10650
  %v7_1065c = icmp eq i32 %v5_1065c, 0
  %v3_10660 = udiv i32 %v2_1064c, 65536
  %v1_10664 = urem i32 %v3_10658, 256
  store i32 %v1_10664, i32* %r6.global-to-local, align 4
  %v1_10668 = urem i32 %v3_10660, 256
  store i32 %v1_10668, i32* %r5.global-to-local, align 4
  %v3_1066c = udiv i32 %v2_1064c, 16777216
  store i32 %v3_1066c, i32* %r4.global-to-local, align 4
  %v1_10670 = urem i32 %v2_1064c, 256
  br i1 %v7_1065c, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10628
  store i32 %v3_1062c, i32* @r4, align 4
  ret i32 %v1_10670

bb8:                                              ; preds = %dec_label_pc_10628
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1067c

dec_label_pc_1067c:                               ; preds = %dec_label_pc_1067c, %bb8
  %v2_10688 = phi i32 [ %v1_106c4, %dec_label_pc_1067c ], [ 0, %bb8 ]
  %v0_1067c = phi i32 [ %v0_106bc, %dec_label_pc_1067c ], [ %v2_10640, %bb8 ]
  %v1_1067c = inttoptr i32 %v0_1067c to i32*
  %v2_1067c = load i32, i32* %v1_1067c, align 4
  %v2_10680 = add i32 %v2_1067c, %v2_10688
  %v3_10680 = inttoptr i32 %v2_10680 to i8*
  %v4_10680 = load i8, i8* %v3_10680, align 1
  %v6_10680 = zext i8 %v4_10680 to i32
  %v2_10684 = xor i32 %v6_10680, %v1_10670
  %v1_10688 = trunc i32 %v2_10684 to i8
  store i8 %v1_10688, i8* %v3_10680, align 1
  %v0_1068c = load i32, i32* @lr, align 4
  %v1_1068c = inttoptr i32 %v0_1068c to i32*
  %v2_1068c = load i32, i32* %v1_1068c, align 4
  %v0_10690 = load i32, i32* %ip.global-to-local, align 4
  %v2_10690 = add i32 %v0_10690, %v2_1068c
  %v3_10690 = inttoptr i32 %v2_10690 to i8*
  %v4_10690 = load i8, i8* %v3_10690, align 1
  %v6_10690 = zext i8 %v4_10690 to i32
  %v0_10694 = load i32, i32* %r6.global-to-local, align 4
  %v2_10694 = xor i32 %v0_10694, %v6_10690
  %v1_10698 = trunc i32 %v2_10694 to i8
  store i8 %v1_10698, i8* %v3_10690, align 1
  %v0_1069c = load i32, i32* @lr, align 4
  %v1_1069c = inttoptr i32 %v0_1069c to i32*
  %v2_1069c = load i32, i32* %v1_1069c, align 4
  %v0_106a0 = load i32, i32* %ip.global-to-local, align 4
  %v2_106a0 = add i32 %v0_106a0, %v2_1069c
  %v3_106a0 = inttoptr i32 %v2_106a0 to i8*
  %v4_106a0 = load i8, i8* %v3_106a0, align 1
  %v6_106a0 = zext i8 %v4_106a0 to i32
  %v0_106a4 = load i32, i32* %r5.global-to-local, align 4
  %v2_106a4 = xor i32 %v0_106a4, %v6_106a0
  %v1_106a8 = trunc i32 %v2_106a4 to i8
  store i8 %v1_106a8, i8* %v3_106a0, align 1
  %v0_106ac = load i32, i32* @lr, align 4
  %v1_106ac = inttoptr i32 %v0_106ac to i32*
  %v2_106ac = load i32, i32* %v1_106ac, align 4
  %v0_106b0 = load i32, i32* %ip.global-to-local, align 4
  %v2_106b0 = add i32 %v0_106b0, %v2_106ac
  %v3_106b0 = inttoptr i32 %v2_106b0 to i8*
  %v4_106b0 = load i8, i8* %v3_106b0, align 1
  %v6_106b0 = zext i8 %v4_106b0 to i32
  %v0_106b4 = load i32, i32* %r4.global-to-local, align 4
  %v2_106b4 = xor i32 %v0_106b4, %v6_106b0
  %v1_106b8 = trunc i32 %v2_106b4 to i8
  store i8 %v1_106b8, i8* %v3_106b0, align 1
  %v0_106bc = load i32, i32* @lr, align 4
  %v1_106bc = add i32 %v0_106bc, 4
  %v2_106bc = inttoptr i32 %v1_106bc to i8*
  %v3_106bc = load i8, i8* %v2_106bc, align 1
  %v4_106bc = zext i8 %v3_106bc to i32
  %v0_106c0 = load i32, i32* %r7.global-to-local, align 4
  %v1_106c0 = add i32 %v0_106c0, 1
  %v2_106c0 = inttoptr i32 %v1_106c0 to i8*
  %v3_106c0 = load i8, i8* %v2_106c0, align 1
  %v4_106c0 = zext i8 %v3_106c0 to i32
  %v0_106c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_106c4 = add i32 %v0_106c4, 1
  store i32 %v1_106c4, i32* %ip.global-to-local, align 4
  %v4_106c8 = mul nuw nsw i32 %v4_106c0, 256
  %v5_106c8 = or i32 %v4_106c8, %v4_106bc
  store i32 %v5_106c8, i32* @r2, align 4
  %v8_106d0 = icmp sgt i32 %v5_106c8, %v1_106c4
  br i1 %v8_106d0, label %dec_label_pc_1067c, label %dec_label_pc_106d4

dec_label_pc_106d4:                               ; preds = %dec_label_pc_1067c
  %v2_106d4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_106d4, i32* @r4, align 4
  ret i32 %v1_10670

; uselistorder directives
  uselistorder i32 %v1_106c4, { 1, 2, 0 }
  uselistorder i32 %v0_106bc, { 1, 0 }
  uselistorder i32 %v1_10670, { 0, 2, 1 }
  uselistorder i32 %v2_1064c, { 3, 0, 1, 2, 4 }
}

define i32 @function_106e0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_106e0:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_106e0 = load i32, i32* @r4, align 4
  store i32 %v3_106e0, i32* %stack_var_-36, align 4
  %v6_106e0 = load i32, i32* @r5, align 4
  %v9_106e0 = load i32, i32* @r6, align 4
  %v12_106e0 = load i32, i32* @r7, align 4
  %v1_106e8 = call i32 @function_12024(i32 2)
  store i32 ptrtoint (i32* @global_var_1c608.212 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 2, i32* %r8.global-to-local, align 4
  store i32 %v1_106e8, i32* @r5, align 4
  %v4_10704 = call i32 @function_10cec(i32 %v1_106e8, i32 ptrtoint ([3 x i8]* @global_var_13ecc.220 to i32), i32 2)
  %v0_1070c = load i32, i32* @r5, align 4
  store i32 %v0_1070c, i32* @global_var_1c610.221, align 4
  %v0_10710 = load i32, i32* %r8.global-to-local, align 4
  %v1_10710 = trunc i32 %v0_10710 to i8
  store i8 %v1_10710, i8* bitcast (i32* @global_var_1c614.222 to i8*), align 4
  %v0_10714 = load i32, i32* @r6, align 4
  %v1_10714 = trunc i32 %v0_10714 to i8
  store i8 %v1_10714, i8* bitcast (i32* @global_var_1c615.223 to i8*), align 4
  %v1_10718 = call i32 @function_12024(i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_13ed0.225 to i32), i32* %sl.global-to-local, align 4
  store i32 13, i32* @r5, align 4
  store i32 %v1_10718, i32* @r7, align 4
  %v4_10730 = call i32 @function_10cec(i32 %v1_10718, i32 ptrtoint ([14 x i8]* @global_var_13ed0.225 to i32), i32 13)
  %v0_10734 = load i32, i32* @r5, align 4
  %v0_10738 = load i32, i32* @r7, align 4
  store i32 %v0_10738, i32* @global_var_1c618.226, align 4
  %v1_1073c = trunc i32 %v0_10734 to i8
  store i8 %v1_1073c, i8* bitcast (i32* @global_var_1c61c.227 to i8*), align 4
  %v0_10740 = load i32, i32* @r6, align 4
  %v1_10740 = trunc i32 %v0_10740 to i8
  store i8 %v1_10740, i8* bitcast (i32* @global_var_1c61d.228 to i8*), align 4
  %v1_10744 = call i32 @function_12024(i32 %v0_10734)
  %v0_10748 = load i32, i32* %sl.global-to-local, align 4
  %v0_1074c = load i32, i32* @r5, align 4
  store i32 %v1_10744, i32* @r7, align 4
  %v4_10754 = call i32 @function_10cec(i32 %v1_10744, i32 %v0_10748, i32 %v0_1074c)
  %v0_10758 = load i32, i32* %r8.global-to-local, align 4
  %v0_1075c = load i32, i32* @r7, align 4
  store i32 %v0_1075c, i32* @global_var_1c620.229, align 4
  %v0_10760 = load i32, i32* @r5, align 4
  %v1_10760 = trunc i32 %v0_10760 to i8
  store i8 %v1_10760, i8* bitcast (i32* @global_var_1c624.230 to i8*), align 4
  %v0_10764 = load i32, i32* @r6, align 4
  %v1_10764 = trunc i32 %v0_10764 to i8
  store i8 %v1_10764, i8* bitcast (i32* @global_var_1c625.231 to i8*), align 4
  %v1_10768 = call i32 @function_12024(i32 %v0_10758)
  %v0_1076c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_10768, i32* @r5, align 4
  %v3_10778 = call i32 @function_10cec(i32 %v1_10768, i32 ptrtoint (i32* @global_var_13ee0.233 to i32), i32 %v0_1076c)
  %v0_10780 = load i32, i32* @r5, align 4
  store i32 %v0_10780, i32* @global_var_1c628.234, align 4
  %v0_10784 = load i32, i32* %r8.global-to-local, align 4
  %v1_10784 = trunc i32 %v0_10784 to i8
  store i8 %v1_10784, i8* bitcast (i32* @global_var_1c62c.235 to i8*), align 4
  %v0_10788 = load i32, i32* @r6, align 4
  %v1_10788 = trunc i32 %v0_10788 to i8
  store i8 %v1_10788, i8* bitcast (i32* @global_var_1c62d.236 to i8*), align 4
  %v1_1078c = call i32 @function_12024(i32 29)
  store i32 %v1_1078c, i32* @r5, align 4
  %v3_1079c = call i32 @function_10cec(i32 %v1_1078c, i32 ptrtoint (i32* @global_var_14060.238 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1c634.239 to i8*), align 4
  %v0_107ac = load i32, i32* @r5, align 4
  store i32 %v0_107ac, i32* @global_var_1c630.240, align 4
  %v0_107b0 = load i32, i32* @r6, align 4
  %v1_107b0 = trunc i32 %v0_107b0 to i8
  store i8 %v1_107b0, i8* bitcast (i32* @global_var_1c635.241 to i8*), align 4
  %v1_107b4 = call i32 @function_12024(i32 6)
  store i32 6, i32* %fp.global-to-local, align 4
  store i32 %v1_107b4, i32* @r5, align 4
  %v4_107c8 = call i32 @function_10cec(i32 %v1_107b4, i32 ptrtoint ([7 x i8]* @global_var_13ee4.243 to i32), i32 6)
  %v0_107d0 = load i32, i32* @r5, align 4
  store i32 %v0_107d0, i32* @global_var_1c638.244, align 4
  store i8 6, i8* bitcast (i32* @global_var_1c63c.245 to i8*), align 4
  %v0_107d8 = load i32, i32* @r6, align 4
  %v1_107d8 = trunc i32 %v0_107d8 to i8
  store i8 %v1_107d8, i8* bitcast (i32* @global_var_1c63d.246 to i8*), align 4
  %v1_107dc = call i32 @function_12024(i32 7)
  %v0_107e0 = load i32, i32* %r8.global-to-local, align 4
  %v1_107e0 = add i32 %v0_107e0, 5
  store i32 %v1_107e0, i32* %r8.global-to-local, align 4
  store i32 %v1_107dc, i32* @r5, align 4
  %v4_107f0 = call i32 @function_10cec(i32 %v1_107dc, i32 ptrtoint ([8 x i8]* @global_var_13eec.248 to i32), i32 %v1_107e0)
  %v0_107f4 = load i32, i32* %r8.global-to-local, align 4
  %v0_107f8 = load i32, i32* @r5, align 4
  store i32 %v0_107f8, i32* @global_var_1c640.249, align 4
  %v1_107fc = trunc i32 %v0_107f4 to i8
  store i8 %v1_107fc, i8* bitcast (i32* @global_var_1c644.250 to i8*), align 4
  %v0_10800 = load i32, i32* @r6, align 4
  %v1_10800 = trunc i32 %v0_10800 to i8
  store i8 %v1_10800, i8* bitcast (i32* @global_var_1c645.251 to i8*), align 4
  %v1_10804 = call i32 @function_12024(i32 %v0_107f4)
  %v0_10808 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_10804, i32* @r5, align 4
  %v4_10814 = call i32 @function_10cec(i32 %v1_10804, i32 ptrtoint ([8 x i8]* @global_var_13ef4.253 to i32), i32 %v0_10808)
  %v0_1081c = load i32, i32* @r5, align 4
  store i32 %v0_1081c, i32* @global_var_1c648.254, align 4
  %v0_10820 = load i32, i32* %r8.global-to-local, align 4
  %v1_10820 = trunc i32 %v0_10820 to i8
  store i8 %v1_10820, i8* bitcast (i32* @global_var_1c64c.255 to i8*), align 4
  %v0_10824 = load i32, i32* @r6, align 4
  %v1_10824 = trunc i32 %v0_10824 to i8
  store i8 %v1_10824, i8* bitcast (i32* @global_var_1c64d.256 to i8*), align 4
  %v1_10828 = call i32 @function_12024(i32 3)
  store i32 %v1_10828, i32* @r5, align 4
  %v4_10838 = call i32 @function_10cec(i32 %v1_10828, i32 ptrtoint ([4 x i8]* @global_var_13efc.258 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1c654.259 to i8*), align 4
  %v0_10848 = load i32, i32* @r5, align 4
  store i32 %v0_10848, i32* @global_var_1c650.260, align 4
  %v0_1084c = load i32, i32* @r6, align 4
  %v1_1084c = trunc i32 %v0_1084c to i8
  store i8 %v1_1084c, i8* bitcast (i32* @global_var_1c655.261 to i8*), align 4
  %v1_10850 = call i32 @function_12024(i32 19)
  store i32 %v1_10850, i32* @r5, align 4
  %v3_10860 = call i32 @function_10cec(i32 %v1_10850, i32 ptrtoint (i32* @global_var_13f00.263 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1c65c.264 to i8*), align 4
  %v0_10870 = load i32, i32* @r5, align 4
  store i32 %v0_10870, i32* @global_var_1c658.265, align 4
  %v0_10874 = load i32, i32* @r6, align 4
  %v1_10874 = trunc i32 %v0_10874 to i8
  store i8 %v1_10874, i8* bitcast (i32* @global_var_1c65d.266 to i8*), align 4
  %v1_10878 = call i32 @function_12024(i32 24)
  store i32 %v1_10878, i32* @r5, align 4
  %v3_10888 = call i32 @function_10cec(i32 %v1_10878, i32 ptrtoint (i32* @global_var_13f14.268 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1c664.269 to i8*), align 4
  %v0_10898 = load i32, i32* @r5, align 4
  store i32 %v0_10898, i32* @global_var_1c660.270, align 4
  %v0_1089c = load i32, i32* @r6, align 4
  %v1_1089c = trunc i32 %v0_1089c to i8
  store i8 %v1_1089c, i8* bitcast (i32* @global_var_1c665.271 to i8*), align 4
  %v1_108a0 = call i32 @function_12024(i32 9)
  store i32 %v1_108a0, i32* @r5, align 4
  %v4_108b0 = call i32 @function_10cec(i32 %v1_108a0, i32 ptrtoint ([10 x i8]* @global_var_13f30.273 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1c66c.274 to i8*), align 4
  %v0_108c0 = load i32, i32* @r5, align 4
  store i32 %v0_108c0, i32* @global_var_1c668.275, align 4
  %v0_108c4 = load i32, i32* @r6, align 4
  %v1_108c4 = trunc i32 %v0_108c4 to i8
  store i8 %v1_108c4, i8* bitcast (i32* @global_var_1c66d.276 to i8*), align 4
  %v1_108c8 = call i32 @function_12024(i32 16)
  store i32 16, i32* %sl.global-to-local, align 4
  store i32 %v1_108c8, i32* @r5, align 4
  %v4_108dc = call i32 @function_10cec(i32 %v1_108c8, i32 ptrtoint ([17 x i8]* @global_var_13f3c.278 to i32), i32 16)
  %v0_108e4 = load i32, i32* @r5, align 4
  store i32 %v0_108e4, i32* @global_var_1c670.279, align 4
  store i8 16, i8* bitcast (i32* @global_var_1c674.280 to i8*), align 4
  %v0_108ec = load i32, i32* @r6, align 4
  %v1_108ec = trunc i32 %v0_108ec to i8
  store i8 %v1_108ec, i8* bitcast (i32* @global_var_1c675.281 to i8*), align 4
  %v1_108f0 = call i32 @function_12024(i32 22)
  store i32 %v1_108f0, i32* @r5, align 4
  %v4_10900 = call i32 @function_10cec(i32 %v1_108f0, i32 ptrtoint ([23 x i8]* @global_var_13f50.283 to i32), i32 22)
  %v0_10908 = load i32, i32* %r8.global-to-local, align 4
  store i8 22, i8* bitcast (i32* @global_var_1c67c.284 to i8*), align 4
  %v0_10910 = load i32, i32* @r5, align 4
  store i32 %v0_10910, i32* @global_var_1c678.285, align 4
  %v0_10914 = load i32, i32* @r6, align 4
  %v1_10914 = trunc i32 %v0_10914 to i8
  store i8 %v1_10914, i8* bitcast (i32* @global_var_1c67d.286 to i8*), align 4
  %v1_10918 = call i32 @function_12024(i32 %v0_10908)
  %v0_1091c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_10918, i32* @r5, align 4
  %v4_10928 = call i32 @function_10cec(i32 %v1_10918, i32 ptrtoint ([8 x i8]* @global_var_13f68.288 to i32), i32 %v0_1091c)
  %v0_10930 = load i32, i32* @r5, align 4
  store i32 %v0_10930, i32* @global_var_1c680.289, align 4
  %v0_10934 = load i32, i32* %r8.global-to-local, align 4
  %v1_10934 = trunc i32 %v0_10934 to i8
  store i8 %v1_10934, i8* bitcast (i32* @global_var_1c684.290 to i8*), align 4
  %v0_10938 = load i32, i32* @r6, align 4
  %v1_10938 = trunc i32 %v0_10938 to i8
  store i8 %v1_10938, i8* bitcast (i32* @global_var_1c685.291 to i8*), align 4
  %v1_1093c = call i32 @function_12024(i32 5)
  store i32 %v1_1093c, i32* @r5, align 4
  %v4_1094c = call i32 @function_10cec(i32 %v1_1093c, i32 ptrtoint ([6 x i8]* @global_var_13f70.293 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1c68c.294 to i8*), align 4
  %v0_1095c = load i32, i32* @r5, align 4
  store i32 %v0_1095c, i32* @global_var_1c688.295, align 4
  %v0_10960 = load i32, i32* @r6, align 4
  %v1_10960 = trunc i32 %v0_10960 to i8
  store i8 %v1_10960, i8* bitcast (i32* @global_var_1c68d.296 to i8*), align 4
  %v1_10964 = call i32 @function_12024(i32 4)
  store i32 %v1_10964, i32* @r5, align 4
  %v4_10974 = call i32 @function_10cec(i32 %v1_10964, i32 ptrtoint ([5 x i8]* @global_var_13f78.298 to i32), i32 4)
  %v0_1097c = load i32, i32* %fp.global-to-local, align 4
  store i8 4, i8* bitcast (i32* @global_var_1c694.299 to i8*), align 4
  %v0_10984 = load i32, i32* @r5, align 4
  store i32 %v0_10984, i32* @global_var_1c690.300, align 4
  %v0_10988 = load i32, i32* @r6, align 4
  %v1_10988 = trunc i32 %v0_10988 to i8
  store i8 %v1_10988, i8* bitcast (i32* @global_var_1c695.301 to i8*), align 4
  %v1_1098c = call i32 @function_12024(i32 %v0_1097c)
  %v0_10994 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_1098c, i32* @r5, align 4
  %v4_1099c = call i32 @function_10cec(i32 %v1_1098c, i32 ptrtoint ([7 x i8]* @global_var_13f80.303 to i32), i32 %v0_10994)
  %v0_109a4 = load i32, i32* @r5, align 4
  store i32 %v0_109a4, i32* @global_var_1c698.304, align 4
  %v1_109a8 = trunc i32 %v0_10994 to i8
  store i8 %v1_109a8, i8* bitcast (i32* @global_var_1c69c.305 to i8*), align 4
  %v0_109ac = load i32, i32* @r6, align 4
  %v1_109ac = trunc i32 %v0_109ac to i8
  store i8 %v1_109ac, i8* bitcast (i32* @global_var_1c69d.306 to i8*), align 4
  %v1_109b0 = call i32 @function_12024(i32 14)
  store i32 %v1_109b0, i32* @r5, align 4
  store i32 14, i32* %sb.global-to-local, align 4
  %v4_109c4 = call i32 @function_10cec(i32 %v1_109b0, i32 ptrtoint ([15 x i8]* @global_var_13f88.308 to i32), i32 14)
  %v0_109cc = load i32, i32* @r5, align 4
  store i32 %v0_109cc, i32* @global_var_1c6a0.309, align 4
  store i8 14, i8* bitcast (i32* @global_var_1c6a4.310 to i8*), align 4
  %v0_109d4 = load i32, i32* @r6, align 4
  %v1_109d4 = trunc i32 %v0_109d4 to i8
  store i8 %v1_109d4, i8* bitcast (i32* @global_var_1c6a5.311 to i8*), align 4
  %v1_109d8 = call i32 @function_12024(i32 8)
  store i32 8, i32* @r7, align 4
  store i32 %v1_109d8, i32* @r5, align 4
  %v4_109ec = call i32 @function_10cec(i32 %v1_109d8, i32 ptrtoint ([9 x i8]* @global_var_13f98.313 to i32), i32 8)
  %v0_109f0 = load i32, i32* %r8.global-to-local, align 4
  %v0_109f4 = load i32, i32* @r5, align 4
  store i32 %v0_109f4, i32* @global_var_1c708.314, align 4
  %v0_109f8 = load i32, i32* @r7, align 4
  %v1_109f8 = trunc i32 %v0_109f8 to i8
  store i8 %v1_109f8, i8* bitcast (i32* @global_var_1c70c.315 to i8*), align 4
  %v0_109fc = load i32, i32* @r6, align 4
  %v1_109fc = trunc i32 %v0_109fc to i8
  store i8 %v1_109fc, i8* bitcast (i32* @global_var_1c70d.316 to i8*), align 4
  %v1_10a00 = call i32 @function_12024(i32 %v0_109f0)
  %v0_10a04 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_10a00, i32* @r5, align 4
  %v4_10a10 = call i32 @function_10cec(i32 %v1_10a00, i32 ptrtoint ([8 x i8]* @global_var_13fa4.318 to i32), i32 %v0_10a04)
  %v0_10a14 = load i32, i32* %sl.global-to-local, align 4
  %v0_10a18 = load i32, i32* @r5, align 4
  store i32 %v0_10a18, i32* @global_var_1c710.319, align 4
  %v0_10a1c = load i32, i32* %r8.global-to-local, align 4
  %v1_10a1c = trunc i32 %v0_10a1c to i8
  store i8 %v1_10a1c, i8* bitcast (i32* @global_var_1c714.320 to i8*), align 4
  %v0_10a20 = load i32, i32* @r6, align 4
  %v1_10a20 = trunc i32 %v0_10a20 to i8
  store i8 %v1_10a20, i8* bitcast (i32* @global_var_1c715.321 to i8*), align 4
  %v1_10a24 = call i32 @function_12024(i32 %v0_10a14)
  %v0_10a2c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_10a24, i32* @r5, align 4
  %v4_10a34 = call i32 @function_10cec(i32 %v1_10a24, i32 ptrtoint ([17 x i8]* @global_var_13fac.323 to i32), i32 %v0_10a2c)
  %v0_10a3c = load i32, i32* @r5, align 4
  store i32 %v0_10a3c, i32* @global_var_1c6a8.324, align 4
  %v1_10a40 = trunc i32 %v0_10a2c to i8
  store i8 %v1_10a40, i8* bitcast (i32* @global_var_1c6ac.325 to i8*), align 4
  %v0_10a44 = load i32, i32* @r6, align 4
  %v1_10a44 = trunc i32 %v0_10a44 to i8
  store i8 %v1_10a44, i8* bitcast (i32* @global_var_1c6ad.326 to i8*), align 4
  %v1_10a48 = call i32 @function_12024(i32 23)
  store i32 %v1_10a48, i32* @r5, align 4
  %v0_10a58 = load i32, i32* %r8.global-to-local, align 4
  %v1_10a58 = load i32, i32* %sl.global-to-local, align 4
  %v2_10a58 = add i32 %v1_10a58, %v0_10a58
  store i32 %v2_10a58, i32* %r8.global-to-local, align 4
  %v4_10a5c = call i32 @function_10cec(i32 %v1_10a48, i32 ptrtoint ([24 x i8]* @global_var_13fc0.328 to i32), i32 23)
  %v0_10a60 = load i32, i32* @r7, align 4
  %v0_10a64 = load i32, i32* @r5, align 4
  store i32 %v0_10a64, i32* @global_var_1c6b0.329, align 4
  %v0_10a68 = load i32, i32* %r8.global-to-local, align 4
  %v1_10a68 = trunc i32 %v0_10a68 to i8
  store i8 %v1_10a68, i8* bitcast (i32* @global_var_1c6b4.330 to i8*), align 4
  %v0_10a6c = load i32, i32* @r6, align 4
  %v1_10a6c = trunc i32 %v0_10a6c to i8
  store i8 %v1_10a6c, i8* bitcast (i32* @global_var_1c6b5.331 to i8*), align 4
  %v1_10a70 = call i32 @function_12024(i32 %v0_10a60)
  %v0_10a78 = load i32, i32* @r7, align 4
  store i32 %v1_10a70, i32* @r5, align 4
  %v4_10a80 = call i32 @function_10cec(i32 %v1_10a70, i32 ptrtoint ([9 x i8]* @global_var_13fd8.333 to i32), i32 %v0_10a78)
  %v0_10a88 = load i32, i32* @r5, align 4
  store i32 %v0_10a88, i32* @global_var_1c6b8.334, align 4
  %v0_10a8c = load i32, i32* @r7, align 4
  %v1_10a8c = trunc i32 %v0_10a8c to i8
  store i8 %v1_10a8c, i8* bitcast (i32* @global_var_1c6bc.335 to i8*), align 4
  %v0_10a90 = load i32, i32* @r6, align 4
  %v1_10a90 = trunc i32 %v0_10a90 to i8
  store i8 %v1_10a90, i8* bitcast (i32* @global_var_1c6bd.336 to i8*), align 4
  %v1_10a94 = call i32 @function_12024(i32 21)
  store i32 %v1_10a94, i32* @r5, align 4
  %v3_10aa4 = call i32 @function_10cec(i32 %v1_10a94, i32 ptrtoint (i32* @global_var_14080.338 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1c6c4.339 to i8*), align 4
  %v0_10ab4 = load i32, i32* @r5, align 4
  store i32 %v0_10ab4, i32* @global_var_1c6c0.340, align 4
  %v0_10ab8 = load i32, i32* @r6, align 4
  %v1_10ab8 = trunc i32 %v0_10ab8 to i8
  store i8 %v1_10ab8, i8* bitcast (i32* @global_var_1c6c5.341 to i8*), align 4
  %v1_10abc = call i32 @function_12024(i32 17)
  store i32 %v1_10abc, i32* @r5, align 4
  %v4_10acc = call i32 @function_10cec(i32 %v1_10abc, i32 ptrtoint ([18 x i8]* @global_var_13fe4.343 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1c6cc.344 to i8*), align 4
  %v0_10adc = load i32, i32* @r5, align 4
  store i32 %v0_10adc, i32* @global_var_1c6c8.345, align 4
  %v0_10ae0 = load i32, i32* @r6, align 4
  %v1_10ae0 = trunc i32 %v0_10ae0 to i8
  store i8 %v1_10ae0, i8* bitcast (i32* @global_var_1c6cd.346 to i8*), align 4
  %v1_10ae4 = call i32 @function_12024(i32 12)
  store i32 %v1_10ae4, i32* @r5, align 4
  %v4_10af4 = call i32 @function_10cec(i32 %v1_10ae4, i32 ptrtoint ([13 x i8]* @global_var_13ff8.348 to i32), i32 12)
  %v0_10afc = load i32, i32* %sb.global-to-local, align 4
  store i8 12, i8* bitcast (i32* @global_var_1c6d4.349 to i8*), align 4
  %v0_10b04 = load i32, i32* @r5, align 4
  store i32 %v0_10b04, i32* @global_var_1c6d0.350, align 4
  %v0_10b08 = load i32, i32* @r6, align 4
  %v1_10b08 = trunc i32 %v0_10b08 to i8
  store i8 %v1_10b08, i8* bitcast (i32* @global_var_1c6d5.351 to i8*), align 4
  %v1_10b0c = call i32 @function_12024(i32 %v0_10afc)
  %v0_10b14 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_10b0c, i32* @r5, align 4
  %v4_10b1c = call i32 @function_10cec(i32 %v1_10b0c, i32 ptrtoint ([15 x i8]* @global_var_14008.353 to i32), i32 %v0_10b14)
  %v0_10b24 = load i32, i32* @r5, align 4
  store i32 %v0_10b24, i32* @global_var_1c6d8.354, align 4
  %v1_10b28 = trunc i32 %v0_10b14 to i8
  store i8 %v1_10b28, i8* bitcast (i32* @global_var_1c6dc.355 to i8*), align 4
  %v0_10b2c = load i32, i32* @r6, align 4
  %v1_10b2c = trunc i32 %v0_10b2c to i8
  store i8 %v1_10b2c, i8* bitcast (i32* @global_var_1c6dd.356 to i8*), align 4
  %v1_10b30 = call i32 @function_12024(i32 19)
  store i32 %v1_10b30, i32* @r5, align 4
  %v4_10b40 = call i32 @function_10cec(i32 %v1_10b30, i32 ptrtoint ([20 x i8]* @global_var_14018.358 to i32), i32 19)
  %v0_10b48 = load i32, i32* @r7, align 4
  store i8 19, i8* bitcast (i32* @global_var_1c6e4.359 to i8*), align 4
  %v0_10b50 = load i32, i32* @r5, align 4
  store i32 %v0_10b50, i32* @global_var_1c6e0.360, align 4
  %v0_10b54 = load i32, i32* @r6, align 4
  %v1_10b54 = trunc i32 %v0_10b54 to i8
  store i8 %v1_10b54, i8* bitcast (i32* @global_var_1c6e5.361 to i8*), align 4
  %v1_10b58 = call i32 @function_12024(i32 %v0_10b48)
  %v0_10b60 = load i32, i32* @r7, align 4
  store i32 %v1_10b58, i32* @r5, align 4
  %v4_10b68 = call i32 @function_10cec(i32 %v1_10b58, i32 ptrtoint ([9 x i8]* @global_var_1402c.363 to i32), i32 %v0_10b60)
  %v0_10b70 = load i32, i32* @r5, align 4
  store i32 %v0_10b70, i32* @global_var_1c6e8.364, align 4
  %v0_10b74 = load i32, i32* @r7, align 4
  %v1_10b74 = trunc i32 %v0_10b74 to i8
  store i8 %v1_10b74, i8* bitcast (i32* @global_var_1c6ec.365 to i8*), align 4
  %v0_10b78 = load i32, i32* @r6, align 4
  %v1_10b78 = trunc i32 %v0_10b78 to i8
  store i8 %v1_10b78, i8* bitcast (i32* @global_var_1c6ed.366 to i8*), align 4
  %v1_10b7c = call i32 @function_12024(i32 5)
  store i32 %v1_10b7c, i32* @r5, align 4
  %v4_10b8c = call i32 @function_10cec(i32 %v1_10b7c, i32 ptrtoint ([6 x i8]* @global_var_14038.368 to i32), i32 5)
  %v0_10b94 = load i32, i32* %fp.global-to-local, align 4
  store i8 5, i8* bitcast (i32* @global_var_1c6f4.369 to i8*), align 4
  %v0_10b9c = load i32, i32* @r5, align 4
  store i32 %v0_10b9c, i32* @global_var_1c6f0.370, align 4
  %v0_10ba0 = load i32, i32* @r6, align 4
  %v1_10ba0 = trunc i32 %v0_10ba0 to i8
  store i8 %v1_10ba0, i8* bitcast (i32* @global_var_1c6f5.371 to i8*), align 4
  %v1_10ba4 = call i32 @function_12024(i32 %v0_10b94)
  %v0_10bac = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_10ba4, i32* @r5, align 4
  %v4_10bb4 = call i32 @function_10cec(i32 %v1_10ba4, i32 ptrtoint ([7 x i8]* @global_var_14040.373 to i32), i32 %v0_10bac)
  %v0_10bb8 = load i32, i32* %r8.global-to-local, align 4
  %v0_10bbc = load i32, i32* @r5, align 4
  store i32 %v0_10bbc, i32* @global_var_1c6f8.374, align 4
  %v1_10bc0 = trunc i32 %v0_10bac to i8
  store i8 %v1_10bc0, i8* bitcast (i32* @global_var_1c6fc.375 to i8*), align 4
  %v0_10bc4 = load i32, i32* @r6, align 4
  %v1_10bc4 = trunc i32 %v0_10bc4 to i8
  store i8 %v1_10bc4, i8* bitcast (i32* @global_var_1c6fd.376 to i8*), align 4
  %v1_10bc8 = call i32 @function_12024(i32 %v0_10bb8)
  %v0_10bd0 = load i32, i32* %r8.global-to-local, align 4
  %v4_10bd8 = call i32 @function_10cec(i32 %v1_10bc8, i32 ptrtoint ([24 x i8]* @global_var_14048.378 to i32), i32 %v0_10bd0)
  %v0_10bdc = load i32, i32* @r6, align 4
  %v1_10bdc = trunc i32 %v0_10bdc to i8
  store i8 %v1_10bdc, i8* bitcast (i32* @global_var_1c705.379 to i8*), align 4
  store i32 %v1_10bc8, i32* @global_var_1c700.380, align 4
  %v0_10be4 = load i32, i32* %r8.global-to-local, align 4
  %v1_10be4 = trunc i32 %v0_10be4 to i8
  store i8 %v1_10be4, i8* bitcast (i32* @global_var_1c704.381 to i8*), align 4
  %v2_10be8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_10be8, i32* @r4, align 4
  store i32 %v6_106e0, i32* @r5, align 4
  store i32 %v9_106e0, i32* @r6, align 4
  store i32 %v12_106e0, i32* @r7, align 4
  ret i32 %v4_10bd8

; uselistorder directives
  uselistorder i32 %v1_10ba4, { 1, 0 }
  uselistorder i32 %v1_10b58, { 1, 0 }
  uselistorder i32 %v1_10b0c, { 1, 0 }
  uselistorder i32 %v1_10a70, { 1, 0 }
  uselistorder i32 %v1_10a24, { 1, 0 }
  uselistorder i32 %v1_10a00, { 1, 0 }
  uselistorder i32 %v1_109d8, { 1, 0 }
  uselistorder i32 %v1_1098c, { 1, 0 }
  uselistorder i32 %v1_10918, { 1, 0 }
  uselistorder i32 %v1_108c8, { 1, 0 }
  uselistorder i32 %v1_10804, { 1, 0 }
  uselistorder i32 %v1_107dc, { 1, 0 }
  uselistorder i32 %v1_107b4, { 1, 0 }
  uselistorder i32 %v1_10768, { 1, 0 }
  uselistorder i32 %v1_10744, { 1, 0 }
  uselistorder i32 %v1_10718, { 1, 0 }
  uselistorder i32 %v1_106e8, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i8 5, { 12, 13, 14, 0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9, 11 }
  uselistorder i8 16, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i8 6, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 (i32, i32, i32)* @function_10cec, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1c608.212 to i32), { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_10c70(i8* %arg1) local_unnamed_addr {
dec_label_pc_10c70:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_10c74 = load i8, i8* %arg1, align 1
  %v4_10c74 = zext i8 %v3_10c74 to i32
  %v2_10c78 = icmp eq i8 %v3_10c74, 0
  br i1 %v2_10c78, label %dec_label_pc_10c94, label %bb

dec_label_pc_10c94:                               ; preds = %dec_label_pc_10c84, %dec_label_pc_10c70
  %merge = phi i32 [ %v4_10c74, %dec_label_pc_10c70 ], [ %v1_10c84, %dec_label_pc_10c84 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_10c70
  br label %dec_label_pc_10c84

dec_label_pc_10c84:                               ; preds = %dec_label_pc_10c84, %bb
  %v0_10c84 = phi i32 [ %v1_10c84, %dec_label_pc_10c84 ], [ 0, %bb ]
  %v1_10c84 = add i32 %v0_10c84, 1
  %v2_10c88 = add i32 %v1_10c84, %tmp
  %v3_10c88 = inttoptr i32 %v2_10c88 to i8*
  %v4_10c88 = load i8, i8* %v3_10c88, align 1
  %v2_10c8c = icmp eq i8 %v4_10c88, 0
  br i1 %v2_10c8c, label %dec_label_pc_10c94, label %dec_label_pc_10c84

; uselistorder directives
  uselistorder i32 %v1_10c84, { 1, 0, 2 }
}

define i32 @function_10c98(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10c98:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_10c98 = load i8, i8* %arg1, align 1
  %v3_10c98 = zext i8 %v2_10c98 to i32
  %v2_10c9c = icmp eq i8 %v2_10c98, 0
  br i1 %v2_10c9c, label %dec_label_pc_10ce0, label %dec_label_pc_10ca4

dec_label_pc_10ca4:                               ; preds = %dec_label_pc_10c98
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10ca8

dec_label_pc_10ca8:                               ; preds = %dec_label_pc_10ca8, %dec_label_pc_10ca4
  %v0_10ca8 = phi i32 [ %v1_10ca8, %dec_label_pc_10ca8 ], [ 0, %dec_label_pc_10ca4 ]
  %v1_10ca8 = add i32 %v0_10ca8, 1
  store i32 %v1_10ca8, i32* %ip.global-to-local, align 4
  %v2_10cac = add i32 %v1_10ca8, %tmp
  %v3_10cac = inttoptr i32 %v2_10cac to i8*
  %v4_10cac = load i8, i8* %v3_10cac, align 1
  %v2_10cb0 = icmp eq i8 %v4_10cac, 0
  br i1 %v2_10cb0, label %dec_label_pc_10cb8, label %dec_label_pc_10ca8

dec_label_pc_10cb8:                               ; preds = %dec_label_pc_10ca8
  %v7_10cb8 = icmp eq i32 %v0_10ca8, -2
  br i1 %v7_10cb8, label %dec_label_pc_10cd8, label %dec_label_pc_10cc4.preheader

dec_label_pc_10cc4.preheader:                     ; preds = %dec_label_pc_10cb8, %dec_label_pc_10ce0
  %storemerge = phi i32 [ %v3_10c98, %dec_label_pc_10ce0 ], [ %v1_10ca8, %dec_label_pc_10cb8 ]
  %v2_10cd0.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_10cc4

dec_label_pc_10cc4:                               ; preds = %dec_label_pc_10cc4.dec_label_pc_10cc4_crit_edge, %dec_label_pc_10cc4.preheader
  %v2_10cd0 = phi i32 [ %v5_10cd0, %dec_label_pc_10cc4.dec_label_pc_10cc4_crit_edge ], [ %v2_10cd0.pre, %dec_label_pc_10cc4.preheader ]
  %v0_10cc8 = phi i32 [ %v0_10cc8.pre, %dec_label_pc_10cc4.dec_label_pc_10cc4_crit_edge ], [ %tmp, %dec_label_pc_10cc4.preheader ]
  %v0_10cc4 = phi i32 [ %v0_10cc4.pre, %dec_label_pc_10cc4.dec_label_pc_10cc4_crit_edge ], [ %storemerge, %dec_label_pc_10cc4.preheader ]
  %v1_10cc4 = add i32 %v0_10cc4, -1
  store i32 %v1_10cc4, i32* @r2, align 4
  %v1_10cc8 = inttoptr i32 %v0_10cc8 to i8*
  %v2_10cc8 = load i8, i8* %v1_10cc8, align 1
  %v5_10cc8 = add i32 %v0_10cc8, 1
  store i32 %v5_10cc8, i32* %r1.global-to-local, align 4
  %v3_10ccc = icmp eq i32 %v0_10cc4, 0
  %v3_10cd0 = inttoptr i32 %v2_10cd0 to i8*
  store i8 %v2_10cc8, i8* %v3_10cd0, align 1
  %v4_10cd0 = load i32, i32* @r0, align 4
  %v5_10cd0 = add i32 %v4_10cd0, 1
  store i32 %v5_10cd0, i32* @r0, align 4
  br i1 %v3_10ccc, label %dec_label_pc_10cd8.loopexit, label %dec_label_pc_10cc4.dec_label_pc_10cc4_crit_edge

dec_label_pc_10cc4.dec_label_pc_10cc4_crit_edge:  ; preds = %dec_label_pc_10cc4
  %v0_10cc4.pre = load i32, i32* @r2, align 4
  %v0_10cc8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10cc4

dec_label_pc_10cd8.loopexit:                      ; preds = %dec_label_pc_10cc4
  %v0_10cd8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10cd8

dec_label_pc_10cd8:                               ; preds = %dec_label_pc_10cd8.loopexit, %dec_label_pc_10cb8
  %v0_10cd8 = phi i32 [ %v0_10cd8.pre, %dec_label_pc_10cd8.loopexit ], [ %v1_10ca8, %dec_label_pc_10cb8 ]
  ret i32 %v0_10cd8

dec_label_pc_10ce0:                               ; preds = %dec_label_pc_10c98
  store i32 %v3_10c98, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10cc4.preheader

; uselistorder directives
  uselistorder i32 %v5_10cd0, { 1, 0 }
  uselistorder i32 %v0_10cc8, { 1, 0 }
  uselistorder i32 %v1_10ca8, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_10c98, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10cc4.preheader, { 1, 0 }
}

define i32 @function_10cec(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10cec:
  %ip.global-to-local = alloca i32, align 4
  %v2_10cec = icmp eq i32 %arg3, 0
  br i1 %v2_10cec, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_10cf8, %dec_label_pc_10cec
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_10cec
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10cf8

dec_label_pc_10cf8:                               ; preds = %dec_label_pc_10cf8, %bb
  %v0_10cf8 = phi i32 [ %v1_10d00, %dec_label_pc_10cf8 ], [ 0, %bb ]
  %v2_10cf8 = add i32 %v0_10cf8, %arg2
  %v3_10cf8 = inttoptr i32 %v2_10cf8 to i8*
  %v4_10cf8 = load i8, i8* %v3_10cf8, align 1
  %v4_10cfc = add i32 %v0_10cf8, %arg1
  %v5_10cfc = inttoptr i32 %v4_10cfc to i8*
  store i8 %v4_10cf8, i8* %v5_10cfc, align 1
  %v0_10d00 = load i32, i32* %ip.global-to-local, align 4
  %v1_10d00 = add i32 %v0_10d00, 1
  store i32 %v1_10d00, i32* %ip.global-to-local, align 4
  %v9_10d04 = icmp eq i32 %v1_10d00, %arg3
  br i1 %v9_10d04, label %.loopexit, label %dec_label_pc_10cf8

; uselistorder directives
  uselistorder i32 %v1_10d00, { 1, 2, 0 }
}

define i32 @function_10d10() local_unnamed_addr {
dec_label_pc_10d10:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v0_10d10 = load i32, i32* @r1, align 4
  %v2_10d10 = icmp eq i32 %v0_10d10, 0
  br i1 %v2_10d10, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_10d10
  %v2_10d14 = load i32, i32* @r0, align 4
  ret i32 %v2_10d14

bb3:                                              ; preds = %dec_label_pc_10d10
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10d20

dec_label_pc_10d20:                               ; preds = %dec_label_pc_10d20.dec_label_pc_10d20_crit_edge, %bb3
  %v2_10d20 = phi i32 [ %v1_10d24, %dec_label_pc_10d20.dec_label_pc_10d20_crit_edge ], [ 0, %bb3 ]
  %v0_10d20.off0 = phi i8 [ %extract.t, %dec_label_pc_10d20.dec_label_pc_10d20_crit_edge ], [ 0, %bb3 ]
  %v3_10d20 = load i32, i32* @r0, align 4
  %v4_10d20 = add i32 %v3_10d20, %v2_10d20
  %v5_10d20 = inttoptr i32 %v4_10d20 to i8*
  store i8 %v0_10d20.off0, i8* %v5_10d20, align 1
  %v0_10d24 = load i32, i32* %r3.global-to-local, align 4
  %v1_10d24 = add i32 %v0_10d24, 1
  store i32 %v1_10d24, i32* %r3.global-to-local, align 4
  %v1_10d28 = load i32, i32* @r1, align 4
  %v9_10d28 = icmp eq i32 %v1_10d24, %v1_10d28
  br i1 %v9_10d28, label %dec_label_pc_10d30, label %dec_label_pc_10d20.dec_label_pc_10d20_crit_edge

dec_label_pc_10d20.dec_label_pc_10d20_crit_edge:  ; preds = %dec_label_pc_10d20
  %v0_10d20.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_10d20.pre to i8
  br label %dec_label_pc_10d20

dec_label_pc_10d30:                               ; preds = %dec_label_pc_10d20
  %v1_10d30 = load i32, i32* @r0, align 4
  ret i32 %v1_10d30

; uselistorder directives
  uselistorder i32 %v1_10d24, { 1, 2, 0 }
}

define i32 @function_10d34(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10d34:
  %v7_10d48 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_10d48, label %dec_label_pc_10d4c, label %dec_label_pc_10d54

dec_label_pc_10d4c:                               ; preds = %dec_label_pc_10d68, %dec_label_pc_10d34, %dec_label_pc_10d54
  ret i32 -1

dec_label_pc_10d54:                               ; preds = %dec_label_pc_10d34
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_10d4c, label %dec_label_pc_10d5c

dec_label_pc_10d5c:                               ; preds = %dec_label_pc_10d54
  br label %dec_label_pc_10d74

dec_label_pc_10d68:                               ; preds = %dec_label_pc_10d8c, %dec_label_pc_10d74
  %v1_10d68 = add i32 %v0_10d94, 1
  %v9_10d6c = icmp eq i32 %v1_10d68, %arg2
  br i1 %v9_10d6c, label %dec_label_pc_10d4c, label %dec_label_pc_10d74

dec_label_pc_10d74:                               ; preds = %dec_label_pc_10d68, %dec_label_pc_10d5c
  %v0_10d94 = phi i32 [ %v1_10d68, %dec_label_pc_10d68 ], [ 0, %dec_label_pc_10d5c ]
  %v0_10d80 = phi i32 [ %v1_10d80., %dec_label_pc_10d68 ], [ 0, %dec_label_pc_10d5c ]
  %v2_10d74 = add i32 %v0_10d80, %arg3
  %v3_10d74 = inttoptr i32 %v2_10d74 to i8*
  %v4_10d74 = load i8, i8* %v3_10d74, align 1
  %v2_10d78 = add i32 %v0_10d94, %arg1
  %v3_10d78 = inttoptr i32 %v2_10d78 to i8*
  %v4_10d78 = load i8, i8* %v3_10d78, align 1
  %v9_10d7c = icmp eq i8 %v4_10d78, %v4_10d74
  %v1_10d80 = add i32 %v0_10d80, 1
  %v1_10d80. = select i1 %v9_10d7c, i32 %v1_10d80, i32 0
  br i1 %v9_10d7c, label %dec_label_pc_10d8c, label %dec_label_pc_10d68

dec_label_pc_10d8c:                               ; preds = %dec_label_pc_10d74
  %v9_10d8c = icmp eq i32 %v1_10d80., %arg4
  br i1 %v9_10d8c, label %dec_label_pc_10d94, label %dec_label_pc_10d68

dec_label_pc_10d94:                               ; preds = %dec_label_pc_10d8c
  %v1_10d94 = add i32 %v0_10d94, 1
  ret i32 %v1_10d94

; uselistorder directives
  uselistorder i1 %v9_10d7c, { 1, 0 }
  uselistorder i32 %v0_10d80, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_10d4c, { 0, 2, 1 }
}

define i32 @function_10d9c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10d9c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_10d9c = load i32, i32* @r4, align 4
  store i32 %v3_10d9c, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10da8

dec_label_pc_10da8:                               ; preds = %.thread, %dec_label_pc_10dc0, %bb, %dec_label_pc_10d9c
  %v0_10da8 = phi i32 [ %tmp, %dec_label_pc_10d9c ], [ %v5_10da8, %bb ], [ %v5_10da8, %dec_label_pc_10dc0 ], [ %v5_10da8, %.thread ]
  %v1_10da8 = inttoptr i32 %v0_10da8 to i8*
  %v2_10da8 = load i8, i8* %v1_10da8, align 1
  %v3_10da8 = zext i8 %v2_10da8 to i32
  %v5_10da8 = add i32 %v0_10da8, 1
  store i32 %v5_10da8, i32* %r5.global-to-local, align 4
  %v7_10db0 = icmp eq i8 %v2_10da8, 9
  br i1 %v7_10db0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10da8
  store i32 %v3_10da8, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10da8

bb:                                               ; preds = %dec_label_pc_10da8
  %v8_10db4 = icmp eq i8 %v2_10da8, 32
  store i32 %v3_10da8, i32* %r4.global-to-local, align 4
  br i1 %v8_10db4, label %dec_label_pc_10da8, label %dec_label_pc_10dc0

dec_label_pc_10dc0:                               ; preds = %bb
  %v7_10dc0 = icmp eq i8 %v2_10da8, 10
  br i1 %v7_10dc0, label %dec_label_pc_10da8, label %dec_label_pc_10dc8

dec_label_pc_10dc8:                               ; preds = %dec_label_pc_10dc0
  %v7_10dc8 = icmp eq i8 %v2_10da8, 45
  br i1 %v7_10dc8, label %dec_label_pc_10ea8, label %dec_label_pc_10dd0

dec_label_pc_10dd0:                               ; preds = %dec_label_pc_10dc8
  %v7_10dd0 = icmp eq i8 %v2_10da8, 43
  br i1 %v7_10dd0, label %bb48, label %dec_label_pc_10de0

bb48:                                             ; preds = %dec_label_pc_10dd0
  %v2_10dd4 = inttoptr i32 %v5_10da8 to i8*
  %v3_10dd4 = load i8, i8* %v2_10dd4, align 1
  %v4_10dd4 = zext i8 %v3_10dd4 to i32
  store i32 %v4_10dd4, i32* %r4.global-to-local, align 4
  %v6_10dd4 = add i32 %v0_10da8, 2
  store i32 %v6_10dd4, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10de0

dec_label_pc_10de0:                               ; preds = %bb48, %dec_label_pc_10dd0, %dec_label_pc_10ea8
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_10ea8 ], [ 2147483647, %dec_label_pc_10dd0 ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_10ea8 ], [ 0, %dec_label_pc_10dd0 ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_10de8 = call i32 @function_112fc(i32 %storemerge1, i32 %arg2)
  %v0_10dec = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10dec, i32* @r1, align 4
  store i32 %v2_10de8, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_10df8 = call i32 @function_111ec()
  store i32 %v0_10df8, i32* @lr, align 4
  %v0_10e08.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10e08

dec_label_pc_10e08:                               ; preds = %.thread8, %dec_label_pc_10de0
  %v2_10e8411 = phi i32 [ %v1_10ea026, %.thread8 ], [ 0, %dec_label_pc_10de0 ]
  %v1_10e60 = phi i32 [ %v0_10e9424, %.thread8 ], [ 0, %dec_label_pc_10de0 ]
  %v1_10e48 = phi i32 [ %v3_10e8c, %.thread8 ], [ %v0_10e08.pre, %dec_label_pc_10de0 ]
  %v1_10e08 = urem i32 %v1_10e48, 256
  %v1_10e0c = add nsw i32 %v1_10e08, -48
  %v1_10e14 = add nsw i32 %v1_10e08, -97
  %v1_10e18 = add i32 %v1_10e48, -48
  %v1_10e1c = add nsw i32 %v1_10e08, -65
  %tmp71 = icmp ult i32 %v1_10e0c, 10
  br i1 %tmp71, label %dec_label_pc_10e4c, label %dec_label_pc_10e24

dec_label_pc_10e24:                               ; preds = %dec_label_pc_10e08
  %v2_10e24 = icmp ugt i32 %v1_10e1c, 24
  %v7_10e24 = icmp eq i32 %v1_10e1c, 25
  %v2_10e28 = xor i1 %v7_10e24, true
  %v3_10e28 = and i1 %v2_10e24, %v2_10e28
  br i1 %v3_10e28, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_10e24
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_10e24, %bb49
  %v0_10e3c20 = phi i32 [ %v1_10e18, %dec_label_pc_10e24 ], [ 0, %bb49 ]
  %v2_10e2c = xor i1 %v2_10e24, true
  %v3_10e2c = or i1 %v7_10e24, %v2_10e2c
  br i1 %v3_10e2c, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_10e3c = phi i32 [ %v0_10e3c20, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_10e28, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_10e34 = icmp ugt i32 %v1_10e14, 24
  %v11_10e34 = icmp eq i32 %v1_10e14, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_10e38 = phi i1 [ %v7_10e24, %bb52 ], [ %v11_10e34, %bb53 ]
  %v0_10e38 = phi i1 [ %v2_10e24, %bb52 ], [ %v6_10e34, %bb53 ]
  %v2_10e38 = xor i1 %v1_10e38, true
  %v3_10e38 = and i1 %v0_10e38, %v2_10e38
  br i1 %v3_10e38, label %dec_label_pc_10e94, label %dec_label_pc_10e3c

dec_label_pc_10e3c:                               ; preds = %bb54
  %v2_10e3c = icmp eq i32 %v0_10e3c, 0
  %. = select i1 %v2_10e3c, i32 87, i32 55
  %v2_10e48 = sub i32 %v1_10e48, %.
  br label %dec_label_pc_10e4c

dec_label_pc_10e4c:                               ; preds = %dec_label_pc_10e08, %dec_label_pc_10e3c
  %v0_10e6034 = phi i32 [ %v1_10e1c, %dec_label_pc_10e08 ], [ %., %dec_label_pc_10e3c ]
  %v3_10e8412 = phi i32 [ %v1_10e18, %dec_label_pc_10e08 ], [ %v2_10e48, %dec_label_pc_10e3c ]
  %v1_10e4c = load i32, i32* %r6.global-to-local, align 4
  %v6_10e50 = icmp slt i32 %v3_10e8412, %v1_10e4c
  br i1 %v6_10e50, label %dec_label_pc_10e54, label %dec_label_pc_10e94

dec_label_pc_10e54:                               ; preds = %dec_label_pc_10e4c
  %v3_10e54 = icmp uge i32 %v2_10e8411, %v0_10df8
  %v9_10e54 = icmp eq i32 %v2_10e8411, %v0_10df8
  %v2_10e58 = xor i1 %v3_10e54, true
  %v3_10e58 = or i1 %v9_10e54, %v2_10e58
  br i1 %v3_10e58, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_10e54
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_10e54, %bb57
  %v0_10e6033 = phi i32 [ %v0_10e6034, %dec_label_pc_10e54 ], [ 0, %bb57 ]
  %v2_10e5c = xor i1 %v9_10e54, true
  %v3_10e5c = and i1 %v3_10e54, %v2_10e5c
  br i1 %v3_10e5c, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_10e60 = phi i32 [ %v0_10e6033, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_10e60, 0
  %v4_10e60 = zext i1 %tmp72 to i32
  %v5_10e60 = or i32 %v0_10e60, %v4_10e60
  %v7_10e60 = icmp eq i32 %v5_10e60, 0
  br i1 %v7_10e60, label %dec_label_pc_10e6c, label %.thread8

dec_label_pc_10e6c:                               ; preds = %bb60
  %v1_10e78 = load i32, i32* %r8.global-to-local, align 4
  %v7_10e7c = icmp sgt i32 %v3_10e8412, %v1_10e78
  br i1 %v7_10e7c, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_10e6c
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_10e6c
  %v2_10e80 = icmp eq i1 %v9_10e54, false
  br i1 %v2_10e80, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_10e8413 = mul i32 %v1_10e4c, %v2_10e8411
  %v5_10e8414 = add i32 %v4_10e8413, %v3_10e8412
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_10ea026 = phi i32 [ %v2_10e8411, %bb63 ], [ %v2_10e8411, %bb60 ], [ %v5_10e8414, %bb64 ]
  %v0_10e9424 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_10e8c = load i32, i32* %r5.global-to-local, align 4
  %v1_10e8c = inttoptr i32 %v0_10e8c to i8*
  %v2_10e8c = load i8, i8* %v1_10e8c, align 1
  %v3_10e8c = zext i8 %v2_10e8c to i32
  store i32 %v3_10e8c, i32* %r4.global-to-local, align 4
  %v5_10e8c = add i32 %v0_10e8c, 1
  store i32 %v5_10e8c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10e08

dec_label_pc_10e94:                               ; preds = %dec_label_pc_10e4c, %bb54
  %v1_10e94 = icmp slt i32 %v1_10e60, 0
  %v0_10eb8 = load i32, i32* %sl.global-to-local, align 4
  %v2_10eb8 = icmp eq i32 %v0_10eb8, 0
  br i1 %v1_10e94, label %dec_label_pc_10eb8, label %dec_label_pc_10e9c

dec_label_pc_10e9c:                               ; preds = %dec_label_pc_10e94
  br i1 %v2_10eb8, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_10e9c
  %v2_10ea0 = sub i32 0, %v2_10e8411
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_10e9c, %bb65
  %v23_10ea4 = phi i32 [ %v2_10e8411, %dec_label_pc_10e9c ], [ %v2_10ea0, %bb65 ]
  %v2_10ea4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10ea4, i32* @r4, align 4
  ret i32 %v23_10ea4

dec_label_pc_10ea8:                               ; preds = %dec_label_pc_10dc8
  %v1_10ea8 = inttoptr i32 %v5_10da8 to i8*
  %v2_10ea8 = load i8, i8* %v1_10ea8, align 1
  %v3_10ea8 = zext i8 %v2_10ea8 to i32
  store i32 %v3_10ea8, i32* %r4.global-to-local, align 4
  %v5_10ea8 = add i32 %v0_10da8, 2
  store i32 %v5_10ea8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10de0

dec_label_pc_10eb8:                               ; preds = %dec_label_pc_10e94
  %.70 = select i1 %v2_10eb8, i32 2147483647, i32 -2147483648
  %v2_10ec4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_10ec4, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_10e8c, { 1, 0 }
  uselistorder i1 %v9_10e54, { 1, 0, 2 }
  uselistorder i1 %v3_10e54, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_10e24, { 1, 2, 0 }
  uselistorder i1 %v2_10e24, { 1, 0, 2 }
  uselistorder i32 %v1_10e08, { 1, 2, 0 }
  uselistorder i32 %v1_10e48, { 1, 2, 0 }
  uselistorder i32 %v1_10e60, { 1, 0 }
  uselistorder i32 %v2_10e8411, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_10df8, { 1, 0, 2 }
  uselistorder i32 %v5_10da8, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_10da8, { 1, 0 }
  uselistorder i32 %v0_10da8, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 4, 5, 2, 0, 1, 3 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_10e4c, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_10de0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10da8, { 1, 2, 0, 3 }
}

define i32 @function_10ec8(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10ec8:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10ec8 = load i32, i32* @r4, align 4
  store i32 %v3_10ec8, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10ee0

dec_label_pc_10ee0:                               ; preds = %dec_label_pc_10f0c.dec_label_pc_10ee0_crit_edge, %dec_label_pc_10ec8
  %v0_10ee4 = phi i32 [ %v0_10ee4.pre, %dec_label_pc_10f0c.dec_label_pc_10ee0_crit_edge ], [ %arg3, %dec_label_pc_10ec8 ]
  %v0_10ee0 = phi i32 [ %v1_10ef8, %dec_label_pc_10f0c.dec_label_pc_10ee0_crit_edge ], [ %tmp, %dec_label_pc_10ec8 ]
  %tmp12 = inttoptr i32 %v0_10ee0 to i32*
  %v5_10eec = call i32 @function_1173c(i32 %v0_10ee4, i32* %tmp12, i32 1)
  %v7_10ef0 = icmp eq i32 %v5_10eec, 1
  %v0_10ef4 = load i32, i32* @r4, align 4
  %v1_10ef8 = add i32 %v0_10ef4, 1
  store i32 %v1_10ef8, i32* @r4, align 4
  %v0_10f00 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_10ef0, label %dec_label_pc_10f00, label %dec_label_pc_10f18

dec_label_pc_10f00:                               ; preds = %dec_label_pc_10ee0
  %v1_10f00 = add i32 %v0_10f00, 1
  store i32 %v1_10f00, i32* %r5.global-to-local, align 4
  %v0_10f04 = load i32, i32* %r7.global-to-local, align 4
  %v7_10f08 = icmp sgt i32 %v0_10f04, %v1_10f00
  br i1 %v7_10f08, label %dec_label_pc_10f0c, label %dec_label_pc_10f18

dec_label_pc_10f0c:                               ; preds = %dec_label_pc_10f00
  %v1_10f0c = inttoptr i32 %v0_10ef4 to i8*
  %v2_10f0c = load i8, i8* %v1_10f0c, align 1
  %v7_10f10 = icmp eq i8 %v2_10f0c, 10
  br i1 %v7_10f10, label %dec_label_pc_10f18, label %dec_label_pc_10f0c.dec_label_pc_10ee0_crit_edge

dec_label_pc_10f0c.dec_label_pc_10ee0_crit_edge:  ; preds = %dec_label_pc_10f0c
  %v0_10ee4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10ee0

dec_label_pc_10f18:                               ; preds = %dec_label_pc_10ee0, %dec_label_pc_10f0c, %dec_label_pc_10f00
  %v0_10f18 = phi i32 [ %v1_10f00, %dec_label_pc_10f0c ], [ %v1_10f00, %dec_label_pc_10f00 ], [ %v0_10f00, %dec_label_pc_10ee0 ]
  %v2_10f18 = icmp eq i32 %v0_10f18, 0
  %v1_10f1c = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_10f18, i32 0, i32 %v1_10f1c
  %v2_10f24 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10f24, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10ef8, { 1, 0 }
  uselistorder i8 10, { 2, 0, 3, 1 }
  uselistorder i32 (i32, i32*, i32)* @function_1173c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10f18, { 1, 2, 0 }
}

define i32 @function_10f28() local_unnamed_addr {
dec_label_pc_10f28:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_10f28 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_10f38 = call i32 @function_11b48()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_10f40 = inttoptr i32 %v0_10f38 to i32*
  store i32 0, i32* %v2_10f40, align 4
  %v0_10f4c = load i32, i32* %r6.global-to-local, align 4
  %v3_10f50 = call i32 @function_11e8c(i32 2, i32 2, i32 %v0_10f4c)
  %v7_10f5c = icmp eq i32 %v3_10f50, -1
  store i32 %v3_10f50, i32* %r5.global-to-local, align 4
  %v2_10f68 = load i32, i32* @r4, align 4
  br i1 %v7_10f5c, label %dec_label_pc_10fb8, label %dec_label_pc_10f7c

dec_label_pc_10f7c:                               ; preds = %dec_label_pc_10f28
  %v7_10f68 = shl i32 2056, %v2_10f68
  %v8_10f68 = or i32 %v7_10f68, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_10f98 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_10f98 = call i32 @function_11ce8(i32 %v3_10f50, %sockaddr* %v3_10f98, i32 %v2_10f68)
  %v2_10fa0 = ptrtoint i32* %stack_var_-24 to i32
  %v0_10fa4 = load i32, i32* %r5.global-to-local, align 4
  %v4_10fa8 = call i32 @function_11d14(i32 %v0_10fa4, %sockaddr* %v3_10f98, i32 %v2_10fa0)
  %v1_10fb0 = call i32 @function_11574(i32 %v0_10fa4)
  br label %dec_label_pc_10fb8

dec_label_pc_10fb8:                               ; preds = %dec_label_pc_10f28, %dec_label_pc_10f7c
  %v0_10fb8 = phi i32 [ %v0_10f4c, %dec_label_pc_10f28 ], [ %v8_10f68, %dec_label_pc_10f7c ]
  store i32 %v3_10f28, i32* @r4, align 4
  ret i32 %v0_10fb8

; uselistorder directives
  uselistorder i32 %v3_10f50, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_11ce8, { 1, 0, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11e8c, { 21, 22, 19, 20, 18, 3, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_10fb8, { 1, 0 }
}

define i32 @function_10fc4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10fc4:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_10fc8 = load i8, i8* %tmp, align 1
  %v2_10fcc = icmp eq i8 %v3_10fc8, 0
  br i1 %v2_10fcc, label %bb, label %dec_label_pc_10fe0

bb:                                               ; preds = %dec_label_pc_10fc4
  %v4_10fc8 = zext i8 %v3_10fc8 to i32
  br label %dec_label_pc_10ff4

dec_label_pc_10fe0:                               ; preds = %dec_label_pc_10fc4
  br label %dec_label_pc_10fe4

dec_label_pc_10fe4:                               ; preds = %dec_label_pc_10fe4, %dec_label_pc_10fe0
  %v0_10fe4 = phi i32 [ %v1_10fe4, %dec_label_pc_10fe4 ], [ 0, %dec_label_pc_10fe0 ]
  %v1_10fe4 = add i32 %v0_10fe4, 1
  %v2_10fe8 = add i32 %v1_10fe4, %arg2
  %v3_10fe8 = inttoptr i32 %v2_10fe8 to i8*
  %v4_10fe8 = load i8, i8* %v3_10fe8, align 1
  %v2_10fec = icmp eq i8 %v4_10fe8, 0
  br i1 %v2_10fec, label %dec_label_pc_10ff4, label %dec_label_pc_10fe4

dec_label_pc_10ff4:                               ; preds = %dec_label_pc_10fe4, %bb
  %v0_1103818 = phi i32 [ %v4_10fc8, %bb ], [ %v1_10fe4, %dec_label_pc_10fe4 ]
  %v0_10ffc1 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_10ffc1, 1
  br i1 %tmp27, label %dec_label_pc_11048, label %dec_label_pc_11008

dec_label_pc_11008:                               ; preds = %dec_label_pc_10ff4, %dec_label_pc_10ffc.backedge
  %v0_11000.in = phi i32 [ %v0_11000, %dec_label_pc_10ffc.backedge ], [ %v0_10ffc1, %dec_label_pc_10ff4 ]
  %v0_1102c = phi i32 [ %v1_1102c., %dec_label_pc_10ffc.backedge ], [ 0, %dec_label_pc_10ff4 ]
  %v0_11008 = phi i32 [ %v5_11008, %dec_label_pc_10ffc.backedge ], [ %tmp20, %dec_label_pc_10ff4 ]
  %v0_11000 = add i32 %v0_11000.in, -1
  %v1_11008 = inttoptr i32 %v0_11008 to i8*
  %v2_11008 = load i8, i8* %v1_11008, align 1
  %v3_11008 = zext i8 %v2_11008 to i32
  store i32 %v3_11008, i32* @lr, align 4
  %v5_11008 = add i32 %v0_11008, 1
  %v2_1100c = add i32 %v0_1102c, %arg2
  %v3_1100c = inttoptr i32 %v2_1100c to i8*
  %v4_1100c = load i8, i8* %v3_1100c, align 1
  %v6_1100c = zext i8 %v4_1100c to i32
  %v1_11010 = add nsw i32 %v3_11008, -65
  %v1_11014 = add nsw i32 %v6_1100c, -65
  %tmp35 = icmp ult i32 %v1_11010, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_11008
  %v5_1101c = or i32 %v3_11008, 96
  store i32 %v5_1101c, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_11008, %bb28
  %v0_11028 = phi i32 [ %v3_11008, %dec_label_pc_11008 ], [ %v5_1101c, %bb28 ]
  %tmp36 = icmp ult i32 %v1_11014, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_11024 = or i32 %v6_1100c, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_11028 = phi i32 [ %v6_1100c, %bb29 ], [ %v5_11024, %bb30 ]
  %v9_11028 = icmp eq i32 %v0_11028, %v1_11028
  %v1_1102c = add i32 %v0_1102c, 1
  %v1_1102c. = select i1 %v9_11028, i32 %v1_1102c, i32 0
  br i1 %v9_11028, label %dec_label_pc_11038, label %dec_label_pc_10ffc.backedge

dec_label_pc_10ffc.backedge:                      ; preds = %bb31, %dec_label_pc_11038
  %tmp32 = icmp slt i32 %v0_11000, 1
  br i1 %tmp32, label %dec_label_pc_11048, label %dec_label_pc_11008

dec_label_pc_11038:                               ; preds = %bb31
  %v9_11038 = icmp eq i32 %v0_1103818, %v1_1102c.
  br i1 %v9_11038, label %dec_label_pc_11040, label %dec_label_pc_10ffc.backedge

dec_label_pc_11040:                               ; preds = %dec_label_pc_11038
  %v2_11040 = sub i32 %v5_11008, %tmp20
  ret i32 %v2_11040

dec_label_pc_11048:                               ; preds = %dec_label_pc_10ffc.backedge, %dec_label_pc_10ff4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_1102c., { 1, 0 }
  uselistorder i32 %v0_11008, { 1, 0 }
  uselistorder i32 %v0_1102c, { 1, 0 }
  uselistorder i8 %v3_10fc8, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_10ffc.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_11008, { 1, 0 }
}

define i32 @function_11050(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11050:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_11050 = load i8, i8* %arg1, align 1
  %v2_11054 = icmp eq i8 %v2_11050, 0
  br i1 %v2_11054, label %bb, label %dec_label_pc_11060

bb:                                               ; preds = %dec_label_pc_11050
  %v3_11050 = zext i8 %v2_11050 to i32
  br label %dec_label_pc_11074

dec_label_pc_11060:                               ; preds = %dec_label_pc_11050
  br label %dec_label_pc_11064

dec_label_pc_11064:                               ; preds = %dec_label_pc_11064, %dec_label_pc_11060
  %v0_11064 = phi i32 [ %v1_11064, %dec_label_pc_11064 ], [ 0, %dec_label_pc_11060 ]
  %v1_11064 = add i32 %v0_11064, 1
  %v2_11068 = add i32 %v1_11064, %tmp
  %v3_11068 = inttoptr i32 %v2_11068 to i8*
  %v4_11068 = load i8, i8* %v3_11068, align 1
  %v2_1106c = icmp eq i8 %v4_11068, 0
  br i1 %v2_1106c, label %dec_label_pc_11074, label %dec_label_pc_11064

dec_label_pc_11074:                               ; preds = %dec_label_pc_11064, %bb
  %v0_11098 = phi i32 [ %v3_11050, %bb ], [ %v1_11064, %dec_label_pc_11064 ]
  %v1_11074 = inttoptr i32 %arg2 to i8*
  %v2_11074 = load i8, i8* %v1_11074, align 1
  %v3_11074 = zext i8 %v2_11074 to i32
  %v2_11078 = icmp eq i8 %v2_11074, 0
  br i1 %v2_11078, label %bb22, label %dec_label_pc_11084

bb22:                                             ; preds = %dec_label_pc_11074
  store i32 %v3_11074, i32* @r2, align 4
  br label %dec_label_pc_11098

dec_label_pc_11084:                               ; preds = %dec_label_pc_11074
  br label %dec_label_pc_11088

dec_label_pc_11088:                               ; preds = %dec_label_pc_11088, %dec_label_pc_11084
  %v0_11088 = phi i32 [ %v1_11088, %dec_label_pc_11088 ], [ 0, %dec_label_pc_11084 ]
  %v1_11088 = add i32 %v0_11088, 1
  store i32 %v1_11088, i32* @r2, align 4
  %v2_1108c = add i32 %v1_11088, %arg2
  %v3_1108c = inttoptr i32 %v2_1108c to i8*
  %v4_1108c = load i8, i8* %v3_1108c, align 1
  %v2_11090 = icmp eq i8 %v4_1108c, 0
  br i1 %v2_11090, label %dec_label_pc_11098, label %dec_label_pc_11088

dec_label_pc_11098:                               ; preds = %dec_label_pc_11088, %bb22
  %v0_110c44 = phi i32 [ %v3_11074, %bb22 ], [ %v1_11088, %dec_label_pc_11088 ]
  %v9_11098 = icmp eq i32 %v0_11098, %v0_110c44
  br i1 %v9_11098, label %dec_label_pc_110c4.preheader, label %dec_label_pc_110a4

dec_label_pc_110c4.preheader:                     ; preds = %dec_label_pc_11098
  %v2_110c46 = icmp eq i32 %v0_11098, 0
  br i1 %v2_110c46, label %dec_label_pc_110cc, label %dec_label_pc_110ac

dec_label_pc_110a4:                               ; preds = %dec_label_pc_110ac, %dec_label_pc_11098
  ret i32 0

dec_label_pc_110ac:                               ; preds = %dec_label_pc_110bc, %dec_label_pc_110c4.preheader
  %v0_110c4.in = phi i32 [ %v0_110c4, %dec_label_pc_110bc ], [ %v0_11098, %dec_label_pc_110c4.preheader ]
  %v0_110c0 = phi i32 [ %v1_110c0, %dec_label_pc_110bc ], [ %arg2, %dec_label_pc_110c4.preheader ]
  %v0_110bc = phi i32 [ %v1_110bc, %dec_label_pc_110bc ], [ %tmp, %dec_label_pc_110c4.preheader ]
  %v0_110c4 = add i32 %v0_110c4.in, -1
  %v1_110ac = inttoptr i32 %v0_110bc to i8*
  %v2_110ac = load i8, i8* %v1_110ac, align 1
  %v3_110ac = zext i8 %v2_110ac to i32
  store i32 %v3_110ac, i32* @r2, align 4
  %v1_110b0 = inttoptr i32 %v0_110c0 to i8*
  %v2_110b0 = load i8, i8* %v1_110b0, align 1
  %v9_110b4 = icmp eq i8 %v2_110ac, %v2_110b0
  br i1 %v9_110b4, label %dec_label_pc_110bc, label %dec_label_pc_110a4

dec_label_pc_110bc:                               ; preds = %dec_label_pc_110ac
  %v1_110bc = add i32 %v0_110bc, 1
  %v1_110c0 = add i32 %v0_110c0, 1
  %v2_110c4 = icmp eq i32 %v0_110c4, 0
  br i1 %v2_110c4, label %dec_label_pc_110cc, label %dec_label_pc_110ac

dec_label_pc_110cc:                               ; preds = %dec_label_pc_110bc, %dec_label_pc_110c4.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_11088, { 0, 1, 3, 2 }
  uselistorder i8 %v2_11050, { 1, 0 }
}

define i32 @function_110d4(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_110d4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_110d4 = load i32, i32* @r4, align 4
  store i32 %v3_110d4, i32* %stack_var_-28, align 4
  %v22_110d4 = ptrtoint i32* %stack_var_-28 to i32
  %v0_110d8 = load i32, i32* @r2, align 4
  store i32 %v0_110d8, i32* %r8.global-to-local, align 4
  %v2_110d8 = icmp eq i32 %v0_110d8, 0
  store i1 %v2_110d8, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_110d8, label %dec_label_pc_111c8, label %dec_label_pc_110e8

dec_label_pc_110e8:                               ; preds = %dec_label_pc_110d4
  %v3_110e8 = icmp eq i8 %arg1, 0
  store i1 %v3_110e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_110e8, label %.thread, label %dec_label_pc_110fc

.thread:                                          ; preds = %dec_label_pc_110e8
  %v4_110f0 = inttoptr i32 %v0_110d8 to i8*
  store i8 48, i8* %v4_110f0, align 1
  %v0_110f4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_110f4.pr.pr, label %.thread1, label %dec_label_pc_110fc

.thread1:                                         ; preds = %.thread
  %v4_110f4 = load i32, i32* %r8.global-to-local, align 4
  %v5_110f4 = add i32 %v4_110f4, 1
  %v6_110f4 = inttoptr i32 %v5_110f4 to i8*
  store i8 0, i8* %v6_110f4, align 1
  %v0_110f8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_110f8.pr.pr, label %dec_label_pc_111c8, label %dec_label_pc_110fc

dec_label_pc_110fc:                               ; preds = %dec_label_pc_110e8, %.thread, %.thread1
  %v7_11100 = icmp eq i32 %arg2, 10
  store i1 %v7_11100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11100, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_110fc
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_110fc
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_11124

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11134

dec_label_pc_11124:                               ; preds = %bb
  %v2_11124 = sub nsw i32 0, %tmp
  store i32 %v2_11124, i32* %r4.global-to-local, align 4
  store i1 %v3_110e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_110e8, label %dec_label_pc_111d4, label %dec_label_pc_11134

dec_label_pc_11134:                               ; preds = %dec_label_pc_11124, %.thread4
  %v0_1113c10 = phi i32 [ %tmp, %.thread4 ], [ %v2_11124, %dec_label_pc_11124 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_11124 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_11138 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_11138, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1113c

dec_label_pc_1113c:                               ; preds = %bb37, %dec_label_pc_11134
  %v0_1113c = phi i32 [ %v0_11160, %bb37 ], [ %v0_1113c10, %dec_label_pc_11134 ]
  store i32 %v0_1113c, i32* %r0.global-to-local, align 4
  %v0_11140 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11140, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_1113c, 16777216
  %v1_11144 = sdiv i32 %sext, 16777216
  %v3_11144 = call i32 @function_112fc(i32 %v1_11144, i32 %v0_11140)
  store i32 %v3_11144, i32* %r0.global-to-local, align 4
  %v7_11148 = icmp eq i32 %v3_11144, 9
  store i1 %v7_11148, i1* %cpsr_z.global-to-local, align 1
  %v1_1114c = add i32 %v3_11144, 48
  %v0_11150 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11150, i32* @r1, align 4
  %v7_11154 = icmp sgt i32 %v3_11144, 9
  %extract.t = trunc i32 %v1_1114c to i8
  br i1 %v7_11154, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_1113c
  %v9_11154 = add i32 %v3_11144, 55
  %extract.t20 = trunc i32 %v9_11154 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_1113c, %bb36
  %v0_1115c.off0 = phi i8 [ %extract.t, %dec_label_pc_1113c ], [ %extract.t20, %bb36 ]
  %v0_11158 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11158, i32* @r0, align 4
  %v2_1115c = load i32, i32* %r7.global-to-local, align 4
  %v3_1115c = inttoptr i32 %v2_1115c to i8*
  store i8 %v0_1115c.off0, i8* %v3_1115c, align 1
  %v4_1115c = load i32, i32* %r7.global-to-local, align 4
  %v5_1115c = add i32 %v4_1115c, -1
  store i32 %v5_1115c, i32* %r7.global-to-local, align 4
  %v0_11160 = call i32 @function_111ec()
  store i32 %v0_11160, i32* %r0.global-to-local, align 4
  store i32 %v0_11160, i32* %r4.global-to-local, align 4
  %v2_11164 = icmp eq i32 %v0_11160, 0
  store i1 %v2_11164, i1* %cpsr_z.global-to-local, align 1
  %v0_11168 = load i32, i32* %r6.global-to-local, align 4
  %v1_11168 = add i32 %v0_11168, -1
  store i32 %v1_11168, i32* %r6.global-to-local, align 4
  br i1 %v2_11164, label %dec_label_pc_11170, label %dec_label_pc_1113c

dec_label_pc_11170:                               ; preds = %bb37
  %v0_11170 = load i32, i32* %sl.global-to-local, align 4
  %v2_11170 = icmp eq i32 %v0_11170, 0
  store i1 %v2_11170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11170, label %bb38, label %dec_label_pc_111d8

bb38:                                             ; preds = %dec_label_pc_11170
  store i32 %v0_11168, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1117c

dec_label_pc_1117c:                               ; preds = %bb38, %dec_label_pc_111d8
  %v1_11188 = phi i32 [ %v0_11168, %bb38 ], [ %v1_11180.pre, %dec_label_pc_111d8 ]
  %v2_1117c = ptrtoint i32* %stack_var_-62 to i32
  %v2_11180 = add i32 %v1_11188, %v2_1117c
  %v3_11180 = inttoptr i32 %v2_11180 to i8*
  %v4_11180 = load i8, i8* %v3_11180, align 1
  %v6_11180 = zext i8 %v4_11180 to i32
  %v2_11184 = icmp eq i8 %v4_11180, 0
  store i1 %v2_11184, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_11180, i32* %r1.global-to-local, align 4
  br i1 %v2_11184, label %dec_label_pc_111ac, label %dec_label_pc_11190

dec_label_pc_11190:                               ; preds = %dec_label_pc_1117c
  br label %dec_label_pc_11194

dec_label_pc_11194:                               ; preds = %dec_label_pc_11194, %dec_label_pc_11190
  %v0_11194 = phi i32 [ %v1_11194, %dec_label_pc_11194 ], [ 0, %dec_label_pc_11190 ]
  %v1_11194 = add i32 %v0_11194, 1
  store i32 %v1_11194, i32* @r2, align 4
  %v2_11198 = add i32 %v1_11194, %v2_11180
  %v3_11198 = inttoptr i32 %v2_11198 to i8*
  %v4_11198 = load i8, i8* %v3_11198, align 1
  %v2_1119c = icmp eq i8 %v4_11198, 0
  store i1 %v2_1119c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1119c, label %dec_label_pc_111a4, label %dec_label_pc_11194

dec_label_pc_111a4:                               ; preds = %dec_label_pc_11194
  %v7_111a4 = icmp eq i32 %v0_11194, -2
  store i1 %v7_111a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_111a4, label %dec_label_pc_111c8, label %dec_label_pc_111ac

dec_label_pc_111ac:                               ; preds = %dec_label_pc_111a4, %dec_label_pc_1117c
  %v0_111b417 = phi i32 [ %v1_11194, %dec_label_pc_111a4 ], [ %v6_11180, %dec_label_pc_1117c ]
  store i32 %v2_11180, i32* %r0.global-to-local, align 4
  %v0_111b0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_111b0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_111b4

dec_label_pc_111b4:                               ; preds = %dec_label_pc_111b4.dec_label_pc_111b4_crit_edge, %dec_label_pc_111ac
  %v2_111c0 = phi i32 [ %v5_111c0, %dec_label_pc_111b4.dec_label_pc_111b4_crit_edge ], [ %v0_111b0, %dec_label_pc_111ac ]
  %v0_111b8 = phi i32 [ %v0_111b8.pre, %dec_label_pc_111b4.dec_label_pc_111b4_crit_edge ], [ %v2_11180, %dec_label_pc_111ac ]
  %v0_111b4 = phi i32 [ %v0_111b4.pre, %dec_label_pc_111b4.dec_label_pc_111b4_crit_edge ], [ %v0_111b417, %dec_label_pc_111ac ]
  %v1_111b4 = add i32 %v0_111b4, -1
  store i32 %v1_111b4, i32* @r2, align 4
  %v1_111b8 = inttoptr i32 %v0_111b8 to i8*
  %v2_111b8 = load i8, i8* %v1_111b8, align 1
  %v5_111b8 = add i32 %v0_111b8, 1
  store i32 %v5_111b8, i32* %r0.global-to-local, align 4
  %v3_111bc = icmp eq i32 %v0_111b4, 0
  store i1 %v3_111bc, i1* %cpsr_z.global-to-local, align 1
  %v3_111c0 = inttoptr i32 %v2_111c0 to i8*
  store i8 %v2_111b8, i8* %v3_111c0, align 1
  %v4_111c0 = load i32, i32* %r1.global-to-local, align 4
  %v5_111c0 = add i32 %v4_111c0, 1
  store i32 %v5_111c0, i32* %r1.global-to-local, align 4
  br i1 %v3_111bc, label %dec_label_pc_111c8, label %dec_label_pc_111b4.dec_label_pc_111b4_crit_edge

dec_label_pc_111b4.dec_label_pc_111b4_crit_edge:  ; preds = %dec_label_pc_111b4
  %v0_111b4.pre = load i32, i32* @r2, align 4
  %v0_111b8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_111b4

dec_label_pc_111c8:                               ; preds = %dec_label_pc_111b4, %dec_label_pc_111a4, %.thread1, %dec_label_pc_110d4
  %v0_111c8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_111c8, i32* %r0.global-to-local, align 4
  %v2_111d0 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_111d0, i32* @r4, align 4
  ret i32 %v0_111c8

dec_label_pc_111d4:                               ; preds = %dec_label_pc_11124
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_111d8

dec_label_pc_111d8:                               ; preds = %dec_label_pc_11170, %dec_label_pc_111d4
  %v1_111dc = phi i32 [ %v1_11168, %dec_label_pc_11170 ], [ 32, %dec_label_pc_111d4 ]
  %v2_111dc = add i32 %v1_111dc, %v22_110d4
  %v3_111e4 = add i32 %v2_111dc, -34
  %v4_111e4 = inttoptr i32 %v3_111e4 to i8*
  store i8 45, i8* %v4_111e4, align 1
  %v1_11180.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1117c

; uselistorder directives
  uselistorder i32 %v5_111c0, { 1, 0 }
  uselistorder i1 %v3_111bc, { 1, 0 }
  uselistorder i32 %v0_111b8, { 1, 0 }
  uselistorder i1 %v7_111a4, { 1, 0 }
  uselistorder i32 %v1_11194, { 0, 1, 3, 2 }
  uselistorder i32 %v2_11180, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11160, { 1, 2, 3, 0 }
  uselistorder i32 %v3_11144, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_110e8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_110d8, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 9, 11, 10, 12, 13 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_111d8, { 1, 0 }
  uselistorder label %dec_label_pc_1117c, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_110fc, { 2, 1, 0 }
}

define i32 @function_111ec() local_unnamed_addr {
dec_label_pc_111ec:
  %v0_111ec = load i32, i32* @r1, align 4
  %v1_111ec = add i32 %v0_111ec, -1
  %v7_111ec = icmp eq i32 %v0_111ec, 1
  br i1 %v7_111ec, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_111ec
  %v2_111f0 = load i32, i32* @r0, align 4
  ret i32 %v2_111f0

bb82:                                             ; preds = %dec_label_pc_111ec
  %v2_111ec = icmp eq i32 %v0_111ec, 0
  br i1 %v2_111ec, label %dec_label_pc_112d4, label %dec_label_pc_111f8

dec_label_pc_111f8:                               ; preds = %bb82
  %v0_111f8 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_111f8, %v0_111ec
  br i1 %tmp, label %dec_label_pc_11200, label %dec_label_pc_1128c

dec_label_pc_11200:                               ; preds = %dec_label_pc_111f8
  %v2_11200 = and i32 %v1_111ec, %v0_111ec
  %v4_11200 = icmp eq i32 %v2_11200, 0
  br i1 %v4_11200, label %dec_label_pc_11298, label %dec_label_pc_11208

dec_label_pc_11208:                               ; preds = %dec_label_pc_11200
  %v3_11208 = icmp ult i32 %v0_111ec, 536870912
  br i1 %v3_11208, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11208
  %v4_1120c = mul i32 %v0_111ec, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11208, %.thread
  %v0_1122c.pr36.ph = phi i32 [ %v4_1120c, %.thread ], [ %v0_111ec, %dec_label_pc_11208 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11208 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_1122c.pr36 = phi i32 [ %v4_11220, %bb85 ], [ %v0_1122c.pr36.ph, %.preheader.preheader ]
  %v1_11224 = phi i32 [ %v4_11224, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_11218 = icmp ugt i32 %v0_1122c.pr36, 268435455
  br i1 %v2_11218, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_1122cthread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_1121c = icmp ult i32 %v0_1122c.pr36, %v0_111f8
  br i1 %v4_1121c, label %bb84, label %dec_label_pc_1122cthread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_11220 = and i32 %v0_1122c.pr36, 268435456
  %v3_11220 = icmp eq i32 %v2_11220, 0
  %v4_11220 = mul i32 %v0_1122c.pr36, 16
  br i1 %v3_11220, label %bb85, label %dec_label_pc_1122c.loopexit

bb85:                                             ; preds = %bb84
  %v2_11224 = and i32 %v1_11224, 268435456
  %v3_11224 = icmp eq i32 %v2_11224, 0
  %v4_11224 = mul i32 %v1_11224, 16
  br i1 %v3_11224, label %.preheader, label %dec_label_pc_1122cthread-pre-split.loopexit.loopexit

dec_label_pc_1122cthread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_1123848.ph = phi i32 [ %v1_11224, %bb83 ], [ %v4_11224, %bb85 ]
  %v0_1122c.pr38.ph = phi i32 [ %v0_1122c.pr36, %bb83 ], [ %v4_11220, %bb85 ]
  br label %dec_label_pc_1122cthread-pre-split.loopexit

dec_label_pc_1122cthread-pre-split.loopexit:      ; preds = %dec_label_pc_1122cthread-pre-split.loopexit.loopexit, %.thread2
  %v1_1123848 = phi i32 [ %v1_11224, %.thread2 ], [ %v1_1123848.ph, %dec_label_pc_1122cthread-pre-split.loopexit.loopexit ]
  %v0_1122c.pr38 = phi i32 [ %v0_1122c.pr36, %.thread2 ], [ %v0_1122c.pr38.ph, %dec_label_pc_1122cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_1122cthread-pre-split

dec_label_pc_1122cthread-pre-split:               ; preds = %dec_label_pc_1122cthread-pre-split.loopexit, %bb87
  %v1_1123846 = phi i32 [ %v1_1123848, %dec_label_pc_1122cthread-pre-split.loopexit ], [ %v3_11238, %bb87 ]
  %v0_1122c.pr = phi i32 [ %v0_1122c.pr38, %dec_label_pc_1122cthread-pre-split.loopexit ], [ %v3_11234, %bb87 ]
  br label %dec_label_pc_1122c

dec_label_pc_1122c.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_1122c

dec_label_pc_1122c:                               ; preds = %dec_label_pc_1122c.loopexit, %dec_label_pc_1122cthread-pre-split
  %v1_11238 = phi i32 [ %v1_1123846, %dec_label_pc_1122cthread-pre-split ], [ %v1_11224, %dec_label_pc_1122c.loopexit ]
  %v1_11234 = phi i32 [ %v0_1122c.pr, %dec_label_pc_1122cthread-pre-split ], [ %v4_11220, %dec_label_pc_1122c.loopexit ]
  %v2_1122c = icmp slt i32 %v1_11234, 0
  br i1 %v2_1122c, label %dec_label_pc_11240, label %bb86

bb86:                                             ; preds = %dec_label_pc_1122c
  %v4_11230 = icmp ult i32 %v1_11234, %v0_111f8
  br i1 %v4_11230, label %bb87, label %dec_label_pc_11240

bb87:                                             ; preds = %bb86
  %v3_11234 = mul i32 %v1_11234, 2
  %v2_11238 = icmp slt i32 %v1_11238, 0
  %v3_11238 = mul i32 %v1_11238, 2
  br i1 %v2_11238, label %dec_label_pc_11240, label %dec_label_pc_1122cthread-pre-split

dec_label_pc_11240:                               ; preds = %bb86, %dec_label_pc_1122c, %bb87
  %v2_1124c59 = phi i32 [ %v3_11238, %bb87 ], [ %v1_11238, %bb86 ], [ %v1_11238, %dec_label_pc_1122c ]
  %v1_1124451 = phi i32 [ %v3_11234, %bb87 ], [ %v1_11234, %bb86 ], [ %v1_11234, %dec_label_pc_1122c ]
  br label %dec_label_pc_11244

dec_label_pc_11244:                               ; preds = %.thread11, %dec_label_pc_11240
  %v1_11278 = phi i32 [ %v4_11278, %.thread11 ], [ %v2_1124c59, %dec_label_pc_11240 ]
  %v1_1124c = phi i32 [ %v0_11284, %.thread11 ], [ 0, %dec_label_pc_11240 ]
  %v1_1127c = phi i32 [ %v4_1127c, %.thread11 ], [ %v1_1124451, %dec_label_pc_11240 ]
  %v1_11248 = phi i32 [ %v0_11274, %.thread11 ], [ %v0_111f8, %dec_label_pc_11240 ]
  %v3_11244 = icmp ult i32 %v1_11248, %v1_1127c
  br i1 %v3_11244, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_11244
  %v3_11248 = sub i32 %v1_11248, %v1_1127c
  %v3_1124c = or i32 %v1_1124c, %v1_11278
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_11244, %bb88
  %v1_11254 = phi i32 [ %v1_11248, %dec_label_pc_11244 ], [ %v3_11248, %bb88 ]
  %v1_11258 = phi i32 [ %v1_1124c, %dec_label_pc_11244 ], [ %v3_1124c, %bb88 ]
  %v4_11250 = udiv i32 %v1_1127c, 2
  %v6_11250 = icmp ult i32 %v1_11254, %v4_11250
  br i1 %v6_11250, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_11254 = urem i32 %v1_1127c, 2
  %v4_11254 = icmp eq i32 %v3_11254, 0
  %v6_11254 = sub i32 %v1_11254, %v4_11250
  br i1 %v4_11254, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_11258 = udiv i32 %v1_11278, 2
  %v6_11258 = or i32 %v1_11258, %v5_11258
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_11260 = phi i32 [ %v6_11254, %bb89 ], [ %v1_11254, %.thread7 ], [ %v6_11254, %bb90 ]
  %v1_11264 = phi i32 [ %v1_11258, %bb89 ], [ %v1_11258, %.thread7 ], [ %v6_11258, %bb90 ]
  %v4_1125c = udiv i32 %v1_1127c, 4
  %v6_1125c = icmp ult i32 %v1_11260, %v4_1125c
  br i1 %v6_1125c, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_11260 = and i32 %v1_1127c, 2
  %v4_11260 = icmp eq i32 %v3_11260, 0
  %v6_11260 = sub i32 %v1_11260, %v4_1125c
  br i1 %v4_11260, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_11264 = udiv i32 %v1_11278, 4
  %v6_11264 = or i32 %v1_11264, %v5_11264
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_1126c = phi i32 [ %v6_11260, %bb91 ], [ %v1_11260, %.thread8 ], [ %v6_11260, %bb92 ]
  %v1_11270 = phi i32 [ %v1_11264, %bb91 ], [ %v1_11264, %.thread8 ], [ %v6_11264, %bb92 ]
  %v4_11268 = udiv i32 %v1_1127c, 8
  %v6_11268 = icmp ult i32 %v1_1126c, %v4_11268
  br i1 %v6_11268, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_1126c = and i32 %v1_1127c, 4
  %v4_1126c = icmp eq i32 %v3_1126c, 0
  %v6_1126c = sub i32 %v1_1126c, %v4_11268
  br i1 %v4_1126c, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_11270 = udiv i32 %v1_11278, 8
  %v6_11270 = or i32 %v1_11270, %v5_11270
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_11284 = phi i32 [ %v1_11270, %bb93 ], [ %v1_11270, %.thread9 ], [ %v6_11270, %bb94 ]
  %v0_11274 = phi i32 [ %v6_1126c, %bb93 ], [ %v1_1126c, %.thread9 ], [ %v6_1126c, %bb94 ]
  %v2_11274 = icmp eq i32 %v0_11274, 0
  br i1 %v2_11274, label %dec_label_pc_11284, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_11278, 16
  br i1 %tmp142, label %dec_label_pc_11284, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_11278 = udiv i32 %v1_11278, 16
  %v4_1127c = udiv i32 %v1_1127c, 16
  br label %dec_label_pc_11244

dec_label_pc_11284:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_11284

dec_label_pc_1128c:                               ; preds = %dec_label_pc_111f8
  %v9_111f8 = icmp eq i32 %v0_111f8, %v0_111ec
  %. = zext i1 %v9_111f8 to i32
  ret i32 %.

dec_label_pc_11298:                               ; preds = %dec_label_pc_11200
  %v2_11298 = icmp ugt i32 %v0_111ec, 65535
  br i1 %v2_11298, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_11298
  %v2_1129c = and i32 %v0_111ec, 32768
  %v3_1129c = icmp eq i32 %v2_1129c, 0
  %v4_1129c = udiv i32 %v0_111ec, 65536
  br i1 %v3_1129c, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_11298
  %v0_112a865 = phi i32 [ %v0_111ec, %dec_label_pc_11298 ], [ %v4_1129c, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_112ac = phi i32 [ %v0_112a865, %.thread16 ], [ %v4_1129c, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  %v2_112a8 = icmp ugt i32 %v1_112ac, 255
  br i1 %v2_112a8, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_112ac = and i32 %v1_112ac, 128
  %v3_112ac = icmp eq i32 %v2_112ac, 0
  %v4_112ac = udiv i32 %v1_112ac, 256
  br i1 %v3_112ac, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_112b0 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_112bc = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_112b0, %bb102 ]
  %v1_112b8 = phi i32 [ %v1_112ac, %bb100 ], [ %v4_112ac, %bb101 ], [ %v4_112ac, %bb102 ]
  %v2_112b4 = icmp ugt i32 %v1_112b8, 15
  br i1 %v2_112b4, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_112b8 = and i32 %v1_112b8, 8
  %v3_112b8 = icmp eq i32 %v2_112b8, 0
  %v4_112b8 = udiv i32 %v1_112b8, 16
  br i1 %v3_112b8, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_112bc = add nsw i32 %v1_112bc, 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_112c4 = phi i32 [ %v1_112bc, %.thread17 ], [ %v1_112bc, %bb103 ], [ %v2_112bc, %bb104 ]
  %v5_112c8 = phi i32 [ %v1_112b8, %.thread17 ], [ %v4_112b8, %bb103 ], [ %v4_112b8, %bb104 ]
  %v2_112c0 = icmp ugt i32 %v5_112c8, 3
  %v7_112c0 = icmp eq i32 %v5_112c8, 4
  %v2_112c4 = xor i1 %v7_112c0, true
  %v3_112c4 = and i1 %v2_112c0, %v2_112c4
  br i1 %v3_112c4, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_112c4 = add nsw i32 %v4_112c4, 3
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_112c8 = phi i32 [ %v4_112c4, %.thread18 ], [ %v5_112c4, %bb105 ]
  %v2_112c8 = xor i1 %v2_112c0, true
  %v3_112c8 = or i1 %v7_112c0, %v2_112c8
  br i1 %v3_112c8, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_112c8 = udiv i32 %v5_112c8, 2
  %v9_112c8 = add i32 %v4_112c8, %v8_112c8
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_112cc = phi i32 [ %v4_112c8, %bb106 ], [ %v9_112c8, %bb107 ]
  %v6_112cc = lshr i32 %v0_111f8, %v1_112cc
  ret i32 %v6_112cc

dec_label_pc_112d4:                               ; preds = %bb82
  %v0_112d4 = load i32, i32* @lr, align 4
  %v0_112d8 = call i32 @function_114ac()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_112d4)
  %v9_112e4 = load i32, i32* @lr, align 4
  %v0_112e8 = call i32 @function_111ec()
  store i32 %v9_112e4, i32* @lr, align 4
  ret i32 %v0_112e8

; uselistorder directives
  uselistorder i32 %v4_112c8, { 1, 0 }
  uselistorder i1 %v7_112c0, { 1, 0 }
  uselistorder i32 %v4_112b8, { 1, 0 }
  uselistorder i32 %v1_112b8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_112ac, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_112ac, { 1, 0, 2, 3 }
  uselistorder i32 %v4_1129c, { 1, 0 }
  uselistorder i32 %v0_11274, { 1, 0 }
  uselistorder i32 %v4_11268, { 1, 0 }
  uselistorder i32 %v1_11270, { 1, 2, 0 }
  uselistorder i32 %v4_1125c, { 1, 0 }
  uselistorder i32 %v1_11264, { 1, 2, 0 }
  uselistorder i32 %v4_11250, { 1, 0 }
  uselistorder i32 %v1_11258, { 1, 2, 0 }
  uselistorder i32 %v1_1127c, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_1124c, { 1, 0 }
  uselistorder i32 %v1_11278, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_11238, { 1, 0 }
  uselistorder i32 %v3_11234, { 1, 0 }
  uselistorder i32 %v1_11234, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_11238, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11224, { 1, 0 }
  uselistorder i32 %v4_11220, { 2, 1, 0 }
  uselistorder i32 %v1_11224, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_1122c.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_111f8, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_111ec, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 100, 0, 1, 12, 53, 27, 54, 26, 55, 25, 56, 13, 14, 2, 29, 57, 28, 58, 59, 15, 60, 3, 30, 61, 31, 62, 32, 63, 64, 4, 33, 65, 66, 16, 67, 24, 37, 68, 34, 69, 35, 70, 36, 71, 72, 17, 73, 5, 74, 75, 41, 76, 40, 77, 38, 78, 39, 79, 18, 19, 6, 80, 42, 81, 43, 82, 20, 21, 7, 83, 44, 84, 45, 85, 86, 8, 46, 87, 88, 89, 22, 90, 91, 9, 49, 92, 47, 93, 48, 94, 95, 23, 96, 10, 11, 52, 97, 50, 98, 51, 99 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_11284, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_11240, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1122cthread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_112fc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_112fc:
  store i32 %arg1, i32* @r0, align 4
  %v1_112fc = add i32 %arg2, -1
  %v2_112fc = icmp eq i32 %arg2, 0
  br i1 %v2_112fc, label %dec_label_pc_113b8, label %dec_label_pc_11304

dec_label_pc_11304:                               ; preds = %dec_label_pc_112fc
  %v7_112fc = icmp eq i32 %arg2, 1
  br i1 %v7_112fc, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_11304
  %v1_11304 = load i32, i32* @r0, align 4
  %v10_11304 = icmp eq i32 %v1_11304, %arg2
  br i1 %v10_11304, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_11304, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_11304 = icmp ult i32 %v1_11304, %arg2
  br i1 %v4_11304, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_1130c = and i32 %v1_112fc, %arg2
  %v8_1130c = icmp eq i32 %v6_1130c, 0
  br i1 %v8_1130c, label %.thread67, label %dec_label_pc_1131c.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_11310 = phi i32 [ %v1_11304, %bb75 ], [ 0, %.thread65 ]
  %v3_11310 = and i32 %v1_11310, %v1_112fc
  br label %bb76

dec_label_pc_1131c.preheader:                     ; preds = %bb75
  %v2_1131c99 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1131c99, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_113ac, %bb74, %bb89, %bb84, %dec_label_pc_1137c, %.thread67
  %v5_11314 = phi i32 [ %v1_11304, %bb74 ], [ %v3_11310, %.thread67 ], [ %v1_11358.v6_11358.v6_11360.v6_11368, %dec_label_pc_1137c ], [ 0, %bb84 ], [ %v1_113b0, %dec_label_pc_113ac ], [ %v2_113ac, %bb89 ]
  ret i32 %v5_11314

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_1131c.preheader
  %v0_11330.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_1131c.preheader ], [ %v4_11324, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_1131c.preheader ], [ %v2_1132811, %.thread1.thread9 ]
  br label %dec_label_pc_11330thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_1131c.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1132811, %.thread1.thread9 ], [ 0, %dec_label_pc_1131c.preheader ]
  %v0_11330.pr33100 = phi i32 [ %v4_11324, %.thread1.thread9 ], [ %arg2, %dec_label_pc_1131c.preheader ]
  %v4_11320 = icmp ult i32 %v0_11330.pr33100, %v1_11304
  br i1 %v4_11320, label %bb78, label %dec_label_pc_11330thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_11324 = and i32 %v0_11330.pr33100, 268435456
  %v3_11324 = icmp eq i32 %v2_11324, 0
  %v4_11324 = mul i32 %v0_11330.pr33100, 16
  br i1 %v3_11324, label %.thread1.thread9, label %dec_label_pc_11330.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1132811 = add i32 %storemerge101, 4
  %v2_1131c = icmp ugt i32 %v4_11324, 268435455
  br i1 %v2_1131c, label %.thread, label %bb77

dec_label_pc_11330thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_11330thread-pre-split.loopexit

dec_label_pc_11330thread-pre-split.loopexit:      ; preds = %dec_label_pc_11330thread-pre-split.loopexit.loopexit, %.thread
  %v0_11330.pr3398 = phi i32 [ %v0_11330.pr33.lcssa, %.thread ], [ %v0_11330.pr33100, %dec_label_pc_11330thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_11330thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11330thread-pre-split

dec_label_pc_11330thread-pre-split:               ; preds = %.thread4, %dec_label_pc_11330thread-pre-split.loopexit
  %v1_1133c39 = phi i32 [ %storemerge95, %dec_label_pc_11330thread-pre-split.loopexit ], [ %v2_1133c, %.thread4 ]
  %v0_11330.pr = phi i32 [ %v0_11330.pr3398, %dec_label_pc_11330thread-pre-split.loopexit ], [ %v3_11338, %.thread4 ]
  br label %dec_label_pc_11330

dec_label_pc_11330.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_11330

dec_label_pc_11330:                               ; preds = %dec_label_pc_11330.loopexit, %dec_label_pc_11330thread-pre-split
  %v0_11344.pr = phi i32 [ %v1_1133c39, %dec_label_pc_11330thread-pre-split ], [ %storemerge101, %dec_label_pc_11330.loopexit ]
  %v1_11338 = phi i32 [ %v0_11330.pr, %dec_label_pc_11330thread-pre-split ], [ %v4_11324, %dec_label_pc_11330.loopexit ]
  %v2_11330 = icmp slt i32 %v1_11338, 0
  br i1 %v2_11330, label %dec_label_pc_11344, label %bb79

bb79:                                             ; preds = %dec_label_pc_11330
  %v4_11334 = icmp ult i32 %v1_11338, %v1_11304
  br i1 %v4_11334, label %.thread4, label %dec_label_pc_11344

.thread4:                                         ; preds = %bb79
  %v3_11338 = mul i32 %v1_11338, 2
  %v2_1133c = add i32 %v0_11344.pr, 1
  br label %dec_label_pc_11330thread-pre-split

dec_label_pc_11344:                               ; preds = %bb79, %dec_label_pc_11330
  %v2_11344 = add i32 %v0_11344.pr, -3
  %v5_11348 = icmp slt i32 %v0_11344.pr, 3
  br i1 %v5_11348, label %dec_label_pc_11388, label %dec_label_pc_1134c

dec_label_pc_1134c:                               ; preds = %dec_label_pc_11344, %bb83
  %v6_11374 = phi i32 [ %v0_1137c, %bb83 ], [ %v2_11344, %dec_label_pc_11344 ]
  %v1_11350 = phi i32 [ %v1_11358.v6_11358.v6_11360.v6_11368, %bb83 ], [ %v1_11304, %dec_label_pc_11344 ]
  %v3_1137012 = phi i32 [ %v3_11370, %bb83 ], [ %v1_11338, %dec_label_pc_11344 ]
  %v3_1134c = icmp ult i32 %v1_11350, %v3_1137012
  %v3_11350 = select i1 %v3_1134c, i32 0, i32 %v3_1137012
  %v1_11358 = sub i32 %v1_11350, %v3_11350
  %v4_11354 = udiv i32 %v3_1137012, 2
  %v6_11354 = icmp ult i32 %v1_11358, %v4_11354
  %v6_11358 = select i1 %v6_11354, i32 0, i32 %v4_11354
  %v1_11358.v6_11358 = sub i32 %v1_11358, %v6_11358
  %.demorgan = and i1 %v3_1134c, %v6_11354
  %v4_1135c = udiv i32 %v3_1137012, 4
  %v6_1135c = icmp ult i32 %v1_11358.v6_11358, %v4_1135c
  %v6_11360 = select i1 %v6_1135c, i32 0, i32 %v4_1135c
  %v1_11358.v6_11358.v6_11360 = sub i32 %v1_11358.v6_11358, %v6_11360
  %.demorgan71 = and i1 %.demorgan, %v6_1135c
  %v4_11364 = udiv i32 %v3_1137012, 8
  %v6_11364 = icmp ult i32 %v1_11358.v6_11358.v6_11360, %v4_11364
  %v6_11368 = select i1 %v6_11364, i32 0, i32 %v4_11364
  %v1_11358.v6_11358.v6_11360.v6_11368 = sub i32 %v1_11358.v6_11358.v6_11360, %v6_11368
  %.demorgan72 = and i1 %.demorgan71, %v6_11364
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_1134c
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_1134c, %bb80
  %v2_1136c = add i32 %v1_11358.v6_11358.v6_11360.v6_11368, -1
  %v4_1136c = sub i32 0, %v1_11358.v6_11358.v6_11360.v6_11368
  %v5_1136c = and i32 %v1_11358.v6_11358.v6_11360.v6_11368, %v4_1136c
  %v3_11370 = udiv i32 %v3_1137012, 16
  %v5_11374 = icmp slt i32 %v1_11358.v6_11358.v6_11360.v6_11368, 1
  br i1 %v5_11374, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_11374 = add i32 %v6_11374, -4
  %v9_11374 = sub i32 3, %v6_11374
  %v10_11374 = and i32 %v9_11374, %v6_11374
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_1137c = phi i32 [ %v6_11374, %bb81 ], [ %v7_11374, %bb82 ]
  %v0_1137815.in = phi i32 [ %v2_1136c, %bb81 ], [ %v7_11374, %bb82 ]
  %v1_1137814.in = phi i32 [ %v5_1136c, %bb81 ], [ %v10_11374, %bb82 ]
  %v1_1137814 = icmp slt i32 %v1_1137814.in, 0
  %v0_1137815 = icmp slt i32 %v0_1137815.in, 0
  %v2_11378 = xor i1 %v0_1137815, %v1_1137814
  br i1 %v2_11378, label %dec_label_pc_1137c, label %dec_label_pc_1134c

dec_label_pc_1137c:                               ; preds = %bb83
  %v1_1137c = urem i32 %v0_1137c, 4
  %v2_1137c = icmp eq i32 %v1_1137c, 0
  br i1 %v2_1137c, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_1137c
  %v3_11380 = icmp eq i32 %v1_11358.v6_11358.v6_11360.v6_11368, 0
  br i1 %v3_11380, label %bb76, label %dec_label_pc_11388

dec_label_pc_11388:                               ; preds = %bb84, %dec_label_pc_11344
  %v0_1139c = phi i32 [ %v3_11370, %bb84 ], [ %v1_11338, %dec_label_pc_11344 ]
  %v1_11398 = phi i32 [ %v1_11358.v6_11358.v6_11360.v6_11368, %bb84 ], [ %v1_11304, %dec_label_pc_11344 ]
  %v0_11388 = phi i32 [ %v0_1137c, %bb84 ], [ %v2_11344, %dec_label_pc_11344 ]
  %v5_1138c = icmp slt i32 %v0_11388, -2
  br i1 %v5_1138c, label %dec_label_pc_113ac, label %dec_label_pc_11390

dec_label_pc_11390:                               ; preds = %dec_label_pc_11388
  %v8_11388 = icmp eq i32 %v0_11388, -2
  br i1 %v8_11388, label %dec_label_pc_113a0, label %dec_label_pc_11394

dec_label_pc_11394:                               ; preds = %dec_label_pc_11390
  %v3_11394 = icmp ult i32 %v1_11398, %v0_1139c
  br i1 %v3_11394, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_11394
  %v2_11394 = sub i32 %v1_11398, %v0_1139c
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_11394, %bb85
  %v0_113a052 = phi i32 [ %v1_11398, %dec_label_pc_11394 ], [ %v2_11394, %bb85 ]
  %v3_1139c = udiv i32 %v0_1139c, 2
  br label %dec_label_pc_113a0

dec_label_pc_113a0:                               ; preds = %dec_label_pc_11390, %bb86
  %v0_113a8 = phi i32 [ %v0_1139c, %dec_label_pc_11390 ], [ %v3_1139c, %bb86 ]
  %v1_113a4 = phi i32 [ %v1_11398, %dec_label_pc_11390 ], [ %v0_113a052, %bb86 ]
  %v3_113a0 = icmp ult i32 %v1_113a4, %v0_113a8
  br i1 %v3_113a0, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_113a0
  %v2_113a0 = sub i32 %v1_113a4, %v0_113a8
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_113a0, %bb87
  %v0_113ac55 = phi i32 [ %v1_113a4, %dec_label_pc_113a0 ], [ %v2_113a0, %bb87 ]
  %v3_113a8 = udiv i32 %v0_113a8, 2
  br label %dec_label_pc_113ac

dec_label_pc_113ac:                               ; preds = %dec_label_pc_11388, %bb88
  %v2_113b0 = phi i32 [ %v0_1139c, %dec_label_pc_11388 ], [ %v3_113a8, %bb88 ]
  %v1_113b0 = phi i32 [ %v1_11398, %dec_label_pc_11388 ], [ %v0_113ac55, %bb88 ]
  %v3_113ac = icmp ult i32 %v1_113b0, %v2_113b0
  br i1 %v3_113ac, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_113ac
  %v2_113ac = sub i32 %v1_113b0, %v2_113b0
  br label %bb76

dec_label_pc_113b8:                               ; preds = %dec_label_pc_112fc
  %v0_113b8 = load i32, i32* @lr, align 4
  %v0_113bc = call i32 @function_114ac()
  call void @__pseudo_branch(i32 %v0_113b8)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_113b0, { 1, 2, 0 }
  uselistorder i32 %v0_1139c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_1137c, { 1, 0, 2 }
  uselistorder i32 %v7_11374, { 1, 0 }
  uselistorder i32 %v3_11370, { 1, 0 }
  uselistorder i32 %v1_11358.v6_11358.v6_11360.v6_11368, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_11364, { 1, 0 }
  uselistorder i32 %v4_1135c, { 1, 0 }
  uselistorder i32 %v4_11354, { 1, 0 }
  uselistorder i32 %v6_11374, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11344, { 1, 0 }
  uselistorder i32 %v1_11338, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_11324, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11330.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11304, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_113ac, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_113a0, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_1134c, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_113c8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_113c8:
  store i32 %arg1, i32* @r0, align 4
  %v2_113c8 = icmp eq i32 %arg2, 0
  br i1 %v2_113c8, label %dec_label_pc_1149c, label %dec_label_pc_113d0

dec_label_pc_113d0:                               ; preds = %dec_label_pc_113c8
  %v1_113c8 = icmp slt i32 %arg2, 0
  br i1 %v1_113c8, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_113d0
  %v2_113d0 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_113d0, %bb
  %v4_113e8 = phi i32 [ %arg2, %dec_label_pc_113d0 ], [ %v2_113d0, %bb ]
  %v0_113d4 = load i32, i32* @r0, align 4
  %v1_113d4 = icmp slt i32 %v0_113d4, 0
  br i1 %v1_113d4, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_113d8 = sub i32 0, %v0_113d4
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_113e0 = phi i32 [ %v0_113d4, %bb79 ], [ %v2_113d8, %bb80 ]
  %v1_113dc = add i32 %v4_113e8, -1
  %v7_113dc = icmp eq i32 %v4_113e8, 1
  br i1 %v7_113dc, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_113e0 = icmp eq i32 %v1_113e0, %v4_113e8
  br i1 %v10_113e0, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_113e0 = icmp ult i32 %v1_113e0, %v4_113e8
  br i1 %v4_113e0, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_113e8 = and i32 %v1_113dc, %v4_113e8
  %v8_113e8 = icmp eq i32 %v6_113e8, 0
  br i1 %v8_113e8, label %.thread72, label %dec_label_pc_113f8.preheader

dec_label_pc_113f8.preheader:                     ; preds = %bb84
  %v2_113f8109 = icmp ugt i32 %v4_113e8, 268435455
  br i1 %v2_113f8109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_113ec64 = phi i32 [ %v1_113e0, %bb84 ], [ 0, %.thread70 ]
  %v3_113ec = and i32 %v1_113ec64, %v1_113dc
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_113f8.preheader
  %v0_1140c.pr35.lcssa = phi i32 [ %v4_113e8, %dec_label_pc_113f8.preheader ], [ %v4_11400, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_113f8.preheader ], [ %v2_114049, %.thread2.thread7 ]
  br label %dec_label_pc_1140cthread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_113f8.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_114049, %.thread2.thread7 ], [ 0, %dec_label_pc_113f8.preheader ]
  %v0_1140c.pr35110 = phi i32 [ %v4_11400, %.thread2.thread7 ], [ %v4_113e8, %dec_label_pc_113f8.preheader ]
  %v4_113fc = icmp ult i32 %v0_1140c.pr35110, %v1_113e0
  br i1 %v4_113fc, label %bb86, label %dec_label_pc_1140cthread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_11400 = and i32 %v0_1140c.pr35110, 268435456
  %v3_11400 = icmp eq i32 %v2_11400, 0
  %v4_11400 = mul i32 %v0_1140c.pr35110, 16
  br i1 %v3_11400, label %.thread2.thread7, label %dec_label_pc_1140c.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_114049 = add i32 %storemerge111, 4
  %v2_113f8 = icmp ugt i32 %v4_11400, 268435455
  br i1 %v2_113f8, label %.thread1, label %bb85

dec_label_pc_1140cthread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_1140cthread-pre-split.loopexit

dec_label_pc_1140cthread-pre-split.loopexit:      ; preds = %dec_label_pc_1140cthread-pre-split.loopexit.loopexit, %.thread1
  %v0_1140c.pr35108 = phi i32 [ %v0_1140c.pr35.lcssa, %.thread1 ], [ %v0_1140c.pr35110, %dec_label_pc_1140cthread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_1140cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_1140cthread-pre-split

dec_label_pc_1140cthread-pre-split:               ; preds = %.thread4, %dec_label_pc_1140cthread-pre-split.loopexit
  %v1_1141841 = phi i32 [ %storemerge105, %dec_label_pc_1140cthread-pre-split.loopexit ], [ %v2_11418, %.thread4 ]
  %v2_1141036 = phi i32 [ %v1_113e0, %dec_label_pc_1140cthread-pre-split.loopexit ], [ %v2_11410, %.thread4 ]
  %v0_1140c.pr = phi i32 [ %v0_1140c.pr35108, %dec_label_pc_1140cthread-pre-split.loopexit ], [ %v3_11414, %.thread4 ]
  br label %dec_label_pc_1140c

dec_label_pc_1140c.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_1140c

dec_label_pc_1140c:                               ; preds = %dec_label_pc_1140c.loopexit, %dec_label_pc_1140cthread-pre-split
  %v0_11420.pr = phi i32 [ %v1_1141841, %dec_label_pc_1140cthread-pre-split ], [ %storemerge111, %dec_label_pc_1140c.loopexit ]
  %v2_11410 = phi i32 [ %v2_1141036, %dec_label_pc_1140cthread-pre-split ], [ %v1_113e0, %dec_label_pc_1140c.loopexit ]
  %v1_11414 = phi i32 [ %v0_1140c.pr, %dec_label_pc_1140cthread-pre-split ], [ %v4_11400, %dec_label_pc_1140c.loopexit ]
  %v2_1140c = icmp slt i32 %v1_11414, 0
  br i1 %v2_1140c, label %dec_label_pc_11420, label %bb87

bb87:                                             ; preds = %dec_label_pc_1140c
  %v4_11410 = icmp ult i32 %v1_11414, %v2_11410
  br i1 %v4_11410, label %.thread4, label %dec_label_pc_11420

.thread4:                                         ; preds = %bb87
  %v3_11414 = mul i32 %v1_11414, 2
  %v2_11418 = add i32 %v0_11420.pr, 1
  br label %dec_label_pc_1140cthread-pre-split

dec_label_pc_11420:                               ; preds = %bb87, %dec_label_pc_1140c
  %v2_11420 = add i32 %v0_11420.pr, -3
  %v5_11424 = icmp slt i32 %v0_11420.pr, 3
  br i1 %v5_11424, label %dec_label_pc_11464, label %dec_label_pc_11428

dec_label_pc_11428:                               ; preds = %dec_label_pc_11420, %bb91
  %v6_11450 = phi i32 [ %v0_11458, %bb91 ], [ %v2_11420, %dec_label_pc_11420 ]
  %v1_1142c = phi i32 [ %v1_11434.v6_11434.v6_1143c.v6_11444, %bb91 ], [ %v2_11410, %dec_label_pc_11420 ]
  %v3_1144c10 = phi i32 [ %v3_1144c, %bb91 ], [ %v1_11414, %dec_label_pc_11420 ]
  %v3_11428 = icmp ult i32 %v1_1142c, %v3_1144c10
  %v3_1142c = select i1 %v3_11428, i32 0, i32 %v3_1144c10
  %v1_11434 = sub i32 %v1_1142c, %v3_1142c
  %v4_11430 = udiv i32 %v3_1144c10, 2
  %v6_11430 = icmp ult i32 %v1_11434, %v4_11430
  %v6_11434 = select i1 %v6_11430, i32 0, i32 %v4_11430
  %v1_11434.v6_11434 = sub i32 %v1_11434, %v6_11434
  %.demorgan = and i1 %v3_11428, %v6_11430
  %v4_11438 = udiv i32 %v3_1144c10, 4
  %v6_11438 = icmp ult i32 %v1_11434.v6_11434, %v4_11438
  %v6_1143c = select i1 %v6_11438, i32 0, i32 %v4_11438
  %v1_11434.v6_11434.v6_1143c = sub i32 %v1_11434.v6_11434, %v6_1143c
  %.demorgan76 = and i1 %.demorgan, %v6_11438
  %v4_11440 = udiv i32 %v3_1144c10, 8
  %v6_11440 = icmp ult i32 %v1_11434.v6_11434.v6_1143c, %v4_11440
  %v6_11444 = select i1 %v6_11440, i32 0, i32 %v4_11440
  %v1_11434.v6_11434.v6_1143c.v6_11444 = sub i32 %v1_11434.v6_11434.v6_1143c, %v6_11444
  %.demorgan77 = and i1 %.demorgan76, %v6_11440
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_11428
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_11428, %bb88
  %v2_11448 = add i32 %v1_11434.v6_11434.v6_1143c.v6_11444, -1
  %v4_11448 = sub i32 0, %v1_11434.v6_11434.v6_1143c.v6_11444
  %v5_11448 = and i32 %v1_11434.v6_11434.v6_1143c.v6_11444, %v4_11448
  %v3_1144c = udiv i32 %v3_1144c10, 16
  %v5_11450 = icmp slt i32 %v1_11434.v6_11434.v6_1143c.v6_11444, 1
  br i1 %v5_11450, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_11450 = add i32 %v6_11450, -4
  %v9_11450 = sub i32 3, %v6_11450
  %v10_11450 = and i32 %v9_11450, %v6_11450
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_11458 = phi i32 [ %v6_11450, %bb89 ], [ %v7_11450, %bb90 ]
  %v0_1145413.in = phi i32 [ %v2_11448, %bb89 ], [ %v7_11450, %bb90 ]
  %v1_1145412.in = phi i32 [ %v5_11448, %bb89 ], [ %v10_11450, %bb90 ]
  %v1_1145412 = icmp slt i32 %v1_1145412.in, 0
  %v0_1145413 = icmp slt i32 %v0_1145413.in, 0
  %v2_11454 = xor i1 %v0_1145413, %v1_1145412
  br i1 %v2_11454, label %dec_label_pc_11458, label %dec_label_pc_11428

dec_label_pc_11458:                               ; preds = %bb91
  %v1_11458 = urem i32 %v0_11458, 4
  %v2_11458 = icmp eq i32 %v1_11458, 0
  br i1 %v2_11458, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_11458
  %v3_1145c = icmp eq i32 %v1_11434.v6_11434.v6_1143c.v6_11444, 0
  br i1 %v3_1145c, label %.thread6, label %dec_label_pc_11464

dec_label_pc_11464:                               ; preds = %bb92, %dec_label_pc_11420
  %v0_11478 = phi i32 [ %v3_1144c, %bb92 ], [ %v1_11414, %dec_label_pc_11420 ]
  %v1_11474 = phi i32 [ %v1_11434.v6_11434.v6_1143c.v6_11444, %bb92 ], [ %v2_11410, %dec_label_pc_11420 ]
  %v0_11464 = phi i32 [ %v0_11458, %bb92 ], [ %v2_11420, %dec_label_pc_11420 ]
  %v5_11468 = icmp slt i32 %v0_11464, -2
  br i1 %v5_11468, label %dec_label_pc_11488, label %dec_label_pc_1146c

dec_label_pc_1146c:                               ; preds = %dec_label_pc_11464
  %v8_11464 = icmp eq i32 %v0_11464, -2
  br i1 %v8_11464, label %dec_label_pc_1147c, label %dec_label_pc_11470

dec_label_pc_11470:                               ; preds = %dec_label_pc_1146c
  %v3_11470 = icmp ult i32 %v1_11474, %v0_11478
  br i1 %v3_11470, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_11470
  %v2_11470 = sub i32 %v1_11474, %v0_11478
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_11470, %bb93
  %v0_1147c54 = phi i32 [ %v1_11474, %dec_label_pc_11470 ], [ %v2_11470, %bb93 ]
  %v3_11478 = udiv i32 %v0_11478, 2
  br label %dec_label_pc_1147c

dec_label_pc_1147c:                               ; preds = %dec_label_pc_1146c, %bb94
  %v0_11484 = phi i32 [ %v0_11478, %dec_label_pc_1146c ], [ %v3_11478, %bb94 ]
  %v1_11480 = phi i32 [ %v1_11474, %dec_label_pc_1146c ], [ %v0_1147c54, %bb94 ]
  %v3_1147c = icmp ult i32 %v1_11480, %v0_11484
  br i1 %v3_1147c, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_1147c
  %v2_1147c = sub i32 %v1_11480, %v0_11484
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_1147c, %bb95
  %v0_1148857 = phi i32 [ %v1_11480, %dec_label_pc_1147c ], [ %v2_1147c, %bb95 ]
  %v3_11484 = udiv i32 %v0_11484, 2
  br label %dec_label_pc_11488

dec_label_pc_11488:                               ; preds = %dec_label_pc_11464, %bb96
  %v2_1148c = phi i32 [ %v0_11478, %dec_label_pc_11464 ], [ %v3_11484, %bb96 ]
  %v1_1148c = phi i32 [ %v1_11474, %dec_label_pc_11464 ], [ %v0_1148857, %bb96 ]
  %v3_11488 = icmp ult i32 %v1_1148c, %v2_1148c
  br i1 %v3_11488, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_11488
  %v2_11488 = sub i32 %v1_1148c, %v2_1148c
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_11488, %bb83, %.thread72, %dec_label_pc_11458, %bb92, %bb97
  %v1_11494 = phi i32 [ %v1_11434.v6_11434.v6_1143c.v6_11444, %dec_label_pc_11458 ], [ 0, %bb92 ], [ %v1_1148c, %dec_label_pc_11488 ], [ %v2_11488, %bb97 ], [ %v3_113ec, %.thread72 ], [ %v1_113e0, %bb83 ]
  br i1 %v1_113d4, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_11494 = sub i32 0, %v1_11494
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_11498 = phi i32 [ %v1_11494, %.thread6 ], [ %v2_11494, %bb98 ]
  ret i32 %v1_11498

dec_label_pc_1149c:                               ; preds = %dec_label_pc_113c8
  %v0_1149c = load i32, i32* @lr, align 4
  %v0_114a0 = call i32 @function_114ac()
  call void @__pseudo_branch(i32 %v0_1149c)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_11478, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11458, { 1, 0, 2 }
  uselistorder i32 %v7_11450, { 1, 0 }
  uselistorder i32 %v3_1144c, { 1, 0 }
  uselistorder i32 %v1_11434.v6_11434.v6_1143c.v6_11444, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_11440, { 1, 0 }
  uselistorder i32 %v4_11438, { 1, 0 }
  uselistorder i32 %v4_11430, { 1, 0 }
  uselistorder i32 %v6_11450, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11420, { 1, 0 }
  uselistorder i32 %v1_11414, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_11410, { 1, 0, 3, 2 }
  uselistorder i32 %v4_11400, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1140c.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_113e0, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_113e8, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_114ac, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_11488, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_1147c, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_11428, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_114ac() local_unnamed_addr {
dec_label_pc_114ac:
  %v1_114ac = load i32, i32* @r0, align 4
  ret i32 %v1_114ac
}

define i32 @function_114b0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_114b0:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_114b0 = load i32, i32* @r2, align 4
  %v1_114c0 = add i32 %arg2, -12
  store i32 %v6_114b0, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_114c0, 2
  br i1 %tmp, label %dec_label_pc_114e8, label %dec_label_pc_114e0

dec_label_pc_114e0:                               ; preds = %dec_label_pc_114b0
  %v0_114e0 = call i32 @function_11524()
  br label %dec_label_pc_11514

dec_label_pc_114e8:                               ; preds = %dec_label_pc_114b0
  %v2_114f0 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_114f0, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_114f0, -4095
  br i1 %tmp8, label %dec_label_pc_11514, label %dec_label_pc_11500

dec_label_pc_11500:                               ; preds = %dec_label_pc_114e8
  %v0_11500 = call i32 @function_11b48()
  %v0_11504 = load i32, i32* %r4.global-to-local, align 4
  %v1_11504 = sub i32 0, %v0_11504
  %v2_11508 = inttoptr i32 %v0_11500 to i32*
  store i32 %v1_11504, i32* %v2_11508, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11514

dec_label_pc_11514:                               ; preds = %dec_label_pc_11500, %dec_label_pc_114e8, %dec_label_pc_114e0
  %storemerge = phi i32 [ %v0_114e0, %dec_label_pc_114e0 ], [ %v2_114f0, %dec_label_pc_114e8 ], [ -1, %dec_label_pc_11500 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_114f0, { 1, 0, 2 }
}

define i32 @function_11524() local_unnamed_addr {
dec_label_pc_11524:
  %r4.global-to-local = alloca i32, align 4
  %v0_11544 = load i32, i32* @r0, align 4
  store i32 %v0_11544, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11544, -4095
  br i1 %tmp, label %dec_label_pc_11560, label %dec_label_pc_11550

dec_label_pc_11550:                               ; preds = %dec_label_pc_11524
  %v0_11550 = call i32 @function_11b48()
  %v0_11554 = load i32, i32* %r4.global-to-local, align 4
  %v1_11554 = sub i32 0, %v0_11554
  %v2_11558 = inttoptr i32 %v0_11550 to i32*
  store i32 %v1_11554, i32* %v2_11558, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11560

dec_label_pc_11560:                               ; preds = %dec_label_pc_11524, %dec_label_pc_11550
  %v0_11560 = phi i32 [ %v0_11544, %dec_label_pc_11524 ], [ -1, %dec_label_pc_11550 ]
  ret i32 %v0_11560

; uselistorder directives
  uselistorder i32 %v0_11544, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11560, { 1, 0 }
}

define i32 @function_11574(i32 %arg1) local_unnamed_addr {
dec_label_pc_11574:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11574 = load i32, i32* @r4, align 4
  store i32 %v3_11574, i32* %stack_var_-8, align 4
  %v1_11578 = call i32 @close(i32 %arg1)
  store i32 %v1_11578, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_11578, -4095
  br i1 %tmp, label %dec_label_pc_11598, label %dec_label_pc_11588

dec_label_pc_11588:                               ; preds = %dec_label_pc_11574
  %v0_11588 = call i32 @function_11b48()
  %v0_1158c = load i32, i32* %r4.global-to-local, align 4
  %v1_1158c = sub i32 0, %v0_1158c
  %v2_11590 = inttoptr i32 %v0_11588 to i32*
  store i32 %v1_1158c, i32* %v2_11590, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11598

dec_label_pc_11598:                               ; preds = %dec_label_pc_11574, %dec_label_pc_11588
  %v0_11598 = phi i32 [ %v1_11578, %dec_label_pc_11574 ], [ -1, %dec_label_pc_11588 ]
  %v2_1159c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1159c, i32* @r4, align 4
  ret i32 %v0_11598

; uselistorder directives
  uselistorder i32 %v1_11578, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11598, { 1, 0 }
}

define i32 @function_115a0() local_unnamed_addr {
dec_label_pc_115a0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_115a0 = load i32, i32* @r4, align 4
  store i32 %v3_115a0, i32* %stack_var_-8, align 4
  %v0_115a4 = call i32 @fork()
  store i32 %v0_115a4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_115a4, -4095
  br i1 %tmp, label %dec_label_pc_115c4, label %dec_label_pc_115b4

dec_label_pc_115b4:                               ; preds = %dec_label_pc_115a0
  %v0_115b4 = call i32 @function_11b48()
  %v0_115b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_115b8 = sub i32 0, %v0_115b8
  %v2_115bc = inttoptr i32 %v0_115b4 to i32*
  store i32 %v1_115b8, i32* %v2_115bc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_115c4

dec_label_pc_115c4:                               ; preds = %dec_label_pc_115a0, %dec_label_pc_115b4
  %v0_115c4 = phi i32 [ %v0_115a4, %dec_label_pc_115a0 ], [ -1, %dec_label_pc_115b4 ]
  %v2_115c8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_115c8, i32* @r4, align 4
  ret i32 %v0_115c4

; uselistorder directives
  uselistorder i32 %v0_115a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_115c4, { 1, 0 }
}

define i32 @function_115cc() local_unnamed_addr {
dec_label_pc_115cc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_115cc = load i32, i32* @r4, align 4
  store i32 %v3_115cc, i32* %stack_var_-8, align 4
  %v0_115d0 = call i32 @getpid()
  store i32 %v0_115d0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_115d0, -4095
  br i1 %tmp, label %dec_label_pc_115f0, label %dec_label_pc_115e0

dec_label_pc_115e0:                               ; preds = %dec_label_pc_115cc
  %v0_115e0 = call i32 @function_11b48()
  %v0_115e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_115e4 = sub i32 0, %v0_115e4
  %v2_115e8 = inttoptr i32 %v0_115e0 to i32*
  store i32 %v1_115e4, i32* %v2_115e8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_115f0

dec_label_pc_115f0:                               ; preds = %dec_label_pc_115cc, %dec_label_pc_115e0
  %v0_115f0 = phi i32 [ %v0_115d0, %dec_label_pc_115cc ], [ -1, %dec_label_pc_115e0 ]
  %v2_115f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_115f4, i32* @r4, align 4
  ret i32 %v0_115f0

; uselistorder directives
  uselistorder i32 %v0_115d0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_115f0, { 1, 0 }
}

define i32 @function_115f8() local_unnamed_addr {
dec_label_pc_115f8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_115f8 = load i32, i32* @r4, align 4
  store i32 %v3_115f8, i32* %stack_var_-8, align 4
  %v0_115fc = call i32 @getppid()
  store i32 %v0_115fc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_115fc, -4095
  br i1 %tmp, label %dec_label_pc_1161c, label %dec_label_pc_1160c

dec_label_pc_1160c:                               ; preds = %dec_label_pc_115f8
  %v0_1160c = call i32 @function_11b48()
  %v0_11610 = load i32, i32* %r4.global-to-local, align 4
  %v1_11610 = sub i32 0, %v0_11610
  %v2_11614 = inttoptr i32 %v0_1160c to i32*
  store i32 %v1_11610, i32* %v2_11614, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1161c

dec_label_pc_1161c:                               ; preds = %dec_label_pc_115f8, %dec_label_pc_1160c
  %v0_1161c = phi i32 [ %v0_115fc, %dec_label_pc_115f8 ], [ -1, %dec_label_pc_1160c ]
  %v2_11620 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11620, i32* @r4, align 4
  ret i32 %v0_1161c

; uselistorder directives
  uselistorder i32 %v0_115fc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1161c, { 1, 0 }
}

define i32 @function_11624(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11624:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_11624 = load i32, i32* @r3, align 4
  store i32 %v9_11624, i32* %stack_var_-4, align 4
  %v2_11630 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_11630, i32* @r3, align 4
  %v2_11640 = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_11640, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11640, -4095
  br i1 %tmp, label %dec_label_pc_11660, label %dec_label_pc_11650

dec_label_pc_11650:                               ; preds = %dec_label_pc_11624
  %v0_11650 = call i32 @function_11b48()
  %v0_11654 = load i32, i32* %r4.global-to-local, align 4
  %v1_11654 = sub i32 0, %v0_11654
  store i32 %v1_11654, i32* @r3, align 4
  %v2_11658 = inttoptr i32 %v0_11650 to i32*
  store i32 %v1_11654, i32* %v2_11658, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11660

dec_label_pc_11660:                               ; preds = %dec_label_pc_11624, %dec_label_pc_11650
  %v0_11660 = phi i32 [ %v2_11640, %dec_label_pc_11624 ], [ -1, %dec_label_pc_11650 ]
  ret i32 %v0_11660

; uselistorder directives
  uselistorder i32 %v2_11640, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_11660, { 1, 0 }
}

define i32 @function_11674(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11674:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11674 = load i32, i32* @r4, align 4
  store i32 %v3_11674, i32* %stack_var_-8, align 4
  %v2_11678 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_1167c = icmp eq i32 %v2_11678, -4096
  store i1 %v7_1167c, i1* @cpsr_z, align 1
  store i32 %v2_11678, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11678, -4095
  br i1 %tmp, label %dec_label_pc_11698, label %dec_label_pc_11688

dec_label_pc_11688:                               ; preds = %dec_label_pc_11674
  %v0_11688 = call i32 @function_11b48()
  %v0_1168c = load i32, i32* %r4.global-to-local, align 4
  %v1_1168c = sub i32 0, %v0_1168c
  %v2_11690 = inttoptr i32 %v0_11688 to i32*
  store i32 %v1_1168c, i32* %v2_11690, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11698

dec_label_pc_11698:                               ; preds = %dec_label_pc_11674, %dec_label_pc_11688
  %v0_11698 = phi i32 [ %v2_11678, %dec_label_pc_11674 ], [ -1, %dec_label_pc_11688 ]
  %v2_1169c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1169c, i32* @r4, align 4
  ret i32 %v0_11698

; uselistorder directives
  uselistorder i32 %v2_11678, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_11698, { 1, 0 }
}

define i32 @function_116a0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_116a0:
  %r4.global-to-local = alloca i32, align 4
  %v6_116a0 = load i32, i32* @r2, align 4
  %v1_116b0 = and i32 %arg2, 64
  store i32 %v1_116b0, i32* @r3, align 4
  %v2_116b0 = icmp eq i32 %v1_116b0, 0
  br i1 %v2_116b0, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_116a0
  store i32 %v6_116a0, i32* @r3, align 4
  %phitmp = urem i32 %v6_116a0, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_116a0, %bb
  %v0_116c0 = phi i32 [ 0, %dec_label_pc_116a0 ], [ %phitmp, %bb ]
  store i32 %v0_116c0, i32* @r2, align 4
  %v4_116c8 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_116cc = icmp eq i32 %v4_116c8, -4096
  store i1 %v7_116cc, i1* @cpsr_z, align 1
  store i32 %v4_116c8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_116c8, -4095
  br i1 %tmp, label %dec_label_pc_116e8, label %dec_label_pc_116d8

dec_label_pc_116d8:                               ; preds = %.thread1
  %v0_116d8 = call i32 @function_11b48()
  %v0_116dc = load i32, i32* %r4.global-to-local, align 4
  %v1_116dc = sub i32 0, %v0_116dc
  store i32 %v1_116dc, i32* @r3, align 4
  %v2_116e0 = inttoptr i32 %v0_116d8 to i32*
  store i32 %v1_116dc, i32* %v2_116e0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_116e8

dec_label_pc_116e8:                               ; preds = %.thread1, %dec_label_pc_116d8
  %v0_116e8 = phi i32 [ %v4_116c8, %.thread1 ], [ -1, %dec_label_pc_116d8 ]
  ret i32 %v0_116e8

; uselistorder directives
  uselistorder i32 %v4_116c8, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_116e8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_116fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_116fc:
  store i32 %arg1, i32* @r2, align 4
  %v0_11704 = load i32, i32* @r0, align 4
  %v2_11704 = inttoptr i32 %v0_11704 to i8*
  %v3_11704 = call i32 @function_116a0(i8* %v2_11704, i32 577)
  %v0_11708 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11708, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_116fc
  %v6_11708 = and i32 %v3_11704, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_116fc, %bb
  %v7_11708 = phi i32 [ %v3_11704, %dec_label_pc_116fc ], [ %v6_11708, %bb ]
  ret i32 %v7_11708

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_1170c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1170c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1170c = load i32, i32* @r4, align 4
  store i32 %v3_1170c, i32* %stack_var_-8, align 4
  %v2_11714 = load i32, i32* @r2, align 4
  %v3_11714 = load i32, i32* @r3, align 4
  %v4_11714 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_11714, i32 %v3_11714, i32 0)
  store i32 %v4_11714, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11714, -4095
  br i1 %tmp, label %dec_label_pc_11734, label %dec_label_pc_11724

dec_label_pc_11724:                               ; preds = %dec_label_pc_1170c
  %v0_11724 = call i32 @function_11b48()
  %v0_11728 = load i32, i32* %r4.global-to-local, align 4
  %v1_11728 = sub i32 0, %v0_11728
  %v2_1172c = inttoptr i32 %v0_11724 to i32*
  store i32 %v1_11728, i32* %v2_1172c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11734

dec_label_pc_11734:                               ; preds = %dec_label_pc_1170c, %dec_label_pc_11724
  %v0_11734 = phi i32 [ %v4_11714, %dec_label_pc_1170c ], [ -1, %dec_label_pc_11724 ]
  %v2_11738 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11738, i32* @r4, align 4
  ret i32 %v0_11734

; uselistorder directives
  uselistorder i32 %v4_11714, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11734, { 1, 0 }
}

define i32 @function_1173c(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1173c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1173c = load i32, i32* @r4, align 4
  store i32 %v3_1173c, i32* %stack_var_-8, align 4
  %v4_11740 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_11740, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11740, -4095
  br i1 %tmp, label %dec_label_pc_11760, label %dec_label_pc_11750

dec_label_pc_11750:                               ; preds = %dec_label_pc_1173c
  %v0_11750 = call i32 @function_11b48()
  %v0_11754 = load i32, i32* %r4.global-to-local, align 4
  %v1_11754 = sub i32 0, %v0_11754
  %v2_11758 = inttoptr i32 %v0_11750 to i32*
  store i32 %v1_11754, i32* %v2_11758, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11760

dec_label_pc_11760:                               ; preds = %dec_label_pc_1173c, %dec_label_pc_11750
  %v0_11760 = phi i32 [ %v4_11740, %dec_label_pc_1173c ], [ -1, %dec_label_pc_11750 ]
  %v2_11764 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11764, i32* @r4, align 4
  ret i32 %v0_11760

; uselistorder directives
  uselistorder i32 %v4_11740, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11760, { 1, 0 }
}

define i32 @function_11768(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11768:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_11768 = load i32, i32* @r4, align 4
  store i32 %v3_11768, i32* %stack_var_-8, align 4
  %v7_1176c = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_1176c, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_1176c, -4095
  br i1 %tmp6, label %dec_label_pc_1178c, label %dec_label_pc_1177c

dec_label_pc_1177c:                               ; preds = %dec_label_pc_11768
  %v0_1177c = call i32 @function_11b48()
  %v0_11780 = load i32, i32* %r4.global-to-local, align 4
  %v1_11780 = sub i32 0, %v0_11780
  %v2_11784 = inttoptr i32 %v0_1177c to i32*
  store i32 %v1_11780, i32* %v2_11784, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1178c

dec_label_pc_1178c:                               ; preds = %dec_label_pc_11768, %dec_label_pc_1177c
  %v0_1178c = phi i32 [ %v7_1176c, %dec_label_pc_11768 ], [ -1, %dec_label_pc_1177c ]
  %v2_11790 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11790, i32* @r4, align 4
  ret i32 %v0_1178c

; uselistorder directives
  uselistorder i32 %v7_1176c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1178c, { 1, 0 }
}

define i32 @function_11794(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11794:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11794 = load i32, i32* @r4, align 4
  store i32 %v3_11794, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_117bc, label %dec_label_pc_117ac

dec_label_pc_117ac:                               ; preds = %dec_label_pc_11794
  %v0_117ac = call i32 @function_11b48()
  %v0_117b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_117b0 = sub i32 0, %v0_117b0
  %v2_117b4 = inttoptr i32 %v0_117ac to i32*
  store i32 %v1_117b0, i32* %v2_117b4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_117c0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_117bc

dec_label_pc_117bc:                               ; preds = %dec_label_pc_11794, %dec_label_pc_117ac
  %v2_117c0 = phi i32 [ %v3_11794, %dec_label_pc_11794 ], [ %v2_117c0.pre, %dec_label_pc_117ac ]
  %v0_117bc = phi i32 [ %arg1, %dec_label_pc_11794 ], [ -1, %dec_label_pc_117ac ]
  store i32 %v2_117c0, i32* @r4, align 4
  ret i32 %v0_117bc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_117bc, { 1, 0 }
}

define i32 @function_117c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_117c4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_117c4 = load i32, i32* @r4, align 4
  store i32 %v3_117c4, i32* %stack_var_-8, align 4
  %v0_117c8 = call i32 @setsid()
  store i32 %v0_117c8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_117c8, -4095
  br i1 %tmp, label %dec_label_pc_117e8, label %dec_label_pc_117d8

dec_label_pc_117d8:                               ; preds = %dec_label_pc_117c4
  %v0_117d8 = call i32 @function_11b48()
  %v0_117dc = load i32, i32* %r4.global-to-local, align 4
  %v1_117dc = sub i32 0, %v0_117dc
  %v2_117e0 = inttoptr i32 %v0_117d8 to i32*
  store i32 %v1_117dc, i32* %v2_117e0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_117e8

dec_label_pc_117e8:                               ; preds = %dec_label_pc_117c4, %dec_label_pc_117d8
  %v0_117e8 = phi i32 [ %v0_117c8, %dec_label_pc_117c4 ], [ -1, %dec_label_pc_117d8 ]
  %v2_117ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_117ec, i32* @r4, align 4
  ret i32 %v0_117e8

; uselistorder directives
  uselistorder i32 %v0_117c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_117e8, { 1, 0 }
}

define i32 @function_117f0(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_117f0:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_117f0 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_117f0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_117f0
  %v3_117f85 = load i32, i32* @r4, align 4
  store i32 %v3_117f85, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11818

bb:                                               ; preds = %dec_label_pc_117f0
  %v3_117f8 = load i32, i32* @r4, align 4
  store i32 %v3_117f8, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_11818, label %dec_label_pc_11804

dec_label_pc_11804:                               ; preds = %bb
  %v0_11804 = call i32 @function_11b48()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11810 = inttoptr i32 %v0_11804 to i32*
  store i32 22, i32* %v2_11810, align 4
  %v0_1183c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1183c

dec_label_pc_11818:                               ; preds = %.thread, %bb
  %v7_11818 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_11818, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_11818, -4095
  br i1 %tmp13, label %dec_label_pc_11838, label %dec_label_pc_11828

dec_label_pc_11828:                               ; preds = %dec_label_pc_11818
  %v0_11828 = call i32 @function_11b48()
  %v0_1182c = load i32, i32* %r4.global-to-local, align 4
  %v1_1182c = sub i32 0, %v0_1182c
  %v2_11830 = inttoptr i32 %v0_11828 to i32*
  store i32 %v1_1182c, i32* %v2_11830, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11838

dec_label_pc_11838:                               ; preds = %dec_label_pc_11818, %dec_label_pc_11828
  %v0_11838 = phi i32 [ %v7_11818, %dec_label_pc_11818 ], [ -1, %dec_label_pc_11828 ]
  store i32 %v0_11838, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1183c

dec_label_pc_1183c:                               ; preds = %dec_label_pc_11804, %dec_label_pc_11838
  %v0_1183c = phi i32 [ %v0_1183c.pre, %dec_label_pc_11804 ], [ %v0_11838, %dec_label_pc_11838 ]
  %v2_11840 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11840, i32* @r4, align 4
  ret i32 %v0_1183c

; uselistorder directives
  uselistorder i32 %v7_11818, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_1183c, { 1, 0 }
  uselistorder label %dec_label_pc_11838, { 1, 0 }
  uselistorder label %dec_label_pc_11818, { 1, 0 }
}

define i32 @function_11844(i32* %arg1) local_unnamed_addr {
dec_label_pc_11844:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11844 = load i32, i32* @r4, align 4
  store i32 %v3_11844, i32* %stack_var_-8, align 4
  %v2_11848 = call i32 @time(i32* %arg1)
  store i32 %v2_11848, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11848, -4095
  br i1 %tmp, label %dec_label_pc_11868, label %dec_label_pc_11858

dec_label_pc_11858:                               ; preds = %dec_label_pc_11844
  %v0_11858 = call i32 @function_11b48()
  %v0_1185c = load i32, i32* %r4.global-to-local, align 4
  %v1_1185c = sub i32 0, %v0_1185c
  %v2_11860 = inttoptr i32 %v0_11858 to i32*
  store i32 %v1_1185c, i32* %v2_11860, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11868

dec_label_pc_11868:                               ; preds = %dec_label_pc_11844, %dec_label_pc_11858
  %v0_11868 = phi i32 [ %v2_11848, %dec_label_pc_11844 ], [ -1, %dec_label_pc_11858 ]
  %v2_1186c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1186c, i32* @r4, align 4
  ret i32 %v0_11868

; uselistorder directives
  uselistorder i32 %v2_11848, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11868, { 1, 0 }
}

define i32 @function_11870(i8* %arg1) local_unnamed_addr {
dec_label_pc_11870:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11870 = load i32, i32* @r4, align 4
  store i32 %v3_11870, i32* %stack_var_-8, align 4
  %v3_11874 = call i32 @unlink(i8* %arg1)
  store i32 %v3_11874, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_11874, -4095
  br i1 %tmp, label %dec_label_pc_11894, label %dec_label_pc_11884

dec_label_pc_11884:                               ; preds = %dec_label_pc_11870
  %v0_11884 = call i32 @function_11b48()
  %v0_11888 = load i32, i32* %r4.global-to-local, align 4
  %v1_11888 = sub i32 0, %v0_11888
  %v2_1188c = inttoptr i32 %v0_11884 to i32*
  store i32 %v1_11888, i32* %v2_1188c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11894

dec_label_pc_11894:                               ; preds = %dec_label_pc_11870, %dec_label_pc_11884
  %v0_11894 = phi i32 [ %v3_11874, %dec_label_pc_11870 ], [ -1, %dec_label_pc_11884 ]
  %v2_11898 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11898, i32* @r4, align 4
  ret i32 %v0_11894

; uselistorder directives
  uselistorder i32 %v3_11874, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11894, { 1, 0 }
}

define i32 @function_1189c(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1189c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1189c = load i32, i32* @r4, align 4
  store i32 %v3_1189c, i32* %stack_var_-8, align 4
  %v4_118a0 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_118a0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_118a0, -4095
  br i1 %tmp, label %dec_label_pc_118c0, label %dec_label_pc_118b0

dec_label_pc_118b0:                               ; preds = %dec_label_pc_1189c
  %v0_118b0 = call i32 @function_11b48()
  %v0_118b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_118b4 = sub i32 0, %v0_118b4
  %v2_118b8 = inttoptr i32 %v0_118b0 to i32*
  store i32 %v1_118b4, i32* %v2_118b8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_118c0

dec_label_pc_118c0:                               ; preds = %dec_label_pc_1189c, %dec_label_pc_118b0
  %v0_118c0 = phi i32 [ %v4_118a0, %dec_label_pc_1189c ], [ -1, %dec_label_pc_118b0 ]
  %v2_118c4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_118c4, i32* @r4, align 4
  ret i32 %v0_118c0

; uselistorder directives
  uselistorder i32 %v4_118a0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_118c0, { 1, 0 }
}

define i32 @function_118c8(i32* %arg1) local_unnamed_addr {
dec_label_pc_118c8:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_118c8 = load i32, i32* @r4, align 4
  store i32 %v3_118c8, i32* %stack_var_-20, align 4
  %v6_118c8 = load i32, i32* @r5, align 4
  %v9_118c8 = load i32, i32* @r6, align 4
  %v12_118c8 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_118d0 = load i32, i32* %arg1, align 4
  store i32 %v2_118d0, i32* %r4.global-to-local, align 4
  %v2_118d4 = ptrtoint i32* %stack_var_-36 to i32
  %v1_118d8 = add i32 %tmp, 24
  store i32 %v1_118d8, i32* @r6, align 4
  %v3_118dc = icmp eq i32 %v2_118d0, -1
  store i32 %v2_118d4, i32* @r7, align 4
  store i32 %v1_118d8, i32* %r2.global-to-local, align 4
  store i32 %v2_118d4, i32* @r0, align 4
  br i1 %v3_118dc, label %dec_label_pc_118f4, label %dec_label_pc_11908

dec_label_pc_118f4:                               ; preds = %dec_label_pc_118c8
  %v0_118f4 = call i32 @function_11b48()
  %v0_118fc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_118fc, i32* %r2.global-to-local, align 4
  %v2_11900 = inttoptr i32 %v0_118f4 to i32*
  store i32 9, i32* %v2_11900, align 4
  %v0_11960.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11960

dec_label_pc_11908:                               ; preds = %dec_label_pc_118c8
  %v8_11910 = call i32 @function_12bc0(i32 %v2_118d4, i32 ptrtoint (i32* @global_var_12bb8.384 to i32), i32 %v1_118d8, i32 76736, i32 %v3_118c8, i32 %v6_118c8, i32 %v9_118c8)
  %v1_11920 = call i32 @function_12bb8()
  %v0_1192c = load i32, i32* @r5, align 4
  %v1_1192c = inttoptr i32 %v0_1192c to i32*
  %v2_1192c = load i32, i32* %v1_1192c, align 4
  store i32 %v2_1192c, i32* @r4, align 4
  store i32 %v2_118d4, i32* @r0, align 4
  store i32 -1, i32* %v1_1192c, align 4
  store i32 ptrtoint (i32* @global_var_11944.388 to i32), i32* @lr, align 4
  %v8_11940 = call i32 @function_12bc0(i32 %v2_118d4, i32 1, i32 %v1_118d8, i32 76736, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_11944 = load i32, i32* @r5, align 4
  %v1_11944 = add i32 %v0_11944, 12
  %v2_11944 = inttoptr i32 %v1_11944 to i32*
  %v3_11944 = load i32, i32* %v2_11944, align 4
  store i32 %v3_11944, i32* @r0, align 4
  %v0_11948 = call i32 @function_121d0()
  %v0_1194c = load i32, i32* @r5, align 4
  store i32 %v0_1194c, i32* @r0, align 4
  %v0_11950 = call i32 @function_121d0()
  %v0_11954 = load i32, i32* @r4, align 4
  %v1_11958 = call i32 @function_11574(i32 %v0_11954)
  store i32 %v1_11958, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11960

dec_label_pc_11960:                               ; preds = %dec_label_pc_118f4, %dec_label_pc_11908
  %v0_11960 = phi i32 [ %v0_11960.pre, %dec_label_pc_118f4 ], [ %v1_11958, %dec_label_pc_11908 ]
  %v2_11968 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11968, i32* @r4, align 4
  store i32 %v6_118c8, i32* @r5, align 4
  store i32 %v9_118c8, i32* @r6, align 4
  store i32 %v12_118c8, i32* @r7, align 4
  ret i32 %v0_11960

; uselistorder directives
  uselistorder i32 %v1_118d8, { 2, 1, 0, 3 }
  uselistorder i32 %v2_118d4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_118c8, { 1, 0 }
  uselistorder i32 %v6_118c8, { 1, 0 }
  uselistorder label %dec_label_pc_11960, { 1, 0 }
}

define i32 @function_1197c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1197c:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_1197c = load i32, i32* @r4, align 4
  %v9_1197c = load i32, i32* @r6, align 4
  %v12_1197c = load i32, i32* @r7, align 4
  %v0_11988 = load i32, i32* @r0, align 4
  %v2_11988 = inttoptr i32 %v0_11988 to i8*
  %v3_11988 = call i32 @function_116a0(i8* %v2_11988, i32 18432)
  store i32 %v3_11988, i32* @r0, align 4
  store i32 %v3_11988, i32* @r7, align 4
  %v1_1198c = icmp slt i32 %v3_11988, 0
  br i1 %v1_1198c, label %.thread1, label %dec_label_pc_11998

.thread1:                                         ; preds = %dec_label_pc_1197c
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_11a68

dec_label_pc_11998:                               ; preds = %dec_label_pc_1197c
  %v2_11984 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_11984, i32* @r1, align 4
  %v0_1199c = call i32 @function_12fe4()
  %v1_119a0 = icmp slt i32 %v0_1199c, 0
  br i1 %v1_119a0, label %dec_label_pc_119c0, label %dec_label_pc_119a8

dec_label_pc_119a8:                               ; preds = %dec_label_pc_11998
  %v0_119a8 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_119b4 = call i32 @function_114b0(i32 %v0_119a8, i32 2)
  %v1_119b8 = icmp slt i32 %v2_119b4, 0
  br i1 %v1_119b8, label %dec_label_pc_119c0, label %dec_label_pc_119e0

dec_label_pc_119c0:                               ; preds = %dec_label_pc_119a8, %dec_label_pc_11998
  %v0_119c0 = call i32 @function_11b48()
  store i32 %v0_119c0, i32* %r5.global-to-local, align 4
  %v0_119c8 = load i32, i32* @r7, align 4
  %v1_119cc = inttoptr i32 %v0_119c0 to i32*
  %v2_119cc = load i32, i32* %v1_119cc, align 4
  store i32 %v2_119cc, i32* @r4, align 4
  %v1_119d0 = call i32 @function_11574(i32 %v0_119c8)
  store i32 0, i32* @r6, align 4
  %v0_119d8 = load i32, i32* @r4, align 4
  %v1_119d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_119d8 = inttoptr i32 %v1_119d8 to i32*
  store i32 %v0_119d8, i32* %v2_119d8, align 4
  br label %dec_label_pc_11a68

dec_label_pc_119e0:                               ; preds = %dec_label_pc_119a8
  %v1_119e4 = call i32 @function_12024(i32 48)
  store i32 %v1_119e4, i32* @r6, align 4
  %v2_119e8 = icmp eq i32 %v1_119e4, 0
  br i1 %v2_119e8, label %dec_label_pc_11a38, label %dec_label_pc_119f0

dec_label_pc_119f0:                               ; preds = %dec_label_pc_119e0
  store i32 0, i32* @r4, align 4
  %v2_119f4 = add i32 %v1_119e4, 16
  %v3_119f4 = inttoptr i32 %v2_119f4 to i32*
  store i32 0, i32* %v3_119f4, align 4
  %v2_119fc = icmp ugt i32 %tmp, 511
  %v1_11a00 = load i32, i32* @r6, align 4
  %v2_11a00 = add i32 %v1_11a00, 20
  %v3_11a00 = inttoptr i32 %v2_11a00 to i32*
  store i32 %tmp, i32* %v3_11a00, align 4
  br i1 %v2_119fc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_119f0
  %v2_11a08 = load i32, i32* @r6, align 4
  %v3_11a08 = add i32 %v2_11a08, 20
  %v4_11a08 = inttoptr i32 %v3_11a08 to i32*
  store i32 512, i32* %v4_11a08, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_119f0, %bb
  %v0_11a0c = load i32, i32* @r7, align 4
  %v1_11a0c = load i32, i32* @r6, align 4
  %v2_11a0c = inttoptr i32 %v1_11a0c to i32*
  store i32 %v0_11a0c, i32* %v2_11a0c, align 4
  %v0_11a10 = load i32, i32* @r4, align 4
  %v1_11a10 = load i32, i32* @r6, align 4
  %v2_11a10 = add i32 %v1_11a10, 8
  %v3_11a10 = inttoptr i32 %v2_11a10 to i32*
  store i32 %v0_11a10, i32* %v3_11a10, align 4
  %v0_11a14 = load i32, i32* @r4, align 4
  %v1_11a14 = load i32, i32* @r6, align 4
  %v2_11a14 = add i32 %v1_11a14, 4
  %v3_11a14 = inttoptr i32 %v2_11a14 to i32*
  store i32 %v0_11a14, i32* %v3_11a14, align 4
  %v0_11a1c = load i32, i32* @r6, align 4
  %v1_11a1c = add i32 %v0_11a1c, 20
  %v2_11a1c = inttoptr i32 %v1_11a1c to i32*
  %v3_11a1c = load i32, i32* %v2_11a1c, align 4
  %v2_11a20 = call i32 @function_12178(i32 1, i32 %v3_11a1c)
  %v2_11a24 = icmp eq i32 %v2_11a20, 0
  %v1_11a28 = load i32, i32* @r6, align 4
  %v2_11a28 = add i32 %v1_11a28, 12
  %v3_11a28 = inttoptr i32 %v2_11a28 to i32*
  store i32 %v2_11a20, i32* %v3_11a28, align 4
  br i1 %v2_11a24, label %dec_label_pc_11a30, label %dec_label_pc_11a54

dec_label_pc_11a30:                               ; preds = %.thread
  %v0_11a30 = load i32, i32* @r6, align 4
  store i32 %v0_11a30, i32* @r0, align 4
  %v0_11a34 = call i32 @function_121d0()
  br label %dec_label_pc_11a38

dec_label_pc_11a38:                               ; preds = %dec_label_pc_119e0, %dec_label_pc_11a30
  %v0_11a38 = load i32, i32* @r7, align 4
  %v1_11a3c = call i32 @function_11574(i32 %v0_11a38)
  %v0_11a40 = call i32 @function_11b48()
  store i32 0, i32* @r6, align 4
  %v2_11a4c = inttoptr i32 %v0_11a40 to i32*
  store i32 12, i32* %v2_11a4c, align 4
  br label %dec_label_pc_11a68

dec_label_pc_11a54:                               ; preds = %.thread
  store i32 72296, i32* @lr, align 4
  %v1_11a64 = call i32 @function_12bb8()
  br label %dec_label_pc_11a68

dec_label_pc_11a68:                               ; preds = %.thread1, %dec_label_pc_11a38, %dec_label_pc_119c0, %dec_label_pc_11a54
  %v0_11a68 = load i32, i32* @r6, align 4
  store i32 %v3_1197c, i32* @r4, align 4
  store i32 %v9_1197c, i32* @r6, align 4
  store i32 %v12_1197c, i32* @r7, align 4
  ret i32 %v0_11a68

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_12178, { 39, 40, 35, 20, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 4, 3, 0, 19, 18, 17, 16, 2, 1, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 38, 37, 36 }
  uselistorder i32 512, { 0, 5, 1, 2, 8, 6, 7, 9, 3, 10, 4, 11 }
  uselistorder i32 (i32)* @function_11574, { 18, 17, 16, 32, 36, 31, 30, 35, 34, 29, 28, 33, 27, 26, 25, 24, 23, 22, 2, 21, 20, 19, 15, 14, 4, 3, 13, 12, 11, 10, 9, 8, 7, 6, 5, 1, 0 }
  uselistorder label %dec_label_pc_11a68, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_11a38, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_11a78(i32* %arg1) local_unnamed_addr {
dec_label_pc_11a78:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_11a78 = load i32, i32* @r4, align 4
  %v6_11a78 = load i32, i32* @r5, align 4
  %v9_11a78 = load i32, i32* @lr, align 4
  %v1_11a7c = add i32 %tmp, 24
  store i32 %v1_11a7c, i32* @r4, align 4
  %v2_11a80 = ptrtoint i32* %stack_var_-28 to i32
  store i32 76736, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_11a80, i32* @r0, align 4
  store i32 %v1_11a7c, i32* %r2.global-to-local, align 4
  %v8_11a9c = call i32 @function_12bc0(i32 %v2_11a80, i32 ptrtoint (i32* @global_var_12bb8.384 to i32), i32 %v1_11a7c, i32 76736, i32 %v3_11a78, i32 %v6_11a78, i32 %v9_11a78)
  %v0_11aa0 = load i32, i32* @r4, align 4
  store i32 %v0_11aa0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12bb8.384 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_11ab0.393 to i32), i32* @lr, align 4
  %v1_11aac = call i32 @function_12bb8()
  store i32 %v1_11aac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11ab0

dec_label_pc_11ab0:                               ; preds = %dec_label_pc_11ae4, %dec_label_pc_11a78
  %v0_11ab0 = load i32, i32* @r5, align 4
  %v1_11ab0 = add i32 %v0_11ab0, 4
  %v2_11ab0 = inttoptr i32 %v1_11ab0 to i32*
  %v3_11ab0 = load i32, i32* %v2_11ab0, align 4
  store i32 %v3_11ab0, i32* %r2.global-to-local, align 4
  %v4_11ab0 = add i32 %v0_11ab0, 8
  %v5_11ab0 = inttoptr i32 %v4_11ab0 to i32*
  %v6_11ab0 = load i32, i32* %v5_11ab0, align 4
  store i32 %v6_11ab0, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_11ab0, %v3_11ab0
  br i1 %tmp8, label %dec_label_pc_11ae4, label %dec_label_pc_11abc

dec_label_pc_11abc:                               ; preds = %dec_label_pc_11ab0
  %v1_11abc = inttoptr i32 %v0_11ab0 to i32*
  %v2_11abc = load i32, i32* %v1_11abc, align 4
  store i32 %v2_11abc, i32* @r0, align 4
  %v1_11ac0 = add i32 %v0_11ab0, 12
  %v2_11ac0 = inttoptr i32 %v1_11ac0 to i32*
  %v3_11ac0 = load i32, i32* %v2_11ac0, align 4
  %v1_11ac4 = add i32 %v0_11ab0, 20
  %v2_11ac4 = inttoptr i32 %v1_11ac4 to i32*
  %v3_11ac4 = load i32, i32* %v2_11ac4, align 4
  store i32 %v3_11ac4, i32* @r2, align 4
  %v4_11ac8 = call i32 @function_13034(i32 %v2_11abc, i32 %v3_11ac0, i32 %v3_11ac4, i32 %v6_11ab0)
  store i32 %v4_11ac8, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_11ac8, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_11ad8

.thread:                                          ; preds = %dec_label_pc_11abc
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_11b18

dec_label_pc_11ad8:                               ; preds = %dec_label_pc_11abc
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_11adc = load i32, i32* @r5, align 4
  %v2_11adc = add i32 %v1_11adc, 4
  %v3_11adc = inttoptr i32 %v2_11adc to i32*
  store i32 0, i32* %v3_11adc, align 4
  %v1_11ae0 = load i32, i32* @r5, align 4
  %v2_11ae0 = add i32 %v1_11ae0, 8
  %v3_11ae0 = inttoptr i32 %v2_11ae0 to i32*
  store i32 %v4_11ac8, i32* %v3_11ae0, align 4
  %v0_11ae4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11ae4

dec_label_pc_11ae4:                               ; preds = %dec_label_pc_11ab0, %dec_label_pc_11ad8
  %v1_11afc = phi i32 [ %v0_11ab0, %dec_label_pc_11ab0 ], [ %v0_11ae4.pre, %dec_label_pc_11ad8 ]
  %v1_11ae4 = add i32 %v1_11afc, 4
  %v2_11ae4 = inttoptr i32 %v1_11ae4 to i32*
  %v3_11ae4 = load i32, i32* %v2_11ae4, align 4
  store i32 %v3_11ae4, i32* %r2.global-to-local, align 4
  %v1_11ae8 = add i32 %v1_11afc, 12
  %v2_11ae8 = inttoptr i32 %v1_11ae8 to i32*
  %v3_11ae8 = load i32, i32* %v2_11ae8, align 4
  store i32 %v3_11ae8, i32* %ip.global-to-local, align 4
  %v2_11aec = add i32 %v3_11ae8, %v3_11ae4
  store i32 %v2_11aec, i32* @r4, align 4
  %v1_11af0 = add i32 %v2_11aec, 4
  %v2_11af0 = inttoptr i32 %v1_11af0 to i32*
  %v3_11af0 = load i32, i32* %v2_11af0, align 4
  %v1_11af4 = add i32 %v2_11aec, 8
  %v2_11af4 = inttoptr i32 %v1_11af4 to i8*
  %v3_11af4 = load i8, i8* %v2_11af4, align 1
  %v4_11af4 = zext i8 %v3_11af4 to i32
  store i32 %v4_11af4, i32* %r3.global-to-local, align 4
  %v1_11af8 = add i32 %v2_11aec, 9
  %v2_11af8 = inttoptr i32 %v1_11af8 to i8*
  %v3_11af8 = load i8, i8* %v2_11af8, align 1
  %v4_11af8 = zext i8 %v3_11af8 to i32
  store i32 %v4_11af8, i32* %r0.global-to-local, align 4
  %v2_11afc = add i32 %v1_11afc, 16
  %v3_11afc = inttoptr i32 %v2_11afc to i32*
  store i32 %v3_11af0, i32* %v3_11afc, align 4
  %v0_11b00 = load i32, i32* %r2.global-to-local, align 4
  %v1_11b00 = load i32, i32* %ip.global-to-local, align 4
  %v2_11b00 = add i32 %v1_11b00, %v0_11b00
  %v3_11b00 = inttoptr i32 %v2_11b00 to i32*
  %v4_11b00 = load i32, i32* %v3_11b00, align 4
  %v0_11b04 = load i32, i32* %r3.global-to-local, align 4
  %v1_11b04 = load i32, i32* %r0.global-to-local, align 4
  %v4_11b04 = mul i32 %v1_11b04, 256
  %v5_11b04 = or i32 %v4_11b04, %v0_11b04
  store i32 %v5_11b04, i32* %r3.global-to-local, align 4
  %v2_11b08 = add i32 %v5_11b04, %v0_11b00
  store i32 %v2_11b08, i32* @r2, align 4
  %v2_11b0c = icmp eq i32 %v4_11b00, 0
  %v1_11b10 = load i32, i32* @r5, align 4
  %v2_11b10 = add i32 %v1_11b10, 4
  %v3_11b10 = inttoptr i32 %v2_11b10 to i32*
  store i32 %v2_11b08, i32* %v3_11b10, align 4
  br i1 %v2_11b0c, label %dec_label_pc_11ab0, label %dec_label_pc_11b18

dec_label_pc_11b18:                               ; preds = %dec_label_pc_11ae4, %.thread
  store i32 %v2_11a80, i32* @r0, align 4
  store i32 76736, i32* %r3.global-to-local, align 4
  store i32 72492, i32* @lr, align 4
  %v3_11b28 = load i32, i32* @r2, align 4
  %v8_11b28 = call i32 @function_12bc0(i32 %v2_11a80, i32 1, i32 %v3_11b28, i32 76736, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_11b2c = load i32, i32* @r4, align 4
  store i32 %v0_11b2c, i32* %r0.global-to-local, align 4
  store i32 %v3_11a78, i32* @r4, align 4
  store i32 %v6_11a78, i32* @r5, align 4
  ret i32 %v0_11b2c

; uselistorder directives
  uselistorder i32 %v1_11afc, { 0, 2, 1 }
  uselistorder i32 %v6_11ab0, { 1, 0, 2 }
  uselistorder i32 %v0_11ab0, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_11a80, { 1, 0, 3, 2 }
  uselistorder i32 %v1_11a7c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_11ae4, { 1, 0 }
}

define i32 @function_11b48() local_unnamed_addr {
dec_label_pc_11b48:
  ret i32 ptrtoint (i32* @global_var_1c5d0.396 to i32)
}

define i32 @function_11b54(i32 %arg1) local_unnamed_addr {
dec_label_pc_11b54:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_11b60 = bitcast i32* %stack_var_-20 to %tms*
  %v2_11b60 = call i32 @function_133c4(%tms* %v1_11b60)
  %v2_11b68 = load i32, i32* %stack_var_-20, align 4
  %v2_11b6c = add i32 %v2_11b68, %tmp
  %v2_11b74 = mul i32 %v2_11b6c, 10000
  %v1_11b78 = and i32 %v2_11b74, 2147483632
  ret i32 %v1_11b78

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_11b84(i32 %arg1) local_unnamed_addr {
dec_label_pc_11b84:
  %v0_11b84 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11b84, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_11b84
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_11b84, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_11b90(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11b90:
  %v0_11b90 = call i32 @function_137d0()
  ret i32 %v0_11b90
}

define i32 @function_11ba0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11ba0:
  %v0_11ba0 = call i32 @function_137d0()
  ret i32 %v0_11ba0

; uselistorder directives
  uselistorder i32 ()* @function_137d0, { 1, 0 }
}

define i32 @function_11bb0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11bb0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_11bb4 = load i32, i32* @r2, align 4
  %v8_11bb4 = icmp eq i32 %v0_11bb4, 8
  store i1 %v8_11bb4, i1* %cpsr_z.global-to-local, align 1
  %v5_11bb8 = icmp slt i32 %v0_11bb4, 8
  br i1 %v5_11bb8, label %dec_label_pc_11c18, label %dec_label_pc_11bbc

dec_label_pc_11bbc:                               ; preds = %dec_label_pc_11bb0
  %v4_11bbc = mul i32 %arg2, 256
  %v5_11bbc = or i32 %v4_11bbc, %arg2
  %v4_11bc0 = mul i32 %v5_11bbc, 65536
  %v5_11bc0 = or i32 %v4_11bc0, %v5_11bbc
  store i32 %v5_11bc0, i32* %r1.global-to-local, align 4
  %v1_11bc457 = urem i32 %tmp, 4
  %v2_11bc458 = icmp eq i32 %v1_11bc457, 0
  store i1 %v2_11bc458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_11bc458, label %dec_label_pc_11bd4, label %bb

bb:                                               ; preds = %dec_label_pc_11bbc, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_11bbc ]
  %v3_11bc859 = phi i32 [ %v6_11bc8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_11bbc ]
  %v4_11bc8 = inttoptr i32 %v3_11bc859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_11bc8, align 1
  %v5_11bc8 = load i32, i32* %r3.global-to-local, align 4
  %v6_11bc8 = add i32 %v5_11bc8, 1
  store i32 %v6_11bc8, i32* %r3.global-to-local, align 4
  %v0_11bcc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11bd8.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_11bcc.pr, label %dec_label_pc_11bd4, label %.thread

.thread:                                          ; preds = %bb
  %v2_11bcc = add i32 %v0_11bd8.pr.pre, -1
  store i32 %v2_11bcc, i32* @r2, align 4
  %v1_11bc4 = urem i32 %v6_11bc8, 4
  %v2_11bc4 = icmp eq i32 %v1_11bc4, 0
  store i1 %v2_11bc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11bc4, label %dec_label_pc_11bd4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_11bc8.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_11bc8.pre to i8
  br label %bb

dec_label_pc_11bd4:                               ; preds = %.thread, %bb, %dec_label_pc_11bbc
  %v0_11be028 = phi i32 [ %tmp, %dec_label_pc_11bbc ], [ %v6_11bc8, %bb ], [ %v6_11bc8, %.thread ]
  %v0_11bd8.pr = phi i32 [ %v0_11bb4, %dec_label_pc_11bbc ], [ %v0_11bd8.pr.pre, %bb ], [ %v2_11bcc, %.thread ]
  %v0_11bd4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_11bd4, i32* %ip.global-to-local, align 4
  %v8_11bd810 = icmp eq i32 %v0_11bd8.pr, 8
  store i1 %v8_11bd810, i1* %cpsr_z.global-to-local, align 1
  %v5_11bdc11 = icmp slt i32 %v0_11bd8.pr, 8
  br i1 %v5_11bdc11, label %dec_label_pc_11c18, label %dec_label_pc_11be0.preheader

dec_label_pc_11be0.preheader:                     ; preds = %dec_label_pc_11bd4
  %v1_11be046 = inttoptr i32 %v0_11be028 to i32*
  store i32 %v0_11bd4, i32* %v1_11be046, align 4
  %v3_11be047 = add i32 %v0_11be028, 4
  %v4_11be048 = inttoptr i32 %v3_11be047 to i32*
  %v5_11be049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11be049, i32* %v4_11be048, align 4
  %v6_11be050 = add i32 %v0_11be028, 8
  store i32 %v6_11be050, i32* %r3.global-to-local, align 4
  %v0_11be451 = load i32, i32* @r2, align 4
  %v1_11be452 = add i32 %v0_11be451, -8
  store i32 %v1_11be452, i32* %r2.global-to-local, align 4
  %v5_11bec53 = icmp slt i32 %v1_11be452, 8
  br i1 %v5_11bec53, label %dec_label_pc_11be0.dec_label_pc_11c18.loopexit_crit_edge, label %dec_label_pc_11bf0

dec_label_pc_11bf0:                               ; preds = %dec_label_pc_11be0.preheader, %dec_label_pc_11bd8.dec_label_pc_11be0_crit_edge
  %v6_11be055 = phi i32 [ %v6_11be0, %dec_label_pc_11bd8.dec_label_pc_11be0_crit_edge ], [ %v6_11be050, %dec_label_pc_11be0.preheader ]
  %v0_11be054 = phi i32 [ %v12_11c0c, %dec_label_pc_11bd8.dec_label_pc_11be0_crit_edge ], [ %v0_11be028, %dec_label_pc_11be0.preheader ]
  %v1_11bf0 = inttoptr i32 %v6_11be055 to i32*
  %v2_11bf0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_11bf0, i32* %v1_11bf0, align 4
  %v3_11bf0 = add i32 %v0_11be054, 12
  %v4_11bf0 = inttoptr i32 %v3_11bf0 to i32*
  %v5_11bf0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11bf0, i32* %v4_11bf0, align 4
  %v6_11bf0 = add i32 %v0_11be054, 16
  store i32 %v6_11bf0, i32* %r3.global-to-local, align 4
  %v0_11bf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_11bf4 = add i32 %v0_11bf4, -8
  store i32 %v1_11bf4, i32* %r2.global-to-local, align 4
  %v5_11bfc = icmp slt i32 %v1_11bf4, 8
  br i1 %v5_11bfc, label %dec_label_pc_11bf0.dec_label_pc_11c18.loopexit_crit_edge, label %dec_label_pc_11c00

dec_label_pc_11c00:                               ; preds = %dec_label_pc_11bf0
  %v1_11c00 = inttoptr i32 %v6_11bf0 to i32*
  %v2_11c00 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_11c00, i32* %v1_11c00, align 4
  %v3_11c00 = add i32 %v0_11be054, 20
  %v4_11c00 = inttoptr i32 %v3_11c00 to i32*
  %v5_11c00 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11c00, i32* %v4_11c00, align 4
  %v6_11c00 = add i32 %v0_11be054, 24
  store i32 %v6_11c00, i32* %r3.global-to-local, align 4
  %v0_11c04 = load i32, i32* %r2.global-to-local, align 4
  %v1_11c04 = add i32 %v0_11c04, -8
  store i32 %v1_11c04, i32* %r2.global-to-local, align 4
  %v5_11c0c = icmp slt i32 %v1_11c04, 8
  br i1 %v5_11c0c, label %dec_label_pc_11c00.dec_label_pc_11c18.loopexit_crit_edge, label %dec_label_pc_11bd8

dec_label_pc_11bd8:                               ; preds = %dec_label_pc_11c00
  %v7_11c0c = inttoptr i32 %v6_11c00 to i32*
  %v8_11c0c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_11c0c, i32* %v7_11c0c, align 4
  %v9_11c0c = add i32 %v0_11be054, 28
  %v10_11c0c = inttoptr i32 %v9_11c0c to i32*
  %v11_11c0c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_11c0c, i32* %v10_11c0c, align 4
  %v12_11c0c = add i32 %v0_11be054, 32
  store i32 %v12_11c0c, i32* %r3.global-to-local, align 4
  %v6_11c10 = load i32, i32* %r2.global-to-local, align 4
  %v7_11c10 = add i32 %v6_11c10, -8
  store i32 %v7_11c10, i32* %r2.global-to-local, align 4
  %v5_11bdc = icmp slt i32 %v7_11c10, 8
  br i1 %v5_11bdc, label %dec_label_pc_11bd8.dec_label_pc_11c18.loopexit_crit_edge, label %dec_label_pc_11bd8.dec_label_pc_11be0_crit_edge

dec_label_pc_11bd8.dec_label_pc_11be0_crit_edge:  ; preds = %dec_label_pc_11bd8
  %v2_11be0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_11be0 = inttoptr i32 %v12_11c0c to i32*
  store i32 %v2_11be0.pre, i32* %v1_11be0, align 4
  %v3_11be0 = add i32 %v0_11be054, 36
  %v4_11be0 = inttoptr i32 %v3_11be0 to i32*
  %v5_11be0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_11be0, i32* %v4_11be0, align 4
  %v6_11be0 = add i32 %v0_11be054, 40
  store i32 %v6_11be0, i32* %r3.global-to-local, align 4
  %v0_11be4 = load i32, i32* %r2.global-to-local, align 4
  %v1_11be4 = add i32 %v0_11be4, -8
  store i32 %v1_11be4, i32* %r2.global-to-local, align 4
  %v5_11bec = icmp slt i32 %v1_11be4, 8
  br i1 %v5_11bec, label %dec_label_pc_11be0.dec_label_pc_11c18.loopexit_crit_edge, label %dec_label_pc_11bf0

dec_label_pc_11be0.dec_label_pc_11c18.loopexit_crit_edge: ; preds = %dec_label_pc_11bd8.dec_label_pc_11be0_crit_edge, %dec_label_pc_11be0.preheader
  %v1_11be4.lcssa = phi i32 [ %v1_11be452, %dec_label_pc_11be0.preheader ], [ %v1_11be4, %dec_label_pc_11bd8.dec_label_pc_11be0_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11c18

dec_label_pc_11bd8.dec_label_pc_11c18.loopexit_crit_edge: ; preds = %dec_label_pc_11bd8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11c18

dec_label_pc_11bf0.dec_label_pc_11c18.loopexit_crit_edge: ; preds = %dec_label_pc_11bf0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11c18

dec_label_pc_11c00.dec_label_pc_11c18.loopexit_crit_edge: ; preds = %dec_label_pc_11c00
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11c18

dec_label_pc_11c18:                               ; preds = %dec_label_pc_11bd4, %dec_label_pc_11be0.dec_label_pc_11c18.loopexit_crit_edge, %dec_label_pc_11bd8.dec_label_pc_11c18.loopexit_crit_edge, %dec_label_pc_11bf0.dec_label_pc_11c18.loopexit_crit_edge, %dec_label_pc_11c00.dec_label_pc_11c18.loopexit_crit_edge, %dec_label_pc_11bb0
  %v0_11c20 = phi i32 [ %v0_11bb4, %dec_label_pc_11bb0 ], [ %v1_11c04, %dec_label_pc_11c00.dec_label_pc_11c18.loopexit_crit_edge ], [ %v1_11bf4, %dec_label_pc_11bf0.dec_label_pc_11c18.loopexit_crit_edge ], [ %v7_11c10, %dec_label_pc_11bd8.dec_label_pc_11c18.loopexit_crit_edge ], [ %v1_11be4.lcssa, %dec_label_pc_11be0.dec_label_pc_11c18.loopexit_crit_edge ], [ %v0_11bd8.pr, %dec_label_pc_11bd4 ]
  %v2_11c18 = icmp eq i32 %v0_11c20, 0
  store i1 %v2_11c18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11c18, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_11c18
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_11c18
  %v1_11c20 = sub i32 7, %v0_11c20
  store i32 %v1_11c20, i32* %r2.global-to-local, align 4
  %v3_11c24 = mul i32 %v1_11c20, 4
  %v4_11c24 = add i32 %v3_11c24, ptrtoint (i32* @global_var_11c2c.398 to i32)
  call void @__pseudo_branch(i32 %v4_11c24)
  %v0_11c2c = load i32, i32* %r1.global-to-local, align 4
  %v1_11c2c = trunc i32 %v0_11c2c to i8
  %v2_11c2c = load i32, i32* %r3.global-to-local, align 4
  %v3_11c2c = inttoptr i32 %v2_11c2c to i8*
  store i8 %v1_11c2c, i8* %v3_11c2c, align 1
  %v4_11c2c = load i32, i32* %r3.global-to-local, align 4
  %v5_11c2c = add i32 %v4_11c2c, 1
  store i32 %v5_11c2c, i32* %r3.global-to-local, align 4
  %v0_11c30 = load i32, i32* %r1.global-to-local, align 4
  %v1_11c30 = trunc i32 %v0_11c30 to i8
  %v3_11c30 = inttoptr i32 %v5_11c2c to i8*
  store i8 %v1_11c30, i8* %v3_11c30, align 1
  %v4_11c30 = load i32, i32* %r3.global-to-local, align 4
  %v5_11c30 = add i32 %v4_11c30, 1
  store i32 %v5_11c30, i32* %r3.global-to-local, align 4
  %v0_11c34 = load i32, i32* %r1.global-to-local, align 4
  %v1_11c34 = trunc i32 %v0_11c34 to i8
  %v3_11c34 = inttoptr i32 %v5_11c30 to i8*
  store i8 %v1_11c34, i8* %v3_11c34, align 1
  %v4_11c34 = load i32, i32* %r3.global-to-local, align 4
  %v5_11c34 = add i32 %v4_11c34, 1
  store i32 %v5_11c34, i32* %r3.global-to-local, align 4
  %v0_11c38 = load i32, i32* %r1.global-to-local, align 4
  %v1_11c38 = trunc i32 %v0_11c38 to i8
  %v3_11c38 = inttoptr i32 %v5_11c34 to i8*
  store i8 %v1_11c38, i8* %v3_11c38, align 1
  %v4_11c38 = load i32, i32* %r3.global-to-local, align 4
  %v5_11c38 = add i32 %v4_11c38, 1
  store i32 %v5_11c38, i32* %r3.global-to-local, align 4
  %v0_11c3c = load i32, i32* %r1.global-to-local, align 4
  %v1_11c3c = trunc i32 %v0_11c3c to i8
  %v3_11c3c = inttoptr i32 %v5_11c38 to i8*
  store i8 %v1_11c3c, i8* %v3_11c3c, align 1
  %v4_11c3c = load i32, i32* %r3.global-to-local, align 4
  %v5_11c3c = add i32 %v4_11c3c, 1
  store i32 %v5_11c3c, i32* %r3.global-to-local, align 4
  %v0_11c40 = load i32, i32* %r1.global-to-local, align 4
  %v1_11c40 = trunc i32 %v0_11c40 to i8
  %v3_11c40 = inttoptr i32 %v5_11c3c to i8*
  store i8 %v1_11c40, i8* %v3_11c40, align 1
  %v4_11c40 = load i32, i32* %r3.global-to-local, align 4
  %v5_11c40 = add i32 %v4_11c40, 1
  store i32 %v5_11c40, i32* %r3.global-to-local, align 4
  %v0_11c44 = load i32, i32* %r1.global-to-local, align 4
  %v1_11c44 = trunc i32 %v0_11c44 to i8
  %v3_11c44 = inttoptr i32 %v5_11c40 to i8*
  store i8 %v1_11c44, i8* %v3_11c44, align 1
  %v4_11c44 = load i32, i32* %r3.global-to-local, align 4
  %v5_11c44 = add i32 %v4_11c44, 1
  store i32 %v5_11c44, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_11be0, { 1, 0 }
  uselistorder i32 %v12_11c0c, { 1, 2, 0 }
  uselistorder i32 %v0_11be054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_11bd8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_11bc8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_11bbc, { 1, 0 }
  uselistorder i32 %v0_11bb4, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 8, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 4, 1, 3, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_11c18, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_11bf0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_11c50(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_11c50:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_11c50 = sub i32 %arg1, %tmp
  %v1_11c54 = add i32 %v2_11c50, -1
  store i32 %v1_11c54, i32* %r2.global-to-local, align 4
  %v2_11c584 = load i8, i8* %arg2, align 1
  %v5_11c586 = add i32 %tmp, 1
  store i32 %v5_11c586, i32* %r1.global-to-local, align 4
  %v2_11c5c7 = icmp eq i8 %v2_11c584, 0
  store i1 %v2_11c5c7, i1* %cpsr_z.global-to-local, align 1
  %v5_11c608 = inttoptr i32 %arg1 to i8*
  store i8 %v2_11c584, i8* %v5_11c608, align 1
  %v0_11c649 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11c649, label %dec_label_pc_11c68, label %dec_label_pc_11c58.dec_label_pc_11c58_crit_edge

dec_label_pc_11c58.dec_label_pc_11c58_crit_edge:  ; preds = %dec_label_pc_11c50, %dec_label_pc_11c58.dec_label_pc_11c58_crit_edge
  %v0_11c58.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_11c60.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_11c58 = inttoptr i32 %v0_11c58.pre to i8*
  %v2_11c58 = load i8, i8* %v1_11c58, align 1
  %v5_11c58 = add i32 %v0_11c58.pre, 1
  store i32 %v5_11c58, i32* %r1.global-to-local, align 4
  %v2_11c5c = icmp eq i8 %v2_11c58, 0
  store i1 %v2_11c5c, i1* %cpsr_z.global-to-local, align 1
  %v4_11c60 = add i32 %v5_11c58, %v3_11c60.pre
  %v5_11c60 = inttoptr i32 %v4_11c60 to i8*
  store i8 %v2_11c58, i8* %v5_11c60, align 1
  %v0_11c64 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11c64, label %dec_label_pc_11c68, label %dec_label_pc_11c58.dec_label_pc_11c58_crit_edge

dec_label_pc_11c68:                               ; preds = %dec_label_pc_11c58.dec_label_pc_11c58_crit_edge, %dec_label_pc_11c50
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11c58.dec_label_pc_11c58_crit_edge, { 1, 0 }
}

define i32 @function_11c6c(i32 %arg1) local_unnamed_addr {
dec_label_pc_11c6c:
  %stack_var_-8 = alloca i32, align 4
  %v2_11c70 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_11c70, i32* @r1, align 4
  %v0_11c78 = call i32 @function_13c60()
  %v2_11c7c = icmp eq i32 %v0_11c78, 0
  br i1 %v2_11c7c, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_11c6c
  %v3_11c84 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_11c6c, %bb
  %v5_11c8c = phi i32 [ -1, %dec_label_pc_11c6c ], [ %v3_11c84, %bb ]
  ret i32 %v5_11c8c

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_11c90(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11c90:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11c90 = load i32, i32* @r4, align 4
  store i32 %v3_11c90, i32* %stack_var_-8, align 4
  %v5_11c94 = inttoptr i32 %arg3 to i32*
  %v6_11c94 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_11c94)
  store i32 %v6_11c94, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_11c94, -4095
  br i1 %tmp, label %dec_label_pc_11cb4, label %dec_label_pc_11ca4

dec_label_pc_11ca4:                               ; preds = %dec_label_pc_11c90
  %v0_11ca4 = call i32 @function_11b48()
  %v0_11ca8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11ca8 = sub i32 0, %v0_11ca8
  %v2_11cac = inttoptr i32 %v0_11ca4 to i32*
  store i32 %v1_11ca8, i32* %v2_11cac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11cb4

dec_label_pc_11cb4:                               ; preds = %dec_label_pc_11c90, %dec_label_pc_11ca4
  %v0_11cb4 = phi i32 [ %v6_11c94, %dec_label_pc_11c90 ], [ -1, %dec_label_pc_11ca4 ]
  %v2_11cb8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11cb8, i32* @r4, align 4
  ret i32 %v0_11cb4

; uselistorder directives
  uselistorder i32 %v6_11c94, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11cb4, { 1, 0 }
}

define i32 @function_11cbc(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11cbc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11cbc = load i32, i32* @r4, align 4
  store i32 %v3_11cbc, i32* %stack_var_-8, align 4
  %v5_11cc0 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_11cc0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11cc0, -4095
  br i1 %tmp, label %dec_label_pc_11ce0, label %dec_label_pc_11cd0

dec_label_pc_11cd0:                               ; preds = %dec_label_pc_11cbc
  %v0_11cd0 = call i32 @function_11b48()
  %v0_11cd4 = load i32, i32* %r4.global-to-local, align 4
  %v1_11cd4 = sub i32 0, %v0_11cd4
  %v2_11cd8 = inttoptr i32 %v0_11cd0 to i32*
  store i32 %v1_11cd4, i32* %v2_11cd8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11ce0

dec_label_pc_11ce0:                               ; preds = %dec_label_pc_11cbc, %dec_label_pc_11cd0
  %v0_11ce0 = phi i32 [ %v5_11cc0, %dec_label_pc_11cbc ], [ -1, %dec_label_pc_11cd0 ]
  %v2_11ce4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11ce4, i32* @r4, align 4
  ret i32 %v0_11ce0

; uselistorder directives
  uselistorder i32 %v5_11cc0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11ce0, { 1, 0 }
}

define i32 @function_11ce8(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11ce8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11ce8 = load i32, i32* @r4, align 4
  store i32 %v3_11ce8, i32* %stack_var_-8, align 4
  %v5_11cec = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_11cec, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11cec, -4095
  br i1 %tmp, label %dec_label_pc_11d0c, label %dec_label_pc_11cfc

dec_label_pc_11cfc:                               ; preds = %dec_label_pc_11ce8
  %v0_11cfc = call i32 @function_11b48()
  %v0_11d00 = load i32, i32* %r4.global-to-local, align 4
  %v1_11d00 = sub i32 0, %v0_11d00
  %v2_11d04 = inttoptr i32 %v0_11cfc to i32*
  store i32 %v1_11d00, i32* %v2_11d04, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11d0c

dec_label_pc_11d0c:                               ; preds = %dec_label_pc_11ce8, %dec_label_pc_11cfc
  %v0_11d0c = phi i32 [ %v5_11cec, %dec_label_pc_11ce8 ], [ -1, %dec_label_pc_11cfc ]
  %v2_11d10 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11d10, i32* @r4, align 4
  ret i32 %v0_11d0c

; uselistorder directives
  uselistorder i32 %v5_11cec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11d0c, { 1, 0 }
}

define i32 @function_11d14(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11d14:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11d14 = load i32, i32* @r4, align 4
  store i32 %v3_11d14, i32* %stack_var_-8, align 4
  %v5_11d18 = inttoptr i32 %arg3 to i32*
  %v6_11d18 = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_11d18)
  store i32 %v6_11d18, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_11d18, -4095
  br i1 %tmp, label %dec_label_pc_11d38, label %dec_label_pc_11d28

dec_label_pc_11d28:                               ; preds = %dec_label_pc_11d14
  %v0_11d28 = call i32 @function_11b48()
  %v0_11d2c = load i32, i32* %r4.global-to-local, align 4
  %v1_11d2c = sub i32 0, %v0_11d2c
  %v2_11d30 = inttoptr i32 %v0_11d28 to i32*
  store i32 %v1_11d2c, i32* %v2_11d30, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11d38

dec_label_pc_11d38:                               ; preds = %dec_label_pc_11d14, %dec_label_pc_11d28
  %v0_11d38 = phi i32 [ %v6_11d18, %dec_label_pc_11d14 ], [ -1, %dec_label_pc_11d28 ]
  %v2_11d3c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11d3c, i32* @r4, align 4
  ret i32 %v0_11d38

; uselistorder directives
  uselistorder i32 %v6_11d18, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11d38, { 1, 0 }
}

define i32 @function_11d40(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11d40:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11d40 = load i32, i32* @r4, align 4
  store i32 %v3_11d40, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_11d48 = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_11d48, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11d48, -4095
  br i1 %tmp, label %dec_label_pc_11d68, label %dec_label_pc_11d58

dec_label_pc_11d58:                               ; preds = %dec_label_pc_11d40
  %v0_11d58 = call i32 @function_11b48()
  %v0_11d5c = load i32, i32* %r4.global-to-local, align 4
  %v1_11d5c = sub i32 0, %v0_11d5c
  %v2_11d60 = inttoptr i32 %v0_11d58 to i32*
  store i32 %v1_11d5c, i32* %v2_11d60, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11d68

dec_label_pc_11d68:                               ; preds = %dec_label_pc_11d40, %dec_label_pc_11d58
  %v0_11d68 = phi i32 [ %v5_11d48, %dec_label_pc_11d40 ], [ -1, %dec_label_pc_11d58 ]
  %v2_11d6c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11d6c, i32* @r4, align 4
  ret i32 %v0_11d68

; uselistorder directives
  uselistorder i32 %v5_11d48, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11d68, { 1, 0 }
}

define i32 @function_11d70(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11d70:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11d70 = load i32, i32* @r4, align 4
  store i32 %v3_11d70, i32* %stack_var_-8, align 4
  %v2_11d74 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_11d74, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11d74, -4095
  br i1 %tmp, label %dec_label_pc_11d94, label %dec_label_pc_11d84

dec_label_pc_11d84:                               ; preds = %dec_label_pc_11d70
  %v0_11d84 = call i32 @function_11b48()
  %v0_11d88 = load i32, i32* %r4.global-to-local, align 4
  %v1_11d88 = sub i32 0, %v0_11d88
  %v2_11d8c = inttoptr i32 %v0_11d84 to i32*
  store i32 %v1_11d88, i32* %v2_11d8c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11d94

dec_label_pc_11d94:                               ; preds = %dec_label_pc_11d70, %dec_label_pc_11d84
  %v0_11d94 = phi i32 [ %v2_11d74, %dec_label_pc_11d70 ], [ -1, %dec_label_pc_11d84 ]
  %v2_11d98 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11d98, i32* @r4, align 4
  ret i32 %v0_11d94

; uselistorder directives
  uselistorder i32 %v2_11d74, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11d94, { 1, 0 }
}

define i32 @function_11d9c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11d9c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11d9c = load i32, i32* @r4, align 4
  store i32 %v3_11d9c, i32* %stack_var_-8, align 4
  %v5_11da0 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_11da0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11da0, -4095
  br i1 %tmp, label %dec_label_pc_11dc0, label %dec_label_pc_11db0

dec_label_pc_11db0:                               ; preds = %dec_label_pc_11d9c
  %v0_11db0 = call i32 @function_11b48()
  %v0_11db4 = load i32, i32* %r4.global-to-local, align 4
  %v1_11db4 = sub i32 0, %v0_11db4
  %v2_11db8 = inttoptr i32 %v0_11db0 to i32*
  store i32 %v1_11db4, i32* %v2_11db8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11dc0

dec_label_pc_11dc0:                               ; preds = %dec_label_pc_11d9c, %dec_label_pc_11db0
  %v0_11dc0 = phi i32 [ %v5_11da0, %dec_label_pc_11d9c ], [ -1, %dec_label_pc_11db0 ]
  %v2_11dc4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11dc4, i32* @r4, align 4
  ret i32 %v0_11dc0

; uselistorder directives
  uselistorder i32 %v5_11da0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11dc0, { 1, 0 }
}

define i32 @function_11dc8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_11dc8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11dc8 = load i32, i32* @r4, align 4
  store i32 %v3_11dc8, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_11dd4 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_11dd4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11dd4, -4095
  br i1 %tmp, label %dec_label_pc_11df4, label %dec_label_pc_11de4

dec_label_pc_11de4:                               ; preds = %dec_label_pc_11dc8
  %v0_11de4 = call i32 @function_11b48()
  %v0_11de8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11de8 = sub i32 0, %v0_11de8
  %v2_11dec = inttoptr i32 %v0_11de4 to i32*
  store i32 %v1_11de8, i32* %v2_11dec, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11df4

dec_label_pc_11df4:                               ; preds = %dec_label_pc_11dc8, %dec_label_pc_11de4
  %v0_11df4 = phi i32 [ %v5_11dd4, %dec_label_pc_11dc8 ], [ -1, %dec_label_pc_11de4 ]
  %v2_11df8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11df8, i32* @r4, align 4
  ret i32 %v0_11df4

; uselistorder directives
  uselistorder i32 %v5_11dd4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11df4, { 1, 0 }
}

define i32 @function_11dfc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11dfc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11dfc = load i32, i32* @r4, align 4
  store i32 %v3_11dfc, i32* %stack_var_-8, align 4
  %v5_11e00 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_11e00, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11e00, -4095
  br i1 %tmp, label %dec_label_pc_11e20, label %dec_label_pc_11e10

dec_label_pc_11e10:                               ; preds = %dec_label_pc_11dfc
  %v0_11e10 = call i32 @function_11b48()
  %v0_11e14 = load i32, i32* %r4.global-to-local, align 4
  %v1_11e14 = sub i32 0, %v0_11e14
  %v2_11e18 = inttoptr i32 %v0_11e10 to i32*
  store i32 %v1_11e14, i32* %v2_11e18, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e20

dec_label_pc_11e20:                               ; preds = %dec_label_pc_11dfc, %dec_label_pc_11e10
  %v0_11e20 = phi i32 [ %v5_11e00, %dec_label_pc_11dfc ], [ -1, %dec_label_pc_11e10 ]
  %v2_11e24 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11e24, i32* @r4, align 4
  ret i32 %v0_11e20

; uselistorder directives
  uselistorder i32 %v5_11e00, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e20, { 1, 0 }
}

define i32 @function_11e28(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_11e28:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_11e34 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_11e34, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11e34, -4095
  br i1 %tmp, label %dec_label_pc_11e54, label %dec_label_pc_11e44

dec_label_pc_11e44:                               ; preds = %dec_label_pc_11e28
  %v0_11e44 = call i32 @function_11b48()
  %v0_11e48 = load i32, i32* %r4.global-to-local, align 4
  %v1_11e48 = sub i32 0, %v0_11e48
  %v2_11e4c = inttoptr i32 %v0_11e44 to i32*
  store i32 %v1_11e48, i32* %v2_11e4c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e54

dec_label_pc_11e54:                               ; preds = %dec_label_pc_11e28, %dec_label_pc_11e44
  %v0_11e54 = phi i32 [ %v5_11e34, %dec_label_pc_11e28 ], [ -1, %dec_label_pc_11e44 ]
  ret i32 %v0_11e54

; uselistorder directives
  uselistorder i32 %v5_11e34, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e54, { 1, 0 }
}

define i32 @function_11e5c(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11e5c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11e5c = load i32, i32* @r4, align 4
  store i32 %v3_11e5c, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_11e64 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_11e64, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_11e64, -4095
  br i1 %tmp, label %dec_label_pc_11e84, label %dec_label_pc_11e74

dec_label_pc_11e74:                               ; preds = %dec_label_pc_11e5c
  %v0_11e74 = call i32 @function_11b48()
  %v0_11e78 = load i32, i32* %r4.global-to-local, align 4
  %v1_11e78 = sub i32 0, %v0_11e78
  %v2_11e7c = inttoptr i32 %v0_11e74 to i32*
  store i32 %v1_11e78, i32* %v2_11e7c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e84

dec_label_pc_11e84:                               ; preds = %dec_label_pc_11e5c, %dec_label_pc_11e74
  %v0_11e84 = phi i32 [ %v5_11e64, %dec_label_pc_11e5c ], [ -1, %dec_label_pc_11e74 ]
  %v2_11e88 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11e88, i32* @r4, align 4
  ret i32 %v0_11e84

; uselistorder directives
  uselistorder i32 %v5_11e64, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e84, { 1, 0 }
}

define i32 @function_11e8c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11e8c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11e8c = load i32, i32* @r4, align 4
  store i32 %v3_11e8c, i32* %stack_var_-8, align 4
  %v3_11e90 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_11e90, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_11e90, -4095
  br i1 %tmp, label %dec_label_pc_11eb0, label %dec_label_pc_11ea0

dec_label_pc_11ea0:                               ; preds = %dec_label_pc_11e8c
  %v0_11ea0 = call i32 @function_11b48()
  %v0_11ea4 = load i32, i32* %r4.global-to-local, align 4
  %v1_11ea4 = sub i32 0, %v0_11ea4
  %v2_11ea8 = inttoptr i32 %v0_11ea0 to i32*
  store i32 %v1_11ea4, i32* %v2_11ea8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11eb0

dec_label_pc_11eb0:                               ; preds = %dec_label_pc_11e8c, %dec_label_pc_11ea0
  %v0_11eb0 = phi i32 [ %v3_11e90, %dec_label_pc_11e8c ], [ -1, %dec_label_pc_11ea0 ]
  %v2_11eb4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11eb4, i32* @r4, align 4
  ret i32 %v0_11eb0

; uselistorder directives
  uselistorder i32 %v3_11e90, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11eb0, { 1, 0 }
}

define i32 @function_11eb8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11eb8:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_11ed4, label %dec_label_pc_11ec4

dec_label_pc_11ec4:                               ; preds = %dec_label_pc_11eb8
  %v8_11ec8 = icmp sgt i32 %arg1, 64
  br i1 %v8_11ec8, label %dec_label_pc_11ed4, label %dec_label_pc_11ecc

dec_label_pc_11ecc:                               ; preds = %dec_label_pc_11ec4
  %v0_11ed0 = call i32 @function_11fdc()
  br label %dec_label_pc_11ed4

dec_label_pc_11ed4:                               ; preds = %dec_label_pc_11ec4, %dec_label_pc_11eb8, %dec_label_pc_11ecc
  %v0_11ed4 = call i32 @function_11b48()
  %v2_11edc = inttoptr i32 %v0_11ed4 to i32*
  store i32 22, i32* %v2_11edc, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11ed4, { 2, 0, 1 }
}

define i32 @function_11ee8(i32 %arg1) local_unnamed_addr {
dec_label_pc_11ee8:
  store i32 128, i32* @r2, align 4
  %v0_11ef4 = load i32, i32* @r0, align 4
  %v2_11ef4 = inttoptr i32 %v0_11ef4 to i8*
  %v3_11ef4 = call i32 @function_11bb0(i8* %v2_11ef4, i32 0)
  ret i32 0
}

define i32 @function_11f00(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11f00:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_11f00 = load i32, i32* @r4, align 4
  store i32 %v3_11f00, i32* %stack_var_-12, align 4
  %v6_11f00 = load i32, i32* @r5, align 4
  %v10_11f00 = ptrtoint i32* %stack_var_-12 to i32
  %v7_11f04 = icmp eq i32 %arg2, -1
  %v0_11f10.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_11f04, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11f00
  br label %dec_label_pc_11f28

bb:                                               ; preds = %dec_label_pc_11f00
  %v2_11f0c = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_11f10.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_11f10.pre, 1
  br i1 %tmp19, label %dec_label_pc_11f28, label %dec_label_pc_11f18

dec_label_pc_11f18:                               ; preds = %bb
  %v7_11f1c = icmp sgt i32 %v0_11f10.pre, 64
  br i1 %v7_11f1c, label %dec_label_pc_11f28, label %bb20

bb20:                                             ; preds = %dec_label_pc_11f18
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_11f4c24 = add i32 %v10_11f00, 124
  store i32 %v5_11f4c24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11f3c

dec_label_pc_11f28:                               ; preds = %.thread, %dec_label_pc_11f18, %bb
  %v0_11f28 = call i32 @function_11b48()
  store i32 %v0_11f28, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11f34 = inttoptr i32 %v0_11f28 to i32*
  store i32 22, i32* %v2_11f34, align 4
  %v0_11fa8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11fa8

dec_label_pc_11f3c:                               ; preds = %bb20, %dec_label_pc_11f3c
  %v5_11f4c25 = phi i32 [ %v5_11f4c24, %bb20 ], [ %v5_11f4c, %dec_label_pc_11f3c ]
  %v2_11f40 = add i32 %v5_11f4c25, -136
  %v3_11f40 = inttoptr i32 %v2_11f40 to i32*
  store i32 0, i32* %v3_11f40, align 4
  %v0_11f44.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_11f44 = add i32 %v0_11f44.pre, -1
  store i32 %v1_11f44, i32* %r0.global-to-local, align 4
  %v6_11f44 = icmp slt i32 %v1_11f44, 0
  %v4_11f4c = mul i32 %v1_11f44, 4
  %v5_11f4c = add i32 %v4_11f4c, %v10_11f00
  store i32 %v5_11f4c, i32* %r2.global-to-local, align 4
  br i1 %v6_11f44, label %dec_label_pc_11f54, label %dec_label_pc_11f3c

dec_label_pc_11f54:                               ; preds = %dec_label_pc_11f3c
  %v2_11f54 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_11f54, i32* @r5, align 4
  %v2_11f58 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_11f58, i32* @r0, align 4
  %v0_11f5c = load i32, i32* @r4, align 4
  store i32 %v0_11f5c, i32* @r1, align 4
  %v0_11f60 = call i32 @function_11fdc()
  store i32 %v0_11f60, i32* %r0.global-to-local, align 4
  %v1_11f64 = icmp slt i32 %v0_11f60, 0
  br i1 %v1_11f64, label %dec_label_pc_11fa4, label %dec_label_pc_11f6c

dec_label_pc_11f6c:                               ; preds = %dec_label_pc_11f54
  %v0_11f6c = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1c718.400 to i32), i32* %r0.global-to-local, align 4
  %v2_11f74 = call i32 @function_11fb8(i32 ptrtoint (i32* @global_var_1c718.400 to i32), i32 %v0_11f6c)
  store i32 %v2_11f0c, i32* %r2.global-to-local, align 4
  %v0_11f8c = load i32, i32* @r4, align 4
  store i32 %v0_11f8c, i32* %r0.global-to-local, align 4
  %v4_11f94 = call i32 @function_12ea4(i32 %v0_11f8c, i32* nonnull %stack_var_-152, i32 %v2_11f0c)
  store i32 %v4_11f94, i32* %r0.global-to-local, align 4
  %v1_11f98 = icmp slt i32 %v4_11f94, 0
  br i1 %v1_11f98, label %dec_label_pc_11fa4, label %bb23

bb23:                                             ; preds = %dec_label_pc_11f6c
  %v5_11f9c = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_11f9c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11fa8

dec_label_pc_11fa4:                               ; preds = %dec_label_pc_11f6c, %dec_label_pc_11f54
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11fa8

dec_label_pc_11fa8:                               ; preds = %bb23, %dec_label_pc_11f28, %dec_label_pc_11fa4
  %v0_11fa8 = phi i32 [ %v5_11f9c, %bb23 ], [ %v0_11fa8.pre, %dec_label_pc_11f28 ], [ -1, %dec_label_pc_11fa4 ]
  store i32 %v0_11fa8, i32* %r0.global-to-local, align 4
  %v2_11fb0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_11fb0, i32* @r4, align 4
  store i32 %v6_11f00, i32* @r5, align 4
  ret i32 %v0_11fa8

; uselistorder directives
  uselistorder i32 %v0_11fa8, { 1, 0 }
  uselistorder i32 %v5_11f4c, { 1, 0 }
  uselistorder i32 %v1_11f44, { 0, 2, 1 }
  uselistorder i32 %v2_11f0c, { 1, 0 }
  uselistorder i32 %v0_11f10.pre, { 1, 0, 2 }
  uselistorder i32 %v10_11f00, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_11fa8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11f3c, { 1, 0 }
  uselistorder label %dec_label_pc_11f28, { 1, 2, 0 }
}

define i32 @function_11fb8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11fb8:
  %v1_11fb8 = add i32 %arg2, -1
  %v3_11fbc = udiv i32 %v1_11fb8, 32
  %v4_11fc0 = mul nuw nsw i32 %v3_11fbc, 4
  %v5_11fc0 = add i32 %v4_11fc0, %arg1
  %v6_11fc0 = inttoptr i32 %v5_11fc0 to i32*
  %v7_11fc0 = load i32, i32* %v6_11fc0, align 4
  %v1_11fc4 = urem i32 %v1_11fb8, 32
  %v7_11fcc = shl i32 1, %v1_11fc4
  %v8_11fcc = and i32 %v7_11fc0, %v7_11fcc
  %v10_11fcc = icmp ne i32 %v8_11fcc, 0
  %. = zext i1 %v10_11fcc to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_11fb8, { 1, 0 }
}

define i32 @function_11fdc() local_unnamed_addr {
dec_label_pc_11fdc:
  %v0_11fdc = load i32, i32* @r1, align 4
  %v1_11fdc = add i32 %v0_11fdc, -1
  %v3_11fe0 = udiv i32 %v1_11fdc, 32
  store i32 %v3_11fe0, i32* @ip, align 4
  %v0_11fe4 = load i32, i32* @r0, align 4
  %v4_11fe4 = mul nuw nsw i32 %v3_11fe0, 4
  %v5_11fe4 = add i32 %v0_11fe4, %v4_11fe4
  %v6_11fe4 = inttoptr i32 %v5_11fe4 to i32*
  %v7_11fe4 = load i32, i32* %v6_11fe4, align 4
  %v1_11fe8 = urem i32 %v1_11fdc, 32
  %v7_11ff0 = shl i32 1, %v1_11fe8
  %v8_11ff0 = or i32 %v7_11fe4, %v7_11ff0
  store i32 %v8_11ff0, i32* %v6_11fe4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_11fe0, { 1, 0 }
  uselistorder i32 %v1_11fdc, { 1, 0 }
}

define i32 @function_12000(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12000:
  %v1_12000 = add i32 %arg2, -1
  %v3_12004 = udiv i32 %v1_12000, 32
  %v4_12008 = mul nuw nsw i32 %v3_12004, 4
  %v5_12008 = add i32 %v4_12008, %arg1
  %v6_12008 = inttoptr i32 %v5_12008 to i32*
  %v7_12008 = load i32, i32* %v6_12008, align 4
  %v1_1200c = urem i32 %v1_12000, 32
  %tmp = shl i32 -1, %v1_1200c
  %v8_12014 = add i32 %tmp, -1
  %v9_12014 = and i32 %v7_12008, %v8_12014
  store i32 %v9_12014, i32* %v6_12008, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_12000, { 1, 0 }
}

define i32 @function_12024(i32 %arg1) local_unnamed_addr {
dec_label_pc_12024:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12024 = load i32, i32* @r4, align 4
  %v6_12024 = load i32, i32* @r5, align 4
  %v9_12024 = load i32, i32* @r6, align 4
  %v0_12028 = load i32, i32* %r0.global-to-local, align 4
  %v2_12028 = icmp eq i32 %v0_12028, 0
  %v2_1202c = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_12028, label %bb, label %dec_label_pc_12038

bb:                                               ; preds = %dec_label_pc_12024
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12040

dec_label_pc_12038:                               ; preds = %dec_label_pc_12024
  %tmp = icmp ugt i32 %v0_12028, -8
  br i1 %tmp, label %dec_label_pc_12144, label %dec_label_pc_12040

dec_label_pc_12040:                               ; preds = %bb, %dec_label_pc_12038
  %v0_12040 = phi i32 [ %v0_12028, %dec_label_pc_12038 ], [ 1, %bb ]
  %v1_12040 = add i32 %v0_12040, 4
  store i32 %v1_12040, i32* %stack_var_-20, align 4
  store i32 %v2_1202c, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1c598.402 to i32), i32* %r0.global-to-local, align 4
  %v1_12058 = call i32 @function_12bb8()
  store i32 ptrtoint (i32** @global_var_1c3dc.406 to i32), i32* %r0.global-to-local, align 4
  %v3_12064 = call i32 @function_123d8(i32* bitcast (i32** @global_var_1c3dc.406 to i32*), i32 %v2_1202c)
  store i32 %v3_12064, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c598.402 to i32), i32* %r0.global-to-local, align 4
  store i32 73852, i32* @lr, align 4
  %v1_12078 = call i32 @function_12bb8()
  store i32 %v1_12078, i32* %r0.global-to-local, align 4
  %v2_1207c = icmp eq i32 %v3_12064, 0
  br i1 %v2_1207c, label %dec_label_pc_12084, label %dec_label_pc_12134

dec_label_pc_12084:                               ; preds = %dec_label_pc_12040
  %v2_12088 = load i32, i32* @global_var_1c5c0.409, align 4
  store i32 %v2_12088, i32* @r4, align 4
  %v2_1208c = load i32, i32* %stack_var_-20, align 4
  %v3_12090 = icmp ult i32 %v2_1208c, %v2_12088
  br i1 %v3_12090, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_12084
  %v3_12094 = add i32 %v2_12088, -1
  %v2_12098 = add i32 %v3_12094, %v2_1208c
  %v2_1209c = sub i32 0, %v2_12088
  %v3_120a0 = and i32 %v2_12098, %v2_1209c
  store i32 %v3_120a0, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12084, %bb14
  store i32 ptrtoint (i32* @global_var_1c798.411 to i32), i32* %r0.global-to-local, align 4
  %v1_120ac = call i32 @function_12bb8()
  %v0_120b0 = load i32, i32* @r4, align 4
  store i32 %v0_120b0, i32* %r0.global-to-local, align 4
  %v1_120b4 = call i32 @function_1336c(i32 %v0_120b0)
  store i32 %v1_120b4, i32* %r0.global-to-local, align 4
  %v7_120b8 = icmp eq i32 %v1_120b4, -1
  br i1 %v7_120b8, label %bb15, label %dec_label_pc_120c4

bb15:                                             ; preds = %.thread3
  store i32 %v1_120b4, i32* @r5, align 4
  br label %dec_label_pc_120d8

dec_label_pc_120c4:                               ; preds = %.thread3
  %v1_120c4 = add i32 %v1_120b4, 3
  %v1_120c8 = and i32 %v1_120c4, -4
  store i32 %v1_120c8, i32* @r5, align 4
  %v9_120cc = icmp eq i32 %v1_120c8, %v1_120b4
  br i1 %v9_120cc, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_120c4
  %v3_120d0 = sub i32 %v1_120c8, %v1_120b4
  store i32 %v3_120d0, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_120c4, %bb16
  %v1_120d4 = xor i1 %v9_120cc, true
  call void @__pseudo_cond_branch(i1 %v1_120d4, i32 ptrtoint (i32* @global_var_1336c.412 to i32))
  br label %dec_label_pc_120d8

dec_label_pc_120d8:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1c798.411 to i32), i32* %r0.global-to-local, align 4
  store i32 73960, i32* @lr, align 4
  %v1_120e4 = call i32 @function_12bb8()
  store i32 %v1_120e4, i32* %r0.global-to-local, align 4
  %v0_120e8 = load i32, i32* @r5, align 4
  %v7_120e8 = icmp eq i32 %v0_120e8, -1
  br i1 %v7_120e8, label %dec_label_pc_12144, label %dec_label_pc_120f0

dec_label_pc_120f0:                               ; preds = %dec_label_pc_120d8
  store i32 ptrtoint (i32* @global_var_1c598.402 to i32), i32* %r0.global-to-local, align 4
  %v1_120fc = call i32 @function_12bb8()
  %v0_12100 = load i32, i32* @r4, align 4
  %v0_12104 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1c3dc.406 to i32), i32* %r0.global-to-local, align 4
  %v4_1210c = call i32 @function_1252c(i32* bitcast (i32** @global_var_1c3dc.406 to i32*), i32 %v0_12104, i32 %v0_12100)
  store i32 ptrtoint (i32** @global_var_1c3dc.406 to i32), i32* %r0.global-to-local, align 4
  %v3_12118 = call i32 @function_123d8(i32* bitcast (i32** @global_var_1c3dc.406 to i32*), i32 %v2_1202c)
  store i32 %v3_12118, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c598.402 to i32), i32* %r0.global-to-local, align 4
  store i32 74028, i32* @lr, align 4
  %v1_12128 = call i32 @function_12bb8()
  store i32 %v1_12128, i32* %r0.global-to-local, align 4
  %v2_1212c = icmp eq i32 %v3_12118, 0
  br i1 %v2_1212c, label %dec_label_pc_12144, label %dec_label_pc_12134

dec_label_pc_12134:                               ; preds = %dec_label_pc_12040, %dec_label_pc_120f0
  %v1_12138 = phi i32 [ %v3_12064, %dec_label_pc_12040 ], [ %v3_12118, %dec_label_pc_120f0 ]
  %v2_12134 = load i32, i32* %stack_var_-20, align 4
  %v2_12138 = inttoptr i32 %v1_12138 to i32*
  store i32 %v2_12134, i32* %v2_12138, align 4
  %v3_12138 = load i32, i32* %r4.global-to-local, align 4
  %v4_12138 = add i32 %v3_12138, 4
  store i32 %v4_12138, i32* %r4.global-to-local, align 4
  %v2_1213c = icmp eq i32 %v4_12138, 0
  br i1 %v2_1213c, label %dec_label_pc_12144, label %dec_label_pc_12154

dec_label_pc_12144:                               ; preds = %dec_label_pc_12134, %dec_label_pc_120f0, %dec_label_pc_120d8, %dec_label_pc_12038
  %v0_12144 = call i32 @function_11b48()
  store i32 %v0_12144, i32* %r0.global-to-local, align 4
  %v2_1214c = inttoptr i32 %v0_12144 to i32*
  store i32 12, i32* %v2_1214c, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12154

dec_label_pc_12154:                               ; preds = %dec_label_pc_12134, %dec_label_pc_12144
  %v0_12154 = phi i32 [ %v4_12138, %dec_label_pc_12134 ], [ 0, %dec_label_pc_12144 ]
  store i32 %v0_12154, i32* %r0.global-to-local, align 4
  store i32 %v3_12024, i32* @r4, align 4
  store i32 %v6_12024, i32* @r5, align 4
  store i32 %v9_12024, i32* @r6, align 4
  ret i32 %v0_12154

; uselistorder directives
  uselistorder i32 %v0_12154, { 1, 0 }
  uselistorder i32 %v3_12118, { 1, 0, 2 }
  uselistorder i32 %v1_120c8, { 1, 0, 2 }
  uselistorder i32 %v1_120b4, { 3, 0, 2, 4, 1, 5 }
  uselistorder i32 %v3_12064, { 1, 0, 2 }
  uselistorder i32 %v0_12028, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 6, 8, 1, 7, 9, 10, 11, 4, 13, 12, 5, 15, 14, 0, 16, 17, 18, 19, 2, 3 }
  uselistorder label %dec_label_pc_12154, { 1, 0 }
  uselistorder label %dec_label_pc_12134, { 1, 0 }
  uselistorder label %dec_label_pc_120d8, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_12040, { 1, 0 }
}

define i32 @function_12178(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12178:
  %stack_var_-12 = alloca i32, align 4
  %v3_12178 = load i32, i32* @r4, align 4
  store i32 %v3_12178, i32* %stack_var_-12, align 4
  %v6_12178 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_12180 = mul i32 %arg2, %arg1
  store i32 %v2_12180, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_12184 = icmp eq i32 %arg1, 0
  store i32 %v2_12180, i32* @r0, align 4
  br i1 %v2_12184, label %dec_label_pc_121b0, label %dec_label_pc_12190

dec_label_pc_12190:                               ; preds = %dec_label_pc_12178
  %v0_12190 = call i32 @function_111ec()
  %v0_12194 = load i32, i32* @r5, align 4
  %v9_12194 = icmp eq i32 %v0_12194, %v0_12190
  store i32 0, i32* @r5, align 4
  br i1 %v9_12194, label %dec_label_pc_12190.dec_label_pc_121b0_crit_edge, label %dec_label_pc_121a0

dec_label_pc_12190.dec_label_pc_121b0_crit_edge:  ; preds = %dec_label_pc_12190
  %v0_121b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_121b0

dec_label_pc_121a0:                               ; preds = %dec_label_pc_12190
  %v0_121a0 = call i32 @function_11b48()
  %v2_121a8 = inttoptr i32 %v0_121a0 to i32*
  store i32 12, i32* %v2_121a8, align 4
  br label %dec_label_pc_121c8

dec_label_pc_121b0:                               ; preds = %dec_label_pc_12190.dec_label_pc_121b0_crit_edge, %dec_label_pc_12178
  %v0_121b0 = phi i32 [ %v0_121b0.pre, %dec_label_pc_12190.dec_label_pc_121b0_crit_edge ], [ %v2_12180, %dec_label_pc_12178 ]
  %v1_121b4 = call i32 @function_12024(i32 %v0_121b0)
  store i32 %v1_121b4, i32* @r5, align 4
  store i32 74184, i32* @lr, align 4
  %v1_121c4 = icmp ne i32 %v1_121b4, 0
  call void @__pseudo_cond_branch(i1 %v1_121c4, i32 ptrtoint (i32* @global_var_11bb0.413 to i32))
  br label %dec_label_pc_121c8

dec_label_pc_121c8:                               ; preds = %dec_label_pc_121a0, %dec_label_pc_121b0
  %v0_121c8 = load i32, i32* @r5, align 4
  %v2_121cc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_121cc, i32* @r4, align 4
  store i32 %v6_12178, i32* @r5, align 4
  ret i32 %v0_121c8

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_121c8, { 1, 0 }
}

define i32 @function_121d0() local_unnamed_addr {
dec_label_pc_121d0:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_121d0 = load i32, i32* @r0, align 4
  %v2_121d0 = icmp eq i32 %v0_121d0, 0
  %v3_121d4 = load i32, i32* @r4, align 4
  store i32 %v3_121d4, i32* %stack_var_-24, align 4
  %v6_121d4 = load i32, i32* @r5, align 4
  %v9_121d4 = load i32, i32* @r6, align 4
  %v15_121d4 = load i32, i32* @r8, align 4
  br i1 %v2_121d0, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_121d0
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_121d0
  %v1_121dc = add i32 %v0_121d0, -4
  %v2_121dc = inttoptr i32 %v1_121dc to i32*
  %v3_121dc = load i32, i32* %v2_121dc, align 4
  store i32 %v3_121dc, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1c3dc.406 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_121dc, i32* @r4, align 4
  %v1_121f4 = call i32 @function_12bb8()
  %v0_121f8 = load i32, i32* @r4, align 4
  %v0_121fc = load i32, i32* @r5, align 4
  %v4_12204 = call i32 @function_1252c(i32* bitcast (i32** @global_var_1c3dc.406 to i32*), i32 %v0_121f8, i32 %v0_121fc)
  %v1_1220c = inttoptr i32 %v4_12204 to i32*
  %v2_1220c = load i32, i32* %v1_1220c, align 4
  store i32 %v2_1220c, i32* %r6.global-to-local, align 4
  %v2_12210 = load i32, i32* @global_var_1c5c0.409, align 4
  %v4_12214 = mul i32 %v2_12210, 8
  %v6_12214 = icmp ult i32 %v2_1220c, %v4_12214
  store i32 %v4_12204, i32* @r4, align 4
  br i1 %v6_12214, label %dec_label_pc_12254, label %dec_label_pc_12220

dec_label_pc_12220:                               ; preds = %bb11
  %v1_12228 = call i32 @function_12bb8()
  %v1_12230 = call i32 @function_1336c(i32 0)
  %v0_12234 = load i32, i32* @r4, align 4
  %v1_12234 = add i32 %v0_12234, 12
  store i32 %v1_12234, i32* @r5, align 4
  %v9_12238 = icmp eq i32 %v1_12234, %v1_12230
  br i1 %v9_12238, label %dec_label_pc_1225c, label %dec_label_pc_12240

dec_label_pc_12240:                               ; preds = %dec_label_pc_12220
  %v1_1224c = call i32 @function_12bb8()
  br label %dec_label_pc_12254

dec_label_pc_12254:                               ; preds = %bb11, %dec_label_pc_12240, %bb14
  %v2_12254 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12254, i32* @r4, align 4
  store i32 %v6_121d4, i32* @r5, align 4
  store i32 %v9_121d4, i32* %r6.global-to-local, align 4
  store i32 %v15_121d4, i32* %r8.global-to-local, align 4
  %v0_12258 = call i32 @function_12bb8()
  %v0_1225c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1225c

dec_label_pc_1225c:                               ; preds = %dec_label_pc_12220, %dec_label_pc_12254
  %v1_12264 = phi i32 [ %v0_12234, %dec_label_pc_12220 ], [ %v0_1225c.pre, %dec_label_pc_12254 ]
  %v1_1225c = add i32 %v1_12264, 4
  %v2_1225c = inttoptr i32 %v1_1225c to i32*
  %v3_1225c = load i32, i32* %v2_1225c, align 4
  %v2_12260 = icmp eq i32 %v3_1225c, 0
  br i1 %v2_12260, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_1225c
  %v2_12264 = add i32 %v1_12264, 8
  %v3_12264 = inttoptr i32 %v2_12264 to i32*
  %v4_12264 = load i32, i32* %v3_12264, align 4
  %v3_12268 = add i32 %v3_1225c, 8
  %v4_12268 = inttoptr i32 %v3_12268 to i32*
  store i32 %v4_12264, i32* %v4_12268, align 4
  %v0_1226c.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1225c, %bb12
  %v0_1226c = phi i32 [ %v1_12264, %dec_label_pc_1225c ], [ %v0_1226c.pre, %bb12 ]
  %v1_1226c = add i32 %v0_1226c, 8
  %v2_1226c = inttoptr i32 %v1_1226c to i32*
  %v3_1226c = load i32, i32* %v2_1226c, align 4
  %v1_12270 = add i32 %v0_1226c, 4
  %v2_12270 = inttoptr i32 %v1_12270 to i32*
  %v3_12270 = load i32, i32* %v2_12270, align 4
  %v2_12274 = icmp eq i32 %v3_1226c, 0
  br i1 %v2_12274, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_12278 = add i32 %v3_1226c, 4
  %v4_12278 = inttoptr i32 %v3_12278 to i32*
  store i32 %v3_12270, i32* %v4_12278, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_1227c = load i32, i32* %r8.global-to-local, align 4
  %v3_1227c = inttoptr i32 %v2_1227c to i32*
  store i32 %v3_12270, i32* %v3_1227c, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_1228c = call i32 @function_12bb8()
  %v0_12290 = load i32, i32* %r6.global-to-local, align 4
  %v1_12290 = load i32, i32* @r4, align 4
  %v0_12298 = load i32, i32* @r5, align 4
  %v2_12290 = sub i32 12, %v0_12290
  %v1_12294 = add i32 %v2_12290, %v1_12290
  %v2_12298 = sub i32 %v1_12294, %v0_12298
  %v1_1229c = call i32 @function_1336c(i32 %v2_12298)
  br label %dec_label_pc_12254

; uselistorder directives
  uselistorder i32 %v0_1226c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_1336c, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_1225c, { 1, 0 }
  uselistorder label %dec_label_pc_12254, { 2, 1, 0 }
}

define i32 @function_122c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_122c0:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_122c0 = load i32, i32* @r4, align 4
  store i32 %v3_122c0, i32* %stack_var_-24, align 4
  %v6_122c0 = load i32, i32* @r5, align 4
  %v9_122c0 = load i32, i32* @r6, align 4
  %v12_122c0 = load i32, i32* @r7, align 4
  %v15_122c0 = load i32, i32* @r8, align 4
  %v18_122c0 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_122c4 = icmp eq i32 %arg2, 0
  %v0_122c8 = load i32, i32* @r0, align 4
  store i32 %v0_122c8, i32* @r7, align 4
  br i1 %v2_122c4, label %dec_label_pc_122d0, label %dec_label_pc_122d8

dec_label_pc_122d0:                               ; preds = %dec_label_pc_122c0
  %v0_122d0 = call i32 @function_121d0()
  %v0_122e0.pre = load i32, i32* @r4, align 4
  %v2_122e4.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_122e0

dec_label_pc_122d8:                               ; preds = %dec_label_pc_122c0
  %v2_122d8 = icmp eq i32 %v0_122c8, 0
  br i1 %v2_122d8, label %dec_label_pc_122e0, label %dec_label_pc_122ec

dec_label_pc_122e0:                               ; preds = %dec_label_pc_122d8, %dec_label_pc_122d0
  %v2_122e4 = phi i32 [ %v3_122c0, %dec_label_pc_122d8 ], [ %v2_122e4.pre, %dec_label_pc_122d0 ]
  %v0_122e0 = phi i32 [ %arg2, %dec_label_pc_122d8 ], [ %v0_122e0.pre, %dec_label_pc_122d0 ]
  store i32 %v2_122e4, i32* @r4, align 4
  store i32 %v6_122c0, i32* @r5, align 4
  store i32 %v9_122c0, i32* @r6, align 4
  store i32 %v12_122c0, i32* @r7, align 4
  store i32 %v18_122c0, i32* @lr, align 4
  %v1_122e8 = call i32 @function_12024(i32 %v0_122e0)
  %v0_122ec.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_122ec

dec_label_pc_122ec:                               ; preds = %dec_label_pc_122d8, %dec_label_pc_122e0
  %v0_12304 = phi i32 [ %v0_122c8, %dec_label_pc_122d8 ], [ %v1_122e8, %dec_label_pc_122e0 ]
  %v0_122ec = phi i32 [ %arg2, %dec_label_pc_122d8 ], [ %v0_122ec.pre, %dec_label_pc_122e0 ]
  %v1_122ec = add i32 %v0_122ec, 7
  %v1_122f0 = and i32 %v1_122ec, -4
  store i32 %v1_122f0, i32* @r5, align 4
  %v2_122f4 = icmp ugt i32 %v1_122f0, 10
  %v1_122f8 = add i32 %v0_12304, -4
  %v2_122f8 = inttoptr i32 %v1_122f8 to i32*
  %v3_122f8 = load i32, i32* %v2_122f8, align 4
  store i32 %v3_122f8, i32* @r6, align 4
  br i1 %v2_122f4, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_122ec
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_122ec, %bb
  %v0_12380 = phi i32 [ %v1_122f0, %dec_label_pc_122ec ], [ 12, %bb ]
  store i32 %v1_122f8, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_12380, %v3_122f8
  br i1 %tmp, label %dec_label_pc_1230c, label %dec_label_pc_12380

dec_label_pc_1230c:                               ; preds = %bb14
  %v2_12300 = sub i32 %v0_12380, %v3_122f8
  %v1_1231c = call i32 @function_12bb8()
  %v0_12324 = load i32, i32* @r8, align 4
  %v1_12324 = load i32, i32* @r6, align 4
  %v2_12324 = add i32 %v1_12324, %v0_12324
  %v4_1232c = call i32 @function_1246c(i32* bitcast (i32** @global_var_1c3dc.406 to i32*), i32 %v2_12324, i32 %v2_12300)
  store i32 %v4_1232c, i32* @r4, align 4
  store i32 74564, i32* @lr, align 4
  %v1_12340 = call i32 @function_12bb8()
  %v0_12344 = load i32, i32* @r4, align 4
  %v2_12344 = icmp eq i32 %v0_12344, 0
  br i1 %v2_12344, label %dec_label_pc_12354, label %.thread

.thread:                                          ; preds = %dec_label_pc_1230c
  %v1_12348 = load i32, i32* @r6, align 4
  %v3_12348 = add i32 %v1_12348, %v0_12344
  %v2_1234c = load i32, i32* @r7, align 4
  %v3_1234c = add i32 %v2_1234c, -4
  %v4_1234c = inttoptr i32 %v3_1234c to i32*
  store i32 %v3_12348, i32* %v4_1234c, align 4
  br label %dec_label_pc_123c0

dec_label_pc_12354:                               ; preds = %dec_label_pc_1230c
  %v0_12354 = load i32, i32* @r5, align 4
  %v1_12354 = add i32 %v0_12354, -4
  %v1_12358 = call i32 @function_12024(i32 %v1_12354)
  store i32 %v1_12358, i32* @r0, align 4
  store i32 %v1_12358, i32* @r4, align 4
  %v2_1235c = icmp eq i32 %v1_12358, 0
  br i1 %v2_1235c, label %dec_label_pc_12378, label %dec_label_pc_12364

dec_label_pc_12364:                               ; preds = %dec_label_pc_12354
  %v0_12364 = load i32, i32* @r6, align 4
  %v1_12364 = add i32 %v0_12364, -4
  store i32 %v1_12364, i32* @r2, align 4
  %v0_12368 = load i32, i32* @r7, align 4
  store i32 %v0_12368, i32* @r1, align 4
  %v3_1236c = call i32 @function_11b90(i32 %v1_12358, i32 %v0_12368, i32 %v1_12364)
  %v0_12370 = load i32, i32* @r7, align 4
  store i32 %v0_12370, i32* @r0, align 4
  %v0_12374 = call i32 @function_121d0()
  %v0_12378.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12378

dec_label_pc_12378:                               ; preds = %dec_label_pc_12354, %dec_label_pc_12364
  %v0_12378 = phi i32 [ 0, %dec_label_pc_12354 ], [ %v0_12378.pre, %dec_label_pc_12364 ]
  store i32 %v0_12378, i32* @r7, align 4
  br label %dec_label_pc_123c0

dec_label_pc_12380:                               ; preds = %bb14
  %v1_12380 = add i32 %v0_12380, 28
  %tmp15 = icmp ugt i32 %v1_12380, %v3_122f8
  br i1 %tmp15, label %dec_label_pc_123c0, label %dec_label_pc_1238c

dec_label_pc_1238c:                               ; preds = %dec_label_pc_12380
  %v1_12398 = call i32 @function_12bb8()
  %v0_1239c = load i32, i32* @r8, align 4
  %v1_1239c = load i32, i32* @r5, align 4
  %v2_1239c = add i32 %v1_1239c, %v0_1239c
  %v1_123a0 = load i32, i32* @r6, align 4
  %v2_123a0 = sub i32 %v1_123a0, %v1_1239c
  %v4_123a8 = call i32 @function_1252c(i32* bitcast (i32** @global_var_1c3dc.406 to i32*), i32 %v2_1239c, i32 %v2_123a0)
  store i32 74684, i32* @lr, align 4
  %v1_123b8 = call i32 @function_12bb8()
  %v0_123bc = load i32, i32* @r5, align 4
  %v1_123bc = load i32, i32* @r7, align 4
  %v2_123bc = add i32 %v1_123bc, -4
  %v3_123bc = inttoptr i32 %v2_123bc to i32*
  store i32 %v0_123bc, i32* %v3_123bc, align 4
  br label %dec_label_pc_123c0

dec_label_pc_123c0:                               ; preds = %.thread, %dec_label_pc_12380, %dec_label_pc_12378, %dec_label_pc_1238c
  %v0_123c0 = load i32, i32* @r7, align 4
  %v2_123c4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_123c4, i32* @r4, align 4
  store i32 %v6_122c0, i32* @r5, align 4
  store i32 %v9_122c0, i32* @r6, align 4
  store i32 %v12_122c0, i32* @r7, align 4
  store i32 %v15_122c0, i32* @r8, align 4
  ret i32 %v0_123c0

; uselistorder directives
  uselistorder i32 %v1_1239c, { 1, 0 }
  uselistorder i32 %v0_12380, { 1, 2, 0 }
  uselistorder i32 %v3_122f8, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1c3dc.406, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1c3dc.406 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_12024, { 1, 41, 0, 4, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2 }
  uselistorder i32 ()* @function_121d0, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32* @r8, { 89, 90, 91, 92, 94, 93, 8, 4, 5, 6, 7, 110, 111, 112, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 2, 54, 55, 56, 57, 58, 59, 60, 61, 1, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 3, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 113, 114, 115, 116, 117, 118, 119, 120, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32* @r7, { 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 9, 10, 11, 15, 16, 17, 2, 6, 7, 8, 24, 12, 13, 14, 4, 18, 3, 19, 20, 21, 22, 23, 25, 1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 222, 223, 224, 97, 98, 99, 100, 50, 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 5, 60, 61, 62, 63, 64, 65, 66, 67, 68, 79, 80, 81, 82, 83, 84, 85, 86, 87, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 88, 89, 90, 91, 92, 93, 94, 95, 96 }
  uselistorder label %dec_label_pc_123c0, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_12378, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_122ec, { 1, 0 }
}

define i32 @function_123d8(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_123d8:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_123d8 = inttoptr i32 %arg2 to i32*
  %v2_123d8 = load i32, i32* %v1_123d8, align 4
  %v3_123dc = load i32, i32* @r4, align 4
  store i32 %v3_123dc, i32* %stack_var_-8, align 4
  %v1_123e0 = add i32 %v2_123d8, 3
  %v1_123e4 = and i32 %v1_123e0, -4
  store i32 %v1_123e4, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_123ec = icmp ugt i32 %v1_123e4, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_123f4 = load i32, i32* %arg1, align 4
  store i32 %v2_123f4, i32* %r0.global-to-local, align 4
  br i1 %v2_123ec, label %dec_label_pc_12460.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_123d8
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12460.preheader

dec_label_pc_12460.preheader:                     ; preds = %dec_label_pc_123d8, %bb
  %v1_12414 = phi i32 [ %v1_123e4, %dec_label_pc_123d8 ], [ 12, %bb ]
  %v2_124609 = icmp eq i32 %v2_123f4, 0
  br i1 %v2_124609, label %dec_label_pc_12468, label %dec_label_pc_12400

dec_label_pc_12400:                               ; preds = %dec_label_pc_12460.preheader, %dec_label_pc_1245c
  %v2_12418 = phi i32 [ %v3_1245c, %dec_label_pc_1245c ], [ %v2_123f4, %dec_label_pc_12460.preheader ]
  %v1_12400 = inttoptr i32 %v2_12418 to i32*
  %v2_12400 = load i32, i32* %v1_12400, align 4
  store i32 %v2_12400, i32* %ip.global-to-local, align 4
  %v3_12404 = icmp ult i32 %v2_12400, %v1_12414
  br i1 %v3_12404, label %dec_label_pc_1245c, label %dec_label_pc_1240c

dec_label_pc_1240c:                               ; preds = %dec_label_pc_12400
  %v1_1240c = add i32 %v1_12414, 44
  %v3_12410 = icmp ult i32 %v2_12400, %v1_1240c
  br i1 %v3_12410, label %dec_label_pc_12420, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_1240c
  %v2_12404.le = sub i32 %v2_12400, %v1_12414
  store i32 %v2_12404.le, i32* %v1_12400, align 4
  %v0_1244c.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_12454.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_12420:                               ; preds = %dec_label_pc_1240c
  %v1_12420 = add i32 %v2_12418, 4
  %v2_12420 = inttoptr i32 %v1_12420 to i32*
  %v3_12420 = load i32, i32* %v2_12420, align 4
  store i32 %v3_12420, i32* %r2.global-to-local, align 4
  %v2_12424 = icmp eq i32 %v3_12420, 0
  br i1 %v2_12424, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_12420
  %v2_12428 = add i32 %v2_12418, 8
  %v3_12428 = inttoptr i32 %v2_12428 to i32*
  %v4_12428 = load i32, i32* %v3_12428, align 4
  %v3_1242c = add i32 %v3_12420, 8
  %v4_1242c = inttoptr i32 %v3_1242c to i32*
  store i32 %v4_12428, i32* %v4_1242c, align 4
  %v0_12430.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12420, %bb27
  %v0_12430 = phi i32 [ %v2_12418, %dec_label_pc_12420 ], [ %v0_12430.pre, %bb27 ]
  %v1_12430 = add i32 %v0_12430, 8
  %v2_12430 = inttoptr i32 %v1_12430 to i32*
  %v3_12430 = load i32, i32* %v2_12430, align 4
  %v1_12434 = add i32 %v0_12430, 4
  %v2_12434 = inttoptr i32 %v1_12434 to i32*
  %v3_12434 = load i32, i32* %v2_12434, align 4
  %v2_12438 = icmp eq i32 %v3_12430, 0
  br i1 %v2_12438, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_1243c = add i32 %v3_12430, 4
  %v4_1243c = inttoptr i32 %v3_1243c to i32*
  store i32 %v3_12434, i32* %v4_1243c, align 4
  %v1_12444 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_12444, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_12440 = load i32, i32* %r1.global-to-local, align 4
  %v3_12440 = inttoptr i32 %v2_12440 to i32*
  store i32 %v3_12434, i32* %v3_12440, align 4
  %v1_12448.pre = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_12448.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_12454 = phi i32 [ %v0_12454.pre, %.thread._crit_edge ], [ %v1_12444, %bb28 ], [ %v1_12448.pre, %.thread5 ]
  %v0_1244c = phi i32 [ %v0_1244c.pre, %.thread._crit_edge ], [ %v1_12444, %bb28 ], [ %v1_12448.pre, %.thread5 ]
  %v1_1244c = load i32, i32* %r0.global-to-local, align 4
  %v2_1244c = sub i32 %v1_1244c, %v0_1244c
  %v1_12450 = add i32 %v2_1244c, 12
  store i32 %v1_12450, i32* %r0.global-to-local, align 4
  %v1_12454 = load i32, i32* %r4.global-to-local, align 4
  %v2_12454 = inttoptr i32 %v1_12454 to i32*
  store i32 %v0_12454, i32* %v2_12454, align 4
  %v2_12458 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12458, i32* %r4.global-to-local, align 4
  ret i32 %v1_12450

dec_label_pc_1245c:                               ; preds = %dec_label_pc_12400
  %v1_1245c = add i32 %v2_12418, 4
  %v2_1245c = inttoptr i32 %v1_1245c to i32*
  %v3_1245c = load i32, i32* %v2_1245c, align 4
  store i32 %v3_1245c, i32* %r0.global-to-local, align 4
  %v2_12460 = icmp eq i32 %v3_1245c, 0
  br i1 %v2_12460, label %dec_label_pc_12460.dec_label_pc_12468_crit_edge, label %dec_label_pc_12400

dec_label_pc_12460.dec_label_pc_12468_crit_edge:  ; preds = %dec_label_pc_1245c
  br label %dec_label_pc_12468

dec_label_pc_12468:                               ; preds = %dec_label_pc_12460.dec_label_pc_12468_crit_edge, %dec_label_pc_12460.preheader
  store i32 %v3_123dc, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_1245c, { 1, 2, 0 }
  uselistorder i32 %v0_12430, { 1, 0 }
  uselistorder i32 %v2_12400, { 1, 0, 2, 3 }
  uselistorder i32 %v2_12418, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_12414, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 2, 1, 3 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_12400, { 1, 0 }
  uselistorder label %dec_label_pc_12460.preheader, { 1, 0 }
}

define i32 @function_1246c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1246c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_12470 = load i32, i32* %arg1, align 4
  store i32 %v2_12470, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_124e86 = icmp eq i32 %v2_12470, 0
  br i1 %v2_124e86, label %dec_label_pc_124f0, label %dec_label_pc_1247c

dec_label_pc_1247c:                               ; preds = %dec_label_pc_1246c, %dec_label_pc_124e4
  %v0_124bc = phi i32 [ %v3_124e4, %dec_label_pc_124e4 ], [ %v2_12470, %dec_label_pc_1246c ]
  %v1_1247c = inttoptr i32 %v0_124bc to i32*
  %v2_1247c = load i32, i32* %v1_1247c, align 4
  store i32 %v2_1247c, i32* %r0.global-to-local, align 4
  %v2_12480 = sub i32 %v0_124bc, %v2_1247c
  %v1_12484 = add i32 %v2_12480, 12
  %v3_12488 = icmp uge i32 %v1_12484, %arg2
  %v9_12488 = icmp eq i32 %v1_12484, %arg2
  %v2_1248c = xor i1 %v9_12488, true
  %v3_1248c = and i1 %v3_12488, %v2_1248c
  br i1 %v3_1248c, label %dec_label_pc_124e4, label %dec_label_pc_12490

dec_label_pc_12490:                               ; preds = %dec_label_pc_1247c
  br i1 %v9_12488, label %dec_label_pc_12494, label %dec_label_pc_124f0

dec_label_pc_12494:                               ; preds = %dec_label_pc_12490
  %v1_12494 = add i32 %arg3, 3
  %v1_12498 = and i32 %v1_12494, -4
  store i32 %v1_12498, i32* %r2.global-to-local, align 4
  %v2_1249c = sub i32 %v2_1247c, %v1_12498
  %v3_1249c = icmp ult i32 %v2_1247c, %v1_12498
  br i1 %v3_1249c, label %dec_label_pc_124f0, label %dec_label_pc_124a4

dec_label_pc_124a4:                               ; preds = %dec_label_pc_12494
  %v1_124a4 = add i32 %v1_12498, 44
  %v3_124a8 = icmp ult i32 %v2_1247c, %v1_124a4
  br i1 %v3_124a8, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_124a4
  store i32 %v2_1249c, i32* %v1_1247c, align 4
  %v1_124b4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_124b4, i32* %r0.global-to-local, align 4
  ret i32 %v1_124b4

.thread2:                                         ; preds = %dec_label_pc_124a4
  %v1_124bc = add i32 %v0_124bc, 4
  %v2_124bc = inttoptr i32 %v1_124bc to i32*
  %v3_124bc = load i32, i32* %v2_124bc, align 4
  store i32 %v3_124bc, i32* %r2.global-to-local, align 4
  %v2_124c0 = icmp eq i32 %v3_124bc, 0
  br i1 %v2_124c0, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_124c4 = add i32 %v0_124bc, 8
  %v3_124c4 = inttoptr i32 %v2_124c4 to i32*
  %v4_124c4 = load i32, i32* %v3_124c4, align 4
  %v3_124c8 = add i32 %v3_124bc, 8
  %v4_124c8 = inttoptr i32 %v3_124c8 to i32*
  store i32 %v4_124c4, i32* %v4_124c8, align 4
  %v0_124cc.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_124cc = phi i32 [ %v0_124bc, %.thread2 ], [ %v0_124cc.pre, %bb17 ]
  %v1_124cc = add i32 %v0_124cc, 8
  %v2_124cc = inttoptr i32 %v1_124cc to i32*
  %v3_124cc = load i32, i32* %v2_124cc, align 4
  store i32 %v3_124cc, i32* %r2.global-to-local, align 4
  %v1_124d0 = add i32 %v0_124cc, 4
  %v2_124d0 = inttoptr i32 %v1_124d0 to i32*
  %v3_124d0 = load i32, i32* %v2_124d0, align 4
  %v2_124d4 = icmp eq i32 %v3_124cc, 0
  br i1 %v2_124d4, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_124d8 = add i32 %v3_124cc, 4
  %v4_124d8 = inttoptr i32 %v3_124d8 to i32*
  store i32 %v3_124d0, i32* %v4_124d8, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_124dc = load i32, i32* %lr.global-to-local, align 4
  %v3_124dc = inttoptr i32 %v2_124dc to i32*
  store i32 %v3_124d0, i32* %v3_124dc, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_124e0 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_124e0

dec_label_pc_124e4:                               ; preds = %dec_label_pc_1247c
  %v1_124e4 = add i32 %v0_124bc, 4
  %v2_124e4 = inttoptr i32 %v1_124e4 to i32*
  %v3_124e4 = load i32, i32* %v2_124e4, align 4
  store i32 %v3_124e4, i32* %ip.global-to-local, align 4
  %v2_124e8 = icmp eq i32 %v3_124e4, 0
  br i1 %v2_124e8, label %dec_label_pc_124e8.dec_label_pc_124f0.loopexit_crit_edge, label %dec_label_pc_1247c

dec_label_pc_124e8.dec_label_pc_124f0.loopexit_crit_edge: ; preds = %dec_label_pc_124e4
  br label %dec_label_pc_124f0

dec_label_pc_124f0:                               ; preds = %dec_label_pc_12494, %dec_label_pc_1246c, %dec_label_pc_124e8.dec_label_pc_124f0.loopexit_crit_edge, %dec_label_pc_12490
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_124e4, { 1, 2, 0 }
  uselistorder i32 %v0_124cc, { 1, 0 }
  uselistorder i32 %v1_12498, { 0, 2, 1, 3 }
  uselistorder i1 %v9_12488, { 1, 0 }
  uselistorder i32 %v2_1247c, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_124bc, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_124f0, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_1247c, { 1, 0 }
}

define i32 @function_124f8() local_unnamed_addr {
dec_label_pc_124f8:
  %v0_124f8 = load i32, i32* @r2, align 4
  %v2_124f8 = icmp eq i32 %v0_124f8, 0
  %v0_124fc = load i32, i32* @r3, align 4
  %v1_124fc = load i32, i32* @r1, align 4
  %v2_124fc = add i32 %v1_124fc, 4
  %v3_124fc = inttoptr i32 %v2_124fc to i32*
  store i32 %v0_124fc, i32* %v3_124fc, align 4
  %v0_12500 = load i32, i32* @r2, align 4
  %v1_12500 = load i32, i32* @r1, align 4
  %v2_12500 = add i32 %v1_12500, 8
  %v3_12500 = inttoptr i32 %v2_12500 to i32*
  store i32 %v0_12500, i32* %v3_12500, align 4
  %v1_12508 = load i32, i32* @r1, align 4
  br i1 %v2_124f8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_124f8
  %v2_12504 = load i32, i32* @r2, align 4
  %v3_12504 = add i32 %v2_12504, 4
  %v4_12504 = inttoptr i32 %v3_12504 to i32*
  store i32 %v1_12508, i32* %v4_12504, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_124f8
  %v2_12508 = load i32, i32* @r0, align 4
  %v3_12508 = inttoptr i32 %v2_12508 to i32*
  store i32 %v1_12508, i32* %v3_12508, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_1250c = load i32, i32* @r3, align 4
  %v2_1250c = icmp eq i32 %v0_1250c, 0
  br i1 %v2_1250c, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_12510 = load i32, i32* @r1, align 4
  %v3_12510 = add i32 %v0_1250c, 8
  %v4_12510 = inttoptr i32 %v3_12510 to i32*
  store i32 %v1_12510, i32* %v4_12510, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_12514 = load i32, i32* @r0, align 4
  ret i32 %v1_12514

; uselistorder directives
  uselistorder i32 %v1_12508, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_12518() local_unnamed_addr {
dec_label_pc_12518:
  %v0_12518 = load i32, i32* @r2, align 4
  %v2_12518 = icmp eq i32 %v0_12518, 0
  %v1_1251c = load i32, i32* @r1, align 4
  br i1 %v2_12518, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12518
  %v2_1251c = load i32, i32* @r0, align 4
  %v3_1251c = inttoptr i32 %v2_1251c to i32*
  store i32 %v1_1251c, i32* %v3_1251c, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_12518
  %v3_12520 = add i32 %v0_12518, 4
  %v4_12520 = inttoptr i32 %v3_12520 to i32*
  store i32 %v1_1251c, i32* %v4_12520, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_12524 = load i32, i32* @r2, align 4
  %v1_12524 = load i32, i32* @r1, align 4
  %v2_12524 = add i32 %v1_12524, 8
  %v3_12524 = inttoptr i32 %v2_12524 to i32*
  store i32 %v0_12524, i32* %v3_12524, align 4
  %v1_12528 = load i32, i32* @r0, align 4
  ret i32 %v1_12528

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_1252c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1252c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1252c = load i32, i32* @r4, align 4
  store i32 %v3_1252c, i32* %stack_var_-20, align 4
  %v2_12530 = load i32, i32* %arg1, align 4
  store i32 %v2_12530, i32* %r4.global-to-local, align 4
  %v2_12534 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_125502 = icmp eq i32 %v2_12530, 0
  br i1 %v2_125502, label %dec_label_pc_12600, label %dec_label_pc_12540

dec_label_pc_12540:                               ; preds = %dec_label_pc_1252c, %dec_label_pc_12548
  %v0_12590 = phi i32 [ %v0_12598, %dec_label_pc_12548 ], [ 0, %dec_label_pc_1252c ]
  %v0_12598 = phi i32 [ %v3_1254c, %dec_label_pc_12548 ], [ %v2_12530, %dec_label_pc_1252c ]
  %v1_125545.in = phi i32 [ %v3_1254c, %dec_label_pc_12548 ], [ %v2_12530, %dec_label_pc_1252c ]
  %v1_125545 = add i32 %v1_125545.in, 12
  %v3_12540 = icmp ult i32 %v1_125545, %arg2
  br i1 %v3_12540, label %dec_label_pc_12548, label %dec_label_pc_12560

dec_label_pc_12548:                               ; preds = %dec_label_pc_12540
  store i32 %v0_12598, i32* %r6.global-to-local, align 4
  %v1_1254c = add i32 %v0_12598, 4
  %v2_1254c = inttoptr i32 %v1_1254c to i32*
  %v3_1254c = load i32, i32* %v2_1254c, align 4
  store i32 %v3_1254c, i32* %r4.global-to-local, align 4
  %v2_12550 = icmp eq i32 %v3_1254c, 0
  br i1 %v2_12550, label %dec_label_pc_12550.dec_label_pc_12600.loopexit_crit_edge, label %dec_label_pc_12540

dec_label_pc_12560:                               ; preds = %dec_label_pc_12540
  %v1_12560 = inttoptr i32 %v0_12598 to i32*
  %v2_12560 = load i32, i32* %v1_12560, align 4
  %v2_12564 = sub i32 %v0_12598, %v2_12560
  %v1_12568 = add i32 %v2_12564, 12
  %v3_1256c = icmp uge i32 %v1_12568, %v2_12534
  %v9_1256c = icmp eq i32 %v1_12568, %v2_12534
  %v2_12570 = xor i1 %v9_1256c, true
  %v3_12570 = and i1 %v3_1256c, %v2_12570
  br i1 %v3_12570, label %dec_label_pc_12600, label %dec_label_pc_12574

dec_label_pc_12574:                               ; preds = %dec_label_pc_12560
  %v2_12574 = add i32 %v2_12560, %arg3
  store i32 %v2_12574, i32* %r7.global-to-local, align 4
  br i1 %v9_1256c, label %dec_label_pc_1257c, label %dec_label_pc_125a8

dec_label_pc_1257c:                               ; preds = %dec_label_pc_12574
  %v2_1257c = icmp eq i32 %v0_12590, 0
  br i1 %v2_1257c, label %dec_label_pc_125f4, label %dec_label_pc_12584

dec_label_pc_12584:                               ; preds = %dec_label_pc_1257c
  %v1_12584 = add i32 %v0_12590, 12
  %v9_12588 = icmp eq i32 %v1_12584, %arg2
  br i1 %v9_12588, label %dec_label_pc_12590, label %dec_label_pc_125f4

dec_label_pc_12590:                               ; preds = %dec_label_pc_12584
  %v1_12590 = inttoptr i32 %v0_12590 to i32*
  %v2_12590 = load i32, i32* %v1_12590, align 4
  %v1_12594 = add i32 %v0_12590, 8
  %v2_12594 = inttoptr i32 %v1_12594 to i32*
  %v3_12594 = load i32, i32* %v2_12594, align 4
  store i32 %v3_12594, i32* @r2, align 4
  store i32 %v0_12598, i32* @r1, align 4
  %v2_1259c = add i32 %v2_12590, %v2_12574
  store i32 %v2_1259c, i32* %r7.global-to-local, align 4
  %v0_125a0 = call i32 @function_12518()
  br label %dec_label_pc_125f4

dec_label_pc_125a8:                               ; preds = %dec_label_pc_12574
  %v1_125a8 = add i32 %v0_12598, 4
  %v2_125a8 = inttoptr i32 %v1_125a8 to i32*
  %v3_125a8 = load i32, i32* %v2_125a8, align 4
  store i32 %v3_125a8, i32* %r5.global-to-local, align 4
  %v2_125ac = icmp eq i32 %v3_125a8, 0
  br i1 %v2_125ac, label %dec_label_pc_125e0, label %dec_label_pc_125b4

dec_label_pc_125b4:                               ; preds = %dec_label_pc_125a8
  %v1_125b4 = inttoptr i32 %v3_125a8 to i32*
  %v2_125b4 = load i32, i32* %v1_125b4, align 4
  %v2_125b8 = sub i32 %v3_125a8, %v2_125b4
  %v1_125bc = add i32 %v2_125b8, 12
  %v9_125c0 = icmp eq i32 %v2_12534, %v1_125bc
  br i1 %v9_125c0, label %dec_label_pc_125c8, label %dec_label_pc_125e0

dec_label_pc_125c8:                               ; preds = %dec_label_pc_125b4
  store i32 %v0_12590, i32* @r2, align 4
  store i32 %v3_125a8, i32* @r1, align 4
  %v2_125d0 = add i32 %v2_125b4, %v2_12574
  store i32 %v2_125d0, i32* %r7.global-to-local, align 4
  %v0_125d4 = call i32 @function_12518()
  %v0_125d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_125d8, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_125f4

dec_label_pc_125e0:                               ; preds = %dec_label_pc_125b4, %dec_label_pc_125a8
  %v2_125e0 = add i32 %v0_12598, %arg3
  store i32 %v2_125e0, i32* %r4.global-to-local, align 4
  store i32 %v3_125a8, i32* @r3, align 4
  store i32 %v0_12590, i32* @r2, align 4
  store i32 %v2_125e0, i32* @r1, align 4
  %v0_125f0 = call i32 @function_124f8()
  br label %dec_label_pc_125f4

dec_label_pc_125f4:                               ; preds = %dec_label_pc_12584, %dec_label_pc_1257c, %dec_label_pc_125c8, %dec_label_pc_12590, %dec_label_pc_125e0
  %v0_125f4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_125f4, i32* %r5.global-to-local, align 4
  %v0_125f8 = load i32, i32* %r7.global-to-local, align 4
  %v2_125f8 = inttoptr i32 %v0_125f4 to i32*
  store i32 %v0_125f8, i32* %v2_125f8, align 4
  br label %dec_label_pc_12618

dec_label_pc_12550.dec_label_pc_12600.loopexit_crit_edge: ; preds = %dec_label_pc_12548
  br label %dec_label_pc_12600

dec_label_pc_12600:                               ; preds = %dec_label_pc_1252c, %dec_label_pc_12550.dec_label_pc_12600.loopexit_crit_edge, %dec_label_pc_12560
  %v1_12600 = add i32 %v2_12534, -12
  store i32 %v1_12600, i32* %r5.global-to-local, align 4
  %v3_12604 = inttoptr i32 %v1_12600 to i32*
  store i32 %arg3, i32* %v3_12604, align 4
  %v0_12608 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12608, i32* @r3, align 4
  %v0_1260c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_1260c, i32* @r2, align 4
  %v0_12610 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12610, i32* @r1, align 4
  %v0_12614 = call i32 @function_124f8()
  br label %dec_label_pc_12618

dec_label_pc_12618:                               ; preds = %dec_label_pc_125f4, %dec_label_pc_12600
  %v0_12618 = load i32, i32* %r5.global-to-local, align 4
  %v2_1261c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1261c, i32* @r4, align 4
  ret i32 %v0_12618

; uselistorder directives
  uselistorder i32 %v3_125a8, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_1256c, { 1, 0 }
  uselistorder i32 %v3_1254c, { 2, 3, 1, 0 }
  uselistorder i32 %v0_12598, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_12590, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_124f8, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_12518, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12618, { 1, 0 }
  uselistorder label %dec_label_pc_12600, { 1, 2, 0 }
  uselistorder label %dec_label_pc_125f4, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_12540, { 1, 0 }
}

define i32 @function_12620() local_unnamed_addr {
dec_label_pc_1263c.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_12620 = ptrtoint i32* %stack_var_-268 to i32
  %v1_12630 = call i32 @function_12bb8()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_1263c = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_1263c

dec_label_pc_1263c:                               ; preds = %dec_label_pc_1263c.lr.ph, %dec_label_pc_1263c
  %v1_12640 = phi i32 [ 31, %dec_label_pc_1263c.lr.ph ], [ %v1_1264c, %dec_label_pc_1263c ]
  %v4_12640 = mul i32 %v1_12640, 4
  %v5_12640 = add i32 %v4_12640, %v2_1263c
  %v2_12648 = add i32 %v5_12640, -128
  %v3_12648 = inttoptr i32 %v2_12648 to i32*
  store i32 0, i32* %v3_12648, align 4
  %v0_1264c = load i32, i32* %r1.global-to-local, align 4
  %v1_1264c = add i32 %v0_1264c, -1
  store i32 %v1_1264c, i32* %r1.global-to-local, align 4
  %v6_1264c = icmp slt i32 %v1_1264c, 0
  br i1 %v6_1264c, label %dec_label_pc_12654, label %dec_label_pc_1263c

dec_label_pc_12654:                               ; preds = %dec_label_pc_1263c
  %v2_12654 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_12654, i32* @r4, align 4
  store i32 %v2_12654, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_12660 = call i32 @function_11fdc()
  %v2_12664 = icmp eq i32 %v0_12660, 0
  br i1 %v2_12664, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_12654
  store i32 %v2_12654, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12654, %bb
  store i32 75384, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_12664, i32 ptrtoint (i32* @global_var_117f0.428 to i32))
  %v2_1267c = load i32, i32* @global_var_1c5b0.430, align 4
  %v2_12680 = icmp eq i32 %v2_1267c, 0
  br i1 %v2_12680, label %dec_label_pc_12688, label %dec_label_pc_126b8

dec_label_pc_12688:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1c5b0.430, align 4
  br label %dec_label_pc_12690

dec_label_pc_12690:                               ; preds = %dec_label_pc_12708, %dec_label_pc_12688
  %v1_1269c = call i32 @function_12bb8()
  %v1_126a4 = call i32 @function_13d4c(i32 6)
  store i32 75448, i32* @lr, align 4
  %v1_126b4 = call i32 @function_12bb8()
  %v2_126bc.pre = load i32, i32* @global_var_1c5b0.430, align 4
  br label %dec_label_pc_126b8

dec_label_pc_126b8:                               ; preds = %.thread1, %dec_label_pc_12690
  %v0_1272c = phi i32 [ %v2_1267c, %.thread1 ], [ %v2_126bc.pre, %dec_label_pc_12690 ]
  store i32 ptrtoint (i32* @global_var_1c5b0.430 to i32), i32* %ip.global-to-local, align 4
  %v7_126c0 = icmp eq i32 %v0_1272c, 1
  br i1 %v7_126c0, label %dec_label_pc_126f0.lr.ph, label %dec_label_pc_12724

dec_label_pc_126f0.lr.ph:                         ; preds = %dec_label_pc_126b8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1c5b0.430, align 4
  %v2_126dc = bitcast i32* %stack_var_-268 to i8*
  %v3_126dc = call i32 @function_11bb0(i8* %v2_126dc, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_126f0

dec_label_pc_126f0:                               ; preds = %dec_label_pc_126f0.lr.ph, %dec_label_pc_126f0
  %v1_126f4 = phi i32 [ 31, %dec_label_pc_126f0.lr.ph ], [ %v1_12700, %dec_label_pc_126f0 ]
  %v4_126f4 = mul i32 %v1_126f4, 4
  %v5_126f4 = add i32 %v4_126f4, %v2_1263c
  %v2_126fc = add i32 %v5_126f4, -264
  %v3_126fc = inttoptr i32 %v2_126fc to i32*
  store i32 -1, i32* %v3_126fc, align 4
  %v0_12700 = load i32, i32* %r1.global-to-local, align 4
  %v1_12700 = add i32 %v0_12700, -1
  store i32 %v1_12700, i32* %r1.global-to-local, align 4
  %v6_12700 = icmp slt i32 %v1_12700, 0
  br i1 %v6_12700, label %dec_label_pc_12708, label %dec_label_pc_126f0

dec_label_pc_12708:                               ; preds = %dec_label_pc_126f0
  store i32 %v2_12620, i32* %r1.global-to-local, align 4
  %v4_1271c = call i32 @function_12ea4(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_12690

dec_label_pc_12724:                               ; preds = %dec_label_pc_126b8
  %v7_12724 = icmp eq i32 %v0_1272c, 2
  br i1 %v7_12724, label %dec_label_pc_1272c, label %dec_label_pc_12738

dec_label_pc_1272c:                               ; preds = %dec_label_pc_12724
  store i32 3, i32* @global_var_1c5b0.430, align 4
  %v0_12734 = call i32 @function_12620()
  %v2_12738.pre = load i32, i32* @global_var_1c5b0.430, align 4
  br label %dec_label_pc_12738

dec_label_pc_12738:                               ; preds = %dec_label_pc_12724, %dec_label_pc_1272c
  %v1_12740 = phi i32 [ %v0_1272c, %dec_label_pc_12724 ], [ %v2_12738.pre, %dec_label_pc_1272c ]
  %v7_1273c = icmp eq i32 %v1_12740, 3
  br i1 %v7_1273c, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_12738
  %v2_12748 = load i32, i32* %ip.global-to-local, align 4
  %v3_12748 = inttoptr i32 %v2_12748 to i32*
  store i32 4, i32* %v3_12748, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12738, %bb27
  call void @__pseudo_cond_branch(i1 %v7_1273c, i32 ptrtoint (i32* @global_var_12fbc.432 to i32))
  br label %dec_label_pc_12750

dec_label_pc_12750:                               ; preds = %dec_label_pc_12750, %.thread3
  %v0_12750 = call i32 @function_12620()
  br label %dec_label_pc_12750

; uselistorder directives
  uselistorder i32 %v1_12700, { 2, 1, 0 }
  uselistorder i32 %v1_1264c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1c5b0.430, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_12738, { 1, 0 }
  uselistorder label %dec_label_pc_126f0, { 1, 0 }
  uselistorder label %dec_label_pc_126b8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_1263c, { 1, 0 }
}

define i32 @function_12768(i8* %arg1) local_unnamed_addr {
dec_label_pc_12768:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_1277c = load i32, i32* @r4, align 4
  store i32 %v3_1277c, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_127a0.pre = load i32, i32* bitcast (i32** @global_var_1c51c.435 to i32*), align 4
  br label %dec_label_pc_12798

dec_label_pc_12798:                               ; preds = %dec_label_pc_12798, %dec_label_pc_12768
  %v0_127d0 = phi i32 [ %tmp, %dec_label_pc_12768 ], [ %v1_12794, %dec_label_pc_12798 ]
  store i32 %v0_127d0, i32* %r4.global-to-local, align 4
  %v1_1279c = inttoptr i32 %v0_127d0 to i8*
  %v2_1279c = load i8, i8* %v1_1279c, align 1
  %v3_1279c = zext i8 %v2_1279c to i32
  %v3_127a4 = mul nuw nsw i32 %v3_1279c, 2
  %v4_127a4 = add i32 %v3_127a4, %v2_127a0.pre
  %v5_127a4 = inttoptr i32 %v4_127a4 to i8*
  %v6_127a4 = load i8, i8* %v5_127a4, align 1
  %v1_127a8 = and i8 %v6_127a4, 32
  %v2_127a8 = icmp eq i8 %v1_127a8, 0
  %v1_12794 = add i32 %v0_127d0, 1
  br i1 %v2_127a8, label %dec_label_pc_127b0, label %dec_label_pc_12798

dec_label_pc_127b0:                               ; preds = %dec_label_pc_12798
  %v7_127b0 = icmp eq i8 %v2_1279c, 43
  br i1 %v7_127b0, label %dec_label_pc_127d0, label %dec_label_pc_127b8

dec_label_pc_127b8:                               ; preds = %dec_label_pc_127b0
  %v7_127b8 = icmp eq i8 %v2_1279c, 45
  br i1 %v7_127b8, label %dec_label_pc_127d0, label %bb

bb:                                               ; preds = %dec_label_pc_127b8
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1282c

dec_label_pc_127d0:                               ; preds = %dec_label_pc_127b0, %dec_label_pc_127b8
  %storemerge30 = phi i32 [ 1, %dec_label_pc_127b8 ], [ 0, %dec_label_pc_127b0 ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_12794, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1282c

dec_label_pc_1282c:                               ; preds = %bb, %dec_label_pc_127d0
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_12834 = call i32 @function_112fc(i32 -1, i32 10)
  %v0_12838 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12838, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_12844 = urem i32 %v2_12834, 256
  store i32 %v1_12844, i32* %sl.global-to-local, align 4
  %v0_12848 = call i32 @function_111ec()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_12848, i32* %r8.global-to-local, align 4
  %v0_1285c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1285c

dec_label_pc_12858:                               ; preds = %bb48, %dec_label_pc_128b8
  %v0_12858 = phi i32 [ %v1_12888, %bb48 ], [ %v0_12858.pre, %dec_label_pc_128b8 ]
  store i32 %v0_12858, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1285c

dec_label_pc_1285c:                               ; preds = %dec_label_pc_1282c, %dec_label_pc_12858
  %v0_12888 = phi i32 [ %v0_1285c.pre, %dec_label_pc_1282c ], [ %v0_12858, %dec_label_pc_12858 ]
  %v1_1285c = inttoptr i32 %v0_12888 to i8*
  %v2_1285c = load i8, i8* %v1_1285c, align 1
  %v3_1285c = zext i8 %v2_1285c to i32
  %v1_12860 = add nsw i32 %v3_1285c, -48
  %v1_12864 = urem i32 %v1_12860, 256
  %v1_1286c = or i32 %v3_1285c, 32
  %tmp56 = icmp ult i32 %v1_12864, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_12874

dec_label_pc_12874:                               ; preds = %dec_label_pc_1285c
  %tmp57 = icmp ugt i32 %v1_1286c, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_12874
  %v1_12878 = add nsw i32 %v1_1286c, -87
  %v5_12880 = urem i32 %v1_12878, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_1285c, %dec_label_pc_12874, %bb42
  %v3_128b0 = phi i32 [ %v1_12864, %dec_label_pc_1285c ], [ 40, %dec_label_pc_12874 ], [ %v5_12880, %bb42 ]
  %v1_12884 = load i32, i32* %r5.global-to-local, align 4
  %v1_12888 = add i32 %v0_12888, 1
  store i32 %v1_12888, i32* %r4.global-to-local, align 4
  %v6_1288c = icmp slt i32 %v3_128b0, %v1_12884
  br i1 %v6_1288c, label %dec_label_pc_12890, label %dec_label_pc_128d0

dec_label_pc_12890:                               ; preds = %bb43
  %v0_12890 = load i32, i32* %ip.global-to-local, align 4
  %v1_12890 = load i32, i32* %r8.global-to-local, align 4
  %v9_12890 = icmp eq i32 %v0_12890, %v1_12890
  br i1 %v9_12890, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_12890
  br label %dec_label_pc_128a0

bb44:                                             ; preds = %dec_label_pc_12890
  %v3_12890 = icmp ult i32 %v0_12890, %v1_12890
  br i1 %v3_12890, label %dec_label_pc_128a0, label %dec_label_pc_128b8

dec_label_pc_128a0:                               ; preds = %bb44, %.thread
  %v4_128a81727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_128a0 = load i32, i32* %sl.global-to-local, align 4
  %v3_128a0 = icmp uge i32 %v3_128b0, %v1_128a0
  %v9_128a0 = icmp eq i32 %v3_128b0, %v1_128a0
  %v2_128a4 = xor i1 %v3_128a0, true
  %v3_128a4 = or i1 %v9_128a0, %v2_128a4
  br i1 %v3_128a4, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_128a0
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_128a0, %bb45
  %v4_128a8 = phi i32 [ %v4_128a81727, %dec_label_pc_128a0 ], [ 0, %bb45 ]
  %v2_128a8 = xor i1 %v9_128a0, true
  %v3_128a8 = and i1 %v3_128a0, %v2_128a8
  br i1 %v3_128a8, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_128a8 = urem i32 %v4_128a8, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_128ac = phi i32 [ %v5_128a8, %bb47 ], [ %v4_128a8, %bb46 ]
  %v2_128ac = icmp eq i32 %v0_128ac, 0
  br i1 %v2_128ac, label %bb48, label %dec_label_pc_128b8

bb48:                                             ; preds = %thread-pre-split
  %v4_128b0 = mul i32 %v0_12890, %v1_12884
  %v5_128b0 = add i32 %v4_128b0, %v3_128b0
  store i32 %v5_128b0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12858

dec_label_pc_128b8:                               ; preds = %bb44, %thread-pre-split
  %v0_128b8 = call i32 @function_11b48()
  %v0_128bc = load i32, i32* %r7.global-to-local, align 4
  %v1_128bc = load i32, i32* %fp.global-to-local, align 4
  %v2_128bc = and i32 %v1_128bc, %v0_128bc
  store i32 %v2_128bc, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_128c8 = inttoptr i32 %v0_128b8 to i32*
  store i32 34, i32* %v2_128c8, align 4
  %v0_12858.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12858

dec_label_pc_128d0:                               ; preds = %bb43
  %v0_128d0.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_128d0 = icmp eq i32 %v0_128d0.pre, 0
  br i1 %v2_128d0, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_128d0
  %v1_128d4 = load i32, i32* %r6.global-to-local, align 4
  %v3_128d4 = inttoptr i32 %v0_128d0.pre to i32*
  store i32 %v1_128d4, i32* %v3_128d4, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_128d0, %bb49
  %v0_128d8 = load i32, i32* %r7.global-to-local, align 4
  %v2_128d8 = icmp eq i32 %v0_128d8, 0
  %. = select i1 %v2_128d8, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_128e4 = load i32, i32* %fp.global-to-local, align 4
  %v2_128e4 = icmp eq i32 %v0_128e4, 0
  %v0_12908.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_128e4, label %dec_label_pc_12900, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_12908.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_128f0, label %dec_label_pc_12900

dec_label_pc_128f0:                               ; preds = %bb53
  %v0_128f0 = call i32 @function_11b48()
  %v2_128f8 = inttoptr i32 %v0_128f0 to i32*
  store i32 34, i32* %v2_128f8, align 4
  %v0_128fc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_128fc, i32* %ip.global-to-local, align 4
  %v0_12900.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12900

dec_label_pc_12900:                               ; preds = %bb53, %bb50, %dec_label_pc_128f0
  %v0_12908.pre = phi i32 [ %v0_12908.pre.pre, %bb53 ], [ %v0_128fc, %dec_label_pc_128f0 ], [ %v0_12908.pre.pre, %bb50 ]
  %v0_12900 = phi i32 [ %v0_128d8, %bb53 ], [ %v0_12900.pre, %dec_label_pc_128f0 ], [ %v0_128d8, %bb50 ]
  %v2_12900 = icmp eq i32 %v0_12900, 0
  br i1 %v2_12900, label %dec_label_pc_12900._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_12900
  %v2_12904 = sub i32 0, %v0_12908.pre
  store i32 %v2_12904, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12900._crit_edge

dec_label_pc_12900._crit_edge:                    ; preds = %dec_label_pc_12900, %bb54
  %v0_12908 = phi i32 [ %v2_12904, %bb54 ], [ %v0_12908.pre, %dec_label_pc_12900 ]
  %v2_1290c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1290c, i32* @r4, align 4
  ret i32 %v0_12908

; uselistorder directives
  uselistorder i32 %v0_12908.pre, { 1, 0 }
  uselistorder i32 %v0_12908.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_128d0.pre, { 1, 0 }
  uselistorder i32 %v4_128a8, { 1, 0 }
  uselistorder i1 %v3_128a0, { 1, 0 }
  uselistorder i32 %v1_128a0, { 1, 0 }
  uselistorder i32 %v1_12888, { 1, 0 }
  uselistorder i32 %v1_1286c, { 1, 0 }
  uselistorder i32 %v1_12864, { 1, 0 }
  uselistorder i32 %v0_12858, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 5, 2, 3, 4, 6 }
  uselistorder i32 ()* @function_111ec, { 2, 1, 4, 3, 0 }
  uselistorder i32 (i32, i32)* @function_112fc, { 1, 3, 0, 8, 2, 7, 6, 5, 4 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 8, 9, 10, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_12900._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12900, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_128b8, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1285c, { 1, 0 }
  uselistorder label %dec_label_pc_12858, { 1, 0 }
  uselistorder label %dec_label_pc_1282c, { 1, 0 }
  uselistorder label %dec_label_pc_127d0, { 1, 0 }
}

define i32 @function_12914(i32 %arg1) local_unnamed_addr {
dec_label_pc_12914:
  %stack_var_-16 = alloca i32, align 4
  %v2_12914 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_12914, i32* @r0, align 4
  %v8_12930 = call i32 @function_12bc0(i32 %v2_12914, i32 ptrtoint (i32* @global_var_12bb8.384 to i32), i32 ptrtoint (i32* @global_var_1c4fc.438 to i32), i32 76736, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_12940 = call i32 @function_12bb8()
  %v2_12948 = load i32, i32* @global_var_1c5b4.442, align 4
  %v2_1294c = icmp eq i32 %v2_12948, 0
  br i1 %v2_1294c, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_12914
  call void @__pseudo_branch(i32 %v2_12948)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12914, %bb
  store i32 %v2_12914, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_12970.444 to i32), i32* @lr, align 4
  %v8_1296c = call i32 @function_12bc0(i32 %v2_12914, i32 1, i32 ptrtoint (i32* @global_var_1c4fc.438 to i32), i32 76736, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_1296c, i32* @r0, align 4
  %v1_12970 = call i32 @function_12b4c(i32 %v8_1296c)
  store i1 true, i1* @cpsr_z, align 1
  %v0_12984 = load i32, i32* @r4, align 4
  %v1_12988 = call i32 @function_12fbc(i32 %v0_12984)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_12914, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_12bb8, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_12bc0, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 76736, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1c4fc.438 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_12bb8.384 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_129a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_129a8:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_129a8 = load i32, i32* @r4, align 4
  store i32 %v3_129a8, i32* %stack_var_-20, align 4
  %v6_129a8 = load i32, i32* @r5, align 4
  %v9_129a8 = load i32, i32* @r6, align 4
  %v16_129a8 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @ip, align 4
  %v2_129ac = icmp eq i32 %arg1, 0
  %v2_129b0 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_129ac, label %dec_label_pc_12b34, label %dec_label_pc_129c8.preheader

dec_label_pc_129c8.preheader:                     ; preds = %dec_label_pc_129a8
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_129d017 = add i32 %v16_129a8, 124
  br label %dec_label_pc_129c0

dec_label_pc_129c0:                               ; preds = %dec_label_pc_129c8.preheader, %dec_label_pc_129c0
  %v5_129d018 = phi i32 [ %v5_129d017, %dec_label_pc_129c8.preheader ], [ %v5_129d0, %dec_label_pc_129c0 ]
  %v2_129c4 = add i32 %v5_129d018, -136
  %v3_129c4 = inttoptr i32 %v2_129c4 to i32*
  store i32 0, i32* %v3_129c4, align 4
  %v0_129c8.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_129c8 = add i32 %v0_129c8.pre, -1
  store i32 %v1_129c8, i32* %r1.global-to-local, align 4
  %v6_129c8 = icmp slt i32 %v1_129c8, 0
  %v4_129d0 = mul i32 %v1_129c8, 4
  %v5_129d0 = add i32 %v4_129d0, %v16_129a8
  br i1 %v6_129c8, label %dec_label_pc_129d8, label %dec_label_pc_129c0

dec_label_pc_129d8:                               ; preds = %dec_label_pc_129c0
  %v2_129d8 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_129d8, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_129e8 = load i32, i32* @ip, align 4
  store i32 %v0_129e8, i32* %stack_var_-28, align 4
  %v0_129f0 = call i32 @function_11fdc()
  store i32 %v0_129f0, i32* %r0.global-to-local, align 4
  %v1_129f4 = load i32, i32* @r5, align 4
  %v5_129f8 = icmp slt i32 %v0_129f0, %v1_129f4
  br i1 %v5_129f8, label %dec_label_pc_12b3c, label %dec_label_pc_129fc

dec_label_pc_129fc:                               ; preds = %dec_label_pc_129d8
  %v2_129fc = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_129fc, i32* @r4, align 4
  store i32 %v1_129f4, i32* %r0.global-to-local, align 4
  store i32 %v2_129d8, i32* %r1.global-to-local, align 4
  %v3_12a0c = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_12a0c = call i32 @function_117f0(i32 %v1_129f4, %_TYPEDEF_sigset_t* %v3_12a0c, i32 %v2_129fc)
  store i32 %v4_12a0c, i32* %r0.global-to-local, align 4
  %v1_12a10 = load i32, i32* @r5, align 4
  %v9_12a10 = icmp eq i32 %v4_12a0c, %v1_12a10
  br i1 %v9_12a10, label %dec_label_pc_12a18, label %dec_label_pc_12b3c

dec_label_pc_12a18:                               ; preds = %dec_label_pc_129fc
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_129fc, i32* %r0.global-to-local, align 4
  %v2_12a20 = call i32 @function_11fb8(i32 %v2_129fc, i32 17)
  store i32 %v2_12a20, i32* %r0.global-to-local, align 4
  %v1_12a24 = load i32, i32* @r5, align 4
  %v9_12a24 = icmp eq i32 %v2_12a20, %v1_12a24
  br i1 %v9_12a24, label %dec_label_pc_12a3c.preheader, label %dec_label_pc_12a18.dec_label_pc_12b04_crit_edge

dec_label_pc_12a18.dec_label_pc_12b04_crit_edge:  ; preds = %dec_label_pc_12a18
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_12b04

dec_label_pc_12a3c.preheader:                     ; preds = %dec_label_pc_12a18
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12a34

dec_label_pc_12a34:                               ; preds = %dec_label_pc_12a3c.preheader, %dec_label_pc_12a34
  %v5_12a4416 = phi i32 [ %v5_129d017, %dec_label_pc_12a3c.preheader ], [ %v5_12a44, %dec_label_pc_12a34 ]
  %v2_12a38 = add i32 %v5_12a4416, -136
  %v3_12a38 = inttoptr i32 %v2_12a38 to i32*
  store i32 0, i32* %v3_12a38, align 4
  %v0_12a3c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12a3c = add i32 %v0_12a3c.pre, -1
  store i32 %v1_12a3c, i32* %r1.global-to-local, align 4
  %v6_12a3c = icmp slt i32 %v1_12a3c, 0
  %v4_12a44 = mul i32 %v1_12a3c, 4
  %v5_12a44 = add i32 %v4_12a44, %v16_129a8
  br i1 %v6_12a3c, label %dec_label_pc_12a4c, label %dec_label_pc_12a34

dec_label_pc_12a4c:                               ; preds = %dec_label_pc_12a34
  store i32 %v2_129d8, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_12a54 = call i32 @function_11fdc()
  store i32 %v0_12a54, i32* %r0.global-to-local, align 4
  %v1_12a58 = icmp slt i32 %v0_12a54, 0
  br i1 %v1_12a58, label %dec_label_pc_12b3c, label %dec_label_pc_12a60

dec_label_pc_12a60:                               ; preds = %dec_label_pc_12a4c
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_12a6c = call i32 @function_12ea4(i32 17, i32* null, i32 %v2_129b0)
  store i32 %v4_12a6c, i32* %r0.global-to-local, align 4
  %v1_12a70 = icmp slt i32 %v4_12a6c, 0
  br i1 %v1_12a70, label %dec_label_pc_12a78, label %dec_label_pc_12aa0

dec_label_pc_12a78:                               ; preds = %dec_label_pc_12a60
  %v0_12a78 = call i32 @function_11b48()
  store i32 %v2_129fc, i32* %r1.global-to-local, align 4
  store i32 %v0_12a78, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_12a8c = inttoptr i32 %v0_12a78 to i32*
  %v2_12a8c = load i32, i32* %v1_12a8c, align 4
  store i32 %v2_12a8c, i32* @r4, align 4
  %v3_12a90 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_12a90 = call i32 @function_117f0(i32 2, %_TYPEDEF_sigset_t* %v3_12a90, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_12a98 = load i32, i32* @r4, align 4
  %v1_12a98 = load i32, i32* %r5.global-to-local, align 4
  %v2_12a98 = inttoptr i32 %v1_12a98 to i32*
  store i32 %v0_12a98, i32* %v2_12a98, align 4
  %v17_12b44.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12b40

dec_label_pc_12aa0:                               ; preds = %dec_label_pc_12a60
  %v2_12aa0 = load i32, i32* %stack_var_-424, align 4
  %v7_12aa4 = icmp eq i32 %v2_12aa0, 1
  %v2_12aac = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_12aac, i32* @r4, align 4
  br i1 %v7_12aa4, label %dec_label_pc_12ab4, label %dec_label_pc_12ae8

dec_label_pc_12ab4:                               ; preds = %dec_label_pc_12aa0
  store i32 %v2_12aac, i32* %r1.global-to-local, align 4
  store i32 %v2_12aac, i32* %r0.global-to-local, align 4
  %v2_12abc = bitcast i32* %stack_var_-28 to %timespec*
  %v3_12abc = call i32 @function_13340(%timespec* %v2_12abc, i32 %v2_12aac)
  store i32 %v3_12abc, i32* %r0.global-to-local, align 4
  store i32 %v3_12abc, i32* %r6.global-to-local, align 4
  %v0_12ac4 = call i32 @function_11b48()
  store i32 %v2_129fc, i32* %r1.global-to-local, align 4
  store i32 %v0_12ac4, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_12ad8 = inttoptr i32 %v0_12ac4 to i32*
  %v2_12ad8 = load i32, i32* %v1_12ad8, align 4
  store i32 %v2_12ad8, i32* @r4, align 4
  %v3_12adc = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_12adc = call i32 @function_117f0(i32 2, %_TYPEDEF_sigset_t* %v3_12adc, i32 0)
  store i32 %v4_12adc, i32* %r0.global-to-local, align 4
  %v0_12ae0 = load i32, i32* @r4, align 4
  %v1_12ae0 = load i32, i32* %r5.global-to-local, align 4
  %v2_12ae0 = inttoptr i32 %v1_12ae0 to i32*
  store i32 %v0_12ae0, i32* %v2_12ae0, align 4
  %v0_12b10.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12b10

dec_label_pc_12ae8:                               ; preds = %dec_label_pc_12aa0
  store i32 %v2_129fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_12af4 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_12af4 = call i32 @function_117f0(i32 2, %_TYPEDEF_sigset_t* %v3_12af4, i32 0)
  store i32 %v4_12af4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12b04

dec_label_pc_12b04:                               ; preds = %dec_label_pc_12a18.dec_label_pc_12b04_crit_edge, %dec_label_pc_12ae8
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_12a18.dec_label_pc_12b04_crit_edge ], [ %v2_12aac, %dec_label_pc_12ae8 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_12b08 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_12b08 = call i32 @function_13340(%timespec* %v2_12b08, i32 %storemerge.pre-phi)
  store i32 %v3_12b08, i32* %r0.global-to-local, align 4
  store i32 %v3_12b08, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12b10

dec_label_pc_12b10:                               ; preds = %dec_label_pc_12ab4, %dec_label_pc_12b04
  %v0_12b10 = phi i32 [ %v0_12b10.pr, %dec_label_pc_12ab4 ], [ %v3_12b08, %dec_label_pc_12b04 ]
  %v2_12b10 = icmp eq i32 %v0_12b10, 0
  br i1 %v2_12b10, label %dec_label_pc_12b34, label %dec_label_pc_12b18

dec_label_pc_12b18:                               ; preds = %dec_label_pc_12b10
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_12b20 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_12b20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12b40

dec_label_pc_12b34:                               ; preds = %dec_label_pc_129a8, %dec_label_pc_12b10
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12b40

dec_label_pc_12b3c:                               ; preds = %dec_label_pc_129fc, %dec_label_pc_12a4c, %dec_label_pc_129d8
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12b40

dec_label_pc_12b40:                               ; preds = %dec_label_pc_12b18, %dec_label_pc_12b34, %dec_label_pc_12a78, %dec_label_pc_12b3c
  %v17_12b44 = phi i32 [ %v3_12b20, %dec_label_pc_12b18 ], [ 0, %dec_label_pc_12b34 ], [ %v17_12b44.pre, %dec_label_pc_12a78 ], [ -1, %dec_label_pc_12b3c ]
  %v2_12b44 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12b44, i32* @r4, align 4
  store i32 %v6_129a8, i32* @r5, align 4
  store i32 %v9_129a8, i32* @r6, align 4
  ret i32 %v17_12b44

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_12aac, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_12a3c, { 0, 2, 1 }
  uselistorder i32 %v2_129fc, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_129f4, { 1, 0, 2 }
  uselistorder i32 %v1_129c8, { 0, 2, 1 }
  uselistorder i32 %v16_129a8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 8, 9, 10, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 6, 0, 8, 7, 10, 9, 22, 11, 13, 14, 12, 16, 15, 17, 21, 18, 2, 19, 20, 1 }
  uselistorder i32 (i32, i32*, i32)* @function_12ea4, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_117f0, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_11fdc, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12b40, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_12b3c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12b34, { 1, 0 }
  uselistorder label %dec_label_pc_12b10, { 1, 0 }
  uselistorder label %dec_label_pc_12b04, { 1, 0 }
  uselistorder label %dec_label_pc_12a34, { 1, 0 }
  uselistorder label %dec_label_pc_129c0, { 1, 0 }
}

define i32 @function_12b4c(i32 %arg1) local_unnamed_addr {
dec_label_pc_12b78:
  %stack_var_-8 = alloca i32, align 4
  %v3_12b4c = load i32, i32* @r4, align 4
  store i32 %v3_12b4c, i32* %stack_var_-8, align 4
  %v2_12b7c = load i32, i32* @global_var_1c5c4.451, align 4
  %v2_12b80 = icmp eq i32 %v2_12b7c, 0
  br i1 %v2_12b80, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12b78
  store i32 76684, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_12b7c)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12b78, %bb
  %v2_12b90 = load i32, i32* @global_var_1c5c8.453, align 4
  %v2_12b94 = icmp eq i32 %v2_12b90, 0
  br i1 %v2_12b94, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_12b98 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_12b98, i32* @r4, align 4
  %v9_12b98 = load i32, i32* @r0, align 4
  ret i32 %v9_12b98

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_12ba4.454 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_12b90)
  %v2_12ba4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12ba4, i32* @r4, align 4
  %v8_12ba4 = load i32, i32* @r0, align 4
  ret i32 %v8_12ba4

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_12bb8() local_unnamed_addr {
dec_label_pc_12bb8:
  ret i32 0
}

define i32 @function_12bc0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_12bc0:
  %v1_12bc0 = load i32, i32* @r0, align 4
  ret i32 %v1_12bc0
}

define i32 @function_12bc4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12bc4:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12bc4 = load i32, i32* @r4, align 4
  store i32 %v3_12bc4, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_12bd4 = call i32 @function_114b0(i32 %arg1, i32 1)
  %v7_12bd8 = icmp eq i32 %v2_12bd4, -1
  br i1 %v7_12bd8, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_12bc4
  %v3_12bdc = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_12bdc, i32* @r4, align 4
  ret i32 %v2_12bd4

bb4:                                              ; preds = %dec_label_pc_12bc4
  %v0_12be0 = load i32, i32* @r4, align 4
  %v4_12be8 = call i32 @function_116a0(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_14098.456, i32 0, i32 0), i32 %v0_12be0)
  %v1_12bec = load i32, i32* %r5.global-to-local, align 4
  %v9_12bec = icmp eq i32 %v4_12be8, %v1_12bec
  br i1 %v9_12bec, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_12bf0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_12bf0, i32* @r4, align 4
  ret i32 %v4_12be8

bb6:                                              ; preds = %bb4
  %v0_12bf4 = call i32 @function_12620()
  %v0_12bf8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12bf8, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_12bf4

; uselistorder directives
  uselistorder i32 %v2_12bd4, { 1, 0 }
  uselistorder i1* @cpsr_z, { 10, 9, 0, 1, 11, 8, 5, 6, 2, 3, 4, 7 }
  uselistorder i32 ()* @function_12620, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_116a0, { 9, 6, 0, 1, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 (i32, i32)* @function_114b0, { 0, 7, 11, 10, 13, 12, 9, 8, 2, 1, 6, 5, 4, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_12bfc(i32 %arg1) local_unnamed_addr {
dec_label_pc_12bfc:
  %v2_12c00 = load i32, i32* @global_var_1c5cc.458, align 4
  %v2_12c04 = icmp eq i32 %v2_12c00, 0
  br i1 %v2_12c04, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_12bfc
  %v6_12c10 = load i32, i32* @r0, align 4
  ret i32 %v6_12c10

bb2:                                              ; preds = %dec_label_pc_12bfc
  store i32 1, i32* @global_var_1c5cc.458, align 4
  store i32 4096, i32* @global_var_1c5c0.409, align 4
  ret i32 undef
}

define i32 @function_12c58(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_12c58:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_12c5c = mul i32 %arg2, 4
  %v5_12c5c = add i32 %tmp, %v4_12c5c
  %v2_12c60 = load i32, i32* %arg3, align 4
  %v2_12c64 = ptrtoint i32* %stack_var_-120 to i32
  %v1_12c68 = add i32 %v5_12c5c, 4
  %v9_12c6c = icmp eq i32 %v1_12c68, %v2_12c60
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1c5b8.463, align 4
  store i32 %v1_12c68, i32* @global_var_1c5bc.465, align 4
  store i32 %arg6, i32* @global_var_1c5c8.453, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_12c6c, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_12c58
  store i32 %v5_12c5c, i32* @global_var_1c5bc.465, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_12c58, %bb
  %v2_12cac = bitcast i32* %stack_var_-120 to i8*
  %v3_12cac = call i32 @function_11bb0(i8* %v2_12cac, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1c5bc.465, align 4
  br label %dec_label_pc_12cbc

dec_label_pc_12cbc:                               ; preds = %dec_label_pc_12cbc, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_12cbc, %dec_label_pc_12cbc ]
  %v1_12cbc = inttoptr i32 %storemerge to i32*
  %v2_12cbc = load i32, i32* %v1_12cbc, align 4
  %v4_12cbc = add i32 %storemerge, 4
  %v2_12cc0 = icmp eq i32 %v2_12cbc, 0
  br i1 %v2_12cc0, label %dec_label_pc_12ccc, label %dec_label_pc_12cbc

dec_label_pc_12ccc:                               ; preds = %dec_label_pc_12cbc
  store i32 %v4_12cbc, i32* @r4, align 4
  %v1_12cec22 = inttoptr i32 %v4_12cbc to i32*
  %v2_12cec23 = load i32, i32* %v1_12cec22, align 4
  %v2_12cf025 = icmp eq i32 %v2_12cec23, 0
  br i1 %v2_12cf025, label %dec_label_pc_12cf8, label %dec_label_pc_12cd4

dec_label_pc_12cd4:                               ; preds = %dec_label_pc_12ccc, %dec_label_pc_12cec
  %v5_12cd8 = phi i32 [ %v2_12cec, %dec_label_pc_12cec ], [ %v2_12cec23, %dec_label_pc_12ccc ]
  %v2_12cd4 = icmp ugt i32 %v5_12cd8, 13
  %v7_12cd4 = icmp eq i32 %v5_12cd8, 14
  %v2_12cd8 = xor i1 %v2_12cd4, true
  %v3_12cd8 = or i1 %v7_12cd4, %v2_12cd8
  br i1 %v3_12cd8, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_12cd4
  %v6_12cd8 = and i32 %v5_12cd8, 536870912
  %v7_12cd8 = icmp ne i32 %v6_12cd8, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_12cd4, %bb42
  %v1_12ce4 = phi i1 [ %v2_12cd4, %dec_label_pc_12cd4 ], [ %v7_12cd8, %bb42 ]
  %v2_12cdc = xor i1 %v1_12ce4, true
  %v3_12cdc = or i1 %v7_12cd4, %v2_12cdc
  br i1 %v3_12cdc, label %bb44, label %dec_label_pc_12cec

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_12cec

dec_label_pc_12cec:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_12cdc, i32 ptrtoint (i32* @global_var_11b90.467 to i32))
  %v0_12ce8 = load i32, i32* @r4, align 4
  %v1_12ce8 = add i32 %v0_12ce8, 8
  store i32 %v1_12ce8, i32* @r4, align 4
  %v1_12cec = inttoptr i32 %v1_12ce8 to i32*
  %v2_12cec = load i32, i32* %v1_12cec, align 4
  %v2_12cf0 = icmp eq i32 %v2_12cec, 0
  br i1 %v2_12cf0, label %dec_label_pc_12cf8, label %dec_label_pc_12cd4

dec_label_pc_12cf8:                               ; preds = %dec_label_pc_12cec, %dec_label_pc_12ccc
  %v1_12cfc = call i32 @function_13d64(i32 %v2_12c64)
  store i32 %v1_12cfc, i32* @r0, align 4
  %v1_12d00 = call i32 @function_12bfc(i32 %v1_12cfc)
  store i32 %v1_12d00, i32* @r0, align 4
  %v2_12d0c = icmp eq i32 %tmp37, 0
  br i1 %v2_12d0c, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_12cf8
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_12cf8, %bb45
  %v0_12d1c = phi i32 [ %tmp37, %dec_label_pc_12cf8 ], [ 4096, %bb45 ]
  %v3_12d14 = icmp eq i32 %tmp36, -1
  %v8_12d14 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1c5c0.409 to i32), i32* @r2, align 4
  store i32 %v0_12d1c, i32* @global_var_1c5c0.409, align 4
  br i1 %v3_12d14, label %dec_label_pc_12d24, label %dec_label_pc_12d4c

dec_label_pc_12d24:                               ; preds = %bb46
  %v0_12d24 = call i32 @function_132b0()
  store i32 %v0_12d24, i32* @r0, align 4
  store i32 %v0_12d24, i32* @r4, align 4
  %v0_12d2c = call i32 @function_13258()
  %v0_12d30 = load i32, i32* @r4, align 4
  %v9_12d30 = icmp eq i32 %v0_12d30, %v0_12d2c
  br i1 %v9_12d30, label %dec_label_pc_12d38, label %dec_label_pc_12d74

dec_label_pc_12d38:                               ; preds = %dec_label_pc_12d24
  %v1_12d38 = call i32 @function_13284(i32 %v0_12d2c)
  store i32 %v1_12d38, i32* @r0, align 4
  store i32 %v1_12d38, i32* @r4, align 4
  %v0_12d40 = call i32 @function_1322c()
  %v0_12d44 = load i32, i32* @r4, align 4
  %v9_12d44 = icmp eq i32 %v0_12d44, %v0_12d40
  br i1 %v9_12d44, label %dec_label_pc_12d4c, label %dec_label_pc_12d74

dec_label_pc_12d4c:                               ; preds = %dec_label_pc_12d38, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_12d14, label %dec_label_pc_12de0, label %dec_label_pc_12d58

dec_label_pc_12d58:                               ; preds = %dec_label_pc_12d4c
  %v9_12d5c = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_12d5c, label %dec_label_pc_12d64, label %dec_label_pc_12d74

dec_label_pc_12d64:                               ; preds = %dec_label_pc_12d58
  br label %dec_label_pc_12d74

dec_label_pc_12d74:                               ; preds = %dec_label_pc_12d64, %dec_label_pc_12d58, %dec_label_pc_12d38, %dec_label_pc_12d24
  %v2_12d7c = call i32 @function_12bc4(i32 0, i32 32768)
  %v2_12d88 = call i32 @function_12bc4(i32 1, i32 32770)
  %v2_12d94 = call i32 @function_12bc4(i32 2, i32 32770)
  br label %dec_label_pc_12de0

dec_label_pc_12de0:                               ; preds = %dec_label_pc_12d74, %dec_label_pc_12d4c
  %v0_12da4 = load i32, i32* %r6.global-to-local, align 4
  %v1_12da4 = inttoptr i32 %v0_12da4 to i32*
  %v2_12da4 = load i32, i32* %v1_12da4, align 4
  store i32 %v2_12da4, i32* @global_var_1c514, align 4
  store i32 %arg5, i32* @global_var_1c5c4.451, align 4
  %v2_12de0 = icmp eq i32 %arg4, 0
  br i1 %v2_12de0, label %dec_label_pc_12e1c, label %bb47

bb47:                                             ; preds = %dec_label_pc_12de0
  br label %dec_label_pc_12e1c

dec_label_pc_12e1c:                               ; preds = %dec_label_pc_12de0, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_12e2c = call i32 @function_11b48()
  %v2_12e34 = inttoptr i32 %v1_12e2c to i32*
  store i32 0, i32* %v2_12e34, align 4
  %v0_12e60 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_12e6c = call i32 @function_12914(i32 %v0_12e60)
  ret i32 %v1_12e6c

; uselistorder directives
  uselistorder i32 %v2_12cec, { 1, 0 }
  uselistorder i32 %v1_12ce8, { 1, 0 }
  uselistorder i1 %v2_12cd4, { 1, 0 }
  uselistorder i32 %v4_12cbc, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_12914, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_12bc4, { 2, 1, 0 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1c5c0.409, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 3, 7, 4, 8, 5, 9, 2, 6, 10, 11 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i1 true, { 0, 1, 73, 2, 3, 4, 5, 6, 7, 8, 41, 9, 10, 11, 12, 13, 96, 39, 42, 49, 97, 17, 18, 19, 74, 60, 75, 76, 77, 43, 20, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 21, 22, 94, 95, 59, 40, 50, 98, 15, 16, 58, 14, 99, 34, 33, 51, 54, 52, 55, 47, 53, 48, 57, 100, 23, 101, 102, 24, 103, 61, 62, 104, 63, 64, 105, 65, 66, 25, 26, 106, 67, 68, 27, 28, 107, 69, 70, 29, 30, 108, 71, 72, 31, 32, 46, 109, 110, 56, 111, 44, 35, 45, 36, 37, 38 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_12e1c, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_12cec, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_12cd4, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_12ea4(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12ea4:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_12ea4 = load i32, i32* @r4, align 4
  %v6_12ea4 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_12ea8 = icmp eq i32* %arg2, null
  %v2_12eac = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_12ea8, label %dec_label_pc_12f18, label %dec_label_pc_12ebc

dec_label_pc_12ebc:                               ; preds = %dec_label_pc_12ea4
  %v2_12ec0 = load i32, i32* %arg2, align 4
  %v4_12ec0 = add i32 %tmp, 4
  store i32 %v4_12ec0, i32* @r1, align 4
  %v2_12ec4 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_12ec4, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_12ec0, i32* %stack_var_-156, align 4
  %v3_12ed0 = call i32 @function_11b90(i32 %v2_12ec4, i32 %v4_12ec0, i32 128)
  store i32 %v3_12ed0, i32* %r0.global-to-local, align 4
  %v0_12ed4 = load i32, i32* @r4, align 4
  %v1_12ed4 = add i32 %v0_12ed4, 132
  %v2_12ed4 = inttoptr i32 %v1_12ed4 to i32*
  %v3_12ed4 = load i32, i32* %v2_12ed4, align 4
  %v1_12ed8 = and i32 %v3_12ed4, 67108864
  %v2_12ed8 = icmp eq i32 %v1_12ed8, 0
  br i1 %v2_12ed8, label %dec_label_pc_12eec, label %bb

bb:                                               ; preds = %dec_label_pc_12ebc
  br label %dec_label_pc_12f08

dec_label_pc_12eec:                               ; preds = %dec_label_pc_12ebc
  %v1_12ef4 = and i32 %v3_12ed4, 4
  %v2_12ef4 = icmp eq i32 %v1_12ef4, 0
  br i1 %v2_12ef4, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_12eec
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_12eec, %bb20
  br label %dec_label_pc_12f08

dec_label_pc_12f08:                               ; preds = %bb, %bb21
  %v2_12f08 = icmp eq i32 %v0_12ed4, 0
  %v3_12f0c = ptrtoint i32* %stack_var_-156 to i32
  %.v3_12f0c = select i1 %v2_12f08, i32 0, i32 %v3_12f0c
  %v0_12f18.pre = load i32, i32* @r5, align 4
  %v0_12f28.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12f18

dec_label_pc_12f18:                               ; preds = %dec_label_pc_12f08, %dec_label_pc_12ea4
  %v0_12f28 = phi i32 [ %arg1, %dec_label_pc_12ea4 ], [ %v0_12f28.pre, %dec_label_pc_12f08 ]
  %v0_12f18 = phi i32 [ %arg3, %dec_label_pc_12ea4 ], [ %v0_12f18.pre, %dec_label_pc_12f08 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_12ea4 ], [ %.v3_12f0c, %dec_label_pc_12f08 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_12f18 = icmp eq i32 %v0_12f18, 0
  %.v2_12eac = select i1 %v2_12f18, i32 0, i32 %v2_12eac
  store i32 %.v2_12eac, i32* @r2, align 4
  store i32 %v0_12f28, i32* %r0.global-to-local, align 4
  %v1_12f2c = call i32 @function_12f90(i32 %v0_12f28)
  store i32 %v1_12f2c, i32* %r0.global-to-local, align 4
  %v0_12f30 = load i32, i32* @r5, align 4
  %v2_12f30 = icmp eq i32 %v0_12f30, 0
  br i1 %v2_12f30, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_12f18
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_12f18, %bb25
  %v0_12f40.pr = phi i32 [ 0, %dec_label_pc_12f18 ], [ 1, %bb25 ]
  %v1_12f38 = icmp slt i32 %v1_12f2c, 0
  br i1 %v1_12f38, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_12f74

thread-pre-split:                                 ; preds = %bb26
  %v2_12f40 = icmp eq i32 %v0_12f40.pr, 0
  store i32 %v1_12f2c, i32* @r4, align 4
  br i1 %v2_12f40, label %dec_label_pc_12f74, label %dec_label_pc_12f4c

dec_label_pc_12f4c:                               ; preds = %thread-pre-split
  %v2_12f4c = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_12f30, i32* %r0.global-to-local, align 4
  %v2_12f54 = inttoptr i32 %v0_12f30 to i32*
  store i32 %v2_12f4c, i32* %v2_12f54, align 4
  %v3_12f54 = load i32, i32* %r0.global-to-local, align 4
  %v4_12f54 = add i32 %v3_12f54, 4
  store i32 %v4_12f54, i32* @r0, align 4
  %v2_12f58 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_12f58, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_12f60 = call i32 @function_11b90(i32 %v4_12f54, i32 %v2_12f58, i32 128)
  store i32 %v3_12f60, i32* %r0.global-to-local, align 4
  %v1_12f68 = load i32, i32* @r5, align 4
  %v2_12f68 = add i32 %v1_12f68, 136
  %v3_12f68 = inttoptr i32 %v2_12f68 to i32*
  %v1_12f70 = load i32, i32* @r5, align 4
  %v2_12f70 = add i32 %v1_12f70, 132
  %v3_12f70 = inttoptr i32 %v2_12f70 to i32*
  %v0_12f74.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12f74

dec_label_pc_12f74:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_12f4c
  %v0_12f74 = phi i32 [ %v1_12f2c, %thread-pre-split ], [ %v0_12f74.pre, %dec_label_pc_12f4c ], [ %v1_12f2c, %thread-pre-split.thread ]
  store i32 %v0_12f74, i32* %r0.global-to-local, align 4
  store i32 %v3_12ea4, i32* @r4, align 4
  store i32 %v6_12ea4, i32* @r5, align 4
  ret i32 %v0_12f74

; uselistorder directives
  uselistorder i32 %v0_12f74, { 1, 0 }
  uselistorder i32 %v0_12f30, { 1, 0, 2 }
  uselistorder i32 %v0_12f28, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 2, 7, 1, 0 }
  uselistorder label %dec_label_pc_12f74, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_12f08, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_12f90(i32 %arg1) local_unnamed_addr {
dec_label_pc_12f90:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12f90 = load i32, i32* @r4, align 4
  store i32 %v3_12f90, i32* %stack_var_-8, align 4
  %v1_12f94 = load i32, i32* @r1, align 4
  %v2_12f94 = inttoptr i32 %v1_12f94 to %sigaction*
  %v3_12f94 = load i32, i32* @r2, align 4
  %v4_12f94 = inttoptr i32 %v3_12f94 to %sigaction*
  %v5_12f94 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_12f94, %sigaction* %v4_12f94)
  store i32 %v5_12f94, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12f94, -4095
  br i1 %tmp, label %dec_label_pc_12fb4, label %dec_label_pc_12fa4

dec_label_pc_12fa4:                               ; preds = %dec_label_pc_12f90
  %v0_12fa4 = call i32 @function_11b48()
  %v0_12fa8 = load i32, i32* %r4.global-to-local, align 4
  %v1_12fa8 = sub i32 0, %v0_12fa8
  %v2_12fac = inttoptr i32 %v0_12fa4 to i32*
  store i32 %v1_12fa8, i32* %v2_12fac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12fb4

dec_label_pc_12fb4:                               ; preds = %dec_label_pc_12f90, %dec_label_pc_12fa4
  %v0_12fb4 = phi i32 [ %v5_12f94, %dec_label_pc_12f90 ], [ -1, %dec_label_pc_12fa4 ]
  %v2_12fb8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12fb8, i32* %r4.global-to-local, align 4
  ret i32 %v0_12fb4

; uselistorder directives
  uselistorder i32 %v5_12f94, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12fb4, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_12fbc(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_12fbc:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_12fe4() local_unnamed_addr {
dec_label_pc_12fe4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_12ff4 = load i32, i32* @r0, align 4
  %v4_12ff4 = call i32 @fstat(i32 %v0_12ff4, %stat* %tmp4)
  store i32 %v4_12ff4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12ff4, -4095
  br i1 %tmp, label %dec_label_pc_13018, label %dec_label_pc_13004

dec_label_pc_13004:                               ; preds = %dec_label_pc_12fe4
  %v0_13004 = call i32 @function_11b48()
  %v0_13008 = load i32, i32* %r4.global-to-local, align 4
  %v1_13008 = sub i32 0, %v0_13008
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13010 = inttoptr i32 %v0_13004 to i32*
  store i32 %v1_13008, i32* %v2_13010, align 4
  br label %dec_label_pc_13028

dec_label_pc_13018:                               ; preds = %dec_label_pc_12fe4
  %v2_13018 = icmp eq i32 %v4_12ff4, 0
  store i32 77864, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_13018, i32 ptrtoint (i32* @global_var_13700.483 to i32))
  br label %dec_label_pc_13028

dec_label_pc_13028:                               ; preds = %dec_label_pc_13004, %dec_label_pc_13018
  %v0_13028 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_13028

; uselistorder directives
  uselistorder i32 %v4_12ff4, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 3, 10, 8, 9, 6, 7, 0, 1, 2, 4, 5 }
  uselistorder label %dec_label_pc_13028, { 1, 0 }
}

define i32 @function_13034(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13034:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_13034 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_1303c = call i32 @function_130c8()
  store i32 %v0_1303c, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_1303c, 1
  br i1 %tmp8, label %dec_label_pc_130c0, label %dec_label_pc_130ac.preheader

dec_label_pc_130ac.preheader:                     ; preds = %dec_label_pc_13034
  %v5_13044 = load i32, i32* @r4, align 4
  %v7_13044 = add i32 %v5_13044, %v0_1303c
  store i32 %v7_13044, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_130ac

dec_label_pc_13050:                               ; preds = %dec_label_pc_130ac
  %v1_13050 = add i32 %v2_13060, 16
  %v2_13050 = inttoptr i32 %v1_13050 to i32*
  %v3_13050 = load i32, i32* %v2_13050, align 4
  store i32 %v3_13050, i32* @lr, align 4
  %v2_13054 = inttoptr i32 %v1_130b0 to i32*
  %v3_13054 = load i32, i32* %v2_13054, align 4
  store i32 %v3_13054, i32* %r2.global-to-local, align 4
  %v1_13058 = add i32 %v2_13060, 18
  %v2_13058 = inttoptr i32 %v1_13058 to i8*
  %v3_13058 = load i8, i8* %v2_13058, align 1
  %v4_13058 = zext i8 %v3_13058 to i32
  store i32 %v4_13058, i32* %ip.global-to-local, align 4
  %v3_1305c = sdiv i32 %v3_13050, 256
  store i32 %v3_1305c, i32* %r3.global-to-local, align 4
  %v1_13060 = trunc i32 %v3_13050 to i8
  %v4_13060 = inttoptr i32 %v1_130b0 to i8*
  store i8 %v1_13060, i8* %v4_13060, align 1
  %v0_13064 = load i32, i32* %r2.global-to-local, align 4
  %v1_13064 = load i32, i32* @r4, align 4
  %v2_13064 = add i32 %v1_13064, 4
  %v3_13064 = inttoptr i32 %v2_13064 to i32*
  store i32 %v0_13064, i32* %v3_13064, align 4
  %v0_13068 = load i32, i32* %ip.global-to-local, align 4
  %v1_13068 = trunc i32 %v0_13068 to i8
  %v2_13068 = load i32, i32* @r4, align 4
  %v3_13068 = add i32 %v2_13068, 10
  %v4_13068 = inttoptr i32 %v3_13068 to i8*
  store i8 %v1_13068, i8* %v4_13068, align 1
  %v0_1306c = load i32, i32* %r3.global-to-local, align 4
  %v1_1306c = trunc i32 %v0_1306c to i8
  %v2_1306c = load i32, i32* @r4, align 4
  %v3_1306c = add i32 %v2_1306c, 9
  %v4_1306c = inttoptr i32 %v3_1306c to i8*
  store i8 %v1_1306c, i8* %v4_1306c, align 1
  %v0_13070 = load i32, i32* @r4, align 4
  %v1_13070 = add i32 %v0_13070, 8
  %v2_13070 = inttoptr i32 %v1_13070 to i8*
  %v3_13070 = load i8, i8* %v2_13070, align 1
  %v4_13070 = zext i8 %v3_13070 to i32
  store i32 %v4_13070, i32* %r2.global-to-local, align 4
  %v0_13074 = load i32, i32* @r5, align 4
  %v1_13074 = add i32 %v0_13074, 1
  %v2_13074 = inttoptr i32 %v1_13074 to i8*
  %v3_13074 = load i8, i8* %v2_13074, align 1
  %v4_13074 = zext i8 %v3_13074 to i32
  store i32 %v4_13074, i32* %r3.global-to-local, align 4
  %v4_13078 = mul nuw nsw i32 %v4_13074, 256
  %v5_13078 = or i32 %v4_13078, %v4_13070
  %v1_1307c = add nsw i32 %v5_13078, -19
  store i32 %v1_1307c, i32* @r2, align 4
  %v3_13080 = call i32 @function_11ba0(i32 %v1_130b8, i32 %v1_130b4, i32 %v1_1307c)
  %v0_13084 = load i32, i32* @r4, align 4
  %v1_13084 = add i32 %v0_13084, 8
  %v2_13084 = inttoptr i32 %v1_13084 to i8*
  %v3_13084 = load i8, i8* %v2_13084, align 1
  %v4_13084 = zext i8 %v3_13084 to i32
  store i32 %v4_13084, i32* %r3.global-to-local, align 4
  %v0_13088 = load i32, i32* @r5, align 4
  %v1_13088 = add i32 %v0_13088, 1
  %v2_13088 = inttoptr i32 %v1_13088 to i8*
  %v3_13088 = load i8, i8* %v2_13088, align 1
  %v4_13088 = zext i8 %v3_13088 to i32
  store i32 %v0_13084, i32* @r0, align 4
  %v4_13090 = mul nuw nsw i32 %v4_13088, 256
  %v5_13090 = or i32 %v4_13090, %v4_13084
  store i32 %v5_13090, i32* @r2, align 4
  store i32 %v0_13084, i32* @r1, align 4
  %v3_13098 = call i32 @function_11ba0(i32 %v0_13084, i32 %v0_13084, i32 %v5_13090)
  %v0_1309c = load i32, i32* @r4, align 4
  %v1_1309c = add i32 %v0_1309c, 8
  %v2_1309c = inttoptr i32 %v1_1309c to i8*
  %v3_1309c = load i8, i8* %v2_1309c, align 1
  %v4_1309c = zext i8 %v3_1309c to i32
  store i32 %v4_1309c, i32* %r3.global-to-local, align 4
  %v0_130a0 = load i32, i32* @r5, align 4
  %v1_130a0 = add i32 %v0_130a0, 1
  %v2_130a0 = inttoptr i32 %v1_130a0 to i8*
  %v3_130a0 = load i8, i8* %v2_130a0, align 1
  %v4_130a0 = zext i8 %v3_130a0 to i32
  store i32 %v4_130a0, i32* @r2, align 4
  %v4_130a4 = mul nuw nsw i32 %v4_130a0, 256
  %v5_130a4 = or i32 %v4_130a4, %v4_1309c
  store i32 %v5_130a4, i32* %r3.global-to-local, align 4
  %v2_130a8 = add i32 %v5_130a4, %v0_1309c
  store i32 %v2_130a8, i32* @r4, align 4
  %v1_130ac.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_130ac

dec_label_pc_130ac:                               ; preds = %dec_label_pc_130ac.preheader, %dec_label_pc_13050
  %v1_130ac = phi i32 [ %v7_13044, %dec_label_pc_130ac.preheader ], [ %v1_130ac.pre, %dec_label_pc_13050 ]
  %v2_13060 = phi i32 [ %v5_13044, %dec_label_pc_130ac.preheader ], [ %v2_130a8, %dec_label_pc_13050 ]
  %v3_130ac = icmp ult i32 %v2_13060, %v1_130ac
  %v1_130b0 = add i32 %v2_13060, 8
  store i32 %v1_130b0, i32* @r5, align 4
  %v1_130b4 = add i32 %v2_13060, 19
  store i32 %v1_130b4, i32* @r1, align 4
  %v1_130b8 = add i32 %v2_13060, 11
  store i32 %v1_130b8, i32* @r0, align 4
  br i1 %v3_130ac, label %dec_label_pc_13050, label %dec_label_pc_130c0.loopexit

dec_label_pc_130c0.loopexit:                      ; preds = %dec_label_pc_130ac
  %v0_130c0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_130c0

dec_label_pc_130c0:                               ; preds = %dec_label_pc_13034, %dec_label_pc_130c0.loopexit
  %v0_130c0 = phi i32 [ %v0_130c0.pre, %dec_label_pc_130c0.loopexit ], [ %v0_1303c, %dec_label_pc_13034 ]
  store i32 %v6_13034, i32* @r5, align 4
  ret i32 %v0_130c0

; uselistorder directives
  uselistorder i32 %v1_130b8, { 1, 0 }
  uselistorder i32 %v1_130b4, { 1, 0 }
  uselistorder i32 %v1_130b0, { 2, 1, 0 }
  uselistorder i32 %v2_13060, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_13084, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_13050, { 1, 0, 2 }
  uselistorder i32 %v5_13044, { 1, 0 }
  uselistorder i32 %v0_1303c, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_11ba0, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_130c0, { 1, 0 }
  uselistorder label %dec_label_pc_130ac, { 1, 0 }
}

define i32 @function_130c8() local_unnamed_addr {
dec_label_pc_130c8:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_130cc = load i32, i32* @r4, align 4
  %v9_130cc = load i32, i32* @r6, align 4
  %v0_130d0 = load i32, i32* @r2, align 4
  %v1_130d0 = add i32 %v0_130d0, 6
  %v2_130d8 = ptrtoint i32* %stack_var_-60 to i32
  %v1_130dc = and i32 %v1_130d0, -4
  store i32 %v1_130dc, i32* %r3.global-to-local, align 4
  %v2_130e0 = sub i32 %v2_130d8, %v1_130dc
  %v0_130e4 = load i32, i32* @r1, align 4
  store i32 %v0_130e4, i32* %r8.global-to-local, align 4
  store i32 %v0_130d0, i32* %stack_var_-60, align 4
  store i32 %v2_130e0, i32* %sl.global-to-local, align 4
  %v0_130f0 = load i32, i32* @r0, align 4
  %v1_130f4 = inttoptr i32 %v2_130e0 to %linux_dirent64*
  store i32 %v2_130e0, i32* %r1.global-to-local, align 4
  %v5_130f8 = call i32 @getdents64(i32 %v0_130f0, %linux_dirent64* %v1_130f4, i32 %v0_130d0)
  store i32 %v5_130f8, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_130f8, -4095
  br i1 %tmp, label %dec_label_pc_1311c, label %dec_label_pc_13108

dec_label_pc_13108:                               ; preds = %dec_label_pc_130c8
  %v0_13108 = call i32 @function_11b48()
  %v0_1310c = load i32, i32* @r6, align 4
  %v1_1310c = sub i32 0, %v0_1310c
  store i32 %v1_1310c, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_13114 = inttoptr i32 %v0_13108 to i32*
  store i32 %v1_1310c, i32* %v2_13114, align 4
  %v0_13124.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13124

dec_label_pc_1311c:                               ; preds = %dec_label_pc_130c8
  br i1 false, label %dec_label_pc_13124, label %dec_label_pc_1312c

dec_label_pc_13124:                               ; preds = %dec_label_pc_1311c, %dec_label_pc_13108
  %v0_13124 = phi i32 [ -1, %dec_label_pc_1311c ], [ %v0_13124.pre, %dec_label_pc_13108 ]
  store i32 %v0_13124, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13220

dec_label_pc_1312c:                               ; preds = %dec_label_pc_1311c
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_13134 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13134, i32* @r5, align 4
  %v0_13138 = load i32, i32* @sp, align 4
  store i32 %v0_13138, i32* @r4, align 4
  br label %dec_label_pc_131fc

dec_label_pc_13148:                               ; preds = %dec_label_pc_131fc
  %v2_13214 = add i32 %v3_13200, %v0_13214
  %v1_13148 = add i32 %v0_1314c, 17
  %v2_13148 = inttoptr i32 %v1_13148 to i8*
  %v3_13148 = load i8, i8* %v2_13148, align 1
  %v4_13148 = zext i8 %v3_13148 to i32
  %v2_1314c = inttoptr i32 %v1_13208 to i8*
  %v3_1314c = load i8, i8* %v2_1314c, align 1
  %v4_1314c = zext i8 %v3_1314c to i32
  %v4_13150 = mul nuw nsw i32 %v4_13148, 256
  %v5_13150 = or i32 %v4_1314c, %v4_13150
  %v1_13154 = add nuw nsw i32 %v5_13150, 3
  %v1_13158 = and i32 %v1_13154, 131068
  store i32 %v1_13158, i32* %r3.global-to-local, align 4
  %v2_1315c = add i32 %v1_13158, %v2_1319c
  store i32 %v2_1315c, i32* %sb.global-to-local, align 4
  %v9_13160 = icmp eq i32 %v2_1315c, %v2_13214
  %v1_13164 = and i32 %v1_13154, 128
  %v2_13168 = icmp eq i32 %v1_13164, 0
  %v3_13168 = or i1 %v9_13160, %v2_13168
  br i1 %v3_13168, label %dec_label_pc_1319c, label %dec_label_pc_1316c

dec_label_pc_1316c:                               ; preds = %dec_label_pc_13148
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_1317c = call i32 @function_132dc(i32 %v0_130f0, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_13180 = load i32, i32* @r5, align 4
  %v1_13180 = load i32, i32* %r8.global-to-local, align 4
  %v9_13180 = icmp eq i32 %v0_13180, %v1_13180
  br i1 %v9_13180, label %dec_label_pc_13188, label %dec_label_pc_1321c

dec_label_pc_13188:                               ; preds = %dec_label_pc_1316c
  %v0_13188 = call i32 @function_11b48()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_13194 = inttoptr i32 %v0_13188 to i32*
  store i32 22, i32* %v2_13194, align 4
  %v0_13220.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13220

dec_label_pc_1319c:                               ; preds = %dec_label_pc_13148
  %v3_1316411 = udiv i32 %v1_13154, 256
  %v1_1319c = trunc i32 %v3_1316411 to i8
  %v3_1319c = add i32 %v2_1319c, 17
  %v4_1319c = inttoptr i32 %v3_1319c to i8*
  store i8 %v1_1319c, i8* %v4_1319c, align 1
  %v0_131a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_131a0 = trunc i32 %v0_131a0 to i8
  %v2_131a0 = load i32, i32* @r5, align 4
  %v3_131a0 = add i32 %v2_131a0, 16
  %v4_131a0 = inttoptr i32 %v3_131a0 to i8*
  store i8 %v1_131a0, i8* %v4_131a0, align 1
  %v0_131a4 = load i32, i32* @r4, align 4
  %v1_131a4 = add i32 %v0_131a4, 8
  %v1_131a8 = inttoptr i32 %v1_131a4 to i32*
  %v2_131a8 = load i32, i32* %v1_131a8, align 4
  %v3_131a8 = add i32 %v0_131a4, 12
  %v4_131a8 = inttoptr i32 %v3_131a8 to i32*
  %v5_131a8 = load i32, i32* %v4_131a8, align 4
  store i32 %v5_131a8, i32* %r3.global-to-local, align 4
  %v1_131b4 = inttoptr i32 %v0_131a4 to i32*
  %v2_131b4 = load i32, i32* %v1_131b4, align 4
  %v3_131b4 = add i32 %v0_131a4, 4
  %v4_131b4 = inttoptr i32 %v3_131b4 to i32*
  %v5_131b4 = load i32, i32* %v4_131b4, align 4
  store i32 %v5_131b4, i32* %r3.global-to-local, align 4
  %v0_131b8 = load i32, i32* @r5, align 4
  %v1_131b8 = inttoptr i32 %v0_131b8 to i32*
  store i32 %v2_131b4, i32* %v1_131b8, align 4
  %v3_131b8 = add i32 %v0_131b8, 4
  %v4_131b8 = inttoptr i32 %v3_131b8 to i32*
  %v5_131b8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_131b8, i32* %v4_131b8, align 4
  %v0_131bc = load i32, i32* @r4, align 4
  %v1_131bc = add i32 %v0_131bc, 8
  %v1_131c0 = inttoptr i32 %v1_131bc to i32*
  %v2_131c0 = load i32, i32* %v1_131c0, align 4
  %v3_131c0 = add i32 %v0_131bc, 12
  %v4_131c0 = inttoptr i32 %v3_131c0 to i32*
  %v5_131c0 = load i32, i32* %v4_131c0, align 4
  store i32 %v5_131c0, i32* %r3.global-to-local, align 4
  %v1_131c4 = load i32, i32* @r5, align 4
  %v2_131c4 = add i32 %v1_131c4, 8
  %v3_131c4 = inttoptr i32 %v2_131c4 to i32*
  store i32 %v2_131c0, i32* %v3_131c4, align 4
  %v0_131c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_131c8 = load i32, i32* @r5, align 4
  %v2_131c8 = add i32 %v1_131c8, 12
  %v3_131c8 = inttoptr i32 %v2_131c8 to i32*
  store i32 %v0_131c8, i32* %v3_131c8, align 4
  %v0_131cc = load i32, i32* @r4, align 4
  %v1_131cc = add i32 %v0_131cc, 18
  %v2_131cc = inttoptr i32 %v1_131cc to i8*
  %v3_131cc = load i8, i8* %v2_131cc, align 1
  %v4_131cc = zext i8 %v3_131cc to i32
  store i32 %v4_131cc, i32* %r3.global-to-local, align 4
  %v2_131d0 = load i32, i32* @r5, align 4
  %v3_131d0 = add i32 %v2_131d0, 18
  %v4_131d0 = inttoptr i32 %v3_131d0 to i8*
  store i8 %v3_131cc, i8* %v4_131d0, align 1
  %v0_131d4 = load i32, i32* @r4, align 4
  %v1_131d4 = add i32 %v0_131d4, 16
  %v2_131d4 = inttoptr i32 %v1_131d4 to i8*
  %v3_131d4 = load i8, i8* %v2_131d4, align 1
  %v4_131d4 = zext i8 %v3_131d4 to i32
  %v0_131d8 = load i32, i32* %r7.global-to-local, align 4
  %v1_131d8 = add i32 %v0_131d8, 1
  %v2_131d8 = inttoptr i32 %v1_131d8 to i8*
  %v3_131d8 = load i8, i8* %v2_131d8, align 1
  %v4_131d8 = zext i8 %v3_131d8 to i32
  store i32 %v4_131d8, i32* %r3.global-to-local, align 4
  %v4_131dc = mul nuw nsw i32 %v4_131d8, 256
  %v5_131dc = or i32 %v4_131dc, %v4_131d4
  %v1_131e0 = add nsw i32 %v5_131dc, -19
  store i32 %v1_131e0, i32* @r2, align 4
  %v3_131e4 = call i32 @function_11b90(i32 %v1_1320c, i32 %v1_13210, i32 %v1_131e0)
  %v0_131e8 = load i32, i32* @r4, align 4
  %v1_131e8 = add i32 %v0_131e8, 16
  %v2_131e8 = inttoptr i32 %v1_131e8 to i8*
  %v3_131e8 = load i8, i8* %v2_131e8, align 1
  %v4_131e8 = zext i8 %v3_131e8 to i32
  store i32 %v4_131e8, i32* %r3.global-to-local, align 4
  %v0_131ec = load i32, i32* %r7.global-to-local, align 4
  %v1_131ec = add i32 %v0_131ec, 1
  %v2_131ec = inttoptr i32 %v1_131ec to i8*
  %v3_131ec = load i8, i8* %v2_131ec, align 1
  %v4_131ec = zext i8 %v3_131ec to i32
  %v4_131f0 = mul nuw nsw i32 %v4_131ec, 256
  %v5_131f0 = or i32 %v4_131f0, %v4_131e8
  store i32 %v5_131f0, i32* %r3.global-to-local, align 4
  %v2_131f4 = add i32 %v5_131f0, %v0_131e8
  store i32 %v2_131f4, i32* @r4, align 4
  %v0_131f8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_131f8, i32* @r5, align 4
  %v1_131fc.pre = load i32, i32* @r6, align 4
  %v0_13214.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_131fc

dec_label_pc_131fc:                               ; preds = %dec_label_pc_1312c, %dec_label_pc_1319c
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_1312c ], [ %v2_131a8, %dec_label_pc_1319c ]
  %v0_13214 = phi i32 [ %v0_13134, %dec_label_pc_1312c ], [ %v0_13214.pre, %dec_label_pc_1319c ]
  %v2_1319c = phi i32 [ %v0_13134, %dec_label_pc_1312c ], [ %v0_131f8, %dec_label_pc_1319c ]
  %v0_1314c = phi i32 [ %v0_13138, %dec_label_pc_1312c ], [ %v2_131f4, %dec_label_pc_1319c ]
  %v1_131fc = phi i32 [ %v5_130f8, %dec_label_pc_1312c ], [ %v1_131fc.pre, %dec_label_pc_1319c ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_1312c ], [ %v5_131a8, %dec_label_pc_1319c ]
  %v0_131fc = load i32, i32* %sl.global-to-local, align 4
  %v2_131fc = add i32 %v0_131fc, %v1_131fc
  store i32 %v2_131fc, i32* %r3.global-to-local, align 4
  %v3_13200 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_13200, i32* @r2, align 4
  %v3_13204 = icmp ult i32 %v0_1314c, %v2_131fc
  %v1_13208 = add i32 %v0_1314c, 16
  store i32 %v1_13208, i32* %r7.global-to-local, align 4
  %v1_1320c = add i32 %v2_1319c, 19
  store i32 %v1_1320c, i32* @r0, align 4
  %v1_13210 = add i32 %v0_1314c, 19
  store i32 %v1_13210, i32* @r1, align 4
  br i1 %v3_13204, label %dec_label_pc_13148, label %dec_label_pc_1321c

dec_label_pc_1321c:                               ; preds = %dec_label_pc_131fc, %dec_label_pc_1316c
  %v1_1321c = phi i32 [ %v0_13180, %dec_label_pc_1316c ], [ %v2_1319c, %dec_label_pc_131fc ]
  %v0_1321c = phi i32 [ %v1_13180, %dec_label_pc_1316c ], [ %v0_13214, %dec_label_pc_131fc ]
  %v2_1321c = sub i32 %v1_1321c, %v0_1321c
  store i32 %v2_1321c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13220

dec_label_pc_13220:                               ; preds = %dec_label_pc_13188, %dec_label_pc_13124, %dec_label_pc_1321c
  %v0_13220 = phi i32 [ %v0_13220.pre, %dec_label_pc_13188 ], [ %v0_13124, %dec_label_pc_13124 ], [ %v2_1321c, %dec_label_pc_1321c ]
  store i32 %v3_130cc, i32* @r4, align 4
  store i32 %v9_130cc, i32* %r6.global-to-local, align 4
  ret i32 %v0_13220

; uselistorder directives
  uselistorder i32 %v1_13210, { 1, 0 }
  uselistorder i32 %v1_1320c, { 1, 0 }
  uselistorder i32 %v1_13208, { 1, 0 }
  uselistorder i32 %v3_13200, { 1, 0 }
  uselistorder i32 %v0_1314c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_1319c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_131a4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13134, { 1, 0, 2 }
  uselistorder i32 %v5_130f8, { 1, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_11b90, { 3, 1, 0, 2, 5, 4 }
  uselistorder i32 128, { 3, 4, 24, 5, 25, 16, 8, 9, 10, 17, 0, 18, 11, 12, 13, 14, 15, 19, 1, 20, 2, 6, 7, 21, 22, 23 }
  uselistorder i32* @sp, { 4, 2, 1, 3, 0 }
  uselistorder i32* @r6, { 1, 144, 145, 146, 184, 185, 359, 360, 361, 362, 363, 364, 365, 367, 366, 382, 383, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 19, 48, 93, 94, 95, 96, 97, 98, 39, 20, 21, 99, 44, 100, 101, 102, 103, 104, 105, 22, 23, 24, 25, 26, 40, 45, 10, 11, 12, 13, 14, 15, 16, 17, 18, 49, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 50, 51, 52, 53, 46, 47, 106, 107, 108, 109, 110, 54, 55, 111, 112, 7, 113, 114, 115, 116, 56, 117, 118, 119, 120, 121, 384, 385, 386, 188, 189, 190, 191, 0, 122, 123, 124, 125, 126, 127, 128, 129, 130, 2, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 165, 166, 167, 168, 8, 169, 170, 171, 3, 172, 173, 192, 4, 193, 5, 194, 6, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 174, 177, 175, 176, 178, 179, 9, 180, 181, 182, 183, 186, 187 }
  uselistorder label %dec_label_pc_13220, { 2, 0, 1 }
  uselistorder label %dec_label_pc_131fc, { 1, 0 }
}

define i32 @function_1322c() local_unnamed_addr {
dec_label_pc_1322c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1322c = load i32, i32* @r4, align 4
  store i32 %v3_1322c, i32* %stack_var_-8, align 4
  %v0_13234 = load i32, i32* @r0, align 4
  store i32 %v0_13234, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13234, -4095
  br i1 %tmp, label %dec_label_pc_13250, label %dec_label_pc_13240

dec_label_pc_13240:                               ; preds = %dec_label_pc_1322c
  %v0_13240 = call i32 @function_11b48()
  %v0_13244 = load i32, i32* %r4.global-to-local, align 4
  %v1_13244 = sub i32 0, %v0_13244
  %v2_13248 = inttoptr i32 %v0_13240 to i32*
  store i32 %v1_13244, i32* %v2_13248, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13254.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13250

dec_label_pc_13250:                               ; preds = %dec_label_pc_1322c, %dec_label_pc_13240
  %v2_13254 = phi i32 [ %v3_1322c, %dec_label_pc_1322c ], [ %v2_13254.pre, %dec_label_pc_13240 ]
  %v0_13250 = phi i32 [ %v0_13234, %dec_label_pc_1322c ], [ -1, %dec_label_pc_13240 ]
  store i32 %v2_13254, i32* @r4, align 4
  ret i32 %v0_13250

; uselistorder directives
  uselistorder i32 %v0_13234, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13250, { 1, 0 }
}

define i32 @function_13258() local_unnamed_addr {
dec_label_pc_13258:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13258 = load i32, i32* @r4, align 4
  store i32 %v3_13258, i32* %stack_var_-8, align 4
  %v0_13260 = load i32, i32* @r0, align 4
  store i32 %v0_13260, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13260, -4095
  br i1 %tmp, label %dec_label_pc_1327c, label %dec_label_pc_1326c

dec_label_pc_1326c:                               ; preds = %dec_label_pc_13258
  %v0_1326c = call i32 @function_11b48()
  %v0_13270 = load i32, i32* %r4.global-to-local, align 4
  %v1_13270 = sub i32 0, %v0_13270
  %v2_13274 = inttoptr i32 %v0_1326c to i32*
  store i32 %v1_13270, i32* %v2_13274, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13280.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1327c

dec_label_pc_1327c:                               ; preds = %dec_label_pc_13258, %dec_label_pc_1326c
  %v2_13280 = phi i32 [ %v3_13258, %dec_label_pc_13258 ], [ %v2_13280.pre, %dec_label_pc_1326c ]
  %v0_1327c = phi i32 [ %v0_13260, %dec_label_pc_13258 ], [ -1, %dec_label_pc_1326c ]
  store i32 %v2_13280, i32* @r4, align 4
  ret i32 %v0_1327c

; uselistorder directives
  uselistorder i32 %v0_13260, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1327c, { 1, 0 }
}

define i32 @function_13284(i32 %arg1) local_unnamed_addr {
dec_label_pc_13284:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13284 = load i32, i32* @r4, align 4
  store i32 %v3_13284, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_132a8, label %dec_label_pc_13298

dec_label_pc_13298:                               ; preds = %dec_label_pc_13284
  %v0_13298 = call i32 @function_11b48()
  %v0_1329c = load i32, i32* %r4.global-to-local, align 4
  %v1_1329c = sub i32 0, %v0_1329c
  %v2_132a0 = inttoptr i32 %v0_13298 to i32*
  store i32 %v1_1329c, i32* %v2_132a0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_132ac.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_132a8

dec_label_pc_132a8:                               ; preds = %dec_label_pc_13284, %dec_label_pc_13298
  %v2_132ac = phi i32 [ %v3_13284, %dec_label_pc_13284 ], [ %v2_132ac.pre, %dec_label_pc_13298 ]
  %v0_132a8 = phi i32 [ %arg1, %dec_label_pc_13284 ], [ -1, %dec_label_pc_13298 ]
  store i32 %v2_132ac, i32* %r4.global-to-local, align 4
  ret i32 %v0_132a8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_132a8, { 1, 0 }
}

define i32 @function_132b0() local_unnamed_addr {
dec_label_pc_132b0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_132b0 = load i32, i32* @r4, align 4
  store i32 %v3_132b0, i32* %stack_var_-8, align 4
  %v0_132b8 = load i32, i32* @r0, align 4
  store i32 %v0_132b8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_132b8, -4095
  br i1 %tmp, label %dec_label_pc_132d4, label %dec_label_pc_132c4

dec_label_pc_132c4:                               ; preds = %dec_label_pc_132b0
  %v0_132c4 = call i32 @function_11b48()
  %v0_132c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_132c8 = sub i32 0, %v0_132c8
  %v2_132cc = inttoptr i32 %v0_132c4 to i32*
  store i32 %v1_132c8, i32* %v2_132cc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_132d8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_132d4

dec_label_pc_132d4:                               ; preds = %dec_label_pc_132b0, %dec_label_pc_132c4
  %v2_132d8 = phi i32 [ %v3_132b0, %dec_label_pc_132b0 ], [ %v2_132d8.pre, %dec_label_pc_132c4 ]
  %v0_132d4 = phi i32 [ %v0_132b8, %dec_label_pc_132b0 ], [ -1, %dec_label_pc_132c4 ]
  store i32 %v2_132d8, i32* %r4.global-to-local, align 4
  ret i32 %v0_132d4

; uselistorder directives
  uselistorder i32 %v0_132b8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_132d4, { 1, 0 }
}

define i32 @function_132dc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_132dc:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13320, label %dec_label_pc_1330c

dec_label_pc_1330c:                               ; preds = %dec_label_pc_132dc
  %v0_1330c = call i32 @function_11b48()
  %v0_13310 = load i32, i32* %r4.global-to-local, align 4
  %v1_13310 = sub i32 0, %v0_13310
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13318 = inttoptr i32 %v0_1330c to i32*
  store i32 %v1_13310, i32* %v2_13318, align 4
  %v0_13328.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13328

dec_label_pc_13320:                               ; preds = %dec_label_pc_132dc
  %v2_13320 = icmp eq i32 %arg1, 0
  br i1 %v2_13320, label %dec_label_pc_13334, label %dec_label_pc_13328

dec_label_pc_13328:                               ; preds = %dec_label_pc_13320, %dec_label_pc_1330c
  %v0_13328 = phi i32 [ %arg1, %dec_label_pc_13320 ], [ %v0_13328.pre, %dec_label_pc_1330c ]
  br label %dec_label_pc_13338

dec_label_pc_13334:                               ; preds = %dec_label_pc_13320
  br label %dec_label_pc_13338

dec_label_pc_13338:                               ; preds = %dec_label_pc_13328, %dec_label_pc_13334
  %v14_1333c = phi i32 [ %v0_13328, %dec_label_pc_13328 ], [ %tmp9, %dec_label_pc_13334 ]
  ret i32 %v14_1333c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_13338, { 1, 0 }
}

define i32 @function_13340(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13340:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_13340 = load i32, i32* @r4, align 4
  store i32 %v3_13340, i32* %stack_var_-8, align 4
  %v6_13344 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_13344, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_13344, -4095
  br i1 %tmp6, label %dec_label_pc_13364, label %dec_label_pc_13354

dec_label_pc_13354:                               ; preds = %dec_label_pc_13340
  %v0_13354 = call i32 @function_11b48()
  %v0_13358 = load i32, i32* %r4.global-to-local, align 4
  %v1_13358 = sub i32 0, %v0_13358
  %v2_1335c = inttoptr i32 %v0_13354 to i32*
  store i32 %v1_13358, i32* %v2_1335c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13364

dec_label_pc_13364:                               ; preds = %dec_label_pc_13340, %dec_label_pc_13354
  %v0_13364 = phi i32 [ %v6_13344, %dec_label_pc_13340 ], [ -1, %dec_label_pc_13354 ]
  %v2_13368 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13368, i32* %r4.global-to-local, align 4
  ret i32 %v0_13364

; uselistorder directives
  uselistorder i32 %v6_13344, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13364, { 1, 0 }
}

define i32 @function_1336c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1336c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1336c = load i32, i32* @r4, align 4
  store i32 %v3_1336c, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1c5d8.485 to i32), i32* %r4.global-to-local, align 4
  %v2_13374 = load i32, i32* @global_var_1c5d8.485, align 4
  %v2_13378 = icmp eq i32 %v2_13374, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_13378, label %dec_label_pc_13388, label %dec_label_pc_13394

dec_label_pc_13388:                               ; preds = %dec_label_pc_1336c
  %v2_13388 = call i32 @function_13d88(i32* null)
  %v1_1338c = icmp slt i32 %v2_13388, 0
  br i1 %v1_1338c, label %dec_label_pc_133b4, label %dec_label_pc_13394thread-pre-split

dec_label_pc_13394thread-pre-split:               ; preds = %dec_label_pc_13388
  %v0_13398.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_13394.pre = load i32, i32* @global_var_1c5d8.485, align 4
  br label %dec_label_pc_13394

dec_label_pc_13394:                               ; preds = %dec_label_pc_13394thread-pre-split, %dec_label_pc_1336c
  %v2_13394 = phi i32 [ %v2_13394.pre, %dec_label_pc_13394thread-pre-split ], [ %v2_13374, %dec_label_pc_1336c ]
  %v1_133a0 = phi i32 [ %v0_13398.pr, %dec_label_pc_13394thread-pre-split ], [ %arg1, %dec_label_pc_1336c ]
  %v2_13398 = icmp eq i32 %v1_133a0, 0
  store i32 %v2_13394, i32* %r4.global-to-local, align 4
  br i1 %v2_13398, label %dec_label_pc_133b8, label %dec_label_pc_133a8

dec_label_pc_133a8:                               ; preds = %dec_label_pc_13394
  %v2_133a0 = add i32 %v1_133a0, %v2_13394
  %v1_133a8 = inttoptr i32 %v2_133a0 to i32*
  %v2_133a8 = call i32 @function_13d88(i32* %v1_133a8)
  %v1_133ac = icmp slt i32 %v2_133a8, 0
  br i1 %v1_133ac, label %dec_label_pc_133b4, label %dec_label_pc_133a8.dec_label_pc_133b8_crit_edge

dec_label_pc_133a8.dec_label_pc_133b8_crit_edge:  ; preds = %dec_label_pc_133a8
  %v0_133b8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_133b8

dec_label_pc_133b4:                               ; preds = %dec_label_pc_133a8, %dec_label_pc_13388
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_133b8

dec_label_pc_133b8:                               ; preds = %dec_label_pc_133a8.dec_label_pc_133b8_crit_edge, %dec_label_pc_13394, %dec_label_pc_133b4
  %v0_133b8 = phi i32 [ %v0_133b8.pre, %dec_label_pc_133a8.dec_label_pc_133b8_crit_edge ], [ %v2_13394, %dec_label_pc_13394 ], [ -1, %dec_label_pc_133b4 ]
  %v2_133bc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_133bc, i32* @r4, align 4
  ret i32 %v0_133b8

; uselistorder directives
  uselistorder i32 %v2_13394, { 1, 0, 2 }
  uselistorder i32* null, { 0, 4, 6, 23, 24, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1, 18, 19, 20, 2, 21, 3, 22 }
  uselistorder label %dec_label_pc_133b8, { 2, 0, 1 }
}

define i32 @function_133c4(%tms* %arg1) local_unnamed_addr {
dec_label_pc_133c4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_133c4 = load i32, i32* @r4, align 4
  store i32 %v3_133c4, i32* %stack_var_-8, align 4
  %v3_133c8 = call i32 @times(%tms* %arg1)
  store i32 %v3_133c8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_133c8, -4095
  br i1 %tmp, label %dec_label_pc_133e8, label %dec_label_pc_133d8

dec_label_pc_133d8:                               ; preds = %dec_label_pc_133c4
  %v0_133d8 = call i32 @function_11b48()
  %v0_133dc = load i32, i32* %r4.global-to-local, align 4
  %v1_133dc = sub i32 0, %v0_133dc
  %v2_133e0 = inttoptr i32 %v0_133d8 to i32*
  store i32 %v1_133dc, i32* %v2_133e0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_133e8

dec_label_pc_133e8:                               ; preds = %dec_label_pc_133c4, %dec_label_pc_133d8
  %v0_133e8 = phi i32 [ %v3_133c8, %dec_label_pc_133c4 ], [ -1, %dec_label_pc_133d8 ]
  %v2_133ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_133ec, i32* %r4.global-to-local, align 4
  ret i32 %v0_133e8

; uselistorder directives
  uselistorder i32 %v3_133c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_133e8, { 1, 0 }
}

define i32 @function_133f0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_133f0:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_1340c = inttoptr i32 %arg2 to i8*
  %v3_1340c = call i32 @function_11bb0(i8* %v2_1340c, i32 0)
  %v1_13410 = add i32 %tmp, 1
  %v2_13410 = inttoptr i32 %v1_13410 to i8*
  %v3_13410 = load i8, i8* %v2_13410, align 1
  %v4_13410 = zext i8 %v3_13410 to i32
  %v1_13414 = add i32 %tmp, 5
  %v2_13414 = inttoptr i32 %v1_13414 to i8*
  %v3_13414 = load i8, i8* %v2_13414, align 1
  %v4_13414 = zext i8 %v3_13414 to i32
  %v2_13418 = load i8, i8* %arg1, align 1
  %v3_13418 = zext i8 %v2_13418 to i32
  %v1_1341c = add i32 %tmp, 4
  %v2_1341c = inttoptr i32 %v1_1341c to i8*
  %v3_1341c = load i8, i8* %v2_1341c, align 1
  %v4_1341c = zext i8 %v3_1341c to i32
  %v1_13420 = add i32 %tmp, 2
  %v2_13420 = inttoptr i32 %v1_13420 to i8*
  %v3_13420 = load i8, i8* %v2_13420, align 1
  %v4_13420 = zext i8 %v3_13420 to i32
  %v1_13424 = add i32 %tmp, 6
  %v2_13424 = inttoptr i32 %v1_13424 to i8*
  %v3_13424 = load i8, i8* %v2_13424, align 1
  %v4_13424 = zext i8 %v3_13424 to i32
  %v1_13428 = add i32 %tmp, 3
  %v2_13428 = inttoptr i32 %v1_13428 to i8*
  %v3_13428 = load i8, i8* %v2_13428, align 1
  %v4_13428 = zext i8 %v3_13428 to i32
  %v4_1342c = mul nuw nsw i32 %v4_13410, 256
  %v5_1342c = or i32 %v3_13418, %v4_1342c
  %v4_13430 = mul nuw nsw i32 %v4_13414, 256
  %v5_13430 = or i32 %v4_1341c, %v4_13430
  %v1_13434 = add i32 %tmp, 7
  %v2_13434 = inttoptr i32 %v1_13434 to i8*
  %v3_13434 = load i8, i8* %v2_13434, align 1
  %v4_13434 = zext i8 %v3_13434 to i32
  %v4_13438 = mul nuw nsw i32 %v4_13420, 65536
  %v5_13438 = or i32 %v4_13438, %v5_1342c
  %v4_1343c = mul nuw nsw i32 %v4_13424, 65536
  %v5_1343c = or i32 %v4_1343c, %v5_13430
  %v4_13440 = mul nuw i32 %v4_13428, 16777216
  %v5_13440 = or i32 %v4_13440, %v5_13438
  %v4_13444 = mul nuw i32 %v4_13434, 16777216
  %v5_13444 = or i32 %v4_13444, %v5_1343c
  store i32 %v5_13444, i32* %r3.global-to-local, align 4
  %v0_13448 = load i32, i32* %r7.global-to-local, align 4
  %v1_13448 = inttoptr i32 %v0_13448 to i32*
  store i32 %v5_13440, i32* %v1_13448, align 4
  %v3_13448 = add i32 %v0_13448, 4
  %v4_13448 = inttoptr i32 %v3_13448 to i32*
  %v5_13448 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_13448, i32* %v4_13448, align 4
  %v0_1344c = load i32, i32* %r4.global-to-local, align 4
  %v1_1344c = add i32 %v0_1344c, 89
  %v2_1344c = inttoptr i32 %v1_1344c to i8*
  %v3_1344c = load i8, i8* %v2_1344c, align 1
  %v4_1344c = zext i8 %v3_1344c to i32
  %v1_13450 = add i32 %v0_1344c, 93
  %v2_13450 = inttoptr i32 %v1_13450 to i8*
  %v3_13450 = load i8, i8* %v2_13450, align 1
  %v4_13450 = zext i8 %v3_13450 to i32
  %v1_13454 = add i32 %v0_1344c, 88
  %v2_13454 = inttoptr i32 %v1_13454 to i8*
  %v3_13454 = load i8, i8* %v2_13454, align 1
  %v4_13454 = zext i8 %v3_13454 to i32
  %v1_13458 = add i32 %v0_1344c, 92
  %v2_13458 = inttoptr i32 %v1_13458 to i8*
  %v3_13458 = load i8, i8* %v2_13458, align 1
  %v4_13458 = zext i8 %v3_13458 to i32
  store i32 %v4_13458, i32* %r3.global-to-local, align 4
  %v1_1345c = add i32 %v0_1344c, 94
  %v2_1345c = inttoptr i32 %v1_1345c to i8*
  %v3_1345c = load i8, i8* %v2_1345c, align 1
  %v4_1345c = zext i8 %v3_1345c to i32
  %v1_13460 = add i32 %v0_1344c, 90
  %v2_13460 = inttoptr i32 %v1_13460 to i8*
  %v3_13460 = load i8, i8* %v2_13460, align 1
  %v4_13460 = zext i8 %v3_13460 to i32
  %v1_13464 = add i32 %v0_1344c, 91
  %v2_13464 = inttoptr i32 %v1_13464 to i8*
  %v3_13464 = load i8, i8* %v2_13464, align 1
  %v4_13464 = zext i8 %v3_13464 to i32
  %v4_13468 = mul nuw nsw i32 %v4_1344c, 256
  %v5_13468 = or i32 %v4_13454, %v4_13468
  %v4_1346c = mul nuw nsw i32 %v4_13450, 256
  %v5_1346c = or i32 %v4_13458, %v4_1346c
  store i32 %v5_1346c, i32* %r3.global-to-local, align 4
  %v1_13470 = add i32 %v0_1344c, 95
  %v2_13470 = inttoptr i32 %v1_13470 to i8*
  %v3_13470 = load i8, i8* %v2_13470, align 1
  %v4_13470 = zext i8 %v3_13470 to i32
  %v4_13474 = mul nuw nsw i32 %v4_1345c, 65536
  %v5_13474 = or i32 %v4_13474, %v5_1346c
  store i32 %v5_13474, i32* %r3.global-to-local, align 4
  %v4_13478 = mul nuw nsw i32 %v4_13460, 65536
  %v5_13478 = or i32 %v4_13478, %v5_13468
  %v4_1347c = mul nuw i32 %v4_13464, 16777216
  %v5_1347c = or i32 %v4_1347c, %v5_13478
  %v4_13480 = mul nuw i32 %v4_13470, 16777216
  %v5_13480 = or i32 %v4_13480, %v5_13474
  store i32 %v5_13480, i32* %r6.global-to-local, align 4
  %v1_13484 = load i32, i32* %r7.global-to-local, align 4
  %v2_13484 = add i32 %v1_13484, 88
  %v3_13484 = inttoptr i32 %v2_13484 to i32*
  store i32 %v5_1347c, i32* %v3_13484, align 4
  %v0_13488 = load i32, i32* %r6.global-to-local, align 4
  %v1_13488 = load i32, i32* %r7.global-to-local, align 4
  %v2_13488 = add i32 %v1_13488, 92
  %v3_13488 = inttoptr i32 %v2_13488 to i32*
  store i32 %v0_13488, i32* %v3_13488, align 4
  %v0_1348c = load i32, i32* %r4.global-to-local, align 4
  %v1_1348c = add i32 %v0_1348c, 13
  %v2_1348c = inttoptr i32 %v1_1348c to i8*
  %v3_1348c = load i8, i8* %v2_1348c, align 1
  %v4_1348c = zext i8 %v3_1348c to i32
  %v1_13490 = add i32 %v0_1348c, 12
  %v2_13490 = inttoptr i32 %v1_13490 to i8*
  %v3_13490 = load i8, i8* %v2_13490, align 1
  %v4_13490 = zext i8 %v3_13490 to i32
  store i32 %v4_13490, i32* %r3.global-to-local, align 4
  %v1_13494 = add i32 %v0_1348c, 14
  %v2_13494 = inttoptr i32 %v1_13494 to i8*
  %v3_13494 = load i8, i8* %v2_13494, align 1
  %v4_13494 = zext i8 %v3_13494 to i32
  %v4_13498 = mul nuw nsw i32 %v4_1348c, 256
  %v5_13498 = or i32 %v4_13490, %v4_13498
  store i32 %v5_13498, i32* %r3.global-to-local, align 4
  %v1_1349c = add i32 %v0_1348c, 15
  %v2_1349c = inttoptr i32 %v1_1349c to i8*
  %v3_1349c = load i8, i8* %v2_1349c, align 1
  %v4_1349c = zext i8 %v3_1349c to i32
  %v4_134a0 = mul nuw nsw i32 %v4_13494, 65536
  %v5_134a0 = or i32 %v4_134a0, %v5_13498
  %v4_134a4 = mul nuw i32 %v4_1349c, 16777216
  %v5_134a4 = or i32 %v5_134a0, %v4_134a4
  store i32 %v5_134a4, i32* %r3.global-to-local, align 4
  %v1_134a8 = load i32, i32* %r7.global-to-local, align 4
  %v2_134a8 = add i32 %v1_134a8, 12
  %v3_134a8 = inttoptr i32 %v2_134a8 to i32*
  store i32 %v5_134a4, i32* %v3_134a8, align 4
  %v0_134ac = load i32, i32* %r4.global-to-local, align 4
  %v1_134ac = add i32 %v0_134ac, 17
  %v2_134ac = inttoptr i32 %v1_134ac to i8*
  %v3_134ac = load i8, i8* %v2_134ac, align 1
  %v4_134ac = zext i8 %v3_134ac to i32
  %v1_134b0 = add i32 %v0_134ac, 16
  %v2_134b0 = inttoptr i32 %v1_134b0 to i8*
  %v3_134b0 = load i8, i8* %v2_134b0, align 1
  %v4_134b0 = zext i8 %v3_134b0 to i32
  store i32 %v4_134b0, i32* %r3.global-to-local, align 4
  %v1_134b4 = add i32 %v0_134ac, 18
  %v2_134b4 = inttoptr i32 %v1_134b4 to i8*
  %v3_134b4 = load i8, i8* %v2_134b4, align 1
  %v4_134b4 = zext i8 %v3_134b4 to i32
  %v4_134b8 = mul nuw nsw i32 %v4_134ac, 256
  %v5_134b8 = or i32 %v4_134b0, %v4_134b8
  store i32 %v5_134b8, i32* %r3.global-to-local, align 4
  %v1_134bc = add i32 %v0_134ac, 19
  %v2_134bc = inttoptr i32 %v1_134bc to i8*
  %v3_134bc = load i8, i8* %v2_134bc, align 1
  %v4_134bc = zext i8 %v3_134bc to i32
  %v4_134c0 = mul nuw nsw i32 %v4_134b4, 65536
  %v5_134c0 = or i32 %v4_134c0, %v5_134b8
  %v4_134c4 = mul nuw i32 %v4_134bc, 16777216
  %v5_134c4 = or i32 %v5_134c0, %v4_134c4
  store i32 %v5_134c4, i32* %r3.global-to-local, align 4
  %v1_134c8 = load i32, i32* %r7.global-to-local, align 4
  %v2_134c8 = add i32 %v1_134c8, 16
  %v3_134c8 = inttoptr i32 %v2_134c8 to i32*
  store i32 %v5_134c4, i32* %v3_134c8, align 4
  %v0_134cc = load i32, i32* %r4.global-to-local, align 4
  %v1_134cc = add i32 %v0_134cc, 21
  %v2_134cc = inttoptr i32 %v1_134cc to i8*
  %v3_134cc = load i8, i8* %v2_134cc, align 1
  %v4_134cc = zext i8 %v3_134cc to i32
  %v1_134d0 = add i32 %v0_134cc, 20
  %v2_134d0 = inttoptr i32 %v1_134d0 to i8*
  %v3_134d0 = load i8, i8* %v2_134d0, align 1
  %v4_134d0 = zext i8 %v3_134d0 to i32
  store i32 %v4_134d0, i32* %r3.global-to-local, align 4
  %v1_134d4 = add i32 %v0_134cc, 22
  %v2_134d4 = inttoptr i32 %v1_134d4 to i8*
  %v3_134d4 = load i8, i8* %v2_134d4, align 1
  %v4_134d4 = zext i8 %v3_134d4 to i32
  %v4_134d8 = mul nuw nsw i32 %v4_134cc, 256
  %v5_134d8 = or i32 %v4_134d0, %v4_134d8
  store i32 %v5_134d8, i32* %r3.global-to-local, align 4
  %v1_134dc = add i32 %v0_134cc, 23
  %v2_134dc = inttoptr i32 %v1_134dc to i8*
  %v3_134dc = load i8, i8* %v2_134dc, align 1
  %v4_134dc = zext i8 %v3_134dc to i32
  %v4_134e0 = mul nuw nsw i32 %v4_134d4, 65536
  %v5_134e0 = or i32 %v4_134e0, %v5_134d8
  %v4_134e4 = mul nuw i32 %v4_134dc, 16777216
  %v5_134e4 = or i32 %v5_134e0, %v4_134e4
  store i32 %v5_134e4, i32* %r3.global-to-local, align 4
  %v1_134e8 = load i32, i32* %r7.global-to-local, align 4
  %v2_134e8 = add i32 %v1_134e8, 20
  %v3_134e8 = inttoptr i32 %v2_134e8 to i32*
  store i32 %v5_134e4, i32* %v3_134e8, align 4
  %v0_134ec = load i32, i32* %r4.global-to-local, align 4
  %v1_134ec = add i32 %v0_134ec, 25
  %v2_134ec = inttoptr i32 %v1_134ec to i8*
  %v3_134ec = load i8, i8* %v2_134ec, align 1
  %v4_134ec = zext i8 %v3_134ec to i32
  %v1_134f0 = add i32 %v0_134ec, 24
  %v2_134f0 = inttoptr i32 %v1_134f0 to i8*
  %v3_134f0 = load i8, i8* %v2_134f0, align 1
  %v4_134f0 = zext i8 %v3_134f0 to i32
  store i32 %v4_134f0, i32* %r3.global-to-local, align 4
  %v1_134f4 = add i32 %v0_134ec, 26
  %v2_134f4 = inttoptr i32 %v1_134f4 to i8*
  %v3_134f4 = load i8, i8* %v2_134f4, align 1
  %v4_134f4 = zext i8 %v3_134f4 to i32
  %v4_134f8 = mul nuw nsw i32 %v4_134ec, 256
  %v5_134f8 = or i32 %v4_134f0, %v4_134f8
  store i32 %v5_134f8, i32* %r3.global-to-local, align 4
  %v1_134fc = add i32 %v0_134ec, 27
  %v2_134fc = inttoptr i32 %v1_134fc to i8*
  %v3_134fc = load i8, i8* %v2_134fc, align 1
  %v4_134fc = zext i8 %v3_134fc to i32
  %v4_13500 = mul nuw nsw i32 %v4_134f4, 65536
  %v5_13500 = or i32 %v4_13500, %v5_134f8
  %v4_13504 = mul nuw i32 %v4_134fc, 16777216
  %v5_13504 = or i32 %v5_13500, %v4_13504
  store i32 %v5_13504, i32* %r3.global-to-local, align 4
  %v1_13508 = load i32, i32* %r7.global-to-local, align 4
  %v2_13508 = add i32 %v1_13508, 24
  %v3_13508 = inttoptr i32 %v2_13508 to i32*
  store i32 %v5_13504, i32* %v3_13508, align 4
  %v0_1350c = load i32, i32* %r4.global-to-local, align 4
  %v1_1350c = add i32 %v0_1350c, 29
  %v2_1350c = inttoptr i32 %v1_1350c to i8*
  %v3_1350c = load i8, i8* %v2_1350c, align 1
  %v4_1350c = zext i8 %v3_1350c to i32
  %v1_13510 = add i32 %v0_1350c, 28
  %v2_13510 = inttoptr i32 %v1_13510 to i8*
  %v3_13510 = load i8, i8* %v2_13510, align 1
  %v4_13510 = zext i8 %v3_13510 to i32
  store i32 %v4_13510, i32* %r3.global-to-local, align 4
  %v1_13514 = add i32 %v0_1350c, 30
  %v2_13514 = inttoptr i32 %v1_13514 to i8*
  %v3_13514 = load i8, i8* %v2_13514, align 1
  %v4_13514 = zext i8 %v3_13514 to i32
  %v4_13518 = mul nuw nsw i32 %v4_1350c, 256
  %v5_13518 = or i32 %v4_13510, %v4_13518
  store i32 %v5_13518, i32* %r3.global-to-local, align 4
  %v1_1351c = add i32 %v0_1350c, 31
  %v2_1351c = inttoptr i32 %v1_1351c to i8*
  %v3_1351c = load i8, i8* %v2_1351c, align 1
  %v4_1351c = zext i8 %v3_1351c to i32
  %v4_13520 = mul nuw nsw i32 %v4_13514, 65536
  %v5_13520 = or i32 %v4_13520, %v5_13518
  %v4_13524 = mul nuw i32 %v4_1351c, 16777216
  %v5_13524 = or i32 %v5_13520, %v4_13524
  store i32 %v5_13524, i32* %r3.global-to-local, align 4
  %v1_13528 = load i32, i32* %r7.global-to-local, align 4
  %v2_13528 = add i32 %v1_13528, 28
  %v3_13528 = inttoptr i32 %v2_13528 to i32*
  store i32 %v5_13524, i32* %v3_13528, align 4
  %v0_1352c = load i32, i32* %r4.global-to-local, align 4
  %v1_1352c = add i32 %v0_1352c, 33
  %v2_1352c = inttoptr i32 %v1_1352c to i8*
  %v3_1352c = load i8, i8* %v2_1352c, align 1
  %v4_1352c = zext i8 %v3_1352c to i32
  %v1_13530 = add i32 %v0_1352c, 37
  %v2_13530 = inttoptr i32 %v1_13530 to i8*
  %v3_13530 = load i8, i8* %v2_13530, align 1
  %v4_13530 = zext i8 %v3_13530 to i32
  %v1_13534 = add i32 %v0_1352c, 32
  %v2_13534 = inttoptr i32 %v1_13534 to i8*
  %v3_13534 = load i8, i8* %v2_13534, align 1
  %v4_13534 = zext i8 %v3_13534 to i32
  %v1_13538 = add i32 %v0_1352c, 36
  %v2_13538 = inttoptr i32 %v1_13538 to i8*
  %v3_13538 = load i8, i8* %v2_13538, align 1
  %v4_13538 = zext i8 %v3_13538 to i32
  store i32 %v4_13538, i32* %r3.global-to-local, align 4
  %v1_1353c = add i32 %v0_1352c, 34
  %v2_1353c = inttoptr i32 %v1_1353c to i8*
  %v3_1353c = load i8, i8* %v2_1353c, align 1
  %v4_1353c = zext i8 %v3_1353c to i32
  %v1_13540 = add i32 %v0_1352c, 38
  %v2_13540 = inttoptr i32 %v1_13540 to i8*
  %v3_13540 = load i8, i8* %v2_13540, align 1
  %v4_13540 = zext i8 %v3_13540 to i32
  %v1_13544 = add i32 %v0_1352c, 35
  %v2_13544 = inttoptr i32 %v1_13544 to i8*
  %v3_13544 = load i8, i8* %v2_13544, align 1
  %v4_13544 = zext i8 %v3_13544 to i32
  %v4_13548 = mul nuw nsw i32 %v4_1352c, 256
  %v5_13548 = or i32 %v4_13534, %v4_13548
  %v4_1354c = mul nuw nsw i32 %v4_13530, 256
  %v5_1354c = or i32 %v4_13538, %v4_1354c
  store i32 %v5_1354c, i32* %r3.global-to-local, align 4
  %v1_13550 = add i32 %v0_1352c, 39
  %v2_13550 = inttoptr i32 %v1_13550 to i8*
  %v3_13550 = load i8, i8* %v2_13550, align 1
  %v4_13550 = zext i8 %v3_13550 to i32
  %v4_13554 = mul nuw nsw i32 %v4_1353c, 65536
  %v5_13554 = or i32 %v4_13554, %v5_13548
  %v4_13558 = mul nuw nsw i32 %v4_13540, 65536
  %v5_13558 = or i32 %v4_13558, %v5_1354c
  %v4_1355c = mul nuw i32 %v4_13544, 16777216
  %v5_1355c = or i32 %v5_13554, %v4_1355c
  %v4_13560 = mul nuw i32 %v4_13550, 16777216
  %v5_13560 = or i32 %v5_13558, %v4_13560
  store i32 %v5_13560, i32* %r3.global-to-local, align 4
  %v1_13574 = load i32, i32* %r7.global-to-local, align 4
  %v2_13574 = add i32 %v1_13574, 32
  %v3_13574 = inttoptr i32 %v2_13574 to i32*
  store i32 %v5_1355c, i32* %v3_13574, align 4
  %v0_13578 = load i32, i32* %r3.global-to-local, align 4
  %v1_13578 = load i32, i32* %r7.global-to-local, align 4
  %v2_13578 = add i32 %v1_13578, 36
  %v3_13578 = inttoptr i32 %v2_13578 to i32*
  store i32 %v0_13578, i32* %v3_13578, align 4
  %v0_1357c = load i32, i32* %r4.global-to-local, align 4
  %v1_1357c = add i32 %v0_1357c, 45
  %v2_1357c = inttoptr i32 %v1_1357c to i8*
  %v3_1357c = load i8, i8* %v2_1357c, align 1
  %v4_1357c = zext i8 %v3_1357c to i32
  %v1_13580 = add i32 %v0_1357c, 49
  %v2_13580 = inttoptr i32 %v1_13580 to i8*
  %v3_13580 = load i8, i8* %v2_13580, align 1
  %v4_13580 = zext i8 %v3_13580 to i32
  %v1_13584 = add i32 %v0_1357c, 44
  %v2_13584 = inttoptr i32 %v1_13584 to i8*
  %v3_13584 = load i8, i8* %v2_13584, align 1
  %v4_13584 = zext i8 %v3_13584 to i32
  %v1_13588 = add i32 %v0_1357c, 48
  %v2_13588 = inttoptr i32 %v1_13588 to i8*
  %v3_13588 = load i8, i8* %v2_13588, align 1
  %v4_13588 = zext i8 %v3_13588 to i32
  store i32 %v4_13588, i32* %r3.global-to-local, align 4
  %v1_1358c = add i32 %v0_1357c, 46
  %v2_1358c = inttoptr i32 %v1_1358c to i8*
  %v3_1358c = load i8, i8* %v2_1358c, align 1
  %v4_1358c = zext i8 %v3_1358c to i32
  %v1_13590 = add i32 %v0_1357c, 50
  %v2_13590 = inttoptr i32 %v1_13590 to i8*
  %v3_13590 = load i8, i8* %v2_13590, align 1
  %v4_13590 = zext i8 %v3_13590 to i32
  %v1_13594 = add i32 %v0_1357c, 47
  %v2_13594 = inttoptr i32 %v1_13594 to i8*
  %v3_13594 = load i8, i8* %v2_13594, align 1
  %v4_13594 = zext i8 %v3_13594 to i32
  %v4_13598 = mul nuw nsw i32 %v4_1357c, 256
  %v5_13598 = or i32 %v4_13584, %v4_13598
  %v4_1359c = mul nuw nsw i32 %v4_13580, 256
  %v5_1359c = or i32 %v4_13588, %v4_1359c
  store i32 %v5_1359c, i32* %r3.global-to-local, align 4
  %v1_135a0 = add i32 %v0_1357c, 51
  %v2_135a0 = inttoptr i32 %v1_135a0 to i8*
  %v3_135a0 = load i8, i8* %v2_135a0, align 1
  %v4_135a0 = zext i8 %v3_135a0 to i32
  %v4_135a4 = mul nuw nsw i32 %v4_1358c, 65536
  %v5_135a4 = or i32 %v4_135a4, %v5_13598
  %v4_135a8 = mul nuw nsw i32 %v4_13590, 65536
  %v5_135a8 = or i32 %v4_135a8, %v5_1359c
  %v4_135ac = mul nuw i32 %v4_13594, 16777216
  %v5_135ac = or i32 %v5_135a4, %v4_135ac
  %v4_135b0 = mul nuw i32 %v4_135a0, 16777216
  %v5_135b0 = or i32 %v5_135a8, %v4_135b0
  store i32 %v5_135b0, i32* %r3.global-to-local, align 4
  %v1_135c4 = load i32, i32* %r7.global-to-local, align 4
  %v2_135c4 = add i32 %v1_135c4, 44
  %v3_135c4 = inttoptr i32 %v2_135c4 to i32*
  store i32 %v5_135ac, i32* %v3_135c4, align 4
  %v0_135c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_135c8 = load i32, i32* %r7.global-to-local, align 4
  %v2_135c8 = add i32 %v1_135c8, 48
  %v3_135c8 = inttoptr i32 %v2_135c8 to i32*
  store i32 %v0_135c8, i32* %v3_135c8, align 4
  %v0_135cc = load i32, i32* %r4.global-to-local, align 4
  %v1_135cc = add i32 %v0_135cc, 53
  %v2_135cc = inttoptr i32 %v1_135cc to i8*
  %v3_135cc = load i8, i8* %v2_135cc, align 1
  %v4_135cc = zext i8 %v3_135cc to i32
  %v1_135d0 = add i32 %v0_135cc, 52
  %v2_135d0 = inttoptr i32 %v1_135d0 to i8*
  %v3_135d0 = load i8, i8* %v2_135d0, align 1
  %v4_135d0 = zext i8 %v3_135d0 to i32
  store i32 %v4_135d0, i32* %r3.global-to-local, align 4
  %v1_135d4 = add i32 %v0_135cc, 54
  %v2_135d4 = inttoptr i32 %v1_135d4 to i8*
  %v3_135d4 = load i8, i8* %v2_135d4, align 1
  %v4_135d4 = zext i8 %v3_135d4 to i32
  %v4_135d8 = mul nuw nsw i32 %v4_135cc, 256
  %v5_135d8 = or i32 %v4_135d0, %v4_135d8
  store i32 %v5_135d8, i32* %r3.global-to-local, align 4
  %v1_135dc = add i32 %v0_135cc, 55
  %v2_135dc = inttoptr i32 %v1_135dc to i8*
  %v3_135dc = load i8, i8* %v2_135dc, align 1
  %v4_135dc = zext i8 %v3_135dc to i32
  %v4_135e0 = mul nuw nsw i32 %v4_135d4, 65536
  %v5_135e0 = or i32 %v4_135e0, %v5_135d8
  %v4_135e4 = mul nuw i32 %v4_135dc, 16777216
  %v5_135e4 = or i32 %v5_135e0, %v4_135e4
  store i32 %v5_135e4, i32* %r3.global-to-local, align 4
  %v1_135e8 = load i32, i32* %r7.global-to-local, align 4
  %v2_135e8 = add i32 %v1_135e8, 52
  %v3_135e8 = inttoptr i32 %v2_135e8 to i32*
  store i32 %v5_135e4, i32* %v3_135e8, align 4
  %v0_135ec = load i32, i32* %r4.global-to-local, align 4
  %v1_135ec = add i32 %v0_135ec, 57
  %v2_135ec = inttoptr i32 %v1_135ec to i8*
  %v3_135ec = load i8, i8* %v2_135ec, align 1
  %v4_135ec = zext i8 %v3_135ec to i32
  %v1_135f0 = add i32 %v0_135ec, 56
  %v2_135f0 = inttoptr i32 %v1_135f0 to i8*
  %v3_135f0 = load i8, i8* %v2_135f0, align 1
  %v4_135f0 = zext i8 %v3_135f0 to i32
  %v1_135f4 = add i32 %v0_135ec, 60
  %v2_135f4 = inttoptr i32 %v1_135f4 to i8*
  %v3_135f4 = load i8, i8* %v2_135f4, align 1
  %v4_135f4 = zext i8 %v3_135f4 to i32
  store i32 %v4_135f4, i32* %r3.global-to-local, align 4
  %v1_135f8 = add i32 %v0_135ec, 61
  %v2_135f8 = inttoptr i32 %v1_135f8 to i8*
  %v3_135f8 = load i8, i8* %v2_135f8, align 1
  %v4_135f8 = zext i8 %v3_135f8 to i32
  %v1_135fc = add i32 %v0_135ec, 58
  %v2_135fc = inttoptr i32 %v1_135fc to i8*
  %v3_135fc = load i8, i8* %v2_135fc, align 1
  %v4_135fc = zext i8 %v3_135fc to i32
  %v1_13600 = add i32 %v0_135ec, 62
  %v2_13600 = inttoptr i32 %v1_13600 to i8*
  %v3_13600 = load i8, i8* %v2_13600, align 1
  %v4_13600 = zext i8 %v3_13600 to i32
  %v1_13604 = add i32 %v0_135ec, 59
  %v2_13604 = inttoptr i32 %v1_13604 to i8*
  %v3_13604 = load i8, i8* %v2_13604, align 1
  %v4_13604 = zext i8 %v3_13604 to i32
  %v4_13608 = mul nuw nsw i32 %v4_135ec, 256
  %v5_13608 = or i32 %v4_135f0, %v4_13608
  %v4_1360c = mul nuw nsw i32 %v4_135f8, 256
  %v5_1360c = or i32 %v4_1360c, %v4_135f4
  store i32 %v5_1360c, i32* %r3.global-to-local, align 4
  %v1_13610 = add i32 %v0_135ec, 63
  %v2_13610 = inttoptr i32 %v1_13610 to i8*
  %v3_13610 = load i8, i8* %v2_13610, align 1
  %v4_13610 = zext i8 %v3_13610 to i32
  %v4_13614 = mul nuw nsw i32 %v4_135fc, 65536
  %v5_13614 = or i32 %v4_13614, %v5_13608
  %v4_13618 = mul nuw nsw i32 %v4_13600, 65536
  %v5_13618 = or i32 %v4_13618, %v5_1360c
  %v4_1361c = mul nuw i32 %v4_13610, 16777216
  %v5_1361c = or i32 %v5_13618, %v4_1361c
  %v4_13620 = mul nuw i32 %v4_13604, 16777216
  %v5_13620 = or i32 %v5_13614, %v4_13620
  store i32 %v5_1361c, i32* %r3.global-to-local, align 4
  %v1_13630 = load i32, i32* %r7.global-to-local, align 4
  %v2_13630 = add i32 %v1_13630, 56
  %v3_13630 = inttoptr i32 %v2_13630 to i32*
  store i32 %v5_13620, i32* %v3_13630, align 4
  %v0_13634 = load i32, i32* %r3.global-to-local, align 4
  %v1_13634 = load i32, i32* %r7.global-to-local, align 4
  %v2_13634 = add i32 %v1_13634, 60
  %v3_13634 = inttoptr i32 %v2_13634 to i32*
  store i32 %v0_13634, i32* %v3_13634, align 4
  %v0_13638 = load i32, i32* %r4.global-to-local, align 4
  %v1_13638 = add i32 %v0_13638, 65
  %v2_13638 = inttoptr i32 %v1_13638 to i8*
  %v3_13638 = load i8, i8* %v2_13638, align 1
  %v4_13638 = zext i8 %v3_13638 to i32
  %v1_1363c = add i32 %v0_13638, 64
  %v2_1363c = inttoptr i32 %v1_1363c to i8*
  %v3_1363c = load i8, i8* %v2_1363c, align 1
  %v4_1363c = zext i8 %v3_1363c to i32
  store i32 %v4_1363c, i32* %r3.global-to-local, align 4
  %v1_13640 = add i32 %v0_13638, 66
  %v2_13640 = inttoptr i32 %v1_13640 to i8*
  %v3_13640 = load i8, i8* %v2_13640, align 1
  %v4_13640 = zext i8 %v3_13640 to i32
  %v4_13644 = mul nuw nsw i32 %v4_13638, 256
  %v5_13644 = or i32 %v4_1363c, %v4_13644
  store i32 %v5_13644, i32* %r3.global-to-local, align 4
  %v1_13648 = add i32 %v0_13638, 67
  %v2_13648 = inttoptr i32 %v1_13648 to i8*
  %v3_13648 = load i8, i8* %v2_13648, align 1
  %v4_13648 = zext i8 %v3_13648 to i32
  %v4_1364c = mul nuw nsw i32 %v4_13640, 65536
  %v5_1364c = or i32 %v4_1364c, %v5_13644
  %v4_13650 = mul nuw i32 %v4_13648, 16777216
  %v5_13650 = or i32 %v5_1364c, %v4_13650
  store i32 %v5_13650, i32* %r3.global-to-local, align 4
  %v1_13654 = load i32, i32* %r7.global-to-local, align 4
  %v2_13654 = add i32 %v1_13654, 64
  %v3_13654 = inttoptr i32 %v2_13654 to i32*
  store i32 %v5_13650, i32* %v3_13654, align 4
  %v0_13658 = load i32, i32* %r4.global-to-local, align 4
  %v1_13658 = add i32 %v0_13658, 73
  %v2_13658 = inttoptr i32 %v1_13658 to i8*
  %v3_13658 = load i8, i8* %v2_13658, align 1
  %v4_13658 = zext i8 %v3_13658 to i32
  %v1_1365c = add i32 %v0_13658, 72
  %v2_1365c = inttoptr i32 %v1_1365c to i8*
  %v3_1365c = load i8, i8* %v2_1365c, align 1
  %v4_1365c = zext i8 %v3_1365c to i32
  store i32 %v4_1365c, i32* %r3.global-to-local, align 4
  %v1_13660 = add i32 %v0_13658, 74
  %v2_13660 = inttoptr i32 %v1_13660 to i8*
  %v3_13660 = load i8, i8* %v2_13660, align 1
  %v4_13660 = zext i8 %v3_13660 to i32
  %v4_13664 = mul nuw nsw i32 %v4_13658, 256
  %v5_13664 = or i32 %v4_1365c, %v4_13664
  store i32 %v5_13664, i32* %r3.global-to-local, align 4
  %v1_13668 = add i32 %v0_13658, 75
  %v2_13668 = inttoptr i32 %v1_13668 to i8*
  %v3_13668 = load i8, i8* %v2_13668, align 1
  %v4_13668 = zext i8 %v3_13668 to i32
  %v4_1366c = mul nuw nsw i32 %v4_13660, 65536
  %v5_1366c = or i32 %v4_1366c, %v5_13664
  %v4_13670 = mul nuw i32 %v4_13668, 16777216
  %v5_13670 = or i32 %v5_1366c, %v4_13670
  store i32 %v5_13670, i32* %r3.global-to-local, align 4
  %v1_13674 = load i32, i32* %r7.global-to-local, align 4
  %v2_13674 = add i32 %v1_13674, 72
  %v3_13674 = inttoptr i32 %v2_13674 to i32*
  store i32 %v5_13670, i32* %v3_13674, align 4
  %v0_13678 = load i32, i32* %r4.global-to-local, align 4
  %v1_13678 = add i32 %v0_13678, 81
  %v2_13678 = inttoptr i32 %v1_13678 to i8*
  %v3_13678 = load i8, i8* %v2_13678, align 1
  %v4_13678 = zext i8 %v3_13678 to i32
  %v1_1367c = add i32 %v0_13678, 80
  %v2_1367c = inttoptr i32 %v1_1367c to i8*
  %v3_1367c = load i8, i8* %v2_1367c, align 1
  %v4_1367c = zext i8 %v3_1367c to i32
  store i32 %v4_1367c, i32* %r3.global-to-local, align 4
  %v1_13680 = add i32 %v0_13678, 82
  %v2_13680 = inttoptr i32 %v1_13680 to i8*
  %v3_13680 = load i8, i8* %v2_13680, align 1
  %v4_13680 = zext i8 %v3_13680 to i32
  %v4_13684 = mul nuw nsw i32 %v4_13678, 256
  %v5_13684 = or i32 %v4_1367c, %v4_13684
  store i32 %v5_13684, i32* %r3.global-to-local, align 4
  %v1_13688 = add i32 %v0_13678, 83
  %v2_13688 = inttoptr i32 %v1_13688 to i8*
  %v3_13688 = load i8, i8* %v2_13688, align 1
  %v4_13688 = zext i8 %v3_13688 to i32
  %v4_1368c = mul nuw nsw i32 %v4_13680, 65536
  %v5_1368c = or i32 %v4_1368c, %v5_13684
  %v4_13690 = mul nuw i32 %v4_13688, 16777216
  %v5_13690 = or i32 %v5_1368c, %v4_13690
  store i32 %v5_13690, i32* %r3.global-to-local, align 4
  %v1_13694 = load i32, i32* %r7.global-to-local, align 4
  %v2_13694 = add i32 %v1_13694, 80
  %v3_13694 = inttoptr i32 %v2_13694 to i32*
  store i32 %v5_13690, i32* %v3_13694, align 4
  %v0_13698 = load i32, i32* %r4.global-to-local, align 4
  %v1_13698 = add i32 %v0_13698, 69
  %v2_13698 = inttoptr i32 %v1_13698 to i8*
  %v3_13698 = load i8, i8* %v2_13698, align 1
  %v4_13698 = zext i8 %v3_13698 to i32
  %v1_1369c = add i32 %v0_13698, 68
  %v2_1369c = inttoptr i32 %v1_1369c to i8*
  %v3_1369c = load i8, i8* %v2_1369c, align 1
  %v4_1369c = zext i8 %v3_1369c to i32
  store i32 %v4_1369c, i32* %r3.global-to-local, align 4
  %v1_136a0 = add i32 %v0_13698, 70
  %v2_136a0 = inttoptr i32 %v1_136a0 to i8*
  %v3_136a0 = load i8, i8* %v2_136a0, align 1
  %v4_136a0 = zext i8 %v3_136a0 to i32
  %v4_136a4 = mul nuw nsw i32 %v4_13698, 256
  %v5_136a4 = or i32 %v4_1369c, %v4_136a4
  store i32 %v5_136a4, i32* %r3.global-to-local, align 4
  %v1_136a8 = add i32 %v0_13698, 71
  %v2_136a8 = inttoptr i32 %v1_136a8 to i8*
  %v3_136a8 = load i8, i8* %v2_136a8, align 1
  %v4_136a8 = zext i8 %v3_136a8 to i32
  %v4_136ac = mul nuw nsw i32 %v4_136a0, 65536
  %v5_136ac = or i32 %v4_136ac, %v5_136a4
  %v4_136b0 = mul nuw i32 %v4_136a8, 16777216
  %v5_136b0 = or i32 %v5_136ac, %v4_136b0
  store i32 %v5_136b0, i32* %r3.global-to-local, align 4
  %v1_136b4 = load i32, i32* %r7.global-to-local, align 4
  %v2_136b4 = add i32 %v1_136b4, 68
  %v3_136b4 = inttoptr i32 %v2_136b4 to i32*
  store i32 %v5_136b0, i32* %v3_136b4, align 4
  %v0_136b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_136b8 = add i32 %v0_136b8, 77
  %v2_136b8 = inttoptr i32 %v1_136b8 to i8*
  %v3_136b8 = load i8, i8* %v2_136b8, align 1
  %v4_136b8 = zext i8 %v3_136b8 to i32
  %v1_136bc = add i32 %v0_136b8, 76
  %v2_136bc = inttoptr i32 %v1_136bc to i8*
  %v3_136bc = load i8, i8* %v2_136bc, align 1
  %v4_136bc = zext i8 %v3_136bc to i32
  store i32 %v4_136bc, i32* %r3.global-to-local, align 4
  %v1_136c0 = add i32 %v0_136b8, 78
  %v2_136c0 = inttoptr i32 %v1_136c0 to i8*
  %v3_136c0 = load i8, i8* %v2_136c0, align 1
  %v4_136c0 = zext i8 %v3_136c0 to i32
  %v4_136c4 = mul nuw nsw i32 %v4_136b8, 256
  %v5_136c4 = or i32 %v4_136bc, %v4_136c4
  store i32 %v5_136c4, i32* %r3.global-to-local, align 4
  %v1_136c8 = add i32 %v0_136b8, 79
  %v2_136c8 = inttoptr i32 %v1_136c8 to i8*
  %v3_136c8 = load i8, i8* %v2_136c8, align 1
  %v4_136c8 = zext i8 %v3_136c8 to i32
  %v4_136cc = mul nuw nsw i32 %v4_136c0, 65536
  %v5_136cc = or i32 %v4_136cc, %v5_136c4
  %v4_136d0 = mul nuw i32 %v4_136c8, 16777216
  %v5_136d0 = or i32 %v5_136cc, %v4_136d0
  store i32 %v5_136d0, i32* %r3.global-to-local, align 4
  %v1_136d4 = load i32, i32* %r7.global-to-local, align 4
  %v2_136d4 = add i32 %v1_136d4, 76
  %v3_136d4 = inttoptr i32 %v2_136d4 to i32*
  store i32 %v5_136d0, i32* %v3_136d4, align 4
  %v0_136d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_136d8 = add i32 %v0_136d8, 85
  %v2_136d8 = inttoptr i32 %v1_136d8 to i8*
  %v3_136d8 = load i8, i8* %v2_136d8, align 1
  %v4_136d8 = zext i8 %v3_136d8 to i32
  %v1_136dc = add i32 %v0_136d8, 84
  %v2_136dc = inttoptr i32 %v1_136dc to i8*
  %v3_136dc = load i8, i8* %v2_136dc, align 1
  %v4_136dc = zext i8 %v3_136dc to i32
  store i32 %v4_136dc, i32* %r3.global-to-local, align 4
  %v1_136e0 = add i32 %v0_136d8, 86
  %v2_136e0 = inttoptr i32 %v1_136e0 to i8*
  %v3_136e0 = load i8, i8* %v2_136e0, align 1
  %v4_136e0 = zext i8 %v3_136e0 to i32
  %v4_136e4 = mul nuw nsw i32 %v4_136d8, 256
  %v5_136e4 = or i32 %v4_136dc, %v4_136e4
  store i32 %v5_136e4, i32* %r3.global-to-local, align 4
  %v1_136e8 = add i32 %v0_136d8, 87
  %v2_136e8 = inttoptr i32 %v1_136e8 to i8*
  %v3_136e8 = load i8, i8* %v2_136e8, align 1
  %v4_136e8 = zext i8 %v3_136e8 to i32
  %v4_136ec = mul nuw nsw i32 %v4_136e0, 65536
  %v5_136ec = or i32 %v4_136ec, %v5_136e4
  %v4_136f0 = mul nuw i32 %v4_136e8, 16777216
  %v5_136f0 = or i32 %v5_136ec, %v4_136f0
  store i32 %v5_136f0, i32* %r3.global-to-local, align 4
  %v1_136f4 = load i32, i32* %r7.global-to-local, align 4
  %v2_136f4 = add i32 %v1_136f4, 84
  %v3_136f4 = inttoptr i32 %v2_136f4 to i32*
  store i32 %v5_136f0, i32* %v3_136f4, align 4
  ret i32 %v4_135f8

; uselistorder directives
  uselistorder i32 %v4_135f8, { 1, 0 }
  uselistorder i32 %v0_135ec, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_1357c, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_1352c, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_1344c, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 62, { 1, 2, 0 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 0, 2 }
  uselistorder i32 47, { 1, 2, 3, 4, 0 }
  uselistorder i32 50, { 1, 0 }
  uselistorder i32 39, { 1, 2, 0 }
  uselistorder i32 38, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 34, { 2, 0, 1 }
  uselistorder i32 33, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32 30, { 8, 2, 10, 1, 9, 3, 11, 4, 12, 5, 13, 0, 14, 6, 7 }
  uselistorder i32 29, { 8, 1, 0, 3, 11, 2, 9, 10, 4, 12, 5, 13, 6, 14, 15, 7 }
  uselistorder i32 26, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder i32 25, { 10, 21, 22, 9, 11, 2, 12, 3, 13, 4, 14, 15, 16, 0, 17, 5, 18, 1, 19, 6, 7, 20, 8, 23 }
  uselistorder i32 23, { 5, 0, 1, 6, 7, 2, 3, 4 }
  uselistorder i32 22, { 11, 1, 14, 2, 3, 4, 5, 0, 12, 6, 7, 8, 9, 13, 10 }
  uselistorder i32 21, { 9, 3, 2, 10, 11, 12, 8, 4, 5, 6, 7, 0, 1 }
  uselistorder i32 19, { 10, 12, 13, 14, 5, 1, 6, 2, 0, 11, 7, 8, 9, 15, 3, 16, 4, 17 }
  uselistorder i32 18, { 5, 6, 7, 8, 4, 9, 0, 10, 1, 11, 2, 12, 3, 13 }
  uselistorder i32 17, { 18, 21, 0, 4, 22, 23, 5, 24, 25, 6, 1, 19, 7, 20, 8, 9, 10, 11, 12, 13, 26, 14, 27, 15, 28, 16, 29, 17, 30, 31, 2, 32, 33, 34, 3, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 6, { 28, 35, 15, 16, 80, 2, 33, 3, 18, 29, 19, 30, 20, 31, 17, 32, 0, 21, 34, 4, 5, 39, 40, 41, 6, 42, 43, 44, 45, 7, 46, 47, 48, 49, 8, 50, 9, 51, 52, 53, 22, 54, 10, 55, 56, 57, 23, 58, 11, 59, 60, 61, 24, 62, 63, 64, 25, 65, 12, 66, 67, 68, 69, 26, 70, 13, 71, 73, 74, 75, 76, 77, 27, 78, 14, 79, 1, 72, 36, 37, 38 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_13700(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13700:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13700 = load i32, i32* @r4, align 4
  store i32 %v3_13700, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_13718 = inttoptr i32 %arg2 to i8*
  %v3_13718 = call i32 @function_11bb0(i8* %v2_13718, i32 0)
  store i32 %v3_13718, i32* %r0.global-to-local, align 4
  %v0_1371c = load i32, i32* %r5.global-to-local, align 4
  %v1_1371c = inttoptr i32 %v0_1371c to i32*
  %v2_1371c = load i32, i32* %v1_1371c, align 4
  store i32 %v2_1371c, i32* %r3.global-to-local, align 4
  %v1_13720 = add i32 %v0_1371c, 4
  %v2_13720 = inttoptr i32 %v1_13720 to i32*
  %v3_13720 = load i32, i32* %v2_13720, align 4
  store i32 %v3_13720, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_13728 = load i32, i32* %r6.global-to-local, align 4
  %v1_13728 = inttoptr i32 %v0_13728 to i32*
  store i32 %v2_1371c, i32* %v1_13728, align 4
  %v3_13728 = add i32 %v0_13728, 4
  %v4_13728 = inttoptr i32 %v3_13728 to i32*
  %v5_13728 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13728, i32* %v4_13728, align 4
  %v0_1372c = load i32, i32* %r2.global-to-local, align 4
  %v1_1372c = load i32, i32* %r6.global-to-local, align 4
  %v2_1372c = add i32 %v1_1372c, 12
  %v3_1372c = inttoptr i32 %v2_1372c to i32*
  store i32 %v0_1372c, i32* %v3_1372c, align 4
  %v0_13730 = load i32, i32* %r5.global-to-local, align 4
  %v1_13730 = add i32 %v0_13730, 9
  %v2_13730 = inttoptr i32 %v1_13730 to i8*
  %v3_13730 = load i8, i8* %v2_13730, align 1
  %v4_13730 = zext i8 %v3_13730 to i32
  store i32 %v4_13730, i32* %r2.global-to-local, align 4
  %v1_13734 = add i32 %v0_13730, 8
  %v2_13734 = inttoptr i32 %v1_13734 to i8*
  %v3_13734 = load i8, i8* %v2_13734, align 1
  %v4_13734 = zext i8 %v3_13734 to i32
  %v4_13738 = mul nuw nsw i32 %v4_13730, 256
  %v5_13738 = or i32 %v4_13734, %v4_13738
  store i32 %v5_13738, i32* %r3.global-to-local, align 4
  %v1_1373c = load i32, i32* %r6.global-to-local, align 4
  %v2_1373c = add i32 %v1_1373c, 16
  %v3_1373c = inttoptr i32 %v2_1373c to i32*
  store i32 %v5_13738, i32* %v3_1373c, align 4
  %v0_13740 = load i32, i32* %r5.global-to-local, align 4
  %v1_13740 = add i32 %v0_13740, 11
  %v2_13740 = inttoptr i32 %v1_13740 to i8*
  %v3_13740 = load i8, i8* %v2_13740, align 1
  %v4_13740 = zext i8 %v3_13740 to i32
  store i32 %v4_13740, i32* %r2.global-to-local, align 4
  %v1_13744 = add i32 %v0_13740, 10
  %v2_13744 = inttoptr i32 %v1_13744 to i8*
  %v3_13744 = load i8, i8* %v2_13744, align 1
  %v4_13744 = zext i8 %v3_13744 to i32
  %v4_13748 = mul nuw nsw i32 %v4_13740, 256
  %v5_13748 = or i32 %v4_13744, %v4_13748
  store i32 %v5_13748, i32* %r3.global-to-local, align 4
  %v1_1374c = load i32, i32* %r6.global-to-local, align 4
  %v2_1374c = add i32 %v1_1374c, 20
  %v3_1374c = inttoptr i32 %v2_1374c to i32*
  store i32 %v5_13748, i32* %v3_1374c, align 4
  %v0_13750 = load i32, i32* %r5.global-to-local, align 4
  %v1_13750 = add i32 %v0_13750, 13
  %v2_13750 = inttoptr i32 %v1_13750 to i8*
  %v3_13750 = load i8, i8* %v2_13750, align 1
  %v4_13750 = zext i8 %v3_13750 to i32
  store i32 %v4_13750, i32* %r2.global-to-local, align 4
  %v1_13754 = add i32 %v0_13750, 12
  %v2_13754 = inttoptr i32 %v1_13754 to i8*
  %v3_13754 = load i8, i8* %v2_13754, align 1
  %v4_13754 = zext i8 %v3_13754 to i32
  %v4_13758 = mul nuw nsw i32 %v4_13750, 256
  %v5_13758 = or i32 %v4_13754, %v4_13758
  store i32 %v5_13758, i32* %r3.global-to-local, align 4
  %v1_1375c = load i32, i32* %r6.global-to-local, align 4
  %v2_1375c = add i32 %v1_1375c, 24
  %v3_1375c = inttoptr i32 %v2_1375c to i32*
  store i32 %v5_13758, i32* %v3_1375c, align 4
  %v0_13760 = load i32, i32* %r5.global-to-local, align 4
  %v1_13760 = add i32 %v0_13760, 20
  %v2_13760 = inttoptr i32 %v1_13760 to i32*
  %v3_13760 = load i32, i32* %v2_13760, align 4
  store i32 %v3_13760, i32* %r3.global-to-local, align 4
  %v1_13764 = add i32 %v0_13760, 14
  %v2_13764 = inttoptr i32 %v1_13764 to i8*
  %v3_13764 = load i8, i8* %v2_13764, align 1
  %v4_13764 = zext i8 %v3_13764 to i32
  store i32 %v4_13764, i32* %r0.global-to-local, align 4
  %v1_13768 = add i32 %v0_13760, 15
  %v2_13768 = inttoptr i32 %v1_13768 to i8*
  %v3_13768 = load i8, i8* %v2_13768, align 1
  %v4_13768 = zext i8 %v3_13768 to i32
  store i32 %v4_13768, i32* %ip.global-to-local, align 4
  %v1_1376c = add i32 %v0_13760, 16
  %v2_1376c = inttoptr i32 %v1_1376c to i32*
  %v3_1376c = load i32, i32* %v2_1376c, align 4
  store i32 %v3_1376c, i32* %r1.global-to-local, align 4
  %v1_13770 = load i32, i32* %r6.global-to-local, align 4
  %v2_13770 = add i32 %v1_13770, 44
  %v3_13770 = inttoptr i32 %v2_13770 to i32*
  store i32 %v3_13760, i32* %v3_13770, align 4
  %v0_13774 = load i32, i32* %r5.global-to-local, align 4
  %v1_13774 = add i32 %v0_13774, 24
  %v2_13774 = inttoptr i32 %v1_13774 to i32*
  %v3_13774 = load i32, i32* %v2_13774, align 4
  store i32 %v3_13774, i32* %r3.global-to-local, align 4
  %v1_13778 = load i32, i32* %r6.global-to-local, align 4
  %v2_13778 = add i32 %v1_13778, 48
  %v3_13778 = inttoptr i32 %v2_13778 to i32*
  store i32 %v3_13774, i32* %v3_13778, align 4
  %v0_1377c = load i32, i32* %r5.global-to-local, align 4
  %v1_1377c = add i32 %v0_1377c, 28
  %v2_1377c = inttoptr i32 %v1_1377c to i32*
  %v3_1377c = load i32, i32* %v2_1377c, align 4
  store i32 %v3_1377c, i32* %r3.global-to-local, align 4
  %v1_13780 = load i32, i32* %r6.global-to-local, align 4
  %v2_13780 = add i32 %v1_13780, 52
  %v3_13780 = inttoptr i32 %v2_13780 to i32*
  store i32 %v3_1377c, i32* %v3_13780, align 4
  %v0_13784 = load i32, i32* %r5.global-to-local, align 4
  %v1_13784 = add i32 %v0_13784, 32
  %v2_13784 = inttoptr i32 %v1_13784 to i32*
  %v3_13784 = load i32, i32* %v2_13784, align 4
  store i32 %v3_13784, i32* %r3.global-to-local, align 4
  %v1_13788 = load i32, i32* %r6.global-to-local, align 4
  %v2_13788 = add i32 %v1_13788, 56
  %v3_13788 = inttoptr i32 %v2_13788 to i32*
  store i32 %v3_13784, i32* %v3_13788, align 4
  %v0_1378c = load i32, i32* %r5.global-to-local, align 4
  %v1_1378c = add i32 %v0_1378c, 40
  %v2_1378c = inttoptr i32 %v1_1378c to i32*
  %v3_1378c = load i32, i32* %v2_1378c, align 4
  store i32 %v3_1378c, i32* %r3.global-to-local, align 4
  %v1_13790 = load i32, i32* %r6.global-to-local, align 4
  %v2_13790 = add i32 %v1_13790, 64
  %v3_13790 = inttoptr i32 %v2_13790 to i32*
  store i32 %v3_1378c, i32* %v3_13790, align 4
  %v0_13794 = load i32, i32* %r5.global-to-local, align 4
  %v1_13794 = add i32 %v0_13794, 48
  %v2_13794 = inttoptr i32 %v1_13794 to i32*
  %v3_13794 = load i32, i32* %v2_13794, align 4
  store i32 %v3_13794, i32* %r3.global-to-local, align 4
  %v1_13798 = load i32, i32* %r6.global-to-local, align 4
  %v2_13798 = add i32 %v1_13798, 72
  %v3_13798 = inttoptr i32 %v2_13798 to i32*
  store i32 %v3_13794, i32* %v3_13798, align 4
  %v0_1379c = load i32, i32* %r5.global-to-local, align 4
  %v1_1379c = add i32 %v0_1379c, 36
  %v2_1379c = inttoptr i32 %v1_1379c to i32*
  %v3_1379c = load i32, i32* %v2_1379c, align 4
  store i32 %v3_1379c, i32* %r3.global-to-local, align 4
  %v1_137a0 = load i32, i32* %r6.global-to-local, align 4
  %v2_137a0 = add i32 %v1_137a0, 60
  %v3_137a0 = inttoptr i32 %v2_137a0 to i32*
  store i32 %v3_1379c, i32* %v3_137a0, align 4
  %v0_137a4 = load i32, i32* %r5.global-to-local, align 4
  %v1_137a4 = add i32 %v0_137a4, 44
  %v2_137a4 = inttoptr i32 %v1_137a4 to i32*
  %v3_137a4 = load i32, i32* %v2_137a4, align 4
  store i32 %v3_137a4, i32* %r3.global-to-local, align 4
  %v0_137a8 = load i32, i32* %r0.global-to-local, align 4
  %v1_137a8 = load i32, i32* %ip.global-to-local, align 4
  %v4_137a8 = mul i32 %v1_137a8, 256
  %v5_137a8 = or i32 %v4_137a8, %v0_137a8
  store i32 %v5_137a8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_137b0 = load i32, i32* %r6.global-to-local, align 4
  %v2_137b0 = add i32 %v1_137b0, 28
  %v3_137b0 = inttoptr i32 %v2_137b0 to i32*
  store i32 %v5_137a8, i32* %v3_137b0, align 4
  %v0_137b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_137b4 = load i32, i32* %r6.global-to-local, align 4
  %v2_137b4 = add i32 %v1_137b4, 32
  %v3_137b4 = inttoptr i32 %v2_137b4 to i32*
  store i32 %v0_137b4, i32* %v3_137b4, align 4
  %v0_137b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_137b8 = load i32, i32* %r6.global-to-local, align 4
  %v2_137b8 = add i32 %v1_137b8, 36
  %v3_137b8 = inttoptr i32 %v2_137b8 to i32*
  store i32 %v0_137b8, i32* %v3_137b8, align 4
  %v0_137bc = load i32, i32* %r3.global-to-local, align 4
  %v1_137bc = load i32, i32* %r6.global-to-local, align 4
  %v2_137bc = add i32 %v1_137bc, 68
  %v3_137bc = inttoptr i32 %v2_137bc to i32*
  store i32 %v0_137bc, i32* %v3_137bc, align 4
  %v0_137c0 = load i32, i32* %r5.global-to-local, align 4
  %v1_137c0 = add i32 %v0_137c0, 52
  %v2_137c0 = inttoptr i32 %v1_137c0 to i32*
  %v3_137c0 = load i32, i32* %v2_137c0, align 4
  store i32 %v3_137c0, i32* %r3.global-to-local, align 4
  %v1_137c4 = load i32, i32* %r6.global-to-local, align 4
  %v2_137c4 = add i32 %v1_137c4, 76
  %v3_137c4 = inttoptr i32 %v2_137c4 to i32*
  store i32 %v3_137c0, i32* %v3_137c4, align 4
  %v2_137c8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_137c8, i32* %r4.global-to-local, align 4
  ret i32 %v5_137a8

; uselistorder directives
  uselistorder i32 %v0_13760, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 15, 11, 12, 0, 8, 47, 13, 14, 16, 17, 9, 18, 19, 20, 1, 21, 22, 23, 2, 24, 25, 26, 10, 27, 28, 29, 3, 30, 31, 32, 4, 33, 34, 35, 5, 36, 37, 38, 39, 40, 6, 41, 42, 43, 44, 45, 7, 46 }
  uselistorder i32 56, { 3, 0, 1, 2, 4 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32 15, { 30, 26, 25, 27, 3, 28, 4, 29, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 32, 24, 33, 34, 35, 36, 1, 37, 38, 39, 40, 2, 41 }
  uselistorder i32 14, { 11, 8, 23, 0, 9, 1, 7, 4, 10, 5, 12, 13, 6, 14, 15, 16, 17, 2, 18, 19, 20, 21, 3, 22 }
  uselistorder i32 13, { 15, 8, 7, 4, 12, 1, 9, 10, 11, 13, 14, 0, 16, 17, 18, 19, 20, 5, 21, 22, 23, 24, 25, 26, 27, 28, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 3, 57, 58 }
  uselistorder i32 9, { 42, 43, 44, 8, 5, 45, 9, 6, 35, 11, 34, 12, 30, 13, 31, 14, 32, 15, 33, 27, 10, 3, 36, 28, 37, 2, 29, 16, 38, 17, 39, 18, 40, 41, 19, 20, 21, 22, 23, 0, 24, 1, 25, 59, 46, 47, 7, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 4, 58, 26 }
  uselistorder i32 (i8*, i32)* @function_11bb0, { 2, 0, 7, 6, 1, 3, 4, 5 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_137d0() local_unnamed_addr {
dec_label_pc_137d0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_137d0 = load i32, i32* @r1, align 4
  %v1_137d0 = load i32, i32* @r0, align 4
  %v2_137d0 = sub i32 %v0_137d0, %v1_137d0
  %v3_137d0 = icmp ult i32 %v0_137d0, %v1_137d0
  %v4_137d0 = xor i32 %v1_137d0, %v0_137d0
  %v5_137d0 = xor i32 %v2_137d0, %v0_137d0
  %v6_137d0 = and i32 %v5_137d0, %v4_137d0
  %v7_137d0 = icmp slt i32 %v6_137d0, 0
  store i1 %v7_137d0, i1* %cpsr_v.global-to-local, align 1
  %v8_137d0 = icmp slt i32 %v2_137d0, 0
  store i1 %v8_137d0, i1* %cpsr_n.global-to-local, align 1
  %v9_137d0 = icmp eq i32 %v0_137d0, %v1_137d0
  store i1 %v9_137d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_137d0, label %dec_label_pc_13a1c, label %dec_label_pc_137d8

dec_label_pc_137d8:                               ; preds = %dec_label_pc_137d0
  br i1 %v9_137d0, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_137d8
  %merge = phi i32 [ %v0_137d0, %dec_label_pc_137d8 ], [ %v2_13ab0, %bb141 ], [ %v11_13acc, %bb144 ], [ %v7_13acc, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_137d8
  store i32 %v1_137d0, i32* %stack_var_-8, align 4
  %v0_137e0 = load i32, i32* @r2, align 4
  %v2_137e0 = add i32 %v0_137e0, -4
  store i32 %v2_137e0, i32* %r2.global-to-local, align 4
  %v4_137e0 = sub i32 3, %v0_137e0
  %v5_137e0 = and i32 %v4_137e0, %v0_137e0
  %v6_137e0 = icmp slt i32 %v5_137e0, 0
  store i1 %v6_137e0, i1* %cpsr_v.global-to-local, align 1
  %v7_137e0 = icmp slt i32 %v2_137e0, 0
  store i1 %v7_137e0, i1* %cpsr_n.global-to-local, align 1
  %v8_137e0 = icmp eq i32 %v0_137e0, 4
  store i1 %v8_137e0, i1* %cpsr_z.global-to-local, align 1
  %v5_137e4 = icmp slt i32 %v0_137e0, 4
  br i1 %v5_137e4, label %bb131, label %dec_label_pc_137e8

dec_label_pc_137e8:                               ; preds = %bb
  %v1_137e8 = urem i32 %v1_137d0, 4
  store i32 %v1_137e8, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_137e8 = icmp eq i32 %v1_137e8, 0
  store i1 %v2_137e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_137e8, label %dec_label_pc_137f0, label %dec_label_pc_13894

dec_label_pc_137f0:                               ; preds = %dec_label_pc_137e8
  %v1_137f0 = urem i32 %v0_137d0, 4
  store i32 %v1_137f0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_137f0 = icmp eq i32 %v1_137f0, 0
  store i1 %v2_137f0, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_137d0 to i2
  br i1 %v2_137f0, label %dec_label_pc_137f8, label %dec_label_pc_138c4

dec_label_pc_137f8:                               ; preds = %dec_label_pc_137f0, %dec_label_pc_138bc
  %v0_1381092 = phi i32 [ %v1_137d0, %dec_label_pc_137f0 ], [ %v0_1390c75, %dec_label_pc_138bc ]
  %v0_1380c91 = phi i32 [ %v0_137d0, %dec_label_pc_137f0 ], [ %v0_138bc, %dec_label_pc_138bc ]
  %v0_137f8 = phi i32 [ %v2_137e0, %dec_label_pc_137f0 ], [ %v2_138b4, %dec_label_pc_138bc ]
  %v2_137f8 = add i32 %v0_137f8, -8
  store i32 %v2_137f8, i32* %r2.global-to-local, align 4
  %v4_137f8 = sub i32 7, %v0_137f8
  %v5_137f8 = and i32 %v4_137f8, %v0_137f8
  %v6_137f8 = icmp slt i32 %v5_137f8, 0
  store i1 %v6_137f8, i1* %cpsr_v.global-to-local, align 1
  %v7_137f8 = icmp slt i32 %v2_137f8, 0
  store i1 %v7_137f8, i1* %cpsr_n.global-to-local, align 1
  %v8_137f8 = icmp eq i32 %v0_137f8, 8
  store i1 %v8_137f8, i1* %cpsr_z.global-to-local, align 1
  %v5_137fc = icmp slt i32 %v0_137f8, 8
  br i1 %v5_137fc, label %dec_label_pc_1384c, label %dec_label_pc_13800

dec_label_pc_13800:                               ; preds = %dec_label_pc_137f8
  %v2_13800 = add i32 %v0_137f8, -28
  store i32 %v2_13800, i32* %r2.global-to-local, align 4
  %v4_13800 = sub i32 27, %v0_137f8
  %v5_13800 = and i32 %v4_13800, %v2_137f8
  %v6_13800 = icmp slt i32 %v5_13800, 0
  store i1 %v6_13800, i1* %cpsr_v.global-to-local, align 1
  %v7_13800 = icmp slt i32 %v2_13800, 0
  store i1 %v7_13800, i1* %cpsr_n.global-to-local, align 1
  %v8_13800 = icmp eq i32 %v2_137f8, 20
  store i1 %v8_13800, i1* %cpsr_z.global-to-local, align 1
  %v5_13804 = icmp slt i32 %v2_137f8, 20
  br i1 %v5_13804, label %dec_label_pc_13838, label %dec_label_pc_13808

dec_label_pc_13808:                               ; preds = %dec_label_pc_13800
  %v0_13808 = load i32, i32* @r4, align 4
  store i32 %v0_13808, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1380c

dec_label_pc_1380c:                               ; preds = %dec_label_pc_1380c.dec_label_pc_1380c_crit_edge, %dec_label_pc_13808
  %v0_13810 = phi i32 [ %v12_13818, %dec_label_pc_1380c.dec_label_pc_1380c_crit_edge ], [ %v0_1381092, %dec_label_pc_13808 ]
  %v0_1380c = phi i32 [ %v0_1380c.pre, %dec_label_pc_1380c.dec_label_pc_1380c_crit_edge ], [ %v0_1380c91, %dec_label_pc_13808 ]
  %v1_1380c = inttoptr i32 %v0_1380c to i32*
  %v2_1380c = load i32, i32* %v1_1380c, align 4
  store i32 %v2_1380c, i32* %r3.global-to-local, align 4
  %v3_1380c = add i32 %v0_1380c, 4
  %v4_1380c = inttoptr i32 %v3_1380c to i32*
  %v5_1380c = load i32, i32* %v4_1380c, align 4
  store i32 %v5_1380c, i32* %r4.global-to-local, align 4
  %v6_1380c = add i32 %v0_1380c, 8
  %v7_1380c = inttoptr i32 %v6_1380c to i32*
  %v8_1380c = load i32, i32* %v7_1380c, align 4
  store i32 %v8_1380c, i32* %ip.global-to-local, align 4
  %v9_1380c = add i32 %v0_1380c, 12
  %v10_1380c = inttoptr i32 %v9_1380c to i32*
  %v11_1380c = load i32, i32* %v10_1380c, align 4
  store i32 %v11_1380c, i32* %lr.global-to-local, align 4
  %v12_1380c = add i32 %v0_1380c, 16
  store i32 %v12_1380c, i32* %r1.global-to-local, align 4
  %v1_13810 = inttoptr i32 %v0_13810 to i32*
  store i32 %v2_1380c, i32* %v1_13810, align 4
  %v3_13810 = add i32 %v0_13810, 4
  %v4_13810 = inttoptr i32 %v3_13810 to i32*
  %v5_13810 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13810, i32* %v4_13810, align 4
  %v6_13810 = add i32 %v0_13810, 8
  %v7_13810 = inttoptr i32 %v6_13810 to i32*
  %v8_13810 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_13810, i32* %v7_13810, align 4
  %v9_13810 = add i32 %v0_13810, 12
  %v10_13810 = inttoptr i32 %v9_13810 to i32*
  %v11_13810 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_13810, i32* %v10_13810, align 4
  %v12_13810 = add i32 %v0_13810, 16
  store i32 %v12_13810, i32* %r0.global-to-local, align 4
  %v0_13814 = load i32, i32* %r1.global-to-local, align 4
  %v1_13814 = inttoptr i32 %v0_13814 to i32*
  %v2_13814 = load i32, i32* %v1_13814, align 4
  store i32 %v2_13814, i32* %r3.global-to-local, align 4
  %v3_13814 = add i32 %v0_13814, 4
  %v4_13814 = inttoptr i32 %v3_13814 to i32*
  %v5_13814 = load i32, i32* %v4_13814, align 4
  store i32 %v5_13814, i32* %r4.global-to-local, align 4
  %v6_13814 = add i32 %v0_13814, 8
  %v7_13814 = inttoptr i32 %v6_13814 to i32*
  %v8_13814 = load i32, i32* %v7_13814, align 4
  store i32 %v8_13814, i32* @ip, align 4
  %v9_13814 = add i32 %v0_13814, 12
  %v10_13814 = inttoptr i32 %v9_13814 to i32*
  %v11_13814 = load i32, i32* %v10_13814, align 4
  store i32 %v11_13814, i32* @lr, align 4
  %v12_13814 = add i32 %v0_13814, 16
  store i32 %v12_13814, i32* @r1, align 4
  %v1_13818 = inttoptr i32 %v12_13810 to i32*
  store i32 %v2_13814, i32* %v1_13818, align 4
  %v3_13818 = add i32 %v0_13810, 20
  %v4_13818 = inttoptr i32 %v3_13818 to i32*
  %v5_13818 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13818, i32* %v4_13818, align 4
  %v6_13818 = add i32 %v0_13810, 24
  %v7_13818 = inttoptr i32 %v6_13818 to i32*
  %v8_13818 = load i32, i32* @ip, align 4
  store i32 %v8_13818, i32* %v7_13818, align 4
  %v9_13818 = add i32 %v0_13810, 28
  %v10_13818 = inttoptr i32 %v9_13818 to i32*
  %v11_13818 = load i32, i32* @lr, align 4
  store i32 %v11_13818, i32* %v10_13818, align 4
  %v12_13818 = add i32 %v0_13810, 32
  store i32 %v12_13818, i32* @r0, align 4
  %v0_1381c = load i32, i32* %r2.global-to-local, align 4
  %v2_1381c = add i32 %v0_1381c, -32
  store i32 %v2_1381c, i32* %r2.global-to-local, align 4
  %v6_13820 = icmp slt i32 %v0_1381c, 32
  br i1 %v6_13820, label %dec_label_pc_13824, label %dec_label_pc_1380c.dec_label_pc_1380c_crit_edge

dec_label_pc_1380c.dec_label_pc_1380c_crit_edge:  ; preds = %dec_label_pc_1380c
  %v0_1380c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1380c

dec_label_pc_13824:                               ; preds = %dec_label_pc_1380c
  %v4_13824 = add i32 %v0_1381c, -16
  %v6_13824 = add i32 %v0_1381c, 2147483616
  %v7_13824 = and i32 %v4_13824, %v6_13824
  %v8_13824 = icmp slt i32 %v7_13824, 0
  store i1 %v8_13824, i1* %cpsr_v.global-to-local, align 1
  %v9_13824 = icmp slt i32 %v4_13824, 0
  store i1 %v9_13824, i1* %cpsr_n.global-to-local, align 1
  %v10_13824 = icmp eq i32 %v4_13824, 0
  store i1 %v10_13824, i1* %cpsr_z.global-to-local, align 1
  %v5_13828 = icmp slt i32 %v2_1381c, -16
  br i1 %v5_13828, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_13824
  %v6_13828 = load i32, i32* @r1, align 4
  %v7_13828 = inttoptr i32 %v6_13828 to i32*
  %v8_13828 = load i32, i32* %v7_13828, align 4
  store i32 %v8_13828, i32* %r3.global-to-local, align 4
  %v9_13828 = add i32 %v6_13828, 4
  %v10_13828 = inttoptr i32 %v9_13828 to i32*
  %v11_13828 = load i32, i32* %v10_13828, align 4
  store i32 %v11_13828, i32* %r4.global-to-local, align 4
  %v12_13828 = add i32 %v6_13828, 8
  %v13_13828 = inttoptr i32 %v12_13828 to i32*
  %v14_13828 = load i32, i32* %v13_13828, align 4
  store i32 %v14_13828, i32* @ip, align 4
  %v15_13828 = add i32 %v6_13828, 12
  %v16_13828 = inttoptr i32 %v15_13828 to i32*
  %v17_13828 = load i32, i32* %v16_13828, align 4
  store i32 %v17_13828, i32* @lr, align 4
  %v18_13828 = add i32 %v6_13828, 16
  store i32 %v18_13828, i32* @r1, align 4
  %v7_1382c = inttoptr i32 %v12_13818 to i32*
  store i32 %v8_13828, i32* %v7_1382c, align 4
  %v9_1382c = add i32 %v0_13810, 36
  %v10_1382c = inttoptr i32 %v9_1382c to i32*
  %v11_1382c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_1382c, i32* %v10_1382c, align 4
  %v12_1382c = add i32 %v0_13810, 40
  %v13_1382c = inttoptr i32 %v12_1382c to i32*
  %v14_1382c = load i32, i32* @ip, align 4
  store i32 %v14_1382c, i32* %v13_1382c, align 4
  %v15_1382c = add i32 %v0_13810, 44
  %v16_1382c = inttoptr i32 %v15_1382c to i32*
  %v17_1382c = load i32, i32* @lr, align 4
  store i32 %v17_1382c, i32* %v16_1382c, align 4
  %v18_1382c = add i32 %v0_13810, 48
  store i32 %v18_1382c, i32* @r0, align 4
  %v6_13830 = load i32, i32* %r2.global-to-local, align 4
  %v7_13830 = add i32 %v6_13830, -16
  store i32 %v7_13830, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13824, %bb128
  %v3_13840101 = phi i32 [ %v12_13818, %dec_label_pc_13824 ], [ %v18_1382c, %bb128 ]
  %v0_1383895 = phi i32 [ %v2_1381c, %dec_label_pc_13824 ], [ %v7_13830, %bb128 ]
  %v2_13834 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13834, i32* @r4, align 4
  br label %dec_label_pc_13838

dec_label_pc_13838:                               ; preds = %dec_label_pc_13800, %.thread1
  %v3_13840100 = phi i32 [ %v0_1381092, %dec_label_pc_13800 ], [ %v3_13840101, %.thread1 ]
  %v0_13838 = phi i32 [ %v2_13800, %dec_label_pc_13800 ], [ %v0_1383895, %.thread1 ]
  %v1_13838 = add i32 %v0_13838, 20
  store i32 %v1_13838, i32* %r2.global-to-local, align 4
  %v3_13838 = sub i32 0, %v0_13838
  %v4_13838 = and i32 %v1_13838, %v3_13838
  %v5_13838 = icmp slt i32 %v4_13838, 0
  store i1 %v5_13838, i1* %cpsr_v.global-to-local, align 1
  %v6_13838 = icmp slt i32 %v1_13838, 0
  store i1 %v6_13838, i1* %cpsr_n.global-to-local, align 1
  %v7_13838 = icmp eq i32 %v1_13838, 0
  store i1 %v7_13838, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1383c

dec_label_pc_1383c:                               ; preds = %.thread117, %dec_label_pc_13838
  %v0_1384c.pre147 = phi i32 [ %v0_1384c.pre, %.thread117 ], [ %v1_13838, %dec_label_pc_13838 ]
  %v3_13840 = phi i32 [ %v3_1384098118, %.thread117 ], [ %v3_13840100, %dec_label_pc_13838 ]
  %v1_13844 = phi i1 [ %v1_13848, %.thread117 ], [ %v5_13838, %dec_label_pc_13838 ]
  %v0_13844 = phi i1 [ %v0_13848, %.thread117 ], [ %v6_13838, %dec_label_pc_13838 ]
  %v2_1383c = xor i1 %v1_13844, %v0_13844
  br i1 %v2_1383c, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_1383c
  %v3_1383c = load i32, i32* @r1, align 4
  %v4_1383c = inttoptr i32 %v3_1383c to i32*
  %v5_1383c = load i32, i32* %v4_1383c, align 4
  store i32 %v5_1383c, i32* %r3.global-to-local, align 4
  %v6_1383c = add i32 %v3_1383c, 4
  %v7_1383c = inttoptr i32 %v6_1383c to i32*
  %v8_1383c = load i32, i32* %v7_1383c, align 4
  store i32 %v8_1383c, i32* @ip, align 4
  %v9_1383c = add i32 %v3_1383c, 8
  %v10_1383c = inttoptr i32 %v9_1383c to i32*
  %v11_1383c = load i32, i32* %v10_1383c, align 4
  store i32 %v11_1383c, i32* @lr, align 4
  %v12_1383c = add i32 %v3_1383c, 12
  store i32 %v12_1383c, i32* @r1, align 4
  %v4_13840 = inttoptr i32 %v3_13840 to i32*
  store i32 %v5_1383c, i32* %v4_13840, align 4
  %v6_13840 = add i32 %v3_13840, 4
  %v7_13840 = inttoptr i32 %v6_13840 to i32*
  %v8_13840 = load i32, i32* @ip, align 4
  store i32 %v8_13840, i32* %v7_13840, align 4
  %v9_13840 = add i32 %v3_13840, 8
  %v10_13840 = inttoptr i32 %v9_13840 to i32*
  %v11_13840 = load i32, i32* @lr, align 4
  store i32 %v11_13840, i32* %v10_13840, align 4
  %v12_13840 = add i32 %v3_13840, 12
  store i32 %v12_13840, i32* @r0, align 4
  %v3_13844 = load i32, i32* %r2.global-to-local, align 4
  %v4_13844 = add i32 %v3_13844, -12
  store i32 %v4_13844, i32* %r2.global-to-local, align 4
  %v6_13844 = sub i32 11, %v3_13844
  %v7_13844 = and i32 %v6_13844, %v3_13844
  %v8_13844 = icmp slt i32 %v7_13844, 0
  store i1 %v8_13844, i1* %cpsr_v.global-to-local, align 1
  %v9_13844 = icmp slt i32 %v4_13844, 0
  store i1 %v9_13844, i1* %cpsr_n.global-to-local, align 1
  %v10_13844 = icmp eq i32 %v3_13844, 12
  store i1 %v10_13844, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_1383c, %bb129
  %v0_1384c.pre = phi i32 [ %v4_13844, %bb129 ], [ %v0_1384c.pre147, %dec_label_pc_1383c ]
  %v3_1384098118 = phi i32 [ %v12_13840, %bb129 ], [ %v3_13840, %dec_label_pc_1383c ]
  %v1_13848 = phi i1 [ %v8_13844, %bb129 ], [ %v1_13844, %dec_label_pc_1383c ]
  %v0_13848 = phi i1 [ %v9_13844, %bb129 ], [ %v0_13844, %dec_label_pc_1383c ]
  %v2_13848 = xor i1 %v1_13848, %v0_13848
  br i1 %v2_13848, label %dec_label_pc_1384c, label %dec_label_pc_1383c

dec_label_pc_1384c:                               ; preds = %.thread117, %dec_label_pc_137f8
  %v7_1385c = phi i32 [ %v0_1381092, %dec_label_pc_137f8 ], [ %v3_1384098118, %.thread117 ]
  %v0_1384c = phi i32 [ %v2_137f8, %dec_label_pc_137f8 ], [ %v0_1384c.pre, %.thread117 ]
  %v2_1384c = add i32 %v0_1384c, 8
  store i32 %v2_1384c, i32* %r2.global-to-local, align 4
  %v4_1384c = sub i32 0, %v0_1384c
  %v5_1384c = and i32 %v2_1384c, %v4_1384c
  %v6_1384c = icmp slt i32 %v5_1384c, 0
  store i1 %v6_1384c, i1* %cpsr_v.global-to-local, align 1
  %v7_1384c = icmp slt i32 %v2_1384c, 0
  store i1 %v7_1384c, i1* %cpsr_n.global-to-local, align 1
  %v8_1384c = icmp eq i32 %v2_1384c, 0
  store i1 %v8_1384c, i1* %cpsr_z.global-to-local, align 1
  %v5_13850 = icmp slt i32 %v0_1384c, -8
  br i1 %v5_13850, label %bb131, label %dec_label_pc_13854

dec_label_pc_13854:                               ; preds = %dec_label_pc_1384c
  %v6_13854 = add i32 %v0_1384c, 4
  store i32 %v6_13854, i32* %r2.global-to-local, align 4
  %v8_13854 = sub i32 -5, %v0_1384c
  %v9_13854 = and i32 %v8_13854, %v2_1384c
  %v10_13854 = icmp slt i32 %v9_13854, 0
  store i1 %v10_13854, i1* %cpsr_v.global-to-local, align 1
  %v11_13854 = icmp slt i32 %v6_13854, 0
  store i1 %v11_13854, i1* %cpsr_n.global-to-local, align 1
  %v12_13854 = icmp eq i32 %v2_1384c, 4
  store i1 %v12_13854, i1* %cpsr_z.global-to-local, align 1
  %v5_13858 = icmp slt i32 %v2_1384c, 4
  %v6_13858 = load i32, i32* @r1, align 4
  %v7_13858 = inttoptr i32 %v6_13858 to i32*
  %v8_13858 = load i32, i32* %v7_13858, align 4
  store i32 %v8_13858, i32* %r3.global-to-local, align 4
  %v10_13858 = add i32 %v6_13858, 4
  br i1 %v5_13858, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_13854
  store i32 %v10_13858, i32* @r1, align 4
  %v8_1385c = inttoptr i32 %v7_1385c to i32*
  store i32 %v8_13858, i32* %v8_1385c, align 4
  %v9_1385c = load i32, i32* @r0, align 4
  %v10_1385c = add i32 %v9_1385c, 4
  store i32 %v10_1385c, i32* @r0, align 4
  %v0_1386c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_13854
  %v10_13860 = inttoptr i32 %v10_13858 to i32*
  %v11_13860 = load i32, i32* %v10_13860, align 4
  store i32 %v11_13860, i32* @ip, align 4
  %v12_13860 = add i32 %v6_13858, 8
  store i32 %v12_13860, i32* @r1, align 4
  %v7_13864 = inttoptr i32 %v7_1385c to i32*
  store i32 %v8_13858, i32* %v7_13864, align 4
  %v9_13864 = add i32 %v7_1385c, 4
  %v10_13864 = inttoptr i32 %v9_13864 to i32*
  %v11_13864 = load i32, i32* @ip, align 4
  store i32 %v11_13864, i32* %v10_13864, align 4
  %v12_13864 = add i32 %v7_1385c, 8
  store i32 %v12_13864, i32* @r0, align 4
  %v6_13868 = load i32, i32* %r2.global-to-local, align 4
  %v7_13868 = add i32 %v6_13868, -4
  store i32 %v7_13868, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_1384c, %bb, %dec_label_pc_13a14, %dec_label_pc_139a8, %dec_label_pc_1393c, %bb130
  %v2_1387c = phi i32 [ %v10_1385c, %.thread5 ], [ %v0_1390c75, %.thread11 ], [ %v7_1385c, %dec_label_pc_1384c ], [ %v1_137d0, %bb ], [ %v2_1387c113, %dec_label_pc_13a14 ], [ %v2_1387c112, %dec_label_pc_139a8 ], [ %v2_1387c111, %dec_label_pc_1393c ], [ %v12_13864, %bb130 ]
  %v0_1386c = phi i32 [ %v0_1386c.pre, %.thread5 ], [ %v2_138b4, %.thread11 ], [ %v2_1384c, %dec_label_pc_1384c ], [ %v2_137e0, %bb ], [ %v0_1386c109, %dec_label_pc_13a14 ], [ %v0_1386c108, %dec_label_pc_139a8 ], [ %v0_1386c107, %dec_label_pc_1393c ], [ %v7_13868, %bb130 ]
  %v1_1386c = add i32 %v0_1386c, 4
  store i32 %v1_1386c, i32* %r2.global-to-local, align 4
  %v3_1386c = sub i32 0, %v0_1386c
  %v4_1386c = and i32 %v1_1386c, %v3_1386c
  %v5_1386c = icmp slt i32 %v4_1386c, 0
  store i1 %v5_1386c, i1* %cpsr_v.global-to-local, align 1
  %v6_1386c = icmp slt i32 %v1_1386c, 0
  store i1 %v6_1386c, i1* %cpsr_n.global-to-local, align 1
  %v7_1386c = icmp eq i32 %v1_1386c, 0
  store i1 %v7_1386c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1386c, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_13870 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_13870, i32* %r0.global-to-local, align 4
  ret i32 %v3_13870

bb133:                                            ; preds = %bb131
  %v1_13874 = add i32 %v0_1386c, 2
  %v3_13874 = sub i32 -3, %v0_1386c
  %v4_13874 = and i32 %v3_13874, %v1_1386c
  %v5_13874 = icmp slt i32 %v4_13874, 0
  store i1 %v5_13874, i1* %cpsr_v.global-to-local, align 1
  %v6_13874 = icmp slt i32 %v1_13874, 0
  store i1 %v6_13874, i1* %cpsr_n.global-to-local, align 1
  %v7_13874 = icmp eq i32 %v1_1386c, 2
  store i1 %v7_13874, i1* %cpsr_z.global-to-local, align 1
  %v0_13878 = load i32, i32* @r1, align 4
  %v1_13878 = inttoptr i32 %v0_13878 to i8*
  %v2_13878 = load i8, i8* %v1_13878, align 1
  %v3_13878 = zext i8 %v2_13878 to i32
  store i32 %v3_13878, i32* %r3.global-to-local, align 4
  %v5_13878 = add i32 %v0_13878, 1
  store i32 %v5_13878, i32* %r1.global-to-local, align 4
  %v3_1387c = inttoptr i32 %v2_1387c to i8*
  store i8 %v2_13878, i8* %v3_1387c, align 1
  %v4_1387c = load i32, i32* @r0, align 4
  %v5_1387c = add i32 %v4_1387c, 1
  store i32 %v5_1387c, i32* %r0.global-to-local, align 4
  %v0_13880 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_13880 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_13880 = xor i1 %v0_13880, %v1_13880
  br i1 %v2_13880, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_13880 = load i32, i32* %r1.global-to-local, align 4
  %v4_13880 = inttoptr i32 %v3_13880 to i8*
  %v5_13880 = load i8, i8* %v4_13880, align 1
  %v6_13880 = zext i8 %v5_13880 to i32
  store i32 %v6_13880, i32* %r3.global-to-local, align 4
  %v8_13880 = add i32 %v3_13880, 1
  store i32 %v8_13880, i32* %r1.global-to-local, align 4
  %v6_13884 = inttoptr i32 %v5_1387c to i8*
  store i8 %v5_13880, i8* %v6_13884, align 1
  %v7_13884 = load i32, i32* %r0.global-to-local, align 4
  %v8_13884 = add i32 %v7_13884, 1
  store i32 %v8_13884, i32* %r0.global-to-local, align 4
  %v1_13888.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_13888.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_1388c = phi i32 [ %v8_13884, %bb134 ], [ %v5_1387c, %bb133 ]
  %v2_1388c = phi i1 [ %v2_13888.pre, %bb134 ], [ %v1_13880, %bb133 ]
  %v1_1388c = phi i1 [ %v1_13888.pre, %bb134 ], [ %v0_13880, %bb133 ]
  %v0_13888 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_13888 = xor i1 %v2_1388c, %v1_1388c
  %v4_13888 = or i1 %v0_13888, %v3_13888
  br i1 %v4_13888, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_13888 = load i32, i32* %r1.global-to-local, align 4
  %v6_13888 = inttoptr i32 %v5_13888 to i8*
  %v7_13888 = load i8, i8* %v6_13888, align 1
  %v8_13888 = zext i8 %v7_13888 to i32
  store i32 %v8_13888, i32* %r3.global-to-local, align 4
  %v10_13888 = add i32 %v5_13888, 1
  store i32 %v10_13888, i32* %r1.global-to-local, align 4
  %v8_1388c = inttoptr i32 %v7_1388c to i8*
  store i8 %v7_13888, i8* %v8_1388c, align 1
  %v9_1388c = load i32, i32* %r0.global-to-local, align 4
  %v10_1388c = add i32 %v9_1388c, 1
  store i32 %v10_1388c, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_13890 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13890, i32* %r0.global-to-local, align 4
  ret i32 %v2_13890

dec_label_pc_13894:                               ; preds = %dec_label_pc_137e8
  %v1_13894 = sub nsw i32 4, %v1_137e8
  store i32 %v1_13894, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_13898 = icmp ult i32 %v1_13894, 2
  store i1 %v8_13898, i1* %cpsr_n.global-to-local, align 1
  %v9_13898 = icmp eq i32 %v1_13894, 2
  store i1 %v9_13898, i1* %cpsr_z.global-to-local, align 1
  %v1_1389c = inttoptr i32 %v0_137d0 to i8*
  %v2_1389c = load i8, i8* %v1_1389c, align 1
  %v3_1389c = zext i8 %v2_1389c to i32
  store i32 %v3_1389c, i32* %r3.global-to-local, align 4
  %v5_1389c = add i32 %v0_137d0, 1
  store i32 %v5_1389c, i32* @r1, align 4
  %v3_138a0 = inttoptr i32 %v1_137d0 to i8*
  store i8 %v2_1389c, i8* %v3_138a0, align 1
  %v4_138a0 = load i32, i32* @r0, align 4
  %v5_138a0 = add i32 %v4_138a0, 1
  store i32 %v5_138a0, i32* @r0, align 4
  br i1 %v8_13898, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_13894
  %v6_138a4 = load i32, i32* @r1, align 4
  %v7_138a4 = inttoptr i32 %v6_138a4 to i8*
  %v8_138a4 = load i8, i8* %v7_138a4, align 1
  %v9_138a4 = zext i8 %v8_138a4 to i32
  store i32 %v9_138a4, i32* %r3.global-to-local, align 4
  %v11_138a4 = add i32 %v6_138a4, 1
  store i32 %v11_138a4, i32* @r1, align 4
  %v9_138a8 = inttoptr i32 %v5_138a0 to i8*
  store i8 %v8_138a4, i8* %v9_138a8, align 1
  %v10_138a8 = load i32, i32* @r0, align 4
  %v11_138a8 = add i32 %v10_138a8, 1
  store i32 %v11_138a8, i32* @r0, align 4
  br i1 %v9_13898, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_138ac = load i32, i32* @r1, align 4
  %v9_138ac = inttoptr i32 %v8_138ac to i8*
  %v10_138ac = load i8, i8* %v9_138ac, align 1
  %v11_138ac = zext i8 %v10_138ac to i32
  store i32 %v11_138ac, i32* %r3.global-to-local, align 4
  %v13_138ac = add i32 %v8_138ac, 1
  store i32 %v13_138ac, i32* @r1, align 4
  %v11_138b0 = inttoptr i32 %v11_138a8 to i8*
  store i8 %v10_138ac, i8* %v11_138b0, align 1
  %v12_138b0 = load i32, i32* @r0, align 4
  %v13_138b0 = add i32 %v12_138b0, 1
  store i32 %v13_138b0, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_13894, %bb137
  %v0_1390c75 = phi i32 [ %v11_138a8, %bb136 ], [ %v5_138a0, %dec_label_pc_13894 ], [ %v13_138b0, %bb137 ]
  %v0_138b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_138b4 = load i32, i32* @ip, align 4
  %v2_138b4 = sub i32 %v0_138b4, %v1_138b4
  store i32 %v2_138b4, i32* %r2.global-to-local, align 4
  %v4_138b4 = xor i32 %v1_138b4, %v0_138b4
  %v5_138b4 = xor i32 %v2_138b4, %v0_138b4
  %v6_138b4 = and i32 %v5_138b4, %v4_138b4
  %v7_138b4 = icmp slt i32 %v6_138b4, 0
  store i1 %v7_138b4, i1* %cpsr_v.global-to-local, align 1
  %v8_138b4 = icmp slt i32 %v2_138b4, 0
  store i1 %v8_138b4, i1* %cpsr_n.global-to-local, align 1
  %v9_138b4 = icmp eq i32 %v0_138b4, %v1_138b4
  store i1 %v9_138b4, i1* %cpsr_z.global-to-local, align 1
  %v5_138b8 = icmp slt i32 %v0_138b4, %v1_138b4
  br i1 %v5_138b8, label %bb131, label %dec_label_pc_138bc

dec_label_pc_138bc:                               ; preds = %.thread11
  %v0_138bc = load i32, i32* @r1, align 4
  %v1_138bc = urem i32 %v0_138bc, 4
  store i32 %v1_138bc, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_138bc = icmp eq i32 %v1_138bc, 0
  store i1 %v2_138bc, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_138bc to i2
  br i1 %v2_138bc, label %dec_label_pc_137f8, label %dec_label_pc_138c4

dec_label_pc_138c4:                               ; preds = %dec_label_pc_137f0, %dec_label_pc_138bc
  %v0_1390c74 = phi i32 [ %v1_137d0, %dec_label_pc_137f0 ], [ %v0_1390c75, %dec_label_pc_138bc ]
  %v0_139b8 = phi i32 [ %v2_137e0, %dec_label_pc_137f0 ], [ %v2_138b4, %dec_label_pc_138bc ]
  %v0_138cc.off0 = phi i2 [ %extract.t, %dec_label_pc_137f0 ], [ %extract.t123, %dec_label_pc_138bc ]
  %v0_138c4 = phi i32 [ %v0_137d0, %dec_label_pc_137f0 ], [ %v0_138bc, %dec_label_pc_138bc ]
  %v1_138c4 = and i32 %v0_138c4, -4
  store i32 %v1_138c4, i32* %r1.global-to-local, align 4
  %v1_138c8 = inttoptr i32 %v1_138c4 to i32*
  %v2_138c8 = load i32, i32* %v1_138c8, align 4
  store i32 %v2_138c8, i32* @lr, align 4
  %v4_138c8 = add i32 %v1_138c4, 4
  store i32 %v4_138c8, i32* %r1.global-to-local, align 4
  %v2_139b0 = add i32 %v0_139b8, -12
  %v4_139b0 = sub i32 11, %v0_139b8
  %v5_139b0 = and i32 %v4_139b0, %v0_139b8
  %v6_139b0 = icmp slt i32 %v5_139b0, 0
  store i1 %v6_139b0, i1* %cpsr_v.global-to-local, align 1
  %v7_139b0 = icmp slt i32 %v2_139b0, 0
  store i1 %v7_139b0, i1* %cpsr_n.global-to-local, align 1
  %v8_139b0 = icmp eq i32 %v0_139b8, 12
  store i1 %v8_139b0, i1* %cpsr_z.global-to-local, align 1
  %v5_139b4 = icmp slt i32 %v0_139b8, 12
  switch i2 %v0_138cc.off0, label %dec_label_pc_138d8 [
    i2 -1, label %dec_label_pc_139b0
    i2 -2, label %dec_label_pc_13944
  ]

dec_label_pc_138d8:                               ; preds = %dec_label_pc_138c4
  br i1 %v5_139b4, label %dec_label_pc_13924, label %dec_label_pc_138e0

dec_label_pc_138e0:                               ; preds = %dec_label_pc_138d8
  store i32 %v2_139b0, i32* %r2.global-to-local, align 4
  %v3_138e4 = load i32, i32* @r4, align 4
  store i32 %v3_138e4, i32* %stack_var_-16, align 4
  %v6_138e4 = load i32, i32* @r5, align 4
  store i32 %v6_138e4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_138e8

dec_label_pc_138e8:                               ; preds = %dec_label_pc_138e8.dec_label_pc_138e8_crit_edge, %dec_label_pc_138e0
  %v0_1390c = phi i32 [ %v12_1390c, %dec_label_pc_138e8.dec_label_pc_138e8_crit_edge ], [ %v0_1390c74, %dec_label_pc_138e0 ]
  %v0_138ec = phi i32 [ %v0_138ec.pre, %dec_label_pc_138e8.dec_label_pc_138e8_crit_edge ], [ %v4_138c8, %dec_label_pc_138e0 ]
  %v0_138e8 = phi i32 [ %v0_138e8.pre, %dec_label_pc_138e8.dec_label_pc_138e8_crit_edge ], [ %v2_138c8, %dec_label_pc_138e0 ]
  %v3_138e8 = udiv i32 %v0_138e8, 256
  store i32 %v3_138e8, i32* %r3.global-to-local, align 4
  %v1_138ec = inttoptr i32 %v0_138ec to i32*
  %v2_138ec = load i32, i32* %v1_138ec, align 4
  store i32 %v2_138ec, i32* %r4.global-to-local, align 4
  %v3_138ec = add i32 %v0_138ec, 4
  %v4_138ec = inttoptr i32 %v3_138ec to i32*
  %v5_138ec = load i32, i32* %v4_138ec, align 4
  store i32 %v5_138ec, i32* %r5.global-to-local, align 4
  %v6_138ec = add i32 %v0_138ec, 8
  %v7_138ec = inttoptr i32 %v6_138ec to i32*
  %v8_138ec = load i32, i32* %v7_138ec, align 4
  store i32 %v8_138ec, i32* %ip.global-to-local, align 4
  %v9_138ec = add i32 %v0_138ec, 12
  %v10_138ec = inttoptr i32 %v9_138ec to i32*
  %v11_138ec = load i32, i32* %v10_138ec, align 4
  store i32 %v11_138ec, i32* @lr, align 4
  %v12_138ec = add i32 %v0_138ec, 16
  store i32 %v12_138ec, i32* %r1.global-to-local, align 4
  %v4_138f0 = mul i32 %v2_138ec, 16777216
  %v5_138f0 = or i32 %v4_138f0, %v3_138e8
  store i32 %v5_138f0, i32* %r3.global-to-local, align 4
  %v3_138f4 = udiv i32 %v2_138ec, 256
  %v4_138f8 = mul i32 %v5_138ec, 16777216
  %v5_138f8 = or i32 %v4_138f8, %v3_138f4
  store i32 %v5_138f8, i32* %r4.global-to-local, align 4
  %v3_138fc = udiv i32 %v5_138ec, 256
  %v4_13900 = mul i32 %v8_138ec, 16777216
  %v5_13900 = or i32 %v4_13900, %v3_138fc
  store i32 %v5_13900, i32* %r5.global-to-local, align 4
  %v3_13904 = udiv i32 %v8_138ec, 256
  %v4_13908 = mul i32 %v11_138ec, 16777216
  %v5_13908 = or i32 %v4_13908, %v3_13904
  store i32 %v5_13908, i32* @ip, align 4
  %v1_1390c = inttoptr i32 %v0_1390c to i32*
  store i32 %v5_138f0, i32* %v1_1390c, align 4
  %v3_1390c = add i32 %v0_1390c, 4
  %v4_1390c = inttoptr i32 %v3_1390c to i32*
  %v5_1390c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1390c, i32* %v4_1390c, align 4
  %v6_1390c = add i32 %v0_1390c, 8
  %v7_1390c = inttoptr i32 %v6_1390c to i32*
  %v8_1390c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1390c, i32* %v7_1390c, align 4
  %v9_1390c = add i32 %v0_1390c, 12
  %v10_1390c = inttoptr i32 %v9_1390c to i32*
  %v11_1390c = load i32, i32* @ip, align 4
  store i32 %v11_1390c, i32* %v10_1390c, align 4
  %v12_1390c = add i32 %v0_1390c, 16
  store i32 %v12_1390c, i32* @r0, align 4
  %v0_13910 = load i32, i32* %r2.global-to-local, align 4
  %v2_13910 = add i32 %v0_13910, -16
  store i32 %v2_13910, i32* %r2.global-to-local, align 4
  %v6_13914 = icmp slt i32 %v0_13910, 16
  br i1 %v6_13914, label %dec_label_pc_13918, label %dec_label_pc_138e8.dec_label_pc_138e8_crit_edge

dec_label_pc_138e8.dec_label_pc_138e8_crit_edge:  ; preds = %dec_label_pc_138e8
  %v0_138e8.pre = load i32, i32* @lr, align 4
  %v0_138ec.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_138e8

dec_label_pc_13918:                               ; preds = %dec_label_pc_138e8
  %v2_13918 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13918, i32* @r4, align 4
  %v5_13918 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_13918, i32* @r5, align 4
  %v2_1391c = add i32 %v0_13910, -4
  store i32 %v2_1391c, i32* %r2.global-to-local, align 4
  %v4_1391c = add i32 %v0_13910, 2147483632
  %v5_1391c = and i32 %v2_1391c, %v4_1391c
  %v6_1391c = icmp slt i32 %v5_1391c, 0
  store i1 %v6_1391c, i1* %cpsr_v.global-to-local, align 1
  %v7_1391c = icmp slt i32 %v2_1391c, 0
  store i1 %v7_1391c, i1* %cpsr_n.global-to-local, align 1
  %v8_1391c = icmp eq i32 %v2_1391c, 0
  store i1 %v8_1391c, i1* %cpsr_z.global-to-local, align 1
  %v5_13920 = icmp slt i32 %v2_13910, -12
  br i1 %v5_13920, label %dec_label_pc_1393c, label %dec_label_pc_13924

dec_label_pc_13924:                               ; preds = %dec_label_pc_13918, %dec_label_pc_138d8, %dec_label_pc_13924
  %v1_13930 = phi i32 [ %v4_13930, %dec_label_pc_13924 ], [ %v12_1390c, %dec_label_pc_13918 ], [ %v0_1390c74, %dec_label_pc_138d8 ]
  %v0_13924 = load i32, i32* @lr, align 4
  %v3_13924 = udiv i32 %v0_13924, 256
  store i32 %v3_13924, i32* %ip.global-to-local, align 4
  %v0_13928 = load i32, i32* %r1.global-to-local, align 4
  %v1_13928 = inttoptr i32 %v0_13928 to i32*
  %v2_13928 = load i32, i32* %v1_13928, align 4
  store i32 %v2_13928, i32* @lr, align 4
  %v4_13928 = add i32 %v0_13928, 4
  store i32 %v4_13928, i32* %r1.global-to-local, align 4
  %v4_1392c = mul i32 %v2_13928, 16777216
  %v5_1392c = or i32 %v4_1392c, %v3_13924
  store i32 %v5_1392c, i32* @ip, align 4
  %v2_13930 = inttoptr i32 %v1_13930 to i32*
  store i32 %v5_1392c, i32* %v2_13930, align 4
  %v3_13930 = load i32, i32* @r0, align 4
  %v4_13930 = add i32 %v3_13930, 4
  store i32 %v4_13930, i32* @r0, align 4
  %v0_13934 = load i32, i32* %r2.global-to-local, align 4
  %v2_13934 = add i32 %v0_13934, -4
  store i32 %v2_13934, i32* %r2.global-to-local, align 4
  %v6_13938 = icmp slt i32 %v0_13934, 4
  br i1 %v6_13938, label %dec_label_pc_1393c.loopexit, label %dec_label_pc_13924

dec_label_pc_1393c.loopexit:                      ; preds = %dec_label_pc_13924
  %v4_13934 = sub i32 3, %v0_13934
  %v5_13934 = and i32 %v4_13934, %v0_13934
  %v6_13934 = icmp slt i32 %v5_13934, 0
  %v7_13934 = icmp slt i32 %v2_13934, 0
  store i1 %v6_13934, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13934, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1393c

dec_label_pc_1393c:                               ; preds = %dec_label_pc_1393c.loopexit, %dec_label_pc_13918
  %v2_1387c111 = phi i32 [ %v4_13930, %dec_label_pc_1393c.loopexit ], [ %v12_1390c, %dec_label_pc_13918 ]
  %v0_1386c107 = phi i32 [ %v2_13934, %dec_label_pc_1393c.loopexit ], [ %v2_1391c, %dec_label_pc_13918 ]
  %v0_1393c = load i32, i32* %r1.global-to-local, align 4
  %v1_1393c = add i32 %v0_1393c, -3
  store i32 %v1_1393c, i32* @r1, align 4
  br label %bb131

dec_label_pc_13944:                               ; preds = %dec_label_pc_138c4
  br i1 %v5_139b4, label %dec_label_pc_13990, label %dec_label_pc_1394c

dec_label_pc_1394c:                               ; preds = %dec_label_pc_13944
  store i32 %v2_139b0, i32* %r2.global-to-local, align 4
  %v3_13950 = load i32, i32* @r4, align 4
  store i32 %v3_13950, i32* %stack_var_-16, align 4
  %v6_13950 = load i32, i32* @r5, align 4
  store i32 %v6_13950, i32* %stack_var_-12, align 4
  br label %dec_label_pc_13954

dec_label_pc_13954:                               ; preds = %dec_label_pc_13954.dec_label_pc_13954_crit_edge, %dec_label_pc_1394c
  %v0_13978 = phi i32 [ %v12_13978, %dec_label_pc_13954.dec_label_pc_13954_crit_edge ], [ %v0_1390c74, %dec_label_pc_1394c ]
  %v0_13958 = phi i32 [ %v0_13958.pre, %dec_label_pc_13954.dec_label_pc_13954_crit_edge ], [ %v4_138c8, %dec_label_pc_1394c ]
  %v0_13954 = phi i32 [ %v0_13954.pre, %dec_label_pc_13954.dec_label_pc_13954_crit_edge ], [ %v2_138c8, %dec_label_pc_1394c ]
  %v3_13954 = udiv i32 %v0_13954, 65536
  store i32 %v3_13954, i32* %r3.global-to-local, align 4
  %v1_13958 = inttoptr i32 %v0_13958 to i32*
  %v2_13958 = load i32, i32* %v1_13958, align 4
  store i32 %v2_13958, i32* %r4.global-to-local, align 4
  %v3_13958 = add i32 %v0_13958, 4
  %v4_13958 = inttoptr i32 %v3_13958 to i32*
  %v5_13958 = load i32, i32* %v4_13958, align 4
  store i32 %v5_13958, i32* %r5.global-to-local, align 4
  %v6_13958 = add i32 %v0_13958, 8
  %v7_13958 = inttoptr i32 %v6_13958 to i32*
  %v8_13958 = load i32, i32* %v7_13958, align 4
  store i32 %v8_13958, i32* %ip.global-to-local, align 4
  %v9_13958 = add i32 %v0_13958, 12
  %v10_13958 = inttoptr i32 %v9_13958 to i32*
  %v11_13958 = load i32, i32* %v10_13958, align 4
  store i32 %v11_13958, i32* @lr, align 4
  %v12_13958 = add i32 %v0_13958, 16
  store i32 %v12_13958, i32* %r1.global-to-local, align 4
  %v4_1395c = mul i32 %v2_13958, 65536
  %v5_1395c = or i32 %v4_1395c, %v3_13954
  store i32 %v5_1395c, i32* %r3.global-to-local, align 4
  %v3_13960 = udiv i32 %v2_13958, 65536
  %v4_13964 = mul i32 %v5_13958, 65536
  %v5_13964 = or i32 %v4_13964, %v3_13960
  store i32 %v5_13964, i32* %r4.global-to-local, align 4
  %v3_13968 = udiv i32 %v5_13958, 65536
  %v4_1396c = mul i32 %v8_13958, 65536
  %v5_1396c = or i32 %v4_1396c, %v3_13968
  store i32 %v5_1396c, i32* %r5.global-to-local, align 4
  %v3_13970 = udiv i32 %v8_13958, 65536
  %v4_13974 = mul i32 %v11_13958, 65536
  %v5_13974 = or i32 %v4_13974, %v3_13970
  store i32 %v5_13974, i32* @ip, align 4
  %v1_13978 = inttoptr i32 %v0_13978 to i32*
  store i32 %v5_1395c, i32* %v1_13978, align 4
  %v3_13978 = add i32 %v0_13978, 4
  %v4_13978 = inttoptr i32 %v3_13978 to i32*
  %v5_13978 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13978, i32* %v4_13978, align 4
  %v6_13978 = add i32 %v0_13978, 8
  %v7_13978 = inttoptr i32 %v6_13978 to i32*
  %v8_13978 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_13978, i32* %v7_13978, align 4
  %v9_13978 = add i32 %v0_13978, 12
  %v10_13978 = inttoptr i32 %v9_13978 to i32*
  %v11_13978 = load i32, i32* @ip, align 4
  store i32 %v11_13978, i32* %v10_13978, align 4
  %v12_13978 = add i32 %v0_13978, 16
  store i32 %v12_13978, i32* @r0, align 4
  %v0_1397c = load i32, i32* %r2.global-to-local, align 4
  %v2_1397c = add i32 %v0_1397c, -16
  store i32 %v2_1397c, i32* %r2.global-to-local, align 4
  %v6_13980 = icmp slt i32 %v0_1397c, 16
  br i1 %v6_13980, label %dec_label_pc_13984, label %dec_label_pc_13954.dec_label_pc_13954_crit_edge

dec_label_pc_13954.dec_label_pc_13954_crit_edge:  ; preds = %dec_label_pc_13954
  %v0_13954.pre = load i32, i32* @lr, align 4
  %v0_13958.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13954

dec_label_pc_13984:                               ; preds = %dec_label_pc_13954
  %v2_13984 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13984, i32* @r4, align 4
  %v5_13984 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_13984, i32* @r5, align 4
  %v2_13988 = add i32 %v0_1397c, -4
  store i32 %v2_13988, i32* %r2.global-to-local, align 4
  %v4_13988 = add i32 %v0_1397c, 2147483632
  %v5_13988 = and i32 %v2_13988, %v4_13988
  %v6_13988 = icmp slt i32 %v5_13988, 0
  store i1 %v6_13988, i1* %cpsr_v.global-to-local, align 1
  %v7_13988 = icmp slt i32 %v2_13988, 0
  store i1 %v7_13988, i1* %cpsr_n.global-to-local, align 1
  %v8_13988 = icmp eq i32 %v2_13988, 0
  store i1 %v8_13988, i1* %cpsr_z.global-to-local, align 1
  %v5_1398c = icmp slt i32 %v2_1397c, -12
  br i1 %v5_1398c, label %dec_label_pc_139a8, label %dec_label_pc_13990

dec_label_pc_13990:                               ; preds = %dec_label_pc_13984, %dec_label_pc_13944, %dec_label_pc_13990
  %v1_1399c = phi i32 [ %v4_1399c, %dec_label_pc_13990 ], [ %v12_13978, %dec_label_pc_13984 ], [ %v0_1390c74, %dec_label_pc_13944 ]
  %v0_13990 = load i32, i32* @lr, align 4
  %v3_13990 = udiv i32 %v0_13990, 65536
  store i32 %v3_13990, i32* %ip.global-to-local, align 4
  %v0_13994 = load i32, i32* %r1.global-to-local, align 4
  %v1_13994 = inttoptr i32 %v0_13994 to i32*
  %v2_13994 = load i32, i32* %v1_13994, align 4
  store i32 %v2_13994, i32* @lr, align 4
  %v4_13994 = add i32 %v0_13994, 4
  store i32 %v4_13994, i32* %r1.global-to-local, align 4
  %v4_13998 = mul i32 %v2_13994, 65536
  %v5_13998 = or i32 %v4_13998, %v3_13990
  store i32 %v5_13998, i32* @ip, align 4
  %v2_1399c = inttoptr i32 %v1_1399c to i32*
  store i32 %v5_13998, i32* %v2_1399c, align 4
  %v3_1399c = load i32, i32* @r0, align 4
  %v4_1399c = add i32 %v3_1399c, 4
  store i32 %v4_1399c, i32* @r0, align 4
  %v0_139a0 = load i32, i32* %r2.global-to-local, align 4
  %v2_139a0 = add i32 %v0_139a0, -4
  store i32 %v2_139a0, i32* %r2.global-to-local, align 4
  %v6_139a4 = icmp slt i32 %v0_139a0, 4
  br i1 %v6_139a4, label %dec_label_pc_139a8.loopexit, label %dec_label_pc_13990

dec_label_pc_139a8.loopexit:                      ; preds = %dec_label_pc_13990
  %v4_139a0 = sub i32 3, %v0_139a0
  %v5_139a0 = and i32 %v4_139a0, %v0_139a0
  %v6_139a0 = icmp slt i32 %v5_139a0, 0
  %v7_139a0 = icmp slt i32 %v2_139a0, 0
  store i1 %v6_139a0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_139a0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_139a8

dec_label_pc_139a8:                               ; preds = %dec_label_pc_139a8.loopexit, %dec_label_pc_13984
  %v2_1387c112 = phi i32 [ %v4_1399c, %dec_label_pc_139a8.loopexit ], [ %v12_13978, %dec_label_pc_13984 ]
  %v0_1386c108 = phi i32 [ %v2_139a0, %dec_label_pc_139a8.loopexit ], [ %v2_13988, %dec_label_pc_13984 ]
  %v0_139a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_139a8 = add i32 %v0_139a8, -2
  store i32 %v1_139a8, i32* @r1, align 4
  br label %bb131

dec_label_pc_139b0:                               ; preds = %dec_label_pc_138c4
  br i1 %v5_139b4, label %dec_label_pc_139fc, label %dec_label_pc_139b8

dec_label_pc_139b8:                               ; preds = %dec_label_pc_139b0
  store i32 %v2_139b0, i32* %r2.global-to-local, align 4
  %v3_139bc = load i32, i32* @r4, align 4
  store i32 %v3_139bc, i32* %stack_var_-16, align 4
  %v6_139bc = load i32, i32* @r5, align 4
  store i32 %v6_139bc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_139c0

dec_label_pc_139c0:                               ; preds = %dec_label_pc_139c0.dec_label_pc_139c0_crit_edge, %dec_label_pc_139b8
  %v0_139e4 = phi i32 [ %v12_139e4, %dec_label_pc_139c0.dec_label_pc_139c0_crit_edge ], [ %v0_1390c74, %dec_label_pc_139b8 ]
  %v0_139c4 = phi i32 [ %v0_139c4.pre, %dec_label_pc_139c0.dec_label_pc_139c0_crit_edge ], [ %v4_138c8, %dec_label_pc_139b8 ]
  %v0_139c0 = phi i32 [ %v0_139c0.pre, %dec_label_pc_139c0.dec_label_pc_139c0_crit_edge ], [ %v2_138c8, %dec_label_pc_139b8 ]
  %v3_139c0 = udiv i32 %v0_139c0, 16777216
  store i32 %v3_139c0, i32* %r3.global-to-local, align 4
  %v1_139c4 = inttoptr i32 %v0_139c4 to i32*
  %v2_139c4 = load i32, i32* %v1_139c4, align 4
  store i32 %v2_139c4, i32* %r4.global-to-local, align 4
  %v3_139c4 = add i32 %v0_139c4, 4
  %v4_139c4 = inttoptr i32 %v3_139c4 to i32*
  %v5_139c4 = load i32, i32* %v4_139c4, align 4
  store i32 %v5_139c4, i32* %r5.global-to-local, align 4
  %v6_139c4 = add i32 %v0_139c4, 8
  %v7_139c4 = inttoptr i32 %v6_139c4 to i32*
  %v8_139c4 = load i32, i32* %v7_139c4, align 4
  store i32 %v8_139c4, i32* %ip.global-to-local, align 4
  %v9_139c4 = add i32 %v0_139c4, 12
  %v10_139c4 = inttoptr i32 %v9_139c4 to i32*
  %v11_139c4 = load i32, i32* %v10_139c4, align 4
  store i32 %v11_139c4, i32* @lr, align 4
  %v12_139c4 = add i32 %v0_139c4, 16
  store i32 %v12_139c4, i32* %r1.global-to-local, align 4
  %v4_139c8 = mul i32 %v2_139c4, 256
  %v5_139c8 = or i32 %v4_139c8, %v3_139c0
  store i32 %v5_139c8, i32* %r3.global-to-local, align 4
  %v3_139cc = udiv i32 %v2_139c4, 16777216
  %v4_139d0 = mul i32 %v5_139c4, 256
  %v5_139d0 = or i32 %v4_139d0, %v3_139cc
  store i32 %v5_139d0, i32* %r4.global-to-local, align 4
  %v3_139d4 = udiv i32 %v5_139c4, 16777216
  %v4_139d8 = mul i32 %v8_139c4, 256
  %v5_139d8 = or i32 %v4_139d8, %v3_139d4
  store i32 %v5_139d8, i32* %r5.global-to-local, align 4
  %v3_139dc = udiv i32 %v8_139c4, 16777216
  %v4_139e0 = mul i32 %v11_139c4, 256
  %v5_139e0 = or i32 %v4_139e0, %v3_139dc
  store i32 %v5_139e0, i32* @ip, align 4
  %v1_139e4 = inttoptr i32 %v0_139e4 to i32*
  store i32 %v5_139c8, i32* %v1_139e4, align 4
  %v3_139e4 = add i32 %v0_139e4, 4
  %v4_139e4 = inttoptr i32 %v3_139e4 to i32*
  %v5_139e4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_139e4, i32* %v4_139e4, align 4
  %v6_139e4 = add i32 %v0_139e4, 8
  %v7_139e4 = inttoptr i32 %v6_139e4 to i32*
  %v8_139e4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_139e4, i32* %v7_139e4, align 4
  %v9_139e4 = add i32 %v0_139e4, 12
  %v10_139e4 = inttoptr i32 %v9_139e4 to i32*
  %v11_139e4 = load i32, i32* @ip, align 4
  store i32 %v11_139e4, i32* %v10_139e4, align 4
  %v12_139e4 = add i32 %v0_139e4, 16
  store i32 %v12_139e4, i32* @r0, align 4
  %v0_139e8 = load i32, i32* %r2.global-to-local, align 4
  %v2_139e8 = add i32 %v0_139e8, -16
  store i32 %v2_139e8, i32* %r2.global-to-local, align 4
  %v6_139ec = icmp slt i32 %v0_139e8, 16
  br i1 %v6_139ec, label %dec_label_pc_139f0, label %dec_label_pc_139c0.dec_label_pc_139c0_crit_edge

dec_label_pc_139c0.dec_label_pc_139c0_crit_edge:  ; preds = %dec_label_pc_139c0
  %v0_139c0.pre = load i32, i32* @lr, align 4
  %v0_139c4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_139c0

dec_label_pc_139f0:                               ; preds = %dec_label_pc_139c0
  %v2_139f0 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_139f0, i32* @r4, align 4
  %v5_139f0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_139f0, i32* @r5, align 4
  %v2_139f4 = add i32 %v0_139e8, -4
  store i32 %v2_139f4, i32* %r2.global-to-local, align 4
  %v4_139f4 = add i32 %v0_139e8, 2147483632
  %v5_139f4 = and i32 %v2_139f4, %v4_139f4
  %v6_139f4 = icmp slt i32 %v5_139f4, 0
  store i1 %v6_139f4, i1* %cpsr_v.global-to-local, align 1
  %v7_139f4 = icmp slt i32 %v2_139f4, 0
  store i1 %v7_139f4, i1* %cpsr_n.global-to-local, align 1
  %v8_139f4 = icmp eq i32 %v2_139f4, 0
  store i1 %v8_139f4, i1* %cpsr_z.global-to-local, align 1
  %v5_139f8 = icmp slt i32 %v2_139e8, -12
  br i1 %v5_139f8, label %dec_label_pc_13a14, label %dec_label_pc_139fc

dec_label_pc_139fc:                               ; preds = %dec_label_pc_139f0, %dec_label_pc_139b0, %dec_label_pc_139fc
  %v1_13a08 = phi i32 [ %v4_13a08, %dec_label_pc_139fc ], [ %v12_139e4, %dec_label_pc_139f0 ], [ %v0_1390c74, %dec_label_pc_139b0 ]
  %v0_139fc = load i32, i32* @lr, align 4
  %v3_139fc = udiv i32 %v0_139fc, 16777216
  store i32 %v3_139fc, i32* %ip.global-to-local, align 4
  %v0_13a00 = load i32, i32* %r1.global-to-local, align 4
  %v1_13a00 = inttoptr i32 %v0_13a00 to i32*
  %v2_13a00 = load i32, i32* %v1_13a00, align 4
  store i32 %v2_13a00, i32* @lr, align 4
  %v4_13a00 = add i32 %v0_13a00, 4
  store i32 %v4_13a00, i32* %r1.global-to-local, align 4
  %v4_13a04 = mul i32 %v2_13a00, 256
  %v5_13a04 = or i32 %v4_13a04, %v3_139fc
  store i32 %v5_13a04, i32* @ip, align 4
  %v2_13a08 = inttoptr i32 %v1_13a08 to i32*
  store i32 %v5_13a04, i32* %v2_13a08, align 4
  %v3_13a08 = load i32, i32* @r0, align 4
  %v4_13a08 = add i32 %v3_13a08, 4
  store i32 %v4_13a08, i32* @r0, align 4
  %v0_13a0c = load i32, i32* %r2.global-to-local, align 4
  %v2_13a0c = add i32 %v0_13a0c, -4
  store i32 %v2_13a0c, i32* %r2.global-to-local, align 4
  %v6_13a10 = icmp slt i32 %v0_13a0c, 4
  br i1 %v6_13a10, label %dec_label_pc_13a14.loopexit, label %dec_label_pc_139fc

dec_label_pc_13a14.loopexit:                      ; preds = %dec_label_pc_139fc
  %v4_13a0c = sub i32 3, %v0_13a0c
  %v5_13a0c = and i32 %v4_13a0c, %v0_13a0c
  %v6_13a0c = icmp slt i32 %v5_13a0c, 0
  %v7_13a0c = icmp slt i32 %v2_13a0c, 0
  store i1 %v6_13a0c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13a0c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13a14

dec_label_pc_13a14:                               ; preds = %dec_label_pc_13a14.loopexit, %dec_label_pc_139f0
  %v2_1387c113 = phi i32 [ %v4_13a08, %dec_label_pc_13a14.loopexit ], [ %v12_139e4, %dec_label_pc_139f0 ]
  %v0_1386c109 = phi i32 [ %v2_13a0c, %dec_label_pc_13a14.loopexit ], [ %v2_139f4, %dec_label_pc_139f0 ]
  %v0_13a14 = load i32, i32* %r1.global-to-local, align 4
  %v1_13a14 = add i32 %v0_13a14, -1
  store i32 %v1_13a14, i32* @r1, align 4
  br label %bb131

dec_label_pc_13a1c:                               ; preds = %dec_label_pc_137d0
  %v1_13a1c = load i32, i32* @r2, align 4
  %v2_13a1c = add i32 %v1_13a1c, %v0_137d0
  store i32 %v2_13a1c, i32* %r1.global-to-local, align 4
  %v2_13a20 = add i32 %v1_13a1c, %v1_137d0
  store i32 %v2_13a20, i32* %r0.global-to-local, align 4
  %v2_13a24 = add i32 %v1_13a1c, -4
  store i32 %v2_13a24, i32* %r2.global-to-local, align 4
  %v4_13a24 = sub i32 3, %v1_13a1c
  %v5_13a24 = and i32 %v4_13a24, %v1_13a1c
  %v6_13a24 = icmp slt i32 %v5_13a24, 0
  store i1 %v6_13a24, i1* %cpsr_v.global-to-local, align 1
  %v7_13a24 = icmp slt i32 %v2_13a24, 0
  store i1 %v7_13a24, i1* %cpsr_n.global-to-local, align 1
  %v8_13a24 = icmp eq i32 %v1_13a1c, 4
  store i1 %v8_13a24, i1* %cpsr_z.global-to-local, align 1
  %v5_13a28 = icmp slt i32 %v1_13a1c, 4
  br i1 %v5_13a28, label %bb141, label %dec_label_pc_13a2c

dec_label_pc_13a2c:                               ; preds = %dec_label_pc_13a1c
  %v1_13a2c = urem i32 %v2_13a20, 4
  store i32 %v1_13a2c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13a2c = icmp eq i32 %v1_13a2c, 0
  store i1 %v2_13a2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13a2c, label %dec_label_pc_13a34, label %dec_label_pc_13ad4

dec_label_pc_13a34:                               ; preds = %dec_label_pc_13a2c
  %v1_13a34 = urem i32 %v2_13a1c, 4
  store i32 %v1_13a34, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13a34 = icmp eq i32 %v1_13a34, 0
  store i1 %v2_13a34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13a34, label %dec_label_pc_13a3c, label %dec_label_pc_13b00

dec_label_pc_13a3c:                               ; preds = %dec_label_pc_13a34, %dec_label_pc_13af8
  %v0_13a5448 = phi i32 [ %v2_13a20, %dec_label_pc_13a34 ], [ %v0_13b4831, %dec_label_pc_13af8 ]
  %v0_13a5047 = phi i32 [ %v2_13a1c, %dec_label_pc_13a34 ], [ %v0_13af8, %dec_label_pc_13af8 ]
  %v0_13a3c = phi i32 [ %v2_13a24, %dec_label_pc_13a34 ], [ %v2_13af0, %dec_label_pc_13af8 ]
  %v2_13a3c = add i32 %v0_13a3c, -8
  store i32 %v2_13a3c, i32* %r2.global-to-local, align 4
  %v4_13a3c = sub i32 7, %v0_13a3c
  %v5_13a3c = and i32 %v4_13a3c, %v0_13a3c
  %v6_13a3c = icmp slt i32 %v5_13a3c, 0
  store i1 %v6_13a3c, i1* %cpsr_v.global-to-local, align 1
  %v7_13a3c = icmp slt i32 %v2_13a3c, 0
  store i1 %v7_13a3c, i1* %cpsr_n.global-to-local, align 1
  %v8_13a3c = icmp eq i32 %v0_13a3c, 8
  store i1 %v8_13a3c, i1* %cpsr_z.global-to-local, align 1
  %v5_13a40 = icmp slt i32 %v0_13a3c, 8
  br i1 %v5_13a40, label %dec_label_pc_13a8c, label %dec_label_pc_13a44

dec_label_pc_13a44:                               ; preds = %dec_label_pc_13a3c
  %v3_13a44 = load i32, i32* @r4, align 4
  store i32 %v3_13a44, i32* %stack_var_-8, align 4
  %v6_13a44 = load i32, i32* @lr, align 4
  %v2_13a48 = add i32 %v0_13a3c, -28
  store i32 %v2_13a48, i32* %r2.global-to-local, align 4
  %v4_13a48 = sub i32 27, %v0_13a3c
  %v5_13a48 = and i32 %v4_13a48, %v2_13a3c
  %v6_13a48 = icmp slt i32 %v5_13a48, 0
  store i1 %v6_13a48, i1* %cpsr_v.global-to-local, align 1
  %v7_13a48 = icmp slt i32 %v2_13a48, 0
  store i1 %v7_13a48, i1* %cpsr_n.global-to-local, align 1
  %v8_13a48 = icmp eq i32 %v2_13a3c, 20
  store i1 %v8_13a48, i1* %cpsr_z.global-to-local, align 1
  %v5_13a4c = icmp slt i32 %v2_13a3c, 20
  br i1 %v5_13a4c, label %dec_label_pc_13a68, label %dec_label_pc_13a50

dec_label_pc_13a50:                               ; preds = %dec_label_pc_13a44, %dec_label_pc_13a50.dec_label_pc_13a50_crit_edge
  %v0_13a54 = phi i32 [ %v1_13a5c, %dec_label_pc_13a50.dec_label_pc_13a50_crit_edge ], [ %v0_13a5448, %dec_label_pc_13a44 ]
  %v0_13a50 = phi i32 [ %v0_13a50.pre, %dec_label_pc_13a50.dec_label_pc_13a50_crit_edge ], [ %v0_13a5047, %dec_label_pc_13a44 ]
  %v1_13a50 = add i32 %v0_13a50, -4
  %v2_13a50 = inttoptr i32 %v1_13a50 to i32*
  %v3_13a50 = load i32, i32* %v2_13a50, align 4
  store i32 %v3_13a50, i32* %r3.global-to-local, align 4
  %v4_13a50 = add i32 %v0_13a50, -8
  %v5_13a50 = inttoptr i32 %v4_13a50 to i32*
  %v6_13a50 = load i32, i32* %v5_13a50, align 4
  store i32 %v6_13a50, i32* %r4.global-to-local, align 4
  %v7_13a50 = add i32 %v0_13a50, -12
  %v8_13a50 = inttoptr i32 %v7_13a50 to i32*
  %v9_13a50 = load i32, i32* %v8_13a50, align 4
  store i32 %v9_13a50, i32* %ip.global-to-local, align 4
  %v10_13a50 = add i32 %v0_13a50, -16
  %v11_13a50 = inttoptr i32 %v10_13a50 to i32*
  %v12_13a50 = load i32, i32* %v11_13a50, align 4
  store i32 %v12_13a50, i32* %lr.global-to-local, align 4
  store i32 %v10_13a50, i32* %r1.global-to-local, align 4
  %v1_13a54 = add i32 %v0_13a54, -16
  %v2_13a54 = inttoptr i32 %v1_13a54 to i32*
  store i32 %v3_13a50, i32* %v2_13a54, align 4
  %v4_13a54 = add i32 %v0_13a54, -12
  %v5_13a54 = inttoptr i32 %v4_13a54 to i32*
  %v6_13a54 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_13a54, i32* %v5_13a54, align 4
  %v7_13a54 = add i32 %v0_13a54, -8
  %v8_13a54 = inttoptr i32 %v7_13a54 to i32*
  %v9_13a54 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_13a54, i32* %v8_13a54, align 4
  %v10_13a54 = add i32 %v0_13a54, -4
  %v11_13a54 = inttoptr i32 %v10_13a54 to i32*
  %v12_13a54 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13a54, i32* %v11_13a54, align 4
  store i32 %v1_13a54, i32* %r0.global-to-local, align 4
  %v0_13a58 = load i32, i32* %r1.global-to-local, align 4
  %v1_13a58 = add i32 %v0_13a58, -4
  %v2_13a58 = inttoptr i32 %v1_13a58 to i32*
  %v3_13a58 = load i32, i32* %v2_13a58, align 4
  store i32 %v3_13a58, i32* %r3.global-to-local, align 4
  %v4_13a58 = add i32 %v0_13a58, -8
  %v5_13a58 = inttoptr i32 %v4_13a58 to i32*
  %v6_13a58 = load i32, i32* %v5_13a58, align 4
  store i32 %v6_13a58, i32* %r4.global-to-local, align 4
  %v7_13a58 = add i32 %v0_13a58, -12
  %v8_13a58 = inttoptr i32 %v7_13a58 to i32*
  %v9_13a58 = load i32, i32* %v8_13a58, align 4
  store i32 %v9_13a58, i32* @ip, align 4
  %v10_13a58 = add i32 %v0_13a58, -16
  %v11_13a58 = inttoptr i32 %v10_13a58 to i32*
  %v12_13a58 = load i32, i32* %v11_13a58, align 4
  store i32 %v12_13a58, i32* %lr.global-to-local, align 4
  store i32 %v10_13a58, i32* %r1.global-to-local, align 4
  %v1_13a5c = add i32 %v0_13a54, -32
  %v2_13a5c = inttoptr i32 %v1_13a5c to i32*
  store i32 %v3_13a58, i32* %v2_13a5c, align 4
  %v4_13a5c = add i32 %v0_13a54, -28
  %v5_13a5c = inttoptr i32 %v4_13a5c to i32*
  %v6_13a5c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_13a5c, i32* %v5_13a5c, align 4
  %v7_13a5c = add i32 %v0_13a54, -24
  %v8_13a5c = inttoptr i32 %v7_13a5c to i32*
  %v9_13a5c = load i32, i32* @ip, align 4
  store i32 %v9_13a5c, i32* %v8_13a5c, align 4
  %v10_13a5c = add i32 %v0_13a54, -20
  %v11_13a5c = inttoptr i32 %v10_13a5c to i32*
  %v12_13a5c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13a5c, i32* %v11_13a5c, align 4
  store i32 %v1_13a5c, i32* %r0.global-to-local, align 4
  %v0_13a60 = load i32, i32* %r2.global-to-local, align 4
  %v2_13a60 = add i32 %v0_13a60, -32
  store i32 %v2_13a60, i32* %r2.global-to-local, align 4
  %v6_13a64 = icmp slt i32 %v0_13a60, 32
  br i1 %v6_13a64, label %dec_label_pc_13a68.loopexit, label %dec_label_pc_13a50.dec_label_pc_13a50_crit_edge

dec_label_pc_13a50.dec_label_pc_13a50_crit_edge:  ; preds = %dec_label_pc_13a50
  %v0_13a50.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13a50

dec_label_pc_13a68.loopexit:                      ; preds = %dec_label_pc_13a50
  %v4_13a60 = sub i32 31, %v0_13a60
  %v5_13a60 = and i32 %v4_13a60, %v0_13a60
  %v6_13a60 = icmp slt i32 %v5_13a60, 0
  %v7_13a60 = icmp slt i32 %v2_13a60, 0
  store i1 %v6_13a60, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13a60, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13a68

dec_label_pc_13a68:                               ; preds = %dec_label_pc_13a68.loopexit, %dec_label_pc_13a44
  %v6_13a70 = phi i32 [ %v1_13a5c, %dec_label_pc_13a68.loopexit ], [ %v0_13a5448, %dec_label_pc_13a44 ]
  %v0_13a78.pr = phi i32 [ %v2_13a60, %dec_label_pc_13a68.loopexit ], [ %v2_13a48, %dec_label_pc_13a44 ]
  %v4_13a68 = add i32 %v0_13a78.pr, 16
  %v6_13a68 = sub i32 0, %v0_13a78.pr
  %v7_13a68 = and i32 %v4_13a68, %v6_13a68
  %v8_13a68 = icmp slt i32 %v7_13a68, 0
  store i1 %v8_13a68, i1* %cpsr_v.global-to-local, align 1
  %v9_13a68 = icmp slt i32 %v4_13a68, 0
  store i1 %v9_13a68, i1* %cpsr_n.global-to-local, align 1
  %v10_13a68 = icmp eq i32 %v4_13a68, 0
  store i1 %v10_13a68, i1* %cpsr_z.global-to-local, align 1
  %v5_13a6c = icmp slt i32 %v0_13a78.pr, -16
  br i1 %v5_13a6c, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_13a68
  %v6_13a6c = load i32, i32* %r1.global-to-local, align 4
  %v7_13a6c = add i32 %v6_13a6c, -4
  %v8_13a6c = inttoptr i32 %v7_13a6c to i32*
  %v9_13a6c = load i32, i32* %v8_13a6c, align 4
  store i32 %v9_13a6c, i32* %r3.global-to-local, align 4
  %v10_13a6c = add i32 %v6_13a6c, -8
  %v11_13a6c = inttoptr i32 %v10_13a6c to i32*
  %v12_13a6c = load i32, i32* %v11_13a6c, align 4
  store i32 %v12_13a6c, i32* %r4.global-to-local, align 4
  %v13_13a6c = add i32 %v6_13a6c, -12
  %v14_13a6c = inttoptr i32 %v13_13a6c to i32*
  %v15_13a6c = load i32, i32* %v14_13a6c, align 4
  store i32 %v15_13a6c, i32* @ip, align 4
  %v16_13a6c = add i32 %v6_13a6c, -16
  %v17_13a6c = inttoptr i32 %v16_13a6c to i32*
  %v18_13a6c = load i32, i32* %v17_13a6c, align 4
  store i32 %v18_13a6c, i32* %lr.global-to-local, align 4
  store i32 %v16_13a6c, i32* %r1.global-to-local, align 4
  %v7_13a70 = add i32 %v6_13a70, -16
  %v8_13a70 = inttoptr i32 %v7_13a70 to i32*
  store i32 %v9_13a6c, i32* %v8_13a70, align 4
  %v10_13a70 = add i32 %v6_13a70, -12
  %v11_13a70 = inttoptr i32 %v10_13a70 to i32*
  %v12_13a70 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_13a70, i32* %v11_13a70, align 4
  %v13_13a70 = add i32 %v6_13a70, -8
  %v14_13a70 = inttoptr i32 %v13_13a70 to i32*
  %v15_13a70 = load i32, i32* @ip, align 4
  store i32 %v15_13a70, i32* %v14_13a70, align 4
  %v16_13a70 = add i32 %v6_13a70, -4
  %v17_13a70 = inttoptr i32 %v16_13a70 to i32*
  %v18_13a70 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_13a70, i32* %v17_13a70, align 4
  store i32 %v7_13a70, i32* %r0.global-to-local, align 4
  %v6_13a74 = load i32, i32* %r2.global-to-local, align 4
  %v7_13a74 = add i32 %v6_13a74, -16
  store i32 %v7_13a74, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_13a68, %bb138
  %v6_13a80 = phi i32 [ %v7_13a70, %bb138 ], [ %v6_13a70, %dec_label_pc_13a68 ]
  %v0_13a78 = phi i32 [ %v7_13a74, %bb138 ], [ %v0_13a78.pr, %dec_label_pc_13a68 ]
  %v4_13a78 = add i32 %v0_13a78, 20
  store i32 %v4_13a78, i32* %r2.global-to-local, align 4
  %v6_13a78 = sub i32 0, %v0_13a78
  %v7_13a78 = and i32 %v4_13a78, %v6_13a78
  %v8_13a78 = icmp slt i32 %v7_13a78, 0
  store i1 %v8_13a78, i1* %cpsr_v.global-to-local, align 1
  %v9_13a78 = icmp slt i32 %v4_13a78, 0
  store i1 %v9_13a78, i1* %cpsr_n.global-to-local, align 1
  %v10_13a78 = icmp eq i32 %v4_13a78, 0
  store i1 %v10_13a78, i1* %cpsr_z.global-to-local, align 1
  %v5_13a7c = icmp slt i32 %v0_13a78, -20
  br i1 %v5_13a7c, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_13a7c = load i32, i32* %r1.global-to-local, align 4
  %v7_13a7c = add i32 %v6_13a7c, -4
  %v8_13a7c = inttoptr i32 %v7_13a7c to i32*
  %v9_13a7c = load i32, i32* %v8_13a7c, align 4
  store i32 %v9_13a7c, i32* %r3.global-to-local, align 4
  %v10_13a7c = add i32 %v6_13a7c, -8
  %v11_13a7c = inttoptr i32 %v10_13a7c to i32*
  %v12_13a7c = load i32, i32* %v11_13a7c, align 4
  store i32 %v12_13a7c, i32* @ip, align 4
  %v13_13a7c = add i32 %v6_13a7c, -12
  %v14_13a7c = inttoptr i32 %v13_13a7c to i32*
  %v15_13a7c = load i32, i32* %v14_13a7c, align 4
  store i32 %v15_13a7c, i32* %lr.global-to-local, align 4
  store i32 %v13_13a7c, i32* %r1.global-to-local, align 4
  %v7_13a80 = add i32 %v6_13a80, -12
  %v8_13a80 = inttoptr i32 %v7_13a80 to i32*
  store i32 %v9_13a7c, i32* %v8_13a80, align 4
  %v10_13a80 = add i32 %v6_13a80, -8
  %v11_13a80 = inttoptr i32 %v10_13a80 to i32*
  %v12_13a80 = load i32, i32* @ip, align 4
  store i32 %v12_13a80, i32* %v11_13a80, align 4
  %v13_13a80 = add i32 %v6_13a80, -4
  %v14_13a80 = inttoptr i32 %v13_13a80 to i32*
  %v15_13a80 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_13a80, i32* %v14_13a80, align 4
  store i32 %v7_13a80, i32* %r0.global-to-local, align 4
  %v6_13a84 = load i32, i32* %r2.global-to-local, align 4
  %v7_13a84 = add i32 %v6_13a84, -12
  store i32 %v7_13a84, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_13aa456 = phi i32 [ %v6_13a80, %.thread13 ], [ %v7_13a80, %bb139 ]
  %v0_13a8c54 = phi i32 [ %v4_13a78, %.thread13 ], [ %v7_13a84, %bb139 ]
  %v2_13a88 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13a88, i32* @r4, align 4
  store i32 %v6_13a44, i32* @lr, align 4
  br label %dec_label_pc_13a8c

dec_label_pc_13a8c:                               ; preds = %dec_label_pc_13a3c, %.thread15
  %v7_13a9c = phi i32 [ %v0_13a5448, %dec_label_pc_13a3c ], [ %v6_13aa456, %.thread15 ]
  %v0_13a8c = phi i32 [ %v2_13a3c, %dec_label_pc_13a3c ], [ %v0_13a8c54, %.thread15 ]
  %v2_13a8c = add i32 %v0_13a8c, 8
  store i32 %v2_13a8c, i32* %r2.global-to-local, align 4
  %v4_13a8c = sub i32 0, %v0_13a8c
  %v5_13a8c = and i32 %v2_13a8c, %v4_13a8c
  %v6_13a8c = icmp slt i32 %v5_13a8c, 0
  store i1 %v6_13a8c, i1* %cpsr_v.global-to-local, align 1
  %v7_13a8c = icmp slt i32 %v2_13a8c, 0
  store i1 %v7_13a8c, i1* %cpsr_n.global-to-local, align 1
  %v8_13a8c = icmp eq i32 %v2_13a8c, 0
  store i1 %v8_13a8c, i1* %cpsr_z.global-to-local, align 1
  %v5_13a90 = icmp slt i32 %v0_13a8c, -8
  br i1 %v5_13a90, label %bb141, label %dec_label_pc_13a94

dec_label_pc_13a94:                               ; preds = %dec_label_pc_13a8c
  %v6_13a94 = add i32 %v0_13a8c, 4
  store i32 %v6_13a94, i32* %r2.global-to-local, align 4
  %v8_13a94 = sub i32 -5, %v0_13a8c
  %v9_13a94 = and i32 %v8_13a94, %v2_13a8c
  %v10_13a94 = icmp slt i32 %v9_13a94, 0
  store i1 %v10_13a94, i1* %cpsr_v.global-to-local, align 1
  %v11_13a94 = icmp slt i32 %v6_13a94, 0
  store i1 %v11_13a94, i1* %cpsr_n.global-to-local, align 1
  %v12_13a94 = icmp eq i32 %v2_13a8c, 4
  store i1 %v12_13a94, i1* %cpsr_z.global-to-local, align 1
  %v5_13a98 = icmp slt i32 %v2_13a8c, 4
  %v6_13a98 = load i32, i32* %r1.global-to-local, align 4
  %v7_13a98 = add i32 %v6_13a98, -4
  %v8_13a98 = inttoptr i32 %v7_13a98 to i32*
  %v9_13a98 = load i32, i32* %v8_13a98, align 4
  store i32 %v9_13a98, i32* %r3.global-to-local, align 4
  br i1 %v5_13a98, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_13a94
  store i32 %v7_13a98, i32* %r1.global-to-local, align 4
  %v8_13a9c = add i32 %v7_13a9c, -4
  %v9_13a9c = inttoptr i32 %v8_13a9c to i32*
  store i32 %v9_13a98, i32* %v9_13a9c, align 4
  %v10_13a9c = load i32, i32* %r0.global-to-local, align 4
  %v11_13a9c = add i32 %v10_13a9c, -4
  store i32 %v11_13a9c, i32* %r0.global-to-local, align 4
  %v0_13aac.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_13a94
  %v10_13aa0 = add i32 %v6_13a98, -8
  %v11_13aa0 = inttoptr i32 %v10_13aa0 to i32*
  %v12_13aa0 = load i32, i32* %v11_13aa0, align 4
  store i32 %v12_13aa0, i32* @ip, align 4
  store i32 %v10_13aa0, i32* %r1.global-to-local, align 4
  %v7_13aa4 = add i32 %v7_13a9c, -8
  %v8_13aa4 = inttoptr i32 %v7_13aa4 to i32*
  store i32 %v9_13a98, i32* %v8_13aa4, align 4
  %v10_13aa4 = add i32 %v7_13a9c, -4
  %v11_13aa4 = inttoptr i32 %v10_13aa4 to i32*
  %v12_13aa4 = load i32, i32* @ip, align 4
  store i32 %v12_13aa4, i32* %v11_13aa4, align 4
  store i32 %v7_13aa4, i32* %r0.global-to-local, align 4
  %v6_13aa8 = load i32, i32* %r2.global-to-local, align 4
  %v7_13aa8 = add i32 %v6_13aa8, -4
  store i32 %v7_13aa8, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_13a8c, %dec_label_pc_13a1c, %dec_label_pc_13c50, %dec_label_pc_13be4, %dec_label_pc_13b78, %bb140
  %v2_13ab0 = phi i32 [ %v11_13a9c, %.thread19 ], [ %v0_13b4831, %.thread25 ], [ %v7_13a9c, %dec_label_pc_13a8c ], [ %v2_13a20, %dec_label_pc_13a1c ], [ %v2_13abc64, %dec_label_pc_13c50 ], [ %v2_13abc63, %dec_label_pc_13be4 ], [ %v2_13abc62, %dec_label_pc_13b78 ], [ %v7_13aa4, %bb140 ]
  %v0_13aac = phi i32 [ %v0_13aac.pre, %.thread19 ], [ %v2_13af0, %.thread25 ], [ %v2_13a8c, %dec_label_pc_13a8c ], [ %v2_13a24, %dec_label_pc_13a1c ], [ %v0_13aac60, %dec_label_pc_13c50 ], [ %v0_13aac59, %dec_label_pc_13be4 ], [ %v0_13aac58, %dec_label_pc_13b78 ], [ %v7_13aa8, %bb140 ]
  %v1_13aac = add i32 %v0_13aac, 4
  store i32 %v1_13aac, i32* %r2.global-to-local, align 4
  %v3_13aac = sub i32 0, %v0_13aac
  %v4_13aac = and i32 %v1_13aac, %v3_13aac
  %v5_13aac = icmp slt i32 %v4_13aac, 0
  store i1 %v5_13aac, i1* %cpsr_v.global-to-local, align 1
  %v6_13aac = icmp slt i32 %v1_13aac, 0
  store i1 %v6_13aac, i1* %cpsr_n.global-to-local, align 1
  %v7_13aac = icmp eq i32 %v1_13aac, 0
  store i1 %v7_13aac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13aac, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_13ab4 = add i32 %v0_13aac, 2
  %v3_13ab4 = sub i32 -3, %v0_13aac
  %v4_13ab4 = and i32 %v3_13ab4, %v1_13aac
  %v5_13ab4 = icmp slt i32 %v4_13ab4, 0
  store i1 %v5_13ab4, i1* %cpsr_v.global-to-local, align 1
  %v6_13ab4 = icmp slt i32 %v1_13ab4, 0
  store i1 %v6_13ab4, i1* %cpsr_n.global-to-local, align 1
  %v7_13ab4 = icmp eq i32 %v1_13aac, 2
  store i1 %v7_13ab4, i1* %cpsr_z.global-to-local, align 1
  %v0_13ab8 = load i32, i32* %r1.global-to-local, align 4
  %v1_13ab8 = add i32 %v0_13ab8, -1
  %v2_13ab8 = inttoptr i32 %v1_13ab8 to i8*
  %v3_13ab8 = load i8, i8* %v2_13ab8, align 1
  %v4_13ab8 = zext i8 %v3_13ab8 to i32
  store i32 %v4_13ab8, i32* %r3.global-to-local, align 4
  store i32 %v1_13ab8, i32* %r1.global-to-local, align 4
  %v3_13abc = add i32 %v2_13ab0, -1
  %v4_13abc = inttoptr i32 %v3_13abc to i8*
  store i8 %v3_13ab8, i8* %v4_13abc, align 1
  %v5_13abc = load i32, i32* %r0.global-to-local, align 4
  %v6_13abc = add i32 %v5_13abc, -1
  store i32 %v6_13abc, i32* %r0.global-to-local, align 4
  %v0_13ac0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_13ac0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_13ac0 = xor i1 %v0_13ac0, %v1_13ac0
  br i1 %v2_13ac0, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_13ac0 = load i32, i32* %r1.global-to-local, align 4
  %v4_13ac0 = add i32 %v3_13ac0, -1
  %v5_13ac0 = inttoptr i32 %v4_13ac0 to i8*
  %v6_13ac0 = load i8, i8* %v5_13ac0, align 1
  %v7_13ac0 = zext i8 %v6_13ac0 to i32
  store i32 %v7_13ac0, i32* %r3.global-to-local, align 4
  store i32 %v4_13ac0, i32* %r1.global-to-local, align 4
  %v6_13ac4 = add i32 %v5_13abc, -2
  %v7_13ac4 = inttoptr i32 %v6_13ac4 to i8*
  store i8 %v6_13ac0, i8* %v7_13ac4, align 1
  %v8_13ac4 = load i32, i32* %r0.global-to-local, align 4
  %v9_13ac4 = add i32 %v8_13ac4, -1
  store i32 %v9_13ac4, i32* %r0.global-to-local, align 4
  %v1_13ac8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_13ac8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_13acc = phi i32 [ %v9_13ac4, %bb143 ], [ %v6_13abc, %bb142 ]
  %v2_13acc = phi i1 [ %v2_13ac8.pre, %bb143 ], [ %v1_13ac0, %bb142 ]
  %v1_13acc = phi i1 [ %v1_13ac8.pre, %bb143 ], [ %v0_13ac0, %bb142 ]
  %v0_13ac8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_13ac8 = xor i1 %v2_13acc, %v1_13acc
  %v4_13ac8 = or i1 %v0_13ac8, %v3_13ac8
  br i1 %v4_13ac8, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_13ac8 = load i32, i32* %r1.global-to-local, align 4
  %v6_13ac8 = add i32 %v5_13ac8, -1
  %v7_13ac8 = inttoptr i32 %v6_13ac8 to i8*
  %v8_13ac8 = load i8, i8* %v7_13ac8, align 1
  %v9_13ac8 = zext i8 %v8_13ac8 to i32
  store i32 %v9_13ac8, i32* %r3.global-to-local, align 4
  store i32 %v6_13ac8, i32* %r1.global-to-local, align 4
  %v8_13acc = add i32 %v7_13acc, -1
  %v9_13acc = inttoptr i32 %v8_13acc to i8*
  store i8 %v8_13ac8, i8* %v9_13acc, align 1
  %v10_13acc = load i32, i32* %r0.global-to-local, align 4
  %v11_13acc = add i32 %v10_13acc, -1
  store i32 %v11_13acc, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_13ad4:                               ; preds = %dec_label_pc_13a2c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_13ad4 = icmp eq i32 %v1_13a2c, 1
  store i1 %v8_13ad4, i1* %cpsr_n.global-to-local, align 1
  %v9_13ad4 = icmp eq i32 %v1_13a2c, 2
  store i1 %v9_13ad4, i1* %cpsr_z.global-to-local, align 1
  %v1_13ad8 = add i32 %v2_13a1c, -1
  %v2_13ad8 = inttoptr i32 %v1_13ad8 to i8*
  %v3_13ad8 = load i8, i8* %v2_13ad8, align 1
  %v4_13ad8 = zext i8 %v3_13ad8 to i32
  store i32 %v4_13ad8, i32* %r3.global-to-local, align 4
  store i32 %v1_13ad8, i32* %r1.global-to-local, align 4
  %v3_13adc = add i32 %v2_13a20, -1
  %v4_13adc = inttoptr i32 %v3_13adc to i8*
  store i8 %v3_13ad8, i8* %v4_13adc, align 1
  %v5_13adc = load i32, i32* %r0.global-to-local, align 4
  %v6_13adc = add i32 %v5_13adc, -1
  store i32 %v6_13adc, i32* %r0.global-to-local, align 4
  br i1 %v8_13ad4, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_13ad4
  %v6_13ae0 = load i32, i32* %r1.global-to-local, align 4
  %v7_13ae0 = add i32 %v6_13ae0, -1
  %v8_13ae0 = inttoptr i32 %v7_13ae0 to i8*
  %v9_13ae0 = load i8, i8* %v8_13ae0, align 1
  %v10_13ae0 = zext i8 %v9_13ae0 to i32
  store i32 %v10_13ae0, i32* %r3.global-to-local, align 4
  store i32 %v7_13ae0, i32* %r1.global-to-local, align 4
  %v9_13ae4 = add i32 %v5_13adc, -2
  %v10_13ae4 = inttoptr i32 %v9_13ae4 to i8*
  store i8 %v9_13ae0, i8* %v10_13ae4, align 1
  %v11_13ae4 = load i32, i32* %r0.global-to-local, align 4
  %v12_13ae4 = add i32 %v11_13ae4, -1
  store i32 %v12_13ae4, i32* %r0.global-to-local, align 4
  br i1 %v9_13ad4, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_13ae8 = load i32, i32* %r1.global-to-local, align 4
  %v9_13ae8 = add i32 %v8_13ae8, -1
  %v10_13ae8 = inttoptr i32 %v9_13ae8 to i8*
  %v11_13ae8 = load i8, i8* %v10_13ae8, align 1
  %v12_13ae8 = zext i8 %v11_13ae8 to i32
  store i32 %v12_13ae8, i32* %r3.global-to-local, align 4
  store i32 %v9_13ae8, i32* %r1.global-to-local, align 4
  %v11_13aec = add i32 %v11_13ae4, -2
  %v12_13aec = inttoptr i32 %v11_13aec to i8*
  store i8 %v11_13ae8, i8* %v12_13aec, align 1
  %v13_13aec = load i32, i32* %r0.global-to-local, align 4
  %v14_13aec = add i32 %v13_13aec, -1
  store i32 %v14_13aec, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_13ad4, %bb146
  %v0_13b4831 = phi i32 [ %v12_13ae4, %bb145 ], [ %v6_13adc, %dec_label_pc_13ad4 ], [ %v14_13aec, %bb146 ]
  %v0_13af0 = load i32, i32* %r2.global-to-local, align 4
  %v1_13af0 = load i32, i32* @ip, align 4
  %v2_13af0 = sub i32 %v0_13af0, %v1_13af0
  store i32 %v2_13af0, i32* %r2.global-to-local, align 4
  %v4_13af0 = xor i32 %v1_13af0, %v0_13af0
  %v5_13af0 = xor i32 %v2_13af0, %v0_13af0
  %v6_13af0 = and i32 %v5_13af0, %v4_13af0
  %v7_13af0 = icmp slt i32 %v6_13af0, 0
  store i1 %v7_13af0, i1* %cpsr_v.global-to-local, align 1
  %v8_13af0 = icmp slt i32 %v2_13af0, 0
  store i1 %v8_13af0, i1* %cpsr_n.global-to-local, align 1
  %v9_13af0 = icmp eq i32 %v0_13af0, %v1_13af0
  store i1 %v9_13af0, i1* %cpsr_z.global-to-local, align 1
  %v5_13af4 = icmp slt i32 %v0_13af0, %v1_13af0
  br i1 %v5_13af4, label %bb141, label %dec_label_pc_13af8

dec_label_pc_13af8:                               ; preds = %.thread25
  %v0_13af8 = load i32, i32* %r1.global-to-local, align 4
  %v1_13af8 = urem i32 %v0_13af8, 4
  store i32 %v1_13af8, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13af8 = icmp eq i32 %v1_13af8, 0
  store i1 %v2_13af8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13af8, label %dec_label_pc_13a3c, label %dec_label_pc_13b00

dec_label_pc_13b00:                               ; preds = %dec_label_pc_13a34, %dec_label_pc_13af8
  %v0_13b4830 = phi i32 [ %v2_13a20, %dec_label_pc_13a34 ], [ %v0_13b4831, %dec_label_pc_13af8 ]
  %v0_13bf4 = phi i32 [ %v2_13a24, %dec_label_pc_13a34 ], [ %v2_13af0, %dec_label_pc_13af8 ]
  %v0_13b00 = phi i32 [ %v2_13a1c, %dec_label_pc_13a34 ], [ %v0_13af8, %dec_label_pc_13af8 ]
  %v0_13b08 = phi i32 [ %v1_13a34, %dec_label_pc_13a34 ], [ %v1_13af8, %dec_label_pc_13af8 ]
  %v1_13b00 = and i32 %v0_13b00, -4
  store i32 %v1_13b00, i32* %r1.global-to-local, align 4
  %v1_13b04 = inttoptr i32 %v1_13b00 to i32*
  %v2_13b04 = load i32, i32* %v1_13b04, align 4
  store i32 %v2_13b04, i32* %r3.global-to-local, align 4
  %v7_13b08 = icmp ult i32 %v0_13b08, 2
  %v2_13bec = add i32 %v0_13bf4, -12
  %v4_13bec = sub i32 11, %v0_13bf4
  %v5_13bec = and i32 %v4_13bec, %v0_13bf4
  %v6_13bec = icmp slt i32 %v5_13bec, 0
  store i1 %v6_13bec, i1* %cpsr_v.global-to-local, align 1
  %v7_13bec = icmp slt i32 %v2_13bec, 0
  store i1 %v7_13bec, i1* %cpsr_n.global-to-local, align 1
  %v8_13bec = icmp eq i32 %v0_13bf4, 12
  store i1 %v8_13bec, i1* %cpsr_z.global-to-local, align 1
  %v5_13bf0 = icmp slt i32 %v0_13bf4, 12
  br i1 %v7_13b08, label %dec_label_pc_13bec, label %dec_label_pc_13b10

dec_label_pc_13b10:                               ; preds = %dec_label_pc_13b00
  %v8_13b08 = icmp eq i32 %v0_13b08, 2
  br i1 %v8_13b08, label %dec_label_pc_13b80, label %dec_label_pc_13b14

dec_label_pc_13b14:                               ; preds = %dec_label_pc_13b10
  br i1 %v5_13bf0, label %dec_label_pc_13b60, label %dec_label_pc_13b1c

dec_label_pc_13b1c:                               ; preds = %dec_label_pc_13b14
  store i32 %v2_13bec, i32* %r2.global-to-local, align 4
  %v3_13b20 = load i32, i32* @r4, align 4
  store i32 %v3_13b20, i32* %stack_var_-12, align 4
  %v6_13b20 = load i32, i32* @r5, align 4
  store i32 %v6_13b20, i32* %stack_var_-8, align 4
  %v9_13b20 = load i32, i32* @lr, align 4
  br label %dec_label_pc_13b24

dec_label_pc_13b24:                               ; preds = %dec_label_pc_13b24.dec_label_pc_13b24_crit_edge, %dec_label_pc_13b1c
  %v0_13b48 = phi i32 [ %v1_13b48, %dec_label_pc_13b24.dec_label_pc_13b24_crit_edge ], [ %v0_13b4830, %dec_label_pc_13b1c ]
  %v0_13b28 = phi i32 [ %v0_13b28.pre, %dec_label_pc_13b24.dec_label_pc_13b24_crit_edge ], [ %v1_13b00, %dec_label_pc_13b1c ]
  %v0_13b24 = phi i32 [ %v0_13b24.pre, %dec_label_pc_13b24.dec_label_pc_13b24_crit_edge ], [ %v2_13b04, %dec_label_pc_13b1c ]
  %v3_13b24 = mul i32 %v0_13b24, 256
  store i32 %v3_13b24, i32* %lr.global-to-local, align 4
  %v1_13b28 = add i32 %v0_13b28, -4
  %v2_13b28 = inttoptr i32 %v1_13b28 to i32*
  %v3_13b28 = load i32, i32* %v2_13b28, align 4
  store i32 %v3_13b28, i32* %r3.global-to-local, align 4
  %v4_13b28 = add i32 %v0_13b28, -8
  %v5_13b28 = inttoptr i32 %v4_13b28 to i32*
  %v6_13b28 = load i32, i32* %v5_13b28, align 4
  store i32 %v6_13b28, i32* %r4.global-to-local, align 4
  %v7_13b28 = add i32 %v0_13b28, -12
  %v8_13b28 = inttoptr i32 %v7_13b28 to i32*
  %v9_13b28 = load i32, i32* %v8_13b28, align 4
  store i32 %v9_13b28, i32* %r5.global-to-local, align 4
  %v10_13b28 = add i32 %v0_13b28, -16
  %v11_13b28 = inttoptr i32 %v10_13b28 to i32*
  %v12_13b28 = load i32, i32* %v11_13b28, align 4
  store i32 %v10_13b28, i32* %r1.global-to-local, align 4
  %v4_13b2c = udiv i32 %v12_13b28, 16777216
  %v5_13b2c = or i32 %v4_13b2c, %v3_13b24
  store i32 %v5_13b2c, i32* %lr.global-to-local, align 4
  %v3_13b30 = mul i32 %v12_13b28, 256
  %v4_13b34 = udiv i32 %v9_13b28, 16777216
  %v5_13b34 = or i32 %v3_13b30, %v4_13b34
  store i32 %v5_13b34, i32* @ip, align 4
  %v3_13b38 = mul i32 %v9_13b28, 256
  %v4_13b3c = udiv i32 %v6_13b28, 16777216
  %v5_13b3c = or i32 %v3_13b38, %v4_13b3c
  store i32 %v5_13b3c, i32* %r5.global-to-local, align 4
  %v3_13b40 = mul i32 %v6_13b28, 256
  %v4_13b44 = udiv i32 %v3_13b28, 16777216
  %v5_13b44 = or i32 %v3_13b40, %v4_13b44
  store i32 %v5_13b44, i32* %r4.global-to-local, align 4
  %v1_13b48 = add i32 %v0_13b48, -16
  %v2_13b48 = inttoptr i32 %v1_13b48 to i32*
  store i32 %v5_13b44, i32* %v2_13b48, align 4
  %v4_13b48 = add i32 %v0_13b48, -12
  %v5_13b48 = inttoptr i32 %v4_13b48 to i32*
  %v6_13b48 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_13b48, i32* %v5_13b48, align 4
  %v7_13b48 = add i32 %v0_13b48, -8
  %v8_13b48 = inttoptr i32 %v7_13b48 to i32*
  %v9_13b48 = load i32, i32* @ip, align 4
  store i32 %v9_13b48, i32* %v8_13b48, align 4
  %v10_13b48 = add i32 %v0_13b48, -4
  %v11_13b48 = inttoptr i32 %v10_13b48 to i32*
  %v12_13b48 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13b48, i32* %v11_13b48, align 4
  store i32 %v1_13b48, i32* %r0.global-to-local, align 4
  %v0_13b4c = load i32, i32* %r2.global-to-local, align 4
  %v2_13b4c = add i32 %v0_13b4c, -16
  store i32 %v2_13b4c, i32* %r2.global-to-local, align 4
  %v6_13b50 = icmp slt i32 %v0_13b4c, 16
  br i1 %v6_13b50, label %dec_label_pc_13b54, label %dec_label_pc_13b24.dec_label_pc_13b24_crit_edge

dec_label_pc_13b24.dec_label_pc_13b24_crit_edge:  ; preds = %dec_label_pc_13b24
  %v0_13b24.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_13b28.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13b24

dec_label_pc_13b54:                               ; preds = %dec_label_pc_13b24
  %v2_13b54 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13b54, i32* @r4, align 4
  %v5_13b54 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_13b54, i32* @r5, align 4
  store i32 %v9_13b20, i32* @lr, align 4
  %v2_13b58 = add i32 %v0_13b4c, -4
  store i32 %v2_13b58, i32* %r2.global-to-local, align 4
  %v4_13b58 = add i32 %v0_13b4c, 2147483632
  %v5_13b58 = and i32 %v2_13b58, %v4_13b58
  %v6_13b58 = icmp slt i32 %v5_13b58, 0
  store i1 %v6_13b58, i1* %cpsr_v.global-to-local, align 1
  %v7_13b58 = icmp slt i32 %v2_13b58, 0
  store i1 %v7_13b58, i1* %cpsr_n.global-to-local, align 1
  %v8_13b58 = icmp eq i32 %v2_13b58, 0
  store i1 %v8_13b58, i1* %cpsr_z.global-to-local, align 1
  %v5_13b5c = icmp slt i32 %v2_13b4c, -12
  br i1 %v5_13b5c, label %dec_label_pc_13b78, label %dec_label_pc_13b60

dec_label_pc_13b60:                               ; preds = %dec_label_pc_13b54, %dec_label_pc_13b14, %dec_label_pc_13b60
  %v1_13b6c = phi i32 [ %v5_13b6c, %dec_label_pc_13b60 ], [ %v1_13b48, %dec_label_pc_13b54 ], [ %v0_13b4830, %dec_label_pc_13b14 ]
  %v0_13b60 = load i32, i32* %r3.global-to-local, align 4
  %v3_13b60 = mul i32 %v0_13b60, 256
  store i32 %v3_13b60, i32* %ip.global-to-local, align 4
  %v0_13b64 = load i32, i32* %r1.global-to-local, align 4
  %v1_13b64 = add i32 %v0_13b64, -4
  %v2_13b64 = inttoptr i32 %v1_13b64 to i32*
  %v3_13b64 = load i32, i32* %v2_13b64, align 4
  store i32 %v3_13b64, i32* %r3.global-to-local, align 4
  store i32 %v1_13b64, i32* %r1.global-to-local, align 4
  %v4_13b68 = udiv i32 %v3_13b64, 16777216
  %v5_13b68 = or i32 %v4_13b68, %v3_13b60
  store i32 %v5_13b68, i32* @ip, align 4
  %v2_13b6c = add i32 %v1_13b6c, -4
  %v3_13b6c = inttoptr i32 %v2_13b6c to i32*
  store i32 %v5_13b68, i32* %v3_13b6c, align 4
  %v4_13b6c = load i32, i32* %r0.global-to-local, align 4
  %v5_13b6c = add i32 %v4_13b6c, -4
  store i32 %v5_13b6c, i32* %r0.global-to-local, align 4
  %v0_13b70 = load i32, i32* %r2.global-to-local, align 4
  %v2_13b70 = add i32 %v0_13b70, -4
  store i32 %v2_13b70, i32* %r2.global-to-local, align 4
  %v6_13b74 = icmp slt i32 %v0_13b70, 4
  br i1 %v6_13b74, label %dec_label_pc_13b78.loopexit, label %dec_label_pc_13b60

dec_label_pc_13b78.loopexit:                      ; preds = %dec_label_pc_13b60
  %v4_13b70 = sub i32 3, %v0_13b70
  %v5_13b70 = and i32 %v4_13b70, %v0_13b70
  %v6_13b70 = icmp slt i32 %v5_13b70, 0
  %v7_13b70 = icmp slt i32 %v2_13b70, 0
  store i1 %v6_13b70, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13b70, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13b78

dec_label_pc_13b78:                               ; preds = %dec_label_pc_13b78.loopexit, %dec_label_pc_13b54
  %v2_13abc62 = phi i32 [ %v5_13b6c, %dec_label_pc_13b78.loopexit ], [ %v1_13b48, %dec_label_pc_13b54 ]
  %v0_13aac58 = phi i32 [ %v2_13b70, %dec_label_pc_13b78.loopexit ], [ %v2_13b58, %dec_label_pc_13b54 ]
  %v0_13b78 = load i32, i32* %r1.global-to-local, align 4
  %v1_13b78 = add i32 %v0_13b78, 3
  store i32 %v1_13b78, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_13b80:                               ; preds = %dec_label_pc_13b10
  br i1 %v5_13bf0, label %dec_label_pc_13bcc, label %dec_label_pc_13b88

dec_label_pc_13b88:                               ; preds = %dec_label_pc_13b80
  store i32 %v2_13bec, i32* %r2.global-to-local, align 4
  %v3_13b8c = load i32, i32* @r4, align 4
  store i32 %v3_13b8c, i32* %stack_var_-12, align 4
  %v6_13b8c = load i32, i32* @r5, align 4
  store i32 %v6_13b8c, i32* %stack_var_-8, align 4
  %v9_13b8c = load i32, i32* @lr, align 4
  br label %dec_label_pc_13b90

dec_label_pc_13b90:                               ; preds = %dec_label_pc_13b90.dec_label_pc_13b90_crit_edge, %dec_label_pc_13b88
  %v0_13bb4 = phi i32 [ %v1_13bb4, %dec_label_pc_13b90.dec_label_pc_13b90_crit_edge ], [ %v0_13b4830, %dec_label_pc_13b88 ]
  %v0_13b94 = phi i32 [ %v0_13b94.pre, %dec_label_pc_13b90.dec_label_pc_13b90_crit_edge ], [ %v1_13b00, %dec_label_pc_13b88 ]
  %v0_13b90 = phi i32 [ %v0_13b90.pre, %dec_label_pc_13b90.dec_label_pc_13b90_crit_edge ], [ %v2_13b04, %dec_label_pc_13b88 ]
  %v3_13b90 = mul i32 %v0_13b90, 65536
  store i32 %v3_13b90, i32* %lr.global-to-local, align 4
  %v1_13b94 = add i32 %v0_13b94, -4
  %v2_13b94 = inttoptr i32 %v1_13b94 to i32*
  %v3_13b94 = load i32, i32* %v2_13b94, align 4
  store i32 %v3_13b94, i32* %r3.global-to-local, align 4
  %v4_13b94 = add i32 %v0_13b94, -8
  %v5_13b94 = inttoptr i32 %v4_13b94 to i32*
  %v6_13b94 = load i32, i32* %v5_13b94, align 4
  store i32 %v6_13b94, i32* %r4.global-to-local, align 4
  %v7_13b94 = add i32 %v0_13b94, -12
  %v8_13b94 = inttoptr i32 %v7_13b94 to i32*
  %v9_13b94 = load i32, i32* %v8_13b94, align 4
  store i32 %v9_13b94, i32* %r5.global-to-local, align 4
  %v10_13b94 = add i32 %v0_13b94, -16
  %v11_13b94 = inttoptr i32 %v10_13b94 to i32*
  %v12_13b94 = load i32, i32* %v11_13b94, align 4
  store i32 %v10_13b94, i32* %r1.global-to-local, align 4
  %v4_13b98 = udiv i32 %v12_13b94, 65536
  %v5_13b98 = or i32 %v4_13b98, %v3_13b90
  store i32 %v5_13b98, i32* %lr.global-to-local, align 4
  %v3_13b9c = mul i32 %v12_13b94, 65536
  %v4_13ba0 = udiv i32 %v9_13b94, 65536
  %v5_13ba0 = or i32 %v3_13b9c, %v4_13ba0
  store i32 %v5_13ba0, i32* @ip, align 4
  %v3_13ba4 = mul i32 %v9_13b94, 65536
  %v4_13ba8 = udiv i32 %v6_13b94, 65536
  %v5_13ba8 = or i32 %v3_13ba4, %v4_13ba8
  store i32 %v5_13ba8, i32* %r5.global-to-local, align 4
  %v3_13bac = mul i32 %v6_13b94, 65536
  %v4_13bb0 = udiv i32 %v3_13b94, 65536
  %v5_13bb0 = or i32 %v3_13bac, %v4_13bb0
  store i32 %v5_13bb0, i32* %r4.global-to-local, align 4
  %v1_13bb4 = add i32 %v0_13bb4, -16
  %v2_13bb4 = inttoptr i32 %v1_13bb4 to i32*
  store i32 %v5_13bb0, i32* %v2_13bb4, align 4
  %v4_13bb4 = add i32 %v0_13bb4, -12
  %v5_13bb4 = inttoptr i32 %v4_13bb4 to i32*
  %v6_13bb4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_13bb4, i32* %v5_13bb4, align 4
  %v7_13bb4 = add i32 %v0_13bb4, -8
  %v8_13bb4 = inttoptr i32 %v7_13bb4 to i32*
  %v9_13bb4 = load i32, i32* @ip, align 4
  store i32 %v9_13bb4, i32* %v8_13bb4, align 4
  %v10_13bb4 = add i32 %v0_13bb4, -4
  %v11_13bb4 = inttoptr i32 %v10_13bb4 to i32*
  %v12_13bb4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13bb4, i32* %v11_13bb4, align 4
  store i32 %v1_13bb4, i32* %r0.global-to-local, align 4
  %v0_13bb8 = load i32, i32* %r2.global-to-local, align 4
  %v2_13bb8 = add i32 %v0_13bb8, -16
  store i32 %v2_13bb8, i32* %r2.global-to-local, align 4
  %v6_13bbc = icmp slt i32 %v0_13bb8, 16
  br i1 %v6_13bbc, label %dec_label_pc_13bc0, label %dec_label_pc_13b90.dec_label_pc_13b90_crit_edge

dec_label_pc_13b90.dec_label_pc_13b90_crit_edge:  ; preds = %dec_label_pc_13b90
  %v0_13b90.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_13b94.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13b90

dec_label_pc_13bc0:                               ; preds = %dec_label_pc_13b90
  %v2_13bc0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13bc0, i32* @r4, align 4
  %v5_13bc0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_13bc0, i32* @r5, align 4
  store i32 %v9_13b8c, i32* @lr, align 4
  %v2_13bc4 = add i32 %v0_13bb8, -4
  store i32 %v2_13bc4, i32* %r2.global-to-local, align 4
  %v4_13bc4 = add i32 %v0_13bb8, 2147483632
  %v5_13bc4 = and i32 %v2_13bc4, %v4_13bc4
  %v6_13bc4 = icmp slt i32 %v5_13bc4, 0
  store i1 %v6_13bc4, i1* %cpsr_v.global-to-local, align 1
  %v7_13bc4 = icmp slt i32 %v2_13bc4, 0
  store i1 %v7_13bc4, i1* %cpsr_n.global-to-local, align 1
  %v8_13bc4 = icmp eq i32 %v2_13bc4, 0
  store i1 %v8_13bc4, i1* %cpsr_z.global-to-local, align 1
  %v5_13bc8 = icmp slt i32 %v2_13bb8, -12
  br i1 %v5_13bc8, label %dec_label_pc_13be4, label %dec_label_pc_13bcc

dec_label_pc_13bcc:                               ; preds = %dec_label_pc_13bc0, %dec_label_pc_13b80, %dec_label_pc_13bcc
  %v1_13bd8 = phi i32 [ %v5_13bd8, %dec_label_pc_13bcc ], [ %v1_13bb4, %dec_label_pc_13bc0 ], [ %v0_13b4830, %dec_label_pc_13b80 ]
  %v0_13bcc = load i32, i32* %r3.global-to-local, align 4
  %v3_13bcc = mul i32 %v0_13bcc, 65536
  store i32 %v3_13bcc, i32* %ip.global-to-local, align 4
  %v0_13bd0 = load i32, i32* %r1.global-to-local, align 4
  %v1_13bd0 = add i32 %v0_13bd0, -4
  %v2_13bd0 = inttoptr i32 %v1_13bd0 to i32*
  %v3_13bd0 = load i32, i32* %v2_13bd0, align 4
  store i32 %v3_13bd0, i32* %r3.global-to-local, align 4
  store i32 %v1_13bd0, i32* %r1.global-to-local, align 4
  %v4_13bd4 = udiv i32 %v3_13bd0, 65536
  %v5_13bd4 = or i32 %v4_13bd4, %v3_13bcc
  store i32 %v5_13bd4, i32* @ip, align 4
  %v2_13bd8 = add i32 %v1_13bd8, -4
  %v3_13bd8 = inttoptr i32 %v2_13bd8 to i32*
  store i32 %v5_13bd4, i32* %v3_13bd8, align 4
  %v4_13bd8 = load i32, i32* %r0.global-to-local, align 4
  %v5_13bd8 = add i32 %v4_13bd8, -4
  store i32 %v5_13bd8, i32* %r0.global-to-local, align 4
  %v0_13bdc = load i32, i32* %r2.global-to-local, align 4
  %v2_13bdc = add i32 %v0_13bdc, -4
  store i32 %v2_13bdc, i32* %r2.global-to-local, align 4
  %v6_13be0 = icmp slt i32 %v0_13bdc, 4
  br i1 %v6_13be0, label %dec_label_pc_13be4.loopexit, label %dec_label_pc_13bcc

dec_label_pc_13be4.loopexit:                      ; preds = %dec_label_pc_13bcc
  %v4_13bdc = sub i32 3, %v0_13bdc
  %v5_13bdc = and i32 %v4_13bdc, %v0_13bdc
  %v6_13bdc = icmp slt i32 %v5_13bdc, 0
  %v7_13bdc = icmp slt i32 %v2_13bdc, 0
  store i1 %v6_13bdc, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13bdc, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13be4

dec_label_pc_13be4:                               ; preds = %dec_label_pc_13be4.loopexit, %dec_label_pc_13bc0
  %v2_13abc63 = phi i32 [ %v5_13bd8, %dec_label_pc_13be4.loopexit ], [ %v1_13bb4, %dec_label_pc_13bc0 ]
  %v0_13aac59 = phi i32 [ %v2_13bdc, %dec_label_pc_13be4.loopexit ], [ %v2_13bc4, %dec_label_pc_13bc0 ]
  %v0_13be4 = load i32, i32* %r1.global-to-local, align 4
  %v1_13be4 = add i32 %v0_13be4, 2
  store i32 %v1_13be4, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_13bec:                               ; preds = %dec_label_pc_13b00
  br i1 %v5_13bf0, label %dec_label_pc_13c38, label %dec_label_pc_13bf4

dec_label_pc_13bf4:                               ; preds = %dec_label_pc_13bec
  store i32 %v2_13bec, i32* %r2.global-to-local, align 4
  %v3_13bf8 = load i32, i32* @r4, align 4
  store i32 %v3_13bf8, i32* %stack_var_-12, align 4
  %v6_13bf8 = load i32, i32* @r5, align 4
  store i32 %v6_13bf8, i32* %stack_var_-8, align 4
  %v9_13bf8 = load i32, i32* @lr, align 4
  br label %dec_label_pc_13bfc

dec_label_pc_13bfc:                               ; preds = %dec_label_pc_13bfc.dec_label_pc_13bfc_crit_edge, %dec_label_pc_13bf4
  %v0_13c20 = phi i32 [ %v1_13c20, %dec_label_pc_13bfc.dec_label_pc_13bfc_crit_edge ], [ %v0_13b4830, %dec_label_pc_13bf4 ]
  %v0_13c00 = phi i32 [ %v0_13c00.pre, %dec_label_pc_13bfc.dec_label_pc_13bfc_crit_edge ], [ %v1_13b00, %dec_label_pc_13bf4 ]
  %v0_13bfc = phi i32 [ %v0_13bfc.pre, %dec_label_pc_13bfc.dec_label_pc_13bfc_crit_edge ], [ %v2_13b04, %dec_label_pc_13bf4 ]
  %v3_13bfc = mul i32 %v0_13bfc, 16777216
  store i32 %v3_13bfc, i32* %lr.global-to-local, align 4
  %v1_13c00 = add i32 %v0_13c00, -4
  %v2_13c00 = inttoptr i32 %v1_13c00 to i32*
  %v3_13c00 = load i32, i32* %v2_13c00, align 4
  store i32 %v3_13c00, i32* %r3.global-to-local, align 4
  %v4_13c00 = add i32 %v0_13c00, -8
  %v5_13c00 = inttoptr i32 %v4_13c00 to i32*
  %v6_13c00 = load i32, i32* %v5_13c00, align 4
  store i32 %v6_13c00, i32* %r4.global-to-local, align 4
  %v7_13c00 = add i32 %v0_13c00, -12
  %v8_13c00 = inttoptr i32 %v7_13c00 to i32*
  %v9_13c00 = load i32, i32* %v8_13c00, align 4
  store i32 %v9_13c00, i32* %r5.global-to-local, align 4
  %v10_13c00 = add i32 %v0_13c00, -16
  %v11_13c00 = inttoptr i32 %v10_13c00 to i32*
  %v12_13c00 = load i32, i32* %v11_13c00, align 4
  store i32 %v10_13c00, i32* %r1.global-to-local, align 4
  %v4_13c04 = udiv i32 %v12_13c00, 256
  %v5_13c04 = or i32 %v4_13c04, %v3_13bfc
  store i32 %v5_13c04, i32* %lr.global-to-local, align 4
  %v3_13c08 = mul i32 %v12_13c00, 16777216
  %v4_13c0c = udiv i32 %v9_13c00, 256
  %v5_13c0c = or i32 %v3_13c08, %v4_13c0c
  store i32 %v5_13c0c, i32* @ip, align 4
  %v3_13c10 = mul i32 %v9_13c00, 16777216
  %v4_13c14 = udiv i32 %v6_13c00, 256
  %v5_13c14 = or i32 %v3_13c10, %v4_13c14
  store i32 %v5_13c14, i32* %r5.global-to-local, align 4
  %v3_13c18 = mul i32 %v6_13c00, 16777216
  %v4_13c1c = udiv i32 %v3_13c00, 256
  %v5_13c1c = or i32 %v3_13c18, %v4_13c1c
  store i32 %v5_13c1c, i32* %r4.global-to-local, align 4
  %v1_13c20 = add i32 %v0_13c20, -16
  %v2_13c20 = inttoptr i32 %v1_13c20 to i32*
  store i32 %v5_13c1c, i32* %v2_13c20, align 4
  %v4_13c20 = add i32 %v0_13c20, -12
  %v5_13c20 = inttoptr i32 %v4_13c20 to i32*
  %v6_13c20 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_13c20, i32* %v5_13c20, align 4
  %v7_13c20 = add i32 %v0_13c20, -8
  %v8_13c20 = inttoptr i32 %v7_13c20 to i32*
  %v9_13c20 = load i32, i32* @ip, align 4
  store i32 %v9_13c20, i32* %v8_13c20, align 4
  %v10_13c20 = add i32 %v0_13c20, -4
  %v11_13c20 = inttoptr i32 %v10_13c20 to i32*
  %v12_13c20 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13c20, i32* %v11_13c20, align 4
  store i32 %v1_13c20, i32* %r0.global-to-local, align 4
  %v0_13c24 = load i32, i32* %r2.global-to-local, align 4
  %v2_13c24 = add i32 %v0_13c24, -16
  store i32 %v2_13c24, i32* %r2.global-to-local, align 4
  %v6_13c28 = icmp slt i32 %v0_13c24, 16
  br i1 %v6_13c28, label %dec_label_pc_13c2c, label %dec_label_pc_13bfc.dec_label_pc_13bfc_crit_edge

dec_label_pc_13bfc.dec_label_pc_13bfc_crit_edge:  ; preds = %dec_label_pc_13bfc
  %v0_13bfc.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_13c00.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13bfc

dec_label_pc_13c2c:                               ; preds = %dec_label_pc_13bfc
  %v2_13c2c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13c2c, i32* @r4, align 4
  %v5_13c2c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_13c2c, i32* @r5, align 4
  store i32 %v9_13bf8, i32* @lr, align 4
  %v2_13c30 = add i32 %v0_13c24, -4
  store i32 %v2_13c30, i32* %r2.global-to-local, align 4
  %v4_13c30 = add i32 %v0_13c24, 2147483632
  %v5_13c30 = and i32 %v2_13c30, %v4_13c30
  %v6_13c30 = icmp slt i32 %v5_13c30, 0
  store i1 %v6_13c30, i1* %cpsr_v.global-to-local, align 1
  %v7_13c30 = icmp slt i32 %v2_13c30, 0
  store i1 %v7_13c30, i1* %cpsr_n.global-to-local, align 1
  %v8_13c30 = icmp eq i32 %v2_13c30, 0
  store i1 %v8_13c30, i1* %cpsr_z.global-to-local, align 1
  %v5_13c34 = icmp slt i32 %v2_13c24, -12
  br i1 %v5_13c34, label %dec_label_pc_13c50, label %dec_label_pc_13c38

dec_label_pc_13c38:                               ; preds = %dec_label_pc_13c2c, %dec_label_pc_13bec, %dec_label_pc_13c38
  %v1_13c44 = phi i32 [ %v5_13c44, %dec_label_pc_13c38 ], [ %v1_13c20, %dec_label_pc_13c2c ], [ %v0_13b4830, %dec_label_pc_13bec ]
  %v0_13c38 = load i32, i32* %r3.global-to-local, align 4
  %v3_13c38 = mul i32 %v0_13c38, 16777216
  store i32 %v3_13c38, i32* %ip.global-to-local, align 4
  %v0_13c3c = load i32, i32* %r1.global-to-local, align 4
  %v1_13c3c = add i32 %v0_13c3c, -4
  %v2_13c3c = inttoptr i32 %v1_13c3c to i32*
  %v3_13c3c = load i32, i32* %v2_13c3c, align 4
  store i32 %v3_13c3c, i32* %r3.global-to-local, align 4
  store i32 %v1_13c3c, i32* %r1.global-to-local, align 4
  %v4_13c40 = udiv i32 %v3_13c3c, 256
  %v5_13c40 = or i32 %v4_13c40, %v3_13c38
  store i32 %v5_13c40, i32* @ip, align 4
  %v2_13c44 = add i32 %v1_13c44, -4
  %v3_13c44 = inttoptr i32 %v2_13c44 to i32*
  store i32 %v5_13c40, i32* %v3_13c44, align 4
  %v4_13c44 = load i32, i32* %r0.global-to-local, align 4
  %v5_13c44 = add i32 %v4_13c44, -4
  store i32 %v5_13c44, i32* %r0.global-to-local, align 4
  %v0_13c48 = load i32, i32* %r2.global-to-local, align 4
  %v2_13c48 = add i32 %v0_13c48, -4
  store i32 %v2_13c48, i32* %r2.global-to-local, align 4
  %v6_13c4c = icmp slt i32 %v0_13c48, 4
  br i1 %v6_13c4c, label %dec_label_pc_13c50.loopexit, label %dec_label_pc_13c38

dec_label_pc_13c50.loopexit:                      ; preds = %dec_label_pc_13c38
  %v4_13c48 = sub i32 3, %v0_13c48
  %v5_13c48 = and i32 %v4_13c48, %v0_13c48
  %v6_13c48 = icmp slt i32 %v5_13c48, 0
  %v7_13c48 = icmp slt i32 %v2_13c48, 0
  store i1 %v6_13c48, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13c48, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13c50

dec_label_pc_13c50:                               ; preds = %dec_label_pc_13c50.loopexit, %dec_label_pc_13c2c
  %v2_13abc64 = phi i32 [ %v5_13c44, %dec_label_pc_13c50.loopexit ], [ %v1_13c20, %dec_label_pc_13c2c ]
  %v0_13aac60 = phi i32 [ %v2_13c48, %dec_label_pc_13c50.loopexit ], [ %v2_13c30, %dec_label_pc_13c2c ]
  %v0_13c50 = load i32, i32* %r1.global-to-local, align 4
  %v1_13c50 = add i32 %v0_13c50, 1
  store i32 %v1_13c50, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_13c44, { 0, 2, 1 }
  uselistorder i32 %v3_13c38, { 1, 0 }
  uselistorder i32 %v2_13c30, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_13c20, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_13c00, { 1, 0 }
  uselistorder i32 %v3_13bfc, { 1, 0 }
  uselistorder i32 %v0_13c00, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13c20, { 3, 2, 1, 0 }
  uselistorder i32 %v5_13bd8, { 0, 2, 1 }
  uselistorder i32 %v3_13bcc, { 1, 0 }
  uselistorder i32 %v2_13bc4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_13bb4, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_13b94, { 1, 0 }
  uselistorder i32 %v3_13b90, { 1, 0 }
  uselistorder i32 %v0_13b94, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13bb4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_13b6c, { 0, 2, 1 }
  uselistorder i32 %v3_13b60, { 1, 0 }
  uselistorder i32 %v2_13b58, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_13b48, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_13b28, { 1, 0 }
  uselistorder i32 %v3_13b24, { 1, 0 }
  uselistorder i32 %v0_13b28, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13b48, { 3, 2, 1, 0 }
  uselistorder i1 %v5_13bf0, { 2, 0, 1 }
  uselistorder i32 %v0_13b08, { 1, 0 }
  uselistorder i32 %v0_13bf4, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_13b4830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_13af8, { 2, 1, 0 }
  uselistorder i32 %v0_13af8, { 2, 0, 1 }
  uselistorder i32 %v2_13af0, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_13af0, { 1, 2, 0, 3 }
  uselistorder i32 %v0_13af0, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_13b4831, { 2, 1, 0 }
  uselistorder i32 %v11_13acc, { 1, 0 }
  uselistorder i32 %v7_13acc, { 1, 0 }
  uselistorder i32 %v1_13aac, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_13aac, { 1, 2, 0, 3 }
  uselistorder i32 %v2_13ab0, { 1, 0 }
  uselistorder i32 %v7_13aa4, { 0, 2, 1 }
  uselistorder i32 %v10_13aa0, { 1, 0 }
  uselistorder i32 %v9_13a98, { 1, 0, 2 }
  uselistorder i32 %v6_13a94, { 1, 0 }
  uselistorder i32 %v2_13a8c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_13a8c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_13a9c, { 0, 3, 2, 1 }
  uselistorder i32 %v7_13a80, { 0, 2, 1 }
  uselistorder i32 %v13_13a7c, { 1, 0 }
  uselistorder i32 %v4_13a78, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_13a78, { 2, 0, 1 }
  uselistorder i32 %v6_13a80, { 0, 3, 2, 1 }
  uselistorder i32 %v7_13a70, { 0, 2, 1 }
  uselistorder i32 %v16_13a6c, { 1, 0 }
  uselistorder i32 %v4_13a68, { 1, 2, 0 }
  uselistorder i32 %v0_13a78.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_13a70, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_13a5c, { 0, 3, 2, 1 }
  uselistorder i32 %v10_13a58, { 1, 0 }
  uselistorder i32 %v1_13a54, { 1, 0 }
  uselistorder i32 %v10_13a50, { 1, 0 }
  uselistorder i32 %v0_13a50, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13a54, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_13a48, { 0, 2, 1 }
  uselistorder i32 %v2_13a3c, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_13a3c, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_13a5448, { 1, 2, 0 }
  uselistorder i32 %v1_13a34, { 2, 1, 0 }
  uselistorder i32 %v1_13a2c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_13a24, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_13a20, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_13a1c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_13a1c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_13a08, { 0, 2, 1 }
  uselistorder i32 %v3_139fc, { 1, 0 }
  uselistorder i32 %v2_139f4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_139e4, { 1, 0, 3, 2 }
  uselistorder i32 %v8_139c4, { 1, 0, 2 }
  uselistorder i32 %v5_139c4, { 1, 0, 2 }
  uselistorder i32 %v2_139c4, { 1, 0, 2 }
  uselistorder i32 %v3_139c0, { 1, 0 }
  uselistorder i32 %v0_139c4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_139e4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_1399c, { 0, 2, 1 }
  uselistorder i32 %v3_13990, { 1, 0 }
  uselistorder i32 %v2_13988, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_13978, { 1, 0, 3, 2 }
  uselistorder i32 %v8_13958, { 1, 0, 2 }
  uselistorder i32 %v5_13958, { 1, 0, 2 }
  uselistorder i32 %v2_13958, { 1, 0, 2 }
  uselistorder i32 %v3_13954, { 1, 0 }
  uselistorder i32 %v0_13958, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_13978, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_13930, { 0, 2, 1 }
  uselistorder i32 %v3_13924, { 1, 0 }
  uselistorder i32 %v2_1391c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_1390c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_138ec, { 1, 0, 2 }
  uselistorder i32 %v5_138ec, { 1, 0, 2 }
  uselistorder i32 %v2_138ec, { 1, 0, 2 }
  uselistorder i32 %v3_138e8, { 1, 0 }
  uselistorder i32 %v0_138ec, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1390c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_139b4, { 2, 0, 1 }
  uselistorder i32 %v0_139b8, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1390c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_138bc, { 1, 0 }
  uselistorder i32 %v0_138bc, { 3, 1, 0, 2 }
  uselistorder i32 %v2_138b4, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_138b4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_138b4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1390c75, { 2, 1, 0 }
  uselistorder i32 %v1_13894, { 1, 0, 2 }
  uselistorder i32 %v1_1386c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1386c, { 1, 2, 0, 3 }
  uselistorder i32 %v8_13858, { 1, 0, 2 }
  uselistorder i32 %v6_13854, { 1, 0 }
  uselistorder i32 %v2_1384c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_1384c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_1385c, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_13844, { 0, 2, 1 }
  uselistorder i32 %v3_13844, { 3, 0, 1, 2 }
  uselistorder i1 %v0_13844, { 1, 0 }
  uselistorder i1 %v1_13844, { 1, 0 }
  uselistorder i32 %v3_13840, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_13838, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_13824, { 1, 2, 0 }
  uselistorder i32 %v12_13818, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1380c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_13810, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_13800, { 0, 2, 1 }
  uselistorder i32 %v2_137f8, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_137f8, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_137f0, { 1, 0 }
  uselistorder i32 %v1_137e8, { 2, 1, 0 }
  uselistorder i32 %v2_137e0, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_137e0, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_137d0, { 1, 0 }
  uselistorder i32 %v1_137d0, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_137d0, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 25, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 37, 1, 2, 3, 38, 4, 5, 6, 39, 35, 36, 40, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 27, 1, 2, 3, 4, 5, 28, 6, 7, 8, 9, 10, 67, 68, 69, 70, 71, 11, 29, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 30, 31, 62, 32, 33, 34, 35, 36, 63, 37, 38, 39, 40, 41, 64, 42, 43, 44, 45, 46, 65, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 12, 2, 4, 6, 8, 5, 13, 7, 9, 11, 65, 10, 64, 63, 66, 14, 19, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 34, 26, 27, 35, 28, 36, 29, 37, 30, 31, 32, 33, 38, 41, 39, 51, 40, 42, 45, 43, 52, 44, 46, 49, 47, 53, 48, 50, 54, 55, 56, 58, 57, 59, 60, 61, 62 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 22, 3, 4, 34, 36, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 16, 17, 18, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 45, 8, 46, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 0, 24, 1, 26, 2, 27, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 42, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 0, 23, 1, 25, 2, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 47, 8, 48, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 0, 25, 1, 27, 2, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 31, { 21, 22, 1, 0, 10, 12, 11, 13, 2, 15, 14, 23, 24, 16, 17, 18, 19, 6, 20, 7, 3, 8, 4, 5, 9 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 17, 0, 15, 1, 16, 2, 3, 8, 10, 9, 7, 6, 5, 4, 18, 19, 20, 21, 14 }
  uselistorder i32 65536, { 10, 9, 15, 11, 16, 12, 17, 13, 18, 14, 19, 20, 21, 25, 22, 26, 23, 27, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 1, 60, 61, 2, 62, 0, 3, 63, 64, 65, 66, 67, 70, 68, 69, 71, 72, 73, 77, 78, 79, 80, 74, 75, 76, 81, 84, 85, 86, 82, 83, 87, 88, 89, 90, 91, 93, 92, 94, 4, 95, 97, 98, 96, 99, 100, 5, 101, 104, 105, 102, 106, 103, 107, 108, 109, 110, 111, 112, 150, 114, 113, 151, 116, 115, 117, 119, 118, 121, 120, 152, 123, 122, 153, 125, 124, 126, 128, 127, 130, 129, 6, 131, 133, 134, 132, 135, 136, 7, 137, 139, 140, 141, 138, 142, 8, 143, 147, 148, 149, 144, 145, 146 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32* @r5, { 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 163, 164, 165, 166, 167, 168, 169, 170, 171, 175, 172, 173, 174, 176, 603, 604, 605, 606, 607, 0, 608, 609, 213, 214, 215, 216, 217, 218, 490, 491, 492, 493, 494, 495, 496, 503, 497, 498, 499, 500, 501, 502, 539, 540, 541, 548, 549, 550, 551, 542, 543, 544, 545, 546, 547, 23, 24, 25, 177, 178, 3, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 10, 11, 92, 93, 13, 12, 14, 15, 16, 17, 18, 19, 94, 95, 20, 21, 96, 97, 98, 99, 100, 101, 102, 22, 111, 112, 113, 114, 4, 115, 103, 104, 105, 106, 107, 108, 109, 110, 222, 223, 224, 225, 226, 227, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 1, 136, 137, 138, 139, 140, 5, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 2, 162, 190, 191, 192, 193, 194, 8, 195, 196, 197, 198, 199, 200, 201, 202, 9, 203, 204, 205, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 6, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 7, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 206, 207, 208, 209, 210, 211, 212, 219, 220, 221 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5, 6, 7 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 8, 9, 10, 22, 23, 14, 0, 11, 1, 12, 2, 13, 15, 16, 17, 3, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 4, 34, 35, 36, 5, 37, 38, 39, 6, 40, 41, 42, 7, 43, 44, 45, 46, 47, 48, 49, 50, 51 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 5, 6, 3, 4, 1, 7, 2, 8 }
  uselistorder i32 40, { 1, 7, 2, 0, 3, 5, 6, 8, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 36, { 1, 5, 6, 3, 4, 0, 2 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32 24, { 0, 72, 73, 37, 38, 1, 74, 75, 35, 36, 16, 15, 66, 45, 67, 46, 47, 54, 58, 39, 40, 41, 42, 43, 44, 61, 48, 49, 50, 51, 52, 53, 55, 56, 62, 57, 63, 59, 60, 68, 69, 70, 64, 65, 71, 2, 78, 17, 79, 18, 80, 19, 81, 20, 3, 82, 21, 22, 4, 83, 23, 84, 24, 5, 25, 26, 6, 27, 7, 8, 9, 10, 11, 12, 85, 28, 13, 86, 29, 87, 88, 89, 30, 31, 14, 90, 32, 91, 33, 76, 34, 77 }
  uselistorder i32* @lr, { 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 1, 104, 105, 106, 2, 107, 108, 109, 3, 110, 111, 112, 113, 114, 115, 116, 117, 21, 22, 118, 119, 120, 121, 122, 73, 74, 75, 76, 77, 78, 79, 80, 23, 24, 25, 26, 27, 8, 81, 5, 6, 82, 34, 35, 83, 45, 46, 47, 48, 49, 36, 37, 38, 39, 40, 7, 9, 12, 13, 4, 0, 16, 14, 15, 10, 11, 84, 85, 86, 87, 88, 89, 17, 18, 19, 20, 28, 29, 41, 42, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 90, 91, 92, 93, 30, 31, 32, 33 }
  uselistorder i32 16, { 31, 32, 33, 193, 34, 194, 195, 35, 196, 197, 36, 198, 199, 200, 201, 202, 203, 106, 107, 88, 89, 111, 108, 109, 110, 112, 26, 113, 114, 5, 6, 7, 8, 9, 25, 10, 11, 0, 12, 13, 52, 92, 37, 93, 38, 53, 90, 91, 94, 96, 97, 98, 27, 87, 14, 15, 24, 84, 16, 99, 17, 54, 95, 41, 40, 39, 100, 42, 101, 43, 55, 56, 57, 58, 59, 60, 61, 62, 102, 63, 103, 64, 104, 65, 105, 67, 68, 69, 70, 66, 71, 28, 116, 117, 118, 119, 72, 120, 121, 122, 123, 124, 125, 126, 73, 127, 128, 129, 45, 130, 44, 131, 132, 75, 133, 134, 135, 136, 137, 1, 74, 138, 139, 140, 77, 141, 142, 143, 144, 145, 2, 76, 146, 78, 147, 148, 149, 18, 150, 19, 151, 85, 20, 79, 80, 152, 153, 3, 47, 154, 46, 155, 81, 156, 157, 158, 21, 159, 22, 160, 86, 23, 82, 83, 161, 162, 4, 49, 163, 48, 164, 51, 165, 50, 166, 167, 168, 169, 170, 29, 171, 172, 173, 174, 176, 175, 177, 178, 179, 180, 181, 182, 183, 30, 184, 185, 186, 187, 188, 190, 189, 191, 192, 115 }
  uselistorder i32 20, { 110, 3, 111, 112, 0, 4, 113, 32, 33, 23, 24, 1, 34, 35, 36, 37, 25, 27, 5, 28, 6, 29, 22, 26, 30, 31, 16, 17, 18, 19, 39, 40, 7, 41, 42, 43, 44, 45, 46, 47, 8, 48, 49, 50, 51, 52, 53, 54, 55, 56, 9, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 10, 67, 68, 69, 70, 71, 72, 73, 74, 11, 75, 76, 77, 2, 78, 79, 80, 81, 20, 82, 83, 84, 85, 86, 87, 88, 89, 90, 21, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 13, 101, 12, 102, 103, 104, 105, 15, 106, 14, 107, 108, 109, 38 }
  uselistorder i32 27, { 1, 0, 6, 5, 2, 3, 4, 7 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 19, 20, 21, 52, 59, 2, 17, 22, 14, 23, 15, 24, 16, 25, 0, 18, 26, 27, 28, 29, 3, 30, 31, 32, 33, 4, 34, 35, 36, 37, 5, 38, 6, 39, 7, 40, 41, 8, 42, 43, 9, 44, 45, 10, 46, 11, 47, 48, 49, 50, 12, 51, 54, 55, 56, 57, 13, 58, 1, 53 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 7, 13, 12, 11, 10, 22, 23, 24, 25, 8, 26, 0, 29, 9, 27, 28, 6, 1, 3, 2, 4, 5 }
  uselistorder i32* @ip, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 2, 3, 48, 1, 0, 4, 5 }
  uselistorder i1 false, { 25, 26, 27, 35, 19, 24, 36, 37, 21, 22, 23, 38, 18, 39, 40, 0, 30, 29, 31, 28, 1, 3, 2, 16, 4, 33, 17, 15, 20, 34, 7, 6, 5, 8, 9, 10, 32, 14, 11, 12, 13, 41 }
  uselistorder i32 4, { 68, 59, 60, 6, 396, 61, 397, 49, 7, 8, 62, 398, 63, 399, 400, 401, 402, 64, 403, 404, 405, 406, 65, 407, 408, 409, 410, 411, 9, 412, 413, 414, 415, 416, 66, 417, 48, 418, 419, 420, 421, 422, 423, 10, 11, 67, 424, 232, 233, 173, 174, 234, 235, 236, 425, 426, 427, 428, 429, 120, 121, 122, 50, 123, 124, 369, 371, 370, 367, 368, 337, 338, 339, 340, 372, 373, 374, 375, 341, 342, 343, 376, 377, 125, 126, 127, 128, 129, 43, 12, 13, 237, 238, 239, 240, 241, 242, 14, 15, 55, 16, 17, 56, 378, 379, 171, 18, 19, 87, 69, 260, 250, 51, 90, 181, 91, 182, 92, 183, 203, 204, 205, 195, 196, 206, 207, 184, 185, 175, 176, 177, 178, 179, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 89, 198, 199, 200, 197, 57, 208, 70, 93, 94, 20, 209, 21, 210, 211, 22, 23, 212, 213, 45, 214, 44, 201, 88, 202, 219, 95, 221, 96, 222, 97, 223, 224, 220, 215, 98, 216, 217, 218, 380, 225, 54, 53, 52, 226, 99, 24, 25, 26, 27, 28, 29, 227, 46, 228, 47, 229, 230, 231, 0, 100, 30, 251, 252, 130, 253, 254, 255, 131, 132, 102, 256, 101, 258, 71, 259, 261, 133, 262, 263, 134, 135, 264, 72, 265, 73, 266, 267, 136, 137, 268, 138, 269, 270, 139, 140, 103, 271, 74, 272, 75, 273, 274, 275, 276, 277, 104, 278, 76, 279, 280, 281, 141, 282, 283, 284, 285, 142, 143, 2, 286, 105, 287, 77, 288, 289, 290, 144, 291, 292, 145, 146, 3, 106, 293, 78, 295, 79, 296, 297, 147, 298, 299, 300, 301, 302, 148, 149, 303, 304, 108, 305, 4, 107, 306, 80, 307, 109, 308, 309, 150, 310, 311, 312, 313, 314, 151, 152, 315, 316, 111, 317, 5, 110, 318, 81, 319, 112, 320, 321, 322, 323, 324, 113, 325, 82, 326, 327, 328, 329, 330, 153, 331, 332, 333, 154, 155, 115, 334, 114, 83, 335, 84, 336, 381, 382, 383, 384, 385, 117, 386, 118, 387, 156, 388, 389, 390, 157, 158, 119, 391, 116, 392, 85, 393, 86, 395, 159, 344, 345, 31, 160, 346, 347, 32, 161, 348, 349, 33, 162, 350, 351, 34, 163, 352, 353, 35, 164, 58, 354, 355, 36, 356, 165, 357, 358, 37, 166, 359, 360, 38, 167, 361, 362, 39, 168, 363, 364, 40, 169, 365, 366, 41, 394, 294, 243, 244, 245, 42, 246, 247, 1, 248, 170, 249, 257, 172 }
  uselistorder i32* @r2, { 66, 67, 28, 9, 29, 31, 30, 32, 33, 34, 35, 7, 68, 1, 69, 74, 75, 78, 70, 57, 61, 62, 65, 63, 64, 58, 59, 60, 56, 14, 0, 76, 2, 77, 5, 36, 37, 38, 8, 10, 71, 72, 73, 3, 39, 40, 41, 6, 24, 25, 26, 4, 42, 46, 49, 50, 47, 48, 51, 15, 11, 12, 13, 18, 19, 16, 17, 20, 21, 22, 23, 27, 43, 44, 45, 52, 53, 54, 55 }
  uselistorder label %dec_label_pc_13c38, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13bcc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13b60, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13b00, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_13a8c, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_13a50, { 1, 0 }
  uselistorder label %dec_label_pc_13a3c, { 1, 0 }
  uselistorder label %dec_label_pc_139fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13990, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13924, { 2, 0, 1 }
  uselistorder label %dec_label_pc_138c4, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_13838, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_137f8, { 1, 0 }
}

define i32 @function_13c58(i32 %arg1) local_unnamed_addr {
dec_label_pc_13c58:
  ret i32 %arg1
}

define i32 @function_13c60() local_unnamed_addr {
dec_label_pc_13c60:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_13c60 = load i32, i32* @r0, align 4
  %v2_13c60 = icmp eq i32 %v0_13c60, 0
  %v3_13c64 = load i32, i32* @r4, align 4
  store i32 %v3_13c64, i32* %stack_var_-20, align 4
  %v0_13c68 = load i32, i32* @r1, align 4
  br i1 %v2_13c60, label %dec_label_pc_13d40, label %dec_label_pc_13c7c.lr.ph

dec_label_pc_13c7c:                               ; preds = %dec_label_pc_13c7c.lr.ph, %dec_label_pc_13d00
  %v1_13d00 = phi i32 [ 0, %dec_label_pc_13c7c.lr.ph ], [ %v5_13d00, %dec_label_pc_13d00 ]
  %v0_13d04 = phi i32 [ 1, %dec_label_pc_13c7c.lr.ph ], [ %v1_13d04, %dec_label_pc_13d00 ]
  %v0_13c84 = phi i32 [ %v0_13c60, %dec_label_pc_13c7c.lr.ph ], [ %v0_13c8425, %dec_label_pc_13d00 ]
  %v1_13c84 = inttoptr i32 %v0_13c84 to i8*
  %v2_13c84 = load i8, i8* %v1_13c84, align 1
  %v3_13c84 = zext i8 %v2_13c84 to i32
  %v3_13c88 = mul nuw nsw i32 %v3_13c84, 2
  %v4_13c88 = add i32 %v3_13c88, %v2_13c80.pre
  %v5_13c88 = inttoptr i32 %v4_13c88 to i8*
  %v6_13c88 = load i8, i8* %v5_13c88, align 1
  %v1_13c8c = and i8 %v6_13c88, 8
  %v2_13c8c = icmp eq i8 %v1_13c8c, 0
  br i1 %v2_13c8c, label %dec_label_pc_13d40, label %dec_label_pc_13c94

dec_label_pc_13c94:                               ; preds = %dec_label_pc_13c7c
  br label %dec_label_pc_13cb4

dec_label_pc_13c9c:                               ; preds = %dec_label_pc_13cb4
  %v3_13ca0 = mul i32 %v0_13d00, 10
  %v4_13ca0 = add i32 %v3_13cb4, %v3_13ca0
  %v1_13ca4 = add i32 %v4_13ca0, -48
  %v8_13cac = icmp sgt i32 %v1_13ca4, 255
  br i1 %v8_13cac, label %dec_label_pc_13d40, label %dec_label_pc_13cb0

dec_label_pc_13cb0:                               ; preds = %dec_label_pc_13c9c
  %v1_13cb0 = add i32 %v0_13cf0, 1
  store i32 %v1_13cb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13cb4

dec_label_pc_13cb4:                               ; preds = %dec_label_pc_13c94, %dec_label_pc_13cb0
  %v0_13d00 = phi i32 [ 0, %dec_label_pc_13c94 ], [ %v1_13ca4, %dec_label_pc_13cb0 ]
  %v0_13cf0 = phi i32 [ %v0_13c84, %dec_label_pc_13c94 ], [ %v1_13cb0, %dec_label_pc_13cb0 ]
  %v1_13cb4 = inttoptr i32 %v0_13cf0 to i8*
  %v2_13cb4 = load i8, i8* %v1_13cb4, align 1
  %v3_13cb4 = zext i8 %v2_13cb4 to i32
  %v2_13cb8 = mul nuw nsw i32 %v3_13cb4, 2
  %v2_13cbc = add i32 %v2_13cb8, %v2_13c80.pre
  %v3_13cc0 = inttoptr i32 %v2_13cbc to i8*
  %v4_13cc0 = load i8, i8* %v3_13cc0, align 1
  %v6_13cc0 = zext i8 %v4_13cc0 to i32
  %v1_13ccc = and i32 %v6_13cc0, 8
  %v2_13ccc = icmp eq i32 %v1_13ccc, 0
  br i1 %v2_13ccc, label %dec_label_pc_13cd4, label %dec_label_pc_13c9c

dec_label_pc_13cd4:                               ; preds = %dec_label_pc_13cb4
  %v8_13cd8 = icmp sgt i32 %v0_13d04, 3
  br i1 %v8_13cd8, label %dec_label_pc_13cec, label %dec_label_pc_13cdc

dec_label_pc_13cdc:                               ; preds = %dec_label_pc_13cd4
  %v7_13cdc = icmp eq i8 %v2_13cb4, 46
  br i1 %v7_13cdc, label %dec_label_pc_13ce4, label %dec_label_pc_13d40

dec_label_pc_13ce4:                               ; preds = %dec_label_pc_13cdc
  %v1_13ce4 = add i32 %v0_13cf0, 1
  store i32 %v1_13ce4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13d00

dec_label_pc_13cec:                               ; preds = %dec_label_pc_13cd4
  %v2_13cec = icmp eq i8 %v2_13cb4, 0
  %v1_13cf0 = add i32 %v0_13cf0, 1
  store i32 %v1_13cf0, i32* %r0.global-to-local, align 4
  br i1 %v2_13cec, label %dec_label_pc_13d00, label %dec_label_pc_13cf8

dec_label_pc_13cf8:                               ; preds = %dec_label_pc_13cec
  %v1_13cf8 = and i32 %v6_13cc0, 32
  %v2_13cf8 = icmp eq i32 %v1_13cf8, 0
  br i1 %v2_13cf8, label %dec_label_pc_13d40, label %dec_label_pc_13d00

dec_label_pc_13d00:                               ; preds = %dec_label_pc_13cf8, %dec_label_pc_13cec, %dec_label_pc_13ce4
  %v0_13c8425 = phi i32 [ %v1_13cf0, %dec_label_pc_13cf8 ], [ %v1_13cf0, %dec_label_pc_13cec ], [ %v1_13ce4, %dec_label_pc_13ce4 ]
  %v4_13d00 = mul i32 %v1_13d00, 256
  %v5_13d00 = or i32 %v0_13d00, %v4_13d00
  %v1_13d04 = add nuw nsw i32 %v0_13d04, 1
  %v7_13d0c = icmp slt i32 %v1_13d04, 5
  br i1 %v7_13d0c, label %dec_label_pc_13c7c, label %dec_label_pc_13d10

dec_label_pc_13c7c.lr.ph:                         ; preds = %dec_label_pc_13c60
  %v2_13c80.pre = load i32, i32* bitcast (i32** @global_var_1c51c.435 to i32*), align 4
  br label %dec_label_pc_13c7c

dec_label_pc_13d10:                               ; preds = %dec_label_pc_13d00
  %v2_13d10 = icmp eq i32 %v0_13c68, 0
  br i1 %v2_13d10, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_13d10
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_13d10
  %v2_13d18 = and i32 %v5_13d00, ptrtoint (i32* @global_var_ff00.25 to i32)
  %v2_13d14 = udiv i32 %v5_13d00, 256
  %v4_13d1c = and i32 %v2_13d14, 65280
  %v4_13d20 = mul i32 %v2_13d18, 256
  %v5_13d24 = udiv i32 %v5_13d00, 16777216
  %v6_13d24 = or i32 %v4_13d1c, %v5_13d24
  %v5_13d28 = mul i32 %v0_13d00, 16777216
  %v6_13d28 = or i32 %v4_13d20, %v5_13d28
  %v3_13d2c = or i32 %v6_13d24, %v6_13d28
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_13d38 = inttoptr i32 %v0_13c68 to i32*
  store i32 %v3_13d2c, i32* %v3_13d38, align 4
  %v2_13d3c.pre = load i32, i32* %stack_var_-20, align 4
  %v17_13d3c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_13d3c = phi i32 [ 1, %bb ], [ %v17_13d3c.pre, %bb40 ]
  %v2_13d3c = phi i32 [ %v3_13c64, %bb ], [ %v2_13d3c.pre, %bb40 ]
  store i32 %v2_13d3c, i32* @r4, align 4
  ret i32 %v17_13d3c

dec_label_pc_13d40:                               ; preds = %dec_label_pc_13cdc, %dec_label_pc_13cf8, %dec_label_pc_13c7c, %dec_label_pc_13c9c, %dec_label_pc_13c60
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_13c64, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_13c80.pre, { 1, 0 }
  uselistorder i32 %v1_13d04, { 1, 0 }
  uselistorder i32 %v0_13cf0, { 0, 1, 3, 2 }
  uselistorder i32 %v3_13c64, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 50, 48, 51, 49, 53, 52, 57, 54, 56, 55, 58, 60, 59, 62, 61, 64, 63, 65, 66, 73, 67, 74, 68, 75, 69, 76, 77, 70, 78, 71, 79, 72, 81, 80, 83, 82, 87, 84, 88, 85, 89, 86, 92, 90, 93, 91, 94, 95, 97, 96, 98, 102, 99, 103, 104, 100, 105, 101, 106, 108, 107, 109, 110, 112, 111, 113, 115, 114, 117, 116, 119, 118, 120, 122, 121, 126, 123, 127, 128, 124, 129, 125, 131, 130, 132, 135, 136, 137, 133, 138, 134, 139, 141, 140, 142, 145, 143, 146, 144, 147, 150, 151, 152, 148, 153, 149, 154, 156, 155, 157, 160, 158, 161, 159, 162, 164, 163, 165, 166, 168, 167, 175, 169, 176, 177, 170, 178, 173, 179, 171, 180, 181, 172, 174, 182, 184, 183, 188, 185, 189, 190, 186, 187, 191, 192, 193, 195, 194, 196 }
  uselistorder i32 65280, { 0, 27, 2, 3, 26, 1, 4, 28, 5, 6, 29, 7, 8, 9, 10, 11, 12, 30, 13, 14, 15, 16, 17, 31, 18, 19, 20, 32, 21, 22, 33, 23, 34, 35, 36, 24, 37, 38, 39, 25 }
  uselistorder i32 ptrtoint (i32* @global_var_ff00.25 to i32), { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 19 }
  uselistorder i32 5, { 16, 26, 17, 5, 18, 6, 28, 2, 19, 27, 3, 0, 20, 21, 22, 23, 24, 25, 32, 33, 34, 35, 7, 36, 37, 38, 39, 8, 40, 41, 42, 43, 44, 45, 46, 47, 9, 48, 49, 50, 10, 51, 52, 53, 11, 54, 55, 56, 57, 12, 58, 59, 60, 61, 13, 62, 63, 64, 65, 66, 67, 68, 14, 69, 71, 72, 73, 74, 75, 76, 15, 77, 4, 70, 29, 1, 30, 31 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 65, 66, 70, 73, 74, 75, 71, 72, 76, 77, 78, 79, 80, 490, 491, 81, 82, 83, 84, 85, 86, 87, 493, 88, 89, 91, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 102, 107, 106, 105, 108, 488, 494, 113, 109, 112, 110, 111, 492, 115, 114, 116, 117, 118, 121, 120, 119, 122, 124, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 134, 136, 137, 138, 142, 148, 143, 139, 144, 149, 145, 150, 146, 140, 151, 141, 152, 153, 147, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 165, 168, 171, 172, 170, 169, 173, 176, 175, 174, 183, 180, 184, 181, 177, 185, 182, 178, 179, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 203, 205, 206, 207, 218, 213, 208, 219, 214, 220, 215, 221, 216, 209, 210, 211, 222, 223, 224, 225, 217, 212, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 251, 260, 256, 261, 257, 253, 254, 258, 255, 262, 263, 259, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 279, 278, 286, 281, 292, 293, 287, 282, 294, 295, 288, 283, 296, 289, 297, 290, 298, 291, 299, 284, 300, 285, 301, 302, 303, 304, 305, 306, 307, 310, 311, 314, 312, 308, 315, 313, 309, 318, 317, 316, 321, 322, 319, 323, 320, 324, 330, 325, 332, 331, 326, 328, 327, 329, 333, 486, 495, 334, 335, 336, 337, 338, 341, 339, 340, 343, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 363, 361, 357, 364, 362, 358, 367, 366, 365, 370, 371, 368, 372, 369, 373, 379, 374, 381, 380, 375, 377, 376, 378, 382, 487, 496, 383, 384, 385, 386, 387, 390, 388, 389, 392, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 411, 413, 414, 415, 416, 418, 417, 419, 420, 421, 423, 422, 424, 425, 426, 427, 430, 437, 431, 432, 428, 433, 434, 435, 429, 438, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 451, 453, 454, 455, 459, 466, 460, 461, 467, 462, 456, 457, 463, 458, 464, 468, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 481, 483, 484, 485, 489 }
  uselistorder i32 32, { 55, 39, 40, 37, 48, 49, 43, 44, 47, 5, 4, 7, 6, 9, 8, 38, 36, 50, 51, 11, 10, 13, 12, 15, 14, 17, 16, 42, 19, 18, 20, 22, 21, 24, 23, 25, 26, 28, 27, 45, 46, 41, 52, 53, 29, 54, 30, 31, 32, 0, 33, 1, 2, 3, 34, 35 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 3, { 40, 60, 61, 160, 62, 63, 64, 65, 66, 67, 71, 85, 161, 4, 147, 149, 150, 0, 68, 23, 69, 24, 151, 70, 41, 25, 27, 72, 44, 73, 2, 74, 75, 76, 77, 42, 5, 78, 79, 80, 81, 26, 82, 45, 83, 43, 84, 46, 28, 47, 48, 1, 86, 87, 49, 89, 90, 91, 92, 93, 94, 50, 95, 51, 96, 29, 97, 98, 99, 100, 101, 7, 6, 52, 30, 102, 103, 104, 105, 106, 107, 108, 9, 8, 53, 109, 31, 110, 111, 112, 113, 114, 115, 116, 117, 11, 10, 54, 118, 32, 119, 120, 121, 122, 123, 13, 12, 55, 124, 33, 125, 126, 127, 128, 56, 129, 15, 14, 35, 130, 34, 131, 132, 133, 134, 57, 135, 17, 16, 37, 136, 36, 137, 138, 139, 140, 141, 142, 143, 144, 19, 18, 58, 145, 38, 146, 152, 153, 154, 155, 156, 157, 21, 20, 59, 158, 39, 159, 22, 148, 3, 88 }
  uselistorder i32 8, { 86, 133, 23, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 24, 150, 61, 62, 63, 64, 68, 65, 66, 67, 151, 124, 123, 121, 122, 110, 111, 112, 125, 126, 127, 113, 114, 115, 7, 27, 28, 25, 26, 17, 18, 20, 21, 29, 152, 69, 70, 71, 72, 8, 9, 45, 19, 10, 11, 16, 12, 30, 51, 31, 13, 14, 15, 46, 39, 47, 36, 48, 37, 49, 38, 50, 22, 52, 53, 54, 55, 57, 40, 58, 41, 59, 60, 56, 76, 32, 77, 78, 79, 80, 81, 82, 83, 84, 85, 3, 87, 88, 89, 4, 90, 91, 92, 93, 94, 95, 96, 5, 97, 98, 99, 100, 101, 102, 103, 6, 104, 105, 106, 107, 108, 109, 128, 129, 130, 131, 132, 116, 33, 117, 34, 118, 35, 119, 42, 120, 0, 1, 44, 73, 74, 43, 75, 2 }
  uselistorder i32 255, { 2, 6, 7, 3, 8, 4, 9, 5, 10, 0, 1 }
  uselistorder i32 10, { 10, 40, 41, 0, 3, 4, 24, 25, 42, 1, 26, 11, 29, 12, 30, 13, 31, 14, 32, 33, 6, 34, 35, 27, 15, 36, 28, 37, 16, 38, 39, 17, 5, 18, 19, 20, 8, 44, 45, 2, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 21, 56, 57, 58, 22, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 7, 64, 9, 70, 43, 23 }
  uselistorder i8 0, { 5, 0, 1, 21, 4, 22, 23, 2, 8, 24, 25, 26, 27, 28, 29, 30, 6, 31, 32, 33, 34, 11, 35, 3, 10, 9, 12, 36, 37, 38, 39, 40, 18, 41, 42, 45, 19, 43, 44, 17, 46, 47, 48, 49, 50, 13, 7, 14, 51, 15, 16, 20, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61 }
  uselistorder i32 2, { 5, 136, 252, 253, 62, 254, 255, 53, 256, 52, 257, 51, 140, 79, 80, 173, 81, 174, 82, 175, 6, 137, 258, 57, 83, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 138, 16, 17, 18, 19, 20, 85, 86, 84, 54, 55, 68, 155, 87, 90, 144, 89, 145, 149, 69, 141, 70, 142, 71, 143, 72, 146, 73, 147, 74, 148, 75, 154, 150, 151, 152, 153, 63, 91, 156, 21, 22, 157, 158, 159, 92, 160, 58, 139, 161, 88, 162, 23, 93, 239, 97, 163, 95, 164, 96, 165, 94, 98, 166, 24, 25, 26, 99, 167, 64, 100, 101, 102, 103, 65, 105, 106, 104, 107, 168, 56, 61, 169, 170, 171, 240, 241, 176, 177, 178, 179, 180, 181, 182, 109, 183, 108, 184, 185, 186, 187, 188, 111, 110, 189, 190, 191, 192, 193, 194, 195, 113, 196, 112, 197, 198, 114, 115, 76, 116, 199, 200, 201, 202, 203, 204, 205, 1, 27, 28, 29, 30, 31, 32, 117, 206, 77, 207, 208, 209, 210, 211, 2, 33, 34, 35, 36, 37, 38, 119, 118, 212, 213, 39, 214, 215, 59, 216, 121, 217, 3, 40, 41, 42, 43, 44, 122, 218, 120, 219, 220, 45, 221, 222, 60, 223, 124, 224, 4, 46, 47, 48, 49, 50, 125, 225, 123, 226, 227, 126, 127, 78, 128, 228, 229, 230, 231, 232, 233, 234, 235, 130, 236, 129, 237, 242, 243, 244, 132, 245, 133, 246, 247, 248, 249, 134, 250, 131, 251, 66, 238, 135, 67, 172 }
  uselistorder i32* @r1, { 46, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 1, 98, 99, 23, 24, 26, 25, 5, 7, 100, 0, 101, 35, 36, 18, 103, 63, 68, 69, 72, 70, 71, 64, 65, 66, 67, 62, 73, 102, 11, 6, 47, 27, 74, 28, 3, 75, 29, 30, 37, 38, 12, 8, 9, 10, 14, 13, 76, 15, 16, 17, 19, 20, 21, 22, 31, 32, 33, 4, 34, 77, 78, 2, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 79, 80 }
  uselistorder label %dec_label_pc_13d40, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_13cb4, { 1, 0 }
}

define i32 @function_13d4c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13d4c:
  %v3_13d4c = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_13d54 = call i32 @function_115cc()
  %v0_13d58 = load i32, i32* @r4, align 4
  store i32 %v3_13d4c, i32* @r4, align 4
  %v2_13d60 = call i32 @function_11674(i32 %v0_13d54, i32 %v0_13d58)
  ret i32 %v2_13d60

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_11674, { 7, 6, 5, 0, 4, 3, 2, 8, 1 }
  uselistorder i32 ()* @function_115cc, { 0, 3, 2, 1 }
}

define i32 @function_13d64(i32 %arg1) local_unnamed_addr {
dec_label_pc_13d64:
  %v1_13d64 = add i32 %arg1, 28
  %v2_13d64 = inttoptr i32 %v1_13d64 to i32*
  %v3_13d64 = load i32, i32* %v2_13d64, align 4
  %v1_13d6c = add i32 %arg1, 44
  %v2_13d6c = inttoptr i32 %v1_13d6c to i32*
  %v3_13d6c = load i32, i32* %v2_13d6c, align 4
  store i32 %v3_13d64, i32* @global_var_1c7b0.488, align 4
  store i32 %v3_13d6c, i32* @global_var_1c7b4.490, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 11, 0, 3, 4, 1, 2, 9, 10, 5, 6, 7, 8 }
  uselistorder i32 28, { 33, 0, 23, 24, 8, 9, 32, 1, 4, 15, 5, 16, 6, 17, 10, 11, 12, 13, 14, 3, 18, 19, 20, 2, 7, 22, 21, 25, 26, 27, 28, 29, 30, 31 }
}

define i32 @function_13d88(i32* %arg1) local_unnamed_addr {
dec_label_pc_13d88:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_13d90 = call i32 @brk(i32* %arg1)
  %v3_13d94 = icmp ult i32 %v2_13d90, %tmp
  store i32 %v2_13d90, i32* @global_var_1c5d8.485, align 4
  br i1 %v3_13d94, label %dec_label_pc_13da8, label %dec_label_pc_13db8

dec_label_pc_13da8:                               ; preds = %dec_label_pc_13d88
  %v0_13da8 = call i32 @function_11b48()
  %v2_13db0 = inttoptr i32 %v0_13da8 to i32*
  store i32 12, i32* %v2_13db0, align 4
  br label %dec_label_pc_13db8

dec_label_pc_13db8:                               ; preds = %dec_label_pc_13d88, %dec_label_pc_13da8
  %v0_13db8 = phi i32 [ 0, %dec_label_pc_13d88 ], [ -1, %dec_label_pc_13da8 ]
  ret i32 %v0_13db8

; uselistorder directives
  uselistorder i32 12, { 16, 10, 121, 122, 123, 125, 126, 127, 128, 11, 124, 129, 130, 131, 132, 133, 134, 135, 68, 69, 32, 33, 70, 17, 18, 111, 112, 113, 0, 108, 114, 7, 115, 8, 109, 4, 110, 19, 20, 6, 71, 72, 21, 73, 74, 22, 12, 47, 52, 44, 53, 37, 34, 35, 36, 39, 23, 38, 24, 40, 25, 41, 42, 43, 45, 48, 49, 46, 54, 55, 56, 9, 57, 58, 59, 50, 51, 61, 62, 63, 31, 26, 64, 27, 65, 28, 66, 5, 67, 60, 116, 75, 13, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 29, 87, 88, 89, 90, 91, 30, 92, 93, 94, 95, 96, 97, 14, 98, 99, 100, 101, 102, 103, 15, 104, 105, 106, 107, 117, 118, 119, 120, 1, 2, 3 }
  uselistorder i32 ()* @function_11b48, { 21, 58, 34, 43, 9, 8, 7, 6, 42, 41, 40, 5, 59, 33, 32, 25, 24, 19, 20, 57, 56, 18, 17, 16, 14, 28, 55, 23, 54, 53, 13, 12, 52, 39, 38, 37, 51, 22, 27, 4, 3, 50, 49, 36, 29, 48, 1, 11, 47, 31, 10, 30, 15, 0, 2, 46, 45, 44, 26, 35 }
  uselistorder i32* @global_var_1c5d8.485, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_13db8, { 1, 0 }
}

define i32 @function_13dc4(i32 %arg1) local_unnamed_addr {
dec_label_pc_13dc4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13dc8 = load i32, i32* @global_var_1c3a8.448, align 4
  %v7_13dcc = icmp eq i32 %v3_13dc8, -1
  %v3_13dd0 = load i32, i32* @r4, align 4
  store i32 %v3_13dd0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1c3a8.448 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_13dcc, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_13dc4
  store i32 %v3_13dd0, i32* %r4.global-to-local, align 4
  %v9_13dd8 = load i32, i32* @r0, align 4
  ret i32 %v9_13dd8

.preheader:                                       ; preds = %dec_label_pc_13dc4, %.preheader
  %v0_13de0 = phi i32 [ %v3_13de4, %.preheader ], [ %v3_13dc8, %dec_label_pc_13dc4 ]
  call void @__pseudo_branch(i32 %v0_13de0)
  %v0_13de4 = load i32, i32* %r4.global-to-local, align 4
  %v1_13de4 = add i32 %v0_13de4, -4
  %v2_13de4 = inttoptr i32 %v1_13de4 to i32*
  %v3_13de4 = load i32, i32* %v2_13de4, align 4
  store i32 %v1_13de4, i32* %r4.global-to-local, align 4
  %v3_13de8 = icmp eq i32 %v3_13de4, -1
  br i1 %v3_13de8, label %dec_label_pc_13df0, label %.preheader

dec_label_pc_13df0:                               ; preds = %.preheader
  %v2_13df0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13df0, i32* %r4.global-to-local, align 4
  %v8_13df0 = load i32, i32* @r0, align 4
  ret i32 %v8_13df0

; uselistorder directives
  uselistorder i32 %v3_13de4, { 1, 0 }
  uselistorder i32 %v3_13dc8, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 45, 16, 46, 47, 48, 3, 17, 18, 19, 49, 50, 51, 4, 20, 21, 22, 52, 53, 54, 5, 23, 24, 55, 15, 14, 56, 57, 58, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 59, 9, 32, 36, 37, 43, 38, 33, 34, 39, 40, 41, 42, 44, 8, 7, 35, 6 }
  uselistorder i32 -1, { 156, 0, 98, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 157, 99, 236, 100, 277, 101, 266, 260, 102, 299, 103, 300, 104, 301, 105, 302, 145, 96, 261, 262, 106, 263, 264, 107, 303, 1, 158, 2, 108, 267, 268, 159, 160, 256, 257, 146, 161, 147, 162, 3, 4, 95, 87, 88, 163, 164, 165, 94, 237, 166, 238, 5, 6, 109, 278, 110, 279, 111, 280, 112, 274, 113, 272, 114, 239, 115, 258, 116, 240, 117, 241, 118, 275, 119, 276, 120, 242, 121, 167, 155, 122, 168, 123, 243, 124, 259, 125, 273, 126, 304, 305, 127, 244, 128, 245, 129, 265, 130, 271, 131, 246, 132, 306, 133, 282, 134, 247, 135, 269, 136, 283, 137, 270, 138, 281, 139, 307, 97, 308, 169, 170, 171, 172, 173, 174, 175, 176, 7, 8, 9, 10, 140, 141, 11, 177, 17, 178, 18, 179, 248, 249, 12, 180, 89, 19, 181, 182, 16, 183, 184, 185, 233, 234, 186, 187, 188, 189, 190, 191, 192, 193, 194, 231, 142, 232, 20, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 235, 14, 209, 13, 210, 211, 15, 212, 213, 214, 21, 215, 216, 143, 250, 217, 22, 218, 251, 90, 23, 24, 27, 148, 252, 26, 150, 253, 25, 149, 254, 28, 29, 151, 255, 30, 31, 32, 33, 34, 219, 35, 91, 36, 37, 38, 40, 39, 41, 42, 43, 220, 44, 45, 46, 47, 48, 49, 50, 92, 51, 52, 53, 54, 55, 56, 57, 221, 58, 144, 59, 60, 61, 222, 62, 63, 64, 65, 223, 66, 67, 68, 224, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 225, 81, 82, 83, 226, 84, 85, 227, 228, 229, 230, 86, 93, 152, 153, 154 }
  uselistorder i32* @global_var_1c3a8.448, { 1, 0 }
  uselistorder i32 1, { 522, 235, 334, 373, 870, 871, 872, 873, 874, 355, 523, 299, 943, 340, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 526, 525, 524, 309, 310, 313, 312, 308, 307, 311, 305, 314, 306, 315, 527, 262, 261, 257, 259, 258, 260, 263, 256, 690, 148, 145, 147, 146, 528, 149, 529, 48, 49, 530, 159, 112, 531, 290, 532, 242, 533, 291, 534, 294, 772, 773, 535, 285, 281, 286, 282, 283, 287, 284, 774, 775, 776, 420, 233, 234, 230, 232, 231, 536, 295, 537, 73, 0, 541, 540, 539, 538, 202, 201, 421, 542, 160, 161, 356, 422, 543, 279, 544, 808, 549, 548, 547, 546, 545, 196, 197, 199, 198, 423, 550, 335, 761, 327, 762, 357, 551, 163, 169, 162, 166, 165, 168, 170, 164, 167, 956, 358, 554, 553, 552, 317, 316, 555, 124, 125, 123, 126, 53, 54, 55, 56, 556, 271, 272, 270, 269, 268, 557, 558, 289, 288, 559, 359, 921, 560, 273, 274, 424, 425, 332, 564, 563, 562, 561, 78, 77, 341, 565, 36, 566, 195, 37, 567, 228, 568, 50, 569, 90, 570, 200, 571, 182, 572, 193, 573, 194, 574, 107, 575, 151, 576, 810, 322, 152, 153, 154, 691, 692, 693, 694, 695, 696, 697, 957, 187, 188, 184, 185, 186, 577, 426, 427, 578, 191, 190, 192, 189, 380, 777, 579, 57, 381, 581, 580, 47, 46, 582, 241, 583, 51, 584, 52, 585, 108, 109, 586, 150, 587, 229, 588, 110, 589, 111, 590, 267, 135, 591, 76, 592, 75, 593, 304, 594, 298, 595, 303, 596, 255, 280, 97, 382, 726, 727, 383, 922, 923, 321, 924, 778, 779, 780, 328, 781, 599, 598, 597, 144, 141, 137, 138, 140, 139, 136, 142, 143, 1, 763, 764, 765, 766, 342, 811, 812, 343, 813, 601, 600, 297, 296, 782, 783, 784, 428, 602, 158, 157, 156, 155, 925, 360, 361, 2, 419, 926, 603, 10, 8, 11, 12, 9, 720, 722, 721, 429, 785, 293, 292, 927, 183, 786, 787, 788, 180, 181, 814, 604, 221, 219, 222, 220, 839, 840, 605, 71, 70, 69, 68, 72, 815, 816, 606, 32, 31, 30, 29, 33, 704, 440, 705, 728, 363, 441, 442, 711, 712, 717, 437, 698, 699, 439, 700, 701, 438, 702, 703, 706, 436, 707, 708, 435, 709, 710, 434, 713, 714, 433, 715, 716, 432, 718, 719, 729, 443, 333, 730, 444, 731, 733, 734, 732, 735, 445, 736, 689, 362, 739, 737, 446, 738, 430, 723, 431, 724, 384, 725, 741, 447, 742, 743, 744, 375, 745, 746, 364, 752, 753, 329, 448, 620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 79, 80, 81, 87, 84, 83, 82, 85, 86, 89, 88, 747, 748, 449, 749, 750, 450, 751, 621, 134, 133, 128, 132, 131, 130, 127, 129, 740, 451, 623, 622, 301, 302, 300, 929, 344, 928, 374, 624, 172, 173, 171, 175, 176, 178, 177, 179, 174, 817, 626, 625, 94, 95, 93, 92, 91, 96, 627, 454, 385, 754, 755, 386, 756, 452, 453, 455, 757, 758, 456, 457, 458, 459, 460, 461, 462, 463, 639, 638, 637, 636, 635, 634, 633, 632, 631, 521, 630, 629, 628, 223, 225, 224, 227, 226, 464, 330, 465, 640, 387, 759, 466, 467, 641, 470, 469, 468, 760, 643, 642, 471, 767, 367, 768, 366, 769, 770, 472, 365, 771, 473, 474, 475, 476, 477, 478, 479, 480, 331, 481, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 265, 264, 266, 794, 4, 789, 482, 790, 3, 791, 376, 792, 336, 337, 793, 795, 377, 796, 659, 658, 657, 517, 518, 656, 930, 388, 931, 389, 932, 5, 933, 6, 7, 818, 819, 820, 821, 822, 823, 338, 339, 824, 825, 826, 827, 828, 829, 830, 831, 483, 832, 833, 484, 834, 837, 835, 836, 662, 661, 660, 244, 248, 247, 243, 251, 252, 253, 254, 245, 250, 249, 246, 841, 842, 843, 844, 845, 485, 345, 486, 664, 663, 25, 22, 26, 27, 28, 24, 23, 20, 21, 846, 847, 848, 487, 849, 850, 851, 852, 853, 854, 488, 855, 346, 489, 391, 390, 490, 856, 665, 39, 42, 43, 45, 44, 41, 40, 38, 857, 378, 324, 858, 491, 860, 859, 323, 492, 393, 392, 519, 666, 35, 34, 861, 862, 863, 864, 865, 866, 493, 867, 347, 494, 495, 868, 394, 869, 667, 60, 58, 59, 64, 65, 67, 66, 62, 63, 61, 875, 876, 368, 877, 878, 879, 496, 880, 348, 497, 396, 395, 498, 882, 499, 883, 668, 238, 239, 240, 237, 236, 884, 885, 369, 886, 887, 888, 500, 889, 349, 501, 401, 400, 502, 890, 397, 891, 398, 892, 399, 893, 673, 672, 671, 670, 669, 206, 207, 209, 208, 203, 205, 204, 894, 895, 370, 896, 897, 898, 503, 899, 350, 504, 409, 408, 505, 900, 407, 901, 402, 902, 403, 903, 404, 904, 405, 905, 506, 906, 406, 907, 678, 677, 676, 675, 674, 215, 216, 218, 217, 212, 214, 213, 908, 379, 326, 909, 507, 911, 910, 325, 508, 411, 410, 520, 679, 211, 210, 912, 913, 914, 371, 915, 916, 917, 351, 509, 414, 413, 510, 918, 412, 919, 680, 100, 99, 102, 103, 105, 104, 98, 101, 934, 935, 936, 372, 937, 938, 939, 352, 511, 417, 416, 512, 940, 415, 941, 685, 684, 683, 682, 681, 116, 115, 114, 119, 120, 122, 121, 113, 118, 117, 920, 418, 513, 686, 276, 277, 278, 275, 942, 74, 881, 106, 797, 514, 800, 515, 801, 802, 798, 799, 803, 804, 805, 806, 353, 807, 354, 13, 16, 18, 14, 15, 17, 809, 516, 838, 19, 687, 688, 320, 319, 318 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_13df8() local_unnamed_addr {
dec_label_pc_13df8:
  %v5_13dfc = load i32, i32* @r0, align 4
  ret i32 %v5_13dfc

; uselistorder directives
  uselistorder i32* @r0, { 4, 15, 16, 117, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 78, 79, 81, 80, 29, 164, 165, 36, 37, 38, 39, 17, 5, 7, 8, 110, 111, 30, 166, 167, 65, 169, 10, 14, 128, 18, 127, 124, 34, 126, 22, 125, 129, 168, 45, 19, 82, 83, 84, 85, 32, 21, 86, 87, 88, 89, 20, 170, 26, 25, 46, 24, 130, 13, 131, 132, 6, 90, 133, 11, 91, 12, 92, 93, 0, 40, 41, 47, 48, 42, 43, 44, 49, 52, 53, 54, 55, 56, 1, 50, 51, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 31, 74, 75, 76, 77, 94, 95, 96, 97, 98, 99, 100, 3, 101, 102, 103, 104, 105, 106, 107, 33, 108, 134, 135, 2, 112, 113, 114, 115, 116, 118, 120, 121, 122, 123, 136, 137, 119, 109, 9, 23, 27, 28, 35 }
}

define i32 @function_13e00() local_unnamed_addr {
entry:
  %v3_13e04 = load i32, i32* @r4, align 4
  %v0_13e0c = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_13e04)
  ret i32 %v0_13e0c

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 12, 13, 9, 10, 11, 14, 2, 5, 6, 3, 4, 1, 8 }
  uselistorder i32 0, { 111, 0, 827, 828, 829, 830, 113, 112, 831, 983, 984, 985, 986, 987, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 988, 989, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 38, 1008, 1009, 1010, 1011, 1012, 39, 1013, 1014, 1015, 40, 1016, 1017, 1018, 41, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1034, 1035, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 42, 1054, 1055, 1056, 1057, 1058, 43, 1059, 1060, 1061, 1062, 1063, 44, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 679, 680, 277, 681, 278, 573, 921, 922, 923, 924, 736, 682, 683, 1077, 1078, 1079, 1080, 279, 684, 1, 685, 686, 687, 1081, 1082, 1083, 114, 1084, 67, 1085, 65, 66, 1086, 1087, 1088, 280, 1092, 281, 1103, 1105, 517, 216, 1106, 282, 1104, 283, 284, 2, 1089, 1090, 115, 737, 236, 738, 287, 238, 237, 739, 740, 741, 742, 286, 744, 745, 285, 746, 1091, 663, 664, 665, 666, 667, 668, 117, 83, 669, 68, 116, 118, 289, 1093, 290, 239, 1094, 1095, 1097, 1098, 288, 927, 929, 930, 48, 217, 931, 928, 925, 926, 3, 909, 912, 910, 911, 218, 4, 934, 932, 933, 219, 119, 913, 914, 915, 919, 916, 917, 291, 5, 918, 6, 941, 942, 120, 935, 936, 937, 938, 939, 940, 7, 8, 743, 574, 575, 576, 292, 9, 293, 943, 944, 513, 945, 514, 891, 873, 577, 670, 578, 579, 892, 893, 580, 832, 1107, 1108, 61, 688, 294, 689, 690, 691, 692, 295, 693, 694, 695, 696, 697, 698, 699, 581, 671, 874, 1096, 582, 583, 700, 750, 584, 515, 1099, 71, 1100, 981, 585, 747, 982, 748, 946, 1101, 1102, 10, 586, 84, 587, 588, 211, 210, 518, 72, 73, 74, 75, 527, 519, 50, 49, 85, 589, 590, 591, 592, 594, 593, 11, 947, 948, 213, 212, 520, 76, 77, 78, 79, 528, 521, 52, 51, 47, 58, 949, 529, 950, 951, 952, 80, 953, 954, 955, 956, 957, 121, 522, 530, 523, 524, 958, 531, 93, 122, 701, 702, 81, 703, 704, 532, 12, 220, 123, 124, 270, 53, 125, 296, 595, 69, 705, 706, 960, 959, 961, 962, 45, 126, 963, 129, 128, 127, 271, 272, 273, 131, 130, 132, 297, 707, 708, 133, 964, 965, 94, 134, 709, 135, 596, 136, 780, 781, 137, 751, 752, 552, 138, 139, 602, 597, 86, 598, 599, 553, 554, 555, 556, 563, 546, 533, 302, 547, 548, 534, 304, 549, 550, 535, 303, 551, 569, 570, 557, 558, 559, 536, 301, 560, 561, 537, 300, 562, 564, 538, 299, 565, 572, 539, 298, 566, 571, 567, 64, 54, 214, 215, 568, 516, 600, 305, 601, 222, 603, 306, 604, 607, 608, 141, 221, 605, 606, 307, 308, 609, 610, 240, 611, 612, 540, 62, 309, 614, 615, 616, 617, 618, 619, 620, 233, 232, 621, 310, 622, 82, 623, 624, 95, 625, 526, 626, 627, 628, 629, 630, 631, 525, 632, 633, 634, 140, 311, 312, 635, 638, 639, 640, 641, 642, 142, 636, 143, 637, 13, 144, 613, 753, 754, 643, 644, 313, 645, 647, 145, 648, 649, 650, 651, 652, 653, 654, 241, 314, 655, 63, 315, 656, 646, 14, 657, 234, 658, 316, 659, 660, 661, 662, 317, 676, 274, 149, 148, 541, 275, 151, 150, 542, 543, 276, 147, 146, 224, 231, 225, 229, 230, 318, 152, 672, 673, 674, 675, 223, 677, 55, 678, 153, 154, 319, 70, 710, 711, 712, 713, 228, 714, 715, 716, 227, 717, 718, 719, 720, 89, 721, 723, 722, 87, 88, 155, 226, 320, 724, 244, 242, 243, 90, 156, 59, 157, 755, 99, 98, 96, 97, 756, 757, 60, 758, 759, 760, 761, 762, 158, 763, 764, 321, 765, 766, 767, 768, 162, 159, 160, 161, 769, 770, 771, 772, 322, 773, 774, 247, 776, 246, 777, 245, 778, 323, 779, 782, 783, 102, 100, 101, 15, 784, 785, 786, 787, 163, 788, 789, 249, 248, 790, 324, 791, 792, 793, 794, 795, 106, 103, 104, 105, 16, 796, 797, 798, 164, 799, 165, 800, 801, 252, 802, 251, 803, 250, 804, 325, 805, 170, 327, 168, 169, 166, 167, 806, 172, 171, 807, 173, 326, 809, 810, 110, 107, 108, 109, 17, 808, 811, 812, 813, 814, 815, 816, 18, 19, 20, 21, 22, 817, 818, 174, 254, 819, 328, 820, 329, 821, 330, 822, 331, 823, 332, 824, 333, 825, 253, 826, 175, 176, 177, 834, 835, 833, 837, 838, 836, 23, 24, 25, 26, 27, 839, 178, 840, 841, 256, 842, 334, 845, 335, 846, 336, 847, 337, 848, 338, 849, 339, 850, 255, 851, 340, 852, 180, 179, 181, 854, 855, 853, 856, 857, 56, 859, 860, 861, 862, 341, 863, 28, 29, 30, 31, 32, 858, 182, 91, 864, 865, 261, 866, 260, 867, 259, 868, 257, 869, 258, 870, 342, 871, 343, 872, 184, 183, 185, 876, 877, 875, 878, 879, 57, 881, 882, 883, 884, 344, 885, 33, 34, 35, 36, 37, 880, 186, 92, 886, 887, 263, 888, 262, 889, 345, 890, 191, 347, 189, 190, 187, 188, 894, 193, 192, 895, 348, 194, 346, 195, 198, 197, 196, 898, 899, 897, 896, 349, 901, 900, 902, 199, 903, 904, 266, 905, 265, 906, 264, 907, 350, 908, 200, 203, 202, 201, 968, 969, 967, 966, 971, 970, 972, 973, 204, 269, 974, 268, 975, 267, 976, 351, 979, 235, 920, 977, 205, 978, 843, 206, 844, 725, 207, 726, 727, 728, 208, 352, 729, 730, 46, 731, 732, 733, 734, 735, 353, 749, 209, 775, 980, 544, 545, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123 }
  uselistorder i32* @r4, { 33, 679, 683, 684, 687, 688, 410, 411, 412, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 196, 61, 628, 629, 272, 705, 706, 707, 708, 709, 710, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 711, 712, 3, 713, 714, 715, 716, 730, 731, 732, 733, 31, 734, 30, 725, 726, 727, 728, 729, 717, 718, 719, 273, 274, 275, 276, 277, 278, 279, 280, 720, 721, 163, 164, 724, 630, 631, 632, 600, 4, 601, 602, 603, 5, 604, 6, 612, 613, 605, 7, 8, 606, 607, 608, 609, 610, 611, 633, 9, 641, 642, 634, 635, 636, 637, 638, 639, 640, 62, 63, 64, 65, 66, 67, 643, 644, 645, 646, 559, 560, 506, 507, 68, 69, 165, 166, 70, 71, 72, 73, 561, 562, 563, 564, 74, 75, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 76, 77, 167, 168, 508, 509, 722, 723, 2, 78, 79, 80, 81, 233, 234, 287, 288, 82, 83, 681, 682, 281, 282, 685, 686, 283, 284, 647, 648, 235, 236, 84, 85, 86, 87, 237, 238, 239, 240, 241, 649, 650, 651, 88, 89, 90, 331, 332, 333, 289, 290, 291, 34, 35, 36, 10, 91, 37, 92, 93, 38, 41, 42, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 94, 95, 51, 52, 96, 97, 98, 99, 100, 101, 102, 53, 54, 55, 56, 57, 58, 59, 60, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 124, 125, 0, 126, 114, 115, 116, 117, 118, 119, 103, 104, 105, 106, 107, 652, 653, 654, 655, 292, 293, 294, 295, 296, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 11, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 12, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 242, 243, 244, 1, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 13, 352, 14, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 15, 384, 16, 385, 17, 386, 18, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 413, 19, 414, 20, 415, 21, 416, 22, 417, 418, 419, 420, 421, 23, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 24, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 25, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 26, 581, 27, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 656, 28, 657, 29, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 676, 677, 678, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 673, 674, 675, 436, 437, 438, 262, 265, 263, 264, 266, 267, 268, 269, 270, 271, 285, 286, 32, 680 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

declare i32* @__decompiler_undefined_function_3() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
