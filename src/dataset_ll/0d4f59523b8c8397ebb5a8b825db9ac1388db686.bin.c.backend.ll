source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_c310.14 = constant i32 -382906384
@global_var_11638.16 = constant i32 -382909968
@global_var_1e250.20 = global i32 0
@global_var_b428.26 = constant i32 -382906384
@global_var_b894.28 = constant i32 -382906384
@global_var_ab9c.30 = constant i32 -382906384
@global_var_a4c4.32 = constant i32 -382906384
@global_var_9da0.34 = constant i32 -382906384
@global_var_9574.36 = constant i32 -382906384
@global_var_8f14.38 = constant i32 -382906384
@global_var_884c.40 = constant i32 -382906384
@global_var_202d4.42 = global i32 0
@global_var_202dc.57 = local_unnamed_addr global i32 0
@global_var_202da.58 = local_unnamed_addr global i32 0
@global_var_1e254.63 = global i32 0
@global_var_15024.70 = constant i32 10
@global_var_10008.76 = constant i32 -382910336
@global_var_15028.80 = constant i32 16777216
@global_var_1e25c.82 = global i32 0
@global_var_1e268.84 = global i32 0
@global_var_1e260.86 = global i32 0
@global_var_1e264.88 = global i32 0
@global_var_202f0.98 = global i32 0
@global_var_1e2a0.100 = global i32 0
@global_var_1e26c.102 = global i32 0
@global_var_1e298.104 = global i32 0
@global_var_202e8.111 = global i32 0
@global_var_202ec.113 = global i32 0
@global_var_1e272.116 = local_unnamed_addr global i32 0
@global_var_1e284.118 = global i32 0
@global_var_1e278.120 = local_unnamed_addr global i32 0
@global_var_1e274.121 = local_unnamed_addr global i32 0
@global_var_1e279.122 = local_unnamed_addr global i32 0
@global_var_1e292.125 = local_unnamed_addr global i32 0
@global_var_15500.127 = constant i32 0
@global_var_153a4.129 = constant [5 x i8] c"PMMV\00"
@global_var_15548.131 = constant [6 x i8] c"CFOKL\00"
@global_var_15030.133 = constant i32 387006810
@global_var_15038.135 = constant [6 x i8] c"TKXZT\00"
@global_var_15040.137 = constant i32 437918234
@global_var_15048.139 = constant [8 x i8] c"ZOJFKRA\00"
@global_var_15050.141 = constant [8 x i8] c"FGDCWNV\00"
@global_var_15058.143 = constant [9 x i8] c"HWCLVGAJ\00"
@global_var_15064.145 = constant i32 370216979
@global_var_1506c.147 = constant i32 269555223
@global_var_15074.149 = constant [8 x i8] c"QWRRMPV\00"
@global_var_15480.151 = constant i32 370216979
@global_var_1507c.153 = constant [9 x i8] c"RCQQUMPF\00"
@global_var_15088.155 = constant i32 370216979
@global_var_15090.157 = constant [5 x i8] c"WQGP\00"
@global_var_15098.159 = constant [5 x i8] c"RCQQ\00"
@global_var_150a0.161 = constant i32 1263486531
@global_var_151f4.163 = constant i32 320017171
@global_var_150ac.165 = constant [9 x i8] c"QOACFOKL\00"
@global_var_150b8.167 = constant i32 336860180
@global_var_150c0.169 = constant i32 324292169
@global_var_150c8.171 = constant [14 x i8] c"cFOKLKQVPCVMP\00"
@global_var_150d8.173 = constant [7 x i8] c"OGKLQO\00"
@global_var_150e0.175 = constant [4 x i8] c"@WJ\00"
@global_var_150e4.177 = constant [7 x i8] c"RW@NKA\00"
@global_var_150ec.179 = constant [8 x i8] c"QGPTKAG\00"
@global_var_150f4.181 = constant [11 x i8] c"QWRGPTKQMP\00"
@global_var_15100.183 = constant [6 x i8] c"EWGQV\00"
@global_var_15108.185 = constant i32 1263486531
@global_var_15110.187 = constant [14 x i8] c"CFOKLKQVPCVMP\00"
@global_var_15120.189 = constant [5 x i8] c"W@LV\00"
@global_var_15128.191 = constant i32 324292169
@global_var_15130.193 = constant i32 390551160
@global_var_15138.195 = constant i32 387009354
@global_var_15140.197 = constant [6 x i8] c"HT@XF\00"
@global_var_15148.199 = constant [5 x i8] c"CLIM\00"
@global_var_15150.201 = constant [6 x i8] c"XNZZ\0C\00"
@global_var_15158.203 = constant [9 x i8] c"AJCLEGOG\00"
@global_var_15164.205 = constant i32 1867011861
@global_var_15174.207 = constant i32 1867011861
@global_var_15184.209 = constant [7 x i8] c"Q[QVGO\00"
@global_var_1518c.211 = constant [5 x i8] c"KIU@\00"
@global_var_15194.213 = constant [9 x i8] c"FPGCO@MZ\00"
@global_var_151a0.215 = constant [8 x i8] c"PGCNVGI\00"
@global_var_151a8.217 = constant i32 303174162
@global_var_151b4.219 = constant i32 303174162
@global_var_151bc.221 = constant i32 320017171
@global_var_151c4.223 = constant i32 1263486531
@global_var_1505c.225 = constant [5 x i8] c"VGAJ\00"
@global_var_151d0.227 = constant i32 454761243
@global_var_151dc.229 = constant [6 x i8] c"oGKLQ\00"
@global_var_151e4.231 = constant [4 x i8] c"hta\00"
@global_var_151e8.233 = constant i32 319820054
@global_var_151f0.235 = constant i32 320017171
@global_var_151fc.237 = constant [7 x i8] c"WVQVCP\00"
@global_var_15204.239 = constant [9 x i8] c"XMMOCFQN\00"
@global_var_15210.241 = constant i32 1263486531
@global_var_15218.243 = constant i32 303059531
@global_var_15220.245 = constant i32 303125067
@global_var_15228.247 = constant i32 303452747
@global_var_15230.249 = constant [7 x i8] c"@KLVGA\00"
@global_var_15238.251 = constant [8 x i8] c"VQWLCOK\00"
@global_var_cfd8.252 = constant i32 86592
@global_var_15240.253 = constant i32 323043395
@global_var_15248.255 = constant i32 319951888
@global_var_15250.257 = constant [7 x i8] c"Q[LLGV\00"
@global_var_15258.259 = constant [9 x i8] c"@C[CLFQN\00"
@global_var_15264.261 = constant [6 x i8] c"SWQGP\00"
@global_var_1535c.263 = constant i32 1118227
@global_var_1526c.265 = constant i32 370216979
@global_var_15274.267 = constant [8 x i8] c"oCLCEGP\00"
@global_var_1527c.269 = constant [4 x i8] c"CFO\00"
@global_var_15280.271 = constant [8 x i8] c"OCLCEGP\00"
@global_var_15288.273 = constant [7 x i8] c"DPKGLF\00"
@global_var_15290.275 = constant [4 x i8] c"CRA\00"
@global_var_15294.277 = constant i32 1263421261
@global_var_152a0.279 = constant [5 x i8] c"VKLK\00"
@global_var_152a8.281 = constant [7 x i8] c"CQAGLF\00"
@global_var_152b0.283 = constant i32 1265504102
@global_var_152b8.285 = constant [6 x i8] c"FNKLI\00"
@global_var_152c0.287 = constant [6 x i8] c"NMEKL\00"
@global_var_152c8.289 = constant i32 1296912387
@global_var_152d0.291 = constant [9 x i8] c"AC@NGAMO\00"
@global_var_152dc.293 = constant [7 x i8] c"PMWVGP\00"
@global_var_152e4.295 = constant [8 x i8] c"LGVMRKC\00"
@global_var_152ec.297 = constant [7 x i8] c"Q[QCFO\00"
@global_var_152f4.299 = constant [8 x i8] c"CLKAWQV\00"
@global_var_152fc.301 = constant [6 x i8] c"FG@WE\00"
@global_var_15304.303 = constant [10 x i8] c"F\0CG\0C@\0CW\0CE\00"
@global_var_15310.305 = constant [5 x i8] c"GAJM\00"
@global_var_15318.307 = constant [5 x i8] c"FKCE\00"
@global_var_15320.309 = constant [7 x i8] c"QUKVAJ\00"
@global_var_152f0.311 = constant [3 x i8] c"FO\00"
@global_var_15328.313 = constant [7 x i8] c"VGNLGV\00"
@global_var_15330.315 = constant i32 370216979
@global_var_1533c.317 = constant [5 x i8] c"VMMP\00"
@global_var_15344.319 = constant [7 x i8] c"ACNTKL\00"
@global_var_1534c.321 = constant i32 370216979
@global_var_15358.323 = constant i32 1447906640
@global_var_15360.325 = constant i32 1447512643
@global_var_1536c.327 = constant i32 454302484
@global_var_15374.329 = constant i32 387400530
@global_var_15380.331 = constant i32 319885331
@global_var_15388.333 = constant i32 1986882928
@global_var_15390.335 = constant [7 x i8] c"CNRKLG\00"
@global_var_15398.337 = constant i32 457659992
@global_var_153a0.339 = constant i32 303043392
@global_var_153ac.341 = constant [9 x i8] c"rcqqumpf\00"
@global_var_153b8.343 = constant [6 x i8] c"cfokl\00"
@global_var_153c0.345 = constant [8 x i8] c"LGVEGCP\00"
@global_var_153c8.347 = constant i32 303257172
@global_var_153d0.349 = constant [4 x i8] c"K@O\00"
@global_var_153d4.351 = constant [7 x i8] c"T[CVVC\00"
@global_var_153dc.353 = constant [6 x i8] c"cFOKL\00"
@global_var_153e4.355 = constant i32 373380675
@global_var_153ec.357 = constant [7 x i8] c"OKAPMQ\00"
@global_var_153f4.359 = constant [6 x i8] c"QGVWR\00"
@global_var_153fc.361 = constant [8 x i8] c"AMOACQV\00"
@global_var_15404.363 = constant [4 x i8] c"RMQ\00"
@global_var_15408.365 = constant [4 x i8] c"UUU\00"
@global_var_1540c.367 = constant i32 303176208
@global_var_15414.369 = constant [5 x i8] c"w`lv\00"
@global_var_1541c.371 = constant [7 x i8] c"LGVOCL\00"
@global_var_15424.373 = constant [6 x i8] c"Cfokl\00"
@global_var_1542c.375 = constant [7 x i8] c"FCGOML\00"
@global_var_15434.377 = constant [5 x i8] c"FGOM\00"
@global_var_1543c.379 = constant [6 x i8] c"CPPKQ\00"
@global_var_15444.381 = constant [8 x i8] c"nKLIQ[Q\00"
@global_var_1544c.383 = constant [7 x i8] c"ANKGLV\00"
@global_var_15454.385 = constant [6 x i8] c"AKQAM\00"
@global_var_1545c.387 = constant [6 x i8] c"akqam\00"
@global_var_15464.389 = constant [6 x i8] c"QWRGP\00"
@global_var_1546c.391 = constant [5 x i8] c"QWPV\00"
@global_var_15474.393 = constant i32 370611221
@global_var_d110.394 = constant i32 86536
@global_var_15208.395 = constant [5 x i8] c"CFQN\00"
@global_var_1547c.397 = constant i32 1313949251
@global_var_15488.399 = constant [7 x i8] c"RCVPMN\00"
@global_var_15490.401 = constant i32 387007823
@global_var_15498.403 = constant [7 x i8] c"OGPNKL\00"
@global_var_154a0.405 = constant [9 x i8] c"LGVCFOKL\00"
@global_var_154ac.407 = constant [9 x i8] c"JGUNRCAI\00"
@global_var_154b8.409 = constant [7 x i8] c"lGVkaQ\00"
@global_var_154c0.411 = constant i32 1179729984
@global_var_154cc.413 = constant [5 x i8] c"lwnn\00"
@global_var_154d4.415 = constant [9 x i8] c"CFOKLVVF\00"
@global_var_154e0.417 = constant [9 x i8] c"MRGPCVMP\00"
@global_var_154ec.419 = constant [9 x i8] c"rNAOqRkR\00"
@global_var_154f8.421 = constant i32 269488144
@global_var_15504.423 = constant [9 x i8] c"QGAWPKV[\00"
@global_var_15510.425 = constant [9 x i8] c"OMWLVQ[Q\00"
@global_var_1551c.427 = constant [8 x i8] c"OGOMVGA\00"
@global_var_15524.429 = constant i32 1464562030
@global_var_15534.431 = constant i32 2003334929
@global_var_15544.433 = constant [10 x i8] c"OWQGCFOKL\00"
@global_var_15550.435 = constant i32 1196513135
@global_var_1555c.437 = constant [10 x i8] c"QVMPUCVAJ\00"
@global_var_15568.439 = constant [11 x i8] c"QRGAKCNKQV\00"
@global_var_15574.441 = constant [10 x i8] c"CFOKLRNFV\00"
@global_var_15580.443 = constant [10 x i8] c"RNFVCFOKL\00"
@global_var_1558c.445 = constant i32 1279478337
@global_var_15598.447 = constant [13 x i8] c"VGNGAMOCFOKL\00"
@global_var_155a8.449 = constant [13 x i8] c"CFOKLVGNGAMO\00"
@global_var_155b8.451 = constant [7 x i8] c"EWGQV\22\00"
@global_var_155c0.453 = constant i32 336675162
@global_var_155c8.455 = constant [9 x i8] c"FGDCWNV\22\00"
@global_var_155d4.457 = constant [8 x i8] c"CLVQNS\22\00"
@global_var_155dc.459 = constant [12 x i8] c"QWRGPTKQMP\22\00"
@global_var_155e8.461 = constant i32 1178819416
@global_var_155f4.463 = constant [6 x i8] c"PMMV\22\00"
@global_var_1e27c.464 = local_unnamed_addr global i32 0
@global_var_1e27a.465 = local_unnamed_addr global i32 0
@global_var_1e280.466 = local_unnamed_addr global i32 0
@global_var_1e288.468 = local_unnamed_addr global i32 0
@global_var_1e294.469 = local_unnamed_addr global i32 0
@global_var_cc94.477 = constant i32 -382910352
@global_var_155fc.479 = constant [3 x i8] c"\0D\0A\00"
@global_var_15608.481 = constant i32 2096127
@global_var_155ff.483 = constant i32 2095871
@global_var_202f8.490 = global i32 0
@global_var_1560c.497 = constant i32 39228
@global_var_20300.498 = local_unnamed_addr global i32 0
@global_var_20304.499 = local_unnamed_addr global i32 0
@global_var_15610.501 = constant i32 55430
@global_var_20308.502 = local_unnamed_addr global i32 0
@global_var_2030c.503 = local_unnamed_addr global i32 0
@global_var_15614.505 = constant [20 x i8] c"jT^VXYsTZZXOnQ\5CDXO=\00"
@global_var_20310.506 = local_unnamed_addr global i32 0
@global_var_20314.507 = local_unnamed_addr global i32 0
@global_var_15628.509 = constant [7 x i8] c"NUXQQ=\00"
@global_var_20318.510 = local_unnamed_addr global i32 0
@global_var_2031c.511 = local_unnamed_addr global i32 0
@global_var_15630.513 = constant [8 x i8] c"XS\5C_QX=\00"
@global_var_20320.514 = local_unnamed_addr global i32 0
@global_var_20324.515 = local_unnamed_addr global i32 0
@global_var_15638.517 = constant [8 x i8] c"NDNIXP=\00"
@global_var_20328.518 = local_unnamed_addr global i32 0
@global_var_2032c.519 = local_unnamed_addr global i32 0
@global_var_15640.521 = constant [4 x i8] c"NU=\00"
@global_var_20334.522 = local_unnamed_addr global i32 0
@global_var_20330.523 = local_unnamed_addr global i32 0
@global_var_15644.525 = constant i32 1398038290
@global_var_2033c.526 = local_unnamed_addr global i32 0
@global_var_20338.527 = local_unnamed_addr global i32 0
@global_var_15660.529 = constant i32 1449022538
@global_var_20344.530 = local_unnamed_addr global i32 0
@global_var_20340.531 = local_unnamed_addr global i32 0
@global_var_15680.533 = constant [10 x i8] c"S^ROOX^I=\00"
@global_var_2034c.534 = local_unnamed_addr global i32 0
@global_var_20348.535 = local_unnamed_addr global i32 0
@global_var_1568c.537 = constant [9 x i8] c"\5CNNJROY=\00"
@global_var_20354.538 = local_unnamed_addr global i32 0
@global_var_20350.539 = local_unnamed_addr global i32 0
@global_var_15698.541 = constant [6 x i8] c"RZTS=\00"
@global_var_2035c.542 = local_unnamed_addr global i32 0
@global_var_20358.543 = local_unnamed_addr global i32 0
@global_var_156a0.545 = constant [7 x i8] c"XSIXO=\00"
@global_var_20360.546 = local_unnamed_addr global i32 0
@global_var_20364.547 = local_unnamed_addr global i32 0
@global_var_156a8.549 = constant i32 1213361769
@global_var_20368.550 = local_unnamed_addr global i32 0
@global_var_2036c.551 = local_unnamed_addr global i32 0
@global_var_156c0.553 = constant i32 1581864978
@global_var_20374.554 = local_unnamed_addr global i32 0
@global_var_20370.555 = local_unnamed_addr global i32 0
@global_var_156d4.557 = constant [12 x i8] c"S\5CPXNXOKXO=\00"
@global_var_20378.558 = local_unnamed_addr global i32 0
@global_var_2037c.559 = local_unnamed_addr global i32 0
@global_var_156e0.561 = constant i32 1264081170
@global_var_20380.562 = local_unnamed_addr global i32 0
@global_var_20384.563 = local_unnamed_addr global i32 0
@global_var_156f8.565 = constant i32 1264081170
@global_var_20388.566 = local_unnamed_addr global i32 0
@global_var_2038c.567 = local_unnamed_addr global i32 0
@global_var_1570c.569 = constant i32 1208552964
@global_var_20390.570 = local_unnamed_addr global i32 0
@global_var_20394.571 = local_unnamed_addr global i32 0
@global_var_15724.573 = constant [12 x i8] c"YKOnI\5COIHM=\00"
@global_var_2039c.574 = local_unnamed_addr global i32 0
@global_var_20398.575 = local_unnamed_addr global i32 0
@global_var_1e2c0.578 = global i32 0
@global_var_203a0.592 = global i32 0
@global_var_10628.598 = constant i32 -478871519
@global_var_110a8.612 = constant i32 -478805983
@global_var_11484.621 = constant i32 -382906384
@global_var_1e2a4.629 = local_unnamed_addr global i32 0
@global_var_129f4.631 = constant i32 -509591552
@global_var_1e2a8.638 = local_unnamed_addr global i32 0
@global_var_13734.641 = constant i32 -382909968
@global_var_11ae8.642 = constant i32 -494075872
@global_var_ffd0.643 = constant i32 -382910336
@global_var_15730.647 = constant [11 x i8] c"/proc/stat\00"
@global_var_1573c.650 = constant i32 32
@global_var_15740.653 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_15750.655 = constant [10 x i8] c"processor\00"
@global_var_15774.657 = constant i32 604672
@global_var_11ca8.660 = constant i32 -369098421
@global_var_1e2b8.673 = local_unnamed_addr global i32 0
@global_var_1e2bc.675 = local_unnamed_addr global i32 0
@global_var_15778.678 = constant [10 x i8] c"/dev/null\00"
@global_var_118b4.679 = constant i32 -442543860
@global_var_13698.684 = constant i32 -382910352
@global_var_100a0.689 = constant i32 -369094750
@global_var_12674.702 = constant i32 -335545128
@global_var_b7a4.709 = constant i32 -1442840530
@global_var_202d0.711 = local_unnamed_addr global i32 0
@global_var_12ab0.717 = constant i32 -443088884
@global_var_15758.734 = constant i32 114
@global_var_13b58.739 = constant i32 -382906384
@global_var_20003.748 = global i32 0
@global_var_20000.749 = global i32 0
@global_var_13638.759 = constant i32 -509607926
@global_var_15a9c.764 = constant i32 0
@global_var_14e10.765 = constant i32 -382909968
@global_var_1397c.775 = constant i32 -509607928
@global_var_1443c.799 = constant i32 -456978431
@global_var_1e230.2 = external global i8*
@global_var_1e24c.18 = external global i8*
@global_var_1e24d.24 = global i8 0
@global_var_202d8.55 = global i16* null
@1 = internal constant [4 x i8] c"\90\E0\01\00"
@global_var_1e258.74 = external global i8*
@global_var_1e29c.106 = global i16* null
@global_var_1e270.115 = external global i8*
@global_var_1e290.119 = local_unnamed_addr global i8 0
@global_var_1e286.123 = local_unnamed_addr global i16 0
@global_var_1e291.124 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_8098)
  %v31_80a0 = load i32, i32* @r0, align 4
  ret i32 %v31_80a0
}

define i32 @function_80b0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_1e230.2 to i32), i32* %r4.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1e230.2 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %dec_label_pc_80c4, label %dec_label_pc_80e0

dec_label_pc_80c4:                                ; preds = %entry
  store i1 true, i1* @cpsr_z, align 1
  %v3_80d4 = call i32 @function_80ec()
  store i32 %v3_80d4, i32* @r0, align 4
  %v2_80dc = load i32, i32* %r4.global-to-local, align 4
  %v3_80dc = inttoptr i32 %v2_80dc to i8*
  store i8 1, i8* %v3_80dc, align 1
  %v2_80e0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_80e0

dec_label_pc_80e0:                                ; preds = %entry, %dec_label_pc_80c4
  %v2_80e0 = phi i32 [ %v3_80b0, %entry ], [ %v2_80e0.pre, %dec_label_pc_80c4 ]
  store i32 %v2_80e0, i32* %r4.global-to-local, align 4
  %v1_80e4 = load i32, i32* @r0, align 4
  ret i32 %v1_80e4

; uselistorder directives
  uselistorder i8** @global_var_1e230.2, { 1, 0 }
  uselistorder label %dec_label_pc_80e0, { 1, 0 }
}

define i32 @function_80ec() local_unnamed_addr {
dec_label_pc_80ec:
  %v0_80f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_80f0, label %bb, label %dec_label_pc_80ec._crit_edge

dec_label_pc_80ec._crit_edge:                     ; preds = %dec_label_pc_80ec
  br label %bb4

bb:                                               ; preds = %dec_label_pc_80ec
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_80ec._crit_edge, %bb
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8118 = load i32, i32* inttoptr (i32 122892 to i32*), align 4
  %v2_811c = icmp eq i32 %v2_8118, 0
  br i1 %v2_811c, label %dec_label_pc_8134, label %dec_label_pc_8124

dec_label_pc_8124:                                ; preds = %bb4
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8134

dec_label_pc_8134:                                ; preds = %bb4, %dec_label_pc_8124
  ret i32 122892

; uselistorder directives
  uselistorder label %dec_label_pc_8134, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_815c = ptrtoint i32* %stack_var_4 to i32
  %v8_817c = call i32 @function_123e4(i32 ptrtoint (i32* @global_var_c310.14 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 86036, i32 %arg1, i32 %v4_815c)
  %v0_8180 = call i32 @function_118b4()
  ret i32 %v0_8180
}

define i32 @function_8190(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8190:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8190 = icmp eq i32 %arg1, 0
  br i1 %v2_8190, label %dec_label_pc_81d8, label %dec_label_pc_81a0

dec_label_pc_81a0:                                ; preds = %dec_label_pc_8190
  %v0_81a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81a0 = add i32 %v0_81a0, 4
  %v2_81a0 = inttoptr i32 %v1_81a0 to i8*
  %v3_81a0 = load i8, i8* %v2_81a0, align 1
  %v4_81a0 = zext i8 %v3_81a0 to i32
  %v9_81a4 = icmp eq i32 %v4_81a0, %arg3
  br i1 %v9_81a4, label %dec_label_pc_81e4, label %dec_label_pc_81c8.preheader

dec_label_pc_81c8.preheader:                      ; preds = %dec_label_pc_81a0
  br label %dec_label_pc_81c8

dec_label_pc_81b8:                                ; preds = %dec_label_pc_81c8
  %v1_81b8 = add i32 %v0_81c0.in, 12
  %v2_81b8 = inttoptr i32 %v1_81b8 to i8*
  %v3_81b8 = load i8, i8* %v2_81b8, align 1
  %v4_81b8 = zext i8 %v3_81b8 to i32
  %v9_81bc = icmp eq i32 %v4_81b8, %arg3
  br i1 %v9_81bc, label %dec_label_pc_81e4, label %dec_label_pc_81c8

dec_label_pc_81c8:                                ; preds = %dec_label_pc_81c8.preheader, %dec_label_pc_81b8
  %v0_81c0.in = phi i32 [ %v0_81a0, %dec_label_pc_81c8.preheader ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v0_81c8 = phi i32 [ 0, %dec_label_pc_81c8.preheader ], [ %v1_81c8, %dec_label_pc_81b8 ]
  %v0_81c0 = add i32 %v0_81c0.in, 8
  %v1_81c8 = add i32 %v0_81c8, 1
  %v9_81cc = icmp eq i32 %v1_81c8, %arg1
  store i32 %v0_81c0, i32* %r1.global-to-local, align 4
  br i1 %v9_81cc, label %dec_label_pc_81d8, label %dec_label_pc_81b8

dec_label_pc_81d8:                                ; preds = %dec_label_pc_81c8, %dec_label_pc_8190, %dec_label_pc_81e4
  %v0_81d8 = phi i32 [ %arg4, %dec_label_pc_8190 ], [ %v2_81e4, %dec_label_pc_81e4 ], [ %arg4, %dec_label_pc_81c8 ]
  ret i32 %v0_81d8

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81b8, %dec_label_pc_81a0
  %v0_81e4 = phi i32 [ %v0_81a0, %dec_label_pc_81a0 ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v1_81e4 = inttoptr i32 %v0_81e4 to i32*
  %v2_81e4 = load i32, i32* %v1_81e4, align 4
  br label %dec_label_pc_81d8

; uselistorder directives
  uselistorder i32 %v1_81c8, { 1, 0 }
  uselistorder i32 %v0_81c0, { 1, 0, 2 }
  uselistorder i32 %v0_81c0.in, { 1, 0 }
  uselistorder i32 %v0_81a0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_81d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81c8, { 1, 0 }
}

define i32 @function_81ec(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_81ec:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_81ec = icmp eq i32 %arg1, 0
  %v6_81f0 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_81ec, label %dec_label_pc_8234, label %dec_label_pc_81fc

dec_label_pc_81fc:                                ; preds = %dec_label_pc_81ec
  %v0_81fc = load i32, i32* %r1.global-to-local, align 4
  %v1_81fc = add i32 %v0_81fc, 4
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %arg3
  br i1 %v9_8200, label %dec_label_pc_8240, label %dec_label_pc_8224.preheader

dec_label_pc_8224.preheader:                      ; preds = %dec_label_pc_81fc
  br label %dec_label_pc_8224

dec_label_pc_8214:                                ; preds = %dec_label_pc_8224
  %v1_8214 = add i32 %v0_821c.in, 12
  %v2_8214 = inttoptr i32 %v1_8214 to i8*
  %v3_8214 = load i8, i8* %v2_8214, align 1
  %v4_8214 = zext i8 %v3_8214 to i32
  %v9_8218 = icmp eq i32 %v4_8214, %arg3
  br i1 %v9_8218, label %dec_label_pc_8240, label %dec_label_pc_8224

dec_label_pc_8224:                                ; preds = %dec_label_pc_8224.preheader, %dec_label_pc_8214
  %v0_821c.in = phi i32 [ %v0_81fc, %dec_label_pc_8224.preheader ], [ %v0_821c, %dec_label_pc_8214 ]
  %v0_8224 = phi i32 [ 0, %dec_label_pc_8224.preheader ], [ %v1_8224, %dec_label_pc_8214 ]
  %v0_821c = add i32 %v0_821c.in, 8
  %v1_8224 = add i32 %v0_8224, 1
  %v9_8228 = icmp eq i32 %v1_8224, %arg1
  store i32 %v0_821c, i32* %r1.global-to-local, align 4
  br i1 %v9_8228, label %dec_label_pc_8234, label %dec_label_pc_8214

dec_label_pc_8234:                                ; preds = %dec_label_pc_8224, %dec_label_pc_8240, %dec_label_pc_81ec, %dec_label_pc_824c
  %v0_8234 = phi i32 [ %arg4, %dec_label_pc_8240 ], [ %arg4, %dec_label_pc_81ec ], [ %v1_824c, %dec_label_pc_824c ], [ %arg4, %dec_label_pc_8224 ]
  store i32 %v6_81f0, i32* @lr, align 4
  ret i32 %v0_8234

dec_label_pc_8240:                                ; preds = %dec_label_pc_8214, %dec_label_pc_81fc
  %v0_8240 = phi i32 [ %v0_81fc, %dec_label_pc_81fc ], [ %v0_821c, %dec_label_pc_8214 ]
  %v1_8240 = inttoptr i32 %v0_8240 to i32*
  %v2_8240 = load i32, i32* %v1_8240, align 4
  store i32 %v2_8240, i32* @r0, align 4
  %v2_8244 = icmp eq i32 %v2_8240, 0
  br i1 %v2_8244, label %dec_label_pc_8234, label %dec_label_pc_824c

dec_label_pc_824c:                                ; preds = %dec_label_pc_8240
  %v1_824c = call i32 @function_100d4(i32 %v2_8240)
  br label %dec_label_pc_8234

; uselistorder directives
  uselistorder i32 %v1_8224, { 1, 0 }
  uselistorder i32 %v0_821c, { 1, 0, 2 }
  uselistorder i32 %v0_821c.in, { 1, 0 }
  uselistorder i32 %v0_81fc, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8234, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_8224, { 1, 0 }
}

define i32 @function_8258(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8258:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8258 = icmp eq i32 %arg1, 0
  %v3_825c = load i32, i32* @r4, align 4
  store i32 %v3_825c, i32* %stack_var_-8, align 4
  %v6_825c = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8258, label %dec_label_pc_82a0, label %dec_label_pc_8268

dec_label_pc_8268:                                ; preds = %dec_label_pc_8258
  %v0_8268 = load i32, i32* %r1.global-to-local, align 4
  %v1_8268 = add i32 %v0_8268, 4
  %v2_8268 = inttoptr i32 %v1_8268 to i8*
  %v3_8268 = load i8, i8* %v2_8268, align 1
  %v4_8268 = zext i8 %v3_8268 to i32
  %v9_826c = icmp eq i32 %v4_8268, %arg3
  br i1 %v9_826c, label %dec_label_pc_82ac, label %dec_label_pc_8290.preheader

dec_label_pc_8290.preheader:                      ; preds = %dec_label_pc_8268
  br label %dec_label_pc_8290

dec_label_pc_8280:                                ; preds = %dec_label_pc_8290
  %v1_8280 = add i32 %v0_8288.in, 12
  %v2_8280 = inttoptr i32 %v1_8280 to i8*
  %v3_8280 = load i8, i8* %v2_8280, align 1
  %v4_8280 = zext i8 %v3_8280 to i32
  %v9_8284 = icmp eq i32 %v4_8280, %arg3
  br i1 %v9_8284, label %dec_label_pc_82ac, label %dec_label_pc_8290

dec_label_pc_8290:                                ; preds = %dec_label_pc_8290.preheader, %dec_label_pc_8280
  %v0_8288.in = phi i32 [ %v0_8268, %dec_label_pc_8290.preheader ], [ %v0_8288, %dec_label_pc_8280 ]
  %v0_8290 = phi i32 [ 0, %dec_label_pc_8290.preheader ], [ %v1_8290, %dec_label_pc_8280 ]
  %v0_8288 = add i32 %v0_8288.in, 8
  %v1_8290 = add i32 %v0_8290, 1
  store i32 %v1_8290, i32* @lr, align 4
  %v9_8294 = icmp eq i32 %v1_8290, %arg1
  store i32 %v0_8288, i32* %r1.global-to-local, align 4
  br i1 %v9_8294, label %dec_label_pc_82a0, label %dec_label_pc_8280

dec_label_pc_82a0:                                ; preds = %dec_label_pc_8290, %dec_label_pc_82ac, %dec_label_pc_8258, %dec_label_pc_82b8
  %v2_82a4 = phi i32 [ %v3_825c, %dec_label_pc_82ac ], [ %v3_825c, %dec_label_pc_8258 ], [ %v2_82a4.pre, %dec_label_pc_82b8 ], [ %v3_825c, %dec_label_pc_8290 ]
  %v0_82a0 = phi i32 [ %arg4, %dec_label_pc_82ac ], [ %arg4, %dec_label_pc_8258 ], [ %v3_82bc, %dec_label_pc_82b8 ], [ %arg4, %dec_label_pc_8290 ]
  store i32 %v2_82a4, i32* @r4, align 4
  store i32 %v6_825c, i32* @lr, align 4
  ret i32 %v0_82a0

dec_label_pc_82ac:                                ; preds = %dec_label_pc_8280, %dec_label_pc_8268
  %v0_82ac = phi i32 [ %v0_8268, %dec_label_pc_8268 ], [ %v0_8288, %dec_label_pc_8280 ]
  %v1_82ac = inttoptr i32 %v0_82ac to i32*
  %v2_82ac = load i32, i32* %v1_82ac, align 4
  %v2_82b0 = icmp eq i32 %v2_82ac, 0
  br i1 %v2_82b0, label %dec_label_pc_82a0, label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82ac
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_82bc = inttoptr i32 %v2_82ac to i8*
  %v3_82bc = call i32 @function_f8ac(i8* %v2_82bc, i32 10)
  %v2_82a4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_82a0

; uselistorder directives
  uselistorder i32 %v1_8290, { 1, 2, 0 }
  uselistorder i32 %v0_8288, { 1, 0, 2 }
  uselistorder i32 %v0_8288.in, { 1, 0 }
  uselistorder i32 %v0_8268, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_82a0, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_8290, { 1, 0 }
}

define i32 @function_82c8(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_82c8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_82c8 = load i32, i32* @r5, align 4
  %v9_82c8 = load i32, i32* @r6, align 4
  %v12_82c8 = load i32, i32* @r7, align 4
  %v18_82c8 = load i32, i32* @sb, align 4
  %v24_82c8 = load i32, i32* @fp, align 4
  %v2_82cc = icmp ugt i32 %arg2, 2
  %v7_82cc = icmp eq i32 %arg2, 3
  store i1 %v7_82cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_82d8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_82d8, i32* @r5, align 4
  %v2_82dc = xor i1 %v7_82cc, true
  %v3_82dc = and i1 %v2_82cc, %v2_82dc
  br i1 %v3_82dc, label %dec_label_pc_82ec, label %dec_label_pc_82e0

dec_label_pc_82e0:                                ; preds = %dec_label_pc_8330, %.dec_label_pc_82e0_crit_edge, %dec_label_pc_8324, %dec_label_pc_8314, %dec_label_pc_82ec, %dec_label_pc_82c8, %dec_label_pc_84d8
  %v1_82e8 = phi i32 [ %v1_82e8.pre, %.dec_label_pc_82e0_crit_edge ], [ %v1_82f0, %dec_label_pc_8330 ], [ %v1_82f0, %dec_label_pc_8324 ], [ %v1_82f0, %dec_label_pc_8314 ], [ %v1_82f0, %dec_label_pc_82ec ], [ %v0_82d8, %dec_label_pc_82c8 ], [ %v0_84dc, %dec_label_pc_84d8 ]
  store i32 %v6_82c8, i32* @r5, align 4
  store i32 %v9_82c8, i32* @r6, align 4
  store i32 %v12_82c8, i32* @r7, align 4
  store i32 %v18_82c8, i32* @sb, align 4
  store i32 %v24_82c8, i32* @fp, align 4
  ret i32 %v1_82e8

dec_label_pc_82ec:                                ; preds = %dec_label_pc_82c8
  %v1_82ec = inttoptr i32 %v0_82d8 to i32*
  %v2_82ec = load i32, i32* %v1_82ec, align 4
  %v1_82f0 = and i32 %v2_82ec, 16711680
  store i32 %v1_82f0, i32* %r0.global-to-local, align 4
  %v3_82f4 = udiv i32 %v2_82ec, 16777216
  %v1_82f8 = and i32 %v2_82ec, 65280
  %v4_82fc = udiv i32 %v1_82f0, 256
  %v5_82fc = or i32 %v4_82fc, %v3_82f4
  %v4_8300 = mul nuw nsw i32 %v1_82f8, 256
  %v5_8300 = or i32 %v5_82fc, %v4_8300
  store i32 %v5_8300, i32* %r3.global-to-local, align 4
  %v5_8304 = call i32 @llvm.bswap.i32(i32 %v2_82ec)
  %v7_8308 = icmp eq i32 %arg2, 4
  store i1 %v7_8308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8308, label %dec_label_pc_82e0, label %dec_label_pc_8314

dec_label_pc_8314:                                ; preds = %dec_label_pc_82ec
  %v1_8314 = add i32 %v0_82d8, 4
  %v2_8314 = inttoptr i32 %v1_8314 to i8*
  %v3_8314 = load i8, i8* %v2_8314, align 1
  %v4_8314 = zext i8 %v3_8314 to i32
  store i32 %v4_8314, i32* %r3.global-to-local, align 4
  %v7_8318 = icmp eq i32 %arg2, 5
  store i1 %v7_8318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8318, label %dec_label_pc_82e0, label %dec_label_pc_8324

dec_label_pc_8324:                                ; preds = %dec_label_pc_8314
  %v1_8324 = add i32 %v0_82d8, 5
  %v2_8324 = inttoptr i32 %v1_8324 to i8*
  %v3_8324 = load i8, i8* %v2_8324, align 1
  %v4_8324 = zext i8 %v3_8324 to i32
  store i32 %v4_8324, i32* @sb, align 4
  %v2_8328 = icmp eq i8 %v3_8324, 0
  store i1 %v2_8328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8328, label %dec_label_pc_82e0, label %dec_label_pc_8330

dec_label_pc_8330:                                ; preds = %dec_label_pc_8324
  %v2_8334 = mul nuw nsw i32 %v4_8324, 5
  store i32 %v2_8334, i32* @r7, align 4
  %v1_8338 = add i32 %arg2, -6
  store i32 %v1_8338, i32* %r3.global-to-local, align 4
  %v3_833c = icmp ult i32 %v1_8338, %v2_8334
  %v9_833c = icmp eq i32 %v1_8338, %v2_8334
  store i1 %v9_833c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_833c, label %dec_label_pc_82e0, label %dec_label_pc_8344

dec_label_pc_8344:                                ; preds = %dec_label_pc_8330
  store i32 %v4_8324, i32* %r0.global-to-local, align 4
  store i32 %v1_8338, i32* @r6, align 4
  %v2_8350 = call i32 @function_10eec(i32 %v4_8324, i32 24)
  store i32 %v2_8350, i32* %ip.global-to-local, align 4
  %v0_835c = load i32, i32* @r7, align 4
  %v1_835c = load i32, i32* @r4, align 4
  %v2_835c = sub i32 %v1_835c, %v0_835c
  store i32 %v2_835c, i32* @r7, align 4
  %v0_8360 = load i32, i32* @r5, align 4
  %v1_8360 = add i32 %v0_8360, 11
  store i32 %v1_8360, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8364

dec_label_pc_8364:                                ; preds = %dec_label_pc_8364, %dec_label_pc_8344
  %v1_8368 = phi i32 [ %v1_8394, %dec_label_pc_8364 ], [ %v2_8350, %dec_label_pc_8344 ]
  %v0_8364 = phi i32 [ %v1_8390, %dec_label_pc_8364 ], [ %v1_8360, %dec_label_pc_8344 ]
  %v1_8364 = add i32 %v0_8364, -5
  %v2_8364 = inttoptr i32 %v1_8364 to i32*
  %v3_8364 = load i32, i32* %v2_8364, align 4
  store i32 %v3_8364, i32* @r1, align 4
  %v2_8368 = add i32 %v1_8368, 16
  %v3_8368 = inttoptr i32 %v2_8368 to i32*
  store i32 %v3_8364, i32* %v3_8368, align 4
  %v0_836c = load i32, i32* @r6, align 4
  %v1_836c = add i32 %v0_836c, -5
  store i32 %v1_836c, i32* @r6, align 4
  %v0_8370 = load i32, i32* %r0.global-to-local, align 4
  %v1_8370 = add i32 %v0_8370, -1
  %v2_8370 = inttoptr i32 %v1_8370 to i8*
  %v3_8370 = load i8, i8* %v2_8370, align 1
  %v0_8374 = load i32, i32* @r7, align 4
  %v1_8374 = add i32 %v0_8374, -6
  store i32 %v1_8374, i32* %r3.global-to-local, align 4
  store i32 2, i32* @lr, align 4
  %v9_837c = icmp eq i32 %v1_836c, %v1_8374
  store i1 %v9_837c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_8370, i32* @r4, align 4
  %v2_8384 = load i32, i32* %ip.global-to-local, align 4
  %v3_8384 = add i32 %v2_8384, 20
  %v4_8384 = inttoptr i32 %v3_8384 to i8*
  store i8 %v3_8370, i8* %v4_8384, align 1
  %v0_8388 = load i32, i32* @r1, align 4
  %v1_8388 = load i32, i32* %ip.global-to-local, align 4
  %v2_8388 = add i32 %v1_8388, 4
  %v3_8388 = inttoptr i32 %v2_8388 to i32*
  store i32 %v0_8388, i32* %v3_8388, align 4
  %v0_838c = load i32, i32* @lr, align 4
  %v1_838c = trunc i32 %v0_838c to i16
  %v2_838c = load i32, i32* %ip.global-to-local, align 4
  %v3_838c = inttoptr i32 %v2_838c to i16*
  store i16 %v1_838c, i16* %v3_838c, align 2
  %v0_8390 = load i32, i32* %r0.global-to-local, align 4
  %v1_8390 = add i32 %v0_8390, 5
  store i32 %v1_8390, i32* %r0.global-to-local, align 4
  %v0_8394 = load i32, i32* %ip.global-to-local, align 4
  %v1_8394 = add i32 %v0_8394, 24
  store i32 %v1_8394, i32* %ip.global-to-local, align 4
  %v0_8398 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8398, label %dec_label_pc_839c, label %dec_label_pc_8364

dec_label_pc_839c:                                ; preds = %dec_label_pc_8364
  %v0_839c = load i32, i32* @r6, align 4
  %v2_839c = icmp eq i32 %v0_839c, 0
  store i1 %v2_839c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_839c, label %dec_label_pc_849c, label %dec_label_pc_83a4

dec_label_pc_83a4:                                ; preds = %dec_label_pc_839c
  %v0_83a4 = load i32, i32* @r4, align 4
  %v1_83a4 = inttoptr i32 %v0_83a4 to i8*
  %v2_83a4 = load i8, i8* %v1_83a4, align 1
  %v3_83a4 = zext i8 %v2_83a4 to i32
  store i32 %v3_83a4, i32* @r5, align 4
  %v2_83a8 = icmp eq i8 %v2_83a4, 0
  store i1 %v2_83a8, i1* %cpsr_z.global-to-local, align 1
  %v0_83ac = load i32, i32* @r7, align 4
  %v1_83ac = add i32 %v0_83ac, -7
  store i32 %v1_83ac, i32* @r8, align 4
  br i1 %v2_83a8, label %bb, label %dec_label_pc_83b8

bb:                                               ; preds = %dec_label_pc_83a4
  store i32 %v3_83a4, i32* @r6, align 4
  br label %dec_label_pc_846c

dec_label_pc_83b8:                                ; preds = %dec_label_pc_83a4
  store i32 %v3_83a4, i32* %r0.global-to-local, align 4
  %v2_83c0 = call i32 @function_10eec(i32 %v3_83a4, i32 8)
  store i32 %v2_83c0, i32* %r0.global-to-local, align 4
  %v0_83c4 = load i32, i32* @r8, align 4
  %v2_83c4 = icmp eq i32 %v0_83c4, 0
  store i1 %v2_83c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83c0, i32* @r6, align 4
  br i1 %v2_83c4, label %dec_label_pc_849c, label %dec_label_pc_83d0

dec_label_pc_83d0:                                ; preds = %dec_label_pc_83b8
  %v0_83d0 = load i32, i32* @r4, align 4
  %v1_83d0 = add i32 %v0_83d0, 1
  %v2_83d0 = inttoptr i32 %v1_83d0 to i8*
  %v3_83d0 = load i8, i8* %v2_83d0, align 1
  %v0_83d4 = load i32, i32* @r7, align 4
  %v7_83d4 = icmp eq i32 %v0_83d4, 8
  store i1 %v7_83d4, i1* %cpsr_z.global-to-local, align 1
  %v3_83d8 = add i32 %v2_83c0, 4
  %v4_83d8 = inttoptr i32 %v3_83d8 to i8*
  store i8 %v3_83d0, i8* %v4_83d8, align 1
  %v0_83dc = load i32, i32* @r4, align 4
  %v1_83dc = add i32 %v0_83dc, 1
  store i32 %v1_83dc, i32* %r3.global-to-local, align 4
  %v0_83e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83e0, label %dec_label_pc_849c, label %dec_label_pc_83e4

dec_label_pc_83e4:                                ; preds = %dec_label_pc_83d0
  %v1_83e4 = add i32 %v0_83dc, 2
  %v2_83e4 = inttoptr i32 %v1_83e4 to i8*
  %v3_83e4 = load i8, i8* %v2_83e4, align 1
  %v4_83e4 = zext i8 %v3_83e4 to i32
  store i32 %v4_83e4, i32* @r4, align 4
  %v0_83e8 = load i32, i32* @r7, align 4
  %v1_83e8 = add i32 %v0_83e8, -9
  store i32 %v1_83e8, i32* @r7, align 4
  %v9_83ec = icmp eq i32 %v1_83e8, %v4_83e4
  store i1 %v9_83ec, i1* %cpsr_z.global-to-local, align 1
  %v5_83f4 = icmp slt i32 %v1_83e8, %v4_83e4
  br i1 %v5_83f4, label %dec_label_pc_849c, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_83e4
  %v7_83f44711 = add i32 %v0_83dc, 3
  store i32 %v7_83f44711, i32* @r8, align 4
  %v6_83f8812 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_83f8812, i32* @sl, align 4
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_8444

dec_label_pc_8408:                                ; preds = %dec_label_pc_8444
  %v0_8408 = load i32, i32* @r7, align 4
  %v1_8408 = load i32, i32* @r4, align 4
  %v2_8408 = sub i32 %v0_8408, %v1_8408
  %v9_8408 = icmp eq i32 %v0_8408, %v1_8408
  store i1 %v9_8408, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8408, label %dec_label_pc_849c, label %dec_label_pc_8410

dec_label_pc_8410:                                ; preds = %dec_label_pc_8408
  %v3_8410 = mul i32 %v0_8464, 8
  store i32 %v3_8410, i32* %r3.global-to-local, align 4
  %v1_8414 = load i32, i32* @r8, align 4
  %v2_8414 = add i32 %v1_8414, %v1_8408
  %v3_8414 = inttoptr i32 %v2_8414 to i8*
  %v4_8414 = load i8, i8* %v3_8414, align 1
  %v0_8418 = load i32, i32* @r6, align 4
  %v2_8418 = add i32 %v0_8418, %v3_8410
  store i32 %v2_8418, i32* @sl, align 4
  %v1_841c = add i32 %v2_8408, -1
  store i32 %v1_841c, i32* %r3.global-to-local, align 4
  %v7_841c = icmp eq i32 %v2_8408, 1
  store i1 %v7_841c, i1* %cpsr_z.global-to-local, align 1
  %v3_8420 = add i32 %v2_8418, 4
  %v4_8420 = inttoptr i32 %v3_8420 to i8*
  store i8 %v4_8414, i8* %v4_8420, align 1
  %v0_8424 = load i32, i32* @r4, align 4
  %v1_8424 = load i32, i32* @r8, align 4
  %v2_8424 = add i32 %v1_8424, %v0_8424
  %v0_8428 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8428, label %dec_label_pc_849c, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8410
  %v1_842c = add i32 %v2_8424, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v4_842c = zext i8 %v3_842c to i32
  store i32 %v4_842c, i32* @r4, align 4
  %v0_8430 = load i32, i32* %r3.global-to-local, align 4
  %v1_8430 = add i32 %v0_8430, -1
  store i32 %v1_8430, i32* @r7, align 4
  %v2_8434 = sub i32 %v1_8430, %v4_842c
  %tmp46 = sub i32 0, %v2_8434
  %v6_8434 = and i32 %v1_8430, %tmp46
  %v7_8434 = icmp slt i32 %v6_8434, 0
  %v8_8434 = icmp slt i32 %v2_8434, 0
  %v9_8434 = icmp eq i32 %v1_8430, %v4_842c
  store i1 %v9_8434, i1* %cpsr_z.global-to-local, align 1
  %v2_843c = xor i1 %v8_8434, %v7_8434
  br i1 %v2_843c, label %dec_label_pc_849c, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v2_8424, 2
  store i32 %v1_8440, i32* @r8, align 4
  br label %dec_label_pc_8444

dec_label_pc_8444:                                ; preds = %.thread10, %dec_label_pc_8440
  %v0_8448 = phi i32 [ %v4_83e4, %.thread10 ], [ %v4_842c, %dec_label_pc_8440 ]
  %v2_8448 = add nuw nsw i32 %v0_8448, 1
  store i32 %v2_8448, i32* %r0.global-to-local, align 4
  %v2_844c = call i32 @function_10eec(i32 %v2_8448, i32 1)
  store i32 %v2_844c, i32* %r0.global-to-local, align 4
  %v0_8450 = load i32, i32* @fp, align 4
  %v1_8450 = add i32 %v0_8450, 1
  store i32 %v1_8450, i32* @fp, align 4
  %v1_8454 = load i32, i32* @sl, align 4
  %v2_8454 = inttoptr i32 %v1_8454 to i32*
  store i32 %v2_844c, i32* %v2_8454, align 4
  %v0_8458 = load i32, i32* @r8, align 4
  %v0_845c = load i32, i32* @r4, align 4
  %v3_8460 = call i32 @function_f7f8(i32 %v2_844c, i32 %v0_8458, i32 %v0_845c)
  store i32 %v3_8460, i32* %r0.global-to-local, align 4
  %v0_8464 = load i32, i32* @fp, align 4
  %v1_8464 = load i32, i32* @r5, align 4
  %v9_8464 = icmp eq i32 %v0_8464, %v1_8464
  store i1 %v9_8464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8464, label %dec_label_pc_846c, label %dec_label_pc_8408

dec_label_pc_846c:                                ; preds = %dec_label_pc_8444, %bb
  %v0_846c = call i32 @function_1003c()
  store i32 %v0_846c, i32* @r0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8474 = inttoptr i32 %v0_846c to i32*
  store i32 0, i32* %v2_8474, align 4
  %v0_8478 = call i32 @function_fd2c()
  store i32 %v0_8478, i32* %r0.global-to-local, align 4
  %v7_847c = icmp eq i32 %v0_8478, -1
  %. = zext i1 %v7_847c to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %v2_8488 = icmp eq i32 %v0_8478, 0
  store i1 %v2_8488, i1* %cpsr_z.global-to-local, align 1
  %tmp49 = icmp slt i32 %v0_8478, 1
  br i1 %tmp49, label %bb50, label %.thread14

.thread14:                                        ; preds = %dec_label_pc_846c
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_849c

bb50:                                             ; preds = %dec_label_pc_846c
  %v2_8494 = icmp eq i1 %v7_847c, false
  store i1 %v2_8494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8494, label %dec_label_pc_84e4, label %dec_label_pc_849c

dec_label_pc_849c:                                ; preds = %dec_label_pc_842c, %dec_label_pc_8410, %dec_label_pc_8408, %dec_label_pc_83e4, %.thread14, %dec_label_pc_83d0, %dec_label_pc_83b8, %dec_label_pc_839c, %bb50
  store i32 %v2_8350, i32* %r3.global-to-local, align 4
  %v2_84a0 = icmp eq i32 %v2_8350, 0
  store i1 %v2_84a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84a0, label %bb52, label %bb51

bb51:                                             ; preds = %dec_label_pc_849c
  store i32 %v2_8350, i32* %r0.global-to-local, align 4
  br label %bb52

bb52:                                             ; preds = %dec_label_pc_849c, %bb51
  store i32 33964, i32* @lr, align 4
  %v1_84a8 = xor i1 %v2_84a0, true
  call void @__pseudo_cond_branch(i1 %v1_84a8, i32 ptrtoint (i32* @global_var_11638.16 to i32))
  %v0_84ac = load i32, i32* @r6, align 4
  %v2_84ac = icmp eq i32 %v0_84ac, 0
  store i1 %v2_84ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84ac, label %.dec_label_pc_82e0_crit_edge, label %dec_label_pc_84b4

.dec_label_pc_82e0_crit_edge:                     ; preds = %bb52
  %v1_82e8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_82e0

dec_label_pc_84b4:                                ; preds = %bb52
  %v0_84b4 = load i32, i32* @r5, align 4
  %v2_84b4 = icmp eq i32 %v0_84b4, 0
  store i1 %v2_84b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84b4, label %dec_label_pc_84d8, label %dec_label_pc_84bc

dec_label_pc_84bc:                                ; preds = %dec_label_pc_84b4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_84c0

dec_label_pc_84c0:                                ; preds = %dec_label_pc_84c0, %dec_label_pc_84bc
  %v1_84c0 = phi i32 [ 0, %dec_label_pc_84bc ], [ %v1_84cc, %dec_label_pc_84c0 ]
  %v0_84c0 = phi i32 [ %v0_84ac, %dec_label_pc_84bc ], [ %v0_84d8.pre, %dec_label_pc_84c0 ]
  %v4_84c0 = mul i32 %v1_84c0, 8
  %v5_84c0 = add i32 %v4_84c0, %v0_84c0
  %v6_84c0 = inttoptr i32 %v5_84c0 to i32*
  %v7_84c0 = load i32, i32* %v6_84c0, align 4
  store i32 %v7_84c0, i32* %r0.global-to-local, align 4
  %v2_84c4 = icmp eq i32 %v7_84c0, 0
  store i1 %v2_84c4, i1* %cpsr_z.global-to-local, align 1
  store i32 33996, i32* @lr, align 4
  %v1_84c8 = xor i1 %v2_84c4, true
  call void @__pseudo_cond_branch(i1 %v1_84c8, i32 ptrtoint (i32* @global_var_11638.16 to i32))
  %v0_84cc = load i32, i32* @r4, align 4
  %v1_84cc = add i32 %v0_84cc, 1
  store i32 %v1_84cc, i32* @r4, align 4
  %v0_84d0 = load i32, i32* @r5, align 4
  %v9_84d0 = icmp eq i32 %v0_84d0, %v1_84cc
  store i1 %v9_84d0, i1* %cpsr_z.global-to-local, align 1
  %v0_84d8.pre = load i32, i32* @r6, align 4
  br i1 %v9_84d0, label %dec_label_pc_84d8, label %dec_label_pc_84c0

dec_label_pc_84d8:                                ; preds = %dec_label_pc_84c0, %dec_label_pc_84b4
  %v0_84d8 = phi i32 [ %v0_84ac, %dec_label_pc_84b4 ], [ %v0_84d8.pre, %dec_label_pc_84c0 ]
  store i32 %v0_84d8, i32* @r0, align 4
  %v0_84dc = call i32 @function_11638()
  store i32 %v0_84dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_82e0

dec_label_pc_84e4:                                ; preds = %bb50
  store i32 ptrtoint (i8** @global_var_1e24c.18 to i32), i32* %r3.global-to-local, align 4
  %v2_84e8 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_84e8 = zext i8 %v2_84e8 to i32
  store i32 %v3_84e8, i32* %r0.global-to-local, align 4
  %v2_84ec = icmp eq i8 %v2_84e8, 0
  store i1 %v2_84ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84ec, label %dec_label_pc_8550, label %dec_label_pc_84f4

dec_label_pc_84f4:                                ; preds = %dec_label_pc_84e4
  store i32 ptrtoint (i32* @global_var_1e250.20 to i32), i32* %r3.global-to-local, align 4
  %v2_84f8 = load i32, i32* @global_var_1e250.20, align 4
  store i32 %v2_84f8, i32* @r1, align 4
  %v1_84fc = inttoptr i32 %v2_84f8 to i32*
  %v2_84fc = load i32, i32* %v1_84fc, align 4
  store i32 %v2_84fc, i32* %ip.global-to-local, align 4
  %v1_8504 = add i32 %v2_84fc, 4
  %v2_8504 = inttoptr i32 %v1_8504 to i8*
  %v3_8504 = load i8, i8* %v2_8504, align 1
  %v4_8504 = zext i8 %v3_8504 to i32
  store i32 %v4_8504, i32* %r3.global-to-local, align 4
  %v9_8508 = icmp eq i8 %v3_8504, %v3_8314
  store i1 %v9_8508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8508, label %dec_label_pc_8530, label %dec_label_pc_8510

dec_label_pc_8510:                                ; preds = %dec_label_pc_84f4, %dec_label_pc_851c
  %v0_8510 = phi i32 [ %v1_8510, %dec_label_pc_851c ], [ 0, %dec_label_pc_84f4 ]
  %v1_8510 = add i32 %v0_8510, 1
  %v9_8514 = icmp eq i32 %v1_8510, %v3_84e8
  store i1 %v9_8514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8514, label %dec_label_pc_8550, label %dec_label_pc_851c

dec_label_pc_851c:                                ; preds = %dec_label_pc_8510
  %v4_851c = mul i32 %v1_8510, 4
  %v5_851c = add i32 %v4_851c, %v2_84f8
  %v6_851c = inttoptr i32 %v5_851c to i32*
  %v7_851c = load i32, i32* %v6_851c, align 4
  store i32 %v7_851c, i32* %ip.global-to-local, align 4
  %v1_8524 = add i32 %v7_851c, 4
  %v2_8524 = inttoptr i32 %v1_8524 to i8*
  %v3_8524 = load i8, i8* %v2_8524, align 1
  %v4_8524 = zext i8 %v3_8524 to i32
  store i32 %v4_8524, i32* %r3.global-to-local, align 4
  %v9_8528 = icmp eq i8 %v3_8524, %v3_8314
  store i1 %v9_8528, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8528, label %dec_label_pc_8530, label %dec_label_pc_8510

dec_label_pc_8530:                                ; preds = %dec_label_pc_851c, %dec_label_pc_84f4
  %v0_8544 = phi i32 [ %v2_84fc, %dec_label_pc_84f4 ], [ %v7_851c, %dec_label_pc_851c ]
  store i32 %v5_8304, i32* %r0.global-to-local, align 4
  %v0_8538 = load i32, i32* @sb, align 4
  store i32 %v0_8538, i32* @r1, align 4
  %v0_8540 = load i32, i32* @r5, align 4
  store i32 %v0_8540, i32* %r3.global-to-local, align 4
  %v1_8544 = inttoptr i32 %v0_8544 to i32*
  %v2_8544 = load i32, i32* %v1_8544, align 4
  store i32 %v2_8544, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v2_8544)
  br label %dec_label_pc_8550

dec_label_pc_8550:                                ; preds = %dec_label_pc_8510, %dec_label_pc_84e4, %dec_label_pc_8530
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_8554 = call i32 @function_119dc(i32 0)
  store i32 %v1_8554, i32* %r0.global-to-local, align 4
  %v0_8558 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8558, label %bb54, label %.thread17

bb54:                                             ; preds = %dec_label_pc_8550
  br label %.thread17

.thread17:                                        ; preds = %dec_label_pc_8550, %bb54
  ret i32 %v1_8554

; uselistorder directives
  uselistorder i1 %v9_8528, { 1, 0 }
  uselistorder i32 %v1_8510, { 1, 2, 0 }
  uselistorder i1 %v9_8508, { 1, 0 }
  uselistorder i32 %v0_84dc, { 1, 0 }
  uselistorder i32 %v1_84cc, { 1, 2, 0 }
  uselistorder i1 %v2_84a0, { 0, 2, 1 }
  uselistorder i1 %v2_8494, { 1, 0 }
  uselistorder i1 %v7_847c, { 1, 0 }
  uselistorder i32 %v0_8478, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8464, { 1, 0 }
  uselistorder i32 %v2_8434, { 1, 0 }
  uselistorder i32 %v1_8430, { 2, 0, 1, 3 }
  uselistorder i32 %v4_842c, { 0, 2, 1, 3 }
  uselistorder i32 %v3_8410, { 1, 0 }
  uselistorder i32 %v3_83a4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8394, { 1, 0 }
  uselistorder i32 %v1_8390, { 1, 0 }
  uselistorder i32 %v2_8350, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_8324, { 1, 0, 2, 3 }
  uselistorder i32 %v1_82f0, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_82ec, { 1, 2, 0, 3 }
  uselistorder i32 %v0_82d8, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 10, 11, 12, 13, 15, 14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %r0.global-to-local, { 18, 16, 15, 17, 22, 19, 20, 21, 14, 2, 4, 3, 10, 11, 5, 6, 7, 8, 9, 12, 13, 0, 1 }
  uselistorder i32* %ip.global-to-local, { 6, 7, 8, 0, 1, 2, 3, 4, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 24, 21, 22, 23, 25, 26, 27, 28, 29, 30, 1, 0, 2, 7, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %dec_label_pc_8550, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8510, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %dec_label_pc_849c, { 8, 4, 0, 1, 2, 3, 5, 6, 7 }
  uselistorder label %dec_label_pc_8444, { 1, 0 }
  uselistorder label %dec_label_pc_82e0, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @function_8560(i32 %arg1) local_unnamed_addr {
dec_label_pc_8560:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8560 = load i32, i32* @r4, align 4
  store i32 %v3_8560, i32* %stack_var_-24, align 4
  %v6_8560 = load i32, i32* @r5, align 4
  %v9_8560 = load i32, i32* @r6, align 4
  %v12_8560 = load i32, i32* @r7, align 4
  %v15_8560 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_856c = call i32 @function_10eec(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1e24c.18 to i32), i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1e250.20 to i32), i32* @r6, align 4
  store i32 44636, i32* %r2.global-to-local, align 4
  store i32 %v2_856c, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e24d.24 to i32), i32* %r1.global-to-local, align 4
  %v2_858c = load i32, i32* @global_var_1e250.20, align 4
  %v2_8590 = inttoptr i32 %v2_856c to i32*
  store i32 44636, i32* %v2_8590, align 4
  %v3_8594 = load i32, i32* @r4, align 4
  %v4_8594 = add i32 %v3_8594, 4
  %v5_8594 = inttoptr i32 %v4_8594 to i8*
  store i8 0, i8* %v5_8594, align 1
  %v0_8598 = load i32, i32* %r1.global-to-local, align 4
  %v3_8598 = mul i32 %v0_8598, 4
  store i32 %v3_8598, i32* %r1.global-to-local, align 4
  %v5_859c = inttoptr i32 %v2_858c to i32*
  %v6_859c = call i32 @function_11020(i32* %v5_859c, i32 %v3_8598, i32 44636, i32 0)
  %v2_85a0 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_85a0 = zext i8 %v2_85a0 to i32
  store i32 %v6_859c, i32* %r2.global-to-local, align 4
  %v0_85a8 = load i32, i32* @r4, align 4
  %v5_85a8 = mul nuw nsw i32 %v3_85a0, 4
  %v6_85a8 = add i32 %v5_85a8, %v6_859c
  %v7_85a8 = inttoptr i32 %v6_85a8 to i32*
  store i32 %v0_85a8, i32* %v7_85a8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1e24d.24 to i32), i32* %r3.global-to-local, align 4
  %v1_85b8 = load i32, i32* @r6, align 4
  %v2_85b8 = inttoptr i32 %v1_85b8 to i32*
  store i32 %v6_859c, i32* %v2_85b8, align 4
  %v0_85bc = load i32, i32* %r3.global-to-local, align 4
  %v1_85bc = trunc i32 %v0_85bc to i8
  %v2_85bc = load i32, i32* @r5, align 4
  %v3_85bc = inttoptr i32 %v2_85bc to i8*
  store i8 %v1_85bc, i8* %v3_85bc, align 1
  %v2_85c0 = call i32 @function_10eec(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_b428.26 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_85c0, i32* @r4, align 4
  store i32 ptrtoint (i8* @global_var_1e24d.24 to i32), i32* %r1.global-to-local, align 4
  %v2_85d8 = load i32, i32* @global_var_1e250.20, align 4
  %v2_85dc = inttoptr i32 %v2_85c0 to i32*
  store i32 ptrtoint (i32* @global_var_b428.26 to i32), i32* %v2_85dc, align 4
  %v0_85e0 = load i32, i32* @r7, align 4
  %v1_85e0 = trunc i32 %v0_85e0 to i8
  %v2_85e0 = load i32, i32* @r4, align 4
  %v3_85e0 = add i32 %v2_85e0, 4
  %v4_85e0 = inttoptr i32 %v3_85e0 to i8*
  store i8 %v1_85e0, i8* %v4_85e0, align 1
  %v0_85e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_85e4 = mul i32 %v0_85e4, 4
  store i32 %v3_85e4, i32* %r1.global-to-local, align 4
  %v4_85e8 = inttoptr i32 %v2_85d8 to i32*
  %v5_85e8 = call i32 @function_11020(i32* %v4_85e8, i32 %v3_85e4, i32 %v6_859c, i32 ptrtoint (i32* @global_var_b428.26 to i32))
  %v2_85ec = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_85ec = zext i8 %v2_85ec to i32
  store i32 %v3_85ec, i32* %r3.global-to-local, align 4
  store i32 %v5_85e8, i32* %r2.global-to-local, align 4
  %v0_85f4 = load i32, i32* @r4, align 4
  %v5_85f4 = mul nuw nsw i32 %v3_85ec, 4
  %v6_85f4 = add i32 %v5_85f4, %v5_85e8
  %v7_85f4 = inttoptr i32 %v6_85f4 to i32*
  store i32 %v0_85f4, i32* %v7_85f4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_85fc = load i32, i32* %r3.global-to-local, align 4
  %v1_85fc = load i32, i32* @r7, align 4
  %v2_85fc = add i32 %v1_85fc, %v0_85fc
  store i32 %v2_85fc, i32* %r3.global-to-local, align 4
  %v1_8604 = trunc i32 %v2_85fc to i8
  %v2_8604 = load i32, i32* @r5, align 4
  %v3_8604 = inttoptr i32 %v2_8604 to i8*
  store i8 %v1_8604, i8* %v3_8604, align 1
  %v0_8608 = load i32, i32* %r2.global-to-local, align 4
  %v1_8608 = load i32, i32* @r6, align 4
  %v2_8608 = inttoptr i32 %v1_8608 to i32*
  store i32 %v0_8608, i32* %v2_8608, align 4
  %v2_860c = call i32 @function_10eec(i32 %v1_85fc, i32 8)
  %v2_8610 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_8610 = zext i8 %v2_8610 to i32
  store i32 ptrtoint (i32* @global_var_b894.28 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_860c, i32* @r4, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8620 = load i32, i32* @r7, align 4
  %v2_8620 = add i32 %v1_8620, %v3_8610
  store i32 %v2_8620, i32* %r1.global-to-local, align 4
  %v2_8624 = load i32, i32* @global_var_1e250.20, align 4
  %v2_8628 = inttoptr i32 %v2_860c to i32*
  store i32 ptrtoint (i32* @global_var_b894.28 to i32), i32* %v2_8628, align 4
  %v3_862c = load i32, i32* @r4, align 4
  %v4_862c = add i32 %v3_862c, 4
  %v5_862c = inttoptr i32 %v4_862c to i8*
  store i8 2, i8* %v5_862c, align 1
  %v0_8630 = load i32, i32* %r1.global-to-local, align 4
  %v3_8630 = mul i32 %v0_8630, 4
  store i32 %v3_8630, i32* %r1.global-to-local, align 4
  %v5_8634 = inttoptr i32 %v2_8624 to i32*
  %v6_8634 = call i32 @function_11020(i32* %v5_8634, i32 %v3_8630, i32 ptrtoint (i32* @global_var_b894.28 to i32), i32 2)
  %v2_8638 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_8638 = zext i8 %v2_8638 to i32
  store i32 %v3_8638, i32* %r3.global-to-local, align 4
  store i32 %v6_8634, i32* %r2.global-to-local, align 4
  %v0_8640 = load i32, i32* @r4, align 4
  %v5_8640 = mul nuw nsw i32 %v3_8638, 4
  %v6_8640 = add i32 %v5_8640, %v6_8634
  %v7_8640 = inttoptr i32 %v6_8640 to i32*
  store i32 %v0_8640, i32* %v7_8640, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_8648 = load i32, i32* %r3.global-to-local, align 4
  %v1_8648 = load i32, i32* @r7, align 4
  %v2_8648 = add i32 %v1_8648, %v0_8648
  store i32 %v2_8648, i32* %r3.global-to-local, align 4
  %v1_8650 = load i32, i32* @r6, align 4
  %v2_8650 = inttoptr i32 %v1_8650 to i32*
  store i32 %v6_8634, i32* %v2_8650, align 4
  %v0_8654 = load i32, i32* %r3.global-to-local, align 4
  %v1_8654 = trunc i32 %v0_8654 to i8
  %v2_8654 = load i32, i32* @r5, align 4
  %v3_8654 = inttoptr i32 %v2_8654 to i8*
  store i8 %v1_8654, i8* %v3_8654, align 1
  %v2_8658 = call i32 @function_10eec(i32 %v1_8648, i32 8)
  %v2_865c = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_865c = zext i8 %v2_865c to i32
  store i32 ptrtoint (i32* @global_var_ab9c.30 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r8, align 4
  store i32 %v2_8658, i32* @r4, align 4
  %v1_866c = load i32, i32* @r7, align 4
  %v2_866c = add i32 %v1_866c, %v3_865c
  store i32 %v2_866c, i32* %r1.global-to-local, align 4
  %v2_8670 = load i32, i32* @global_var_1e250.20, align 4
  %v2_8674 = inttoptr i32 %v2_8658 to i32*
  store i32 ptrtoint (i32* @global_var_ab9c.30 to i32), i32* %v2_8674, align 4
  %v0_8678 = load i32, i32* @r8, align 4
  %v1_8678 = trunc i32 %v0_8678 to i8
  %v2_8678 = load i32, i32* @r4, align 4
  %v3_8678 = add i32 %v2_8678, 4
  %v4_8678 = inttoptr i32 %v3_8678 to i8*
  store i8 %v1_8678, i8* %v4_8678, align 1
  %v0_867c = load i32, i32* %r1.global-to-local, align 4
  %v3_867c = mul i32 %v0_867c, 4
  store i32 %v3_867c, i32* %r1.global-to-local, align 4
  %v4_8680 = inttoptr i32 %v2_8670 to i32*
  %v5_8680 = call i32 @function_11020(i32* %v4_8680, i32 %v3_867c, i32 %v6_8634, i32 ptrtoint (i32* @global_var_ab9c.30 to i32))
  %v2_8684 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_8684 = zext i8 %v2_8684 to i32
  store i32 %v3_8684, i32* %r3.global-to-local, align 4
  store i32 %v5_8680, i32* %r2.global-to-local, align 4
  %v0_868c = load i32, i32* @r4, align 4
  %v5_868c = mul nuw nsw i32 %v3_8684, 4
  %v6_868c = add i32 %v5_868c, %v5_8680
  %v7_868c = inttoptr i32 %v6_868c to i32*
  store i32 %v0_868c, i32* %v7_868c, align 4
  %v0_8690 = load i32, i32* @r8, align 4
  store i32 %v0_8690, i32* %r1.global-to-local, align 4
  %v0_8694 = load i32, i32* %r3.global-to-local, align 4
  %v1_8694 = load i32, i32* @r7, align 4
  %v2_8694 = add i32 %v1_8694, %v0_8694
  store i32 %v2_8694, i32* %r3.global-to-local, align 4
  %v1_869c = trunc i32 %v2_8694 to i8
  %v2_869c = load i32, i32* @r5, align 4
  %v3_869c = inttoptr i32 %v2_869c to i8*
  store i8 %v1_869c, i8* %v3_869c, align 1
  %v0_86a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_86a0 = load i32, i32* @r6, align 4
  %v2_86a0 = inttoptr i32 %v1_86a0 to i32*
  store i32 %v0_86a0, i32* %v2_86a0, align 4
  %v2_86a4 = call i32 @function_10eec(i32 %v1_8694, i32 %v0_8690)
  %v2_86a8 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_86a8 = zext i8 %v2_86a8 to i32
  store i32 ptrtoint (i32* @global_var_a4c4.32 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86a4, i32* @r4, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_86b8 = load i32, i32* @r7, align 4
  %v2_86b8 = add i32 %v1_86b8, %v3_86a8
  store i32 %v2_86b8, i32* %r1.global-to-local, align 4
  %v2_86bc = load i32, i32* @global_var_1e250.20, align 4
  %v2_86c0 = inttoptr i32 %v2_86a4 to i32*
  store i32 ptrtoint (i32* @global_var_a4c4.32 to i32), i32* %v2_86c0, align 4
  %v3_86c4 = load i32, i32* @r4, align 4
  %v4_86c4 = add i32 %v3_86c4, 4
  %v5_86c4 = inttoptr i32 %v4_86c4 to i8*
  store i8 3, i8* %v5_86c4, align 1
  %v0_86c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_86c8 = mul i32 %v0_86c8, 4
  store i32 %v3_86c8, i32* %r1.global-to-local, align 4
  %v5_86cc = inttoptr i32 %v2_86bc to i32*
  %v6_86cc = call i32 @function_11020(i32* %v5_86cc, i32 %v3_86c8, i32 ptrtoint (i32* @global_var_a4c4.32 to i32), i32 3)
  %v2_86d0 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_86d0 = zext i8 %v2_86d0 to i32
  store i32 %v3_86d0, i32* %r3.global-to-local, align 4
  store i32 %v6_86cc, i32* %r2.global-to-local, align 4
  %v0_86d8 = load i32, i32* @r4, align 4
  %v5_86d8 = mul nuw nsw i32 %v3_86d0, 4
  %v6_86d8 = add i32 %v5_86d8, %v6_86cc
  %v7_86d8 = inttoptr i32 %v6_86d8 to i32*
  store i32 %v0_86d8, i32* %v7_86d8, align 4
  %v0_86dc = load i32, i32* @r8, align 4
  store i32 %v0_86dc, i32* %r1.global-to-local, align 4
  %v0_86e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_86e0 = load i32, i32* @r7, align 4
  %v2_86e0 = add i32 %v1_86e0, %v0_86e0
  store i32 %v2_86e0, i32* %r3.global-to-local, align 4
  %v1_86e8 = trunc i32 %v2_86e0 to i8
  %v2_86e8 = load i32, i32* @r5, align 4
  %v3_86e8 = inttoptr i32 %v2_86e8 to i8*
  store i8 %v1_86e8, i8* %v3_86e8, align 1
  %v0_86ec = load i32, i32* %r2.global-to-local, align 4
  %v1_86ec = load i32, i32* @r6, align 4
  %v2_86ec = inttoptr i32 %v1_86ec to i32*
  store i32 %v0_86ec, i32* %v2_86ec, align 4
  %v2_86f0 = call i32 @function_10eec(i32 %v1_86e0, i32 %v0_86dc)
  %v2_86f4 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_86f4 = zext i8 %v2_86f4 to i32
  store i32 ptrtoint (i32* @global_var_9da0.34 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86f0, i32* @r4, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_8704 = load i32, i32* @r7, align 4
  %v2_8704 = add i32 %v1_8704, %v3_86f4
  store i32 %v2_8704, i32* %r1.global-to-local, align 4
  %v2_8708 = load i32, i32* @global_var_1e250.20, align 4
  %v2_870c = inttoptr i32 %v2_86f0 to i32*
  store i32 ptrtoint (i32* @global_var_9da0.34 to i32), i32* %v2_870c, align 4
  %v3_8710 = load i32, i32* @r4, align 4
  %v4_8710 = add i32 %v3_8710, 4
  %v5_8710 = inttoptr i32 %v4_8710 to i8*
  store i8 4, i8* %v5_8710, align 1
  %v0_8714 = load i32, i32* %r1.global-to-local, align 4
  %v3_8714 = mul i32 %v0_8714, 4
  store i32 %v3_8714, i32* %r1.global-to-local, align 4
  %v5_8718 = inttoptr i32 %v2_8708 to i32*
  %v6_8718 = call i32 @function_11020(i32* %v5_8718, i32 %v3_8714, i32 ptrtoint (i32* @global_var_9da0.34 to i32), i32 4)
  %v2_871c = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_871c = zext i8 %v2_871c to i32
  store i32 %v3_871c, i32* %r3.global-to-local, align 4
  store i32 %v6_8718, i32* %r2.global-to-local, align 4
  %v0_8724 = load i32, i32* @r4, align 4
  %v5_8724 = mul nuw nsw i32 %v3_871c, 4
  %v6_8724 = add i32 %v5_8724, %v6_8718
  %v7_8724 = inttoptr i32 %v6_8724 to i32*
  store i32 %v0_8724, i32* %v7_8724, align 4
  %v0_8728 = load i32, i32* @r8, align 4
  store i32 %v0_8728, i32* %r1.global-to-local, align 4
  %v0_872c = load i32, i32* %r3.global-to-local, align 4
  %v1_872c = load i32, i32* @r7, align 4
  %v2_872c = add i32 %v1_872c, %v0_872c
  store i32 %v2_872c, i32* %r3.global-to-local, align 4
  %v1_8734 = trunc i32 %v2_872c to i8
  %v2_8734 = load i32, i32* @r5, align 4
  %v3_8734 = inttoptr i32 %v2_8734 to i8*
  store i8 %v1_8734, i8* %v3_8734, align 1
  %v0_8738 = load i32, i32* %r2.global-to-local, align 4
  %v1_8738 = load i32, i32* @r6, align 4
  %v2_8738 = inttoptr i32 %v1_8738 to i32*
  store i32 %v0_8738, i32* %v2_8738, align 4
  %v2_873c = call i32 @function_10eec(i32 %v1_872c, i32 %v0_8728)
  %v2_8740 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_8740 = zext i8 %v2_8740 to i32
  store i32 ptrtoint (i32* @global_var_9574.36 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_873c, i32* @r4, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_8750 = load i32, i32* @r7, align 4
  %v2_8750 = add i32 %v1_8750, %v3_8740
  store i32 %v2_8750, i32* %r1.global-to-local, align 4
  %v2_8754 = load i32, i32* @global_var_1e250.20, align 4
  %v2_8758 = inttoptr i32 %v2_873c to i32*
  store i32 ptrtoint (i32* @global_var_9574.36 to i32), i32* %v2_8758, align 4
  %v3_875c = load i32, i32* @r4, align 4
  %v4_875c = add i32 %v3_875c, 4
  %v5_875c = inttoptr i32 %v4_875c to i8*
  store i8 5, i8* %v5_875c, align 1
  %v0_8760 = load i32, i32* %r1.global-to-local, align 4
  %v3_8760 = mul i32 %v0_8760, 4
  store i32 %v3_8760, i32* %r1.global-to-local, align 4
  %v5_8764 = inttoptr i32 %v2_8754 to i32*
  %v6_8764 = call i32 @function_11020(i32* %v5_8764, i32 %v3_8760, i32 ptrtoint (i32* @global_var_9574.36 to i32), i32 5)
  %v2_8768 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_8768 = zext i8 %v2_8768 to i32
  store i32 %v3_8768, i32* %r3.global-to-local, align 4
  store i32 %v6_8764, i32* %r2.global-to-local, align 4
  %v0_8770 = load i32, i32* @r4, align 4
  %v5_8770 = mul nuw nsw i32 %v3_8768, 4
  %v6_8770 = add i32 %v5_8770, %v6_8764
  %v7_8770 = inttoptr i32 %v6_8770 to i32*
  store i32 %v0_8770, i32* %v7_8770, align 4
  %v0_8774 = load i32, i32* @r8, align 4
  store i32 %v0_8774, i32* %r1.global-to-local, align 4
  %v0_8778 = load i32, i32* %r3.global-to-local, align 4
  %v1_8778 = load i32, i32* @r7, align 4
  %v2_8778 = add i32 %v1_8778, %v0_8778
  store i32 %v2_8778, i32* %r3.global-to-local, align 4
  %v1_8780 = trunc i32 %v2_8778 to i8
  %v2_8780 = load i32, i32* @r5, align 4
  %v3_8780 = inttoptr i32 %v2_8780 to i8*
  store i8 %v1_8780, i8* %v3_8780, align 1
  %v0_8784 = load i32, i32* %r2.global-to-local, align 4
  %v1_8784 = load i32, i32* @r6, align 4
  %v2_8784 = inttoptr i32 %v1_8784 to i32*
  store i32 %v0_8784, i32* %v2_8784, align 4
  %v2_8788 = call i32 @function_10eec(i32 %v1_8778, i32 %v0_8774)
  %v2_878c = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_878c = zext i8 %v2_878c to i32
  store i32 ptrtoint (i32* @global_var_8f14.38 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8788, i32* @r4, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_879c = load i32, i32* @r7, align 4
  %v2_879c = add i32 %v1_879c, %v3_878c
  store i32 %v2_879c, i32* %r1.global-to-local, align 4
  %v2_87a0 = load i32, i32* @global_var_1e250.20, align 4
  %v2_87a4 = inttoptr i32 %v2_8788 to i32*
  store i32 ptrtoint (i32* @global_var_8f14.38 to i32), i32* %v2_87a4, align 4
  %v3_87a8 = load i32, i32* @r4, align 4
  %v4_87a8 = add i32 %v3_87a8, 4
  %v5_87a8 = inttoptr i32 %v4_87a8 to i8*
  store i8 6, i8* %v5_87a8, align 1
  %v0_87ac = load i32, i32* %r1.global-to-local, align 4
  %v3_87ac = mul i32 %v0_87ac, 4
  store i32 %v3_87ac, i32* %r1.global-to-local, align 4
  %v5_87b0 = inttoptr i32 %v2_87a0 to i32*
  %v6_87b0 = call i32 @function_11020(i32* %v5_87b0, i32 %v3_87ac, i32 ptrtoint (i32* @global_var_8f14.38 to i32), i32 6)
  %v2_87b4 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_87b4 = zext i8 %v2_87b4 to i32
  store i32 %v3_87b4, i32* %r3.global-to-local, align 4
  store i32 %v6_87b0, i32* %r2.global-to-local, align 4
  %v0_87bc = load i32, i32* @r4, align 4
  %v5_87bc = mul nuw nsw i32 %v3_87b4, 4
  %v6_87bc = add i32 %v5_87bc, %v6_87b0
  %v7_87bc = inttoptr i32 %v6_87bc to i32*
  store i32 %v0_87bc, i32* %v7_87bc, align 4
  %v0_87c0 = load i32, i32* @r8, align 4
  store i32 %v0_87c0, i32* %r1.global-to-local, align 4
  %v0_87c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_87c4 = load i32, i32* @r7, align 4
  %v2_87c4 = add i32 %v1_87c4, %v0_87c4
  store i32 %v2_87c4, i32* %r3.global-to-local, align 4
  %v1_87cc = trunc i32 %v2_87c4 to i8
  %v2_87cc = load i32, i32* @r5, align 4
  %v3_87cc = inttoptr i32 %v2_87cc to i8*
  store i8 %v1_87cc, i8* %v3_87cc, align 1
  %v0_87d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_87d0 = load i32, i32* @r6, align 4
  %v2_87d0 = inttoptr i32 %v1_87d0 to i32*
  store i32 %v0_87d0, i32* %v2_87d0, align 4
  %v2_87d4 = call i32 @function_10eec(i32 %v1_87c4, i32 %v0_87c0)
  %v2_87d8 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_87d8 = zext i8 %v2_87d8 to i32
  store i32 ptrtoint (i32* @global_var_884c.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87d4, i32* @r4, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_87e8 = load i32, i32* @r7, align 4
  %v2_87e8 = add i32 %v1_87e8, %v3_87d8
  store i32 %v2_87e8, i32* %r1.global-to-local, align 4
  %v2_87ec = load i32, i32* @global_var_1e250.20, align 4
  %v2_87f0 = inttoptr i32 %v2_87d4 to i32*
  store i32 ptrtoint (i32* @global_var_884c.40 to i32), i32* %v2_87f0, align 4
  %v3_87f4 = load i32, i32* @r4, align 4
  %v4_87f4 = add i32 %v3_87f4, 4
  %v5_87f4 = inttoptr i32 %v4_87f4 to i8*
  store i8 7, i8* %v5_87f4, align 1
  %v0_87f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_87f8 = mul i32 %v0_87f8, 4
  store i32 %v3_87f8, i32* %r1.global-to-local, align 4
  %v5_87fc = inttoptr i32 %v2_87ec to i32*
  %v6_87fc = call i32 @function_11020(i32* %v5_87fc, i32 %v3_87f8, i32 ptrtoint (i32* @global_var_884c.40 to i32), i32 7)
  %v2_8800 = load i8, i8* bitcast (i8** @global_var_1e24c.18 to i8*), align 4
  %v3_8800 = zext i8 %v2_8800 to i32
  store i32 %v3_8800, i32* %r3.global-to-local, align 4
  %v1_8804 = load i32, i32* @r6, align 4
  %v2_8804 = inttoptr i32 %v1_8804 to i32*
  store i32 %v6_87fc, i32* %v2_8804, align 4
  %v0_8808 = load i32, i32* @r4, align 4
  %v2_8808 = load i32, i32* %r3.global-to-local, align 4
  %v5_8808 = mul i32 %v2_8808, 4
  %v6_8808 = add i32 %v5_8808, %v6_87fc
  %v7_8808 = inttoptr i32 %v6_8808 to i32*
  store i32 %v0_8808, i32* %v7_8808, align 4
  %v0_880c = load i32, i32* %r3.global-to-local, align 4
  %v1_880c = load i32, i32* @r7, align 4
  %v2_880c = add i32 %v1_880c, %v0_880c
  store i32 %v2_880c, i32* %r2.global-to-local, align 4
  %v1_8814 = trunc i32 %v2_880c to i8
  %v2_8814 = load i32, i32* @r5, align 4
  %v3_8814 = inttoptr i32 %v2_8814 to i8*
  store i8 %v1_8814, i8* %v3_8814, align 1
  %v2_8818 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8818, i32* @r4, align 4
  store i32 %v6_8560, i32* @r5, align 4
  store i32 %v9_8560, i32* @r6, align 4
  store i32 %v12_8560, i32* @r7, align 4
  store i32 %v15_8560, i32* @r8, align 4
  ret i32 %v1_880c

; uselistorder directives
  uselistorder i32 %v1_880c, { 1, 0 }
  uselistorder i32 %v3_87f8, { 1, 0 }
  uselistorder i32 %v1_87c4, { 1, 0 }
  uselistorder i32 %v3_87ac, { 1, 0 }
  uselistorder i32 %v1_8778, { 1, 0 }
  uselistorder i32 %v3_8760, { 1, 0 }
  uselistorder i32 %v1_872c, { 1, 0 }
  uselistorder i32 %v3_8714, { 1, 0 }
  uselistorder i32 %v1_86e0, { 1, 0 }
  uselistorder i32 %v3_86c8, { 1, 0 }
  uselistorder i32 %v1_8694, { 1, 0 }
  uselistorder i32 %v3_867c, { 1, 0 }
  uselistorder i32 %v1_8648, { 1, 0 }
  uselistorder i32 %v6_8634, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8630, { 1, 0 }
  uselistorder i32 %v1_85fc, { 1, 0 }
  uselistorder i32 %v3_85e4, { 1, 0 }
  uselistorder i32 %v2_85c0, { 1, 0 }
  uselistorder i32 %v6_859c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8598, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e24c.18 to i8*), { 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_1e24d.24 to i32), { 2, 1, 0 }
  uselistorder i8** @global_var_1e24c.18, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e24c.18 to i32), { 1, 0 }
}

define i32 @function_884c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_884c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_884c = load i32, i32* @r4, align 4
  %v24_884c = load i32, i32* @fp, align 4
  %v27_884c = load i32, i32* @lr, align 4
  store i32 0, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_8878 = call i32 @function_10eec(i32 %arg2, i32 4)
  %v0_887c = load i32, i32* @r4, align 4
  store i32 %v0_887c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_8888 = load i32, i32* @sb, align 4
  store i32 %v0_8888, i32* %r3.global-to-local, align 4
  %v0_888c = load i32, i32* @r5, align 4
  store i32 %v0_888c, i32* %r0.global-to-local, align 4
  %v5_8890 = inttoptr i32 %v0_887c to i32*
  %v6_8890 = call i32 @function_8258(i32 %v0_888c, i32* %v5_8890, i32 2, i32 %v0_8888, i32 %v2_8878)
  %v1_889c = urem i32 %v6_8890, 256
  store i32 %v1_889c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_88a8 = load i32, i32* @r4, align 4
  store i32 %v0_88a8, i32* %r1.global-to-local, align 4
  %v0_88ac = load i32, i32* @r5, align 4
  store i32 %v0_88ac, i32* %r0.global-to-local, align 4
  %v5_88b0 = trunc i32 %v6_8890 to i8
  %v6_88b4 = inttoptr i32 %v0_88a8 to i32*
  %v7_88b4 = call i32 @function_8258(i32 %v0_88ac, i32* %v6_88b4, i32 3, i32 65535, i32 %v6_8890)
  %v0_88b8 = load i32, i32* @r4, align 4
  store i32 %v0_88b8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_88b4, i32* %fp.global-to-local, align 4
  %v0_88c8 = load i32, i32* @r5, align 4
  store i32 %v0_88c8, i32* %r0.global-to-local, align 4
  %v5_88cc = inttoptr i32 %v0_88b8 to i32*
  %v6_88cc = call i32 @function_8258(i32 %v0_88c8, i32* %v5_88cc, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_88d4 = urem i32 %v6_88cc, 256
  store i32 %v1_88d4, i32* %ip.global-to-local, align 4
  %v0_88d8 = load i32, i32* @r4, align 4
  store i32 %v0_88d8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_88e4 = load i32, i32* @r5, align 4
  store i32 %v0_88e4, i32* %r0.global-to-local, align 4
  %v6_88ec = inttoptr i32 %v0_88d8 to i32*
  %v7_88ec = call i32 @function_8258(i32 %v0_88e4, i32* %v6_88ec, i32 5, i32 1, i32 %v1_88d4)
  %v1_88f8 = urem i32 %v7_88ec, 256
  store i32 %v1_88f8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8904 = load i32, i32* @r4, align 4
  store i32 %v0_8904, i32* %r1.global-to-local, align 4
  %v0_8908 = load i32, i32* @r5, align 4
  store i32 %v0_8908, i32* %r0.global-to-local, align 4
  %v5_8910 = inttoptr i32 %v0_8904 to i32*
  %v6_8910 = call i32 @function_8258(i32 %v0_8908, i32* %v5_8910, i32 6, i32 65535, i32 %v1_88f8)
  %v0_891c = load i32, i32* @r4, align 4
  store i32 %v0_891c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_8928 = load i32, i32* @r5, align 4
  store i32 %v0_8928, i32* %r0.global-to-local, align 4
  %v5_892c = inttoptr i32 %v0_891c to i32*
  %v6_892c = call i32 @function_8258(i32 %v0_8928, i32* %v5_892c, i32 7, i32 65535, i32 %v6_8910)
  %v0_8930 = load i32, i32* @r4, align 4
  store i32 %v0_8930, i32* %r1.global-to-local, align 4
  %v0_8934 = load i32, i32* @sb, align 4
  store i32 %v0_8934, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_892c, i32* @r8, align 4
  %v0_8940 = load i32, i32* @r5, align 4
  store i32 %v0_8940, i32* %r0.global-to-local, align 4
  %v5_8944 = inttoptr i32 %v0_8930 to i32*
  %v6_8944 = call i32 @function_8258(i32 %v0_8940, i32* %v5_8944, i32 %v0_8934, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8954 = load i32, i32* @r4, align 4
  store i32 %v0_8954, i32* %r1.global-to-local, align 4
  %v0_8958 = load i32, i32* @r5, align 4
  store i32 %v0_8958, i32* %r0.global-to-local, align 4
  %v5_895c = inttoptr i32 %v0_8954 to i32*
  %v6_895c = call i32 @function_8258(i32 %v0_8958, i32* %v5_895c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_8964 = urem i32 %v6_895c, 256
  store i32 %v1_8964, i32* %ip.global-to-local, align 4
  %v0_8968 = load i32, i32* @r4, align 4
  store i32 %v0_8968, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_8970 = load i32, i32* @sb, align 4
  store i32 %v0_8970, i32* %r3.global-to-local, align 4
  %v0_8974 = load i32, i32* @r5, align 4
  store i32 %v0_8974, i32* %r0.global-to-local, align 4
  %v5_897c = inttoptr i32 %v0_8968 to i32*
  %v6_897c = call i32 @function_8258(i32 %v0_8974, i32* %v5_897c, i32 18, i32 %v0_8970, i32 %v1_8964)
  %v0_8984 = load i32, i32* @r4, align 4
  store i32 %v0_8984, i32* %r1.global-to-local, align 4
  %v2_8988 = load i32, i32* @global_var_202d4.42, align 4
  store i32 %v2_8988, i32* %r3.global-to-local, align 4
  store i32 %v6_897c, i32* @r7, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_8994 = load i32, i32* @r5, align 4
  store i32 %v0_8994, i32* %r0.global-to-local, align 4
  %v5_8998 = inttoptr i32 %v0_8984 to i32*
  %v6_8998 = call i32 @function_8258(i32 %v0_8994, i32* %v5_8998, i32 24, i32 %v2_8988, i32 ptrtoint (i32* @0 to i32))
  %v0_89a0 = load i32, i32* @sb, align 4
  store i32 %v0_89a0, i32* %r0.global-to-local, align 4
  %v1_89a4 = inttoptr i32 %v0_89a0 to i32*
  %v2_89a4 = call i32 @function_fcbc(i32* %v1_89a4)
  %v1_89a8 = load i32, i32* @r6, align 4
  %v2_89a8 = add i32 %v1_89a8, %v2_89a4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_89bc = call i32 @function_10384(i32 2, i32 3, i32 6)
  store i32 %v3_89bc, i32* %r0.global-to-local, align 4
  %v7_89c0 = icmp eq i32 %v3_89bc, -1
  store i1 %v7_89c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_89c0, label %dec_label_pc_8ef8, label %dec_label_pc_89cc

dec_label_pc_89cc:                                ; preds = %dec_label_pc_884c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_89d4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_89d4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_89dc = load i32, i32* @sb, align 4
  store i32 %v0_89dc, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_89e8 = call i32 @function_10340(i32 %v3_89bc, i32 %v0_89dc, i32 3, i32 %v6_89d4, i32 4)
  store i32 %v5_89e8, i32* %r0.global-to-local, align 4
  %v7_89ec = icmp eq i32 %v5_89e8, -1
  store i1 %v7_89ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_89ec, label %dec_label_pc_8f04, label %dec_label_pc_89f4

dec_label_pc_89f4:                                ; preds = %dec_label_pc_89cc
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v3_89fc = mul i32 %v6_8910, 65536
  store i32 %v3_89fc, i32* %r1.global-to-local, align 4
  %v0_8a00 = load i32, i32* @r8, align 4
  %v0_8a04 = load i32, i32* %fp.global-to-local, align 4
  %v3_8a04 = mul i32 %v0_8a04, 65536
  store i32 %v3_8a04, i32* %fp.global-to-local, align 4
  %v0_8a08 = load i32, i32* @r7, align 4
  %v1_8a08 = urem i32 %v0_8a08, 256
  store i32 %v1_8a08, i32* @r7, align 4
  %v3_8a0c = urem i32 %v0_8a04, 65536
  store i32 %v3_8a0c, i32* %r3.global-to-local, align 4
  %v3_8a10 = urem i32 %v6_8910, 65536
  store i32 %v3_8a10, i32* %ip.global-to-local, align 4
  %v3_8a14 = urem i32 %v0_8a00, 65536
  %v2_8a18 = icmp eq i32 %arg2, 0
  store i1 %v2_8a18, i1* %cpsr_z.global-to-local, align 1
  %v0_8a28 = load i32, i32* @sb, align 4
  store i32 %v0_8a28, i32* %stack_var_-44, align 4
  br i1 %v2_8a18, label %dec_label_pc_8c30.preheader, label %dec_label_pc_8a3c

dec_label_pc_8a3c:                                ; preds = %dec_label_pc_89f4
  %v3_8a00 = mul i32 %v0_8a00, 65536
  %v3_8a40 = mul i32 %v6_8944, 65536
  %v1_8a44 = add i32 %v3_8a40, 4325376
  %v0_8a04.not = or i32 %v0_8a04, -65536
  %v1_8a48 = xor i32 %v0_8a04.not, 65535
  %v3_8a54 = mul i32 %v1_8a48, 65536
  store i32 %v3_8a54, i32* @r6, align 4
  %tmp68 = udiv i32 %v1_8a44, 256
  %v3_8a6c = and i32 %tmp68, 65280
  store i32 %v3_8a6c, i32* %r3.global-to-local, align 4
  %v1_8a70 = add i32 %v3_8a40, 524288
  %tmp69 = mul i32 %v0_8a04, 256
  %v3_8a74 = and i32 %tmp69, 65280
  %v1_8a78 = add i32 %v3_8a40, 1835008
  %tmp70 = mul nsw i32 %v1_8a48, 256
  %v3_8a7c = and i32 %tmp70, 65280
  %v4_8a80 = udiv i32 %v1_8a44, 16777216
  %v5_8a80 = or i32 %v4_8a80, %tmp68
  %v3_8a88 = udiv i32 %v1_8a78, 256
  %v5_8a8c = trunc i32 %v5_8a80 to i16
  %tmp71 = udiv i32 %v0_8a04, 256
  %v4_8a90 = urem i32 %tmp71, 256
  %v5_8a90 = or i32 %v4_8a90, %v3_8a74
  store i32 %v5_8a90, i32* @r7, align 4
  %tmp72 = udiv i32 %v1_8a48, 256
  %v4_8a94 = urem i32 %tmp72, 256
  %v5_8a94 = or i32 %v4_8a94, %v3_8a7c
  store i32 %v5_8a94, i32* @fp, align 4
  store i32 %v3_8a00, i32* %r2.global-to-local, align 4
  store i32 %v3_89fc, i32* %r1.global-to-local, align 4
  %v1_8aa0 = and i32 %v3_8a88, 65280
  %tmp73 = mul i32 %v6_8910, 256
  %v3_8aa4 = and i32 %tmp73, 65280
  %tmp74 = mul i32 %v0_8a00, 256
  %v3_8aa8 = and i32 %tmp74, 65280
  %v4_8ab0 = udiv i32 %v1_8a78, 16777216
  %v5_8ab0 = or i32 %v1_8aa0, %v4_8ab0
  store i32 %v5_8ab0, i32* @r5, align 4
  %tmp75 = udiv i32 %v6_8910, 256
  %v4_8ab4 = urem i32 %tmp75, 256
  %v5_8ab4 = or i32 %v4_8ab4, %v3_8aa4
  store i32 %v5_8ab4, i32* %r0.global-to-local, align 4
  %tmp76 = udiv i32 %v0_8a00, 256
  %v4_8ab8 = urem i32 %tmp76, 256
  %v5_8ab8 = or i32 %v4_8ab8, %v3_8aa8
  store i32 %v5_8ab8, i32* %ip.global-to-local, align 4
  %tmp77 = udiv i32 %v1_8a70, 256
  %v3_8abc = and i32 %tmp77, 65280
  store i32 %v3_8abc, i32* @lr, align 4
  %v5_8ac8 = trunc i32 %v5_8ab0 to i16
  %v4_8acc = udiv i32 %v1_8a70, 16777216
  %v5_8acc = or i32 %v3_8abc, %v4_8acc
  store i32 %v5_8acc, i32* @r8, align 4
  store i32 %v0_8a28, i32* @r4, align 4
  %v1_8b34 = trunc i32 %v6_88cc to i8
  %v2_8be8 = icmp eq i32 %v1_8a08, 0
  %sext = mul nuw i32 %v5_8ab4, 65536
  %v4_8c0c = sdiv i32 %sext, 65536
  %sext7 = mul nuw i32 %v5_8ab8, 65536
  %v4_8c14 = sdiv i32 %sext7, 65536
  br label %dec_label_pc_8ad4

dec_label_pc_8ad4:                                ; preds = %bb80, %dec_label_pc_8a3c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8ae0 = call i32 @function_10eec(i32 1510, i32 4)
  store i32 %v2_8ae0, i32* %r0.global-to-local, align 4
  %v3_8ae8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8ae8, i32* %r2.global-to-local, align 4
  %v2_8aec = load i32, i32* @r4, align 4
  %v5_8aec = mul i32 %v2_8aec, 4
  %v6_8aec = add i32 %v5_8aec, %v2_8878
  %v7_8aec = inttoptr i32 %v6_8aec to i32*
  store i32 %v2_8ae0, i32* %v7_8aec, align 4
  store i32 %v2_8878, i32* %r1.global-to-local, align 4
  %v0_8af4 = load i32, i32* %r2.global-to-local, align 4
  %v3_8af4 = mul i32 %v0_8af4, 32
  store i32 %v3_8af4, i32* %r3.global-to-local, align 4
  %v4_8af8 = mul i32 %v0_8af4, 4
  %v5_8af8 = add i32 %v4_8af8, %v2_8878
  %v6_8af8 = inttoptr i32 %v5_8af8 to i32*
  %v7_8af8 = load i32, i32* %v6_8af8, align 4
  store i32 %v7_8af8, i32* %r4.global-to-local, align 4
  %v5_8afc = mul i32 %v0_8af4, 24
  store i32 %v5_8afc, i32* %r3.global-to-local, align 4
  %v1_8b00 = load i32, i32* @sl, align 4
  %v2_8b00 = add i32 %v1_8b00, %v5_8afc
  store i32 %v2_8b00, i32* %lr.global-to-local, align 4
  %v1_8b04 = inttoptr i32 %v7_8af8 to i8*
  %v2_8b04 = load i8, i8* %v1_8b04, align 1
  %tmp = urem i8 %v2_8b04, 16
  %v1_8b08 = zext i8 %tmp to i32
  %v1_8b0c = or i32 %v1_8b08, 64
  store i32 %v1_8b0c, i32* %r3.global-to-local, align 4
  %v1_8b10 = trunc i32 %v1_8b0c to i8
  store i8 %v1_8b10, i8* %v1_8b04, align 1
  %v0_8b14 = load i32, i32* %r4.global-to-local, align 4
  %v1_8b14 = inttoptr i32 %v0_8b14 to i8*
  %v2_8b14 = load i8, i8* %v1_8b14, align 1
  %v1_8b18 = and i8 %v2_8b14, -16
  %v1_8b1c = or i8 %v1_8b18, 5
  store i32 %v1_88f8, i32* %r3.global-to-local, align 4
  store i8 %v1_8b1c, i8* %v1_8b14, align 1
  store i32 %v6_8890, i32* %r1.global-to-local, align 4
  %v2_8b2c = load i32, i32* %r4.global-to-local, align 4
  %v3_8b2c = add i32 %v2_8b2c, 1
  %v4_8b2c = inttoptr i32 %v3_8b2c to i8*
  store i8 %v5_88b0, i8* %v4_8b2c, align 1
  store i32 %v1_88d4, i32* %r2.global-to-local, align 4
  %v2_8b34 = load i32, i32* %r4.global-to-local, align 4
  %v3_8b34 = add i32 %v2_8b34, 8
  %v4_8b34 = inttoptr i32 %v3_8b34 to i8*
  store i8 %v1_8b34, i8* %v4_8b34, align 1
  %v0_8b38 = load i32, i32* %r3.global-to-local, align 4
  %v2_8b38 = icmp eq i32 %v0_8b38, 0
  store i1 %v2_8b38, i1* %cpsr_z.global-to-local, align 1
  %v2_8b40 = load i32, i32* %r4.global-to-local, align 4
  %v3_8b40 = add i32 %v2_8b40, 2
  %v4_8b40 = inttoptr i32 %v3_8b40 to i16*
  store i16 %v5_8a8c, i16* %v4_8b40, align 2
  %v2_8b48 = load i32, i32* %r4.global-to-local, align 4
  %v3_8b48 = add i32 %v2_8b48, 9
  %v4_8b48 = inttoptr i32 %v3_8b48 to i8*
  store i8 47, i8* %v4_8b48, align 1
  store i32 %v6_8998, i32* %r3.global-to-local, align 4
  %v1_8b50 = load i32, i32* %r4.global-to-local, align 4
  %v2_8b50 = add i32 %v1_8b50, 12
  %v3_8b50 = inttoptr i32 %v2_8b50 to i32*
  store i32 %v6_8998, i32* %v3_8b50, align 4
  %v0_8b54 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8b54, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_8ad4
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_8b58 = load i32, i32* %r4.global-to-local, align 4
  %v4_8b58 = add i32 %v3_8b58, 6
  %v5_8b58 = inttoptr i32 %v4_8b58 to i16*
  store i16 64, i16* %v5_8b58, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_8ad4, %bb
  %v0_8b5c = load i32, i32* %lr.global-to-local, align 4
  %v1_8b5c = add i32 %v0_8b5c, 16
  %v2_8b5c = inttoptr i32 %v1_8b5c to i32*
  %v3_8b5c = load i32, i32* %v2_8b5c, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_8b64 = load i32, i32* %r4.global-to-local, align 4
  %v2_8b64 = add i32 %v1_8b64, 16
  %v3_8b64 = inttoptr i32 %v2_8b64 to i32*
  store i32 %v3_8b5c, i32* %v3_8b64, align 4
  %v0_8b68 = load i32, i32* %r4.global-to-local, align 4
  %v1_8b68 = add i32 %v0_8b68, 24
  store i32 %v1_8b68, i32* %r0.global-to-local, align 4
  %v1_8b6c = add i32 %v0_8b68, 20
  store i32 %v1_8b6c, i32* %r1.global-to-local, align 4
  %v0_8b70 = load i32, i32* %ip.global-to-local, align 4
  %v1_8b70 = add i32 %v0_8b70, 101
  store i32 %v1_8b70, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_8b7c = load i32, i32* @r7, align 4
  %v1_8b7c = trunc i32 %v0_8b7c to i16
  %v3_8b7c = add i32 %v0_8b68, 4
  %v4_8b7c = inttoptr i32 %v3_8b7c to i16*
  store i16 %v1_8b7c, i16* %v4_8b7c, align 2
  %v0_8b80 = load i32, i32* %ip.global-to-local, align 4
  %v1_8b80 = trunc i32 %v0_8b80 to i16
  %v2_8b80 = load i32, i32* %r1.global-to-local, align 4
  %v3_8b80 = add i32 %v2_8b80, 2
  %v4_8b80 = inttoptr i32 %v3_8b80 to i16*
  store i16 %v1_8b80, i16* %v4_8b80, align 2
  %v0_8b84 = load i32, i32* %r3.global-to-local, align 4
  %v1_8b84 = trunc i32 %v0_8b84 to i8
  %v2_8b84 = load i32, i32* %r0.global-to-local, align 4
  %v3_8b84 = add i32 %v2_8b84, 13
  %v4_8b84 = inttoptr i32 %v3_8b84 to i8*
  store i8 %v1_8b84, i8* %v4_8b84, align 1
  %v0_8b88 = load i32, i32* %r2.global-to-local, align 4
  %v1_8b88 = trunc i32 %v0_8b88 to i8
  %v2_8b88 = load i32, i32* %r0.global-to-local, align 4
  %v3_8b88 = add i32 %v2_8b88, 12
  %v4_8b88 = inttoptr i32 %v3_8b88 to i8*
  store i8 %v1_8b88, i8* %v4_8b88, align 1
  %v0_8b8c = load i32, i32* %r4.global-to-local, align 4
  %v1_8b8c = add i32 %v0_8b8c, 38
  %v2_8b8c = inttoptr i32 %v1_8b8c to i8*
  %v3_8b8c = load i8, i8* %v2_8b8c, align 1
  %tmp86 = urem i8 %v3_8b8c, 16
  %v1_8b90 = zext i8 %tmp86 to i32
  %v1_8b94 = or i32 %v1_8b90, 64
  store i32 %v1_8b94, i32* %r3.global-to-local, align 4
  %v1_8b98 = trunc i32 %v1_8b94 to i8
  store i8 %v1_8b98, i8* %v2_8b8c, align 1
  %v0_8b9c = load i32, i32* %r4.global-to-local, align 4
  %v1_8b9c = add i32 %v0_8b9c, 38
  %v2_8b9c = inttoptr i32 %v1_8b9c to i8*
  %v3_8b9c = load i8, i8* %v2_8b9c, align 1
  %v4_8b9c = zext i8 %v3_8b9c to i32
  %v1_8ba0 = and i32 %v4_8b9c, 240
  %v1_8ba4 = or i32 %v1_8ba0, 5
  store i32 %v1_8ba4, i32* %r2.global-to-local, align 4
  %v1_8ba8 = trunc i32 %v1_8ba4 to i8
  store i8 %v1_8ba8, i8* %v2_8b9c, align 1
  store i32 %v6_8890, i32* %ip.global-to-local, align 4
  %v0_8bb0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8bb0 = add i32 %v0_8bb0, 38
  store i32 %v1_8bb0, i32* @r5, align 4
  %v3_8bb4 = add i32 %v0_8bb0, 39
  %v4_8bb4 = inttoptr i32 %v3_8bb4 to i8*
  store i8 %v5_88b0, i8* %v4_8bb4, align 1
  store i32 %v5_8ab0, i32* %lr.global-to-local, align 4
  %v2_8bbc = load i32, i32* @r5, align 4
  %v3_8bbc = add i32 %v2_8bbc, 2
  %v4_8bbc = inttoptr i32 %v3_8bbc to i16*
  store i16 %v5_8ac8, i16* %v4_8bbc, align 2
  store i32 %v1_88d4, i32* %r1.global-to-local, align 4
  %v0_8bc4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8bc4, label %.thread8, label %bb78

.thread8:                                         ; preds = %.thread
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb79

bb78:                                             ; preds = %.thread
  store i32 64, i32* %r2.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v3_8bcc = load i32, i32* @r5, align 4
  %v4_8bcc = add i32 %v3_8bcc, 6
  %v5_8bcc = inttoptr i32 %v4_8bcc to i16*
  store i16 64, i16* %v5_8bcc, align 2
  %v0_8bd0.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t85 = trunc i32 %v0_8bd0.pre to i8
  br label %bb79

bb79:                                             ; preds = %.thread8, %bb78
  %v6_88cc.sink.off0 = phi i8 [ %v1_8b34, %.thread8 ], [ %extract.t85, %bb78 ]
  %v2_8bd0 = load i32, i32* @r5, align 4
  %v3_8bd0 = add i32 %v2_8bd0, 8
  %v4_8bd0 = inttoptr i32 %v3_8bd0 to i8*
  store i8 %v6_88cc.sink.off0, i8* %v4_8bd0, align 1
  %v0_8bd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8bd4 = trunc i32 %v0_8bd4 to i8
  %v2_8bd4 = load i32, i32* @r5, align 4
  %v3_8bd4 = add i32 %v2_8bd4, 9
  %v4_8bd4 = inttoptr i32 %v3_8bd4 to i8*
  store i8 %v1_8bd4, i8* %v4_8bd4, align 1
  %v0_8bd8 = load i32, i32* @fp, align 4
  %v1_8bd8 = trunc i32 %v0_8bd8 to i16
  %v2_8bd8 = load i32, i32* @r5, align 4
  %v3_8bd8 = add i32 %v2_8bd8, 4
  %v4_8bd8 = inttoptr i32 %v3_8bd8 to i16*
  store i16 %v1_8bd8, i16* %v4_8bd8, align 2
  %v0_8bdc = call i32 @function_cad8()
  store i32 %v0_8bdc, i32* %r0.global-to-local, align 4
  store i32 %v1_8a08, i32* %ip.global-to-local, align 4
  store i1 %v2_8be8, i1* %cpsr_z.global-to-local, align 1
  %v1_8bec = sub i32 1023, %v0_8bdc
  store i32 %v1_8bec, i32* %r3.global-to-local, align 4
  br i1 %v2_8be8, label %.thread9, label %.thread10

.thread9:                                         ; preds = %bb79
  %v2_8bf4 = load i32, i32* @r5, align 4
  %v3_8bf4 = add i32 %v2_8bf4, 16
  %v4_8bf4 = inttoptr i32 %v3_8bf4 to i32*
  store i32 %v1_8bec, i32* %v4_8bf4, align 4
  br label %bb80

.thread10:                                        ; preds = %bb79
  %v1_8bf0 = load i32, i32* %r4.global-to-local, align 4
  %v2_8bf0 = add i32 %v1_8bf0, 16
  %v3_8bf0 = inttoptr i32 %v2_8bf0 to i32*
  %v4_8bf0 = load i32, i32* %v3_8bf0, align 4
  store i32 %v4_8bf0, i32* %r3.global-to-local, align 4
  %v2_8bf8 = load i32, i32* @r5, align 4
  %v3_8bf8 = add i32 %v2_8bf8, 16
  %v4_8bf8 = inttoptr i32 %v3_8bf8 to i32*
  store i32 %v4_8bf0, i32* %v4_8bf8, align 4
  br label %bb80

bb80:                                             ; preds = %.thread9, %.thread10
  %v1_8bfc = load i32, i32* @r5, align 4
  %v2_8bfc = add i32 %v1_8bfc, 12
  %v3_8bfc = inttoptr i32 %v2_8bfc to i32*
  store i32 %v0_8bdc, i32* %v3_8bfc, align 4
  %v3_8c00 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8c00, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v0_8c08 = load i32, i32* %r4.global-to-local, align 4
  %v1_8c08 = add i32 %v0_8c08, 58
  store i32 %v1_8c08, i32* @r6, align 4
  store i32 %v4_8c0c, i32* %r1.global-to-local, align 4
  %v1_8c10 = add i32 %v3_8c00, 1
  store i32 %v1_8c10, i32* @r4, align 4
  store i32 %v4_8c14, i32* %r2.global-to-local, align 4
  %v9_8c18 = icmp eq i32 %v1_8c10, %arg2
  store i1 %v9_8c18, i1* %cpsr_z.global-to-local, align 1
  %v0_8c1c = load i32, i32* @r8, align 4
  %v1_8c1c = trunc i32 %v0_8c1c to i16
  %v3_8c1c = add i32 %v0_8c08, 62
  %v4_8c1c = inttoptr i32 %v3_8c1c to i16*
  store i16 %v1_8c1c, i16* %v4_8c1c, align 2
  %v0_8c20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8c20 = trunc i32 %v0_8c20 to i16
  %v2_8c20 = load i32, i32* @r6, align 4
  %v3_8c20 = inttoptr i32 %v2_8c20 to i16*
  store i16 %v1_8c20, i16* %v3_8c20, align 2
  %v0_8c24 = load i32, i32* %r2.global-to-local, align 4
  %v1_8c24 = trunc i32 %v0_8c24 to i16
  %v2_8c24 = load i32, i32* @r6, align 4
  %v3_8c24 = add i32 %v2_8c24, 2
  %v4_8c24 = inttoptr i32 %v3_8c24 to i16*
  store i16 %v1_8c24, i16* %v4_8c24, align 2
  %v0_8c28 = load i32, i32* @r4, align 4
  store i32 %v0_8c28, i32* %stack_var_-44, align 4
  %v5_8c2c = icmp slt i32 %v1_8c10, %arg2
  br i1 %v5_8c2c, label %dec_label_pc_8ad4, label %dec_label_pc_8c30.preheader

dec_label_pc_8c30.preheader:                      ; preds = %bb80, %dec_label_pc_89f4
  %v1_8c4c = add i32 %v6_8944, 8
  %v1_8c50 = add i32 %v6_8944, 66
  %v2_8c5c = icmp eq i32 %v6_8998, -1
  %v7_8c5c = icmp eq i32 %v6_8998, -1
  %v3_8e54 = icmp eq i32 %v3_8a0c, 65535
  %v2_8ea4 = icmp eq i32 %v1_8a08, 0
  %v2_8cb8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8cd0 = ptrtoint i32* %stack_var_-52 to i32
  %v2_8ce0 = ptrtoint i32* %stack_var_-56 to i32
  %v2_8cec = ptrtoint i32* %stack_var_-54 to i32
  %v2_8d00 = icmp eq i32 %v1_8964, 0
  br label %dec_label_pc_8c30

dec_label_pc_8c30:                                ; preds = %dec_label_pc_8c30.preheader, %dec_label_pc_8ee4
  store i1 %v2_8a18, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_8a18, label %dec_label_pc_8ee4, label %dec_label_pc_8c44

dec_label_pc_8c44:                                ; preds = %dec_label_pc_8c30
  store i32 %v6_8944, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_8c4c, i32* @fp, align 4
  store i32 %v1_8c50, i32* @sb, align 4
  br label %dec_label_pc_8db8

dec_label_pc_8c58:                                ; preds = %dec_label_pc_8db8
  store i32 %v6_8998, i32* %r1.global-to-local, align 4
  store i1 %v7_8c5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8c5c, label %dec_label_pc_8e44, label %dec_label_pc_8c64

dec_label_pc_8c64:                                ; preds = %dec_label_pc_8de4, %dec_label_pc_8c58
  store i32 %v3_8a0c, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_8e54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8e54, label %dec_label_pc_8e60, label %dec_label_pc_8c78

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8e44.dec_label_pc_8c78_crit_edge, %dec_label_pc_8c64
  %v1_8c7c = phi i32 [ %v1_8c7c.pre, %dec_label_pc_8e44.dec_label_pc_8c78_crit_edge ], [ 65535, %dec_label_pc_8c64 ]
  store i32 %v3_8a10, i32* %r3.global-to-local, align 4
  %v9_8c7c = icmp eq i32 %v3_8a10, %v1_8c7c
  store i1 %v9_8c7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8c7c, label %dec_label_pc_8e88, label %dec_label_pc_8c84

dec_label_pc_8c84:                                ; preds = %dec_label_pc_8e60, %dec_label_pc_8c78
  %v1_8c88 = phi i32 [ %v1_8e80, %dec_label_pc_8e60 ], [ %v1_8c7c, %dec_label_pc_8c78 ]
  store i32 %v3_8a14, i32* %ip.global-to-local, align 4
  %v9_8c88 = icmp eq i32 %v3_8a14, %v1_8c88
  store i1 %v9_8c88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8c88, label %dec_label_pc_8e9c, label %dec_label_pc_8c90

dec_label_pc_8c90:                                ; preds = %dec_label_pc_8e88, %dec_label_pc_8c84
  store i32 %v1_8a08, i32* @lr, align 4
  store i1 %v2_8ea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8ea4, label %dec_label_pc_8eb8, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_8c90
  %v1_8c98 = load i32, i32* @r5, align 4
  %v2_8c98 = add i32 %v1_8c98, 16
  %v3_8c98 = inttoptr i32 %v2_8c98 to i32*
  %v4_8c98 = load i32, i32* %v3_8c98, align 4
  store i32 %v4_8c98, i32* %r3.global-to-local, align 4
  %v2_8c9c = load i32, i32* @r6, align 4
  %v3_8c9c = add i32 %v2_8c9c, 16
  %v4_8c9c = inttoptr i32 %v3_8c9c to i32*
  store i32 %v4_8c98, i32* %v4_8c9c, align 4
  br label %dec_label_pc_8ca4

dec_label_pc_8ca4:                                ; preds = %bb81, %.thread11, %dec_label_pc_8eb8
  %v0_8ca4 = call i32 @function_cad8()
  store i32 %v0_8ca4, i32* %r0.global-to-local, align 4
  store i32 %v0_8ca4, i32* %stack_var_-48, align 4
  %v0_8cac = call i32 @function_cad8()
  store i32 %v0_8cac, i32* %r0.global-to-local, align 4
  store i32 %v0_8cac, i32* %stack_var_-52, align 4
  %v0_8cb4 = call i32 @function_cad8()
  store i32 %v2_8cb8, i32* %r1.global-to-local, align 4
  store i32 %v0_8cb4, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8cc4 = load i32, i32* @r7, align 4
  store i32 %v0_8cc4, i32* %r0.global-to-local, align 4
  %v3_8cc8 = call i32 @function_f7f8(i32 %v0_8cc4, i32 %v2_8cb8, i32 4)
  %v0_8ccc = load i32, i32* @r7, align 4
  %v1_8ccc = add i32 %v0_8ccc, 6
  store i32 %v1_8ccc, i32* %r0.global-to-local, align 4
  store i32 %v2_8cd0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8cd8 = call i32 @function_f7f8(i32 %v1_8ccc, i32 %v2_8cd0, i32 4)
  %v0_8cdc = load i32, i32* @r7, align 4
  %v1_8cdc = add i32 %v0_8cdc, 4
  store i32 %v1_8cdc, i32* %r0.global-to-local, align 4
  store i32 %v2_8ce0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8ce8 = call i32 @function_f7f8(i32 %v1_8cdc, i32 %v2_8ce0, i32 2)
  store i32 %v2_8cec, i32* %r1.global-to-local, align 4
  %v0_8cf0 = load i32, i32* @r7, align 4
  %v1_8cf0 = add i32 %v0_8cf0, 10
  store i32 %v1_8cf0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8cf8 = call i32 @function_f7f8(i32 %v1_8cf0, i32 %v2_8cec, i32 2)
  store i32 %v3_8cf8, i32* %r0.global-to-local, align 4
  store i32 %v1_8964, i32* %r1.global-to-local, align 4
  store i1 %v2_8d00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8d00, label %dec_label_pc_8d08, label %dec_label_pc_8ec4

dec_label_pc_8d08:                                ; preds = %dec_label_pc_8ca4, %dec_label_pc_8ec4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8d0c = load i32, i32* @r5, align 4
  %v3_8d0c = add i32 %v2_8d0c, 10
  %v4_8d0c = inttoptr i32 %v3_8d0c to i16*
  store i16 0, i16* %v4_8d0c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8d14 = load i32, i32* @r5, align 4
  store i32 %v0_8d14, i32* @r0, align 4
  %v2_8d18 = call i32 @function_bf78(i32 %v0_8d14, i32 20)
  %v3_8d18 = trunc i32 %v2_8d18 to i16
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_8d20 = load i32, i32* @r5, align 4
  %v4_8d20 = add i32 %v3_8d20, 10
  %v5_8d20 = inttoptr i32 %v4_8d20 to i16*
  store i16 %v3_8d18, i16* %v5_8d20, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8d28 = load i32, i32* %ip.global-to-local, align 4
  %v1_8d28 = trunc i32 %v0_8d28 to i16
  %v2_8d28 = load i32, i32* @r6, align 4
  %v3_8d28 = add i32 %v2_8d28, 10
  %v4_8d28 = inttoptr i32 %v3_8d28 to i16*
  store i16 %v1_8d28, i16* %v4_8d28, align 2
  %v0_8d2c = load i32, i32* @r6, align 4
  store i32 %v0_8d2c, i32* @r0, align 4
  %v2_8d30 = call i32 @function_bf78(i32 %v0_8d2c, i32 20)
  %v3_8d30 = trunc i32 %v2_8d30 to i16
  store i32 %v2_8d30, i32* %r0.global-to-local, align 4
  %v3_8d34 = load i32, i32* @r6, align 4
  %v4_8d34 = add i32 %v3_8d34, 10
  %v5_8d34 = inttoptr i32 %v4_8d34 to i16*
  store i16 %v3_8d30, i16* %v5_8d34, align 2
  %v2_8d3c = load i32, i32* @r8, align 4
  %v3_8d3c = add i32 %v2_8d3c, 6
  %v4_8d3c = inttoptr i32 %v3_8d3c to i16*
  store i16 0, i16* %v4_8d3c, align 2
  %v0_8d40 = load i32, i32* @r8, align 4
  store i32 %v0_8d40, i32* @r1, align 4
  %v1_8d44 = add i32 %v0_8d40, 4
  %v2_8d44 = inttoptr i32 %v1_8d44 to i16*
  %v3_8d44 = load i16, i16* %v2_8d44, align 2
  %v4_8d44 = zext i16 %v3_8d44 to i32
  store i32 %v4_8d44, i32* %r2.global-to-local, align 4
  %v0_8d48 = load i32, i32* @fp, align 4
  store i32 %v0_8d48, i32* %r3.global-to-local, align 4
  %v0_8d4c = load i32, i32* @r6, align 4
  store i32 %v0_8d4c, i32* %r0.global-to-local, align 4
  %v4_8d50 = call i32 @function_bfc8(i32 %v0_8d4c, i32 %v0_8d40, i32 %v4_8d44, i32 %v0_8d48)
  %v5_8d50 = trunc i32 %v4_8d50 to i16
  store i32 %v4_8d50, i32* %r0.global-to-local, align 4
  %v3_8d54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_8d54, i32* %r2.global-to-local, align 4
  %v3_8d58 = mul i32 %v3_8d54, 32
  store i32 %v3_8d58, i32* %r3.global-to-local, align 4
  %v0_8d5c = load i32, i32* @r5, align 4
  %v1_8d5c = add i32 %v0_8d5c, 16
  %v2_8d5c = inttoptr i32 %v1_8d5c to i32*
  %v3_8d5c = load i32, i32* %v2_8d5c, align 4
  %v5_8d60 = mul i32 %v3_8d54, 24
  store i32 %v5_8d60, i32* %r3.global-to-local, align 4
  %v1_8d64 = load i32, i32* @sl, align 4
  %v2_8d64 = add i32 %v1_8d64, %v5_8d60
  store i32 %v2_8d64, i32* @lr, align 4
  %v2_8d68 = add i32 %v2_8d64, 4
  %v3_8d68 = inttoptr i32 %v2_8d68 to i32*
  store i32 %v3_8d5c, i32* %v3_8d68, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_8d74 = load i32, i32* @r8, align 4
  %v4_8d74 = add i32 %v3_8d74, 6
  %v5_8d74 = inttoptr i32 %v4_8d74 to i16*
  store i16 %v5_8d50, i16* %v5_8d74, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8d7c = load i32, i32* %r1.global-to-local, align 4
  %v1_8d7c = trunc i32 %v0_8d7c to i16
  %v2_8d7c = load i32, i32* %r3.global-to-local, align 4
  %v3_8d7c = load i32, i32* @sl, align 4
  %v4_8d7c = add i32 %v3_8d7c, %v2_8d7c
  %v5_8d7c = inttoptr i32 %v4_8d7c to i16*
  store i16 %v1_8d7c, i16* %v5_8d7c, align 2
  %v0_8d80 = load i32, i32* %r2.global-to-local, align 4
  %v1_8d80 = trunc i32 %v0_8d80 to i16
  %v2_8d80 = load i32, i32* @lr, align 4
  %v3_8d80 = add i32 %v2_8d80, 2
  %v4_8d80 = inttoptr i32 %v3_8d80 to i16*
  store i16 %v1_8d80, i16* %v4_8d80, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8d88 = load i32, i32* @r5, align 4
  store i32 %v0_8d88, i32* %r1.global-to-local, align 4
  store i32 %v3_89bc, i32* %r0.global-to-local, align 4
  %v0_8d90 = load i32, i32* @sb, align 4
  store i32 %v0_8d90, i32* %r2.global-to-local, align 4
  %v0_8d94 = load i32, i32* @lr, align 4
  %v0_8d98 = load i32, i32* %ip.global-to-local, align 4
  %v6_8d9c = call i32 @function_10300(i32 %v3_89bc, i32 %v0_8d88, i32 %v0_8d90, i32 16384, i32 %v0_8d94, i32 %v0_8d98)
  %v3_8da0 = load i32, i32* %stack_var_-44, align 4
  %v1_8da4 = add i32 %v3_8da0, 1
  store i32 %v1_8da4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_8dac = icmp eq i32 %v1_8da4, %arg2
  store i1 %v9_8dac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8da4, i32* %stack_var_-44, align 4
  %v6_8db4 = icmp slt i32 %v1_8da4, %arg2
  br i1 %v6_8db4, label %dec_label_pc_8db8, label %dec_label_pc_8ee4

dec_label_pc_8db8:                                ; preds = %dec_label_pc_8d08, %dec_label_pc_8c44
  %v1_8dcc = phi i32 [ %v1_8da4, %dec_label_pc_8d08 ], [ 0, %dec_label_pc_8c44 ]
  %v5_8dbc = mul i32 %v1_8dcc, 24
  %v1_8dc0 = load i32, i32* @sl, align 4
  %v2_8dc0 = add i32 %v1_8dc0, %v5_8dbc
  store i32 %v2_8dc0, i32* %r3.global-to-local, align 4
  store i32 %v2_8878, i32* %lr.global-to-local, align 4
  %v1_8dc8 = add i32 %v2_8dc0, 20
  %v2_8dc8 = inttoptr i32 %v1_8dc8 to i8*
  %v3_8dc8 = load i8, i8* %v2_8dc8, align 1
  %v4_8dc8 = zext i8 %v3_8dc8 to i32
  store i32 %v4_8dc8, i32* %r2.global-to-local, align 4
  %v4_8dcc = mul i32 %v1_8dcc, 4
  %v5_8dcc = add i32 %v4_8dcc, %v2_8878
  %v6_8dcc = inttoptr i32 %v5_8dcc to i32*
  %v7_8dcc = load i32, i32* %v6_8dcc, align 4
  store i32 %v7_8dcc, i32* @r5, align 4
  %v2_8dd0 = icmp ugt i8 %v3_8dc8, 30
  %v7_8dd0 = icmp eq i8 %v3_8dc8, 31
  store i1 %v7_8dd0, i1* %cpsr_z.global-to-local, align 1
  %v1_8dd4 = add i32 %v7_8dcc, 24
  store i32 %v1_8dd4, i32* @r7, align 4
  %v1_8dd8 = add i32 %v7_8dcc, 38
  store i32 %v1_8dd8, i32* @r6, align 4
  %v1_8ddc = add i32 %v7_8dcc, 58
  store i32 %v1_8ddc, i32* @r8, align 4
  %v2_8de0 = xor i1 %v7_8dd0, true
  %v3_8de0 = and i1 %v2_8dd0, %v2_8de0
  br i1 %v3_8de0, label %dec_label_pc_8c58, label %dec_label_pc_8de4

dec_label_pc_8de4:                                ; preds = %dec_label_pc_8db8
  %v1_8de4 = add i32 %v2_8dc0, 16
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r4.global-to-local, align 4
  %v0_8de8 = call i32 @function_cad8()
  store i32 %v0_8de8, i32* %r0.global-to-local, align 4
  %v3_8dec = load i32, i32* %stack_var_-44, align 4
  %v5_8df4 = mul i32 %v3_8dec, 24
  %v1_8df8 = and i32 %v3_8de4, 16711680
  store i32 %v1_8df8, i32* %ip.global-to-local, align 4
  %v3_8dfc = udiv i32 %v3_8de4, 16777216
  %v4_8e00 = udiv i32 %v1_8df8, 256
  %v5_8e00 = or i32 %v4_8e00, %v3_8dfc
  store i32 %v5_8e00, i32* %r2.global-to-local, align 4
  %v1_8e04 = load i32, i32* @sl, align 4
  %v2_8e04 = add i32 %v1_8e04, %v5_8df4
  store i32 %v2_8e04, i32* %r1.global-to-local, align 4
  %v1_8e08 = and i32 %v3_8de4, 65280
  store i32 %v1_8e08, i32* %r3.global-to-local, align 4
  %v1_8e0c = add i32 %v2_8e04, 20
  %v2_8e0c = inttoptr i32 %v1_8e0c to i8*
  %v3_8e0c = load i8, i8* %v2_8e0c, align 1
  %v4_8e0c = zext i8 %v3_8e0c to i32
  store i32 %v4_8e0c, i32* %ip.global-to-local, align 4
  %v5_8e14 = call i32 @llvm.bswap.i32(i32 %v3_8de4)
  %v7_8e18 = lshr i32 %v0_8de8, %v4_8e0c
  %v8_8e18 = add i32 %v7_8e18, %v5_8e14
  store i32 %v8_8e18, i32* %r2.global-to-local, align 4
  %v1_8e1c = and i32 %v8_8e18, 16711680
  store i32 %v1_8e1c, i32* %r0.global-to-local, align 4
  store i32 %v6_8998, i32* %r1.global-to-local, align 4
  %v5_8e34 = call i32 @llvm.bswap.i32(i32 %v8_8e18)
  store i32 %v5_8e34, i32* %r3.global-to-local, align 4
  store i1 %v7_8c5c, i1* %cpsr_z.global-to-local, align 1
  %v1_8e3c = load i32, i32* @r5, align 4
  %v2_8e3c = add i32 %v1_8e3c, 16
  %v3_8e3c = inttoptr i32 %v2_8e3c to i32*
  store i32 %v5_8e34, i32* %v3_8e3c, align 4
  br i1 %v2_8c5c, label %dec_label_pc_8e44, label %dec_label_pc_8c64

dec_label_pc_8e44:                                ; preds = %dec_label_pc_8de4, %dec_label_pc_8c58
  %v0_8e44 = call i32 @function_cad8()
  store i32 %v0_8e44, i32* %r0.global-to-local, align 4
  store i32 %v3_8a0c, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_8e54, i1* %cpsr_z.global-to-local, align 1
  %v1_8e58 = load i32, i32* @r5, align 4
  %v2_8e58 = add i32 %v1_8e58, 12
  %v3_8e58 = inttoptr i32 %v2_8e58 to i32*
  store i32 %v0_8e44, i32* %v3_8e58, align 4
  br i1 %v3_8e54, label %dec_label_pc_8e60, label %dec_label_pc_8e44.dec_label_pc_8c78_crit_edge

dec_label_pc_8e44.dec_label_pc_8c78_crit_edge:    ; preds = %dec_label_pc_8e44
  %v1_8c7c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8c78

dec_label_pc_8e60:                                ; preds = %dec_label_pc_8e44, %dec_label_pc_8c64
  %v0_8e60 = call i32 @function_cad8()
  %v3_8e68 = urem i32 %v0_8e60, 65536
  store i32 %v3_8e68, i32* %r0.global-to-local, align 4
  %v1_8e70 = sub nsw i32 999, %v3_8e68
  store i32 %v1_8e70, i32* %r3.global-to-local, align 4
  %v1_8e74 = trunc i32 %v0_8e60 to i16
  %v2_8e74 = load i32, i32* @r5, align 4
  %v3_8e74 = add i32 %v2_8e74, 4
  %v4_8e74 = inttoptr i32 %v3_8e74 to i16*
  store i16 %v1_8e74, i16* %v4_8e74, align 2
  %v0_8e78 = load i32, i32* %r3.global-to-local, align 4
  %v1_8e78 = trunc i32 %v0_8e78 to i16
  %v2_8e78 = load i32, i32* @r6, align 4
  %v3_8e78 = add i32 %v2_8e78, 4
  %v4_8e78 = inttoptr i32 %v3_8e78 to i16*
  store i16 %v1_8e78, i16* %v4_8e78, align 2
  store i32 %v3_8a10, i32* %r3.global-to-local, align 4
  %v1_8e80 = load i32, i32* @r4, align 4
  %v9_8e80 = icmp eq i32 %v3_8a10, %v1_8e80
  store i1 %v9_8e80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8e80, label %dec_label_pc_8e88, label %dec_label_pc_8c84

dec_label_pc_8e88:                                ; preds = %dec_label_pc_8e60, %dec_label_pc_8c78
  %v0_8e88 = call i32 @function_cad8()
  %v1_8e88 = trunc i32 %v0_8e88 to i16
  store i32 %v0_8e88, i32* %r0.global-to-local, align 4
  store i32 %v3_8a14, i32* %ip.global-to-local, align 4
  %v1_8e90 = load i32, i32* @r4, align 4
  %v9_8e90 = icmp eq i32 %v3_8a14, %v1_8e90
  store i1 %v9_8e90, i1* %cpsr_z.global-to-local, align 1
  %v3_8e94 = load i32, i32* @r5, align 4
  %v4_8e94 = add i32 %v3_8e94, 58
  %v5_8e94 = inttoptr i32 %v4_8e94 to i16*
  store i16 %v1_8e88, i16* %v5_8e94, align 2
  br i1 %v9_8e90, label %dec_label_pc_8e9c, label %dec_label_pc_8c90

dec_label_pc_8e9c:                                ; preds = %dec_label_pc_8e88, %dec_label_pc_8c84
  %v0_8e9c = call i32 @function_cad8()
  %v1_8e9c = trunc i32 %v0_8e9c to i16
  store i32 %v0_8e9c, i32* %r0.global-to-local, align 4
  store i32 %v1_8a08, i32* @lr, align 4
  store i1 %v2_8ea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8ea4, label %.thread24, label %bb81

.thread24:                                        ; preds = %dec_label_pc_8e9c
  %v3_8eac25 = load i32, i32* @r8, align 4
  %v4_8eac26 = add i32 %v3_8eac25, 2
  %v5_8eac27 = inttoptr i32 %v4_8eac26 to i16*
  store i16 %v1_8e9c, i16* %v5_8eac27, align 2
  br label %dec_label_pc_8eb8

bb81:                                             ; preds = %dec_label_pc_8e9c
  %v1_8ea8 = load i32, i32* @r5, align 4
  %v2_8ea8 = add i32 %v1_8ea8, 16
  %v3_8ea8 = inttoptr i32 %v2_8ea8 to i32*
  %v4_8ea8 = load i32, i32* %v3_8ea8, align 4
  store i32 %v4_8ea8, i32* %r3.global-to-local, align 4
  %v3_8eac = load i32, i32* @r8, align 4
  %v4_8eac = add i32 %v3_8eac, 2
  %v5_8eac = inttoptr i32 %v4_8eac to i16*
  store i16 %v1_8e9c, i16* %v5_8eac, align 2
  %v1_8eb0 = load i32, i32* %r3.global-to-local, align 4
  %v2_8eb0 = load i32, i32* @r6, align 4
  %v3_8eb0 = add i32 %v2_8eb0, 16
  %v4_8eb0 = inttoptr i32 %v3_8eb0 to i32*
  store i32 %v1_8eb0, i32* %v4_8eb0, align 4
  br label %dec_label_pc_8ca4

dec_label_pc_8eb8:                                ; preds = %.thread24, %dec_label_pc_8c90
  %v0_8eb8 = call i32 @function_cad8()
  store i32 %v0_8eb8, i32* %r0.global-to-local, align 4
  %v1_8ebc = load i32, i32* @r6, align 4
  %v2_8ebc = add i32 %v1_8ebc, 16
  %v3_8ebc = inttoptr i32 %v2_8ebc to i32*
  store i32 %v0_8eb8, i32* %v3_8ebc, align 4
  br label %dec_label_pc_8ca4

dec_label_pc_8ec4:                                ; preds = %dec_label_pc_8ca4
  %v0_8ec4 = load i32, i32* @r8, align 4
  %v1_8ec4 = add i32 %v0_8ec4, 8
  store i32 %v1_8ec4, i32* @r4, align 4
  store i32 %v1_8ec4, i32* %r0.global-to-local, align 4
  store i32 %v6_8944, i32* %r1.global-to-local, align 4
  %v2_8ed0 = call i32 @function_cb9c(i32 %v1_8ec4, i32 %v6_8944)
  store i32 %v2_8ed0, i32* %r0.global-to-local, align 4
  store i32 %v6_8944, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_8edc = load i32, i32* @r4, align 4
  %v4_8edc = add i32 %v2_8edc, %v6_8944
  %v5_8edc = inttoptr i32 %v4_8edc to i8*
  store i8 0, i8* %v5_8edc, align 1
  br label %dec_label_pc_8d08

dec_label_pc_8ee4:                                ; preds = %dec_label_pc_8d08, %dec_label_pc_8c30
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_8ee8 = call i32 @function_fcbc(i32* null)
  store i32 %v2_8ee8, i32* %r0.global-to-local, align 4
  store i32 %v2_89a8, i32* %ip.global-to-local, align 4
  %v9_8ef0 = icmp eq i32 %v2_89a8, %v2_8ee8
  store i1 %v9_8ef0, i1* %cpsr_z.global-to-local, align 1
  %v6_8ef4 = icmp slt i32 %v2_89a8, %v2_8ee8
  br i1 %v6_8ef4, label %dec_label_pc_8ef8, label %dec_label_pc_8c30

dec_label_pc_8ef8:                                ; preds = %dec_label_pc_8ee4, %dec_label_pc_884c, %dec_label_pc_8f04
  %v1_8f00 = phi i32 [ %v3_89bc, %dec_label_pc_884c ], [ %v1_8f08, %dec_label_pc_8f04 ], [ %v2_8ee8, %dec_label_pc_8ee4 ]
  store i32 %v3_884c, i32* %r4.global-to-local, align 4
  store i32 %v24_884c, i32* %fp.global-to-local, align 4
  store i32 %v27_884c, i32* %lr.global-to-local, align 4
  ret i32 %v1_8f00

dec_label_pc_8f04:                                ; preds = %dec_label_pc_89cc
  store i32 %v3_89bc, i32* %r0.global-to-local, align 4
  %v1_8f08 = call i32 @function_10008(i32 %v3_89bc)
  store i32 %v1_8f08, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8ef8

; uselistorder directives
  uselistorder i32 %v1_8f08, { 1, 0 }
  uselistorder i16 %v1_8e9c, { 1, 0 }
  uselistorder i32 %v0_8e9c, { 1, 0 }
  uselistorder i32 %v0_8e88, { 1, 0 }
  uselistorder i32 %v1_8e80, { 1, 0 }
  uselistorder i32 %v3_8e68, { 1, 0 }
  uselistorder i32 %v0_8e60, { 1, 0 }
  uselistorder i32 %v5_8e34, { 1, 0 }
  uselistorder i32 %v3_8de4, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v7_8dcc, { 2, 1, 0, 3 }
  uselistorder i32 %v1_8da4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_8d54, { 1, 0, 2 }
  uselistorder i32 %v4_8d50, { 1, 0 }
  uselistorder i32 %v2_8d30, { 1, 0 }
  uselistorder i1 %v2_8ea4, { 2, 3, 1, 0 }
  uselistorder i1 %v3_8e54, { 1, 0, 2, 3 }
  uselistorder i1 %v7_8c5c, { 2, 1, 0 }
  uselistorder i32 %v0_8bdc, { 1, 0, 2 }
  uselistorder i32 %v0_8af4, { 1, 2, 0 }
  uselistorder i32 %tmp68, { 1, 0 }
  uselistorder i32 %v1_8a48, { 2, 0, 1 }
  uselistorder i32 %v3_8a40, { 2, 1, 0 }
  uselistorder i1 %v2_8a18, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8a0c, { 2, 1, 3, 0 }
  uselistorder i32 %v1_8a08, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v0_8a04, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_8a00, { 1, 0, 2, 3 }
  uselistorder i32 %v3_89fc, { 1, 0 }
  uselistorder i1 %v7_89ec, { 1, 0 }
  uselistorder i1 %v7_89c0, { 1, 0 }
  uselistorder i32 %v3_89bc, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_89a8, { 2, 1, 0 }
  uselistorder i32 %v6_8998, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_8964, { 1, 2, 3, 0 }
  uselistorder i32 %v6_8944, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v6_8910, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_88f8, { 1, 2, 0 }
  uselistorder i32 %v1_88d4, { 3, 2, 1, 0 }
  uselistorder i32 %v6_88cc, { 1, 0 }
  uselistorder i32 %v6_8890, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v2_8878, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 19, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 15, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 6, 8, 7, 48, 9, 10, 12, 13, 11, 15, 14, 17, 16, 18, 5, 19, 20, 22, 21, 23, 24, 25, 26, 28, 27, 4, 29, 30, 31, 34, 32, 33, 3, 2, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 13, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 %arg2, { 6, 5, 4, 1, 0, 3, 2, 7, 8, 9, 10 }
  uselistorder label %dec_label_pc_8ef8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8d08, { 1, 0 }
  uselistorder label %dec_label_pc_8ca4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8c30, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_8f14(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8f14:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_8f14 = load i32, i32* @r4, align 4
  %v24_8f14 = load i32, i32* @fp, align 4
  %v27_8f14 = load i32, i32* @lr, align 4
  store i32 0, i32* @sb, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_8f40 = call i32 @function_10eec(i32 %arg2, i32 4)
  %v0_8f44 = load i32, i32* @r4, align 4
  store i32 %v0_8f44, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_8f50 = load i32, i32* @sb, align 4
  store i32 %v0_8f50, i32* %r3.global-to-local, align 4
  %v0_8f54 = load i32, i32* @r5, align 4
  %v5_8f58 = inttoptr i32 %v0_8f44 to i32*
  %v6_8f58 = call i32 @function_8258(i32 %v0_8f54, i32* %v5_8f58, i32 2, i32 %v0_8f50, i32 %v2_8f40)
  %v1_8f64 = urem i32 %v6_8f58, 256
  store i32 %v1_8f64, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8f70 = load i32, i32* @r4, align 4
  store i32 %v0_8f70, i32* %r1.global-to-local, align 4
  %v0_8f74 = load i32, i32* @r5, align 4
  %v5_8f78 = trunc i32 %v6_8f58 to i8
  %v6_8f7c = inttoptr i32 %v0_8f70 to i32*
  %v7_8f7c = call i32 @function_8258(i32 %v0_8f74, i32* %v6_8f7c, i32 3, i32 65535, i32 %v6_8f58)
  %v0_8f80 = load i32, i32* @r4, align 4
  store i32 %v0_8f80, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_8f90 = load i32, i32* @r5, align 4
  %v5_8f94 = inttoptr i32 %v0_8f80 to i32*
  %v6_8f94 = call i32 @function_8258(i32 %v0_8f90, i32* %v5_8f94, i32 4, i32 64, i32 %v7_8f7c)
  %v1_8f9c = urem i32 %v6_8f94, 256
  store i32 %v1_8f9c, i32* %ip.global-to-local, align 4
  %v0_8fa0 = load i32, i32* @r4, align 4
  store i32 %v0_8fa0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8fac = load i32, i32* @r5, align 4
  %v6_8fb4 = inttoptr i32 %v0_8fa0 to i32*
  %v7_8fb4 = call i32 @function_8258(i32 %v0_8fac, i32* %v6_8fb4, i32 5, i32 1, i32 %v1_8f9c)
  %v1_8fc0 = urem i32 %v7_8fb4, 256
  store i32 %v1_8fc0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8fcc = load i32, i32* @r4, align 4
  store i32 %v0_8fcc, i32* %r1.global-to-local, align 4
  %v0_8fd0 = load i32, i32* @r5, align 4
  %v5_8fd8 = inttoptr i32 %v0_8fcc to i32*
  %v6_8fd8 = call i32 @function_8258(i32 %v0_8fd0, i32* %v5_8fd8, i32 6, i32 65535, i32 %v1_8fc0)
  %v0_8fe0 = load i32, i32* @r4, align 4
  store i32 %v0_8fe0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8fd8, i32* %fp.global-to-local, align 4
  %v0_8ff0 = load i32, i32* @r5, align 4
  %v5_8ff4 = inttoptr i32 %v0_8fe0 to i32*
  %v6_8ff4 = call i32 @function_8258(i32 %v0_8ff0, i32* %v5_8ff4, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_8ff8 = load i32, i32* @r4, align 4
  store i32 %v0_8ff8, i32* %r1.global-to-local, align 4
  %v0_8ffc = load i32, i32* @sb, align 4
  store i32 %v0_8ffc, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_8ff4, i32* @r8, align 4
  %v0_9008 = load i32, i32* @r5, align 4
  %v5_900c = inttoptr i32 %v0_8ff8 to i32*
  %v6_900c = call i32 @function_8258(i32 %v0_9008, i32* %v5_900c, i32 %v0_8ffc, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_901c = load i32, i32* @r4, align 4
  store i32 %v0_901c, i32* %r1.global-to-local, align 4
  %v0_9020 = load i32, i32* @r5, align 4
  %v5_9024 = inttoptr i32 %v0_901c to i32*
  %v6_9024 = call i32 @function_8258(i32 %v0_9020, i32* %v5_9024, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_902c = urem i32 %v6_9024, 256
  store i32 %v1_902c, i32* %ip.global-to-local, align 4
  %v0_9030 = load i32, i32* @r4, align 4
  store i32 %v0_9030, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_9038 = load i32, i32* @sb, align 4
  store i32 %v0_9038, i32* %r3.global-to-local, align 4
  %v0_903c = load i32, i32* @r5, align 4
  %v5_9044 = inttoptr i32 %v0_9030 to i32*
  %v6_9044 = call i32 @function_8258(i32 %v0_903c, i32* %v5_9044, i32 18, i32 %v0_9038, i32 %v1_902c)
  %v0_904c = load i32, i32* @r4, align 4
  store i32 %v0_904c, i32* %r1.global-to-local, align 4
  %v2_9050 = load i32, i32* @global_var_202d4.42, align 4
  store i32 %v2_9050, i32* %r3.global-to-local, align 4
  store i32 %v6_9044, i32* @r7, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_905c = load i32, i32* @r5, align 4
  %v5_9060 = inttoptr i32 %v0_904c to i32*
  %v6_9060 = call i32 @function_8258(i32 %v0_905c, i32* %v5_9060, i32 24, i32 %v2_9050, i32 ptrtoint (i32* @0 to i32))
  %v0_9068 = load i32, i32* @sb, align 4
  %v1_906c = inttoptr i32 %v0_9068 to i32*
  %v2_906c = call i32 @function_fcbc(i32* %v1_906c)
  %v1_9070 = load i32, i32* @r6, align 4
  %v2_9070 = add i32 %v1_9070, %v2_906c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9084 = call i32 @function_10384(i32 2, i32 3, i32 6)
  %v7_9088 = icmp eq i32 %v3_9084, -1
  store i1 %v7_9088, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9088, label %dec_label_pc_9558, label %dec_label_pc_9094

dec_label_pc_9094:                                ; preds = %dec_label_pc_8f14
  store i32 1, i32* %stack_var_-44, align 4
  %v6_909c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_909c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_90a4 = load i32, i32* @sb, align 4
  store i32 %v0_90a4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_90b0 = call i32 @function_10340(i32 %v3_9084, i32 %v0_90a4, i32 3, i32 %v6_909c, i32 4)
  %v7_90b4 = icmp eq i32 %v5_90b0, -1
  store i1 %v7_90b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_90b4, label %dec_label_pc_9564, label %dec_label_pc_90bc

dec_label_pc_90bc:                                ; preds = %dec_label_pc_9094
  %v0_90bc = load i32, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v0_90d0 = load i32, i32* @r8, align 4
  %v3_90d4 = mul i32 %v7_8f7c, 65536
  store i32 %v3_90d4, i32* %r1.global-to-local, align 4
  %v0_90d8 = load i32, i32* @r7, align 4
  %v1_90d8 = urem i32 %v0_90d8, 256
  store i32 %v1_90d8, i32* @r7, align 4
  %v3_90dc = urem i32 %v0_90bc, 65536
  store i32 %v3_90dc, i32* %r3.global-to-local, align 4
  %v3_90e0 = urem i32 %v0_90d0, 65536
  store i32 %v3_90e0, i32* %ip.global-to-local, align 4
  %v2_90e4 = icmp eq i32 %arg2, 0
  store i1 %v2_90e4, i1* %cpsr_z.global-to-local, align 1
  %v0_90f4 = load i32, i32* @sb, align 4
  store i32 %v0_90f4, i32* %stack_var_-44, align 4
  %v3_90f8 = urem i32 %v7_8f7c, 65536
  store i32 %v3_90f8, i32* @fp, align 4
  br i1 %v2_90e4, label %dec_label_pc_92ec.preheader, label %dec_label_pc_9108

dec_label_pc_9108:                                ; preds = %dec_label_pc_90bc
  %v3_90d0 = mul i32 %v0_90d0, 65536
  %v3_90bc = mul i32 %v0_90bc, 65536
  %v3_910c = mul i32 %v6_900c, 65536
  %v1_9110 = add i32 %v3_910c, 3407872
  %tmp68 = udiv i32 %v1_9110, 256
  %v3_911c = and i32 %tmp68, 65280
  %v7_8f7c.not = or i32 %v7_8f7c, -65536
  %v1_9120 = xor i32 %v7_8f7c.not, 65535
  %v4_9124 = udiv i32 %v1_9110, 16777216
  %v5_9124 = or i32 %v3_911c, %v4_9124
  store i32 %v3_90d4, i32* %r3.global-to-local, align 4
  %tmp69 = mul i32 %v7_8f7c, 256
  %v3_913c = and i32 %tmp69, 65280
  %tmp70 = mul nsw i32 %v1_9120, 256
  %v3_9140 = and i32 %tmp70, 65280
  %tmp71 = udiv i32 %v7_8f7c, 256
  %v4_9144 = urem i32 %tmp71, 256
  %v5_9144 = or i32 %v4_9144, %v3_913c
  %tmp72 = udiv i32 %v1_9120, 256
  %v4_914c = urem i32 %tmp72, 256
  %v5_914c = or i32 %v4_914c, %v3_9140
  store i32 %v5_914c, i32* @r6, align 4
  store i32 %v3_90bc, i32* %r1.global-to-local, align 4
  store i32 %v3_90d0, i32* %r2.global-to-local, align 4
  %v1_9160 = add i32 %v3_910c, 524288
  %tmp73 = mul i32 %v0_90bc, 256
  %v3_9164 = and i32 %tmp73, 65280
  %v1_9168 = add i32 %v3_910c, 1835008
  store i32 %v1_9168, i32* @r5, align 4
  %tmp74 = mul i32 %v0_90d0, 256
  %v3_916c = and i32 %tmp74, 65280
  %v3_9174 = udiv i32 %v1_9168, 256
  %tmp75 = udiv i32 %v0_90bc, 256
  %v4_9178 = urem i32 %tmp75, 256
  %v5_9178 = or i32 %v4_9178, %v3_9164
  %tmp76 = udiv i32 %v0_90d0, 256
  %v4_917c = urem i32 %tmp76, 256
  %v5_917c = or i32 %v4_917c, %v3_916c
  store i32 %v5_917c, i32* %ip.global-to-local, align 4
  %v1_9180 = and i32 %v3_9174, 65280
  %tmp77 = udiv i32 %v1_9160, 256
  %v3_9184 = and i32 %tmp77, 65280
  store i32 %v3_9184, i32* @lr, align 4
  %v4_9198 = udiv i32 %v1_9160, 16777216
  %v5_9198 = or i32 %v3_9184, %v4_9198
  store i32 %v5_9198, i32* @r7, align 4
  %v4_919c = udiv i32 %v1_9168, 16777216
  %v5_919c = or i32 %v1_9180, %v4_919c
  store i32 %v5_919c, i32* @r8, align 4
  store i32 %v0_90f4, i32* @r4, align 4
  %v1_9200 = trunc i32 %v6_8f94 to i8
  %sext = mul nuw i32 %v5_9124, 65536
  %v4_9208 = sdiv i32 %sext, 65536
  %sext8 = mul nuw i32 %v5_9144, 65536
  %v4_920c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_914c, 65536
  %v4_9274 = sdiv i32 %sext9, 65536
  %v2_92a4 = icmp eq i32 %v1_90d8, 0
  %sext10 = mul nuw i32 %v5_9178, 65536
  %v4_92c8 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_917c, 65536
  %v4_92d0 = sdiv i32 %sext11, 65536
  %extract.t = trunc i32 %v4_9208 to i16
  br label %dec_label_pc_91a4

dec_label_pc_91a4:                                ; preds = %bb82, %dec_label_pc_9108
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_91b0 = call i32 @function_10eec(i32 1510, i32 4)
  store i32 %v2_8f40, i32* %ip.global-to-local, align 4
  %v2_91bc = load i32, i32* @r4, align 4
  %v5_91bc = mul i32 %v2_91bc, 4
  %v6_91bc = add i32 %v5_91bc, %v2_8f40
  %v7_91bc = inttoptr i32 %v6_91bc to i32*
  store i32 %v2_91b0, i32* %v7_91bc, align 4
  %v3_91c0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_91c0, i32* %r3.global-to-local, align 4
  %v0_91c4 = load i32, i32* %ip.global-to-local, align 4
  %v4_91c4 = mul i32 %v3_91c0, 4
  %v5_91c4 = add i32 %v0_91c4, %v4_91c4
  %v6_91c4 = inttoptr i32 %v5_91c4 to i32*
  %v7_91c4 = load i32, i32* %v6_91c4, align 4
  store i32 %v7_91c4, i32* %r4.global-to-local, align 4
  %v1_91c8 = inttoptr i32 %v7_91c4 to i8*
  %v2_91c8 = load i8, i8* %v1_91c8, align 1
  %tmp = urem i8 %v2_91c8, 16
  %v1_91cc = zext i8 %tmp to i32
  %v1_91d0 = or i32 %v1_91cc, 64
  store i32 %v1_91d0, i32* %r2.global-to-local, align 4
  %v1_91d4 = trunc i32 %v1_91d0 to i8
  store i8 %v1_91d4, i8* %v1_91c8, align 1
  %v0_91d8 = load i32, i32* %r3.global-to-local, align 4
  %v5_91dc = mul i32 %v0_91d8, 24
  store i32 %v5_91dc, i32* %r1.global-to-local, align 4
  %v0_91e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_91e0 = inttoptr i32 %v0_91e0 to i8*
  %v2_91e0 = load i8, i8* %v1_91e0, align 1
  %v1_91e4 = and i8 %v2_91e0, -16
  %v1_91e8 = or i8 %v1_91e4, 5
  store i32 %v1_8fc0, i32* %lr.global-to-local, align 4
  store i8 %v1_91e8, i8* %v1_91e0, align 1
  store i32 %v6_8f58, i32* %r2.global-to-local, align 4
  %v2_91f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_91f8 = add i32 %v2_91f8, 1
  %v4_91f8 = inttoptr i32 %v3_91f8 to i8*
  store i8 %v5_8f78, i8* %v4_91f8, align 1
  store i32 %v1_8f9c, i32* %r3.global-to-local, align 4
  %v2_9200 = load i32, i32* %r4.global-to-local, align 4
  %v3_9200 = add i32 %v2_9200, 8
  %v4_9200 = inttoptr i32 %v3_9200 to i8*
  store i8 %v1_9200, i8* %v4_9200, align 1
  %v0_9204 = load i32, i32* %lr.global-to-local, align 4
  %v2_9204 = icmp eq i32 %v0_9204, 0
  store i1 %v2_9204, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_9208, i32* %ip.global-to-local, align 4
  store i32 %v4_920c, i32* %lr.global-to-local, align 4
  br i1 %v2_9204, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_91a4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9214 = load i32, i32* %r4.global-to-local, align 4
  %v4_9214 = add i32 %v3_9214, 6
  %v5_9214 = inttoptr i32 %v4_9214 to i16*
  store i16 64, i16* %v5_9214, align 2
  %v0_9218.pre = load i32, i32* %ip.global-to-local, align 4
  %extract.t27 = trunc i32 %v0_9218.pre to i16
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_91a4, %bb
  %v0_9218.off0 = phi i16 [ %extract.t, %dec_label_pc_91a4 ], [ %extract.t27, %bb ]
  %v2_9218 = load i32, i32* %r4.global-to-local, align 4
  %v3_9218 = add i32 %v2_9218, 2
  %v4_9218 = inttoptr i32 %v3_9218 to i16*
  store i16 %v0_9218.off0, i16* %v4_9218, align 2
  %v0_921c = load i32, i32* %r4.global-to-local, align 4
  %v1_921c = add i32 %v0_921c, 20
  store i32 %v1_921c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v3_9228 = add i32 %v0_921c, 9
  %v4_9228 = inttoptr i32 %v3_9228 to i8*
  store i8 47, i8* %v4_9228, align 1
  %v0_922c = load i32, i32* %lr.global-to-local, align 4
  %v1_922c = trunc i32 %v0_922c to i16
  %v2_922c = load i32, i32* %r4.global-to-local, align 4
  %v3_922c = add i32 %v2_922c, 4
  %v4_922c = inttoptr i32 %v3_922c to i16*
  store i16 %v1_922c, i16* %v4_922c, align 2
  %v0_9230 = load i32, i32* %ip.global-to-local, align 4
  %v1_9230 = trunc i32 %v0_9230 to i16
  %v2_9230 = load i32, i32* %r2.global-to-local, align 4
  %v3_9230 = add i32 %v2_9230, 2
  %v4_9230 = inttoptr i32 %v3_9230 to i16*
  store i16 %v1_9230, i16* %v4_9230, align 2
  store i32 %v6_9060, i32* %lr.global-to-local, align 4
  %v0_9238 = load i32, i32* %r4.global-to-local, align 4
  %v1_9238 = add i32 %v0_9238, 24
  %v2_9238 = inttoptr i32 %v1_9238 to i8*
  %v3_9238 = load i8, i8* %v2_9238, align 1
  %v4_9238 = zext i8 %v3_9238 to i32
  store i32 %v4_9238, i32* %r2.global-to-local, align 4
  %v2_923c = add i32 %v0_9238, 12
  %v3_923c = inttoptr i32 %v2_923c to i32*
  store i32 %v6_9060, i32* %v3_923c, align 4
  %v0_9240 = load i32, i32* %r2.global-to-local, align 4
  %v1_9240 = and i32 %v0_9240, -241
  %v1_9244 = or i32 %v1_9240, 64
  store i32 %v1_9244, i32* %r2.global-to-local, align 4
  %v0_9248 = load i32, i32* %r1.global-to-local, align 4
  %v1_9248 = load i32, i32* @sl, align 4
  %v2_9248 = add i32 %v1_9248, %v0_9248
  store i32 %v2_9248, i32* %r1.global-to-local, align 4
  %v1_924c = add i32 %v2_9248, 16
  %v2_924c = inttoptr i32 %v1_924c to i32*
  %v3_924c = load i32, i32* %v2_924c, align 4
  store i32 %v3_924c, i32* %r1.global-to-local, align 4
  %v1_9250 = trunc i32 %v1_9244 to i8
  %v2_9250 = load i32, i32* %r4.global-to-local, align 4
  %v3_9250 = add i32 %v2_9250, 24
  %v4_9250 = inttoptr i32 %v3_9250 to i8*
  store i8 %v1_9250, i8* %v4_9250, align 1
  %v0_9254 = load i32, i32* %r4.global-to-local, align 4
  %v1_9254 = add i32 %v0_9254, 24
  %v2_9254 = inttoptr i32 %v1_9254 to i8*
  %v3_9254 = load i8, i8* %v2_9254, align 1
  %v1_9258 = and i8 %v3_9254, -16
  %v1_925c = or i8 %v1_9258, 5
  store i8 %v1_925c, i8* %v2_9254, align 1
  %v0_9264 = load i32, i32* %r1.global-to-local, align 4
  %v1_9264 = load i32, i32* %r4.global-to-local, align 4
  %v2_9264 = add i32 %v1_9264, 16
  %v3_9264 = inttoptr i32 %v2_9264 to i32*
  store i32 %v0_9264, i32* %v3_9264, align 4
  store i32 %v6_8f58, i32* %r1.global-to-local, align 4
  %v0_926c = load i32, i32* %r4.global-to-local, align 4
  %v1_926c = add i32 %v0_926c, 24
  store i32 %v1_926c, i32* @r5, align 4
  %v3_9270 = add i32 %v0_926c, 25
  %v4_9270 = inttoptr i32 %v3_9270 to i8*
  store i8 %v5_8f78, i8* %v4_9270, align 1
  store i32 %v4_9274, i32* %r2.global-to-local, align 4
  %v0_9278 = load i32, i32* @r8, align 4
  %v1_9278 = trunc i32 %v0_9278 to i16
  %v2_9278 = load i32, i32* @r5, align 4
  %v3_9278 = add i32 %v2_9278, 2
  %v4_9278 = inttoptr i32 %v3_9278 to i16*
  store i16 %v1_9278, i16* %v4_9278, align 2
  %v0_927c = load i32, i32* %r2.global-to-local, align 4
  %v1_927c = trunc i32 %v0_927c to i16
  %v2_927c = load i32, i32* @r5, align 4
  %v3_927c = add i32 %v2_927c, 4
  %v4_927c = inttoptr i32 %v3_927c to i16*
  store i16 %v1_927c, i16* %v4_927c, align 2
  store i32 %v1_8f9c, i32* %r3.global-to-local, align 4
  %v0_9284 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9284, label %bb79, label %bb78

bb78:                                             ; preds = %.thread
  store i32 64, i32* %ip.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %.thread, %bb78
  %v2_9288 = load i32, i32* @r5, align 4
  %v3_9288 = add i32 %v2_9288, 8
  %v4_9288 = inttoptr i32 %v3_9288 to i8*
  store i8 %v1_9200, i8* %v4_9288, align 1
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9290 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9290, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9290 = load i32, i32* %ip.global-to-local, align 4
  %v2_9290 = trunc i32 %v1_9290 to i16
  %v3_9290 = load i32, i32* @r5, align 4
  %v4_9290 = add i32 %v3_9290, 6
  %v5_9290 = inttoptr i32 %v4_9290 to i16*
  store i16 %v2_9290, i16* %v5_9290, align 2
  %v0_9294.pre = load i32, i32* %r3.global-to-local, align 4
  %extract.t28 = trunc i32 %v0_9294.pre to i8
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9294.off0 = phi i8 [ 17, %bb79 ], [ %extract.t28, %bb80 ]
  %v2_9294 = load i32, i32* @r5, align 4
  %v3_9294 = add i32 %v2_9294, 9
  %v4_9294 = inttoptr i32 %v3_9294 to i8*
  store i8 %v0_9294.off0, i8* %v4_9294, align 1
  %v0_9298 = call i32 @function_cad8()
  store i32 %v1_90d8, i32* @lr, align 4
  store i1 %v2_92a4, i1* %cpsr_z.global-to-local, align 1
  %v1_92a8 = sub i32 1023, %v0_9298
  store i32 %v1_92a8, i32* %r3.global-to-local, align 4
  br i1 %v2_92a4, label %.thread12, label %.thread13

.thread12:                                        ; preds = %bb81
  %v2_92b0 = load i32, i32* @r5, align 4
  %v3_92b0 = add i32 %v2_92b0, 16
  %v4_92b0 = inttoptr i32 %v3_92b0 to i32*
  store i32 %v1_92a8, i32* %v4_92b0, align 4
  br label %bb82

.thread13:                                        ; preds = %bb81
  %v1_92ac = load i32, i32* %r4.global-to-local, align 4
  %v2_92ac = add i32 %v1_92ac, 16
  %v3_92ac = inttoptr i32 %v2_92ac to i32*
  %v4_92ac = load i32, i32* %v3_92ac, align 4
  store i32 %v4_92ac, i32* %r3.global-to-local, align 4
  %v2_92b4 = load i32, i32* @r5, align 4
  %v3_92b4 = add i32 %v2_92b4, 16
  %v4_92b4 = inttoptr i32 %v3_92b4 to i32*
  store i32 %v4_92ac, i32* %v4_92b4, align 4
  br label %bb82

bb82:                                             ; preds = %.thread12, %.thread13
  %v1_92b8 = load i32, i32* @r5, align 4
  %v2_92b8 = add i32 %v1_92b8, 12
  %v3_92b8 = inttoptr i32 %v2_92b8 to i32*
  store i32 %v0_9298, i32* %v3_92b8, align 4
  %v3_92bc = load i32, i32* %stack_var_-44, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_92c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_92c4 = add i32 %v0_92c4, 44
  store i32 %v1_92c4, i32* @r6, align 4
  store i32 %v4_92c8, i32* %r2.global-to-local, align 4
  %v1_92cc = add i32 %v3_92bc, 1
  store i32 %v1_92cc, i32* @r4, align 4
  store i32 %v4_92d0, i32* %r3.global-to-local, align 4
  %v9_92d4 = icmp eq i32 %v1_92cc, %arg2
  store i1 %v9_92d4, i1* %cpsr_z.global-to-local, align 1
  %v0_92d8 = load i32, i32* @r7, align 4
  %v1_92d8 = trunc i32 %v0_92d8 to i16
  %v3_92d8 = add i32 %v0_92c4, 48
  %v4_92d8 = inttoptr i32 %v3_92d8 to i16*
  store i16 %v1_92d8, i16* %v4_92d8, align 2
  %v0_92dc = load i32, i32* %r2.global-to-local, align 4
  %v1_92dc = trunc i32 %v0_92dc to i16
  %v2_92dc = load i32, i32* @r6, align 4
  %v3_92dc = inttoptr i32 %v2_92dc to i16*
  store i16 %v1_92dc, i16* %v3_92dc, align 2
  %v0_92e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_92e0 = trunc i32 %v0_92e0 to i16
  %v2_92e0 = load i32, i32* @r6, align 4
  %v3_92e0 = add i32 %v2_92e0, 2
  %v4_92e0 = inttoptr i32 %v3_92e0 to i16*
  store i16 %v1_92e0, i16* %v4_92e0, align 2
  %v0_92e4 = load i32, i32* @r4, align 4
  store i32 %v0_92e4, i32* %stack_var_-44, align 4
  %v5_92e8 = icmp slt i32 %v1_92cc, %arg2
  br i1 %v5_92e8, label %dec_label_pc_91a4, label %dec_label_pc_92ec.preheader

dec_label_pc_92ec.preheader:                      ; preds = %bb82, %dec_label_pc_90bc
  %v1_9308 = add i32 %v6_900c, 8
  %v1_930c = add i32 %v6_900c, 52
  %v2_9318 = icmp eq i32 %v6_9060, -1
  %v7_9318 = icmp eq i32 %v6_9060, -1
  %v2_94fc = icmp eq i32 %v1_90d8, 0
  %v2_9518 = icmp eq i32 %v1_902c, 0
  br label %dec_label_pc_92ec

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92ec.preheader, %dec_label_pc_9544
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_90e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_90e4, label %dec_label_pc_9544, label %dec_label_pc_9300

dec_label_pc_9300:                                ; preds = %dec_label_pc_92ec
  store i32 %v6_900c, i32* %lr.global-to-local, align 4
  store i32 %v1_9308, i32* @sb, align 4
  store i32 %v1_930c, i32* @r8, align 4
  br label %dec_label_pc_9418

dec_label_pc_9314:                                ; preds = %dec_label_pc_9418
  store i32 %v6_9060, i32* %r2.global-to-local, align 4
  store i1 %v7_9318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9318, label %dec_label_pc_94a0, label %dec_label_pc_9320

dec_label_pc_9320:                                ; preds = %dec_label_pc_9440, %dec_label_pc_9314
  store i32 65535, i32* @r4, align 4
  %v0_9328 = load i32, i32* @fp, align 4
  %v9_9328 = icmp eq i32 %v0_9328, 65535
  store i1 %v9_9328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9328, label %dec_label_pc_94b8, label %dec_label_pc_9330

dec_label_pc_9330:                                ; preds = %dec_label_pc_94a0.dec_label_pc_9330_crit_edge, %dec_label_pc_9320
  %v1_9334 = phi i32 [ %v1_9334.pre, %dec_label_pc_94a0.dec_label_pc_9330_crit_edge ], [ 65535, %dec_label_pc_9320 ]
  store i32 %v3_90dc, i32* %r3.global-to-local, align 4
  %v9_9334 = icmp eq i32 %v3_90dc, %v1_9334
  store i1 %v9_9334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9334, label %dec_label_pc_94e0, label %dec_label_pc_933c

dec_label_pc_933c:                                ; preds = %dec_label_pc_94b8, %dec_label_pc_9330
  %v1_9340 = phi i32 [ %v1_94d8, %dec_label_pc_94b8 ], [ %v1_9334, %dec_label_pc_9330 ]
  store i32 %v3_90e0, i32* %ip.global-to-local, align 4
  %v9_9340 = icmp eq i32 %v3_90e0, %v1_9340
  store i1 %v9_9340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9340, label %dec_label_pc_94f4, label %dec_label_pc_9348

dec_label_pc_9348:                                ; preds = %dec_label_pc_94e0, %dec_label_pc_933c
  store i32 %v1_90d8, i32* @lr, align 4
  store i1 %v2_94fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94fc, label %dec_label_pc_9510, label %.thread14

.thread14:                                        ; preds = %dec_label_pc_9348
  %v1_9350 = load i32, i32* @r5, align 4
  %v2_9350 = add i32 %v1_9350, 16
  %v3_9350 = inttoptr i32 %v2_9350 to i32*
  %v4_9350 = load i32, i32* %v3_9350, align 4
  store i32 %v4_9350, i32* %r3.global-to-local, align 4
  %v2_9354 = load i32, i32* @r6, align 4
  %v3_9354 = add i32 %v2_9354, 16
  %v4_9354 = inttoptr i32 %v3_9354 to i32*
  store i32 %v4_9350, i32* %v4_9354, align 4
  br label %dec_label_pc_935c

dec_label_pc_935c:                                ; preds = %bb85, %.thread14
  store i32 %v1_902c, i32* %r1.global-to-local, align 4
  store i1 %v2_9518, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9518, label %dec_label_pc_9368, label %dec_label_pc_9524

dec_label_pc_9368:                                ; preds = %dec_label_pc_935c, %dec_label_pc_9510, %dec_label_pc_9524
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_936c = load i32, i32* @r5, align 4
  %v3_936c = add i32 %v2_936c, 10
  %v4_936c = inttoptr i32 %v3_936c to i16*
  store i16 0, i16* %v4_936c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9374 = load i32, i32* @r5, align 4
  store i32 %v0_9374, i32* @r0, align 4
  %v2_9378 = call i32 @function_bf78(i32 %v0_9374, i32 20)
  %v3_9378 = trunc i32 %v2_9378 to i16
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_9380 = load i32, i32* @r5, align 4
  %v4_9380 = add i32 %v3_9380, 10
  %v5_9380 = inttoptr i32 %v4_9380 to i16*
  store i16 %v3_9378, i16* %v5_9380, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9388 = load i32, i32* %ip.global-to-local, align 4
  %v1_9388 = trunc i32 %v0_9388 to i16
  %v2_9388 = load i32, i32* @r6, align 4
  %v3_9388 = add i32 %v2_9388, 10
  %v4_9388 = inttoptr i32 %v3_9388 to i16*
  store i16 %v1_9388, i16* %v4_9388, align 2
  %v0_938c = load i32, i32* @r6, align 4
  store i32 %v0_938c, i32* @r0, align 4
  %v2_9390 = call i32 @function_bf78(i32 %v0_938c, i32 20)
  %v3_9390 = trunc i32 %v2_9390 to i16
  %v3_9394 = load i32, i32* @r6, align 4
  %v4_9394 = add i32 %v3_9394, 10
  %v5_9394 = inttoptr i32 %v4_9394 to i16*
  store i16 %v3_9390, i16* %v5_9394, align 2
  %v2_939c = load i32, i32* @r7, align 4
  %v3_939c = add i32 %v2_939c, 6
  %v4_939c = inttoptr i32 %v3_939c to i16*
  store i16 0, i16* %v4_939c, align 2
  %v0_93a0 = load i32, i32* @r7, align 4
  store i32 %v0_93a0, i32* @r1, align 4
  %v1_93a4 = add i32 %v0_93a0, 4
  %v2_93a4 = inttoptr i32 %v1_93a4 to i16*
  %v3_93a4 = load i16, i16* %v2_93a4, align 2
  %v4_93a4 = zext i16 %v3_93a4 to i32
  store i32 %v4_93a4, i32* %r2.global-to-local, align 4
  %v0_93a8 = load i32, i32* @sb, align 4
  store i32 %v0_93a8, i32* %r3.global-to-local, align 4
  %v0_93ac = load i32, i32* @r6, align 4
  %v4_93b0 = call i32 @function_bfc8(i32 %v0_93ac, i32 %v0_93a0, i32 %v4_93a4, i32 %v0_93a8)
  %v5_93b0 = trunc i32 %v4_93b0 to i16
  %v3_93b4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_93b4, i32* %r2.global-to-local, align 4
  %v3_93b8 = mul i32 %v3_93b4, 32
  store i32 %v3_93b8, i32* %r3.global-to-local, align 4
  %v0_93bc = load i32, i32* @r5, align 4
  %v1_93bc = add i32 %v0_93bc, 16
  %v2_93bc = inttoptr i32 %v1_93bc to i32*
  %v3_93bc = load i32, i32* %v2_93bc, align 4
  %v5_93c0 = mul i32 %v3_93b4, 24
  store i32 %v5_93c0, i32* %r3.global-to-local, align 4
  %v1_93c4 = load i32, i32* @sl, align 4
  %v2_93c4 = add i32 %v1_93c4, %v5_93c0
  store i32 %v2_93c4, i32* @lr, align 4
  %v2_93c8 = add i32 %v2_93c4, 4
  %v3_93c8 = inttoptr i32 %v2_93c8 to i32*
  store i32 %v3_93bc, i32* %v3_93c8, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_93d4 = load i32, i32* @r7, align 4
  %v4_93d4 = add i32 %v3_93d4, 6
  %v5_93d4 = inttoptr i32 %v4_93d4 to i16*
  store i16 %v5_93b0, i16* %v5_93d4, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_93dc = load i32, i32* %r1.global-to-local, align 4
  %v1_93dc = trunc i32 %v0_93dc to i16
  %v2_93dc = load i32, i32* %r3.global-to-local, align 4
  %v3_93dc = load i32, i32* @sl, align 4
  %v4_93dc = add i32 %v3_93dc, %v2_93dc
  %v5_93dc = inttoptr i32 %v4_93dc to i16*
  store i16 %v1_93dc, i16* %v5_93dc, align 2
  %v0_93e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_93e0 = trunc i32 %v0_93e0 to i16
  %v2_93e0 = load i32, i32* @lr, align 4
  %v3_93e0 = add i32 %v2_93e0, 2
  %v4_93e0 = inttoptr i32 %v3_93e0 to i16*
  store i16 %v1_93e0, i16* %v4_93e0, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_93e8 = load i32, i32* @r5, align 4
  store i32 %v0_93e8, i32* %r1.global-to-local, align 4
  %v0_93f0 = load i32, i32* @r8, align 4
  store i32 %v0_93f0, i32* %r2.global-to-local, align 4
  %v0_93f4 = load i32, i32* @lr, align 4
  %v0_93f8 = load i32, i32* %ip.global-to-local, align 4
  %v6_93fc = call i32 @function_10300(i32 %v3_9084, i32 %v0_93e8, i32 %v0_93f0, i32 16384, i32 %v0_93f4, i32 %v0_93f8)
  %v3_9400 = load i32, i32* %stack_var_-44, align 4
  %v1_9404 = add i32 %v3_9400, 1
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_940c = icmp eq i32 %v1_9404, %arg2
  store i1 %v9_940c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9404, i32* %stack_var_-44, align 4
  %v6_9414 = icmp slt i32 %v1_9404, %arg2
  br i1 %v6_9414, label %dec_label_pc_9418, label %dec_label_pc_9544

dec_label_pc_9418:                                ; preds = %dec_label_pc_9368, %dec_label_pc_9300
  %v1_942c = phi i32 [ %v1_9404, %dec_label_pc_9368 ], [ 0, %dec_label_pc_9300 ]
  %v5_941c = mul i32 %v1_942c, 24
  %v1_9420 = load i32, i32* @sl, align 4
  %v2_9420 = add i32 %v1_9420, %v5_941c
  store i32 %v2_9420, i32* %r3.global-to-local, align 4
  store i32 %v2_8f40, i32* %r1.global-to-local, align 4
  %v1_9428 = add i32 %v2_9420, 20
  %v2_9428 = inttoptr i32 %v1_9428 to i8*
  %v3_9428 = load i8, i8* %v2_9428, align 1
  %v4_9428 = zext i8 %v3_9428 to i32
  store i32 %v4_9428, i32* %r2.global-to-local, align 4
  %v4_942c = mul i32 %v1_942c, 4
  %v5_942c = add i32 %v4_942c, %v2_8f40
  %v6_942c = inttoptr i32 %v5_942c to i32*
  %v7_942c = load i32, i32* %v6_942c, align 4
  store i32 %v7_942c, i32* @r5, align 4
  %v2_9430 = icmp ugt i8 %v3_9428, 30
  %v7_9430 = icmp eq i8 %v3_9428, 31
  store i1 %v7_9430, i1* %cpsr_z.global-to-local, align 1
  %v1_9434 = add i32 %v7_942c, 24
  store i32 %v1_9434, i32* @r6, align 4
  %v1_9438 = add i32 %v7_942c, 44
  store i32 %v1_9438, i32* @r7, align 4
  %v2_943c = xor i1 %v7_9430, true
  %v3_943c = and i1 %v2_9430, %v2_943c
  br i1 %v3_943c, label %dec_label_pc_9314, label %dec_label_pc_9440

dec_label_pc_9440:                                ; preds = %dec_label_pc_9418
  %v1_9440 = add i32 %v2_9420, 16
  %v2_9440 = inttoptr i32 %v1_9440 to i32*
  %v3_9440 = load i32, i32* %v2_9440, align 4
  store i32 %v3_9440, i32* %r4.global-to-local, align 4
  %v0_9444 = call i32 @function_cad8()
  %v3_9448 = load i32, i32* %stack_var_-44, align 4
  %v5_9450 = mul i32 %v3_9448, 24
  %v1_9454 = and i32 %v3_9440, 16711680
  store i32 %v1_9454, i32* %ip.global-to-local, align 4
  %v3_9458 = udiv i32 %v3_9440, 16777216
  %v4_945c = udiv i32 %v1_9454, 256
  %v5_945c = or i32 %v4_945c, %v3_9458
  store i32 %v5_945c, i32* %r2.global-to-local, align 4
  %v1_9460 = load i32, i32* @sl, align 4
  %v2_9460 = add i32 %v1_9460, %v5_9450
  store i32 %v2_9460, i32* %r1.global-to-local, align 4
  %v1_9464 = and i32 %v3_9440, 65280
  store i32 %v1_9464, i32* %r3.global-to-local, align 4
  %v1_9468 = add i32 %v2_9460, 20
  %v2_9468 = inttoptr i32 %v1_9468 to i8*
  %v3_9468 = load i8, i8* %v2_9468, align 1
  %v4_9468 = zext i8 %v3_9468 to i32
  store i32 %v4_9468, i32* %ip.global-to-local, align 4
  %v5_9470 = call i32 @llvm.bswap.i32(i32 %v3_9440)
  %v7_9474 = lshr i32 %v0_9444, %v4_9468
  %v8_9474 = add i32 %v7_9474, %v5_9470
  %v1_9480 = and i32 %v8_9474, 65280
  store i32 %v1_9480, i32* %r1.global-to-local, align 4
  %v5_948c = call i32 @llvm.bswap.i32(i32 %v8_9474)
  store i32 %v5_948c, i32* %r3.global-to-local, align 4
  store i32 %v6_9060, i32* %r2.global-to-local, align 4
  store i1 %v7_9318, i1* %cpsr_z.global-to-local, align 1
  %v1_9498 = load i32, i32* @r5, align 4
  %v2_9498 = add i32 %v1_9498, 16
  %v3_9498 = inttoptr i32 %v2_9498 to i32*
  store i32 %v5_948c, i32* %v3_9498, align 4
  br i1 %v2_9318, label %dec_label_pc_94a0, label %dec_label_pc_9320

dec_label_pc_94a0:                                ; preds = %dec_label_pc_9440, %dec_label_pc_9314
  %v0_94a0 = call i32 @function_cad8()
  store i32 65535, i32* @r4, align 4
  %v0_94ac = load i32, i32* @fp, align 4
  %v9_94ac = icmp eq i32 %v0_94ac, 65535
  store i1 %v9_94ac, i1* %cpsr_z.global-to-local, align 1
  %v1_94b0 = load i32, i32* @r5, align 4
  %v2_94b0 = add i32 %v1_94b0, 12
  %v3_94b0 = inttoptr i32 %v2_94b0 to i32*
  store i32 %v0_94a0, i32* %v3_94b0, align 4
  br i1 %v9_94ac, label %dec_label_pc_94b8, label %dec_label_pc_94a0.dec_label_pc_9330_crit_edge

dec_label_pc_94a0.dec_label_pc_9330_crit_edge:    ; preds = %dec_label_pc_94a0
  %v1_9334.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9330

dec_label_pc_94b8:                                ; preds = %dec_label_pc_94a0, %dec_label_pc_9320
  %v0_94b8 = call i32 @function_cad8()
  %v3_94c0 = urem i32 %v0_94b8, 65536
  %v1_94c8 = sub nsw i32 999, %v3_94c0
  store i32 %v1_94c8, i32* %r3.global-to-local, align 4
  %v1_94cc = trunc i32 %v0_94b8 to i16
  %v2_94cc = load i32, i32* @r5, align 4
  %v3_94cc = add i32 %v2_94cc, 4
  %v4_94cc = inttoptr i32 %v3_94cc to i16*
  store i16 %v1_94cc, i16* %v4_94cc, align 2
  %v0_94d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94d0 = trunc i32 %v0_94d0 to i16
  %v2_94d0 = load i32, i32* @r6, align 4
  %v3_94d0 = add i32 %v2_94d0, 4
  %v4_94d0 = inttoptr i32 %v3_94d0 to i16*
  store i16 %v1_94d0, i16* %v4_94d0, align 2
  store i32 %v3_90dc, i32* %r3.global-to-local, align 4
  %v1_94d8 = load i32, i32* @r4, align 4
  %v9_94d8 = icmp eq i32 %v3_90dc, %v1_94d8
  store i1 %v9_94d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_94d8, label %dec_label_pc_94e0, label %dec_label_pc_933c

dec_label_pc_94e0:                                ; preds = %dec_label_pc_94b8, %dec_label_pc_9330
  %v0_94e0 = call i32 @function_cad8()
  %v1_94e0 = trunc i32 %v0_94e0 to i16
  store i32 %v3_90e0, i32* %ip.global-to-local, align 4
  %v1_94e8 = load i32, i32* @r4, align 4
  %v9_94e8 = icmp eq i32 %v3_90e0, %v1_94e8
  store i1 %v9_94e8, i1* %cpsr_z.global-to-local, align 1
  %v3_94ec = load i32, i32* @r5, align 4
  %v4_94ec = add i32 %v3_94ec, 44
  %v5_94ec = inttoptr i32 %v4_94ec to i16*
  store i16 %v1_94e0, i16* %v5_94ec, align 2
  br i1 %v9_94e8, label %dec_label_pc_94f4, label %dec_label_pc_9348

dec_label_pc_94f4:                                ; preds = %dec_label_pc_94e0, %dec_label_pc_933c
  %v0_94f4 = call i32 @function_cad8()
  %v1_94f4 = trunc i32 %v0_94f4 to i16
  store i32 %v1_90d8, i32* @lr, align 4
  store i1 %v2_94fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94fc, label %.thread29, label %bb85

.thread29:                                        ; preds = %dec_label_pc_94f4
  %v3_950430 = load i32, i32* @r7, align 4
  %v4_950431 = add i32 %v3_950430, 2
  %v5_950432 = inttoptr i32 %v4_950431 to i16*
  store i16 %v1_94f4, i16* %v5_950432, align 2
  br label %dec_label_pc_9510

bb85:                                             ; preds = %dec_label_pc_94f4
  %v1_9500 = load i32, i32* @r5, align 4
  %v2_9500 = add i32 %v1_9500, 16
  %v3_9500 = inttoptr i32 %v2_9500 to i32*
  %v4_9500 = load i32, i32* %v3_9500, align 4
  store i32 %v4_9500, i32* %r3.global-to-local, align 4
  %v3_9504 = load i32, i32* @r7, align 4
  %v4_9504 = add i32 %v3_9504, 2
  %v5_9504 = inttoptr i32 %v4_9504 to i16*
  store i16 %v1_94f4, i16* %v5_9504, align 2
  %v1_9508 = load i32, i32* %r3.global-to-local, align 4
  %v2_9508 = load i32, i32* @r6, align 4
  %v3_9508 = add i32 %v2_9508, 16
  %v4_9508 = inttoptr i32 %v3_9508 to i32*
  store i32 %v1_9508, i32* %v4_9508, align 4
  br label %dec_label_pc_935c

dec_label_pc_9510:                                ; preds = %.thread29, %dec_label_pc_9348
  %v0_9510 = call i32 @function_cad8()
  store i32 %v1_902c, i32* %r1.global-to-local, align 4
  store i1 %v2_9518, i1* %cpsr_z.global-to-local, align 1
  %v1_951c = load i32, i32* @r6, align 4
  %v2_951c = add i32 %v1_951c, 16
  %v3_951c = inttoptr i32 %v2_951c to i32*
  store i32 %v0_9510, i32* %v3_951c, align 4
  br i1 %v2_9518, label %dec_label_pc_9368, label %dec_label_pc_9524

dec_label_pc_9524:                                ; preds = %dec_label_pc_935c, %dec_label_pc_9510
  %v0_9524 = load i32, i32* @r7, align 4
  %v1_9524 = add i32 %v0_9524, 8
  store i32 %v1_9524, i32* @r4, align 4
  store i32 %v6_900c, i32* %r1.global-to-local, align 4
  %v2_9530 = call i32 @function_cb9c(i32 %v1_9524, i32 %v6_900c)
  store i32 %v6_900c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_953c = load i32, i32* @r4, align 4
  %v4_953c = add i32 %v2_953c, %v6_900c
  %v5_953c = inttoptr i32 %v4_953c to i8*
  store i8 0, i8* %v5_953c, align 1
  br label %dec_label_pc_9368

dec_label_pc_9544:                                ; preds = %dec_label_pc_9368, %dec_label_pc_92ec
  %v2_9548 = call i32 @function_fcbc(i32* null)
  store i32 %v2_9070, i32* %ip.global-to-local, align 4
  %v9_9550 = icmp eq i32 %v2_9070, %v2_9548
  store i1 %v9_9550, i1* %cpsr_z.global-to-local, align 1
  %v6_9554 = icmp slt i32 %v2_9070, %v2_9548
  br i1 %v6_9554, label %dec_label_pc_9558, label %dec_label_pc_92ec

dec_label_pc_9558:                                ; preds = %dec_label_pc_9544, %dec_label_pc_8f14, %dec_label_pc_9564
  %v1_9560 = phi i32 [ %v3_9084, %dec_label_pc_8f14 ], [ %v1_9568, %dec_label_pc_9564 ], [ %v2_9548, %dec_label_pc_9544 ]
  store i32 %v3_8f14, i32* %r4.global-to-local, align 4
  store i32 %v24_8f14, i32* %fp.global-to-local, align 4
  store i32 %v27_8f14, i32* %lr.global-to-local, align 4
  ret i32 %v1_9560

dec_label_pc_9564:                                ; preds = %dec_label_pc_9094
  %v1_9568 = call i32 @function_10008(i32 %v3_9084)
  br label %dec_label_pc_9558

; uselistorder directives
  uselistorder i16 %v1_94f4, { 1, 0 }
  uselistorder i32 %v1_94d8, { 1, 0 }
  uselistorder i32 %v0_94b8, { 1, 0 }
  uselistorder i32 %v5_948c, { 1, 0 }
  uselistorder i32 %v3_9440, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v7_942c, { 1, 0, 2 }
  uselistorder i32 %v1_9404, { 1, 2, 0, 3 }
  uselistorder i32 %v3_93b4, { 1, 0, 2 }
  uselistorder i1 %v2_9518, { 2, 3, 1, 0 }
  uselistorder i1 %v2_94fc, { 2, 3, 1, 0 }
  uselistorder i1 %v7_9318, { 2, 1, 0 }
  uselistorder i32 %v0_9298, { 1, 0 }
  uselistorder i32 %v1_9120, { 1, 0 }
  uselistorder i32 %v3_910c, { 2, 1, 0 }
  uselistorder i1 %v2_90e4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_90d8, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v3_90d4, { 1, 0 }
  uselistorder i32 %v0_90d0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_90bc, { 2, 0, 1, 3 }
  uselistorder i1 %v7_90b4, { 1, 0 }
  uselistorder i1 %v7_9088, { 1, 0 }
  uselistorder i32 %v3_9084, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v2_9070, { 2, 1, 0 }
  uselistorder i32 %v6_9060, { 3, 4, 0, 5, 1, 2 }
  uselistorder i32 %v1_902c, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_900c, { 1, 4, 3, 2, 5, 7, 6, 0 }
  uselistorder i32 %v1_8fc0, { 1, 2, 0 }
  uselistorder i32 %v1_8f9c, { 3, 2, 1, 0 }
  uselistorder i32 %v6_8f94, { 1, 0 }
  uselistorder i32 %v7_8f7c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v6_8f58, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v2_8f40, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 18, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 10, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 11, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 32, 31, 34, 33, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 14, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 6, 5, 4, 7, 1, 0, 3, 2, 8, 9, 10 }
  uselistorder label %dec_label_pc_9558, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9524, { 1, 0 }
  uselistorder label %dec_label_pc_9368, { 2, 1, 0 }
  uselistorder label %dec_label_pc_92ec, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_9574(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9574:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp32 = call i8 @__decompiler_undefined_function_3()
  %tmp33 = call i16 @__decompiler_undefined_function_2()
  %tmp34 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp62 = call i16 @__decompiler_undefined_function_2()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9574 = load i32, i32* @r4, align 4
  %v27_9574 = load i32, i32* @lr, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @fp, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_95a0 = call i32 @function_10eec(i32 %arg2, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_95b0 = call i32 @function_10eec(i32 %arg2, i32 4)
  %v0_95b4 = load i32, i32* @r4, align 4
  store i32 %v0_95b4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_95c0 = load i32, i32* @r7, align 4
  store i32 %v0_95c0, i32* %r3.global-to-local, align 4
  %v0_95c4 = load i32, i32* @r5, align 4
  store i32 %v0_95c4, i32* %r0.global-to-local, align 4
  %v5_95c8 = inttoptr i32 %v0_95b4 to i32*
  %v6_95c8 = call i32 @function_8258(i32 %v0_95c4, i32* %v5_95c8, i32 2, i32 %v0_95c0, i32 %v2_95b0)
  %v1_95d4 = urem i32 %v6_95c8, 256
  store i32 %v1_95d4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_95e0 = load i32, i32* @r4, align 4
  store i32 %v0_95e0, i32* %r1.global-to-local, align 4
  %v0_95e4 = load i32, i32* @r5, align 4
  store i32 %v0_95e4, i32* %r0.global-to-local, align 4
  %v5_95e8 = trunc i32 %v6_95c8 to i8
  %v6_95ec = inttoptr i32 %v0_95e0 to i32*
  %v7_95ec = call i32 @function_8258(i32 %v0_95e4, i32* %v6_95ec, i32 3, i32 65535, i32 %v6_95c8)
  %v0_95f0 = load i32, i32* @r4, align 4
  store i32 %v0_95f0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_95ec, i32* @r8, align 4
  %v0_9600 = load i32, i32* @r5, align 4
  store i32 %v0_9600, i32* %r0.global-to-local, align 4
  %v5_9604 = inttoptr i32 %v0_95f0 to i32*
  %v6_9604 = call i32 @function_8258(i32 %v0_9600, i32* %v5_9604, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_960c = urem i32 %v6_9604, 256
  store i32 %v1_960c, i32* %ip.global-to-local, align 4
  %v0_9610 = load i32, i32* @r4, align 4
  store i32 %v0_9610, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_961c = load i32, i32* @r5, align 4
  store i32 %v0_961c, i32* %r0.global-to-local, align 4
  %v5_9620 = trunc i32 %v6_9604 to i8
  %v6_9624 = inttoptr i32 %v0_9610 to i32*
  %v7_9624 = call i32 @function_8258(i32 %v0_961c, i32* %v6_9624, i32 5, i32 1, i32 %v6_9604)
  %v1_9630 = urem i32 %v7_9624, 256
  store i32 %v1_9630, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9638 = load i32, i32* @r4, align 4
  store i32 %v0_9638, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9640 = load i32, i32* @r5, align 4
  store i32 %v0_9640, i32* %r0.global-to-local, align 4
  %v5_9648 = inttoptr i32 %v0_9638 to i32*
  %v6_9648 = call i32 @function_8258(i32 %v0_9640, i32* %v5_9648, i32 7, i32 65535, i32 %v1_9630)
  %v0_964c = load i32, i32* @r4, align 4
  store i32 %v0_964c, i32* %r1.global-to-local, align 4
  %v3_9650 = mul i32 %v6_9648, 65536
  store i32 %v3_9650, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_9658 = load i32, i32* @r7, align 4
  store i32 %v0_9658, i32* %r3.global-to-local, align 4
  %v0_965c = load i32, i32* @r5, align 4
  store i32 %v0_965c, i32* %r0.global-to-local, align 4
  %v3_9660 = urem i32 %v6_9648, 65536
  store i32 %v3_9660, i32* @sb, align 4
  %v5_9664 = inttoptr i32 %v0_964c to i32*
  %v6_9664 = call i32 @function_8258(i32 %v0_965c, i32* %v5_9664, i32 10, i32 %v0_9658, i32 ptrtoint (i32* @0 to i32))
  %v1_966c = urem i32 %v6_9664, 256
  store i32 %v1_966c, i32* %ip.global-to-local, align 4
  %v0_9670 = load i32, i32* @r4, align 4
  store i32 %v0_9670, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_967c = load i32, i32* @r5, align 4
  store i32 %v0_967c, i32* %r0.global-to-local, align 4
  %v5_9684 = inttoptr i32 %v0_9670 to i32*
  %v6_9684 = call i32 @function_8258(i32 %v0_967c, i32* %v5_9684, i32 11, i32 1, i32 %v1_966c)
  %v1_968c = urem i32 %v6_9684, 256
  store i32 %v1_968c, i32* %ip.global-to-local, align 4
  %v0_9690 = load i32, i32* @r4, align 4
  store i32 %v0_9690, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_969c = load i32, i32* @r5, align 4
  store i32 %v0_969c, i32* %r0.global-to-local, align 4
  %v5_96a4 = inttoptr i32 %v0_9690 to i32*
  %v6_96a4 = call i32 @function_8258(i32 %v0_969c, i32* %v5_96a4, i32 12, i32 1, i32 %v1_968c)
  %v1_96ac = urem i32 %v6_96a4, 256
  store i32 %v1_96ac, i32* %ip.global-to-local, align 4
  %v0_96b0 = load i32, i32* @r4, align 4
  store i32 %v0_96b0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_96b8 = load i32, i32* @r7, align 4
  store i32 %v0_96b8, i32* %r3.global-to-local, align 4
  %v0_96bc = load i32, i32* @r5, align 4
  store i32 %v0_96bc, i32* %r0.global-to-local, align 4
  %v5_96c4 = inttoptr i32 %v0_96b0 to i32*
  %v6_96c4 = call i32 @function_8258(i32 %v0_96bc, i32* %v5_96c4, i32 13, i32 %v0_96b8, i32 %v1_96ac)
  %v1_96cc = urem i32 %v6_96c4, 256
  store i32 %v1_96cc, i32* %ip.global-to-local, align 4
  %v0_96d0 = load i32, i32* @r4, align 4
  store i32 %v0_96d0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_96d8 = load i32, i32* @r7, align 4
  store i32 %v0_96d8, i32* %r3.global-to-local, align 4
  %v0_96dc = load i32, i32* @r5, align 4
  store i32 %v0_96dc, i32* %r0.global-to-local, align 4
  %v5_96e4 = inttoptr i32 %v0_96d0 to i32*
  %v6_96e4 = call i32 @function_8258(i32 %v0_96dc, i32* %v5_96e4, i32 14, i32 %v0_96d8, i32 %v1_96cc)
  %v1_96ec = urem i32 %v6_96e4, 256
  store i32 %v1_96ec, i32* %ip.global-to-local, align 4
  %v0_96f0 = load i32, i32* @r4, align 4
  store i32 %v0_96f0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_96f8 = load i32, i32* @r7, align 4
  store i32 %v0_96f8, i32* %r3.global-to-local, align 4
  %v0_96fc = load i32, i32* @r5, align 4
  store i32 %v0_96fc, i32* %r0.global-to-local, align 4
  %v5_9704 = inttoptr i32 %v0_96f0 to i32*
  %v6_9704 = call i32 @function_8258(i32 %v0_96fc, i32* %v5_9704, i32 15, i32 %v0_96f8, i32 %v1_96ec)
  %v1_970c = urem i32 %v6_9704, 256
  store i32 %v1_970c, i32* %ip.global-to-local, align 4
  %v0_9710 = load i32, i32* @r7, align 4
  store i32 %v0_9710, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9718 = load i32, i32* @r4, align 4
  store i32 %v0_9718, i32* %r1.global-to-local, align 4
  %v0_971c = load i32, i32* @r5, align 4
  store i32 %v0_971c, i32* %r0.global-to-local, align 4
  %v5_9724 = inttoptr i32 %v0_9718 to i32*
  %v6_9724 = call i32 @function_8258(i32 %v0_971c, i32* %v5_9724, i32 %v0_9710, i32 768, i32 %v1_970c)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9730 = load i32, i32* @r4, align 4
  store i32 %v0_9730, i32* %r1.global-to-local, align 4
  %v0_9738 = load i32, i32* @r5, align 4
  store i32 %v0_9738, i32* %r0.global-to-local, align 4
  %v5_973c = inttoptr i32 %v0_9730 to i32*
  %v6_973c = call i32 @function_8258(i32 %v0_9738, i32* %v5_973c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9744 = urem i32 %v6_973c, 256
  store i32 %v1_9744, i32* %r3.global-to-local, align 4
  %v0_9748 = load i32, i32* @r7, align 4
  store i32 %v0_9748, i32* %r0.global-to-local, align 4
  %v1_9750 = inttoptr i32 %v0_9748 to i32*
  %v2_9750 = call i32 @function_fcbc(i32* %v1_9750)
  %v1_9754 = load i32, i32* @r6, align 4
  %v2_9754 = add i32 %v1_9754, %v2_9750
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9768 = call i32 @function_10384(i32 2, i32 3, i32 6)
  store i32 %v3_9768, i32* %r0.global-to-local, align 4
  %v7_976c = icmp eq i32 %v3_9768, -1
  store i32 %v3_9768, i32* @sl, align 4
  br i1 %v7_976c, label %dec_label_pc_9aac, label %dec_label_pc_9778

dec_label_pc_9778:                                ; preds = %dec_label_pc_9574
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9780 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9780, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_9788 = load i32, i32* @r7, align 4
  store i32 %v0_9788, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9794 = call i32 @function_10340(i32 %v3_9768, i32 %v0_9788, i32 3, i32 %v6_9780, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9794, i32* %r0.global-to-local, align 4
  %v7_9798 = icmp eq i32 %v5_9794, -1
  br i1 %v7_9798, label %dec_label_pc_9aa4, label %dec_label_pc_97a0

dec_label_pc_97a0:                                ; preds = %dec_label_pc_9778
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v0_97a4 = load i32, i32* @r8, align 4
  %v3_97a8 = urem i32 %v0_97a4, 65536
  store i32 %v3_97a8, i32* @r3, align 4
  %v2_97ac = icmp eq i32 %arg2, 0
  %v0_97b0 = load i32, i32* @r7, align 4
  store i32 %v0_97b0, i32* %stack_var_-44, align 4
  %v5_97b4 = trunc i32 %v0_97a4 to i16
  br i1 %v2_97ac, label %dec_label_pc_97a0.dec_label_pc_9948.preheader_crit_edge, label %dec_label_pc_97bc.preheader

dec_label_pc_97a0.dec_label_pc_9948.preheader_crit_edge: ; preds = %dec_label_pc_97a0
  %.pre = sext i16 %v5_97b4 to i32
  %.pre94 = add i32 %v6_9724, 40
  br label %dec_label_pc_9948.preheader

dec_label_pc_97bc.preheader:                      ; preds = %dec_label_pc_97a0
  %v2_9800 = ptrtoint i32* %stack_var_-160 to i32
  %v2_9848 = ptrtoint i32* %stack_var_-64 to i32
  %v2_9860 = ptrtoint i32* %stack_var_-80 to i32
  %v2_9868 = ptrtoint i32* %stack_var_-336 to i32
  %v2_986c = ptrtoint i32* %stack_var_-48 to i32
  %v4_98f4 = zext i8 %tmp32 to i32
  %v1_98f8 = and i32 %v4_98f4, 18
  %v2_98fc = icmp eq i32 %v1_98f8, 18
  %v1_9bac = add i32 %v6_9724, 40
  %v4_9bec = sext i16 %v5_97b4 to i32
  %v3_9bf8 = udiv i32 %v4_9bec, 256
  %v1_9cd4 = urem i32 %v6_9664, 2
  %tmp95 = sub nsw i32 0, %v1_9cd4
  %v4_9cdc = and i32 %tmp95, 32
  %v1_9d08 = urem i32 %v6_96a4, 2
  %tmp96 = sub nsw i32 0, %v1_9d08
  %v4_9d10 = and i32 %tmp96, 8
  %v1_9d54 = urem i32 %v6_9704, 2
  %v3_98e0 = sext i16 %tmp62 to i32
  %v1_9904 = and i32 %v4_98f4, 5
  %v2_9904 = icmp eq i32 %v1_9904, 0
  %v4_9840 = add i32 %v2_9800, 98
  %v5_9840 = inttoptr i32 %v4_9840 to i16*
  %v1_9bf4 = mul nsw i32 %v4_9bec, 256
  %v4_9c04 = and i32 %v1_9bf4, 65280
  %v5_9c04 = or i32 %v4_9c04, %v3_9bf8
  %v1_9cec = urem i32 %v6_9684, 2
  %tmp97 = sub nsw i32 0, %v1_9cec
  %v4_9cf4 = and i32 %tmp97, 16
  %v1_9d20 = urem i32 %v6_96c4, 2
  %tmp98 = sub nsw i32 0, %v1_9d20
  %v4_9d28 = and i32 %tmp98, 4
  %v1_9d38 = urem i32 %v6_96e4, 2
  %tmp99 = sub nsw i32 0, %v1_9d38
  %v3_9d40 = and i32 %tmp99, 2
  br label %dec_label_pc_97bc.outer

dec_label_pc_97bc.outer:                          ; preds = %dec_label_pc_97bc.preheader, %.thread10
  %stack_var_-340.0.ph = phi i32 [ %tmp, %dec_label_pc_97bc.preheader ], [ %v0_9c38, %.thread10 ]
  %stack_var_-62.0.ph = phi i16 [ %tmp33, %dec_label_pc_97bc.preheader ], [ %stack_var_-62.2, %.thread10 ]
  %stack_var_-60.0.ph = phi i32 [ %tmp36, %dec_label_pc_97bc.preheader ], [ %v0_9b50, %.thread10 ]
  br label %dec_label_pc_97bc

dec_label_pc_97bc:                                ; preds = %dec_label_pc_97bc.outer, %dec_label_pc_9930
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_9930 ], [ %stack_var_-62.0.ph, %dec_label_pc_97bc.outer ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_9930 ], [ %stack_var_-60.0.ph, %dec_label_pc_97bc.outer ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_97c8 = call i32 @function_10384(i32 2, i32 1, i32 0)
  store i32 %v3_97c8, i32* %r0.global-to-local, align 4
  %v7_97cc = icmp eq i32 %v3_97c8, -1
  store i32 %v3_97c8, i32* @r8, align 4
  br i1 %v7_97cc, label %dec_label_pc_9930, label %dec_label_pc_97d8

dec_label_pc_97d8:                                ; preds = %dec_label_pc_97bc, %dec_label_pc_990c
  %v0_97e0 = phi i32 [ %v3_9920, %dec_label_pc_990c ], [ %v3_97c8, %dec_label_pc_97bc ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_990c ], [ %stack_var_-62.0, %dec_label_pc_97bc ]
  %stack_var_-60.1 = phi i32 [ %v0_9b50, %dec_label_pc_990c ], [ %stack_var_-60.0, %dec_label_pc_97bc ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_97e0 = call i32 @function_fe3c(i32 %v0_97e0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_97e8 = or i32 %v2_97e0, 2048
  store i32 %v1_97e8, i32* %r2.global-to-local, align 4
  %v0_97ec = load i32, i32* @r8, align 4
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  %v2_97f0 = call i32 @function_fe3c(i32 %v0_97ec, i32 4)
  store i32 %v2_97f0, i32* %r0.global-to-local, align 4
  %v3_97f4 = load i32, i32* %stack_var_-44, align 4
  %v5_97fc = mul i32 %v3_97f4, 24
  store i32 %v2_9800, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v1_980c = load i32, i32* @fp, align 4
  %v2_980c = add i32 %v1_980c, %v5_97fc
  store i32 %v2_980c, i32* %r3.global-to-local, align 4
  %v1_9810 = add i32 %v2_980c, 20
  %v2_9810 = inttoptr i32 %v1_9810 to i8*
  %v3_9810 = load i8, i8* %v2_9810, align 1
  %v4_9810 = zext i8 %v3_9810 to i32
  store i32 %v4_9810, i32* %r2.global-to-local, align 4
  %v2_9814 = icmp ugt i8 %v3_9810, 30
  %v7_9814 = icmp eq i8 %v3_9810, 31
  %v2_9818 = xor i1 %v7_9814, true
  %v3_9818 = and i1 %v2_9814, %v2_9818
  br i1 %v3_9818, label %bb, label %bb72

bb:                                               ; preds = %dec_label_pc_97d8
  %v5_9818 = add i32 %v2_980c, 16
  %v6_9818 = inttoptr i32 %v5_9818 to i32*
  %v7_9818 = load i32, i32* %v6_9818, align 4
  store i32 %v7_9818, i32* %r3.global-to-local, align 4
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_97d8, %bb
  %v4_981c = phi i32 [ %v2_980c, %dec_label_pc_97d8 ], [ %v7_9818, %bb ]
  %v4_981c.stack_var_-60.1 = select i1 %v3_9818, i32 %v4_981c, i32 %stack_var_-60.1
  %v2_9820 = xor i1 %v2_9814, true
  %v3_9820 = or i1 %v7_9814, %v2_9820
  br i1 %v3_9820, label %dec_label_pc_9ab8, label %dec_label_pc_9824

dec_label_pc_9824:                                ; preds = %bb72, %dec_label_pc_9ab8
  %v0_9b50 = phi i32 [ %v5_9b04, %dec_label_pc_9ab8 ], [ %v4_981c.stack_var_-60.1, %bb72 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_982c = load i32, i32* @sb, align 4
  %v9_982c = icmp eq i32 %v0_982c, 65535
  br i1 %v9_982c, label %dec_label_pc_9b10, label %.thread7

.thread7:                                         ; preds = %dec_label_pc_9824
  %v4_9830 = udiv i32 %v0_982c, 256
  %v2_9834 = urem i32 %v0_982c, 256
  store i32 %v2_9834, i32* %r2.global-to-local, align 4
  %v5_9838 = mul nuw nsw i32 %v2_9834, 256
  %v6_9838 = or i32 %v5_9838, %v4_9830
  store i32 %v6_9838, i32* %r3.global-to-local, align 4
  store i32 %v2_9800, i32* %ip.global-to-local, align 4
  %v2_9840 = trunc i32 %v6_9838 to i16
  store i16 %v2_9840, i16* %v5_9840, align 2
  br label %dec_label_pc_9848

dec_label_pc_9848:                                ; preds = %.thread7, %dec_label_pc_9b10
  %stack_var_-62.2 = phi i16 [ %v1_9b10, %dec_label_pc_9b10 ], [ %stack_var_-62.1, %.thread7 ]
  store i32 %v2_9848, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9850 = load i32, i32* @r8, align 4
  store i32 %v0_9850, i32* %r0.global-to-local, align 4
  %v3_9854 = call i32 @function_1016c(i32 %v0_9850, i32 %v2_9848, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_985c = call i32 @function_fcbc(i32* null)
  store i32 %v2_985c, i32* %r0.global-to-local, align 4
  store i32 %v2_9860, i32* @r7, align 4
  store i32 %v2_985c, i32* @r4, align 4
  store i32 %v2_9868, i32* @r6, align 4
  %v9_98c0 = icmp eq i32 %tmp34, %v0_9b50
  %v4_98e8 = zext i16 %stack_var_-62.2 to i32
  %v9_98d4 = icmp eq i1 %v9_98c0, false
  %v9_98ec = icmp eq i32 %v3_98e0, %v4_98e8
  br label %dec_label_pc_9884

dec_label_pc_9874:                                ; preds = %.thread, %dec_label_pc_98dc, %dec_label_pc_9904, %bb76
  %v2_9874 = call i32 @function_fcbc(i32* null)
  %v0_9878 = load i32, i32* @r4, align 4
  %v2_9878 = sub i32 %v2_9874, %v0_9878
  store i32 %v2_9878, i32* %r0.global-to-local, align 4
  %v8_9880 = icmp sgt i32 %v2_9878, 10
  br i1 %v8_9880, label %dec_label_pc_990c, label %dec_label_pc_9884

dec_label_pc_9884:                                ; preds = %dec_label_pc_9874, %dec_label_pc_9848
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 %v2_9868, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9894 = load i32, i32* @sl, align 4
  store i32 %v0_9894, i32* %r0.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_98a4 = call i32 @function_1028c(i32 %v0_9894, i32 %v2_9868, i32 256, i32 16384, i32 %v2_9860, i32 %v2_986c)
  store i32 %v6_98a4, i32* %r2.global-to-local, align 4
  %v7_98ac = icmp eq i32 %v6_98a4, -1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_98ac, label %dec_label_pc_9aac, label %dec_label_pc_98b8

dec_label_pc_98b8:                                ; preds = %dec_label_pc_9884
  store i32 %v0_9b50, i32* %r1.global-to-local, align 4
  store i32 %tmp34, i32* @r3, align 4
  %tmp100 = icmp ult i32 %v6_98a4, 41
  br i1 %tmp100, label %.thread, label %bb76

.thread:                                          ; preds = %dec_label_pc_98b8
  br label %dec_label_pc_9874

bb76:                                             ; preds = %dec_label_pc_98b8
  br i1 %v9_98d4, label %dec_label_pc_9874, label %dec_label_pc_98dc

dec_label_pc_98dc:                                ; preds = %bb76
  store i32 %v3_98e0, i32* @lr, align 4
  store i32 %v2_9800, i32* @r3, align 4
  store i32 %v4_98e8, i32* %r2.global-to-local, align 4
  br i1 %v9_98ec, label %dec_label_pc_98f4, label %dec_label_pc_9874

dec_label_pc_98f4:                                ; preds = %dec_label_pc_98dc
  store i32 %v4_98f4, i32* %r2.global-to-local, align 4
  store i32 %v1_98f8, i32* @r3, align 4
  br i1 %v2_98fc, label %dec_label_pc_9b44, label %dec_label_pc_9904

dec_label_pc_9904:                                ; preds = %dec_label_pc_98f4
  br i1 %v2_9904, label %dec_label_pc_9874, label %dec_label_pc_990c

dec_label_pc_990c:                                ; preds = %dec_label_pc_9904, %dec_label_pc_9874
  %v0_990c = load i32, i32* @r8, align 4
  store i32 %v0_990c, i32* %r0.global-to-local, align 4
  %v1_9910 = call i32 @function_10008(i32 %v0_990c)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9920 = call i32 @function_10384(i32 2, i32 1, i32 0)
  store i32 %v3_9920, i32* %r0.global-to-local, align 4
  %v3_9924 = icmp eq i32 %v3_9920, -1
  store i32 %v3_9920, i32* @r8, align 4
  br i1 %v3_9924, label %dec_label_pc_9930, label %dec_label_pc_97d8

dec_label_pc_9930:                                ; preds = %dec_label_pc_990c, %dec_label_pc_97bc
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_97bc ], [ %stack_var_-62.2, %dec_label_pc_990c ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_97bc ], [ %v0_9b50, %dec_label_pc_990c ]
  %v3_9930 = load i32, i32* %stack_var_-44, align 4
  %v1_9938 = add i32 %v3_9930, 1
  store i32 %v1_9938, i32* @r3, align 4
  store i32 %v1_9938, i32* %stack_var_-44, align 4
  %v5_9944 = icmp slt i32 %v1_9938, %arg2
  br i1 %v5_9944, label %dec_label_pc_97bc, label %dec_label_pc_9948.preheader

dec_label_pc_9948.preheader:                      ; preds = %.thread10, %dec_label_pc_9930, %dec_label_pc_97a0.dec_label_pc_9948.preheader_crit_edge
  %v1_9980.pre-phi = phi i32 [ %.pre94, %dec_label_pc_97a0.dec_label_pc_9948.preheader_crit_edge ], [ %v1_9bac, %dec_label_pc_9930 ], [ %v1_9bac, %.thread10 ]
  %v4_9a64.pre-phi = phi i32 [ %.pre, %dec_label_pc_97a0.dec_label_pc_9948.preheader_crit_edge ], [ %v4_9bec, %dec_label_pc_9930 ], [ %v4_9bec, %.thread10 ]
  %v3_9960 = mul i32 %v6_9724, 65536
  %v1_9964 = add i32 %v3_9960, 1310720
  %tmp78 = udiv i32 %v1_9964, 256
  %v3_9970 = and i32 %tmp78, 65280
  %v2_9a7c = icmp eq i32 %v1_9744, 0
  %v4_9974 = udiv i32 %v1_9964, 16777216
  %v5_9974 = or i32 %v3_9970, %v4_9974
  %v1_997c = add i32 %v6_9724, 20
  br label %dec_label_pc_9948

dec_label_pc_9948:                                ; preds = %dec_label_pc_9948.preheader, %dec_label_pc_9b2c
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_97ac, label %dec_label_pc_9b2c, label %dec_label_pc_995c

dec_label_pc_995c:                                ; preds = %dec_label_pc_9948
  store i32 %v1_9964, i32* %r2.global-to-local, align 4
  store i32 %v6_9724, i32* %ip.global-to-local, align 4
  store i32 %v3_9970, i32* %r3.global-to-local, align 4
  store i32 %v5_9974, i32* @sb, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_997c, i32* @r8, align 4
  store i32 %v1_9980.pre-phi, i32* @r7, align 4
  br label %dec_label_pc_9a78

dec_label_pc_9988:                                ; preds = %dec_label_pc_9a78, %dec_label_pc_9a84
  %v2_998c = phi i32 [ %v7_9a60, %dec_label_pc_9a78 ], [ %v2_998c.pre, %dec_label_pc_9a84 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_998c = add i32 %v2_998c, 10
  %v4_998c = inttoptr i32 %v3_998c to i16*
  store i16 0, i16* %v4_998c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9994 = load i32, i32* @r5, align 4
  store i32 %v0_9994, i32* @r0, align 4
  %v2_9998 = call i32 @function_bf78(i32 %v0_9994, i32 20)
  %v3_9998 = trunc i32 %v2_9998 to i16
  store i32 %v2_9998, i32* %r0.global-to-local, align 4
  %v3_999c = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_95a0, i32* %ip.global-to-local, align 4
  %v3_99a4 = mul i32 %v3_999c, 16
  %v2_99a8 = add i32 %v3_99a4, %v2_95a0
  store i32 %v2_99a8, i32* %r1.global-to-local, align 4
  %v1_99ac = add i32 %v2_99a8, 4
  %v2_99ac = inttoptr i32 %v1_99ac to i32*
  %v3_99ac = load i32, i32* %v2_99ac, align 4
  %v3_99b0 = mul i32 %v3_99ac, 65536
  store i32 %v3_99b0, i32* %ip.global-to-local, align 4
  %tmp79 = mul i32 %v3_99ac, 256
  %v1_99b8 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v3_99ac, 256
  %v4_99bc = urem i32 %tmp80, 256
  %v5_99bc = or i32 %v4_99bc, %v1_99b8
  store i32 %v5_99bc, i32* %r3.global-to-local, align 4
  %v1_99c0 = add i32 %v3_99ac, 1
  store i32 %v1_99c0, i32* %r2.global-to-local, align 4
  store i32 %v1_99c0, i32* %v2_99ac, align 4
  %v0_99c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_99c8 = load i32, i32* @r6, align 4
  %v2_99c8 = add i32 %v1_99c8, 4
  %v3_99c8 = inttoptr i32 %v2_99c8 to i32*
  store i32 %v0_99c8, i32* %v3_99c8, align 4
  %v0_99cc = load i32, i32* %r1.global-to-local, align 4
  %v1_99cc = add i32 %v0_99cc, 8
  %v2_99cc = inttoptr i32 %v1_99cc to i32*
  %v3_99cc = load i32, i32* %v2_99cc, align 4
  %tmp81 = mul i32 %v3_99cc, 256
  %v1_99d8 = and i32 %tmp81, 65280
  %tmp82 = udiv i32 %v3_99cc, 256
  %v4_99dc = urem i32 %tmp82, 256
  %v5_99dc = or i32 %v4_99dc, %v1_99d8
  store i32 %v5_99dc, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v3_99e4 = load i32, i32* @r5, align 4
  %v4_99e4 = add i32 %v3_99e4, 10
  %v5_99e4 = inttoptr i32 %v4_99e4 to i16*
  store i16 %v3_9998, i16* %v5_99e4, align 2
  %v0_99e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_99e8 = load i32, i32* @r6, align 4
  %v2_99e8 = add i32 %v1_99e8, 8
  %v3_99e8 = inttoptr i32 %v2_99e8 to i32*
  store i32 %v0_99e8, i32* %v3_99e8, align 4
  %v0_99ec = load i32, i32* @lr, align 4
  %v1_99ec = trunc i32 %v0_99ec to i16
  %v2_99ec = load i32, i32* @r6, align 4
  %v3_99ec = add i32 %v2_99ec, 16
  %v4_99ec = inttoptr i32 %v3_99ec to i16*
  store i16 %v1_99ec, i16* %v4_99ec, align 2
  %v0_99f0 = load i32, i32* @r6, align 4
  store i32 %v0_99f0, i32* @r1, align 4
  %v0_99f4 = load i32, i32* @sb, align 4
  store i32 %v0_99f4, i32* %r2.global-to-local, align 4
  %v0_99f8 = load i32, i32* @r8, align 4
  store i32 %v0_99f8, i32* %r3.global-to-local, align 4
  %v0_99fc = load i32, i32* @r5, align 4
  store i32 %v0_99fc, i32* %r0.global-to-local, align 4
  %v4_9a00 = call i32 @function_bfc8(i32 %v0_99fc, i32 %v0_99f0, i32 %v0_99f4, i32 %v0_99f8)
  %v5_9a00 = trunc i32 %v4_9a00 to i16
  store i32 %v4_9a00, i32* %r0.global-to-local, align 4
  %v3_9a04 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9a04, i32* %r3.global-to-local, align 4
  %v3_9a08 = mul i32 %v3_9a04, 32
  store i32 %v3_9a08, i32* %lr.global-to-local, align 4
  %v3_9a0c = load i32, i32* @r6, align 4
  %v4_9a0c = add i32 %v3_9a0c, 16
  %v5_9a0c = inttoptr i32 %v4_9a0c to i16*
  store i16 %v5_9a00, i16* %v5_9a0c, align 2
  %v0_9a10 = load i32, i32* %lr.global-to-local, align 4
  %v1_9a10 = load i32, i32* %r3.global-to-local, align 4
  %tmp101 = mul i32 %v1_9a10, -8
  %v5_9a10 = add i32 %v0_9a10, %tmp101
  store i32 %v5_9a10, i32* %lr.global-to-local, align 4
  %v0_9a14 = load i32, i32* @r6, align 4
  %v1_9a14 = add i32 %v0_9a14, 2
  %v2_9a14 = inttoptr i32 %v1_9a14 to i16*
  %v3_9a14 = load i16, i16* %v2_9a14, align 2
  %v1_9a18 = load i32, i32* @fp, align 4
  %v2_9a18 = add i32 %v1_9a18, %v5_9a10
  store i32 %v2_9a18, i32* @lr, align 4
  %v3_9a1c = add i32 %v2_9a18, 2
  %v4_9a1c = inttoptr i32 %v3_9a1c to i16*
  store i16 %v3_9a14, i16* %v4_9a1c, align 2
  %v0_9a20 = load i32, i32* @r5, align 4
  store i32 %v0_9a20, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9a2c = load i32, i32* @sl, align 4
  store i32 %v0_9a2c, i32* %r0.global-to-local, align 4
  %v0_9a30 = load i32, i32* @r7, align 4
  store i32 %v0_9a30, i32* %r2.global-to-local, align 4
  %v0_9a34 = load i32, i32* @lr, align 4
  %v6_9a3c = call i32 @function_10300(i32 %v0_9a2c, i32 %v0_9a20, i32 %v0_9a30, i32 16384, i32 %v0_9a34, i32 16)
  %v3_9a40 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9a40, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v1_9a48 = add i32 %v3_9a40, 1
  store i32 %v1_9a48, i32* %r0.global-to-local, align 4
  store i32 %v1_9a48, i32* %stack_var_-44, align 4
  %v7_9a54 = icmp slt i32 %v1_9a48, %arg2
  br i1 %v7_9a54, label %dec_label_pc_9a78, label %dec_label_pc_9b2c

dec_label_pc_9a78:                                ; preds = %dec_label_pc_995c, %dec_label_pc_9988
  %v1_9a60 = phi i32 [ %v1_9a48, %dec_label_pc_9988 ], [ 0, %dec_label_pc_995c ]
  store i32 %v2_95b0, i32* @lr, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_9a60 = mul i32 %v1_9a60, 4
  %v5_9a60 = add i32 %v4_9a60, %v2_95b0
  %v6_9a60 = inttoptr i32 %v5_9a60 to i32*
  %v7_9a60 = load i32, i32* %v6_9a60, align 4
  store i32 %v7_9a60, i32* @r5, align 4
  store i32 %v4_9a64.pre-phi, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v1_9a70 = add i32 %v7_9a60, 20
  store i32 %v1_9a70, i32* @r6, align 4
  store i32 %v1_9744, i32* %r1.global-to-local, align 4
  br i1 %v2_9a7c, label %dec_label_pc_9988, label %dec_label_pc_9a84

dec_label_pc_9a84:                                ; preds = %dec_label_pc_9a78
  %v1_9a84 = add i32 %v7_9a60, 40
  store i32 %v1_9a84, i32* @r4, align 4
  store i32 %v1_9a84, i32* %r0.global-to-local, align 4
  store i32 %v6_9724, i32* %r1.global-to-local, align 4
  %v2_9a90 = call i32 @function_cb9c(i32 %v1_9a84, i32 %v6_9724)
  store i32 %v2_9a90, i32* %r0.global-to-local, align 4
  store i32 %v6_9724, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9a9c = load i32, i32* @r4, align 4
  %v4_9a9c = add i32 %v2_9a9c, %v6_9724
  %v5_9a9c = inttoptr i32 %v4_9a9c to i8*
  store i8 0, i8* %v5_9a9c, align 1
  %v2_998c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9988

dec_label_pc_9aa4:                                ; preds = %dec_label_pc_9778
  %v0_9aa4 = load i32, i32* @sl, align 4
  store i32 %v0_9aa4, i32* %r0.global-to-local, align 4
  %v1_9aa8 = call i32 @function_10008(i32 %v0_9aa4)
  store i32 %v1_9aa8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9aac

dec_label_pc_9aac:                                ; preds = %dec_label_pc_9884, %dec_label_pc_9b2c, %dec_label_pc_9574, %dec_label_pc_9aa4
  %v1_9ab4 = phi i32 [ %v3_9768, %dec_label_pc_9574 ], [ %v1_9aa8, %dec_label_pc_9aa4 ], [ %v2_9b30, %dec_label_pc_9b2c ], [ 0, %dec_label_pc_9884 ]
  store i32 %v3_9574, i32* %r4.global-to-local, align 4
  store i32 %v27_9574, i32* %lr.global-to-local, align 4
  ret i32 %v1_9ab4

dec_label_pc_9ab8:                                ; preds = %bb72
  %v1_9ab8 = add i32 %v4_981c, 16
  %v2_9ab8 = inttoptr i32 %v1_9ab8 to i32*
  %v3_9ab8 = load i32, i32* %v2_9ab8, align 4
  store i32 %v3_9ab8, i32* @r4, align 4
  %v0_9abc = call i32 @function_cad8()
  store i32 %v0_9abc, i32* %r0.global-to-local, align 4
  %v3_9ac0 = load i32, i32* %stack_var_-44, align 4
  %v5_9ac8 = mul i32 %v3_9ac0, 24
  %v0_9acc = load i32, i32* @r4, align 4
  %v1_9acc = and i32 %v0_9acc, 16711680
  store i32 %v1_9acc, i32* %ip.global-to-local, align 4
  %v3_9ad0 = udiv i32 %v0_9acc, 16777216
  %v4_9ad4 = udiv i32 %v1_9acc, 256
  %v5_9ad4 = or i32 %v4_9ad4, %v3_9ad0
  store i32 %v5_9ad4, i32* %r2.global-to-local, align 4
  %v1_9ad8 = load i32, i32* @fp, align 4
  %v2_9ad8 = add i32 %v1_9ad8, %v5_9ac8
  store i32 %v2_9ad8, i32* %r1.global-to-local, align 4
  %v1_9adc = and i32 %v0_9acc, 65280
  store i32 %v1_9adc, i32* %r3.global-to-local, align 4
  %v1_9ae0 = add i32 %v2_9ad8, 20
  %v2_9ae0 = inttoptr i32 %v1_9ae0 to i8*
  %v3_9ae0 = load i8, i8* %v2_9ae0, align 1
  %v4_9ae0 = zext i8 %v3_9ae0 to i32
  store i32 %v4_9ae0, i32* %ip.global-to-local, align 4
  %v5_9ae8 = call i32 @llvm.bswap.i32(i32 %v0_9acc)
  %v7_9aec = lshr i32 %v0_9abc, %v4_9ae0
  %v8_9aec = add i32 %v7_9aec, %v5_9ae8
  store i32 %v8_9aec, i32* %r2.global-to-local, align 4
  %v1_9af0 = and i32 %v8_9aec, 16711680
  store i32 %v1_9af0, i32* %r0.global-to-local, align 4
  %v1_9afc = and i32 %v8_9aec, 65280
  store i32 %v1_9afc, i32* %r1.global-to-local, align 4
  %v5_9b04 = call i32 @llvm.bswap.i32(i32 %v8_9aec)
  store i32 %v5_9b04, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9824

dec_label_pc_9b10:                                ; preds = %dec_label_pc_9824
  %v0_9b10 = call i32 @function_cad8()
  %v1_9b10 = trunc i32 %v0_9b10 to i16
  store i32 %v0_9b10, i32* %r0.global-to-local, align 4
  store i32 %v2_9800, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9848

dec_label_pc_9b2c:                                ; preds = %dec_label_pc_9988, %dec_label_pc_9948
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9b30 = call i32 @function_fcbc(i32* null)
  store i32 %v2_9b30, i32* %r0.global-to-local, align 4
  store i32 %v2_9754, i32* %r2.global-to-local, align 4
  %v6_9b3c = icmp slt i32 %v2_9754, %v2_9b30
  br i1 %v6_9b3c, label %dec_label_pc_9aac, label %dec_label_pc_9948

dec_label_pc_9b44:                                ; preds = %dec_label_pc_98f4
  %v3_9b44 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9b44, i32* @r5, align 4
  store i32 %v2_95a0, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-340.0.ph, i32* %r0.global-to-local, align 4
  %v5_9b50 = mul i32 %v3_9b44, 16
  %v6_9b50 = add i32 %v5_9b50, %v2_95a0
  %v7_9b50 = inttoptr i32 %v6_9b50 to i32*
  store i32 %v0_9b50, i32* %v7_9b50, align 4
  %v0_9b54 = load i32, i32* %r0.global-to-local, align 4
  %v1_9b54 = add i32 %v0_9b54, 4
  %v2_9b54 = inttoptr i32 %v1_9b54 to i32*
  %v3_9b54 = load i32, i32* %v2_9b54, align 4
  %v1_9b58 = and i32 %v3_9b54, 16711680
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  %v5_9b6c = call i32 @llvm.bswap.i32(i32 %v3_9b54)
  store i32 %v5_9b6c, i32* %r3.global-to-local, align 4
  store i32 %v2_95a0, i32* %r1.global-to-local, align 4
  %v0_9b74 = load i32, i32* @r5, align 4
  %v3_9b74 = mul i32 %v0_9b74, 16
  %v2_9b78 = add i32 %v3_9b74, %v2_95a0
  store i32 %v2_9b78, i32* %ip.global-to-local, align 4
  %v2_9b7c = add i32 %v2_9b78, 4
  %v3_9b7c = inttoptr i32 %v2_9b7c to i32*
  store i32 %v5_9b6c, i32* %v3_9b7c, align 4
  store i32 %stack_var_-340.0.ph, i32* %r2.global-to-local, align 4
  %v1_9b84 = add i32 %stack_var_-340.0.ph, 8
  %v2_9b84 = inttoptr i32 %v1_9b84 to i32*
  %v3_9b84 = load i32, i32* %v2_9b84, align 4
  %v1_9b90 = and i32 %v3_9b84, 65280
  store i32 %v1_9b90, i32* %r2.global-to-local, align 4
  %v5_9b9c = call i32 @llvm.bswap.i32(i32 %v3_9b84)
  store i32 %v5_9b9c, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-340.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v6_9724, i32* %r0.global-to-local, align 4
  %v1_9ba8 = add i32 %stack_var_-340.0.ph, 2
  %v2_9ba8 = inttoptr i32 %v1_9ba8 to i16*
  %v3_9ba8 = load i16, i16* %v2_9ba8, align 2
  %v4_9ba8 = zext i16 %v3_9ba8 to i32
  store i32 %v4_9ba8, i32* %r1.global-to-local, align 4
  store i32 %v1_9bac, i32* @r4, align 4
  %v2_9bb0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9bb0 = add i32 %v2_9bb0, 12
  %v4_9bb0 = inttoptr i32 %v3_9bb0 to i16*
  store i16 %v3_9ba8, i16* %v4_9bb0, align 2
  %v0_9bb4 = load i32, i32* @lr, align 4
  %v1_9bb4 = trunc i32 %v0_9bb4 to i16
  %v2_9bb4 = load i32, i32* %ip.global-to-local, align 4
  %v3_9bb4 = add i32 %v2_9bb4, 14
  %v4_9bb4 = inttoptr i32 %v3_9bb4 to i16*
  store i16 %v1_9bb4, i16* %v4_9bb4, align 2
  %v0_9bb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9bb8 = load i32, i32* %ip.global-to-local, align 4
  %v2_9bb8 = add i32 %v1_9bb8, 8
  %v3_9bb8 = inttoptr i32 %v2_9bb8 to i32*
  store i32 %v0_9bb8, i32* %v3_9bb8, align 4
  %v0_9bbc = load i32, i32* @r4, align 4
  store i32 %v0_9bbc, i32* @r0, align 4
  %v0_9bc0 = call i32 @function_105cc()
  store i32 %v0_9bc0, i32* %r0.global-to-local, align 4
  store i32 %v2_95b0, i32* %r3.global-to-local, align 4
  %v2_9bcc = load i32, i32* @r5, align 4
  %v5_9bcc = mul i32 %v2_9bcc, 4
  %v6_9bcc = add i32 %v5_9bcc, %v2_95b0
  %v7_9bcc = inttoptr i32 %v6_9bcc to i32*
  store i32 %v0_9bc0, i32* %v7_9bcc, align 4
  %v3_9bd0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9bd0, i32* %r2.global-to-local, align 4
  %v0_9bd4 = load i32, i32* %r3.global-to-local, align 4
  %v4_9bd4 = mul i32 %v3_9bd0, 4
  %v5_9bd4 = add i32 %v0_9bd4, %v4_9bd4
  %v6_9bd4 = inttoptr i32 %v5_9bd4 to i32*
  %v7_9bd4 = load i32, i32* %v6_9bd4, align 4
  store i32 %v7_9bd4, i32* %ip.global-to-local, align 4
  %v1_9bd8 = inttoptr i32 %v7_9bd4 to i8*
  %v2_9bd8 = load i8, i8* %v1_9bd8, align 1
  %tmp102 = urem i8 %v2_9bd8, 16
  %v1_9bdc = zext i8 %tmp102 to i32
  %v1_9be0 = or i32 %v1_9bdc, 64
  store i32 %v1_9be0, i32* %r3.global-to-local, align 4
  %v1_9be4 = trunc i32 %v1_9be0 to i8
  store i8 %v1_9be4, i8* %v1_9bd8, align 1
  %v0_9be8 = load i32, i32* %ip.global-to-local, align 4
  %v1_9be8 = inttoptr i32 %v0_9be8 to i8*
  %v2_9be8 = load i8, i8* %v1_9be8, align 1
  store i32 %v4_9bec, i32* %lr.global-to-local, align 4
  %v1_9bf0 = and i8 %v2_9be8, -16
  %v1_9bfc = or i8 %v1_9bf0, 5
  %v0_9c00 = load i32, i32* @r4, align 4
  %v3_9c00 = mul i32 %v0_9c00, 65536
  store i32 %v3_9c00, i32* %r4.global-to-local, align 4
  store i32 %v5_9c04, i32* %r1.global-to-local, align 4
  store i32 %v1_9630, i32* %r0.global-to-local, align 4
  store i8 %v1_9bfc, i8* %v1_9be8, align 1
  %v0_9c10 = load i32, i32* %r1.global-to-local, align 4
  %v1_9c10 = trunc i32 %v0_9c10 to i16
  %v2_9c10 = load i32, i32* %ip.global-to-local, align 4
  %v3_9c10 = add i32 %v2_9c10, 4
  %v4_9c10 = inttoptr i32 %v3_9c10 to i16*
  store i16 %v1_9c10, i16* %v4_9c10, align 2
  %v0_9c14 = load i32, i32* %r4.global-to-local, align 4
  %v3_9c14 = udiv i32 %v0_9c14, 256
  %v1_9c1c = and i32 %v3_9c14, 65280
  store i32 %v1_9c1c, i32* %r2.global-to-local, align 4
  %v2_9c20 = load i32, i32* %ip.global-to-local, align 4
  %v3_9c20 = add i32 %v2_9c20, 1
  %v4_9c20 = inttoptr i32 %v3_9c20 to i8*
  store i8 %v5_95e8, i8* %v4_9c20, align 1
  %v0_9c24 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c24 = load i32, i32* %r4.global-to-local, align 4
  %v4_9c24 = udiv i32 %v1_9c24, 16777216
  %v5_9c24 = or i32 %v4_9c24, %v0_9c24
  %v1_9c28 = trunc i32 %v5_9c24 to i16
  %v2_9c28 = load i32, i32* %ip.global-to-local, align 4
  %v3_9c28 = add i32 %v2_9c28, 2
  %v4_9c28 = inttoptr i32 %v3_9c28 to i16*
  store i16 %v1_9c28, i16* %v4_9c28, align 2
  %v0_9c30 = load i32, i32* %ip.global-to-local, align 4
  %v1_9c30 = add i32 %v0_9c30, 20
  store i32 %v1_9c30, i32* %r3.global-to-local, align 4
  %v3_9c34 = add i32 %v0_9c30, 8
  %v4_9c34 = inttoptr i32 %v3_9c34 to i8*
  store i8 %v5_9620, i8* %v4_9c34, align 1
  %v0_9c38 = load i32, i32* %r3.global-to-local, align 4
  %v2_9c40 = load i32, i32* %ip.global-to-local, align 4
  %v3_9c40 = add i32 %v2_9c40, 9
  %v4_9c40 = inttoptr i32 %v3_9c40 to i8*
  store i8 6, i8* %v4_9c40, align 1
  store i32 ptrtoint (i32* @global_var_202d4.42 to i32), i32* %r2.global-to-local, align 4
  %v2_9c48 = load i32, i32* @global_var_202d4.42, align 4
  store i32 %v2_9c48, i32* %r1.global-to-local, align 4
  %v1_9c4c = load i32, i32* %ip.global-to-local, align 4
  %v2_9c4c = add i32 %v1_9c4c, 12
  %v3_9c4c = inttoptr i32 %v2_9c4c to i32*
  store i32 %v2_9c48, i32* %v3_9c4c, align 4
  %v0_9c50 = load i32, i32* %r0.global-to-local, align 4
  %v2_9c50 = icmp eq i32 %v0_9c50, 0
  %v3_9c54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9c54, i32* %r3.global-to-local, align 4
  store i32 %v2_95a0, i32* %r0.global-to-local, align 4
  br i1 %v2_9c50, label %.thread10, label %bb83

bb83:                                             ; preds = %dec_label_pc_9b44
  store i32 64, i32* %lr.global-to-local, align 4
  %v3_9c60 = load i32, i32* %ip.global-to-local, align 4
  %v4_9c60 = add i32 %v3_9c60, 6
  %v5_9c60 = inttoptr i32 %v4_9c60 to i16*
  store i16 64, i16* %v5_9c60, align 2
  %v0_9c64.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_9c64.pre = load i32, i32* %r3.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_9b44, %bb83
  %v0_9c68 = phi i32 [ %v3_9c54, %dec_label_pc_9b44 ], [ %v1_9c64.pre, %bb83 ]
  %v1_9c6c = phi i32 [ %v2_95a0, %dec_label_pc_9b44 ], [ %v0_9c64.pre, %bb83 ]
  %v4_9c64 = mul i32 %v0_9c68, 16
  %v5_9c64 = add i32 %v4_9c64, %v1_9c6c
  %v6_9c64 = inttoptr i32 %v5_9c64 to i32*
  %v7_9c64 = load i32, i32* %v6_9c64, align 4
  store i32 %v7_9c64, i32* %r2.global-to-local, align 4
  store i32 %v5_9c64, i32* %r3.global-to-local, align 4
  %v1_9c70 = load i32, i32* %ip.global-to-local, align 4
  %v2_9c70 = add i32 %v1_9c70, 16
  %v3_9c70 = inttoptr i32 %v2_9c70 to i32*
  store i32 %v7_9c64, i32* %v3_9c70, align 4
  %v0_9c74 = load i32, i32* %r3.global-to-local, align 4
  %v1_9c74 = add i32 %v0_9c74, 12
  %v2_9c74 = inttoptr i32 %v1_9c74 to i16*
  %v3_9c74 = load i16, i16* %v2_9c74, align 2
  %v4_9c74 = zext i16 %v3_9c74 to i32
  store i32 %v4_9c74, i32* %r1.global-to-local, align 4
  %v0_9c78 = load i32, i32* %ip.global-to-local, align 4
  %v1_9c78 = add i32 %v0_9c78, 40
  store i32 %v1_9c78, i32* @r4, align 4
  %v3_9c7c = add i32 %v0_9c78, 20
  %v4_9c7c = inttoptr i32 %v3_9c7c to i16*
  store i16 %v3_9c74, i16* %v4_9c7c, align 2
  store i32 %v0_9c38, i32* %ip.global-to-local, align 4
  %v0_9c84 = load i32, i32* %r3.global-to-local, align 4
  %v1_9c84 = add i32 %v0_9c84, 8
  %v2_9c84 = inttoptr i32 %v1_9c84 to i32*
  %v3_9c84 = load i32, i32* %v2_9c84, align 4
  store i32 %v3_9c84, i32* %r1.global-to-local, align 4
  %v2_9c88 = add i32 %v0_9c38, 4
  %v3_9c88 = inttoptr i32 %v2_9c88 to i32*
  store i32 %v3_9c84, i32* %v3_9c88, align 4
  %v0_9c8c = load i32, i32* %ip.global-to-local, align 4
  %v1_9c8c = add i32 %v0_9c8c, 13
  %v2_9c8c = inttoptr i32 %v1_9c8c to i8*
  %v3_9c8c = load i8, i8* %v2_9c8c, align 1
  %v4_9c8c = zext i8 %v3_9c8c to i32
  store i32 %v4_9c8c, i32* %r2.global-to-local, align 4
  %v0_9c90 = load i32, i32* %r3.global-to-local, align 4
  %v1_9c90 = add i32 %v0_9c90, 4
  %v2_9c90 = inttoptr i32 %v1_9c90 to i32*
  %v3_9c90 = load i32, i32* %v2_9c90, align 4
  store i32 %v3_9c90, i32* %r1.global-to-local, align 4
  %v1_9c94 = add i32 %v0_9c90, 14
  %v2_9c94 = inttoptr i32 %v1_9c94 to i16*
  %v3_9c94 = load i16, i16* %v2_9c94, align 2
  %v4_9c94 = zext i16 %v3_9c94 to i32
  store i32 %v4_9c94, i32* %r3.global-to-local, align 4
  %v1_9c98 = or i32 %v4_9c8c, 1
  store i32 %v1_9c98, i32* %r2.global-to-local, align 4
  %v3_9c9c = add i32 %v0_9c8c, 2
  %v4_9c9c = inttoptr i32 %v3_9c9c to i16*
  store i16 %v3_9c94, i16* %v4_9c9c, align 2
  %v0_9ca0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9ca0 = trunc i32 %v0_9ca0 to i8
  %v2_9ca0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9ca0 = add i32 %v2_9ca0, 13
  %v4_9ca0 = inttoptr i32 %v3_9ca0 to i8*
  store i8 %v1_9ca0, i8* %v4_9ca0, align 1
  %v0_9ca4 = load i32, i32* %ip.global-to-local, align 4
  %v1_9ca4 = add i32 %v0_9ca4, 12
  %v2_9ca4 = inttoptr i32 %v1_9ca4 to i8*
  %v3_9ca4 = load i8, i8* %v2_9ca4, align 1
  %v4_9ca4 = zext i8 %v3_9ca4 to i32
  store i32 %v4_9ca4, i32* %r3.global-to-local, align 4
  %v1_9ca8 = add i32 %v0_9ca4, 13
  %v2_9ca8 = inttoptr i32 %v1_9ca8 to i8*
  %v3_9ca8 = load i8, i8* %v2_9ca8, align 1
  %v4_9ca8 = zext i8 %v3_9ca8 to i32
  %tmp103 = urem i8 %v3_9ca4, 16
  %v1_9cac = zext i8 %tmp103 to i32
  %v1_9cb0 = or i32 %v1_9cac, 128
  store i32 %v1_9cb0, i32* %r3.global-to-local, align 4
  %v1_9cb4 = or i32 %v4_9ca8, 16
  store i32 %v1_9cb4, i32* %r2.global-to-local, align 4
  %v0_9cb8 = load i32, i32* %r1.global-to-local, align 4
  %v2_9cb8 = add i32 %v0_9ca4, 8
  %v3_9cb8 = inttoptr i32 %v2_9cb8 to i32*
  store i32 %v0_9cb8, i32* %v3_9cb8, align 4
  %v0_9cbc = load i32, i32* %r3.global-to-local, align 4
  %v1_9cbc = trunc i32 %v0_9cbc to i8
  %v2_9cbc = load i32, i32* %ip.global-to-local, align 4
  %v3_9cbc = add i32 %v2_9cbc, 12
  %v4_9cbc = inttoptr i32 %v3_9cbc to i8*
  store i8 %v1_9cbc, i8* %v4_9cbc, align 1
  %v0_9cc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9cc0 = trunc i32 %v0_9cc0 to i8
  %v2_9cc0 = load i32, i32* %ip.global-to-local, align 4
  %v3_9cc0 = add i32 %v2_9cc0, 13
  %v4_9cc0 = inttoptr i32 %v3_9cc0 to i8*
  store i8 %v1_9cc0, i8* %v4_9cc0, align 1
  %v0_9cc4 = call i32 @function_cad8()
  %v1_9cc4 = trunc i32 %v0_9cc4 to i16
  store i32 %v0_9cc4, i32* %r0.global-to-local, align 4
  store i32 %v0_9c38, i32* %lr.global-to-local, align 4
  store i32 %v1_966c, i32* %r1.global-to-local, align 4
  %v1_9cd0 = add i32 %v0_9c38, 13
  %v2_9cd0 = inttoptr i32 %v1_9cd0 to i8*
  %v3_9cd0 = load i8, i8* %v2_9cd0, align 1
  %v4_9cd0 = zext i8 %v3_9cd0 to i32
  store i32 %v1_9cd4, i32* %r2.global-to-local, align 4
  %v1_9cd8 = and i32 %v4_9cd0, 223
  %v5_9cdc = or i32 %v1_9cd8, %v4_9cdc
  store i32 %v5_9cdc, i32* %r3.global-to-local, align 4
  %v1_9ce0 = trunc i32 %v5_9cdc to i8
  store i8 %v1_9ce0, i8* %v2_9cd0, align 1
  store i32 %v1_968c, i32* %ip.global-to-local, align 4
  %v0_9ce8 = load i32, i32* %lr.global-to-local, align 4
  %v1_9ce8 = add i32 %v0_9ce8, 13
  %v2_9ce8 = inttoptr i32 %v1_9ce8 to i8*
  %v3_9ce8 = load i8, i8* %v2_9ce8, align 1
  %v4_9ce8 = zext i8 %v3_9ce8 to i32
  store i32 %v1_9cec, i32* %r3.global-to-local, align 4
  %v1_9cf0 = and i32 %v4_9ce8, 239
  %v5_9cf4 = or i32 %v1_9cf0, %v4_9cf4
  store i32 %v5_9cf4, i32* %r2.global-to-local, align 4
  %v1_9cf8 = trunc i32 %v5_9cf4 to i8
  store i8 %v1_9cf8, i8* %v2_9ce8, align 1
  %v0_9cfc = load i32, i32* %lr.global-to-local, align 4
  %v1_9cfc = add i32 %v0_9cfc, 13
  %v2_9cfc = inttoptr i32 %v1_9cfc to i8*
  %v3_9cfc = load i8, i8* %v2_9cfc, align 1
  %v4_9cfc = zext i8 %v3_9cfc to i32
  store i32 %v1_96ac, i32* %lr.global-to-local, align 4
  store i32 %v0_9c38, i32* %r1.global-to-local, align 4
  store i32 %v1_9d08, i32* %r2.global-to-local, align 4
  %v1_9d0c = and i32 %v4_9cfc, 247
  %v5_9d10 = or i32 %v1_9d0c, %v4_9d10
  store i32 %v5_9d10, i32* %r3.global-to-local, align 4
  %v1_9d14 = trunc i32 %v5_9d10 to i8
  store i8 %v1_9d14, i8* %v2_9cd0, align 1
  store i32 %v1_96cc, i32* %ip.global-to-local, align 4
  %v0_9d1c = load i32, i32* %r1.global-to-local, align 4
  %v1_9d1c = add i32 %v0_9d1c, 13
  %v2_9d1c = inttoptr i32 %v1_9d1c to i8*
  %v3_9d1c = load i8, i8* %v2_9d1c, align 1
  %v4_9d1c = zext i8 %v3_9d1c to i32
  store i32 %v1_9d20, i32* %r3.global-to-local, align 4
  %v1_9d24 = and i32 %v4_9d1c, 251
  %v5_9d28 = or i32 %v1_9d24, %v4_9d28
  store i32 %v5_9d28, i32* %r2.global-to-local, align 4
  %v1_9d2c = trunc i32 %v5_9d28 to i8
  store i8 %v1_9d2c, i8* %v2_9d1c, align 1
  store i32 %v1_96ec, i32* @lr, align 4
  %v0_9d34 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d34 = add i32 %v0_9d34, 13
  %v2_9d34 = inttoptr i32 %v1_9d34 to i8*
  %v3_9d34 = load i8, i8* %v2_9d34, align 1
  %v4_9d34 = zext i8 %v3_9d34 to i32
  store i32 %v1_9d38, i32* %r2.global-to-local, align 4
  %v1_9d3c = and i32 %v4_9d34, 253
  %v4_9d40 = or i32 %v1_9d3c, %v3_9d40
  store i32 %v4_9d40, i32* %r3.global-to-local, align 4
  %v1_9d44 = trunc i32 %v4_9d40 to i8
  store i8 %v1_9d44, i8* %v2_9d34, align 1
  %v0_9d48 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d48 = add i32 %v0_9d48, 13
  %v2_9d48 = inttoptr i32 %v1_9d48 to i8*
  %v3_9d48 = load i8, i8* %v2_9d48, align 1
  %v4_9d48 = zext i8 %v3_9d48 to i32
  %v1_9d50 = and i32 %v4_9d48, 254
  %v2_9d58 = or i32 %v1_9d50, %v1_9d54
  store i32 %v2_9d58, i32* %r3.global-to-local, align 4
  store i32 %v0_9c38, i32* %r2.global-to-local, align 4
  %v1_9d60 = trunc i32 %v2_9d58 to i8
  store i8 %v1_9d60, i8* %v2_9cd0, align 1
  %v3_9d64 = load i32, i32* %r2.global-to-local, align 4
  %v4_9d64 = add i32 %v3_9d64, 14
  %v5_9d64 = inttoptr i32 %v4_9d64 to i16*
  store i16 %v1_9cc4, i16* %v5_9d64, align 2
  store i32 %v6_9724, i32* %r1.global-to-local, align 4
  %v0_9d6c = load i32, i32* @r4, align 4
  store i32 %v0_9d6c, i32* %r0.global-to-local, align 4
  %v2_9d70 = call i32 @function_cb9c(i32 %v0_9d6c, i32 %v6_9724)
  store i32 %v2_9d70, i32* %r0.global-to-local, align 4
  store i32 %v6_9724, i32* %ip.global-to-local, align 4
  %v2_9d7c = load i32, i32* @r4, align 4
  %v4_9d7c = add i32 %v2_9d7c, %v6_9724
  %v5_9d7c = inttoptr i32 %v4_9d7c to i8*
  store i8 0, i8* %v5_9d7c, align 1
  %v3_9d80 = load i32, i32* %stack_var_-44, align 4
  %v1_9d88 = add i32 %v3_9d80, 1
  store i32 %v1_9d88, i32* @r3, align 4
  store i32 %v1_9d88, i32* %stack_var_-44, align 4
  %v5_9d94 = icmp slt i32 %v1_9d88, %arg2
  br i1 %v5_9d94, label %dec_label_pc_97bc.outer, label %dec_label_pc_9948.preheader

; uselistorder directives
  uselistorder i32 %v1_9d88, { 1, 0, 2 }
  uselistorder i8* %v2_9cd0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_9cc4, { 1, 0 }
  uselistorder i32 %v0_9c38, { 1, 2, 4, 3, 6, 5, 0 }
  uselistorder i32 %v5_9b6c, { 1, 0 }
  uselistorder i32 %v2_9b30, { 1, 2, 0 }
  uselistorder i32 %v0_9b10, { 1, 0 }
  uselistorder i32 %v0_9acc, { 1, 2, 0, 3 }
  uselistorder i32 %v7_9a60, { 0, 2, 3, 1 }
  uselistorder i32 %v1_9a48, { 1, 2, 0, 3 }
  uselistorder i32 %v5_9a10, { 1, 0 }
  uselistorder i32 %v4_9a00, { 1, 0 }
  uselistorder i32 %v3_99cc, { 1, 0 }
  uselistorder i32 %v3_99ac, { 3, 2, 0, 1 }
  uselistorder i32 %v2_9998, { 1, 0 }
  uselistorder i32 %v3_9970, { 1, 0 }
  uselistorder i32 %v1_9964, { 2, 0, 1 }
  uselistorder i32 %v1_9938, { 1, 0, 2 }
  uselistorder i32 %v3_9920, { 0, 2, 3, 1 }
  uselistorder i32 %v4_98e8, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 3, 1, 2 }
  uselistorder i32 %v0_982c, { 1, 0, 2 }
  uselistorder i32 %v0_9b50, { 1, 0, 4, 5, 2, 3 }
  uselistorder i32 %v4_981c, { 1, 0 }
  uselistorder i1 %v7_9814, { 1, 0 }
  uselistorder i32 %v3_97c8, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %stack_var_-340.0.ph, { 3, 4, 1, 2, 0 }
  uselistorder i32 %v1_9d38, { 1, 0 }
  uselistorder i32 %v1_9d20, { 1, 0 }
  uselistorder i32 %v1_9cec, { 1, 0 }
  uselistorder i32 %v3_98e0, { 1, 0 }
  uselistorder i32 %v1_9d08, { 1, 0 }
  uselistorder i32 %v1_9cd4, { 1, 0 }
  uselistorder i32 %v4_9bec, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v1_9bac, { 2, 0, 1 }
  uselistorder i32 %v1_98f8, { 1, 0 }
  uselistorder i32 %v4_98f4, { 2, 0, 1 }
  uselistorder i32 %v2_9800, { 3, 2, 1, 4, 0 }
  uselistorder i16 %v5_97b4, { 1, 0 }
  uselistorder i32 %v0_97a4, { 1, 0 }
  uselistorder i32 %v3_9768, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_9754, { 1, 0 }
  uselistorder i32 %v1_9744, { 2, 1, 0 }
  uselistorder i32 %v6_9724, { 2, 7, 6, 5, 8, 3, 12, 11, 10, 13, 4, 0, 9, 1 }
  uselistorder i32 %v1_970c, { 1, 0 }
  uselistorder i32 %v1_96ec, { 1, 2, 0 }
  uselistorder i32 %v1_96cc, { 1, 2, 0 }
  uselistorder i32 %v1_96ac, { 1, 2, 0 }
  uselistorder i32 %v1_968c, { 1, 2, 0 }
  uselistorder i32 %v1_966c, { 1, 2, 0 }
  uselistorder i32 %v6_9648, { 1, 0 }
  uselistorder i32 %v1_9630, { 1, 2, 0 }
  uselistorder i32 %v6_9604, { 1, 2, 0 }
  uselistorder i32 %v6_95c8, { 1, 2, 0 }
  uselistorder i32 %v2_95b0, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_95a0, { 3, 4, 0, 5, 1, 6, 2, 7 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 39, 40, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 51, 50, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 7, 3, 4, 5, 6, 12, 8, 9, 10, 11, 14, 13, 16, 15, 17, 19, 18, 22, 20, 26, 21, 23, 25, 24, 29, 27, 28, 30, 31, 32, 34, 35, 33, 36, 38, 37, 40, 39, 43, 42, 41, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32 %arg2, { 2, 1, 4, 5, 3, 0, 6, 8, 7, 9, 10, 11 }
  uselistorder label %.thread10, { 1, 0 }
  uselistorder label %dec_label_pc_9aac, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_9a78, { 1, 0 }
  uselistorder label %dec_label_pc_9988, { 1, 0 }
  uselistorder label %dec_label_pc_9948, { 1, 0 }
  uselistorder label %dec_label_pc_9874, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_9848, { 1, 0 }
  uselistorder label %dec_label_pc_9824, { 1, 0 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %dec_label_pc_97d8, { 1, 0 }
  uselistorder label %dec_label_pc_97bc, { 1, 0 }
  uselistorder label %dec_label_pc_97bc.outer, { 1, 0 }
}

define i32 @function_9da0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9da0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_9da0 = load i32, i32* @sb, align 4
  %v24_9da0 = load i32, i32* @fp, align 4
  %v27_9da0 = load i32, i32* @lr, align 4
  store i32 0, i32* @sl, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_9dcc = call i32 @function_10eec(i32 %arg2, i32 4)
  %v0_9dd0 = load i32, i32* @r4, align 4
  store i32 %v0_9dd0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_9ddc = load i32, i32* @sl, align 4
  store i32 %v0_9ddc, i32* %r3.global-to-local, align 4
  %v0_9de0 = load i32, i32* @r5, align 4
  store i32 %v0_9de0, i32* %r0.global-to-local, align 4
  %v5_9de4 = inttoptr i32 %v0_9dd0 to i32*
  %v6_9de4 = call i32 @function_8258(i32 %v0_9de0, i32* %v5_9de4, i32 2, i32 %v0_9ddc, i32 %v2_9dcc)
  %v1_9df0 = urem i32 %v6_9de4, 256
  store i32 %v1_9df0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9dfc = load i32, i32* @r4, align 4
  store i32 %v0_9dfc, i32* %r1.global-to-local, align 4
  %v0_9e00 = load i32, i32* @r5, align 4
  store i32 %v0_9e00, i32* %r0.global-to-local, align 4
  %v5_9e04 = trunc i32 %v6_9de4 to i8
  %v6_9e08 = inttoptr i32 %v0_9dfc to i32*
  %v7_9e08 = call i32 @function_8258(i32 %v0_9e00, i32* %v6_9e08, i32 3, i32 65535, i32 %v6_9de4)
  %v0_9e0c = load i32, i32* @r4, align 4
  store i32 %v0_9e0c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_9e1c = load i32, i32* @r5, align 4
  store i32 %v0_9e1c, i32* %r0.global-to-local, align 4
  %v5_9e20 = inttoptr i32 %v0_9e0c to i32*
  %v6_9e20 = call i32 @function_8258(i32 %v0_9e1c, i32* %v5_9e20, i32 4, i32 64, i32 %v7_9e08)
  %v1_9e28 = urem i32 %v6_9e20, 256
  store i32 %v1_9e28, i32* %ip.global-to-local, align 4
  %v0_9e2c = load i32, i32* @r4, align 4
  store i32 %v0_9e2c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_9e34 = load i32, i32* @sl, align 4
  store i32 %v0_9e34, i32* %r3.global-to-local, align 4
  %v0_9e38 = load i32, i32* @r5, align 4
  store i32 %v0_9e38, i32* %r0.global-to-local, align 4
  %v6_9e40 = inttoptr i32 %v0_9e2c to i32*
  %v7_9e40 = call i32 @function_8258(i32 %v0_9e38, i32* %v6_9e40, i32 5, i32 %v0_9e34, i32 %v1_9e28)
  %v1_9e4c = urem i32 %v7_9e40, 256
  store i32 %v1_9e4c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9e58 = load i32, i32* @r4, align 4
  store i32 %v0_9e58, i32* %r1.global-to-local, align 4
  %v0_9e5c = load i32, i32* @r5, align 4
  store i32 %v0_9e5c, i32* %r0.global-to-local, align 4
  %v5_9e64 = inttoptr i32 %v0_9e58 to i32*
  %v6_9e64 = call i32 @function_8258(i32 %v0_9e5c, i32* %v5_9e64, i32 6, i32 65535, i32 %v1_9e4c)
  %v0_9e6c = load i32, i32* @r4, align 4
  store i32 %v0_9e6c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9e64, i32* %fp.global-to-local, align 4
  %v0_9e7c = load i32, i32* @r5, align 4
  store i32 %v0_9e7c, i32* %r0.global-to-local, align 4
  %v5_9e80 = inttoptr i32 %v0_9e6c to i32*
  %v6_9e80 = call i32 @function_8258(i32 %v0_9e7c, i32* %v5_9e80, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_9e88 = load i32, i32* @r4, align 4
  store i32 %v0_9e88, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 %v6_9e80, i32* %sb.global-to-local, align 4
  %v0_9e98 = load i32, i32* @r5, align 4
  store i32 %v0_9e98, i32* %r0.global-to-local, align 4
  %v5_9e9c = inttoptr i32 %v0_9e88 to i32*
  %v6_9e9c = call i32 @function_8258(i32 %v0_9e98, i32* %v5_9e9c, i32 16, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_9ea8 = load i32, i32* @r4, align 4
  store i32 %v0_9ea8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v0_9eb4 = load i32, i32* @r5, align 4
  store i32 %v0_9eb4, i32* %r0.global-to-local, align 4
  %v5_9eb8 = inttoptr i32 %v0_9ea8 to i32*
  %v6_9eb8 = call i32 @function_8258(i32 %v0_9eb4, i32* %v5_9eb8, i32 17, i32 65535, i32 %v6_9e9c)
  %v0_9ebc = load i32, i32* @r4, align 4
  store i32 %v0_9ebc, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v0_9ec8 = load i32, i32* @sl, align 4
  store i32 %v0_9ec8, i32* %r3.global-to-local, align 4
  %v0_9ecc = load i32, i32* @r5, align 4
  store i32 %v0_9ecc, i32* %r0.global-to-local, align 4
  %v5_9ed0 = inttoptr i32 %v0_9ebc to i32*
  %v6_9ed0 = call i32 @function_8258(i32 %v0_9ecc, i32* %v5_9ed0, i32 10, i32 %v0_9ec8, i32 %v6_9eb8)
  %v0_9ed4 = load i32, i32* @r4, align 4
  store i32 %v0_9ed4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9ee4 = load i32, i32* @r5, align 4
  store i32 %v0_9ee4, i32* %r0.global-to-local, align 4
  %v5_9ee8 = inttoptr i32 %v0_9ed4 to i32*
  %v6_9ee8 = call i32 @function_8258(i32 %v0_9ee4, i32* %v5_9ee8, i32 11, i32 1, i32 %v6_9ed0)
  %v0_9eec = load i32, i32* @r4, align 4
  store i32 %v0_9eec, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v0_9ef8 = load i32, i32* @sl, align 4
  store i32 %v0_9ef8, i32* %r3.global-to-local, align 4
  %v0_9efc = load i32, i32* @r5, align 4
  store i32 %v0_9efc, i32* %r0.global-to-local, align 4
  %v5_9f00 = inttoptr i32 %v0_9eec to i32*
  %v6_9f00 = call i32 @function_8258(i32 %v0_9efc, i32* %v5_9f00, i32 12, i32 %v0_9ef8, i32 %v6_9ee8)
  %v0_9f04 = load i32, i32* @r4, align 4
  store i32 %v0_9f04, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v0_9f10 = load i32, i32* @sl, align 4
  store i32 %v0_9f10, i32* %r3.global-to-local, align 4
  %v0_9f14 = load i32, i32* @r5, align 4
  store i32 %v0_9f14, i32* %r0.global-to-local, align 4
  %v5_9f18 = inttoptr i32 %v0_9f04 to i32*
  %v6_9f18 = call i32 @function_8258(i32 %v0_9f14, i32* %v5_9f18, i32 13, i32 %v0_9f10, i32 %v6_9f00)
  %v0_9f1c = load i32, i32* @r4, align 4
  store i32 %v0_9f1c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v0_9f28 = load i32, i32* @sl, align 4
  store i32 %v0_9f28, i32* %r3.global-to-local, align 4
  %v0_9f2c = load i32, i32* @r5, align 4
  store i32 %v0_9f2c, i32* %r0.global-to-local, align 4
  %v5_9f30 = inttoptr i32 %v0_9f1c to i32*
  %v6_9f30 = call i32 @function_8258(i32 %v0_9f2c, i32* %v5_9f30, i32 14, i32 %v0_9f28, i32 %v6_9f18)
  %v0_9f34 = load i32, i32* @r4, align 4
  store i32 %v0_9f34, i32* %r1.global-to-local, align 4
  %v0_9f3c = load i32, i32* @sl, align 4
  store i32 %v0_9f3c, i32* %r3.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r5, align 4
  store i32 %v0_9f44, i32* %r0.global-to-local, align 4
  %v5_9f48 = inttoptr i32 %v0_9f34 to i32*
  %v6_9f48 = call i32 @function_8258(i32 %v0_9f44, i32* %v5_9f48, i32 15, i32 %v0_9f3c, i32 %v6_9f30)
  %v0_9f4c = load i32, i32* @r4, align 4
  store i32 %v0_9f4c, i32* %r1.global-to-local, align 4
  %v0_9f54 = load i32, i32* @sl, align 4
  store i32 %v0_9f54, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_9f5c = load i32, i32* @r5, align 4
  store i32 %v0_9f5c, i32* %r0.global-to-local, align 4
  %v5_9f60 = inttoptr i32 %v0_9f4c to i32*
  %v6_9f60 = call i32 @function_8258(i32 %v0_9f5c, i32* %v5_9f60, i32 %v0_9f54, i32 512, i32 %v6_9f48)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9f6c = load i32, i32* @r4, align 4
  store i32 %v0_9f6c, i32* %r1.global-to-local, align 4
  store i32 %v6_9f60, i32* @r8, align 4
  %v0_9f74 = load i32, i32* @r5, align 4
  store i32 %v0_9f74, i32* %r0.global-to-local, align 4
  %v5_9f78 = inttoptr i32 %v0_9f6c to i32*
  %v6_9f78 = call i32 @function_8258(i32 %v0_9f74, i32* %v5_9f78, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_9f84 = load i32, i32* @global_var_202d4.42, align 4
  store i32 %v2_9f84, i32* %r3.global-to-local, align 4
  %v1_9f88 = urem i32 %v6_9f78, 256
  store i32 %v1_9f88, i32* %ip.global-to-local, align 4
  %v0_9f8c = load i32, i32* @r4, align 4
  store i32 %v0_9f8c, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_9f94 = load i32, i32* @r5, align 4
  store i32 %v0_9f94, i32* %r0.global-to-local, align 4
  %v5_9f9c = inttoptr i32 %v0_9f8c to i32*
  %v6_9f9c = call i32 @function_81ec(i32 %v0_9f94, i32* %v5_9f9c, i32 24, i32 %v2_9f84, i32 %v1_9f88)
  %v0_9fa4 = load i32, i32* @sl, align 4
  store i32 %v0_9fa4, i32* %r0.global-to-local, align 4
  %v1_9fa8 = inttoptr i32 %v0_9fa4 to i32*
  %v2_9fa8 = call i32 @function_fcbc(i32* %v1_9fa8)
  %v1_9fac = load i32, i32* @r6, align 4
  %v2_9fac = add i32 %v1_9fac, %v2_9fa8
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9fc0 = call i32 @function_10384(i32 2, i32 3, i32 6)
  store i32 %v3_9fc0, i32* %r0.global-to-local, align 4
  %v7_9fc4 = icmp eq i32 %v3_9fc0, -1
  store i1 %v7_9fc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9fc4, label %dec_label_pc_a4a8, label %dec_label_pc_9fd0

dec_label_pc_9fd0:                                ; preds = %dec_label_pc_9da0
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9fd8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9fd8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_9fe0 = load i32, i32* @sl, align 4
  store i32 %v0_9fe0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9fec = call i32 @function_10340(i32 %v3_9fc0, i32 %v0_9fe0, i32 3, i32 %v6_9fd8, i32 4)
  store i32 %v5_9fec, i32* %r0.global-to-local, align 4
  %v7_9ff0 = icmp eq i32 %v5_9fec, -1
  store i1 %v7_9ff0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ff0, label %dec_label_pc_a4b4, label %dec_label_pc_9ff8

dec_label_pc_9ff8:                                ; preds = %dec_label_pc_9fd0
  store i32 %v7_9e08, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_a004 = load i32, i32* %fp.global-to-local, align 4
  %v0_a008 = load i32, i32* %sb.global-to-local, align 4
  %v3_a008 = mul i32 %v0_a008, 65536
  store i32 %v3_a008, i32* %sb.global-to-local, align 4
  %v3_a00c = urem i32 %v7_9e08, 65536
  store i32 %v3_a00c, i32* %r2.global-to-local, align 4
  %v3_a010 = urem i32 %v0_a004, 65536
  store i32 %v3_a010, i32* %r3.global-to-local, align 4
  %v3_a014 = urem i32 %v0_a008, 65536
  store i32 %v3_a014, i32* %ip.global-to-local, align 4
  %v2_a018 = icmp eq i32 %arg2, 0
  store i1 %v2_a018, i1* %cpsr_z.global-to-local, align 1
  %v0_a01c = load i32, i32* @sl, align 4
  store i32 %v0_a01c, i32* %stack_var_-44, align 4
  br i1 %v2_a018, label %dec_label_pc_a258.preheader, label %dec_label_pc_a030

dec_label_pc_a030:                                ; preds = %dec_label_pc_9ff8
  %v0_a040 = load i32, i32* @r8, align 4
  %v3_a040 = mul i32 %v0_a040, 65536
  %v1_a048 = add i32 %v3_a040, 2621440
  %tmp59 = mul i32 %v0_a004, 256
  %v3_a054 = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_a008, 256
  %v3_a058 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_a004, 256
  %v4_a060 = urem i32 %tmp61, 256
  %v5_a060 = or i32 %v4_a060, %v3_a054
  %tmp62 = udiv i32 %v1_a048, 256
  %v3_a064 = and i32 %tmp62, 65280
  %tmp63 = mul i32 %v7_9e08, 256
  %v3_a068 = and i32 %tmp63, 65280
  %tmp64 = udiv i32 %v0_a008, 256
  %v4_a06c = urem i32 %tmp64, 256
  %v5_a06c = or i32 %v4_a06c, %v3_a058
  store i32 %v5_a06c, i32* @fp, align 4
  %v4_a07c = udiv i32 %v1_a048, 16777216
  %v5_a07c = or i32 %v3_a064, %v4_a07c
  store i32 %v5_a07c, i32* @lr, align 4
  %tmp65 = udiv i32 %v7_9e08, 256
  %v4_a080 = urem i32 %tmp65, 256
  %v5_a080 = or i32 %v4_a080, %v3_a068
  store i32 %v5_a080, i32* @r5, align 4
  %tmp66 = mul i32 %v6_9e9c, 256
  %v3_a08c = and i32 %tmp66, 65280
  %v1_a090 = urem i32 %v6_9ed0, 2
  %v1_a094 = urem i32 %v6_9ee8, 2
  %tmp67 = udiv i32 %v6_9e9c, 256
  %v4_a098 = urem i32 %tmp67, 256
  %v5_a098 = or i32 %v4_a098, %v3_a08c
  %v1_a0a4 = urem i32 %v6_9f00, 2
  store i32 %v1_a0a4, i32* %r2.global-to-local, align 4
  %v1_a0a8 = urem i32 %v6_9f18, 2
  store i32 %v1_a0a8, i32* %r3.global-to-local, align 4
  store i32 %v6_9f30, i32* %ip.global-to-local, align 4
  store i32 %v6_9f48, i32* %r0.global-to-local, align 4
  store i32 %v6_9f00, i32* %r1.global-to-local, align 4
  %v1_a0d0 = urem i32 %v6_9f30, 2
  store i32 %v1_a0d0, i32* @sb, align 4
  store i32 %v0_a01c, i32* @r4, align 4
  %v1_a0d8 = urem i32 %v6_9f00, 256
  store i32 %v1_a0d8, i32* @r6, align 4
  %v1_a0dc = urem i32 %v6_9f48, 2
  store i32 %v1_a0dc, i32* @sl, align 4
  %sext = mul nuw i32 %v5_a07c, 65536
  %v4_a150 = sdiv i32 %sext, 65536
  %sext6 = mul nuw i32 %v5_a080, 65536
  %v4_a158 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_a060, 65536
  %v4_a174 = sdiv i32 %sext7, 65536
  %tmp = sub nsw i32 0, %v1_a094
  %v4_a1c4 = and i32 %tmp, 16
  %tmp70 = sub nsw i32 0, %v1_a0a4
  %v4_a1d8 = and i32 %tmp70, 8
  %tmp71 = sub nsw i32 0, %v1_a0a8
  %v4_a1ec = and i32 %tmp71, 4
  %v1_a144 = trunc i32 %v6_9e20 to i8
  br label %dec_label_pc_a0e0

dec_label_pc_a0e0:                                ; preds = %.thread9, %dec_label_pc_a030
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a0ec = call i32 @function_10eec(i32 1510, i32 1)
  %v2_a0f4 = load i32, i32* @r4, align 4
  %v5_a0f4 = mul i32 %v2_a0f4, 4
  %v6_a0f4 = add i32 %v5_a0f4, %v2_9dcc
  %v7_a0f4 = inttoptr i32 %v6_a0f4 to i32*
  store i32 %v2_a0ec, i32* %v7_a0f4, align 4
  %v3_a0f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a0f8, i32* %r2.global-to-local, align 4
  %v5_a100 = mul i32 %v3_a0f8, 24
  %v1_a104 = load i32, i32* @r7, align 4
  %v2_a104 = add i32 %v1_a104, %v5_a100
  store i32 %v2_a104, i32* %r0.global-to-local, align 4
  store i32 %v2_9dcc, i32* %r3.global-to-local, align 4
  %v4_a10c = mul i32 %v3_a0f8, 4
  %v5_a10c = add i32 %v4_a10c, %v2_9dcc
  %v6_a10c = inttoptr i32 %v5_a10c to i32*
  %v7_a10c = load i32, i32* %v6_a10c, align 4
  store i32 %v7_a10c, i32* %r1.global-to-local, align 4
  %v1_a110 = inttoptr i32 %v7_a10c to i8*
  %v2_a110 = load i8, i8* %v1_a110, align 1
  %tmp72 = urem i8 %v2_a110, 16
  %v1_a114 = zext i8 %tmp72 to i32
  %v1_a118 = or i32 %v1_a114, 64
  store i32 %v1_a118, i32* %r3.global-to-local, align 4
  %v1_a11c = trunc i32 %v1_a118 to i8
  store i8 %v1_a11c, i8* %v1_a110, align 1
  %v0_a120 = load i32, i32* %r1.global-to-local, align 4
  %v1_a120 = inttoptr i32 %v0_a120 to i8*
  %v2_a120 = load i8, i8* %v1_a120, align 1
  %v1_a124 = and i8 %v2_a120, -16
  %v1_a128 = or i8 %v1_a124, 5
  store i32 %v1_9e4c, i32* %ip.global-to-local, align 4
  store i8 %v1_a128, i8* %v1_a120, align 1
  store i32 %v6_9de4, i32* %r2.global-to-local, align 4
  %v2_a138 = load i32, i32* %r1.global-to-local, align 4
  %v3_a138 = add i32 %v2_a138, 1
  %v4_a138 = inttoptr i32 %v3_a138 to i8*
  store i8 %v5_9e04, i8* %v4_a138, align 1
  store i32 %v1_9e28, i32* %r3.global-to-local, align 4
  %v0_a140 = load i32, i32* %ip.global-to-local, align 4
  %v2_a140 = icmp eq i32 %v0_a140, 0
  store i1 %v2_a140, i1* %cpsr_z.global-to-local, align 1
  %v2_a144 = load i32, i32* %r1.global-to-local, align 4
  %v3_a144 = add i32 %v2_a144, 8
  %v4_a144 = inttoptr i32 %v3_a144 to i8*
  store i8 %v1_a144, i8* %v4_a144, align 1
  %v0_a148 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a148, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a0e0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a14c = load i32, i32* %r1.global-to-local, align 4
  %v4_a14c = add i32 %v3_a14c, 6
  %v5_a14c = inttoptr i32 %v4_a14c to i16*
  store i16 64, i16* %v5_a14c, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a0e0, %bb
  store i32 %v4_a150, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_a158, i32* %r2.global-to-local, align 4
  %v2_a15c = load i32, i32* %r1.global-to-local, align 4
  %v3_a15c = add i32 %v2_a15c, 9
  %v4_a15c = inttoptr i32 %v3_a15c to i8*
  store i8 6, i8* %v4_a15c, align 1
  %v0_a160 = load i32, i32* %ip.global-to-local, align 4
  %v1_a160 = trunc i32 %v0_a160 to i16
  %v2_a160 = load i32, i32* %r1.global-to-local, align 4
  %v3_a160 = add i32 %v2_a160, 2
  %v4_a160 = inttoptr i32 %v3_a160 to i16*
  store i16 %v1_a160, i16* %v4_a160, align 2
  store i32 %v6_9f9c, i32* %ip.global-to-local, align 4
  %v1_a168 = load i32, i32* %r1.global-to-local, align 4
  %v2_a168 = add i32 %v1_a168, 12
  %v3_a168 = inttoptr i32 %v2_a168 to i32*
  store i32 %v6_9f9c, i32* %v3_a168, align 4
  %v0_a16c = load i32, i32* %r2.global-to-local, align 4
  %v1_a16c = trunc i32 %v0_a16c to i16
  %v2_a16c = load i32, i32* %r1.global-to-local, align 4
  %v3_a16c = add i32 %v2_a16c, 4
  %v4_a16c = inttoptr i32 %v3_a16c to i16*
  store i16 %v1_a16c, i16* %v4_a16c, align 2
  %v0_a170 = load i32, i32* %r0.global-to-local, align 4
  %v1_a170 = add i32 %v0_a170, 16
  %v2_a170 = inttoptr i32 %v1_a170 to i32*
  %v3_a170 = load i32, i32* %v2_a170, align 4
  store i32 %v3_a170, i32* %r2.global-to-local, align 4
  store i32 %v4_a174, i32* %r0.global-to-local, align 4
  %v1_a178 = load i32, i32* %r1.global-to-local, align 4
  %v2_a178 = add i32 %v1_a178, 16
  %v3_a178 = inttoptr i32 %v2_a178 to i32*
  store i32 %v3_a170, i32* %v3_a178, align 4
  %v0_a17c = load i32, i32* %r0.global-to-local, align 4
  %v1_a17c = trunc i32 %v0_a17c to i16
  %v2_a17c = load i32, i32* %r1.global-to-local, align 4
  %v3_a17c = add i32 %v2_a17c, 20
  %v4_a17c = inttoptr i32 %v3_a17c to i16*
  store i16 %v1_a17c, i16* %v4_a17c, align 2
  %v0_a180 = load i32, i32* %r1.global-to-local, align 4
  %v1_a180 = add i32 %v0_a180, 20
  store i32 %v1_a180, i32* @r4, align 4
  %v1_a184 = add i32 %v0_a180, 32
  %v2_a184 = inttoptr i32 %v1_a184 to i8*
  %v3_a184 = load i8, i8* %v2_a184, align 1
  %v4_a184 = zext i8 %v3_a184 to i32
  %v1_a188 = and i32 %v4_a184, 95
  store i32 %v1_a188, i32* %r3.global-to-local, align 4
  %v1_a18c = add i32 %v0_a180, 33
  %v2_a18c = inttoptr i32 %v1_a18c to i8*
  %v3_a18c = load i8, i8* %v2_a18c, align 1
  %v4_a18c = zext i8 %v3_a18c to i32
  store i32 %v4_a18c, i32* %r2.global-to-local, align 4
  %v1_a190 = or i32 %v1_a188, 80
  %v1_a194 = add i32 %v0_a180, 40
  store i32 %v1_a194, i32* @r5, align 4
  store i32 %v1_a090, i32* %r1.global-to-local, align 4
  %v1_a19c = trunc i32 %v1_a190 to i8
  store i8 %v1_a19c, i8* %v2_a184, align 1
  store i32 %v5_a098, i32* %r3.global-to-local, align 4
  %v0_a1a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a1a4 = and i32 %v0_a1a4, -33
  %v1_a1a8 = load i32, i32* %r1.global-to-local, align 4
  %v4_a1a8 = mul i32 %v1_a1a8, 32
  %v5_a1a8 = or i32 %v4_a1a8, %v1_a1a4
  store i32 %v5_a1a8, i32* %r2.global-to-local, align 4
  %v1_a1ac = load i32, i32* @r4, align 4
  %v2_a1ac = add i32 %v1_a1ac, 4
  %v3_a1ac = inttoptr i32 %v2_a1ac to i32*
  store i32 %v5_a098, i32* %v3_a1ac, align 4
  %v0_a1b0 = load i32, i32* @fp, align 4
  %v1_a1b0 = trunc i32 %v0_a1b0 to i16
  %v2_a1b0 = load i32, i32* @r4, align 4
  %v3_a1b0 = add i32 %v2_a1b0, 2
  %v4_a1b0 = inttoptr i32 %v3_a1b0 to i16*
  store i16 %v1_a1b0, i16* %v4_a1b0, align 2
  %v0_a1b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a1b4 = trunc i32 %v0_a1b4 to i8
  %v2_a1b4 = load i32, i32* @r4, align 4
  %v3_a1b4 = add i32 %v2_a1b4, 13
  %v4_a1b4 = inttoptr i32 %v3_a1b4 to i8*
  store i8 %v1_a1b4, i8* %v4_a1b4, align 1
  %v0_a1b8 = load i32, i32* @r4, align 4
  %v1_a1b8 = add i32 %v0_a1b8, 13
  %v2_a1b8 = inttoptr i32 %v1_a1b8 to i8*
  %v3_a1b8 = load i8, i8* %v2_a1b8, align 1
  %v4_a1b8 = zext i8 %v3_a1b8 to i32
  store i32 %v1_a094, i32* %ip.global-to-local, align 4
  %v1_a1c0 = and i32 %v4_a1b8, 239
  %v5_a1c4 = or i32 %v1_a1c0, %v4_a1c4
  store i32 %v5_a1c4, i32* %r3.global-to-local, align 4
  %v1_a1c8 = trunc i32 %v5_a1c4 to i8
  store i8 %v1_a1c8, i8* %v2_a1b8, align 1
  %v0_a1cc = load i32, i32* @r4, align 4
  %v1_a1cc = add i32 %v0_a1cc, 13
  %v2_a1cc = inttoptr i32 %v1_a1cc to i8*
  %v3_a1cc = load i8, i8* %v2_a1cc, align 1
  %v4_a1cc = zext i8 %v3_a1cc to i32
  store i32 %v1_a0a4, i32* %r0.global-to-local, align 4
  %v1_a1d4 = and i32 %v4_a1cc, 247
  %v5_a1d8 = or i32 %v1_a1d4, %v4_a1d8
  store i32 %v5_a1d8, i32* %r2.global-to-local, align 4
  %v1_a1dc = trunc i32 %v5_a1d8 to i8
  store i8 %v1_a1dc, i8* %v2_a1cc, align 1
  %v0_a1e0 = load i32, i32* @r4, align 4
  %v1_a1e0 = add i32 %v0_a1e0, 13
  %v2_a1e0 = inttoptr i32 %v1_a1e0 to i8*
  %v3_a1e0 = load i8, i8* %v2_a1e0, align 1
  %v4_a1e0 = zext i8 %v3_a1e0 to i32
  store i32 %v1_a0a8, i32* %r1.global-to-local, align 4
  %v1_a1e8 = and i32 %v4_a1e0, 251
  %v5_a1ec = or i32 %v1_a1e8, %v4_a1ec
  store i32 %v5_a1ec, i32* %r3.global-to-local, align 4
  %v1_a1f0 = trunc i32 %v5_a1ec to i8
  store i8 %v1_a1f0, i8* %v2_a1e0, align 1
  %v0_a1f4 = load i32, i32* @r4, align 4
  %v1_a1f4 = add i32 %v0_a1f4, 13
  %v2_a1f4 = inttoptr i32 %v1_a1f4 to i8*
  %v3_a1f4 = load i8, i8* %v2_a1f4, align 1
  %v4_a1f4 = zext i8 %v3_a1f4 to i32
  %v1_a1f8 = and i32 %v4_a1f4, 253
  %v1_a1fc = load i32, i32* @sb, align 4
  %v3_a1fc = mul i32 %v1_a1fc, 2
  %v4_a1fc = or i32 %v3_a1fc, %v1_a1f8
  store i32 %v4_a1fc, i32* %r2.global-to-local, align 4
  %v1_a200 = trunc i32 %v4_a1fc to i8
  store i8 %v1_a200, i8* %v2_a1f4, align 1
  %v0_a204 = load i32, i32* @r4, align 4
  %v1_a204 = add i32 %v0_a204, 13
  %v2_a204 = inttoptr i32 %v1_a204 to i8*
  %v3_a204 = load i8, i8* %v2_a204, align 1
  %v4_a204 = zext i8 %v3_a204 to i32
  %v1_a208 = and i32 %v4_a204, 254
  %v0_a20c = load i32, i32* @sl, align 4
  %v2_a20c = or i32 %v1_a208, %v0_a20c
  store i32 %v2_a20c, i32* %r3.global-to-local, align 4
  %v1_a210 = trunc i32 %v2_a20c to i8
  store i8 %v1_a210, i8* %v2_a204, align 1
  %v0_a214 = call i32 @function_cad8()
  %v1_a214 = trunc i32 %v0_a214 to i16
  store i32 %v0_a214, i32* %r0.global-to-local, align 4
  %v0_a218 = load i32, i32* @r6, align 4
  %v2_a218 = icmp eq i32 %v0_a218, 0
  store i1 %v2_a218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a218, label %.thread9, label %bb68

bb68:                                             ; preds = %.thread
  %v1_a21c = load i32, i32* @r4, align 4
  %v2_a21c = add i32 %v1_a21c, 13
  %v3_a21c = inttoptr i32 %v2_a21c to i8*
  %v4_a21c = load i8, i8* %v3_a21c, align 1
  %v5_a21c = zext i8 %v4_a21c to i32
  %v2_a220 = or i32 %v5_a21c, 8
  store i32 %v2_a220, i32* %r3.global-to-local, align 4
  %v2_a224 = trunc i32 %v2_a220 to i8
  store i8 %v2_a224, i8* %v3_a21c, align 1
  br label %.thread9

.thread9:                                         ; preds = %.thread, %bb68
  %v3_a228 = load i32, i32* @r4, align 4
  %v4_a228 = add i32 %v3_a228, 14
  %v5_a228 = inttoptr i32 %v4_a228 to i16*
  store i16 %v1_a214, i16* %v5_a228, align 2
  %v0_a22c = load i32, i32* @r8, align 4
  store i32 %v0_a22c, i32* %r1.global-to-local, align 4
  %v0_a230 = load i32, i32* @r5, align 4
  store i32 %v0_a230, i32* %r0.global-to-local, align 4
  %v2_a234 = call i32 @function_cb9c(i32 %v0_a230, i32 %v0_a22c)
  store i32 %v2_a234, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a23c = load i32, i32* @r5, align 4
  %v3_a23c = load i32, i32* @r8, align 4
  %v4_a23c = add i32 %v3_a23c, %v2_a23c
  %v5_a23c = inttoptr i32 %v4_a23c to i8*
  store i8 0, i8* %v5_a23c, align 1
  %v3_a240 = load i32, i32* %stack_var_-44, align 4
  %v1_a244 = add i32 %v3_a240, 1
  store i32 %v1_a244, i32* @r4, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v9_a24c = icmp eq i32 %v1_a244, %arg2
  store i1 %v9_a24c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a244, i32* %stack_var_-44, align 4
  %v5_a254 = icmp slt i32 %v1_a244, %arg2
  br i1 %v5_a254, label %dec_label_pc_a0e0, label %dec_label_pc_a258.preheader

dec_label_pc_a258.preheader:                      ; preds = %.thread9, %dec_label_pc_9ff8
  %v2_a294 = icmp eq i32 %v6_9f9c, -1
  %v7_a294 = icmp eq i32 %v6_9f9c, -1
  %v3_a408 = icmp eq i32 %v3_a00c, 65535
  %v2_a46c = icmp eq i32 %v1_9f88, 0
  br label %dec_label_pc_a258

dec_label_pc_a258:                                ; preds = %dec_label_pc_a258.preheader, %dec_label_pc_a494
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 %v2_a018, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a018, label %dec_label_pc_a494, label %dec_label_pc_a26c

dec_label_pc_a26c:                                ; preds = %dec_label_pc_a258
  %v0_a26c = load i32, i32* @r8, align 4
  %v3_a26c = mul i32 %v0_a26c, 65536
  %v1_a270 = add i32 %v3_a26c, 1310720
  store i32 %v1_a270, i32* %r2.global-to-local, align 4
  %tmp69 = udiv i32 %v1_a270, 256
  %v3_a278 = and i32 %tmp69, 65280
  store i32 %v3_a278, i32* %r3.global-to-local, align 4
  %v4_a27c = udiv i32 %v1_a270, 16777216
  %v5_a27c = or i32 %v3_a278, %v4_a27c
  store i32 %v5_a27c, i32* @fp, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_a284 = add i32 %v0_a26c, 20
  store i32 %v1_a284, i32* @sb, align 4
  %v1_a288 = add i32 %v0_a26c, 40
  store i32 %v1_a288, i32* @sl, align 4
  br label %dec_label_pc_a374

dec_label_pc_a290:                                ; preds = %dec_label_pc_a374
  store i32 %v6_9f9c, i32* %r0.global-to-local, align 4
  store i1 %v7_a294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a294, label %dec_label_pc_a3f8, label %dec_label_pc_a29c

dec_label_pc_a29c:                                ; preds = %dec_label_pc_a398, %dec_label_pc_a290
  store i32 %v3_a00c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a408, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a408, label %dec_label_pc_a414, label %dec_label_pc_a2b0

dec_label_pc_a2b0:                                ; preds = %dec_label_pc_a3f8.dec_label_pc_a2b0_crit_edge, %dec_label_pc_a29c
  %v1_a2b4 = phi i32 [ %v1_a2b4.pre, %dec_label_pc_a3f8.dec_label_pc_a2b0_crit_edge ], [ 65535, %dec_label_pc_a29c ]
  store i32 %v3_a010, i32* %r2.global-to-local, align 4
  %v9_a2b4 = icmp eq i32 %v3_a010, %v1_a2b4
  store i1 %v9_a2b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2b4, label %dec_label_pc_a428, label %dec_label_pc_a2bc

dec_label_pc_a2bc:                                ; preds = %dec_label_pc_a414.dec_label_pc_a2bc_crit_edge, %dec_label_pc_a2b0
  %v1_a2c0 = phi i32 [ %v1_a2c0.pre, %dec_label_pc_a414.dec_label_pc_a2bc_crit_edge ], [ %v1_a2b4, %dec_label_pc_a2b0 ]
  store i32 %v3_a014, i32* %r3.global-to-local, align 4
  %v9_a2c0 = icmp eq i32 %v3_a014, %v1_a2c0
  store i1 %v9_a2c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2c0, label %dec_label_pc_a43c, label %dec_label_pc_a2c8

dec_label_pc_a2c8:                                ; preds = %dec_label_pc_a428.dec_label_pc_a2c8_crit_edge, %dec_label_pc_a2bc
  %v1_a2cc = phi i32 [ %v1_a2cc.pre, %dec_label_pc_a428.dec_label_pc_a2c8_crit_edge ], [ %v1_a2c0, %dec_label_pc_a2bc ]
  store i32 %v6_9e9c, i32* %ip.global-to-local, align 4
  %v9_a2cc = icmp eq i32 %v6_9e9c, %v1_a2cc
  store i1 %v9_a2cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2cc, label %dec_label_pc_a450, label %dec_label_pc_a2d4

dec_label_pc_a2d4:                                ; preds = %dec_label_pc_a43c.dec_label_pc_a2d4_crit_edge, %dec_label_pc_a2c8
  %v1_a2d8 = phi i32 [ %v1_a2d8.pre, %dec_label_pc_a43c.dec_label_pc_a2d4_crit_edge ], [ %v1_a2cc, %dec_label_pc_a2c8 ]
  store i32 %v6_9eb8, i32* %r0.global-to-local, align 4
  %v9_a2d8 = icmp eq i32 %v6_9eb8, %v1_a2d8
  store i1 %v9_a2d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a2d8, label %dec_label_pc_a464, label %dec_label_pc_a2e0

dec_label_pc_a2e0:                                ; preds = %dec_label_pc_a450, %dec_label_pc_a2d4
  store i32 %v1_9f88, i32* %r1.global-to-local, align 4
  store i1 %v2_a46c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a46c, label %dec_label_pc_a2ec, label %dec_label_pc_a478

dec_label_pc_a2ec:                                ; preds = %dec_label_pc_a2e0, %dec_label_pc_a464, %dec_label_pc_a478
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_a2f0 = load i32, i32* @r5, align 4
  %v3_a2f0 = add i32 %v2_a2f0, 10
  %v4_a2f0 = inttoptr i32 %v3_a2f0 to i16*
  store i16 0, i16* %v4_a2f0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a2f8 = load i32, i32* @r5, align 4
  store i32 %v0_a2f8, i32* @r0, align 4
  %v2_a2fc = call i32 @function_bf78(i32 %v0_a2f8, i32 20)
  %v3_a2fc = trunc i32 %v2_a2fc to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a304 = load i32, i32* @r5, align 4
  %v4_a304 = add i32 %v3_a304, 10
  %v5_a304 = inttoptr i32 %v4_a304 to i16*
  store i16 %v3_a2fc, i16* %v5_a304, align 2
  %v0_a308 = load i32, i32* @r6, align 4
  store i32 %v0_a308, i32* @r1, align 4
  %v0_a30c = load i32, i32* %r3.global-to-local, align 4
  %v1_a30c = trunc i32 %v0_a30c to i16
  %v3_a30c = add i32 %v0_a308, 16
  %v4_a30c = inttoptr i32 %v3_a30c to i16*
  store i16 %v1_a30c, i16* %v4_a30c, align 2
  %v0_a310 = load i32, i32* @fp, align 4
  store i32 %v0_a310, i32* %r2.global-to-local, align 4
  %v0_a314 = load i32, i32* @sb, align 4
  store i32 %v0_a314, i32* %r3.global-to-local, align 4
  %v0_a318 = load i32, i32* @r5, align 4
  store i32 %v0_a318, i32* %r0.global-to-local, align 4
  %v4_a31c = call i32 @function_bfc8(i32 %v0_a318, i32 %v0_a308, i32 %v0_a310, i32 %v0_a314)
  %v5_a31c = trunc i32 %v4_a31c to i16
  store i32 %v4_a31c, i32* %r0.global-to-local, align 4
  %v3_a320 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a320, i32* %r3.global-to-local, align 4
  %v3_a324 = mul i32 %v3_a320, 32
  store i32 %v3_a324, i32* %lr.global-to-local, align 4
  %v3_a328 = load i32, i32* @r6, align 4
  %v4_a328 = add i32 %v3_a328, 16
  %v5_a328 = inttoptr i32 %v4_a328 to i16*
  store i16 %v5_a31c, i16* %v5_a328, align 2
  %v0_a32c = load i32, i32* %lr.global-to-local, align 4
  %v1_a32c = load i32, i32* %r3.global-to-local, align 4
  %tmp73 = mul i32 %v1_a32c, -8
  %v5_a32c = add i32 %v0_a32c, %tmp73
  store i32 %v5_a32c, i32* %lr.global-to-local, align 4
  %v0_a330 = load i32, i32* @r6, align 4
  %v1_a330 = add i32 %v0_a330, 2
  %v2_a330 = inttoptr i32 %v1_a330 to i16*
  %v3_a330 = load i16, i16* %v2_a330, align 2
  %v1_a334 = load i32, i32* @r7, align 4
  %v2_a334 = add i32 %v1_a334, %v5_a32c
  store i32 %v2_a334, i32* @lr, align 4
  %v3_a338 = add i32 %v2_a334, 2
  %v4_a338 = inttoptr i32 %v3_a338 to i16*
  store i16 %v3_a330, i16* %v4_a338, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a344 = load i32, i32* @r5, align 4
  store i32 %v0_a344, i32* %r1.global-to-local, align 4
  store i32 %v3_9fc0, i32* %r0.global-to-local, align 4
  %v0_a34c = load i32, i32* @sl, align 4
  store i32 %v0_a34c, i32* %r2.global-to-local, align 4
  %v0_a354 = load i32, i32* @lr, align 4
  %v6_a358 = call i32 @function_10300(i32 %v3_9fc0, i32 %v0_a344, i32 %v0_a34c, i32 16384, i32 %v0_a354, i32 16)
  %v3_a35c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a35c, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v1_a364 = add i32 %v3_a35c, 1
  store i32 %v1_a364, i32* %r0.global-to-local, align 4
  %v9_a368 = icmp eq i32 %v1_a364, %arg2
  store i1 %v9_a368, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a364, i32* %stack_var_-44, align 4
  %v6_a370 = icmp slt i32 %v1_a364, %arg2
  br i1 %v6_a370, label %dec_label_pc_a374, label %dec_label_pc_a494

dec_label_pc_a374:                                ; preds = %dec_label_pc_a2ec, %dec_label_pc_a26c
  %v1_a388 = phi i32 [ %v1_a364, %dec_label_pc_a2ec ], [ 0, %dec_label_pc_a26c ]
  %v5_a378 = mul i32 %v1_a388, 24
  %v1_a37c = load i32, i32* @r7, align 4
  %v2_a37c = add i32 %v1_a37c, %v5_a378
  store i32 %v2_a37c, i32* %r3.global-to-local, align 4
  store i32 %v2_9dcc, i32* %ip.global-to-local, align 4
  %v1_a384 = add i32 %v2_a37c, 20
  %v2_a384 = inttoptr i32 %v1_a384 to i8*
  %v3_a384 = load i8, i8* %v2_a384, align 1
  %v4_a384 = zext i8 %v3_a384 to i32
  store i32 %v4_a384, i32* %r2.global-to-local, align 4
  %v4_a388 = mul i32 %v1_a388, 4
  %v5_a388 = add i32 %v4_a388, %v2_9dcc
  %v6_a388 = inttoptr i32 %v5_a388 to i32*
  %v7_a388 = load i32, i32* %v6_a388, align 4
  store i32 %v7_a388, i32* @r5, align 4
  %v2_a38c = icmp ugt i8 %v3_a384, 30
  %v7_a38c = icmp eq i8 %v3_a384, 31
  store i1 %v7_a38c, i1* %cpsr_z.global-to-local, align 1
  %v1_a390 = add i32 %v7_a388, 20
  store i32 %v1_a390, i32* @r6, align 4
  %v2_a394 = xor i1 %v7_a38c, true
  %v3_a394 = and i1 %v2_a38c, %v2_a394
  br i1 %v3_a394, label %dec_label_pc_a290, label %dec_label_pc_a398

dec_label_pc_a398:                                ; preds = %dec_label_pc_a374
  %v1_a398 = add i32 %v2_a37c, 16
  %v2_a398 = inttoptr i32 %v1_a398 to i32*
  %v3_a398 = load i32, i32* %v2_a398, align 4
  %v0_a39c = call i32 @function_cad8()
  store i32 %v0_a39c, i32* %r0.global-to-local, align 4
  %v3_a3a0 = load i32, i32* %stack_var_-44, align 4
  %v5_a3a8 = mul i32 %v3_a3a0, 24
  %v1_a3ac = and i32 %v3_a398, 16711680
  store i32 %v1_a3ac, i32* %ip.global-to-local, align 4
  %v3_a3b0 = udiv i32 %v3_a398, 16777216
  %v4_a3b4 = udiv i32 %v1_a3ac, 256
  %v5_a3b4 = or i32 %v4_a3b4, %v3_a3b0
  store i32 %v5_a3b4, i32* %r2.global-to-local, align 4
  %v1_a3b8 = load i32, i32* @r7, align 4
  %v2_a3b8 = add i32 %v1_a3b8, %v5_a3a8
  store i32 %v2_a3b8, i32* %r1.global-to-local, align 4
  %v1_a3bc = and i32 %v3_a398, 65280
  store i32 %v1_a3bc, i32* %r3.global-to-local, align 4
  %v1_a3c0 = add i32 %v2_a3b8, 20
  %v2_a3c0 = inttoptr i32 %v1_a3c0 to i8*
  %v3_a3c0 = load i8, i8* %v2_a3c0, align 1
  %v4_a3c0 = zext i8 %v3_a3c0 to i32
  store i32 %v4_a3c0, i32* %ip.global-to-local, align 4
  %v5_a3c8 = call i32 @llvm.bswap.i32(i32 %v3_a398)
  %v7_a3cc = lshr i32 %v0_a39c, %v4_a3c0
  %v8_a3cc = add i32 %v7_a3cc, %v5_a3c8
  store i32 %v8_a3cc, i32* %r2.global-to-local, align 4
  %v1_a3dc = and i32 %v8_a3cc, 65280
  store i32 %v1_a3dc, i32* %r1.global-to-local, align 4
  store i32 %v6_9f9c, i32* %r0.global-to-local, align 4
  %v5_a3e8 = call i32 @llvm.bswap.i32(i32 %v8_a3cc)
  store i32 %v5_a3e8, i32* %r3.global-to-local, align 4
  store i1 %v7_a294, i1* %cpsr_z.global-to-local, align 1
  %v1_a3f0 = load i32, i32* @r5, align 4
  %v2_a3f0 = add i32 %v1_a3f0, 16
  %v3_a3f0 = inttoptr i32 %v2_a3f0 to i32*
  store i32 %v5_a3e8, i32* %v3_a3f0, align 4
  br i1 %v2_a294, label %dec_label_pc_a3f8, label %dec_label_pc_a29c

dec_label_pc_a3f8:                                ; preds = %dec_label_pc_a398, %dec_label_pc_a290
  %v0_a3f8 = call i32 @function_cad8()
  store i32 %v0_a3f8, i32* %r0.global-to-local, align 4
  store i32 %v3_a00c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a408, i1* %cpsr_z.global-to-local, align 1
  %v1_a40c = load i32, i32* @r5, align 4
  %v2_a40c = add i32 %v1_a40c, 12
  %v3_a40c = inttoptr i32 %v2_a40c to i32*
  store i32 %v0_a3f8, i32* %v3_a40c, align 4
  br i1 %v3_a408, label %dec_label_pc_a414, label %dec_label_pc_a3f8.dec_label_pc_a2b0_crit_edge

dec_label_pc_a3f8.dec_label_pc_a2b0_crit_edge:    ; preds = %dec_label_pc_a3f8
  %v1_a2b4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a2b0

dec_label_pc_a414:                                ; preds = %dec_label_pc_a3f8, %dec_label_pc_a29c
  %v0_a414 = call i32 @function_cad8()
  %v1_a414 = trunc i32 %v0_a414 to i16
  store i32 %v0_a414, i32* %r0.global-to-local, align 4
  store i32 %v3_a010, i32* %r2.global-to-local, align 4
  %v1_a41c = load i32, i32* @r4, align 4
  %v9_a41c = icmp eq i32 %v3_a010, %v1_a41c
  store i1 %v9_a41c, i1* %cpsr_z.global-to-local, align 1
  %v3_a420 = load i32, i32* @r5, align 4
  %v4_a420 = add i32 %v3_a420, 4
  %v5_a420 = inttoptr i32 %v4_a420 to i16*
  store i16 %v1_a414, i16* %v5_a420, align 2
  br i1 %v9_a41c, label %dec_label_pc_a428, label %dec_label_pc_a414.dec_label_pc_a2bc_crit_edge

dec_label_pc_a414.dec_label_pc_a2bc_crit_edge:    ; preds = %dec_label_pc_a414
  %v1_a2c0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a2bc

dec_label_pc_a428:                                ; preds = %dec_label_pc_a414, %dec_label_pc_a2b0
  %v0_a428 = call i32 @function_cad8()
  %v1_a428 = trunc i32 %v0_a428 to i16
  store i32 %v0_a428, i32* %r0.global-to-local, align 4
  store i32 %v3_a014, i32* %r3.global-to-local, align 4
  %v1_a430 = load i32, i32* @r4, align 4
  %v9_a430 = icmp eq i32 %v3_a014, %v1_a430
  store i1 %v9_a430, i1* %cpsr_z.global-to-local, align 1
  %v3_a434 = load i32, i32* @r5, align 4
  %v4_a434 = add i32 %v3_a434, 20
  %v5_a434 = inttoptr i32 %v4_a434 to i16*
  store i16 %v1_a428, i16* %v5_a434, align 2
  br i1 %v9_a430, label %dec_label_pc_a43c, label %dec_label_pc_a428.dec_label_pc_a2c8_crit_edge

dec_label_pc_a428.dec_label_pc_a2c8_crit_edge:    ; preds = %dec_label_pc_a428
  %v1_a2cc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a2c8

dec_label_pc_a43c:                                ; preds = %dec_label_pc_a428, %dec_label_pc_a2bc
  %v0_a43c = call i32 @function_cad8()
  %v1_a43c = trunc i32 %v0_a43c to i16
  store i32 %v0_a43c, i32* %r0.global-to-local, align 4
  store i32 %v6_9e9c, i32* %ip.global-to-local, align 4
  %v1_a444 = load i32, i32* @r4, align 4
  %v9_a444 = icmp eq i32 %v6_9e9c, %v1_a444
  store i1 %v9_a444, i1* %cpsr_z.global-to-local, align 1
  %v3_a448 = load i32, i32* @r6, align 4
  %v4_a448 = add i32 %v3_a448, 2
  %v5_a448 = inttoptr i32 %v4_a448 to i16*
  store i16 %v1_a43c, i16* %v5_a448, align 2
  br i1 %v9_a444, label %dec_label_pc_a450, label %dec_label_pc_a43c.dec_label_pc_a2d4_crit_edge

dec_label_pc_a43c.dec_label_pc_a2d4_crit_edge:    ; preds = %dec_label_pc_a43c
  %v1_a2d8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a2d4

dec_label_pc_a450:                                ; preds = %dec_label_pc_a43c, %dec_label_pc_a2c8
  %v0_a450 = call i32 @function_cad8()
  %v1_a454 = load i32, i32* @r6, align 4
  %v2_a454 = add i32 %v1_a454, 4
  %v3_a454 = inttoptr i32 %v2_a454 to i32*
  store i32 %v0_a450, i32* %v3_a454, align 4
  store i32 %v6_9eb8, i32* %r0.global-to-local, align 4
  %v1_a45c = load i32, i32* @r4, align 4
  %v9_a45c = icmp eq i32 %v6_9eb8, %v1_a45c
  store i1 %v9_a45c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a45c, label %dec_label_pc_a464, label %dec_label_pc_a2e0

dec_label_pc_a464:                                ; preds = %dec_label_pc_a450, %dec_label_pc_a2d4
  %v0_a464 = call i32 @function_cad8()
  store i32 %v0_a464, i32* %r0.global-to-local, align 4
  store i32 %v1_9f88, i32* %r1.global-to-local, align 4
  store i1 %v2_a46c, i1* %cpsr_z.global-to-local, align 1
  %v1_a470 = load i32, i32* @r6, align 4
  %v2_a470 = add i32 %v1_a470, 8
  %v3_a470 = inttoptr i32 %v2_a470 to i32*
  store i32 %v0_a464, i32* %v3_a470, align 4
  br i1 %v2_a46c, label %dec_label_pc_a2ec, label %dec_label_pc_a478

dec_label_pc_a478:                                ; preds = %dec_label_pc_a2e0, %dec_label_pc_a464
  %v0_a478 = load i32, i32* @r5, align 4
  %v1_a478 = add i32 %v0_a478, 40
  store i32 %v1_a478, i32* @r4, align 4
  store i32 %v1_a478, i32* %r0.global-to-local, align 4
  %v0_a480 = load i32, i32* @r8, align 4
  store i32 %v0_a480, i32* %r1.global-to-local, align 4
  %v2_a484 = call i32 @function_cb9c(i32 %v1_a478, i32 %v0_a480)
  store i32 %v2_a484, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a48c = load i32, i32* @r4, align 4
  %v3_a48c = load i32, i32* @r8, align 4
  %v4_a48c = add i32 %v3_a48c, %v2_a48c
  %v5_a48c = inttoptr i32 %v4_a48c to i8*
  store i8 0, i8* %v5_a48c, align 1
  br label %dec_label_pc_a2ec

dec_label_pc_a494:                                ; preds = %dec_label_pc_a2ec, %dec_label_pc_a258
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a498 = call i32 @function_fcbc(i32* null)
  store i32 %v2_a498, i32* %r0.global-to-local, align 4
  store i32 %v2_9fac, i32* %r1.global-to-local, align 4
  %v9_a4a0 = icmp eq i32 %v2_9fac, %v2_a498
  store i1 %v9_a4a0, i1* %cpsr_z.global-to-local, align 1
  %v6_a4a4 = icmp slt i32 %v2_9fac, %v2_a498
  br i1 %v6_a4a4, label %dec_label_pc_a4a8, label %dec_label_pc_a258

dec_label_pc_a4a8:                                ; preds = %dec_label_pc_a494, %dec_label_pc_9da0, %dec_label_pc_a4b4
  %v1_a4b0 = phi i32 [ %v3_9fc0, %dec_label_pc_9da0 ], [ %v1_a4b8, %dec_label_pc_a4b4 ], [ %v2_a498, %dec_label_pc_a494 ]
  store i32 %v18_9da0, i32* %sb.global-to-local, align 4
  store i32 %v24_9da0, i32* %fp.global-to-local, align 4
  store i32 %v27_9da0, i32* %lr.global-to-local, align 4
  ret i32 %v1_a4b0

dec_label_pc_a4b4:                                ; preds = %dec_label_pc_9fd0
  store i32 %v3_9fc0, i32* %r0.global-to-local, align 4
  %v1_a4b8 = call i32 @function_10008(i32 %v3_9fc0)
  store i32 %v1_a4b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a4a8

; uselistorder directives
  uselistorder i32 %v1_a4b8, { 1, 0 }
  uselistorder i32 %v0_a43c, { 1, 0 }
  uselistorder i32 %v0_a428, { 1, 0 }
  uselistorder i32 %v0_a414, { 1, 0 }
  uselistorder i32 %v5_a3e8, { 1, 0 }
  uselistorder i32 %v3_a398, { 2, 1, 3, 0 }
  uselistorder i32 %v1_a364, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_a32c, { 1, 0 }
  uselistorder i32 %v4_a31c, { 1, 0 }
  uselistorder i32 %v0_a26c, { 2, 1, 0 }
  uselistorder i1 %v2_a46c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_a408, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a294, { 2, 1, 0 }
  uselistorder i32 %v1_a244, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a214, { 1, 0 }
  uselistorder i32 %v0_a180, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a0a8, { 2, 0, 1 }
  uselistorder i32 %v1_a0a4, { 2, 0, 1 }
  uselistorder i32 %v1_a094, { 1, 0 }
  uselistorder i1 %v2_a018, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a00c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_a008, { 1, 0, 3, 2 }
  uselistorder i32 %v0_a004, { 1, 0, 2 }
  uselistorder i1 %v7_9ff0, { 1, 0 }
  uselistorder i1 %v7_9fc4, { 1, 0 }
  uselistorder i32 %v3_9fc0, { 3, 4, 1, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_9fac, { 2, 1, 0 }
  uselistorder i32 %v6_9f9c, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_9f88, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_9f00, { 0, 2, 1, 3 }
  uselistorder i32 %v6_9eb8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_9e9c, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_9e4c, { 1, 2, 0 }
  uselistorder i32 %v1_9e28, { 2, 1, 0 }
  uselistorder i32 %v6_9e20, { 1, 0 }
  uselistorder i32 %v7_9e08, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v6_9de4, { 2, 1, 3, 0 }
  uselistorder i32 %v2_9dcc, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 13, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 48, 47, 50, 49, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 7, 5, 8, 6, 9, 10, 11, 13, 12, 15, 14, 16, 18, 17, 19, 20, 21, 23, 22, 29, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 6, 5, 4, 7, 3, 2, 1, 0, 8, 9, 10, 11 }
  uselistorder label %dec_label_pc_a4a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a478, { 1, 0 }
  uselistorder label %dec_label_pc_a2ec, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a258, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_a4c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a4c4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_a4c4 = load i32, i32* @r4, align 4
  %v24_a4c4 = load i32, i32* @fp, align 4
  %v27_a4c4 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_a4f0 = call i32 @function_10eec(i32 %arg2, i32 4)
  %v0_a4f4 = load i32, i32* @r4, align 4
  store i32 %v0_a4f4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a4f0, i32* @sl, align 4
  %v0_a504 = load i32, i32* @r5, align 4
  store i32 %v0_a504, i32* %r0.global-to-local, align 4
  %v5_a508 = inttoptr i32 %v0_a4f4 to i32*
  %v6_a508 = call i32 @function_8258(i32 %v0_a504, i32* %v5_a508, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a520 = load i32, i32* @r4, align 4
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  %v0_a524 = load i32, i32* @r5, align 4
  store i32 %v0_a524, i32* %r0.global-to-local, align 4
  %v5_a528 = trunc i32 %v6_a508 to i8
  %v6_a52c = inttoptr i32 %v0_a520 to i32*
  %v7_a52c = call i32 @function_8258(i32 %v0_a524, i32* %v6_a52c, i32 3, i32 65535, i32 %v6_a508)
  %v0_a530 = load i32, i32* @r4, align 4
  store i32 %v0_a530, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_a540 = load i32, i32* @r5, align 4
  store i32 %v0_a540, i32* %r0.global-to-local, align 4
  %v5_a544 = inttoptr i32 %v0_a530 to i32*
  %v6_a544 = call i32 @function_8258(i32 %v0_a540, i32* %v5_a544, i32 4, i32 64, i32 %v7_a52c)
  %v1_a54c = urem i32 %v6_a544, 256
  %v0_a550 = load i32, i32* @r4, align 4
  store i32 %v0_a550, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a55c = load i32, i32* @r5, align 4
  store i32 %v0_a55c, i32* %r0.global-to-local, align 4
  %v6_a564 = inttoptr i32 %v0_a550 to i32*
  %v7_a564 = call i32 @function_8258(i32 %v0_a55c, i32* %v6_a564, i32 5, i32 1, i32 %v1_a54c)
  %v1_a570 = urem i32 %v7_a564, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a57c = load i32, i32* @r4, align 4
  store i32 %v0_a57c, i32* %r1.global-to-local, align 4
  %v0_a580 = load i32, i32* @r5, align 4
  store i32 %v0_a580, i32* %r0.global-to-local, align 4
  %v5_a588 = inttoptr i32 %v0_a57c to i32*
  %v6_a588 = call i32 @function_8258(i32 %v0_a580, i32* %v5_a588, i32 6, i32 65535, i32 %v1_a570)
  %v0_a594 = load i32, i32* @r4, align 4
  store i32 %v0_a594, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a5a0 = load i32, i32* @r5, align 4
  store i32 %v0_a5a0, i32* %r0.global-to-local, align 4
  %v5_a5a4 = inttoptr i32 %v0_a594 to i32*
  %v6_a5a4 = call i32 @function_8258(i32 %v0_a5a0, i32* %v5_a5a4, i32 7, i32 65535, i32 %v6_a588)
  %v0_a5ac = load i32, i32* @r4, align 4
  store i32 %v0_a5ac, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 %v6_a5a4, i32* %fp.global-to-local, align 4
  %v0_a5bc = load i32, i32* @r5, align 4
  store i32 %v0_a5bc, i32* %r0.global-to-local, align 4
  %v5_a5c0 = inttoptr i32 %v0_a5ac to i32*
  %v6_a5c0 = call i32 @function_8258(i32 %v0_a5bc, i32* %v5_a5c0, i32 16, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_a5c4 = load i32, i32* @r4, align 4
  store i32 %v0_a5c4, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a5d4 = load i32, i32* @r5, align 4
  store i32 %v0_a5d4, i32* %r0.global-to-local, align 4
  %v5_a5d8 = inttoptr i32 %v0_a5c4 to i32*
  %v6_a5d8 = call i32 @function_8258(i32 %v0_a5d4, i32* %v5_a5d8, i32 17, i32 0, i32 %v6_a5c0)
  %v0_a5dc = load i32, i32* @r4, align 4
  store i32 %v0_a5dc, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a5ec = load i32, i32* @r5, align 4
  store i32 %v0_a5ec, i32* %r0.global-to-local, align 4
  %v5_a5f0 = inttoptr i32 %v0_a5dc to i32*
  %v6_a5f0 = call i32 @function_8258(i32 %v0_a5ec, i32* %v5_a5f0, i32 10, i32 0, i32 %v6_a5d8)
  %v0_a5f4 = load i32, i32* @r4, align 4
  store i32 %v0_a5f4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a604 = load i32, i32* @r5, align 4
  store i32 %v0_a604, i32* %r0.global-to-local, align 4
  %v5_a608 = inttoptr i32 %v0_a5f4 to i32*
  %v6_a608 = call i32 @function_8258(i32 %v0_a604, i32* %v5_a608, i32 11, i32 0, i32 %v6_a5f0)
  %v0_a60c = load i32, i32* @r4, align 4
  store i32 %v0_a60c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a61c = load i32, i32* @r5, align 4
  store i32 %v0_a61c, i32* %r0.global-to-local, align 4
  %v5_a620 = inttoptr i32 %v0_a60c to i32*
  %v6_a620 = call i32 @function_8258(i32 %v0_a61c, i32* %v5_a620, i32 12, i32 0, i32 %v6_a608)
  %v0_a624 = load i32, i32* @r4, align 4
  store i32 %v0_a624, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a634 = load i32, i32* @r5, align 4
  store i32 %v0_a634, i32* %r0.global-to-local, align 4
  %v5_a638 = inttoptr i32 %v0_a624 to i32*
  %v6_a638 = call i32 @function_8258(i32 %v0_a634, i32* %v5_a638, i32 13, i32 0, i32 %v6_a620)
  %v0_a63c = load i32, i32* @r4, align 4
  store i32 %v0_a63c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a64c = load i32, i32* @r5, align 4
  store i32 %v0_a64c, i32* %r0.global-to-local, align 4
  %v5_a650 = inttoptr i32 %v0_a63c to i32*
  %v6_a650 = call i32 @function_8258(i32 %v0_a64c, i32* %v5_a650, i32 14, i32 1, i32 %v6_a638)
  %v0_a654 = load i32, i32* @r4, align 4
  store i32 %v0_a654, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a664 = load i32, i32* @r5, align 4
  store i32 %v0_a664, i32* %r0.global-to-local, align 4
  %v5_a668 = inttoptr i32 %v0_a654 to i32*
  %v6_a668 = call i32 @function_8258(i32 %v0_a664, i32* %v5_a668, i32 15, i32 0, i32 %v6_a650)
  %v0_a670 = load i32, i32* @r4, align 4
  store i32 %v0_a670, i32* %r1.global-to-local, align 4
  %v2_a674 = load i32, i32* @global_var_202d4.42, align 4
  store i32 %v2_a674, i32* %r3.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_a680 = load i32, i32* @r5, align 4
  store i32 %v0_a680, i32* %r0.global-to-local, align 4
  %v5_a684 = inttoptr i32 %v0_a670 to i32*
  %v6_a684 = call i32 @function_81ec(i32 %v0_a680, i32* %v5_a684, i32 24, i32 %v2_a674, i32 %v6_a668)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a690 = call i32 @function_fcbc(i32* null)
  %v1_a694 = load i32, i32* @r6, align 4
  %v2_a694 = add i32 %v1_a694, %v2_a690
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a6a8 = call i32 @function_10384(i32 2, i32 3, i32 6)
  store i32 %v3_a6a8, i32* %r0.global-to-local, align 4
  %v7_a6ac = icmp eq i32 %v3_a6a8, -1
  store i1 %v7_a6ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a6a8, i32* @r8, align 4
  br i1 %v7_a6ac, label %dec_label_pc_ab80, label %dec_label_pc_a6b8

dec_label_pc_a6b8:                                ; preds = %dec_label_pc_a4c4
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a6c0 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a6c0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a6d4 = call i32 @function_10340(i32 %v3_a6a8, i32 0, i32 3, i32 %v6_a6c0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_a6d4, i32* %r0.global-to-local, align 4
  %v7_a6d8 = icmp eq i32 %v5_a6d4, -1
  store i1 %v7_a6d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6d8, label %dec_label_pc_ab8c, label %dec_label_pc_a6e0

dec_label_pc_a6e0:                                ; preds = %dec_label_pc_a6b8
  %v3_a6ec = mul i32 %v7_a52c, 65536
  store i32 %v3_a6ec, i32* %r0.global-to-local, align 4
  %v0_a6f4 = load i32, i32* %fp.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_a5f0, i32* %r1.global-to-local, align 4
  %v3_a700 = urem i32 %v7_a52c, 65536
  store i32 %v3_a700, i32* %r2.global-to-local, align 4
  %v3_a704 = urem i32 %v6_a588, 65536
  store i32 %v3_a704, i32* %r3.global-to-local, align 4
  %v3_a708 = urem i32 %v0_a6f4, 65536
  %v0_a70c = load i32, i32* @sb, align 4
  %v2_a70c = icmp eq i32 %v0_a70c, 0
  store i1 %v2_a70c, i1* %cpsr_z.global-to-local, align 1
  %v1_a71c = urem i32 %v6_a5f0, 256
  store i32 %v1_a71c, i32* @fp, align 4
  br i1 %v2_a70c, label %dec_label_pc_a970.preheader, label %dec_label_pc_a724

dec_label_pc_a724:                                ; preds = %dec_label_pc_a6e0
  %trunc = trunc i32 %v7_a52c to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp60 = mul nuw nsw i32 %v3_a704, 256
  %v3_a750 = and i32 %tmp60, 65280
  %tmp61 = mul i32 %v0_a6f4, 256
  %v3_a754 = and i32 %tmp61, 65280
  %tmp62 = mul i32 %v6_a5c0, 256
  %v3_a758 = and i32 %tmp62, 65280
  %v1_a75c = urem i32 %v6_a5f0, 2
  %tmp63 = udiv i32 %v6_a588, 256
  %v4_a760 = urem i32 %tmp63, 256
  %v5_a760 = or i32 %v3_a750, %v4_a760
  %tmp64 = udiv i32 %v0_a6f4, 256
  %v4_a764 = urem i32 %tmp64, 256
  %v5_a764 = or i32 %v4_a764, %v3_a754
  store i32 %v5_a764, i32* @r5, align 4
  %tmp65 = udiv i32 %v6_a5c0, 256
  %v4_a768 = urem i32 %tmp65, 256
  %v5_a768 = or i32 %v4_a768, %v3_a758
  store i32 %v5_a768, i32* @lr, align 4
  %v1_a77c = urem i32 %v6_a608, 2
  store i32 %v1_a77c, i32* %r1.global-to-local, align 4
  %v1_a780 = urem i32 %v6_a620, 2
  store i32 %v1_a780, i32* %r2.global-to-local, align 4
  %v1_a784 = urem i32 %v6_a638, 2
  store i32 %v1_a784, i32* %r3.global-to-local, align 4
  %v1_a788 = urem i32 %v6_a650, 2
  store i32 %v1_a788, i32* @r6, align 4
  %v1_a78c = urem i32 %v6_a668, 2
  store i32 %v1_a78c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v1_a808 = trunc i32 %v6_a544 to i8
  %sext6 = mul nuw i32 %v5_a760, 65536
  %v4_a834 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_a764, 65536
  %v6_a870 = sdiv i32 %sext7, 65536
  %tmp = sub nsw i32 0, %v1_a77c
  %v4_a888 = and i32 %tmp, 16
  %tmp66 = sub nsw i32 0, %v1_a780
  %v4_a8a0 = and i32 %tmp66, 8
  %tmp67 = sub nsw i32 0, %v1_a784
  %v4_a8b4 = and i32 %tmp67, 4
  %tmp68 = sub nsw i32 0, %v1_a788
  %v3_a8c8 = and i32 %tmp68, 2
  br label %dec_label_pc_a7b4

dec_label_pc_a7b4:                                ; preds = %.thread, %dec_label_pc_a724
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_a7bc = call i32 @function_10eec(i32 128, i32 1)
  store i32 %v2_a7bc, i32* %r0.global-to-local, align 4
  %v3_a7c0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a7c0, i32* %r2.global-to-local, align 4
  %v1_a7c4 = load i32, i32* @sl, align 4
  %v2_a7c4 = load i32, i32* @r4, align 4
  %v5_a7c4 = mul i32 %v2_a7c4, 4
  %v6_a7c4 = add i32 %v5_a7c4, %v1_a7c4
  %v7_a7c4 = inttoptr i32 %v6_a7c4 to i32*
  store i32 %v2_a7bc, i32* %v7_a7c4, align 4
  %v0_a7c8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a7c8 = mul i32 %v0_a7c8, 32
  store i32 %v3_a7c8, i32* %r3.global-to-local, align 4
  %v0_a7cc = load i32, i32* @sl, align 4
  %v4_a7cc = mul i32 %v0_a7c8, 4
  %v5_a7cc = add i32 %v0_a7cc, %v4_a7cc
  %v6_a7cc = inttoptr i32 %v5_a7cc to i32*
  %v7_a7cc = load i32, i32* %v6_a7cc, align 4
  store i32 %v7_a7cc, i32* %r4.global-to-local, align 4
  %v5_a7d0 = mul i32 %v0_a7c8, 24
  store i32 %v5_a7d0, i32* %r3.global-to-local, align 4
  %v1_a7d4 = load i32, i32* @r7, align 4
  %v2_a7d4 = add i32 %v1_a7d4, %v5_a7d0
  store i32 %v2_a7d4, i32* %r0.global-to-local, align 4
  %v1_a7d8 = inttoptr i32 %v7_a7cc to i8*
  %v2_a7d8 = load i8, i8* %v1_a7d8, align 1
  %tmp69 = urem i8 %v2_a7d8, 16
  %v1_a7dc = zext i8 %tmp69 to i32
  %v1_a7e0 = or i32 %v1_a7dc, 64
  store i32 %v1_a7e0, i32* %r3.global-to-local, align 4
  %v1_a7e4 = trunc i32 %v1_a7e0 to i8
  store i8 %v1_a7e4, i8* %v1_a7d8, align 1
  %v0_a7e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_a7e8 = inttoptr i32 %v0_a7e8 to i8*
  %v2_a7e8 = load i8, i8* %v1_a7e8, align 1
  %v1_a7ec = and i8 %v2_a7e8, -16
  %v1_a7f0 = or i8 %v1_a7ec, 5
  store i32 %v1_a570, i32* %r1.global-to-local, align 4
  store i8 %v1_a7f0, i8* %v1_a7e8, align 1
  %v2_a800 = load i32, i32* %r4.global-to-local, align 4
  %v3_a800 = add i32 %v2_a800, 1
  %v4_a800 = inttoptr i32 %v3_a800 to i8*
  store i8 %v5_a528, i8* %v4_a800, align 1
  store i32 %v1_a54c, i32* %r3.global-to-local, align 4
  %v2_a808 = load i32, i32* %r4.global-to-local, align 4
  %v3_a808 = add i32 %v2_a808, 8
  %v4_a808 = inttoptr i32 %v3_a808 to i8*
  store i8 %v1_a808, i8* %v4_a808, align 1
  %v0_a810 = load i32, i32* %r1.global-to-local, align 4
  %v2_a810 = icmp eq i32 %v0_a810, 0
  store i1 %v2_a810, i1* %cpsr_z.global-to-local, align 1
  %v2_a814 = load i32, i32* %r4.global-to-local, align 4
  %v3_a814 = add i32 %v2_a814, 4
  %v4_a814 = inttoptr i32 %v3_a814 to i16*
  store i16 %rev, i16* %v4_a814, align 2
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_a81c = load i32, i32* %r4.global-to-local, align 4
  %v3_a81c = add i32 %v2_a81c, 9
  %v4_a81c = inttoptr i32 %v3_a81c to i8*
  store i8 6, i8* %v4_a81c, align 1
  %v0_a820 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a820, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a7b4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a824 = load i32, i32* %r4.global-to-local, align 4
  %v4_a824 = add i32 %v3_a824, 6
  %v5_a824 = inttoptr i32 %v4_a824 to i16*
  store i16 64, i16* %v5_a824, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a7b4, %bb
  store i32 %v6_a684, i32* %r3.global-to-local, align 4
  %v1_a82c = load i32, i32* %r4.global-to-local, align 4
  %v2_a82c = add i32 %v1_a82c, 12
  %v3_a82c = inttoptr i32 %v2_a82c to i32*
  store i32 %v6_a684, i32* %v3_a82c, align 4
  %v0_a830 = load i32, i32* %r0.global-to-local, align 4
  %v1_a830 = add i32 %v0_a830, 16
  %v2_a830 = inttoptr i32 %v1_a830 to i32*
  %v3_a830 = load i32, i32* %v2_a830, align 4
  store i32 %v3_a830, i32* %r3.global-to-local, align 4
  store i32 %v4_a834, i32* %r0.global-to-local, align 4
  %v2_a83c = load i32, i32* %r4.global-to-local, align 4
  %v3_a83c = add i32 %v2_a83c, 2
  %v4_a83c = inttoptr i32 %v3_a83c to i16*
  store i16 15360, i16* %v4_a83c, align 2
  %v0_a840 = load i32, i32* %r3.global-to-local, align 4
  %v1_a840 = load i32, i32* %r4.global-to-local, align 4
  %v2_a840 = add i32 %v1_a840, 16
  %v3_a840 = inttoptr i32 %v2_a840 to i32*
  store i32 %v0_a840, i32* %v3_a840, align 4
  %v0_a844 = load i32, i32* %r0.global-to-local, align 4
  %v1_a844 = trunc i32 %v0_a844 to i16
  %v2_a844 = load i32, i32* %r4.global-to-local, align 4
  %v3_a844 = add i32 %v2_a844, 20
  %v4_a844 = inttoptr i32 %v3_a844 to i16*
  store i16 %v1_a844, i16* %v4_a844, align 2
  %v0_a848 = load i32, i32* %r4.global-to-local, align 4
  %v1_a848 = add i32 %v0_a848, 20
  store i32 %v1_a848, i32* %r1.global-to-local, align 4
  %v1_a84c = add i32 %v0_a848, 32
  %v2_a84c = inttoptr i32 %v1_a84c to i8*
  %v3_a84c = load i8, i8* %v2_a84c, align 1
  %v4_a84c = zext i8 %v3_a84c to i32
  store i32 %v4_a84c, i32* %r3.global-to-local, align 4
  %v1_a850 = add i32 %v0_a848, 33
  %v2_a850 = inttoptr i32 %v1_a850 to i8*
  %v3_a850 = load i8, i8* %v2_a850, align 1
  %v4_a850 = zext i8 %v3_a850 to i32
  store i32 %v1_a75c, i32* %r0.global-to-local, align 4
  %v1_a858 = urem i8 %v3_a84c, 16
  %v1_a85c = or i8 %v1_a858, -96
  %v1_a860 = and i32 %v4_a850, 223
  store i32 %v1_a860, i32* %r2.global-to-local, align 4
  store i8 %v1_a85c, i8* %v2_a84c, align 1
  %v0_a868 = load i32, i32* %r2.global-to-local, align 4
  %v1_a868 = load i32, i32* %r0.global-to-local, align 4
  %v4_a868 = mul i32 %v1_a868, 32
  %v5_a868 = or i32 %v4_a868, %v0_a868
  store i32 %v5_a868, i32* %r2.global-to-local, align 4
  store i32 %v5_a768, i32* %r0.global-to-local, align 4
  store i32 %v6_a870, i32* %r3.global-to-local, align 4
  %v1_a874 = trunc i32 %v5_a868 to i8
  %v2_a874 = load i32, i32* %r1.global-to-local, align 4
  %v3_a874 = add i32 %v2_a874, 13
  %v4_a874 = inttoptr i32 %v3_a874 to i8*
  store i8 %v1_a874, i8* %v4_a874, align 1
  %v0_a878 = load i32, i32* %r3.global-to-local, align 4
  %v1_a878 = trunc i32 %v0_a878 to i16
  %v2_a878 = load i32, i32* %r1.global-to-local, align 4
  %v3_a878 = add i32 %v2_a878, 2
  %v4_a878 = inttoptr i32 %v3_a878 to i16*
  store i16 %v1_a878, i16* %v4_a878, align 2
  %v0_a87c = load i32, i32* %r1.global-to-local, align 4
  %v1_a87c = add i32 %v0_a87c, 13
  %v2_a87c = inttoptr i32 %v1_a87c to i8*
  %v3_a87c = load i8, i8* %v2_a87c, align 1
  %v4_a87c = zext i8 %v3_a87c to i32
  store i32 %v1_a77c, i32* %r2.global-to-local, align 4
  %v1_a884 = and i32 %v4_a87c, 239
  %v5_a888 = or i32 %v1_a884, %v4_a888
  store i32 %v5_a888, i32* %r3.global-to-local, align 4
  %v0_a88c = load i32, i32* %r0.global-to-local, align 4
  %v2_a88c = add i32 %v0_a87c, 4
  %v3_a88c = inttoptr i32 %v2_a88c to i32*
  store i32 %v0_a88c, i32* %v3_a88c, align 4
  %v0_a890 = load i32, i32* %r3.global-to-local, align 4
  %v1_a890 = trunc i32 %v0_a890 to i8
  %v2_a890 = load i32, i32* %r1.global-to-local, align 4
  %v3_a890 = add i32 %v2_a890, 13
  %v4_a890 = inttoptr i32 %v3_a890 to i8*
  store i8 %v1_a890, i8* %v4_a890, align 1
  %v0_a894 = load i32, i32* %r1.global-to-local, align 4
  %v1_a894 = add i32 %v0_a894, 13
  %v2_a894 = inttoptr i32 %v1_a894 to i8*
  %v3_a894 = load i8, i8* %v2_a894, align 1
  %v4_a894 = zext i8 %v3_a894 to i32
  store i32 %v1_a780, i32* %r3.global-to-local, align 4
  %v1_a89c = and i32 %v4_a894, 247
  %v5_a8a0 = or i32 %v1_a89c, %v4_a8a0
  store i32 %v5_a8a0, i32* %r2.global-to-local, align 4
  %v1_a8a4 = trunc i32 %v5_a8a0 to i8
  store i8 %v1_a8a4, i8* %v2_a894, align 1
  %v0_a8a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8a8 = add i32 %v0_a8a8, 13
  %v2_a8a8 = inttoptr i32 %v1_a8a8 to i8*
  %v3_a8a8 = load i8, i8* %v2_a8a8, align 1
  %v4_a8a8 = zext i8 %v3_a8a8 to i32
  store i32 %v1_a784, i32* %r0.global-to-local, align 4
  %v1_a8b0 = and i32 %v4_a8a8, 251
  %v5_a8b4 = or i32 %v1_a8b0, %v4_a8b4
  store i32 %v5_a8b4, i32* %r3.global-to-local, align 4
  %v1_a8b8 = trunc i32 %v5_a8b4 to i8
  store i8 %v1_a8b8, i8* %v2_a8a8, align 1
  %v0_a8bc = load i32, i32* %r1.global-to-local, align 4
  %v1_a8bc = add i32 %v0_a8bc, 13
  %v2_a8bc = inttoptr i32 %v1_a8bc to i8*
  %v3_a8bc = load i8, i8* %v2_a8bc, align 1
  %v4_a8bc = zext i8 %v3_a8bc to i32
  store i32 %v1_a788, i32* %r3.global-to-local, align 4
  %v1_a8c4 = and i32 %v4_a8bc, 253
  %v4_a8c8 = or i32 %v1_a8c4, %v3_a8c8
  store i32 %v4_a8c8, i32* %r2.global-to-local, align 4
  %v1_a8cc = trunc i32 %v4_a8c8 to i8
  store i8 %v1_a8cc, i8* %v2_a8bc, align 1
  %v0_a8d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8d0 = add i32 %v0_a8d0, 13
  %v2_a8d0 = inttoptr i32 %v1_a8d0 to i8*
  %v3_a8d0 = load i8, i8* %v2_a8d0, align 1
  %v4_a8d0 = zext i8 %v3_a8d0 to i32
  store i32 %v1_a78c, i32* %r0.global-to-local, align 4
  %v1_a8d8 = and i32 %v4_a8d0, 254
  %v2_a8dc = or i32 %v1_a8d8, %v1_a78c
  store i32 %v2_a8dc, i32* %r3.global-to-local, align 4
  store i32 2, i32* @r5, align 4
  store i32 4, i32* @r6, align 4
  %v1_a8e8 = trunc i32 %v2_a8dc to i8
  store i8 %v1_a8e8, i8* %v2_a8d0, align 1
  %v0_a8ec = load i32, i32* @r5, align 4
  %v1_a8ec = trunc i32 %v0_a8ec to i8
  %v2_a8ec = load i32, i32* %r4.global-to-local, align 4
  %v3_a8ec = add i32 %v2_a8ec, 40
  %v4_a8ec = inttoptr i32 %v3_a8ec to i8*
  store i8 %v1_a8ec, i8* %v4_a8ec, align 1
  %v0_a8f0 = load i32, i32* @r6, align 4
  %v1_a8f0 = trunc i32 %v0_a8f0 to i8
  %v2_a8f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a8f0 = add i32 %v2_a8f0, 41
  %v4_a8f0 = inttoptr i32 %v3_a8f0 to i8*
  store i8 %v1_a8f0, i8* %v4_a8f0, align 1
  %v0_a8f4 = call i32 @function_cad8()
  %v1_a8f8 = urem i32 %v0_a8f4, 16
  %v1_a8fc = or i32 %v1_a8f8, 1392
  %v1_a900 = add nuw nsw i32 %v1_a8fc, 8
  %v3_a904 = mul nuw nsw i32 %v1_a900, 65536
  store i32 %v3_a904, i32* %r0.global-to-local, align 4
  %v3_a908 = mul nuw nsw i32 %v1_a900, 256
  %v5_a910 = or i32 %v3_a908, 5
  %v1_a914 = trunc i32 %v5_a910 to i16
  %v2_a914 = load i32, i32* %r4.global-to-local, align 4
  %v3_a914 = add i32 %v2_a914, 42
  %v4_a914 = inttoptr i32 %v3_a914 to i16*
  store i16 %v1_a914, i16* %v4_a914, align 2
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_a920 = load i32, i32* %r4.global-to-local, align 4
  %v3_a920 = add i32 %v2_a920, 46
  %v4_a920 = inttoptr i32 %v3_a920 to i8*
  store i8 8, i8* %v4_a920, align 1
  %v0_a924 = load i32, i32* %r2.global-to-local, align 4
  %v1_a924 = trunc i32 %v0_a924 to i8
  %v2_a924 = load i32, i32* %r4.global-to-local, align 4
  %v3_a924 = add i32 %v2_a924, 47
  %v4_a924 = inttoptr i32 %v3_a924 to i8*
  store i8 %v1_a924, i8* %v4_a924, align 1
  %v0_a928 = load i32, i32* @r6, align 4
  %v1_a928 = trunc i32 %v0_a928 to i8
  %v2_a928 = load i32, i32* %r4.global-to-local, align 4
  %v3_a928 = add i32 %v2_a928, 44
  %v4_a928 = inttoptr i32 %v3_a928 to i8*
  store i8 %v1_a928, i8* %v4_a928, align 1
  %v0_a92c = load i32, i32* @r5, align 4
  %v1_a92c = trunc i32 %v0_a92c to i8
  %v2_a92c = load i32, i32* %r4.global-to-local, align 4
  %v3_a92c = add i32 %v2_a92c, 45
  %v4_a92c = inttoptr i32 %v3_a92c to i8*
  store i8 %v1_a92c, i8* %v4_a92c, align 1
  %v0_a930 = call i32 @function_cad8()
  store i32 %v0_a930, i32* %r0.global-to-local, align 4
  %v2_a938 = load i32, i32* %r4.global-to-local, align 4
  %v3_a938 = add i32 %v2_a938, 59
  %v4_a938 = inttoptr i32 %v3_a938 to i8*
  store i8 6, i8* %v4_a938, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_a948 = load i32, i32* %r4.global-to-local, align 4
  %v2_a948 = add i32 %v1_a948, 48
  %v3_a948 = inttoptr i32 %v2_a948 to i32*
  store i32 %v0_a930, i32* %v3_a948, align 4
  %v0_a94c = load i32, i32* %r3.global-to-local, align 4
  %v1_a94c = load i32, i32* %r4.global-to-local, align 4
  %v2_a94c = add i32 %v1_a94c, 52
  %v3_a94c = inttoptr i32 %v2_a94c to i32*
  store i32 %v0_a94c, i32* %v3_a94c, align 4
  %v0_a950 = load i32, i32* %r2.global-to-local, align 4
  %v1_a950 = trunc i32 %v0_a950 to i8
  %v2_a950 = load i32, i32* %r4.global-to-local, align 4
  %v3_a950 = add i32 %v2_a950, 56
  %v4_a950 = inttoptr i32 %v3_a950 to i8*
  store i8 %v1_a950, i8* %v4_a950, align 1
  %v0_a954 = load i32, i32* %r1.global-to-local, align 4
  %v1_a954 = trunc i32 %v0_a954 to i8
  %v2_a954 = load i32, i32* %r4.global-to-local, align 4
  %v3_a954 = add i32 %v2_a954, 58
  %v4_a954 = inttoptr i32 %v3_a954 to i8*
  store i8 %v1_a954, i8* %v4_a954, align 1
  %v0_a958 = load i32, i32* %r1.global-to-local, align 4
  %v1_a958 = trunc i32 %v0_a958 to i8
  %v2_a958 = load i32, i32* %r4.global-to-local, align 4
  %v3_a958 = add i32 %v2_a958, 57
  %v4_a958 = inttoptr i32 %v3_a958 to i8*
  store i8 %v1_a958, i8* %v4_a958, align 1
  %v3_a95c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a95c, i32* %r3.global-to-local, align 4
  %v1_a960 = load i32, i32* %r2.global-to-local, align 4
  %v2_a960 = add i32 %v1_a960, %v3_a95c
  store i32 %v2_a960, i32* @r4, align 4
  %v1_a964 = load i32, i32* @sb, align 4
  %v9_a964 = icmp eq i32 %v2_a960, %v1_a964
  store i1 %v9_a964, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_a960, i32* %stack_var_-44, align 4
  %v5_a96c = icmp slt i32 %v2_a960, %v1_a964
  br i1 %v5_a96c, label %dec_label_pc_a7b4, label %dec_label_pc_a970.preheader

dec_label_pc_a970.preheader:                      ; preds = %.thread, %dec_label_pc_a6e0
  %v0_a97410 = phi i32 [ 0, %dec_label_pc_a6e0 ], [ %v1_a964, %.thread ]
  %v2_a98c = icmp eq i32 %v6_a684, -1
  %v7_a98c = icmp eq i32 %v6_a684, -1
  %v3_a9a0 = icmp eq i32 %v3_a700, 65535
  br label %dec_label_pc_a970

dec_label_pc_a970:                                ; preds = %dec_label_pc_ab6c.dec_label_pc_a970_crit_edge, %dec_label_pc_a970.preheader
  %v0_a974 = phi i32 [ %v0_a974.pre, %dec_label_pc_ab6c.dec_label_pc_a970_crit_edge ], [ %v0_a97410, %dec_label_pc_a970.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a974 = icmp eq i32 %v0_a974, 0
  store i1 %v2_a974, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a974, label %dec_label_pc_ab6c, label %dec_label_pc_a980

dec_label_pc_a980:                                ; preds = %dec_label_pc_a970
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aa64

dec_label_pc_a988:                                ; preds = %dec_label_pc_aa64
  store i32 %v6_a684, i32* %r3.global-to-local, align 4
  store i1 %v7_a98c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a98c, label %dec_label_pc_aae4, label %dec_label_pc_a994

dec_label_pc_a994:                                ; preds = %dec_label_pc_aa84, %dec_label_pc_a988
  store i32 %v3_a700, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_a9a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a9a0, label %dec_label_pc_ab00, label %dec_label_pc_a9a8

dec_label_pc_a9a8:                                ; preds = %dec_label_pc_aae4, %dec_label_pc_a994
  %v1_a9ac = phi i32 [ %v1_aaf4, %dec_label_pc_aae4 ], [ 65535, %dec_label_pc_a994 ]
  store i32 %v3_a704, i32* %r1.global-to-local, align 4
  %v9_a9ac = icmp eq i32 %v3_a704, %v1_a9ac
  store i1 %v9_a9ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9ac, label %dec_label_pc_ab14, label %dec_label_pc_a9b4

dec_label_pc_a9b4:                                ; preds = %dec_label_pc_ab00.dec_label_pc_a9b4_crit_edge, %dec_label_pc_a9a8
  %v1_a9b8 = phi i32 [ %v1_a9b8.pre, %dec_label_pc_ab00.dec_label_pc_a9b4_crit_edge ], [ %v1_a9ac, %dec_label_pc_a9a8 ]
  store i32 %v3_a708, i32* %r2.global-to-local, align 4
  %v9_a9b8 = icmp eq i32 %v3_a708, %v1_a9b8
  store i1 %v9_a9b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9b8, label %dec_label_pc_ab28, label %dec_label_pc_a9c0

dec_label_pc_a9c0:                                ; preds = %dec_label_pc_ab14.dec_label_pc_a9c0_crit_edge, %dec_label_pc_a9b4
  %v1_a9c4 = phi i32 [ %v1_a9c4.pre, %dec_label_pc_ab14.dec_label_pc_a9c0_crit_edge ], [ %v1_a9b8, %dec_label_pc_a9b4 ]
  store i32 %v6_a5c0, i32* %r3.global-to-local, align 4
  %v9_a9c4 = icmp eq i32 %v6_a5c0, %v1_a9c4
  store i1 %v9_a9c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9c4, label %dec_label_pc_ab3c, label %dec_label_pc_a9cc

dec_label_pc_a9cc:                                ; preds = %dec_label_pc_ab28.dec_label_pc_a9cc_crit_edge, %dec_label_pc_a9c0
  %v1_a9d0 = phi i32 [ %v1_a9d0.pre, %dec_label_pc_ab28.dec_label_pc_a9cc_crit_edge ], [ %v1_a9c4, %dec_label_pc_a9c0 ]
  store i32 %v6_a5d8, i32* %r0.global-to-local, align 4
  %v9_a9d0 = icmp eq i32 %v6_a5d8, %v1_a9d0
  store i1 %v9_a9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9d0, label %dec_label_pc_ab50, label %dec_label_pc_a9d8

dec_label_pc_a9d8:                                ; preds = %dec_label_pc_ab3c, %dec_label_pc_a9cc
  %v0_a9d8 = load i32, i32* @fp, align 4
  %v2_a9d8 = icmp eq i32 %v0_a9d8, 0
  store i1 %v2_a9d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a9d8, label %dec_label_pc_a9e0, label %dec_label_pc_ab60

dec_label_pc_a9e0:                                ; preds = %dec_label_pc_a9d8, %dec_label_pc_ab50, %dec_label_pc_ab60
  %v2_a9e4 = load i32, i32* @r5, align 4
  %v3_a9e4 = add i32 %v2_a9e4, 10
  %v4_a9e4 = inttoptr i32 %v3_a9e4 to i16*
  store i16 0, i16* %v4_a9e4, align 2
  %v0_a9e8 = load i32, i32* @r5, align 4
  store i32 %v0_a9e8, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_a9f0 = call i32 @function_bf78(i32 %v0_a9e8, i32 20)
  %v3_a9f0 = trunc i32 %v2_a9f0 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a9f8 = load i32, i32* @r5, align 4
  %v4_a9f8 = add i32 %v3_a9f8, 10
  %v5_a9f8 = inttoptr i32 %v4_a9f8 to i16*
  store i16 %v3_a9f0, i16* %v5_a9f8, align 2
  %v0_a9fc = load i32, i32* @r6, align 4
  store i32 %v0_a9fc, i32* @r1, align 4
  %v0_aa00 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa00 = trunc i32 %v0_aa00 to i16
  %v3_aa00 = add i32 %v0_a9fc, 16
  %v4_aa00 = inttoptr i32 %v3_aa00 to i16*
  store i16 %v1_aa00, i16* %v4_aa00, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_aa0c = load i32, i32* @r5, align 4
  store i32 %v0_aa0c, i32* %r0.global-to-local, align 4
  %v4_aa10 = call i32 @function_bfc8(i32 %v0_aa0c, i32 %v0_a9fc, i32 10240, i32 40)
  %v5_aa10 = trunc i32 %v4_aa10 to i16
  store i32 %v4_aa10, i32* %r0.global-to-local, align 4
  %v3_aa14 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa14, i32* %r3.global-to-local, align 4
  %v3_aa18 = mul i32 %v3_aa14, 32
  store i32 %v3_aa18, i32* %lr.global-to-local, align 4
  %v3_aa1c = load i32, i32* @r6, align 4
  %v4_aa1c = add i32 %v3_aa1c, 16
  %v5_aa1c = inttoptr i32 %v4_aa1c to i16*
  store i16 %v5_aa10, i16* %v5_aa1c, align 2
  %v0_aa20 = load i32, i32* %lr.global-to-local, align 4
  %v1_aa20 = load i32, i32* %r3.global-to-local, align 4
  %tmp70 = mul i32 %v1_aa20, -8
  %v5_aa20 = add i32 %v0_aa20, %tmp70
  store i32 %v5_aa20, i32* %lr.global-to-local, align 4
  %v0_aa24 = load i32, i32* @r6, align 4
  %v1_aa24 = add i32 %v0_aa24, 2
  %v2_aa24 = inttoptr i32 %v1_aa24 to i16*
  %v3_aa24 = load i16, i16* %v2_aa24, align 2
  %v1_aa28 = load i32, i32* @r7, align 4
  %v2_aa28 = add i32 %v1_aa28, %v5_aa20
  store i32 %v2_aa28, i32* @lr, align 4
  %v3_aa2c = add i32 %v2_aa28, 2
  %v4_aa2c = inttoptr i32 %v3_aa2c to i16*
  store i16 %v3_aa24, i16* %v4_aa2c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_aa38 = load i32, i32* @r5, align 4
  store i32 %v0_aa38, i32* %r1.global-to-local, align 4
  %v0_aa3c = load i32, i32* @r8, align 4
  store i32 %v0_aa3c, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_aa44 = load i32, i32* @lr, align 4
  %v6_aa4c = call i32 @function_10300(i32 %v0_aa3c, i32 %v0_aa38, i32 60, i32 16384, i32 %v0_aa44, i32 16)
  %v3_aa50 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa50, i32* %r3.global-to-local, align 4
  %v1_aa54 = add i32 %v3_aa50, 1
  store i32 %v1_aa54, i32* %r0.global-to-local, align 4
  %v1_aa58 = load i32, i32* @sb, align 4
  %v9_aa58 = icmp eq i32 %v1_aa54, %v1_aa58
  store i1 %v9_aa58, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aa54, i32* %stack_var_-44, align 4
  %v6_aa60 = icmp slt i32 %v1_aa54, %v1_aa58
  br i1 %v6_aa60, label %dec_label_pc_aa64, label %dec_label_pc_ab6c

dec_label_pc_aa64:                                ; preds = %dec_label_pc_a9e0, %dec_label_pc_a980
  %v1_aa74 = phi i32 [ %v1_aa54, %dec_label_pc_a9e0 ], [ 0, %dec_label_pc_a980 ]
  %v5_aa68 = mul i32 %v1_aa74, 24
  %v1_aa6c = load i32, i32* @r7, align 4
  %v2_aa6c = add i32 %v1_aa6c, %v5_aa68
  store i32 %v2_aa6c, i32* %r3.global-to-local, align 4
  %v1_aa70 = add i32 %v2_aa6c, 20
  %v2_aa70 = inttoptr i32 %v1_aa70 to i8*
  %v3_aa70 = load i8, i8* %v2_aa70, align 1
  %v4_aa70 = zext i8 %v3_aa70 to i32
  store i32 %v4_aa70, i32* %r2.global-to-local, align 4
  %v0_aa74 = load i32, i32* @sl, align 4
  %v4_aa74 = mul i32 %v1_aa74, 4
  %v5_aa74 = add i32 %v0_aa74, %v4_aa74
  %v6_aa74 = inttoptr i32 %v5_aa74 to i32*
  %v7_aa74 = load i32, i32* %v6_aa74, align 4
  store i32 %v7_aa74, i32* @r5, align 4
  %v2_aa78 = icmp ugt i8 %v3_aa70, 30
  %v7_aa78 = icmp eq i8 %v3_aa70, 31
  store i1 %v7_aa78, i1* %cpsr_z.global-to-local, align 1
  %v1_aa7c = add i32 %v7_aa74, 20
  store i32 %v1_aa7c, i32* @r6, align 4
  %v2_aa80 = xor i1 %v7_aa78, true
  %v3_aa80 = and i1 %v2_aa78, %v2_aa80
  br i1 %v3_aa80, label %dec_label_pc_a988, label %dec_label_pc_aa84

dec_label_pc_aa84:                                ; preds = %dec_label_pc_aa64
  %v1_aa84 = add i32 %v2_aa6c, 16
  %v2_aa84 = inttoptr i32 %v1_aa84 to i32*
  %v3_aa84 = load i32, i32* %v2_aa84, align 4
  store i32 %v3_aa84, i32* %r4.global-to-local, align 4
  %v0_aa88 = call i32 @function_cad8()
  store i32 %v0_aa88, i32* %r0.global-to-local, align 4
  %v3_aa8c = load i32, i32* %stack_var_-44, align 4
  %v5_aa94 = mul i32 %v3_aa8c, 24
  %v0_aa98 = load i32, i32* %r4.global-to-local, align 4
  %v1_aa98 = and i32 %v0_aa98, 16711680
  %v3_aa9c = udiv i32 %v0_aa98, 16777216
  %v4_aaa0 = udiv i32 %v1_aa98, 256
  %v5_aaa0 = or i32 %v4_aaa0, %v3_aa9c
  store i32 %v5_aaa0, i32* %r2.global-to-local, align 4
  %v1_aaa4 = load i32, i32* @r7, align 4
  %v2_aaa4 = add i32 %v1_aaa4, %v5_aa94
  store i32 %v2_aaa4, i32* %r1.global-to-local, align 4
  %v1_aaa8 = and i32 %v0_aa98, 65280
  store i32 %v1_aaa8, i32* %r3.global-to-local, align 4
  %v1_aaac = add i32 %v2_aaa4, 20
  %v2_aaac = inttoptr i32 %v1_aaac to i8*
  %v3_aaac = load i8, i8* %v2_aaac, align 1
  %v4_aaac = zext i8 %v3_aaac to i32
  %v5_aab4 = call i32 @llvm.bswap.i32(i32 %v0_aa98)
  %v7_aab8 = lshr i32 %v0_aa88, %v4_aaac
  %v8_aab8 = add i32 %v7_aab8, %v5_aab4
  store i32 %v8_aab8, i32* %r2.global-to-local, align 4
  %v1_aabc = and i32 %v8_aab8, 16711680
  store i32 %v1_aabc, i32* %r0.global-to-local, align 4
  %v1_aac8 = and i32 %v8_aab8, 65280
  store i32 %v1_aac8, i32* %r1.global-to-local, align 4
  %v5_aad0 = call i32 @llvm.bswap.i32(i32 %v8_aab8)
  %v1_aad4 = load i32, i32* @r5, align 4
  %v2_aad4 = add i32 %v1_aad4, 16
  %v3_aad4 = inttoptr i32 %v2_aad4 to i32*
  store i32 %v5_aad0, i32* %v3_aad4, align 4
  store i32 %v6_a684, i32* %r3.global-to-local, align 4
  store i1 %v7_a98c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a98c, label %dec_label_pc_aae4, label %dec_label_pc_a994

dec_label_pc_aae4:                                ; preds = %dec_label_pc_aa84, %dec_label_pc_a988
  %v0_aae4 = call i32 @function_cad8()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_aaec = load i32, i32* @r5, align 4
  %v2_aaec = add i32 %v1_aaec, 12
  %v3_aaec = inttoptr i32 %v2_aaec to i32*
  store i32 %v0_aae4, i32* %v3_aaec, align 4
  store i32 %v3_a700, i32* %r0.global-to-local, align 4
  %v0_aaf4 = load i32, i32* %r4.global-to-local, align 4
  %v1_aaf4 = add i32 %v0_aaf4, -1
  store i32 %v1_aaf4, i32* @r4, align 4
  %v9_aaf8 = icmp eq i32 %v3_a700, %v1_aaf4
  store i1 %v9_aaf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aaf8, label %dec_label_pc_ab00, label %dec_label_pc_a9a8

dec_label_pc_ab00:                                ; preds = %dec_label_pc_aae4, %dec_label_pc_a994
  %v0_ab00 = call i32 @function_cad8()
  %v1_ab00 = trunc i32 %v0_ab00 to i16
  store i32 %v0_ab00, i32* %r0.global-to-local, align 4
  store i32 %v3_a704, i32* %r1.global-to-local, align 4
  %v1_ab08 = load i32, i32* @r4, align 4
  %v9_ab08 = icmp eq i32 %v3_a704, %v1_ab08
  store i1 %v9_ab08, i1* %cpsr_z.global-to-local, align 1
  %v3_ab0c = load i32, i32* @r5, align 4
  %v4_ab0c = add i32 %v3_ab0c, 4
  %v5_ab0c = inttoptr i32 %v4_ab0c to i16*
  store i16 %v1_ab00, i16* %v5_ab0c, align 2
  br i1 %v9_ab08, label %dec_label_pc_ab14, label %dec_label_pc_ab00.dec_label_pc_a9b4_crit_edge

dec_label_pc_ab00.dec_label_pc_a9b4_crit_edge:    ; preds = %dec_label_pc_ab00
  %v1_a9b8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a9b4

dec_label_pc_ab14:                                ; preds = %dec_label_pc_ab00, %dec_label_pc_a9a8
  %v0_ab14 = call i32 @function_cad8()
  %v1_ab14 = trunc i32 %v0_ab14 to i16
  store i32 %v0_ab14, i32* %r0.global-to-local, align 4
  store i32 %v3_a708, i32* %r2.global-to-local, align 4
  %v1_ab1c = load i32, i32* @r4, align 4
  %v9_ab1c = icmp eq i32 %v3_a708, %v1_ab1c
  store i1 %v9_ab1c, i1* %cpsr_z.global-to-local, align 1
  %v3_ab20 = load i32, i32* @r5, align 4
  %v4_ab20 = add i32 %v3_ab20, 20
  %v5_ab20 = inttoptr i32 %v4_ab20 to i16*
  store i16 %v1_ab14, i16* %v5_ab20, align 2
  br i1 %v9_ab1c, label %dec_label_pc_ab28, label %dec_label_pc_ab14.dec_label_pc_a9c0_crit_edge

dec_label_pc_ab14.dec_label_pc_a9c0_crit_edge:    ; preds = %dec_label_pc_ab14
  %v1_a9c4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a9c0

dec_label_pc_ab28:                                ; preds = %dec_label_pc_ab14, %dec_label_pc_a9b4
  %v0_ab28 = call i32 @function_cad8()
  %v1_ab28 = trunc i32 %v0_ab28 to i16
  store i32 %v0_ab28, i32* %r0.global-to-local, align 4
  store i32 %v6_a5c0, i32* %r3.global-to-local, align 4
  %v1_ab30 = load i32, i32* @r4, align 4
  %v9_ab30 = icmp eq i32 %v6_a5c0, %v1_ab30
  store i1 %v9_ab30, i1* %cpsr_z.global-to-local, align 1
  %v3_ab34 = load i32, i32* @r6, align 4
  %v4_ab34 = add i32 %v3_ab34, 2
  %v5_ab34 = inttoptr i32 %v4_ab34 to i16*
  store i16 %v1_ab28, i16* %v5_ab34, align 2
  br i1 %v9_ab30, label %dec_label_pc_ab3c, label %dec_label_pc_ab28.dec_label_pc_a9cc_crit_edge

dec_label_pc_ab28.dec_label_pc_a9cc_crit_edge:    ; preds = %dec_label_pc_ab28
  %v1_a9d0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a9cc

dec_label_pc_ab3c:                                ; preds = %dec_label_pc_ab28, %dec_label_pc_a9c0
  %v0_ab3c = call i32 @function_cad8()
  %v1_ab40 = load i32, i32* @r6, align 4
  %v2_ab40 = add i32 %v1_ab40, 4
  %v3_ab40 = inttoptr i32 %v2_ab40 to i32*
  store i32 %v0_ab3c, i32* %v3_ab40, align 4
  store i32 %v6_a5d8, i32* %r0.global-to-local, align 4
  %v1_ab48 = load i32, i32* @r4, align 4
  %v9_ab48 = icmp eq i32 %v6_a5d8, %v1_ab48
  store i1 %v9_ab48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ab48, label %dec_label_pc_ab50, label %dec_label_pc_a9d8

dec_label_pc_ab50:                                ; preds = %dec_label_pc_ab3c, %dec_label_pc_a9cc
  %v0_ab50 = call i32 @function_cad8()
  store i32 %v0_ab50, i32* %r0.global-to-local, align 4
  %v0_ab54 = load i32, i32* @fp, align 4
  %v2_ab54 = icmp eq i32 %v0_ab54, 0
  store i1 %v2_ab54, i1* %cpsr_z.global-to-local, align 1
  %v1_ab58 = load i32, i32* @r6, align 4
  %v2_ab58 = add i32 %v1_ab58, 8
  %v3_ab58 = inttoptr i32 %v2_ab58 to i32*
  store i32 %v0_ab50, i32* %v3_ab58, align 4
  br i1 %v2_ab54, label %dec_label_pc_a9e0, label %dec_label_pc_ab60

dec_label_pc_ab60:                                ; preds = %dec_label_pc_a9d8, %dec_label_pc_ab50
  %v0_ab60 = call i32 @function_cad8()
  %v1_ab60 = trunc i32 %v0_ab60 to i16
  store i32 %v0_ab60, i32* %r0.global-to-local, align 4
  %v3_ab64 = load i32, i32* @r6, align 4
  %v4_ab64 = add i32 %v3_ab64, 18
  %v5_ab64 = inttoptr i32 %v4_ab64 to i16*
  store i16 %v1_ab60, i16* %v5_ab64, align 2
  br label %dec_label_pc_a9e0

dec_label_pc_ab6c:                                ; preds = %dec_label_pc_a9e0, %dec_label_pc_a970
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ab70 = call i32 @function_fcbc(i32* null)
  store i32 %v2_ab70, i32* %r0.global-to-local, align 4
  store i32 %v2_a694, i32* %r3.global-to-local, align 4
  %v9_ab78 = icmp eq i32 %v2_a694, %v2_ab70
  store i1 %v9_ab78, i1* %cpsr_z.global-to-local, align 1
  %v6_ab7c = icmp slt i32 %v2_a694, %v2_ab70
  br i1 %v6_ab7c, label %dec_label_pc_ab80, label %dec_label_pc_ab6c.dec_label_pc_a970_crit_edge

dec_label_pc_ab6c.dec_label_pc_a970_crit_edge:    ; preds = %dec_label_pc_ab6c
  %v0_a974.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_a970

dec_label_pc_ab80:                                ; preds = %dec_label_pc_ab6c, %dec_label_pc_a4c4, %dec_label_pc_ab8c
  %v1_ab88 = phi i32 [ %v3_a6a8, %dec_label_pc_a4c4 ], [ %v1_ab90, %dec_label_pc_ab8c ], [ %v2_ab70, %dec_label_pc_ab6c ]
  store i32 %v3_a4c4, i32* %r4.global-to-local, align 4
  store i32 %v24_a4c4, i32* %fp.global-to-local, align 4
  store i32 %v27_a4c4, i32* %lr.global-to-local, align 4
  ret i32 %v1_ab88

dec_label_pc_ab8c:                                ; preds = %dec_label_pc_a6b8
  %v0_ab8c = load i32, i32* @r8, align 4
  store i32 %v0_ab8c, i32* %r0.global-to-local, align 4
  %v1_ab90 = call i32 @function_10008(i32 %v0_ab8c)
  store i32 %v1_ab90, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ab80

; uselistorder directives
  uselistorder i32 %v1_ab90, { 1, 0 }
  uselistorder i32 %v0_ab60, { 1, 0 }
  uselistorder i32 %v0_ab28, { 1, 0 }
  uselistorder i32 %v0_ab14, { 1, 0 }
  uselistorder i32 %v0_ab00, { 1, 0 }
  uselistorder i32 %v1_aaf4, { 1, 2, 0 }
  uselistorder i32 %v0_aa98, { 1, 2, 0, 3 }
  uselistorder i32 %v1_aa54, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_aa20, { 1, 0 }
  uselistorder i32 %v4_aa10, { 1, 0 }
  uselistorder i1 %v3_a9a0, { 1, 0 }
  uselistorder i1 %v7_a98c, { 2, 1, 0 }
  uselistorder i32 %v2_a960, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a7c8, { 1, 2, 0 }
  uselistorder i32 %v1_a78c, { 2, 1, 0 }
  uselistorder i32 %v1_a788, { 2, 0, 1 }
  uselistorder i32 %v1_a784, { 2, 0, 1 }
  uselistorder i32 %v1_a780, { 2, 0, 1 }
  uselistorder i32 %v1_a77c, { 2, 0, 1 }
  uselistorder i32 %v3_a704, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_a700, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_a6f4, { 1, 0, 2 }
  uselistorder i1 %v7_a6d8, { 1, 0 }
  uselistorder i1 %v7_a6ac, { 1, 0 }
  uselistorder i32 %v3_a6a8, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_a694, { 2, 1, 0 }
  uselistorder i32 %v6_a684, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v6_a5d8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_a5c0, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v1_a54c, { 1, 0 }
  uselistorder i32 %v6_a544, { 1, 0 }
  uselistorder i32 %v7_a52c, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 12, 5, 6, 7, 8, 9, 10, 11, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 9, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 39, 38, 41, 40, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 6, 7, 5, 8, 10, 11, 9, 12, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 33, 34, 35, 37, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 16, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 247, { 1, 2, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ab80, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ab60, { 1, 0 }
  uselistorder label %dec_label_pc_a9e0, { 2, 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ab9c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ab9c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  store i32 %arg2, i32* @fp, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* @r4, align 4
  store i32 %arg5, i32* @r5, align 4
  store i32 %arg3, i32* %stack_var_-80, align 4
  %v2_abc0 = call i32 @function_10eec(i32 %arg2, i32 4)
  %v0_abcc = load i32, i32* @fp, align 4
  store i32 %v0_abcc, i32* %r0.global-to-local, align 4
  %v2_abd0 = call i32 @function_10eec(i32 %v0_abcc, i32 4)
  store i32 65535, i32* @r6, align 4
  %v0_abdc = load i32, i32* @r5, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_abd0, i32* @sb, align 4
  %v0_abec = load i32, i32* @r4, align 4
  store i32 %v0_abec, i32* %r0.global-to-local, align 4
  %v5_abf0 = inttoptr i32 %v0_abdc to i32*
  %v6_abf0 = call i32 @function_8258(i32 %v0_abec, i32* %v5_abf0, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_abf4 = load i32, i32* @r5, align 4
  %v0_ac00 = load i32, i32* @r6, align 4
  store i32 %v0_ac00, i32* %r3.global-to-local, align 4
  %v0_ac04 = load i32, i32* @r4, align 4
  store i32 %v0_ac04, i32* %r0.global-to-local, align 4
  %v3_ac08 = urem i32 %v6_abf0, 65536
  store i32 %v3_ac08, i32* @r8, align 4
  %v5_ac0c = inttoptr i32 %v0_abf4 to i32*
  %v6_ac0c = call i32 @function_8258(i32 %v0_ac04, i32* %v5_ac0c, i32 6, i32 %v0_ac00, i32 ptrtoint (i32* @0 to i32))
  %v0_ac10 = load i32, i32* @r5, align 4
  %v3_ac14 = mul i32 %v6_ac0c, 65536
  store i32 %v3_ac14, i32* @sl, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_ac20 = load i32, i32* @r4, align 4
  store i32 %v0_ac20, i32* %r0.global-to-local, align 4
  %v5_ac24 = inttoptr i32 %v0_ac10 to i32*
  %v6_ac24 = call i32 @function_8258(i32 %v0_ac20, i32* %v5_ac24, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r3.global-to-local, align 4
  %v3_ac34 = urem i32 %v6_ac24, 65536
  %v0_ac38 = load i32, i32* @r5, align 4
  %v0_ac3c = load i32, i32* @r4, align 4
  store i32 %v0_ac3c, i32* %r0.global-to-local, align 4
  %v5_ac44 = inttoptr i32 %v0_ac38 to i32*
  %v6_ac44 = call i32 @function_8258(i32 %v0_ac3c, i32* %v5_ac44, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_ac50 = urem i32 %v6_ac44, 256
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v2_ac6c = call i32 @function_fcbc(i32* null)
  store i32 %v2_ac6c, i32* %r0.global-to-local, align 4
  %v0_ac70 = load i32, i32* @sl, align 4
  %v3_ac70 = udiv i32 %v0_ac70, 65536
  %v1_ac74 = load i32, i32* @r6, align 4
  %v9_ac74 = icmp eq i32 %v3_ac70, %v1_ac74
  br i1 %v9_ac74, label %dec_label_pc_ae48, label %bb

bb:                                               ; preds = %dec_label_pc_ab9c
  %v4_ac7c = udiv i32 %v0_ac70, 16777216
  store i32 %v4_ac7c, i32* %r3.global-to-local, align 4
  %v1_ac80 = load i32, i32* @r7, align 4
  %v2_ac80 = add i32 %v1_ac80, %v2_ac6c
  store i32 %v2_ac80, i32* %r0.global-to-local, align 4
  %v2_ac78 = mul nuw nsw i32 %v3_ac70, 256
  %v5_ac84 = and i32 %v2_ac78, 65280
  %v6_ac84 = or i32 %v5_ac84, %v4_ac7c
  br label %dec_label_pc_ac94

dec_label_pc_ac94:                                ; preds = %bb, %dec_label_pc_ae48
  %v0_ac888 = phi i32 [ %v2_ac8011, %dec_label_pc_ae48 ], [ %v2_ac80, %bb ]
  %stack_var_-72.1 = phi i32 [ %v3_ae50, %dec_label_pc_ae48 ], [ %v6_ac84, %bb ]
  %v0_ac94 = load i32, i32* @fp, align 4
  %v2_ac94 = icmp eq i32 %v0_ac94, 0
  br i1 %v2_ac94, label %dec_label_pc_adcc, label %dec_label_pc_ac9c

dec_label_pc_ac9c:                                ; preds = %dec_label_pc_ac94
  store i32 0, i32* @sl, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  %v2_acc8 = ptrtoint i32* %stack_var_-56 to i32
  %sext = mul i32 %stack_var_-72.1, 65536
  %v4_acf0 = sdiv i32 %sext, 65536
  br label %dec_label_pc_ad1c

dec_label_pc_acac:                                ; preds = %.thread24, %dec_label_pc_ad58
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_acb8 = call i32 @function_10384(i32 2, i32 2, i32 17)
  store i32 %v3_acb8, i32* %r0.global-to-local, align 4
  %v7_acbc = icmp eq i32 %v3_acb8, -1
  %v0_acc0 = load i32, i32* @sl, align 4
  %v1_acc0 = add i32 %v0_acc0, 1
  store i32 %v1_acc0, i32* @sl, align 4
  %v0_acc4 = load i32, i32* @r7, align 4
  %v1_acc4 = add i32 %v0_acc4, 24
  store i32 %v1_acc4, i32* @r7, align 4
  %v1_acd0 = load i32, i32* @r6, align 4
  %v2_acd0 = load i32, i32* @sb, align 4
  %v3_acd0 = add i32 %v2_acd0, %v1_acd0
  %v4_acd0 = inttoptr i32 %v3_acd0 to i32*
  store i32 %v3_acb8, i32* %v4_acd0, align 4
  br i1 %v7_acbc, label %dec_label_pc_adf0.loopexit12, label %dec_label_pc_acd8

dec_label_pc_acd8:                                ; preds = %dec_label_pc_acac
  store i32 2, i32* %stack_var_-56, align 4
  store i32 %stack_var_-72.1, i32* %r3.global-to-local, align 4
  %v0_acf0 = load i32, i32* %r0.global-to-local, align 4
  %v6_acf0 = call i32 @function_10134(i32 %v0_acf0, i32 %v2_acc8, i32 16, i32 %v4_acf0, i32 2)
  store i32 %v6_acf0, i32* %r0.global-to-local, align 4
  %v0_acf4 = load i32, i32* @r5, align 4
  %v1_acf4 = add i32 %v0_acf4, 20
  %v2_acf4 = inttoptr i32 %v1_acf4 to i8*
  %v3_acf4 = load i8, i8* %v2_acf4, align 1
  %v4_acf4 = zext i8 %v3_acf4 to i32
  store i32 %v4_acf4, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_acf4, 32
  br i1 %tmp, label %dec_label_pc_ad6c, label %dec_label_pc_ad00

dec_label_pc_ad00:                                ; preds = %dec_label_pc_acd8
  %v0_ad00 = load i32, i32* @r6, align 4
  %v1_ad00 = load i32, i32* @sb, align 4
  %v2_ad00 = add i32 %v1_ad00, %v0_ad00
  %v3_ad00 = inttoptr i32 %v2_ad00 to i32*
  %v4_ad00 = load i32, i32* %v3_ad00, align 4
  store i32 %v4_ad00, i32* %r0.global-to-local, align 4
  %v3_ad0c = call i32 @function_1016c(i32 %v4_ad00, i32 %v0_acf4, i32 16)
  store i32 %v3_ad0c, i32* %r0.global-to-local, align 4
  %v0_ad10 = load i32, i32* @sl, align 4
  %v1_ad10 = load i32, i32* @fp, align 4
  %v9_ad10 = icmp eq i32 %v0_ad10, %v1_ad10
  %v0_ad14 = load i32, i32* @r6, align 4
  %v1_ad14 = add i32 %v0_ad14, 4
  store i32 %v1_ad14, i32* @r6, align 4
  br i1 %v9_ad10, label %dec_label_pc_adcc, label %dec_label_pc_ad1c

dec_label_pc_ad1c:                                ; preds = %dec_label_pc_ad6c, %dec_label_pc_ad00, %dec_label_pc_ac9c
  store i32 65535, i32* @r4, align 4
  store i32 65535, i32* %r0.global-to-local, align 4
  %v2_ad2c = call i32 @function_10eec(i32 65535, i32 1)
  store i32 %v2_ad2c, i32* %r0.global-to-local, align 4
  %v0_ad30 = load i32, i32* @r8, align 4
  %v3_ad34 = udiv i32 %v0_ad30, 256
  %v1_ad30 = mul i32 %v0_ad30, 256
  %v4_ad38 = and i32 %v1_ad30, 65280
  %v5_ad38 = or i32 %v4_ad38, %v3_ad34
  store i32 %v5_ad38, i32* %r3.global-to-local, align 4
  %v2_ad3c = load i32, i32* %stack_var_-80, align 4
  %v1_ad40 = load i32, i32* @r7, align 4
  %v2_ad40 = add i32 %v1_ad40, %v2_ad3c
  store i32 %v2_ad40, i32* @r5, align 4
  %v1_ad48 = load i32, i32* @r4, align 4
  %v9_ad48 = icmp eq i32 %v0_ad30, %v1_ad48
  %v1_ad4c = load i32, i32* @r6, align 4
  %v3_ad4c = add i32 %v1_ad4c, %v2_abc0
  %v4_ad4c = inttoptr i32 %v3_ad4c to i32*
  store i32 %v2_ad2c, i32* %v4_ad4c, align 4
  br i1 %v9_ad48, label %dec_label_pc_ad58, label %.thread24

.thread24:                                        ; preds = %dec_label_pc_ad1c
  %v1_ad5025 = load i32, i32* %r3.global-to-local, align 4
  %v2_ad5026 = trunc i32 %v1_ad5025 to i16
  %v3_ad5027 = load i32, i32* @r5, align 4
  %v4_ad5028 = add i32 %v3_ad5027, 2
  %v5_ad5029 = inttoptr i32 %v4_ad5028 to i16*
  store i16 %v2_ad5026, i16* %v5_ad5029, align 2
  br label %dec_label_pc_acac

dec_label_pc_ad58:                                ; preds = %dec_label_pc_ad1c
  %v0_ad58 = call i32 @function_cad8()
  %v1_ad58 = trunc i32 %v0_ad58 to i16
  store i32 %v0_ad58, i32* %r0.global-to-local, align 4
  %v2_ad5c = load i32, i32* %stack_var_-80, align 4
  store i32 %v2_ad5c, i32* %r3.global-to-local, align 4
  %v1_ad60 = load i32, i32* @r7, align 4
  %v2_ad60 = add i32 %v1_ad60, %v2_ad5c
  store i32 %v2_ad60, i32* @r5, align 4
  %v4_ad64 = add i32 %v2_ad60, 2
  %v5_ad64 = inttoptr i32 %v4_ad64 to i16*
  store i16 %v1_ad58, i16* %v5_ad64, align 2
  br label %dec_label_pc_acac

dec_label_pc_ad6c:                                ; preds = %dec_label_pc_acd8
  %v1_ad6c = add i32 %v0_acf4, 16
  %v2_ad6c = inttoptr i32 %v1_ad6c to i32*
  %v3_ad6c = load i32, i32* %v2_ad6c, align 4
  store i32 %v3_ad6c, i32* @r4, align 4
  %v0_ad70 = call i32 @function_cad8()
  store i32 %v0_ad70, i32* %r0.global-to-local, align 4
  %v0_ad74 = load i32, i32* @r4, align 4
  %v1_ad80 = and i32 %v0_ad74, 65280
  store i32 %v1_ad80, i32* %r3.global-to-local, align 4
  %v0_ad84 = load i32, i32* @r5, align 4
  %v1_ad84 = add i32 %v0_ad84, 20
  %v2_ad84 = inttoptr i32 %v1_ad84 to i8*
  %v3_ad84 = load i8, i8* %v2_ad84, align 1
  %v4_ad84 = zext i8 %v3_ad84 to i32
  %v5_ad8c = call i32 @llvm.bswap.i32(i32 %v0_ad74)
  %v7_ad90 = lshr i32 %v0_ad70, %v4_ad84
  %v8_ad90 = add i32 %v7_ad90, %v5_ad8c
  %v1_ad94 = and i32 %v8_ad90, 16711680
  store i32 %v1_ad94, i32* %r0.global-to-local, align 4
  %v5_ada8 = call i32 @llvm.bswap.i32(i32 %v8_ad90)
  store i32 %v5_ada8, i32* %r3.global-to-local, align 4
  %v2_adac = add i32 %v0_ad84, 4
  %v3_adac = inttoptr i32 %v2_adac to i32*
  store i32 %v5_ada8, i32* %v3_adac, align 4
  %v0_adb0 = load i32, i32* @r5, align 4
  %v0_adb4 = load i32, i32* @r6, align 4
  %v1_adb4 = load i32, i32* @sb, align 4
  %v2_adb4 = add i32 %v1_adb4, %v0_adb4
  %v3_adb4 = inttoptr i32 %v2_adb4 to i32*
  %v4_adb4 = load i32, i32* %v3_adb4, align 4
  store i32 %v4_adb4, i32* %r0.global-to-local, align 4
  %v3_adbc = call i32 @function_1016c(i32 %v4_adb4, i32 %v0_adb0, i32 16)
  store i32 %v3_adbc, i32* %r0.global-to-local, align 4
  %v0_adc0 = load i32, i32* @sl, align 4
  %v1_adc0 = load i32, i32* @fp, align 4
  %v9_adc0 = icmp eq i32 %v0_adc0, %v1_adc0
  %v0_adc4 = load i32, i32* @r6, align 4
  %v1_adc4 = add i32 %v0_adc4, 4
  store i32 %v1_adc4, i32* @r6, align 4
  br i1 %v9_adc0, label %dec_label_pc_adcc, label %dec_label_pc_ad1c

dec_label_pc_adcc:                                ; preds = %dec_label_pc_ad6c, %dec_label_pc_ad00, %dec_label_pc_ac94
  %v1_add019 = phi i32 [ 0, %dec_label_pc_ac94 ], [ %v0_adc0, %dec_label_pc_ad6c ], [ %v0_ad10, %dec_label_pc_ad00 ]
  store i32 0, i32* @r5, align 4
  %v2_ae04 = icmp eq i32 %v1_ac50, 0
  br label %dec_label_pc_add0

dec_label_pc_add0:                                ; preds = %dec_label_pc_add0.backedge, %dec_label_pc_adcc
  %v1_add0 = phi i32 [ %v1_add0.pre, %dec_label_pc_add0.backedge ], [ %v1_add019, %dec_label_pc_adcc ]
  %v1_ae08 = phi i32 [ %v0_add017, %dec_label_pc_add0.backedge ], [ 0, %dec_label_pc_adcc ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v5_add8 = icmp slt i32 %v1_ae08, %v1_add0
  br i1 %v5_add8, label %dec_label_pc_adfc, label %dec_label_pc_addc

dec_label_pc_addc:                                ; preds = %dec_label_pc_add0
  %v2_addc = call i32 @function_fcbc(i32* null)
  store i32 %v2_addc, i32* %r0.global-to-local, align 4
  store i32 %v0_ac888, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v6_adec = icmp slt i32 %v0_ac888, %v2_addc
  br i1 %v6_adec, label %dec_label_pc_adf0, label %dec_label_pc_add0.backedge

dec_label_pc_adf0.loopexit12:                     ; preds = %dec_label_pc_acac
  %v1_adf8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_adf0

dec_label_pc_adf0:                                ; preds = %dec_label_pc_addc, %dec_label_pc_adf0.loopexit12
  %v1_adf8 = phi i32 [ %v1_adf8.pre, %dec_label_pc_adf0.loopexit12 ], [ %v2_addc, %dec_label_pc_addc ]
  ret i32 %v1_adf8

dec_label_pc_adfc:                                ; preds = %dec_label_pc_add0
  store i32 %v2_abc0, i32* %r3.global-to-local, align 4
  %v4_ae08 = mul i32 %v1_ae08, 4
  %v5_ae08 = add i32 %v4_ae08, %v2_abc0
  %v6_ae08 = inttoptr i32 %v5_ae08 to i32*
  %v7_ae08 = load i32, i32* %v6_ae08, align 4
  store i32 %v7_ae08, i32* @r4, align 4
  br i1 %v2_ae04, label %dec_label_pc_ae10, label %dec_label_pc_ae2c

dec_label_pc_ae10:                                ; preds = %dec_label_pc_adfc, %dec_label_pc_ae2c
  %v0_ae14 = phi i32 [ %v7_ae08, %dec_label_pc_adfc ], [ %v0_ae14.pre, %dec_label_pc_ae2c ]
  %v1_ae10 = phi i32 [ %v1_ae08, %dec_label_pc_adfc ], [ %v1_ae10.pre, %dec_label_pc_ae2c ]
  %v0_ae10 = load i32, i32* @sb, align 4
  %v4_ae10 = mul i32 %v1_ae10, 4
  %v5_ae10 = add i32 %v4_ae10, %v0_ae10
  %v6_ae10 = inttoptr i32 %v5_ae10 to i32*
  %v7_ae10 = load i32, i32* %v6_ae10, align 4
  store i32 %v7_ae10, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ae20 = call i32 @function_102c8(i32 %v7_ae10, i32 %v0_ae14, i32 %v3_ac34, i32 16384)
  store i32 %v4_ae20, i32* %r0.global-to-local, align 4
  %v0_ae24 = load i32, i32* @r5, align 4
  %v1_ae24 = add i32 %v0_ae24, 1
  store i32 %v1_ae24, i32* @r5, align 4
  br label %dec_label_pc_add0.backedge

dec_label_pc_add0.backedge:                       ; preds = %dec_label_pc_ae10, %dec_label_pc_addc
  %v0_add017 = phi i32 [ %v1_ae24, %dec_label_pc_ae10 ], [ 0, %dec_label_pc_addc ]
  %v1_add0.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_add0

dec_label_pc_ae2c:                                ; preds = %dec_label_pc_adfc
  store i32 %v7_ae08, i32* %r0.global-to-local, align 4
  %v2_ae34 = call i32 @function_cb9c(i32 %v7_ae08, i32 %v3_ac34)
  store i32 %v2_ae34, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ae40 = load i32, i32* @r4, align 4
  %v4_ae40 = add i32 %v3_ae40, %v3_ac34
  %v5_ae40 = inttoptr i32 %v4_ae40 to i8*
  store i8 0, i8* %v5_ae40, align 1
  %v1_ae10.pre = load i32, i32* @r5, align 4
  %v0_ae14.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ae10

dec_label_pc_ae48:                                ; preds = %dec_label_pc_ab9c
  %v1_ac8010 = load i32, i32* @r7, align 4
  %v2_ac8011 = add i32 %v1_ac8010, %v2_ac6c
  store i32 %v2_ac8011, i32* %r0.global-to-local, align 4
  %v0_ae48 = call i32 @function_cad8()
  %v3_ae50 = urem i32 %v0_ae48, 65536
  store i32 %v3_ae50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ac94

; uselistorder directives
  uselistorder i32 %v2_ac8011, { 1, 0 }
  uselistorder i32 %v7_ae08, { 2, 1, 0, 3 }
  uselistorder i32 %v5_ada8, { 1, 0 }
  uselistorder i32 %v0_ad58, { 1, 0 }
  uselistorder i32 %v0_ad30, { 2, 0, 1 }
  uselistorder i32 %v3_acb8, { 1, 0, 2 }
  uselistorder i32 %stack_var_-72.1, { 1, 0 }
  uselistorder i32 %v0_ac888, { 1, 0 }
  uselistorder i32 %v4_ac7c, { 1, 0 }
  uselistorder i32 %v3_ac34, { 2, 1, 0 }
  uselistorder i32 %v2_abc0, { 0, 2, 1 }
  uselistorder i32* %stack_var_-56, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 10, 11, 8, 9, 12, 14, 13, 15, 16, 17, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 5, 4, 31, 6, 18, 8, 7, 11, 9, 10, 12, 13, 22, 20, 15, 14, 1, 17, 19, 16, 21, 24, 23, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ae10, { 1, 0 }
  uselistorder label %dec_label_pc_adf0, { 1, 0 }
  uselistorder label %dec_label_pc_acac, { 1, 0 }
  uselistorder label %dec_label_pc_ac94, { 1, 0 }
}

define i32 @function_ae5c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_ae5c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_ae5c = load i32, i32* @lr, align 4
  store i32 0, i32* @r8, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_ae88 = call i32 @function_10eec(i32 %arg2, i32 4)
  %v0_ae8c = load i32, i32* @r4, align 4
  store i32 %v0_ae8c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ae98 = load i32, i32* @r8, align 4
  store i32 %v0_ae98, i32* %r3.global-to-local, align 4
  %v0_ae9c = load i32, i32* @r5, align 4
  store i32 %v0_ae9c, i32* %r0.global-to-local, align 4
  %v5_aea0 = inttoptr i32 %v0_ae8c to i32*
  %v6_aea0 = call i32 @function_8258(i32 %v0_ae9c, i32* %v5_aea0, i32 2, i32 %v0_ae98, i32 %v2_ae88)
  %v1_aeac = urem i32 %v6_aea0, 256
  store i32 %v1_aeac, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_aeb8 = load i32, i32* @r4, align 4
  store i32 %v0_aeb8, i32* %r1.global-to-local, align 4
  %v0_aebc = load i32, i32* @r5, align 4
  store i32 %v0_aebc, i32* %r0.global-to-local, align 4
  %v5_aec0 = trunc i32 %v6_aea0 to i8
  %v6_aec4 = inttoptr i32 %v0_aeb8 to i32*
  %v7_aec4 = call i32 @function_8258(i32 %v0_aebc, i32* %v6_aec4, i32 3, i32 65535, i32 %v6_aea0)
  %v0_aec8 = load i32, i32* @r4, align 4
  store i32 %v0_aec8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_aed8 = load i32, i32* @r5, align 4
  store i32 %v0_aed8, i32* %r0.global-to-local, align 4
  %v5_aedc = inttoptr i32 %v0_aec8 to i32*
  %v6_aedc = call i32 @function_8258(i32 %v0_aed8, i32* %v5_aedc, i32 4, i32 64, i32 %v7_aec4)
  %v1_aee4 = urem i32 %v6_aedc, 256
  store i32 %v1_aee4, i32* %ip.global-to-local, align 4
  %v0_aee8 = load i32, i32* @r4, align 4
  store i32 %v0_aee8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_aef0 = load i32, i32* @r8, align 4
  store i32 %v0_aef0, i32* %r3.global-to-local, align 4
  %v0_aef4 = load i32, i32* @r5, align 4
  store i32 %v0_aef4, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_aedc, 16777216
  %v5_aefc = sdiv i32 %sext, 16777216
  %v6_aefc = inttoptr i32 %v0_aee8 to i32*
  %v7_aefc = call i32 @function_8258(i32 %v0_aef4, i32* %v6_aefc, i32 5, i32 %v0_aef0, i32 %v5_aefc)
  %v1_af08 = urem i32 %v7_aefc, 256
  store i32 %v1_af08, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_af14 = load i32, i32* @r4, align 4
  store i32 %v0_af14, i32* %r1.global-to-local, align 4
  %v0_af18 = load i32, i32* @r5, align 4
  store i32 %v0_af18, i32* %r0.global-to-local, align 4
  %v5_af20 = inttoptr i32 %v0_af14 to i32*
  %v6_af20 = call i32 @function_8258(i32 %v0_af18, i32* %v5_af20, i32 6, i32 65535, i32 %v1_af08)
  %v0_af2c = load i32, i32* @r4, align 4
  store i32 %v0_af2c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_af38 = load i32, i32* @r5, align 4
  store i32 %v0_af38, i32* %r0.global-to-local, align 4
  %v5_af3c = inttoptr i32 %v0_af2c to i32*
  %v6_af3c = call i32 @function_8258(i32 %v0_af38, i32* %v5_af3c, i32 7, i32 65535, i32 %v6_af20)
  %v0_af40 = load i32, i32* @r4, align 4
  store i32 %v0_af40, i32* %r1.global-to-local, align 4
  %v0_af48 = load i32, i32* @r8, align 4
  store i32 %v0_af48, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_af50 = load i32, i32* @r5, align 4
  store i32 %v0_af50, i32* %r0.global-to-local, align 4
  %v5_af54 = inttoptr i32 %v0_af40 to i32*
  %v6_af54 = call i32 @function_8258(i32 %v0_af50, i32* %v5_af54, i32 %v0_af48, i32 512, i32 %v6_af3c)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_af60 = load i32, i32* @r4, align 4
  store i32 %v0_af60, i32* %r1.global-to-local, align 4
  store i32 %v6_af54, i32* @sl, align 4
  %v0_af68 = load i32, i32* @r5, align 4
  store i32 %v0_af68, i32* %r0.global-to-local, align 4
  %v5_af6c = inttoptr i32 %v0_af60 to i32*
  %v6_af6c = call i32 @function_8258(i32 %v0_af68, i32* %v5_af6c, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_af78 = load i32, i32* @global_var_202d4.42, align 4
  store i32 %v2_af78, i32* %r3.global-to-local, align 4
  %v1_af7c = urem i32 %v6_af6c, 256
  store i32 %v1_af7c, i32* %ip.global-to-local, align 4
  %v0_af80 = load i32, i32* @r4, align 4
  store i32 %v0_af80, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_af88 = load i32, i32* @r5, align 4
  store i32 %v0_af88, i32* %r0.global-to-local, align 4
  %v5_af90 = inttoptr i32 %v0_af80 to i32*
  %v6_af90 = call i32 @function_8258(i32 %v0_af88, i32* %v5_af90, i32 24, i32 %v2_af78, i32 %v1_af7c)
  store i32 %v6_af90, i32* @sb, align 4
  %v0_af98 = load i32, i32* @r8, align 4
  store i32 %v0_af98, i32* %r0.global-to-local, align 4
  %v1_af9c = inttoptr i32 %v0_af98 to i32*
  %v2_af9c = call i32 @function_fcbc(i32* %v1_af9c)
  %v1_afa0 = load i32, i32* @r6, align 4
  %v2_afa0 = add i32 %v1_afa0, %v2_af9c
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_afb4 = call i32 @function_10384(i32 2, i32 3, i32 17)
  store i32 %v3_afb4, i32* %r0.global-to-local, align 4
  %v7_afb8 = icmp eq i32 %v3_afb4, -1
  store i32 %v3_afb4, i32* @fp, align 4
  br i1 %v7_afb8, label %dec_label_pc_b40c, label %dec_label_pc_afc4

dec_label_pc_afc4:                                ; preds = %dec_label_pc_ae5c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_afcc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_afcc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_afd4 = load i32, i32* @r8, align 4
  store i32 %v0_afd4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_afe0 = call i32 @function_10340(i32 %v3_afb4, i32 %v0_afd4, i32 3, i32 %v6_afcc, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_afe0, i32* %r0.global-to-local, align 4
  %v7_afe4 = icmp eq i32 %v5_afe0, -1
  br i1 %v7_afe4, label %dec_label_pc_b418, label %dec_label_pc_afec

dec_label_pc_afec:                                ; preds = %dec_label_pc_afc4
  %v0_afec = load i32, i32* @sl, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_aff8 = urem i32 %v0_afec, 65536
  %v3_affc = icmp ugt i32 %v3_aff8, 1459
  br i1 %v3_affc, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_afec
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_afec, %bb
  %storemerge = phi i32 [ 1460, %bb ], [ %v3_aff8, %dec_label_pc_afec ]
  %v0_b008 = phi i32 [ 1460, %bb ], [ %v3_aff8, %dec_label_pc_afec ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v6_af20, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v3_b01c = mul i32 %v6_af3c, 65536
  store i32 %v3_b01c, i32* %r2.global-to-local, align 4
  %v3_b024 = urem i32 %v7_aec4, 65536
  %v3_b028 = urem i32 %v6_af20, 65536
  store i32 %v3_b028, i32* %ip.global-to-local, align 4
  %v3_b02c = urem i32 %v6_af3c, 65536
  store i32 %v3_b02c, i32* %r0.global-to-local, align 4
  %v2_b030 = icmp eq i32 %arg2, 0
  %v0_b038 = load i32, i32* @r8, align 4
  store i32 %v0_b038, i32* %stack_var_-44, align 4
  br i1 %v2_b030, label %.dec_label_pc_b164.preheader_crit_edge, label %dec_label_pc_b04c

.dec_label_pc_b164.preheader_crit_edge:           ; preds = %bb41
  %.pre = add nuw nsw i32 %v0_b008, 8
  %.pre10 = add nuw nsw i32 %v0_b008, 28
  br label %dec_label_pc_b164.preheader

dec_label_pc_b04c:                                ; preds = %bb41
  %v1_b054 = add nuw nsw i32 %v0_b008, 28
  %v1_b058 = add nuw nsw i32 %v0_b008, 8
  %tmp42 = mul nuw nsw i32 %v3_b028, 256
  %v3_b068 = and i32 %tmp42, 65280
  %v3_b070 = mul i32 %v1_b054, 65536
  store i32 %v3_b070, i32* @lr, align 4
  %tmp43 = udiv i32 %v6_af20, 256
  %v4_b078 = urem i32 %tmp43, 256
  %v5_b078 = or i32 %v3_b068, %v4_b078
  store i32 %v5_b078, i32* @sl, align 4
  store i32 %v3_b01c, i32* %r1.global-to-local, align 4
  %tmp44 = mul i32 %v6_af3c, 256
  %v3_b090 = and i32 %tmp44, 65280
  %v2_b094 = icmp eq i32 %v1_af08, 0
  %tmp45 = mul nuw nsw i32 %v1_b054, 256
  %v3_b098 = and i32 %tmp45, 65280
  store i32 %v3_b098, i32* %r3.global-to-local, align 4
  %tmp46 = mul i32 %v7_aec4, 256
  %v3_b09c = and i32 %tmp46, 65280
  store i32 %v3_b09c, i32* %r2.global-to-local, align 4
  %tmp47 = mul nuw nsw i32 %v1_b058, 256
  %v3_b0a0 = and i32 %tmp47, 65280
  store i32 %v3_b0a0, i32* %ip.global-to-local, align 4
  %tmp48 = udiv i32 %v6_af3c, 256
  %v4_b0a4 = urem i32 %tmp48, 256
  %v5_b0a4 = or i32 %v4_b0a4, %v3_b090
  store i32 %v5_b0a4, i32* %r0.global-to-local, align 4
  %tmp49 = udiv i32 %v7_aec4, 256
  %v4_b0a8 = urem i32 %tmp49, 256
  %v5_b0a8 = or i32 %v4_b0a8, %v3_b09c
  store i32 %v5_b0a8, i32* @r8, align 4
  %tmp50 = udiv i32 %v1_b054, 256
  %v4_b0ac = urem i32 %tmp50, 256
  %v5_b0ac = or i32 %v4_b0ac, %v3_b098
  store i32 %v5_b0ac, i32* @r6, align 4
  %tmp51 = udiv i32 %v1_b058, 256
  %v4_b0b0 = urem i32 %tmp51, 256
  %v5_b0b0 = or i32 %v4_b0b0, %v3_b0a0
  store i32 %v5_b0b0, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %sext11 = mul nuw i32 %v5_b0a4, 65536
  %v4_b138 = sdiv i32 %sext11, 65536
  %v1_b11c = trunc i32 %v5_aefc to i8
  br i1 %v2_b094, label %dec_label_pc_b0c0, label %dec_label_pc_b34c

dec_label_pc_b0c0:                                ; preds = %dec_label_pc_b04c, %dec_label_pc_b0c0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b0cc = call i32 @function_10eec(i32 1510, i32 1)
  store i32 %v2_b0cc, i32* %r0.global-to-local, align 4
  store i32 %v2_ae88, i32* %r2.global-to-local, align 4
  %v2_b0d8 = load i32, i32* @r4, align 4
  %v5_b0d8 = mul i32 %v2_b0d8, 4
  %v6_b0d8 = add i32 %v5_b0d8, %v2_ae88
  %v7_b0d8 = inttoptr i32 %v6_b0d8 to i32*
  store i32 %v2_b0cc, i32* %v7_b0d8, align 4
  %v3_b0dc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b0dc, i32* %r1.global-to-local, align 4
  %v0_b0e0 = load i32, i32* %r2.global-to-local, align 4
  %v4_b0e0 = mul i32 %v3_b0dc, 4
  %v5_b0e0 = add i32 %v0_b0e0, %v4_b0e0
  %v6_b0e0 = inttoptr i32 %v5_b0e0 to i32*
  %v7_b0e0 = load i32, i32* %v6_b0e0, align 4
  store i32 %v7_b0e0, i32* %r3.global-to-local, align 4
  %v1_b0e4 = inttoptr i32 %v7_b0e0 to i8*
  %v2_b0e4 = load i8, i8* %v1_b0e4, align 1
  %tmp = urem i8 %v2_b0e4, 16
  %v1_b0e8 = zext i8 %tmp to i32
  %v1_b0ec = or i32 %v1_b0e8, 64
  store i32 %v1_b0ec, i32* %r2.global-to-local, align 4
  %v1_b0f0 = trunc i32 %v1_b0ec to i8
  store i8 %v1_b0f0, i8* %v1_b0e4, align 1
  %v0_b0f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0f4 = inttoptr i32 %v0_b0f4 to i8*
  %v2_b0f4 = load i8, i8* %v1_b0f4, align 1
  %v1_b0f8 = and i8 %v2_b0f4, -16
  %v1_b0fc = or i8 %v1_b0f8, 5
  store i32 17, i32* %ip.global-to-local, align 4
  store i8 %v1_b0fc, i8* %v1_b0f4, align 1
  %v0_b108 = load i32, i32* %ip.global-to-local, align 4
  %v1_b108 = trunc i32 %v0_b108 to i8
  %v2_b108 = load i32, i32* %r3.global-to-local, align 4
  %v3_b108 = add i32 %v2_b108, 9
  %v4_b108 = inttoptr i32 %v3_b108 to i8*
  store i8 %v1_b108, i8* %v4_b108, align 1
  %v2_b110 = load i32, i32* %r3.global-to-local, align 4
  %v3_b110 = add i32 %v2_b110, 1
  %v4_b110 = inttoptr i32 %v3_b110 to i8*
  store i8 %v5_aec0, i8* %v4_b110, align 1
  %v0_b118 = load i32, i32* %r1.global-to-local, align 4
  %v3_b118 = mul i32 %v0_b118, 32
  store i32 %v3_b118, i32* %r0.global-to-local, align 4
  %v2_b11c = load i32, i32* %r3.global-to-local, align 4
  %v3_b11c = add i32 %v2_b11c, 8
  %v4_b11c = inttoptr i32 %v3_b11c to i8*
  store i8 %v1_b11c, i8* %v4_b11c, align 1
  %v0_b120 = load i32, i32* @sb, align 4
  %v1_b120 = load i32, i32* %r3.global-to-local, align 4
  %v2_b120 = add i32 %v1_b120, 12
  %v3_b120 = inttoptr i32 %v2_b120 to i32*
  store i32 %v0_b120, i32* %v3_b120, align 4
  %v0_b124 = load i32, i32* %r0.global-to-local, align 4
  %v1_b124 = load i32, i32* %r1.global-to-local, align 4
  %tmp53 = mul i32 %v1_b124, -8
  %v5_b124 = add i32 %v0_b124, %tmp53
  %v1_b128 = load i32, i32* @r7, align 4
  %v2_b128 = add i32 %v5_b124, %v1_b128
  store i32 %v2_b128, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v1_b130 = add i32 %v1_b124, 1
  store i32 %v1_b130, i32* @r4, align 4
  %v1_b134 = add i32 %v2_b128, 16
  %v2_b134 = inttoptr i32 %v1_b134 to i32*
  %v3_b134 = load i32, i32* %v2_b134, align 4
  store i32 %v3_b134, i32* %r2.global-to-local, align 4
  store i32 %v4_b138, i32* %r0.global-to-local, align 4
  %v0_b13c = load i32, i32* %r3.global-to-local, align 4
  %v1_b13c = add i32 %v0_b13c, 20
  store i32 %v1_b13c, i32* %r1.global-to-local, align 4
  %v0_b144 = load i32, i32* @r6, align 4
  %v1_b144 = trunc i32 %v0_b144 to i16
  %v3_b144 = add i32 %v0_b13c, 2
  %v4_b144 = inttoptr i32 %v3_b144 to i16*
  store i16 %v1_b144, i16* %v4_b144, align 2
  %v0_b148 = load i32, i32* @r8, align 4
  %v1_b148 = trunc i32 %v0_b148 to i16
  %v2_b148 = load i32, i32* %r3.global-to-local, align 4
  %v3_b148 = add i32 %v2_b148, 4
  %v4_b148 = inttoptr i32 %v3_b148 to i16*
  store i16 %v1_b148, i16* %v4_b148, align 2
  %v0_b14c = load i32, i32* %r2.global-to-local, align 4
  %v1_b14c = load i32, i32* %r3.global-to-local, align 4
  %v2_b14c = add i32 %v1_b14c, 16
  %v3_b14c = inttoptr i32 %v2_b14c to i32*
  store i32 %v0_b14c, i32* %v3_b14c, align 4
  %v0_b150 = load i32, i32* @sl, align 4
  %v1_b150 = trunc i32 %v0_b150 to i16
  %v2_b150 = load i32, i32* %r3.global-to-local, align 4
  %v3_b150 = add i32 %v2_b150, 20
  %v4_b150 = inttoptr i32 %v3_b150 to i16*
  store i16 %v1_b150, i16* %v4_b150, align 2
  %v0_b154 = load i32, i32* @r5, align 4
  %v1_b154 = trunc i32 %v0_b154 to i16
  %v2_b154 = load i32, i32* %r1.global-to-local, align 4
  %v3_b154 = add i32 %v2_b154, 4
  %v4_b154 = inttoptr i32 %v3_b154 to i16*
  store i16 %v1_b154, i16* %v4_b154, align 2
  %v0_b158 = load i32, i32* %r0.global-to-local, align 4
  %v1_b158 = trunc i32 %v0_b158 to i16
  %v2_b158 = load i32, i32* %r1.global-to-local, align 4
  %v3_b158 = add i32 %v2_b158, 2
  %v4_b158 = inttoptr i32 %v3_b158 to i16*
  store i16 %v1_b158, i16* %v4_b158, align 2
  %v0_b15c = load i32, i32* @r4, align 4
  store i32 %v0_b15c, i32* %stack_var_-44, align 4
  %v5_b160 = icmp slt i32 %v1_b130, %arg2
  br i1 %v5_b160, label %dec_label_pc_b0c0, label %dec_label_pc_b164.preheader

dec_label_pc_b164.preheader:                      ; preds = %dec_label_pc_b34c, %dec_label_pc_b0c0, %.dec_label_pc_b164.preheader_crit_edge
  %v1_b184.pre-phi = phi i32 [ %.pre10, %.dec_label_pc_b164.preheader_crit_edge ], [ %v1_b054, %dec_label_pc_b0c0 ], [ %v1_b054, %dec_label_pc_b34c ]
  %v1_b180.pre-phi = phi i32 [ %.pre, %.dec_label_pc_b164.preheader_crit_edge ], [ %v1_b058, %dec_label_pc_b0c0 ], [ %v1_b058, %dec_label_pc_b34c ]
  %v3_b2e4 = icmp eq i32 %v3_b024, 65535
  %v2_b320 = icmp eq i32 %v1_af7c, 0
  br label %dec_label_pc_b164

dec_label_pc_b164:                                ; preds = %dec_label_pc_b164.preheader, %dec_label_pc_b3f8
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b030, label %dec_label_pc_b3f8, label %dec_label_pc_b178

dec_label_pc_b178:                                ; preds = %dec_label_pc_b164
  store i32 %v0_b008, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v1_b180.pre-phi, i32* @sl, align 4
  store i32 %v1_b184.pre-phi, i32* @r8, align 4
  br label %dec_label_pc_b254

dec_label_pc_b18c:                                ; preds = %dec_label_pc_b254
  %v0_b18c = load i32, i32* @sb, align 4
  %v7_b18c = icmp eq i32 %v0_b18c, -1
  br i1 %v7_b18c, label %dec_label_pc_b2d4, label %dec_label_pc_b194

dec_label_pc_b194:                                ; preds = %dec_label_pc_b278, %dec_label_pc_b18c
  store i32 %v3_b024, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  br i1 %v3_b2e4, label %dec_label_pc_b2f0, label %dec_label_pc_b1a8

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_b2d4.dec_label_pc_b1a8_crit_edge, %dec_label_pc_b194
  %v1_b1ac = phi i32 [ %v1_b1ac.pre, %dec_label_pc_b2d4.dec_label_pc_b1a8_crit_edge ], [ 65535, %dec_label_pc_b194 ]
  store i32 %v3_b028, i32* %r0.global-to-local, align 4
  %v9_b1ac = icmp eq i32 %v3_b028, %v1_b1ac
  br i1 %v9_b1ac, label %dec_label_pc_b304, label %dec_label_pc_b1b4

dec_label_pc_b1b4:                                ; preds = %dec_label_pc_b2f0, %dec_label_pc_b1a8
  %v1_b1b8 = phi i32 [ %v1_b2fc, %dec_label_pc_b2f0 ], [ %v1_b1ac, %dec_label_pc_b1a8 ]
  store i32 %v3_b02c, i32* %r1.global-to-local, align 4
  %v9_b1b8 = icmp eq i32 %v3_b02c, %v1_b1b8
  br i1 %v9_b1b8, label %dec_label_pc_b318, label %dec_label_pc_b1c0

dec_label_pc_b1c0:                                ; preds = %dec_label_pc_b304, %dec_label_pc_b1b4
  store i32 %v1_af7c, i32* %r2.global-to-local, align 4
  br i1 %v2_b320, label %dec_label_pc_b1cc, label %dec_label_pc_b32c

dec_label_pc_b1cc:                                ; preds = %dec_label_pc_b1c0, %dec_label_pc_b318, %dec_label_pc_b32c
  %v2_b1d0 = load i32, i32* @r5, align 4
  %v3_b1d0 = add i32 %v2_b1d0, 10
  %v4_b1d0 = inttoptr i32 %v3_b1d0 to i16*
  store i16 0, i16* %v4_b1d0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b1d8 = load i32, i32* @r5, align 4
  store i32 %v0_b1d8, i32* @r0, align 4
  %v2_b1dc = call i32 @function_bf78(i32 %v0_b1d8, i32 20)
  %v3_b1dc = trunc i32 %v2_b1dc to i16
  store i32 %v2_b1dc, i32* %r0.global-to-local, align 4
  %v3_b1e0 = load i32, i32* @r5, align 4
  %v4_b1e0 = add i32 %v3_b1e0, 10
  %v5_b1e0 = inttoptr i32 %v4_b1e0 to i16*
  store i16 %v3_b1dc, i16* %v5_b1e0, align 2
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_b1e8 = load i32, i32* @r6, align 4
  %v3_b1e8 = add i32 %v2_b1e8, 6
  %v4_b1e8 = inttoptr i32 %v3_b1e8 to i16*
  store i16 0, i16* %v4_b1e8, align 2
  %v0_b1ec = load i32, i32* @r6, align 4
  %v1_b1ec = add i32 %v0_b1ec, 4
  %v2_b1ec = inttoptr i32 %v1_b1ec to i16*
  %v3_b1ec = load i16, i16* %v2_b1ec, align 2
  %v4_b1ec = zext i16 %v3_b1ec to i32
  store i32 %v4_b1ec, i32* %r2.global-to-local, align 4
  store i32 %v0_b1ec, i32* @r1, align 4
  %v0_b1f4 = load i32, i32* @sl, align 4
  store i32 %v0_b1f4, i32* %r3.global-to-local, align 4
  %v0_b1f8 = load i32, i32* @r5, align 4
  store i32 %v0_b1f8, i32* %r0.global-to-local, align 4
  %v4_b1fc = call i32 @function_bfc8(i32 %v0_b1f8, i32 %v0_b1ec, i32 %v4_b1ec, i32 %v0_b1f4)
  %v5_b1fc = trunc i32 %v4_b1fc to i16
  store i32 %v4_b1fc, i32* %r0.global-to-local, align 4
  %v3_b200 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b200, i32* %r3.global-to-local, align 4
  %v3_b204 = mul i32 %v3_b200, 32
  store i32 %v3_b204, i32* %lr.global-to-local, align 4
  %v3_b208 = load i32, i32* @r6, align 4
  %v4_b208 = add i32 %v3_b208, 6
  %v5_b208 = inttoptr i32 %v4_b208 to i16*
  store i16 %v5_b1fc, i16* %v5_b208, align 2
  %v0_b20c = load i32, i32* %lr.global-to-local, align 4
  %v1_b20c = load i32, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v1_b20c, -8
  %v5_b20c = add i32 %v0_b20c, %tmp54
  store i32 %v5_b20c, i32* %lr.global-to-local, align 4
  %v0_b210 = load i32, i32* @r6, align 4
  %v1_b210 = add i32 %v0_b210, 2
  %v2_b210 = inttoptr i32 %v1_b210 to i16*
  %v3_b210 = load i16, i16* %v2_b210, align 2
  %v1_b214 = load i32, i32* @r7, align 4
  %v2_b214 = add i32 %v1_b214, %v5_b20c
  store i32 %v2_b214, i32* @lr, align 4
  %v3_b218 = add i32 %v2_b214, 2
  %v4_b218 = inttoptr i32 %v3_b218 to i16*
  store i16 %v3_b210, i16* %v4_b218, align 2
  %v0_b21c = load i32, i32* @r8, align 4
  store i32 %v0_b21c, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b228 = load i32, i32* @r5, align 4
  store i32 %v0_b228, i32* %r1.global-to-local, align 4
  %v0_b22c = load i32, i32* @fp, align 4
  store i32 %v0_b22c, i32* %r0.global-to-local, align 4
  %v0_b230 = load i32, i32* @lr, align 4
  %v6_b238 = call i32 @function_10300(i32 %v0_b22c, i32 %v0_b228, i32 %v0_b21c, i32 16384, i32 %v0_b230, i32 16)
  %v3_b23c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b23c, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v1_b244 = add i32 %v3_b23c, 1
  store i32 %v1_b244, i32* %r0.global-to-local, align 4
  store i32 %v1_b244, i32* %stack_var_-44, align 4
  %v6_b250 = icmp slt i32 %v1_b244, %arg2
  br i1 %v6_b250, label %dec_label_pc_b254, label %dec_label_pc_b3f8

dec_label_pc_b254:                                ; preds = %dec_label_pc_b1cc, %dec_label_pc_b178
  %v1_b268 = phi i32 [ %v1_b244, %dec_label_pc_b1cc ], [ 0, %dec_label_pc_b178 ]
  %v5_b258 = mul i32 %v1_b268, 24
  %v1_b260 = load i32, i32* @r7, align 4
  %v2_b260 = add i32 %v1_b260, %v5_b258
  store i32 %v2_b260, i32* %r3.global-to-local, align 4
  %v1_b264 = add i32 %v2_b260, 20
  %v2_b264 = inttoptr i32 %v1_b264 to i8*
  %v3_b264 = load i8, i8* %v2_b264, align 1
  %v4_b264 = zext i8 %v3_b264 to i32
  store i32 %v4_b264, i32* %r2.global-to-local, align 4
  %v4_b268 = mul i32 %v1_b268, 4
  %v5_b268 = add i32 %v4_b268, %v2_ae88
  %v6_b268 = inttoptr i32 %v5_b268 to i32*
  %v7_b268 = load i32, i32* %v6_b268, align 4
  store i32 %v7_b268, i32* @r5, align 4
  %v1_b270 = add i32 %v7_b268, 20
  store i32 %v1_b270, i32* @r6, align 4
  %tmp55 = icmp ugt i8 %v3_b264, 31
  br i1 %tmp55, label %dec_label_pc_b18c, label %dec_label_pc_b278

dec_label_pc_b278:                                ; preds = %dec_label_pc_b254
  %v1_b278 = add i32 %v2_b260, 16
  %v2_b278 = inttoptr i32 %v1_b278 to i32*
  %v3_b278 = load i32, i32* %v2_b278, align 4
  %v0_b27c = call i32 @function_cad8()
  store i32 %v0_b27c, i32* %r0.global-to-local, align 4
  %v3_b280 = load i32, i32* %stack_var_-44, align 4
  %v5_b288 = mul i32 %v3_b280, 24
  %v1_b28c = and i32 %v3_b278, 16711680
  store i32 %v1_b28c, i32* %ip.global-to-local, align 4
  %v3_b290 = udiv i32 %v3_b278, 16777216
  %v4_b294 = udiv i32 %v1_b28c, 256
  %v5_b294 = or i32 %v4_b294, %v3_b290
  store i32 %v5_b294, i32* %r2.global-to-local, align 4
  %v1_b298 = load i32, i32* @r7, align 4
  %v2_b298 = add i32 %v1_b298, %v5_b288
  store i32 %v2_b298, i32* %r1.global-to-local, align 4
  %v1_b29c = and i32 %v3_b278, 65280
  store i32 %v1_b29c, i32* %r3.global-to-local, align 4
  %v1_b2a0 = add i32 %v2_b298, 20
  %v2_b2a0 = inttoptr i32 %v1_b2a0 to i8*
  %v3_b2a0 = load i8, i8* %v2_b2a0, align 1
  %v4_b2a0 = zext i8 %v3_b2a0 to i32
  store i32 %v4_b2a0, i32* %ip.global-to-local, align 4
  %v5_b2a8 = call i32 @llvm.bswap.i32(i32 %v3_b278)
  %v7_b2ac = lshr i32 %v0_b27c, %v4_b2a0
  %v8_b2ac = add i32 %v7_b2ac, %v5_b2a8
  store i32 %v8_b2ac, i32* %r2.global-to-local, align 4
  %v1_b2b0 = and i32 %v8_b2ac, 16711680
  store i32 %v1_b2b0, i32* %r0.global-to-local, align 4
  %v1_b2bc = and i32 %v8_b2ac, 65280
  store i32 %v1_b2bc, i32* %r1.global-to-local, align 4
  %v5_b2c4 = call i32 @llvm.bswap.i32(i32 %v8_b2ac)
  store i32 %v5_b2c4, i32* %r3.global-to-local, align 4
  %v0_b2c8 = load i32, i32* @sb, align 4
  %v3_b2c8 = icmp eq i32 %v0_b2c8, -1
  %v1_b2cc = load i32, i32* @r5, align 4
  %v2_b2cc = add i32 %v1_b2cc, 16
  %v3_b2cc = inttoptr i32 %v2_b2cc to i32*
  store i32 %v5_b2c4, i32* %v3_b2cc, align 4
  br i1 %v3_b2c8, label %dec_label_pc_b2d4, label %dec_label_pc_b194

dec_label_pc_b2d4:                                ; preds = %dec_label_pc_b278, %dec_label_pc_b18c
  %v0_b2d4 = call i32 @function_cad8()
  store i32 %v0_b2d4, i32* %r0.global-to-local, align 4
  store i32 %v3_b024, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v1_b2e8 = load i32, i32* @r5, align 4
  %v2_b2e8 = add i32 %v1_b2e8, 12
  %v3_b2e8 = inttoptr i32 %v2_b2e8 to i32*
  store i32 %v0_b2d4, i32* %v3_b2e8, align 4
  br i1 %v3_b2e4, label %dec_label_pc_b2f0, label %dec_label_pc_b2d4.dec_label_pc_b1a8_crit_edge

dec_label_pc_b2d4.dec_label_pc_b1a8_crit_edge:    ; preds = %dec_label_pc_b2d4
  %v1_b1ac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b1a8

dec_label_pc_b2f0:                                ; preds = %dec_label_pc_b2d4, %dec_label_pc_b194
  %v0_b2f0 = call i32 @function_cad8()
  %v1_b2f0 = trunc i32 %v0_b2f0 to i16
  %v3_b2f4 = load i32, i32* @r5, align 4
  %v4_b2f4 = add i32 %v3_b2f4, 4
  %v5_b2f4 = inttoptr i32 %v4_b2f4 to i16*
  store i16 %v1_b2f0, i16* %v5_b2f4, align 2
  store i32 %v3_b028, i32* %r0.global-to-local, align 4
  %v1_b2fc = load i32, i32* @r4, align 4
  %v9_b2fc = icmp eq i32 %v3_b028, %v1_b2fc
  br i1 %v9_b2fc, label %dec_label_pc_b304, label %dec_label_pc_b1b4

dec_label_pc_b304:                                ; preds = %dec_label_pc_b2f0, %dec_label_pc_b1a8
  %v0_b304 = call i32 @function_cad8()
  %v1_b304 = trunc i32 %v0_b304 to i16
  store i32 %v0_b304, i32* %r0.global-to-local, align 4
  store i32 %v3_b02c, i32* %r1.global-to-local, align 4
  %v1_b30c = load i32, i32* @r4, align 4
  %v9_b30c = icmp eq i32 %v3_b02c, %v1_b30c
  %v3_b310 = load i32, i32* @r5, align 4
  %v4_b310 = add i32 %v3_b310, 20
  %v5_b310 = inttoptr i32 %v4_b310 to i16*
  store i16 %v1_b304, i16* %v5_b310, align 2
  br i1 %v9_b30c, label %dec_label_pc_b318, label %dec_label_pc_b1c0

dec_label_pc_b318:                                ; preds = %dec_label_pc_b304, %dec_label_pc_b1b4
  %v0_b318 = call i32 @function_cad8()
  %v1_b318 = trunc i32 %v0_b318 to i16
  store i32 %v0_b318, i32* %r0.global-to-local, align 4
  store i32 %v1_af7c, i32* %r2.global-to-local, align 4
  %v3_b324 = load i32, i32* @r6, align 4
  %v4_b324 = add i32 %v3_b324, 2
  %v5_b324 = inttoptr i32 %v4_b324 to i16*
  store i16 %v1_b318, i16* %v5_b324, align 2
  br i1 %v2_b320, label %dec_label_pc_b1cc, label %dec_label_pc_b32c

dec_label_pc_b32c:                                ; preds = %dec_label_pc_b1c0, %dec_label_pc_b318
  %v0_b32c = load i32, i32* @r5, align 4
  %v1_b32c = add i32 %v0_b32c, 28
  store i32 %v1_b32c, i32* @r4, align 4
  store i32 %v1_b32c, i32* %r0.global-to-local, align 4
  store i32 %v0_b008, i32* %r1.global-to-local, align 4
  %v2_b338 = call i32 @function_cb9c(i32 %v1_b32c, i32 %v0_b008)
  store i32 %v2_b338, i32* %r0.global-to-local, align 4
  store i32 %v0_b008, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b344 = load i32, i32* @r4, align 4
  %v4_b344 = add i32 %v3_b344, %v0_b008
  %v5_b344 = inttoptr i32 %v4_b344 to i8*
  store i8 0, i8* %v5_b344, align 1
  br label %dec_label_pc_b1cc

dec_label_pc_b34c:                                ; preds = %dec_label_pc_b04c, %dec_label_pc_b34c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b358 = call i32 @function_10eec(i32 1510, i32 1)
  store i32 %v2_b358, i32* %r0.global-to-local, align 4
  store i32 %v2_ae88, i32* %ip.global-to-local, align 4
  %v3_b360 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b360, i32* %r1.global-to-local, align 4
  %v2_b364 = load i32, i32* @r4, align 4
  %v5_b364 = mul i32 %v2_b364, 4
  %v6_b364 = add i32 %v5_b364, %v2_ae88
  %v7_b364 = inttoptr i32 %v6_b364 to i32*
  store i32 %v2_b358, i32* %v7_b364, align 4
  %v0_b368 = load i32, i32* %ip.global-to-local, align 4
  %v1_b368 = load i32, i32* %r1.global-to-local, align 4
  %v4_b368 = mul i32 %v1_b368, 4
  %v5_b368 = add i32 %v4_b368, %v0_b368
  %v6_b368 = inttoptr i32 %v5_b368 to i32*
  %v7_b368 = load i32, i32* %v6_b368, align 4
  store i32 %v7_b368, i32* %r3.global-to-local, align 4
  %v1_b36c = inttoptr i32 %v7_b368 to i8*
  %v2_b36c = load i8, i8* %v1_b36c, align 1
  %tmp56 = urem i8 %v2_b36c, 16
  %v1_b370 = zext i8 %tmp56 to i32
  %v1_b374 = or i32 %v1_b370, 64
  store i32 %v1_b374, i32* %r2.global-to-local, align 4
  %v1_b378 = trunc i32 %v1_b374 to i8
  store i8 %v1_b378, i8* %v1_b36c, align 1
  %v0_b37c = load i32, i32* %r3.global-to-local, align 4
  %v1_b37c = inttoptr i32 %v0_b37c to i8*
  %v2_b37c = load i8, i8* %v1_b37c, align 1
  %v1_b380 = and i8 %v2_b37c, -16
  %v1_b384 = or i8 %v1_b380, 5
  store i32 17, i32* %ip.global-to-local, align 4
  store i8 %v1_b384, i8* %v1_b37c, align 1
  %v0_b390 = load i32, i32* %ip.global-to-local, align 4
  %v1_b390 = trunc i32 %v0_b390 to i8
  %v2_b390 = load i32, i32* %r3.global-to-local, align 4
  %v3_b390 = add i32 %v2_b390, 9
  %v4_b390 = inttoptr i32 %v3_b390 to i8*
  store i8 %v1_b390, i8* %v4_b390, align 1
  %v2_b398 = load i32, i32* %r3.global-to-local, align 4
  %v3_b398 = add i32 %v2_b398, 1
  %v4_b398 = inttoptr i32 %v3_b398 to i8*
  store i8 %v5_aec0, i8* %v4_b398, align 1
  store i32 %v5_aefc, i32* %ip.global-to-local, align 4
  %v0_b3a0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b3a0 = mul i32 %v0_b3a0, 32
  store i32 %v3_b3a0, i32* %r0.global-to-local, align 4
  %v2_b3a4 = load i32, i32* %r3.global-to-local, align 4
  %v3_b3a4 = add i32 %v2_b3a4, 8
  %v4_b3a4 = inttoptr i32 %v3_b3a4 to i8*
  store i8 %v1_b11c, i8* %v4_b3a4, align 1
  %v0_b3a8 = load i32, i32* @sb, align 4
  %v1_b3a8 = load i32, i32* %r3.global-to-local, align 4
  %v2_b3a8 = add i32 %v1_b3a8, 12
  %v3_b3a8 = inttoptr i32 %v2_b3a8 to i32*
  store i32 %v0_b3a8, i32* %v3_b3a8, align 4
  %v0_b3ac = load i32, i32* %r0.global-to-local, align 4
  %v1_b3ac = load i32, i32* %r1.global-to-local, align 4
  %tmp57 = mul i32 %v1_b3ac, -8
  %v5_b3ac = add i32 %v0_b3ac, %tmp57
  %v1_b3b0 = load i32, i32* @r7, align 4
  %v2_b3b0 = add i32 %v5_b3ac, %v1_b3b0
  store i32 %v2_b3b0, i32* %r2.global-to-local, align 4
  %v1_b3b4 = add i32 %v2_b3b0, 16
  %v2_b3b4 = inttoptr i32 %v1_b3b4 to i32*
  %v3_b3b4 = load i32, i32* %v2_b3b4, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v1_b3bc = load i32, i32* %r3.global-to-local, align 4
  %v2_b3bc = add i32 %v1_b3bc, 16
  %v3_b3bc = inttoptr i32 %v2_b3bc to i32*
  store i32 %v3_b3b4, i32* %v3_b3bc, align 4
  store i32 64, i32* %r2.global-to-local, align 4
  %v0_b3c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b3c4 = add i32 %v0_b3c4, 1
  store i32 %v1_b3c4, i32* @r4, align 4
  %v0_b3c8 = load i32, i32* @r6, align 4
  %v1_b3c8 = trunc i32 %v0_b3c8 to i16
  %v2_b3c8 = load i32, i32* %r3.global-to-local, align 4
  %v3_b3c8 = add i32 %v2_b3c8, 2
  %v4_b3c8 = inttoptr i32 %v3_b3c8 to i16*
  store i16 %v1_b3c8, i16* %v4_b3c8, align 2
  %v0_b3cc = load i32, i32* %r3.global-to-local, align 4
  %v1_b3cc = add i32 %v0_b3cc, 20
  store i32 %v1_b3cc, i32* %r1.global-to-local, align 4
  %v0_b3d0 = load i32, i32* @r8, align 4
  %v1_b3d0 = trunc i32 %v0_b3d0 to i16
  %v3_b3d0 = add i32 %v0_b3cc, 4
  %v4_b3d0 = inttoptr i32 %v3_b3d0 to i16*
  store i16 %v1_b3d0, i16* %v4_b3d0, align 2
  %v0_b3d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3d4 = trunc i32 %v0_b3d4 to i16
  %v2_b3d4 = load i32, i32* %r3.global-to-local, align 4
  %v3_b3d4 = add i32 %v2_b3d4, 6
  %v4_b3d4 = inttoptr i32 %v3_b3d4 to i16*
  store i16 %v1_b3d4, i16* %v4_b3d4, align 2
  %v0_b3d8 = load i32, i32* @sl, align 4
  %v1_b3d8 = trunc i32 %v0_b3d8 to i16
  %v2_b3d8 = load i32, i32* %r3.global-to-local, align 4
  %v3_b3d8 = add i32 %v2_b3d8, 20
  %v4_b3d8 = inttoptr i32 %v3_b3d8 to i16*
  store i16 %v1_b3d8, i16* %v4_b3d8, align 2
  store i32 %v4_b138, i32* %r3.global-to-local, align 4
  %v0_b3e0 = load i32, i32* @r4, align 4
  %v1_b3e0 = load i32, i32* %r0.global-to-local, align 4
  %v0_b3e4 = load i32, i32* @r5, align 4
  %v1_b3e4 = trunc i32 %v0_b3e4 to i16
  %v2_b3e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_b3e4 = add i32 %v2_b3e4, 4
  %v4_b3e4 = inttoptr i32 %v3_b3e4 to i16*
  store i16 %v1_b3e4, i16* %v4_b3e4, align 2
  %v0_b3e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3e8 = trunc i32 %v0_b3e8 to i16
  %v2_b3e8 = load i32, i32* %r1.global-to-local, align 4
  %v3_b3e8 = add i32 %v2_b3e8, 2
  %v4_b3e8 = inttoptr i32 %v3_b3e8 to i16*
  store i16 %v1_b3e8, i16* %v4_b3e8, align 2
  %v0_b3ec = load i32, i32* @r4, align 4
  store i32 %v0_b3ec, i32* %stack_var_-44, align 4
  %v5_b3f0 = icmp slt i32 %v0_b3e0, %v1_b3e0
  br i1 %v5_b3f0, label %dec_label_pc_b34c, label %dec_label_pc_b164.preheader

dec_label_pc_b3f8:                                ; preds = %dec_label_pc_b1cc, %dec_label_pc_b164
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b3fc = call i32 @function_fcbc(i32* null)
  store i32 %v2_b3fc, i32* %r0.global-to-local, align 4
  store i32 %v2_afa0, i32* %r3.global-to-local, align 4
  %v6_b408 = icmp slt i32 %v2_afa0, %v2_b3fc
  br i1 %v6_b408, label %dec_label_pc_b40c, label %dec_label_pc_b164

dec_label_pc_b40c:                                ; preds = %dec_label_pc_b3f8, %dec_label_pc_ae5c, %dec_label_pc_b418
  %v1_b414 = phi i32 [ %v3_afb4, %dec_label_pc_ae5c ], [ %v1_b41c, %dec_label_pc_b418 ], [ %v2_b3fc, %dec_label_pc_b3f8 ]
  store i32 %v27_ae5c, i32* %lr.global-to-local, align 4
  ret i32 %v1_b414

dec_label_pc_b418:                                ; preds = %dec_label_pc_afc4
  %v0_b418 = load i32, i32* @fp, align 4
  store i32 %v0_b418, i32* %r0.global-to-local, align 4
  %v1_b41c = call i32 @function_10008(i32 %v0_b418)
  store i32 %v1_b41c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b40c

; uselistorder directives
  uselistorder i32 %v1_b41c, { 1, 0 }
  uselistorder i32 %v0_b318, { 1, 0 }
  uselistorder i32 %v0_b304, { 1, 0 }
  uselistorder i32 %v1_b2fc, { 1, 0 }
  uselistorder i32 %v5_b2c4, { 1, 0 }
  uselistorder i32 %v3_b278, { 2, 1, 3, 0 }
  uselistorder i32 %v1_b244, { 1, 2, 0, 3 }
  uselistorder i32 %v5_b20c, { 1, 0 }
  uselistorder i32 %v4_b1fc, { 1, 0 }
  uselistorder i32 %v0_b1ec, { 1, 0, 2 }
  uselistorder i32 %v2_b1dc, { 1, 0 }
  uselistorder i1 %v2_b320, { 1, 0 }
  uselistorder i32 %v1_b124, { 1, 0 }
  uselistorder i32 %v3_b0a0, { 1, 0 }
  uselistorder i32 %v3_b09c, { 1, 0 }
  uselistorder i32 %v3_b098, { 1, 0 }
  uselistorder i32 %v1_b058, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b054, { 3, 4, 2, 0, 1 }
  uselistorder i32 %v3_b028, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_b01c, { 1, 0 }
  uselistorder i32 %v0_b008, { 0, 4, 5, 6, 3, 7, 8, 1, 2 }
  uselistorder i32 %v3_afb4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_afa0, { 1, 0 }
  uselistorder i32 %v1_af7c, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_af3c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_af08, { 2, 1, 0 }
  uselistorder i32 %v5_aefc, { 0, 2, 1 }
  uselistorder i32 %v7_aec4, { 1, 0, 2, 3 }
  uselistorder i32 %v6_aea0, { 1, 2, 0 }
  uselistorder i32 %v2_ae88, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 33, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 13, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 8, 3, 4, 5, 6, 7, 10, 9, 12, 11, 14, 15, 13, 17, 16, 19, 18, 20, 22, 21, 29, 23, 24, 25, 26, 27, 28, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32 %arg2, { 2, 5, 4, 6, 0, 3, 1, 7, 8, 9, 10 }
  uselistorder label %dec_label_pc_b40c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b34c, { 1, 0 }
  uselistorder label %dec_label_pc_b32c, { 1, 0 }
  uselistorder label %dec_label_pc_b1cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b164, { 1, 0 }
  uselistorder label %dec_label_pc_b0c0, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_b428(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b428:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_b428 = load i32, i32* @r4, align 4
  %v27_b428 = load i32, i32* @lr, align 4
  store i32 0, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @fp, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 %arg3, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_b454 = call i32 @function_10eec(i32 %arg2, i32 4)
  %v0_b458 = load i32, i32* @r4, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b460 = load i32, i32* @r7, align 4
  store i32 %v0_b460, i32* %r3.global-to-local, align 4
  store i32 %v2_b454, i32* @sb, align 4
  %v0_b468 = load i32, i32* @r5, align 4
  %v5_b46c = inttoptr i32 %v0_b458 to i32*
  %v6_b46c = call i32 @function_8258(i32 %v0_b468, i32* %v5_b46c, i32 2, i32 %v0_b460, i32 ptrtoint (i32* @0 to i32))
  %v1_b478 = urem i32 %v6_b46c, 256
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  %v0_b47c = load i32, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b488 = load i32, i32* @r5, align 4
  %v5_b48c = trunc i32 %v6_b46c to i8
  %v6_b490 = inttoptr i32 %v0_b47c to i32*
  %v7_b490 = call i32 @function_8258(i32 %v0_b488, i32* %v6_b490, i32 3, i32 65535, i32 %v6_b46c)
  %v0_b494 = load i32, i32* @r4, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b4a4 = load i32, i32* @r5, align 4
  %v5_b4a8 = inttoptr i32 %v0_b494 to i32*
  %v6_b4a8 = call i32 @function_8258(i32 %v0_b4a4, i32* %v5_b4a8, i32 4, i32 64, i32 %v7_b490)
  %v0_b4b0 = load i32, i32* @r4, align 4
  %v1_b4b4 = urem i32 %v6_b4a8, 256
  store i32 %v1_b4b4, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_b4bc = load i32, i32* @r7, align 4
  store i32 %v0_b4bc, i32* %r3.global-to-local, align 4
  %v0_b4c0 = load i32, i32* @r5, align 4
  %sext5 = mul i32 %v6_b4a8, 16777216
  %v5_b4c8 = sdiv i32 %sext5, 16777216
  %v6_b4c8 = inttoptr i32 %v0_b4b0 to i32*
  %v7_b4c8 = call i32 @function_8258(i32 %v0_b4c0, i32* %v6_b4c8, i32 5, i32 %v0_b4bc, i32 %v5_b4c8)
  %v1_b4d4 = urem i32 %v7_b4c8, 256
  store i32 %v1_b4d4, i32* %ip.global-to-local, align 4
  %v0_b4d8 = load i32, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b4e4 = load i32, i32* @r5, align 4
  %v5_b4ec = inttoptr i32 %v0_b4d8 to i32*
  %v6_b4ec = call i32 @function_8258(i32 %v0_b4e4, i32* %v5_b4ec, i32 6, i32 65535, i32 %v1_b4d4)
  %v0_b4f4 = load i32, i32* @r4, align 4
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b504 = load i32, i32* @r5, align 4
  %v5_b508 = inttoptr i32 %v0_b4f4 to i32*
  %v6_b508 = call i32 @function_8258(i32 %v0_b504, i32* %v5_b508, i32 7, i32 27015, i32 %v6_b4ec)
  store i32 %v6_b508, i32* @r4, align 4
  %v0_b510 = load i32, i32* @r7, align 4
  store i32 %v0_b510, i32* %stack_var_-48, align 4
  %v1_b518 = inttoptr i32 %v0_b510 to i32*
  %v2_b518 = call i32 @function_fcbc(i32* %v1_b518)
  %v1_b51c = load i32, i32* @r6, align 4
  %v2_b51c = add i32 %v1_b51c, %v2_b518
  %v1_b528 = call i32 @function_f3cc(i32 14)
  %v3_b534 = call i32 @function_f308(i32 14, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_b548 = call i32 @function_10384(i32 2, i32 3, i32 17)
  %v7_b54c = icmp eq i32 %v3_b548, -1
  store i32 %v3_b548, i32* @sl, align 4
  br i1 %v7_b54c, label %dec_label_pc_b878, label %dec_label_pc_b558

dec_label_pc_b558:                                ; preds = %dec_label_pc_b428
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b560 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b560, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  %v0_b568 = load i32, i32* @r7, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b574 = call i32 @function_10340(i32 %v3_b548, i32 %v0_b568, i32 3, i32 %v6_b560, i32 ptrtoint (i32* @0 to i32))
  %v7_b578 = icmp eq i32 %v5_b574, -1
  br i1 %v7_b578, label %dec_label_pc_b884, label %dec_label_pc_b580

dec_label_pc_b580:                                ; preds = %dec_label_pc_b558
  store i32 %v6_b4ec, i32* %r2.global-to-local, align 4
  %v0_b58c = load i32, i32* @r4, align 4
  %v3_b590 = mul i32 %v6_b4ec, 65536
  store i32 %v3_b590, i32* %ip.global-to-local, align 4
  %v3_b594 = urem i32 %v7_b490, 65536
  store i32 %v3_b594, i32* %r3.global-to-local, align 4
  %v3_b598 = urem i32 %v6_b4ec, 65536
  %v3_b59c = urem i32 %v0_b58c, 65536
  %v0_b5a0 = load i32, i32* @fp, align 4
  %v2_b5a0 = icmp eq i32 %v0_b5a0, 0
  %v0_b5a4 = load i32, i32* @r7, align 4
  store i32 %v0_b5a4, i32* %stack_var_-44, align 4
  br i1 %v2_b5a0, label %dec_label_pc_b6e4.preheader, label %dec_label_pc_b5b8

dec_label_pc_b5b8:                                ; preds = %dec_label_pc_b580
  %tmp38 = mul i32 %v7_b490, 256
  %v3_b5c0 = and i32 %tmp38, 65280
  store i32 %v3_b5c0, i32* %r3.global-to-local, align 4
  %tmp39 = mul i32 %v0_b58c, 256
  %v3_b5c4 = and i32 %tmp39, 65280
  %tmp40 = udiv i32 %v7_b490, 256
  %v4_b5cc = urem i32 %tmp40, 256
  %v5_b5cc = or i32 %v4_b5cc, %tmp38
  %tmp41 = udiv i32 %v0_b58c, 256
  %v4_b5d0 = urem i32 %tmp41, 256
  %v5_b5d0 = or i32 %v4_b5d0, %v3_b5c4
  store i32 %v5_b5d0, i32* @lr, align 4
  %tmp42 = mul i32 %v6_b4ec, 256
  %v3_b5d4 = and i32 %tmp42, 65280
  store i32 %v3_b5d4, i32* %r2.global-to-local, align 4
  %v5_b5d8 = trunc i32 %v5_b5cc to i16
  %tmp43 = udiv i32 %v6_b4ec, 256
  %v4_b5e0 = urem i32 %tmp43, 256
  %v5_b5e0 = or i32 %v4_b5e0, %v3_b5d4
  store i32 %v5_b5e0, i32* @r6, align 4
  store i32 %v0_b5a4, i32* @r4, align 4
  %sext = mul nuw i32 %v5_b5d0, 65536
  %v4_b6b0 = sdiv i32 %sext, 65536
  %v1_b65c = trunc i32 %v5_b4c8 to i8
  br label %dec_label_pc_b5e8

dec_label_pc_b5e8:                                ; preds = %.thread, %dec_label_pc_b5b8
  %v2_b5f0 = call i32 @function_10eec(i32 128, i32 1)
  %v3_b5f4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b5f4, i32* %r2.global-to-local, align 4
  %v1_b5f8 = load i32, i32* @sb, align 4
  %v2_b5f8 = load i32, i32* @r4, align 4
  %v5_b5f8 = mul i32 %v2_b5f8, 4
  %v6_b5f8 = add i32 %v5_b5f8, %v1_b5f8
  %v7_b5f8 = inttoptr i32 %v6_b5f8 to i32*
  store i32 %v2_b5f0, i32* %v7_b5f8, align 4
  %v0_b5fc = load i32, i32* %r2.global-to-local, align 4
  %v3_b5fc = mul i32 %v0_b5fc, 32
  store i32 %v3_b5fc, i32* %r3.global-to-local, align 4
  %v0_b600 = load i32, i32* @sb, align 4
  %v4_b600 = mul i32 %v0_b5fc, 4
  %v5_b600 = add i32 %v0_b600, %v4_b600
  %v6_b600 = inttoptr i32 %v5_b600 to i32*
  %v7_b600 = load i32, i32* %v6_b600, align 4
  store i32 %v7_b600, i32* @lr, align 4
  %v5_b604 = mul i32 %v0_b5fc, 24
  store i32 %v5_b604, i32* %r3.global-to-local, align 4
  %v1_b608 = load i32, i32* @r8, align 4
  %v2_b608 = add i32 %v1_b608, %v5_b604
  store i32 %v2_b608, i32* @r5, align 4
  %v1_b60c = inttoptr i32 %v7_b600 to i8*
  %v2_b60c = load i8, i8* %v1_b60c, align 1
  %tmp = urem i8 %v2_b60c, 16
  %v1_b610 = zext i8 %tmp to i32
  %v1_b614 = or i32 %v1_b610, 64
  store i32 %v1_b614, i32* %r3.global-to-local, align 4
  %v1_b61c = trunc i32 %v1_b614 to i8
  store i8 %v1_b61c, i8* %v1_b60c, align 1
  %v0_b620 = load i32, i32* @lr, align 4
  %v1_b620 = inttoptr i32 %v0_b620 to i8*
  %v2_b620 = load i8, i8* %v1_b620, align 1
  %v1_b624 = and i8 %v2_b620, -16
  %v1_b628 = or i8 %v1_b624, 5
  store i8 %v1_b628, i8* %v1_b620, align 1
  %v2_b634 = load i32, i32* @lr, align 4
  %v3_b634 = add i32 %v2_b634, 1
  %v4_b634 = inttoptr i32 %v3_b634 to i8*
  store i8 %v5_b48c, i8* %v4_b634, align 1
  %v3_b638 = load i32, i32* %stack_var_-48, align 4
  %v3_b63c = mul i32 %v3_b638, 65536
  %v1_b640 = add i32 %v3_b63c, 2097152
  %v3_b644 = udiv i32 %v1_b640, 256
  %v1_b648 = and i32 %v3_b644, 65280
  %v4_b64c = udiv i32 %v1_b640, 16777216
  %v5_b64c = or i32 %v1_b648, %v4_b64c
  store i32 %v5_b64c, i32* %r3.global-to-local, align 4
  store i32 %v1_b4d4, i32* %r4.global-to-local, align 4
  %v3_b658 = urem i32 %v3_b638, 65536
  store i32 %v3_b658, i32* %r2.global-to-local, align 4
  %v2_b65c = load i32, i32* @lr, align 4
  %v3_b65c = add i32 %v2_b65c, 8
  %v4_b65c = inttoptr i32 %v3_b65c to i8*
  store i8 %v1_b65c, i8* %v4_b65c, align 1
  %v0_b660 = load i32, i32* %r3.global-to-local, align 4
  %v1_b660 = trunc i32 %v0_b660 to i16
  %v2_b660 = load i32, i32* @lr, align 4
  %v3_b660 = add i32 %v2_b660, 2
  %v4_b660 = inttoptr i32 %v3_b660 to i16*
  store i16 %v1_b660, i16* %v4_b660, align 2
  %v0_b664 = load i32, i32* %r2.global-to-local, align 4
  %v1_b664 = mul i32 %v0_b664, 65536
  %v3_b66c = add i32 %v1_b664, 786432
  store i32 %v3_b66c, i32* %r2.global-to-local, align 4
  %v2_b670 = load i32, i32* @lr, align 4
  %v3_b670 = add i32 %v2_b670, 4
  %v4_b670 = inttoptr i32 %v3_b670 to i16*
  store i16 %v5_b5d8, i16* %v4_b670, align 2
  %v0_b674 = load i32, i32* %r2.global-to-local, align 4
  %v3_b674 = udiv i32 %v0_b674, 256
  %v1_b678 = and i32 %v3_b674, 65280
  %v4_b67c = udiv i32 %v0_b674, 16777216
  %v5_b67c = or i32 %v1_b678, %v4_b67c
  store i32 %v5_b67c, i32* %ip.global-to-local, align 4
  %v2_b684 = load i32, i32* @lr, align 4
  %v3_b684 = add i32 %v2_b684, 9
  %v4_b684 = inttoptr i32 %v3_b684 to i8*
  store i8 17, i8* %v4_b684, align 1
  %v0_b688 = load i32, i32* %r4.global-to-local, align 4
  %v2_b688 = icmp eq i32 %v0_b688, 0
  store i32 ptrtoint (i32* @global_var_202d4.42 to i32), i32* %r3.global-to-local, align 4
  br i1 %v2_b688, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b5e8
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_b694 = load i32, i32* @lr, align 4
  %v4_b694 = add i32 %v3_b694, 6
  %v5_b694 = inttoptr i32 %v4_b694 to i16*
  store i16 64, i16* %v5_b694, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b5e8, %bb
  %v2_b698 = load i32, i32* @global_var_202d4.42, align 4
  store i32 %v2_b698, i32* %r2.global-to-local, align 4
  %v1_b69c = load i32, i32* @lr, align 4
  %v2_b69c = add i32 %v1_b69c, 12
  %v3_b69c = inttoptr i32 %v2_b69c to i32*
  store i32 %v2_b698, i32* %v3_b69c, align 4
  %v0_b6a0 = load i32, i32* @r5, align 4
  %v1_b6a0 = add i32 %v0_b6a0, 16
  %v2_b6a0 = inttoptr i32 %v1_b6a0 to i32*
  %v3_b6a0 = load i32, i32* %v2_b6a0, align 4
  store i32 %v3_b6a0, i32* %r3.global-to-local, align 4
  %v0_b6a4 = load i32, i32* @lr, align 4
  %v1_b6a4 = add i32 %v0_b6a4, 20
  store i32 %v1_b6a4, i32* %r4.global-to-local, align 4
  %v0_b6a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_b6a8 = trunc i32 %v0_b6a8 to i16
  %v3_b6a8 = add i32 %v0_b6a4, 24
  %v4_b6a8 = inttoptr i32 %v3_b6a8 to i16*
  store i16 %v1_b6a8, i16* %v4_b6a8, align 2
  %v0_b6ac = load i32, i32* %r3.global-to-local, align 4
  %v1_b6ac = load i32, i32* @lr, align 4
  %v2_b6ac = add i32 %v1_b6ac, 16
  %v3_b6ac = inttoptr i32 %v2_b6ac to i32*
  store i32 %v0_b6ac, i32* %v3_b6ac, align 4
  store i32 %v4_b6b0, i32* %ip.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_b6b8 = load i32, i32* @lr, align 4
  %v2_b6b8 = add i32 %v1_b6b8, 28
  %v3_b6b8 = inttoptr i32 %v2_b6b8 to i32*
  store i32 -1, i32* %v3_b6b8, align 4
  %v0_b6bc = load i32, i32* %ip.global-to-local, align 4
  %v1_b6bc = trunc i32 %v0_b6bc to i16
  %v2_b6bc = load i32, i32* %r4.global-to-local, align 4
  %v3_b6bc = add i32 %v2_b6bc, 2
  %v4_b6bc = inttoptr i32 %v3_b6bc to i16*
  store i16 %v1_b6bc, i16* %v4_b6bc, align 2
  %v0_b6c0 = load i32, i32* @lr, align 4
  %v1_b6c0 = add i32 %v0_b6c0, 32
  %v0_b6c4 = load i32, i32* @r6, align 4
  %v1_b6c4 = trunc i32 %v0_b6c4 to i16
  %v3_b6c4 = add i32 %v0_b6c0, 20
  %v4_b6c4 = inttoptr i32 %v3_b6c4 to i16*
  store i16 %v1_b6c4, i16* %v4_b6c4, align 2
  %v3_b6c8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_b6c8, i32* %r2.global-to-local, align 4
  %v3_b6cc = call i32 @function_f7f8(i32 %v1_b6c0, i32 %v3_b534, i32 %v3_b6c8)
  %v3_b6d0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b6d0, i32* %r3.global-to-local, align 4
  %v1_b6d4 = add i32 %v3_b6d0, 1
  store i32 %v1_b6d4, i32* @r4, align 4
  %v1_b6d8 = load i32, i32* @fp, align 4
  store i32 %v1_b6d4, i32* %stack_var_-44, align 4
  %v5_b6e0 = icmp slt i32 %v1_b6d4, %v1_b6d8
  br i1 %v5_b6e0, label %dec_label_pc_b5e8, label %dec_label_pc_b6e4.preheader

dec_label_pc_b6e4.preheader:                      ; preds = %.thread, %dec_label_pc_b580
  %v0_b6e8.ph = phi i32 [ 0, %dec_label_pc_b580 ], [ %v1_b6d8, %.thread ]
  %v3_b700 = icmp eq i32 %v3_b594, 65535
  br label %dec_label_pc_b6e4

dec_label_pc_b6e4:                                ; preds = %dec_label_pc_b6e4.preheader, %dec_label_pc_b864.dec_label_pc_b6e4_crit_edge
  %v0_b6e8 = phi i32 [ %v0_b6e8.pre, %dec_label_pc_b864.dec_label_pc_b6e4_crit_edge ], [ %v0_b6e8.ph, %dec_label_pc_b6e4.preheader ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b6e8 = icmp eq i32 %v0_b6e8, 0
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b6e8, label %dec_label_pc_b864, label %dec_label_pc_b6f4

dec_label_pc_b6f4:                                ; preds = %dec_label_pc_b6e4
  br label %dec_label_pc_b7a8

dec_label_pc_b6fc:                                ; preds = %dec_label_pc_b7a8
  br i1 %v3_b700, label %dec_label_pc_b830, label %dec_label_pc_b708

dec_label_pc_b708:                                ; preds = %dec_label_pc_b7d0.dec_label_pc_b708_crit_edge, %dec_label_pc_b6fc
  %v1_b70c = phi i32 [ %v1_b70c.pre, %dec_label_pc_b7d0.dec_label_pc_b708_crit_edge ], [ 65535, %dec_label_pc_b6fc ]
  store i32 %v3_b598, i32* %r2.global-to-local, align 4
  %v9_b70c = icmp eq i32 %v3_b598, %v1_b70c
  br i1 %v9_b70c, label %dec_label_pc_b844, label %dec_label_pc_b714

dec_label_pc_b714:                                ; preds = %dec_label_pc_b830.dec_label_pc_b714_crit_edge, %dec_label_pc_b708
  %v1_b718 = phi i32 [ %v1_b718.pre, %dec_label_pc_b830.dec_label_pc_b714_crit_edge ], [ %v1_b70c, %dec_label_pc_b708 ]
  store i32 %v3_b59c, i32* %r3.global-to-local, align 4
  %v9_b718 = icmp eq i32 %v3_b59c, %v1_b718
  br i1 %v9_b718, label %dec_label_pc_b858, label %dec_label_pc_b720

dec_label_pc_b720:                                ; preds = %dec_label_pc_b844, %dec_label_pc_b714, %dec_label_pc_b858
  store i32 0, i32* @r4, align 4
  %v2_b728 = load i32, i32* @r5, align 4
  %v3_b728 = add i32 %v2_b728, 10
  %v4_b728 = inttoptr i32 %v3_b728 to i16*
  store i16 0, i16* %v4_b728, align 2
  %v0_b72c = load i32, i32* @r5, align 4
  store i32 %v0_b72c, i32* @r0, align 4
  %v2_b730 = call i32 @function_bf78(i32 %v0_b72c, i32 20)
  %v3_b730 = trunc i32 %v2_b730 to i16
  %v3_b734 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_b734, i32* %r3.global-to-local, align 4
  %v3_b738 = load i32, i32* @r5, align 4
  %v4_b738 = add i32 %v3_b738, 10
  %v5_b738 = inttoptr i32 %v4_b738 to i16*
  store i16 %v3_b730, i16* %v5_b738, align 2
  %v0_b73c = load i32, i32* @r6, align 4
  store i32 %v0_b73c, i32* @r1, align 4
  %v1_b740 = add i32 %v0_b73c, 4
  %v2_b740 = inttoptr i32 %v1_b740 to i16*
  %v3_b740 = load i16, i16* %v2_b740, align 2
  %v4_b740 = zext i16 %v3_b740 to i32
  store i32 %v4_b740, i32* %r2.global-to-local, align 4
  %v0_b744 = load i32, i32* @r4, align 4
  %v1_b744 = trunc i32 %v0_b744 to i16
  %v3_b744 = add i32 %v0_b73c, 6
  %v4_b744 = inttoptr i32 %v3_b744 to i16*
  store i16 %v1_b744, i16* %v4_b744, align 2
  %v0_b748 = load i32, i32* %r3.global-to-local, align 4
  %v1_b748 = add i32 %v0_b748, 12
  store i32 %v1_b748, i32* %r3.global-to-local, align 4
  %v0_b74c = load i32, i32* @r5, align 4
  %v4_b750 = call i32 @function_bfc8(i32 %v0_b74c, i32 %v0_b73c, i32 %v4_b740, i32 %v1_b748)
  %v5_b750 = trunc i32 %v4_b750 to i16
  %v3_b754 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b754, i32* %r3.global-to-local, align 4
  %v3_b758 = mul i32 %v3_b754, 32
  store i32 %v3_b758, i32* %lr.global-to-local, align 4
  %v3_b75c = load i32, i32* @r6, align 4
  %v4_b75c = add i32 %v3_b75c, 6
  %v5_b75c = inttoptr i32 %v4_b75c to i16*
  store i16 %v5_b750, i16* %v5_b75c, align 2
  %v0_b760 = load i32, i32* %lr.global-to-local, align 4
  %v1_b760 = load i32, i32* %r3.global-to-local, align 4
  %tmp44 = mul i32 %v1_b760, -8
  %v5_b760 = add i32 %v0_b760, %tmp44
  store i32 %v5_b760, i32* %lr.global-to-local, align 4
  %v0_b764 = load i32, i32* @r6, align 4
  %v1_b764 = add i32 %v0_b764, 2
  %v2_b764 = inttoptr i32 %v1_b764 to i16*
  %v3_b764 = load i16, i16* %v2_b764, align 2
  %v3_b768 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_b768, i32* %r2.global-to-local, align 4
  %v1_b76c = load i32, i32* @r8, align 4
  %v2_b76c = add i32 %v1_b76c, %v5_b760
  store i32 %v2_b76c, i32* @lr, align 4
  %v3_b770 = add i32 %v2_b76c, 2
  %v4_b770 = inttoptr i32 %v3_b770 to i16*
  store i16 %v3_b764, i16* %v4_b770, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b77c = load i32, i32* @r5, align 4
  %v0_b780 = load i32, i32* %r2.global-to-local, align 4
  %v1_b780 = add i32 %v0_b780, 32
  store i32 %v1_b780, i32* %r2.global-to-local, align 4
  %v0_b784 = load i32, i32* @sl, align 4
  %v0_b788 = load i32, i32* @lr, align 4
  %v6_b790 = call i32 @function_10300(i32 %v0_b784, i32 %v0_b77c, i32 %v1_b780, i32 16384, i32 %v0_b788, i32 16)
  %v3_b794 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b794, i32* %r3.global-to-local, align 4
  %v1_b798 = add i32 %v3_b794, 1
  %v1_b79c = load i32, i32* @fp, align 4
  store i32 %v1_b798, i32* %stack_var_-44, align 4
  %v6_b7a4 = icmp slt i32 %v1_b798, %v1_b79c
  br i1 %v6_b7a4, label %dec_label_pc_b7a8, label %dec_label_pc_b864

dec_label_pc_b7a8:                                ; preds = %dec_label_pc_b720, %dec_label_pc_b6f4
  %v1_b7b8 = phi i32 [ %v1_b798, %dec_label_pc_b720 ], [ 0, %dec_label_pc_b6f4 ]
  %v5_b7ac = mul i32 %v1_b7b8, 24
  %v1_b7b0 = load i32, i32* @r8, align 4
  %v2_b7b0 = add i32 %v1_b7b0, %v5_b7ac
  store i32 %v2_b7b0, i32* %r3.global-to-local, align 4
  %v1_b7b4 = add i32 %v2_b7b0, 20
  %v2_b7b4 = inttoptr i32 %v1_b7b4 to i8*
  %v3_b7b4 = load i8, i8* %v2_b7b4, align 1
  %v4_b7b4 = zext i8 %v3_b7b4 to i32
  store i32 %v4_b7b4, i32* %r2.global-to-local, align 4
  %v0_b7b8 = load i32, i32* @sb, align 4
  %v4_b7b8 = mul i32 %v1_b7b8, 4
  %v5_b7b8 = add i32 %v0_b7b8, %v4_b7b8
  %v6_b7b8 = inttoptr i32 %v5_b7b8 to i32*
  %v7_b7b8 = load i32, i32* %v6_b7b8, align 4
  store i32 %v7_b7b8, i32* @r5, align 4
  store i32 65535, i32* @r7, align 4
  %v1_b7c8 = add i32 %v7_b7b8, 20
  store i32 %v1_b7c8, i32* @r6, align 4
  %tmp45 = icmp ugt i8 %v3_b7b4, 31
  br i1 %tmp45, label %dec_label_pc_b6fc, label %dec_label_pc_b7d0

dec_label_pc_b7d0:                                ; preds = %dec_label_pc_b7a8
  %v1_b7d0 = add i32 %v2_b7b0, 16
  %v2_b7d0 = inttoptr i32 %v1_b7d0 to i32*
  %v3_b7d0 = load i32, i32* %v2_b7d0, align 4
  store i32 %v3_b7d0, i32* %r4.global-to-local, align 4
  %v0_b7d4 = call i32 @function_cad8()
  %v3_b7d8 = load i32, i32* %stack_var_-44, align 4
  %v5_b7e0 = mul i32 %v3_b7d8, 24
  %v1_b7e4 = and i32 %v3_b7d0, 16711680
  store i32 %v1_b7e4, i32* %ip.global-to-local, align 4
  %v3_b7e8 = udiv i32 %v3_b7d0, 16777216
  %v4_b7ec = udiv i32 %v1_b7e4, 256
  %v5_b7ec = or i32 %v4_b7ec, %v3_b7e8
  store i32 %v5_b7ec, i32* %r2.global-to-local, align 4
  %v1_b7f0 = load i32, i32* @r8, align 4
  %v2_b7f0 = add i32 %v1_b7f0, %v5_b7e0
  %v1_b7f4 = and i32 %v3_b7d0, 65280
  store i32 %v1_b7f4, i32* %r3.global-to-local, align 4
  %v1_b7f8 = add i32 %v2_b7f0, 20
  %v2_b7f8 = inttoptr i32 %v1_b7f8 to i8*
  %v3_b7f8 = load i8, i8* %v2_b7f8, align 1
  %v4_b7f8 = zext i8 %v3_b7f8 to i32
  store i32 %v4_b7f8, i32* %ip.global-to-local, align 4
  %v5_b800 = call i32 @llvm.bswap.i32(i32 %v3_b7d0)
  %v7_b804 = lshr i32 %v0_b7d4, %v4_b7f8
  %v8_b804 = add i32 %v7_b804, %v5_b800
  store i32 %v8_b804, i32* %r2.global-to-local, align 4
  %v5_b820 = call i32 @llvm.bswap.i32(i32 %v8_b804)
  store i32 %v5_b820, i32* %r3.global-to-local, align 4
  %v1_b824 = load i32, i32* @r7, align 4
  %v9_b824 = icmp eq i32 %v3_b594, %v1_b824
  %v1_b828 = load i32, i32* @r5, align 4
  %v2_b828 = add i32 %v1_b828, 16
  %v3_b828 = inttoptr i32 %v2_b828 to i32*
  store i32 %v5_b820, i32* %v3_b828, align 4
  br i1 %v9_b824, label %dec_label_pc_b830, label %dec_label_pc_b7d0.dec_label_pc_b708_crit_edge

dec_label_pc_b7d0.dec_label_pc_b708_crit_edge:    ; preds = %dec_label_pc_b7d0
  %v1_b70c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b708

dec_label_pc_b830:                                ; preds = %dec_label_pc_b7d0, %dec_label_pc_b6fc
  %v0_b830 = call i32 @function_cad8()
  %v1_b830 = trunc i32 %v0_b830 to i16
  store i32 %v3_b598, i32* %r2.global-to-local, align 4
  %v1_b838 = load i32, i32* @r7, align 4
  %v9_b838 = icmp eq i32 %v3_b598, %v1_b838
  %v3_b83c = load i32, i32* @r5, align 4
  %v4_b83c = add i32 %v3_b83c, 4
  %v5_b83c = inttoptr i32 %v4_b83c to i16*
  store i16 %v1_b830, i16* %v5_b83c, align 2
  br i1 %v9_b838, label %dec_label_pc_b844, label %dec_label_pc_b830.dec_label_pc_b714_crit_edge

dec_label_pc_b830.dec_label_pc_b714_crit_edge:    ; preds = %dec_label_pc_b830
  %v1_b718.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_b714

dec_label_pc_b844:                                ; preds = %dec_label_pc_b830, %dec_label_pc_b708
  %v0_b844 = call i32 @function_cad8()
  %v1_b844 = trunc i32 %v0_b844 to i16
  store i32 %v3_b59c, i32* %r3.global-to-local, align 4
  %v1_b84c = load i32, i32* @r7, align 4
  %v9_b84c = icmp eq i32 %v3_b59c, %v1_b84c
  %v3_b850 = load i32, i32* @r5, align 4
  %v4_b850 = add i32 %v3_b850, 20
  %v5_b850 = inttoptr i32 %v4_b850 to i16*
  store i16 %v1_b844, i16* %v5_b850, align 2
  br i1 %v9_b84c, label %dec_label_pc_b858, label %dec_label_pc_b720

dec_label_pc_b858:                                ; preds = %dec_label_pc_b844, %dec_label_pc_b714
  %v0_b858 = call i32 @function_cad8()
  %v1_b858 = trunc i32 %v0_b858 to i16
  %v3_b85c = load i32, i32* @r6, align 4
  %v4_b85c = add i32 %v3_b85c, 2
  %v5_b85c = inttoptr i32 %v4_b85c to i16*
  store i16 %v1_b858, i16* %v5_b85c, align 2
  br label %dec_label_pc_b720

dec_label_pc_b864:                                ; preds = %dec_label_pc_b720, %dec_label_pc_b6e4
  %v2_b868 = call i32 @function_fcbc(i32* null)
  store i32 %v2_b51c, i32* %ip.global-to-local, align 4
  %v6_b874 = icmp slt i32 %v2_b51c, %v2_b868
  br i1 %v6_b874, label %dec_label_pc_b878, label %dec_label_pc_b864.dec_label_pc_b6e4_crit_edge

dec_label_pc_b864.dec_label_pc_b6e4_crit_edge:    ; preds = %dec_label_pc_b864
  %v0_b6e8.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_b6e4

dec_label_pc_b878:                                ; preds = %dec_label_pc_b864, %dec_label_pc_b428, %dec_label_pc_b884
  %v1_b880 = phi i32 [ %v3_b548, %dec_label_pc_b428 ], [ %v1_b888, %dec_label_pc_b884 ], [ %v2_b868, %dec_label_pc_b864 ]
  store i32 %v3_b428, i32* %r4.global-to-local, align 4
  store i32 %v27_b428, i32* %lr.global-to-local, align 4
  ret i32 %v1_b880

dec_label_pc_b884:                                ; preds = %dec_label_pc_b558
  %v0_b884 = load i32, i32* @sl, align 4
  %v1_b888 = call i32 @function_10008(i32 %v0_b884)
  br label %dec_label_pc_b878

; uselistorder directives
  uselistorder i32 %v5_b820, { 1, 0 }
  uselistorder i32 %v3_b7d0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_b798, { 1, 2, 0 }
  uselistorder i32 %v5_b760, { 1, 0 }
  uselistorder i32 %v0_b73c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b6d4, { 1, 0, 2 }
  uselistorder i32 %v3_b638, { 1, 0 }
  uselistorder i32 %v0_b5fc, { 1, 2, 0 }
  uselistorder i32 %v3_b5d4, { 1, 0 }
  uselistorder i32 %v3_b594, { 0, 2, 1 }
  uselistorder i32 %v0_b58c, { 1, 0, 2 }
  uselistorder i32 %v3_b548, { 1, 2, 3, 0 }
  uselistorder i32 %v2_b51c, { 1, 0 }
  uselistorder i32 %v6_b4ec, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v1_b4d4, { 1, 2, 0 }
  uselistorder i32 %v5_b4c8, { 1, 0 }
  uselistorder i32 %v7_b490, { 1, 0, 2, 3 }
  uselistorder i32 %v6_b46c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 7, 8, 9, 18, 10, 11, 12, 13, 14, 15, 16, 17, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r2.global-to-local, { 7, 8, 9, 15, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %ip.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 2 }
  uselistorder label %dec_label_pc_b878, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b720, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b6e4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b894(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_b894:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v9_b894 = load i32, i32* @r6, align 4
  %v18_b894 = load i32, i32* @sb, align 4
  %v27_b894 = load i32, i32* @lr, align 4
  store i32 0, i32* @sl, align 4
  store i32 %arg1, i32* @fp, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg5, i32* @r4, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v2_b8c4 = call i32 @function_10eec(i32 %arg2, i32 4)
  %v0_b8c8 = load i32, i32* @r4, align 4
  store i32 %v0_b8c8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b8d4 = load i32, i32* @sl, align 4
  store i32 %v0_b8d4, i32* %r3.global-to-local, align 4
  %v0_b8d8 = load i32, i32* @r5, align 4
  store i32 %v0_b8d8, i32* %r0.global-to-local, align 4
  %v5_b8dc = inttoptr i32 %v0_b8c8 to i32*
  %v6_b8dc = call i32 @function_8258(i32 %v0_b8d8, i32* %v5_b8dc, i32 2, i32 %v0_b8d4, i32 %v2_b8c4)
  %v1_b8e8 = urem i32 %v6_b8dc, 256
  store i32 %v1_b8e8, i32* %ip.global-to-local, align 4
  %v0_b8ec = load i32, i32* @r4, align 4
  store i32 %v0_b8ec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b8f8 = load i32, i32* @r5, align 4
  store i32 %v0_b8f8, i32* %r0.global-to-local, align 4
  %v6_b900 = inttoptr i32 %v0_b8ec to i32*
  %v7_b900 = call i32 @function_8258(i32 %v0_b8f8, i32* %v6_b900, i32 3, i32 65535, i32 %v1_b8e8)
  %v0_b904 = load i32, i32* @r4, align 4
  store i32 %v0_b904, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b914 = load i32, i32* @r5, align 4
  store i32 %v0_b914, i32* %r0.global-to-local, align 4
  %v5_b918 = inttoptr i32 %v0_b904 to i32*
  %v6_b918 = call i32 @function_8258(i32 %v0_b914, i32* %v5_b918, i32 4, i32 64, i32 %v7_b900)
  %v0_b920 = load i32, i32* @r4, align 4
  store i32 %v0_b920, i32* %r1.global-to-local, align 4
  %v1_b924 = urem i32 %v6_b918, 256
  store i32 %v1_b924, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v0_b92c = load i32, i32* @sl, align 4
  store i32 %v0_b92c, i32* %r3.global-to-local, align 4
  %v0_b930 = load i32, i32* @r5, align 4
  store i32 %v0_b930, i32* %r0.global-to-local, align 4
  %sext21 = mul i32 %v6_b918, 16777216
  %v5_b938 = sdiv i32 %sext21, 16777216
  %v6_b938 = inttoptr i32 %v0_b920 to i32*
  %v7_b938 = call i32 @function_8258(i32 %v0_b930, i32* %v6_b938, i32 5, i32 %v0_b92c, i32 %v5_b938)
  %v1_b944 = urem i32 %v7_b938, 256
  store i32 %v1_b944, i32* %ip.global-to-local, align 4
  %v0_b948 = load i32, i32* @r4, align 4
  store i32 %v0_b948, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b954 = load i32, i32* @r5, align 4
  store i32 %v0_b954, i32* %r0.global-to-local, align 4
  %v5_b95c = inttoptr i32 %v0_b948 to i32*
  %v6_b95c = call i32 @function_8258(i32 %v0_b954, i32* %v5_b95c, i32 6, i32 65535, i32 %v1_b944)
  %v0_b960 = load i32, i32* @r4, align 4
  store i32 %v0_b960, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v0_b970 = load i32, i32* @r5, align 4
  store i32 %v0_b970, i32* %r0.global-to-local, align 4
  %v5_b974 = inttoptr i32 %v0_b960 to i32*
  %v6_b974 = call i32 @function_8258(i32 %v0_b970, i32* %v5_b974, i32 7, i32 53, i32 %v6_b95c)
  %v0_b97c = load i32, i32* @r4, align 4
  store i32 %v0_b97c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v0_b98c = load i32, i32* @r5, align 4
  store i32 %v0_b98c, i32* %r0.global-to-local, align 4
  %v5_b990 = inttoptr i32 %v0_b97c to i32*
  %v6_b990 = call i32 @function_8258(i32 %v0_b98c, i32* %v5_b990, i32 9, i32 65535, i32 %v6_b974)
  %v0_b994 = load i32, i32* @r4, align 4
  store i32 %v0_b994, i32* %r1.global-to-local, align 4
  %v0_b99c = load i32, i32* @sl, align 4
  store i32 %v0_b99c, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_b9a4 = load i32, i32* @r5, align 4
  store i32 %v0_b9a4, i32* %r0.global-to-local, align 4
  %v5_b9a8 = inttoptr i32 %v0_b994 to i32*
  %v6_b9a8 = call i32 @function_8258(i32 %v0_b9a4, i32* %v5_b9a8, i32 %v0_b99c, i32 12, i32 %v6_b990)
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_b9b0 = load i32, i32* @sl, align 4
  store i32 %v0_b9b0, i32* %r3.global-to-local, align 4
  %v0_b9b4 = load i32, i32* @r4, align 4
  store i32 %v0_b9b4, i32* %r1.global-to-local, align 4
  %v0_b9bc = load i32, i32* @r5, align 4
  store i32 %v0_b9bc, i32* %r0.global-to-local, align 4
  %v5_b9c0 = inttoptr i32 %v0_b9b4 to i32*
  %v6_b9c0 = call i32 @function_8190(i32 %v0_b9bc, i32* %v5_b9c0, i32 8, i32 %v0_b9b0, i32 %v6_b9a8)
  store i32 %v6_b9c0, i32* @r7, align 4
  store i32 15, i32* %r0.global-to-local, align 4
  %v1_b9cc = call i32 @function_f3cc(i32 15)
  %v0_b9d0 = load i32, i32* @sl, align 4
  store i32 %v0_b9d0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r0.global-to-local, align 4
  %v2_b9d8 = inttoptr i32 %v0_b9d0 to i32*
  %v3_b9d8 = call i32 @function_f308(i32 15, i32* %v2_b9d8)
  store i32 %v3_b9d8, i32* %r0.global-to-local, align 4
  %v0_b9dc = load i32, i32* @sl, align 4
  store i32 %v0_b9dc, i32* %r1.global-to-local, align 4
  %v2_b9e0 = call i32 @function_fc48(i32 %v3_b9d8, i32 %v0_b9dc)
  store i32 %v2_b9e0, i32* @r4, align 4
  store i32 15, i32* %r0.global-to-local, align 4
  %v1_b9ec = call i32 @function_f32c(i32 15)
  store i32 %v1_b9ec, i32* %r0.global-to-local, align 4
  %v0_b9f0 = load i32, i32* @r4, align 4
  %v1_b9f0 = load i32, i32* @sl, align 4
  %v9_b9f0 = icmp eq i32 %v0_b9f0, %v1_b9f0
  store i1 %v9_b9f0, i1* %cpsr_z.global-to-local, align 1
  %v5_b9f4 = icmp slt i32 %v0_b9f0, %v1_b9f0
  br i1 %v5_b9f4, label %dec_label_pc_bab0, label %dec_label_pc_b9f8

dec_label_pc_b9f8:                                ; preds = %dec_label_pc_b894
  %v2_b9fc = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_b9fc, i32* %sb.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_b9fc, i32* %r1.global-to-local, align 4
  store i32 %v0_b9f0, i32* %r0.global-to-local, align 4
  %v1_ba0c = call i32 @function_fda0(i32 %v0_b9f0)
  store i32 %v1_ba0c, i32* @r6, align 4
  %v0_ba14 = load i32, i32* @r4, align 4
  store i32 %v0_ba14, i32* %r0.global-to-local, align 4
  %v1_ba18 = call i32 @function_10008(i32 %v0_ba14)
  store i32 16, i32* %r0.global-to-local, align 4
  %v1_ba20 = call i32 @function_f3cc(i32 16)
  %v0_ba24 = load i32, i32* @sl, align 4
  store i32 %v0_ba24, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r0.global-to-local, align 4
  %v2_ba2c = inttoptr i32 %v0_ba24 to i32*
  %v3_ba2c = call i32 @function_f308(i32 16, i32* %v2_ba2c)
  %v0_ba30 = load i32, i32* @r6, align 4
  store i32 %v0_ba30, i32* @r1, align 4
  store i32 %v3_ba2c, i32* %r2.global-to-local, align 4
  store i32 %v2_b9fc, i32* %r0.global-to-local, align 4
  %v3_ba3c = bitcast i32* %stack_var_-2124 to i8*
  %v4_ba3c = call i32 @function_fa7c(i8* %v3_ba3c, i32 %v0_ba30, i32 %v3_ba2c)
  store i32 %v4_ba3c, i32* @r8, align 4
  store i32 16, i32* %r0.global-to-local, align 4
  %v1_ba48 = call i32 @function_f32c(i32 16)
  store i32 %v1_ba48, i32* %r0.global-to-local, align 4
  %v0_ba4c = load i32, i32* @r8, align 4
  %v7_ba4c = icmp eq i32 %v0_ba4c, -1
  store i1 %v7_ba4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ba4c, label %dec_label_pc_bab0, label %dec_label_pc_ba54

dec_label_pc_ba54:                                ; preds = %dec_label_pc_b9f8
  %v0_ba54 = load i32, i32* @r6, align 4
  %v9_ba54 = icmp eq i32 %v0_ba54, %v0_ba4c
  store i1 %v9_ba54, i1* %cpsr_z.global-to-local, align 1
  %v7_ba58 = icmp sgt i32 %v0_ba54, %v0_ba4c
  br i1 %v7_ba58, label %dec_label_pc_ba5c, label %dec_label_pc_bab0

dec_label_pc_ba5c:                                ; preds = %dec_label_pc_ba54
  %v0_ba5c = load i32, i32* @sl, align 4
  store i32 %v0_ba5c, i32* %r1.global-to-local, align 4
  %v0_ba60 = load i32, i32* %sb.global-to-local, align 4
  %v2_ba60 = add i32 %v0_ba60, %v0_ba4c
  store i32 %v2_ba60, i32* %ip.global-to-local, align 4
  %v1_ba70 = add i32 %v0_ba54, -1
  br label %dec_label_pc_ba68

dec_label_pc_ba68:                                ; preds = %dec_label_pc_baa4, %dec_label_pc_ba5c
  %v0_baa4 = phi i32 [ %v1_baa4, %dec_label_pc_baa4 ], [ %v0_ba4c, %dec_label_pc_ba5c ]
  %v0_ba8c = phi i32 [ %v0_ba8c27, %dec_label_pc_baa4 ], [ %v0_ba5c, %dec_label_pc_ba5c ]
  %v0_ba6c = phi i32 [ %v0_ba6c23, %dec_label_pc_baa4 ], [ %v0_ba5c, %dec_label_pc_ba5c ]
  %v0_ba74 = phi i32 [ %v1_ba74, %dec_label_pc_baa4 ], [ %v2_ba60, %dec_label_pc_ba5c ]
  %v1_ba68 = inttoptr i32 %v0_ba74 to i8*
  %v2_ba68 = load i8, i8* %v1_ba68, align 1
  %v3_ba68 = zext i8 %v2_ba68 to i32
  store i32 %v3_ba68, i32* %r0.global-to-local, align 4
  %v2_ba6c = icmp eq i32 %v0_ba6c, 0
  store i1 %v2_ba6c, i1* %cpsr_z.global-to-local, align 1
  %v1_ba74 = add i32 %v0_ba74, 1
  store i32 %v1_ba74, i32* %ip.global-to-local, align 4
  %v1_ba78 = add nsw i32 %v3_ba68, -48
  store i32 %v1_ba78, i32* @lr, align 4
  br i1 %v2_ba6c, label %dec_label_pc_ba80, label %dec_label_pc_ba90

dec_label_pc_ba80:                                ; preds = %dec_label_pc_ba68
  %v7_ba80 = icmp eq i8 %v2_ba68, 9
  store i1 %v7_ba80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ba80, label %dec_label_pc_baa4, label %bb

bb:                                               ; preds = %dec_label_pc_ba80
  %v8_ba84 = icmp eq i8 %v2_ba68, 32
  store i1 %v8_ba84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ba84, label %dec_label_pc_baa4, label %dec_label_pc_ba8c

dec_label_pc_ba8c:                                ; preds = %bb
  %v1_ba8c = add i32 %v0_ba8c, 1
  store i32 %v1_ba8c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ba90

dec_label_pc_ba90:                                ; preds = %dec_label_pc_ba68, %dec_label_pc_ba8c
  %v0_ba8c28 = phi i32 [ %v0_ba8c, %dec_label_pc_ba68 ], [ %v1_ba8c, %dec_label_pc_ba8c ]
  %v0_ba6c24 = phi i32 [ %v0_ba6c, %dec_label_pc_ba68 ], [ %v1_ba8c, %dec_label_pc_ba8c ]
  %v7_ba90 = icmp eq i8 %v2_ba68, 46
  store i1 %v7_ba90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ba90, label %dec_label_pc_ba9c, label %bb113

bb113:                                            ; preds = %dec_label_pc_ba90
  %v3_ba94 = icmp ugt i32 %v1_ba78, 8
  %v8_ba94 = icmp eq i32 %v1_ba78, 9
  store i1 %v8_ba94, i1* %cpsr_z.global-to-local, align 1
  %v2_ba98 = xor i1 %v8_ba94, true
  %v3_ba98 = and i1 %v3_ba94, %v2_ba98
  br i1 %v3_ba98, label %dec_label_pc_bf04, label %dec_label_pc_ba9c

dec_label_pc_ba9c:                                ; preds = %dec_label_pc_ba90, %bb113
  %v9_ba9c = icmp eq i32 %v1_ba70, %v0_baa4
  store i1 %v9_ba9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ba9c, label %dec_label_pc_bf04, label %dec_label_pc_baa4

dec_label_pc_baa4:                                ; preds = %dec_label_pc_ba80, %dec_label_pc_ba9c, %bb
  %v0_ba8c27 = phi i32 [ %v0_ba8c, %dec_label_pc_ba80 ], [ %v0_ba8c28, %dec_label_pc_ba9c ], [ %v0_ba8c, %bb ]
  %v0_ba6c23 = phi i32 [ 0, %dec_label_pc_ba80 ], [ %v0_ba6c24, %dec_label_pc_ba9c ], [ 0, %bb ]
  %v1_baa4 = add i32 %v0_baa4, 1
  %v9_baa8 = icmp eq i32 %v1_baa4, %v0_ba54
  store i1 %v9_baa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_baa8, label %dec_label_pc_bab0, label %dec_label_pc_ba68

dec_label_pc_bab0:                                ; preds = %dec_label_pc_baa4, %dec_label_pc_ba54, %dec_label_pc_b9f8, %dec_label_pc_b894
  %v0_bab0 = call i32 @function_cad8()
  %v1_bab4 = urem i32 %v0_bab0, 4
  store i32 %v1_bab4, i32* %r0.global-to-local, align 4
  %v2_bab8 = icmp eq i32 %v1_bab4, 3
  store i1 %v2_bab8, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_bab0 to i2
  switch i2 %trunc, label %dec_label_pc_bae48 [
    i2 0, label %dec_label_pc_bf50
    i2 1, label %dec_label_pc_bf64
    i2 -2, label %dec_label_pc_bf40
    i2 -1, label %dec_label_pc_bad4
  ]

dec_label_pc_bad4:                                ; preds = %dec_label_pc_bab0
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_bae4

dec_label_pc_bae48:                               ; preds = %dec_label_pc_bab0
  unreachable

dec_label_pc_bae4:                                ; preds = %dec_label_pc_bf64, %dec_label_pc_bf50, %dec_label_pc_bf40, %dec_label_pc_bf04, %dec_label_pc_bad4
  %stack_var_-2184.0 = phi i32 [ 33686020, %dec_label_pc_bad4 ], [ 104859200, %dec_label_pc_bf40 ], [ 707416650, %dec_label_pc_bf64 ], [ 134744072, %dec_label_pc_bf50 ], [ %v1_bf34, %dec_label_pc_bf04 ]
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bae8 = call i32 @function_fcbc(i32* null)
  %v0_baec = load i32, i32* @r7, align 4
  %v2_baec = icmp eq i32 %v0_baec, 0
  store i1 %v2_baec, i1* %cpsr_z.global-to-local, align 1
  %v1_baf0 = load i32, i32* @fp, align 4
  %v2_baf0 = add i32 %v1_baf0, %v2_bae8
  store i32 %v2_baf0, i32* %r0.global-to-local, align 4
  br i1 %v2_baec, label %dec_label_pc_bedc, label %dec_label_pc_bafc

dec_label_pc_bafc:                                ; preds = %dec_label_pc_bae4
  store i32 %v0_baec, i32* %r0.global-to-local, align 4
  %v1_bb00 = inttoptr i32 %v0_baec to i8*
  %v2_bb00 = call i32 @function_f788(i8* %v1_bb00)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bb14 = call i32 @function_10384(i32 2, i32 3, i32 17)
  store i32 %v3_bb14, i32* %r0.global-to-local, align 4
  %v7_bb18 = icmp eq i32 %v3_bb14, -1
  store i1 %v7_bb18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb18, label %dec_label_pc_bedc, label %dec_label_pc_bb24

dec_label_pc_bb24:                                ; preds = %dec_label_pc_bafc
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bb2c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bb2c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bb40 = call i32 @function_10340(i32 %v3_bb14, i32 0, i32 3, i32 %v6_bb2c, i32 4)
  store i32 %v5_bb40, i32* %r0.global-to-local, align 4
  %v7_bb44 = icmp eq i32 %v5_bb40, -1
  store i1 %v7_bb44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb44, label %dec_label_pc_bed4, label %dec_label_pc_bb4c

dec_label_pc_bb4c:                                ; preds = %dec_label_pc_bb24
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v3_bb60 = mul i32 %v7_b900, 65536
  store i32 %v3_bb60, i32* %r6.global-to-local, align 4
  %v3_bb68 = mul i32 %v6_b974, 65536
  store i32 %v3_bb68, i32* %sb.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_bb78 = urem i32 %v7_b900, 65536
  %v3_bb7c = urem i32 %v6_b95c, 65536
  store i32 %v3_bb7c, i32* %r0.global-to-local, align 4
  %v3_bb80 = urem i32 %v6_b974, 65536
  store i32 %v3_bb80, i32* %r1.global-to-local, align 4
  %v3_bb84 = urem i32 %v6_b990, 65536
  store i32 %v3_bb84, i32* %r2.global-to-local, align 4
  %v2_bb88 = icmp eq i32 %arg2, 0
  store i1 %v2_bb88, i1* %cpsr_z.global-to-local, align 1
  %v1_bb8c = urem i32 %v6_b9a8, 256
  store i32 %v1_bb8c, i32* @sl, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bb88, label %dec_label_pc_beec.critedge, label %dec_label_pc_bba8

dec_label_pc_bba8:                                ; preds = %dec_label_pc_bb4c
  %v3_bb5c = mul i32 %v6_b990, 65536
  %v2_bbb4 = add i32 %v2_bb00, %v1_bb8c
  %v3_bbb8 = mul i32 %v2_bbb4, 65536
  %v1_bbc4 = add i32 %v3_bbb8, 1769472
  %tmp114 = mul nuw nsw i32 %v3_bb80, 256
  %v3_bbc8 = and i32 %tmp114, 65280
  %v1_bbcc = add i32 %v3_bbb8, 3080192
  %tmp115 = udiv i32 %v6_b974, 256
  %v4_bbdc = urem i32 %tmp115, 256
  %v5_bbdc = or i32 %v3_bbc8, %v4_bbdc
  store i32 %v5_bbdc, i32* @sb, align 4
  store i32 %v3_bb5c, i32* %ip.global-to-local, align 4
  %tmp116 = udiv i32 %v1_bbc4, 256
  %v3_bbe4 = and i32 %tmp116, 65280
  %tmp117 = udiv i32 %v1_bbcc, 256
  %v3_bbe8 = and i32 %tmp117, 65280
  store i32 %v3_bbe8, i32* %r2.global-to-local, align 4
  %tmp118 = mul i32 %v6_b990, 256
  %v3_bbec = and i32 %tmp118, 65280
  %v4_bbf0 = udiv i32 %v1_bbc4, 16777216
  %v5_bbf0 = or i32 %v3_bbe4, %v4_bbf0
  store i32 %v5_bbf0, i32* @fp, align 4
  %tmp119 = mul i32 %v7_b900, 256
  %v3_bbf8 = and i32 %tmp119, 65280
  store i32 %v3_bbf8, i32* %r1.global-to-local, align 4
  %v4_bbfc = udiv i32 %v1_bbcc, 16777216
  %v5_bbfc = or i32 %v3_bbe8, %v4_bbfc
  store i32 %v5_bbfc, i32* %r3.global-to-local, align 4
  %tmp120 = udiv i32 %v6_b990, 256
  %v4_bc00 = urem i32 %tmp120, 256
  %v5_bc00 = or i32 %v4_bc00, %v3_bbec
  store i32 %v5_bc00, i32* @r4, align 4
  store i32 %v2_bb00, i32* @lr, align 4
  %tmp121 = udiv i32 %v7_b900, 256
  %v4_bc08 = urem i32 %tmp121, 256
  %v5_bc08 = or i32 %v4_bc08, %v3_bbf8
  %tmp122 = mul i32 %v6_b95c, 256
  %v3_bc0c = and i32 %tmp122, 65280
  store i32 %v3_bc0c, i32* %r0.global-to-local, align 4
  %tmp123 = udiv i32 %v6_b95c, 256
  %v4_bc1c = urem i32 %tmp123, 256
  %v5_bc1c = or i32 %v4_bc1c, %v3_bc0c
  store i32 %v5_bc1c, i32* @r8, align 4
  store i32 0, i32* @r5, align 4
  %v1_bc24 = add i32 %v2_bb00, 1
  store i32 %v1_bc24, i32* @r6, align 4
  %v1_bc6c = trunc i32 %v6_b8dc to i8
  %sext = mul nuw i32 %v5_bbfc, 65536
  %v4_bc78 = sdiv i32 %sext, 65536
  %sext6 = mul nuw i32 %v5_bc08, 65536
  %v4_bc7c = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_bc00, 65536
  %v4_bcd8 = sdiv i32 %sext7, 65536
  %v2_bcfc = icmp eq i32 %v2_bb00, 0
  %tmp124 = icmp slt i32 %v2_bb00, 1
  %v1_bc84 = trunc i32 %v5_b938 to i8
  br label %dec_label_pc_bc28

dec_label_pc_bc28:                                ; preds = %dec_label_pc_bd48, %dec_label_pc_bba8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_bc30 = call i32 @function_10eec(i32 600, i32 1)
  store i32 %v2_bc30, i32* %r0.global-to-local, align 4
  store i32 %v2_b8c4, i32* %r1.global-to-local, align 4
  %v3_bc38 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bc38, i32* %r3.global-to-local, align 4
  %v2_bc3c = load i32, i32* @r5, align 4
  %v5_bc3c = mul i32 %v2_bc3c, 4
  %v6_bc3c = add i32 %v5_bc3c, %v2_b8c4
  %v7_bc3c = inttoptr i32 %v6_bc3c to i32*
  store i32 %v2_bc30, i32* %v7_bc3c, align 4
  %v0_bc40 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc40 = load i32, i32* %r3.global-to-local, align 4
  %v4_bc40 = mul i32 %v1_bc40, 4
  %v5_bc40 = add i32 %v4_bc40, %v0_bc40
  %v6_bc40 = inttoptr i32 %v5_bc40 to i32*
  %v7_bc40 = load i32, i32* %v6_bc40, align 4
  store i32 %v7_bc40, i32* %r1.global-to-local, align 4
  %v1_bc44 = inttoptr i32 %v7_bc40 to i8*
  %v2_bc44 = load i8, i8* %v1_bc44, align 1
  %tmp = urem i8 %v2_bc44, 16
  %v1_bc48 = zext i8 %tmp to i32
  %v1_bc4c = or i32 %v1_bc48, 64
  store i32 %v1_bc4c, i32* %r2.global-to-local, align 4
  %v1_bc50 = trunc i32 %v1_bc4c to i8
  store i8 %v1_bc50, i8* %v1_bc44, align 1
  %v0_bc54 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc54 = inttoptr i32 %v0_bc54 to i8*
  %v2_bc54 = load i8, i8* %v1_bc54, align 1
  %v1_bc58 = and i8 %v2_bc54, -16
  %v1_bc5c = or i8 %v1_bc58, 5
  store i32 %v1_b944, i32* %ip.global-to-local, align 4
  store i8 %v1_bc5c, i8* %v1_bc54, align 1
  store i32 %v1_b8e8, i32* %lr.global-to-local, align 4
  %v2_bc6c = load i32, i32* %r1.global-to-local, align 4
  %v3_bc6c = add i32 %v2_bc6c, 1
  %v4_bc6c = inttoptr i32 %v3_bc6c to i8*
  store i8 %v1_bc6c, i8* %v4_bc6c, align 1
  store i32 %v5_b938, i32* %r3.global-to-local, align 4
  %v0_bc74 = load i32, i32* %ip.global-to-local, align 4
  %v2_bc74 = icmp eq i32 %v0_bc74, 0
  store i1 %v2_bc74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_bc78, i32* %r0.global-to-local, align 4
  store i32 %v4_bc7c, i32* %r2.global-to-local, align 4
  br i1 %v2_bc74, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_bc28
  store i32 64, i32* %lr.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_bc28, %bb125
  %v2_bc84 = load i32, i32* %r1.global-to-local, align 4
  %v3_bc84 = add i32 %v2_bc84, 8
  %v4_bc84 = inttoptr i32 %v3_bc84 to i8*
  store i8 %v1_bc84, i8* %v4_bc84, align 1
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_bc8c = load i32, i32* %r1.global-to-local, align 4
  %v3_bc8c = add i32 %v2_bc8c, 9
  %v4_bc8c = inttoptr i32 %v3_bc8c to i8*
  store i8 17, i8* %v4_bc8c, align 1
  %v0_bc90 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc90, label %bb128, label %bb127

bb127:                                            ; preds = %bb126
  %v1_bc90 = load i32, i32* %lr.global-to-local, align 4
  %v2_bc90 = trunc i32 %v1_bc90 to i16
  %v3_bc90 = load i32, i32* %r1.global-to-local, align 4
  %v4_bc90 = add i32 %v3_bc90, 6
  %v5_bc90 = inttoptr i32 %v4_bc90 to i16*
  store i16 %v2_bc90, i16* %v5_bc90, align 2
  br label %bb128

bb128:                                            ; preds = %bb126, %bb127
  store i32 ptrtoint (i32* @global_var_202d4.42 to i32), i32* @lr, align 4
  %v0_bc98 = load i32, i32* %r0.global-to-local, align 4
  %v1_bc98 = trunc i32 %v0_bc98 to i16
  %v2_bc98 = load i32, i32* %r1.global-to-local, align 4
  %v3_bc98 = add i32 %v2_bc98, 2
  %v4_bc98 = inttoptr i32 %v3_bc98 to i16*
  store i16 %v1_bc98, i16* %v4_bc98, align 2
  %v0_bc9c = load i32, i32* %r2.global-to-local, align 4
  %v1_bc9c = trunc i32 %v0_bc9c to i16
  %v2_bc9c = load i32, i32* %r1.global-to-local, align 4
  %v3_bc9c = add i32 %v2_bc9c, 4
  %v4_bc9c = inttoptr i32 %v3_bc9c to i16*
  store i16 %v1_bc9c, i16* %v4_bc9c, align 2
  %v2_bca0 = load i32, i32* @global_var_202d4.42, align 4
  store i32 %v2_bca0, i32* %r3.global-to-local, align 4
  %v0_bca4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bca4 = add i32 %v0_bca4, 20
  store i32 %v1_bca4, i32* %r0.global-to-local, align 4
  %v1_bca8 = add i32 %v0_bca4, 41
  store i32 %v1_bca8, i32* %r2.global-to-local, align 4
  %v0_bcac = load i32, i32* @fp, align 4
  %v1_bcac = trunc i32 %v0_bcac to i16
  %v3_bcac = add i32 %v0_bca4, 24
  %v4_bcac = inttoptr i32 %v3_bcac to i16*
  store i16 %v1_bcac, i16* %v4_bcac, align 2
  %v0_bcb0 = load i32, i32* @sb, align 4
  %v1_bcb0 = trunc i32 %v0_bcb0 to i16
  %v2_bcb0 = load i32, i32* %r0.global-to-local, align 4
  %v3_bcb0 = add i32 %v2_bcb0, 2
  %v4_bcb0 = inttoptr i32 %v3_bcb0 to i16*
  store i16 %v1_bcb0, i16* %v4_bcb0, align 2
  %v0_bcb4 = load i32, i32* %r1.global-to-local, align 4
  %v1_bcb4 = add i32 %v0_bcb4, 28
  store i32 %v1_bcb4, i32* %ip.global-to-local, align 4
  %v0_bcb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcb8 = load i32, i32* @sl, align 4
  %v2_bcb8 = add i32 %v1_bcb8, %v0_bcb8
  store i32 %v2_bcb8, i32* @r4, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_bcc4 = load i32, i32* @r8, align 4
  %v1_bcc4 = trunc i32 %v0_bcc4 to i16
  %v3_bcc4 = add i32 %v0_bcb4, 20
  %v4_bcc4 = inttoptr i32 %v3_bcc4 to i16*
  store i16 %v1_bcc4, i16* %v4_bcc4, align 2
  %v0_bcc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcc8 = load i32, i32* %r1.global-to-local, align 4
  %v2_bcc8 = add i32 %v1_bcc8, 12
  %v3_bcc8 = inttoptr i32 %v2_bcc8 to i32*
  store i32 %v0_bcc8, i32* %v3_bcc8, align 4
  %v0_bccc = load i32, i32* %r0.global-to-local, align 4
  %v1_bccc = trunc i32 %v0_bccc to i16
  %v2_bccc = load i32, i32* %ip.global-to-local, align 4
  %v3_bccc = add i32 %v2_bccc, 4
  %v4_bccc = inttoptr i32 %v3_bccc to i16*
  store i16 %v1_bccc, i16* %v4_bccc, align 2
  %v0_bcd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bcd0 = trunc i32 %v0_bcd0 to i16
  %v2_bcd0 = load i32, i32* %ip.global-to-local, align 4
  %v3_bcd0 = add i32 %v2_bcd0, 2
  %v4_bcd0 = inttoptr i32 %v3_bcd0 to i16*
  store i16 %v1_bcd0, i16* %v4_bcd0, align 2
  store i32 %stack_var_-2184.0, i32* %r3.global-to-local, align 4
  store i32 %v4_bcd8, i32* %ip.global-to-local, align 4
  %v1_bcdc = load i32, i32* %r1.global-to-local, align 4
  %v2_bcdc = add i32 %v1_bcdc, 16
  %v3_bcdc = inttoptr i32 %v2_bcdc to i32*
  store i32 %stack_var_-2184.0, i32* %v3_bcdc, align 4
  %v0_bce0 = load i32, i32* %ip.global-to-local, align 4
  %v1_bce0 = trunc i32 %v0_bce0 to i16
  %v2_bce0 = load i32, i32* %r1.global-to-local, align 4
  %v3_bce0 = add i32 %v2_bce0, 28
  %v4_bce0 = inttoptr i32 %v3_bce0 to i16*
  store i16 %v1_bce0, i16* %v4_bce0, align 2
  %v0_bce4 = load i32, i32* @sl, align 4
  %v1_bce4 = trunc i32 %v0_bce4 to i8
  %v2_bce4 = load i32, i32* %r1.global-to-local, align 4
  %v3_bce4 = add i32 %v2_bce4, 40
  %v4_bce4 = inttoptr i32 %v3_bce4 to i8*
  store i8 %v1_bce4, i8* %v4_bce4, align 1
  %v0_bce8 = load i32, i32* @r4, align 4
  %v1_bce8 = add i32 %v0_bce8, 1
  store i32 %v1_bce8, i32* %r0.global-to-local, align 4
  %v0_bcec = load i32, i32* @r7, align 4
  store i32 %v0_bcec, i32* %r1.global-to-local, align 4
  %v0_bcf0 = load i32, i32* @r6, align 4
  store i32 %v0_bcf0, i32* %r2.global-to-local, align 4
  %v3_bcf4 = call i32 @function_f7f8(i32 %v1_bce8, i32 %v0_bcec, i32 %v0_bcf0)
  store i32 %v3_bcf4, i32* %r0.global-to-local, align 4
  store i32 %v2_bb00, i32* %lr.global-to-local, align 4
  store i1 %v2_bcfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp124, label %.dec_label_pc_bd48_crit_edge, label %dec_label_pc_bd0c

.dec_label_pc_bd48_crit_edge:                     ; preds = %bb128
  %v5_bd00 = load i32, i32* @r4, align 4
  store i32 %v5_bd00, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bd48

dec_label_pc_bd0c:                                ; preds = %bb128
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_bd10 = load i32, i32* @r4, align 4
  store i32 %v0_bd10, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bd18

dec_label_pc_bd18:                                ; preds = %.thread19, %dec_label_pc_bd0c
  %v1_bd20 = phi i32 [ %v1_bd2035, %.thread19 ], [ 0, %dec_label_pc_bd0c ]
  %v0_bd3417 = phi i32 [ %v0_bd40, %.thread19 ], [ 0, %dec_label_pc_bd0c ]
  %v1_bd18 = load i32, i32* @r7, align 4
  %v2_bd18 = add i32 %v1_bd18, %v0_bd3417
  %v3_bd18 = inttoptr i32 %v2_bd18 to i8*
  %v4_bd18 = load i8, i8* %v3_bd18, align 1
  %v6_bd18 = zext i8 %v4_bd18 to i32
  store i32 %v6_bd18, i32* %r3.global-to-local, align 4
  %v7_bd1c = icmp eq i8 %v4_bd18, 46
  store i1 %v7_bd1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bd1c, label %bb129, label %bb131

bb129:                                            ; preds = %dec_label_pc_bd18
  %v2_bd20 = trunc i32 %v1_bd20 to i8
  %v3_bd20 = load i32, i32* %r0.global-to-local, align 4
  %v4_bd20 = inttoptr i32 %v3_bd20 to i8*
  store i8 %v2_bd20, i8* %v4_bd20, align 1
  %v0_bd28.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_bd24 = load i32, i32* %ip.global-to-local, align 4
  %v1_bd24 = add i32 %v0_bd24, 1
  store i32 %v1_bd24, i32* %r2.global-to-local, align 4
  br i1 %v0_bd28.pr, label %bb132, label %bb130

bb130:                                            ; preds = %bb129
  %v2_bd2815 = urem i32 %v1_bd24, 256
  store i32 %v2_bd2815, i32* %ip.global-to-local, align 4
  store i32 %v2_bb00, i32* %r2.global-to-local, align 4
  %v0_bd34.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_bd34 = add i32 %v0_bd34.pre, 1
  store i32 %v1_bd34, i32* %r1.global-to-local, align 4
  br label %.thread19

bb131:                                            ; preds = %dec_label_pc_bd18
  %v1_bd2411 = add nsw i32 %v1_bd20, 1
  %v2_bd28 = urem i32 %v1_bd2411, 256
  store i32 %v2_bd28, i32* %ip.global-to-local, align 4
  store i32 %v2_bb00, i32* %r2.global-to-local, align 4
  %v1_bd3418 = add i32 %v0_bd3417, 1
  store i32 %v1_bd3418, i32* %r1.global-to-local, align 4
  br label %.thread19

bb132:                                            ; preds = %bb129
  store i32 %v2_bb00, i32* %r2.global-to-local, align 4
  %v1_bd30.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_bd30 = load i32, i32* @r4, align 4
  %v3_bd30 = add i32 %v2_bd30, %v1_bd30.pre
  store i32 %v3_bd30, i32* %r3.global-to-local, align 4
  %v1_bd3465 = add i32 %v1_bd30.pre, 1
  store i32 %v1_bd3465, i32* %r1.global-to-local, align 4
  %v2_bd38 = add i32 %v3_bd30, 1
  store i32 %v2_bd38, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %.thread19

.thread19:                                        ; preds = %bb131, %bb130, %bb132
  %v0_bd40 = phi i32 [ %v1_bd34, %bb130 ], [ %v1_bd3418, %bb131 ], [ %v1_bd3465, %bb132 ]
  %v1_bd2035 = phi i32 [ %v2_bd2815, %bb130 ], [ %v2_bd28, %bb131 ], [ 0, %bb132 ]
  %v9_bd40 = icmp eq i32 %v0_bd40, %v2_bb00
  store i1 %v9_bd40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bd40, label %dec_label_pc_bd48.loopexit, label %dec_label_pc_bd18

dec_label_pc_bd48.loopexit:                       ; preds = %.thread19
  %v2_bd48.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t71 = trunc i32 %v1_bd2035 to i8
  br label %dec_label_pc_bd48

dec_label_pc_bd48:                                ; preds = %.dec_label_pc_bd48_crit_edge, %dec_label_pc_bd48.loopexit
  %v0_bd48.pre.sink.off0 = phi i8 [ 0, %.dec_label_pc_bd48_crit_edge ], [ %extract.t71, %dec_label_pc_bd48.loopexit ]
  %v2_bd48 = phi i32 [ %v5_bd00, %.dec_label_pc_bd48_crit_edge ], [ %v2_bd48.pre, %dec_label_pc_bd48.loopexit ]
  %v3_bd48 = inttoptr i32 %v2_bd48 to i8*
  store i8 %v0_bd48.pre.sink.off0, i8* %v3_bd48, align 1
  %v3_bd4c = load i32, i32* %stack_var_-44, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v1_bd54 = add i32 %v3_bd4c, 1
  store i32 %v1_bd54, i32* @r5, align 4
  store i32 %v2_bb00, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_bd60 = load i32, i32* @r4, align 4
  %v2_bd60 = add i32 %v0_bd60, %v2_bb00
  store i32 %v2_bd60, i32* %r2.global-to-local, align 4
  %v9_bd64 = icmp eq i32 %v1_bd54, %arg2
  store i1 %v9_bd64, i1* %cpsr_z.global-to-local, align 1
  %v3_bd68 = add i32 %v2_bd60, 4
  %v4_bd68 = inttoptr i32 %v3_bd68 to i16*
  store i16 256, i16* %v4_bd68, align 2
  %v0_bd6c = load i32, i32* @lr, align 4
  %v1_bd6c = trunc i32 %v0_bd6c to i16
  %v2_bd6c = load i32, i32* %r2.global-to-local, align 4
  %v3_bd6c = add i32 %v2_bd6c, 2
  %v4_bd6c = inttoptr i32 %v3_bd6c to i16*
  store i16 %v1_bd6c, i16* %v4_bd6c, align 2
  %v0_bd70 = load i32, i32* @r5, align 4
  store i32 %v0_bd70, i32* %stack_var_-44, align 4
  %v8_bd74 = icmp slt i32 %v1_bd54, %arg2
  br i1 %v8_bd74, label %dec_label_pc_bc28, label %dec_label_pc_bd78

dec_label_pc_bd78:                                ; preds = %dec_label_pc_bd48, %dec_label_pc_beec
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 %v2_bb88, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bb88, label %dec_label_pc_beec, label %dec_label_pc_bd8c

dec_label_pc_bd8c:                                ; preds = %dec_label_pc_bd78
  store i32 %v2_bb00, i32* %r1.global-to-local, align 4
  %v1_bd90 = load i32, i32* @sl, align 4
  %v2_bd90 = add i32 %v1_bd90, %v2_bb00
  store i32 %v2_bd90, i32* %r3.global-to-local, align 4
  %v1_bd94 = add i32 %v2_bd90, 47
  store i32 %v1_bd94, i32* @fp, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_bd9c = add i32 %v2_bd90, 27
  store i32 %v1_bd9c, i32* @sb, align 4
  %v3_be78 = icmp eq i32 %v3_bb78, 65535
  %v3_bda8 = icmp eq i32 %v3_bb7c, 65535
  br label %dec_label_pc_be64

dec_label_pc_bda4:                                ; preds = %dec_label_pc_be64
  store i32 %v3_bb7c, i32* %ip.global-to-local, align 4
  store i1 %v3_bda8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bda8, label %dec_label_pc_bea0, label %dec_label_pc_bdb0

dec_label_pc_bdb0:                                ; preds = %dec_label_pc_be8c.dec_label_pc_bdb0_crit_edge, %dec_label_pc_bda4
  %v1_bdb4 = phi i32 [ %v1_bdb4.pre, %dec_label_pc_be8c.dec_label_pc_bdb0_crit_edge ], [ 65535, %dec_label_pc_bda4 ]
  store i32 %v3_bb80, i32* @lr, align 4
  %v9_bdb4 = icmp eq i32 %v3_bb80, %v1_bdb4
  store i1 %v9_bdb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bdb4, label %dec_label_pc_beb4, label %dec_label_pc_bdbc

dec_label_pc_bdbc:                                ; preds = %dec_label_pc_bea0.dec_label_pc_bdbc_crit_edge, %dec_label_pc_bdb0
  %v1_bdc0 = phi i32 [ %v1_bdc0.pre, %dec_label_pc_bea0.dec_label_pc_bdbc_crit_edge ], [ %v1_bdb4, %dec_label_pc_bdb0 ]
  store i32 %v3_bb84, i32* %r0.global-to-local, align 4
  %v9_bdc0 = icmp eq i32 %v3_bb84, %v1_bdc0
  store i1 %v9_bdc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bdc0, label %dec_label_pc_bec8, label %dec_label_pc_bdc8

dec_label_pc_bdc8:                                ; preds = %dec_label_pc_beb4, %dec_label_pc_bdbc, %dec_label_pc_bec8
  %v0_bdc8 = load i32, i32* @r7, align 4
  store i32 %v0_bdc8, i32* %r0.global-to-local, align 4
  %v0_bdcc = load i32, i32* @sl, align 4
  store i32 %v0_bdcc, i32* %r1.global-to-local, align 4
  %v2_bdd0 = call i32 @function_cb9c(i32 %v0_bdc8, i32 %v0_bdcc)
  %v0_bdd4 = load i32, i32* @r8, align 4
  %v1_bdd4 = trunc i32 %v0_bdd4 to i8
  %v2_bdd4 = load i32, i32* @r7, align 4
  %v3_bdd4 = load i32, i32* @sl, align 4
  %v4_bdd4 = add i32 %v3_bdd4, %v2_bdd4
  %v5_bdd4 = inttoptr i32 %v4_bdd4 to i8*
  store i8 %v1_bdd4, i8* %v5_bdd4, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bddc = load i32, i32* @r8, align 4
  %v1_bddc = trunc i32 %v0_bddc to i16
  %v2_bddc = load i32, i32* @r4, align 4
  %v3_bddc = add i32 %v2_bddc, 10
  %v4_bddc = inttoptr i32 %v3_bddc to i16*
  store i16 %v1_bddc, i16* %v4_bddc, align 2
  %v0_bde0 = load i32, i32* @r4, align 4
  store i32 %v0_bde0, i32* @r0, align 4
  %v2_bde4 = call i32 @function_bf78(i32 %v0_bde0, i32 20)
  %v3_bde4 = trunc i32 %v2_bde4 to i16
  store i32 %v2_bde4, i32* %r0.global-to-local, align 4
  %v3_bde8 = load i32, i32* @r4, align 4
  %v4_bde8 = add i32 %v3_bde8, 10
  %v5_bde8 = inttoptr i32 %v4_bde8 to i16*
  store i16 %v3_bde4, i16* %v5_bde8, align 2
  %v0_bdec = load i32, i32* @r6, align 4
  store i32 %v0_bdec, i32* @r1, align 4
  %v1_bdf0 = add i32 %v0_bdec, 4
  %v2_bdf0 = inttoptr i32 %v1_bdf0 to i16*
  %v3_bdf0 = load i16, i16* %v2_bdf0, align 2
  %v4_bdf0 = zext i16 %v3_bdf0 to i32
  store i32 %v4_bdf0, i32* %r2.global-to-local, align 4
  %v0_bdf4 = load i32, i32* @r8, align 4
  %v1_bdf4 = trunc i32 %v0_bdf4 to i16
  %v3_bdf4 = add i32 %v0_bdec, 6
  %v4_bdf4 = inttoptr i32 %v3_bdf4 to i16*
  store i16 %v1_bdf4, i16* %v4_bdf4, align 2
  %v0_bdf8 = load i32, i32* @sb, align 4
  store i32 %v0_bdf8, i32* %r3.global-to-local, align 4
  %v0_bdfc = load i32, i32* @r4, align 4
  store i32 %v0_bdfc, i32* %r0.global-to-local, align 4
  %v4_be00 = call i32 @function_bfc8(i32 %v0_bdfc, i32 %v0_bdec, i32 %v4_bdf0, i32 %v0_bdf8)
  %v5_be00 = trunc i32 %v4_be00 to i16
  store i32 %v4_be00, i32* %r0.global-to-local, align 4
  %v3_be04 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_be04, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r1.global-to-local, align 4
  %v3_be0c = mul i32 %v3_be04, 32
  store i32 %v3_be0c, i32* %ip.global-to-local, align 4
  %v3_be10 = load i32, i32* @r6, align 4
  %v4_be10 = add i32 %v3_be10, 6
  %v5_be10 = inttoptr i32 %v4_be10 to i16*
  store i16 %v5_be00, i16* %v5_be10, align 2
  store i32 %stack_var_-2184.0, i32* %r2.global-to-local, align 4
  %v0_be18 = load i32, i32* @r6, align 4
  %v1_be18 = add i32 %v0_be18, 2
  %v2_be18 = inttoptr i32 %v1_be18 to i16*
  %v3_be18 = load i16, i16* %v2_be18, align 2
  %v4_be18 = zext i16 %v3_be18 to i32
  store i32 %v4_be18, i32* %r6.global-to-local, align 4
  %v0_be1c = load i32, i32* %ip.global-to-local, align 4
  %v1_be1c = load i32, i32* %r3.global-to-local, align 4
  %tmp135 = mul i32 %v1_be1c, -8
  %v5_be1c = add i32 %v0_be1c, %tmp135
  %v1_be20 = load i32, i32* %r1.global-to-local, align 4
  %v2_be20 = add i32 %v1_be20, %v5_be1c
  store i32 %v2_be20, i32* %ip.global-to-local, align 4
  %v2_be24 = add i32 %v2_be20, 4
  %v3_be24 = inttoptr i32 %v2_be24 to i32*
  store i32 %stack_var_-2184.0, i32* %v3_be24, align 4
  %v0_be28 = load i32, i32* %r6.global-to-local, align 4
  %v1_be28 = trunc i32 %v0_be28 to i16
  %v2_be28 = load i32, i32* %ip.global-to-local, align 4
  %v3_be28 = add i32 %v2_be28, 2
  %v4_be28 = inttoptr i32 %v3_be28 to i16*
  store i16 %v1_be28, i16* %v4_be28, align 2
  %v0_be2c = load i32, i32* @r4, align 4
  store i32 %v0_be2c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_bb14, i32* %r0.global-to-local, align 4
  %v0_be38 = load i32, i32* @fp, align 4
  store i32 %v0_be38, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_be40 = load i32, i32* %ip.global-to-local, align 4
  %v6_be48 = call i32 @function_10300(i32 %v3_bb14, i32 %v0_be2c, i32 %v0_be38, i32 16384, i32 %v0_be40, i32 16)
  %v3_be4c = load i32, i32* %stack_var_-44, align 4
  %v1_be50 = add i32 %v3_be4c, 1
  store i32 %v1_be50, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  %v9_be58 = icmp eq i32 %v1_be50, %arg2
  store i1 %v9_be58, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_be50, i32* %stack_var_-44, align 4
  %v7_be60 = icmp slt i32 %v1_be50, %arg2
  br i1 %v7_be60, label %dec_label_pc_be64, label %dec_label_pc_beec

dec_label_pc_be64:                                ; preds = %dec_label_pc_bdc8, %dec_label_pc_bd8c
  %v1_be70 = phi i32 [ %v1_be50, %dec_label_pc_bdc8 ], [ 0, %dec_label_pc_bd8c ]
  store i32 %v2_b8c4, i32* %r2.global-to-local, align 4
  store i32 %v3_bb78, i32* %r3.global-to-local, align 4
  %v4_be70 = mul i32 %v1_be70, 4
  %v5_be70 = add i32 %v4_be70, %v2_b8c4
  %v6_be70 = inttoptr i32 %v5_be70 to i32*
  %v7_be70 = load i32, i32* %v6_be70, align 4
  store i32 %v7_be70, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_be78, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* @r8, align 4
  %v1_be80 = add i32 %v7_be70, 20
  store i32 %v1_be80, i32* @r6, align 4
  %v1_be84 = add i32 %v7_be70, 41
  store i32 %v1_be84, i32* @r7, align 4
  br i1 %v3_be78, label %dec_label_pc_be8c, label %dec_label_pc_bda4

dec_label_pc_be8c:                                ; preds = %dec_label_pc_be64
  %v0_be8c = call i32 @function_cad8()
  %v1_be8c = trunc i32 %v0_be8c to i16
  store i32 %v0_be8c, i32* %r0.global-to-local, align 4
  store i32 %v3_bb7c, i32* %ip.global-to-local, align 4
  %v1_be94 = load i32, i32* @r5, align 4
  %v9_be94 = icmp eq i32 %v3_bb7c, %v1_be94
  store i1 %v9_be94, i1* %cpsr_z.global-to-local, align 1
  %v3_be98 = load i32, i32* @r4, align 4
  %v4_be98 = add i32 %v3_be98, 4
  %v5_be98 = inttoptr i32 %v4_be98 to i16*
  store i16 %v1_be8c, i16* %v5_be98, align 2
  br i1 %v9_be94, label %dec_label_pc_bea0, label %dec_label_pc_be8c.dec_label_pc_bdb0_crit_edge

dec_label_pc_be8c.dec_label_pc_bdb0_crit_edge:    ; preds = %dec_label_pc_be8c
  %v1_bdb4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bdb0

dec_label_pc_bea0:                                ; preds = %dec_label_pc_be8c, %dec_label_pc_bda4
  %v0_bea0 = call i32 @function_cad8()
  %v1_bea0 = trunc i32 %v0_bea0 to i16
  store i32 %v0_bea0, i32* %r0.global-to-local, align 4
  store i32 %v3_bb80, i32* @lr, align 4
  %v1_bea8 = load i32, i32* @r5, align 4
  %v9_bea8 = icmp eq i32 %v3_bb80, %v1_bea8
  store i1 %v9_bea8, i1* %cpsr_z.global-to-local, align 1
  %v3_beac = load i32, i32* @r4, align 4
  %v4_beac = add i32 %v3_beac, 20
  %v5_beac = inttoptr i32 %v4_beac to i16*
  store i16 %v1_bea0, i16* %v5_beac, align 2
  br i1 %v9_bea8, label %dec_label_pc_beb4, label %dec_label_pc_bea0.dec_label_pc_bdbc_crit_edge

dec_label_pc_bea0.dec_label_pc_bdbc_crit_edge:    ; preds = %dec_label_pc_bea0
  %v1_bdc0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bdbc

dec_label_pc_beb4:                                ; preds = %dec_label_pc_bea0, %dec_label_pc_bdb0
  %v0_beb4 = call i32 @function_cad8()
  %v1_beb4 = trunc i32 %v0_beb4 to i16
  %v3_beb8 = load i32, i32* @r6, align 4
  %v4_beb8 = add i32 %v3_beb8, 2
  %v5_beb8 = inttoptr i32 %v4_beb8 to i16*
  store i16 %v1_beb4, i16* %v5_beb8, align 2
  store i32 %v3_bb84, i32* %r0.global-to-local, align 4
  %v1_bec0 = load i32, i32* @r5, align 4
  %v9_bec0 = icmp eq i32 %v3_bb84, %v1_bec0
  store i1 %v9_bec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bec0, label %dec_label_pc_bec8, label %dec_label_pc_bdc8

dec_label_pc_bec8:                                ; preds = %dec_label_pc_beb4, %dec_label_pc_bdbc
  %v0_bec8 = call i32 @function_cad8()
  %v1_bec8 = trunc i32 %v0_bec8 to i16
  store i32 %v0_bec8, i32* %r0.global-to-local, align 4
  %v3_becc = load i32, i32* @r4, align 4
  %v4_becc = add i32 %v3_becc, 28
  %v5_becc = inttoptr i32 %v4_becc to i16*
  store i16 %v1_bec8, i16* %v5_becc, align 2
  br label %dec_label_pc_bdc8

dec_label_pc_bed4:                                ; preds = %dec_label_pc_bb24
  store i32 %v3_bb14, i32* %r0.global-to-local, align 4
  %v1_bed8 = call i32 @function_10008(i32 %v3_bb14)
  store i32 %v1_bed8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bedc

dec_label_pc_bedc:                                ; preds = %dec_label_pc_beec, %dec_label_pc_bafc, %dec_label_pc_bae4, %dec_label_pc_bed4
  %v1_bee8 = phi i32 [ %v3_bb14, %dec_label_pc_bafc ], [ %v2_baf0, %dec_label_pc_bae4 ], [ %v1_bed8, %dec_label_pc_bed4 ], [ %v2_bef0, %dec_label_pc_beec ]
  store i32 %v9_b894, i32* %r6.global-to-local, align 4
  store i32 %v18_b894, i32* %sb.global-to-local, align 4
  store i32 %v27_b894, i32* %lr.global-to-local, align 4
  ret i32 %v1_bee8

dec_label_pc_beec.critedge:                       ; preds = %dec_label_pc_bb4c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br label %dec_label_pc_beec

dec_label_pc_beec:                                ; preds = %dec_label_pc_bdc8, %dec_label_pc_beec.critedge, %dec_label_pc_bd78
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bef0 = call i32 @function_fcbc(i32* null)
  store i32 %v2_bef0, i32* %r0.global-to-local, align 4
  %v9_bef8 = icmp eq i32 %v2_baf0, %v2_bef0
  store i1 %v9_bef8, i1* %cpsr_z.global-to-local, align 1
  %v6_befc = icmp slt i32 %v2_baf0, %v2_bef0
  br i1 %v6_befc, label %dec_label_pc_bedc, label %dec_label_pc_bd78

dec_label_pc_bf04:                                ; preds = %dec_label_pc_ba9c, %bb113
  %v0_baa4.lcssa = phi i32 [ %v1_ba70, %dec_label_pc_ba9c ], [ %v0_baa4, %bb113 ]
  %v2_bf08 = sub i32 %v0_baa4.lcssa, %v0_ba4c
  store i32 %v2_bf08, i32* @r4, align 4
  %v2_bf0c = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_ba60, i32* %r1.global-to-local, align 4
  store i32 %v2_bf0c, i32* %r0.global-to-local, align 4
  store i32 %v2_bf08, i32* %r2.global-to-local, align 4
  %v3_bf1c = call i32 @function_f7f8(i32 %v2_bf0c, i32 %v2_ba60, i32 %v2_bf08)
  %v2_bf20 = ptrtoint i32* %stack_var_-40 to i32
  %v1_bf24 = load i32, i32* @r4, align 4
  %v2_bf24 = add i32 %v1_bf24, %v2_bf20
  store i32 %v2_bf24, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_bf0c, i32* @r0, align 4
  %v3_bf30 = add i32 %v2_bf24, -36
  %v4_bf30 = inttoptr i32 %v3_bf30 to i8*
  store i8 0, i8* %v4_bf30, align 1
  %v1_bf34 = call i32 @function_100d4(i32 %v2_bf0c)
  store i32 %v1_bf34, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bae4

dec_label_pc_bf40:                                ; preds = %dec_label_pc_bab0
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bae4

dec_label_pc_bf50:                                ; preds = %dec_label_pc_bab0
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_bae4

dec_label_pc_bf64:                                ; preds = %dec_label_pc_bab0
  store i32 707416650, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bae4

; uselistorder directives
  uselistorder i32 %v1_bf34, { 1, 0 }
  uselistorder i32 %v2_bf0c, { 0, 1, 3, 2 }
  uselistorder i32 %v2_bf08, { 1, 0, 2 }
  uselistorder i32 %v2_bef0, { 1, 2, 3, 0 }
  uselistorder i32 %v0_bec8, { 1, 0 }
  uselistorder i32 %v0_bea0, { 1, 0 }
  uselistorder i32 %v0_be8c, { 1, 0 }
  uselistorder i32 %v7_be70, { 1, 0, 2 }
  uselistorder i32 %v1_be50, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v4_be00, { 1, 0 }
  uselistorder i32 %v0_bdec, { 1, 0, 2, 3 }
  uselistorder i32 %v2_bde4, { 1, 0 }
  uselistorder i1 %v3_bda8, { 1, 0 }
  uselistorder i1 %v3_be78, { 1, 0 }
  uselistorder i32 %v1_bd30.pre, { 1, 0 }
  uselistorder i32 %v2_bd28, { 1, 0 }
  uselistorder i32 %v2_bd2815, { 1, 0 }
  uselistorder i32 %v0_bd3417, { 1, 0 }
  uselistorder i32 %v1_bd20, { 1, 0 }
  uselistorder i32 %v3_bc0c, { 1, 0 }
  uselistorder i32 %v3_bbf8, { 1, 0 }
  uselistorder i32 %v3_bbb8, { 1, 0 }
  uselistorder i32 %v1_bb8c, { 1, 0 }
  uselistorder i32 %v3_bb80, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_bb7c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_bb44, { 1, 0 }
  uselistorder i1 %v7_bb18, { 1, 0 }
  uselistorder i32 %v3_bb14, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_bb00, { 0, 13, 1, 8, 3, 6, 7, 5, 9, 11, 10, 4, 12, 2 }
  uselistorder i32 %v2_baf0, { 2, 1, 0, 3 }
  uselistorder i32 %v0_baec, { 1, 0, 2 }
  uselistorder i32 %stack_var_-2184.0, { 0, 3, 2, 1 }
  uselistorder i32 %v1_bab4, { 1, 0 }
  uselistorder i32 %v0_bab0, { 1, 0 }
  uselistorder i32 %v1_baa4, { 1, 0 }
  uselistorder i1 %v7_ba90, { 1, 0 }
  uselistorder i32 %v1_ba8c, { 1, 0, 2 }
  uselistorder i1 %v8_ba84, { 1, 0 }
  uselistorder i1 %v7_ba80, { 1, 0 }
  uselistorder i32 %v1_ba74, { 1, 0 }
  uselistorder i8 %v2_ba68, { 2, 0, 1, 3 }
  uselistorder i32 %v0_ba6c, { 1, 0 }
  uselistorder i32 %v0_ba8c, { 1, 2, 3, 0 }
  uselistorder i32 %v2_ba60, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ba5c, { 1, 0, 2 }
  uselistorder i32 %v0_ba54, { 1, 0, 2, 3 }
  uselistorder i1 %v7_ba4c, { 1, 0 }
  uselistorder i32 %v0_ba4c, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_b9f0, { 1, 0, 2, 3 }
  uselistorder i32 %v6_b990, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v6_b974, { 0, 2, 1, 3 }
  uselistorder i32 %v6_b95c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b944, { 1, 2, 0 }
  uselistorder i32 %v5_b938, { 0, 2, 1 }
  uselistorder i32 %v7_b900, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_b8e8, { 2, 1, 0 }
  uselistorder i32 %v6_b8dc, { 1, 0 }
  uselistorder i32 %v2_b8c4, { 0, 3, 1, 2, 4 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 8, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder i32* %r2.global-to-local, { 5, 6, 3, 10, 7, 8, 9, 11, 12, 13, 1, 14, 2, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 4, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 2, 12, 1, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 47, 46, 48, 50, 49, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 5, 4, 1, 8, 6, 9, 7, 10, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20, 22, 21, 23, 24, 25, 33, 26, 27, 28, 29, 30, 31, 32, 37, 34, 35, 36, 38, 40, 39, 42, 41, 43, 44, 45, 47, 46, 48, 49, 51, 50, 52, 54, 53, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 13, 14, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 0, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i32 (i32)* @function_100d4, { 1, 0 }
  uselistorder i32 41, { 1, 2, 3, 0 }
  uselistorder i8 17, { 1, 2, 0 }
  uselistorder i8 -16, { 0, 1, 3, 2, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 %arg2, { 3, 4, 6, 7, 0, 1, 5, 2, 8, 9, 10, 11 }
  uselistorder label %dec_label_pc_beec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bedc, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_bdc8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bd78, { 1, 0 }
  uselistorder label %dec_label_pc_bd48, { 1, 0 }
  uselistorder label %.thread19, { 2, 0, 1 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %dec_label_pc_baa4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ba9c, { 1, 0 }
  uselistorder label %dec_label_pc_ba90, { 1, 0 }
}

define i32 @function_bf78(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_bf78:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_bf9c, label %dec_label_pc_bf84

dec_label_pc_bf84:                                ; preds = %dec_label_pc_bf78
  %v0_bf8c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_bf88

dec_label_pc_bf88:                                ; preds = %dec_label_pc_bf88, %dec_label_pc_bf84
  %v0_bf94 = phi i32 [ %v2_bf94, %dec_label_pc_bf88 ], [ 0, %dec_label_pc_bf84 ]
  %v0_bf8c = phi i32 [ %v5_bf8c, %dec_label_pc_bf88 ], [ %v0_bf8c.pre, %dec_label_pc_bf84 ]
  %v0_bf88 = phi i32 [ %v1_bf88, %dec_label_pc_bf88 ], [ %arg1, %dec_label_pc_bf84 ]
  %v1_bf88 = add i32 %v0_bf88, -2
  %v1_bf8c = inttoptr i32 %v0_bf8c to i16*
  %v2_bf8c = load i16, i16* %v1_bf8c, align 2
  %v3_bf8c = zext i16 %v2_bf8c to i32
  %v5_bf8c = add i32 %v0_bf8c, -2
  store i32 %v5_bf8c, i32* @r0, align 4
  %v2_bf94 = add i32 %v3_bf8c, %v0_bf94
  %v1_bf88.cmp = icmp ugt i32 %v1_bf88, 1
  br i1 %v1_bf88.cmp, label %dec_label_pc_bf88, label %dec_label_pc_bf9c.loopexit

dec_label_pc_bf9c.loopexit:                       ; preds = %dec_label_pc_bf88
  br label %dec_label_pc_bf9c

dec_label_pc_bf9c:                                ; preds = %dec_label_pc_bf78, %dec_label_pc_bf9c.loopexit
  %v1_bfa4 = phi i32 [ %v2_bf94, %dec_label_pc_bf9c.loopexit ], [ 0, %dec_label_pc_bf78 ]
  %v0_bf9c = phi i32 [ %v1_bf88, %dec_label_pc_bf9c.loopexit ], [ %arg1, %dec_label_pc_bf78 ]
  %v7_bf9c = icmp eq i32 %v0_bf9c, 1
  br i1 %v7_bf9c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_bf9c
  %v1_bfa0 = load i32, i32* @r0, align 4
  %v2_bfa0 = inttoptr i32 %v1_bfa0 to i8*
  %v3_bfa0 = load i8, i8* %v2_bfa0, align 1
  %v4_bfa0 = zext i8 %v3_bfa0 to i32
  %v3_bfa4 = add i32 %v1_bfa4, %v4_bfa0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bf9c, %bb
  %v0_bfa8 = phi i32 [ %v1_bfa4, %dec_label_pc_bf9c ], [ %v3_bfa4, %bb ]
  %v3_bfac = urem i32 %v0_bfa8, 65536
  %v4_bfb0 = udiv i32 %v0_bfa8, 65536
  %v5_bfb0 = add nuw nsw i32 %v4_bfb0, %v3_bfac
  %v4_bfb4 = udiv i32 %v5_bfb0, 65536
  %v5_bfb4 = add nuw nsw i32 %v4_bfb4, %v5_bfb0
  %v1_bfb8 = urem i32 %v5_bfb4, 65536
  %v3_bfc0 = xor i32 %v1_bfb8, 65535
  ret i32 %v3_bfc0

; uselistorder directives
  uselistorder i32 %v5_bfb0, { 1, 0 }
  uselistorder i32 %v5_bf8c, { 1, 0 }
  uselistorder i32 %v1_bf88, { 1, 0, 2 }
  uselistorder i32 %v0_bf8c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_bf9c, { 1, 0 }
}

define i32 @function_bfc8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bfc8:
  %v1_bfd8 = add i32 %arg1, 12
  %v2_bfd8 = inttoptr i32 %v1_bfd8 to i32*
  %v3_bfd8 = load i32, i32* %v2_bfd8, align 4
  %v1_bfdc = add i32 %arg1, 16
  %v2_bfdc = inttoptr i32 %v1_bfdc to i32*
  %v3_bfdc = load i32, i32* %v2_bfdc, align 4
  %v7_bfe0 = icmp sgt i32 %arg3, 1
  br i1 %v7_bfe0, label %dec_label_pc_bfec.preheader, label %dec_label_pc_c000

dec_label_pc_bfec.preheader:                      ; preds = %dec_label_pc_bfc8
  %v0_bff0.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_bfec

dec_label_pc_bfec:                                ; preds = %dec_label_pc_bfec.preheader, %dec_label_pc_bfec
  %v0_bff8 = phi i32 [ 0, %dec_label_pc_bfec.preheader ], [ %v2_bff8, %dec_label_pc_bfec ]
  %v0_bff0 = phi i32 [ %v0_bff0.pre, %dec_label_pc_bfec.preheader ], [ %v5_bff0, %dec_label_pc_bfec ]
  %v0_bfec = phi i32 [ %arg3, %dec_label_pc_bfec.preheader ], [ %v1_bfec, %dec_label_pc_bfec ]
  %v1_bfec = add nsw i32 %v0_bfec, -2
  %v1_bff0 = inttoptr i32 %v0_bff0 to i16*
  %v2_bff0 = load i16, i16* %v1_bff0, align 2
  %v3_bff0 = zext i16 %v2_bff0 to i32
  %v5_bff0 = add i32 %v0_bff0, -2
  store i32 %v5_bff0, i32* @r1, align 4
  %v2_bff8 = add i32 %v3_bff0, %v0_bff8
  %v8_bffc = icmp sgt i32 %v1_bfec, 1
  br i1 %v8_bffc, label %dec_label_pc_bfec, label %dec_label_pc_c000.loopexit

dec_label_pc_c000.loopexit:                       ; preds = %dec_label_pc_bfec
  br label %dec_label_pc_c000

dec_label_pc_c000:                                ; preds = %dec_label_pc_c000.loopexit, %dec_label_pc_bfc8
  %v1_c00c = phi i32 [ %v2_bff8, %dec_label_pc_c000.loopexit ], [ 0, %dec_label_pc_bfc8 ]
  %v0_c000 = phi i32 [ %v1_bfec, %dec_label_pc_c000.loopexit ], [ %arg3, %dec_label_pc_bfc8 ]
  %v7_c000 = icmp eq i32 %v0_c000, 1
  br i1 %v7_c000, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c000
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c000
  %v1_c004 = load i32, i32* @r1, align 4
  %v2_c004 = inttoptr i32 %v1_c004 to i8*
  %v3_c004 = load i8, i8* %v2_c004, align 1
  %v4_c004 = zext i8 %v3_c004 to i32
  %v3_c00c = add i32 %v4_c004, %v1_c00c
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c034 = phi i32 [ %v1_c00c, %.thread ], [ %v3_c00c, %bb ]
  %v0_c014 = mul i32 %v3_bfd8, 65536
  %v3_c014 = udiv i32 %v0_c014, 65536
  %v3_c018 = urem i32 %v3_bfdc, 65536
  %v4_c020 = udiv i32 %v3_bfd8, 65536
  %v2_c01c = add nuw nsw i32 %v3_c018, %v4_c020
  %v5_c020 = add nuw nsw i32 %v2_c01c, %v3_c014
  %v1_c024 = add i32 %arg1, 9
  %v2_c024 = inttoptr i32 %v1_c024 to i8*
  %v3_c024 = load i8, i8* %v2_c024, align 1
  %v4_c024 = zext i8 %v3_c024 to i32
  %v4_c028 = udiv i32 %v3_bfdc, 65536
  %v3_c030 = mul nuw nsw i32 %v4_c024, 256
  %v5_c028 = add i32 %v4_c028, %arg2
  %v2_c02c = add i32 %v5_c028, %v1_c034
  %v2_c034 = add i32 %v2_c02c, %v5_c020
  %v2_c038 = add i32 %v2_c034, %v3_c030
  %tmp = icmp ult i32 %v2_c038, 65536
  br i1 %tmp, label %dec_label_pc_c058, label %dec_label_pc_c044

dec_label_pc_c044:                                ; preds = %bb19, %dec_label_pc_c044
  %v2_c04c5 = phi i32 [ %v2_c04c, %dec_label_pc_c044 ], [ %v2_c038, %bb19 ]
  %v3_c0506.in = phi i32 [ %v2_c04c, %dec_label_pc_c044 ], [ %v2_c038, %bb19 ]
  %v3_c0506 = udiv i32 %v3_c0506.in, 65536
  %v3_c048 = urem i32 %v2_c04c5, 65536
  %v2_c04c = add nuw nsw i32 %v3_c048, %v3_c0506
  %tmp20 = icmp ult i32 %v2_c04c, 65536
  br i1 %tmp20, label %dec_label_pc_c058.loopexit, label %dec_label_pc_c044

dec_label_pc_c058.loopexit:                       ; preds = %dec_label_pc_c044
  br label %dec_label_pc_c058

dec_label_pc_c058:                                ; preds = %dec_label_pc_c058.loopexit, %bb19
  %v0_c058 = phi i32 [ %v2_c04c, %dec_label_pc_c058.loopexit ], [ %v2_c038, %bb19 ]
  %v1_c058 = urem i32 %v0_c058, 65536
  %v3_c060 = xor i32 %v1_c058, 65535
  ret i32 %v3_c060

; uselistorder directives
  uselistorder i32 %v2_c04c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c038, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c00c, { 1, 0 }
  uselistorder i32 %v5_bff0, { 1, 0 }
  uselistorder i32 %v0_bff0, { 1, 0 }
  uselistorder i32 %v3_bfd8, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c044, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_bfec, { 1, 0 }
}

define i32 @function_c06c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c06c:
  store i32 49284, i32* inttoptr (i32 123020 to i32*), align 4
  ret i32 %arg1
}

define i32 @function_c084(i32 %arg1) local_unnamed_addr {
dec_label_pc_c084:
  %v1_c08c = call i32 @function_f3cc(i32 1)
  store i32 ptrtoint (i16** @global_var_202d8.55 to i32), i32* @r4, align 4
  store i32 -1378207815, i32* @global_var_202dc.57, align 4
  %v3_c0a4 = call i32 @function_f308(i32 1, i32* null)
  %v4_c0a4 = inttoptr i32 %v3_c0a4 to i16*
  %v3_c0a8 = load i16, i16* %v4_c0a4, align 2
  store i16 %v3_c0a8, i16* bitcast (i32* @global_var_202da.58 to i16*), align 4
  %v1_c0b4 = call i32 @function_f32c(i32 1)
  ret i32 %v1_c0b4
}

define i32 @function_c0c8(i32 %arg1) local_unnamed_addr {
dec_label_pc_c0c8:
  %r0.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i16, align 2
  %stack_var_-28 = alloca i32, align 4
  %v9_c0c8 = load i32, i32* @r6, align 4
  %v12_c0c8 = load i32, i32* @r7, align 4
  %v15_c0c8 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_c0e4 = call i32 @function_10384(i32 2, i32 1, i32 0)
  store i32 %v3_c0e4, i32* %r0.global-to-local, align 4
  store i32 123012, i32* @r6, align 4
  %v7_c0ec = icmp eq i32 %v3_c0e4, -1
  store i32 %v3_c0e4, i32* inttoptr (i32 123012 to i32*), align 4
  br i1 %v7_c0ec, label %dec_label_pc_c0c8.dec_label_pc_c1a4_crit_edge, label %dec_label_pc_c0f8

dec_label_pc_c0c8.dec_label_pc_c1a4_crit_edge:    ; preds = %dec_label_pc_c0c8
  %v1_c1ac.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c1a4

dec_label_pc_c0f8:                                ; preds = %dec_label_pc_c0c8
  %v2_c0f8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_c0f8, i32* @r3, align 4
  %v0_c0fc = load i32, i32* @r4, align 4
  store i32 4, i32* %r5.global-to-local, align 4
  %v0_c10c = load i32, i32* %r0.global-to-local, align 4
  %v5_c10c = call i32 @function_10340(i32 %v0_c10c, i32 %v0_c0fc, i32 2, i32 %v2_c0f8, i32 4)
  store i32 %v5_c10c, i32* %r0.global-to-local, align 4
  %v0_c110 = load i32, i32* @r6, align 4
  %v1_c110 = inttoptr i32 %v0_c110 to i32*
  %v2_c110 = load i32, i32* %v1_c110, align 4
  store i32 %v2_c110, i32* %r0.global-to-local, align 4
  %v2_c120 = call i32 @function_fe3c(i32 %v2_c110, i32 3)
  %v0_c124 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_c110, i32* %r0.global-to-local, align 4
  %v2_c130 = call i32 @function_fe3c(i32 %v2_c110, i32 %v0_c124)
  store i32 %v2_c130, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @1 to i32), i32* @r8, align 4
  %v0_c160 = call i32 @function_1003c()
  store i32 %v0_c160, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v2_c168 = inttoptr i32 %v0_c160 to i32*
  store i32 0, i32* %v2_c168, align 4
  %v2_c16c = ptrtoint i16* %stack_var_-44 to i32
  store i32 %v2_c16c, i32* @r5, align 4
  store i32 %v0_c160, i32* @r4, align 4
  %v0_c17c = load i32, i32* @r6, align 4
  %v1_c17c = inttoptr i32 %v0_c17c to i32*
  %v2_c17c = load i32, i32* %v1_c17c, align 4
  store i32 %v2_c17c, i32* %r0.global-to-local, align 4
  store i16 2, i16* %stack_var_-44, align 2
  %v7_c188 = call i32 @function_10134(i32 %v2_c17c, i32 %v2_c16c, i32 16, i32 2, i32 2)
  store i32 %v7_c188, i32* %r0.global-to-local, align 4
  %v7_c18c = icmp eq i32 %v7_c188, -1
  br i1 %v7_c18c, label %dec_label_pc_c1b0, label %dec_label_pc_c194

dec_label_pc_c194:                                ; preds = %dec_label_pc_c0f8
  %v2_c19c = load i32, i32* inttoptr (i32 123012 to i32*), align 4
  store i32 %v2_c19c, i32* %r0.global-to-local, align 4
  %v2_c1a0 = call i32 @function_10220(i32 %v2_c19c, i32 1)
  store i32 %v2_c1a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c1a4

dec_label_pc_c1a4:                                ; preds = %dec_label_pc_c0c8.dec_label_pc_c1a4_crit_edge, %dec_label_pc_c1bc, %dec_label_pc_c194
  %v1_c1ac = phi i32 [ %v1_c1ac.pre, %dec_label_pc_c0c8.dec_label_pc_c1a4_crit_edge ], [ %v1_c1f8, %dec_label_pc_c1bc ], [ %v2_c1a0, %dec_label_pc_c194 ]
  store i32 %v9_c0c8, i32* @r6, align 4
  store i32 %v12_c0c8, i32* @r7, align 4
  store i32 %v15_c0c8, i32* @r8, align 4
  ret i32 %v1_c1ac

dec_label_pc_c1b0:                                ; preds = %dec_label_pc_c0f8
  %v0_c1b0 = load i32, i32* @r4, align 4
  %v1_c1b0 = inttoptr i32 %v0_c1b0 to i32*
  %v2_c1b0 = load i32, i32* %v1_c1b0, align 4
  %v7_c1b4 = icmp eq i32 %v2_c1b0, 99
  br i1 %v7_c1b4, label %dec_label_pc_c200, label %dec_label_pc_c1bc

dec_label_pc_c1bc:                                ; preds = %dec_label_pc_c200, %bb, %dec_label_pc_c1b0
  %v0_c1d4 = load i32, i32* @r6, align 4
  %v1_c1d4 = inttoptr i32 %v0_c1d4 to i32*
  %v2_c1d4 = load i32, i32* %v1_c1d4, align 4
  store i32 %v2_c1d4, i32* %r0.global-to-local, align 4
  store i16 2, i16* %stack_var_-44, align 2
  %v3_c1e4 = call i32 @function_1016c(i32 %v2_c1d4, i32 %v2_c16c, i32 16)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_c1ec = call i32 @function_11a94(i32 5)
  store i32 %v1_c1ec, i32* %r0.global-to-local, align 4
  %v0_c1f0 = load i32, i32* @r6, align 4
  %v1_c1f0 = inttoptr i32 %v0_c1f0 to i32*
  %v2_c1f0 = load i32, i32* %v1_c1f0, align 4
  store i32 %v2_c1f0, i32* %r0.global-to-local, align 4
  %v1_c1f4 = call i32 @function_10008(i32 %v2_c1f0)
  store i32 %v1_c1f4, i32* %r0.global-to-local, align 4
  %v1_c1f8 = call i32 @function_c0c8(i32 %v1_c1f4)
  store i32 %v1_c1f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c1a4

dec_label_pc_c200:                                ; preds = %dec_label_pc_c1b0
  %v0_c200 = load i32, i32* @r8, align 4
  %v1_c200 = inttoptr i32 %v0_c200 to i8*
  %v2_c200 = load i8, i8* %v1_c200, align 1
  %v3_c200 = zext i8 %v2_c200 to i32
  %v1_c204 = load i32, i32* @r7, align 4
  %v9_c204 = icmp eq i32 %v3_c200, %v1_c204
  br i1 %v9_c204, label %dec_label_pc_c1bc, label %bb

bb:                                               ; preds = %dec_label_pc_c200
  %v2_c20c = trunc i32 %v1_c204 to i8
  store i8 %v2_c20c, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), align 1
  br label %dec_label_pc_c1bc

; uselistorder directives
  uselistorder i32 %v1_c1f8, { 1, 0 }
  uselistorder i32 %v2_c16c, { 1, 0, 2 }
  uselistorder i32 %v2_c110, { 1, 0, 2, 3 }
  uselistorder i32 %v3_c0e4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i16* %stack_var_-44, { 2, 1, 0 }
  uselistorder i32* %r0.global-to-local, { 18, 2, 1, 17, 4, 3, 0, 5, 7, 6, 8, 10, 9, 11, 12, 14, 15, 16, 13 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10134, { 1, 0 }
  uselistorder [4 x i8]* @1, { 1, 0 }
  uselistorder label %dec_label_pc_c1bc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c1a4, { 1, 2, 0 }
}

define i32 @function_c214(i32 %arg1, i32 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_c214:
  %v0_c214 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c214, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_c214
  %v4_c21c = load i64, i64* %arg3, align 4
  %v7_c21c = udiv i64 %v4_c21c, 4294967296
  %v8_c21c = trunc i64 %v7_c21c to i32
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_c214, %bb
  %v12_c21c = phi i32 [ %arg1, %dec_label_pc_c214 ], [ %v8_c21c, %bb ]
  ret i32 %v12_c21c

; uselistorder directives
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_c220(i32 %arg1) local_unnamed_addr {
dec_label_pc_c220:
  %stack_var_-20 = alloca i32, align 4
  %v3_c220 = load i32, i32* @r4, align 4
  %v6_c220 = load i32, i32* @r5, align 4
  %v9_c220 = load i32, i32* @lr, align 4
  %v0_c228 = call i32 @function_fd2c()
  %v7_c22c = icmp eq i32 %v0_c228, -1
  %. = zext i1 %v7_c22c to i32
  %tmp11 = icmp slt i32 %v0_c228, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_c248 = icmp eq i32 %storemerge4, 0
  store i32 %v0_c228, i32* @global_var_1e254.63, align 4
  br i1 %v2_c248, label %dec_label_pc_c260, label %dec_label_pc_c254

dec_label_pc_c254:                                ; preds = %dec_label_pc_c220
  store i32 %v3_c220, i32* @r4, align 4
  store i32 %v6_c220, i32* @r5, align 4
  store i32 %v9_c220, i32* @lr, align 4
  ret i32 %v0_c228

dec_label_pc_c260:                                ; preds = %dec_label_pc_c220
  store i32 1, i32* %stack_var_-20, align 4
  %v1_c26c = call i32 @function_f3cc(i32 17)
  %v1_c274 = call i32 @function_f3cc(i32 18)
  %v0_c278 = load i32, i32* @r5, align 4
  %v2_c280 = inttoptr i32 %v0_c278 to i32*
  %v3_c280 = call i32 @function_f308(i32 17, i32* %v2_c280)
  %v2_c288 = call i32 @function_fc48(i32 %v3_c280, i32 2)
  %v7_c28c = icmp eq i32 %v2_c288, -1
  store i32 %v2_c288, i32* @r4, align 4
  br i1 %v7_c28c, label %dec_label_pc_c2d4, label %dec_label_pc_c298

dec_label_pc_c298:                                ; preds = %dec_label_pc_c2d4, %dec_label_pc_c260
  %v0_c2a4 = phi i32 [ %v2_c2e4, %dec_label_pc_c2d4 ], [ %v2_c288, %dec_label_pc_c260 ]
  %v2_c2a8 = ptrtoint i32* %stack_var_-20 to i32
  %v3_c2ac = call i32 @function_ff7c(i32 %v0_c2a4, i32 -2147199228, i32 %v2_c2a8)
  br label %dec_label_pc_c2b0

dec_label_pc_c2b0:                                ; preds = %dec_label_pc_c2b0, %dec_label_pc_c298
  %v0_c2bc = load i32, i32* @r4, align 4
  %v3_c2c4 = call i32 @function_ff7c(i32 %v0_c2bc, i32 -2147199227, i32 0)
  %v1_c2cc = call i32 @function_11a94(i32 10)
  br label %dec_label_pc_c2b0

dec_label_pc_c2d4:                                ; preds = %dec_label_pc_c260
  %v0_c2d4 = load i32, i32* @r5, align 4
  %v2_c2dc = inttoptr i32 %v0_c2d4 to i32*
  %v3_c2dc = call i32 @function_f308(i32 18, i32* %v2_c2dc)
  %v2_c2e4 = call i32 @function_fc48(i32 %v3_c2dc, i32 2)
  %v3_c2e8 = icmp eq i32 %v2_c2e4, -1
  store i32 %v2_c2e4, i32* @r4, align 4
  br i1 %v3_c2e8, label %dec_label_pc_c2f4, label %dec_label_pc_c298

dec_label_pc_c2f4:                                ; preds = %dec_label_pc_c2d4
  %v1_c2f8 = call i32 @function_f32c(i32 17)
  %v1_c300 = call i32 @function_f32c(i32 18)
  %v0_c304 = load i32, i32* @r5, align 4
  %v1_c308 = call i32 @function_119dc(i32 %v0_c304)
  %v0_c30c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_c30c, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_c2f4
  %v2_c30c = load i32, i32* @r4, align 4
  %v8_c30c = ashr i32 %v2_c30c, %arg1
  %v9_c30c = and i32 %v8_c30c, 2
  store i32 %v9_c30c, i32* @lr, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_c2f4, %bb14
  ret i32 %v1_c308

; uselistorder directives
  uselistorder i32 %v2_c2e4, { 1, 2, 0 }
  uselistorder i32 %v2_c288, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_c228, { 3, 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_c310(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_c310:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1432 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-408 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v15_c310 = load i32, i32* @r8, align 4
  %v2_c320 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_c320, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_c338 = call i32 @function_1041c(i32* nonnull %stack_var_-64)
  store i32 %v2_c320, i32* @r0, align 4
  %v2_c344 = call i32 @function_103d8(i32 %v2_c320, i32 2)
  %v0_c348 = load i32, i32* @r5, align 4
  store i32 %v0_c348, i32* %r2.global-to-local, align 4
  %v3_c354 = call i32 @function_ffd0(i32 %v0_c348, i32 %v2_c320, i32 %v0_c348)
  %v2_c360 = call i32 @function_10430(i32 17, i32 1)
  %v2_c36c = call i32 @function_10430(i32 5, i32 49260)
  %v0_c370 = call i32 @function_f9e8()
  store i16 -23551, i16* bitcast (i32* @global_var_202da.58 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_202d4.42 to i32), i32* %r3.global-to-local, align 4
  store i32 -583215265, i32* %r2.global-to-local, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 %v0_c370, i32* @global_var_202d4.42, align 4
  store i32 -583215265, i32* @global_var_202dc.57, align 4
  store i16 2, i16* bitcast (i16** @global_var_202d8.55 to i16*), align 4
  %v5_c3a4 = call i32 @function_f46c(i32 %v0_c370, i32 ptrtoint (i16** @global_var_202d8.55 to i32), i32 -583215265, i32 ptrtoint (i32* @global_var_202d4.42 to i32))
  store i32 49284, i32* %r3.global-to-local, align 4
  store i32 123020, i32* @lr, align 4
  %v2_c3b0 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_c3b0, i32* @sb, align 4
  store i32 49284, i32* inttoptr (i32 123020 to i32*), align 4
  %v1_c3b8 = call i32 @function_c0c8(i32 %v5_c3a4)
  %v1_c3bc = call i32 @function_cb34(i32 %v1_c3b8)
  %v2_c3c8 = call i32 @function_f81c(i32 %v2_c3b0, i32 32)
  %v0_c3cc = load i32, i32* @r6, align 4
  %v7_c3cc = icmp eq i32 %v0_c3cc, 2
  br i1 %v7_c3cc, label %dec_label_pc_c4f8, label %dec_label_pc_c3d4

dec_label_pc_c3d4:                                ; preds = %dec_label_pc_c4f8, %dec_label_pc_c310, %dec_label_pc_c508
  %v0_c3d4 = call i32 @function_cad8()
  store i32 %v0_c3d4, i32* @r6, align 4
  %v0_c3dc = load i32, i32* @r8, align 4
  %v1_c3dc = inttoptr i32 %v0_c3dc to i32*
  %v2_c3dc = load i32, i32* %v1_c3dc, align 4
  %v1_c3e0 = inttoptr i32 %v2_c3dc to i8*
  %v2_c3e0 = call i32 @function_f788(i8* %v1_c3e0)
  %v0_c3e8 = load i32, i32* @r8, align 4
  %v1_c3e8 = inttoptr i32 %v0_c3e8 to i32*
  %v2_c3e8 = load i32, i32* %v1_c3e8, align 4
  %v1_c3ec = inttoptr i32 %v2_c3e8 to i8*
  %v2_c3ec = call i32 @function_f788(i8* %v1_c3ec)
  %v1_c3f0 = sub i32 20, %v2_c3e0
  store i32 %v2_c3ec, i32* @r4, align 4
  %v0_c3f8 = load i32, i32* @r6, align 4
  %v2_c3fc = call i32 @function_fc08(i32 %v0_c3f8, i32 %v1_c3f0)
  %v2_c400 = ptrtoint i32* %stack_var_-120 to i32
  store i32 %v2_c400, i32* @r5, align 4
  %v0_c404 = load i32, i32* @r4, align 4
  %v2_c404 = add i32 %v0_c404, %v1_c3f0
  store i32 %v2_c404, i32* @r4, align 4
  %v2_c410 = call i32 @function_cb9c(i32 %v2_c400, i32 %v2_c404)
  %v2_c414 = ptrtoint i32* %stack_var_-40 to i32
  %v1_c418 = load i32, i32* @r4, align 4
  %v2_c418 = add i32 %v1_c418, %v2_c414
  store i32 %v2_c418, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_c424 = load i32, i32* @r8, align 4
  %v1_c424 = inttoptr i32 %v0_c424 to i32*
  %v2_c424 = load i32, i32* %v1_c424, align 4
  store i32 %v2_c424, i32* @r0, align 4
  %v3_c428 = add i32 %v2_c418, -80
  %v4_c428 = inttoptr i32 %v3_c428 to i8*
  store i8 0, i8* %v4_c428, align 1
  %v2_c42c = inttoptr i32 %v2_c424 to i8*
  %v3_c42c = call i32 @function_f7b0(i8* %v2_c42c, i32 %v2_c400)
  %v2_c438 = call i32 @function_f81c(i32 %v2_c400, i32 32)
  %v0_c43c = call i32 @function_cad8()
  store i32 %v0_c43c, i32* @r7, align 4
  %v0_c444 = load i32, i32* @r8, align 4
  %v1_c444 = inttoptr i32 %v0_c444 to i32*
  %v2_c444 = load i32, i32* %v1_c444, align 4
  %v1_c448 = inttoptr i32 %v2_c444 to i8*
  %v2_c448 = call i32 @function_f788(i8* %v1_c448)
  store i32 %v2_c448, i32* @r6, align 4
  %v0_c450 = load i32, i32* @r8, align 4
  %v1_c450 = inttoptr i32 %v0_c450 to i32*
  %v2_c450 = load i32, i32* %v1_c450, align 4
  %v1_c454 = inttoptr i32 %v2_c450 to i8*
  %v2_c454 = call i32 @function_f788(i8* %v1_c454)
  %v0_c458 = load i32, i32* @r6, align 4
  %v1_c458 = sub i32 20, %v0_c458
  store i32 %v2_c454, i32* @r4, align 4
  %v0_c460 = load i32, i32* @r7, align 4
  %v2_c464 = call i32 @function_fc08(i32 %v0_c460, i32 %v1_c458)
  %v0_c468 = load i32, i32* @r4, align 4
  %v2_c468 = add i32 %v0_c468, %v1_c458
  store i32 %v2_c468, i32* @r4, align 4
  %v2_c474 = call i32 @function_cb9c(i32 %v2_c400, i32 %v2_c468)
  store i32 %v2_c414, i32* %r2.global-to-local, align 4
  %v1_c47c = load i32, i32* @r4, align 4
  %v2_c47c = add i32 %v1_c47c, %v2_c414
  store i32 %v2_c47c, i32* %r3.global-to-local, align 4
  %v0_c480 = load i32, i32* @sl, align 4
  %v1_c480 = trunc i32 %v0_c480 to i8
  %v3_c480 = add i32 %v2_c47c, -80
  %v4_c480 = inttoptr i32 %v3_c480 to i8*
  store i8 %v1_c480, i8* %v4_c480, align 1
  %v4_c48c = call i32 @function_fcec(i32 15, i32 %v2_c400, i32 %v2_c414, i32 %v2_c47c)
  %v1_c494 = call i32 @function_f3cc(i32 3)
  %v3_c4a4 = call i32 @function_f308(i32 3, i32* nonnull %stack_var_-48)
  %v3_c4a8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_c4a8, i32* %r2.global-to-local, align 4
  %v2_c4b4 = call i32 @function_ff14(i32 1, i32 %v3_c4a4)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_c4c4 = call i32 @function_ff14(i32 1, i32 ptrtoint (i32* @global_var_15024.70 to i32))
  %v1_c4cc = call i32 @function_f32c(i32 3)
  %v1_c4d0 = call i32 @function_8560(i32 %v1_c4cc)
  store i32 %v1_c4d0, i32* @r0, align 4
  %v1_c4d4 = call i32 @function_c220(i32 %v1_c4d0)
  store i32 %v1_c4d4, i32* @r0, align 4
  %v0_c4d8 = call i32 @function_fd2c()
  %v1_c4dc = load i32, i32* @sl, align 4
  %v7_c4e0 = icmp sgt i32 %v0_c4d8, %v1_c4dc
  br i1 %v7_c4e0, label %dec_label_pc_c4e4, label %dec_label_pc_c530

dec_label_pc_c4e4:                                ; preds = %dec_label_pc_c3d4
  store i32 %v15_c310, i32* %r8.global-to-local, align 4
  ret i32 %v1_c4dc

dec_label_pc_c4f8:                                ; preds = %dec_label_pc_c310
  %v0_c4f8 = load i32, i32* @r8, align 4
  %v1_c4f8 = add i32 %v0_c4f8, 4
  %v2_c4f8 = inttoptr i32 %v1_c4f8 to i32*
  %v3_c4f8 = load i32, i32* %v2_c4f8, align 4
  %v1_c4fc = inttoptr i32 %v3_c4f8 to i8*
  %v2_c4fc = call i32 @function_f788(i8* %v1_c4fc)
  %v8_c504 = icmp sgt i32 %v2_c4fc, 31
  br i1 %v8_c504, label %dec_label_pc_c3d4, label %dec_label_pc_c508

dec_label_pc_c508:                                ; preds = %dec_label_pc_c4f8
  %v0_c508 = load i32, i32* @r8, align 4
  %v1_c508 = add i32 %v0_c508, 4
  %v2_c508 = inttoptr i32 %v1_c508 to i32*
  %v3_c508 = load i32, i32* %v2_c508, align 4
  store i32 %v2_c3b0, i32* @r0, align 4
  %v2_c510 = bitcast i32* %stack_var_-152 to i8*
  %v3_c510 = call i32 @function_f7b0(i8* %v2_c510, i32 %v3_c508)
  %v0_c514 = load i32, i32* @r8, align 4
  %v1_c514 = add i32 %v0_c514, 4
  %v2_c514 = inttoptr i32 %v1_c514 to i32*
  %v3_c514 = load i32, i32* %v2_c514, align 4
  %v1_c51c = inttoptr i32 %v3_c514 to i8*
  %v2_c51c = call i32 @function_f788(i8* %v1_c51c)
  %v2_c528 = call i32 @function_f81c(i32 %v3_c514, i32 %v2_c51c)
  br label %dec_label_pc_c3d4

dec_label_pc_c530:                                ; preds = %dec_label_pc_c3d4
  %v1_c530 = call i32 @function_ff48(i32 %v0_c4d8)
  %v0_c538 = load i32, i32* @sl, align 4
  %v1_c53c = call i32 @function_10008(i32 %v0_c538)
  %v1_c544 = call i32 @function_10008(i32 1)
  %v1_c54c = call i32 @function_10008(i32 2)
  store i32 123016, i32* @fp, align 4
  %v1_c554 = call i32 @function_8560(i32 %v1_c54c)
  store i32 %v1_c554, i32* @r0, align 4
  %v1_c558 = call i32 @function_c220(i32 %v1_c554)
  store i32 %v1_c558, i32* @r0, align 4
  %v1_c55c = call i32 @function_cebc(i32 %v1_c558)
  %v0_c560 = load i32, i32* @sl, align 4
  %v2_c564 = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_c564, i32* @r7, align 4
  %v2_c568 = ptrtoint i32* %stack_var_-408 to i32
  store i32 %v2_c568, i32* @r6, align 4
  %v2_c648 = ptrtoint i32* %stack_var_-72 to i32
  %v2_c698 = ptrtoint i32* %stack_var_-168 to i32
  %v2_c874 = ptrtoint i32* %stack_var_-56 to i32
  %v2_c87c = ptrtoint i8** %stack_var_-42 to i32
  %v2_ca20 = ptrtoint i32* %stack_var_-1432 to i32
  %v2_c898 = ptrtoint i32* %stack_var_-52 to i32
  %v1_c948 = bitcast i32* %stack_var_-152 to i8*
  %v2_c90c = ptrtoint i32* %stack_var_-88 to i32
  %v1_c924 = sub i32 0, %v1_c530
  br label %dec_label_pc_c56c

dec_label_pc_c56c:                                ; preds = %dec_label_pc_c9a8, %dec_label_pc_ca44, %bb43, %dec_label_pc_c944, %dec_label_pc_c77c, %dec_label_pc_c76c, %bb40, %dec_label_pc_ca98, %dec_label_pc_ca04, %dec_label_pc_c9b8, %dec_label_pc_c994, %dec_label_pc_c8c4, %dec_label_pc_c7ec, %dec_label_pc_c724, %dec_label_pc_c530
  %stack_var_-1436.0 = phi i32 [ %v0_c560, %dec_label_pc_c530 ], [ %stack_var_-1436.0, %bb40 ], [ %stack_var_-1436.1, %dec_label_pc_c76c ], [ %stack_var_-1436.1, %dec_label_pc_c77c ], [ %stack_var_-1436.1, %bb43 ], [ %stack_var_-1436.1, %dec_label_pc_c9b8 ], [ %stack_var_-1436.1, %dec_label_pc_c7ec ], [ %stack_var_-1436.1, %dec_label_pc_ca44 ], [ %stack_var_-1436.1, %dec_label_pc_ca98 ], [ %stack_var_-1436.1, %dec_label_pc_ca04 ], [ %stack_var_-1436.1, %dec_label_pc_c724 ], [ %stack_var_-1436.1, %dec_label_pc_c944 ], [ %stack_var_-1436.1, %dec_label_pc_c994 ], [ %stack_var_-1436.1, %dec_label_pc_c8c4 ], [ %stack_var_-1436.1, %dec_label_pc_c9a8 ]
  store i32 0, i32* %stack_var_-280, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c578

dec_label_pc_c578:                                ; preds = %dec_label_pc_c578, %dec_label_pc_c56c
  %v1_c57c = phi i32 [ %v1_c580, %dec_label_pc_c578 ], [ 4, %dec_label_pc_c56c ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c57c = load i32, i32* @r7, align 4
  %v3_c57c = add i32 %v2_c57c, %v1_c57c
  %v4_c57c = inttoptr i32 %v3_c57c to i32*
  store i32 0, i32* %v4_c57c, align 4
  %v0_c580 = load i32, i32* %r3.global-to-local, align 4
  %v1_c580 = add i32 %v0_c580, 4
  store i32 %v1_c580, i32* %r3.global-to-local, align 4
  %v7_c584 = icmp eq i32 %v1_c580, 128
  br i1 %v7_c584, label %dec_label_pc_c58c, label %dec_label_pc_c578

dec_label_pc_c58c:                                ; preds = %dec_label_pc_c578
  %v0_c58c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_c58c, i32* %stack_var_-408, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c594

dec_label_pc_c594:                                ; preds = %dec_label_pc_c594, %dec_label_pc_c58c
  %v1_c598 = phi i32 [ %v1_c59c, %dec_label_pc_c594 ], [ 4, %dec_label_pc_c58c ]
  store i32 0, i32* @r4, align 4
  %v2_c598 = load i32, i32* @r6, align 4
  %v3_c598 = add i32 %v2_c598, %v1_c598
  %v4_c598 = inttoptr i32 %v3_c598 to i32*
  store i32 0, i32* %v4_c598, align 4
  %v0_c59c = load i32, i32* %r3.global-to-local, align 4
  %v1_c59c = add i32 %v0_c59c, 4
  store i32 %v1_c59c, i32* %r3.global-to-local, align 4
  %v7_c5a0 = icmp eq i32 %v1_c59c, 128
  br i1 %v7_c5a0, label %dec_label_pc_c5a8, label %dec_label_pc_c594

dec_label_pc_c5a8:                                ; preds = %dec_label_pc_c594
  store i32 123012, i32* %r3.global-to-local, align 4
  %v2_c5ac = load i32, i32* inttoptr (i32 123012 to i32*), align 4
  %v7_c5b0 = icmp eq i32 %v2_c5ac, -1
  br i1 %v7_c5b0, label %dec_label_pc_c5dc, label %dec_label_pc_c5b8

dec_label_pc_c5b8:                                ; preds = %dec_label_pc_c5a8
  %v3_c5b8 = udiv i32 %v2_c5ac, 32
  %v3_c5bc = mul nuw nsw i32 %v3_c5b8, 4
  store i32 %v2_c414, i32* %ip.global-to-local, align 4
  %v2_c5c4 = add i32 %v3_c5bc, %v2_c414
  store i32 %v2_c5c4, i32* %r3.global-to-local, align 4
  %v1_c5c8 = add i32 %v2_c5c4, -240
  %v2_c5c8 = inttoptr i32 %v1_c5c8 to i32*
  %v3_c5c8 = load i32, i32* %v2_c5c8, align 4
  %v1_c5cc = urem i32 %v2_c5ac, 32
  %v7_c5d4 = shl i32 1, %v1_c5cc
  %v8_c5d4 = or i32 %v3_c5c8, %v7_c5d4
  store i32 %v8_c5d4, i32* %r2.global-to-local, align 4
  store i32 %v8_c5d4, i32* %v2_c5c8, align 4
  br label %dec_label_pc_c5dc

dec_label_pc_c5dc:                                ; preds = %dec_label_pc_c5a8, %dec_label_pc_c5b8
  %v0_c5dc = load i32, i32* @fp, align 4
  %v1_c5dc = inttoptr i32 %v0_c5dc to i32*
  %v2_c5dc = load i32, i32* %v1_c5dc, align 4
  store i32 %v2_c5dc, i32* @r3, align 4
  %v7_c5e0 = icmp eq i32 %v2_c5dc, -1
  store i32 123016, i32* %r8.global-to-local, align 4
  br i1 %v7_c5e0, label %dec_label_pc_c804, label %dec_label_pc_c5ec

dec_label_pc_c5ec:                                ; preds = %dec_label_pc_c804, %dec_label_pc_c5dc, %bb42
  %v2_c5f0 = load i8, i8* bitcast (i8** @global_var_1e258.74 to i8*), align 4
  %v3_c5f0 = zext i8 %v2_c5f0 to i32
  store i32 %v3_c5f0, i32* %r3.global-to-local, align 4
  %v2_c5f4 = icmp eq i8 %v2_c5f0, 0
  %v0_c740 = load i32, i32* @fp, align 4
  %v1_c740 = inttoptr i32 %v0_c740 to i32*
  %v2_c740 = load i32, i32* %v1_c740, align 4
  store i32 %v2_c740, i32* %ip.global-to-local, align 4
  %v3_c744 = udiv i32 %v2_c740, 32
  store i32 %v3_c744, i32* %r3.global-to-local, align 4
  br i1 %v2_c5f4, label %dec_label_pc_c740, label %dec_label_pc_c5fc

dec_label_pc_c5fc:                                ; preds = %dec_label_pc_c5ec
  %v3_c608 = mul nuw nsw i32 %v3_c744, 4
  %v2_c60c = add i32 %v3_c608, %v2_c414
  store i32 %v2_c60c, i32* %r3.global-to-local, align 4
  %v1_c610 = add i32 %v2_c60c, -368
  %v2_c610 = inttoptr i32 %v1_c610 to i32*
  %v3_c610 = load i32, i32* %v2_c610, align 4
  %v1_c614 = urem i32 %v2_c740, 32
  %v7_c61c = shl i32 1, %v1_c614
  %v8_c61c = or i32 %v3_c610, %v7_c61c
  store i32 %v8_c61c, i32* %r2.global-to-local, align 4
  store i32 %v8_c61c, i32* %v2_c610, align 4
  br label %dec_label_pc_c624

dec_label_pc_c624:                                ; preds = %dec_label_pc_c740, %dec_label_pc_c5fc
  store i32 123012, i32* %r3.global-to-local, align 4
  %v2_c628 = load i32, i32* inttoptr (i32 123012 to i32*), align 4
  store i32 0, i32* @lr, align 4
  %v0_c630 = load i32, i32* %ip.global-to-local, align 4
  %v5_c634 = icmp slt i32 %v0_c630, %v2_c628
  br i1 %v5_c634, label %bb40, label %bb

bb:                                               ; preds = %dec_label_pc_c624
  br label %bb40

bb40:                                             ; preds = %dec_label_pc_c624, %bb
  %v0_c644 = phi i32 [ %v2_c628, %dec_label_pc_c624 ], [ %v0_c630, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  %v1_c644 = add i32 %v0_c644, 1
  store i32 %v2_c648, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c568, i32* %r2.global-to-local, align 4
  %v5_c660 = call i32 @function_fd60(i32 %v1_c644, i32 %v2_c564, i32 %v2_c568, i32 0, i32 %v2_c648)
  %v8_c664 = icmp eq i32 %v5_c660, -1
  br i1 %v8_c664, label %dec_label_pc_c56c, label %dec_label_pc_c66c

dec_label_pc_c66c:                                ; preds = %bb40
  %v6_c660 = trunc i32 %v5_c660 to i16
  %v3_c66c = icmp eq i16 %v6_c660, 0
  br i1 %v3_c66c, label %dec_label_pc_c674, label %dec_label_pc_c6a8

dec_label_pc_c674:                                ; preds = %dec_label_pc_c66c
  %v5_c680 = srem i32 %stack_var_-1436.0, 6
  %v4_c688 = sub i32 %stack_var_-1436.0, %v5_c680
  store i32 %v4_c688, i32* %r3.global-to-local, align 4
  %v2_c690 = icmp eq i32 %v5_c680, 0
  %v1_c694 = add i32 %stack_var_-1436.0, 1
  store i32 %v1_c694, i32* @lr, align 4
  store i32 %v2_c698, i32* %r2.global-to-local, align 4
  %v7_c69c = inttoptr i32 %v5_c660 to i8*
  store i8* %v7_c69c, i8** %stack_var_-42, align 4
  br i1 %v2_c690, label %dec_label_pc_c874, label %dec_label_pc_c6a8

dec_label_pc_c6a8:                                ; preds = %dec_label_pc_c66c, %dec_label_pc_c674, %dec_label_pc_c874
  %stack_var_-1436.1 = phi i32 [ %v1_c694, %dec_label_pc_c874 ], [ %v1_c694, %dec_label_pc_c674 ], [ %stack_var_-1436.0, %dec_label_pc_c66c ]
  store i32 123012, i32* %r3.global-to-local, align 4
  %v2_c6ac = load i32, i32* inttoptr (i32 123012 to i32*), align 4
  %v7_c6b0 = icmp eq i32 %v2_c6ac, -1
  br i1 %v7_c6b0, label %dec_label_pc_c6dc, label %dec_label_pc_c6b8

dec_label_pc_c6b8:                                ; preds = %dec_label_pc_c6a8
  %v3_c6b8 = udiv i32 %v2_c6ac, 32
  %v3_c6bc = mul nuw nsw i32 %v3_c6b8, 4
  store i32 %v2_c414, i32* %ip.global-to-local, align 4
  %v2_c6c4 = add i32 %v3_c6bc, %v2_c414
  store i32 %v2_c6c4, i32* %r3.global-to-local, align 4
  %v1_c6c8 = add i32 %v2_c6c4, -240
  %v2_c6c8 = inttoptr i32 %v1_c6c8 to i32*
  %v3_c6c8 = load i32, i32* %v2_c6c8, align 4
  %v1_c6cc = urem i32 %v2_c6ac, 32
  %v6_c6d0 = lshr i32 %v3_c6c8, %v1_c6cc
  store i32 %v6_c6d0, i32* %r2.global-to-local, align 4
  %v1_c6d4 = urem i32 %v6_c6d0, 2
  %v2_c6d4 = icmp eq i32 %v1_c6d4, 0
  br i1 %v2_c6d4, label %dec_label_pc_c6dc, label %dec_label_pc_c900

dec_label_pc_c6dc:                                ; preds = %dec_label_pc_c6b8, %dec_label_pc_c6a8
  %v2_c6e0 = load i8, i8* bitcast (i8** @global_var_1e258.74 to i8*), align 4
  %v3_c6e0 = zext i8 %v2_c6e0 to i32
  store i32 %v3_c6e0, i32* @r4, align 4
  %v2_c6e4 = icmp eq i8 %v2_c6e0, 0
  %v0_c76c = load i32, i32* @fp, align 4
  %v1_c76c = inttoptr i32 %v0_c76c to i32*
  %v2_c76c = load i32, i32* %v1_c76c, align 4
  br i1 %v2_c6e4, label %dec_label_pc_c76c, label %dec_label_pc_c6ec

dec_label_pc_c6ec:                                ; preds = %dec_label_pc_c6dc
  %v3_c6f0 = udiv i32 %v2_c76c, 32
  store i32 %v2_c414, i32* %r2.global-to-local, align 4
  %v3_c6f8 = mul nuw nsw i32 %v3_c6f0, 4
  %v2_c6fc = add i32 %v3_c6f8, %v2_c414
  store i32 %v2_c6fc, i32* %r3.global-to-local, align 4
  %v1_c700 = add i32 %v2_c6fc, -368
  %v2_c700 = inttoptr i32 %v1_c700 to i32*
  %v3_c700 = load i32, i32* %v2_c700, align 4
  %v1_c704 = urem i32 %v2_c76c, 32
  %v6_c708 = lshr i32 %v3_c700, %v1_c704
  store i32 %v6_c708, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e258.74 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_c714 = urem i32 %v6_c708, 2
  %v2_c714 = icmp eq i32 %v1_c714, 0
  store i8 0, i8* bitcast (i8** @global_var_1e258.74 to i8*), align 4
  store i32 123016, i32* @r5, align 4
  br i1 %v2_c714, label %dec_label_pc_c724, label %dec_label_pc_c890

dec_label_pc_c724:                                ; preds = %dec_label_pc_c6ec
  store i32 50988, i32* @lr, align 4
  %v1_c728 = icmp ne i32 %v2_c76c, -1
  call void @__pseudo_cond_branch(i1 %v1_c728, i32 ptrtoint (i32* @global_var_10008.76 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_c730 = load i32, i32* @r5, align 4
  %v2_c730 = inttoptr i32 %v1_c730 to i32*
  store i32 -1, i32* %v2_c730, align 4
  %v1_c738 = call i32 @function_11a94(i32 1)
  br label %dec_label_pc_c56c

dec_label_pc_c740:                                ; preds = %dec_label_pc_c5ec
  store i32 %v2_c414, i32* %r2.global-to-local, align 4
  %v3_c74c = mul nuw nsw i32 %v3_c744, 4
  %v2_c750 = add i32 %v3_c74c, %v2_c414
  store i32 %v2_c750, i32* %r3.global-to-local, align 4
  %v1_c754 = add i32 %v2_c750, -240
  %v2_c754 = inttoptr i32 %v1_c754 to i32*
  %v3_c754 = load i32, i32* %v2_c754, align 4
  %v1_c758 = urem i32 %v2_c740, 32
  %v7_c760 = shl i32 1, %v1_c758
  %v8_c760 = or i32 %v3_c754, %v7_c760
  store i32 %v8_c760, i32* %r2.global-to-local, align 4
  store i32 %v8_c760, i32* %v2_c754, align 4
  br label %dec_label_pc_c624

dec_label_pc_c76c:                                ; preds = %dec_label_pc_c6dc
  %v7_c770 = icmp eq i32 %v2_c76c, -1
  store i32 123016, i32* @r8, align 4
  br i1 %v7_c770, label %dec_label_pc_c56c, label %dec_label_pc_c77c

dec_label_pc_c77c:                                ; preds = %dec_label_pc_c76c
  %v3_c77c = udiv i32 %v2_c76c, 32
  store i32 %v2_c414, i32* %r2.global-to-local, align 4
  %v3_c784 = mul nuw nsw i32 %v3_c77c, 4
  %v2_c788 = add i32 %v3_c784, %v2_c414
  store i32 %v2_c788, i32* %r3.global-to-local, align 4
  %v1_c78c = add i32 %v2_c788, -240
  %v2_c78c = inttoptr i32 %v1_c78c to i32*
  %v3_c78c = load i32, i32* %v2_c78c, align 4
  %v1_c790 = urem i32 %v2_c76c, 32
  %v6_c794 = lshr i32 %v3_c78c, %v1_c790
  store i32 %v6_c794, i32* %r2.global-to-local, align 4
  %v1_c798 = urem i32 %v6_c794, 2
  %v2_c798 = icmp eq i32 %v1_c798, 0
  br i1 %v2_c798, label %dec_label_pc_c56c, label %dec_label_pc_c7a0

dec_label_pc_c7a0:                                ; preds = %dec_label_pc_c77c
  %v6_c7a4 = inttoptr i32 %v3_c6e0 to i8*
  store i8* %v6_c7a4, i8** %stack_var_-42, align 4
  store i32 %v2_c87c, i32* @sl, align 4
  %v0_c7a8 = call i32 @function_1003c()
  %v0_c7ac = load i32, i32* @r4, align 4
  %v2_c7ac = inttoptr i32 %v0_c7a8 to i32*
  store i32 %v0_c7ac, i32* %v2_c7ac, align 4
  store i32 %v0_c7a8, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_c7bc = load i32, i32* @r8, align 4
  %v1_c7bc = inttoptr i32 %v0_c7bc to i32*
  %v2_c7bc = load i32, i32* %v1_c7bc, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_c7c8 = call i32 @function_10254(i32 %v2_c7bc, i32 %v2_c87c, i32 2, i32 16386)
  %v7_c7cc = icmp eq i32 %v4_c7c8, -1
  br i1 %v7_c7cc, label %dec_label_pc_c9a8, label %dec_label_pc_c7d4

dec_label_pc_c7d4:                                ; preds = %dec_label_pc_c7a0
  %v2_c7d4 = icmp eq i32 %v4_c7c8, 0
  br i1 %v2_c7d4, label %dec_label_pc_c9b8, label %dec_label_pc_c7dc

dec_label_pc_c7dc:                                ; preds = %dec_label_pc_c7d4
  store i32 %v2_c698, i32* %ip.global-to-local, align 4
  %v3_c7e0 = load i8*, i8** %stack_var_-42, align 4
  %v4_c7e0 = ptrtoint i8* %v3_c7e0 to i32
  store i32 %v4_c7e0, i32* %r3.global-to-local, align 4
  %v2_c7e4 = icmp eq i8* %v3_c7e0, null
  br i1 %v2_c7e4, label %dec_label_pc_c7ec, label %dec_label_pc_c9e8

dec_label_pc_c7ec:                                ; preds = %dec_label_pc_c7dc
  %v0_c7ec = load i32, i32* @r8, align 4
  %v1_c7ec = inttoptr i32 %v0_c7ec to i32*
  %v2_c7ec = load i32, i32* %v1_c7ec, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_c7f8 = add i32 %v4_c7e0, 16384
  store i32 %v1_c7f8, i32* %r3.global-to-local, align 4
  %v4_c7fc = call i32 @function_10254(i32 %v2_c7ec, i32 %v2_c87c, i32 2, i32 %v1_c7f8)
  br label %dec_label_pc_c56c

dec_label_pc_c804:                                ; preds = %dec_label_pc_c5dc
  %v0_c80c = load i32, i32* @r4, align 4
  store i32 %v0_c80c, i32* %r2.global-to-local, align 4
  %v3_c810 = call i32 @function_10384(i32 2, i32 1, i32 %v0_c80c)
  %v7_c814 = icmp eq i32 %v3_c810, -1
  store i32 %v3_c810, i32* @r5, align 4
  %v1_c81c = load i32, i32* %r8.global-to-local, align 4
  %v2_c81c = inttoptr i32 %v1_c81c to i32*
  store i32 %v3_c810, i32* %v2_c81c, align 4
  br i1 %v7_c814, label %dec_label_pc_c5ec, label %dec_label_pc_c824

dec_label_pc_c824:                                ; preds = %dec_label_pc_c804
  %v0_c824 = load i32, i32* @r4, align 4
  store i32 %v0_c824, i32* %r2.global-to-local, align 4
  %v2_c82c = call i32 @function_fe3c(i32 %v3_c810, i32 3)
  %v1_c834 = or i32 %v2_c82c, 2048
  store i32 %v1_c834, i32* %r2.global-to-local, align 4
  %v0_c838 = load i32, i32* @r5, align 4
  %v2_c83c = call i32 @function_fe3c(i32 %v0_c838, i32 4)
  %v2_c844 = load i32, i32* inttoptr (i32 123020 to i32*), align 4
  store i32 %v2_c844, i32* %r3.global-to-local, align 4
  %v2_c848 = icmp eq i32 %v2_c844, 0
  br i1 %v2_c848, label %bb42, label %bb41

bb41:                                             ; preds = %dec_label_pc_c824
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_c824, %bb41
  %v2_c850 = xor i1 %v2_c848, true
  call void @__pseudo_cond_branch(i1 %v2_c850, i32 %v2_c844)
  store i32 ptrtoint (i8** @global_var_1e258.74 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c85c = load i32, i32* %r8.global-to-local, align 4
  %v1_c85c = inttoptr i32 %v0_c85c to i32*
  %v2_c85c = load i32, i32* %v1_c85c, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1e258.74 to i8*), align 4
  %v4_c86c = call i32 @function_1016c(i32 %v2_c85c, i32 ptrtoint (i16** @global_var_202d8.55 to i32), i32 16)
  br label %dec_label_pc_c5ec

dec_label_pc_c874:                                ; preds = %dec_label_pc_c674
  %v0_c878 = load i32, i32* @fp, align 4
  %v1_c878 = inttoptr i32 %v0_c878 to i32*
  %v2_c878 = load i32, i32* %v1_c878, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_c888 = call i32 @function_102c8(i32 %v2_c878, i32 %v2_c87c, i32 2, i32 16384)
  br label %dec_label_pc_c6a8

dec_label_pc_c890:                                ; preds = %dec_label_pc_c6ec
  store i32 4, i32* @r4, align 4
  store i32 %v2_c898, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 %v2_c874, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_c8b4 = call i32 @function_101dc(i32 %v2_c76c, i32 1, i32 4, i32 %v2_c898, i32 %v2_c874)
  %v3_c8b8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_c8b8, i32* %r3.global-to-local, align 4
  %v2_c8bc = icmp eq i32 %v3_c8b8, 0
  br i1 %v2_c8bc, label %dec_label_pc_c944, label %dec_label_pc_c8c4

dec_label_pc_c8c4:                                ; preds = %dec_label_pc_c890
  %v0_c8c4 = load i32, i32* @r5, align 4
  %v1_c8c4 = inttoptr i32 %v0_c8c4 to i32*
  %v2_c8c4 = load i32, i32* %v1_c8c4, align 4
  %v1_c8c8 = call i32 @function_10008(i32 %v2_c8c4)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_c8d0 = load i32, i32* @r5, align 4
  %v2_c8d0 = inttoptr i32 %v1_c8d0 to i32*
  store i32 -1, i32* %v2_c8d0, align 4
  %v0_c8d4 = call i32 @function_cad8()
  %v3_c8dc = zext i32 %v0_c8d4 to i64
  %v4_c8dc = mul nuw i64 %v3_c8dc, 3435973837
  %v7_c8dc = trunc i64 %v4_c8dc to i32
  store i32 %v7_c8dc, i32* %ip.global-to-local, align 4
  %v3_c8e01 = udiv i64 %v4_c8dc, 34359738368
  %v3_c8e43 = mul nuw nsw i64 %v3_c8e01, 8
  %v3_c8e4 = trunc i64 %v3_c8e43 to i32
  store i32 %v3_c8e4, i32* %r2.global-to-local, align 4
  %v2_c8e85 = mul nuw nsw i64 %v3_c8e01, 2
  %v2_c8e8 = trunc i64 %v2_c8e85 to i32
  %v2_c8ec = add i32 %v3_c8e4, %v2_c8e8
  store i32 %v2_c8ec, i32* %r3.global-to-local, align 4
  %v2_c8f0 = sub i32 %v0_c8d4, %v2_c8ec
  %v1_c8f4 = add i32 %v2_c8f0, 1
  %v1_c8f8 = call i32 @function_11a94(i32 %v1_c8f4)
  br label %dec_label_pc_c56c

dec_label_pc_c900:                                ; preds = %dec_label_pc_c6b8
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_c898, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-52, align 4
  %v5_c914 = call i32 @function_100fc(i32 %v2_c6ac, i32 %v2_c90c, i32 %v2_c898, i32 16, i32 16)
  %v1_c918 = call i32 @function_cc6c(i32 %v5_c914)
  store i32 %v1_c530, i32* @lr, align 4
  %v2_c928 = call i32 @function_fdd4(i32 %v1_c924, i32 9)
  store i32 ptrtoint (i32* @global_var_1e254.63 to i32), i32* %r3.global-to-local, align 4
  %v2_c930 = load i32, i32* @global_var_1e254.63, align 4
  %v2_c934 = icmp eq i32 %v2_c930, 0
  br i1 %v2_c934, label %dec_label_pc_c93c, label %dec_label_pc_c9dc

dec_label_pc_c93c:                                ; preds = %dec_label_pc_c900, %dec_label_pc_c9dc
  %v1_c940 = call i32 @function_119dc(i32 0)
  br label %dec_label_pc_c944

dec_label_pc_c944:                                ; preds = %dec_label_pc_c890, %dec_label_pc_c93c
  %v2_c948 = call i32 @function_f788(i8* %v1_c948)
  %sext = mul i32 %v2_c948, 16777216
  %v1_c94c = sdiv i32 %sext, 16777216
  %v7_c94c = inttoptr i32 %v1_c94c to i8*
  store i8* %v7_c94c, i8** %stack_var_-42, align 4
  %v0_c950 = call i32 @function_f9e8()
  %v0_c958 = load i32, i32* @r4, align 4
  store i32 %v0_c958, i32* %r2.global-to-local, align 4
  store i32 %v0_c950, i32* @global_var_202d4.42, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c968 = load i32, i32* @r5, align 4
  %v1_c968 = inttoptr i32 %v0_c968 to i32*
  %v2_c968 = load i32, i32* %v1_c968, align 4
  %v4_c96c = call i32 @function_102c8(i32 %v2_c968, i32 ptrtoint (i32* @global_var_15028.80 to i32), i32 %v0_c958, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_c978 = load i32, i32* @r5, align 4
  %v1_c978 = inttoptr i32 %v0_c978 to i32*
  %v2_c978 = load i32, i32* %v1_c978, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_c984 = call i32 @function_102c8(i32 %v2_c978, i32 %v2_c87c, i32 1, i32 16384)
  %v3_c988 = load i8*, i8** %stack_var_-42, align 4
  %v4_c988 = ptrtoint i8* %v3_c988 to i32
  store i32 %v4_c988, i32* %r2.global-to-local, align 4
  %v3_c98c = icmp eq i8* %v3_c988, null
  br i1 %v3_c98c, label %dec_label_pc_c56c, label %dec_label_pc_c994

dec_label_pc_c994:                                ; preds = %dec_label_pc_c944
  %v0_c994 = load i32, i32* @r5, align 4
  %v1_c994 = inttoptr i32 %v0_c994 to i32*
  %v2_c994 = load i32, i32* %v1_c994, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_c9a0 = call i32 @function_102c8(i32 %v2_c994, i32 %v2_c3b0, i32 %v4_c988, i32 16384)
  br label %dec_label_pc_c56c

dec_label_pc_c9a8:                                ; preds = %dec_label_pc_ca18, %dec_label_pc_c7a0
  %v0_c9a8 = load i32, i32* @r5, align 4
  %v1_c9a8 = inttoptr i32 %v0_c9a8 to i32*
  %v2_c9a8 = load i32, i32* %v1_c9a8, align 4
  store i32 %v2_c9a8, i32* %r3.global-to-local, align 4
  %v7_c9ac = icmp eq i32 %v2_c9a8, 4
  br i1 %v7_c9ac, label %dec_label_pc_c56c, label %bb43

bb43:                                             ; preds = %dec_label_pc_c9a8
  %v8_c9b0 = icmp eq i32 %v2_c9a8, 11
  br i1 %v8_c9b0, label %dec_label_pc_c56c, label %dec_label_pc_c9b8

dec_label_pc_c9b8:                                ; preds = %dec_label_pc_ca3c, %bb43, %dec_label_pc_c7d4
  %v0_c9b8 = load i32, i32* @fp, align 4
  %v1_c9b8 = inttoptr i32 %v0_c9b8 to i32*
  %v2_c9b8 = load i32, i32* %v1_c9b8, align 4
  store i32 51652, i32* @lr, align 4
  %v1_c9c0 = icmp ne i32 %v2_c9b8, -1
  call void @__pseudo_cond_branch(i1 %v1_c9c0, i32 ptrtoint (i32* @global_var_10008.76 to i32))
  store i32 123016, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* inttoptr (i32 123016 to i32*), align 8
  %v1_c9d4 = call i32 @function_11a94(i32 1)
  br label %dec_label_pc_c56c

dec_label_pc_c9dc:                                ; preds = %dec_label_pc_c900
  %v2_c9e0 = call i32 @function_fdd4(i32 %v2_c930, i32 9)
  br label %dec_label_pc_c93c

dec_label_pc_c9e8:                                ; preds = %dec_label_pc_c7dc
  %v3_c9e8 = udiv i32 %v4_c7e0, 256
  %v1_c9ec = urem i32 %v4_c7e0, 256
  store i32 %v1_c9ec, i32* %r3.global-to-local, align 4
  %v4_c9f0 = mul nuw nsw i32 %v1_c9ec, 256
  %v5_c9f0 = or i32 %v4_c9f0, %v3_c9e8
  %v6_c9f0 = trunc i32 %v5_c9f0 to i16
  store i32 %v5_c9f0, i32* %r2.global-to-local, align 4
  %v7_c9fc = inttoptr i32 %v5_c9f0 to i8*
  store i8* %v7_c9fc, i8** %stack_var_-42, align 4
  %tmp44 = icmp ult i16 %v6_c9f0, 1025
  br i1 %tmp44, label %dec_label_pc_ca18, label %dec_label_pc_ca04

dec_label_pc_ca04:                                ; preds = %dec_label_pc_c9e8
  %v0_ca04 = load i32, i32* @r8, align 4
  %v1_ca04 = inttoptr i32 %v0_ca04 to i32*
  %v2_ca04 = load i32, i32* %v1_ca04, align 4
  %v1_ca08 = call i32 @function_10008(i32 %v2_ca04)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_ca10 = load i32, i32* @r8, align 4
  %v2_ca10 = inttoptr i32 %v1_ca10 to i32*
  store i32 -1, i32* %v2_ca10, align 4
  br label %dec_label_pc_c56c

dec_label_pc_ca18:                                ; preds = %dec_label_pc_c9e8
  %v0_ca18 = load i32, i32* @r4, align 4
  %v1_ca18 = load i32, i32* @r5, align 4
  %v2_ca18 = inttoptr i32 %v1_ca18 to i32*
  store i32 %v0_ca18, i32* %v2_ca18, align 4
  store i32 %v2_ca20, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_ca28 = load i32, i32* @r8, align 4
  %v1_ca28 = inttoptr i32 %v0_ca28 to i32*
  %v2_ca28 = load i32, i32* %v1_ca28, align 4
  %v7_ca30 = call i32 @function_10254(i32 %v2_ca28, i32 %v2_ca20, i32 %v5_c9f0, i32 16386)
  %v7_ca34 = icmp eq i32 %v7_ca30, -1
  br i1 %v7_ca34, label %dec_label_pc_c9a8, label %dec_label_pc_ca3c

dec_label_pc_ca3c:                                ; preds = %dec_label_pc_ca18
  %v2_ca3c = icmp eq i32 %v7_ca30, 0
  br i1 %v2_ca3c, label %dec_label_pc_c9b8, label %dec_label_pc_ca44

dec_label_pc_ca44:                                ; preds = %dec_label_pc_ca3c
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ca50 = load i32, i32* @r8, align 4
  %v1_ca50 = inttoptr i32 %v0_ca50 to i32*
  %v2_ca50 = load i32, i32* %v1_ca50, align 4
  %v4_ca54 = call i32 @function_10254(i32 %v2_ca50, i32 %v2_c87c, i32 2, i32 16384)
  %v3_ca5c = load i8*, i8** %stack_var_-42, align 4
  %v4_ca5c = ptrtoint i8* %v3_ca5c to i32
  %v3_ca60 = udiv i32 %v4_ca5c, 256
  %v1_ca64 = urem i32 %v4_ca5c, 256
  store i32 %v1_ca64, i32* %r3.global-to-local, align 4
  %v4_ca68 = mul nuw nsw i32 %v1_ca64, 256
  %v5_ca68 = or i32 %v4_ca68, %v3_ca60
  store i32 %v5_ca68, i32* %ip.global-to-local, align 4
  store i32 %v2_c698, i32* @lr, align 4
  store i32 %v5_ca68, i32* %r2.global-to-local, align 4
  %v0_ca78 = load i32, i32* @r8, align 4
  %v1_ca78 = inttoptr i32 %v0_ca78 to i32*
  %v2_ca78 = load i32, i32* %v1_ca78, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_ca80 = inttoptr i32 %v5_ca68 to i8*
  store i8* %v6_ca80, i8** %stack_var_-42, align 4
  %v6_ca84 = call i32 @function_10254(i32 %v2_ca78, i32 %v2_ca20, i32 %v5_ca68, i32 16384)
  store i32 %v2_c698, i32* %r2.global-to-local, align 4
  %v3_ca8c = load i8*, i8** %stack_var_-42, align 4
  %v3_ca90 = icmp eq i8* %v3_ca8c, null
  br i1 %v3_ca90, label %dec_label_pc_c56c, label %dec_label_pc_ca98

dec_label_pc_ca98:                                ; preds = %dec_label_pc_ca44
  %v4_ca8c = ptrtoint i8* %v3_ca8c to i32
  %v5_ca9c = call i32 @function_82c8(i32* nonnull %stack_var_-1432, i32 %v4_ca8c, i32 %v2_c698)
  br label %dec_label_pc_c56c

; uselistorder directives
  uselistorder i8* %v3_ca8c, { 1, 0 }
  uselistorder i32 %v5_ca68, { 1, 0, 2, 3 }
  uselistorder i32 %v4_ca5c, { 1, 0 }
  uselistorder i32 %v7_ca30, { 1, 0 }
  uselistorder i32 %v5_c9f0, { 1, 0, 3, 2 }
  uselistorder i32 %v3_c810, { 3, 2, 1, 0 }
  uselistorder i32 %v4_c7e0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_c7c8, { 1, 0 }
  uselistorder i32 %v2_c76c, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_c6ac, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-1436.1, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_c694, { 1, 0, 2 }
  uselistorder i32 %v5_c660, { 1, 2, 0 }
  uselistorder i32 %v2_c5ac, { 2, 1, 0 }
  uselistorder i32 %v1_c59c, { 1, 2, 0 }
  uselistorder i32 %v1_c580, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1436.0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v2_c898, { 1, 0, 2, 3 }
  uselistorder i32 %v2_c87c, { 3, 0, 5, 4, 2, 1 }
  uselistorder i32 %v2_c874, { 1, 0 }
  uselistorder i32 %v2_c698, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_c568, { 1, 0, 2 }
  uselistorder i32 %v2_c414, { 0, 12, 1, 13, 2, 11, 3, 10, 4, 5, 9, 8, 6, 14, 7 }
  uselistorder i32 %v2_c400, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_c370, { 1, 0 }
  uselistorder i32 %v2_c320, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-152, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 30, 34, 32, 33, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 9, 5, 6, 10, 11 }
  uselistorder i32* @global_var_1e254.63, { 1, 2, 0 }
  uselistorder i8* null, { 0, 2, 1 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @function_11a94, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e258.74 to i32), { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e258.74 to i8*), { 0, 1, 3, 2 }
  uselistorder i32* inttoptr (i32 123012 to i32*), { 1, 2, 3, 4, 0 }
  uselistorder i32 (i32)* @function_c220, { 1, 0 }
  uselistorder i32 (i32)* @function_8560, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_cb9c, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_c0c8, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_10430, { 1, 0 }
  uselistorder label %dec_label_pc_c944, { 1, 0 }
  uselistorder label %dec_label_pc_c93c, { 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_c6a8, { 2, 1, 0 }
  uselistorder label %bb40, { 1, 0 }
  uselistorder label %dec_label_pc_c5ec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c5dc, { 1, 0 }
  uselistorder label %dec_label_pc_c56c, { 7, 1, 8, 9, 2, 0, 10, 3, 11, 12, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_c3d4, { 2, 0, 1 }
}

define i32 @function_cabc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_cabc:
  %cpsr_c.global-to-local = alloca i1, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v0_cabc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_cabc, label %bb, label %dec_label_pc_cabc..thread1_crit_edge

dec_label_pc_cabc..thread1_crit_edge:             ; preds = %dec_label_pc_cabc
  %v0_cac8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %.thread1

bb:                                               ; preds = %dec_label_pc_cabc
  %v2_cabc = load i32, i32* @r8, align 4
  %v4_cac4 = add i32 %arg2, -1
  %v5_cac4 = shl i32 1, %v4_cac4
  %v6_cac4 = and i32 %v2_cabc, %v5_cac4
  %v7_cac4 = icmp ne i32 %v6_cac4, 0
  store i1 %v7_cac4, i1* %cpsr_c.global-to-local, align 1
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_cabc..thread1_crit_edge, %bb
  %v0_cac8 = phi i1 [ %v0_cac8.pre, %dec_label_pc_cabc..thread1_crit_edge ], [ %v7_cac4, %bb ]
  call void @__pseudo_cond_branch(i1 %v0_cac8, i32 -22317700)
  %v0_cad0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_cad0, label %bb4, label %.thread2

bb4:                                              ; preds = %.thread1
  %v2_cad4 = load i32, i32* @r8, align 4
  %v3_cad4 = icmp slt i32 %v2_cad4, 0
  store i1 %v3_cad4, i1* %cpsr_c.global-to-local, align 1
  br label %.thread2

.thread2:                                         ; preds = %.thread1, %bb4
  %v4_cad4 = load i32, i32* @r0, align 4
  ret i32 %v4_cad4

; uselistorder directives
  uselistorder i1* %cpsr_c.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_cad8() local_unnamed_addr {
dec_label_pc_cad8:
  %v2_cae4 = load i32, i32* @global_var_1e25c.82, align 4
  %v2_cae8 = load i32, i32* @global_var_1e268.84, align 4
  %v4_caf4 = mul i32 %v2_cae4, 2048
  %v5_caf4 = xor i32 %v4_caf4, %v2_cae4
  %v4_caf8 = udiv i32 %v2_cae8, 524288
  %v5_caf8 = xor i32 %v4_caf8, %v2_cae8
  %v2_cafc = load i32, i32* @global_var_1e260.86, align 4
  %v2_cb00 = load i32, i32* @global_var_1e264.88, align 4
  %v2_cb04 = xor i32 %v5_caf8, %v5_caf4
  %v4_cb08 = udiv i32 %v5_caf4, 256
  %v5_cb08 = xor i32 %v2_cb04, %v4_cb08
  store i32 %v2_cafc, i32* @global_var_1e25c.82, align 4
  store i32 %v2_cb00, i32* @global_var_1e260.86, align 4
  store i32 %v2_cae8, i32* @global_var_1e264.88, align 4
  store i32 %v5_cb08, i32* @global_var_1e268.84, align 4
  ret i32 %v5_cb08

; uselistorder directives
  uselistorder i32 %v2_cae8, { 2, 1, 0 }
  uselistorder i32 %v2_cae4, { 1, 0 }
}

define i32 @function_cb34(i32 %arg1) local_unnamed_addr {
dec_label_pc_cb34:
  %v2_cb40 = call i32 @function_fcbc(i32* null)
  store i32 %v2_cb40, i32* @r0, align 4
  store i32 %v2_cb40, i32* @global_var_1e25c.82, align 4
  %v0_cb4c = call i32 @function_fca8()
  store i32 %v0_cb4c, i32* @r0, align 4
  %v0_cb54 = call i32 @function_fc34()
  %v2_cb5c = xor i32 %v0_cb4c, %v0_cb54
  store i32 %v2_cb5c, i32* @global_var_1e260.86, align 4
  %v1_cb64 = call i32 @function_10058(i32 %v2_cb5c)
  %v2_cb68 = load i32, i32* @global_var_1e260.86, align 4
  %v2_cb74 = xor i32 %v2_cb68, %v1_cb64
  store i32 %v2_cb74, i32* @global_var_1e268.84, align 4
  store i32 %v1_cb64, i32* @global_var_1e264.88, align 4
  ret i32 %v1_cb64

; uselistorder directives
  uselistorder i32 %v1_cb64, { 1, 2, 0 }
}

define i32 @function_cb9c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_cb9c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_cb9c = load i32, i32* @r4, align 4
  %v6_cb9c = load i32, i32* @r5, align 4
  %v9_cb9c = load i32, i32* @r6, align 4
  %v12_cb9c = load i32, i32* @r7, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_cbb0 = call i32 @function_f3cc(i32 19)
  %v3_cbbc = call i32 @function_f308(i32 19, i32* null)
  store i32 %v3_cbbc, i32* @r1, align 4
  %v2_cbc8 = bitcast i32* %stack_var_-72 to i8*
  %v3_cbc8 = call i32 @function_100b0(i8* %v2_cbc8, i32 %v3_cbbc)
  %v2_cbcc = icmp eq i32 %arg2, 0
  br i1 %v2_cbcc, label %dec_label_pc_cc48, label %dec_label_pc_cbd4

dec_label_pc_cbd4:                                ; preds = %dec_label_pc_cb9c
  store i32 ptrtoint (i32* @global_var_1e25c.82 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e260.86 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e264.88 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1e268.84 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_cc2c = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_cbe8

dec_label_pc_cbe8:                                ; preds = %dec_label_pc_cbe8.dec_label_pc_cbe8_crit_edge, %dec_label_pc_cbd4
  %v1_cc0c = phi i32 [ %v1_cc0c.pre, %dec_label_pc_cbe8.dec_label_pc_cbe8_crit_edge ], [ ptrtoint (i32* @global_var_1e25c.82 to i32), %dec_label_pc_cbd4 ]
  %v2_cbe8 = load i32, i32* @global_var_1e268.84, align 4
  store i32 %v2_cbe8, i32* %r2.global-to-local, align 4
  %v2_cbec = load i32, i32* @global_var_1e25c.82, align 4
  %v4_cbf0 = udiv i32 %v2_cbe8, 524288
  %v5_cbf0 = xor i32 %v4_cbf0, %v2_cbe8
  %v4_cbf4 = mul i32 %v2_cbec, 2048
  %v5_cbf4 = xor i32 %v4_cbf4, %v2_cbec
  %v2_cbf8 = xor i32 %v5_cbf0, %v5_cbf4
  %v2_cbfc = load i32, i32* @global_var_1e260.86, align 4
  %v2_cc00 = load i32, i32* @global_var_1e264.88, align 4
  store i32 %v2_cc00, i32* %ip.global-to-local, align 4
  %v4_cc04 = udiv i32 %v5_cbf4, 256
  %v5_cc04 = xor i32 %v2_cbf8, %v4_cc04
  store i32 %v5_cc04, i32* @r4, align 4
  %v2_cc0c = inttoptr i32 %v1_cc0c to i32*
  store i32 %v2_cbfc, i32* %v2_cc0c, align 4
  %v0_cc10 = load i32, i32* %ip.global-to-local, align 4
  %v1_cc10 = load i32, i32* %r8.global-to-local, align 4
  %v2_cc10 = inttoptr i32 %v1_cc10 to i32*
  store i32 %v0_cc10, i32* %v2_cc10, align 4
  %v0_cc14 = load i32, i32* %r2.global-to-local, align 4
  %v1_cc14 = load i32, i32* @r7, align 4
  %v2_cc14 = inttoptr i32 %v1_cc14 to i32*
  store i32 %v0_cc14, i32* %v2_cc14, align 4
  %v0_cc18 = load i32, i32* @r4, align 4
  %v1_cc18 = load i32, i32* @r6, align 4
  %v2_cc18 = inttoptr i32 %v1_cc18 to i32*
  store i32 %v0_cc18, i32* %v2_cc18, align 4
  %v2_cc1c = call i32 @function_f788(i8* %v2_cbc8)
  %v0_cc24 = load i32, i32* @r4, align 4
  %v2_cc28 = call i32 @function_fc08(i32 %v0_cc24, i32 %v2_cc1c)
  %v2_cc30 = add i32 %v2_cc1c, %v2_cc2c
  %v1_cc34 = add i32 %v2_cc30, -32
  %v2_cc34 = inttoptr i32 %v1_cc34 to i8*
  %v3_cc34 = load i8, i8* %v2_cc34, align 1
  %v2_cc38 = load i32, i32* @r5, align 4
  %v3_cc38 = load i32, i32* %fp.global-to-local, align 4
  %v4_cc38 = add i32 %v3_cc38, %v2_cc38
  %v5_cc38 = inttoptr i32 %v4_cc38 to i8*
  store i8 %v3_cc34, i8* %v5_cc38, align 1
  %v0_cc3c = load i32, i32* @r5, align 4
  %v1_cc3c = add i32 %v0_cc3c, 1
  store i32 %v1_cc3c, i32* @r5, align 4
  %v1_cc40 = load i32, i32* %sb.global-to-local, align 4
  %v9_cc40 = icmp eq i32 %v1_cc3c, %v1_cc40
  br i1 %v9_cc40, label %dec_label_pc_cc48, label %dec_label_pc_cbe8.dec_label_pc_cbe8_crit_edge

dec_label_pc_cbe8.dec_label_pc_cbe8_crit_edge:    ; preds = %dec_label_pc_cbe8
  %v1_cc0c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_cbe8

dec_label_pc_cc48:                                ; preds = %dec_label_pc_cbe8, %dec_label_pc_cb9c
  %v1_cc4c = call i32 @function_f32c(i32 19)
  store i32 %v3_cb9c, i32* @r4, align 4
  store i32 %v6_cb9c, i32* @r5, align 4
  store i32 %v9_cb9c, i32* @r6, align 4
  store i32 %v12_cb9c, i32* @r7, align 4
  ret i32 %v1_cc4c

; uselistorder directives
  uselistorder i32 %v2_cbec, { 1, 0 }
  uselistorder i32 %v2_cbe8, { 1, 0, 2 }
  uselistorder i32* @global_var_1e268.84, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1e264.88, { 2, 4, 1, 0, 3 }
  uselistorder i32* @global_var_1e260.86, { 2, 5, 3, 1, 0, 4 }
  uselistorder i32* @global_var_1e25c.82, { 2, 4, 1, 0, 3 }
}

define i32 @function_cc6c(i32 %arg1) local_unnamed_addr {
dec_label_pc_cc6c:
  %v2_cc78 = load i32, i32* @global_var_202f0.98, align 4
  %v2_cc80 = call i32 @function_fdd4(i32 %v2_cc78, i32 9)
  ret i32 %v2_cc80
}

define i32 @function_cc94() local_unnamed_addr {
dec_label_pc_cc94:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_cc94 = load i32, i32* @r4, align 4
  store i32 %v3_cc94, i32* %stack_var_-16, align 4
  %v12_cc94 = load i32, i32* @lr, align 4
  %v0_cc98 = load i32, i32* @r0, align 4
  store i32 %v0_cc98, i32* %r5.global-to-local, align 4
  %v1_cc9c = add i32 %v0_cc98, 4
  %v2_cc9c = inttoptr i32 %v1_cc9c to i32*
  %v3_cc9c = load i32, i32* %v2_cc9c, align 4
  store i32 %v3_cc9c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 52416, i32* @lr, align 4
  %v1_ccbc = icmp ne i32 %v3_cc9c, -1
  call void @__pseudo_cond_branch(i1 %v1_ccbc, i32 ptrtoint (i32* @global_var_10008.76 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_cccc = call i32 @function_10384(i32 2, i32 1, i32 0)
  store i32 %v3_cccc, i32* %r0.global-to-local, align 4
  %v7_ccd0 = icmp eq i32 %v3_cccc, -1
  %v1_ccd4 = load i32, i32* %r5.global-to-local, align 4
  %v2_ccd4 = add i32 %v1_ccd4, 4
  %v3_ccd4 = inttoptr i32 %v2_ccd4 to i32*
  store i32 %v3_cccc, i32* %v3_ccd4, align 4
  br i1 %v7_ccd0, label %dec_label_pc_cc94.dec_label_pc_cd4c_crit_edge, label %dec_label_pc_ccdc

dec_label_pc_cc94.dec_label_pc_cd4c_crit_edge:    ; preds = %dec_label_pc_cc94
  %v1_cd54.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cd4c

dec_label_pc_ccdc:                                ; preds = %dec_label_pc_cc94
  %v2_cca0 = ptrtoint i32* %stack_var_-32 to i32
  %v0_ccdc = load i32, i32* %r5.global-to-local, align 4
  %v1_ccdc = add i32 %v0_ccdc, 28
  store i32 %v1_ccdc, i32* %r0.global-to-local, align 4
  %v0_cce0 = load i32, i32* %r6.global-to-local, align 4
  %v2_cce0 = add i32 %v0_ccdc, 24
  %v3_cce0 = inttoptr i32 %v2_cce0 to i32*
  store i32 %v0_cce0, i32* %v3_cce0, align 4
  %v2_cce8 = call i32 @function_f81c(i32 %v1_ccdc, i32 256)
  store i32 %v2_cce8, i32* %r0.global-to-local, align 4
  %v0_ccec = load i32, i32* %r5.global-to-local, align 4
  %v1_ccec = add i32 %v0_ccec, 4
  %v2_ccec = inttoptr i32 %v1_ccec to i32*
  %v3_ccec = load i32, i32* %v2_ccec, align 4
  store i32 %v3_ccec, i32* %r4.global-to-local, align 4
  %v0_ccf0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_ccf0, i32* %r2.global-to-local, align 4
  store i32 %v3_ccec, i32* %r0.global-to-local, align 4
  %v2_ccfc = call i32 @function_fe3c(i32 %v3_ccec, i32 3)
  %v1_cd04 = or i32 %v2_ccfc, 2048
  store i32 %v1_cd04, i32* %r2.global-to-local, align 4
  %v0_cd08 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_cd08, i32* %r0.global-to-local, align 4
  %v2_cd0c = call i32 @function_fe3c(i32 %v0_cd08, i32 4)
  store i32 %v2_cd0c, i32* %r0.global-to-local, align 4
  %v2_cd14 = load i32, i32* @global_var_1e2a0.100, align 4
  store i32 %v2_cd14, i32* %r2.global-to-local, align 4
  %v1_cd1c = load i32, i32* %r5.global-to-local, align 4
  %v2_cd1c = add i32 %v1_cd1c, 12
  %v3_cd1c = inttoptr i32 %v2_cd1c to i32*
  store i32 1, i32* %v3_cd1c, align 4
  store i32 2, i32* @r3, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_cd28 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd28 = load i32, i32* %r5.global-to-local, align 4
  %v2_cd28 = add i32 %v1_cd28, 8
  %v3_cd28 = inttoptr i32 %v2_cd28 to i32*
  store i32 %v0_cd28, i32* %v3_cd28, align 4
  %v0_cd2c = load i32, i32* %r5.global-to-local, align 4
  %v1_cd2c = add i32 %v0_cd2c, 16
  %v2_cd2c = inttoptr i32 %v1_cd2c to i32*
  %v3_cd2c = load i32, i32* %v2_cd2c, align 4
  store i32 %v3_cd2c, i32* @ip, align 4
  %v1_cd30 = add i32 %v0_cd2c, 4
  %v2_cd30 = inttoptr i32 %v1_cd30 to i32*
  %v3_cd30 = load i32, i32* %v2_cd30, align 4
  store i32 %v3_cd30, i32* %r0.global-to-local, align 4
  %v1_cd34 = add i32 %v0_cd2c, 20
  %v2_cd34 = inttoptr i32 %v1_cd34 to i16*
  %v3_cd34 = load i16, i16* %v2_cd34, align 2
  %v4_cd34 = zext i16 %v3_cd34 to i32
  store i32 %v4_cd34, i32* %r5.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_cd48 = call i32 @function_1016c(i32 %v3_cd30, i32 %v2_cca0, i32 16)
  store i32 %v3_cd48, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cd4c

dec_label_pc_cd4c:                                ; preds = %dec_label_pc_cc94.dec_label_pc_cd4c_crit_edge, %dec_label_pc_ccdc
  %v1_cd54 = phi i32 [ %v1_cd54.pre, %dec_label_pc_cc94.dec_label_pc_cd4c_crit_edge ], [ %v3_cd48, %dec_label_pc_ccdc ]
  %v2_cd50 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_cd50, i32* @r4, align 4
  store i32 %v12_cc94, i32* @lr, align 4
  ret i32 %v1_cd54

; uselistorder directives
  uselistorder i32 %v3_cccc, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 6, 5, 9, 10, 8, 7 }
  uselistorder i32 (i32, i32)* @function_f81c, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_cd4c, { 1, 0 }
}

define i32 @function_cd5c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_cd5c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_cd5c = load i32, i32* @r4, align 4
  %v6_cd5c = load i32, i32* @r5, align 4
  %v9_cd5c = load i32, i32* @r6, align 4
  %v12_cd5c = load i32, i32* @r7, align 4
  %v15_cd5c = load i32, i32* @r8, align 4
  %v18_cd5c = load i32, i32* @sb, align 4
  %v21_cd5c = load i32, i32* @sl, align 4
  %v24_cd5c = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_1e26c.102 to i32), i32* @fp, align 4
  %v2_cd64 = load i32, i32* @global_var_1e26c.102, align 4
  store i32 ptrtoint (i32* @global_var_1e298.104 to i32), i32* @sl, align 4
  %v1_cd70 = add i32 %v2_cd64, 1
  store i32 %v1_cd70, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_cd7c = load i32, i32* @global_var_1e298.104, align 4
  store i32 %v2_cd7c, i32* %r0.global-to-local, align 4
  %v3_cd80 = mul i32 %v1_cd70, 16
  store i32 %v3_cd80, i32* %r1.global-to-local, align 4
  %v4_cd88 = inttoptr i32 %v2_cd7c to i32*
  %v5_cd88 = call i32 @function_11020(i32* %v4_cd88, i32 %v3_cd80, i32 %arg3, i32 %v1_cd70)
  %v2_cd8c = load i32, i32* @global_var_1e26c.102, align 4
  store i32 %v2_cd8c, i32* %r2.global-to-local, align 4
  store i32 %v5_cd88, i32* @r8, align 4
  %v0_cd94 = load i32, i32* @r5, align 4
  store i32 %v0_cd94, i32* %r0.global-to-local, align 4
  %v1_cd9c = load i32, i32* @sl, align 4
  %v2_cd9c = inttoptr i32 %v1_cd9c to i32*
  store i32 %v5_cd88, i32* %v2_cd9c, align 4
  %v1_cda0 = inttoptr i32 %v0_cd94 to i8*
  %v2_cda0 = call i32 @function_f788(i8* %v1_cda0)
  %sext = mul i32 %v2_cda0, 16777216
  %v1_cda4 = sdiv i32 %sext, 16777216
  %v2_cda4 = add nsw i32 %v1_cda4, 1
  store i32 %v2_cda4, i32* @r4, align 4
  store i32 %v1_cda4, i32* @r7, align 4
  store i32 %v2_cda4, i32* @r0, align 4
  %v0_cdb0 = call i32 @function_105cc()
  store i32 %v0_cdb0, i32* %r0.global-to-local, align 4
  %v0_cdb4 = load i32, i32* @r5, align 4
  store i32 %v0_cdb4, i32* %r1.global-to-local, align 4
  %v0_cdb8 = load i32, i32* @r4, align 4
  store i32 %v0_cdb8, i32* %r2.global-to-local, align 4
  store i32 %v0_cdb0, i32* %r6.global-to-local, align 4
  %v3_cdc0 = call i32 @function_f7f8(i32 %v0_cdb0, i32 %v0_cdb4, i32 %v0_cdb8)
  store i32 %v3_cdc0, i32* %r0.global-to-local, align 4
  %v0_cdc4 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_cdc4, 1
  %extract.t6 = trunc i32 %v0_cdc4 to i8
  br i1 %tmp22, label %dec_label_pc_cde8, label %dec_label_pc_cdcc

dec_label_pc_cdcc:                                ; preds = %dec_label_pc_cd5c
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_cdd0

dec_label_pc_cdd0:                                ; preds = %dec_label_pc_cdd0, %dec_label_pc_cdcc
  %v2_cdd8 = phi i32 [ %v1_cddc, %dec_label_pc_cdd0 ], [ 0, %dec_label_pc_cdcc ]
  %v1_cdd0 = load i32, i32* %r6.global-to-local, align 4
  %v2_cdd0 = add i32 %v1_cdd0, %v2_cdd8
  %v3_cdd0 = inttoptr i32 %v2_cdd0 to i8*
  %v4_cdd0 = load i8, i8* %v3_cdd0, align 1
  %v6_cdd0 = zext i8 %v4_cdd0 to i32
  %v1_cdd4 = xor i32 %v6_cdd0, 80
  store i32 %v1_cdd4, i32* %r3.global-to-local, align 4
  %v1_cdd8 = trunc i32 %v1_cdd4 to i8
  store i8 %v1_cdd8, i8* %v3_cdd0, align 1
  %v0_cddc = load i32, i32* %r2.global-to-local, align 4
  %v1_cddc = add i32 %v0_cddc, 1
  store i32 %v1_cddc, i32* %r2.global-to-local, align 4
  %v1_cde0 = load i32, i32* @r7, align 4
  %v9_cde0 = icmp eq i32 %v1_cddc, %v1_cde0
  br i1 %v9_cde0, label %dec_label_pc_cde8.loopexit, label %dec_label_pc_cdd0

dec_label_pc_cde8.loopexit:                       ; preds = %dec_label_pc_cdd0
  %extract.t = trunc i32 %v1_cddc to i8
  br label %dec_label_pc_cde8

dec_label_pc_cde8:                                ; preds = %dec_label_pc_cde8.loopexit, %dec_label_pc_cd5c
  %v0_cdf8.off0 = phi i8 [ %extract.t, %dec_label_pc_cde8.loopexit ], [ %extract.t6, %dec_label_pc_cd5c ]
  %v2_cde8 = load i32, i32* @global_var_1e26c.102, align 4
  %v2_cdec = load i32, i32* @global_var_1e298.104, align 4
  %v3_cdf0 = mul i32 %v2_cde8, 16
  store i32 %v3_cdf0, i32* @sb, align 4
  %v2_cdf4 = add i32 %v2_cdec, %v3_cdf0
  store i32 %v2_cdf4, i32* %r2.global-to-local, align 4
  %v3_cdf8 = add i32 %v2_cdf4, 12
  %v4_cdf8 = inttoptr i32 %v3_cdf8 to i8*
  store i8 %v0_cdf8.off0, i8* %v4_cdf8, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_cd8c, i32* %r3.global-to-local, align 4
  %v0_ce04 = load i32, i32* %r6.global-to-local, align 4
  %v1_ce04 = load i32, i32* @r8, align 4
  %v5_ce04 = mul i32 %v2_cd8c, 16
  %v6_ce04 = add i32 %v1_ce04, %v5_ce04
  %v7_ce04 = inttoptr i32 %v6_ce04 to i32*
  store i32 %v0_ce04, i32* %v7_ce04, align 4
  %v2_ce08 = load i32, i32* @global_var_1e298.104, align 4
  store i32 %v2_ce08, i32* @r7, align 4
  %v1_ce0c = inttoptr i32 %arg2 to i8*
  %v2_ce0c = call i32 @function_f788(i8* %v1_ce0c)
  %sext1 = mul i32 %v2_ce0c, 16777216
  %v1_ce10 = sdiv i32 %sext1, 16777216
  %v2_ce10 = add nsw i32 %v1_ce10, 1
  store i32 %v2_ce10, i32* @r4, align 4
  store i32 %v1_ce10, i32* @r6, align 4
  store i32 %v2_ce10, i32* @r0, align 4
  %v0_ce1c = call i32 @function_105cc()
  store i32 %v0_ce1c, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_ce24 = load i32, i32* @r4, align 4
  store i32 %v0_ce24, i32* %r2.global-to-local, align 4
  store i32 %v0_ce1c, i32* %r5.global-to-local, align 4
  %v3_ce2c = call i32 @function_f7f8(i32 %v0_ce1c, i32 %arg2, i32 %v0_ce24)
  store i32 %v3_ce2c, i32* %r0.global-to-local, align 4
  %v0_ce30 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_ce30, 1
  %extract.t8 = trunc i32 %v0_ce30 to i8
  br i1 %tmp23, label %dec_label_pc_ce54, label %dec_label_pc_ce38

dec_label_pc_ce38:                                ; preds = %dec_label_pc_cde8
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ce3c

dec_label_pc_ce3c:                                ; preds = %dec_label_pc_ce3c, %dec_label_pc_ce38
  %v2_ce44 = phi i32 [ %v1_ce48, %dec_label_pc_ce3c ], [ 0, %dec_label_pc_ce38 ]
  %v1_ce3c = load i32, i32* %r5.global-to-local, align 4
  %v2_ce3c = add i32 %v1_ce3c, %v2_ce44
  %v3_ce3c = inttoptr i32 %v2_ce3c to i8*
  %v4_ce3c = load i8, i8* %v3_ce3c, align 1
  %v6_ce3c = zext i8 %v4_ce3c to i32
  %v1_ce40 = xor i32 %v6_ce3c, 80
  store i32 %v1_ce40, i32* %r3.global-to-local, align 4
  %v1_ce44 = trunc i32 %v1_ce40 to i8
  store i8 %v1_ce44, i8* %v3_ce3c, align 1
  %v0_ce48 = load i32, i32* %r2.global-to-local, align 4
  %v1_ce48 = add i32 %v0_ce48, 1
  store i32 %v1_ce48, i32* %r2.global-to-local, align 4
  %v1_ce4c = load i32, i32* @r6, align 4
  %v9_ce4c = icmp eq i32 %v1_ce48, %v1_ce4c
  br i1 %v9_ce4c, label %dec_label_pc_ce54.loopexit, label %dec_label_pc_ce3c

dec_label_pc_ce54.loopexit:                       ; preds = %dec_label_pc_ce3c
  %extract.t7 = trunc i32 %v1_ce48 to i8
  br label %dec_label_pc_ce54

dec_label_pc_ce54:                                ; preds = %dec_label_pc_ce54.loopexit, %dec_label_pc_cde8
  %v0_ce64.off0 = phi i8 [ %extract.t7, %dec_label_pc_ce54.loopexit ], [ %extract.t8, %dec_label_pc_cde8 ]
  %v2_ce54 = load i32, i32* @global_var_1e26c.102, align 4
  store i32 %v2_ce54, i32* %r0.global-to-local, align 4
  %v2_ce58 = load i32, i32* @global_var_1e298.104, align 4
  %v3_ce5c = mul i32 %v2_ce54, 16
  store i32 %v3_ce5c, i32* %r1.global-to-local, align 4
  %v2_ce60 = or i32 %v3_ce5c, 13
  %v3_ce64 = add i32 %v2_ce60, %v2_ce58
  %v4_ce64 = inttoptr i32 %v3_ce64 to i8*
  store i8 %v0_ce64.off0, i8* %v4_ce64, align 1
  store i32 ptrtoint (i16** @global_var_1e29c.106 to i32), i32* %r4.global-to-local, align 4
  %v2_ce70 = load i16, i16* bitcast (i16** @global_var_1e29c.106 to i16*), align 4
  %v3_ce70 = zext i16 %v2_ce70 to i32
  store i32 %v3_ce70, i32* %lr.global-to-local, align 4
  %v2_ce78 = load i32, i32* @global_var_1e298.104, align 4
  store i32 %v2_ce78, i32* %r2.global-to-local, align 4
  %v0_ce80 = load i32, i32* %r1.global-to-local, align 4
  %v2_ce80 = add i32 %v0_ce80, %v2_ce78
  store i32 %v2_ce80, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1e29c.106 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_ce88 = load i32, i32* @sb, align 4
  %v1_ce88 = load i32, i32* @r7, align 4
  %v2_ce88 = add i32 %v1_ce88, %v0_ce88
  store i32 %v2_ce88, i32* %ip.global-to-local, align 4
  %v0_ce8c = load i32, i32* %r0.global-to-local, align 4
  %v1_ce8c = add i32 %v0_ce8c, 1
  store i32 %v1_ce8c, i32* %r0.global-to-local, align 4
  %v3_ce90 = add i32 %v2_ce80, 10
  %v4_ce90 = inttoptr i32 %v3_ce90 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1e29c.106 to i32), i32 16), i32 16) to i16), i16* %v4_ce90, align 2
  %v0_ce94 = load i32, i32* %lr.global-to-local, align 4
  %v1_ce94 = trunc i32 %v0_ce94 to i16
  %v2_ce94 = load i32, i32* %r1.global-to-local, align 4
  %v3_ce94 = add i32 %v2_ce94, 8
  %v4_ce94 = inttoptr i32 %v3_ce94 to i16*
  store i16 %v1_ce94, i16* %v4_ce94, align 2
  %v0_ce98 = load i32, i32* %r5.global-to-local, align 4
  %v1_ce98 = load i32, i32* %ip.global-to-local, align 4
  %v2_ce98 = add i32 %v1_ce98, 4
  %v3_ce98 = inttoptr i32 %v2_ce98 to i32*
  store i32 %v0_ce98, i32* %v3_ce98, align 4
  %v1_ce9c = load i32, i32* @fp, align 4
  %v2_ce9c = inttoptr i32 %v1_ce9c to i32*
  store i32 %v1_ce8c, i32* %v2_ce9c, align 4
  %v0_cea0 = load i32, i32* %r3.global-to-local, align 4
  %v1_cea0 = trunc i32 %v0_cea0 to i16
  %v2_cea0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cea0 = inttoptr i32 %v2_cea0 to i16*
  store i16 %v1_cea0, i16* %v3_cea0, align 2
  store i32 %v3_cd5c, i32* @r4, align 4
  store i32 %v6_cd5c, i32* @r5, align 4
  store i32 %v9_cd5c, i32* @r6, align 4
  store i32 %v12_cd5c, i32* @r7, align 4
  store i32 %v15_cd5c, i32* @r8, align 4
  store i32 %v18_cd5c, i32* @sb, align 4
  store i32 %v21_cd5c, i32* @sl, align 4
  store i32 %v24_cd5c, i32* @fp, align 4
  ret i32 %v1_ce8c

; uselistorder directives
  uselistorder i32 %v3_ce5c, { 1, 0 }
  uselistorder i32 %v1_ce48, { 0, 2, 3, 1 }
  uselistorder i32 %v0_ce1c, { 1, 0, 2 }
  uselistorder i32 %v3_cdf0, { 1, 0 }
  uselistorder i32 %v1_cddc, { 0, 2, 3, 1 }
  uselistorder i32 %v0_cdb0, { 1, 0, 2 }
  uselistorder i32 %v2_cd8c, { 1, 0, 2 }
  uselistorder i32 %v3_cd80, { 1, 0 }
  uselistorder i32 %v1_cd70, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @function_f788, { 0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @function_cebc(i32 %arg1) local_unnamed_addr {
dec_label_pc_cebc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp314 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-56 = alloca i8, align 1
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i16, align 2
  %tmp342 = call i16 @__decompiler_undefined_function_2()
  %v3_cebc = load i32, i32* @r4, align 4
  %v6_cebc = load i32, i32* @r5, align 4
  %v18_cebc = load i32, i32* @sb, align 4
  %v24_cebc = load i32, i32* @fp, align 4
  %v0_cec8 = call i32 @function_fd2c()
  store i32 %v0_cec8, i32* %r0.global-to-local, align 4
  %v7_cecc = icmp eq i32 %v0_cec8, -1
  %. = zext i1 %v7_cecc to i32
  %tmp345 = icmp slt i32 %v0_cec8, 1
  %storemerge308 = select i1 %tmp345, i32 %., i32 1
  store i32 %storemerge308, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_202f0.98 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_cee8 = icmp eq i32 %storemerge308, 0
  store i1 %v2_cee8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_cec8, i32* @global_var_202f0.98, align 4
  br i1 %v2_cee8, label %dec_label_pc_d1c8, label %dec_label_pc_cef4

dec_label_pc_cef4:                                ; preds = %dec_label_pc_cebc
  store i32 %v3_cebc, i32* %r4.global-to-local, align 4
  store i32 %v6_cebc, i32* @r5, align 4
  store i32 %v18_cebc, i32* @sb, align 4
  store i32 %v24_cebc, i32* @fp, align 4
  ret i32 %v0_cec8

dec_label_pc_d1c8:                                ; preds = %dec_label_pc_cebc
  %v0_d1c8 = call i32 @function_f9e8()
  store i32 %v0_d1c8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_202d4.42 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_d1c8, i32* @global_var_202d4.42, align 4
  %v1_d1d4 = call i32 @function_cb34(i32 %v0_d1c8)
  %v0_d1d8 = load i32, i32* @r4, align 4
  store i32 %v0_d1d8, i32* %r0.global-to-local, align 4
  %v1_d1dc = inttoptr i32 %v0_d1d8 to i32*
  %v2_d1dc = call i32 @function_fcbc(i32* %v1_d1dc)
  store i32 ptrtoint (i32* @global_var_1e2a0.100 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_d1dc, i32* @global_var_1e2a0.100, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_d1f0 = call i32 @function_10eec(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_202e8.111 to i32), i32* %r3.global-to-local, align 4
  %v0_d1f8 = load i32, i32* @r4, align 4
  %v5_d1f8 = trunc i32 %v0_d1f8 to i16
  store i16 %v5_d1f8, i16* %stack_var_-52, align 2
  store i32 %v2_d1f0, i32* @global_var_202e8.111, align 4
  store i32 %v0_d1f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d204

dec_label_pc_d204:                                ; preds = %dec_label_pc_d204.dec_label_pc_d204_crit_edge, %dec_label_pc_d1c8
  %v2_d210 = phi i32 [ %v2_d210.pre, %dec_label_pc_d204.dec_label_pc_d204_crit_edge ], [ %v2_d1f0, %dec_label_pc_d1c8 ]
  %v0_d218 = phi i32 [ %v0_d248, %dec_label_pc_d204.dec_label_pc_d204_crit_edge ], [ %v0_d1f8, %dec_label_pc_d1c8 ]
  %v3_d204162 = phi i16 [ %v5_d248, %dec_label_pc_d204.dec_label_pc_d204_crit_edge ], [ %v5_d1f8, %dec_label_pc_d1c8 ]
  %v4_d204 = sext i16 %v3_d204162 to i32
  %v3_d20c = mul i32 %v0_d218, 256
  store i32 %v3_d20c, i32* %ip.global-to-local, align 4
  %v2_d220 = mul nsw i32 %v4_d204, 288
  %v2_d224 = mul i32 %v0_d218, 288
  %v1_d228 = add nsw i32 %v4_d204, 1
  store i32 %v1_d228, i32* %r0.global-to-local, align 4
  %v2_d22c = add i32 %v2_d220, %v2_d210
  store i32 %v2_d22c, i32* %r2.global-to-local, align 4
  %v2_d230 = add i32 %v2_d224, %v2_d210
  store i32 %v2_d230, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_d240 = add i32 %v2_d22c, 4
  %v3_d240 = inttoptr i32 %v2_d240 to i32*
  store i32 -1, i32* %v3_d240, align 4
  %v0_d244 = load i32, i32* @r5, align 4
  %v1_d244 = load i32, i32* %r1.global-to-local, align 4
  %v2_d244 = add i32 %v1_d244, 12
  %v3_d244 = inttoptr i32 %v2_d244 to i32*
  store i32 %v0_d244, i32* %v3_d244, align 4
  %v0_d248 = load i32, i32* %r0.global-to-local, align 4
  %v5_d248 = trunc i32 %v0_d248 to i16
  %v7_d24c = icmp sgt i16 %v3_d204162, 254
  br i1 %v7_d24c, label %dec_label_pc_d250, label %dec_label_pc_d204.dec_label_pc_d204_crit_edge

dec_label_pc_d204.dec_label_pc_d204_crit_edge:    ; preds = %dec_label_pc_d204
  %v2_d210.pre = load i32, i32* @global_var_202e8.111, align 4
  br label %dec_label_pc_d204

dec_label_pc_d250:                                ; preds = %dec_label_pc_d204
  store i16 %v5_d248, i16* %stack_var_-52, align 2
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_d25c = call i32 @function_10384(i32 2, i32 3, i32 6)
  store i32 %v3_d25c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_202ec.113 to i32), i32* %r2.global-to-local, align 4
  %v2_d264 = icmp eq i32 %v3_d25c, -1
  store i1 %v2_d264, i1* %cpsr_c.global-to-local, align 1
  %v7_d264 = icmp eq i32 %v3_d25c, -1
  store i1 %v7_d264, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d25c, i32* %r4.global-to-local, align 4
  store i32 %v3_d25c, i32* @global_var_202ec.113, align 4
  br i1 %v7_d264, label %dec_label_pc_e3d0, label %dec_label_pc_d274

dec_label_pc_d274:                                ; preds = %dec_label_pc_d250
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_d278 = load i32, i32* @r5, align 4
  store i32 %v0_d278, i32* %r2.global-to-local, align 4
  %v2_d27c = call i32 @function_fe3c(i32 %v3_d25c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_d284 = or i32 %v2_d27c, 2048
  store i32 %v1_d284, i32* %r2.global-to-local, align 4
  %v0_d288 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_d288, i32* %r0.global-to-local, align 4
  %v2_d28c = call i32 @function_fe3c(i32 %v0_d288, i32 4)
  %v2_d294 = load i32, i32* @global_var_202ec.113, align 4
  store i32 %v2_d294, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_d2a0 = load i32, i32* @r5, align 4
  store i32 %v0_d2a0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_d2a8 = ptrtoint i16* %stack_var_-52 to i32
  store i32 %v2_d2a8, i32* %r3.global-to-local, align 4
  store i16 1, i16* %stack_var_-52, align 2
  %v5_d2b8 = call i32 @function_10340(i32 %v2_d294, i32 %v0_d2a0, i32 3, i32 %v2_d2a8, i32 4)
  store i32 %v5_d2b8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_d2bc = icmp eq i32 %v5_d2b8, 0
  store i1 %v2_d2bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d2bc, label %dec_label_pc_d2c4, label %dec_label_pc_e3c4

dec_label_pc_d2c4:                                ; preds = %dec_label_pc_d274, %dec_label_pc_d2c4
  %v0_d2c4 = call i32 @function_cad8()
  %v3_d2c8 = mul i32 %v0_d2c4, 65536
  store i32 %v3_d2c8, i32* %r0.global-to-local, align 4
  %v1_d2d0 = mul i32 %v0_d2c4, 256
  %v3_d2d4 = and i32 %v1_d2d0, 65280
  %tmp348 = udiv i32 %v0_d2c4, 256
  %v4_d2d8 = urem i32 %tmp348, 256
  %v5_d2d8 = or i32 %v4_d2d8, %v3_d2d4
  store i32 %v5_d2d8, i32* %r3.global-to-local, align 4
  %v2_d2dc = icmp ugt i32 %v5_d2d8, 1023
  store i1 %v2_d2dc, i1* %cpsr_c.global-to-local, align 1
  %v7_d2dc = icmp eq i32 %v5_d2d8, 1024
  store i1 %v7_d2dc, i1* %cpsr_z.global-to-local, align 1
  %v3_d2e4 = icmp ult i32 %v5_d2d8, 1022
  br i1 %v3_d2e4, label %dec_label_pc_d2c4, label %dec_label_pc_d2e8

dec_label_pc_d2e8:                                ; preds = %dec_label_pc_d2c4
  %v5_d2e0.le = trunc i32 %v0_d2c4 to i16
  store i32 ptrtoint (i8** @global_var_1e270.115 to i32), i32* %r0.global-to-local, align 4
  %v2_d2ec = load i8, i8* bitcast (i8** @global_var_1e270.115 to i8*), align 4
  %v3_d2ec = zext i8 %v2_d2ec to i32
  %v1_d2f0 = and i32 %v3_d2ec, 240
  %v1_d2f4 = or i32 %v1_d2f0, 5
  store i32 %v1_d2f4, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_1e270.115 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_1e272.116 to i16*), align 4
  %v0_d314 = call i32 @function_cad8()
  %v1_d314 = trunc i32 %v0_d314 to i16
  %v3_d31c = load i8, i8* @global_var_1e290.119, align 1
  store i32 ptrtoint (i32* @global_var_1e284.118 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_1e270.115 to i32), i32* %ip.global-to-local, align 4
  %tmp = urem i8 %v3_d31c, 16
  %v1_d328 = zext i8 %tmp to i32
  store i32 6, i32* @r4, align 4
  %v1_d330 = or i32 %v1_d328, 80
  store i32 %v1_d330, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1e278.120 to i8*), align 4
  store i16 %v1_d314, i16* bitcast (i32* @global_var_1e274.121 to i16*), align 4
  %v1_d340 = trunc i32 %v1_d330 to i8
  store i8 %v1_d340, i8* @global_var_1e290.119, align 1
  store i8 6, i8* bitcast (i32* @global_var_1e279.122 to i8*), align 4
  %v4_d348 = sext i16 %v5_d2e0.le to i32
  store i32 %v4_d348, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_1e286.123, align 2
  store i16 %v5_d2e0.le, i16* bitcast (i32* @global_var_1e284.118 to i16*), align 4
  %v0_d358 = call i32 @function_cad8()
  %v1_d358 = trunc i32 %v0_d358 to i16
  %v3_d360 = load i8, i8* @global_var_1e291.124, align 1
  %v4_d360 = zext i8 %v3_d360 to i32
  store i32 ptrtoint (i32* @global_var_1e284.118 to i32), i32* %ip.global-to-local, align 4
  %v1_d368 = or i32 %v4_d360, 2
  store i32 %v1_d368, i32* %r3.global-to-local, align 4
  store i16 %v1_d358, i16* bitcast (i32* @global_var_1e292.125 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_15500.127 to i32), i32* %r1.global-to-local, align 4
  %v1_d374 = trunc i32 %v1_d368 to i8
  store i8 %v1_d374, i8* @global_var_1e291.124, align 1
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_d380 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15500.127 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15500.127 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_d390 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_15500.127 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15030.133 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_d3a0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15030.133 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15038.135 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_d3b0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([6 x i8]* @global_var_15038.135 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_d3c0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r1.global-to-local, align 4
  %v5_d3d0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15040.137 to i32), i32* %r1.global-to-local, align 4
  %v0_d3dc = load i32, i32* @r4, align 4
  store i32 %v0_d3dc, i32* %r2.global-to-local, align 4
  %v4_d3e0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15040.137 to i32), i32 %v0_d3dc)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15048.139 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_d3f0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([8 x i8]* @global_var_15048.139 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15050.141 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_d400 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([8 x i8]* @global_var_15050.141 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15058.143 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_d410 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([9 x i8]* @global_var_15058.143 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.145 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_d420 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15064.145 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1506c.147 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_d430 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_1506c.147 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_15050.141 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15050.141 to i32), i32* %r1.global-to-local, align 4
  %v5_d440 = call i32 @function_cd5c(i32 ptrtoint ([8 x i8]* @global_var_15050.141 to i32), i32 ptrtoint ([8 x i8]* @global_var_15050.141 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15050.141 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15500.127 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_d450 = call i32 @function_cd5c(i32 ptrtoint ([8 x i8]* @global_var_15050.141 to i32), i32 ptrtoint (i32* @global_var_15500.127 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15074.149 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15074.149 to i32), i32* %r1.global-to-local, align 4
  %v5_d460 = call i32 @function_cd5c(i32 ptrtoint ([8 x i8]* @global_var_15074.149 to i32), i32 ptrtoint ([8 x i8]* @global_var_15074.149 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_15074.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_d470 = call i32 @function_cd5c(i32 ptrtoint ([8 x i8]* @global_var_15074.149 to i32), i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15074.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15480.151 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_d480 = call i32 @function_cd5c(i32 ptrtoint ([8 x i8]* @global_var_15074.149 to i32), i32 ptrtoint (i32* @global_var_15480.151 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15074.149 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.145 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_d490 = call i32 @function_cd5c(i32 ptrtoint ([8 x i8]* @global_var_15074.149 to i32), i32 ptrtoint (i32* @global_var_15064.145 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15074.149 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_d4a0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([8 x i8]* @global_var_15074.149 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1507c.153 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_d4b0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([9 x i8]* @global_var_1507c.153 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r1.global-to-local, align 4
  %v5_d4c0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15088.155 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_d4d0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15088.155 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15090.157 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15500.127 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_d4e0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_15090.157 to i32), i32 ptrtoint (i32* @global_var_15500.127 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15090.157 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15090.157 to i32), i32* %r1.global-to-local, align 4
  %v5_d4f0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_15090.157 to i32), i32 ptrtoint ([5 x i8]* @global_var_15090.157 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15090.157 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.145 to i32), i32* %r1.global-to-local, align 4
  %v0_d4fc = load i32, i32* @r4, align 4
  store i32 %v0_d4fc, i32* %r2.global-to-local, align 4
  %v4_d500 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_15090.157 to i32), i32 ptrtoint (i32* @global_var_15064.145 to i32), i32 %v0_d4fc)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15098.159 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_d510 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([5 x i8]* @global_var_15098.159 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150a0.161 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_d520 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_150a0.161 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_151f4.163 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_d530 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_151f4.163 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_150ac.165 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_d540 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([9 x i8]* @global_var_150ac.165 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_151f4.163 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_d550 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_151f4.163 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150b8.167 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_d560 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_150b8.167 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1507c.153 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_d570 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([9 x i8]* @global_var_1507c.153 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15480.151 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_d580 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15480.151 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150c0.169 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_d590 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_150c0.169 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_150c8.171 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15500.127 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_d5a0 = call i32 @function_cd5c(i32 ptrtoint ([14 x i8]* @global_var_150c8.171 to i32), i32 ptrtoint (i32* @global_var_15500.127 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_150c8.171 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_150d8.173 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_d5b0 = call i32 @function_cd5c(i32 ptrtoint ([14 x i8]* @global_var_150c8.171 to i32), i32 ptrtoint ([7 x i8]* @global_var_150d8.173 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_150c8.171 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_150e0.175 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_d5c0 = call i32 @function_cd5c(i32 ptrtoint ([14 x i8]* @global_var_150c8.171 to i32), i32 ptrtoint ([4 x i8]* @global_var_150e0.175 to i32), i32 13)
  store i32 ptrtoint ([14 x i8]* @global_var_150c8.171 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_150e4.177 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v5_d5d0 = call i32 @function_cd5c(i32 ptrtoint ([14 x i8]* @global_var_150c8.171 to i32), i32 ptrtoint ([7 x i8]* @global_var_150e4.177 to i32), i32 13)
  store i32 ptrtoint ([8 x i8]* @global_var_150ec.179 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_150ec.179 to i32), i32* %r1.global-to-local, align 4
  %v5_d5e0 = call i32 @function_cd5c(i32 ptrtoint ([8 x i8]* @global_var_150ec.179 to i32), i32 ptrtoint ([8 x i8]* @global_var_150ec.179 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_150ec.179 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_d5f0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([8 x i8]* @global_var_150ec.179 to i32), i32 7)
  store i32 ptrtoint ([11 x i8]* @global_var_150f4.181 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_150f4.181 to i32), i32* %r1.global-to-local, align 4
  %v5_d600 = call i32 @function_cd5c(i32 ptrtoint ([11 x i8]* @global_var_150f4.181 to i32), i32 ptrtoint ([11 x i8]* @global_var_150f4.181 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15100.183 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15500.127 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_d610 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15100.183 to i32), i32 ptrtoint (i32* @global_var_15500.127 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15100.183 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15100.183 to i32), i32* %r1.global-to-local, align 4
  %v5_d620 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15100.183 to i32), i32 ptrtoint ([6 x i8]* @global_var_15100.183 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15100.183 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15088.155 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_d630 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15100.183 to i32), i32 ptrtoint (i32* @global_var_15088.155 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15100.183 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.145 to i32), i32* %r1.global-to-local, align 4
  %v0_d63c = load i32, i32* @r4, align 4
  store i32 %v0_d63c, i32* %r2.global-to-local, align 4
  %v4_d640 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15100.183 to i32), i32 ptrtoint (i32* @global_var_15064.145 to i32), i32 %v0_d63c)
  store i32 ptrtoint (i32* @global_var_15108.185 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1507c.153 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_d650 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_15108.185 to i32), i32 ptrtoint ([9 x i8]* @global_var_1507c.153 to i32), i32 1)
  store i32 ptrtoint ([14 x i8]* @global_var_15110.187 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15480.151 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_d660 = call i32 @function_cd5c(i32 ptrtoint ([14 x i8]* @global_var_15110.187 to i32), i32 ptrtoint (i32* @global_var_15480.151 to i32), i32 13)
  store i32 ptrtoint (i32* @global_var_150b8.167 to i32), i32* %r0.global-to-local, align 4
  %v0_d668 = load i32, i32* @r4, align 4
  store i32 %v0_d668, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_150b8.167 to i32), i32* %r1.global-to-local, align 4
  %v3_d670 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_150b8.167 to i32), i32 ptrtoint (i32* @global_var_150b8.167 to i32), i32 %v0_d668)
  store i32 ptrtoint (i32* @global_var_15040.137 to i32), i32* %r0.global-to-local, align 4
  %v0_d678 = load i32, i32* @r4, align 4
  store i32 %v0_d678, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15040.137 to i32), i32* %r1.global-to-local, align 4
  %v3_d680 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_15040.137 to i32), i32 ptrtoint (i32* @global_var_15040.137 to i32), i32 %v0_d678)
  store i32 ptrtoint ([5 x i8]* @global_var_15120.189 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15120.189 to i32), i32* %r1.global-to-local, align 4
  %v5_d690 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_15120.189 to i32), i32 ptrtoint ([5 x i8]* @global_var_15120.189 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15120.189 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_d6a0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([5 x i8]* @global_var_15120.189 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15128.191 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v4_d6b0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15128.191 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15130.193 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_d6c0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15130.193 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15138.195 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_d6d0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15138.195 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15140.197 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_d6e0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([6 x i8]* @global_var_15140.197 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15148.199 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_d6f0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([5 x i8]* @global_var_15148.199 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15150.201 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_d700 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([6 x i8]* @global_var_15150.201 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15158.203 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_d710 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([9 x i8]* @global_var_15158.203 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15164.205 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_d720 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15164.205 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15174.207 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_d730 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15174.207 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15184.209 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_d740 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([7 x i8]* @global_var_15184.209 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1518c.211 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_d750 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([5 x i8]* @global_var_1518c.211 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15194.213 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_d760 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([9 x i8]* @global_var_15194.213 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15090.157 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_d770 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([5 x i8]* @global_var_15090.157 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_151a0.215 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_d780 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([8 x i8]* @global_var_151a0.215 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_151a8.217 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_d790 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_151a8.217 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_151b4.219 to i32), i32* %r1.global-to-local, align 4
  %v0_d79c = load i32, i32* @r4, align 4
  store i32 %v0_d79c, i32* %r2.global-to-local, align 4
  %v4_d7a0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_151b4.219 to i32), i32 %v0_d79c)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_151bc.221 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_d7b0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_151bc.221 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15480.151 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_d7c0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_15480.151 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15088.155 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_d7d0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_15088.155 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1506c.147 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_d7e0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_1506c.147 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.145 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_d7f0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_15064.145 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15174.207 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_d800 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_15174.207 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_151c4.223 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_d810 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_151c4.223 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15098.159 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_d820 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([5 x i8]* @global_var_15098.159 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_150d8.173 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_d830 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([7 x i8]* @global_var_150d8.173 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1505c.225 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_d840 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([5 x i8]* @global_var_1505c.225 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_151d0.227 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_d850 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_151d0.227 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_151dc.229 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_d860 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([6 x i8]* @global_var_151dc.229 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_151e4.231 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_d870 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([4 x i8]* @global_var_151e4.231 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_151e8.233 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_d880 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_151e8.233 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_151f0.235 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_d890 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_151f0.235 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_151fc.237 to i32), i32* %r1.global-to-local, align 4
  %v0_d89c = load i32, i32* @r4, align 4
  store i32 %v0_d89c, i32* %r2.global-to-local, align 4
  %v5_d8a0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([7 x i8]* @global_var_151fc.237 to i32), i32 %v0_d89c)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15204.239 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_d8b0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([9 x i8]* @global_var_15204.239 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15210.241 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_d8c0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_15210.241 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15218.243 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_d8d0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_15218.243 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15220.245 to i32), i32* %r1.global-to-local, align 4
  %v0_d8dc = load i32, i32* @r4, align 4
  store i32 %v0_d8dc, i32* %r2.global-to-local, align 4
  %v4_d8e0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_15220.245 to i32), i32 %v0_d8dc)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15228.247 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_d8f0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_15228.247 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15230.249 to i32), i32* %r1.global-to-local, align 4
  %v0_d8fc = load i32, i32* @r4, align 4
  store i32 %v0_d8fc, i32* %r2.global-to-local, align 4
  %v5_d900 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([7 x i8]* @global_var_15230.249 to i32), i32 %v0_d8fc)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15238.251 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_d910 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([8 x i8]* @global_var_15238.251 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15240.253 to i32), i32* %r1.global-to-local, align 4
  %v0_d91c = load i32, i32* @r4, align 4
  store i32 %v0_d91c, i32* %r2.global-to-local, align 4
  %v4_d920 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_15240.253 to i32), i32 %v0_d91c)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_150e4.177 to i32), i32* %r1.global-to-local, align 4
  %v0_d92c = load i32, i32* @r4, align 4
  store i32 %v0_d92c, i32* %r2.global-to-local, align 4
  %v5_d930 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([7 x i8]* @global_var_150e4.177 to i32), i32 %v0_d92c)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15248.255 to i32), i32* %r1.global-to-local, align 4
  %v0_d93c = load i32, i32* @r4, align 4
  store i32 %v0_d93c, i32* %r2.global-to-local, align 4
  %v4_d940 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_15248.255 to i32), i32 %v0_d93c)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15250.257 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_d950 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([7 x i8]* @global_var_15250.257 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15258.259 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_d960 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([9 x i8]* @global_var_15258.259 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_15264.261 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15264.261 to i32), i32* %r1.global-to-local, align 4
  %v5_d970 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15264.261 to i32), i32 ptrtoint ([6 x i8]* @global_var_15264.261 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_1505c.225 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1505c.225 to i32), i32* %r1.global-to-local, align 4
  %v5_d980 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_1505c.225 to i32), i32 ptrtoint ([5 x i8]* @global_var_1505c.225 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_1505c.225 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15500.127 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_d990 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_1505c.225 to i32), i32 ptrtoint (i32* @global_var_15500.127 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1535c.263 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_d9a0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_1535c.263 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1526c.265 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_d9b0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_1526c.265 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15274.267 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15500.127 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_d9c0 = call i32 @function_cd5c(i32 ptrtoint ([8 x i8]* @global_var_15274.267 to i32), i32 ptrtoint (i32* @global_var_15500.127 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15274.267 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15274.267 to i32), i32* %r1.global-to-local, align 4
  %v5_d9d0 = call i32 @function_cd5c(i32 ptrtoint ([8 x i8]* @global_var_15274.267 to i32), i32 ptrtoint ([8 x i8]* @global_var_15274.267 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_1527c.269 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15500.127 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_d9e0 = call i32 @function_cd5c(i32 ptrtoint ([4 x i8]* @global_var_1527c.269 to i32), i32 ptrtoint (i32* @global_var_15500.127 to i32), i32 3)
  store i32 ptrtoint ([8 x i8]* @global_var_15280.271 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15288.273 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_d9f0 = call i32 @function_cd5c(i32 ptrtoint ([8 x i8]* @global_var_15280.271 to i32), i32 ptrtoint ([7 x i8]* @global_var_15288.273 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_15290.275 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15290.275 to i32), i32* %r1.global-to-local, align 4
  %v5_da00 = call i32 @function_cd5c(i32 ptrtoint ([4 x i8]* @global_var_15290.275 to i32), i32 ptrtoint ([4 x i8]* @global_var_15290.275 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15294.277 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_da10 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15294.277 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_152a0.279 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_da20 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([5 x i8]* @global_var_152a0.279 to i32), i32 4)
  store i32 ptrtoint ([7 x i8]* @global_var_152a8.281 to i32), i32* %r0.global-to-local, align 4
  %v0_da28 = load i32, i32* @r4, align 4
  store i32 %v0_da28, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_152a8.281 to i32), i32* %r1.global-to-local, align 4
  %v5_da30 = call i32 @function_cd5c(i32 ptrtoint ([7 x i8]* @global_var_152a8.281 to i32), i32 ptrtoint ([7 x i8]* @global_var_152a8.281 to i32), i32 %v0_da28)
  store i32 ptrtoint (i32* @global_var_15500.127 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_152a8.281 to i32), i32* %r1.global-to-local, align 4
  %v0_da3c = load i32, i32* @r4, align 4
  store i32 %v0_da3c, i32* %r2.global-to-local, align 4
  %v4_da40 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_15500.127 to i32), i32 ptrtoint ([7 x i8]* @global_var_152a8.281 to i32), i32 %v0_da3c)
  store i32 ptrtoint (i32* @global_var_152b0.283 to i32), i32* %r0.global-to-local, align 4
  %v0_da48 = load i32, i32* @r4, align 4
  store i32 %v0_da48, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_152b0.283 to i32), i32* %r1.global-to-local, align 4
  %v3_da50 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_152b0.283 to i32), i32 ptrtoint (i32* @global_var_152b0.283 to i32), i32 %v0_da48)
  store i32 ptrtoint ([6 x i8]* @global_var_152b8.285 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15050.141 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_da60 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_152b8.285 to i32), i32 ptrtoint ([8 x i8]* @global_var_15050.141 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_152c0.287 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15090.157 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_da70 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_152c0.287 to i32), i32 ptrtoint ([5 x i8]* @global_var_15090.157 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_152c0.287 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15098.159 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_da80 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_152c0.287 to i32), i32 ptrtoint ([5 x i8]* @global_var_15098.159 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_152c0.287 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_da90 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_152c0.287 to i32), i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 5)
  store i32 ptrtoint (i32* @global_var_152c8.289 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15500.127 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v3_daa0 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_152c8.289 to i32), i32 ptrtoint (i32* @global_var_15500.127 to i32), i32 5)
  store i32 ptrtoint ([9 x i8]* @global_var_152d0.291 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_152dc.293 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_dab0 = call i32 @function_cd5c(i32 ptrtoint ([9 x i8]* @global_var_152d0.291 to i32), i32 ptrtoint ([7 x i8]* @global_var_152dc.293 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_152e4.295 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_152e4.295 to i32), i32* %r1.global-to-local, align 4
  %v5_dac0 = call i32 @function_cd5c(i32 ptrtoint ([8 x i8]* @global_var_152e4.295 to i32), i32 ptrtoint ([8 x i8]* @global_var_152e4.295 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_152ec.297 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_152ec.297 to i32), i32* %r1.global-to-local, align 4
  %v5_dad0 = call i32 @function_cd5c(i32 ptrtoint ([7 x i8]* @global_var_152ec.297 to i32), i32 ptrtoint ([7 x i8]* @global_var_152ec.297 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_152ec.297 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_152f4.299 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_dae0 = call i32 @function_cd5c(i32 ptrtoint ([7 x i8]* @global_var_152ec.297 to i32), i32 ptrtoint ([8 x i8]* @global_var_152f4.299 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_152fc.301 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([10 x i8]* @global_var_15304.303 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_daf0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_152fc.301 to i32), i32 ptrtoint ([10 x i8]* @global_var_15304.303 to i32), i32 9)
  store i32 ptrtoint ([6 x i8]* @global_var_152fc.301 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15250.257 to i32), i32* %r1.global-to-local, align 4
  %v0_dafc = load i32, i32* @r4, align 4
  store i32 %v0_dafc, i32* %r2.global-to-local, align 4
  %v5_db00 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_152fc.301 to i32), i32 ptrtoint ([7 x i8]* @global_var_15250.257 to i32), i32 %v0_dafc)
  store i32 ptrtoint ([5 x i8]* @global_var_15310.305 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15310.305 to i32), i32* %r1.global-to-local, align 4
  %v5_db10 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_15310.305 to i32), i32 ptrtoint ([5 x i8]* @global_var_15310.305 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15318.307 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15320.309 to i32), i32* %r1.global-to-local, align 4
  %v0_db1c = load i32, i32* @r4, align 4
  store i32 %v0_db1c, i32* %r2.global-to-local, align 4
  %v5_db20 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_15318.307 to i32), i32 ptrtoint ([7 x i8]* @global_var_15320.309 to i32), i32 %v0_db1c)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15320.309 to i32), i32* %r1.global-to-local, align 4
  %v0_db2c = load i32, i32* @r4, align 4
  store i32 %v0_db2c, i32* %r2.global-to-local, align 4
  %v5_db30 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([7 x i8]* @global_var_15320.309 to i32), i32 %v0_db2c)
  store i32 ptrtoint ([3 x i8]* @global_var_152f0.311 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15328.313 to i32), i32* %r1.global-to-local, align 4
  %v0_db3c = load i32, i32* @r4, align 4
  store i32 %v0_db3c, i32* %r2.global-to-local, align 4
  %v5_db40 = call i32 @function_cd5c(i32 ptrtoint ([3 x i8]* @global_var_152f0.311 to i32), i32 ptrtoint ([7 x i8]* @global_var_15328.313 to i32), i32 %v0_db3c)
  store i32 ptrtoint ([7 x i8]* @global_var_15328.313 to i32), i32* %r0.global-to-local, align 4
  %v0_db48 = load i32, i32* @r4, align 4
  store i32 %v0_db48, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15328.313 to i32), i32* %r1.global-to-local, align 4
  %v5_db50 = call i32 @function_cd5c(i32 ptrtoint ([7 x i8]* @global_var_15328.313 to i32), i32 ptrtoint ([7 x i8]* @global_var_15328.313 to i32), i32 %v0_db48)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15330.315 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_db60 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint (i32* @global_var_15330.315 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15330.315 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_db70 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15330.315 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1533c.317 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_db80 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([5 x i8]* @global_var_1533c.317 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15344.319 to i32), i32* %r1.global-to-local, align 4
  %v0_db8c = load i32, i32* @r4, align 4
  store i32 %v0_db8c, i32* %r2.global-to-local, align 4
  %v5_db90 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([7 x i8]* @global_var_15344.319 to i32), i32 %v0_db8c)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1534c.321 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_dba0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_1534c.321 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15358.323 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_dbb0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15358.323 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15360.325 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_dbc0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15360.325 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1536c.327 to i32), i32* %r1.global-to-local, align 4
  %v0_dbcc = load i32, i32* @r4, align 4
  store i32 %v0_dbcc, i32* %r2.global-to-local, align 4
  %v4_dbd0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_1536c.327 to i32), i32 %v0_dbcc)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15374.329 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_dbe0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15374.329 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15380.331 to i32), i32* %r1.global-to-local, align 4
  %v0_dbec = load i32, i32* @r4, align 4
  store i32 %v0_dbec, i32* %r2.global-to-local, align 4
  %v4_dbf0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15380.331 to i32), i32 %v0_dbec)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15388.333 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_dc00 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15388.333 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15390.335 to i32), i32* %r1.global-to-local, align 4
  %v0_dc0c = load i32, i32* @r4, align 4
  store i32 %v0_dc0c, i32* %r2.global-to-local, align 4
  %v5_dc10 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([7 x i8]* @global_var_15390.335 to i32), i32 %v0_dc0c)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15398.337 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_dc20 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15398.337 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_153a0.339 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_dc30 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_153a0.339 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_153ac.341 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_dc40 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint ([9 x i8]* @global_var_153ac.341 to i32), i32 8)
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_153b8.343 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_dc50 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 ptrtoint ([6 x i8]* @global_var_153b8.343 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_153b8.343 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_153b8.343 to i32), i32* %r1.global-to-local, align 4
  %v5_dc60 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_153b8.343 to i32), i32 ptrtoint ([6 x i8]* @global_var_153b8.343 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_153c0.345 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_153c0.345 to i32), i32* %r1.global-to-local, align 4
  %v5_dc70 = call i32 @function_cd5c(i32 ptrtoint ([8 x i8]* @global_var_153c0.345 to i32), i32 ptrtoint ([8 x i8]* @global_var_153c0.345 to i32), i32 7)
  store i32 ptrtoint (i32* @global_var_153c8.347 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_150e4.177 to i32), i32* %r1.global-to-local, align 4
  %v0_dc7c = load i32, i32* @r4, align 4
  store i32 %v0_dc7c, i32* %r2.global-to-local, align 4
  %v4_dc80 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_153c8.347 to i32), i32 ptrtoint ([7 x i8]* @global_var_150e4.177 to i32), i32 %v0_dc7c)
  store i32 ptrtoint ([4 x i8]* @global_var_153d0.349 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1507c.153 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_dc90 = call i32 @function_cd5c(i32 ptrtoint ([4 x i8]* @global_var_153d0.349 to i32), i32 ptrtoint ([9 x i8]* @global_var_1507c.153 to i32), i32 8)
  store i32 ptrtoint ([7 x i8]* @global_var_153d4.351 to i32), i32* %r0.global-to-local, align 4
  %v0_dc98 = load i32, i32* @r4, align 4
  store i32 %v0_dc98, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_153d4.351 to i32), i32* %r1.global-to-local, align 4
  %v5_dca0 = call i32 @function_cd5c(i32 ptrtoint ([7 x i8]* @global_var_153d4.351 to i32), i32 ptrtoint ([7 x i8]* @global_var_153d4.351 to i32), i32 %v0_dc98)
  store i32 ptrtoint ([6 x i8]* @global_var_153dc.353 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_153e4.355 to i32), i32* %r1.global-to-local, align 4
  %v0_dcac = load i32, i32* @r4, align 4
  store i32 %v0_dcac, i32* %r2.global-to-local, align 4
  %v4_dcb0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_153dc.353 to i32), i32 ptrtoint (i32* @global_var_153e4.355 to i32), i32 %v0_dcac)
  store i32 ptrtoint ([7 x i8]* @global_var_153ec.357 to i32), i32* %r0.global-to-local, align 4
  %v0_dcb8 = load i32, i32* @r4, align 4
  store i32 %v0_dcb8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_153ec.357 to i32), i32* %r1.global-to-local, align 4
  %v5_dcc0 = call i32 @function_cd5c(i32 ptrtoint ([7 x i8]* @global_var_153ec.357 to i32), i32 ptrtoint ([7 x i8]* @global_var_153ec.357 to i32), i32 %v0_dcb8)
  store i32 ptrtoint ([6 x i8]* @global_var_153f4.359 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_153f4.359 to i32), i32* %r1.global-to-local, align 4
  %v5_dcd0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_153f4.359 to i32), i32 ptrtoint ([6 x i8]* @global_var_153f4.359 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_153fc.361 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_153fc.361 to i32), i32* %r1.global-to-local, align 4
  %v5_dce0 = call i32 @function_cd5c(i32 ptrtoint ([8 x i8]* @global_var_153fc.361 to i32), i32 ptrtoint ([8 x i8]* @global_var_153fc.361 to i32), i32 7)
  store i32 ptrtoint ([4 x i8]* @global_var_15404.363 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15404.363 to i32), i32* %r1.global-to-local, align 4
  %v5_dcf0 = call i32 @function_cd5c(i32 ptrtoint ([4 x i8]* @global_var_15404.363 to i32), i32 ptrtoint ([4 x i8]* @global_var_15404.363 to i32), i32 3)
  store i32 ptrtoint ([4 x i8]* @global_var_15408.365 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15408.365 to i32), i32* %r1.global-to-local, align 4
  %v5_dd00 = call i32 @function_cd5c(i32 ptrtoint ([4 x i8]* @global_var_15408.365 to i32), i32 ptrtoint ([4 x i8]* @global_var_15408.365 to i32), i32 3)
  store i32 ptrtoint (i32* @global_var_1540c.367 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1540c.367 to i32), i32* %r1.global-to-local, align 4
  %v3_dd10 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_1540c.367 to i32), i32 ptrtoint (i32* @global_var_1540c.367 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15414.369 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15414.369 to i32), i32* %r1.global-to-local, align 4
  %v5_dd20 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_15414.369 to i32), i32 ptrtoint ([5 x i8]* @global_var_15414.369 to i32), i32 4)
  store i32 ptrtoint ([7 x i8]* @global_var_1541c.371 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15500.127 to i32), i32* %r1.global-to-local, align 4
  %v0_dd2c = load i32, i32* @r4, align 4
  store i32 %v0_dd2c, i32* %r2.global-to-local, align 4
  %v4_dd30 = call i32 @function_cd5c(i32 ptrtoint ([7 x i8]* @global_var_1541c.371 to i32), i32 ptrtoint (i32* @global_var_15500.127 to i32), i32 %v0_dd2c)
  store i32 ptrtoint ([6 x i8]* @global_var_15424.373 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_151f4.163 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_dd40 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15424.373 to i32), i32 ptrtoint (i32* @global_var_151f4.163 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15424.373 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15064.145 to i32), i32* %r1.global-to-local, align 4
  %v0_dd4c = load i32, i32* @r4, align 4
  store i32 %v0_dd4c, i32* %r2.global-to-local, align 4
  %v4_dd50 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15424.373 to i32), i32 ptrtoint (i32* @global_var_15064.145 to i32), i32 %v0_dd4c)
  store i32 ptrtoint ([7 x i8]* @global_var_1542c.375 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15500.127 to i32), i32* %r1.global-to-local, align 4
  %v0_dd5c = load i32, i32* @r4, align 4
  store i32 %v0_dd5c, i32* %r2.global-to-local, align 4
  %v4_dd60 = call i32 @function_cd5c(i32 ptrtoint ([7 x i8]* @global_var_1542c.375 to i32), i32 ptrtoint (i32* @global_var_15500.127 to i32), i32 %v0_dd5c)
  store i32 ptrtoint ([7 x i8]* @global_var_1542c.375 to i32), i32* %r0.global-to-local, align 4
  %v0_dd68 = load i32, i32* @r4, align 4
  store i32 %v0_dd68, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1542c.375 to i32), i32* %r1.global-to-local, align 4
  %v5_dd70 = call i32 @function_cd5c(i32 ptrtoint ([7 x i8]* @global_var_1542c.375 to i32), i32 ptrtoint ([7 x i8]* @global_var_1542c.375 to i32), i32 %v0_dd68)
  store i32 ptrtoint ([5 x i8]* @global_var_15434.377 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15434.377 to i32), i32* %r1.global-to-local, align 4
  %v5_dd80 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_15434.377 to i32), i32 ptrtoint ([5 x i8]* @global_var_15434.377 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_1543c.379 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_dd90 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_1543c.379 to i32), i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_15444.381 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_dda0 = call i32 @function_cd5c(i32 ptrtoint ([8 x i8]* @global_var_15444.381 to i32), i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), i32 7)
  store i32 ptrtoint ([7 x i8]* @global_var_1544c.383 to i32), i32* %r0.global-to-local, align 4
  %v0_dda8 = load i32, i32* @r4, align 4
  store i32 %v0_dda8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1544c.383 to i32), i32* %r1.global-to-local, align 4
  %v5_ddb0 = call i32 @function_cd5c(i32 ptrtoint ([7 x i8]* @global_var_1544c.383 to i32), i32 ptrtoint ([7 x i8]* @global_var_1544c.383 to i32), i32 %v0_dda8)
  store i32 ptrtoint ([6 x i8]* @global_var_15454.385 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_1545c.387 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_ddc0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15454.385 to i32), i32 ptrtoint ([6 x i8]* @global_var_1545c.387 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15464.389 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1546c.391 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_ddd0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_15464.389 to i32), i32 ptrtoint ([5 x i8]* @global_var_1546c.391 to i32), i32 5)
  store i32 ptrtoint (i32* @global_var_15474.393 to i32), i32* %r0.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15474.393 to i32), i32* %r1.global-to-local, align 4
  %v3_dde0 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_15474.393 to i32), i32 ptrtoint (i32* @global_var_15474.393 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15208.395 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1547c.397 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_ddf0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_15208.395 to i32), i32 ptrtoint (i32* @global_var_1547c.397 to i32), i32 8)
  store i32 ptrtoint ([7 x i8]* @global_var_15488.399 to i32), i32* %r0.global-to-local, align 4
  %v0_ddf8 = load i32, i32* @r4, align 4
  store i32 %v0_ddf8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15488.399 to i32), i32* %r1.global-to-local, align 4
  %v5_de00 = call i32 @function_cd5c(i32 ptrtoint ([7 x i8]* @global_var_15488.399 to i32), i32 ptrtoint ([7 x i8]* @global_var_15488.399 to i32), i32 %v0_ddf8)
  store i32 ptrtoint (i32* @global_var_15490.401 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15498.403 to i32), i32* %r1.global-to-local, align 4
  %v0_de0c = load i32, i32* @r4, align 4
  store i32 %v0_de0c, i32* %r2.global-to-local, align 4
  %v4_de10 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_15490.401 to i32), i32 ptrtoint ([7 x i8]* @global_var_15498.403 to i32), i32 %v0_de0c)
  store i32 ptrtoint (i32* @global_var_15500.127 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_154a0.405 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_de20 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_15500.127 to i32), i32 ptrtoint ([9 x i8]* @global_var_154a0.405 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_15500.127 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_154ac.407 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_de30 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_15500.127 to i32), i32 ptrtoint ([9 x i8]* @global_var_154ac.407 to i32), i32 8)
  %v0_de34 = load i32, i32* @r4, align 4
  store i32 %v0_de34, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15500.127 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_154b8.409 to i32), i32* %r1.global-to-local, align 4
  %v4_de40 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_15500.127 to i32), i32 ptrtoint ([7 x i8]* @global_var_154b8.409 to i32), i32 %v0_de34)
  store i32 ptrtoint (i32* @global_var_154c0.411 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_154cc.413 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v4_de50 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_154c0.411 to i32), i32 ptrtoint ([5 x i8]* @global_var_154cc.413 to i32), i32 11)
  store i32 ptrtoint ([9 x i8]* @global_var_154d4.415 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_154d4.415 to i32), i32* %r1.global-to-local, align 4
  %v5_de60 = call i32 @function_cd5c(i32 ptrtoint ([9 x i8]* @global_var_154d4.415 to i32), i32 ptrtoint ([9 x i8]* @global_var_154d4.415 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_154e0.417 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_154e0.417 to i32), i32* %r1.global-to-local, align 4
  %v5_de70 = call i32 @function_cd5c(i32 ptrtoint ([9 x i8]* @global_var_154e0.417 to i32), i32 ptrtoint ([9 x i8]* @global_var_154e0.417 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_154ec.419 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_154ec.419 to i32), i32* %r1.global-to-local, align 4
  %v5_de80 = call i32 @function_cd5c(i32 ptrtoint ([9 x i8]* @global_var_154ec.419 to i32), i32 ptrtoint ([9 x i8]* @global_var_154ec.419 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_151f0.235 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_151f0.235 to i32), i32* %r1.global-to-local, align 4
  %v3_de90 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_151f0.235 to i32), i32 ptrtoint (i32* @global_var_151f0.235 to i32), i32 8)
  store i32 ptrtoint (i32* @global_var_154f8.421 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_154f8.421 to i32), i32* %r1.global-to-local, align 4
  %v3_dea0 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_154f8.421 to i32), i32 ptrtoint (i32* @global_var_154f8.421 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_15504.423 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15504.423 to i32), i32* %r1.global-to-local, align 4
  %v5_deb0 = call i32 @function_cd5c(i32 ptrtoint ([9 x i8]* @global_var_15504.423 to i32), i32 ptrtoint ([9 x i8]* @global_var_15504.423 to i32), i32 8)
  store i32 ptrtoint ([9 x i8]* @global_var_15510.425 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15510.425 to i32), i32* %r1.global-to-local, align 4
  %v5_dec0 = call i32 @function_cd5c(i32 ptrtoint ([9 x i8]* @global_var_15510.425 to i32), i32 ptrtoint ([9 x i8]* @global_var_15510.425 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_1551c.427 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_150f4.181 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_ded0 = call i32 @function_cd5c(i32 ptrtoint ([8 x i8]* @global_var_1551c.427 to i32), i32 ptrtoint ([11 x i8]* @global_var_150f4.181 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15524.429 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_dee0 = call i32 @function_cd5c(i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), i32 ptrtoint (i32* @global_var_15524.429 to i32), i32 13)
  store i32 ptrtoint ([6 x i8]* @global_var_153dc.353 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15534.431 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v4_def0 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_153dc.353 to i32), i32 ptrtoint (i32* @global_var_15534.431 to i32), i32 14)
  store i32 ptrtoint ([10 x i8]* @global_var_15544.433 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15550.435 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_df00 = call i32 @function_cd5c(i32 ptrtoint ([10 x i8]* @global_var_15544.433 to i32), i32 ptrtoint (i32* @global_var_15550.435 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_1555c.437 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_15568.439 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v5_df10 = call i32 @function_cd5c(i32 ptrtoint ([10 x i8]* @global_var_1555c.437 to i32), i32 ptrtoint ([11 x i8]* @global_var_15568.439 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_15574.441 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15330.315 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_df20 = call i32 @function_cd5c(i32 ptrtoint ([10 x i8]* @global_var_15574.441 to i32), i32 ptrtoint (i32* @global_var_15330.315 to i32), i32 10)
  store i32 ptrtoint ([10 x i8]* @global_var_15580.443 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15330.315 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_df30 = call i32 @function_cd5c(i32 ptrtoint ([10 x i8]* @global_var_15580.443 to i32), i32 ptrtoint (i32* @global_var_15330.315 to i32), i32 10)
  store i32 ptrtoint (i32* @global_var_154c0.411 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1558c.445 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v3_df40 = call i32 @function_cd5c(i32 ptrtoint (i32* @global_var_154c0.411 to i32), i32 ptrtoint (i32* @global_var_1558c.445 to i32), i32 11)
  store i32 ptrtoint ([13 x i8]* @global_var_15598.447 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([13 x i8]* @global_var_155a8.449 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_df50 = call i32 @function_cd5c(i32 ptrtoint ([13 x i8]* @global_var_15598.447 to i32), i32 ptrtoint ([13 x i8]* @global_var_155a8.449 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_155b8.451 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_155c0.453 to i32), i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  %v4_df60 = call i32 @function_cd5c(i32 ptrtoint ([7 x i8]* @global_var_155b8.451 to i32), i32 ptrtoint (i32* @global_var_155c0.453 to i32), i32 13)
  store i32 ptrtoint ([9 x i8]* @global_var_155c8.455 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_155d4.457 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v5_df70 = call i32 @function_cd5c(i32 ptrtoint ([9 x i8]* @global_var_155c8.455 to i32), i32 ptrtoint ([8 x i8]* @global_var_155d4.457 to i32), i32 15)
  store i32 ptrtoint ([12 x i8]* @global_var_155dc.459 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_155e8.461 to i32), i32* %r1.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  %v4_df80 = call i32 @function_cd5c(i32 ptrtoint ([12 x i8]* @global_var_155dc.459 to i32), i32 ptrtoint (i32* @global_var_155e8.461 to i32), i32 20)
  store i32 ptrtoint ([6 x i8]* @global_var_155f4.463 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_155e8.461 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  %v4_df90 = call i32 @function_cd5c(i32 ptrtoint ([6 x i8]* @global_var_155f4.463 to i32), i32 ptrtoint (i32* @global_var_155e8.461 to i32), i32 14)
  store i32 %v4_df90, i32* %r0.global-to-local, align 4
  %v2_df98 = ptrtoint i32* %stack_var_-1866 to i32
  br label %dec_label_pc_dfa0

dec_label_pc_dfa0:                                ; preds = %dec_label_pc_e6e0, %dec_label_pc_d2e8
  %stack_var_-1880.0 = phi i32 [ %v2_df98, %dec_label_pc_d2e8 ], [ %stack_var_-1880.1, %dec_label_pc_e6e0 ]
  %stack_var_-1876.0 = phi i16 [ %v5_d2e0.le, %dec_label_pc_d2e8 ], [ %stack_var_-1876.1, %dec_label_pc_e6e0 ]
  store i32 ptrtoint (i32* @global_var_1e2a0.100 to i32), i32* %r0.global-to-local, align 4
  %v2_dfa4 = load i32, i32* @global_var_1e2a0.100, align 4
  store i32 %v2_dfa4, i32* @r4, align 4
  %v0_dfa8 = load i32, i32* @fp, align 4
  %v3_dfa8 = icmp uge i32 %v0_dfa8, %v2_dfa4
  store i1 %v3_dfa8, i1* %cpsr_c.global-to-local, align 1
  %v9_dfa8 = icmp eq i32 %v0_dfa8, %v2_dfa4
  store i1 %v9_dfa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dfa8, label %dec_label_pc_e228, label %dec_label_pc_dfb0

dec_label_pc_dfb0:                                ; preds = %dec_label_pc_dfa0
  store i32 0, i32* %r3.global-to-local, align 4
  store i16 0, i16* %stack_var_-52, align 2
  %v2_dfb8 = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_dfbc

dec_label_pc_dfbc:                                ; preds = %.thread39, %dec_label_pc_dfb0
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_dfd0 = call i32 @function_cad8()
  %v1_dfd0 = trunc i32 %v0_dfd0 to i16
  store i32 %v0_dfd0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_202d4.42 to i32), i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e270.115 to i32), i32* %r2.global-to-local, align 4
  %v2_dfdc = load i32, i32* @global_var_202d4.42, align 4
  store i32 %v2_dfdc, i32* %r3.global-to-local, align 4
  store i16 %v1_dfd0, i16* bitcast (i32* @global_var_1e274.121 to i16*), align 4
  store i32 %v2_dfdc, i32* @global_var_1e27c.464, align 4
  br label %dec_label_pc_dfe8

dec_label_pc_dfe8:                                ; preds = %dec_label_pc_e0bc, %dec_label_pc_e018, %dec_label_pc_e0f0, %dec_label_pc_e0e4, %dec_label_pc_e0d8, %dec_label_pc_e0cc, %.thread30, %bb367, %bb366, %bb365, %bb364, %bb363, %dec_label_pc_e0b4, %dec_label_pc_e0ac, %bb359, %dec_label_pc_e07c, %dec_label_pc_e058, %bb352, %dec_label_pc_e028, %bb351, %dec_label_pc_e010, %bb350, %bb369, %dec_label_pc_dfbc
  %v0_dfe8 = call i32 @function_cad8()
  store i32 %v0_dfe8, i32* %r0.global-to-local, align 4
  %v1_dfec = urem i32 %v0_dfe8, 256
  store i32 %v1_dfec, i32* %r1.global-to-local, align 4
  %v3_dff0 = udiv i32 %v0_dfe8, 256
  store i32 %v3_dff0, i32* %r3.global-to-local, align 4
  %v3_dff4 = udiv i32 %v0_dfe8, 65536
  store i32 %v3_dff4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_dff8 = icmp eq i32 %v1_dfec, 0
  store i1 %v2_dff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dff8, label %bb350, label %bb349

bb349:                                            ; preds = %dec_label_pc_dfe8
  %v3_dffc = icmp ugt i32 %v1_dfec, 126
  store i1 %v3_dffc, i1* %cpsr_c.global-to-local, align 1
  %v8_dffc = icmp eq i32 %v1_dfec, 127
  store i1 %v8_dffc, i1* %cpsr_z.global-to-local, align 1
  br label %bb350

bb350:                                            ; preds = %dec_label_pc_dfe8, %bb349
  %v0_e00c = phi i1 [ true, %dec_label_pc_dfe8 ], [ %v8_dffc, %bb349 ]
  %v1_e000 = urem i32 %v3_dff0, 256
  store i32 %v1_e000, i32* %ip.global-to-local, align 4
  %v1_e004 = urem i32 %v3_dff4, 256
  store i32 %v1_e004, i32* %r2.global-to-local, align 4
  %v1_e008 = and i32 %v0_dfe8, 8388608
  %v2_e008 = icmp ne i32 %v1_e008, 0
  store i1 %v2_e008, i1* %cpsr_c.global-to-local, align 1
  %v3_e008 = udiv i32 %v0_dfe8, 16777216
  store i32 %v3_e008, i32* %r0.global-to-local, align 4
  br i1 %v0_e00c, label %dec_label_pc_dfe8, label %dec_label_pc_e010

dec_label_pc_e010:                                ; preds = %bb350
  %v2_e010 = icmp ugt i32 %v1_dfec, 2
  store i1 %v2_e010, i1* %cpsr_c.global-to-local, align 1
  %v7_e010 = icmp eq i32 %v1_dfec, 3
  store i1 %v7_e010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e010, label %dec_label_pc_dfe8, label %dec_label_pc_e018

dec_label_pc_e018:                                ; preds = %dec_label_pc_e010
  %v1_e018 = add nsw i32 %v1_dfec, -15
  store i32 %v1_e018, i32* %r3.global-to-local, align 4
  %v2_e01c = icmp ugt i32 %v1_dfec, 55
  store i1 %v2_e01c, i1* %cpsr_c.global-to-local, align 1
  %v7_e01c = icmp eq i32 %v1_dfec, 56
  store i1 %v7_e01c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e01c, label %dec_label_pc_dfe8, label %bb351

bb351:                                            ; preds = %dec_label_pc_e018
  %v3_e020 = icmp ne i32 %v1_e018, 0
  store i1 %v3_e020, i1* %cpsr_c.global-to-local, align 1
  %v8_e020 = icmp eq i32 %v1_e018, 1
  store i1 %v8_e020, i1* %cpsr_z.global-to-local, align 1
  %v2_e024 = xor i1 %v3_e020, true
  %v3_e024 = or i1 %v8_e020, %v2_e024
  br i1 %v3_e024, label %dec_label_pc_dfe8, label %dec_label_pc_e028

dec_label_pc_e028:                                ; preds = %bb351
  %v2_e028 = icmp ugt i32 %v1_dfec, 9
  store i1 %v2_e028, i1* %cpsr_c.global-to-local, align 1
  %v7_e028 = icmp eq i32 %v1_dfec, 10
  store i1 %v7_e028, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e028, label %dec_label_pc_dfe8, label %dec_label_pc_e030

dec_label_pc_e030:                                ; preds = %dec_label_pc_e028
  %v2_e030 = icmp ugt i32 %v1_dfec, 191
  store i1 %v2_e030, i1* %cpsr_c.global-to-local, align 1
  %v7_e030 = icmp eq i32 %v1_dfec, 192
  store i1 %v7_e030, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e030, label %bb352, label %dec_label_pc_e03c

bb352:                                            ; preds = %dec_label_pc_e030
  %v3_e034 = icmp ugt i32 %v1_e000, 167
  store i1 %v3_e034, i1* %cpsr_c.global-to-local, align 1
  %v8_e034 = icmp eq i32 %v1_e000, 168
  store i1 %v8_e034, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e034, label %dec_label_pc_dfe8, label %dec_label_pc_e03c

dec_label_pc_e03c:                                ; preds = %dec_label_pc_e030, %bb352
  %v7_e03c = icmp eq i32 %v1_dfec, 172
  %.429 = zext i1 %v7_e03c to i32
  store i32 %.429, i32* %r3.global-to-local, align 4
  %v2_e048 = icmp ugt i32 %v1_e000, 14
  store i1 %v2_e048, i1* %cpsr_c.global-to-local, align 1
  %v7_e048 = icmp eq i32 %v1_e000, 15
  store i1 %v7_e048, i1* %cpsr_z.global-to-local, align 1
  %v2_e04c = xor i1 %v2_e048, true
  %v3_e04c = or i1 %v7_e048, %v2_e04c
  br i1 %v3_e04c, label %.thread8, label %bb355

.thread8:                                         ; preds = %dec_label_pc_e03c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e060

bb355:                                            ; preds = %dec_label_pc_e03c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e050 = icmp eq i1 %v7_e03c, false
  store i1 %v2_e050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e050, label %dec_label_pc_e060, label %dec_label_pc_e058

dec_label_pc_e058:                                ; preds = %bb355
  %v2_e058 = icmp ugt i32 %v1_e000, 30
  store i1 %v2_e058, i1* %cpsr_c.global-to-local, align 1
  %v7_e058 = icmp eq i32 %v1_e000, 31
  store i1 %v7_e058, i1* %cpsr_z.global-to-local, align 1
  %v2_e05c = xor i1 %v2_e058, true
  %v3_e05c = or i1 %v7_e058, %v2_e05c
  br i1 %v3_e05c, label %dec_label_pc_dfe8, label %dec_label_pc_e060

dec_label_pc_e060:                                ; preds = %.thread8, %dec_label_pc_e058, %bb355
  %v7_e060 = icmp eq i32 %v1_dfec, 100
  %.430 = zext i1 %v7_e060 to i32
  store i32 %.430, i32* %r3.global-to-local, align 4
  %v2_e06c = icmp ugt i32 %v1_e000, 62
  store i1 %v2_e06c, i1* %cpsr_c.global-to-local, align 1
  %v7_e06c = icmp eq i32 %v1_e000, 63
  store i1 %v7_e06c, i1* %cpsr_z.global-to-local, align 1
  %v2_e070 = xor i1 %v2_e06c, true
  %v3_e070 = or i1 %v7_e06c, %v2_e070
  br i1 %v3_e070, label %.thread13, label %bb358

.thread13:                                        ; preds = %dec_label_pc_e060
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e084

bb358:                                            ; preds = %dec_label_pc_e060
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e074 = icmp eq i1 %v7_e060, false
  store i1 %v2_e074, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e074, label %dec_label_pc_e084, label %dec_label_pc_e07c

dec_label_pc_e07c:                                ; preds = %bb358
  %v2_e07c = icmp ugt i32 %v1_e000, 125
  store i1 %v2_e07c, i1* %cpsr_c.global-to-local, align 1
  %v7_e07c = icmp eq i32 %v1_e000, 126
  store i1 %v7_e07c, i1* %cpsr_z.global-to-local, align 1
  %v2_e080 = xor i1 %v2_e07c, true
  %v3_e080 = or i1 %v7_e07c, %v2_e080
  br i1 %v3_e080, label %dec_label_pc_dfe8, label %dec_label_pc_e084

dec_label_pc_e084:                                ; preds = %.thread13, %dec_label_pc_e07c, %bb358
  %v2_e084 = icmp ugt i32 %v1_dfec, 168
  store i1 %v2_e084, i1* %cpsr_c.global-to-local, align 1
  %v7_e084 = icmp eq i32 %v1_dfec, 169
  store i1 %v7_e084, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e084, label %bb359, label %dec_label_pc_e090

bb359:                                            ; preds = %dec_label_pc_e084
  %v3_e088 = icmp eq i32 %v1_e000, 255
  store i1 %v3_e088, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_e088, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e088, label %dec_label_pc_dfe8, label %dec_label_pc_e090

dec_label_pc_e090:                                ; preds = %dec_label_pc_e084, %bb359
  %v7_e090 = icmp eq i32 %v1_dfec, 198
  %.431 = zext i1 %v7_e090 to i32
  store i32 %.431, i32* %r3.global-to-local, align 4
  %v2_e09c = icmp ugt i32 %v1_e000, 16
  store i1 %v2_e09c, i1* %cpsr_c.global-to-local, align 1
  %v7_e09c = icmp eq i32 %v1_e000, 17
  store i1 %v7_e09c, i1* %cpsr_z.global-to-local, align 1
  %v2_e0a0 = xor i1 %v2_e09c, true
  %v3_e0a0 = or i1 %v7_e09c, %v2_e0a0
  br i1 %v3_e0a0, label %.thread19, label %bb362

.thread19:                                        ; preds = %dec_label_pc_e090
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e0b4

bb362:                                            ; preds = %dec_label_pc_e090
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e0a4 = icmp eq i1 %v7_e090, false
  store i1 %v2_e0a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e0a4, label %dec_label_pc_e0b4, label %dec_label_pc_e0ac

dec_label_pc_e0ac:                                ; preds = %bb362
  %v2_e0ac = icmp ugt i32 %v1_e000, 18
  store i1 %v2_e0ac, i1* %cpsr_c.global-to-local, align 1
  %v7_e0ac = icmp eq i32 %v1_e000, 19
  store i1 %v7_e0ac, i1* %cpsr_z.global-to-local, align 1
  %v2_e0b0 = xor i1 %v2_e0ac, true
  %v3_e0b0 = or i1 %v7_e0ac, %v2_e0b0
  br i1 %v3_e0b0, label %dec_label_pc_dfe8, label %dec_label_pc_e0b4

dec_label_pc_e0b4:                                ; preds = %.thread19, %dec_label_pc_e0ac, %bb362
  %v2_e0b4 = icmp ugt i32 %v1_dfec, 222
  store i1 %v2_e0b4, i1* %cpsr_c.global-to-local, align 1
  %v7_e0b4 = icmp eq i32 %v1_dfec, 223
  store i1 %v7_e0b4, i1* %cpsr_z.global-to-local, align 1
  %v2_e0b8 = xor i1 %v7_e0b4, true
  %v3_e0b8 = and i1 %v2_e0b4, %v2_e0b8
  br i1 %v3_e0b8, label %dec_label_pc_dfe8, label %dec_label_pc_e0bc

dec_label_pc_e0bc:                                ; preds = %dec_label_pc_e0b4
  %v1_e0bc = add nsw i32 %v1_dfec, -6
  store i32 %v1_e0bc, i32* %r3.global-to-local, align 4
  %v2_e0c0 = icmp ugt i32 %v1_dfec, 10
  store i1 %v2_e0c0, i1* %cpsr_c.global-to-local, align 1
  %v7_e0c0 = icmp eq i32 %v1_dfec, 11
  store i1 %v7_e0c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e0c0, label %dec_label_pc_dfe8, label %bb363

bb363:                                            ; preds = %dec_label_pc_e0bc
  %v3_e0c4 = icmp ne i32 %v1_e0bc, 0
  store i1 %v3_e0c4, i1* %cpsr_c.global-to-local, align 1
  %v8_e0c4 = icmp eq i32 %v1_e0bc, 1
  store i1 %v8_e0c4, i1* %cpsr_z.global-to-local, align 1
  %v2_e0c8 = xor i1 %v3_e0c4, true
  %v3_e0c8 = or i1 %v8_e0c4, %v2_e0c8
  br i1 %v3_e0c8, label %dec_label_pc_dfe8, label %dec_label_pc_e0cc

dec_label_pc_e0cc:                                ; preds = %bb363
  %v2_e0cc = icmp ugt i32 %v1_dfec, 21
  store i1 %v2_e0cc, i1* %cpsr_c.global-to-local, align 1
  %v7_e0cc = icmp eq i32 %v1_dfec, 22
  store i1 %v7_e0cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e0cc, label %dec_label_pc_dfe8, label %bb364

bb364:                                            ; preds = %dec_label_pc_e0cc
  %v3_e0d0 = icmp ugt i32 %v1_dfec, 20
  store i1 %v3_e0d0, i1* %cpsr_c.global-to-local, align 1
  %v8_e0d0 = icmp eq i32 %v1_dfec, 21
  store i1 %v8_e0d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e0d0, label %dec_label_pc_dfe8, label %dec_label_pc_e0d8

dec_label_pc_e0d8:                                ; preds = %bb364
  %v2_e0d8 = icmp ugt i32 %v1_dfec, 27
  store i1 %v2_e0d8, i1* %cpsr_c.global-to-local, align 1
  %v7_e0d8 = icmp eq i32 %v1_dfec, 28
  store i1 %v7_e0d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e0d8, label %dec_label_pc_dfe8, label %bb365

bb365:                                            ; preds = %dec_label_pc_e0d8
  %v3_e0dc = icmp ugt i32 %v1_dfec, 25
  store i1 %v3_e0dc, i1* %cpsr_c.global-to-local, align 1
  %v8_e0dc = icmp eq i32 %v1_dfec, 26
  store i1 %v8_e0dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e0dc, label %dec_label_pc_dfe8, label %dec_label_pc_e0e4

dec_label_pc_e0e4:                                ; preds = %bb365
  %v2_e0e4 = icmp ugt i32 %v1_dfec, 29
  store i1 %v2_e0e4, i1* %cpsr_c.global-to-local, align 1
  %v7_e0e4 = icmp eq i32 %v1_dfec, 30
  store i1 %v7_e0e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e0e4, label %dec_label_pc_dfe8, label %bb366

bb366:                                            ; preds = %dec_label_pc_e0e4
  %v3_e0e8 = icmp ugt i32 %v1_dfec, 28
  store i1 %v3_e0e8, i1* %cpsr_c.global-to-local, align 1
  %v8_e0e8 = icmp eq i32 %v1_dfec, 29
  store i1 %v8_e0e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e0e8, label %dec_label_pc_dfe8, label %dec_label_pc_e0f0

dec_label_pc_e0f0:                                ; preds = %bb366
  %v2_e0f0 = icmp ugt i32 %v1_dfec, 54
  store i1 %v2_e0f0, i1* %cpsr_c.global-to-local, align 1
  %v7_e0f0 = icmp eq i32 %v1_dfec, 55
  store i1 %v7_e0f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e0f0, label %dec_label_pc_dfe8, label %bb367

bb367:                                            ; preds = %dec_label_pc_e0f0
  %v3_e0f4 = icmp ugt i32 %v1_dfec, 32
  store i1 %v3_e0f4, i1* %cpsr_c.global-to-local, align 1
  %v8_e0f4 = icmp eq i32 %v1_dfec, 33
  store i1 %v8_e0f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e0f4, label %dec_label_pc_dfe8, label %dec_label_pc_e0fc

dec_label_pc_e0fc:                                ; preds = %bb367
  %v2_e0fc = icmp ugt i32 %v1_dfec, 214
  store i1 %v2_e0fc, i1* %cpsr_c.global-to-local, align 1
  %v7_e0fc = icmp eq i32 %v1_dfec, 215
  store i1 %v7_e0fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e0fc, label %.thread30, label %bb368

bb368:                                            ; preds = %dec_label_pc_e0fc
  %v3_e100 = icmp ugt i32 %v1_dfec, 213
  store i1 %v3_e100, i1* %cpsr_c.global-to-local, align 1
  %v8_e100 = icmp eq i32 %v1_dfec, 214
  store i1 %v8_e100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e100, label %bb369, label %dec_label_pc_e110

.thread30:                                        ; preds = %dec_label_pc_e0fc
  br label %dec_label_pc_dfe8

bb369:                                            ; preds = %bb368
  br label %dec_label_pc_dfe8

dec_label_pc_e110:                                ; preds = %bb368
  %v5_e11c = call i32 @llvm.bswap.i32(i32 %v0_dfe8)
  store i32 %v5_e11c, i32* %r3.global-to-local, align 4
  %tmp370 = and i32 %v0_dfe8, 65280
  %tmp371 = call i32 @llvm.bswap.i32(i32 %tmp370)
  %v3_e124 = udiv i32 %v5_e11c, 16777216
  %tmp372 = and i32 %v0_dfe8, 16711680
  %tmp373 = call i32 @llvm.bswap.i32(i32 %tmp372)
  %v4_e12c = udiv i32 %tmp371, 256
  %v4_e130 = mul nuw nsw i32 %tmp373, 256
  store i32 ptrtoint (i8** @global_var_1e270.115 to i32), i32* @r0, align 4
  %tmp374 = and i32 %v0_dfe8, 65536
  %v3_e138 = icmp ne i32 %tmp374, 0
  store i1 %v3_e138, i1* %cpsr_c.global-to-local, align 1
  %v4_e138 = mul i32 %v5_e11c, 16777216
  %v5_e12c = or i32 %v4_e138, %v3_e124
  %v5_e130 = or i32 %v5_e12c, %v4_e12c
  %v5_e138 = or i32 %v5_e130, %v4_e130
  store i32 %v5_e138, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_1e27a.465 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_e138, i32* @global_var_1e280.466, align 4
  %v3_e148 = call i32 @function_bf78(i32 ptrtoint (i8** @global_var_1e270.115 to i32), i32 20)
  store i32 %v3_e148, i32* %r0.global-to-local, align 4
  %v3_e14c = load i16, i16* %stack_var_-52, align 2
  %v4_e14c = sext i16 %v3_e14c to i32
  store i32 %v4_e14c, i32* %r1.global-to-local, align 4
  %tmp531 = sdiv i16 %v3_e14c, 10
  %v5_e15c = zext i16 %tmp531 to i32
  %v3_e160 = mul nuw nsw i32 %v5_e15c, 8
  store i32 %v3_e160, i32* %r2.global-to-local, align 4
  %v2_e168 = mul nuw nsw i32 %v5_e15c, 10
  store i32 %v2_e168, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1e270.115 to i32), i32* %ip.global-to-local, align 4
  %v3_e170 = icmp uge i32 %v4_e14c, %v2_e168
  store i1 %v3_e170, i1* %cpsr_c.global-to-local, align 1
  %v9_e170 = icmp eq i32 %v4_e14c, %v2_e168
  store i1 %v9_e170, i1* %cpsr_z.global-to-local, align 1
  %v1_e174 = trunc i32 %v3_e148 to i16
  store i16 %v1_e174, i16* bitcast (i32* @global_var_1e27a.465 to i16*), align 4
  br i1 %v9_e170, label %bb375, label %.thread37.thread

.thread37.thread:                                 ; preds = %dec_label_pc_e110
  store i32 5888, i32* %r1.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1e284.118 to i32), i32 2) to i16*), align 2
  store i32 ptrtoint (i8** @global_var_1e270.115 to i32), i32* %r0.global-to-local, align 4
  br label %.thread39

bb375:                                            ; preds = %dec_label_pc_e110
  store i32 ptrtoint (i8** @global_var_1e270.115 to i32), i32* %r0.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1e284.118 to i32), i32 2) to i16*), align 2
  br label %.thread39

.thread39:                                        ; preds = %.thread37.thread, %bb375
  %v4_e198 = load i32, i32* @global_var_1e280.466, align 4
  store i32 %v4_e198, i32* @global_var_1e288.468, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_1e294.469 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_1e284.118 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v5_e1b8 = call i32 @function_bfc8(i32 ptrtoint (i8** @global_var_1e270.115 to i32), i32 ptrtoint (i32* @global_var_1e284.118 to i32), i32 5120, i32 20)
  %v6_e1b8 = trunc i32 %v5_e1b8 to i16
  store i32 ptrtoint (i8** @global_var_1e270.115 to i32), i32* %r1.global-to-local, align 4
  %v2_e1c4 = load i32, i32* @global_var_202ec.113, align 4
  store i16 %v6_e1b8, i16* bitcast (i32* @global_var_1e294.469 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 %v2_dfb8, i32* %ip.global-to-local, align 4
  store i32 %v2_e1c4, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_e20c = call i32 @function_10300(i32 %v2_e1c4, i32 ptrtoint (i8** @global_var_1e270.115 to i32), i32 40, i32 16384, i32 %v2_dfb8, i32 16)
  store i32 %v7_e20c, i32* %r0.global-to-local, align 4
  %v3_e210 = load i16, i16* %stack_var_-52, align 2
  %v4_e210 = sext i16 %v3_e210 to i32
  %v1_e214 = add nsw i32 %v4_e210, 1
  store i32 %v1_e214, i32* %r3.global-to-local, align 4
  %v3_e218 = icmp ugt i32 %v1_e214, 383
  store i1 %v3_e218, i1* %cpsr_c.global-to-local, align 1
  %v8_e218 = icmp eq i32 %v1_e214, 384
  store i1 %v8_e218, i1* %cpsr_z.global-to-local, align 1
  %v5_e21c = trunc i32 %v1_e214 to i16
  store i16 %v5_e21c, i16* %stack_var_-52, align 2
  %v5_e220 = icmp slt i32 %v1_e214, 384
  br i1 %v5_e220, label %dec_label_pc_dfbc, label %dec_label_pc_e224

dec_label_pc_e224:                                ; preds = %.thread39
  %v0_e224 = load i32, i32* @r4, align 4
  store i32 %v0_e224, i32* @fp, align 4
  br label %dec_label_pc_e228

dec_label_pc_e228:                                ; preds = %dec_label_pc_dfa0, %dec_label_pc_e224
  %v0_e228 = call i32 @function_1003c()
  store i32 %v0_e228, i32* @sb, align 4
  store i32 %stack_var_-1880.0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v1_e238 = add i32 %stack_var_-1880.0, 20
  store i32 %v1_e238, i32* @r4, align 4
  %v1_e28c = add i32 %stack_var_-1880.0, 16
  %v2_e28c = inttoptr i32 %v1_e28c to i32*
  %v1_e2a0 = add i32 %stack_var_-1880.0, 9
  %v2_e2a0 = inttoptr i32 %v1_e2a0 to i8*
  %v4_e2cc = sext i16 %stack_var_-1876.0 to i32
  %v1_e334 = add i32 %stack_var_-1880.0, 12
  %v2_e334 = inttoptr i32 %v1_e334 to i32*
  br label %dec_label_pc_e23c

dec_label_pc_e23c:                                ; preds = %dec_label_pc_e2fc, %dec_label_pc_e2f4, %dec_label_pc_e2ec, %dec_label_pc_e2c8, %dec_label_pc_e2b8, %dec_label_pc_e29c, %dec_label_pc_e284, %dec_label_pc_e2e4, %dec_label_pc_e2d8, %dec_label_pc_e27c, %dec_label_pc_e3b4, %dec_label_pc_e228
  %v1_e240 = phi i32 [ %v0_e228, %dec_label_pc_e228 ], [ %v1_e240.pre.pre, %dec_label_pc_e3b4 ], [ %v0_e270, %dec_label_pc_e27c ], [ %v0_e270, %dec_label_pc_e2d8 ], [ %v0_e270, %dec_label_pc_e2e4 ], [ %v0_e270, %dec_label_pc_e284 ], [ %v0_e270, %dec_label_pc_e29c ], [ %v0_e270, %dec_label_pc_e2b8 ], [ %v0_e270, %dec_label_pc_e2c8 ], [ %v0_e270, %dec_label_pc_e2ec ], [ %v0_e270, %dec_label_pc_e2f4 ], [ %v0_e270, %dec_label_pc_e2fc ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_e240 = inttoptr i32 %v1_e240 to i32*
  store i32 0, i32* %v2_e240, align 4
  %v2_e24c = load i32, i32* @global_var_202ec.113, align 4
  store i32 %v2_e24c, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-1880.0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e25c = load i32, i32* %ip.global-to-local, align 4
  %v6_e264 = call i32 @function_1028c(i32 %v2_e24c, i32 %stack_var_-1880.0, i32 1514, i32 16384, i32 %v0_e25c, i32 %v0_e25c)
  store i32 %v6_e264, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e268 = icmp eq i32 %v6_e264, 0
  store i1 %v2_e268, i1* %cpsr_z.global-to-local, align 1
  %tmp376 = icmp slt i32 %v6_e264, 1
  br i1 %tmp376, label %dec_label_pc_e3d8, label %dec_label_pc_e270

dec_label_pc_e270:                                ; preds = %dec_label_pc_e23c
  %v0_e270 = load i32, i32* @sb, align 4
  %v1_e270 = inttoptr i32 %v0_e270 to i32*
  %v2_e270 = load i32, i32* %v1_e270, align 4
  store i32 %v2_e270, i32* %r3.global-to-local, align 4
  %v2_e274 = icmp ugt i32 %v2_e270, 10
  store i1 %v2_e274, i1* %cpsr_c.global-to-local, align 1
  %v7_e274 = icmp eq i32 %v2_e270, 11
  store i1 %v7_e274, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e274, label %dec_label_pc_e3d8, label %dec_label_pc_e27c

dec_label_pc_e27c:                                ; preds = %dec_label_pc_e270
  %v2_e27c = icmp ugt i32 %v6_e264, 38
  store i1 %v2_e27c, i1* %cpsr_c.global-to-local, align 1
  %v7_e27c = icmp eq i32 %v6_e264, 39
  store i1 %v7_e27c, i1* %cpsr_z.global-to-local, align 1
  %v2_e280 = xor i1 %v2_e27c, true
  %v3_e280 = or i1 %v7_e27c, %v2_e280
  br i1 %v3_e280, label %dec_label_pc_e23c, label %dec_label_pc_e284

dec_label_pc_e284:                                ; preds = %dec_label_pc_e27c
  store i32 %stack_var_-1880.0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_202d4.42 to i32), i32* %ip.global-to-local, align 4
  %v3_e28c = load i32, i32* %v2_e28c, align 4
  store i32 %v3_e28c, i32* %r2.global-to-local, align 4
  %v2_e290 = load i32, i32* @global_var_202d4.42, align 4
  store i32 %v2_e290, i32* %r3.global-to-local, align 4
  %v3_e294 = icmp uge i32 %v3_e28c, %v2_e290
  store i1 %v3_e294, i1* %cpsr_c.global-to-local, align 1
  %v9_e294 = icmp eq i32 %v3_e28c, %v2_e290
  store i1 %v9_e294, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e294, label %dec_label_pc_e29c, label %dec_label_pc_e23c

dec_label_pc_e29c:                                ; preds = %dec_label_pc_e284
  %v3_e2a0 = load i8, i8* %v2_e2a0, align 1
  %v4_e2a0 = zext i8 %v3_e2a0 to i32
  store i32 %v4_e2a0, i32* %r3.global-to-local, align 4
  %v2_e2a4 = icmp ugt i8 %v3_e2a0, 5
  store i1 %v2_e2a4, i1* %cpsr_c.global-to-local, align 1
  %v7_e2a4 = icmp eq i8 %v3_e2a0, 6
  store i1 %v7_e2a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e2a4, label %dec_label_pc_e2ac, label %dec_label_pc_e23c

dec_label_pc_e2ac:                                ; preds = %dec_label_pc_e29c
  %v0_e2ac = load i32, i32* @r4, align 4
  %v1_e2ac = inttoptr i32 %v0_e2ac to i16*
  %v2_e2ac = load i16, i16* %v1_e2ac, align 2
  %v3_e2ac = zext i16 %v2_e2ac to i32
  store i32 %v3_e2ac, i32* %ip.global-to-local, align 4
  %v2_e2b0 = icmp ugt i16 %v2_e2ac, 5887
  store i1 %v2_e2b0, i1* %cpsr_c.global-to-local, align 1
  %v7_e2b0 = icmp eq i16 %v2_e2ac, 5888
  store i1 %v7_e2b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e2b0, label %dec_label_pc_e2c8, label %dec_label_pc_e2b8

dec_label_pc_e2b8:                                ; preds = %dec_label_pc_e2ac
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_e2c0 = icmp ugt i16 %v2_e2ac, 4872
  store i1 %v3_e2c0, i1* %cpsr_c.global-to-local, align 1
  %v9_e2c0 = icmp eq i16 %v2_e2ac, 4873
  store i1 %v9_e2c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e2c0, label %dec_label_pc_e2c8, label %dec_label_pc_e23c

dec_label_pc_e2c8:                                ; preds = %dec_label_pc_e2b8, %dec_label_pc_e2ac
  %v1_e2c8 = add i32 %v0_e2ac, 2
  %v2_e2c8 = inttoptr i32 %v1_e2c8 to i16*
  %v3_e2c8 = load i16, i16* %v2_e2c8, align 2
  %v4_e2c8 = zext i16 %v3_e2c8 to i32
  store i32 %v4_e2c8, i32* %r3.global-to-local, align 4
  store i32 %v4_e2cc, i32* %r0.global-to-local, align 4
  %v3_e2d0 = icmp uge i32 %v4_e2c8, %v4_e2cc
  store i1 %v3_e2d0, i1* %cpsr_c.global-to-local, align 1
  %v9_e2d0 = icmp eq i32 %v4_e2c8, %v4_e2cc
  store i1 %v9_e2d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e2d0, label %dec_label_pc_e2d8, label %dec_label_pc_e23c

dec_label_pc_e2d8:                                ; preds = %dec_label_pc_e2c8
  %v1_e2d8 = add i32 %v0_e2ac, 13
  %v2_e2d8 = inttoptr i32 %v1_e2d8 to i8*
  %v3_e2d8 = load i8, i8* %v2_e2d8, align 1
  %v4_e2d8 = zext i8 %v3_e2d8 to i32
  store i32 %v4_e2d8, i32* %r3.global-to-local, align 4
  %v1_e2dc = and i32 %v4_e2d8, 2
  %v2_e2dc = icmp eq i32 %v1_e2dc, 0
  store i1 %v2_e2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e2dc, label %dec_label_pc_e23c, label %dec_label_pc_e2e4

dec_label_pc_e2e4:                                ; preds = %dec_label_pc_e2d8
  %v1_e2e4 = and i32 %v4_e2d8, 16
  %v2_e2e4 = icmp eq i32 %v1_e2e4, 0
  store i1 %v2_e2e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e2e4, label %dec_label_pc_e23c, label %dec_label_pc_e2ec

dec_label_pc_e2ec:                                ; preds = %dec_label_pc_e2e4
  %v1_e2ec = and i32 %v4_e2d8, 4
  %v2_e2ec = icmp eq i32 %v1_e2ec, 0
  store i1 %v2_e2ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e2ec, label %dec_label_pc_e2f4, label %dec_label_pc_e23c

dec_label_pc_e2f4:                                ; preds = %dec_label_pc_e2ec
  %tmp532 = urem i8 %v3_e2d8, 2
  %v2_e2f4 = icmp eq i8 %tmp532, 0
  store i1 %v2_e2f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e2f4, label %dec_label_pc_e2fc, label %dec_label_pc_e23c

dec_label_pc_e2fc:                                ; preds = %dec_label_pc_e2f4
  %v1_e2fc = add i32 %v0_e2ac, 8
  %v2_e2fc = inttoptr i32 %v1_e2fc to i32*
  %v3_e2fc = load i32, i32* %v2_e2fc, align 4
  %v5_e314 = call i32 @llvm.bswap.i32(i32 %v3_e2fc)
  %v1_e318 = add i32 %v5_e314, -1
  store i32 %v1_e318, i32* %r2.global-to-local, align 4
  %v1_e31c = and i32 %v1_e318, 16711680
  store i32 %v1_e31c, i32* %r0.global-to-local, align 4
  %v3_e320 = udiv i32 %v1_e318, 16777216
  %v4_e328 = udiv i32 %v1_e31c, 256
  %v5_e328 = or i32 %v4_e328, %v3_e320
  %v1_e324 = mul i32 %v1_e318, 256
  %v4_e32c = and i32 %v1_e324, 16711680
  %v5_e32c = or i32 %v5_e328, %v4_e32c
  store i32 %v5_e32c, i32* %r3.global-to-local, align 4
  store i32 %stack_var_-1880.0, i32* %r1.global-to-local, align 4
  %v3_e334 = load i32, i32* %v2_e334, align 4
  store i32 %v3_e334, i32* @lr, align 4
  %v5_e338 = call i32 @llvm.bswap.i32(i32 %v1_e318)
  store i32 %v5_e338, i32* %r3.global-to-local, align 4
  %v3_e33c = icmp uge i32 %v5_e338, %v3_e334
  store i1 %v3_e33c, i1* %cpsr_c.global-to-local, align 1
  %v9_e33c = icmp eq i32 %v5_e338, %v3_e334
  store i1 %v9_e33c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e33c, label %dec_label_pc_e344, label %dec_label_pc_e23c

dec_label_pc_e344:                                ; preds = %dec_label_pc_e2fc
  %v0_e344 = load i32, i32* @r5, align 4
  %v2_e344 = icmp ugt i32 %v0_e344, 254
  store i1 %v2_e344, i1* %cpsr_c.global-to-local, align 1
  %v7_e344 = icmp eq i32 %v0_e344, 255
  store i1 %v7_e344, i1* %cpsr_z.global-to-local, align 1
  %v8_e348 = icmp sgt i32 %v0_e344, 255
  br i1 %v8_e348, label %dec_label_pc_e3d8, label %dec_label_pc_e34c

dec_label_pc_e34c:                                ; preds = %dec_label_pc_e344
  %v2_e354 = load i32, i32* @global_var_202e8.111, align 4
  store i32 %v2_e354, i32* %r1.global-to-local, align 4
  %v3_e358 = mul i32 %v0_e344, 256
  store i32 %v3_e358, i32* %r2.global-to-local, align 4
  %v2_e35c = mul i32 %v0_e344, 288
  store i32 %v2_e35c, i32* %r3.global-to-local, align 4
  %v2_e360 = add i32 %v2_e354, %v2_e35c
  store i32 %v2_e360, i32* @r0, align 4
  %v1_e364 = add i32 %v2_e360, 12
  %v2_e364 = inttoptr i32 %v1_e364 to i32*
  %v3_e364 = load i32, i32* %v2_e364, align 4
  store i32 %v3_e364, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e368 = icmp eq i32 %v3_e364, 0
  store i1 %v2_e368, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e368, label %dec_label_pc_e3ac, label %dec_label_pc_e388.preheader

dec_label_pc_e388.preheader:                      ; preds = %dec_label_pc_e34c
  %v2_e36c = add i32 %v0_e344, 1
  %v2_e374 = and i32 %v2_e36c, 134217728
  %v3_e374 = icmp ne i32 %v2_e374, 0
  store i1 %v3_e374, i1* %cpsr_c.global-to-local, align 1
  %v3_e378 = mul i32 %v2_e36c, 288
  %v3_e37c = add i32 %v2_e354, %v3_e378
  store i32 %v3_e37c, i32* %r3.global-to-local, align 4
  store i32 %v0_e344, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e388

dec_label_pc_e388:                                ; preds = %dec_label_pc_e388.preheader, %dec_label_pc_e394
  %v0_e394 = phi i32 [ %v3_e37c, %dec_label_pc_e388.preheader ], [ %v1_e3a0, %dec_label_pc_e394 ]
  %v0_e388 = phi i32 [ %v0_e344, %dec_label_pc_e388.preheader ], [ %v1_e388, %dec_label_pc_e394 ]
  %v1_e388 = add i32 %v0_e388, 1
  store i32 %v1_e388, i32* %r2.global-to-local, align 4
  %v7_e38c = icmp eq i32 %v1_e388, 256
  br i1 %v7_e38c, label %dec_label_pc_e3d8.loopexit, label %dec_label_pc_e394

dec_label_pc_e394:                                ; preds = %dec_label_pc_e388
  store i32 %v0_e394, i32* @r0, align 4
  %v1_e398 = add i32 %v0_e394, 12
  %v2_e398 = inttoptr i32 %v1_e398 to i32*
  %v3_e398 = load i32, i32* %v2_e398, align 4
  %v2_e39c = icmp eq i32 %v3_e398, 0
  %v1_e3a0 = add i32 %v0_e394, 288
  store i32 %v1_e3a0, i32* %r3.global-to-local, align 4
  br i1 %v2_e39c, label %dec_label_pc_e3a8, label %dec_label_pc_e388

dec_label_pc_e3a8:                                ; preds = %dec_label_pc_e394
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e388, i32* @r5, align 4
  br label %dec_label_pc_e3ac

dec_label_pc_e3ac:                                ; preds = %dec_label_pc_e34c, %dec_label_pc_e3a8
  %v1_e3b4 = phi i32 [ %v2_e360, %dec_label_pc_e34c ], [ %v0_e394, %dec_label_pc_e3a8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e3ac = icmp eq i32 %v1_e3b4, 0
  store i1 %v2_e3ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e3ac, label %dec_label_pc_e3d8, label %dec_label_pc_e3b4

dec_label_pc_e3b4:                                ; preds = %dec_label_pc_e3ac
  %v2_e3b4 = add i32 %v1_e3b4, 16
  %v3_e3b4 = inttoptr i32 %v2_e3b4 to i32*
  store i32 %v3_e334, i32* %v3_e3b4, align 4
  %v0_e3b8 = load i32, i32* %ip.global-to-local, align 4
  %v1_e3b8 = trunc i32 %v0_e3b8 to i16
  %v2_e3b8 = load i32, i32* @r0, align 4
  %v3_e3b8 = add i32 %v2_e3b8, 20
  %v4_e3b8 = inttoptr i32 %v3_e3b8 to i16*
  store i16 %v1_e3b8, i16* %v4_e3b8, align 2
  %v0_e3bc = call i32 @function_cc94()
  store i32 %v0_e3bc, i32* %r0.global-to-local, align 4
  %v1_e240.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_e23c

dec_label_pc_e3c4:                                ; preds = %dec_label_pc_d274
  store i32 ptrtoint (i32* @global_var_202ec.113 to i32), i32* %ip.global-to-local, align 4
  %v2_e3c8 = load i32, i32* @global_var_202ec.113, align 4
  store i32 %v2_e3c8, i32* %r0.global-to-local, align 4
  %v1_e3cc = call i32 @function_10008(i32 %v2_e3c8)
  store i32 %v1_e3cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e3d0

dec_label_pc_e3d0:                                ; preds = %dec_label_pc_d250, %dec_label_pc_e3c4
  %v0_e3d0 = load i32, i32* @r5, align 4
  store i32 %v0_e3d0, i32* %r0.global-to-local, align 4
  %v1_e3d4 = call i32 @function_119dc(i32 %v0_e3d0)
  store i32 %v1_e3d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e3d8

dec_label_pc_e3d8.loopexit:                       ; preds = %dec_label_pc_e388
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e3d8

dec_label_pc_e3d8:                                ; preds = %dec_label_pc_e3ac, %dec_label_pc_e344, %dec_label_pc_e270, %dec_label_pc_e23c, %dec_label_pc_e3d8.loopexit, %dec_label_pc_e3d0
  %stack_var_-1880.1 = phi i32 [ %tmp314, %dec_label_pc_e3d0 ], [ %stack_var_-1880.0, %dec_label_pc_e3d8.loopexit ], [ %stack_var_-1880.0, %dec_label_pc_e23c ], [ %stack_var_-1880.0, %dec_label_pc_e270 ], [ %stack_var_-1880.0, %dec_label_pc_e344 ], [ %stack_var_-1880.0, %dec_label_pc_e3ac ]
  %stack_var_-1876.1 = phi i16 [ %tmp342, %dec_label_pc_e3d0 ], [ %stack_var_-1876.0, %dec_label_pc_e3d8.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_e23c ], [ %stack_var_-1876.0, %dec_label_pc_e270 ], [ %stack_var_-1876.0, %dec_label_pc_e344 ], [ %stack_var_-1876.0, %dec_label_pc_e3ac ]
  store i32 0, i32* %stack_var_-224, align 4
  store i32 1668, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_e3f4486 = load i32, i32* @sp, align 4
  %v3_e3f4487 = add i32 %v2_e3f4486, 1668
  %v4_e3f4488 = inttoptr i32 %v3_e3f4487 to i32*
  store i32 0, i32* %v4_e3f4488, align 4
  br label %dec_label_pc_e3e4.dec_label_pc_e3e4_crit_edge

dec_label_pc_e3e4.dec_label_pc_e3e4_crit_edge:    ; preds = %dec_label_pc_e3d8, %dec_label_pc_e3e4.dec_label_pc_e3e4_crit_edge
  %v0_e3e4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_e3e4 = add i32 %v0_e3e4.pre, 1664
  store i32 %v1_e3e4, i32* %ip.global-to-local, align 4
  %v1_e3e8 = add i32 %v0_e3e4.pre, 4
  store i32 %v1_e3e8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_e3f0 = icmp eq i32 %v1_e3e8, 128
  %v2_e3f4 = load i32, i32* @sp, align 4
  %v3_e3f4 = add i32 %v2_e3f4, %v1_e3e4
  %v4_e3f4 = inttoptr i32 %v3_e3f4 to i32*
  store i32 0, i32* %v4_e3f4, align 4
  br i1 %v7_e3f0, label %dec_label_pc_e3fc, label %dec_label_pc_e3e4.dec_label_pc_e3e4_crit_edge

dec_label_pc_e3fc:                                ; preds = %dec_label_pc_e3e4.dec_label_pc_e3e4_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_e3fc = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e3fc, i32* %stack_var_-352, align 4
  %v1_e404480 = add i32 %v0_e3fc, 1540
  store i32 %v1_e404480, i32* @lr, align 4
  %v1_e408481 = add i32 %v0_e3fc, 8
  store i32 %v1_e408481, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_e410482 = icmp eq i32 %v1_e408481, 128
  %v2_e414483 = load i32, i32* @sp, align 4
  %v3_e414484 = add i32 %v2_e414483, %v1_e404480
  %v4_e414485 = inttoptr i32 %v3_e414484 to i32*
  store i32 0, i32* %v4_e414485, align 4
  br i1 %v7_e410482, label %dec_label_pc_e41c, label %dec_label_pc_e404.dec_label_pc_e404_crit_edge

dec_label_pc_e404.dec_label_pc_e404_crit_edge:    ; preds = %dec_label_pc_e3fc, %dec_label_pc_e404.dec_label_pc_e404_crit_edge
  %v0_e404.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_e404 = add i32 %v0_e404.pre, 1536
  store i32 %v1_e404, i32* @lr, align 4
  %v1_e408 = add i32 %v0_e404.pre, 4
  store i32 %v1_e408, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_e410 = icmp eq i32 %v1_e408, 128
  %v2_e414 = load i32, i32* @sp, align 4
  %v3_e414 = add i32 %v2_e414, %v1_e404
  %v4_e414 = inttoptr i32 %v3_e414 to i32*
  store i32 0, i32* %v4_e414, align 4
  br i1 %v7_e410, label %dec_label_pc_e41c, label %dec_label_pc_e404.dec_label_pc_e404_crit_edge

dec_label_pc_e41c:                                ; preds = %dec_label_pc_e404.dec_label_pc_e404_crit_edge, %dec_label_pc_e3fc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_e41c = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e41c, i32* @r6, align 4
  store i32 %v0_e41c, i32* @r5, align 4
  %v5_e424 = trunc i32 %v0_e41c to i16
  store i16 %v5_e424, i16* %stack_var_-52, align 2
  %v2_f238 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_e47c

dec_label_pc_e42c:                                ; preds = %dec_label_pc_e4ac
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_e498, i1* %cpsr_z.global-to-local, align 1
  %v1_f228 = add i32 %v2_e490, 4
  %v2_f228 = inttoptr i32 %v1_f228 to i32*
  %v3_f228 = load i32, i32* %v2_f228, align 4
  br i1 %v7_e498, label %dec_label_pc_f228, label %dec_label_pc_e434

dec_label_pc_e434:                                ; preds = %dec_label_pc_e42c
  store i32 %v3_f228, i32* %ip.global-to-local, align 4
  %v3_e43c = udiv i32 %v3_f228, 32
  store i32 %v2_f238, i32* %r0.global-to-local, align 4
  %v3_e444 = mul nuw nsw i32 %v3_e43c, 4
  %v2_e448 = add i32 %v3_e444, %v2_f238
  store i32 %v2_e448, i32* %r3.global-to-local, align 4
  %v1_e44c = add i32 %v2_e448, -184
  %v2_e44c = inttoptr i32 %v1_e44c to i32*
  %v3_e44c = load i32, i32* %v2_e44c, align 4
  %v1_e450 = urem i32 %v3_f228, 32
  store i32 %v1_e450, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_e458 = shl i32 1, %v1_e450
  %v8_e458 = or i32 %v3_e44c, %v7_e458
  store i32 %v8_e458, i32* %r2.global-to-local, align 4
  store i32 %v8_e458, i32* %v2_e44c, align 4
  %v0_e460 = load i32, i32* @r6, align 4
  %v1_e460 = load i32, i32* %ip.global-to-local, align 4
  %v3_e460 = icmp uge i32 %v0_e460, %v1_e460
  store i1 %v3_e460, i1* %cpsr_c.global-to-local, align 1
  %v9_e460 = icmp eq i32 %v0_e460, %v1_e460
  store i1 %v9_e460, i1* %cpsr_z.global-to-local, align 1
  %v5_e464 = icmp slt i32 %v0_e460, %v1_e460
  br i1 %v5_e464, label %bb377, label %bb378

bb377:                                            ; preds = %dec_label_pc_e434
  store i32 %v1_e460, i32* @r6, align 4
  br label %bb378

bb378:                                            ; preds = %.thread56, %bb384, %bb382, %bb428, %dec_label_pc_e510, %dec_label_pc_e434, %bb377
  %v3_e468 = load i16, i16* %stack_var_-52, align 2
  %v4_e468 = sext i16 %v3_e468 to i32
  store i32 %v4_e468, i32* %r3.global-to-local, align 4
  %v1_e46c = add nsw i32 %v4_e468, 1
  store i32 %v1_e46c, i32* %r2.global-to-local, align 4
  %v2_e470 = icmp ugt i32 %v1_e46c, 254
  store i1 %v2_e470, i1* %cpsr_c.global-to-local, align 1
  %v7_e470 = icmp eq i32 %v1_e46c, 255
  store i1 %v7_e470, i1* %cpsr_z.global-to-local, align 1
  %v5_e474 = trunc i32 %v1_e46c to i16
  store i16 %v5_e474, i16* %stack_var_-52, align 2
  %v8_e478 = icmp sgt i16 %v3_e468, 254
  br i1 %v8_e478, label %dec_label_pc_e51c, label %dec_label_pc_e47c

dec_label_pc_e47c:                                ; preds = %bb378, %dec_label_pc_e41c
  %v0_e488 = phi i32 [ %v1_e46c, %bb378 ], [ %v0_e41c, %dec_label_pc_e41c ]
  store i32 ptrtoint (i32* @global_var_202e8.111 to i32), i32* %r0.global-to-local, align 4
  %v3_e480 = mul i32 %v0_e488, 256
  store i32 %v3_e480, i32* %r3.global-to-local, align 4
  %v2_e484 = load i32, i32* @global_var_202e8.111, align 4
  store i32 %v2_e484, i32* %r1.global-to-local, align 4
  %v2_e48c = mul i32 %v0_e488, 288
  store i32 %v2_e48c, i32* %r2.global-to-local, align 4
  %v2_e490 = add i32 %v2_e484, %v2_e48c
  store i32 %v2_e490, i32* @r4, align 4
  %v1_e494 = add i32 %v2_e490, 12
  %v2_e494 = inttoptr i32 %v1_e494 to i32*
  %v3_e494 = load i32, i32* %v2_e494, align 4
  store i32 %v3_e494, i32* %ip.global-to-local, align 4
  %v2_e498 = icmp ne i32 %v3_e494, 0
  store i1 %v2_e498, i1* %cpsr_c.global-to-local, align 1
  %v7_e498 = icmp eq i32 %v3_e494, 1
  store i1 %v7_e498, i1* %cpsr_z.global-to-local, align 1
  %v2_e49c = xor i1 %v2_e498, true
  %v3_e49c = or i1 %v7_e498, %v2_e49c
  br i1 %v3_e49c, label %bb379, label %bb380

bb379:                                            ; preds = %dec_label_pc_e47c
  store i32 5, i32* %r1.global-to-local, align 4
  br label %bb380

bb380:                                            ; preds = %dec_label_pc_e47c, %bb379
  %v1_e4bc173 = phi i32 [ %v2_e484, %dec_label_pc_e47c ], [ 5, %bb379 ]
  %v2_e4a0 = xor i1 %v7_e498, true
  %v3_e4a0 = and i1 %v2_e498, %v2_e4a0
  br i1 %v3_e4a0, label %bb381, label %bb382

bb381:                                            ; preds = %bb380
  store i32 30, i32* %r1.global-to-local, align 4
  br label %bb382

bb382:                                            ; preds = %bb380, %bb381
  %v1_e4bc = phi i32 [ %v1_e4bc173, %bb380 ], [ 30, %bb381 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e4a4 = icmp eq i32 %v3_e494, 0
  store i1 %v2_e4a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e4a4, label %bb378, label %dec_label_pc_e4ac

dec_label_pc_e4ac:                                ; preds = %bb382
  store i32 ptrtoint (i32* @global_var_1e2a0.100 to i32), i32* %r2.global-to-local, align 4
  %v2_e4b0 = load i32, i32* @global_var_1e2a0.100, align 4
  store i32 %v2_e4b0, i32* %r3.global-to-local, align 4
  %v1_e4b4 = add i32 %v2_e490, 8
  %v2_e4b4 = inttoptr i32 %v1_e4b4 to i32*
  %v3_e4b4 = load i32, i32* %v2_e4b4, align 4
  store i32 %v3_e4b4, i32* %r2.global-to-local, align 4
  %v2_e4b8 = sub i32 %v2_e4b0, %v3_e4b4
  store i32 %v2_e4b8, i32* %r3.global-to-local, align 4
  %v3_e4bc = icmp uge i32 %v2_e4b8, %v1_e4bc
  store i1 %v3_e4bc, i1* %cpsr_c.global-to-local, align 1
  %v9_e4bc = icmp eq i32 %v2_e4b8, %v1_e4bc
  store i1 %v9_e4bc, i1* %cpsr_z.global-to-local, align 1
  %v2_e4c0 = xor i1 %v3_e4bc, true
  %v3_e4c0 = or i1 %v9_e4bc, %v2_e4c0
  br i1 %v3_e4c0, label %dec_label_pc_e42c, label %dec_label_pc_e4c4

dec_label_pc_e4c4:                                ; preds = %dec_label_pc_e4ac
  %v1_e4c4 = add i32 %v2_e490, 4
  %v2_e4c4 = inttoptr i32 %v1_e4c4 to i32*
  %v3_e4c4 = load i32, i32* %v2_e4c4, align 4
  store i32 %v3_e4c4, i32* %r0.global-to-local, align 4
  %v1_e4c8 = call i32 @function_10008(i32 %v3_e4c4)
  store i32 %v1_e4c8, i32* %r0.global-to-local, align 4
  %v0_e4cc = load i32, i32* @r4, align 4
  %v1_e4cc = add i32 %v0_e4cc, 12
  %v2_e4cc = inttoptr i32 %v1_e4cc to i32*
  %v3_e4cc = load i32, i32* %v2_e4cc, align 4
  store i32 %v3_e4cc, i32* %r3.global-to-local, align 4
  %v2_e4d0 = icmp ugt i32 %v3_e4cc, 1
  store i1 %v2_e4d0, i1* %cpsr_c.global-to-local, align 1
  %v7_e4d0 = icmp eq i32 %v3_e4cc, 2
  store i1 %v7_e4d0, i1* %cpsr_z.global-to-local, align 1
  %v2_e4d4 = xor i1 %v2_e4d0, true
  %v3_e4d4 = or i1 %v7_e4d0, %v2_e4d4
  br i1 %v3_e4d4, label %bb383, label %.thread279

.thread279:                                       ; preds = %dec_label_pc_e4c4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_e4dc276280 = add i32 %v0_e4cc, 4
  %v3_e4dc277281 = inttoptr i32 %v2_e4dc276280 to i32*
  store i32 -1, i32* %v3_e4dc277281, align 4
  br label %bb384

bb383:                                            ; preds = %dec_label_pc_e4c4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_e4dc273 = add i32 %v0_e4cc, 4
  %v3_e4dc274 = inttoptr i32 %v2_e4dc273 to i32*
  store i32 -1, i32* %v3_e4dc274, align 4
  %v4_e4e0 = load i32, i32* %r3.global-to-local, align 4
  %v5_e4e0 = load i32, i32* @r4, align 4
  %v6_e4e0 = add i32 %v5_e4e0, 12
  %v7_e4e0 = inttoptr i32 %v6_e4e0 to i32*
  store i32 %v4_e4e0, i32* %v7_e4e0, align 4
  %v4_e4e4 = load i32, i32* %r3.global-to-local, align 4
  %v5_e4e4 = trunc i32 %v4_e4e4 to i8
  %v6_e4e4 = load i32, i32* @r4, align 4
  %v7_e4e4 = add i32 %v6_e4e4, 284
  %v8_e4e4 = inttoptr i32 %v7_e4e4 to i8*
  store i8 %v5_e4e4, i8* %v8_e4e4, align 1
  %v0_e4e8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_e4e8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb384

bb384:                                            ; preds = %.thread279, %bb383
  %v1_e4e8 = phi i1 [ %v1_e4e8.pre, %bb383 ], [ %v2_e4d0, %.thread279 ]
  %v0_e4e8 = phi i1 [ %v0_e4e8.pre, %bb383 ], [ false, %.thread279 ]
  %v2_e4e8 = xor i1 %v1_e4e8, true
  %v3_e4e8 = or i1 %v0_e4e8, %v2_e4e8
  br i1 %v3_e4e8, label %bb378, label %dec_label_pc_e4ec

dec_label_pc_e4ec:                                ; preds = %bb384
  %v0_e4ec = load i32, i32* @r4, align 4
  %v1_e4ec = add i32 %v0_e4ec, 284
  %v2_e4ec = inttoptr i32 %v1_e4ec to i8*
  %v3_e4ec = load i8, i8* %v2_e4ec, align 1
  %v4_e4ec = zext i8 %v3_e4ec to i32
  %v1_e4f0 = add nuw nsw i32 %v4_e4ec, 1
  %v1_e4f4 = urem i32 %v1_e4f0, 256
  store i32 %v1_e4f4, i32* %r3.global-to-local, align 4
  %v2_e4f8 = icmp ugt i32 %v1_e4f4, 9
  store i1 %v2_e4f8, i1* %cpsr_c.global-to-local, align 1
  %v7_e4f8 = icmp eq i32 %v1_e4f4, 10
  store i1 %v7_e4f8, i1* %cpsr_z.global-to-local, align 1
  %v1_e4fc = trunc i32 %v1_e4f0 to i8
  store i8 %v1_e4fc, i8* %v2_e4ec, align 1
  %v0_e500 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e500, label %.thread56, label %dec_label_pc_e510

.thread56:                                        ; preds = %dec_label_pc_e4ec
  %v1_e500 = load i32, i32* %r3.global-to-local, align 4
  %v2_e500 = add i32 %v1_e500, -10
  store i32 %v2_e500, i32* %r3.global-to-local, align 4
  %v2_e504 = load i32, i32* @r4, align 4
  %v3_e504 = add i32 %v2_e504, 12
  %v4_e504 = inttoptr i32 %v3_e504 to i32*
  store i32 %v2_e500, i32* %v4_e504, align 4
  %v1_e508 = load i32, i32* %r3.global-to-local, align 4
  %v2_e508 = trunc i32 %v1_e508 to i8
  %v3_e508 = load i32, i32* @r4, align 4
  %v4_e508 = add i32 %v3_e508, 284
  %v5_e508 = inttoptr i32 %v4_e508 to i8*
  store i8 %v2_e508, i8* %v5_e508, align 1
  %v0_e50c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e50c.pr.pr, label %bb378, label %dec_label_pc_e510

dec_label_pc_e510:                                ; preds = %dec_label_pc_e4ec, %.thread56
  %v0_e510 = load i32, i32* @r4, align 4
  store i32 %v0_e510, i32* @r0, align 4
  %v0_e514 = call i32 @function_cc94()
  store i32 %v0_e514, i32* %r0.global-to-local, align 4
  br label %bb378

dec_label_pc_e51c:                                ; preds = %bb378
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_e528 = load i32, i32* @r5, align 4
  %v1_e528 = load i32, i32* @r6, align 4
  %v3_e528 = icmp uge i32 %v0_e528, %v1_e528
  store i1 %v3_e528, i1* %cpsr_c.global-to-local, align 1
  %v9_e528 = icmp eq i32 %v0_e528, %v1_e528
  store i1 %v9_e528, i1* %cpsr_z.global-to-local, align 1
  %v5_e52c = icmp slt i32 %v0_e528, %v1_e528
  %storemerge134 = select i1 %v5_e52c, i32 %v1_e528, i32 %v0_e528
  %v2_e538 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_e538, i32* %ip.global-to-local, align 4
  %v2_e53c = ptrtoint i32* %stack_var_-224 to i32
  store i32 %v2_e53c, i32* %r1.global-to-local, align 4
  %v2_e540 = ptrtoint i32* %stack_var_-352 to i32
  store i32 %v2_e540, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e548 = add i32 %storemerge134, 1
  store i32 %v1_e548, i32* %r0.global-to-local, align 4
  %v5_e554 = call i32 @function_fd60(i32 %v1_e548, i32 %v2_e53c, i32 %v2_e540, i32 0, i32 %v2_e538)
  %v0_e558 = load i32, i32* @r4, align 4
  store i32 %v0_e558, i32* %r0.global-to-local, align 4
  %v1_e55c = inttoptr i32 %v0_e558 to i32*
  %v2_e55c = call i32 @function_fcbc(i32* %v1_e55c)
  store i32 %v2_e55c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e2a0.100 to i32), i32* @lr, align 4
  %v0_e564 = load i32, i32* @r4, align 4
  %v5_e564 = trunc i32 %v0_e564 to i16
  store i16 %v5_e564, i16* %stack_var_-52, align 2
  store i32 %v2_e55c, i32* @global_var_1e2a0.100, align 4
  %v2_ee80 = ptrtoint i32* %stack_var_-45 to i32
  %v2_ee94 = ptrtoint i32* %stack_var_-80 to i32
  %v2_ee9c = ptrtoint i32* %stack_var_-77 to i32
  %v2_ec50 = ptrtoint i32* %stack_var_-60 to i32
  %v2_ec64 = ptrtoint i8* %stack_var_-56 to i32
  %v2_ec6c = bitcast i8* %stack_var_-56 to i32*
  %v2_ef8c = ptrtoint i32* %stack_var_-96 to i32
  br label %dec_label_pc_e56c

dec_label_pc_e56c:                                ; preds = %dec_label_pc_e6e0, %dec_label_pc_e51c
  %v0_e578 = phi i32 [ %v1_e6e4, %dec_label_pc_e6e0 ], [ %v0_e564, %dec_label_pc_e51c ]
  store i32 ptrtoint (i32* @global_var_202e8.111 to i32), i32* %r0.global-to-local, align 4
  %v3_e570 = mul i32 %v0_e578, 256
  store i32 %v3_e570, i32* %r3.global-to-local, align 4
  %v2_e574 = load i32, i32* @global_var_202e8.111, align 4
  store i32 %v2_e574, i32* %r1.global-to-local, align 4
  %v2_e57c = mul i32 %v0_e578, 288
  store i32 %v2_e57c, i32* %r2.global-to-local, align 4
  %v2_e580 = add i32 %v2_e574, %v2_e57c
  store i32 %v2_e580, i32* @r5, align 4
  %v1_e584 = add i32 %v2_e580, 4
  %v2_e584 = inttoptr i32 %v1_e584 to i32*
  %v3_e584 = load i32, i32* %v2_e584, align 4
  store i32 %v3_e584, i32* %r0.global-to-local, align 4
  %v2_e588 = icmp eq i32 %v3_e584, -1
  store i1 %v2_e588, i1* %cpsr_c.global-to-local, align 1
  %v7_e588 = icmp eq i32 %v3_e584, -1
  store i1 %v7_e588, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e588, label %dec_label_pc_e6e0, label %dec_label_pc_e590

dec_label_pc_e590:                                ; preds = %dec_label_pc_e56c
  %v3_e590 = udiv i32 %v3_e584, 32
  store i32 %v2_f238, i32* %r1.global-to-local, align 4
  %v3_e59c = mul nuw nsw i32 %v3_e590, 4
  store i32 %v3_e59c, i32* @ip, align 4
  %v2_e5a0 = add i32 %v3_e59c, %v2_f238
  store i32 %v2_e5a0, i32* %r2.global-to-local, align 4
  %v1_e5a4 = add i32 %v2_e5a0, -312
  %v2_e5a4 = inttoptr i32 %v1_e5a4 to i32*
  %v3_e5a4 = load i32, i32* %v2_e5a4, align 4
  %v1_e5a8 = urem i32 %v3_e584, 32
  store i32 %v1_e5a8, i32* %r1.global-to-local, align 4
  %v2_e5ac = add nsw i32 %v1_e5a8, -1
  %v3_e5ac = shl i32 1, %v2_e5ac
  %v4_e5ac = and i32 %v3_e5a4, %v3_e5ac
  %v5_e5ac = icmp ne i32 %v4_e5ac, 0
  store i1 %v5_e5ac, i1* %cpsr_c.global-to-local, align 1
  %v6_e5ac = lshr i32 %v3_e5a4, %v1_e5a8
  store i32 %v6_e5ac, i32* %r3.global-to-local, align 4
  %v1_e5b0 = urem i32 %v6_e5ac, 2
  %v2_e5b0 = icmp eq i32 %v1_e5b0, 0
  store i1 %v2_e5b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5b0, label %dec_label_pc_e5b8, label %dec_label_pc_f070

dec_label_pc_e5b8:                                ; preds = %dec_label_pc_e590, %dec_label_pc_f120
  %v1_e5c8 = phi i32 [ %v1_e5a8, %dec_label_pc_e590 ], [ %v1_e5c8.pre, %dec_label_pc_f120 ]
  %v0_e5c0 = phi i32 [ %v3_e59c, %dec_label_pc_e590 ], [ %v0_e5c0.pre, %dec_label_pc_f120 ]
  store i32 %v2_f238, i32* %r3.global-to-local, align 4
  %v2_e5c0 = add i32 %v0_e5c0, %v2_f238
  store i32 %v2_e5c0, i32* %r2.global-to-local, align 4
  %v1_e5c4 = add i32 %v2_e5c0, -184
  %v2_e5c4 = inttoptr i32 %v1_e5c4 to i32*
  %v3_e5c4 = load i32, i32* %v2_e5c4, align 4
  %v2_e5c8 = add i32 %v1_e5c8, -1
  %v3_e5c8 = shl i32 1, %v2_e5c8
  %v4_e5c8 = and i32 %v3_e5c4, %v3_e5c8
  %v5_e5c8 = icmp ne i32 %v4_e5c8, 0
  store i1 %v5_e5c8, i1* %cpsr_c.global-to-local, align 1
  %v6_e5c8 = lshr i32 %v3_e5c4, %v1_e5c8
  store i32 %v6_e5c8, i32* %r3.global-to-local, align 4
  %v1_e5cc = urem i32 %v6_e5c8, 2
  %v2_e5cc = icmp eq i32 %v1_e5cc, 0
  store i1 %v2_e5cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5cc, label %dec_label_pc_e6e0, label %dec_label_pc_e5d4.preheader

dec_label_pc_e5d4.preheader:                      ; preds = %dec_label_pc_e5b8
  %v0_e5d4156 = load i32, i32* @r5, align 4
  %v1_e5d4157 = add i32 %v0_e5d4156, 12
  %v2_e5d4158 = inttoptr i32 %v1_e5d4157 to i32*
  %v3_e5d4159 = load i32, i32* %v2_e5d4158, align 4
  store i32 %v3_e5d4159, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5d8155161 = icmp eq i32 %v3_e5d4159, 0
  store i1 %v2_e5d8155161, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5d8155161, label %dec_label_pc_e6e0, label %dec_label_pc_e5e0.lr.ph

dec_label_pc_e5d4.loopexit:                       ; preds = %dec_label_pc_ef30, %dec_label_pc_eda0
  %v0_e5d4 = load i32, i32* @r5, align 4
  %v1_e5d4 = add i32 %v0_e5d4, 12
  %v2_e5d4 = inttoptr i32 %v1_e5d4 to i32*
  %v3_e5d4 = load i32, i32* %v2_e5d4, align 4
  store i32 %v3_e5d4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5d8155 = icmp eq i32 %v3_e5d4, 0
  store i1 %v2_e5d8155, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5d8155, label %dec_label_pc_e6e0, label %dec_label_pc_e5e0.lr.ph

dec_label_pc_e5e0.lr.ph:                          ; preds = %dec_label_pc_e5d4.preheader, %dec_label_pc_e5d4.loopexit
  %v0_e5e0189 = phi i32 [ %v0_e5d4, %dec_label_pc_e5d4.loopexit ], [ %v0_e5d4156, %dec_label_pc_e5d4.preheader ]
  br label %dec_label_pc_e5e0

dec_label_pc_e5e0:                                ; preds = %dec_label_pc_e5d8.backedge.thread, %dec_label_pc_e5d8.backedge, %dec_label_pc_e5d8.backedge.thread528, %dec_label_pc_e5e0.lr.ph
  %v0_f000 = phi i32 [ %v0_e5e0189, %dec_label_pc_e5e0.lr.ph ], [ %v0_e5e0186, %dec_label_pc_e5d8.backedge ], [ %v0_e654, %dec_label_pc_e5d8.backedge.thread ], [ %v0_e654, %dec_label_pc_e5d8.backedge.thread528 ]
  %v1_e5e0 = add i32 %v0_f000, 24
  %v2_e5e0 = inttoptr i32 %v1_e5e0 to i32*
  %v3_e5e0 = load i32, i32* %v2_e5e0, align 4
  store i32 %v3_e5e0, i32* @r3, align 4
  %v2_e5e4 = icmp ugt i32 %v3_e5e0, 255
  store i1 %v2_e5e4, i1* %cpsr_c.global-to-local, align 1
  %v7_e5e4 = icmp eq i32 %v3_e5e0, 256
  store i1 %v7_e5e4, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_f000, 28
  store i32 %.pre, i32* %sl.global-to-local, align 4
  br i1 %v7_e5e4, label %dec_label_pc_f000, label %dec_label_pc_e5f0

dec_label_pc_e5f0:                                ; preds = %dec_label_pc_e5e0, %dec_label_pc_f000
  store i32 0, i32* @r6, align 4
  %v1_e5f4 = load i32, i32* @sb, align 4
  %v2_e5f4 = inttoptr i32 %v1_e5f4 to i32*
  store i32 0, i32* %v2_e5f4, align 4
  %v0_e5f8 = load i32, i32* @r5, align 4
  %v1_e5f8 = add i32 %v0_e5f8, 24
  %v2_e5f8 = inttoptr i32 %v1_e5f8 to i32*
  %v3_e5f8 = load i32, i32* %v2_e5f8, align 4
  store i32 %v3_e5f8, i32* %r2.global-to-local, align 4
  %v0_e5fc = load i32, i32* %sl.global-to-local, align 4
  %v2_e5fc = add i32 %v0_e5fc, %v3_e5f8
  store i32 %v2_e5fc, i32* @r4, align 4
  %v1_e600 = add i32 %v0_e5f8, 4
  %v2_e600 = inttoptr i32 %v1_e600 to i32*
  %v3_e600 = load i32, i32* %v2_e600, align 4
  store i32 %v3_e600, i32* %r0.global-to-local, align 4
  %v1_e604 = sub i32 256, %v3_e5f8
  store i32 %v1_e604, i32* %r2.global-to-local, align 4
  store i32 %v2_e5fc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e610 = call i32 @function_10254(i32 %v3_e600, i32 %v2_e5fc, i32 %v1_e604, i32 16384)
  store i32 %v4_e610, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e614 = icmp eq i32 %v4_e610, 0
  store i1 %v2_e614, i1* %cpsr_z.global-to-local, align 1
  %tmp385 = icmp slt i32 %v4_e610, 1
  br i1 %tmp385, label %dec_label_pc_e68c, label %dec_label_pc_e61c

dec_label_pc_e61c:                                ; preds = %dec_label_pc_e5f0
  %v0_e61c = load i32, i32* @r6, align 4
  store i32 %v0_e61c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e620

dec_label_pc_e620:                                ; preds = %.thread63, %dec_label_pc_e61c
  %v3_e62c = phi i32 [ %v1_e630, %.thread63 ], [ %v0_e61c, %dec_label_pc_e61c ]
  %v1_e620 = load i32, i32* @r4, align 4
  %v2_e620 = add i32 %v1_e620, %v3_e62c
  %v3_e620 = inttoptr i32 %v2_e620 to i8*
  %v4_e620 = load i8, i8* %v3_e620, align 1
  %v6_e620 = zext i8 %v4_e620 to i32
  store i32 %v6_e620, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e624 = icmp eq i8 %v4_e620, 0
  store i1 %v2_e624, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e624, label %bb386, label %.thread63

bb386:                                            ; preds = %dec_label_pc_e620
  %v2_e628 = add nuw nsw i32 %v6_e620, 65
  store i32 %v2_e628, i32* %r3.global-to-local, align 4
  %v2_e62c = trunc i32 %v2_e628 to i8
  store i8 %v2_e62c, i8* %v3_e620, align 1
  %v0_e630.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread63

.thread63:                                        ; preds = %dec_label_pc_e620, %bb386
  %v0_e630 = phi i32 [ %v3_e62c, %dec_label_pc_e620 ], [ %v0_e630.pre, %bb386 ]
  %v1_e630 = add i32 %v0_e630, 1
  store i32 %v1_e630, i32* %r2.global-to-local, align 4
  %v3_e634 = icmp uge i32 %v1_e630, %v4_e610
  store i1 %v3_e634, i1* %cpsr_c.global-to-local, align 1
  %v9_e634 = icmp eq i32 %v1_e630, %v4_e610
  store i1 %v9_e634, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e634, label %dec_label_pc_e63c, label %dec_label_pc_e620

dec_label_pc_e63c:                                ; preds = %.thread63, %dec_label_pc_e690
  store i32 ptrtoint (i32* @global_var_1e2a0.100 to i32), i32* @ip, align 4
  %v0_e640 = load i32, i32* @r5, align 4
  %v1_e640 = add i32 %v0_e640, 24
  %v2_e640 = inttoptr i32 %v1_e640 to i32*
  %v3_e640 = load i32, i32* %v2_e640, align 4
  %v2_e644 = load i32, i32* @global_var_1e2a0.100, align 4
  store i32 %v2_e644, i32* %r2.global-to-local, align 4
  %v2_e648 = add i32 %v3_e640, %v4_e610
  store i32 %v2_e648, i32* %r3.global-to-local, align 4
  store i32 %v2_e648, i32* %v2_e640, align 4
  %v0_e650 = load i32, i32* %r2.global-to-local, align 4
  %v1_e650 = load i32, i32* @r5, align 4
  %v2_e650 = add i32 %v1_e650, 8
  %v3_e650 = inttoptr i32 %v2_e650 to i32*
  store i32 %v0_e650, i32* %v3_e650, align 4
  br label %dec_label_pc_e654

dec_label_pc_e654:                                ; preds = %dec_label_pc_e774, %dec_label_pc_e63c
  %v0_e654 = load i32, i32* @r5, align 4
  %v1_e654 = add i32 %v0_e654, 12
  %v2_e654 = inttoptr i32 %v1_e654 to i32*
  %v3_e654 = load i32, i32* %v2_e654, align 4
  store i32 %v3_e654, i32* %r0.global-to-local, align 4
  %v1_e658 = add i32 %v3_e654, -2
  store i32 %v1_e658, i32* @r3, align 4
  %v7_e65c = icmp eq i32 %v1_e658, 8
  store i1 %v7_e65c, i1* %cpsr_z.global-to-local, align 1
  %v5_e660 = and i32 %v1_e658, 1073741824
  %v6_e660 = icmp ne i32 %v5_e660, 0
  store i1 %v6_e660, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_e654, label %dec_label_pc_e5d8.backedge [
    i32 2, label %dec_label_pc_edac
    i32 3, label %dec_label_pc_ebc0
    i32 4, label %dec_label_pc_ecb8
    i32 5, label %dec_label_pc_eaec
    i32 6, label %dec_label_pc_e944
    i32 7, label %dec_label_pc_e870
    i32 8, label %dec_label_pc_ea18
    i32 9, label %dec_label_pc_e79c
    i32 10, label %dec_label_pc_e6f8
  ]

dec_label_pc_e68c:                                ; preds = %dec_label_pc_e5f0
  br i1 %v2_e614, label %dec_label_pc_f21c, label %dec_label_pc_e690

dec_label_pc_e690:                                ; preds = %dec_label_pc_e68c
  %v3_e690 = icmp eq i32 %v4_e610, -1
  store i1 %v3_e690, i1* %cpsr_c.global-to-local, align 1
  %v8_e690 = icmp eq i32 %v4_e610, -1
  store i1 %v8_e690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_e690, label %dec_label_pc_e698, label %dec_label_pc_e63c

dec_label_pc_e698:                                ; preds = %dec_label_pc_e690
  %v0_e698 = load i32, i32* @sb, align 4
  %v1_e698 = inttoptr i32 %v0_e698 to i32*
  %v2_e698 = load i32, i32* %v1_e698, align 4
  store i32 %v2_e698, i32* %r3.global-to-local, align 4
  %v2_e69c = icmp ugt i32 %v2_e698, 10
  store i1 %v2_e69c, i1* %cpsr_c.global-to-local, align 1
  %v7_e69c = icmp eq i32 %v2_e698, 11
  store i1 %v7_e69c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e69c, label %dec_label_pc_e6e0, label %dec_label_pc_e6a4

dec_label_pc_e6a4:                                ; preds = %dec_label_pc_e698, %dec_label_pc_f21c
  %v0_e6a4 = load i32, i32* @r5, align 4
  %v1_e6a4 = add i32 %v0_e6a4, 4
  %v2_e6a4 = inttoptr i32 %v1_e6a4 to i32*
  %v3_e6a4 = load i32, i32* %v2_e6a4, align 4
  store i32 %v3_e6a4, i32* %r0.global-to-local, align 4
  %v1_e6a8 = call i32 @function_10008(i32 %v3_e6a4)
  store i32 %v1_e6a8, i32* %r0.global-to-local, align 4
  %v0_e6ac = load i32, i32* @r5, align 4
  %v1_e6ac = add i32 %v0_e6ac, 284
  %v2_e6ac = inttoptr i32 %v1_e6ac to i8*
  %v3_e6ac = load i8, i8* %v2_e6ac, align 1
  %v4_e6ac = zext i8 %v3_e6ac to i32
  %v1_e6b0 = add nuw nsw i32 %v4_e6ac, 1
  %v1_e6b4 = urem i32 %v1_e6b0, 256
  store i32 %v1_e6b4, i32* %r3.global-to-local, align 4
  %v2_e6b8 = icmp ugt i32 %v1_e6b4, 8
  store i1 %v2_e6b8, i1* %cpsr_c.global-to-local, align 1
  %v7_e6b8 = icmp eq i32 %v1_e6b4, 9
  store i1 %v7_e6b8, i1* %cpsr_z.global-to-local, align 1
  %v1_e6bc = trunc i32 %v1_e6b0 to i8
  store i8 %v1_e6bc, i8* %v2_e6ac, align 1
  %v0_e6c0 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_e6c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_e6c0 = xor i1 %v1_e6c0, true
  %v3_e6c0 = and i1 %v0_e6c0, %v2_e6c0
  br i1 %v3_e6c0, label %bb387, label %.thread293

.thread293:                                       ; preds = %dec_label_pc_e6a4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v1_e6cc289294 = load i32, i32* @r5, align 4
  %v2_e6cc290295 = add i32 %v1_e6cc289294, 4
  %v3_e6cc291296 = inttoptr i32 %v2_e6cc290295 to i32*
  store i32 -1, i32* %v3_e6cc291296, align 4
  br label %bb388

bb387:                                            ; preds = %dec_label_pc_e6a4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_e6cc285 = load i32, i32* @r5, align 4
  %v2_e6cc286 = add i32 %v1_e6cc285, 4
  %v3_e6cc287 = inttoptr i32 %v2_e6cc286 to i32*
  store i32 -1, i32* %v3_e6cc287, align 4
  %v4_e6d0 = load i32, i32* %r0.global-to-local, align 4
  %v5_e6d0 = load i32, i32* @r5, align 4
  %v6_e6d0 = add i32 %v5_e6d0, 12
  %v7_e6d0 = inttoptr i32 %v6_e6d0 to i32*
  store i32 %v4_e6d0, i32* %v7_e6d0, align 4
  %v4_e6d4 = load i32, i32* %r3.global-to-local, align 4
  %v5_e6d4 = trunc i32 %v4_e6d4 to i8
  %v6_e6d4 = load i32, i32* @r5, align 4
  %v7_e6d4 = add i32 %v6_e6d4, 284
  %v8_e6d4 = inttoptr i32 %v7_e6d4 to i8*
  store i8 %v5_e6d4, i8* %v8_e6d4, align 1
  %v0_e6d8.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_e6d8.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb388

bb388:                                            ; preds = %.thread293, %bb387
  %v1_e6dc = phi i1 [ %v1_e6d8.pre, %bb387 ], [ %v0_e6c0, %.thread293 ]
  %v0_e6dc = phi i1 [ %v0_e6d8.pre, %bb387 ], [ %v1_e6c0, %.thread293 ]
  %v2_e6d8 = xor i1 %v1_e6dc, true
  %v3_e6d8 = or i1 %v0_e6dc, %v2_e6d8
  br i1 %v3_e6d8, label %bb389, label %bb390

bb389:                                            ; preds = %bb388
  %v4_e6d8 = load i32, i32* @r5, align 4
  store i32 %v4_e6d8, i32* %r0.global-to-local, align 4
  br label %bb390

bb390:                                            ; preds = %bb388, %bb389
  store i32 59104, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_e6d8, i32 ptrtoint (i32* @global_var_cc94.477 to i32))
  br label %dec_label_pc_e6e0

dec_label_pc_e6e0:                                ; preds = %dec_label_pc_e5d4.loopexit, %dec_label_pc_e5d8.backedge, %dec_label_pc_e5d4.preheader, %dec_label_pc_e698, %dec_label_pc_e5b8, %dec_label_pc_e56c, %dec_label_pc_f140, %bb390
  %v3_e6e0 = load i16, i16* %stack_var_-52, align 2
  %v4_e6e0 = sext i16 %v3_e6e0 to i32
  store i32 %v4_e6e0, i32* %r3.global-to-local, align 4
  %v1_e6e4 = add nsw i32 %v4_e6e0, 1
  store i32 %v1_e6e4, i32* @r4, align 4
  %v2_e6e8 = icmp ugt i32 %v1_e6e4, 254
  store i1 %v2_e6e8, i1* %cpsr_c.global-to-local, align 1
  %v7_e6e8 = icmp eq i32 %v1_e6e4, 255
  store i1 %v7_e6e8, i1* %cpsr_z.global-to-local, align 1
  %v5_e6ec = trunc i32 %v1_e6e4 to i16
  store i16 %v5_e6ec, i16* %stack_var_-52, align 2
  %v7_e6f0 = icmp sgt i16 %v3_e6e0, 254
  br i1 %v7_e6f0, label %dec_label_pc_dfa0, label %dec_label_pc_e56c

dec_label_pc_e6f8:                                ; preds = %dec_label_pc_e654
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_e6fc = call i32 @function_f3cc(i32 10)
  store i32 %v2_ec64, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_e70c = call i32 @function_f308(i32 10, i32* %v2_ec6c)
  %v3_e710 = load i8, i8* %stack_var_-56, align 1
  %v4_e710 = sext i8 %v3_e710 to i32
  store i32 %v3_e70c, i32* %r2.global-to-local, align 4
  %v1_e718 = add nsw i32 %v4_e710, -1
  store i32 %v1_e718, i32* %r3.global-to-local, align 4
  %v0_e71c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_e71c, i32* %r0.global-to-local, align 4
  %v0_e720 = load i32, i32* @r5, align 4
  %v1_e720 = add i32 %v0_e720, 24
  %v2_e720 = inttoptr i32 %v1_e720 to i32*
  %v3_e720 = load i32, i32* %v2_e720, align 4
  store i32 %v3_e720, i32* %r1.global-to-local, align 4
  %v4_e724 = call i32 @function_f840(i32 %v0_e71c, i32 %v3_e720, i32 %v3_e70c, i32 %v1_e718)
  %v2_e728 = icmp eq i32 %v4_e724, -1
  store i1 %v2_e728, i1* %cpsr_c.global-to-local, align 1
  %v7_e728 = icmp eq i32 %v4_e724, -1
  store i1 %v7_e728, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_e724, i32* @r4, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_ef34 = call i32 @function_f32c(i32 10)
  br i1 %v7_e728, label %dec_label_pc_ef30, label %dec_label_pc_e734

dec_label_pc_e734:                                ; preds = %dec_label_pc_e6f8
  store i32 %v1_ef34, i32* %r0.global-to-local, align 4
  %v0_e73c = load i32, i32* @r5, align 4
  %v1_e73c = add i32 %v0_e73c, 4
  %v2_e73c = inttoptr i32 %v1_e73c to i32*
  %v3_e73c = load i32, i32* %v2_e73c, align 4
  store i32 %v3_e73c, i32* %r0.global-to-local, align 4
  %v1_e740 = call i32 @function_10008(i32 %v3_e73c)
  store i32 %v1_e740, i32* %r0.global-to-local, align 4
  %v0_e744 = load i32, i32* @r5, align 4
  %v1_e744 = add i32 %v0_e744, 284
  %v2_e744 = inttoptr i32 %v1_e744 to i8*
  %v3_e744 = load i8, i8* %v2_e744, align 1
  %v4_e744 = zext i8 %v3_e744 to i32
  %v1_e748 = add nuw nsw i32 %v4_e744, 1
  %v1_e74c = urem i32 %v1_e748, 256
  store i32 %v1_e74c, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_e754 = icmp ugt i32 %v1_e74c, 9
  store i1 %v2_e754, i1* %cpsr_c.global-to-local, align 1
  %v7_e754 = icmp eq i32 %v1_e74c, 10
  store i1 %v7_e754, i1* %cpsr_z.global-to-local, align 1
  %v2_e758 = add i32 %v0_e744, 4
  %v3_e758 = inttoptr i32 %v2_e758 to i32*
  store i32 -1, i32* %v3_e758, align 4
  %v0_e75c = load i32, i32* @r3, align 4
  %v1_e75c = trunc i32 %v0_e75c to i8
  %v2_e75c = load i32, i32* @r5, align 4
  %v3_e75c = add i32 %v2_e75c, 284
  %v4_e75c = inttoptr i32 %v3_e75c to i8*
  store i8 %v1_e75c, i8* %v4_e75c, align 1
  %v0_e760 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e760, label %dec_label_pc_e764, label %dec_label_pc_f024

dec_label_pc_e764:                                ; preds = %dec_label_pc_e734
  store i32 0, i32* @r3, align 4
  %v1_e768 = load i32, i32* @r5, align 4
  %v2_e768 = add i32 %v1_e768, 12
  %v3_e768 = inttoptr i32 %v2_e768 to i32*
  store i32 0, i32* %v3_e768, align 4
  %v0_e76c = load i32, i32* @r3, align 4
  %v1_e76c = trunc i32 %v0_e76c to i8
  %v2_e76c = load i32, i32* @r5, align 4
  %v3_e76c = add i32 %v2_e76c, 284
  %v4_e76c = inttoptr i32 %v3_e76c to i8*
  store i8 %v1_e76c, i8* %v4_e76c, align 1
  br label %dec_label_pc_e770

dec_label_pc_e770:                                ; preds = %dec_label_pc_f024, %dec_label_pc_e764
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_e774

dec_label_pc_e774:                                ; preds = %dec_label_pc_eda0, %dec_label_pc_eb68, %dec_label_pc_ea94, %dec_label_pc_e9c0, %dec_label_pc_e8ec, %dec_label_pc_e818, %dec_label_pc_e770
  %v0_e774 = load i32, i32* @r5, align 4
  %v1_e774 = add i32 %v0_e774, 24
  %v2_e774 = inttoptr i32 %v1_e774 to i32*
  %v3_e774 = load i32, i32* %v2_e774, align 4
  %v0_e778 = load i32, i32* @r7, align 4
  %v2_e778 = sub i32 %v0_e778, %v3_e774
  %v3_e778 = icmp uge i32 %v0_e778, %v3_e774
  store i1 %v3_e778, i1* %cpsr_c.global-to-local, align 1
  %v4_e778 = xor i32 %v0_e778, %v3_e774
  %v5_e778 = xor i32 %v2_e778, %v0_e778
  %v6_e778 = and i32 %v5_e778, %v4_e778
  %v7_e778 = icmp slt i32 %v6_e778, 0
  %v8_e778 = icmp slt i32 %v2_e778, 0
  %v9_e778 = icmp eq i32 %v0_e778, %v3_e774
  store i1 %v9_e778, i1* %cpsr_z.global-to-local, align 1
  %v2_e77c = xor i1 %v8_e778, %v7_e778
  %v0_e778.v3_e774 = select i1 %v2_e77c, i32 %v0_e778, i32 %v3_e774
  store i32 %v0_e778.v3_e774, i32* %r1.global-to-local, align 4
  %v2_e784 = sub i32 %v3_e774, %v0_e778.v3_e774
  store i32 %v2_e784, i32* @r2, align 4
  store i32 %v2_e784, i32* %v2_e774, align 4
  %v0_e78c = load i32, i32* %sl.global-to-local, align 4
  %v1_e78c = load i32, i32* %r1.global-to-local, align 4
  %v2_e78c = add i32 %v1_e78c, %v0_e78c
  store i32 %v2_e78c, i32* @r1, align 4
  store i32 %v0_e78c, i32* @r0, align 4
  %v3_e794 = call i32 @function_10090(i32 %v0_e78c, i32 %v2_e78c, i32 %v2_e784)
  store i32 %v3_e794, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e654

dec_label_pc_e79c:                                ; preds = %dec_label_pc_e654
  %v1_e79c = add i32 %v0_e654, 24
  %v2_e79c = inttoptr i32 %v1_e79c to i32*
  %v3_e79c = load i32, i32* %v2_e79c, align 4
  store i32 %v3_e79c, i32* %r2.global-to-local, align 4
  %v1_e7a0 = add i32 %v3_e79c, -1
  store i32 %v1_e7a0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e7a4 = icmp eq i32 %v1_e7a0, 0
  store i1 %v2_e7a4, i1* %cpsr_z.global-to-local, align 1
  %tmp393 = icmp slt i32 %v1_e7a0, 1
  br i1 %tmp393, label %dec_label_pc_e5d8.backedge.thread, label %dec_label_pc_e7ac

dec_label_pc_e7ac:                                ; preds = %dec_label_pc_e79c
  %v2_e7ac = add i32 %v1_e7a0, %v0_e654
  store i32 %v2_e7ac, i32* %r3.global-to-local, align 4
  %v1_e7b0 = add i32 %v2_e7ac, 28
  %v2_e7b0 = inttoptr i32 %v1_e7b0 to i8*
  %v3_e7b0 = load i8, i8* %v2_e7b0, align 1
  %v4_e7b0 = zext i8 %v3_e7b0 to i32
  store i32 %v4_e7b0, i32* %r3.global-to-local, align 4
  %v2_e7b4 = icmp ugt i8 %v3_e7b0, 61
  store i1 %v2_e7b4, i1* %cpsr_c.global-to-local, align 1
  %v7_e7b4 = icmp eq i8 %v3_e7b0, 62
  store i1 %v7_e7b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7b4, label %dec_label_pc_e818, label %bb394

bb394:                                            ; preds = %dec_label_pc_e7ac
  %v3_e7b8 = icmp ugt i8 %v3_e7b0, 57
  store i1 %v3_e7b8, i1* %cpsr_c.global-to-local, align 1
  %v8_e7b8 = icmp eq i8 %v3_e7b0, 58
  store i1 %v8_e7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e7b8, label %dec_label_pc_e818, label %dec_label_pc_e7c0

dec_label_pc_e7c0:                                ; preds = %bb394
  %v2_e7c0 = icmp ugt i8 %v3_e7b0, 35
  store i1 %v2_e7c0, i1* %cpsr_c.global-to-local, align 1
  %v7_e7c0 = icmp eq i8 %v3_e7b0, 36
  store i1 %v7_e7c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7c0, label %dec_label_pc_e818, label %dec_label_pc_e7c8

dec_label_pc_e7c8:                                ; preds = %dec_label_pc_e7c0
  %v2_e7c8 = icmp ugt i8 %v3_e7b0, 34
  store i1 %v2_e7c8, i1* %cpsr_c.global-to-local, align 1
  %v7_e7c8 = icmp eq i8 %v3_e7b0, 35
  store i1 %v7_e7c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7c8, label %dec_label_pc_e818, label %dec_label_pc_e7d0

dec_label_pc_e7d0:                                ; preds = %dec_label_pc_e7c8
  %v2_e7d0 = icmp ugt i8 %v3_e7b0, 36
  store i1 %v2_e7d0, i1* %cpsr_c.global-to-local, align 1
  %v7_e7d0 = icmp eq i8 %v3_e7b0, 37
  store i1 %v7_e7d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7d0, label %dec_label_pc_e818, label %dec_label_pc_e800.preheader

dec_label_pc_e800.preheader:                      ; preds = %dec_label_pc_e7d0
  %v3_e7d4 = add i32 %v0_e654, 28
  %v2_e7d8 = add i32 %v3_e7d4, %v3_e79c
  store i32 %v2_e7d8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e800

dec_label_pc_e7e4:                                ; preds = %bb395
  %v2_e7e4 = icmp ugt i8 %v3_e808, 35
  store i1 %v2_e7e4, i1* %cpsr_c.global-to-local, align 1
  %v7_e7e4 = icmp eq i8 %v3_e808, 36
  store i1 %v7_e7e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7e4, label %dec_label_pc_e818, label %dec_label_pc_e7ec

dec_label_pc_e7ec:                                ; preds = %dec_label_pc_e7e4
  %v2_e7ec = icmp ugt i8 %v3_e808, 34
  store i1 %v2_e7ec, i1* %cpsr_c.global-to-local, align 1
  %v7_e7ec = icmp eq i8 %v3_e808, 35
  store i1 %v7_e7ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7ec, label %dec_label_pc_e818, label %dec_label_pc_e7f4

dec_label_pc_e7f4:                                ; preds = %dec_label_pc_e7ec
  %v2_e7f4 = icmp ugt i8 %v3_e808, 36
  store i1 %v2_e7f4, i1* %cpsr_c.global-to-local, align 1
  %v7_e7f4 = icmp eq i8 %v3_e808, 37
  store i1 %v7_e7f4, i1* %cpsr_z.global-to-local, align 1
  %v1_e7f8 = add i32 %v0_e7f8, -1
  store i32 %v1_e7f8, i32* %r3.global-to-local, align 4
  br i1 %v7_e7f4, label %dec_label_pc_e818, label %dec_label_pc_e800

dec_label_pc_e800:                                ; preds = %dec_label_pc_e800.preheader, %dec_label_pc_e7f4
  %v0_e7f8 = phi i32 [ %v2_e7d8, %dec_label_pc_e800.preheader ], [ %v1_e7f8, %dec_label_pc_e7f4 ]
  %v0_e800 = phi i32 [ %v1_e7a0, %dec_label_pc_e800.preheader ], [ %v1_e800, %dec_label_pc_e7f4 ]
  %v1_e800 = add i32 %v0_e800, -1
  store i32 %v1_e800, i32* %r1.global-to-local, align 4
  %v2_e800 = icmp ne i32 %v0_e800, 0
  store i1 %v2_e800, i1* %cpsr_c.global-to-local, align 1
  %v7_e800 = icmp eq i32 %v0_e800, 1
  store i1 %v7_e800, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e800, label %dec_label_pc_e5d8.backedge.thread528, label %dec_label_pc_e808

dec_label_pc_e808:                                ; preds = %dec_label_pc_e800
  %v1_e808 = add i32 %v0_e7f8, -2
  %v2_e808 = inttoptr i32 %v1_e808 to i8*
  %v3_e808 = load i8, i8* %v2_e808, align 1
  %v4_e808 = zext i8 %v3_e808 to i32
  store i32 %v4_e808, i32* %r2.global-to-local, align 4
  %v2_e80c = icmp ugt i8 %v3_e808, 61
  store i1 %v2_e80c, i1* %cpsr_c.global-to-local, align 1
  %v7_e80c = icmp eq i8 %v3_e808, 62
  store i1 %v7_e80c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e80c, label %dec_label_pc_e818, label %bb395

bb395:                                            ; preds = %dec_label_pc_e808
  %v3_e810 = icmp ugt i8 %v3_e808, 57
  store i1 %v3_e810, i1* %cpsr_c.global-to-local, align 1
  %v8_e810 = icmp eq i8 %v3_e808, 58
  store i1 %v8_e810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e810, label %dec_label_pc_e818, label %dec_label_pc_e7e4

dec_label_pc_e818:                                ; preds = %dec_label_pc_e808, %bb395, %dec_label_pc_e7f4, %dec_label_pc_e7ec, %dec_label_pc_e7e4, %dec_label_pc_e7d0, %dec_label_pc_e7ac, %dec_label_pc_e7c8, %dec_label_pc_e7c0, %bb394
  %v0_e81c = phi i32 [ %v1_e7a0, %dec_label_pc_e7d0 ], [ %v1_e7a0, %dec_label_pc_e7ac ], [ %v1_e7a0, %dec_label_pc_e7c8 ], [ %v1_e7a0, %dec_label_pc_e7c0 ], [ %v1_e7a0, %bb394 ], [ %v1_e800, %dec_label_pc_e7e4 ], [ %v1_e800, %dec_label_pc_e7ec ], [ %v1_e800, %dec_label_pc_e7f4 ], [ %v1_e800, %bb395 ], [ %v1_e800, %dec_label_pc_e808 ]
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_e81c = add i32 %v0_e81c, 1
  store i32 %v1_e81c, i32* @r7, align 4
  %v1_e820 = call i32 @function_f3cc(i32 8)
  store i32 %v2_ec50, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_e830 = call i32 @function_f308(i32 8, i32* nonnull %stack_var_-60)
  store i32 %v3_e830, i32* %r0.global-to-local, align 4
  %v3_e834 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_e834, i32* %r2.global-to-local, align 4
  store i32 %v3_e830, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e840 = load i32, i32* @r5, align 4
  %v1_e840 = add i32 %v0_e840, 4
  %v2_e840 = inttoptr i32 %v1_e840 to i32*
  %v3_e840 = load i32, i32* %v2_e840, align 4
  store i32 %v3_e840, i32* %r0.global-to-local, align 4
  %v4_e844 = call i32 @function_102c8(i32 %v3_e840, i32 %v3_e830, i32 %v3_e834, i32 16384)
  store i32 %v4_e844, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_155fc.479 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e854 = load i32, i32* @r5, align 4
  %v1_e854 = add i32 %v0_e854, 4
  %v2_e854 = inttoptr i32 %v1_e854 to i32*
  %v3_e854 = load i32, i32* %v2_e854, align 4
  store i32 %v3_e854, i32* %r0.global-to-local, align 4
  %v4_e858 = call i32 @function_102c8(i32 %v3_e854, i32 ptrtoint ([3 x i8]* @global_var_155fc.479 to i32), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_e860 = call i32 @function_f32c(i32 8)
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_e868 = load i32, i32* @r5, align 4
  %v2_e868 = add i32 %v1_e868, 12
  %v3_e868 = inttoptr i32 %v2_e868 to i32*
  store i32 10, i32* %v3_e868, align 4
  br label %dec_label_pc_e774

dec_label_pc_e870:                                ; preds = %dec_label_pc_e654
  %v1_e870 = add i32 %v0_e654, 24
  %v2_e870 = inttoptr i32 %v1_e870 to i32*
  %v3_e870 = load i32, i32* %v2_e870, align 4
  store i32 %v3_e870, i32* %r2.global-to-local, align 4
  %v1_e874 = add i32 %v3_e870, -1
  store i32 %v1_e874, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e878 = icmp eq i32 %v1_e874, 0
  store i1 %v2_e878, i1* %cpsr_z.global-to-local, align 1
  %tmp396 = icmp slt i32 %v1_e874, 1
  br i1 %tmp396, label %dec_label_pc_e5d8.backedge.thread, label %dec_label_pc_e880

dec_label_pc_e880:                                ; preds = %dec_label_pc_e870
  %v2_e880 = add i32 %v1_e874, %v0_e654
  store i32 %v2_e880, i32* %r3.global-to-local, align 4
  %v1_e884 = add i32 %v2_e880, 28
  %v2_e884 = inttoptr i32 %v1_e884 to i8*
  %v3_e884 = load i8, i8* %v2_e884, align 1
  %v4_e884 = zext i8 %v3_e884 to i32
  store i32 %v4_e884, i32* %r3.global-to-local, align 4
  %v2_e888 = icmp ugt i8 %v3_e884, 61
  store i1 %v2_e888, i1* %cpsr_c.global-to-local, align 1
  %v7_e888 = icmp eq i8 %v3_e884, 62
  store i1 %v7_e888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e888, label %dec_label_pc_e8ec, label %bb397

bb397:                                            ; preds = %dec_label_pc_e880
  %v3_e88c = icmp ugt i8 %v3_e884, 57
  store i1 %v3_e88c, i1* %cpsr_c.global-to-local, align 1
  %v8_e88c = icmp eq i8 %v3_e884, 58
  store i1 %v8_e88c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e88c, label %dec_label_pc_e8ec, label %dec_label_pc_e894

dec_label_pc_e894:                                ; preds = %bb397
  %v2_e894 = icmp ugt i8 %v3_e884, 35
  store i1 %v2_e894, i1* %cpsr_c.global-to-local, align 1
  %v7_e894 = icmp eq i8 %v3_e884, 36
  store i1 %v7_e894, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e894, label %dec_label_pc_e8ec, label %dec_label_pc_e89c

dec_label_pc_e89c:                                ; preds = %dec_label_pc_e894
  %v2_e89c = icmp ugt i8 %v3_e884, 34
  store i1 %v2_e89c, i1* %cpsr_c.global-to-local, align 1
  %v7_e89c = icmp eq i8 %v3_e884, 35
  store i1 %v7_e89c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e89c, label %dec_label_pc_e8ec, label %dec_label_pc_e8a4

dec_label_pc_e8a4:                                ; preds = %dec_label_pc_e89c
  %v2_e8a4 = icmp ugt i8 %v3_e884, 36
  store i1 %v2_e8a4, i1* %cpsr_c.global-to-local, align 1
  %v7_e8a4 = icmp eq i8 %v3_e884, 37
  store i1 %v7_e8a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8a4, label %dec_label_pc_e8ec, label %dec_label_pc_e8d4.preheader

dec_label_pc_e8d4.preheader:                      ; preds = %dec_label_pc_e8a4
  %v3_e8a8 = add i32 %v0_e654, 28
  %v2_e8ac = add i32 %v3_e8a8, %v3_e870
  store i32 %v2_e8ac, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e8d4

dec_label_pc_e8b8:                                ; preds = %bb398
  %v2_e8b8 = icmp ugt i8 %v3_e8dc, 35
  store i1 %v2_e8b8, i1* %cpsr_c.global-to-local, align 1
  %v7_e8b8 = icmp eq i8 %v3_e8dc, 36
  store i1 %v7_e8b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8b8, label %dec_label_pc_e8ec, label %dec_label_pc_e8c0

dec_label_pc_e8c0:                                ; preds = %dec_label_pc_e8b8
  %v2_e8c0 = icmp ugt i8 %v3_e8dc, 34
  store i1 %v2_e8c0, i1* %cpsr_c.global-to-local, align 1
  %v7_e8c0 = icmp eq i8 %v3_e8dc, 35
  store i1 %v7_e8c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8c0, label %dec_label_pc_e8ec, label %dec_label_pc_e8c8

dec_label_pc_e8c8:                                ; preds = %dec_label_pc_e8c0
  %v2_e8c8 = icmp ugt i8 %v3_e8dc, 36
  store i1 %v2_e8c8, i1* %cpsr_c.global-to-local, align 1
  %v7_e8c8 = icmp eq i8 %v3_e8dc, 37
  store i1 %v7_e8c8, i1* %cpsr_z.global-to-local, align 1
  %v1_e8cc = add i32 %v0_e8cc, -1
  store i32 %v1_e8cc, i32* %r3.global-to-local, align 4
  br i1 %v7_e8c8, label %dec_label_pc_e8ec, label %dec_label_pc_e8d4

dec_label_pc_e8d4:                                ; preds = %dec_label_pc_e8d4.preheader, %dec_label_pc_e8c8
  %v0_e8cc = phi i32 [ %v2_e8ac, %dec_label_pc_e8d4.preheader ], [ %v1_e8cc, %dec_label_pc_e8c8 ]
  %v0_e8d4 = phi i32 [ %v1_e874, %dec_label_pc_e8d4.preheader ], [ %v1_e8d4, %dec_label_pc_e8c8 ]
  %v1_e8d4 = add i32 %v0_e8d4, -1
  store i32 %v1_e8d4, i32* %r1.global-to-local, align 4
  %v2_e8d4 = icmp ne i32 %v0_e8d4, 0
  store i1 %v2_e8d4, i1* %cpsr_c.global-to-local, align 1
  %v7_e8d4 = icmp eq i32 %v0_e8d4, 1
  store i1 %v7_e8d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8d4, label %dec_label_pc_e5d8.backedge.thread528, label %dec_label_pc_e8dc

dec_label_pc_e8dc:                                ; preds = %dec_label_pc_e8d4
  %v1_e8dc = add i32 %v0_e8cc, -2
  %v2_e8dc = inttoptr i32 %v1_e8dc to i8*
  %v3_e8dc = load i8, i8* %v2_e8dc, align 1
  %v4_e8dc = zext i8 %v3_e8dc to i32
  store i32 %v4_e8dc, i32* %r2.global-to-local, align 4
  %v2_e8e0 = icmp ugt i8 %v3_e8dc, 61
  store i1 %v2_e8e0, i1* %cpsr_c.global-to-local, align 1
  %v7_e8e0 = icmp eq i8 %v3_e8dc, 62
  store i1 %v7_e8e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e8e0, label %dec_label_pc_e8ec, label %bb398

bb398:                                            ; preds = %dec_label_pc_e8dc
  %v3_e8e4 = icmp ugt i8 %v3_e8dc, 57
  store i1 %v3_e8e4, i1* %cpsr_c.global-to-local, align 1
  %v8_e8e4 = icmp eq i8 %v3_e8dc, 58
  store i1 %v8_e8e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e8e4, label %dec_label_pc_e8ec, label %dec_label_pc_e8b8

dec_label_pc_e8ec:                                ; preds = %dec_label_pc_e8dc, %bb398, %dec_label_pc_e8c8, %dec_label_pc_e8c0, %dec_label_pc_e8b8, %dec_label_pc_e8a4, %dec_label_pc_e880, %dec_label_pc_e89c, %dec_label_pc_e894, %bb397
  %v0_e8f0 = phi i32 [ %v1_e874, %dec_label_pc_e8a4 ], [ %v1_e874, %dec_label_pc_e880 ], [ %v1_e874, %dec_label_pc_e89c ], [ %v1_e874, %dec_label_pc_e894 ], [ %v1_e874, %bb397 ], [ %v1_e8d4, %dec_label_pc_e8b8 ], [ %v1_e8d4, %dec_label_pc_e8c0 ], [ %v1_e8d4, %dec_label_pc_e8c8 ], [ %v1_e8d4, %bb398 ], [ %v1_e8d4, %dec_label_pc_e8dc ]
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_e8f0 = add i32 %v0_e8f0, 1
  store i32 %v1_e8f0, i32* @r7, align 4
  %v1_e8f4 = call i32 @function_f3cc(i32 4)
  store i32 %v2_ec50, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_e904 = call i32 @function_f308(i32 4, i32* nonnull %stack_var_-60)
  store i32 %v3_e904, i32* %r0.global-to-local, align 4
  %v3_e908 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_e908, i32* %r2.global-to-local, align 4
  store i32 %v3_e904, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e914 = load i32, i32* @r5, align 4
  %v1_e914 = add i32 %v0_e914, 4
  %v2_e914 = inttoptr i32 %v1_e914 to i32*
  %v3_e914 = load i32, i32* %v2_e914, align 4
  store i32 %v3_e914, i32* %r0.global-to-local, align 4
  %v4_e918 = call i32 @function_102c8(i32 %v3_e914, i32 %v3_e904, i32 %v3_e908, i32 16384)
  store i32 %v4_e918, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_155fc.479 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e928 = load i32, i32* @r5, align 4
  %v1_e928 = add i32 %v0_e928, 4
  %v2_e928 = inttoptr i32 %v1_e928 to i32*
  %v3_e928 = load i32, i32* %v2_e928, align 4
  store i32 %v3_e928, i32* %r0.global-to-local, align 4
  %v4_e92c = call i32 @function_102c8(i32 %v3_e928, i32 ptrtoint ([3 x i8]* @global_var_155fc.479 to i32), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_e934 = call i32 @function_f32c(i32 4)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_e93c = load i32, i32* @r5, align 4
  %v2_e93c = add i32 %v1_e93c, 12
  %v3_e93c = inttoptr i32 %v2_e93c to i32*
  store i32 8, i32* %v3_e93c, align 4
  br label %dec_label_pc_e774

dec_label_pc_e944:                                ; preds = %dec_label_pc_e654
  %v1_e944 = add i32 %v0_e654, 24
  %v2_e944 = inttoptr i32 %v1_e944 to i32*
  %v3_e944 = load i32, i32* %v2_e944, align 4
  store i32 %v3_e944, i32* %r2.global-to-local, align 4
  %v1_e948 = add i32 %v3_e944, -1
  store i32 %v1_e948, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e94c = icmp eq i32 %v1_e948, 0
  store i1 %v2_e94c, i1* %cpsr_z.global-to-local, align 1
  %tmp399 = icmp slt i32 %v1_e948, 1
  br i1 %tmp399, label %dec_label_pc_e5d8.backedge.thread, label %dec_label_pc_e954

dec_label_pc_e954:                                ; preds = %dec_label_pc_e944
  %v2_e954 = add i32 %v1_e948, %v0_e654
  store i32 %v2_e954, i32* %r3.global-to-local, align 4
  %v1_e958 = add i32 %v2_e954, 28
  %v2_e958 = inttoptr i32 %v1_e958 to i8*
  %v3_e958 = load i8, i8* %v2_e958, align 1
  %v4_e958 = zext i8 %v3_e958 to i32
  store i32 %v4_e958, i32* %r3.global-to-local, align 4
  %v2_e95c = icmp ugt i8 %v3_e958, 61
  store i1 %v2_e95c, i1* %cpsr_c.global-to-local, align 1
  %v7_e95c = icmp eq i8 %v3_e958, 62
  store i1 %v7_e95c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e95c, label %dec_label_pc_e9c0, label %bb400

bb400:                                            ; preds = %dec_label_pc_e954
  %v3_e960 = icmp ugt i8 %v3_e958, 57
  store i1 %v3_e960, i1* %cpsr_c.global-to-local, align 1
  %v8_e960 = icmp eq i8 %v3_e958, 58
  store i1 %v8_e960, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e960, label %dec_label_pc_e9c0, label %dec_label_pc_e968

dec_label_pc_e968:                                ; preds = %bb400
  %v2_e968 = icmp ugt i8 %v3_e958, 35
  store i1 %v2_e968, i1* %cpsr_c.global-to-local, align 1
  %v7_e968 = icmp eq i8 %v3_e958, 36
  store i1 %v7_e968, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e968, label %dec_label_pc_e9c0, label %dec_label_pc_e970

dec_label_pc_e970:                                ; preds = %dec_label_pc_e968
  %v2_e970 = icmp ugt i8 %v3_e958, 34
  store i1 %v2_e970, i1* %cpsr_c.global-to-local, align 1
  %v7_e970 = icmp eq i8 %v3_e958, 35
  store i1 %v7_e970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e970, label %dec_label_pc_e9c0, label %dec_label_pc_e978

dec_label_pc_e978:                                ; preds = %dec_label_pc_e970
  %v2_e978 = icmp ugt i8 %v3_e958, 36
  store i1 %v2_e978, i1* %cpsr_c.global-to-local, align 1
  %v7_e978 = icmp eq i8 %v3_e958, 37
  store i1 %v7_e978, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e978, label %dec_label_pc_e9c0, label %dec_label_pc_e9a8.preheader

dec_label_pc_e9a8.preheader:                      ; preds = %dec_label_pc_e978
  %v3_e97c = add i32 %v0_e654, 28
  %v2_e980 = add i32 %v3_e97c, %v3_e944
  store i32 %v2_e980, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e9a8

dec_label_pc_e98c:                                ; preds = %bb401
  %v2_e98c = icmp ugt i8 %v3_e9b0, 35
  store i1 %v2_e98c, i1* %cpsr_c.global-to-local, align 1
  %v7_e98c = icmp eq i8 %v3_e9b0, 36
  store i1 %v7_e98c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e98c, label %dec_label_pc_e9c0, label %dec_label_pc_e994

dec_label_pc_e994:                                ; preds = %dec_label_pc_e98c
  %v2_e994 = icmp ugt i8 %v3_e9b0, 34
  store i1 %v2_e994, i1* %cpsr_c.global-to-local, align 1
  %v7_e994 = icmp eq i8 %v3_e9b0, 35
  store i1 %v7_e994, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e994, label %dec_label_pc_e9c0, label %dec_label_pc_e99c

dec_label_pc_e99c:                                ; preds = %dec_label_pc_e994
  %v2_e99c = icmp ugt i8 %v3_e9b0, 36
  store i1 %v2_e99c, i1* %cpsr_c.global-to-local, align 1
  %v7_e99c = icmp eq i8 %v3_e9b0, 37
  store i1 %v7_e99c, i1* %cpsr_z.global-to-local, align 1
  %v1_e9a0 = add i32 %v0_e9a0, -1
  store i32 %v1_e9a0, i32* %r3.global-to-local, align 4
  br i1 %v7_e99c, label %dec_label_pc_e9c0, label %dec_label_pc_e9a8

dec_label_pc_e9a8:                                ; preds = %dec_label_pc_e9a8.preheader, %dec_label_pc_e99c
  %v0_e9a0 = phi i32 [ %v2_e980, %dec_label_pc_e9a8.preheader ], [ %v1_e9a0, %dec_label_pc_e99c ]
  %v0_e9a8 = phi i32 [ %v1_e948, %dec_label_pc_e9a8.preheader ], [ %v1_e9a8, %dec_label_pc_e99c ]
  %v1_e9a8 = add i32 %v0_e9a8, -1
  store i32 %v1_e9a8, i32* %r1.global-to-local, align 4
  %v2_e9a8 = icmp ne i32 %v0_e9a8, 0
  store i1 %v2_e9a8, i1* %cpsr_c.global-to-local, align 1
  %v7_e9a8 = icmp eq i32 %v0_e9a8, 1
  store i1 %v7_e9a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9a8, label %dec_label_pc_e5d8.backedge.thread528, label %dec_label_pc_e9b0

dec_label_pc_e9b0:                                ; preds = %dec_label_pc_e9a8
  %v1_e9b0 = add i32 %v0_e9a0, -2
  %v2_e9b0 = inttoptr i32 %v1_e9b0 to i8*
  %v3_e9b0 = load i8, i8* %v2_e9b0, align 1
  %v4_e9b0 = zext i8 %v3_e9b0 to i32
  store i32 %v4_e9b0, i32* %r2.global-to-local, align 4
  %v2_e9b4 = icmp ugt i8 %v3_e9b0, 61
  store i1 %v2_e9b4, i1* %cpsr_c.global-to-local, align 1
  %v7_e9b4 = icmp eq i8 %v3_e9b0, 62
  store i1 %v7_e9b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e9b4, label %dec_label_pc_e9c0, label %bb401

bb401:                                            ; preds = %dec_label_pc_e9b0
  %v3_e9b8 = icmp ugt i8 %v3_e9b0, 57
  store i1 %v3_e9b8, i1* %cpsr_c.global-to-local, align 1
  %v8_e9b8 = icmp eq i8 %v3_e9b0, 58
  store i1 %v8_e9b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e9b8, label %dec_label_pc_e9c0, label %dec_label_pc_e98c

dec_label_pc_e9c0:                                ; preds = %dec_label_pc_e9b0, %bb401, %dec_label_pc_e99c, %dec_label_pc_e994, %dec_label_pc_e98c, %dec_label_pc_e978, %dec_label_pc_e954, %dec_label_pc_e970, %dec_label_pc_e968, %bb400
  %v0_e9c4 = phi i32 [ %v1_e948, %dec_label_pc_e978 ], [ %v1_e948, %dec_label_pc_e954 ], [ %v1_e948, %dec_label_pc_e970 ], [ %v1_e948, %dec_label_pc_e968 ], [ %v1_e948, %bb400 ], [ %v1_e9a8, %dec_label_pc_e98c ], [ %v1_e9a8, %dec_label_pc_e994 ], [ %v1_e9a8, %dec_label_pc_e99c ], [ %v1_e9a8, %bb401 ], [ %v1_e9a8, %dec_label_pc_e9b0 ]
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_e9c4 = add i32 %v0_e9c4, 1
  store i32 %v1_e9c4, i32* @r7, align 4
  %v1_e9c8 = call i32 @function_f3cc(i32 6)
  store i32 %v2_ec50, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_e9d8 = call i32 @function_f308(i32 6, i32* nonnull %stack_var_-60)
  store i32 %v3_e9d8, i32* %r0.global-to-local, align 4
  %v3_e9dc = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_e9dc, i32* %r2.global-to-local, align 4
  store i32 %v3_e9d8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e9e8 = load i32, i32* @r5, align 4
  %v1_e9e8 = add i32 %v0_e9e8, 4
  %v2_e9e8 = inttoptr i32 %v1_e9e8 to i32*
  %v3_e9e8 = load i32, i32* %v2_e9e8, align 4
  store i32 %v3_e9e8, i32* %r0.global-to-local, align 4
  %v4_e9ec = call i32 @function_102c8(i32 %v3_e9e8, i32 %v3_e9d8, i32 %v3_e9dc, i32 16384)
  store i32 %v4_e9ec, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_155fc.479 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e9fc = load i32, i32* @r5, align 4
  %v1_e9fc = add i32 %v0_e9fc, 4
  %v2_e9fc = inttoptr i32 %v1_e9fc to i32*
  %v3_e9fc = load i32, i32* %v2_e9fc, align 4
  store i32 %v3_e9fc, i32* %r0.global-to-local, align 4
  %v4_ea00 = call i32 @function_102c8(i32 %v3_e9fc, i32 ptrtoint ([3 x i8]* @global_var_155fc.479 to i32), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_ea08 = call i32 @function_f32c(i32 6)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_ea10 = load i32, i32* @r5, align 4
  %v2_ea10 = add i32 %v1_ea10, 12
  %v3_ea10 = inttoptr i32 %v2_ea10 to i32*
  store i32 7, i32* %v3_ea10, align 4
  br label %dec_label_pc_e774

dec_label_pc_ea18:                                ; preds = %dec_label_pc_e654
  %v1_ea18 = add i32 %v0_e654, 24
  %v2_ea18 = inttoptr i32 %v1_ea18 to i32*
  %v3_ea18 = load i32, i32* %v2_ea18, align 4
  store i32 %v3_ea18, i32* %r2.global-to-local, align 4
  %v1_ea1c = add i32 %v3_ea18, -1
  store i32 %v1_ea1c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ea20 = icmp eq i32 %v1_ea1c, 0
  store i1 %v2_ea20, i1* %cpsr_z.global-to-local, align 1
  %tmp402 = icmp slt i32 %v1_ea1c, 1
  br i1 %tmp402, label %dec_label_pc_e5d8.backedge.thread, label %dec_label_pc_ea28

dec_label_pc_ea28:                                ; preds = %dec_label_pc_ea18
  %v2_ea28 = add i32 %v1_ea1c, %v0_e654
  store i32 %v2_ea28, i32* %r3.global-to-local, align 4
  %v1_ea2c = add i32 %v2_ea28, 28
  %v2_ea2c = inttoptr i32 %v1_ea2c to i8*
  %v3_ea2c = load i8, i8* %v2_ea2c, align 1
  %v4_ea2c = zext i8 %v3_ea2c to i32
  store i32 %v4_ea2c, i32* %r3.global-to-local, align 4
  %v2_ea30 = icmp ugt i8 %v3_ea2c, 61
  store i1 %v2_ea30, i1* %cpsr_c.global-to-local, align 1
  %v7_ea30 = icmp eq i8 %v3_ea2c, 62
  store i1 %v7_ea30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea30, label %dec_label_pc_ea94, label %bb403

bb403:                                            ; preds = %dec_label_pc_ea28
  %v3_ea34 = icmp ugt i8 %v3_ea2c, 57
  store i1 %v3_ea34, i1* %cpsr_c.global-to-local, align 1
  %v8_ea34 = icmp eq i8 %v3_ea2c, 58
  store i1 %v8_ea34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea34, label %dec_label_pc_ea94, label %dec_label_pc_ea3c

dec_label_pc_ea3c:                                ; preds = %bb403
  %v2_ea3c = icmp ugt i8 %v3_ea2c, 35
  store i1 %v2_ea3c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea3c = icmp eq i8 %v3_ea2c, 36
  store i1 %v7_ea3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea3c, label %dec_label_pc_ea94, label %dec_label_pc_ea44

dec_label_pc_ea44:                                ; preds = %dec_label_pc_ea3c
  %v2_ea44 = icmp ugt i8 %v3_ea2c, 34
  store i1 %v2_ea44, i1* %cpsr_c.global-to-local, align 1
  %v7_ea44 = icmp eq i8 %v3_ea2c, 35
  store i1 %v7_ea44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea44, label %dec_label_pc_ea94, label %dec_label_pc_ea4c

dec_label_pc_ea4c:                                ; preds = %dec_label_pc_ea44
  %v2_ea4c = icmp ugt i8 %v3_ea2c, 36
  store i1 %v2_ea4c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea4c = icmp eq i8 %v3_ea2c, 37
  store i1 %v7_ea4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea4c, label %dec_label_pc_ea94, label %dec_label_pc_ea7c.preheader

dec_label_pc_ea7c.preheader:                      ; preds = %dec_label_pc_ea4c
  %v3_ea50 = add i32 %v0_e654, 28
  %v2_ea54 = add i32 %v3_ea50, %v3_ea18
  store i32 %v2_ea54, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ea7c

dec_label_pc_ea60:                                ; preds = %bb404
  %v2_ea60 = icmp ugt i8 %v3_ea84, 35
  store i1 %v2_ea60, i1* %cpsr_c.global-to-local, align 1
  %v7_ea60 = icmp eq i8 %v3_ea84, 36
  store i1 %v7_ea60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea60, label %dec_label_pc_ea94, label %dec_label_pc_ea68

dec_label_pc_ea68:                                ; preds = %dec_label_pc_ea60
  %v2_ea68 = icmp ugt i8 %v3_ea84, 34
  store i1 %v2_ea68, i1* %cpsr_c.global-to-local, align 1
  %v7_ea68 = icmp eq i8 %v3_ea84, 35
  store i1 %v7_ea68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea68, label %dec_label_pc_ea94, label %dec_label_pc_ea70

dec_label_pc_ea70:                                ; preds = %dec_label_pc_ea68
  %v2_ea70 = icmp ugt i8 %v3_ea84, 36
  store i1 %v2_ea70, i1* %cpsr_c.global-to-local, align 1
  %v7_ea70 = icmp eq i8 %v3_ea84, 37
  store i1 %v7_ea70, i1* %cpsr_z.global-to-local, align 1
  %v1_ea74 = add i32 %v0_ea74, -1
  store i32 %v1_ea74, i32* %r3.global-to-local, align 4
  br i1 %v7_ea70, label %dec_label_pc_ea94, label %dec_label_pc_ea7c

dec_label_pc_ea7c:                                ; preds = %dec_label_pc_ea7c.preheader, %dec_label_pc_ea70
  %v0_ea74 = phi i32 [ %v2_ea54, %dec_label_pc_ea7c.preheader ], [ %v1_ea74, %dec_label_pc_ea70 ]
  %v0_ea7c = phi i32 [ %v1_ea1c, %dec_label_pc_ea7c.preheader ], [ %v1_ea7c, %dec_label_pc_ea70 ]
  %v1_ea7c = add i32 %v0_ea7c, -1
  store i32 %v1_ea7c, i32* %r1.global-to-local, align 4
  %v2_ea7c = icmp ne i32 %v0_ea7c, 0
  store i1 %v2_ea7c, i1* %cpsr_c.global-to-local, align 1
  %v7_ea7c = icmp eq i32 %v0_ea7c, 1
  store i1 %v7_ea7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea7c, label %dec_label_pc_e5d8.backedge.thread528, label %dec_label_pc_ea84

dec_label_pc_ea84:                                ; preds = %dec_label_pc_ea7c
  %v1_ea84 = add i32 %v0_ea74, -2
  %v2_ea84 = inttoptr i32 %v1_ea84 to i8*
  %v3_ea84 = load i8, i8* %v2_ea84, align 1
  %v4_ea84 = zext i8 %v3_ea84 to i32
  store i32 %v4_ea84, i32* %r2.global-to-local, align 4
  %v2_ea88 = icmp ugt i8 %v3_ea84, 61
  store i1 %v2_ea88, i1* %cpsr_c.global-to-local, align 1
  %v7_ea88 = icmp eq i8 %v3_ea84, 62
  store i1 %v7_ea88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ea88, label %dec_label_pc_ea94, label %bb404

bb404:                                            ; preds = %dec_label_pc_ea84
  %v3_ea8c = icmp ugt i8 %v3_ea84, 57
  store i1 %v3_ea8c, i1* %cpsr_c.global-to-local, align 1
  %v8_ea8c = icmp eq i8 %v3_ea84, 58
  store i1 %v8_ea8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ea8c, label %dec_label_pc_ea94, label %dec_label_pc_ea60

dec_label_pc_ea94:                                ; preds = %dec_label_pc_ea84, %bb404, %dec_label_pc_ea70, %dec_label_pc_ea68, %dec_label_pc_ea60, %dec_label_pc_ea4c, %dec_label_pc_ea28, %dec_label_pc_ea44, %dec_label_pc_ea3c, %bb403
  %v0_ea98 = phi i32 [ %v1_ea1c, %dec_label_pc_ea4c ], [ %v1_ea1c, %dec_label_pc_ea28 ], [ %v1_ea1c, %dec_label_pc_ea44 ], [ %v1_ea1c, %dec_label_pc_ea3c ], [ %v1_ea1c, %bb403 ], [ %v1_ea7c, %dec_label_pc_ea60 ], [ %v1_ea7c, %dec_label_pc_ea68 ], [ %v1_ea7c, %dec_label_pc_ea70 ], [ %v1_ea7c, %bb404 ], [ %v1_ea7c, %dec_label_pc_ea84 ]
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_ea98 = add i32 %v0_ea98, 1
  store i32 %v1_ea98, i32* @r7, align 4
  %v1_ea9c = call i32 @function_f3cc(i32 7)
  store i32 %v2_ec50, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_eaac = call i32 @function_f308(i32 7, i32* nonnull %stack_var_-60)
  store i32 %v3_eaac, i32* %r0.global-to-local, align 4
  %v3_eab0 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_eab0, i32* %r2.global-to-local, align 4
  store i32 %v3_eaac, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_eabc = load i32, i32* @r5, align 4
  %v1_eabc = add i32 %v0_eabc, 4
  %v2_eabc = inttoptr i32 %v1_eabc to i32*
  %v3_eabc = load i32, i32* %v2_eabc, align 4
  store i32 %v3_eabc, i32* %r0.global-to-local, align 4
  %v4_eac0 = call i32 @function_102c8(i32 %v3_eabc, i32 %v3_eaac, i32 %v3_eab0, i32 16384)
  store i32 %v4_eac0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_155fc.479 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ead0 = load i32, i32* @r5, align 4
  %v1_ead0 = add i32 %v0_ead0, 4
  %v2_ead0 = inttoptr i32 %v1_ead0 to i32*
  %v3_ead0 = load i32, i32* %v2_ead0, align 4
  store i32 %v3_ead0, i32* %r0.global-to-local, align 4
  %v4_ead4 = call i32 @function_102c8(i32 %v3_ead0, i32 ptrtoint ([3 x i8]* @global_var_155fc.479 to i32), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_eadc = call i32 @function_f32c(i32 7)
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_eae4 = load i32, i32* @r5, align 4
  %v2_eae4 = add i32 %v1_eae4, 12
  %v3_eae4 = inttoptr i32 %v2_eae4 to i32*
  store i32 9, i32* %v3_eae4, align 4
  br label %dec_label_pc_e774

dec_label_pc_eaec:                                ; preds = %dec_label_pc_e654
  %v1_eaec = add i32 %v0_e654, 24
  %v2_eaec = inttoptr i32 %v1_eaec to i32*
  %v3_eaec = load i32, i32* %v2_eaec, align 4
  store i32 %v3_eaec, i32* %r2.global-to-local, align 4
  %v1_eaf0 = add i32 %v3_eaec, -1
  store i32 %v1_eaf0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eaf4 = icmp eq i32 %v1_eaf0, 0
  store i1 %v2_eaf4, i1* %cpsr_z.global-to-local, align 1
  %tmp405 = icmp slt i32 %v1_eaf0, 1
  br i1 %tmp405, label %dec_label_pc_e5d8.backedge.thread, label %dec_label_pc_eafc

dec_label_pc_eafc:                                ; preds = %dec_label_pc_eaec
  %v2_eafc = add i32 %v1_eaf0, %v0_e654
  store i32 %v2_eafc, i32* %r3.global-to-local, align 4
  %v1_eb00 = add i32 %v2_eafc, 28
  %v2_eb00 = inttoptr i32 %v1_eb00 to i8*
  %v3_eb00 = load i8, i8* %v2_eb00, align 1
  %v4_eb00 = zext i8 %v3_eb00 to i32
  store i32 %v4_eb00, i32* %r3.global-to-local, align 4
  %v2_eb04 = icmp ugt i8 %v3_eb00, 61
  store i1 %v2_eb04, i1* %cpsr_c.global-to-local, align 1
  %v7_eb04 = icmp eq i8 %v3_eb00, 62
  store i1 %v7_eb04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb04, label %dec_label_pc_eb68, label %bb406

bb406:                                            ; preds = %dec_label_pc_eafc
  %v3_eb08 = icmp ugt i8 %v3_eb00, 57
  store i1 %v3_eb08, i1* %cpsr_c.global-to-local, align 1
  %v8_eb08 = icmp eq i8 %v3_eb00, 58
  store i1 %v8_eb08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eb08, label %dec_label_pc_eb68, label %dec_label_pc_eb10

dec_label_pc_eb10:                                ; preds = %bb406
  %v2_eb10 = icmp ugt i8 %v3_eb00, 35
  store i1 %v2_eb10, i1* %cpsr_c.global-to-local, align 1
  %v7_eb10 = icmp eq i8 %v3_eb00, 36
  store i1 %v7_eb10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb10, label %dec_label_pc_eb68, label %dec_label_pc_eb18

dec_label_pc_eb18:                                ; preds = %dec_label_pc_eb10
  %v2_eb18 = icmp ugt i8 %v3_eb00, 34
  store i1 %v2_eb18, i1* %cpsr_c.global-to-local, align 1
  %v7_eb18 = icmp eq i8 %v3_eb00, 35
  store i1 %v7_eb18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb18, label %dec_label_pc_eb68, label %dec_label_pc_eb20

dec_label_pc_eb20:                                ; preds = %dec_label_pc_eb18
  %v2_eb20 = icmp ugt i8 %v3_eb00, 36
  store i1 %v2_eb20, i1* %cpsr_c.global-to-local, align 1
  %v7_eb20 = icmp eq i8 %v3_eb00, 37
  store i1 %v7_eb20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb20, label %dec_label_pc_eb68, label %dec_label_pc_eb50.preheader

dec_label_pc_eb50.preheader:                      ; preds = %dec_label_pc_eb20
  %v3_eb24 = add i32 %v0_e654, 28
  %v2_eb28 = add i32 %v3_eb24, %v3_eaec
  store i32 %v2_eb28, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_eb50

dec_label_pc_eb34:                                ; preds = %bb407
  %v2_eb34 = icmp ugt i8 %v3_eb58, 35
  store i1 %v2_eb34, i1* %cpsr_c.global-to-local, align 1
  %v7_eb34 = icmp eq i8 %v3_eb58, 36
  store i1 %v7_eb34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb34, label %dec_label_pc_eb68, label %dec_label_pc_eb3c

dec_label_pc_eb3c:                                ; preds = %dec_label_pc_eb34
  %v2_eb3c = icmp ugt i8 %v3_eb58, 34
  store i1 %v2_eb3c, i1* %cpsr_c.global-to-local, align 1
  %v7_eb3c = icmp eq i8 %v3_eb58, 35
  store i1 %v7_eb3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb3c, label %dec_label_pc_eb68, label %dec_label_pc_eb44

dec_label_pc_eb44:                                ; preds = %dec_label_pc_eb3c
  %v2_eb44 = icmp ugt i8 %v3_eb58, 36
  store i1 %v2_eb44, i1* %cpsr_c.global-to-local, align 1
  %v7_eb44 = icmp eq i8 %v3_eb58, 37
  store i1 %v7_eb44, i1* %cpsr_z.global-to-local, align 1
  %v1_eb48 = add i32 %v0_eb48, -1
  store i32 %v1_eb48, i32* %r3.global-to-local, align 4
  br i1 %v7_eb44, label %dec_label_pc_eb68, label %dec_label_pc_eb50

dec_label_pc_eb50:                                ; preds = %dec_label_pc_eb50.preheader, %dec_label_pc_eb44
  %v0_eb48 = phi i32 [ %v2_eb28, %dec_label_pc_eb50.preheader ], [ %v1_eb48, %dec_label_pc_eb44 ]
  %v0_eb50 = phi i32 [ %v1_eaf0, %dec_label_pc_eb50.preheader ], [ %v1_eb50, %dec_label_pc_eb44 ]
  %v1_eb50 = add i32 %v0_eb50, -1
  store i32 %v1_eb50, i32* %r1.global-to-local, align 4
  %v2_eb50 = icmp ne i32 %v0_eb50, 0
  store i1 %v2_eb50, i1* %cpsr_c.global-to-local, align 1
  %v7_eb50 = icmp eq i32 %v0_eb50, 1
  store i1 %v7_eb50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb50, label %dec_label_pc_e5d8.backedge.thread528, label %dec_label_pc_eb58

dec_label_pc_eb58:                                ; preds = %dec_label_pc_eb50
  %v1_eb58 = add i32 %v0_eb48, -2
  %v2_eb58 = inttoptr i32 %v1_eb58 to i8*
  %v3_eb58 = load i8, i8* %v2_eb58, align 1
  %v4_eb58 = zext i8 %v3_eb58 to i32
  store i32 %v4_eb58, i32* %r2.global-to-local, align 4
  %v2_eb5c = icmp ugt i8 %v3_eb58, 61
  store i1 %v2_eb5c, i1* %cpsr_c.global-to-local, align 1
  %v7_eb5c = icmp eq i8 %v3_eb58, 62
  store i1 %v7_eb5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eb5c, label %dec_label_pc_eb68, label %bb407

bb407:                                            ; preds = %dec_label_pc_eb58
  %v3_eb60 = icmp ugt i8 %v3_eb58, 57
  store i1 %v3_eb60, i1* %cpsr_c.global-to-local, align 1
  %v8_eb60 = icmp eq i8 %v3_eb58, 58
  store i1 %v8_eb60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eb60, label %dec_label_pc_eb68, label %dec_label_pc_eb34

dec_label_pc_eb68:                                ; preds = %dec_label_pc_eb58, %bb407, %dec_label_pc_eb44, %dec_label_pc_eb3c, %dec_label_pc_eb34, %dec_label_pc_eb20, %dec_label_pc_eafc, %dec_label_pc_eb18, %dec_label_pc_eb10, %bb406
  %v0_eb6c = phi i32 [ %v1_eaf0, %dec_label_pc_eb20 ], [ %v1_eaf0, %dec_label_pc_eafc ], [ %v1_eaf0, %dec_label_pc_eb18 ], [ %v1_eaf0, %dec_label_pc_eb10 ], [ %v1_eaf0, %bb406 ], [ %v1_eb50, %dec_label_pc_eb34 ], [ %v1_eb50, %dec_label_pc_eb3c ], [ %v1_eb50, %dec_label_pc_eb44 ], [ %v1_eb50, %bb407 ], [ %v1_eb50, %dec_label_pc_eb58 ]
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_eb6c = add i32 %v0_eb6c, 1
  store i32 %v1_eb6c, i32* @r7, align 4
  %v1_eb70 = call i32 @function_f3cc(i32 5)
  store i32 %v2_ec50, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_eb80 = call i32 @function_f308(i32 5, i32* nonnull %stack_var_-60)
  store i32 %v3_eb80, i32* %r0.global-to-local, align 4
  %v3_eb84 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_eb84, i32* %r2.global-to-local, align 4
  store i32 %v3_eb80, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_eb90 = load i32, i32* @r5, align 4
  %v1_eb90 = add i32 %v0_eb90, 4
  %v2_eb90 = inttoptr i32 %v1_eb90 to i32*
  %v3_eb90 = load i32, i32* %v2_eb90, align 4
  store i32 %v3_eb90, i32* %r0.global-to-local, align 4
  %v4_eb94 = call i32 @function_102c8(i32 %v3_eb90, i32 %v3_eb80, i32 %v3_eb84, i32 16384)
  store i32 %v4_eb94, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_155fc.479 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_eba4 = load i32, i32* @r5, align 4
  %v1_eba4 = add i32 %v0_eba4, 4
  %v2_eba4 = inttoptr i32 %v1_eba4 to i32*
  %v3_eba4 = load i32, i32* %v2_eba4, align 4
  store i32 %v3_eba4, i32* %r0.global-to-local, align 4
  %v4_eba8 = call i32 @function_102c8(i32 %v3_eba4, i32 ptrtoint ([3 x i8]* @global_var_155fc.479 to i32), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_ebb0 = call i32 @function_f32c(i32 5)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_ebb8 = load i32, i32* @r5, align 4
  %v2_ebb8 = add i32 %v1_ebb8, 12
  %v3_ebb8 = inttoptr i32 %v2_ebb8 to i32*
  store i32 6, i32* %v3_ebb8, align 4
  br label %dec_label_pc_e774

dec_label_pc_ebc0:                                ; preds = %dec_label_pc_e654
  %v1_ebc0 = add i32 %v0_e654, 24
  %v2_ebc0 = inttoptr i32 %v1_ebc0 to i32*
  %v3_ebc0 = load i32, i32* %v2_ebc0, align 4
  store i32 %v3_ebc0, i32* %r2.global-to-local, align 4
  %v1_ebc4 = add i32 %v3_ebc0, -1
  store i32 %v1_ebc4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ebc8 = icmp eq i32 %v1_ebc4, 0
  store i1 %v2_ebc8, i1* %cpsr_z.global-to-local, align 1
  %tmp408 = icmp slt i32 %v1_ebc4, 1
  br i1 %tmp408, label %dec_label_pc_ec3c, label %dec_label_pc_ebd0

dec_label_pc_ebd0:                                ; preds = %dec_label_pc_ebc0
  %v2_ebd0 = add i32 %v1_ebc4, %v0_e654
  store i32 %v2_ebd0, i32* %r3.global-to-local, align 4
  %v1_ebd4 = add i32 %v2_ebd0, 28
  %v2_ebd4 = inttoptr i32 %v1_ebd4 to i8*
  %v3_ebd4 = load i8, i8* %v2_ebd4, align 1
  %v4_ebd4 = zext i8 %v3_ebd4 to i32
  store i32 %v4_ebd4, i32* %r3.global-to-local, align 4
  %v2_ebd8 = icmp ugt i8 %v3_ebd4, 61
  store i1 %v2_ebd8, i1* %cpsr_c.global-to-local, align 1
  %v7_ebd8 = icmp eq i8 %v3_ebd4, 62
  store i1 %v7_ebd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebd8, label %dec_label_pc_eef4, label %bb409

bb409:                                            ; preds = %dec_label_pc_ebd0
  %v3_ebdc = icmp ugt i8 %v3_ebd4, 57
  store i1 %v3_ebdc, i1* %cpsr_c.global-to-local, align 1
  %v8_ebdc = icmp eq i8 %v3_ebd4, 58
  store i1 %v8_ebdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ebdc, label %dec_label_pc_eef4, label %dec_label_pc_ebe4

dec_label_pc_ebe4:                                ; preds = %bb409
  %v2_ebe4 = icmp ugt i8 %v3_ebd4, 35
  store i1 %v2_ebe4, i1* %cpsr_c.global-to-local, align 1
  %v7_ebe4 = icmp eq i8 %v3_ebd4, 36
  store i1 %v7_ebe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebe4, label %dec_label_pc_eef4, label %dec_label_pc_ebec

dec_label_pc_ebec:                                ; preds = %dec_label_pc_ebe4
  %v2_ebec = icmp ugt i8 %v3_ebd4, 34
  store i1 %v2_ebec, i1* %cpsr_c.global-to-local, align 1
  %v7_ebec = icmp eq i8 %v3_ebd4, 35
  store i1 %v7_ebec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebec, label %dec_label_pc_eef4, label %dec_label_pc_ebf4

dec_label_pc_ebf4:                                ; preds = %dec_label_pc_ebec
  %v2_ebf4 = icmp ugt i8 %v3_ebd4, 36
  store i1 %v2_ebf4, i1* %cpsr_c.global-to-local, align 1
  %v7_ebf4 = icmp eq i8 %v3_ebd4, 37
  store i1 %v7_ebf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ebf4, label %dec_label_pc_eef4, label %dec_label_pc_ec34.preheader

dec_label_pc_ec34.preheader:                      ; preds = %dec_label_pc_ebf4
  %v3_ebf8 = add i32 %v0_e654, 28
  %v2_ebfc = add i32 %v3_ebf8, %v3_ebc0
  store i32 %v2_ebfc, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ec34

dec_label_pc_ec08:                                ; preds = %dec_label_pc_ec34
  %v1_ec08 = add i32 %v0_ec2c, -2
  %v2_ec08 = inttoptr i32 %v1_ec08 to i8*
  %v3_ec08 = load i8, i8* %v2_ec08, align 1
  %v4_ec08 = zext i8 %v3_ec08 to i32
  store i32 %v4_ec08, i32* %r2.global-to-local, align 4
  %v2_ec0c = icmp ugt i8 %v3_ec08, 61
  store i1 %v2_ec0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ec0c = icmp eq i8 %v3_ec08, 62
  store i1 %v7_ec0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec0c, label %dec_label_pc_eef4, label %bb410

bb410:                                            ; preds = %dec_label_pc_ec08
  %v3_ec10 = icmp ugt i8 %v3_ec08, 57
  store i1 %v3_ec10, i1* %cpsr_c.global-to-local, align 1
  %v8_ec10 = icmp eq i8 %v3_ec08, 58
  store i1 %v8_ec10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ec10, label %dec_label_pc_eef4, label %dec_label_pc_ec18

dec_label_pc_ec18:                                ; preds = %bb410
  %v2_ec18 = icmp ugt i8 %v3_ec08, 35
  store i1 %v2_ec18, i1* %cpsr_c.global-to-local, align 1
  %v7_ec18 = icmp eq i8 %v3_ec08, 36
  store i1 %v7_ec18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec18, label %dec_label_pc_eef4, label %dec_label_pc_ec20

dec_label_pc_ec20:                                ; preds = %dec_label_pc_ec18
  %v2_ec20 = icmp ugt i8 %v3_ec08, 34
  store i1 %v2_ec20, i1* %cpsr_c.global-to-local, align 1
  %v7_ec20 = icmp eq i8 %v3_ec08, 35
  store i1 %v7_ec20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec20, label %dec_label_pc_eef4, label %dec_label_pc_ec28

dec_label_pc_ec28:                                ; preds = %dec_label_pc_ec20
  %v2_ec28 = icmp ugt i8 %v3_ec08, 36
  store i1 %v2_ec28, i1* %cpsr_c.global-to-local, align 1
  %v7_ec28 = icmp eq i8 %v3_ec08, 37
  store i1 %v7_ec28, i1* %cpsr_z.global-to-local, align 1
  %v1_ec2c = add i32 %v0_ec2c, -1
  store i32 %v1_ec2c, i32* %r3.global-to-local, align 4
  br i1 %v7_ec28, label %dec_label_pc_eef4, label %dec_label_pc_ec34

dec_label_pc_ec34:                                ; preds = %dec_label_pc_ec34.preheader, %dec_label_pc_ec28
  %v0_ec2c = phi i32 [ %v2_ebfc, %dec_label_pc_ec34.preheader ], [ %v1_ec2c, %dec_label_pc_ec28 ]
  %v0_ec34 = phi i32 [ %v1_ebc4, %dec_label_pc_ec34.preheader ], [ %v1_ec34, %dec_label_pc_ec28 ]
  %v1_ec34 = add i32 %v0_ec34, -1
  store i32 %v1_ec34, i32* %r0.global-to-local, align 4
  %v2_ec34 = icmp ne i32 %v0_ec34, 0
  store i1 %v2_ec34, i1* %cpsr_c.global-to-local, align 1
  %v7_ec34 = icmp eq i32 %v0_ec34, 1
  store i1 %v7_ec34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec34, label %dec_label_pc_ec3c, label %dec_label_pc_ec08

dec_label_pc_ec3c:                                ; preds = %dec_label_pc_ec34, %dec_label_pc_ebc0
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_ec40 = call i32 @function_f3cc(i32 12)
  store i32 13, i32* %r0.global-to-local, align 4
  %v1_ec48 = call i32 @function_f3cc(i32 13)
  store i32 %v2_ec50, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v3_ec58 = call i32 @function_f308(i32 12, i32* nonnull %stack_var_-60)
  store i32 %v3_ec58, i32* @r4, align 4
  store i32 %v2_ec64, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r0.global-to-local, align 4
  %v3_ec6c = call i32 @function_f308(i32 13, i32* %v2_ec6c)
  %v3_ec70 = load i32, i32* %stack_var_-60, align 4
  %sext = mul i32 %v3_ec6c, 16777216
  %v1_ec74 = sdiv i32 %sext, 16777216
  store i32 %v1_ec74, i32* @r6, align 4
  %v0_ec78 = load i32, i32* @r4, align 4
  store i32 %v0_ec78, i32* %r2.global-to-local, align 4
  %v1_ec7c = add i32 %v3_ec70, -1
  store i32 %v1_ec7c, i32* %r3.global-to-local, align 4
  %v0_ec80 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_ec80, i32* %r0.global-to-local, align 4
  %v0_ec84 = load i32, i32* @r5, align 4
  %v1_ec84 = add i32 %v0_ec84, 24
  %v2_ec84 = inttoptr i32 %v1_ec84 to i32*
  %v3_ec84 = load i32, i32* %v2_ec84, align 4
  store i32 %v3_ec84, i32* %r1.global-to-local, align 4
  %v4_ec88 = call i32 @function_f840(i32 %v0_ec80, i32 %v3_ec84, i32 %v0_ec78, i32 %v1_ec7c)
  store i32 %v4_ec88, i32* %r0.global-to-local, align 4
  %v2_ec8c = icmp eq i32 %v4_ec88, -1
  store i1 %v2_ec8c, i1* %cpsr_c.global-to-local, align 1
  %v7_ec8c = icmp eq i32 %v4_ec88, -1
  store i1 %v7_ec8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ec8c, label %dec_label_pc_f030, label %dec_label_pc_ec9c

dec_label_pc_ec9c:                                ; preds = %dec_label_pc_f030, %dec_label_pc_ec3c
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_eca0 = call i32 @function_f32c(i32 12)
  store i32 13, i32* %r0.global-to-local, align 4
  %v1_eca8 = call i32 @function_f32c(i32 13)
  store i32 %v1_eca8, i32* %r0.global-to-local, align 4
  %v0_ecac = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ecac = icmp eq i32 %v0_ecac, 0
  store i1 %v2_ecac, i1* %cpsr_z.global-to-local, align 1
  %tmp411 = icmp slt i32 %v0_ecac, 1
  br i1 %tmp411, label %dec_label_pc_eda0, label %dec_label_pc_ec9c.dec_label_pc_eef8_crit_edge

dec_label_pc_ec9c.dec_label_pc_eef8_crit_edge:    ; preds = %dec_label_pc_ec9c
  %v0_eef8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_eef8

dec_label_pc_ecb8:                                ; preds = %dec_label_pc_e654
  %v1_ecb8 = add i32 %v0_e654, 24
  %v2_ecb8 = inttoptr i32 %v1_ecb8 to i32*
  %v3_ecb8 = load i32, i32* %v2_ecb8, align 4
  store i32 %v3_ecb8, i32* %r2.global-to-local, align 4
  %v1_ecbc = add i32 %v3_ecb8, -1
  store i32 %v1_ecbc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ecc0 = icmp eq i32 %v1_ecbc, 0
  store i1 %v2_ecc0, i1* %cpsr_z.global-to-local, align 1
  %tmp412 = icmp slt i32 %v1_ecbc, 1
  br i1 %tmp412, label %dec_label_pc_ed24, label %dec_label_pc_ecc8

dec_label_pc_ecc8:                                ; preds = %dec_label_pc_ecb8
  %v2_ecc8 = add i32 %v1_ecbc, %v0_e654
  store i32 %v2_ecc8, i32* %r3.global-to-local, align 4
  %v1_eccc = add i32 %v2_ecc8, 28
  %v2_eccc = inttoptr i32 %v1_eccc to i8*
  %v3_eccc = load i8, i8* %v2_eccc, align 1
  %v4_eccc = zext i8 %v3_eccc to i32
  store i32 %v4_eccc, i32* %r3.global-to-local, align 4
  %v2_ecd0 = icmp ugt i8 %v3_eccc, 61
  store i1 %v2_ecd0, i1* %cpsr_c.global-to-local, align 1
  %v7_ecd0 = icmp eq i8 %v3_eccc, 62
  store i1 %v7_ecd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ecd0, label %dec_label_pc_eeec, label %bb413

bb413:                                            ; preds = %dec_label_pc_ecc8
  %v3_ecd4 = icmp ugt i8 %v3_eccc, 57
  store i1 %v3_ecd4, i1* %cpsr_c.global-to-local, align 1
  %v8_ecd4 = icmp eq i8 %v3_eccc, 58
  store i1 %v8_ecd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ecd4, label %dec_label_pc_eeec, label %dec_label_pc_ecdc

dec_label_pc_ecdc:                                ; preds = %bb413
  %v2_ecdc = icmp ugt i8 %v3_eccc, 35
  store i1 %v2_ecdc, i1* %cpsr_c.global-to-local, align 1
  %v7_ecdc = icmp eq i8 %v3_eccc, 36
  store i1 %v7_ecdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ecdc, label %dec_label_pc_eeec, label %dec_label_pc_ece4

dec_label_pc_ece4:                                ; preds = %dec_label_pc_ecdc
  %v2_ece4 = icmp ugt i8 %v3_eccc, 34
  store i1 %v2_ece4, i1* %cpsr_c.global-to-local, align 1
  %v7_ece4 = icmp eq i8 %v3_eccc, 35
  store i1 %v7_ece4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ece4, label %dec_label_pc_eeec, label %dec_label_pc_ed1c.preheader

dec_label_pc_ed1c.preheader:                      ; preds = %dec_label_pc_ece4
  %v3_ece8 = add i32 %v0_e654, 28
  %v2_ecec = add i32 %v3_ece8, %v3_ecb8
  store i32 %v2_ecec, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ed1c

dec_label_pc_ecf8:                                ; preds = %dec_label_pc_ed1c
  %v1_ecf8 = add i32 %v0_ed14, -2
  %v2_ecf8 = inttoptr i32 %v1_ecf8 to i8*
  %v3_ecf8 = load i8, i8* %v2_ecf8, align 1
  %v4_ecf8 = zext i8 %v3_ecf8 to i32
  store i32 %v4_ecf8, i32* %r2.global-to-local, align 4
  %v2_ecfc = icmp ugt i8 %v3_ecf8, 61
  store i1 %v2_ecfc, i1* %cpsr_c.global-to-local, align 1
  %v7_ecfc = icmp eq i8 %v3_ecf8, 62
  store i1 %v7_ecfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ecfc, label %dec_label_pc_eeec, label %bb414

bb414:                                            ; preds = %dec_label_pc_ecf8
  %v3_ed00 = icmp ugt i8 %v3_ecf8, 57
  store i1 %v3_ed00, i1* %cpsr_c.global-to-local, align 1
  %v8_ed00 = icmp eq i8 %v3_ecf8, 58
  store i1 %v8_ed00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ed00, label %dec_label_pc_eeec, label %dec_label_pc_ed08

dec_label_pc_ed08:                                ; preds = %bb414
  %v2_ed08 = icmp ugt i8 %v3_ecf8, 35
  store i1 %v2_ed08, i1* %cpsr_c.global-to-local, align 1
  %v7_ed08 = icmp eq i8 %v3_ecf8, 36
  store i1 %v7_ed08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed08, label %dec_label_pc_eeec, label %dec_label_pc_ed10

dec_label_pc_ed10:                                ; preds = %dec_label_pc_ed08
  %v2_ed10 = icmp ugt i8 %v3_ecf8, 34
  store i1 %v2_ed10, i1* %cpsr_c.global-to-local, align 1
  %v7_ed10 = icmp eq i8 %v3_ecf8, 35
  store i1 %v7_ed10, i1* %cpsr_z.global-to-local, align 1
  %v1_ed14 = add i32 %v0_ed14, -1
  store i32 %v1_ed14, i32* %r3.global-to-local, align 4
  br i1 %v7_ed10, label %dec_label_pc_eeec, label %dec_label_pc_ed1c

dec_label_pc_ed1c:                                ; preds = %dec_label_pc_ed1c.preheader, %dec_label_pc_ed10
  %v0_ed14 = phi i32 [ %v2_ecec, %dec_label_pc_ed1c.preheader ], [ %v1_ed14, %dec_label_pc_ed10 ]
  %v0_ed1c = phi i32 [ %v1_ecbc, %dec_label_pc_ed1c.preheader ], [ %v1_ed1c, %dec_label_pc_ed10 ]
  %v1_ed1c = add i32 %v0_ed1c, -1
  store i32 %v1_ed1c, i32* %r0.global-to-local, align 4
  %v2_ed1c = icmp ne i32 %v0_ed1c, 0
  store i1 %v2_ed1c, i1* %cpsr_c.global-to-local, align 1
  %v7_ed1c = icmp eq i32 %v0_ed1c, 1
  store i1 %v7_ed1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed1c, label %dec_label_pc_ed24, label %dec_label_pc_ecf8

dec_label_pc_ed24:                                ; preds = %dec_label_pc_ed1c, %dec_label_pc_ecb8
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_ed28 = call i32 @function_f3cc(i32 11)
  store i32 %v2_ec64, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v3_ed38 = call i32 @function_f308(i32 11, i32* %v2_ec6c)
  %v3_ed3c = load i8, i8* %stack_var_-56, align 1
  %v4_ed3c = sext i8 %v3_ed3c to i32
  store i32 %v3_ed38, i32* %r2.global-to-local, align 4
  %v1_ed44 = add nsw i32 %v4_ed3c, -1
  store i32 %v1_ed44, i32* %r3.global-to-local, align 4
  %v0_ed48 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_ed48, i32* %r0.global-to-local, align 4
  %v0_ed4c = load i32, i32* @r5, align 4
  %v1_ed4c = add i32 %v0_ed4c, 24
  %v2_ed4c = inttoptr i32 %v1_ed4c to i32*
  %v3_ed4c = load i32, i32* %v2_ed4c, align 4
  store i32 %v3_ed4c, i32* %r1.global-to-local, align 4
  %v4_ed50 = call i32 @function_f840(i32 %v0_ed48, i32 %v3_ed4c, i32 %v3_ed38, i32 %v1_ed44)
  store i32 %v4_ed50, i32* %r0.global-to-local, align 4
  %v1_ed54 = add i32 %v4_ed50, 1
  store i32 %v1_ed54, i32* @r7, align 4
  %v2_ed54 = icmp eq i32 %v4_ed50, -1
  store i1 %v2_ed54, i1* %cpsr_c.global-to-local, align 1
  %v7_ed54 = icmp eq i32 %v1_ed54, 0
  store i1 %v7_ed54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed54, label %thread-pre-split103, label %bb415

bb415:                                            ; preds = %dec_label_pc_ed24
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split103

thread-pre-split103:                              ; preds = %dec_label_pc_ed24, %bb415
  %v0_ed5c = phi i1 [ false, %bb415 ], [ true, %dec_label_pc_ed24 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_ed5c, i1* %cpsr_z.global-to-local, align 1
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_f160 = call i32 @function_f32c(i32 11)
  store i32 %v1_f160, i32* %r0.global-to-local, align 4
  %v0_f164 = load i32, i32* @r5, align 4
  br i1 %v0_ed5c, label %dec_label_pc_f15c, label %dec_label_pc_ed6c

dec_label_pc_ed6c:                                ; preds = %thread-pre-split103, %dec_label_pc_eeec
  %v0_ed6c = phi i32 [ %v0_e654, %dec_label_pc_eeec ], [ %v0_f164, %thread-pre-split103 ]
  %v1_ed6c = inttoptr i32 %v0_ed6c to i32*
  %v2_ed6c = load i32, i32* %v1_ed6c, align 4
  store i32 %v2_ed6c, i32* %r3.global-to-local, align 4
  %v1_ed70 = add i32 %v0_ed6c, 4
  %v2_ed70 = inttoptr i32 %v1_ed70 to i32*
  %v3_ed70 = load i32, i32* %v2_ed70, align 4
  store i32 %v3_ed70, i32* %r0.global-to-local, align 4
  %v1_ed74 = add i32 %v2_ed6c, 13
  %v2_ed74 = inttoptr i32 %v1_ed74 to i8*
  %v3_ed74 = load i8, i8* %v2_ed74, align 1
  %v4_ed74 = zext i8 %v3_ed74 to i32
  store i32 %v4_ed74, i32* %r2.global-to-local, align 4
  %v1_ed78 = add i32 %v2_ed6c, 4
  %v2_ed78 = inttoptr i32 %v1_ed78 to i32*
  %v3_ed78 = load i32, i32* %v2_ed78, align 4
  store i32 %v3_ed78, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ed80 = call i32 @function_102c8(i32 %v3_ed70, i32 %v3_ed78, i32 %v4_ed74, i32 16384)
  store i32 %v4_ed80, i32* %r0.global-to-local, align 4
  %v0_ed84 = load i32, i32* @r5, align 4
  %v1_ed84 = add i32 %v0_ed84, 4
  %v2_ed84 = inttoptr i32 %v1_ed84 to i32*
  %v3_ed84 = load i32, i32* %v2_ed84, align 4
  store i32 %v3_ed84, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_155fc.479 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_ed94 = call i32 @function_102c8(i32 %v3_ed84, i32 ptrtoint ([3 x i8]* @global_var_155fc.479 to i32), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_ed9c = load i32, i32* @r5, align 4
  %v2_ed9c = add i32 %v1_ed9c, 12
  %v3_ed9c = inttoptr i32 %v2_ed9c to i32*
  store i32 5, i32* %v3_ed9c, align 4
  br label %dec_label_pc_eda0

dec_label_pc_eda0:                                ; preds = %dec_label_pc_ee6c, %bb419, %dec_label_pc_ec9c, %dec_label_pc_ef7c, %dec_label_pc_eef8, %dec_label_pc_efc0, %dec_label_pc_ed6c
  %v0_eda0 = load i32, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eda0 = icmp eq i32 %v0_eda0, 0
  store i1 %v2_eda0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eda0, label %dec_label_pc_e5d4.loopexit, label %dec_label_pc_e774

dec_label_pc_edac:                                ; preds = %dec_label_pc_e654
  %v1_edac = add i32 %v0_e654, 24
  %v2_edac = inttoptr i32 %v1_edac to i32*
  %v3_edac = load i32, i32* %v2_edac, align 4
  store i32 %v3_edac, i32* %r2.global-to-local, align 4
  %v0_edb0 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_edb0, i32* @r4, align 4
  store i32 0, i32* @r7, align 4
  %v3_edb8146 = icmp eq i32 %v3_edac, 0
  store i1 %v3_edb8146, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_edb8146, i1* %cpsr_z.global-to-local, align 1
  %v6_edbc153 = icmp sgt i32 %v3_edac, 0
  br i1 %v6_edbc153, label %dec_label_pc_edc0.preheader, label %dec_label_pc_ee6c

dec_label_pc_edb8.loopexit:                       ; preds = %dec_label_pc_eddc
  %v2_ede4 = add i32 %v1_ede4, 2
  store i32 %v2_ede4, i32* @r4, align 4
  %v2_ede8 = add i32 %v1_ede8, 2
  store i32 %v2_ede8, i32* @r7, align 4
  %v3_edb8 = icmp uge i32 %v2_ede8, %v1_edb8
  store i1 %v3_edb8, i1* %cpsr_c.global-to-local, align 1
  %v9_edb8 = icmp eq i32 %v2_ede8, %v1_edb8
  store i1 %v9_edb8, i1* %cpsr_z.global-to-local, align 1
  %v6_edbc = icmp slt i32 %v2_ede8, %v1_edb8
  br i1 %v6_edbc, label %dec_label_pc_edc0.preheader, label %dec_label_pc_ee6c

dec_label_pc_edc0.preheader:                      ; preds = %dec_label_pc_edac, %dec_label_pc_edb8.loopexit
  %v6_ee74239 = phi i32 [ %v6_ee74240, %dec_label_pc_edb8.loopexit ], [ %v0_e654, %dec_label_pc_edac ]
  %v1_ede8222 = phi i32 [ %v2_ede8, %dec_label_pc_edb8.loopexit ], [ 0, %dec_label_pc_edac ]
  %v1_edcc220 = phi i32 [ %v1_edb8, %dec_label_pc_edb8.loopexit ], [ %v3_edac, %dec_label_pc_edac ]
  %v0_edc0218 = phi i32 [ %v2_ede4, %dec_label_pc_edb8.loopexit ], [ %v0_edb0, %dec_label_pc_edac ]
  br label %dec_label_pc_edc0

dec_label_pc_edc0:                                ; preds = %dec_label_pc_edc0.preheader, %dec_label_pc_ee50
  %v6_ee74240 = phi i32 [ %v6_ee74239, %dec_label_pc_edc0.preheader ], [ %v0_ee58, %dec_label_pc_ee50 ]
  %v1_ede8 = phi i32 [ %v1_ede8222, %dec_label_pc_edc0.preheader ], [ %v1_ee5c, %dec_label_pc_ee50 ]
  %v1_edb8 = phi i32 [ %v1_edcc220, %dec_label_pc_edc0.preheader ], [ %v3_ee58, %dec_label_pc_ee50 ]
  %v1_ede4 = phi i32 [ %v0_edc0218, %dec_label_pc_edc0.preheader ], [ %v1_ee64, %dec_label_pc_ee50 ]
  %v1_edc0 = inttoptr i32 %v1_ede4 to i8*
  %v2_edc0 = load i8, i8* %v1_edc0, align 1
  %v3_edc0 = zext i8 %v2_edc0 to i32
  store i32 %v3_edc0, i32* @r3, align 4
  %v2_edc4 = icmp eq i8 %v2_edc0, -1
  store i1 %v2_edc4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_edc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_edc4, label %dec_label_pc_edcc, label %dec_label_pc_ee6c

dec_label_pc_edcc:                                ; preds = %dec_label_pc_edc0
  %v0_edcc = load i32, i32* %sl.global-to-local, align 4
  %v2_edcc = add i32 %v0_edcc, %v1_edb8
  store i32 %v2_edcc, i32* %r1.global-to-local, align 4
  %v1_edd0 = add i32 %v1_ede4, 1
  store i32 %v1_edd0, i32* @r6, align 4
  %v3_edd4 = icmp uge i32 %v2_edcc, %v1_edd0
  store i1 %v3_edd4, i1* %cpsr_c.global-to-local, align 1
  %v9_edd4 = icmp eq i32 %v2_edcc, %v1_edd0
  store i1 %v9_edd4, i1* %cpsr_z.global-to-local, align 1
  %v2_edd8 = xor i1 %v3_edd4, true
  %v3_edd8 = or i1 %v9_edd4, %v2_edd8
  br i1 %v3_edd8, label %dec_label_pc_ee6c, label %dec_label_pc_eddc

dec_label_pc_eddc:                                ; preds = %dec_label_pc_edcc
  %v2_eddc = inttoptr i32 %v1_edd0 to i8*
  %v3_eddc = load i8, i8* %v2_eddc, align 1
  %v4_eddc = zext i8 %v3_eddc to i32
  store i32 %v4_eddc, i32* @r3, align 4
  %v2_ede0 = icmp eq i8 %v3_eddc, -1
  store i1 %v2_ede0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_ede0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ede0, label %dec_label_pc_edb8.loopexit, label %dec_label_pc_edf0

dec_label_pc_edf0:                                ; preds = %dec_label_pc_eddc
  %v2_edf0 = icmp ugt i8 %v3_eddc, -4
  store i1 %v2_edf0, i1* %cpsr_c.global-to-local, align 1
  %v7_edf0 = icmp eq i8 %v3_eddc, -3
  store i1 %v7_edf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edf0, label %dec_label_pc_ee7c, label %dec_label_pc_edf8

dec_label_pc_edf8:                                ; preds = %dec_label_pc_edf0
  %v1_edf8 = add i32 %v1_ede4, 2
  store i32 %v1_edf8, i32* @r3, align 4
  %v3_edfc = icmp uge i32 %v2_edcc, %v1_edf8
  store i1 %v3_edfc, i1* %cpsr_c.global-to-local, align 1
  %v9_edfc = icmp eq i32 %v2_edcc, %v1_edf8
  store i1 %v9_edfc, i1* %cpsr_z.global-to-local, align 1
  %v2_ee00 = xor i1 %v3_edfc, true
  %v3_ee00 = or i1 %v9_edfc, %v2_ee00
  br i1 %v3_ee00, label %dec_label_pc_ee6c, label %dec_label_pc_ee04

dec_label_pc_ee04:                                ; preds = %dec_label_pc_eedc, %bb420, %.thread115, %dec_label_pc_edf8
  %v0_ee04 = load i32, i32* @r6, align 4
  %v1_ee04 = inttoptr i32 %v0_ee04 to i8*
  %v2_ee04 = load i8, i8* %v1_ee04, align 1
  %v3_ee04 = zext i8 %v2_ee04 to i32
  store i32 %v3_ee04, i32* %r3.global-to-local, align 4
  %v2_ee08 = icmp ugt i8 %v2_ee04, -4
  store i1 %v2_ee08, i1* %cpsr_c.global-to-local, align 1
  %v7_ee08 = icmp eq i8 %v2_ee04, -3
  store i1 %v7_ee08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee08, label %.thread107, label %dec_label_pc_ee18

.thread107:                                       ; preds = %dec_label_pc_ee04
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_ee04, align 1
  %v0_ee14.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee14.pr.pr, label %.thread110, label %.thread107.dec_label_pc_ee18thread-pre-split_crit_edge

.thread107.dec_label_pc_ee18thread-pre-split_crit_edge: ; preds = %.thread107
  %v0_ee18.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ee18

dec_label_pc_ee18:                                ; preds = %dec_label_pc_ee04, %.thread107.dec_label_pc_ee18thread-pre-split_crit_edge
  %v0_ee18.pr = phi i32 [ %v0_ee18.pr.pre, %.thread107.dec_label_pc_ee18thread-pre-split_crit_edge ], [ %v3_ee04, %dec_label_pc_ee04 ]
  %v2_ee18 = icmp ugt i32 %v0_ee18.pr, 250
  store i1 %v2_ee18, i1* %cpsr_c.global-to-local, align 1
  %v7_ee18 = icmp eq i32 %v0_ee18.pr, 251
  store i1 %v7_ee18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee18, label %bb416, label %.thread110

bb416:                                            ; preds = %dec_label_pc_ee18
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_ee20 = load i32, i32* @r6, align 4
  %v4_ee20 = inttoptr i32 %v3_ee20 to i8*
  store i8 -3, i8* %v4_ee20, align 1
  br label %.thread110

.thread110:                                       ; preds = %dec_label_pc_ee18, %.thread107, %bb416
  %v0_ee24 = load i32, i32* @r4, align 4
  %v1_ee24 = add i32 %v0_ee24, 2
  %v2_ee24 = inttoptr i32 %v1_ee24 to i8*
  %v3_ee24 = load i8, i8* %v2_ee24, align 1
  %v4_ee24 = zext i8 %v3_ee24 to i32
  store i32 %v4_ee24, i32* %r3.global-to-local, align 4
  %v2_ee28 = icmp ugt i8 %v3_ee24, -4
  store i1 %v2_ee28, i1* %cpsr_c.global-to-local, align 1
  %v7_ee28 = icmp eq i8 %v3_ee24, -3
  store i1 %v7_ee28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee28, label %.thread111, label %dec_label_pc_ee38

.thread111:                                       ; preds = %.thread110
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_ee24, align 1
  %v0_ee34.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee34.pr.pr, label %.thread114, label %.thread111.dec_label_pc_ee38thread-pre-split_crit_edge

.thread111.dec_label_pc_ee38thread-pre-split_crit_edge: ; preds = %.thread111
  %v0_ee38.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ee38

dec_label_pc_ee38:                                ; preds = %.thread110, %.thread111.dec_label_pc_ee38thread-pre-split_crit_edge
  %v0_ee38.pr = phi i32 [ %v0_ee38.pr.pre, %.thread111.dec_label_pc_ee38thread-pre-split_crit_edge ], [ %v4_ee24, %.thread110 ]
  %v2_ee38 = icmp ugt i32 %v0_ee38.pr, 250
  store i1 %v2_ee38, i1* %cpsr_c.global-to-local, align 1
  %v7_ee38 = icmp eq i32 %v0_ee38.pr, 251
  store i1 %v7_ee38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee38, label %bb417, label %.thread114

bb417:                                            ; preds = %dec_label_pc_ee38
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_ee40 = load i32, i32* @r4, align 4
  %v4_ee40 = add i32 %v3_ee40, 2
  %v5_ee40 = inttoptr i32 %v4_ee40 to i8*
  store i8 -3, i8* %v5_ee40, align 1
  br label %.thread114

.thread114:                                       ; preds = %dec_label_pc_ee38, %.thread111, %bb417
  %v0_ee44 = load i32, i32* @r5, align 4
  %v1_ee44 = add i32 %v0_ee44, 4
  %v2_ee44 = inttoptr i32 %v1_ee44 to i32*
  %v3_ee44 = load i32, i32* %v2_ee44, align 4
  store i32 %v3_ee44, i32* %r0.global-to-local, align 4
  %v0_ee48 = load i32, i32* @r4, align 4
  br label %dec_label_pc_ee50

dec_label_pc_ee50:                                ; preds = %dec_label_pc_efd8, %.thread114
  %v0_ee54 = phi i32 [ %v3_eff0, %dec_label_pc_efd8 ], [ %v3_ee44, %.thread114 ]
  %storemerge4 = phi i32 [ %v2_ee9c, %dec_label_pc_efd8 ], [ %v0_ee48, %.thread114 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_efd8 ], [ 3, %.thread114 ]
  store i32 %storemerge4, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_ee54 = call i32 @function_102c8(i32 %v0_ee54, i32 %storemerge4, i32 %storemerge, i32 16384)
  store i32 %v4_ee54, i32* %r0.global-to-local, align 4
  %v0_ee58 = load i32, i32* @r5, align 4
  %v1_ee58 = add i32 %v0_ee58, 24
  %v2_ee58 = inttoptr i32 %v1_ee58 to i32*
  %v3_ee58 = load i32, i32* %v2_ee58, align 4
  store i32 %v3_ee58, i32* %r2.global-to-local, align 4
  %v0_ee5c = load i32, i32* @r7, align 4
  %v1_ee5c = add i32 %v0_ee5c, 3
  store i32 %v1_ee5c, i32* @r7, align 4
  %v3_ee60 = icmp uge i32 %v1_ee5c, %v3_ee58
  store i1 %v3_ee60, i1* %cpsr_c.global-to-local, align 1
  %v9_ee60 = icmp eq i32 %v1_ee5c, %v3_ee58
  store i1 %v9_ee60, i1* %cpsr_z.global-to-local, align 1
  %v0_ee64 = load i32, i32* @r4, align 4
  %v1_ee64 = add i32 %v0_ee64, 3
  store i32 %v1_ee64, i32* @r4, align 4
  %v5_ee68 = icmp slt i32 %v1_ee5c, %v3_ee58
  br i1 %v5_ee68, label %dec_label_pc_edc0, label %dec_label_pc_ee6c

dec_label_pc_ee6c:                                ; preds = %dec_label_pc_edb8.loopexit, %dec_label_pc_edc0, %dec_label_pc_ee50, %dec_label_pc_edf8, %dec_label_pc_edcc, %dec_label_pc_edac, %dec_label_pc_ee7c.dec_label_pc_ee6c.loopexit_crit_edge
  %v6_ee74 = phi i32 [ %v0_eea8, %dec_label_pc_ee7c.dec_label_pc_ee6c.loopexit_crit_edge ], [ %v0_e654, %dec_label_pc_edac ], [ %v6_ee74240, %dec_label_pc_edc0 ], [ %v0_ee58, %dec_label_pc_ee50 ], [ %v6_ee74240, %dec_label_pc_edf8 ], [ %v6_ee74240, %dec_label_pc_edcc ], [ %v6_ee74240, %dec_label_pc_edb8.loopexit ]
  %v0_ee6c = phi i32 [ %v0_ee6c.pre.pre, %dec_label_pc_ee7c.dec_label_pc_ee6c.loopexit_crit_edge ], [ 0, %dec_label_pc_edac ], [ %v1_ede8, %dec_label_pc_edc0 ], [ %v1_ee5c, %dec_label_pc_ee50 ], [ %v1_ede8, %dec_label_pc_edf8 ], [ %v1_ede8, %dec_label_pc_edcc ], [ %v2_ede8, %dec_label_pc_edb8.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee6c = icmp eq i32 %v0_ee6c, 0
  store i1 %v2_ee6c, i1* %cpsr_z.global-to-local, align 1
  %tmp418 = icmp slt i32 %v0_ee6c, 1
  br i1 %tmp418, label %dec_label_pc_eda0, label %bb419

bb419:                                            ; preds = %dec_label_pc_ee6c
  store i32 3, i32* %r0.global-to-local, align 4
  %v7_ee74 = add i32 %v6_ee74, 12
  %v8_ee74 = inttoptr i32 %v7_ee74 to i32*
  store i32 3, i32* %v8_ee74, align 4
  br label %dec_label_pc_eda0

dec_label_pc_ee7c:                                ; preds = %dec_label_pc_edf0
  store i32 %v2_ee80, i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15608.481 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_ee80, i32* @r0, align 4
  %v0_ee90 = call i32 @function_100a0()
  store i32 9, i32* @r2, align 4
  store i32 %v2_ee9c, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_155ff.483 to i32), i32* @r1, align 4
  %v0_eea4 = call i32 @function_100a0()
  store i32 %v0_eea4, i32* %r0.global-to-local, align 4
  %v0_eea8 = load i32, i32* @r5, align 4
  %v1_eea8 = add i32 %v0_eea8, 24
  %v2_eea8 = inttoptr i32 %v1_eea8 to i32*
  %v3_eea8 = load i32, i32* %v2_eea8, align 4
  %v0_eeac = load i32, i32* @r4, align 4
  %v1_eeac = add i32 %v0_eeac, 2
  store i32 %v1_eeac, i32* %r2.global-to-local, align 4
  %v0_eeb0 = load i32, i32* %sl.global-to-local, align 4
  %v2_eeb0 = add i32 %v0_eeb0, %v3_eea8
  store i32 %v2_eeb0, i32* @r3, align 4
  %v3_eeb4 = icmp uge i32 %v2_eeb0, %v1_eeac
  store i1 %v3_eeb4, i1* %cpsr_c.global-to-local, align 1
  %v9_eeb4 = icmp eq i32 %v2_eeb0, %v1_eeac
  store i1 %v9_eeb4, i1* %cpsr_z.global-to-local, align 1
  %v2_eeb8 = xor i1 %v3_eeb4, true
  %v3_eeb8 = or i1 %v9_eeb4, %v2_eeb8
  br i1 %v3_eeb8, label %dec_label_pc_ee7c.dec_label_pc_ee6c.loopexit_crit_edge, label %dec_label_pc_eebc

dec_label_pc_ee7c.dec_label_pc_ee6c.loopexit_crit_edge: ; preds = %dec_label_pc_ee7c
  %v0_ee6c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_ee6c

dec_label_pc_eebc:                                ; preds = %dec_label_pc_ee7c
  %v2_eebc = inttoptr i32 %v1_eeac to i8*
  %v3_eebc = load i8, i8* %v2_eebc, align 1
  %v4_eebc = zext i8 %v3_eebc to i32
  store i32 %v4_eebc, i32* %r3.global-to-local, align 4
  %v2_eec0 = icmp ugt i8 %v3_eebc, 30
  store i1 %v2_eec0, i1* %cpsr_c.global-to-local, align 1
  %v7_eec0 = icmp eq i8 %v3_eebc, 31
  store i1 %v7_eec0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eec0, label %dec_label_pc_efd8, label %dec_label_pc_eec8

dec_label_pc_eec8:                                ; preds = %dec_label_pc_eebc
  %v1_eec8 = inttoptr i32 %v0_eeac to i8*
  %v2_eec8 = load i8, i8* %v1_eec8, align 1
  %v3_eec8 = zext i8 %v2_eec8 to i32
  store i32 %v3_eec8, i32* %r3.global-to-local, align 4
  %v2_eecc = icmp ugt i8 %v2_eec8, -4
  store i1 %v2_eecc, i1* %cpsr_c.global-to-local, align 1
  %v7_eecc = icmp eq i8 %v2_eec8, -3
  store i1 %v7_eecc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eecc, label %.thread115, label %dec_label_pc_eedc

.thread115:                                       ; preds = %dec_label_pc_eec8
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_eec8, align 1
  %v0_eed8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_eed8.pr.pr, label %dec_label_pc_ee04, label %.thread115.dec_label_pc_eedcthread-pre-split_crit_edge

.thread115.dec_label_pc_eedcthread-pre-split_crit_edge: ; preds = %.thread115
  %v0_eedc.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_eedc

dec_label_pc_eedc:                                ; preds = %dec_label_pc_eec8, %.thread115.dec_label_pc_eedcthread-pre-split_crit_edge
  %v0_eedc.pr = phi i32 [ %v0_eedc.pr.pre, %.thread115.dec_label_pc_eedcthread-pre-split_crit_edge ], [ %v3_eec8, %dec_label_pc_eec8 ]
  %v2_eedc = icmp ugt i32 %v0_eedc.pr, 250
  store i1 %v2_eedc, i1* %cpsr_c.global-to-local, align 1
  %v7_eedc = icmp eq i32 %v0_eedc.pr, 251
  store i1 %v7_eedc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eedc, label %bb420, label %dec_label_pc_ee04

bb420:                                            ; preds = %dec_label_pc_eedc
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_eee4 = load i32, i32* @r4, align 4
  %v4_eee4 = inttoptr i32 %v3_eee4 to i8*
  store i8 -3, i8* %v4_eee4, align 1
  br label %dec_label_pc_ee04

dec_label_pc_eeec:                                ; preds = %dec_label_pc_ecf8, %dec_label_pc_ed10, %dec_label_pc_ed08, %bb414, %dec_label_pc_ece4, %dec_label_pc_ecc8, %dec_label_pc_ecdc, %bb413
  %v0_eeec = phi i32 [ %v1_ecbc, %dec_label_pc_ece4 ], [ %v1_ecbc, %dec_label_pc_ecc8 ], [ %v1_ecbc, %dec_label_pc_ecdc ], [ %v1_ecbc, %bb413 ], [ %v1_ed1c, %bb414 ], [ %v1_ed1c, %dec_label_pc_ed08 ], [ %v1_ed1c, %dec_label_pc_ed10 ], [ %v1_ed1c, %dec_label_pc_ecf8 ]
  %v1_eeec = add i32 %v0_eeec, 1
  store i32 %v1_eeec, i32* @r7, align 4
  br label %dec_label_pc_ed6c

dec_label_pc_eef4:                                ; preds = %dec_label_pc_ec08, %dec_label_pc_ec28, %dec_label_pc_ec20, %dec_label_pc_ec18, %bb410, %dec_label_pc_ebf4, %dec_label_pc_ebd0, %dec_label_pc_ebec, %dec_label_pc_ebe4, %bb409
  %v0_eef4 = phi i32 [ %v1_ebc4, %dec_label_pc_ebf4 ], [ %v1_ebc4, %dec_label_pc_ebd0 ], [ %v1_ebc4, %dec_label_pc_ebec ], [ %v1_ebc4, %dec_label_pc_ebe4 ], [ %v1_ebc4, %bb409 ], [ %v1_ec34, %bb410 ], [ %v1_ec34, %dec_label_pc_ec18 ], [ %v1_ec34, %dec_label_pc_ec20 ], [ %v1_ec34, %dec_label_pc_ec28 ], [ %v1_ec34, %dec_label_pc_ec08 ]
  %v1_eef4 = add i32 %v0_eef4, 1
  store i32 %v1_eef4, i32* @r7, align 4
  br label %dec_label_pc_eef8

dec_label_pc_eef8:                                ; preds = %dec_label_pc_ec9c.dec_label_pc_eef8_crit_edge, %dec_label_pc_eef4
  %v0_eef8 = phi i32 [ %v0_eef8.pre, %dec_label_pc_ec9c.dec_label_pc_eef8_crit_edge ], [ %v0_e654, %dec_label_pc_eef4 ]
  %v1_eef8 = inttoptr i32 %v0_eef8 to i32*
  %v2_eef8 = load i32, i32* %v1_eef8, align 4
  store i32 %v2_eef8, i32* %r3.global-to-local, align 4
  %v1_eefc = add i32 %v0_eef8, 4
  %v2_eefc = inttoptr i32 %v1_eefc to i32*
  %v3_eefc = load i32, i32* %v2_eefc, align 4
  store i32 %v3_eefc, i32* %r0.global-to-local, align 4
  %v1_ef00 = add i32 %v2_eef8, 12
  %v2_ef00 = inttoptr i32 %v1_ef00 to i8*
  %v3_ef00 = load i8, i8* %v2_ef00, align 1
  %v4_ef00 = zext i8 %v3_ef00 to i32
  store i32 %v4_ef00, i32* %r2.global-to-local, align 4
  %v1_ef04 = inttoptr i32 %v2_eef8 to i32*
  %v2_ef04 = load i32, i32* %v1_ef04, align 4
  store i32 %v2_ef04, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ef0c = call i32 @function_102c8(i32 %v3_eefc, i32 %v2_ef04, i32 %v4_ef00, i32 16384)
  store i32 %v4_ef0c, i32* %r0.global-to-local, align 4
  %v0_ef10 = load i32, i32* @r5, align 4
  %v1_ef10 = add i32 %v0_ef10, 4
  %v2_ef10 = inttoptr i32 %v1_ef10 to i32*
  %v3_ef10 = load i32, i32* %v2_ef10, align 4
  store i32 %v3_ef10, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_155fc.479 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_ef20 = call i32 @function_102c8(i32 %v3_ef10, i32 ptrtoint ([3 x i8]* @global_var_155fc.479 to i32), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_ef28 = load i32, i32* @r5, align 4
  %v2_ef28 = add i32 %v1_ef28, 12
  %v3_ef28 = inttoptr i32 %v2_ef28 to i32*
  store i32 4, i32* %v3_ef28, align 4
  br label %dec_label_pc_eda0

dec_label_pc_ef30:                                ; preds = %dec_label_pc_e6f8
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_ef3c = call i32 @function_f3cc(i32 9)
  store i32 %v2_ec64, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_ef4c = call i32 @function_f308(i32 9, i32* nonnull %v2_ec6c)
  store i32 %v3_ef4c, i32* %r0.global-to-local, align 4
  %v3_ef50 = load i8, i8* %stack_var_-56, align 1
  %v4_ef50 = sext i8 %v3_ef50 to i32
  store i32 %v3_ef4c, i32* %r2.global-to-local, align 4
  %v1_ef58 = add nsw i32 %v4_ef50, -1
  store i32 %v1_ef58, i32* %r3.global-to-local, align 4
  %v0_ef5c = load i32, i32* @r5, align 4
  %v1_ef5c = add i32 %v0_ef5c, 24
  %v2_ef5c = inttoptr i32 %v1_ef5c to i32*
  %v3_ef5c = load i32, i32* %v2_ef5c, align 4
  store i32 %v3_ef5c, i32* %r1.global-to-local, align 4
  %v0_ef60 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_ef60, i32* %r0.global-to-local, align 4
  %v4_ef64 = call i32 @function_f840(i32 %v0_ef60, i32 %v3_ef5c, i32 %v3_ef4c, i32 %v1_ef58)
  store i32 %v4_ef64, i32* @r7, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_ef70 = call i32 @function_f32c(i32 9)
  store i32 %v1_ef70, i32* @r0, align 4
  %v0_ef74 = load i32, i32* @r7, align 4
  %v2_ef74 = icmp eq i32 %v0_ef74, -1
  store i1 %v2_ef74, i1* %cpsr_c.global-to-local, align 1
  %v7_ef74 = icmp eq i32 %v0_ef74, -1
  store i1 %v7_ef74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef74, label %dec_label_pc_e5d4.loopexit, label %dec_label_pc_ef7c

dec_label_pc_ef7c:                                ; preds = %dec_label_pc_ef30
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef7c = icmp eq i32 %v0_ef74, 0
  store i1 %v2_ef7c, i1* %cpsr_z.global-to-local, align 1
  %tmp421 = icmp slt i32 %v0_ef74, 1
  br i1 %tmp421, label %dec_label_pc_eda0, label %dec_label_pc_ef84

dec_label_pc_ef84:                                ; preds = %dec_label_pc_ef7c
  %v0_ef84 = load i32, i32* @r5, align 4
  %v1_ef84 = add i32 %v0_ef84, 20
  %v2_ef84 = inttoptr i32 %v1_ef84 to i16*
  %v3_ef84 = load i16, i16* %v2_ef84, align 2
  %v4_ef84 = zext i16 %v3_ef84 to i32
  store i32 %v4_ef84, i32* %r3.global-to-local, align 4
  %v1_ef88 = add i32 %v0_ef84, 16
  %v2_ef88 = inttoptr i32 %v1_ef88 to i32*
  %v3_ef88 = load i32, i32* %v2_ef88, align 4
  store i32 %v3_ef88, i32* %r2.global-to-local, align 4
  store i32 %v2_ef8c, i32* @lr, align 4
  store i32 %v4_ef84, i32* %stack_var_-42, align 4
  store i32 %v3_ef88, i32* %stack_var_-60, align 4
  %v1_ef98 = inttoptr i32 %v0_ef84 to i32*
  %v2_ef98 = load i32, i32* %v1_ef98, align 4
  store i32 %v2_ef98, i32* %r8.global-to-local, align 4
  %v0_ef9c = call i32 @function_fd2c()
  store i32 %v0_ef9c, i32* %r0.global-to-local, align 4
  %v7_efa0 = icmp eq i32 %v0_ef9c, -1
  %.432 = zext i1 %v7_efa0 to i32
  store i32 %.432, i32* @r3, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_efac = icmp eq i32 %v0_ef9c, 0
  store i1 %v2_efac, i1* %cpsr_z.global-to-local, align 1
  %tmp424 = icmp slt i32 %v0_ef9c, 1
  br i1 %tmp424, label %bb425, label %.thread121

.thread121:                                       ; preds = %dec_label_pc_ef84
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_efc0

bb425:                                            ; preds = %dec_label_pc_ef84
  store i32 %.432, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_efb8 = icmp eq i1 %v7_efa0, false
  store i1 %v2_efb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_efb8, label %dec_label_pc_f1a4, label %dec_label_pc_efc0

dec_label_pc_efc0:                                ; preds = %.thread121, %bb425
  %v0_efc0 = load i32, i32* @r5, align 4
  %v1_efc0 = add i32 %v0_efc0, 4
  %v2_efc0 = inttoptr i32 %v1_efc0 to i32*
  %v3_efc0 = load i32, i32* %v2_efc0, align 4
  store i32 %v3_efc0, i32* %r0.global-to-local, align 4
  %v1_efc4 = call i32 @function_10008(i32 %v3_efc0)
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_efcc = load i32, i32* @r4, align 4
  %v1_efcc = load i32, i32* @r5, align 4
  %v2_efcc = add i32 %v1_efcc, 4
  %v3_efcc = inttoptr i32 %v2_efcc to i32*
  store i32 %v0_efcc, i32* %v3_efcc, align 4
  %v0_efd0 = load i32, i32* %r0.global-to-local, align 4
  %v1_efd0 = load i32, i32* @r5, align 4
  %v2_efd0 = add i32 %v1_efd0, 12
  %v3_efd0 = inttoptr i32 %v2_efd0 to i32*
  store i32 %v0_efd0, i32* %v3_efd0, align 4
  br label %dec_label_pc_eda0

dec_label_pc_efd8:                                ; preds = %dec_label_pc_eebc
  store i32 %v2_ee80, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_efe4 = add i32 %v0_eea8, 4
  %v2_efe4 = inttoptr i32 %v1_efe4 to i32*
  %v3_efe4 = load i32, i32* %v2_efe4, align 4
  store i32 %v3_efe4, i32* %r0.global-to-local, align 4
  %v4_efe8 = call i32 @function_102c8(i32 %v3_efe4, i32 %v2_ee80, i32 3, i32 16384)
  store i32 %v4_efe8, i32* %r0.global-to-local, align 4
  store i32 %v2_ee94, i32* %r1.global-to-local, align 4
  %v0_eff0 = load i32, i32* @r5, align 4
  %v1_eff0 = add i32 %v0_eff0, 4
  %v2_eff0 = inttoptr i32 %v1_eff0 to i32*
  %v3_eff0 = load i32, i32* %v2_eff0, align 4
  store i32 %v3_eff0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ee50

dec_label_pc_f000:                                ; preds = %dec_label_pc_e5e0
  store i32 %.pre, i32* @r0, align 4
  %v1_f008 = add i32 %v0_f000, 92
  store i32 %v1_f008, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_f010 = call i32 @function_10090(i32 %.pre, i32 %v1_f008, i32 192)
  store i32 %v3_f010, i32* %r0.global-to-local, align 4
  %v0_f014 = load i32, i32* @r5, align 4
  %v1_f014 = add i32 %v0_f014, 24
  %v2_f014 = inttoptr i32 %v1_f014 to i32*
  %v3_f014 = load i32, i32* %v2_f014, align 4
  %v1_f018 = add i32 %v3_f014, -64
  store i32 %v1_f018, i32* %r3.global-to-local, align 4
  store i32 %v1_f018, i32* %v2_f014, align 4
  br label %dec_label_pc_e5f0

dec_label_pc_f024:                                ; preds = %dec_label_pc_e734
  %v0_f024 = load i32, i32* @r5, align 4
  store i32 %v0_f024, i32* @r0, align 4
  %v0_f028 = call i32 @function_cc94()
  store i32 %v0_f028, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e770

dec_label_pc_f030:                                ; preds = %dec_label_pc_ec3c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_f030 = load i8, i8* %stack_var_-56, align 1
  %v4_f030 = sext i8 %v3_f030 to i32
  %v0_f034 = load i32, i32* @r6, align 4
  store i32 %v0_f034, i32* %r2.global-to-local, align 4
  %v1_f038 = add nsw i32 %v4_f030, -1
  store i32 %v1_f038, i32* %r3.global-to-local, align 4
  %v0_f03c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_f03c, i32* %r0.global-to-local, align 4
  %v0_f040 = load i32, i32* @r5, align 4
  %v1_f040 = add i32 %v0_f040, 24
  %v2_f040 = inttoptr i32 %v1_f040 to i32*
  %v3_f040 = load i32, i32* %v2_f040, align 4
  store i32 %v3_f040, i32* %r1.global-to-local, align 4
  %v4_f044 = call i32 @function_f840(i32 %v0_f03c, i32 %v3_f040, i32 %v0_f034, i32 %v1_f038)
  store i32 %v4_f044, i32* %r0.global-to-local, align 4
  %v1_f048 = add i32 %v4_f044, 1
  store i32 %v1_f048, i32* @r7, align 4
  %v2_f048 = icmp eq i32 %v4_f044, -1
  store i1 %v2_f048, i1* %cpsr_c.global-to-local, align 1
  %v7_f048 = icmp eq i32 %v1_f048, 0
  store i1 %v7_f048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f048, label %dec_label_pc_f058, label %dec_label_pc_ec9c

dec_label_pc_f058:                                ; preds = %dec_label_pc_f030
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_f05c = call i32 @function_f32c(i32 12)
  store i32 13, i32* %r0.global-to-local, align 4
  %v1_f064 = call i32 @function_f32c(i32 13)
  store i32 %v1_f064, i32* %r0.global-to-local, align 4
  %v0_f068 = load i32, i32* @r5, align 4
  %v1_f068 = add i32 %v0_f068, 12
  %v2_f068 = inttoptr i32 %v1_f068 to i32*
  %v3_f068 = load i32, i32* %v2_f068, align 4
  store i32 %v3_f068, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e5d8.backedge

dec_label_pc_e5d8.backedge.thread:                ; preds = %dec_label_pc_e79c, %dec_label_pc_e870, %dec_label_pc_e944, %dec_label_pc_ea18, %dec_label_pc_eaec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e5e0

dec_label_pc_e5d8.backedge.thread528:             ; preds = %dec_label_pc_eb50, %dec_label_pc_e9a8, %dec_label_pc_e8d4, %dec_label_pc_ea7c, %dec_label_pc_e800
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e5e0

dec_label_pc_e5d8.backedge:                       ; preds = %dec_label_pc_e654, %dec_label_pc_f058, %dec_label_pc_f15c
  %v0_e5e0186 = phi i32 [ %v0_f164, %dec_label_pc_f15c ], [ %v0_f068, %dec_label_pc_f058 ], [ %v0_e654, %dec_label_pc_e654 ]
  %v0_e5d8.be = phi i32 [ %v3_f164, %dec_label_pc_f15c ], [ %v3_f068, %dec_label_pc_f058 ], [ %v3_e654, %dec_label_pc_e654 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_e5d8 = icmp eq i32 %v0_e5d8.be, 0
  store i1 %v2_e5d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5d8, label %dec_label_pc_e6e0, label %dec_label_pc_e5e0

dec_label_pc_f070:                                ; preds = %dec_label_pc_e590
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_ec64, i32* %r3.global-to-local, align 4
  store i32 %v2_ec50, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i8 0, i8* %stack_var_-56, align 1
  store i32 4, i32* %stack_var_-60, align 4
  %v5_f09c = call i32 @function_101dc(i32 %v3_e584, i32 1, i32 4, i32 %v2_ec64, i32 %v2_ec50)
  %v3_f0a0 = load i8, i8* %stack_var_-56, align 1
  %v4_f0a0 = sext i8 %v3_f0a0 to i32
  store i32 %v4_f0a0, i32* %r3.global-to-local, align 4
  %v2_f0a4 = or i32 %v4_f0a0, %v5_f09c
  store i32 %v2_f0a4, i32* %r0.global-to-local, align 4
  %v4_f0a4 = icmp eq i32 %v2_f0a4, 0
  store i1 %v4_f0a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_f0a4, label %dec_label_pc_f0ac, label %dec_label_pc_f140

dec_label_pc_f0ac:                                ; preds = %dec_label_pc_f070
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f0b0 = load i32, i32* @r5, align 4
  %v2_f0b0 = add i32 %v1_f0b0, 12
  %v3_f0b0 = inttoptr i32 %v2_f0b0 to i32*
  store i32 2, i32* %v3_f0b0, align 4
  %v0_f0b4 = call i32 @function_cad8()
  store i32 %v0_f0b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i16** @global_var_1e29c.106 to i32), i32* %r3.global-to-local, align 4
  %v2_f0bc = load i16, i16* bitcast (i16** @global_var_1e29c.106 to i16*), align 4
  %v3_f0bc = zext i16 %v2_f0bc to i32
  store i32 %v3_f0bc, i32* %r1.global-to-local, align 4
  %v3_f0c0 = call i32 @function_fc08(i32 %v0_f0b4, i32 %v3_f0bc)
  store i32 %v3_f0c0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1e26c.102 to i32), i32* %r3.global-to-local, align 4
  %v2_f0c8 = load i32, i32* @global_var_1e26c.102, align 4
  store i32 %v2_f0c8, i32* %ip.global-to-local, align 4
  %v1_f0d0 = load i32, i32* @r4, align 4
  %v9_f0d0 = icmp eq i32 %v2_f0c8, %v1_f0d0
  store i1 %v9_f0d0, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_f0bc, i32* %r1.global-to-local, align 4
  %v7_f0d8 = icmp sgt i32 %v2_f0c8, %v1_f0d0
  br i1 %v7_f0d8, label %dec_label_pc_f0dc, label %dec_label_pc_f11c

dec_label_pc_f0dc:                                ; preds = %dec_label_pc_f0ac
  %v2_f0e0 = load i32, i32* @global_var_1e298.104, align 4
  store i32 %v2_f0e0, i32* %r3.global-to-local, align 4
  store i32 %v1_f0d0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f0fc

dec_label_pc_f0ec:                                ; preds = %dec_label_pc_f10c, %dec_label_pc_f0fc
  %v1_f0ec = add i32 %v0_f0ec, 1
  store i32 %v1_f0ec, i32* %r2.global-to-local, align 4
  %v9_f0f0 = icmp eq i32 %v1_f0ec, %v2_f0c8
  %v1_f0f4 = add i32 %v0_f0f4, 16
  store i32 %v1_f0f4, i32* %r3.global-to-local, align 4
  br i1 %v9_f0f0, label %dec_label_pc_f11c.loopexit, label %dec_label_pc_f0fc

dec_label_pc_f0fc:                                ; preds = %dec_label_pc_f0ec, %dec_label_pc_f0dc
  %v0_f0ec = phi i32 [ %v1_f0ec, %dec_label_pc_f0ec ], [ %v1_f0d0, %dec_label_pc_f0dc ]
  %v0_f0f4 = phi i32 [ %v1_f0f4, %dec_label_pc_f0ec ], [ %v2_f0e0, %dec_label_pc_f0dc ]
  store i32 %v0_f0f4, i32* %r0.global-to-local, align 4
  %v1_f100 = add i32 %v0_f0f4, 8
  %v2_f100 = inttoptr i32 %v1_f100 to i16*
  %v3_f100 = load i16, i16* %v2_f100, align 2
  %v4_f100 = zext i16 %v3_f100 to i32
  store i32 %v4_f100, i32* %r3.global-to-local, align 4
  %tmp426 = icmp ugt i16 %v3_f100, %v2_f0bc
  br i1 %tmp426, label %dec_label_pc_f0ec, label %dec_label_pc_f10c

dec_label_pc_f10c:                                ; preds = %dec_label_pc_f0fc
  %v1_f10c = add i32 %v0_f0f4, 10
  %v2_f10c = inttoptr i32 %v1_f10c to i16*
  %v3_f10c = load i16, i16* %v2_f10c, align 2
  %v4_f10c = zext i16 %v3_f10c to i32
  store i32 %v4_f10c, i32* %r3.global-to-local, align 4
  %v3_f110 = icmp uge i16 %v3_f10c, %v2_f0bc
  %v9_f110 = icmp eq i16 %v3_f10c, %v2_f0bc
  %v2_f114 = xor i1 %v3_f110, true
  %v3_f114 = or i1 %v9_f110, %v2_f114
  br i1 %v3_f114, label %dec_label_pc_f0ec, label %dec_label_pc_f120.loopexit

dec_label_pc_f11c.loopexit:                       ; preds = %dec_label_pc_f0ec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f11c

dec_label_pc_f11c:                                ; preds = %dec_label_pc_f11c.loopexit, %dec_label_pc_f0ac
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f120

dec_label_pc_f120.loopexit:                       ; preds = %dec_label_pc_f10c
  store i1 %v3_f110, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f120

dec_label_pc_f120:                                ; preds = %dec_label_pc_f120.loopexit, %dec_label_pc_f11c
  %v0_f134 = phi i32 [ %v0_f0f4, %dec_label_pc_f120.loopexit ], [ 0, %dec_label_pc_f11c ]
  %v0_f120 = load i32, i32* @r5, align 4
  %v1_f120 = add i32 %v0_f120, 4
  %v2_f120 = inttoptr i32 %v1_f120 to i32*
  %v3_f120 = load i32, i32* %v2_f120, align 4
  %v3_f124 = udiv i32 %v3_f120, 32
  store i32 %v3_f124, i32* %r2.global-to-local, align 4
  %v1_f128 = urem i32 %v3_f120, 32
  store i32 %v1_f128, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_f12c = mul nuw nsw i32 %v3_f124, 4
  store i32 %v3_f12c, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_f134 = inttoptr i32 %v0_f120 to i32*
  store i32 %v0_f134, i32* %v2_f134, align 4
  %v0_f138 = load i32, i32* %r3.global-to-local, align 4
  %v1_f138 = load i32, i32* @r5, align 4
  %v2_f138 = add i32 %v1_f138, 24
  %v3_f138 = inttoptr i32 %v2_f138 to i32*
  store i32 %v0_f138, i32* %v3_f138, align 4
  %v0_e5c0.pre = load i32, i32* @ip, align 4
  %v1_e5c8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e5b8

dec_label_pc_f140:                                ; preds = %dec_label_pc_f070
  %v0_f140 = load i32, i32* @r5, align 4
  %v1_f140 = add i32 %v0_f140, 4
  %v2_f140 = inttoptr i32 %v1_f140 to i32*
  %v3_f140 = load i32, i32* %v2_f140, align 4
  store i32 %v3_f140, i32* %r0.global-to-local, align 4
  %v1_f144 = call i32 @function_10008(i32 %v3_f140)
  store i32 %v1_f144, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_f14c = load i32, i32* @r4, align 4
  %v1_f14c = load i32, i32* @r5, align 4
  %v2_f14c = add i32 %v1_f14c, 12
  %v3_f14c = inttoptr i32 %v2_f14c to i32*
  store i32 %v0_f14c, i32* %v3_f14c, align 4
  %v0_f150 = load i32, i32* %r3.global-to-local, align 4
  %v1_f150 = load i32, i32* @r5, align 4
  %v2_f150 = add i32 %v1_f150, 4
  %v3_f150 = inttoptr i32 %v2_f150 to i32*
  store i32 %v0_f150, i32* %v3_f150, align 4
  %v0_f154 = load i32, i32* @r4, align 4
  %v1_f154 = trunc i32 %v0_f154 to i8
  %v2_f154 = load i32, i32* @r5, align 4
  %v3_f154 = add i32 %v2_f154, 284
  %v4_f154 = inttoptr i32 %v3_f154 to i8*
  store i8 %v1_f154, i8* %v4_f154, align 1
  br label %dec_label_pc_e6e0

dec_label_pc_f15c:                                ; preds = %thread-pre-split103
  %v1_f164 = add i32 %v0_f164, 12
  %v2_f164 = inttoptr i32 %v1_f164 to i32*
  %v3_f164 = load i32, i32* %v2_f164, align 4
  store i32 %v3_f164, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e5d8.backedge

dec_label_pc_f1a4:                                ; preds = %bb425
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f1b0 = call i32 @function_10384(i32 2, i32 1, i32 0)
  store i32 %v3_f1b0, i32* %r0.global-to-local, align 4
  %v2_f1b4 = icmp eq i32 %v3_f1b0, -1
  store i1 %v2_f1b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f1b4 = icmp eq i32 %v3_f1b0, -1
  store i1 %v7_f1b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f1b0, i32* @r4, align 4
  br i1 %v7_f1b4, label %dec_label_pc_f300, label %dec_label_pc_f1c0

dec_label_pc_f1c0:                                ; preds = %dec_label_pc_f1a4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f1c4 = call i32 @function_f3cc(i32 2)
  store i32 -1378207815, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i16** @global_var_202d8.55 to i32), i32* %r3.global-to-local, align 4
  %v0_f1d0 = load i32, i32* @r6, align 4
  store i32 %v0_f1d0, i32* %r1.global-to-local, align 4
  store i32 -1378207815, i32* @global_var_202dc.57, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_f1dc = inttoptr i32 %v0_f1d0 to i32*
  %v3_f1dc = call i32 @function_f308(i32 2, i32* %v2_f1dc)
  store i32 %v2_ef8c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f1f0 = call i32 @function_f32c(i32 2)
  %v0_f1f4 = load i32, i32* @r4, align 4
  store i32 %v0_f1f4, i32* %r0.global-to-local, align 4
  store i32 %v2_ef8c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_f200 = call i32 @function_1016c(i32 %v0_f1f4, i32 %v2_ef8c, i32 16)
  store i32 %v3_f200, i32* %r0.global-to-local, align 4
  %v3_f204 = icmp eq i32 %v3_f200, -1
  store i1 %v3_f204, i1* %cpsr_c.global-to-local, align 1
  %v8_f204 = icmp eq i32 %v3_f200, -1
  store i1 %v8_f204, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f204, label %dec_label_pc_f20c, label %dec_label_pc_f25c

dec_label_pc_f20c:                                ; preds = %dec_label_pc_f1c0
  %v0_f20c = load i32, i32* @r4, align 4
  store i32 %v0_f20c, i32* %r0.global-to-local, align 4
  %v1_f210 = call i32 @function_10008(i32 %v0_f20c)
  %v0_f214 = load i32, i32* @r6, align 4
  store i32 %v0_f214, i32* %r0.global-to-local, align 4
  %v1_f218 = call i32 @function_119dc(i32 %v0_f214)
  store i32 %v1_f218, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f21c

dec_label_pc_f21c:                                ; preds = %dec_label_pc_e68c, %dec_label_pc_f20c
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_f220 = load i32, i32* @sb, align 4
  %v2_f220 = inttoptr i32 %v1_f220 to i32*
  store i32 104, i32* %v2_f220, align 4
  br label %dec_label_pc_e6a4

dec_label_pc_f228:                                ; preds = %dec_label_pc_e42c
  store i32 %v3_f228, i32* %r0.global-to-local, align 4
  %v3_f230 = udiv i32 %v3_f228, 32
  %v3_f234 = mul nuw nsw i32 %v3_f230, 4
  store i32 %v2_f238, i32* @lr, align 4
  %v2_f23c = add i32 %v3_f234, %v2_f238
  store i32 %v2_f23c, i32* %r3.global-to-local, align 4
  %v1_f240 = add i32 %v2_f23c, -312
  %v2_f240 = inttoptr i32 %v1_f240 to i32*
  %v3_f240 = load i32, i32* %v2_f240, align 4
  %v1_f244 = urem i32 %v3_f228, 32
  store i32 %v1_f244, i32* %r1.global-to-local, align 4
  %v7_f248 = shl i32 1, %v1_f244
  %v8_f248 = or i32 %v3_f240, %v7_f248
  store i32 %v8_f248, i32* %r2.global-to-local, align 4
  %v0_f24c = load i32, i32* @r5, align 4
  %v3_f24c = icmp uge i32 %v0_f24c, %v3_f228
  store i1 %v3_f24c, i1* %cpsr_c.global-to-local, align 1
  %v9_f24c = icmp eq i32 %v0_f24c, %v3_f228
  store i1 %v9_f24c, i1* %cpsr_z.global-to-local, align 1
  %v5_f250 = icmp slt i32 %v0_f24c, %v3_f228
  br i1 %v5_f250, label %bb427, label %bb428

bb427:                                            ; preds = %dec_label_pc_f228
  store i32 %v3_f228, i32* @r5, align 4
  br label %bb428

bb428:                                            ; preds = %dec_label_pc_f228, %bb427
  store i32 %v8_f248, i32* %v2_f240, align 4
  br label %bb378

dec_label_pc_f25c:                                ; preds = %dec_label_pc_f1c0
  store i32 %v2_ec64, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f26c = load i32, i32* @r4, align 4
  store i32 %v0_f26c, i32* %r0.global-to-local, align 4
  %v0_f270 = load i32, i32* @r6, align 4
  %v6_f270 = trunc i32 %v0_f270 to i8
  store i8 %v6_f270, i8* %stack_var_-56, align 1
  %v6_f274 = call i32 @function_102c8(i32 %v0_f26c, i32 %v2_ec64, i32 1, i32 16384)
  store i32 %v2_ec50, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f288 = load i32, i32* @r4, align 4
  store i32 %v0_f288, i32* %r0.global-to-local, align 4
  %v4_f28c = call i32 @function_102c8(i32 %v0_f288, i32 %v2_ec50, i32 4, i32 16384)
  %v2_f294 = ptrtoint i32* %stack_var_-42 to i32
  store i32 %v2_f294, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f2a0 = load i32, i32* @r4, align 4
  store i32 %v0_f2a0, i32* %r0.global-to-local, align 4
  %v4_f2a4 = call i32 @function_102c8(i32 %v0_f2a0, i32 %v2_f294, i32 2, i32 16384)
  %v0_f2a8 = load i32, i32* %r8.global-to-local, align 4
  %v1_f2a8 = add i32 %v0_f2a8, 12
  store i32 %v1_f2a8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f2b4 = load i32, i32* @r4, align 4
  store i32 %v0_f2b4, i32* %r0.global-to-local, align 4
  %v4_f2b8 = call i32 @function_102c8(i32 %v0_f2b4, i32 %v1_f2a8, i32 1, i32 16384)
  store i32 %v4_f2b8, i32* %r0.global-to-local, align 4
  %v0_f2bc = load i32, i32* %r8.global-to-local, align 4
  %v1_f2bc = inttoptr i32 %v0_f2bc to i32*
  %v2_f2bc = load i32, i32* %v1_f2bc, align 4
  store i32 %v2_f2bc, i32* %r1.global-to-local, align 4
  %v1_f2c0 = add i32 %v0_f2bc, 12
  %v2_f2c0 = inttoptr i32 %v1_f2c0 to i8*
  %v3_f2c0 = load i8, i8* %v2_f2c0, align 1
  %v4_f2c0 = zext i8 %v3_f2c0 to i32
  store i32 %v4_f2c0, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f2c8 = load i32, i32* @r4, align 4
  store i32 %v0_f2c8, i32* %r0.global-to-local, align 4
  %v4_f2cc = call i32 @function_102c8(i32 %v0_f2c8, i32 %v2_f2bc, i32 %v4_f2c0, i32 16384)
  %v0_f2d0 = load i32, i32* %r8.global-to-local, align 4
  %v1_f2d0 = add i32 %v0_f2d0, 13
  store i32 %v1_f2d0, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f2dc = load i32, i32* @r4, align 4
  store i32 %v0_f2dc, i32* %r0.global-to-local, align 4
  %v4_f2e0 = call i32 @function_102c8(i32 %v0_f2dc, i32 %v1_f2d0, i32 1, i32 16384)
  %v0_f2e4 = load i32, i32* @r4, align 4
  store i32 %v0_f2e4, i32* %r0.global-to-local, align 4
  %v0_f2e8 = load i32, i32* %r8.global-to-local, align 4
  %v1_f2e8 = add i32 %v0_f2e8, 13
  %v2_f2e8 = inttoptr i32 %v1_f2e8 to i8*
  %v3_f2e8 = load i8, i8* %v2_f2e8, align 1
  %v4_f2e8 = zext i8 %v3_f2e8 to i32
  store i32 %v4_f2e8, i32* %r2.global-to-local, align 4
  %v1_f2ec = add i32 %v0_f2e8, 4
  %v2_f2ec = inttoptr i32 %v1_f2ec to i32*
  %v3_f2ec = load i32, i32* %v2_f2ec, align 4
  store i32 %v3_f2ec, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f2f4 = call i32 @function_102c8(i32 %v0_f2e4, i32 %v3_f2ec, i32 %v4_f2e8, i32 16384)
  %v0_f2f8 = load i32, i32* @r4, align 4
  store i32 %v0_f2f8, i32* %r0.global-to-local, align 4
  %v1_f2fc = call i32 @function_10008(i32 %v0_f2f8)
  store i32 %v1_f2fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f300

dec_label_pc_f300:                                ; preds = %dec_label_pc_f1a4, %dec_label_pc_f25c
  %v0_f300 = load i32, i32* @r6, align 4
  store i32 %v0_f300, i32* %r0.global-to-local, align 4
  %v1_f304 = call i32 @function_119dc(i32 %v0_f300)
  store i32 %v1_f304, i32* %r0.global-to-local, align 4
  ret i32 %v1_f304

; uselistorder directives
  uselistorder i32 %v0_f24c, { 0, 2, 1 }
  uselistorder i32 %v1_f244, { 1, 0 }
  uselistorder i1 %v7_f1b4, { 1, 0 }
  uselistorder i32 %v3_f1b0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_f164, { 1, 0 }
  uselistorder i32 %v3_f120, { 1, 0 }
  uselistorder i1 %v3_f110, { 1, 0 }
  uselistorder i32 %v0_f0f4, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_f0c8, { 0, 2, 1, 3 }
  uselistorder i32 %v4_f044, { 1, 0, 2 }
  uselistorder i32 %v3_eff0, { 1, 0 }
  uselistorder i1 %v2_efb8, { 1, 0 }
  uselistorder i32 %.432, { 1, 0 }
  uselistorder i1 %v7_efa0, { 1, 0 }
  uselistorder i32 %v0_ef9c, { 2, 1, 0, 3 }
  uselistorder i1 %v7_ef74, { 1, 0 }
  uselistorder i32 %v0_ef74, { 2, 1, 0, 3 }
  uselistorder i32 %v0_eef8, { 1, 0 }
  uselistorder i32 %v0_eedc.pr, { 1, 0 }
  uselistorder i32 %v0_eea8, { 1, 2, 0 }
  uselistorder i32 %v0_ee6c, { 1, 0 }
  uselistorder i32 %v1_ee64, { 1, 0 }
  uselistorder i32 %v1_ee5c, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_ee58, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_ee58, { 0, 2, 1 }
  uselistorder i32 %v0_ee38.pr, { 1, 0 }
  uselistorder i32 %v0_ee18.pr, { 1, 0 }
  uselistorder i1 %v7_edf0, { 1, 0 }
  uselistorder i1 %v2_ede0, { 1, 0, 2 }
  uselistorder i1 %v2_edc4, { 1, 0, 2 }
  uselistorder i32 %v1_ede4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_edb8, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_ede8, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_ed6c, { 1, 0 }
  uselistorder i32 %v0_f164, { 1, 0, 2 }
  uselistorder i1 %v0_ed5c, { 1, 0 }
  uselistorder i32 %v4_ed50, { 1, 0, 2 }
  uselistorder i32 %v1_ed1c, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_ed1c, { 0, 2, 1 }
  uselistorder i32 %v0_ed14, { 1, 0 }
  uselistorder i1 %v7_ed10, { 1, 0 }
  uselistorder i1 %v7_ed08, { 1, 0 }
  uselistorder i1 %v8_ed00, { 1, 0 }
  uselistorder i1 %v7_ece4, { 1, 0 }
  uselistorder i1 %v7_ecdc, { 1, 0 }
  uselistorder i1 %v8_ecd4, { 1, 0 }
  uselistorder i32 %v1_ecbc, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v7_ec8c, { 1, 0 }
  uselistorder i32 %v1_ec34, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_ec34, { 0, 2, 1 }
  uselistorder i32 %v0_ec2c, { 1, 0 }
  uselistorder i1 %v7_ec28, { 1, 0 }
  uselistorder i1 %v7_ec20, { 1, 0 }
  uselistorder i1 %v7_ec18, { 1, 0 }
  uselistorder i1 %v8_ec10, { 1, 0 }
  uselistorder i1 %v7_ebf4, { 1, 0 }
  uselistorder i1 %v7_ebec, { 1, 0 }
  uselistorder i1 %v7_ebe4, { 1, 0 }
  uselistorder i1 %v8_ebdc, { 1, 0 }
  uselistorder i32 %v1_ebc4, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_eb60, { 1, 0 }
  uselistorder i8 %v3_eb58, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_eb50, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_eb50, { 0, 2, 1 }
  uselistorder i32 %v0_eb48, { 1, 0 }
  uselistorder i1 %v7_eb44, { 1, 0 }
  uselistorder i1 %v7_eb3c, { 1, 0 }
  uselistorder i1 %v7_eb34, { 1, 0 }
  uselistorder i1 %v7_eb20, { 1, 0 }
  uselistorder i1 %v7_eb18, { 1, 0 }
  uselistorder i1 %v7_eb10, { 1, 0 }
  uselistorder i1 %v8_eb08, { 1, 0 }
  uselistorder i32 %v1_eaf0, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_ea8c, { 1, 0 }
  uselistorder i8 %v3_ea84, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ea7c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_ea7c, { 0, 2, 1 }
  uselistorder i32 %v0_ea74, { 1, 0 }
  uselistorder i1 %v7_ea70, { 1, 0 }
  uselistorder i1 %v7_ea68, { 1, 0 }
  uselistorder i1 %v7_ea60, { 1, 0 }
  uselistorder i1 %v7_ea4c, { 1, 0 }
  uselistorder i1 %v7_ea44, { 1, 0 }
  uselistorder i1 %v7_ea3c, { 1, 0 }
  uselistorder i1 %v8_ea34, { 1, 0 }
  uselistorder i32 %v1_ea1c, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_e9b8, { 1, 0 }
  uselistorder i8 %v3_e9b0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e9a8, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_e9a8, { 0, 2, 1 }
  uselistorder i32 %v0_e9a0, { 1, 0 }
  uselistorder i1 %v7_e99c, { 1, 0 }
  uselistorder i1 %v7_e994, { 1, 0 }
  uselistorder i1 %v7_e98c, { 1, 0 }
  uselistorder i1 %v7_e978, { 1, 0 }
  uselistorder i1 %v7_e970, { 1, 0 }
  uselistorder i1 %v7_e968, { 1, 0 }
  uselistorder i1 %v8_e960, { 1, 0 }
  uselistorder i32 %v1_e948, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_e8e4, { 1, 0 }
  uselistorder i8 %v3_e8dc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e8d4, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_e8d4, { 0, 2, 1 }
  uselistorder i32 %v0_e8cc, { 1, 0 }
  uselistorder i1 %v7_e8c8, { 1, 0 }
  uselistorder i1 %v7_e8c0, { 1, 0 }
  uselistorder i1 %v7_e8b8, { 1, 0 }
  uselistorder i1 %v7_e8a4, { 1, 0 }
  uselistorder i1 %v7_e89c, { 1, 0 }
  uselistorder i1 %v7_e894, { 1, 0 }
  uselistorder i1 %v8_e88c, { 1, 0 }
  uselistorder i32 %v1_e874, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_e810, { 1, 0 }
  uselistorder i8 %v3_e808, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e800, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_e800, { 0, 2, 1 }
  uselistorder i32 %v0_e7f8, { 1, 0 }
  uselistorder i1 %v7_e7f4, { 1, 0 }
  uselistorder i1 %v7_e7ec, { 1, 0 }
  uselistorder i1 %v7_e7e4, { 1, 0 }
  uselistorder i1 %v7_e7d0, { 1, 0 }
  uselistorder i1 %v7_e7c8, { 1, 0 }
  uselistorder i1 %v7_e7c0, { 1, 0 }
  uselistorder i1 %v8_e7b8, { 1, 0 }
  uselistorder i32 %v1_e7a0, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_e78c, { 1, 2, 0 }
  uselistorder i32 %v2_e778, { 1, 0 }
  uselistorder i32 %v0_e778, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_e774, { 2, 1, 4, 0, 5, 3 }
  uselistorder i32 %v1_e74c, { 2, 1, 0 }
  uselistorder i1 %v7_e728, { 1, 0 }
  uselistorder i32 %v4_e724, { 1, 0, 2 }
  uselistorder i32 %v1_e6e4, { 0, 2, 3, 4, 1 }
  uselistorder i1 %v1_e6c0, { 1, 0 }
  uselistorder i32 %v1_e6b4, { 2, 1, 0 }
  uselistorder i32 %v1_e6b0, { 1, 0 }
  uselistorder i32 %v0_e654, { 2, 21, 4, 3, 20, 19, 5, 6, 23, 7, 8, 22, 9, 10, 24, 11, 12, 27, 13, 14, 25, 15, 16, 26, 17, 18, 28, 29, 1, 0 }
  uselistorder i32 %v1_e630, { 1, 2, 3, 0 }
  uselistorder i32 %v3_e62c, { 1, 0 }
  uselistorder i32 %v4_e610, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_e5fc, { 1, 0, 2 }
  uselistorder i32 %v3_e5f8, { 1, 0, 2 }
  uselistorder i32 %v0_f000, { 1, 0, 2 }
  uselistorder i32 %v3_e5c4, { 1, 0 }
  uselistorder i32 %v1_e5a8, { 3, 2, 1, 0 }
  uselistorder i32 %v3_e5a4, { 1, 0 }
  uselistorder i32 %v3_e59c, { 1, 2, 0 }
  uselistorder i1 %v7_e588, { 1, 0 }
  uselistorder i32 %v3_e584, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_e578, { 1, 0 }
  uselistorder i32 %v2_ef8c, { 1, 0, 2, 3 }
  uselistorder i32* %v2_ec6c, { 1, 2, 3, 0 }
  uselistorder i32 %v2_ec64, { 4, 5, 1, 0, 3, 6, 7, 2 }
  uselistorder i32 %v2_ec50, { 1, 0, 3, 2, 9, 8, 5, 7, 6, 4 }
  uselistorder i32 %v2_ee9c, { 1, 0 }
  uselistorder i32 %v1_e528, { 0, 1, 3, 2 }
  uselistorder i32 %v0_e528, { 0, 1, 3, 2 }
  uselistorder i32 %v1_e4f4, { 2, 1, 0 }
  uselistorder i32 %v1_e4f0, { 1, 0 }
  uselistorder i1 %v2_e4d0, { 1, 0, 2 }
  uselistorder i32 %v0_e4cc, { 1, 0, 2 }
  uselistorder i1 %v7_e498, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_e498, { 1, 0, 2 }
  uselistorder i32 %v2_e490, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_e484, { 1, 0, 2 }
  uselistorder i32 %v0_e488, { 1, 0 }
  uselistorder i32 %v1_e46c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_e460, { 0, 1, 3, 2 }
  uselistorder i32 %v0_e460, { 0, 2, 1 }
  uselistorder i32 %v1_e450, { 1, 0 }
  uselistorder i32 %v3_f228, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v2_f238, { 0, 7, 1, 5, 2, 4, 3, 6 }
  uselistorder i32 %v1_e3a0, { 1, 0 }
  uselistorder i32 %v1_e388, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e394, { 0, 3, 2, 1 }
  uselistorder i32 %v0_e344, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_e338, { 2, 1, 0 }
  uselistorder i32 %v1_e318, { 2, 0, 1, 3, 4 }
  uselistorder i1 %v2_e2f4, { 1, 0 }
  uselistorder i1 %v9_e2c0, { 1, 0 }
  uselistorder i32 %v0_e270, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_e214, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_e1c4, { 1, 0 }
  uselistorder i32 %v5_e15c, { 1, 0 }
  uselistorder i1 %v2_e0a4, { 1, 0 }
  uselistorder i1 %v3_e088, { 1, 0, 2 }
  uselistorder i1 %v2_e074, { 1, 0 }
  uselistorder i1 %v2_e050, { 1, 0 }
  uselistorder i32 %v1_e000, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_dfec, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_dfe8, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v0_dfd0, { 1, 0 }
  uselistorder i32 %v0_dfa8, { 1, 0 }
  uselistorder i32 %stack_var_-1880.0, { 0, 1, 2, 3, 4, 5, 8, 11, 10, 6, 7, 9, 13, 12 }
  uselistorder i16 %v5_d2e0.le, { 0, 2, 1 }
  uselistorder i32 %v0_d2c4, { 3, 2, 0, 1 }
  uselistorder i1 %v7_d264, { 1, 0 }
  uselistorder i32 %v3_d25c, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_d248, { 1, 0 }
  uselistorder i32 %v0_d218, { 1, 0 }
  uselistorder i32 %storemerge308, { 1, 0 }
  uselistorder i32 %v0_cec8, { 2, 1, 3, 0, 4 }
  uselistorder i16* %stack_var_-52, { 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0, 2 }
  uselistorder i32* %stack_var_-96, { 2, 0, 1, 3 }
  uselistorder i32* %stack_var_-68, { 1, 0 }
  uselistorder i32* %stack_var_-224, { 1, 0 }
  uselistorder i32* %stack_var_-352, { 1, 0 }
  uselistorder i8* %stack_var_-56, { 8, 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32* %stack_var_-60, { 6, 7, 8, 0, 9, 1, 10, 4, 11, 2, 12, 3, 13, 5, 14 }
  uselistorder i32* %stack_var_-42, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 3, 5, 0, 1, 9, 2, 4, 6, 7, 8, 10 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r3.global-to-local, { 59, 60, 61, 62, 63, 64, 65, 70, 71, 66, 72, 73, 74, 75, 77, 79, 78, 80, 81, 82, 83, 84, 21, 85, 0, 67, 68, 22, 23, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 69, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 112, 111, 108, 113, 153, 154, 114, 115, 155, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 76, 132, 133, 134, 135, 137, 136, 139, 138, 152, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151 }
  uselistorder i32* %r2.global-to-local, { 36, 37, 38, 39, 40, 41, 42, 50, 43, 44, 45, 51, 52, 53, 54, 10, 0, 46, 47, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 48, 49, 225, 226, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 223, 224, 67, 68, 70, 69, 66, 227, 71, 228, 72, 229, 230, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 297, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222 }
  uselistorder i32* %r1.global-to-local, { 39, 40, 41, 42, 43, 44, 45, 54, 46, 47, 48, 49, 55, 56, 57, 58, 59, 8, 1, 2, 50, 51, 9, 10, 0, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 213, 214, 52, 53, 60, 61, 62, 63, 64, 66, 67, 68, 65, 69, 70, 71, 72, 215, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 283, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212 }
  uselistorder i32* %r0.global-to-local, { 82, 81, 84, 83, 85, 86, 87, 89, 88, 90, 91, 92, 120, 94, 93, 95, 97, 96, 98, 99, 100, 102, 101, 6, 125, 121, 123, 124, 126, 129, 128, 127, 20, 22, 21, 23, 26, 24, 105, 134, 0, 2, 1, 103, 104, 106, 107, 108, 109, 111, 110, 112, 25, 27, 29, 28, 3, 4, 7, 5, 9, 11, 13, 12, 10, 8, 15, 14, 16, 17, 18, 19, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 43, 42, 45, 44, 47, 46, 48, 49, 51, 50, 53, 52, 55, 54, 56, 57, 59, 58, 61, 60, 63, 62, 64, 65, 67, 66, 69, 68, 71, 70, 72, 73, 75, 74, 77, 76, 79, 78, 80, 114, 116, 115, 117, 113, 118, 119, 380, 130, 131, 132, 137, 135, 136, 142, 138, 139, 133, 140, 141, 143, 145, 144, 146, 151, 147, 150, 148, 149, 152, 154, 155, 153, 158, 156, 157, 161, 159, 160, 163, 162, 122, 311, 165, 164, 166, 168, 167, 170, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 379, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 299, 301, 306, 302, 303, 304, 305, 307, 308, 309, 310 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 21, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i1* %cpsr_z.global-to-local, { 122, 109, 111, 176, 177, 126, 127, 142, 0, 220, 32, 33, 35, 112, 125, 114, 116, 117, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 129, 115, 20, 21, 26, 22, 23, 24, 25, 27, 28, 29, 30, 31, 34, 113, 36, 42, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 49, 50, 51, 55, 56, 57, 58, 59, 60, 64, 65, 66, 61, 62, 63, 67, 68, 69, 70, 71, 72, 76, 77, 78, 73, 74, 75, 79, 80, 81, 82, 83, 84, 88, 89, 90, 85, 86, 87, 91, 92, 93, 94, 95, 96, 100, 101, 102, 97, 98, 99, 103, 104, 105, 106, 107, 108, 118, 119, 120, 121, 128, 131, 130, 132, 134, 135, 136, 138, 139, 140, 141, 133, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 155, 152, 153, 178, 179, 171, 158, 172, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 110, 198, 199, 200, 201, 202, 124, 203, 204, 205, 123, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 181, 219 }
  uselistorder i1* %cpsr_c.global-to-local, { 119, 107, 108, 123, 164, 166, 124, 138, 0, 213, 29, 30, 32, 110, 109, 111, 113, 114, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 118, 112, 17, 18, 23, 19, 20, 21, 22, 24, 25, 26, 27, 28, 31, 122, 33, 39, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 49, 50, 51, 46, 47, 48, 52, 53, 54, 55, 56, 57, 61, 62, 63, 58, 59, 60, 64, 65, 66, 67, 68, 69, 73, 74, 75, 70, 71, 72, 76, 77, 78, 79, 80, 81, 85, 86, 87, 82, 83, 84, 88, 89, 90, 91, 92, 93, 97, 98, 99, 94, 95, 96, 100, 101, 102, 103, 104, 105, 115, 116, 117, 125, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 126, 130, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 149, 146, 147, 169, 170, 159, 152, 161, 153, 154, 155, 156, 157, 158, 160, 162, 163, 165, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 121, 190, 191, 192, 193, 194, 120, 195, 196, 197, 106, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 171, 212 }
  uselistorder i32 ptrtoint (i16** @global_var_202d8.55 to i32), { 3, 0, 1, 2 }
  uselistorder i16* bitcast (i16** @global_var_1e29c.106 to i16*), { 1, 0 }
  uselistorder i16** @global_var_1e29c.106, { 1, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_1e29c.106 to i32), { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_101dc, { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 2, 3, 7, 4, 5 }
  uselistorder i8 30, { 4, 0, 1, 5, 2, 3 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_155fc.479 to i32), { 5, 7, 6, 8, 0, 9, 3, 10, 1, 11, 2, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @function_102c8, { 11, 10, 9, 8, 7, 6, 5, 27, 23, 22, 26, 25, 24, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 4, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 2, 3, 8, 9, 4, 5, 6, 7, 10, 11 }
  uselistorder i8 34, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 36, { 4, 5, 0, 1, 2, 3, 6, 7, 8, 9, 18, 19, 20, 21, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 24, 25 }
  uselistorder i8 35, { 4, 5, 6, 7, 0, 1, 2, 3, 8, 9, 10, 11, 20, 21, 22, 23, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27 }
  uselistorder i8 58, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 57, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 62, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i8 61, { 2, 3, 0, 1, 4, 5, 10, 11, 6, 7, 8, 9, 12, 13 }
  uselistorder i32 (i32)* @function_f32c, { 9, 18, 17, 8, 19, 16, 15, 14, 13, 12, 11, 10, 7, 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_f840, { 3, 1, 4, 2, 0 }
  uselistorder i32 (i32, i32*)* @function_f308, { 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 10, 18, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 (i32)* @function_f3cc, { 10, 9, 18, 17, 16, 15, 14, 13, 12, 11, 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_10254, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_fd60, { 1, 0 }
  uselistorder i32 284, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @function_cc94, { 2, 1, 0 }
  uselistorder i32 254, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 5, { 11, 0, 1, 3, 2, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_1028c, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_10300, { 8, 7, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_bfc8, { 8, 7, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i16 4873, { 1, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_bf78, { 10, 9, 2, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 19, 20, 21, 22, 23 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 223, { 2, 0, 1 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_155e8.461 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_154c0.411 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_15488.399 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_1544c.383 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_1542c.375 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15424.373 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_153ec.357 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_153dc.353 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_153d4.351 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_153b8.343 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15330.315 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_15328.313 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_15320.309 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_152fc.301 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_152ec.297 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_152c0.287 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_152b0.283 to i32), { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_152a8.281 to i32), { 1, 4, 2, 0, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15274.267 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_15250.257 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_151f0.235 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_1505c.225 to i32), { 0, 5, 1, 2, 3, 6, 4, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_15174.207 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15120.189 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15100.183 to i32), { 0, 6, 1, 7, 2, 3, 4, 8, 5, 9 }
  uselistorder i32 ptrtoint ([11 x i8]* @global_var_150f4.181 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_150ec.179 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_150e4.177 to i32), { 1, 3, 0, 4, 2, 5 }
  uselistorder i32 ptrtoint ([7 x i8]* @global_var_150d8.173 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([14 x i8]* @global_var_150c8.171 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_150b8.167 to i32), { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_151f4.163 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15098.159 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15090.157 to i32), { 1, 7, 2, 8, 0, 9, 3, 4, 5, 10, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_15088.155 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_1507c.153 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_15480.151 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15074.149 to i32), { 0, 7, 1, 8, 2, 9, 3, 10, 4, 5, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_1506c.147 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15064.145 to i32), { 0, 6, 3, 7, 1, 8, 2, 9, 4, 10, 5, 11 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15050.141 to i32), { 0, 6, 1, 7, 2, 3, 4, 8, 5, 9 }
  uselistorder i32 ptrtoint (i32* @global_var_15040.137 to i32), { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15548.131 to i32), { 7, 46, 8, 47, 9, 48, 10, 49, 0, 50, 11, 51, 12, 52, 13, 53, 1, 54, 2, 55, 3, 56, 14, 57, 4, 58, 15, 59, 5, 60, 16, 61, 17, 62, 18, 63, 6, 64, 19, 65, 20, 66, 21, 67, 22, 68, 23, 69, 24, 70, 25, 71, 26, 72, 27, 73, 28, 74, 29, 75, 30, 76, 31, 77, 32, 78, 33, 79, 34, 80, 35, 81, 36, 82, 37, 83, 38, 84, 39, 85, 40, 86, 41, 42, 43, 87, 44, 88, 45, 89 }
  uselistorder i32 (i32, i32, i32)* @function_cd5c, { 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_153a4.129 to i32), { 6, 56, 7, 57, 8, 58, 9, 59, 0, 60, 10, 61, 1, 62, 11, 63, 2, 64, 12, 65, 13, 66, 14, 67, 3, 68, 15, 69, 16, 70, 17, 71, 18, 72, 19, 73, 20, 74, 4, 75, 21, 76, 22, 77, 23, 78, 24, 79, 25, 80, 26, 81, 27, 82, 28, 83, 29, 84, 30, 85, 31, 86, 32, 87, 33, 88, 34, 89, 35, 90, 36, 91, 37, 92, 38, 93, 39, 94, 40, 95, 41, 96, 42, 97, 43, 98, 44, 45, 46, 99, 47, 100, 48, 101, 49, 102, 50, 103, 51, 104, 5, 105, 52, 106, 53, 107, 54, 108, 55, 109 }
  uselistorder i32 ptrtoint (i32* @global_var_15500.127 to i32), { 4, 16, 5, 17, 6, 18, 0, 19, 1, 20, 7, 21, 2, 22, 8, 23, 9, 24, 10, 25, 11, 26, 12, 27, 13, 28, 14, 29, 15, 30, 3, 31 }
  uselistorder i8* @global_var_1e291.124, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2 }
  uselistorder i8 6, { 2, 0, 3, 4, 5, 6, 1 }
  uselistorder i8 16, { 0, 1, 2, 4, 3, 12, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_1e284.118 to i32), { 1, 2, 0, 3, 4 }
  uselistorder i8* @global_var_1e290.119, { 1, 0 }
  uselistorder i32 10240, { 1, 0, 2 }
  uselistorder i8** @global_var_1e270.115, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1e270.115 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @function_cad8, { 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 13, 12, 11, 10, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_10340, { 9, 8, 7, 1, 6, 5, 4, 3, 2, 0 }
  uselistorder i32 2048, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32* @global_var_202ec.113, { 1, 2, 3, 4, 0, 5 }
  uselistorder i16 254, { 1, 2, 0 }
  uselistorder i32* @global_var_202e8.111, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 2, 3, 7, 0, 1, 4, 5, 6, 8 }
  uselistorder i32* @global_var_1e2a0.100, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32*)* @function_fcbc, { 0, 1, 2, 3, 4, 19, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22 }
  uselistorder i32 (i32)* @function_cb34, { 1, 0 }
  uselistorder i32* @global_var_202d4.42, { 3, 4, 0, 1, 2, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32 ptrtoint (i32* @global_var_202d4.42 to i32), { 1, 2, 3, 0, 4, 5, 6, 7 }
  uselistorder i32 ()* @function_f9e8, { 2, 1, 0 }
  uselistorder i32* @global_var_202f0.98, { 0, 2, 1 }
  uselistorder i32 ()* @function_fd2c, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f300, { 1, 0 }
  uselistorder label %bb428, { 1, 0 }
  uselistorder label %dec_label_pc_f21c, { 1, 0 }
  uselistorder label %dec_label_pc_e5d8.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e5d8.backedge.thread528, { 0, 3, 1, 2, 4 }
  uselistorder label %dec_label_pc_e5d8.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_efc0, { 1, 0 }
  uselistorder label %dec_label_pc_eef8, { 1, 0 }
  uselistorder label %dec_label_pc_eef4, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_eeec, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_eedc, { 1, 0 }
  uselistorder label %dec_label_pc_ee6c, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread114, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ee38, { 1, 0 }
  uselistorder label %.thread110, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ee18, { 1, 0 }
  uselistorder label %dec_label_pc_ee04, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_edc0, { 1, 0 }
  uselistorder label %dec_label_pc_edc0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_eda0, { 5, 3, 4, 1, 0, 6, 2 }
  uselistorder label %dec_label_pc_ed6c, { 1, 0 }
  uselistorder label %thread-pre-split103, { 1, 0 }
  uselistorder label %dec_label_pc_ed1c, { 1, 0 }
  uselistorder label %dec_label_pc_ec34, { 1, 0 }
  uselistorder label %dec_label_pc_eb68, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_eb50, { 1, 0 }
  uselistorder label %dec_label_pc_ea94, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_ea7c, { 1, 0 }
  uselistorder label %dec_label_pc_e9c0, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_e9a8, { 1, 0 }
  uselistorder label %dec_label_pc_e8ec, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_e8d4, { 1, 0 }
  uselistorder label %dec_label_pc_e818, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_e800, { 1, 0 }
  uselistorder label %dec_label_pc_e6e0, { 6, 1, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb390, { 1, 0 }
  uselistorder label %bb388, { 1, 0 }
  uselistorder label %dec_label_pc_e6a4, { 1, 0 }
  uselistorder label %dec_label_pc_e63c, { 1, 0 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_e5f0, { 1, 0 }
  uselistorder label %dec_label_pc_e5e0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e5e0.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_e5b8, { 1, 0 }
  uselistorder label %dec_label_pc_e510, { 1, 0 }
  uselistorder label %bb384, { 1, 0 }
  uselistorder label %bb382, { 1, 0 }
  uselistorder label %bb380, { 1, 0 }
  uselistorder label %bb378, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_e404.dec_label_pc_e404_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e3e4.dec_label_pc_e3e4_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e3d8, { 4, 5, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_e3d0, { 1, 0 }
  uselistorder label %dec_label_pc_e3ac, { 1, 0 }
  uselistorder label %dec_label_pc_e388, { 1, 0 }
  uselistorder label %dec_label_pc_e23c, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_e228, { 1, 0 }
  uselistorder label %.thread39, { 1, 0 }
  uselistorder label %dec_label_pc_e0b4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e090, { 1, 0 }
  uselistorder label %dec_label_pc_e084, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e060, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e03c, { 1, 0 }
  uselistorder label %bb350, { 1, 0 }
  uselistorder label %dec_label_pc_dfe8, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_d2c4, { 1, 0 }
}

define i32 @function_f308(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_f308:
  store i32 ptrtoint (i32* @global_var_202f8.490 to i32), i32* @r2, align 4
  %v3_f30c = mul i32 %arg1, 8
  %v2_f310 = add i32 %v3_f30c, ptrtoint (i32* @global_var_202f8.490 to i32)
  store i32 %v2_f310, i32* @r3, align 4
  %v2_f314 = icmp eq i32* %arg2, null
  br i1 %v2_f314, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_f308
  %v3_f31c4 = inttoptr i32 %v2_f310 to i32*
  %v4_f31c5 = load i32, i32* %v3_f31c4, align 4
  br label %bb7

bb:                                               ; preds = %dec_label_pc_f308
  %v2_f318 = add i32 %v3_f30c, add (i32 ptrtoint (i32* @global_var_202f8.490 to i32), i32 4)
  %v3_f318 = inttoptr i32 %v2_f318 to i16*
  %v4_f318 = load i16, i16* %v3_f318, align 4
  %v5_f318 = zext i16 %v4_f318 to i32
  store i32 %v5_f318, i32* @r3, align 4
  %v3_f31c = inttoptr i32 %v2_f310 to i32*
  %v4_f31c = load i32, i32* %v3_f31c, align 4
  store i32 %v5_f318, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_f31c6 = phi i32 [ %v4_f31c5, %.thread ], [ %v4_f31c, %bb ]
  ret i32 %v4_f31c6

; uselistorder directives
  uselistorder i32 %v2_f310, { 1, 0, 2 }
  uselistorder i32 %v3_f30c, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_f32c(i32 %arg1) local_unnamed_addr {
dec_label_pc_f32c:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f334 = mul i32 %arg1, 8
  %v2_f338 = add i32 %v3_f334, ptrtoint (i32* @global_var_202f8.490 to i32)
  %v2_f33c = load i32, i32* inttoptr (i32 123028 to i32*), align 4
  %v1_f340 = add i32 %v3_f334, add (i32 ptrtoint (i32* @global_var_202f8.490 to i32), i32 4)
  %v2_f340 = inttoptr i32 %v1_f340 to i16*
  %v3_f340 = load i16, i16* %v2_f340, align 4
  %v3_f344 = udiv i32 %v2_f33c, 256
  %v2_f348 = icmp eq i16 %v3_f340, 0
  store i1 %v2_f348, i1* @cpsr_z, align 1
  %v3_f34c = udiv i32 %v2_f33c, 65536
  store i32 %v3_f34c, i32* @r3, align 4
  %v3_f350 = load i32, i32* @r4, align 4
  store i32 %v3_f350, i32* %stack_var_-16, align 4
  %v1_f354 = urem i32 %v3_f344, 256
  store i32 %v1_f354, i32* %r6.global-to-local, align 4
  %v1_f358 = urem i32 %v3_f34c, 256
  store i32 %v1_f358, i32* %r5.global-to-local, align 4
  %v3_f35c = udiv i32 %v2_f33c, 16777216
  store i32 %v3_f35c, i32* %r4.global-to-local, align 4
  %v1_f360 = urem i32 %v2_f33c, 256
  store i32 %v1_f360, i32* %lr.global-to-local, align 4
  br i1 %v2_f348, label %dec_label_pc_f3bc, label %dec_label_pc_f368

dec_label_pc_f368:                                ; preds = %dec_label_pc_f32c
  store i32 0, i32* @ip, align 4
  %v1_f36c = inttoptr i32 %v2_f338 to i32*
  br label %dec_label_pc_f36c

dec_label_pc_f36c:                                ; preds = %dec_label_pc_f36c.dec_label_pc_f36c_crit_edge, %dec_label_pc_f368
  %v0_f374 = phi i32 [ %v0_f374.pre, %dec_label_pc_f36c.dec_label_pc_f36c_crit_edge ], [ %v1_f360, %dec_label_pc_f368 ]
  %v2_f378 = phi i32 [ %v1_f3b0, %dec_label_pc_f36c.dec_label_pc_f36c_crit_edge ], [ 0, %dec_label_pc_f368 ]
  %v2_f36c = load i32, i32* %v1_f36c, align 4
  %v2_f370 = add i32 %v2_f36c, %v2_f378
  %v3_f370 = inttoptr i32 %v2_f370 to i8*
  %v4_f370 = load i8, i8* %v3_f370, align 1
  %v6_f370 = zext i8 %v4_f370 to i32
  %v2_f374 = xor i32 %v6_f370, %v0_f374
  %v1_f378 = trunc i32 %v2_f374 to i8
  store i8 %v1_f378, i8* %v3_f370, align 1
  %v2_f37c = load i32, i32* %v1_f36c, align 4
  %v0_f380 = load i32, i32* @ip, align 4
  %v2_f380 = add i32 %v0_f380, %v2_f37c
  %v3_f380 = inttoptr i32 %v2_f380 to i8*
  %v4_f380 = load i8, i8* %v3_f380, align 1
  %v6_f380 = zext i8 %v4_f380 to i32
  %v0_f384 = load i32, i32* %r6.global-to-local, align 4
  %v2_f384 = xor i32 %v0_f384, %v6_f380
  %v1_f388 = trunc i32 %v2_f384 to i8
  store i8 %v1_f388, i8* %v3_f380, align 1
  %v2_f38c = load i32, i32* %v1_f36c, align 4
  %v0_f390 = load i32, i32* @ip, align 4
  %v2_f390 = add i32 %v0_f390, %v2_f38c
  %v3_f390 = inttoptr i32 %v2_f390 to i8*
  %v4_f390 = load i8, i8* %v3_f390, align 1
  %v6_f390 = zext i8 %v4_f390 to i32
  %v0_f394 = load i32, i32* %r5.global-to-local, align 4
  %v2_f394 = xor i32 %v0_f394, %v6_f390
  %v1_f398 = trunc i32 %v2_f394 to i8
  store i8 %v1_f398, i8* %v3_f390, align 1
  %v2_f39c = load i32, i32* %v1_f36c, align 4
  %v0_f3a0 = load i32, i32* @ip, align 4
  %v2_f3a0 = add i32 %v0_f3a0, %v2_f39c
  %v3_f3a0 = inttoptr i32 %v2_f3a0 to i8*
  %v4_f3a0 = load i8, i8* %v3_f3a0, align 1
  %v6_f3a0 = zext i8 %v4_f3a0 to i32
  %v0_f3a4 = load i32, i32* %r4.global-to-local, align 4
  %v2_f3a4 = xor i32 %v0_f3a4, %v6_f3a0
  store i32 %v2_f3a4, i32* @r3, align 4
  %v1_f3a8 = trunc i32 %v2_f3a4 to i8
  store i8 %v1_f3a8, i8* %v3_f3a0, align 1
  %v3_f3ac = load i16, i16* %v2_f340, align 4
  %v4_f3ac = zext i16 %v3_f3ac to i32
  %v0_f3b0 = load i32, i32* @ip, align 4
  %v1_f3b0 = add i32 %v0_f3b0, 1
  store i32 %v1_f3b0, i32* @ip, align 4
  %v9_f3b4 = icmp eq i32 %v4_f3ac, %v1_f3b0
  store i1 %v9_f3b4, i1* @cpsr_z, align 1
  %v8_f3b8 = icmp sgt i32 %v4_f3ac, %v1_f3b0
  br i1 %v8_f3b8, label %dec_label_pc_f36c.dec_label_pc_f36c_crit_edge, label %dec_label_pc_f3bc.loopexit

dec_label_pc_f36c.dec_label_pc_f36c_crit_edge:    ; preds = %dec_label_pc_f36c
  %v0_f374.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_f36c

dec_label_pc_f3bc.loopexit:                       ; preds = %dec_label_pc_f36c
  %v2_f3bc.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_f3bc

dec_label_pc_f3bc:                                ; preds = %dec_label_pc_f3bc.loopexit, %dec_label_pc_f32c
  %v2_f3bc = phi i32 [ %v2_f3bc.pre, %dec_label_pc_f3bc.loopexit ], [ %v3_f350, %dec_label_pc_f32c ]
  store i32 %v2_f3bc, i32* @r4, align 4
  ret i32 %v2_f338

; uselistorder directives
  uselistorder i32 %v1_f3b0, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f360, { 1, 0 }
  uselistorder i32 %v3_f34c, { 1, 0 }
  uselistorder i32 %v2_f33c, { 3, 0, 1, 2 }
  uselistorder i32 %v2_f338, { 1, 0 }
  uselistorder i32 %v3_f334, { 1, 0 }
}

define i32 @function_f3cc(i32 %arg1) local_unnamed_addr {
dec_label_pc_f3cc:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f3d4 = mul i32 %arg1, 8
  %v2_f3d8 = add i32 %v3_f3d4, ptrtoint (i32* @global_var_202f8.490 to i32)
  %v2_f3dc = load i32, i32* inttoptr (i32 123028 to i32*), align 4
  %v1_f3e0 = add i32 %v3_f3d4, add (i32 ptrtoint (i32* @global_var_202f8.490 to i32), i32 4)
  %v2_f3e0 = inttoptr i32 %v1_f3e0 to i16*
  %v3_f3e0 = load i16, i16* %v2_f3e0, align 4
  %v3_f3e4 = udiv i32 %v2_f3dc, 256
  %v2_f3e8 = icmp eq i16 %v3_f3e0, 0
  %v3_f3ec = udiv i32 %v2_f3dc, 65536
  %v3_f3f0 = load i32, i32* @r4, align 4
  store i32 %v3_f3f0, i32* %stack_var_-16, align 4
  %v1_f3f4 = urem i32 %v3_f3e4, 256
  store i32 %v1_f3f4, i32* %r6.global-to-local, align 4
  %v1_f3f8 = urem i32 %v3_f3ec, 256
  store i32 %v1_f3f8, i32* %r5.global-to-local, align 4
  %v3_f3fc = udiv i32 %v2_f3dc, 16777216
  store i32 %v3_f3fc, i32* %r4.global-to-local, align 4
  %v1_f400 = urem i32 %v2_f3dc, 256
  store i32 %v1_f400, i32* %lr.global-to-local, align 4
  br i1 %v2_f3e8, label %dec_label_pc_f45c, label %dec_label_pc_f408

dec_label_pc_f408:                                ; preds = %dec_label_pc_f3cc
  store i32 0, i32* @ip, align 4
  %v1_f40c = inttoptr i32 %v2_f3d8 to i32*
  br label %dec_label_pc_f40c

dec_label_pc_f40c:                                ; preds = %dec_label_pc_f40c.dec_label_pc_f40c_crit_edge, %dec_label_pc_f408
  %v0_f414 = phi i32 [ %v0_f414.pre, %dec_label_pc_f40c.dec_label_pc_f40c_crit_edge ], [ %v1_f400, %dec_label_pc_f408 ]
  %v2_f418 = phi i32 [ %v1_f450, %dec_label_pc_f40c.dec_label_pc_f40c_crit_edge ], [ 0, %dec_label_pc_f408 ]
  %v2_f40c = load i32, i32* %v1_f40c, align 4
  %v2_f410 = add i32 %v2_f40c, %v2_f418
  %v3_f410 = inttoptr i32 %v2_f410 to i8*
  %v4_f410 = load i8, i8* %v3_f410, align 1
  %v6_f410 = zext i8 %v4_f410 to i32
  %v2_f414 = xor i32 %v6_f410, %v0_f414
  %v1_f418 = trunc i32 %v2_f414 to i8
  store i8 %v1_f418, i8* %v3_f410, align 1
  %v2_f41c = load i32, i32* %v1_f40c, align 4
  %v0_f420 = load i32, i32* @ip, align 4
  %v2_f420 = add i32 %v0_f420, %v2_f41c
  %v3_f420 = inttoptr i32 %v2_f420 to i8*
  %v4_f420 = load i8, i8* %v3_f420, align 1
  %v6_f420 = zext i8 %v4_f420 to i32
  %v0_f424 = load i32, i32* %r6.global-to-local, align 4
  %v2_f424 = xor i32 %v0_f424, %v6_f420
  %v1_f428 = trunc i32 %v2_f424 to i8
  store i8 %v1_f428, i8* %v3_f420, align 1
  %v2_f42c = load i32, i32* %v1_f40c, align 4
  %v0_f430 = load i32, i32* @ip, align 4
  %v2_f430 = add i32 %v0_f430, %v2_f42c
  %v3_f430 = inttoptr i32 %v2_f430 to i8*
  %v4_f430 = load i8, i8* %v3_f430, align 1
  %v6_f430 = zext i8 %v4_f430 to i32
  %v0_f434 = load i32, i32* %r5.global-to-local, align 4
  %v2_f434 = xor i32 %v0_f434, %v6_f430
  %v1_f438 = trunc i32 %v2_f434 to i8
  store i8 %v1_f438, i8* %v3_f430, align 1
  %v2_f43c = load i32, i32* %v1_f40c, align 4
  %v0_f440 = load i32, i32* @ip, align 4
  %v2_f440 = add i32 %v0_f440, %v2_f43c
  %v3_f440 = inttoptr i32 %v2_f440 to i8*
  %v4_f440 = load i8, i8* %v3_f440, align 1
  %v6_f440 = zext i8 %v4_f440 to i32
  %v0_f444 = load i32, i32* %r4.global-to-local, align 4
  %v2_f444 = xor i32 %v0_f444, %v6_f440
  %v1_f448 = trunc i32 %v2_f444 to i8
  store i8 %v1_f448, i8* %v3_f440, align 1
  %v3_f44c = load i16, i16* %v2_f3e0, align 4
  %v4_f44c = zext i16 %v3_f44c to i32
  %v0_f450 = load i32, i32* @ip, align 4
  %v1_f450 = add i32 %v0_f450, 1
  store i32 %v1_f450, i32* @ip, align 4
  %v8_f458 = icmp sgt i32 %v4_f44c, %v1_f450
  br i1 %v8_f458, label %dec_label_pc_f40c.dec_label_pc_f40c_crit_edge, label %dec_label_pc_f45c.loopexit

dec_label_pc_f40c.dec_label_pc_f40c_crit_edge:    ; preds = %dec_label_pc_f40c
  %v0_f414.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_f40c

dec_label_pc_f45c.loopexit:                       ; preds = %dec_label_pc_f40c
  %v2_f45c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_f45c

dec_label_pc_f45c:                                ; preds = %dec_label_pc_f45c.loopexit, %dec_label_pc_f3cc
  %v2_f45c = phi i32 [ %v2_f45c.pre, %dec_label_pc_f45c.loopexit ], [ %v3_f3f0, %dec_label_pc_f3cc ]
  store i32 %v2_f45c, i32* @r4, align 4
  ret i32 %v2_f3d8

; uselistorder directives
  uselistorder i32 %v1_f450, { 1, 2, 0 }
  uselistorder i32 %v1_f400, { 1, 0 }
  uselistorder i32 %v2_f3dc, { 3, 0, 1, 2 }
  uselistorder i32 %v3_f3d4, { 1, 0 }
}

define i32 @function_f46c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_f46c:
  %stack_var_-24 = alloca i32, align 4
  %v3_f46c = load i32, i32* @r4, align 4
  store i32 %v3_f46c, i32* %stack_var_-24, align 4
  %v6_f46c = load i32, i32* @r5, align 4
  %v9_f46c = load i32, i32* @r6, align 4
  %v12_f46c = load i32, i32* @r7, align 4
  %v15_f46c = load i32, i32* @r8, align 4
  store i32 2, i32* @r0, align 4
  %v0_f474 = call i32 @function_105cc()
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_202f8.490 to i32), i32* @r4, align 4
  store i32 %v0_f474, i32* @r6, align 4
  %v3_f48c = call i32 @function_f7f8(i32 %v0_f474, i32 ptrtoint (i32* @global_var_1560c.497 to i32), i32 2)
  %v0_f490 = load i32, i32* @r5, align 4
  store i32 %v0_f490, i32* @r0, align 4
  %v0_f494 = load i32, i32* @r6, align 4
  store i32 %v0_f494, i32* @global_var_20300.498, align 4
  %v1_f498 = trunc i32 %v0_f490 to i16
  store i16 %v1_f498, i16* bitcast (i32* @global_var_20304.499 to i16*), align 4
  %v0_f49c = call i32 @function_105cc()
  %v0_f4a0 = load i32, i32* @r5, align 4
  store i32 %v0_f49c, i32* @r6, align 4
  %v3_f4ac = call i32 @function_f7f8(i32 %v0_f49c, i32 ptrtoint (i32* @global_var_15610.501 to i32), i32 %v0_f4a0)
  store i32 19, i32* @r0, align 4
  %v0_f4b4 = load i32, i32* @r6, align 4
  store i32 %v0_f4b4, i32* @global_var_20308.502, align 4
  %v0_f4b8 = load i32, i32* @r5, align 4
  %v1_f4b8 = trunc i32 %v0_f4b8 to i16
  store i16 %v1_f4b8, i16* bitcast (i32* @global_var_2030c.503 to i16*), align 4
  %v0_f4bc = call i32 @function_105cc()
  store i32 %v0_f4bc, i32* @r5, align 4
  store i32 19, i32* @r8, align 4
  %v4_f4d0 = call i32 @function_f7f8(i32 %v0_f4bc, i32 ptrtoint ([20 x i8]* @global_var_15614.505 to i32), i32 19)
  store i32 6, i32* @r0, align 4
  %v0_f4d8 = load i32, i32* @r5, align 4
  store i32 %v0_f4d8, i32* @global_var_20310.506, align 4
  %v0_f4dc = load i32, i32* @r8, align 4
  %v1_f4dc = trunc i32 %v0_f4dc to i16
  store i16 %v1_f4dc, i16* bitcast (i32* @global_var_20314.507 to i16*), align 4
  %v0_f4e0 = call i32 @function_105cc()
  store i32 6, i32* @r7, align 4
  %v4_f4f4 = call i32 @function_f7f8(i32 %v0_f4e0, i32 ptrtoint ([7 x i8]* @global_var_15628.509 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 %v0_f4e0, i32* @global_var_20318.510, align 4
  %v0_f500 = load i32, i32* @r7, align 4
  %v1_f500 = trunc i32 %v0_f500 to i16
  store i16 %v1_f500, i16* bitcast (i32* @global_var_2031c.511 to i16*), align 4
  store i32 7, i32* @r5, align 4
  %v0_f508 = call i32 @function_105cc()
  %v0_f50c = load i32, i32* @r5, align 4
  store i32 %v0_f508, i32* @r6, align 4
  %v4_f518 = call i32 @function_f7f8(i32 %v0_f508, i32 ptrtoint ([8 x i8]* @global_var_15630.513 to i32), i32 %v0_f50c)
  %v0_f51c = load i32, i32* @r5, align 4
  store i32 %v0_f51c, i32* @r0, align 4
  %v0_f520 = load i32, i32* @r6, align 4
  store i32 %v0_f520, i32* @global_var_20320.514, align 4
  %v1_f524 = trunc i32 %v0_f51c to i16
  store i16 %v1_f524, i16* bitcast (i32* @global_var_20324.515 to i16*), align 4
  %v0_f528 = call i32 @function_105cc()
  %v0_f52c = load i32, i32* @r5, align 4
  store i32 %v0_f528, i32* @r6, align 4
  %v4_f538 = call i32 @function_f7f8(i32 %v0_f528, i32 ptrtoint ([8 x i8]* @global_var_15638.517 to i32), i32 %v0_f52c)
  store i32 3, i32* @r0, align 4
  %v0_f540 = load i32, i32* @r6, align 4
  store i32 %v0_f540, i32* @global_var_20328.518, align 4
  %v0_f544 = load i32, i32* @r5, align 4
  %v1_f544 = trunc i32 %v0_f544 to i16
  store i16 %v1_f544, i16* bitcast (i32* @global_var_2032c.519 to i16*), align 4
  %v0_f548 = call i32 @function_105cc()
  store i32 %v0_f548, i32* @r5, align 4
  %v4_f558 = call i32 @function_f7f8(i32 %v0_f548, i32 ptrtoint ([4 x i8]* @global_var_15640.521 to i32), i32 3)
  store i32 24, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_20334.522 to i16*), align 4
  %v0_f568 = load i32, i32* @r5, align 4
  store i32 %v0_f568, i32* @global_var_20330.523, align 4
  %v0_f56c = call i32 @function_105cc()
  store i32 %v0_f56c, i32* @r5, align 4
  %v3_f57c = call i32 @function_f7f8(i32 %v0_f56c, i32 ptrtoint (i32* @global_var_15644.525 to i32), i32 24)
  store i32 29, i32* @r0, align 4
  store i16 24, i16* bitcast (i32* @global_var_2033c.526 to i16*), align 4
  %v0_f58c = load i32, i32* @r5, align 4
  store i32 %v0_f58c, i32* @global_var_20338.527, align 4
  %v0_f590 = call i32 @function_105cc()
  store i32 %v0_f590, i32* @r5, align 4
  %v3_f5a0 = call i32 @function_f7f8(i32 %v0_f590, i32 ptrtoint (i32* @global_var_15660.529 to i32), i32 29)
  store i32 9, i32* @r0, align 4
  store i16 29, i16* bitcast (i32* @global_var_20344.530 to i16*), align 4
  %v0_f5b0 = load i32, i32* @r5, align 4
  store i32 %v0_f5b0, i32* @global_var_20340.531, align 4
  %v0_f5b4 = call i32 @function_105cc()
  store i32 %v0_f5b4, i32* @r5, align 4
  %v4_f5c4 = call i32 @function_f7f8(i32 %v0_f5b4, i32 ptrtoint ([10 x i8]* @global_var_15680.533 to i32), i32 9)
  store i32 8, i32* @r0, align 4
  store i16 9, i16* bitcast (i32* @global_var_2034c.534 to i16*), align 4
  %v0_f5d4 = load i32, i32* @r5, align 4
  store i32 %v0_f5d4, i32* @global_var_20348.535, align 4
  %v0_f5d8 = call i32 @function_105cc()
  store i32 %v0_f5d8, i32* @r5, align 4
  %v4_f5e8 = call i32 @function_f7f8(i32 %v0_f5d8, i32 ptrtoint ([9 x i8]* @global_var_1568c.537 to i32), i32 8)
  store i32 5, i32* @r0, align 4
  store i16 8, i16* bitcast (i32* @global_var_20354.538 to i16*), align 4
  %v0_f5f8 = load i32, i32* @r5, align 4
  store i32 %v0_f5f8, i32* @global_var_20350.539, align 4
  %v0_f5fc = call i32 @function_105cc()
  store i32 %v0_f5fc, i32* @r5, align 4
  %v4_f60c = call i32 @function_f7f8(i32 %v0_f5fc, i32 ptrtoint ([6 x i8]* @global_var_15698.541 to i32), i32 5)
  %v0_f614 = load i32, i32* @r7, align 4
  store i32 %v0_f614, i32* @r0, align 4
  store i16 5, i16* bitcast (i32* @global_var_2035c.542 to i16*), align 4
  %v0_f61c = load i32, i32* @r5, align 4
  store i32 %v0_f61c, i32* @global_var_20358.543, align 4
  %v0_f620 = call i32 @function_105cc()
  %v0_f624 = load i32, i32* @r7, align 4
  store i32 %v0_f620, i32* @r5, align 4
  %v4_f630 = call i32 @function_f7f8(i32 %v0_f620, i32 ptrtoint ([7 x i8]* @global_var_156a0.545 to i32), i32 %v0_f624)
  store i32 21, i32* @r0, align 4
  %v0_f638 = load i32, i32* @r5, align 4
  store i32 %v0_f638, i32* @global_var_20360.546, align 4
  %v0_f63c = load i32, i32* @r7, align 4
  %v1_f63c = trunc i32 %v0_f63c to i16
  store i16 %v1_f63c, i16* bitcast (i32* @global_var_20364.547 to i16*), align 4
  %v0_f640 = call i32 @function_105cc()
  store i32 %v0_f640, i32* @r5, align 4
  store i32 21, i32* @r6, align 4
  %v3_f654 = call i32 @function_f7f8(i32 %v0_f640, i32 ptrtoint (i32* @global_var_156a8.549 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  %v0_f65c = load i32, i32* @r5, align 4
  store i32 %v0_f65c, i32* @global_var_20368.550, align 4
  %v0_f660 = load i32, i32* @r6, align 4
  %v1_f660 = trunc i32 %v0_f660 to i16
  store i16 %v1_f660, i16* bitcast (i32* @global_var_2036c.551 to i16*), align 4
  %v0_f664 = call i32 @function_105cc()
  store i32 %v0_f664, i32* @r5, align 4
  %v3_f674 = call i32 @function_f7f8(i32 %v0_f664, i32 ptrtoint (i32* @global_var_156c0.553 to i32), i32 17)
  store i32 11, i32* @r0, align 4
  store i16 17, i16* bitcast (i32* @global_var_20374.554 to i16*), align 4
  %v0_f684 = load i32, i32* @r5, align 4
  store i32 %v0_f684, i32* @global_var_20370.555, align 4
  %v0_f688 = call i32 @function_105cc()
  store i32 %v0_f688, i32* @r5, align 4
  %v0_f698 = load i32, i32* @r7, align 4
  %v1_f698 = add i32 %v0_f698, 5
  store i32 %v1_f698, i32* @r7, align 4
  %v4_f69c = call i32 @function_f7f8(i32 %v0_f688, i32 ptrtoint ([12 x i8]* @global_var_156d4.557 to i32), i32 11)
  %v0_f6a0 = load i32, i32* @r6, align 4
  store i32 %v0_f6a0, i32* @r0, align 4
  %v0_f6a4 = load i32, i32* @r5, align 4
  store i32 %v0_f6a4, i32* @global_var_20378.558, align 4
  %v0_f6a8 = load i32, i32* @r7, align 4
  %v1_f6a8 = trunc i32 %v0_f6a8 to i16
  store i16 %v1_f6a8, i16* bitcast (i32* @global_var_2037c.559 to i16*), align 4
  %v0_f6ac = call i32 @function_105cc()
  %v0_f6b4 = load i32, i32* @r6, align 4
  store i32 %v0_f6ac, i32* @r5, align 4
  %v3_f6bc = call i32 @function_f7f8(i32 %v0_f6ac, i32 ptrtoint (i32* @global_var_156e0.561 to i32), i32 %v0_f6b4)
  %v0_f6c0 = load i32, i32* @r8, align 4
  store i32 %v0_f6c0, i32* @r0, align 4
  %v0_f6c4 = load i32, i32* @r5, align 4
  store i32 %v0_f6c4, i32* @global_var_20380.562, align 4
  %v0_f6c8 = load i32, i32* @r6, align 4
  %v1_f6c8 = trunc i32 %v0_f6c8 to i16
  store i16 %v1_f6c8, i16* bitcast (i32* @global_var_20384.563 to i16*), align 4
  %v0_f6cc = call i32 @function_105cc()
  %v0_f6d4 = load i32, i32* @r8, align 4
  store i32 %v0_f6cc, i32* @r5, align 4
  %v3_f6dc = call i32 @function_f7f8(i32 %v0_f6cc, i32 ptrtoint (i32* @global_var_156f8.565 to i32), i32 %v0_f6d4)
  store i32 23, i32* @r0, align 4
  %v0_f6e4 = load i32, i32* @r5, align 4
  store i32 %v0_f6e4, i32* @global_var_20388.566, align 4
  %v0_f6e8 = load i32, i32* @r8, align 4
  %v1_f6e8 = trunc i32 %v0_f6e8 to i16
  store i16 %v1_f6e8, i16* bitcast (i32* @global_var_2038c.567 to i16*), align 4
  %v0_f6ec = call i32 @function_105cc()
  store i32 %v0_f6ec, i32* @r5, align 4
  %v3_f6fc = call i32 @function_f7f8(i32 %v0_f6ec, i32 ptrtoint (i32* @global_var_1570c.569 to i32), i32 23)
  %v0_f704 = load i32, i32* @r7, align 4
  store i32 %v0_f704, i32* @r0, align 4
  %v0_f708 = load i32, i32* @r5, align 4
  store i32 %v0_f708, i32* @global_var_20390.570, align 4
  store i16 23, i16* bitcast (i32* @global_var_20394.571 to i16*), align 4
  %v0_f710 = call i32 @function_105cc()
  %v0_f718 = load i32, i32* @r7, align 4
  %v4_f720 = call i32 @function_f7f8(i32 %v0_f710, i32 ptrtoint ([12 x i8]* @global_var_15724.573 to i32), i32 %v0_f718)
  %v0_f724 = load i32, i32* @r7, align 4
  %v1_f724 = trunc i32 %v0_f724 to i16
  store i16 %v1_f724, i16* bitcast (i32* @global_var_2039c.574 to i16*), align 4
  store i32 %v0_f710, i32* @global_var_20398.575, align 4
  %v2_f72c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_f72c, i32* @r4, align 4
  store i32 %v6_f46c, i32* @r5, align 4
  store i32 %v9_f46c, i32* @r6, align 4
  store i32 %v12_f46c, i32* @r7, align 4
  store i32 %v15_f46c, i32* @r8, align 4
  ret i32 %v4_f720

; uselistorder directives
  uselistorder i32 %v0_f6cc, { 1, 0 }
  uselistorder i32 %v0_f6ac, { 1, 0 }
  uselistorder i32 %v0_f620, { 1, 0 }
  uselistorder i32 %v0_f528, { 1, 0 }
  uselistorder i32 %v0_f508, { 1, 0 }
  uselistorder i32 %v0_f49c, { 1, 0 }
  uselistorder i32 %v0_f474, { 1, 0 }
  uselistorder i32 21, { 0, 2, 3, 4, 1 }
  uselistorder i32 29, { 0, 2, 3, 1 }
  uselistorder i32 (i32, i32, i32)* @function_f7f8, { 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_202f8.490 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @function_f788(i8* %arg1) local_unnamed_addr {
dec_label_pc_f788:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_f78c = load i8, i8* %arg1, align 1
  %v2_f790 = icmp eq i8 %v3_f78c, 0
  %v0_f794 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_f790, i32 %v0_f794)
  br label %dec_label_pc_f79c

dec_label_pc_f79c:                                ; preds = %dec_label_pc_f79c, %dec_label_pc_f788
  %v0_f79c = phi i32 [ %v1_f79c, %dec_label_pc_f79c ], [ 0, %dec_label_pc_f788 ]
  %v1_f79c = add i32 %v0_f79c, 1
  %v2_f7a0 = add i32 %v1_f79c, %tmp
  %v3_f7a0 = inttoptr i32 %v2_f7a0 to i8*
  %v4_f7a0 = load i8, i8* %v3_f7a0, align 1
  %v2_f7a4 = icmp eq i8 %v4_f7a0, 0
  br i1 %v2_f7a4, label %dec_label_pc_f7ac, label %dec_label_pc_f79c

dec_label_pc_f7ac:                                ; preds = %dec_label_pc_f79c
  ret i32 %v1_f79c
}

define i32 @function_f7b0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f7b0:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_f7b0 = load i8, i8* %arg1, align 1
  %v3_f7b0 = zext i8 %v2_f7b0 to i32
  %v2_f7b4 = icmp eq i8 %v2_f7b0, 0
  br i1 %v2_f7b4, label %bb, label %dec_label_pc_f7c0

bb:                                               ; preds = %dec_label_pc_f7b0
  store i32 %v3_f7b0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f7d4

dec_label_pc_f7c0:                                ; preds = %dec_label_pc_f7b0
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f7c4

dec_label_pc_f7c4:                                ; preds = %dec_label_pc_f7c4, %dec_label_pc_f7c0
  %v0_f7c4 = phi i32 [ %v1_f7c4, %dec_label_pc_f7c4 ], [ 0, %dec_label_pc_f7c0 ]
  %v1_f7c4 = add i32 %v0_f7c4, 1
  store i32 %v1_f7c4, i32* %ip.global-to-local, align 4
  %v2_f7c8 = add i32 %v1_f7c4, %tmp
  %v3_f7c8 = inttoptr i32 %v2_f7c8 to i8*
  %v4_f7c8 = load i8, i8* %v3_f7c8, align 1
  %v6_f7c8 = zext i8 %v4_f7c8 to i32
  store i32 %v6_f7c8, i32* %r3.global-to-local, align 4
  %v2_f7cc = icmp eq i8 %v4_f7c8, 0
  br i1 %v2_f7cc, label %dec_label_pc_f7d4, label %dec_label_pc_f7c4

dec_label_pc_f7d4:                                ; preds = %dec_label_pc_f7c4, %bb
  %v0_f7d4 = phi i32 [ %v3_f7b0, %bb ], [ %v1_f7c4, %dec_label_pc_f7c4 ]
  store i32 %v0_f7d4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f7e0

dec_label_pc_f7dc:                                ; preds = %dec_label_pc_f7e0
  %v0_f7dc = load i32, i32* %r1.global-to-local, align 4
  %v1_f7dc = add i32 %v0_f7dc, 1
  %v2_f7dc = inttoptr i32 %v1_f7dc to i8*
  %v3_f7dc = load i8, i8* %v2_f7dc, align 1
  store i32 %v1_f7dc, i32* %r1.global-to-local, align 4
  %v0_f7e0.pr = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f7e0

dec_label_pc_f7e0:                                ; preds = %dec_label_pc_f7d4, %dec_label_pc_f7dc
  %v0_f7e8.off0 = phi i8 [ %v2_f7b0, %dec_label_pc_f7d4 ], [ %v3_f7dc, %dec_label_pc_f7dc ]
  %v0_f7e0 = phi i32 [ %v0_f7d4, %dec_label_pc_f7d4 ], [ %v0_f7e0.pr, %dec_label_pc_f7dc ]
  %v1_f7e0 = add i32 %v0_f7e0, -1
  store i32 %v1_f7e0, i32* %r3.global-to-local, align 4
  %v3_f7e4 = icmp eq i32 %v0_f7e0, 0
  %v2_f7e8 = load i32, i32* @r0, align 4
  %v3_f7e8 = inttoptr i32 %v2_f7e8 to i8*
  store i8 %v0_f7e8.off0, i8* %v3_f7e8, align 1
  %v4_f7e8 = load i32, i32* @r0, align 4
  %v5_f7e8 = add i32 %v4_f7e8, 1
  store i32 %v5_f7e8, i32* @r0, align 4
  br i1 %v3_f7e4, label %dec_label_pc_f7f0, label %dec_label_pc_f7dc

dec_label_pc_f7f0:                                ; preds = %dec_label_pc_f7e0
  %v0_f7f0 = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_f7f0

; uselistorder directives
  uselistorder i32 %v0_f7e0, { 1, 0 }
  uselistorder i32 %v0_f7d4, { 1, 0 }
  uselistorder i32 %v1_f7c4, { 0, 1, 3, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 0 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_f7e0, { 1, 0 }
}

define i32 @function_f7f8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f7f8:
  %ip.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %v2_f7f8 = icmp eq i32 %arg3, 0
  %v0_f7fc = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_f7f8, i32 %v0_f7fc)
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f804

dec_label_pc_f804:                                ; preds = %dec_label_pc_f804, %dec_label_pc_f7f8
  %v0_f804 = phi i32 [ %v1_f80c, %dec_label_pc_f804 ], [ 0, %dec_label_pc_f7f8 ]
  %v2_f804 = add i32 %v0_f804, %arg2
  %v3_f804 = inttoptr i32 %v2_f804 to i8*
  %v4_f804 = load i8, i8* %v3_f804, align 1
  %v4_f808 = add i32 %v0_f804, %arg1
  %v5_f808 = inttoptr i32 %v4_f808 to i8*
  store i8 %v4_f804, i8* %v5_f808, align 1
  %v0_f80c = load i32, i32* %ip.global-to-local, align 4
  %v1_f80c = add i32 %v0_f80c, 1
  store i32 %v1_f80c, i32* %ip.global-to-local, align 4
  %v9_f810 = icmp eq i32 %v1_f80c, %arg3
  br i1 %v9_f810, label %dec_label_pc_f818, label %dec_label_pc_f804

dec_label_pc_f818:                                ; preds = %dec_label_pc_f804
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_f80c, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_f81c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f81c:
  %r2.global-to-local = alloca i32, align 4
  %v2_f81c = icmp eq i32 %arg2, 0
  %v0_f820 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_f81c, i32 %v0_f820)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f828

dec_label_pc_f828:                                ; preds = %dec_label_pc_f828, %dec_label_pc_f81c
  %v2_f82c = phi i32 [ %v1_f830, %dec_label_pc_f828 ], [ 0, %dec_label_pc_f81c ]
  store i32 0, i32* @r3, align 4
  %v4_f82c = add i32 %v2_f82c, %arg1
  %v5_f82c = inttoptr i32 %v4_f82c to i8*
  store i8 0, i8* %v5_f82c, align 1
  %v0_f830 = load i32, i32* %r2.global-to-local, align 4
  %v1_f830 = add i32 %v0_f830, 1
  store i32 %v1_f830, i32* %r2.global-to-local, align 4
  %v9_f834 = icmp eq i32 %v1_f830, %arg2
  br i1 %v9_f834, label %dec_label_pc_f83c, label %dec_label_pc_f828

dec_label_pc_f83c:                                ; preds = %dec_label_pc_f828
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_f830, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_f840(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_f840:
  %v7_f854 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_f854, label %dec_label_pc_f85c, label %dec_label_pc_f864

dec_label_pc_f85c:                                ; preds = %dec_label_pc_f878, %dec_label_pc_f864, %dec_label_pc_f840, %dec_label_pc_f8a4
  %storemerge = phi i32 [ %v1_f8a4, %dec_label_pc_f8a4 ], [ -1, %dec_label_pc_f840 ], [ -1, %dec_label_pc_f864 ], [ -1, %dec_label_pc_f878 ]
  ret i32 %storemerge

dec_label_pc_f864:                                ; preds = %dec_label_pc_f840
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_f85c, label %dec_label_pc_f86c

dec_label_pc_f86c:                                ; preds = %dec_label_pc_f864
  br label %dec_label_pc_f884

dec_label_pc_f878:                                ; preds = %bb, %dec_label_pc_f898
  %v1_f8843 = phi i32 [ %v1_f898, %dec_label_pc_f898 ], [ 0, %bb ]
  %v1_f878 = add i32 %v0_f8a4, 1
  %v9_f87c = icmp eq i32 %v1_f878, %arg2
  br i1 %v9_f87c, label %dec_label_pc_f85c, label %dec_label_pc_f884

dec_label_pc_f884:                                ; preds = %dec_label_pc_f878, %dec_label_pc_f86c
  %v0_f8a4 = phi i32 [ %v1_f878, %dec_label_pc_f878 ], [ 0, %dec_label_pc_f86c ]
  %v1_f884 = phi i32 [ %v1_f8843, %dec_label_pc_f878 ], [ 0, %dec_label_pc_f86c ]
  %v2_f884 = add i32 %v1_f884, %arg3
  %v3_f884 = inttoptr i32 %v2_f884 to i8*
  %v4_f884 = load i8, i8* %v3_f884, align 1
  %v2_f888 = add i32 %v0_f8a4, %arg1
  %v3_f888 = inttoptr i32 %v2_f888 to i8*
  %v4_f888 = load i8, i8* %v3_f888, align 1
  %v9_f88c = icmp eq i8 %v4_f888, %v4_f884
  br i1 %v9_f88c, label %dec_label_pc_f898, label %bb

bb:                                               ; preds = %dec_label_pc_f884
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_f878

dec_label_pc_f898:                                ; preds = %dec_label_pc_f884
  %v1_f898 = add i32 %v1_f884, 1
  store i32 %v1_f898, i32* @ip, align 4
  %v9_f89c = icmp eq i32 %v1_f898, %arg4
  br i1 %v9_f89c, label %dec_label_pc_f8a4, label %dec_label_pc_f878

dec_label_pc_f8a4:                                ; preds = %dec_label_pc_f898
  %v1_f8a4 = add i32 %v0_f8a4, 1
  br label %dec_label_pc_f85c

; uselistorder directives
  uselistorder i32 %v1_f898, { 1, 2, 0 }
  uselistorder i32 %v1_f884, { 1, 0 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f878, { 1, 0 }
  uselistorder label %dec_label_pc_f85c, { 3, 0, 1, 2 }
}

define i32 @function_f8ac(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f8ac:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v12_f8ac = load i32, i32* @r7, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_f8bc

dec_label_pc_f8bc:                                ; preds = %.thread, %dec_label_pc_f8d0, %bb, %dec_label_pc_f8ac
  %v0_f8bc = phi i32 [ %tmp, %dec_label_pc_f8ac ], [ %v5_f8bc, %bb ], [ %v5_f8bc, %dec_label_pc_f8d0 ], [ %v5_f8bc, %.thread ]
  %v1_f8bc = inttoptr i32 %v0_f8bc to i8*
  %v2_f8bc = load i8, i8* %v1_f8bc, align 1
  %v5_f8bc = add i32 %v0_f8bc, 1
  store i32 %v5_f8bc, i32* %r5.global-to-local, align 4
  %v7_f8c0 = icmp eq i8 %v2_f8bc, 9
  br i1 %v7_f8c0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_f8bc
  br label %dec_label_pc_f8bc

bb:                                               ; preds = %dec_label_pc_f8bc
  %v3_f8bc = zext i8 %v2_f8bc to i32
  %v8_f8c4 = icmp eq i8 %v2_f8bc, 32
  store i32 %v3_f8bc, i32* @r4, align 4
  br i1 %v8_f8c4, label %dec_label_pc_f8bc, label %dec_label_pc_f8d0

dec_label_pc_f8d0:                                ; preds = %bb
  %v7_f8d0 = icmp eq i8 %v2_f8bc, 10
  br i1 %v7_f8d0, label %dec_label_pc_f8bc, label %dec_label_pc_f8d8

dec_label_pc_f8d8:                                ; preds = %dec_label_pc_f8d0
  %v7_f8d8 = icmp eq i8 %v2_f8bc, 45
  br i1 %v7_f8d8, label %dec_label_pc_f9c8, label %dec_label_pc_f8e0

dec_label_pc_f8e0:                                ; preds = %dec_label_pc_f8d8
  %v7_f8e0 = icmp eq i8 %v2_f8bc, 43
  br i1 %v7_f8e0, label %bb44, label %dec_label_pc_f8f0

bb44:                                             ; preds = %dec_label_pc_f8e0
  %v2_f8e4 = inttoptr i32 %v5_f8bc to i8*
  %v3_f8e4 = load i8, i8* %v2_f8e4, align 1
  %v4_f8e4 = zext i8 %v3_f8e4 to i32
  store i32 %v4_f8e4, i32* @r4, align 4
  %v6_f8e4 = add i32 %v0_f8bc, 2
  store i32 %v6_f8e4, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f8f0

dec_label_pc_f8f0:                                ; preds = %bb44, %dec_label_pc_f8e0, %dec_label_pc_f9c8
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_f9c8 ], [ 2147483647, %dec_label_pc_f8e0 ], [ 2147483647, %bb44 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_f9c8 ], [ 0, %dec_label_pc_f8e0 ], [ 0, %bb44 ]
  store i32 %storemerge1, i32* @r7, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_f8f8 = call i32 @function_fc08(i32 %storemerge1, i32 %arg2)
  %v0_f8fc = load i32, i32* @r7, align 4
  store i32 %v0_f8fc, i32* @r0, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  %v0_f904 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f904, i32* @r1, align 4
  %v0_f908 = call i32 @function_fb0c()
  %v0_f918.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_f918.outer

dec_label_pc_f918.outer:                          ; preds = %.thread5, %dec_label_pc_f8f0
  %v2_f994.ph = phi i32 [ %v5_f994, %.thread5 ], [ 0, %dec_label_pc_f8f0 ]
  %v1_f958.ph = phi i32 [ %v4_f998, %.thread5 ], [ %v0_f918.pre, %dec_label_pc_f8f0 ]
  %v1_f970.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_f8f0 ]
  %v3_f964 = icmp uge i32 %v2_f994.ph, %v0_f908
  %v9_f964 = icmp eq i32 %v2_f994.ph, %v0_f908
  %v2_f968 = xor i1 %v3_f964, true
  %v3_f968 = or i1 %v9_f964, %v2_f968
  %v2_f96c = xor i1 %v9_f964, true
  %v3_f96c = and i1 %v3_f964, %v2_f96c
  %v2_f98c = icmp eq i1 %v9_f964, false
  br label %dec_label_pc_f918

dec_label_pc_f918:                                ; preds = %dec_label_pc_f918.outer, %dec_label_pc_f9a0
  %v1_f970 = phi i32 [ -1, %dec_label_pc_f9a0 ], [ %v1_f970.ph, %dec_label_pc_f918.outer ]
  %v1_f958 = phi i32 [ %v3_f9a0, %dec_label_pc_f9a0 ], [ %v1_f958.ph, %dec_label_pc_f918.outer ]
  %v1_f918 = urem i32 %v1_f958, 256
  %v1_f91c = add nsw i32 %v1_f918, -48
  %v1_f924 = add nsw i32 %v1_f918, -97
  %v1_f928 = add i32 %v1_f958, -48
  %v1_f92c = add nsw i32 %v1_f918, -65
  %tmp75 = icmp ult i32 %v1_f91c, 10
  br i1 %tmp75, label %dec_label_pc_f95c, label %dec_label_pc_f934

dec_label_pc_f934:                                ; preds = %dec_label_pc_f918
  %v2_f934 = icmp ugt i32 %v1_f92c, 24
  %v7_f934 = icmp eq i32 %v1_f92c, 25
  %v2_f938 = xor i1 %v7_f934, true
  %v3_f938 = and i1 %v2_f934, %v2_f938
  br i1 %v3_f938, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_f934
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_f934, %bb45
  %v0_f94c14 = phi i32 [ %v1_f928, %dec_label_pc_f934 ], [ 0, %bb45 ]
  %v2_f93c = xor i1 %v2_f934, true
  %v3_f93c = or i1 %v7_f934, %v2_f93c
  br i1 %v3_f93c, label %bb47, label %bb48

bb47:                                             ; preds = %bb46
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_f94c = phi i32 [ %v0_f94c14, %bb46 ], [ 1, %bb47 ]
  br i1 %v3_f938, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  %v6_f944 = icmp ugt i32 %v1_f924, 24
  %v11_f944 = icmp eq i32 %v1_f924, 25
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_f948 = phi i1 [ %v7_f934, %bb48 ], [ %v11_f944, %bb49 ]
  %v0_f948 = phi i1 [ %v2_f934, %bb48 ], [ %v6_f944, %bb49 ]
  %v2_f948 = xor i1 %v1_f948, true
  %v3_f948 = and i1 %v0_f948, %v2_f948
  br i1 %v3_f948, label %dec_label_pc_f9ac, label %dec_label_pc_f94c

dec_label_pc_f94c:                                ; preds = %bb50
  %v2_f94c = icmp eq i32 %v0_f94c, 0
  %. = select i1 %v2_f94c, i32 87, i32 55
  %v2_f958 = sub i32 %v1_f958, %.
  br label %dec_label_pc_f95c

dec_label_pc_f95c:                                ; preds = %dec_label_pc_f918, %dec_label_pc_f94c
  %v0_f97029 = phi i32 [ %v1_f92c, %dec_label_pc_f918 ], [ %., %dec_label_pc_f94c ]
  %v3_f994 = phi i32 [ %v1_f928, %dec_label_pc_f918 ], [ %v2_f958, %dec_label_pc_f94c ]
  %v1_f95c = load i32, i32* %r6.global-to-local, align 4
  %v2_f95c = sub i32 %v3_f994, %v1_f95c
  %v4_f95c = xor i32 %v1_f95c, %v3_f994
  %v5_f95c = xor i32 %v2_f95c, %v3_f994
  %v6_f95c = and i32 %v5_f95c, %v4_f95c
  %v7_f95c = icmp slt i32 %v6_f95c, 0
  %v8_f95c = icmp slt i32 %v2_f95c, 0
  %v2_f960 = xor i1 %v8_f95c, %v7_f95c
  br i1 %v2_f960, label %dec_label_pc_f964, label %dec_label_pc_f9ac

dec_label_pc_f964:                                ; preds = %dec_label_pc_f95c
  br i1 %v3_f968, label %bb53, label %bb54

bb53:                                             ; preds = %dec_label_pc_f964
  br label %bb54

bb54:                                             ; preds = %dec_label_pc_f964, %bb53
  %v0_f97028 = phi i32 [ %v0_f97029, %dec_label_pc_f964 ], [ 0, %bb53 ]
  br i1 %v3_f96c, label %bb55, label %bb56

bb55:                                             ; preds = %bb54
  br label %bb56

bb56:                                             ; preds = %bb54, %bb55
  %v0_f970 = phi i32 [ %v0_f97028, %bb54 ], [ 1, %bb55 ]
  %tmp76 = icmp slt i32 %v1_f970, 0
  %v4_f970 = zext i1 %tmp76 to i32
  %v5_f970 = or i32 %v0_f970, %v4_f970
  %v7_f970 = icmp eq i32 %v5_f970, 0
  br i1 %v7_f970, label %dec_label_pc_f978, label %dec_label_pc_f9a0

dec_label_pc_f978:                                ; preds = %bb56
  %v1_f984 = load i32, i32* %r8.global-to-local, align 4
  %v2_f984 = sub i32 %v3_f994, %v1_f984
  %v4_f984 = xor i32 %v1_f984, %v3_f994
  %v5_f984 = xor i32 %v2_f984, %v3_f994
  %v6_f984 = and i32 %v5_f984, %v4_f984
  %v7_f984 = icmp slt i32 %v6_f984, 0
  %v8_f984 = icmp slt i32 %v2_f984, 0
  %v9_f984 = icmp eq i32 %v3_f994, %v1_f984
  %v3_f988 = xor i1 %v8_f984, %v7_f984
  %v4_f988 = or i1 %v9_f984, %v3_f988
  br i1 %v4_f988, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_f978
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_f978
  br i1 %v2_f98c, label %.thread5, label %dec_label_pc_f9a0

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_f994 = mul i32 %v1_f95c, %v2_f994.ph
  %v5_f994 = add i32 %v4_f994, %v3_f994
  %v1_f998 = load i32, i32* %r5.global-to-local, align 4
  %v2_f998 = inttoptr i32 %v1_f998 to i8*
  %v3_f998 = load i8, i8* %v2_f998, align 1
  %v4_f998 = zext i8 %v3_f998 to i32
  %v6_f998 = add i32 %v1_f998, 1
  store i32 %v6_f998, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f918.outer

dec_label_pc_f9a0:                                ; preds = %thread-pre-split, %bb56
  %v0_f9a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_f9a0 = inttoptr i32 %v0_f9a0 to i8*
  %v2_f9a0 = load i8, i8* %v1_f9a0, align 1
  %v3_f9a0 = zext i8 %v2_f9a0 to i32
  %v5_f9a0 = add i32 %v0_f9a0, 1
  store i32 %v5_f9a0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f918

dec_label_pc_f9ac:                                ; preds = %dec_label_pc_f95c, %bb50
  %v1_f9ac = icmp slt i32 %v1_f970, 0
  %v0_f9d8 = load i32, i32* %sl.global-to-local, align 4
  %v2_f9d8 = icmp eq i32 %v0_f9d8, 0
  br i1 %v1_f9ac, label %dec_label_pc_f9d8, label %dec_label_pc_f9b4

dec_label_pc_f9b4:                                ; preds = %dec_label_pc_f9ac
  br i1 %v2_f9d8, label %bb60, label %bb59

bb59:                                             ; preds = %dec_label_pc_f9b4
  %v2_f9b8 = sub i32 0, %v2_f994.ph
  br label %bb60

bb60:                                             ; preds = %.thread32, %bb61, %dec_label_pc_f9b4, %bb59
  %v1_f9c4 = phi i32 [ -2147483648, %bb61 ], [ %v2_f994.ph, %dec_label_pc_f9b4 ], [ %v2_f9b8, %bb59 ], [ 2147483647, %.thread32 ]
  store i32 %v12_f8ac, i32* @r7, align 4
  ret i32 %v1_f9c4

dec_label_pc_f9c8:                                ; preds = %dec_label_pc_f8d8
  %v1_f9c8 = inttoptr i32 %v5_f8bc to i8*
  %v2_f9c8 = load i8, i8* %v1_f9c8, align 1
  %v3_f9c8 = zext i8 %v2_f9c8 to i32
  store i32 %v3_f9c8, i32* @r4, align 4
  %v5_f9c8 = add i32 %v0_f8bc, 2
  store i32 %v5_f9c8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f8f0

dec_label_pc_f9d8:                                ; preds = %dec_label_pc_f9ac
  br i1 %v2_f9d8, label %.thread32, label %bb61

.thread32:                                        ; preds = %dec_label_pc_f9d8
  br label %bb60

bb61:                                             ; preds = %dec_label_pc_f9d8
  br label %bb60

; uselistorder directives
  uselistorder i1 %v2_f9d8, { 1, 0 }
  uselistorder i32 %v2_f984, { 1, 0 }
  uselistorder i32 %v1_f984, { 1, 0, 2 }
  uselistorder i32 %v2_f95c, { 1, 0 }
  uselistorder i32 %v3_f994, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_f934, { 1, 2, 0 }
  uselistorder i1 %v2_f934, { 1, 0, 2 }
  uselistorder i32 %v1_f918, { 1, 2, 0 }
  uselistorder i32 %v1_f958, { 1, 2, 0 }
  uselistorder i32 %v1_f970, { 1, 0 }
  uselistorder i1 %v9_f964, { 1, 0, 2 }
  uselistorder i1 %v3_f964, { 1, 0 }
  uselistorder i32 %v2_f994.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_f908, { 1, 0 }
  uselistorder i32 %v5_f8bc, { 3, 4, 5, 2, 1, 0 }
  uselistorder i8 %v2_f8bc, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_f8bc, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 5, 2, 4, 3, 6, 7 }
  uselistorder i32 55, { 0, 2, 1 }
  uselistorder i32 25, { 2, 3, 1, 0 }
  uselistorder i32 (i32, i32)* @function_fc08, { 1, 4, 0, 3, 2 }
  uselistorder i8 32, { 1, 2, 0 }
  uselistorder i8 9, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %bb60, { 1, 0, 3, 2 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %dec_label_pc_f95c, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_f918, { 1, 0 }
  uselistorder label %dec_label_pc_f8f0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f8bc, { 1, 2, 0, 3 }
}

define i32 @function_f9e8() local_unnamed_addr {
dec_label_pc_f9e8:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  store i32 16, i32* %r6.global-to-local, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_f9f8 = call i32 @function_1003c()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_fa00 = inttoptr i32 %v0_f9f8 to i32*
  store i32 0, i32* %v2_fa00, align 4
  %v0_fa0c = load i32, i32* %r4.global-to-local, align 4
  %v3_fa10 = call i32 @function_10384(i32 2, i32 2, i32 %v0_fa0c)
  %v7_fa14 = icmp eq i32 %v3_fa10, -1
  store i32 %v3_fa10, i32* %r5.global-to-local, align 4
  br i1 %v7_fa14, label %bb, label %dec_label_pc_fa24

bb:                                               ; preds = %dec_label_pc_f9e8
  %v1_fa1c = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fa70

dec_label_pc_fa24:                                ; preds = %dec_label_pc_f9e8
  %v2_fa30 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_fa30, i32* %r4.global-to-local, align 4
  %v0_fa3c = load i32, i32* %r6.global-to-local, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_fa50 = call i32 @function_1016c(i32 %v3_fa10, i32 %v2_fa30, i32 %v0_fa3c)
  %v2_fa58 = ptrtoint i32* %stack_var_-20 to i32
  %v0_fa5c = load i32, i32* %r5.global-to-local, align 4
  %v3_fa60 = call i32 @function_101a4(i32 %v0_fa5c, i32 %v2_fa30, i32 %v2_fa58)
  %v1_fa68 = call i32 @function_10008(i32 %v0_fa5c)
  br label %dec_label_pc_fa70

dec_label_pc_fa70:                                ; preds = %bb, %dec_label_pc_fa24
  %storemerge = phi i32 [ 134744072, %dec_label_pc_fa24 ], [ %v1_fa1c, %bb ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_fa10, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 134744072, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_1016c, { 6, 7, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_10384, { 15, 16, 13, 14, 12, 11, 10, 1, 9, 8, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder label %dec_label_pc_fa70, { 1, 0 }
}

define i32 @function_fa7c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_fa7c:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_fa80 = load i8, i8* %tmp, align 1
  %v2_fa84 = icmp eq i8 %v3_fa80, 0
  br i1 %v2_fa84, label %bb, label %dec_label_pc_fa98

bb:                                               ; preds = %dec_label_pc_fa7c
  %v4_fa80 = zext i8 %v3_fa80 to i32
  br label %dec_label_pc_faac

dec_label_pc_fa98:                                ; preds = %dec_label_pc_fa7c
  br label %dec_label_pc_fa9c

dec_label_pc_fa9c:                                ; preds = %dec_label_pc_fa9c, %dec_label_pc_fa98
  %v0_fa9c = phi i32 [ %v1_fa9c, %dec_label_pc_fa9c ], [ 0, %dec_label_pc_fa98 ]
  %v1_fa9c = add i32 %v0_fa9c, 1
  %v2_faa0 = add i32 %v1_fa9c, %arg2
  %v3_faa0 = inttoptr i32 %v2_faa0 to i8*
  %v4_faa0 = load i8, i8* %v3_faa0, align 1
  %v2_faa4 = icmp eq i8 %v4_faa0, 0
  br i1 %v2_faa4, label %dec_label_pc_faac, label %dec_label_pc_fa9c

dec_label_pc_faac:                                ; preds = %dec_label_pc_fa9c, %bb
  %v0_faf021 = phi i32 [ %v4_fa80, %bb ], [ %v1_fa9c, %dec_label_pc_fa9c ]
  %v0_fab42 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_fab42, 1
  br i1 %tmp29, label %dec_label_pc_fb04, label %dec_label_pc_fac0

dec_label_pc_fac0:                                ; preds = %dec_label_pc_faac, %dec_label_pc_fab4.backedge
  %v0_fab8.in = phi i32 [ %v0_fab8, %dec_label_pc_fab4.backedge ], [ %v0_fab42, %dec_label_pc_faac ]
  %v1_facc = phi i32 [ %v1_facc15, %dec_label_pc_fab4.backedge ], [ 0, %dec_label_pc_faac ]
  %v0_fac0 = phi i32 [ %v5_fac0, %dec_label_pc_fab4.backedge ], [ %tmp23, %dec_label_pc_faac ]
  %v0_fab8 = add i32 %v0_fab8.in, -1
  %v1_fac0 = inttoptr i32 %v0_fac0 to i8*
  %v2_fac0 = load i8, i8* %v1_fac0, align 1
  %v3_fac0 = zext i8 %v2_fac0 to i32
  %v5_fac0 = add i32 %v0_fac0, 1
  %v1_fac4 = add nsw i32 %v3_fac0, -65
  %v2_facc = add i32 %v1_facc, %arg2
  %v3_facc = inttoptr i32 %v2_facc to i8*
  %v4_facc = load i8, i8* %v3_facc, align 1
  %v6_facc = zext i8 %v4_facc to i32
  %v1_fad0 = add nsw i32 %v6_facc, -65
  %tmp38 = icmp ult i32 %v1_fac4, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_fac0
  %v5_fad4 = or i32 %v3_fac0, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_fac0, %bb30
  %v0_fae0 = phi i32 [ %v3_fac0, %dec_label_pc_fac0 ], [ %v5_fad4, %bb30 ]
  %tmp39 = icmp ult i32 %v1_fad0, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_fadc = or i32 %v6_facc, 96
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_fae0 = phi i32 [ %v6_facc, %bb31 ], [ %v5_fadc, %bb32 ]
  %v9_fae0 = icmp eq i32 %v0_fae0, %v1_fae0
  br i1 %v9_fae0, label %dec_label_pc_faec, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_fab4.backedge

dec_label_pc_fab4.backedge:                       ; preds = %bb34, %dec_label_pc_faec
  %v1_facc15 = phi i32 [ 0, %bb34 ], [ %v1_faec, %dec_label_pc_faec ]
  %tmp35 = icmp slt i32 %v0_fab8, 1
  br i1 %tmp35, label %dec_label_pc_fb04, label %dec_label_pc_fac0

dec_label_pc_faec:                                ; preds = %bb33
  %v1_faec = add i32 %v1_facc, 1
  %v9_faf0 = icmp eq i32 %v0_faf021, %v1_faec
  br i1 %v9_faf0, label %dec_label_pc_faf8, label %dec_label_pc_fab4.backedge

dec_label_pc_faf8:                                ; preds = %dec_label_pc_faec
  %v2_faf8 = sub i32 %v5_fac0, %tmp23
  br label %dec_label_pc_fb04

dec_label_pc_fb04:                                ; preds = %dec_label_pc_fab4.backedge, %dec_label_pc_faac, %dec_label_pc_faf8
  %storemerge = phi i32 [ %v2_faf8, %dec_label_pc_faf8 ], [ -1, %dec_label_pc_faac ], [ -1, %dec_label_pc_fab4.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_faec, { 1, 0 }
  uselistorder i32 %v0_fac0, { 1, 0 }
  uselistorder i32 %v1_facc, { 1, 0 }
  uselistorder i8 %v3_fa80, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder label %dec_label_pc_fb04, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fab4.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_fac0, { 1, 0 }
}

define i32 @function_fb0c() local_unnamed_addr {
dec_label_pc_fb0c:
  %r2.global-to-local = alloca i32, align 4
  %v0_fb0c = load i32, i32* @r1, align 4
  %v1_fb0c = add i32 %v0_fb0c, -1
  store i32 %v1_fb0c, i32* %r2.global-to-local, align 4
  %v2_fb0c = icmp eq i32 %v0_fb0c, 0
  %v7_fb0c = icmp eq i32 %v0_fb0c, 1
  %v0_fb10 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_fb0c, i32 %v0_fb10)
  br i1 %v2_fb0c, label %dec_label_pc_fbf4, label %dec_label_pc_fb18

dec_label_pc_fb18:                                ; preds = %dec_label_pc_fb0c
  %v0_fb18 = load i32, i32* @r0, align 4
  %v1_fb18 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_fb18, %v1_fb18
  br i1 %tmp, label %dec_label_pc_fb20, label %dec_label_pc_fbac

dec_label_pc_fb20:                                ; preds = %dec_label_pc_fb18
  %v1_fb20 = load i32, i32* %r2.global-to-local, align 4
  %v2_fb20 = and i32 %v1_fb20, %v1_fb18
  %v4_fb20 = icmp eq i32 %v2_fb20, 0
  br i1 %v4_fb20, label %dec_label_pc_fbb8, label %dec_label_pc_fb28

dec_label_pc_fb28:                                ; preds = %dec_label_pc_fb20
  %v3_fb28 = icmp ult i32 %v1_fb18, 536870912
  br i1 %v3_fb28, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_fb28
  %v4_fb2c = mul i32 %v1_fb18, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_fb28, %.thread
  %v0_fb4c.pr36.ph = phi i32 [ %v4_fb2c, %.thread ], [ %v1_fb18, %dec_label_pc_fb28 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_fb28 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_fb4c.pr36 = phi i32 [ %v4_fb40, %bb81 ], [ %v0_fb4c.pr36.ph, %.preheader.preheader ]
  %v1_fb44 = phi i32 [ %v4_fb44, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_fb38 = icmp ugt i32 %v0_fb4c.pr36, 268435455
  br i1 %v2_fb38, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_fb4cthread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_fb3c = icmp ult i32 %v0_fb4c.pr36, %v0_fb18
  br i1 %v4_fb3c, label %bb80, label %dec_label_pc_fb4cthread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_fb40 = and i32 %v0_fb4c.pr36, 268435456
  %v3_fb40 = icmp eq i32 %v2_fb40, 0
  %v4_fb40 = mul i32 %v0_fb4c.pr36, 16
  br i1 %v3_fb40, label %bb81, label %dec_label_pc_fb4c.loopexit

bb81:                                             ; preds = %bb80
  %v2_fb44 = and i32 %v1_fb44, 268435456
  %v3_fb44 = icmp eq i32 %v2_fb44, 0
  %v4_fb44 = mul i32 %v1_fb44, 16
  br i1 %v3_fb44, label %.preheader, label %dec_label_pc_fb4cthread-pre-split.loopexit.loopexit

dec_label_pc_fb4cthread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_fb5848.ph = phi i32 [ %v1_fb44, %bb ], [ %v4_fb44, %bb81 ]
  %v0_fb4c.pr38.ph = phi i32 [ %v0_fb4c.pr36, %bb ], [ %v4_fb40, %bb81 ]
  br label %dec_label_pc_fb4cthread-pre-split.loopexit

dec_label_pc_fb4cthread-pre-split.loopexit:       ; preds = %dec_label_pc_fb4cthread-pre-split.loopexit.loopexit, %.thread2
  %v1_fb5848 = phi i32 [ %v1_fb44, %.thread2 ], [ %v1_fb5848.ph, %dec_label_pc_fb4cthread-pre-split.loopexit.loopexit ]
  %v0_fb4c.pr38 = phi i32 [ %v0_fb4c.pr36, %.thread2 ], [ %v0_fb4c.pr38.ph, %dec_label_pc_fb4cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_fb4cthread-pre-split

dec_label_pc_fb4cthread-pre-split:                ; preds = %dec_label_pc_fb4cthread-pre-split.loopexit, %bb83
  %v1_fb5846 = phi i32 [ %v1_fb5848, %dec_label_pc_fb4cthread-pre-split.loopexit ], [ %v3_fb58, %bb83 ]
  %v0_fb4c.pr = phi i32 [ %v0_fb4c.pr38, %dec_label_pc_fb4cthread-pre-split.loopexit ], [ %v3_fb54, %bb83 ]
  br label %dec_label_pc_fb4c

dec_label_pc_fb4c.loopexit:                       ; preds = %bb80
  br label %dec_label_pc_fb4c

dec_label_pc_fb4c:                                ; preds = %dec_label_pc_fb4c.loopexit, %dec_label_pc_fb4cthread-pre-split
  %v1_fb58 = phi i32 [ %v1_fb5846, %dec_label_pc_fb4cthread-pre-split ], [ %v1_fb44, %dec_label_pc_fb4c.loopexit ]
  %v1_fb54 = phi i32 [ %v0_fb4c.pr, %dec_label_pc_fb4cthread-pre-split ], [ %v4_fb40, %dec_label_pc_fb4c.loopexit ]
  %v2_fb4c = icmp slt i32 %v1_fb54, 0
  br i1 %v2_fb4c, label %dec_label_pc_fb60, label %bb82

bb82:                                             ; preds = %dec_label_pc_fb4c
  %v4_fb50 = icmp ult i32 %v1_fb54, %v0_fb18
  br i1 %v4_fb50, label %bb83, label %dec_label_pc_fb60

bb83:                                             ; preds = %bb82
  %v3_fb54 = mul i32 %v1_fb54, 2
  %v2_fb58 = icmp slt i32 %v1_fb58, 0
  %v3_fb58 = mul i32 %v1_fb58, 2
  br i1 %v2_fb58, label %dec_label_pc_fb60, label %dec_label_pc_fb4cthread-pre-split

dec_label_pc_fb60:                                ; preds = %bb82, %dec_label_pc_fb4c, %bb83
  %v2_fb6c59 = phi i32 [ %v3_fb58, %bb83 ], [ %v1_fb58, %bb82 ], [ %v1_fb58, %dec_label_pc_fb4c ]
  %v1_fb6451 = phi i32 [ %v3_fb54, %bb83 ], [ %v1_fb54, %bb82 ], [ %v1_fb54, %dec_label_pc_fb4c ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fb64

dec_label_pc_fb64:                                ; preds = %.thread11, %dec_label_pc_fb60
  %v1_fb98 = phi i32 [ %v4_fb98, %.thread11 ], [ %v2_fb6c59, %dec_label_pc_fb60 ]
  %v1_fb6c = phi i32 [ %v0_fba4, %.thread11 ], [ 0, %dec_label_pc_fb60 ]
  %v1_fb9c = phi i32 [ %v4_fb9c, %.thread11 ], [ %v1_fb6451, %dec_label_pc_fb60 ]
  %v1_fb68 = phi i32 [ %v0_fb94, %.thread11 ], [ %v0_fb18, %dec_label_pc_fb60 ]
  %v3_fb64 = icmp ult i32 %v1_fb68, %v1_fb9c
  br i1 %v3_fb64, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_fb64
  %v3_fb68 = sub i32 %v1_fb68, %v1_fb9c
  %v3_fb6c = or i32 %v1_fb6c, %v1_fb98
  store i32 %v3_fb6c, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_fb64, %bb84
  %v1_fb74 = phi i32 [ %v1_fb68, %dec_label_pc_fb64 ], [ %v3_fb68, %bb84 ]
  %v1_fb78 = phi i32 [ %v1_fb6c, %dec_label_pc_fb64 ], [ %v3_fb6c, %bb84 ]
  %v4_fb70 = udiv i32 %v1_fb9c, 2
  %v6_fb70 = icmp ult i32 %v1_fb74, %v4_fb70
  br i1 %v6_fb70, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_fb74 = urem i32 %v1_fb9c, 2
  %v4_fb74 = icmp eq i32 %v3_fb74, 0
  %v6_fb74 = sub i32 %v1_fb74, %v4_fb70
  br i1 %v4_fb74, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_fb78 = udiv i32 %v1_fb98, 2
  %v6_fb78 = or i32 %v1_fb78, %v5_fb78
  store i32 %v6_fb78, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_fb80 = phi i32 [ %v6_fb74, %bb85 ], [ %v1_fb74, %.thread7 ], [ %v6_fb74, %bb86 ]
  %v1_fb84 = phi i32 [ %v1_fb78, %bb85 ], [ %v1_fb78, %.thread7 ], [ %v6_fb78, %bb86 ]
  %v4_fb7c = udiv i32 %v1_fb9c, 4
  %v6_fb7c = icmp ult i32 %v1_fb80, %v4_fb7c
  br i1 %v6_fb7c, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_fb80 = and i32 %v1_fb9c, 2
  %v4_fb80 = icmp eq i32 %v3_fb80, 0
  %v6_fb80 = sub i32 %v1_fb80, %v4_fb7c
  br i1 %v4_fb80, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_fb84 = udiv i32 %v1_fb98, 4
  %v6_fb84 = or i32 %v1_fb84, %v5_fb84
  store i32 %v6_fb84, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_fb8c = phi i32 [ %v6_fb80, %bb87 ], [ %v1_fb80, %.thread8 ], [ %v6_fb80, %bb88 ]
  %v1_fb90 = phi i32 [ %v1_fb84, %bb87 ], [ %v1_fb84, %.thread8 ], [ %v6_fb84, %bb88 ]
  %v4_fb88 = udiv i32 %v1_fb9c, 8
  %v6_fb88 = icmp ult i32 %v1_fb8c, %v4_fb88
  br i1 %v6_fb88, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_fb8c = and i32 %v1_fb9c, 4
  %v4_fb8c = icmp eq i32 %v3_fb8c, 0
  %v6_fb8c = sub i32 %v1_fb8c, %v4_fb88
  br i1 %v4_fb8c, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_fb90 = udiv i32 %v1_fb98, 8
  %v6_fb90 = or i32 %v1_fb90, %v5_fb90
  store i32 %v6_fb90, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_fba4 = phi i32 [ %v1_fb90, %bb89 ], [ %v1_fb90, %.thread9 ], [ %v6_fb90, %bb90 ]
  %v0_fb94 = phi i32 [ %v6_fb8c, %bb89 ], [ %v1_fb8c, %.thread9 ], [ %v6_fb8c, %bb90 ]
  %v2_fb94 = icmp eq i32 %v0_fb94, 0
  br i1 %v2_fb94, label %dec_label_pc_fba4, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_fb98, 16
  br i1 %tmp138, label %dec_label_pc_fba4, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_fb98 = udiv i32 %v1_fb98, 16
  %v4_fb9c = udiv i32 %v1_fb9c, 16
  br label %dec_label_pc_fb64

dec_label_pc_fba4:                                ; preds = %thread-pre-split, %bb91
  ret i32 %v0_fba4

dec_label_pc_fbac:                                ; preds = %dec_label_pc_fb18
  %v9_fb18 = icmp eq i32 %v0_fb18, %v1_fb18
  %. = zext i1 %v9_fb18 to i32
  ret i32 %.

dec_label_pc_fbb8:                                ; preds = %dec_label_pc_fb20
  %v2_fbb8 = icmp ugt i32 %v1_fb18, 65535
  br i1 %v2_fbb8, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_fbb8
  %v2_fbbc = and i32 %v1_fb18, 32768
  %v3_fbbc = icmp eq i32 %v2_fbbc, 0
  %v4_fbbc = udiv i32 %v1_fb18, 65536
  br i1 %v3_fbbc, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_fbb8
  %v0_fbc865 = phi i32 [ %v1_fb18, %dec_label_pc_fbb8 ], [ %v4_fbbc, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_fbcc = phi i32 [ %v0_fbc865, %.thread16 ], [ %v4_fbbc, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_fbc8 = icmp ugt i32 %v1_fbcc, 255
  br i1 %v2_fbc8, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_fbcc = and i32 %v1_fbcc, 128
  %v3_fbcc = icmp eq i32 %v2_fbcc, 0
  %v4_fbcc = udiv i32 %v1_fbcc, 256
  br i1 %v3_fbcc, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_fbd0 = or i32 %storemerge, 8
  store i32 %v2_fbd0, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_fbdc = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_fbd0, %bb98 ]
  %v1_fbd8 = phi i32 [ %v1_fbcc, %bb96 ], [ %v4_fbcc, %bb97 ], [ %v4_fbcc, %bb98 ]
  %v2_fbd4 = icmp ugt i32 %v1_fbd8, 15
  br i1 %v2_fbd4, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_fbd8 = and i32 %v1_fbd8, 8
  %v3_fbd8 = icmp eq i32 %v2_fbd8, 0
  %v4_fbd8 = udiv i32 %v1_fbd8, 16
  br i1 %v3_fbd8, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_fbdc = add nsw i32 %v1_fbdc, 4
  store i32 %v2_fbdc, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_fbe4 = phi i32 [ %v1_fbdc, %.thread17 ], [ %v1_fbdc, %bb99 ], [ %v2_fbdc, %bb100 ]
  %v5_fbe8 = phi i32 [ %v1_fbd8, %.thread17 ], [ %v4_fbd8, %bb99 ], [ %v4_fbd8, %bb100 ]
  %v2_fbe0 = icmp ugt i32 %v5_fbe8, 3
  %v7_fbe0 = icmp eq i32 %v5_fbe8, 4
  %v2_fbe4 = xor i1 %v7_fbe0, true
  %v3_fbe4 = and i1 %v2_fbe0, %v2_fbe4
  br i1 %v3_fbe4, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_fbe4 = add nsw i32 %v4_fbe4, 3
  store i32 %v5_fbe4, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_fbe8 = phi i32 [ %v4_fbe4, %.thread18 ], [ %v5_fbe4, %bb101 ]
  %v2_fbe8 = xor i1 %v2_fbe0, true
  %v3_fbe8 = or i1 %v7_fbe0, %v2_fbe8
  br i1 %v3_fbe8, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_fbe8 = udiv i32 %v5_fbe8, 2
  %v9_fbe8 = add i32 %v4_fbe8, %v8_fbe8
  store i32 %v9_fbe8, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_fbec = phi i32 [ %v4_fbe8, %bb102 ], [ %v9_fbe8, %bb103 ]
  %v6_fbec = lshr i32 %v0_fb18, %v1_fbec
  ret i32 %v6_fbec

dec_label_pc_fbf4:                                ; preds = %dec_label_pc_fb0c
  %v0_fbf4 = load i32, i32* @lr, align 4
  %v0_fbf8 = call i32 @function_fc20()
  store i32 %v0_fbf4, i32* @lr, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_fbe8, { 1, 0 }
  uselistorder i1 %v7_fbe0, { 1, 0 }
  uselistorder i32 %v4_fbd8, { 1, 0 }
  uselistorder i32 %v1_fbd8, { 1, 0, 2, 3 }
  uselistorder i32 %v2_fbd0, { 1, 0 }
  uselistorder i32 %v4_fbcc, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_fbcc, { 1, 0, 2, 3 }
  uselistorder i32 %v4_fbbc, { 1, 0 }
  uselistorder i32 %v0_fb94, { 1, 0 }
  uselistorder i32 %v4_fb88, { 1, 0 }
  uselistorder i32 %v1_fb90, { 1, 2, 0 }
  uselistorder i32 %v4_fb7c, { 1, 0 }
  uselistorder i32 %v1_fb84, { 1, 2, 0 }
  uselistorder i32 %v4_fb70, { 1, 0 }
  uselistorder i32 %v1_fb78, { 1, 2, 0 }
  uselistorder i32 %v1_fb9c, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_fb6c, { 1, 0 }
  uselistorder i32 %v1_fb98, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_fb58, { 1, 0 }
  uselistorder i32 %v3_fb54, { 1, 0 }
  uselistorder i32 %v1_fb54, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_fb58, { 1, 2, 0, 3 }
  uselistorder i32 %v4_fb44, { 1, 0 }
  uselistorder i32 %v4_fb40, { 2, 1, 0 }
  uselistorder i32 %v1_fb44, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_fb4c.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_fb18, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_fb18, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_fb0c, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_fba4, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_fb60, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fb4cthread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_fc08(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fc08:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_fc0c = call i32 @function_fb0c()
  ret i32 %v0_fc0c
}

define i32 @function_fc20() local_unnamed_addr {
dec_label_pc_fc20:
  %v1_fc28 = call i32 @function_103bc(i32 8)
  ret i32 %v1_fc28
}

define i32 @function_fc34() local_unnamed_addr {
dec_label_pc_fc34:
  %v1_fc44 = load i32, i32* @r0, align 4
  ret i32 %v1_fc44
}

define i32 @function_fc48(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fc48:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v6_fc48 = load i32, i32* @r2, align 4
  %v9_fc48 = load i32, i32* @r3, align 4
  store i32 %v9_fc48, i32* %stack_var_-4, align 4
  %v1_fc58 = and i32 %arg2, 64
  %v2_fc58 = icmp eq i32 %v1_fc58, 0
  br i1 %v2_fc58, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_fc48
  %v3_fc60 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v3_fc60, i32* @r3, align 4
  %phitmp = urem i32 %v6_fc48, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_fc48, %bb
  %v0_fc64 = phi i32 [ 0, %dec_label_pc_fc48 ], [ %phitmp, %bb ]
  store i32 %v0_fc64, i32* @r2, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_fc94, label %dec_label_pc_fc84

dec_label_pc_fc84:                                ; preds = %.thread
  %v0_fc84 = call i32 @function_1003c()
  %v0_fc88 = load i32, i32* %r7.global-to-local, align 4
  %v1_fc88 = sub i32 0, %v0_fc88
  store i32 %v1_fc88, i32* @r3, align 4
  %v2_fc8c = inttoptr i32 %v0_fc84 to i32*
  store i32 %v1_fc88, i32* %v2_fc8c, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_fc94

dec_label_pc_fc94:                                ; preds = %.thread, %dec_label_pc_fc84
  %v0_fc94 = phi i32 [ %arg1, %.thread ], [ -1, %dec_label_pc_fc84 ]
  ret i32 %v0_fc94

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_fc94, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_fca8() local_unnamed_addr {
dec_label_pc_fca8:
  %v1_fcb8 = load i32, i32* @r0, align 4
  ret i32 %v1_fcb8
}

define i32 @function_fcbc(i32* %arg1) local_unnamed_addr {
dec_label_pc_fcbc:
  %stack_var_-16 = alloca i32, align 4
  %v2_fcc0 = ptrtoint i32* %stack_var_-16 to i32
  %v2_fcd0 = call i32 @function_fe08(i32 %v2_fcc0, i32 0)
  %v2_fcd4 = load i32, i32* %stack_var_-16, align 4
  %v2_fcd8 = icmp eq i32* %arg1, null
  br i1 %v2_fcd8, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_fcbc
  store i32 %v2_fcd4, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_fcbc, %bb
  ret i32 %v2_fcd4

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_fcec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_fcec:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_fd20, label %dec_label_pc_fd10

dec_label_pc_fd10:                                ; preds = %dec_label_pc_fcec
  %v0_fd10 = call i32 @function_1003c()
  %v0_fd14 = load i32, i32* %r4.global-to-local, align 4
  %v1_fd14 = sub i32 0, %v0_fd14
  %v2_fd18 = inttoptr i32 %v0_fd10 to i32*
  store i32 %v1_fd14, i32* %v2_fd18, align 4
  br label %dec_label_pc_fd20

dec_label_pc_fd20:                                ; preds = %dec_label_pc_fcec, %dec_label_pc_fd10
  %v1_fd28 = phi i32 [ %arg1, %dec_label_pc_fcec ], [ -1, %dec_label_pc_fd10 ]
  ret i32 %v1_fd28

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fd20, { 1, 0 }
}

define i32 @function_fd2c() local_unnamed_addr {
dec_label_pc_fd2c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_fd2c = load i32, i32* @r7, align 4
  store i32 %v3_fd2c, i32* %stack_var_-8, align 4
  %v0_fd38 = load i32, i32* @r0, align 4
  store i32 %v0_fd38, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_fd38, -4095
  br i1 %tmp, label %dec_label_pc_fd58, label %dec_label_pc_fd48

dec_label_pc_fd48:                                ; preds = %dec_label_pc_fd2c
  %v0_fd48 = call i32 @function_1003c()
  %v0_fd4c = load i32, i32* %r7.global-to-local, align 4
  %v1_fd4c = sub i32 0, %v0_fd4c
  %v2_fd50 = inttoptr i32 %v0_fd48 to i32*
  store i32 %v1_fd4c, i32* %v2_fd50, align 4
  %v2_fd58.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_fd58

dec_label_pc_fd58:                                ; preds = %dec_label_pc_fd2c, %dec_label_pc_fd48
  %v1_fd5c = phi i32 [ %v0_fd38, %dec_label_pc_fd2c ], [ -1, %dec_label_pc_fd48 ]
  %v2_fd58 = phi i32 [ %v3_fd2c, %dec_label_pc_fd2c ], [ %v2_fd58.pre, %dec_label_pc_fd48 ]
  store i32 %v2_fd58, i32* @r7, align 4
  ret i32 %v1_fd5c

; uselistorder directives
  uselistorder i32 %v0_fd38, { 1, 0, 2 }
  uselistorder label %dec_label_pc_fd58, { 1, 0 }
}

define i32 @function_fd60(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_fd60:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_fd90, label %dec_label_pc_fd80

dec_label_pc_fd80:                                ; preds = %dec_label_pc_fd60
  %v0_fd80 = call i32 @function_1003c()
  %v0_fd84 = load i32, i32* %r4.global-to-local, align 4
  %v1_fd84 = sub i32 0, %v0_fd84
  %v2_fd88 = inttoptr i32 %v0_fd80 to i32*
  store i32 %v1_fd84, i32* %v2_fd88, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fd90

dec_label_pc_fd90:                                ; preds = %dec_label_pc_fd60, %dec_label_pc_fd80
  %v0_fd90 = phi i32 [ %arg1, %dec_label_pc_fd60 ], [ -1, %dec_label_pc_fd80 ]
  ret i32 %v0_fd90

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_fd90, { 1, 0 }
}

define i32 @function_fda0(i32 %arg1) local_unnamed_addr {
dec_label_pc_fda0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_fda0 = load i32, i32* @r7, align 4
  store i32 %v3_fda0, i32* %stack_var_-8, align 4
  %v0_fdac = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_fdac, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_fdac, -4095
  br i1 %tmp, label %dec_label_pc_fdcc, label %dec_label_pc_fdbc

dec_label_pc_fdbc:                                ; preds = %dec_label_pc_fda0
  %v0_fdbc = call i32 @function_1003c()
  %v0_fdc0 = load i32, i32* %r7.global-to-local, align 4
  %v1_fdc0 = sub i32 0, %v0_fdc0
  %v2_fdc4 = inttoptr i32 %v0_fdbc to i32*
  store i32 %v1_fdc0, i32* %v2_fdc4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_fdcc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_fdcc

dec_label_pc_fdcc:                                ; preds = %dec_label_pc_fda0, %dec_label_pc_fdbc
  %v1_fdd0 = phi i32 [ %v0_fdac, %dec_label_pc_fda0 ], [ -1, %dec_label_pc_fdbc ]
  %v2_fdcc = phi i32 [ %v3_fda0, %dec_label_pc_fda0 ], [ %v2_fdcc.pre, %dec_label_pc_fdbc ]
  store i32 %v2_fdcc, i32* @r7, align 4
  ret i32 %v1_fdd0

; uselistorder directives
  uselistorder i32 %v0_fdac, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fdcc, { 1, 0 }
}

define i32 @function_fdd4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fdd4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_fdd4 = load i32, i32* @r7, align 4
  store i32 %v3_fdd4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_fdfc, label %dec_label_pc_fdec

dec_label_pc_fdec:                                ; preds = %dec_label_pc_fdd4
  %v0_fdec = call i32 @function_1003c()
  %v0_fdf0 = load i32, i32* %r7.global-to-local, align 4
  %v1_fdf0 = sub i32 0, %v0_fdf0
  %v2_fdf4 = inttoptr i32 %v0_fdec to i32*
  store i32 %v1_fdf0, i32* %v2_fdf4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_fe00.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_fdfc

dec_label_pc_fdfc:                                ; preds = %dec_label_pc_fdd4, %dec_label_pc_fdec
  %v2_fe00 = phi i32 [ %v3_fdd4, %dec_label_pc_fdd4 ], [ %v2_fe00.pre, %dec_label_pc_fdec ]
  %v0_fdfc = phi i32 [ %arg1, %dec_label_pc_fdd4 ], [ -1, %dec_label_pc_fdec ]
  store i32 %v2_fe00, i32* @r7, align 4
  ret i32 %v0_fdfc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_fdfc, { 1, 0 }
}

define i32 @function_fe08(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fe08:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_fe08 = load i32, i32* @r7, align 4
  store i32 %v3_fe08, i32* %stack_var_-8, align 4
  %v0_fe14 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_fe14, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_fe14, -4095
  br i1 %tmp, label %dec_label_pc_fe34, label %dec_label_pc_fe24

dec_label_pc_fe24:                                ; preds = %dec_label_pc_fe08
  %v0_fe24 = call i32 @function_1003c()
  %v0_fe28 = load i32, i32* %r7.global-to-local, align 4
  %v1_fe28 = sub i32 0, %v0_fe28
  store i32 %v1_fe28, i32* @r3, align 4
  %v2_fe2c = inttoptr i32 %v0_fe24 to i32*
  store i32 %v1_fe28, i32* %v2_fe2c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_fe34.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_fe34

dec_label_pc_fe34:                                ; preds = %dec_label_pc_fe08, %dec_label_pc_fe24
  %v1_fe38 = phi i32 [ %v0_fe14, %dec_label_pc_fe08 ], [ -1, %dec_label_pc_fe24 ]
  %v2_fe34 = phi i32 [ %v3_fe08, %dec_label_pc_fe08 ], [ %v2_fe34.pre, %dec_label_pc_fe24 ]
  store i32 %v2_fe34, i32* @r7, align 4
  ret i32 %v1_fe38

; uselistorder directives
  uselistorder i32 %v0_fe14, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fe34, { 1, 0 }
}

define i32 @function_fe3c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fe3c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_fe3c = load i32, i32* @r3, align 4
  store i32 %v9_fe3c, i32* %stack_var_-4, align 4
  %v2_fe54 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_fe54, i32* @r3, align 4
  %v0_fe78 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_fe78, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_fe78, -4095
  br i1 %tmp, label %dec_label_pc_fe98, label %dec_label_pc_fe88

dec_label_pc_fe88:                                ; preds = %dec_label_pc_fe3c
  %v0_fe88 = call i32 @function_1003c()
  %v0_fe8c = load i32, i32* %r7.global-to-local, align 4
  %v1_fe8c = sub i32 0, %v0_fe8c
  store i32 %v1_fe8c, i32* @r3, align 4
  %v2_fe90 = inttoptr i32 %v0_fe88 to i32*
  store i32 %v1_fe8c, i32* %v2_fe90, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fe98

dec_label_pc_fe98:                                ; preds = %dec_label_pc_fe3c, %dec_label_pc_fe88
  %v1_fea4 = phi i32 [ %v0_fe78, %dec_label_pc_fe3c ], [ -1, %dec_label_pc_fe88 ]
  ret i32 %v1_fea4

; uselistorder directives
  uselistorder i32 %v0_fe78, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fe98, { 1, 0 }
}

define i32 @function_fea8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_fea8:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_fee4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_fee4, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_fee4, -4095
  br i1 %tmp, label %dec_label_pc_ff04, label %dec_label_pc_fef4

dec_label_pc_fef4:                                ; preds = %dec_label_pc_fea8
  %v0_fef4 = call i32 @function_1003c()
  %v0_fef8 = load i32, i32* %r7.global-to-local, align 4
  %v1_fef8 = sub i32 0, %v0_fef8
  %v2_fefc = inttoptr i32 %v0_fef4 to i32*
  store i32 %v1_fef8, i32* %v2_fefc, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ff04

dec_label_pc_ff04:                                ; preds = %dec_label_pc_fea8, %dec_label_pc_fef4
  %v1_ff10 = phi i32 [ %v0_fee4, %dec_label_pc_fea8 ], [ -1, %dec_label_pc_fef4 ]
  ret i32 %v1_ff10

; uselistorder directives
  uselistorder i32 %v0_fee4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ff04, { 1, 0 }
}

define i32 @function_ff14(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ff14:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ff14 = load i32, i32* @r7, align 4
  store i32 %v3_ff14, i32* %stack_var_-8, align 4
  %v0_ff20 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ff20, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_ff20, -4095
  br i1 %tmp, label %dec_label_pc_ff40, label %dec_label_pc_ff30

dec_label_pc_ff30:                                ; preds = %dec_label_pc_ff14
  %v0_ff30 = call i32 @function_1003c()
  %v0_ff34 = load i32, i32* %r7.global-to-local, align 4
  %v1_ff34 = sub i32 0, %v0_ff34
  %v2_ff38 = inttoptr i32 %v0_ff30 to i32*
  store i32 %v1_ff34, i32* %v2_ff38, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_ff40.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_ff40

dec_label_pc_ff40:                                ; preds = %dec_label_pc_ff14, %dec_label_pc_ff30
  %v1_ff44 = phi i32 [ %v0_ff20, %dec_label_pc_ff14 ], [ -1, %dec_label_pc_ff30 ]
  %v2_ff40 = phi i32 [ %v3_ff14, %dec_label_pc_ff14 ], [ %v2_ff40.pre, %dec_label_pc_ff30 ]
  store i32 %v2_ff40, i32* @r7, align 4
  ret i32 %v1_ff44

; uselistorder directives
  uselistorder i32 %v0_ff20, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ff40, { 1, 0 }
}

define i32 @function_ff48(i32 %arg1) local_unnamed_addr {
dec_label_pc_ff48:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ff48 = load i32, i32* @r7, align 4
  store i32 %v3_ff48, i32* %stack_var_-8, align 4
  %v0_ff54 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ff54, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_ff54, -4095
  br i1 %tmp, label %dec_label_pc_ff74, label %dec_label_pc_ff64

dec_label_pc_ff64:                                ; preds = %dec_label_pc_ff48
  %v0_ff64 = call i32 @function_1003c()
  %v0_ff68 = load i32, i32* %r7.global-to-local, align 4
  %v1_ff68 = sub i32 0, %v0_ff68
  %v2_ff6c = inttoptr i32 %v0_ff64 to i32*
  store i32 %v1_ff68, i32* %v2_ff6c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_ff74.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_ff74

dec_label_pc_ff74:                                ; preds = %dec_label_pc_ff48, %dec_label_pc_ff64
  %v1_ff78 = phi i32 [ %v0_ff54, %dec_label_pc_ff48 ], [ -1, %dec_label_pc_ff64 ]
  %v2_ff74 = phi i32 [ %v3_ff48, %dec_label_pc_ff48 ], [ %v2_ff74.pre, %dec_label_pc_ff64 ]
  store i32 %v2_ff74, i32* @r7, align 4
  ret i32 %v1_ff78

; uselistorder directives
  uselistorder i32 %v0_ff54, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ff74, { 1, 0 }
}

define i32 @function_ff7c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_ff7c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_ff7c = load i32, i32* @r3, align 4
  store i32 %v9_ff7c, i32* %stack_var_-4, align 4
  %v2_ff88 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_ff88, i32* @r3, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_ffbc, label %dec_label_pc_ffac

dec_label_pc_ffac:                                ; preds = %dec_label_pc_ff7c
  %v0_ffac = call i32 @function_1003c()
  %v0_ffb0 = load i32, i32* %r7.global-to-local, align 4
  %v1_ffb0 = sub i32 0, %v0_ffb0
  store i32 %v1_ffb0, i32* @r3, align 4
  %v2_ffb4 = inttoptr i32 %v0_ffac to i32*
  store i32 %v1_ffb0, i32* %v2_ffb4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_ffbc

dec_label_pc_ffbc:                                ; preds = %dec_label_pc_ff7c, %dec_label_pc_ffac
  %v0_ffbc = phi i32 [ %arg1, %dec_label_pc_ff7c ], [ -1, %dec_label_pc_ffac ]
  ret i32 %v0_ffbc

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ffbc, { 1, 0 }
}

define i32 @function_ffd0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_ffd0:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ffd0 = load i32, i32* @r7, align 4
  store i32 %v3_ffd0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_fffc, label %dec_label_pc_ffec

dec_label_pc_ffec:                                ; preds = %dec_label_pc_ffd0
  %v0_ffec = call i32 @function_1003c()
  %v0_fff0 = load i32, i32* %r7.global-to-local, align 4
  %v1_fff0 = sub i32 0, %v0_fff0
  %v2_fff4 = inttoptr i32 %v0_ffec to i32*
  store i32 %v1_fff0, i32* %v2_fff4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10000.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_fffc

dec_label_pc_fffc:                                ; preds = %dec_label_pc_ffd0, %dec_label_pc_ffec
  %v2_10000 = phi i32 [ %v3_ffd0, %dec_label_pc_ffd0 ], [ %v2_10000.pre, %dec_label_pc_ffec ]
  %v0_fffc = phi i32 [ %arg1, %dec_label_pc_ffd0 ], [ -1, %dec_label_pc_ffec ]
  store i32 %v2_10000, i32* @r7, align 4
  ret i32 %v0_fffc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_fffc, { 1, 0 }
}

define i32 @function_10008(i32 %arg1) local_unnamed_addr {
dec_label_pc_10008:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10008 = load i32, i32* @r7, align 4
  store i32 %v3_10008, i32* %stack_var_-8, align 4
  %v0_10014 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10014, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10014, -4095
  br i1 %tmp, label %dec_label_pc_10034, label %dec_label_pc_10024

dec_label_pc_10024:                               ; preds = %dec_label_pc_10008
  %v0_10024 = call i32 @function_1003c()
  %v0_10028 = load i32, i32* %r7.global-to-local, align 4
  %v1_10028 = sub i32 0, %v0_10028
  store i32 %v1_10028, i32* @r3, align 4
  %v2_1002c = inttoptr i32 %v0_10024 to i32*
  store i32 %v1_10028, i32* %v2_1002c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10034.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10034

dec_label_pc_10034:                               ; preds = %dec_label_pc_10008, %dec_label_pc_10024
  %v1_10038 = phi i32 [ %v0_10014, %dec_label_pc_10008 ], [ -1, %dec_label_pc_10024 ]
  %v2_10034 = phi i32 [ %v3_10008, %dec_label_pc_10008 ], [ %v2_10034.pre, %dec_label_pc_10024 ]
  store i32 %v2_10034, i32* @r7, align 4
  ret i32 %v1_10038

; uselistorder directives
  uselistorder i32 %v0_10014, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10034, { 1, 0 }
}

define i32 @function_1003c() local_unnamed_addr {
dec_label_pc_1003c:
  store i32 122896, i32* @r3, align 4
  ret i32 ptrtoint (i32* @global_var_1e2c0.578 to i32)
}

define i32 @function_10058(i32 %arg1) local_unnamed_addr {
dec_label_pc_10058:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_1005c = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_1005c, i32* @r0, align 4
  %v1_10064 = call i32 @function_129ac(i32 %v2_1005c)
  %v2_10068 = load i32, i32* %stack_var_-24, align 4
  %v2_1006c = add i32 %v2_10068, %tmp
  %v2_10074 = mul i32 %v2_1006c, 10000
  %v1_10078 = and i32 %v2_10074, 2147483632
  ret i32 %v1_10078

; uselistorder directives
  uselistorder i32 %v2_1005c, { 1, 0 }
}

define i32 @function_10088(i32 %arg1) local_unnamed_addr {
dec_label_pc_10088:
  %v0_10088 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10088, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_10088
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_10088, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_10090(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10090:
  %v0_10090 = call i32 @function_13f30()
  ret i32 %v0_10090
}

define i32 @function_100a0() local_unnamed_addr {
dec_label_pc_100a0:
  %v0_100a0 = call i32 @function_13f30()
  ret i32 %v0_100a0
}

define i32 @function_100b0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100b0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_100c01 = load i32, i32* @r1, align 4
  %v1_100c02 = inttoptr i32 %v0_100c01 to i8*
  %v2_100c03 = load i8, i8* %v1_100c02, align 1
  %v2_100c45 = icmp eq i8 %v2_100c03, 0
  store i1 %v2_100c45, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_100c03, i8* %arg1, align 1
  br i1 %v2_100c45, label %dec_label_pc_100d0, label %dec_label_pc_100b8

dec_label_pc_100b8:                               ; preds = %dec_label_pc_100b0, %dec_label_pc_100b8
  %v0_100b8 = load i32, i32* @r1, align 4
  %v1_100b8 = add i32 %v0_100b8, 1
  store i32 %v1_100b8, i32* @r1, align 4
  %v0_100bc = load i32, i32* %r2.global-to-local, align 4
  %v1_100bc = add i32 %v0_100bc, 1
  store i32 %v1_100bc, i32* %r2.global-to-local, align 4
  %v1_100c0 = inttoptr i32 %v1_100b8 to i8*
  %v2_100c0 = load i8, i8* %v1_100c0, align 1
  %v2_100c4 = icmp eq i8 %v2_100c0, 0
  store i1 %v2_100c4, i1* %cpsr_z.global-to-local, align 1
  %v3_100c8 = inttoptr i32 %v1_100bc to i8*
  store i8 %v2_100c0, i8* %v3_100c8, align 1
  %v0_100cc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_100cc, label %dec_label_pc_100d0, label %dec_label_pc_100b8

dec_label_pc_100d0:                               ; preds = %dec_label_pc_100b8, %dec_label_pc_100b0
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_100b8, { 1, 0 }
}

define i32 @function_100d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_100d4:
  %stack_var_-12 = alloca i32, align 4
  %v2_100dc = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_100dc, i32* @r1, align 4
  %v0_100e0 = call i32 @function_1483c()
  %v2_100e4 = icmp eq i32 %v0_100e0, 0
  %v4_100e8 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_100e4, i32 -1, i32 %v4_100e8
  ret i32 %storemerge
}

define i32 @function_100fc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_100fc:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_100fc = load i32, i32* @r7, align 4
  store i32 %v3_100fc, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10124, label %dec_label_pc_10114

dec_label_pc_10114:                               ; preds = %dec_label_pc_100fc
  %v0_10114 = call i32 @function_1003c()
  %v0_10118 = load i32, i32* %r7.global-to-local, align 4
  %v1_10118 = sub i32 0, %v0_10118
  %v2_1011c = inttoptr i32 %v0_10114 to i32*
  store i32 %v1_10118, i32* %v2_1011c, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10128.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10124

dec_label_pc_10124:                               ; preds = %dec_label_pc_100fc, %dec_label_pc_10114
  %v2_10128 = phi i32 [ %v3_100fc, %dec_label_pc_100fc ], [ %v2_10128.pre, %dec_label_pc_10114 ]
  %v0_10124 = phi i32 [ %arg1, %dec_label_pc_100fc ], [ -1, %dec_label_pc_10114 ]
  store i32 %v2_10128, i32* @r7, align 4
  ret i32 %v0_10124

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10124, { 1, 0 }
}

define i32 @function_10134(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10134:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10134 = load i32, i32* @r7, align 4
  store i32 %v3_10134, i32* %stack_var_-8, align 4
  %v0_10140 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10140, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10140, -4095
  br i1 %tmp, label %dec_label_pc_10160, label %dec_label_pc_10150

dec_label_pc_10150:                               ; preds = %dec_label_pc_10134
  %v0_10150 = call i32 @function_1003c()
  %v0_10154 = load i32, i32* %r7.global-to-local, align 4
  %v1_10154 = sub i32 0, %v0_10154
  %v2_10158 = inttoptr i32 %v0_10150 to i32*
  store i32 %v1_10154, i32* %v2_10158, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10160.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10160

dec_label_pc_10160:                               ; preds = %dec_label_pc_10134, %dec_label_pc_10150
  %v1_10164 = phi i32 [ %v0_10140, %dec_label_pc_10134 ], [ -1, %dec_label_pc_10150 ]
  %v2_10160 = phi i32 [ %v3_10134, %dec_label_pc_10134 ], [ %v2_10160.pre, %dec_label_pc_10150 ]
  store i32 %v2_10160, i32* @r7, align 4
  ret i32 %v1_10164

; uselistorder directives
  uselistorder i32 %v0_10140, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10160, { 1, 0 }
}

define i32 @function_1016c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1016c:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1016c = load i32, i32* @r7, align 4
  store i32 %v3_1016c, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10194, label %dec_label_pc_10184

dec_label_pc_10184:                               ; preds = %dec_label_pc_1016c
  %v0_10184 = call i32 @function_1003c()
  %v0_10188 = load i32, i32* %r7.global-to-local, align 4
  %v1_10188 = sub i32 0, %v0_10188
  store i32 %v1_10188, i32* @r3, align 4
  %v2_1018c = inttoptr i32 %v0_10184 to i32*
  store i32 %v1_10188, i32* %v2_1018c, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10198.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10194

dec_label_pc_10194:                               ; preds = %dec_label_pc_1016c, %dec_label_pc_10184
  %v2_10198 = phi i32 [ %v3_1016c, %dec_label_pc_1016c ], [ %v2_10198.pre, %dec_label_pc_10184 ]
  %v0_10194 = phi i32 [ %arg1, %dec_label_pc_1016c ], [ -1, %dec_label_pc_10184 ]
  store i32 %v2_10198, i32* @r7, align 4
  ret i32 %v0_10194

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10194, { 1, 0 }
}

define i32 @function_101a4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_101a4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_101a4 = load i32, i32* @r7, align 4
  store i32 %v3_101a4, i32* %stack_var_-8, align 4
  %v0_101b0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_101b0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_101b0, -4095
  br i1 %tmp, label %dec_label_pc_101d0, label %dec_label_pc_101c0

dec_label_pc_101c0:                               ; preds = %dec_label_pc_101a4
  %v0_101c0 = call i32 @function_1003c()
  %v0_101c4 = load i32, i32* %r7.global-to-local, align 4
  %v1_101c4 = sub i32 0, %v0_101c4
  %v2_101c8 = inttoptr i32 %v0_101c0 to i32*
  store i32 %v1_101c4, i32* %v2_101c8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_101d0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_101d0

dec_label_pc_101d0:                               ; preds = %dec_label_pc_101a4, %dec_label_pc_101c0
  %v1_101d4 = phi i32 [ %v0_101b0, %dec_label_pc_101a4 ], [ -1, %dec_label_pc_101c0 ]
  %v2_101d0 = phi i32 [ %v3_101a4, %dec_label_pc_101a4 ], [ %v2_101d0.pre, %dec_label_pc_101c0 ]
  store i32 %v2_101d0, i32* @r7, align 4
  ret i32 %v1_101d4

; uselistorder directives
  uselistorder i32 %v0_101b0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_101d0, { 1, 0 }
}

define i32 @function_101dc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_101dc:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10210, label %dec_label_pc_10200

dec_label_pc_10200:                               ; preds = %dec_label_pc_101dc
  %v0_10200 = call i32 @function_1003c()
  %v0_10204 = load i32, i32* %r4.global-to-local, align 4
  %v1_10204 = sub i32 0, %v0_10204
  %v2_10208 = inttoptr i32 %v0_10200 to i32*
  store i32 %v1_10204, i32* %v2_10208, align 4
  br label %dec_label_pc_10210

dec_label_pc_10210:                               ; preds = %dec_label_pc_101dc, %dec_label_pc_10200
  %v1_10218 = phi i32 [ %arg1, %dec_label_pc_101dc ], [ -1, %dec_label_pc_10200 ]
  ret i32 %v1_10218

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10210, { 1, 0 }
}

define i32 @function_10220(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10220:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10220 = load i32, i32* @r7, align 4
  store i32 %v3_10220, i32* %stack_var_-8, align 4
  %v0_1022c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1022c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1022c, -4095
  br i1 %tmp, label %dec_label_pc_1024c, label %dec_label_pc_1023c

dec_label_pc_1023c:                               ; preds = %dec_label_pc_10220
  %v0_1023c = call i32 @function_1003c()
  %v0_10240 = load i32, i32* %r7.global-to-local, align 4
  %v1_10240 = sub i32 0, %v0_10240
  %v2_10244 = inttoptr i32 %v0_1023c to i32*
  store i32 %v1_10240, i32* %v2_10244, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1024c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1024c

dec_label_pc_1024c:                               ; preds = %dec_label_pc_10220, %dec_label_pc_1023c
  %v1_10250 = phi i32 [ %v0_1022c, %dec_label_pc_10220 ], [ -1, %dec_label_pc_1023c ]
  %v2_1024c = phi i32 [ %v3_10220, %dec_label_pc_10220 ], [ %v2_1024c.pre, %dec_label_pc_1023c ]
  store i32 %v2_1024c, i32* %r7.global-to-local, align 4
  ret i32 %v1_10250

; uselistorder directives
  uselistorder i32 %v0_1022c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1024c, { 1, 0 }
}

define i32 @function_10254(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10254:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10254 = load i32, i32* @r7, align 4
  store i32 %v3_10254, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1027c, label %dec_label_pc_1026c

dec_label_pc_1026c:                               ; preds = %dec_label_pc_10254
  %v0_1026c = call i32 @function_1003c()
  %v0_10270 = load i32, i32* %r7.global-to-local, align 4
  %v1_10270 = sub i32 0, %v0_10270
  %v2_10274 = inttoptr i32 %v0_1026c to i32*
  store i32 %v1_10270, i32* %v2_10274, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_10280.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1027c

dec_label_pc_1027c:                               ; preds = %dec_label_pc_10254, %dec_label_pc_1026c
  %v2_10280 = phi i32 [ %v3_10254, %dec_label_pc_10254 ], [ %v2_10280.pre, %dec_label_pc_1026c ]
  %v0_1027c = phi i32 [ %arg1, %dec_label_pc_10254 ], [ -1, %dec_label_pc_1026c ]
  store i32 %v2_10280, i32* @r7, align 4
  ret i32 %v0_1027c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1027c, { 1, 0 }
}

define i32 @function_1028c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1028c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1028c = load i32, i32* @r4, align 4
  store i32 %v3_1028c, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_102bc, label %dec_label_pc_102ac

dec_label_pc_102ac:                               ; preds = %dec_label_pc_1028c
  %v0_102ac = call i32 @function_1003c()
  %v0_102b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_102b0 = sub i32 0, %v0_102b0
  %v2_102b4 = inttoptr i32 %v0_102ac to i32*
  store i32 %v1_102b0, i32* %v2_102b4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_102c0.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_102bc

dec_label_pc_102bc:                               ; preds = %dec_label_pc_1028c, %dec_label_pc_102ac
  %v2_102c0 = phi i32 [ %v3_1028c, %dec_label_pc_1028c ], [ %v2_102c0.pre, %dec_label_pc_102ac ]
  %v0_102bc = phi i32 [ %arg1, %dec_label_pc_1028c ], [ -1, %dec_label_pc_102ac ]
  store i32 %v2_102c0, i32* @r4, align 4
  ret i32 %v0_102bc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_102bc, { 1, 0 }
}

define i32 @function_102c8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_102c8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_102c8 = load i32, i32* @r7, align 4
  store i32 %v3_102c8, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_102f0, label %dec_label_pc_102e0

dec_label_pc_102e0:                               ; preds = %dec_label_pc_102c8
  %v0_102e0 = call i32 @function_1003c()
  %v0_102e4 = load i32, i32* %r7.global-to-local, align 4
  %v1_102e4 = sub i32 0, %v0_102e4
  store i32 %v1_102e4, i32* @r3, align 4
  %v2_102e8 = inttoptr i32 %v0_102e0 to i32*
  store i32 %v1_102e4, i32* %v2_102e8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_102f4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_102f0

dec_label_pc_102f0:                               ; preds = %dec_label_pc_102c8, %dec_label_pc_102e0
  %v2_102f4 = phi i32 [ %v3_102c8, %dec_label_pc_102c8 ], [ %v2_102f4.pre, %dec_label_pc_102e0 ]
  %v0_102f0 = phi i32 [ %arg1, %dec_label_pc_102c8 ], [ -1, %dec_label_pc_102e0 ]
  store i32 %v2_102f4, i32* @r7, align 4
  ret i32 %v0_102f0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_102f0, { 1, 0 }
}

define i32 @function_10300(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10300:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10300 = load i32, i32* @r4, align 4
  store i32 %v3_10300, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10330, label %dec_label_pc_10320

dec_label_pc_10320:                               ; preds = %dec_label_pc_10300
  %v0_10320 = call i32 @function_1003c()
  %v0_10324 = load i32, i32* %r4.global-to-local, align 4
  %v1_10324 = sub i32 0, %v0_10324
  %v2_10328 = inttoptr i32 %v0_10320 to i32*
  store i32 %v1_10324, i32* %v2_10328, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_10334.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_10330

dec_label_pc_10330:                               ; preds = %dec_label_pc_10300, %dec_label_pc_10320
  %v2_10334 = phi i32 [ %v3_10300, %dec_label_pc_10300 ], [ %v2_10334.pre, %dec_label_pc_10320 ]
  %v0_10330 = phi i32 [ %arg1, %dec_label_pc_10300 ], [ -1, %dec_label_pc_10320 ]
  store i32 %v2_10334, i32* @r4, align 4
  ret i32 %v0_10330

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10330, { 1, 0 }
}

define i32 @function_10340(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10340:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10374, label %dec_label_pc_10364

dec_label_pc_10364:                               ; preds = %dec_label_pc_10340
  %v0_10364 = call i32 @function_1003c()
  %v0_10368 = load i32, i32* %r4.global-to-local, align 4
  %v1_10368 = sub i32 0, %v0_10368
  store i32 %v1_10368, i32* @r3, align 4
  %v2_1036c = inttoptr i32 %v0_10364 to i32*
  store i32 %v1_10368, i32* %v2_1036c, align 4
  br label %dec_label_pc_10374

dec_label_pc_10374:                               ; preds = %dec_label_pc_10340, %dec_label_pc_10364
  %v1_1037c = phi i32 [ %arg1, %dec_label_pc_10340 ], [ -1, %dec_label_pc_10364 ]
  ret i32 %v1_1037c

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10374, { 1, 0 }
}

define i32 @function_10384(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10384:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10384 = load i32, i32* @r7, align 4
  store i32 %v3_10384, i32* %stack_var_-8, align 4
  %v0_10390 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10390, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10390, -4095
  br i1 %tmp, label %dec_label_pc_103b0, label %dec_label_pc_103a0

dec_label_pc_103a0:                               ; preds = %dec_label_pc_10384
  %v0_103a0 = call i32 @function_1003c()
  %v0_103a4 = load i32, i32* %r7.global-to-local, align 4
  %v1_103a4 = sub i32 0, %v0_103a4
  store i32 %v1_103a4, i32* @r3, align 4
  %v2_103a8 = inttoptr i32 %v0_103a0 to i32*
  store i32 %v1_103a4, i32* %v2_103a8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_103b0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_103b0

dec_label_pc_103b0:                               ; preds = %dec_label_pc_10384, %dec_label_pc_103a0
  %v1_103b4 = phi i32 [ %v0_10390, %dec_label_pc_10384 ], [ -1, %dec_label_pc_103a0 ]
  %v2_103b0 = phi i32 [ %v3_10384, %dec_label_pc_10384 ], [ %v2_103b0.pre, %dec_label_pc_103a0 ]
  store i32 %v2_103b0, i32* @r7, align 4
  ret i32 %v1_103b4

; uselistorder directives
  uselistorder i32 %v0_10390, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_103b0, { 1, 0 }
}

define i32 @function_103bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_103bc:
  store i32 %arg1, i32* @r0, align 4
  %v3_103bc = load i32, i32* @r4, align 4
  %v0_103c4 = call i32 @function_fca8()
  %v2_103cc = call i32 @function_fdd4(i32 %v0_103c4, i32 %arg1)
  store i32 %v3_103bc, i32* @r4, align 4
  ret i32 %v2_103cc

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_fdd4, { 0, 3, 2, 1 }
}

define i32 @function_103d8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_103d8:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %tmp4 = icmp slt i32 %arg1, 1
  br i1 %tmp4, label %dec_label_pc_103f0, label %dec_label_pc_103e8

dec_label_pc_103e8:                               ; preds = %dec_label_pc_103d8
  %v7_103ec = icmp slt i32 %arg1, 65
  br i1 %v7_103ec, label %dec_label_pc_10404, label %dec_label_pc_103f0

dec_label_pc_103f0:                               ; preds = %dec_label_pc_103e8, %dec_label_pc_103d8
  %v0_103f0 = call i32 @function_1003c()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_103fc = inttoptr i32 %v0_103f0 to i32*
  store i32 22, i32* %v2_103fc, align 4
  %v0_1040c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1040c

dec_label_pc_10404:                               ; preds = %dec_label_pc_103e8
  %v0_10404 = call i32 @function_1050c()
  store i32 %v0_10404, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1040c

dec_label_pc_1040c:                               ; preds = %dec_label_pc_103f0, %dec_label_pc_10404
  %v0_1040c = phi i32 [ %v0_1040c.pre, %dec_label_pc_103f0 ], [ %v0_10404, %dec_label_pc_10404 ]
  ret i32 %v0_1040c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1040c, { 1, 0 }
}

define i32 @function_1041c(i32* %arg1) local_unnamed_addr {
dec_label_pc_1041c:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_10424 = add i32 %tmp, 4
  %v3_10424 = inttoptr i32 %v2_10424 to i32*
  store i32 0, i32* %v3_10424, align 4
  %v1_10428 = load i32, i32* %r3.global-to-local, align 4
  %v2_10428 = inttoptr i32 %v1_10428 to i32*
  store i32 0, i32* %v2_10428, align 4
  ret i32 0
}

define i32 @function_10430(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10430:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10430 = load i32, i32* @r4, align 4
  store i32 %v3_10430, i32* %stack_var_-16, align 4
  %v6_10430 = load i32, i32* @r5, align 4
  %v9_10430 = load i32, i32* @r6, align 4
  %v7_10438 = icmp eq i32 %arg2, -1
  br i1 %v7_10438, label %.thread4, label %bb

.thread4:                                         ; preds = %dec_label_pc_10430
  br label %.thread16

bb:                                               ; preds = %dec_label_pc_10430
  %v2_10440 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_1045c

.thread16:                                        ; preds = %bb, %.thread4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10464

dec_label_pc_1045c:                               ; preds = %bb
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_10460 = icmp slt i32 %arg1, 65
  br i1 %v7_10460, label %dec_label_pc_10478, label %dec_label_pc_10464

dec_label_pc_10464:                               ; preds = %.thread16, %dec_label_pc_1045c
  %v0_10464 = call i32 @function_1003c()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10470 = inttoptr i32 %v0_10464 to i32*
  store i32 22, i32* %v2_10470, align 4
  %v0_104d0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb33

dec_label_pc_10478:                               ; preds = %dec_label_pc_1045c
  %v2_10478 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10478, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_10480 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_10480, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_10490 = call i32 @function_1050c()
  %v0_10498 = load i32, i32* @r5, align 4
  %v2_104a0 = call i32 @function_104e8(i32 ptrtoint (i32* @global_var_203a0.592 to i32), i32 %v0_10498)
  store i32 %v2_10440, i32* %r2.global-to-local, align 4
  %v0_104b8 = load i32, i32* @r5, align 4
  %v3_104c0 = call i32 @function_12720(i32 %v0_104b8, i32 %v2_10478, i32 %v2_10440)
  %v1_104c4 = icmp slt i32 %v3_104c0, 0
  br i1 %v1_104c4, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_10478
  %v5_104c8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_104c8, i32* %r2.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_10478
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_10464, %bb32
  %v0_104d0 = phi i32 [ %v5_104c8, %bb31 ], [ %v0_104d0.pre, %dec_label_pc_10464 ], [ -1, %bb32 ]
  %v2_104d8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_104d8, i32* @r4, align 4
  store i32 %v6_10430, i32* @r5, align 4
  store i32 %v9_10430, i32* @r6, align 4
  ret i32 %v0_104d0

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 ()* @function_1050c, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 0, 1 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10464, { 1, 0 }
}

define i32 @function_104e8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_104e8:
  %v1_104e8 = add i32 %arg2, -1
  %v3_104ec = udiv i32 %v1_104e8, 32
  %v4_104f0 = mul nuw nsw i32 %v3_104ec, 4
  %v5_104f0 = add i32 %v4_104f0, %arg1
  %v6_104f0 = inttoptr i32 %v5_104f0 to i32*
  %v7_104f0 = load i32, i32* %v6_104f0, align 4
  %v1_104f4 = urem i32 %v1_104e8, 32
  %v7_104fc = shl i32 1, %v1_104f4
  %v8_104fc = and i32 %v7_104f0, %v7_104fc
  %v10_104fc = icmp ne i32 %v8_104fc, 0
  %. = zext i1 %v10_104fc to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_104e8, { 1, 0 }
}

define i32 @function_1050c() local_unnamed_addr {
dec_label_pc_1050c:
  %v0_1050c = load i32, i32* @r1, align 4
  %v1_1050c = add i32 %v0_1050c, -1
  %v3_10510 = udiv i32 %v1_1050c, 32
  %v0_10514 = load i32, i32* @r0, align 4
  %v4_10514 = mul nuw nsw i32 %v3_10510, 4
  %v5_10514 = add i32 %v0_10514, %v4_10514
  %v6_10514 = inttoptr i32 %v5_10514 to i32*
  %v7_10514 = load i32, i32* %v6_10514, align 4
  %v1_10518 = urem i32 %v1_1050c, 32
  %v7_10520 = shl i32 1, %v1_10518
  %v8_10520 = or i32 %v7_10514, %v7_10520
  store i32 %v8_10520, i32* %v6_10514, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1050c, { 1, 0 }
}

define i32 @function_10530(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10530:
  %v1_10530 = add i32 %arg2, -1
  %v3_10534 = udiv i32 %v1_10530, 32
  %v4_10538 = mul nuw nsw i32 %v3_10534, 4
  %v5_10538 = add i32 %v4_10538, %arg1
  %v6_10538 = inttoptr i32 %v5_10538 to i32*
  %v7_10538 = load i32, i32* %v6_10538, align 4
  %v1_1053c = urem i32 %v1_10530, 32
  %tmp = shl i32 -1, %v1_1053c
  %v8_10544 = add i32 %tmp, -1
  %v9_10544 = and i32 %v7_10538, %v8_10544
  store i32 %v9_10544, i32* %v6_10538, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_10530, { 1, 0 }
}

define i32 @function_10554(i32 %arg1) local_unnamed_addr {
dec_label_pc_10554:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_10554 = udiv i32 %arg1, 256
  store i32 %v3_10554, i32* %r1.global-to-local, align 4
  %v2_10558 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_10558, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_10554
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_10554, %bb
  %v0_10564 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10558, i32 %v0_10564)
  %v0_10568 = load i32, i32* %r1.global-to-local, align 4
  %v1_10568 = add i32 %v0_10568, 1048320
  %v3_1056c = udiv i32 %v1_10568, 65536
  %v1_10570 = and i32 %v3_1056c, 8
  %v6_10574 = shl i32 %v0_10568, %v1_10570
  %v1_10578 = add i32 %v6_10574, 520192
  %v3_1057c = udiv i32 %v1_10578, 65536
  %v1_10580 = and i32 %v3_1057c, 4
  %v6_10584 = shl i32 %v6_10574, %v1_10580
  %v1_10588 = add i32 %v6_10584, 245760
  %v3_1058c = udiv i32 %v1_10588, 65536
  %v1_10590 = and i32 %v3_1058c, 2
  %v6_10594 = shl i32 %v6_10584, %v1_10590
  store i32 %v6_10594, i32* %r1.global-to-local, align 4
  %v1_10598 = sub nsw i32 13, %v1_10570
  %v2_1059c = sub nsw i32 %v1_10598, %v1_10580
  %v3_105a0 = udiv i32 %v6_10594, 32768
  %v4_105a0 = sub nuw nsw i32 -1, %v3_105a0
  %v4_105a4 = udiv i32 %v6_10594, 16384
  %v5_105a4 = and i32 %v4_105a4, %v4_105a0
  %v2_105a8 = sub nsw i32 %v2_1059c, %v1_10590
  %v2_105ac = add nsw i32 %v2_105a8, %v5_105a4
  %v1_105b0 = add nsw i32 %v2_105ac, 6
  %v0_105b4 = load i32, i32* %ip.global-to-local, align 4
  %v6_105b4 = lshr i32 %v0_105b4, %v1_105b0
  %v3_105b8 = mul nsw i32 %v2_105ac, 4
  %v1_105bc = add nsw i32 %v3_105b8, 32
  %v1_105c0 = urem i32 %v6_105b4, 4
  %v2_105c4 = or i32 %v1_105c0, %v1_105bc
  ret i32 %v2_105c4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_105cc() local_unnamed_addr {
dec_label_pc_105cc:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_105cc = load i32, i32* @r4, align 4
  %v6_105cc = load i32, i32* @r5, align 4
  %v9_105cc = load i32, i32* @r6, align 4
  %v12_105cc = load i32, i32* @r7, align 4
  %v15_105cc = load i32, i32* @r8, align 4
  %v18_105cc = load i32, i32* @sb, align 4
  %v21_105cc = load i32, i32* @sl, align 4
  %v24_105cc = load i32, i32* @fp, align 4
  %v27_105cc = load i32, i32* @lr, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r1.global-to-local, align 4
  %v4_105e0 = load i32, i32* inttoptr (i32 122964 to i32*), align 4
  store i32 %v4_105e0, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_105ec = load i32, i32* inttoptr (i32 122932 to i32*), align 4
  store i32 %v4_105ec, i32* %r1.global-to-local, align 4
  %v0_105f0 = load i32, i32* @r0, align 4
  store i32 %v0_105f0, i32* @r5, align 4
  store i32 %v4_105e0, i32* %r2.global-to-local, align 4
  %v2_105f8 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_105f8, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %ip.global-to-local, align 4
  %v4_10604 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  store i32 %v4_10604, i32* %ip.global-to-local, align 4
  store i32 67088, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_10604)
  %v0_10610 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10610, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r1.global-to-local, align 4
  %v4_1061c = load i32, i32* inttoptr (i32 122912 to i32*), align 32
  store i32 %v4_1061c, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_10628.598 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1061c)
  %v0_10628 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_10628, -32
  br i1 %tmp, label %dec_label_pc_10644, label %dec_label_pc_10630

dec_label_pc_10630:                               ; preds = %dec_label_pc_105cc
  %v0_10630 = call i32 @function_1003c()
  store i32 %v0_10630, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  %v2_1063c = inttoptr i32 %v0_10630 to i32*
  store i32 12, i32* %v2_1063c, align 4
  br label %dec_label_pc_10ec0

dec_label_pc_10644:                               ; preds = %dec_label_pc_105cc
  %v1_10644 = add i32 %v0_10628, 11
  store i32 %v1_10644, i32* %r0.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r2.global-to-local, align 4
  %v2_10650 = icmp ugt i32 %v1_10644, 14
  %v7_10650 = icmp eq i32 %v1_10644, 15
  %v2_10654 = xor i1 %v7_10650, true
  %v3_10654 = and i1 %v2_10650, %v2_10654
  br i1 %v3_10654, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_10644
  %v5_10654 = and i32 %v1_10644, -8
  store i32 %v5_10654, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_10644, %bb
  %v4_10658 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_10658, i32* @r0, align 4
  %v1_1065c = inttoptr i32 %v4_10658 to i32*
  %v2_1065c = load i32, i32* %v1_1065c, align 4
  store i32 %v2_1065c, i32* @r4, align 4
  %v2_10660 = xor i1 %v2_10650, true
  %v3_10660 = or i1 %v7_10650, %v2_10660
  br i1 %v3_10660, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_10664 = urem i32 %v2_1065c, 2
  %v2_10664 = icmp eq i32 %v1_10664, 0
  br i1 %v2_10664, label %dec_label_pc_1066c, label %dec_label_pc_1067c

dec_label_pc_1066c:                               ; preds = %bb140
  %v2_1066c = icmp eq i32 %v2_1065c, 0
  br i1 %v2_1066c, label %dec_label_pc_10674, label %dec_label_pc_10a58

dec_label_pc_10674:                               ; preds = %dec_label_pc_1066c
  %v0_10674 = call i32 @function_11484()
  store i32 %v0_10674, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10a58

dec_label_pc_1067c:                               ; preds = %bb140
  %v0_1067c = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_1067c, %v2_1065c
  br i1 %tmp201, label %dec_label_pc_106a4, label %dec_label_pc_10684

dec_label_pc_10684:                               ; preds = %dec_label_pc_1067c
  %v1_10684 = add i32 %v4_10658, -4
  store i32 %v1_10684, i32* %r1.global-to-local, align 4
  %v3_10688 = udiv i32 %v0_1067c, 8
  store i32 %v3_10688, i32* %r2.global-to-local, align 4
  %v4_1068c = mul nuw i32 %v3_10688, 4
  %v5_1068c = add i32 %v4_1068c, %v1_10684
  %v6_1068c = inttoptr i32 %v5_1068c to i32*
  %v7_1068c = load i32, i32* %v6_1068c, align 4
  store i32 %v7_1068c, i32* %r0.global-to-local, align 4
  %v2_10690 = icmp eq i32 %v7_1068c, 0
  br i1 %v2_10690, label %dec_label_pc_106a4, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_10684
  %v2_10694 = add i32 %v7_1068c, 8
  %v3_10694 = inttoptr i32 %v2_10694 to i32*
  %v4_10694 = load i32, i32* %v3_10694, align 4
  store i32 %v4_10694, i32* %r3.global-to-local, align 4
  store i32 %v2_10694, i32* %r0.global-to-local, align 4
  store i32 %v2_10694, i32* %r4.global-to-local, align 4
  store i32 %v4_10694, i32* %v6_1068c, align 4
  br label %dec_label_pc_10ea4

dec_label_pc_106a4:                               ; preds = %dec_label_pc_10684, %dec_label_pc_1067c
  %tmp202 = icmp ugt i32 %v0_1067c, 255
  br i1 %tmp202, label %dec_label_pc_106f4, label %dec_label_pc_106ac

dec_label_pc_106ac:                               ; preds = %dec_label_pc_106a4
  store i32 122896, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_106b4 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  %v3_106b8 = udiv i32 %v0_1067c, 8
  store i32 %v3_106b8, i32* @r7, align 4
  %v4_106bc = mul nuw i32 %v3_106b8, 8
  %v5_106bc = add i32 %v4_106b4, %v4_106bc
  store i32 %v5_106bc, i32* %r3.global-to-local, align 4
  %v1_106c0 = add i32 %v5_106bc, 44
  store i32 %v1_106c0, i32* %ip.global-to-local, align 4
  %v1_106c4 = add i32 %v5_106bc, 56
  %v2_106c4 = inttoptr i32 %v1_106c4 to i32*
  %v3_106c4 = load i32, i32* %v2_106c4, align 4
  store i32 %v3_106c4, i32* %r0.global-to-local, align 4
  %v9_106c8 = icmp eq i32 %v3_106c4, %v1_106c0
  br i1 %v9_106c8, label %dec_label_pc_10854, label %dec_label_pc_106d0

dec_label_pc_106d0:                               ; preds = %dec_label_pc_106ac
  %v2_106d0 = add i32 %v3_106c4, %v0_1067c
  store i32 %v2_106d0, i32* %r3.global-to-local, align 4
  %v1_106d4 = add i32 %v2_106d0, 4
  %v2_106d4 = inttoptr i32 %v1_106d4 to i32*
  %v3_106d4 = load i32, i32* %v2_106d4, align 4
  store i32 %v3_106d4, i32* %r2.global-to-local, align 4
  %v1_106d8 = add i32 %v3_106c4, 12
  %v2_106d8 = inttoptr i32 %v1_106d8 to i32*
  %v3_106d8 = load i32, i32* %v2_106d8, align 4
  store i32 %v3_106d8, i32* %r1.global-to-local, align 4
  %v1_106dc = or i32 %v3_106d4, 1
  store i32 %v1_106dc, i32* %r2.global-to-local, align 4
  %v1_106e0 = add i32 %v3_106c4, 8
  store i32 %v1_106e0, i32* %r4.global-to-local, align 4
  store i32 %v1_106dc, i32* %v2_106d4, align 4
  %v0_106e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_106e8 = load i32, i32* %r1.global-to-local, align 4
  %v2_106e8 = add i32 %v1_106e8, 8
  %v3_106e8 = inttoptr i32 %v2_106e8 to i32*
  store i32 %v0_106e8, i32* %v3_106e8, align 4
  %v0_106ec = load i32, i32* %r1.global-to-local, align 4
  %v1_106ec = load i32, i32* %ip.global-to-local, align 4
  %v2_106ec = add i32 %v1_106ec, 12
  %v3_106ec = inttoptr i32 %v2_106ec to i32*
  store i32 %v0_106ec, i32* %v3_106ec, align 4
  br label %dec_label_pc_10ea4

dec_label_pc_106f4:                               ; preds = %dec_label_pc_106a4
  store i32 %v0_1067c, i32* %r0.global-to-local, align 4
  %v1_106f8 = call i32 @function_10554(i32 %v0_1067c)
  store i32 %v1_106f8, i32* %r0.global-to-local, align 4
  %v0_106fc = load i32, i32* @r4, align 4
  %v1_106fc = and i32 %v0_106fc, 2
  %v2_106fc = icmp eq i32 %v1_106fc, 0
  store i32 %v1_106f8, i32* @r7, align 4
  br i1 %v2_106fc, label %dec_label_pc_10854, label %dec_label_pc_10708

dec_label_pc_10708:                               ; preds = %dec_label_pc_106f4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r1.global-to-local, align 4
  %v4_10710 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_10710, i32* @r0, align 4
  %v0_10714 = call i32 @function_11484()
  store i32 %v0_10714, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10854

dec_label_pc_1071c:                               ; preds = %dec_label_pc_10868
  %v1_1071c = add i32 %v3_10868, 4
  %v2_1071c = inttoptr i32 %v1_1071c to i32*
  %v3_1071c = load i32, i32* %v2_1071c, align 4
  store i32 %v3_1071c, i32* %r3.global-to-local, align 4
  %v0_10720 = load i32, i32* @sl, align 4
  %v1_10724 = and i32 %v3_1071c, -4
  store i32 %v1_10724, i32* %r4.global-to-local, align 4
  %v1_10728 = add i32 %v3_10868, 12
  %v2_10728 = inttoptr i32 %v1_10728 to i32*
  %v3_10728 = load i32, i32* %v2_10728, align 4
  store i32 %v3_10728, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_10720, 255
  br i1 %tmp203, label %dec_label_pc_10784, label %dec_label_pc_10730

dec_label_pc_10730:                               ; preds = %dec_label_pc_1071c
  %v9_10730 = icmp eq i32 %v3_10728, %v0_10788
  br i1 %v9_10730, label %dec_label_pc_10738, label %dec_label_pc_10784

dec_label_pc_10738:                               ; preds = %dec_label_pc_10730
  %v0_10738 = load i32, i32* @sb, align 4
  %v1_10738 = add i32 %v0_10738, 48
  %v2_10738 = inttoptr i32 %v1_10738 to i32*
  %v3_10738 = load i32, i32* %v2_10738, align 4
  store i32 %v3_10738, i32* %r3.global-to-local, align 4
  %v9_1073c = icmp eq i32 %v3_10868, %v3_10738
  br i1 %v9_1073c, label %dec_label_pc_10744, label %dec_label_pc_10784

dec_label_pc_10744:                               ; preds = %dec_label_pc_10738
  %v1_10744 = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_10724, %v1_10744
  br i1 %tmp204, label %dec_label_pc_1074c, label %dec_label_pc_10784

dec_label_pc_1074c:                               ; preds = %dec_label_pc_10744
  %v2_1074c = sub i32 %v1_10724, %v0_10720
  store i32 %v2_1074c, i32* %r2.global-to-local, align 4
  %v2_10750 = add i32 %v0_10720, %v3_10868
  store i32 %v2_10750, i32* %r3.global-to-local, align 4
  %v1_10754 = or i32 %v0_10720, 1
  store i32 %v1_10754, i32* %r0.global-to-local, align 4
  %v1_10758 = or i32 %v2_1074c, 1
  store i32 %v1_10758, i32* %r1.global-to-local, align 4
  %v1_1075c = add i32 %v3_10868, 8
  store i32 %v1_1075c, i32* %r4.global-to-local, align 4
  %v2_10760 = add i32 %v0_10788, 8
  %v3_10760 = inttoptr i32 %v2_10760 to i32*
  store i32 %v2_10750, i32* %v3_10760, align 4
  %v0_10764 = load i32, i32* %r3.global-to-local, align 4
  %v1_10764 = load i32, i32* %ip.global-to-local, align 4
  %v2_10764 = add i32 %v1_10764, 12
  %v3_10764 = inttoptr i32 %v2_10764 to i32*
  store i32 %v0_10764, i32* %v3_10764, align 4
  %v0_10768 = load i32, i32* %r0.global-to-local, align 4
  %v1_10768 = load i32, i32* @r6, align 4
  %v2_10768 = add i32 %v1_10768, 4
  %v3_10768 = inttoptr i32 %v2_10768 to i32*
  store i32 %v0_10768, i32* %v3_10768, align 4
  %v0_1076c = load i32, i32* %r3.global-to-local, align 4
  %v1_1076c = load i32, i32* @sb, align 4
  %v2_1076c = add i32 %v1_1076c, 48
  %v3_1076c = inttoptr i32 %v2_1076c to i32*
  store i32 %v0_1076c, i32* %v3_1076c, align 4
  %v0_10770 = load i32, i32* %r2.global-to-local, align 4
  %v1_10770 = load i32, i32* %r3.global-to-local, align 4
  %v3_10770 = add i32 %v1_10770, %v0_10770
  %v4_10770 = inttoptr i32 %v3_10770 to i32*
  store i32 %v0_10770, i32* %v4_10770, align 4
  %v0_10774 = load i32, i32* %r1.global-to-local, align 4
  %v1_10774 = load i32, i32* %r3.global-to-local, align 4
  %v2_10774 = add i32 %v1_10774, 4
  %v3_10774 = inttoptr i32 %v2_10774 to i32*
  store i32 %v0_10774, i32* %v3_10774, align 4
  %v0_10778 = load i32, i32* %ip.global-to-local, align 4
  %v1_10778 = load i32, i32* %r3.global-to-local, align 4
  %v2_10778 = add i32 %v1_10778, 12
  %v3_10778 = inttoptr i32 %v2_10778 to i32*
  store i32 %v0_10778, i32* %v3_10778, align 4
  %v0_1077c = load i32, i32* %ip.global-to-local, align 4
  %v1_1077c = load i32, i32* %r3.global-to-local, align 4
  %v2_1077c = add i32 %v1_1077c, 8
  %v3_1077c = inttoptr i32 %v2_1077c to i32*
  store i32 %v0_1077c, i32* %v3_1077c, align 4
  br label %dec_label_pc_10ea4

dec_label_pc_10784:                               ; preds = %dec_label_pc_10744, %dec_label_pc_10738, %dec_label_pc_10730, %dec_label_pc_1071c
  %v9_10784 = icmp eq i32 %v1_10724, %v0_10720
  %v2_10788 = add i32 %v3_10728, 8
  %v3_10788 = inttoptr i32 %v2_10788 to i32*
  store i32 %v0_10788, i32* %v3_10788, align 4
  %v0_1078c = load i32, i32* %ip.global-to-local, align 4
  %v1_1078c = load i32, i32* %r5.global-to-local, align 4
  %v2_1078c = add i32 %v1_1078c, 12
  %v3_1078c = inttoptr i32 %v2_1078c to i32*
  store i32 %v0_1078c, i32* %v3_1078c, align 4
  br i1 %v9_10784, label %dec_label_pc_108e4.loopexit, label %dec_label_pc_107a0

dec_label_pc_107a0:                               ; preds = %dec_label_pc_10784
  %v0_107a0 = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_107a0, 255
  br i1 %tmp205, label %dec_label_pc_107c4, label %dec_label_pc_107a8

dec_label_pc_107a8:                               ; preds = %dec_label_pc_107a0
  store i32 122896, i32* %r2.global-to-local, align 4
  %v1_107ac = load i32, i32* %r8.global-to-local, align 4
  %v2_107ac = add i32 %v1_107ac, 122896
  %v3_107ac = inttoptr i32 %v2_107ac to i32*
  %v4_107ac = load i32, i32* %v3_107ac, align 4
  %v3_107b0 = udiv i32 %v0_107a0, 8
  store i32 %v3_107b0, i32* %r0.global-to-local, align 4
  %v4_107b4 = mul nuw i32 %v3_107b0, 8
  %v5_107b4 = add i32 %v4_107ac, %v4_107b4
  store i32 %v5_107b4, i32* %r3.global-to-local, align 4
  %v1_107b8 = add i32 %v5_107b4, 44
  store i32 %v1_107b8, i32* %ip.global-to-local, align 4
  %v1_107bc = add i32 %v5_107b4, 52
  %v2_107bc = inttoptr i32 %v1_107bc to i32*
  %v3_107bc = load i32, i32* %v2_107bc, align 4
  store i32 %v3_107bc, i32* @lr, align 4
  br label %dec_label_pc_1081c

dec_label_pc_107c4:                               ; preds = %dec_label_pc_107a0
  store i32 %v0_107a0, i32* %r0.global-to-local, align 4
  %v1_107c8 = call i32 @function_10554(i32 %v0_107a0)
  store i32 %v1_107c8, i32* %r0.global-to-local, align 4
  store i32 122896, i32* %ip.global-to-local, align 4
  %v1_107d0 = load i32, i32* %r8.global-to-local, align 4
  %v2_107d0 = add i32 %v1_107d0, 122896
  %v3_107d0 = inttoptr i32 %v2_107d0 to i32*
  %v4_107d0 = load i32, i32* %v3_107d0, align 4
  %v4_107d4 = mul i32 %v1_107c8, 8
  %v5_107d4 = add i32 %v4_107d0, %v4_107d4
  store i32 %v5_107d4, i32* %r3.global-to-local, align 4
  %v1_107d8 = add i32 %v5_107d4, 44
  store i32 %v1_107d8, i32* %ip.global-to-local, align 4
  %v1_107dc = add i32 %v5_107d4, 52
  %v2_107dc = inttoptr i32 %v1_107dc to i32*
  %v3_107dc = load i32, i32* %v2_107dc, align 4
  store i32 %v3_107dc, i32* @lr, align 4
  %v9_107e0 = icmp eq i32 %v3_107dc, %v1_107d8
  br i1 %v9_107e0, label %dec_label_pc_1081c, label %dec_label_pc_107e8

dec_label_pc_107e8:                               ; preds = %dec_label_pc_107c4
  %v1_107e8 = add i32 %v5_107d4, 56
  %v2_107e8 = inttoptr i32 %v1_107e8 to i32*
  %v3_107e8 = load i32, i32* %v2_107e8, align 4
  store i32 %v3_107e8, i32* %r1.global-to-local, align 4
  %v1_107ec = add i32 %v3_107e8, 4
  %v2_107ec = inttoptr i32 %v1_107ec to i32*
  %v3_107ec = load i32, i32* %v2_107ec, align 4
  store i32 %v3_107ec, i32* %r3.global-to-local, align 4
  %v0_107f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_107f0 = icmp ult i32 %v0_107f0, %v3_107ec
  br i1 %v3_107f0, label %.thread, label %dec_label_pc_1080c.preheader

.thread:                                          ; preds = %dec_label_pc_107e8
  store i32 %v1_107d8, i32* @lr, align 4
  store i32 %v3_107e8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1081c

dec_label_pc_1080c.preheader:                     ; preds = %dec_label_pc_107e8
  %v2_107f8 = or i32 %v0_107f0, 1
  store i32 %v2_107f8, i32* %r2.global-to-local, align 4
  %v1_1080c179 = add i32 %v3_107dc, 4
  %v2_1080c180 = inttoptr i32 %v1_1080c179 to i32*
  %v3_1080c181 = load i32, i32* %v2_1080c180, align 4
  store i32 %v3_1080c181, i32* %r3.global-to-local, align 4
  %v3_10810183 = icmp ult i32 %v2_107f8, %v3_1080c181
  br i1 %v3_10810183, label %dec_label_pc_10808, label %dec_label_pc_10818

dec_label_pc_10808:                               ; preds = %dec_label_pc_1080c.preheader, %dec_label_pc_10808
  %v0_10818184 = phi i32 [ %v3_10808, %dec_label_pc_10808 ], [ %v3_107dc, %dec_label_pc_1080c.preheader ]
  %v1_10808 = add i32 %v0_10818184, 8
  %v2_10808 = inttoptr i32 %v1_10808 to i32*
  %v3_10808 = load i32, i32* %v2_10808, align 4
  store i32 %v3_10808, i32* @lr, align 4
  %v1_1080c = add i32 %v3_10808, 4
  %v2_1080c = inttoptr i32 %v1_1080c to i32*
  %v3_1080c = load i32, i32* %v2_1080c, align 4
  store i32 %v3_1080c, i32* %r3.global-to-local, align 4
  %v3_10810 = icmp ult i32 %v2_107f8, %v3_1080c
  br i1 %v3_10810, label %dec_label_pc_10808, label %dec_label_pc_10818

dec_label_pc_10818:                               ; preds = %dec_label_pc_10808, %dec_label_pc_1080c.preheader
  %v0_10818.lcssa = phi i32 [ %v3_107dc, %dec_label_pc_1080c.preheader ], [ %v3_10808, %dec_label_pc_10808 ]
  %v1_10818 = add i32 %v0_10818.lcssa, 12
  %v2_10818 = inttoptr i32 %v1_10818 to i32*
  %v3_10818 = load i32, i32* %v2_10818, align 4
  store i32 %v3_10818, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1081c

dec_label_pc_1081c:                               ; preds = %.thread, %dec_label_pc_107c4, %dec_label_pc_107a8, %dec_label_pc_10818
  %v0_1083c = phi i32 [ %v1_107d8, %dec_label_pc_107c4 ], [ %v1_107b8, %dec_label_pc_107a8 ], [ %v3_10818, %dec_label_pc_10818 ], [ %v3_107e8, %.thread ]
  %v0_10830 = phi i32 [ %v1_107c8, %dec_label_pc_107c4 ], [ %v3_107b0, %dec_label_pc_107a8 ], [ %v1_107c8, %dec_label_pc_10818 ], [ %v1_107c8, %.thread ]
  %v1_10820 = phi i32 [ %v1_107d0, %dec_label_pc_107c4 ], [ %v1_107ac, %dec_label_pc_107a8 ], [ %v1_107d0, %dec_label_pc_10818 ], [ %v1_107d0, %.thread ]
  store i32 122896, i32* %r2.global-to-local, align 4
  %v2_10820 = add i32 %v1_10820, 122896
  %v3_10820 = inttoptr i32 %v2_10820 to i32*
  %v4_10820 = load i32, i32* %v3_10820, align 4
  %v3_10824 = sdiv i32 %v0_10830, 32
  store i32 %v3_10824, i32* %r3.global-to-local, align 4
  %v4_10828 = mul nsw i32 %v3_10824, 4
  %v5_10828 = add i32 %v4_10820, %v4_10828
  store i32 %v5_10828, i32* %r1.global-to-local, align 4
  %v1_1082c = add i32 %v5_10828, 820
  %v2_1082c = inttoptr i32 %v1_1082c to i32*
  %v3_1082c = load i32, i32* %v2_1082c, align 4
  %v1_10830 = urem i32 %v0_10830, 32
  store i32 %v1_10830, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_10838 = shl i32 1, %v1_10830
  %v8_10838 = or i32 %v3_1082c, %v7_10838
  store i32 %v8_10838, i32* %r3.global-to-local, align 4
  %v1_1083c = load i32, i32* @r6, align 4
  %v2_1083c = add i32 %v1_1083c, 12
  %v3_1083c = inttoptr i32 %v2_1083c to i32*
  store i32 %v0_1083c, i32* %v3_1083c, align 4
  %v0_10840 = load i32, i32* @lr, align 4
  %v1_10840 = load i32, i32* @r6, align 4
  %v2_10840 = add i32 %v1_10840, 8
  %v3_10840 = inttoptr i32 %v2_10840 to i32*
  store i32 %v0_10840, i32* %v3_10840, align 4
  %v0_10844 = load i32, i32* %r3.global-to-local, align 4
  %v1_10844 = load i32, i32* %r1.global-to-local, align 4
  %v2_10844 = add i32 %v1_10844, 820
  %v3_10844 = inttoptr i32 %v2_10844 to i32*
  store i32 %v0_10844, i32* %v3_10844, align 4
  %v0_10848 = load i32, i32* @r6, align 4
  %v1_10848 = load i32, i32* @lr, align 4
  %v2_10848 = add i32 %v1_10848, 12
  %v3_10848 = inttoptr i32 %v2_10848 to i32*
  store i32 %v0_10848, i32* %v3_10848, align 4
  %v0_1084c = load i32, i32* @r6, align 4
  %v1_1084c = load i32, i32* %ip.global-to-local, align 4
  %v2_1084c = add i32 %v1_1084c, 8
  %v3_1084c = inttoptr i32 %v2_1084c to i32*
  store i32 %v0_1084c, i32* %v3_1084c, align 4
  %v0_10868.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10868

dec_label_pc_10854:                               ; preds = %dec_label_pc_106f4, %dec_label_pc_106ac, %dec_label_pc_10708
  store i32 32, i32* %r8.global-to-local, align 4
  store i32 122896, i32* %r1.global-to-local, align 4
  %v4_1085c = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_1085c, i32* @sb, align 4
  %v0_10860 = load i32, i32* @sl, align 4
  %v1_10860 = add i32 %v0_10860, 16
  store i32 %v1_10860, i32* @fp, align 4
  %v1_10864 = add i32 %v4_1085c, 52
  store i32 %v1_10864, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10868

dec_label_pc_10868:                               ; preds = %dec_label_pc_1081c, %dec_label_pc_10854
  %v0_10788 = phi i32 [ %v0_10868.pre, %dec_label_pc_1081c ], [ %v1_10864, %dec_label_pc_10854 ]
  %v1_10868 = add i32 %v0_10788, 12
  %v2_10868 = inttoptr i32 %v1_10868 to i32*
  %v3_10868 = load i32, i32* %v2_10868, align 4
  store i32 %v3_10868, i32* @r6, align 4
  %v9_1086c = icmp eq i32 %v3_10868, %v0_10788
  br i1 %v9_1086c, label %dec_label_pc_10874, label %dec_label_pc_1071c

dec_label_pc_10874:                               ; preds = %dec_label_pc_10868
  %v0_10874 = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_10874, 256
  %v0_1092c.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_10874.dec_label_pc_1092c_crit_edge, label %dec_label_pc_1087c

dec_label_pc_10874.dec_label_pc_1092c_crit_edge:  ; preds = %dec_label_pc_10874
  %.pre200 = mul i32 %v0_1092c.pre, 8
  br label %dec_label_pc_1092c

dec_label_pc_1087c:                               ; preds = %dec_label_pc_10874
  %v4_1087c = mul i32 %v0_1092c.pre, 8
  %v5_1087c = add i32 %v4_1087c, %v0_10788
  store i32 %v5_1087c, i32* %r3.global-to-local, align 4
  %v1_10880 = add i32 %v5_1087c, -8
  store i32 %v1_10880, i32* %r1.global-to-local, align 4
  %v1_10884 = add i32 %v5_1087c, 4
  %v2_10884 = inttoptr i32 %v1_10884 to i32*
  %storemerge.pre = load i32, i32* %v2_10884, align 4
  br label %dec_label_pc_10924

dec_label_pc_1088c:                               ; preds = %dec_label_pc_10924
  %v1_1088c = add i32 %v1_108b4, 4
  %v2_1088c = inttoptr i32 %v1_1088c to i32*
  %v3_1088c = load i32, i32* %v2_1088c, align 4
  store i32 %v3_1088c, i32* %r3.global-to-local, align 4
  %v1_10890 = and i32 %v3_1088c, -4
  store i32 %v1_10890, i32* %r2.global-to-local, align 4
  %v3_10894 = icmp ult i32 %v1_10890, %v0_10874
  %v1_10898 = add i32 %v1_108b4, 12
  %v2_10898 = inttoptr i32 %v1_10898 to i32*
  %v3_10898 = load i32, i32* %v2_10898, align 4
  store i32 %v3_10898, i32* %r0.global-to-local, align 4
  br i1 %v3_10894, label %dec_label_pc_10924, label %dec_label_pc_108a0

dec_label_pc_108a0:                               ; preds = %dec_label_pc_1088c
  %v1_108a0 = add i32 %v1_108b4, 8
  %v2_108a0 = inttoptr i32 %v1_108a0 to i32*
  %v3_108a0 = load i32, i32* %v2_108a0, align 4
  store i32 %v3_108a0, i32* %r1.global-to-local, align 4
  %v1_108a4 = add i32 %v3_108a0, 12
  %v2_108a4 = inttoptr i32 %v1_108a4 to i32*
  %v3_108a4 = load i32, i32* %v2_108a4, align 4
  store i32 %v3_108a4, i32* %r3.global-to-local, align 4
  %v9_108a8 = icmp eq i32 %v3_108a4, %v1_108b4
  br i1 %v9_108a8, label %dec_label_pc_108b0, label %dec_label_pc_108bc

dec_label_pc_108b0:                               ; preds = %dec_label_pc_108a0
  %v1_108b0 = add i32 %v3_10898, 8
  %v2_108b0 = inttoptr i32 %v1_108b0 to i32*
  %v3_108b0 = load i32, i32* %v2_108b0, align 4
  store i32 %v3_108b0, i32* %r3.global-to-local, align 4
  %v9_108b4 = icmp eq i32 %v3_108b0, %v1_108b4
  br i1 %v9_108b4, label %dec_label_pc_108c0, label %dec_label_pc_108bc

dec_label_pc_108bc:                               ; preds = %dec_label_pc_108a0, %dec_label_pc_108b0
  %v0_108bc = call i32 @function_118b4()
  store i32 %v0_108bc, i32* %r0.global-to-local, align 4
  %v0_108c0.pre = load i32, i32* @sl, align 4
  %v1_108c0.pre = load i32, i32* @r2, align 4
  %v0_108c8.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_108c0

dec_label_pc_108c0:                               ; preds = %dec_label_pc_108b0, %dec_label_pc_108bc
  %v1_108c8 = phi i32 [ %v3_10898, %dec_label_pc_108b0 ], [ %v0_108bc, %dec_label_pc_108bc ]
  %v0_108c8 = phi i32 [ %v3_108a0, %dec_label_pc_108b0 ], [ %v0_108c8.pre, %dec_label_pc_108bc ]
  %v1_108c0 = phi i32 [ %v1_10890, %dec_label_pc_108b0 ], [ %v1_108c0.pre, %dec_label_pc_108bc ]
  %v0_108c0 = phi i32 [ %v0_10874, %dec_label_pc_108b0 ], [ %v0_108c0.pre, %dec_label_pc_108bc ]
  %v2_108c0 = sub i32 %v1_108c0, %v0_108c0
  store i32 %v2_108c0, i32* %lr.global-to-local, align 4
  %v2_108c8 = add i32 %v1_108c8, 8
  %v3_108c8 = inttoptr i32 %v2_108c8 to i32*
  store i32 %v0_108c8, i32* %v3_108c8, align 4
  %v0_108cc = load i32, i32* %r0.global-to-local, align 4
  %v1_108cc = load i32, i32* %r1.global-to-local, align 4
  %v2_108cc = add i32 %v1_108cc, 12
  %v3_108cc = inttoptr i32 %v2_108cc to i32*
  store i32 %v0_108cc, i32* %v3_108cc, align 4
  %v0_108d0 = load i32, i32* %ip.global-to-local, align 4
  %v1_108d0 = add i32 %v0_108d0, 8
  store i32 %v1_108d0, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_108c0, 15
  br i1 %tmp207, label %dec_label_pc_108f0, label %dec_label_pc_108d8

dec_label_pc_108d8:                               ; preds = %dec_label_pc_108c0
  %v1_108d8 = load i32, i32* %r2.global-to-local, align 4
  %v2_108d8 = add i32 %v1_108d8, %v0_108d0
  store i32 %v2_108d8, i32* %r2.global-to-local, align 4
  %v1_108dc = add i32 %v2_108d8, 4
  %v2_108dc = inttoptr i32 %v1_108dc to i32*
  %v3_108dc = load i32, i32* %v2_108dc, align 4
  store i32 %v3_108dc, i32* %r3.global-to-local, align 4
  store i32 %v1_108d0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_108e4

dec_label_pc_108e4.loopexit:                      ; preds = %dec_label_pc_10784
  %v1_10790 = load i32, i32* @r6, align 4
  %v2_10790 = load i32, i32* @sl, align 4
  %v3_10790 = add i32 %v2_10790, %v1_10790
  store i32 %v3_10790, i32* %r2.global-to-local, align 4
  %v2_10794 = add i32 %v3_10790, 4
  %v3_10794 = inttoptr i32 %v2_10794 to i32*
  %v4_10794 = load i32, i32* %v3_10794, align 4
  store i32 %v4_10794, i32* %r3.global-to-local, align 4
  %v2_10798 = add i32 %v1_10790, 8
  store i32 %v2_10798, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_108e4

dec_label_pc_108e4:                               ; preds = %.dec_label_pc_108e4_crit_edge, %dec_label_pc_108e4.loopexit, %dec_label_pc_108d8
  %v1_108e8 = phi i32 [ %v4_10a0c, %.dec_label_pc_108e4_crit_edge ], [ %v3_10790, %dec_label_pc_108e4.loopexit ], [ %v2_108d8, %dec_label_pc_108d8 ]
  %v0_108e4 = phi i32 [ %v7_10a0c, %.dec_label_pc_108e4_crit_edge ], [ %v4_10794, %dec_label_pc_108e4.loopexit ], [ %v3_108dc, %dec_label_pc_108d8 ]
  %v1_108e4 = or i32 %v0_108e4, 1
  store i32 %v1_108e4, i32* %r3.global-to-local, align 4
  %v2_108e8 = add i32 %v1_108e8, 4
  %v3_108e8 = inttoptr i32 %v2_108e8 to i32*
  store i32 %v1_108e4, i32* %v3_108e8, align 4
  br label %dec_label_pc_10ea4

dec_label_pc_108f0:                               ; preds = %dec_label_pc_108c0
  %v1_108f0 = load i32, i32* @sl, align 4
  %v2_108f0 = add i32 %v1_108f0, %v0_108d0
  store i32 %v2_108f0, i32* %r2.global-to-local, align 4
  %v1_108f4 = or i32 %v1_108f0, 1
  store i32 %v1_108f4, i32* %r3.global-to-local, align 4
  %v0_108f8 = load i32, i32* %lr.global-to-local, align 4
  %v1_108f8 = or i32 %v0_108f8, 1
  store i32 %v1_108f8, i32* %r1.global-to-local, align 4
  store i32 %v1_108d0, i32* %r4.global-to-local, align 4
  %v2_10900 = add i32 %v0_108d0, 4
  %v3_10900 = inttoptr i32 %v2_10900 to i32*
  store i32 %v1_108f4, i32* %v3_10900, align 4
  %v0_10904 = load i32, i32* %r2.global-to-local, align 4
  %v1_10904 = load i32, i32* @r6, align 4
  %v2_10904 = add i32 %v1_10904, 8
  %v3_10904 = inttoptr i32 %v2_10904 to i32*
  store i32 %v0_10904, i32* %v3_10904, align 4
  %v0_10908 = load i32, i32* %r2.global-to-local, align 4
  %v1_10908 = load i32, i32* @r6, align 4
  %v2_10908 = add i32 %v1_10908, 12
  %v3_10908 = inttoptr i32 %v2_10908 to i32*
  store i32 %v0_10908, i32* %v3_10908, align 4
  %v0_1090c = load i32, i32* %lr.global-to-local, align 4
  %v1_1090c = load i32, i32* %r2.global-to-local, align 4
  %v3_1090c = add i32 %v1_1090c, %v0_1090c
  %v4_1090c = inttoptr i32 %v3_1090c to i32*
  store i32 %v0_1090c, i32* %v4_1090c, align 4
  %v0_10910 = load i32, i32* %r1.global-to-local, align 4
  %v1_10910 = load i32, i32* %r2.global-to-local, align 4
  %v2_10910 = add i32 %v1_10910, 4
  %v3_10910 = inttoptr i32 %v2_10910 to i32*
  store i32 %v0_10910, i32* %v3_10910, align 4
  %v0_10914 = load i32, i32* @r6, align 4
  %v1_10914 = load i32, i32* %r2.global-to-local, align 4
  %v2_10914 = add i32 %v1_10914, 12
  %v3_10914 = inttoptr i32 %v2_10914 to i32*
  store i32 %v0_10914, i32* %v3_10914, align 4
  %v0_10918 = load i32, i32* @r6, align 4
  %v1_10918 = load i32, i32* %r2.global-to-local, align 4
  %v2_10918 = add i32 %v1_10918, 8
  %v3_10918 = inttoptr i32 %v2_10918 to i32*
  store i32 %v0_10918, i32* %v3_10918, align 4
  br label %dec_label_pc_10ea4

dec_label_pc_10924:                               ; preds = %dec_label_pc_1088c, %dec_label_pc_1087c
  %v1_108b4 = phi i32 [ %storemerge.pre, %dec_label_pc_1087c ], [ %v3_10898, %dec_label_pc_1088c ]
  store i32 %v1_108b4, i32* %ip.global-to-local, align 4
  %v9_10924 = icmp eq i32 %v1_108b4, %v1_10880
  br i1 %v9_10924, label %dec_label_pc_1092c.loopexit, label %dec_label_pc_1088c

dec_label_pc_1092c.loopexit:                      ; preds = %dec_label_pc_10924
  br label %dec_label_pc_1092c

dec_label_pc_1092c:                               ; preds = %dec_label_pc_10874.dec_label_pc_1092c_crit_edge, %dec_label_pc_1092c.loopexit
  %v4_1095c.pre-phi = phi i32 [ %.pre200, %dec_label_pc_10874.dec_label_pc_1092c_crit_edge ], [ %v4_1087c, %dec_label_pc_1092c.loopexit ]
  %v1_1092c = add i32 %v0_1092c.pre, 1
  store i32 %v1_1092c, i32* %r2.global-to-local, align 4
  %v1_10930 = urem i32 %v1_1092c, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 122896, i32* %r0.global-to-local, align 4
  %v6_1093c = shl i32 1, %v1_10930
  store i32 %v6_1093c, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_10944 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_10944, i32* %r3.global-to-local, align 4
  %v3_10948 = udiv i32 %v1_1092c, 32
  store i32 %v3_10948, i32* @r5, align 4
  %v4_1094c = mul nuw nsw i32 %v3_10948, 4
  %v5_1094c = add i32 %v4_10944, %v4_1094c
  store i32 %v5_1094c, i32* %r2.global-to-local, align 4
  %v1_10950 = add i32 %v5_1094c, 820
  %v2_10950 = inttoptr i32 %v1_10950 to i32*
  %v3_10950 = load i32, i32* %v2_10950, align 4
  store i32 %v3_10950, i32* @r4, align 4
  %v1_10954 = add i32 %v4_10944, 52
  store i32 %v1_10954, i32* %r3.global-to-local, align 4
  store i32 32, i32* @r8, align 4
  %v5_1095c = add i32 %v1_10954, %v4_1095c.pre-phi
  store i32 %v5_1095c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10960

dec_label_pc_10960:                               ; preds = %dec_label_pc_109c8, %dec_label_pc_1092c
  %v1_10968 = phi i32 [ %v1_10968.pre, %dec_label_pc_109c8 ], [ %v3_10950, %dec_label_pc_1092c ]
  %v0_10968 = phi i32 [ %v0_10960.pre, %dec_label_pc_109c8 ], [ %v6_1093c, %dec_label_pc_1092c ]
  %v1_10960 = sub i32 1, %v0_10968
  %v2_10960 = icmp ult i32 %v0_10968, 2
  %v1_10960. = select i1 %v2_10960, i32 %v1_10960, i32 0
  store i32 %v1_10960., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_10968, %v1_10968
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_10960
  %v5_1096c = or i32 %v1_10960., 1
  store i32 %v5_1096c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10978.preheader

bb142:                                            ; preds = %dec_label_pc_10960
  %v2_10970 = icmp eq i32 %v1_10960., 0
  br i1 %v2_10970, label %.dec_label_pc_109b4.preheader_crit_edge, label %dec_label_pc_10978.preheader

.dec_label_pc_109b4.preheader_crit_edge:          ; preds = %bb142
  %v0_109ac54.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_109b4.preheader

dec_label_pc_10978.preheader:                     ; preds = %bb142, %.thread12
  %v0_10978.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10978

dec_label_pc_10978:                               ; preds = %dec_label_pc_10978.preheader, %dec_label_pc_10984
  %v0_10978 = phi i32 [ %v0_10978.pre, %dec_label_pc_10978.preheader ], [ %v1_10978, %dec_label_pc_10984 ]
  %v1_10978 = add i32 %v0_10978, 1
  store i32 %v1_10978, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_10978, 2
  br i1 %tmp208, label %dec_label_pc_10a58.loopexit, label %dec_label_pc_10984

dec_label_pc_10984:                               ; preds = %dec_label_pc_10978
  store i32 122896, i32* %r3.global-to-local, align 4
  %v1_10988 = load i32, i32* @r8, align 4
  %v2_10988 = add i32 %v1_10988, 122896
  %v3_10988 = inttoptr i32 %v2_10988 to i32*
  %v4_10988 = load i32, i32* %v3_10988, align 4
  store i32 %v4_10988, i32* %r2.global-to-local, align 4
  %v4_1098c = mul i32 %v1_10978, 4
  %v5_1098c = add i32 %v4_10988, %v4_1098c
  store i32 %v5_1098c, i32* %r3.global-to-local, align 4
  %v1_10990 = add i32 %v5_1098c, 820
  %v2_10990 = inttoptr i32 %v1_10990 to i32*
  %v3_10990 = load i32, i32* %v2_10990, align 4
  store i32 %v3_10990, i32* @r4, align 4
  %v2_10994 = icmp eq i32 %v3_10990, 0
  br i1 %v2_10994, label %dec_label_pc_10978, label %dec_label_pc_1099c

dec_label_pc_1099c:                               ; preds = %dec_label_pc_10984
  %v4_1099c = mul i32 %v1_10978, 256
  %v5_1099c = add i32 %v4_10988, %v4_1099c
  store i32 %v5_1099c, i32* %r3.global-to-local, align 4
  %v1_109a0 = add i32 %v5_1099c, 44
  store i32 %v1_109a0, i32* %r0.global-to-local, align 4
  %v0_109a4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_109a4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_109b4.preheader

dec_label_pc_109b4.preheader:                     ; preds = %.dec_label_pc_109b4.preheader_crit_edge, %dec_label_pc_1099c
  %v0_109ac54 = phi i32 [ %v1_109a0, %dec_label_pc_1099c ], [ %v0_109ac54.pre, %.dec_label_pc_109b4.preheader_crit_edge ]
  %v0_109d0 = phi i32 [ %v3_10990, %dec_label_pc_1099c ], [ %v1_10968, %.dec_label_pc_109b4.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_109a4, %dec_label_pc_1099c ], [ %v0_10968, %.dec_label_pc_109b4.preheader_crit_edge ]
  %v2_109b451 = and i32 %ip.promoted, %v0_109d0
  %v4_109b453 = icmp eq i32 %v2_109b451, 0
  br i1 %v4_109b453, label %dec_label_pc_109ac, label %dec_label_pc_109bc

dec_label_pc_109ac:                               ; preds = %dec_label_pc_109b4.preheader, %dec_label_pc_109ac
  %v2_109b056 = phi i32 [ %v2_109b0, %dec_label_pc_109ac ], [ %ip.promoted, %dec_label_pc_109b4.preheader ]
  %v0_109ac55 = phi i32 [ %v1_109ac, %dec_label_pc_109ac ], [ %v0_109ac54, %dec_label_pc_109b4.preheader ]
  %v1_109ac = add i32 %v0_109ac55, 8
  %v2_109b0 = mul i32 %v2_109b056, 2
  %v2_109b4 = and i32 %v2_109b0, %v0_109d0
  %v4_109b4 = icmp eq i32 %v2_109b4, 0
  br i1 %v4_109b4, label %dec_label_pc_109ac, label %dec_label_pc_109b4.dec_label_pc_109bc_crit_edge

dec_label_pc_109b4.dec_label_pc_109bc_crit_edge:  ; preds = %dec_label_pc_109ac
  store i32 %v1_109ac, i32* %r0.global-to-local, align 4
  store i32 %v2_109b0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_109bc

dec_label_pc_109bc:                               ; preds = %dec_label_pc_109b4.dec_label_pc_109bc_crit_edge, %dec_label_pc_109b4.preheader
  %v0_109dc = phi i32 [ %v2_109b0, %dec_label_pc_109b4.dec_label_pc_109bc_crit_edge ], [ %ip.promoted, %dec_label_pc_109b4.preheader ]
  %v0_10a00 = phi i32 [ %v1_109ac, %dec_label_pc_109b4.dec_label_pc_109bc_crit_edge ], [ %v0_109ac54, %dec_label_pc_109b4.preheader ]
  %v1_109bc = add i32 %v0_10a00, 12
  %v2_109bc = inttoptr i32 %v1_109bc to i32*
  %v3_109bc = load i32, i32* %v2_109bc, align 4
  store i32 %v3_109bc, i32* @lr, align 4
  %v9_109c0 = icmp eq i32 %v3_109bc, %v0_10a00
  br i1 %v9_109c0, label %dec_label_pc_109c8, label %dec_label_pc_109e8

dec_label_pc_109c8:                               ; preds = %dec_label_pc_109bc
  store i32 122896, i32* %r0.global-to-local, align 4
  %v1_109cc = load i32, i32* @r8, align 4
  %v2_109cc = add i32 %v1_109cc, 122896
  %v3_109cc = inttoptr i32 %v2_109cc to i32*
  %v4_109cc = load i32, i32* %v3_109cc, align 4
  %v2_109d0 = sub i32 -1, %v0_109dc
  %v3_109d0 = and i32 %v0_109d0, %v2_109d0
  store i32 %v3_109d0, i32* @r4, align 4
  %v1_109d4 = load i32, i32* @r5, align 4
  %v4_109d4 = mul i32 %v1_109d4, 4
  %v5_109d4 = add i32 %v4_109d4, %v4_109cc
  store i32 %v5_109d4, i32* %r3.global-to-local, align 4
  %v1_109d8 = add i32 %v0_10a00, 8
  store i32 %v1_109d8, i32* %r0.global-to-local, align 4
  %v2_109dc = mul i32 %v0_109dc, 2
  store i32 %v2_109dc, i32* %ip.global-to-local, align 4
  %v2_109e0 = add i32 %v5_109d4, 820
  %v3_109e0 = inttoptr i32 %v2_109e0 to i32*
  store i32 %v3_109d0, i32* %v3_109e0, align 4
  %v0_10960.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_10968.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_10960

dec_label_pc_109e8:                               ; preds = %dec_label_pc_109bc
  %v1_109e8 = add i32 %v3_109bc, 4
  %v2_109e8 = inttoptr i32 %v1_109e8 to i32*
  %v3_109e8 = load i32, i32* %v2_109e8, align 4
  store i32 %v3_109e8, i32* %r3.global-to-local, align 4
  %v1_109ec = and i32 %v3_109e8, -4
  store i32 %v1_109ec, i32* %r2.global-to-local, align 4
  %v0_109f0 = load i32, i32* @sl, align 4
  %v2_109f0 = sub i32 %v1_109ec, %v0_109f0
  store i32 %v2_109f0, i32* %ip.global-to-local, align 4
  %v1_109f4 = add i32 %v3_109bc, 12
  %v2_109f4 = inttoptr i32 %v1_109f4 to i32*
  %v3_109f4 = load i32, i32* %v2_109f4, align 4
  store i32 %v3_109f4, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_109f0, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_109e8
  %v6_109fc = add i32 %v1_109ec, %v3_109bc
  store i32 %v6_109fc, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_109e8, %bb143
  %v2_10a00 = add i32 %v3_109f4, 8
  %v3_10a00 = inttoptr i32 %v2_10a00 to i32*
  store i32 %v0_10a00, i32* %v3_10a00, align 4
  %v0_10a04 = load i32, i32* %r3.global-to-local, align 4
  %v1_10a04 = load i32, i32* %r0.global-to-local, align 4
  %v2_10a04 = add i32 %v1_10a04, 12
  %v3_10a04 = inttoptr i32 %v2_10a04 to i32*
  store i32 %v0_10a04, i32* %v3_10a04, align 4
  %v4_10a08 = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_108e4_crit_edge, label %dec_label_pc_10a14

.dec_label_pc_108e4_crit_edge:                    ; preds = %bb144
  %v5_10a08 = add i32 %v4_10a08, 8
  store i32 %v5_10a08, i32* %r4.global-to-local, align 4
  %v4_10a0c = load i32, i32* %r2.global-to-local, align 4
  %v5_10a0c = add i32 %v4_10a0c, 4
  %v6_10a0c = inttoptr i32 %v5_10a0c to i32*
  %v7_10a0c = load i32, i32* %v6_10a0c, align 4
  store i32 %v7_10a0c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_108e4

dec_label_pc_10a14:                               ; preds = %bb144
  %v1_10a14 = load i32, i32* @sl, align 4
  %v2_10a14 = add i32 %v1_10a14, %v4_10a08
  store i32 %v2_10a14, i32* %r1.global-to-local, align 4
  %v1_10a1c = load i32, i32* @r6, align 4
  %v2_10a1c = add i32 %v1_10a1c, 8
  %v3_10a1c = inttoptr i32 %v2_10a1c to i32*
  store i32 %v2_10a14, i32* %v3_10a1c, align 4
  %v0_10a20 = load i32, i32* %r1.global-to-local, align 4
  %v1_10a20 = load i32, i32* @r6, align 4
  %v2_10a20 = add i32 %v1_10a20, 12
  %v3_10a20 = inttoptr i32 %v2_10a20 to i32*
  store i32 %v0_10a20, i32* %v3_10a20, align 4
  %v0_10a24 = load i32, i32* @r6, align 4
  %v1_10a24 = load i32, i32* %r1.global-to-local, align 4
  %v2_10a24 = add i32 %v1_10a24, 8
  %v3_10a24 = inttoptr i32 %v2_10a24 to i32*
  store i32 %v0_10a24, i32* %v3_10a24, align 4
  %v0_10a28 = load i32, i32* @r6, align 4
  %v1_10a28 = load i32, i32* %r1.global-to-local, align 4
  %v2_10a28 = add i32 %v1_10a28, 12
  %v3_10a28 = inttoptr i32 %v2_10a28 to i32*
  store i32 %v0_10a28, i32* %v3_10a28, align 4
  %tmp210 = icmp ult i32 %v1_10a14, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_10a14
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r2.global-to-local, align 4
  %v8_10a34 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v8_10a34, i32* %r3.global-to-local, align 4
  %v4_10a38 = load i32, i32* %r1.global-to-local, align 4
  %v6_10a38 = add i32 %v8_10a34, 48
  %v7_10a38 = inttoptr i32 %v6_10a38 to i32*
  store i32 %v4_10a38, i32* %v7_10a38, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_10a14, %bb145
  %v0_10a3c = load i32, i32* @sl, align 4
  %v1_10a3c = or i32 %v0_10a3c, 1
  store i32 %v1_10a3c, i32* %r2.global-to-local, align 4
  %v0_10a40 = load i32, i32* %ip.global-to-local, align 4
  %v1_10a40 = or i32 %v0_10a40, 1
  store i32 %v1_10a40, i32* %r3.global-to-local, align 4
  %v0_10a44 = load i32, i32* @lr, align 4
  %v1_10a44 = add i32 %v0_10a44, 8
  store i32 %v1_10a44, i32* %r4.global-to-local, align 4
  %v2_10a48 = add i32 %v0_10a44, 4
  %v3_10a48 = inttoptr i32 %v2_10a48 to i32*
  store i32 %v1_10a3c, i32* %v3_10a48, align 4
  %v0_10a4c = load i32, i32* %ip.global-to-local, align 4
  %v1_10a4c = load i32, i32* %r1.global-to-local, align 4
  %v3_10a4c = add i32 %v1_10a4c, %v0_10a4c
  %v4_10a4c = inttoptr i32 %v3_10a4c to i32*
  store i32 %v0_10a4c, i32* %v4_10a4c, align 4
  %v0_10a50 = load i32, i32* %r3.global-to-local, align 4
  %v1_10a50 = load i32, i32* %r1.global-to-local, align 4
  %v2_10a50 = add i32 %v1_10a50, 4
  %v3_10a50 = inttoptr i32 %v2_10a50 to i32*
  store i32 %v0_10a50, i32* %v3_10a50, align 4
  br label %dec_label_pc_10ea4

dec_label_pc_10a58.loopexit:                      ; preds = %dec_label_pc_10978
  br label %dec_label_pc_10a58

dec_label_pc_10a58:                               ; preds = %dec_label_pc_10a58.loopexit, %dec_label_pc_1066c, %dec_label_pc_10674
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %ip.global-to-local, align 4
  %v4_10a60 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_10a60, i32* @r0, align 4
  %v1_10a64 = add i32 %v4_10a60, 44
  %v2_10a64 = inttoptr i32 %v1_10a64 to i32*
  %v3_10a64 = load i32, i32* %v2_10a64, align 4
  store i32 %v3_10a64, i32* %ip.global-to-local, align 4
  %v1_10a68 = add i32 %v3_10a64, 4
  %v2_10a68 = inttoptr i32 %v1_10a68 to i32*
  %v3_10a68 = load i32, i32* %v2_10a68, align 4
  %v0_10a6c = load i32, i32* @sl, align 4
  %v1_10a6c = add i32 %v0_10a6c, 16
  store i32 %v1_10a6c, i32* %r1.global-to-local, align 4
  %v1_10a70 = and i32 %v3_10a68, -4
  store i32 %v1_10a70, i32* %r3.global-to-local, align 4
  %v3_10a74 = icmp ult i32 %v1_10a70, %v1_10a6c
  br i1 %v3_10a74, label %dec_label_pc_10aa4, label %dec_label_pc_10a80

dec_label_pc_10a80:                               ; preds = %dec_label_pc_10a58
  %v2_10a80 = sub i32 %v1_10a70, %v0_10a6c
  %v2_10a84 = add i32 %v0_10a6c, %v3_10a64
  store i32 %v2_10a84, i32* %r1.global-to-local, align 4
  %v1_10a88 = or i32 %v2_10a80, 1
  store i32 %v1_10a88, i32* %r3.global-to-local, align 4
  %v1_10a8c = or i32 %v0_10a6c, 1
  store i32 %v1_10a8c, i32* %r2.global-to-local, align 4
  %v1_10a90 = add i32 %v3_10a64, 8
  store i32 %v1_10a90, i32* %r4.global-to-local, align 4
  store i32 %v1_10a8c, i32* %v2_10a68, align 4
  %v0_10a98 = load i32, i32* %r1.global-to-local, align 4
  %v1_10a98 = load i32, i32* @r0, align 4
  %v2_10a98 = add i32 %v1_10a98, 44
  %v3_10a98 = inttoptr i32 %v2_10a98 to i32*
  store i32 %v0_10a98, i32* %v3_10a98, align 4
  %v0_10a9c = load i32, i32* %r3.global-to-local, align 4
  %v1_10a9c = load i32, i32* %r1.global-to-local, align 4
  %v2_10a9c = add i32 %v1_10a9c, 4
  %v3_10a9c = inttoptr i32 %v2_10a9c to i32*
  store i32 %v0_10a9c, i32* %v3_10a9c, align 4
  br label %dec_label_pc_10ea4

dec_label_pc_10aa4:                               ; preds = %dec_label_pc_10a58
  %v1_10aa4 = inttoptr i32 %v4_10a60 to i32*
  %v2_10aa4 = load i32, i32* %v1_10aa4, align 4
  store i32 %v2_10aa4, i32* %r3.global-to-local, align 4
  %v1_10aa8 = and i32 %v2_10aa4, 2
  store i32 %v1_10aa8, i32* %ip.global-to-local, align 4
  %v2_10aa8 = icmp eq i32 %v1_10aa8, 0
  %v1_10aac = add i32 %v4_10a60, 860
  %v2_10aac = inttoptr i32 %v1_10aac to i32*
  %v3_10aac = load i32, i32* %v2_10aac, align 4
  store i32 %v3_10aac, i32* %r1.global-to-local, align 4
  br i1 %v2_10aa8, label %dec_label_pc_10ac4, label %dec_label_pc_10ab4

dec_label_pc_10ab4:                               ; preds = %dec_label_pc_10aa4
  %v0_10ab4 = call i32 @function_11484()
  %v0_10ab8 = load i32, i32* @sl, align 4
  %v1_10ab8 = add i32 %v0_10ab8, -7
  store i32 %v1_10ab8, i32* @r0, align 4
  %v0_10abc = call i32 @function_105cc()
  store i32 %v0_10abc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10ea0

dec_label_pc_10ac4:                               ; preds = %dec_label_pc_10aa4
  %v1_10ac4 = add i32 %v4_10a60, 844
  %v2_10ac4 = inttoptr i32 %v1_10ac4 to i32*
  %v3_10ac4 = load i32, i32* %v2_10ac4, align 4
  store i32 %v3_10ac4, i32* %r3.global-to-local, align 4
  %v3_10ac8 = icmp ult i32 %v0_10a6c, %v3_10ac4
  %v1_10acc = add i32 %v3_10aac, -1
  store i32 %v1_10acc, i32* %sb.global-to-local, align 4
  br i1 %v3_10ac8, label %dec_label_pc_10ba0, label %dec_label_pc_10ad4

dec_label_pc_10ad4:                               ; preds = %dec_label_pc_10ac4
  %v1_10ad4 = add i32 %v4_10a60, 852
  %v2_10ad4 = inttoptr i32 %v1_10ad4 to i32*
  %v3_10ad4 = load i32, i32* %v2_10ad4, align 4
  store i32 %v3_10ad4, i32* %r2.global-to-local, align 4
  %v1_10ad8 = add i32 %v4_10a60, 848
  %v2_10ad8 = inttoptr i32 %v1_10ad8 to i32*
  %v3_10ad8 = load i32, i32* %v2_10ad8, align 4
  store i32 %v3_10ad8, i32* %r3.global-to-local, align 4
  %v6_10ae0 = icmp slt i32 %v3_10ad8, %v3_10ad4
  br i1 %v6_10ae0, label %dec_label_pc_10ae4, label %dec_label_pc_10ba0

dec_label_pc_10ae4:                               ; preds = %dec_label_pc_10ad4
  %v1_10ae4 = add i32 %v0_10a6c, 10
  %v2_10ae8 = add i32 %v1_10ae4, %v3_10aac
  store i32 %v2_10ae8, i32* %r3.global-to-local, align 4
  %v2_10aec = sub i32 0, %v3_10aac
  %v3_10aec = and i32 %v2_10ae8, %v2_10aec
  store i32 %v3_10aec, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_10aec, %v0_10a6c
  br i1 %tmp211, label %dec_label_pc_10af8, label %dec_label_pc_10ba0

dec_label_pc_10af8:                               ; preds = %dec_label_pc_10ae4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_10aec, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_10b10 = call i32 @function_126b8(i32 0, i32 %v3_10aec, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_10b10, i32* %r0.global-to-local, align 4
  %v7_10b14 = icmp eq i32 %v6_10b10, -1
  br i1 %v7_10b14, label %dec_label_pc_10af8.dec_label_pc_10ba0_crit_edge, label %dec_label_pc_10b1c

dec_label_pc_10af8.dec_label_pc_10ba0_crit_edge:  ; preds = %dec_label_pc_10af8
  %v1_10bc4.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_10ba0

dec_label_pc_10b1c:                               ; preds = %dec_label_pc_10af8
  %v1_10b1c = urem i32 %v6_10b10, 8
  store i32 %v1_10b1c, i32* %r2.global-to-local, align 4
  %v2_10b1c = icmp eq i32 %v1_10b1c, 0
  br i1 %v2_10b1c, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_10b1c
  %v2_10b20 = sub nsw i32 8, %v1_10b1c
  store i32 %v2_10b20, i32* %r3.global-to-local, align 4
  %v2_10b24 = load i32, i32* @r4, align 4
  %v3_10b24 = sub i32 %v2_10b24, %v2_10b20
  %v3_10b28 = add i32 %v2_10b20, %v6_10b10
  store i32 %v3_10b28, i32* %lr.global-to-local, align 4
  %v2_10b30 = or i32 %v3_10b24, 2
  store i32 %v2_10b30, i32* %r2.global-to-local, align 4
  %v5_10b38 = inttoptr i32 %v3_10b28 to i32*
  store i32 %v2_10b20, i32* %v5_10b38, align 4
  %v1_10b3c = load i32, i32* %r2.global-to-local, align 4
  %v2_10b3c = load i32, i32* %lr.global-to-local, align 4
  %v3_10b3c = add i32 %v2_10b3c, 4
  %v4_10b3c = inttoptr i32 %v3_10b3c to i32*
  store i32 %v1_10b3c, i32* %v4_10b3c, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_10b1c
  store i32 %v6_10b10, i32* %lr.global-to-local, align 4
  %v1_10b3447 = load i32, i32* @r4, align 4
  %v2_10b3448 = or i32 %v1_10b3447, 2
  store i32 %v2_10b3448, i32* %r3.global-to-local, align 4
  %v3_10b40 = inttoptr i32 %v6_10b10 to i32*
  store i32 0, i32* %v3_10b40, align 4
  %v1_10b44 = load i32, i32* %r3.global-to-local, align 4
  %v2_10b44 = load i32, i32* %lr.global-to-local, align 4
  %v3_10b44 = add i32 %v2_10b44, 4
  %v4_10b44 = inttoptr i32 %v3_10b44 to i32*
  store i32 %v1_10b44, i32* %v4_10b44, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 122896, i32* %r2.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_10b50 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_10b50, i32* %ip.global-to-local, align 4
  %v1_10b54 = add i32 %v4_10b50, 848
  %v2_10b54 = inttoptr i32 %v1_10b54 to i32*
  %v3_10b54 = load i32, i32* %v2_10b54, align 4
  store i32 %v3_10b54, i32* %r3.global-to-local, align 4
  %v1_10b58 = add i32 %v4_10b50, 856
  %v2_10b58 = inttoptr i32 %v1_10b58 to i32*
  %v3_10b58 = load i32, i32* %v2_10b58, align 4
  store i32 %v3_10b58, i32* %r2.global-to-local, align 4
  %v1_10b5c = add i32 %v3_10b54, 1
  store i32 %v1_10b5c, i32* %r3.global-to-local, align 4
  %v7_10b64 = icmp sgt i32 %v1_10b5c, %v3_10b58
  br i1 %v7_10b64, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_10b5c, i32* %v2_10b58, align 4
  %v0_10b68.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_10b68.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_10b68 = phi i32 [ %v4_10b50, %.thread27 ], [ %v1_10b68.pre, %bb147 ]
  %v0_10b68 = phi i32 [ %v1_10b5c, %.thread27 ], [ %v0_10b68.pre, %bb147 ]
  %v2_10b68 = add i32 %v1_10b68, 848
  %v3_10b68 = inttoptr i32 %v2_10b68 to i32*
  store i32 %v0_10b68, i32* %v3_10b68, align 4
  %v0_10b6c = load i32, i32* %ip.global-to-local, align 4
  %v1_10b6c = add i32 %v0_10b6c, 868
  %v2_10b6c = inttoptr i32 %v1_10b6c to i32*
  %v3_10b6c = load i32, i32* %v2_10b6c, align 4
  store i32 %v3_10b6c, i32* %r3.global-to-local, align 4
  %v1_10b70 = add i32 %v0_10b6c, 880
  %v2_10b70 = inttoptr i32 %v1_10b70 to i32*
  %v3_10b70 = load i32, i32* %v2_10b70, align 4
  store i32 %v3_10b70, i32* %r2.global-to-local, align 4
  %v0_10b74 = load i32, i32* @r4, align 4
  %v2_10b74 = add i32 %v0_10b74, %v3_10b6c
  store i32 %v2_10b74, i32* %r1.global-to-local, align 4
  %v1_10b78 = add i32 %v0_10b6c, 872
  %v2_10b78 = inttoptr i32 %v1_10b78 to i32*
  %v3_10b78 = load i32, i32* %v2_10b78, align 4
  store i32 %v3_10b78, i32* %r3.global-to-local, align 4
  %v1_10b80 = add i32 %v0_10b6c, 884
  %v2_10b80 = inttoptr i32 %v1_10b80 to i32*
  %v3_10b80 = load i32, i32* %v2_10b80, align 4
  store i32 %v3_10b80, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_10b74, %v3_10b70
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_10b74, i32* %v2_10b70, align 4
  %v0_10b88.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_10b88.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_10b88 = phi i32 [ %v0_10b6c, %bb148 ], [ %v1_10b88.pre, %bb149 ]
  %v0_10b88 = phi i32 [ %v2_10b74, %bb148 ], [ %v0_10b88.pre, %bb149 ]
  %v2_10b88 = add i32 %v1_10b88, 868
  %v3_10b88 = inttoptr i32 %v2_10b88 to i32*
  store i32 %v0_10b88, i32* %v3_10b88, align 4
  %v0_10b8c = load i32, i32* %r1.global-to-local, align 4
  %v1_10b8c = load i32, i32* %r3.global-to-local, align 4
  %v2_10b8c = add i32 %v1_10b8c, %v0_10b8c
  store i32 %v2_10b8c, i32* %r1.global-to-local, align 4
  %v1_10b90 = load i32, i32* %r2.global-to-local, align 4
  %v0_10b94 = load i32, i32* %lr.global-to-local, align 4
  %v1_10b94 = add i32 %v0_10b94, 8
  store i32 %v1_10b94, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_10b8c, %v1_10b90
  br i1 %tmp213, label %bb151, label %dec_label_pc_10ea0

bb151:                                            ; preds = %bb150
  %v5_10b98 = load i32, i32* %ip.global-to-local, align 4
  %v6_10b98 = add i32 %v5_10b98, 884
  %v7_10b98 = inttoptr i32 %v6_10b98 to i32*
  store i32 %v2_10b8c, i32* %v7_10b98, align 4
  br label %dec_label_pc_10ea0

dec_label_pc_10ba0:                               ; preds = %dec_label_pc_10ae4, %dec_label_pc_10ac4, %dec_label_pc_10af8.dec_label_pc_10ba0_crit_edge, %dec_label_pc_10ad4
  %v1_10bc4 = phi i32 [ %v1_10bc4.pre, %dec_label_pc_10af8.dec_label_pc_10ba0_crit_edge ], [ %v0_10a6c, %dec_label_pc_10ad4 ], [ %v0_10a6c, %dec_label_pc_10ac4 ], [ %v0_10a6c, %dec_label_pc_10ae4 ]
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %ip.global-to-local, align 4
  %v4_10ba8 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_10ba8, i32* %r3.global-to-local, align 4
  %v1_10bac = add i32 %v4_10ba8, 44
  %v2_10bac = inttoptr i32 %v1_10bac to i32*
  %v3_10bac = load i32, i32* %v2_10bac, align 4
  store i32 %v3_10bac, i32* %r0.global-to-local, align 4
  %v1_10bb0 = add i32 %v4_10ba8, 864
  %v2_10bb0 = inttoptr i32 %v1_10bb0 to i32*
  %v3_10bb0 = load i32, i32* %v2_10bb0, align 4
  store i32 %v3_10bb0, i32* %r2.global-to-local, align 4
  %v1_10bb4 = add i32 %v4_10ba8, 840
  %v2_10bb4 = inttoptr i32 %v1_10bb4 to i32*
  %v3_10bb4 = load i32, i32* %v2_10bb4, align 4
  store i32 %v3_10bb4, i32* %r3.global-to-local, align 4
  %v1_10bb8 = add i32 %v3_10bac, 4
  %v2_10bb8 = inttoptr i32 %v1_10bb8 to i32*
  %v3_10bb8 = load i32, i32* %v2_10bb8, align 4
  store i32 %v3_10bb8, i32* %r1.global-to-local, align 4
  %v1_10bc0 = urem i32 %v3_10bb0, 2
  %v2_10bc0 = icmp eq i32 %v1_10bc0, 0
  %v1_10bbc = add i32 %v1_10bc4, 16
  %v2_10bc4 = add i32 %v1_10bbc, %v3_10bb4
  store i32 %v2_10bc4, i32* %r3.global-to-local, align 4
  %v1_10bc8 = and i32 %v3_10bb8, -4
  store i32 %v1_10bc8, i32* @r8, align 4
  br i1 %v2_10bc0, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_10ba0
  %v3_10bcc = sub i32 %v2_10bc4, %v1_10bc8
  store i32 %v3_10bcc, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_10ba0, %bb152
  %v0_10bd0 = phi i32 [ %v2_10bc4, %dec_label_pc_10ba0 ], [ %v3_10bcc, %bb152 ]
  %v1_10bd0 = load i32, i32* %sb.global-to-local, align 4
  %v2_10bd0 = add i32 %v1_10bd0, %v0_10bd0
  store i32 %v2_10bd0, i32* %r3.global-to-local, align 4
  %v1_10bd4 = sub i32 -1, %v1_10bd0
  store i32 %v1_10bd4, i32* %fp.global-to-local, align 4
  %v2_10bd8 = and i32 %v2_10bd0, %v1_10bd4
  store i32 %v2_10bd8, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_10bd8, 1
  br i1 %tmp154, label %dec_label_pc_10bfc, label %dec_label_pc_10be8

dec_label_pc_10be8:                               ; preds = %bb153
  store i32 %v2_10bd8, i32* %r0.global-to-local, align 4
  %v1_10bec = call i32 @function_12858(i32 %v2_10bd8)
  store i32 %v1_10bec, i32* %r0.global-to-local, align 4
  %v3_10bf0 = icmp eq i32 %v1_10bec, -1
  store i32 %v1_10bec, i32* @r4, align 4
  br i1 %v3_10bf0, label %dec_label_pc_10bfc, label %dec_label_pc_10c68

dec_label_pc_10bfc:                               ; preds = %dec_label_pc_10be8, %bb153
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r1.global-to-local, align 4
  %v4_10c04 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_10c04, i32* %r6.global-to-local, align 4
  %v1_10c08 = add i32 %v4_10c04, 864
  %v2_10c08 = inttoptr i32 %v1_10c08 to i32*
  %v3_10c08 = load i32, i32* %v2_10c08, align 4
  store i32 %v3_10c08, i32* %r3.global-to-local, align 4
  %v1_10c0c = urem i32 %v3_10c08, 2
  %v2_10c0c = icmp eq i32 %v1_10c0c, 0
  br i1 %v2_10c0c, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_10bfc
  %v1_10c10 = load i32, i32* @r8, align 4
  %v2_10c10 = load i32, i32* %sb.global-to-local, align 4
  %v3_10c10 = add i32 %v2_10c10, %v1_10c10
  %v2_10c14 = load i32, i32* @r5, align 4
  %v3_10c14 = add i32 %v3_10c10, %v2_10c14
  store i32 %v3_10c14, i32* %r3.global-to-local, align 4
  %v2_10c18 = load i32, i32* %fp.global-to-local, align 4
  %v3_10c18 = and i32 %v2_10c18, %v3_10c14
  store i32 %v3_10c18, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_10bfc
  %v0_10c1c.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_10c1c = phi i32 [ %v0_10c1c.pr, %.thread29thread-pre-split ], [ %v3_10c18, %bb155 ]
  %v2_10c1c = icmp ugt i32 %v0_10c1c, 1048575
  br i1 %v2_10c1c, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_10c34 = phi i32 [ %v0_10c1c, %.thread29 ], [ 1048576, %bb156 ]
  %v1_10c24 = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_10c34, %v1_10c24
  br i1 %tmp214, label %dec_label_pc_10c2c, label %dec_label_pc_10e90

dec_label_pc_10c2c:                               ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_10c34, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_10c48 = call i32 @function_126b8(i32 0, i32 %v0_10c34, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_10c48, i32* %r0.global-to-local, align 4
  %v3_10c4c = icmp eq i32 %v6_10c48, -1
  %v8_10c4c = icmp eq i32 %v6_10c48, -1
  store i32 %v6_10c48, i32* @r4, align 4
  br i1 %v8_10c4c, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_10c2c
  %v1_10c54 = load i32, i32* %r6.global-to-local, align 4
  %v2_10c54 = add i32 %v1_10c54, 864
  %v3_10c54 = inttoptr i32 %v2_10c54 to i32*
  %v4_10c54 = load i32, i32* %v3_10c54, align 4
  %v2_10c58 = load i32, i32* @r5, align 4
  %v3_10c58 = add i32 %v2_10c58, %v6_10c48
  store i32 %v3_10c58, i32* %r0.global-to-local, align 4
  %v2_10c5c = and i32 %v4_10c54, -2
  store i32 %v2_10c5c, i32* %r3.global-to-local, align 4
  store i32 %v2_10c5c, i32* %v3_10c54, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_10c2c, %bb158
  br i1 %v3_10c4c, label %dec_label_pc_10c68, label %dec_label_pc_10c6c

dec_label_pc_10c68:                               ; preds = %.thread32, %dec_label_pc_10be8
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10c6c

dec_label_pc_10c6c:                               ; preds = %.thread32, %dec_label_pc_10c68
  %v0_10c6c = load i32, i32* @r4, align 4
  %v7_10c6c = icmp eq i32 %v0_10c6c, -1
  br i1 %v7_10c6c, label %dec_label_pc_10e90, label %dec_label_pc_10c74

dec_label_pc_10c74:                               ; preds = %dec_label_pc_10c6c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r2.global-to-local, align 4
  %v4_10c7c = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_10c7c, i32* %ip.global-to-local, align 4
  store i32 %v3_10bac, i32* %r2.global-to-local, align 4
  %v1_10c84 = add i32 %v4_10c7c, 872
  %v2_10c84 = inttoptr i32 %v1_10c84 to i32*
  %v3_10c84 = load i32, i32* %v2_10c84, align 4
  %v1_10c88 = load i32, i32* @r8, align 4
  %v2_10c88 = add i32 %v1_10c88, %v3_10bac
  store i32 %v2_10c88, i32* %r1.global-to-local, align 4
  %v0_10c8c = load i32, i32* @r5, align 4
  %v2_10c8c = add i32 %v0_10c8c, %v3_10c84
  store i32 %v2_10c8c, i32* %r3.global-to-local, align 4
  %v9_10c90 = icmp eq i32 %v0_10c6c, %v2_10c88
  br i1 %v9_10c90, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_10c74
  store i32 %v2_10c8c, i32* %v2_10c84, align 4
  br label %dec_label_pc_10cac

bb159:                                            ; preds = %dec_label_pc_10c74
  %v1_10c94 = load i32, i32* %r0.global-to-local, align 4
  %v8_10c94 = icmp eq i32 %v1_10c94, -1
  store i32 %v2_10c8c, i32* %v2_10c84, align 4
  br i1 %v8_10c94, label %.thread34, label %dec_label_pc_10cac

.thread34:                                        ; preds = %bb159
  %v1_10c9c = load i32, i32* @r5, align 4
  %v2_10c9c = load i32, i32* @r8, align 4
  %v3_10c9c = add i32 %v2_10c9c, %v1_10c9c
  %v2_10ca0 = or i32 %v3_10c9c, 1
  store i32 %v2_10ca0, i32* %r3.global-to-local, align 4
  %v2_10ca4 = load i32, i32* %r2.global-to-local, align 4
  %v3_10ca4 = add i32 %v2_10ca4, 4
  %v4_10ca4 = inttoptr i32 %v3_10ca4 to i32*
  store i32 %v2_10ca0, i32* %v4_10ca4, align 4
  br label %dec_label_pc_10e24

dec_label_pc_10cac:                               ; preds = %bb159, %.thread122
  %v0_10cb0.pr = load i32, i32* @r8, align 4
  %v0_10cac = load i32, i32* %ip.global-to-local, align 4
  %v1_10cac = add i32 %v0_10cac, 864
  %v2_10cac = inttoptr i32 %v1_10cac to i32*
  %v3_10cac = load i32, i32* %v2_10cac, align 4
  store i32 %v3_10cac, i32* %r2.global-to-local, align 4
  %v2_10cb0 = icmp eq i32 %v0_10cb0.pr, 0
  br i1 %v2_10cb0, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_10cac
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_10cac
  %v2_10cb8 = urem i32 %v3_10cac, 2
  store i32 %v2_10cb8, i32* %r3.global-to-local, align 4
  %v2_10cbc = icmp eq i32 %v2_10cb8, 0
  br i1 %v2_10cbc, label %.thread40, label %dec_label_pc_10cc4

dec_label_pc_10cc4:                               ; preds = %.thread36
  %v0_10cc4 = load i32, i32* @r4, align 4
  %v1_10cc4 = load i32, i32* %r1.global-to-local, align 4
  %v3_10cc4 = icmp ult i32 %v0_10cc4, %v1_10cc4
  br i1 %v3_10cc4, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_10cc4
  %v2_10cc8 = and i32 %v3_10cac, -2
  store i32 %v2_10cc8, i32* %r3.global-to-local, align 4
  store i32 %v2_10cc8, i32* %v2_10cac, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_10cc4, %.thread37, %.thread36, %bb160
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %ip.global-to-local, align 4
  %v4_10cd8 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_10cd8, i32* @r7, align 4
  %v1_10cdc = add i32 %v4_10cd8, 864
  %v2_10cdc = inttoptr i32 %v1_10cdc to i32*
  %v3_10cdc = load i32, i32* %v2_10cdc, align 4
  store i32 %v3_10cdc, i32* %r3.global-to-local, align 4
  %v1_10ce0 = urem i32 %v3_10cdc, 2
  store i32 %v1_10ce0, i32* @r6, align 4
  %v2_10ce0 = icmp eq i32 %v1_10ce0, 0
  br i1 %v2_10ce0, label %dec_label_pc_10d74, label %dec_label_pc_10ce8

dec_label_pc_10ce8:                               ; preds = %.thread40
  %v0_10ce8 = load i32, i32* @r8, align 4
  %v2_10ce8 = icmp eq i32 %v0_10ce8, 0
  br i1 %v2_10ce8, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_10ce8
  %v2_10cec = add i32 %v4_10cd8, 872
  %v3_10cec = inttoptr i32 %v2_10cec to i32*
  %v4_10cec = load i32, i32* %v3_10cec, align 4
  store i32 %v4_10cec, i32* %r2.global-to-local, align 4
  %v1_10cf0 = load i32, i32* %r1.global-to-local, align 4
  %v2_10cf0 = load i32, i32* @r4, align 4
  %v3_10cf0 = sub i32 %v2_10cf0, %v1_10cf0
  %v3_10cf4 = add i32 %v3_10cf0, %v4_10cec
  store i32 %v3_10cf4, i32* %r3.global-to-local, align 4
  store i32 %v3_10cf4, i32* %v3_10cec, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_10ce8, %bb161
  %v0_10cfc = load i32, i32* @r4, align 4
  %v1_10cfc = urem i32 %v0_10cfc, 8
  store i32 %v1_10cfc, i32* %r3.global-to-local, align 4
  %v2_10cfc = icmp eq i32 %v1_10cfc, 0
  br i1 %v2_10cfc, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_10d00 = sub nsw i32 8, %v1_10cfc
  store i32 %v2_10d00, i32* %r3.global-to-local, align 4
  %v3_10d04 = add i32 %v2_10d00, %v0_10cfc
  store i32 %v3_10d04, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_10d0c = phi i32 [ 0, %.thread43 ], [ %v2_10d00, %bb162 ]
  %v1_10d08 = load i32, i32* @r5, align 4
  %v2_10d08 = add i32 %v1_10d08, %v0_10cfc
  store i32 %v2_10d08, i32* @r6, align 4
  %v1_10d0c = load i32, i32* @r8, align 4
  %v2_10d0c = add i32 %v2_10d08, %v0_10d0c
  %v2_10d10 = add i32 %v2_10d0c, %v1_10d0c
  store i32 %v2_10d10, i32* %r1.global-to-local, align 4
  %v1_10d14 = load i32, i32* %sb.global-to-local, align 4
  %v2_10d14 = add i32 %v1_10d14, %v2_10d10
  %v1_10d18 = load i32, i32* %fp.global-to-local, align 4
  %v2_10d18 = and i32 %v1_10d18, %v2_10d14
  store i32 %v2_10d18, i32* %r2.global-to-local, align 4
  %v2_10d1c = sub i32 0, %v2_10d08
  store i32 %v2_10d1c, i32* %r3.global-to-local, align 4
  %v2_10d20 = sub i32 %v2_10d18, %v2_10d08
  store i32 %v2_10d20, i32* @r5, align 4
  store i32 %v2_10d20, i32* %r0.global-to-local, align 4
  br i1 %v2_10cfc, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_10cfc, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_10d2c = call i32 @function_12858(i32 %v2_10d20)
  store i32 %v1_10d2c, i32* %r0.global-to-local, align 4
  %v3_10d30 = icmp eq i32 %v1_10d2c, -1
  br i1 %v3_10d30, label %dec_label_pc_10d38, label %dec_label_pc_10d48

dec_label_pc_10d38:                               ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_10d3c = call i32 @function_12858(i32 0)
  store i32 %v1_10d3c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_10da0

dec_label_pc_10d48:                               ; preds = %bb164
  %v1_10d48 = load i32, i32* @r4, align 4
  %v3_10d48 = icmp ult i32 %v1_10d2c, %v1_10d48
  br i1 %v3_10d48, label %dec_label_pc_10d50, label %dec_label_pc_10da0

dec_label_pc_10d50:                               ; preds = %dec_label_pc_10d48
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r0.global-to-local, align 4
  %v4_10d58 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_10d58, i32* %r2.global-to-local, align 4
  %v1_10d5c = add i32 %v4_10d58, 864
  %v2_10d5c = inttoptr i32 %v1_10d5c to i32*
  %v3_10d5c = load i32, i32* %v2_10d5c, align 4
  %v0_10d60 = load i32, i32* @r6, align 4
  store i32 %v0_10d60, i32* %r0.global-to-local, align 4
  %v1_10d64 = and i32 %v3_10d5c, -2
  store i32 %v1_10d64, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_10d64, i32* %v2_10d5c, align 4
  br label %dec_label_pc_10da0

dec_label_pc_10d74:                               ; preds = %.thread40
  %v0_10d74 = load i32, i32* %r0.global-to-local, align 4
  %v3_10d74 = icmp eq i32 %v0_10d74, -1
  br i1 %v3_10d74, label %dec_label_pc_10d7c, label %dec_label_pc_10d98

dec_label_pc_10d7c:                               ; preds = %dec_label_pc_10d74
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_10d80 = call i32 @function_12858(i32 0)
  store i32 %v1_10d80, i32* %r0.global-to-local, align 4
  %v0_10d84 = load i32, i32* @r7, align 4
  %v1_10d84 = add i32 %v0_10d84, 872
  %v2_10d84 = inttoptr i32 %v1_10d84 to i32*
  %v3_10d84 = load i32, i32* %v2_10d84, align 4
  store i32 %v3_10d84, i32* %r2.global-to-local, align 4
  %v0_10d88 = load i32, i32* @r4, align 4
  %v0_10d8c = load i32, i32* @r5, align 4
  %v2_10d88 = add i32 %v3_10d84, %v1_10d80
  %v2_10d8c = sub i32 %v2_10d88, %v0_10d88
  %v2_10d90 = sub i32 %v2_10d8c, %v0_10d8c
  store i32 %v2_10d90, i32* %r3.global-to-local, align 4
  store i32 %v2_10d90, i32* %v2_10d84, align 4
  %v0_10d9c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_10d98

dec_label_pc_10d98:                               ; preds = %dec_label_pc_10d74, %dec_label_pc_10d7c
  %v0_10d9c = phi i32 [ 0, %dec_label_pc_10d74 ], [ %v0_10d9c.pre, %dec_label_pc_10d7c ]
  %v0_10d98 = load i32, i32* @r4, align 4
  store i32 %v0_10d98, i32* @r7, align 4
  store i32 %v0_10d9c, i32* @r5, align 4
  br label %dec_label_pc_10da0

dec_label_pc_10da0:                               ; preds = %dec_label_pc_10d48, %dec_label_pc_10d50, %dec_label_pc_10d38, %dec_label_pc_10d98
  %v0_10da0 = load i32, i32* %r0.global-to-local, align 4
  %v7_10da0 = icmp eq i32 %v0_10da0, -1
  br i1 %v7_10da0, label %dec_label_pc_10e24, label %dec_label_pc_10da8

dec_label_pc_10da8:                               ; preds = %dec_label_pc_10da0
  %v1_10da8 = load i32, i32* @r5, align 4
  %v2_10da8 = add i32 %v1_10da8, %v0_10da0
  %v0_10dac = load i32, i32* @r7, align 4
  %v2_10dac = sub i32 %v2_10da8, %v0_10dac
  %v1_10db0 = or i32 %v2_10dac, 1
  %v2_10db4 = add i32 %v0_10dac, 4
  %v3_10db4 = inttoptr i32 %v2_10db4 to i32*
  store i32 %v1_10db0, i32* %v3_10db4, align 4
  store i32 122896, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_10dc0 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_10dc0, i32* @r6, align 4
  %v1_10dc4 = add i32 %v4_10dc0, 872
  %v2_10dc4 = inttoptr i32 %v1_10dc4 to i32*
  %v3_10dc4 = load i32, i32* %v2_10dc4, align 4
  %v0_10dc8 = load i32, i32* @r8, align 4
  %v2_10dc8 = icmp eq i32 %v0_10dc8, 0
  %v0_10dcc = load i32, i32* @r5, align 4
  %v2_10dcc = add i32 %v0_10dcc, %v3_10dc4
  store i32 %v2_10dcc, i32* %r3.global-to-local, align 4
  store i32 %v2_10dcc, i32* %v2_10dc4, align 4
  %v0_10dd4 = load i32, i32* @r7, align 4
  %v1_10dd4 = load i32, i32* @r6, align 4
  %v2_10dd4 = add i32 %v1_10dd4, 44
  %v3_10dd4 = inttoptr i32 %v2_10dd4 to i32*
  store i32 %v0_10dd4, i32* %v3_10dd4, align 4
  br i1 %v2_10dc8, label %dec_label_pc_10e24, label %dec_label_pc_10ddc

dec_label_pc_10ddc:                               ; preds = %dec_label_pc_10da8
  %v0_10de0 = load i32, i32* @r8, align 4
  %v1_10de0 = add i32 %v0_10de0, -12
  %v1_10de4 = and i32 %v1_10de0, -8
  store i32 %v3_10bac, i32* %ip.global-to-local, align 4
  %v2_10dec = add i32 %v1_10de4, %v3_10bac
  store i32 %v2_10dec, i32* %r1.global-to-local, align 4
  %v2_10df0 = icmp ugt i32 %v1_10de4, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_10df8 = or i32 %v1_10de4, 1
  store i32 %v1_10df8, i32* %r3.global-to-local, align 4
  store i32 %v1_10df8, i32* %v2_10bb8, align 4
  %v0_10e00 = load i32, i32* %r2.global-to-local, align 4
  %v1_10e00 = load i32, i32* %r1.global-to-local, align 4
  %v2_10e00 = add i32 %v1_10e00, 8
  %v3_10e00 = inttoptr i32 %v2_10e00 to i32*
  store i32 %v0_10e00, i32* %v3_10e00, align 4
  %v0_10e04 = load i32, i32* %r2.global-to-local, align 4
  %v1_10e04 = load i32, i32* %r1.global-to-local, align 4
  %v2_10e04 = add i32 %v1_10e04, 4
  %v3_10e04 = inttoptr i32 %v2_10e04 to i32*
  store i32 %v0_10e04, i32* %v3_10e04, align 4
  br i1 %v2_10df0, label %dec_label_pc_10e0c, label %dec_label_pc_10e24

dec_label_pc_10e0c:                               ; preds = %dec_label_pc_10ddc
  %v0_10e0c = load i32, i32* @r6, align 4
  %v1_10e0c = add i32 %v0_10e0c, 836
  %v2_10e0c = inttoptr i32 %v1_10e0c to i32*
  %v3_10e0c = load i32, i32* %v2_10e0c, align 4
  store i32 %v3_10e0c, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_10e14 = load i32, i32* %ip.global-to-local, align 4
  %v1_10e14 = add i32 %v0_10e14, 8
  store i32 %v1_10e14, i32* @r0, align 4
  store i32 -1, i32* %v2_10e0c, align 4
  %v0_10e1c = call i32 @function_11638()
  store i32 %v0_10e1c, i32* %r0.global-to-local, align 4
  %v0_10e20 = load i32, i32* @r4, align 4
  %v1_10e20 = load i32, i32* @r6, align 4
  %v2_10e20 = add i32 %v1_10e20, 836
  %v3_10e20 = inttoptr i32 %v2_10e20 to i32*
  store i32 %v0_10e20, i32* %v3_10e20, align 4
  br label %dec_label_pc_10e24

dec_label_pc_10e24:                               ; preds = %.thread34, %dec_label_pc_10ddc, %dec_label_pc_10da8, %dec_label_pc_10da0, %dec_label_pc_10e0c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r0.global-to-local, align 4
  %v4_10e2c = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_10e2c, i32* %lr.global-to-local, align 4
  %v1_10e30 = add i32 %v4_10e2c, 872
  store i32 %v1_10e30, i32* %r1.global-to-local, align 4
  %v1_10e34 = inttoptr i32 %v1_10e30 to i32*
  %v2_10e34 = load i32, i32* %v1_10e34, align 4
  store i32 %v2_10e34, i32* %r1.global-to-local, align 4
  %v3_10e34 = add i32 %v4_10e2c, 876
  %v4_10e34 = inttoptr i32 %v3_10e34 to i32*
  %v5_10e34 = load i32, i32* %v4_10e34, align 4
  store i32 %v5_10e34, i32* %r3.global-to-local, align 4
  %v1_10e3c = add i32 %v4_10e2c, 868
  %v2_10e3c = inttoptr i32 %v1_10e3c to i32*
  %v3_10e3c = load i32, i32* %v2_10e3c, align 4
  store i32 %v3_10e3c, i32* %r3.global-to-local, align 4
  %v1_10e40 = add i32 %v4_10e2c, 884
  %v2_10e40 = inttoptr i32 %v1_10e40 to i32*
  %v3_10e40 = load i32, i32* %v2_10e40, align 4
  store i32 %v3_10e40, i32* %r2.global-to-local, align 4
  %v2_10e44 = add i32 %v3_10e3c, %v2_10e34
  store i32 %v2_10e44, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_10e34, %v5_10e34
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_10e24
  store i32 %v2_10e34, i32* %v4_10e34, align 4
  %v0_10e4c.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_10e4c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_10e24, %bb165
  %v1_10e4c = phi i32 [ %v3_10e40, %dec_label_pc_10e24 ], [ %v1_10e4c.pre, %bb165 ]
  %v4_10e50 = phi i32 [ %v2_10e44, %dec_label_pc_10e24 ], [ %v0_10e4c.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_10e50, %v1_10e4c
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_10e50 = load i32, i32* %lr.global-to-local, align 4
  %v6_10e50 = add i32 %v5_10e50, 884
  %v7_10e50 = inttoptr i32 %v6_10e50 to i32*
  store i32 %v4_10e50, i32* %v7_10e50, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_10e54 = load i32, i32* %lr.global-to-local, align 4
  %v1_10e54 = add i32 %v0_10e54, 44
  %v2_10e54 = inttoptr i32 %v1_10e54 to i32*
  %v3_10e54 = load i32, i32* %v2_10e54, align 4
  store i32 %v3_10e54, i32* %ip.global-to-local, align 4
  %v1_10e58 = add i32 %v3_10e54, 4
  %v2_10e58 = inttoptr i32 %v1_10e58 to i32*
  %v3_10e58 = load i32, i32* %v2_10e58, align 4
  store i32 %v1_10a6c, i32* %r1.global-to-local, align 4
  %v1_10e60 = and i32 %v3_10e58, -4
  store i32 %v1_10e60, i32* %r3.global-to-local, align 4
  %v3_10e64 = icmp ult i32 %v1_10e60, %v1_10a6c
  br i1 %v3_10e64, label %dec_label_pc_10e90, label %dec_label_pc_10e6c

dec_label_pc_10e6c:                               ; preds = %bb168
  %v0_10e6c = load i32, i32* @sl, align 4
  %v2_10e6c = sub i32 %v1_10e60, %v0_10e6c
  %v2_10e70 = add i32 %v0_10e6c, %v3_10e54
  store i32 %v2_10e70, i32* %r1.global-to-local, align 4
  %v1_10e74 = or i32 %v2_10e6c, 1
  store i32 %v1_10e74, i32* %r3.global-to-local, align 4
  %v1_10e78 = or i32 %v0_10e6c, 1
  store i32 %v1_10e78, i32* %r2.global-to-local, align 4
  %v1_10e7c = add i32 %v3_10e54, 8
  store i32 %v1_10e7c, i32* %r0.global-to-local, align 4
  store i32 %v1_10e78, i32* %v2_10e58, align 4
  %v0_10e84 = load i32, i32* %r1.global-to-local, align 4
  %v1_10e84 = load i32, i32* %lr.global-to-local, align 4
  %v2_10e84 = add i32 %v1_10e84, 44
  %v3_10e84 = inttoptr i32 %v2_10e84 to i32*
  store i32 %v0_10e84, i32* %v3_10e84, align 4
  %v0_10e88 = load i32, i32* %r3.global-to-local, align 4
  %v1_10e88 = load i32, i32* %r1.global-to-local, align 4
  %v2_10e88 = add i32 %v1_10e88, 4
  %v3_10e88 = inttoptr i32 %v2_10e88 to i32*
  store i32 %v0_10e88, i32* %v3_10e88, align 4
  br label %dec_label_pc_10ea0

dec_label_pc_10e90:                               ; preds = %bb157, %bb168, %dec_label_pc_10c6c
  %v0_10e90 = call i32 @function_1003c()
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_10e98 = inttoptr i32 %v0_10e90 to i32*
  store i32 12, i32* %v2_10e98, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10ea0

dec_label_pc_10ea0:                               ; preds = %bb151, %bb150, %dec_label_pc_10e6c, %dec_label_pc_10ab4, %dec_label_pc_10e90
  %v0_10ea0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10ea0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10ea4

dec_label_pc_10ea4:                               ; preds = %.thread1, %dec_label_pc_10a80, %.thread121, %dec_label_pc_108f0, %dec_label_pc_108e4, %dec_label_pc_1074c, %dec_label_pc_106d0, %dec_label_pc_10ea0
  store i32 %v2_105f8, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* @r3, align 4
  store i32 122896, i32* %r2.global-to-local, align 4
  %v4_10eb4 = load i32, i32* inttoptr (i32 122920 to i32*), align 8
  store i32 %v4_10eb4, i32* @ip, align 4
  store i32 69312, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_10eb4)
  br label %dec_label_pc_10ec0

dec_label_pc_10ec0:                               ; preds = %dec_label_pc_10630, %dec_label_pc_10ea4
  %v0_10ec0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_10ec0, i32* %r0.global-to-local, align 4
  store i32 %v3_105cc, i32* @r4, align 4
  store i32 %v6_105cc, i32* @r5, align 4
  store i32 %v9_105cc, i32* @r6, align 4
  store i32 %v12_105cc, i32* @r7, align 4
  store i32 %v15_105cc, i32* @r8, align 4
  store i32 %v18_105cc, i32* @sb, align 4
  store i32 %v21_105cc, i32* @sl, align 4
  store i32 %v24_105cc, i32* @fp, align 4
  store i32 %v27_105cc, i32* @lr, align 4
  ret i32 %v0_10ec0

; uselistorder directives
  uselistorder i32 %v0_10e6c, { 1, 0, 2 }
  uselistorder i32 %v3_10e54, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10e50, { 1, 0 }
  uselistorder i32 %v2_10e34, { 2, 0, 1, 3 }
  uselistorder i32 %v4_10e2c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_10de4, { 1, 2, 0 }
  uselistorder i32 %v0_10dac, { 1, 0 }
  uselistorder i32 %v0_10da0, { 1, 0 }
  uselistorder i32 %v2_10d90, { 1, 0 }
  uselistorder i32 %v2_10d20, { 2, 1, 0 }
  uselistorder i32 %v2_10d08, { 1, 2, 0, 3 }
  uselistorder i32 %v2_10d00, { 1, 0, 2 }
  uselistorder i32 %v1_10cfc, { 2, 1, 0 }
  uselistorder i32 %v0_10cfc, { 3, 1, 2, 0 }
  uselistorder i32 %v1_10ce0, { 1, 0 }
  uselistorder i32 %v2_10cb8, { 1, 0 }
  uselistorder i32 %v3_10cac, { 1, 0, 2 }
  uselistorder i32 %v2_10c8c, { 1, 0, 2 }
  uselistorder i32* %v2_10c84, { 1, 0, 2 }
  uselistorder i32 %v0_10c6c, { 1, 0 }
  uselistorder i32 %v6_10c48, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_10c34, { 2, 1, 0 }
  uselistorder i32 %v0_10c1c, { 1, 0 }
  uselistorder i32 %v2_10bd8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10bd4, { 1, 0 }
  uselistorder i32 %v3_10bac, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_10b8c, { 1, 0, 2 }
  uselistorder i32 %v2_10b74, { 1, 2, 0, 3 }
  uselistorder i32 %v1_10b1c, { 2, 1, 0 }
  uselistorder i32 %v6_10b10, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_10aec, { 2, 1, 0, 3 }
  uselistorder i32 %v3_10aac, { 1, 0, 2, 3 }
  uselistorder i32 %v0_10a6c, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_10a64, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10a60, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_10a4c, { 1, 0 }
  uselistorder i32 %v7_10a0c, { 1, 0 }
  uselistorder i32 %v4_10a0c, { 1, 0 }
  uselistorder i32 %v0_109dc, { 1, 0 }
  uselistorder i32 %v2_109b0, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_109ac54, { 1, 0 }
  uselistorder i32 %v1_10978, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_10960., { 1, 2, 0 }
  uselistorder i32 %v0_10968, { 0, 1, 3, 2 }
  uselistorder i32 %v1_10968, { 1, 0 }
  uselistorder i32 %v3_10948, { 1, 0 }
  uselistorder i32 %v4_10944, { 1, 0, 2 }
  uselistorder i32 %v1_108b4, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1090c, { 1, 0 }
  uselistorder i32 %v1_108f0, { 1, 0 }
  uselistorder i32 %v1_10790, { 1, 0 }
  uselistorder i32 %v0_108d0, { 2, 0, 1, 3 }
  uselistorder i32 %v3_10898, { 2, 0, 1, 3 }
  uselistorder i32 %v0_1092c.pre, { 1, 2, 0 }
  uselistorder i32 %v0_10874, { 2, 1, 0 }
  uselistorder i32 %v3_10868, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_10788, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_10830, { 1, 0 }
  uselistorder i32 %v3_10824, { 1, 0 }
  uselistorder i32 %v0_10830, { 1, 0 }
  uselistorder i32 %v3_10808, { 0, 2, 3, 1 }
  uselistorder i32 %v2_107f8, { 1, 0, 2 }
  uselistorder i32 %v3_107b0, { 2, 1, 0 }
  uselistorder i32 %v0_107a0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_10770, { 1, 0 }
  uselistorder i32 %v1_10724, { 2, 1, 0, 3 }
  uselistorder i32 %v0_10720, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_106c4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_106b8, { 1, 0 }
  uselistorder i32 %v3_10688, { 1, 0 }
  uselistorder i32 %v0_1067c, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_1065c, { 0, 2, 1, 3 }
  uselistorder i1 %v7_10650, { 1, 0 }
  uselistorder i32 %v0_10628, { 1, 0 }
  uselistorder i32* %sb.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 13, 0, 1, 2, 3, 4, 6, 5, 8, 9, 7, 10, 11, 12, 14, 15, 16 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 13, 14, 15, 16, 17, 18, 19, 20, 24, 21, 22, 23, 25, 26, 27, 28, 0, 1, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 70, 57, 58, 59, 60, 61, 63, 64, 65, 66, 2, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 47, 48, 49, 50, 51, 52, 53, 54, 55, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 38, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 13, 2, 4, 5, 6, 53, 48, 45, 54, 46, 47, 50, 49, 44, 51, 55, 56, 52, 43, 57, 10, 8, 7, 9, 12, 11, 14, 19, 15, 16, 0, 17, 18, 20, 21, 22, 26, 27, 23, 25, 33, 29, 28, 31, 32, 34, 30, 35, 36, 37, 38, 24, 39, 42, 41, 40 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 38, 39, 40, 41, 42, 3, 4, 7, 6, 8, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 18, 19, 31, 30, 23, 20, 1, 21, 22, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder i32 34, { 1, 2, 0, 3 }
  uselistorder i32 (i32)* @function_10554, { 1, 0 }
  uselistorder label %dec_label_pc_10ec0, { 1, 0 }
  uselistorder label %dec_label_pc_10ea4, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_10ea0, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_10e90, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_10e24, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_10da0, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_10d98, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_10c6c, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_10ba0, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_10a58, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_109ac, { 1, 0 }
  uselistorder label %dec_label_pc_109b4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10978, { 1, 0 }
  uselistorder label %dec_label_pc_1092c, { 1, 0 }
  uselistorder label %dec_label_pc_108c0, { 1, 0 }
  uselistorder label %dec_label_pc_108bc, { 1, 0 }
  uselistorder label %dec_label_pc_10868, { 1, 0 }
  uselistorder label %dec_label_pc_10854, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1081c, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_10808, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_10ed4(i32 %arg1) local_unnamed_addr {
dec_label_pc_10ed4:
  %v0_10ed4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_10ed4, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_10ed4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_10ed4, %bb
  %v10_10ee8 = phi i32 [ %arg1, %dec_label_pc_10ed4 ], [ 0, %bb ]
  ret i32 %v10_10ee8

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_10eec(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10eec:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_10eec = load i32, i32* @r4, align 4
  %v6_10eec = load i32, i32* @r5, align 4
  %v9_10eec = load i32, i32* @r6, align 4
  %v12_10eec = load i32, i32* @lr, align 4
  %v2_10ef4 = icmp eq i32 %arg1, 0
  store i32 add (i32 ptrtoint (i32* @global_var_d110.394 to i32), i32 69376), i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_10f04 = mul i32 %arg2, %arg1
  store i32 %v2_10f04, i32* @r6, align 4
  br i1 %v2_10ef4, label %dec_label_pc_10f34, label %dec_label_pc_10f0c

dec_label_pc_10f0c:                               ; preds = %dec_label_pc_10eec
  store i32 %arg1, i32* @r1, align 4
  store i32 %v2_10f04, i32* @r0, align 4
  %v0_10f14 = call i32 @function_fb0c()
  %v0_10f18 = load i32, i32* @r4, align 4
  %v9_10f18 = icmp eq i32 %v0_10f18, %v0_10f14
  br i1 %v9_10f18, label %dec_label_pc_10f0c.dec_label_pc_10f34_crit_edge, label %dec_label_pc_10f20

dec_label_pc_10f0c.dec_label_pc_10f34_crit_edge:  ; preds = %dec_label_pc_10f0c
  %v0_10f38.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_10f34

dec_label_pc_10f20:                               ; preds = %dec_label_pc_10f0c
  %v0_10f20 = call i32 @function_1003c()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_10f2c = inttoptr i32 %v0_10f20 to i32*
  store i32 12, i32* %v2_10f2c, align 4
  br label %dec_label_pc_10ff8

dec_label_pc_10f34:                               ; preds = %dec_label_pc_10f0c.dec_label_pc_10f34_crit_edge, %dec_label_pc_10eec
  %v0_10f50 = phi i32 [ %v0_10f38.pre, %dec_label_pc_10f0c.dec_label_pc_10f34_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_d110.394 to i32), i32 69376), %dec_label_pc_10eec ]
  %v2_10f38 = add i32 %v0_10f50, 68
  %v3_10f38 = inttoptr i32 %v2_10f38 to i32*
  %v4_10f38 = load i32, i32* %v3_10f38, align 4
  store i32 %v4_10f38, i32* @r4, align 4
  %v2_10f50 = add i32 %v0_10f50, 72
  %v3_10f50 = inttoptr i32 %v2_10f50 to i32*
  %v4_10f50 = load i32, i32* %v3_10f50, align 4
  store i32 %v4_10f50, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_10f50)
  %v0_10f64 = load i32, i32* @r5, align 4
  %v2_10f64 = add i32 %v0_10f64, 16
  %v3_10f64 = inttoptr i32 %v2_10f64 to i32*
  %v4_10f64 = load i32, i32* %v3_10f64, align 4
  store i32 %v4_10f64, i32* %ip.global-to-local, align 4
  store i32 69488, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_10f64)
  %v0_10f70 = load i32, i32* @r6, align 4
  store i32 %v0_10f70, i32* @r0, align 4
  %v0_10f74 = call i32 @function_105cc()
  store i32 %v0_10f74, i32* %r4.global-to-local, align 4
  %v2_10f78 = icmp eq i32 %v0_10f74, 0
  br i1 %v2_10f78, label %.thread, label %dec_label_pc_10f80

dec_label_pc_10f80:                               ; preds = %dec_label_pc_10f34
  %v1_10f80 = add i32 %v0_10f74, -4
  %v2_10f80 = inttoptr i32 %v1_10f80 to i32*
  %v3_10f80 = load i32, i32* %v2_10f80, align 4
  %v1_10f84 = and i32 %v3_10f80, 2
  %v2_10f84 = icmp eq i32 %v1_10f84, 0
  br i1 %v2_10f84, label %dec_label_pc_10f8c, label %.thread

dec_label_pc_10f8c:                               ; preds = %dec_label_pc_10f80
  %v1_10f8c7 = add i32 %v3_10f80, -4
  %v1_10f90 = and i32 %v1_10f8c7, -4
  store i32 %v1_10f90, i32* @r2, align 4
  %v3_10f94 = udiv i32 %v1_10f90, 4
  store i32 %v3_10f94, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_10f90, 36
  %v2_10f9c = icmp ult i32 %v1_10f90, 33
  %v3_10f9c = or i1 %tmp, %v2_10f9c
  br i1 %v3_10f9c, label %dec_label_pc_10fa8, label %dec_label_pc_10fa0

dec_label_pc_10fa0:                               ; preds = %dec_label_pc_10f8c
  %v2_10fa0 = inttoptr i32 %v0_10f74 to i8*
  %v3_10fa0 = call i32 @function_143c0(i8* %v2_10fa0, i32 0)
  br label %.thread

dec_label_pc_10fa8:                               ; preds = %dec_label_pc_10f8c
  %tmp8 = icmp eq i32 %v1_10f90, 16
  %v2_10fac = inttoptr i32 %v0_10f74 to i32*
  store i32 0, i32* %v2_10fac, align 4
  %v1_10fb0 = load i32, i32* %r4.global-to-local, align 4
  %v2_10fb0 = add i32 %v1_10fb0, 4
  %v3_10fb0 = inttoptr i32 %v2_10fb0 to i32*
  store i32 0, i32* %v3_10fb0, align 4
  %v1_10fb4 = load i32, i32* %r4.global-to-local, align 4
  %v2_10fb4 = add i32 %v1_10fb4, 8
  %v3_10fb4 = inttoptr i32 %v2_10fb4 to i32*
  store i32 0, i32* %v3_10fb4, align 4
  %v2_10fb8 = icmp ult i32 %v1_10f90, 13
  %v3_10fb8 = or i1 %tmp8, %v2_10fb8
  br i1 %v3_10fb8, label %.thread, label %dec_label_pc_10fbc

dec_label_pc_10fbc:                               ; preds = %dec_label_pc_10fa8
  %v0_10fbc = load i32, i32* %ip.global-to-local, align 4
  %v1_10fc0 = load i32, i32* %r4.global-to-local, align 4
  %v2_10fc0 = add i32 %v1_10fc0, 12
  %v3_10fc0 = inttoptr i32 %v2_10fc0 to i32*
  store i32 0, i32* %v3_10fc0, align 4
  %v1_10fc4 = load i32, i32* %r4.global-to-local, align 4
  %v2_10fc4 = add i32 %v1_10fc4, 16
  %v3_10fc4 = inttoptr i32 %v2_10fc4 to i32*
  store i32 0, i32* %v3_10fc4, align 4
  %tmp9 = icmp ult i32 %v0_10fbc, 7
  br i1 %tmp9, label %.thread, label %dec_label_pc_10fcc

dec_label_pc_10fcc:                               ; preds = %dec_label_pc_10fbc
  %v0_10fcc = load i32, i32* %ip.global-to-local, align 4
  %v7_10fcc = icmp eq i32 %v0_10fcc, 9
  %v1_10fd0 = load i32, i32* %r4.global-to-local, align 4
  %v2_10fd0 = add i32 %v1_10fd0, 20
  %v3_10fd0 = inttoptr i32 %v2_10fd0 to i32*
  store i32 0, i32* %v3_10fd0, align 4
  %v1_10fd4 = load i32, i32* %r4.global-to-local, align 4
  %v2_10fd4 = add i32 %v1_10fd4, 24
  %v3_10fd4 = inttoptr i32 %v2_10fd4 to i32*
  store i32 0, i32* %v3_10fd4, align 4
  br i1 %v7_10fcc, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_10fcc
  %v2_10fd8 = load i32, i32* %r4.global-to-local, align 4
  %v3_10fd8 = add i32 %v2_10fd8, 32
  %v4_10fd8 = inttoptr i32 %v3_10fd8 to i32*
  store i32 0, i32* %v4_10fd8, align 4
  %v2_10fdc = load i32, i32* %r4.global-to-local, align 4
  %v3_10fdc = add i32 %v2_10fdc, 28
  %v4_10fdc = inttoptr i32 %v3_10fdc to i32*
  store i32 0, i32* %v4_10fdc, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_10fcc, %dec_label_pc_10f80, %dec_label_pc_10fbc, %dec_label_pc_10fa8, %dec_label_pc_10f34, %dec_label_pc_10fa0, %bb
  %v0_10fec = load i32, i32* @r5, align 4
  %v2_10fec = add i32 %v0_10fec, 24
  %v3_10fec = inttoptr i32 %v2_10fec to i32*
  %v4_10fec = load i32, i32* %v3_10fec, align 4
  store i32 %v4_10fec, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_10fec)
  br label %dec_label_pc_10ff8

dec_label_pc_10ff8:                               ; preds = %dec_label_pc_10f20, %.thread
  %v0_10ff8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_10eec, i32* @r4, align 4
  store i32 %v6_10eec, i32* @r5, align 4
  store i32 %v9_10eec, i32* @r6, align 4
  store i32 %v12_10eec, i32* @lr, align 4
  ret i32 %v0_10ff8

; uselistorder directives
  uselistorder i32 %v1_10f90, { 0, 5, 1, 4, 3, 2 }
  uselistorder i32 %v0_10f74, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 33, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10ff8, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_1100c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1100c:
  %v0_1100c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1100c, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_1100c
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1100c, %bb
  %v10_1101c = phi i32 [ %arg1, %dec_label_pc_1100c ], [ 0, %bb ]
  ret i32 %v10_1101c

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_11020(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11020:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_11020 = load i32, i32* @r4, align 4
  %v6_11020 = load i32, i32* @r5, align 4
  %v9_11020 = load i32, i32* @r6, align 4
  %v12_11020 = load i32, i32* @r7, align 4
  %v15_11020 = load i32, i32* @r8, align 4
  %v18_11020 = load i32, i32* @sb, align 4
  %v21_11020 = load i32, i32* @sl, align 4
  %v24_11020 = load i32, i32* @fp, align 4
  %v27_11020 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_1102c = icmp eq i32* %arg1, null
  store i32 add (i32 ptrtoint (i32* @global_var_cfd8.252 to i32), i32 69688), i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_1102c, label %dec_label_pc_11040, label %dec_label_pc_11050

dec_label_pc_11040:                               ; preds = %dec_label_pc_11020
  store i32 %arg2, i32* @r0, align 4
  %v0_11044 = call i32 @function_105cc()
  store i32 %v0_11044, i32* %r0.global-to-local, align 4
  store i32 %v0_11044, i32* @r4, align 4
  br label %dec_label_pc_113a8

dec_label_pc_11050:                               ; preds = %dec_label_pc_11020
  %v2_11050 = icmp eq i32 %arg2, 0
  br i1 %v2_11050, label %dec_label_pc_11058, label %dec_label_pc_11064

dec_label_pc_11058:                               ; preds = %dec_label_pc_11050
  %v0_11058 = call i32 @function_11638()
  store i32 %v0_11058, i32* %r0.global-to-local, align 4
  %v0_1105c = load i32, i32* @r6, align 4
  store i32 %v0_1105c, i32* @r4, align 4
  br label %dec_label_pc_113a8

dec_label_pc_11064:                               ; preds = %dec_label_pc_11050
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_1106c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_cfd8.252 to i32), i32 69756) to i32*), align 4
  store i32 %v4_1106c, i32* @r4, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_1106c, i32* %r2.global-to-local, align 4
  %v4_11078 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_cfd8.252 to i32), i32 69724) to i32*), align 4
  store i32 %v4_11078, i32* %r1.global-to-local, align 4
  %v2_1107c = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_1107c, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_11084 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_cfd8.252 to i32), i32 69760) to i32*), align 4
  call void @__pseudo_branch(i32 %v4_11084)
  %v0_11090 = load i32, i32* @r4, align 4
  store i32 %v0_11090, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_cfd8.252 to i32), i32 69688), i32* %r1.global-to-local, align 4
  %v4_1109c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_cfd8.252 to i32), i32 69704) to i32*), align 4
  store i32 %v4_1109c, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_110a8.612 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1109c)
  %v0_110a8 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_110a8, -32
  br i1 %tmp36, label %dec_label_pc_110c4, label %dec_label_pc_110b0

dec_label_pc_110b0:                               ; preds = %dec_label_pc_11064
  %v0_110b0 = call i32 @function_1003c()
  store i32 %v0_110b0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_110bc = inttoptr i32 %v0_110b0 to i32*
  store i32 12, i32* %v2_110bc, align 4
  br label %dec_label_pc_113a8

dec_label_pc_110c4:                               ; preds = %dec_label_pc_11064
  %v1_110c4 = add i32 %v0_110a8, 11
  store i32 %v1_110c4, i32* %r0.global-to-local, align 4
  %v0_110c8 = load i32, i32* @r5, align 4
  %v1_110c8 = add i32 %v0_110c8, -4
  %v2_110c8 = inttoptr i32 %v1_110c8 to i32*
  %v3_110c8 = load i32, i32* %v2_110c8, align 4
  store i32 %v3_110c8, i32* %r2.global-to-local, align 4
  %v2_110cc = icmp ugt i32 %v1_110c4, 14
  %v7_110cc = icmp eq i32 %v1_110c4, 15
  %v2_110d0 = xor i1 %v2_110cc, true
  %v3_110d0 = or i1 %v7_110cc, %v2_110d0
  br i1 %v3_110d0, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_110c4
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_110c4, %bb
  %v2_110d4 = xor i1 %v7_110cc, true
  %v3_110d4 = and i1 %v2_110cc, %v2_110d4
  br i1 %v3_110d4, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_110d4 = and i32 %v1_110c4, -8
  store i32 %v5_110d4, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_110d8 = and i32 %v3_110c8, 2
  %v2_110d8 = icmp eq i32 %v1_110d8, 0
  %v1_110dc = add i32 %v0_110c8, -8
  store i32 %v1_110dc, i32* @sl, align 4
  %v1_110e0 = and i32 %v3_110c8, -4
  store i32 %v1_110e0, i32* @r6, align 4
  br i1 %v2_110d8, label %dec_label_pc_110e8, label %dec_label_pc_112c0

dec_label_pc_110e8:                               ; preds = %bb29
  %v1_110e8 = load i32, i32* @sb, align 4
  %v3_110e8 = icmp ult i32 %v1_110e0, %v1_110e8
  br i1 %v3_110e8, label %dec_label_pc_110f4, label %bb30

bb30:                                             ; preds = %dec_label_pc_110e8
  store i32 %v1_110e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11258

dec_label_pc_110f4:                               ; preds = %dec_label_pc_110e8
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_110fc = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_cfd8.252 to i32), i32 69720) to i32*), align 4
  store i32 %v4_110fc, i32* %r0.global-to-local, align 4
  %v1_11100 = add i32 %v4_110fc, 44
  %v2_11100 = inttoptr i32 %v1_11100 to i32*
  %v3_11100 = load i32, i32* %v2_11100, align 4
  store i32 %v3_11100, i32* %r3.global-to-local, align 4
  %v2_11104 = add i32 %v1_110e0, %v1_110dc
  store i32 %v2_11104, i32* @r4, align 4
  %v9_11108 = icmp eq i32 %v2_11104, %v3_11100
  %v1_1110c = add i32 %v2_11104, 4
  %v2_1110c = inttoptr i32 %v1_1110c to i32*
  %v3_1110c = load i32, i32* %v2_1110c, align 4
  store i32 %v3_1110c, i32* %r1.global-to-local, align 4
  br i1 %v9_11108, label %dec_label_pc_11114, label %dec_label_pc_11150

dec_label_pc_11114:                               ; preds = %dec_label_pc_110f4
  %v1_11114 = and i32 %v3_1110c, -4
  %v2_11118 = add i32 %v1_11114, %v1_110e0
  store i32 %v2_11118, i32* %r1.global-to-local, align 4
  %v1_1111c = add i32 %v1_110e8, 16
  store i32 %v1_1111c, i32* %r3.global-to-local, align 4
  %v3_11120 = icmp ult i32 %v2_11118, %v1_1111c
  br i1 %v3_11120, label %dec_label_pc_111a4, label %dec_label_pc_11128

dec_label_pc_11128:                               ; preds = %dec_label_pc_11114
  %v2_11128 = sub i32 %v2_11118, %v1_110e8
  %v1_1112c = urem i32 %v3_110c8, 2
  %v2_11130 = add i32 %v1_110e8, %v1_110dc
  store i32 %v2_11130, i32* %r1.global-to-local, align 4
  %v2_11134 = or i32 %v1_110e8, %v1_1112c
  store i32 %v2_11134, i32* %r2.global-to-local, align 4
  %v1_11138 = or i32 %v2_11128, 1
  store i32 %v1_11138, i32* %r3.global-to-local, align 4
  store i32 %v0_110c8, i32* @r4, align 4
  store i32 %v2_11134, i32* %v2_110c8, align 4
  %v0_11144 = load i32, i32* %r1.global-to-local, align 4
  %v1_11144 = load i32, i32* %r0.global-to-local, align 4
  %v2_11144 = add i32 %v1_11144, 44
  %v3_11144 = inttoptr i32 %v2_11144 to i32*
  store i32 %v0_11144, i32* %v3_11144, align 4
  %v0_11148 = load i32, i32* %r3.global-to-local, align 4
  %v1_11148 = load i32, i32* %r1.global-to-local, align 4
  %v2_11148 = add i32 %v1_11148, 4
  %v3_11148 = inttoptr i32 %v2_11148 to i32*
  store i32 %v0_11148, i32* %v3_11148, align 4
  br label %dec_label_pc_1138c

dec_label_pc_11150:                               ; preds = %dec_label_pc_110f4
  %v1_11150 = and i32 %v3_1110c, -2
  %v2_11154 = add i32 %v1_11150, %v2_11104
  store i32 %v2_11154, i32* %r3.global-to-local, align 4
  %v1_11158 = add i32 %v2_11154, 4
  %v2_11158 = inttoptr i32 %v1_11158 to i32*
  %v3_11158 = load i32, i32* %v2_11158, align 4
  store i32 %v3_11158, i32* %r3.global-to-local, align 4
  %v1_1115c = urem i32 %v3_11158, 2
  %v2_1115c = icmp eq i32 %v1_1115c, 0
  br i1 %v2_1115c, label %dec_label_pc_11164, label %dec_label_pc_111a4

dec_label_pc_11164:                               ; preds = %dec_label_pc_11150
  %v1_11164 = and i32 %v3_1110c, -4
  store i32 %v1_11164, i32* %r3.global-to-local, align 4
  %v2_11168 = add i32 %v1_11164, %v1_110e0
  store i32 %v2_11168, i32* %r0.global-to-local, align 4
  %v3_1116c = icmp ult i32 %v2_11168, %v1_110e8
  br i1 %v3_1116c, label %dec_label_pc_111a4, label %dec_label_pc_11174

dec_label_pc_11174:                               ; preds = %dec_label_pc_11164
  %v1_11174 = add i32 %v1_110e0, %v0_110c8
  %v2_11174 = inttoptr i32 %v1_11174 to i32*
  %v3_11174 = load i32, i32* %v2_11174, align 4
  store i32 %v3_11174, i32* %r1.global-to-local, align 4
  %v1_11178 = add i32 %v3_11174, 12
  %v2_11178 = inttoptr i32 %v1_11178 to i32*
  %v3_11178 = load i32, i32* %v2_11178, align 4
  store i32 %v3_11178, i32* %r3.global-to-local, align 4
  %v9_1117c = icmp eq i32 %v3_11178, %v2_11104
  %v1_11180 = add i32 %v2_11104, 12
  %v2_11180 = inttoptr i32 %v1_11180 to i32*
  %v3_11180 = load i32, i32* %v2_11180, align 4
  store i32 %v3_11180, i32* %r2.global-to-local, align 4
  br i1 %v9_1117c, label %dec_label_pc_11188, label %dec_label_pc_11194

dec_label_pc_11188:                               ; preds = %dec_label_pc_11174
  %v1_11188 = add i32 %v3_11180, 8
  %v2_11188 = inttoptr i32 %v1_11188 to i32*
  %v3_11188 = load i32, i32* %v2_11188, align 4
  store i32 %v3_11188, i32* %r3.global-to-local, align 4
  %v9_1118c = icmp eq i32 %v3_11188, %v2_11104
  br i1 %v9_1118c, label %dec_label_pc_11198, label %dec_label_pc_11194

dec_label_pc_11194:                               ; preds = %dec_label_pc_11174, %dec_label_pc_11188
  %v0_11194 = call i32 @function_118b4()
  store i32 %v0_11194, i32* %r0.global-to-local, align 4
  %v0_11198.pre = load i32, i32* @r1, align 4
  %v1_11198.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_11198

dec_label_pc_11198:                               ; preds = %dec_label_pc_11188, %dec_label_pc_11194
  %v1_11198 = phi i32 [ %v3_11180, %dec_label_pc_11188 ], [ %v1_11198.pre, %dec_label_pc_11194 ]
  %v0_11198 = phi i32 [ %v3_11174, %dec_label_pc_11188 ], [ %v0_11198.pre, %dec_label_pc_11194 ]
  %v2_11198 = add i32 %v1_11198, 8
  %v3_11198 = inttoptr i32 %v2_11198 to i32*
  store i32 %v0_11198, i32* %v3_11198, align 4
  %v0_1119c = load i32, i32* %r2.global-to-local, align 4
  %v1_1119c = load i32, i32* %r1.global-to-local, align 4
  %v2_1119c = add i32 %v1_1119c, 12
  %v3_1119c = inttoptr i32 %v2_1119c to i32*
  store i32 %v0_1119c, i32* %v3_1119c, align 4
  %v1_11258.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11258

dec_label_pc_111a4:                               ; preds = %dec_label_pc_11114, %dec_label_pc_11164, %dec_label_pc_11150
  %v1_111a4 = add i32 %v1_110e8, -7
  store i32 %v1_111a4, i32* @r0, align 4
  %v0_111a8 = call i32 @function_105cc()
  store i32 %v0_111a8, i32* @r0, align 4
  store i32 %v0_111a8, i32* %r1.global-to-local, align 4
  %v2_111ac = icmp eq i32 %v0_111a8, 0
  br i1 %v2_111ac, label %bb31, label %dec_label_pc_111b8

bb31:                                             ; preds = %dec_label_pc_111a4
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_1138c

dec_label_pc_111b8:                               ; preds = %dec_label_pc_111a4
  %v1_111c0.pre = load i32, i32* @r4, align 4
  %v1_111b8 = add i32 %v0_111a8, -4
  %v2_111b8 = inttoptr i32 %v1_111b8 to i32*
  %v3_111b8 = load i32, i32* %v2_111b8, align 4
  store i32 %v3_111b8, i32* @r3, align 4
  %v1_111bc = add i32 %v0_111a8, -8
  store i32 %v1_111bc, i32* @r7, align 4
  %v9_111c0 = icmp eq i32 %v1_111bc, %v1_111c0.pre
  br i1 %v9_111c0, label %.thread2, label %dec_label_pc_111d0

.thread2:                                         ; preds = %dec_label_pc_111b8
  %v2_111c4 = and i32 %v3_111b8, -4
  store i32 %v2_111c4, i32* %r3.global-to-local, align 4
  %v2_111c8 = load i32, i32* @r6, align 4
  %v3_111c8 = add i32 %v2_111c8, %v2_111c4
  store i32 %v3_111c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11258

dec_label_pc_111d0:                               ; preds = %dec_label_pc_111b8
  %v0_111d0 = load i32, i32* @r6, align 4
  %v1_111d0 = add i32 %v0_111d0, -4
  store i32 %v1_111d0, i32* @r2, align 4
  %v3_111d4 = udiv i32 %v1_111d0, 4
  store i32 %v3_111d4, i32* @ip, align 4
  %tmp37 = and i32 %v1_111d0, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_111dc = icmp ult i32 %v1_111d0, 36
  %v3_111dc = or i1 %tmp38, %v2_111dc
  %v0_111ec = load i32, i32* @r5, align 4
  br i1 %v3_111dc, label %dec_label_pc_111ec, label %dec_label_pc_111e0

dec_label_pc_111e0:                               ; preds = %dec_label_pc_111d0
  store i32 %v0_111ec, i32* @r1, align 4
  %v0_111e4 = call i32 @function_100a0()
  store i32 %v0_111e4, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_111ec:                               ; preds = %dec_label_pc_111d0
  %v1_111ec = inttoptr i32 %v0_111ec to i32*
  %v2_111ec = load i32, i32* %v1_111ec, align 4
  store i32 %v2_111ec, i32* %r3.global-to-local, align 4
  %v2_111f0 = inttoptr i32 %v0_111a8 to i32*
  store i32 %v2_111ec, i32* %v2_111f0, align 4
  %v0_111f4 = load i32, i32* @r5, align 4
  %v1_111f4 = add i32 %v0_111f4, 4
  %v2_111f4 = inttoptr i32 %v1_111f4 to i32*
  %v3_111f4 = load i32, i32* %v2_111f4, align 4
  store i32 %v3_111f4, i32* %r3.global-to-local, align 4
  %v1_111f8 = load i32, i32* %r1.global-to-local, align 4
  %v2_111f8 = add i32 %v1_111f8, 4
  %v3_111f8 = inttoptr i32 %v2_111f8 to i32*
  store i32 %v3_111f4, i32* %v3_111f8, align 4
  %v0_111fc = load i32, i32* @r5, align 4
  %v1_111fc = add i32 %v0_111fc, 8
  %v2_111fc = inttoptr i32 %v1_111fc to i32*
  %v3_111fc = load i32, i32* %v2_111fc, align 4
  store i32 %v3_111fc, i32* %r3.global-to-local, align 4
  %v0_11200 = load i32, i32* @ip, align 4
  %v1_11204 = load i32, i32* %r1.global-to-local, align 4
  %v2_11204 = add i32 %v1_11204, 8
  %v3_11204 = inttoptr i32 %v2_11204 to i32*
  store i32 %v3_111fc, i32* %v3_11204, align 4
  %tmp39 = icmp ult i32 %v0_11200, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_1120c

dec_label_pc_1120c:                               ; preds = %dec_label_pc_111ec
  %v0_1120c = load i32, i32* @r5, align 4
  %v1_1120c = add i32 %v0_1120c, 12
  %v2_1120c = inttoptr i32 %v1_1120c to i32*
  %v3_1120c = load i32, i32* %v2_1120c, align 4
  store i32 %v3_1120c, i32* %r3.global-to-local, align 4
  %v1_11210 = load i32, i32* %r1.global-to-local, align 4
  %v2_11210 = add i32 %v1_11210, 12
  %v3_11210 = inttoptr i32 %v2_11210 to i32*
  store i32 %v3_1120c, i32* %v3_11210, align 4
  %v0_11214 = load i32, i32* @r5, align 4
  %v1_11214 = add i32 %v0_11214, 16
  %v2_11214 = inttoptr i32 %v1_11214 to i32*
  %v3_11214 = load i32, i32* %v2_11214, align 4
  store i32 %v3_11214, i32* %r3.global-to-local, align 4
  %v0_11218 = load i32, i32* @ip, align 4
  %v1_1121c = load i32, i32* %r1.global-to-local, align 4
  %v2_1121c = add i32 %v1_1121c, 16
  %v3_1121c = inttoptr i32 %v2_1121c to i32*
  store i32 %v3_11214, i32* %v3_1121c, align 4
  %tmp40 = icmp ult i32 %v0_11218, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_11224

dec_label_pc_11224:                               ; preds = %dec_label_pc_1120c
  %v0_11224 = load i32, i32* @r5, align 4
  %v1_11224 = add i32 %v0_11224, 20
  %v2_11224 = inttoptr i32 %v1_11224 to i32*
  %v3_11224 = load i32, i32* %v2_11224, align 4
  store i32 %v3_11224, i32* %r3.global-to-local, align 4
  %v1_11228 = load i32, i32* %r1.global-to-local, align 4
  %v2_11228 = add i32 %v1_11228, 20
  %v3_11228 = inttoptr i32 %v2_11228 to i32*
  store i32 %v3_11224, i32* %v3_11228, align 4
  %v0_1122c = load i32, i32* @r5, align 4
  %v1_1122c = add i32 %v0_1122c, 24
  %v2_1122c = inttoptr i32 %v1_1122c to i32*
  %v3_1122c = load i32, i32* %v2_1122c, align 4
  store i32 %v3_1122c, i32* %r3.global-to-local, align 4
  %v1_11230 = load i32, i32* %r1.global-to-local, align 4
  %v2_11230 = add i32 %v1_11230, 24
  %v3_11230 = inttoptr i32 %v2_11230 to i32*
  store i32 %v3_1122c, i32* %v3_11230, align 4
  %v0_11234 = load i32, i32* @ip, align 4
  %v7_11234 = icmp eq i32 %v0_11234, 9
  br i1 %v7_11234, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_11224
  %v1_11238 = load i32, i32* @r5, align 4
  %v2_11238 = add i32 %v1_11238, 28
  %v3_11238 = inttoptr i32 %v2_11238 to i32*
  %v4_11238 = load i32, i32* %v3_11238, align 4
  store i32 %v4_11238, i32* %r3.global-to-local, align 4
  %v2_1123c = load i32, i32* %r1.global-to-local, align 4
  %v3_1123c = add i32 %v2_1123c, 28
  %v4_1123c = inttoptr i32 %v3_1123c to i32*
  store i32 %v4_11238, i32* %v4_1123c, align 4
  %v1_11240 = load i32, i32* @r5, align 4
  %v2_11240 = add i32 %v1_11240, 32
  %v3_11240 = inttoptr i32 %v2_11240 to i32*
  %v4_11240 = load i32, i32* %v3_11240, align 4
  store i32 %v4_11240, i32* %r3.global-to-local, align 4
  %v2_11244 = load i32, i32* %r1.global-to-local, align 4
  %v3_11244 = add i32 %v2_11244, 32
  %v4_11244 = inttoptr i32 %v3_11244 to i32*
  store i32 %v4_11240, i32* %v4_11244, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_11224, %dec_label_pc_1120c, %dec_label_pc_111ec, %dec_label_pc_111e0, %bb32
  %v0_11248 = load i32, i32* @r5, align 4
  store i32 %v0_11248, i32* @r0, align 4
  %v0_1124c = call i32 @function_11638()
  store i32 %v0_1124c, i32* %r0.global-to-local, align 4
  %v0_11250 = load i32, i32* @r7, align 4
  %v1_11250 = add i32 %v0_11250, 8
  store i32 %v1_11250, i32* @r4, align 4
  br label %dec_label_pc_1138c

dec_label_pc_11258:                               ; preds = %bb30, %.thread2, %dec_label_pc_11198
  %v0_1126c = phi i32 [ %v3_111c8, %.thread2 ], [ %v1_110e0, %bb30 ], [ %v1_11258.pre, %dec_label_pc_11198 ]
  %v0_11258 = load i32, i32* @sb, align 4
  %v2_11258 = sub i32 %v0_1126c, %v0_11258
  store i32 %v2_11258, i32* %r1.global-to-local, align 4
  %v0_11260 = load i32, i32* @sl, align 4
  %v1_11260 = add i32 %v0_11260, 4
  %v2_11260 = inttoptr i32 %v1_11260 to i32*
  %v3_11260 = load i32, i32* %v2_11260, align 4
  %tmp41 = icmp ugt i32 %v2_11258, 15
  %v1_11288 = urem i32 %v3_11260, 2
  store i32 %v1_11288, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_11288, label %dec_label_pc_11268

dec_label_pc_11268:                               ; preds = %dec_label_pc_11258
  %v2_1126c = or i32 %v1_11288, %v0_1126c
  store i32 %v2_1126c, i32* %r3.global-to-local, align 4
  store i32 %v2_1126c, i32* %v2_11260, align 4
  %v0_11274 = load i32, i32* @sl, align 4
  %v1_11274 = load i32, i32* %r0.global-to-local, align 4
  %v2_11274 = add i32 %v1_11274, %v0_11274
  store i32 %v2_11274, i32* %r2.global-to-local, align 4
  %v1_11278 = add i32 %v2_11274, 4
  %v2_11278 = inttoptr i32 %v1_11278 to i32*
  %v3_11278 = load i32, i32* %v2_11278, align 4
  %v1_1127c = or i32 %v3_11278, 1
  store i32 %v1_1127c, i32* %r3.global-to-local, align 4
  store i32 %v1_1127c, i32* %v2_11278, align 4
  br label %dec_label_pc_112b8

dec_label_pc_11288:                               ; preds = %dec_label_pc_11258
  %v2_1128c = add i32 %v0_11260, %v0_11258
  store i32 %v2_1128c, i32* %r0.global-to-local, align 4
  %v2_11290 = or i32 %v1_11288, %v0_11258
  store i32 %v2_11290, i32* %r3.global-to-local, align 4
  %v1_11294 = or i32 %v2_11258, 1
  store i32 %v1_11294, i32* %r2.global-to-local, align 4
  store i32 %v2_11290, i32* %v2_11260, align 4
  %v0_1129c = load i32, i32* %r2.global-to-local, align 4
  %v1_1129c = load i32, i32* %r0.global-to-local, align 4
  %v2_1129c = add i32 %v1_1129c, 4
  %v3_1129c = inttoptr i32 %v2_1129c to i32*
  store i32 %v0_1129c, i32* %v3_1129c, align 4
  %v0_112a0 = load i32, i32* %r0.global-to-local, align 4
  %v1_112a0 = load i32, i32* %r1.global-to-local, align 4
  %v2_112a0 = add i32 %v1_112a0, %v0_112a0
  store i32 %v2_112a0, i32* %r2.global-to-local, align 4
  %v1_112a4 = add i32 %v2_112a0, 4
  %v2_112a4 = inttoptr i32 %v1_112a4 to i32*
  %v3_112a4 = load i32, i32* %v2_112a4, align 4
  %v1_112a8 = or i32 %v3_112a4, 1
  store i32 %v1_112a8, i32* %r3.global-to-local, align 4
  store i32 %v1_112a8, i32* %v2_112a4, align 4
  %v0_112b0 = load i32, i32* %r0.global-to-local, align 4
  %v1_112b0 = add i32 %v0_112b0, 8
  store i32 %v1_112b0, i32* @r0, align 4
  %v0_112b4 = call i32 @function_11638()
  store i32 %v0_112b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_112b8

dec_label_pc_112b8:                               ; preds = %dec_label_pc_11268, %dec_label_pc_11288
  %v0_112b8 = load i32, i32* @sl, align 4
  %v1_112b8 = add i32 %v0_112b8, 8
  store i32 %v1_112b8, i32* @r4, align 4
  br label %dec_label_pc_1138c

dec_label_pc_112c0:                               ; preds = %bb29
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_cfd8.252 to i32), i32 69688), i32* %r1.global-to-local, align 4
  %v4_112c8 = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_cfd8.252 to i32), i32 69720) to i32*), align 4
  store i32 %v4_112c8, i32* @r8, align 4
  %v2_112cc = inttoptr i32 %v1_110dc to i32*
  %v3_112cc = load i32, i32* %v2_112cc, align 4
  store i32 %v3_112cc, i32* @r4, align 4
  %v1_112d0 = add i32 %v4_112c8, 860
  %v2_112d0 = inttoptr i32 %v1_112d0 to i32*
  %v3_112d0 = load i32, i32* %v2_112d0, align 4
  %v1_112d4 = add i32 %v3_112cc, 4
  %v1_112d8 = add i32 %v3_112d0, -1
  store i32 %v1_112d8, i32* %r2.global-to-local, align 4
  %v2_112dc = add i32 %v1_112d4, %v1_112d8
  %v1_112e0 = load i32, i32* @sb, align 4
  %v2_112e0 = add i32 %v2_112dc, %v1_112e0
  store i32 %v2_112e0, i32* %r3.global-to-local, align 4
  %v2_112e4 = sub i32 0, %v3_112d0
  %v3_112e4 = and i32 %v2_112e0, %v2_112e4
  store i32 %v3_112e4, i32* @r7, align 4
  %v2_112e8 = sub i32 %v3_112e4, %v3_112cc
  store i32 %v2_112e8, i32* @fp, align 4
  %v9_112ec = icmp eq i32 %v1_110e0, %v2_112e8
  br i1 %v9_112ec, label %dec_label_pc_11360, label %dec_label_pc_112f4

dec_label_pc_112f4:                               ; preds = %dec_label_pc_112c0
  %v2_112f4 = sub i32 %v1_110dc, %v3_112cc
  store i32 %v2_112f4, i32* %r0.global-to-local, align 4
  %v2_112f8 = add i32 %v3_112cc, %v1_110e0
  store i32 %v2_112f8, i32* %r1.global-to-local, align 4
  store i32 %v3_112e4, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_11304 = call i32 @function_1296c(i32 %v2_112f4, i32 %v2_112f8, i32 %v3_112e4, i32 1)
  store i32 %v4_11304, i32* %r0.global-to-local, align 4
  %v7_11308 = icmp eq i32 %v4_11304, -1
  br i1 %v7_11308, label %dec_label_pc_11354, label %dec_label_pc_11310

dec_label_pc_11310:                               ; preds = %dec_label_pc_112f4
  %v1_11310 = load i32, i32* @r4, align 4
  %v2_11310 = add i32 %v1_11310, %v4_11304
  store i32 %v2_11310, i32* %r0.global-to-local, align 4
  %v0_11314 = load i32, i32* @fp, align 4
  %v1_11314 = or i32 %v0_11314, 2
  store i32 %v1_11314, i32* %r3.global-to-local, align 4
  %v2_11318 = add i32 %v2_11310, 4
  %v3_11318 = inttoptr i32 %v2_11318 to i32*
  store i32 %v1_11314, i32* %v3_11318, align 4
  %v0_1131c = load i32, i32* @r8, align 4
  %v1_1131c = add i32 %v0_1131c, 868
  %v2_1131c = inttoptr i32 %v1_1131c to i32*
  %v3_1131c = load i32, i32* %v2_1131c, align 4
  store i32 %v3_1131c, i32* %r3.global-to-local, align 4
  %v1_11320 = add i32 %v0_1131c, 880
  %v2_11320 = inttoptr i32 %v1_11320 to i32*
  %v3_11320 = load i32, i32* %v2_11320, align 4
  store i32 %v3_11320, i32* %r2.global-to-local, align 4
  %v0_11324 = load i32, i32* @r6, align 4
  %v2_11324 = sub i32 %v3_1131c, %v0_11324
  store i32 %v2_11324, i32* %r3.global-to-local, align 4
  %v1_11328 = load i32, i32* @r7, align 4
  %v2_11328 = add i32 %v1_11328, %v2_11324
  store i32 %v2_11328, i32* %r1.global-to-local, align 4
  %v1_1132c = add i32 %v0_1131c, 872
  %v2_1132c = inttoptr i32 %v1_1132c to i32*
  %v3_1132c = load i32, i32* %v2_1132c, align 4
  store i32 %v3_1132c, i32* %r3.global-to-local, align 4
  %v1_11334 = add i32 %v0_1131c, 884
  %v2_11334 = inttoptr i32 %v1_11334 to i32*
  %v3_11334 = load i32, i32* %v2_11334, align 4
  store i32 %v3_11334, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_11328, %v3_11320
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_11310
  store i32 %v2_11328, i32* %v2_11320, align 4
  %v0_1133c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_1133c.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_11310, %bb33
  %v1_1133c = phi i32 [ %v0_1131c, %dec_label_pc_11310 ], [ %v1_1133c.pre, %bb33 ]
  %v0_1133c = phi i32 [ %v2_11328, %dec_label_pc_11310 ], [ %v0_1133c.pre, %bb33 ]
  %v2_1133c = add i32 %v1_1133c, 868
  %v3_1133c = inttoptr i32 %v2_1133c to i32*
  store i32 %v0_1133c, i32* %v3_1133c, align 4
  %v0_11340 = load i32, i32* %r1.global-to-local, align 4
  %v1_11340 = load i32, i32* %r3.global-to-local, align 4
  %v2_11340 = add i32 %v1_11340, %v0_11340
  store i32 %v2_11340, i32* %r1.global-to-local, align 4
  %v1_11344 = load i32, i32* %r2.global-to-local, align 4
  %v0_11348 = load i32, i32* %r0.global-to-local, align 4
  %v1_11348 = add i32 %v0_11348, 8
  store i32 %v1_11348, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_11340, %v1_11344
  br i1 %tmp43, label %bb35, label %dec_label_pc_1138c

bb35:                                             ; preds = %bb34
  %v5_1134c = load i32, i32* @r8, align 4
  %v6_1134c = add i32 %v5_1134c, 884
  %v7_1134c = inttoptr i32 %v6_1134c to i32*
  store i32 %v2_11340, i32* %v7_1134c, align 4
  br label %dec_label_pc_1138c

dec_label_pc_11354:                               ; preds = %dec_label_pc_112f4
  %v0_11354 = load i32, i32* @sb, align 4
  %v1_11354 = add i32 %v0_11354, 4
  store i32 %v1_11354, i32* %r3.global-to-local, align 4
  %v0_11358 = load i32, i32* @r6, align 4
  %v3_11358 = icmp ult i32 %v0_11358, %v1_11354
  br i1 %v3_11358, label %dec_label_pc_11368, label %dec_label_pc_11354.dec_label_pc_11360_crit_edge

dec_label_pc_11354.dec_label_pc_11360_crit_edge:  ; preds = %dec_label_pc_11354
  %v0_11360.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_11360

dec_label_pc_11360:                               ; preds = %dec_label_pc_11354.dec_label_pc_11360_crit_edge, %dec_label_pc_112c0
  %v0_11360 = phi i32 [ %v0_11360.pre, %dec_label_pc_11354.dec_label_pc_11360_crit_edge ], [ %v0_110c8, %dec_label_pc_112c0 ]
  store i32 %v0_11360, i32* @r4, align 4
  br label %dec_label_pc_1138c

dec_label_pc_11368:                               ; preds = %dec_label_pc_11354
  %v1_11368 = add i32 %v0_11354, -7
  store i32 %v1_11368, i32* @r0, align 4
  %v0_1136c = call i32 @function_105cc()
  store i32 %v0_1136c, i32* @r0, align 4
  store i32 %v0_1136c, i32* @r4, align 4
  %v2_11370 = icmp eq i32 %v0_1136c, 0
  br i1 %v2_11370, label %dec_label_pc_1138c, label %dec_label_pc_11378

dec_label_pc_11378:                               ; preds = %dec_label_pc_11368
  %v0_11378 = load i32, i32* @r6, align 4
  %v1_11378 = add i32 %v0_11378, -8
  store i32 %v1_11378, i32* @r2, align 4
  %v0_1137c = load i32, i32* @r5, align 4
  store i32 %v0_1137c, i32* @r1, align 4
  %v0_11380 = call i32 @function_100a0()
  %v0_11384 = load i32, i32* @r5, align 4
  store i32 %v0_11384, i32* @r0, align 4
  %v0_11388 = call i32 @function_11638()
  store i32 %v0_11388, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1138c

dec_label_pc_1138c:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_11368, %dec_label_pc_11360, %dec_label_pc_112b8, %.thread6, %dec_label_pc_11128, %dec_label_pc_11378
  store i32 %v2_1107c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_cfd8.252 to i32), i32 69688), i32* %r2.global-to-local, align 4
  %v4_1139c = load i32, i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_cfd8.252 to i32), i32 69712) to i32*), align 4
  store i32 %v4_1139c, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_1139c)
  br label %dec_label_pc_113a8

dec_label_pc_113a8:                               ; preds = %dec_label_pc_110b0, %dec_label_pc_11058, %dec_label_pc_11040, %dec_label_pc_1138c
  %v0_113a8 = load i32, i32* @r4, align 4
  store i32 %v0_113a8, i32* %r0.global-to-local, align 4
  store i32 %v3_11020, i32* @r4, align 4
  store i32 %v6_11020, i32* @r5, align 4
  store i32 %v9_11020, i32* @r6, align 4
  store i32 %v12_11020, i32* @r7, align 4
  store i32 %v15_11020, i32* @r8, align 4
  store i32 %v18_11020, i32* @sb, align 4
  store i32 %v21_11020, i32* @sl, align 4
  store i32 %v24_11020, i32* @fp, align 4
  store i32 %v27_11020, i32* @lr, align 4
  ret i32 %v0_113a8

; uselistorder directives
  uselistorder i32 %v2_11340, { 1, 0, 2 }
  uselistorder i32 %v2_11328, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11304, { 1, 0, 2 }
  uselistorder i32 %v3_112e4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11288, { 2, 1, 0 }
  uselistorder i32 %v2_11258, { 1, 0, 2 }
  uselistorder i32 %v0_111ec, { 1, 0 }
  uselistorder i32 %v0_111a8, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_1110c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_11104, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_110e8, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_110e0, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_110dc, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_110cc, { 1, 0 }
  uselistorder i32 %v0_110c8, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_110a8, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 11, 7, 8, 9, 10, 21, 12, 14, 13, 20, 22, 15, 16, 17, 18, 19, 25, 24, 23, 26, 27 }
  uselistorder i32* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_cfd8.252 to i32), i32 69720) to i32*), { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_cfd8.252 to i32), i32 69688), { 2, 3, 1, 0 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_113a8, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_1138c, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_112b8, { 1, 0 }
  uselistorder label %dec_label_pc_11258, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_111a4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11198, { 1, 0 }
  uselistorder label %dec_label_pc_11194, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_113bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_113bc:
  %v0_113bc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_113bc, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_113bc
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_113bc, %bb
  %v10_113d0 = phi i32 [ %arg1, %dec_label_pc_113bc ], [ 0, %bb ]
  ret i32 %v10_113d0

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_113d4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_113d4:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_113d4 = add i32 %arg2, 44
  %v2_113d4 = inttoptr i32 %v1_113d4 to i32*
  %v3_113d4 = load i32, i32* %v2_113d4, align 4
  %v1_113dc = add i32 %v3_113d4, 4
  %v2_113dc = inttoptr i32 %v1_113dc to i32*
  %v3_113dc = load i32, i32* %v2_113dc, align 4
  %v1_113e0 = add i32 %arg2, 860
  %v2_113e0 = inttoptr i32 %v1_113e0 to i32*
  %v3_113e0 = load i32, i32* %v2_113e0, align 4
  store i32 %v3_113e0, i32* @r4, align 4
  %v1_113e4 = and i32 %v3_113dc, -4
  store i32 %v1_113e4, i32* @r6, align 4
  %v1_113e8 = add i32 %v1_113e4, -17
  %v2_113ec = add i32 %v1_113e8, %v3_113e0
  store i32 %arg2, i32* @r5, align 4
  %v2_113f8 = sub i32 %v2_113ec, %arg1
  store i32 %v2_113f8, i32* @r0, align 4
  store i32 %v3_113e0, i32* @r1, align 4
  %v0_11400 = call i32 @function_fb0c()
  %v1_11404 = add i32 %v0_11400, -1
  store i32 %v1_11404, i32* %r0.global-to-local, align 4
  %v0_11408 = load i32, i32* @r4, align 4
  %v2_11408 = mul i32 %v0_11408, %v1_11404
  store i32 %v2_11408, i32* %r7.global-to-local, align 4
  %v2_1140c = icmp eq i32 %v2_11408, 0
  store i1 %v2_1140c, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_11408, 1
  br i1 %tmp8, label %dec_label_pc_11474, label %dec_label_pc_11414

dec_label_pc_11414:                               ; preds = %dec_label_pc_113d4
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_11418 = call i32 @function_12858(i32 0)
  store i32 %v1_11418, i32* %r0.global-to-local, align 4
  %v0_1141c = load i32, i32* @r5, align 4
  %v1_1141c = add i32 %v0_1141c, 44
  %v2_1141c = inttoptr i32 %v1_1141c to i32*
  %v3_1141c = load i32, i32* %v2_1141c, align 4
  %v0_11420 = load i32, i32* @r6, align 4
  %v2_11420 = add i32 %v0_11420, %v3_1141c
  %v9_11424 = icmp eq i32 %v1_11418, %v2_11420
  store i1 %v9_11424, i1* @cpsr_z, align 1
  store i32 %v1_11418, i32* @r4, align 4
  br i1 %v9_11424, label %dec_label_pc_11430, label %dec_label_pc_11474

dec_label_pc_11430:                               ; preds = %dec_label_pc_11414
  %v0_11430 = load i32, i32* %r7.global-to-local, align 4
  %v1_11430 = sub i32 0, %v0_11430
  store i32 %v1_11430, i32* %r0.global-to-local, align 4
  %v1_11434 = call i32 @function_12858(i32 %v1_11430)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_1143c = call i32 @function_12858(i32 0)
  store i32 %v1_1143c, i32* %r0.global-to-local, align 4
  %v7_11440 = icmp eq i32 %v1_1143c, -1
  store i1 %v7_11440, i1* @cpsr_z, align 1
  br i1 %v7_11440, label %dec_label_pc_11474, label %dec_label_pc_11448

dec_label_pc_11448:                               ; preds = %dec_label_pc_11430
  %v0_11448 = load i32, i32* @r4, align 4
  %v2_11448 = sub i32 %v0_11448, %v1_1143c
  store i32 %v2_11448, i32* %r0.global-to-local, align 4
  %v9_11448 = icmp eq i32 %v0_11448, %v1_1143c
  store i1 %v9_11448, i1* @cpsr_z, align 1
  br i1 %v9_11448, label %dec_label_pc_11474, label %dec_label_pc_11450

dec_label_pc_11450:                               ; preds = %dec_label_pc_11448
  %v0_11450 = load i32, i32* @r5, align 4
  %v1_11450 = add i32 %v0_11450, 872
  %v2_11450 = inttoptr i32 %v1_11450 to i32*
  %v3_11450 = load i32, i32* %v2_11450, align 4
  %v1_11454 = load i32, i32* @r6, align 4
  %v2_11454 = sub i32 %v1_11454, %v2_11448
  store i32 %v2_11454, i32* %r2.global-to-local, align 4
  %v1_11458 = add i32 %v0_11450, 44
  %v2_11458 = inttoptr i32 %v1_11458 to i32*
  %v3_11458 = load i32, i32* %v2_11458, align 4
  store i32 %v3_11458, i32* %r1.global-to-local, align 4
  %v2_1145c = sub i32 %v3_11450, %v2_11448
  %v1_11460 = or i32 %v2_11454, 1
  store i32 %v1_11460, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_1145c, i32* %v2_11450, align 4
  %v0_1146c = load i32, i32* %r2.global-to-local, align 4
  %v1_1146c = load i32, i32* %r1.global-to-local, align 4
  %v2_1146c = add i32 %v1_1146c, 4
  %v3_1146c = inttoptr i32 %v2_1146c to i32*
  store i32 %v0_1146c, i32* %v3_1146c, align 4
  %v1_11480.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11478

dec_label_pc_11474:                               ; preds = %dec_label_pc_11414, %dec_label_pc_11448, %dec_label_pc_11430, %dec_label_pc_113d4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11478

dec_label_pc_11478:                               ; preds = %dec_label_pc_11450, %dec_label_pc_11474
  %v1_11480 = phi i32 [ %v1_11480.pre, %dec_label_pc_11450 ], [ 0, %dec_label_pc_11474 ]
  ret i32 %v1_11480

; uselistorder directives
  uselistorder i1 %v7_11440, { 1, 0 }
  uselistorder i32 %v1_1143c, { 2, 1, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @function_12858, { 6, 5, 4, 2, 1, 0, 3 }
  uselistorder i32 ()* @function_fb0c, { 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_11478, { 1, 0 }
  uselistorder label %dec_label_pc_11474, { 1, 2, 0, 3 }
}

define i32 @function_11484() local_unnamed_addr {
dec_label_pc_11484:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_11484 = load i32, i32* @r4, align 4
  store i32 %v3_11484, i32* %stack_var_-36, align 4
  %v0_11488 = load i32, i32* @r0, align 4
  %v1_11488 = inttoptr i32 %v0_11488 to i32*
  %v2_11488 = load i32, i32* %v1_11488, align 4
  store i32 %v2_11488, i32* %r3.global-to-local, align 4
  %v2_1148c = icmp eq i32 %v2_11488, 0
  store i32 %v0_11488, i32* @r4, align 4
  br i1 %v2_1148c, label %dec_label_pc_115c4.preheader, label %dec_label_pc_114a0

dec_label_pc_115c4.preheader:                     ; preds = %dec_label_pc_11484
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_115cc25 = add i32 %v0_11488, 52
  store i32 %v1_115cc25, i32* %r3.global-to-local, align 4
  %v2_115d426 = add i32 %v0_11488, 60
  %v3_115d427 = inttoptr i32 %v2_115d426 to i32*
  store i32 %v1_115cc25, i32* %v3_115d427, align 4
  %v0_115d828 = load i32, i32* %r3.global-to-local, align 4
  %v2_115d829 = add i32 %v0_115d828, 12
  %v3_115d830 = inttoptr i32 %v2_115d829 to i32*
  store i32 %v0_115d828, i32* %v3_115d830, align 4
  br label %dec_label_pc_115c4.dec_label_pc_115c4_crit_edge

dec_label_pc_114a0:                               ; preds = %dec_label_pc_11484
  %v1_114a0 = and i32 %v2_11488, -3
  %v3_114a4 = udiv i32 %v2_11488, 8
  store i32 %v3_114a4, i32* %r2.global-to-local, align 4
  store i32 %v1_114a0, i32* %v1_11488, align 4
  %v0_114ac = load i32, i32* @r0, align 4
  %v1_114ac = add i32 %v0_114ac, -4
  store i32 %v1_114ac, i32* %r3.global-to-local, align 4
  %v1_114b0 = load i32, i32* %r2.global-to-local, align 4
  %v4_114b0 = mul i32 %v1_114b0, 4
  %v5_114b0 = add i32 %v4_114b0, %v1_114ac
  store i32 %v5_114b0, i32* %sb.global-to-local, align 4
  %v1_114b4 = add i32 %v0_114ac, 52
  store i32 %v1_114b4, i32* %r7.global-to-local, align 4
  %v1_114b8 = add i32 %v0_114ac, 4
  store i32 %v1_114b8, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_114c0

dec_label_pc_114c0:                               ; preds = %dec_label_pc_115bc, %dec_label_pc_114a0
  %v1_115b410 = phi i32 [ %v1_115b4, %dec_label_pc_115bc ], [ %v5_114b0, %dec_label_pc_114a0 ]
  %v1_114cc = phi i32 [ %v1_115bc, %dec_label_pc_115bc ], [ %v1_114b8, %dec_label_pc_114a0 ]
  %v1_114c0 = inttoptr i32 %v1_114cc to i32*
  %v2_114c0 = load i32, i32* %v1_114c0, align 4
  store i32 %v2_114c0, i32* %r1.global-to-local, align 4
  %v2_114c4 = icmp eq i32 %v2_114c0, 0
  br i1 %v2_114c4, label %dec_label_pc_115b4, label %dec_label_pc_114cc

dec_label_pc_114cc:                               ; preds = %dec_label_pc_114c0
  %v0_114cc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_114cc, i32* %v1_114c0, align 4
  %v0_114d0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_114d0

dec_label_pc_114d0:                               ; preds = %dec_label_pc_115a8, %dec_label_pc_114cc
  %v0_114ec = phi i32 [ %v0_115a8, %dec_label_pc_115a8 ], [ %v0_114d0.pre, %dec_label_pc_114cc ]
  %v1_114d0 = add i32 %v0_114ec, 4
  %v2_114d0 = inttoptr i32 %v1_114d0 to i32*
  %v3_114d0 = load i32, i32* %v2_114d0, align 4
  store i32 %v3_114d0, i32* %r3.global-to-local, align 4
  %v1_114d4 = and i32 %v3_114d0, -2
  store i32 %v1_114d4, i32* %lr.global-to-local, align 4
  %v2_114d8 = add i32 %v1_114d4, %v0_114ec
  store i32 %v2_114d8, i32* @r0, align 4
  %v1_114dc = urem i32 %v3_114d0, 2
  %v2_114dc = icmp eq i32 %v1_114dc, 0
  %v1_114e0 = add i32 %v0_114ec, 8
  %v2_114e0 = inttoptr i32 %v1_114e0 to i32*
  %v3_114e0 = load i32, i32* %v2_114e0, align 4
  store i32 %v3_114e0, i32* %sl.global-to-local, align 4
  %v1_114e4 = add i32 %v2_114d8, 4
  %v2_114e4 = inttoptr i32 %v1_114e4 to i32*
  %v3_114e4 = load i32, i32* %v2_114e4, align 4
  store i32 %v3_114e4, i32* %r8.global-to-local, align 4
  br i1 %v2_114dc, label %dec_label_pc_114ec, label %dec_label_pc_11520

dec_label_pc_114ec:                               ; preds = %dec_label_pc_114d0
  %v1_114ec = inttoptr i32 %v0_114ec to i32*
  %v2_114ec = load i32, i32* %v1_114ec, align 4
  store i32 %v2_114ec, i32* %r5.global-to-local, align 4
  %v2_114f0 = sub i32 %v0_114ec, %v2_114ec
  store i32 %v2_114f0, i32* %r3.global-to-local, align 4
  %v1_114f4 = add i32 %v2_114f0, 8
  %v2_114f4 = inttoptr i32 %v1_114f4 to i32*
  %v3_114f4 = load i32, i32* %v2_114f4, align 4
  store i32 %v3_114f4, i32* %ip.global-to-local, align 4
  %v1_114f8 = add i32 %v3_114f4, 12
  %v2_114f8 = inttoptr i32 %v1_114f8 to i32*
  %v3_114f8 = load i32, i32* %v2_114f8, align 4
  store i32 %v3_114f8, i32* %r1.global-to-local, align 4
  %v9_114fc = icmp eq i32 %v3_114f8, %v2_114f0
  %v1_11500 = add i32 %v2_114f0, 12
  %v2_11500 = inttoptr i32 %v1_11500 to i32*
  %v3_11500 = load i32, i32* %v2_11500, align 4
  store i32 %v3_11500, i32* %r2.global-to-local, align 4
  br i1 %v9_114fc, label %dec_label_pc_11508, label %dec_label_pc_11564

dec_label_pc_11508:                               ; preds = %dec_label_pc_114ec
  %v1_11508 = add i32 %v3_11500, 8
  %v2_11508 = inttoptr i32 %v1_11508 to i32*
  %v3_11508 = load i32, i32* %v2_11508, align 4
  store i32 %v3_11508, i32* %r3.global-to-local, align 4
  %v9_1150c = icmp eq i32 %v3_11508, %v2_114f0
  br i1 %v9_1150c, label %dec_label_pc_11514, label %dec_label_pc_11564

dec_label_pc_11514:                               ; preds = %dec_label_pc_11508
  store i32 %v3_114f4, i32* %v2_11508, align 4
  %v0_11518 = load i32, i32* %r2.global-to-local, align 4
  %v1_11518 = load i32, i32* %ip.global-to-local, align 4
  %v2_11518 = add i32 %v1_11518, 12
  %v3_11518 = inttoptr i32 %v2_11518 to i32*
  store i32 %v0_11518, i32* %v3_11518, align 4
  %v0_1151c = load i32, i32* %lr.global-to-local, align 4
  %v1_1151c = load i32, i32* %r5.global-to-local, align 4
  %v2_1151c = add i32 %v1_1151c, %v0_1151c
  store i32 %v2_1151c, i32* %lr.global-to-local, align 4
  %v0_11524.pre = load i32, i32* @r0, align 4
  %v0_11528.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_11520

dec_label_pc_11520:                               ; preds = %dec_label_pc_114d0, %dec_label_pc_11514
  %v0_11598 = phi i32 [ %v1_114d4, %dec_label_pc_114d0 ], [ %v2_1151c, %dec_label_pc_11514 ]
  %v0_11528 = phi i32 [ %v3_114e4, %dec_label_pc_114d0 ], [ %v0_11528.pre, %dec_label_pc_11514 ]
  %v1_1153c = phi i32 [ %v2_114d8, %dec_label_pc_114d0 ], [ %v0_11524.pre, %dec_label_pc_11514 ]
  %v0_11520 = load i32, i32* @r4, align 4
  %v1_11520 = add i32 %v0_11520, 44
  %v2_11520 = inttoptr i32 %v1_11520 to i32*
  %v3_11520 = load i32, i32* %v2_11520, align 4
  store i32 %v3_11520, i32* %r3.global-to-local, align 4
  %v9_11524 = icmp eq i32 %v1_1153c, %v3_11520
  %v1_11528 = and i32 %v0_11528, -4
  store i32 %v1_11528, i32* %r5.global-to-local, align 4
  br i1 %v9_11524, label %dec_label_pc_11598, label %dec_label_pc_11530

dec_label_pc_11530:                               ; preds = %dec_label_pc_11520
  %v2_11530 = add i32 %v1_1153c, %v1_11528
  store i32 %v2_11530, i32* %r3.global-to-local, align 4
  %v1_11534 = add i32 %v2_11530, 4
  %v2_11534 = inttoptr i32 %v1_11534 to i32*
  %v3_11534 = load i32, i32* %v2_11534, align 4
  store i32 %v3_11534, i32* %r3.global-to-local, align 4
  %v1_11538 = urem i32 %v3_11534, 2
  %v2_11538 = icmp eq i32 %v1_11538, 0
  %v2_1153c = add i32 %v1_1153c, 4
  %v3_1153c = inttoptr i32 %v2_1153c to i32*
  store i32 %v1_11528, i32* %v3_1153c, align 4
  br i1 %v2_11538, label %dec_label_pc_11544, label %dec_label_pc_11530.dec_label_pc_11574_crit_edge

dec_label_pc_11530.dec_label_pc_11574_crit_edge:  ; preds = %dec_label_pc_11530
  %v0_11578.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_11574

dec_label_pc_11544:                               ; preds = %dec_label_pc_11530
  %v0_11544 = load i32, i32* @r0, align 4
  %v1_11544 = add i32 %v0_11544, 8
  %v2_11544 = inttoptr i32 %v1_11544 to i32*
  %v3_11544 = load i32, i32* %v2_11544, align 4
  store i32 %v3_11544, i32* %ip.global-to-local, align 4
  %v1_11548 = add i32 %v3_11544, 12
  %v2_11548 = inttoptr i32 %v1_11548 to i32*
  %v3_11548 = load i32, i32* %v2_11548, align 4
  store i32 %v3_11548, i32* %r3.global-to-local, align 4
  %v9_1154c = icmp eq i32 %v3_11548, %v0_11544
  %v1_11550 = add i32 %v0_11544, 12
  %v2_11550 = inttoptr i32 %v1_11550 to i32*
  %v3_11550 = load i32, i32* %v2_11550, align 4
  store i32 %v3_11550, i32* %r2.global-to-local, align 4
  br i1 %v9_1154c, label %dec_label_pc_11558, label %dec_label_pc_11564

dec_label_pc_11558:                               ; preds = %dec_label_pc_11544
  %v1_11558 = add i32 %v3_11550, 8
  %v2_11558 = inttoptr i32 %v1_11558 to i32*
  %v3_11558 = load i32, i32* %v2_11558, align 4
  store i32 %v3_11558, i32* %r3.global-to-local, align 4
  %v9_1155c = icmp eq i32 %v3_11558, %v0_11544
  br i1 %v9_1155c, label %dec_label_pc_11568, label %dec_label_pc_11564

dec_label_pc_11564:                               ; preds = %dec_label_pc_11544, %dec_label_pc_11508, %dec_label_pc_114ec, %dec_label_pc_11558
  %v0_11564 = call i32 @function_118b4()
  store i32 %v0_11564, i32* @r0, align 4
  %v0_11568.pre = load i32, i32* @ip, align 4
  %v1_11568.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_11568

dec_label_pc_11568:                               ; preds = %dec_label_pc_11558, %dec_label_pc_11564
  %v1_11568 = phi i32 [ %v3_11550, %dec_label_pc_11558 ], [ %v1_11568.pre, %dec_label_pc_11564 ]
  %v0_11568 = phi i32 [ %v3_11544, %dec_label_pc_11558 ], [ %v0_11568.pre, %dec_label_pc_11564 ]
  %v2_11568 = add i32 %v1_11568, 8
  %v3_11568 = inttoptr i32 %v2_11568 to i32*
  store i32 %v0_11568, i32* %v3_11568, align 4
  %v0_1156c = load i32, i32* %r2.global-to-local, align 4
  %v1_1156c = load i32, i32* %ip.global-to-local, align 4
  %v2_1156c = add i32 %v1_1156c, 12
  %v3_1156c = inttoptr i32 %v2_1156c to i32*
  store i32 %v0_1156c, i32* %v3_1156c, align 4
  %v0_11570 = load i32, i32* %lr.global-to-local, align 4
  %v1_11570 = load i32, i32* %r5.global-to-local, align 4
  %v2_11570 = add i32 %v1_11570, %v0_11570
  store i32 %v2_11570, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_11574

dec_label_pc_11574:                               ; preds = %dec_label_pc_11530.dec_label_pc_11574_crit_edge, %dec_label_pc_11568
  %v0_11578 = phi i32 [ %v0_11578.pre, %dec_label_pc_11530.dec_label_pc_11574_crit_edge ], [ %v2_11570, %dec_label_pc_11568 ]
  %v0_11574 = load i32, i32* %r7.global-to-local, align 4
  %v1_11574 = add i32 %v0_11574, 8
  %v2_11574 = inttoptr i32 %v1_11574 to i32*
  %v3_11574 = load i32, i32* %v2_11574, align 4
  store i32 %v3_11574, i32* %r2.global-to-local, align 4
  %v1_11578 = or i32 %v0_11578, 1
  store i32 %v1_11578, i32* %r3.global-to-local, align 4
  %v0_1157c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_1157c, i32* %v2_11574, align 4
  %v0_11580 = load i32, i32* %r1.global-to-local, align 4
  %v1_11580 = load i32, i32* %r2.global-to-local, align 4
  %v2_11580 = add i32 %v1_11580, 12
  %v3_11580 = inttoptr i32 %v2_11580 to i32*
  store i32 %v0_11580, i32* %v3_11580, align 4
  %v0_11584 = load i32, i32* %lr.global-to-local, align 4
  %v1_11584 = load i32, i32* %r1.global-to-local, align 4
  %v3_11584 = add i32 %v1_11584, %v0_11584
  %v4_11584 = inttoptr i32 %v3_11584 to i32*
  store i32 %v0_11584, i32* %v4_11584, align 4
  %v0_11588 = load i32, i32* %r3.global-to-local, align 4
  %v1_11588 = load i32, i32* %r1.global-to-local, align 4
  %v2_11588 = add i32 %v1_11588, 4
  %v3_11588 = inttoptr i32 %v2_11588 to i32*
  store i32 %v0_11588, i32* %v3_11588, align 4
  %v0_1158c = load i32, i32* %r2.global-to-local, align 4
  %v1_1158c = load i32, i32* %r1.global-to-local, align 4
  %v2_1158c = add i32 %v1_1158c, 8
  %v3_1158c = inttoptr i32 %v2_1158c to i32*
  store i32 %v0_1158c, i32* %v3_1158c, align 4
  %v0_11590 = load i32, i32* %r7.global-to-local, align 4
  %v1_11590 = load i32, i32* %r1.global-to-local, align 4
  %v2_11590 = add i32 %v1_11590, 12
  %v3_11590 = inttoptr i32 %v2_11590 to i32*
  store i32 %v0_11590, i32* %v3_11590, align 4
  br label %dec_label_pc_115a8

dec_label_pc_11598:                               ; preds = %dec_label_pc_11520
  %v2_11598 = add i32 %v1_11528, %v0_11598
  %v1_1159c = or i32 %v2_11598, 1
  store i32 %v1_1159c, i32* %r3.global-to-local, align 4
  %v1_115a0 = load i32, i32* %r1.global-to-local, align 4
  %v2_115a0 = add i32 %v1_115a0, 4
  %v3_115a0 = inttoptr i32 %v2_115a0 to i32*
  store i32 %v1_1159c, i32* %v3_115a0, align 4
  %v0_115a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_115a4 = load i32, i32* @r4, align 4
  %v2_115a4 = add i32 %v1_115a4, 44
  %v3_115a4 = inttoptr i32 %v2_115a4 to i32*
  store i32 %v0_115a4, i32* %v3_115a4, align 4
  br label %dec_label_pc_115a8

dec_label_pc_115a8:                               ; preds = %dec_label_pc_11574, %dec_label_pc_11598
  %v0_115a8 = load i32, i32* %sl.global-to-local, align 4
  %v2_115a8 = icmp eq i32 %v0_115a8, 0
  store i32 %v0_115a8, i32* %r1.global-to-local, align 4
  br i1 %v2_115a8, label %dec_label_pc_115b4.loopexit, label %dec_label_pc_114d0

dec_label_pc_115b4.loopexit:                      ; preds = %dec_label_pc_115a8
  %v0_115b4.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_115b4.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_115b4

dec_label_pc_115b4:                               ; preds = %dec_label_pc_115b4.loopexit, %dec_label_pc_114c0
  %v1_115b4 = phi i32 [ %v1_115b4.pre, %dec_label_pc_115b4.loopexit ], [ %v1_115b410, %dec_label_pc_114c0 ]
  %v0_115bc = phi i32 [ %v0_115b4.pre, %dec_label_pc_115b4.loopexit ], [ %v1_114cc, %dec_label_pc_114c0 ]
  %v9_115b4 = icmp eq i32 %v0_115bc, %v1_115b4
  br i1 %v9_115b4, label %dec_label_pc_1162c, label %dec_label_pc_115bc

dec_label_pc_115bc:                               ; preds = %dec_label_pc_115b4
  %v1_115bc = add i32 %v0_115bc, 4
  store i32 %v1_115bc, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_114c0

dec_label_pc_115c4.dec_label_pc_115c4_crit_edge:  ; preds = %dec_label_pc_115c4.preheader, %dec_label_pc_115c4.dec_label_pc_115c4_crit_edge
  %v0_115c4.pre = load i32, i32* @r4, align 4
  %v1_115c4.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_115c4 = mul i32 %v1_115c4.pre, 8
  %v5_115c4 = add i32 %v4_115c4, %v0_115c4.pre
  %v1_115c8 = add i32 %v1_115c4.pre, 1
  store i32 %v1_115c8, i32* %r2.global-to-local, align 4
  %v1_115cc = add i32 %v5_115c4, 44
  store i32 %v1_115cc, i32* %r3.global-to-local, align 4
  %v2_115d4 = add i32 %v5_115c4, 52
  %v3_115d4 = inttoptr i32 %v2_115d4 to i32*
  store i32 %v1_115cc, i32* %v3_115d4, align 4
  %v0_115d8 = load i32, i32* %r3.global-to-local, align 4
  %v2_115d8 = add i32 %v0_115d8, 12
  %v3_115d8 = inttoptr i32 %v2_115d8 to i32*
  store i32 %v0_115d8, i32* %v3_115d8, align 4
  %v7_115dc = icmp sgt i32 %v1_115c8, 95
  br i1 %v7_115dc, label %dec_label_pc_115e0, label %dec_label_pc_115c4.dec_label_pc_115c4_crit_edge

dec_label_pc_115e0:                               ; preds = %dec_label_pc_115c4.dec_label_pc_115c4_crit_edge
  %v0_115e0 = load i32, i32* @r4, align 4
  %v1_115e0 = inttoptr i32 %v0_115e0 to i32*
  %v2_115e0 = load i32, i32* %v1_115e0, align 4
  store i32 %v2_115e0, i32* %r2.global-to-local, align 4
  %v1_115e4 = add i32 %v0_115e0, 864
  %v2_115e4 = inttoptr i32 %v1_115e4 to i32*
  %v3_115e4 = load i32, i32* %v2_115e4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_115ec = urem i32 %v2_115e0, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_115f4 = or i32 %v3_115e4, 1
  store i32 %v1_115f4, i32* %r1.global-to-local, align 4
  %v1_115f8 = or i32 %v1_115ec, 72
  store i32 %v1_115f8, i32* %r2.global-to-local, align 4
  %v1_115fc = add i32 %v0_115e0, 52
  store i32 %v1_115fc, i32* %ip.global-to-local, align 4
  %v2_11600 = add i32 %v0_115e0, 840
  %v3_11600 = inttoptr i32 %v2_11600 to i32*
  store i32 0, i32* %v3_11600, align 4
  %v0_11604 = load i32, i32* %r3.global-to-local, align 4
  %v1_11604 = add i32 %v0_11604, 65536
  store i32 %v1_11604, i32* %r3.global-to-local, align 4
  %v0_11608 = load i32, i32* %r0.global-to-local, align 4
  %v1_11608 = load i32, i32* @r4, align 4
  %v2_11608 = add i32 %v1_11608, 836
  %v3_11608 = inttoptr i32 %v2_11608 to i32*
  store i32 %v0_11608, i32* %v3_11608, align 4
  %v0_1160c = load i32, i32* %r0.global-to-local, align 4
  %v1_1160c = load i32, i32* @r4, align 4
  %v2_1160c = add i32 %v1_1160c, 844
  %v3_1160c = inttoptr i32 %v2_1160c to i32*
  store i32 %v0_1160c, i32* %v3_1160c, align 4
  %v1_11610 = load i32, i32* @r4, align 4
  %v2_11610 = add i32 %v1_11610, 852
  %v3_11610 = inttoptr i32 %v2_11610 to i32*
  store i32 %v1_11604, i32* %v3_11610, align 4
  %v1_11614 = load i32, i32* @r4, align 4
  %v2_11614 = add i32 %v1_11614, 864
  %v3_11614 = inttoptr i32 %v2_11614 to i32*
  store i32 %v1_115f4, i32* %v3_11614, align 4
  %v1_11618 = load i32, i32* @r4, align 4
  %v2_11618 = inttoptr i32 %v1_11618 to i32*
  store i32 %v1_115f8, i32* %v2_11618, align 4
  %v0_1161c = load i32, i32* %ip.global-to-local, align 4
  %v1_1161c = load i32, i32* @r4, align 4
  %v2_1161c = add i32 %v1_1161c, 44
  %v3_1161c = inttoptr i32 %v2_1161c to i32*
  store i32 %v0_1161c, i32* %v3_1161c, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_11624 = call i32 @function_11c8c(i32 30, i32 %v1_115f4, i32 %v1_115f8, i32 %v1_11604)
  store i32 %v4_11624, i32* @r0, align 4
  %v1_11628 = load i32, i32* @r4, align 4
  %v2_11628 = add i32 %v1_11628, 860
  %v3_11628 = inttoptr i32 %v2_11628 to i32*
  store i32 %v4_11624, i32* %v3_11628, align 4
  br label %dec_label_pc_1162c

dec_label_pc_1162c:                               ; preds = %dec_label_pc_115b4, %dec_label_pc_115e0
  %v2_11630 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_11630, i32* @r4, align 4
  %v1_11634 = load i32, i32* @r0, align 4
  ret i32 %v1_11634

; uselistorder directives
  uselistorder i32 %v0_115e0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_115d8, { 1, 0 }
  uselistorder i32 %v1_115bc, { 1, 0 }
  uselistorder i32 %v0_115a8, { 0, 2, 1 }
  uselistorder i32 %v0_11584, { 1, 0 }
  uselistorder i32 %v1_114d4, { 1, 0, 2 }
  uselistorder i32 %v0_114ec, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_114ac, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 19 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 2, 11, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 5, 0, 3, 4, 2 }
  uselistorder label %dec_label_pc_1162c, { 1, 0 }
  uselistorder label %dec_label_pc_115c4.dec_label_pc_115c4_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_115a8, { 1, 0 }
  uselistorder label %dec_label_pc_11574, { 1, 0 }
  uselistorder label %dec_label_pc_11568, { 1, 0 }
  uselistorder label %dec_label_pc_11564, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11520, { 1, 0 }
}

define i32 @function_11638() local_unnamed_addr {
dec_label_pc_11638:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_11638 = load i32, i32* @r4, align 4
  %v6_11638 = load i32, i32* @r5, align 4
  %v9_11638 = load i32, i32* @r6, align 4
  %v12_11638 = load i32, i32* @r7, align 4
  %v18_11638 = load i32, i32* @lr, align 4
  %v0_11640 = load i32, i32* @r0, align 4
  store i32 %v0_11640, i32* @r6, align 4
  %v2_11640 = icmp eq i32 %v0_11640, 0
  %v2_11644 = ptrtoint i32* %stack_var_-40 to i32
  store i32 122896, i32* @r7, align 4
  br i1 %v2_11640, label %dec_label_pc_1184c, label %dec_label_pc_11650

dec_label_pc_11650:                               ; preds = %dec_label_pc_11638
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_11654 = load i32, i32* inttoptr (i32 122964 to i32*), align 4
  store i32 %v4_11654, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_11654, i32* %r2.global-to-local, align 4
  %v4_11660 = load i32, i32* inttoptr (i32 122932 to i32*), align 4
  store i32 %v4_11660, i32* %r1.global-to-local, align 4
  store i32 %v2_11644, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_1166c = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  store i32 %v4_1166c, i32* %ip.global-to-local, align 4
  store i32 71288, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1166c)
  %v0_11678 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11678, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_11680 = load i32, i32* @r7, align 4
  %v2_11680 = add i32 %v0_11680, 16
  %v3_11680 = inttoptr i32 %v2_11680 to i32*
  %v4_11680 = load i32, i32* %v3_11680, align 4
  store i32 %v4_11680, i32* %ip.global-to-local, align 4
  store i32 71308, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11680)
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_11690 = load i32, i32* @r7, align 4
  %v2_11690 = add i32 %v0_11690, 32
  %v3_11690 = inttoptr i32 %v2_11690 to i32*
  %v4_11690 = load i32, i32* %v3_11690, align 4
  store i32 %v4_11690, i32* @lr, align 4
  %v0_11694 = load i32, i32* @r6, align 4
  %v1_11694 = add i32 %v0_11694, -4
  %v2_11694 = inttoptr i32 %v1_11694 to i32*
  %v3_11694 = load i32, i32* %v2_11694, align 4
  store i32 %v3_11694, i32* %r2.global-to-local, align 4
  %v1_11698 = inttoptr i32 %v4_11690 to i32*
  %v2_11698 = load i32, i32* %v1_11698, align 4
  store i32 %v2_11698, i32* %r3.global-to-local, align 4
  %v1_1169c = and i32 %v3_11694, -4
  store i32 %v1_1169c, i32* %ip.global-to-local, align 4
  %v1_116a0 = add i32 %v0_11694, -8
  store i32 %v1_116a0, i32* @r5, align 4
  store i32 %v1_116a0, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_1169c, %v2_11698
  br i1 %tmp, label %dec_label_pc_116d0, label %dec_label_pc_116b0

dec_label_pc_116b0:                               ; preds = %dec_label_pc_11650
  %v1_116b0 = or i32 %v2_11698, 3
  store i32 %v1_116b0, i32* %r3.global-to-local, align 4
  store i32 %v1_116b0, i32* %v1_11698, align 4
  %v3_116b4 = load i32, i32* @lr, align 4
  %v4_116b4 = add i32 %v3_116b4, -8
  store i32 %v4_116b4, i32* %lr.global-to-local, align 4
  %v0_116b8 = load i32, i32* %ip.global-to-local, align 4
  %v3_116b8 = udiv i32 %v0_116b8, 8
  store i32 %v3_116b8, i32* %r1.global-to-local, align 4
  %v1_116bc = add i32 %v3_116b4, -4
  store i32 %v1_116bc, i32* %r2.global-to-local, align 4
  %v4_116c0 = mul nuw i32 %v3_116b8, 4
  %v5_116c0 = add i32 %v4_116c0, %v1_116bc
  %v6_116c0 = inttoptr i32 %v5_116c0 to i32*
  %v7_116c0 = load i32, i32* %v6_116c0, align 4
  store i32 %v7_116c0, i32* %r3.global-to-local, align 4
  %v1_116c4 = load i32, i32* @r5, align 4
  %v2_116c4 = add i32 %v1_116c4, 8
  %v3_116c4 = inttoptr i32 %v2_116c4 to i32*
  store i32 %v7_116c0, i32* %v3_116c4, align 4
  %v0_116c8 = load i32, i32* @r5, align 4
  %v1_116c8 = load i32, i32* %r2.global-to-local, align 4
  %v2_116c8 = load i32, i32* %r1.global-to-local, align 4
  %v5_116c8 = mul i32 %v2_116c8, 4
  %v6_116c8 = add i32 %v5_116c8, %v1_116c8
  %v7_116c8 = inttoptr i32 %v6_116c8 to i32*
  store i32 %v0_116c8, i32* %v7_116c8, align 4
  br label %dec_label_pc_11834

dec_label_pc_116d0:                               ; preds = %dec_label_pc_11650
  %v1_116d0 = and i32 %v3_11694, 2
  %v2_116d0 = icmp eq i32 %v1_116d0, 0
  br i1 %v2_116d0, label %dec_label_pc_116d8, label %dec_label_pc_1180c

dec_label_pc_116d8:                               ; preds = %dec_label_pc_116d0
  %v1_116d8 = or i32 %v2_11698, 1
  store i32 %v1_116d8, i32* %r3.global-to-local, align 4
  store i32 %v1_116d8, i32* %v1_11698, align 4
  %v0_116e0 = load i32, i32* @r6, align 4
  %v1_116e0 = add i32 %v0_116e0, -4
  %v2_116e0 = inttoptr i32 %v1_116e0 to i32*
  %v3_116e0 = load i32, i32* %v2_116e0, align 4
  store i32 %v3_116e0, i32* %r3.global-to-local, align 4
  %v0_116e4 = load i32, i32* @r5, align 4
  %v1_116e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_116e4 = add i32 %v1_116e4, %v0_116e4
  store i32 %v2_116e4, i32* %lr.global-to-local, align 4
  %v1_116e8 = urem i32 %v3_116e0, 2
  %v2_116e8 = icmp eq i32 %v1_116e8, 0
  %v1_116ec = add i32 %v2_116e4, 4
  %v2_116ec = inttoptr i32 %v1_116ec to i32*
  %v3_116ec = load i32, i32* %v2_116ec, align 4
  store i32 %v3_116ec, i32* %r8.global-to-local, align 4
  br i1 %v2_116e8, label %dec_label_pc_116f4, label %dec_label_pc_11728

dec_label_pc_116f4:                               ; preds = %dec_label_pc_116d8
  %v1_116f4 = add i32 %v0_116e0, -8
  %v2_116f4 = inttoptr i32 %v1_116f4 to i32*
  %v3_116f4 = load i32, i32* %v2_116f4, align 4
  store i32 %v3_116f4, i32* %r1.global-to-local, align 4
  %v2_116f8 = sub i32 %v0_116e4, %v3_116f4
  store i32 %v2_116f8, i32* %r3.global-to-local, align 4
  %v1_116fc = add i32 %v2_116f8, 8
  %v2_116fc = inttoptr i32 %v1_116fc to i32*
  %v3_116fc = load i32, i32* %v2_116fc, align 4
  store i32 %v3_116fc, i32* %r2.global-to-local, align 4
  %v1_11700 = add i32 %v3_116fc, 12
  %v2_11700 = inttoptr i32 %v1_11700 to i32*
  %v3_11700 = load i32, i32* %v2_11700, align 4
  store i32 %v3_11700, i32* %r4.global-to-local, align 4
  %v9_11704 = icmp eq i32 %v3_11700, %v2_116f8
  %v1_11708 = add i32 %v2_116f8, 12
  %v2_11708 = inttoptr i32 %v1_11708 to i32*
  %v3_11708 = load i32, i32* %v2_11708, align 4
  store i32 %v3_11708, i32* %r0.global-to-local, align 4
  br i1 %v9_11704, label %dec_label_pc_11710, label %dec_label_pc_11774

dec_label_pc_11710:                               ; preds = %dec_label_pc_116f4
  %v1_11710 = add i32 %v3_11708, 8
  %v2_11710 = inttoptr i32 %v1_11710 to i32*
  %v3_11710 = load i32, i32* %v2_11710, align 4
  store i32 %v3_11710, i32* %r3.global-to-local, align 4
  %v9_11714 = icmp eq i32 %v3_11710, %v2_116f8
  br i1 %v9_11714, label %dec_label_pc_1171c, label %dec_label_pc_11774

dec_label_pc_1171c:                               ; preds = %dec_label_pc_11710
  store i32 %v3_116fc, i32* %v2_11710, align 4
  %v0_11720 = load i32, i32* %r0.global-to-local, align 4
  %v1_11720 = load i32, i32* %r2.global-to-local, align 4
  %v2_11720 = add i32 %v1_11720, 12
  %v3_11720 = inttoptr i32 %v2_11720 to i32*
  store i32 %v0_11720, i32* %v3_11720, align 4
  %v0_11724 = load i32, i32* %ip.global-to-local, align 4
  %v1_11724 = load i32, i32* %r1.global-to-local, align 4
  %v2_11724 = add i32 %v1_11724, %v0_11724
  store i32 %v2_11724, i32* %ip.global-to-local, align 4
  %v0_11734.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_11738.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_11728

dec_label_pc_11728:                               ; preds = %dec_label_pc_116d8, %dec_label_pc_1171c
  %v0_117b4 = phi i32 [ %v1_116e4, %dec_label_pc_116d8 ], [ %v2_11724, %dec_label_pc_1171c ]
  %v0_11738 = phi i32 [ %v3_116ec, %dec_label_pc_116d8 ], [ %v0_11738.pre, %dec_label_pc_1171c ]
  %v1_1174c = phi i32 [ %v2_116e4, %dec_label_pc_116d8 ], [ %v0_11734.pre, %dec_label_pc_1171c ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_1172c = load i32, i32* @r7, align 4
  %v2_1172c = add i32 %v0_1172c, 32
  %v3_1172c = inttoptr i32 %v2_1172c to i32*
  %v4_1172c = load i32, i32* %v3_1172c, align 4
  store i32 %v4_1172c, i32* %r2.global-to-local, align 4
  %v1_11730 = add i32 %v4_1172c, 44
  %v2_11730 = inttoptr i32 %v1_11730 to i32*
  %v3_11730 = load i32, i32* %v2_11730, align 4
  store i32 %v3_11730, i32* %r3.global-to-local, align 4
  %v9_11734 = icmp eq i32 %v1_1174c, %v3_11730
  %v1_11738 = and i32 %v0_11738, -4
  store i32 %v1_11738, i32* %r0.global-to-local, align 4
  br i1 %v9_11734, label %dec_label_pc_117b4, label %dec_label_pc_11740

dec_label_pc_11740:                               ; preds = %dec_label_pc_11728
  %v2_11740 = add i32 %v1_1174c, %v1_11738
  store i32 %v2_11740, i32* %r3.global-to-local, align 4
  %v1_11744 = add i32 %v2_11740, 4
  %v2_11744 = inttoptr i32 %v1_11744 to i32*
  %v3_11744 = load i32, i32* %v2_11744, align 4
  store i32 %v3_11744, i32* %r3.global-to-local, align 4
  %v1_11748 = urem i32 %v3_11744, 2
  %v2_11748 = icmp eq i32 %v1_11748, 0
  %v2_1174c = add i32 %v1_1174c, 4
  %v3_1174c = inttoptr i32 %v2_1174c to i32*
  store i32 %v1_11738, i32* %v3_1174c, align 4
  br i1 %v2_11748, label %dec_label_pc_11754, label %dec_label_pc_11740.dec_label_pc_11784_crit_edge

dec_label_pc_11740.dec_label_pc_11784_crit_edge:  ; preds = %dec_label_pc_11740
  %v0_11794.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11784

dec_label_pc_11754:                               ; preds = %dec_label_pc_11740
  %v0_11754 = load i32, i32* %lr.global-to-local, align 4
  %v1_11754 = add i32 %v0_11754, 8
  %v2_11754 = inttoptr i32 %v1_11754 to i32*
  %v3_11754 = load i32, i32* %v2_11754, align 4
  store i32 %v3_11754, i32* %r1.global-to-local, align 4
  %v1_11758 = add i32 %v3_11754, 12
  %v2_11758 = inttoptr i32 %v1_11758 to i32*
  %v3_11758 = load i32, i32* %v2_11758, align 4
  store i32 %v3_11758, i32* %r3.global-to-local, align 4
  %v9_1175c = icmp eq i32 %v3_11758, %v0_11754
  %v1_11760 = add i32 %v0_11754, 12
  %v2_11760 = inttoptr i32 %v1_11760 to i32*
  %v3_11760 = load i32, i32* %v2_11760, align 4
  store i32 %v3_11760, i32* %r2.global-to-local, align 4
  br i1 %v9_1175c, label %dec_label_pc_11768, label %dec_label_pc_11774

dec_label_pc_11768:                               ; preds = %dec_label_pc_11754
  %v1_11768 = add i32 %v3_11760, 8
  %v2_11768 = inttoptr i32 %v1_11768 to i32*
  %v3_11768 = load i32, i32* %v2_11768, align 4
  store i32 %v3_11768, i32* %r3.global-to-local, align 4
  %v9_1176c = icmp eq i32 %v3_11768, %v0_11754
  br i1 %v9_1176c, label %dec_label_pc_11778, label %dec_label_pc_11774

dec_label_pc_11774:                               ; preds = %dec_label_pc_11754, %dec_label_pc_11710, %dec_label_pc_116f4, %dec_label_pc_11768
  %v0_11774 = call i32 @function_118b4()
  store i32 %v0_11774, i32* %r0.global-to-local, align 4
  %v0_11778.pre = load i32, i32* @r1, align 4
  %v1_11778.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_11778

dec_label_pc_11778:                               ; preds = %dec_label_pc_11768, %dec_label_pc_11774
  %v1_11778 = phi i32 [ %v3_11760, %dec_label_pc_11768 ], [ %v1_11778.pre, %dec_label_pc_11774 ]
  %v0_11778 = phi i32 [ %v3_11754, %dec_label_pc_11768 ], [ %v0_11778.pre, %dec_label_pc_11774 ]
  %v2_11778 = add i32 %v1_11778, 8
  %v3_11778 = inttoptr i32 %v2_11778 to i32*
  store i32 %v0_11778, i32* %v3_11778, align 4
  %v0_1177c = load i32, i32* %r2.global-to-local, align 4
  %v1_1177c = load i32, i32* %r1.global-to-local, align 4
  %v2_1177c = add i32 %v1_1177c, 12
  %v3_1177c = inttoptr i32 %v2_1177c to i32*
  store i32 %v0_1177c, i32* %v3_1177c, align 4
  %v0_11780 = load i32, i32* %ip.global-to-local, align 4
  %v1_11780 = load i32, i32* %r0.global-to-local, align 4
  %v2_11780 = add i32 %v1_11780, %v0_11780
  store i32 %v2_11780, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11784

dec_label_pc_11784:                               ; preds = %dec_label_pc_11740.dec_label_pc_11784_crit_edge, %dec_label_pc_11778
  %v0_11794 = phi i32 [ %v0_11794.pre, %dec_label_pc_11740.dec_label_pc_11784_crit_edge ], [ %v2_11780, %dec_label_pc_11778 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_11788 = load i32, i32* @r7, align 4
  %v2_11788 = add i32 %v0_11788, 32
  %v3_11788 = inttoptr i32 %v2_11788 to i32*
  %v4_11788 = load i32, i32* %v3_11788, align 4
  %v1_1178c = add i32 %v4_11788, 52
  store i32 %v1_1178c, i32* %r3.global-to-local, align 4
  %v1_11790 = add i32 %v4_11788, 60
  %v2_11790 = inttoptr i32 %v1_11790 to i32*
  %v3_11790 = load i32, i32* %v2_11790, align 4
  store i32 %v3_11790, i32* %r1.global-to-local, align 4
  %v1_11794 = or i32 %v0_11794, 1
  store i32 %v1_11794, i32* %r2.global-to-local, align 4
  %v1_11798 = load i32, i32* %r4.global-to-local, align 4
  %v2_11798 = add i32 %v1_11798, 12
  %v3_11798 = inttoptr i32 %v2_11798 to i32*
  store i32 %v1_1178c, i32* %v3_11798, align 4
  %v0_1179c = load i32, i32* %r1.global-to-local, align 4
  %v1_1179c = load i32, i32* %r4.global-to-local, align 4
  %v2_1179c = add i32 %v1_1179c, 8
  %v3_1179c = inttoptr i32 %v2_1179c to i32*
  store i32 %v0_1179c, i32* %v3_1179c, align 4
  %v0_117a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_117a0 = load i32, i32* %r4.global-to-local, align 4
  %v2_117a0 = add i32 %v1_117a0, 4
  %v3_117a0 = inttoptr i32 %v2_117a0 to i32*
  store i32 %v0_117a0, i32* %v3_117a0, align 4
  %v0_117a4 = load i32, i32* %ip.global-to-local, align 4
  %v1_117a4 = load i32, i32* %r4.global-to-local, align 4
  %v3_117a4 = add i32 %v1_117a4, %v0_117a4
  %v4_117a4 = inttoptr i32 %v3_117a4 to i32*
  store i32 %v0_117a4, i32* %v4_117a4, align 4
  %v0_117a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_117a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_117a8 = add i32 %v1_117a8, 12
  %v3_117a8 = inttoptr i32 %v2_117a8 to i32*
  store i32 %v0_117a8, i32* %v3_117a8, align 4
  %v0_117ac = load i32, i32* %r4.global-to-local, align 4
  %v1_117ac = load i32, i32* %r3.global-to-local, align 4
  %v2_117ac = add i32 %v1_117ac, 8
  %v3_117ac = inttoptr i32 %v2_117ac to i32*
  store i32 %v0_117ac, i32* %v3_117ac, align 4
  br label %dec_label_pc_117c4

dec_label_pc_117b4:                               ; preds = %dec_label_pc_11728
  %v2_117b4 = add i32 %v1_11738, %v0_117b4
  store i32 %v2_117b4, i32* %ip.global-to-local, align 4
  %v1_117b8 = or i32 %v2_117b4, 1
  store i32 %v1_117b8, i32* %r3.global-to-local, align 4
  %v0_117bc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_117bc, i32* %v2_11730, align 4
  %v0_117c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_117c0 = load i32, i32* %r4.global-to-local, align 4
  %v2_117c0 = add i32 %v1_117c0, 4
  %v3_117c0 = inttoptr i32 %v2_117c0 to i32*
  store i32 %v0_117c0, i32* %v3_117c0, align 4
  br label %dec_label_pc_117c4

dec_label_pc_117c4:                               ; preds = %dec_label_pc_11784, %dec_label_pc_117b4
  %v0_117c4 = load i32, i32* %ip.global-to-local, align 4
  %v3_117c8 = icmp ult i32 %v0_117c4, 131070
  br i1 %v3_117c8, label %dec_label_pc_11834, label %dec_label_pc_117cc

dec_label_pc_117cc:                               ; preds = %dec_label_pc_117c4
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_117d0 = load i32, i32* @r7, align 4
  %v2_117d0 = add i32 %v0_117d0, 32
  %v3_117d0 = inttoptr i32 %v2_117d0 to i32*
  %v4_117d0 = load i32, i32* %v3_117d0, align 4
  store i32 %v4_117d0, i32* @r4, align 4
  %v1_117d4 = inttoptr i32 %v4_117d0 to i32*
  %v2_117d4 = load i32, i32* %v1_117d4, align 4
  store i32 %v2_117d4, i32* %r3.global-to-local, align 4
  %v1_117d8 = and i32 %v2_117d4, 2
  %v2_117d8 = icmp eq i32 %v1_117d8, 0
  br i1 %v2_117d8, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_117cc
  store i32 %v4_117d0, i32* %r0.global-to-local, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_117cc, %bb
  store i32 71652, i32* @lr, align 4
  %v1_117e0 = xor i1 %v2_117d8, true
  call void @__pseudo_cond_branch(i1 %v1_117e0, i32 ptrtoint (i32* @global_var_11484.621 to i32))
  %v0_117e4 = load i32, i32* @r4, align 4
  %v1_117e4 = add i32 %v0_117e4, 44
  %v2_117e4 = inttoptr i32 %v1_117e4 to i32*
  %v3_117e4 = load i32, i32* %v2_117e4, align 4
  store i32 %v3_117e4, i32* %r3.global-to-local, align 4
  %v1_117e8 = add i32 %v3_117e4, 4
  %v2_117e8 = inttoptr i32 %v1_117e8 to i32*
  %v3_117e8 = load i32, i32* %v2_117e8, align 4
  store i32 %v3_117e8, i32* %r3.global-to-local, align 4
  %v1_117ec = add i32 %v0_117e4, 836
  %v2_117ec = inttoptr i32 %v1_117ec to i32*
  %v3_117ec = load i32, i32* %v2_117ec, align 4
  store i32 %v3_117ec, i32* %r2.global-to-local, align 4
  %v1_117f0 = and i32 %v3_117e8, -4
  store i32 %v1_117f0, i32* %r3.global-to-local, align 4
  %v3_117f4 = icmp ult i32 %v1_117f0, %v3_117ec
  br i1 %v3_117f4, label %dec_label_pc_11834, label %dec_label_pc_117fc

dec_label_pc_117fc:                               ; preds = %bb15
  store i32 %v0_117e4, i32* %r1.global-to-local, align 4
  %v1_11800 = add i32 %v0_117e4, 840
  %v2_11800 = inttoptr i32 %v1_11800 to i32*
  %v3_11800 = load i32, i32* %v2_11800, align 4
  store i32 %v3_11800, i32* %r0.global-to-local, align 4
  %v2_11804 = call i32 @function_113d4(i32 %v3_11800, i32 %v0_117e4)
  store i32 %v2_11804, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11834

dec_label_pc_1180c:                               ; preds = %dec_label_pc_116d0
  %v2_1180c = inttoptr i32 %v1_116a0 to i32*
  %v3_1180c = load i32, i32* %v2_1180c, align 4
  store i32 %v3_1180c, i32* %r0.global-to-local, align 4
  %v1_11810 = add i32 %v4_11690, 848
  %v2_11810 = inttoptr i32 %v1_11810 to i32*
  %v3_11810 = load i32, i32* %v2_11810, align 4
  store i32 %v3_11810, i32* %r2.global-to-local, align 4
  %v1_11814 = add i32 %v4_11690, 868
  %v2_11814 = inttoptr i32 %v1_11814 to i32*
  %v3_11814 = load i32, i32* %v2_11814, align 4
  %v2_11818 = add i32 %v3_1180c, %v1_1169c
  store i32 %v2_11818, i32* %r1.global-to-local, align 4
  %v1_1181c = add i32 %v3_11810, -1
  store i32 %v1_1181c, i32* %r2.global-to-local, align 4
  %v2_11820 = sub i32 %v3_11814, %v2_11818
  store i32 %v2_11820, i32* %r3.global-to-local, align 4
  store i32 %v2_11820, i32* %v2_11814, align 4
  %v1_11828 = load i32, i32* @lr, align 4
  %v2_11828 = add i32 %v1_11828, 848
  %v3_11828 = inttoptr i32 %v2_11828 to i32*
  store i32 %v1_1181c, i32* %v3_11828, align 4
  %v0_1182c = load i32, i32* %r0.global-to-local, align 4
  %v1_1182c = load i32, i32* @r5, align 4
  %v2_1182c = sub i32 %v1_1182c, %v0_1182c
  store i32 %v2_1182c, i32* %r0.global-to-local, align 4
  %v4_11830 = call i32 @function_12904(i32 %v2_1182c, i32 %v2_11818, i32 %v1_1181c, i32 %v2_11820)
  store i32 %v4_11830, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11834

dec_label_pc_11834:                               ; preds = %bb15, %dec_label_pc_117c4, %dec_label_pc_117fc, %dec_label_pc_116b0, %dec_label_pc_1180c
  store i32 %v2_11644, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_11840 = load i32, i32* @r7, align 4
  %v2_11840 = add i32 %v0_11840, 24
  %v3_11840 = inttoptr i32 %v2_11840 to i32*
  %v4_11840 = load i32, i32* %v3_11840, align 4
  store i32 %v4_11840, i32* @ip, align 4
  store i32 71756, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11840)
  br label %dec_label_pc_1184c

dec_label_pc_1184c:                               ; preds = %dec_label_pc_11638, %dec_label_pc_11834
  store i32 %v3_11638, i32* @r4, align 4
  store i32 %v6_11638, i32* @r5, align 4
  store i32 %v9_11638, i32* @r6, align 4
  store i32 %v12_11638, i32* @r7, align 4
  store i32 %v18_11638, i32* @lr, align 4
  ret i32 %v2_11644

; uselistorder directives
  uselistorder i32 %v0_117e4, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_117a4, { 1, 0 }
  uselistorder i32 %v1_116e4, { 1, 0 }
  uselistorder i32 %v0_116e4, { 1, 0 }
  uselistorder i32 %v3_116b8, { 1, 0 }
  uselistorder i32 %v1_1169c, { 1, 0, 2 }
  uselistorder i32 %v2_11698, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11690, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11640, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 5, 1, 2, 3, 4, 0, 6, 7, 13, 14, 8, 9, 10, 12, 11 }
  uselistorder i32* %ip.global-to-local, { 4, 0, 5, 1, 6, 3, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_1184c, { 1, 0 }
  uselistorder label %dec_label_pc_11834, { 4, 2, 0, 1, 3 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_117c4, { 1, 0 }
  uselistorder label %dec_label_pc_11784, { 1, 0 }
  uselistorder label %dec_label_pc_11778, { 1, 0 }
  uselistorder label %dec_label_pc_11774, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11728, { 1, 0 }
}

define i32 @function_1185c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1185c:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_1185c = load i1, i1* @cpsr_z, align 1
  %v2_1185c = load i32, i32* @r4, align 4
  br i1 %v0_1185c, label %bb, label %dec_label_pc_1185c..thread4_crit_edge

dec_label_pc_1185c..thread4_crit_edge:            ; preds = %dec_label_pc_1185c
  %v0_11888.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_1185c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_1185c..thread4_crit_edge, %bb
  %v0_11888 = phi i32 [ %v0_11888.pre, %dec_label_pc_1185c..thread4_crit_edge ], [ 0, %bb ]
  store i32 %v2_1185c, i32* %stack_var_-12, align 4
  %v6_11874 = load i32, i32* @r5, align 4
  %v9_11874 = load i32, i32* @lr, align 4
  %v4_11884 = load i32, i32* inttoptr (i32 122928 to i32*), align 16
  store i32 %v4_11884, i32* @r5, align 4
  store i32 %v0_11888, i32* @r4, align 4
  store i32 %v4_11884, i32* @r0, align 4
  %v0_11894 = call i32 @function_11484()
  %v0_11898 = load i32, i32* @r4, align 4
  store i32 %v0_11898, i32* %r0.global-to-local, align 4
  %v0_1189c = load i32, i32* @r5, align 4
  %v2_118a4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_118a4, i32* @r4, align 4
  store i32 %v6_11874, i32* @r5, align 4
  store i32 %v9_11874, i32* @lr, align 4
  %v2_118a8 = call i32 @function_113d4(i32 %v0_11898, i32 %v0_1189c)
  store i32 %v2_118a8, i32* %r0.global-to-local, align 4
  %v0_118ac = load i1, i1* @cpsr_z, align 1
  br i1 %v0_118ac, label %bb13, label %.thread5

bb13:                                             ; preds = %.thread4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread4, %bb13
  %v4_118b0 = phi i32 [ %v2_118a8, %.thread4 ], [ 0, %bb13 ]
  ret i32 %v4_118b0

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 0, 1 }
  uselistorder i32 (i32, i32)* @function_113d4, { 1, 0 }
  uselistorder i32 ()* @function_11484, { 3, 2, 1, 0 }
  uselistorder i32* inttoptr (i32 122928 to i32*), { 15, 5, 6, 7, 8, 9, 4, 10, 3, 11, 0, 12, 13, 2, 14, 1 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_118b4() local_unnamed_addr {
dec_label_pc_118b4:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 122896, i32* @r5, align 4
  %v4_118cc = load i32, i32* inttoptr (i32 122912 to i32*), align 32
  store i32 71896, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_118cc)
  %v2_118e8 = ptrtoint i32* %stack_var_-8 to i32
  store i32 32, i32* %stack_var_-8, align 4
  %v3_118f4 = call i32 @function_ffd0(i32 1, i32 %v2_118e8, i32 0)
  %v4_118fc = load i32, i32* @global_var_1e2a4.629, align 4
  %v2_11900 = icmp eq i32 %v4_118fc, 0
  br i1 %v2_11900, label %dec_label_pc_11908, label %dec_label_pc_11948

dec_label_pc_11908:                               ; preds = %dec_label_pc_118b4
  store i32 1, i32* @global_var_1e2a4.629, align 4
  br label %dec_label_pc_11910

dec_label_pc_11910:                               ; preds = %dec_label_pc_11958, %dec_label_pc_11908
  %v0_11914 = load i32, i32* @r5, align 4
  %v2_11914 = add i32 %v0_11914, 160
  store i32 %v2_11914, i32* @r4, align 4
  %v2_11920 = add i32 %v0_11914, 36
  %v3_11920 = inttoptr i32 %v2_11920 to i32*
  %v4_11920 = load i32, i32* %v3_11920, align 4
  call void @__pseudo_branch(i32 %v4_11920)
  %v1_11930 = call i32 @function_103bc(i32 6)
  %v0_1193c = load i32, i32* @r5, align 4
  %v2_1193c = add i32 %v0_1193c, 16
  %v3_1193c = inttoptr i32 %v2_1193c to i32*
  %v4_1193c = load i32, i32* %v3_1193c, align 4
  store i32 72008, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1193c)
  %v4_1194c.pre = load i32, i32* @global_var_1e2a4.629, align 4
  br label %dec_label_pc_11948

dec_label_pc_11948:                               ; preds = %dec_label_pc_118b4, %dec_label_pc_11910
  %v0_1195c = phi i32 [ %v4_118fc, %dec_label_pc_118b4 ], [ %v4_1194c.pre, %dec_label_pc_11910 ]
  %v7_11950 = icmp eq i32 %v0_1195c, 1
  br i1 %v7_11950, label %dec_label_pc_11958, label %dec_label_pc_11994

dec_label_pc_11958:                               ; preds = %dec_label_pc_11948
  %v2_11958 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_11958, i32* @r4, align 4
  store i32 2, i32* @global_var_1e2a4.629, align 4
  store i32 20, i32* @r2, align 4
  %v2_11970 = bitcast i32* %stack_var_-28 to i8*
  %v3_11970 = call i32 @function_143c0(i8* %v2_11970, i32 0)
  %v3_1198c = call i32 @function_12720(i32 6, i32 %v2_11958, i32 0)
  br label %dec_label_pc_11910

dec_label_pc_11994:                               ; preds = %dec_label_pc_11948
  %v7_11994 = icmp eq i32 %v0_1195c, 2
  br i1 %v7_11994, label %dec_label_pc_1199c, label %dec_label_pc_119a8

dec_label_pc_1199c:                               ; preds = %dec_label_pc_11994
  store i32 3, i32* @global_var_1e2a4.629, align 4
  %v0_119a4 = call i32 @function_118b4()
  %v4_119a8.pre = load i32, i32* @global_var_1e2a4.629, align 4
  br label %dec_label_pc_119a8

dec_label_pc_119a8:                               ; preds = %dec_label_pc_11994, %dec_label_pc_1199c
  %v1_119b0 = phi i32 [ %v0_1195c, %dec_label_pc_11994 ], [ %v4_119a8.pre, %dec_label_pc_1199c ]
  %v7_119ac = icmp eq i32 %v1_119b0, 3
  br i1 %v7_119ac, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_119a8
  store i32 4, i32* @global_var_1e2a4.629, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_119a8, %bb
  call void @__pseudo_cond_branch(i1 %v7_119ac, i32 ptrtoint (i32* @global_var_129f4.631 to i32))
  br label %dec_label_pc_119c0

dec_label_pc_119c0:                               ; preds = %dec_label_pc_119c0, %.thread1
  %v0_119c0 = call i32 @function_118b4()
  br label %dec_label_pc_119c0

; uselistorder directives
  uselistorder i32 ()* @function_118b4, { 1, 0, 5, 4, 6, 3, 2 }
  uselistorder i32 6, { 12, 13, 61, 3, 28, 29, 14, 24, 15, 25, 16, 26, 17, 27, 1, 30, 18, 31, 0, 32, 33, 34, 4, 35, 36, 37, 38, 5, 39, 40, 41, 42, 6, 43, 7, 44, 45, 19, 46, 8, 47, 48, 49, 20, 50, 9, 51, 52, 21, 53, 54, 55, 56, 57, 22, 58, 10, 59, 62, 63, 64, 65, 66, 23, 67, 11, 68, 2, 60 }
  uselistorder i32* @global_var_1e2a4.629, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32* inttoptr (i32 122912 to i32*), { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_119a8, { 1, 0 }
  uselistorder label %dec_label_pc_11948, { 1, 0 }
}

define i32 @function_119cc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_119cc:
  %v0_119cc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_119cc, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_119cc
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_119cc, %bb
  %v4_119d8 = phi i32 [ %arg1, %dec_label_pc_119cc ], [ 0, %bb ]
  ret i32 %v4_119d8

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_119dc(i32 %arg1) local_unnamed_addr {
dec_label_pc_119dc:
  %stack_var_-16 = alloca i32, align 4
  store i32 122896, i32* @r5, align 4
  %v4_119e8 = load i32, i32* inttoptr (i32 122984 to i32*), align 8
  store i32 %v4_119e8, i32* @r4, align 4
  %v2_119f0 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_11a08 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_11a08)
  %v0_11a1c = load i32, i32* @r5, align 4
  %v2_11a1c = add i32 %v0_11a1c, 16
  %v3_11a1c = inttoptr i32 %v2_11a1c to i32*
  %v4_11a1c = load i32, i32* %v3_11a1c, align 4
  call void @__pseudo_branch(i32 %v4_11a1c)
  %v4_11a2c = load i32, i32* @global_var_1e2a8.638, align 4
  %v2_11a30 = icmp eq i32 %v4_11a2c, 0
  br i1 %v2_11a30, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_119dc
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_119dc, %bb
  %v2_11a3c = xor i1 %v2_11a30, true
  call void @__pseudo_cond_branch(i1 %v2_11a3c, i32 %v4_11a2c)
  store i32 %v2_119f0, i32* @r0, align 4
  %v0_11a4c = load i32, i32* @r5, align 4
  %v2_11a4c = add i32 %v0_11a4c, 24
  %v3_11a4c = inttoptr i32 %v2_11a4c to i32*
  %v4_11a4c = load i32, i32* %v3_11a4c, align 4
  call void @__pseudo_branch(i32 %v4_11a4c)
  %v0_11a58 = call i32 @function_122a8()
  %v0_11a60 = load i32, i32* @r5, align 4
  %v9_11a60 = icmp eq i32 %v0_11a60, 43228
  br i1 %v9_11a60, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_11a68 = xor i1 %v9_11a60, true
  call void @__pseudo_cond_branch(i1 %v2_11a68, i32 ptrtoint (i32* @global_var_13734.641 to i32))
  %v0_11a6c = load i32, i32* @r6, align 4
  %v1_11a70 = call i32 @function_129f4(i32 %v0_11a6c)
  %v0_11a74 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11a74, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v2_11a74 = load i32, i32* @r4, align 4
  %v5_11a74 = udiv i32 %v2_11a74, 4096
  %v6_11a74 = and i32 %v5_11a74, %v1_11a70
  store i32 %v6_11a74, i32* @ip, align 4
  %v2_11a78 = load i32, i32* @r8, align 4
  %v2_11a88 = load i32, i32* @r2, align 4
  %v3_11a88 = mul i32 %v2_11a88, %v2_11a78
  %v8_11a8c = shl i32 %v2_11a78, %v3_11a88
  %v9_11a8c = and i32 %v8_11a8c, %v3_11a88
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v10_11a8c = phi i32 [ %v1_11a70, %bb9 ], [ %v9_11a8c, %bb10 ]
  ret i32 %v10_11a8c

; uselistorder directives
  uselistorder i32 %v2_11a78, { 1, 0 }
  uselistorder i32 %v1_11a70, { 1, 0 }
  uselistorder i1 %v9_11a60, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_11a94(i32 %arg1) local_unnamed_addr {
dec_label_pc_11a94:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_11a94 = load i32, i32* @r4, align 4
  %v6_11a94 = load i32, i32* @lr, align 4
  %v2_11a98 = icmp eq i32 %arg1, 0
  store i32 0, i32* @r4, align 4
  br i1 %v2_11a98, label %dec_label_pc_11b2c, label %dec_label_pc_11aa8

dec_label_pc_11aa8:                               ; preds = %dec_label_pc_11a94
  %v2_11ab8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 65536, i32* %stack_var_-24, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v3_11acc = call i32 @function_12720(i32 17, i32 0, i32 %v2_11ab8)
  %v3_11ad0 = load i32, i32* %stack_var_-44, align 4
  %v7_11ad4 = icmp eq i32 %v3_11ad0, 1
  br i1 %v7_11ad4, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_11aa8
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_11aa8, %bb
  call void @__pseudo_cond_branch(i1 %v7_11ad4, i32 ptrtoint (i32* @global_var_ffd0.643 to i32))
  %v2_11ae8 = ptrtoint i32* %stack_var_-16 to i32
  %v2_11af0 = call i32 @function_12938(i32 %v2_11ae8, i32 %v2_11ae8)
  %v2_11af4 = icmp eq i32 %v2_11af0, 0
  br i1 %v2_11af4, label %bb19, label %bb18

bb18:                                             ; preds = %.thread2
  %v3_11b08 = load i32, i32* %stack_var_-16, align 4
  br label %bb19

bb19:                                             ; preds = %.thread2, %bb18
  %storemerge = phi i32 [ %v3_11b08, %bb18 ], [ 0, %.thread2 ]
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v3_11b18 = load i32, i32* %stack_var_-24, align 4
  %v1_11b1c = and i32 %v3_11b18, 65536
  %v2_11b1c = icmp eq i32 %v1_11b1c, 0
  br i1 %v2_11b1c, label %bb20, label %.thread6

bb20:                                             ; preds = %bb19
  br label %.thread6

.thread6:                                         ; preds = %bb19, %bb20
  call void @__pseudo_cond_branch(i1 %v2_11b1c, i32 ptrtoint (i32* @global_var_ffd0.643 to i32))
  %v0_11b2c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b2c

dec_label_pc_11b2c:                               ; preds = %dec_label_pc_11a94, %.thread6
  %v0_11b2c = phi i32 [ %v0_11b2c.pre, %.thread6 ], [ 0, %dec_label_pc_11a94 ]
  store i32 %v3_11a94, i32* @r4, align 4
  store i32 %v6_11a94, i32* @lr, align 4
  ret i32 %v0_11b2c

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_12720, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b2c, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_11b40() local_unnamed_addr {
dec_label_pc_11b40:
  %stack_var_-36 = alloca i32, align 4
  store i32 122896, i32* @r4, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_15730.647 to i32), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v2_11b60 = call i32 @function_13174(i32 ptrtoint ([11 x i8]* @global_var_15730.647 to i32))
  store i32 %v2_11b60, i32* @r6, align 4
  %v2_11b64 = icmp eq i32 %v2_11b60, 0
  br i1 %v2_11b64, label %dec_label_pc_11be4, label %dec_label_pc_11b6c

dec_label_pc_11b6c:                               ; preds = %dec_label_pc_11b40
  store i32 224, i32* @sl, align 4
  store i32 ptrtoint (i32* @global_var_1573c.650 to i32), i32* @r8, align 4
  %v2_11b78 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_11b78, i32* @r7, align 4
  br label %bb18

dec_label_pc_11b80:                               ; preds = %bb18
  %v3_11b80 = load i32, i32* %stack_var_-36, align 4
  %v1_11b84 = inttoptr i32 %v3_11b80 to i32*
  %v2_11b84 = load i32, i32* %v1_11b84, align 4
  %v1_11b88 = inttoptr i32 %v2_11b84 to i8*
  %v2_11b88 = load i8, i8* %v1_11b88, align 1
  %v7_11b8c = icmp eq i8 %v2_11b88, 99
  br i1 %v7_11b8c, label %dec_label_pc_11b94, label %.backedge3

dec_label_pc_11b94:                               ; preds = %dec_label_pc_11b80
  %v1_11b94 = add i32 %v2_11b84, 1
  %v2_11b94 = inttoptr i32 %v1_11b94 to i8*
  %v3_11b94 = load i8, i8* %v2_11b94, align 1
  %v7_11b98 = icmp eq i8 %v3_11b94, 112
  br i1 %v7_11b98, label %dec_label_pc_11ba0, label %.backedge3

dec_label_pc_11ba0:                               ; preds = %dec_label_pc_11b94
  %v1_11ba0 = add i32 %v2_11b84, 2
  %v2_11ba0 = inttoptr i32 %v1_11ba0 to i8*
  %v3_11ba0 = load i8, i8* %v2_11ba0, align 1
  %v7_11ba4 = icmp eq i8 %v3_11ba0, 117
  br i1 %v7_11ba4, label %dec_label_pc_11bac, label %.backedge3

dec_label_pc_11bac:                               ; preds = %dec_label_pc_11ba0
  %v1_11bac = add i32 %v2_11b84, 3
  %v2_11bac = inttoptr i32 %v1_11bac to i8*
  %v3_11bac = load i8, i8* %v2_11bac, align 1
  %v4_11bac = zext i8 %v3_11bac to i32
  %v0_11bb0 = load i32, i32* @r4, align 4
  %v1_11bb0 = load i32, i32* @sl, align 4
  %v2_11bb0 = add i32 %v1_11bb0, %v0_11bb0
  %v3_11bb0 = inttoptr i32 %v2_11bb0 to i32*
  %v4_11bb0 = load i32, i32* %v3_11bb0, align 4
  %v2_11bb4 = mul nuw nsw i32 %v4_11bac, 2
  %v2_11bb8 = add i32 %v4_11bb0, %v2_11bb4
  %v3_11bb8 = inttoptr i32 %v2_11bb8 to i16*
  %v4_11bb8 = load i16, i16* %v3_11bb8, align 2
  %v1_11bbc = and i16 %v4_11bb8, 8
  %v2_11bbc = icmp eq i16 %v1_11bbc, 0
  br i1 %v2_11bbc, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_11bac
  %v1_11bc0 = load i32, i32* @r5, align 4
  %v2_11bc0 = add i32 %v1_11bc0, 1
  store i32 %v2_11bc0, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_11bac, %dec_label_pc_11b80, %dec_label_pc_11b94, %dec_label_pc_11ba0
  %v0_11bc4.pre = load i32, i32* @r6, align 4
  %v0_11bd0.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_11b6c
  %v0_11bd0 = phi i32 [ %v0_11bd0.pre, %.backedge3 ], [ ptrtoint (i32* @global_var_1573c.650 to i32), %dec_label_pc_11b6c ]
  %v0_11bc4 = phi i32 [ %v0_11bc4.pre, %.backedge3 ], [ %v2_11b60, %dec_label_pc_11b6c ]
  %v4_11bd4 = inttoptr i32 %v0_11bc4 to i32*
  %v5_11bd4 = call i32 @function_12e18(i32* %v4_11bd4, i32 %v2_11b78, i32 258, i32 %v0_11bd0)
  %v2_11bd8 = icmp eq i32 %v5_11bd4, 0
  br i1 %v2_11bd8, label %dec_label_pc_11c48, label %dec_label_pc_11b80

dec_label_pc_11be4:                               ; preds = %dec_label_pc_11b40
  store i32 ptrtoint ([14 x i8]* @global_var_15740.653 to i32), i32* @r0, align 4
  %v2_11bec = call i32 @function_13174(i32 ptrtoint ([14 x i8]* @global_var_15740.653 to i32))
  store i32 %v2_11bec, i32* @r6, align 4
  %v2_11bf0 = icmp eq i32 %v2_11bec, 0
  br i1 %v2_11bf0, label %bb19, label %dec_label_pc_11bfc

bb19:                                             ; preds = %dec_label_pc_11be4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_11c48

dec_label_pc_11bfc:                               ; preds = %dec_label_pc_11be4
  store i32 ptrtoint ([10 x i8]* @global_var_15750.655 to i32), i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_15774.657 to i32), i32* @r7, align 4
  %v2_11c0c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_11c0c, i32* @r4, align 4
  br label %bb21

dec_label_pc_11c14:                               ; preds = %bb21
  %v0_11c40 = load i32, i32* @r8, align 4
  %v1_11c40 = inttoptr i32 %v0_11c40 to i8*
  %v3_11c14 = load i32, i32* %stack_var_-36, align 4
  %v1_11c18 = inttoptr i32 %v3_11c14 to i32*
  %v2_11c18 = load i32, i32* %v1_11c18, align 4
  store i32 %v2_11c18, i32* @r1, align 4
  %v4_11c1c = call i32 @function_144c0(i8* %v1_11c40, i32 %v2_11c18)
  %v2_11c20 = icmp eq i32 %v4_11c1c, 0
  br i1 %v2_11c20, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_11c14
  %v1_11c24 = load i32, i32* @r5, align 4
  %v2_11c24 = add i32 %v1_11c24, 1
  store i32 %v2_11c24, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_11c14
  %v0_11c30.pre = load i32, i32* @r7, align 4
  %v0_11c34.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_11bfc
  %v0_11c34 = phi i32 [ %v0_11c34.pre, %.backedge ], [ %v2_11bec, %dec_label_pc_11bfc ]
  %v0_11c30 = phi i32 [ %v0_11c30.pre, %.backedge ], [ ptrtoint (i32* @global_var_15774.657 to i32), %dec_label_pc_11bfc ]
  %v4_11c38 = inttoptr i32 %v0_11c34 to i32*
  %v5_11c38 = call i32 @function_12e18(i32* %v4_11c38, i32 %v2_11c0c, i32 459266, i32 %v0_11c30)
  %v2_11c3c = icmp eq i32 %v5_11c38, 0
  br i1 %v2_11c3c, label %dec_label_pc_11c48, label %dec_label_pc_11c14

dec_label_pc_11c48:                               ; preds = %bb18, %bb21, %bb19
  %v0_11c48 = load i32, i32* @r6, align 4
  %v1_11c4c = inttoptr i32 %v0_11c48 to i32*
  %v2_11c4c = call i32 @function_13140(i32* %v1_11c4c)
  %v0_11c50 = load i32, i32* @r5, align 4
  %v2_11c50 = icmp eq i32 %v0_11c50, 0
  %.v0_11c50 = select i1 %v2_11c50, i32 1, i32 %v0_11c50
  ret i32 %.v0_11c50

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @function_13174, { 1, 0 }
  uselistorder label %dec_label_pc_11c48, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @function_11c8c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11c8c:
  %r2.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_12074

bb:                                               ; preds = %dec_label_pc_11c8c
  %v7_11ca0 = mul i32 %arg1, 4
  %v8_11ca0 = add i32 %v7_11ca0, ptrtoint (i32* @global_var_11ca8.660 to i32)
  call void @__pseudo_branch(i32 %v8_11ca0)
  br label %dec_label_pc_12074

dec_label_pc_12074:                               ; preds = %bb, %dec_label_pc_11c8c
  %v0_12074 = call i32 @function_1003c()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_12080 = inttoptr i32 %v0_12074 to i32*
  store i32 22, i32* %v2_12080, align 4
  %v0_12230 = load i32, i32* %r2.global-to-local, align 4
  ret i32 %v0_12230

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_122a8() local_unnamed_addr {
dec_label_pc_122cc.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_122a8 = load i32, i32* @r4, align 4
  store i32 %v3_122a8, i32* %stack_var_-16, align 4
  store i32 122888, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_122cc

dec_label_pc_122cc:                               ; preds = %dec_label_pc_122cc.dec_label_pc_122cc_crit_edge, %dec_label_pc_122cc.lr.ph
  %v1_122cc = phi i32 [ %v1_122d8, %dec_label_pc_122cc.dec_label_pc_122cc_crit_edge ], [ 0, %dec_label_pc_122cc.lr.ph ]
  %v0_122cc = phi i32 [ %v0_122cc.pre, %dec_label_pc_122cc.dec_label_pc_122cc_crit_edge ], [ 122888, %dec_label_pc_122cc.lr.ph ]
  %v4_122cc = mul i32 %v1_122cc, 4
  %v5_122cc = add i32 %v4_122cc, %v0_122cc
  %v6_122cc = inttoptr i32 %v5_122cc to i32*
  %v7_122cc = load i32, i32* %v6_122cc, align 4
  call void @__pseudo_branch(i32 %v7_122cc)
  %v0_122d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_122d8 = add i32 %v0_122d8, -1
  store i32 %v1_122d8, i32* %r4.global-to-local, align 4
  %v2_122d8 = icmp eq i32 %v0_122d8, 0
  br i1 %v2_122d8, label %dec_label_pc_122e0, label %dec_label_pc_122cc.dec_label_pc_122cc_crit_edge

dec_label_pc_122cc.dec_label_pc_122cc_crit_edge:  ; preds = %dec_label_pc_122cc
  %v0_122cc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_122cc

dec_label_pc_122e0:                               ; preds = %dec_label_pc_122cc
  %v4_122e4 = load i32, i32* @global_var_1e2b8.673, align 4
  %v2_122e8 = icmp eq i32 %v4_122e4, 0
  br i1 %v2_122e8, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_122e0
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_122e0, %bb
  %v2_122f0 = xor i1 %v2_122e8, true
  call void @__pseudo_cond_branch(i1 %v2_122f0, i32 %v4_122e4)
  %v4_122f8 = load i32, i32* @global_var_1e2bc.675, align 4
  %v2_122fc = icmp eq i32 %v4_122f8, 0
  br i1 %v2_122fc, label %bb18, label %bb17

bb17:                                             ; preds = %bb16
  br label %bb18

bb18:                                             ; preds = %bb16, %bb17
  %v2_12304 = xor i1 %v2_122fc, true
  call void @__pseudo_cond_branch(i1 %v2_12304, i32 %v4_122f8)
  %v2_12308 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12308, i32* %r4.global-to-local, align 4
  %v1_1230c = load i32, i32* @r0, align 4
  ret i32 %v1_1230c

; uselistorder directives
  uselistorder i32 %v1_122d8, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_12324(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12324:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_12338 = call i32 @function_fe3c(i32 %arg1, i32 1)
  %v3_12340 = icmp eq i32 %v2_12338, -1
  store i32 122896, i32* @r3, align 4
  br i1 %v3_12340, label %dec_label_pc_1234c, label %dec_label_pc_12364

dec_label_pc_1234c:                               ; preds = %dec_label_pc_12324
  %v0_12350 = load i32, i32* %r5.global-to-local, align 4
  %v3_12358 = call i32 @function_fc48(i32 ptrtoint ([10 x i8]* @global_var_15778.678 to i32), i32 %v0_12350)
  %v1_1235c = load i32, i32* %r4.global-to-local, align 4
  %v1_12360 = icmp ne i32 %v3_12358, %v1_1235c
  call void @__pseudo_cond_branch(i1 %v1_12360, i32 ptrtoint (i32* @global_var_118b4.679 to i32))
  br label %dec_label_pc_12364

dec_label_pc_12364:                               ; preds = %dec_label_pc_12324, %dec_label_pc_1234c
  %v1_1236c = phi i32 [ %v2_12338, %dec_label_pc_12324 ], [ %v3_12358, %dec_label_pc_1234c ]
  ret i32 %v1_1236c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_12364, { 1, 0 }
}

define i32 @function_12378(i32 %arg1) local_unnamed_addr {
dec_label_pc_12378:
  %r4.global-to-local = alloca i32, align 4
  store i32 122896, i32* %r4.global-to-local, align 4
  %v4_12388 = load i32, i32* inttoptr (i32 122988 to i32*), align 4
  %v1_1238c = inttoptr i32 %v4_12388 to i32*
  %v2_1238c = load i32, i32* %v1_1238c, align 4
  %v2_12390 = icmp eq i32 %v2_1238c, 0
  br i1 %v2_12390, label %dec_label_pc_12398, label %dec_label_pc_123cc

dec_label_pc_12398:                               ; preds = %dec_label_pc_12378
  %v4_1239c = load i32, i32* inttoptr (i32 122948 to i32*), align 4
  %v2_123a4 = icmp eq i32 %v4_1239c, 0
  store i32 4096, i32* %v1_1238c, align 4
  br i1 %v2_123a4, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_12398
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_12398, %bb
  %v2_123b0 = xor i1 %v2_123a4, true
  call void @__pseudo_cond_branch(i1 %v2_123b0, i32 %v4_1239c)
  %v0_123b8 = load i32, i32* %r4.global-to-local, align 4
  %v2_123c0 = icmp eq i32 %v0_123b8, 43384
  br i1 %v2_123c0, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v2_123c8 = xor i1 %v2_123c0, true
  call void @__pseudo_cond_branch(i1 %v2_123c8, i32 ptrtoint (i32* @global_var_13698.684 to i32))
  br label %dec_label_pc_123cc

dec_label_pc_123cc:                               ; preds = %dec_label_pc_12378, %bb6
  %v1_123d0 = load i32, i32* @r0, align 4
  ret i32 %v1_123d0

; uselistorder directives
  uselistorder i1 %v2_123c0, { 1, 0 }
  uselistorder label %dec_label_pc_123cc, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_123e4(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_123e4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %tmp49 = call i32 @__decompiler_undefined_function_0()
  %tmp50 = call i32 @__decompiler_undefined_function_0()
  %tmp51 = call i32 @__decompiler_undefined_function_0()
  %tmp52 = call i32 @__decompiler_undefined_function_0()
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r7, align 4
  %v1_123ec = add i32 %tmp, 4
  store i32 %v1_123ec, i32* %ip.global-to-local, align 4
  %v2_123f0 = load i32, i32* %arg3, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 122896, i32* @r6, align 4
  %v3_123fc = mul i32 %arg2, 4
  store i32 %v3_123fc, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v4_12404 = load i32, i32* inttoptr (i32 122916 to i32*), align 4
  store i32 28, i32* %r2.global-to-local, align 4
  %v2_1240c = ptrtoint i32* %stack_var_-120 to i32
  %v4_12410 = load i32, i32* inttoptr (i32 122924 to i32*), align 4
  store i32 %v4_12410, i32* %r4.global-to-local, align 4
  %v2_12418 = add i32 %v1_123ec, %v3_123fc
  store i32 %v2_12418, i32* %ip.global-to-local, align 4
  %v9_1241c = icmp eq i32 %v2_12418, %v2_123f0
  store i1 %v9_1241c, i1* %cpsr_z.global-to-local, align 1
  %v2_12420 = inttoptr i32 %v4_12404 to i32*
  store i32 %arg7, i32* %v2_12420, align 4
  store i32 684, i32* %r2.global-to-local, align 4
  %v0_1242c = load i32, i32* %r3.global-to-local, align 4
  br i1 %v9_1241c, label %bb, label %.critedge

bb:                                               ; preds = %dec_label_pc_123e4
  %v1_12430 = load i32, i32* @r7, align 4
  %v2_12430 = load i32, i32* %r5.global-to-local, align 4
  %v3_12430 = add i32 %v2_12430, %v1_12430
  store i32 %v3_12430, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* @global_var_1e2bc.675, align 4
  %v0_12438 = load i32, i32* %ip.global-to-local, align 4
  %v1_12438 = load i32, i32* %r4.global-to-local, align 4
  %v2_12438 = inttoptr i32 %v1_12438 to i32*
  store i32 %v0_12438, i32* %v2_12438, align 4
  store i32 120, i32* @r2, align 4
  %v1_12444 = load i32, i32* %r3.global-to-local, align 4
  %v2_12444 = load i32, i32* %r4.global-to-local, align 4
  %v3_12444 = inttoptr i32 %v2_12444 to i32*
  store i32 %v1_12444, i32* %v3_12444, align 4
  br label %bb57

.critedge:                                        ; preds = %dec_label_pc_123e4
  store i32 %arg6, i32* @global_var_1e2bc.675, align 4
  %v0_12438.c = load i32, i32* %ip.global-to-local, align 4
  %v1_12438.c = load i32, i32* %r4.global-to-local, align 4
  %v2_12438.c = inttoptr i32 %v1_12438.c to i32*
  store i32 %v0_12438.c, i32* %v2_12438.c, align 4
  store i32 120, i32* @r2, align 4
  br label %bb57

bb57:                                             ; preds = %.critedge, %bb
  %v2_12450 = bitcast i32* %stack_var_-120 to i8*
  %v3_12450 = call i32 @function_143c0(i8* %v2_12450, i32 0)
  %v0_12454 = load i32, i32* %r4.global-to-local, align 4
  %v1_12454 = inttoptr i32 %v0_12454 to i32*
  %storemerge.pre = load i32, i32* %v1_12454, align 4
  br label %dec_label_pc_12460

dec_label_pc_12460:                               ; preds = %dec_label_pc_12460, %bb57
  %storemerge = phi i32 [ %storemerge.pre, %bb57 ], [ %v4_12460, %dec_label_pc_12460 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_12460 = inttoptr i32 %storemerge to i32*
  %v2_12460 = load i32, i32* %v1_12460, align 4
  store i32 %v2_12460, i32* %r3.global-to-local, align 4
  %v4_12460 = add i32 %storemerge, 4
  store i32 %v4_12460, i32* %r2.global-to-local, align 4
  %v2_12464 = icmp eq i32 %v2_12460, 0
  br i1 %v2_12464, label %dec_label_pc_12470, label %dec_label_pc_12460

dec_label_pc_12470:                               ; preds = %dec_label_pc_12460
  store i32 %v4_12460, i32* @r4, align 4
  store i32 %v2_1240c, i32* @r5, align 4
  %v1_1249429 = inttoptr i32 %v4_12460 to i32*
  %v2_1249430 = load i32, i32* %v1_1249429, align 4
  store i32 %v2_1249430, i32* %r3.global-to-local, align 4
  %v2_1249832 = icmp eq i32 %v2_1249430, 0
  store i1 %v2_1249832, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1249832, label %dec_label_pc_124a0, label %dec_label_pc_1247c

dec_label_pc_1247c:                               ; preds = %dec_label_pc_12470, %dec_label_pc_12494
  %v5_12480 = phi i32 [ %v2_12494, %dec_label_pc_12494 ], [ %v2_1249430, %dec_label_pc_12470 ]
  %v2_1247c = icmp ugt i32 %v5_12480, 13
  %v7_1247c = icmp eq i32 %v5_12480, 14
  store i1 %v7_1247c, i1* %cpsr_z.global-to-local, align 1
  %v2_12480 = xor i1 %v2_1247c, true
  %v3_12480 = or i1 %v7_1247c, %v2_12480
  br i1 %v3_12480, label %bb58, label %bb59

bb58:                                             ; preds = %dec_label_pc_1247c
  %v6_12480 = and i32 %v5_12480, 536870912
  %v7_12480 = icmp ne i32 %v6_12480, 0
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_1247c, %bb58
  %v1_1248c = phi i1 [ %v2_1247c, %dec_label_pc_1247c ], [ %v7_12480, %bb58 ]
  %v2_12484 = xor i1 %v1_1248c, true
  %v3_12484 = or i1 %v7_1247c, %v2_12484
  br i1 %v3_12484, label %bb60, label %dec_label_pc_12494

bb60:                                             ; preds = %bb59
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12494

dec_label_pc_12494:                               ; preds = %bb59, %bb60
  call void @__pseudo_cond_branch(i1 %v3_12484, i32 ptrtoint (i32* @global_var_100a0.689 to i32))
  %v0_12490 = load i32, i32* @r4, align 4
  %v1_12490 = add i32 %v0_12490, 8
  store i32 %v1_12490, i32* @r4, align 4
  %v1_12494 = inttoptr i32 %v1_12490 to i32*
  %v2_12494 = load i32, i32* %v1_12494, align 4
  store i32 %v2_12494, i32* %r3.global-to-local, align 4
  %v2_12498 = icmp eq i32 %v2_12494, 0
  store i1 %v2_12498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12498, label %dec_label_pc_124a0, label %dec_label_pc_1247c

dec_label_pc_124a0:                               ; preds = %dec_label_pc_12494, %dec_label_pc_12470
  %v1_124a4 = call i32 @function_14934(i32 %v2_1240c)
  store i32 %v1_124a4, i32* @r0, align 4
  %v1_124a8 = call i32 @function_12378(i32 %v1_124a4)
  store i32 %v1_124a8, i32* @r0, align 4
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 %tmp53, i32* @r2, align 4
  %v0_124b4 = load i32, i32* @r6, align 4
  %v2_124b4 = add i32 %v0_124b4, 92
  %v3_124b4 = inttoptr i32 %v2_124b4 to i32*
  %v4_124b4 = load i32, i32* %v3_124b4, align 4
  store i32 %tmp52, i32* @r3, align 4
  %v2_124bc = icmp eq i32 %tmp53, 0
  store i1 %v2_124bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_124bc, label %bb61, label %bb62

bb61:                                             ; preds = %dec_label_pc_124a0
  store i32 4096, i32* @r2, align 4
  br label %bb62

bb62:                                             ; preds = %dec_label_pc_124a0, %bb61
  %v0_124c8 = phi i32 [ %tmp53, %dec_label_pc_124a0 ], [ 4096, %bb61 ]
  %v3_124c4 = icmp eq i32 %tmp52, -1
  %v8_124c4 = icmp eq i32 %tmp52, -1
  store i1 %v8_124c4, i1* %cpsr_z.global-to-local, align 1
  %v2_124c8 = inttoptr i32 %v4_124b4 to i32*
  store i32 %v0_124c8, i32* %v2_124c8, align 4
  br i1 %v3_124c4, label %dec_label_pc_124d0, label %dec_label_pc_124f8

dec_label_pc_124d0:                               ; preds = %bb62
  %v0_124d0 = call i32 @function_127e8()
  store i32 %v0_124d0, i32* @r0, align 4
  store i32 %v0_124d0, i32* @r4, align 4
  %v0_124d8 = call i32 @function_12844()
  store i32 %v0_124d8, i32* @r0, align 4
  %v0_124dc = load i32, i32* @r4, align 4
  %v9_124dc = icmp eq i32 %v0_124dc, %v0_124d8
  store i1 %v9_124dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_124dc, label %dec_label_pc_124e4, label %dec_label_pc_12520

dec_label_pc_124e4:                               ; preds = %dec_label_pc_124d0
  %v1_124e4 = call i32 @function_128c4(i32 %v0_124d8)
  store i32 %v1_124e4, i32* @r0, align 4
  store i32 %v1_124e4, i32* @r4, align 4
  %v0_124ec = call i32 @function_12830()
  store i32 %v0_124ec, i32* @r0, align 4
  %v0_124f0 = load i32, i32* @r4, align 4
  %v9_124f0 = icmp eq i32 %v0_124f0, %v0_124ec
  store i1 %v9_124f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_124f0, label %dec_label_pc_124f8, label %dec_label_pc_12520

dec_label_pc_124f8:                               ; preds = %dec_label_pc_124e4, %bb62
  store i32 %tmp52, i32* @r2, align 4
  store i1 %v8_124c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_124c4, label %dec_label_pc_12544, label %dec_label_pc_12504

dec_label_pc_12504:                               ; preds = %dec_label_pc_124f8
  store i32 %tmp51, i32* @r3, align 4
  %v9_12508 = icmp eq i32 %tmp52, %tmp51
  store i1 %v9_12508, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_12508, label %dec_label_pc_12510, label %dec_label_pc_12520

dec_label_pc_12510:                               ; preds = %dec_label_pc_12504
  store i32 %tmp50, i32* @r2, align 4
  store i32 %tmp49, i32* @r3, align 4
  %v9_12518 = icmp eq i32 %tmp50, %tmp49
  store i1 %v9_12518, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_12518, label %dec_label_pc_12544, label %dec_label_pc_12520

dec_label_pc_12520:                               ; preds = %dec_label_pc_12504, %dec_label_pc_124e4, %dec_label_pc_124d0, %dec_label_pc_12510
  %v2_12528 = call i32 @function_12324(i32 0, i32 32768)
  %v2_12534 = call i32 @function_12324(i32 1, i32 32770)
  %v2_12540 = call i32 @function_12324(i32 2, i32 32770)
  store i32 %v2_12540, i32* @r0, align 4
  br label %dec_label_pc_12544

dec_label_pc_12544:                               ; preds = %dec_label_pc_12510, %dec_label_pc_124f8, %dec_label_pc_12520
  %v0_12544 = load i32, i32* @r7, align 4
  %v1_12544 = inttoptr i32 %v0_12544 to i32*
  %v2_12544 = load i32, i32* %v1_12544, align 4
  store i32 %v2_12544, i32* %r2.global-to-local, align 4
  store i32 208, i32* %r3.global-to-local, align 4
  %v1_1254c = load i32, i32* @r6, align 4
  %v3_1254c = add i32 %v1_1254c, 208
  %v4_1254c = inttoptr i32 %v3_1254c to i32*
  store i32 %v2_12544, i32* %v4_1254c, align 4
  %v0_12550 = load i32, i32* @r7, align 4
  %v1_12550 = inttoptr i32 %v0_12550 to i32*
  %v2_12550 = load i32, i32* %v1_12550, align 4
  store i32 %v2_12550, i32* @r4, align 4
  %v2_12554 = icmp eq i32 %v2_12550, 0
  store i1 %v2_12554, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12554, label %dec_label_pc_125f8.lr.ph, label %dec_label_pc_1255c

dec_label_pc_1255c:                               ; preds = %dec_label_pc_12544
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_12560 = load i32, i32* @r6, align 4
  %v2_12560 = add i32 %v0_12560, 112
  %v3_12560 = inttoptr i32 %v2_12560 to i32*
  %v4_12560 = load i32, i32* %v3_12560, align 4
  store i32 %v4_12560, i32* %r3.global-to-local, align 4
  %v2_12564 = inttoptr i32 %v4_12560 to i32*
  store i32 %v2_12550, i32* %v2_12564, align 4
  %v0_1256c = load i32, i32* @r7, align 4
  %v1_1256c = inttoptr i32 %v0_1256c to i32*
  %v2_1256c = load i32, i32* %v1_1256c, align 4
  %v4_12570 = call i32 @function_14570(i32 %v2_1256c, i32 47, i32 %v2_12544, i32 %v4_12560)
  store i32 %v4_12570, i32* @r0, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v2_12578 = icmp eq i32 %v4_12570, 0
  store i1 %v2_12578, i1* %cpsr_z.global-to-local, align 1
  %v0_1257c = load i32, i32* @r6, align 4
  %v2_1257c = add i32 %v0_1257c, 60
  %v3_1257c = inttoptr i32 %v2_1257c to i32*
  %v4_1257c = load i32, i32* %v3_1257c, align 4
  store i32 %v4_1257c, i32* %r2.global-to-local, align 4
  br i1 %v2_12578, label %.thread46, label %bb63

.thread46:                                        ; preds = %dec_label_pc_1255c
  %v2_1258447 = inttoptr i32 %v4_1257c to i32*
  store i32 0, i32* %v2_1258447, align 4
  br label %dec_label_pc_125f8.lr.ph

bb63:                                             ; preds = %dec_label_pc_1255c
  %v2_12580 = add i32 %v4_12570, 1
  store i32 %v2_12580, i32* %r3.global-to-local, align 4
  %v2_12584 = inttoptr i32 %v4_1257c to i32*
  store i32 %v4_12570, i32* %v2_12584, align 4
  %v1_12588 = load i32, i32* %r3.global-to-local, align 4
  %v2_12588 = load i32, i32* %r2.global-to-local, align 4
  %v3_12588 = inttoptr i32 %v2_12588 to i32*
  store i32 %v1_12588, i32* %v3_12588, align 4
  br label %dec_label_pc_125f8.lr.ph

dec_label_pc_125f8.lr.ph:                         ; preds = %.thread46, %bb63, %dec_label_pc_12544
  store i32 0, i32* %r5.global-to-local, align 4
  %v0_125a0 = load i32, i32* @r6, align 4
  %v2_125a0 = add i32 %v0_125a0, -12
  store i32 %v2_125a0, i32* %r8.global-to-local, align 4
  store i32 680, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %arg5, i32* @global_var_1e2b8.673, align 4
  %v2_125d0 = icmp eq i32 %v0_1242c, 0
  store i1 %v2_125d0, i1* %cpsr_z.global-to-local, align 1
  %v2_125d8 = xor i1 %v2_125d0, true
  call void @__pseudo_cond_branch(i1 %v2_125d8, i32 %v0_1242c)
  store i32 -12, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r5.global-to-local, align 4
  %v0_125ec = load i32, i32* @r6, align 4
  %v2_125ec = add i32 %v0_125ec, -12
  store i32 %v2_125ec, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_125f8

dec_label_pc_125f8:                               ; preds = %dec_label_pc_125f8.dec_label_pc_125f8_crit_edge, %dec_label_pc_125f8.lr.ph
  %v1_125f8 = phi i32 [ %v1_12604, %dec_label_pc_125f8.dec_label_pc_125f8_crit_edge ], [ 0, %dec_label_pc_125f8.lr.ph ]
  %v0_125f8 = phi i32 [ %v0_125f8.pre, %dec_label_pc_125f8.dec_label_pc_125f8_crit_edge ], [ %v2_125ec, %dec_label_pc_125f8.lr.ph ]
  %v4_125f8 = mul i32 %v1_125f8, 4
  %v5_125f8 = add i32 %v4_125f8, %v0_125f8
  %v6_125f8 = inttoptr i32 %v5_125f8 to i32*
  %v7_125f8 = load i32, i32* %v6_125f8, align 4
  store i32 %v7_125f8, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_125f8)
  %v0_12604 = load i32, i32* %r4.global-to-local, align 4
  %v1_12604 = add i32 %v0_12604, 1
  store i32 %v1_12604, i32* %r4.global-to-local, align 4
  %v1_12608 = load i32, i32* %r5.global-to-local, align 4
  %v3_12608 = icmp ult i32 %v1_12604, %v1_12608
  %v9_12608 = icmp eq i32 %v1_12604, %v1_12608
  store i1 %v9_12608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12608, label %dec_label_pc_125f8.dec_label_pc_125f8_crit_edge, label %dec_label_pc_12610

dec_label_pc_125f8.dec_label_pc_125f8_crit_edge:  ; preds = %dec_label_pc_125f8
  %v0_125f8.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_125f8

dec_label_pc_12610:                               ; preds = %dec_label_pc_125f8
  %v0_12614.pre = load i32, i32* @r6, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  %v2_12614 = add i32 %v0_12614.pre, 104
  %v3_12614 = inttoptr i32 %v2_12614 to i32*
  %v4_12614 = load i32, i32* %v3_12614, align 4
  store i32 %v4_12614, i32* %r2.global-to-local, align 4
  store i32 %v4_12614, i32* %r3.global-to-local, align 4
  %v2_1261c = icmp eq i32 %v4_12614, 0
  store i1 %v2_1261c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1261c, label %dec_label_pc_12634, label %dec_label_pc_12624

dec_label_pc_12624:                               ; preds = %dec_label_pc_12610
  call void @__pseudo_branch(i32 %v4_12614)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12630 = load i32, i32* @r0, align 4
  %v2_12630 = inttoptr i32 %v1_12630 to i32*
  store i32 0, i32* %v2_12630, align 4
  %v0_12638.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_12634

dec_label_pc_12634:                               ; preds = %dec_label_pc_12610, %dec_label_pc_12624
  %v0_12638 = phi i32 [ %v0_12614.pre, %dec_label_pc_12610 ], [ %v0_12638.pre, %dec_label_pc_12624 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_12638 = add i32 %v0_12638, 80
  %v3_12638 = inttoptr i32 %v2_12638 to i32*
  %v4_12638 = load i32, i32* %v3_12638, align 4
  store i32 %v4_12638, i32* %r2.global-to-local, align 4
  store i32 %v4_12638, i32* %r3.global-to-local, align 4
  %v2_12640 = icmp eq i32 %v4_12638, 0
  store i1 %v2_12640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12640, label %dec_label_pc_12658, label %dec_label_pc_12648

dec_label_pc_12648:                               ; preds = %dec_label_pc_12634
  call void @__pseudo_branch(i32 %v4_12638)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12654 = load i32, i32* @r0, align 4
  %v2_12654 = inttoptr i32 %v1_12654 to i32*
  store i32 0, i32* %v2_12654, align 4
  %v0_1265c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_12658

dec_label_pc_12658:                               ; preds = %dec_label_pc_12634, %dec_label_pc_12648
  %v0_1265c = phi i32 [ %v0_12638, %dec_label_pc_12634 ], [ %v0_1265c.pre, %dec_label_pc_12648 ]
  store i32 28, i32* %r3.global-to-local, align 4
  %v2_1265c = add i32 %v0_1265c, 28
  %v3_1265c = inttoptr i32 %v2_1265c to i32*
  %v4_1265c = load i32, i32* %v3_1265c, align 4
  store i32 %v4_1265c, i32* %r3.global-to-local, align 4
  %v1_12664 = inttoptr i32 %v4_1265c to i32*
  %v2_12664 = load i32, i32* %v1_12664, align 4
  store i32 %v2_12664, i32* %r2.global-to-local, align 4
  %v0_12668 = load i32, i32* %sb.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_12674 = call i32 @function_119dc(i32 %v0_12668)
  %v0_12678 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12678, label %bb64, label %.thread8

bb64:                                             ; preds = %dec_label_pc_12658
  %v3_12678 = load i32, i32* @ip, align 4
  %v2_1267c = load i32, i32* %r4.global-to-local, align 4
  %v8_1267c = shl i32 %v2_1267c, %v1_12674
  %v9_1267c = and i32 %v8_1267c, %v1_12674
  %v8_12680 = shl i32 %v3_12678, %v9_1267c
  %v5_12684 = udiv i32 %v3_12678, 32
  %v9_12680 = and i32 %v9_1267c, %v5_12684
  %v6_12684 = and i32 %v9_12680, %v8_12680
  %v8_12688 = ashr i32 %v3_12678, %v6_12684
  %v9_12688 = and i32 %v8_12688, %v6_12684
  %v2_1268c = load i32, i32* %r2.global-to-local, align 4
  %v3_1268c = and i32 %v9_12688, %v2_1268c
  store i32 %v3_1268c, i32* %r8.global-to-local, align 4
  %v2_12690 = inttoptr i32 %v9_12688 to i64*
  %v3_12690 = load i64, i64* %v2_12690, align 4
  %v6_12690 = udiv i64 %v3_12690, 4294967296
  %v7_12690 = trunc i64 %v6_12690 to i32
  %v9_12690 = sub i32 %v7_12690, %v9_12688
  %v5_12694 = sub i32 32, %v9_12690
  %v6_12694 = shl i32 %v9_12690, %v5_12694
  %v9_12694 = and i32 %v6_12694, %v9_12690
  %v8_12698 = lshr i32 %v3_12678, %v9_12694
  %v9_12698 = and i32 %v8_12698, %v9_12694
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_12658, %bb64
  %v10_12698 = phi i32 [ %v1_12674, %dec_label_pc_12658 ], [ %v9_12698, %bb64 ]
  ret i32 %v10_12698

; uselistorder directives
  uselistorder i32 %v9_12688, { 2, 1, 0 }
  uselistorder i32 %v3_12678, { 1, 2, 0, 3 }
  uselistorder i32 %v1_12674, { 1, 0, 2 }
  uselistorder i32 %v0_12614.pre, { 1, 0 }
  uselistorder i32 %v1_12608, { 1, 0 }
  uselistorder i32 %v1_12604, { 3, 2, 1, 0 }
  uselistorder i32 %v4_1257c, { 1, 0, 2 }
  uselistorder i1 %v8_124c4, { 1, 2, 0 }
  uselistorder i32 %v2_12494, { 1, 2, 0 }
  uselistorder i1 %v2_1247c, { 1, 0 }
  uselistorder i32 %v4_12460, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v0_1242c, { 1, 0 }
  uselistorder i32 %v3_123fc, { 1, 0 }
  uselistorder i32 %tmp52, { 1, 4, 0, 2, 3 }
  uselistorder i32 %tmp51, { 1, 0 }
  uselistorder i32 %tmp50, { 1, 0 }
  uselistorder i32 %tmp49, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0, 4, 8, 5, 6, 7, 9 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2, 21, 22, 23, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 13, 14, 15, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 17, 13, 14, 16, 15, 1, 18 }
  uselistorder i32 (i32)* @function_119dc, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_12324, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_12658, { 1, 0 }
  uselistorder label %dec_label_pc_12634, { 1, 0 }
  uselistorder label %dec_label_pc_125f8.lr.ph, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12544, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12520, { 3, 0, 1, 2 }
  uselistorder label %bb62, { 1, 0 }
  uselistorder label %dec_label_pc_12494, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_1247c, { 1, 0 }
}

define i32 @function_126b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_126b8:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_126b8 = load i32, i32* @r4, align 4
  store i32 %v3_126b8, i32* %stack_var_-16, align 4
  %v3_126c4 = urem i32 %arg3, 4096
  %v2_126c8 = icmp eq i32 %v3_126c4, 0
  br i1 %v2_126c8, label %dec_label_pc_126e4, label %dec_label_pc_126d0

dec_label_pc_126d0:                               ; preds = %dec_label_pc_126b8
  %v0_126d0 = call i32 @function_1003c()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_126dc = inttoptr i32 %v0_126d0 to i32*
  store i32 22, i32* %v2_126dc, align 4
  %v0_12714.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12714

dec_label_pc_126e4:                               ; preds = %dec_label_pc_126b8
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12710, label %dec_label_pc_12700

dec_label_pc_12700:                               ; preds = %dec_label_pc_126e4
  %v0_12700 = call i32 @function_1003c()
  %v0_12704 = load i32, i32* %r4.global-to-local, align 4
  %v1_12704 = sub i32 0, %v0_12704
  %v2_12708 = inttoptr i32 %v0_12700 to i32*
  store i32 %v1_12704, i32* %v2_12708, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12710

dec_label_pc_12710:                               ; preds = %dec_label_pc_126e4, %dec_label_pc_12700
  %v0_12710 = phi i32 [ %arg1, %dec_label_pc_126e4 ], [ -1, %dec_label_pc_12700 ]
  store i32 %v0_12710, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12714

dec_label_pc_12714:                               ; preds = %dec_label_pc_126d0, %dec_label_pc_12710
  %v0_12714 = phi i32 [ %v0_12714.pre, %dec_label_pc_126d0 ], [ %v0_12710, %dec_label_pc_12710 ]
  %v2_12718 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_12718, i32* @r4, align 4
  ret i32 %v0_12714

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12714, { 1, 0 }
  uselistorder label %dec_label_pc_12710, { 1, 0 }
}

define i32 @function_12720(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12720:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_12720 = load i32, i32* @r4, align 4
  %v6_12720 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_12728 = icmp eq i32 %arg2, 0
  store i32 122896, i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_12728, label %dec_label_pc_1277c, label %dec_label_pc_12740

dec_label_pc_12740:                               ; preds = %dec_label_pc_12720
  %v1_12740 = add i32 %arg2, 4
  %v2_12740 = inttoptr i32 %v1_12740 to i32*
  %v3_12740 = load i32, i32* %v2_12740, align 4
  store i32 %v3_12740, i32* @r3, align 4
  %v1_12744 = and i32 %v3_12740, 67108864
  %v2_12744 = icmp eq i32 %v1_12744, 0
  br i1 %v2_12744, label %dec_label_pc_1274c, label %dec_label_pc_1277c

dec_label_pc_1274c:                               ; preds = %dec_label_pc_12740
  store i32 20, i32* @r2, align 4
  %v2_12750 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_12750, i32* @r0, align 4
  %v0_12754 = call i32 @function_100a0()
  %v0_1277c.pre = load i32, i32* @r5, align 4
  %v0_12784.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1277c

dec_label_pc_1277c:                               ; preds = %dec_label_pc_12740, %dec_label_pc_12720, %dec_label_pc_1274c
  %v0_12784 = phi i32 [ %arg3, %dec_label_pc_12740 ], [ %arg3, %dec_label_pc_12720 ], [ %v0_12784.pre, %dec_label_pc_1274c ]
  %v0_12780 = phi i32 [ %arg2, %dec_label_pc_12740 ], [ 0, %dec_label_pc_12720 ], [ %v2_12750, %dec_label_pc_1274c ]
  %v0_1277c = phi i32 [ %arg1, %dec_label_pc_12740 ], [ %arg1, %dec_label_pc_12720 ], [ %v0_1277c.pre, %dec_label_pc_1274c ]
  %v4_1278c = call i32 @function_129c0(i32 %v0_1277c, i32 %v0_12780, i32 %v0_12784, i32 8)
  store i32 %v3_12720, i32* @r4, align 4
  store i32 %v6_12720, i32* @r5, align 4
  ret i32 %v4_1278c

; uselistorder directives
  uselistorder label %dec_label_pc_1277c, { 2, 0, 1 }
}

define i32 @function_127a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_127a0:
  %v0_127a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_127a0, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_127a0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_127a0, %bb
  %v0_127b4 = phi i32 [ %arg1, %dec_label_pc_127a0 ], [ 0, %bb ]
  ret i32 %v0_127b4

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_127c0() local_unnamed_addr {
dec_label_pc_127c0:
  %v4_127cc = load i32, i32* inttoptr (i32 122988 to i32*), align 4
  %v1_127d0 = inttoptr i32 %v4_127cc to i32*
  %v2_127d0 = load i32, i32* %v1_127d0, align 4
  %v2_127d4 = icmp eq i32 %v2_127d0, 0
  br i1 %v2_127d4, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_127c0
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_127c0, %bb
  %v1_127dc = phi i32 [ %v2_127d0, %dec_label_pc_127c0 ], [ 4096, %bb ]
  ret i32 %v1_127dc

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_127e8() local_unnamed_addr {
dec_label_pc_127e8:
  %v1_127f8 = load i32, i32* @r0, align 4
  ret i32 %v1_127f8
}

define i32 @function_127fc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_127fc:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_127fc = load i32, i32* @r7, align 4
  store i32 %v3_127fc, i32* %stack_var_-8, align 4
  %v0_12808 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12808, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12808, -4095
  br i1 %tmp, label %dec_label_pc_12828, label %dec_label_pc_12818

dec_label_pc_12818:                               ; preds = %dec_label_pc_127fc
  %v0_12818 = call i32 @function_1003c()
  %v0_1281c = load i32, i32* %r7.global-to-local, align 4
  %v1_1281c = sub i32 0, %v0_1281c
  %v2_12820 = inttoptr i32 %v0_12818 to i32*
  store i32 %v1_1281c, i32* %v2_12820, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12828.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12828

dec_label_pc_12828:                               ; preds = %dec_label_pc_127fc, %dec_label_pc_12818
  %v1_1282c = phi i32 [ %v0_12808, %dec_label_pc_127fc ], [ -1, %dec_label_pc_12818 ]
  %v2_12828 = phi i32 [ %v3_127fc, %dec_label_pc_127fc ], [ %v2_12828.pre, %dec_label_pc_12818 ]
  store i32 %v2_12828, i32* %r7.global-to-local, align 4
  ret i32 %v1_1282c

; uselistorder directives
  uselistorder i32 %v0_12808, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12828, { 1, 0 }
}

define i32 @function_12830() local_unnamed_addr {
dec_label_pc_12830:
  %v1_12840 = load i32, i32* @r0, align 4
  ret i32 %v1_12840
}

define i32 @function_12844() local_unnamed_addr {
dec_label_pc_12844:
  %v1_12854 = load i32, i32* @r0, align 4
  ret i32 %v1_12854
}

define i32 @function_12858(i32 %arg1) local_unnamed_addr {
dec_label_pc_12858:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_12858 = load i32, i32* @r4, align 4
  store i32 %v3_12858, i32* %stack_var_-16, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_b7a4.709 to i32), i32 75884), i32* %r4.global-to-local, align 4
  %v4_12868 = load i32, i32* @global_var_202d0.711, align 4
  %v2_1286c = icmp eq i32 %v4_12868, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_1286c, label %dec_label_pc_12878, label %dec_label_pc_12888

dec_label_pc_12878:                               ; preds = %dec_label_pc_12858
  %v1_1287c = call i32 @function_1496c(i32 0)
  %v1_12880 = icmp slt i32 %v1_1287c, 0
  br i1 %v1_12880, label %dec_label_pc_128ac, label %dec_label_pc_12888thread-pre-split

dec_label_pc_12888thread-pre-split:               ; preds = %dec_label_pc_12878
  %v0_1288c.pr = load i32, i32* %r5.global-to-local, align 4
  %v4_12888.pre = load i32, i32* @global_var_202d0.711, align 4
  br label %dec_label_pc_12888

dec_label_pc_12888:                               ; preds = %dec_label_pc_12888thread-pre-split, %dec_label_pc_12858
  %v0_12898 = phi i32 [ %v4_12888.pre, %dec_label_pc_12888thread-pre-split ], [ %v4_12868, %dec_label_pc_12858 ]
  %v1_1289c = phi i32 [ %v0_1288c.pr, %dec_label_pc_12888thread-pre-split ], [ %arg1, %dec_label_pc_12858 ]
  %v2_1288c = icmp eq i32 %v1_1289c, 0
  store i32 %v0_12898, i32* %r4.global-to-local, align 4
  br i1 %v2_1288c, label %dec_label_pc_128b0, label %dec_label_pc_12898

dec_label_pc_12898:                               ; preds = %dec_label_pc_12888
  %v2_1289c = add i32 %v1_1289c, %v0_12898
  %v1_128a0 = call i32 @function_1496c(i32 %v2_1289c)
  %v1_128a4 = icmp slt i32 %v1_128a0, 0
  br i1 %v1_128a4, label %dec_label_pc_128ac, label %dec_label_pc_12898.dec_label_pc_128b0_crit_edge

dec_label_pc_12898.dec_label_pc_128b0_crit_edge:  ; preds = %dec_label_pc_12898
  %v0_128b0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_128b0

dec_label_pc_128ac:                               ; preds = %dec_label_pc_12898, %dec_label_pc_12878
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_128b0

dec_label_pc_128b0:                               ; preds = %dec_label_pc_12888, %dec_label_pc_12898.dec_label_pc_128b0_crit_edge, %dec_label_pc_128ac
  %v0_128b0 = phi i32 [ %v0_128b0.pre, %dec_label_pc_12898.dec_label_pc_128b0_crit_edge ], [ -1, %dec_label_pc_128ac ], [ %v0_12898, %dec_label_pc_12888 ]
  %v2_128b4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_128b4, i32* @r4, align 4
  ret i32 %v0_128b0

; uselistorder directives
  uselistorder i32 %v0_12898, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_1496c, { 1, 0 }
  uselistorder label %dec_label_pc_128b0, { 2, 1, 0 }
}

define i32 @function_128c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_128c4:
  %v1_128d4 = load i32, i32* @r0, align 4
  ret i32 %v1_128d4
}

define i32 @function_128d8() local_unnamed_addr {
dec_label_pc_128d8:
  %stack_var_-16 = alloca i32, align 4
  %v2_128dc = ptrtoint i32* %stack_var_-16 to i32
  %v2_128e8 = call i32 @function_149b8(i32 7, i32 %v2_128dc)
  %v1_128ec = icmp slt i32 %v2_128e8, 0
  %v5_128f0 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_128ec, i32 256, i32 %v5_128f0
  ret i32 %storemerge
}

define i32 @function_12904(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12904:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12904 = load i32, i32* @r7, align 4
  store i32 %v3_12904, i32* %stack_var_-8, align 4
  %v0_12910 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12910, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_12910, -4095
  br i1 %tmp, label %dec_label_pc_12930, label %dec_label_pc_12920

dec_label_pc_12920:                               ; preds = %dec_label_pc_12904
  %v0_12920 = call i32 @function_1003c()
  %v0_12924 = load i32, i32* %r7.global-to-local, align 4
  %v1_12924 = sub i32 0, %v0_12924
  %v2_12928 = inttoptr i32 %v0_12920 to i32*
  store i32 %v1_12924, i32* %v2_12928, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_12930.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12930

dec_label_pc_12930:                               ; preds = %dec_label_pc_12904, %dec_label_pc_12920
  %v1_12934 = phi i32 [ %v0_12910, %dec_label_pc_12904 ], [ -1, %dec_label_pc_12920 ]
  %v2_12930 = phi i32 [ %v3_12904, %dec_label_pc_12904 ], [ %v2_12930.pre, %dec_label_pc_12920 ]
  store i32 %v2_12930, i32* @r7, align 4
  ret i32 %v1_12934

; uselistorder directives
  uselistorder i32 %v0_12910, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12930, { 1, 0 }
}

define i32 @function_12938(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12938:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12938 = load i32, i32* @r7, align 4
  store i32 %v3_12938, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12960, label %dec_label_pc_12950

dec_label_pc_12950:                               ; preds = %dec_label_pc_12938
  %v0_12950 = call i32 @function_1003c()
  %v0_12954 = load i32, i32* %r7.global-to-local, align 4
  %v1_12954 = sub i32 0, %v0_12954
  %v2_12958 = inttoptr i32 %v0_12950 to i32*
  store i32 %v1_12954, i32* %v2_12958, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_12964.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12960

dec_label_pc_12960:                               ; preds = %dec_label_pc_12938, %dec_label_pc_12950
  %v2_12964 = phi i32 [ %v3_12938, %dec_label_pc_12938 ], [ %v2_12964.pre, %dec_label_pc_12950 ]
  %v0_12960 = phi i32 [ %arg1, %dec_label_pc_12938 ], [ -1, %dec_label_pc_12950 ]
  store i32 %v2_12964, i32* @r7, align 4
  ret i32 %v0_12960

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12960, { 1, 0 }
}

define i32 @function_1296c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1296c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_129a0, label %dec_label_pc_12990

dec_label_pc_12990:                               ; preds = %dec_label_pc_1296c
  %v0_12990 = call i32 @function_1003c()
  %v0_12994 = load i32, i32* %r4.global-to-local, align 4
  %v1_12994 = sub i32 0, %v0_12994
  %v2_12998 = inttoptr i32 %v0_12990 to i32*
  store i32 %v1_12994, i32* %v2_12998, align 4
  br label %dec_label_pc_129a0

dec_label_pc_129a0:                               ; preds = %dec_label_pc_1296c, %dec_label_pc_12990
  %v1_129a8 = phi i32 [ %arg1, %dec_label_pc_1296c ], [ -1, %dec_label_pc_12990 ]
  ret i32 %v1_129a8

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_129a0, { 1, 0 }
}

define i32 @function_129ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_129ac:
  %v1_129bc = load i32, i32* @r0, align 4
  ret i32 %v1_129bc
}

define i32 @function_129c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_129c0:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_129c0 = load i32, i32* @r7, align 4
  store i32 %v3_129c0, i32* %stack_var_-8, align 4
  %v0_129cc = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_129cc, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_129cc, -4095
  br i1 %tmp, label %dec_label_pc_129ec, label %dec_label_pc_129dc

dec_label_pc_129dc:                               ; preds = %dec_label_pc_129c0
  %v0_129dc = call i32 @function_1003c()
  %v0_129e0 = load i32, i32* %r7.global-to-local, align 4
  %v1_129e0 = sub i32 0, %v0_129e0
  %v2_129e4 = inttoptr i32 %v0_129dc to i32*
  store i32 %v1_129e0, i32* %v2_129e4, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_129ec.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_129ec

dec_label_pc_129ec:                               ; preds = %dec_label_pc_129c0, %dec_label_pc_129dc
  %v1_129f0 = phi i32 [ %v0_129cc, %dec_label_pc_129c0 ], [ -1, %dec_label_pc_129dc ]
  %v2_129ec = phi i32 [ %v3_129c0, %dec_label_pc_129c0 ], [ %v2_129ec.pre, %dec_label_pc_129dc ]
  store i32 %v2_129ec, i32* @r7, align 4
  ret i32 %v1_129f0

; uselistorder directives
  uselistorder i32 %v0_129cc, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_129ec, { 1, 0 }
}

define i32 @function_129f4(i32 %arg1) local_unnamed_addr {
dec_label_pc_129f4:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_129f8.outer

dec_label_pc_129f8.outer:                         ; preds = %dec_label_pc_12a10, %dec_label_pc_129f4
  %v0_129f8.ph = phi i32 [ %v0_129f8.pre.pre, %dec_label_pc_12a10 ], [ %arg1, %dec_label_pc_129f4 ]
  %tmp = icmp ult i32 %v0_129f8.ph, -4095
  br label %dec_label_pc_129f8

dec_label_pc_129f8:                               ; preds = %dec_label_pc_129f8.outer, %dec_label_pc_129f8
  br i1 %tmp, label %dec_label_pc_129f8, label %dec_label_pc_12a10

dec_label_pc_12a10:                               ; preds = %dec_label_pc_129f8
  %v0_12a10 = call i32 @function_1003c()
  %v1_12a14 = sub i32 0, %v0_129f8.ph
  %v2_12a18 = inttoptr i32 %v0_12a10 to i32*
  store i32 %v1_12a14, i32* %v2_12a18, align 4
  %v0_129f8.pre.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_129f8.outer

; uselistorder directives
  uselistorder i32 %v0_129f8.ph, { 1, 0 }
  uselistorder label %dec_label_pc_129f8, { 1, 0 }
}

define i32 @function_12a20(i32* %arg1) local_unnamed_addr {
dec_label_pc_12a20:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_12a20 = load i32, i32* @r4, align 4
  store i32 %v3_12a20, i32* %stack_var_-24, align 4
  %v2_12a24 = load i32, i32* %arg1, align 4
  store i32 %v2_12a24, i32* %r4.global-to-local, align 4
  %v3_12a2c = icmp eq i32 %v2_12a24, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 122896, i32* @r6, align 4
  br i1 %v3_12a2c, label %dec_label_pc_12a40, label %dec_label_pc_12a54

dec_label_pc_12a40:                               ; preds = %dec_label_pc_12a20
  %v0_12a40 = call i32 @function_1003c()
  store i32 9, i32* %r3.global-to-local, align 4
  %v0_12a48 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12a48, i32* %r2.global-to-local, align 4
  %v2_12a4c = inttoptr i32 %v0_12a40 to i32*
  store i32 9, i32* %v2_12a4c, align 4
  %v0_12af4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12af4

dec_label_pc_12a54:                               ; preds = %dec_label_pc_12a20
  store i32 36, i32* %r3.global-to-local, align 4
  %v1_12a58 = add i32 %tmp, 24
  store i32 %v1_12a58, i32* %r4.global-to-local, align 4
  store i32 %v1_12a58, i32* %r2.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_12a6c = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_12a6c)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_12a84 = load i32, i32* @r6, align 4
  %v2_12a84 = add i32 %v0_12a84, 16
  %v3_12a84 = inttoptr i32 %v2_12a84 to i32*
  %v4_12a84 = load i32, i32* %v3_12a84, align 4
  call void @__pseudo_branch(i32 %v4_12a84)
  %v0_12a90 = load i32, i32* @r7, align 4
  %v1_12a90 = inttoptr i32 %v0_12a90 to i32*
  %v2_12a90 = load i32, i32* %v1_12a90, align 4
  store i32 %v2_12a90, i32* @r4, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_12aa0 = load i32, i32* @r8, align 4
  store i32 %v0_12aa0, i32* %v1_12a90, align 4
  %v0_12aa4 = load i32, i32* @r6, align 4
  %v1_12aa4 = load i32, i32* %r3.global-to-local, align 4
  %v2_12aa4 = add i32 %v1_12aa4, %v0_12aa4
  %v3_12aa4 = inttoptr i32 %v2_12aa4 to i32*
  %v4_12aa4 = load i32, i32* %v3_12aa4, align 4
  store i32 ptrtoint (i32* @global_var_12ab0.717 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12aa4)
  %v0_12ab0 = load i32, i32* @r7, align 4
  %v1_12ab0 = add i32 %v0_12ab0, 12
  %v2_12ab0 = inttoptr i32 %v1_12ab0 to i32*
  %v3_12ab0 = load i32, i32* %v2_12ab0, align 4
  store i32 %v3_12ab0, i32* @r0, align 4
  %v0_12ab4 = call i32 @function_11638()
  %v0_12ab8 = load i32, i32* @r7, align 4
  store i32 %v0_12ab8, i32* @r0, align 4
  %v0_12abc = call i32 @function_11638()
  %v0_12ac4 = load i32, i32* @r4, align 4
  %tmp11 = icmp ult i32 %v0_12ac4, -4095
  br i1 %tmp11, label %dec_label_pc_12af0, label %dec_label_pc_12ae0

dec_label_pc_12ae0:                               ; preds = %dec_label_pc_12a54
  %v0_12ae0 = call i32 @function_1003c()
  %v0_12ae4 = load i32, i32* @r4, align 4
  %v1_12ae4 = sub i32 0, %v0_12ae4
  store i32 %v1_12ae4, i32* %r3.global-to-local, align 4
  %v2_12ae8 = inttoptr i32 %v0_12ae0 to i32*
  store i32 %v1_12ae4, i32* %v2_12ae8, align 4
  %v0_12aec = load i32, i32* @r8, align 4
  br label %dec_label_pc_12af0

dec_label_pc_12af0:                               ; preds = %dec_label_pc_12a54, %dec_label_pc_12ae0
  %v0_12af0 = phi i32 [ %v0_12ac4, %dec_label_pc_12a54 ], [ %v0_12aec, %dec_label_pc_12ae0 ]
  store i32 %v0_12af0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12af4

dec_label_pc_12af4:                               ; preds = %dec_label_pc_12a40, %dec_label_pc_12af0
  %v0_12af4 = phi i32 [ %v0_12af4.pre, %dec_label_pc_12a40 ], [ %v0_12af0, %dec_label_pc_12af0 ]
  %v2_12afc = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12afc, i32* %r4.global-to-local, align 4
  ret i32 %v0_12af4

; uselistorder directives
  uselistorder i32 %v0_12ac4, { 1, 0 }
  uselistorder label %dec_label_pc_12af4, { 1, 0 }
  uselistorder label %dec_label_pc_12af0, { 1, 0 }
}

define i32 @function_12b08(i32 %arg1) local_unnamed_addr {
dec_label_pc_12b08:
  %v0_12b08 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12b08, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12b08
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12b08, %bb
  %v10_12b14 = phi i32 [ %arg1, %dec_label_pc_12b08 ], [ 0, %bb ]
  ret i32 %v10_12b14

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_12b18(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12b18:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v12_12b18 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_12b2c = call i32 @function_105cc()
  %v2_12b34 = icmp eq i32 %v0_12b2c, 0
  store i32 122896, i32* @r6, align 4
  br i1 %v2_12b34, label %bb, label %dec_label_pc_12b44

bb:                                               ; preds = %dec_label_pc_12b18
  br label %dec_label_pc_12bd0

dec_label_pc_12b44:                               ; preds = %dec_label_pc_12b18
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_12b48 = load i32, i32* @r4, align 4
  %v2_12b48 = icmp ugt i32 %v0_12b48, 511
  %v2_12b4c = add i32 %v0_12b2c, 4
  %v3_12b4c = inttoptr i32 %v2_12b4c to i32*
  store i32 0, i32* %v3_12b4c, align 4
  %v0_12b50 = load i32, i32* %r3.global-to-local, align 4
  %v2_12b50 = add i32 %v0_12b2c, 16
  %v3_12b50 = inttoptr i32 %v2_12b50 to i32*
  store i32 %v0_12b50, i32* %v3_12b50, align 4
  %v0_12b54 = load i32, i32* %r3.global-to-local, align 4
  %v2_12b54 = add i32 %v0_12b2c, 8
  %v3_12b54 = inttoptr i32 %v2_12b54 to i32*
  store i32 %v0_12b54, i32* %v3_12b54, align 4
  br i1 %v2_12b48, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_12b44
  %v0_12b5c2 = load i32, i32* @r4, align 4
  %v2_12b5c3 = add i32 %v0_12b2c, 20
  %v3_12b5c4 = inttoptr i32 %v2_12b5c3 to i32*
  store i32 %v0_12b5c2, i32* %v3_12b5c4, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_12b44
  %v1_12b58 = load i32, i32* %r3.global-to-local, align 4
  %v2_12b58 = add i32 %v1_12b58, 512
  store i32 %v2_12b58, i32* %r3.global-to-local, align 4
  %v0_12b5c = load i32, i32* @r4, align 4
  %v2_12b5c = add i32 %v0_12b2c, 20
  %v3_12b5c = inttoptr i32 %v2_12b5c to i32*
  store i32 %v0_12b5c, i32* %v3_12b5c, align 4
  %v1_12b60 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_12b60, i32* %v3_12b5c, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_12b2c, i32* @r5, align 4
  %v0_12b68 = load i32, i32* @r7, align 4
  %v2_12b68 = inttoptr i32 %v0_12b2c to i32*
  store i32 %v0_12b68, i32* %v2_12b68, align 4
  %v0_12b6c = load i32, i32* @r5, align 4
  %v1_12b6c = add i32 %v0_12b6c, 20
  %v2_12b6c = inttoptr i32 %v1_12b6c to i32*
  %v3_12b6c = load i32, i32* %v2_12b6c, align 4
  store i32 %v3_12b6c, i32* %r1.global-to-local, align 4
  %v2_12b74 = call i32 @function_10eec(i32 1, i32 %v3_12b6c)
  %v2_12b78 = icmp eq i32 %v2_12b74, 0
  store i32 %v2_12b74, i32* @r4, align 4
  %v1_12b80 = load i32, i32* @r5, align 4
  %v2_12b80 = add i32 %v1_12b80, 12
  %v3_12b80 = inttoptr i32 %v2_12b80 to i32*
  store i32 %v2_12b74, i32* %v3_12b80, align 4
  br i1 %v2_12b78, label %dec_label_pc_12b88, label %dec_label_pc_12b98

dec_label_pc_12b88:                               ; preds = %bb17
  %v0_12b88 = load i32, i32* @r5, align 4
  store i32 %v0_12b88, i32* @r0, align 4
  %v0_12b8c = call i32 @function_11638()
  %v0_12b90 = load i32, i32* @r4, align 4
  br label %dec_label_pc_12bd0

dec_label_pc_12b98:                               ; preds = %bb17
  store i32 0, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_12bc0 = load i32, i32* @r5, align 4
  %v1_12bc0 = add i32 %v0_12bc0, 24
  %v1_12bc4 = inttoptr i32 %v1_12bc0 to i32*
  store i32 0, i32* %v1_12bc4, align 4
  %v3_12bc4 = add i32 %v0_12bc0, 28
  %v4_12bc4 = inttoptr i32 %v3_12bc4 to i32*
  %v5_12bc4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_12bc4, i32* %v4_12bc4, align 4
  %v6_12bc4 = add i32 %v0_12bc0, 32
  %v7_12bc4 = inttoptr i32 %v6_12bc4 to i32*
  %v8_12bc4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_12bc4, i32* %v7_12bc4, align 4
  %v9_12bc4 = add i32 %v0_12bc0, 36
  %v10_12bc4 = inttoptr i32 %v9_12bc4 to i32*
  %v11_12bc4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_12bc4, i32* %v10_12bc4, align 4
  %v12_12bc4 = add i32 %v0_12bc0, 40
  %v2_12bc8 = load i32, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_12bcc = inttoptr i32 %v12_12bc4 to i32*
  store i32 %v2_12bc8, i32* %v1_12bcc, align 4
  %v3_12bcc = add i32 %v0_12bc0, 44
  %v4_12bcc = inttoptr i32 %v3_12bcc to i32*
  %v5_12bcc = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_12bcc, i32* %v4_12bcc, align 4
  %v0_12bd0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12bd0

dec_label_pc_12bd0:                               ; preds = %bb, %dec_label_pc_12b88, %dec_label_pc_12b98
  %v0_12bd0 = phi i32 [ 0, %bb ], [ %v0_12b90, %dec_label_pc_12b88 ], [ %v0_12bd0.pre, %dec_label_pc_12b98 ]
  store i32 %v12_12b18, i32* @r7, align 4
  ret i32 %v0_12bd0

; uselistorder directives
  uselistorder i32 %v2_12b74, { 1, 0, 2 }
  uselistorder i32 %v0_12b2c, { 2, 1, 4, 0, 6, 3, 5, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 512, { 5, 2, 6, 3, 7, 4, 8, 0, 9, 1, 10 }
  uselistorder label %dec_label_pc_12bd0, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @function_12be8(i32 %arg1) local_unnamed_addr {
dec_label_pc_12be8:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v2_12bf0 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %arg1, i32* @r7, align 4
  %tmp7 = icmp ult i32 %arg1, -4095
  br i1 %tmp7, label %dec_label_pc_12c18, label %dec_label_pc_12c08

dec_label_pc_12c08:                               ; preds = %dec_label_pc_12be8
  %v0_12c08 = call i32 @function_1003c()
  %v0_12c0c = load i32, i32* @r7, align 4
  %v1_12c0c = sub i32 0, %v0_12c0c
  %v2_12c10 = inttoptr i32 %v0_12c08 to i32*
  store i32 %v1_12c0c, i32* %v2_12c10, align 4
  br label %dec_label_pc_12c3c

dec_label_pc_12c18:                               ; preds = %dec_label_pc_12be8
  %v1_12c18 = icmp slt i32 %arg1, 0
  br i1 %v1_12c18, label %dec_label_pc_12c3c, label %dec_label_pc_12c20

dec_label_pc_12c20:                               ; preds = %dec_label_pc_12c18
  store i32 %v2_12bf0, i32* @r1, align 4
  %v0_12c24 = call i32 @function_149ec()
  %v1_12c28 = icmp slt i32 %v0_12c24, 0
  br i1 %v1_12c28, label %dec_label_pc_12c30, label %dec_label_pc_12c44

dec_label_pc_12c30:                               ; preds = %dec_label_pc_12c20
  br label %dec_label_pc_12c3c

dec_label_pc_12c3c:                               ; preds = %dec_label_pc_12c30, %dec_label_pc_12c18, %dec_label_pc_12c08
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12c80

dec_label_pc_12c44:                               ; preds = %dec_label_pc_12c20
  %v0_12c4c = load i32, i32* @r7, align 4
  %v3_12c50 = call i32 @function_fea8(i32 %v0_12c4c, i32 2, i32 1)
  %v0_12c54 = load i32, i32* @r7, align 4
  %v2_12c5c = call i32 @function_12b18(i32 %v0_12c54, i32 %tmp)
  store i32 %v2_12c5c, i32* %r4.global-to-local, align 4
  %v2_12c60 = icmp eq i32 %v2_12c5c, 0
  br i1 %v2_12c60, label %dec_label_pc_12c68, label %dec_label_pc_12c80

dec_label_pc_12c68:                               ; preds = %dec_label_pc_12c44
  %v0_12c74 = call i32 @function_1003c()
  %v2_12c7c = inttoptr i32 %v0_12c74 to i32*
  store i32 12, i32* %v2_12c7c, align 4
  %v0_12c80.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12c80

dec_label_pc_12c80:                               ; preds = %dec_label_pc_12c44, %dec_label_pc_12c3c, %dec_label_pc_12c68
  %v0_12c80 = phi i32 [ %v2_12c5c, %dec_label_pc_12c44 ], [ 0, %dec_label_pc_12c3c ], [ %v0_12c80.pre, %dec_label_pc_12c68 ]
  ret i32 %v0_12c80

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_12c80, { 2, 0, 1 }
}

define i32 @function_12c90(i32 %arg1) local_unnamed_addr {
dec_label_pc_12c90:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v0_12c90 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12c90, label %bb, label %dec_label_pc_12c90._crit_edge

dec_label_pc_12c90._crit_edge:                    ; preds = %dec_label_pc_12c90
  br label %bb11

bb:                                               ; preds = %dec_label_pc_12c90
  br label %bb11

bb11:                                             ; preds = %dec_label_pc_12c90._crit_edge, %bb
  %v2_12c98 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_12c98, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_12ca4 = call i32 @function_149ec()
  store i32 %v0_12ca4, i32* @r5, align 4
  %v2_12ca8 = icmp eq i32 %v0_12ca4, 0
  br i1 %v2_12ca8, label %dec_label_pc_12cb0, label %dec_label_pc_12d18

dec_label_pc_12cb0:                               ; preds = %bb11
  %v1_12cb4 = and i32 %tmp5, 61440
  store i32 %v1_12cb4, i32* @r3, align 4
  %v7_12cb8 = icmp eq i32 %v1_12cb4, 16384
  br i1 %v7_12cb8, label %dec_label_pc_12cd0, label %dec_label_pc_12cc0

dec_label_pc_12cc0:                               ; preds = %dec_label_pc_12cb0
  %v0_12cc0 = call i32 @function_1003c()
  br label %dec_label_pc_12cfc

dec_label_pc_12cd0:                               ; preds = %dec_label_pc_12cb0
  %v0_12cd0 = load i32, i32* @r4, align 4
  %v2_12cd8 = call i32 @function_fe3c(i32 %v0_12cd0, i32 3)
  %v7_12cdc = icmp eq i32 %v2_12cd8, -1
  br i1 %v7_12cdc, label %dec_label_pc_12d18, label %dec_label_pc_12ce4

dec_label_pc_12ce4:                               ; preds = %dec_label_pc_12cd0
  %v1_12ce4 = urem i32 %v2_12cd8, 4
  %v7_12ce8 = icmp eq i32 %v1_12ce4, 1
  br i1 %v7_12ce8, label %dec_label_pc_12cf0, label %dec_label_pc_12d04

dec_label_pc_12cf0:                               ; preds = %dec_label_pc_12ce4
  %v0_12cf0 = call i32 @function_1003c()
  br label %dec_label_pc_12cfc

dec_label_pc_12cfc:                               ; preds = %dec_label_pc_12cc0, %dec_label_pc_12cf0
  %storemerge2 = phi i32 [ %v0_12cc0, %dec_label_pc_12cc0 ], [ %v0_12cf0, %dec_label_pc_12cf0 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_12cc0 ], [ 22, %dec_label_pc_12cf0 ]
  %storemerge1 = load i32, i32* @r5, align 4
  store i32 %storemerge1, i32* %r2.global-to-local, align 4
  %v2_12cfc = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_12cfc, align 4
  %v0_12d1c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d1c

dec_label_pc_12d04:                               ; preds = %dec_label_pc_12ce4
  %v0_12d04 = load i32, i32* @r4, align 4
  %v2_12d0c = call i32 @function_12b18(i32 %v0_12d04, i32 %tmp)
  store i32 %v2_12d0c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d1c

dec_label_pc_12d18:                               ; preds = %bb11, %dec_label_pc_12cd0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d1c

dec_label_pc_12d1c:                               ; preds = %dec_label_pc_12d04, %dec_label_pc_12cfc, %dec_label_pc_12d18
  %v0_12d1c = phi i32 [ %v2_12d0c, %dec_label_pc_12d04 ], [ %v0_12d1c.pre, %dec_label_pc_12cfc ], [ 0, %dec_label_pc_12d18 ]
  ret i32 %v0_12d1c

; uselistorder directives
  uselistorder i32 %v2_12cd8, { 1, 0 }
  uselistorder label %dec_label_pc_12d1c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12d18, { 1, 0 }
  uselistorder label %dec_label_pc_12cfc, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @function_12d2c(i32* %arg1) local_unnamed_addr {
dec_label_pc_12d2c:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 122896, i32* @r6, align 4
  %v1_12d40 = add i32 %tmp, 24
  store i32 %v1_12d40, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_12d58 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  store i32 %v4_12d58, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12d58)
  %v0_12d6c = load i32, i32* @r6, align 4
  %v2_12d6c = add i32 %v0_12d6c, 16
  %v3_12d6c = inttoptr i32 %v2_12d6c to i32*
  %v4_12d6c = load i32, i32* %v3_12d6c, align 4
  store i32 %v4_12d6c, i32* %ip.global-to-local, align 4
  store i32 77176, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12d6c)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_12d7c

dec_label_pc_12d7c:                               ; preds = %dec_label_pc_12dac, %dec_label_pc_12d2c
  %v0_12d7c = load i32, i32* @r5, align 4
  %v1_12d7c = add i32 %v0_12d7c, 4
  %v2_12d7c = inttoptr i32 %v1_12d7c to i32*
  %v3_12d7c = load i32, i32* %v2_12d7c, align 4
  %v4_12d7c = add i32 %v0_12d7c, 8
  %v5_12d7c = inttoptr i32 %v4_12d7c to i32*
  %v6_12d7c = load i32, i32* %v5_12d7c, align 4
  %tmp10 = icmp ugt i32 %v6_12d7c, %v3_12d7c
  br i1 %tmp10, label %dec_label_pc_12dac, label %dec_label_pc_12d88

dec_label_pc_12d88:                               ; preds = %dec_label_pc_12d7c
  %v1_12d88 = inttoptr i32 %v0_12d7c to i32*
  %v2_12d88 = load i32, i32* %v1_12d88, align 4
  %v1_12d8c = add i32 %v0_12d7c, 12
  %v2_12d8c = inttoptr i32 %v1_12d8c to i32*
  %v3_12d8c = load i32, i32* %v2_12d8c, align 4
  %v1_12d90 = add i32 %v0_12d7c, 20
  %v2_12d90 = inttoptr i32 %v1_12d90 to i32*
  %v3_12d90 = load i32, i32* %v2_12d90, align 4
  %v4_12d94 = inttoptr i32 %v3_12d8c to i32*
  %v5_12d94 = call i32 @function_14c74(i32 %v2_12d88, i32* %v4_12d94, i32 %v3_12d90, i32 %v6_12d7c)
  %tmp9 = icmp slt i32 %v5_12d94, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_12da4

.thread:                                          ; preds = %dec_label_pc_12d88
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12ddc

dec_label_pc_12da4:                               ; preds = %dec_label_pc_12d88
  %v1_12da4 = load i32, i32* @r5, align 4
  %v2_12da4 = add i32 %v1_12da4, 8
  %v3_12da4 = inttoptr i32 %v2_12da4 to i32*
  store i32 %v5_12d94, i32* %v3_12da4, align 4
  %v0_12da8 = load i32, i32* @r7, align 4
  %v1_12da8 = load i32, i32* @r5, align 4
  %v2_12da8 = add i32 %v1_12da8, 4
  %v3_12da8 = inttoptr i32 %v2_12da8 to i32*
  store i32 %v0_12da8, i32* %v3_12da8, align 4
  %v0_12dac.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12dac

dec_label_pc_12dac:                               ; preds = %dec_label_pc_12d7c, %dec_label_pc_12da4
  %v1_12dd0 = phi i32 [ %v0_12d7c, %dec_label_pc_12d7c ], [ %v0_12dac.pre, %dec_label_pc_12da4 ]
  %v1_12dac = add i32 %v1_12dd0, 4
  %v2_12dac = inttoptr i32 %v1_12dac to i32*
  %v3_12dac = load i32, i32* %v2_12dac, align 4
  %v1_12db0 = add i32 %v1_12dd0, 12
  %v2_12db0 = inttoptr i32 %v1_12db0 to i32*
  %v3_12db0 = load i32, i32* %v2_12db0, align 4
  %v2_12db4 = add i32 %v3_12db0, %v3_12dac
  store i32 %v2_12db4, i32* @r4, align 4
  %v3_12db8 = inttoptr i32 %v2_12db4 to i32*
  %v4_12db8 = load i32, i32* %v3_12db8, align 4
  %v1_12dbc = add i32 %v2_12db4, 4
  %v2_12dbc = inttoptr i32 %v1_12dbc to i32*
  %v3_12dbc = load i32, i32* %v2_12dbc, align 4
  %v1_12dc0 = add i32 %v2_12db4, 16
  %v2_12dc0 = inttoptr i32 %v1_12dc0 to i16*
  %v3_12dc0 = load i16, i16* %v2_12dc0, align 2
  %v4_12dc0 = zext i16 %v3_12dc0 to i32
  %v1_12dc4 = add i32 %v2_12db4, 8
  %v2_12dc4 = inttoptr i32 %v1_12dc4 to i32*
  %v3_12dc4 = load i32, i32* %v2_12dc4, align 4
  store i32 %v3_12dc4, i32* %ip.global-to-local, align 4
  %v2_12dc8 = add i32 %v4_12dc0, %v3_12dac
  %v2_12dcc = or i32 %v3_12dbc, %v4_12db8
  %v4_12dcc = icmp eq i32 %v2_12dcc, 0
  store i32 %v2_12dc8, i32* %v2_12dac, align 4
  %v0_12dd4 = load i32, i32* %ip.global-to-local, align 4
  %v1_12dd4 = load i32, i32* @r5, align 4
  %v2_12dd4 = add i32 %v1_12dd4, 16
  %v3_12dd4 = inttoptr i32 %v2_12dd4 to i32*
  store i32 %v0_12dd4, i32* %v3_12dd4, align 4
  br i1 %v4_12dcc, label %dec_label_pc_12d7c, label %dec_label_pc_12ddc

dec_label_pc_12ddc:                               ; preds = %dec_label_pc_12dac, %.thread
  %v0_12de8 = load i32, i32* @r6, align 4
  %v2_12de8 = add i32 %v0_12de8, 24
  %v3_12de8 = inttoptr i32 %v2_12de8 to i32*
  %v4_12de8 = load i32, i32* %v3_12de8, align 4
  store i32 %v4_12de8, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12de8)
  %v0_12df4 = load i32, i32* @r4, align 4
  ret i32 %v0_12df4

; uselistorder directives
  uselistorder i32 %v2_12db4, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_12dd0, { 1, 0 }
  uselistorder i32 %v6_12d7c, { 1, 0 }
  uselistorder i32 %v0_12d7c, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_12dac, { 1, 0 }
}

define i32 @function_12e08(i32 %arg1) local_unnamed_addr {
dec_label_pc_12e08:
  %v0_12e08 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12e08, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_12e08
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12e08, %bb
  %v10_12e14 = phi i32 [ %arg1, %dec_label_pc_12e08 ], [ 0, %bb ]
  ret i32 %v10_12e14

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_12e18(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12e18:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_12e18 = load i32, i32* @r4, align 4
  %v6_12e18 = load i32, i32* @r5, align 4
  %v9_12e18 = load i32, i32* @r6, align 4
  %v12_12e18 = load i32, i32* @r7, align 4
  %v15_12e18 = load i32, i32* @r8, align 4
  %v18_12e18 = load i32, i32* @sb, align 4
  %v21_12e18 = load i32, i32* @sl, align 4
  %v24_12e18 = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_12e1c = icmp eq i32* %arg1, null
  store i1 %v2_12e1c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_12e1c, label %dec_label_pc_1312c, label %dec_label_pc_12e34

dec_label_pc_12e34:                               ; preds = %dec_label_pc_12e18
  %v1_12e34 = urem i32 %arg3, 256
  store i32 %v1_12e34, i32* @sb, align 4
  %v1_12e38 = udiv i32 %arg3, 256
  %v3_12e3c = urem i32 %v1_12e38, 256
  %v3_12e40 = mul nuw nsw i32 %v1_12e34, 4
  %v1_12e48 = or i32 %v3_12e40, 1
  %v1_12e54 = and i32 %arg3, 131072
  %v1_12e58 = add nsw i32 %v1_12e34, -1
  %v1_12e64 = and i32 %arg3, 262144
  store i32 %v1_12e64, i32* %r2.global-to-local, align 4
  %v1_12e68 = and i32 %arg3, 65536
  store i32 %v1_12e68, i32* %r3.global-to-local, align 4
  store i32 %v1_12e68, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_12e78 = add i32 %arg4, 1
  store i32 %v1_12e78, i32* @sl, align 4
  %v2_12ff8 = inttoptr i32 %arg2 to i32*
  %v2_13008 = icmp eq i32 %v1_12e54, 0
  %v2_13060 = icmp eq i32 %v1_12e64, 0
  br label %dec_label_pc_12e7c

dec_label_pc_12e7c:                               ; preds = %dec_label_pc_12e7c.backedge, %dec_label_pc_12e34
  %v2_12e98 = phi i32 [ %v0_12e7c.pre, %dec_label_pc_12e7c.backedge ], [ %tmp, %dec_label_pc_12e34 ]
  %v1_12e7c = add i32 %v2_12e98, 4
  %v2_12e7c = inttoptr i32 %v1_12e7c to i32*
  %v3_12e7c = load i32, i32* %v2_12e7c, align 4
  store i32 %v3_12e7c, i32* %r3.global-to-local, align 4
  %v2_12e80 = icmp eq i32 %v3_12e7c, 0
  store i1 %v2_12e80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12e80, label %dec_label_pc_12e88, label %dec_label_pc_12ed0

dec_label_pc_12e88:                               ; preds = %dec_label_pc_12e7c
  %v1_12e88 = add i32 %v2_12e98, 16
  %v2_12e88 = inttoptr i32 %v1_12e88 to i32*
  %v3_12e88 = load i32, i32* %v2_12e88, align 4
  store i32 %v3_12e88, i32* %r3.global-to-local, align 4
  %v2_12e8c = icmp eq i32 %v3_12e88, 0
  store i1 %v2_12e8c, i1* %cpsr_z.global-to-local, align 1
  %v1_12e90 = add i32 %v2_12e98, 8
  %v2_12e90 = inttoptr i32 %v1_12e90 to i32*
  %v3_12e90 = load i32, i32* %v2_12e90, align 4
  store i32 %v3_12e90, i32* %r3.global-to-local, align 4
  br i1 %v2_12e8c, label %bb, label %bb66

bb:                                               ; preds = %dec_label_pc_12e88
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_12e88, align 4
  %v0_12e9c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_12e88, %bb
  %v0_12e9c = phi i32 [ %v0_12e9c.pre, %bb ], [ %v3_12e90, %dec_label_pc_12e88 ]
  %v2_12e9c = icmp eq i32 %v0_12e9c, 0
  store i1 %v2_12e9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12e9c, label %bb67, label %.thread

bb67:                                             ; preds = %bb66
  store i32 %v1_12e48, i32* %r3.global-to-local, align 4
  %v2_12ea4 = load i32, i32* @r5, align 4
  %v3_12ea4 = add i32 %v2_12ea4, 8
  %v4_12ea4 = inttoptr i32 %v3_12ea4 to i32*
  store i32 %v1_12e48, i32* %v4_12ea4, align 4
  br label %.thread

.thread:                                          ; preds = %bb66, %bb67
  %v0_12ea8 = load i32, i32* @r5, align 4
  %v1_12ea8 = add i32 %v0_12ea8, 16
  %v2_12ea8 = inttoptr i32 %v1_12ea8 to i32*
  %v3_12ea8 = load i32, i32* %v2_12ea8, align 4
  store i32 %v3_12ea8, i32* %r0.global-to-local, align 4
  %v1_12eac = add i32 %v0_12ea8, 8
  %v2_12eac = inttoptr i32 %v1_12eac to i32*
  %v3_12eac = load i32, i32* %v2_12eac, align 4
  store i32 %v3_12eac, i32* %r3.global-to-local, align 4
  %v2_12eb0 = add i32 %v3_12eac, %v3_12ea8
  store i32 %v2_12eb0, i32* @r0, align 4
  %v0_12eb4 = call i32 @function_105cc()
  store i32 %v0_12eb4, i32* %r0.global-to-local, align 4
  %v2_12eb8 = icmp eq i32 %v0_12eb4, 0
  store i1 %v2_12eb8, i1* %cpsr_z.global-to-local, align 1
  %v1_12ebc = load i32, i32* @r5, align 4
  %v2_12ebc = add i32 %v1_12ebc, 4
  %v3_12ebc = inttoptr i32 %v2_12ebc to i32*
  store i32 %v0_12eb4, i32* %v3_12ebc, align 4
  br i1 %v2_12eb8, label %dec_label_pc_1312c, label %dec_label_pc_12ec4

dec_label_pc_12ec4:                               ; preds = %.thread
  %v0_12ec4 = load i32, i32* @r5, align 4
  %v1_12ec4 = add i32 %v0_12ec4, 20
  %v2_12ec4 = inttoptr i32 %v1_12ec4 to i32*
  %v3_12ec4 = load i32, i32* %v2_12ec4, align 4
  %v1_12ec8 = or i32 %v3_12ec4, 1
  store i32 %v1_12ec8, i32* %r3.global-to-local, align 4
  store i32 %v1_12ec8, i32* %v2_12ec4, align 4
  %v0_12ed0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12ed0

dec_label_pc_12ed0:                               ; preds = %dec_label_pc_12e7c, %dec_label_pc_12ec4
  %v1_12ed8 = phi i32 [ %v2_12e98, %dec_label_pc_12e7c ], [ %v0_12ed0.pre, %dec_label_pc_12ec4 ]
  %v1_12ed0 = add i32 %v1_12ed8, 4
  %v2_12ed0 = inttoptr i32 %v1_12ed0 to i32*
  %v3_12ed0 = load i32, i32* %v2_12ed0, align 4
  store i32 %v3_12ed0, i32* %r2.global-to-local, align 4
  %v4_12ed0 = add i32 %v1_12ed8, 8
  %v5_12ed0 = inttoptr i32 %v4_12ed0 to i32*
  %v6_12ed0 = load i32, i32* %v5_12ed0, align 4
  %v2_12ed4 = add i32 %v6_12ed0, %v3_12ed0
  store i32 %v2_12ed4, i32* %r3.global-to-local, align 4
  %v2_12ed8 = add i32 %v1_12ed8, 12
  %v3_12ed8 = inttoptr i32 %v2_12ed8 to i32*
  store i32 %v2_12ed4, i32* %v3_12ed8, align 4
  %v0_12edc = load i32, i32* @fp, align 4
  store i32 %v0_12edc, i32* @r6, align 4
  br label %dec_label_pc_12ee0

dec_label_pc_12ee0:                               ; preds = %dec_label_pc_12f6c, %dec_label_pc_12f58, %dec_label_pc_12ed0
  %v0_12ee8 = phi i32 [ %v0_12edc, %dec_label_pc_12ed0 ], [ %v1_12f58, %dec_label_pc_12f58 ], [ %v0_12ee8.pre.pre, %dec_label_pc_12f6c ]
  %v0_12ee0 = load i32, i32* @r5, align 4
  %v1_12ee0 = add i32 %v0_12ee0, 12
  store i32 %v1_12ee0, i32* %r0.global-to-local, align 4
  %v1_12ee4 = inttoptr i32 %v1_12ee0 to i32*
  %v2_12ee4 = load i32, i32* %v1_12ee4, align 4
  store i32 %v2_12ee4, i32* %r0.global-to-local, align 4
  %v3_12ee4 = add i32 %v0_12ee0, 16
  %v4_12ee4 = inttoptr i32 %v3_12ee4 to i32*
  %v5_12ee4 = load i32, i32* %v4_12ee4, align 4
  %v2_12ee8 = add i32 %v2_12ee4, %v0_12ee8
  store i32 %v2_12ee8, i32* %r0.global-to-local, align 4
  %v2_12eec = sub i32 %v5_12ee4, %v0_12ee8
  %v1_12ef0 = inttoptr i32 %v0_12ee0 to i32*
  %v2_12ef0 = load i32, i32* %v1_12ef0, align 4
  store i32 %v2_12ef0, i32* %r2.global-to-local, align 4
  %v3_12ef4 = call i32 @function_13914(i32 %v2_12ee8, i32 %v2_12eec, i32 %v2_12ef0)
  store i32 %v3_12ef4, i32* %r0.global-to-local, align 4
  store i32 %v3_12ef4, i32* %r4.global-to-local, align 4
  %v2_12ef8 = icmp eq i32 %v3_12ef4, 0
  store i1 %v2_12ef8, i1* %cpsr_z.global-to-local, align 1
  %v0_12f00 = load i32, i32* @r5, align 4
  %v1_12f00 = add i32 %v0_12f00, 12
  br i1 %v2_12ef8, label %dec_label_pc_12f00, label %dec_label_pc_12f18

dec_label_pc_12f00:                               ; preds = %dec_label_pc_12ee0
  store i32 %v1_12f00, i32* %r0.global-to-local, align 4
  %v1_12f04 = inttoptr i32 %v1_12f00 to i32*
  %v2_12f04 = load i32, i32* %v1_12f04, align 4
  store i32 %v2_12f04, i32* %r0.global-to-local, align 4
  %v3_12f04 = add i32 %v0_12f00, 16
  %v4_12f04 = inttoptr i32 %v3_12f04 to i32*
  %v5_12f04 = load i32, i32* %v4_12f04, align 4
  store i32 %v5_12f04, i32* @r2, align 4
  %v2_12f0c = inttoptr i32 %v2_12f04 to i8*
  %v3_12f0c = call i32 @function_143c0(i8* %v2_12f0c, i32 0)
  store i32 %v3_12f0c, i32* %r0.global-to-local, align 4
  %v0_12f10 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13130

dec_label_pc_12f18:                               ; preds = %dec_label_pc_12ee0
  %v2_12f18 = inttoptr i32 %v1_12f00 to i32*
  %v3_12f18 = load i32, i32* %v2_12f18, align 4
  store i32 %v3_12f18, i32* @r4, align 4
  %v1_12f1c = load i32, i32* @r6, align 4
  %v2_12f1c = add i32 %v1_12f1c, %v3_12f18
  store i32 %v2_12f1c, i32* %r0.global-to-local, align 4
  %v1_12f20 = call i32 @function_14460(i32 %v2_12f1c)
  %v0_12f28 = load i32, i32* @r6, align 4
  %v2_12f28 = add i32 %v0_12f28, %v1_12f20
  store i32 %v2_12f28, i32* @r6, align 4
  %v0_12f2c = load i32, i32* @r4, align 4
  store i32 %v0_12f2c, i32* @r0, align 4
  %v2_12f30 = call i32 @function_146ac(i32 %v0_12f2c, i32 10)
  store i32 %v2_12f30, i32* %r0.global-to-local, align 4
  %v2_12f34 = icmp eq i32 %v2_12f30, 0
  store i1 %v2_12f34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12f34, label %dec_label_pc_12f60, label %dec_label_pc_12f3c

dec_label_pc_12f3c:                               ; preds = %dec_label_pc_12f18
  %v1_12f3c = inttoptr i32 %v2_12f30 to i8*
  %v2_12f3c = load i8, i8* %v1_12f3c, align 1
  %v3_12f3c = zext i8 %v2_12f3c to i32
  %v1_12f40 = add nuw nsw i32 %v3_12f3c, 255
  %v1_12f44 = urem i32 %v1_12f40, 256
  store i32 %v1_12f44, i32* %r3.global-to-local, align 4
  %v7_12f48 = icmp eq i32 %v1_12f44, 92
  store i1 %v7_12f48, i1* %cpsr_z.global-to-local, align 1
  %v1_12f4c = trunc i32 %v1_12f40 to i8
  store i8 %v1_12f4c, i8* %v1_12f3c, align 1
  %v0_12f50 = load i32, i32* @r6, align 4
  %v1_12f50 = add i32 %v0_12f50, -1
  store i32 %v1_12f50, i32* @r6, align 4
  %v0_12f54 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12f54, label %dec_label_pc_12f58, label %dec_label_pc_12fe4

dec_label_pc_12f58:                               ; preds = %dec_label_pc_12f3c
  %v1_12f58 = add i32 %v0_12f50, -2
  store i32 %v1_12f58, i32* @r6, align 4
  br label %dec_label_pc_12ee0

dec_label_pc_12f60:                               ; preds = %dec_label_pc_12f18
  %v0_12f60 = load i32, i32* @r5, align 4
  %v1_12f60 = add i32 %v0_12f60, 20
  %v2_12f60 = inttoptr i32 %v1_12f60 to i32*
  %v3_12f60 = load i32, i32* %v2_12f60, align 4
  store i32 %v3_12f60, i32* %r3.global-to-local, align 4
  %v2_12f64 = icmp eq i32 %v3_12f60, 0
  store i1 %v2_12f64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12f64, label %dec_label_pc_12f9c, label %dec_label_pc_12f6c

dec_label_pc_12f6c:                               ; preds = %dec_label_pc_12f60
  %v1_12f6c = add i32 %v0_12f60, 16
  %v2_12f6c = inttoptr i32 %v1_12f6c to i32*
  %v3_12f6c = load i32, i32* %v2_12f6c, align 4
  store i32 %v3_12f6c, i32* %r3.global-to-local, align 4
  %v1_12f70 = add i32 %v0_12f60, 8
  %v2_12f70 = inttoptr i32 %v1_12f70 to i32*
  %v3_12f70 = load i32, i32* %v2_12f70, align 4
  %v1_12f74 = add i32 %v3_12f6c, 4096
  store i32 %v1_12f74, i32* %r3.global-to-local, align 4
  %v2_12f78 = add i32 %v3_12f70, %v1_12f74
  store i32 %v1_12f74, i32* %v2_12f6c, align 4
  %v0_12f80 = load i32, i32* @r5, align 4
  %v1_12f80 = add i32 %v0_12f80, 4
  %v2_12f80 = inttoptr i32 %v1_12f80 to i32*
  %v3_12f80 = load i32, i32* %v2_12f80, align 4
  store i32 %v3_12f80, i32* %r0.global-to-local, align 4
  %v4_12f84 = inttoptr i32 %v3_12f80 to i32*
  %v5_12f84 = call i32 @function_11020(i32* %v4_12f84, i32 %v2_12f78, i32 %v2_12ef0, i32 %v1_12f74)
  store i32 %v5_12f84, i32* %r0.global-to-local, align 4
  %v0_12f88 = load i32, i32* @r5, align 4
  %v1_12f88 = add i32 %v0_12f88, 8
  %v2_12f88 = inttoptr i32 %v1_12f88 to i32*
  %v3_12f88 = load i32, i32* %v2_12f88, align 4
  %v2_12f8c = add i32 %v3_12f88, %v5_12f84
  store i32 %v2_12f8c, i32* %r3.global-to-local, align 4
  %v2_12f90 = add i32 %v0_12f88, 12
  %v3_12f90 = inttoptr i32 %v2_12f90 to i32*
  store i32 %v2_12f8c, i32* %v3_12f90, align 4
  %v1_12f94 = load i32, i32* @r5, align 4
  %v2_12f94 = add i32 %v1_12f94, 4
  %v3_12f94 = inttoptr i32 %v2_12f94 to i32*
  store i32 %v5_12f84, i32* %v3_12f94, align 4
  %v0_12ee8.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_12ee0

dec_label_pc_12f9c:                               ; preds = %dec_label_pc_12f60, %.dec_label_pc_12f9c_crit_edge
  %v0_12f9c = phi i32 [ %v0_12f9c.pre, %.dec_label_pc_12f9c_crit_edge ], [ %v0_12f60, %dec_label_pc_12f60 ]
  %v1_12f9c = inttoptr i32 %v0_12f9c to i32*
  %v2_12f9c = load i32, i32* %v1_12f9c, align 4
  %v1_12fa0 = add i32 %v2_12f9c, 52
  %v2_12fa0 = inttoptr i32 %v1_12fa0 to i32*
  %v3_12fa0 = load i32, i32* %v2_12fa0, align 4
  store i32 %v3_12fa0, i32* %r3.global-to-local, align 4
  %v2_12fa4 = icmp eq i32 %v3_12fa0, 0
  store i1 %v2_12fa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12fa4, label %dec_label_pc_12fd0, label %dec_label_pc_12fac

dec_label_pc_12fac:                               ; preds = %dec_label_pc_12f9c
  %v1_12fac = add i32 %v2_12f9c, 16
  %v2_12fac = inttoptr i32 %v1_12fac to i32*
  %v3_12fac = load i32, i32* %v2_12fac, align 4
  store i32 %v3_12fac, i32* %r2.global-to-local, align 4
  %v1_12fb0 = add i32 %v2_12f9c, 24
  %v2_12fb0 = inttoptr i32 %v1_12fb0 to i32*
  %v3_12fb0 = load i32, i32* %v2_12fb0, align 4
  store i32 %v3_12fb0, i32* %r3.global-to-local, align 4
  %v3_12fb4 = icmp ult i32 %v3_12fac, %v3_12fb0
  %v9_12fb4 = icmp eq i32 %v3_12fac, %v3_12fb0
  store i1 %v9_12fb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12fb4, label %dec_label_pc_12fd8thread-pre-split, label %dec_label_pc_12fc4

dec_label_pc_12fc4:                               ; preds = %dec_label_pc_12fac
  store i32 %v2_12f9c, i32* %r0.global-to-local, align 4
  %v1_12fc8 = inttoptr i32 %v2_12f9c to i16*
  %v2_12fc8 = call i32 @function_13d64(i16* %v1_12fc8)
  store i32 %v2_12fc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12fd8

dec_label_pc_12fd0:                               ; preds = %dec_label_pc_12f9c
  store i32 %v2_12f9c, i32* %r0.global-to-local, align 4
  %v1_12fd4 = call i32 @function_13838(i32 %v2_12f9c)
  store i32 %v1_12fd4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12fd8

dec_label_pc_12fd8thread-pre-split:               ; preds = %dec_label_pc_12fac
  %v2_12fb8 = inttoptr i32 %v3_12fac to i8*
  %v3_12fb8 = load i8, i8* %v2_12fb8, align 1
  %v4_12fb8 = zext i8 %v3_12fb8 to i32
  store i32 %v4_12fb8, i32* %r0.global-to-local, align 4
  %v6_12fb8 = add i32 %v3_12fac, 1
  store i32 %v6_12fb8, i32* %r2.global-to-local, align 4
  store i32 %v6_12fb8, i32* %v2_12fac, align 4
  %v0_12fd8.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12fd8

dec_label_pc_12fd8:                               ; preds = %dec_label_pc_12fd8thread-pre-split, %dec_label_pc_12fc4, %dec_label_pc_12fd0
  %v1_12fdc = phi i32 [ %v0_12fd8.pr, %dec_label_pc_12fd8thread-pre-split ], [ %v2_12fc8, %dec_label_pc_12fc4 ], [ %v1_12fd4, %dec_label_pc_12fd0 ]
  %v7_12fd8 = icmp eq i32 %v1_12fdc, 10
  store i1 %v7_12fd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12fd8, label %dec_label_pc_12fe4.loopexit, label %bb68

bb68:                                             ; preds = %dec_label_pc_12fd8
  %v8_12fdc = icmp eq i32 %v1_12fdc, -1
  store i1 %v8_12fdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_12fdc, label %dec_label_pc_12fe4.loopexit, label %.dec_label_pc_12f9c_crit_edge

.dec_label_pc_12f9c_crit_edge:                    ; preds = %bb68
  %v0_12f9c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12f9c

dec_label_pc_12fe4.loopexit:                      ; preds = %bb68, %dec_label_pc_12fd8
  %v0_12fe4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_12fe4

dec_label_pc_12fe4:                               ; preds = %dec_label_pc_12f3c, %dec_label_pc_12fe4.loopexit
  %v0_12fe4 = phi i32 [ %v0_12fe4.pre, %dec_label_pc_12fe4.loopexit ], [ %v1_12f50, %dec_label_pc_12f3c ]
  %v7_12fe4 = icmp eq i32 %v0_12fe4, -1
  store i1 %v7_12fe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_12fe4, label %dec_label_pc_1312c, label %dec_label_pc_12fec

dec_label_pc_12fec:                               ; preds = %dec_label_pc_12fe4
  %v0_12fec = load i32, i32* @r5, align 4
  %v1_12fec = add i32 %v0_12fec, 4
  %v2_12fec = inttoptr i32 %v1_12fec to i32*
  %v3_12fec = load i32, i32* %v2_12fec, align 4
  store i32 %v3_12fec, i32* %r0.global-to-local, align 4
  store i32 %v3_12e40, i32* @r2, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 %v3_12fec, i32* %v2_12ff8, align 4
  %v0_12ffc = load i32, i32* @fp, align 4
  %v2_13000 = inttoptr i32 %v3_12fec to i8*
  %v3_13000 = call i32 @function_143c0(i8* %v2_13000, i32 %v0_12ffc)
  store i32 %v3_13000, i32* %r0.global-to-local, align 4
  store i32 %v1_12e54, i32* %r2.global-to-local, align 4
  store i1 %v2_13008, i1* %cpsr_z.global-to-local, align 1
  %v0_1300c = load i32, i32* @r5, align 4
  %v1_1300c = add i32 %v0_1300c, 12
  %v2_1300c = inttoptr i32 %v1_1300c to i32*
  %v3_1300c = load i32, i32* %v2_1300c, align 4
  store i32 %v3_1300c, i32* @r4, align 4
  br i1 %v2_13008, label %dec_label_pc_13024, label %dec_label_pc_13014

dec_label_pc_13014:                               ; preds = %dec_label_pc_12fec
  store i32 %v3_1300c, i32* @r0, align 4
  %v0_13018 = load i32, i32* @sl, align 4
  %v2_1301c = inttoptr i32 %v3_1300c to i8*
  %v3_1301c = call i32 @function_14524(i8* %v2_1301c, i32 %v0_13018)
  store i32 %v3_1301c, i32* %r0.global-to-local, align 4
  %v0_13020 = load i32, i32* @r4, align 4
  %v2_13020 = add i32 %v0_13020, %v3_1301c
  store i32 %v2_13020, i32* @r4, align 4
  br label %dec_label_pc_13024

dec_label_pc_13024:                               ; preds = %dec_label_pc_12fec, %dec_label_pc_13014
  %v0_130fc13 = phi i32 [ %v3_1300c, %dec_label_pc_12fec ], [ %v2_13020, %dec_label_pc_13014 ]
  %v1_13024 = inttoptr i32 %v0_130fc13 to i8*
  %v2_13024 = load i8, i8* %v1_13024, align 1
  %v3_13024 = zext i8 %v2_13024 to i32
  store i32 %v3_13024, i32* %r2.global-to-local, align 4
  %v2_13028 = icmp eq i8 %v2_13024, 0
  store i1 %v2_13028, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13028, label %dec_label_pc_12e7c.backedge, label %dec_label_pc_13030

dec_label_pc_12e7c.backedge:                      ; preds = %dec_label_pc_13024, %dec_label_pc_13124, %dec_label_pc_13030
  %v0_12e7c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12e7c

dec_label_pc_13030:                               ; preds = %dec_label_pc_13024
  %v0_13030 = load i32, i32* @r7, align 4
  %v1_13030 = inttoptr i32 %v0_13030 to i8*
  %v2_13030 = load i8, i8* %v1_13030, align 1
  %v3_13030 = zext i8 %v2_13030 to i32
  store i32 %v3_13030, i32* %r3.global-to-local, align 4
  %v9_13034 = icmp eq i8 %v2_13030, %v2_13024
  store i1 %v9_13034, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13034, label %dec_label_pc_12e7c.backedge, label %dec_label_pc_130fc.preheader

dec_label_pc_130fc.preheader:                     ; preds = %dec_label_pc_13030
  %v1_13038 = load i32, i32* @fp, align 4
  store i32 %v1_13038, i32* @r6, align 4
  %v2_130fc15 = load i8, i8* %v1_13024, align 1
  %v3_130fc16 = zext i8 %v2_130fc15 to i32
  store i32 %v3_130fc16, i32* %r2.global-to-local, align 4
  %v2_1310017 = icmp eq i8 %v2_130fc15, 0
  store i1 %v2_1310017, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1310017, label %dec_label_pc_13118, label %dec_label_pc_13108.preheader

dec_label_pc_13108.preheader:                     ; preds = %dec_label_pc_130fc.preheader
  %v2_1310882 = load i8, i8* %v1_13030, align 1
  %v3_1310883 = zext i8 %v2_1310882 to i32
  store i32 %v3_1310883, i32* %r3.global-to-local, align 4
  %v9_1310c86 = icmp eq i8 %v2_1310882, %v2_130fc15
  store i1 %v9_1310c86, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1310c86, label %dec_label_pc_13118, label %bb74

dec_label_pc_13044:                               ; preds = %bb74
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_13048 = load i32, i32* %v2_12ff8, align 4
  store i32 %v2_13048, i32* %r3.global-to-local, align 4
  store i32 %v1_12e58, i32* %r2.global-to-local, align 4
  %v9_13050 = icmp eq i32 %v2_1305488, %v1_12e58
  store i1 %v9_13050, i1* %cpsr_z.global-to-local, align 1
  %v5_13054 = mul i32 %v2_1305488, 4
  %v6_13054 = add i32 %v2_13048, %v5_13054
  %v7_13054 = inttoptr i32 %v6_13054 to i32*
  store i32 %v0_1305487, i32* %v7_13054, align 4
  br i1 %v9_13050, label %dec_label_pc_1305c, label %dec_label_pc_13068

dec_label_pc_1305c:                               ; preds = %dec_label_pc_13044
  store i32 %v1_12e64, i32* %r3.global-to-local, align 4
  store i1 %v2_13060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13060, label %dec_label_pc_13068, label %dec_label_pc_13088

dec_label_pc_13068:                               ; preds = %dec_label_pc_1305c, %dec_label_pc_13044
  %v0_13068 = load i32, i32* @r7, align 4
  %v1_13068 = inttoptr i32 %v0_13068 to i8*
  %v2_13068 = load i8, i8* %v1_13068, align 1
  %v3_13068 = zext i8 %v2_13068 to i32
  store i32 %v3_13068, i32* %r3.global-to-local, align 4
  %v2_1306c = icmp eq i8 %v2_13068, 0
  store i1 %v2_1306c, i1* %cpsr_z.global-to-local, align 1
  %v0_13070 = load i32, i32* @r4, align 4
  store i32 %v0_13070, i32* @r0, align 4
  %v1_13074 = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_1306c, i32 %v1_13074, i32 %v0_13068
  store i32 %storemerge, i32* @r1, align 4
  %v0_1307c = call i32 @function_144e0()
  store i32 %v0_1307c, i32* %r0.global-to-local, align 4
  %v0_13080 = load i32, i32* @r4, align 4
  %v2_13080 = add i32 %v0_13080, %v0_1307c
  store i32 %v2_13080, i32* @r4, align 4
  br label %dec_label_pc_130c0

dec_label_pc_13088:                               ; preds = %dec_label_pc_1305c
  %v0_13088 = load i32, i32* @r4, align 4
  store i32 %v0_13088, i32* @r0, align 4
  %v0_1308c = load i32, i32* @r7, align 4
  %v1_1308c = inttoptr i32 %v0_1308c to i8*
  %v2_1308c = load i8, i8* %v1_1308c, align 1
  %v3_1308c = zext i8 %v2_1308c to i32
  %v5_13090 = call i32 @function_145c0(i32 %v0_13088, i32 %v3_1308c, i32 %v1_12e58, i32 %v1_12e64)
  store i32 %v5_13090, i32* %r0.global-to-local, align 4
  store i32 %v1_12e54, i32* %r2.global-to-local, align 4
  store i1 %v2_13008, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_13090, i32* @r4, align 4
  br i1 %v2_13008, label %dec_label_pc_130c0, label %dec_label_pc_130ac

dec_label_pc_130a8:                               ; preds = %dec_label_pc_130ac
  %v1_130a8 = add i32 %v0_130c0.pre, -1
  store i32 %v1_130a8, i32* @r4, align 4
  br label %dec_label_pc_130ac

dec_label_pc_130ac:                               ; preds = %dec_label_pc_13088, %dec_label_pc_130a8
  %v0_130ac = phi i32 [ %v1_130a8, %dec_label_pc_130a8 ], [ %v5_13090, %dec_label_pc_13088 ]
  %v1_130ac = add i32 %v0_130ac, -1
  %v2_130ac = inttoptr i32 %v1_130ac to i8*
  %v3_130ac = load i8, i8* %v2_130ac, align 1
  %v4_130ac = zext i8 %v3_130ac to i32
  %v0_130b0 = load i32, i32* @sl, align 4
  store i32 %v0_130b0, i32* @r0, align 4
  %v2_130b4 = call i32 @function_146ac(i32 %v0_130b0, i32 %v4_130ac)
  store i32 %v2_130b4, i32* %r0.global-to-local, align 4
  %v2_130b8 = icmp eq i32 %v2_130b4, 0
  store i1 %v2_130b8, i1* %cpsr_z.global-to-local, align 1
  %v0_130c0.pre = load i32, i32* @r4, align 4
  br i1 %v2_130b8, label %dec_label_pc_130c0, label %dec_label_pc_130a8

dec_label_pc_130c0:                               ; preds = %dec_label_pc_130ac, %dec_label_pc_13088, %dec_label_pc_13068
  %v3_130cc = phi i32 [ %v5_13090, %dec_label_pc_13088 ], [ %v2_13080, %dec_label_pc_13068 ], [ %v0_130c0.pre, %dec_label_pc_130ac ]
  %v1_130c0 = inttoptr i32 %v3_130cc to i8*
  %v2_130c0 = load i8, i8* %v1_130c0, align 1
  %v3_130c0 = zext i8 %v2_130c0 to i32
  store i32 %v3_130c0, i32* %r2.global-to-local, align 4
  %v0_130c4 = load i32, i32* @r7, align 4
  %v1_130c4 = inttoptr i32 %v0_130c4 to i8*
  %v2_130c4 = load i8, i8* %v1_130c4, align 1
  %v3_130c4 = zext i8 %v2_130c4 to i32
  store i32 %v3_130c4, i32* %r3.global-to-local, align 4
  %v9_130c8 = icmp eq i8 %v2_130c4, %v2_130c0
  store i1 %v9_130c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_130c8, label %bb71, label %dec_label_pc_130d4

bb71:                                             ; preds = %dec_label_pc_130c0
  %v1_130cc = load i32, i32* @fp, align 4
  %v2_130cc = trunc i32 %v1_130cc to i8
  store i8 %v2_130cc, i8* %v1_130c0, align 1
  %v0_130d0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_130d0.pr, label %bb73, label %.dec_label_pc_130d4_crit_edge

.dec_label_pc_130d4_crit_edge:                    ; preds = %bb71
  %v0_130d4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_130d4

dec_label_pc_130d4:                               ; preds = %.dec_label_pc_130d4_crit_edge, %dec_label_pc_130c0
  %v0_130d4 = phi i32 [ %v0_130d4.pre, %.dec_label_pc_130d4_crit_edge ], [ %v3_130c0, %dec_label_pc_130c0 ]
  %v2_130d4 = icmp eq i32 %v0_130d4, 0
  store i1 %v2_130d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_130d4, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_130d4
  %v1_130d8 = load i32, i32* @fp, align 4
  %v2_130d8 = trunc i32 %v1_130d8 to i8
  %v3_130d8 = load i32, i32* @r4, align 4
  %v4_130d8 = inttoptr i32 %v3_130d8 to i8*
  store i8 %v2_130d8, i8* %v4_130d8, align 1
  %v5_130d8 = load i32, i32* @r4, align 4
  %v6_130d8 = add i32 %v5_130d8, 1
  store i32 %v6_130d8, i32* @r4, align 4
  br label %bb73

bb73:                                             ; preds = %bb71, %dec_label_pc_130d4, %bb72
  %v2_130dc = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_130dc, i32* %r3.global-to-local, align 4
  %v2_130e0 = icmp eq i32 %v2_130dc, 0
  store i1 %v2_130e0, i1* %cpsr_z.global-to-local, align 1
  %v0_130fc.pre = load i32, i32* @r4, align 4
  br i1 %v2_130e0, label %dec_label_pc_130f8, label %dec_label_pc_130e8

dec_label_pc_130e8:                               ; preds = %bb73
  store i32 %v0_130fc.pre, i32* @r0, align 4
  %v0_130ec = load i32, i32* @sl, align 4
  %v2_130f0 = inttoptr i32 %v0_130fc.pre to i8*
  %v3_130f0 = call i32 @function_14524(i8* %v2_130f0, i32 %v0_130ec)
  store i32 %v3_130f0, i32* %r0.global-to-local, align 4
  %v0_130f4 = load i32, i32* @r4, align 4
  %v2_130f4 = add i32 %v0_130f4, %v3_130f0
  store i32 %v2_130f4, i32* @r4, align 4
  br label %dec_label_pc_130f8

dec_label_pc_130f8:                               ; preds = %bb73, %dec_label_pc_130e8
  %v0_130fc = phi i32 [ %v2_130f4, %dec_label_pc_130e8 ], [ %v0_130fc.pre, %bb73 ]
  %v0_130f8 = load i32, i32* @r6, align 4
  %v1_130f8 = add i32 %v0_130f8, 1
  store i32 %v1_130f8, i32* @r6, align 4
  %v1_130fc = inttoptr i32 %v0_130fc to i8*
  %v2_130fc = load i8, i8* %v1_130fc, align 1
  %v3_130fc = zext i8 %v2_130fc to i32
  store i32 %v3_130fc, i32* %r2.global-to-local, align 4
  %v2_13100 = icmp eq i8 %v2_130fc, 0
  store i1 %v2_13100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13100, label %dec_label_pc_13118, label %dec_label_pc_130f8.dec_label_pc_13108_crit_edge

dec_label_pc_130f8.dec_label_pc_13108_crit_edge:  ; preds = %dec_label_pc_130f8
  %v0_13108.pre = load i32, i32* @r7, align 4
  %v1_13108 = inttoptr i32 %v0_13108.pre to i8*
  %v2_13108 = load i8, i8* %v1_13108, align 1
  %v3_13108 = zext i8 %v2_13108 to i32
  store i32 %v3_13108, i32* %r3.global-to-local, align 4
  %v9_1310c = icmp eq i8 %v2_13108, %v2_130fc
  store i1 %v9_1310c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1310c, label %dec_label_pc_13118, label %bb74

bb74:                                             ; preds = %dec_label_pc_13108.preheader, %dec_label_pc_130f8.dec_label_pc_13108_crit_edge
  %v2_1305488 = phi i32 [ %v1_130f8, %dec_label_pc_130f8.dec_label_pc_13108_crit_edge ], [ %v1_13038, %dec_label_pc_13108.preheader ]
  %v0_1305487 = phi i32 [ %v0_130fc, %dec_label_pc_130f8.dec_label_pc_13108_crit_edge ], [ %v0_130fc13, %dec_label_pc_13108.preheader ]
  %v2_13110 = load i32, i32* @sb, align 4
  %v3_13110 = sub i32 %v2_1305488, %v2_13110
  %v5_13110 = xor i32 %v2_13110, %v2_1305488
  %v6_13110 = xor i32 %v3_13110, %v2_1305488
  %v7_13110 = and i32 %v6_13110, %v5_13110
  %v8_13110 = icmp slt i32 %v7_13110, 0
  %v9_13110 = icmp slt i32 %v3_13110, 0
  %v10_13110 = icmp eq i32 %v2_1305488, %v2_13110
  store i1 %v10_13110, i1* %cpsr_z.global-to-local, align 1
  %v2_13114 = xor i1 %v9_13110, %v8_13110
  br i1 %v2_13114, label %dec_label_pc_13044, label %dec_label_pc_13118

dec_label_pc_13118:                               ; preds = %dec_label_pc_13108.preheader, %bb74, %dec_label_pc_130f8, %dec_label_pc_130f8.dec_label_pc_13108_crit_edge, %dec_label_pc_130fc.preheader
  %v0_1311c = phi i32 [ %v1_13038, %dec_label_pc_130fc.preheader ], [ %v1_13038, %dec_label_pc_13108.preheader ], [ %v2_1305488, %bb74 ], [ %v1_130f8, %dec_label_pc_130f8 ], [ %v1_130f8, %dec_label_pc_130f8.dec_label_pc_13108_crit_edge ]
  store i32 %v3_12e3c, i32* %r2.global-to-local, align 4
  %v9_1311c = icmp eq i32 %v0_1311c, %v3_12e3c
  store i1 %v9_1311c, i1* %cpsr_z.global-to-local, align 1
  %v6_13120 = icmp slt i32 %v0_1311c, %v3_12e3c
  br i1 %v6_13120, label %dec_label_pc_13124, label %dec_label_pc_13130

dec_label_pc_13124:                               ; preds = %dec_label_pc_13118
  %v0_13124 = load i32, i32* @r8, align 4
  %v1_13124 = and i32 %v0_13124, 1048576
  %v2_13124 = icmp eq i32 %v1_13124, 0
  store i1 %v2_13124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13124, label %dec_label_pc_12e7c.backedge, label %dec_label_pc_1312c

dec_label_pc_1312c:                               ; preds = %dec_label_pc_13124, %dec_label_pc_12fe4, %.thread, %dec_label_pc_12e18
  br label %dec_label_pc_13130

dec_label_pc_13130:                               ; preds = %dec_label_pc_13118, %dec_label_pc_12f00, %dec_label_pc_1312c
  %v0_13130 = phi i32 [ %v0_12f10, %dec_label_pc_12f00 ], [ 0, %dec_label_pc_1312c ], [ %v0_1311c, %dec_label_pc_13118 ]
  store i32 %v0_13130, i32* %r0.global-to-local, align 4
  store i32 %v3_12e18, i32* @r4, align 4
  store i32 %v6_12e18, i32* @r5, align 4
  store i32 %v9_12e18, i32* @r6, align 4
  store i32 %v12_12e18, i32* @r7, align 4
  store i32 %v15_12e18, i32* @r8, align 4
  store i32 %v18_12e18, i32* @sb, align 4
  store i32 %v21_12e18, i32* @sl, align 4
  store i32 %v24_12e18, i32* @fp, align 4
  ret i32 %v0_13130

; uselistorder directives
  uselistorder i32 %v0_13130, { 1, 0 }
  uselistorder i32 %v0_1311c, { 0, 2, 1 }
  uselistorder i32 %v3_13110, { 1, 0 }
  uselistorder i32 %v2_13110, { 1, 0, 2 }
  uselistorder i32 %v2_1305488, { 0, 1, 6, 5, 2, 3, 4 }
  uselistorder i1 %v9_1310c, { 1, 0 }
  uselistorder i32 %v0_130fc.pre, { 0, 2, 1 }
  uselistorder i32 %v5_13090, { 1, 0, 2, 3 }
  uselistorder i1 %v9_1310c86, { 1, 0 }
  uselistorder i1 %v9_13034, { 1, 0 }
  uselistorder i32 %v3_1300c, { 0, 2, 1, 3 }
  uselistorder i1 %v7_12fe4, { 1, 0 }
  uselistorder i1 %v8_12fdc, { 1, 0 }
  uselistorder i32 %v3_12fac, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_12f9c, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32 %v5_12f84, { 1, 0, 2 }
  uselistorder i32 %v1_12f74, { 1, 2, 0, 3 }
  uselistorder i32 %v0_12f60, { 0, 2, 1, 3 }
  uselistorder i32 %v1_12f58, { 1, 0 }
  uselistorder i32 %v1_12f44, { 1, 0 }
  uselistorder i32 %v1_12f40, { 1, 0 }
  uselistorder i32 %v1_12f00, { 2, 0, 1 }
  uselistorder i32 %v0_12ee8, { 1, 0 }
  uselistorder i32 %v1_12ed8, { 0, 2, 1 }
  uselistorder i1 %v2_13008, { 1, 0, 2, 3 }
  uselistorder i32 %v1_12e64, { 2, 0, 1, 3 }
  uselistorder i32 %v1_12e58, { 2, 1, 0 }
  uselistorder i32 %v3_12e40, { 1, 0 }
  uselistorder i32 %v3_12e3c, { 2, 1, 0 }
  uselistorder i32 %v1_12e34, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 6, 1, 2, 3, 4, 5, 25, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 16, 8, 9, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 8, 7, 11, 12, 10, 9, 14, 13, 16, 15, 17, 18, 21, 19, 20, 25, 22, 23, 24, 27, 26, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 33, 32, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 92, { 2, 0, 1, 3 }
  uselistorder i32* @sl, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 85, 86, 87, 88, 89, 90, 93, 94, 95, 0, 96, 97, 98, 99, 100, 101, 103, 1, 102, 105, 104, 106, 107, 108, 109, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 80, 81, 83, 84, 110, 113, 111, 112, 114, 115, 92, 91, 2 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder label %dec_label_pc_13130, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13118, { 1, 3, 2, 0, 4 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_130f8, { 1, 0 }
  uselistorder label %bb73, { 2, 1, 0 }
  uselistorder label %dec_label_pc_130ac, { 1, 0 }
  uselistorder label %dec_label_pc_12e7c.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13024, { 1, 0 }
  uselistorder label %dec_label_pc_12fe4, { 1, 0 }
  uselistorder label %dec_label_pc_12fd8, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12f9c, { 1, 0 }
  uselistorder label %dec_label_pc_12ed0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
}

define i32 @function_13140(i32* %arg1) local_unnamed_addr {
dec_label_pc_13140:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_13144 = icmp eq i32* %arg1, null
  br i1 %v2_13144, label %dec_label_pc_1316c, label %dec_label_pc_1314c

dec_label_pc_1314c:                               ; preds = %dec_label_pc_13140
  %v2_1314c = load i32, i32* %arg1, align 4
  %v1_13150 = inttoptr i32 %v2_1314c to i16*
  %v2_13150 = call i32 @function_131bc(i16* %v1_13150)
  %v0_13154 = load i32, i32* @r4, align 4
  %v1_13154 = add i32 %v0_13154, 20
  %v2_13154 = inttoptr i32 %v1_13154 to i32*
  %v3_13154 = load i32, i32* %v2_13154, align 4
  %v2_13158 = icmp eq i32 %v3_13154, 0
  br i1 %v2_13158, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_1314c
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_1314c, %bb
  store i32 78180, i32* @lr, align 4
  %v1_13160 = xor i1 %v2_13158, true
  call void @__pseudo_cond_branch(i1 %v1_13160, i32 ptrtoint (i32* @global_var_11638.16 to i32))
  %v0_13164 = load i32, i32* @r4, align 4
  store i32 %v0_13164, i32* @r0, align 4
  %v0_13168 = call i32 @function_11638()
  br label %dec_label_pc_1316c

dec_label_pc_1316c:                               ; preds = %dec_label_pc_13140, %bb6
  %v1_13170 = phi i32 [ 0, %dec_label_pc_13140 ], [ %v0_13168, %bb6 ]
  ret i32 %v1_13170

; uselistorder directives
  uselistorder i32* null, { 0, 3, 4, 1, 5, 7, 8, 9, 10, 11, 12, 13, 6, 14, 15, 16, 17, 18, 2, 19, 20, 21 }
  uselistorder label %dec_label_pc_1316c, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_13174(i32 %arg1) local_unnamed_addr {
dec_label_pc_13174:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13180 = load i32, i32* @r4, align 4
  store i32 %v3_13180, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_15758.734 to i32), i32* @r1, align 4
  %v0_13188 = call i32 @function_13370()
  store i32 %v0_13188, i32* %r0.global-to-local, align 4
  store i32 %v0_13188, i32* @r4, align 4
  %v2_1318c = icmp eq i32 %v0_13188, 0
  br i1 %v2_1318c, label %bb, label %dec_label_pc_13198

bb:                                               ; preds = %dec_label_pc_13174
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_13198:                               ; preds = %dec_label_pc_13174
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_131a0 = call i32 @function_10eec(i32 1, i32 24)
  store i32 %v2_131a0, i32* %r0.global-to-local, align 4
  %v2_131a4 = icmp eq i32 %v2_131a0, 0
  br i1 %v2_131a4, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_13198
  %v1_131a8 = load i32, i32* @r4, align 4
  %v3_131a8 = inttoptr i32 %v2_131a0 to i32*
  store i32 %v1_131a8, i32* %v3_131a8, align 4
  %v1_131b0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_13198, %bb4
  %v1_131b0 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_13198 ], [ %v1_131b0.pre, %bb4 ]
  %v2_131ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_131ac, i32* @r4, align 4
  ret i32 %v1_131b0

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 1, 0, 4 }
  uselistorder i32 (i32, i32)* @function_10eec, { 33, 34, 32, 31, 30, 9, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 1, 0, 14, 13, 12, 11, 10, 5, 4, 3, 2, 8, 7, 6 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @function_131bc(i16* %arg1) local_unnamed_addr {
dec_label_pc_131bc:
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_131bc = load i32, i32* @r4, align 4
  store i32 %v3_131bc, i32* %stack_var_-36, align 4
  %v6_131bc = load i32, i32* @r5, align 4
  %v9_131bc = load i32, i32* @r6, align 4
  %v12_131bc = load i32, i32* @r7, align 4
  %v2_131c0 = add i32 %tmp, 52
  %v3_131c0 = inttoptr i32 %v2_131c0 to i32*
  %v4_131c0 = load i32, i32* %v3_131c0, align 4
  %v1_131c8 = sub i32 1, %v4_131c0
  %v2_131c8 = icmp ult i32 %v4_131c0, 2
  br i1 %v2_131c8, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_131bc
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_131bc, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_131c8, %dec_label_pc_131bc ]
  %v0_131d0 = phi i32 [ 0, %bb ], [ %v1_131c8, %dec_label_pc_131bc ]
  store i32 %storemerge, i32* %sb.global-to-local, align 4
  %v2_131d0 = icmp eq i32 %v0_131d0, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 122896, i32* @r6, align 4
  br i1 %v2_131d0, label %dec_label_pc_1321c, label %dec_label_pc_131e4

dec_label_pc_131e4:                               ; preds = %bb18
  %v4_131fc = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_131fc)
  %v0_13210 = load i32, i32* @r6, align 4
  %v2_13210 = add i32 %v0_13210, 16
  %v3_13210 = inttoptr i32 %v2_13210 to i32*
  %v4_13210 = load i32, i32* %v3_13210, align 4
  call void @__pseudo_branch(i32 %v4_13210)
  %v0_1321c.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1321c

dec_label_pc_1321c:                               ; preds = %bb18, %dec_label_pc_131e4
  %v1_13224 = phi i32 [ %tmp, %bb18 ], [ %v0_1321c.pre, %dec_label_pc_131e4 ]
  %v1_1321c = inttoptr i32 %v1_13224 to i16*
  %v2_1321c = load i16, i16* %v1_1321c, align 2
  %v3_1321c = zext i16 %v2_1321c to i32
  %v1_13220 = and i32 %v3_1321c, 64
  %v2_13220 = icmp eq i32 %v1_13220, 0
  br i1 %v2_13220, label %bb20, label %bb19

bb19:                                             ; preds = %dec_label_pc_1321c
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_1321c, %bb19
  %storemerge26 = phi i32 [ %v1_13224, %bb19 ], [ %v1_13220, %dec_label_pc_1321c ]
  %v1_13228 = xor i1 %v2_13220, true
  call void @__pseudo_cond_branch(i1 %v1_13228, i32 ptrtoint (i32* @global_var_13b58.739 to i32))
  store i32 %storemerge26, i32* %sl.global-to-local, align 4
  %v0_13230 = load i32, i32* @r5, align 4
  %v1_13230 = add i32 %v0_13230, 4
  %v2_13230 = inttoptr i32 %v1_13230 to i32*
  %v3_13230 = load i32, i32* %v2_13230, align 4
  %v1_13234 = call i32 @function_10008(i32 %v3_13230)
  %v0_1323c = load i32, i32* @r6, align 4
  %v2_13248 = add i32 %v0_1323c, 108
  %v3_13248 = inttoptr i32 %v2_13248 to i32*
  %v4_13248 = load i32, i32* %v3_13248, align 4
  store i32 %v4_13248, i32* @r7, align 4
  %v1_13250 = load i32, i32* @r5, align 4
  %v2_13250 = add i32 %v1_13250, 4
  %v3_13250 = inttoptr i32 %v2_13250 to i32*
  store i32 -1, i32* %v3_13250, align 4
  %v0_13258 = load i32, i32* @r6, align 4
  %v2_13258 = add i32 %v0_13258, 72
  %v3_13258 = inttoptr i32 %v2_13258 to i32*
  %v4_13258 = load i32, i32* %v3_13258, align 4
  %v1_13260 = icmp slt i32 %v1_13234, 0
  store i32 %v4_13258, i32* %stack_var_-80, align 4
  br i1 %v1_13260, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  call void @__pseudo_branch(i32 %v4_13258)
  %v0_13288 = load i32, i32* @r6, align 4
  %v2_13288 = add i32 %v0_13288, 16
  %v3_13288 = inttoptr i32 %v2_13288 to i32*
  %v4_13288 = load i32, i32* %v3_13288, align 4
  call void @__pseudo_branch(i32 %v4_13288)
  %v0_13298 = load i32, i32* @r6, align 4
  %v2_13298 = add i32 %v0_13298, 12
  %v3_13298 = inttoptr i32 %v2_13298 to i32*
  %v4_13298 = load i32, i32* %v3_13298, align 4
  %v1_1329c = inttoptr i32 %v4_13298 to i32*
  %v2_1329c = load i32, i32* %v1_1329c, align 4
  %v1_132a4 = add i32 %v2_1329c, 1
  %v2_132a8 = add i32 %v0_13298, 24
  %v3_132a8 = inttoptr i32 %v2_132a8 to i32*
  %v4_132a8 = load i32, i32* %v3_132a8, align 4
  store i32 %v4_132a8, i32* @r4, align 4
  store i32 %v1_132a4, i32* %v1_1329c, align 4
  call void @__pseudo_branch(i32 %v4_132a8)
  %v0_132c0 = load i32, i32* @r5, align 4
  %v1_132c0 = inttoptr i32 %v0_132c0 to i16*
  %v2_132c0 = load i16, i16* %v1_132c0, align 2
  %v1_132c4 = and i16 %v2_132c0, 24576
  %v1_132c8 = or i16 %v1_132c4, 48
  %v0_132cc = load i32, i32* %sb.global-to-local, align 4
  %v2_132cc = icmp eq i32 %v0_132cc, 0
  store i16 %v1_132c8, i16* %v1_132c0, align 2
  br i1 %v2_132cc, label %.thread, label %bb23

bb23:                                             ; preds = %bb22
  br label %.thread

.thread:                                          ; preds = %bb22, %bb23
  %v2_132e0 = xor i1 %v2_132cc, true
  call void @__pseudo_cond_branch(i1 %v2_132e0, i32 %v4_132a8)
  %v0_132e4 = load i32, i32* @r5, align 4
  %v1_132e4 = inttoptr i32 %v0_132e4 to i16*
  %v2_132e4 = load i16, i16* %v1_132e4, align 2
  %v1_132e8 = and i16 %v2_132e4, 16384
  %v2_132e8 = icmp eq i16 %v1_132e8, 0
  br i1 %v2_132e8, label %bb25, label %bb24

bb24:                                             ; preds = %.thread
  br label %bb25

bb25:                                             ; preds = %.thread, %bb24
  %v1_132f0 = xor i1 %v2_132e8, true
  call void @__pseudo_cond_branch(i1 %v1_132f0, i32 ptrtoint (i32* @global_var_11638.16 to i32))
  %v2_132fc = load i32, i32* %stack_var_-80, align 4
  call void @__pseudo_branch(i32 %v2_132fc)
  call void @__pseudo_branch(i32 %v4_13288)
  %v0_1331c = load i32, i32* @r6, align 4
  %v2_1331c = add i32 %v0_1331c, 48
  %v3_1331c = inttoptr i32 %v2_1331c to i32*
  %v4_1331c = load i32, i32* %v3_1331c, align 4
  %v1_13320 = inttoptr i32 %v4_1331c to i32*
  %v2_13320 = load i32, i32* %v1_13320, align 4
  %v1_13324 = add i32 %v2_13320, 1
  store i32 %v1_13324, i32* %v1_13320, align 4
  call void @__pseudo_branch(i32 %v4_132a8)
  %v0_1333c = call i32 @function_139d0()
  %v0_13340 = load i32, i32* %sl.global-to-local, align 4
  %v2_13348 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_13348, i32* @r4, align 4
  store i32 %v6_131bc, i32* @r5, align 4
  store i32 %v9_131bc, i32* @r6, align 4
  store i32 %v12_131bc, i32* @r7, align 4
  ret i32 %v0_13340

; uselistorder directives
  uselistorder i1 %v2_132e8, { 1, 0 }
  uselistorder i32 %v4_132a8, { 1, 2, 0, 3 }
  uselistorder i32 %v4_131c0, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 0 }
  uselistorder i32 (i32)* @function_10008, { 25, 20, 24, 23, 19, 22, 21, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 1, 7, 6, 5, 4, 3, 2, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_1321c, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
}

define i32 @function_13354(i32 %arg1) local_unnamed_addr {
dec_label_pc_13354:
  %v0_13354 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13354, label %bb, label %.thread5

bb:                                               ; preds = %dec_label_pc_13354
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_13354, %bb
  %v10_1336c = phi i32 [ %arg1, %dec_label_pc_13354 ], [ 0, %bb ]
  ret i32 %v10_1336c

; uselistorder directives
  uselistorder label %.thread5, { 1, 0 }
}

define i32 @function_13370() local_unnamed_addr {
dec_label_pc_13370:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_13380 = call i32 @function_13390()
  ret i32 %v0_13380
}

define i32 @function_13390() local_unnamed_addr {
dec_label_pc_13390:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_13390 = load i32, i32* @r4, align 4
  store i32 %v3_13390, i32* %stack_var_-36, align 4
  %v6_13390 = load i32, i32* @r5, align 4
  %v9_13390 = load i32, i32* @r6, align 4
  %v18_13390 = load i32, i32* @sb, align 4
  %v24_13390 = load i32, i32* @fp, align 4
  %v0_13394 = load i32, i32* @r1, align 4
  %v1_13394 = inttoptr i32 %v0_13394 to i8*
  %v2_13394 = load i8, i8* %v1_13394, align 1
  %v3_13394 = zext i8 %v2_13394 to i32
  store i32 %v3_13394, i32* @ip, align 4
  %v7_1339c = icmp eq i8 %v2_13394, 114
  store i32 122896, i32* @fp, align 4
  %v2_133a4 = ptrtoint i32* %stack_var_-72 to i32
  %v0_133a8 = load i32, i32* @r0, align 4
  store i32 %v0_133a8, i32* @r6, align 4
  %v0_133ac = load i32, i32* @r2, align 4
  store i32 %v0_133ac, i32* @sb, align 4
  %v0_133b0 = load i32, i32* @r3, align 4
  store i32 %v0_133b0, i32* @r5, align 4
  br i1 %v7_1339c, label %dec_label_pc_133fc, label %dec_label_pc_133b8

dec_label_pc_133b8:                               ; preds = %dec_label_pc_13390
  %v7_133b8 = icmp eq i8 %v2_13394, 119
  br i1 %v7_133b8, label %bb, label %dec_label_pc_133c4

bb:                                               ; preds = %dec_label_pc_133b8
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_13400

dec_label_pc_133c4:                               ; preds = %dec_label_pc_133b8
  %v7_133c4 = icmp eq i8 %v2_13394, 97
  br i1 %v7_133c4, label %bb32, label %dec_label_pc_133d0

bb32:                                             ; preds = %dec_label_pc_133c4
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_13400

dec_label_pc_133d0:                               ; preds = %dec_label_pc_133c4, %dec_label_pc_13484, %dec_label_pc_13458
  %v0_133d0 = call i32 @function_1003c()
  store i32 %v0_133d0, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_133d8 = load i32, i32* @sb, align 4
  %v2_133d8 = icmp eq i32 %v0_133d8, 0
  %v2_133dc = inttoptr i32 %v0_133d0 to i32*
  store i32 22, i32* %v2_133dc, align 4
  br i1 %v2_133d8, label %dec_label_pc_13650, label %dec_label_pc_133e4

dec_label_pc_133e4:                               ; preds = %dec_label_pc_134a8._crit_edge, %dec_label_pc_133d0
  %v0_133e4 = load i32, i32* @sb, align 4
  %v1_133e4 = inttoptr i32 %v0_133e4 to i16*
  %v2_133e4 = load i16, i16* %v1_133e4, align 2
  %v3_133e4 = zext i16 %v2_133e4 to i32
  store i32 %v3_133e4, i32* %r3.global-to-local, align 4
  %v1_133e8 = and i32 %v3_133e4, 8192
  %v2_133e8 = icmp eq i32 %v1_133e8, 0
  br i1 %v2_133e8, label %dec_label_pc_13650, label %dec_label_pc_133f0

dec_label_pc_133f0:                               ; preds = %dec_label_pc_133e4
  store i32 %v0_133e4, i32* @r0, align 4
  %v0_133f4 = call i32 @function_11638()
  store i32 %v0_133f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13650

dec_label_pc_133fc:                               ; preds = %dec_label_pc_13390
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13400

dec_label_pc_13400:                               ; preds = %bb, %bb32, %dec_label_pc_133fc
  %v1_13418 = phi i32 [ 1089, %bb32 ], [ 577, %bb ], [ 1, %dec_label_pc_133fc ]
  %v1_13400 = add i32 %v0_13394, 1
  %v2_13400 = inttoptr i32 %v1_13400 to i8*
  %v3_13400 = load i8, i8* %v2_13400, align 1
  %v7_13404 = icmp eq i8 %v3_13400, 98
  %v1_13400.v0_13394 = select i1 %v7_13404, i32 %v1_13400, i32 %v0_13394
  store i32 %v1_13400.v0_13394, i32* %r3.global-to-local, align 4
  %v1_13410 = add i32 %v1_13400.v0_13394, 1
  %v2_13410 = inttoptr i32 %v1_13410 to i8*
  %v3_13410 = load i8, i8* %v2_13410, align 1
  %v4_13410 = zext i8 %v3_13410 to i32
  store i32 %v4_13410, i32* @r3, align 4
  %v7_13414 = icmp eq i8 %v3_13410, 43
  br i1 %v7_13414, label %bb35, label %.thread3

bb35:                                             ; preds = %dec_label_pc_13400
  store i32 %v1_13418, i32* @r3, align 4
  %v2_1341c = add nuw nsw i32 %v1_13418, 1
  store i32 %v2_1341c, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_13400, %bb35
  %v2_13420 = icmp eq i32 %v0_133ac, 0
  br i1 %v2_13420, label %dec_label_pc_13428, label %dec_label_pc_13450

dec_label_pc_13428:                               ; preds = %.thread3
  store i32 80, i32* @r0, align 4
  %v0_1342c = call i32 @function_105cc()
  store i32 %v0_1342c, i32* %r0.global-to-local, align 4
  store i32 %v0_1342c, i32* @sb, align 4
  %v3_13430 = icmp eq i32 %v0_1342c, 0
  br i1 %v3_13430, label %dec_label_pc_13654, label %dec_label_pc_13438

dec_label_pc_13438:                               ; preds = %dec_label_pc_13428
  %v2_1343c = add i32 %v0_1342c, 8
  %v3_1343c = inttoptr i32 %v2_1343c to i32*
  store i32 0, i32* %v3_1343c, align 4
  store i32 8192, i32* %r3.global-to-local, align 4
  %v2_13444 = load i32, i32* @sb, align 4
  %v3_13444 = inttoptr i32 %v2_13444 to i16*
  store i16 8192, i16* %v3_13444, align 2
  %v0_13448 = load i32, i32* @sb, align 4
  %v1_13448 = add i32 %v0_13448, 56
  store i32 %v1_13448, i32* @r0, align 4
  %v1_1344c = call i32 @function_13700(i32 %v1_13448)
  store i32 %v1_1344c, i32* %r0.global-to-local, align 4
  %v0_13450.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13450

dec_label_pc_13450:                               ; preds = %.thread3, %dec_label_pc_13438
  %v0_134a8 = phi i32 [ %v0_133b0, %.thread3 ], [ %v0_13450.pre, %dec_label_pc_13438 ]
  %v1_13450 = icmp slt i32 %v0_134a8, 0
  br i1 %v1_13450, label %dec_label_pc_134a8, label %dec_label_pc_13458

dec_label_pc_13458:                               ; preds = %dec_label_pc_13450
  %v0_1345c = load i32, i32* @r4, align 4
  %v2_1345c = and i32 %v0_1345c, ptrtoint (i32* @global_var_20003.748 to i32)
  %v1_13460 = or i32 %v2_1345c, 1
  store i32 %v1_13460, i32* %r2.global-to-local, align 4
  %v0_13464 = load i32, i32* @r6, align 4
  %v1_13464 = add i32 %v0_13464, 1
  %v2_13468 = and i32 %v1_13464, %v1_13460
  store i32 %v2_13468, i32* %r3.global-to-local, align 4
  %v9_1346c = icmp eq i32 %v2_13468, %v1_13460
  %v1_13470 = load i32, i32* @sb, align 4
  %v2_13470 = add i32 %v1_13470, 4
  %v3_13470 = inttoptr i32 %v2_13470 to i32*
  store i32 %v0_134a8, i32* %v3_13470, align 4
  br i1 %v9_1346c, label %dec_label_pc_13478, label %dec_label_pc_133d0

dec_label_pc_13478:                               ; preds = %dec_label_pc_13458
  %v0_13478 = load i32, i32* @r4, align 4
  %v1_13478 = load i32, i32* @r6, align 4
  %v2_13478 = sub i32 -1, %v1_13478
  %v3_13478 = and i32 %v0_13478, %v2_13478
  store i32 %v3_13478, i32* @r3, align 4
  %v1_1347c = and i32 %v3_13478, 1024
  %v2_1347c = icmp eq i32 %v1_1347c, 0
  br i1 %v2_1347c, label %dec_label_pc_1349c, label %dec_label_pc_13484

dec_label_pc_13484:                               ; preds = %dec_label_pc_13478
  %v0_13484 = load i32, i32* @r5, align 4
  store i32 %v0_13484, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* %r2.global-to-local, align 4
  %v2_13490 = call i32 @function_fe3c(i32 %v0_13484, i32 4)
  store i32 %v2_13490, i32* %r0.global-to-local, align 4
  %v2_13494 = icmp eq i32 %v2_13490, 0
  br i1 %v2_13494, label %dec_label_pc_13484.dec_label_pc_1349c_crit_edge, label %dec_label_pc_133d0

dec_label_pc_13484.dec_label_pc_1349c_crit_edge:  ; preds = %dec_label_pc_13484
  %v0_1349c.pre = load i32, i32* @r6, align 4
  %v0_134a0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_1349c

dec_label_pc_1349c:                               ; preds = %dec_label_pc_13484.dec_label_pc_1349c_crit_edge, %dec_label_pc_13478
  %v0_134a0 = phi i32 [ %v0_134a0.pre, %dec_label_pc_13484.dec_label_pc_1349c_crit_edge ], [ %v0_13478, %dec_label_pc_13478 ]
  %v0_1349c = phi i32 [ %v0_1349c.pre, %dec_label_pc_13484.dec_label_pc_1349c_crit_edge ], [ %v1_13478, %dec_label_pc_13478 ]
  %v1_1349c = and i32 %v0_1349c, 131072
  store i32 %v1_1349c, i32* %r3.global-to-local, align 4
  %v2_134a0 = or i32 %v1_1349c, %v0_134a0
  store i32 %v2_134a0, i32* @r4, align 4
  br label %dec_label_pc_134cc

dec_label_pc_134a8:                               ; preds = %dec_label_pc_13450
  %v7_134a8 = icmp eq i32 %v0_134a8, -1
  %v0_134b4.pre = load i32, i32* @r4, align 4
  br i1 %v7_134a8, label %dec_label_pc_134a8._crit_edge, label %bb36

bb36:                                             ; preds = %dec_label_pc_134a8
  %v2_134ac = or i32 %v0_134b4.pre, ptrtoint (i32* @global_var_20000.749 to i32)
  store i32 %v2_134ac, i32* @r4, align 4
  br label %dec_label_pc_134a8._crit_edge

dec_label_pc_134a8._crit_edge:                    ; preds = %dec_label_pc_134a8, %bb36
  %v0_134b4 = phi i32 [ %v2_134ac, %bb36 ], [ %v0_134b4.pre, %dec_label_pc_134a8 ]
  %v0_134b0 = load i32, i32* @r6, align 4
  store i32 %v0_134b0, i32* %r0.global-to-local, align 4
  store i32 %v0_134b4, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_134bc = call i32 @function_fc48(i32 %v0_134b0, i32 %v0_134b4)
  store i32 %v2_134bc, i32* %r0.global-to-local, align 4
  %v1_134c0 = icmp slt i32 %v2_134bc, 0
  %v1_134c4 = load i32, i32* @sb, align 4
  %v2_134c4 = add i32 %v1_134c4, 4
  %v3_134c4 = inttoptr i32 %v2_134c4 to i32*
  store i32 %v2_134bc, i32* %v3_134c4, align 4
  br i1 %v1_134c0, label %dec_label_pc_133e4, label %.dec_label_pc_134cc_crit_edge

.dec_label_pc_134cc_crit_edge:                    ; preds = %dec_label_pc_134a8._crit_edge
  %v0_134d0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_134cc

dec_label_pc_134cc:                               ; preds = %.dec_label_pc_134cc_crit_edge, %dec_label_pc_1349c
  %v0_134e8 = phi i32 [ %v0_134d0.pre, %.dec_label_pc_134cc_crit_edge ], [ %v2_134a0, %dec_label_pc_1349c ]
  %v0_134cc = load i32, i32* @sb, align 4
  %v1_134cc = inttoptr i32 %v0_134cc to i16*
  %v2_134cc = load i16, i16* %v1_134cc, align 2
  %v3_134cc = zext i16 %v2_134cc to i32
  %v1_134d0 = urem i32 %v0_134e8, 4
  %v1_134d4 = and i32 %v0_134e8, 1024
  %v1_134d8 = and i32 %v3_134cc, 8192
  %v1_134dc = add nuw nsw i32 %v1_134d0, 1
  %v2_134e0 = or i32 %v1_134d8, %v1_134d4
  store i32 %v2_134e0, i32* %r3.global-to-local, align 4
  %v1_134e4 = xor i32 %v1_134dc, 3
  store i32 %v1_134e4, i32* %r1.global-to-local, align 4
  %v1_134e8 = and i32 %v0_134e8, ptrtoint (i32* @global_var_20000.749 to i32)
  store i32 %v1_134e8, i32* %r2.global-to-local, align 4
  %v2_134e8 = icmp eq i32 %v1_134e8, 0
  %v1_134ec = add i32 %v0_134cc, 4
  %v2_134ec = inttoptr i32 %v1_134ec to i32*
  %v3_134ec = load i32, i32* %v2_134ec, align 4
  store i32 %v3_134ec, i32* @r5, align 4
  br i1 %v2_134e8, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_134cc
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_134cc, %bb37
  %v0_134f8 = phi i32 [ 0, %dec_label_pc_134cc ], [ 32768, %bb37 ]
  %v4_134f4 = mul nuw nsw i32 %v1_134e4, 16
  %v5_134f4 = or i32 %v2_134e0, %v4_134f4
  store i32 %v5_134f4, i32* %r3.global-to-local, align 4
  %v2_134f8 = or i32 %v0_134f8, %v5_134f4
  store i32 %v2_134f8, i32* %r2.global-to-local, align 4
  %v8_134fc = icmp eq i32 %v3_134ec, 2147483647
  %v1_13500 = trunc i32 %v2_134f8 to i16
  store i16 %v1_13500, i16* %v1_134cc, align 2
  br i1 %v8_134fc, label %dec_label_pc_13530, label %dec_label_pc_13508

dec_label_pc_13508:                               ; preds = %bb38
  %v0_13508 = call i32 @function_1003c()
  store i32 %v0_13508, i32* @r4, align 4
  %v0_13510 = load i32, i32* @r5, align 4
  store i32 %v0_13510, i32* @r0, align 4
  %v1_13514 = inttoptr i32 %v0_13508 to i32*
  %v2_13514 = load i32, i32* %v1_13514, align 4
  store i32 %v2_13514, i32* @r5, align 4
  %v1_13518 = call i32 @function_1479c(i32 %v0_13510)
  store i32 %v1_13518, i32* %r0.global-to-local, align 4
  %v2_1351c = icmp eq i32 %v1_13518, 0
  br i1 %v2_1351c, label %.thread5, label %bb39

bb39:                                             ; preds = %dec_label_pc_13508
  %v1_13520 = load i32, i32* @sb, align 4
  %v2_13520 = inttoptr i32 %v1_13520 to i16*
  %v3_13520 = load i16, i16* %v2_13520, align 2
  %v4_13520 = zext i16 %v3_13520 to i32
  %v2_13524 = or i32 %v4_13520, 256
  store i32 %v2_13524, i32* %r3.global-to-local, align 4
  %v2_13528 = trunc i32 %v2_13524 to i16
  store i16 %v2_13528, i16* %v2_13520, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_13508, %bb39
  %v0_1352c = load i32, i32* @r5, align 4
  %v1_1352c = load i32, i32* @r4, align 4
  %v2_1352c = inttoptr i32 %v1_1352c to i32*
  store i32 %v0_1352c, i32* %v2_1352c, align 4
  br label %dec_label_pc_13530

dec_label_pc_13530:                               ; preds = %bb38, %.thread5
  %v0_13530 = load i32, i32* @sb, align 4
  %v1_13530 = add i32 %v0_13530, 8
  %v2_13530 = inttoptr i32 %v1_13530 to i32*
  %v3_13530 = load i32, i32* %v2_13530, align 4
  store i32 %v3_13530, i32* %r3.global-to-local, align 4
  %v2_13534 = icmp eq i32 %v3_13530, 0
  br i1 %v2_13534, label %dec_label_pc_1353c, label %bb40

dec_label_pc_1353c:                               ; preds = %dec_label_pc_13530
  store i32 4096, i32* @r0, align 4
  %v0_13540 = call i32 @function_105cc()
  store i32 %v0_13540, i32* %r0.global-to-local, align 4
  %v2_13544 = icmp eq i32 %v0_13540, 0
  %v1_13554.pre = load i32, i32* @sb, align 4
  br i1 %v2_13544, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_1353c
  %v2_13548 = inttoptr i32 %v1_13554.pre to i16*
  %v3_13548 = load i16, i16* %v2_13548, align 2
  %v4_13548 = zext i16 %v3_13548 to i32
  %v2_1354c = add i32 %v0_13540, 4096
  store i32 %v2_1354c, i32* %r2.global-to-local, align 4
  %v2_13550 = or i32 %v4_13548, 16384
  store i32 %v2_13550, i32* %r3.global-to-local, align 4
  %v2_13554 = add i32 %v1_13554.pre, 8
  %v3_13554 = inttoptr i32 %v2_13554 to i32*
  store i32 %v0_13540, i32* %v3_13554, align 4
  %v1_13558 = load i32, i32* %r2.global-to-local, align 4
  %v2_13558 = load i32, i32* @sb, align 4
  %v3_13558 = add i32 %v2_13558, 12
  %v4_13558 = inttoptr i32 %v3_13558 to i32*
  store i32 %v1_13558, i32* %v4_13558, align 4
  %v1_1355c = load i32, i32* %r3.global-to-local, align 4
  %v2_1355c = trunc i32 %v1_1355c to i16
  %v3_1355c = load i32, i32* @sb, align 4
  %v4_1355c = inttoptr i32 %v3_1355c to i16*
  store i16 %v2_1355c, i16* %v4_1355c, align 2
  br label %bb40

.thread9:                                         ; preds = %dec_label_pc_1353c
  %v2_1355419 = add i32 %v1_13554.pre, 8
  %v3_1355420 = inttoptr i32 %v2_1355419 to i32*
  store i32 0, i32* %v3_1355420, align 4
  %v2_13560 = load i32, i32* @sb, align 4
  %v3_13560 = add i32 %v2_13560, 12
  %v4_13560 = inttoptr i32 %v3_13560 to i32*
  store i32 0, i32* %v4_13560, align 4
  br label %bb40

bb40:                                             ; preds = %.thread8, %dec_label_pc_13530, %.thread9
  store i32 56, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_1356c = load i32, i32* @fp, align 4
  %v2_1356c = add i32 %v0_1356c, 56
  %v3_1356c = inttoptr i32 %v2_1356c to i32*
  %v4_1356c = load i32, i32* %v3_1356c, align 4
  store i32 %v4_1356c, i32* %r3.global-to-local, align 4
  %v2_13570 = load i32, i32* @sb, align 4
  %v3_13570 = add i32 %v2_13570, 2
  %v4_13570 = inttoptr i32 %v3_13570 to i8*
  store i8 0, i8* %v4_13570, align 1
  %v0_13574 = load i32, i32* @sb, align 4
  %v1_13574 = inttoptr i32 %v0_13574 to i16*
  %v2_13574 = load i16, i16* %v1_13574, align 2
  %v3_13574 = zext i16 %v2_13574 to i32
  store i32 %v3_13574, i32* %r2.global-to-local, align 4
  %v0_13578 = load i32, i32* %r3.global-to-local, align 4
  %v1_13578 = inttoptr i32 %v0_13578 to i32*
  %v2_13578 = load i32, i32* %v1_13578, align 4
  store i32 %v2_13578, i32* %r1.global-to-local, align 4
  %v1_1357c = add i32 %v0_13574, 8
  %v2_1357c = inttoptr i32 %v1_1357c to i32*
  %v3_1357c = load i32, i32* %v2_1357c, align 4
  store i32 %v3_1357c, i32* %r3.global-to-local, align 4
  %v1_13580 = and i32 %v3_13574, 8192
  %v2_13580 = icmp eq i32 %v1_13580, 0
  %v2_13584 = add i32 %v0_13574, 20
  %v3_13584 = inttoptr i32 %v2_13584 to i32*
  store i32 %v3_1357c, i32* %v3_13584, align 4
  %v0_13588 = load i32, i32* %r0.global-to-local, align 4
  %v1_13588 = load i32, i32* @sb, align 4
  %v2_13588 = add i32 %v1_13588, 44
  %v3_13588 = inttoptr i32 %v2_13588 to i32*
  store i32 %v0_13588, i32* %v3_13588, align 4
  %v0_1358c = load i32, i32* %r1.global-to-local, align 4
  %v1_1358c = load i32, i32* @sb, align 4
  %v2_1358c = add i32 %v1_1358c, 52
  %v3_1358c = inttoptr i32 %v2_1358c to i32*
  store i32 %v0_1358c, i32* %v3_1358c, align 4
  %v0_13590 = load i32, i32* %r3.global-to-local, align 4
  %v1_13590 = load i32, i32* @sb, align 4
  %v2_13590 = add i32 %v1_13590, 24
  %v3_13590 = inttoptr i32 %v2_13590 to i32*
  store i32 %v0_13590, i32* %v3_13590, align 4
  %v0_13594 = load i32, i32* %r3.global-to-local, align 4
  %v1_13594 = load i32, i32* @sb, align 4
  %v2_13594 = add i32 %v1_13594, 28
  %v3_13594 = inttoptr i32 %v2_13594 to i32*
  store i32 %v0_13594, i32* %v3_13594, align 4
  %v0_13598 = load i32, i32* %r3.global-to-local, align 4
  %v1_13598 = load i32, i32* @sb, align 4
  %v2_13598 = add i32 %v1_13598, 16
  %v3_13598 = inttoptr i32 %v2_13598 to i32*
  store i32 %v0_13598, i32* %v3_13598, align 4
  br i1 %v2_13580, label %dec_label_pc_13654, label %dec_label_pc_135a0

dec_label_pc_135a0:                               ; preds = %bb40
  store i32 36, i32* %r3.global-to-local, align 4
  %v0_135a4 = load i32, i32* @fp, align 4
  %v2_135a4 = add i32 %v0_135a4, 36
  %v3_135a4 = inttoptr i32 %v2_135a4 to i32*
  %v4_135a4 = load i32, i32* %v3_135a4, align 4
  store i32 %v4_135a4, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v2_135ac = add i32 %v0_135a4, 108
  %v3_135ac = inttoptr i32 %v2_135ac to i32*
  %v4_135ac = load i32, i32* %v3_135ac, align 4
  store i32 %v4_135ac, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_135b4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_135b8 = add i32 %v0_135a4, 72
  %v3_135b8 = inttoptr i32 %v2_135b8 to i32*
  %v4_135b8 = load i32, i32* %v3_135b8, align 4
  store i32 %v4_135a4, i32* %r1.global-to-local, align 4
  store i32 %v4_135ac, i32* %r2.global-to-local, align 4
  store i32 %v2_135b4, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_135b8)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_135d4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_135d4, i32* %r0.global-to-local, align 4
  %v0_135d8 = load i32, i32* @fp, align 4
  %v2_135d8 = add i32 %v0_135d8, 16
  %v3_135d8 = inttoptr i32 %v2_135d8 to i32*
  %v4_135d8 = load i32, i32* %v3_135d8, align 4
  call void @__pseudo_branch(i32 %v4_135d8)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_135e8 = load i32, i32* @fp, align 4
  %v2_135e8 = add i32 %v0_135e8, 96
  %v3_135e8 = inttoptr i32 %v2_135e8 to i32*
  %v4_135e8 = load i32, i32* %v3_135e8, align 4
  store i32 %v4_135e8, i32* %r4.global-to-local, align 4
  %v0_135ec = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_135ec, i32* %r1.global-to-local, align 4
  store i32 %v4_135e8, i32* %r2.global-to-local, align 4
  store i32 %v2_133a4, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_135b8)
  store i32 %v4_135e8, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_135d8)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_13610 = load i32, i32* @fp, align 4
  %v2_13610 = add i32 %v0_13610, 44
  %v3_13610 = inttoptr i32 %v2_13610 to i32*
  %v4_13610 = load i32, i32* %v3_13610, align 4
  store i32 %v4_13610, i32* @ip, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v1_13618 = inttoptr i32 %v4_13610 to i32*
  %v2_13618 = load i32, i32* %v1_13618, align 4
  store i32 %v2_13618, i32* %r2.global-to-local, align 4
  store i32 %v2_133a4, i32* %r0.global-to-local, align 4
  %v1_13620 = load i32, i32* @sb, align 4
  %v2_13620 = add i32 %v1_13620, 32
  %v3_13620 = inttoptr i32 %v2_13620 to i32*
  store i32 %v2_13618, i32* %v3_13620, align 4
  %v0_13624 = load i32, i32* @fp, align 4
  %v1_13624 = load i32, i32* %r3.global-to-local, align 4
  %v2_13624 = add i32 %v1_13624, %v0_13624
  %v3_13624 = inttoptr i32 %v2_13624 to i32*
  %v4_13624 = load i32, i32* %v3_13624, align 4
  store i32 %v4_13624, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_1362c = load i32, i32* @sb, align 4
  %v1_1362c = load i32, i32* @ip, align 4
  %v2_1362c = inttoptr i32 %v1_1362c to i32*
  store i32 %v0_1362c, i32* %v2_1362c, align 4
  call void @__pseudo_branch(i32 %v4_13624)
  store i32 %v2_135b4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13624)
  br label %dec_label_pc_13654

dec_label_pc_13650:                               ; preds = %dec_label_pc_133e4, %dec_label_pc_133d0, %dec_label_pc_133f0
  store i32 0, i32* @sb, align 4
  br label %dec_label_pc_13654

dec_label_pc_13654:                               ; preds = %bb40, %dec_label_pc_13428, %dec_label_pc_135a0, %dec_label_pc_13650
  %v0_13654 = load i32, i32* @sb, align 4
  store i32 %v0_13654, i32* %r0.global-to-local, align 4
  %v2_1365c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1365c, i32* %r4.global-to-local, align 4
  store i32 %v6_13390, i32* @r5, align 4
  store i32 %v9_13390, i32* @r6, align 4
  store i32 %v18_13390, i32* @sb, align 4
  store i32 %v24_13390, i32* @fp, align 4
  ret i32 %v0_13654

; uselistorder directives
  uselistorder i32 %v1_13554.pre, { 2, 1, 0 }
  uselistorder i32 %v0_134e8, { 1, 2, 0 }
  uselistorder i32 %v0_134b4, { 1, 0 }
  uselistorder i32 %v1_13478, { 1, 0 }
  uselistorder i32 %v0_13478, { 1, 0 }
  uselistorder i32 %v1_13460, { 1, 0, 2 }
  uselistorder i32 %v1_13418, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 24, 25 }
  uselistorder i32* %r0.global-to-local, { 0, 2, 1, 4, 3, 5, 6, 7, 8, 9, 10, 12, 11, 14, 13, 15, 16, 17, 18 }
  uselistorder i32 16384, { 44, 43, 0, 32, 61, 33, 62, 34, 63, 35, 64, 36, 65, 37, 66, 14, 67, 1, 45, 28, 49, 29, 50, 27, 46, 30, 47, 31, 48, 2, 51, 3, 52, 4, 53, 5, 54, 6, 55, 7, 56, 8, 57, 9, 58, 10, 59, 11, 60, 38, 68, 12, 69, 13, 70, 17, 71, 16, 72, 40, 73, 41, 74, 15, 75, 39, 76, 77, 18, 78, 19, 79, 20, 80, 42, 81, 21, 82, 22, 83, 24, 84, 23, 85, 25, 86, 26, 87 }
  uselistorder i32 4096, { 5, 6, 7, 2, 0, 3, 8, 4, 1 }
  uselistorder i32 32768, { 1, 4, 2, 0, 3 }
  uselistorder i32 (i32, i32)* @function_fc48, { 4, 0, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_fe3c, { 12, 3, 0, 9, 8, 11, 10, 7, 6, 5, 4, 2, 1 }
  uselistorder i32 ()* @function_105cc, { 30, 29, 28, 31, 4, 3, 2, 0, 1, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5 }
  uselistorder i32 80, { 2, 0, 1, 5, 3, 4, 6 }
  uselistorder i8 43, { 1, 0 }
  uselistorder i32 ()* @function_11638, { 7, 6, 10, 9, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @fp, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 69, 70, 71, 72, 78, 80, 79, 81, 20, 21, 26, 27, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0, 40, 41, 42, 43, 44, 45, 46, 1, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 82, 83, 84, 85, 86, 73, 74, 75, 2, 76, 77 }
  uselistorder label %dec_label_pc_13654, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_13650, { 2, 0, 1 }
  uselistorder label %bb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13530, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_134a8._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_13450, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_13400, { 2, 1, 0 }
  uselistorder label %dec_label_pc_133d0, { 1, 2, 0 }
}

define i32 @function_13668(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13668:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v0_13668 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13668, label %bb, label %.thread10

bb:                                               ; preds = %dec_label_pc_13668
  %v1_13670 = load i32, i32* %r2.global-to-local, align 4
  %v2_13670 = load i32, i32* %r3.global-to-local, align 4
  %v3_13670 = and i32 %v2_13670, %v1_13670
  %v2_13674 = trunc i32 %v3_13670 to i16
  %v4_13674 = inttoptr i32 %v3_13670 to i16*
  store i16 %v2_13674, i16* %v4_13674, align 2
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_13668, %bb
  %v0_1369c = call i32 @function_1003c()
  store i32 %v0_1369c, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v1_136a8 = inttoptr i32 %v0_1369c to i32*
  %v2_136a8 = load i32, i32* %v1_136a8, align 4
  store i32 %v2_136a8, i32* @r6, align 4
  %v1_136ac = call i32 @function_1479c(i32 0)
  %v2_136b4 = icmp eq i32 %v1_136ac, 0
  store i32 122896, i32* @r4, align 4
  br i1 %v2_136b4, label %bb23, label %.thread13

bb23:                                             ; preds = %.thread10
  store i32 304, i32* %r2.global-to-local, align 4
  %v5_136c0 = load i16, i16* inttoptr (i32 123200 to i16*), align 64
  %v7_136c0 = zext i16 %v5_136c0 to i32
  %v2_136c4 = xor i32 %v7_136c0, 256
  store i32 %v2_136c4, i32* @r3, align 4
  %v2_136c8 = trunc i32 %v2_136c4 to i16
  store i16 %v2_136c8, i16* inttoptr (i32 123200 to i16*), align 64
  br label %.thread13

.thread13:                                        ; preds = %.thread10, %bb23
  store i32 1, i32* @r0, align 4
  %v1_136d0 = call i32 @function_1479c(i32 1)
  %v2_136d4 = icmp eq i32 %v1_136d0, 0
  br i1 %v2_136d4, label %bb24, label %.thread17

bb24:                                             ; preds = %.thread13
  %v1_136dc = load i32, i32* @r4, align 4
  %v3_136dc = add i32 %v1_136dc, 304
  store i32 %v3_136dc, i32* %r2.global-to-local, align 4
  %v2_136e0 = add i32 %v1_136dc, 384
  %v3_136e0 = inttoptr i32 %v2_136e0 to i16*
  %v4_136e0 = load i16, i16* %v3_136e0, align 2
  %v5_136e0 = zext i16 %v4_136e0 to i32
  %v2_136e4 = xor i32 %v5_136e0, 256
  store i32 %v2_136e4, i32* %r3.global-to-local, align 4
  %v2_136e8 = trunc i32 %v2_136e4 to i16
  store i16 %v2_136e8, i16* %v3_136e0, align 2
  br label %.thread17

.thread17:                                        ; preds = %.thread13, %bb24
  %v0_136ec = load i32, i32* @r6, align 4
  %v1_136ec = load i32, i32* @r5, align 4
  %v2_136ec = inttoptr i32 %v1_136ec to i32*
  store i32 %v0_136ec, i32* %v2_136ec, align 4
  ret i32 %v1_136d0

; uselistorder directives
  uselistorder i32 %v3_13670, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32)* @function_1479c, { 1, 0, 2 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_13700(i32 %arg1) local_unnamed_addr {
dec_label_pc_13700:
  store i32 122896, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_15a9c.764 to i32), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_1371c = call i32 @function_100a0()
  ret i32 %v0_1371c
}

define i32 @function_13808(i32 %arg1) local_unnamed_addr {
dec_label_pc_13808:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13808 = load i32, i32* @r4, align 4
  store i32 %v3_13808, i32* %stack_var_-8, align 4
  %v1_1380c = add i32 %arg1, 8
  %v2_1380c = inttoptr i32 %v1_1380c to i32*
  %v3_1380c = load i32, i32* %v2_1380c, align 4
  %v1_13810 = add i32 %arg1, 16
  %v2_13810 = inttoptr i32 %v1_13810 to i32*
  %v3_13810 = load i32, i32* %v2_13810, align 4
  %v9_13814 = icmp eq i32 %v3_13810, %v3_1380c
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_13814, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_13808
  store i32 %v3_1380c, i32* %v2_13810, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_13808, %bb
  %v1_13820 = xor i1 %v9_13814, true
  call void @__pseudo_cond_branch(i1 %v1_13820, i32 ptrtoint (i32* @global_var_14e10.765 to i32))
  %v0_13824 = load i32, i32* %r4.global-to-local, align 4
  %v1_13824 = add i32 %v0_13824, 8
  %v2_13824 = inttoptr i32 %v1_13824 to i32*
  %v3_13824 = load i32, i32* %v2_13824, align 4
  %v1_13828 = add i32 %v0_13824, 16
  %v2_13828 = inttoptr i32 %v1_13828 to i32*
  %v3_13828 = load i32, i32* %v2_13828, align 4
  %v2_1382c = sub i32 %v3_13828, %v3_13824
  %v2_13830 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13830, i32* @r4, align 4
  ret i32 %v2_1382c

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_13838(i32 %arg1) local_unnamed_addr {
dec_label_pc_13838:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13838 = load i32, i32* @r4, align 4
  store i32 %v3_13838, i32* %stack_var_-16, align 4
  %v6_13838 = load i32, i32* @r5, align 4
  %v12_13838 = load i32, i32* @lr, align 4
  %v1_1383c = add i32 %arg1, 52
  %v2_1383c = inttoptr i32 %v1_1383c to i32*
  %v3_1383c = load i32, i32* %v2_1383c, align 4
  %v2_13844 = icmp eq i32 %v3_1383c, 0
  store i32 %arg1, i32* @r5, align 4
  store i32 122896, i32* %r6.global-to-local, align 4
  br i1 %v2_13844, label %dec_label_pc_1387c, label %dec_label_pc_13858

dec_label_pc_13858:                               ; preds = %dec_label_pc_13838
  %v1_13858 = add i32 %arg1, 16
  %v2_13858 = inttoptr i32 %v1_13858 to i32*
  %v3_13858 = load i32, i32* %v2_13858, align 4
  %v1_1385c = add i32 %arg1, 24
  %v2_1385c = inttoptr i32 %v1_1385c to i32*
  %v3_1385c = load i32, i32* %v2_1385c, align 4
  %v3_13860 = icmp ult i32 %v3_13858, %v3_1385c
  br i1 %v3_13860, label %.thread, label %dec_label_pc_13870

.thread:                                          ; preds = %dec_label_pc_13858
  %v2_13864 = inttoptr i32 %v3_13858 to i8*
  %v3_13864 = load i8, i8* %v2_13864, align 1
  %v4_13864 = zext i8 %v3_13864 to i32
  store i32 %v4_13864, i32* %r4.global-to-local, align 4
  %v6_13864 = add i32 %v3_13858, 1
  store i32 %v6_13864, i32* %v2_13858, align 4
  br label %dec_label_pc_138f0

dec_label_pc_13870:                               ; preds = %dec_label_pc_13858
  %v1_13870 = inttoptr i32 %arg1 to i16*
  %v2_13870 = call i32 @function_13d64(i16* %v1_13870)
  store i32 %v2_13870, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_138f0

dec_label_pc_1387c:                               ; preds = %dec_label_pc_13838
  %v1_13880 = add i32 %arg1, 56
  store i32 %v1_13880, i32* @r4, align 4
  %v4_13894 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_13894)
  %v0_138a8 = load i32, i32* %r6.global-to-local, align 4
  %v2_138a8 = add i32 %v0_138a8, 16
  %v3_138a8 = inttoptr i32 %v2_138a8 to i32*
  %v4_138a8 = load i32, i32* %v3_138a8, align 4
  store i32 80052, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_138a8)
  %v0_138b4 = load i32, i32* @r5, align 4
  %v1_138b4 = add i32 %v0_138b4, 16
  %v2_138b4 = inttoptr i32 %v1_138b4 to i32*
  %v3_138b4 = load i32, i32* %v2_138b4, align 4
  %v1_138b8 = add i32 %v0_138b4, 24
  %v2_138b8 = inttoptr i32 %v1_138b8 to i32*
  %v3_138b8 = load i32, i32* %v2_138b8, align 4
  %v3_138bc = icmp ult i32 %v3_138b4, %v3_138b8
  br i1 %v3_138bc, label %.thread2, label %dec_label_pc_138cc

.thread2:                                         ; preds = %dec_label_pc_1387c
  %v2_138c0 = inttoptr i32 %v3_138b4 to i8*
  %v3_138c0 = load i8, i8* %v2_138c0, align 1
  %v4_138c0 = zext i8 %v3_138c0 to i32
  store i32 %v4_138c0, i32* %r4.global-to-local, align 4
  %v6_138c0 = add i32 %v3_138b4, 1
  store i32 %v6_138c0, i32* %v2_138b4, align 4
  br label %dec_label_pc_138d8

dec_label_pc_138cc:                               ; preds = %dec_label_pc_1387c
  %v1_138d0 = inttoptr i32 %v0_138b4 to i16*
  %v2_138d0 = call i32 @function_13d64(i16* %v1_138d0)
  store i32 %v2_138d0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_138d8

dec_label_pc_138d8:                               ; preds = %.thread2, %dec_label_pc_138cc
  %v0_138e4 = load i32, i32* %r6.global-to-local, align 4
  %v2_138e4 = add i32 %v0_138e4, 24
  %v3_138e4 = inttoptr i32 %v2_138e4 to i32*
  %v4_138e4 = load i32, i32* %v3_138e4, align 4
  store i32 %v4_138e4, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_138e4)
  br label %dec_label_pc_138f0

dec_label_pc_138f0:                               ; preds = %.thread, %dec_label_pc_13870, %dec_label_pc_138d8
  %v0_138f0 = load i32, i32* %r4.global-to-local, align 4
  %v2_138f8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_138f8, i32* @r4, align 4
  store i32 %v6_13838, i32* @r5, align 4
  store i32 %v12_13838, i32* @lr, align 4
  ret i32 %v0_138f0

; uselistorder directives
  uselistorder i32 %v3_138b4, { 1, 0, 2 }
  uselistorder i32 %v3_13858, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 0, 5, 4, 3, 1, 2 }
  uselistorder label %dec_label_pc_138f0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_138d8, { 1, 0 }
}

define i32 @function_13904(i32 %arg1) local_unnamed_addr {
dec_label_pc_13904:
  %v0_13904 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13904, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_13904
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13904, %bb
  %v10_13910 = phi i32 [ %arg1, %dec_label_pc_13904 ], [ 0, %bb ]
  ret i32 %v10_13910

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_13914(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13914:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_13914 = load i32, i32* @r4, align 4
  store i32 %v3_13914, i32* %stack_var_-28, align 4
  %v6_13914 = load i32, i32* @r5, align 4
  %v9_13914 = load i32, i32* @r6, align 4
  %v12_13914 = load i32, i32* @r7, align 4
  %v21_13914 = load i32, i32* @lr, align 4
  %v1_13918 = add i32 %arg3, 52
  %v2_13918 = inttoptr i32 %v1_13918 to i32*
  %v3_13918 = load i32, i32* %v2_13918, align 4
  %v1_13920 = sub i32 1, %v3_13918
  %v2_13920 = icmp ult i32 %v3_13918, 2
  br i1 %v2_13920, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_13914
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_13914, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_13920, %dec_label_pc_13914 ]
  %v0_13928 = phi i32 [ 0, %bb ], [ %v1_13920, %dec_label_pc_13914 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_13928 = icmp eq i32 %v0_13928, 0
  store i32 122896, i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  br i1 %v2_13928, label %dec_label_pc_1397c, label %dec_label_pc_13944

dec_label_pc_13944:                               ; preds = %bb16
  %v1_13948 = add i32 %arg3, 56
  store i32 %v1_13948, i32* @r4, align 4
  %v4_1395c = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_1395c)
  %v0_13970 = load i32, i32* @r5, align 4
  %v2_13970 = add i32 %v0_13970, 16
  %v3_13970 = inttoptr i32 %v2_13970 to i32*
  %v4_13970 = load i32, i32* %v3_13970, align 4
  store i32 %v4_13970, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_1397c.775 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13970)
  %v0_1397c.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_13980.pre = load i32, i32* @r7, align 4
  %v0_13984.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_1397c

dec_label_pc_1397c:                               ; preds = %bb16, %dec_label_pc_13944
  %v0_13984 = phi i32 [ %arg3, %bb16 ], [ %v0_13984.pre, %dec_label_pc_13944 ]
  %v0_13980 = phi i32 [ %arg2, %bb16 ], [ %v0_13980.pre, %dec_label_pc_13944 ]
  %v0_1397c = phi i32 [ %arg1, %bb16 ], [ %v0_1397c.pre, %dec_label_pc_13944 ]
  %v3_13988 = inttoptr i32 %v0_1397c to i8*
  %v4_13988 = call i32 @function_13e90(i8* %v3_13988, i32 %v0_13980, i32 %v0_13984)
  %v0_1398c = load i32, i32* %sl.global-to-local, align 4
  %v2_1398c = icmp eq i32 %v0_1398c, 0
  store i32 %v4_13988, i32* %r4.global-to-local, align 4
  br i1 %v2_1398c, label %dec_label_pc_1397c..thread3_crit_edge, label %bb17

dec_label_pc_1397c..thread3_crit_edge:            ; preds = %dec_label_pc_1397c
  %v0_139a8.pre = load i32, i32* @ip, align 4
  br label %.thread3

bb17:                                             ; preds = %dec_label_pc_1397c
  %v1_139a0 = load i32, i32* @r5, align 4
  %v3_139a0 = add i32 %v1_139a0, 24
  %v4_139a0 = inttoptr i32 %v3_139a0 to i32*
  %v5_139a0 = load i32, i32* %v4_139a0, align 4
  store i32 %v5_139a0, i32* @ip, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_1397c..thread3_crit_edge, %bb17
  %v0_139a8 = phi i32 [ %v0_139a8.pre, %dec_label_pc_1397c..thread3_crit_edge ], [ %v5_139a0, %bb17 ]
  %v2_139a8 = xor i1 %v2_1398c, true
  call void @__pseudo_cond_branch(i1 %v2_139a8, i32 %v0_139a8)
  %v0_139ac = load i32, i32* %r4.global-to-local, align 4
  %v2_139b4 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_139b4, i32* %r4.global-to-local, align 4
  store i32 %v6_13914, i32* @r5, align 4
  store i32 %v9_13914, i32* @r6, align 4
  store i32 %v12_13914, i32* @r7, align 4
  store i32 %v21_13914, i32* @lr, align 4
  ret i32 %v0_139ac

; uselistorder directives
  uselistorder i32 %v3_13918, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0 }
  uselistorder i32 %arg3, { 0, 3, 1, 2 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_1397c, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_139c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_139c0:
  %v0_139c0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_139c0, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_139c0
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_139c0, %bb
  %v10_139cc = phi i32 [ %arg1, %dec_label_pc_139c0 ], [ 0, %bb ]
  ret i32 %v10_139cc

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_139d0() local_unnamed_addr {
dec_label_pc_139d0:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_139d0 = load i32, i32* @r4, align 4
  store i32 %v3_139d0, i32* %stack_var_-24, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %r6.global-to-local, align 4
  %v4_139e0 = load i32, i32* inttoptr (i32 122932 to i32*), align 4
  store i32 %v4_139e0, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_139e8 = load i32, i32* inttoptr (i32 123004 to i32*), align 4
  store i32 %v4_139e8, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_139f4 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  store i32 %v4_139f4, i32* %r7.global-to-local, align 4
  %v2_13a00 = ptrtoint i32* %stack_var_-40 to i32
  call void @__pseudo_branch(i32 %v4_139f4)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_13a14 = load i32, i32* %r6.global-to-local, align 4
  %v2_13a14 = add i32 %v0_13a14, 16
  %v3_13a14 = inttoptr i32 %v2_13a14 to i32*
  %v4_13a14 = load i32, i32* %v3_13a14, align 4
  store i32 %v4_13a14, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13a14)
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_13a24 = load i32, i32* %r6.global-to-local, align 4
  %v2_13a24 = add i32 %v0_13a24, 12
  %v3_13a24 = inttoptr i32 %v2_13a24 to i32*
  %v4_13a24 = load i32, i32* %v3_13a24, align 4
  store i32 %v4_13a24, i32* %r3.global-to-local, align 4
  %v1_13a28 = inttoptr i32 %v4_13a24 to i32*
  %v2_13a28 = load i32, i32* %v1_13a28, align 4
  store i32 %v2_13a28, i32* %r3.global-to-local, align 4
  %v7_13a2c = icmp eq i32 %v2_13a28, 1
  br i1 %v7_13a2c, label %dec_label_pc_13a34, label %dec_label_pc_13af4

dec_label_pc_13a34:                               ; preds = %dec_label_pc_139d0
  store i32 48, i32* %r3.global-to-local, align 4
  %v2_13a38 = add i32 %v0_13a24, 48
  %v3_13a38 = inttoptr i32 %v2_13a38 to i32*
  %v4_13a38 = load i32, i32* %v3_13a38, align 4
  store i32 %v4_13a38, i32* %r3.global-to-local, align 4
  %v1_13a3c = inttoptr i32 %v4_13a38 to i32*
  %v2_13a3c = load i32, i32* %v1_13a3c, align 4
  store i32 %v2_13a3c, i32* %r3.global-to-local, align 4
  %tmp30 = icmp slt i32 %v2_13a3c, 1
  br i1 %tmp30, label %dec_label_pc_13af4, label %dec_label_pc_13a48

dec_label_pc_13a48:                               ; preds = %dec_label_pc_13a34
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_13a4c = add i32 %v0_13a24, 96
  %v3_13a4c = inttoptr i32 %v2_13a4c to i32*
  %v4_13a4c = load i32, i32* %v3_13a4c, align 4
  store i32 %v4_13a4c, i32* %r4.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_139f4)
  call void @__pseudo_branch(i32 %v4_13a14)
  %v0_13a74 = load i32, i32* %r6.global-to-local, align 4
  %v2_13a74 = add i32 %v0_13a74, 44
  %v3_13a74 = inttoptr i32 %v2_13a74 to i32*
  %v4_13a74 = load i32, i32* %v3_13a74, align 4
  store i32 %v4_13a74, i32* %r3.global-to-local, align 4
  %v1_13a78 = inttoptr i32 %v4_13a74 to i32*
  %v2_13a78 = load i32, i32* %v1_13a78, align 4
  store i32 %v2_13a78, i32* %r4.global-to-local, align 4
  store i32 44, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_13ac411 = icmp eq i32 %v2_13a78, 0
  br i1 %v2_13ac411, label %dec_label_pc_13ad0, label %dec_label_pc_13a88

dec_label_pc_13a88:                               ; preds = %dec_label_pc_13a48, %dec_label_pc_13ac0
  %v0_13aac2 = phi i32 [ %v0_13ac0, %dec_label_pc_13ac0 ], [ %v2_13a78, %dec_label_pc_13a48 ]
  %v1_13a88 = inttoptr i32 %v0_13aac2 to i16*
  %v2_13a88 = load i16, i16* %v1_13a88, align 2
  %v3_13a88 = zext i16 %v2_13a88 to i32
  store i32 %v3_13a88, i32* %r3.global-to-local, align 4
  %v2_13a8c = and i32 %v3_13a88, 32816
  %v7_13a90 = icmp eq i32 %v2_13a8c, 48
  %v1_13a94 = add i32 %v0_13aac2, 32
  %v2_13a94 = inttoptr i32 %v1_13a94 to i32*
  %v3_13a94 = load i32, i32* %v2_13a94, align 4
  store i32 %v3_13a94, i32* %r5.global-to-local, align 4
  br i1 %v7_13a90, label %dec_label_pc_13aa0, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_13a88
  store i32 %v0_13aac2, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13ac0

dec_label_pc_13aa0:                               ; preds = %dec_label_pc_13a88
  %v0_13aa0 = load i32, i32* %r7.global-to-local, align 4
  %v2_13aa0 = icmp eq i32 %v0_13aa0, 0
  br i1 %v2_13aa0, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_13aa0
  %v1_13aa4 = load i32, i32* %r6.global-to-local, align 4
  %v2_13aa4 = load i32, i32* %r8.global-to-local, align 4
  %v3_13aa4 = add i32 %v2_13aa4, %v1_13aa4
  %v4_13aa4 = inttoptr i32 %v3_13aa4 to i32*
  %v5_13aa4 = load i32, i32* %v4_13aa4, align 4
  store i32 %v5_13aa4, i32* %r3.global-to-local, align 4
  %v3_13aa8 = inttoptr i32 %v5_13aa4 to i32*
  store i32 %v3_13a94, i32* %v3_13aa8, align 4
  %v0_13aac = load i32, i32* %r4.global-to-local, align 4
  %v1_13aac = inttoptr i32 %v0_13aac to i16*
  %v2_13aac = load i16, i16* %v1_13aac, align 2
  %v3_13aac = zext i16 %v2_13aac to i32
  store i32 %v3_13aac, i32* %r3.global-to-local, align 4
  br label %bb31

bb:                                               ; preds = %dec_label_pc_13aa0
  %v2_13aac8 = load i16, i16* %v1_13a88, align 2
  %v3_13aac9 = zext i16 %v2_13aac8 to i32
  store i32 %v3_13aac9, i32* %r3.global-to-local, align 4
  %v3_13ab0 = add i32 %v0_13aa0, 32
  %v4_13ab0 = inttoptr i32 %v3_13ab0 to i32*
  store i32 %v3_13a94, i32* %v4_13ab0, align 4
  %v0_13ab4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %.thread, %bb
  %v0_13ab4 = phi i32 [ %v3_13aac, %.thread ], [ %v0_13ab4.pre, %bb ]
  %v1_13ab4 = and i32 %v0_13ab4, 8192
  %v2_13ab4 = icmp eq i32 %v1_13ab4, 0
  br i1 %v2_13ab4, label %bb33, label %bb32

bb32:                                             ; preds = %bb31
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_13abc = xor i1 %v2_13ab4, true
  call void @__pseudo_cond_branch(i1 %v1_13abc, i32 ptrtoint (i32* @global_var_11638.16 to i32))
  %v0_13ac0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_13ac0

dec_label_pc_13ac0:                               ; preds = %.thread21, %bb33
  %v0_13ac0 = phi i32 [ %v0_13ac0.pre, %bb33 ], [ %v3_13a94, %.thread21 ]
  store i32 %v0_13ac0, i32* %r4.global-to-local, align 4
  %v2_13ac4 = icmp eq i32 %v0_13ac0, 0
  br i1 %v2_13ac4, label %dec_label_pc_13ac4.dec_label_pc_13ad0_crit_edge, label %dec_label_pc_13a88

dec_label_pc_13ac4.dec_label_pc_13ad0_crit_edge:  ; preds = %dec_label_pc_13ac0
  %v0_13adc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13ad0

dec_label_pc_13ad0:                               ; preds = %dec_label_pc_13ac4.dec_label_pc_13ad0_crit_edge, %dec_label_pc_13a48
  %v0_13adc = phi i32 [ %v0_13adc.pre, %dec_label_pc_13ac4.dec_label_pc_13ad0_crit_edge ], [ %v0_13a74, %dec_label_pc_13a48 ]
  store i32 24, i32* %r3.global-to-local, align 4
  %v2_13adc = add i32 %v0_13adc, 24
  %v3_13adc = inttoptr i32 %v2_13adc to i32*
  %v4_13adc = load i32, i32* %v3_13adc, align 4
  call void @__pseudo_branch(i32 %v4_13adc)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_13aec = load i32, i32* %r6.global-to-local, align 4
  %v2_13aec = add i32 %v0_13aec, 48
  %v3_13aec = inttoptr i32 %v2_13aec to i32*
  %v4_13aec = load i32, i32* %v3_13aec, align 4
  store i32 %v4_13aec, i32* %r3.global-to-local, align 4
  %v0_13af0 = load i32, i32* %r4.global-to-local, align 4
  %v2_13af0 = inttoptr i32 %v4_13aec to i32*
  store i32 %v0_13af0, i32* %v2_13af0, align 4
  %v0_13af8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13af4

dec_label_pc_13af4:                               ; preds = %dec_label_pc_139d0, %dec_label_pc_13a34, %dec_label_pc_13ad0
  %v0_13af8 = phi i32 [ %v0_13a24, %dec_label_pc_139d0 ], [ %v0_13a24, %dec_label_pc_13a34 ], [ %v0_13af8.pre, %dec_label_pc_13ad0 ]
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_13af8 = add i32 %v0_13af8, 12
  %v3_13af8 = inttoptr i32 %v2_13af8 to i32*
  %v4_13af8 = load i32, i32* %v3_13af8, align 4
  %v1_13afc = inttoptr i32 %v4_13af8 to i32*
  %v2_13afc = load i32, i32* %v1_13afc, align 4
  %v1_13b00 = add i32 %v2_13afc, -1
  store i32 %v1_13b00, i32* %v1_13afc, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_13b14 = load i32, i32* %r6.global-to-local, align 4
  %v2_13b14 = add i32 %v0_13b14, 24
  %v3_13b14 = inttoptr i32 %v2_13b14 to i32*
  %v4_13b14 = load i32, i32* %v3_13b14, align 4
  call void @__pseudo_branch(i32 %v4_13b14)
  %v2_13b24 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_13b24, i32* %r4.global-to-local, align 4
  ret i32 %v2_13a00

; uselistorder directives
  uselistorder i32 %v0_13ac0, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 7, 3, 4, 5, 6, 8 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 20, 21, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* inttoptr (i32 122932 to i32*), { 2, 0, 1 }
  uselistorder label %dec_label_pc_13af4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13ac0, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_13a88, { 1, 0 }
}

define i32 @function_13b30(i16* %arg1) local_unnamed_addr {
dec_label_pc_13b30:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v0_13b30 = load i1, i1* @cpsr_z, align 1
  %v2_13b30 = load i32, i32* @r4, align 4
  br i1 %v0_13b30, label %bb, label %dec_label_pc_13b30..thread8_crit_edge

dec_label_pc_13b30..thread8_crit_edge:            ; preds = %dec_label_pc_13b30
  %v0_13b6c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread8

bb:                                               ; preds = %dec_label_pc_13b30
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_13b30..thread8_crit_edge, %bb
  %v0_13d0c = phi i32 [ %v0_13b6c.pre, %dec_label_pc_13b30..thread8_crit_edge ], [ 0, %bb ]
  store i32 %v2_13b30, i32* %stack_var_-36, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 122896, i32* %sb.global-to-local, align 4
  %v4_13b68 = load i32, i32* inttoptr (i32 122940 to i32*), align 4
  store i32 %v4_13b68, i32* %r3.global-to-local, align 4
  %v9_13b6c = icmp eq i32 %v0_13d0c, %v4_13b68
  store i32 %v0_13d0c, i32* %fp.global-to-local, align 4
  br i1 %v9_13b6c, label %bb49, label %dec_label_pc_13b84

bb49:                                             ; preds = %.thread8
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_13b94

dec_label_pc_13b84:                               ; preds = %.thread8
  store i32 256, i32* %r2.global-to-local, align 4
  %v2_13b88 = icmp eq i32 %v0_13d0c, 0
  br i1 %v2_13b88, label %dec_label_pc_13b94, label %dec_label_pc_13cfc

dec_label_pc_13b94:                               ; preds = %bb49, %dec_label_pc_13b84
  %stack_var_-60.1.in = phi i32 [ 0, %bb49 ], [ 256, %dec_label_pc_13b84 ]
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_13ba8 = load i32, i32* inttoptr (i32 123004 to i32*), align 4
  store i32 %v4_13ba8, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_13bb0 = ptrtoint i32* %stack_var_-56 to i32
  %v4_13bb4 = load i32, i32* inttoptr (i32 122968 to i32*), align 8
  store i32 16, i32* %stack_var_-72, align 4
  store i32 %v2_13bb0, i32* %r0.global-to-local, align 4
  store i32 %v4_13ba8, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13bb4)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_13bd4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13bd4, i32* %r0.global-to-local, align 4
  %v0_13bd8 = load i32, i32* %sb.global-to-local, align 4
  %v2_13bd8 = add i32 %v0_13bd8, 16
  %v3_13bd8 = inttoptr i32 %v2_13bd8 to i32*
  %v4_13bd8 = load i32, i32* %v3_13bd8, align 4
  call void @__pseudo_branch(i32 %v4_13bd8)
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_13be8 = add i32 %v0_13bd8, 12
  %v3_13be8 = inttoptr i32 %v2_13be8 to i32*
  %v4_13be8 = load i32, i32* %v3_13be8, align 4
  store i32 %v4_13be8, i32* %r2.global-to-local, align 4
  %v1_13bec = inttoptr i32 %v4_13be8 to i32*
  %v2_13bec = load i32, i32* %v1_13bec, align 4
  store i32 24, i32* %sl.global-to-local, align 4
  %v1_13bf4 = add i32 %v2_13bec, 1
  store i32 %v1_13bf4, i32* %r3.global-to-local, align 4
  %v2_13bf8 = add i32 %v0_13bd8, 24
  %v3_13bf8 = inttoptr i32 %v2_13bf8 to i32*
  %v4_13bf8 = load i32, i32* %v3_13bf8, align 4
  store i32 %v1_13bf4, i32* %v1_13bec, align 4
  store i32 %v2_13bb0, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13bf8)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_13c14 = load i32, i32* %sb.global-to-local, align 4
  %v2_13c14 = add i32 %v0_13c14, 96
  %v3_13c14 = inttoptr i32 %v2_13c14 to i32*
  %v4_13c14 = load i32, i32* %v3_13c14, align 4
  store i32 %v4_13c14, i32* @r4, align 4
  store i32 %v4_13c14, i32* %r2.global-to-local, align 4
  store i32 %v2_13bb0, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13bb4)
  %v0_13c2c = load i32, i32* @r4, align 4
  store i32 %v0_13c2c, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_13bd8)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_13c3c = load i32, i32* %sb.global-to-local, align 4
  %v2_13c3c = add i32 %v0_13c3c, 44
  %v3_13c3c = inttoptr i32 %v2_13c3c to i32*
  %v4_13c3c = load i32, i32* %v3_13c3c, align 4
  store i32 %v4_13c3c, i32* %r3.global-to-local, align 4
  store i32 %v2_13bb0, i32* %r0.global-to-local, align 4
  %v1_13c48 = inttoptr i32 %v4_13c3c to i32*
  %v2_13c48 = load i32, i32* %v1_13c48, align 4
  store i32 %v2_13c48, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v4_13bf8)
  %v0_13c54 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_13c54, i32* @r6, align 4
  %v2_13c58 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_13c58, i32* @r8, align 4
  store i32 72, i32* %fp.global-to-local, align 4
  %v0_13cec.pr = load i32, i32* @r7, align 4
  %v2_13cec28 = icmp eq i32 %v0_13cec.pr, 0
  br i1 %v2_13cec28, label %dec_label_pc_13cf4, label %dec_label_pc_13c60

dec_label_pc_13c60:                               ; preds = %dec_label_pc_13b94, %dec_label_pc_13ce8
  %v0_13c6c = phi i32 [ %v3_13ce8, %dec_label_pc_13ce8 ], [ %v0_13cec.pr, %dec_label_pc_13b94 ]
  %v1_13c60 = inttoptr i32 %v0_13c6c to i16*
  %v2_13c60 = load i16, i16* %v1_13c60, align 2
  %v3_13c60 = zext i16 %v2_13c60 to i32
  store i32 %v3_13c60, i32* %r3.global-to-local, align 4
  %v1_13c64 = and i32 %v3_13c60, 64
  %v2_13c64 = icmp eq i32 %v1_13c64, 0
  br i1 %v2_13c64, label %dec_label_pc_13ce8, label %dec_label_pc_13c6c

dec_label_pc_13c6c:                               ; preds = %dec_label_pc_13c60
  %v1_13c6c = add i32 %v0_13c6c, 56
  store i32 %v1_13c6c, i32* @r4, align 4
  store i32 %v1_13c6c, i32* %r2.global-to-local, align 4
  store i32 %v2_13bb0, i32* %r0.global-to-local, align 4
  %v0_13c7c = load i32, i32* %sb.global-to-local, align 4
  %v1_13c7c = load i32, i32* %fp.global-to-local, align 4
  %v2_13c7c = add i32 %v1_13c7c, %v0_13c7c
  %v3_13c7c = inttoptr i32 %v2_13c7c to i32*
  %v4_13c7c = load i32, i32* %v3_13c7c, align 4
  call void @__pseudo_branch(i32 %v4_13c7c)
  %v0_13c88 = load i32, i32* @r4, align 4
  store i32 %v0_13c88, i32* %r0.global-to-local, align 4
  %v0_13c8c = load i32, i32* %sb.global-to-local, align 4
  %v1_13c8c = load i32, i32* @r8, align 4
  %v2_13c8c = add i32 %v1_13c8c, %v0_13c8c
  %v3_13c8c = inttoptr i32 %v2_13c8c to i32*
  %v4_13c8c = load i32, i32* %v3_13c8c, align 4
  call void @__pseudo_branch(i32 %v4_13c8c)
  %v0_13c98 = load i32, i32* @r7, align 4
  %v1_13c98 = inttoptr i32 %v0_13c98 to i16*
  %v2_13c98 = load i16, i16* %v1_13c98, align 2
  %v3_13c98 = zext i16 %v2_13c98 to i32
  store i32 %stack_var_-60.1.in, i32* %r2.global-to-local, align 4
  %v2_13ca0 = or i32 %v3_13c98, %stack_var_-60.1.in
  %v1_13ca4 = xor i32 %v2_13ca0, 320
  store i32 %v1_13ca4, i32* %r3.global-to-local, align 4
  %v1_13ca8 = and i32 %v1_13ca4, 832
  %v2_13ca8 = icmp eq i32 %v1_13ca8, 0
  br i1 %v2_13ca8, label %dec_label_pc_13cb0, label %bb50

dec_label_pc_13cb0:                               ; preds = %dec_label_pc_13c6c
  store i32 %v0_13c98, i32* %r0.global-to-local, align 4
  %v1_13cb4 = call i32 @function_13808(i32 %v0_13c98)
  store i32 %v1_13cb4, i32* %r0.global-to-local, align 4
  %v2_13cb8 = icmp eq i32 %v1_13cb4, 0
  br i1 %v2_13cb8, label %.thread16, label %.thread17

.thread16:                                        ; preds = %dec_label_pc_13cb0
  %v1_13cbc = load i32, i32* @r7, align 4
  %v2_13cbc = inttoptr i32 %v1_13cbc to i16*
  %v3_13cbc = load i16, i16* %v2_13cbc, align 2
  %v4_13cbc = zext i16 %v3_13cbc to i32
  store i32 %v4_13cbc, i32* %r3.global-to-local, align 4
  %v2_13cc0 = add i32 %v1_13cbc, 8
  %v3_13cc0 = inttoptr i32 %v2_13cc0 to i32*
  %v4_13cc0 = load i32, i32* %v3_13cc0, align 4
  store i32 %v4_13cc0, i32* %r2.global-to-local, align 4
  %v2_13cc4 = and i32 %v4_13cbc, 65471
  store i32 %v2_13cc4, i32* %r3.global-to-local, align 4
  %v3_13cc8 = add i32 %v1_13cbc, 28
  %v4_13cc8 = inttoptr i32 %v3_13cc8 to i32*
  store i32 %v4_13cc0, i32* %v4_13cc8, align 4
  %v1_13ccc = load i32, i32* %r3.global-to-local, align 4
  %v2_13ccc = trunc i32 %v1_13ccc to i16
  %v3_13ccc = load i32, i32* @r7, align 4
  %v4_13ccc = inttoptr i32 %v3_13ccc to i16*
  store i16 %v2_13ccc, i16* %v4_13ccc, align 2
  br label %bb50

.thread17:                                        ; preds = %dec_label_pc_13cb0
  store i32 -1, i32* @r6, align 4
  br label %bb50

bb50:                                             ; preds = %.thread16, %dec_label_pc_13c6c, %.thread17
  store i32 %v2_13bb0, i32* %r0.global-to-local, align 4
  %v0_13cdc = load i32, i32* %sb.global-to-local, align 4
  %v1_13cdc = load i32, i32* %sl.global-to-local, align 4
  %v2_13cdc = add i32 %v1_13cdc, %v0_13cdc
  %v3_13cdc = inttoptr i32 %v2_13cdc to i32*
  %v4_13cdc = load i32, i32* %v3_13cdc, align 4
  call void @__pseudo_branch(i32 %v4_13cdc)
  %v0_13ce8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_13ce8

dec_label_pc_13ce8:                               ; preds = %dec_label_pc_13c60, %bb50
  %v0_13ce8 = phi i32 [ %v0_13c6c, %dec_label_pc_13c60 ], [ %v0_13ce8.pre, %bb50 ]
  %v1_13ce8 = add i32 %v0_13ce8, 32
  %v2_13ce8 = inttoptr i32 %v1_13ce8 to i32*
  %v3_13ce8 = load i32, i32* %v2_13ce8, align 4
  store i32 %v3_13ce8, i32* @r7, align 4
  %v2_13cec = icmp eq i32 %v3_13ce8, 0
  br i1 %v2_13cec, label %dec_label_pc_13cf4, label %dec_label_pc_13c60

dec_label_pc_13cf4:                               ; preds = %dec_label_pc_13ce8, %dec_label_pc_13b94
  %v0_13cf4 = call i32 @function_139d0()
  store i32 %v0_13cf4, i32* %r0.global-to-local, align 4
  %v0_13d30.pre = load i32, i32* @r6, align 4
  br label %bb52

dec_label_pc_13cfc:                               ; preds = %dec_label_pc_13b84
  %v1_13cfc = inttoptr i32 %v0_13d0c to i16*
  %v2_13cfc = load i16, i16* %v1_13cfc, align 2
  %v3_13cfc = zext i16 %v2_13cfc to i32
  %v1_13d00 = and i32 %v3_13cfc, 64
  store i32 %v1_13d00, i32* %r3.global-to-local, align 4
  %v2_13d00 = icmp eq i32 %v1_13d00, 0
  br i1 %v2_13d00, label %bb51, label %dec_label_pc_13d0c

bb51:                                             ; preds = %dec_label_pc_13cfc
  br label %bb52

dec_label_pc_13d0c:                               ; preds = %dec_label_pc_13cfc
  %v1_13d0c = call i32 @function_13808(i32 %v0_13d0c)
  store i32 %v1_13d0c, i32* %r0.global-to-local, align 4
  %v2_13d10 = icmp eq i32 %v1_13d0c, 0
  br i1 %v2_13d10, label %.thread24, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_13d0c
  br label %bb52

.thread24:                                        ; preds = %dec_label_pc_13d0c
  %v1_13d14 = load i32, i32* %fp.global-to-local, align 4
  %v2_13d14 = inttoptr i32 %v1_13d14 to i16*
  %v3_13d14 = load i16, i16* %v2_13d14, align 2
  %v4_13d14 = zext i16 %v3_13d14 to i32
  store i32 %v4_13d14, i32* %r3.global-to-local, align 4
  %v2_13d18 = add i32 %v1_13d14, 8
  %v3_13d18 = inttoptr i32 %v2_13d18 to i32*
  %v4_13d18 = load i32, i32* %v3_13d18, align 4
  store i32 %v4_13d18, i32* %r2.global-to-local, align 4
  %v2_13d1c = and i32 %v4_13d14, 65471
  store i32 %v2_13d1c, i32* %r3.global-to-local, align 4
  %v2_13d20 = trunc i32 %v2_13d1c to i16
  store i16 %v2_13d20, i16* %v2_13d14, align 2
  %v1_13d24 = load i32, i32* %r2.global-to-local, align 4
  %v2_13d24 = load i32, i32* %fp.global-to-local, align 4
  %v3_13d24 = add i32 %v2_13d24, 28
  %v4_13d24 = inttoptr i32 %v3_13d24 to i32*
  store i32 %v1_13d24, i32* %v4_13d24, align 4
  br label %bb52

bb52:                                             ; preds = %bb51, %.thread26, %dec_label_pc_13cf4, %.thread24
  %v0_13d30 = phi i32 [ -1, %.thread26 ], [ 0, %bb51 ], [ %v0_13d30.pre, %dec_label_pc_13cf4 ], [ 0, %.thread24 ]
  store i32 %v0_13d30, i32* %r0.global-to-local, align 4
  %v2_13d38 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_13d38, i32* %r4.global-to-local, align 4
  ret i32 %v0_13d30

; uselistorder directives
  uselistorder i32 %v0_13d30, { 1, 0 }
  uselistorder i32 %v3_13ce8, { 1, 2, 0 }
  uselistorder i32 %v0_13c98, { 1, 0, 2 }
  uselistorder i32 %v0_13bd8, { 1, 0, 2 }
  uselistorder i32 %v0_13d0c, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 5, 4, 15, 6, 8, 7, 9, 11, 10, 12, 13, 14, 16, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 3, 4, 0, 1, 5, 2, 6 }
  uselistorder i32 ()* @function_139d0, { 1, 0 }
  uselistorder label %bb52, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_13ce8, { 1, 0 }
  uselistorder label %bb50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13c60, { 1, 0 }
  uselistorder label %dec_label_pc_13b94, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
}

define i32 @function_13d44(i32 %arg1) local_unnamed_addr {
dec_label_pc_13d44:
  %v0_13d44 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13d44, label %bb, label %.thread6

bb:                                               ; preds = %dec_label_pc_13d44
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_13d44, %bb
  %v5_13d60 = phi i32 [ %arg1, %dec_label_pc_13d44 ], [ 0, %bb ]
  ret i32 %v5_13d60

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
}

define i32 @function_13d64(i16* %arg1) local_unnamed_addr {
dec_label_pc_13d64:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_13d64 = load i32, i32* @r4, align 4
  store i32 %v3_13d64, i32* %stack_var_-12, align 4
  %v6_13d64 = load i32, i32* @r5, align 4
  %v9_13d64 = load i32, i32* @lr, align 4
  %v0_13d68 = load i32, i32* @r0, align 4
  %v1_13d68 = add i32 %v0_13d68, 16
  %v2_13d68 = inttoptr i32 %v1_13d68 to i32*
  %v3_13d68 = load i32, i32* %v2_13d68, align 4
  store i32 %v3_13d68, i32* %r2.global-to-local, align 4
  %v1_13d6c = add i32 %v0_13d68, 24
  %v2_13d6c = inttoptr i32 %v1_13d6c to i32*
  %v3_13d6c = load i32, i32* %v2_13d6c, align 4
  %v3_13d70 = icmp ult i32 %v3_13d68, %v3_13d6c
  store i32 %v0_13d68, i32* @r4, align 4
  br i1 %v3_13d70, label %bb, label %dec_label_pc_13d90

bb:                                               ; preds = %dec_label_pc_13d64
  %v2_13d7c = inttoptr i32 %v3_13d68 to i8*
  %v3_13d7c = load i8, i8* %v2_13d7c, align 1
  %v4_13d7c = zext i8 %v3_13d7c to i32
  store i32 %v4_13d7c, i32* %r0.global-to-local, align 4
  %v6_13d7c = add i32 %v3_13d68, 1
  store i32 %v6_13d7c, i32* %r2.global-to-local, align 4
  store i32 %v6_13d7c, i32* %v2_13d68, align 4
  br label %dec_label_pc_13e7c

dec_label_pc_13d90:                               ; preds = %dec_label_pc_13d64
  store i32 122896, i32* @r5, align 4
  %v1_13d90 = inttoptr i32 %v0_13d68 to i16*
  %v2_13d90 = load i16, i16* %v1_13d90, align 2
  %v3_13d90 = zext i16 %v2_13d90 to i32
  %v1_13d94 = and i32 %v3_13d90, 131
  %tmp24 = icmp ugt i32 %v1_13d94, 128
  br i1 %tmp24, label %dec_label_pc_13db0, label %dec_label_pc_13da0

dec_label_pc_13da0:                               ; preds = %dec_label_pc_13d90
  store i32 128, i32* @r1, align 4
  %v0_13da4 = call i32 @function_14ef4()
  store i32 %v0_13da4, i32* %r0.global-to-local, align 4
  %v2_13da8 = icmp eq i32 %v0_13da4, 0
  br i1 %v2_13da8, label %dec_label_pc_13da0.dec_label_pc_13db0_crit_edge, label %dec_label_pc_13e78

dec_label_pc_13da0.dec_label_pc_13db0_crit_edge:  ; preds = %dec_label_pc_13da0
  %v0_13db0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13db0

dec_label_pc_13db0:                               ; preds = %dec_label_pc_13da0.dec_label_pc_13db0_crit_edge, %dec_label_pc_13d90
  %v2_13df0 = phi i32 [ %v0_13db0.pre, %dec_label_pc_13da0.dec_label_pc_13db0_crit_edge ], [ %v0_13d68, %dec_label_pc_13d90 ]
  %v1_13db0 = inttoptr i32 %v2_13df0 to i16*
  %v2_13db0 = load i16, i16* %v1_13db0, align 2
  %v3_13db0 = zext i16 %v2_13db0 to i32
  store i32 %v3_13db0, i32* %r2.global-to-local, align 4
  %v1_13db4 = and i32 %v3_13db0, 2
  %v2_13db4 = icmp eq i32 %v1_13db4, 0
  br i1 %v2_13db4, label %dec_label_pc_13de0, label %dec_label_pc_13dbc

dec_label_pc_13dbc:                               ; preds = %dec_label_pc_13db0
  %tmp25 = urem i16 %v2_13db0, 2
  %v1_13dbc = zext i16 %tmp25 to i32
  %tmp21 = sub nsw i32 0, %v1_13dbc
  %v4_13dc0 = and i32 %tmp21, 4
  %v5_13dc0 = add i32 %v4_13dc0, %v2_13df0
  %v1_13dc4 = add i32 %v5_13dc0, 36
  %v2_13dc4 = inttoptr i32 %v1_13dc4 to i8*
  %v3_13dc4 = load i8, i8* %v2_13dc4, align 1
  %v4_13dc4 = zext i8 %v3_13dc4 to i32
  %v1_13dc8 = add nsw i32 %v3_13db0, -1
  store i32 %v1_13dc8, i32* %r2.global-to-local, align 4
  store i32 %v4_13dc4, i32* %r0.global-to-local, align 4
  %v2_13dd4 = add i32 %v2_13df0, 40
  %v3_13dd4 = inttoptr i32 %v2_13dd4 to i32*
  store i32 0, i32* %v3_13dd4, align 4
  %v0_13dd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_13dd8 = trunc i32 %v0_13dd8 to i16
  %v2_13dd8 = load i32, i32* @r4, align 4
  %v3_13dd8 = inttoptr i32 %v2_13dd8 to i16*
  store i16 %v1_13dd8, i16* %v3_13dd8, align 2
  br label %dec_label_pc_13e7c

dec_label_pc_13de0:                               ; preds = %dec_label_pc_13db0
  %v1_13de0 = add i32 %v2_13df0, 16
  %v1_13de4 = inttoptr i32 %v1_13de0 to i32*
  %v2_13de4 = load i32, i32* %v1_13de4, align 4
  %v3_13de4 = add i32 %v2_13df0, 20
  %v4_13de4 = inttoptr i32 %v3_13de4 to i32*
  %v5_13de4 = load i32, i32* %v4_13de4, align 4
  %v9_13de8 = icmp eq i32 %v5_13de4, %v2_13de4
  br i1 %v9_13de8, label %dec_label_pc_13df8, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_13de0
  %v2_13dec = inttoptr i32 %v2_13de4 to i8*
  %v3_13dec = load i8, i8* %v2_13dec, align 1
  %v4_13dec = zext i8 %v3_13dec to i32
  store i32 %v4_13dec, i32* %r0.global-to-local, align 4
  %v6_13dec = add i32 %v2_13de4, 1
  store i32 %v6_13dec, i32* %v1_13de4, align 4
  br label %dec_label_pc_13e7c

dec_label_pc_13df8:                               ; preds = %dec_label_pc_13de0
  %v1_13df8 = add i32 %v2_13df0, 4
  %v2_13df8 = inttoptr i32 %v1_13df8 to i32*
  %v3_13df8 = load i32, i32* %v2_13df8, align 4
  %v7_13dfc = icmp eq i32 %v3_13df8, -2
  br i1 %v7_13dfc, label %.thread8, label %dec_label_pc_13e10

.thread8:                                         ; preds = %dec_label_pc_13df8
  %v2_13e00 = or i16 %v2_13db0, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_13e00, i16* %v1_13db0, align 2
  br label %dec_label_pc_13e7c

dec_label_pc_13e10:                               ; preds = %dec_label_pc_13df8
  %v1_13e10 = and i32 %v3_13db0, 768
  %v2_13e10 = icmp eq i32 %v1_13e10, 0
  br i1 %v2_13e10, label %.thread10, label %bb22

bb22:                                             ; preds = %dec_label_pc_13e10
  %v1_13e18 = load i32, i32* @r5, align 4
  %v3_13e18 = add i32 %v1_13e18, 44
  %v4_13e18 = inttoptr i32 %v3_13e18 to i32*
  %v5_13e18 = load i32, i32* %v4_13e18, align 4
  store i32 %v5_13e18, i32* %r0.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_13e10, %bb22
  %v1_13e1c = xor i1 %v2_13e10, true
  call void @__pseudo_cond_branch(i1 %v1_13e1c, i32 ptrtoint (i32* @global_var_13b58.739 to i32))
  %v0_13e20 = load i32, i32* @r4, align 4
  %v1_13e20 = add i32 %v0_13e20, 8
  store i32 %v1_13e20, i32* %r2.global-to-local, align 4
  %v1_13e24 = inttoptr i32 %v1_13e20 to i32*
  %v2_13e24 = load i32, i32* %v1_13e24, align 4
  store i32 %v2_13e24, i32* %r2.global-to-local, align 4
  %v3_13e24 = add i32 %v0_13e20, 12
  %v4_13e24 = inttoptr i32 %v3_13e24 to i32*
  %v5_13e24 = load i32, i32* %v4_13e24, align 4
  %v9_13e28 = icmp eq i32 %v5_13e24, %v2_13e24
  br i1 %v9_13e28, label %dec_label_pc_13e5c, label %dec_label_pc_13e30

dec_label_pc_13e30:                               ; preds = %.thread10
  %v2_13e30 = add i32 %v0_13e20, 24
  %v3_13e30 = inttoptr i32 %v2_13e30 to i32*
  store i32 %v2_13e24, i32* %v3_13e30, align 4
  %v0_13e34 = load i32, i32* @r4, align 4
  store i32 %v0_13e34, i32* %r0.global-to-local, align 4
  %v2_13e38 = call i32 @function_14ec4(i32 %v0_13e34)
  store i32 %v2_13e38, i32* %r0.global-to-local, align 4
  %v2_13e3c = icmp eq i32 %v2_13e38, 0
  br i1 %v2_13e3c, label %dec_label_pc_13e78, label %dec_label_pc_13e44

dec_label_pc_13e44:                               ; preds = %dec_label_pc_13e30
  %v0_13e44 = load i32, i32* @r4, align 4
  %v1_13e44 = add i32 %v0_13e44, 20
  %v2_13e44 = inttoptr i32 %v1_13e44 to i32*
  %v3_13e44 = load i32, i32* %v2_13e44, align 4
  %v2_13e48 = add i32 %v0_13e44, 24
  %v3_13e48 = inttoptr i32 %v2_13e48 to i32*
  store i32 %v3_13e44, i32* %v3_13e48, align 4
  %v0_13e4c = load i32, i32* @r4, align 4
  %v1_13e4c = add i32 %v0_13e4c, 16
  %v2_13e4c = inttoptr i32 %v1_13e4c to i32*
  %v3_13e4c = load i32, i32* %v2_13e4c, align 4
  %v1_13e50 = inttoptr i32 %v3_13e4c to i8*
  %v2_13e50 = load i8, i8* %v1_13e50, align 1
  %v3_13e50 = zext i8 %v2_13e50 to i32
  store i32 %v3_13e50, i32* %r0.global-to-local, align 4
  %v5_13e50 = add i32 %v3_13e4c, 1
  store i32 %v5_13e50, i32* %v2_13e4c, align 4
  br label %dec_label_pc_13e7c

dec_label_pc_13e5c:                               ; preds = %.thread10
  %v1_13e5c = inttoptr i32 %v0_13e20 to i16*
  store i32 %v0_13e20, i32* %r0.global-to-local, align 4
  %v2_13e60 = ptrtoint i8* %stack_var_-17 to i32
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_13e68 = call i32 @function_14db8(i16* %v1_13e5c, i32 %v2_13e60, i32 1)
  store i32 %v5_13e68, i32* %r0.global-to-local, align 4
  %v2_13e6c = icmp eq i32 %v5_13e68, 0
  br i1 %v2_13e6c, label %dec_label_pc_13e78, label %bb23

bb23:                                             ; preds = %dec_label_pc_13e5c
  %v4_13e70 = load i8, i8* %stack_var_-17, align 1
  %v5_13e70 = sext i8 %v4_13e70 to i32
  store i32 %v5_13e70, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13e7c

dec_label_pc_13e78:                               ; preds = %dec_label_pc_13e5c, %dec_label_pc_13da0, %dec_label_pc_13e30
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13e7c

dec_label_pc_13e7c:                               ; preds = %bb, %.thread8, %bb23, %.thread5, %dec_label_pc_13e44, %dec_label_pc_13dbc, %dec_label_pc_13e78
  %v2_13e80 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13e80, i32* @r4, align 4
  store i32 %v6_13d64, i32* @r5, align 4
  store i32 %v9_13d64, i32* @lr, align 4
  %v1_13e84 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_13e84

; uselistorder directives
  uselistorder i32 %v2_13de4, { 1, 0, 2 }
  uselistorder i32 %v2_13df0, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_13d68, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13d68, { 1, 0, 2, 3, 4 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 1, 0, 4, 3, 2, 10, 5, 6, 7, 8, 9, 13, 12 }
  uselistorder i32 768, { 1, 0, 2 }
  uselistorder i16 2, { 0, 2, 3, 1 }
  uselistorder i32 128, { 5, 0, 4, 6, 1, 7, 8, 9, 2, 3, 10, 11 }
  uselistorder label %dec_label_pc_13e7c, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_13e78, { 0, 2, 1 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_13e90(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13e90:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v6_13e90 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_13e94 = icmp eq i32 %arg2, 0
  store i1 %v2_13e94, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_13f1c, label %dec_label_pc_13f04.preheader

dec_label_pc_13f04.preheader:                     ; preds = %dec_label_pc_13e90
  store i32 %tmp, i32* @r5, align 4
  %v1_13f042 = add i32 %arg2, -1
  store i32 %v1_13f042, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_13f048 = icmp eq i32 %arg2, 1
  store i1 %v7_13f048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13f048, label %dec_label_pc_13f0c, label %dec_label_pc_13eb0

dec_label_pc_13eb0:                               ; preds = %dec_label_pc_13f04.preheader, %dec_label_pc_13f04.backedge.dec_label_pc_13eb0_crit_edge
  %v0_13ed4 = phi i32 [ %v0_13eb0.pre, %dec_label_pc_13f04.backedge.dec_label_pc_13eb0_crit_edge ], [ %arg3, %dec_label_pc_13f04.preheader ]
  %v1_13eb0 = add i32 %v0_13ed4, 16
  %v2_13eb0 = inttoptr i32 %v1_13eb0 to i32*
  %v3_13eb0 = load i32, i32* %v2_13eb0, align 4
  store i32 %v3_13eb0, i32* %r2.global-to-local, align 4
  %v1_13eb4 = add i32 %v0_13ed4, 24
  %v2_13eb4 = inttoptr i32 %v1_13eb4 to i32*
  %v3_13eb4 = load i32, i32* %v2_13eb4, align 4
  store i32 %v3_13eb4, i32* %r3.global-to-local, align 4
  %v3_13eb8 = icmp uge i32 %v3_13eb0, %v3_13eb4
  store i1 %v3_13eb8, i1* %cpsr_c.global-to-local, align 1
  %v9_13eb8 = icmp eq i32 %v3_13eb0, %v3_13eb4
  store i1 %v9_13eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13eb8, label %dec_label_pc_13ed4, label %dec_label_pc_13ec0

dec_label_pc_13ec0:                               ; preds = %dec_label_pc_13eb0
  %v1_13ec0 = inttoptr i32 %v3_13eb0 to i8*
  %v2_13ec0 = load i8, i8* %v1_13ec0, align 1
  %v3_13ec0 = zext i8 %v2_13ec0 to i32
  store i32 %v3_13ec0, i32* %r3.global-to-local, align 4
  %v5_13ec0 = add i32 %v3_13eb0, 1
  store i32 %v5_13ec0, i32* %r2.global-to-local, align 4
  %v2_13ec4 = load i32, i32* @r5, align 4
  %v3_13ec4 = inttoptr i32 %v2_13ec4 to i8*
  store i8 %v2_13ec0, i8* %v3_13ec4, align 1
  %v4_13ec4 = load i32, i32* @r5, align 4
  %v5_13ec4 = add i32 %v4_13ec4, 1
  store i32 %v5_13ec4, i32* @r5, align 4
  %v0_13ec8 = load i32, i32* %r3.global-to-local, align 4
  %v2_13ec8 = icmp ugt i32 %v0_13ec8, 9
  store i1 %v2_13ec8, i1* %cpsr_c.global-to-local, align 1
  %v7_13ec8 = icmp eq i32 %v0_13ec8, 10
  store i1 %v7_13ec8, i1* %cpsr_z.global-to-local, align 1
  %v0_13ecc = load i32, i32* %r2.global-to-local, align 4
  %v1_13ecc = load i32, i32* @r4, align 4
  %v2_13ecc = add i32 %v1_13ecc, 16
  %v3_13ecc = inttoptr i32 %v2_13ecc to i32*
  store i32 %v0_13ecc, i32* %v3_13ecc, align 4
  br i1 %v7_13ec8, label %dec_label_pc_13f0c, label %dec_label_pc_13f04.backedge

dec_label_pc_13ed4:                               ; preds = %dec_label_pc_13eb0
  %v1_13ed4 = inttoptr i32 %v0_13ed4 to i16*
  %v3_13ed8 = call i32 @function_13d64(i16* %v1_13ed4)
  %v3_13edc = icmp eq i32 %v3_13ed8, -1
  store i1 %v3_13edc, i1* %cpsr_c.global-to-local, align 1
  %v8_13edc = icmp eq i32 %v3_13ed8, -1
  store i1 %v8_13edc, i1* %cpsr_z.global-to-local, align 1
  %v1_13ee0 = urem i32 %v3_13ed8, 256
  store i32 %v1_13ee0, i32* %r3.global-to-local, align 4
  br i1 %v3_13edc, label %dec_label_pc_13ee8, label %dec_label_pc_13f00

dec_label_pc_13ee8:                               ; preds = %dec_label_pc_13ed4
  %v0_13ee8 = load i32, i32* @r4, align 4
  %v1_13ee8 = inttoptr i32 %v0_13ee8 to i16*
  %v2_13ee8 = load i16, i16* %v1_13ee8, align 2
  %v3_13ee8 = zext i16 %v2_13ee8 to i32
  store i32 %v3_13ee8, i32* %r3.global-to-local, align 4
  %v1_13eec = and i32 %v3_13ee8, 8
  %v2_13eec = icmp eq i32 %v1_13eec, 0
  store i1 %v2_13eec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13eec, label %dec_label_pc_13f0c, label %dec_label_pc_13f1c

dec_label_pc_13f00:                               ; preds = %dec_label_pc_13ed4
  %v1_13ef8 = trunc i32 %v3_13ed8 to i8
  %v2_13ef8 = load i32, i32* @r5, align 4
  %v3_13ef8 = inttoptr i32 %v2_13ef8 to i8*
  store i8 %v1_13ef8, i8* %v3_13ef8, align 1
  %v4_13ef8 = load i32, i32* @r5, align 4
  %v5_13ef8 = add i32 %v4_13ef8, 1
  store i32 %v5_13ef8, i32* @r5, align 4
  %v0_13efc = load i32, i32* %r3.global-to-local, align 4
  %v2_13efc = icmp ugt i32 %v0_13efc, 9
  store i1 %v2_13efc, i1* %cpsr_c.global-to-local, align 1
  %v7_13efc = icmp eq i32 %v0_13efc, 10
  store i1 %v7_13efc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13efc, label %dec_label_pc_13f0c, label %dec_label_pc_13f04.backedge

dec_label_pc_13f04.backedge:                      ; preds = %dec_label_pc_13f00, %dec_label_pc_13ec0
  %v0_13f04 = load i32, i32* %r6.global-to-local, align 4
  %v1_13f04 = add i32 %v0_13f04, -1
  store i32 %v1_13f04, i32* %r6.global-to-local, align 4
  %v2_13f04 = icmp ne i32 %v0_13f04, 0
  store i1 %v2_13f04, i1* %cpsr_c.global-to-local, align 1
  %v7_13f04 = icmp eq i32 %v0_13f04, 1
  store i1 %v7_13f04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13f04, label %dec_label_pc_13f0c, label %dec_label_pc_13f04.backedge.dec_label_pc_13eb0_crit_edge

dec_label_pc_13f04.backedge.dec_label_pc_13eb0_crit_edge: ; preds = %dec_label_pc_13f04.backedge
  %v0_13eb0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13eb0

dec_label_pc_13f0c:                               ; preds = %dec_label_pc_13f00, %dec_label_pc_13f04.backedge, %dec_label_pc_13ec0, %dec_label_pc_13f04.preheader, %dec_label_pc_13ee8
  %v0_13f0c = load i32, i32* @r5, align 4
  %v1_13f0c = load i32, i32* @r7, align 4
  %v3_13f0c = icmp uge i32 %v0_13f0c, %v1_13f0c
  store i1 %v3_13f0c, i1* %cpsr_c.global-to-local, align 1
  %v9_13f0c = icmp eq i32 %v0_13f0c, %v1_13f0c
  store i1 %v9_13f0c, i1* %cpsr_z.global-to-local, align 1
  %v2_13f10 = xor i1 %v9_13f0c, true
  %v3_13f10 = and i1 %v3_13f0c, %v2_13f10
  br i1 %v3_13f10, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_13f0c
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_13f14 = inttoptr i32 %v0_13f0c to i8*
  store i8 0, i8* %v7_13f14, align 1
  %v0_13f18.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_13f18.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_13f0c, %bb
  %v1_13f18 = phi i1 [ %v1_13f18.pre, %bb ], [ %v9_13f0c, %dec_label_pc_13f0c ]
  %v0_13f18 = phi i1 [ %v0_13f18.pre, %bb ], [ %v3_13f0c, %dec_label_pc_13f0c ]
  %v2_13f18 = xor i1 %v1_13f18, true
  %v3_13f18 = and i1 %v0_13f18, %v2_13f18
  br i1 %v3_13f18, label %.dec_label_pc_13f20_crit_edge, label %dec_label_pc_13f1c

.dec_label_pc_13f20_crit_edge:                    ; preds = %.thread14
  %v0_13f20.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_13f20

dec_label_pc_13f1c:                               ; preds = %dec_label_pc_13e90, %dec_label_pc_13ee8, %.thread14
  br label %dec_label_pc_13f20

dec_label_pc_13f20:                               ; preds = %.dec_label_pc_13f20_crit_edge, %dec_label_pc_13f1c
  %v0_13f20 = phi i32 [ %v0_13f20.pre, %.dec_label_pc_13f20_crit_edge ], [ 0, %dec_label_pc_13f1c ]
  store i32 %v6_13e90, i32* @r5, align 4
  ret i32 %v0_13f20

; uselistorder directives
  uselistorder i1 %v9_13f0c, { 1, 0, 2 }
  uselistorder i32 %v1_13f0c, { 1, 0 }
  uselistorder i32 %v0_13f0c, { 0, 2, 1 }
  uselistorder i32 %v0_13f04, { 2, 0, 1 }
  uselistorder i32 %v0_13efc, { 1, 0 }
  uselistorder i32 %v3_13ed8, { 2, 1, 0, 3 }
  uselistorder i32 %v0_13ec8, { 1, 0 }
  uselistorder i32 %v3_13eb0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_13ed4, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i1 true, { 0, 1, 68, 94, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 75, 74, 31, 113, 63, 66, 72, 95, 73, 104, 96, 86, 97, 98, 32, 99, 33, 34, 100, 101, 67, 102, 103, 65, 105, 106, 107, 108, 109, 110, 35, 36, 111, 112, 85, 84, 47, 48, 49, 114, 50, 51, 76, 77, 80, 78, 81, 70, 79, 115, 71, 83, 116, 37, 117, 38, 39, 40, 118, 87, 88, 41, 42, 119, 89, 90, 43, 44, 120, 91, 92, 45, 46, 69, 121, 122, 82, 123, 52, 64, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 93 }
  uselistorder i32 %arg2, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_13f20, { 1, 0 }
  uselistorder label %dec_label_pc_13f1c, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_13f0c, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_13eb0, { 1, 0 }
}

define i32 @function_13f30() local_unnamed_addr {
dec_label_pc_13f30:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_13f30 = load i32, i32* @r1, align 4
  %v1_13f30 = load i32, i32* @r0, align 4
  %v2_13f30 = sub i32 %v0_13f30, %v1_13f30
  %v3_13f30 = icmp ult i32 %v0_13f30, %v1_13f30
  %v4_13f30 = xor i32 %v1_13f30, %v0_13f30
  %v5_13f30 = xor i32 %v2_13f30, %v0_13f30
  %v6_13f30 = and i32 %v5_13f30, %v4_13f30
  %v7_13f30 = icmp slt i32 %v6_13f30, 0
  store i1 %v7_13f30, i1* %cpsr_v.global-to-local, align 1
  %v8_13f30 = icmp slt i32 %v2_13f30, 0
  store i1 %v8_13f30, i1* %cpsr_n.global-to-local, align 1
  %v9_13f30 = icmp eq i32 %v0_13f30, %v1_13f30
  store i1 %v9_13f30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13f30, label %dec_label_pc_14184, label %dec_label_pc_13f38

dec_label_pc_13f38:                               ; preds = %dec_label_pc_13f30
  br i1 %v9_13f30, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_13f38
  %merge = phi i32 [ %v0_13f30, %dec_label_pc_13f38 ], [ %v2_14218, %bb150 ], [ %v11_14234, %bb153 ], [ %v7_14234, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_13f38
  %v5_13f3c = inttoptr i32 %v1_13f30 to i8*
  store i8* %v5_13f3c, i8** %stack_var_-8, align 4
  %v8_13f3c = load i32, i32* @lr, align 4
  %v0_13f40 = load i32, i32* @r2, align 4
  %v2_13f40 = add i32 %v0_13f40, -4
  store i32 %v2_13f40, i32* %r2.global-to-local, align 4
  %v4_13f40 = sub i32 3, %v0_13f40
  %v5_13f40 = and i32 %v4_13f40, %v0_13f40
  %v6_13f40 = icmp slt i32 %v5_13f40, 0
  store i1 %v6_13f40, i1* %cpsr_v.global-to-local, align 1
  %v7_13f40 = icmp slt i32 %v2_13f40, 0
  store i1 %v7_13f40, i1* %cpsr_n.global-to-local, align 1
  %v8_13f40 = icmp eq i32 %v0_13f40, 4
  store i1 %v8_13f40, i1* %cpsr_z.global-to-local, align 1
  %v5_13f44 = icmp slt i32 %v0_13f40, 4
  br i1 %v5_13f44, label %bb140, label %dec_label_pc_13f48

dec_label_pc_13f48:                               ; preds = %bb
  %v1_13f48 = urem i32 %v1_13f30, 4
  store i32 %v1_13f48, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13f48 = icmp eq i32 %v1_13f48, 0
  store i1 %v2_13f48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13f48, label %dec_label_pc_13f50, label %dec_label_pc_13ffc

dec_label_pc_13f50:                               ; preds = %dec_label_pc_13f48
  %v1_13f50 = urem i32 %v0_13f30, 4
  store i32 %v1_13f50, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13f50 = icmp eq i32 %v1_13f50, 0
  store i1 %v2_13f50, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_13f30 to i2
  br i1 %v2_13f50, label %dec_label_pc_13f58, label %dec_label_pc_1402c

dec_label_pc_13f58:                               ; preds = %dec_label_pc_13f50, %dec_label_pc_14024
  %v0_13f7094 = phi i32 [ %v1_13f30, %dec_label_pc_13f50 ], [ %v0_1414c77, %dec_label_pc_14024 ]
  %v0_13f6c93 = phi i32 [ %v0_13f30, %dec_label_pc_13f50 ], [ %v0_14024, %dec_label_pc_14024 ]
  %v0_13f58 = phi i32 [ %v2_13f40, %dec_label_pc_13f50 ], [ %v2_1401c, %dec_label_pc_14024 ]
  %v1_13f58 = add i32 %v0_13f58, -8
  store i32 %v1_13f58, i32* %r2.global-to-local, align 4
  %v3_13f58 = sub i32 7, %v0_13f58
  %v4_13f58 = and i32 %v3_13f58, %v0_13f58
  %v5_13f58 = icmp slt i32 %v4_13f58, 0
  store i1 %v5_13f58, i1* %cpsr_v.global-to-local, align 1
  %v6_13f58 = icmp slt i32 %v1_13f58, 0
  store i1 %v6_13f58, i1* %cpsr_n.global-to-local, align 1
  %v7_13f58 = icmp eq i32 %v0_13f58, 8
  store i1 %v7_13f58, i1* %cpsr_z.global-to-local, align 1
  %v2_13f5c = xor i1 %v6_13f58, %v5_13f58
  br i1 %v2_13f5c, label %dec_label_pc_13fac, label %dec_label_pc_13f60

dec_label_pc_13f60:                               ; preds = %dec_label_pc_13f58
  %v1_13f60 = add i32 %v0_13f58, -28
  store i32 %v1_13f60, i32* %r2.global-to-local, align 4
  %v3_13f60 = sub i32 27, %v0_13f58
  %v4_13f60 = and i32 %v3_13f60, %v1_13f58
  %v5_13f60 = icmp slt i32 %v4_13f60, 0
  store i1 %v5_13f60, i1* %cpsr_v.global-to-local, align 1
  %v6_13f60 = icmp slt i32 %v1_13f60, 0
  store i1 %v6_13f60, i1* %cpsr_n.global-to-local, align 1
  %v7_13f60 = icmp eq i32 %v1_13f58, 20
  store i1 %v7_13f60, i1* %cpsr_z.global-to-local, align 1
  %v2_13f64 = xor i1 %v6_13f60, %v5_13f60
  br i1 %v2_13f64, label %dec_label_pc_13f98, label %dec_label_pc_13f68

dec_label_pc_13f68:                               ; preds = %dec_label_pc_13f60
  %v0_13f68 = load i32, i32* @r4, align 4
  store i32 %v0_13f68, i32* %stack_var_-12, align 4
  br label %dec_label_pc_13f6c

dec_label_pc_13f6c:                               ; preds = %dec_label_pc_13f6c.dec_label_pc_13f6c_crit_edge, %dec_label_pc_13f68
  %v0_13f70 = phi i32 [ %v12_13f78, %dec_label_pc_13f6c.dec_label_pc_13f6c_crit_edge ], [ %v0_13f7094, %dec_label_pc_13f68 ]
  %v0_13f6c = phi i32 [ %v0_13f6c.pre, %dec_label_pc_13f6c.dec_label_pc_13f6c_crit_edge ], [ %v0_13f6c93, %dec_label_pc_13f68 ]
  %v1_13f6c = inttoptr i32 %v0_13f6c to i32*
  %v2_13f6c = load i32, i32* %v1_13f6c, align 4
  %v3_13f6c = add i32 %v0_13f6c, 4
  %v4_13f6c = inttoptr i32 %v3_13f6c to i32*
  %v5_13f6c = load i32, i32* %v4_13f6c, align 4
  store i32 %v5_13f6c, i32* %r4.global-to-local, align 4
  %v6_13f6c = add i32 %v0_13f6c, 8
  %v7_13f6c = inttoptr i32 %v6_13f6c to i32*
  %v8_13f6c = load i32, i32* %v7_13f6c, align 4
  store i32 %v8_13f6c, i32* %ip.global-to-local, align 4
  %v9_13f6c = add i32 %v0_13f6c, 12
  %v10_13f6c = inttoptr i32 %v9_13f6c to i32*
  %v11_13f6c = load i32, i32* %v10_13f6c, align 4
  store i32 %v11_13f6c, i32* %lr.global-to-local, align 4
  %v12_13f6c = add i32 %v0_13f6c, 16
  store i32 %v12_13f6c, i32* %r1.global-to-local, align 4
  %v1_13f70 = inttoptr i32 %v0_13f70 to i32*
  store i32 %v2_13f6c, i32* %v1_13f70, align 4
  %v3_13f70 = add i32 %v0_13f70, 4
  %v4_13f70 = inttoptr i32 %v3_13f70 to i32*
  %v5_13f70 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13f70, i32* %v4_13f70, align 4
  %v6_13f70 = add i32 %v0_13f70, 8
  %v7_13f70 = inttoptr i32 %v6_13f70 to i32*
  %v8_13f70 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_13f70, i32* %v7_13f70, align 4
  %v9_13f70 = add i32 %v0_13f70, 12
  %v10_13f70 = inttoptr i32 %v9_13f70 to i32*
  %v11_13f70 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_13f70, i32* %v10_13f70, align 4
  %v12_13f70 = add i32 %v0_13f70, 16
  store i32 %v12_13f70, i32* %r0.global-to-local, align 4
  %v0_13f74 = load i32, i32* %r1.global-to-local, align 4
  %v1_13f74 = inttoptr i32 %v0_13f74 to i32*
  %v2_13f74 = load i32, i32* %v1_13f74, align 4
  store i32 %v2_13f74, i32* @r3, align 4
  %v3_13f74 = add i32 %v0_13f74, 4
  %v4_13f74 = inttoptr i32 %v3_13f74 to i32*
  %v5_13f74 = load i32, i32* %v4_13f74, align 4
  store i32 %v5_13f74, i32* %r4.global-to-local, align 4
  %v6_13f74 = add i32 %v0_13f74, 8
  %v7_13f74 = inttoptr i32 %v6_13f74 to i32*
  %v8_13f74 = load i32, i32* %v7_13f74, align 4
  store i32 %v8_13f74, i32* @ip, align 4
  %v9_13f74 = add i32 %v0_13f74, 12
  %v10_13f74 = inttoptr i32 %v9_13f74 to i32*
  %v11_13f74 = load i32, i32* %v10_13f74, align 4
  store i32 %v11_13f74, i32* %lr.global-to-local, align 4
  %v12_13f74 = add i32 %v0_13f74, 16
  store i32 %v12_13f74, i32* @r1, align 4
  %v1_13f78 = inttoptr i32 %v12_13f70 to i32*
  store i32 %v2_13f74, i32* %v1_13f78, align 4
  %v3_13f78 = add i32 %v0_13f70, 20
  %v4_13f78 = inttoptr i32 %v3_13f78 to i32*
  %v5_13f78 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13f78, i32* %v4_13f78, align 4
  %v6_13f78 = add i32 %v0_13f70, 24
  %v7_13f78 = inttoptr i32 %v6_13f78 to i32*
  %v8_13f78 = load i32, i32* @ip, align 4
  store i32 %v8_13f78, i32* %v7_13f78, align 4
  %v9_13f78 = add i32 %v0_13f70, 28
  %v10_13f78 = inttoptr i32 %v9_13f78 to i32*
  %v11_13f78 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_13f78, i32* %v10_13f78, align 4
  %v12_13f78 = add i32 %v0_13f70, 32
  store i32 %v12_13f78, i32* @r0, align 4
  %v0_13f7c = load i32, i32* %r2.global-to-local, align 4
  %v1_13f7c = add i32 %v0_13f7c, -32
  store i32 %v1_13f7c, i32* %r2.global-to-local, align 4
  %v3_13f7c = sub i32 31, %v0_13f7c
  %v4_13f7c = and i32 %v3_13f7c, %v0_13f7c
  %v5_13f7c = icmp slt i32 %v4_13f7c, 0
  %v6_13f7c = icmp slt i32 %v1_13f7c, 0
  %v2_13f80 = xor i1 %v6_13f7c, %v5_13f7c
  br i1 %v2_13f80, label %dec_label_pc_13f84, label %dec_label_pc_13f6c.dec_label_pc_13f6c_crit_edge

dec_label_pc_13f6c.dec_label_pc_13f6c_crit_edge:  ; preds = %dec_label_pc_13f6c
  %v0_13f6c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_13f6c

dec_label_pc_13f84:                               ; preds = %dec_label_pc_13f6c
  %v1_13f84 = add i32 %v0_13f7c, -16
  %v3_13f84 = add i32 %v0_13f7c, 2147483616
  %v4_13f84 = and i32 %v1_13f84, %v3_13f84
  %v5_13f84 = icmp slt i32 %v4_13f84, 0
  store i1 %v5_13f84, i1* %cpsr_v.global-to-local, align 1
  %v6_13f84 = icmp slt i32 %v1_13f84, 0
  store i1 %v6_13f84, i1* %cpsr_n.global-to-local, align 1
  %v7_13f84 = icmp eq i32 %v1_13f84, 0
  store i1 %v7_13f84, i1* %cpsr_z.global-to-local, align 1
  %v2_13f88 = xor i1 %v6_13f84, %v5_13f84
  br i1 %v2_13f88, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_13f84
  %v3_13f88 = load i32, i32* @r1, align 4
  %v4_13f88 = inttoptr i32 %v3_13f88 to i32*
  %v5_13f88 = load i32, i32* %v4_13f88, align 4
  store i32 %v5_13f88, i32* @r3, align 4
  %v6_13f88 = add i32 %v3_13f88, 4
  %v7_13f88 = inttoptr i32 %v6_13f88 to i32*
  %v8_13f88 = load i32, i32* %v7_13f88, align 4
  store i32 %v8_13f88, i32* %r4.global-to-local, align 4
  %v9_13f88 = add i32 %v3_13f88, 8
  %v10_13f88 = inttoptr i32 %v9_13f88 to i32*
  %v11_13f88 = load i32, i32* %v10_13f88, align 4
  store i32 %v11_13f88, i32* @ip, align 4
  %v12_13f88 = add i32 %v3_13f88, 12
  %v13_13f88 = inttoptr i32 %v12_13f88 to i32*
  %v14_13f88 = load i32, i32* %v13_13f88, align 4
  store i32 %v14_13f88, i32* %lr.global-to-local, align 4
  %v15_13f88 = add i32 %v3_13f88, 16
  store i32 %v15_13f88, i32* @r1, align 4
  %v4_13f8c = inttoptr i32 %v12_13f78 to i32*
  store i32 %v5_13f88, i32* %v4_13f8c, align 4
  %v6_13f8c = add i32 %v0_13f70, 36
  %v7_13f8c = inttoptr i32 %v6_13f8c to i32*
  %v8_13f8c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_13f8c, i32* %v7_13f8c, align 4
  %v9_13f8c = add i32 %v0_13f70, 40
  %v10_13f8c = inttoptr i32 %v9_13f8c to i32*
  %v11_13f8c = load i32, i32* @ip, align 4
  store i32 %v11_13f8c, i32* %v10_13f8c, align 4
  %v12_13f8c = add i32 %v0_13f70, 44
  %v13_13f8c = inttoptr i32 %v12_13f8c to i32*
  %v14_13f8c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_13f8c, i32* %v13_13f8c, align 4
  %v15_13f8c = add i32 %v0_13f70, 48
  store i32 %v15_13f8c, i32* @r0, align 4
  %v3_13f90 = load i32, i32* %r2.global-to-local, align 4
  %v4_13f90 = add i32 %v3_13f90, -16
  store i32 %v4_13f90, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_13f84, %bb136
  %v3_13fa0102111 = phi i32 [ %v15_13f8c, %bb136 ], [ %v12_13f78, %dec_label_pc_13f84 ]
  %v0_13f98.pre = phi i32 [ %v4_13f90, %bb136 ], [ %v1_13f7c, %dec_label_pc_13f84 ]
  %v2_13f94 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13f94, i32* @r4, align 4
  br label %dec_label_pc_13f98

dec_label_pc_13f98:                               ; preds = %dec_label_pc_13f60, %bb137
  %v3_13fa0101 = phi i32 [ %v0_13f7094, %dec_label_pc_13f60 ], [ %v3_13fa0102111, %bb137 ]
  %v0_13f98 = phi i32 [ %v1_13f60, %dec_label_pc_13f60 ], [ %v0_13f98.pre, %bb137 ]
  %v1_13f98 = add i32 %v0_13f98, 20
  store i32 %v1_13f98, i32* %r2.global-to-local, align 4
  %v3_13f98 = sub i32 0, %v0_13f98
  %v4_13f98 = and i32 %v1_13f98, %v3_13f98
  %v5_13f98 = icmp slt i32 %v4_13f98, 0
  store i1 %v5_13f98, i1* %cpsr_v.global-to-local, align 1
  %v6_13f98 = icmp slt i32 %v1_13f98, 0
  store i1 %v6_13f98, i1* %cpsr_n.global-to-local, align 1
  %v7_13f98 = icmp eq i32 %v1_13f98, 0
  store i1 %v7_13f98, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13f9c

dec_label_pc_13f9c:                               ; preds = %.thread115, %dec_label_pc_13f98
  %v0_13fac.pre157 = phi i32 [ %v0_13fac.pre, %.thread115 ], [ %v1_13f98, %dec_label_pc_13f98 ]
  %v3_13fa0 = phi i32 [ %v3_13fa099116, %.thread115 ], [ %v3_13fa0101, %dec_label_pc_13f98 ]
  %v1_13fa4 = phi i1 [ %v1_13fa8, %.thread115 ], [ %v5_13f98, %dec_label_pc_13f98 ]
  %v0_13fa4 = phi i1 [ %v0_13fa8, %.thread115 ], [ %v6_13f98, %dec_label_pc_13f98 ]
  %v2_13f9c = xor i1 %v1_13fa4, %v0_13fa4
  br i1 %v2_13f9c, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_13f9c
  %v3_13f9c = load i32, i32* @r1, align 4
  %v4_13f9c = inttoptr i32 %v3_13f9c to i32*
  %v5_13f9c = load i32, i32* %v4_13f9c, align 4
  store i32 %v5_13f9c, i32* @r3, align 4
  %v6_13f9c = add i32 %v3_13f9c, 4
  %v7_13f9c = inttoptr i32 %v6_13f9c to i32*
  %v8_13f9c = load i32, i32* %v7_13f9c, align 4
  store i32 %v8_13f9c, i32* @ip, align 4
  %v9_13f9c = add i32 %v3_13f9c, 8
  %v10_13f9c = inttoptr i32 %v9_13f9c to i32*
  %v11_13f9c = load i32, i32* %v10_13f9c, align 4
  store i32 %v11_13f9c, i32* %lr.global-to-local, align 4
  %v12_13f9c = add i32 %v3_13f9c, 12
  store i32 %v12_13f9c, i32* @r1, align 4
  %v4_13fa0 = inttoptr i32 %v3_13fa0 to i32*
  store i32 %v5_13f9c, i32* %v4_13fa0, align 4
  %v6_13fa0 = add i32 %v3_13fa0, 4
  %v7_13fa0 = inttoptr i32 %v6_13fa0 to i32*
  %v8_13fa0 = load i32, i32* @ip, align 4
  store i32 %v8_13fa0, i32* %v7_13fa0, align 4
  %v9_13fa0 = add i32 %v3_13fa0, 8
  %v10_13fa0 = inttoptr i32 %v9_13fa0 to i32*
  %v11_13fa0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_13fa0, i32* %v10_13fa0, align 4
  %v12_13fa0 = add i32 %v3_13fa0, 12
  store i32 %v12_13fa0, i32* @r0, align 4
  %v3_13fa4 = load i32, i32* %r2.global-to-local, align 4
  %v4_13fa4 = add i32 %v3_13fa4, -12
  store i32 %v4_13fa4, i32* %r2.global-to-local, align 4
  %v6_13fa4 = sub i32 11, %v3_13fa4
  %v7_13fa4 = and i32 %v6_13fa4, %v3_13fa4
  %v8_13fa4 = icmp slt i32 %v7_13fa4, 0
  store i1 %v8_13fa4, i1* %cpsr_v.global-to-local, align 1
  %v9_13fa4 = icmp slt i32 %v4_13fa4, 0
  store i1 %v9_13fa4, i1* %cpsr_n.global-to-local, align 1
  %v10_13fa4 = icmp eq i32 %v3_13fa4, 12
  store i1 %v10_13fa4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_13f9c, %bb138
  %v0_13fac.pre = phi i32 [ %v4_13fa4, %bb138 ], [ %v0_13fac.pre157, %dec_label_pc_13f9c ]
  %v3_13fa099116 = phi i32 [ %v12_13fa0, %bb138 ], [ %v3_13fa0, %dec_label_pc_13f9c ]
  %v1_13fa8 = phi i1 [ %v8_13fa4, %bb138 ], [ %v1_13fa4, %dec_label_pc_13f9c ]
  %v0_13fa8 = phi i1 [ %v9_13fa4, %bb138 ], [ %v0_13fa4, %dec_label_pc_13f9c ]
  %v2_13fa8 = xor i1 %v1_13fa8, %v0_13fa8
  br i1 %v2_13fa8, label %dec_label_pc_13fac, label %dec_label_pc_13f9c

dec_label_pc_13fac:                               ; preds = %.thread115, %dec_label_pc_13f58
  %v4_13fbc = phi i32 [ %v0_13f7094, %dec_label_pc_13f58 ], [ %v3_13fa099116, %.thread115 ]
  %v0_13fac = phi i32 [ %v1_13f58, %dec_label_pc_13f58 ], [ %v0_13fac.pre, %.thread115 ]
  %v1_13fac = add i32 %v0_13fac, 8
  store i32 %v1_13fac, i32* %r2.global-to-local, align 4
  %v3_13fac = sub i32 0, %v0_13fac
  %v4_13fac = and i32 %v1_13fac, %v3_13fac
  %v5_13fac = icmp slt i32 %v4_13fac, 0
  store i1 %v5_13fac, i1* %cpsr_v.global-to-local, align 1
  %v6_13fac = icmp slt i32 %v1_13fac, 0
  store i1 %v6_13fac, i1* %cpsr_n.global-to-local, align 1
  %v7_13fac = icmp eq i32 %v1_13fac, 0
  store i1 %v7_13fac, i1* %cpsr_z.global-to-local, align 1
  %v2_13fb0 = xor i1 %v6_13fac, %v5_13fac
  br i1 %v2_13fb0, label %bb140, label %dec_label_pc_13fb4

dec_label_pc_13fb4:                               ; preds = %dec_label_pc_13fac
  %v1_13fb4 = add i32 %v0_13fac, 4
  store i32 %v1_13fb4, i32* %r2.global-to-local, align 4
  %v3_13fb4 = sub i32 -5, %v0_13fac
  %v4_13fb4 = and i32 %v3_13fb4, %v1_13fac
  %v5_13fb4 = icmp slt i32 %v4_13fb4, 0
  store i1 %v5_13fb4, i1* %cpsr_v.global-to-local, align 1
  %v6_13fb4 = icmp slt i32 %v1_13fb4, 0
  store i1 %v6_13fb4, i1* %cpsr_n.global-to-local, align 1
  %v7_13fb4 = icmp eq i32 %v1_13fac, 4
  store i1 %v7_13fb4, i1* %cpsr_z.global-to-local, align 1
  %v2_13fb8 = xor i1 %v6_13fb4, %v5_13fb4
  %v3_13fb8 = load i32, i32* @r1, align 4
  %v4_13fb8 = inttoptr i32 %v3_13fb8 to i32*
  %v5_13fb8 = load i32, i32* %v4_13fb8, align 4
  store i32 %v5_13fb8, i32* @r3, align 4
  %v7_13fb8 = add i32 %v3_13fb8, 4
  br i1 %v2_13fb8, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_13fb4
  store i32 %v7_13fb8, i32* @r1, align 4
  %v5_13fbc = inttoptr i32 %v4_13fbc to i32*
  store i32 %v5_13fb8, i32* %v5_13fbc, align 4
  %v6_13fbc = load i32, i32* @r0, align 4
  %v7_13fbc = add i32 %v6_13fbc, 4
  store i32 %v7_13fbc, i32* @r0, align 4
  %v0_13fcc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_13fb4
  %v7_13fc0 = inttoptr i32 %v7_13fb8 to i32*
  %v8_13fc0 = load i32, i32* %v7_13fc0, align 4
  store i32 %v8_13fc0, i32* @ip, align 4
  %v9_13fc0 = add i32 %v3_13fb8, 8
  store i32 %v9_13fc0, i32* @r1, align 4
  %v4_13fc4 = inttoptr i32 %v4_13fbc to i32*
  store i32 %v5_13fb8, i32* %v4_13fc4, align 4
  %v6_13fc4 = add i32 %v4_13fbc, 4
  %v7_13fc4 = inttoptr i32 %v6_13fc4 to i32*
  %v8_13fc4 = load i32, i32* @ip, align 4
  store i32 %v8_13fc4, i32* %v7_13fc4, align 4
  %v9_13fc4 = add i32 %v4_13fbc, 8
  store i32 %v9_13fc4, i32* @r0, align 4
  %v3_13fc8 = load i32, i32* %r2.global-to-local, align 4
  %v4_13fc8 = add i32 %v3_13fc8, -4
  store i32 %v4_13fc8, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_13fac, %bb, %dec_label_pc_1417c, %dec_label_pc_14110, %dec_label_pc_140a4, %bb139
  %v0_13fcc = phi i32 [ %v0_13fcc.pre, %.thread122 ], [ %v2_1401c, %.thread128 ], [ %v1_13fac, %dec_label_pc_13fac ], [ %v2_13f40, %bb ], [ %v0_13fcc61, %dec_label_pc_1417c ], [ %v0_13fcc60, %dec_label_pc_14110 ], [ %v0_13fcc59, %dec_label_pc_140a4 ], [ %v4_13fc8, %bb139 ]
  %v1_13fcc = add i32 %v0_13fcc, 4
  store i32 %v1_13fcc, i32* %r2.global-to-local, align 4
  %v3_13fcc = sub i32 0, %v0_13fcc
  %v4_13fcc = and i32 %v1_13fcc, %v3_13fcc
  %v5_13fcc = icmp slt i32 %v4_13fcc, 0
  store i1 %v5_13fcc, i1* %cpsr_v.global-to-local, align 1
  %v6_13fcc = icmp slt i32 %v1_13fcc, 0
  store i1 %v6_13fcc, i1* %cpsr_n.global-to-local, align 1
  %v7_13fcc = icmp eq i32 %v1_13fcc, 0
  store i1 %v7_13fcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13fcc, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_13fd4.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_13fd0 = load i8*, i8** %stack_var_-8, align 4
  %v4_13fd0 = ptrtoint i8* %v3_13fd0 to i32
  store i32 %v4_13fd0, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_13fd4 = phi i32 [ %v0_13fd4.pre, %bb140.bb142_crit_edge ], [ %v8_13f3c, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_13fcc, i32 %v0_13fd4)
  %v0_13fd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_13fd8 = add i32 %v0_13fd8, -2
  %v3_13fd8 = sub i32 1, %v0_13fd8
  %v4_13fd8 = and i32 %v3_13fd8, %v0_13fd8
  %v5_13fd8 = icmp slt i32 %v4_13fd8, 0
  store i1 %v5_13fd8, i1* %cpsr_v.global-to-local, align 1
  %v6_13fd8 = icmp slt i32 %v1_13fd8, 0
  store i1 %v6_13fd8, i1* %cpsr_n.global-to-local, align 1
  %v7_13fd8 = icmp eq i32 %v0_13fd8, 2
  store i1 %v7_13fd8, i1* %cpsr_z.global-to-local, align 1
  %v0_13fdc = load i32, i32* @r1, align 4
  %v1_13fdc = inttoptr i32 %v0_13fdc to i8*
  %v2_13fdc = load i8, i8* %v1_13fdc, align 1
  %v5_13fdc = add i32 %v0_13fdc, 1
  store i32 %v5_13fdc, i32* %r1.global-to-local, align 4
  %v2_13fe0 = load i32, i32* @r0, align 4
  %v3_13fe0 = inttoptr i32 %v2_13fe0 to i8*
  store i8 %v2_13fdc, i8* %v3_13fe0, align 1
  %v4_13fe0 = load i32, i32* @r0, align 4
  %v5_13fe0 = add i32 %v4_13fe0, 1
  store i32 %v5_13fe0, i32* %r0.global-to-local, align 4
  %v0_13fe4 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_13fe4 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_13fe4 = xor i1 %v0_13fe4, %v1_13fe4
  br i1 %v2_13fe4, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_13fe4 = load i32, i32* %r1.global-to-local, align 4
  %v4_13fe4 = inttoptr i32 %v3_13fe4 to i8*
  %v5_13fe4 = load i8, i8* %v4_13fe4, align 1
  %v8_13fe4 = add i32 %v3_13fe4, 1
  store i32 %v8_13fe4, i32* %r1.global-to-local, align 4
  %v6_13fe8 = inttoptr i32 %v5_13fe0 to i8*
  store i8 %v5_13fe4, i8* %v6_13fe8, align 1
  %v7_13fe8 = load i32, i32* %r0.global-to-local, align 4
  %v8_13fe8 = add i32 %v7_13fe8, 1
  store i32 %v8_13fe8, i32* %r0.global-to-local, align 4
  %v1_13fec.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_13fec.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_13ff0 = phi i32 [ %v8_13fe8, %bb143 ], [ %v5_13fe0, %bb142 ]
  %v2_13ff0 = phi i1 [ %v2_13fec.pre, %bb143 ], [ %v1_13fe4, %bb142 ]
  %v1_13ff0 = phi i1 [ %v1_13fec.pre, %bb143 ], [ %v0_13fe4, %bb142 ]
  %v0_13fec = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_13fec = xor i1 %v2_13ff0, %v1_13ff0
  %v4_13fec = or i1 %v0_13fec, %v3_13fec
  br i1 %v4_13fec, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_13fec = load i32, i32* %r1.global-to-local, align 4
  %v6_13fec = inttoptr i32 %v5_13fec to i8*
  %v7_13fec = load i8, i8* %v6_13fec, align 1
  %v10_13fec = add i32 %v5_13fec, 1
  store i32 %v10_13fec, i32* %r1.global-to-local, align 4
  %v8_13ff0 = inttoptr i32 %v7_13ff0 to i8*
  store i8 %v7_13fec, i8* %v8_13ff0, align 1
  %v9_13ff0 = load i32, i32* %r0.global-to-local, align 4
  %v10_13ff0 = add i32 %v9_13ff0, 1
  store i32 %v10_13ff0, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_13ff4 = load i8*, i8** %stack_var_-8, align 4
  %v3_13ff4 = ptrtoint i8* %v2_13ff4 to i32
  store i32 %v3_13ff4, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_13f3c)
  %v0_13ffc.pre = load i32, i32* @ip, align 4
  %v0_14004.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_14008.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_13ffc

dec_label_pc_13ffc:                               ; preds = %dec_label_pc_13f48, %.thread126
  %v2_14008 = phi i32 [ %v1_13f30, %dec_label_pc_13f48 ], [ %v2_14008.pre, %.thread126 ]
  %v0_14004 = phi i32 [ %v0_13f30, %dec_label_pc_13f48 ], [ %v0_14004.pre, %.thread126 ]
  %v0_13ffc = phi i32 [ %v1_13f48, %dec_label_pc_13f48 ], [ %v0_13ffc.pre, %.thread126 ]
  %v1_13ffc = sub i32 4, %v0_13ffc
  store i32 %v1_13ffc, i32* @ip, align 4
  %v1_14000 = add i32 %v1_13ffc, -2
  %v3_14000 = sub i32 1, %v1_13ffc
  %v4_14000 = and i32 %v3_14000, %v1_13ffc
  %v5_14000 = icmp slt i32 %v4_14000, 0
  store i1 %v5_14000, i1* %cpsr_v.global-to-local, align 1
  %v6_14000 = icmp slt i32 %v1_14000, 0
  store i1 %v6_14000, i1* %cpsr_n.global-to-local, align 1
  %v7_14000 = icmp eq i32 %v1_13ffc, 2
  store i1 %v7_14000, i1* %cpsr_z.global-to-local, align 1
  %v1_14004 = inttoptr i32 %v0_14004 to i8*
  %v2_14004 = load i8, i8* %v1_14004, align 1
  %v3_14004 = zext i8 %v2_14004 to i32
  store i32 %v3_14004, i32* @r3, align 4
  %v5_14004 = add i32 %v0_14004, 1
  store i32 %v5_14004, i32* @r1, align 4
  %v3_14008 = inttoptr i32 %v2_14008 to i8*
  store i8 %v2_14004, i8* %v3_14008, align 1
  %v4_14008 = load i32, i32* @r0, align 4
  %v5_14008 = add i32 %v4_14008, 1
  store i32 %v5_14008, i32* @r0, align 4
  %v0_1400c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_1400c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_1400c = xor i1 %v0_1400c, %v1_1400c
  br i1 %v2_1400c, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_13ffc
  %v3_1400c = load i32, i32* @r1, align 4
  %v4_1400c = inttoptr i32 %v3_1400c to i8*
  %v5_1400c = load i8, i8* %v4_1400c, align 1
  %v6_1400c = zext i8 %v5_1400c to i32
  store i32 %v6_1400c, i32* @r3, align 4
  %v8_1400c = add i32 %v3_1400c, 1
  store i32 %v8_1400c, i32* @r1, align 4
  %v6_14010 = inttoptr i32 %v5_14008 to i8*
  store i8 %v5_1400c, i8* %v6_14010, align 1
  %v7_14010 = load i32, i32* @r0, align 4
  %v8_14010 = add i32 %v7_14010, 1
  store i32 %v8_14010, i32* @r0, align 4
  %v1_14014.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14014.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_13ffc, %bb145
  %v7_14018 = phi i32 [ %v8_14010, %bb145 ], [ %v5_14008, %dec_label_pc_13ffc ]
  %v2_14018 = phi i1 [ %v2_14014.pre, %bb145 ], [ %v1_1400c, %dec_label_pc_13ffc ]
  %v1_14018 = phi i1 [ %v1_14014.pre, %bb145 ], [ %v0_1400c, %dec_label_pc_13ffc ]
  %v0_14014 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14014 = xor i1 %v2_14018, %v1_14018
  %v4_14014 = or i1 %v0_14014, %v3_14014
  br i1 %v4_14014, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_14014 = load i32, i32* @r1, align 4
  %v6_14014 = inttoptr i32 %v5_14014 to i8*
  %v7_14014 = load i8, i8* %v6_14014, align 1
  %v8_14014 = zext i8 %v7_14014 to i32
  store i32 %v8_14014, i32* @r3, align 4
  %v10_14014 = add i32 %v5_14014, 1
  store i32 %v10_14014, i32* @r1, align 4
  %v8_14018 = inttoptr i32 %v7_14018 to i8*
  store i8 %v7_14014, i8* %v8_14018, align 1
  %v9_14018 = load i32, i32* @r0, align 4
  %v10_14018 = add i32 %v9_14018, 1
  store i32 %v10_14018, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_1414c77 = phi i32 [ %v10_14018, %bb146 ], [ %v7_14018, %.thread127 ]
  %v0_1401c = load i32, i32* %r2.global-to-local, align 4
  %v1_1401c = load i32, i32* @ip, align 4
  %v2_1401c = sub i32 %v0_1401c, %v1_1401c
  store i32 %v2_1401c, i32* %r2.global-to-local, align 4
  %v4_1401c = xor i32 %v1_1401c, %v0_1401c
  %v5_1401c = xor i32 %v2_1401c, %v0_1401c
  %v6_1401c = and i32 %v5_1401c, %v4_1401c
  %v7_1401c = icmp slt i32 %v6_1401c, 0
  store i1 %v7_1401c, i1* %cpsr_v.global-to-local, align 1
  %v8_1401c = icmp slt i32 %v2_1401c, 0
  store i1 %v8_1401c, i1* %cpsr_n.global-to-local, align 1
  %v9_1401c = icmp eq i32 %v0_1401c, %v1_1401c
  store i1 %v9_1401c, i1* %cpsr_z.global-to-local, align 1
  %v2_14020 = xor i1 %v8_1401c, %v7_1401c
  br i1 %v2_14020, label %bb140, label %dec_label_pc_14024

dec_label_pc_14024:                               ; preds = %.thread128
  %v0_14024 = load i32, i32* @r1, align 4
  %v1_14024 = urem i32 %v0_14024, 4
  store i32 %v1_14024, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14024 = icmp eq i32 %v1_14024, 0
  store i1 %v2_14024, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_14024 to i2
  br i1 %v2_14024, label %dec_label_pc_13f58, label %dec_label_pc_1402c

dec_label_pc_1402c:                               ; preds = %dec_label_pc_13f50, %dec_label_pc_14024
  %v0_1414c76 = phi i32 [ %v1_13f30, %dec_label_pc_13f50 ], [ %v0_1414c77, %dec_label_pc_14024 ]
  %v0_140b4 = phi i32 [ %v2_13f40, %dec_label_pc_13f50 ], [ %v2_1401c, %dec_label_pc_14024 ]
  %v0_14034.off0 = phi i2 [ %extract.t, %dec_label_pc_13f50 ], [ %extract.t131, %dec_label_pc_14024 ]
  %v0_1402c = phi i32 [ %v0_13f30, %dec_label_pc_13f50 ], [ %v0_14024, %dec_label_pc_14024 ]
  %v1_1402c = and i32 %v0_1402c, -4
  store i32 %v1_1402c, i32* %r1.global-to-local, align 4
  %v1_14030 = inttoptr i32 %v1_1402c to i32*
  %v2_14030 = load i32, i32* %v1_14030, align 4
  store i32 %v2_14030, i32* %lr.global-to-local, align 4
  %v4_14030 = add i32 %v1_1402c, 4
  store i32 %v4_14030, i32* %r1.global-to-local, align 4
  %v1_140ac = add i32 %v0_140b4, -12
  %v3_140ac = sub i32 11, %v0_140b4
  %v4_140ac = and i32 %v3_140ac, %v0_140b4
  %v5_140ac = icmp slt i32 %v4_140ac, 0
  store i1 %v5_140ac, i1* %cpsr_v.global-to-local, align 1
  %v6_140ac = icmp slt i32 %v1_140ac, 0
  store i1 %v6_140ac, i1* %cpsr_n.global-to-local, align 1
  %v7_140ac = icmp eq i32 %v0_140b4, 12
  store i1 %v7_140ac, i1* %cpsr_z.global-to-local, align 1
  %v2_140b0 = xor i1 %v6_140ac, %v5_140ac
  switch i2 %v0_14034.off0, label %dec_label_pc_14040 [
    i2 -1, label %dec_label_pc_14118
    i2 -2, label %dec_label_pc_140ac
  ]

dec_label_pc_14040:                               ; preds = %dec_label_pc_1402c
  br i1 %v2_140b0, label %dec_label_pc_1408c, label %dec_label_pc_14048

dec_label_pc_14048:                               ; preds = %dec_label_pc_14040
  store i32 %v1_140ac, i32* %r2.global-to-local, align 4
  %v3_1404c = load i32, i32* @r4, align 4
  store i32 %v3_1404c, i32* %stack_var_-16, align 4
  %v6_1404c = load i32, i32* @r5, align 4
  store i32 %v6_1404c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14050

dec_label_pc_14050:                               ; preds = %dec_label_pc_14050.dec_label_pc_14050_crit_edge, %dec_label_pc_14048
  %v0_14074 = phi i32 [ %v12_14074, %dec_label_pc_14050.dec_label_pc_14050_crit_edge ], [ %v0_1414c76, %dec_label_pc_14048 ]
  %v0_14054 = phi i32 [ %v0_14054.pre, %dec_label_pc_14050.dec_label_pc_14050_crit_edge ], [ %v4_14030, %dec_label_pc_14048 ]
  %v0_14050 = phi i32 [ %v0_14050.pre, %dec_label_pc_14050.dec_label_pc_14050_crit_edge ], [ %v2_14030, %dec_label_pc_14048 ]
  %v3_14050 = udiv i32 %v0_14050, 256
  %v1_14054 = inttoptr i32 %v0_14054 to i32*
  %v2_14054 = load i32, i32* %v1_14054, align 4
  store i32 %v2_14054, i32* %r4.global-to-local, align 4
  %v3_14054 = add i32 %v0_14054, 4
  %v4_14054 = inttoptr i32 %v3_14054 to i32*
  %v5_14054 = load i32, i32* %v4_14054, align 4
  store i32 %v5_14054, i32* %r5.global-to-local, align 4
  %v6_14054 = add i32 %v0_14054, 8
  %v7_14054 = inttoptr i32 %v6_14054 to i32*
  %v8_14054 = load i32, i32* %v7_14054, align 4
  store i32 %v8_14054, i32* %ip.global-to-local, align 4
  %v9_14054 = add i32 %v0_14054, 12
  %v10_14054 = inttoptr i32 %v9_14054 to i32*
  %v11_14054 = load i32, i32* %v10_14054, align 4
  store i32 %v11_14054, i32* %lr.global-to-local, align 4
  %v12_14054 = add i32 %v0_14054, 16
  store i32 %v12_14054, i32* %r1.global-to-local, align 4
  %v4_14058 = mul i32 %v2_14054, 16777216
  %v5_14058 = or i32 %v4_14058, %v3_14050
  store i32 %v5_14058, i32* @r3, align 4
  %v3_1405c = udiv i32 %v2_14054, 256
  %v4_14060 = mul i32 %v5_14054, 16777216
  %v5_14060 = or i32 %v4_14060, %v3_1405c
  store i32 %v5_14060, i32* %r4.global-to-local, align 4
  %v3_14064 = udiv i32 %v5_14054, 256
  %v4_14068 = mul i32 %v8_14054, 16777216
  %v5_14068 = or i32 %v4_14068, %v3_14064
  store i32 %v5_14068, i32* %r5.global-to-local, align 4
  %v3_1406c = udiv i32 %v8_14054, 256
  %v4_14070 = mul i32 %v11_14054, 16777216
  %v5_14070 = or i32 %v4_14070, %v3_1406c
  store i32 %v5_14070, i32* @ip, align 4
  %v1_14074 = inttoptr i32 %v0_14074 to i32*
  store i32 %v5_14058, i32* %v1_14074, align 4
  %v3_14074 = add i32 %v0_14074, 4
  %v4_14074 = inttoptr i32 %v3_14074 to i32*
  %v5_14074 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14074, i32* %v4_14074, align 4
  %v6_14074 = add i32 %v0_14074, 8
  %v7_14074 = inttoptr i32 %v6_14074 to i32*
  %v8_14074 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14074, i32* %v7_14074, align 4
  %v9_14074 = add i32 %v0_14074, 12
  %v10_14074 = inttoptr i32 %v9_14074 to i32*
  %v11_14074 = load i32, i32* @ip, align 4
  store i32 %v11_14074, i32* %v10_14074, align 4
  %v12_14074 = add i32 %v0_14074, 16
  store i32 %v12_14074, i32* @r0, align 4
  %v0_14078 = load i32, i32* %r2.global-to-local, align 4
  %v1_14078 = add i32 %v0_14078, -16
  store i32 %v1_14078, i32* %r2.global-to-local, align 4
  %v3_14078 = sub i32 15, %v0_14078
  %v4_14078 = and i32 %v3_14078, %v0_14078
  %v5_14078 = icmp slt i32 %v4_14078, 0
  %v6_14078 = icmp slt i32 %v1_14078, 0
  %v2_1407c = xor i1 %v6_14078, %v5_14078
  br i1 %v2_1407c, label %dec_label_pc_14080, label %dec_label_pc_14050.dec_label_pc_14050_crit_edge

dec_label_pc_14050.dec_label_pc_14050_crit_edge:  ; preds = %dec_label_pc_14050
  %v0_14050.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_14054.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14050

dec_label_pc_14080:                               ; preds = %dec_label_pc_14050
  %v2_14080 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14080, i32* @r4, align 4
  %v5_14080 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14080, i32* @r5, align 4
  %v1_14084 = add i32 %v0_14078, -4
  store i32 %v1_14084, i32* %r2.global-to-local, align 4
  %v3_14084 = add i32 %v0_14078, 2147483632
  %v4_14084 = and i32 %v1_14084, %v3_14084
  %v5_14084 = icmp slt i32 %v4_14084, 0
  store i1 %v5_14084, i1* %cpsr_v.global-to-local, align 1
  %v6_14084 = icmp slt i32 %v1_14084, 0
  store i1 %v6_14084, i1* %cpsr_n.global-to-local, align 1
  %v7_14084 = icmp eq i32 %v1_14084, 0
  store i1 %v7_14084, i1* %cpsr_z.global-to-local, align 1
  %v2_14088 = xor i1 %v6_14084, %v5_14084
  br i1 %v2_14088, label %dec_label_pc_140a4, label %dec_label_pc_1408c

dec_label_pc_1408c:                               ; preds = %dec_label_pc_14080, %dec_label_pc_14040, %dec_label_pc_1408c
  %v1_14098 = phi i32 [ %v4_14098, %dec_label_pc_1408c ], [ %v12_14074, %dec_label_pc_14080 ], [ %v0_1414c76, %dec_label_pc_14040 ]
  %v0_1408c = load i32, i32* %lr.global-to-local, align 4
  %v3_1408c = udiv i32 %v0_1408c, 256
  store i32 %v3_1408c, i32* %ip.global-to-local, align 4
  %v0_14090 = load i32, i32* %r1.global-to-local, align 4
  %v1_14090 = inttoptr i32 %v0_14090 to i32*
  %v2_14090 = load i32, i32* %v1_14090, align 4
  store i32 %v2_14090, i32* %lr.global-to-local, align 4
  %v4_14090 = add i32 %v0_14090, 4
  store i32 %v4_14090, i32* %r1.global-to-local, align 4
  %v4_14094 = mul i32 %v2_14090, 16777216
  %v5_14094 = or i32 %v4_14094, %v3_1408c
  store i32 %v5_14094, i32* @ip, align 4
  %v2_14098 = inttoptr i32 %v1_14098 to i32*
  store i32 %v5_14094, i32* %v2_14098, align 4
  %v3_14098 = load i32, i32* @r0, align 4
  %v4_14098 = add i32 %v3_14098, 4
  store i32 %v4_14098, i32* @r0, align 4
  %v0_1409c = load i32, i32* %r2.global-to-local, align 4
  %v1_1409c = add i32 %v0_1409c, -4
  store i32 %v1_1409c, i32* %r2.global-to-local, align 4
  %v3_1409c = sub i32 3, %v0_1409c
  %v4_1409c = and i32 %v3_1409c, %v0_1409c
  %v5_1409c = icmp slt i32 %v4_1409c, 0
  %v6_1409c = icmp slt i32 %v1_1409c, 0
  %v2_140a0 = xor i1 %v6_1409c, %v5_1409c
  br i1 %v2_140a0, label %dec_label_pc_140a4.loopexit, label %dec_label_pc_1408c

dec_label_pc_140a4.loopexit:                      ; preds = %dec_label_pc_1408c
  %v7_1409c = icmp eq i32 %v0_1409c, 4
  store i1 %v5_1409c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_1409c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_1409c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_140a4

dec_label_pc_140a4:                               ; preds = %dec_label_pc_140a4.loopexit, %dec_label_pc_14080
  %v0_13fcc59 = phi i32 [ %v1_1409c, %dec_label_pc_140a4.loopexit ], [ %v1_14084, %dec_label_pc_14080 ]
  %v0_140a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_140a4 = add i32 %v0_140a4, -3
  store i32 %v1_140a4, i32* @r1, align 4
  br label %bb140

dec_label_pc_140ac:                               ; preds = %dec_label_pc_1402c
  br i1 %v2_140b0, label %dec_label_pc_140f8, label %dec_label_pc_140b4

dec_label_pc_140b4:                               ; preds = %dec_label_pc_140ac
  store i32 %v1_140ac, i32* %r2.global-to-local, align 4
  %v3_140b8 = load i32, i32* @r4, align 4
  store i32 %v3_140b8, i32* %stack_var_-16, align 4
  %v6_140b8 = load i32, i32* @r5, align 4
  store i32 %v6_140b8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_140bc

dec_label_pc_140bc:                               ; preds = %dec_label_pc_140bc.dec_label_pc_140bc_crit_edge, %dec_label_pc_140b4
  %v0_140e0 = phi i32 [ %v12_140e0, %dec_label_pc_140bc.dec_label_pc_140bc_crit_edge ], [ %v0_1414c76, %dec_label_pc_140b4 ]
  %v0_140c0 = phi i32 [ %v0_140c0.pre, %dec_label_pc_140bc.dec_label_pc_140bc_crit_edge ], [ %v4_14030, %dec_label_pc_140b4 ]
  %v0_140bc = phi i32 [ %v0_140bc.pre, %dec_label_pc_140bc.dec_label_pc_140bc_crit_edge ], [ %v2_14030, %dec_label_pc_140b4 ]
  %v3_140bc = udiv i32 %v0_140bc, 65536
  %v1_140c0 = inttoptr i32 %v0_140c0 to i32*
  %v2_140c0 = load i32, i32* %v1_140c0, align 4
  store i32 %v2_140c0, i32* %r4.global-to-local, align 4
  %v3_140c0 = add i32 %v0_140c0, 4
  %v4_140c0 = inttoptr i32 %v3_140c0 to i32*
  %v5_140c0 = load i32, i32* %v4_140c0, align 4
  store i32 %v5_140c0, i32* %r5.global-to-local, align 4
  %v6_140c0 = add i32 %v0_140c0, 8
  %v7_140c0 = inttoptr i32 %v6_140c0 to i32*
  %v8_140c0 = load i32, i32* %v7_140c0, align 4
  store i32 %v8_140c0, i32* %ip.global-to-local, align 4
  %v9_140c0 = add i32 %v0_140c0, 12
  %v10_140c0 = inttoptr i32 %v9_140c0 to i32*
  %v11_140c0 = load i32, i32* %v10_140c0, align 4
  store i32 %v11_140c0, i32* %lr.global-to-local, align 4
  %v12_140c0 = add i32 %v0_140c0, 16
  store i32 %v12_140c0, i32* %r1.global-to-local, align 4
  %v4_140c4 = mul i32 %v2_140c0, 65536
  %v5_140c4 = or i32 %v4_140c4, %v3_140bc
  store i32 %v5_140c4, i32* @r3, align 4
  %v3_140c8 = udiv i32 %v2_140c0, 65536
  %v4_140cc = mul i32 %v5_140c0, 65536
  %v5_140cc = or i32 %v4_140cc, %v3_140c8
  store i32 %v5_140cc, i32* %r4.global-to-local, align 4
  %v3_140d0 = udiv i32 %v5_140c0, 65536
  %v4_140d4 = mul i32 %v8_140c0, 65536
  %v5_140d4 = or i32 %v4_140d4, %v3_140d0
  store i32 %v5_140d4, i32* %r5.global-to-local, align 4
  %v3_140d8 = udiv i32 %v8_140c0, 65536
  %v4_140dc = mul i32 %v11_140c0, 65536
  %v5_140dc = or i32 %v4_140dc, %v3_140d8
  store i32 %v5_140dc, i32* @ip, align 4
  %v1_140e0 = inttoptr i32 %v0_140e0 to i32*
  store i32 %v5_140c4, i32* %v1_140e0, align 4
  %v3_140e0 = add i32 %v0_140e0, 4
  %v4_140e0 = inttoptr i32 %v3_140e0 to i32*
  %v5_140e0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_140e0, i32* %v4_140e0, align 4
  %v6_140e0 = add i32 %v0_140e0, 8
  %v7_140e0 = inttoptr i32 %v6_140e0 to i32*
  %v8_140e0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_140e0, i32* %v7_140e0, align 4
  %v9_140e0 = add i32 %v0_140e0, 12
  %v10_140e0 = inttoptr i32 %v9_140e0 to i32*
  %v11_140e0 = load i32, i32* @ip, align 4
  store i32 %v11_140e0, i32* %v10_140e0, align 4
  %v12_140e0 = add i32 %v0_140e0, 16
  store i32 %v12_140e0, i32* @r0, align 4
  %v0_140e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_140e4 = add i32 %v0_140e4, -16
  store i32 %v1_140e4, i32* %r2.global-to-local, align 4
  %v3_140e4 = sub i32 15, %v0_140e4
  %v4_140e4 = and i32 %v3_140e4, %v0_140e4
  %v5_140e4 = icmp slt i32 %v4_140e4, 0
  %v6_140e4 = icmp slt i32 %v1_140e4, 0
  %v2_140e8 = xor i1 %v6_140e4, %v5_140e4
  br i1 %v2_140e8, label %dec_label_pc_140ec, label %dec_label_pc_140bc.dec_label_pc_140bc_crit_edge

dec_label_pc_140bc.dec_label_pc_140bc_crit_edge:  ; preds = %dec_label_pc_140bc
  %v0_140bc.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_140c0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_140bc

dec_label_pc_140ec:                               ; preds = %dec_label_pc_140bc
  %v2_140ec = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_140ec, i32* @r4, align 4
  %v5_140ec = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_140ec, i32* @r5, align 4
  %v1_140f0 = add i32 %v0_140e4, -4
  store i32 %v1_140f0, i32* %r2.global-to-local, align 4
  %v3_140f0 = add i32 %v0_140e4, 2147483632
  %v4_140f0 = and i32 %v1_140f0, %v3_140f0
  %v5_140f0 = icmp slt i32 %v4_140f0, 0
  store i1 %v5_140f0, i1* %cpsr_v.global-to-local, align 1
  %v6_140f0 = icmp slt i32 %v1_140f0, 0
  store i1 %v6_140f0, i1* %cpsr_n.global-to-local, align 1
  %v7_140f0 = icmp eq i32 %v1_140f0, 0
  store i1 %v7_140f0, i1* %cpsr_z.global-to-local, align 1
  %v2_140f4 = xor i1 %v6_140f0, %v5_140f0
  br i1 %v2_140f4, label %dec_label_pc_14110, label %dec_label_pc_140f8

dec_label_pc_140f8:                               ; preds = %dec_label_pc_140ec, %dec_label_pc_140ac, %dec_label_pc_140f8
  %v1_14104 = phi i32 [ %v4_14104, %dec_label_pc_140f8 ], [ %v12_140e0, %dec_label_pc_140ec ], [ %v0_1414c76, %dec_label_pc_140ac ]
  %v0_140f8 = load i32, i32* %lr.global-to-local, align 4
  %v3_140f8 = udiv i32 %v0_140f8, 65536
  store i32 %v3_140f8, i32* %ip.global-to-local, align 4
  %v0_140fc = load i32, i32* %r1.global-to-local, align 4
  %v1_140fc = inttoptr i32 %v0_140fc to i32*
  %v2_140fc = load i32, i32* %v1_140fc, align 4
  store i32 %v2_140fc, i32* %lr.global-to-local, align 4
  %v4_140fc = add i32 %v0_140fc, 4
  store i32 %v4_140fc, i32* %r1.global-to-local, align 4
  %v4_14100 = mul i32 %v2_140fc, 65536
  %v5_14100 = or i32 %v4_14100, %v3_140f8
  store i32 %v5_14100, i32* @ip, align 4
  %v2_14104 = inttoptr i32 %v1_14104 to i32*
  store i32 %v5_14100, i32* %v2_14104, align 4
  %v3_14104 = load i32, i32* @r0, align 4
  %v4_14104 = add i32 %v3_14104, 4
  store i32 %v4_14104, i32* @r0, align 4
  %v0_14108 = load i32, i32* %r2.global-to-local, align 4
  %v1_14108 = add i32 %v0_14108, -4
  store i32 %v1_14108, i32* %r2.global-to-local, align 4
  %v3_14108 = sub i32 3, %v0_14108
  %v4_14108 = and i32 %v3_14108, %v0_14108
  %v5_14108 = icmp slt i32 %v4_14108, 0
  %v6_14108 = icmp slt i32 %v1_14108, 0
  %v2_1410c = xor i1 %v6_14108, %v5_14108
  br i1 %v2_1410c, label %dec_label_pc_14110.loopexit, label %dec_label_pc_140f8

dec_label_pc_14110.loopexit:                      ; preds = %dec_label_pc_140f8
  %v7_14108 = icmp eq i32 %v0_14108, 4
  store i1 %v5_14108, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_14108, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_14108, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14110

dec_label_pc_14110:                               ; preds = %dec_label_pc_14110.loopexit, %dec_label_pc_140ec
  %v0_13fcc60 = phi i32 [ %v1_14108, %dec_label_pc_14110.loopexit ], [ %v1_140f0, %dec_label_pc_140ec ]
  %v0_14110 = load i32, i32* %r1.global-to-local, align 4
  %v1_14110 = add i32 %v0_14110, -2
  store i32 %v1_14110, i32* @r1, align 4
  br label %bb140

dec_label_pc_14118:                               ; preds = %dec_label_pc_1402c
  br i1 %v2_140b0, label %dec_label_pc_14164, label %dec_label_pc_14120

dec_label_pc_14120:                               ; preds = %dec_label_pc_14118
  store i32 %v1_140ac, i32* %r2.global-to-local, align 4
  %v3_14124 = load i32, i32* @r4, align 4
  store i32 %v3_14124, i32* %stack_var_-16, align 4
  %v6_14124 = load i32, i32* @r5, align 4
  store i32 %v6_14124, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14128

dec_label_pc_14128:                               ; preds = %dec_label_pc_14128.dec_label_pc_14128_crit_edge, %dec_label_pc_14120
  %v0_1414c = phi i32 [ %v12_1414c, %dec_label_pc_14128.dec_label_pc_14128_crit_edge ], [ %v0_1414c76, %dec_label_pc_14120 ]
  %v0_1412c = phi i32 [ %v0_1412c.pre, %dec_label_pc_14128.dec_label_pc_14128_crit_edge ], [ %v4_14030, %dec_label_pc_14120 ]
  %v0_14128 = phi i32 [ %v0_14128.pre, %dec_label_pc_14128.dec_label_pc_14128_crit_edge ], [ %v2_14030, %dec_label_pc_14120 ]
  %v3_14128 = udiv i32 %v0_14128, 16777216
  %v1_1412c = inttoptr i32 %v0_1412c to i32*
  %v2_1412c = load i32, i32* %v1_1412c, align 4
  store i32 %v2_1412c, i32* %r4.global-to-local, align 4
  %v3_1412c = add i32 %v0_1412c, 4
  %v4_1412c = inttoptr i32 %v3_1412c to i32*
  %v5_1412c = load i32, i32* %v4_1412c, align 4
  store i32 %v5_1412c, i32* %r5.global-to-local, align 4
  %v6_1412c = add i32 %v0_1412c, 8
  %v7_1412c = inttoptr i32 %v6_1412c to i32*
  %v8_1412c = load i32, i32* %v7_1412c, align 4
  store i32 %v8_1412c, i32* %ip.global-to-local, align 4
  %v9_1412c = add i32 %v0_1412c, 12
  %v10_1412c = inttoptr i32 %v9_1412c to i32*
  %v11_1412c = load i32, i32* %v10_1412c, align 4
  store i32 %v11_1412c, i32* %lr.global-to-local, align 4
  %v12_1412c = add i32 %v0_1412c, 16
  store i32 %v12_1412c, i32* %r1.global-to-local, align 4
  %v4_14130 = mul i32 %v2_1412c, 256
  %v5_14130 = or i32 %v4_14130, %v3_14128
  store i32 %v5_14130, i32* @r3, align 4
  %v3_14134 = udiv i32 %v2_1412c, 16777216
  %v4_14138 = mul i32 %v5_1412c, 256
  %v5_14138 = or i32 %v4_14138, %v3_14134
  store i32 %v5_14138, i32* %r4.global-to-local, align 4
  %v3_1413c = udiv i32 %v5_1412c, 16777216
  %v4_14140 = mul i32 %v8_1412c, 256
  %v5_14140 = or i32 %v4_14140, %v3_1413c
  store i32 %v5_14140, i32* %r5.global-to-local, align 4
  %v3_14144 = udiv i32 %v8_1412c, 16777216
  %v4_14148 = mul i32 %v11_1412c, 256
  %v5_14148 = or i32 %v4_14148, %v3_14144
  store i32 %v5_14148, i32* @ip, align 4
  %v1_1414c = inttoptr i32 %v0_1414c to i32*
  store i32 %v5_14130, i32* %v1_1414c, align 4
  %v3_1414c = add i32 %v0_1414c, 4
  %v4_1414c = inttoptr i32 %v3_1414c to i32*
  %v5_1414c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1414c, i32* %v4_1414c, align 4
  %v6_1414c = add i32 %v0_1414c, 8
  %v7_1414c = inttoptr i32 %v6_1414c to i32*
  %v8_1414c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1414c, i32* %v7_1414c, align 4
  %v9_1414c = add i32 %v0_1414c, 12
  %v10_1414c = inttoptr i32 %v9_1414c to i32*
  %v11_1414c = load i32, i32* @ip, align 4
  store i32 %v11_1414c, i32* %v10_1414c, align 4
  %v12_1414c = add i32 %v0_1414c, 16
  store i32 %v12_1414c, i32* @r0, align 4
  %v0_14150 = load i32, i32* %r2.global-to-local, align 4
  %v1_14150 = add i32 %v0_14150, -16
  store i32 %v1_14150, i32* %r2.global-to-local, align 4
  %v3_14150 = sub i32 15, %v0_14150
  %v4_14150 = and i32 %v3_14150, %v0_14150
  %v5_14150 = icmp slt i32 %v4_14150, 0
  %v6_14150 = icmp slt i32 %v1_14150, 0
  %v2_14154 = xor i1 %v6_14150, %v5_14150
  br i1 %v2_14154, label %dec_label_pc_14158, label %dec_label_pc_14128.dec_label_pc_14128_crit_edge

dec_label_pc_14128.dec_label_pc_14128_crit_edge:  ; preds = %dec_label_pc_14128
  %v0_14128.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_1412c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14128

dec_label_pc_14158:                               ; preds = %dec_label_pc_14128
  %v2_14158 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14158, i32* @r4, align 4
  %v5_14158 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14158, i32* @r5, align 4
  %v1_1415c = add i32 %v0_14150, -4
  store i32 %v1_1415c, i32* %r2.global-to-local, align 4
  %v3_1415c = add i32 %v0_14150, 2147483632
  %v4_1415c = and i32 %v1_1415c, %v3_1415c
  %v5_1415c = icmp slt i32 %v4_1415c, 0
  store i1 %v5_1415c, i1* %cpsr_v.global-to-local, align 1
  %v6_1415c = icmp slt i32 %v1_1415c, 0
  store i1 %v6_1415c, i1* %cpsr_n.global-to-local, align 1
  %v7_1415c = icmp eq i32 %v1_1415c, 0
  store i1 %v7_1415c, i1* %cpsr_z.global-to-local, align 1
  %v2_14160 = xor i1 %v6_1415c, %v5_1415c
  br i1 %v2_14160, label %dec_label_pc_1417c, label %dec_label_pc_14164

dec_label_pc_14164:                               ; preds = %dec_label_pc_14158, %dec_label_pc_14118, %dec_label_pc_14164
  %v1_14170 = phi i32 [ %v4_14170, %dec_label_pc_14164 ], [ %v12_1414c, %dec_label_pc_14158 ], [ %v0_1414c76, %dec_label_pc_14118 ]
  %v0_14164 = load i32, i32* %lr.global-to-local, align 4
  %v3_14164 = udiv i32 %v0_14164, 16777216
  store i32 %v3_14164, i32* %ip.global-to-local, align 4
  %v0_14168 = load i32, i32* %r1.global-to-local, align 4
  %v1_14168 = inttoptr i32 %v0_14168 to i32*
  %v2_14168 = load i32, i32* %v1_14168, align 4
  store i32 %v2_14168, i32* %lr.global-to-local, align 4
  %v4_14168 = add i32 %v0_14168, 4
  store i32 %v4_14168, i32* %r1.global-to-local, align 4
  %v4_1416c = mul i32 %v2_14168, 256
  %v5_1416c = or i32 %v4_1416c, %v3_14164
  store i32 %v5_1416c, i32* @ip, align 4
  %v2_14170 = inttoptr i32 %v1_14170 to i32*
  store i32 %v5_1416c, i32* %v2_14170, align 4
  %v3_14170 = load i32, i32* @r0, align 4
  %v4_14170 = add i32 %v3_14170, 4
  store i32 %v4_14170, i32* @r0, align 4
  %v0_14174 = load i32, i32* %r2.global-to-local, align 4
  %v1_14174 = add i32 %v0_14174, -4
  store i32 %v1_14174, i32* %r2.global-to-local, align 4
  %v3_14174 = sub i32 3, %v0_14174
  %v4_14174 = and i32 %v3_14174, %v0_14174
  %v5_14174 = icmp slt i32 %v4_14174, 0
  %v6_14174 = icmp slt i32 %v1_14174, 0
  %v2_14178 = xor i1 %v6_14174, %v5_14174
  br i1 %v2_14178, label %dec_label_pc_1417c.loopexit, label %dec_label_pc_14164

dec_label_pc_1417c.loopexit:                      ; preds = %dec_label_pc_14164
  %v7_14174 = icmp eq i32 %v0_14174, 4
  store i1 %v5_14174, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_14174, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_14174, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1417c

dec_label_pc_1417c:                               ; preds = %dec_label_pc_1417c.loopexit, %dec_label_pc_14158
  %v0_13fcc61 = phi i32 [ %v1_14174, %dec_label_pc_1417c.loopexit ], [ %v1_1415c, %dec_label_pc_14158 ]
  %v0_1417c = load i32, i32* %r1.global-to-local, align 4
  %v1_1417c = add i32 %v0_1417c, -1
  store i32 %v1_1417c, i32* @r1, align 4
  br label %bb140

dec_label_pc_14184:                               ; preds = %dec_label_pc_13f30
  %v1_14184 = load i32, i32* @r2, align 4
  %v2_14184 = add i32 %v1_14184, %v0_13f30
  store i32 %v2_14184, i32* %r1.global-to-local, align 4
  %v2_14188 = add i32 %v1_14184, %v1_13f30
  store i32 %v2_14188, i32* %r0.global-to-local, align 4
  %v2_1418c = add i32 %v1_14184, -4
  store i32 %v2_1418c, i32* %r2.global-to-local, align 4
  %v4_1418c = sub i32 3, %v1_14184
  %v5_1418c = and i32 %v4_1418c, %v1_14184
  %v6_1418c = icmp slt i32 %v5_1418c, 0
  store i1 %v6_1418c, i1* %cpsr_v.global-to-local, align 1
  %v7_1418c = icmp slt i32 %v2_1418c, 0
  store i1 %v7_1418c, i1* %cpsr_n.global-to-local, align 1
  %v8_1418c = icmp eq i32 %v1_14184, 4
  store i1 %v8_1418c, i1* %cpsr_z.global-to-local, align 1
  %v5_14190 = icmp slt i32 %v1_14184, 4
  br i1 %v5_14190, label %bb150, label %dec_label_pc_14194

dec_label_pc_14194:                               ; preds = %dec_label_pc_14184
  %v1_14194 = urem i32 %v2_14188, 4
  store i32 %v1_14194, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14194 = icmp eq i32 %v1_14194, 0
  store i1 %v2_14194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14194, label %dec_label_pc_1419c, label %dec_label_pc_1423c

dec_label_pc_1419c:                               ; preds = %dec_label_pc_14194
  %v1_1419c = urem i32 %v2_14184, 4
  store i32 %v1_1419c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1419c = icmp eq i32 %v1_1419c, 0
  store i1 %v2_1419c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1419c, label %dec_label_pc_141a4, label %dec_label_pc_14268

dec_label_pc_141a4:                               ; preds = %dec_label_pc_1419c, %dec_label_pc_14260
  %v0_141bc37 = phi i32 [ %v2_14188, %dec_label_pc_1419c ], [ %v0_142b020, %dec_label_pc_14260 ]
  %v0_141b836 = phi i32 [ %v2_14184, %dec_label_pc_1419c ], [ %v0_14260, %dec_label_pc_14260 ]
  %v0_141a4 = phi i32 [ %v2_1418c, %dec_label_pc_1419c ], [ %v2_14258, %dec_label_pc_14260 ]
  %v2_141a4 = add i32 %v0_141a4, -8
  store i32 %v2_141a4, i32* %r2.global-to-local, align 4
  %v4_141a4 = sub i32 7, %v0_141a4
  %v5_141a4 = and i32 %v4_141a4, %v0_141a4
  %v6_141a4 = icmp slt i32 %v5_141a4, 0
  store i1 %v6_141a4, i1* %cpsr_v.global-to-local, align 1
  %v7_141a4 = icmp slt i32 %v2_141a4, 0
  store i1 %v7_141a4, i1* %cpsr_n.global-to-local, align 1
  %v8_141a4 = icmp eq i32 %v0_141a4, 8
  store i1 %v8_141a4, i1* %cpsr_z.global-to-local, align 1
  %v5_141a8 = icmp slt i32 %v0_141a4, 8
  br i1 %v5_141a8, label %dec_label_pc_141f4, label %dec_label_pc_141ac

dec_label_pc_141ac:                               ; preds = %dec_label_pc_141a4
  %v3_141ac = load i32, i32* @r4, align 4
  %v5_141ac = inttoptr i32 %v3_141ac to i8*
  store i8* %v5_141ac, i8** %stack_var_-8, align 4
  %v8_141ac = load i32, i32* @lr, align 4
  %v2_141b0 = add i32 %v0_141a4, -28
  store i32 %v2_141b0, i32* %r2.global-to-local, align 4
  %v4_141b0 = sub i32 27, %v0_141a4
  %v5_141b0 = and i32 %v4_141b0, %v2_141a4
  %v6_141b0 = icmp slt i32 %v5_141b0, 0
  store i1 %v6_141b0, i1* %cpsr_v.global-to-local, align 1
  %v7_141b0 = icmp slt i32 %v2_141b0, 0
  store i1 %v7_141b0, i1* %cpsr_n.global-to-local, align 1
  %v8_141b0 = icmp eq i32 %v2_141a4, 20
  store i1 %v8_141b0, i1* %cpsr_z.global-to-local, align 1
  %v5_141b4 = icmp slt i32 %v2_141a4, 20
  br i1 %v5_141b4, label %dec_label_pc_141d0, label %dec_label_pc_141b8

dec_label_pc_141b8:                               ; preds = %dec_label_pc_141ac, %dec_label_pc_141b8.dec_label_pc_141b8_crit_edge
  %v0_141bc = phi i32 [ %v1_141c4, %dec_label_pc_141b8.dec_label_pc_141b8_crit_edge ], [ %v0_141bc37, %dec_label_pc_141ac ]
  %v0_141b8 = phi i32 [ %v0_141b8.pre, %dec_label_pc_141b8.dec_label_pc_141b8_crit_edge ], [ %v0_141b836, %dec_label_pc_141ac ]
  %v1_141b8 = add i32 %v0_141b8, -4
  %v2_141b8 = inttoptr i32 %v1_141b8 to i32*
  %v3_141b8 = load i32, i32* %v2_141b8, align 4
  %v4_141b8 = add i32 %v0_141b8, -8
  %v5_141b8 = inttoptr i32 %v4_141b8 to i32*
  %v6_141b8 = load i32, i32* %v5_141b8, align 4
  store i32 %v6_141b8, i32* %r4.global-to-local, align 4
  %v7_141b8 = add i32 %v0_141b8, -12
  %v8_141b8 = inttoptr i32 %v7_141b8 to i32*
  %v9_141b8 = load i32, i32* %v8_141b8, align 4
  store i32 %v9_141b8, i32* %ip.global-to-local, align 4
  %v10_141b8 = add i32 %v0_141b8, -16
  %v11_141b8 = inttoptr i32 %v10_141b8 to i32*
  %v12_141b8 = load i32, i32* %v11_141b8, align 4
  store i32 %v12_141b8, i32* %lr.global-to-local, align 4
  store i32 %v10_141b8, i32* %r1.global-to-local, align 4
  %v1_141bc = add i32 %v0_141bc, -16
  %v2_141bc = inttoptr i32 %v1_141bc to i32*
  store i32 %v3_141b8, i32* %v2_141bc, align 4
  %v4_141bc = add i32 %v0_141bc, -12
  %v5_141bc = inttoptr i32 %v4_141bc to i32*
  %v6_141bc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_141bc, i32* %v5_141bc, align 4
  %v7_141bc = add i32 %v0_141bc, -8
  %v8_141bc = inttoptr i32 %v7_141bc to i32*
  %v9_141bc = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_141bc, i32* %v8_141bc, align 4
  %v10_141bc = add i32 %v0_141bc, -4
  %v11_141bc = inttoptr i32 %v10_141bc to i32*
  %v12_141bc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_141bc, i32* %v11_141bc, align 4
  store i32 %v1_141bc, i32* %r0.global-to-local, align 4
  %v0_141c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_141c0 = add i32 %v0_141c0, -4
  %v2_141c0 = inttoptr i32 %v1_141c0 to i32*
  %v3_141c0 = load i32, i32* %v2_141c0, align 4
  store i32 %v3_141c0, i32* @r3, align 4
  %v4_141c0 = add i32 %v0_141c0, -8
  %v5_141c0 = inttoptr i32 %v4_141c0 to i32*
  %v6_141c0 = load i32, i32* %v5_141c0, align 4
  store i32 %v6_141c0, i32* %r4.global-to-local, align 4
  %v7_141c0 = add i32 %v0_141c0, -12
  %v8_141c0 = inttoptr i32 %v7_141c0 to i32*
  %v9_141c0 = load i32, i32* %v8_141c0, align 4
  store i32 %v9_141c0, i32* @ip, align 4
  %v10_141c0 = add i32 %v0_141c0, -16
  %v11_141c0 = inttoptr i32 %v10_141c0 to i32*
  %v12_141c0 = load i32, i32* %v11_141c0, align 4
  store i32 %v12_141c0, i32* %lr.global-to-local, align 4
  store i32 %v10_141c0, i32* %r1.global-to-local, align 4
  %v1_141c4 = add i32 %v0_141bc, -32
  %v2_141c4 = inttoptr i32 %v1_141c4 to i32*
  store i32 %v3_141c0, i32* %v2_141c4, align 4
  %v4_141c4 = add i32 %v0_141bc, -28
  %v5_141c4 = inttoptr i32 %v4_141c4 to i32*
  %v6_141c4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_141c4, i32* %v5_141c4, align 4
  %v7_141c4 = add i32 %v0_141bc, -24
  %v8_141c4 = inttoptr i32 %v7_141c4 to i32*
  %v9_141c4 = load i32, i32* @ip, align 4
  store i32 %v9_141c4, i32* %v8_141c4, align 4
  %v10_141c4 = add i32 %v0_141bc, -20
  %v11_141c4 = inttoptr i32 %v10_141c4 to i32*
  %v12_141c4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_141c4, i32* %v11_141c4, align 4
  store i32 %v1_141c4, i32* %r0.global-to-local, align 4
  %v0_141c8 = load i32, i32* %r2.global-to-local, align 4
  %v2_141c8 = add i32 %v0_141c8, -32
  store i32 %v2_141c8, i32* %r2.global-to-local, align 4
  %v6_141cc = icmp slt i32 %v0_141c8, 32
  br i1 %v6_141cc, label %dec_label_pc_141d0.loopexit, label %dec_label_pc_141b8.dec_label_pc_141b8_crit_edge

dec_label_pc_141b8.dec_label_pc_141b8_crit_edge:  ; preds = %dec_label_pc_141b8
  %v0_141b8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_141b8

dec_label_pc_141d0.loopexit:                      ; preds = %dec_label_pc_141b8
  %v4_141c8 = sub i32 31, %v0_141c8
  %v5_141c8 = and i32 %v4_141c8, %v0_141c8
  %v6_141c8 = icmp slt i32 %v5_141c8, 0
  %v7_141c8 = icmp slt i32 %v2_141c8, 0
  store i1 %v6_141c8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_141c8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_141d0

dec_label_pc_141d0:                               ; preds = %dec_label_pc_141d0.loopexit, %dec_label_pc_141ac
  %v6_141d8 = phi i32 [ %v1_141c4, %dec_label_pc_141d0.loopexit ], [ %v0_141bc37, %dec_label_pc_141ac ]
  %v0_141e0.pr = phi i32 [ %v2_141c8, %dec_label_pc_141d0.loopexit ], [ %v2_141b0, %dec_label_pc_141ac ]
  %v4_141d0 = add i32 %v0_141e0.pr, 16
  %v6_141d0 = sub i32 0, %v0_141e0.pr
  %v7_141d0 = and i32 %v4_141d0, %v6_141d0
  %v8_141d0 = icmp slt i32 %v7_141d0, 0
  store i1 %v8_141d0, i1* %cpsr_v.global-to-local, align 1
  %v9_141d0 = icmp slt i32 %v4_141d0, 0
  store i1 %v9_141d0, i1* %cpsr_n.global-to-local, align 1
  %v10_141d0 = icmp eq i32 %v4_141d0, 0
  store i1 %v10_141d0, i1* %cpsr_z.global-to-local, align 1
  %v5_141d4 = icmp slt i32 %v0_141e0.pr, -16
  br i1 %v5_141d4, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_141d0
  %v6_141d4 = load i32, i32* %r1.global-to-local, align 4
  %v7_141d4 = add i32 %v6_141d4, -4
  %v8_141d4 = inttoptr i32 %v7_141d4 to i32*
  %v9_141d4 = load i32, i32* %v8_141d4, align 4
  store i32 %v9_141d4, i32* @r3, align 4
  %v10_141d4 = add i32 %v6_141d4, -8
  %v11_141d4 = inttoptr i32 %v10_141d4 to i32*
  %v12_141d4 = load i32, i32* %v11_141d4, align 4
  store i32 %v12_141d4, i32* %r4.global-to-local, align 4
  %v13_141d4 = add i32 %v6_141d4, -12
  %v14_141d4 = inttoptr i32 %v13_141d4 to i32*
  %v15_141d4 = load i32, i32* %v14_141d4, align 4
  store i32 %v15_141d4, i32* @ip, align 4
  %v16_141d4 = add i32 %v6_141d4, -16
  %v17_141d4 = inttoptr i32 %v16_141d4 to i32*
  %v18_141d4 = load i32, i32* %v17_141d4, align 4
  store i32 %v18_141d4, i32* %lr.global-to-local, align 4
  store i32 %v16_141d4, i32* %r1.global-to-local, align 4
  %v7_141d8 = add i32 %v6_141d8, -16
  %v8_141d8 = inttoptr i32 %v7_141d8 to i32*
  store i32 %v9_141d4, i32* %v8_141d8, align 4
  %v10_141d8 = add i32 %v6_141d8, -12
  %v11_141d8 = inttoptr i32 %v10_141d8 to i32*
  %v12_141d8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_141d8, i32* %v11_141d8, align 4
  %v13_141d8 = add i32 %v6_141d8, -8
  %v14_141d8 = inttoptr i32 %v13_141d8 to i32*
  %v15_141d8 = load i32, i32* @ip, align 4
  store i32 %v15_141d8, i32* %v14_141d8, align 4
  %v16_141d8 = add i32 %v6_141d8, -4
  %v17_141d8 = inttoptr i32 %v16_141d8 to i32*
  %v18_141d8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_141d8, i32* %v17_141d8, align 4
  store i32 %v7_141d8, i32* %r0.global-to-local, align 4
  %v6_141dc = load i32, i32* %r2.global-to-local, align 4
  %v7_141dc = add i32 %v6_141dc, -16
  store i32 %v7_141dc, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_141d0, %bb147
  %v6_141e8 = phi i32 [ %v7_141d8, %bb147 ], [ %v6_141d8, %dec_label_pc_141d0 ]
  %v0_141e0 = phi i32 [ %v7_141dc, %bb147 ], [ %v0_141e0.pr, %dec_label_pc_141d0 ]
  %v4_141e0 = add i32 %v0_141e0, 20
  store i32 %v4_141e0, i32* %r2.global-to-local, align 4
  %v6_141e0 = sub i32 0, %v0_141e0
  %v7_141e0 = and i32 %v4_141e0, %v6_141e0
  %v8_141e0 = icmp slt i32 %v7_141e0, 0
  store i1 %v8_141e0, i1* %cpsr_v.global-to-local, align 1
  %v9_141e0 = icmp slt i32 %v4_141e0, 0
  store i1 %v9_141e0, i1* %cpsr_n.global-to-local, align 1
  %v10_141e0 = icmp eq i32 %v4_141e0, 0
  store i1 %v10_141e0, i1* %cpsr_z.global-to-local, align 1
  %v5_141e4 = icmp slt i32 %v0_141e0, -20
  br i1 %v5_141e4, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_141e4 = load i32, i32* %r1.global-to-local, align 4
  %v7_141e4 = add i32 %v6_141e4, -4
  %v8_141e4 = inttoptr i32 %v7_141e4 to i32*
  %v9_141e4 = load i32, i32* %v8_141e4, align 4
  store i32 %v9_141e4, i32* @r3, align 4
  %v10_141e4 = add i32 %v6_141e4, -8
  %v11_141e4 = inttoptr i32 %v10_141e4 to i32*
  %v12_141e4 = load i32, i32* %v11_141e4, align 4
  store i32 %v12_141e4, i32* @ip, align 4
  %v13_141e4 = add i32 %v6_141e4, -12
  %v14_141e4 = inttoptr i32 %v13_141e4 to i32*
  %v15_141e4 = load i32, i32* %v14_141e4, align 4
  store i32 %v15_141e4, i32* %lr.global-to-local, align 4
  store i32 %v13_141e4, i32* %r1.global-to-local, align 4
  %v7_141e8 = add i32 %v6_141e8, -12
  %v8_141e8 = inttoptr i32 %v7_141e8 to i32*
  store i32 %v9_141e4, i32* %v8_141e8, align 4
  %v10_141e8 = add i32 %v6_141e8, -8
  %v11_141e8 = inttoptr i32 %v10_141e8 to i32*
  %v12_141e8 = load i32, i32* @ip, align 4
  store i32 %v12_141e8, i32* %v11_141e8, align 4
  %v13_141e8 = add i32 %v6_141e8, -4
  %v14_141e8 = inttoptr i32 %v13_141e8 to i32*
  %v15_141e8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_141e8, i32* %v14_141e8, align 4
  store i32 %v7_141e8, i32* %r0.global-to-local, align 4
  %v6_141ec = load i32, i32* %r2.global-to-local, align 4
  %v7_141ec = add i32 %v6_141ec, -12
  store i32 %v7_141ec, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_1420c45 = phi i32 [ %v6_141e8, %.thread2 ], [ %v7_141e8, %bb148 ]
  %v0_141f443 = phi i32 [ %v4_141e0, %.thread2 ], [ %v7_141ec, %bb148 ]
  %v2_141f0 = load i8*, i8** %stack_var_-8, align 4
  %v3_141f0 = ptrtoint i8* %v2_141f0 to i32
  store i32 %v3_141f0, i32* @r4, align 4
  store i32 %v8_141ac, i32* @lr, align 4
  br label %dec_label_pc_141f4

dec_label_pc_141f4:                               ; preds = %dec_label_pc_141a4, %.thread4
  %v7_14204 = phi i32 [ %v0_141bc37, %dec_label_pc_141a4 ], [ %v6_1420c45, %.thread4 ]
  %v0_141f4 = phi i32 [ %v2_141a4, %dec_label_pc_141a4 ], [ %v0_141f443, %.thread4 ]
  %v2_141f4 = add i32 %v0_141f4, 8
  store i32 %v2_141f4, i32* %r2.global-to-local, align 4
  %v4_141f4 = sub i32 0, %v0_141f4
  %v5_141f4 = and i32 %v2_141f4, %v4_141f4
  %v6_141f4 = icmp slt i32 %v5_141f4, 0
  store i1 %v6_141f4, i1* %cpsr_v.global-to-local, align 1
  %v7_141f4 = icmp slt i32 %v2_141f4, 0
  store i1 %v7_141f4, i1* %cpsr_n.global-to-local, align 1
  %v8_141f4 = icmp eq i32 %v2_141f4, 0
  store i1 %v8_141f4, i1* %cpsr_z.global-to-local, align 1
  %v5_141f8 = icmp slt i32 %v0_141f4, -8
  br i1 %v5_141f8, label %bb150, label %dec_label_pc_141fc

dec_label_pc_141fc:                               ; preds = %dec_label_pc_141f4
  %v6_141fc = add i32 %v0_141f4, 4
  store i32 %v6_141fc, i32* %r2.global-to-local, align 4
  %v8_141fc = sub i32 -5, %v0_141f4
  %v9_141fc = and i32 %v8_141fc, %v2_141f4
  %v10_141fc = icmp slt i32 %v9_141fc, 0
  store i1 %v10_141fc, i1* %cpsr_v.global-to-local, align 1
  %v11_141fc = icmp slt i32 %v6_141fc, 0
  store i1 %v11_141fc, i1* %cpsr_n.global-to-local, align 1
  %v12_141fc = icmp eq i32 %v2_141f4, 4
  store i1 %v12_141fc, i1* %cpsr_z.global-to-local, align 1
  %v5_14200 = icmp slt i32 %v2_141f4, 4
  %v6_14200 = load i32, i32* %r1.global-to-local, align 4
  %v7_14200 = add i32 %v6_14200, -4
  %v8_14200 = inttoptr i32 %v7_14200 to i32*
  %v9_14200 = load i32, i32* %v8_14200, align 4
  store i32 %v9_14200, i32* @r3, align 4
  br i1 %v5_14200, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_141fc
  store i32 %v7_14200, i32* %r1.global-to-local, align 4
  %v8_14204 = add i32 %v7_14204, -4
  %v9_14204 = inttoptr i32 %v8_14204 to i32*
  store i32 %v9_14200, i32* %v9_14204, align 4
  %v10_14204 = load i32, i32* %r0.global-to-local, align 4
  %v11_14204 = add i32 %v10_14204, -4
  store i32 %v11_14204, i32* %r0.global-to-local, align 4
  %v0_14214.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_141fc
  %v10_14208 = add i32 %v6_14200, -8
  %v11_14208 = inttoptr i32 %v10_14208 to i32*
  %v12_14208 = load i32, i32* %v11_14208, align 4
  store i32 %v12_14208, i32* @ip, align 4
  store i32 %v10_14208, i32* %r1.global-to-local, align 4
  %v7_1420c = add i32 %v7_14204, -8
  %v8_1420c = inttoptr i32 %v7_1420c to i32*
  store i32 %v9_14200, i32* %v8_1420c, align 4
  %v10_1420c = add i32 %v7_14204, -4
  %v11_1420c = inttoptr i32 %v10_1420c to i32*
  %v12_1420c = load i32, i32* @ip, align 4
  store i32 %v12_1420c, i32* %v11_1420c, align 4
  store i32 %v7_1420c, i32* %r0.global-to-local, align 4
  %v6_14210 = load i32, i32* %r2.global-to-local, align 4
  %v7_14210 = add i32 %v6_14210, -4
  store i32 %v7_14210, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %.thread14, %dec_label_pc_141f4, %dec_label_pc_14184, %dec_label_pc_143b8, %dec_label_pc_1434c, %dec_label_pc_142e0, %bb149
  %v2_14218 = phi i32 [ %v11_14204, %.thread8 ], [ %v0_142b020, %.thread14 ], [ %v7_14204, %dec_label_pc_141f4 ], [ %v2_14188, %dec_label_pc_14184 ], [ %v2_1422453, %dec_label_pc_143b8 ], [ %v2_1422452, %dec_label_pc_1434c ], [ %v2_1422451, %dec_label_pc_142e0 ], [ %v7_1420c, %bb149 ]
  %v0_14214 = phi i32 [ %v0_14214.pre, %.thread8 ], [ %v2_14258, %.thread14 ], [ %v2_141f4, %dec_label_pc_141f4 ], [ %v2_1418c, %dec_label_pc_14184 ], [ %v0_1421449, %dec_label_pc_143b8 ], [ %v0_1421448, %dec_label_pc_1434c ], [ %v0_1421447, %dec_label_pc_142e0 ], [ %v7_14210, %bb149 ]
  %v1_14214 = add i32 %v0_14214, 4
  store i32 %v1_14214, i32* %r2.global-to-local, align 4
  %v3_14214 = sub i32 0, %v0_14214
  %v4_14214 = and i32 %v1_14214, %v3_14214
  %v5_14214 = icmp slt i32 %v4_14214, 0
  store i1 %v5_14214, i1* %cpsr_v.global-to-local, align 1
  %v6_14214 = icmp slt i32 %v1_14214, 0
  store i1 %v6_14214, i1* %cpsr_n.global-to-local, align 1
  %v7_14214 = icmp eq i32 %v1_14214, 0
  store i1 %v7_14214, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14214, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_1421c = add i32 %v0_14214, 2
  %v3_1421c = sub i32 -3, %v0_14214
  %v4_1421c = and i32 %v3_1421c, %v1_14214
  %v5_1421c = icmp slt i32 %v4_1421c, 0
  store i1 %v5_1421c, i1* %cpsr_v.global-to-local, align 1
  %v6_1421c = icmp slt i32 %v1_1421c, 0
  store i1 %v6_1421c, i1* %cpsr_n.global-to-local, align 1
  %v7_1421c = icmp eq i32 %v1_14214, 2
  store i1 %v7_1421c, i1* %cpsr_z.global-to-local, align 1
  %v0_14220 = load i32, i32* %r1.global-to-local, align 4
  %v1_14220 = add i32 %v0_14220, -1
  %v2_14220 = inttoptr i32 %v1_14220 to i8*
  %v3_14220 = load i8, i8* %v2_14220, align 1
  %v4_14220 = zext i8 %v3_14220 to i32
  store i32 %v4_14220, i32* @r3, align 4
  store i32 %v1_14220, i32* %r1.global-to-local, align 4
  %v3_14224 = add i32 %v2_14218, -1
  %v4_14224 = inttoptr i32 %v3_14224 to i8*
  store i8 %v3_14220, i8* %v4_14224, align 1
  %v5_14224 = load i32, i32* %r0.global-to-local, align 4
  %v6_14224 = add i32 %v5_14224, -1
  store i32 %v6_14224, i32* %r0.global-to-local, align 4
  %v0_14228 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14228 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14228 = xor i1 %v0_14228, %v1_14228
  br i1 %v2_14228, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_14228 = load i32, i32* %r1.global-to-local, align 4
  %v4_14228 = add i32 %v3_14228, -1
  %v5_14228 = inttoptr i32 %v4_14228 to i8*
  %v6_14228 = load i8, i8* %v5_14228, align 1
  %v7_14228 = zext i8 %v6_14228 to i32
  store i32 %v7_14228, i32* @r3, align 4
  store i32 %v4_14228, i32* %r1.global-to-local, align 4
  %v6_1422c = add i32 %v5_14224, -2
  %v7_1422c = inttoptr i32 %v6_1422c to i8*
  store i8 %v6_14228, i8* %v7_1422c, align 1
  %v8_1422c = load i32, i32* %r0.global-to-local, align 4
  %v9_1422c = add i32 %v8_1422c, -1
  store i32 %v9_1422c, i32* %r0.global-to-local, align 4
  %v1_14230.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14230.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_14234 = phi i32 [ %v9_1422c, %bb152 ], [ %v6_14224, %bb151 ]
  %v2_14234 = phi i1 [ %v2_14230.pre, %bb152 ], [ %v1_14228, %bb151 ]
  %v1_14234 = phi i1 [ %v1_14230.pre, %bb152 ], [ %v0_14228, %bb151 ]
  %v0_14230 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14230 = xor i1 %v2_14234, %v1_14234
  %v4_14230 = or i1 %v0_14230, %v3_14230
  br i1 %v4_14230, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_14230 = load i32, i32* %r1.global-to-local, align 4
  %v6_14230 = add i32 %v5_14230, -1
  %v7_14230 = inttoptr i32 %v6_14230 to i8*
  %v8_14230 = load i8, i8* %v7_14230, align 1
  %v9_14230 = zext i8 %v8_14230 to i32
  store i32 %v9_14230, i32* @r3, align 4
  store i32 %v6_14230, i32* %r1.global-to-local, align 4
  %v8_14234 = add i32 %v7_14234, -1
  %v9_14234 = inttoptr i32 %v8_14234 to i8*
  store i8 %v8_14230, i8* %v9_14234, align 1
  %v10_14234 = load i32, i32* %r0.global-to-local, align 4
  %v11_14234 = add i32 %v10_14234, -1
  store i32 %v11_14234, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_1423c:                               ; preds = %dec_label_pc_14194
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_1423c = icmp eq i32 %v1_14194, 1
  store i1 %v8_1423c, i1* %cpsr_n.global-to-local, align 1
  %v9_1423c = icmp eq i32 %v1_14194, 2
  store i1 %v9_1423c, i1* %cpsr_z.global-to-local, align 1
  %v1_14240 = add i32 %v2_14184, -1
  %v2_14240 = inttoptr i32 %v1_14240 to i8*
  %v3_14240 = load i8, i8* %v2_14240, align 1
  %v4_14240 = zext i8 %v3_14240 to i32
  store i32 %v4_14240, i32* @r3, align 4
  store i32 %v1_14240, i32* %r1.global-to-local, align 4
  %v3_14244 = add i32 %v2_14188, -1
  %v4_14244 = inttoptr i32 %v3_14244 to i8*
  store i8 %v3_14240, i8* %v4_14244, align 1
  %v5_14244 = load i32, i32* %r0.global-to-local, align 4
  %v6_14244 = add i32 %v5_14244, -1
  store i32 %v6_14244, i32* %r0.global-to-local, align 4
  br i1 %v8_1423c, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_1423c
  %v6_14248 = load i32, i32* %r1.global-to-local, align 4
  %v7_14248 = add i32 %v6_14248, -1
  %v8_14248 = inttoptr i32 %v7_14248 to i8*
  %v9_14248 = load i8, i8* %v8_14248, align 1
  %v10_14248 = zext i8 %v9_14248 to i32
  store i32 %v10_14248, i32* @r3, align 4
  store i32 %v7_14248, i32* %r1.global-to-local, align 4
  %v9_1424c = add i32 %v5_14244, -2
  %v10_1424c = inttoptr i32 %v9_1424c to i8*
  store i8 %v9_14248, i8* %v10_1424c, align 1
  %v11_1424c = load i32, i32* %r0.global-to-local, align 4
  %v12_1424c = add i32 %v11_1424c, -1
  store i32 %v12_1424c, i32* %r0.global-to-local, align 4
  br i1 %v9_1423c, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_14250 = load i32, i32* %r1.global-to-local, align 4
  %v9_14250 = add i32 %v8_14250, -1
  %v10_14250 = inttoptr i32 %v9_14250 to i8*
  %v11_14250 = load i8, i8* %v10_14250, align 1
  %v12_14250 = zext i8 %v11_14250 to i32
  store i32 %v12_14250, i32* @r3, align 4
  store i32 %v9_14250, i32* %r1.global-to-local, align 4
  %v11_14254 = add i32 %v11_1424c, -2
  %v12_14254 = inttoptr i32 %v11_14254 to i8*
  store i8 %v11_14250, i8* %v12_14254, align 1
  %v13_14254 = load i32, i32* %r0.global-to-local, align 4
  %v14_14254 = add i32 %v13_14254, -1
  store i32 %v14_14254, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_1423c, %bb155
  %v0_142b020 = phi i32 [ %v12_1424c, %bb154 ], [ %v6_14244, %dec_label_pc_1423c ], [ %v14_14254, %bb155 ]
  %v0_14258 = load i32, i32* %r2.global-to-local, align 4
  %v1_14258 = load i32, i32* @ip, align 4
  %v2_14258 = sub i32 %v0_14258, %v1_14258
  store i32 %v2_14258, i32* %r2.global-to-local, align 4
  %v4_14258 = xor i32 %v1_14258, %v0_14258
  %v5_14258 = xor i32 %v2_14258, %v0_14258
  %v6_14258 = and i32 %v5_14258, %v4_14258
  %v7_14258 = icmp slt i32 %v6_14258, 0
  store i1 %v7_14258, i1* %cpsr_v.global-to-local, align 1
  %v8_14258 = icmp slt i32 %v2_14258, 0
  store i1 %v8_14258, i1* %cpsr_n.global-to-local, align 1
  %v9_14258 = icmp eq i32 %v0_14258, %v1_14258
  store i1 %v9_14258, i1* %cpsr_z.global-to-local, align 1
  %v5_1425c = icmp slt i32 %v0_14258, %v1_14258
  br i1 %v5_1425c, label %bb150, label %dec_label_pc_14260

dec_label_pc_14260:                               ; preds = %.thread14
  %v0_14260 = load i32, i32* %r1.global-to-local, align 4
  %v1_14260 = urem i32 %v0_14260, 4
  store i32 %v1_14260, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14260 = icmp eq i32 %v1_14260, 0
  store i1 %v2_14260, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14260, label %dec_label_pc_141a4, label %dec_label_pc_14268

dec_label_pc_14268:                               ; preds = %dec_label_pc_1419c, %dec_label_pc_14260
  %v0_142b019 = phi i32 [ %v2_14188, %dec_label_pc_1419c ], [ %v0_142b020, %dec_label_pc_14260 ]
  %v0_1435c = phi i32 [ %v2_1418c, %dec_label_pc_1419c ], [ %v2_14258, %dec_label_pc_14260 ]
  %v0_14268 = phi i32 [ %v2_14184, %dec_label_pc_1419c ], [ %v0_14260, %dec_label_pc_14260 ]
  %v0_14270 = phi i32 [ %v1_1419c, %dec_label_pc_1419c ], [ %v1_14260, %dec_label_pc_14260 ]
  %v1_14268 = and i32 %v0_14268, -4
  store i32 %v1_14268, i32* %r1.global-to-local, align 4
  %v1_1426c = inttoptr i32 %v1_14268 to i32*
  %v2_1426c = load i32, i32* %v1_1426c, align 4
  store i32 %v2_1426c, i32* @r3, align 4
  %v7_14270 = icmp ult i32 %v0_14270, 2
  %v2_14354 = add i32 %v0_1435c, -12
  %v4_14354 = sub i32 11, %v0_1435c
  %v5_14354 = and i32 %v4_14354, %v0_1435c
  %v6_14354 = icmp slt i32 %v5_14354, 0
  store i1 %v6_14354, i1* %cpsr_v.global-to-local, align 1
  %v7_14354 = icmp slt i32 %v2_14354, 0
  store i1 %v7_14354, i1* %cpsr_n.global-to-local, align 1
  %v8_14354 = icmp eq i32 %v0_1435c, 12
  store i1 %v8_14354, i1* %cpsr_z.global-to-local, align 1
  %v5_14358 = icmp slt i32 %v0_1435c, 12
  br i1 %v7_14270, label %dec_label_pc_14354, label %dec_label_pc_14278

dec_label_pc_14278:                               ; preds = %dec_label_pc_14268
  %v8_14270 = icmp eq i32 %v0_14270, 2
  br i1 %v8_14270, label %dec_label_pc_142e8, label %dec_label_pc_1427c

dec_label_pc_1427c:                               ; preds = %dec_label_pc_14278
  br i1 %v5_14358, label %dec_label_pc_142c8, label %dec_label_pc_14284

dec_label_pc_14284:                               ; preds = %dec_label_pc_1427c
  store i32 %v2_14354, i32* %r2.global-to-local, align 4
  %v3_14288 = load i32, i32* @r4, align 4
  store i32 %v3_14288, i32* %stack_var_-12, align 4
  %v6_14288 = load i32, i32* @r5, align 4
  %v8_14288 = inttoptr i32 %v6_14288 to i8*
  store i8* %v8_14288, i8** %stack_var_-8, align 4
  %v11_14288 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1428c

dec_label_pc_1428c:                               ; preds = %dec_label_pc_1428c.dec_label_pc_1428c_crit_edge, %dec_label_pc_14284
  %v0_142b0 = phi i32 [ %v1_142b0, %dec_label_pc_1428c.dec_label_pc_1428c_crit_edge ], [ %v0_142b019, %dec_label_pc_14284 ]
  %v0_14290 = phi i32 [ %v0_14290.pre, %dec_label_pc_1428c.dec_label_pc_1428c_crit_edge ], [ %v1_14268, %dec_label_pc_14284 ]
  %v0_1428c = phi i32 [ %v0_1428c.pre, %dec_label_pc_1428c.dec_label_pc_1428c_crit_edge ], [ %v2_1426c, %dec_label_pc_14284 ]
  %v3_1428c = mul i32 %v0_1428c, 256
  store i32 %v3_1428c, i32* %lr.global-to-local, align 4
  %v1_14290 = add i32 %v0_14290, -4
  %v2_14290 = inttoptr i32 %v1_14290 to i32*
  %v3_14290 = load i32, i32* %v2_14290, align 4
  store i32 %v3_14290, i32* @r3, align 4
  %v4_14290 = add i32 %v0_14290, -8
  %v5_14290 = inttoptr i32 %v4_14290 to i32*
  %v6_14290 = load i32, i32* %v5_14290, align 4
  store i32 %v6_14290, i32* %r4.global-to-local, align 4
  %v7_14290 = add i32 %v0_14290, -12
  %v8_14290 = inttoptr i32 %v7_14290 to i32*
  %v9_14290 = load i32, i32* %v8_14290, align 4
  store i32 %v9_14290, i32* %r5.global-to-local, align 4
  %v10_14290 = add i32 %v0_14290, -16
  %v11_14290 = inttoptr i32 %v10_14290 to i32*
  %v12_14290 = load i32, i32* %v11_14290, align 4
  store i32 %v10_14290, i32* %r1.global-to-local, align 4
  %v4_14294 = udiv i32 %v12_14290, 16777216
  %v5_14294 = or i32 %v4_14294, %v3_1428c
  store i32 %v5_14294, i32* %lr.global-to-local, align 4
  %v3_14298 = mul i32 %v12_14290, 256
  %v4_1429c = udiv i32 %v9_14290, 16777216
  %v5_1429c = or i32 %v3_14298, %v4_1429c
  store i32 %v5_1429c, i32* @ip, align 4
  %v3_142a0 = mul i32 %v9_14290, 256
  %v4_142a4 = udiv i32 %v6_14290, 16777216
  %v5_142a4 = or i32 %v3_142a0, %v4_142a4
  store i32 %v5_142a4, i32* %r5.global-to-local, align 4
  %v3_142a8 = mul i32 %v6_14290, 256
  %v4_142ac = udiv i32 %v3_14290, 16777216
  %v5_142ac = or i32 %v3_142a8, %v4_142ac
  store i32 %v5_142ac, i32* %r4.global-to-local, align 4
  %v1_142b0 = add i32 %v0_142b0, -16
  %v2_142b0 = inttoptr i32 %v1_142b0 to i32*
  store i32 %v5_142ac, i32* %v2_142b0, align 4
  %v4_142b0 = add i32 %v0_142b0, -12
  %v5_142b0 = inttoptr i32 %v4_142b0 to i32*
  %v6_142b0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_142b0, i32* %v5_142b0, align 4
  %v7_142b0 = add i32 %v0_142b0, -8
  %v8_142b0 = inttoptr i32 %v7_142b0 to i32*
  %v9_142b0 = load i32, i32* @ip, align 4
  store i32 %v9_142b0, i32* %v8_142b0, align 4
  %v10_142b0 = add i32 %v0_142b0, -4
  %v11_142b0 = inttoptr i32 %v10_142b0 to i32*
  %v12_142b0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_142b0, i32* %v11_142b0, align 4
  store i32 %v1_142b0, i32* %r0.global-to-local, align 4
  %v0_142b4 = load i32, i32* %r2.global-to-local, align 4
  %v2_142b4 = add i32 %v0_142b4, -16
  store i32 %v2_142b4, i32* %r2.global-to-local, align 4
  %v6_142b8 = icmp slt i32 %v0_142b4, 16
  br i1 %v6_142b8, label %dec_label_pc_142bc, label %dec_label_pc_1428c.dec_label_pc_1428c_crit_edge

dec_label_pc_1428c.dec_label_pc_1428c_crit_edge:  ; preds = %dec_label_pc_1428c
  %v0_1428c.pre = load i32, i32* @r3, align 4
  %v0_14290.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1428c

dec_label_pc_142bc:                               ; preds = %dec_label_pc_1428c
  %v2_142bc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_142bc, i32* @r4, align 4
  %v5_142bc = load i8*, i8** %stack_var_-8, align 4
  %v6_142bc = ptrtoint i8* %v5_142bc to i32
  store i32 %v6_142bc, i32* @r5, align 4
  store i32 %v11_14288, i32* @lr, align 4
  %v2_142c0 = add i32 %v0_142b4, -4
  store i32 %v2_142c0, i32* %r2.global-to-local, align 4
  %v4_142c0 = add i32 %v0_142b4, 2147483632
  %v5_142c0 = and i32 %v2_142c0, %v4_142c0
  %v6_142c0 = icmp slt i32 %v5_142c0, 0
  store i1 %v6_142c0, i1* %cpsr_v.global-to-local, align 1
  %v7_142c0 = icmp slt i32 %v2_142c0, 0
  store i1 %v7_142c0, i1* %cpsr_n.global-to-local, align 1
  %v8_142c0 = icmp eq i32 %v2_142c0, 0
  store i1 %v8_142c0, i1* %cpsr_z.global-to-local, align 1
  %v5_142c4 = icmp slt i32 %v2_142b4, -12
  br i1 %v5_142c4, label %dec_label_pc_142e0, label %dec_label_pc_142c8

dec_label_pc_142c8:                               ; preds = %dec_label_pc_1427c, %dec_label_pc_142bc, %dec_label_pc_142c8
  %v1_142d4 = phi i32 [ %v5_142d4, %dec_label_pc_142c8 ], [ %v0_142b019, %dec_label_pc_1427c ], [ %v1_142b0, %dec_label_pc_142bc ]
  %v0_142c8 = load i32, i32* @r3, align 4
  %v3_142c8 = mul i32 %v0_142c8, 256
  store i32 %v3_142c8, i32* %ip.global-to-local, align 4
  %v0_142cc = load i32, i32* %r1.global-to-local, align 4
  %v1_142cc = add i32 %v0_142cc, -4
  %v2_142cc = inttoptr i32 %v1_142cc to i32*
  %v3_142cc = load i32, i32* %v2_142cc, align 4
  store i32 %v3_142cc, i32* @r3, align 4
  store i32 %v1_142cc, i32* %r1.global-to-local, align 4
  %v4_142d0 = udiv i32 %v3_142cc, 16777216
  %v5_142d0 = or i32 %v4_142d0, %v3_142c8
  store i32 %v5_142d0, i32* @ip, align 4
  %v2_142d4 = add i32 %v1_142d4, -4
  %v3_142d4 = inttoptr i32 %v2_142d4 to i32*
  store i32 %v5_142d0, i32* %v3_142d4, align 4
  %v4_142d4 = load i32, i32* %r0.global-to-local, align 4
  %v5_142d4 = add i32 %v4_142d4, -4
  store i32 %v5_142d4, i32* %r0.global-to-local, align 4
  %v0_142d8 = load i32, i32* %r2.global-to-local, align 4
  %v2_142d8 = add i32 %v0_142d8, -4
  store i32 %v2_142d8, i32* %r2.global-to-local, align 4
  %v6_142dc = icmp slt i32 %v0_142d8, 4
  br i1 %v6_142dc, label %dec_label_pc_142e0.loopexit, label %dec_label_pc_142c8

dec_label_pc_142e0.loopexit:                      ; preds = %dec_label_pc_142c8
  %v4_142d8 = sub i32 3, %v0_142d8
  %v5_142d8 = and i32 %v4_142d8, %v0_142d8
  %v6_142d8 = icmp slt i32 %v5_142d8, 0
  %v7_142d8 = icmp slt i32 %v2_142d8, 0
  store i1 %v6_142d8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_142d8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_142e0

dec_label_pc_142e0:                               ; preds = %dec_label_pc_142e0.loopexit, %dec_label_pc_142bc
  %v2_1422451 = phi i32 [ %v5_142d4, %dec_label_pc_142e0.loopexit ], [ %v1_142b0, %dec_label_pc_142bc ]
  %v0_1421447 = phi i32 [ %v2_142d8, %dec_label_pc_142e0.loopexit ], [ %v2_142c0, %dec_label_pc_142bc ]
  %v0_142e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_142e0 = add i32 %v0_142e0, 3
  store i32 %v1_142e0, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_142e8:                               ; preds = %dec_label_pc_14278
  br i1 %v5_14358, label %dec_label_pc_14334, label %dec_label_pc_142f0

dec_label_pc_142f0:                               ; preds = %dec_label_pc_142e8
  store i32 %v2_14354, i32* %r2.global-to-local, align 4
  %v3_142f4 = load i32, i32* @r4, align 4
  store i32 %v3_142f4, i32* %stack_var_-12, align 4
  %v6_142f4 = load i32, i32* @r5, align 4
  %v8_142f4 = inttoptr i32 %v6_142f4 to i8*
  store i8* %v8_142f4, i8** %stack_var_-8, align 4
  %v11_142f4 = load i32, i32* @lr, align 4
  br label %dec_label_pc_142f8

dec_label_pc_142f8:                               ; preds = %dec_label_pc_142f8.dec_label_pc_142f8_crit_edge, %dec_label_pc_142f0
  %v0_1431c = phi i32 [ %v1_1431c, %dec_label_pc_142f8.dec_label_pc_142f8_crit_edge ], [ %v0_142b019, %dec_label_pc_142f0 ]
  %v0_142fc = phi i32 [ %v0_142fc.pre, %dec_label_pc_142f8.dec_label_pc_142f8_crit_edge ], [ %v1_14268, %dec_label_pc_142f0 ]
  %v0_142f8 = phi i32 [ %v0_142f8.pre, %dec_label_pc_142f8.dec_label_pc_142f8_crit_edge ], [ %v2_1426c, %dec_label_pc_142f0 ]
  %v3_142f8 = mul i32 %v0_142f8, 65536
  store i32 %v3_142f8, i32* %lr.global-to-local, align 4
  %v1_142fc = add i32 %v0_142fc, -4
  %v2_142fc = inttoptr i32 %v1_142fc to i32*
  %v3_142fc = load i32, i32* %v2_142fc, align 4
  store i32 %v3_142fc, i32* @r3, align 4
  %v4_142fc = add i32 %v0_142fc, -8
  %v5_142fc = inttoptr i32 %v4_142fc to i32*
  %v6_142fc = load i32, i32* %v5_142fc, align 4
  store i32 %v6_142fc, i32* %r4.global-to-local, align 4
  %v7_142fc = add i32 %v0_142fc, -12
  %v8_142fc = inttoptr i32 %v7_142fc to i32*
  %v9_142fc = load i32, i32* %v8_142fc, align 4
  store i32 %v9_142fc, i32* %r5.global-to-local, align 4
  %v10_142fc = add i32 %v0_142fc, -16
  %v11_142fc = inttoptr i32 %v10_142fc to i32*
  %v12_142fc = load i32, i32* %v11_142fc, align 4
  store i32 %v10_142fc, i32* %r1.global-to-local, align 4
  %v4_14300 = udiv i32 %v12_142fc, 65536
  %v5_14300 = or i32 %v4_14300, %v3_142f8
  store i32 %v5_14300, i32* %lr.global-to-local, align 4
  %v3_14304 = mul i32 %v12_142fc, 65536
  %v4_14308 = udiv i32 %v9_142fc, 65536
  %v5_14308 = or i32 %v3_14304, %v4_14308
  store i32 %v5_14308, i32* @ip, align 4
  %v3_1430c = mul i32 %v9_142fc, 65536
  %v4_14310 = udiv i32 %v6_142fc, 65536
  %v5_14310 = or i32 %v3_1430c, %v4_14310
  store i32 %v5_14310, i32* %r5.global-to-local, align 4
  %v3_14314 = mul i32 %v6_142fc, 65536
  %v4_14318 = udiv i32 %v3_142fc, 65536
  %v5_14318 = or i32 %v3_14314, %v4_14318
  store i32 %v5_14318, i32* %r4.global-to-local, align 4
  %v1_1431c = add i32 %v0_1431c, -16
  %v2_1431c = inttoptr i32 %v1_1431c to i32*
  store i32 %v5_14318, i32* %v2_1431c, align 4
  %v4_1431c = add i32 %v0_1431c, -12
  %v5_1431c = inttoptr i32 %v4_1431c to i32*
  %v6_1431c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_1431c, i32* %v5_1431c, align 4
  %v7_1431c = add i32 %v0_1431c, -8
  %v8_1431c = inttoptr i32 %v7_1431c to i32*
  %v9_1431c = load i32, i32* @ip, align 4
  store i32 %v9_1431c, i32* %v8_1431c, align 4
  %v10_1431c = add i32 %v0_1431c, -4
  %v11_1431c = inttoptr i32 %v10_1431c to i32*
  %v12_1431c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1431c, i32* %v11_1431c, align 4
  store i32 %v1_1431c, i32* %r0.global-to-local, align 4
  %v0_14320 = load i32, i32* %r2.global-to-local, align 4
  %v2_14320 = add i32 %v0_14320, -16
  store i32 %v2_14320, i32* %r2.global-to-local, align 4
  %v6_14324 = icmp slt i32 %v0_14320, 16
  br i1 %v6_14324, label %dec_label_pc_14328, label %dec_label_pc_142f8.dec_label_pc_142f8_crit_edge

dec_label_pc_142f8.dec_label_pc_142f8_crit_edge:  ; preds = %dec_label_pc_142f8
  %v0_142f8.pre = load i32, i32* @r3, align 4
  %v0_142fc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_142f8

dec_label_pc_14328:                               ; preds = %dec_label_pc_142f8
  %v2_14328 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14328, i32* @r4, align 4
  %v5_14328 = load i8*, i8** %stack_var_-8, align 4
  %v6_14328 = ptrtoint i8* %v5_14328 to i32
  store i32 %v6_14328, i32* @r5, align 4
  store i32 %v11_142f4, i32* @lr, align 4
  %v2_1432c = add i32 %v0_14320, -4
  store i32 %v2_1432c, i32* %r2.global-to-local, align 4
  %v4_1432c = add i32 %v0_14320, 2147483632
  %v5_1432c = and i32 %v2_1432c, %v4_1432c
  %v6_1432c = icmp slt i32 %v5_1432c, 0
  store i1 %v6_1432c, i1* %cpsr_v.global-to-local, align 1
  %v7_1432c = icmp slt i32 %v2_1432c, 0
  store i1 %v7_1432c, i1* %cpsr_n.global-to-local, align 1
  %v8_1432c = icmp eq i32 %v2_1432c, 0
  store i1 %v8_1432c, i1* %cpsr_z.global-to-local, align 1
  %v5_14330 = icmp slt i32 %v2_14320, -12
  br i1 %v5_14330, label %dec_label_pc_1434c, label %dec_label_pc_14334

dec_label_pc_14334:                               ; preds = %dec_label_pc_14328, %dec_label_pc_142e8, %dec_label_pc_14334
  %v1_14340 = phi i32 [ %v5_14340, %dec_label_pc_14334 ], [ %v1_1431c, %dec_label_pc_14328 ], [ %v0_142b019, %dec_label_pc_142e8 ]
  %v0_14334 = load i32, i32* @r3, align 4
  %v3_14334 = mul i32 %v0_14334, 65536
  store i32 %v3_14334, i32* %ip.global-to-local, align 4
  %v0_14338 = load i32, i32* %r1.global-to-local, align 4
  %v1_14338 = add i32 %v0_14338, -4
  %v2_14338 = inttoptr i32 %v1_14338 to i32*
  %v3_14338 = load i32, i32* %v2_14338, align 4
  store i32 %v3_14338, i32* @r3, align 4
  store i32 %v1_14338, i32* %r1.global-to-local, align 4
  %v4_1433c = udiv i32 %v3_14338, 65536
  %v5_1433c = or i32 %v4_1433c, %v3_14334
  store i32 %v5_1433c, i32* @ip, align 4
  %v2_14340 = add i32 %v1_14340, -4
  %v3_14340 = inttoptr i32 %v2_14340 to i32*
  store i32 %v5_1433c, i32* %v3_14340, align 4
  %v4_14340 = load i32, i32* %r0.global-to-local, align 4
  %v5_14340 = add i32 %v4_14340, -4
  store i32 %v5_14340, i32* %r0.global-to-local, align 4
  %v0_14344 = load i32, i32* %r2.global-to-local, align 4
  %v2_14344 = add i32 %v0_14344, -4
  store i32 %v2_14344, i32* %r2.global-to-local, align 4
  %v6_14348 = icmp slt i32 %v0_14344, 4
  br i1 %v6_14348, label %dec_label_pc_1434c.loopexit, label %dec_label_pc_14334

dec_label_pc_1434c.loopexit:                      ; preds = %dec_label_pc_14334
  %v4_14344 = sub i32 3, %v0_14344
  %v5_14344 = and i32 %v4_14344, %v0_14344
  %v6_14344 = icmp slt i32 %v5_14344, 0
  %v7_14344 = icmp slt i32 %v2_14344, 0
  store i1 %v6_14344, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14344, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1434c

dec_label_pc_1434c:                               ; preds = %dec_label_pc_1434c.loopexit, %dec_label_pc_14328
  %v2_1422452 = phi i32 [ %v5_14340, %dec_label_pc_1434c.loopexit ], [ %v1_1431c, %dec_label_pc_14328 ]
  %v0_1421448 = phi i32 [ %v2_14344, %dec_label_pc_1434c.loopexit ], [ %v2_1432c, %dec_label_pc_14328 ]
  %v0_1434c = load i32, i32* %r1.global-to-local, align 4
  %v1_1434c = add i32 %v0_1434c, 2
  store i32 %v1_1434c, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_14354:                               ; preds = %dec_label_pc_14268
  br i1 %v5_14358, label %dec_label_pc_143a0, label %dec_label_pc_1435c

dec_label_pc_1435c:                               ; preds = %dec_label_pc_14354
  store i32 %v2_14354, i32* %r2.global-to-local, align 4
  %v3_14360 = load i32, i32* @r4, align 4
  store i32 %v3_14360, i32* %stack_var_-12, align 4
  %v6_14360 = load i32, i32* @r5, align 4
  %v8_14360 = inttoptr i32 %v6_14360 to i8*
  store i8* %v8_14360, i8** %stack_var_-8, align 4
  %v11_14360 = load i32, i32* @lr, align 4
  br label %dec_label_pc_14364

dec_label_pc_14364:                               ; preds = %dec_label_pc_14364.dec_label_pc_14364_crit_edge, %dec_label_pc_1435c
  %v0_14388 = phi i32 [ %v1_14388, %dec_label_pc_14364.dec_label_pc_14364_crit_edge ], [ %v0_142b019, %dec_label_pc_1435c ]
  %v0_14368 = phi i32 [ %v0_14368.pre, %dec_label_pc_14364.dec_label_pc_14364_crit_edge ], [ %v1_14268, %dec_label_pc_1435c ]
  %v0_14364 = phi i32 [ %v0_14364.pre, %dec_label_pc_14364.dec_label_pc_14364_crit_edge ], [ %v2_1426c, %dec_label_pc_1435c ]
  %v3_14364 = mul i32 %v0_14364, 16777216
  store i32 %v3_14364, i32* %lr.global-to-local, align 4
  %v1_14368 = add i32 %v0_14368, -4
  %v2_14368 = inttoptr i32 %v1_14368 to i32*
  %v3_14368 = load i32, i32* %v2_14368, align 4
  store i32 %v3_14368, i32* @r3, align 4
  %v4_14368 = add i32 %v0_14368, -8
  %v5_14368 = inttoptr i32 %v4_14368 to i32*
  %v6_14368 = load i32, i32* %v5_14368, align 4
  store i32 %v6_14368, i32* %r4.global-to-local, align 4
  %v7_14368 = add i32 %v0_14368, -12
  %v8_14368 = inttoptr i32 %v7_14368 to i32*
  %v9_14368 = load i32, i32* %v8_14368, align 4
  store i32 %v9_14368, i32* %r5.global-to-local, align 4
  %v10_14368 = add i32 %v0_14368, -16
  %v11_14368 = inttoptr i32 %v10_14368 to i32*
  %v12_14368 = load i32, i32* %v11_14368, align 4
  store i32 %v10_14368, i32* %r1.global-to-local, align 4
  %v4_1436c = udiv i32 %v12_14368, 256
  %v5_1436c = or i32 %v4_1436c, %v3_14364
  store i32 %v5_1436c, i32* %lr.global-to-local, align 4
  %v3_14370 = mul i32 %v12_14368, 16777216
  %v4_14374 = udiv i32 %v9_14368, 256
  %v5_14374 = or i32 %v3_14370, %v4_14374
  store i32 %v5_14374, i32* @ip, align 4
  %v3_14378 = mul i32 %v9_14368, 16777216
  %v4_1437c = udiv i32 %v6_14368, 256
  %v5_1437c = or i32 %v3_14378, %v4_1437c
  store i32 %v5_1437c, i32* %r5.global-to-local, align 4
  %v3_14380 = mul i32 %v6_14368, 16777216
  %v4_14384 = udiv i32 %v3_14368, 256
  %v5_14384 = or i32 %v3_14380, %v4_14384
  store i32 %v5_14384, i32* %r4.global-to-local, align 4
  %v1_14388 = add i32 %v0_14388, -16
  %v2_14388 = inttoptr i32 %v1_14388 to i32*
  store i32 %v5_14384, i32* %v2_14388, align 4
  %v4_14388 = add i32 %v0_14388, -12
  %v5_14388 = inttoptr i32 %v4_14388 to i32*
  %v6_14388 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14388, i32* %v5_14388, align 4
  %v7_14388 = add i32 %v0_14388, -8
  %v8_14388 = inttoptr i32 %v7_14388 to i32*
  %v9_14388 = load i32, i32* @ip, align 4
  store i32 %v9_14388, i32* %v8_14388, align 4
  %v10_14388 = add i32 %v0_14388, -4
  %v11_14388 = inttoptr i32 %v10_14388 to i32*
  %v12_14388 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14388, i32* %v11_14388, align 4
  store i32 %v1_14388, i32* %r0.global-to-local, align 4
  %v0_1438c = load i32, i32* %r2.global-to-local, align 4
  %v2_1438c = add i32 %v0_1438c, -16
  store i32 %v2_1438c, i32* %r2.global-to-local, align 4
  %v6_14390 = icmp slt i32 %v0_1438c, 16
  br i1 %v6_14390, label %dec_label_pc_14394, label %dec_label_pc_14364.dec_label_pc_14364_crit_edge

dec_label_pc_14364.dec_label_pc_14364_crit_edge:  ; preds = %dec_label_pc_14364
  %v0_14364.pre = load i32, i32* @r3, align 4
  %v0_14368.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14364

dec_label_pc_14394:                               ; preds = %dec_label_pc_14364
  %v2_14394 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14394, i32* @r4, align 4
  %v5_14394 = load i8*, i8** %stack_var_-8, align 4
  %v6_14394 = ptrtoint i8* %v5_14394 to i32
  store i32 %v6_14394, i32* @r5, align 4
  store i32 %v11_14360, i32* @lr, align 4
  %v2_14398 = add i32 %v0_1438c, -4
  store i32 %v2_14398, i32* %r2.global-to-local, align 4
  %v4_14398 = add i32 %v0_1438c, 2147483632
  %v5_14398 = and i32 %v2_14398, %v4_14398
  %v6_14398 = icmp slt i32 %v5_14398, 0
  store i1 %v6_14398, i1* %cpsr_v.global-to-local, align 1
  %v7_14398 = icmp slt i32 %v2_14398, 0
  store i1 %v7_14398, i1* %cpsr_n.global-to-local, align 1
  %v8_14398 = icmp eq i32 %v2_14398, 0
  store i1 %v8_14398, i1* %cpsr_z.global-to-local, align 1
  %v5_1439c = icmp slt i32 %v2_1438c, -12
  br i1 %v5_1439c, label %dec_label_pc_143b8, label %dec_label_pc_143a0

dec_label_pc_143a0:                               ; preds = %dec_label_pc_14394, %dec_label_pc_14354, %dec_label_pc_143a0
  %v1_143ac = phi i32 [ %v5_143ac, %dec_label_pc_143a0 ], [ %v1_14388, %dec_label_pc_14394 ], [ %v0_142b019, %dec_label_pc_14354 ]
  %v0_143a0 = load i32, i32* @r3, align 4
  %v3_143a0 = mul i32 %v0_143a0, 16777216
  store i32 %v3_143a0, i32* %ip.global-to-local, align 4
  %v0_143a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_143a4 = add i32 %v0_143a4, -4
  %v2_143a4 = inttoptr i32 %v1_143a4 to i32*
  %v3_143a4 = load i32, i32* %v2_143a4, align 4
  store i32 %v3_143a4, i32* @r3, align 4
  store i32 %v1_143a4, i32* %r1.global-to-local, align 4
  %v4_143a8 = udiv i32 %v3_143a4, 256
  %v5_143a8 = or i32 %v4_143a8, %v3_143a0
  store i32 %v5_143a8, i32* @ip, align 4
  %v2_143ac = add i32 %v1_143ac, -4
  %v3_143ac = inttoptr i32 %v2_143ac to i32*
  store i32 %v5_143a8, i32* %v3_143ac, align 4
  %v4_143ac = load i32, i32* %r0.global-to-local, align 4
  %v5_143ac = add i32 %v4_143ac, -4
  store i32 %v5_143ac, i32* %r0.global-to-local, align 4
  %v0_143b0 = load i32, i32* %r2.global-to-local, align 4
  %v2_143b0 = add i32 %v0_143b0, -4
  store i32 %v2_143b0, i32* %r2.global-to-local, align 4
  %v6_143b4 = icmp slt i32 %v0_143b0, 4
  br i1 %v6_143b4, label %dec_label_pc_143b8.loopexit, label %dec_label_pc_143a0

dec_label_pc_143b8.loopexit:                      ; preds = %dec_label_pc_143a0
  %v4_143b0 = sub i32 3, %v0_143b0
  %v5_143b0 = and i32 %v4_143b0, %v0_143b0
  %v6_143b0 = icmp slt i32 %v5_143b0, 0
  %v7_143b0 = icmp slt i32 %v2_143b0, 0
  store i1 %v6_143b0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_143b0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_143b8

dec_label_pc_143b8:                               ; preds = %dec_label_pc_143b8.loopexit, %dec_label_pc_14394
  %v2_1422453 = phi i32 [ %v5_143ac, %dec_label_pc_143b8.loopexit ], [ %v1_14388, %dec_label_pc_14394 ]
  %v0_1421449 = phi i32 [ %v2_143b0, %dec_label_pc_143b8.loopexit ], [ %v2_14398, %dec_label_pc_14394 ]
  %v0_143b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_143b8 = add i32 %v0_143b8, 1
  store i32 %v1_143b8, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_143ac, { 0, 2, 1 }
  uselistorder i32 %v3_143a0, { 1, 0 }
  uselistorder i32 %v2_14398, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14388, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14368, { 1, 0 }
  uselistorder i32 %v3_14364, { 1, 0 }
  uselistorder i32 %v0_14368, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14388, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14340, { 0, 2, 1 }
  uselistorder i32 %v3_14334, { 1, 0 }
  uselistorder i32 %v2_1432c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_1431c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_142fc, { 1, 0 }
  uselistorder i32 %v3_142f8, { 1, 0 }
  uselistorder i32 %v0_142fc, { 3, 2, 1, 0 }
  uselistorder i32 %v0_1431c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_142d4, { 0, 2, 1 }
  uselistorder i32 %v3_142c8, { 1, 0 }
  uselistorder i32 %v2_142c0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_142b0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14290, { 1, 0 }
  uselistorder i32 %v3_1428c, { 1, 0 }
  uselistorder i32 %v0_14290, { 3, 2, 1, 0 }
  uselistorder i32 %v0_142b0, { 3, 2, 1, 0 }
  uselistorder i1 %v5_14358, { 2, 0, 1 }
  uselistorder i32 %v0_14270, { 1, 0 }
  uselistorder i32 %v0_1435c, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_142b019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_14260, { 2, 1, 0 }
  uselistorder i32 %v0_14260, { 2, 0, 1 }
  uselistorder i32 %v2_14258, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_14258, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14258, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_142b020, { 2, 1, 0 }
  uselistorder i32 %v11_14234, { 1, 0 }
  uselistorder i32 %v7_14234, { 1, 0 }
  uselistorder i32 %v1_14214, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_14214, { 1, 2, 0, 3 }
  uselistorder i32 %v2_14218, { 1, 0 }
  uselistorder i32 %v7_1420c, { 0, 2, 1 }
  uselistorder i32 %v10_14208, { 1, 0 }
  uselistorder i32 %v9_14200, { 1, 0, 2 }
  uselistorder i32 %v6_141fc, { 1, 0 }
  uselistorder i32 %v2_141f4, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_141f4, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_14204, { 0, 3, 2, 1 }
  uselistorder i32 %v7_141e8, { 0, 2, 1 }
  uselistorder i32 %v13_141e4, { 1, 0 }
  uselistorder i32 %v4_141e0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_141e0, { 2, 0, 1 }
  uselistorder i32 %v6_141e8, { 0, 3, 2, 1 }
  uselistorder i32 %v7_141d8, { 0, 2, 1 }
  uselistorder i32 %v16_141d4, { 1, 0 }
  uselistorder i32 %v4_141d0, { 1, 2, 0 }
  uselistorder i32 %v0_141e0.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_141d8, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_141c4, { 0, 3, 2, 1 }
  uselistorder i32 %v10_141c0, { 1, 0 }
  uselistorder i32 %v1_141bc, { 1, 0 }
  uselistorder i32 %v10_141b8, { 1, 0 }
  uselistorder i32 %v0_141b8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_141bc, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_141b0, { 0, 2, 1 }
  uselistorder i32 %v2_141a4, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_141a4, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_141bc37, { 1, 2, 0 }
  uselistorder i32 %v1_1419c, { 2, 1, 0 }
  uselistorder i32 %v1_14194, { 2, 3, 1, 0 }
  uselistorder i32 %v2_1418c, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_14188, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_14184, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_14184, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_14174, { 0, 2, 1 }
  uselistorder i32 %v4_14170, { 1, 0 }
  uselistorder i32 %v3_14164, { 1, 0 }
  uselistorder i32 %v1_1415c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14150, { 1, 0 }
  uselistorder i32 %v12_1414c, { 0, 2, 1 }
  uselistorder i32 %v8_1412c, { 1, 0, 2 }
  uselistorder i32 %v5_1412c, { 1, 0, 2 }
  uselistorder i32 %v2_1412c, { 1, 0, 2 }
  uselistorder i32 %v0_1412c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1414c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_14108, { 0, 2, 1 }
  uselistorder i32 %v4_14104, { 1, 0 }
  uselistorder i32 %v3_140f8, { 1, 0 }
  uselistorder i32 %v1_140f0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_140e4, { 1, 0 }
  uselistorder i32 %v12_140e0, { 0, 2, 1 }
  uselistorder i32 %v8_140c0, { 1, 0, 2 }
  uselistorder i32 %v5_140c0, { 1, 0, 2 }
  uselistorder i32 %v2_140c0, { 1, 0, 2 }
  uselistorder i32 %v0_140c0, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_140e0, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_1409c, { 0, 2, 1 }
  uselistorder i32 %v4_14098, { 1, 0 }
  uselistorder i32 %v3_1408c, { 1, 0 }
  uselistorder i32 %v1_14084, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14078, { 1, 0 }
  uselistorder i32 %v12_14074, { 0, 2, 1 }
  uselistorder i32 %v8_14054, { 1, 0, 2 }
  uselistorder i32 %v5_14054, { 1, 0, 2 }
  uselistorder i32 %v2_14054, { 1, 0, 2 }
  uselistorder i32 %v0_14054, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14074, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_140b0, { 0, 2, 1 }
  uselistorder i32 %v1_140ac, { 2, 0, 1, 3 }
  uselistorder i32 %v4_14030, { 2, 0, 1, 3 }
  uselistorder i32 %v2_14030, { 2, 0, 1, 3 }
  uselistorder i32 %v0_140b4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1414c76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_14024, { 1, 0 }
  uselistorder i32 %v0_14024, { 3, 1, 0, 2 }
  uselistorder i32 %v2_1401c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_1401c, { 1, 0, 2 }
  uselistorder i32 %v0_1401c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_1414c77, { 1, 0 }
  uselistorder i32 %v1_13ffc, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_14004, { 1, 0 }
  uselistorder i32 %v0_13fd8, { 3, 0, 1, 2 }
  uselistorder i32 %v1_13fcc, { 1, 2, 0, 3 }
  uselistorder i32 %v5_13fb8, { 1, 0, 2 }
  uselistorder i32 %v1_13fb4, { 1, 0 }
  uselistorder i32 %v1_13fac, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_13fac, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13fa4, { 0, 2, 1 }
  uselistorder i32 %v3_13fa4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_13fa4, { 1, 0 }
  uselistorder i1 %v1_13fa4, { 1, 0 }
  uselistorder i32 %v3_13fa0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_13f98, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_13f84, { 1, 2, 0 }
  uselistorder i32 %v1_13f7c, { 0, 2, 1 }
  uselistorder i32 %v12_13f78, { 0, 1, 3, 2 }
  uselistorder i32 %v0_13f6c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_13f70, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_13f60, { 0, 2, 1 }
  uselistorder i32 %v1_13f58, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_13f58, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_13f50, { 1, 0 }
  uselistorder i32 %v1_13f48, { 2, 1, 0 }
  uselistorder i32 %v2_13f40, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_13f40, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_13f3c, { 1, 0 }
  uselistorder i32 %v2_13f30, { 1, 0 }
  uselistorder i32 %v1_13f30, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_13f30, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 15, 16, 17, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 25, 26, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r2.global-to-local, { 0, 26, 1, 2, 3, 4, 5, 27, 6, 67, 68, 69, 70, 71, 72, 7, 8, 9, 10, 28, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 29, 30, 62, 31, 32, 33, 34, 35, 63, 36, 37, 38, 39, 40, 64, 41, 42, 43, 44, 45, 65, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 9, 2, 4, 6, 61, 5, 60, 59, 62, 67, 63, 65, 64, 7, 8, 10, 15, 11, 12, 13, 14, 16, 17, 19, 18, 20, 21, 66, 22, 23, 30, 24, 31, 25, 32, 26, 27, 28, 29, 33, 36, 34, 46, 35, 37, 40, 38, 47, 39, 41, 44, 42, 48, 43, 45, 49, 50, 53, 51, 54, 52, 55, 56, 57, 58 }
  uselistorder i32* %r0.global-to-local, { 0, 20, 1, 2, 30, 31, 34, 33, 3, 4, 5, 6, 7, 8, 21, 9, 11, 10, 12, 13, 32, 14, 15, 22, 16, 17, 18, 19, 23, 24, 26, 25, 27, 28, 29 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 35, 36, 37, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 24, 18, 19, 20, 25, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 47, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 2, 25, 0, 26, 1, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 44, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 2, 23, 0, 24, 1, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 50, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 3, 21, 22, 23, 24, 25, 2, 26, 0, 27, 1, 29, 28, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -3, { 0, 4, 5, 3, 1, 2 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 15, { 10, 11, 12, 0, 22, 1, 23, 13, 14, 3, 15, 4, 5, 16, 6, 17, 7, 18, 8, 19, 9, 20, 2, 21 }
  uselistorder i32 -2, { 2, 3, 1, 5, 6, 7, 0, 4, 21, 20, 22, 23, 24, 13, 14, 15, 16, 17, 18, 19, 8, 9, 10, 11, 12 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 26, 2, 4, 5, 3, 6, 7, 8, 9, 31, 36, 34, 35, 33, 27, 28, 17, 18, 29, 30, 32, 21, 22, 23, 11, 24, 25, 12, 13, 10, 14, 15, 16, 19, 20, 0, 1 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 11, { 10, 11, 12, 27, 29, 0, 16, 2, 13, 3, 14, 4, 15, 17, 18, 19, 5, 20, 6, 21, 7, 22, 23, 8, 24, 9, 25, 1, 26, 28 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 3, 5, 4, 23 }
  uselistorder i32 -16, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
  uselistorder i32 31, { 1, 2, 3, 0 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 27, { 1, 0, 2, 3 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder label %dec_label_pc_143a0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14334, { 2, 0, 1 }
  uselistorder label %dec_label_pc_142c8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14268, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_141f4, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_141b8, { 1, 0 }
  uselistorder label %dec_label_pc_141a4, { 1, 0 }
  uselistorder label %dec_label_pc_14164, { 2, 0, 1 }
  uselistorder label %dec_label_pc_140f8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1408c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1402c, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_13ffc, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_13f98, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_13f58, { 1, 0 }
}

define i32 @function_143c0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_143c0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v0_143c4 = load i32, i32* @r2, align 4
  %v8_143c4 = icmp eq i32 %v0_143c4, 8
  store i1 %v8_143c4, i1* %cpsr_z.global-to-local, align 1
  %v5_143c8 = icmp slt i32 %v0_143c4, 8
  br i1 %v5_143c8, label %dec_label_pc_14428, label %dec_label_pc_143cc

dec_label_pc_143cc:                               ; preds = %dec_label_pc_143c0
  %v4_143cc = mul i32 %arg2, 256
  %v5_143cc = or i32 %v4_143cc, %arg2
  %v4_143d0 = mul i32 %v5_143cc, 65536
  %v5_143d0 = or i32 %v4_143d0, %v5_143cc
  store i32 %v5_143d0, i32* %r1.global-to-local, align 4
  %v1_143d457 = urem i32 %tmp, 4
  %v2_143d458 = icmp eq i32 %v1_143d457, 0
  store i1 %v2_143d458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_143d458, label %dec_label_pc_143e4, label %bb

bb:                                               ; preds = %dec_label_pc_143cc, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_143cc ]
  %v3_143d859 = phi i32 [ %v6_143d8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_143cc ]
  %v4_143d8 = inttoptr i32 %v3_143d859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_143d8, align 1
  %v5_143d8 = load i32, i32* @r3, align 4
  %v6_143d8 = add i32 %v5_143d8, 1
  store i32 %v6_143d8, i32* @r3, align 4
  %v0_143dc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_143e8.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_143dc.pr, label %dec_label_pc_143e4, label %.thread

.thread:                                          ; preds = %bb
  %v2_143dc = add i32 %v0_143e8.pr.pre, -1
  store i32 %v2_143dc, i32* @r2, align 4
  %v1_143d4 = urem i32 %v6_143d8, 4
  %v2_143d4 = icmp eq i32 %v1_143d4, 0
  store i1 %v2_143d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_143d4, label %dec_label_pc_143e4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_143d8.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_143d8.pre to i8
  br label %bb

dec_label_pc_143e4:                               ; preds = %.thread, %bb, %dec_label_pc_143cc
  %v0_143f028 = phi i32 [ %tmp, %dec_label_pc_143cc ], [ %v6_143d8, %bb ], [ %v6_143d8, %.thread ]
  %v0_143e8.pr = phi i32 [ %v0_143c4, %dec_label_pc_143cc ], [ %v0_143e8.pr.pre, %bb ], [ %v2_143dc, %.thread ]
  %v0_143e4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_143e4, i32* @ip, align 4
  %v8_143e810 = icmp eq i32 %v0_143e8.pr, 8
  store i1 %v8_143e810, i1* %cpsr_z.global-to-local, align 1
  %v5_143ec11 = icmp slt i32 %v0_143e8.pr, 8
  br i1 %v5_143ec11, label %dec_label_pc_14428, label %dec_label_pc_143f0.preheader

dec_label_pc_143f0.preheader:                     ; preds = %dec_label_pc_143e4
  %v1_143f046 = inttoptr i32 %v0_143f028 to i32*
  store i32 %v0_143e4, i32* %v1_143f046, align 4
  %v3_143f047 = add i32 %v0_143f028, 4
  %v4_143f048 = inttoptr i32 %v3_143f047 to i32*
  %v5_143f049 = load i32, i32* @ip, align 4
  store i32 %v5_143f049, i32* %v4_143f048, align 4
  %v6_143f050 = add i32 %v0_143f028, 8
  store i32 %v6_143f050, i32* @r3, align 4
  %v0_143f451 = load i32, i32* @r2, align 4
  %v1_143f452 = add i32 %v0_143f451, -8
  store i32 %v1_143f452, i32* %r2.global-to-local, align 4
  %v5_143fc53 = icmp slt i32 %v1_143f452, 8
  br i1 %v5_143fc53, label %dec_label_pc_143f0.dec_label_pc_14428.loopexit_crit_edge, label %dec_label_pc_14400

dec_label_pc_14400:                               ; preds = %dec_label_pc_143f0.preheader, %dec_label_pc_143e8.dec_label_pc_143f0_crit_edge
  %v6_143f055 = phi i32 [ %v6_143f0, %dec_label_pc_143e8.dec_label_pc_143f0_crit_edge ], [ %v6_143f050, %dec_label_pc_143f0.preheader ]
  %v0_143f054 = phi i32 [ %v12_1441c, %dec_label_pc_143e8.dec_label_pc_143f0_crit_edge ], [ %v0_143f028, %dec_label_pc_143f0.preheader ]
  %v1_14400 = inttoptr i32 %v6_143f055 to i32*
  %v2_14400 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_14400, i32* %v1_14400, align 4
  %v3_14400 = add i32 %v0_143f054, 12
  %v4_14400 = inttoptr i32 %v3_14400 to i32*
  %v5_14400 = load i32, i32* @ip, align 4
  store i32 %v5_14400, i32* %v4_14400, align 4
  %v6_14400 = add i32 %v0_143f054, 16
  store i32 %v6_14400, i32* @r3, align 4
  %v0_14404 = load i32, i32* %r2.global-to-local, align 4
  %v1_14404 = add i32 %v0_14404, -8
  store i32 %v1_14404, i32* %r2.global-to-local, align 4
  %v5_1440c = icmp slt i32 %v1_14404, 8
  br i1 %v5_1440c, label %dec_label_pc_14400.dec_label_pc_14428.loopexit_crit_edge, label %dec_label_pc_14410

dec_label_pc_14410:                               ; preds = %dec_label_pc_14400
  %v1_14410 = inttoptr i32 %v6_14400 to i32*
  %v2_14410 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_14410, i32* %v1_14410, align 4
  %v3_14410 = add i32 %v0_143f054, 20
  %v4_14410 = inttoptr i32 %v3_14410 to i32*
  %v5_14410 = load i32, i32* @ip, align 4
  store i32 %v5_14410, i32* %v4_14410, align 4
  %v6_14410 = add i32 %v0_143f054, 24
  store i32 %v6_14410, i32* @r3, align 4
  %v0_14414 = load i32, i32* %r2.global-to-local, align 4
  %v1_14414 = add i32 %v0_14414, -8
  store i32 %v1_14414, i32* %r2.global-to-local, align 4
  %v5_1441c = icmp slt i32 %v1_14414, 8
  br i1 %v5_1441c, label %dec_label_pc_14410.dec_label_pc_14428.loopexit_crit_edge, label %dec_label_pc_143e8

dec_label_pc_143e8:                               ; preds = %dec_label_pc_14410
  %v7_1441c = inttoptr i32 %v6_14410 to i32*
  %v8_1441c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_1441c, i32* %v7_1441c, align 4
  %v9_1441c = add i32 %v0_143f054, 28
  %v10_1441c = inttoptr i32 %v9_1441c to i32*
  %v11_1441c = load i32, i32* @ip, align 4
  store i32 %v11_1441c, i32* %v10_1441c, align 4
  %v12_1441c = add i32 %v0_143f054, 32
  store i32 %v12_1441c, i32* @r3, align 4
  %v6_14420 = load i32, i32* %r2.global-to-local, align 4
  %v7_14420 = add i32 %v6_14420, -8
  store i32 %v7_14420, i32* %r2.global-to-local, align 4
  %v5_143ec = icmp slt i32 %v7_14420, 8
  br i1 %v5_143ec, label %dec_label_pc_143e8.dec_label_pc_14428.loopexit_crit_edge, label %dec_label_pc_143e8.dec_label_pc_143f0_crit_edge

dec_label_pc_143e8.dec_label_pc_143f0_crit_edge:  ; preds = %dec_label_pc_143e8
  %v2_143f0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_143f0 = inttoptr i32 %v12_1441c to i32*
  store i32 %v2_143f0.pre, i32* %v1_143f0, align 4
  %v3_143f0 = add i32 %v0_143f054, 36
  %v4_143f0 = inttoptr i32 %v3_143f0 to i32*
  %v5_143f0 = load i32, i32* @ip, align 4
  store i32 %v5_143f0, i32* %v4_143f0, align 4
  %v6_143f0 = add i32 %v0_143f054, 40
  store i32 %v6_143f0, i32* @r3, align 4
  %v0_143f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_143f4 = add i32 %v0_143f4, -8
  store i32 %v1_143f4, i32* %r2.global-to-local, align 4
  %v5_143fc = icmp slt i32 %v1_143f4, 8
  br i1 %v5_143fc, label %dec_label_pc_143f0.dec_label_pc_14428.loopexit_crit_edge, label %dec_label_pc_14400

dec_label_pc_143e8.dec_label_pc_14428.loopexit_crit_edge: ; preds = %dec_label_pc_143e8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14428

dec_label_pc_143f0.dec_label_pc_14428.loopexit_crit_edge: ; preds = %dec_label_pc_143e8.dec_label_pc_143f0_crit_edge, %dec_label_pc_143f0.preheader
  %v1_143f4.lcssa = phi i32 [ %v1_143f452, %dec_label_pc_143f0.preheader ], [ %v1_143f4, %dec_label_pc_143e8.dec_label_pc_143f0_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14428

dec_label_pc_14400.dec_label_pc_14428.loopexit_crit_edge: ; preds = %dec_label_pc_14400
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14428

dec_label_pc_14410.dec_label_pc_14428.loopexit_crit_edge: ; preds = %dec_label_pc_14410
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14428

dec_label_pc_14428:                               ; preds = %dec_label_pc_143e4, %dec_label_pc_143e8.dec_label_pc_14428.loopexit_crit_edge, %dec_label_pc_143f0.dec_label_pc_14428.loopexit_crit_edge, %dec_label_pc_14400.dec_label_pc_14428.loopexit_crit_edge, %dec_label_pc_14410.dec_label_pc_14428.loopexit_crit_edge, %dec_label_pc_143c0
  %v0_14430 = phi i32 [ %v0_143c4, %dec_label_pc_143c0 ], [ %v1_14414, %dec_label_pc_14410.dec_label_pc_14428.loopexit_crit_edge ], [ %v1_14404, %dec_label_pc_14400.dec_label_pc_14428.loopexit_crit_edge ], [ %v1_143f4.lcssa, %dec_label_pc_143f0.dec_label_pc_14428.loopexit_crit_edge ], [ %v7_14420, %dec_label_pc_143e8.dec_label_pc_14428.loopexit_crit_edge ], [ %v0_143e8.pr, %dec_label_pc_143e4 ]
  %v2_14428 = icmp eq i32 %v0_14430, 0
  store i1 %v2_14428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14428, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_14428
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_14428
  %v1_14430 = sub i32 7, %v0_14430
  store i32 %v1_14430, i32* %r2.global-to-local, align 4
  %v3_14434 = mul i32 %v1_14430, 4
  %v4_14434 = add i32 %v3_14434, ptrtoint (i32* @global_var_1443c.799 to i32)
  call void @__pseudo_branch(i32 %v4_14434)
  %v0_1443c = load i32, i32* %r1.global-to-local, align 4
  %v1_1443c = trunc i32 %v0_1443c to i8
  %v2_1443c = load i32, i32* @r3, align 4
  %v3_1443c = inttoptr i32 %v2_1443c to i8*
  store i8 %v1_1443c, i8* %v3_1443c, align 1
  %v4_1443c = load i32, i32* @r3, align 4
  %v5_1443c = add i32 %v4_1443c, 1
  store i32 %v5_1443c, i32* %r3.global-to-local, align 4
  %v0_14440 = load i32, i32* %r1.global-to-local, align 4
  %v1_14440 = trunc i32 %v0_14440 to i8
  %v3_14440 = inttoptr i32 %v5_1443c to i8*
  store i8 %v1_14440, i8* %v3_14440, align 1
  %v4_14440 = load i32, i32* %r3.global-to-local, align 4
  %v5_14440 = add i32 %v4_14440, 1
  store i32 %v5_14440, i32* %r3.global-to-local, align 4
  %v0_14444 = load i32, i32* %r1.global-to-local, align 4
  %v1_14444 = trunc i32 %v0_14444 to i8
  %v3_14444 = inttoptr i32 %v5_14440 to i8*
  store i8 %v1_14444, i8* %v3_14444, align 1
  %v4_14444 = load i32, i32* %r3.global-to-local, align 4
  %v5_14444 = add i32 %v4_14444, 1
  store i32 %v5_14444, i32* %r3.global-to-local, align 4
  %v0_14448 = load i32, i32* %r1.global-to-local, align 4
  %v1_14448 = trunc i32 %v0_14448 to i8
  %v3_14448 = inttoptr i32 %v5_14444 to i8*
  store i8 %v1_14448, i8* %v3_14448, align 1
  %v4_14448 = load i32, i32* %r3.global-to-local, align 4
  %v5_14448 = add i32 %v4_14448, 1
  store i32 %v5_14448, i32* %r3.global-to-local, align 4
  %v0_1444c = load i32, i32* %r1.global-to-local, align 4
  %v1_1444c = trunc i32 %v0_1444c to i8
  %v3_1444c = inttoptr i32 %v5_14448 to i8*
  store i8 %v1_1444c, i8* %v3_1444c, align 1
  %v4_1444c = load i32, i32* %r3.global-to-local, align 4
  %v5_1444c = add i32 %v4_1444c, 1
  store i32 %v5_1444c, i32* %r3.global-to-local, align 4
  %v0_14450 = load i32, i32* %r1.global-to-local, align 4
  %v1_14450 = trunc i32 %v0_14450 to i8
  %v3_14450 = inttoptr i32 %v5_1444c to i8*
  store i8 %v1_14450, i8* %v3_14450, align 1
  %v4_14450 = load i32, i32* %r3.global-to-local, align 4
  %v5_14450 = add i32 %v4_14450, 1
  store i32 %v5_14450, i32* %r3.global-to-local, align 4
  %v0_14454 = load i32, i32* %r1.global-to-local, align 4
  %v1_14454 = trunc i32 %v0_14454 to i8
  %v3_14454 = inttoptr i32 %v5_14450 to i8*
  store i8 %v1_14454, i8* %v3_14454, align 1
  %v4_14454 = load i32, i32* %r3.global-to-local, align 4
  %v5_14454 = add i32 %v4_14454, 1
  store i32 %v5_14454, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_143f0, { 1, 0 }
  uselistorder i32 %v12_1441c, { 1, 2, 0 }
  uselistorder i32 %v0_143f054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_143e8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_143d8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_143cc, { 1, 0 }
  uselistorder i32 %v0_143c4, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 1, 10, 11, 12, 13, 9, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 1, 4, 0, 8, 7, 5, 9 }
  uselistorder i32 40, { 1, 2, 6, 4, 3, 7, 8, 5, 9, 10, 11, 12, 13, 14, 16, 15, 0 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_14428, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_14400, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_14460(i32 %arg1) local_unnamed_addr {
dec_label_pc_14460:
  %v1_14460 = and i32 %arg1, -4
  %v1_14464 = inttoptr i32 %v1_14460 to i32*
  %v2_14464 = load i32, i32* %v1_14464, align 4
  %v1_14468 = urem i32 %arg1, 4
  %v2_14468 = icmp eq i32 %v1_14468, 0
  %v1_1446c = sub nsw i32 0, %v1_14468
  br i1 %v2_14468, label %.preheader.preheader, label %dec_label_pc_14474

dec_label_pc_14474:                               ; preds = %dec_label_pc_14460
  %v1_14474 = or i32 %v2_14464, 255
  %v7_14478 = icmp eq i32 %v1_14468, 1
  br i1 %v7_14478, label %bb33, label %bb

bb:                                               ; preds = %dec_label_pc_14474
  %v9_1447c = or i32 %v2_14464, 65535
  br label %bb33

bb33:                                             ; preds = %dec_label_pc_14474, %bb
  %v8_14484 = phi i32 [ %v1_14474, %dec_label_pc_14474 ], [ %v9_1447c, %bb ]
  %v7_14484 = icmp eq i32 %v1_14468, 3
  br i1 %v7_14484, label %bb34, label %.preheader.preheader

bb34:                                             ; preds = %bb33
  %v9_14484 = or i32 %v8_14484, 16711680
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %bb33, %bb34, %dec_label_pc_14460
  %v1_14494.ph = phi i32 [ %v2_14464, %dec_label_pc_14460 ], [ %v9_14484, %bb34 ], [ %v8_14484, %bb33 ]
  %v1_1448838 = urem i32 %v1_14494.ph, 256
  %v2_1448839 = icmp eq i32 %v1_1448838, 0
  %v2_1448c40 = and i32 %v1_14494.ph, 65280
  %v3_1448c41 = icmp eq i32 %v2_1448c40, 0
  %or.cond42 = or i1 %v2_1448839, %v3_1448c41
  %v2_1449043 = and i32 %v1_14494.ph, 16711680
  %v3_1449044 = icmp eq i32 %v2_1449043, 0
  %or.cond3145 = or i1 %v3_1449044, %or.cond42
  %v4_1449446 = icmp ult i32 %v1_14494.ph, 16777216
  %or.cond3247 = or i1 %v4_1449446, %or.cond3145
  br i1 %or.cond3247, label %dec_label_pc_144a4, label %.thread4

.thread4:                                         ; preds = %.preheader.preheader, %.thread4
  %v1_144981349 = phi i32 [ %v2_1449814, %.thread4 ], [ %v1_1446c, %.preheader.preheader ]
  %v1_1449c48.in = phi i32 [ %v1_1449c48, %.thread4 ], [ %v1_14460, %.preheader.preheader ]
  %v1_1449c48 = add i32 %v1_1449c48.in, 4
  %v2_1449814 = add i32 %v1_144981349, 4
  %v2_1449c = inttoptr i32 %v1_1449c48 to i32*
  %v3_1449c = load i32, i32* %v2_1449c, align 4
  %v1_14488 = urem i32 %v3_1449c, 256
  %v2_14488 = icmp eq i32 %v1_14488, 0
  %v2_1448c = and i32 %v3_1449c, 65280
  %v3_1448c = icmp eq i32 %v2_1448c, 0
  %or.cond = or i1 %v2_14488, %v3_1448c
  %v2_14490 = and i32 %v3_1449c, 16711680
  %v3_14490 = icmp eq i32 %v2_14490, 0
  %or.cond31 = or i1 %v3_14490, %or.cond
  %v4_14494 = icmp ult i32 %v3_1449c, 16777216
  %or.cond32 = or i1 %v4_14494, %or.cond31
  br i1 %or.cond32, label %dec_label_pc_144a4, label %.thread4

dec_label_pc_144a4:                               ; preds = %.thread4, %.preheader.preheader
  %v1_1449813.lcssa = phi i32 [ %v1_1446c, %.preheader.preheader ], [ %v2_1449814, %.thread4 ]
  %v2_14488.lcssa = phi i1 [ %v2_1448839, %.preheader.preheader ], [ %v2_14488, %.thread4 ]
  %v3_1448c.lcssa = phi i1 [ %v3_1448c41, %.preheader.preheader ], [ %v3_1448c, %.thread4 ]
  %v3_14490.lcssa = phi i1 [ %v3_1449044, %.preheader.preheader ], [ %v3_14490, %.thread4 ]
  br i1 %v2_14488.lcssa, label %.thread10, label %bb35

bb35:                                             ; preds = %dec_label_pc_144a4
  %v2_144a8 = add i32 %v1_1449813.lcssa, 1
  br i1 %v3_1448c.lcssa, label %.thread10, label %bb36

bb36:                                             ; preds = %bb35
  %v2_144b017 = add i32 %v1_1449813.lcssa, 2
  br i1 %v3_14490.lcssa, label %.thread10, label %bb37

bb37:                                             ; preds = %bb36
  %v2_144b8 = add i32 %v1_1449813.lcssa, 3
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_144a4, %bb35, %bb36, %bb37
  %v1_144bc = phi i32 [ %v2_144a8, %bb35 ], [ %v2_144b017, %bb36 ], [ %v2_144b8, %bb37 ], [ %v1_1449813.lcssa, %dec_label_pc_144a4 ]
  ret i32 %v1_144bc

; uselistorder directives
  uselistorder i32 %v1_1449813.lcssa, { 1, 3, 2, 0 }
  uselistorder i32 %v3_1449c, { 3, 2, 1, 0 }
  uselistorder i32 %v1_14494.ph, { 1, 2, 3, 0 }
  uselistorder i32 %v1_14468, { 3, 2, 1, 0 }
  uselistorder i32 16711680, { 2, 0, 4, 1, 5, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 17 }
  uselistorder i32 65535, { 2, 91, 0, 1, 13, 12, 3, 4, 43, 44, 23, 45, 22, 46, 15, 14, 5, 25, 47, 24, 48, 50, 16, 49, 6, 51, 52, 27, 53, 26, 54, 55, 56, 57, 28, 58, 59, 17, 60, 7, 31, 61, 62, 63, 30, 64, 29, 65, 67, 18, 66, 8, 68, 69, 35, 70, 32, 71, 33, 72, 34, 73, 19, 74, 75, 36, 76, 37, 77, 80, 81, 20, 78, 79, 9, 40, 82, 38, 83, 39, 84, 86, 21, 85, 10, 11, 87, 88, 42, 89, 41, 90 }
  uselistorder i32 -4, { 37, 17, 61, 62, 63, 6, 18, 19, 20, 64, 65, 66, 7, 21, 22, 23, 67, 68, 69, 8, 24, 25, 70, 16, 15, 71, 72, 73, 14, 13, 12, 11, 26, 27, 28, 29, 30, 5, 31, 3, 32, 4, 74, 10, 33, 48, 49, 50, 9, 51, 52, 53, 34, 47, 2, 35, 41, 42, 43, 44, 45, 46, 0, 1, 54, 55, 56, 57, 58, 59, 60, 36, 38, 39, 40 }
  uselistorder label %.thread10, { 3, 2, 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0, 2 }
  uselistorder label %bb33, { 1, 0 }
}

define i32 @function_144c0(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_144c4.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_144c0

dec_label_pc_144c0:                               ; preds = %bb3, %bb
  %v0_144c4 = phi i32 [ %v0_144c4.pre, %bb ], [ %v5_144c4, %bb3 ]
  %v0_144c0 = phi i32 [ %tmp, %bb ], [ %v5_144c0, %bb3 ]
  %v1_144c0 = inttoptr i32 %v0_144c0 to i8*
  %v2_144c0 = load i8, i8* %v1_144c0, align 1
  %v1_144c4 = inttoptr i32 %v0_144c4 to i8*
  %v2_144c4 = load i8, i8* %v1_144c4, align 1
  %v3_144c4 = zext i8 %v2_144c4 to i32
  %v2_144c8 = icmp eq i8 %v2_144c0, 0
  br i1 %v2_144c8, label %.dec_label_pc_144d4_crit_edge, label %bb3

bb3:                                              ; preds = %dec_label_pc_144c0
  %v5_144c4 = add i32 %v0_144c4, 1
  %v5_144c0 = add i32 %v0_144c0, 1
  %v3_144c0 = zext i8 %v2_144c0 to i32
  %v10_144cc = icmp eq i8 %v2_144c0, %v2_144c4
  br i1 %v10_144cc, label %dec_label_pc_144c0, label %dec_label_pc_144d4

.dec_label_pc_144d4_crit_edge:                    ; preds = %dec_label_pc_144c0
  br label %dec_label_pc_144d4

dec_label_pc_144d4:                               ; preds = %bb3, %.dec_label_pc_144d4_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_144d4_crit_edge ], [ %v3_144c0, %bb3 ]
  %v2_144d4.pre-phi = sub nsw i32 %.pn, %v3_144c4
  ret i32 %v2_144d4.pre-phi

; uselistorder directives
  uselistorder i8 %v2_144c0, { 0, 2, 1 }
  uselistorder i32 %v0_144c0, { 1, 0 }
  uselistorder i32 %v0_144c4, { 1, 0 }
  uselistorder label %dec_label_pc_144d4, { 1, 0 }
}

define i32 @function_144e0() local_unnamed_addr {
dec_label_pc_144e0:
  %stack_var_-16 = alloca i32, align 4
  %v3_144e0 = load i32, i32* @r4, align 4
  store i32 %v3_144e0, i32* %stack_var_-16, align 4
  %v6_144e0 = load i32, i32* @r5, align 4
  %v9_144e0 = load i32, i32* @r6, align 4
  %v0_144e4 = load i32, i32* @r0, align 4
  %v0_144e8 = load i32, i32* @r1, align 4
  store i32 %v0_144e8, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_145048 = inttoptr i32 %v0_144e4 to i8*
  %v2_145049 = load i8, i8* %v1_145048, align 1
  %v2_1450811 = icmp eq i8 %v2_145049, 0
  store i32 %v0_144e8, i32* @r0, align 4
  %v1_1451012 = add i32 %v0_144e4, 1
  store i32 %v1_1451012, i32* @r4, align 4
  br i1 %v2_1450811, label %dec_label_pc_14518, label %dec_label_pc_144f4

dec_label_pc_144f4:                               ; preds = %dec_label_pc_144e0, %dec_label_pc_14500
  %v3_1450414.in = phi i8 [ %v2_14504, %dec_label_pc_14500 ], [ %v2_145049, %dec_label_pc_144e0 ]
  %v0_1450c13 = phi i32 [ %v0_1450c.pre, %dec_label_pc_14500 ], [ %v0_144e8, %dec_label_pc_144e0 ]
  %v3_1450414 = zext i8 %v3_1450414.in to i32
  %v2_144f4 = call i32 @function_146ac(i32 %v0_1450c13, i32 %v3_1450414)
  %v2_144f8 = icmp eq i32 %v2_144f4, 0
  %v0_14500 = load i32, i32* @r5, align 4
  br i1 %v2_144f8, label %dec_label_pc_14500, label %dec_label_pc_14518

dec_label_pc_14500:                               ; preds = %dec_label_pc_144f4
  %v1_14500 = add i32 %v0_14500, 1
  %v0_14504.pre = load i32, i32* @r4, align 4
  %v0_1450c.pre = load i32, i32* @r6, align 4
  store i32 %v1_14500, i32* @r5, align 4
  %v1_14504 = inttoptr i32 %v0_14504.pre to i8*
  %v2_14504 = load i8, i8* %v1_14504, align 1
  %v2_14508 = icmp eq i8 %v2_14504, 0
  store i32 %v0_1450c.pre, i32* @r0, align 4
  %v1_14510 = add i32 %v0_14504.pre, 1
  store i32 %v1_14510, i32* @r4, align 4
  br i1 %v2_14508, label %dec_label_pc_14518, label %dec_label_pc_144f4

dec_label_pc_14518:                               ; preds = %dec_label_pc_14500, %dec_label_pc_144f4, %dec_label_pc_144e0
  %v0_14518 = phi i32 [ 0, %dec_label_pc_144e0 ], [ %v0_14500, %dec_label_pc_144f4 ], [ %v1_14500, %dec_label_pc_14500 ]
  %v2_1451c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1451c, i32* @r4, align 4
  store i32 %v6_144e0, i32* @r5, align 4
  store i32 %v9_144e0, i32* @r6, align 4
  ret i32 %v0_14518

; uselistorder directives
  uselistorder i8 %v2_14504, { 1, 0 }
  uselistorder i32 %v0_1450c.pre, { 1, 0 }
  uselistorder i32 %v0_14504.pre, { 1, 0 }
  uselistorder label %dec_label_pc_144f4, { 1, 0 }
}

define i32 @function_14524(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14524:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_145542 = load i32, i32* @r0, align 4
  %v1_145543 = inttoptr i32 %v0_145542 to i8*
  %v2_145544 = load i8, i8* %v1_145543, align 1
  %v3_145545 = zext i8 %v2_145544 to i32
  store i32 %v3_145545, i32* @ip, align 4
  %v2_145586 = icmp eq i8 %v2_145544, 0
  br i1 %v2_145586, label %dec_label_pc_14564, label %dec_label_pc_14538.preheader

dec_label_pc_14530:                               ; preds = %dec_label_pc_14538
  %v3_14538 = zext i8 %v2_14538 to i32
  %v1_14540 = add i32 %v0_14540, 1
  %v9_14530 = icmp eq i32 %v0_1453010, %v3_14538
  br i1 %v9_14530, label %dec_label_pc_1454c, label %dec_label_pc_14538

dec_label_pc_14538:                               ; preds = %dec_label_pc_14538.preheader, %dec_label_pc_14530
  %v0_14540 = phi i32 [ %tmp, %dec_label_pc_14538.preheader ], [ %v1_14540, %dec_label_pc_14530 ]
  %v1_14538 = inttoptr i32 %v0_14540 to i8*
  %v2_14538 = load i8, i8* %v1_14538, align 1
  %v2_1453c = icmp eq i8 %v2_14538, 0
  br i1 %v2_1453c, label %dec_label_pc_14564, label %dec_label_pc_14530

dec_label_pc_1454c:                               ; preds = %dec_label_pc_14530
  %v1_1454c = add i32 %v0_1454c, 1
  %v1_14550 = add i32 %v0_14550, 1
  %v1_14554 = inttoptr i32 %v1_14550 to i8*
  %v2_14554 = load i8, i8* %v1_14554, align 1
  %v3_14554 = zext i8 %v2_14554 to i32
  store i32 %v3_14554, i32* @ip, align 4
  %v2_14558 = icmp eq i8 %v2_14554, 0
  br i1 %v2_14558, label %dec_label_pc_14564, label %dec_label_pc_14538.preheader

dec_label_pc_14538.preheader:                     ; preds = %dec_label_pc_14524, %dec_label_pc_1454c
  %v0_14550 = phi i32 [ %v1_14550, %dec_label_pc_1454c ], [ %v0_145542, %dec_label_pc_14524 ]
  %v0_1454c = phi i32 [ %v1_1454c, %dec_label_pc_1454c ], [ 0, %dec_label_pc_14524 ]
  %v0_1453010 = phi i32 [ %v3_14554, %dec_label_pc_1454c ], [ %v3_145545, %dec_label_pc_14524 ]
  br label %dec_label_pc_14538

dec_label_pc_14564:                               ; preds = %dec_label_pc_1454c, %dec_label_pc_14538, %dec_label_pc_14524
  %v0_14564 = phi i32 [ 0, %dec_label_pc_14524 ], [ %v0_1454c, %dec_label_pc_14538 ], [ %v1_1454c, %dec_label_pc_1454c ]
  ret i32 %v0_14564

; uselistorder directives
  uselistorder i32 %v0_14540, { 1, 0 }
  uselistorder label %dec_label_pc_14538.preheader, { 1, 0 }
}

define i32 @function_14570(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14570:
  store i32 %arg1, i32* @r0, align 4
  %v1_14574 = urem i32 %arg2, 256
  store i32 %v1_14574, i32* @r4, align 4
  %v2_14574 = icmp eq i32 %v1_14574, 0
  br i1 %v2_14574, label %dec_label_pc_14588, label %dec_label_pc_1459c.preheader

dec_label_pc_1459c.preheader:                     ; preds = %dec_label_pc_14570
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_145a43 = call i32 @function_146ac(i32 %arg1, i32 %v1_14574)
  %v2_145a85 = icmp eq i32 %v2_145a43, 0
  br i1 %v2_145a85, label %dec_label_pc_145b0, label %dec_label_pc_14594

dec_label_pc_14588:                               ; preds = %dec_label_pc_14570
  %v2_1458c = call i32 @function_146ac(i32 %arg1, i32 0)
  br label %dec_label_pc_145b4

dec_label_pc_14594:                               ; preds = %dec_label_pc_1459c.preheader, %dec_label_pc_14594
  %v2_145a46 = phi i32 [ %v2_145a4, %dec_label_pc_14594 ], [ %v2_145a43, %dec_label_pc_1459c.preheader ]
  store i32 %v2_145a46, i32* @r5, align 4
  %v1_14598 = add i32 %v2_145a46, 1
  store i32 %v1_14598, i32* @r0, align 4
  %v0_145a0 = load i32, i32* @r4, align 4
  %v2_145a4 = call i32 @function_146ac(i32 %v1_14598, i32 %v0_145a0)
  %v2_145a8 = icmp eq i32 %v2_145a4, 0
  br i1 %v2_145a8, label %dec_label_pc_145b0, label %dec_label_pc_14594

dec_label_pc_145b0:                               ; preds = %dec_label_pc_14594, %dec_label_pc_1459c.preheader
  %v0_145b0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_145b4

dec_label_pc_145b4:                               ; preds = %dec_label_pc_14588, %dec_label_pc_145b0
  %storemerge = phi i32 [ %v2_1458c, %dec_label_pc_14588 ], [ %v0_145b0, %dec_label_pc_145b0 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_145a4, { 1, 0 }
  uselistorder i32 %v1_14598, { 1, 0 }
  uselistorder i32 %v1_14574, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_146ac, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_145b4, { 1, 0 }
  uselistorder label %dec_label_pc_14594, { 1, 0 }
}

define i32 @function_145c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_145c0:
  %v1_145c4 = urem i32 %arg1, 256
  %v0_145e42 = load i32, i32* @r0, align 4
  %v1_145e43 = urem i32 %v0_145e42, 4
  %v2_145e44 = icmp eq i32 %v1_145e43, 0
  br i1 %v2_145e44, label %dec_label_pc_145ec, label %dec_label_pc_145cc

dec_label_pc_145cc:                               ; preds = %dec_label_pc_145c0, %dec_label_pc_145e0
  %v0_145e0 = phi i32 [ %v1_145e0, %dec_label_pc_145e0 ], [ %v0_145e42, %dec_label_pc_145c0 ]
  %v1_145cc = inttoptr i32 %v0_145e0 to i8*
  %v2_145cc = load i8, i8* %v1_145cc, align 1
  %v3_145cc = zext i8 %v2_145cc to i32
  %v9_145d0 = icmp eq i32 %v3_145cc, %v1_145c4
  br i1 %v9_145d0, label %dec_label_pc_1469c, label %dec_label_pc_145d8

dec_label_pc_145d8:                               ; preds = %dec_label_pc_145cc
  %v2_145d8 = icmp eq i8 %v2_145cc, 0
  br i1 %v2_145d8, label %dec_label_pc_1469c, label %dec_label_pc_145e0

dec_label_pc_145e0:                               ; preds = %dec_label_pc_145d8
  %v1_145e0 = add i32 %v0_145e0, 1
  %v1_145e4 = urem i32 %v1_145e0, 4
  %v2_145e4 = icmp eq i32 %v1_145e4, 0
  br i1 %v2_145e4, label %dec_label_pc_145ec, label %dec_label_pc_145cc

dec_label_pc_145ec:                               ; preds = %dec_label_pc_145e0, %dec_label_pc_145c0
  %v0_145f0 = phi i32 [ %v0_145e42, %dec_label_pc_145c0 ], [ %v1_145e0, %dec_label_pc_145e0 ]
  %v4_145ec = mul nuw nsw i32 %v1_145c4, 256
  %v5_145ec = or i32 %v4_145ec, %v1_145c4
  %v4_145f4 = mul i32 %v5_145ec, 65536
  %v5_145f4 = or i32 %v4_145f4, %v5_145ec
  br label %dec_label_pc_145f8

dec_label_pc_145f8:                               ; preds = %dec_label_pc_14694, %dec_label_pc_14634, %dec_label_pc_145ec
  %v0_1465c = phi i32 [ %v0_145f0, %dec_label_pc_145ec ], [ %v4_145f8, %dec_label_pc_14634 ], [ %v4_145f8, %dec_label_pc_14694 ]
  %v1_145f8 = inttoptr i32 %v0_1465c to i32*
  %v2_145f8 = load i32, i32* %v1_145f8, align 4
  %v4_145f8 = add i32 %v0_1465c, 4
  %v2_14600 = xor i32 %v2_145f8, %v5_145f4
  %v2_14604 = add i32 %v2_14600, 2130640639
  store i32 %v2_14604, i32* @ip, align 4
  %v2_1460c = add i32 %v2_145f8, 2130640639
  %v1_14610 = sub i32 -1, %v2_145f8
  %v2_14614 = xor i32 %v2_1460c, %v1_14610
  %v2_14620 = and i32 %v2_14614, -2130640640
  %v2_14628 = icmp eq i32 %v2_14620, 0
  br i1 %v2_14628, label %dec_label_pc_14634, label %dec_label_pc_1463c

dec_label_pc_14634:                               ; preds = %dec_label_pc_145f8
  %v1_1461c = sub i32 -1, %v2_14600
  %v2_14624 = xor i32 %v2_14604, %v1_1461c
  %v2_1462c = and i32 %v2_14624, -2130640640
  %v2_14634 = icmp eq i32 %v2_1462c, 0
  br i1 %v2_14634, label %dec_label_pc_145f8, label %dec_label_pc_1463c

dec_label_pc_1463c:                               ; preds = %dec_label_pc_145f8, %dec_label_pc_14634
  %v2_1463c = inttoptr i32 %v0_1465c to i8*
  %v3_1463c = load i8, i8* %v2_1463c, align 1
  %v4_1463c = zext i8 %v3_1463c to i32
  %v9_14640 = icmp eq i32 %v4_1463c, %v1_145c4
  br i1 %v9_14640, label %dec_label_pc_1469c, label %dec_label_pc_1464c

dec_label_pc_1464c:                               ; preds = %dec_label_pc_1463c
  %v2_1464c = icmp eq i8 %v3_1463c, 0
  br i1 %v2_1464c, label %dec_label_pc_1469c, label %dec_label_pc_14654

dec_label_pc_14654:                               ; preds = %dec_label_pc_1464c
  %v1_14654 = add i32 %v0_1465c, 1
  %v2_14654 = inttoptr i32 %v1_14654 to i8*
  %v3_14654 = load i8, i8* %v2_14654, align 1
  %v4_14654 = zext i8 %v3_14654 to i32
  %v9_14658 = icmp eq i32 %v4_14654, %v1_145c4
  br i1 %v9_14658, label %dec_label_pc_1469c, label %dec_label_pc_14664

dec_label_pc_14664:                               ; preds = %dec_label_pc_14654
  %v2_14664 = icmp eq i8 %v3_14654, 0
  br i1 %v2_14664, label %dec_label_pc_1469c, label %dec_label_pc_1466c

dec_label_pc_1466c:                               ; preds = %dec_label_pc_14664
  %v1_1466c = add i32 %v0_1465c, 2
  %v2_1466c = inttoptr i32 %v1_1466c to i8*
  %v3_1466c = load i8, i8* %v2_1466c, align 1
  %v4_1466c = zext i8 %v3_1466c to i32
  %v9_14670 = icmp eq i32 %v4_1466c, %v1_145c4
  br i1 %v9_14670, label %dec_label_pc_1469c, label %dec_label_pc_1467c

dec_label_pc_1467c:                               ; preds = %dec_label_pc_1466c
  %v2_1467c = icmp eq i8 %v3_1466c, 0
  br i1 %v2_1467c, label %dec_label_pc_1469c, label %dec_label_pc_14684

dec_label_pc_14684:                               ; preds = %dec_label_pc_1467c
  %v1_14684 = add i32 %v0_1465c, 3
  %v2_14684 = inttoptr i32 %v1_14684 to i8*
  %v3_14684 = load i8, i8* %v2_14684, align 1
  %v4_14684 = zext i8 %v3_14684 to i32
  %v9_14688 = icmp eq i32 %v4_14684, %v1_145c4
  br i1 %v9_14688, label %dec_label_pc_1469c, label %dec_label_pc_14694

dec_label_pc_14694:                               ; preds = %dec_label_pc_14684
  %v2_14694 = icmp eq i8 %v3_14684, 0
  br i1 %v2_14694, label %dec_label_pc_1469c, label %dec_label_pc_145f8

dec_label_pc_1469c:                               ; preds = %dec_label_pc_145d8, %dec_label_pc_145cc, %dec_label_pc_14694, %dec_label_pc_14684, %dec_label_pc_1467c, %dec_label_pc_1466c, %dec_label_pc_14664, %dec_label_pc_14654, %dec_label_pc_1464c, %dec_label_pc_1463c
  %v1_146a0 = phi i32 [ %v1_14684, %dec_label_pc_14694 ], [ %v1_14684, %dec_label_pc_14684 ], [ %v1_1466c, %dec_label_pc_1467c ], [ %v1_1466c, %dec_label_pc_1466c ], [ %v1_14654, %dec_label_pc_14664 ], [ %v1_14654, %dec_label_pc_14654 ], [ %v0_1465c, %dec_label_pc_1464c ], [ %v0_1465c, %dec_label_pc_1463c ], [ %v0_145e0, %dec_label_pc_145cc ], [ %v0_145e0, %dec_label_pc_145d8 ]
  ret i32 %v1_146a0

; uselistorder directives
  uselistorder i32 %v4_145f8, { 1, 0 }
  uselistorder i32 %v2_145f8, { 0, 2, 1 }
  uselistorder i32 %v0_1465c, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_145ec, { 1, 0 }
  uselistorder i32 %v1_145e0, { 1, 0, 2 }
  uselistorder i32 %v0_145e42, { 2, 1, 0 }
  uselistorder i32 %v1_145c4, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_1469c, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_1463c, { 1, 0 }
  uselistorder label %dec_label_pc_145cc, { 1, 0 }
}

define i32 @function_146ac(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_146ac:
  %v1_146b0 = urem i32 %arg1, 256
  %v0_146d03 = load i32, i32* @r0, align 4
  %v1_146d04 = urem i32 %v0_146d03, 4
  %v2_146d05 = icmp eq i32 %v1_146d04, 0
  br i1 %v2_146d05, label %dec_label_pc_146d8, label %dec_label_pc_146b8

dec_label_pc_146b8:                               ; preds = %dec_label_pc_146ac, %dec_label_pc_146cc
  %v0_146cc = phi i32 [ %v1_146cc, %dec_label_pc_146cc ], [ %v0_146d03, %dec_label_pc_146ac ]
  %v1_146b8 = inttoptr i32 %v0_146cc to i8*
  %v2_146b8 = load i8, i8* %v1_146b8, align 1
  %v3_146b8 = zext i8 %v2_146b8 to i32
  %v9_146bc = icmp eq i32 %v3_146b8, %v1_146b0
  br i1 %v9_146bc, label %dec_label_pc_1478c, label %dec_label_pc_146c4

dec_label_pc_146c4:                               ; preds = %dec_label_pc_146b8
  %v2_146c4 = icmp eq i8 %v2_146b8, 0
  br i1 %v2_146c4, label %dec_label_pc_14788, label %dec_label_pc_146cc

dec_label_pc_146cc:                               ; preds = %dec_label_pc_146c4
  %v1_146cc = add i32 %v0_146cc, 1
  %v1_146d0 = urem i32 %v1_146cc, 4
  %v2_146d0 = icmp eq i32 %v1_146d0, 0
  br i1 %v2_146d0, label %dec_label_pc_146d8, label %dec_label_pc_146b8

dec_label_pc_146d8:                               ; preds = %dec_label_pc_146cc, %dec_label_pc_146ac
  %v0_146dc = phi i32 [ %v0_146d03, %dec_label_pc_146ac ], [ %v1_146cc, %dec_label_pc_146cc ]
  %v4_146d8 = mul nuw nsw i32 %v1_146b0, 256
  %v5_146d8 = or i32 %v4_146d8, %v1_146b0
  %v4_146e0 = mul i32 %v5_146d8, 65536
  %v5_146e0 = or i32 %v4_146e0, %v5_146d8
  br label %dec_label_pc_146e4

dec_label_pc_146e4:                               ; preds = %dec_label_pc_14780, %dec_label_pc_14720, %dec_label_pc_146d8
  %v0_14748 = phi i32 [ %v0_146dc, %dec_label_pc_146d8 ], [ %v4_146e4, %dec_label_pc_14720 ], [ %v4_146e4, %dec_label_pc_14780 ]
  %v1_146e4 = inttoptr i32 %v0_14748 to i32*
  %v2_146e4 = load i32, i32* %v1_146e4, align 4
  %v4_146e4 = add i32 %v0_14748, 4
  %v2_146ec = xor i32 %v2_146e4, %v5_146e0
  %v2_146f0 = add i32 %v2_146ec, 2130640639
  store i32 %v2_146f0, i32* @ip, align 4
  %v2_146f8 = add i32 %v2_146e4, 2130640639
  %v1_146fc = sub i32 -1, %v2_146e4
  %v2_14700 = xor i32 %v2_146f8, %v1_146fc
  %v2_1470c = and i32 %v2_14700, -2130640640
  %v2_14714 = icmp eq i32 %v2_1470c, 0
  br i1 %v2_14714, label %dec_label_pc_14720, label %dec_label_pc_14728

dec_label_pc_14720:                               ; preds = %dec_label_pc_146e4
  %v1_14708 = sub i32 -1, %v2_146ec
  %v2_14710 = xor i32 %v2_146f0, %v1_14708
  %v2_14718 = and i32 %v2_14710, -2130640640
  %v2_14720 = icmp eq i32 %v2_14718, 0
  br i1 %v2_14720, label %dec_label_pc_146e4, label %dec_label_pc_14728

dec_label_pc_14728:                               ; preds = %dec_label_pc_146e4, %dec_label_pc_14720
  %v2_14728 = inttoptr i32 %v0_14748 to i8*
  %v3_14728 = load i8, i8* %v2_14728, align 1
  %v4_14728 = zext i8 %v3_14728 to i32
  %v9_1472c = icmp eq i32 %v4_14728, %v1_146b0
  br i1 %v9_1472c, label %dec_label_pc_1478c, label %dec_label_pc_14738

dec_label_pc_14738:                               ; preds = %dec_label_pc_14728
  %v2_14738 = icmp eq i8 %v3_14728, 0
  br i1 %v2_14738, label %dec_label_pc_14788, label %dec_label_pc_14740

dec_label_pc_14740:                               ; preds = %dec_label_pc_14738
  %v1_14740 = add i32 %v0_14748, 1
  %v2_14740 = inttoptr i32 %v1_14740 to i8*
  %v3_14740 = load i8, i8* %v2_14740, align 1
  %v4_14740 = zext i8 %v3_14740 to i32
  %v9_14744 = icmp eq i32 %v4_14740, %v1_146b0
  br i1 %v9_14744, label %dec_label_pc_1478c, label %dec_label_pc_14750

dec_label_pc_14750:                               ; preds = %dec_label_pc_14740
  %v2_14750 = icmp eq i8 %v3_14740, 0
  br i1 %v2_14750, label %dec_label_pc_14788, label %dec_label_pc_14758

dec_label_pc_14758:                               ; preds = %dec_label_pc_14750
  %v1_14758 = add i32 %v0_14748, 2
  %v2_14758 = inttoptr i32 %v1_14758 to i8*
  %v3_14758 = load i8, i8* %v2_14758, align 1
  %v4_14758 = zext i8 %v3_14758 to i32
  %v9_1475c = icmp eq i32 %v4_14758, %v1_146b0
  br i1 %v9_1475c, label %dec_label_pc_1478c, label %dec_label_pc_14768

dec_label_pc_14768:                               ; preds = %dec_label_pc_14758
  %v2_14768 = icmp eq i8 %v3_14758, 0
  br i1 %v2_14768, label %dec_label_pc_14788, label %dec_label_pc_14770

dec_label_pc_14770:                               ; preds = %dec_label_pc_14768
  %v1_14770 = add i32 %v0_14748, 3
  %v2_14770 = inttoptr i32 %v1_14770 to i8*
  %v3_14770 = load i8, i8* %v2_14770, align 1
  %v4_14770 = zext i8 %v3_14770 to i32
  %v9_14774 = icmp eq i32 %v4_14770, %v1_146b0
  br i1 %v9_14774, label %dec_label_pc_1478c, label %dec_label_pc_14780

dec_label_pc_14780:                               ; preds = %dec_label_pc_14770
  %v2_14780 = icmp eq i8 %v3_14770, 0
  br i1 %v2_14780, label %dec_label_pc_14788, label %dec_label_pc_146e4

dec_label_pc_14788:                               ; preds = %dec_label_pc_146c4, %dec_label_pc_14780, %dec_label_pc_14768, %dec_label_pc_14750, %dec_label_pc_14738
  br label %dec_label_pc_1478c

dec_label_pc_1478c:                               ; preds = %dec_label_pc_146b8, %dec_label_pc_14770, %dec_label_pc_14758, %dec_label_pc_14740, %dec_label_pc_14728, %dec_label_pc_14788
  %v1_14790 = phi i32 [ 0, %dec_label_pc_14788 ], [ %v1_14770, %dec_label_pc_14770 ], [ %v1_14758, %dec_label_pc_14758 ], [ %v1_14740, %dec_label_pc_14740 ], [ %v0_14748, %dec_label_pc_14728 ], [ %v0_146cc, %dec_label_pc_146b8 ]
  ret i32 %v1_14790

; uselistorder directives
  uselistorder i32 %v4_146e4, { 1, 0 }
  uselistorder i32 %v2_146e4, { 0, 2, 1 }
  uselistorder i32 %v0_14748, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_146d8, { 1, 0 }
  uselistorder i32 %v1_146cc, { 1, 0, 2 }
  uselistorder i32 %v0_146d03, { 2, 1, 0 }
  uselistorder i32 %v1_146b0, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 3, { 2, 3, 0, 4, 64, 65, 114, 66, 67, 68, 69, 70, 71, 73, 37, 74, 115, 6, 108, 26, 109, 25, 110, 111, 72, 38, 80, 27, 75, 76, 1, 77, 78, 79, 39, 19, 81, 40, 82, 41, 83, 42, 84, 43, 85, 44, 86, 45, 87, 28, 88, 46, 89, 47, 90, 48, 49, 50, 51, 52, 53, 21, 20, 54, 91, 55, 29, 92, 8, 7, 56, 30, 93, 10, 9, 57, 94, 31, 95, 96, 23, 22, 58, 97, 32, 98, 12, 11, 59, 99, 33, 100, 60, 101, 14, 13, 61, 102, 34, 103, 16, 15, 62, 104, 35, 105, 18, 17, 63, 112, 36, 113, 24, 106, 5, 107 }
  uselistorder i32 2130640639, { 0, 2, 1, 3 }
  uselistorder i32 65536, { 4, 5, 6, 8, 7, 13, 9, 14, 10, 15, 11, 16, 12, 17, 18, 19, 23, 20, 24, 21, 25, 22, 26, 144, 145, 143, 148, 27, 28, 29, 30, 31, 32, 33, 142, 34, 35, 36, 2, 37, 0, 3, 38, 39, 41, 40, 1, 44, 42, 43, 45, 51, 46, 52, 47, 53, 48, 49, 50, 56, 57, 58, 59, 54, 55, 141, 61, 60, 63, 62, 65, 66, 67, 64, 70, 68, 69, 72, 73, 74, 71, 75, 76, 78, 77, 80, 81, 79, 82, 146, 83, 86, 84, 87, 85, 89, 90, 91, 88, 92, 97, 93, 98, 94, 99, 95, 96, 101, 102, 103, 100, 104, 147, 105, 106, 107, 109, 108, 110, 118, 111, 119, 112, 120, 113, 121, 114, 122, 115, 116, 117, 124, 125, 126, 127, 123, 128, 133, 129, 134, 130, 131, 132, 136, 138, 139, 140, 135, 137 }
  uselistorder label %dec_label_pc_1478c, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_14788, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_14728, { 1, 0 }
  uselistorder label %dec_label_pc_146b8, { 1, 0 }
}

define i32 @function_1479c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1479c:
  %stack_var_-68 = alloca i32, align 4
  %v2_147a4 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_147a4, i32* @r1, align 4
  %v0_147a8 = call i32 @function_147c0()
  %v1_147ac = sub i32 1, %v0_147a8
  %v2_147ac = icmp ult i32 %v0_147a8, 2
  br i1 %v2_147ac, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_1479c
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_1479c, %bb
  %v1_147bc = phi i32 [ %v1_147ac, %dec_label_pc_1479c ], [ 0, %bb ]
  ret i32 %v1_147bc

; uselistorder directives
  uselistorder i32 %v0_147a8, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_147c0() local_unnamed_addr {
dec_label_pc_147c0:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_3()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_147c0 = load i32, i32* @r4, align 4
  %v6_147c0 = load i32, i32* @r5, align 4
  %v2_147c8 = ptrtoint i32* %stack_var_-52 to i32
  %v0_147cc = load i32, i32* @r1, align 4
  store i32 %v0_147cc, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_147d8 = load i32, i32* @r0, align 4
  %v3_147d8 = call i32 @function_ff7c(i32 %v0_147d8, i32 21505, i32 %v2_147c8)
  store i32 %v3_147d8, i32* %r0.global-to-local, align 4
  store i32 %v3_147d8, i32* @r5, align 4
  %v2_147dc = icmp eq i32 %v3_147d8, 0
  br i1 %v2_147dc, label %dec_label_pc_147e4, label %dec_label_pc_14828

dec_label_pc_147e4:                               ; preds = %dec_label_pc_147c0
  %v4_147f0 = zext i8 %tmp to i32
  store i32 %v4_147f0, i32* @ip, align 4
  %v3_147f4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_147f4, i32* @r3, align 4
  %v1_147f8 = load i32, i32* @r4, align 4
  %v2_147f8 = add i32 %v1_147f8, 4
  %v3_147f8 = inttoptr i32 %v2_147f8 to i32*
  %v0_147fc = load i32, i32* %r1.global-to-local, align 4
  %v1_147fc = load i32, i32* @r4, align 4
  %v2_147fc = add i32 %v1_147fc, 8
  %v3_147fc = inttoptr i32 %v2_147fc to i32*
  store i32 %v0_147fc, i32* %v3_147fc, align 4
  %v0_14800 = load i32, i32* %r0.global-to-local, align 4
  %v1_14800 = load i32, i32* @r4, align 4
  %v2_14800 = add i32 %v1_14800, 12
  %v3_14800 = inttoptr i32 %v2_14800 to i32*
  store i32 %v0_14800, i32* %v3_14800, align 4
  %v2_14804 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_14804, i32* @r1, align 4
  %v1_1480c = load i32, i32* @r4, align 4
  %v2_1480c = inttoptr i32 %v1_1480c to i32*
  store i32 %v3_147f4, i32* %v2_1480c, align 4
  %v0_14810 = load i32, i32* @ip, align 4
  %v1_14810 = trunc i32 %v0_14810 to i8
  %v2_14810 = load i32, i32* @r4, align 4
  %v3_14810 = add i32 %v2_14810, 16
  %v4_14810 = inttoptr i32 %v3_14810 to i8*
  store i8 %v1_14810, i8* %v4_14810, align 1
  %v0_14814 = load i32, i32* @r4, align 4
  %v1_14814 = add i32 %v0_14814, 17
  store i32 %v1_14814, i32* %r0.global-to-local, align 4
  %v4_14818 = call i32 @function_14f8c(i32 %v1_14814, i32 %v2_14804, i32 19, i32 %v3_147f4)
  store i32 %v4_14818, i32* %r0.global-to-local, align 4
  %v0_1481c = load i32, i32* @r5, align 4
  store i32 %v0_1481c, i32* %r1.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_14824 = inttoptr i32 %v4_14818 to i8*
  %v3_14824 = call i32 @function_143c0(i8* %v2_14824, i32 %v0_1481c)
  store i32 %v3_14824, i32* %r0.global-to-local, align 4
  %v0_14828.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14828

dec_label_pc_14828:                               ; preds = %dec_label_pc_147c0, %dec_label_pc_147e4
  %v0_14828 = phi i32 [ %v3_147d8, %dec_label_pc_147c0 ], [ %v0_14828.pre, %dec_label_pc_147e4 ]
  store i32 %v0_14828, i32* %r0.global-to-local, align 4
  store i32 %v3_147c0, i32* @r4, align 4
  store i32 %v6_147c0, i32* @r5, align 4
  ret i32 %v0_14828

; uselistorder directives
  uselistorder i32 %v0_14828, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 13, { 18, 17, 0, 1, 24, 25, 5, 20, 19, 6, 21, 7, 22, 8, 23, 26, 9, 27, 10, 28, 11, 29, 12, 30, 13, 31, 14, 32, 15, 33, 2, 34, 35, 36, 37, 38, 39, 40, 16, 41, 42, 43, 44, 45, 46, 47, 48, 3, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 4, 60, 61 }
  uselistorder i32 17, { 13, 1, 2, 14, 15, 3, 4, 5, 6, 16, 7, 17, 8, 18, 19, 20, 9, 21, 10, 11, 22, 12, 23, 24, 25, 0 }
  uselistorder i32 (i32, i32, i32)* @function_ff7c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14828, { 1, 0 }
}

define i32 @function_1483c() local_unnamed_addr {
dec_label_pc_1483c:
  %r0.global-to-local = alloca i32, align 4
  %v0_14844 = load i32, i32* @r0, align 4
  %v2_14844 = icmp eq i32 %v0_14844, 0
  %v0_1484c = load i32, i32* @r1, align 4
  br i1 %v2_14844, label %dec_label_pc_14920, label %dec_label_pc_14854

dec_label_pc_14854:                               ; preds = %dec_label_pc_1483c
  br label %dec_label_pc_1486c

dec_label_pc_1486c:                               ; preds = %dec_label_pc_14854, %dec_label_pc_148e4
  %v1_148e4 = phi i32 [ 0, %dec_label_pc_14854 ], [ %v5_148e4, %dec_label_pc_148e4 ]
  %v0_148e8 = phi i32 [ 1, %dec_label_pc_14854 ], [ %v1_148e8, %dec_label_pc_148e4 ]
  %v0_1486c = phi i32 [ %v0_14844, %dec_label_pc_14854 ], [ %v0_1486c12, %dec_label_pc_148e4 ]
  %v1_1486c = inttoptr i32 %v0_1486c to i8*
  %v2_1486c = load i8, i8* %v1_1486c, align 1
  %v3_1486c = zext i8 %v2_1486c to i32
  %v4_14870 = load i32, i32* inttoptr (i32 123120 to i32*), align 16
  %v2_14874 = mul nuw nsw i32 %v3_1486c, 2
  %v2_14878 = add i32 %v2_14874, %v4_14870
  %v3_14878 = inttoptr i32 %v2_14878 to i16*
  %v4_14878 = load i16, i16* %v3_14878, align 2
  %v1_1487c = and i16 %v4_14878, 8
  %v2_1487c = icmp eq i16 %v1_1487c, 0
  br i1 %v2_1487c, label %dec_label_pc_14920, label %dec_label_pc_14884

dec_label_pc_14884:                               ; preds = %dec_label_pc_1486c
  br label %dec_label_pc_148a4

dec_label_pc_1488c:                               ; preds = %dec_label_pc_148a4
  %v2_1488c = mul i32 %v0_148e4, 10
  %v1_14890 = add i32 %v2_1488c, -48
  %v2_14894 = add i32 %v3_148a4, %v1_14890
  %v8_1489c = icmp sgt i32 %v2_14894, 255
  br i1 %v8_1489c, label %dec_label_pc_14920, label %dec_label_pc_148a0

dec_label_pc_148a0:                               ; preds = %dec_label_pc_1488c
  %v1_148a0 = add i32 %v0_148d4, 1
  store i32 %v1_148a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_148a4

dec_label_pc_148a4:                               ; preds = %dec_label_pc_14884, %dec_label_pc_148a0
  %v0_148e4 = phi i32 [ 0, %dec_label_pc_14884 ], [ %v2_14894, %dec_label_pc_148a0 ]
  %v0_148d4 = phi i32 [ %v0_1486c, %dec_label_pc_14884 ], [ %v1_148a0, %dec_label_pc_148a0 ]
  %v1_148a4 = inttoptr i32 %v0_148d4 to i8*
  %v2_148a4 = load i8, i8* %v1_148a4, align 1
  %v3_148a4 = zext i8 %v2_148a4 to i32
  %v2_148a8 = mul nuw nsw i32 %v3_148a4, 2
  %v2_148ac = add i32 %v2_148a8, %v4_14870
  %v3_148ac = inttoptr i32 %v2_148ac to i16*
  %v4_148ac = load i16, i16* %v3_148ac, align 2
  %v6_148ac = zext i16 %v4_148ac to i32
  %v1_148b0 = and i32 %v6_148ac, 8
  %v2_148b0 = icmp eq i32 %v1_148b0, 0
  br i1 %v2_148b0, label %dec_label_pc_148b8, label %dec_label_pc_1488c

dec_label_pc_148b8:                               ; preds = %dec_label_pc_148a4
  %v7_148b8 = icmp eq i32 %v0_148e8, 4
  br i1 %v7_148b8, label %dec_label_pc_148d0, label %dec_label_pc_148c0

dec_label_pc_148c0:                               ; preds = %dec_label_pc_148b8
  %v7_148c0 = icmp eq i8 %v2_148a4, 46
  br i1 %v7_148c0, label %dec_label_pc_148c8, label %dec_label_pc_14920

dec_label_pc_148c8:                               ; preds = %dec_label_pc_148c0
  %v1_148c8 = add i32 %v0_148d4, 1
  store i32 %v1_148c8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_148e4

dec_label_pc_148d0:                               ; preds = %dec_label_pc_148b8
  %v2_148d0 = icmp eq i8 %v2_148a4, 0
  %v1_148d4 = add i32 %v0_148d4, 1
  store i32 %v1_148d4, i32* %r0.global-to-local, align 4
  br i1 %v2_148d0, label %dec_label_pc_148e4, label %dec_label_pc_148dc

dec_label_pc_148dc:                               ; preds = %dec_label_pc_148d0
  %v1_148dc = and i32 %v6_148ac, 32
  %v2_148dc = icmp eq i32 %v1_148dc, 0
  br i1 %v2_148dc, label %dec_label_pc_14920, label %dec_label_pc_148e4

dec_label_pc_148e4:                               ; preds = %dec_label_pc_148dc, %dec_label_pc_148d0, %dec_label_pc_148c8
  %v0_1486c12 = phi i32 [ %v1_148d4, %dec_label_pc_148dc ], [ %v1_148d4, %dec_label_pc_148d0 ], [ %v1_148c8, %dec_label_pc_148c8 ]
  %v4_148e4 = mul i32 %v1_148e4, 256
  %v5_148e4 = or i32 %v0_148e4, %v4_148e4
  %v1_148e8 = add nuw nsw i32 %v0_148e8, 1
  %v7_148f0 = icmp slt i32 %v1_148e8, 5
  br i1 %v7_148f0, label %dec_label_pc_1486c, label %dec_label_pc_148f4

dec_label_pc_148f4:                               ; preds = %dec_label_pc_148e4
  %v2_148f4 = icmp eq i32 %v0_1484c, 0
  br i1 %v2_148f4, label %.thread7.thread, label %bb

.thread7.thread:                                  ; preds = %dec_label_pc_148f4
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14924

bb:                                               ; preds = %dec_label_pc_148f4
  %v4_148f8 = udiv i32 %v5_148e4, 16777216
  %v2_148fc = udiv i32 %v5_148e4, 256
  %v5_14900 = and i32 %v2_148fc, 65280
  %v2_14904 = and i32 %v5_148e4, 65280
  %v5_14908 = mul nuw nsw i32 %v2_14904, 256
  %v5_1490c = mul i32 %v0_148e4, 16777216
  %v6_14900 = or i32 %v4_148f8, %v5_1490c
  %v6_14908 = or i32 %v6_14900, %v5_14900
  %v6_1490c = or i32 %v6_14908, %v5_14908
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_14918 = inttoptr i32 %v0_1484c to i32*
  store i32 %v6_1490c, i32* %v3_14918, align 4
  %v1_14928.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14924

dec_label_pc_14920:                               ; preds = %dec_label_pc_148c0, %dec_label_pc_148dc, %dec_label_pc_1486c, %dec_label_pc_1488c, %dec_label_pc_1483c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14924

dec_label_pc_14924:                               ; preds = %.thread7.thread, %bb, %dec_label_pc_14920
  %v1_14928 = phi i32 [ %v1_14928.pre, %bb ], [ 0, %dec_label_pc_14920 ], [ 1, %.thread7.thread ]
  ret i32 %v1_14928

; uselistorder directives
  uselistorder i32 %v1_148e8, { 1, 0 }
  uselistorder i32 %v5_148e4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_148d4, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 65280, { 54, 1, 6, 0, 7, 2, 8, 9, 10, 11, 12, 38, 46, 47, 48, 13, 14, 15, 49, 50, 16, 17, 18, 19, 39, 51, 3, 4, 52, 53, 20, 21, 40, 55, 56, 41, 22, 23, 24, 25, 26, 57, 58, 59, 60, 42, 43, 44, 5, 61, 62, 27, 63, 28, 29, 30, 31, 45, 65, 32, 33, 34, 66, 35, 36, 37, 64 }
  uselistorder i32 16777216, { 0, 1, 66, 65, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 31, 30, 33, 32, 35, 34, 36, 37, 39, 38, 40, 41, 42, 44, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67 }
  uselistorder i32 5, { 12, 0, 101, 55, 13, 56, 14, 51, 15, 52, 16, 53, 17, 54, 2, 1, 57, 18, 58, 19, 59, 20, 60, 21, 61, 22, 62, 23, 63, 24, 64, 25, 65, 26, 66, 27, 67, 28, 68, 29, 69, 30, 70, 31, 71, 32, 72, 33, 73, 34, 74, 35, 75, 36, 76, 37, 77, 38, 78, 39, 79, 40, 80, 41, 81, 42, 82, 43, 83, 44, 84, 45, 85, 46, 86, 87, 47, 48, 88, 4, 89, 5, 90, 6, 91, 49, 7, 92, 8, 93, 94, 9, 95, 10, 96, 102, 11, 103, 3, 97, 98, 50, 99, 100 }
  uselistorder i8 0, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 22, 21, 16, 23, 1, 15, 2, 24, 26, 25, 17, 27, 28, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 0, 38, 39, 40, 19, 41, 3, 42, 43, 44, 45, 46, 47, 48, 49, 20, 50, 51, 52, 53, 54, 55, 56 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 255, { 4, 9, 5, 0, 1, 2, 7, 10, 8, 11, 6, 12, 3 }
  uselistorder i32 10, { 1, 32, 33, 34, 3, 76, 0, 40, 6, 35, 37, 7, 36, 8, 38, 9, 39, 29, 2, 41, 30, 10, 31, 42, 11, 43, 12, 44, 13, 45, 14, 46, 15, 47, 16, 48, 17, 49, 18, 50, 19, 51, 20, 52, 21, 53, 22, 54, 55, 23, 24, 56, 57, 58, 59, 60, 61, 62, 63, 64, 25, 65, 66, 67, 4, 68, 69, 70, 26, 5, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 27, 82, 28 }
  uselistorder i16 0, { 0, 1, 2, 4, 5, 6, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 2, { 3, 4, 134, 55, 56, 51, 262, 263, 62, 264, 265, 57, 266, 267, 140, 135, 141, 136, 87, 88, 5, 142, 268, 60, 244, 6, 7, 245, 8, 9, 50, 240, 10, 11, 12, 241, 246, 13, 14, 15, 16, 63, 247, 248, 17, 18, 0, 137, 249, 19, 250, 20, 133, 21, 22, 23, 24, 25, 89, 91, 90, 58, 59, 92, 161, 162, 93, 156, 98, 157, 99, 158, 100, 159, 94, 160, 95, 163, 96, 150, 143, 144, 145, 146, 147, 148, 97, 149, 71, 151, 72, 152, 73, 153, 74, 154, 75, 155, 64, 26, 27, 164, 167, 168, 101, 61, 138, 102, 169, 103, 170, 104, 171, 172, 105, 173, 107, 165, 106, 166, 77, 174, 109, 175, 108, 76, 176, 110, 177, 28, 29, 30, 111, 178, 179, 112, 78, 113, 114, 66, 65, 116, 115, 180, 181, 182, 183, 184, 185, 186, 187, 117, 188, 79, 189, 190, 191, 192, 193, 194, 118, 80, 195, 196, 197, 198, 199, 200, 201, 202, 119, 203, 81, 204, 205, 52, 67, 120, 121, 122, 206, 207, 208, 209, 210, 211, 212, 1, 31, 32, 33, 34, 35, 36, 123, 213, 82, 214, 215, 216, 217, 37, 218, 219, 38, 39, 40, 41, 42, 43, 124, 220, 83, 221, 222, 223, 224, 225, 226, 125, 227, 126, 228, 127, 229, 2, 44, 45, 46, 47, 48, 49, 128, 230, 84, 231, 232, 53, 233, 234, 235, 236, 237, 238, 129, 85, 239, 251, 54, 252, 253, 130, 254, 131, 255, 256, 257, 258, 259, 132, 260, 86, 261, 68, 242, 69, 70, 243, 139 }
  uselistorder label %dec_label_pc_14924, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14920, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_148a4, { 1, 0 }
  uselistorder label %dec_label_pc_1486c, { 1, 0 }
}

define i32 @function_14934(i32 %arg1) local_unnamed_addr {
dec_label_pc_14934:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 122896, i32* %r2.global-to-local, align 4
  %v4_14940 = load i32, i32* inttoptr (i32 122996 to i32*), align 4
  %v4_14948 = load i32, i32* inttoptr (i32 122960 to i32*), align 16
  store i32 %v4_14948, i32* %r1.global-to-local, align 4
  %v1_1494c = add i32 %arg1, 44
  %v2_1494c = inttoptr i32 %v1_1494c to i32*
  %v3_1494c = load i32, i32* %v2_1494c, align 4
  %v1_14950 = add i32 %arg1, 28
  %v2_14950 = inttoptr i32 %v1_14950 to i32*
  %v3_14950 = load i32, i32* %v2_14950, align 4
  store i32 %v3_14950, i32* %r2.global-to-local, align 4
  %v2_14954 = inttoptr i32 %v4_14940 to i32*
  store i32 %v3_1494c, i32* %v2_14954, align 4
  %v0_14958 = load i32, i32* %r2.global-to-local, align 4
  %v1_14958 = load i32, i32* %r1.global-to-local, align 4
  %v2_14958 = inttoptr i32 %v1_14958 to i32*
  store i32 %v0_14958, i32* %v2_14958, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 122896, { 40, 0, 41, 42, 1, 2, 43, 3, 4, 5, 44, 6, 7, 8, 9, 45, 10, 46, 47, 48, 11, 35, 31, 29, 28, 30, 32, 33, 34, 27, 36, 22, 24, 23, 21, 20, 25, 26, 17, 16, 19, 18, 15, 14, 13, 12, 37, 38, 39, 49, 50 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_14964(i32 %arg1) local_unnamed_addr {
dec_label_pc_14964:
  %v0_14964 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14964, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14964
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14964, %bb
  %v4_14968 = phi i32 [ %arg1, %dec_label_pc_14964 ], [ 0, %bb ]
  ret i32 %v4_14968

; uselistorder directives
  uselistorder i1* @cpsr_z, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 30, 13, 14, 15, 24, 25, 26, 27, 16, 17, 18, 19, 28, 29, 20, 21, 22, 23, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1496c(i32 %arg1) local_unnamed_addr {
dec_label_pc_149a8:
  store i32 %arg1, i32* @global_var_202d0.711, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32* @global_var_202d0.711, { 1, 0, 2 }
}

define i32 @function_149b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_149b8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_149b8 = load i32, i32* @r7, align 4
  store i32 %v3_149b8, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_149e0, label %dec_label_pc_149d0

dec_label_pc_149d0:                               ; preds = %dec_label_pc_149b8
  %v0_149d0 = call i32 @function_1003c()
  %v0_149d4 = load i32, i32* %r7.global-to-local, align 4
  %v1_149d4 = sub i32 0, %v0_149d4
  %v2_149d8 = inttoptr i32 %v0_149d0 to i32*
  store i32 %v1_149d4, i32* %v2_149d8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_149e4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_149e0

dec_label_pc_149e0:                               ; preds = %dec_label_pc_149b8, %dec_label_pc_149d0
  %v2_149e4 = phi i32 [ %v3_149b8, %dec_label_pc_149b8 ], [ %v2_149e4.pre, %dec_label_pc_149d0 ]
  %v0_149e0 = phi i32 [ %arg1, %dec_label_pc_149b8 ], [ -1, %dec_label_pc_149d0 ]
  store i32 %v2_149e4, i32* %r7.global-to-local, align 4
  ret i32 %v0_149e0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_149e0, { 1, 0 }
}

define i32 @function_149ec() local_unnamed_addr {
dec_label_pc_149ec:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %tmp = call i16 @__decompiler_undefined_function_2()
  %tmp4 = call i16 @__decompiler_undefined_function_2()
  %tmp5 = call i16 @__decompiler_undefined_function_2()
  %tmp6 = call i16 @__decompiler_undefined_function_2()
  %tmp28 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-72 = alloca i32, align 4
  %v3_149ec = load i32, i32* @r7, align 4
  %v6_149ec = load i32, i32* @lr, align 4
  %v2_149f0 = ptrtoint i32* %stack_var_-72 to i32
  %v0_149f4 = load i32, i32* @r1, align 4
  store i32 %v0_149f4, i32* @r3, align 4
  store i32 %v2_149f0, i32* %r1.global-to-local, align 4
  %v0_14a04 = load i32, i32* @r0, align 4
  store i32 %v0_14a04, i32* %r7.global-to-local, align 4
  %tmp32 = icmp ult i32 %v0_14a04, -4095
  br i1 %tmp32, label %dec_label_pc_14a24, label %dec_label_pc_14a10

dec_label_pc_14a10:                               ; preds = %dec_label_pc_149ec
  %v0_14a10 = call i32 @function_1003c()
  %v0_14a14 = load i32, i32* %r7.global-to-local, align 4
  %v1_14a14 = sub i32 0, %v0_14a14
  store i32 %v1_14a14, i32* @r3, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_14a1c = inttoptr i32 %v0_14a10 to i32*
  store i32 %v1_14a14, i32* %v2_14a1c, align 4
  %v0_14a34.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14a34

dec_label_pc_14a24:                               ; preds = %dec_label_pc_149ec
  %v2_14a24 = icmp eq i32 %v0_14a04, 0
  store i32 84532, i32* %lr.global-to-local, align 4
  br i1 %v2_14a24, label %dec_label_pc_14bbc, label %dec_label_pc_14a34

dec_label_pc_14a34:                               ; preds = %dec_label_pc_14a24, %dec_label_pc_14a10
  %v0_14a34 = phi i32 [ %v0_14a34.pre, %dec_label_pc_14a10 ], [ %v0_14a04, %dec_label_pc_14a24 ]
  store i32 %v3_149ec, i32* @r7, align 4
  store i32 %v6_149ec, i32* @lr, align 4
  ret i32 %v0_14a34

dec_label_pc_14bbc:                               ; preds = %dec_label_pc_14a24
  %v3_14bbc = load i32, i32* @r4, align 4
  %v6_14bbc = load i32, i32* @r5, align 4
  %v9_14bbc = load i32, i32* @r6, align 4
  %v15_14bbc = load i32, i32* @r8, align 4
  %v18_14bbc = load i32, i32* @sb, align 4
  store i32 %v0_149f4, i32* %r5.global-to-local, align 4
  store i32 %v2_149f0, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_14bd8 = inttoptr i32 %v0_149f4 to i8*
  %v3_14bd8 = call i32 @function_143c0(i8* %v2_14bd8, i32 0)
  %v2_14be0 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_14be0, i32* %r8.global-to-local, align 4
  %v1_14be4 = load i32, i32* %r5.global-to-local, align 4
  %v2_14be4 = add i32 %v1_14be4, 12
  %v3_14be4 = inttoptr i32 %v2_14be4 to i32*
  %v1_14bf0 = load i32, i32* %r5.global-to-local, align 4
  %v2_14bf0 = add i32 %v1_14bf0, 44
  %v3_14bf0 = inttoptr i32 %v2_14bf0 to i32*
  %v1_14bf8 = load i32, i32* %r5.global-to-local, align 4
  %v2_14bf8 = add i32 %v1_14bf8, 48
  %v3_14bf8 = inttoptr i32 %v2_14bf8 to i32*
  %v1_14c00 = load i32, i32* %r5.global-to-local, align 4
  %v2_14c00 = add i32 %v1_14c00, 52
  %v3_14c00 = inttoptr i32 %v2_14c00 to i32*
  %v0_14c0c = load i32, i32* %r5.global-to-local, align 4
  %v1_14c0c = add i32 %v0_14c0c, 56
  %v1_14c10 = inttoptr i32 %v1_14c0c to i32*
  %v3_14c10 = add i32 %v0_14c0c, 60
  %v4_14c10 = inttoptr i32 %v3_14c10 to i32*
  %v5_14c10 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14c10, i32* %v4_14c10, align 4
  %v0_14c1c = load i32, i32* %r5.global-to-local, align 4
  %v1_14c1c = add i32 %v0_14c1c, 64
  %v1_14c20 = inttoptr i32 %v1_14c1c to i32*
  %v3_14c20 = add i32 %v0_14c1c, 68
  %v4_14c20 = inttoptr i32 %v3_14c20 to i32*
  %v5_14c20 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14c20, i32* %v4_14c20, align 4
  %v4_14c2c = zext i16 %tmp6 to i32
  store i32 %v4_14c2c, i32* %r2.global-to-local, align 4
  %v4_14c30 = zext i16 %tmp5 to i32
  store i32 %v4_14c30, i32* %ip.global-to-local, align 4
  %v4_14c34 = zext i16 %tmp4 to i32
  store i32 %v4_14c34, i32* %lr.global-to-local, align 4
  %v4_14c38 = zext i16 %tmp to i32
  store i32 %v4_14c38, i32* %r4.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_14c44 = load i32, i32* %r5.global-to-local, align 4
  %v1_14c44 = add i32 %v0_14c44, 72
  store i32 %v1_14c44, i32* @r3, align 4
  %v1_14c48 = inttoptr i32 %v1_14c44 to i32*
  store i32 %tmp28, i32* %v1_14c48, align 4
  %v3_14c48 = add i32 %v0_14c44, 76
  %v4_14c48 = inttoptr i32 %v3_14c48 to i32*
  %v5_14c48 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14c48, i32* %v4_14c48, align 4
  %v0_14c4c = load i32, i32* %r5.global-to-local, align 4
  %v1_14c4c = inttoptr i32 %v0_14c4c to i32*
  %v2_14c4c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_14c4c, i32* %v1_14c4c, align 4
  %v3_14c4c = add i32 %v0_14c4c, 4
  %v4_14c4c = inttoptr i32 %v3_14c4c to i32*
  %v5_14c4c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v5_14c4c, i32* %v4_14c4c, align 4
  %v0_14c50 = load i32, i32* %r6.global-to-local, align 4
  %v1_14c50 = load i32, i32* %r5.global-to-local, align 4
  %v2_14c50 = add i32 %v1_14c50, 32
  %v3_14c50 = inttoptr i32 %v2_14c50 to i32*
  store i32 %v0_14c50, i32* %v3_14c50, align 4
  %v0_14c54 = load i32, i32* %r7.global-to-local, align 4
  %v1_14c54 = load i32, i32* %r5.global-to-local, align 4
  %v2_14c54 = add i32 %v1_14c54, 36
  %v3_14c54 = inttoptr i32 %v2_14c54 to i32*
  store i32 %v0_14c54, i32* %v3_14c54, align 4
  %v0_14c58 = load i32, i32* %r2.global-to-local, align 4
  %v1_14c58 = load i32, i32* %r5.global-to-local, align 4
  %v2_14c58 = add i32 %v1_14c58, 16
  %v3_14c58 = inttoptr i32 %v2_14c58 to i32*
  store i32 %v0_14c58, i32* %v3_14c58, align 4
  %v0_14c5c = load i32, i32* %ip.global-to-local, align 4
  %v1_14c5c = load i32, i32* %r5.global-to-local, align 4
  %v2_14c5c = add i32 %v1_14c5c, 20
  %v3_14c5c = inttoptr i32 %v2_14c5c to i32*
  store i32 %v0_14c5c, i32* %v3_14c5c, align 4
  %v0_14c60 = load i32, i32* %lr.global-to-local, align 4
  %v1_14c60 = load i32, i32* %r5.global-to-local, align 4
  %v2_14c60 = add i32 %v1_14c60, 24
  %v3_14c60 = inttoptr i32 %v2_14c60 to i32*
  store i32 %v0_14c60, i32* %v3_14c60, align 4
  %v0_14c64 = load i32, i32* %r4.global-to-local, align 4
  %v1_14c64 = load i32, i32* %r5.global-to-local, align 4
  %v2_14c64 = add i32 %v1_14c64, 28
  %v3_14c64 = inttoptr i32 %v2_14c64 to i32*
  store i32 %v0_14c64, i32* %v3_14c64, align 4
  store i32 %v3_14bbc, i32* @r4, align 4
  store i32 %v6_14bbc, i32* @r5, align 4
  store i32 %v9_14bbc, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  store i32 %v15_14bbc, i32* @r8, align 4
  store i32 %v18_14bbc, i32* @sb, align 4
  store i32 84532, i32* @lr, align 4
  ret i32 %tmp28

; uselistorder directives
  uselistorder i32 %v0_14a04, { 1, 2, 0, 3 }
  uselistorder i32 %v0_149f4, { 1, 0, 2 }
  uselistorder i32 %tmp28, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 4, 5, 0, 1, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 6, 7, 8, 9, 10, 11, 12, 13, 0, 1, 2, 3, 4, 5, 14 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0 }
  uselistorder i32 24, { 53, 0, 1, 57, 58, 59, 60, 10, 11, 12, 14, 13, 15, 2, 16, 61, 62, 63, 17, 64, 18, 19, 65, 20, 54, 55, 21, 56, 22, 23, 24, 25, 99, 100, 26, 102, 27, 51, 52, 28, 82, 83, 71, 84, 79, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 86, 87, 88, 29, 30, 31, 32, 3, 33, 34, 8, 89, 90, 35, 36, 4, 37, 91, 38, 39, 40, 9, 92, 41, 42, 43, 93, 44, 5, 94, 95, 96, 97, 45, 46, 98, 47, 103, 48, 6, 104, 7, 49, 105, 101, 50 }
  uselistorder i32 36, { 14, 3, 4, 15, 5, 6, 7, 8, 9, 10, 11, 0, 1, 12, 2, 13 }
  uselistorder i32 32, { 83, 90, 46, 48, 47, 84, 85, 86, 87, 49, 95, 1, 50, 51, 55, 52, 56, 53, 57, 54, 58, 59, 91, 92, 60, 93, 68, 69, 67, 70, 71, 72, 73, 74, 75, 62, 63, 2, 64, 3, 65, 5, 4, 61, 66, 76, 94, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 82, 21, 20, 22, 24, 23, 26, 25, 27, 28, 30, 29, 77, 78, 31, 88, 32, 89, 33, 34, 35, 36, 37, 38, 79, 39, 40, 41, 80, 42, 0, 43, 44, 45, 81 }
  uselistorder i32 72, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 12, 8, 9, 10 }
  uselistorder i32 60, { 3, 1, 4, 5, 0, 2, 6 }
  uselistorder i32 56, { 4, 5, 6, 7, 1, 2, 8, 0, 3, 9, 10 }
  uselistorder i32 52, { 4, 5, 6, 7, 8, 9, 12, 13, 1, 14, 0, 15, 16, 2, 3, 10, 11 }
  uselistorder i32 48, { 7, 0, 2, 4, 9, 3, 5, 6, 8, 11, 12, 13, 10, 1 }
  uselistorder i32 44, { 10, 37, 0, 1, 3, 4, 5, 2, 6, 7, 8, 11, 9, 21, 22, 23, 24, 25, 26, 18, 19, 20, 16, 17, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 12, 13, 14, 15 }
  uselistorder i32 (i8*, i32)* @function_143c0, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i32* @sb, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 89, 90, 91, 92, 93, 94, 95, 96, 101, 104, 102, 103, 105, 36, 37, 38, 1, 39, 40, 45, 46, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 2, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 106, 107, 108, 109, 110, 111, 112, 113, 114, 97, 98, 99, 100 }
  uselistorder i32* @r8, { 5, 6, 10, 11, 12, 13, 14, 15, 7, 8, 9, 16, 17, 1, 18, 149, 106, 107, 2, 108, 109, 110, 126, 127, 128, 129, 130, 3, 131, 132, 133, 134, 135, 136, 137, 138, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 19, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 54, 55, 56, 58, 59, 60, 61, 62, 64, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 139, 140, 0, 144, 141, 142, 143, 145, 146, 147, 148, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 120, 121, 122, 4, 124, 125 }
  uselistorder i32* @r6, { 15, 16, 24, 0, 25, 26, 1, 27, 28, 29, 2, 30, 31, 13, 14, 32, 33, 3, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 4, 5, 51, 52, 53, 54, 55, 56, 57, 58, 17, 18, 19, 20, 21, 22, 23, 6, 7, 8, 298, 299, 300, 301, 302, 303, 304, 59, 9, 60, 10, 61, 296, 297, 241, 245, 246, 247, 248, 242, 243, 244, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 249, 274, 275, 276, 250, 251, 252, 253, 254, 11, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 270, 272, 266, 267, 268, 269, 271, 273, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 67, 68, 69, 70, 65, 71, 62, 63, 64, 66, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 277, 278, 279, 280, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 130, 127, 128, 129, 131, 132, 133, 134, 135, 136, 141, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 153, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 165, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 175, 176, 177, 179, 180, 181, 182, 189, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 201, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 281, 282, 283, 289, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 12, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240 }
  uselistorder i32* @lr, { 2, 3, 4, 142, 143, 144, 145, 146, 147, 148, 149, 150, 7, 8, 9, 10, 11, 12, 13, 14, 15, 5, 6, 40, 41, 151, 152, 16, 17, 105, 106, 107, 108, 109, 110, 98, 99, 100, 111, 124, 125, 112, 113, 114, 115, 116, 117, 118, 1, 119, 120, 122, 123, 121, 126, 127, 128, 19, 129, 130, 20, 21, 18, 22, 23, 24, 0, 28, 29, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 87, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 131, 132, 133, 134, 135, 136, 137, 141, 101, 102, 103, 104, 138, 139, 140, 78, 79 }
}

define i32 @function_14c74(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14c74:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_14c78 = load i32, i32* @r4, align 4
  %v6_14c78 = load i32, i32* @r5, align 4
  %v12_14c78 = load i32, i32* @r7, align 4
  %v1_14c7c = add i32 %arg3, 14
  %v2_14c84 = ptrtoint i32* %stack_var_-72 to i32
  %v1_14c88 = and i32 %v1_14c7c, -8
  %v2_14c8c = sub i32 %v2_14c84, %v1_14c88
  %v1_14c90 = add i32 %v2_14c8c, 8
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v1_14c90, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp25 = icmp ult i32 %arg1, -4095
  br i1 %tmp25, label %dec_label_pc_14ccc, label %dec_label_pc_14cb8

dec_label_pc_14cb8:                               ; preds = %dec_label_pc_14c74
  %v0_14cb8 = call i32 @function_1003c()
  %v0_14cbc = load i32, i32* %r4.global-to-local, align 4
  %v1_14cbc = sub i32 0, %v0_14cbc
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14cc4 = inttoptr i32 %v0_14cb8 to i32*
  store i32 %v1_14cbc, i32* %v2_14cc4, align 4
  %v0_14cd4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14cd4

dec_label_pc_14ccc:                               ; preds = %dec_label_pc_14c74
  br i1 false, label %dec_label_pc_14cd4, label %dec_label_pc_14cdc

dec_label_pc_14cd4:                               ; preds = %dec_label_pc_14ccc, %dec_label_pc_14cb8
  %v0_14cd4 = phi i32 [ -1, %dec_label_pc_14ccc ], [ %v0_14cd4.pre, %dec_label_pc_14cb8 ]
  store i32 %v0_14cd4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14da8

dec_label_pc_14cdc:                               ; preds = %dec_label_pc_14ccc
  %v2_14cdc = add i32 %v1_14c90, %arg1
  %v2_14ce0 = add i32 %tmp, %arg3
  store i32 %v2_14ce0, i32* @ip, align 4
  store i32 %v1_14c90, i32* @r7, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_14d90

dec_label_pc_14cfc:                               ; preds = %dec_label_pc_14d90
  %v1_14cfc = add i32 %v0_14d50, 16
  %v2_14cfc = inttoptr i32 %v1_14cfc to i16*
  %v3_14cfc = load i16, i16* %v2_14cfc, align 2
  %v4_14cfc = zext i16 %v3_14cfc to i32
  %v1_14d00 = add nuw nsw i32 %v4_14cfc, 7
  %v1_14d04 = and i32 %v1_14d00, 131064
  store i32 %v1_14d04, i32* %r2.global-to-local, align 4
  %v2_14d0c = add i32 %v1_14d04, %v0_14d58
  store i32 %v2_14d0c, i32* %r8.global-to-local, align 4
  %tmp26 = icmp ugt i32 %v2_14d0c, %v2_14ce0
  br i1 %tmp26, label %dec_label_pc_14d18, label %dec_label_pc_14d4c

dec_label_pc_14d18:                               ; preds = %dec_label_pc_14cfc
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_14d20 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_14d20, i32* %r2.global-to-local, align 4
  %v0_14d24 = load i32, i32* %sl.global-to-local, align 4
  %v1_14d28 = load i32, i32* @sp, align 4
  %v2_14d28 = inttoptr i32 %v1_14d28 to i32*
  store i32 0, i32* %v2_14d28, align 4
  %v4_14d2c = call i32 @function_14fb0(i32 %arg1, i32 0, i32 %v0_14d20, i32 %v0_14d24)
  %v0_14d30 = load i32, i32* @r5, align 4
  %v1_14d30 = load i32, i32* %r6.global-to-local, align 4
  %v9_14d30 = icmp eq i32 %v0_14d30, %v1_14d30
  br i1 %v9_14d30, label %dec_label_pc_14d38, label %dec_label_pc_14da4

dec_label_pc_14d38:                               ; preds = %dec_label_pc_14d18
  %v0_14d38 = call i32 @function_1003c()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_14d44 = inttoptr i32 %v0_14d38 to i32*
  store i32 22, i32* %v2_14d44, align 4
  %v0_14da8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14da8

dec_label_pc_14d4c:                               ; preds = %dec_label_pc_14cfc
  %v1_14d4c = inttoptr i32 %v0_14d50 to i32*
  %v2_14d4c = load i32, i32* %v1_14d4c, align 4
  %v3_14d4c = add i32 %v0_14d50, 4
  %v4_14d4c = inttoptr i32 %v3_14d4c to i32*
  %v5_14d4c = load i32, i32* %v4_14d4c, align 4
  store i32 %v5_14d4c, i32* %r4.global-to-local, align 4
  %v1_14d50 = add i32 %v0_14d50, 8
  store i32 %v1_14d50, i32* %sb.global-to-local, align 4
  %v1_14d54 = inttoptr i32 %v1_14d50 to i32*
  %v2_14d54 = load i32, i32* %v1_14d54, align 4
  store i32 %v2_14d54, i32* %sb.global-to-local, align 4
  %v3_14d54 = add i32 %v0_14d50, 12
  %v4_14d54 = inttoptr i32 %v3_14d54 to i32*
  %v5_14d54 = load i32, i32* %v4_14d54, align 4
  store i32 %v5_14d54, i32* %sl.global-to-local, align 4
  %v1_14d58 = inttoptr i32 %v0_14d58 to i32*
  store i32 %v2_14d4c, i32* %v1_14d58, align 4
  %v3_14d58 = add i32 %v0_14d58, 4
  %v4_14d58 = inttoptr i32 %v3_14d58 to i32*
  %v5_14d58 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14d58, i32* %v4_14d58, align 4
  %v0_14d5c = load i32, i32* @r7, align 4
  %v1_14d5c = add i32 %v0_14d5c, 8
  %v1_14d60 = inttoptr i32 %v1_14d5c to i32*
  %v2_14d60 = load i32, i32* %v1_14d60, align 4
  %v3_14d60 = add i32 %v0_14d5c, 12
  %v4_14d60 = inttoptr i32 %v3_14d60 to i32*
  %v5_14d60 = load i32, i32* %v4_14d60, align 4
  store i32 %v5_14d60, i32* @r4, align 4
  %v1_14d64 = load i32, i32* @r5, align 4
  %v2_14d64 = add i32 %v1_14d64, 8
  %v3_14d64 = inttoptr i32 %v2_14d64 to i32*
  store i32 %v2_14d60, i32* %v3_14d64, align 4
  %v0_14d68 = load i32, i32* @r4, align 4
  %v1_14d68 = load i32, i32* @r5, align 4
  %v2_14d68 = add i32 %v1_14d68, 12
  %v3_14d68 = inttoptr i32 %v2_14d68 to i32*
  store i32 %v0_14d68, i32* %v3_14d68, align 4
  %v0_14d6c = load i32, i32* %r2.global-to-local, align 4
  %v1_14d6c = trunc i32 %v0_14d6c to i16
  %v2_14d6c = load i32, i32* @r5, align 4
  %v3_14d6c = add i32 %v2_14d6c, 16
  %v4_14d6c = inttoptr i32 %v3_14d6c to i16*
  store i16 %v1_14d6c, i16* %v4_14d6c, align 2
  %v0_14d70 = load i32, i32* @r7, align 4
  %v1_14d70 = add i32 %v0_14d70, 18
  %v2_14d70 = inttoptr i32 %v1_14d70 to i8*
  %v3_14d70 = load i8, i8* %v2_14d70, align 1
  %v4_14d70 = zext i8 %v3_14d70 to i32
  store i32 %v4_14d70, i32* @r3, align 4
  %v2_14d74 = load i32, i32* @r5, align 4
  %v3_14d74 = add i32 %v2_14d74, 18
  %v4_14d74 = inttoptr i32 %v3_14d74 to i8*
  store i8 %v3_14d70, i8* %v4_14d74, align 1
  %v0_14d78 = load i32, i32* @r7, align 4
  %v1_14d78 = add i32 %v0_14d78, 16
  %v2_14d78 = inttoptr i32 %v1_14d78 to i16*
  %v3_14d78 = load i16, i16* %v2_14d78, align 2
  %v4_14d78 = zext i16 %v3_14d78 to i32
  %v1_14d7c = add nsw i32 %v4_14d78, -19
  store i32 %v1_14d7c, i32* @r2, align 4
  %v0_14d80 = call i32 @function_100a0()
  %v0_14d84 = load i32, i32* @r7, align 4
  %v1_14d84 = add i32 %v0_14d84, 16
  %v2_14d84 = inttoptr i32 %v1_14d84 to i16*
  %v3_14d84 = load i16, i16* %v2_14d84, align 2
  %v4_14d84 = zext i16 %v3_14d84 to i32
  %v0_14d88 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14d88, i32* @r5, align 4
  %v2_14d8c = add i32 %v4_14d84, %v0_14d84
  store i32 %v2_14d8c, i32* @r7, align 4
  br label %dec_label_pc_14d90

dec_label_pc_14d90:                               ; preds = %dec_label_pc_14cdc, %dec_label_pc_14d4c
  %v0_14d58 = phi i32 [ %tmp, %dec_label_pc_14cdc ], [ %v0_14d88, %dec_label_pc_14d4c ]
  %v0_14d50 = phi i32 [ %v1_14c90, %dec_label_pc_14cdc ], [ %v2_14d8c, %dec_label_pc_14d4c ]
  %v3_14d94 = icmp ult i32 %v0_14d50, %v2_14cdc
  %v1_14d98 = add i32 %v0_14d58, 19
  store i32 %v1_14d98, i32* @r0, align 4
  %v1_14d9c = add i32 %v0_14d50, 19
  store i32 %v1_14d9c, i32* @r1, align 4
  br i1 %v3_14d94, label %dec_label_pc_14cfc, label %dec_label_pc_14da4.loopexit

dec_label_pc_14da4.loopexit:                      ; preds = %dec_label_pc_14d90
  %v0_14da4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14da4

dec_label_pc_14da4:                               ; preds = %dec_label_pc_14da4.loopexit, %dec_label_pc_14d18
  %v1_14da4 = phi i32 [ %v0_14d58, %dec_label_pc_14da4.loopexit ], [ %v0_14d30, %dec_label_pc_14d18 ]
  %v0_14da4 = phi i32 [ %v0_14da4.pre, %dec_label_pc_14da4.loopexit ], [ %v1_14d30, %dec_label_pc_14d18 ]
  %v2_14da4 = sub i32 %v1_14da4, %v0_14da4
  store i32 %v2_14da4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14da8

dec_label_pc_14da8:                               ; preds = %dec_label_pc_14d38, %dec_label_pc_14cd4, %dec_label_pc_14da4
  %v0_14da8 = phi i32 [ %v0_14da8.pre, %dec_label_pc_14d38 ], [ %v0_14cd4, %dec_label_pc_14cd4 ], [ %v2_14da4, %dec_label_pc_14da4 ]
  store i32 %v3_14c78, i32* %r4.global-to-local, align 4
  store i32 %v6_14c78, i32* @r5, align 4
  store i32 %v12_14c78, i32* @r7, align 4
  ret i32 %v0_14da8

; uselistorder directives
  uselistorder i32 %v0_14d50, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_14d58, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_14c90, { 1, 2, 0, 3 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 19, { 5, 6, 0, 1, 7, 8, 9, 2, 3, 4 }
  uselistorder i32* @r3, { 11, 12, 13, 14, 15, 6, 7, 8, 65, 62, 63, 64, 1, 66, 67, 68, 69, 70, 3, 71, 72, 73, 4, 74, 75, 76, 5, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 0, 95, 96, 97, 98, 16, 9, 17, 18, 19, 20, 21, 10, 99, 108, 109, 110, 103, 51, 52, 53, 54, 55, 43, 44, 104, 56, 33, 34, 35, 105, 106, 107, 57, 100, 101, 102, 36, 58, 59, 60, 61, 2, 28, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 37, 38, 40, 39, 41, 42, 45, 46, 47, 48, 49, 50 }
  uselistorder i32 18, { 7, 8, 6, 2, 3, 4, 9, 5, 10, 0, 11, 1, 12 }
  uselistorder i32 22, { 1, 0, 7, 2, 3, 4, 5, 6, 8 }
  uselistorder i32* @sp, { 2, 3, 1, 4, 0 }
  uselistorder i32 7, { 47, 88, 45, 46, 9, 0, 1, 10, 52, 12, 48, 13, 49, 14, 50, 11, 51, 2, 15, 53, 16, 54, 17, 55, 18, 56, 19, 57, 20, 58, 21, 59, 22, 60, 23, 61, 24, 62, 25, 63, 26, 64, 27, 65, 28, 66, 29, 67, 30, 68, 31, 69, 32, 70, 33, 71, 34, 72, 35, 73, 36, 74, 37, 75, 38, 76, 39, 77, 40, 78, 41, 79, 4, 80, 42, 81, 5, 43, 82, 6, 83, 7, 84, 8, 85, 44, 87, 3, 86 }
  uselistorder i32* @ip, { 6, 7, 8, 45, 9, 10, 5, 49, 46, 47, 48, 1, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 2, 84, 85, 86, 87, 88, 89, 90, 91, 92, 11, 0, 12, 13, 14, 15, 16, 93, 94, 95, 29, 3, 23, 24, 25, 26, 27, 28, 30, 31, 32, 17, 18, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 4, 19, 20, 21, 22 }
  uselistorder i1 false, { 0, 19, 18, 17, 20, 22, 23, 24, 32, 14, 21, 33, 34, 35, 36, 37, 25, 3, 31, 15, 16, 2, 11, 4, 28, 12, 10, 13, 5, 6, 7, 26, 1, 8, 9, 29, 30, 27, 38 }
  uselistorder i32 -8, { 37, 19, 16, 17, 18, 8, 20, 21, 22, 23, 24, 25, 15, 14, 9, 13, 12, 11, 10, 26, 27, 28, 29, 30, 39, 31, 32, 33, 34, 35, 38, 40, 36, 41, 0, 1, 4, 3, 2, 5, 6, 7 }
  uselistorder i32 14, { 11, 21, 7, 8, 9, 10, 2, 12, 3, 13, 4, 5, 6, 14, 15, 0, 16, 17, 18, 19, 1, 20 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_14da8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14d90, { 1, 0 }
}

define i32 @function_14db8(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14db8:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14db8 = load i32, i32* @r4, align 4
  store i32 %v3_14db8, i32* %stack_var_-12, align 4
  %v0_14dbc = load i32, i32* %r0.global-to-local, align 4
  %v1_14dbc = inttoptr i32 %v0_14dbc to i16*
  %v2_14dbc = load i16, i16* %v1_14dbc, align 2
  %v3_14dbc = zext i16 %v2_14dbc to i32
  %v1_14dc0 = and i32 %v3_14dbc, 4
  store i32 %v1_14dc0, i32* %r5.global-to-local, align 4
  %v2_14dc0 = icmp eq i32 %v1_14dc0, 0
  store i32 %v0_14dbc, i32* %r4.global-to-local, align 4
  br i1 %v2_14dc0, label %dec_label_pc_14dd4, label %bb

bb:                                               ; preds = %dec_label_pc_14db8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_14dd4:                               ; preds = %dec_label_pc_14db8
  %v1_14dd4 = icmp slt i32 %arg2, 0
  br i1 %v1_14dd4, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_14dd4
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_14dd4, %bb18
  %v1_14ddc = add i32 %v0_14dbc, 4
  %v2_14ddc = inttoptr i32 %v1_14ddc to i32*
  %v3_14ddc = load i32, i32* %v2_14ddc, align 4
  store i32 %v3_14ddc, i32* %r0.global-to-local, align 4
  %v1_14de0 = call i32 @function_fda0(i32 %v3_14ddc)
  store i32 %v1_14de0, i32* %r0.global-to-local, align 4
  %v5_14de8 = icmp sgt i32 %v1_14de0, 0
  br i1 %v5_14de8, label %.thread7, label %dec_label_pc_14dec

dec_label_pc_14dec:                               ; preds = %bb19
  %v2_14de4 = icmp eq i32 %v1_14de0, 0
  %v0_14dec = load i32, i32* %r4.global-to-local, align 4
  %v1_14dec = inttoptr i32 %v0_14dec to i16*
  %v2_14dec = load i16, i16* %v1_14dec, align 2
  br i1 %v2_14de4, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_14dec
  %v2_14df0 = or i16 %v2_14dec, 4
  store i16 %v2_14df0, i16* %v1_14dec, align 2
  %v1_14e0c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_14dec
  %v2_14df4 = or i16 %v2_14dec, 8
  store i16 %v2_14df4, i16* %v1_14dec, align 2
  %v1_14e00 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_14e00, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_14e0c = phi i32 [ %v1_14e0c.pre, %bb20 ], [ 0, %bb ], [ %v1_14de0, %bb19 ], [ %v1_14e00, %bb21 ]
  %v2_14e08 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14e08, i32* @r4, align 4
  ret i32 %v1_14e0c

; uselistorder directives
  uselistorder i16 %v2_14dec, { 1, 0 }
  uselistorder i32 %v1_14de0, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_fda0, { 1, 0 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @function_14e10(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14e10:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_14e10 = load i32, i32* @r4, align 4
  store i32 %v3_14e10, i32* %stack_var_-24, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  store i32 2147483647, i32* %r8.global-to-local, align 4
  %v2_14e282 = icmp eq i32 %arg3, 0
  store i1 %v2_14e282, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14e282, label %dec_label_pc_14eb8, label %dec_label_pc_14e30

dec_label_pc_14e28thread-pre-split:               ; preds = %dec_label_pc_14e30
  %v3_14e48 = load i32, i32* %r6.global-to-local, align 4
  %v5_14e48 = add i32 %v3_14e48, %v3_14e40
  store i32 %v5_14e48, i32* %r6.global-to-local, align 4
  %v4_14e4c = load i32, i32* %r5.global-to-local, align 4
  %v5_14e4c = sub i32 %v4_14e4c, %v3_14e40
  store i32 %v5_14e4c, i32* %r5.global-to-local, align 4
  %v2_14e28 = icmp eq i32 %v5_14e4c, 0
  store i1 %v2_14e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14e28, label %dec_label_pc_14e28.dec_label_pc_14eb8.loopexit_crit_edge, label %dec_label_pc_14e28thread-pre-split.dec_label_pc_14e30_crit_edge

dec_label_pc_14e28thread-pre-split.dec_label_pc_14e30_crit_edge: ; preds = %dec_label_pc_14e28thread-pre-split
  %v3_14e30.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_14e3c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14e30

dec_label_pc_14e30:                               ; preds = %dec_label_pc_14e10, %dec_label_pc_14e28thread-pre-split.dec_label_pc_14e30_crit_edge
  %v0_14e3c = phi i32 [ %v0_14e3c.pre, %dec_label_pc_14e28thread-pre-split.dec_label_pc_14e30_crit_edge ], [ %tmp, %dec_label_pc_14e10 ]
  %v0_14e38 = phi i32 [ %v5_14e48, %dec_label_pc_14e28thread-pre-split.dec_label_pc_14e30_crit_edge ], [ %arg2, %dec_label_pc_14e10 ]
  %v3_14e30 = phi i32 [ %v3_14e30.pre, %dec_label_pc_14e28thread-pre-split.dec_label_pc_14e30_crit_edge ], [ 2147483647, %dec_label_pc_14e10 ]
  %v0_14e34.in = phi i32 [ %v5_14e4c, %dec_label_pc_14e28thread-pre-split.dec_label_pc_14e30_crit_edge ], [ %arg3, %dec_label_pc_14e10 ]
  %v3_14e34 = phi i32 [ %v5_14e4c, %dec_label_pc_14e28thread-pre-split.dec_label_pc_14e30_crit_edge ], [ %arg3, %dec_label_pc_14e10 ]
  %v0_14e34 = icmp slt i32 %v0_14e34.in, 0
  %storemerge = select i1 %v0_14e34, i32 %v3_14e30, i32 %v3_14e34
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v0_14e38, i32* %r1.global-to-local, align 4
  %v1_14e3c = add i32 %v0_14e3c, 4
  %v2_14e3c = inttoptr i32 %v1_14e3c to i32*
  %v3_14e3c = load i32, i32* %v2_14e3c, align 4
  %v3_14e40 = call i32 @function_ff14(i32 %v3_14e3c, i32 %v0_14e38)
  %v1_14e44 = icmp slt i32 %v3_14e40, 0
  %v2_14e44 = icmp eq i32 %v3_14e40, 0
  store i1 %v2_14e44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_14e44, label %dec_label_pc_14e54, label %dec_label_pc_14e28thread-pre-split

dec_label_pc_14e54:                               ; preds = %dec_label_pc_14e30
  %v0_14e54 = load i32, i32* %r4.global-to-local, align 4
  %v1_14e54 = inttoptr i32 %v0_14e54 to i16*
  %v2_14e54 = load i16, i16* %v1_14e54, align 2
  %v3_14e54 = zext i16 %v2_14e54 to i32
  store i32 %v3_14e54, i32* %r3.global-to-local, align 4
  %v1_14e58 = add i32 %v0_14e54, 8
  store i32 %v1_14e58, i32* %r1.global-to-local, align 4
  %v1_14e5c = inttoptr i32 %v1_14e58 to i32*
  %v2_14e5c = load i32, i32* %v1_14e5c, align 4
  store i32 %v2_14e5c, i32* %r1.global-to-local, align 4
  %v3_14e5c = add i32 %v0_14e54, 12
  %v4_14e5c = inttoptr i32 %v3_14e5c to i32*
  %v5_14e5c = load i32, i32* %v4_14e5c, align 4
  %v1_14e60 = or i32 %v3_14e54, 8
  store i32 %v1_14e60, i32* %r3.global-to-local, align 4
  %v2_14e64 = sub i32 %v5_14e5c, %v2_14e5c
  store i32 %v2_14e64, i32* %r2.global-to-local, align 4
  %v9_14e64 = icmp eq i32 %v5_14e5c, %v2_14e5c
  store i1 %v9_14e64, i1* %cpsr_z.global-to-local, align 1
  %v1_14e68 = trunc i32 %v1_14e60 to i16
  store i16 %v1_14e68, i16* %v1_14e54, align 2
  br i1 %v9_14e64, label %dec_label_pc_14e54.dec_label_pc_14eb4_crit_edge, label %dec_label_pc_14e70

dec_label_pc_14e54.dec_label_pc_14eb4_crit_edge:  ; preds = %dec_label_pc_14e54
  %v0_14eb4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14eb4

dec_label_pc_14e70:                               ; preds = %dec_label_pc_14e54
  %v0_14e70 = load i32, i32* %r2.global-to-local, align 4
  %v1_14e70 = load i32, i32* %r5.global-to-local, align 4
  %v3_14e70 = icmp ult i32 %v0_14e70, %v1_14e70
  %v9_14e70 = icmp eq i32 %v0_14e70, %v1_14e70
  store i1 %v9_14e70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14e70, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_14e70
  store i32 %v1_14e70, i32* %r2.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_14e70, %bb23
  %v2_14e84.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb24

bb24:                                             ; preds = %.preheader, %dec_label_pc_14e98
  %v2_14e84 = phi i32 [ %v2_14e84.pre, %.preheader ], [ %v1_14e9c, %dec_label_pc_14e98 ]
  %v0_14e78 = load i32, i32* %r6.global-to-local, align 4
  %v1_14e78 = inttoptr i32 %v0_14e78 to i8*
  %v2_14e78 = load i8, i8* %v1_14e78, align 1
  %v3_14e78 = zext i8 %v2_14e78 to i32
  store i32 %v3_14e78, i32* %r3.global-to-local, align 4
  %v7_14e7c = icmp eq i8 %v2_14e78, 10
  store i1 %v7_14e7c, i1* %cpsr_z.global-to-local, align 1
  %v1_14e80 = add i32 %v0_14e78, 1
  store i32 %v1_14e80, i32* %r6.global-to-local, align 4
  %v3_14e84 = inttoptr i32 %v2_14e84 to i8*
  store i8 %v2_14e78, i8* %v3_14e84, align 1
  %v0_14e88 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14e88, label %dec_label_pc_14e8c, label %dec_label_pc_14e98

dec_label_pc_14e8c:                               ; preds = %bb24
  %v0_14e8c = load i32, i32* %r4.global-to-local, align 4
  %v1_14e8c = inttoptr i32 %v0_14e8c to i16*
  %v2_14e8c = load i16, i16* %v1_14e8c, align 2
  %v3_14e8c = zext i16 %v2_14e8c to i32
  store i32 %v3_14e8c, i32* %r3.global-to-local, align 4
  %v1_14e90 = and i32 %v3_14e8c, 256
  %v2_14e90 = icmp eq i32 %v1_14e90, 0
  store i1 %v2_14e90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14e90, label %dec_label_pc_14e98, label %dec_label_pc_14e8c.dec_label_pc_14ea4_crit_edge

dec_label_pc_14e8c.dec_label_pc_14ea4_crit_edge:  ; preds = %dec_label_pc_14e8c
  %v0_14ea8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14ea4

dec_label_pc_14e98:                               ; preds = %dec_label_pc_14e8c, %bb24
  %v0_14e98 = load i32, i32* %r2.global-to-local, align 4
  %v1_14e98 = add i32 %v0_14e98, -1
  store i32 %v1_14e98, i32* %r2.global-to-local, align 4
  %v7_14e98 = icmp eq i32 %v0_14e98, 1
  store i1 %v7_14e98, i1* %cpsr_z.global-to-local, align 1
  %v0_14e9c = load i32, i32* %r1.global-to-local, align 4
  %v1_14e9c = add i32 %v0_14e9c, 1
  store i32 %v1_14e9c, i32* %r1.global-to-local, align 4
  br i1 %v7_14e98, label %dec_label_pc_14e98.dec_label_pc_14ea4_crit_edge, label %bb24

dec_label_pc_14e98.dec_label_pc_14ea4_crit_edge:  ; preds = %dec_label_pc_14e98
  %v0_14ea4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14ea4

dec_label_pc_14ea4:                               ; preds = %dec_label_pc_14e8c.dec_label_pc_14ea4_crit_edge, %dec_label_pc_14e98.dec_label_pc_14ea4_crit_edge
  %v0_14ea8 = phi i32 [ %v1_14e9c, %dec_label_pc_14e98.dec_label_pc_14ea4_crit_edge ], [ %v0_14ea8.pre, %dec_label_pc_14e8c.dec_label_pc_14ea4_crit_edge ]
  %v0_14ea4 = phi i32 [ %v0_14ea4.pre, %dec_label_pc_14e98.dec_label_pc_14ea4_crit_edge ], [ %v0_14e8c, %dec_label_pc_14e8c.dec_label_pc_14ea4_crit_edge ]
  %v1_14ea4 = add i32 %v0_14ea4, 8
  %v2_14ea4 = inttoptr i32 %v1_14ea4 to i32*
  %v3_14ea4 = load i32, i32* %v2_14ea4, align 4
  store i32 %v3_14ea4, i32* %r3.global-to-local, align 4
  %v2_14ea8 = add i32 %v0_14ea4, 16
  %v3_14ea8 = inttoptr i32 %v2_14ea8 to i32*
  store i32 %v0_14ea8, i32* %v3_14ea8, align 4
  %v0_14eac = load i32, i32* %r3.global-to-local, align 4
  %v1_14eac = load i32, i32* %r1.global-to-local, align 4
  %v2_14eac = sub i32 %v1_14eac, %v0_14eac
  store i32 %v2_14eac, i32* %r3.global-to-local, align 4
  %v1_14eb0 = load i32, i32* %r5.global-to-local, align 4
  %v2_14eb0 = sub i32 %v1_14eb0, %v2_14eac
  store i32 %v2_14eb0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_14eb4

dec_label_pc_14eb4:                               ; preds = %dec_label_pc_14e54.dec_label_pc_14eb4_crit_edge, %dec_label_pc_14ea4
  %v0_14eb4 = phi i32 [ %v0_14eb4.pre, %dec_label_pc_14e54.dec_label_pc_14eb4_crit_edge ], [ %v2_14eb0, %dec_label_pc_14ea4 ]
  %v1_14eb4 = load i32, i32* @r7, align 4
  %v2_14eb4 = sub i32 %v1_14eb4, %v0_14eb4
  br label %dec_label_pc_14eb8

dec_label_pc_14e28.dec_label_pc_14eb8.loopexit_crit_edge: ; preds = %dec_label_pc_14e28thread-pre-split
  %v0_14eb8.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_14eb8

dec_label_pc_14eb8:                               ; preds = %dec_label_pc_14e10, %dec_label_pc_14e28.dec_label_pc_14eb8.loopexit_crit_edge, %dec_label_pc_14eb4
  %v0_14eb8 = phi i32 [ %v2_14eb4, %dec_label_pc_14eb4 ], [ %v0_14eb8.pre.pre, %dec_label_pc_14e28.dec_label_pc_14eb8.loopexit_crit_edge ], [ 0, %dec_label_pc_14e10 ]
  %v2_14ebc = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14ebc, i32* %r4.global-to-local, align 4
  ret i32 %v0_14eb8

; uselistorder directives
  uselistorder i32 %v0_14ea4, { 1, 0 }
  uselistorder i32 %v1_14e9c, { 0, 2, 1 }
  uselistorder i32 %v0_14e98, { 1, 0 }
  uselistorder i32 %v1_14e70, { 0, 2, 1 }
  uselistorder i32 %v0_14e70, { 1, 0 }
  uselistorder i32 %v5_14e5c, { 1, 0 }
  uselistorder i32 %v2_14e5c, { 1, 0, 2 }
  uselistorder i32 %v3_14e40, { 2, 3, 0, 1 }
  uselistorder i32 %v0_14e38, { 1, 0 }
  uselistorder i32 %v5_14e4c, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 5, 1, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 3, 4, 1, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 3, 1, 4, 2, 5, 6, 7, 8, 0 }
  uselistorder i32 256, { 245, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 238, 246, 243, 244, 247, 34, 36, 35, 37, 237, 0, 242, 1, 38, 39, 40, 42, 43, 44, 41, 46, 47, 48, 45, 49, 50, 248, 249, 51, 52, 53, 250, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 64, 63, 66, 240, 251, 241, 67, 68, 69, 71, 70, 72, 74, 73, 75, 252, 76, 77, 253, 88, 82, 78, 89, 83, 90, 84, 79, 80, 85, 86, 91, 87, 81, 92, 93, 94, 95, 96, 97, 98, 105, 102, 99, 106, 103, 107, 104, 100, 101, 108, 109, 110, 111, 122, 117, 123, 118, 124, 119, 125, 120, 112, 113, 114, 115, 126, 121, 116, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 143, 140, 144, 141, 145, 142, 137, 138, 139, 146, 147, 148, 149, 150, 160, 161, 155, 151, 162, 156, 163, 157, 152, 158, 164, 159, 153, 154, 165, 166, 167, 168, 169, 170, 175, 173, 171, 176, 174, 172, 177, 239, 254, 178, 180, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 198, 205, 199, 206, 200, 201, 194, 195, 207, 202, 208, 203, 196, 197, 204, 209, 210, 211, 212, 213, 214, 219, 226, 220, 227, 221, 215, 216, 228, 222, 229, 223, 224, 217, 218, 225, 230, 231, 232, 233, 234, 235, 236 }
  uselistorder i8 10, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_ff14, { 2, 1, 0 }
  uselistorder i32 4, { 198, 199, 200, 190, 191, 192, 323, 201, 442, 4, 5, 202, 6, 7, 67, 0, 8, 135, 48, 9, 10, 78, 73, 74, 11, 443, 75, 444, 55, 12, 13, 76, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 14, 462, 463, 464, 465, 466, 467, 54, 468, 469, 470, 471, 472, 473, 15, 16, 77, 474, 203, 89, 204, 17, 205, 90, 206, 207, 208, 209, 136, 210, 211, 212, 213, 214, 215, 18, 193, 194, 195, 196, 19, 197, 475, 137, 91, 476, 20, 477, 138, 139, 56, 384, 385, 386, 387, 388, 389, 140, 141, 21, 390, 391, 392, 393, 394, 395, 396, 397, 142, 382, 383, 353, 354, 355, 356, 357, 358, 359, 360, 361, 22, 362, 363, 364, 398, 23, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 143, 144, 145, 413, 414, 417, 420, 415, 416, 92, 146, 418, 49, 419, 421, 422, 423, 425, 147, 25, 24, 424, 148, 149, 150, 244, 426, 427, 189, 26, 27, 57, 238, 93, 239, 28, 246, 247, 29, 248, 62, 63, 61, 249, 216, 217, 240, 241, 94, 222, 223, 224, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 95, 231, 232, 233, 96, 234, 97, 235, 236, 237, 242, 243, 51, 50, 250, 68, 251, 30, 252, 53, 52, 253, 31, 245, 254, 255, 260, 98, 261, 99, 262, 100, 263, 101, 264, 102, 265, 103, 266, 104, 267, 105, 268, 106, 269, 107, 270, 108, 271, 109, 272, 110, 273, 111, 274, 112, 275, 113, 276, 114, 278, 115, 116, 279, 280, 277, 256, 117, 257, 258, 259, 281, 66, 65, 64, 282, 118, 32, 33, 34, 35, 36, 37, 283, 59, 58, 284, 60, 119, 285, 286, 287, 120, 288, 289, 151, 290, 291, 292, 293, 294, 152, 153, 121, 295, 38, 122, 297, 79, 298, 299, 154, 300, 301, 155, 156, 302, 123, 303, 80, 304, 305, 157, 158, 306, 159, 307, 308, 309, 160, 161, 310, 124, 311, 81, 312, 162, 163, 313, 314, 315, 125, 82, 316, 317, 164, 318, 319, 320, 165, 166, 1, 126, 321, 83, 322, 324, 325, 167, 326, 327, 168, 169, 2, 69, 328, 127, 330, 84, 331, 332, 333, 334, 170, 171, 335, 336, 172, 337, 338, 128, 339, 3, 340, 85, 341, 129, 342, 343, 344, 173, 345, 346, 347, 348, 174, 175, 131, 349, 70, 350, 130, 351, 86, 352, 428, 429, 176, 430, 431, 432, 132, 433, 133, 434, 435, 436, 177, 178, 134, 437, 71, 438, 87, 439, 88, 441, 179, 39, 365, 180, 40, 366, 181, 41, 367, 182, 72, 42, 368, 369, 183, 43, 370, 184, 44, 371, 185, 45, 372, 186, 46, 373, 187, 47, 374, 375, 188, 376, 377, 378, 379, 380, 381, 440, 329, 296 }
  uselistorder i32 2147483647, { 1, 5, 0, 2, 3, 4 }
  uselistorder i32* @r7, { 2, 42, 43, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 41, 3, 44, 45, 46, 4, 47, 48, 49, 12, 50, 51, 5, 52, 53, 54, 55, 56, 57, 6, 58, 59, 60, 61, 62, 63, 27, 28, 33, 34, 35, 36, 29, 30, 31, 32, 37, 38, 39, 40, 283, 284, 120, 121, 238, 239, 15, 285, 286, 287, 292, 293, 7, 64, 65, 240, 241, 242, 243, 244, 245, 246, 247, 248, 199, 200, 201, 202, 203, 204, 249, 250, 251, 252, 253, 254, 255, 256, 8, 257, 258, 259, 260, 261, 152, 153, 86, 87, 122, 88, 89, 173, 174, 154, 155, 90, 91, 262, 263, 290, 291, 92, 93, 94, 95, 264, 265, 288, 289, 127, 128, 205, 206, 266, 267, 14, 268, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 73, 82, 83, 74, 70, 9, 66, 67, 68, 69, 81, 71, 72, 75, 0, 76, 77, 78, 79, 80, 84, 85, 109, 110, 111, 112, 113, 114, 115, 269, 270, 271, 272, 116, 117, 118, 119, 123, 124, 125, 126, 131, 129, 130, 132, 133, 134, 135, 136, 10, 137, 11, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 148, 150, 151, 13, 156, 159, 157, 158, 160, 161, 162, 163, 165, 164, 166, 167, 168, 170, 169, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 1, 193, 190, 191, 192, 194, 195, 196, 197, 198, 277, 273, 274, 275, 276, 278, 279, 280, 281, 282, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_14eb8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14eb4, { 1, 0 }
  uselistorder label %dec_label_pc_14ea4, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_14e30, { 1, 0 }
}

define i32 @function_14ec4(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ec4:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14ec4 = load i32, i32* @r4, align 4
  store i32 %v3_14ec4, i32* %stack_var_-8, align 4
  %v1_14ec8 = add i32 %arg1, 8
  %v1_14ecc = inttoptr i32 %v1_14ec8 to i32*
  %v2_14ecc = load i32, i32* %v1_14ecc, align 4
  %v3_14ecc = add i32 %arg1, 12
  %v4_14ecc = inttoptr i32 %v3_14ecc to i32*
  %v5_14ecc = load i32, i32* %v4_14ecc, align 4
  %v2_14ed0 = sub i32 %v5_14ecc, %v2_14ecc
  store i32 %v2_14ed0, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_14ed8 = inttoptr i32 %arg1 to i16*
  %v4_14ed8 = call i32 @function_14db8(i16* %v3_14ed8, i32 %v2_14ecc, i32 %v2_14ed0)
  %v0_14edc = load i32, i32* @r4, align 4
  %v1_14edc = add i32 %v0_14edc, 8
  %v2_14edc = inttoptr i32 %v1_14edc to i32*
  %v3_14edc = load i32, i32* %v2_14edc, align 4
  store i32 %v3_14edc, i32* %r2.global-to-local, align 4
  %v2_14ee0 = add i32 %v3_14edc, %v4_14ed8
  %v2_14ee4 = add i32 %v0_14edc, 20
  %v3_14ee4 = inttoptr i32 %v2_14ee4 to i32*
  store i32 %v2_14ee0, i32* %v3_14ee4, align 4
  %v0_14ee8 = load i32, i32* %r2.global-to-local, align 4
  %v1_14ee8 = load i32, i32* @r4, align 4
  %v2_14ee8 = add i32 %v1_14ee8, 16
  %v3_14ee8 = inttoptr i32 %v2_14ee8 to i32*
  store i32 %v0_14ee8, i32* %v3_14ee8, align 4
  %v2_14eec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14eec, i32* @r4, align 4
  ret i32 %v4_14ed8

; uselistorder directives
  uselistorder i32 %v4_14ed8, { 1, 0 }
  uselistorder i32 20, { 25, 21, 1, 98, 3, 99, 100, 2, 101, 26, 8, 27, 28, 29, 30, 22, 9, 23, 24, 0, 102, 10, 103, 89, 90, 92, 31, 33, 34, 11, 35, 12, 36, 20, 13, 37, 32, 38, 39, 40, 42, 4, 41, 43, 44, 45, 46, 47, 48, 5, 49, 50, 51, 52, 53, 54, 56, 57, 14, 55, 58, 59, 60, 61, 62, 63, 65, 66, 15, 64, 67, 68, 69, 70, 72, 73, 16, 71, 74, 75, 76, 77, 78, 79, 81, 17, 80, 82, 83, 84, 87, 6, 85, 18, 86, 88, 93, 96, 7, 94, 19, 95, 97, 91 }
  uselistorder i32 12, { 9, 10, 34, 11, 12, 35, 40, 4, 6, 157, 158, 159, 160, 161, 163, 164, 162, 165, 166, 167, 168, 169, 170, 171, 13, 14, 15, 16, 18, 17, 19, 41, 42, 20, 43, 44, 45, 46, 47, 36, 37, 21, 38, 39, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 3, 106, 107, 108, 109, 110, 22, 111, 129, 23, 24, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 148, 141, 142, 143, 144, 145, 146, 147, 149, 150, 25, 151, 63, 64, 49, 67, 68, 51, 26, 52, 65, 53, 54, 48, 50, 27, 55, 28, 56, 29, 57, 58, 59, 60, 61, 62, 66, 69, 70, 71, 5, 72, 73, 74, 75, 77, 78, 79, 30, 80, 31, 81, 83, 82, 76, 152, 84, 32, 85, 86, 87, 88, 89, 90, 91, 92, 33, 93, 94, 95, 7, 96, 97, 98, 99, 100, 101, 8, 102, 103, 104, 105, 153, 154, 155, 156, 0, 1, 2 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @function_14ef4() local_unnamed_addr {
dec_label_pc_14ef4:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14ef4 = load i32, i32* @r4, align 4
  store i32 %v3_14ef4, i32* %stack_var_-12, align 4
  %v0_14ef8 = load i32, i32* @r0, align 4
  %v1_14ef8 = inttoptr i32 %v0_14ef8 to i16*
  %v2_14ef8 = load i16, i16* %v1_14ef8, align 2
  %v3_14ef8 = zext i16 %v2_14ef8 to i32
  store i32 %v3_14ef8, i32* %r3.global-to-local, align 4
  %v0_14efc = load i32, i32* @r1, align 4
  %v2_14efc = and i32 %v0_14efc, %v3_14ef8
  %v4_14efc = icmp eq i32 %v2_14efc, 0
  store i32 %v0_14ef8, i32* @r4, align 4
  br i1 %v4_14efc, label %dec_label_pc_14f0c, label %dec_label_pc_14f1c

dec_label_pc_14f0c:                               ; preds = %dec_label_pc_14ef4
  %v1_14f0c = and i32 %v3_14ef8, 2176
  %v2_14f0c = icmp eq i32 %v1_14f0c, 0
  br i1 %v2_14f0c, label %dec_label_pc_14f14, label %dec_label_pc_14f28

dec_label_pc_14f14:                               ; preds = %dec_label_pc_14f0c
  %v2_14f14 = or i32 %v0_14efc, %v3_14ef8
  store i32 %v2_14f14, i32* %r3.global-to-local, align 4
  %v1_14f18 = trunc i32 %v2_14f14 to i16
  store i16 %v1_14f18, i16* %v1_14ef8, align 2
  %v0_14f1c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14f1c

dec_label_pc_14f1c:                               ; preds = %dec_label_pc_14ef4, %dec_label_pc_14f14
  %v0_14f1c = phi i32 [ %v0_14ef8, %dec_label_pc_14ef4 ], [ %v0_14f1c.pre, %dec_label_pc_14f14 ]
  %v1_14f1c = inttoptr i32 %v0_14f1c to i16*
  %v2_14f1c = load i16, i16* %v1_14f1c, align 2
  %v3_14f1c = zext i16 %v2_14f1c to i32
  store i32 %v3_14f1c, i32* %r3.global-to-local, align 4
  %v1_14f20 = and i32 %v3_14f1c, 16
  store i32 %v1_14f20, i32* %r5.global-to-local, align 4
  %v2_14f20 = icmp eq i32 %v1_14f20, 0
  br i1 %v2_14f20, label %dec_label_pc_14f48, label %dec_label_pc_14f28

dec_label_pc_14f28:                               ; preds = %dec_label_pc_14f0c, %dec_label_pc_14f1c
  %v0_14f28 = call i32 @function_1003c()
  store i32 %v0_14f28, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_14f30 = inttoptr i32 %v0_14f28 to i32*
  store i32 9, i32* %v2_14f30, align 4
  br label %dec_label_pc_14f34

dec_label_pc_14f34:                               ; preds = %dec_label_pc_14f50, %dec_label_pc_14f28
  %v0_14f34 = load i32, i32* @r4, align 4
  %v1_14f34 = inttoptr i32 %v0_14f34 to i16*
  %v2_14f34 = load i16, i16* %v1_14f34, align 2
  %v3_14f34 = zext i16 %v2_14f34 to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_14f3c = or i32 %v3_14f34, 8
  store i32 %v1_14f3c, i32* %r3.global-to-local, align 4
  %v1_14f40 = trunc i32 %v1_14f3c to i16
  store i16 %v1_14f40, i16* %v1_14f34, align 2
  %v1_14f88.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14f80

dec_label_pc_14f48:                               ; preds = %dec_label_pc_14f1c
  %v1_14f48 = and i32 %v3_14f1c, 64
  %v2_14f48 = icmp eq i32 %v1_14f48, 0
  br i1 %v2_14f48, label %dec_label_pc_14f70, label %dec_label_pc_14f50

dec_label_pc_14f50:                               ; preds = %dec_label_pc_14f48
  %v0_14f50 = load i32, i32* @r0, align 4
  %v1_14f50 = call i32 @function_13808(i32 %v0_14f50)
  store i32 %v1_14f50, i32* %r0.global-to-local, align 4
  %v2_14f54 = icmp eq i32 %v1_14f50, 0
  br i1 %v2_14f54, label %dec_label_pc_14f5c, label %dec_label_pc_14f34

dec_label_pc_14f5c:                               ; preds = %dec_label_pc_14f50
  %v0_14f5c = load i32, i32* @r4, align 4
  %v1_14f5c = inttoptr i32 %v0_14f5c to i16*
  %v2_14f5c = load i16, i16* %v1_14f5c, align 2
  %v3_14f5c = zext i16 %v2_14f5c to i32
  store i32 %v3_14f5c, i32* %r3.global-to-local, align 4
  %v1_14f60 = add i32 %v0_14f5c, 8
  %v2_14f60 = inttoptr i32 %v1_14f60 to i32*
  %v3_14f60 = load i32, i32* %v2_14f60, align 4
  %v1_14f64 = and i32 %v3_14f5c, 65471
  store i32 %v1_14f64, i32* %r3.global-to-local, align 4
  %v2_14f68 = add i32 %v0_14f5c, 28
  %v3_14f68 = inttoptr i32 %v2_14f68 to i32*
  store i32 %v3_14f60, i32* %v3_14f68, align 4
  %v0_14f6c = load i32, i32* %r3.global-to-local, align 4
  %v1_14f6c = trunc i32 %v0_14f6c to i16
  %v2_14f6c = load i32, i32* @r4, align 4
  %v3_14f6c = inttoptr i32 %v2_14f6c to i16*
  store i16 %v1_14f6c, i16* %v3_14f6c, align 2
  %v0_14f70.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14f70

dec_label_pc_14f70:                               ; preds = %dec_label_pc_14f48, %dec_label_pc_14f5c
  %v2_14f78 = phi i32 [ %v0_14f1c, %dec_label_pc_14f48 ], [ %v0_14f70.pre, %dec_label_pc_14f5c ]
  %v1_14f70 = inttoptr i32 %v2_14f78 to i16*
  %v2_14f70 = load i16, i16* %v1_14f70, align 2
  %v3_14f70 = zext i16 %v2_14f70 to i32
  %v1_14f74 = or i32 %v3_14f70, 1
  store i32 %v1_14f74, i32* %r3.global-to-local, align 4
  %v1_14f78 = trunc i32 %v1_14f74 to i16
  store i16 %v1_14f78, i16* %v1_14f70, align 2
  %v0_14f7c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_14f7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14f80

dec_label_pc_14f80:                               ; preds = %dec_label_pc_14f34, %dec_label_pc_14f70
  %v1_14f88 = phi i32 [ %v1_14f88.pre, %dec_label_pc_14f34 ], [ %v0_14f7c, %dec_label_pc_14f70 ]
  %v2_14f84 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14f84, i32* @r4, align 4
  ret i32 %v1_14f88

; uselistorder directives
  uselistorder i32 %v3_14ef8, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 28, { 17, 16, 39, 7, 8, 18, 19, 20, 11, 12, 13, 14, 36, 37, 38, 0, 21, 1, 22, 2, 23, 3, 24, 4, 25, 5, 26, 6, 27, 9, 15, 29, 28, 30, 31, 32, 33, 34, 35, 10 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_13808, { 2, 1, 0 }
  uselistorder i32 64, { 9, 8, 10, 11, 12, 43, 13, 14, 15, 2, 16, 17, 18, 3, 19, 20, 21, 22, 4, 23, 24, 25, 5, 26, 27, 28, 6, 29, 30, 31, 0, 32, 33, 34, 35, 36, 7, 37, 38, 39, 40, 41, 1, 42 }
  uselistorder i32 8, { 95, 96, 97, 98, 99, 100, 101, 87, 88, 89, 90, 167, 102, 35, 36, 33, 34, 24, 25, 30, 31, 37, 251, 252, 38, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 103, 104, 105, 106, 107, 108, 109, 27, 110, 111, 112, 113, 114, 115, 116, 117, 118, 91, 92, 93, 94, 43, 270, 271, 197, 198, 199, 200, 201, 202, 203, 204, 6, 78, 205, 206, 207, 208, 209, 210, 211, 212, 7, 183, 184, 185, 186, 187, 188, 189, 190, 213, 214, 215, 216, 217, 8, 218, 219, 9, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 237, 230, 231, 232, 233, 79, 22, 234, 235, 236, 80, 81, 10, 238, 239, 240, 241, 243, 244, 82, 11, 245, 12, 242, 44, 85, 28, 13, 14, 21, 15, 45, 123, 16, 17, 18, 124, 46, 119, 47, 120, 48, 121, 49, 122, 86, 32, 125, 126, 127, 23, 26, 129, 19, 50, 130, 51, 131, 52, 132, 53, 133, 54, 134, 55, 135, 56, 136, 57, 137, 58, 138, 59, 139, 60, 140, 61, 141, 62, 142, 63, 143, 64, 144, 65, 145, 66, 146, 67, 147, 68, 148, 69, 149, 70, 150, 71, 151, 72, 152, 73, 153, 74, 154, 75, 155, 156, 128, 157, 84, 39, 158, 159, 160, 161, 162, 29, 163, 164, 165, 166, 3, 168, 169, 170, 4, 171, 172, 173, 174, 175, 176, 177, 5, 178, 179, 180, 181, 182, 246, 247, 248, 249, 250, 191, 40, 192, 41, 193, 42, 194, 76, 195, 83, 20, 196, 77, 0, 1, 2 }
  uselistorder i32 9, { 1, 23, 17, 18, 2, 22, 47, 48, 3, 29, 6, 26, 7, 27, 8, 28, 24, 4, 5, 25, 19, 30, 0, 20, 31, 21, 9, 32, 10, 33, 11, 34, 12, 35, 13, 14, 15, 49, 36, 37, 16, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51 }
  uselistorder i32 16, { 88, 89, 90, 80, 81, 82, 83, 84, 91, 21, 29, 30, 31, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 92, 93, 94, 95, 96, 2, 1, 22, 42, 43, 44, 45, 99, 46, 100, 97, 98, 47, 48, 101, 8, 49, 50, 102, 103, 51, 52, 104, 105, 85, 86, 53, 87, 54, 55, 56, 57, 58, 59, 174, 175, 176, 177, 60, 179, 3, 61, 180, 181, 0, 182, 183, 62, 9, 20, 10, 11, 4, 12, 13, 63, 108, 64, 106, 109, 107, 112, 113, 114, 32, 79, 65, 66, 14, 76, 15, 16, 67, 110, 111, 35, 34, 33, 115, 36, 116, 37, 68, 184, 69, 117, 118, 70, 119, 71, 120, 72, 121, 122, 123, 23, 124, 125, 126, 127, 128, 129, 130, 24, 131, 132, 133, 73, 134, 74, 38, 135, 136, 25, 137, 138, 17, 139, 140, 5, 39, 141, 142, 143, 26, 144, 145, 146, 147, 148, 6, 40, 149, 150, 151, 77, 18, 78, 152, 27, 153, 154, 155, 19, 28, 156, 75, 157, 158, 7, 41, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 170, 172, 173, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 195, 197, 198, 178 }
  uselistorder i32* @r1, { 18, 15, 16, 40, 19, 20, 21, 22, 1, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 2, 79, 80, 23, 24, 25, 26, 0, 14, 17, 9, 27, 3, 51, 45, 46, 4, 52, 5, 31, 32, 12, 41, 53, 54, 7, 11, 55, 56, 8, 57, 10, 33, 28, 29, 30, 34, 58, 59, 60, 6, 35, 36, 37, 38, 39, 42, 43, 44, 61, 47, 48, 49, 50, 13 }
  uselistorder label %dec_label_pc_14f80, { 1, 0 }
  uselistorder label %dec_label_pc_14f70, { 1, 0 }
  uselistorder label %dec_label_pc_14f28, { 1, 0 }
  uselistorder label %dec_label_pc_14f1c, { 1, 0 }
}

define i32 @function_14f8c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14f8c:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_14f8c = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_14f9c = call i32 @function_100a0()
  %v0_14fa0 = load i32, i32* @r5, align 4
  %v1_14fa0 = load i32, i32* @r4, align 4
  %v2_14fa0 = add i32 %v1_14fa0, %v0_14fa0
  store i32 %v6_14f8c, i32* @r5, align 4
  ret i32 %v2_14fa0

; uselistorder directives
  uselistorder i32 ()* @function_100a0, { 7, 3, 6, 0, 2, 1, 5, 4 }
  uselistorder i32* @r5, { 51, 52, 53, 54, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 55, 6, 56, 57, 58, 574, 575, 576, 59, 25, 60, 0, 61, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 24, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 27, 28, 84, 85, 86, 87, 88, 89, 7, 90, 91, 92, 93, 94, 95, 96, 8, 97, 98, 99, 11, 100, 101, 9, 102, 103, 104, 105, 106, 107, 10, 108, 109, 110, 111, 112, 113, 41, 12, 42, 43, 44, 45, 26, 29, 13, 46, 47, 48, 49, 50, 589, 14, 590, 591, 599, 114, 115, 116, 117, 118, 119, 120, 592, 593, 594, 595, 596, 597, 598, 121, 122, 123, 124, 498, 499, 503, 504, 505, 506, 507, 500, 501, 502, 461, 462, 463, 15, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 508, 509, 532, 16, 533, 534, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 2, 523, 524, 525, 526, 527, 17, 528, 529, 530, 531, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 133, 134, 153, 219, 125, 154, 155, 156, 157, 158, 135, 136, 126, 127, 128, 130, 131, 129, 132, 18, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 159, 160, 161, 162, 163, 164, 165, 220, 221, 222, 4, 3, 223, 224, 225, 226, 227, 228, 229, 23, 230, 231, 232, 233, 234, 235, 236, 242, 243, 244, 245, 246, 247, 237, 238, 239, 240, 241, 535, 536, 537, 538, 539, 540, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 1, 267, 268, 269, 19, 270, 20, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 295, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 316, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 21, 329, 330, 331, 332, 333, 334, 335, 5, 337, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 352, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 383, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 22, 413, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 439, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 541, 542, 543, 544, 545, 552, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497 }
  uselistorder i32* @r2, { 7, 8, 9, 10, 0, 25, 2, 26, 27, 28, 11, 12, 13, 14, 15, 16, 29, 34, 35, 36, 37, 1, 38, 30, 31, 3, 4, 21, 22, 5, 23, 6, 32, 33, 24, 20, 17, 18, 19 }
}

define i32 @function_14fb0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14fb0:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14ff0, label %dec_label_pc_14fdc

dec_label_pc_14fdc:                               ; preds = %dec_label_pc_14fb0
  %v0_14fdc = call i32 @function_1003c()
  %v0_14fe0 = load i32, i32* %r4.global-to-local, align 4
  %v1_14fe0 = sub i32 0, %v0_14fe0
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_14fe8 = inttoptr i32 %v0_14fdc to i32*
  store i32 %v1_14fe0, i32* %v2_14fe8, align 4
  %v0_14ff8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14ff8

dec_label_pc_14ff0:                               ; preds = %dec_label_pc_14fb0
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %v2_14ff0 = icmp eq i32 %arg1, 0
  br i1 %v2_14ff0, label %dec_label_pc_15004, label %dec_label_pc_14ff8

dec_label_pc_14ff8:                               ; preds = %dec_label_pc_14ff0, %dec_label_pc_14fdc
  %v0_14ff8 = phi i32 [ %arg1, %dec_label_pc_14ff0 ], [ %v0_14ff8.pre, %dec_label_pc_14fdc ]
  br label %dec_label_pc_15008

dec_label_pc_15004:                               ; preds = %dec_label_pc_14ff0
  br label %dec_label_pc_15008

dec_label_pc_15008:                               ; preds = %dec_label_pc_14ff8, %dec_label_pc_15004
  %v1_15010 = phi i32 [ %v0_14ff8, %dec_label_pc_14ff8 ], [ %tmp8, %dec_label_pc_15004 ]
  ret i32 %v1_15010

; uselistorder directives
  uselistorder i32 -1, { 219, 227, 142, 220, 221, 222, 93, 223, 224, 94, 226, 64, 65, 66, 67, 141, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 143, 144, 0, 145, 130, 228, 229, 146, 95, 230, 147, 1, 68, 231, 232, 133, 233, 148, 3, 2, 149, 150, 4, 225, 151, 96, 288, 97, 98, 253, 99, 262, 84, 263, 100, 218, 101, 264, 265, 5, 152, 153, 154, 266, 155, 6, 156, 7, 157, 134, 267, 11, 158, 159, 10, 12, 268, 9, 160, 161, 69, 8, 162, 70, 71, 72, 73, 163, 164, 165, 80, 237, 238, 13, 239, 102, 269, 103, 104, 270, 105, 257, 106, 259, 107, 240, 108, 254, 109, 110, 241, 111, 260, 112, 258, 113, 242, 83, 114, 271, 115, 290, 116, 243, 117, 244, 118, 245, 119, 234, 120, 292, 121, 272, 122, 289, 123, 255, 124, 246, 125, 126, 127, 291, 166, 78, 81, 14, 15, 82, 79, 131, 132, 167, 18, 168, 19, 169, 247, 170, 171, 74, 20, 172, 173, 174, 175, 176, 177, 178, 17, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 235, 128, 236, 21, 199, 200, 87, 88, 85, 86, 16, 201, 202, 203, 22, 204, 91, 92, 89, 90, 205, 23, 206, 129, 248, 75, 24, 25, 140, 28, 136, 249, 135, 250, 27, 137, 251, 26, 29, 30, 138, 252, 31, 32, 33, 34, 35, 207, 36, 76, 37, 38, 39, 40, 208, 41, 139, 256, 42, 43, 209, 44, 45, 46, 47, 210, 48, 211, 49, 50, 51, 212, 52, 53, 213, 54, 55, 56, 57, 58, 214, 59, 60, 61, 215, 62, 63, 77, 216, 217, 261 }
  uselistorder i32 ()* @function_1003c, { 28, 54, 27, 26, 60, 55, 32, 53, 52, 31, 30, 59, 58, 57, 56, 5, 4, 21, 36, 17, 29, 16, 15, 14, 20, 11, 13, 12, 50, 49, 10, 9, 8, 25, 23, 48, 35, 47, 46, 22, 24, 45, 7, 2, 44, 43, 42, 51, 0, 6, 3, 33, 41, 19, 40, 1, 39, 38, 37, 34, 18 }
  uselistorder i32 1, { 251, 250, 687, 530, 355, 356, 357, 531, 87, 688, 689, 690, 532, 46, 48, 47, 49, 44, 51, 45, 50, 533, 53, 52, 54, 534, 57, 58, 55, 61, 59, 56, 60, 535, 323, 319, 322, 318, 320, 324, 317, 321, 325, 316, 536, 248, 232, 231, 366, 382, 367, 853, 854, 855, 856, 377, 275, 538, 537, 276, 277, 691, 539, 369, 948, 370, 692, 949, 693, 694, 695, 697, 696, 359, 540, 699, 698, 700, 701, 678, 679, 680, 681, 682, 683, 684, 950, 4, 5, 6, 7, 951, 371, 952, 953, 954, 955, 956, 957, 675, 958, 959, 960, 961, 962, 963, 676, 524, 542, 541, 345, 346, 354, 350, 348, 347, 349, 351, 353, 352, 705, 702, 703, 704, 381, 372, 114, 111, 112, 113, 115, 414, 706, 707, 708, 709, 543, 525, 116, 117, 710, 546, 545, 544, 235, 238, 236, 239, 240, 241, 237, 415, 711, 548, 547, 292, 295, 293, 290, 291, 294, 712, 549, 105, 104, 103, 713, 714, 550, 136, 135, 551, 22, 416, 685, 125, 126, 715, 716, 717, 718, 417, 719, 720, 721, 373, 554, 553, 552, 336, 335, 340, 338, 337, 339, 722, 723, 724, 556, 555, 127, 128, 418, 725, 557, 118, 726, 727, 728, 729, 730, 419, 558, 39, 42, 41, 40, 43, 420, 62, 686, 559, 101, 421, 560, 211, 385, 422, 561, 244, 242, 243, 562, 218, 217, 216, 166, 563, 210, 209, 252, 564, 124, 565, 130, 129, 566, 567, 96, 97, 568, 141, 140, 569, 86, 570, 195, 196, 964, 423, 965, 424, 571, 82, 78, 83, 81, 79, 84, 85, 80, 133, 425, 138, 137, 572, 296, 297, 23, 361, 731, 732, 733, 573, 815, 576, 575, 574, 134, 577, 966, 378, 426, 579, 578, 580, 249, 895, 898, 899, 900, 581, 327, 332, 333, 331, 330, 334, 328, 329, 901, 902, 903, 904, 582, 307, 313, 306, 312, 311, 305, 315, 314, 309, 303, 308, 304, 310, 896, 897, 427, 121, 120, 119, 122, 881, 428, 882, 883, 884, 885, 886, 583, 64, 65, 63, 66, 215, 214, 905, 906, 907, 908, 909, 910, 386, 911, 912, 913, 914, 915, 916, 917, 918, 430, 919, 920, 921, 922, 923, 429, 924, 925, 926, 927, 928, 584, 280, 282, 278, 281, 284, 286, 287, 288, 289, 283, 285, 279, 208, 207, 431, 432, 761, 364, 588, 587, 586, 585, 205, 67, 374, 167, 589, 213, 212, 98, 590, 233, 591, 200, 592, 21, 593, 108, 594, 77, 76, 106, 595, 100, 99, 596, 36, 597, 35, 34, 598, 225, 599, 929, 930, 19, 20, 600, 601, 70, 69, 602, 75, 603, 123, 604, 38, 37, 605, 132, 131, 74, 73, 606, 199, 198, 607, 165, 164, 608, 71, 609, 110, 109, 107, 610, 341, 234, 611, 612, 72, 358, 931, 326, 817, 375, 818, 376, 819, 614, 613, 343, 342, 344, 932, 933, 379, 0, 360, 413, 934, 13, 12, 14, 15, 752, 753, 754, 433, 762, 68, 935, 102, 764, 763, 765, 17, 16, 18, 936, 615, 937, 616, 204, 203, 202, 201, 938, 617, 224, 223, 222, 221, 434, 755, 435, 756, 388, 757, 380, 446, 758, 766, 387, 767, 739, 447, 448, 740, 735, 437, 734, 736, 737, 738, 440, 438, 365, 741, 439, 742, 743, 441, 744, 745, 444, 746, 747, 442, 748, 749, 443, 750, 751, 445, 759, 768, 769, 770, 449, 771, 772, 773, 450, 774, 677, 777, 776, 436, 775, 778, 779, 451, 780, 781, 782, 452, 783, 453, 784, 454, 785, 455, 786, 456, 787, 457, 788, 458, 789, 459, 790, 460, 791, 461, 792, 462, 793, 463, 794, 464, 795, 465, 796, 466, 797, 467, 798, 468, 799, 469, 800, 470, 801, 808, 809, 362, 471, 526, 628, 627, 626, 625, 624, 623, 622, 527, 621, 620, 619, 618, 25, 24, 26, 30, 32, 31, 33, 29, 28, 27, 802, 803, 472, 804, 805, 473, 806, 807, 181, 180, 179, 185, 182, 183, 184, 178, 177, 474, 475, 630, 629, 300, 301, 298, 299, 302, 939, 632, 631, 264, 265, 263, 262, 261, 266, 760, 206, 478, 389, 810, 811, 390, 812, 476, 477, 479, 813, 814, 480, 481, 482, 483, 484, 485, 486, 645, 644, 643, 642, 641, 640, 639, 638, 637, 636, 529, 635, 634, 633, 8, 10, 11, 9, 487, 363, 488, 646, 491, 490, 489, 816, 647, 528, 142, 143, 492, 493, 494, 940, 391, 392, 941, 1, 2, 3, 820, 821, 822, 368, 383, 384, 823, 824, 825, 826, 827, 496, 828, 495, 829, 497, 830, 831, 832, 651, 650, 649, 648, 146, 145, 149, 150, 152, 151, 144, 148, 147, 834, 835, 836, 498, 499, 653, 652, 227, 229, 230, 226, 228, 837, 838, 500, 839, 840, 841, 842, 501, 843, 502, 394, 393, 503, 844, 654, 255, 256, 258, 257, 253, 254, 845, 504, 846, 397, 395, 396, 656, 655, 259, 260, 847, 848, 849, 505, 850, 506, 507, 851, 398, 852, 657, 89, 92, 93, 95, 94, 88, 91, 90, 857, 858, 859, 508, 860, 509, 400, 399, 510, 862, 511, 863, 658, 188, 191, 192, 194, 193, 186, 190, 189, 187, 864, 865, 866, 867, 868, 869, 512, 870, 513, 871, 514, 405, 404, 515, 872, 401, 873, 402, 874, 403, 875, 664, 663, 662, 661, 660, 659, 153, 156, 157, 159, 158, 154, 155, 876, 877, 878, 516, 408, 407, 517, 879, 406, 880, 665, 268, 272, 273, 274, 267, 271, 270, 269, 942, 943, 944, 518, 411, 410, 519, 945, 409, 946, 670, 669, 668, 667, 666, 169, 173, 174, 175, 176, 168, 172, 171, 170, 887, 412, 520, 671, 245, 246, 247, 888, 889, 521, 892, 522, 523, 890, 891, 893, 894, 162, 163, 160, 161, 947, 672, 197, 861, 219, 833, 220, 673, 674, 139 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_15008, { 1, 0 }
}

define i32 @function_15014() local_unnamed_addr {
entry:
  %v3_15018 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_15018)
  %v31_15020 = load i32, i32* @r0, align 4
  ret i32 %v31_15020

; uselistorder directives
  uselistorder i32* @r0, { 29, 18, 19, 62, 56, 57, 130, 25, 4, 5, 166, 6, 10, 7, 63, 0, 64, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 1, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 65, 24, 54, 55, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 8, 22, 58, 59, 60, 61, 16, 20, 14, 23, 15, 193, 195, 196, 46, 47, 48, 51, 52, 53, 49, 50, 11, 17, 80, 81, 194, 82, 146, 27, 44, 45, 147, 2, 148, 149, 150, 145, 137, 41, 138, 139, 140, 42, 141, 142, 28, 158, 159, 151, 152, 153, 154, 155, 156, 157, 87, 88, 12, 89, 143, 13, 21, 26, 160, 161, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 85, 113, 34, 83, 84, 86, 114, 116, 117, 118, 119, 120, 121, 115, 35, 36, 9, 37, 38, 122, 39, 40, 123, 124, 162, 163, 3, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 164, 165, 144, 43, 132, 31, 33, 30, 32 }
  uselistorder void (i32)* @__pseudo_branch, { 0, 56, 57, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 1, 2, 3, 4, 5, 6, 62, 63, 64, 65, 58, 45, 59, 60, 61, 66, 67, 68, 46, 47, 48, 41, 42, 43, 49, 53, 54, 50, 51, 52, 44, 55 }
  uselistorder i32 0, { 417, 418, 441, 442, 443, 444, 445, 74, 446, 447, 448, 0, 449, 222, 40, 450, 255, 451, 452, 453, 242, 243, 419, 420, 101, 421, 422, 244, 423, 424, 425, 439, 1, 75, 76, 698, 699, 700, 701, 102, 103, 702, 454, 104, 77, 860, 861, 862, 223, 455, 456, 457, 224, 863, 41, 225, 864, 865, 58, 34, 35, 458, 49, 2, 67, 68, 459, 50, 51, 52, 460, 461, 866, 867, 53, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 873, 874, 885, 886, 887, 888, 889, 890, 891, 892, 25, 893, 894, 895, 896, 897, 26, 898, 899, 900, 27, 901, 902, 903, 28, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 930, 931, 932, 933, 934, 935, 936, 928, 929, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 29, 947, 948, 949, 950, 951, 30, 952, 953, 954, 955, 956, 31, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 105, 462, 398, 463, 464, 465, 466, 467, 256, 257, 468, 469, 78, 79, 80, 470, 471, 475, 472, 473, 474, 226, 233, 476, 477, 81, 106, 480, 478, 479, 227, 481, 82, 482, 483, 3, 4, 83, 484, 411, 412, 258, 413, 485, 486, 487, 42, 43, 488, 489, 490, 107, 491, 492, 493, 494, 495, 259, 496, 497, 498, 499, 500, 501, 84, 502, 503, 504, 505, 5, 6, 108, 110, 506, 109, 507, 111, 508, 85, 509, 514, 515, 510, 511, 512, 517, 518, 519, 112, 520, 521, 522, 523, 524, 513, 516, 525, 86, 426, 427, 428, 113, 414, 415, 114, 429, 433, 434, 435, 436, 115, 245, 116, 235, 236, 260, 430, 117, 431, 432, 87, 437, 972, 973, 745, 628, 765, 440, 766, 767, 768, 118, 769, 416, 438, 88, 119, 974, 975, 770, 771, 261, 979, 980, 262, 981, 982, 120, 229, 983, 984, 263, 44, 985, 986, 264, 993, 996, 389, 228, 997, 265, 994, 995, 976, 977, 399, 121, 212, 526, 528, 527, 122, 529, 530, 531, 266, 532, 69, 629, 63, 630, 124, 123, 631, 978, 89, 268, 269, 988, 267, 90, 397, 91, 125, 777, 778, 779, 780, 781, 126, 782, 783, 784, 785, 786, 787, 788, 127, 772, 270, 773, 774, 271, 775, 776, 92, 746, 272, 128, 747, 748, 749, 750, 751, 93, 136, 134, 129, 132, 130, 133, 138, 137, 131, 135, 789, 790, 814, 815, 94, 791, 792, 142, 140, 141, 793, 794, 148, 147, 99, 139, 795, 796, 797, 798, 799, 800, 238, 237, 246, 273, 801, 802, 803, 45, 804, 144, 143, 145, 146, 98, 805, 806, 230, 807, 808, 70, 809, 810, 811, 812, 813, 7, 8, 555, 556, 46, 95, 9, 247, 274, 816, 817, 818, 668, 717, 557, 632, 558, 559, 718, 669, 560, 703, 819, 989, 561, 562, 563, 533, 992, 820, 987, 634, 564, 752, 565, 275, 990, 64, 991, 10, 821, 822, 65, 823, 824, 825, 826, 827, 149, 828, 390, 400, 391, 392, 829, 401, 150, 36, 151, 276, 566, 831, 830, 832, 833, 834, 835, 32, 152, 836, 837, 838, 153, 59, 60, 253, 254, 546, 155, 154, 156, 567, 157, 568, 569, 158, 839, 840, 277, 159, 570, 160, 161, 841, 162, 842, 163, 164, 571, 165, 572, 573, 574, 578, 538, 547, 548, 550, 534, 61, 37, 215, 216, 535, 549, 536, 402, 537, 539, 403, 540, 404, 541, 405, 542, 406, 543, 407, 544, 408, 545, 551, 552, 278, 553, 66, 575, 388, 576, 279, 577, 232, 231, 579, 580, 581, 582, 167, 166, 583, 584, 585, 409, 213, 586, 56, 57, 214, 587, 54, 55, 280, 589, 590, 393, 591, 592, 593, 594, 595, 281, 596, 597, 598, 100, 396, 599, 600, 601, 395, 602, 603, 282, 604, 605, 608, 609, 610, 168, 606, 169, 607, 12, 11, 170, 588, 843, 844, 394, 554, 611, 283, 612, 614, 171, 615, 616, 617, 618, 619, 620, 621, 173, 172, 622, 284, 623, 285, 624, 286, 613, 625, 239, 626, 287, 627, 308, 309, 288, 633, 289, 174, 175, 47, 176, 635, 636, 71, 72, 48, 637, 177, 178, 217, 638, 180, 639, 181, 179, 290, 640, 641, 643, 642, 644, 182, 645, 646, 248, 647, 648, 649, 183, 184, 650, 185, 652, 186, 653, 187, 654, 655, 62, 656, 657, 188, 658, 659, 660, 189, 662, 190, 218, 663, 661, 664, 665, 666, 191, 667, 670, 193, 672, 673, 192, 671, 674, 96, 292, 293, 675, 676, 294, 295, 677, 291, 678, 679, 194, 680, 681, 195, 196, 682, 683, 97, 684, 685, 13, 14, 15, 16, 686, 687, 197, 250, 688, 689, 296, 690, 297, 691, 298, 692, 299, 693, 300, 694, 301, 695, 249, 696, 302, 697, 704, 705, 198, 707, 708, 199, 219, 709, 706, 710, 711, 712, 17, 18, 19, 713, 200, 716, 719, 720, 38, 721, 201, 722, 723, 202, 220, 725, 724, 303, 726, 728, 729, 730, 304, 731, 20, 21, 22, 727, 23, 24, 732, 203, 733, 734, 204, 737, 738, 739, 221, 740, 735, 736, 742, 741, 743, 205, 744, 845, 846, 206, 848, 849, 850, 207, 305, 852, 851, 847, 854, 855, 853, 856, 208, 859, 240, 753, 306, 754, 39, 755, 73, 756, 757, 758, 241, 759, 307, 760, 761, 762, 33, 234, 763, 764, 857, 209, 858, 714, 210, 715, 211, 651, 251, 410, 252, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012 }
  uselistorder i32* @r4, { 30, 55, 56, 57, 4, 58, 59, 60, 5, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 37, 38, 39, 40, 41, 71, 72, 73, 74, 75, 76, 77, 78, 79, 636, 637, 80, 81, 6, 1, 82, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 7, 83, 84, 85, 86, 87, 88, 89, 90, 91, 8, 92, 93, 96, 97, 98, 99, 31, 100, 101, 102, 103, 104, 105, 94, 95, 32, 33, 106, 107, 9, 108, 10, 109, 11, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 12, 130, 131, 132, 13, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 42, 43, 44, 45, 34, 35, 36, 46, 47, 48, 3, 49, 50, 51, 52, 53, 54, 545, 546, 654, 655, 656, 547, 548, 660, 665, 666, 667, 668, 669, 670, 671, 657, 145, 146, 147, 276, 277, 278, 658, 659, 661, 664, 148, 149, 150, 151, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 14, 566, 567, 568, 569, 550, 551, 552, 553, 484, 485, 486, 487, 488, 489, 490, 491, 492, 15, 493, 494, 495, 496, 497, 498, 499, 500, 501, 570, 592, 593, 594, 595, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 28, 584, 585, 0, 586, 587, 588, 589, 590, 591, 176, 177, 178, 662, 663, 596, 597, 433, 434, 598, 16, 599, 600, 179, 180, 181, 601, 602, 603, 604, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 182, 183, 184, 185, 174, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 175, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 248, 249, 250, 2, 251, 242, 243, 244, 245, 246, 247, 200, 201, 605, 606, 607, 608, 609, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 295, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 17, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 18, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 19, 367, 20, 368, 21, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 22, 395, 23, 396, 24, 397, 25, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 26, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 610, 611, 612, 613, 27, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 632, 633, 634, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 537, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 629, 630, 631, 414, 29, 635 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i16* @__decompiler_undefined_function_1() local_unnamed_addr

declare i16 @__decompiler_undefined_function_2() local_unnamed_addr

declare i8 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #0

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #0

attributes #0 = { nounwind readnone }
