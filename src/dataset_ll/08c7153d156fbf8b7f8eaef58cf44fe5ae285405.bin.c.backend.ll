source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1e8b8.5 = global i32 0
@global_var_1e8c8.6 = global i32* @global_var_1e8b8.5
@global_var_1ea28.12 = global i32 0
@global_var_f430.18 = constant i32 -382906384
@global_var_15d7c.21 = constant [4 x i8] c"GET\00"
@1 = constant i32 47
@global_var_134b0.25 = constant i32 -382910448
@global_var_15d74.27 = constant i32 32
@global_var_15d4c.29 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_15d64.31 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_15d70.33 = constant [3 x i8] c"\0D\0A\00"
@global_var_15d84.35 = constant [9 x i8] c"Cookie: \00"
@global_var_15d90.37 = constant [3 x i8] c"; \00"
@global_var_15d94.39 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_15d9c.41 = constant i32 59
@global_var_15da0.43 = constant [5 x i8] c"http\00"
@global_var_15da8.45 = constant [5 x i8] c"url=\00"
@global_var_15db0.47 = constant [5 x i8] c"POST\00"
@global_var_12b18.48 = constant i32 -439275520
@global_var_15db8.50 = constant i32 39
@global_var_15dbc.52 = constant i32 61
@global_var_1ea44.56 = global i32 0
@global_var_a0cc.57 = constant i32 -352321546
@global_var_1410c.58 = constant i32 -481296384
@global_var_1ea48.60 = global i32 0
@global_var_1ea4c.61 = local_unnamed_addr global i32 0
@global_var_d7d0.67 = constant i32 -382906384
@global_var_dc94.69 = constant i32 -382906384
@global_var_ce5c.71 = constant i32 -382906384
@global_var_c718.73 = constant i32 -382906384
@global_var_bfa4.75 = constant i32 -382906384
@global_var_b728.77 = constant i32 -382906384
@global_var_b00c.79 = constant i32 -382906384
@global_var_a890.81 = constant i32 -382906384
@global_var_81cc.83 = constant i32 -382906384
@global_var_1eafc.85 = global i32 0
@global_var_1eb04.96 = global i32 0
@global_var_15dc0.98 = constant [14 x i8] c"/proc/net/tcp\00"
@global_var_1ea68.102 = global i32 0
@global_var_1eb00.104 = global i32 0
@global_var_f3a0.106 = constant i32 -382910352
@global_var_1e8d4.108 = global i32 77224
@global_var_1e8cc.110 = global i32 -1
@global_var_1eb0c.116 = local_unnamed_addr global i32 0
@global_var_1eb0b.117 = local_unnamed_addr global i32 0
@global_var_1eb0a.118 = local_unnamed_addr global i32 0
@global_var_f218.120 = constant i32 -442556408
@global_var_15dd0.122 = constant [14 x i8] c"/dev/watchdog\00"
@global_var_1eb09.127 = local_unnamed_addr global i32 0
@global_var_15df4.129 = constant i32 10
@global_var_15de0.131 = constant [19 x i8] c"/dev/misc/watchdog\00"
@global_var_1e8d0.133 = global i32 -1
@global_var_12da8.138 = constant i32 -382910224
@global_var_15df8.140 = constant i32 16777216
@global_var_1ea70.142 = global i32 0
@global_var_1ea7c.144 = global i32 0
@global_var_1ea74.146 = global i32 0
@global_var_1ea78.148 = global i32 0
@global_var_15e00.154 = constant [33 x i8] c"abcdefghijklmnopqrstuvw012345678\00"
@global_var_10358.163 = constant i32 -442695668
@global_var_1eb20.165 = global i32 0
@global_var_1eab4.167 = global i32 0
@global_var_1ea80.169 = global i32 0
@global_var_1eaac.171 = global i32 0
@global_var_1eb18.179 = global i32 0
@global_var_1eb1c.181 = global i32 0
@global_var_1ea87.184 = local_unnamed_addr global i32 0
@global_var_1ea86.185 = local_unnamed_addr global i32 0
@global_var_1ea98.187 = global i32 0
@global_var_1ea8c.189 = local_unnamed_addr global i32 0
@global_var_1ea89.190 = local_unnamed_addr global i32 0
@global_var_1ea99.191 = local_unnamed_addr global i32 0
@global_var_1ea9b.192 = local_unnamed_addr global i32 0
@global_var_1ea8d.193 = local_unnamed_addr global i32 0
@global_var_1ea88.194 = local_unnamed_addr global i32 0
@global_var_1ea9a.195 = local_unnamed_addr global i32 0
@global_var_1eaa7.197 = local_unnamed_addr global i32 0
@global_var_1eaa6.198 = local_unnamed_addr global i32 0
@global_var_15ed8.200 = constant [5 x i8] c"PMMV\00"
@global_var_15ee0.202 = constant i32 5396247
@global_var_15ee4.204 = constant i32 1296912387
@global_var_15f5c.206 = constant i32 19
@global_var_15eec.208 = constant i32 320017171
@global_var_15ef4.210 = constant i32 4115
@global_var_15ef8.212 = constant i32 370216979
@global_var_15f00.214 = constant i32 370216979
@global_var_15f08.216 = constant i32 370216979
@global_var_15f10.218 = constant [7 x i8] c"CLVQNS\00"
@global_var_15f18.220 = constant i32 370216979
@global_var_15f24.222 = constant i32 370216979
@global_var_15f30.224 = constant i32 303174162
@global_var_15f38.226 = constant i32 303174162
@global_var_15f44.228 = constant i32 370216979
@global_var_15f50.230 = constant [8 x i8] c"FGDCWNV\00"
@global_var_15f58.232 = constant i32 269555223
@global_var_15f60.234 = constant [7 x i8] c"XNZZ\0C\22\00"
@global_var_15f68.236 = constant [6 x i8] c"HT@XF\00"
@global_var_15f70.238 = constant [5 x i8] c"CLIM\00"
@global_var_15f78.240 = constant [8 x i8] c"ZOJFKRA\00"
@global_var_15f80.242 = constant i32 387006810
@global_var_15f88.244 = constant [6 x i8] c"TKXZT\00"
@global_var_15f90.246 = constant [6 x i8] c"CFOKL\00"
@global_var_15f98.248 = constant [5 x i8] c"RCQQ\00"
@global_var_15fa0.250 = constant [8 x i8] c"CLVQNS\22\00"
@global_var_15fa8.252 = constant i32 320499557
@global_var_15fb0.254 = constant i32 437918234
@global_var_15fb8.256 = constant [9 x i8] c"RCQQUMPF\00"
@global_var_15fc4.258 = constant i32 319951379
@global_var_15fd0.260 = constant i32 1447843658
@global_var_15fdc.262 = constant i32 1867011861
@global_var_15fec.264 = constant [11 x i8] c"QWRGPTKQMP\00"
@global_var_15ff8.266 = constant i32 1178819416
@global_var_16004.268 = constant i32 320017171
@global_var_1600c.270 = constant i32 269488144
@global_var_16014.272 = constant [14 x i8] c"cFOKLKQVPCVMP\00"
@global_var_15d98.274 = constant i32 0
@global_var_15e24.276 = constant [14 x i8] c"CFOKLKQVPCVMP\00"
@global_var_15e34.278 = constant [6 x i8] c"cFOKL\00"
@global_var_15e3c.280 = constant [4 x i8] c"CFO\00"
@global_var_15e40.282 = constant [9 x i8] c"QOACFOKL\00"
@global_var_15e4c.284 = constant i32 1263486531
@global_var_15e58.286 = constant i32 1263486531
@global_var_15e64.288 = constant i32 323043395
@global_var_15e6c.290 = constant i32 324420417
@global_var_15e78.292 = constant i32 387007823
@global_var_15e80.294 = constant [7 x i8] c"OGPNKL\00"
@global_var_15e88.296 = constant [8 x i8] c"QWRRMPV\00"
@global_var_15e90.298 = constant [5 x i8] c"WQGP\00"
@global_var_15e98.300 = constant [6 x i8] c"EWGQV\00"
@global_var_15ea0.302 = constant [7 x i8] c"FCGOML\00"
@global_var_15ea8.304 = constant [4 x i8] c"@KL\00"
@global_var_15eac.306 = constant [7 x i8] c"VGNLGV\00"
@global_var_15eb4.308 = constant [9 x i8] c"MRGPCVMP\00"
@global_var_1ea90.309 = local_unnamed_addr global i32 0
@global_var_1ea8e.311 = local_unnamed_addr global i32 0
@global_var_1ea8f.312 = local_unnamed_addr global i32 0
@global_var_1eaa8.314 = local_unnamed_addr global i32 0
@global_var_1eaa9.315 = local_unnamed_addr global i32 0
@global_var_15ec0.320 = constant [5 x i8] c"ogin\00"
@global_var_15ec8.322 = constant [6 x i8] c"enter\00"
@global_var_1602b.326 = constant i32 2096127
@global_var_16022.328 = constant i32 2095871
@global_var_15ed0.330 = constant [8 x i8] c"assword\00"
@global_var_1eb28.332 = global i32 0
@global_var_1e8dc.335 = global i32 -559038737
@global_var_16030.340 = constant [21 x i8] c"ALA\0CJCAIWP@MVLGV\0CAD\22\00"
@global_var_1eb44.341 = local_unnamed_addr global i32 0
@global_var_1eb40.342 = local_unnamed_addr global i32 0
@global_var_1eb45.343 = local_unnamed_addr global i32 0
@global_var_16048.345 = constant [3 x i8] c"\22]\00"
@global_var_1eb48.346 = local_unnamed_addr global i32 0
@global_var_1eb4c.347 = local_unnamed_addr global i32 0
@global_var_1eb4d.348 = local_unnamed_addr global i32 0
@global_var_1604c.350 = constant [24 x i8] c"PGRMPV\0CJCAIWP@MVLGV\0CAD\22\00"
@global_var_1ebbc.351 = local_unnamed_addr global i32 0
@global_var_1ebb8.352 = local_unnamed_addr global i32 0
@global_var_1ebbd.353 = local_unnamed_addr global i32 0
@global_var_16064.355 = constant i32 51097
@global_var_1ebc0.356 = local_unnamed_addr global i32 0
@global_var_1ebc4.357 = local_unnamed_addr global i32 0
@global_var_1ebc5.358 = local_unnamed_addr global i32 0
@global_var_16068.360 = constant i32 1448168270
@global_var_1eb3c.361 = local_unnamed_addr global i32 0
@global_var_1eb38.362 = local_unnamed_addr global i32 0
@global_var_1eb3d.363 = local_unnamed_addr global i32 0
@global_var_16078.365 = constant i32 1381389898
@global_var_1eb54.366 = local_unnamed_addr global i32 0
@global_var_1eb50.367 = local_unnamed_addr global i32 0
@global_var_1eb55.368 = local_unnamed_addr global i32 0
@global_var_16098.370 = constant [8 x i8] c"\0DRPMA\0D\22\00"
@global_var_1eb58.371 = local_unnamed_addr global i32 0
@global_var_1eb5c.372 = local_unnamed_addr global i32 0
@global_var_1eb5d.373 = local_unnamed_addr global i32 0
@global_var_160a0.375 = constant [6 x i8] c"\0DGZG\22\00"
@global_var_1eb64.376 = local_unnamed_addr global i32 0
@global_var_1eb60.377 = local_unnamed_addr global i32 0
@global_var_1eb65.378 = local_unnamed_addr global i32 0
@global_var_160a8.380 = constant i32 1195772418
@global_var_1eb6c.381 = local_unnamed_addr global i32 0
@global_var_1eb68.382 = local_unnamed_addr global i32 0
@global_var_1eb6d.383 = local_unnamed_addr global i32 0
@global_var_160b4.385 = constant [5 x i8] c"\0DDF\22\00"
@global_var_1eb74.386 = local_unnamed_addr global i32 0
@global_var_1eb70.387 = local_unnamed_addr global i32 0
@global_var_1eb75.388 = local_unnamed_addr global i32 0
@global_var_160bc.390 = constant [8 x i8] c"\0CCLKOG\22\00"
@global_var_1eb78.391 = local_unnamed_addr global i32 0
@global_var_1eb7c.392 = local_unnamed_addr global i32 0
@global_var_1eb7d.393 = local_unnamed_addr global i32 0
@global_var_160c4.395 = constant [9 x i8] c"\0DQVCVWQ\22\00"
@global_var_1eb84.396 = local_unnamed_addr global i32 0
@global_var_1eb80.397 = local_unnamed_addr global i32 0
@global_var_1eb85.398 = local_unnamed_addr global i32 0
@global_var_160d0.400 = constant i32 1836214128
@global_var_1eb8c.401 = local_unnamed_addr global i32 0
@global_var_1eb88.402 = local_unnamed_addr global i32 0
@global_var_1eb8d.403 = local_unnamed_addr global i32 0
@global_var_160e0.405 = constant [11 x i8] c"jvvrdnmmf\22\00"
@global_var_1eb90.406 = local_unnamed_addr global i32 0
@global_var_1eb94.407 = local_unnamed_addr global i32 0
@global_var_1eb95.408 = local_unnamed_addr global i32 0
@global_var_160ec.410 = constant [11 x i8] c"nmnlmevdm\22\00"
@global_var_1eb98.411 = local_unnamed_addr global i32 0
@global_var_1eb9c.412 = local_unnamed_addr global i32 0
@global_var_1eb9d.413 = local_unnamed_addr global i32 0
@global_var_160f8.415 = constant i32 437738110
@global_var_1eba4.416 = local_unnamed_addr global i32 0
@global_var_1eba0.417 = local_unnamed_addr global i32 0
@global_var_1eba5.418 = local_unnamed_addr global i32 0
@global_var_1611c.420 = constant [9 x i8] c"XMNNCPF\22\00"
@global_var_1ebac.421 = local_unnamed_addr global i32 0
@global_var_1eba8.422 = local_unnamed_addr global i32 0
@global_var_1ebad.423 = local_unnamed_addr global i32 0
@global_var_16128.425 = constant [12 x i8] c"egvnmacnkr\22\00"
@global_var_1ebb4.426 = local_unnamed_addr global i32 0
@global_var_1ebb0.427 = local_unnamed_addr global i32 0
@global_var_1ebb5.428 = local_unnamed_addr global i32 0
@global_var_16134.430 = constant [7 x i8] c"QJGNN\22\00"
@global_var_1ebcc.431 = local_unnamed_addr global i32 0
@global_var_1ebc8.432 = local_unnamed_addr global i32 0
@global_var_1ebcd.433 = local_unnamed_addr global i32 0
@global_var_1613c.435 = constant [8 x i8] c"GLC@NG\22\00"
@global_var_1ebd0.436 = local_unnamed_addr global i32 0
@global_var_1ebd4.437 = local_unnamed_addr global i32 0
@global_var_1ebd5.438 = local_unnamed_addr global i32 0
@global_var_16144.440 = constant [8 x i8] c"Q[QVGO\22\00"
@global_var_1ebd8.441 = local_unnamed_addr global i32 0
@global_var_1ebdc.442 = local_unnamed_addr global i32 0
@global_var_1ebdd.443 = local_unnamed_addr global i32 0
@global_var_1614c.445 = constant [4 x i8] c"QJ\22\00"
@global_var_1ebe4.446 = local_unnamed_addr global i32 0
@global_var_1ebe0.447 = local_unnamed_addr global i32 0
@global_var_1ebe5.448 = local_unnamed_addr global i32 0
@global_var_16150.450 = constant i32 1280000013
@global_var_1ebe8.451 = local_unnamed_addr global i32 0
@global_var_1ebec.452 = local_unnamed_addr global i32 0
@global_var_1ebed.453 = local_unnamed_addr global i32 0
@global_var_16164.455 = constant i32 1668311919
@global_var_1ebf4.456 = local_unnamed_addr global i32 0
@global_var_1ebf0.457 = local_unnamed_addr global i32 0
@global_var_1ebf5.458 = local_unnamed_addr global i32 0
@global_var_16180.460 = constant [10 x i8] c"LAMPPGAV\22\00"
@global_var_1ebf8.461 = local_unnamed_addr global i32 0
@global_var_1ebfc.462 = local_unnamed_addr global i32 0
@global_var_1ebfd.463 = local_unnamed_addr global i32 0
@global_var_1618c.465 = constant i32 1280000013
@global_var_1ec00.466 = local_unnamed_addr global i32 0
@global_var_1ec04.467 = local_unnamed_addr global i32 0
@global_var_1ec05.468 = local_unnamed_addr global i32 0
@global_var_161a0.470 = constant i32 1280000013
@global_var_1ec0c.471 = local_unnamed_addr global i32 0
@global_var_1ec08.472 = local_unnamed_addr global i32 0
@global_var_1ec0d.473 = local_unnamed_addr global i32 0
@global_var_161b8.475 = constant i32 1464693110
@global_var_1ec14.476 = local_unnamed_addr global i32 0
@global_var_1ec10.477 = local_unnamed_addr global i32 0
@global_var_1ec15.478 = local_unnamed_addr global i32 0
@global_var_161d0.480 = constant [18 x i8] c"\0DGVA\0DPGQMNT\0CAMLD\22\00"
@global_var_1ec1c.481 = local_unnamed_addr global i32 0
@global_var_1ec18.482 = local_unnamed_addr global i32 0
@global_var_1ec1d.483 = local_unnamed_addr global i32 0
@global_var_161e4.485 = constant i32 1196376908
@global_var_1ec20.486 = local_unnamed_addr global i32 0
@global_var_1ec24.487 = local_unnamed_addr global i32 0
@global_var_1ec25.488 = local_unnamed_addr global i32 0
@global_var_161f4.490 = constant i32 1280068961
@global_var_1ec2c.491 = local_unnamed_addr global i32 0
@global_var_1ec28.492 = local_unnamed_addr global i32 0
@global_var_1ec2d.493 = local_unnamed_addr global i32 0
@global_var_1620c.495 = constant i32 1195458915
@global_var_1ec34.496 = local_unnamed_addr global i32 0
@global_var_1ec30.497 = local_unnamed_addr global i32 0
@global_var_1ec35.498 = local_unnamed_addr global i32 0
@global_var_16260.500 = constant i32 1195458915
@global_var_1ec3c.501 = local_unnamed_addr global i32 0
@global_var_1ec38.502 = local_unnamed_addr global i32 0
@global_var_1ec3d.503 = local_unnamed_addr global i32 0
@global_var_16284.505 = constant i32 1447841121
@global_var_1ec44.506 = local_unnamed_addr global i32 0
@global_var_1ec40.507 = local_unnamed_addr global i32 0
@global_var_1ec45.508 = local_unnamed_addr global i32 0
@global_var_162b8.510 = constant i32 1633044305
@global_var_1ec48.511 = local_unnamed_addr global i32 0
@global_var_1ec4c.512 = local_unnamed_addr global i32 0
@global_var_1ec4d.513 = local_unnamed_addr global i32 0
@global_var_162c8.515 = constant i32 1346651984
@global_var_1ec50.516 = local_unnamed_addr global i32 0
@global_var_1ec54.517 = local_unnamed_addr global i32 0
@global_var_1ec55.518 = local_unnamed_addr global i32 0
@global_var_162d4.520 = constant i32 1128353102
@global_var_1ec58.521 = local_unnamed_addr global i32 0
@global_var_1ec5c.522 = local_unnamed_addr global i32 0
@global_var_1ec5d.523 = local_unnamed_addr global i32 0
@global_var_162e0.525 = constant i32 257312593
@global_var_1ec60.526 = local_unnamed_addr global i32 0
@global_var_1ec64.527 = local_unnamed_addr global i32 0
@global_var_1ec65.528 = local_unnamed_addr global i32 0
@global_var_162f0.530 = constant i32 1447841089
@global_var_1ec68.531 = local_unnamed_addr global i32 0
@global_var_1ec6c.532 = local_unnamed_addr global i32 0
@global_var_1ec6d.533 = local_unnamed_addr global i32 0
@global_var_16304.535 = constant i32 1279479894
@global_var_1ec70.536 = local_unnamed_addr global i32 0
@global_var_1ec74.537 = local_unnamed_addr global i32 0
@global_var_1ec75.538 = local_unnamed_addr global i32 0
@global_var_16318.540 = constant [9 x i8] c"AJWLIGF\22\00"
@global_var_1ec7c.541 = local_unnamed_addr global i32 0
@global_var_1ec78.542 = local_unnamed_addr global i32 0
@global_var_1ec7d.543 = local_unnamed_addr global i32 0
@global_var_16200.545 = constant i32 1380403017
@global_var_1ec84.546 = local_unnamed_addr global i32 0
@global_var_1ec80.547 = local_unnamed_addr global i32 0
@global_var_1ec85.548 = local_unnamed_addr global i32 0
@global_var_16324.550 = constant i32 1280068929
@global_var_1ec88.551 = local_unnamed_addr global i32 0
@global_var_1ec8c.552 = local_unnamed_addr global i32 0
@global_var_1ec8d.553 = local_unnamed_addr global i32 0
@global_var_16334.555 = constant i32 1414547281
@global_var_1ec94.556 = local_unnamed_addr global i32 0
@global_var_1ec90.557 = local_unnamed_addr global i32 0
@global_var_1ec95.558 = local_unnamed_addr global i32 0
@global_var_16348.560 = constant i32 1414547281
@global_var_1ec9c.561 = local_unnamed_addr global i32 0
@global_var_1ec98.562 = local_unnamed_addr global i32 0
@global_var_1ec9d.563 = local_unnamed_addr global i32 0
@global_var_16364.565 = constant i32 1264078191
@global_var_1eca0.566 = local_unnamed_addr global i32 0
@global_var_1eca4.567 = local_unnamed_addr global i32 0
@global_var_1eca5.568 = local_unnamed_addr global i32 0
@global_var_163d4.570 = constant i32 1264078191
@global_var_1eca8.571 = local_unnamed_addr global i32 0
@global_var_1ecac.572 = local_unnamed_addr global i32 0
@global_var_1ecad.573 = local_unnamed_addr global i32 0
@global_var_16444.575 = constant i32 1264078191
@global_var_1ecb0.576 = local_unnamed_addr global i32 0
@global_var_1ecb4.577 = local_unnamed_addr global i32 0
@global_var_1ecb5.578 = local_unnamed_addr global i32 0
@global_var_164b4.580 = constant i32 1264078191
@global_var_1ecbc.581 = local_unnamed_addr global i32 0
@global_var_1ecb8.582 = local_unnamed_addr global i32 0
@global_var_1ecbd.583 = local_unnamed_addr global i32 0
@global_var_16524.585 = constant i32 1264078191
@global_var_1ecc5.586 = local_unnamed_addr global i32 0
@global_var_1ecc0.587 = local_unnamed_addr global i32 0
@global_var_1ecc4.588 = local_unnamed_addr global i32 0
@global_var_14af4.591 = constant i32 -476053504
@global_var_13880.595 = constant i32 -443219956
@global_var_139ec.600 = constant i32 -376111092
@global_var_1eaf0.603 = global i32 0
@global_var_13b6c.605 = constant i32 -456978431
@global_var_1ecc8.607 = global i32 0
@global_var_1eab8.609 = global i32 0
@global_var_1e9dc.612 = global i32 256
@global_var_1e8e0.613 = global i32* @global_var_1e9dc.612
@global_var_1eae0.616 = global i32 0
@global_var_1ed48.618 = global i32 0
@global_var_152a8.619 = constant i32 -382910416
@global_var_13af0.620 = constant i32 -509595648
@global_var_1418c.627 = constant i32 -442564520
@global_var_1e9e8.633 = global i32 0
@global_var_1372c.635 = constant i32 -481230848
@global_var_1ead0.637 = global i32 0
@global_var_14ef8.639 = constant i32 -509587456
@global_var_166a8.641 = constant i32 33554944
@global_var_1ea20.642 = global i32* @global_var_166a8.641
@global_var_1ea00.645 = global i32 0
@global_var_1ead4.649 = local_unnamed_addr global i32 0
@global_var_148ac.651 = constant i32 -352321419
@global_var_1e8ac.655 = global i32 -1
@global_var_1eae4.658 = global i32 0
@global_var_1eae8.660 = local_unnamed_addr global i32 0
@global_var_14ae0.661 = constant i32 -390234096
@global_var_1659c.663 = constant [10 x i8] c"/dev/null\00"
@global_var_1eaec.665 = global i32 0
@global_var_1ead8.670 = local_unnamed_addr global i32 0
@global_var_1eadc.672 = global i32 0
@global_var_13ad0.674 = constant i32 -369096946
@global_var_1ea18 = external local_unnamed_addr global i32
@global_var_13a84.684 = constant i32 -442564608
@global_var_14da8.686 = constant i32 -335544664
@global_var_14ec4.689 = constant i32 -275775369
@global_var_1563c.690 = constant i32 -382910352
@global_var_1eaf8.692 = global i32 0
@global_var_1ed60.695 = global i32 0
@global_var_1ed64.697 = global i32 0
@global_var_1e8b0.700 = global i32 0
@global_var_1ea24.3 = external global i8*
@global_var_1ea40.54 = external global i8*
@global_var_1ea41.65 = global i8 0
@2 = internal constant [2 x i8] c"\01\00"
@global_var_1e8d8.112 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0)
@global_var_1eb08.115 = external global i8*
@global_var_1ea6c.136 = external global i8*
@global_var_1eab0.173 = external global i8*
@global_var_1eab1.174 = local_unnamed_addr global i8 0
@global_var_1ea84.183 = external global i8*
@global_var_1eaa4.188 = local_unnamed_addr global i8 0
@global_var_1eaa5.196 = local_unnamed_addr global i8 0
@global_var_1ea9c.313 = local_unnamed_addr global i8 0
@global_var_1ea94.310 = local_unnamed_addr global i8 0
@global_var_15d80.23 = constant [2 x i8] c"/\00"

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  %v1_80a4 = call i32 @function_15cec(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1ea24.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1ea24.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1e8c8.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1e8c8.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1e8c8.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1e8c8.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1ea24.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1e8c8.6, { 1, 0 }
  uselistorder i8** @global_var_1ea24.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 125116 to i32*), align 4
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 125116

bb2:                                              ; preds = %.thread
  ret i32 125116

; uselistorder directives
  uselistorder i32 125116, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_14b94(i32 ptrtoint (i32* @global_var_f430.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 89384, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_1455c()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-10568 = alloca i32, align 4
  %stack_var_-404 = alloca i32, align 4
  %stack_var_-20809 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_81cc = load i32, i32* @r4, align 4
  store i32 %v3_81cc, i32* %stack_var_-36, align 4
  %v6_81cc = load i32, i32* @r5, align 4
  %v9_81cc = load i32, i32* @r6, align 4
  %v15_81cc = load i32, i32* @r8, align 4
  %v1_81d8 = urem i32 %arg3, 256
  store i32 %v1_81d8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_81e4 = urem i32 %arg1, 256
  store i32 %v1_81e4, i32* %ip.global-to-local, align 4
  store i32 21, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v1_81d8, i32* %r0.global-to-local, align 4
  store i32 %arg4, i32* %r1.global-to-local, align 4
  %v5_8200 = inttoptr i32 %arg4 to i32*
  %v6_8200 = call i32 @function_9f84(i32 %v1_81d8, i32* %v5_8200, i32 21, i32 0, i32 %arg2)
  %v0_8204 = load i32, i32* @r5, align 4
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  %v0_8210 = load i32, i32* @r4, align 4
  store i32 %v0_8210, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15d7c.21 to i32), i32* %r3.global-to-local, align 4
  %v6_8218 = inttoptr i32 %v0_8204 to i32*
  %v7_8218 = call i32 @function_9f84(i32 %v0_8210, i32* %v6_8218, i32 20, i32 ptrtoint ([4 x i8]* @global_var_15d7c.21 to i32), i32 %v6_8200)
  %v0_821c = load i32, i32* @r5, align 4
  store i32 %v0_821c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v7_8218, i32* %fp.global-to-local, align 4
  %v0_822c = load i32, i32* @r4, align 4
  store i32 %v0_822c, i32* %r0.global-to-local, align 4
  %v5_8230 = inttoptr i32 %v0_821c to i32*
  %v6_8230 = call i32 @function_9f84(i32 %v0_822c, i32* %v5_8230, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v0_8234 = load i32, i32* @r5, align 4
  store i32 %v0_8234, i32* %r1.global-to-local, align 4
  store i32 %v6_8230, i32* %sb.global-to-local, align 4
  store i32 22, i32* %r2.global-to-local, align 4
  %v0_8240 = load i32, i32* @r4, align 4
  store i32 %v0_8240, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([2 x i8]* @global_var_15d80.23 to i32), i32* %r3.global-to-local, align 4
  %v5_8248 = inttoptr i32 %v0_8234 to i32*
  %v6_8248 = call i32 @function_9f84(i32 %v0_8240, i32* %v5_8248, i32 22, i32 ptrtoint ([2 x i8]* @global_var_15d80.23 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_824c = load i32, i32* @r5, align 4
  store i32 %v0_824c, i32* %r1.global-to-local, align 4
  store i32 %v6_8248, i32* @sl, align 4
  store i32 24, i32* %r2.global-to-local, align 4
  %v0_8258 = load i32, i32* @r4, align 4
  store i32 %v0_8258, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_8260 = inttoptr i32 %v0_824c to i32*
  %v5_8260 = call i32 @function_a4e8(i32 %v0_8258, i32* %v4_8260, i32 24, i32 1)
  %v0_8264 = load i32, i32* @r5, align 4
  store i32 %v0_8264, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 80, i32* %r3.global-to-local, align 4
  store i32 %v5_8260, i32* @r6, align 4
  %v0_8274 = load i32, i32* @r4, align 4
  store i32 %v0_8274, i32* %r0.global-to-local, align 4
  %v4_8278 = inttoptr i32 %v0_8264 to i32*
  %v5_8278 = call i32 @function_a4e8(i32 %v0_8274, i32* %v4_8278, i32 7, i32 80)
  %v2_8280 = ptrtoint i32* %stack_var_-20809 to i32
  %v3_8288 = mul i32 %v5_8278, 65536
  store i32 %v3_8288, i32* %r3.global-to-local, align 4
  %tmp199 = bitcast i32* %stack_var_-20809 to i8*
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10241, i32* @r2, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_829c = urem i32 %v5_8278, 65536
  store i32 %v3_829c, i32* %r8.global-to-local, align 4
  %v3_82a0 = call i32 @function_13af0(i8* %tmp199, i32 0)
  store i32 %v3_82a0, i32* %r0.global-to-local, align 4
  %v0_82a4 = load i32, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_82a4 = icmp slt i32 %v0_82a4, 0
  store i1 %v1_82a4, i1* %cpsr_n.global-to-local, align 1
  %v2_82a4 = icmp eq i32 %v0_82a4, 0
  store i1 %v2_82a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_82a4, label %.thread13, label %bb

bb:                                               ; preds = %dec_label_pc_81cc
  %v1_82a8 = load i32, i32* %sb.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v2_82a8 = icmp slt i32 %v1_82a8, 0
  store i1 %v2_82a8, i1* %cpsr_n.global-to-local, align 1
  %v3_82a8 = icmp eq i32 %v1_82a8, 0
  store i1 %v3_82a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_82a8, label %bb200, label %dec_label_pc_82c4

.thread13:                                        ; preds = %dec_label_pc_81cc
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

bb200:                                            ; preds = %bb
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %bb200, %dec_label_pc_82e4, %.thread13, %dec_label_pc_82d4, %dec_label_pc_82c4
  %v29_82c0 = phi i32 [ %v2_82e8, %dec_label_pc_82e4 ], [ %v3_82a0, %.thread13 ], [ %v3_82a0, %bb200 ], [ %v2_82d8, %dec_label_pc_82d4 ], [ %v2_82c8, %dec_label_pc_82c4 ]
  %v2_82c0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_82c0, i32* %r4.global-to-local, align 4
  store i32 %v6_81cc, i32* %r5.global-to-local, align 4
  store i32 %v9_81cc, i32* %r6.global-to-local, align 4
  store i32 %v15_81cc, i32* %r8.global-to-local, align 4
  ret i32 %v29_82c0

dec_label_pc_82c4:                                ; preds = %bb
  store i32 0, i32* @r4, align 4
  store i32 %v0_82a4, i32* %r0.global-to-local, align 4
  %v1_82c8 = inttoptr i32 %v0_82a4 to i8*
  %v2_82c8 = call i32 @function_12af0(i8* %v1_82c8)
  store i32 %v2_82c8, i32* %r0.global-to-local, align 4
  %v1_82cc = add i32 %v2_82c8, -255
  %v2_82cc = icmp ugt i32 %v2_82c8, 254
  store i1 %v2_82cc, i1* %cpsr_c.global-to-local, align 1
  %v3_82cc = sub i32 254, %v2_82c8
  %v4_82cc = and i32 %v3_82cc, %v2_82c8
  %v5_82cc = icmp slt i32 %v4_82cc, 0
  store i1 %v5_82cc, i1* %cpsr_v.global-to-local, align 1
  %v6_82cc = icmp slt i32 %v1_82cc, 0
  store i1 %v6_82cc, i1* %cpsr_n.global-to-local, align 1
  %v7_82cc = icmp eq i32 %v2_82c8, 255
  store i1 %v7_82cc, i1* %cpsr_z.global-to-local, align 1
  %v8_82d0 = icmp sgt i32 %v2_82c8, 255
  br i1 %v8_82d0, label %dec_label_pc_82b8, label %dec_label_pc_82d4

dec_label_pc_82d4:                                ; preds = %dec_label_pc_82c4
  %v0_82d4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_82d4, i32* %r0.global-to-local, align 4
  %v1_82d8 = inttoptr i32 %v0_82d4 to i8*
  %v2_82d8 = call i32 @function_12af0(i8* %v1_82d8)
  store i32 %v2_82d8, i32* %r0.global-to-local, align 4
  %v1_82dc = add i32 %v2_82d8, -127
  %v2_82dc = icmp ugt i32 %v2_82d8, 126
  store i1 %v2_82dc, i1* %cpsr_c.global-to-local, align 1
  %v3_82dc = sub i32 126, %v2_82d8
  %v4_82dc = and i32 %v3_82dc, %v2_82d8
  %v5_82dc = icmp slt i32 %v4_82dc, 0
  store i1 %v5_82dc, i1* %cpsr_v.global-to-local, align 1
  %v6_82dc = icmp slt i32 %v1_82dc, 0
  store i1 %v6_82dc, i1* %cpsr_n.global-to-local, align 1
  %v7_82dc = icmp eq i32 %v2_82d8, 127
  store i1 %v7_82dc, i1* %cpsr_z.global-to-local, align 1
  %v8_82e0 = icmp sgt i32 %v2_82d8, 127
  br i1 %v8_82e0, label %dec_label_pc_82b8, label %dec_label_pc_82e4

dec_label_pc_82e4:                                ; preds = %dec_label_pc_82d4
  %v0_82e4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82e4, i32* %r0.global-to-local, align 4
  %v1_82e8 = inttoptr i32 %v0_82e4 to i8*
  %v2_82e8 = call i32 @function_12af0(i8* %v1_82e8)
  store i32 %v2_82e8, i32* %r0.global-to-local, align 4
  %v1_82ec = add i32 %v2_82e8, -9
  %v2_82ec = icmp ugt i32 %v2_82e8, 8
  store i1 %v2_82ec, i1* %cpsr_c.global-to-local, align 1
  %v3_82ec = sub i32 8, %v2_82e8
  %v4_82ec = and i32 %v3_82ec, %v2_82e8
  %v5_82ec = icmp slt i32 %v4_82ec, 0
  store i1 %v5_82ec, i1* %cpsr_v.global-to-local, align 1
  %v6_82ec = icmp slt i32 %v1_82ec, 0
  store i1 %v6_82ec, i1* %cpsr_n.global-to-local, align 1
  %v7_82ec = icmp eq i32 %v2_82e8, 9
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  %v7_82f0 = icmp sgt i32 %v2_82e8, 9
  br i1 %v7_82f0, label %dec_label_pc_82b8, label %bb201

bb201:                                            ; preds = %dec_label_pc_82e4
  %v10_82f0 = ptrtoint i32* %stack_var_-404 to i32
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v8_82f4 = load i32, i32* @r4, align 4
  %v10_82f4 = add i32 %v10_82f0, 364
  %v11_82f4 = inttoptr i32 %v10_82f4 to i32*
  store i32 %v8_82f4, i32* %v11_82f4, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %bb201, %bb205
  %v0_82fc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_82fc, i32* %r0.global-to-local, align 4
  %v1_8300 = inttoptr i32 %v0_82fc to i8*
  %v2_8300 = call i32 @function_12af0(i8* %v1_8300)
  store i32 %v2_8300, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_8308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8308, i32* %ip.global-to-local, align 4
  %v2_830c = sub i32 %v2_8300, %v3_8308
  %v3_830c = icmp uge i32 %v2_8300, %v3_8308
  store i1 %v3_830c, i1* %cpsr_c.global-to-local, align 1
  %v4_830c = xor i32 %v3_8308, %v2_8300
  %v5_830c = xor i32 %v2_830c, %v2_8300
  %v6_830c = and i32 %v5_830c, %v4_830c
  %v7_830c = icmp slt i32 %v6_830c, 0
  store i1 %v7_830c, i1* %cpsr_v.global-to-local, align 1
  %v8_830c = icmp slt i32 %v2_830c, 0
  store i1 %v8_830c, i1* %cpsr_n.global-to-local, align 1
  %v9_830c = icmp eq i32 %v2_8300, %v3_8308
  store i1 %v9_830c, i1* %cpsr_z.global-to-local, align 1
  %v7_8310 = icmp sgt i32 %v2_8300, %v3_8308
  br i1 %v7_8310, label %dec_label_pc_8314, label %dec_label_pc_8340

dec_label_pc_8314:                                ; preds = %dec_label_pc_82fc
  %v0_8314 = load i32, i32* %fp.global-to-local, align 4
  %v2_8314 = add i32 %v0_8314, %v3_8308
  %v3_8314 = inttoptr i32 %v2_8314 to i8*
  %v4_8314 = load i8, i8* %v3_8314, align 1
  %v6_8314 = zext i8 %v4_8314 to i32
  %v1_8318 = add nsw i32 %v6_8314, -32
  store i32 %v1_8318, i32* %r2.global-to-local, align 4
  %v1_831c = add nsw i32 %v6_8314, -97
  store i32 %v1_831c, i32* %r3.global-to-local, align 4
  %v2_8320 = icmp ugt i32 %v1_831c, 24
  store i1 %v2_8320, i1* %cpsr_c.global-to-local, align 1
  %v3_8320 = sub nsw i32 121, %v6_8314
  %v4_8320 = and i32 %v3_8320, %v1_831c
  %v5_8320 = icmp slt i32 %v4_8320, 0
  store i1 %v5_8320, i1* %cpsr_v.global-to-local, align 1
  %v6_8320 = icmp ult i8 %v4_8314, 122
  store i1 %v6_8320, i1* %cpsr_n.global-to-local, align 1
  %v7_8320 = icmp eq i32 %v1_831c, 25
  store i1 %v7_8320, i1* %cpsr_z.global-to-local, align 1
  %v2_8324 = xor i1 %v2_8320, true
  %v3_8324 = or i1 %v7_8320, %v2_8324
  br i1 %v3_8324, label %bb202, label %bb203

bb202:                                            ; preds = %dec_label_pc_8314
  %v5_8324 = trunc i32 %v1_8318 to i8
  store i8 %v5_8324, i8* %v3_8314, align 1
  %v0_8328.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_8328.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb203

bb203:                                            ; preds = %dec_label_pc_8314, %bb202
  %v1_832c = phi i1 [ %v2_8320, %dec_label_pc_8314 ], [ %v1_8328.pre, %bb202 ]
  %v0_832c = phi i1 [ false, %dec_label_pc_8314 ], [ %v0_8328.pre, %bb202 ]
  %v2_8328 = xor i1 %v1_832c, true
  %v3_8328 = or i1 %v0_832c, %v2_8328
  br i1 %v3_8328, label %bb204, label %._crit_edge

._crit_edge:                                      ; preds = %bb203
  %v0_8334.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb205

bb204:                                            ; preds = %bb203
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v7_832c = load i32, i32* %v11_82f4, align 4
  store i32 %v7_832c, i32* %ip.global-to-local, align 4
  br label %bb205

bb205:                                            ; preds = %._crit_edge, %bb204
  %v0_8334 = phi i32 [ %v0_8334.pre, %._crit_edge ], [ %v7_832c, %bb204 ]
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v1_8334 = add i32 %v0_8334, 1
  store i32 %v1_8334, i32* %ip.global-to-local, align 4
  store i32 %v1_8334, i32* %stack_var_-40, align 4
  br label %dec_label_pc_82fc

dec_label_pc_8340:                                ; preds = %dec_label_pc_82fc
  store i32 36, i32* %r0.global-to-local, align 4
  %v1_8344 = call i32 @function_121c4(i32 36)
  store i32 37, i32* %r0.global-to-local, align 4
  %v1_834c = call i32 @function_121c4(i32 37)
  store i32 38, i32* %r0.global-to-local, align 4
  %v1_8354 = call i32 @function_121c4(i32 38)
  store i32 39, i32* %r0.global-to-local, align 4
  %v1_835c = call i32 @function_121c4(i32 39)
  store i32 40, i32* %r0.global-to-local, align 4
  %v1_8364 = call i32 @function_121c4(i32 40)
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_836c = call i32 @function_121c4(i32 41)
  store i32 42, i32* %r0.global-to-local, align 4
  %v1_8374 = call i32 @function_121c4(i32 42)
  store i32 43, i32* %r0.global-to-local, align 4
  %v1_837c = call i32 @function_121c4(i32 43)
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8384 = call i32 @function_121c4(i32 44)
  store i32 45, i32* %r0.global-to-local, align 4
  %v1_838c = call i32 @function_121c4(i32 45)
  store i32 %v1_838c, i32* %r0.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v2_8390 = add i32 %v0_8390, -256
  %v3_8390 = icmp ugt i32 %v0_8390, 255
  store i1 %v3_8390, i1* %cpsr_c.global-to-local, align 1
  %v4_8390 = sub i32 255, %v0_8390
  %v5_8390 = and i32 %v4_8390, %v0_8390
  %v6_8390 = icmp slt i32 %v5_8390, 0
  store i1 %v6_8390, i1* %cpsr_v.global-to-local, align 1
  %v7_8390 = icmp slt i32 %v2_8390, 0
  store i1 %v7_8390, i1* %cpsr_n.global-to-local, align 1
  %v8_8390 = icmp eq i32 %v0_8390, 256
  store i1 %v8_8390, i1* %cpsr_z.global-to-local, align 1
  %v5_8394 = icmp slt i32 %v0_8390, 256
  br i1 %v5_8394, label %thread-pre-split, label %bb206

bb206:                                            ; preds = %dec_label_pc_8340
  store i32 256, i32* @r6, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %dec_label_pc_8340, %bb206
  %v0_839c = phi i32 [ 256, %bb206 ], [ %v0_8390, %dec_label_pc_8340 ]
  store i32 46, i32* %r0.global-to-local, align 4
  %v1_83a0 = call i32 @function_121c4(i32 46)
  store i32 %v0_839c, i32* %r0.global-to-local, align 4
  store i32 3140, i32* %r1.global-to-local, align 4
  %v2_83b0 = call i32 @function_140b4(i32 %v0_839c, i32 3140)
  store i32 %v2_83b0, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_83b8 = icmp slt i32 %v0_839c, 0
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  %v2_83b8 = icmp eq i32 %v0_839c, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83b0, i32* @r5, align 4
  %tmp207 = icmp slt i32 %v0_839c, 1
  br i1 %tmp207, label %dec_label_pc_84f4, label %dec_label_pc_83c8

dec_label_pc_83c8:                                ; preds = %thread-pre-split
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_83cc

dec_label_pc_83cc:                                ; preds = %dec_label_pc_9e70, %dec_label_pc_83c8
  %v1_83d8 = phi i32 [ %v1_9e8c, %dec_label_pc_9e70 ], [ %v2_83b0, %dec_label_pc_83c8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 %v1_81e4, i32* %r1.global-to-local, align 4
  %v2_83d8 = inttoptr i32 %v1_83d8 to i32*
  store i32 -1, i32* %v2_83d8, align 4
  %v3_83dc = load i32, i32* @r5, align 4
  %v4_83dc = add i32 %v3_83dc, 4
  %v5_83dc = inttoptr i32 %v4_83dc to i8*
  store i8 0, i8* %v5_83dc, align 1
  %v0_83e0 = load i32, i32* @r7, align 4
  store i32 %v0_83e0, i32* %r0.global-to-local, align 4
  %v5_83e4 = call i32 @function_132d8(i32 %v0_83e0, i32 %v1_81e4, i32 -1, i32 0)
  store i32 %v5_83e4, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v2_83f0 = and i32 %v5_83e4, 536870912
  %v3_83f0 = icmp ne i32 %v2_83f0, 0
  store i1 %v3_83f0, i1* %cpsr_c.global-to-local, align 1
  %v5_83f0 = mul i32 %v5_83e4, 24
  store i32 %v5_83f0, i32* %r3.global-to-local, align 4
  %v2_83f4 = add i32 %v5_83f0, %arg2
  store i32 %v2_83f4, i32* @r6, align 4
  %v1_83f8 = add i32 %v2_83f4, 16
  %v2_83f8 = inttoptr i32 %v1_83f8 to i32*
  %v3_83f8 = load i32, i32* %v2_83f8, align 4
  store i32 %v3_83f8, i32* %r2.global-to-local, align 4
  %v0_83fc = load i32, i32* @r5, align 4
  %v1_83fc = add i32 %v0_83fc, 532
  store i32 %v1_83fc, i32* @lr, align 4
  store i32 %v1_83fc, i32* @r0, align 4
  %v0_8404 = load i32, i32* @sl, align 4
  store i32 %v0_8404, i32* %r1.global-to-local, align 4
  %v2_8408 = add i32 %v0_83fc, 16
  %v3_8408 = inttoptr i32 %v2_8408 to i32*
  store i32 %v3_83f8, i32* %v3_8408, align 4
  %v0_840c = load i32, i32* @lr, align 4
  %v2_8410 = inttoptr i32 %v1_83fc to i8*
  %v3_8410 = call i32 @function_12b18(i8* %v2_8410, i32 %v0_8404)
  store i32 %v3_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @r5, align 4
  %v1_8414 = add i32 %v0_8414, 532
  %v2_8414 = inttoptr i32 %v1_8414 to i8*
  %v3_8414 = load i8, i8* %v2_8414, align 1
  %v4_8414 = zext i8 %v3_8414 to i32
  store i32 %v4_8414, i32* %r3.global-to-local, align 4
  %v2_8418 = icmp ugt i8 %v3_8414, 46
  store i1 %v2_8418, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8418 = icmp ult i8 %v3_8414, 47
  store i1 %v6_8418, i1* %cpsr_n.global-to-local, align 1
  %v7_8418 = icmp eq i8 %v3_8414, 47
  store i1 %v7_8418, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8418, label %dec_label_pc_8444, label %dec_label_pc_8420

dec_label_pc_8420:                                ; preds = %dec_label_pc_83cc
  store i32 %v0_840c, i32* %r0.global-to-local, align 4
  %v1_8424 = inttoptr i32 %v0_840c to i8*
  %v2_8424 = call i32 @function_12af0(i8* %v1_8424)
  store i32 %v2_8424, i32* @r2, align 4
  %v0_842c = load i32, i32* @r5, align 4
  %v1_8430 = add i32 %v0_842c, 533
  store i32 %v1_8430, i32* @r0, align 4
  store i32 %v0_840c, i32* @r1, align 4
  %v3_8438 = call i32 @function_13ae0(i32 %v1_8430, i32 %v0_840c, i32 %v2_8424)
  store i32 %v3_8438, i32* %r0.global-to-local, align 4
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8440 = load i32, i32* @r5, align 4
  %v3_8440 = add i32 %v2_8440, 532
  %v4_8440 = inttoptr i32 %v3_8440 to i8*
  store i8 47, i8* %v4_8440, align 1
  %v0_8448.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8444

dec_label_pc_8444:                                ; preds = %dec_label_pc_83cc, %dec_label_pc_8420
  %v0_8448 = phi i32 [ %v0_8414, %dec_label_pc_83cc ], [ %v0_8448.pre, %dec_label_pc_8420 ]
  %v0_8444 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8444, i32* %r1.global-to-local, align 4
  %v1_8448 = add i32 %v0_8448, 1440
  store i32 %v1_8448, i32* @r0, align 4
  %v2_844c = inttoptr i32 %v1_8448 to i8*
  %v3_844c = call i32 @function_12b18(i8* %v2_844c, i32 %v0_8444)
  %v0_8450 = load i32, i32* @r5, align 4
  %v0_8454 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8454, i32* %r1.global-to-local, align 4
  %v1_8458 = add i32 %v0_8450, 1431
  store i32 %v1_8458, i32* @r0, align 4
  %v2_845c = inttoptr i32 %v1_8458 to i8*
  %v3_845c = call i32 @function_12b18(i8* %v2_845c, i32 %v0_8454)
  %v0_8460 = load i32, i32* @r5, align 4
  %v1_8464 = add i32 %v0_8460, 789
  store i32 %v1_8464, i32* @r0, align 4
  %v0_8468 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_8468, i32* %r1.global-to-local, align 4
  %v2_846c = inttoptr i32 %v1_8464 to i8*
  %v3_846c = call i32 @function_12b18(i8* %v2_846c, i32 %v0_8468)
  store i32 %v3_846c, i32* %r0.global-to-local, align 4
  %v0_8470 = load i32, i32* @r6, align 4
  %v1_8470 = add i32 %v0_8470, 20
  %v2_8470 = inttoptr i32 %v1_8470 to i8*
  %v3_8470 = load i8, i8* %v2_8470, align 1
  %v4_8470 = zext i8 %v3_8470 to i32
  store i32 %v4_8470, i32* %r3.global-to-local, align 4
  %v2_8474 = icmp ugt i8 %v3_8470, 30
  store i1 %v2_8474, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8474 = icmp ult i8 %v3_8470, 31
  store i1 %v6_8474, i1* %cpsr_n.global-to-local, align 1
  %v7_8474 = icmp eq i8 %v3_8470, 31
  store i1 %v7_8474, i1* %cpsr_z.global-to-local, align 1
  %v2_8478 = xor i1 %v7_8474, true
  %v3_8478 = and i1 %v2_8474, %v2_8478
  br i1 %v3_8478, label %dec_label_pc_84c8, label %dec_label_pc_847c

dec_label_pc_847c:                                ; preds = %dec_label_pc_8444
  %v1_847c = add i32 %v0_8470, 16
  %v2_847c = inttoptr i32 %v1_847c to i32*
  %v3_847c = load i32, i32* %v2_847c, align 4
  store i32 %v3_847c, i32* @r4, align 4
  %v0_8480 = call i32 @function_fc1c()
  store i32 %v0_8480, i32* %r0.global-to-local, align 4
  %v0_8484 = load i32, i32* @r4, align 4
  %v1_8488 = and i32 %v0_8484, 65280
  store i32 %v1_8488, i32* %r3.global-to-local, align 4
  %v1_8484 = udiv i32 %v0_8484, 256
  %v3_848c = and i32 %v1_8484, 65280
  store i32 %v3_848c, i32* %r2.global-to-local, align 4
  %v3_8490 = mul i32 %v0_8484, 16777216
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_8494 = mul nuw nsw i32 %v1_8488, 256
  %v5_8494 = or i32 %v4_8494, %v3_8490
  store i32 %v5_8494, i32* %r1.global-to-local, align 4
  %v0_8498 = load i32, i32* @r6, align 4
  %v1_8498 = add i32 %v0_8498, 20
  %v2_8498 = inttoptr i32 %v1_8498 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* %ip.global-to-local, align 4
  %v2_84a0 = call i32 @llvm.bswap.i32(i32 %v0_8484)
  %v7_84a4 = lshr i32 %v0_8480, %v4_8498
  %v8_84a4 = add i32 %v7_84a4, %v2_84a0
  store i32 %v8_84a4, i32* %r2.global-to-local, align 4
  %v3_84b0 = mul i32 %v8_84a4, 16777216
  %v1_84b4 = and i32 %v8_84a4, 65280
  store i32 %v1_84b4, i32* %r0.global-to-local, align 4
  %v4_84b8 = mul nuw nsw i32 %v1_84b4, 256
  %v5_84b8 = or i32 %v4_84b8, %v3_84b0
  store i32 %v5_84b8, i32* %r1.global-to-local, align 4
  %v2_84bc = and i32 %v8_84a4, 8388608
  %v3_84bc = icmp ne i32 %v2_84bc, 0
  store i1 %v3_84bc, i1* %cpsr_c.global-to-local, align 1
  %v2_84c0 = call i32 @llvm.bswap.i32(i32 %v8_84a4)
  store i32 %v2_84c0, i32* %r3.global-to-local, align 4
  %v1_84c4 = load i32, i32* @r5, align 4
  %v2_84c4 = add i32 %v1_84c4, 16
  %v3_84c4 = inttoptr i32 %v2_84c4 to i32*
  store i32 %v2_84c0, i32* %v3_84c4, align 4
  br label %dec_label_pc_84c8

dec_label_pc_84c8:                                ; preds = %dec_label_pc_8444, %dec_label_pc_847c
  %v0_84c8 = call i32 @function_fc1c()
  store i32 %v0_84c8, i32* %r0.global-to-local, align 4
  store i32 5, i32* %r1.global-to-local, align 4
  %v2_84d0 = call i32 @function_1320c(i32 %v0_84c8, i32 5)
  store i32 %v2_84d0, i32* %r0.global-to-local, align 4
  %v1_84d4 = add i32 %v2_84d0, -4
  %v3_84d4 = sub i32 3, %v2_84d0
  %v4_84d4 = and i32 %v3_84d4, %v2_84d0
  %v5_84d4 = icmp slt i32 %v4_84d4, 0
  store i1 %v5_84d4, i1* %cpsr_v.global-to-local, align 1
  %v6_84d4 = icmp slt i32 %v1_84d4, 0
  store i1 %v6_84d4, i1* %cpsr_n.global-to-local, align 1
  %v7_84d4 = icmp eq i32 %v2_84d0, 4
  store i1 %v7_84d4, i1* %cpsr_z.global-to-local, align 1
  %v5_84d8 = and i32 %v2_84d0, 1073741824
  %v6_84d8 = icmp ne i32 %v5_84d8, 0
  store i1 %v6_84d8, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v2_84d0, label %dec_label_pc_9e70 [
    i32 0, label %dec_label_pc_9ed4
    i32 1, label %dec_label_pc_9f00
    i32 2, label %dec_label_pc_9f2c
    i32 3, label %dec_label_pc_9f58
    i32 4, label %dec_label_pc_9e48
  ]

dec_label_pc_84f4:                                ; preds = %thread-pre-split
  %v1_84f8 = add i32 %v2_83b0, 1456
  %v0_8500 = load i32, i32* %r8.global-to-local, align 4
  %v1_8500 = urem i32 %v0_8500, 256
  store i32 %v1_8500, i32* %r3.global-to-local, align 4
  %v1_8504 = add i32 %v2_83b0, 1464
  store i32 %v1_8504, i32* %r1.global-to-local, align 4
  %v2_8508 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_8508, i32* %r2.global-to-local, align 4
  store i32 %v1_84f8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_8528.preheader:                      ; preds = %dec_label_pc_84f4, %dec_label_pc_9e94
  %storemerge148.in.in = phi i32 [ %v0_9ea8, %dec_label_pc_9e94 ], [ %v0_8500, %dec_label_pc_84f4 ]
  %stack_var_-20868.0.ph = phi i32 [ %v1_9ea0, %dec_label_pc_9e94 ], [ %v1_84f8, %dec_label_pc_84f4 ]
  %stack_var_-20860.0.ph = phi i32 [ %v1_9ea8, %dec_label_pc_9e94 ], [ %v1_8500, %dec_label_pc_84f4 ]
  %stack_var_-20872.0.ph = phi i32 [ %v1_9eac, %dec_label_pc_9e94 ], [ %v1_8504, %dec_label_pc_84f4 ]
  %stack_var_-20856.0.ph = phi i32 [ %v2_9eb0, %dec_label_pc_9e94 ], [ %v2_8508, %dec_label_pc_84f4 ]
  %storemerge148.in = and i32 %storemerge148.in.in, 128
  %storemerge148 = icmp ne i32 %storemerge148.in, 0
  store i1 %storemerge148, i1* %cpsr_c.global-to-local, align 1
  %v3_9eb8 = udiv i32 %storemerge148.in.in, 256
  store i32 %v3_9eb8, i32* %r8.global-to-local, align 4
  %v4_8590 = mul nuw nsw i32 %stack_var_-20860.0.ph, 256
  %v2_86d0 = ptrtoint i32* %stack_var_-148 to i32
  %v2_86e8 = ptrtoint i32* %stack_var_-40 to i32
  %v2_8728 = ptrtoint i32* %stack_var_-72 to i32
  %v3_8734 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v2_8748 = ptrtoint i32* %stack_var_-36 to i32
  %v1_8940 = inttoptr i32 %stack_var_-20856.0.ph to i8*
  %v1_8c94 = icmp slt i32 %v6_8200, 0
  %v2_8c94 = icmp eq i32 %v6_8200, 0
  %v4_8ce8 = inttoptr i32 %stack_var_-20856.0.ph to i32*
  %v1_8b90 = inttoptr i32 %v6_8200 to i8*
  %v2_87b4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_87b8 = ptrtoint i32* %stack_var_-200 to i32
  %v2_87bc = ptrtoint i32* %stack_var_-328 to i32
  %v2_921c = add i32 %v2_8748, -20773
  %v2_88a8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_88b4 = ptrtoint i32* %stack_var_-48 to i32
  %v5_8590 = or i32 %v4_8590, %v3_9eb8
  %v1_8594 = and i32 %v3_9eb8, 128
  %v2_8594 = icmp ne i32 %v1_8594, 0
  %v3_8594248 = udiv i32 %v5_8590, 256
  %v1_859c = add i32 %stack_var_-20872.0.ph, -1464
  %v1_85a4 = add i32 %stack_var_-20872.0.ph, -33
  %sext = mul i32 %v3_8594248, 16777216
  %v4_8710 = sdiv i32 %sext, 16777216
  %sext10 = mul i32 %v3_9eb8, 16777216
  %v4_8718 = sdiv i32 %sext10, 16777216
  %v2_85dc = add i32 %v2_86d0, 112
  br label %dec_label_pc_8528

dec_label_pc_8528:                                ; preds = %dec_label_pc_8794, %dec_label_pc_878c, %dec_label_pc_8574, %dec_label_pc_8838, %dec_label_pc_8528.preheader
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_852c = call i32 @function_13780(i32* null)
  store i32 %v2_852c, i32* %r0.global-to-local, align 4
  store i32 %v2_852c, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 20684, i32* %ip.global-to-local, align 4
  %v2_854c256 = load i32, i32* @sp, align 4
  %v3_854c257 = add i32 %v2_854c256, 20684
  %v4_854c258 = inttoptr i32 %v3_854c257 to i32*
  store i32 0, i32* %v4_854c258, align 4
  br label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_853c.dec_label_pc_853c_crit_edge:    ; preds = %dec_label_pc_8528, %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v0_853c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_854c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_8540 = add i32 %v0_853c.pre, 4
  store i32 %v1_8540, i32* %r3.global-to-local, align 4
  %v1_8544 = add i32 %v0_853c.pre, 20684
  store i32 %v1_8544, i32* %ip.global-to-local, align 4
  %v7_8548 = icmp eq i32 %v1_8540, 128
  %v2_854c = load i32, i32* @sp, align 4
  %v3_854c = add i32 %v2_854c, %v1_8544
  %v4_854c = inttoptr i32 %v3_854c to i32*
  store i32 %v0_854c.pre, i32* %v4_854c, align 4
  br i1 %v7_8548, label %dec_label_pc_8554, label %dec_label_pc_853c.dec_label_pc_853c_crit_edge

dec_label_pc_8554:                                ; preds = %dec_label_pc_853c.dec_label_pc_853c_crit_edge
  %v1_8548 = add i32 %v0_853c.pre, -124
  %v6_8548 = icmp slt i32 %v1_8548, 0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_8548, i1* %cpsr_n.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_8554 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_8554, i32* %r0.global-to-local, align 4
  %v1_8560259 = add i32 %v0_8554, 4
  store i32 %v1_8560259, i32* %r3.global-to-local, align 4
  %v1_8564260 = add i32 %v0_8554, 20556
  store i32 %v1_8564260, i32* %lr.global-to-local, align 4
  %v7_8568261 = icmp eq i32 %v1_8560259, 128
  %v2_856c262 = load i32, i32* @sp, align 4
  %v3_856c263 = add i32 %v2_856c262, %v1_8564260
  %v4_856c264 = inttoptr i32 %v3_856c263 to i32*
  store i32 %v0_8554, i32* %v4_856c264, align 4
  br i1 %v7_8568261, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_855c.dec_label_pc_855c_crit_edge:    ; preds = %dec_label_pc_8554, %dec_label_pc_855c.dec_label_pc_855c_crit_edge
  %v0_855c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_856c.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_8560 = add i32 %v0_855c.pre, 4
  store i32 %v1_8560, i32* %r3.global-to-local, align 4
  %v1_8564 = add i32 %v0_855c.pre, 20556
  store i32 %v1_8564, i32* %lr.global-to-local, align 4
  %v7_8568 = icmp eq i32 %v1_8560, 128
  %v2_856c = load i32, i32* @sp, align 4
  %v3_856c = add i32 %v2_856c, %v1_8564
  %v4_856c = inttoptr i32 %v3_856c to i32*
  store i32 %v0_856c.pre, i32* %v4_856c, align 4
  br i1 %v7_8568, label %dec_label_pc_8574, label %dec_label_pc_855c.dec_label_pc_855c_crit_edge

dec_label_pc_8574:                                ; preds = %dec_label_pc_855c.dec_label_pc_855c_crit_edge, %dec_label_pc_8554
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_83b8, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %tmp207, label %dec_label_pc_8528, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8574
  store i32 %stack_var_-20872.0.ph, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-20860.0.ph, i32* %r3.global-to-local, align 4
  store i32 %v5_8590, i32* %r2.global-to-local, align 4
  store i1 %v2_8594, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_8594248, i32* %lr.global-to-local, align 4
  %v0_8598 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8598, i32* @sl, align 4
  store i32 %v1_859c, i32* @r7, align 4
  store i32 %v0_8598, i32* @r8, align 4
  store i32 %v1_85a4, i32* @r6, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_8650

dec_label_pc_85b8:                                ; preds = %dec_label_pc_865c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v7_85b8 = icmp eq i8 %v3_8650, 2
  store i1 %v7_85b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85b8, label %dec_label_pc_8d68, label %dec_label_pc_85c0

dec_label_pc_85c0:                                ; preds = %dec_label_pc_85b8
  %v2_85c0 = icmp ugt i8 %v3_8650, 3
  store i1 %v2_85c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c0 = icmp ult i8 %v3_8650, 4
  store i1 %v6_85c0, i1* %cpsr_n.global-to-local, align 1
  %v7_85c0 = icmp eq i8 %v3_8650, 4
  store i1 %v7_85c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c0, label %dec_label_pc_890c, label %dec_label_pc_85c8

dec_label_pc_85c8:                                ; preds = %dec_label_pc_85c0
  %v2_85c8 = icmp ugt i8 %v3_8650, 5
  store i1 %v2_85c8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85c8 = icmp ult i8 %v3_8650, 6
  store i1 %v6_85c8, i1* %cpsr_n.global-to-local, align 1
  %v7_85c8 = icmp eq i8 %v3_8650, 6
  store i1 %v7_85c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85c8, label %.thread24, label %dec_label_pc_85e8

.thread24:                                        ; preds = %dec_label_pc_85c8
  %v2_85cc = add i32 %v3_8900, -1431
  %v3_85cc = inttoptr i32 %v2_85cc to i32*
  %v4_85cc = load i32, i32* %v3_85cc, align 4
  store i32 %v4_85cc, i32* %r0.global-to-local, align 4
  %v4_85d4 = udiv i32 %v4_85cc, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85d8 = mul nuw nsw i32 %v4_85d4, 4
  store i32 %v2_85dc, i32* %r1.global-to-local, align 4
  %v3_85e0 = add i32 %v4_85d8, %v2_85dc
  store i32 %v3_85e0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_85e8:                                ; preds = %dec_label_pc_85c8
  %v2_85e8 = icmp ugt i8 %v3_8650, 6
  store i1 %v2_85e8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_85e8 = icmp ult i8 %v3_8650, 7
  store i1 %v6_85e8, i1* %cpsr_n.global-to-local, align 1
  %v7_85e8 = icmp eq i8 %v3_8650, 7
  store i1 %v7_85e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_85e8, label %.thread35, label %dec_label_pc_8608

.thread35:                                        ; preds = %dec_label_pc_85e8
  %v2_85ec = add i32 %v3_8900, -1431
  %v3_85ec = inttoptr i32 %v2_85ec to i32*
  %v4_85ec = load i32, i32* %v3_85ec, align 4
  store i32 %v4_85ec, i32* %r0.global-to-local, align 4
  %v4_85f4 = udiv i32 %v4_85ec, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_85f8 = mul nuw nsw i32 %v4_85f4, 4
  store i32 %v2_85dc, i32* %r2.global-to-local, align 4
  %v3_8600 = add i32 %v4_85f8, %v2_85dc
  store i32 %v3_8600, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8608:                                ; preds = %dec_label_pc_85e8
  %v2_8608 = icmp ugt i8 %v3_8650, 9
  store i1 %v2_8608, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8608 = icmp ult i8 %v3_8650, 10
  store i1 %v6_8608, i1* %cpsr_n.global-to-local, align 1
  %v7_8608 = icmp eq i8 %v3_8650, 10
  store i1 %v7_8608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8608, label %dec_label_pc_8d30, label %dec_label_pc_8610

dec_label_pc_8610:                                ; preds = %dec_label_pc_8608
  %v1_8610 = add nsw i32 %v4_8650, -11
  %v2_8610 = icmp ugt i8 %v3_8650, 10
  store i1 %v2_8610, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8610 = icmp ult i8 %v3_8650, 11
  store i1 %v6_8610, i1* %cpsr_n.global-to-local, align 1
  %v7_8610 = icmp eq i8 %v3_8650, 11
  store i1 %v7_8610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8610, label %dec_label_pc_98a4, label %dec_label_pc_8618

dec_label_pc_8618:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8610
  store i32 0, i32* %r3.global-to-local, align 4
  store i8 0, i8* %v2_8650, align 1
  %v0_8620 = load i32, i32* @r6, align 4
  %v1_8620 = add i32 %v0_8620, -1431
  %v2_8620 = inttoptr i32 %v1_8620 to i32*
  %v3_8620 = load i32, i32* %v2_8620, align 4
  store i32 %v3_8620, i32* %r0.global-to-local, align 4
  %v1_8624 = call i32 @function_134b0(i32 %v3_8620)
  store i32 %v1_8624, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_862c = load i32, i32* @r6, align 4
  %v2_862c = add i32 %v1_862c, -1431
  %v3_862c = inttoptr i32 %v2_862c to i32*
  store i32 -1, i32* %v3_862c, align 4
  br label %dec_label_pc_8630

dec_label_pc_8630:                                ; preds = %dec_label_pc_8ccc, %dec_label_pc_8d48, %dec_label_pc_8750, %dec_label_pc_8664, %dec_label_pc_98a4, %dec_label_pc_8618
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8634 = load i32, i32* @r8, align 4
  %v1_8634 = add i32 %v0_8634, 1
  store i32 %v1_8634, i32* @r8, align 4
  %v0_8638 = load i32, i32* @r7, align 4
  %v0_863c = load i32, i32* @r6, align 4
  %v2_8640 = sub i32 %v0_839c, %v1_8634
  %v3_8640 = icmp uge i32 %v0_839c, %v1_8634
  store i1 %v3_8640, i1* %cpsr_c.global-to-local, align 1
  %v4_8640 = xor i32 %v1_8634, %v0_839c
  %v5_8640 = xor i32 %v2_8640, %v0_839c
  %v6_8640 = and i32 %v5_8640, %v4_8640
  %v7_8640 = icmp slt i32 %v6_8640, 0
  store i1 %v7_8640, i1* %cpsr_v.global-to-local, align 1
  %v8_8640 = icmp slt i32 %v2_8640, 0
  store i1 %v8_8640, i1* %cpsr_n.global-to-local, align 1
  %v9_8640 = icmp eq i32 %v0_839c, %v1_8634
  store i1 %v9_8640, i1* %cpsr_z.global-to-local, align 1
  %v1_8644 = add i32 %v0_8638, 3140
  store i32 %v1_8644, i32* @r7, align 4
  %v1_8648 = add i32 %v0_863c, 3140
  store i32 %v1_8648, i32* @r6, align 4
  br i1 %v9_8640, label %dec_label_pc_8630.dec_label_pc_878c_crit_edge, label %dec_label_pc_8650

dec_label_pc_8630.dec_label_pc_878c_crit_edge:    ; preds = %dec_label_pc_8630
  %v0_878c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_878c

dec_label_pc_8650:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630, %dec_label_pc_8580
  %v3_8900 = phi i32 [ %v1_85a4, %dec_label_pc_8580 ], [ %v1_8648, %dec_label_pc_8630 ], [ %v1_8784, %dec_label_pc_876c ]
  %v1_8650 = add i32 %v3_8900, -1427
  %v2_8650 = inttoptr i32 %v1_8650 to i8*
  %v3_8650 = load i8, i8* %v2_8650, align 1
  %v4_8650 = zext i8 %v3_8650 to i32
  store i32 %v4_8650, i32* %r3.global-to-local, align 4
  %v2_8654 = icmp ne i8 %v3_8650, 0
  store i1 %v2_8654, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8654 = icmp eq i8 %v3_8650, 0
  store i1 %v6_8654, i1* %cpsr_n.global-to-local, align 1
  %v7_8654 = icmp eq i8 %v3_8650, 1
  store i1 %v7_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8654, label %dec_label_pc_88f4, label %dec_label_pc_865c

dec_label_pc_865c:                                ; preds = %dec_label_pc_8650
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  store i1 %v6_8654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v6_8654, label %dec_label_pc_8664, label %dec_label_pc_85b8

dec_label_pc_8664:                                ; preds = %.thread43.dec_label_pc_8664_crit_edge, %dec_label_pc_865c
  %v0_8664 = phi i32 [ %v0_8664.pre, %.thread43.dec_label_pc_8664_crit_edge ], [ %v3_8900, %dec_label_pc_865c ]
  %v1_8664 = add i32 %v0_8664, -1431
  %v2_8664 = inttoptr i32 %v1_8664 to i32*
  %v3_8664 = load i32, i32* %v2_8664, align 4
  store i32 %v3_8664, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v1_8670 = add i32 %v3_8664, 1
  %v2_8670 = icmp eq i32 %v3_8664, -1
  store i1 %v2_8670, i1* %cpsr_c.global-to-local, align 1
  %v3_8670 = sub i32 0, %v3_8664
  %v4_8670 = and i32 %v1_8670, %v3_8670
  %v5_8670 = icmp slt i32 %v4_8670, 0
  store i1 %v5_8670, i1* %cpsr_v.global-to-local, align 1
  %v6_8670 = icmp slt i32 %v1_8670, 0
  store i1 %v6_8670, i1* %cpsr_n.global-to-local, align 1
  %v7_8670 = icmp eq i32 %v1_8670, 0
  store i1 %v7_8670, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-72, align 4
  %v1_8684 = xor i1 %v7_8670, true
  call void @__pseudo_cond_branch(i1 %v1_8684, i32 ptrtoint (i32* @global_var_134b0.25 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_8690 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_8690, i32* %r2.global-to-local, align 4
  %v3_8694 = call i32 @function_13db0(i32 2, i32 1, i32 %v0_8690)
  store i32 %v3_8694, i32* %r0.global-to-local, align 4
  %v1_8698 = add i32 %v3_8694, 1
  %v2_8698 = icmp eq i32 %v3_8694, -1
  store i1 %v2_8698, i1* %cpsr_c.global-to-local, align 1
  %v3_8698 = sub i32 0, %v3_8694
  %v4_8698 = and i32 %v1_8698, %v3_8698
  %v5_8698 = icmp slt i32 %v4_8698, 0
  store i1 %v5_8698, i1* %cpsr_v.global-to-local, align 1
  %v6_8698 = icmp slt i32 %v1_8698, 0
  store i1 %v6_8698, i1* %cpsr_n.global-to-local, align 1
  %v7_8698 = icmp eq i32 %v1_8698, 0
  store i1 %v7_8698, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8694, i32* @r4, align 4
  %v1_86a0 = load i32, i32* @r6, align 4
  %v2_86a0 = add i32 %v1_86a0, -1431
  %v3_86a0 = inttoptr i32 %v2_86a0 to i32*
  store i32 %v3_8694, i32* %v3_86a0, align 4
  br i1 %v7_8698, label %dec_label_pc_8630, label %dec_label_pc_86a8

dec_label_pc_86a8:                                ; preds = %dec_label_pc_8664
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_86ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86ac, i32* @r2, align 4
  %v0_86b0 = load i32, i32* %r0.global-to-local, align 4
  %v2_86b0 = call i32 @function_133c0(i32 %v0_86b0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_86b8 = or i32 %v2_86b0, 2048
  store i32 %v1_86b8, i32* @r2, align 4
  %v0_86bc = load i32, i32* @r4, align 4
  store i32 %v0_86bc, i32* %r0.global-to-local, align 4
  %v2_86c0 = call i32 @function_133c0(i32 %v0_86bc, i32 4)
  store i32 %v2_86c0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 65535, i32* %ip.global-to-local, align 4
  store i32 %v2_86d0, i32* %r3.global-to-local, align 4
  %v0_86d4 = load i32, i32* @r6, align 4
  %v1_86d4 = add i32 %v0_86d4, -1431
  %v2_86d4 = inttoptr i32 %v1_86d4 to i32*
  %v3_86d4 = load i32, i32* %v2_86d4, align 4
  store i32 %v3_86d4, i32* %r0.global-to-local, align 4
  %v0_86d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_86d8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %stack_var_-40, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 %v2_86e8, i32* %r3.global-to-local, align 4
  %v6_86f0 = call i32 @function_13d80(i32 %v3_86d4, i32 %v0_86d8, i32 8, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_86f0, i32* %r0.global-to-local, align 4
  %v0_86f4 = load i32, i32* @r6, align 4
  %v1_86f4 = add i32 %v0_86f4, -1415
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  %v3_86f4 = load i32, i32* %v2_86f4, align 4
  store i32 %v3_86f4, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_8704 = add i32 %v0_86f4, -1431
  %v2_8704 = inttoptr i32 %v1_8704 to i32*
  %v3_8704 = load i32, i32* %v2_8704, align 4
  store i32 %v3_8704, i32* %r0.global-to-local, align 4
  %v3_870c = add i32 %v0_86f4, -1427
  %v4_870c = inttoptr i32 %v3_870c to i8*
  store i8 2, i8* %v4_870c, align 1
  store i32 %v4_8710, i32* %ip.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8714, i32* %stack_var_-72, align 4
  store i32 %v4_8718, i32* %r3.global-to-local, align 4
  store i32 %v2_8728, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_8730 = load i32, i32* %sb.global-to-local, align 4
  %v1_8730 = load i32, i32* @r6, align 4
  %v2_8730 = add i32 %v1_8730, -1423
  %v3_8730 = inttoptr i32 %v2_8730 to i32*
  store i32 %v0_8730, i32* %v3_8730, align 4
  %v4_8734 = call i32 @function_13c0c(i32 %v3_8704, %sockaddr* nonnull %v3_8734, i32 16)
  store i32 %v4_8734, i32* %r0.global-to-local, align 4
  %v0_8738 = load i32, i32* @r6, align 4
  %v1_8738 = add i32 %v0_8738, -1431
  %v2_8738 = inttoptr i32 %v1_8738 to i32*
  %v3_8738 = load i32, i32* %v2_8738, align 4
  store i32 %v3_8738, i32* %r0.global-to-local, align 4
  %v3_8740 = udiv i32 %v3_8738, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8744 = mul nuw nsw i32 %v3_8740, 4
  store i32 %v3_8744, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8750:                                ; preds = %dec_label_pc_8d78, %dec_label_pc_86a8
  %v1_875c = phi i32 [ %v3_8738, %dec_label_pc_86a8 ], [ %v3_8d78, %dec_label_pc_8d78 ]
  %v3_8744.pn = phi i32 [ %v3_8744, %dec_label_pc_86a8 ], [ %v3_8d84, %dec_label_pc_8d78 ]
  %storemerge = add i32 %v3_8744.pn, %v2_8748
  store i32 %storemerge, i32* %r3.global-to-local, align 4
  %v1_8750 = add i32 %storemerge, -292
  %v2_8750 = inttoptr i32 %v1_8750 to i32*
  %v3_8750 = load i32, i32* %v2_8750, align 4
  %v1_8754 = urem i32 %v1_875c, 32
  store i32 %v1_8754, i32* %r1.global-to-local, align 4
  %v1_8758 = load i32, i32* %fp.global-to-local, align 4
  %v7_8758 = shl i32 %v1_8758, %v1_8754
  %v8_8758 = or i32 %v7_8758, %v3_8750
  store i32 %v8_8758, i32* %r2.global-to-local, align 4
  %v0_875c = load i32, i32* @sl, align 4
  %v2_875c = sub i32 %v0_875c, %v1_875c
  %v3_875c = icmp uge i32 %v0_875c, %v1_875c
  store i1 %v3_875c, i1* %cpsr_c.global-to-local, align 1
  %v4_875c = xor i32 %v0_875c, %v1_875c
  %v5_875c = xor i32 %v2_875c, %v0_875c
  %v6_875c = and i32 %v5_875c, %v4_875c
  %v7_875c = icmp slt i32 %v6_875c, 0
  store i1 %v7_875c, i1* %cpsr_v.global-to-local, align 1
  %v8_875c = icmp slt i32 %v2_875c, 0
  store i1 %v8_875c, i1* %cpsr_n.global-to-local, align 1
  %v9_875c = icmp eq i32 %v0_875c, %v1_875c
  store i1 %v9_875c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8758, i32* %v2_8750, align 4
  %v2_8764 = xor i1 %v8_875c, %v7_875c
  br i1 %v2_8764, label %dec_label_pc_8768, label %dec_label_pc_8630

dec_label_pc_8768:                                ; preds = %dec_label_pc_8750
  %v0_8768 = load i32, i32* %r0.global-to-local, align 4
  %v1_8768 = add i32 %v0_8768, 1
  store i32 %v1_8768, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_876c:                                ; preds = %dec_label_pc_8d60, %dec_label_pc_8d28, %dec_label_pc_8768
  %v0_878c98 = phi i32 [ %v1_8d60, %dec_label_pc_8d60 ], [ %v1_8d28, %dec_label_pc_8d28 ], [ %v1_8768, %dec_label_pc_8768 ]
  store i32 %v0_839c, i32* %lr.global-to-local, align 4
  %v0_8770 = load i32, i32* @r8, align 4
  %v1_8770 = add i32 %v0_8770, 1
  store i32 %v1_8770, i32* @r8, align 4
  %v0_8774 = load i32, i32* @r7, align 4
  %v0_8778 = load i32, i32* @r6, align 4
  %v2_877c = sub i32 %v0_839c, %v1_8770
  %v3_877c = icmp uge i32 %v0_839c, %v1_8770
  store i1 %v3_877c, i1* %cpsr_c.global-to-local, align 1
  %v4_877c = xor i32 %v1_8770, %v0_839c
  %v5_877c = xor i32 %v2_877c, %v0_839c
  %v6_877c = and i32 %v5_877c, %v4_877c
  %v7_877c = icmp slt i32 %v6_877c, 0
  store i1 %v7_877c, i1* %cpsr_v.global-to-local, align 1
  %v8_877c = icmp slt i32 %v2_877c, 0
  store i1 %v8_877c, i1* %cpsr_n.global-to-local, align 1
  %v9_877c = icmp eq i32 %v0_839c, %v1_8770
  store i1 %v9_877c, i1* %cpsr_z.global-to-local, align 1
  %v1_8780 = add i32 %v0_8774, 3140
  store i32 %v1_8780, i32* @r7, align 4
  %v1_8784 = add i32 %v0_8778, 3140
  store i32 %v1_8784, i32* @r6, align 4
  br i1 %v9_877c, label %dec_label_pc_878c, label %dec_label_pc_8650

dec_label_pc_878c:                                ; preds = %dec_label_pc_876c, %dec_label_pc_8630.dec_label_pc_878c_crit_edge
  %v0_87c4 = phi i32 [ %v0_878c.pre, %dec_label_pc_8630.dec_label_pc_878c_crit_edge ], [ %v0_878c98, %dec_label_pc_876c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_878c = icmp slt i32 %v0_87c4, 0
  store i1 %v1_878c, i1* %cpsr_n.global-to-local, align 1
  %v2_878c = icmp eq i32 %v0_87c4, 0
  store i1 %v2_878c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_878c, label %dec_label_pc_8528, label %dec_label_pc_8794

dec_label_pc_8794:                                ; preds = %dec_label_pc_878c
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %stack_var_-56, align 4
  store i32 %v2_87b4, i32* %ip.global-to-local, align 4
  store i32 %v2_87b8, i32* %r1.global-to-local, align 4
  store i32 %v2_87bc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v0_87c4, i32* %r0.global-to-local, align 4
  %v5_87cc = call i32 @function_136d0(i32 %v0_87c4, i32 %v2_87b8, i32 %v2_87bc, i32 0, i32 %v2_87b4)
  store i32 %v5_87cc, i32* @r4, align 4
  %v0_87d4 = load i32, i32* @r5, align 4
  store i32 %v0_87d4, i32* %r0.global-to-local, align 4
  %v1_87d8 = inttoptr i32 %v0_87d4 to i32*
  %v2_87d8 = call i32 @function_13780(i32* %v1_87d8)
  store i32 %v2_87d8, i32* %r0.global-to-local, align 4
  %v0_87dc = load i32, i32* @r4, align 4
  %v1_87dc = load i32, i32* @r5, align 4
  %v2_87dc = sub i32 %v0_87dc, %v1_87dc
  %v3_87dc = icmp uge i32 %v0_87dc, %v1_87dc
  store i1 %v3_87dc, i1* %cpsr_c.global-to-local, align 1
  %v4_87dc = xor i32 %v1_87dc, %v0_87dc
  %v5_87dc = xor i32 %v2_87dc, %v0_87dc
  %v6_87dc = and i32 %v5_87dc, %v4_87dc
  %v7_87dc = icmp slt i32 %v6_87dc, 0
  store i1 %v7_87dc, i1* %cpsr_v.global-to-local, align 1
  %v8_87dc = icmp slt i32 %v2_87dc, 0
  store i1 %v8_87dc, i1* %cpsr_n.global-to-local, align 1
  %v9_87dc = icmp eq i32 %v0_87dc, %v1_87dc
  store i1 %v9_87dc, i1* %cpsr_z.global-to-local, align 1
  %v7_87e4 = icmp sgt i32 %v0_87dc, %v1_87dc
  br i1 %v7_87e4, label %dec_label_pc_87e8, label %dec_label_pc_8528

dec_label_pc_87e8:                                ; preds = %dec_label_pc_8794
  store i32 %stack_var_-20868.0.ph, i32* @r8, align 4
  br label %dec_label_pc_8858

dec_label_pc_87f4:                                ; preds = %.thread38.dec_label_pc_87f4_crit_edge, %dec_label_pc_8868
  %v0_880c = phi i32 [ %v0_87f4.pre, %.thread38.dec_label_pc_87f4_crit_edge ], [ %v3_8858, %dec_label_pc_8868 ]
  %v3_87f4 = udiv i32 %v0_880c, 32
  store i32 %v2_8748, i32* %r2.global-to-local, align 4
  %v3_8800 = mul nuw nsw i32 %v3_87f4, 4
  %v2_8804 = add i32 %v3_8800, %v2_8748
  store i32 %v2_8804, i32* %r3.global-to-local, align 4
  %v1_8808 = add i32 %v2_8804, -164
  %v2_8808 = inttoptr i32 %v1_8808 to i32*
  %v3_8808 = load i32, i32* %v2_8808, align 4
  %v1_880c = urem i32 %v0_880c, 32
  store i32 %v1_880c, i32* %r1.global-to-local, align 4
  %v2_8810 = add nsw i32 %v1_880c, -1
  %v3_8810 = shl i32 1, %v2_8810
  %v4_8810 = and i32 %v3_8810, %v3_8808
  %v5_8810 = icmp ne i32 %v4_8810, 0
  store i1 %v5_8810, i1* %cpsr_c.global-to-local, align 1
  %v6_8810 = lshr i32 %v3_8808, %v1_880c
  store i32 %v6_8810, i32* %r2.global-to-local, align 4
  %v1_8814 = urem i32 %v6_8810, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8814 = icmp eq i32 %v1_8814, 0
  store i1 %v2_8814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8814, label %dec_label_pc_8838, label %dec_label_pc_881c

dec_label_pc_881c:                                ; preds = %dec_label_pc_87f4
  %v0_881c = load i32, i32* @r8, align 4
  %v1_881c = add i32 %v0_881c, -1452
  %v2_881c = inttoptr i32 %v1_881c to i8*
  %v3_881c = load i8, i8* %v2_881c, align 1
  %v4_881c = zext i8 %v3_881c to i32
  store i32 %v4_881c, i32* %r3.global-to-local, align 4
  %v2_8820 = icmp ugt i8 %v3_881c, 5
  store i1 %v2_8820, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8820 = icmp ult i8 %v3_881c, 6
  store i1 %v6_8820, i1* %cpsr_n.global-to-local, align 1
  %v7_8820 = icmp eq i8 %v3_881c, 6
  store i1 %v7_8820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8820, label %dec_label_pc_8dd0, label %dec_label_pc_8828

dec_label_pc_8828:                                ; preds = %dec_label_pc_881c
  %v2_8828 = icmp ugt i8 %v3_881c, 6
  store i1 %v2_8828, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8828 = icmp ult i8 %v3_881c, 7
  store i1 %v6_8828, i1* %cpsr_n.global-to-local, align 1
  %v7_8828 = icmp eq i8 %v3_881c, 7
  store i1 %v7_8828, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8828, label %dec_label_pc_940c, label %dec_label_pc_8830

dec_label_pc_8830:                                ; preds = %dec_label_pc_8828
  %v2_8830 = icmp ugt i8 %v3_881c, 9
  store i1 %v2_8830, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8830 = icmp ult i8 %v3_881c, 10
  store i1 %v6_8830, i1* %cpsr_n.global-to-local, align 1
  %v7_8830 = icmp eq i8 %v3_881c, 10
  store i1 %v7_8830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8830, label %dec_label_pc_961c, label %dec_label_pc_8838

dec_label_pc_8838:                                ; preds = %dec_label_pc_9510, %dec_label_pc_9950, %dec_label_pc_9a98, %dec_label_pc_9914, %dec_label_pc_8830, %dec_label_pc_87f4, %dec_label_pc_8858, %dec_label_pc_9d84, %dec_label_pc_9b34, %dec_label_pc_9a7c, %dec_label_pc_9934, %dec_label_pc_98fc, %dec_label_pc_9884, %dec_label_pc_9400, %dec_label_pc_88dc, %dec_label_pc_965c
  store i32 %v0_839c, i32* %r3.global-to-local, align 4
  %v1_8840 = add i32 %stack_var_-20832.0, 1
  store i32 %v1_8840, i32* %r2.global-to-local, align 4
  %v0_8844 = load i32, i32* @r8, align 4
  %v2_8848 = sub i32 %v1_8840, %v0_839c
  %v3_8848 = icmp uge i32 %v1_8840, %v0_839c
  store i1 %v3_8848, i1* %cpsr_c.global-to-local, align 1
  %v4_8848 = xor i32 %v1_8840, %v0_839c
  %v5_8848 = xor i32 %v2_8848, %v1_8840
  %v6_8848 = and i32 %v5_8848, %v4_8848
  %v7_8848 = icmp slt i32 %v6_8848, 0
  store i1 %v7_8848, i1* %cpsr_v.global-to-local, align 1
  %v8_8848 = icmp slt i32 %v2_8848, 0
  store i1 %v8_8848, i1* %cpsr_n.global-to-local, align 1
  %v9_8848 = icmp eq i32 %v1_8840, %v0_839c
  store i1 %v9_8848, i1* %cpsr_z.global-to-local, align 1
  %v1_8850 = add i32 %v0_8844, 3140
  store i32 %v1_8850, i32* @r8, align 4
  br i1 %v9_8848, label %dec_label_pc_8528, label %dec_label_pc_8858

dec_label_pc_8858:                                ; preds = %dec_label_pc_8838, %dec_label_pc_87e8
  %v0_8860 = phi i32 [ %stack_var_-20868.0.ph, %dec_label_pc_87e8 ], [ %v1_8850, %dec_label_pc_8838 ]
  %stack_var_-20832.0 = phi i32 [ %v1_87dc, %dec_label_pc_87e8 ], [ %v1_8840, %dec_label_pc_8838 ]
  %v1_8858 = add i32 %v0_8860, -1456
  %v2_8858 = inttoptr i32 %v1_8858 to i32*
  %v3_8858 = load i32, i32* %v2_8858, align 4
  store i32 %v3_8858, i32* %r0.global-to-local, align 4
  %v1_885c = add i32 %v3_8858, 1
  %v2_885c = icmp eq i32 %v3_8858, -1
  store i1 %v2_885c, i1* %cpsr_c.global-to-local, align 1
  %v3_885c = sub i32 0, %v3_8858
  %v4_885c = and i32 %v1_885c, %v3_885c
  %v5_885c = icmp slt i32 %v4_885c, 0
  store i1 %v5_885c, i1* %cpsr_v.global-to-local, align 1
  %v6_885c = icmp slt i32 %v1_885c, 0
  store i1 %v6_885c, i1* %cpsr_n.global-to-local, align 1
  %v7_885c = icmp eq i32 %v1_885c, 0
  store i1 %v7_885c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8858, i32* %sb.global-to-local, align 4
  br i1 %v7_885c, label %dec_label_pc_8838, label %dec_label_pc_8868

dec_label_pc_8868:                                ; preds = %dec_label_pc_8858
  %v3_8868 = udiv i32 %v3_8858, 32
  %v3_8870 = mul nuw nsw i32 %v3_8868, 4
  store i32 %v2_8748, i32* @lr, align 4
  %v2_8878 = add i32 %v3_8870, %v2_8748
  store i32 %v2_8878, i32* %r3.global-to-local, align 4
  %v1_887c = add i32 %v2_8878, -292
  %v2_887c = inttoptr i32 %v1_887c to i32*
  %v3_887c = load i32, i32* %v2_887c, align 4
  %v1_8880 = urem i32 %v3_8858, 32
  store i32 %v1_8880, i32* %r1.global-to-local, align 4
  %v2_8884 = add nsw i32 %v1_8880, -1
  %v3_8884 = shl i32 1, %v2_8884
  %v4_8884 = and i32 %v3_887c, %v3_8884
  %v5_8884 = icmp ne i32 %v4_8884, 0
  store i1 %v5_8884, i1* %cpsr_c.global-to-local, align 1
  %v6_8884 = lshr i32 %v3_887c, %v1_8880
  store i32 %v6_8884, i32* %r2.global-to-local, align 4
  %v1_8888 = urem i32 %v6_8884, 2
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_8888 = icmp eq i32 %v1_8888, 0
  store i1 %v2_8888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8888, label %dec_label_pc_87f4, label %dec_label_pc_8890

dec_label_pc_8890:                                ; preds = %dec_label_pc_8868
  store i32 4, i32* @r4, align 4
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 %v2_88a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 4, i32* %stack_var_-48, align 4
  store i32 %v2_88b4, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v6_88c0 = call i32 @function_13c64(i32 %v3_8858, i32 1, i32 4, i32* nonnull %stack_var_-44, i32 %v2_88b4)
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_88c8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_88c8, i32* %r3.global-to-local, align 4
  %v2_88cc = or i32 %v3_88c8, %v6_88c0
  store i32 %v2_88cc, i32* %r0.global-to-local, align 4
  %v3_88cc = icmp slt i32 %v2_88cc, 0
  store i1 %v3_88cc, i1* %cpsr_n.global-to-local, align 1
  %v4_88cc = icmp eq i32 %v2_88cc, 0
  store i1 %v4_88cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_88cc, label %.thread38, label %dec_label_pc_88dc

.thread38:                                        ; preds = %dec_label_pc_8890
  %v1_88d0 = load i32, i32* @r8, align 4
  %v2_88d0 = add i32 %v1_88d0, -1456
  %v3_88d0 = inttoptr i32 %v2_88d0 to i32*
  %v4_88d0 = load i32, i32* %v3_88d0, align 4
  store i32 %v4_88d0, i32* %r0.global-to-local, align 4
  %v1_88d4 = load i32, i32* @r4, align 4
  %v2_88d4 = trunc i32 %v1_88d4 to i8
  %v4_88d4 = add i32 %v1_88d0, -1452
  %v5_88d4 = inttoptr i32 %v4_88d4 to i8*
  store i8 %v2_88d4, i8* %v5_88d4, align 1
  %v0_88d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_88d8.pr.pr, label %.thread38.dec_label_pc_87f4_crit_edge, label %dec_label_pc_88dc

.thread38.dec_label_pc_87f4_crit_edge:            ; preds = %.thread38
  %v0_87f4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_87f4

dec_label_pc_88dc:                                ; preds = %dec_label_pc_8890, %.thread38
  %v0_88dc = load i32, i32* @r8, align 4
  %v1_88dc = add i32 %v0_88dc, -1456
  %v2_88dc = inttoptr i32 %v1_88dc to i32*
  %v3_88dc = load i32, i32* %v2_88dc, align 4
  store i32 %v3_88dc, i32* %r0.global-to-local, align 4
  %v1_88e0 = call i32 @function_134b0(i32 %v3_88dc)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r8, align 4
  %v2_88e8 = add i32 %v1_88e8, -1456
  %v3_88e8 = inttoptr i32 %v2_88e8 to i32*
  store i32 -1, i32* %v3_88e8, align 4
  %v0_88ec = load i32, i32* @r5, align 4
  %v1_88ec = trunc i32 %v0_88ec to i8
  %v2_88ec = load i32, i32* @r8, align 4
  %v3_88ec = add i32 %v2_88ec, -1452
  %v4_88ec = inttoptr i32 %v3_88ec to i8*
  store i8 %v1_88ec, i8* %v4_88ec, align 1
  br label %dec_label_pc_8838

dec_label_pc_88f4:                                ; preds = %dec_label_pc_8650
  %v1_88f4 = add i32 %v3_8900, 25
  %v2_88f4 = inttoptr i32 %v1_88f4 to i32*
  %v3_88f4 = load i32, i32* %v2_88f4, align 4
  store i32 %v3_88f4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_88f8 = icmp slt i32 %v3_88f4, 0
  store i1 %v1_88f8, i1* %cpsr_n.global-to-local, align 1
  %v2_88f8 = icmp eq i32 %v3_88f4, 0
  store i1 %v2_88f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_88f8, label %.thread43, label %.thread41

.thread41:                                        ; preds = %dec_label_pc_88f4
  store i32 4, i32* %r3.global-to-local, align 4
  store i8 4, i8* %v2_8650, align 1
  %v0_8904.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8904.pr.pr, label %.thread41..thread43_crit_edge, label %dec_label_pc_890c

.thread41..thread43_crit_edge:                    ; preds = %.thread41
  %v1_8904.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_8904.pre = load i32, i32* @r6, align 4
  %extract.t = trunc i32 %v1_8904.pre to i8
  br label %.thread43

.thread43:                                        ; preds = %.thread41..thread43_crit_edge, %dec_label_pc_88f4
  %v3_8904 = phi i32 [ %v3_8904.pre, %.thread41..thread43_crit_edge ], [ %v3_8900, %dec_label_pc_88f4 ]
  %v1_8904.off0 = phi i8 [ %extract.t, %.thread41..thread43_crit_edge ], [ 0, %dec_label_pc_88f4 ]
  %v4_8904 = add i32 %v3_8904, -1427
  %v5_8904 = inttoptr i32 %v4_8904 to i8*
  store i8 %v1_8904.off0, i8* %v5_8904, align 1
  %v0_8908.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8908.pr, label %.thread43.dec_label_pc_8664_crit_edge, label %dec_label_pc_890c

.thread43.dec_label_pc_8664_crit_edge:            ; preds = %.thread43
  %v0_8664.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8664

dec_label_pc_890c:                                ; preds = %.thread41, %.thread43, %dec_label_pc_85c0
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v0_8914 = load i32, i32* @r7, align 4
  %v1_8914 = add i32 %v0_8914, 2112
  store i32 %v1_8914, i32* %r0.global-to-local, align 4
  %v1_8918 = load i32, i32* @r6, align 4
  %v2_8918 = add i32 %v1_8918, 33
  %v3_8918 = inttoptr i32 %v2_8918 to i32*
  store i32 -1, i32* %v3_8918, align 4
  %v0_891c = load i32, i32* %r0.global-to-local, align 4
  %v1_891c = add i32 %v0_891c, 4
  store i32 %v1_891c, i32* %r0.global-to-local, align 4
  store i32 1024, i32* %r1.global-to-local, align 4
  %v0_8924 = load i32, i32* @r5, align 4
  %v1_8924 = load i32, i32* @r6, align 4
  %v2_8924 = add i32 %v1_8924, 21
  %v3_8924 = inttoptr i32 %v2_8924 to i32*
  store i32 %v0_8924, i32* %v3_8924, align 4
  %v2_8928 = call i32 @function_12b90(i32 %v1_891c, i32 1024)
  store i32 10240, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8934 = load i32, i32* @r5, align 4
  %v1_8934 = load i32, i32* @r6, align 4
  %v2_8934 = add i32 %v1_8934, 681
  %v3_8934 = inttoptr i32 %v2_8934 to i32*
  store i32 %v0_8934, i32* %v3_8934, align 4
  %v2_8938 = call i32 @function_12b90(i32 %stack_var_-20856.0.ph, i32 10240)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8940 = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  %v0_8948 = load i32, i32* @r6, align 4
  store i32 %v0_8948, i32* %r1.global-to-local, align 4
  %v2_894c = add i32 %v2_8940, %stack_var_-20856.0.ph
  store i32 %v2_894c, i32* @r0, align 4
  %v2_8950 = inttoptr i32 %v2_894c to i8*
  %v3_8950 = call i32 @function_12b18(i8* %v2_8950, i32 %v0_8948)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8958 = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d74.27 to i32), i32* %r1.global-to-local, align 4
  %v2_8964 = add i32 %v2_8958, %stack_var_-20856.0.ph
  store i32 %v2_8964, i32* @r0, align 4
  %v2_8968 = inttoptr i32 %v2_8964 to i8*
  %v3_8968 = call i32 @function_12b18(i8* %v2_8968, i32 ptrtoint (i32* @global_var_15d74.27 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8970 = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  %v0_8978 = load i32, i32* @r7, align 4
  %v1_8978 = add i32 %v0_8978, 532
  store i32 %v1_8978, i32* %r1.global-to-local, align 4
  %v2_897c = add i32 %v2_8970, %stack_var_-20856.0.ph
  store i32 %v2_897c, i32* @r0, align 4
  %v2_8980 = inttoptr i32 %v2_897c to i8*
  %v3_8980 = call i32 @function_12b18(i8* %v2_8980, i32 %v1_8978)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8988 = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_15d4c.29 to i32), i32* %r1.global-to-local, align 4
  %v2_8994 = add i32 %v2_8988, %stack_var_-20856.0.ph
  store i32 %v2_8994, i32* @r0, align 4
  %v3_8998 = inttoptr i32 %v2_8994 to i8*
  %v4_8998 = call i32 @function_12b18(i8* %v3_8998, i32 ptrtoint ([24 x i8]* @global_var_15d4c.29 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89a0 = call i32 @function_12af0(i8* %v1_8940)
  %v2_89a8 = add i32 %v2_89a0, %stack_var_-20856.0.ph
  store i32 %v2_89a8, i32* @r0, align 4
  %v0_89ac = load i32, i32* @r7, align 4
  %v1_89ac = add i32 %v0_89ac, 20
  store i32 %v1_89ac, i32* %r1.global-to-local, align 4
  %v2_89b0 = inttoptr i32 %v2_89a8 to i8*
  %v3_89b0 = call i32 @function_12b18(i8* %v2_89b0, i32 %v1_89ac)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89b8 = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d64.31 to i32), i32* %r1.global-to-local, align 4
  %v2_89c4 = add i32 %v2_89b8, %stack_var_-20856.0.ph
  store i32 %v2_89c4, i32* @r0, align 4
  %v3_89c8 = inttoptr i32 %v2_89c4 to i8*
  %v4_89c8 = call i32 @function_12b18(i8* %v3_89c8, i32 ptrtoint ([9 x i8]* @global_var_15d64.31 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89d0 = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v0_89d8 = load i32, i32* @r7, align 4
  %v2_89dc = add i32 %v2_89d0, %stack_var_-20856.0.ph
  store i32 %v2_89dc, i32* @r0, align 4
  %v1_89e0 = add i32 %v0_89d8, 789
  store i32 %v1_89e0, i32* %r1.global-to-local, align 4
  %v2_89e4 = inttoptr i32 %v2_89dc to i8*
  %v3_89e4 = call i32 @function_12b18(i8* %v2_89e4, i32 %v1_89e0)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_89ec = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r1.global-to-local, align 4
  %v2_89f8 = add i32 %v2_89ec, %stack_var_-20856.0.ph
  store i32 %v2_89f8, i32* @r0, align 4
  %v3_89fc = inttoptr i32 %v2_89f8 to i8*
  %v4_89fc = call i32 @function_12b18(i8* %v3_89fc, i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32))
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_8a04 = call i32 @function_121c4(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a0c = call i32 @function_12af0(i8* %v1_8940)
  %v0_8a10 = load i32, i32* @r5, align 4
  store i32 %v0_8a10, i32* %r1.global-to-local, align 4
  store i32 %v2_8a0c, i32* @r4, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v2_8a1c = inttoptr i32 %v0_8a10 to i32*
  %v3_8a1c = call i32 @function_120e0(i32 32, i32* %v2_8a1c)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 %v3_8a1c, i32* %r1.global-to-local, align 4
  %v1_8a28 = load i32, i32* @r4, align 4
  %v2_8a28 = add i32 %v1_8a28, %stack_var_-20856.0.ph
  store i32 %v2_8a28, i32* @r0, align 4
  %v2_8a2c = inttoptr i32 %v2_8a28 to i8*
  %v3_8a2c = call i32 @function_12b18(i8* %v2_8a2c, i32 %v3_8a1c)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_8a34 = call i32 @function_1210c(i32 32)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a3c = call i32 @function_12af0(i8* %v1_8940)
  %v2_8a44 = add i32 %v2_8a3c, %stack_var_-20856.0.ph
  store i32 %v2_8a44, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r1.global-to-local, align 4
  %v3_8a4c = inttoptr i32 %v2_8a44 to i8*
  %v4_8a4c = call i32 @function_12b18(i8* %v3_8a4c, i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32))
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_8a54 = call i32 @function_121c4(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a5c = call i32 @function_12af0(i8* %v1_8940)
  %v0_8a60 = load i32, i32* @r5, align 4
  store i32 %v0_8a60, i32* %r1.global-to-local, align 4
  store i32 %v2_8a5c, i32* @r4, align 4
  store i32 33, i32* %r0.global-to-local, align 4
  %v2_8a6c = inttoptr i32 %v0_8a60 to i32*
  %v3_8a6c = call i32 @function_120e0(i32 33, i32* %v2_8a6c)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8a6c, i32* %r1.global-to-local, align 4
  %v1_8a78 = load i32, i32* @r4, align 4
  %v2_8a78 = add i32 %v1_8a78, %stack_var_-20856.0.ph
  store i32 %v2_8a78, i32* @r0, align 4
  %v2_8a7c = inttoptr i32 %v2_8a78 to i8*
  %v3_8a7c = call i32 @function_12b18(i8* %v2_8a7c, i32 %v3_8a6c)
  store i32 33, i32* %r0.global-to-local, align 4
  %v1_8a84 = call i32 @function_1210c(i32 33)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8a8c = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8a98 = add i32 %v2_8a8c, %stack_var_-20856.0.ph
  store i32 %v2_8a98, i32* @r0, align 4
  %v3_8a9c = inttoptr i32 %v2_8a98 to i8*
  %v4_8a9c = call i32 @function_12b18(i8* %v3_8a9c, i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32))
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8aa4 = call i32 @function_121c4(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8aac = call i32 @function_12af0(i8* %v1_8940)
  %v0_8ab0 = load i32, i32* @r5, align 4
  store i32 %v0_8ab0, i32* %r1.global-to-local, align 4
  store i32 %v2_8aac, i32* @r4, align 4
  store i32 34, i32* %r0.global-to-local, align 4
  %v2_8abc = inttoptr i32 %v0_8ab0 to i32*
  %v3_8abc = call i32 @function_120e0(i32 34, i32* %v2_8abc)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8abc, i32* %r1.global-to-local, align 4
  %v1_8ac8 = load i32, i32* @r4, align 4
  %v2_8ac8 = add i32 %v1_8ac8, %stack_var_-20856.0.ph
  store i32 %v2_8ac8, i32* @r0, align 4
  %v2_8acc = inttoptr i32 %v2_8ac8 to i8*
  %v3_8acc = call i32 @function_12b18(i8* %v2_8acc, i32 %v3_8abc)
  store i32 34, i32* %r0.global-to-local, align 4
  %v1_8ad4 = call i32 @function_1210c(i32 34)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8adc = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %lr.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8ae8 = add i32 %v2_8adc, %stack_var_-20856.0.ph
  store i32 %v2_8ae8, i32* @r0, align 4
  %v3_8aec = inttoptr i32 %v2_8ae8 to i8*
  %v4_8aec = call i32 @function_12b18(i8* %v3_8aec, i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32))
  store i32 %v4_8aec, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v1_8af4 = load i32, i32* @r5, align 4
  %v2_8af4 = sub i32 %v6_8200, %v1_8af4
  %v3_8af4 = icmp uge i32 %v6_8200, %v1_8af4
  store i1 %v3_8af4, i1* %cpsr_c.global-to-local, align 1
  %v4_8af4 = xor i32 %v1_8af4, %v6_8200
  %v5_8af4 = xor i32 %v2_8af4, %v6_8200
  %v6_8af4 = and i32 %v5_8af4, %v4_8af4
  %v7_8af4 = icmp slt i32 %v6_8af4, 0
  store i1 %v7_8af4, i1* %cpsr_v.global-to-local, align 1
  %v8_8af4 = icmp slt i32 %v2_8af4, 0
  store i1 %v8_8af4, i1* %cpsr_n.global-to-local, align 1
  %v9_8af4 = icmp eq i32 %v6_8200, %v1_8af4
  store i1 %v9_8af4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8af4, label %dec_label_pc_8bcc, label %dec_label_pc_8afc

dec_label_pc_8afc:                                ; preds = %dec_label_pc_890c
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8b00 = call i32 @function_121c4(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b08 = call i32 @function_12af0(i8* %v1_8940)
  %v0_8b0c = load i32, i32* @r5, align 4
  store i32 %v0_8b0c, i32* %r1.global-to-local, align 4
  store i32 %v2_8b08, i32* @r4, align 4
  store i32 35, i32* %r0.global-to-local, align 4
  %v2_8b18 = inttoptr i32 %v0_8b0c to i32*
  %v3_8b18 = call i32 @function_120e0(i32 35, i32* %v2_8b18)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 %v3_8b18, i32* %r1.global-to-local, align 4
  %v1_8b24 = load i32, i32* @r4, align 4
  %v2_8b24 = add i32 %v1_8b24, %stack_var_-20856.0.ph
  store i32 %v2_8b24, i32* @r0, align 4
  %v2_8b28 = inttoptr i32 %v2_8b24 to i8*
  %v3_8b28 = call i32 @function_12b18(i8* %v2_8b28, i32 %v3_8b18)
  store i32 35, i32* %r0.global-to-local, align 4
  %v1_8b30 = call i32 @function_1210c(i32 35)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b38 = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8b44 = add i32 %v2_8b38, %stack_var_-20856.0.ph
  store i32 %v2_8b44, i32* @r0, align 4
  %v3_8b48 = inttoptr i32 %v2_8b44 to i8*
  %v4_8b48 = call i32 @function_12b18(i8* %v3_8b48, i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32))
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b50 = call i32 @function_12af0(i8* %v1_8940)
  %v0_8b54 = load i32, i32* @r5, align 4
  store i32 %v0_8b54, i32* %r1.global-to-local, align 4
  store i32 %v2_8b50, i32* %r4.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v2_8b60 = inttoptr i32 %v0_8b54 to i32*
  %v3_8b60 = call i32 @function_120e0(i32 40, i32* %v2_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v3_8b60, i32* %r1.global-to-local, align 4
  %v2_8b6c = add i32 %v2_8b50, %stack_var_-20856.0.ph
  store i32 %v2_8b6c, i32* @r0, align 4
  %v2_8b70 = inttoptr i32 %v2_8b6c to i8*
  %v3_8b70 = call i32 @function_12b18(i8* %v2_8b70, i32 %v3_8b60)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b78 = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_15d74.27 to i32), i32* %r1.global-to-local, align 4
  %v2_8b84 = add i32 %v2_8b78, %stack_var_-20856.0.ph
  store i32 %v2_8b84, i32* @r0, align 4
  %v2_8b88 = inttoptr i32 %v2_8b84 to i8*
  %v3_8b88 = call i32 @function_12b18(i8* %v2_8b88, i32 ptrtoint (i32* @global_var_15d74.27 to i32))
  store i32 %v6_8200, i32* %r0.global-to-local, align 4
  %v2_8b90 = call i32 @function_12af0(i8* %v1_8b90)
  store i32 %v2_8b90, i32* @r4, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8b9c = call i32 @function_12af0(i8* %v1_8940)
  %v2_8ba4 = add i32 %v2_8b9c, %stack_var_-20856.0.ph
  store i32 %v2_8ba4, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v0_8bac = load i32, i32* @r4, align 4
  store i32 %v0_8bac, i32* %r0.global-to-local, align 4
  %v3_8bb0 = trunc i32 %v0_8bac to i8
  %v4_8bb0 = call i32 @function_12fe4(i8 %v3_8bb0, i32 10, i32 %v2_8ba4)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bb8 = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8bc4 = add i32 %v2_8bb8, %stack_var_-20856.0.ph
  store i32 %v2_8bc4, i32* @r0, align 4
  %v3_8bc8 = inttoptr i32 %v2_8bc4 to i8*
  %v4_8bc8 = call i32 @function_12b18(i8* %v3_8bc8, i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32))
  store i32 %v4_8bc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8bcc

dec_label_pc_8bcc:                                ; preds = %dec_label_pc_890c, %dec_label_pc_8afc
  %v0_8bcc = load i32, i32* @r6, align 4
  %v1_8bcc = add i32 %v0_8bcc, 37
  %v2_8bcc = inttoptr i32 %v1_8bcc to i32*
  %v3_8bcc = load i32, i32* %v2_8bcc, align 4
  store i32 %v3_8bcc, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bd0 = icmp slt i32 %v3_8bcc, 0
  store i1 %v1_8bd0, i1* %cpsr_n.global-to-local, align 1
  %v2_8bd0 = icmp eq i32 %v3_8bcc, 0
  store i1 %v2_8bd0, i1* %cpsr_z.global-to-local, align 1
  %tmp208 = icmp slt i32 %v3_8bcc, 1
  br i1 %tmp208, label %dec_label_pc_8c78, label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8bcc
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8bdc = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15d84.35 to i32), i32* %r1.global-to-local, align 4
  %v2_8be8 = add i32 %v2_8bdc, %stack_var_-20856.0.ph
  store i32 %v2_8be8, i32* @r0, align 4
  %v3_8bec = inttoptr i32 %v2_8be8 to i8*
  %v4_8bec = call i32 @function_12b18(i8* %v3_8bec, i32 ptrtoint ([9 x i8]* @global_var_15d84.35 to i32))
  store i32 %v4_8bec, i32* %r0.global-to-local, align 4
  %v0_8bf0 = load i32, i32* @r6, align 4
  %v1_8bf0 = add i32 %v0_8bf0, 37
  %v2_8bf0 = inttoptr i32 %v1_8bf0 to i32*
  %v3_8bf0 = load i32, i32* %v2_8bf0, align 4
  store i32 %v3_8bf0, i32* %r3.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8bf8 = icmp slt i32 %v3_8bf0, 0
  store i1 %v1_8bf8, i1* %cpsr_n.global-to-local, align 1
  %v2_8bf8 = icmp eq i32 %v3_8bf0, 0
  store i1 %v2_8bf8, i1* %cpsr_z.global-to-local, align 1
  %v0_8bfc = load i32, i32* @r5, align 4
  store i32 %v0_8bfc, i32* %stack_var_-40, align 4
  %tmp209 = icmp slt i32 %v3_8bf0, 1
  br i1 %tmp209, label %dec_label_pc_8c60, label %dec_label_pc_8c04

dec_label_pc_8c04:                                ; preds = %dec_label_pc_8bd8, %dec_label_pc_8c04
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c08 = call i32 @function_12af0(i8* %v1_8940)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_8c10 = load i32, i32* %stack_var_-40, align 4
  store i32 %stack_var_-20856.0.ph, i32* %r3.global-to-local, align 4
  %v1_8c18 = and i32 %v3_8c10, 33554432
  %v2_8c18 = icmp ne i32 %v1_8c18, 0
  store i1 %v2_8c18, i1* %cpsr_c.global-to-local, align 1
  %v3_8c18 = mul i32 %v3_8c10, 128
  %v1_8c1c = add i32 %v3_8c18, 1472
  %v2_8c20 = add i32 %v2_8c08, %stack_var_-20856.0.ph
  store i32 %v2_8c20, i32* @r0, align 4
  %v0_8c24 = load i32, i32* @r7, align 4
  %v2_8c24 = add i32 %v1_8c1c, %v0_8c24
  store i32 %v2_8c24, i32* %r1.global-to-local, align 4
  %v2_8c28 = inttoptr i32 %v2_8c20 to i8*
  %v3_8c28 = call i32 @function_12b18(i8* %v2_8c28, i32 %v2_8c24)
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c30 = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d90.37 to i32), i32* %r1.global-to-local, align 4
  %v2_8c3c = add i32 %v2_8c30, %stack_var_-20856.0.ph
  store i32 %v2_8c3c, i32* @r0, align 4
  %v3_8c40 = inttoptr i32 %v2_8c3c to i8*
  %v4_8c40 = call i32 @function_12b18(i8* %v3_8c40, i32 ptrtoint ([3 x i8]* @global_var_15d90.37 to i32))
  store i32 %v4_8c40, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_8c48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8c48, i32* %r3.global-to-local, align 4
  %v0_8c4c = load i32, i32* @r6, align 4
  %v1_8c4c = add i32 %v0_8c4c, 37
  %v2_8c4c = inttoptr i32 %v1_8c4c to i32*
  %v3_8c4c = load i32, i32* %v2_8c4c, align 4
  store i32 %v3_8c4c, i32* %r2.global-to-local, align 4
  %v1_8c50 = add i32 %v3_8c48, 1
  store i32 %v1_8c50, i32* %ip.global-to-local, align 4
  %v2_8c54 = sub i32 %v3_8c4c, %v1_8c50
  %v3_8c54 = icmp uge i32 %v3_8c4c, %v1_8c50
  store i1 %v3_8c54, i1* %cpsr_c.global-to-local, align 1
  %v4_8c54 = xor i32 %v3_8c4c, %v1_8c50
  %v5_8c54 = xor i32 %v2_8c54, %v3_8c4c
  %v6_8c54 = and i32 %v5_8c54, %v4_8c54
  %v7_8c54 = icmp slt i32 %v6_8c54, 0
  store i1 %v7_8c54, i1* %cpsr_v.global-to-local, align 1
  %v8_8c54 = icmp slt i32 %v2_8c54, 0
  store i1 %v8_8c54, i1* %cpsr_n.global-to-local, align 1
  %v9_8c54 = icmp eq i32 %v3_8c4c, %v1_8c50
  store i1 %v9_8c54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8c50, i32* %stack_var_-40, align 4
  %v8_8c5c = icmp sgt i32 %v3_8c4c, %v1_8c50
  br i1 %v8_8c5c, label %dec_label_pc_8c04, label %dec_label_pc_8c60

dec_label_pc_8c60:                                ; preds = %dec_label_pc_8c04, %dec_label_pc_8bd8
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c64 = call i32 @function_12af0(i8* %v1_8940)
  %v2_8c6c = add i32 %v2_8c64, %stack_var_-20856.0.ph
  store i32 %v2_8c6c, i32* @r0, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r1.global-to-local, align 4
  %v3_8c74 = inttoptr i32 %v2_8c6c to i8*
  %v4_8c74 = call i32 @function_12b18(i8* %v3_8c74, i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32))
  store i32 %v4_8c74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8c78

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8bcc, %dec_label_pc_8c60
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8c7c = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r1.global-to-local, align 4
  %v2_8c88 = add i32 %v2_8c7c, %stack_var_-20856.0.ph
  store i32 %v2_8c88, i32* @r0, align 4
  %v3_8c8c = inttoptr i32 %v2_8c88 to i8*
  %v4_8c8c = call i32 @function_12b18(i8* %v3_8c8c, i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32))
  store i32 %v4_8c8c, i32* %r0.global-to-local, align 4
  store i32 %v6_8200, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 %v1_8c94, i1* %cpsr_n.global-to-local, align 1
  store i1 %v2_8c94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8c94, label %dec_label_pc_8cb4, label %dec_label_pc_8c9c

dec_label_pc_8c9c:                                ; preds = %dec_label_pc_8c78
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v2_8ca0 = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %ip.global-to-local, align 4
  store i32 %v6_8200, i32* %r1.global-to-local, align 4
  %v2_8cac = add i32 %v2_8ca0, %stack_var_-20856.0.ph
  store i32 %v2_8cac, i32* @r0, align 4
  %v2_8cb0 = inttoptr i32 %v2_8cac to i8*
  %v3_8cb0 = call i32 @function_12b18(i8* %v2_8cb0, i32 %v6_8200)
  store i32 %v3_8cb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8cb4

dec_label_pc_8cb4:                                ; preds = %dec_label_pc_8c78, %dec_label_pc_8c9c
  %v0_8cb4 = load i32, i32* @r7, align 4
  %v1_8cb4 = add i32 %v0_8cb4, 1440
  store i32 %v1_8cb4, i32* %r4.global-to-local, align 4
  %v0_8cb8 = load i32, i32* @r6, align 4
  store i32 %v0_8cb8, i32* %r0.global-to-local, align 4
  store i32 %v1_8cb4, i32* %r1.global-to-local, align 4
  %v2_8cc0 = inttoptr i32 %v0_8cb8 to i8*
  %v3_8cc0 = call i32 @function_12ed0(i8* %v2_8cc0, i32 %v1_8cb4)
  store i32 %v3_8cc0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8cc4 = icmp slt i32 %v3_8cc0, 0
  store i1 %v1_8cc4, i1* %cpsr_n.global-to-local, align 1
  %v2_8cc4 = icmp eq i32 %v3_8cc0, 0
  store i1 %v2_8cc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8cc4, label %dec_label_pc_960c, label %dec_label_pc_8ccc

dec_label_pc_8ccc:                                ; preds = %dec_label_pc_8cb4, %dec_label_pc_960c
  store i32 %stack_var_-20856.0.ph, i32* %r0.global-to-local, align 4
  %v0_8cd0 = load i32, i32* @r6, align 4
  %v1_8cd0 = add i32 %v0_8cd0, -1431
  %v2_8cd0 = inttoptr i32 %v1_8cd0 to i32*
  %v3_8cd0 = load i32, i32* %v2_8cd0, align 4
  store i32 %v3_8cd0, i32* @r4, align 4
  %v2_8cd4 = call i32 @function_12af0(i8* %v1_8940)
  store i32 %stack_var_-20856.0.ph, i32* %r1.global-to-local, align 4
  store i32 %v2_8cd4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8ce4 = load i32, i32* @r4, align 4
  store i32 %v0_8ce4, i32* %r0.global-to-local, align 4
  %v5_8ce8 = call i32 @function_13d20(i32 %v0_8ce4, i32* %v4_8ce8, i32 %v2_8cd4, i32 16384)
  store i32 %v5_8ce8, i32* %r0.global-to-local, align 4
  %v0_8cec = load i32, i32* @r6, align 4
  %v1_8cec = add i32 %v0_8cec, -1431
  %v2_8cec = inttoptr i32 %v1_8cec to i32*
  %v3_8cec = load i32, i32* %v2_8cec, align 4
  store i32 %v3_8cec, i32* %r0.global-to-local, align 4
  %v3_8cf4 = udiv i32 %v3_8cec, 32
  %v3_8cf8 = mul nuw nsw i32 %v3_8cf4, 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8d00 = add i32 %v3_8cf8, %v2_8748
  store i32 %v2_8d00, i32* %r3.global-to-local, align 4
  %v1_8d04 = add i32 %v2_8d00, -164
  %v2_8d04 = inttoptr i32 %v1_8d04 to i32*
  %v3_8d04 = load i32, i32* %v2_8d04, align 4
  %v1_8d08 = urem i32 %v3_8cec, 32
  %v1_8d0c = load i32, i32* %fp.global-to-local, align 4
  %v7_8d0c = shl i32 %v1_8d0c, %v1_8d08
  %v8_8d0c = or i32 %v7_8d0c, %v3_8d04
  store i32 %v8_8d0c, i32* %r2.global-to-local, align 4
  %v0_8d10 = load i32, i32* @sl, align 4
  %v2_8d10 = sub i32 %v0_8d10, %v3_8cec
  %v3_8d10 = icmp uge i32 %v0_8d10, %v3_8cec
  store i1 %v3_8d10, i1* %cpsr_c.global-to-local, align 1
  %v4_8d10 = xor i32 %v0_8d10, %v3_8cec
  %v5_8d10 = xor i32 %v2_8d10, %v0_8d10
  %v6_8d10 = and i32 %v5_8d10, %v4_8d10
  %v7_8d10 = icmp slt i32 %v6_8d10, 0
  store i1 %v7_8d10, i1* %cpsr_v.global-to-local, align 1
  %v8_8d10 = icmp slt i32 %v2_8d10, 0
  store i1 %v8_8d10, i1* %cpsr_n.global-to-local, align 1
  %v9_8d10 = icmp eq i32 %v0_8d10, %v3_8cec
  store i1 %v9_8d10, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r1.global-to-local, align 4
  store i32 %v8_8d0c, i32* %v2_8d04, align 4
  %v0_8d1c = load i32, i32* %sb.global-to-local, align 4
  %v1_8d1c = load i32, i32* @r6, align 4
  %v2_8d1c = add i32 %v1_8d1c, -1419
  %v3_8d1c = inttoptr i32 %v2_8d1c to i32*
  store i32 %v0_8d1c, i32* %v3_8d1c, align 4
  %v0_8d20 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d20 = trunc i32 %v0_8d20 to i8
  %v2_8d20 = load i32, i32* @r6, align 4
  %v3_8d20 = add i32 %v2_8d20, -1427
  %v4_8d20 = inttoptr i32 %v3_8d20 to i8*
  store i8 %v1_8d20, i8* %v4_8d20, align 1
  %v0_8d24 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_8d24 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_8d24 = xor i1 %v0_8d24, %v1_8d24
  br i1 %v2_8d24, label %dec_label_pc_8d28, label %dec_label_pc_8630

dec_label_pc_8d28:                                ; preds = %dec_label_pc_8ccc
  %v0_8d28 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d28 = add i32 %v0_8d28, 1
  store i32 %v1_8d28, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d30:                                ; preds = %dec_label_pc_8608
  %v1_8d30 = add i32 %v3_8900, -1431
  %v2_8d30 = inttoptr i32 %v1_8d30 to i32*
  %v3_8d30 = load i32, i32* %v2_8d30, align 4
  store i32 %v3_8d30, i32* %r0.global-to-local, align 4
  %v3_8d38 = udiv i32 %v3_8d30, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d3c = mul nuw nsw i32 %v3_8d38, 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8d44 = add i32 %v3_8d3c, %v2_8748
  store i32 %v2_8d44, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8d48

dec_label_pc_8d48:                                ; preds = %.thread24, %.thread35, %dec_label_pc_8d30
  %v1_8d54 = phi i32 [ %v4_85ec, %.thread35 ], [ %v4_85cc, %.thread24 ], [ %v3_8d30, %dec_label_pc_8d30 ]
  %v1_8d58 = phi i32 [ %v3_8600, %.thread35 ], [ %v3_85e0, %.thread24 ], [ %v2_8d44, %dec_label_pc_8d30 ]
  %v1_8d48 = add i32 %v1_8d58, -164
  %v2_8d48 = inttoptr i32 %v1_8d48 to i32*
  %v3_8d48 = load i32, i32* %v2_8d48, align 4
  %v1_8d4c = urem i32 %v1_8d54, 32
  store i32 %v1_8d4c, i32* %r1.global-to-local, align 4
  %v1_8d50 = load i32, i32* %fp.global-to-local, align 4
  %v7_8d50 = shl i32 %v1_8d50, %v1_8d4c
  %v8_8d50 = or i32 %v7_8d50, %v3_8d48
  store i32 %v8_8d50, i32* %r2.global-to-local, align 4
  %v0_8d54 = load i32, i32* @sl, align 4
  %v2_8d54 = sub i32 %v0_8d54, %v1_8d54
  %v3_8d54 = icmp uge i32 %v0_8d54, %v1_8d54
  store i1 %v3_8d54, i1* %cpsr_c.global-to-local, align 1
  %v4_8d54 = xor i32 %v0_8d54, %v1_8d54
  %v5_8d54 = xor i32 %v2_8d54, %v0_8d54
  %v6_8d54 = and i32 %v5_8d54, %v4_8d54
  %v7_8d54 = icmp slt i32 %v6_8d54, 0
  store i1 %v7_8d54, i1* %cpsr_v.global-to-local, align 1
  %v8_8d54 = icmp slt i32 %v2_8d54, 0
  store i1 %v8_8d54, i1* %cpsr_n.global-to-local, align 1
  %v9_8d54 = icmp eq i32 %v0_8d54, %v1_8d54
  store i1 %v9_8d54, i1* %cpsr_z.global-to-local, align 1
  store i32 %v8_8d50, i32* %v2_8d48, align 4
  %v2_8d5c = xor i1 %v8_8d54, %v7_8d54
  br i1 %v2_8d5c, label %dec_label_pc_8d60, label %dec_label_pc_8630

dec_label_pc_8d60:                                ; preds = %dec_label_pc_8d48
  %v0_8d60 = load i32, i32* %r0.global-to-local, align 4
  %v1_8d60 = add i32 %v0_8d60, 1
  store i32 %v1_8d60, i32* @sl, align 4
  br label %dec_label_pc_876c

dec_label_pc_8d68:                                ; preds = %dec_label_pc_85b8
  %v1_8d68 = add i32 %v3_8900, -1423
  %v2_8d68 = inttoptr i32 %v1_8d68 to i32*
  %v3_8d68 = load i32, i32* %v2_8d68, align 4
  %v1_8d6c = load i32, i32* %sb.global-to-local, align 4
  %v2_8d6c = sub i32 %v1_8d6c, %v3_8d68
  store i32 %v2_8d6c, i32* %r3.global-to-local, align 4
  %v1_8d70 = add i32 %v2_8d6c, -30
  %v2_8d70 = icmp ugt i32 %v2_8d6c, 29
  store i1 %v2_8d70, i1* %cpsr_c.global-to-local, align 1
  %v3_8d70 = sub i32 29, %v2_8d6c
  %v4_8d70 = and i32 %v3_8d70, %v2_8d6c
  %v5_8d70 = icmp slt i32 %v4_8d70, 0
  store i1 %v5_8d70, i1* %cpsr_v.global-to-local, align 1
  %v6_8d70 = icmp slt i32 %v1_8d70, 0
  store i1 %v6_8d70, i1* %cpsr_n.global-to-local, align 1
  %v7_8d70 = icmp eq i32 %v2_8d6c, 30
  store i1 %v7_8d70, i1* %cpsr_z.global-to-local, align 1
  %v2_8d74 = xor i1 %v7_8d70, true
  %v3_8d74 = and i1 %v2_8d70, %v2_8d74
  br i1 %v3_8d74, label %dec_label_pc_8618, label %dec_label_pc_8d78

dec_label_pc_8d78:                                ; preds = %dec_label_pc_8d68
  %v1_8d78 = add i32 %v3_8900, -1431
  %v2_8d78 = inttoptr i32 %v1_8d78 to i32*
  %v3_8d78 = load i32, i32* %v2_8d78, align 4
  store i32 %v3_8d78, i32* %r0.global-to-local, align 4
  %v3_8d80 = udiv i32 %v3_8d78, 32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_8d84 = mul nuw nsw i32 %v3_8d80, 4
  store i32 %v3_8d84, i32* %r3.global-to-local, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_8750

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_881c
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  %v2_8dd8 = call i32 @function_12b90(i32 %v2_8280, i32 10240)
  store i32 %v2_8dd8, i32* %r0.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_8de4 = load i32, i32* @r8, align 4
  %v1_8de4 = add i32 %v0_8de4, -1456
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v5_8df0 = call i32 @function_13cc0(i32 %v3_8de4, i32* nonnull %stack_var_-20809, i32 10240, i32 16386)
  store i32 %v5_8df0, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %fp.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8df8 = icmp slt i32 %v5_8df0, 0
  store i1 %v1_8df8, i1* %cpsr_n.global-to-local, align 1
  %v2_8df8 = icmp eq i32 %v5_8df0, 0
  store i1 %v2_8df8, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  %tmp210 = icmp slt i32 %v5_8df0, 1
  br i1 %tmp210, label %dec_label_pc_9a7c, label %dec_label_pc_8e04

dec_label_pc_8e04:                                ; preds = %dec_label_pc_8dd0
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  store i32 %v5_8df0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d94.39 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_8e14 = call i32 @function_12bb4(i32 %v2_8280, i32 %v5_8df0, i32 ptrtoint ([5 x i8]* @global_var_15d94.39 to i32), i32 4)
  store i32 %v5_8e14, i32* %r0.global-to-local, align 4
  %v1_8e18 = add i32 %v5_8e14, 1
  %v2_8e18 = icmp eq i32 %v5_8e14, -1
  store i1 %v2_8e18, i1* %cpsr_c.global-to-local, align 1
  %v3_8e18 = sub i32 0, %v5_8e14
  %v4_8e18 = and i32 %v1_8e18, %v3_8e18
  %v5_8e18 = icmp slt i32 %v4_8e18, 0
  store i1 %v5_8e18, i1* %cpsr_v.global-to-local, align 1
  %v6_8e18 = icmp slt i32 %v1_8e18, 0
  store i1 %v6_8e18, i1* %cpsr_n.global-to-local, align 1
  %v7_8e18 = icmp eq i32 %v1_8e18, 0
  store i1 %v7_8e18, i1* %cpsr_z.global-to-local, align 1
  %v0_9914 = load i32, i32* %fp.global-to-local, align 4
  br i1 %v7_8e18, label %dec_label_pc_9914, label %dec_label_pc_8e20

dec_label_pc_8e20:                                ; preds = %dec_label_pc_8e04, %dec_label_pc_9914
  store i32 ptrtoint ([5 x i8]* @global_var_15d94.39 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v0_9914, i32* %r1.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_8e30 = call i32 @function_12bb4(i32 %v2_8280, i32 %v0_9914, i32 ptrtoint ([5 x i8]* @global_var_15d94.39 to i32), i32 4)
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_8e3c = add i32 %v5_8e30, %v2_8748
  store i32 %v2_8e3c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  %v3_8e44 = load i32, i32* @r6, align 4
  %v4_8e44 = add i32 %v3_8e44, %v2_8e3c
  %v5_8e44 = inttoptr i32 %v4_8e44 to i8*
  store i8 0, i8* %v5_8e44, align 1
  %v0_8e48 = load i32, i32* @r5, align 4
  store i32 %v0_8e48, i32* %r1.global-to-local, align 4
  store i32 46, i32* %r0.global-to-local, align 4
  %v2_8e50 = inttoptr i32 %v0_8e48 to i32*
  %v3_8e50 = call i32 @function_120e0(i32 46, i32* %v2_8e50)
  %v0_8e54 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e54, i32* @r1, align 4
  store i32 %v3_8e50, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e60 = call i32 @function_12e44(i8* %tmp199, i32 %v0_8e54, i32 %v3_8e50)
  store i32 %v4_8e60, i32* %r0.global-to-local, align 4
  %v1_8e64 = add i32 %v4_8e60, 1
  %v2_8e64 = icmp eq i32 %v4_8e60, -1
  store i1 %v2_8e64, i1* %cpsr_c.global-to-local, align 1
  %v3_8e64 = sub i32 0, %v4_8e60
  %v4_8e64 = and i32 %v1_8e64, %v3_8e64
  %v5_8e64 = icmp slt i32 %v4_8e64, 0
  store i1 %v5_8e64, i1* %cpsr_v.global-to-local, align 1
  %v6_8e64 = icmp slt i32 %v1_8e64, 0
  store i1 %v6_8e64, i1* %cpsr_n.global-to-local, align 1
  %v7_8e64 = icmp eq i32 %v1_8e64, 0
  store i1 %v7_8e64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e64, label %.thread45, label %bb211

bb211:                                            ; preds = %dec_label_pc_8e20
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_8e6c = load i32, i32* @r8, align 4
  %v3_8e6c = add i32 %v2_8e6c, -4
  %v4_8e6c = inttoptr i32 %v3_8e6c to i32*
  store i32 2, i32* %v4_8e6c, align 4
  br label %.thread45

.thread45:                                        ; preds = %dec_label_pc_8e20, %bb211
  %v0_8e70 = load i32, i32* @r5, align 4
  store i32 %v0_8e70, i32* %r1.global-to-local, align 4
  store i32 45, i32* %r0.global-to-local, align 4
  %v2_8e78 = inttoptr i32 %v0_8e70 to i32*
  %v3_8e78 = call i32 @function_120e0(i32 45, i32* %v2_8e78)
  %v0_8e7c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8e7c, i32* @r1, align 4
  store i32 %v3_8e78, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8e88 = call i32 @function_12e44(i8* %tmp199, i32 %v0_8e7c, i32 %v3_8e78)
  store i32 %v4_8e88, i32* %r0.global-to-local, align 4
  %v1_8e8c = add i32 %v4_8e88, 1
  %v2_8e8c = icmp eq i32 %v4_8e88, -1
  store i1 %v2_8e8c, i1* %cpsr_c.global-to-local, align 1
  %v3_8e8c = sub i32 0, %v4_8e88
  %v4_8e8c = and i32 %v1_8e8c, %v3_8e8c
  %v5_8e8c = icmp slt i32 %v4_8e8c, 0
  store i1 %v5_8e8c, i1* %cpsr_v.global-to-local, align 1
  %v6_8e8c = icmp slt i32 %v1_8e8c, 0
  store i1 %v6_8e8c, i1* %cpsr_n.global-to-local, align 1
  %v7_8e8c = icmp eq i32 %v1_8e8c, 0
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e8c, label %.thread46, label %bb212

bb212:                                            ; preds = %.thread45
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8e94 = load i32, i32* @r8, align 4
  %v3_8e94 = add i32 %v2_8e94, -4
  %v4_8e94 = inttoptr i32 %v3_8e94 to i32*
  store i32 1, i32* %v4_8e94, align 4
  br label %.thread46

.thread46:                                        ; preds = %.thread45, %bb212
  %v0_8e98 = load i32, i32* @r5, align 4
  store i32 %v0_8e98, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v1_8ea0 = load i32, i32* @r8, align 4
  %v2_8ea0 = inttoptr i32 %v1_8ea0 to i32*
  store i32 %v0_8e98, i32* %v2_8ea0, align 4
  %v2_8ea4 = inttoptr i32 %v0_8e98 to i32*
  %v3_8ea4 = call i32 @function_120e0(i32 44, i32* %v2_8ea4)
  %v0_8ea8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ea8, i32* @r1, align 4
  store i32 %v3_8ea4, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8eb4 = call i32 @function_12e44(i8* %tmp199, i32 %v0_8ea8, i32 %v3_8ea4)
  store i32 %v4_8eb4, i32* %r0.global-to-local, align 4
  %v1_8eb8 = add i32 %v4_8eb4, 1
  %v2_8eb8 = icmp eq i32 %v4_8eb4, -1
  store i1 %v2_8eb8, i1* %cpsr_c.global-to-local, align 1
  %v3_8eb8 = sub i32 0, %v4_8eb4
  %v4_8eb8 = and i32 %v1_8eb8, %v3_8eb8
  %v5_8eb8 = icmp slt i32 %v4_8eb8, 0
  store i1 %v5_8eb8, i1* %cpsr_v.global-to-local, align 1
  %v6_8eb8 = icmp slt i32 %v1_8eb8, 0
  store i1 %v6_8eb8, i1* %cpsr_n.global-to-local, align 1
  %v7_8eb8 = icmp eq i32 %v1_8eb8, 0
  store i1 %v7_8eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8eb8, label %.thread47, label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %.thread46
  %v0_8ec0 = load i32, i32* @r5, align 4
  store i32 %v0_8ec0, i32* %r1.global-to-local, align 4
  store i32 44, i32* %r0.global-to-local, align 4
  %v2_8ec8 = inttoptr i32 %v0_8ec0 to i32*
  %v3_8ec8 = call i32 @function_120e0(i32 44, i32* %v2_8ec8)
  %v0_8ecc = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8ecc, i32* @r1, align 4
  store i32 %v3_8ec8, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8ed8 = call i32 @function_12e44(i8* %tmp199, i32 %v0_8ecc, i32 %v3_8ec8)
  store i32 %v4_8ed8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8ee4 = add i32 %v4_8ed8, %v2_8748
  store i32 %v2_8ee4, i32* %r3.global-to-local, align 4
  %v1_8ee8 = load i32, i32* @r6, align 4
  %v2_8ee8 = add i32 %v1_8ee8, %v2_8ee4
  %v3_8ee8 = inttoptr i32 %v2_8ee8 to i8*
  %v4_8ee8 = load i8, i8* %v3_8ee8, align 1
  %v2_8ef0 = icmp ugt i8 %v4_8ee8, 31
  store i1 %v2_8ef0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8ef0 = icmp ult i8 %v4_8ee8, 32
  store i1 %v6_8ef0, i1* %cpsr_n.global-to-local, align 1
  %v7_8ef0 = icmp eq i8 %v4_8ee8, 32
  store i1 %v7_8ef0, i1* %cpsr_z.global-to-local, align 1
  %v2_8ef8 = zext i1 %v7_8ef0 to i32
  %v2_8ef8.v4_8ed8 = add i32 %v2_8ef8, %v4_8ed8
  store i32 %v2_8ef8.v4_8ed8, i32* @r4, align 4
  %v2_8efc = add i32 %v2_8ef8.v4_8ed8, %v2_8280
  store i32 %v2_8efc, i32* @r6, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8efc, i32* %r0.global-to-local, align 4
  %v1_8f08 = load i32, i32* %fp.global-to-local, align 4
  %v2_8f08 = sub i32 %v1_8f08, %v2_8ef8.v4_8ed8
  store i32 %v2_8f08, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8f10 = call i32 @function_12bb4(i32 %v2_8efc, i32 %v2_8f08, i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32 2)
  store i32 %v5_8f10, i32* %r0.global-to-local, align 4
  %v1_8f14 = add i32 %v5_8f10, 1
  %v2_8f14 = icmp eq i32 %v5_8f10, -1
  store i1 %v2_8f14, i1* %cpsr_c.global-to-local, align 1
  %v3_8f14 = sub i32 0, %v5_8f10
  %v4_8f14 = and i32 %v1_8f14, %v3_8f14
  %v5_8f14 = icmp slt i32 %v4_8f14, 0
  store i1 %v5_8f14, i1* %cpsr_v.global-to-local, align 1
  %v6_8f14 = icmp slt i32 %v1_8f14, 0
  store i1 %v6_8f14, i1* %cpsr_n.global-to-local, align 1
  %v7_8f14 = icmp eq i32 %v1_8f14, 0
  store i1 %v7_8f14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8f10, i32* %r2.global-to-local, align 4
  br i1 %v7_8f14, label %.thread47, label %dec_label_pc_8f20

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8ec0
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_8f28 = load i32, i32* @r4, align 4
  %v2_8f28 = add i32 %v1_8f28, %v2_8748
  %v1_8f2c = add i32 %v5_8f10, -1
  %v2_8f2c = icmp ne i32 %v5_8f10, 0
  store i1 %v2_8f2c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f2c = sub i32 0, %v5_8f10
  %v4_8f2c = and i32 %v5_8f10, %v3_8f2c
  %v5_8f2c = icmp slt i32 %v4_8f2c, 0
  store i1 %v5_8f2c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f2c = icmp slt i32 %v1_8f2c, 0
  store i1 %v6_8f2c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f2c = icmp eq i32 %v5_8f10, 1
  store i1 %v7_8f2c, i1* %cpsr_z.global-to-local, align 1
  %v1_8f30 = add i32 %v2_8f28, -20736
  store i32 %v1_8f30, i32* %r3.global-to-local, align 4
  %v7_8f34 = icmp sgt i32 %v5_8f10, 1
  br i1 %v7_8f34, label %bb213, label %bb214

bb213:                                            ; preds = %dec_label_pc_8f20
  %v9_8f34 = add i32 %v5_8f10, -2
  store i32 %v9_8f34, i32* %r2.global-to-local, align 4
  br label %bb214

bb214:                                            ; preds = %dec_label_pc_8f20, %bb213
  %v3_8f3c = phi i32 [ %v5_8f10, %dec_label_pc_8f20 ], [ %v9_8f34, %bb213 ]
  %v1_8f38 = add i32 %v2_8f28, -20773
  store i32 %v1_8f38, i32* %r3.global-to-local, align 4
  %v0_8f3c = load i32, i32* @r5, align 4
  %v1_8f3c = trunc i32 %v0_8f3c to i8
  %v4_8f3c = add i32 %v3_8f3c, %v1_8f38
  %v5_8f3c = inttoptr i32 %v4_8f3c to i8*
  store i8 %v1_8f3c, i8* %v5_8f3c, align 1
  %v0_8f40 = load i32, i32* @r6, align 4
  store i32 %v0_8f40, i32* %r0.global-to-local, align 4
  %v1_8f44 = inttoptr i32 %v0_8f40 to i8*
  %v2_8f44 = call i32 @function_12af0(i8* %v1_8f44)
  %v0_8f48 = load i32, i32* @r5, align 4
  store i32 %v0_8f48, i32* %r1.global-to-local, align 4
  store i32 %v2_8f44, i32* @r4, align 4
  store i32 43, i32* %r0.global-to-local, align 4
  %v2_8f54 = inttoptr i32 %v0_8f48 to i32*
  %v3_8f54 = call i32 @function_120e0(i32 43, i32* %v2_8f54)
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* @r1, align 4
  store i32 %v3_8f54, i32* %r2.global-to-local, align 4
  %v0_8f60 = load i32, i32* @r6, align 4
  store i32 %v0_8f60, i32* %r0.global-to-local, align 4
  %v3_8f64 = inttoptr i32 %v0_8f60 to i8*
  %v4_8f64 = call i32 @function_12e44(i8* %v3_8f64, i32 %v0_8f58, i32 %v3_8f54)
  store i32 %v4_8f64, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_8f68 = icmp slt i32 %v4_8f64, 0
  store i1 %v1_8f68, i1* %cpsr_n.global-to-local, align 1
  %v2_8f68 = icmp eq i32 %v4_8f64, 0
  store i1 %v2_8f68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f68, label %.thread47, label %bb215

bb215:                                            ; preds = %bb214
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_8f70 = load i32, i32* @r8, align 4
  %v3_8f70 = inttoptr i32 %v2_8f70 to i32*
  store i32 1, i32* %v3_8f70, align 4
  br label %.thread47

.thread47:                                        ; preds = %bb214, %dec_label_pc_8ec0, %.thread46, %bb215
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v1_8f80 = load i32, i32* @r8, align 4
  %v2_8f80 = add i32 %v1_8f80, 4
  %v3_8f80 = inttoptr i32 %v2_8f80 to i32*
  store i32 0, i32* %v3_8f80, align 4
  %v3_8f84 = call i32 @function_120e0(i32 41, i32* null)
  %v0_8f88 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8f88, i32* @r1, align 4
  store i32 %v3_8f84, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8f94 = call i32 @function_12e44(i8* %tmp199, i32 %v0_8f88, i32 %v3_8f84)
  store i32 %v4_8f94, i32* %r0.global-to-local, align 4
  %v1_8f9c = add i32 %v4_8f94, 1
  %v2_8f9c = icmp eq i32 %v4_8f94, -1
  store i1 %v2_8f9c, i1* %cpsr_c.global-to-local, align 1
  %v3_8f9c = sub i32 0, %v4_8f94
  %v4_8f9c = and i32 %v1_8f9c, %v3_8f9c
  %v5_8f9c = icmp slt i32 %v4_8f9c, 0
  store i1 %v5_8f9c, i1* %cpsr_v.global-to-local, align 1
  %v6_8f9c = icmp slt i32 %v1_8f9c, 0
  store i1 %v6_8f9c, i1* %cpsr_n.global-to-local, align 1
  %v7_8f9c = icmp eq i32 %v1_8f9c, 0
  store i1 %v7_8f9c, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_8f9c, label %.thread48, label %dec_label_pc_8fa8

dec_label_pc_8fa8:                                ; preds = %.thread47
  %v0_8fa8 = load i32, i32* @r6, align 4
  store i32 %v0_8fa8, i32* %r1.global-to-local, align 4
  store i32 41, i32* %r0.global-to-local, align 4
  %v2_8fb0 = inttoptr i32 %v0_8fa8 to i32*
  %v3_8fb0 = call i32 @function_120e0(i32 41, i32* %v2_8fb0)
  %v0_8fb4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_8fb4, i32* @r1, align 4
  store i32 %v3_8fb0, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_8fc0 = call i32 @function_12e44(i8* %tmp199, i32 %v0_8fb4, i32 %v3_8fb0)
  store i32 %v4_8fc0, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_8fcc = add i32 %v4_8fc0, %v2_8748
  store i32 %v2_8fcc, i32* %r3.global-to-local, align 4
  %v1_8fd0 = load i32, i32* @r5, align 4
  %v2_8fd0 = add i32 %v1_8fd0, %v2_8fcc
  %v3_8fd0 = inttoptr i32 %v2_8fd0 to i8*
  %v4_8fd0 = load i8, i8* %v3_8fd0, align 1
  %v2_8fd8 = icmp ugt i8 %v4_8fd0, 31
  store i1 %v2_8fd8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_8fd8 = icmp ult i8 %v4_8fd0, 32
  store i1 %v6_8fd8, i1* %cpsr_n.global-to-local, align 1
  %v7_8fd8 = icmp eq i8 %v4_8fd0, 32
  store i1 %v7_8fd8, i1* %cpsr_z.global-to-local, align 1
  %v2_8fe0 = zext i1 %v7_8fd8 to i32
  %v2_8fe0.v4_8fc0 = add i32 %v2_8fe0, %v4_8fc0
  store i32 %v2_8fe0.v4_8fc0, i32* @r4, align 4
  %v2_8fe4 = add i32 %v2_8fe0.v4_8fc0, %v2_8280
  store i32 %v2_8fe4, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8fe4, i32* %r0.global-to-local, align 4
  %v1_8ff0 = load i32, i32* %fp.global-to-local, align 4
  %v2_8ff0 = sub i32 %v1_8ff0, %v2_8fe0.v4_8fc0
  store i32 %v2_8ff0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_8ff8 = call i32 @function_12bb4(i32 %v2_8fe4, i32 %v2_8ff0, i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32 2)
  store i32 %v5_8ff8, i32* %r0.global-to-local, align 4
  %v1_8ffc = add i32 %v5_8ff8, 1
  %v2_8ffc = icmp eq i32 %v5_8ff8, -1
  store i1 %v2_8ffc, i1* %cpsr_c.global-to-local, align 1
  %v3_8ffc = sub i32 0, %v5_8ff8
  %v4_8ffc = and i32 %v1_8ffc, %v3_8ffc
  %v5_8ffc = icmp slt i32 %v4_8ffc, 0
  store i1 %v5_8ffc, i1* %cpsr_v.global-to-local, align 1
  %v6_8ffc = icmp slt i32 %v1_8ffc, 0
  store i1 %v6_8ffc, i1* %cpsr_n.global-to-local, align 1
  %v7_8ffc = icmp eq i32 %v1_8ffc, 0
  store i1 %v7_8ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_8ff8, i32* %r2.global-to-local, align 4
  br i1 %v7_8ffc, label %.thread48, label %dec_label_pc_9008

dec_label_pc_9008:                                ; preds = %dec_label_pc_8fa8
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9010 = load i32, i32* @r4, align 4
  %v2_9010 = add i32 %v1_9010, %v2_8748
  %v1_9014 = add i32 %v5_8ff8, -1
  %v2_9014 = icmp ne i32 %v5_8ff8, 0
  store i1 %v2_9014, i1* %cpsr_c.global-to-local, align 1
  %v3_9014 = sub i32 0, %v5_8ff8
  %v4_9014 = and i32 %v5_8ff8, %v3_9014
  %v5_9014 = icmp slt i32 %v4_9014, 0
  store i1 %v5_9014, i1* %cpsr_v.global-to-local, align 1
  %v6_9014 = icmp slt i32 %v1_9014, 0
  store i1 %v6_9014, i1* %cpsr_n.global-to-local, align 1
  %v7_9014 = icmp eq i32 %v5_8ff8, 1
  store i1 %v7_9014, i1* %cpsr_z.global-to-local, align 1
  %v1_9018 = add i32 %v2_9010, -20736
  store i32 %v1_9018, i32* %r3.global-to-local, align 4
  %v7_901c = icmp sgt i32 %v5_8ff8, 1
  br i1 %v7_901c, label %bb216, label %bb217

bb216:                                            ; preds = %dec_label_pc_9008
  %v9_901c = add i32 %v5_8ff8, -2
  store i32 %v9_901c, i32* %r2.global-to-local, align 4
  br label %bb217

bb217:                                            ; preds = %dec_label_pc_9008, %bb216
  %v3_9024 = phi i32 [ %v5_8ff8, %dec_label_pc_9008 ], [ %v9_901c, %bb216 ]
  %v1_9020 = add i32 %v2_9010, -20773
  store i32 %v1_9020, i32* %r3.global-to-local, align 4
  %v0_9024 = load i32, i32* @r6, align 4
  %v1_9024 = trunc i32 %v0_9024 to i8
  %v4_9024 = add i32 %v3_9024, %v1_9020
  %v5_9024 = inttoptr i32 %v4_9024 to i8*
  store i8 %v1_9024, i8* %v5_9024, align 1
  %v0_9028 = load i32, i32* @r5, align 4
  store i32 %v0_9028, i32* %r0.global-to-local, align 4
  %v1_902c = inttoptr i32 %v0_9028 to i8*
  %v2_902c = call i32 @function_12af0(i8* %v1_902c)
  %v0_9030 = load i32, i32* @r6, align 4
  store i32 %v0_9030, i32* %r1.global-to-local, align 4
  store i32 %v2_902c, i32* @r4, align 4
  store i32 42, i32* %r0.global-to-local, align 4
  %v2_903c = inttoptr i32 %v0_9030 to i32*
  %v3_903c = call i32 @function_120e0(i32 42, i32* %v2_903c)
  %v0_9040 = load i32, i32* @r4, align 4
  store i32 %v0_9040, i32* @r1, align 4
  store i32 %v3_903c, i32* %r2.global-to-local, align 4
  %v0_9048 = load i32, i32* @r5, align 4
  store i32 %v0_9048, i32* %r0.global-to-local, align 4
  %v3_904c = inttoptr i32 %v0_9048 to i8*
  %v4_904c = call i32 @function_12e44(i8* %v3_904c, i32 %v0_9040, i32 %v3_903c)
  store i32 %v4_904c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9050 = icmp slt i32 %v4_904c, 0
  store i1 %v1_9050, i1* %cpsr_n.global-to-local, align 1
  %v2_9050 = icmp eq i32 %v4_904c, 0
  store i1 %v2_9050, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9050, label %.thread48, label %bb218

bb218:                                            ; preds = %bb217
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9058 = load i32, i32* @r8, align 4
  %v3_9058 = add i32 %v2_9058, 4
  %v4_9058 = inttoptr i32 %v3_9058 to i32*
  store i32 1, i32* %v4_9058, align 4
  br label %.thread48

.thread48:                                        ; preds = %bb217, %dec_label_pc_8fa8, %.thread47, %bb218
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9064 = call i32 @function_120e0(i32 40, i32* null)
  %v0_9068 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9068, i32* @r1, align 4
  store i32 %v3_9064, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9074 = call i32 @function_12e44(i8* %tmp199, i32 %v0_9068, i32 %v3_9064)
  store i32 %v4_9074, i32* %r0.global-to-local, align 4
  %v1_9078 = add i32 %v4_9074, 1
  %v2_9078 = icmp eq i32 %v4_9074, -1
  store i1 %v2_9078, i1* %cpsr_c.global-to-local, align 1
  %v3_9078 = sub i32 0, %v4_9074
  %v4_9078 = and i32 %v1_9078, %v3_9078
  %v5_9078 = icmp slt i32 %v4_9078, 0
  store i1 %v5_9078, i1* %cpsr_v.global-to-local, align 1
  %v6_9078 = icmp slt i32 %v1_9078, 0
  store i1 %v6_9078, i1* %cpsr_n.global-to-local, align 1
  %v7_9078 = icmp eq i32 %v1_9078, 0
  store i1 %v7_9078, i1* %cpsr_z.global-to-local, align 1
  store i32 -20737, i32* %r5.global-to-local, align 4
  br i1 %v7_9078, label %.thread, label %dec_label_pc_9090

.thread:                                          ; preds = %.thread48
  store i32 -20773, i32* %r5.global-to-local, align 4
  %v2_9088 = load i32, i32* @r8, align 4
  %v3_9088 = add i32 %v2_9088, 8
  %v4_9088 = inttoptr i32 %v3_9088 to i32*
  store i32 0, i32* %v4_9088, align 4
  br label %dec_label_pc_9124

dec_label_pc_9090:                                ; preds = %.thread48
  store i32 -20773, i32* @r5, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 40, i32* %r0.global-to-local, align 4
  %v3_9098 = call i32 @function_120e0(i32 40, i32* null)
  %v0_909c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_909c, i32* @r1, align 4
  store i32 %v3_9098, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_90a8 = call i32 @function_12e44(i8* %tmp199, i32 %v0_909c, i32 %v3_9098)
  store i32 %v4_90a8, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %lr.global-to-local, align 4
  %v2_90b4 = add i32 %v4_90a8, %v2_8748
  store i32 %v2_90b4, i32* %r3.global-to-local, align 4
  %v1_90b8 = load i32, i32* @r5, align 4
  %v2_90b8 = add i32 %v1_90b8, %v2_90b4
  %v3_90b8 = inttoptr i32 %v2_90b8 to i8*
  %v4_90b8 = load i8, i8* %v3_90b8, align 1
  %v2_90c0 = icmp ugt i8 %v4_90b8, 31
  store i1 %v2_90c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_90c0 = icmp ult i8 %v4_90b8, 32
  store i1 %v6_90c0, i1* %cpsr_n.global-to-local, align 1
  %v7_90c0 = icmp eq i8 %v4_90b8, 32
  store i1 %v7_90c0, i1* %cpsr_z.global-to-local, align 1
  %v2_90c8 = zext i1 %v7_90c0 to i32
  %v2_90c8.v4_90a8 = add i32 %v2_90c8, %v4_90a8
  store i32 %v2_90c8.v4_90a8, i32* @r4, align 4
  %v2_90cc = add i32 %v2_90c8.v4_90a8, %v2_8280
  store i32 %v2_90cc, i32* @r5, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_90cc, i32* %r0.global-to-local, align 4
  %v1_90d8 = load i32, i32* %fp.global-to-local, align 4
  %v2_90d8 = sub i32 %v1_90d8, %v2_90c8.v4_90a8
  store i32 %v2_90d8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_90e0 = call i32 @function_12bb4(i32 %v2_90cc, i32 %v2_90d8, i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32 2)
  store i32 %v5_90e0, i32* %r0.global-to-local, align 4
  %v1_90e4 = add i32 %v5_90e0, 1
  %v2_90e4 = icmp eq i32 %v5_90e0, -1
  store i1 %v2_90e4, i1* %cpsr_c.global-to-local, align 1
  %v3_90e4 = sub i32 0, %v5_90e0
  %v4_90e4 = and i32 %v1_90e4, %v3_90e4
  %v5_90e4 = icmp slt i32 %v4_90e4, 0
  store i1 %v5_90e4, i1* %cpsr_v.global-to-local, align 1
  %v6_90e4 = icmp slt i32 %v1_90e4, 0
  store i1 %v6_90e4, i1* %cpsr_n.global-to-local, align 1
  %v7_90e4 = icmp eq i32 %v1_90e4, 0
  store i1 %v7_90e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_90e0, i32* %r2.global-to-local, align 4
  br i1 %v7_90e4, label %dec_label_pc_9124, label %dec_label_pc_90f0

dec_label_pc_90f0:                                ; preds = %dec_label_pc_9090
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_90f8 = load i32, i32* @r4, align 4
  %v2_90f8 = add i32 %v1_90f8, %v2_8748
  %v1_90fc = add i32 %v5_90e0, -1
  %v2_90fc = icmp ne i32 %v5_90e0, 0
  store i1 %v2_90fc, i1* %cpsr_c.global-to-local, align 1
  %v3_90fc = sub i32 0, %v5_90e0
  %v4_90fc = and i32 %v5_90e0, %v3_90fc
  %v5_90fc = icmp slt i32 %v4_90fc, 0
  store i1 %v5_90fc, i1* %cpsr_v.global-to-local, align 1
  %v6_90fc = icmp slt i32 %v1_90fc, 0
  store i1 %v6_90fc, i1* %cpsr_n.global-to-local, align 1
  %v7_90fc = icmp eq i32 %v5_90e0, 1
  store i1 %v7_90fc, i1* %cpsr_z.global-to-local, align 1
  %v1_9100 = add i32 %v2_90f8, -20736
  store i32 %v1_9100, i32* %r3.global-to-local, align 4
  %v7_9104 = icmp sgt i32 %v5_90e0, 1
  br i1 %v7_9104, label %bb219, label %bb220

bb219:                                            ; preds = %dec_label_pc_90f0
  %v9_9104 = add i32 %v5_90e0, -2
  store i32 %v9_9104, i32* %r2.global-to-local, align 4
  br label %bb220

bb220:                                            ; preds = %dec_label_pc_90f0, %bb219
  %v3_9118 = phi i32 [ %v5_90e0, %dec_label_pc_90f0 ], [ %v9_9104, %bb219 ]
  %v1_9108 = add i32 %v2_90f8, -20773
  store i32 %v1_9108, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v0_9110 = load i32, i32* @r5, align 4
  store i32 %v0_9110, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_9118 = add i32 %v3_9118, %v1_9108
  %v5_9118 = inttoptr i32 %v4_9118 to i8*
  store i8 0, i8* %v5_9118, align 1
  %v2_911c = inttoptr i32 %v0_9110 to i8*
  %v3_911c = call i32 @function_12c1c(i8* %v2_911c, i32 10)
  store i32 %v3_911c, i32* %r0.global-to-local, align 4
  %v1_9120 = load i32, i32* @r8, align 4
  %v2_9120 = add i32 %v1_9120, 8
  %v3_9120 = inttoptr i32 %v2_9120 to i32*
  store i32 %v3_911c, i32* %v3_9120, align 4
  br label %dec_label_pc_9124

dec_label_pc_9124:                                ; preds = %.thread, %dec_label_pc_9090, %bb220
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9128:                                ; preds = %dec_label_pc_92fc, %dec_label_pc_927c, %dec_label_pc_9124
  %v1_9134 = phi i32 [ 0, %dec_label_pc_9124 ], [ %v0_927c, %dec_label_pc_927c ], [ %v1_9134.pre.pre, %dec_label_pc_92fc ]
  store i32 %v2_8280, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v2_9134 = add i32 %v1_9134, %v2_8280
  store i32 %v2_9134, i32* @r4, align 4
  %v3_9138 = call i32 @function_120e0(i32 39, i32* null)
  %v0_913c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_913c, i32* @r1, align 4
  store i32 %v3_9138, i32* %r2.global-to-local, align 4
  %v0_9144 = load i32, i32* @r4, align 4
  store i32 %v0_9144, i32* %r0.global-to-local, align 4
  %v3_9148 = inttoptr i32 %v0_9144 to i8*
  %v4_9148 = call i32 @function_12e44(i8* %v3_9148, i32 %v0_913c, i32 %v3_9138)
  store i32 %v4_9148, i32* %r0.global-to-local, align 4
  %v1_9150 = add i32 %v4_9148, 1
  %v2_9150 = icmp eq i32 %v4_9148, -1
  store i1 %v2_9150, i1* %cpsr_c.global-to-local, align 1
  %v3_9150 = sub i32 0, %v4_9148
  %v4_9150 = and i32 %v1_9150, %v3_9150
  %v5_9150 = icmp slt i32 %v4_9150, 0
  store i1 %v5_9150, i1* %cpsr_v.global-to-local, align 1
  %v6_9150 = icmp slt i32 %v1_9150, 0
  store i1 %v6_9150, i1* %cpsr_n.global-to-local, align 1
  %v7_9150 = icmp eq i32 %v1_9150, 0
  store i1 %v7_9150, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r6, align 4
  br i1 %v7_9150, label %dec_label_pc_9328, label %dec_label_pc_915c

dec_label_pc_915c:                                ; preds = %dec_label_pc_9128
  %v0_915c = load i32, i32* @r8, align 4
  %v1_915c = add i32 %v0_915c, 12
  %v2_915c = inttoptr i32 %v1_915c to i32*
  %v3_915c = load i32, i32* %v2_915c, align 4
  store i32 %v3_915c, i32* %r3.global-to-local, align 4
  %v1_9160 = add i32 %v3_915c, -4
  %v2_9160 = icmp ugt i32 %v3_915c, 3
  store i1 %v2_9160, i1* %cpsr_c.global-to-local, align 1
  %v3_9160 = sub i32 3, %v3_915c
  %v4_9160 = and i32 %v3_9160, %v3_915c
  %v5_9160 = icmp slt i32 %v4_9160, 0
  store i1 %v5_9160, i1* %cpsr_v.global-to-local, align 1
  %v6_9160 = icmp slt i32 %v1_9160, 0
  store i1 %v6_9160, i1* %cpsr_n.global-to-local, align 1
  %v7_9160 = icmp eq i32 %v3_915c, 4
  store i1 %v7_9160, i1* %cpsr_z.global-to-local, align 1
  %v8_9164 = icmp sgt i32 %v3_915c, 4
  br i1 %v8_9164, label %dec_label_pc_9328, label %dec_label_pc_9168

dec_label_pc_9168:                                ; preds = %dec_label_pc_915c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 39, i32* %r0.global-to-local, align 4
  %v3_9170 = call i32 @function_120e0(i32 39, i32* null)
  %v0_9174 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9174, i32* @r1, align 4
  store i32 %v3_9170, i32* %r2.global-to-local, align 4
  %v0_917c = load i32, i32* @r4, align 4
  store i32 %v0_917c, i32* %r0.global-to-local, align 4
  %v3_9180 = inttoptr i32 %v0_917c to i8*
  %v4_9180 = call i32 @function_12e44(i8* %v3_9180, i32 %v0_9174, i32 %v3_9170)
  store i32 %v4_9180, i32* %r0.global-to-local, align 4
  %v0_9188 = load i32, i32* @r5, align 4
  %v2_9188 = add i32 %v0_9188, %v4_9180
  store i32 %v2_9188, i32* @sl, align 4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v2_9190 = add i32 %v2_9188, %v2_8748
  store i32 %v2_9190, i32* %r3.global-to-local, align 4
  %v1_9194 = load i32, i32* @r6, align 4
  %v2_9194 = add i32 %v1_9194, %v2_9190
  %v3_9194 = inttoptr i32 %v2_9194 to i8*
  %v4_9194 = load i8, i8* %v3_9194, align 1
  %v6_9194 = zext i8 %v4_9194 to i32
  store i32 %v6_9194, i32* %r2.global-to-local, align 4
  %v2_9198 = icmp ugt i8 %v4_9194, 31
  store i1 %v2_9198, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9198 = icmp ult i8 %v4_9194, 32
  store i1 %v6_9198, i1* %cpsr_n.global-to-local, align 1
  %v7_9198 = icmp eq i8 %v4_9194, 32
  store i1 %v7_9198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9198, label %bb221, label %bb222

bb221:                                            ; preds = %dec_label_pc_9168
  %v2_919c = add i32 %v4_9180, 1
  store i32 %v2_919c, i32* %r0.global-to-local, align 4
  br label %bb222

bb222:                                            ; preds = %dec_label_pc_9168, %bb221
  %v2_91ac = phi i32 [ %v4_9180, %dec_label_pc_9168 ], [ %v2_919c, %bb221 ]
  %v1_91a0 = load i32, i32* %fp.global-to-local, align 4
  %v2_91a0 = sub i32 %v1_91a0, %v0_9188
  store i32 %v2_91a0, i32* %r3.global-to-local, align 4
  %v2_91a4 = sub i32 %v2_91a0, %v2_91ac
  store i32 %v2_91a4, i32* @r7, align 4
  %v0_91a8 = load i32, i32* @r4, align 4
  %v2_91a8 = add i32 %v0_91a8, %v2_91ac
  store i32 %v2_91a8, i32* @r6, align 4
  br i1 %v7_9198, label %bb223, label %bb224

bb223:                                            ; preds = %bb222
  %v3_91ac = add i32 %v2_91ac, %v0_9188
  store i32 %v3_91ac, i32* @sl, align 4
  br label %bb224

bb224:                                            ; preds = %bb222, %bb223
  store i32 %v2_91a4, i32* %r1.global-to-local, align 4
  store i32 %v2_91a8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_91c0 = call i32 @function_12bb4(i32 %v2_91a8, i32 %v2_91a4, i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32 2)
  store i32 %v5_91c0, i32* %r0.global-to-local, align 4
  %v1_91c4 = add i32 %v5_91c0, 1
  %v2_91c4 = icmp eq i32 %v5_91c0, -1
  store i1 %v2_91c4, i1* %cpsr_c.global-to-local, align 1
  %v3_91c4 = sub i32 0, %v5_91c0
  %v4_91c4 = and i32 %v1_91c4, %v3_91c4
  %v5_91c4 = icmp slt i32 %v4_91c4, 0
  store i1 %v5_91c4, i1* %cpsr_v.global-to-local, align 1
  %v6_91c4 = icmp slt i32 %v1_91c4, 0
  store i1 %v6_91c4, i1* %cpsr_n.global-to-local, align 1
  %v7_91c4 = icmp eq i32 %v1_91c4, 0
  store i1 %v7_91c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_91c0, i32* @r4, align 4
  br i1 %v7_91c4, label %dec_label_pc_927c, label %dec_label_pc_91d0

dec_label_pc_91d0:                                ; preds = %bb224
  store i32 %v2_8280, i32* %r2.global-to-local, align 4
  %v1_91d4 = add i32 %v5_91c0, -1
  %v2_91d4 = icmp ne i32 %v5_91c0, 0
  store i1 %v2_91d4, i1* %cpsr_c.global-to-local, align 1
  %v3_91d4 = sub i32 0, %v5_91c0
  %v4_91d4 = and i32 %v5_91c0, %v3_91d4
  %v5_91d4 = icmp slt i32 %v4_91d4, 0
  store i1 %v5_91d4, i1* %cpsr_v.global-to-local, align 1
  %v6_91d4 = icmp slt i32 %v1_91d4, 0
  store i1 %v6_91d4, i1* %cpsr_n.global-to-local, align 1
  %v7_91d4 = icmp eq i32 %v5_91c0, 1
  store i1 %v7_91d4, i1* %cpsr_z.global-to-local, align 1
  %v7_91d8 = icmp slt i32 %v5_91c0, 2
  br i1 %v7_91d8, label %bb226, label %bb225

bb225:                                            ; preds = %dec_label_pc_91d0
  %v9_91d8 = add i32 %v5_91c0, -2
  store i32 %v9_91d8, i32* @r4, align 4
  br label %bb226

bb226:                                            ; preds = %dec_label_pc_91d0, %bb225
  %v1_91dc = load i32, i32* @sl, align 4
  %v2_91dc = add i32 %v1_91dc, %v2_8280
  store i32 %v2_91dc, i32* @r5, align 4
  %v0_91e0 = load i32, i32* @r6, align 4
  store i32 %v0_91e0, i32* %r0.global-to-local, align 4
  %v0_91e4 = load i32, i32* @r7, align 4
  store i32 %v0_91e4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d9c.41 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_91f0 = call i32 @function_12bb4(i32 %v0_91e0, i32 %v0_91e4, i32 ptrtoint (i32* @global_var_15d9c.41 to i32), i32 1)
  store i32 %v4_91f0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_91f4 = icmp slt i32 %v4_91f0, 0
  store i1 %v1_91f4, i1* %cpsr_n.global-to-local, align 1
  %v2_91f4 = icmp eq i32 %v4_91f0, 0
  store i1 %v2_91f4, i1* %cpsr_z.global-to-local, align 1
  %tmp227 = icmp slt i32 %v4_91f0, 1
  br i1 %tmp227, label %.dec_label_pc_9214_crit_edge, label %dec_label_pc_91fc

.dec_label_pc_9214_crit_edge:                     ; preds = %bb226
  %v1_921c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9214

dec_label_pc_91fc:                                ; preds = %bb226
  %v0_91fc = load i32, i32* @r6, align 4
  store i32 %v0_91fc, i32* %r0.global-to-local, align 4
  %v0_9200 = load i32, i32* @r7, align 4
  store i32 %v0_9200, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d9c.41 to i32), i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_920c = call i32 @function_12bb4(i32 %v0_91fc, i32 %v0_9200, i32 ptrtoint (i32* @global_var_15d9c.41 to i32), i32 1)
  store i32 %v4_920c, i32* %r0.global-to-local, align 4
  %v1_9210 = add i32 %v4_920c, -1
  store i32 %v1_9210, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %.dec_label_pc_9214_crit_edge, %dec_label_pc_91fc
  %v1_921c = phi i32 [ %v1_921c.pre, %.dec_label_pc_9214_crit_edge ], [ %v1_9210, %dec_label_pc_91fc ]
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v1_9224 = add i32 %v2_921c, %v1_921c
  store i32 %v1_9224, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9234 = load i32, i32* @sl, align 4
  %v4_9234 = add i32 %v3_9234, %v1_9224
  %v5_9234 = inttoptr i32 %v4_9234 to i8*
  store i8 0, i8* %v5_9234, align 1
  %storemerge4.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_9254.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9254

dec_label_pc_9240:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_924c

dec_label_pc_924c:                                ; preds = %dec_label_pc_9240
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9254

dec_label_pc_9254:                                ; preds = %dec_label_pc_9214, %dec_label_pc_924c
  %v0_9254 = phi i32 [ %v0_9240, %dec_label_pc_924c ], [ %v0_9254.pre, %dec_label_pc_9214 ]
  %storemerge4 = phi i32 [ %v1_9268, %dec_label_pc_924c ], [ %storemerge4.pre, %dec_label_pc_9214 ]
  store i32 %storemerge4, i32* %stack_var_-40, align 4
  store i32 %v0_9254, i32* %r0.global-to-local, align 4
  %v1_9258 = inttoptr i32 %v0_9254 to i8*
  %v2_9258 = call i32 @function_12af0(i8* %v1_9258)
  store i32 %v2_9258, i32* %r0.global-to-local, align 4
  %v3_9260 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9260, i32* %r4.global-to-local, align 4
  %v2_9264 = sub i32 %v2_9258, %v3_9260
  %v3_9264 = icmp uge i32 %v2_9258, %v3_9260
  store i1 %v3_9264, i1* %cpsr_c.global-to-local, align 1
  %v4_9264 = xor i32 %v3_9260, %v2_9258
  %v5_9264 = xor i32 %v2_9264, %v2_9258
  %v6_9264 = and i32 %v5_9264, %v4_9264
  %v7_9264 = icmp slt i32 %v6_9264, 0
  store i1 %v7_9264, i1* %cpsr_v.global-to-local, align 1
  %v8_9264 = icmp slt i32 %v2_9264, 0
  store i1 %v8_9264, i1* %cpsr_n.global-to-local, align 1
  %v9_9264 = icmp eq i32 %v2_9258, %v3_9260
  store i1 %v9_9264, i1* %cpsr_z.global-to-local, align 1
  %v1_9268 = add i32 %v3_9260, 1
  store i32 %v1_9268, i32* %ip.global-to-local, align 4
  %v8_926c = icmp sgt i32 %v2_9258, %v3_9260
  %v0_9240 = load i32, i32* @r5, align 4
  %v2_9240 = add i32 %v0_9240, %v3_9260
  %v3_9240 = inttoptr i32 %v2_9240 to i8*
  %v4_9240 = load i8, i8* %v3_9240, align 1
  %v6_9240 = zext i8 %v4_9240 to i32
  store i32 %v6_9240, i32* %r3.global-to-local, align 4
  %v2_9244 = icmp ugt i8 %v4_9240, 60
  store i1 %v2_9244, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9244 = icmp ult i8 %v4_9240, 61
  store i1 %v6_9244, i1* %cpsr_n.global-to-local, align 1
  %v7_9244 = icmp eq i8 %v4_9240, 61
  store i1 %v7_9244, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_926c, label %dec_label_pc_9240, label %dec_label_pc_9270

dec_label_pc_9270:                                ; preds = %dec_label_pc_9254
  br i1 %v7_9244, label %dec_label_pc_9284, label %dec_label_pc_927c

dec_label_pc_927c:                                ; preds = %dec_label_pc_92c8, %dec_label_pc_92ec, %dec_label_pc_9270, %bb224
  %v0_927c = load i32, i32* @sl, align 4
  store i32 %v0_927c, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9284:                                ; preds = %dec_label_pc_9240, %dec_label_pc_9270
  %v0_9284 = load i32, i32* @r8, align 4
  %v1_9284 = add i32 %v0_9284, 12
  %v2_9284 = inttoptr i32 %v1_9284 to i32*
  %v3_9284 = load i32, i32* %v2_9284, align 4
  store i32 %v3_9284, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9290 = icmp slt i32 %v3_9284, 0
  store i1 %v1_9290, i1* %cpsr_n.global-to-local, align 1
  %v2_9290 = icmp eq i32 %v3_9284, 0
  store i1 %v2_9290, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp228 = icmp slt i32 %v3_9284, 1
  br i1 %tmp228, label %dec_label_pc_92ec, label %dec_label_pc_929c

dec_label_pc_929c:                                ; preds = %dec_label_pc_9284
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92a4:                                ; preds = %dec_label_pc_92c8
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_92a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_92a8, i32* %r3.global-to-local, align 4
  %v0_92ac = load i32, i32* @r8, align 4
  %v1_92ac = add i32 %v0_92ac, 12
  %v2_92ac = inttoptr i32 %v1_92ac to i32*
  %v3_92ac = load i32, i32* %v2_92ac, align 4
  %v1_92b0 = add i32 %v3_92a8, 1
  store i32 %v1_92b0, i32* %ip.global-to-local, align 4
  %v2_92b4 = sub i32 %v3_92ac, %v1_92b0
  %v3_92b4 = icmp uge i32 %v3_92ac, %v1_92b0
  store i1 %v3_92b4, i1* %cpsr_c.global-to-local, align 1
  %v4_92b4 = xor i32 %v3_92ac, %v1_92b0
  %v5_92b4 = xor i32 %v2_92b4, %v3_92ac
  %v6_92b4 = and i32 %v5_92b4, %v4_92b4
  %v7_92b4 = icmp slt i32 %v6_92b4, 0
  store i1 %v7_92b4, i1* %cpsr_v.global-to-local, align 1
  %v8_92b4 = icmp slt i32 %v2_92b4, 0
  store i1 %v8_92b4, i1* %cpsr_n.global-to-local, align 1
  %v9_92b4 = icmp eq i32 %v3_92ac, %v1_92b0
  store i1 %v9_92b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v1_92b0, i32* %r1.global-to-local, align 4
  store i32 %v1_92b0, i32* %stack_var_-40, align 4
  %v7_92c4 = icmp sgt i32 %v3_92ac, %v1_92b0
  %v0_92d4.pre = load i32, i32* @r5, align 4
  br i1 %v7_92c4, label %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, label %dec_label_pc_92ec

dec_label_pc_92a4.dec_label_pc_92c8_crit_edge:    ; preds = %dec_label_pc_92a4
  %v0_92d8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_92c8

dec_label_pc_92c8:                                ; preds = %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge, %dec_label_pc_929c
  %v0_92d8 = phi i32 [ %v0_92d8.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v3_9260, %dec_label_pc_929c ]
  %v0_92d4 = phi i32 [ %v0_92d4.pre, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ %v0_9240, %dec_label_pc_929c ]
  %v0_92c8 = phi i32 [ %v1_92b0, %dec_label_pc_92a4.dec_label_pc_92c8_crit_edge ], [ 0, %dec_label_pc_929c ]
  %v1_92c8 = and i32 %v0_92c8, 33554432
  %v2_92c8 = icmp ne i32 %v1_92c8, 0
  store i1 %v2_92c8, i1* %cpsr_c.global-to-local, align 1
  %v3_92c8 = mul i32 %v0_92c8, 128
  %v1_92cc = add i32 %v3_92c8, 1472
  %v0_92d0 = load i32, i32* %sb.global-to-local, align 4
  %v2_92d0 = add i32 %v1_92cc, %v0_92d0
  store i32 %v2_92d0, i32* %r1.global-to-local, align 4
  store i32 %v0_92d4, i32* %r0.global-to-local, align 4
  store i32 %v0_92d8, i32* %r2.global-to-local, align 4
  %v3_92dc = inttoptr i32 %v0_92d4 to i8*
  %v4_92dc = call i32 @function_12f54(i8* %v3_92dc, i32 %v2_92d0, i32 %v0_92d8)
  store i32 %v4_92dc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_92e0 = icmp slt i32 %v4_92dc, 0
  store i1 %v1_92e0, i1* %cpsr_n.global-to-local, align 1
  %v2_92e0 = icmp eq i32 %v4_92dc, 0
  store i1 %v2_92e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_92e0, label %dec_label_pc_92a4, label %dec_label_pc_927c

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92a4, %dec_label_pc_9284
  %v0_92ec = phi i32 [ %v0_9240, %dec_label_pc_9284 ], [ %v0_92d4.pre, %dec_label_pc_92a4 ]
  store i32 %v0_92ec, i32* %r0.global-to-local, align 4
  %v1_92f0 = inttoptr i32 %v0_92ec to i8*
  %v2_92f0 = call i32 @function_12af0(i8* %v1_92f0)
  store i32 %v2_92f0, i32* %r0.global-to-local, align 4
  %v1_92f4 = add i32 %v2_92f0, -127
  %v2_92f4 = icmp ugt i32 %v2_92f0, 126
  store i1 %v2_92f4, i1* %cpsr_c.global-to-local, align 1
  %v3_92f4 = sub i32 126, %v2_92f0
  %v4_92f4 = and i32 %v3_92f4, %v2_92f0
  %v5_92f4 = icmp slt i32 %v4_92f4, 0
  store i1 %v5_92f4, i1* %cpsr_v.global-to-local, align 1
  %v6_92f4 = icmp slt i32 %v1_92f4, 0
  store i1 %v6_92f4, i1* %cpsr_n.global-to-local, align 1
  %v7_92f4 = icmp eq i32 %v2_92f0, 127
  store i1 %v7_92f4, i1* %cpsr_z.global-to-local, align 1
  %v8_92f8 = icmp sgt i32 %v2_92f0, 127
  br i1 %v8_92f8, label %dec_label_pc_927c, label %dec_label_pc_92fc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_92ec
  %v0_92fc = load i32, i32* @r8, align 4
  %v1_92fc = add i32 %v0_92fc, 12
  %v2_92fc = inttoptr i32 %v1_92fc to i32*
  %v3_92fc = load i32, i32* %v2_92fc, align 4
  %v1_9300 = and i32 %v3_92fc, 33554432
  %v2_9300 = icmp ne i32 %v1_9300, 0
  store i1 %v2_9300, i1* %cpsr_c.global-to-local, align 1
  %v3_9300 = mul i32 %v3_92fc, 128
  %v1_9304 = add i32 %v3_9300, 1472
  %v0_9308 = load i32, i32* @r5, align 4
  store i32 %v0_9308, i32* %r1.global-to-local, align 4
  %v0_930c = load i32, i32* %sb.global-to-local, align 4
  %v2_930c = add i32 %v1_9304, %v0_930c
  store i32 %v2_930c, i32* @r0, align 4
  %v2_9310 = inttoptr i32 %v2_930c to i8*
  %v3_9310 = call i32 @function_12b18(i8* %v2_9310, i32 %v0_9308)
  store i32 %v3_9310, i32* %r0.global-to-local, align 4
  %v0_9314 = load i32, i32* @r8, align 4
  %v1_9314 = add i32 %v0_9314, 12
  %v2_9314 = inttoptr i32 %v1_9314 to i32*
  %v3_9314 = load i32, i32* %v2_9314, align 4
  %v0_9318 = load i32, i32* @sl, align 4
  store i32 %v0_9318, i32* @r5, align 4
  %v1_931c = add i32 %v3_9314, 1
  store i32 %v1_931c, i32* %r3.global-to-local, align 4
  store i32 %v1_931c, i32* %v2_9314, align 4
  %v1_9134.pre.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9128

dec_label_pc_9328:                                ; preds = %dec_label_pc_915c, %dec_label_pc_9128
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9330 = call i32 @function_120e0(i32 38, i32* null)
  %v0_9334 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9334, i32* @r1, align 4
  store i32 %v3_9330, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9340 = call i32 @function_12e44(i8* %tmp199, i32 %v0_9334, i32 %v3_9330)
  store i32 %v4_9340, i32* %r0.global-to-local, align 4
  %v1_9344 = add i32 %v4_9340, 1
  %v2_9344 = icmp eq i32 %v4_9340, -1
  store i1 %v2_9344, i1* %cpsr_c.global-to-local, align 1
  %v3_9344 = sub i32 0, %v4_9340
  %v4_9344 = and i32 %v1_9344, %v3_9344
  %v5_9344 = icmp slt i32 %v4_9344, 0
  store i1 %v5_9344, i1* %cpsr_v.global-to-local, align 1
  %v6_9344 = icmp slt i32 %v1_9344, 0
  store i1 %v6_9344, i1* %cpsr_n.global-to-local, align 1
  %v7_9344 = icmp eq i32 %v1_9344, 0
  store i1 %v7_9344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9344, label %dec_label_pc_9678, label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 38, i32* %r0.global-to-local, align 4
  %v3_9354 = call i32 @function_120e0(i32 38, i32* null)
  %v0_9358 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9358, i32* @r1, align 4
  store i32 %v3_9354, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9364 = call i32 @function_12e44(i8* %tmp199, i32 %v0_9358, i32 %v3_9354)
  store i32 %v4_9364, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_9370 = add i32 %v4_9364, %v2_8748
  store i32 %v2_9370, i32* %r3.global-to-local, align 4
  %v1_9374 = load i32, i32* @r6, align 4
  %v2_9374 = add i32 %v1_9374, %v2_9370
  %v3_9374 = inttoptr i32 %v2_9374 to i8*
  %v4_9374 = load i8, i8* %v3_9374, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_937c = icmp ugt i8 %v4_9374, 31
  store i1 %v2_937c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_937c = icmp ult i8 %v4_9374, 32
  store i1 %v6_937c, i1* %cpsr_n.global-to-local, align 1
  %v7_937c = icmp eq i8 %v4_9374, 32
  store i1 %v7_937c, i1* %cpsr_z.global-to-local, align 1
  %v2_9384 = zext i1 %v7_937c to i32
  %v2_9384.v4_9364 = add i32 %v2_9384, %v4_9364
  store i32 %v2_9384.v4_9364, i32* @r4, align 4
  %v2_9388 = add i32 %v2_9384.v4_9364, %v2_8280
  store i32 %v2_9388, i32* @r5, align 4
  store i32 %v2_9388, i32* %r0.global-to-local, align 4
  %v1_9390 = load i32, i32* %fp.global-to-local, align 4
  %v2_9390 = sub i32 %v1_9390, %v2_9384.v4_9364
  store i32 %v2_9390, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_939c = call i32 @function_12bb4(i32 %v2_9388, i32 %v2_9390, i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32 2)
  store i32 %v5_939c, i32* %r0.global-to-local, align 4
  %v1_93a0 = add i32 %v5_939c, 1
  %v2_93a0 = icmp eq i32 %v5_939c, -1
  store i1 %v2_93a0, i1* %cpsr_c.global-to-local, align 1
  %v3_93a0 = sub i32 0, %v5_939c
  %v4_93a0 = and i32 %v1_93a0, %v3_93a0
  %v5_93a0 = icmp slt i32 %v4_93a0, 0
  store i1 %v5_93a0, i1* %cpsr_v.global-to-local, align 1
  %v6_93a0 = icmp slt i32 %v1_93a0, 0
  store i1 %v6_93a0, i1* %cpsr_n.global-to-local, align 1
  %v7_93a0 = icmp eq i32 %v1_93a0, 0
  store i1 %v7_93a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_939c, i32* %lr.global-to-local, align 4
  br i1 %v7_93a0, label %dec_label_pc_9678, label %dec_label_pc_93ac

dec_label_pc_93ac:                                ; preds = %dec_label_pc_934c
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_93b4 = add i32 %v5_939c, -1
  %v2_93b4 = icmp ne i32 %v5_939c, 0
  store i1 %v2_93b4, i1* %cpsr_c.global-to-local, align 1
  %v3_93b4 = sub i32 0, %v5_939c
  %v4_93b4 = and i32 %v5_939c, %v3_93b4
  %v5_93b4 = icmp slt i32 %v4_93b4, 0
  store i1 %v5_93b4, i1* %cpsr_v.global-to-local, align 1
  %v6_93b4 = icmp slt i32 %v1_93b4, 0
  store i1 %v6_93b4, i1* %cpsr_n.global-to-local, align 1
  %v7_93b4 = icmp eq i32 %v5_939c, 1
  store i1 %v7_93b4, i1* %cpsr_z.global-to-local, align 1
  %v1_93b8 = load i32, i32* @r4, align 4
  %v2_93b8 = add i32 %v1_93b8, %v2_8748
  store i32 %v2_93b8, i32* %ip.global-to-local, align 4
  %v7_93bc = icmp sgt i32 %v5_939c, 1
  br i1 %v7_93bc, label %bb229, label %bb230

bb229:                                            ; preds = %dec_label_pc_93ac
  %v9_93bc = add i32 %v5_939c, -2
  store i32 %v9_93bc, i32* %lr.global-to-local, align 4
  br label %bb230

bb230:                                            ; preds = %dec_label_pc_93ac, %bb229
  %v3_93e0 = phi i32 [ %v5_939c, %dec_label_pc_93ac ], [ %v9_93bc, %bb229 ]
  %v1_93c4 = add i32 %v3_93e0, 1
  store i32 %v1_93c4, i32* %r6.global-to-local, align 4
  %v1_93c8 = add i32 %v2_93b8, -20773
  store i32 %v1_93c8, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v0_93d0 = load i32, i32* @r5, align 4
  store i32 %v0_93d0, i32* %r0.global-to-local, align 4
  store i32 %v1_93c4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15da0.43 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v4_93e0 = add i32 %v3_93e0, %v1_93c8
  %v5_93e0 = inttoptr i32 %v4_93e0 to i8*
  store i8 0, i8* %v5_93e0, align 1
  %v5_93e4 = call i32 @function_12bb4(i32 %v0_93d0, i32 %v1_93c4, i32 ptrtoint ([5 x i8]* @global_var_15da0.43 to i32), i32 4)
  store i32 %v5_93e4, i32* %r0.global-to-local, align 4
  %v1_93e8 = add i32 %v5_93e4, -4
  %v2_93e8 = icmp ugt i32 %v5_93e4, 3
  store i1 %v2_93e8, i1* %cpsr_c.global-to-local, align 1
  %v3_93e8 = sub i32 3, %v5_93e4
  %v4_93e8 = and i32 %v3_93e8, %v5_93e4
  %v5_93e8 = icmp slt i32 %v4_93e8, 0
  store i1 %v5_93e8, i1* %cpsr_v.global-to-local, align 1
  %v6_93e8 = icmp slt i32 %v1_93e8, 0
  store i1 %v6_93e8, i1* %cpsr_n.global-to-local, align 1
  %v7_93e8 = icmp eq i32 %v5_93e4, 4
  store i1 %v7_93e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93e8, label %dec_label_pc_9960, label %dec_label_pc_93f0

dec_label_pc_93f0:                                ; preds = %bb230
  store i32 %v2_8280, i32* %ip.global-to-local, align 4
  %v1_93f4 = load i32, i32* @r4, align 4
  %v2_93f4 = add i32 %v1_93f4, %v2_8280
  %v3_93f4 = inttoptr i32 %v2_93f4 to i8*
  %v4_93f4 = load i8, i8* %v3_93f4, align 1
  %v6_93f4 = zext i8 %v4_93f4 to i32
  store i32 %v6_93f4, i32* %r3.global-to-local, align 4
  %v2_93f8 = icmp ugt i8 %v4_93f4, 46
  store i1 %v2_93f8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_93f8 = icmp ult i8 %v4_93f4, 47
  store i1 %v6_93f8, i1* %cpsr_n.global-to-local, align 1
  %v7_93f8 = icmp eq i8 %v4_93f4, 47
  store i1 %v7_93f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_93f8, label %dec_label_pc_9b54, label %dec_label_pc_9400

dec_label_pc_9400:                                ; preds = %dec_label_pc_94ac, %dec_label_pc_9a98, %dec_label_pc_9b84, %dec_label_pc_9b54, %dec_label_pc_9a30, %dec_label_pc_9a14, %dec_label_pc_93f0, %dec_label_pc_9ba0, %dec_label_pc_9a60
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_9404 = load i32, i32* @r8, align 4
  %v3_9404 = add i32 %v2_9404, -1452
  %v4_9404 = inttoptr i32 %v3_9404 to i8*
  store i8 1, i8* %v4_9404, align 1
  br label %dec_label_pc_8838

dec_label_pc_940c:                                ; preds = %dec_label_pc_8828
  %v0_940c = call i32 @function_13a84()
  store i32 %v0_940c, i32* %r0.global-to-local, align 4
  %v0_9410 = load i32, i32* %sb.global-to-local, align 4
  %v1_9410 = add i32 %v0_9410, 1472
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v0_9418 = load i32, i32* @r8, align 4
  %v1_9418 = add i32 %v0_9418, 656
  %v2_9418 = inttoptr i32 %v1_9418 to i32*
  %v3_9418 = load i32, i32* %v2_9418, align 4
  store i32 %v3_9418, i32* %r3.global-to-local, align 4
  %v1_9420 = add i32 %v3_9418, -1024
  %v2_9420 = icmp ugt i32 %v3_9418, 1023
  store i1 %v2_9420, i1* %cpsr_c.global-to-local, align 1
  %v3_9420 = sub i32 1023, %v3_9418
  %v4_9420 = and i32 %v3_9420, %v3_9418
  %v5_9420 = icmp slt i32 %v4_9420, 0
  store i1 %v5_9420, i1* %cpsr_v.global-to-local, align 1
  %v6_9420 = icmp slt i32 %v1_9420, 0
  store i1 %v6_9420, i1* %cpsr_n.global-to-local, align 1
  %v7_9420 = icmp eq i32 %v3_9418, 1024
  store i1 %v7_9420, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_940c, i32* %fp.global-to-local, align 4
  %v1_9428 = add i32 %v0_9410, 2116
  store i32 %v1_9428, i32* @r7, align 4
  br i1 %v7_9420, label %dec_label_pc_9528, label %dec_label_pc_9430

dec_label_pc_9430:                                ; preds = %dec_label_pc_940c, %dec_label_pc_9528, %dec_label_pc_951c
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_9434 = load i32, i32* %fp.global-to-local, align 4
  %v2_9434 = inttoptr i32 %v1_9434 to i32*
  store i32 0, i32* %v2_9434, align 4
  %v0_9438 = load i32, i32* @r8, align 4
  %v1_9438 = add i32 %v0_9438, 656
  %v2_9438 = inttoptr i32 %v1_9438 to i32*
  %v3_9438 = load i32, i32* %v2_9438, align 4
  store i32 %v3_9438, i32* %r1.global-to-local, align 4
  %v1_943c = add i32 %v0_9438, -1456
  %v2_943c = inttoptr i32 %v1_943c to i32*
  %v3_943c = load i32, i32* %v2_943c, align 4
  store i32 %v3_943c, i32* %r0.global-to-local, align 4
  %v1_9440 = sub i32 1024, %v3_9438
  store i32 %v1_9440, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9448 = load i32, i32* @r7, align 4
  %v2_9448 = add i32 %v0_9448, %v3_9438
  store i32 %v2_9448, i32* %r1.global-to-local, align 4
  %v4_944c = inttoptr i32 %v2_9448 to i32*
  %v5_944c = call i32 @function_13cc0(i32 %v3_943c, i32* %v4_944c, i32 %v1_9440, i32 16384)
  store i32 %v5_944c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9450 = icmp slt i32 %v5_944c, 0
  store i1 %v1_9450, i1* %cpsr_n.global-to-local, align 1
  %v2_9450 = icmp eq i32 %v5_944c, 0
  store i1 %v2_9450, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9450, label %dec_label_pc_992c, label %dec_label_pc_9458

dec_label_pc_9458:                                ; preds = %dec_label_pc_9430
  %v1_9458 = add i32 %v5_944c, 1
  %v2_9458 = icmp eq i32 %v5_944c, -1
  store i1 %v2_9458, i1* %cpsr_c.global-to-local, align 1
  %v3_9458 = sub i32 0, %v5_944c
  %v4_9458 = and i32 %v1_9458, %v3_9458
  %v5_9458 = icmp slt i32 %v4_9458, 0
  store i1 %v5_9458, i1* %cpsr_v.global-to-local, align 1
  %v6_9458 = icmp slt i32 %v1_9458, 0
  store i1 %v6_9458, i1* %cpsr_n.global-to-local, align 1
  %v7_9458 = icmp eq i32 %v1_9458, 0
  store i1 %v7_9458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9458, label %dec_label_pc_9950, label %dec_label_pc_9460

dec_label_pc_9460:                                ; preds = %dec_label_pc_9458
  %v0_9460 = load i32, i32* @r8, align 4
  %v1_9460 = add i32 %v0_9460, 656
  %v2_9460 = inttoptr i32 %v1_9460 to i32*
  %v3_9460 = load i32, i32* %v2_9460, align 4
  store i32 %v2_87d8, i32* %r1.global-to-local, align 4
  %v2_9468 = add i32 %v3_9460, %v5_944c
  store i32 %v2_9468, i32* @r4, align 4
  store i32 %v2_9468, i32* %v2_9460, align 4
  %v0_9470 = load i32, i32* %r1.global-to-local, align 4
  %v1_9470 = load i32, i32* @r8, align 4
  %v2_9470 = add i32 %v1_9470, -1448
  %v3_9470 = inttoptr i32 %v2_9470 to i32*
  store i32 %v0_9470, i32* %v3_9470, align 4
  br label %dec_label_pc_94fc

dec_label_pc_9478:                                ; preds = %dec_label_pc_94fc
  %v1_9478 = add i32 %v0_94fc, -4
  %v2_9478 = inttoptr i32 %v1_9478 to i32*
  %v3_9478 = load i32, i32* %v2_9478, align 4
  store i32 %v3_9478, i32* @sl, align 4
  %v1_947c = load i32, i32* @r4, align 4
  %v5_9480 = icmp slt i32 %v3_94fc, %v1_947c
  %storemerge73 = select i1 %v5_9480, i32 %v3_94fc, i32 %v1_947c
  store i32 %storemerge73, i32* @r5, align 4
  %v2_9488 = sub i32 %v3_94fc, %storemerge73
  store i32 %v2_9488, i32* @r6, align 4
  %v1_948c = add i32 %v3_9478, -1
  %v2_948c = icmp ne i32 %v3_9478, 0
  store i1 %v2_948c, i1* %cpsr_c.global-to-local, align 1
  %v3_948c = sub i32 0, %v3_9478
  %v4_948c = and i32 %v3_9478, %v3_948c
  %v5_948c = icmp slt i32 %v4_948c, 0
  store i1 %v5_948c, i1* %cpsr_v.global-to-local, align 1
  %v6_948c = icmp slt i32 %v1_948c, 0
  store i1 %v6_948c, i1* %cpsr_n.global-to-local, align 1
  %v7_948c = icmp eq i32 %v3_9478, 1
  store i1 %v7_948c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9488, i32* %v2_94fc, align 4
  br i1 %v7_948c, label %dec_label_pc_9548, label %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge

dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge: ; preds = %dec_label_pc_9478
  %v0_9498.pr.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9498:                                ; preds = %dec_label_pc_9508, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge, %dec_label_pc_9570
  %v0_9498 = phi i32 [ %v3_9570, %dec_label_pc_9570 ], [ %v0_9498.pr.pre, %dec_label_pc_9478.dec_label_pc_9498thread-pre-split_crit_edge ], [ %v3_94fc, %dec_label_pc_9508 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9498 = icmp slt i32 %v0_9498, 0
  store i1 %v1_9498, i1* %cpsr_n.global-to-local, align 1
  %v2_9498 = icmp eq i32 %v0_9498, 0
  store i1 %v2_9498, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9498, label %dec_label_pc_94a0, label %dec_label_pc_94c0

dec_label_pc_94a0:                                ; preds = %dec_label_pc_9498
  %v0_94a0 = load i32, i32* @r8, align 4
  %v1_94a0 = add i32 %v0_94a0, 4
  %v2_94a0 = inttoptr i32 %v1_94a0 to i32*
  %v3_94a0 = load i32, i32* %v2_94a0, align 4
  store i32 %v3_94a0, i32* @r4, align 4
  %v1_94a4 = add i32 %v3_94a0, -1
  %v2_94a4 = icmp ne i32 %v3_94a0, 0
  store i1 %v2_94a4, i1* %cpsr_c.global-to-local, align 1
  %v3_94a4 = sub i32 0, %v3_94a0
  %v4_94a4 = and i32 %v3_94a0, %v3_94a4
  %v5_94a4 = icmp slt i32 %v4_94a4, 0
  store i1 %v5_94a4, i1* %cpsr_v.global-to-local, align 1
  %v6_94a4 = icmp slt i32 %v1_94a4, 0
  store i1 %v6_94a4, i1* %cpsr_n.global-to-local, align 1
  %v7_94a4 = icmp eq i32 %v3_94a0, 1
  store i1 %v7_94a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94a4, label %dec_label_pc_9578, label %dec_label_pc_94ac

dec_label_pc_94ac:                                ; preds = %dec_label_pc_94a0
  %v1_94ac = add i32 %v0_94a0, 656
  %v2_94ac = inttoptr i32 %v1_94ac to i32*
  %v3_94ac = load i32, i32* %v2_94ac, align 4
  %v0_94b0 = load i32, i32* @r5, align 4
  %v2_94b0 = sub i32 %v3_94ac, %v0_94b0
  store i32 %v2_94b0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94b4 = icmp slt i32 %v2_94b0, 0
  store i1 %v1_94b4, i1* %cpsr_n.global-to-local, align 1
  %v2_94b4 = icmp eq i32 %v2_94b0, 0
  store i1 %v2_94b4, i1* %cpsr_z.global-to-local, align 1
  %v2_94b8 = add i32 %v0_94a0, 8
  %v3_94b8 = inttoptr i32 %v2_94b8 to i32*
  store i32 %v2_94b0, i32* %v3_94b8, align 4
  br i1 %v2_94b4, label %dec_label_pc_9400, label %dec_label_pc_94c0

dec_label_pc_94c0:                                ; preds = %dec_label_pc_9498, %dec_label_pc_9578, %dec_label_pc_94ac, %dec_label_pc_9600
  %v0_94c0 = load i32, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94c0 = icmp slt i32 %v0_94c0, 0
  store i1 %v1_94c0, i1* %cpsr_n.global-to-local, align 1
  %v2_94c0 = icmp eq i32 %v0_94c0, 0
  store i1 %v2_94c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_94c0, label %dec_label_pc_9510, label %dec_label_pc_94c8

dec_label_pc_94c8:                                ; preds = %dec_label_pc_94c0
  %v0_94c8 = load i32, i32* @r8, align 4
  %v1_94c8 = add i32 %v0_94c8, 656
  %v2_94c8 = inttoptr i32 %v1_94c8 to i32*
  %v3_94c8 = load i32, i32* %v2_94c8, align 4
  store i32 %v3_94c8, i32* %r3.global-to-local, align 4
  %v2_94cc = sub i32 %v3_94c8, %v0_94c0
  store i32 %v2_94cc, i32* @r4, align 4
  store i32 %v2_94cc, i32* @r2, align 4
  store i32 %v2_94cc, i32* %v2_94c8, align 4
  %v0_94d8 = load i32, i32* @r7, align 4
  %v1_94d8 = load i32, i32* @r5, align 4
  %v2_94d8 = add i32 %v1_94d8, %v0_94d8
  store i32 %v2_94d8, i32* @r1, align 4
  store i32 %v0_94d8, i32* @r0, align 4
  %v3_94e0 = call i32 @function_13ae0(i32 %v0_94d8, i32 %v2_94d8, i32 %v2_94cc)
  store i32 %v3_94e0, i32* %r0.global-to-local, align 4
  %v0_94e4 = load i32, i32* @r8, align 4
  %v1_94e4 = add i32 %v0_94e4, 656
  %v2_94e4 = inttoptr i32 %v1_94e4 to i32*
  %v3_94e4 = load i32, i32* %v2_94e4, align 4
  store i32 %v3_94e4, i32* @r4, align 4
  store i32 0, i32* @lr, align 4
  %v1_94ec = load i32, i32* %sb.global-to-local, align 4
  %v2_94ec = add i32 %v1_94ec, %v3_94e4
  store i32 %v2_94ec, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_94f0 = icmp slt i32 %v3_94e4, 0
  store i1 %v1_94f0, i1* %cpsr_n.global-to-local, align 1
  %v2_94f0 = icmp eq i32 %v3_94e4, 0
  store i1 %v2_94f0, i1* %cpsr_z.global-to-local, align 1
  %v3_94f4 = add i32 %v2_94ec, 2116
  %v4_94f4 = inttoptr i32 %v3_94f4 to i8*
  store i8 0, i8* %v4_94f4, align 1
  %v0_94f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94f8, label %dec_label_pc_9510, label %dec_label_pc_94fc

dec_label_pc_94fc:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_9460
  %v0_94fc = load i32, i32* @r8, align 4
  %v1_94fc = add i32 %v0_94fc, 8
  %v2_94fc = inttoptr i32 %v1_94fc to i32*
  %v3_94fc = load i32, i32* %v2_94fc, align 4
  store i32 %v3_94fc, i32* @r6, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9500 = icmp slt i32 %v3_94fc, 0
  store i1 %v1_9500, i1* %cpsr_n.global-to-local, align 1
  %v2_9500 = icmp eq i32 %v3_94fc, 0
  store i1 %v2_9500, i1* %cpsr_z.global-to-local, align 1
  %v5_9504 = icmp sgt i32 %v3_94fc, 0
  br i1 %v5_9504, label %dec_label_pc_9478, label %dec_label_pc_9508

dec_label_pc_9508:                                ; preds = %dec_label_pc_94fc
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_9498

dec_label_pc_9510:                                ; preds = %dec_label_pc_94c8, %dec_label_pc_94c0
  %v0_9510 = load i32, i32* @r8, align 4
  %v1_9510 = add i32 %v0_9510, -1452
  %v2_9510 = inttoptr i32 %v1_9510 to i8*
  %v3_9510 = load i8, i8* %v2_9510, align 1
  %v4_9510 = zext i8 %v3_9510 to i32
  store i32 %v4_9510, i32* %r3.global-to-local, align 4
  %v2_9514 = icmp ugt i8 %v3_9510, 6
  store i1 %v2_9514, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9514 = icmp ult i8 %v3_9510, 7
  store i1 %v6_9514, i1* %cpsr_n.global-to-local, align 1
  %v7_9514 = icmp eq i8 %v3_9510, 7
  store i1 %v7_9514, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9514, label %dec_label_pc_951c, label %dec_label_pc_8838

dec_label_pc_951c:                                ; preds = %dec_label_pc_9510
  %v1_951c = add i32 %v0_9510, 656
  %v2_951c = inttoptr i32 %v1_951c to i32*
  %v3_951c = load i32, i32* %v2_951c, align 4
  store i32 %v3_951c, i32* %r3.global-to-local, align 4
  %v1_9520 = add i32 %v3_951c, -1024
  %v2_9520 = icmp ugt i32 %v3_951c, 1023
  store i1 %v2_9520, i1* %cpsr_c.global-to-local, align 1
  %v3_9520 = sub i32 1023, %v3_951c
  %v4_9520 = and i32 %v3_9520, %v3_951c
  %v5_9520 = icmp slt i32 %v4_9520, 0
  store i1 %v5_9520, i1* %cpsr_v.global-to-local, align 1
  %v6_9520 = icmp slt i32 %v1_9520, 0
  store i1 %v6_9520, i1* %cpsr_n.global-to-local, align 1
  %v7_9520 = icmp eq i32 %v3_951c, 1024
  store i1 %v7_9520, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9520, label %dec_label_pc_9528.loopexit, label %dec_label_pc_9430

dec_label_pc_9528.loopexit:                       ; preds = %dec_label_pc_951c
  %v0_9528.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_9528

dec_label_pc_9528:                                ; preds = %dec_label_pc_9528.loopexit, %dec_label_pc_940c
  %v0_9528 = phi i32 [ %v0_9528.pre, %dec_label_pc_9528.loopexit ], [ %v1_9428, %dec_label_pc_940c ]
  store i32 %v0_9528, i32* @r0, align 4
  %v1_952c = add i32 %v0_9528, 64
  store i32 %v1_952c, i32* @r1, align 4
  store i32 960, i32* @r2, align 4
  %v3_9534 = call i32 @function_13ae0(i32 %v0_9528, i32 %v1_952c, i32 960)
  store i32 %v3_9534, i32* %r0.global-to-local, align 4
  %v0_9538 = load i32, i32* @r8, align 4
  %v1_9538 = add i32 %v0_9538, 656
  %v2_9538 = inttoptr i32 %v1_9538 to i32*
  %v3_9538 = load i32, i32* %v2_9538, align 4
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v1_953c = add i32 %v3_9538, -64
  store i32 %v1_953c, i32* @r4, align 4
  store i32 %v1_953c, i32* %v2_9538, align 4
  br label %dec_label_pc_9430

dec_label_pc_9548:                                ; preds = %dec_label_pc_9478
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v3_9550 = call i32 @function_120e0(i32 36, i32* null)
  %v0_9554 = load i32, i32* @r4, align 4
  store i32 %v0_9554, i32* %r1.global-to-local, align 4
  store i32 %v3_9550, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9560 = load i32, i32* @r7, align 4
  store i32 %v0_9560, i32* %r0.global-to-local, align 4
  %v4_9564 = call i32 @function_12bb4(i32 %v0_9560, i32 %v0_9554, i32 %v3_9550, i32 11)
  store i32 %v4_9564, i32* %r0.global-to-local, align 4
  %v2_9568 = add i32 %v4_9564, 1
  %v3_9568 = icmp eq i32 %v4_9564, -1
  store i1 %v3_9568, i1* %cpsr_c.global-to-local, align 1
  %v4_9568 = sub i32 0, %v4_9564
  %v5_9568 = and i32 %v2_9568, %v4_9568
  %v6_9568 = icmp slt i32 %v5_9568, 0
  store i1 %v6_9568, i1* %cpsr_v.global-to-local, align 1
  %v7_9568 = icmp slt i32 %v2_9568, 0
  store i1 %v7_9568, i1* %cpsr_n.global-to-local, align 1
  %v8_9568 = icmp eq i32 %v2_9568, 0
  store i1 %v8_9568, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9568, label %dec_label_pc_9570, label %dec_label_pc_9ad4

dec_label_pc_9570:                                ; preds = %dec_label_pc_9548
  %v0_9570 = load i32, i32* @r8, align 4
  %v1_9570 = add i32 %v0_9570, 8
  %v2_9570 = inttoptr i32 %v1_9570 to i32*
  %v3_9570 = load i32, i32* %v2_9570, align 4
  store i32 %v3_9570, i32* @r6, align 4
  br label %dec_label_pc_9498

dec_label_pc_9578:                                ; preds = %dec_label_pc_94a0
  %v0_9578 = load i32, i32* @r7, align 4
  store i32 %v0_9578, i32* %r0.global-to-local, align 4
  %v1_957c = add i32 %v0_94a0, 656
  %v2_957c = inttoptr i32 %v1_957c to i32*
  %v3_957c = load i32, i32* %v2_957c, align 4
  store i32 %v3_957c, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9588 = call i32 @function_12bb4(i32 %v0_9578, i32 %v3_957c, i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32 2)
  store i32 %v5_9588, i32* %r0.global-to-local, align 4
  %v1_958c = add i32 %v5_9588, 1
  %v2_958c = icmp eq i32 %v5_9588, -1
  store i1 %v2_958c, i1* %cpsr_c.global-to-local, align 1
  %v3_958c = sub i32 0, %v5_9588
  %v4_958c = and i32 %v1_958c, %v3_958c
  %v5_958c = icmp slt i32 %v4_958c, 0
  store i1 %v5_958c, i1* %cpsr_v.global-to-local, align 1
  %v6_958c = icmp slt i32 %v1_958c, 0
  store i1 %v6_958c, i1* %cpsr_n.global-to-local, align 1
  %v7_958c = icmp eq i32 %v1_958c, 0
  store i1 %v7_958c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_958c, label %dec_label_pc_94c0, label %dec_label_pc_9594

dec_label_pc_9594:                                ; preds = %dec_label_pc_9578
  %v0_9594 = load i32, i32* @r8, align 4
  %v1_9594 = add i32 %v0_9594, 656
  %v2_9594 = inttoptr i32 %v1_9594 to i32*
  %v3_9594 = load i32, i32* %v2_9594, align 4
  store i32 %v3_9594, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v0_95a0 = load i32, i32* @r7, align 4
  store i32 %v0_95a0, i32* %r0.global-to-local, align 4
  %v5_95a4 = call i32 @function_12bb4(i32 %v0_95a0, i32 %v3_9594, i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32 2)
  %v1_95a8 = load i32, i32* %sb.global-to-local, align 4
  %v2_95a8 = add i32 %v1_95a8, %v5_95a4
  store i32 %v2_95a8, i32* %ip.global-to-local, align 4
  store i32 %v5_95a4, i32* @r5, align 4
  store i32 %v5_95a4, i32* %r1.global-to-local, align 4
  %v0_95b4 = load i32, i32* @r7, align 4
  store i32 %v0_95b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d9c.41 to i32), i32* %r2.global-to-local, align 4
  %v0_95bc = load i32, i32* @r4, align 4
  store i32 %v0_95bc, i32* %r3.global-to-local, align 4
  %v0_95c0 = load i32, i32* @r6, align 4
  %v1_95c0 = trunc i32 %v0_95c0 to i8
  %v3_95c0 = add i32 %v2_95a8, 2114
  %v4_95c0 = inttoptr i32 %v3_95c0 to i8*
  store i8 %v1_95c0, i8* %v4_95c0, align 1
  %v4_95c4 = call i32 @function_12bb4(i32 %v0_95b4, i32 %v5_95a4, i32 ptrtoint (i32* @global_var_15d9c.41 to i32), i32 %v0_95bc)
  store i32 %v4_95c4, i32* %r0.global-to-local, align 4
  %v1_95c8 = add i32 %v4_95c4, 1
  %v2_95c8 = icmp eq i32 %v4_95c4, -1
  store i1 %v2_95c8, i1* %cpsr_c.global-to-local, align 1
  %v3_95c8 = sub i32 0, %v4_95c4
  %v4_95c8 = and i32 %v1_95c8, %v3_95c8
  %v5_95c8 = icmp slt i32 %v4_95c8, 0
  store i1 %v5_95c8, i1* %cpsr_v.global-to-local, align 1
  %v6_95c8 = icmp slt i32 %v1_95c8, 0
  store i1 %v6_95c8, i1* %cpsr_n.global-to-local, align 1
  %v7_95c8 = icmp eq i32 %v1_95c8, 0
  store i1 %v7_95c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_95c8, label %dec_label_pc_95ec, label %dec_label_pc_95d0

dec_label_pc_95d0:                                ; preds = %dec_label_pc_9594
  %v0_95d0 = load i32, i32* @r7, align 4
  store i32 %v0_95d0, i32* %r0.global-to-local, align 4
  %v0_95d4 = load i32, i32* @r5, align 4
  store i32 %v0_95d4, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d9c.41 to i32), i32* %r2.global-to-local, align 4
  %v0_95dc = load i32, i32* @r4, align 4
  store i32 %v0_95dc, i32* %r3.global-to-local, align 4
  %v4_95e0 = call i32 @function_12bb4(i32 %v0_95d0, i32 %v0_95d4, i32 ptrtoint (i32* @global_var_15d9c.41 to i32), i32 %v0_95dc)
  %v1_95e4 = load i32, i32* %sb.global-to-local, align 4
  %v2_95e4 = add i32 %v1_95e4, %v4_95e0
  store i32 %v2_95e4, i32* %r0.global-to-local, align 4
  %v0_95e8 = load i32, i32* @r6, align 4
  %v1_95e8 = trunc i32 %v0_95e8 to i8
  %v3_95e8 = add i32 %v2_95e4, 2116
  %v4_95e8 = inttoptr i32 %v3_95e8 to i8*
  store i8 %v1_95e8, i8* %v4_95e8, align 1
  br label %dec_label_pc_95ec

dec_label_pc_95ec:                                ; preds = %dec_label_pc_9594, %dec_label_pc_95d0
  %v0_95ec = load i32, i32* @r7, align 4
  store i32 %v0_95ec, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  %v2_95f4 = inttoptr i32 %v0_95ec to i8*
  %v3_95f4 = call i32 @function_12c1c(i8* %v2_95f4, i32 16)
  store i32 %v3_95f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_95f8 = icmp slt i32 %v3_95f4, 0
  store i1 %v1_95f8, i1* %cpsr_n.global-to-local, align 1
  %v2_95f8 = icmp eq i32 %v3_95f4, 0
  store i1 %v2_95f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_95f8, label %dec_label_pc_9d84, label %dec_label_pc_9600

dec_label_pc_9600:                                ; preds = %dec_label_pc_95ec
  %v1_9600 = add i32 %v3_95f4, 2
  store i32 %v1_9600, i32* %r6.global-to-local, align 4
  %v1_9604 = load i32, i32* @r8, align 4
  %v2_9604 = add i32 %v1_9604, 8
  %v3_9604 = inttoptr i32 %v2_9604 to i32*
  store i32 %v1_9600, i32* %v3_9604, align 4
  br label %dec_label_pc_94c0

dec_label_pc_960c:                                ; preds = %dec_label_pc_8cb4
  %v0_960c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_960c, i32* %r1.global-to-local, align 4
  %v0_9610 = load i32, i32* @r6, align 4
  store i32 %v0_9610, i32* @r0, align 4
  %v2_9614 = inttoptr i32 %v0_9610 to i8*
  %v3_9614 = call i32 @function_12b18(i8* %v2_9614, i32 %v0_960c)
  store i32 %v3_9614, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8ccc

dec_label_pc_961c:                                ; preds = %dec_label_pc_8830
  %v0_961c = call i32 @function_13a84()
  store i32 %v0_961c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v0_961c, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9628:                                ; preds = %dec_label_pc_9648.dec_label_pc_9628_crit_edge, %dec_label_pc_961c
  %v1_9628 = phi i32 [ %v1_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ %v0_961c, %dec_label_pc_961c ]
  %v0_9628 = phi i32 [ %v0_9628.pre, %dec_label_pc_9648.dec_label_pc_9628_crit_edge ], [ 0, %dec_label_pc_961c ]
  %v2_9628 = inttoptr i32 %v1_9628 to i32*
  store i32 %v0_9628, i32* %v2_9628, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v0_9630 = load i32, i32* @r8, align 4
  %v1_9630 = add i32 %v0_9630, -1456
  %v2_9630 = inttoptr i32 %v1_9630 to i32*
  %v3_9630 = load i32, i32* %v2_9630, align 4
  store i32 %v3_9630, i32* %r0.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_963c = call i32 @function_13cc0(i32 %v3_9630, i32* nonnull %stack_var_-20809, i32 10240, i32 16384)
  store i32 %v5_963c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9640 = icmp slt i32 %v5_963c, 0
  store i1 %v1_9640, i1* %cpsr_n.global-to-local, align 1
  %v2_9640 = icmp eq i32 %v5_963c, 0
  store i1 %v2_9640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9640, label %dec_label_pc_9920, label %dec_label_pc_9648

dec_label_pc_9648:                                ; preds = %dec_label_pc_9628
  %v2_9648 = add i32 %v5_963c, 1
  %v3_9648 = icmp eq i32 %v5_963c, -1
  store i1 %v3_9648, i1* %cpsr_c.global-to-local, align 1
  %v4_9648 = sub i32 0, %v5_963c
  %v5_9648 = and i32 %v2_9648, %v4_9648
  %v6_9648 = icmp slt i32 %v5_9648, 0
  store i1 %v6_9648, i1* %cpsr_v.global-to-local, align 1
  %v7_9648 = icmp slt i32 %v2_9648, 0
  store i1 %v7_9648, i1* %cpsr_n.global-to-local, align 1
  %v8_9648 = icmp eq i32 %v2_9648, 0
  store i1 %v8_9648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9648, label %dec_label_pc_9650, label %dec_label_pc_9648.dec_label_pc_9628_crit_edge

dec_label_pc_9648.dec_label_pc_9628_crit_edge:    ; preds = %dec_label_pc_9648
  %v0_9628.pre = load i32, i32* @r5, align 4
  %v1_9628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9628

dec_label_pc_9650:                                ; preds = %dec_label_pc_9648
  %v0_9650 = load i32, i32* @r4, align 4
  %v1_9650 = inttoptr i32 %v0_9650 to i32*
  %v2_9650 = load i32, i32* %v1_9650, align 4
  store i32 %v2_9650, i32* %r3.global-to-local, align 4
  %v1_9654 = add i32 %v2_9650, -11
  %v2_9654 = icmp ugt i32 %v2_9650, 10
  store i1 %v2_9654, i1* %cpsr_c.global-to-local, align 1
  %v3_9654 = sub i32 10, %v2_9650
  %v4_9654 = and i32 %v3_9654, %v2_9650
  %v5_9654 = icmp slt i32 %v4_9654, 0
  store i1 %v5_9654, i1* %cpsr_v.global-to-local, align 1
  %v6_9654 = icmp slt i32 %v1_9654, 0
  store i1 %v6_9654, i1* %cpsr_n.global-to-local, align 1
  %v7_9654 = icmp eq i32 %v2_9650, 11
  store i1 %v7_9654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9654, label %dec_label_pc_9a98, label %dec_label_pc_965c

dec_label_pc_965c:                                ; preds = %dec_label_pc_9650, %dec_label_pc_9920
  %v0_965c = load i32, i32* @r8, align 4
  %v1_965c = add i32 %v0_965c, -1456
  %v2_965c = inttoptr i32 %v1_965c to i32*
  %v3_965c = load i32, i32* %v2_965c, align 4
  store i32 %v3_965c, i32* %r0.global-to-local, align 4
  %v1_9660 = call i32 @function_134b0(i32 %v3_965c)
  store i32 %v1_9660, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_966c = load i32, i32* @r8, align 4
  %v2_966c = add i32 %v1_966c, -1456
  %v3_966c = inttoptr i32 %v2_966c to i32*
  store i32 -1, i32* %v3_966c, align 4
  %v0_9670 = load i32, i32* %r1.global-to-local, align 4
  %v1_9670 = trunc i32 %v0_9670 to i8
  %v2_9670 = load i32, i32* @r8, align 4
  %v3_9670 = add i32 %v2_9670, -1452
  %v4_9670 = inttoptr i32 %v3_9670 to i8*
  store i8 %v1_9670, i8* %v4_9670, align 1
  br label %dec_label_pc_8838

dec_label_pc_9678:                                ; preds = %dec_label_pc_934c, %dec_label_pc_9328
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_9680 = call i32 @function_120e0(i32 37, i32* null)
  %v0_9684 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_9684, i32* @r1, align 4
  store i32 %v3_9680, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_9690 = call i32 @function_12e44(i8* %tmp199, i32 %v0_9684, i32 %v3_9680)
  store i32 %v4_9690, i32* %r0.global-to-local, align 4
  %v1_9698 = add i32 %v4_9690, 1
  %v2_9698 = icmp eq i32 %v4_9690, -1
  store i1 %v2_9698, i1* %cpsr_c.global-to-local, align 1
  %v3_9698 = sub i32 0, %v4_9690
  %v4_9698 = and i32 %v1_9698, %v3_9698
  %v5_9698 = icmp slt i32 %v4_9698, 0
  store i1 %v5_9698, i1* %cpsr_v.global-to-local, align 1
  %v6_9698 = icmp slt i32 %v1_9698, 0
  store i1 %v6_9698, i1* %cpsr_n.global-to-local, align 1
  %v7_9698 = icmp eq i32 %v1_9698, 0
  store i1 %v7_9698, i1* %cpsr_z.global-to-local, align 1
  store i32 -20773, i32* @r5, align 4
  br i1 %v7_9698, label %dec_label_pc_98c0, label %dec_label_pc_96a4

dec_label_pc_96a4:                                ; preds = %dec_label_pc_9678
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 37, i32* %r0.global-to-local, align 4
  %v3_96ac = call i32 @function_120e0(i32 37, i32* null)
  %v0_96b0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_96b0, i32* @r1, align 4
  store i32 %v3_96ac, i32* %r2.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v4_96bc = call i32 @function_12e44(i8* %tmp199, i32 %v0_96b0, i32 %v3_96ac)
  store i32 %v4_96bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8748, i32* %ip.global-to-local, align 4
  %v2_96c8 = add i32 %v4_96bc, %v2_8748
  store i32 %v2_96c8, i32* %r3.global-to-local, align 4
  %v1_96cc = load i32, i32* @r5, align 4
  %v2_96cc = add i32 %v1_96cc, %v2_96c8
  %v3_96cc = inttoptr i32 %v2_96cc to i8*
  %v4_96cc = load i8, i8* %v3_96cc, align 1
  store i32 %v2_8280, i32* %lr.global-to-local, align 4
  %v2_96d4 = icmp ugt i8 %v4_96cc, 31
  store i1 %v2_96d4, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_96d4 = icmp ult i8 %v4_96cc, 32
  store i1 %v6_96d4, i1* %cpsr_n.global-to-local, align 1
  %v7_96d4 = icmp eq i8 %v4_96cc, 32
  store i1 %v7_96d4, i1* %cpsr_z.global-to-local, align 1
  %v2_96dc = zext i1 %v7_96d4 to i32
  %v2_96dc.v4_96bc = add i32 %v2_96dc, %v4_96bc
  store i32 %v2_96dc.v4_96bc, i32* @r4, align 4
  %v2_96e0 = add i32 %v2_96dc.v4_96bc, %v2_8280
  store i32 %v2_96e0, i32* @r6, align 4
  store i32 %v2_96e0, i32* %r0.global-to-local, align 4
  %v1_96e8 = load i32, i32* %fp.global-to-local, align 4
  %v2_96e8 = sub i32 %v1_96e8, %v2_96dc.v4_96bc
  store i32 %v2_96e8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r2.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_96f4 = call i32 @function_12bb4(i32 %v2_96e0, i32 %v2_96e8, i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32 2)
  store i32 %v5_96f4, i32* %r0.global-to-local, align 4
  %v1_96f8 = add i32 %v5_96f4, 1
  %v2_96f8 = icmp eq i32 %v5_96f4, -1
  store i1 %v2_96f8, i1* %cpsr_c.global-to-local, align 1
  %v3_96f8 = sub i32 0, %v5_96f4
  %v4_96f8 = and i32 %v1_96f8, %v3_96f8
  %v5_96f8 = icmp slt i32 %v4_96f8, 0
  store i1 %v5_96f8, i1* %cpsr_v.global-to-local, align 1
  %v6_96f8 = icmp slt i32 %v1_96f8, 0
  store i1 %v6_96f8, i1* %cpsr_n.global-to-local, align 1
  %v7_96f8 = icmp eq i32 %v1_96f8, 0
  store i1 %v7_96f8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_96f4, i32* @r7, align 4
  br i1 %v7_96f8, label %dec_label_pc_98c0, label %dec_label_pc_9704

dec_label_pc_9704:                                ; preds = %dec_label_pc_96a4
  store i32 %v2_8748, i32* %r1.global-to-local, align 4
  %v1_970c = load i32, i32* @r4, align 4
  %v2_970c = add i32 %v1_970c, %v2_8748
  %v1_9710 = add i32 %v5_96f4, -1
  %v2_9710 = icmp ne i32 %v5_96f4, 0
  store i1 %v2_9710, i1* %cpsr_c.global-to-local, align 1
  %v3_9710 = sub i32 0, %v5_96f4
  %v4_9710 = and i32 %v5_96f4, %v3_9710
  %v5_9710 = icmp slt i32 %v4_9710, 0
  store i1 %v5_9710, i1* %cpsr_v.global-to-local, align 1
  %v6_9710 = icmp slt i32 %v1_9710, 0
  store i1 %v6_9710, i1* %cpsr_n.global-to-local, align 1
  %v7_9710 = icmp eq i32 %v5_96f4, 1
  store i1 %v7_9710, i1* %cpsr_z.global-to-local, align 1
  %v1_9714 = add i32 %v2_970c, -20736
  store i32 %v1_9714, i32* %r3.global-to-local, align 4
  %v7_9718 = icmp sgt i32 %v5_96f4, 1
  br i1 %v7_9718, label %bb231, label %bb232

bb231:                                            ; preds = %dec_label_pc_9704
  %v9_9718 = add i32 %v5_96f4, -2
  store i32 %v9_9718, i32* @r7, align 4
  br label %bb232

bb232:                                            ; preds = %dec_label_pc_9704, %bb231
  %v3_9724 = phi i32 [ %v5_96f4, %dec_label_pc_9704 ], [ %v9_9718, %bb231 ]
  %v1_971c = add i32 %v2_970c, -20773
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_9724 = add i32 %v1_971c, %v3_9724
  %v5_9724 = inttoptr i32 %v4_9724 to i8*
  store i8 0, i8* %v5_9724, align 1
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* @lr, align 4
  %v1_9738 = load i32, i32* @r4, align 4
  %v2_9738 = add i32 %v1_9738, %v2_8280
  %v3_9738 = inttoptr i32 %v2_9738 to i8*
  %v4_9738 = load i8, i8* %v3_9738, align 1
  %v6_9738 = zext i8 %v4_9738 to i32
  store i32 %v6_9738, i32* %r0.global-to-local, align 4
  %v1_973c = add nsw i32 %v6_9738, -48
  store i32 %v1_973c, i32* %r3.global-to-local, align 4
  %v2_9740 = icmp ugt i32 %v1_973c, 8
  store i1 %v2_9740, i1* %cpsr_c.global-to-local, align 1
  %v3_9740 = sub nsw i32 56, %v6_9738
  %v4_9740 = and i32 %v3_9740, %v1_973c
  %v5_9740 = icmp slt i32 %v4_9740, 0
  store i1 %v5_9740, i1* %cpsr_v.global-to-local, align 1
  %v6_9740 = icmp ult i8 %v4_9738, 57
  store i1 %v6_9740, i1* %cpsr_n.global-to-local, align 1
  %v7_9740 = icmp eq i32 %v1_973c, 9
  store i1 %v7_9740, i1* %cpsr_z.global-to-local, align 1
  %v2_9744 = xor i1 %v7_9740, true
  %v3_9744 = and i1 %v2_9740, %v2_9744
  br i1 %v3_9744, label %.thread142, label %dec_label_pc_974c

.thread142:                                       ; preds = %bb232
  %v4_9744 = load i32, i32* @r6, align 4
  br label %dec_label_pc_9774

dec_label_pc_974c:                                ; preds = %bb232
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_975c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_9750

dec_label_pc_9750:                                ; preds = %dec_label_pc_9750, %dec_label_pc_974c
  %v0_9750 = phi i32 [ %v1_9750, %dec_label_pc_9750 ], [ 0, %dec_label_pc_974c ]
  %v1_9750 = add i32 %v0_9750, 1
  store i32 %v1_9750, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 %v1_9750, i32* %stack_var_-40, align 4
  %v2_975c = add i32 %v1_9750, %v1_975c.pre
  %v3_975c = inttoptr i32 %v2_975c to i8*
  %v4_975c = load i8, i8* %v3_975c, align 1
  %v6_975c = zext i8 %v4_975c to i32
  store i32 %v6_975c, i32* %r0.global-to-local, align 4
  %v1_9760 = add nsw i32 %v6_975c, -48
  %v2_9764 = icmp ugt i32 %v1_9760, 8
  store i1 %v2_9764, i1* %cpsr_c.global-to-local, align 1
  %v3_9764 = sub nsw i32 56, %v6_975c
  %v4_9764 = and i32 %v3_9764, %v1_9760
  %v5_9764 = icmp slt i32 %v4_9764, 0
  store i1 %v5_9764, i1* %cpsr_v.global-to-local, align 1
  %v6_9764 = icmp ult i8 %v4_975c, 57
  store i1 %v6_9764, i1* %cpsr_n.global-to-local, align 1
  %v7_9764 = icmp eq i32 %v1_9760, 9
  store i1 %v7_9764, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9750, i32* %r3.global-to-local, align 4
  %v2_976c = xor i1 %v2_9764, true
  %v3_976c = or i1 %v7_9764, %v2_976c
  br i1 %v3_976c, label %dec_label_pc_9750, label %dec_label_pc_9774

dec_label_pc_9774:                                ; preds = %dec_label_pc_9750, %.thread142
  %v2_9780 = phi i32 [ %v4_9744, %.thread142 ], [ %v2_975c, %dec_label_pc_9750 ]
  %v0_9774 = phi i32 [ %v6_9738, %.thread142 ], [ %v6_975c, %dec_label_pc_9750 ]
  store i32 %v2_9780, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9774 = icmp eq i32 %v0_9774, 0
  store i1 %v2_9774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9774, label %dec_label_pc_98c0, label %dec_label_pc_977c

dec_label_pc_977c:                                ; preds = %dec_label_pc_9774
  store i32 0, i32* @r5, align 4
  %v3_9780 = inttoptr i32 %v2_9780 to i8*
  store i8 0, i8* %v3_9780, align 1
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9788 = load i32, i32* %stack_var_-40, align 4
  %v1_978c = add i32 %v3_9788, 1
  store i32 %v1_978c, i32* %ip.global-to-local, align 4
  store i32 %v1_978c, i32* %stack_var_-40, align 4
  %v0_9794 = load i32, i32* @r6, align 4
  %v2_9794 = add i32 %v0_9794, %v1_978c
  %v3_9794 = inttoptr i32 %v2_9794 to i8*
  %v4_9794 = load i8, i8* %v3_9794, align 1
  %v6_9794 = zext i8 %v4_9794 to i32
  store i32 %v6_9794, i32* %r3.global-to-local, align 4
  %v2_9798 = icmp ugt i8 %v4_9794, 31
  store i1 %v2_9798, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9798 = icmp ult i8 %v4_9794, 32
  store i1 %v6_9798, i1* %cpsr_n.global-to-local, align 1
  %v7_9798 = icmp eq i8 %v4_9794, 32
  store i1 %v7_9798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9798, label %bb233, label %.thread56

.thread56:                                        ; preds = %dec_label_pc_977c
  store i32 %v2_9794, i32* @r4, align 4
  br label %bb234

bb233:                                            ; preds = %dec_label_pc_977c
  %v2_979c = add i32 %v3_9788, 2
  store i32 %v2_979c, i32* %ip.global-to-local, align 4
  %v2_97a0 = add i32 %v0_9794, %v2_979c
  store i32 %v2_97a0, i32* @r4, align 4
  store i32 %v2_979c, i32* %stack_var_-40, align 4
  br label %bb234

bb234:                                            ; preds = %.thread56, %bb233
  %v0_97a8 = phi i32 [ %v2_9794, %.thread56 ], [ %v2_97a0, %bb233 ]
  store i32 %v0_97a8, i32* %r0.global-to-local, align 4
  %v1_97ac = inttoptr i32 %v0_97a8 to i8*
  %v2_97ac = call i32 @function_12af0(i8* %v1_97ac)
  store i32 ptrtoint ([5 x i8]* @global_var_15da8.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97ac, i32* @r1, align 4
  %v0_97b8 = load i32, i32* @r4, align 4
  store i32 %v0_97b8, i32* %r0.global-to-local, align 4
  %v4_97bc = inttoptr i32 %v0_97b8 to i8*
  %v5_97bc = call i32 @function_12e44(i8* %v4_97bc, i32 %v2_97ac, i32 ptrtoint ([5 x i8]* @global_var_15da8.45 to i32))
  store i32 %v5_97bc, i32* %r0.global-to-local, align 4
  %v1_97c0 = add i32 %v5_97bc, 1
  %v2_97c0 = icmp eq i32 %v5_97bc, -1
  store i1 %v2_97c0, i1* %cpsr_c.global-to-local, align 1
  %v3_97c0 = sub i32 0, %v5_97bc
  %v4_97c0 = and i32 %v1_97c0, %v3_97c0
  %v5_97c0 = icmp slt i32 %v4_97c0, 0
  store i1 %v5_97c0, i1* %cpsr_v.global-to-local, align 1
  %v6_97c0 = icmp slt i32 %v1_97c0, 0
  store i1 %v6_97c0, i1* %cpsr_n.global-to-local, align 1
  %v7_97c0 = icmp eq i32 %v1_97c0, 0
  store i1 %v7_97c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97c0, label %.thread60, label %dec_label_pc_97d0

.thread60:                                        ; preds = %bb234
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v4_97c8 = load i32, i32* %v11_82f4, align 4
  store i32 %v4_97c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_9804

dec_label_pc_97d0:                                ; preds = %bb234
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_97d4 = load i32, i32* %stack_var_-40, align 4
  %v0_97d8 = load i32, i32* @r6, align 4
  %v2_97d8 = add i32 %v0_97d8, %v3_97d4
  store i32 %v2_97d8, i32* @r4, align 4
  store i32 %v2_97d8, i32* %r0.global-to-local, align 4
  %v1_97e0 = inttoptr i32 %v2_97d8 to i8*
  %v2_97e0 = call i32 @function_12af0(i8* %v1_97e0)
  store i32 ptrtoint ([5 x i8]* @global_var_15da8.45 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_97e0, i32* @r1, align 4
  %v0_97ec = load i32, i32* @r4, align 4
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  %v4_97f0 = inttoptr i32 %v0_97ec to i8*
  %v5_97f0 = call i32 @function_12e44(i8* %v4_97f0, i32 %v2_97e0, i32 ptrtoint ([5 x i8]* @global_var_15da8.45 to i32))
  store i32 %v5_97f0, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_97f8 = load i32, i32* %stack_var_-40, align 4
  %v2_97fc = add i32 %v3_97f8, %v5_97f0
  store i32 %v2_97fc, i32* %ip.global-to-local, align 4
  store i32 %v2_97fc, i32* %stack_var_-40, align 4
  br label %dec_label_pc_9804

dec_label_pc_9804:                                ; preds = %.thread60, %dec_label_pc_97d0
  %v0_9d8c = phi i32 [ %v4_97c8, %.thread60 ], [ %v2_97fc, %dec_label_pc_97d0 ]
  %v0_9804 = load i32, i32* @r6, align 4
  %v2_9804 = add i32 %v0_9804, %v0_9d8c
  %v3_9804 = inttoptr i32 %v2_9804 to i8*
  %v4_9804 = load i8, i8* %v3_9804, align 1
  %v6_9804 = zext i8 %v4_9804 to i32
  store i32 %v6_9804, i32* %r3.global-to-local, align 4
  %v2_9808 = icmp ugt i8 %v4_9804, 33
  store i1 %v2_9808, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9808 = icmp ult i8 %v4_9804, 34
  store i1 %v6_9808, i1* %cpsr_n.global-to-local, align 1
  %v7_9808 = icmp eq i8 %v4_9804, 34
  store i1 %v7_9808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9808, label %dec_label_pc_9d8c, label %dec_label_pc_9810

dec_label_pc_9810:                                ; preds = %dec_label_pc_9d8c, %dec_label_pc_9804, %dec_label_pc_9db4
  %v0_9810 = load i32, i32* @r6, align 4
  store i32 %v0_9810, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_9818 = inttoptr i32 %v0_9810 to i8*
  %v3_9818 = call i32 @function_12c1c(i8* %v2_9818, i32 10)
  store i32 %v3_9818, i32* %r0.global-to-local, align 4
  %v1_981c = add i32 %v3_9818, -1
  store i32 %v1_981c, i32* %r3.global-to-local, align 4
  %v1_9820 = add i32 %v3_9818, -9
  %v2_9820 = icmp ugt i32 %v1_981c, 7
  store i1 %v2_9820, i1* %cpsr_c.global-to-local, align 1
  %v3_9820 = sub i32 8, %v3_9818
  %v4_9820 = and i32 %v3_9820, %v1_981c
  %v5_9820 = icmp slt i32 %v4_9820, 0
  store i1 %v5_9820, i1* %cpsr_v.global-to-local, align 1
  %v6_9820 = icmp slt i32 %v1_9820, 0
  store i1 %v6_9820, i1* %cpsr_n.global-to-local, align 1
  %v7_9820 = icmp eq i32 %v1_981c, 8
  store i1 %v7_9820, i1* %cpsr_z.global-to-local, align 1
  %v2_9824 = xor i1 %v2_9820, true
  %v3_9824 = or i1 %v7_9820, %v2_9824
  br i1 %v3_9824, label %dec_label_pc_9838.preheader, label %dec_label_pc_984c

dec_label_pc_9838.preheader:                      ; preds = %dec_label_pc_9810
  store i32 %v2_87d8, i32* %ip.global-to-local, align 4
  %v6_9828 = add i32 %v3_9818, %v2_87d8
  store i32 %v6_9828, i32* @r4, align 4
  br label %dec_label_pc_9838

dec_label_pc_9834:                                ; preds = %dec_label_pc_9838
  %v1_9834 = call i32 @function_148e4(i32 1)
  store i32 %v1_9834, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9838

dec_label_pc_9838:                                ; preds = %dec_label_pc_9838.preheader, %dec_label_pc_9834
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_983c = call i32 @function_13780(i32* null)
  %v1_9840 = load i32, i32* @r4, align 4
  %v2_9840 = sub i32 %v2_983c, %v1_9840
  %v3_9840 = icmp uge i32 %v2_983c, %v1_9840
  store i1 %v3_9840, i1* %cpsr_c.global-to-local, align 1
  %v4_9840 = xor i32 %v1_9840, %v2_983c
  %v5_9840 = xor i32 %v2_9840, %v2_983c
  %v6_9840 = and i32 %v5_9840, %v4_9840
  %v7_9840 = icmp slt i32 %v6_9840, 0
  store i1 %v7_9840, i1* %cpsr_v.global-to-local, align 1
  %v8_9840 = icmp slt i32 %v2_9840, 0
  store i1 %v8_9840, i1* %cpsr_n.global-to-local, align 1
  %v9_9840 = icmp eq i32 %v2_983c, %v1_9840
  store i1 %v9_9840, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %r0.global-to-local, align 4
  br i1 %v3_9840, label %dec_label_pc_984c, label %dec_label_pc_9834

dec_label_pc_984c:                                ; preds = %dec_label_pc_9838, %dec_label_pc_9810
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9850 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9850, i32* @r4, align 4
  %v0_9854 = load i32, i32* @r6, align 4
  %v2_9854 = add i32 %v0_9854, %v3_9850
  store i32 %v2_9854, i32* @r5, align 4
  store i32 %v2_9854, i32* %r0.global-to-local, align 4
  %v1_985c = inttoptr i32 %v2_9854 to i8*
  %v2_985c = call i32 @function_12af0(i8* %v1_985c)
  store i32 ptrtoint ([5 x i8]* @global_var_15da0.43 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_985c, i32* @r1, align 4
  %v0_9868 = load i32, i32* @r5, align 4
  store i32 %v0_9868, i32* %r0.global-to-local, align 4
  %v4_986c = inttoptr i32 %v0_9868 to i8*
  %v5_986c = call i32 @function_12e44(i8* %v4_986c, i32 %v2_985c, i32 ptrtoint ([5 x i8]* @global_var_15da0.43 to i32))
  store i32 %v5_986c, i32* %r0.global-to-local, align 4
  %v1_9870 = add i32 %v5_986c, -4
  %v2_9870 = icmp ugt i32 %v5_986c, 3
  store i1 %v2_9870, i1* %cpsr_c.global-to-local, align 1
  %v3_9870 = sub i32 3, %v5_986c
  %v4_9870 = and i32 %v3_9870, %v5_986c
  %v5_9870 = icmp slt i32 %v4_9870, 0
  store i1 %v5_9870, i1* %cpsr_v.global-to-local, align 1
  %v6_9870 = icmp slt i32 %v1_9870, 0
  store i1 %v6_9870, i1* %cpsr_n.global-to-local, align 1
  %v7_9870 = icmp eq i32 %v5_986c, 4
  store i1 %v7_9870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9870, label %dec_label_pc_9c68, label %dec_label_pc_9878

dec_label_pc_9878:                                ; preds = %dec_label_pc_984c
  %v0_9878 = load i32, i32* @r6, align 4
  %v1_9878 = load i32, i32* @r4, align 4
  %v2_9878 = add i32 %v1_9878, %v0_9878
  %v3_9878 = inttoptr i32 %v2_9878 to i8*
  %v4_9878 = load i8, i8* %v3_9878, align 1
  %v6_9878 = zext i8 %v4_9878 to i32
  store i32 %v6_9878, i32* %r3.global-to-local, align 4
  %v2_987c = icmp ugt i8 %v4_9878, 46
  store i1 %v2_987c, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_987c = icmp ult i8 %v4_9878, 47
  store i1 %v6_987c, i1* %cpsr_n.global-to-local, align 1
  %v7_987c = icmp eq i8 %v4_9878, 47
  store i1 %v7_987c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_987c, label %dec_label_pc_9de0, label %dec_label_pc_9884

dec_label_pc_9884:                                ; preds = %dec_label_pc_9dfc, %dec_label_pc_9de0, %dec_label_pc_9d38, %dec_label_pc_9d1c, %dec_label_pc_9878, %dec_label_pc_9e2c, %dec_label_pc_9d68
  %v0_9884 = load i32, i32* %sb.global-to-local, align 4
  %v1_9888 = add i32 %v0_9884, 1431
  store i32 %v1_9888, i32* @r0, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15d7c.21 to i32), i32* @r1, align 4
  store i32 4, i32* @r2, align 4
  %v4_9894 = call i32 @function_13ad0(i32 %v1_9888, i32 ptrtoint ([4 x i8]* @global_var_15d7c.21 to i32), i32 4)
  store i32 %v4_9894, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v2_989c = load i32, i32* @r8, align 4
  %v3_989c = add i32 %v2_989c, -1452
  %v4_989c = inttoptr i32 %v3_989c to i8*
  store i8 10, i8* %v4_989c, align 1
  br label %dec_label_pc_8838

dec_label_pc_98a4:                                ; preds = %dec_label_pc_8610
  store i32 %v1_8610, i32* %r3.global-to-local, align 4
  %v1_98a8 = trunc i32 %v1_8610 to i8
  store i8 %v1_98a8, i8* %v2_8650, align 1
  %v0_98ac = load i32, i32* @r6, align 4
  %v1_98ac = add i32 %v0_98ac, -1431
  %v2_98ac = inttoptr i32 %v1_98ac to i32*
  %v3_98ac = load i32, i32* %v2_98ac, align 4
  store i32 %v3_98ac, i32* %r0.global-to-local, align 4
  %v1_98b0 = call i32 @function_134b0(i32 %v3_98ac)
  store i32 %v1_98b0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_98b8 = load i32, i32* @r6, align 4
  %v2_98b8 = add i32 %v1_98b8, -1431
  %v3_98b8 = inttoptr i32 %v2_98b8 to i32*
  store i32 -1, i32* %v3_98b8, align 4
  br label %dec_label_pc_8630

dec_label_pc_98c0:                                ; preds = %dec_label_pc_9774, %dec_label_pc_96a4, %dec_label_pc_9678
  %v0_98c0 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_98c0, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15d94.39 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 %v2_8280, i32* %r0.global-to-local, align 4
  %v5_98d0 = call i32 @function_12bb4(i32 %v2_8280, i32 %v0_98c0, i32 ptrtoint ([5 x i8]* @global_var_15d94.39 to i32), i32 4)
  %v0_98d4 = load i32, i32* %sb.global-to-local, align 4
  %v1_98d8 = add i32 %v0_98d4, 1431
  store i32 %v1_98d8, i32* @r4, align 4
  store i32 %v5_98d0, i32* @r5, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15db0.47 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_98d8, i32* %r0.global-to-local, align 4
  %v3_98e8 = inttoptr i32 %v1_98d8 to i8*
  %v4_98e8 = call i32 @function_12ed0(i8* %v3_98e8, i32 ptrtoint ([5 x i8]* @global_var_15db0.47 to i32))
  store i32 %v4_98e8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_98ec = icmp slt i32 %v4_98e8, 0
  store i1 %v1_98ec, i1* %cpsr_n.global-to-local, align 1
  %v2_98ec = icmp eq i32 %v4_98e8, 0
  store i1 %v2_98ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_98ec, label %dec_label_pc_9aa8, label %dec_label_pc_98f4

dec_label_pc_98f4:                                ; preds = %dec_label_pc_9aa8, %dec_label_pc_98c0
  store i32 7, i32* %r3.global-to-local, align 4
  %v2_98f8 = load i32, i32* @r8, align 4
  %v3_98f8 = add i32 %v2_98f8, -1452
  %v4_98f8 = inttoptr i32 %v3_98f8 to i8*
  store i8 7, i8* %v4_98f8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_98fc:                                ; preds = %bb240, %dec_label_pc_98f4
  %v0_98fc = load i32, i32* @r5, align 4
  store i32 %v0_98fc, i32* %r2.global-to-local, align 4
  %v0_9900 = load i32, i32* @r8, align 4
  %v1_9900 = add i32 %v0_9900, -1456
  %v2_9900 = inttoptr i32 %v1_9900 to i32*
  %v3_9900 = load i32, i32* %v2_9900, align 4
  store i32 %v3_9900, i32* %r0.global-to-local, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_990c = call i32 @function_13cc0(i32 %v3_9900, i32* nonnull %stack_var_-20809, i32 %v0_98fc, i32 16384)
  store i32 %v5_990c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8838

dec_label_pc_9914:                                ; preds = %dec_label_pc_8e04
  %v2_9914 = add i32 %v0_9914, -10240
  %v3_9914 = icmp ugt i32 %v0_9914, 10239
  store i1 %v3_9914, i1* %cpsr_c.global-to-local, align 1
  %v4_9914 = sub i32 10239, %v0_9914
  %v5_9914 = and i32 %v4_9914, %v0_9914
  %v6_9914 = icmp slt i32 %v5_9914, 0
  store i1 %v6_9914, i1* %cpsr_v.global-to-local, align 1
  %v7_9914 = icmp slt i32 %v2_9914, 0
  store i1 %v7_9914, i1* %cpsr_n.global-to-local, align 1
  %v8_9914 = icmp eq i32 %v0_9914, 10240
  store i1 %v8_9914, i1* %cpsr_z.global-to-local, align 1
  %v5_9918 = icmp slt i32 %v0_9914, 10240
  br i1 %v5_9918, label %dec_label_pc_8838, label %dec_label_pc_8e20

dec_label_pc_9920:                                ; preds = %dec_label_pc_9628
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9924 = load i32, i32* @r4, align 4
  %v2_9924 = inttoptr i32 %v1_9924 to i32*
  store i32 104, i32* %v2_9924, align 4
  br label %dec_label_pc_965c

dec_label_pc_992c:                                ; preds = %dec_label_pc_9430
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_9930 = load i32, i32* %fp.global-to-local, align 4
  %v2_9930 = inttoptr i32 %v1_9930 to i32*
  store i32 104, i32* %v2_9930, align 4
  br label %dec_label_pc_9934

dec_label_pc_9934:                                ; preds = %dec_label_pc_9950, %dec_label_pc_992c
  %v0_9934 = load i32, i32* @r8, align 4
  %v1_9934 = add i32 %v0_9934, -1456
  %v2_9934 = inttoptr i32 %v1_9934 to i32*
  %v3_9934 = load i32, i32* %v2_9934, align 4
  store i32 %v3_9934, i32* %r0.global-to-local, align 4
  %v1_9938 = call i32 @function_134b0(i32 %v3_9934)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v1_9944 = load i32, i32* @r8, align 4
  %v2_9944 = add i32 %v1_9944, -1456
  %v3_9944 = inttoptr i32 %v2_9944 to i32*
  store i32 -1, i32* %v3_9944, align 4
  %v0_9948 = load i32, i32* %lr.global-to-local, align 4
  %v1_9948 = trunc i32 %v0_9948 to i8
  %v2_9948 = load i32, i32* @r8, align 4
  %v3_9948 = add i32 %v2_9948, -1452
  %v4_9948 = inttoptr i32 %v3_9948 to i8*
  store i8 %v1_9948, i8* %v4_9948, align 1
  br label %dec_label_pc_8838

dec_label_pc_9950:                                ; preds = %dec_label_pc_9458
  %v0_9950 = load i32, i32* %fp.global-to-local, align 4
  %v1_9950 = inttoptr i32 %v0_9950 to i32*
  %v2_9950 = load i32, i32* %v1_9950, align 4
  store i32 %v2_9950, i32* %r3.global-to-local, align 4
  %v1_9954 = add i32 %v2_9950, -11
  %v2_9954 = icmp ugt i32 %v2_9950, 10
  store i1 %v2_9954, i1* %cpsr_c.global-to-local, align 1
  %v3_9954 = sub i32 10, %v2_9950
  %v4_9954 = and i32 %v3_9954, %v2_9950
  %v5_9954 = icmp slt i32 %v4_9954, 0
  store i1 %v5_9954, i1* %cpsr_v.global-to-local, align 1
  %v6_9954 = icmp slt i32 %v1_9954, 0
  store i1 %v6_9954, i1* %cpsr_n.global-to-local, align 1
  %v7_9954 = icmp eq i32 %v2_9950, 11
  store i1 %v7_9954, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9954, label %dec_label_pc_8838, label %dec_label_pc_9934

dec_label_pc_9960:                                ; preds = %bb230
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_996c = load i32, i32* @r5, align 4
  %v1_996c = add i32 %v0_996c, 4
  %v2_996c = inttoptr i32 %v1_996c to i8*
  %v3_996c = load i8, i8* %v2_996c, align 1
  %v4_996c = zext i8 %v3_996c to i32
  store i32 %v4_996c, i32* %r3.global-to-local, align 4
  %v2_9970 = icmp ugt i8 %v3_996c, 114
  store i1 %v2_9970, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9970 = icmp ult i8 %v3_996c, 115
  store i1 %v6_9970, i1* %cpsr_n.global-to-local, align 1
  %v7_9970 = icmp eq i8 %v3_996c, 115
  store i1 %v7_9970, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9970, label %bb235, label %.thread63

bb235:                                            ; preds = %dec_label_pc_9960
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread63

.thread63:                                        ; preds = %dec_label_pc_9960, %bb235
  %v3_9980 = phi i32 [ 7, %dec_label_pc_9960 ], [ 8, %bb235 ]
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 %v0_996c, i32* @r0, align 4
  %v1_9988 = load i32, i32* %r6.global-to-local, align 4
  %v2_9988 = sub i32 %v1_9988, %v3_9980
  store i32 %v2_9988, i32* @r2, align 4
  %v2_998c = add i32 %v3_9980, %v0_996c
  store i32 %v2_998c, i32* @r1, align 4
  %v3_9990 = call i32 @function_13ae0(i32 %v0_996c, i32 %v2_998c, i32 %v2_9988)
  store i32 %v3_9990, i32* %r0.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v0_9998 = load i32, i32* @r7, align 4
  store i32 %v0_9998, i32* %stack_var_-40, align 4
  store i32 %v2_8280, i32* %r1.global-to-local, align 4
  %v1_99a0 = load i32, i32* @r4, align 4
  %v2_99a0 = add i32 %v1_99a0, %v2_8280
  %v3_99a0 = inttoptr i32 %v2_99a0 to i8*
  %v4_99a0 = load i8, i8* %v3_99a0, align 1
  %v6_99a0 = zext i8 %v4_99a0 to i32
  store i32 %v6_99a0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99a4 = icmp eq i8 %v4_99a0, 0
  store i1 %v2_99a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99a4, label %dec_label_pc_99e8, label %dec_label_pc_99ac

dec_label_pc_99ac:                                ; preds = %.thread63
  %v2_99ac = icmp ugt i8 %v4_99a0, 46
  store i1 %v2_99ac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99ac = icmp ult i8 %v4_99a0, 47
  store i1 %v6_99ac, i1* %cpsr_n.global-to-local, align 1
  %v7_99ac = icmp eq i8 %v4_99a0, 47
  store i1 %v7_99ac, i1* %cpsr_z.global-to-local, align 1
  %v1_99b0 = load i32, i32* @r5, align 4
  br i1 %v7_99ac, label %bb236, label %dec_label_pc_99b8

bb236:                                            ; preds = %dec_label_pc_99ac
  store i32 %v1_99b0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9b48

dec_label_pc_99b8:                                ; preds = %dec_label_pc_99ac
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_99c8

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99c8
  %v2_99c0 = icmp ugt i8 %v4_99d4, 46
  store i1 %v2_99c0, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_99c0 = icmp ult i8 %v4_99d4, 47
  store i1 %v6_99c0, i1* %cpsr_n.global-to-local, align 1
  %v7_99c0 = icmp eq i8 %v4_99d4, 47
  store i1 %v7_99c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_99c0, label %dec_label_pc_9b48, label %dec_label_pc_99c8

dec_label_pc_99c8:                                ; preds = %dec_label_pc_99c0, %dec_label_pc_99b8
  %v0_99dc = phi i32 [ %v1_99dc, %dec_label_pc_99c0 ], [ 1, %dec_label_pc_99b8 ]
  store i32 %v0_99dc, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  store i32 %v0_99dc, i32* %stack_var_-40, align 4
  %v2_99d4 = add i32 %v0_99dc, %v1_99b0
  %v3_99d4 = inttoptr i32 %v2_99d4 to i8*
  %v4_99d4 = load i8, i8* %v3_99d4, align 1
  %v6_99d4 = zext i8 %v4_99d4 to i32
  store i32 %v6_99d4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_99d8 = icmp eq i8 %v4_99d4, 0
  store i1 %v2_99d8, i1* %cpsr_z.global-to-local, align 1
  %v1_99dc = add i32 %v0_99dc, 1
  store i32 %v1_99dc, i32* %r3.global-to-local, align 4
  store i32 %v2_99d4, i32* %r1.global-to-local, align 4
  br i1 %v2_99d8, label %dec_label_pc_99e8, label %dec_label_pc_99c0

dec_label_pc_99e8:                                ; preds = %dec_label_pc_99c8, %.thread63, %dec_label_pc_9b48
  %v0_99e8 = load i32, i32* @r5, align 4
  store i32 %v0_99e8, i32* %r0.global-to-local, align 4
  %v1_99ec = inttoptr i32 %v0_99e8 to i8*
  %v2_99ec = call i32 @function_12af0(i8* %v1_99ec)
  store i32 %v2_99ec, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_99f0 = icmp slt i32 %v2_99ec, 0
  store i1 %v1_99f0, i1* %cpsr_n.global-to-local, align 1
  %v2_99f0 = icmp eq i32 %v2_99ec, 0
  store i1 %v2_99f0, i1* %cpsr_z.global-to-local, align 1
  %tmp237 = icmp slt i32 %v2_99ec, 1
  br i1 %tmp237, label %dec_label_pc_9a14, label %dec_label_pc_99f8

dec_label_pc_99f8:                                ; preds = %dec_label_pc_99e8
  %v0_99f8 = load i32, i32* @r5, align 4
  store i32 %v0_99f8, i32* %r0.global-to-local, align 4
  %v1_99fc = inttoptr i32 %v0_99f8 to i8*
  %v2_99fc = call i32 @function_12af0(i8* %v1_99fc)
  store i32 %v2_99fc, i32* %r0.global-to-local, align 4
  %v1_9a00 = add i32 %v2_99fc, -127
  %v2_9a00 = icmp ugt i32 %v2_99fc, 126
  store i1 %v2_9a00, i1* %cpsr_c.global-to-local, align 1
  %v3_9a00 = sub i32 126, %v2_99fc
  %v4_9a00 = and i32 %v3_9a00, %v2_99fc
  %v5_9a00 = icmp slt i32 %v4_9a00, 0
  store i1 %v5_9a00, i1* %cpsr_v.global-to-local, align 1
  %v6_9a00 = icmp slt i32 %v1_9a00, 0
  store i1 %v6_9a00, i1* %cpsr_n.global-to-local, align 1
  %v7_9a00 = icmp eq i32 %v2_99fc, 127
  store i1 %v7_9a00, i1* %cpsr_z.global-to-local, align 1
  %v7_9a04 = icmp sgt i32 %v2_99fc, 127
  br i1 %v7_9a04, label %.thread66, label %bb238

bb238:                                            ; preds = %dec_label_pc_99f8
  %v8_9a04 = load i32, i32* %sb.global-to-local, align 4
  %v9_9a08 = add i32 %v8_9a04, 789
  store i32 %v9_9a08, i32* %r0.global-to-local, align 4
  %v8_9a0c = load i32, i32* @r5, align 4
  store i32 %v8_9a0c, i32* %r1.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %dec_label_pc_99f8, %bb238
  store i32 39444, i32* %lr.global-to-local, align 4
  %v3_9a10 = xor i1 %v6_9a00, %v5_9a00
  %v4_9a10 = or i1 %v7_9a00, %v3_9a10
  call void @__pseudo_cond_branch(i1 %v4_9a10, i32 ptrtoint (i32* @global_var_12b18.48 to i32))
  br label %dec_label_pc_9a14

dec_label_pc_9a14:                                ; preds = %dec_label_pc_99e8, %.thread66
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9a18 = load i32, i32* %stack_var_-40, align 4
  %v0_9a1c = load i32, i32* @r5, align 4
  %v2_9a1c = add i32 %v3_9a18, 1
  %v1_9a20 = add i32 %v2_9a1c, %v0_9a1c
  store i32 %v1_9a20, i32* %r0.global-to-local, align 4
  %v1_9a24 = inttoptr i32 %v1_9a20 to i8*
  %v2_9a24 = call i32 @function_12af0(i8* %v1_9a24)
  store i32 %v2_9a24, i32* %r0.global-to-local, align 4
  %v1_9a28 = add i32 %v2_9a24, -255
  %v2_9a28 = icmp ugt i32 %v2_9a24, 254
  store i1 %v2_9a28, i1* %cpsr_c.global-to-local, align 1
  %v3_9a28 = sub i32 254, %v2_9a24
  %v4_9a28 = and i32 %v3_9a28, %v2_9a24
  %v5_9a28 = icmp slt i32 %v4_9a28, 0
  store i1 %v5_9a28, i1* %cpsr_v.global-to-local, align 1
  %v6_9a28 = icmp slt i32 %v1_9a28, 0
  store i1 %v6_9a28, i1* %cpsr_n.global-to-local, align 1
  %v7_9a28 = icmp eq i32 %v2_9a24, 255
  store i1 %v7_9a28, i1* %cpsr_z.global-to-local, align 1
  %v8_9a2c = icmp sgt i32 %v2_9a24, 255
  br i1 %v8_9a2c, label %dec_label_pc_9400, label %dec_label_pc_9a30

dec_label_pc_9a30:                                ; preds = %dec_label_pc_9a14
  %v0_9a30 = load i32, i32* %sb.global-to-local, align 4
  %v1_9a34 = add i32 %v0_9a30, 533
  store i32 %v1_9a34, i32* @r4, align 4
  store i32 %v1_9a34, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9a40 = call i32 @function_12b90(i32 %v1_9a34, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9a48 = load i32, i32* %stack_var_-40, align 4
  %v0_9a4c = load i32, i32* @r5, align 4
  %v2_9a4c = add i32 %v3_9a48, 1
  %v1_9a50 = add i32 %v2_9a4c, %v0_9a4c
  store i32 %v1_9a50, i32* %r0.global-to-local, align 4
  %v1_9a54 = inttoptr i32 %v1_9a50 to i8*
  %v2_9a54 = call i32 @function_12af0(i8* %v1_9a54)
  store i32 %v2_9a54, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9a58 = icmp slt i32 %v2_9a54, 0
  store i1 %v1_9a58, i1* %cpsr_n.global-to-local, align 1
  %v2_9a58 = icmp eq i32 %v2_9a54, 0
  store i1 %v2_9a58, i1* %cpsr_z.global-to-local, align 1
  %tmp239 = icmp slt i32 %v2_9a54, 1
  br i1 %tmp239, label %dec_label_pc_9400, label %dec_label_pc_9a60

dec_label_pc_9a60:                                ; preds = %dec_label_pc_9a30
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9a64 = load i32, i32* %stack_var_-40, align 4
  %v0_9a68 = load i32, i32* @r5, align 4
  %v0_9a6c = load i32, i32* @r4, align 4
  store i32 %v0_9a6c, i32* @r0, align 4
  %v2_9a68 = add i32 %v3_9a64, 1
  %v1_9a70 = add i32 %v2_9a68, %v0_9a68
  store i32 %v1_9a70, i32* %r1.global-to-local, align 4
  %v2_9a74 = inttoptr i32 %v0_9a6c to i8*
  %v3_9a74 = call i32 @function_12b18(i8* %v2_9a74, i32 %v1_9a70)
  store i32 %v3_9a74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9a7c:                                ; preds = %dec_label_pc_8dd0
  %v0_9a7c = load i32, i32* @r8, align 4
  %v1_9a7c = add i32 %v0_9a7c, -1456
  %v2_9a7c = inttoptr i32 %v1_9a7c to i32*
  %v3_9a7c = load i32, i32* %v2_9a7c, align 4
  store i32 %v3_9a7c, i32* %r0.global-to-local, align 4
  %v1_9a80 = call i32 @function_134b0(i32 %v3_9a7c)
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_9a8c = load i32, i32* @r8, align 4
  %v2_9a8c = add i32 %v1_9a8c, -1456
  %v3_9a8c = inttoptr i32 %v2_9a8c to i32*
  store i32 -1, i32* %v3_9a8c, align 4
  %v0_9a90 = load i32, i32* %r3.global-to-local, align 4
  %v1_9a90 = trunc i32 %v0_9a90 to i8
  %v2_9a90 = load i32, i32* @r8, align 4
  %v3_9a90 = add i32 %v2_9a90, -1452
  %v4_9a90 = inttoptr i32 %v3_9a90 to i8*
  store i8 %v1_9a90, i8* %v4_9a90, align 1
  br label %dec_label_pc_8838

dec_label_pc_9a98:                                ; preds = %dec_label_pc_9650
  %v0_9a98 = load i32, i32* @r8, align 4
  %v1_9a98 = add i32 %v0_9a98, -1452
  %v2_9a98 = inttoptr i32 %v1_9a98 to i8*
  %v3_9a98 = load i8, i8* %v2_9a98, align 1
  %v4_9a98 = zext i8 %v3_9a98 to i32
  store i32 %v4_9a98, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9a9c = icmp eq i8 %v3_9a98, 0
  store i1 %v2_9a9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9a9c, label %dec_label_pc_8838, label %dec_label_pc_9400

dec_label_pc_9aa8:                                ; preds = %dec_label_pc_98c0
  %v0_9aa8 = load i32, i32* @r4, align 4
  store i32 %v0_9aa8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_15d7c.21 to i32), i32* %r1.global-to-local, align 4
  %v3_9ab0 = inttoptr i32 %v0_9aa8 to i8*
  %v4_9ab0 = call i32 @function_12ed0(i8* %v3_9ab0, i32 ptrtoint ([4 x i8]* @global_var_15d7c.21 to i32))
  store i32 %v4_9ab0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9ab4 = icmp slt i32 %v4_9ab0, 0
  store i1 %v1_9ab4, i1* %cpsr_n.global-to-local, align 1
  %v2_9ab4 = icmp eq i32 %v4_9ab0, 0
  store i1 %v2_9ab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ab4, label %bb240, label %dec_label_pc_98f4

bb240:                                            ; preds = %dec_label_pc_9aa8
  %v0_9abc = load i32, i32* %fp.global-to-local, align 4
  %v1_9abc = load i32, i32* @r5, align 4
  %v2_9abc = sub i32 %v0_9abc, %v1_9abc
  %v3_9abc = icmp uge i32 %v0_9abc, %v1_9abc
  store i1 %v3_9abc, i1* %cpsr_c.global-to-local, align 1
  %v4_9abc = xor i32 %v1_9abc, %v0_9abc
  %v5_9abc = xor i32 %v2_9abc, %v0_9abc
  %v6_9abc = and i32 %v5_9abc, %v4_9abc
  %v7_9abc = icmp slt i32 %v6_9abc, 0
  store i1 %v7_9abc, i1* %cpsr_v.global-to-local, align 1
  %v8_9abc = icmp slt i32 %v2_9abc, 0
  store i1 %v8_9abc, i1* %cpsr_n.global-to-local, align 1
  %v9_9abc = icmp eq i32 %v0_9abc, %v1_9abc
  store i1 %v9_9abc, i1* %cpsr_z.global-to-local, align 1
  %v7_9ac0 = icmp sgt i32 %v0_9abc, %v1_9abc
  %. = select i1 %v7_9ac0, i32 10, i32 1
  store i32 %., i32* %r3.global-to-local, align 4
  %v9_9ac8 = trunc i32 %. to i8
  %v10_9ac8 = load i32, i32* @r8, align 4
  %v11_9ac8 = add i32 %v10_9ac8, -1452
  %v12_9ac8 = inttoptr i32 %v11_9ac8 to i8*
  store i8 %v9_9ac8, i8* %v12_9ac8, align 1
  br label %dec_label_pc_98fc

dec_label_pc_9ad4:                                ; preds = %dec_label_pc_9548
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 36, i32* %r0.global-to-local, align 4
  %v0_9adc = load i32, i32* @r8, align 4
  %v1_9adc = add i32 %v0_9adc, 656
  %v2_9adc = inttoptr i32 %v1_9adc to i32*
  %v3_9adc = load i32, i32* %v2_9adc, align 4
  store i32 %v3_9adc, i32* @r4, align 4
  %v3_9ae0 = call i32 @function_120e0(i32 36, i32* null)
  %v0_9ae4 = load i32, i32* @r4, align 4
  store i32 %v0_9ae4, i32* %r1.global-to-local, align 4
  store i32 %v3_9ae0, i32* %r2.global-to-local, align 4
  store i32 11, i32* %r3.global-to-local, align 4
  %v0_9af0 = load i32, i32* @r7, align 4
  store i32 %v0_9af0, i32* %r0.global-to-local, align 4
  %v4_9af4 = call i32 @function_12bb4(i32 %v0_9af0, i32 %v0_9ae4, i32 %v3_9ae0, i32 11)
  store i32 %v4_9af4, i32* %r0.global-to-local, align 4
  %v0_9af8 = load i32, i32* @r8, align 4
  %v1_9af8 = add i32 %v0_9af8, 656
  %v2_9af8 = inttoptr i32 %v1_9af8 to i32*
  %v3_9af8 = load i32, i32* %v2_9af8, align 4
  %v0_9afc = load i32, i32* @r7, align 4
  %v2_9afc = add i32 %v0_9afc, %v4_9af4
  store i32 %v2_9afc, i32* @r5, align 4
  store i32 %v4_9af4, i32* @r4, align 4
  %v2_9b04 = sub i32 %v3_9af8, %v4_9af4
  store i32 %v2_9b04, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15db8.50 to i32), i32* %r2.global-to-local, align 4
  %v0_9b0c = load i32, i32* @sl, align 4
  store i32 %v0_9b0c, i32* %r3.global-to-local, align 4
  store i32 %v2_9afc, i32* %r0.global-to-local, align 4
  %v4_9b14 = call i32 @function_12bb4(i32 %v2_9afc, i32 %v2_9b04, i32 ptrtoint (i32* @global_var_15db8.50 to i32), i32 %v0_9b0c)
  store i32 %v4_9b14, i32* %r0.global-to-local, align 4
  %v0_9b18 = load i32, i32* @r8, align 4
  %v1_9b18 = add i32 %v0_9b18, 12
  %v2_9b18 = inttoptr i32 %v1_9b18 to i32*
  %v3_9b18 = load i32, i32* %v2_9b18, align 4
  store i32 %v3_9b18, i32* %r3.global-to-local, align 4
  %v0_9b1c = load i32, i32* @r4, align 4
  %v2_9b1c = add i32 %v0_9b1c, %v4_9b14
  store i32 %v2_9b1c, i32* %r6.global-to-local, align 4
  %v1_9b20 = load i32, i32* %sb.global-to-local, align 4
  %v2_9b20 = add i32 %v1_9b20, %v2_9b1c
  store i32 %v2_9b20, i32* %r2.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  %v1_9b28 = add i32 %v3_9b18, -4
  %v2_9b28 = icmp ugt i32 %v3_9b18, 3
  store i1 %v2_9b28, i1* %cpsr_c.global-to-local, align 1
  %v3_9b28 = sub i32 3, %v3_9b18
  %v4_9b28 = and i32 %v3_9b28, %v3_9b18
  %v5_9b28 = icmp slt i32 %v4_9b28, 0
  store i1 %v5_9b28, i1* %cpsr_v.global-to-local, align 1
  %v6_9b28 = icmp slt i32 %v1_9b28, 0
  store i1 %v6_9b28, i1* %cpsr_n.global-to-local, align 1
  %v7_9b28 = icmp eq i32 %v3_9b18, 4
  store i1 %v7_9b28, i1* %cpsr_z.global-to-local, align 1
  %v3_9b2c = add i32 %v2_9b20, 2115
  %v4_9b2c = inttoptr i32 %v3_9b2c to i8*
  store i8 0, i8* %v4_9b2c, align 1
  %v7_9b30 = icmp sgt i32 %v3_9b18, 4
  br i1 %v7_9b30, label %dec_label_pc_9b34, label %dec_label_pc_9bbc

dec_label_pc_9b34:                                ; preds = %dec_label_pc_9ad4, %dec_label_pc_9bbc, %dec_label_pc_9bcc
  store i32 -1, i32* %r6.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_9b3c = load i32, i32* @r8, align 4
  %v2_9b3c = add i32 %v1_9b3c, 8
  %v3_9b3c = inttoptr i32 %v2_9b3c to i32*
  store i32 -1, i32* %v3_9b3c, align 4
  %v0_9b40 = load i32, i32* %r3.global-to-local, align 4
  %v1_9b40 = trunc i32 %v0_9b40 to i8
  %v2_9b40 = load i32, i32* @r8, align 4
  %v3_9b40 = add i32 %v2_9b40, -1452
  %v4_9b40 = inttoptr i32 %v3_9b40 to i8*
  store i8 %v1_9b40, i8* %v4_9b40, align 1
  br label %dec_label_pc_8838

dec_label_pc_9b48:                                ; preds = %dec_label_pc_99c0, %bb236
  %v2_9b4c = phi i32 [ %v1_99b0, %bb236 ], [ %v2_99d4, %dec_label_pc_99c0 ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9b4c = inttoptr i32 %v2_9b4c to i8*
  store i8 0, i8* %v3_9b4c, align 1
  br label %dec_label_pc_99e8

dec_label_pc_9b54:                                ; preds = %dec_label_pc_93f0
  %v0_9b54 = load i32, i32* %sb.global-to-local, align 4
  %v1_9b58 = add i32 %v0_9b54, 533
  store i32 %v1_9b58, i32* @r4, align 4
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9b64 = call i32 @function_12b90(i32 %v1_9b58, i32 255)
  store i32 %v10_82f0, i32* %lr.global-to-local, align 4
  %v3_9b6c = load i32, i32* %stack_var_-40, align 4
  %v0_9b70 = load i32, i32* @r5, align 4
  %v2_9b70 = add i32 %v3_9b6c, 1
  %v1_9b74 = add i32 %v2_9b70, %v0_9b70
  store i32 %v1_9b74, i32* %r0.global-to-local, align 4
  %v1_9b78 = inttoptr i32 %v1_9b74 to i8*
  %v2_9b78 = call i32 @function_12af0(i8* %v1_9b78)
  store i32 %v2_9b78, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9b7c = icmp slt i32 %v2_9b78, 0
  store i1 %v1_9b7c, i1* %cpsr_n.global-to-local, align 1
  %v2_9b7c = icmp eq i32 %v2_9b78, 0
  store i1 %v2_9b7c, i1* %cpsr_z.global-to-local, align 1
  %tmp241 = icmp slt i32 %v2_9b78, 1
  br i1 %tmp241, label %dec_label_pc_9400, label %dec_label_pc_9b84

dec_label_pc_9b84:                                ; preds = %dec_label_pc_9b54
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9b88 = load i32, i32* %stack_var_-40, align 4
  %v0_9b8c = load i32, i32* @r5, align 4
  %v2_9b8c = add i32 %v3_9b88, 1
  %v1_9b90 = add i32 %v2_9b8c, %v0_9b8c
  store i32 %v1_9b90, i32* %r0.global-to-local, align 4
  %v1_9b94 = inttoptr i32 %v1_9b90 to i8*
  %v2_9b94 = call i32 @function_12af0(i8* %v1_9b94)
  store i32 %v2_9b94, i32* %r0.global-to-local, align 4
  %v1_9b98 = add i32 %v2_9b94, -255
  %v2_9b98 = icmp ugt i32 %v2_9b94, 254
  store i1 %v2_9b98, i1* %cpsr_c.global-to-local, align 1
  %v3_9b98 = sub i32 254, %v2_9b94
  %v4_9b98 = and i32 %v3_9b98, %v2_9b94
  %v5_9b98 = icmp slt i32 %v4_9b98, 0
  store i1 %v5_9b98, i1* %cpsr_v.global-to-local, align 1
  %v6_9b98 = icmp slt i32 %v1_9b98, 0
  store i1 %v6_9b98, i1* %cpsr_n.global-to-local, align 1
  %v7_9b98 = icmp eq i32 %v2_9b94, 255
  store i1 %v7_9b98, i1* %cpsr_z.global-to-local, align 1
  %v8_9b9c = icmp sgt i32 %v2_9b94, 255
  br i1 %v8_9b9c, label %dec_label_pc_9400, label %dec_label_pc_9ba0

dec_label_pc_9ba0:                                ; preds = %dec_label_pc_9b84
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9ba4 = load i32, i32* %stack_var_-40, align 4
  %v0_9ba8 = load i32, i32* @r5, align 4
  %v0_9bac = load i32, i32* @r4, align 4
  store i32 %v0_9bac, i32* @r0, align 4
  %v2_9ba8 = add i32 %v3_9ba4, 1
  %v1_9bb0 = add i32 %v2_9ba8, %v0_9ba8
  store i32 %v1_9bb0, i32* %r1.global-to-local, align 4
  %v2_9bb4 = inttoptr i32 %v0_9bac to i8*
  %v3_9bb4 = call i32 @function_12b18(i8* %v2_9bb4, i32 %v1_9bb0)
  store i32 %v3_9bb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9400

dec_label_pc_9bbc:                                ; preds = %dec_label_pc_9ad4
  %v0_9bbc = load i32, i32* @r5, align 4
  store i32 %v0_9bbc, i32* %r0.global-to-local, align 4
  %v1_9bc0 = inttoptr i32 %v0_9bbc to i8*
  %v2_9bc0 = call i32 @function_12af0(i8* %v1_9bc0)
  store i32 %v2_9bc0, i32* %r0.global-to-local, align 4
  %v1_9bc4 = add i32 %v2_9bc0, -127
  %v2_9bc4 = icmp ugt i32 %v2_9bc0, 126
  store i1 %v2_9bc4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bc4 = sub i32 126, %v2_9bc0
  %v4_9bc4 = and i32 %v3_9bc4, %v2_9bc0
  %v5_9bc4 = icmp slt i32 %v4_9bc4, 0
  store i1 %v5_9bc4, i1* %cpsr_v.global-to-local, align 1
  %v6_9bc4 = icmp slt i32 %v1_9bc4, 0
  store i1 %v6_9bc4, i1* %cpsr_n.global-to-local, align 1
  %v7_9bc4 = icmp eq i32 %v2_9bc0, 127
  store i1 %v7_9bc4, i1* %cpsr_z.global-to-local, align 1
  %v8_9bc8 = icmp sgt i32 %v2_9bc0, 127
  br i1 %v8_9bc8, label %dec_label_pc_9b34, label %dec_label_pc_9bcc

dec_label_pc_9bcc:                                ; preds = %dec_label_pc_9bbc
  %v0_9bcc = load i32, i32* @r8, align 4
  %v1_9bcc = add i32 %v0_9bcc, 12
  %v2_9bcc = inttoptr i32 %v1_9bcc to i32*
  %v3_9bcc = load i32, i32* %v2_9bcc, align 4
  store i32 %v1_9410, i32* %r2.global-to-local, align 4
  %v1_9bd4 = and i32 %v3_9bcc, 33554432
  %v2_9bd4 = icmp ne i32 %v1_9bd4, 0
  store i1 %v2_9bd4, i1* %cpsr_c.global-to-local, align 1
  %v3_9bd4 = mul i32 %v3_9bcc, 128
  %v0_9bd8 = load i32, i32* @r5, align 4
  store i32 %v0_9bd8, i32* %r1.global-to-local, align 4
  %v2_9bdc = add i32 %v3_9bd4, %v1_9410
  store i32 %v2_9bdc, i32* @r0, align 4
  %v2_9be0 = inttoptr i32 %v2_9bdc to i8*
  %v3_9be0 = call i32 @function_12b18(i8* %v2_9be0, i32 %v0_9bd8)
  store i32 %v3_9be0, i32* %r0.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r8, align 4
  %v1_9be4 = add i32 %v0_9be4, 12
  %v2_9be4 = inttoptr i32 %v1_9be4 to i32*
  %v3_9be4 = load i32, i32* %v2_9be4, align 4
  store i32 %v1_9410, i32* %r3.global-to-local, align 4
  %v1_9bec = and i32 %v3_9be4, 33554432
  %v2_9bec = icmp ne i32 %v1_9bec, 0
  store i1 %v2_9bec, i1* %cpsr_c.global-to-local, align 1
  %v3_9bec = mul i32 %v3_9be4, 128
  %v2_9bf0 = add i32 %v3_9bec, %v1_9410
  store i32 %v2_9bf0, i32* %r4.global-to-local, align 4
  store i32 %v2_9bf0, i32* %r0.global-to-local, align 4
  %v1_9bf8 = inttoptr i32 %v2_9bf0 to i8*
  %v2_9bf8 = call i32 @function_12af0(i8* %v1_9bf8)
  store i32 ptrtoint (i32* @global_var_15dbc.52 to i32), i32* %r1.global-to-local, align 4
  %v2_9c00 = add i32 %v2_9bf0, %v2_9bf8
  store i32 %v2_9c00, i32* @r0, align 4
  %v2_9c04 = inttoptr i32 %v2_9c00 to i8*
  %v3_9c04 = call i32 @function_12b18(i8* %v2_9c04, i32 ptrtoint (i32* @global_var_15dbc.52 to i32))
  store i32 %v3_9c04, i32* %r0.global-to-local, align 4
  %v0_9c08 = load i32, i32* %r6.global-to-local, align 4
  %v1_9c08 = add i32 %v0_9c08, 3
  store i32 %v1_9c08, i32* @r4, align 4
  %v0_9c0c = load i32, i32* @r8, align 4
  %v1_9c0c = add i32 %v0_9c0c, 656
  %v2_9c0c = inttoptr i32 %v1_9c0c to i32*
  %v3_9c0c = load i32, i32* %v2_9c0c, align 4
  %v0_9c10 = load i32, i32* @r7, align 4
  %v2_9c10 = add i32 %v0_9c10, %v1_9c08
  store i32 %v2_9c10, i32* %r6.global-to-local, align 4
  %v2_9c14 = sub i32 %v3_9c0c, %v1_9c08
  store i32 %v2_9c14, i32* %r1.global-to-local, align 4
  %v0_9c18 = load i32, i32* @sl, align 4
  store i32 %v0_9c18, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15db8.50 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_9c10, i32* %r0.global-to-local, align 4
  %v4_9c24 = call i32 @function_12bb4(i32 %v2_9c10, i32 %v2_9c14, i32 ptrtoint (i32* @global_var_15db8.50 to i32), i32 %v0_9c18)
  store i32 %v4_9c24, i32* %r0.global-to-local, align 4
  %v0_9c28 = load i32, i32* @r8, align 4
  %v1_9c28 = add i32 %v0_9c28, 12
  %v2_9c28 = inttoptr i32 %v1_9c28 to i32*
  %v3_9c28 = load i32, i32* %v2_9c28, align 4
  store i32 %v1_9410, i32* %ip.global-to-local, align 4
  %v1_9c30 = and i32 %v3_9c28, 33554432
  %v2_9c30 = icmp ne i32 %v1_9c30, 0
  store i1 %v2_9c30, i1* %cpsr_c.global-to-local, align 1
  %v3_9c30 = mul i32 %v3_9c28, 128
  %v0_9c34 = load i32, i32* @r4, align 4
  %v1_9c34 = load i32, i32* %sb.global-to-local, align 4
  %v2_9c38 = add i32 %v3_9c30, %v1_9410
  store i32 %v2_9c38, i32* @r5, align 4
  %v2_9c34 = add i32 %v0_9c34, %v4_9c24
  %v2_9c3c = add i32 %v2_9c34, %v1_9c34
  store i32 %v2_9c3c, i32* @r4, align 4
  %v0_9c40 = load i32, i32* %fp.global-to-local, align 4
  %v1_9c40 = trunc i32 %v0_9c40 to i8
  %v3_9c40 = add i32 %v2_9c3c, 2115
  %v4_9c40 = inttoptr i32 %v3_9c40 to i8*
  store i8 %v1_9c40, i8* %v4_9c40, align 1
  %v0_9c44 = load i32, i32* @r5, align 4
  store i32 %v0_9c44, i32* %r0.global-to-local, align 4
  %v1_9c48 = inttoptr i32 %v0_9c44 to i8*
  %v2_9c48 = call i32 @function_12af0(i8* %v1_9c48)
  %v0_9c4c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_9c4c, i32* %r1.global-to-local, align 4
  %v0_9c50 = load i32, i32* @r5, align 4
  %v2_9c50 = add i32 %v0_9c50, %v2_9c48
  store i32 %v2_9c50, i32* @r0, align 4
  %v2_9c54 = inttoptr i32 %v2_9c50 to i8*
  %v3_9c54 = call i32 @function_12b18(i8* %v2_9c54, i32 %v0_9c4c)
  store i32 %v3_9c54, i32* %r0.global-to-local, align 4
  %v0_9c58 = load i32, i32* @r8, align 4
  %v1_9c58 = add i32 %v0_9c58, 12
  %v2_9c58 = inttoptr i32 %v1_9c58 to i32*
  %v3_9c58 = load i32, i32* %v2_9c58, align 4
  %v1_9c5c = add i32 %v3_9c58, 1
  store i32 %v1_9c5c, i32* %r3.global-to-local, align 4
  store i32 %v1_9c5c, i32* %v2_9c58, align 4
  br label %dec_label_pc_9b34

dec_label_pc_9c68:                                ; preds = %dec_label_pc_984c
  store i32 7, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %stack_var_-40, align 4
  %v0_9c74 = load i32, i32* @r5, align 4
  %v1_9c74 = add i32 %v0_9c74, 4
  %v2_9c74 = inttoptr i32 %v1_9c74 to i8*
  %v3_9c74 = load i8, i8* %v2_9c74, align 1
  %v4_9c74 = zext i8 %v3_9c74 to i32
  store i32 %v4_9c74, i32* %r3.global-to-local, align 4
  %v2_9c78 = icmp ugt i8 %v3_9c74, 114
  store i1 %v2_9c78, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9c78 = icmp ult i8 %v3_9c74, 115
  store i1 %v6_9c78, i1* %cpsr_n.global-to-local, align 1
  %v7_9c78 = icmp eq i8 %v3_9c74, 115
  store i1 %v7_9c78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9c78, label %bb242, label %.thread69

bb242:                                            ; preds = %dec_label_pc_9c68
  store i32 8, i32* %ip.global-to-local, align 4
  store i32 8, i32* %stack_var_-40, align 4
  br label %.thread69

.thread69:                                        ; preds = %dec_label_pc_9c68, %bb242
  %v3_9c88 = phi i32 [ 7, %dec_label_pc_9c68 ], [ 8, %bb242 ]
  %v0_9c8c = load i32, i32* @r7, align 4
  %v1_9c8c = sub nsw i32 1, %v3_9c88
  %v2_9c90 = add i32 %v1_9c8c, %v0_9c8c
  store i32 %v2_9c90, i32* @r2, align 4
  store i32 %v0_9c74, i32* @r0, align 4
  %v2_9c98 = add i32 %v3_9c88, %v0_9c74
  store i32 %v2_9c98, i32* @r1, align 4
  %v3_9c9c = call i32 @function_13ae0(i32 %v0_9c74, i32 %v2_9c98, i32 %v2_9c90)
  store i32 %v3_9c9c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v0_9cac = load i32, i32* @r6, align 4
  %v1_9cac = load i32, i32* @r4, align 4
  %v2_9cac = add i32 %v1_9cac, %v0_9cac
  %v3_9cac = inttoptr i32 %v2_9cac to i8*
  %v4_9cac = load i8, i8* %v3_9cac, align 1
  %v6_9cac = zext i8 %v4_9cac to i32
  store i32 %v6_9cac, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v9_9cb0 = icmp eq i8 %v4_9cac, 0
  store i1 %v9_9cb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9cb0, label %dec_label_pc_9cf0, label %dec_label_pc_9cb8

dec_label_pc_9cb8:                                ; preds = %.thread69
  %v2_9cb8 = icmp ugt i8 %v4_9cac, 46
  store i1 %v2_9cb8, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9cb8 = icmp ult i8 %v4_9cac, 47
  store i1 %v6_9cb8, i1* %cpsr_n.global-to-local, align 1
  %v7_9cb8 = icmp eq i8 %v4_9cac, 47
  store i1 %v7_9cb8, i1* %cpsr_z.global-to-local, align 1
  %v1_9cbc = load i32, i32* @r5, align 4
  br i1 %v7_9cb8, label %bb243, label %dec_label_pc_9cc4

bb243:                                            ; preds = %dec_label_pc_9cb8
  store i32 %v1_9cbc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9dd4

dec_label_pc_9cc4:                                ; preds = %dec_label_pc_9cb8
  store i32 1, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9cd4

dec_label_pc_9ccc:                                ; preds = %dec_label_pc_9cd4
  %v2_9ccc = icmp ugt i8 %v4_9cdc, 46
  store i1 %v2_9ccc, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9ccc = icmp ult i8 %v4_9cdc, 47
  store i1 %v6_9ccc, i1* %cpsr_n.global-to-local, align 1
  %v7_9ccc = icmp eq i8 %v4_9cdc, 47
  store i1 %v7_9ccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ccc, label %dec_label_pc_9dd4, label %dec_label_pc_9cd4

dec_label_pc_9cd4:                                ; preds = %dec_label_pc_9ccc, %dec_label_pc_9cc4
  %v1_9ce4 = phi i32 [ %v1_9ce8, %dec_label_pc_9ccc ], [ 1, %dec_label_pc_9cc4 ]
  store i32 %v10_82f0, i32* @lr, align 4
  store i32 %v1_9ce4, i32* %stack_var_-40, align 4
  %v2_9cdc = add i32 %v1_9ce4, %v1_9cbc
  %v3_9cdc = inttoptr i32 %v2_9cdc to i8*
  %v4_9cdc = load i8, i8* %v3_9cdc, align 1
  %v6_9cdc = zext i8 %v4_9cdc to i32
  store i32 %v6_9cdc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_9ce0 = icmp eq i8 %v4_9cdc, 0
  store i1 %v2_9ce0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_9cdc, i32* %r1.global-to-local, align 4
  %v1_9ce8 = add i32 %v1_9ce4, 1
  store i32 %v1_9ce8, i32* %r3.global-to-local, align 4
  br i1 %v2_9ce0, label %dec_label_pc_9cf0, label %dec_label_pc_9ccc

dec_label_pc_9cf0:                                ; preds = %dec_label_pc_9cd4, %.thread69, %dec_label_pc_9dd4
  %v0_9cf0 = load i32, i32* @r5, align 4
  store i32 %v0_9cf0, i32* %r0.global-to-local, align 4
  %v1_9cf4 = inttoptr i32 %v0_9cf0 to i8*
  %v2_9cf4 = call i32 @function_12af0(i8* %v1_9cf4)
  store i32 %v2_9cf4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9cf8 = icmp slt i32 %v2_9cf4, 0
  store i1 %v1_9cf8, i1* %cpsr_n.global-to-local, align 1
  %v2_9cf8 = icmp eq i32 %v2_9cf4, 0
  store i1 %v2_9cf8, i1* %cpsr_z.global-to-local, align 1
  %tmp244 = icmp slt i32 %v2_9cf4, 1
  br i1 %tmp244, label %dec_label_pc_9d1c, label %dec_label_pc_9d00

dec_label_pc_9d00:                                ; preds = %dec_label_pc_9cf0
  %v0_9d00 = load i32, i32* @r5, align 4
  store i32 %v0_9d00, i32* %r0.global-to-local, align 4
  %v1_9d04 = inttoptr i32 %v0_9d00 to i8*
  %v2_9d04 = call i32 @function_12af0(i8* %v1_9d04)
  store i32 %v2_9d04, i32* %r0.global-to-local, align 4
  %v1_9d08 = add i32 %v2_9d04, -127
  %v2_9d08 = icmp ugt i32 %v2_9d04, 126
  store i1 %v2_9d08, i1* %cpsr_c.global-to-local, align 1
  %v3_9d08 = sub i32 126, %v2_9d04
  %v4_9d08 = and i32 %v3_9d08, %v2_9d04
  %v5_9d08 = icmp slt i32 %v4_9d08, 0
  store i1 %v5_9d08, i1* %cpsr_v.global-to-local, align 1
  %v6_9d08 = icmp slt i32 %v1_9d08, 0
  store i1 %v6_9d08, i1* %cpsr_n.global-to-local, align 1
  %v7_9d08 = icmp eq i32 %v2_9d04, 127
  store i1 %v7_9d08, i1* %cpsr_z.global-to-local, align 1
  %v7_9d0c = icmp sgt i32 %v2_9d04, 127
  br i1 %v7_9d0c, label %.thread72, label %bb245

bb245:                                            ; preds = %dec_label_pc_9d00
  %v8_9d0c = load i32, i32* %sb.global-to-local, align 4
  %v9_9d10 = add i32 %v8_9d0c, 789
  store i32 %v9_9d10, i32* %r0.global-to-local, align 4
  %v8_9d14 = load i32, i32* @r5, align 4
  store i32 %v8_9d14, i32* %r1.global-to-local, align 4
  br label %.thread72

.thread72:                                        ; preds = %dec_label_pc_9d00, %bb245
  store i32 40220, i32* @lr, align 4
  %v3_9d18 = xor i1 %v6_9d08, %v5_9d08
  %v4_9d18 = or i1 %v7_9d08, %v3_9d18
  call void @__pseudo_cond_branch(i1 %v4_9d18, i32 ptrtoint (i32* @global_var_12b18.48 to i32))
  br label %dec_label_pc_9d1c

dec_label_pc_9d1c:                                ; preds = %dec_label_pc_9cf0, %.thread72
  store i32 %v10_82f0, i32* %r1.global-to-local, align 4
  %v3_9d20 = load i32, i32* %stack_var_-40, align 4
  %v0_9d24 = load i32, i32* @r5, align 4
  %v2_9d24 = add i32 %v3_9d20, 1
  %v1_9d28 = add i32 %v2_9d24, %v0_9d24
  store i32 %v1_9d28, i32* %r0.global-to-local, align 4
  %v1_9d2c = inttoptr i32 %v1_9d28 to i8*
  %v2_9d2c = call i32 @function_12af0(i8* %v1_9d2c)
  store i32 %v2_9d2c, i32* %r0.global-to-local, align 4
  %v1_9d30 = add i32 %v2_9d2c, -255
  %v2_9d30 = icmp ugt i32 %v2_9d2c, 254
  store i1 %v2_9d30, i1* %cpsr_c.global-to-local, align 1
  %v3_9d30 = sub i32 254, %v2_9d2c
  %v4_9d30 = and i32 %v3_9d30, %v2_9d2c
  %v5_9d30 = icmp slt i32 %v4_9d30, 0
  store i1 %v5_9d30, i1* %cpsr_v.global-to-local, align 1
  %v6_9d30 = icmp slt i32 %v1_9d30, 0
  store i1 %v6_9d30, i1* %cpsr_n.global-to-local, align 1
  %v7_9d30 = icmp eq i32 %v2_9d2c, 255
  store i1 %v7_9d30, i1* %cpsr_z.global-to-local, align 1
  %v8_9d34 = icmp sgt i32 %v2_9d2c, 255
  br i1 %v8_9d34, label %dec_label_pc_9884, label %dec_label_pc_9d38

dec_label_pc_9d38:                                ; preds = %dec_label_pc_9d1c
  %v0_9d38 = load i32, i32* %sb.global-to-local, align 4
  %v1_9d3c = add i32 %v0_9d38, 533
  store i32 %v1_9d3c, i32* @r4, align 4
  store i32 %v1_9d3c, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9d48 = call i32 @function_12b90(i32 %v1_9d3c, i32 255)
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9d50 = load i32, i32* %stack_var_-40, align 4
  %v0_9d54 = load i32, i32* @r5, align 4
  %v2_9d54 = add i32 %v3_9d50, 1
  %v1_9d58 = add i32 %v2_9d54, %v0_9d54
  store i32 %v1_9d58, i32* %r0.global-to-local, align 4
  %v1_9d5c = inttoptr i32 %v1_9d58 to i8*
  %v2_9d5c = call i32 @function_12af0(i8* %v1_9d5c)
  store i32 %v2_9d5c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9d60 = icmp slt i32 %v2_9d5c, 0
  store i1 %v1_9d60, i1* %cpsr_n.global-to-local, align 1
  %v2_9d60 = icmp eq i32 %v2_9d5c, 0
  store i1 %v2_9d60, i1* %cpsr_z.global-to-local, align 1
  %tmp246 = icmp slt i32 %v2_9d5c, 1
  br i1 %tmp246, label %dec_label_pc_9884, label %dec_label_pc_9d68

dec_label_pc_9d68:                                ; preds = %dec_label_pc_9d38
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9d6c = load i32, i32* %stack_var_-40, align 4
  %v0_9d70 = load i32, i32* @r5, align 4
  %v0_9d74 = load i32, i32* @r4, align 4
  store i32 %v0_9d74, i32* @r0, align 4
  %v2_9d70 = add i32 %v3_9d6c, 1
  %v1_9d78 = add i32 %v2_9d70, %v0_9d70
  store i32 %v1_9d78, i32* %r1.global-to-local, align 4
  %v2_9d7c = inttoptr i32 %v0_9d74 to i8*
  %v3_9d7c = call i32 @function_12b18(i8* %v2_9d7c, i32 %v1_9d78)
  store i32 %v3_9d7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9d84:                                ; preds = %dec_label_pc_95ec
  %v0_9d84 = load i32, i32* @r4, align 4
  %v1_9d84 = trunc i32 %v0_9d84 to i8
  %v2_9d84 = load i32, i32* @r8, align 4
  %v3_9d84 = add i32 %v2_9d84, -1452
  %v4_9d84 = inttoptr i32 %v3_9d84 to i8*
  store i8 %v1_9d84, i8* %v4_9d84, align 1
  br label %dec_label_pc_8838

dec_label_pc_9d8c:                                ; preds = %dec_label_pc_9804
  %v1_9d8c = add i32 %v0_9d8c, 1
  store i32 %v1_9d8c, i32* %ip.global-to-local, align 4
  %v2_9d90 = add i32 %v0_9804, %v1_9d8c
  store i32 %v2_9d90, i32* %r4.global-to-local, align 4
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  store i32 %v2_9d90, i32* %r0.global-to-local, align 4
  store i32 %v1_9d8c, i32* %stack_var_-40, align 4
  %v1_9da0 = inttoptr i32 %v2_9d90 to i8*
  %v2_9da0 = call i32 @function_12af0(i8* %v1_9da0)
  store i32 %v2_9da0, i32* %r0.global-to-local, align 4
  %v0_9da4 = load i32, i32* %r4.global-to-local, align 4
  %v2_9da4 = add i32 %v0_9da4, %v2_9da0
  store i32 %v2_9da4, i32* @r4, align 4
  %v1_9da8 = add i32 %v2_9da4, -1
  %v2_9da8 = inttoptr i32 %v1_9da8 to i8*
  %v3_9da8 = load i8, i8* %v2_9da8, align 1
  %v4_9da8 = zext i8 %v3_9da8 to i32
  store i32 %v4_9da8, i32* %r3.global-to-local, align 4
  %v2_9dac = icmp ugt i8 %v3_9da8, 33
  store i1 %v2_9dac, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v6_9dac = icmp ult i8 %v3_9da8, 34
  store i1 %v6_9dac, i1* %cpsr_n.global-to-local, align 1
  %v7_9dac = icmp eq i8 %v3_9da8, 34
  store i1 %v7_9dac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9dac, label %dec_label_pc_9db4, label %dec_label_pc_9810

dec_label_pc_9db4:                                ; preds = %dec_label_pc_9d8c
  store i32 %v10_82f0, i32* %r3.global-to-local, align 4
  %v3_9db8 = load i32, i32* %stack_var_-40, align 4
  %v0_9dbc = load i32, i32* @r6, align 4
  %v2_9dbc = add i32 %v0_9dbc, %v3_9db8
  store i32 %v2_9dbc, i32* %r4.global-to-local, align 4
  store i32 %v2_9dbc, i32* %r0.global-to-local, align 4
  %v1_9dc4 = inttoptr i32 %v2_9dbc to i8*
  %v2_9dc4 = call i32 @function_12af0(i8* %v1_9dc4)
  store i32 %v2_9dc4, i32* %r0.global-to-local, align 4
  %v2_9dc8 = add i32 %v2_9dbc, %v2_9dc4
  store i32 %v2_9dc8, i32* @r4, align 4
  %v0_9dcc = load i32, i32* @r5, align 4
  %v1_9dcc = trunc i32 %v0_9dcc to i8
  %v3_9dcc = add i32 %v2_9dc8, -1
  %v4_9dcc = inttoptr i32 %v3_9dcc to i8*
  store i8 %v1_9dcc, i8* %v4_9dcc, align 1
  br label %dec_label_pc_9810

dec_label_pc_9dd4:                                ; preds = %dec_label_pc_9ccc, %bb243
  %v2_9dd8 = phi i32 [ %v1_9cbc, %bb243 ], [ %v2_9cdc, %dec_label_pc_9ccc ]
  store i32 0, i32* %ip.global-to-local, align 4
  %v3_9dd8 = inttoptr i32 %v2_9dd8 to i8*
  store i8 0, i8* %v3_9dd8, align 1
  br label %dec_label_pc_9cf0

dec_label_pc_9de0:                                ; preds = %dec_label_pc_9878
  store i32 %v10_82f0, i32* %ip.global-to-local, align 4
  %v3_9de4 = load i32, i32* %stack_var_-40, align 4
  %v0_9de8 = load i32, i32* @r5, align 4
  %v2_9de8 = add i32 %v3_9de4, 1
  %v1_9dec = add i32 %v2_9de8, %v0_9de8
  store i32 %v1_9dec, i32* %r0.global-to-local, align 4
  %v1_9df0 = inttoptr i32 %v1_9dec to i8*
  %v2_9df0 = call i32 @function_12af0(i8* %v1_9df0)
  store i32 %v2_9df0, i32* %r0.global-to-local, align 4
  %v1_9df4 = add i32 %v2_9df0, -255
  %v2_9df4 = icmp ugt i32 %v2_9df0, 254
  store i1 %v2_9df4, i1* %cpsr_c.global-to-local, align 1
  %v3_9df4 = sub i32 254, %v2_9df0
  %v4_9df4 = and i32 %v3_9df4, %v2_9df0
  %v5_9df4 = icmp slt i32 %v4_9df4, 0
  store i1 %v5_9df4, i1* %cpsr_v.global-to-local, align 1
  %v6_9df4 = icmp slt i32 %v1_9df4, 0
  store i1 %v6_9df4, i1* %cpsr_n.global-to-local, align 1
  %v7_9df4 = icmp eq i32 %v2_9df0, 255
  store i1 %v7_9df4, i1* %cpsr_z.global-to-local, align 1
  %v8_9df8 = icmp sgt i32 %v2_9df0, 255
  br i1 %v8_9df8, label %dec_label_pc_9884, label %dec_label_pc_9dfc

dec_label_pc_9dfc:                                ; preds = %dec_label_pc_9de0
  %v0_9dfc = load i32, i32* %sb.global-to-local, align 4
  %v1_9e00 = add i32 %v0_9dfc, 533
  store i32 %v1_9e00, i32* @r4, align 4
  store i32 %v1_9e00, i32* %r0.global-to-local, align 4
  store i32 255, i32* %r1.global-to-local, align 4
  %v2_9e0c = call i32 @function_12b90(i32 %v1_9e00, i32 255)
  store i32 %v10_82f0, i32* @lr, align 4
  %v3_9e14 = load i32, i32* %stack_var_-40, align 4
  %v0_9e18 = load i32, i32* @r5, align 4
  %v2_9e18 = add i32 %v3_9e14, 1
  %v1_9e1c = add i32 %v2_9e18, %v0_9e18
  store i32 %v1_9e1c, i32* %r0.global-to-local, align 4
  %v1_9e20 = inttoptr i32 %v1_9e1c to i8*
  %v2_9e20 = call i32 @function_12af0(i8* %v1_9e20)
  store i32 %v2_9e20, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_9e24 = icmp slt i32 %v2_9e20, 0
  store i1 %v1_9e24, i1* %cpsr_n.global-to-local, align 1
  %v2_9e24 = icmp eq i32 %v2_9e20, 0
  store i1 %v2_9e24, i1* %cpsr_z.global-to-local, align 1
  %tmp247 = icmp slt i32 %v2_9e20, 1
  br i1 %tmp247, label %dec_label_pc_9884, label %dec_label_pc_9e2c

dec_label_pc_9e2c:                                ; preds = %dec_label_pc_9dfc
  store i32 %v10_82f0, i32* %r2.global-to-local, align 4
  %v3_9e30 = load i32, i32* %stack_var_-40, align 4
  %v0_9e34 = load i32, i32* @r5, align 4
  %v0_9e38 = load i32, i32* @r4, align 4
  store i32 %v0_9e38, i32* @r0, align 4
  %v2_9e34 = add i32 %v3_9e30, 1
  %v1_9e3c = add i32 %v2_9e34, %v0_9e34
  store i32 %v1_9e3c, i32* %r1.global-to-local, align 4
  %v2_9e40 = inttoptr i32 %v0_9e38 to i8*
  %v3_9e40 = call i32 @function_12b18(i8* %v2_9e40, i32 %v1_9e3c)
  store i32 %v3_9e40, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9884

dec_label_pc_9e48:                                ; preds = %dec_label_pc_84c8
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e4c = call i32 @function_121c4(i32 51)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 51, i32* %r0.global-to-local, align 4
  %v3_9e58 = call i32 @function_120e0(i32 51, i32* null)
  store i32 %v3_9e58, i32* %r1.global-to-local, align 4
  %v0_9e60 = load i32, i32* @r5, align 4
  %v1_9e60 = add i32 %v0_9e60, 20
  store i32 %v1_9e60, i32* @r0, align 4
  %v2_9e64 = inttoptr i32 %v1_9e60 to i8*
  %v3_9e64 = call i32 @function_12b18(i8* %v2_9e64, i32 %v3_9e58)
  store i32 51, i32* %r0.global-to-local, align 4
  %v1_9e6c = call i32 @function_1210c(i32 51)
  store i32 %v1_9e6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_84c8, %dec_label_pc_9f58, %dec_label_pc_9f2c, %dec_label_pc_9f00, %dec_label_pc_9ed4, %dec_label_pc_9e48
  %v0_9e70 = load i32, i32* @sl, align 4
  store i32 %v0_9e70, i32* %r1.global-to-local, align 4
  store i32 %v0_840c, i32* @r0, align 4
  %v2_9e78 = inttoptr i32 %v0_840c to i8*
  %v3_9e78 = call i32 @function_12b18(i8* %v2_9e78, i32 %v0_9e70)
  store i32 %v3_9e78, i32* %r0.global-to-local, align 4
  store i32 %v0_839c, i32* %r1.global-to-local, align 4
  %v0_9e80 = load i32, i32* @r7, align 4
  %v1_9e80 = add i32 %v0_9e80, 1
  store i32 %v1_9e80, i32* @r7, align 4
  %v0_9e84 = load i32, i32* @r5, align 4
  %v2_9e88 = sub i32 %v0_839c, %v1_9e80
  %v3_9e88 = icmp uge i32 %v0_839c, %v1_9e80
  store i1 %v3_9e88, i1* %cpsr_c.global-to-local, align 1
  %v4_9e88 = xor i32 %v1_9e80, %v0_839c
  %v5_9e88 = xor i32 %v2_9e88, %v0_839c
  %v6_9e88 = and i32 %v5_9e88, %v4_9e88
  %v7_9e88 = icmp slt i32 %v6_9e88, 0
  store i1 %v7_9e88, i1* %cpsr_v.global-to-local, align 1
  %v8_9e88 = icmp slt i32 %v2_9e88, 0
  store i1 %v8_9e88, i1* %cpsr_n.global-to-local, align 1
  %v9_9e88 = icmp eq i32 %v0_839c, %v1_9e80
  store i1 %v9_9e88, i1* %cpsr_z.global-to-local, align 1
  %v1_9e8c = add i32 %v0_9e84, 3140
  store i32 %v1_9e8c, i32* @r5, align 4
  br i1 %v9_9e88, label %dec_label_pc_9e94, label %dec_label_pc_83cc

dec_label_pc_9e94:                                ; preds = %dec_label_pc_9e70
  %v1_9ea0 = add i32 %v2_83b0, 1456
  %v0_9ea8 = load i32, i32* %r8.global-to-local, align 4
  %v1_9ea8 = urem i32 %v0_9ea8, 256
  store i32 %v1_9ea8, i32* %ip.global-to-local, align 4
  %v1_9eac = add i32 %v2_83b0, 1464
  store i32 %v1_9eac, i32* %r2.global-to-local, align 4
  %v2_9eb0 = ptrtoint i32* %stack_var_-10568 to i32
  store i32 %v2_9eb0, i32* %r3.global-to-local, align 4
  store i32 %v1_9ea0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_8528.preheader

dec_label_pc_9ed4:                                ; preds = %dec_label_pc_84c8
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ed8 = call i32 @function_121c4(i32 47)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 47, i32* %r0.global-to-local, align 4
  %v3_9ee4 = call i32 @function_120e0(i32 47, i32* null)
  store i32 %v3_9ee4, i32* %r1.global-to-local, align 4
  %v0_9eec = load i32, i32* @r5, align 4
  %v1_9eec = add i32 %v0_9eec, 20
  store i32 %v1_9eec, i32* @r0, align 4
  %v2_9ef0 = inttoptr i32 %v1_9eec to i8*
  %v3_9ef0 = call i32 @function_12b18(i8* %v2_9ef0, i32 %v3_9ee4)
  store i32 47, i32* %r0.global-to-local, align 4
  %v1_9ef8 = call i32 @function_1210c(i32 47)
  store i32 %v1_9ef8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f00:                                ; preds = %dec_label_pc_84c8
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9f04 = call i32 @function_121c4(i32 48)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 48, i32* %r0.global-to-local, align 4
  %v3_9f10 = call i32 @function_120e0(i32 48, i32* null)
  store i32 %v3_9f10, i32* %r1.global-to-local, align 4
  %v0_9f18 = load i32, i32* @r5, align 4
  %v1_9f18 = add i32 %v0_9f18, 20
  store i32 %v1_9f18, i32* @r0, align 4
  %v2_9f1c = inttoptr i32 %v1_9f18 to i8*
  %v3_9f1c = call i32 @function_12b18(i8* %v2_9f1c, i32 %v3_9f10)
  store i32 48, i32* %r0.global-to-local, align 4
  %v1_9f24 = call i32 @function_1210c(i32 48)
  store i32 %v1_9f24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f2c:                                ; preds = %dec_label_pc_84c8
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f30 = call i32 @function_121c4(i32 49)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 49, i32* %r0.global-to-local, align 4
  %v3_9f3c = call i32 @function_120e0(i32 49, i32* null)
  store i32 %v3_9f3c, i32* %r1.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r5, align 4
  %v1_9f44 = add i32 %v0_9f44, 20
  store i32 %v1_9f44, i32* @r0, align 4
  %v2_9f48 = inttoptr i32 %v1_9f44 to i8*
  %v3_9f48 = call i32 @function_12b18(i8* %v2_9f48, i32 %v3_9f3c)
  store i32 49, i32* %r0.global-to-local, align 4
  %v1_9f50 = call i32 @function_1210c(i32 49)
  store i32 %v1_9f50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

dec_label_pc_9f58:                                ; preds = %dec_label_pc_84c8
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9f5c = call i32 @function_121c4(i32 50)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 50, i32* %r0.global-to-local, align 4
  %v3_9f68 = call i32 @function_120e0(i32 50, i32* null)
  store i32 %v3_9f68, i32* %r1.global-to-local, align 4
  %v0_9f70 = load i32, i32* @r5, align 4
  %v1_9f70 = add i32 %v0_9f70, 20
  store i32 %v1_9f70, i32* @r0, align 4
  %v2_9f74 = inttoptr i32 %v1_9f70 to i8*
  %v3_9f74 = call i32 @function_12b18(i8* %v2_9f74, i32 %v3_9f68)
  store i32 50, i32* %r0.global-to-local, align 4
  %v1_9f7c = call i32 @function_1210c(i32 50)
  store i32 %v1_9f7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9e70

; uselistorder directives
  uselistorder i32 %v2_9eb0, { 1, 0 }
  uselistorder i32 %v1_9eac, { 1, 0 }
  uselistorder i32 %v1_9ea0, { 1, 0 }
  uselistorder i32 %v1_9e8c, { 1, 0 }
  uselistorder i32 %v2_9e88, { 1, 0 }
  uselistorder i32 %v1_9e80, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_9df0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9d8c, { 1, 0, 2 }
  uselistorder i32 %v2_9d2c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9d04, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9ce8, { 1, 0 }
  uselistorder i8 %v4_9cdc, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v1_9ce4, { 1, 0, 2 }
  uselistorder i1 %v7_9ccc, { 1, 0 }
  uselistorder i32 %v1_9cbc, { 1, 0, 2 }
  uselistorder i1 %v7_9cb8, { 1, 0 }
  uselistorder i1 %v9_9cb0, { 1, 0 }
  uselistorder i32 %v2_9c90, { 1, 0 }
  uselistorder i32 %v0_9c74, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9c10, { 1, 0, 2 }
  uselistorder i32 %v1_9c08, { 1, 0, 2 }
  uselistorder i32 %v2_9bc0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_9b94, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v3_9b18, { 5, 1, 0, 4, 3, 2, 6 }
  uselistorder i32 %v2_9afc, { 1, 0, 2 }
  uselistorder i32 %v4_9af4, { 2, 1, 0, 3 }
  uselistorder i32 %v2_9abc, { 1, 0 }
  uselistorder i32 %v1_9abc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_9abc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_9a24, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v2_99fc, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_99dc, { 1, 0 }
  uselistorder i8 %v4_99d4, { 3, 4, 2, 1, 0 }
  uselistorder i32 %v0_99dc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_99c0, { 1, 0 }
  uselistorder i32 %v1_99b0, { 1, 0, 2 }
  uselistorder i1 %v7_99ac, { 1, 0 }
  uselistorder i32 %v0_996c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_9950, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v5_986c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9840, { 1, 0 }
  uselistorder i32 %v1_9840, { 2, 0, 1, 3 }
  uselistorder i32 %v2_983c, { 3, 0, 1, 4, 2 }
  uselistorder i32 %v1_981c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9804, { 1, 0 }
  uselistorder i32 %v0_9d8c, { 1, 0 }
  uselistorder i32 %v1_97c0, { 1, 2, 0 }
  uselistorder i32 %v5_97bc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_97a8, { 1, 0 }
  uselistorder i32 %v2_979c, { 1, 0, 2 }
  uselistorder i32 %v1_9760, { 0, 2, 1 }
  uselistorder i32 %v1_9750, { 1, 0, 3, 4, 2 }
  uselistorder i32 %v1_973c, { 0, 2, 1, 3 }
  uselistorder i32 %v1_96f8, { 1, 2, 0 }
  uselistorder i32 %v5_96f4, { 1, 8, 2, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_96dc.v4_96bc, { 1, 0, 2 }
  uselistorder i32 %v1_9698, { 1, 2, 0 }
  uselistorder i32 %v4_9690, { 0, 2, 1, 3 }
  uselistorder i32 %v2_9650, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v2_9648, { 1, 2, 0 }
  uselistorder i32 %v5_963c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_95c8, { 1, 2, 0 }
  uselistorder i32 %v4_95c4, { 0, 2, 1, 3 }
  uselistorder i32 %v5_95a4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_958c, { 1, 2, 0 }
  uselistorder i32 %v5_9588, { 0, 2, 1, 3 }
  uselistorder i32 %v3_9570, { 1, 0 }
  uselistorder i32 %v2_9568, { 1, 2, 0 }
  uselistorder i32 %v4_9564, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9528, { 2, 1, 0 }
  uselistorder i32 %v3_951c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v3_94fc, { 4, 5, 6, 7, 3, 1, 2, 0 }
  uselistorder i32* %v2_94fc, { 1, 0 }
  uselistorder i32 %v0_94fc, { 1, 0 }
  uselistorder i32 %v3_94e4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_94d8, { 1, 2, 0 }
  uselistorder i32 %v0_94c0, { 0, 2, 1 }
  uselistorder i32 %v3_94a0, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %storemerge73, { 1, 0 }
  uselistorder i32 %v3_9478, { 0, 3, 4, 2, 1, 5 }
  uselistorder i32 %v1_9458, { 1, 2, 0 }
  uselistorder i32 %v5_944c, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %v3_9418, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_9410, { 0, 3, 1, 4, 2, 5, 6 }
  uselistorder i32 %v5_93e4, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_93c4, { 1, 0, 2 }
  uselistorder i32 %v1_93a0, { 1, 2, 0 }
  uselistorder i32 %v5_939c, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_9384.v4_9364, { 1, 0, 2 }
  uselistorder i32 %v1_9344, { 1, 2, 0 }
  uselistorder i32 %v4_9340, { 0, 2, 1, 3 }
  uselistorder i32 %v2_92f0, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v0_92ec, { 1, 0 }
  uselistorder i32 %v0_92d4, { 1, 0 }
  uselistorder i32 %v0_92d8, { 1, 0 }
  uselistorder i32 %v2_92b4, { 1, 0 }
  uselistorder i32 %v1_92b0, { 3, 4, 2, 1, 6, 0, 7, 5, 8 }
  uselistorder i32 %v3_92ac, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 %v0_927c, { 1, 0 }
  uselistorder i1 %v7_9244, { 0, 2, 1 }
  uselistorder i32 %v1_9268, { 1, 0 }
  uselistorder i32 %v2_9264, { 1, 0 }
  uselistorder i32 %v3_9260, { 0, 1, 4, 3, 6, 2, 7, 5, 8 }
  uselistorder i32 %v2_9258, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v0_9254, { 1, 0 }
  uselistorder i32 %v1_91c4, { 1, 2, 0 }
  uselistorder i32 %v5_91c0, { 7, 6, 1, 4, 5, 3, 2, 8, 0, 10, 9, 11 }
  uselistorder i32 %v2_91a8, { 1, 0, 2 }
  uselistorder i32 %v2_91a4, { 1, 0, 2 }
  uselistorder i32 %v0_9188, { 0, 2, 1 }
  uselistorder i32 %v4_9180, { 1, 2, 0, 3 }
  uselistorder i32 %v3_915c, { 1, 2, 0, 5, 4, 3, 6 }
  uselistorder i32 %v1_9150, { 1, 2, 0 }
  uselistorder i32 %v4_9148, { 0, 2, 1, 3 }
  uselistorder i32 %v1_90e4, { 1, 2, 0 }
  uselistorder i32 %v5_90e0, { 1, 8, 7, 2, 5, 6, 4, 3, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_90c8.v4_90a8, { 1, 0, 2 }
  uselistorder i32 %v1_9078, { 1, 2, 0 }
  uselistorder i32 %v4_9074, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8ffc, { 1, 2, 0 }
  uselistorder i32 %v5_8ff8, { 1, 2, 8, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_8fe0.v4_8fc0, { 1, 0, 2 }
  uselistorder i32 %v1_8f9c, { 1, 2, 0 }
  uselistorder i32 %v4_8f94, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8f14, { 1, 2, 0 }
  uselistorder i32 %v5_8f10, { 1, 2, 8, 3, 6, 7, 5, 4, 9, 0, 11, 10, 12 }
  uselistorder i32 %v2_8ef8.v4_8ed8, { 1, 0, 2 }
  uselistorder i32 %v1_8eb8, { 1, 2, 0 }
  uselistorder i32 %v4_8eb4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e8c, { 1, 2, 0 }
  uselistorder i32 %v4_8e88, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8e64, { 1, 2, 0 }
  uselistorder i32 %v4_8e60, { 0, 2, 1, 3 }
  uselistorder i32 %v0_9914, { 3, 7, 0, 4, 5, 6, 1, 2 }
  uselistorder i32 %v1_8e18, { 1, 2, 0 }
  uselistorder i32 %v5_8e14, { 0, 2, 1, 3 }
  uselistorder i32 %v5_8df0, { 2, 1, 0, 3, 4, 5, 6 }
  uselistorder i32 %v3_8d78, { 0, 2, 1 }
  uselistorder i32 %v2_8d6c, { 1, 0, 4, 3, 2, 5 }
  uselistorder i32 %v1_8d60, { 1, 0 }
  uselistorder i32 %v2_8d54, { 1, 0 }
  uselistorder i32 %v0_8d54, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8d4c, { 1, 0 }
  uselistorder i32 %v1_8d54, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8d30, { 1, 0, 2 }
  uselistorder i32 %v1_8d28, { 1, 0 }
  uselistorder i32 %v2_8d10, { 1, 0 }
  uselistorder i32 %v0_8d10, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v3_8cec, { 4, 2, 5, 3, 1, 0, 6 }
  uselistorder i32 %v2_8c54, { 1, 0 }
  uselistorder i32 %v1_8c50, { 2, 1, 4, 0, 5, 3, 6 }
  uselistorder i32 %v3_8c4c, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32 %v2_8af4, { 1, 0 }
  uselistorder i32 %v1_8af4, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8880, { 2, 1, 0 }
  uselistorder i32 %v3_887c, { 1, 0 }
  uselistorder i32 %v1_885c, { 1, 2, 0 }
  uselistorder i32 %v3_8858, { 4, 1, 0, 2, 6, 5, 7, 3 }
  uselistorder i32 %v2_8848, { 1, 0 }
  uselistorder i32 %v1_8840, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i1 %v7_8830, { 1, 0 }
  uselistorder i1 %v7_8828, { 1, 0 }
  uselistorder i32 %v1_880c, { 2, 1, 0 }
  uselistorder i32 %v3_8808, { 1, 0 }
  uselistorder i32 %v0_880c, { 1, 0 }
  uselistorder i32 %v2_87dc, { 1, 0 }
  uselistorder i32 %v1_87dc, { 1, 2, 4, 0, 3, 5 }
  uselistorder i32 %v0_87dc, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v2_87d8, { 0, 2, 1, 3 }
  uselistorder i32 %v0_87c4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8784, { 1, 0 }
  uselistorder i32 %v2_877c, { 1, 0 }
  uselistorder i32 %v1_8770, { 2, 0, 3, 1, 4 }
  uselistorder i32 %v2_875c, { 1, 0 }
  uselistorder i32 %v0_875c, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8754, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v1_875c, { 3, 1, 4, 2, 0 }
  uselistorder i32 %v3_8744, { 1, 0 }
  uselistorder i32 %v3_8738, { 1, 0, 2 }
  uselistorder i32 %v0_86f4, { 1, 0, 2 }
  uselistorder i32 %v1_8698, { 1, 2, 0 }
  uselistorder i32 %v3_8694, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v1_8670, { 1, 2, 0 }
  uselistorder i32 %v3_8664, { 0, 2, 1, 3 }
  uselistorder i32 %v4_8650, { 1, 0 }
  uselistorder i8 %v3_8650, { 16, 17, 18, 19, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_8650, { 2, 0, 3, 1 }
  uselistorder i32 %v3_8900, { 3, 4, 5, 1, 2, 0, 8, 7, 6 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v1_8634, { 2, 0, 3, 1, 4 }
  uselistorder i1 %v7_8610, { 1, 0 }
  uselistorder i32 %v1_8610, { 1, 0 }
  uselistorder i1 %v7_8608, { 1, 0 }
  uselistorder i32 %v4_85ec, { 1, 0, 2 }
  uselistorder i1 %v7_85e8, { 1, 0 }
  uselistorder i32 %v4_85cc, { 1, 0, 2 }
  uselistorder i1 %v7_85c8, { 1, 0 }
  uselistorder i1 %v7_85c0, { 1, 0 }
  uselistorder i1 %v7_85b8, { 1, 0 }
  uselistorder i32 %v2_85dc, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8594248, { 1, 0 }
  uselistorder i32 %v5_8590, { 1, 0 }
  uselistorder i8* %v1_8940, { 11, 10, 12, 8, 6, 7, 9, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %v2_8748, { 0, 21, 1, 20, 2, 23, 3, 22, 25, 4, 24, 5, 27, 6, 26, 7, 29, 8, 28, 9, 31, 10, 30, 11, 19, 34, 12, 33, 13, 35, 14, 17, 15, 18, 16, 36, 32 }
  uselistorder i32 %v2_86d0, { 1, 0 }
  uselistorder i32 %v3_9eb8, { 0, 2, 3, 1 }
  uselistorder i32 %stack_var_-20856.0.ph, { 59, 57, 0, 61, 60, 1, 56, 55, 2, 64, 3, 68, 67, 4, 66, 65, 5, 63, 62, 6, 79, 78, 7, 77, 8, 76, 75, 9, 74, 73, 10, 72, 71, 11, 70, 69, 12, 54, 53, 13, 52, 51, 14, 50, 49, 15, 48, 47, 16, 46, 17, 45, 44, 18, 43, 42, 19, 41, 40, 20, 39, 38, 21, 37, 22, 36, 35, 23, 34, 33, 24, 32, 31, 25, 30, 29, 26, 27, 58, 28 }
  uselistorder i32 %stack_var_-20872.0.ph, { 2, 1, 0 }
  uselistorder i32 %stack_var_-20860.0.ph, { 1, 0 }
  uselistorder i32 %v1_8500, { 1, 0 }
  uselistorder i32 %v0_8500, { 1, 0 }
  uselistorder i32 %v2_84d0, { 2, 1, 3, 0, 5, 4, 6 }
  uselistorder i32 %v2_84c0, { 1, 0 }
  uselistorder i32 %v8_84a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_8484, { 2, 0, 1, 3 }
  uselistorder i32 %v0_840c, { 5, 4, 1, 0, 3, 2 }
  uselistorder i32 %v2_83b0, { 2, 1, 4, 3, 0, 5, 6 }
  uselistorder i32 %v0_839c, { 14, 0, 1, 15, 13, 28, 24, 2, 25, 23, 26, 11, 3, 4, 12, 10, 27, 8, 5, 6, 9, 7, 22, 21, 29, 18, 19, 20, 17, 16 }
  uselistorder i32 %v0_8390, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i1 %v2_8320, { 1, 0, 2 }
  uselistorder i32 %v1_831c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_830c, { 1, 0 }
  uselistorder i32 %v3_8308, { 0, 2, 4, 1, 5, 3, 6 }
  uselistorder i32 %v2_8300, { 2, 4, 0, 1, 5, 3, 6 }
  uselistorder i32* %v11_82f4, { 1, 0, 2 }
  uselistorder i32 %v10_82f0, { 21, 20, 19, 11, 10, 17, 16, 15, 18, 14, 13, 34, 33, 32, 30, 29, 28, 31, 27, 26, 25, 12, 23, 22, 9, 8, 24, 7, 39, 38, 37, 36, 35, 44, 43, 42, 41, 40, 6, 5, 4, 3, 2, 1, 0, 45, 46 }
  uselistorder i32 %v2_82e8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82d8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v2_82c8, { 2, 3, 0, 6, 5, 4, 7, 1 }
  uselistorder i32 %v1_82a8, { 1, 0 }
  uselistorder i32 %v0_82a4, { 1, 0, 3, 2 }
  uselistorder i8* %tmp199, { 5, 6, 4, 7, 3, 8, 2, 9, 1, 10, 11, 12, 0 }
  uselistorder i32 %v2_8280, { 0, 16, 22, 23, 24, 1, 19, 2, 20, 21, 25, 10, 3, 15, 4, 17, 18, 26, 5, 14, 6, 27, 7, 13, 28, 8, 12, 29, 9, 11, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 %v5_8278, { 1, 0 }
  uselistorder i32 %v6_8200, { 5, 4, 6, 2, 11, 0, 1, 10, 12, 9, 3, 8, 7, 13 }
  uselistorder i32 %v1_81e4, { 2, 1, 0 }
  uselistorder i32 %v1_81d8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-20809, { 0, 2, 1, 3, 4 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0, 37, 38, 39, 40, 1, 41, 44, 42, 43 }
  uselistorder i32* %stack_var_-72, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %sb.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 11, 14, 12, 13, 17, 18, 16, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 4, 3, 5, 8, 6, 7 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 8, 5, 6, 7, 9, 12, 10, 11, 0 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 151, 152, 156, 153, 154, 155, 157, 158, 159, 160, 161, 162, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 54, 56, 57, 58, 59, 60, 61, 63, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 147, 148, 149, 150, 99, 100, 101, 102, 106, 103, 104, 105, 107, 108, 111, 112, 109, 110, 113, 115, 114, 116, 117, 118, 119, 120, 125, 121, 122, 123, 124, 126, 128, 127, 2, 130, 129, 1, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 163, 146, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 103, 104, 105, 106, 107, 108, 109, 110, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 100, 101, 102, 67, 68, 69, 70, 71, 74, 75, 72, 73, 76, 77, 78, 79, 80, 81, 82, 84, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 42, 25, 12, 13, 14, 15, 17, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 43, 44, 45, 9, 162, 163, 164, 165, 168, 166, 167, 169, 170, 171, 172, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 155, 156, 157, 158, 159, 160, 161, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 121, 123, 124, 126, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 153, 0 }
  uselistorder i32* %r0.global-to-local, { 22, 21, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 212, 37, 210, 36, 77, 43, 38, 40, 39, 41, 44, 42, 46, 45, 48, 47, 49, 51, 50, 52, 55, 53, 54, 57, 56, 60, 58, 59, 61, 62, 63, 65, 64, 66, 67, 68, 70, 69, 71, 73, 72, 75, 74, 76, 79, 78, 81, 80, 82, 84, 83, 86, 85, 87, 89, 88, 90, 93, 91, 92, 95, 94, 98, 96, 97, 99, 101, 100, 103, 102, 105, 104, 106, 108, 107, 109, 111, 110, 112, 113, 114, 15, 116, 115, 118, 117, 119, 121, 120, 332, 333, 334, 336, 335, 338, 337, 339, 11, 340, 341, 10, 342, 9, 343, 13, 14, 12, 344, 345, 346, 347, 122, 123, 125, 124, 127, 126, 128, 129, 130, 132, 131, 133, 135, 134, 137, 136, 139, 138, 140, 142, 141, 143, 144, 146, 145, 19, 147, 149, 148, 151, 150, 153, 152, 156, 154, 155, 158, 157, 159, 161, 160, 162, 164, 163, 166, 165, 168, 167, 169, 171, 170, 172, 174, 173, 175, 176, 178, 177, 180, 179, 181, 183, 182, 184, 186, 185, 187, 188, 190, 189, 192, 191, 193, 195, 194, 196, 198, 197, 199, 201, 200, 202, 203, 205, 204, 207, 206, 215, 208, 209, 279, 211, 213, 214, 20, 216, 217, 18, 218, 219, 220, 221, 222, 223, 224, 226, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 260, 262, 263, 264, 265, 267, 266, 268, 269, 270, 7, 271, 6, 272, 274, 273, 3, 4, 276, 275, 284, 277, 278, 280, 282, 281, 283, 5, 285, 2, 287, 286, 1, 288, 8, 289, 290, 17, 291, 16, 292, 293, 295, 294, 297, 296, 298, 299, 300, 302, 301, 303, 304, 306, 305, 308, 307, 310, 309, 312, 311, 314, 313, 315, 316, 317, 318, 319, 320, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 31, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 30, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0, 29 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 52, 53, 54, 55, 56, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 50, 51, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 0, 43, 44, 45, 46, 47, 48, 49 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 6, 3, 2, 8, 26, 27, 28, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 7, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 39, 40, 41, 42, 50, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 138, 139, 96, 98, 97, 99, 100, 101, 106, 108, 107, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 122, 123, 115, 116, 117, 118, 119, 120, 121, 124, 0, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137 }
  uselistorder i1* %cpsr_v.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 39, 40, 41, 42, 49, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 131, 132, 96, 97, 102, 101, 98, 99, 100, 103, 104, 105, 106, 107, 108, 116, 117, 109, 110, 111, 112, 113, 114, 115, 118, 0, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130 }
  uselistorder i1* %cpsr_n.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 39, 40, 41, 42, 49, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 134, 135, 96, 97, 98, 103, 105, 104, 99, 100, 101, 102, 106, 107, 108, 109, 110, 111, 119, 120, 112, 113, 114, 115, 116, 117, 118, 121, 0, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133 }
  uselistorder i1* %cpsr_c.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 42, 43, 44, 45, 52, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 149, 150, 151, 102, 103, 108, 110, 109, 104, 105, 106, 107, 111, 112, 113, 114, 115, 116, 117, 127, 128, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 0, 134, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148 }
  uselistorder i32 ptrtoint (i32* @global_var_15db8.50 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15da8.45 to i32), { 0, 2, 1, 3 }
  uselistorder i32 2116, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15da0.43 to i32), { 1, 2, 0, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15d9c.41 to i32), { 1, 4, 0, 5, 2, 6, 3, 7 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15d94.39 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15d74.27 to i32), { 0, 2, 1, 3 }
  uselistorder i32 20556, { 1, 0 }
  uselistorder i32 20684, { 2, 0, 1 }
  uselistorder i32 -20773, { 0, 4, 11, 5, 1, 7, 6, 2, 8, 3, 9, 10 }
  uselistorder i32 1464, { 1, 0 }
  uselistorder i32 533, { 1, 0, 3, 2, 4 }
  uselistorder i32 3140, { 5, 2, 0, 1, 3, 4, 6, 7 }
  uselistorder i32 43, { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_15d7c.21 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %arg4, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9e70, { 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_9d1c, { 1, 0 }
  uselistorder label %.thread72, { 1, 0 }
  uselistorder label %dec_label_pc_9cf0, { 2, 0, 1 }
  uselistorder label %.thread69, { 1, 0 }
  uselistorder label %dec_label_pc_9b34, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9a14, { 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %dec_label_pc_99e8, { 2, 0, 1 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_9884, { 5, 0, 1, 6, 2, 3, 4 }
  uselistorder label %dec_label_pc_9838, { 1, 0 }
  uselistorder label %dec_label_pc_9810, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9804, { 1, 0 }
  uselistorder label %bb234, { 1, 0 }
  uselistorder label %bb232, { 1, 0 }
  uselistorder label %dec_label_pc_965c, { 1, 0 }
  uselistorder label %dec_label_pc_95ec, { 1, 0 }
  uselistorder label %dec_label_pc_94c0, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_9498, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9430, { 1, 2, 0 }
  uselistorder label %dec_label_pc_9400, { 7, 2, 3, 1, 8, 4, 5, 0, 6 }
  uselistorder label %bb230, { 1, 0 }
  uselistorder label %dec_label_pc_9284, { 1, 0 }
  uselistorder label %dec_label_pc_927c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_9254, { 1, 0 }
  uselistorder label %dec_label_pc_9214, { 1, 0 }
  uselistorder label %bb226, { 1, 0 }
  uselistorder label %bb224, { 1, 0 }
  uselistorder label %bb222, { 1, 0 }
  uselistorder label %dec_label_pc_9124, { 2, 1, 0 }
  uselistorder label %bb220, { 1, 0 }
  uselistorder label %.thread48, { 3, 0, 1, 2 }
  uselistorder label %bb217, { 1, 0 }
  uselistorder label %.thread47, { 3, 0, 1, 2 }
  uselistorder label %bb214, { 1, 0 }
  uselistorder label %.thread46, { 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_8e20, { 1, 0 }
  uselistorder label %dec_label_pc_8d48, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8ccc, { 1, 0 }
  uselistorder label %dec_label_pc_8cb4, { 1, 0 }
  uselistorder label %dec_label_pc_8c78, { 1, 0 }
  uselistorder label %dec_label_pc_8c04, { 1, 0 }
  uselistorder label %dec_label_pc_8bcc, { 1, 0 }
  uselistorder label %dec_label_pc_890c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_88dc, { 1, 0 }
  uselistorder label %dec_label_pc_8838, { 7, 8, 2, 9, 1, 10, 3, 11, 12, 15, 0, 13, 14, 6, 4, 5 }
  uselistorder label %dec_label_pc_8630, { 4, 1, 0, 2, 3, 5 }
  uselistorder label %dec_label_pc_855c.dec_label_pc_855c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_853c.dec_label_pc_853c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_8528, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_8528.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_84c8, { 1, 0 }
  uselistorder label %dec_label_pc_8444, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb205, { 1, 0 }
  uselistorder label %bb203, { 1, 0 }
  uselistorder label %dec_label_pc_82fc, { 1, 0 }
  uselistorder label %dec_label_pc_82b8, { 1, 3, 4, 0, 2 }
}

define i32 @function_9f84(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9f84:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9f84 = urem i32 %arg1, 256
  %v2_9f88 = icmp eq i32 %v1_9f84, 0
  %v1_9f90 = urem i32 %arg3, 256
  br i1 %v2_9f88, label %dec_label_pc_9fd4, label %dec_label_pc_9f9c

dec_label_pc_9f9c:                                ; preds = %dec_label_pc_9f84
  %v0_9f9c = load i32, i32* %r1.global-to-local, align 4
  %v1_9f9c = add i32 %v0_9f9c, 4
  %v2_9f9c = inttoptr i32 %v1_9f9c to i8*
  %v3_9f9c = load i8, i8* %v2_9f9c, align 1
  %v4_9f9c = zext i8 %v3_9f9c to i32
  %v9_9fa0 = icmp eq i32 %v4_9f9c, %v1_9f90
  br i1 %v9_9fa0, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4.preheader

dec_label_pc_9fc4.preheader:                      ; preds = %dec_label_pc_9f9c
  br label %dec_label_pc_9fc4

dec_label_pc_9fb4:                                ; preds = %dec_label_pc_9fc4
  %v1_9fb4 = add i32 %v0_9fbc.in, 12
  %v2_9fb4 = inttoptr i32 %v1_9fb4 to i8*
  %v3_9fb4 = load i8, i8* %v2_9fb4, align 1
  %v4_9fb4 = zext i8 %v3_9fb4 to i32
  %v9_9fb8 = icmp eq i32 %v4_9fb4, %v1_9f90
  br i1 %v9_9fb8, label %dec_label_pc_9fdc, label %dec_label_pc_9fc4

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9fc4.preheader, %dec_label_pc_9fb4
  %v0_9fbc.in = phi i32 [ %v0_9f9c, %dec_label_pc_9fc4.preheader ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v0_9fc4 = phi i32 [ 0, %dec_label_pc_9fc4.preheader ], [ %v1_9fc4, %dec_label_pc_9fb4 ]
  %v0_9fbc = add i32 %v0_9fbc.in, 8
  %v1_9fc4 = add i32 %v0_9fc4, 1
  store i32 %v1_9fc4, i32* @lr, align 4
  %v9_9fc8 = icmp eq i32 %v1_9fc4, %v1_9f84
  store i32 %v0_9fbc, i32* %r1.global-to-local, align 4
  br i1 %v9_9fc8, label %dec_label_pc_9fd4, label %dec_label_pc_9fb4

dec_label_pc_9fd4:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9f84
  ret i32 %arg4

dec_label_pc_9fdc:                                ; preds = %dec_label_pc_9fb4, %dec_label_pc_9f9c
  %v0_9fdc = phi i32 [ %v0_9f9c, %dec_label_pc_9f9c ], [ %v0_9fbc, %dec_label_pc_9fb4 ]
  %v1_9fdc = inttoptr i32 %v0_9fdc to i32*
  %v2_9fdc = load i32, i32* %v1_9fdc, align 4
  ret i32 %v2_9fdc

; uselistorder directives
  uselistorder i32 %v1_9fc4, { 1, 2, 0 }
  uselistorder i32 %v0_9fbc, { 1, 0, 2 }
  uselistorder i32 %v0_9fbc.in, { 1, 0 }
  uselistorder i32 %v0_9f9c, { 1, 0, 2 }
  uselistorder i32 %v1_9f90, { 1, 0 }
  uselistorder i32 %v1_9f84, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9fc4, { 1, 0 }
}

define i32 @function_9fe8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_9fe8:
  store i32 %arg1, i32* @r6, align 4
  %v1_9ff4 = urem i32 %arg2, 256
  store i32 %v1_9ff4, i32* @r7, align 4
  %v0_a000 = call i32 @function_134dc()
  %v7_a004 = icmp eq i32 %v0_a000, -1
  %tmp23 = icmp slt i32 %v0_a000, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_9fe8
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_9fe8
  %. = zext i1 %v7_a004 to i32
  store i32 %., i32* @r5, align 4
  %v2_a01c = icmp eq i1 %v7_a004, false
  br i1 %v2_a01c, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  ret i32 %v0_a000

bb26:                                             ; preds = %bb24
  %v0_a024 = call i32 @function_134dc()
  %v7_a028 = icmp eq i32 %v0_a024, -1
  store i32 %v0_a024, i32* @r4, align 4
  br i1 %v7_a028, label %dec_label_pc_a058, label %dec_label_pc_a034

dec_label_pc_a034:                                ; preds = %bb26
  %v2_a034 = icmp eq i32 %v0_a024, 0
  br i1 %v2_a034, label %dec_label_pc_a03c, label %dec_label_pc_a060

dec_label_pc_a03c:                                ; preds = %dec_label_pc_a034
  %v0_a03c = load i32, i32* @r6, align 4
  %v1_a040 = call i32 @function_148e4(i32 %v0_a03c)
  %v0_a044 = call i32 @function_13534()
  %v2_a04c = call i32 @function_135b0(i32 %v0_a044, i32 9)
  %v0_a050 = load i32, i32* @r4, align 4
  %v1_a054 = call i32 @function_14850(i32 %v0_a050)
  br label %dec_label_pc_a058

dec_label_pc_a058:                                ; preds = %bb26, %dec_label_pc_a03c
  %v0_a058 = load i32, i32* @r5, align 4
  %v1_a05c = call i32 @function_14850(i32 %v0_a058)
  br label %dec_label_pc_a060

dec_label_pc_a060:                                ; preds = %dec_label_pc_a034, %dec_label_pc_a058
  %v2_a064 = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a064 = zext i8 %v2_a064 to i32
  %v2_a068 = icmp eq i8 %v2_a064, 0
  br i1 %v2_a068, label %dec_label_pc_a0ac, label %dec_label_pc_a070

dec_label_pc_a070:                                ; preds = %dec_label_pc_a060
  %v2_a074 = load i32, i32* @global_var_1ea44.56, align 4
  %v1_a078 = inttoptr i32 %v2_a074 to i32*
  %v2_a078 = load i32, i32* %v1_a078, align 4
  store i32 %v2_a078, i32* @ip, align 4
  %v1_a07c = add i32 %v2_a078, 4
  %v2_a07c = inttoptr i32 %v1_a07c to i8*
  %v3_a07c = load i8, i8* %v2_a07c, align 1
  %v4_a07c = zext i8 %v3_a07c to i32
  %v1_a080 = load i32, i32* @r7, align 4
  %v9_a080 = icmp eq i32 %v4_a07c, %v1_a080
  br i1 %v9_a080, label %dec_label_pc_a0b4, label %dec_label_pc_a0a0.preheader

dec_label_pc_a0a0.preheader:                      ; preds = %dec_label_pc_a070
  %v1_a084 = load i32, i32* @r5, align 4
  br label %dec_label_pc_a0a0

dec_label_pc_a090:                                ; preds = %dec_label_pc_a0a0
  %v4_a090 = mul i32 %v1_a0a0, 4
  %v5_a090 = add i32 %v4_a090, %v2_a074
  %v6_a090 = inttoptr i32 %v5_a090 to i32*
  %v7_a090 = load i32, i32* %v6_a090, align 4
  store i32 %v7_a090, i32* @ip, align 4
  %v1_a094 = add i32 %v7_a090, 4
  %v2_a094 = inttoptr i32 %v1_a094 to i8*
  %v3_a094 = load i8, i8* %v2_a094, align 1
  %v4_a094 = zext i8 %v3_a094 to i32
  %v9_a098 = icmp eq i32 %v4_a094, %v1_a080
  br i1 %v9_a098, label %dec_label_pc_a0b4, label %dec_label_pc_a0a0

dec_label_pc_a0a0:                                ; preds = %dec_label_pc_a0a0.preheader, %dec_label_pc_a090
  %v0_a0a0 = phi i32 [ %v1_a084, %dec_label_pc_a0a0.preheader ], [ %v1_a0a0, %dec_label_pc_a090 ]
  %v1_a0a0 = add i32 %v0_a0a0, 1
  %v9_a0a4 = icmp eq i32 %v1_a0a0, %v3_a064
  br i1 %v9_a0a4, label %dec_label_pc_a0ac, label %dec_label_pc_a090

dec_label_pc_a0ac:                                ; preds = %dec_label_pc_a0a0, %dec_label_pc_a060, %dec_label_pc_a0b4
  %v1_a0b0 = call i32 @function_14850(i32 0)
  %v0_a0c8.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_a0b4

dec_label_pc_a0b4:                                ; preds = %dec_label_pc_a090, %dec_label_pc_a070, %dec_label_pc_a0ac
  %v0_a0c8 = phi i32 [ %v2_a078, %dec_label_pc_a070 ], [ %v0_a0c8.pre, %dec_label_pc_a0ac ], [ %v7_a090, %dec_label_pc_a090 ]
  %v1_a0c8 = inttoptr i32 %v0_a0c8 to i32*
  %v2_a0c8 = load i32, i32* %v1_a0c8, align 4
  call void @__pseudo_branch(i32 %v2_a0c8)
  br label %dec_label_pc_a0ac

; uselistorder directives
  uselistorder i32 %v1_a0a0, { 2, 0, 1 }
  uselistorder i32 %v0_a024, { 1, 2, 0 }
  uselistorder i1 %v7_a004, { 1, 0 }
  uselistorder i32 %v0_a000, { 1, 2, 0 }
  uselistorder label %dec_label_pc_a0b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a0ac, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a0a0, { 1, 0 }
  uselistorder label %dec_label_pc_a060, { 1, 0 }
  uselistorder label %dec_label_pc_a058, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_a0d8(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a0d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_a0d8 = load i32, i32* @r4, align 4
  %v6_a0d8 = load i32, i32* @r5, align 4
  %v9_a0d8 = load i32, i32* @r6, align 4
  %v12_a0d8 = load i32, i32* @r7, align 4
  %v15_a0d8 = load i32, i32* @r8, align 4
  %v18_a0d8 = load i32, i32* @sb, align 4
  %v27_a0d8 = load i32, i32* @lr, align 4
  %v7_a0dc = icmp eq i32 %arg2, 3
  store i1 %v7_a0dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_a0e8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_a0e8, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_a0fc, label %dec_label_pc_a0f0

dec_label_pc_a0f0:                                ; preds = %dec_label_pc_a0d8
  %v7_a0f0 = icmp eq i32 %arg2, 4
  store i1 %v7_a0f0, i1* %cpsr_z.global-to-local, align 1
  %v1_a0f4 = inttoptr i32 %v0_a0e8 to i32*
  %v2_a0f4 = load i32, i32* %v1_a0f4, align 4
  store i32 %v2_a0f4, i32* @sl, align 4
  br i1 %v7_a0f0, label %dec_label_pc_a0fc, label %dec_label_pc_a104

dec_label_pc_a0fc:                                ; preds = %dec_label_pc_a120, %.dec_label_pc_a0fc_crit_edge, %dec_label_pc_a0f0, %dec_label_pc_a114, %dec_label_pc_a104, %dec_label_pc_a0d8
  %v29_a100 = phi i32 [ %v29_a100.pre, %.dec_label_pc_a0fc_crit_edge ], [ %v0_a0e8, %dec_label_pc_a120 ], [ %v0_a0e8, %dec_label_pc_a0f0 ], [ %v0_a0e8, %dec_label_pc_a114 ], [ %v0_a0e8, %dec_label_pc_a104 ], [ %v0_a0e8, %dec_label_pc_a0d8 ]
  store i32 %v9_a0d8, i32* @r6, align 4
  store i32 %v12_a0d8, i32* @r7, align 4
  store i32 %v15_a0d8, i32* @r8, align 4
  store i32 %v18_a0d8, i32* @sb, align 4
  ret i32 %v29_a100

dec_label_pc_a104:                                ; preds = %dec_label_pc_a0f0
  %v7_a104 = icmp eq i32 %arg2, 5
  store i1 %v7_a104, i1* %cpsr_z.global-to-local, align 1
  %v1_a108 = add i32 %v0_a0e8, 4
  %v2_a108 = inttoptr i32 %v1_a108 to i8*
  %v3_a108 = load i8, i8* %v2_a108, align 1
  %v4_a108 = zext i8 %v3_a108 to i32
  store i32 %v4_a108, i32* %r1.global-to-local, align 4
  br i1 %v7_a104, label %dec_label_pc_a0fc, label %dec_label_pc_a114

dec_label_pc_a114:                                ; preds = %dec_label_pc_a104
  %v1_a114 = add i32 %v0_a0e8, 5
  %v2_a114 = inttoptr i32 %v1_a114 to i8*
  %v3_a114 = load i8, i8* %v2_a114, align 1
  %v4_a114 = zext i8 %v3_a114 to i32
  store i32 %v4_a114, i32* @r7, align 4
  %v2_a118 = icmp eq i8 %v3_a114, 0
  store i1 %v2_a118, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a118, label %dec_label_pc_a0fc, label %dec_label_pc_a120

dec_label_pc_a120:                                ; preds = %dec_label_pc_a114
  %v3_a120 = mul nuw nsw i32 %v4_a114, 4
  store i32 %v3_a120, i32* @sb, align 4
  %v1_a124 = add i32 %arg2, -6
  store i32 %v1_a124, i32* @r6, align 4
  %v2_a128 = mul nuw nsw i32 %v4_a114, 5
  store i32 %v2_a128, i32* @r8, align 4
  %v3_a12c = icmp ult i32 %v1_a124, %v2_a128
  %v9_a12c = icmp eq i32 %v1_a124, %v2_a128
  store i1 %v9_a12c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a12c, label %dec_label_pc_a0fc, label %dec_label_pc_a134

dec_label_pc_a134:                                ; preds = %dec_label_pc_a120
  store i32 %v4_a114, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_a13c = call i32 @function_140b4(i32 %v4_a114, i32 24)
  store i32 %v2_a13c, i32* %r0.global-to-local, align 4
  %v0_a140 = load i32, i32* @r7, align 4
  %v2_a140 = icmp eq i32 %v0_a140, 0
  store i1 %v2_a140, i1* %cpsr_z.global-to-local, align 1
  %v0_a148 = load i32, i32* @r4, align 4
  %v1_a148 = add i32 %v0_a148, 6
  store i32 %v1_a148, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_a140, 1
  br i1 %tmp27, label %dec_label_pc_a1a0thread-pre-split, label %dec_label_pc_a150

dec_label_pc_a150:                                ; preds = %dec_label_pc_a134
  store i32 %v2_a13c, i32* %r1.global-to-local, align 4
  %v1_a154 = load i32, i32* @r8, align 4
  %v2_a154 = add i32 %v1_a154, %v0_a148
  store i32 %v2_a154, i32* %ip.global-to-local, align 4
  store i32 %v0_a148, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_a164

dec_label_pc_a164:                                ; preds = %dec_label_pc_a164.dec_label_pc_a164_crit_edge, %dec_label_pc_a150
  %v2_a174 = phi i32 [ %v1_a188, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v2_a13c, %dec_label_pc_a150 ]
  %v0_a170 = phi i32 [ %v0_a170.pre, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v2_a154, %dec_label_pc_a150 ]
  %v0_a16c = phi i32 [ %v0_a164.pre, %dec_label_pc_a164.dec_label_pc_a164_crit_edge ], [ %v0_a148, %dec_label_pc_a150 ]
  %v1_a164 = add i32 %v0_a16c, 10
  %v2_a164 = inttoptr i32 %v1_a164 to i8*
  %v3_a164 = load i8, i8* %v2_a164, align 1
  %v1_a168 = add i32 %v0_a16c, 6
  %v2_a168 = inttoptr i32 %v1_a168 to i32*
  %v3_a168 = load i32, i32* %v2_a168, align 4
  store i32 %v3_a168, i32* %r2.global-to-local, align 4
  %v1_a16c = add i32 %v0_a16c, 5
  store i32 %v1_a16c, i32* %r0.global-to-local, align 4
  %v9_a170 = icmp eq i32 %v0_a170, %v1_a16c
  store i1 %v9_a170, i1* %cpsr_z.global-to-local, align 1
  %v3_a174 = add i32 %v2_a174, 20
  %v4_a174 = inttoptr i32 %v3_a174 to i8*
  store i8 %v3_a164, i8* %v4_a174, align 1
  %v0_a178 = load i32, i32* %r2.global-to-local, align 4
  %v1_a178 = load i32, i32* %r1.global-to-local, align 4
  %v2_a178 = add i32 %v1_a178, 4
  %v3_a178 = inttoptr i32 %v2_a178 to i32*
  store i32 %v0_a178, i32* %v3_a178, align 4
  %v0_a17c = load i32, i32* %r2.global-to-local, align 4
  %v1_a17c = load i32, i32* %r1.global-to-local, align 4
  %v2_a17c = add i32 %v1_a17c, 16
  %v3_a17c = inttoptr i32 %v2_a17c to i32*
  store i32 %v0_a17c, i32* %v3_a17c, align 4
  %v0_a180 = load i32, i32* @r4, align 4
  %v1_a180 = trunc i32 %v0_a180 to i8
  %v2_a180 = load i32, i32* %r1.global-to-local, align 4
  %v3_a180 = inttoptr i32 %v2_a180 to i8*
  store i8 %v1_a180, i8* %v3_a180, align 1
  %v0_a184 = load i32, i32* @lr, align 4
  %v1_a184 = trunc i32 %v0_a184 to i8
  %v2_a184 = load i32, i32* %r1.global-to-local, align 4
  %v3_a184 = add i32 %v2_a184, 1
  %v4_a184 = inttoptr i32 %v3_a184 to i8*
  store i8 %v1_a184, i8* %v4_a184, align 1
  %v0_a188 = load i32, i32* %r1.global-to-local, align 4
  %v1_a188 = add i32 %v0_a188, 24
  store i32 %v1_a188, i32* %r1.global-to-local, align 4
  %v0_a18c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a18c, label %dec_label_pc_a190, label %dec_label_pc_a164.dec_label_pc_a164_crit_edge

dec_label_pc_a164.dec_label_pc_a164_crit_edge:    ; preds = %dec_label_pc_a164
  %v0_a164.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_a170.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a164

dec_label_pc_a190:                                ; preds = %dec_label_pc_a164
  %v0_a190 = load i32, i32* @sb, align 4
  %v1_a190 = load i32, i32* @r7, align 4
  %v1_a194 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_a190, %v0_a190
  %v2_a194 = sub i32 %v1_a194, %sum
  %v0_a198 = load i32, i32* %r0.global-to-local, align 4
  %v1_a198 = add i32 %v0_a198, 6
  store i32 %v1_a198, i32* %fp.global-to-local, align 4
  %v1_a19c = add i32 %v2_a194, -6
  store i32 %v1_a19c, i32* @r6, align 4
  br label %dec_label_pc_a1a0

dec_label_pc_a1a0thread-pre-split:                ; preds = %dec_label_pc_a134
  %v0_a1a0.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_a1a0

dec_label_pc_a1a0:                                ; preds = %dec_label_pc_a1a0thread-pre-split, %dec_label_pc_a190
  %v0_a1ac = phi i32 [ %v1_a148, %dec_label_pc_a1a0thread-pre-split ], [ %v1_a198, %dec_label_pc_a190 ]
  %v1_a1a4 = phi i32 [ %v0_a1a0.pr, %dec_label_pc_a1a0thread-pre-split ], [ %v1_a19c, %dec_label_pc_a190 ]
  %v2_a1a0 = icmp eq i32 %v1_a1a4, 0
  store i1 %v2_a1a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1a0, label %dec_label_pc_a2d8, label %dec_label_pc_a1ac

dec_label_pc_a1ac:                                ; preds = %dec_label_pc_a1a0
  %v1_a1ac = inttoptr i32 %v0_a1ac to i8*
  %v2_a1ac = load i8, i8* %v1_a1ac, align 1
  %v3_a1ac = zext i8 %v2_a1ac to i32
  store i32 %v3_a1ac, i32* @sb, align 4
  %v2_a1b0 = icmp eq i8 %v2_a1ac, 0
  store i1 %v2_a1b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a1b0, label %dec_label_pc_a290, label %dec_label_pc_a1c0

dec_label_pc_a1c0:                                ; preds = %dec_label_pc_a1ac
  store i32 %v3_a1ac, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a1c8 = call i32 @function_140b4(i32 %v3_a1ac, i32 8)
  store i32 %v2_a1c8, i32* %r0.global-to-local, align 4
  %v0_a1cc = load i32, i32* @sb, align 4
  %v2_a1cc = icmp eq i32 %v0_a1cc, 0
  store i1 %v2_a1cc, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_a1cc, 1
  br i1 %tmp28, label %dec_label_pc_a290, label %dec_label_pc_a1dc

dec_label_pc_a1dc:                                ; preds = %dec_label_pc_a1c0
  %v0_a1dc = load i32, i32* @r6, align 4
  %v1_a1dc = add i32 %v0_a1dc, -1
  store i32 %v1_a1dc, i32* %r2.global-to-local, align 4
  %v7_a1dc = icmp eq i32 %v0_a1dc, 1
  store i1 %v7_a1dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a1dc, label %dec_label_pc_a2d8, label %dec_label_pc_a1e4

dec_label_pc_a1e4:                                ; preds = %dec_label_pc_a1dc
  %v0_a1e4 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1e4 = add i32 %v0_a1e4, 1
  %v2_a1e4 = inttoptr i32 %v1_a1e4 to i8*
  %v3_a1e4 = load i8, i8* %v2_a1e4, align 1
  %v1_a1e8 = add i32 %v0_a1dc, -2
  store i32 %v1_a1e8, i32* %r2.global-to-local, align 4
  %v7_a1e8 = icmp eq i32 %v1_a1dc, 1
  store i1 %v7_a1e8, i1* %cpsr_z.global-to-local, align 1
  %v3_a1ec = add i32 %v2_a1c8, 4
  %v4_a1ec = inttoptr i32 %v3_a1ec to i8*
  store i8 %v3_a1e4, i8* %v4_a1ec, align 1
  %v0_a1f0 = load i32, i32* %fp.global-to-local, align 4
  %v1_a1f0 = add i32 %v0_a1f0, 1
  store i32 %v1_a1f0, i32* %r0.global-to-local, align 4
  %v0_a1f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1f4, label %dec_label_pc_a2d8, label %dec_label_pc_a1f8

dec_label_pc_a1f8:                                ; preds = %dec_label_pc_a1e4
  %v1_a1f8 = add i32 %v0_a1f0, 2
  %v2_a1f8 = inttoptr i32 %v1_a1f8 to i8*
  %v3_a1f8 = load i8, i8* %v2_a1f8, align 1
  %v4_a1f8 = zext i8 %v3_a1f8 to i32
  store i32 %v4_a1f8, i32* @r4, align 4
  %v0_a1fc = load i32, i32* %r2.global-to-local, align 4
  %v1_a1fc = add i32 %v0_a1fc, -1
  store i32 %v1_a1fc, i32* @r8, align 4
  %v9_a200 = icmp eq i32 %v1_a1fc, %v4_a1f8
  store i1 %v9_a200, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a1f8, i32* %r0.global-to-local, align 4
  %v5_a208 = icmp slt i32 %v1_a1fc, %v4_a1f8
  br i1 %v5_a208, label %dec_label_pc_a2d8, label %dec_label_pc_a20c

dec_label_pc_a20c:                                ; preds = %dec_label_pc_a1f8
  store i32 %v2_a1c8, i32* @r5, align 4
  %v1_a214 = add i32 %v2_a1c8, 8
  %v1_a218 = add i32 %v0_a1f0, 3
  store i32 %v1_a218, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_a25c

dec_label_pc_a228:                                ; preds = %dec_label_pc_a25c
  %v0_a228 = load i32, i32* @r8, align 4
  %v1_a228 = load i32, i32* @r4, align 4
  %v2_a228 = sub i32 %v0_a228, %v1_a228
  store i32 %v2_a228, i32* %r2.global-to-local, align 4
  %v9_a228 = icmp eq i32 %v0_a228, %v1_a228
  store i1 %v9_a228, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a228, label %dec_label_pc_a2d8, label %dec_label_pc_a230

dec_label_pc_a230:                                ; preds = %dec_label_pc_a228
  %v1_a230 = load i32, i32* @r6, align 4
  %v2_a230 = add i32 %v1_a230, %v1_a228
  %v3_a230 = inttoptr i32 %v2_a230 to i8*
  %v4_a230 = load i8, i8* %v3_a230, align 1
  store i32 %v2_a230, i32* %r0.global-to-local, align 4
  %v1_a238 = add i32 %v2_a228, -1
  store i32 %v1_a238, i32* %r2.global-to-local, align 4
  %v7_a238 = icmp eq i32 %v2_a228, 1
  store i1 %v7_a238, i1* %cpsr_z.global-to-local, align 1
  %v3_a23c = add i32 %v2_a23c, 4
  %v4_a23c = inttoptr i32 %v3_a23c to i8*
  store i8 %v4_a230, i8* %v4_a23c, align 1
  %v0_a240 = load i32, i32* %r0.global-to-local, align 4
  %v0_a244 = load i32, i32* %r2.global-to-local, align 4
  %v1_a244 = add i32 %v0_a244, -1
  store i32 %v1_a244, i32* @r8, align 4
  %v1_a248 = add i32 %v0_a240, 2
  store i32 %v1_a248, i32* @r6, align 4
  %v0_a24c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a24c, label %dec_label_pc_a2d8, label %dec_label_pc_a250

dec_label_pc_a250:                                ; preds = %dec_label_pc_a230
  %v1_a240 = add i32 %v0_a240, 1
  %v2_a250 = inttoptr i32 %v1_a240 to i8*
  %v3_a250 = load i8, i8* %v2_a250, align 1
  %v4_a250 = zext i8 %v3_a250 to i32
  store i32 %v4_a250, i32* @r4, align 4
  %v2_a254 = sub i32 %v1_a244, %v4_a250
  %tmp30 = sub i32 0, %v2_a254
  %v6_a254 = and i32 %v1_a244, %tmp30
  %v7_a254 = icmp slt i32 %v6_a254, 0
  %v8_a254 = icmp slt i32 %v2_a254, 0
  %v9_a254 = icmp eq i32 %v1_a244, %v4_a250
  store i1 %v9_a254, i1* %cpsr_z.global-to-local, align 1
  %v2_a258 = xor i1 %v8_a254, %v7_a254
  br i1 %v2_a258, label %dec_label_pc_a2d8, label %dec_label_pc_a25c

dec_label_pc_a25c:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a20c
  %v0_a260 = phi i32 [ %v4_a1f8, %dec_label_pc_a20c ], [ %v4_a250, %dec_label_pc_a250 ]
  %v2_a23c = phi i32 [ %v1_a214, %dec_label_pc_a20c ], [ %v1_a280, %dec_label_pc_a250 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_a260 = add nuw nsw i32 %v0_a260, 1
  store i32 %v1_a260, i32* %r0.global-to-local, align 4
  %v2_a264 = call i32 @function_140b4(i32 %v1_a260, i32 1)
  store i32 %v2_a264, i32* %r0.global-to-local, align 4
  %v0_a268 = load i32, i32* @r6, align 4
  store i32 %v0_a268, i32* %r1.global-to-local, align 4
  %v1_a26c = load i32, i32* @r5, align 4
  %v2_a26c = inttoptr i32 %v1_a26c to i32*
  store i32 %v2_a264, i32* %v2_a26c, align 4
  %v0_a270 = load i32, i32* @r4, align 4
  store i32 %v0_a270, i32* %r2.global-to-local, align 4
  %v3_a274 = call i32 @function_12b6c(i32 %v2_a264, i32 %v0_a268, i32 %v0_a270)
  store i32 %v3_a274, i32* %r0.global-to-local, align 4
  store i32 %v2_a23c, i32* @r5, align 4
  %v0_a27c = load i32, i32* %fp.global-to-local, align 4
  %v1_a27c = add i32 %v0_a27c, 1
  store i32 %v1_a27c, i32* %fp.global-to-local, align 4
  %v1_a280 = add i32 %v2_a23c, 8
  store i32 %v1_a280, i32* %ip.global-to-local, align 4
  %v1_a284 = load i32, i32* @sb, align 4
  %v9_a284 = icmp eq i32 %v1_a27c, %v1_a284
  store i1 %v9_a284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a284, label %dec_label_pc_a290, label %dec_label_pc_a228

dec_label_pc_a290:                                ; preds = %dec_label_pc_a25c, %dec_label_pc_a1c0, %dec_label_pc_a1ac
  %stack_var_-48.1 = phi i32 [ %v3_a1ac, %dec_label_pc_a1ac ], [ %v0_a1cc, %dec_label_pc_a1c0 ], [ %v0_a1cc, %dec_label_pc_a25c ]
  %stack_var_-52.2 = phi i32 [ %v3_a1ac, %dec_label_pc_a1ac ], [ %v2_a1c8, %dec_label_pc_a1c0 ], [ %v2_a1c8, %dec_label_pc_a25c ]
  %v0_a290 = call i32 @function_13a84()
  %v0_a294 = load i32, i32* @sl, align 4
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_a2a0 = mul i32 %v0_a294, 16777216
  %v1_a294 = mul i32 %v0_a294, 256
  %v4_a2a4 = and i32 %v1_a294, 16711680
  %v5_a2a4 = or i32 %v4_a2a4, %v3_a2a0
  store i32 %v5_a2a4, i32* %r1.global-to-local, align 4
  %v1_a29c = udiv i32 %v0_a294, 256
  %v3_a2a8 = and i32 %v1_a29c, 65280
  store i32 %v3_a2a8, i32* %r2.global-to-local, align 4
  %v2_a2b0 = inttoptr i32 %v0_a290 to i32*
  store i32 0, i32* %v2_a2b0, align 4
  %v0_a2b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2b4 = load i32, i32* @sl, align 4
  %v4_a2b4 = udiv i32 %v1_a2b4, 16777216
  %v5_a2b4 = or i32 %v4_a2b4, %v0_a2b4
  %v0_a2b8 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* @ip, align 4
  %v1_a2c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a2c0 = or i32 %v5_a2b4, %v1_a2c0
  store i32 %v2_a2c0, i32* %r0.global-to-local, align 4
  store i32 %v4_a108, i32* %r1.global-to-local, align 4
  %v0_a2cc = load i32, i32* @r7, align 4
  store i32 %v0_a2cc, i32* %r2.global-to-local, align 4
  %v6_a2d4 = trunc i32 %v0_a2b8 to i8
  %v7_a2d4 = call i32 @function_9fe8(i32 %v2_a2c0, i32 %v4_a108, i32 %v0_a2cc, i32 %v2_a13c, i8 %v6_a2d4, i32 %stack_var_-52.2)
  store i32 %v7_a2d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a2d8

dec_label_pc_a2d8:                                ; preds = %dec_label_pc_a250, %dec_label_pc_a230, %dec_label_pc_a228, %dec_label_pc_a1f8, %dec_label_pc_a1e4, %dec_label_pc_a1dc, %dec_label_pc_a1a0, %dec_label_pc_a290
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_a1a0 ], [ %stack_var_-52.2, %dec_label_pc_a290 ], [ %v2_a1c8, %dec_label_pc_a1dc ], [ %v2_a1c8, %dec_label_pc_a1e4 ], [ %v2_a1c8, %dec_label_pc_a1f8 ], [ %v2_a1c8, %dec_label_pc_a228 ], [ %v2_a1c8, %dec_label_pc_a230 ], [ %v2_a1c8, %dec_label_pc_a250 ]
  store i32 %v2_a13c, i32* %r1.global-to-local, align 4
  %v2_a2dc = icmp eq i32 %v2_a13c, 0
  store i1 %v2_a2dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2dc, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_a2d8
  store i32 %v2_a13c, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_a2d8, %bb
  %v1_a2e4 = xor i1 %v2_a2dc, true
  call void @__pseudo_cond_branch(i1 %v1_a2e4, i32 ptrtoint (i32* @global_var_1410c.58 to i32))
  %v2_a2ec = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_a2ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a2ec, label %.dec_label_pc_a0fc_crit_edge, label %dec_label_pc_a2f4

.dec_label_pc_a0fc_crit_edge:                     ; preds = %bb31
  %v29_a100.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a0fc

dec_label_pc_a2f4:                                ; preds = %bb31
  %v0_a2f4 = load i32, i32* @sb, align 4
  %v2_a2f4 = icmp eq i32 %v0_a2f4, 0
  store i1 %v2_a2f4, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_a2f4, 1
  br i1 %tmp32, label %dec_label_pc_a31c, label %dec_label_pc_a2fc

dec_label_pc_a2fc:                                ; preds = %dec_label_pc_a2f4
  br label %dec_label_pc_a300

dec_label_pc_a300:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a2fc
  %v0_a30c = phi i32 [ %v1_a30c, %dec_label_pc_a300 ], [ 0, %dec_label_pc_a2fc ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_a304 = mul i32 %v0_a30c, 8
  %v5_a304 = add i32 %v4_a304, %stack_var_-52.3
  %v6_a304 = inttoptr i32 %v5_a304 to i32*
  %v7_a304 = load i32, i32* %v6_a304, align 4
  store i32 %v7_a304, i32* %r0.global-to-local, align 4
  %v2_a308 = icmp eq i32 %v7_a304, 0
  store i1 %v2_a308, i1* %cpsr_z.global-to-local, align 1
  %v1_a30c = add i32 %v0_a30c, 1
  %v1_a310 = xor i1 %v2_a308, true
  call void @__pseudo_cond_branch(i1 %v1_a310, i32 ptrtoint (i32* @global_var_1410c.58 to i32))
  %v0_a314 = load i32, i32* @sb, align 4
  %v9_a314 = icmp eq i32 %v0_a314, %v1_a30c
  store i1 %v9_a314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a314, label %dec_label_pc_a31c, label %dec_label_pc_a300

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a300, %dec_label_pc_a2f4
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_a0d8, i32* @r4, align 4
  store i32 %v6_a0d8, i32* @r5, align 4
  store i32 %v9_a0d8, i32* @r6, align 4
  store i32 %v12_a0d8, i32* @r7, align 4
  store i32 %v15_a0d8, i32* @r8, align 4
  store i32 %v18_a0d8, i32* @sb, align 4
  store i32 %v27_a0d8, i32* @lr, align 4
  %v0_a328 = call i32 @function_1410c()
  store i32 %v0_a328, i32* %r0.global-to-local, align 4
  ret i32 %v0_a328

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a294, { 2, 0, 1 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_a280, { 1, 0 }
  uselistorder i32 %v2_a23c, { 2, 1, 0 }
  uselistorder i32 %v2_a254, { 1, 0 }
  uselistorder i32 %v4_a250, { 0, 2, 1, 3 }
  uselistorder i32 %v1_a244, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a240, { 1, 0 }
  uselistorder i32 %v0_a1dc, { 0, 2, 1 }
  uselistorder i32 %v0_a1cc, { 0, 2, 1, 3 }
  uselistorder i32 %v2_a1c8, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_a1ac, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_a188, { 1, 0 }
  uselistorder i32 %v0_a16c, { 0, 2, 1 }
  uselistorder i32 %v0_a148, { 1, 2, 0, 3 }
  uselistorder i32 %v2_a13c, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_a128, { 2, 1, 0 }
  uselistorder i32 %v4_a114, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_a108, { 1, 0, 2 }
  uselistorder i32 %v0_a0e8, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 21, 4, 22, 5, 8, 12, 9, 6, 7, 10, 11, 18, 13, 15, 14, 16, 17, 20, 19, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 4, 5, 0, 2, 3, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_a2d8, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_a0fc, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_a32c(i32 %arg1) local_unnamed_addr {
dec_label_pc_a32c:
  %r0.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_a32c = load i32, i32* @r4, align 4
  store i32 %v3_a32c, i32* %stack_var_-12, align 4
  %v6_a32c = load i32, i32* @r5, align 4
  %v9_a32c = load i32, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_1ea48.60 to i32), i32* @r4, align 4
  %v2_a334 = load i32, i32* @global_var_1ea48.60, align 4
  store i32 %v2_a334, i32* %r0.global-to-local, align 4
  %v2_a338 = icmp eq i32 %v2_a334, 0
  br i1 %v2_a338, label %dec_label_pc_a340, label %dec_label_pc_a3c0

dec_label_pc_a340:                                ; preds = %dec_label_pc_a32c
  %v3_a340 = load i32, i32* @global_var_1ea4c.61, align 4
  store i32 %v3_a340, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v2_a348 = icmp eq i32 %v3_a340, 0
  store i32 0, i32* @global_var_1ea48.60, align 4
  br i1 %v2_a348, label %dec_label_pc_a354, label %dec_label_pc_a3dc

dec_label_pc_a354:                                ; preds = %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge, %dec_label_pc_a340
  %v0_a35c = phi i32 [ %v0_a35c.pre, %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge ], [ 0, %dec_label_pc_a340 ]
  %v1_a35c = phi i32 [ %v0_a354.pre, %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge ], [ ptrtoint (i32* @global_var_1ea48.60 to i32), %dec_label_pc_a340 ]
  %v1_a354 = add i32 %v1_a35c, 8
  %v2_a354 = inttoptr i32 %v1_a354 to i32*
  %v3_a354 = load i32, i32* %v2_a354, align 4
  store i32 %v3_a354, i32* %r0.global-to-local, align 4
  %v2_a358 = icmp eq i32 %v3_a354, 0
  %v2_a35c = add i32 %v1_a35c, 4
  %v3_a35c = inttoptr i32 %v2_a35c to i32*
  store i32 %v0_a35c, i32* %v3_a35c, align 4
  br i1 %v2_a358, label %dec_label_pc_a364, label %dec_label_pc_a3f4

dec_label_pc_a364:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a3dc
  %v0_a364 = load i32, i32* @r4, align 4
  %v1_a364 = add i32 %v0_a364, 12
  %v2_a364 = inttoptr i32 %v1_a364 to i32*
  %v3_a364 = load i32, i32* %v2_a364, align 4
  store i32 %v3_a364, i32* %r0.global-to-local, align 4
  %v2_a368 = icmp eq i32 %v3_a364, 0
  %v0_a36c = load i32, i32* %r5.global-to-local, align 4
  %v2_a36c = add i32 %v0_a364, 8
  %v3_a36c = inttoptr i32 %v2_a36c to i32*
  store i32 %v0_a36c, i32* %v3_a36c, align 4
  br i1 %v2_a368, label %dec_label_pc_a374, label %dec_label_pc_a40c

dec_label_pc_a374:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a3f4
  %v0_a374 = load i32, i32* @r4, align 4
  %v1_a374 = add i32 %v0_a374, 16
  %v2_a374 = inttoptr i32 %v1_a374 to i32*
  %v3_a374 = load i32, i32* %v2_a374, align 4
  store i32 %v3_a374, i32* %r0.global-to-local, align 4
  %v2_a378 = icmp eq i32 %v3_a374, 0
  %v0_a37c = load i32, i32* %r5.global-to-local, align 4
  %v2_a37c = add i32 %v0_a374, 12
  %v3_a37c = inttoptr i32 %v2_a37c to i32*
  store i32 %v0_a37c, i32* %v3_a37c, align 4
  br i1 %v2_a378, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a384:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a40c
  %v0_a384 = load i32, i32* @r4, align 4
  %v1_a384 = add i32 %v0_a384, 20
  %v2_a384 = inttoptr i32 %v1_a384 to i32*
  %v3_a384 = load i32, i32* %v2_a384, align 4
  store i32 %v3_a384, i32* %r0.global-to-local, align 4
  %v2_a388 = icmp eq i32 %v3_a384, 0
  %v0_a38c = load i32, i32* %r5.global-to-local, align 4
  %v2_a38c = add i32 %v0_a384, 16
  %v3_a38c = inttoptr i32 %v2_a38c to i32*
  store i32 %v0_a38c, i32* %v3_a38c, align 4
  br i1 %v2_a388, label %dec_label_pc_a394, label %dec_label_pc_a43c

dec_label_pc_a394:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a424
  %v0_a394 = load i32, i32* @r4, align 4
  %v1_a394 = add i32 %v0_a394, 24
  %v2_a394 = inttoptr i32 %v1_a394 to i32*
  %v3_a394 = load i32, i32* %v2_a394, align 4
  store i32 %v3_a394, i32* %r0.global-to-local, align 4
  %v2_a398 = icmp eq i32 %v3_a394, 0
  %v0_a39c = load i32, i32* %r5.global-to-local, align 4
  %v2_a39c = add i32 %v0_a394, 20
  %v3_a39c = inttoptr i32 %v2_a39c to i32*
  store i32 %v0_a39c, i32* %v3_a39c, align 4
  br i1 %v2_a398, label %dec_label_pc_a3a4, label %dec_label_pc_a454

dec_label_pc_a3a4:                                ; preds = %dec_label_pc_a394, %dec_label_pc_a43c
  %v0_a3a4 = load i32, i32* @r4, align 4
  %v1_a3a4 = add i32 %v0_a3a4, 28
  %v2_a3a4 = inttoptr i32 %v1_a3a4 to i32*
  %v3_a3a4 = load i32, i32* %v2_a3a4, align 4
  store i32 %v3_a3a4, i32* %r0.global-to-local, align 4
  %v2_a3a8 = icmp eq i32 %v3_a3a4, 0
  %v0_a3ac = load i32, i32* %r5.global-to-local, align 4
  %v2_a3ac = add i32 %v0_a3a4, 24
  %v3_a3ac = inttoptr i32 %v2_a3ac to i32*
  store i32 %v0_a3ac, i32* %v3_a3ac, align 4
  br i1 %v2_a3a8, label %dec_label_pc_a3b4, label %dec_label_pc_a46c

dec_label_pc_a3b4:                                ; preds = %dec_label_pc_a3a4, %dec_label_pc_a454, %dec_label_pc_a46c
  %v0_a3b4 = load i32, i32* %r5.global-to-local, align 4
  %v1_a3b4 = load i32, i32* @r4, align 4
  %v2_a3b4 = add i32 %v1_a3b4, 28
  %v3_a3b4 = inttoptr i32 %v2_a3b4 to i32*
  store i32 %v0_a3b4, i32* %v3_a3b4, align 4
  %v2_a3b8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_a3b8, i32* @r4, align 4
  store i32 %v6_a32c, i32* @r5, align 4
  store i32 %v9_a32c, i32* @lr, align 4
  %v0_a3bc = call i32 @function_106d8()
  store i32 %v0_a3bc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3c0

dec_label_pc_a3c0:                                ; preds = %dec_label_pc_a32c, %dec_label_pc_a3b4
  %v0_a3c4 = phi i32 [ %v2_a334, %dec_label_pc_a32c ], [ %v0_a3bc, %dec_label_pc_a3b4 ]
  %v2_a3c4 = call i32 @function_135b0(i32 %v0_a3c4, i32 9)
  store i32 %v2_a3c4, i32* %r0.global-to-local, align 4
  %v0_a3c8 = load i32, i32* @r4, align 4
  %v1_a3c8 = add i32 %v0_a3c8, 4
  %v2_a3c8 = inttoptr i32 %v1_a3c8 to i32*
  %v3_a3c8 = load i32, i32* %v2_a3c8, align 4
  store i32 %v3_a3c8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  %v2_a3d0 = icmp eq i32 %v3_a3c8, 0
  %v2_a3d4 = inttoptr i32 %v0_a3c8 to i32*
  store i32 0, i32* %v2_a3d4, align 4
  br i1 %v2_a3d0, label %dec_label_pc_a3c0.dec_label_pc_a354_crit_edge, label %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge

dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge:    ; preds = %dec_label_pc_a3c0
  %v0_a3e0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3dc

dec_label_pc_a3c0.dec_label_pc_a354_crit_edge:    ; preds = %dec_label_pc_a3c0
  %v0_a354.pre = load i32, i32* @r4, align 4
  %v0_a35c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_a354

dec_label_pc_a3dc:                                ; preds = %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge, %dec_label_pc_a340
  %v0_a3e0 = phi i32 [ %v0_a3e0.pre, %dec_label_pc_a3c0.dec_label_pc_a3dc_crit_edge ], [ %v3_a340, %dec_label_pc_a340 ]
  %v2_a3e0 = call i32 @function_135b0(i32 %v0_a3e0, i32 9)
  store i32 %v2_a3e0, i32* %r0.global-to-local, align 4
  %v0_a3e4 = load i32, i32* @r4, align 4
  %v1_a3e4 = add i32 %v0_a3e4, 8
  %v2_a3e4 = inttoptr i32 %v1_a3e4 to i32*
  %v3_a3e4 = load i32, i32* %v2_a3e4, align 4
  store i32 %v3_a3e4, i32* %r0.global-to-local, align 4
  %v2_a3e8 = icmp eq i32 %v3_a3e4, 0
  %v0_a3ec = load i32, i32* %r5.global-to-local, align 4
  %v2_a3ec = add i32 %v0_a3e4, 4
  %v3_a3ec = inttoptr i32 %v2_a3ec to i32*
  store i32 %v0_a3ec, i32* %v3_a3ec, align 4
  br i1 %v2_a3e8, label %dec_label_pc_a364, label %dec_label_pc_a3f4

dec_label_pc_a3f4:                                ; preds = %dec_label_pc_a354, %dec_label_pc_a3dc
  %v0_a3f8 = load i32, i32* %r0.global-to-local, align 4
  %v2_a3f8 = call i32 @function_135b0(i32 %v0_a3f8, i32 9)
  store i32 %v2_a3f8, i32* %r0.global-to-local, align 4
  %v0_a3fc = load i32, i32* @r4, align 4
  %v1_a3fc = add i32 %v0_a3fc, 12
  %v2_a3fc = inttoptr i32 %v1_a3fc to i32*
  %v3_a3fc = load i32, i32* %v2_a3fc, align 4
  store i32 %v3_a3fc, i32* %r0.global-to-local, align 4
  %v2_a400 = icmp eq i32 %v3_a3fc, 0
  %v0_a404 = load i32, i32* %r5.global-to-local, align 4
  %v2_a404 = add i32 %v0_a3fc, 8
  %v3_a404 = inttoptr i32 %v2_a404 to i32*
  store i32 %v0_a404, i32* %v3_a404, align 4
  br i1 %v2_a400, label %dec_label_pc_a374, label %dec_label_pc_a40c

dec_label_pc_a40c:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a3f4
  %v0_a410 = load i32, i32* %r0.global-to-local, align 4
  %v2_a410 = call i32 @function_135b0(i32 %v0_a410, i32 9)
  store i32 %v2_a410, i32* %r0.global-to-local, align 4
  %v0_a414 = load i32, i32* @r4, align 4
  %v1_a414 = add i32 %v0_a414, 16
  %v2_a414 = inttoptr i32 %v1_a414 to i32*
  %v3_a414 = load i32, i32* %v2_a414, align 4
  store i32 %v3_a414, i32* %r0.global-to-local, align 4
  %v2_a418 = icmp eq i32 %v3_a414, 0
  %v0_a41c = load i32, i32* %r5.global-to-local, align 4
  %v2_a41c = add i32 %v0_a414, 12
  %v3_a41c = inttoptr i32 %v2_a41c to i32*
  store i32 %v0_a41c, i32* %v3_a41c, align 4
  br i1 %v2_a418, label %dec_label_pc_a384, label %dec_label_pc_a424

dec_label_pc_a424:                                ; preds = %dec_label_pc_a374, %dec_label_pc_a40c
  %v0_a428 = load i32, i32* %r0.global-to-local, align 4
  %v2_a428 = call i32 @function_135b0(i32 %v0_a428, i32 9)
  store i32 %v2_a428, i32* %r0.global-to-local, align 4
  %v0_a42c = load i32, i32* @r4, align 4
  %v1_a42c = add i32 %v0_a42c, 20
  %v2_a42c = inttoptr i32 %v1_a42c to i32*
  %v3_a42c = load i32, i32* %v2_a42c, align 4
  store i32 %v3_a42c, i32* %r0.global-to-local, align 4
  %v2_a430 = icmp eq i32 %v3_a42c, 0
  %v0_a434 = load i32, i32* %r5.global-to-local, align 4
  %v2_a434 = add i32 %v0_a42c, 16
  %v3_a434 = inttoptr i32 %v2_a434 to i32*
  store i32 %v0_a434, i32* %v3_a434, align 4
  br i1 %v2_a430, label %dec_label_pc_a394, label %dec_label_pc_a43c

dec_label_pc_a43c:                                ; preds = %dec_label_pc_a384, %dec_label_pc_a424
  %v0_a440 = load i32, i32* %r0.global-to-local, align 4
  %v2_a440 = call i32 @function_135b0(i32 %v0_a440, i32 9)
  store i32 %v2_a440, i32* %r0.global-to-local, align 4
  %v0_a444 = load i32, i32* @r4, align 4
  %v1_a444 = add i32 %v0_a444, 24
  %v2_a444 = inttoptr i32 %v1_a444 to i32*
  %v3_a444 = load i32, i32* %v2_a444, align 4
  store i32 %v3_a444, i32* %r0.global-to-local, align 4
  %v2_a448 = icmp eq i32 %v3_a444, 0
  %v0_a44c = load i32, i32* %r5.global-to-local, align 4
  %v2_a44c = add i32 %v0_a444, 20
  %v3_a44c = inttoptr i32 %v2_a44c to i32*
  store i32 %v0_a44c, i32* %v3_a44c, align 4
  br i1 %v2_a448, label %dec_label_pc_a3a4, label %dec_label_pc_a454

dec_label_pc_a454:                                ; preds = %dec_label_pc_a394, %dec_label_pc_a43c
  %v0_a458 = load i32, i32* %r0.global-to-local, align 4
  %v2_a458 = call i32 @function_135b0(i32 %v0_a458, i32 9)
  store i32 %v2_a458, i32* %r0.global-to-local, align 4
  %v0_a45c = load i32, i32* @r4, align 4
  %v1_a45c = add i32 %v0_a45c, 28
  %v2_a45c = inttoptr i32 %v1_a45c to i32*
  %v3_a45c = load i32, i32* %v2_a45c, align 4
  store i32 %v3_a45c, i32* %r0.global-to-local, align 4
  %v2_a460 = icmp eq i32 %v3_a45c, 0
  %v0_a464 = load i32, i32* %r5.global-to-local, align 4
  %v2_a464 = add i32 %v0_a45c, 24
  %v3_a464 = inttoptr i32 %v2_a464 to i32*
  store i32 %v0_a464, i32* %v3_a464, align 4
  br i1 %v2_a460, label %dec_label_pc_a3b4, label %dec_label_pc_a46c

dec_label_pc_a46c:                                ; preds = %dec_label_pc_a3a4, %dec_label_pc_a454
  %v0_a470 = load i32, i32* %r0.global-to-local, align 4
  %v2_a470 = call i32 @function_135b0(i32 %v0_a470, i32 9)
  store i32 %v2_a470, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a3b4

; uselistorder directives
  uselistorder i32* %r5.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1, 10, 8, 9, 11, 12, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 16, 1, 4, 18, 3, 6, 20, 5, 8, 22, 7, 10, 24, 9, 12, 26, 11, 15, 13, 14, 30, 0, 17, 19, 21, 23, 25, 27, 28, 29 }
  uselistorder label %dec_label_pc_a46c, { 1, 0 }
  uselistorder label %dec_label_pc_a454, { 1, 0 }
  uselistorder label %dec_label_pc_a43c, { 1, 0 }
  uselistorder label %dec_label_pc_a424, { 1, 0 }
  uselistorder label %dec_label_pc_a40c, { 1, 0 }
  uselistorder label %dec_label_pc_a3f4, { 1, 0 }
  uselistorder label %dec_label_pc_a3c0, { 1, 0 }
  uselistorder label %dec_label_pc_a3b4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a3a4, { 1, 0 }
  uselistorder label %dec_label_pc_a394, { 1, 0 }
  uselistorder label %dec_label_pc_a384, { 1, 0 }
  uselistorder label %dec_label_pc_a374, { 1, 0 }
  uselistorder label %dec_label_pc_a364, { 1, 0 }
}

define i32 @function_a47c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_a47c:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a47c = urem i32 %arg1, 256
  %v2_a480 = icmp eq i32 %v1_a47c, 0
  %v3_a484 = load i32, i32* @r4, align 4
  br i1 %v2_a480, label %dec_label_pc_a4cc, label %dec_label_pc_a490

dec_label_pc_a490:                                ; preds = %dec_label_pc_a47c
  %v0_a490 = load i32, i32* %r1.global-to-local, align 4
  %v1_a490 = add i32 %v0_a490, 4
  %v2_a490 = inttoptr i32 %v1_a490 to i8*
  %v3_a490 = load i8, i8* %v2_a490, align 1
  %v4_a490 = zext i8 %v3_a490 to i32
  %v1_a494 = urem i32 %arg3, 256
  %v9_a498 = icmp eq i32 %v4_a490, %v1_a494
  br i1 %v9_a498, label %dec_label_pc_a4d4, label %dec_label_pc_a4bc.preheader

dec_label_pc_a4bc.preheader:                      ; preds = %dec_label_pc_a490
  br label %dec_label_pc_a4bc

dec_label_pc_a4ac:                                ; preds = %dec_label_pc_a4bc
  %v1_a4ac = add i32 %v0_a4b4.in, 12
  %v2_a4ac = inttoptr i32 %v1_a4ac to i8*
  %v3_a4ac = load i8, i8* %v2_a4ac, align 1
  %v4_a4ac = zext i8 %v3_a4ac to i32
  %v9_a4b0 = icmp eq i32 %v1_a494, %v4_a4ac
  br i1 %v9_a4b0, label %dec_label_pc_a4d4, label %dec_label_pc_a4bc

dec_label_pc_a4bc:                                ; preds = %dec_label_pc_a4bc.preheader, %dec_label_pc_a4ac
  %v0_a4b4.in = phi i32 [ %v0_a490, %dec_label_pc_a4bc.preheader ], [ %v0_a4b4, %dec_label_pc_a4ac ]
  %v0_a4bc = phi i32 [ 0, %dec_label_pc_a4bc.preheader ], [ %v1_a4bc, %dec_label_pc_a4ac ]
  %v0_a4b4 = add i32 %v0_a4b4.in, 8
  %v1_a4bc = add i32 %v0_a4bc, 1
  %v9_a4c0 = icmp eq i32 %v1_a47c, %v1_a4bc
  store i32 %v0_a4b4, i32* %r1.global-to-local, align 4
  br i1 %v9_a4c0, label %dec_label_pc_a4cc, label %dec_label_pc_a4ac

dec_label_pc_a4cc:                                ; preds = %dec_label_pc_a4bc, %dec_label_pc_a4d4, %dec_label_pc_a47c
  store i32 %v3_a484, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a4d4:                                ; preds = %dec_label_pc_a4ac, %dec_label_pc_a490
  %v0_a4d4 = phi i32 [ %v0_a490, %dec_label_pc_a490 ], [ %v0_a4b4, %dec_label_pc_a4ac ]
  %v1_a4d4 = inttoptr i32 %v0_a4d4 to i32*
  %v2_a4d4 = load i32, i32* %v1_a4d4, align 4
  store i32 %v2_a4d4, i32* @r0, align 4
  %v2_a4d8 = icmp eq i32 %v2_a4d4, 0
  br i1 %v2_a4d8, label %dec_label_pc_a4cc, label %dec_label_pc_a4e0

dec_label_pc_a4e0:                                ; preds = %dec_label_pc_a4d4
  store i32 %v3_a484, i32* @r4, align 4
  %v1_a4e4 = call i32 @function_13b90(i32 %v2_a4d4)
  ret i32 %v1_a4e4

; uselistorder directives
  uselistorder i32 %v1_a4bc, { 1, 0 }
  uselistorder i32 %v0_a4b4, { 1, 0, 2 }
  uselistorder i32 %v0_a4b4.in, { 1, 0 }
  uselistorder i32 %v1_a494, { 1, 0 }
  uselistorder i32 %v0_a490, { 1, 0, 2 }
  uselistorder i32 %v3_a484, { 1, 0 }
  uselistorder i32 %v1_a47c, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a4cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a4bc, { 1, 0 }
}

define i32 @function_a4e8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a4e8:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_a4e8 = urem i32 %arg1, 256
  %v2_a4ec = icmp eq i32 %v1_a4e8, 0
  %v3_a4f0 = load i32, i32* @r4, align 4
  %v6_a4f0 = load i32, i32* @lr, align 4
  br i1 %v2_a4ec, label %dec_label_pc_a538, label %dec_label_pc_a4fc

dec_label_pc_a4fc:                                ; preds = %dec_label_pc_a4e8
  %v0_a4fc = load i32, i32* %r1.global-to-local, align 4
  %v1_a4fc = add i32 %v0_a4fc, 4
  %v2_a4fc = inttoptr i32 %v1_a4fc to i8*
  %v3_a4fc = load i8, i8* %v2_a4fc, align 1
  %v4_a4fc = zext i8 %v3_a4fc to i32
  %v1_a500 = urem i32 %arg3, 256
  %v9_a504 = icmp eq i32 %v4_a4fc, %v1_a500
  br i1 %v9_a504, label %dec_label_pc_a540, label %dec_label_pc_a528.preheader

dec_label_pc_a528.preheader:                      ; preds = %dec_label_pc_a4fc
  br label %dec_label_pc_a528

dec_label_pc_a518:                                ; preds = %dec_label_pc_a528
  %v1_a518 = add i32 %v0_a520.in, 12
  %v2_a518 = inttoptr i32 %v1_a518 to i8*
  %v3_a518 = load i8, i8* %v2_a518, align 1
  %v4_a518 = zext i8 %v3_a518 to i32
  %v9_a51c = icmp eq i32 %v1_a500, %v4_a518
  br i1 %v9_a51c, label %dec_label_pc_a540, label %dec_label_pc_a528

dec_label_pc_a528:                                ; preds = %dec_label_pc_a528.preheader, %dec_label_pc_a518
  %v0_a520.in = phi i32 [ %v0_a4fc, %dec_label_pc_a528.preheader ], [ %v0_a520, %dec_label_pc_a518 ]
  %v0_a528 = phi i32 [ 0, %dec_label_pc_a528.preheader ], [ %v1_a528, %dec_label_pc_a518 ]
  %v0_a520 = add i32 %v0_a520.in, 8
  %v1_a528 = add i32 %v0_a528, 1
  store i32 %v1_a528, i32* @lr, align 4
  %v9_a52c = icmp eq i32 %v1_a4e8, %v1_a528
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  br i1 %v9_a52c, label %dec_label_pc_a538, label %dec_label_pc_a518

dec_label_pc_a538:                                ; preds = %dec_label_pc_a528, %dec_label_pc_a540, %dec_label_pc_a4e8
  store i32 %v3_a4f0, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_a540:                                ; preds = %dec_label_pc_a518, %dec_label_pc_a4fc
  %v0_a540 = phi i32 [ %v0_a4fc, %dec_label_pc_a4fc ], [ %v0_a520, %dec_label_pc_a518 ]
  %v1_a540 = inttoptr i32 %v0_a540 to i32*
  %v2_a540 = load i32, i32* %v1_a540, align 4
  %v2_a544 = icmp eq i32 %v2_a540, 0
  br i1 %v2_a544, label %dec_label_pc_a538, label %dec_label_pc_a54c

dec_label_pc_a54c:                                ; preds = %dec_label_pc_a540
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_a4f0, i32* @r4, align 4
  store i32 %v6_a4f0, i32* @lr, align 4
  %v2_a554 = inttoptr i32 %v2_a540 to i8*
  %v3_a554 = call i32 @function_12c1c(i8* %v2_a554, i32 10)
  ret i32 %v3_a554

; uselistorder directives
  uselistorder i32 %v1_a528, { 1, 2, 0 }
  uselistorder i32 %v0_a520, { 1, 0, 2 }
  uselistorder i32 %v0_a520.in, { 1, 0 }
  uselistorder i32 %v1_a500, { 1, 0 }
  uselistorder i32 %v0_a4fc, { 1, 0, 2 }
  uselistorder i32 %v3_a4f0, { 1, 0 }
  uselistorder i32 %v1_a4e8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_a538, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a528, { 1, 0 }
}

define i32 @function_a558(i32 %arg1) local_unnamed_addr {
dec_label_pc_a558:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_a558 = load i32, i32* @r4, align 4
  store i32 %v3_a558, i32* %stack_var_-20, align 4
  %v6_a558 = load i32, i32* @r5, align 4
  %v9_a558 = load i32, i32* @r6, align 4
  %v12_a558 = load i32, i32* @r7, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_a564 = call i32 @function_140b4(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1ea40.54 to i32), i32* @r4, align 4
  %v2_a56c = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a56c = zext i8 %v2_a56c to i32
  store i32 ptrtoint (i32* @global_var_1ea44.56 to i32), i32* @r6, align 4
  store i32 53572, i32* %r2.global-to-local, align 4
  store i32 %v2_a564, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a580 = mul nuw nsw i32 %v3_a56c, 4
  store i32 %v3_a580, i32* %r1.global-to-local, align 4
  %v2_a584 = load i32, i32* @global_var_1ea44.56, align 4
  %v2_a588 = inttoptr i32 %v2_a564 to i32*
  store i32 53572, i32* %v2_a588, align 4
  %v3_a58c = load i32, i32* @r5, align 4
  %v4_a58c = add i32 %v3_a58c, 4
  %v5_a58c = inttoptr i32 %v4_a58c to i8*
  store i8 0, i8* %v5_a58c, align 1
  %v0_a590 = load i32, i32* %r1.global-to-local, align 4
  %v1_a590 = add i32 %v0_a590, 4
  store i32 %v1_a590, i32* %r1.global-to-local, align 4
  %v5_a594 = call i32 @function_141fc(i32 %v2_a584, i32 %v1_a590, i32 53572, i32 0)
  %v2_a598 = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a598 = zext i8 %v2_a598 to i32
  store i32 %v3_a598, i32* %r3.global-to-local, align 4
  store i32 %v5_a594, i32* %ip.global-to-local, align 4
  %v0_a5a0 = load i32, i32* @r5, align 4
  %v5_a5a0 = mul nuw nsw i32 %v3_a598, 4
  %v6_a5a0 = add i32 %v5_a5a0, %v5_a594
  %v7_a5a0 = inttoptr i32 %v6_a5a0 to i32*
  store i32 %v0_a5a0, i32* %v7_a5a0, align 4
  store i32 ptrtoint (i8* @global_var_1ea41.65 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_a5b0 = load i32, i32* @r4, align 4
  %v4_a5b0 = inttoptr i32 %v3_a5b0 to i8*
  store i8 ptrtoint (i8* @global_var_1ea41.65 to i8), i8* %v4_a5b0, align 1
  %v0_a5b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a5b4 = load i32, i32* @r6, align 4
  %v2_a5b4 = inttoptr i32 %v1_a5b4 to i32*
  store i32 %v0_a5b4, i32* %v2_a5b4, align 4
  %v2_a5b8 = call i32 @function_140b4(i32 1, i32 8)
  %v2_a5bc = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a5bc = zext i8 %v2_a5bc to i32
  store i32 ptrtoint (i32* @global_var_d7d0.67 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r7, align 4
  store i32 %v2_a5b8, i32* @r5, align 4
  %v3_a5cc = mul nuw nsw i32 %v3_a5bc, 4
  store i32 %v3_a5cc, i32* %r1.global-to-local, align 4
  %v2_a5d0 = load i32, i32* @global_var_1ea44.56, align 4
  %v2_a5d4 = inttoptr i32 %v2_a5b8 to i32*
  store i32 ptrtoint (i32* @global_var_d7d0.67 to i32), i32* %v2_a5d4, align 4
  %v0_a5d8 = load i32, i32* @r7, align 4
  %v1_a5d8 = trunc i32 %v0_a5d8 to i8
  %v2_a5d8 = load i32, i32* @r5, align 4
  %v3_a5d8 = add i32 %v2_a5d8, 4
  %v4_a5d8 = inttoptr i32 %v3_a5d8 to i8*
  store i8 %v1_a5d8, i8* %v4_a5d8, align 1
  %v0_a5dc = load i32, i32* %r1.global-to-local, align 4
  %v1_a5dc = add i32 %v0_a5dc, 4
  store i32 %v1_a5dc, i32* %r1.global-to-local, align 4
  %v5_a5e0 = call i32 @function_141fc(i32 %v2_a5d0, i32 %v1_a5dc, i32 sext (i8 ptrtoint (i8* @global_var_1ea41.65 to i8) to i32), i32 ptrtoint (i32* @global_var_d7d0.67 to i32))
  %v2_a5e4 = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a5e4 = zext i8 %v2_a5e4 to i32
  store i32 %v3_a5e4, i32* %r3.global-to-local, align 4
  store i32 %v5_a5e0, i32* %ip.global-to-local, align 4
  %v0_a5ec = load i32, i32* @r5, align 4
  %v5_a5ec = mul nuw nsw i32 %v3_a5e4, 4
  %v6_a5ec = add i32 %v5_a5ec, %v5_a5e0
  %v7_a5ec = inttoptr i32 %v6_a5ec to i32*
  store i32 %v0_a5ec, i32* %v7_a5ec, align 4
  %v0_a5f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a5f0 = load i32, i32* @r7, align 4
  %v2_a5f0 = add i32 %v1_a5f0, %v0_a5f0
  store i32 %v2_a5f0, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a5fc = load i32, i32* %ip.global-to-local, align 4
  %v1_a5fc = load i32, i32* @r6, align 4
  %v2_a5fc = inttoptr i32 %v1_a5fc to i32*
  store i32 %v0_a5fc, i32* %v2_a5fc, align 4
  %v0_a600 = load i32, i32* %r2.global-to-local, align 4
  %v1_a600 = trunc i32 %v0_a600 to i8
  %v2_a600 = load i32, i32* @r4, align 4
  %v3_a600 = inttoptr i32 %v2_a600 to i8*
  store i8 %v1_a600, i8* %v3_a600, align 1
  %v2_a604 = call i32 @function_140b4(i32 %v1_a5f0, i32 8)
  %v2_a608 = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a608 = zext i8 %v2_a608 to i32
  store i32 ptrtoint (i32* @global_var_dc94.69 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a604, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a618 = mul nuw nsw i32 %v3_a608, 4
  store i32 %v3_a618, i32* %r1.global-to-local, align 4
  %v2_a61c = load i32, i32* @global_var_1ea44.56, align 4
  %v2_a620 = inttoptr i32 %v2_a604 to i32*
  store i32 ptrtoint (i32* @global_var_dc94.69 to i32), i32* %v2_a620, align 4
  %v3_a624 = load i32, i32* @r5, align 4
  %v4_a624 = add i32 %v3_a624, 4
  %v5_a624 = inttoptr i32 %v4_a624 to i8*
  store i8 2, i8* %v5_a624, align 1
  %v0_a628 = load i32, i32* %r1.global-to-local, align 4
  %v1_a628 = add i32 %v0_a628, 4
  store i32 %v1_a628, i32* %r1.global-to-local, align 4
  %v5_a62c = call i32 @function_141fc(i32 %v2_a61c, i32 %v1_a628, i32 ptrtoint (i32* @global_var_dc94.69 to i32), i32 2)
  %v2_a630 = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a630 = zext i8 %v2_a630 to i32
  store i32 %v3_a630, i32* %r3.global-to-local, align 4
  store i32 %v5_a62c, i32* %ip.global-to-local, align 4
  %v0_a638 = load i32, i32* @r5, align 4
  %v5_a638 = mul nuw nsw i32 %v3_a630, 4
  %v6_a638 = add i32 %v5_a638, %v5_a62c
  %v7_a638 = inttoptr i32 %v6_a638 to i32*
  store i32 %v0_a638, i32* %v7_a638, align 4
  %v0_a63c = load i32, i32* %r3.global-to-local, align 4
  %v1_a63c = load i32, i32* @r7, align 4
  %v2_a63c = add i32 %v1_a63c, %v0_a63c
  store i32 %v2_a63c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a648 = load i32, i32* %ip.global-to-local, align 4
  %v1_a648 = load i32, i32* @r6, align 4
  %v2_a648 = inttoptr i32 %v1_a648 to i32*
  store i32 %v0_a648, i32* %v2_a648, align 4
  %v0_a64c = load i32, i32* %r2.global-to-local, align 4
  %v1_a64c = trunc i32 %v0_a64c to i8
  %v2_a64c = load i32, i32* @r4, align 4
  %v3_a64c = inttoptr i32 %v2_a64c to i8*
  store i8 %v1_a64c, i8* %v3_a64c, align 1
  %v2_a650 = call i32 @function_140b4(i32 %v1_a63c, i32 8)
  %v2_a654 = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a654 = zext i8 %v2_a654 to i32
  store i32 ptrtoint (i32* @global_var_ce5c.71 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a650, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_a664 = mul nuw nsw i32 %v3_a654, 4
  store i32 %v3_a664, i32* %r1.global-to-local, align 4
  %v2_a668 = load i32, i32* @global_var_1ea44.56, align 4
  %v2_a66c = inttoptr i32 %v2_a650 to i32*
  store i32 ptrtoint (i32* @global_var_ce5c.71 to i32), i32* %v2_a66c, align 4
  %v3_a670 = load i32, i32* @r5, align 4
  %v4_a670 = add i32 %v3_a670, 4
  %v5_a670 = inttoptr i32 %v4_a670 to i8*
  store i8 9, i8* %v5_a670, align 1
  %v0_a674 = load i32, i32* %r1.global-to-local, align 4
  %v1_a674 = add i32 %v0_a674, 4
  store i32 %v1_a674, i32* %r1.global-to-local, align 4
  %v5_a678 = call i32 @function_141fc(i32 %v2_a668, i32 %v1_a674, i32 ptrtoint (i32* @global_var_ce5c.71 to i32), i32 9)
  %v2_a67c = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a67c = zext i8 %v2_a67c to i32
  store i32 %v3_a67c, i32* %r3.global-to-local, align 4
  store i32 %v5_a678, i32* %ip.global-to-local, align 4
  %v0_a684 = load i32, i32* @r5, align 4
  %v5_a684 = mul nuw nsw i32 %v3_a67c, 4
  %v6_a684 = add i32 %v5_a684, %v5_a678
  %v7_a684 = inttoptr i32 %v6_a684 to i32*
  store i32 %v0_a684, i32* %v7_a684, align 4
  %v0_a688 = load i32, i32* %r3.global-to-local, align 4
  %v1_a688 = load i32, i32* @r7, align 4
  %v2_a688 = add i32 %v1_a688, %v0_a688
  store i32 %v2_a688, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a694 = load i32, i32* %ip.global-to-local, align 4
  %v1_a694 = load i32, i32* @r6, align 4
  %v2_a694 = inttoptr i32 %v1_a694 to i32*
  store i32 %v0_a694, i32* %v2_a694, align 4
  %v0_a698 = load i32, i32* %r2.global-to-local, align 4
  %v1_a698 = trunc i32 %v0_a698 to i8
  %v2_a698 = load i32, i32* @r4, align 4
  %v3_a698 = inttoptr i32 %v2_a698 to i8*
  store i8 %v1_a698, i8* %v3_a698, align 1
  %v2_a69c = call i32 @function_140b4(i32 %v1_a688, i32 8)
  %v2_a6a0 = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a6a0 = zext i8 %v2_a6a0 to i32
  store i32 ptrtoint (i32* @global_var_c718.73 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a69c, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_a6b0 = mul nuw nsw i32 %v3_a6a0, 4
  store i32 %v3_a6b0, i32* %r1.global-to-local, align 4
  %v2_a6b4 = load i32, i32* @global_var_1ea44.56, align 4
  %v2_a6b8 = inttoptr i32 %v2_a69c to i32*
  store i32 ptrtoint (i32* @global_var_c718.73 to i32), i32* %v2_a6b8, align 4
  %v3_a6bc = load i32, i32* @r5, align 4
  %v4_a6bc = add i32 %v3_a6bc, 4
  %v5_a6bc = inttoptr i32 %v4_a6bc to i8*
  store i8 3, i8* %v5_a6bc, align 1
  %v0_a6c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a6c0 = add i32 %v0_a6c0, 4
  store i32 %v1_a6c0, i32* %r1.global-to-local, align 4
  %v5_a6c4 = call i32 @function_141fc(i32 %v2_a6b4, i32 %v1_a6c0, i32 ptrtoint (i32* @global_var_c718.73 to i32), i32 3)
  %v2_a6c8 = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a6c8 = zext i8 %v2_a6c8 to i32
  store i32 %v3_a6c8, i32* %r3.global-to-local, align 4
  store i32 %v5_a6c4, i32* %ip.global-to-local, align 4
  %v0_a6d0 = load i32, i32* @r5, align 4
  %v5_a6d0 = mul nuw nsw i32 %v3_a6c8, 4
  %v6_a6d0 = add i32 %v5_a6d0, %v5_a6c4
  %v7_a6d0 = inttoptr i32 %v6_a6d0 to i32*
  store i32 %v0_a6d0, i32* %v7_a6d0, align 4
  %v0_a6d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a6d4 = load i32, i32* @r7, align 4
  %v2_a6d4 = add i32 %v1_a6d4, %v0_a6d4
  store i32 %v2_a6d4, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a6e0 = load i32, i32* %ip.global-to-local, align 4
  %v1_a6e0 = load i32, i32* @r6, align 4
  %v2_a6e0 = inttoptr i32 %v1_a6e0 to i32*
  store i32 %v0_a6e0, i32* %v2_a6e0, align 4
  %v0_a6e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a6e4 = trunc i32 %v0_a6e4 to i8
  %v2_a6e4 = load i32, i32* @r4, align 4
  %v3_a6e4 = inttoptr i32 %v2_a6e4 to i8*
  store i8 %v1_a6e4, i8* %v3_a6e4, align 1
  %v2_a6e8 = call i32 @function_140b4(i32 %v1_a6d4, i32 8)
  %v2_a6ec = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a6ec = zext i8 %v2_a6ec to i32
  store i32 ptrtoint (i32* @global_var_bfa4.75 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a6e8, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_a6fc = mul nuw nsw i32 %v3_a6ec, 4
  store i32 %v3_a6fc, i32* %r1.global-to-local, align 4
  %v2_a700 = load i32, i32* @global_var_1ea44.56, align 4
  %v2_a704 = inttoptr i32 %v2_a6e8 to i32*
  store i32 ptrtoint (i32* @global_var_bfa4.75 to i32), i32* %v2_a704, align 4
  %v3_a708 = load i32, i32* @r5, align 4
  %v4_a708 = add i32 %v3_a708, 4
  %v5_a708 = inttoptr i32 %v4_a708 to i8*
  store i8 4, i8* %v5_a708, align 1
  %v0_a70c = load i32, i32* %r1.global-to-local, align 4
  %v1_a70c = add i32 %v0_a70c, 4
  store i32 %v1_a70c, i32* %r1.global-to-local, align 4
  %v5_a710 = call i32 @function_141fc(i32 %v2_a700, i32 %v1_a70c, i32 ptrtoint (i32* @global_var_bfa4.75 to i32), i32 4)
  %v2_a714 = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a714 = zext i8 %v2_a714 to i32
  store i32 %v3_a714, i32* %r3.global-to-local, align 4
  store i32 %v5_a710, i32* %ip.global-to-local, align 4
  %v0_a71c = load i32, i32* @r5, align 4
  %v5_a71c = mul nuw nsw i32 %v3_a714, 4
  %v6_a71c = add i32 %v5_a71c, %v5_a710
  %v7_a71c = inttoptr i32 %v6_a71c to i32*
  store i32 %v0_a71c, i32* %v7_a71c, align 4
  %v0_a720 = load i32, i32* %r3.global-to-local, align 4
  %v1_a720 = load i32, i32* @r7, align 4
  %v2_a720 = add i32 %v1_a720, %v0_a720
  store i32 %v2_a720, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a72c = load i32, i32* %ip.global-to-local, align 4
  %v1_a72c = load i32, i32* @r6, align 4
  %v2_a72c = inttoptr i32 %v1_a72c to i32*
  store i32 %v0_a72c, i32* %v2_a72c, align 4
  %v0_a730 = load i32, i32* %r2.global-to-local, align 4
  %v1_a730 = trunc i32 %v0_a730 to i8
  %v2_a730 = load i32, i32* @r4, align 4
  %v3_a730 = inttoptr i32 %v2_a730 to i8*
  store i8 %v1_a730, i8* %v3_a730, align 1
  %v2_a734 = call i32 @function_140b4(i32 %v1_a720, i32 8)
  %v2_a738 = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a738 = zext i8 %v2_a738 to i32
  store i32 ptrtoint (i32* @global_var_b728.77 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a734, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_a748 = mul nuw nsw i32 %v3_a738, 4
  store i32 %v3_a748, i32* %r1.global-to-local, align 4
  %v2_a74c = load i32, i32* @global_var_1ea44.56, align 4
  %v2_a750 = inttoptr i32 %v2_a734 to i32*
  store i32 ptrtoint (i32* @global_var_b728.77 to i32), i32* %v2_a750, align 4
  %v3_a754 = load i32, i32* @r5, align 4
  %v4_a754 = add i32 %v3_a754, 4
  %v5_a754 = inttoptr i32 %v4_a754 to i8*
  store i8 5, i8* %v5_a754, align 1
  %v0_a758 = load i32, i32* %r1.global-to-local, align 4
  %v1_a758 = add i32 %v0_a758, 4
  store i32 %v1_a758, i32* %r1.global-to-local, align 4
  %v5_a75c = call i32 @function_141fc(i32 %v2_a74c, i32 %v1_a758, i32 ptrtoint (i32* @global_var_b728.77 to i32), i32 5)
  %v2_a760 = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a760 = zext i8 %v2_a760 to i32
  store i32 %v3_a760, i32* %r3.global-to-local, align 4
  store i32 %v5_a75c, i32* %ip.global-to-local, align 4
  %v0_a768 = load i32, i32* @r5, align 4
  %v5_a768 = mul nuw nsw i32 %v3_a760, 4
  %v6_a768 = add i32 %v5_a768, %v5_a75c
  %v7_a768 = inttoptr i32 %v6_a768 to i32*
  store i32 %v0_a768, i32* %v7_a768, align 4
  %v0_a76c = load i32, i32* %r3.global-to-local, align 4
  %v1_a76c = load i32, i32* @r7, align 4
  %v2_a76c = add i32 %v1_a76c, %v0_a76c
  store i32 %v2_a76c, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a778 = load i32, i32* %ip.global-to-local, align 4
  %v1_a778 = load i32, i32* @r6, align 4
  %v2_a778 = inttoptr i32 %v1_a778 to i32*
  store i32 %v0_a778, i32* %v2_a778, align 4
  %v0_a77c = load i32, i32* %r2.global-to-local, align 4
  %v1_a77c = trunc i32 %v0_a77c to i8
  %v2_a77c = load i32, i32* @r4, align 4
  %v3_a77c = inttoptr i32 %v2_a77c to i8*
  store i8 %v1_a77c, i8* %v3_a77c, align 1
  %v2_a780 = call i32 @function_140b4(i32 %v1_a76c, i32 8)
  %v2_a784 = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a784 = zext i8 %v2_a784 to i32
  store i32 ptrtoint (i32* @global_var_b00c.79 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a780, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_a794 = mul nuw nsw i32 %v3_a784, 4
  store i32 %v3_a794, i32* %r1.global-to-local, align 4
  %v2_a798 = load i32, i32* @global_var_1ea44.56, align 4
  %v2_a79c = inttoptr i32 %v2_a780 to i32*
  store i32 ptrtoint (i32* @global_var_b00c.79 to i32), i32* %v2_a79c, align 4
  %v3_a7a0 = load i32, i32* @r5, align 4
  %v4_a7a0 = add i32 %v3_a7a0, 4
  %v5_a7a0 = inttoptr i32 %v4_a7a0 to i8*
  store i8 6, i8* %v5_a7a0, align 1
  %v0_a7a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a7a4 = add i32 %v0_a7a4, 4
  store i32 %v1_a7a4, i32* %r1.global-to-local, align 4
  %v5_a7a8 = call i32 @function_141fc(i32 %v2_a798, i32 %v1_a7a4, i32 ptrtoint (i32* @global_var_b00c.79 to i32), i32 6)
  %v2_a7ac = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a7ac = zext i8 %v2_a7ac to i32
  store i32 %v3_a7ac, i32* %r3.global-to-local, align 4
  store i32 %v5_a7a8, i32* %ip.global-to-local, align 4
  %v0_a7b4 = load i32, i32* @r5, align 4
  %v5_a7b4 = mul nuw nsw i32 %v3_a7ac, 4
  %v6_a7b4 = add i32 %v5_a7b4, %v5_a7a8
  %v7_a7b4 = inttoptr i32 %v6_a7b4 to i32*
  store i32 %v0_a7b4, i32* %v7_a7b4, align 4
  %v0_a7b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a7b8 = load i32, i32* @r7, align 4
  %v2_a7b8 = add i32 %v1_a7b8, %v0_a7b8
  store i32 %v2_a7b8, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_a7c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a7c4 = load i32, i32* @r6, align 4
  %v2_a7c4 = inttoptr i32 %v1_a7c4 to i32*
  store i32 %v0_a7c4, i32* %v2_a7c4, align 4
  %v0_a7c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a7c8 = trunc i32 %v0_a7c8 to i8
  %v2_a7c8 = load i32, i32* @r4, align 4
  %v3_a7c8 = inttoptr i32 %v2_a7c8 to i8*
  store i8 %v1_a7c8, i8* %v3_a7c8, align 1
  %v2_a7cc = call i32 @function_140b4(i32 %v1_a7b8, i32 8)
  %v2_a7d0 = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a7d0 = zext i8 %v2_a7d0 to i32
  store i32 ptrtoint (i32* @global_var_a890.81 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a7cc, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_a7e0 = mul nuw nsw i32 %v3_a7d0, 4
  store i32 %v3_a7e0, i32* %r1.global-to-local, align 4
  %v2_a7e4 = load i32, i32* @global_var_1ea44.56, align 4
  %v2_a7e8 = inttoptr i32 %v2_a7cc to i32*
  store i32 ptrtoint (i32* @global_var_a890.81 to i32), i32* %v2_a7e8, align 4
  %v3_a7ec = load i32, i32* @r5, align 4
  %v4_a7ec = add i32 %v3_a7ec, 4
  %v5_a7ec = inttoptr i32 %v4_a7ec to i8*
  store i8 7, i8* %v5_a7ec, align 1
  %v0_a7f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_a7f0 = add i32 %v0_a7f0, 4
  store i32 %v1_a7f0, i32* %r1.global-to-local, align 4
  %v5_a7f4 = call i32 @function_141fc(i32 %v2_a7e4, i32 %v1_a7f0, i32 ptrtoint (i32* @global_var_a890.81 to i32), i32 7)
  %v2_a7f8 = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a7f8 = zext i8 %v2_a7f8 to i32
  store i32 %v3_a7f8, i32* %r3.global-to-local, align 4
  store i32 %v5_a7f4, i32* %ip.global-to-local, align 4
  %v0_a800 = load i32, i32* @r5, align 4
  %v5_a800 = mul nuw nsw i32 %v3_a7f8, 4
  %v6_a800 = add i32 %v5_a800, %v5_a7f4
  %v7_a800 = inttoptr i32 %v6_a800 to i32*
  store i32 %v0_a800, i32* %v7_a800, align 4
  %v0_a804 = load i32, i32* %r3.global-to-local, align 4
  %v1_a804 = load i32, i32* @r7, align 4
  %v2_a804 = add i32 %v1_a804, %v0_a804
  store i32 %v2_a804, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v1_a810 = trunc i32 %v2_a804 to i8
  %v2_a810 = load i32, i32* @r4, align 4
  %v3_a810 = inttoptr i32 %v2_a810 to i8*
  store i8 %v1_a810, i8* %v3_a810, align 1
  %v0_a814 = load i32, i32* %ip.global-to-local, align 4
  %v1_a814 = load i32, i32* @r6, align 4
  %v2_a814 = inttoptr i32 %v1_a814 to i32*
  store i32 %v0_a814, i32* %v2_a814, align 4
  %v2_a818 = call i32 @function_140b4(i32 %v1_a804, i32 8)
  %v2_a81c = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a81c = zext i8 %v2_a81c to i32
  store i32 ptrtoint (i32* @global_var_81cc.83 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_a818, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_a82c = mul nuw nsw i32 %v3_a81c, 4
  store i32 %v3_a82c, i32* %r1.global-to-local, align 4
  %v2_a830 = load i32, i32* @global_var_1ea44.56, align 4
  %v2_a834 = inttoptr i32 %v2_a818 to i32*
  store i32 ptrtoint (i32* @global_var_81cc.83 to i32), i32* %v2_a834, align 4
  %v3_a838 = load i32, i32* @r5, align 4
  %v4_a838 = add i32 %v3_a838, 4
  %v5_a838 = inttoptr i32 %v4_a838 to i8*
  store i8 10, i8* %v5_a838, align 1
  %v0_a83c = load i32, i32* %r1.global-to-local, align 4
  %v1_a83c = add i32 %v0_a83c, 4
  store i32 %v1_a83c, i32* %r1.global-to-local, align 4
  %v5_a840 = call i32 @function_141fc(i32 %v2_a830, i32 %v1_a83c, i32 ptrtoint (i32* @global_var_81cc.83 to i32), i32 10)
  %v2_a844 = load i8, i8* bitcast (i8** @global_var_1ea40.54 to i8*), align 4
  %v3_a844 = zext i8 %v2_a844 to i32
  store i32 %v3_a844, i32* %r3.global-to-local, align 4
  %v1_a848 = load i32, i32* @r6, align 4
  %v2_a848 = inttoptr i32 %v1_a848 to i32*
  store i32 %v5_a840, i32* %v2_a848, align 4
  %v0_a84c = load i32, i32* @r5, align 4
  %v2_a84c = load i32, i32* %r3.global-to-local, align 4
  %v5_a84c = mul i32 %v2_a84c, 4
  %v6_a84c = add i32 %v5_a84c, %v5_a840
  %v7_a84c = inttoptr i32 %v6_a84c to i32*
  store i32 %v0_a84c, i32* %v7_a84c, align 4
  %v0_a850 = load i32, i32* %r3.global-to-local, align 4
  %v1_a850 = load i32, i32* @r7, align 4
  %v2_a850 = add i32 %v1_a850, %v0_a850
  store i32 %v2_a850, i32* %r2.global-to-local, align 4
  %v1_a858 = trunc i32 %v2_a850 to i8
  %v2_a858 = load i32, i32* @r4, align 4
  %v3_a858 = inttoptr i32 %v2_a858 to i8*
  store i8 %v1_a858, i8* %v3_a858, align 1
  %v2_a85c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_a85c, i32* @r4, align 4
  store i32 %v6_a558, i32* @r5, align 4
  store i32 %v9_a558, i32* @r6, align 4
  store i32 %v12_a558, i32* @r7, align 4
  ret i32 %v1_a850

; uselistorder directives
  uselistorder i32 %v1_a850, { 1, 0 }
  uselistorder i32 %v1_a804, { 1, 0 }
  uselistorder i32 %v1_a7b8, { 1, 0 }
  uselistorder i32 %v1_a76c, { 1, 0 }
  uselistorder i32 %v1_a720, { 1, 0 }
  uselistorder i32 %v1_a6d4, { 1, 0 }
  uselistorder i32 %v1_a688, { 1, 0 }
  uselistorder i32 %v1_a63c, { 1, 0 }
  uselistorder i32 %v1_a5f0, { 1, 0 }
  uselistorder i8 7, { 4, 5, 6, 7, 0, 1, 2, 3 }
  uselistorder i32* @global_var_1ea44.56, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i8* bitcast (i8** @global_var_1ea40.54 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_a890(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a890:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a890 = load i32, i32* @r4, align 4
  %v15_a890 = load i32, i32* @r8, align 4
  %v21_a890 = load i32, i32* @sl, align 4
  %v1_a894 = urem i32 %arg1, 256
  store i32 %v1_a894, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_a894, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a8ac = urem i32 %arg3, 256
  store i32 %v1_a8ac, i32* @r4, align 4
  %v2_a8b0 = call i32 @function_140b4(i32 %v1_a894, i32 4)
  %v0_a8b4 = load i32, i32* @r5, align 4
  store i32 %v0_a8b4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a8c4 = load i32, i32* @r4, align 4
  store i32 %v0_a8c4, i32* %r0.global-to-local, align 4
  %v5_a8c8 = inttoptr i32 %v0_a8b4 to i32*
  %v6_a8c8 = call i32 @function_a4e8(i32 %v0_a8c4, i32* %v5_a8c8, i32 2, i32 0)
  %v1_a8d4 = urem i32 %v6_a8c8, 256
  store i32 %v1_a8d4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a8e0 = load i32, i32* @r5, align 4
  store i32 %v0_a8e0, i32* %r1.global-to-local, align 4
  %v0_a8e4 = load i32, i32* @r4, align 4
  store i32 %v0_a8e4, i32* %r0.global-to-local, align 4
  %v5_a8e8 = trunc i32 %v6_a8c8 to i8
  %v6_a8ec = inttoptr i32 %v0_a8e0 to i32*
  %v7_a8ec = call i32 @function_a4e8(i32 %v0_a8e4, i32* %v6_a8ec, i32 3, i32 65535)
  %v0_a8f0 = load i32, i32* @r5, align 4
  store i32 %v0_a8f0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a8ec, i32* @r7, align 4
  %v0_a900 = load i32, i32* @r4, align 4
  store i32 %v0_a900, i32* %r0.global-to-local, align 4
  %v4_a904 = inttoptr i32 %v0_a8f0 to i32*
  %v5_a904 = call i32 @function_a4e8(i32 %v0_a900, i32* %v4_a904, i32 4, i32 64)
  %v1_a90c = urem i32 %v5_a904, 256
  store i32 %v1_a90c, i32* %ip.global-to-local, align 4
  %v0_a910 = load i32, i32* @r5, align 4
  store i32 %v0_a910, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a91c = load i32, i32* @r4, align 4
  store i32 %v0_a91c, i32* %r0.global-to-local, align 4
  %v5_a920 = trunc i32 %v5_a904 to i8
  %v6_a924 = inttoptr i32 %v0_a910 to i32*
  %v7_a924 = call i32 @function_a4e8(i32 %v0_a91c, i32* %v6_a924, i32 5, i32 1)
  %v1_a930 = urem i32 %v7_a924, 256
  store i32 %v1_a930, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a93c = load i32, i32* @r5, align 4
  store i32 %v0_a93c, i32* %r1.global-to-local, align 4
  %v0_a940 = load i32, i32* @r4, align 4
  store i32 %v0_a940, i32* %r0.global-to-local, align 4
  %v5_a948 = inttoptr i32 %v0_a93c to i32*
  %v6_a948 = call i32 @function_a4e8(i32 %v0_a940, i32* %v5_a948, i32 6, i32 65535)
  %v0_a950 = load i32, i32* @r5, align 4
  store i32 %v0_a950, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a948, i32* @sl, align 4
  %v0_a960 = load i32, i32* @r4, align 4
  store i32 %v0_a960, i32* %r0.global-to-local, align 4
  %v4_a964 = inttoptr i32 %v0_a950 to i32*
  %v5_a964 = call i32 @function_a4e8(i32 %v0_a960, i32* %v4_a964, i32 7, i32 65535)
  %v0_a968 = load i32, i32* @r5, align 4
  store i32 %v0_a968, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_a964, i32* @r8, align 4
  %v0_a978 = load i32, i32* @r4, align 4
  store i32 %v0_a978, i32* %r0.global-to-local, align 4
  %v4_a97c = inttoptr i32 %v0_a968 to i32*
  %v5_a97c = call i32 @function_a4e8(i32 %v0_a978, i32* %v4_a97c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a98c = load i32, i32* @r5, align 4
  store i32 %v0_a98c, i32* %r1.global-to-local, align 4
  %v0_a990 = load i32, i32* @r4, align 4
  store i32 %v0_a990, i32* %r0.global-to-local, align 4
  %v4_a994 = inttoptr i32 %v0_a98c to i32*
  %v5_a994 = call i32 @function_a4e8(i32 %v0_a990, i32* %v4_a994, i32 1, i32 1)
  %v1_a99c = urem i32 %v5_a994, 256
  store i32 %v1_a99c, i32* %ip.global-to-local, align 4
  %v0_a9a0 = load i32, i32* @r5, align 4
  store i32 %v0_a9a0, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a9ac = load i32, i32* @r4, align 4
  store i32 %v0_a9ac, i32* %r0.global-to-local, align 4
  %v5_a9b4 = inttoptr i32 %v0_a9a0 to i32*
  %v6_a9b4 = call i32 @function_a4e8(i32 %v0_a9ac, i32* %v5_a9b4, i32 19, i32 0)
  %v0_a9bc = load i32, i32* @r5, align 4
  store i32 %v0_a9bc, i32* %r1.global-to-local, align 4
  %v2_a9c0 = load i32, i32* @global_var_1eafc.85, align 4
  store i32 %v2_a9c0, i32* %r3.global-to-local, align 4
  store i32 %v6_a9b4, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_a9cc = load i32, i32* @r4, align 4
  store i32 %v0_a9cc, i32* %r0.global-to-local, align 4
  %v4_a9d0 = inttoptr i32 %v0_a9bc to i32*
  %v5_a9d0 = call i32 @function_a4e8(i32 %v0_a9cc, i32* %v4_a9d0, i32 25, i32 %v2_a9c0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a9e4 = call i32 @function_13db0(i32 2, i32 3, i32 6)
  store i32 %v3_a9e4, i32* %r0.global-to-local, align 4
  %v7_a9e8 = icmp eq i32 %v3_a9e4, -1
  store i1 %v7_a9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a9e8, label %dec_label_pc_aecc, label %dec_label_pc_a9f4

dec_label_pc_a9f4:                                ; preds = %dec_label_pc_a890
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a9fc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a9fc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_aa10 = call i32 @function_13d80(i32 %v3_a9e4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_aa10, i32* %r0.global-to-local, align 4
  %v7_aa14 = icmp eq i32 %v6_aa10, -1
  store i1 %v7_aa14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_aa14, label %dec_label_pc_aec4, label %dec_label_pc_aa1c

dec_label_pc_aa1c:                                ; preds = %dec_label_pc_a9f4
  %v0_aa1c = load i32, i32* @sl, align 4
  %v3_aa1c = mul i32 %v0_aa1c, 65536
  store i32 %v3_aa1c, i32* %sl.global-to-local, align 4
  %v0_aa20 = load i32, i32* @r8, align 4
  %v3_aa20 = mul i32 %v0_aa20, 65536
  store i32 %v3_aa20, i32* %r8.global-to-local, align 4
  %v0_aa28 = load i32, i32* @r7, align 4
  %v3_aa28 = mul i32 %v0_aa28, 65536
  %v0_aa2c = load i32, i32* @r6, align 4
  %v1_aa2c = urem i32 %v0_aa2c, 256
  store i32 0, i32* %stack_var_-40, align 4
  %v3_aa34 = urem i32 %v0_aa28, 65536
  store i32 %v3_aa34, i32* %r2.global-to-local, align 4
  %v3_aa38 = urem i32 %v0_aa1c, 65536
  store i32 %v3_aa38, i32* %r3.global-to-local, align 4
  %v3_aa3c = urem i32 %v0_aa20, 65536
  store i32 %v3_aa3c, i32* %r1.global-to-local, align 4
  %v0_aa40 = load i32, i32* @fp, align 4
  %v2_aa40 = icmp eq i32 %v0_aa40, 0
  store i1 %v2_aa40, i1* %cpsr_z.global-to-local, align 1
  %tmp85 = icmp slt i32 %v0_aa40, 1
  br i1 %tmp85, label %dec_label_pc_afec, label %dec_label_pc_aa60

dec_label_pc_aa60:                                ; preds = %dec_label_pc_aa1c
  %v3_aa64 = mul i32 %v5_a97c, 65536
  %v0_aa28.not = or i32 %v0_aa28, -65536
  %v1_aa6c = xor i32 %v0_aa28.not, 65535
  %v1_aa74 = add i32 %v3_aa64, 4325376
  %v1_aa78 = urem i32 %v0_aa1c, 256
  %v3_aa80 = udiv i32 %v1_aa74, 256
  %v1_aa84 = add i32 %v3_aa64, 524288
  %v1_aa8c = add i32 %v3_aa64, 1835008
  %v1_aa90 = urem i32 %v0_aa20, 256
  %v1_aa94 = and i32 %v3_aa80, 65280
  store i32 %v1_aa94, i32* %r0.global-to-local, align 4
  %v3_aa9c = udiv i32 %v1_aa8c, 256
  %tmp86 = mul nsw i32 %v1_aa6c, 256
  %v1_aab4 = and i32 %v3_aa9c, 65280
  store i32 %v1_aab4, i32* %ip.global-to-local, align 4
  %v1_aab8 = and i32 %tmp86, 65280
  store i32 %v1_aab8, i32* @lr, align 4
  %tmp88 = udiv i32 %v1_aa6c, 256
  %v4_aaa4 = sdiv i32 %v1_aa74, 16777216
  %v5_aad4 = trunc i32 %tmp88 to i8
  %v3_aae0 = mul nuw nsw i32 %v1_aa78, 256
  %v3_aae8 = ashr i32 %v1_aa74, 31
  %v3_aaec = mul nuw nsw i32 %v1_aa90, 256
  store i32 %v3_aaec, i32* @r5, align 4
  %tmp89 = udiv i32 %v0_aa1c, 256
  %v4_aaf0 = urem i32 %tmp89, 256
  %v5_aaf0 = or i32 %v4_aaf0, %v3_aae0
  store i32 %v5_aaf0, i32* @r7, align 4
  %v3_aaf4 = udiv i32 %v1_aa84, 256
  %tmp90 = udiv i32 %v0_aa20, 256
  %v4_aaf8 = urem i32 %tmp90, 256
  %v5_aaf8 = or i32 %v4_aaf8, %v3_aaec
  store i32 %v5_aaf8, i32* %sl.global-to-local, align 4
  %v3_ab04 = sdiv i32 %v3_aa28, 16777216
  %v7_ab04 = sdiv i32 %v1_aa8c, 16777216
  %v1_ab08 = and i32 %v3_aaf4, 65280
  store i32 %v1_ab08, i32* @r6, align 4
  %v3_ab0c = ashr i32 %v3_aa28, 31
  %v3_ab10 = ashr i32 %v1_aa8c, 31
  %v3_ab14 = udiv i32 %v1_aa6c, 65536
  %v4_ab18 = udiv i32 %v1_aa84, 16777216
  %v5_ab18 = or i32 %v4_ab18, %v1_ab08
  store i32 %v5_ab18, i32* %r8.global-to-local, align 4
  store i32 %v1_aa78, i32* %r1.global-to-local, align 4
  store i32 %v1_aa90, i32* %r2.global-to-local, align 4
  %v3_ab3037 = udiv i32 %v1_ab08, 256
  store i32 %v3_ab3037, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ab90 = sext i8 %v5_a920 to i32
  %v2_ac90 = icmp eq i32 %v1_aa2c, 0
  %sext17 = mul i32 %v0_aa1c, 16777216
  %v4_aca4 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v1_aa84, 256
  %v4_acb8 = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v0_aa20, 16777216
  %v4_acc0 = sdiv i32 %sext19, 16777216
  %v1_aba4 = trunc i32 %v3_aae8 to i8
  %v1_acc8 = trunc i32 %v4_acb8 to i8
  br label %dec_label_pc_ab44

dec_label_pc_ab44:                                ; preds = %bb97, %dec_label_pc_aa60
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ab50 = call i32 @function_140b4(i32 1510, i32 4)
  store i32 %v2_ab50, i32* %r0.global-to-local, align 4
  store i32 %v2_a8b0, i32* %r1.global-to-local, align 4
  %v3_ab58 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ab58, i32* %r3.global-to-local, align 4
  %v2_ab5c = load i32, i32* @r4, align 4
  %v5_ab5c = mul i32 %v2_ab5c, 4
  %v6_ab5c = add i32 %v5_ab5c, %v2_a8b0
  %v7_ab5c = inttoptr i32 %v6_ab5c to i32*
  store i32 %v2_ab50, i32* %v7_ab5c, align 4
  %v0_ab60 = load i32, i32* %r1.global-to-local, align 4
  %v1_ab60 = load i32, i32* %r3.global-to-local, align 4
  %v4_ab60 = mul i32 %v1_ab60, 4
  %v5_ab60 = add i32 %v4_ab60, %v0_ab60
  %v6_ab60 = inttoptr i32 %v5_ab60 to i32*
  %v7_ab60 = load i32, i32* %v6_ab60, align 4
  store i32 %v7_ab60, i32* %r4.global-to-local, align 4
  %v1_ab64 = inttoptr i32 %v7_ab60 to i8*
  %v2_ab64 = load i8, i8* %v1_ab64, align 1
  %tmp = urem i8 %v2_ab64, 16
  %v1_ab68 = zext i8 %tmp to i32
  %v1_ab6c = or i32 %v1_ab68, 64
  store i32 %v1_ab6c, i32* %r2.global-to-local, align 4
  %v1_ab70 = trunc i32 %v1_ab6c to i8
  store i8 %v1_ab70, i8* %v1_ab64, align 1
  %v0_ab74 = load i32, i32* %r4.global-to-local, align 4
  %v1_ab74 = inttoptr i32 %v0_ab74 to i8*
  %v2_ab74 = load i8, i8* %v1_ab74, align 1
  %v1_ab78 = and i8 %v2_ab74, -16
  %v1_ab7c = or i8 %v1_ab78, 5
  store i32 %v1_a930, i32* %r2.global-to-local, align 4
  store i8 %v1_ab7c, i8* %v1_ab74, align 1
  %v2_ab8c = load i32, i32* %r4.global-to-local, align 4
  %v3_ab8c = add i32 %v2_ab8c, 1
  %v4_ab8c = inttoptr i32 %v3_ab8c to i8*
  store i8 %v5_a8e8, i8* %v4_ab8c, align 1
  store i32 %v4_ab90, i32* %r1.global-to-local, align 4
  %v2_ab94 = load i32, i32* %r4.global-to-local, align 4
  %v3_ab94 = add i32 %v2_ab94, 8
  %v4_ab94 = inttoptr i32 %v3_ab94 to i8*
  store i8 %v5_a920, i8* %v4_ab94, align 1
  store i32 %v3_aae8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_aba0 = load i32, i32* %r2.global-to-local, align 4
  %v9_aba0 = icmp eq i32 %v0_aba0, 0
  store i1 %v9_aba0, i1* %cpsr_z.global-to-local, align 1
  %v2_aba4 = load i32, i32* %r4.global-to-local, align 4
  %v3_aba4 = add i32 %v2_aba4, 3
  %v4_aba4 = inttoptr i32 %v3_aba4 to i8*
  store i8 %v1_aba4, i8* %v4_aba4, align 1
  store i32 %v4_aaa4, i32* %r2.global-to-local, align 4
  %v0_abac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abac, label %.thread21, label %.thread

.thread:                                          ; preds = %dec_label_pc_ab44
  %v1_abac = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_abac, i32* %r3.global-to-local, align 4
  %v2_abb0 = trunc i32 %v1_abac to i8
  %v3_abb0 = load i32, i32* %r4.global-to-local, align 4
  %v4_abb0 = add i32 %v3_abb0, 7
  %v5_abb0 = inttoptr i32 %v4_abb0 to i8*
  store i8 %v2_abb0, i8* %v5_abb0, align 1
  %v0_abb4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_abb4.pr.pr, label %.thread21, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_abb8 = load i32, i32* %r4.global-to-local, align 4
  %v4_abb8 = add i32 %v3_abb8, 6
  %v5_abb8 = inttoptr i32 %v4_abb8 to i8*
  store i8 64, i8* %v5_abb8, align 1
  br label %.thread21

.thread21:                                        ; preds = %dec_label_pc_ab44, %.thread, %bb
  %v0_abbc = load i32, i32* %r2.global-to-local, align 4
  %v1_abbc = trunc i32 %v0_abbc to i8
  %v2_abbc = load i32, i32* %r4.global-to-local, align 4
  %v3_abbc = add i32 %v2_abbc, 2
  %v4_abbc = inttoptr i32 %v3_abbc to i8*
  store i8 %v1_abbc, i8* %v4_abbc, align 1
  store i32 %v3_ab0c, i32* %r2.global-to-local, align 4
  store i32 %v3_ab04, i32* %r1.global-to-local, align 4
  %v2_abcc = load i32, i32* %r4.global-to-local, align 4
  %v3_abcc = add i32 %v2_abcc, 9
  %v4_abcc = inttoptr i32 %v3_abcc to i8*
  store i8 47, i8* %v4_abcc, align 1
  %v0_abd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_abd0 = trunc i32 %v0_abd0 to i8
  %v2_abd0 = load i32, i32* %r4.global-to-local, align 4
  %v3_abd0 = add i32 %v2_abd0, 5
  %v4_abd0 = inttoptr i32 %v3_abd0 to i8*
  store i8 %v1_abd0, i8* %v4_abd0, align 1
  %v3_abd4 = load i32, i32* %stack_var_-40, align 4
  %v5_abdc = mul i32 %v3_abd4, 24
  store i32 %v5_abdc, i32* %r3.global-to-local, align 4
  store i32 %v5_a9d0, i32* %r2.global-to-local, align 4
  %v1_abe4 = load i32, i32* %r4.global-to-local, align 4
  %v2_abe4 = add i32 %v1_abe4, 12
  %v3_abe4 = inttoptr i32 %v2_abe4 to i32*
  store i32 %v5_a9d0, i32* %v3_abe4, align 4
  %v0_abe8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abe8 = load i32, i32* @sb, align 4
  %v2_abe8 = add i32 %v1_abe8, %v0_abe8
  store i32 %v2_abe8, i32* %r3.global-to-local, align 4
  %v1_abec = add i32 %v2_abe8, 16
  %v2_abec = inttoptr i32 %v1_abec to i32*
  %v3_abec = load i32, i32* %v2_abec, align 4
  store i32 %v3_abec, i32* %r2.global-to-local, align 4
  %v0_abf0 = load i32, i32* %r1.global-to-local, align 4
  %v1_abf0 = trunc i32 %v0_abf0 to i8
  %v2_abf0 = load i32, i32* %r4.global-to-local, align 4
  %v3_abf0 = add i32 %v2_abf0, 4
  %v4_abf0 = inttoptr i32 %v3_abf0 to i8*
  store i8 %v1_abf0, i8* %v4_abf0, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_abf8 = load i32, i32* %r4.global-to-local, align 4
  %v1_abf8 = add i32 %v0_abf8, 20
  store i32 %v1_abf8, i32* %r1.global-to-local, align 4
  %v3_abfc = add i32 %v0_abf8, 22
  %v4_abfc = inttoptr i32 %v3_abfc to i8*
  store i8 101, i8* %v4_abfc, align 1
  %v0_ac00 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac00 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac00 = add i32 %v1_ac00, 16
  %v3_ac00 = inttoptr i32 %v2_ac00 to i32*
  store i32 %v0_ac00, i32* %v3_ac00, align 4
  %v0_ac04 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac04 = add i32 %v0_ac04, 24
  store i32 %v1_ac04, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_ac0c = load i32, i32* %r3.global-to-local, align 4
  %v1_ac0c = add i32 %v0_ac0c, -93
  store i32 %v1_ac0c, i32* %r3.global-to-local, align 4
  %v2_ac10 = load i32, i32* %r1.global-to-local, align 4
  %v3_ac10 = add i32 %v2_ac10, 3
  %v4_ac10 = inttoptr i32 %v3_ac10 to i8*
  store i8 88, i8* %v4_ac10, align 1
  %v0_ac14 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac14 = trunc i32 %v0_ac14 to i8
  %v2_ac14 = load i32, i32* %r0.global-to-local, align 4
  %v3_ac14 = add i32 %v2_ac14, 12
  %v4_ac14 = inttoptr i32 %v3_ac14 to i8*
  store i8 %v1_ac14, i8* %v4_ac14, align 1
  %v0_ac18 = load i32, i32* %ip.global-to-local, align 4
  %v1_ac18 = trunc i32 %v0_ac18 to i8
  %v2_ac18 = load i32, i32* %r0.global-to-local, align 4
  %v3_ac18 = add i32 %v2_ac18, 13
  %v4_ac18 = inttoptr i32 %v3_ac18 to i8*
  store i8 %v1_ac18, i8* %v4_ac18, align 1
  %v0_ac1c = load i32, i32* %r4.global-to-local, align 4
  %v1_ac1c = add i32 %v0_ac1c, 38
  %v2_ac1c = inttoptr i32 %v1_ac1c to i8*
  %v3_ac1c = load i8, i8* %v2_ac1c, align 1
  %tmp102 = urem i8 %v3_ac1c, 16
  %v1_ac20 = zext i8 %tmp102 to i32
  %v1_ac24 = or i32 %v1_ac20, 64
  store i32 %v1_ac24, i32* %r3.global-to-local, align 4
  %v1_ac28 = trunc i32 %v1_ac24 to i8
  store i8 %v1_ac28, i8* %v2_ac1c, align 1
  %v0_ac2c = load i32, i32* %r4.global-to-local, align 4
  %v1_ac2c = add i32 %v0_ac2c, 38
  %v2_ac2c = inttoptr i32 %v1_ac2c to i8*
  %v3_ac2c = load i8, i8* %v2_ac2c, align 1
  %v1_ac30 = and i8 %v3_ac2c, -16
  %v1_ac34 = or i8 %v1_ac30, 5
  store i8 %v1_ac34, i8* %v2_ac2c, align 1
  %v0_ac40 = load i32, i32* %r4.global-to-local, align 4
  %v1_ac40 = add i32 %v0_ac40, 38
  store i32 %v1_ac40, i32* @r5, align 4
  %v3_ac44 = add i32 %v0_ac40, 39
  %v4_ac44 = inttoptr i32 %v3_ac44 to i8*
  store i8 %v5_a8e8, i8* %v4_ac44, align 1
  store i32 %v7_ab04, i32* %r1.global-to-local, align 4
  store i32 %tmp88, i32* %r3.global-to-local, align 4
  store i32 %v3_ab10, i32* %r2.global-to-local, align 4
  %v2_ac54 = load i32, i32* @r5, align 4
  %v3_ac54 = add i32 %v2_ac54, 4
  %v4_ac54 = inttoptr i32 %v3_ac54 to i8*
  store i8 %v5_aad4, i8* %v4_ac54, align 1
  %v0_ac58 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac58 = trunc i32 %v0_ac58 to i8
  %v2_ac58 = load i32, i32* @r5, align 4
  %v3_ac58 = add i32 %v2_ac58, 2
  %v4_ac58 = inttoptr i32 %v3_ac58 to i8*
  store i8 %v1_ac58, i8* %v4_ac58, align 1
  %v0_ac5c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac5c, label %bb92, label %bb91

bb91:                                             ; preds = %.thread21
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %.thread21, %bb91
  store i32 %v3_ab14, i32* %r1.global-to-local, align 4
  %v0_ac64 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac64 = trunc i32 %v0_ac64 to i8
  %v2_ac64 = load i32, i32* @r5, align 4
  %v3_ac64 = add i32 %v2_ac64, 3
  %v4_ac64 = inttoptr i32 %v3_ac64 to i8*
  store i8 %v1_ac64, i8* %v4_ac64, align 1
  store i32 %v4_ab90, i32* %r2.global-to-local, align 4
  %v0_ac6c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac6c, label %bb94, label %bb93

bb93:                                             ; preds = %bb92
  %v1_ac6c = load i32, i32* %r3.global-to-local, align 4
  %v2_ac6c = trunc i32 %v1_ac6c to i8
  %v3_ac6c = load i32, i32* @r5, align 4
  %v4_ac6c = add i32 %v3_ac6c, 6
  %v5_ac6c = inttoptr i32 %v4_ac6c to i8*
  store i8 %v2_ac6c, i8* %v5_ac6c, align 1
  br label %bb94

bb94:                                             ; preds = %bb92, %bb93
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_ac74 = load i32, i32* %r1.global-to-local, align 4
  %v1_ac74 = trunc i32 %v0_ac74 to i8
  %v2_ac74 = load i32, i32* @r5, align 4
  %v3_ac74 = add i32 %v2_ac74, 5
  %v4_ac74 = inttoptr i32 %v3_ac74 to i8*
  store i8 %v1_ac74, i8* %v4_ac74, align 1
  %v0_ac78 = load i32, i32* %r2.global-to-local, align 4
  %v1_ac78 = trunc i32 %v0_ac78 to i8
  %v2_ac78 = load i32, i32* @r5, align 4
  %v3_ac78 = add i32 %v2_ac78, 8
  %v4_ac78 = inttoptr i32 %v3_ac78 to i8*
  store i8 %v1_ac78, i8* %v4_ac78, align 1
  %v0_ac7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac7c, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_ac7c = load i32, i32* %ip.global-to-local, align 4
  %v2_ac7c = trunc i32 %v1_ac7c to i8
  %v3_ac7c = load i32, i32* @r5, align 4
  %v4_ac7c = add i32 %v3_ac7c, 7
  %v5_ac7c = inttoptr i32 %v4_ac7c to i8*
  store i8 %v2_ac7c, i8* %v5_ac7c, align 1
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_ac80 = load i32, i32* %r3.global-to-local, align 4
  %v1_ac80 = trunc i32 %v0_ac80 to i8
  %v2_ac80 = load i32, i32* @r5, align 4
  %v3_ac80 = add i32 %v2_ac80, 9
  %v4_ac80 = inttoptr i32 %v3_ac80 to i8*
  store i8 %v1_ac80, i8* %v4_ac80, align 1
  %v0_ac84 = call i32 @function_fc1c()
  store i32 %v0_ac84, i32* %r0.global-to-local, align 4
  store i32 %v1_aa2c, i32* %r1.global-to-local, align 4
  store i1 %v2_ac90, i1* %cpsr_z.global-to-local, align 1
  %v1_ac94 = sub i32 1023, %v0_ac84
  store i32 %v1_ac94, i32* %r3.global-to-local, align 4
  br i1 %v2_ac90, label %.thread22, label %.thread23

.thread22:                                        ; preds = %bb96
  %v2_ac9c = load i32, i32* @r5, align 4
  %v3_ac9c = add i32 %v2_ac9c, 16
  %v4_ac9c = inttoptr i32 %v3_ac9c to i32*
  store i32 %v1_ac94, i32* %v4_ac9c, align 4
  br label %bb97

.thread23:                                        ; preds = %bb96
  %v1_ac98 = load i32, i32* %r4.global-to-local, align 4
  %v2_ac98 = add i32 %v1_ac98, 16
  %v3_ac98 = inttoptr i32 %v2_ac98 to i32*
  %v4_ac98 = load i32, i32* %v3_ac98, align 4
  store i32 %v4_ac98, i32* %r3.global-to-local, align 4
  %v2_aca0 = load i32, i32* @r5, align 4
  %v3_aca0 = add i32 %v2_aca0, 16
  %v4_aca0 = inttoptr i32 %v3_aca0 to i32*
  store i32 %v4_ac98, i32* %v4_aca0, align 4
  br label %bb97

bb97:                                             ; preds = %.thread22, %.thread23
  store i32 %v4_aca4, i32* %r3.global-to-local, align 4
  %v0_aca8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aca8 = add i32 %v0_aca8, 58
  store i32 %v1_aca8, i32* @r6, align 4
  %v1_acac = load i32, i32* @r5, align 4
  %v2_acac = add i32 %v1_acac, 12
  %v3_acac = inttoptr i32 %v2_acac to i32*
  store i32 %v0_ac84, i32* %v3_acac, align 4
  %v0_acb0 = load i32, i32* %r3.global-to-local, align 4
  %v1_acb0 = trunc i32 %v0_acb0 to i8
  %v2_acb0 = load i32, i32* @r6, align 4
  %v3_acb0 = add i32 %v2_acb0, 1
  %v4_acb0 = inttoptr i32 %v3_acb0 to i8*
  store i8 %v1_acb0, i8* %v4_acb0, align 1
  %v3_acb4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_acb4, i32* %r3.global-to-local, align 4
  store i32 %v4_acb8, i32* %r2.global-to-local, align 4
  %v1_acbc = add i32 %v3_acb4, 1
  store i32 %v1_acbc, i32* @r4, align 4
  store i32 %v4_acc0, i32* %r1.global-to-local, align 4
  %v1_acc4 = load i32, i32* @fp, align 4
  %v9_acc4 = icmp eq i32 %v1_acbc, %v1_acc4
  store i1 %v9_acc4, i1* %cpsr_z.global-to-local, align 1
  %v2_acc8 = load i32, i32* @r6, align 4
  %v3_acc8 = add i32 %v2_acc8, 5
  %v4_acc8 = inttoptr i32 %v3_acc8 to i8*
  store i8 %v1_acc8, i8* %v4_acc8, align 1
  %v0_accc = load i32, i32* @r7, align 4
  %v1_accc = trunc i32 %v0_accc to i8
  %v2_accc = load i32, i32* @r6, align 4
  %v3_accc = inttoptr i32 %v2_accc to i8*
  store i8 %v1_accc, i8* %v3_accc, align 1
  %v0_acd0 = load i32, i32* %sl.global-to-local, align 4
  %v1_acd0 = trunc i32 %v0_acd0 to i8
  %v2_acd0 = load i32, i32* @r6, align 4
  %v3_acd0 = add i32 %v2_acd0, 2
  %v4_acd0 = inttoptr i32 %v3_acd0 to i8*
  store i8 %v1_acd0, i8* %v4_acd0, align 1
  %v0_acd4 = load i32, i32* %r1.global-to-local, align 4
  %v1_acd4 = trunc i32 %v0_acd4 to i8
  %v2_acd4 = load i32, i32* @r6, align 4
  %v3_acd4 = add i32 %v2_acd4, 3
  %v4_acd4 = inttoptr i32 %v3_acd4 to i8*
  store i8 %v1_acd4, i8* %v4_acd4, align 1
  %v0_acd8 = load i32, i32* %r8.global-to-local, align 4
  %v1_acd8 = trunc i32 %v0_acd8 to i8
  %v2_acd8 = load i32, i32* @r6, align 4
  %v3_acd8 = add i32 %v2_acd8, 4
  %v4_acd8 = inttoptr i32 %v3_acd8 to i8*
  store i8 %v1_acd8, i8* %v4_acd8, align 1
  %v0_acdc = load i32, i32* @r4, align 4
  store i32 %v0_acdc, i32* %stack_var_-40, align 4
  %v5_ace0 = icmp slt i32 %v1_acbc, %v1_acc4
  br i1 %v5_ace0, label %dec_label_pc_ab44, label %dec_label_pc_ace4

dec_label_pc_ace4:                                ; preds = %bb97
  %v1_acec = add i32 %v5_a97c, 8
  store i32 %v1_acec, i32* %r2.global-to-local, align 4
  %v1_acf0 = add i32 %v5_a97c, 66
  store i32 %v1_acf0, i32* %r3.global-to-local, align 4
  %v0_acfc.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_acfc.preheader

dec_label_pc_acfc.preheader:                      ; preds = %dec_label_pc_ace4, %dec_label_pc_afec
  %v0_acfc.pre = phi i32 [ %v0_acfc.pre.pre, %dec_label_pc_ace4 ], [ %v0_aa40, %dec_label_pc_afec ]
  %stack_var_-160.0.ph = phi i32 [ %v1_acf0, %dec_label_pc_ace4 ], [ %v1_aff8, %dec_label_pc_afec ]
  %stack_var_-156.0.ph = phi i32 [ %v1_acec, %dec_label_pc_ace4 ], [ %v1_aff4, %dec_label_pc_afec ]
  %v3_af4c = icmp eq i32 %v3_aa34, 65535
  %v2_afbc = icmp eq i32 %v1_aa2c, 0
  %v2_ada0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_adb8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_adc8 = ptrtoint i32* %stack_var_-52 to i32
  %v2_add4 = ptrtoint i32* %stack_var_-50 to i32
  %v2_ade8 = icmp eq i32 %v1_a99c, 0
  %v2_ad44 = icmp eq i32 %v5_a9d0, -1
  %v7_ad44 = icmp eq i32 %v5_a9d0, -1
  br label %dec_label_pc_acfc

dec_label_pc_acfc:                                ; preds = %dec_label_pc_adf0, %dec_label_pc_acfc.preheader
  %v0_acfc = phi i32 [ %v0_acfc.pre, %dec_label_pc_acfc.preheader ], [ %v1_aeb4, %dec_label_pc_adf0 ]
  %v2_acfc = icmp eq i32 %v0_acfc, 0
  store i1 %v2_acfc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp98 = icmp slt i32 %v0_acfc, 1
  br label %dec_label_pc_ad04

dec_label_pc_ad04:                                ; preds = %dec_label_pc_ad04, %dec_label_pc_acfc
  br i1 %tmp98, label %dec_label_pc_ad04, label %dec_label_pc_ad08

dec_label_pc_ad08:                                ; preds = %dec_label_pc_ad04
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_ad14

dec_label_pc_ad14:                                ; preds = %dec_label_pc_adf0, %dec_label_pc_ad08
  %v1_ad28 = phi i32 [ %v1_aeb0, %dec_label_pc_adf0 ], [ 0, %dec_label_pc_ad08 ]
  %v5_ad18 = mul i32 %v1_ad28, 24
  %v1_ad1c = load i32, i32* @sb, align 4
  %v2_ad1c = add i32 %v1_ad1c, %v5_ad18
  store i32 %v2_ad1c, i32* %r3.global-to-local, align 4
  store i32 %v2_a8b0, i32* %r1.global-to-local, align 4
  %v1_ad24 = add i32 %v2_ad1c, 20
  %v2_ad24 = inttoptr i32 %v1_ad24 to i8*
  %v3_ad24 = load i8, i8* %v2_ad24, align 1
  %v4_ad24 = zext i8 %v3_ad24 to i32
  store i32 %v4_ad24, i32* %r2.global-to-local, align 4
  %v4_ad28 = mul i32 %v1_ad28, 4
  %v5_ad28 = add i32 %v4_ad28, %v2_a8b0
  %v6_ad28 = inttoptr i32 %v5_ad28 to i32*
  %v7_ad28 = load i32, i32* %v6_ad28, align 4
  store i32 %v7_ad28, i32* @r5, align 4
  %v7_ad2c = icmp eq i8 %v3_ad24, 31
  store i1 %v7_ad2c, i1* %cpsr_z.global-to-local, align 1
  %v1_ad30 = add i32 %v7_ad28, 24
  store i32 %v1_ad30, i32* @r8, align 4
  %v1_ad34 = add i32 %v7_ad28, 38
  store i32 %v1_ad34, i32* @r6, align 4
  %v1_ad38 = add i32 %v7_ad28, 58
  store i32 %v1_ad38, i32* @r7, align 4
  %tmp103 = icmp ult i8 %v3_ad24, 32
  br i1 %tmp103, label %dec_label_pc_aed4, label %dec_label_pc_ad40

dec_label_pc_ad40:                                ; preds = %dec_label_pc_ad14
  store i32 %v5_a9d0, i32* %r2.global-to-local, align 4
  store i1 %v7_ad44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad44, label %dec_label_pc_af3c, label %dec_label_pc_ad4c

dec_label_pc_ad4c:                                ; preds = %dec_label_pc_aed4, %dec_label_pc_ad40
  store i32 %v3_aa34, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_af4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_af4c, label %dec_label_pc_af58, label %dec_label_pc_ad60

dec_label_pc_ad60:                                ; preds = %dec_label_pc_af3c.dec_label_pc_ad60_crit_edge, %dec_label_pc_ad4c
  %v1_ad64 = phi i32 [ %v1_ad64.pre, %dec_label_pc_af3c.dec_label_pc_ad60_crit_edge ], [ 65535, %dec_label_pc_ad4c ]
  store i32 %v3_aa38, i32* %r1.global-to-local, align 4
  %v9_ad64 = icmp eq i32 %v3_aa38, %v1_ad64
  store i1 %v9_ad64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad64, label %dec_label_pc_af90, label %dec_label_pc_ad6c

dec_label_pc_ad6c:                                ; preds = %dec_label_pc_af58.dec_label_pc_ad6c_crit_edge, %dec_label_pc_ad60
  %v1_ad70 = phi i32 [ %v1_ad70.pre, %dec_label_pc_af58.dec_label_pc_ad6c_crit_edge ], [ %v1_ad64, %dec_label_pc_ad60 ]
  store i32 %v3_aa3c, i32* %r2.global-to-local, align 4
  %v9_ad70 = icmp eq i32 %v3_aa3c, %v1_ad70
  store i1 %v9_ad70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ad70, label %dec_label_pc_afac, label %dec_label_pc_ad78

dec_label_pc_ad78:                                ; preds = %dec_label_pc_af90, %dec_label_pc_ad6c
  store i32 %v1_aa2c, i32* %r3.global-to-local, align 4
  store i1 %v2_afbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afbc, label %dec_label_pc_afd0, label %.thread24

.thread24:                                        ; preds = %dec_label_pc_ad78
  %v1_ad80 = load i32, i32* @r5, align 4
  %v2_ad80 = add i32 %v1_ad80, 16
  %v3_ad80 = inttoptr i32 %v2_ad80 to i32*
  %v4_ad80 = load i32, i32* %v3_ad80, align 4
  store i32 %v4_ad80, i32* %r3.global-to-local, align 4
  %v2_ad84 = load i32, i32* @r6, align 4
  %v3_ad84 = add i32 %v2_ad84, 16
  %v4_ad84 = inttoptr i32 %v3_ad84 to i32*
  store i32 %v4_ad80, i32* %v4_ad84, align 4
  br label %dec_label_pc_ad8c

dec_label_pc_ad8c:                                ; preds = %bb101, %.thread24, %dec_label_pc_afd0
  %v0_ad8c = call i32 @function_fc1c()
  store i32 %v0_ad8c, i32* %r0.global-to-local, align 4
  store i32 %v0_ad8c, i32* %stack_var_-44, align 4
  %v0_ad94 = call i32 @function_fc1c()
  store i32 %v0_ad94, i32* %r0.global-to-local, align 4
  store i32 %v0_ad94, i32* %stack_var_-48, align 4
  %v0_ad9c = call i32 @function_fc1c()
  store i32 %v2_ada0, i32* %r1.global-to-local, align 4
  store i32 %v0_ad9c, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_adac = load i32, i32* @r8, align 4
  store i32 %v0_adac, i32* %r0.global-to-local, align 4
  %v3_adb0 = call i32 @function_12b6c(i32 %v0_adac, i32 %v2_ada0, i32 4)
  %v0_adb4 = load i32, i32* @r8, align 4
  %v1_adb4 = add i32 %v0_adb4, 6
  store i32 %v1_adb4, i32* %r0.global-to-local, align 4
  store i32 %v2_adb8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_adc0 = call i32 @function_12b6c(i32 %v1_adb4, i32 %v2_adb8, i32 4)
  %v0_adc4 = load i32, i32* @r8, align 4
  %v1_adc4 = add i32 %v0_adc4, 4
  store i32 %v1_adc4, i32* %r0.global-to-local, align 4
  store i32 %v2_adc8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_add0 = call i32 @function_12b6c(i32 %v1_adc4, i32 %v2_adc8, i32 2)
  store i32 %v2_add4, i32* %r1.global-to-local, align 4
  %v0_add8 = load i32, i32* @r8, align 4
  %v1_add8 = add i32 %v0_add8, 10
  store i32 %v1_add8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_ade0 = call i32 @function_12b6c(i32 %v1_add8, i32 %v2_add4, i32 2)
  store i32 %v3_ade0, i32* %r0.global-to-local, align 4
  store i32 %v1_a99c, i32* %r1.global-to-local, align 4
  store i1 %v2_ade8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ade8, label %dec_label_pc_adf0, label %dec_label_pc_afdc

dec_label_pc_adf0:                                ; preds = %dec_label_pc_ad8c, %dec_label_pc_afdc
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_adf4 = load i32, i32* @sl, align 4
  %v1_adf4 = trunc i32 %v0_adf4 to i8
  %v2_adf4 = load i32, i32* @r5, align 4
  %v3_adf4 = add i32 %v2_adf4, 10
  %v4_adf4 = inttoptr i32 %v3_adf4 to i8*
  store i8 %v1_adf4, i8* %v4_adf4, align 1
  %v0_adf8 = load i32, i32* @sl, align 4
  %v1_adf8 = trunc i32 %v0_adf8 to i8
  %v2_adf8 = load i32, i32* @r5, align 4
  %v3_adf8 = add i32 %v2_adf8, 11
  %v4_adf8 = inttoptr i32 %v3_adf8 to i8*
  store i8 %v1_adf8, i8* %v4_adf8, align 1
  %v0_adfc = load i32, i32* @r5, align 4
  store i32 %v0_adfc, i32* @r0, align 4
  %v2_ae00 = call i32 @function_e444(i32 %v0_adfc, i32 20)
  %v3_ae00 = trunc i32 %v2_ae00 to i8
  %v4_ae04 = sdiv i32 %v2_ae00, 256
  store i32 %v4_ae04, i32* %r3.global-to-local, align 4
  %v1_ae08 = trunc i32 %v4_ae04 to i8
  %v2_ae08 = load i32, i32* @r5, align 4
  %v3_ae08 = add i32 %v2_ae08, 11
  %v4_ae08 = inttoptr i32 %v3_ae08 to i8*
  store i8 %v1_ae08, i8* %v4_ae08, align 1
  %v3_ae0c = load i32, i32* @r5, align 4
  %v4_ae0c = add i32 %v3_ae0c, 10
  %v5_ae0c = inttoptr i32 %v4_ae0c to i8*
  store i8 %v3_ae00, i8* %v5_ae0c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ae14 = load i32, i32* @sl, align 4
  %v1_ae14 = trunc i32 %v0_ae14 to i8
  %v2_ae14 = load i32, i32* @r6, align 4
  %v3_ae14 = add i32 %v2_ae14, 10
  %v4_ae14 = inttoptr i32 %v3_ae14 to i8*
  store i8 %v1_ae14, i8* %v4_ae14, align 1
  %v0_ae18 = load i32, i32* @sl, align 4
  %v1_ae18 = trunc i32 %v0_ae18 to i8
  %v2_ae18 = load i32, i32* @r6, align 4
  %v3_ae18 = add i32 %v2_ae18, 11
  %v4_ae18 = inttoptr i32 %v3_ae18 to i8*
  store i8 %v1_ae18, i8* %v4_ae18, align 1
  %v0_ae1c = load i32, i32* @r6, align 4
  store i32 %v0_ae1c, i32* @r0, align 4
  %v2_ae20 = call i32 @function_e444(i32 %v0_ae1c, i32 20)
  %v3_ae20 = trunc i32 %v2_ae20 to i8
  store i32 %v2_ae20, i32* %r0.global-to-local, align 4
  %v4_ae24 = sdiv i32 %v2_ae20, 256
  store i32 %v4_ae24, i32* %r3.global-to-local, align 4
  %v3_ae28 = load i32, i32* @r6, align 4
  %v4_ae28 = add i32 %v3_ae28, 10
  %v5_ae28 = inttoptr i32 %v4_ae28 to i8*
  store i8 %v3_ae20, i8* %v5_ae28, align 1
  %v0_ae2c = load i32, i32* %r3.global-to-local, align 4
  %v1_ae2c = trunc i32 %v0_ae2c to i8
  %v2_ae2c = load i32, i32* @r6, align 4
  %v3_ae2c = add i32 %v2_ae2c, 11
  %v4_ae2c = inttoptr i32 %v3_ae2c to i8*
  store i8 %v1_ae2c, i8* %v4_ae2c, align 1
  %v0_ae30 = load i32, i32* @r7, align 4
  %v1_ae30 = add i32 %v0_ae30, 4
  %v2_ae30 = inttoptr i32 %v1_ae30 to i8*
  %v3_ae30 = load i8, i8* %v2_ae30, align 1
  %v4_ae30 = zext i8 %v3_ae30 to i32
  store i32 %v4_ae30, i32* %r3.global-to-local, align 4
  %v1_ae34 = add i32 %v0_ae30, 5
  %v2_ae34 = inttoptr i32 %v1_ae34 to i8*
  %v3_ae34 = load i8, i8* %v2_ae34, align 1
  %v4_ae34 = zext i8 %v3_ae34 to i32
  store i32 %v0_ae30, i32* @r1, align 4
  %v4_ae3c = mul nuw nsw i32 %v4_ae34, 256
  %v5_ae3c = or i32 %v4_ae3c, %v4_ae30
  store i32 %v5_ae3c, i32* %r2.global-to-local, align 4
  %v0_ae40 = load i32, i32* @sl, align 4
  %v1_ae40 = trunc i32 %v0_ae40 to i8
  %v3_ae40 = add i32 %v0_ae30, 6
  %v4_ae40 = inttoptr i32 %v3_ae40 to i8*
  store i8 %v1_ae40, i8* %v4_ae40, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_ae48 = load i32, i32* @sl, align 4
  %v1_ae48 = trunc i32 %v0_ae48 to i8
  %v2_ae48 = load i32, i32* @r7, align 4
  %v3_ae48 = add i32 %v2_ae48, 7
  %v4_ae48 = inttoptr i32 %v3_ae48 to i8*
  store i8 %v1_ae48, i8* %v4_ae48, align 1
  %v0_ae4c = load i32, i32* @r6, align 4
  store i32 %v0_ae4c, i32* %r0.global-to-local, align 4
  %v4_ae50 = call i32 @function_e4a0(i32 %v0_ae4c, i32 %v0_ae30, i32 %v5_ae3c, i32 %stack_var_-156.0.ph)
  %v5_ae50 = trunc i32 %v4_ae50 to i8
  store i32 %v4_ae50, i32* %r0.global-to-local, align 4
  %v3_ae54 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ae54, i32* %r3.global-to-local, align 4
  %v3_ae58 = mul i32 %v3_ae54, 32
  store i32 %v3_ae58, i32* %r2.global-to-local, align 4
  %v0_ae5c = load i32, i32* @r5, align 4
  %v1_ae5c = add i32 %v0_ae5c, 16
  %v2_ae5c = inttoptr i32 %v1_ae5c to i32*
  %v3_ae5c = load i32, i32* %v2_ae5c, align 4
  store i32 %v3_ae5c, i32* %r1.global-to-local, align 4
  %v5_ae60 = mul i32 %v3_ae54, 24
  store i32 %v5_ae60, i32* %r2.global-to-local, align 4
  %v4_ae6439 = udiv i32 %v4_ae50, 256
  %v1_ae68 = trunc i32 %v4_ae6439 to i8
  %v2_ae68 = load i32, i32* @r7, align 4
  %v3_ae68 = add i32 %v2_ae68, 7
  %v4_ae68 = inttoptr i32 %v3_ae68 to i8*
  store i8 %v1_ae68, i8* %v4_ae68, align 1
  %v0_ae6c = load i32, i32* %r2.global-to-local, align 4
  %v1_ae6c = load i32, i32* @sb, align 4
  %v2_ae6c = add i32 %v1_ae6c, %v0_ae6c
  store i32 %v2_ae6c, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_ae74 = load i32, i32* @r7, align 4
  %v4_ae74 = add i32 %v3_ae74, 6
  %v5_ae74 = inttoptr i32 %v4_ae74 to i8*
  store i8 %v5_ae50, i8* %v5_ae74, align 1
  %v0_ae78 = load i32, i32* %r1.global-to-local, align 4
  %v1_ae78 = load i32, i32* %lr.global-to-local, align 4
  %v2_ae78 = add i32 %v1_ae78, 4
  %v3_ae78 = inttoptr i32 %v2_ae78 to i32*
  store i32 %v0_ae78, i32* %v3_ae78, align 4
  %v0_ae7c = load i32, i32* %r3.global-to-local, align 4
  %v1_ae7c = trunc i32 %v0_ae7c to i8
  %v2_ae7c = load i32, i32* %r2.global-to-local, align 4
  %v3_ae7c = load i32, i32* @sb, align 4
  %v4_ae7c = add i32 %v3_ae7c, %v2_ae7c
  %v5_ae7c = inttoptr i32 %v4_ae7c to i8*
  store i8 %v1_ae7c, i8* %v5_ae7c, align 1
  %v0_ae80 = load i32, i32* @sl, align 4
  %v1_ae80 = trunc i32 %v0_ae80 to i8
  %v2_ae80 = load i32, i32* %lr.global-to-local, align 4
  %v3_ae80 = add i32 %v2_ae80, 2
  %v4_ae80 = inttoptr i32 %v3_ae80 to i8*
  store i8 %v1_ae80, i8* %v4_ae80, align 1
  %v0_ae84 = load i32, i32* @sl, align 4
  %v1_ae84 = trunc i32 %v0_ae84 to i8
  %v2_ae84 = load i32, i32* %lr.global-to-local, align 4
  %v3_ae84 = add i32 %v2_ae84, 1
  %v4_ae84 = inttoptr i32 %v3_ae84 to i8*
  store i8 %v1_ae84, i8* %v4_ae84, align 1
  %v0_ae88 = load i32, i32* @sl, align 4
  %v1_ae88 = trunc i32 %v0_ae88 to i8
  %v2_ae88 = load i32, i32* %lr.global-to-local, align 4
  %v3_ae88 = add i32 %v2_ae88, 3
  %v4_ae88 = inttoptr i32 %v3_ae88 to i8*
  store i8 %v1_ae88, i8* %v4_ae88, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ae94 = load i32, i32* @r5, align 4
  store i32 %v0_ae94, i32* %r1.global-to-local, align 4
  store i32 %v3_a9e4, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_aea0 = load i32, i32* %lr.global-to-local, align 4
  %v6_aea8 = inttoptr i32 %v0_ae94 to i32*
  %v7_aea8 = call i32 @function_13d4c(i32 %v3_a9e4, i32* %v6_aea8, i32 %stack_var_-160.0.ph, i32 16384, i32 %v0_aea0, i32 16)
  %v3_aeac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_aeac, i32* %r3.global-to-local, align 4
  %v1_aeb0 = add i32 %v3_aeac, 1
  store i32 %v1_aeb0, i32* %r0.global-to-local, align 4
  %v1_aeb4 = load i32, i32* @fp, align 4
  %v9_aeb4 = icmp eq i32 %v1_aeb0, %v1_aeb4
  store i1 %v9_aeb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aeb0, i32* %stack_var_-40, align 4
  %v6_aebc = icmp slt i32 %v1_aeb0, %v1_aeb4
  br i1 %v6_aebc, label %dec_label_pc_ad14, label %dec_label_pc_acfc

dec_label_pc_aec4:                                ; preds = %dec_label_pc_a9f4
  store i32 %v3_a9e4, i32* %r0.global-to-local, align 4
  %v1_aec8 = call i32 @function_134b0(i32 %v3_a9e4)
  store i32 %v1_aec8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aecc

dec_label_pc_aecc:                                ; preds = %dec_label_pc_a890, %dec_label_pc_aec4
  %v29_aed0 = phi i32 [ %v3_a9e4, %dec_label_pc_a890 ], [ %v1_aec8, %dec_label_pc_aec4 ]
  store i32 %v3_a890, i32* %r4.global-to-local, align 4
  store i32 %v15_a890, i32* %r8.global-to-local, align 4
  store i32 %v21_a890, i32* %sl.global-to-local, align 4
  ret i32 %v29_aed0

dec_label_pc_aed4:                                ; preds = %dec_label_pc_ad14
  %v1_aed4 = add i32 %v2_ad1c, 16
  %v2_aed4 = inttoptr i32 %v1_aed4 to i32*
  %v3_aed4 = load i32, i32* %v2_aed4, align 4
  store i32 %v3_aed4, i32* %r4.global-to-local, align 4
  %v0_aed8 = call i32 @function_fc1c()
  store i32 %v0_aed8, i32* %r0.global-to-local, align 4
  %v3_aedc = load i32, i32* %stack_var_-40, align 4
  %v5_aee4 = mul i32 %v3_aedc, 24
  %v0_aee8 = load i32, i32* %r4.global-to-local, align 4
  %v1_aeec = load i32, i32* @sb, align 4
  %v2_aeec = add i32 %v1_aeec, %v5_aee4
  store i32 %v2_aeec, i32* %r1.global-to-local, align 4
  %v1_aef0 = and i32 %v0_aee8, 65280
  store i32 %v1_aef0, i32* %r3.global-to-local, align 4
  %v1_aee8 = udiv i32 %v0_aee8, 256
  %v3_aef4 = and i32 %v1_aee8, 65280
  store i32 %v3_aef4, i32* %r2.global-to-local, align 4
  %v3_aef8 = mul i32 %v0_aee8, 16777216
  store i32 %v3_aef8, i32* %ip.global-to-local, align 4
  %v1_aefc = add i32 %v2_aeec, 20
  %v2_aefc = inttoptr i32 %v1_aefc to i8*
  %v3_aefc = load i8, i8* %v2_aefc, align 1
  %v4_aefc = zext i8 %v3_aefc to i32
  store i32 %v4_aefc, i32* %lr.global-to-local, align 4
  %v4_af00 = mul nuw nsw i32 %v1_aef0, 256
  %v5_af00 = or i32 %v4_af00, %v3_aef8
  store i32 %v5_af00, i32* %ip.global-to-local, align 4
  %v2_af08 = call i32 @llvm.bswap.i32(i32 %v0_aee8)
  %v7_af0c = lshr i32 %v0_aed8, %v4_aefc
  %v8_af0c = add i32 %v7_af0c, %v2_af08
  %v3_af18 = mul i32 %v8_af0c, 16777216
  %v1_af1c = and i32 %v8_af0c, 65280
  store i32 %v1_af1c, i32* %r0.global-to-local, align 4
  store i32 %v5_a9d0, i32* %r2.global-to-local, align 4
  %v4_af28 = mul nuw nsw i32 %v1_af1c, 256
  %v5_af28 = or i32 %v4_af28, %v3_af18
  store i32 %v5_af28, i32* %r1.global-to-local, align 4
  %v2_af2c = call i32 @llvm.bswap.i32(i32 %v8_af0c)
  store i32 %v2_af2c, i32* %r3.global-to-local, align 4
  store i1 %v7_ad44, i1* %cpsr_z.global-to-local, align 1
  %v1_af34 = load i32, i32* @r5, align 4
  %v2_af34 = add i32 %v1_af34, 16
  %v3_af34 = inttoptr i32 %v2_af34 to i32*
  store i32 %v2_af2c, i32* %v3_af34, align 4
  br i1 %v2_ad44, label %dec_label_pc_af3c, label %dec_label_pc_ad4c

dec_label_pc_af3c:                                ; preds = %dec_label_pc_aed4, %dec_label_pc_ad40
  %v0_af3c = call i32 @function_fc1c()
  store i32 %v0_af3c, i32* %r0.global-to-local, align 4
  store i32 %v3_aa34, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_af4c, i1* %cpsr_z.global-to-local, align 1
  %v1_af50 = load i32, i32* @r5, align 4
  %v2_af50 = add i32 %v1_af50, 12
  %v3_af50 = inttoptr i32 %v2_af50 to i32*
  store i32 %v0_af3c, i32* %v3_af50, align 4
  br i1 %v3_af4c, label %dec_label_pc_af58, label %dec_label_pc_af3c.dec_label_pc_ad60_crit_edge

dec_label_pc_af3c.dec_label_pc_ad60_crit_edge:    ; preds = %dec_label_pc_af3c
  %v1_ad64.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad60

dec_label_pc_af58:                                ; preds = %dec_label_pc_af3c, %dec_label_pc_ad4c
  %v0_af58 = call i32 @function_fc1c()
  %v3_af60 = urem i32 %v0_af58, 65536
  store i32 %v3_af60, i32* %r0.global-to-local, align 4
  %v1_af68 = sub nsw i32 999, %v3_af60
  store i32 %v1_af68, i32* %r2.global-to-local, align 4
  %v3_af6c = sdiv i32 %v1_af68, 256
  store i32 %v3_af6c, i32* %r1.global-to-local, align 4
  %v3_af7038 = udiv i32 %v3_af60, 256
  store i32 %v3_af7038, i32* %r3.global-to-local, align 4
  %v1_af74 = trunc i32 %v3_af7038 to i8
  %v2_af74 = load i32, i32* @r5, align 4
  %v3_af74 = add i32 %v2_af74, 5
  %v4_af74 = inttoptr i32 %v3_af74 to i8*
  store i8 %v1_af74, i8* %v4_af74, align 1
  %v0_af78 = load i32, i32* %r0.global-to-local, align 4
  %v1_af78 = trunc i32 %v0_af78 to i8
  %v2_af78 = load i32, i32* @r5, align 4
  %v3_af78 = add i32 %v2_af78, 4
  %v4_af78 = inttoptr i32 %v3_af78 to i8*
  store i8 %v1_af78, i8* %v4_af78, align 1
  %v0_af7c = load i32, i32* %r1.global-to-local, align 4
  %v1_af7c = trunc i32 %v0_af7c to i8
  %v2_af7c = load i32, i32* @r6, align 4
  %v3_af7c = add i32 %v2_af7c, 5
  %v4_af7c = inttoptr i32 %v3_af7c to i8*
  store i8 %v1_af7c, i8* %v4_af7c, align 1
  store i32 %v3_aa38, i32* %r1.global-to-local, align 4
  %v1_af84 = load i32, i32* @r4, align 4
  %v9_af84 = icmp eq i32 %v3_aa38, %v1_af84
  store i1 %v9_af84, i1* %cpsr_z.global-to-local, align 1
  %v0_af88 = load i32, i32* %r2.global-to-local, align 4
  %v1_af88 = trunc i32 %v0_af88 to i8
  %v2_af88 = load i32, i32* @r6, align 4
  %v3_af88 = add i32 %v2_af88, 4
  %v4_af88 = inttoptr i32 %v3_af88 to i8*
  store i8 %v1_af88, i8* %v4_af88, align 1
  %v0_af8c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_af8c, label %dec_label_pc_af90, label %dec_label_pc_af58.dec_label_pc_ad6c_crit_edge

dec_label_pc_af58.dec_label_pc_ad6c_crit_edge:    ; preds = %dec_label_pc_af58
  %v1_ad70.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ad6c

dec_label_pc_af90:                                ; preds = %dec_label_pc_af58, %dec_label_pc_ad60
  %v0_af90 = call i32 @function_fc1c()
  %v1_af90 = trunc i32 %v0_af90 to i8
  store i32 %v0_af90, i32* %r0.global-to-local, align 4
  store i32 %v3_aa3c, i32* %r2.global-to-local, align 4
  %v4_af98 = sdiv i32 %v0_af90, 256
  store i32 %v4_af98, i32* %r3.global-to-local, align 4
  %v1_af9c = load i32, i32* @r4, align 4
  %v9_af9c = icmp eq i32 %v3_aa3c, %v1_af9c
  store i1 %v9_af9c, i1* %cpsr_z.global-to-local, align 1
  %v3_afa0 = load i32, i32* @r5, align 4
  %v4_afa0 = add i32 %v3_afa0, 58
  %v5_afa0 = inttoptr i32 %v4_afa0 to i8*
  store i8 %v1_af90, i8* %v5_afa0, align 1
  %v0_afa4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afa4 = trunc i32 %v0_afa4 to i8
  %v2_afa4 = load i32, i32* @r7, align 4
  %v3_afa4 = add i32 %v2_afa4, 1
  %v4_afa4 = inttoptr i32 %v3_afa4 to i8*
  store i8 %v1_afa4, i8* %v4_afa4, align 1
  %v0_afa8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afa8, label %dec_label_pc_afac, label %dec_label_pc_ad78

dec_label_pc_afac:                                ; preds = %dec_label_pc_af90, %dec_label_pc_ad6c
  %v0_afac = call i32 @function_fc1c()
  %v1_afac = trunc i32 %v0_afac to i8
  store i32 %v0_afac, i32* %r0.global-to-local, align 4
  %v4_afb040 = udiv i32 %v0_afac, 256
  %v1_afb4 = trunc i32 %v4_afb040 to i8
  %v2_afb4 = load i32, i32* @r7, align 4
  %v3_afb4 = add i32 %v2_afb4, 3
  %v4_afb4 = inttoptr i32 %v3_afb4 to i8*
  store i8 %v1_afb4, i8* %v4_afb4, align 1
  store i32 %v1_aa2c, i32* %r3.global-to-local, align 4
  store i1 %v2_afbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_afbc, label %bb100, label %bb99

bb99:                                             ; preds = %dec_label_pc_afac
  %v1_afc0 = load i32, i32* @r5, align 4
  %v2_afc0 = add i32 %v1_afc0, 16
  %v3_afc0 = inttoptr i32 %v2_afc0 to i32*
  %v4_afc0 = load i32, i32* %v3_afc0, align 4
  store i32 %v4_afc0, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %dec_label_pc_afac, %bb99
  %v3_afc4 = load i32, i32* @r7, align 4
  %v4_afc4 = add i32 %v3_afc4, 2
  %v5_afc4 = inttoptr i32 %v4_afc4 to i8*
  store i8 %v1_afac, i8* %v5_afc4, align 1
  %v0_afc8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afc8, label %dec_label_pc_afd0, label %bb101

bb101:                                            ; preds = %bb100
  %v1_afc8 = load i32, i32* %r3.global-to-local, align 4
  %v2_afc8 = load i32, i32* @r6, align 4
  %v3_afc8 = add i32 %v2_afc8, 16
  %v4_afc8 = inttoptr i32 %v3_afc8 to i32*
  store i32 %v1_afc8, i32* %v4_afc8, align 4
  br label %dec_label_pc_ad8c

dec_label_pc_afd0:                                ; preds = %dec_label_pc_ad78, %bb100
  %v0_afd0 = call i32 @function_fc1c()
  store i32 %v0_afd0, i32* %r0.global-to-local, align 4
  %v1_afd4 = load i32, i32* @r6, align 4
  %v2_afd4 = add i32 %v1_afd4, 16
  %v3_afd4 = inttoptr i32 %v2_afd4 to i32*
  store i32 %v0_afd0, i32* %v3_afd4, align 4
  br label %dec_label_pc_ad8c

dec_label_pc_afdc:                                ; preds = %dec_label_pc_ad8c
  %v0_afdc = load i32, i32* @r7, align 4
  %v1_afdc = add i32 %v0_afdc, 8
  store i32 %v1_afdc, i32* %r0.global-to-local, align 4
  store i32 %v5_a97c, i32* @r1, align 4
  %v1_afe4 = inttoptr i32 %v1_afdc to i8*
  %v2_afe4 = call i32 @function_fdf8(i8* %v1_afe4)
  store i32 %v2_afe4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_adf0

dec_label_pc_afec:                                ; preds = %dec_label_pc_aa1c
  %v1_aff4 = add i32 %v5_a97c, 8
  store i32 %v1_aff4, i32* %r1.global-to-local, align 4
  %v1_aff8 = add i32 %v5_a97c, 66
  store i32 %v1_aff8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_acfc.preheader

; uselistorder directives
  uselistorder i32 %v1_aff8, { 1, 0 }
  uselistorder i32 %v1_aff4, { 1, 0 }
  uselistorder i32 %v0_afac, { 0, 2, 1 }
  uselistorder i32 %v0_af90, { 0, 2, 1 }
  uselistorder i32 %v3_af60, { 0, 2, 1 }
  uselistorder i32 %v2_af2c, { 1, 0 }
  uselistorder i32 %v8_af0c, { 1, 2, 0 }
  uselistorder i32 %v3_aef8, { 1, 0 }
  uselistorder i32 %v0_aee8, { 2, 0, 1, 3 }
  uselistorder i32 %v1_aeb4, { 1, 2, 0 }
  uselistorder i32 %v1_aeb0, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_ae54, { 1, 0, 2 }
  uselistorder i32 %v4_ae50, { 0, 2, 1 }
  uselistorder i32 %v0_ae30, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_ae20, { 0, 2, 1 }
  uselistorder i32 %v4_ae04, { 1, 0 }
  uselistorder i32 %v7_ad28, { 2, 1, 0, 3 }
  uselistorder i32 %v0_acfc, { 1, 0 }
  uselistorder i1 %v7_ad44, { 2, 1, 0 }
  uselistorder i1 %v2_afbc, { 2, 3, 1, 0 }
  uselistorder i1 %v3_af4c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ac84, { 1, 0, 2 }
  uselistorder i32 %v3_aaec, { 1, 0 }
  uselistorder i32 %tmp88, { 1, 0 }
  uselistorder i32 %v1_aa90, { 1, 0 }
  uselistorder i32 %v1_aa8c, { 2, 1, 0 }
  uselistorder i32 %v1_aa78, { 1, 0 }
  uselistorder i32 %v1_aa74, { 2, 1, 0 }
  uselistorder i32 %v1_aa6c, { 0, 2, 1 }
  uselistorder i32 %v3_aa64, { 2, 1, 0 }
  uselistorder i32 %v0_aa40, { 1, 0, 2 }
  uselistorder i32 %v3_aa34, { 2, 1, 3, 0 }
  uselistorder i32 %v1_aa2c, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_aa28, { 1, 0 }
  uselistorder i32 %v0_aa28, { 2, 1, 0 }
  uselistorder i32 %v0_aa20, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_aa1c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_aa14, { 1, 0 }
  uselistorder i1 %v7_a9e8, { 1, 0 }
  uselistorder i32 %v3_a9e4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_a9d0, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_a99c, { 1, 2, 0 }
  uselistorder i32 %v5_a97c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_a930, { 1, 0 }
  uselistorder i8 %v5_a920, { 1, 0 }
  uselistorder i32 %v5_a904, { 1, 0 }
  uselistorder i32 %v6_a8c8, { 1, 0 }
  uselistorder i32 %v2_a8b0, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a894, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %sl.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r8.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 14, 15, 17, 16, 18, 19, 21, 20, 22, 23, 25, 24, 27, 26, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 19, 18, 34, 35, 36, 37, 39, 38, 43, 40, 41, 42, 46, 44, 45, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 8, 9, 10, 11, 12, 3, 4, 5, 6, 7 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 10, 11, 12 }
  uselistorder label %dec_label_pc_afd0, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_aecc, { 1, 0 }
  uselistorder label %dec_label_pc_adf0, { 1, 0 }
  uselistorder label %dec_label_pc_ad8c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_acfc.preheader, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %.thread21, { 2, 1, 0 }
}

define i32 @function_b00c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b00c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b00c = load i32, i32* @r4, align 4
  %v15_b00c = load i32, i32* @r8, align 4
  %v1_b010 = urem i32 %arg1, 256
  store i32 %v1_b010, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_b010, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b028 = urem i32 %arg3, 256
  store i32 %v1_b028, i32* @r4, align 4
  %v2_b02c = call i32 @function_140b4(i32 %v1_b010, i32 4)
  %v0_b030 = load i32, i32* @r5, align 4
  store i32 %v0_b030, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b040 = load i32, i32* @r4, align 4
  store i32 %v0_b040, i32* %r0.global-to-local, align 4
  %v5_b044 = inttoptr i32 %v0_b030 to i32*
  %v6_b044 = call i32 @function_a4e8(i32 %v0_b040, i32* %v5_b044, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b05c = load i32, i32* @r5, align 4
  store i32 %v0_b05c, i32* %r1.global-to-local, align 4
  %v0_b060 = load i32, i32* @r4, align 4
  store i32 %v0_b060, i32* %r0.global-to-local, align 4
  %v5_b064 = trunc i32 %v6_b044 to i8
  %v6_b068 = inttoptr i32 %v0_b05c to i32*
  %v7_b068 = call i32 @function_a4e8(i32 %v0_b060, i32* %v6_b068, i32 3, i32 65535)
  %v0_b06c = load i32, i32* @r5, align 4
  store i32 %v0_b06c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b068, i32* @r7, align 4
  %v0_b07c = load i32, i32* @r4, align 4
  store i32 %v0_b07c, i32* %r0.global-to-local, align 4
  %v4_b080 = inttoptr i32 %v0_b06c to i32*
  %v5_b080 = call i32 @function_a4e8(i32 %v0_b07c, i32* %v4_b080, i32 4, i32 64)
  %v0_b08c = load i32, i32* @r5, align 4
  store i32 %v0_b08c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b098 = load i32, i32* @r4, align 4
  store i32 %v0_b098, i32* %r0.global-to-local, align 4
  %v5_b09c = trunc i32 %v5_b080 to i8
  %v6_b0a0 = inttoptr i32 %v0_b08c to i32*
  %v7_b0a0 = call i32 @function_a4e8(i32 %v0_b098, i32* %v6_b0a0, i32 5, i32 1)
  %v1_b0ac = urem i32 %v7_b0a0, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b0b8 = load i32, i32* @r5, align 4
  store i32 %v0_b0b8, i32* %r1.global-to-local, align 4
  %v0_b0bc = load i32, i32* @r4, align 4
  store i32 %v0_b0bc, i32* %r0.global-to-local, align 4
  %v5_b0c4 = inttoptr i32 %v0_b0b8 to i32*
  %v6_b0c4 = call i32 @function_a4e8(i32 %v0_b0bc, i32* %v5_b0c4, i32 6, i32 65535)
  %v0_b0cc = load i32, i32* @r5, align 4
  store i32 %v0_b0cc, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b0c4, i32* @sl, align 4
  %v0_b0dc = load i32, i32* @r4, align 4
  store i32 %v0_b0dc, i32* %r0.global-to-local, align 4
  %v4_b0e0 = inttoptr i32 %v0_b0cc to i32*
  %v5_b0e0 = call i32 @function_a4e8(i32 %v0_b0dc, i32* %v4_b0e0, i32 7, i32 65535)
  %v0_b0e4 = load i32, i32* @r5, align 4
  store i32 %v0_b0e4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_b0e0, i32* @r8, align 4
  %v0_b0f4 = load i32, i32* @r4, align 4
  store i32 %v0_b0f4, i32* %r0.global-to-local, align 4
  %v4_b0f8 = inttoptr i32 %v0_b0e4 to i32*
  %v5_b0f8 = call i32 @function_a4e8(i32 %v0_b0f4, i32* %v4_b0f8, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b108 = load i32, i32* @r5, align 4
  store i32 %v0_b108, i32* %r1.global-to-local, align 4
  %v0_b10c = load i32, i32* @r4, align 4
  store i32 %v0_b10c, i32* %r0.global-to-local, align 4
  %v4_b110 = inttoptr i32 %v0_b108 to i32*
  %v5_b110 = call i32 @function_a4e8(i32 %v0_b10c, i32* %v4_b110, i32 1, i32 1)
  %v1_b118 = urem i32 %v5_b110, 256
  %v0_b11c = load i32, i32* @r5, align 4
  store i32 %v0_b11c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b128 = load i32, i32* @r4, align 4
  store i32 %v0_b128, i32* %r0.global-to-local, align 4
  %v5_b130 = inttoptr i32 %v0_b11c to i32*
  %v6_b130 = call i32 @function_a4e8(i32 %v0_b128, i32* %v5_b130, i32 19, i32 0)
  %v0_b138 = load i32, i32* @r5, align 4
  store i32 %v0_b138, i32* %r1.global-to-local, align 4
  %v2_b13c = load i32, i32* @global_var_1eafc.85, align 4
  store i32 %v2_b13c, i32* %r3.global-to-local, align 4
  store i32 %v6_b130, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b148 = load i32, i32* @r4, align 4
  store i32 %v0_b148, i32* %r0.global-to-local, align 4
  %v4_b14c = inttoptr i32 %v0_b138 to i32*
  %v5_b14c = call i32 @function_a4e8(i32 %v0_b148, i32* %v4_b14c, i32 25, i32 %v2_b13c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b160 = call i32 @function_13db0(i32 2, i32 3, i32 6)
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  %v7_b164 = icmp eq i32 %v3_b160, -1
  store i1 %v7_b164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b164, label %dec_label_pc_b5e4, label %dec_label_pc_b170

dec_label_pc_b170:                                ; preds = %dec_label_pc_b00c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b178 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b178, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b18c = call i32 @function_13d80(i32 %v3_b160, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b18c, i32* %r0.global-to-local, align 4
  %v7_b190 = icmp eq i32 %v6_b18c, -1
  store i1 %v7_b190, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b190, label %dec_label_pc_b5dc, label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %dec_label_pc_b170
  %v0_b198 = load i32, i32* @sl, align 4
  %v0_b1a4 = load i32, i32* @r8, align 4
  %v3_b1a4 = mul i32 %v0_b1a4, 65536
  store i32 %v3_b1a4, i32* %r8.global-to-local, align 4
  %v0_b1a8 = load i32, i32* @r7, align 4
  %v0_b1ac = load i32, i32* @r6, align 4
  %v1_b1ac = urem i32 %v0_b1ac, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_b1b4 = urem i32 %v0_b198, 65536
  store i32 %v3_b1b4, i32* %r2.global-to-local, align 4
  %v3_b1b8 = urem i32 %v0_b1a4, 65536
  store i32 %v3_b1b8, i32* %r3.global-to-local, align 4
  %v0_b1bc = load i32, i32* @fp, align 4
  %v2_b1bc = icmp eq i32 %v0_b1bc, 0
  store i1 %v2_b1bc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b1cc = urem i32 %v0_b1a8, 65536
  store i32 %v3_b1cc, i32* @sl, align 4
  %tmp84 = icmp slt i32 %v0_b1bc, 1
  br i1 %tmp84, label %dec_label_pc_b708, label %dec_label_pc_b1dc

dec_label_pc_b1dc:                                ; preds = %dec_label_pc_b198
  %v3_b1e0 = mul i32 %v5_b0f8, 65536
  %v1_b1e4 = add i32 %v3_b1e0, 3407872
  %v3_b1ec = udiv i32 %v1_b1e4, 256
  %v0_b1a8.not = or i32 %v0_b1a8, -65536
  %v1_b1fc = xor i32 %v0_b1a8.not, 65535
  %v1_b200 = urem i32 %v0_b1a4, 256
  %tmp85 = mul nsw i32 %v1_b1fc, 256
  %v1_b218 = and i32 %v3_b1ec, 65280
  %v1_b21c = add i32 %v3_b1e0, 524288
  %v4_b220 = udiv i32 %v1_b1e4, 16777216
  %v5_b220 = or i32 %v1_b218, %v4_b220
  store i32 %v5_b220, i32* %r0.global-to-local, align 4
  %v1_b224 = add i32 %v3_b1e0, 1835008
  %v1_b22c = and i32 %tmp85, 65280
  store i32 %v1_b22c, i32* @lr, align 4
  %tmp86 = udiv i32 %v1_b1fc, 256
  %tmp87 = udiv i32 %v0_b1a8, 256
  %v5_b240 = trunc i32 %tmp86 to i8
  %tmp88 = udiv i32 %v0_b198, 256
  %sext29 = mul i32 %tmp87, 16777216
  %v4_b260 = sdiv i32 %sext29, 16777216
  %v3_b26c = mul nuw nsw i32 %v1_b200, 256
  store i32 %v3_b26c, i32* @r5, align 4
  %v3_b270 = udiv i32 %v1_b21c, 256
  %tmp89 = udiv i32 %v0_b1a4, 256
  %v4_b278 = urem i32 %tmp89, 256
  %v5_b278 = or i32 %v4_b278, %v3_b26c
  store i32 %v5_b278, i32* @r7, align 4
  %v3_b27c = ashr i32 %sext29, 31
  %v3_b288 = sdiv i32 %v1_b224, 16777216
  %v1_b28c = and i32 %v3_b270, 65280
  store i32 %v1_b28c, i32* @r6, align 4
  %sext30 = mul i32 %tmp88, 16777216
  %v4_b294 = sdiv i32 %sext30, 16777216
  %v3_b298 = ashr i32 %v1_b224, 31
  %v3_b29c = udiv i32 %v1_b1fc, 65536
  %v4_b2a0 = udiv i32 %v1_b21c, 16777216
  %v5_b2a0 = or i32 %v1_b28c, %v4_b2a0
  store i32 %v5_b2a0, i32* %r8.global-to-local, align 4
  %v3_b2ac = ashr i32 %sext30, 31
  store i32 %v3_b2ac, i32* %r1.global-to-local, align 4
  store i32 %v1_b200, i32* %r2.global-to-local, align 4
  %v3_b2b441 = udiv i32 %v1_b28c, 256
  store i32 %v3_b2b441, i32* %r3.global-to-local, align 4
  %v5_b2bc = trunc i32 %v3_b2ac to i8
  store i32 0, i32* @r4, align 4
  %v4_b318 = sext i8 %v5_b09c to i32
  %sext = mul i32 %v1_b1e4, 256
  %v4_b320 = sdiv i32 %sext, 16777216
  %sext16 = mul nuw i32 %v4_b220, 16777216
  %v4_b330 = sdiv i32 %sext16, 16777216
  %v2_b404 = icmp eq i32 %v1_b1ac, 0
  %sext20 = mul i32 %v1_b21c, 256
  %v4_b424 = sdiv i32 %sext20, 16777216
  %sext21 = mul i32 %v0_b1a4, 16777216
  %v7_b43c = sdiv i32 %sext21, 16777216
  %v1_b32c = trunc i32 %v4_b320 to i8
  br label %dec_label_pc_b2cc

dec_label_pc_b2cc:                                ; preds = %bb96, %dec_label_pc_b1dc
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_b2d8 = call i32 @function_140b4(i32 1510, i32 4)
  store i32 %v2_b2d8, i32* %r0.global-to-local, align 4
  store i32 %v2_b02c, i32* %r1.global-to-local, align 4
  %v3_b2e0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b2e0, i32* %r3.global-to-local, align 4
  %v2_b2e4 = load i32, i32* @r4, align 4
  %v5_b2e4 = mul i32 %v2_b2e4, 4
  %v6_b2e4 = add i32 %v5_b2e4, %v2_b02c
  %v7_b2e4 = inttoptr i32 %v6_b2e4 to i32*
  store i32 %v2_b2d8, i32* %v7_b2e4, align 4
  %v0_b2e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b2e8 = load i32, i32* %r3.global-to-local, align 4
  %v4_b2e8 = mul i32 %v1_b2e8, 4
  %v5_b2e8 = add i32 %v4_b2e8, %v0_b2e8
  %v6_b2e8 = inttoptr i32 %v5_b2e8 to i32*
  %v7_b2e8 = load i32, i32* %v6_b2e8, align 4
  store i32 %v7_b2e8, i32* %r4.global-to-local, align 4
  %v1_b2ec = inttoptr i32 %v7_b2e8 to i8*
  %v2_b2ec = load i8, i8* %v1_b2ec, align 1
  %tmp = urem i8 %v2_b2ec, 16
  %v1_b2f0 = zext i8 %tmp to i32
  %v1_b2f4 = or i32 %v1_b2f0, 64
  store i32 %v1_b2f4, i32* %r2.global-to-local, align 4
  %v1_b2f8 = trunc i32 %v1_b2f4 to i8
  store i8 %v1_b2f8, i8* %v1_b2ec, align 1
  %v0_b2fc = load i32, i32* %r4.global-to-local, align 4
  %v1_b2fc = inttoptr i32 %v0_b2fc to i8*
  %v2_b2fc = load i8, i8* %v1_b2fc, align 1
  %v1_b300 = and i8 %v2_b2fc, -16
  %v1_b304 = or i8 %v1_b300, 5
  store i32 %v1_b0ac, i32* %r2.global-to-local, align 4
  store i8 %v1_b304, i8* %v1_b2fc, align 1
  %v2_b314 = load i32, i32* %r4.global-to-local, align 4
  %v3_b314 = add i32 %v2_b314, 1
  %v4_b314 = inttoptr i32 %v3_b314 to i8*
  store i8 %v5_b064, i8* %v4_b314, align 1
  store i32 %v4_b318, i32* %r1.global-to-local, align 4
  %v2_b31c = load i32, i32* %r4.global-to-local, align 4
  %v3_b31c = add i32 %v2_b31c, 8
  %v4_b31c = inttoptr i32 %v3_b31c to i8*
  store i8 %v5_b09c, i8* %v4_b31c, align 1
  store i32 %v4_b320, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_b328 = load i32, i32* %r2.global-to-local, align 4
  %v9_b328 = icmp eq i32 %v0_b328, 0
  store i1 %v9_b328, i1* %cpsr_z.global-to-local, align 1
  %v2_b32c = load i32, i32* %r4.global-to-local, align 4
  %v3_b32c = add i32 %v2_b32c, 3
  %v4_b32c = inttoptr i32 %v3_b32c to i8*
  store i8 %v1_b32c, i8* %v4_b32c, align 1
  store i32 %v4_b330, i32* %r2.global-to-local, align 4
  %v0_b334 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b334, label %.thread23, label %.thread

.thread:                                          ; preds = %dec_label_pc_b2cc
  %v1_b334 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_b334, i32* %r3.global-to-local, align 4
  %v2_b338 = trunc i32 %v1_b334 to i8
  %v3_b338 = load i32, i32* %r4.global-to-local, align 4
  %v4_b338 = add i32 %v3_b338, 7
  %v5_b338 = inttoptr i32 %v4_b338 to i8*
  store i8 %v2_b338, i8* %v5_b338, align 1
  %v0_b33c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b33c.pr.pr, label %.thread23, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b340 = load i32, i32* %r4.global-to-local, align 4
  %v4_b340 = add i32 %v3_b340, 6
  %v5_b340 = inttoptr i32 %v4_b340 to i8*
  store i8 64, i8* %v5_b340, align 1
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_b2cc, %.thread, %bb
  %v0_b344 = load i32, i32* %r2.global-to-local, align 4
  %v1_b344 = trunc i32 %v0_b344 to i8
  %v2_b344 = load i32, i32* %r4.global-to-local, align 4
  %v3_b344 = add i32 %v2_b344, 2
  %v4_b344 = inttoptr i32 %v3_b344 to i8*
  store i8 %v1_b344, i8* %v4_b344, align 1
  store i32 %v3_b27c, i32* %r2.global-to-local, align 4
  store i32 %v4_b260, i32* %r1.global-to-local, align 4
  %v2_b354 = load i32, i32* %r4.global-to-local, align 4
  %v3_b354 = add i32 %v2_b354, 9
  %v4_b354 = inttoptr i32 %v3_b354 to i8*
  store i8 47, i8* %v4_b354, align 1
  %v0_b358 = load i32, i32* %r2.global-to-local, align 4
  %v1_b358 = trunc i32 %v0_b358 to i8
  %v2_b358 = load i32, i32* %r4.global-to-local, align 4
  %v3_b358 = add i32 %v2_b358, 5
  %v4_b358 = inttoptr i32 %v3_b358 to i8*
  store i8 %v1_b358, i8* %v4_b358, align 1
  %v3_b35c = load i32, i32* %stack_var_-40, align 4
  %v5_b364 = mul i32 %v3_b35c, 24
  store i32 %v5_b364, i32* %r3.global-to-local, align 4
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  %v1_b36c = load i32, i32* %r4.global-to-local, align 4
  %v2_b36c = add i32 %v1_b36c, 12
  %v3_b36c = inttoptr i32 %v2_b36c to i32*
  store i32 %v5_b14c, i32* %v3_b36c, align 4
  %v0_b370 = load i32, i32* %r3.global-to-local, align 4
  %v1_b370 = load i32, i32* @sb, align 4
  %v2_b370 = add i32 %v1_b370, %v0_b370
  store i32 %v2_b370, i32* %r3.global-to-local, align 4
  %v0_b374 = load i32, i32* %r1.global-to-local, align 4
  %v1_b374 = trunc i32 %v0_b374 to i8
  %v2_b374 = load i32, i32* %r4.global-to-local, align 4
  %v3_b374 = add i32 %v2_b374, 4
  %v4_b374 = inttoptr i32 %v3_b374 to i8*
  store i8 %v1_b374, i8* %v4_b374, align 1
  %v0_b378 = load i32, i32* %r3.global-to-local, align 4
  %v1_b378 = add i32 %v0_b378, 16
  %v2_b378 = inttoptr i32 %v1_b378 to i32*
  %v3_b378 = load i32, i32* %v2_b378, align 4
  store i32 %v3_b378, i32* %r2.global-to-local, align 4
  %v0_b37c = load i32, i32* %r4.global-to-local, align 4
  %v1_b37c = add i32 %v0_b37c, 20
  store i32 %v1_b37c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_b384 = load i32, i32* %r0.global-to-local, align 4
  %v1_b384 = trunc i32 %v0_b384 to i8
  %v3_b384 = add i32 %v0_b37c, 23
  %v4_b384 = inttoptr i32 %v3_b384 to i8*
  store i8 %v1_b384, i8* %v4_b384, align 1
  %v0_b388 = load i32, i32* %r3.global-to-local, align 4
  %v1_b388 = trunc i32 %v0_b388 to i8
  %v2_b388 = load i32, i32* %r1.global-to-local, align 4
  %v3_b388 = add i32 %v2_b388, 2
  %v4_b388 = inttoptr i32 %v3_b388 to i8*
  store i8 %v1_b388, i8* %v4_b388, align 1
  %v0_b38c = load i32, i32* %r4.global-to-local, align 4
  %v1_b38c = add i32 %v0_b38c, 24
  %v2_b38c = inttoptr i32 %v1_b38c to i8*
  %v3_b38c = load i8, i8* %v2_b38c, align 1
  %tmp104 = urem i8 %v3_b38c, 16
  %v1_b390 = zext i8 %tmp104 to i32
  %v1_b394 = or i32 %v1_b390, 64
  store i32 %v1_b394, i32* %r3.global-to-local, align 4
  %v1_b398 = trunc i32 %v1_b394 to i8
  store i8 %v1_b398, i8* %v2_b38c, align 1
  %v0_b39c = load i32, i32* %r2.global-to-local, align 4
  %v1_b39c = load i32, i32* %r4.global-to-local, align 4
  %v2_b39c = add i32 %v1_b39c, 16
  %v3_b39c = inttoptr i32 %v2_b39c to i32*
  store i32 %v0_b39c, i32* %v3_b39c, align 4
  %v0_b3a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b3a0 = add i32 %v0_b3a0, 24
  %v2_b3a0 = inttoptr i32 %v1_b3a0 to i8*
  %v3_b3a0 = load i8, i8* %v2_b3a0, align 1
  %v1_b3a4 = and i8 %v3_b3a0, -16
  %v1_b3a8 = or i8 %v1_b3a4, 5
  store i8 %v1_b3a8, i8* %v2_b3a0, align 1
  %v0_b3b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b3b4 = add i32 %v0_b3b4, 24
  store i32 %v1_b3b4, i32* @r5, align 4
  %v3_b3b8 = add i32 %v0_b3b4, 25
  %v4_b3b8 = inttoptr i32 %v3_b3b8 to i8*
  store i8 %v5_b064, i8* %v4_b3b8, align 1
  store i32 %v3_b288, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_b298, i32* %r2.global-to-local, align 4
  %v2_b3c8 = load i32, i32* @r5, align 4
  %v3_b3c8 = add i32 %v2_b3c8, 4
  %v4_b3c8 = inttoptr i32 %v3_b3c8 to i8*
  store i8 %v5_b240, i8* %v4_b3c8, align 1
  %v0_b3cc = load i32, i32* %r1.global-to-local, align 4
  %v1_b3cc = trunc i32 %v0_b3cc to i8
  %v2_b3cc = load i32, i32* @r5, align 4
  %v3_b3cc = add i32 %v2_b3cc, 2
  %v4_b3cc = inttoptr i32 %v3_b3cc to i8*
  store i8 %v1_b3cc, i8* %v4_b3cc, align 1
  %v0_b3d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3d0, label %bb91, label %bb90

bb90:                                             ; preds = %.thread23
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %.thread23, %bb90
  store i32 %v3_b29c, i32* %r1.global-to-local, align 4
  %v0_b3d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3d8 = trunc i32 %v0_b3d8 to i8
  %v2_b3d8 = load i32, i32* @r5, align 4
  %v3_b3d8 = add i32 %v2_b3d8, 3
  %v4_b3d8 = inttoptr i32 %v3_b3d8 to i8*
  store i8 %v1_b3d8, i8* %v4_b3d8, align 1
  store i32 %v4_b318, i32* %r2.global-to-local, align 4
  %v0_b3e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3e0, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  %v1_b3e0 = load i32, i32* %r3.global-to-local, align 4
  %v2_b3e0 = trunc i32 %v1_b3e0 to i8
  %v3_b3e0 = load i32, i32* @r5, align 4
  %v4_b3e0 = add i32 %v3_b3e0, 6
  %v5_b3e0 = inttoptr i32 %v4_b3e0 to i8*
  store i8 %v2_b3e0, i8* %v5_b3e0, align 1
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_b3e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_b3e8 = trunc i32 %v0_b3e8 to i8
  %v2_b3e8 = load i32, i32* @r5, align 4
  %v3_b3e8 = add i32 %v2_b3e8, 5
  %v4_b3e8 = inttoptr i32 %v3_b3e8 to i8*
  store i8 %v1_b3e8, i8* %v4_b3e8, align 1
  %v0_b3ec = load i32, i32* %r2.global-to-local, align 4
  %v1_b3ec = trunc i32 %v0_b3ec to i8
  %v2_b3ec = load i32, i32* @r5, align 4
  %v3_b3ec = add i32 %v2_b3ec, 8
  %v4_b3ec = inttoptr i32 %v3_b3ec to i8*
  store i8 %v1_b3ec, i8* %v4_b3ec, align 1
  %v0_b3f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3f0, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_b3f0 = load i32, i32* %r0.global-to-local, align 4
  %v2_b3f0 = trunc i32 %v1_b3f0 to i8
  %v3_b3f0 = load i32, i32* @r5, align 4
  %v4_b3f0 = add i32 %v3_b3f0, 7
  %v5_b3f0 = inttoptr i32 %v4_b3f0 to i8*
  store i8 %v2_b3f0, i8* %v5_b3f0, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  %v0_b3f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b3f4 = trunc i32 %v0_b3f4 to i8
  %v2_b3f4 = load i32, i32* @r5, align 4
  %v3_b3f4 = add i32 %v2_b3f4, 9
  %v4_b3f4 = inttoptr i32 %v3_b3f4 to i8*
  store i8 %v1_b3f4, i8* %v4_b3f4, align 1
  %v0_b3f8 = call i32 @function_fc1c()
  store i32 %v0_b3f8, i32* %r0.global-to-local, align 4
  store i32 %v1_b1ac, i32* %r1.global-to-local, align 4
  store i1 %v2_b404, i1* %cpsr_z.global-to-local, align 1
  %v1_b408 = sub i32 1023, %v0_b3f8
  store i32 %v1_b408, i32* %r3.global-to-local, align 4
  br i1 %v2_b404, label %.thread24, label %.thread25

.thread24:                                        ; preds = %bb95
  %v2_b410 = load i32, i32* @r5, align 4
  %v3_b410 = add i32 %v2_b410, 16
  %v4_b410 = inttoptr i32 %v3_b410 to i32*
  store i32 %v1_b408, i32* %v4_b410, align 4
  br label %bb96

.thread25:                                        ; preds = %bb95
  %v1_b40c = load i32, i32* %r4.global-to-local, align 4
  %v2_b40c = add i32 %v1_b40c, 16
  %v3_b40c = inttoptr i32 %v2_b40c to i32*
  %v4_b40c = load i32, i32* %v3_b40c, align 4
  store i32 %v4_b40c, i32* %r3.global-to-local, align 4
  %v2_b414 = load i32, i32* @r5, align 4
  %v3_b414 = add i32 %v2_b414, 16
  %v4_b414 = inttoptr i32 %v3_b414 to i32*
  store i32 %v4_b40c, i32* %v4_b414, align 4
  br label %bb96

bb96:                                             ; preds = %.thread24, %.thread25
  store i32 %v4_b294, i32* %r3.global-to-local, align 4
  %v0_b41c = load i32, i32* %r4.global-to-local, align 4
  %v1_b41c = add i32 %v0_b41c, 44
  store i32 %v1_b41c, i32* @r6, align 4
  %v1_b420 = load i32, i32* @r5, align 4
  %v2_b420 = add i32 %v1_b420, 12
  %v3_b420 = inttoptr i32 %v2_b420 to i32*
  store i32 %v0_b3f8, i32* %v3_b420, align 4
  store i32 %v4_b424, i32* %r2.global-to-local, align 4
  %v0_b428 = load i32, i32* %r3.global-to-local, align 4
  %v1_b428 = trunc i32 %v0_b428 to i8
  %v2_b428 = load i32, i32* @r6, align 4
  %v3_b428 = inttoptr i32 %v2_b428 to i8*
  store i8 %v1_b428, i8* %v3_b428, align 1
  %v3_b42c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b42c, i32* %r3.global-to-local, align 4
  %v0_b430 = load i32, i32* %r2.global-to-local, align 4
  %v1_b430 = trunc i32 %v0_b430 to i8
  %v2_b430 = load i32, i32* @r6, align 4
  %v3_b430 = add i32 %v2_b430, 5
  %v4_b430 = inttoptr i32 %v3_b430 to i8*
  store i8 %v1_b430, i8* %v4_b430, align 1
  %v0_b434 = load i32, i32* %r3.global-to-local, align 4
  %v1_b434 = add i32 %v0_b434, 1
  store i32 %v1_b434, i32* @r4, align 4
  store i32 %v3_b2ac, i32* %r1.global-to-local, align 4
  store i32 %v7_b43c, i32* %r2.global-to-local, align 4
  %v1_b440 = load i32, i32* @fp, align 4
  %v9_b440 = icmp eq i32 %v1_b434, %v1_b440
  store i1 %v9_b440, i1* %cpsr_z.global-to-local, align 1
  %v2_b444 = load i32, i32* @r6, align 4
  %v3_b444 = add i32 %v2_b444, 1
  %v4_b444 = inttoptr i32 %v3_b444 to i8*
  store i8 %v5_b2bc, i8* %v4_b444, align 1
  %v0_b448 = load i32, i32* @r7, align 4
  %v1_b448 = trunc i32 %v0_b448 to i8
  %v2_b448 = load i32, i32* @r6, align 4
  %v3_b448 = add i32 %v2_b448, 2
  %v4_b448 = inttoptr i32 %v3_b448 to i8*
  store i8 %v1_b448, i8* %v4_b448, align 1
  %v0_b44c = load i32, i32* %r2.global-to-local, align 4
  %v1_b44c = trunc i32 %v0_b44c to i8
  %v2_b44c = load i32, i32* @r6, align 4
  %v3_b44c = add i32 %v2_b44c, 3
  %v4_b44c = inttoptr i32 %v3_b44c to i8*
  store i8 %v1_b44c, i8* %v4_b44c, align 1
  %v0_b450 = load i32, i32* %r8.global-to-local, align 4
  %v1_b450 = trunc i32 %v0_b450 to i8
  %v2_b450 = load i32, i32* @r6, align 4
  %v3_b450 = add i32 %v2_b450, 4
  %v4_b450 = inttoptr i32 %v3_b450 to i8*
  store i8 %v1_b450, i8* %v4_b450, align 1
  %v0_b454 = load i32, i32* @r4, align 4
  store i32 %v0_b454, i32* %stack_var_-40, align 4
  %v5_b458 = icmp slt i32 %v1_b434, %v1_b440
  br i1 %v5_b458, label %dec_label_pc_b2cc, label %dec_label_pc_b45c

dec_label_pc_b45c:                                ; preds = %bb96
  %v1_b464 = add i32 %v5_b0f8, 8
  store i32 %v1_b464, i32* %r3.global-to-local, align 4
  %v1_b468 = add i32 %v5_b0f8, 52
  store i32 %v1_b468, i32* %r1.global-to-local, align 4
  %v0_b474.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_b474.preheader

dec_label_pc_b474.preheader:                      ; preds = %dec_label_pc_b45c, %dec_label_pc_b708
  %v0_b474.pre = phi i32 [ %v0_b474.pre.pre, %dec_label_pc_b45c ], [ %v0_b1bc, %dec_label_pc_b708 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_b468, %dec_label_pc_b45c ], [ %v1_b714, %dec_label_pc_b708 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_b464, %dec_label_pc_b45c ], [ %v1_b710, %dec_label_pc_b708 ]
  %v2_b6ec = icmp eq i32 %v1_b118, 0
  %v2_b4ec = icmp eq i32 %v1_b1ac, 0
  %v2_b4b8 = icmp eq i32 %v5_b14c, -1
  %v7_b4b8 = icmp eq i32 %v5_b14c, -1
  br label %dec_label_pc_b474

dec_label_pc_b474:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b474.preheader
  %v0_b474 = phi i32 [ %v0_b474.pre, %dec_label_pc_b474.preheader ], [ %v1_b5cc, %dec_label_pc_b508 ]
  %v2_b474 = icmp eq i32 %v0_b474, 0
  store i1 %v2_b474, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_b474, 1
  br label %dec_label_pc_b47c

dec_label_pc_b47c:                                ; preds = %dec_label_pc_b47c, %dec_label_pc_b474
  br i1 %tmp97, label %dec_label_pc_b47c, label %dec_label_pc_b480

dec_label_pc_b480:                                ; preds = %dec_label_pc_b47c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_b48c

dec_label_pc_b48c:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b480
  %v1_b4a0 = phi i32 [ %v1_b5c8, %dec_label_pc_b508 ], [ 0, %dec_label_pc_b480 ]
  %v5_b490 = mul i32 %v1_b4a0, 24
  %v1_b494 = load i32, i32* @sb, align 4
  %v2_b494 = add i32 %v1_b494, %v5_b490
  store i32 %v2_b494, i32* %r3.global-to-local, align 4
  store i32 %v2_b02c, i32* %r1.global-to-local, align 4
  %v1_b49c = add i32 %v2_b494, 20
  %v2_b49c = inttoptr i32 %v1_b49c to i8*
  %v3_b49c = load i8, i8* %v2_b49c, align 1
  %v4_b49c = zext i8 %v3_b49c to i32
  store i32 %v4_b49c, i32* %r2.global-to-local, align 4
  %v4_b4a0 = mul i32 %v1_b4a0, 4
  %v5_b4a0 = add i32 %v4_b4a0, %v2_b02c
  %v6_b4a0 = inttoptr i32 %v5_b4a0 to i32*
  %v7_b4a0 = load i32, i32* %v6_b4a0, align 4
  store i32 %v7_b4a0, i32* @r5, align 4
  %v7_b4a4 = icmp eq i8 %v3_b49c, 31
  store i1 %v7_b4a4, i1* %cpsr_z.global-to-local, align 1
  %v1_b4a8 = add i32 %v7_b4a0, 24
  store i32 %v1_b4a8, i32* @r6, align 4
  %v1_b4ac = add i32 %v7_b4a0, 44
  store i32 %v1_b4ac, i32* @r7, align 4
  %tmp105 = icmp ult i8 %v3_b49c, 32
  br i1 %tmp105, label %dec_label_pc_b5ec, label %dec_label_pc_b4b4

dec_label_pc_b4b4:                                ; preds = %dec_label_pc_b48c
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  store i1 %v7_b4b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b4b8, label %dec_label_pc_b654, label %dec_label_pc_b4c0

dec_label_pc_b4c0:                                ; preds = %dec_label_pc_b5ec, %dec_label_pc_b4b4
  store i32 65535, i32* @r4, align 4
  %v0_b4c8 = load i32, i32* @sl, align 4
  %v9_b4c8 = icmp eq i32 %v0_b4c8, 65535
  store i1 %v9_b4c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4c8, label %dec_label_pc_b66c, label %dec_label_pc_b4d0

dec_label_pc_b4d0:                                ; preds = %dec_label_pc_b654.dec_label_pc_b4d0_crit_edge, %dec_label_pc_b4c0
  %v1_b4d4 = phi i32 [ %v1_b4d4.pre, %dec_label_pc_b654.dec_label_pc_b4d0_crit_edge ], [ 65535, %dec_label_pc_b4c0 ]
  store i32 %v3_b1b4, i32* %r3.global-to-local, align 4
  %v9_b4d4 = icmp eq i32 %v3_b1b4, %v1_b4d4
  store i1 %v9_b4d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4d4, label %dec_label_pc_b6a4, label %dec_label_pc_b4dc

dec_label_pc_b4dc:                                ; preds = %dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge, %dec_label_pc_b4d0
  %v1_b4e0 = phi i32 [ %v1_b4e0.pre, %dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge ], [ %v1_b4d4, %dec_label_pc_b4d0 ]
  store i32 %v3_b1b8, i32* %r1.global-to-local, align 4
  %v9_b4e0 = icmp eq i32 %v3_b1b8, %v1_b4e0
  store i1 %v9_b4e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4e0, label %dec_label_pc_b6c0, label %dec_label_pc_b4e8

dec_label_pc_b4e8:                                ; preds = %dec_label_pc_b6a4, %dec_label_pc_b4dc
  store i32 %v1_b1ac, i32* %r2.global-to-local, align 4
  store i1 %v2_b4ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b4ec, label %dec_label_pc_b6e4, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_b4e8
  %v1_b4f0 = load i32, i32* @r5, align 4
  %v2_b4f0 = add i32 %v1_b4f0, 16
  %v3_b4f0 = inttoptr i32 %v2_b4f0 to i32*
  %v4_b4f0 = load i32, i32* %v3_b4f0, align 4
  store i32 %v4_b4f0, i32* %r3.global-to-local, align 4
  %v2_b4f4 = load i32, i32* @r6, align 4
  %v3_b4f4 = add i32 %v2_b4f4, 16
  %v4_b4f4 = inttoptr i32 %v3_b4f4 to i32*
  store i32 %v4_b4f0, i32* %v4_b4f4, align 4
  br label %dec_label_pc_b4fc

dec_label_pc_b4fc:                                ; preds = %bb102, %.thread26
  store i32 %v1_b118, i32* %r3.global-to-local, align 4
  store i1 %v2_b6ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b6ec, label %dec_label_pc_b508, label %dec_label_pc_b6f8

dec_label_pc_b508:                                ; preds = %dec_label_pc_b4fc, %dec_label_pc_b6e4, %dec_label_pc_b6f8
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b50c = load i32, i32* @r8, align 4
  %v1_b50c = trunc i32 %v0_b50c to i8
  %v2_b50c = load i32, i32* @r5, align 4
  %v3_b50c = add i32 %v2_b50c, 10
  %v4_b50c = inttoptr i32 %v3_b50c to i8*
  store i8 %v1_b50c, i8* %v4_b50c, align 1
  %v0_b510 = load i32, i32* @r8, align 4
  %v1_b510 = trunc i32 %v0_b510 to i8
  %v2_b510 = load i32, i32* @r5, align 4
  %v3_b510 = add i32 %v2_b510, 11
  %v4_b510 = inttoptr i32 %v3_b510 to i8*
  store i8 %v1_b510, i8* %v4_b510, align 1
  %v0_b514 = load i32, i32* @r5, align 4
  store i32 %v0_b514, i32* @r0, align 4
  %v2_b518 = call i32 @function_e444(i32 %v0_b514, i32 20)
  %v3_b518 = trunc i32 %v2_b518 to i8
  %v4_b51c = sdiv i32 %v2_b518, 256
  store i32 %v4_b51c, i32* %r3.global-to-local, align 4
  %v1_b520 = trunc i32 %v4_b51c to i8
  %v2_b520 = load i32, i32* @r5, align 4
  %v3_b520 = add i32 %v2_b520, 11
  %v4_b520 = inttoptr i32 %v3_b520 to i8*
  store i8 %v1_b520, i8* %v4_b520, align 1
  %v3_b524 = load i32, i32* @r5, align 4
  %v4_b524 = add i32 %v3_b524, 10
  %v5_b524 = inttoptr i32 %v4_b524 to i8*
  store i8 %v3_b518, i8* %v5_b524, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b52c = load i32, i32* @r8, align 4
  %v1_b52c = trunc i32 %v0_b52c to i8
  %v2_b52c = load i32, i32* @r6, align 4
  %v3_b52c = add i32 %v2_b52c, 10
  %v4_b52c = inttoptr i32 %v3_b52c to i8*
  store i8 %v1_b52c, i8* %v4_b52c, align 1
  %v0_b530 = load i32, i32* @r8, align 4
  %v1_b530 = trunc i32 %v0_b530 to i8
  %v2_b530 = load i32, i32* @r6, align 4
  %v3_b530 = add i32 %v2_b530, 11
  %v4_b530 = inttoptr i32 %v3_b530 to i8*
  store i8 %v1_b530, i8* %v4_b530, align 1
  %v0_b534 = load i32, i32* @r6, align 4
  store i32 %v0_b534, i32* @r0, align 4
  %v2_b538 = call i32 @function_e444(i32 %v0_b534, i32 20)
  %v3_b538 = trunc i32 %v2_b538 to i8
  store i32 %v2_b538, i32* %r0.global-to-local, align 4
  %v4_b53c = sdiv i32 %v2_b538, 256
  store i32 %v4_b53c, i32* %r3.global-to-local, align 4
  %v3_b540 = load i32, i32* @r6, align 4
  %v4_b540 = add i32 %v3_b540, 10
  %v5_b540 = inttoptr i32 %v4_b540 to i8*
  store i8 %v3_b538, i8* %v5_b540, align 1
  %v0_b544 = load i32, i32* %r3.global-to-local, align 4
  %v1_b544 = trunc i32 %v0_b544 to i8
  %v2_b544 = load i32, i32* @r6, align 4
  %v3_b544 = add i32 %v2_b544, 11
  %v4_b544 = inttoptr i32 %v3_b544 to i8*
  store i8 %v1_b544, i8* %v4_b544, align 1
  %v0_b548 = load i32, i32* @r7, align 4
  %v1_b548 = add i32 %v0_b548, 4
  %v2_b548 = inttoptr i32 %v1_b548 to i8*
  %v3_b548 = load i8, i8* %v2_b548, align 1
  %v4_b548 = zext i8 %v3_b548 to i32
  store i32 %v4_b548, i32* %r3.global-to-local, align 4
  %v1_b54c = add i32 %v0_b548, 5
  %v2_b54c = inttoptr i32 %v1_b54c to i8*
  %v3_b54c = load i8, i8* %v2_b54c, align 1
  %v4_b54c = zext i8 %v3_b54c to i32
  store i32 %v0_b548, i32* @r1, align 4
  %v4_b554 = mul nuw nsw i32 %v4_b54c, 256
  %v5_b554 = or i32 %v4_b554, %v4_b548
  store i32 %v5_b554, i32* %r2.global-to-local, align 4
  %v0_b558 = load i32, i32* @r8, align 4
  %v1_b558 = trunc i32 %v0_b558 to i8
  %v3_b558 = add i32 %v0_b548, 6
  %v4_b558 = inttoptr i32 %v3_b558 to i8*
  store i8 %v1_b558, i8* %v4_b558, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_b560 = load i32, i32* @r8, align 4
  %v1_b560 = trunc i32 %v0_b560 to i8
  %v2_b560 = load i32, i32* @r7, align 4
  %v3_b560 = add i32 %v2_b560, 7
  %v4_b560 = inttoptr i32 %v3_b560 to i8*
  store i8 %v1_b560, i8* %v4_b560, align 1
  %v0_b564 = load i32, i32* @r6, align 4
  store i32 %v0_b564, i32* %r0.global-to-local, align 4
  %v4_b568 = call i32 @function_e4a0(i32 %v0_b564, i32 %v0_b548, i32 %v5_b554, i32 %stack_var_-152.0.ph)
  %v5_b568 = trunc i32 %v4_b568 to i8
  store i32 %v4_b568, i32* %r0.global-to-local, align 4
  %v3_b56c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b56c, i32* %r3.global-to-local, align 4
  %v3_b570 = mul i32 %v3_b56c, 32
  store i32 %v3_b570, i32* %r2.global-to-local, align 4
  %v0_b574 = load i32, i32* @r5, align 4
  %v1_b574 = add i32 %v0_b574, 16
  %v2_b574 = inttoptr i32 %v1_b574 to i32*
  %v3_b574 = load i32, i32* %v2_b574, align 4
  store i32 %v3_b574, i32* %r1.global-to-local, align 4
  %v5_b578 = mul i32 %v3_b56c, 24
  store i32 %v5_b578, i32* %r2.global-to-local, align 4
  %v4_b57c42 = udiv i32 %v4_b568, 256
  %v1_b580 = trunc i32 %v4_b57c42 to i8
  %v2_b580 = load i32, i32* @r7, align 4
  %v3_b580 = add i32 %v2_b580, 7
  %v4_b580 = inttoptr i32 %v3_b580 to i8*
  store i8 %v1_b580, i8* %v4_b580, align 1
  %v0_b584 = load i32, i32* %r2.global-to-local, align 4
  %v1_b584 = load i32, i32* @sb, align 4
  %v2_b584 = add i32 %v1_b584, %v0_b584
  store i32 %v2_b584, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b58c = load i32, i32* @r7, align 4
  %v4_b58c = add i32 %v3_b58c, 6
  %v5_b58c = inttoptr i32 %v4_b58c to i8*
  store i8 %v5_b568, i8* %v5_b58c, align 1
  %v0_b590 = load i32, i32* %r1.global-to-local, align 4
  %v1_b590 = load i32, i32* %lr.global-to-local, align 4
  %v2_b590 = add i32 %v1_b590, 4
  %v3_b590 = inttoptr i32 %v2_b590 to i32*
  store i32 %v0_b590, i32* %v3_b590, align 4
  %v0_b594 = load i32, i32* %r3.global-to-local, align 4
  %v1_b594 = trunc i32 %v0_b594 to i8
  %v2_b594 = load i32, i32* %r2.global-to-local, align 4
  %v3_b594 = load i32, i32* @sb, align 4
  %v4_b594 = add i32 %v3_b594, %v2_b594
  %v5_b594 = inttoptr i32 %v4_b594 to i8*
  store i8 %v1_b594, i8* %v5_b594, align 1
  %v0_b598 = load i32, i32* @r8, align 4
  %v1_b598 = trunc i32 %v0_b598 to i8
  %v2_b598 = load i32, i32* %lr.global-to-local, align 4
  %v3_b598 = add i32 %v2_b598, 2
  %v4_b598 = inttoptr i32 %v3_b598 to i8*
  store i8 %v1_b598, i8* %v4_b598, align 1
  %v0_b59c = load i32, i32* @r8, align 4
  %v1_b59c = trunc i32 %v0_b59c to i8
  %v2_b59c = load i32, i32* %lr.global-to-local, align 4
  %v3_b59c = add i32 %v2_b59c, 1
  %v4_b59c = inttoptr i32 %v3_b59c to i8*
  store i8 %v1_b59c, i8* %v4_b59c, align 1
  %v0_b5a0 = load i32, i32* @r8, align 4
  %v1_b5a0 = trunc i32 %v0_b5a0 to i8
  %v2_b5a0 = load i32, i32* %lr.global-to-local, align 4
  %v3_b5a0 = add i32 %v2_b5a0, 3
  %v4_b5a0 = inttoptr i32 %v3_b5a0 to i8*
  store i8 %v1_b5a0, i8* %v4_b5a0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b5ac = load i32, i32* @r5, align 4
  store i32 %v0_b5ac, i32* %r1.global-to-local, align 4
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_b5b8 = load i32, i32* %lr.global-to-local, align 4
  %v6_b5c0 = inttoptr i32 %v0_b5ac to i32*
  %v7_b5c0 = call i32 @function_13d4c(i32 %v3_b160, i32* %v6_b5c0, i32 %stack_var_-120.0.ph, i32 16384, i32 %v0_b5b8, i32 16)
  %v3_b5c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b5c4, i32* %r3.global-to-local, align 4
  %v1_b5c8 = add i32 %v3_b5c4, 1
  store i32 %v1_b5c8, i32* %r0.global-to-local, align 4
  %v1_b5cc = load i32, i32* @fp, align 4
  %v9_b5cc = icmp eq i32 %v1_b5c8, %v1_b5cc
  store i1 %v9_b5cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b5c8, i32* %stack_var_-40, align 4
  %v6_b5d4 = icmp slt i32 %v1_b5c8, %v1_b5cc
  br i1 %v6_b5d4, label %dec_label_pc_b48c, label %dec_label_pc_b474

dec_label_pc_b5dc:                                ; preds = %dec_label_pc_b170
  store i32 %v3_b160, i32* %r0.global-to-local, align 4
  %v1_b5e0 = call i32 @function_134b0(i32 %v3_b160)
  store i32 %v1_b5e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b5e4

dec_label_pc_b5e4:                                ; preds = %dec_label_pc_b00c, %dec_label_pc_b5dc
  %v29_b5e8 = phi i32 [ %v3_b160, %dec_label_pc_b00c ], [ %v1_b5e0, %dec_label_pc_b5dc ]
  store i32 %v3_b00c, i32* %r4.global-to-local, align 4
  store i32 %v15_b00c, i32* %r8.global-to-local, align 4
  ret i32 %v29_b5e8

dec_label_pc_b5ec:                                ; preds = %dec_label_pc_b48c
  %v1_b5ec = add i32 %v2_b494, 16
  %v2_b5ec = inttoptr i32 %v1_b5ec to i32*
  %v3_b5ec = load i32, i32* %v2_b5ec, align 4
  store i32 %v3_b5ec, i32* %r4.global-to-local, align 4
  %v0_b5f0 = call i32 @function_fc1c()
  store i32 %v0_b5f0, i32* %r0.global-to-local, align 4
  %v3_b5f4 = load i32, i32* %stack_var_-40, align 4
  %v5_b5fc = mul i32 %v3_b5f4, 24
  %v0_b600 = load i32, i32* %r4.global-to-local, align 4
  %v1_b604 = load i32, i32* @sb, align 4
  %v2_b604 = add i32 %v1_b604, %v5_b5fc
  store i32 %v2_b604, i32* %r1.global-to-local, align 4
  %v1_b608 = and i32 %v0_b600, 65280
  store i32 %v1_b608, i32* %r3.global-to-local, align 4
  %v1_b600 = udiv i32 %v0_b600, 256
  %v3_b60c = and i32 %v1_b600, 65280
  store i32 %v3_b60c, i32* %r2.global-to-local, align 4
  %v1_b614 = add i32 %v2_b604, 20
  %v2_b614 = inttoptr i32 %v1_b614 to i8*
  %v3_b614 = load i8, i8* %v2_b614, align 1
  %v4_b614 = zext i8 %v3_b614 to i32
  store i32 %v4_b614, i32* %lr.global-to-local, align 4
  %v2_b620 = call i32 @llvm.bswap.i32(i32 %v0_b600)
  %v7_b624 = lshr i32 %v0_b5f0, %v4_b614
  %v8_b624 = add i32 %v7_b624, %v2_b620
  %v3_b630 = mul i32 %v8_b624, 16777216
  %v1_b634 = and i32 %v8_b624, 65280
  store i32 %v1_b634, i32* %r0.global-to-local, align 4
  store i32 %v5_b14c, i32* %r2.global-to-local, align 4
  %v4_b640 = mul nuw nsw i32 %v1_b634, 256
  %v5_b640 = or i32 %v4_b640, %v3_b630
  store i32 %v5_b640, i32* %r1.global-to-local, align 4
  %v2_b644 = call i32 @llvm.bswap.i32(i32 %v8_b624)
  store i32 %v2_b644, i32* %r3.global-to-local, align 4
  store i1 %v7_b4b8, i1* %cpsr_z.global-to-local, align 1
  %v1_b64c = load i32, i32* @r5, align 4
  %v2_b64c = add i32 %v1_b64c, 16
  %v3_b64c = inttoptr i32 %v2_b64c to i32*
  store i32 %v2_b644, i32* %v3_b64c, align 4
  br i1 %v2_b4b8, label %dec_label_pc_b654, label %dec_label_pc_b4c0

dec_label_pc_b654:                                ; preds = %dec_label_pc_b5ec, %dec_label_pc_b4b4
  %v0_b654 = call i32 @function_fc1c()
  store i32 %v0_b654, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_b660 = load i32, i32* @sl, align 4
  %v9_b660 = icmp eq i32 %v0_b660, 65535
  store i1 %v9_b660, i1* %cpsr_z.global-to-local, align 1
  %v1_b664 = load i32, i32* @r5, align 4
  %v2_b664 = add i32 %v1_b664, 12
  %v3_b664 = inttoptr i32 %v2_b664 to i32*
  store i32 %v0_b654, i32* %v3_b664, align 4
  br i1 %v9_b660, label %dec_label_pc_b66c, label %dec_label_pc_b654.dec_label_pc_b4d0_crit_edge

dec_label_pc_b654.dec_label_pc_b4d0_crit_edge:    ; preds = %dec_label_pc_b654
  %v1_b4d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b4d0

dec_label_pc_b66c:                                ; preds = %dec_label_pc_b654, %dec_label_pc_b4c0
  %v0_b66c = call i32 @function_fc1c()
  %v3_b674 = urem i32 %v0_b66c, 65536
  store i32 %v3_b674, i32* %r0.global-to-local, align 4
  %v3_b67815 = udiv i32 %v0_b66c, 256
  %v1_b67c = trunc i32 %v3_b67815 to i8
  %v2_b67c = load i32, i32* @r5, align 4
  %v3_b67c = add i32 %v2_b67c, 5
  %v4_b67c = inttoptr i32 %v3_b67c to i8*
  store i8 %v1_b67c, i8* %v4_b67c, align 1
  %v0_b680 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_b1b4, i32* %r3.global-to-local, align 4
  %v1_b688 = sub i32 999, %v0_b680
  store i32 %v1_b688, i32* %r2.global-to-local, align 4
  %v3_b68c = sdiv i32 %v1_b688, 256
  store i32 %v3_b68c, i32* %r1.global-to-local, align 4
  %v1_b690 = load i32, i32* @r4, align 4
  %v9_b690 = icmp eq i32 %v3_b1b4, %v1_b690
  store i1 %v9_b690, i1* %cpsr_z.global-to-local, align 1
  %v1_b694 = trunc i32 %v0_b680 to i8
  %v2_b694 = load i32, i32* @r5, align 4
  %v3_b694 = add i32 %v2_b694, 4
  %v4_b694 = inttoptr i32 %v3_b694 to i8*
  store i8 %v1_b694, i8* %v4_b694, align 1
  %v0_b698 = load i32, i32* %r1.global-to-local, align 4
  %v1_b698 = trunc i32 %v0_b698 to i8
  %v2_b698 = load i32, i32* @r6, align 4
  %v3_b698 = add i32 %v2_b698, 5
  %v4_b698 = inttoptr i32 %v3_b698 to i8*
  store i8 %v1_b698, i8* %v4_b698, align 1
  %v0_b69c = load i32, i32* %r2.global-to-local, align 4
  %v1_b69c = trunc i32 %v0_b69c to i8
  %v2_b69c = load i32, i32* @r6, align 4
  %v3_b69c = add i32 %v2_b69c, 4
  %v4_b69c = inttoptr i32 %v3_b69c to i8*
  store i8 %v1_b69c, i8* %v4_b69c, align 1
  %v0_b6a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6a0, label %dec_label_pc_b6a4, label %dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge

dec_label_pc_b66c.dec_label_pc_b4dc_crit_edge:    ; preds = %dec_label_pc_b66c
  %v1_b4e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b4dc

dec_label_pc_b6a4:                                ; preds = %dec_label_pc_b66c, %dec_label_pc_b4d0
  %v0_b6a4 = call i32 @function_fc1c()
  %v1_b6a4 = trunc i32 %v0_b6a4 to i8
  store i32 %v0_b6a4, i32* %r0.global-to-local, align 4
  store i32 %v3_b1b8, i32* %r1.global-to-local, align 4
  %v4_b6ac = sdiv i32 %v0_b6a4, 256
  store i32 %v4_b6ac, i32* %r3.global-to-local, align 4
  %v1_b6b0 = load i32, i32* @r4, align 4
  %v9_b6b0 = icmp eq i32 %v3_b1b8, %v1_b6b0
  store i1 %v9_b6b0, i1* %cpsr_z.global-to-local, align 1
  %v3_b6b4 = load i32, i32* @r5, align 4
  %v4_b6b4 = add i32 %v3_b6b4, 44
  %v5_b6b4 = inttoptr i32 %v4_b6b4 to i8*
  store i8 %v1_b6a4, i8* %v5_b6b4, align 1
  %v0_b6b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b6b8 = trunc i32 %v0_b6b8 to i8
  %v2_b6b8 = load i32, i32* @r7, align 4
  %v3_b6b8 = add i32 %v2_b6b8, 1
  %v4_b6b8 = inttoptr i32 %v3_b6b8 to i8*
  store i8 %v1_b6b8, i8* %v4_b6b8, align 1
  %v0_b6bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6bc, label %dec_label_pc_b6c0, label %dec_label_pc_b4e8

dec_label_pc_b6c0:                                ; preds = %dec_label_pc_b6a4, %dec_label_pc_b4dc
  %v0_b6c0 = call i32 @function_fc1c()
  %v1_b6c0 = trunc i32 %v0_b6c0 to i8
  store i32 %v0_b6c0, i32* %r0.global-to-local, align 4
  store i32 %v1_b1ac, i32* %r2.global-to-local, align 4
  %v4_b6c8 = sdiv i32 %v0_b6c0, 256
  store i32 %v4_b6c8, i32* %r3.global-to-local, align 4
  store i1 %v2_b4ec, i1* %cpsr_z.global-to-local, align 1
  %v1_b6d0 = trunc i32 %v4_b6c8 to i8
  %v2_b6d0 = load i32, i32* @r7, align 4
  %v3_b6d0 = add i32 %v2_b6d0, 3
  %v4_b6d0 = inttoptr i32 %v3_b6d0 to i8*
  store i8 %v1_b6d0, i8* %v4_b6d0, align 1
  %v0_b6d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6d4, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_b6c0
  %v1_b6d4 = load i32, i32* @r5, align 4
  %v2_b6d4 = add i32 %v1_b6d4, 16
  %v3_b6d4 = inttoptr i32 %v2_b6d4 to i32*
  %v4_b6d4 = load i32, i32* %v3_b6d4, align 4
  store i32 %v4_b6d4, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_b6c0, %bb100
  %v3_b6d8 = load i32, i32* @r7, align 4
  %v4_b6d8 = add i32 %v3_b6d8, 2
  %v5_b6d8 = inttoptr i32 %v4_b6d8 to i8*
  store i8 %v1_b6c0, i8* %v5_b6d8, align 1
  %v0_b6dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6dc, label %dec_label_pc_b6e4, label %bb102

bb102:                                            ; preds = %bb101
  %v1_b6dc = load i32, i32* %r3.global-to-local, align 4
  %v2_b6dc = load i32, i32* @r6, align 4
  %v3_b6dc = add i32 %v2_b6dc, 16
  %v4_b6dc = inttoptr i32 %v3_b6dc to i32*
  store i32 %v1_b6dc, i32* %v4_b6dc, align 4
  br label %dec_label_pc_b4fc

dec_label_pc_b6e4:                                ; preds = %dec_label_pc_b4e8, %bb101
  %v0_b6e4 = call i32 @function_fc1c()
  store i32 %v0_b6e4, i32* %r0.global-to-local, align 4
  store i32 %v1_b118, i32* %r3.global-to-local, align 4
  store i1 %v2_b6ec, i1* %cpsr_z.global-to-local, align 1
  %v1_b6f0 = load i32, i32* @r6, align 4
  %v2_b6f0 = add i32 %v1_b6f0, 16
  %v3_b6f0 = inttoptr i32 %v2_b6f0 to i32*
  store i32 %v0_b6e4, i32* %v3_b6f0, align 4
  br i1 %v2_b6ec, label %dec_label_pc_b508, label %dec_label_pc_b6f8

dec_label_pc_b6f8:                                ; preds = %dec_label_pc_b4fc, %dec_label_pc_b6e4
  %v0_b6f8 = load i32, i32* @r7, align 4
  %v1_b6f8 = add i32 %v0_b6f8, 8
  store i32 %v1_b6f8, i32* %r0.global-to-local, align 4
  store i32 %v5_b0f8, i32* @r1, align 4
  %v1_b700 = inttoptr i32 %v1_b6f8 to i8*
  %v2_b700 = call i32 @function_fdf8(i8* %v1_b700)
  store i32 %v2_b700, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b508

dec_label_pc_b708:                                ; preds = %dec_label_pc_b198
  %v1_b710 = add i32 %v5_b0f8, 8
  store i32 %v1_b710, i32* %r2.global-to-local, align 4
  %v1_b714 = add i32 %v5_b0f8, 52
  store i32 %v1_b714, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b474.preheader

; uselistorder directives
  uselistorder i32 %v1_b714, { 1, 0 }
  uselistorder i32 %v1_b710, { 1, 0 }
  uselistorder i32 %v4_b6c8, { 1, 0 }
  uselistorder i32 %v0_b6c0, { 0, 2, 1 }
  uselistorder i32 %v0_b6a4, { 0, 2, 1 }
  uselistorder i32 %v2_b644, { 1, 0 }
  uselistorder i32 %v8_b624, { 1, 2, 0 }
  uselistorder i32 %v0_b600, { 1, 0, 2 }
  uselistorder i32 %v1_b5cc, { 1, 2, 0 }
  uselistorder i32 %v1_b5c8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_b56c, { 1, 0, 2 }
  uselistorder i32 %v4_b568, { 0, 2, 1 }
  uselistorder i32 %v0_b548, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_b538, { 0, 2, 1 }
  uselistorder i32 %v4_b51c, { 1, 0 }
  uselistorder i32 %v7_b4a0, { 1, 0, 2 }
  uselistorder i32 %v0_b474, { 1, 0 }
  uselistorder i1 %v7_b4b8, { 2, 1, 0 }
  uselistorder i1 %v2_b6ec, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b434, { 1, 0, 2 }
  uselistorder i32 %v0_b3f8, { 1, 0, 2 }
  uselistorder i32 %v3_b2ac, { 0, 2, 1 }
  uselistorder i32 %v3_b26c, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0 }
  uselistorder i32 %v1_b224, { 1, 0 }
  uselistorder i32 %v1_b200, { 1, 0 }
  uselistorder i32 %v1_b1fc, { 0, 2, 1 }
  uselistorder i32 %v3_b1e0, { 2, 1, 0 }
  uselistorder i32 %v0_b1bc, { 1, 0, 2 }
  uselistorder i32 %v1_b1ac, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_b1a8, { 0, 2, 1 }
  uselistorder i32 %v0_b1a4, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_b190, { 1, 0 }
  uselistorder i1 %v7_b164, { 1, 0 }
  uselistorder i32 %v3_b160, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_b14c, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_b118, { 1, 0, 2 }
  uselistorder i32 %v5_b0f8, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 %v5_b09c, { 1, 0 }
  uselistorder i32 %v2_b02c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_b010, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 23, 19, 20, 21, 22, 26, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29 }
  uselistorder i8 47, { 9, 8, 0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder label %dec_label_pc_b6f8, { 1, 0 }
  uselistorder label %dec_label_pc_b6e4, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_b5e4, { 1, 0 }
  uselistorder label %dec_label_pc_b508, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b474.preheader, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %.thread23, { 2, 1, 0 }
}

define i32 @function_b728(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b728:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp39 = call i8 @__decompiler_undefined_function_1()
  %tmp40 = call i8 @__decompiler_undefined_function_1()
  %tmp41 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b72c = urem i32 %arg1, 256
  store i32 %v1_b72c, i32* @fp, align 4
  store i32 %v1_b72c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b744 = urem i32 %arg3, 256
  store i32 %v1_b744, i32* @r4, align 4
  %v2_b748 = call i32 @function_140b4(i32 %v1_b72c, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b754 = load i32, i32* @fp, align 4
  store i32 %v0_b754, i32* %r0.global-to-local, align 4
  %v2_b758 = call i32 @function_140b4(i32 %v0_b754, i32 4)
  %v0_b75c = load i32, i32* @r5, align 4
  store i32 %v0_b75c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b76c = load i32, i32* @r4, align 4
  store i32 %v0_b76c, i32* %r0.global-to-local, align 4
  %v5_b770 = inttoptr i32 %v0_b75c to i32*
  %v6_b770 = call i32 @function_a4e8(i32 %v0_b76c, i32* %v5_b770, i32 2, i32 0)
  %v1_b77c = urem i32 %v6_b770, 256
  store i32 %v1_b77c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b788 = load i32, i32* @r5, align 4
  store i32 %v0_b788, i32* %r1.global-to-local, align 4
  %v0_b78c = load i32, i32* @r4, align 4
  store i32 %v0_b78c, i32* %r0.global-to-local, align 4
  %v6_b794 = inttoptr i32 %v0_b788 to i32*
  %v7_b794 = call i32 @function_a4e8(i32 %v0_b78c, i32* %v6_b794, i32 3, i32 65535)
  %v0_b798 = load i32, i32* @r5, align 4
  store i32 %v0_b798, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b794, i32* @r6, align 4
  %v0_b7a8 = load i32, i32* @r4, align 4
  store i32 %v0_b7a8, i32* %r0.global-to-local, align 4
  %v4_b7ac = inttoptr i32 %v0_b798 to i32*
  %v5_b7ac = call i32 @function_a4e8(i32 %v0_b7a8, i32* %v4_b7ac, i32 4, i32 64)
  %v1_b7b4 = urem i32 %v5_b7ac, 256
  store i32 %v1_b7b4, i32* %ip.global-to-local, align 4
  %v0_b7b8 = load i32, i32* @r5, align 4
  store i32 %v0_b7b8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b7c4 = load i32, i32* @r4, align 4
  store i32 %v0_b7c4, i32* %r0.global-to-local, align 4
  %v6_b7cc = inttoptr i32 %v0_b7b8 to i32*
  %v7_b7cc = call i32 @function_a4e8(i32 %v0_b7c4, i32* %v6_b7cc, i32 5, i32 1)
  %v1_b7d8 = urem i32 %v7_b7cc, 256
  store i32 %v1_b7d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b7e0 = load i32, i32* @r5, align 4
  store i32 %v0_b7e0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b7e8 = load i32, i32* @r4, align 4
  store i32 %v0_b7e8, i32* %r0.global-to-local, align 4
  %v5_b7f0 = inttoptr i32 %v0_b7e0 to i32*
  %v6_b7f0 = call i32 @function_a4e8(i32 %v0_b7e8, i32* %v5_b7f0, i32 7, i32 65535)
  %v0_b7f4 = load i32, i32* @r5, align 4
  store i32 %v0_b7f4, i32* %r1.global-to-local, align 4
  %v3_b7f8 = mul i32 %v6_b7f0, 65536
  store i32 %v3_b7f8, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b804 = load i32, i32* @r4, align 4
  store i32 %v0_b804, i32* %r0.global-to-local, align 4
  %v4_b808 = inttoptr i32 %v0_b7f4 to i32*
  %v5_b808 = call i32 @function_a4e8(i32 %v0_b804, i32* %v4_b808, i32 11, i32 0)
  %v1_b810 = urem i32 %v5_b808, 256
  store i32 %v1_b810, i32* %ip.global-to-local, align 4
  %v0_b814 = load i32, i32* @r5, align 4
  store i32 %v0_b814, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b820 = load i32, i32* @r4, align 4
  store i32 %v0_b820, i32* %r0.global-to-local, align 4
  %v5_b828 = inttoptr i32 %v0_b814 to i32*
  %v6_b828 = call i32 @function_a4e8(i32 %v0_b820, i32* %v5_b828, i32 12, i32 1)
  %v1_b830 = urem i32 %v6_b828, 256
  store i32 %v1_b830, i32* %ip.global-to-local, align 4
  %v0_b834 = load i32, i32* @r5, align 4
  store i32 %v0_b834, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b840 = load i32, i32* @r4, align 4
  store i32 %v0_b840, i32* %r0.global-to-local, align 4
  %v5_b848 = inttoptr i32 %v0_b834 to i32*
  %v6_b848 = call i32 @function_a4e8(i32 %v0_b840, i32* %v5_b848, i32 13, i32 1)
  %v1_b850 = urem i32 %v6_b848, 256
  store i32 %v1_b850, i32* %ip.global-to-local, align 4
  %v0_b854 = load i32, i32* @r5, align 4
  store i32 %v0_b854, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b860 = load i32, i32* @r4, align 4
  store i32 %v0_b860, i32* %r0.global-to-local, align 4
  %v5_b868 = inttoptr i32 %v0_b854 to i32*
  %v6_b868 = call i32 @function_a4e8(i32 %v0_b860, i32* %v5_b868, i32 14, i32 0)
  %v1_b870 = urem i32 %v6_b868, 256
  store i32 %v1_b870, i32* %ip.global-to-local, align 4
  %v0_b874 = load i32, i32* @r5, align 4
  store i32 %v0_b874, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b880 = load i32, i32* @r4, align 4
  store i32 %v0_b880, i32* %r0.global-to-local, align 4
  %v5_b888 = inttoptr i32 %v0_b874 to i32*
  %v6_b888 = call i32 @function_a4e8(i32 %v0_b880, i32* %v5_b888, i32 15, i32 0)
  %v1_b890 = urem i32 %v6_b888, 256
  store i32 %v1_b890, i32* %ip.global-to-local, align 4
  %v0_b894 = load i32, i32* @r5, align 4
  store i32 %v0_b894, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b8a0 = load i32, i32* @r4, align 4
  store i32 %v0_b8a0, i32* %r0.global-to-local, align 4
  %v5_b8a8 = inttoptr i32 %v0_b894 to i32*
  %v6_b8a8 = call i32 @function_a4e8(i32 %v0_b8a0, i32* %v5_b8a8, i32 16, i32 0)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_b8a8, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b8b8 = load i32, i32* @r5, align 4
  store i32 %v0_b8b8, i32* %r1.global-to-local, align 4
  %v0_b8bc = load i32, i32* @r4, align 4
  store i32 %v0_b8bc, i32* %r0.global-to-local, align 4
  %v1_b8c0 = urem i32 %v6_b8a8, 256
  store i32 %v1_b8c0, i32* @r8, align 4
  %v4_b8c4 = inttoptr i32 %v0_b8b8 to i32*
  %v5_b8c4 = call i32 @function_a4e8(i32 %v0_b8bc, i32* %v4_b8c4, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b8d0 = load i32, i32* @r5, align 4
  store i32 %v0_b8d0, i32* %r1.global-to-local, align 4
  store i32 %v5_b8c4, i32* @sb, align 4
  %v0_b8d8 = load i32, i32* @r4, align 4
  store i32 %v0_b8d8, i32* %r0.global-to-local, align 4
  %v4_b8dc = inttoptr i32 %v0_b8d0 to i32*
  %v5_b8dc = call i32 @function_a4e8(i32 %v0_b8d8, i32* %v4_b8dc, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_b8e8 = urem i32 %v5_b8dc, 256
  store i32 %v1_b8e8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b8f8 = call i32 @function_13db0(i32 2, i32 3, i32 6)
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v0_b8fc = load i32, i32* @r7, align 4
  %v3_b8fc = udiv i32 %v0_b8fc, 65536
  store i32 %v3_b8fc, i32* %r1.global-to-local, align 4
  %v7_b900 = icmp eq i32 %v3_b8f8, -1
  store i1 %v7_b900, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b900, label %dec_label_pc_bb84, label %dec_label_pc_b910

dec_label_pc_b910:                                ; preds = %dec_label_pc_b728
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b918 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b918, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b92c = call i32 @function_13d80(i32 %v3_b8f8, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b92c, i32* %r0.global-to-local, align 4
  %v7_b930 = icmp eq i32 %v6_b92c, -1
  store i1 %v7_b930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b930, label %dec_label_pc_bb7c, label %dec_label_pc_b938

dec_label_pc_b938:                                ; preds = %dec_label_pc_b910
  %v0_b938 = load i32, i32* @fp, align 4
  %v2_b938 = icmp eq i32 %v0_b938, 0
  store i1 %v2_b938, i1* %cpsr_z.global-to-local, align 1
  %v0_b93c = load i32, i32* @r6, align 4
  %v3_b93c = mul i32 %v0_b93c, 65536
  store i32 %v3_b93c, i32* %r0.global-to-local, align 4
  %v3_b940 = urem i32 %v0_b93c, 65536
  store i32 %v3_b940, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp84 = icmp slt i32 %v0_b938, 1
  br i1 %tmp84, label %.thread26, label %dec_label_pc_b964.preheader

.thread26:                                        ; preds = %dec_label_pc_b938
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_be04

dec_label_pc_b964.preheader:                      ; preds = %dec_label_pc_b938
  %v5_b948 = load i32, i32* @r7, align 4
  %v8_b948 = udiv i32 %v5_b948, 16777216
  %tmp85 = udiv i32 %v0_b93c, 256
  %v8_b94c = urem i32 %tmp85, 256
  store i32 %v8_b94c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v1_b970 = urem i32 %v0_b93c, 256
  %v3_ba5c = icmp ugt i32 %v0_b8fc, -65537
  %v2_ba80 = ptrtoint i32* %stack_var_-60 to i32
  %v3_ba8c = bitcast i32* %stack_var_-60 to %sockaddr*
  %v4_ba9c = mul nuw nsw i32 %v1_b970, 256
  %v5_ba9c = or i32 %v8_b94c, %v4_ba9c
  %sext10 = mul i32 %tmp85, 16777216
  %v4_baa8 = sdiv i32 %sext10, 16777216
  %v3_bab0 = ashr i32 %sext10, 31
  %v2_bad4 = ptrtoint i32* %stack_var_-76 to i32
  %v2_bae0 = ptrtoint i32* %stack_var_-332 to i32
  %v2_bae4 = ptrtoint i32* %stack_var_-44 to i32
  %v4_bb2c = zext i8 %tmp40 to i32
  %v4_bb30 = zext i8 %tmp39 to i32
  %v4_bb3c = mul nuw nsw i32 %v4_bb30, 256
  %v4_bb4c = zext i8 %tmp to i32
  %v1_bb50 = and i32 %v4_bb4c, 18
  %v2_bb54 = icmp eq i32 %v1_bb50, 18
  %v1_ba6c = mul nuw nsw i32 %v3_b8fc, 256
  %v4_ba70 = and i32 %v1_ba6c, 65280
  %v5_ba70 = or i32 %v8_b948, %v4_ba70
  %v3_ba74106 = udiv i32 %v4_ba70, 256
  %v1_ba78 = trunc i32 %v3_ba74106 to i8
  %sext = mul i32 %v6_b770, 16777216
  %v4_bc78 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v5_b7ac, 16777216
  %v4_bc8c = sdiv i32 %sext8, 16777216
  %v5_bb3c = or i32 %v4_bb2c, %v4_bb3c
  %v1_bb5c = and i32 %v4_bb4c, 5
  %v2_bb5c = icmp eq i32 %v1_bb5c, 0
  %v1_ba7c = trunc i32 %v8_b948 to i8
  %v1_bc88 = trunc i32 %v4_bc78 to i8
  %v1_bd54 = urem i32 %v5_b808, 2
  %tmp107 = sub nsw i32 0, %v1_bd54
  %v4_bd5c = and i32 %tmp107, 32
  %v1_bd6c = urem i32 %v6_b828, 2
  %tmp108 = sub nsw i32 0, %v1_bd6c
  %v4_bd74 = and i32 %tmp108, 16
  %v1_bd84 = urem i32 %v6_b848, 2
  %tmp109 = sub nsw i32 0, %v1_bd84
  %v4_bd8c = and i32 %tmp109, 8
  %v1_bd9c = urem i32 %v6_b868, 2
  %tmp110 = sub nsw i32 0, %v1_bd9c
  %v4_bda4 = and i32 %tmp110, 4
  %v1_bdb4 = urem i32 %v6_b888, 2
  %tmp111 = sub nsw i32 0, %v1_bdb4
  %v3_bdbc = and i32 %tmp111, 2
  br label %dec_label_pc_b964

dec_label_pc_b964:                                ; preds = %dec_label_pc_bdf0, %dec_label_pc_bb64, %dec_label_pc_b964.preheader
  store i32 %v8_b94c, i32* %r3.global-to-local, align 4
  store i32 %v1_b970, i32* %ip.global-to-local, align 4
  %v0_b97c = load i32, i32* @sb, align 4
  %v1_b97c = add i32 %v0_b97c, 40
  store i32 %v1_b97c, i32* @sl, align 4
  br label %dec_label_pc_b980

dec_label_pc_b980:                                ; preds = %dec_label_pc_bb70, %dec_label_pc_b964
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b98c = call i32 @function_13db0(i32 2, i32 1, i32 0)
  store i32 %v3_b98c, i32* %r0.global-to-local, align 4
  %v7_b990 = icmp eq i32 %v3_b98c, -1
  store i1 %v7_b990, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b98c, i32* @r7, align 4
  br i1 %v7_b990, label %dec_label_pc_bdf0, label %dec_label_pc_b99c

dec_label_pc_b99c:                                ; preds = %dec_label_pc_b980
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b9a4 = call i32 @function_133c0(i32 %v3_b98c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b9ac = or i32 %v2_b9a4, 2048
  store i32 %v1_b9ac, i32* @r2, align 4
  %v0_b9b0 = load i32, i32* @r7, align 4
  store i32 %v0_b9b0, i32* %r0.global-to-local, align 4
  %v2_b9b4 = call i32 @function_133c0(i32 %v0_b9b0, i32 4)
  %v3_b9b8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b9b8, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_b9d4 = mul i32 %v3_b9b8, 24
  store i32 %v5_b9d4, i32* %r1.global-to-local, align 4
  %v2_b9d8 = add i32 %v5_b9d4, %arg2
  store i32 %v2_b9d8, i32* %r2.global-to-local, align 4
  %v1_b9dc = add i32 %v2_b9d8, 20
  %v2_b9dc = inttoptr i32 %v1_b9dc to i8*
  %v3_b9dc = load i8, i8* %v2_b9dc, align 1
  %v4_b9dc = zext i8 %v3_b9dc to i32
  store i32 %v4_b9dc, i32* %r3.global-to-local, align 4
  %v2_b9e0 = icmp ugt i8 %v3_b9dc, 30
  %v7_b9e0 = icmp eq i8 %v3_b9dc, 31
  store i1 %v7_b9e0, i1* %cpsr_z.global-to-local, align 1
  %v2_b9e4 = xor i1 %v7_b9e0, true
  %v3_b9e4 = and i1 %v2_b9e0, %v2_b9e4
  %v5_b9e4 = add i32 %v2_b9d8, 16
  %v6_b9e4 = inttoptr i32 %v5_b9e4 to i32*
  %v7_b9e4 = load i32, i32* %v6_b9e4, align 4
  br i1 %v3_b9e4, label %dec_label_pc_ba50, label %dec_label_pc_b9f0

dec_label_pc_b9f0:                                ; preds = %dec_label_pc_b99c
  store i32 %v7_b9e4, i32* @r4, align 4
  %v0_b9f4 = call i32 @function_fc1c()
  store i32 %v0_b9f4, i32* %r0.global-to-local, align 4
  %v3_b9f8 = load i32, i32* %stack_var_-40, align 4
  %v5_ba00 = mul i32 %v3_b9f8, 24
  %v0_ba08 = load i32, i32* @r4, align 4
  %v2_ba0c = add i32 %v5_ba00, %arg2
  store i32 %v2_ba0c, i32* %r1.global-to-local, align 4
  %v1_ba08 = udiv i32 %v0_ba08, 256
  %v3_ba10 = and i32 %v1_ba08, 65280
  store i32 %v3_ba10, i32* %r2.global-to-local, align 4
  %v1_ba14 = and i32 %v0_ba08, 65280
  store i32 %v1_ba14, i32* %r3.global-to-local, align 4
  %v3_ba18 = mul i32 %v0_ba08, 16777216
  store i32 %v3_ba18, i32* %ip.global-to-local, align 4
  %v1_ba1c = add i32 %v2_ba0c, 20
  %v2_ba1c = inttoptr i32 %v1_ba1c to i8*
  %v3_ba1c = load i8, i8* %v2_ba1c, align 1
  %v4_ba1c = zext i8 %v3_ba1c to i32
  store i32 %v4_ba1c, i32* %lr.global-to-local, align 4
  %v4_ba20 = mul nuw nsw i32 %v1_ba14, 256
  %v5_ba20 = or i32 %v4_ba20, %v3_ba18
  store i32 %v5_ba20, i32* %ip.global-to-local, align 4
  %v2_ba28 = call i32 @llvm.bswap.i32(i32 %v0_ba08)
  %v7_ba2c = lshr i32 %v0_b9f4, %v4_ba1c
  %v8_ba2c = add i32 %v7_ba2c, %v2_ba28
  store i32 %v8_ba2c, i32* %r2.global-to-local, align 4
  %v3_ba38 = mul i32 %v8_ba2c, 16777216
  %v1_ba3c = and i32 %v8_ba2c, 65280
  store i32 %v1_ba3c, i32* %r0.global-to-local, align 4
  %v4_ba40 = mul nuw nsw i32 %v1_ba3c, 256
  %v5_ba40 = or i32 %v4_ba40, %v3_ba38
  store i32 %v5_ba40, i32* %r1.global-to-local, align 4
  %v2_ba48 = call i32 @llvm.bswap.i32(i32 %v8_ba2c)
  br label %dec_label_pc_ba50

dec_label_pc_ba50:                                ; preds = %dec_label_pc_b99c, %dec_label_pc_b9f0
  %storemerge34 = phi i32 [ %v2_ba48, %dec_label_pc_b9f0 ], [ %v7_b9e4, %dec_label_pc_b99c ]
  store i32 %v3_b8fc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_ba5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ba5c, label %dec_label_pc_bb8c, label %dec_label_pc_ba64

dec_label_pc_ba64:                                ; preds = %dec_label_pc_ba50
  store i32 %v3_b8fc, i32* %r0.global-to-local, align 4
  store i32 %v8_b948, i32* %r1.global-to-local, align 4
  store i32 %v5_ba70, i32* %r3.global-to-local, align 4
  store i32 %v3_ba74106, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ba80

dec_label_pc_ba80:                                ; preds = %dec_label_pc_bb8c, %dec_label_pc_ba64
  %stack_var_-57.0 = phi i8 [ %v1_bb94, %dec_label_pc_bb8c ], [ %v1_ba78, %dec_label_pc_ba64 ]
  %storemerge = phi i8 [ %v1_bb8c, %dec_label_pc_bb8c ], [ %v1_ba7c, %dec_label_pc_ba64 ]
  store i32 %v2_ba80, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_ba88 = load i32, i32* @r7, align 4
  store i32 %v0_ba88, i32* %r0.global-to-local, align 4
  %v4_ba8c = call i32 @function_13c0c(i32 %v0_ba88, %sockaddr* nonnull %v3_ba8c, i32 16)
  store i32 %v1_b970, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_ba9c, i32* %r2.global-to-local, align 4
  %v2_baa4 = call i32 @function_13780(i32* null)
  store i32 %v2_baa4, i32* %r0.global-to-local, align 4
  store i32 %v2_baa4, i32* @r4, align 4
  store i32 %v3_bab0, i32* %ip.global-to-local, align 4
  %v9_bb10 = icmp eq i32 %tmp41, %storemerge34
  %v4_bb34 = zext i8 %storemerge to i32
  %v4_bb38 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_bb10 to i32
  %v9_bb24 = icmp eq i1 %v9_bb10, false
  %v4_bb40 = mul nuw nsw i32 %v4_bb38, 256
  %v5_bb40 = or i32 %v4_bb40, %v4_bb34
  %v9_bb44 = icmp eq i32 %v5_bb40, %v5_bb3c
  br label %dec_label_pc_bacc

dec_label_pc_babc:                                ; preds = %.thread32, %dec_label_pc_bb2c, %dec_label_pc_bb5c, %bb87
  %v2_babc = call i32 @function_13780(i32* null)
  %v0_bac0 = load i32, i32* @r4, align 4
  %v2_bac0 = sub i32 %v2_babc, %v0_bac0
  store i32 %v2_bac0, i32* %r0.global-to-local, align 4
  %v7_bac4 = icmp eq i32 %v2_bac0, 10
  store i1 %v7_bac4, i1* %cpsr_z.global-to-local, align 1
  %v8_bac8 = icmp sgt i32 %v2_bac0, 10
  br i1 %v8_bac8, label %dec_label_pc_bb70, label %dec_label_pc_bacc

dec_label_pc_bacc:                                ; preds = %dec_label_pc_babc, %dec_label_pc_ba80
  store i32 16, i32* %stack_var_-44, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_bae0, i32* %r1.global-to-local, align 4
  store i32 %v2_bae4, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v7_baf4 = call i32 @function_13cec(i32 %v3_b8f8, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_bad4, i32 %v2_bae4)
  store i32 %v7_baf4, i32* %r2.global-to-local, align 4
  %v7_bafc = icmp eq i32 %v7_baf4, -1
  store i1 %v7_bafc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_bafc, label %dec_label_pc_bb84, label %dec_label_pc_bb08

dec_label_pc_bb08:                                ; preds = %dec_label_pc_bacc
  store i32 %tmp41, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_bb1c = icmp eq i32 %v7_baf4, 40
  store i1 %v7_bb1c, i1* %cpsr_z.global-to-local, align 1
  %tmp112 = icmp ult i32 %v7_baf4, 41
  br i1 %tmp112, label %.thread32, label %bb87

.thread32:                                        ; preds = %dec_label_pc_bb08
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_babc

bb87:                                             ; preds = %dec_label_pc_bb08
  store i1 %v9_bb24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bb24, label %dec_label_pc_babc, label %dec_label_pc_bb2c

dec_label_pc_bb2c:                                ; preds = %bb87
  store i32 %v4_bb30, i32* %r1.global-to-local, align 4
  store i32 %v4_bb34, i32* %ip.global-to-local, align 4
  store i32 %v4_bb38, i32* %r2.global-to-local, align 4
  store i32 %v5_bb3c, i32* %r3.global-to-local, align 4
  store i32 %v5_bb40, i32* @r5, align 4
  store i1 %v9_bb44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bb44, label %dec_label_pc_bb4c, label %dec_label_pc_babc

dec_label_pc_bb4c:                                ; preds = %dec_label_pc_bb2c
  store i32 %v4_bb4c, i32* %r2.global-to-local, align 4
  store i32 %v1_bb50, i32* %r3.global-to-local, align 4
  store i1 %v2_bb54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bb54, label %dec_label_pc_bba0, label %dec_label_pc_bb5c

dec_label_pc_bb5c:                                ; preds = %dec_label_pc_bb4c
  store i1 %v2_bb5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bb5c, label %dec_label_pc_babc, label %dec_label_pc_bb64

dec_label_pc_bb64:                                ; preds = %dec_label_pc_bb5c
  %v0_bb64 = load i32, i32* @r7, align 4
  store i32 %v0_bb64, i32* %r0.global-to-local, align 4
  %v1_bb68 = call i32 @function_134b0(i32 %v0_bb64)
  store i32 %v1_bb68, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b964

dec_label_pc_bb70:                                ; preds = %dec_label_pc_babc
  %v0_bb70 = load i32, i32* @r7, align 4
  store i32 %v0_bb70, i32* %r0.global-to-local, align 4
  %v1_bb74 = call i32 @function_134b0(i32 %v0_bb70)
  store i32 %v1_bb74, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b980

dec_label_pc_bb7c:                                ; preds = %dec_label_pc_b910
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v1_bb80 = call i32 @function_134b0(i32 %v3_b8f8)
  store i32 %v1_bb80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bb84

dec_label_pc_bb84:                                ; preds = %dec_label_pc_bacc, %dec_label_pc_b728, %dec_label_pc_bb7c
  %v29_bb88 = phi i32 [ %v3_b8f8, %dec_label_pc_b728 ], [ %v1_bb80, %dec_label_pc_bb7c ], [ 0, %dec_label_pc_bacc ]
  ret i32 %v29_bb88

dec_label_pc_bb8c:                                ; preds = %dec_label_pc_ba50
  %v0_bb8c = call i32 @function_fc1c()
  %v1_bb8c = trunc i32 %v0_bb8c to i8
  store i32 %v0_bb8c, i32* %r0.global-to-local, align 4
  %v4_bb90 = sdiv i32 %v0_bb8c, 256
  store i32 %v4_bb90, i32* %r3.global-to-local, align 4
  %v1_bb94 = trunc i32 %v4_bb90 to i8
  br label %dec_label_pc_ba80

dec_label_pc_bba0:                                ; preds = %dec_label_pc_bb4c
  %v3_bba0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bba0, i32* @r4, align 4
  store i32 %v2_b748, i32* %r2.global-to-local, align 4
  %v3_bba8 = mul i32 %v3_bba0, 16
  store i32 %v3_bba8, i32* %ip.global-to-local, align 4
  %v3_bbac = add i32 %v3_bba8, %v2_b748
  %v4_bbac = inttoptr i32 %v3_bbac to i32*
  store i32 %storemerge34, i32* %v4_bbac, align 4
  %v0_bbb0 = load i32, i32* @r6, align 4
  %v1_bbb0 = add i32 %v0_bbb0, 4
  %v2_bbb0 = inttoptr i32 %v1_bbb0 to i32*
  %v3_bbb0 = load i32, i32* %v2_bbb0, align 4
  %v1_bbbc = and i32 %v3_bbb0, 65280
  store i32 %v1_bbbc, i32* %r1.global-to-local, align 4
  %v3_bbc0 = mul i32 %v3_bbb0, 16777216
  store i32 %v2_b748, i32* %r0.global-to-local, align 4
  %v4_bbcc = mul nuw nsw i32 %v1_bbbc, 256
  %v5_bbcc = or i32 %v4_bbcc, %v3_bbc0
  store i32 %v5_bbcc, i32* %r2.global-to-local, align 4
  %v1_bbd0 = load i32, i32* %ip.global-to-local, align 4
  %v2_bbd0 = add i32 %v1_bbd0, %v2_b748
  store i32 %v2_bbd0, i32* %ip.global-to-local, align 4
  %v2_bbd4 = call i32 @llvm.bswap.i32(i32 %v3_bbb0)
  store i32 %v2_bbd4, i32* %r3.global-to-local, align 4
  %v2_bbd8 = add i32 %v2_bbd0, 4
  %v3_bbd8 = inttoptr i32 %v2_bbd8 to i32*
  store i32 %v2_bbd4, i32* %v3_bbd8, align 4
  %v0_bbdc = load i32, i32* @r6, align 4
  %v1_bbdc = add i32 %v0_bbdc, 8
  %v2_bbdc = inttoptr i32 %v1_bbdc to i32*
  %v3_bbdc = load i32, i32* %v2_bbdc, align 4
  store i32 %v3_bbdc, i32* %r0.global-to-local, align 4
  %v1_bbe4 = and i32 %v3_bbdc, 65280
  store i32 %v1_bbe4, i32* %r1.global-to-local, align 4
  %v3_bbe8 = mul i32 %v3_bbdc, 16777216
  %v4_bbf0 = mul nuw nsw i32 %v1_bbe4, 256
  %v5_bbf0 = or i32 %v4_bbf0, %v3_bbe8
  store i32 %v5_bbf0, i32* %r2.global-to-local, align 4
  %v2_bbf8 = call i32 @llvm.bswap.i32(i32 %v3_bbdc)
  store i32 %v2_bbf8, i32* %r3.global-to-local, align 4
  %v1_bbfc = load i32, i32* %ip.global-to-local, align 4
  %v2_bbfc = add i32 %v1_bbfc, 8
  %v3_bbfc = inttoptr i32 %v2_bbfc to i32*
  store i32 %v2_bbf8, i32* %v3_bbfc, align 4
  %v0_bc00 = load i32, i32* @r6, align 4
  %v1_bc00 = inttoptr i32 %v0_bc00 to i32*
  %v2_bc00 = load i32, i32* %v1_bc00, align 4
  %v3_bc04 = udiv i32 %v2_bc00, 65536
  store i32 %v3_bc04, i32* %r2.global-to-local, align 4
  %v3_bc085 = udiv i32 %v2_bc00, 16777216
  store i32 %v3_bc085, i32* %r1.global-to-local, align 4
  %v0_bc0c = load i32, i32* @r5, align 4
  %v3_bc0c = sdiv i32 %v0_bc0c, 256
  store i32 %v3_bc0c, i32* %r3.global-to-local, align 4
  %v1_bc10 = trunc i32 %v3_bc0c to i8
  %v2_bc10 = load i32, i32* %ip.global-to-local, align 4
  %v3_bc10 = add i32 %v2_bc10, 15
  %v4_bc10 = inttoptr i32 %v3_bc10 to i8*
  store i8 %v1_bc10, i8* %v4_bc10, align 1
  %v0_bc14 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc14 = trunc i32 %v0_bc14 to i8
  %v2_bc14 = load i32, i32* %ip.global-to-local, align 4
  %v3_bc14 = add i32 %v2_bc14, 13
  %v4_bc14 = inttoptr i32 %v3_bc14 to i8*
  store i8 %v1_bc14, i8* %v4_bc14, align 1
  %v0_bc18 = load i32, i32* %r2.global-to-local, align 4
  %v1_bc18 = trunc i32 %v0_bc18 to i8
  %v2_bc18 = load i32, i32* %ip.global-to-local, align 4
  %v3_bc18 = add i32 %v2_bc18, 12
  %v4_bc18 = inttoptr i32 %v3_bc18 to i8*
  store i8 %v1_bc18, i8* %v4_bc18, align 1
  %v0_bc1c = load i32, i32* @r5, align 4
  %v1_bc1c = trunc i32 %v0_bc1c to i8
  %v2_bc1c = load i32, i32* %ip.global-to-local, align 4
  %v3_bc1c = add i32 %v2_bc1c, 14
  %v4_bc1c = inttoptr i32 %v3_bc1c to i8*
  store i8 %v1_bc1c, i8* %v4_bc1c, align 1
  %v0_bc20 = load i32, i32* @sl, align 4
  store i32 %v0_bc20, i32* %r0.global-to-local, align 4
  %v1_bc24 = call i32 @function_13f60(i32 %v0_bc20)
  store i32 %v1_bc24, i32* %r0.global-to-local, align 4
  store i32 %v2_b758, i32* %r1.global-to-local, align 4
  %v3_bc2c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bc2c, i32* %r2.global-to-local, align 4
  %v2_bc30 = load i32, i32* @r4, align 4
  %v5_bc30 = mul i32 %v2_bc30, 4
  %v6_bc30 = add i32 %v5_bc30, %v2_b758
  %v7_bc30 = inttoptr i32 %v6_bc30 to i32*
  store i32 %v1_bc24, i32* %v7_bc30, align 4
  %v0_bc34 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc34 = load i32, i32* %r2.global-to-local, align 4
  %v4_bc34 = mul i32 %v1_bc34, 4
  %v5_bc34 = add i32 %v4_bc34, %v0_bc34
  %v6_bc34 = inttoptr i32 %v5_bc34 to i32*
  %v7_bc34 = load i32, i32* %v6_bc34, align 4
  store i32 %v7_bc34, i32* @r4, align 4
  %v1_bc38 = inttoptr i32 %v7_bc34 to i8*
  %v2_bc38 = load i8, i8* %v1_bc38, align 1
  %tmp113 = urem i8 %v2_bc38, 16
  %v1_bc3c = zext i8 %tmp113 to i32
  %v1_bc40 = or i32 %v1_bc3c, 64
  store i32 %v1_bc40, i32* %r3.global-to-local, align 4
  %v1_bc44 = trunc i32 %v1_bc40 to i8
  store i8 %v1_bc44, i8* %v1_bc38, align 1
  %v0_bc48 = load i32, i32* @sl, align 4
  %v3_bc48 = mul i32 %v0_bc48, 65536
  store i32 %v3_bc48, i32* %r2.global-to-local, align 4
  %v0_bc4c = load i32, i32* @r4, align 4
  %v1_bc4c = inttoptr i32 %v0_bc4c to i8*
  %v2_bc4c = load i8, i8* %v1_bc4c, align 1
  %v1_bc54 = urem i32 %v0_bc48, 256
  %tmp88 = udiv i32 %v0_bc48, 256
  %v3_bc58 = urem i32 %tmp88, 256
  %v1_bc5c = and i8 %v2_bc4c, -16
  %v4_bc60 = mul nuw nsw i32 %v1_bc54, 256
  %v5_bc60 = or i32 %v4_bc60, %v3_bc58
  store i32 %v5_bc60, i32* %r2.global-to-local, align 4
  %v1_bc64 = or i8 %v1_bc5c, 5
  store i32 %v1_b7d8, i32* %ip.global-to-local, align 4
  store i32 %v1_bc54, i32* %r3.global-to-local, align 4
  store i8 %v1_bc64, i8* %v1_bc4c, align 1
  %v0_bc74 = load i32, i32* %r3.global-to-local, align 4
  %v1_bc74 = trunc i32 %v0_bc74 to i8
  %v2_bc74 = load i32, i32* @r4, align 4
  %v3_bc74 = add i32 %v2_bc74, 3
  %v4_bc74 = inttoptr i32 %v3_bc74 to i8*
  store i8 %v1_bc74, i8* %v4_bc74, align 1
  store i32 %v4_bc78, i32* %r3.global-to-local, align 4
  %v0_bc7c = load i32, i32* %ip.global-to-local, align 4
  %v2_bc7c = icmp eq i32 %v0_bc7c, 0
  store i1 %v2_bc7c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_baa8, i32* %r0.global-to-local, align 4
  store i32 %v3_bab0, i32* %r1.global-to-local, align 4
  %v2_bc88 = load i32, i32* @r4, align 4
  %v3_bc88 = add i32 %v2_bc88, 1
  %v4_bc88 = inttoptr i32 %v3_bc88 to i8*
  store i8 %v1_bc88, i8* %v4_bc88, align 1
  store i32 %v4_bc8c, i32* %ip.global-to-local, align 4
  %v0_bc90 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc90, label %bb90, label %bb89

bb89:                                             ; preds = %dec_label_pc_bba0
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb90

bb90:                                             ; preds = %dec_label_pc_bba0, %bb89
  %v0_bc94 = load i32, i32* %r2.global-to-local, align 4
  %v1_bc94 = trunc i32 %v0_bc94 to i8
  %v2_bc94 = load i32, i32* @r4, align 4
  %v3_bc94 = add i32 %v2_bc94, 2
  %v4_bc94 = inttoptr i32 %v3_bc94 to i8*
  store i8 %v1_bc94, i8* %v4_bc94, align 1
  %v0_bc98 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc98, label %.thread9, label %bb91

bb91:                                             ; preds = %bb90
  %v1_bc98 = load i32, i32* %r3.global-to-local, align 4
  %v2_bc98 = trunc i32 %v1_bc98 to i8
  %v3_bc98 = load i32, i32* @r4, align 4
  %v4_bc98 = add i32 %v3_bc98, 6
  %v5_bc98 = inttoptr i32 %v4_bc98 to i8*
  store i8 %v2_bc98, i8* %v5_bc98, align 1
  %v0_bc9c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bc9c.pr, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb90, %bb91, %bb92
  store i32 6, i32* %r3.global-to-local, align 4
  %v0_bca4 = load i32, i32* %ip.global-to-local, align 4
  %v1_bca4 = trunc i32 %v0_bca4 to i8
  %v2_bca4 = load i32, i32* @r4, align 4
  %v3_bca4 = add i32 %v2_bca4, 8
  %v4_bca4 = inttoptr i32 %v3_bca4 to i8*
  store i8 %v1_bca4, i8* %v4_bca4, align 1
  %v0_bca8 = load i32, i32* %r3.global-to-local, align 4
  %v1_bca8 = trunc i32 %v0_bca8 to i8
  %v2_bca8 = load i32, i32* @r4, align 4
  %v3_bca8 = add i32 %v2_bca8, 9
  %v4_bca8 = inttoptr i32 %v3_bca8 to i8*
  store i8 %v1_bca8, i8* %v4_bca8, align 1
  %v0_bcac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bcac, label %bb94, label %bb93

bb93:                                             ; preds = %.thread9
  %v1_bcac = load i32, i32* %r2.global-to-local, align 4
  %v2_bcac = trunc i32 %v1_bcac to i8
  %v3_bcac = load i32, i32* @r4, align 4
  %v4_bcac = add i32 %v3_bcac, 7
  %v5_bcac = inttoptr i32 %v4_bcac to i8*
  store i8 %v2_bcac, i8* %v5_bcac, align 1
  br label %bb94

bb94:                                             ; preds = %.thread9, %bb93
  %v2_bcb4 = load i32, i32* @global_var_1eafc.85, align 4
  store i32 %v2_bcb4, i32* %r3.global-to-local, align 4
  %v1_bcb8 = load i32, i32* @r4, align 4
  %v2_bcb8 = add i32 %v1_bcb8, 12
  %v3_bcb8 = inttoptr i32 %v2_bcb8 to i32*
  store i32 %v2_bcb4, i32* %v3_bcb8, align 4
  %v0_bcbc = load i32, i32* %r0.global-to-local, align 4
  %v1_bcbc = trunc i32 %v0_bcbc to i8
  %v2_bcbc = load i32, i32* @r4, align 4
  %v3_bcbc = add i32 %v2_bcbc, 4
  %v4_bcbc = inttoptr i32 %v3_bcbc to i8*
  store i8 %v1_bcbc, i8* %v4_bcbc, align 1
  %v3_bcc0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bcc0, i32* %r2.global-to-local, align 4
  store i32 %v2_b748, i32* %r0.global-to-local, align 4
  %v4_bcc8 = mul i32 %v3_bcc0, 16
  %v5_bcc8 = add i32 %v4_bcc8, %v2_b748
  %v6_bcc8 = inttoptr i32 %v5_bcc8 to i32*
  %v7_bcc8 = load i32, i32* %v6_bcc8, align 4
  store i32 %v7_bcc8, i32* %r3.global-to-local, align 4
  %v0_bccc = load i32, i32* %r1.global-to-local, align 4
  %v1_bccc = trunc i32 %v0_bccc to i8
  %v2_bccc = load i32, i32* @r4, align 4
  %v3_bccc = add i32 %v2_bccc, 5
  %v4_bccc = inttoptr i32 %v3_bccc to i8*
  store i8 %v1_bccc, i8* %v4_bccc, align 1
  %v0_bcd0 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcd0 = load i32, i32* @r4, align 4
  %v2_bcd0 = add i32 %v1_bcd0, 16
  %v3_bcd0 = inttoptr i32 %v2_bcd0 to i32*
  store i32 %v0_bcd0, i32* %v3_bcd0, align 4
  %v0_bcd4 = load i32, i32* %r2.global-to-local, align 4
  %v3_bcd4 = mul i32 %v0_bcd4, 16
  %v1_bcd8 = load i32, i32* %r0.global-to-local, align 4
  %v2_bcd8 = add i32 %v1_bcd8, %v3_bcd4
  store i32 %v2_bcd8, i32* %r2.global-to-local, align 4
  %v1_bcdc = add i32 %v2_bcd8, 13
  %v2_bcdc = inttoptr i32 %v1_bcdc to i8*
  %v3_bcdc = load i8, i8* %v2_bcdc, align 1
  %v4_bcdc = zext i8 %v3_bcdc to i32
  store i32 %v4_bcdc, i32* %r1.global-to-local, align 4
  %v1_bce0 = add i32 %v2_bcd8, 12
  %v2_bce0 = inttoptr i32 %v1_bce0 to i8*
  %v3_bce0 = load i8, i8* %v2_bce0, align 1
  %v4_bce0 = zext i8 %v3_bce0 to i32
  %v4_bce4 = mul nuw nsw i32 %v4_bcdc, 256
  %v5_bce4 = or i32 %v4_bce0, %v4_bce4
  store i32 %v5_bce4, i32* %r3.global-to-local, align 4
  %v2_bce8 = load i32, i32* @r4, align 4
  %v3_bce8 = add i32 %v2_bce8, 20
  %v4_bce8 = inttoptr i32 %v3_bce8 to i8*
  store i8 %v3_bce0, i8* %v4_bce8, align 1
  %v0_bcec = load i32, i32* @r4, align 4
  %v1_bcec = add i32 %v0_bcec, 20
  store i32 %v1_bcec, i32* @r6, align 4
  %v0_bcf0 = load i32, i32* %r3.global-to-local, align 4
  %v3_bcf0 = sdiv i32 %v0_bcf0, 256
  store i32 %v3_bcf0, i32* %r3.global-to-local, align 4
  %v1_bcf4 = trunc i32 %v3_bcf0 to i8
  %v3_bcf4 = add i32 %v0_bcec, 21
  %v4_bcf4 = inttoptr i32 %v3_bcf4 to i8*
  store i8 %v1_bcf4, i8* %v4_bcf4, align 1
  %v0_bcf8 = load i32, i32* @r6, align 4
  %v1_bcf8 = add i32 %v0_bcf8, 13
  %v2_bcf8 = inttoptr i32 %v1_bcf8 to i8*
  %v3_bcf8 = load i8, i8* %v2_bcf8, align 1
  %v4_bcf8 = zext i8 %v3_bcf8 to i32
  store i32 %v4_bcf8, i32* %r3.global-to-local, align 4
  %v0_bcfc = load i32, i32* %r2.global-to-local, align 4
  %v1_bcfc = add i32 %v0_bcfc, 8
  %v2_bcfc = inttoptr i32 %v1_bcfc to i32*
  %v3_bcfc = load i32, i32* %v2_bcfc, align 4
  store i32 %v3_bcfc, i32* %r1.global-to-local, align 4
  %v1_bd00 = or i32 %v4_bcf8, 1
  store i32 %v1_bd00, i32* %r3.global-to-local, align 4
  %v1_bd04 = add i32 %v0_bcfc, 15
  %v2_bd04 = inttoptr i32 %v1_bd04 to i8*
  %v3_bd04 = load i8, i8* %v2_bd04, align 1
  %v4_bd04 = zext i8 %v3_bd04 to i32
  store i32 %v4_bd04, i32* %ip.global-to-local, align 4
  %v1_bd08 = add i32 %v0_bcfc, 14
  %v2_bd08 = inttoptr i32 %v1_bd08 to i8*
  %v3_bd08 = load i8, i8* %v2_bd08, align 1
  %v4_bd08 = zext i8 %v3_bd08 to i32
  store i32 %v4_bd08, i32* %r0.global-to-local, align 4
  %v2_bd0c = add i32 %v0_bcf8, 4
  %v3_bd0c = inttoptr i32 %v2_bd0c to i32*
  store i32 %v3_bcfc, i32* %v3_bd0c, align 4
  %v0_bd10 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd10 = add i32 %v0_bd10, 4
  %v2_bd10 = inttoptr i32 %v1_bd10 to i32*
  %v3_bd10 = load i32, i32* %v2_bd10, align 4
  store i32 %v3_bd10, i32* %lr.global-to-local, align 4
  %v0_bd14 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd14 = trunc i32 %v0_bd14 to i8
  %v2_bd14 = load i32, i32* @r6, align 4
  %v3_bd14 = add i32 %v2_bd14, 13
  %v4_bd14 = inttoptr i32 %v3_bd14 to i8*
  store i8 %v1_bd14, i8* %v4_bd14, align 1
  %v0_bd18 = load i32, i32* @r6, align 4
  %v1_bd18 = add i32 %v0_bd18, 12
  %v2_bd18 = inttoptr i32 %v1_bd18 to i8*
  %v3_bd18 = load i8, i8* %v2_bd18, align 1
  %v4_bd18 = zext i8 %v3_bd18 to i32
  store i32 %v4_bd18, i32* %r2.global-to-local, align 4
  %v1_bd1c = add i32 %v0_bd18, 13
  %v2_bd1c = inttoptr i32 %v1_bd1c to i8*
  %v3_bd1c = load i8, i8* %v2_bd1c, align 1
  %v4_bd1c = zext i8 %v3_bd1c to i32
  %v0_bd20 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd20 = load i32, i32* %ip.global-to-local, align 4
  %v4_bd20 = mul i32 %v1_bd20, 256
  %v5_bd20 = or i32 %v4_bd20, %v0_bd20
  store i32 %v5_bd20, i32* %r0.global-to-local, align 4
  %tmp114 = urem i8 %v3_bd18, 16
  %v1_bd24 = zext i8 %tmp114 to i32
  %v3_bd28 = sdiv i32 %v5_bd20, 256
  store i32 %v3_bd28, i32* %r1.global-to-local, align 4
  %v1_bd2c = or i32 %v1_bd24, 128
  store i32 %v1_bd2c, i32* %r2.global-to-local, align 4
  %v1_bd30 = or i32 %v4_bd1c, 16
  store i32 %v1_bd30, i32* %r3.global-to-local, align 4
  %v1_bd34 = trunc i32 %v3_bd28 to i8
  %v3_bd34 = add i32 %v0_bd18, 3
  %v4_bd34 = inttoptr i32 %v3_bd34 to i8*
  store i8 %v1_bd34, i8* %v4_bd34, align 1
  %v0_bd38 = load i32, i32* %r2.global-to-local, align 4
  %v1_bd38 = trunc i32 %v0_bd38 to i8
  %v2_bd38 = load i32, i32* @r6, align 4
  %v3_bd38 = add i32 %v2_bd38, 12
  %v4_bd38 = inttoptr i32 %v3_bd38 to i8*
  store i8 %v1_bd38, i8* %v4_bd38, align 1
  %v0_bd3c = load i32, i32* %r3.global-to-local, align 4
  %v1_bd3c = trunc i32 %v0_bd3c to i8
  %v2_bd3c = load i32, i32* @r6, align 4
  %v3_bd3c = add i32 %v2_bd3c, 13
  %v4_bd3c = inttoptr i32 %v3_bd3c to i8*
  store i8 %v1_bd3c, i8* %v4_bd3c, align 1
  %v0_bd40 = load i32, i32* %lr.global-to-local, align 4
  %v1_bd40 = load i32, i32* @r6, align 4
  %v2_bd40 = add i32 %v1_bd40, 8
  %v3_bd40 = inttoptr i32 %v2_bd40 to i32*
  store i32 %v0_bd40, i32* %v3_bd40, align 4
  %v0_bd44 = load i32, i32* %r0.global-to-local, align 4
  %v1_bd44 = trunc i32 %v0_bd44 to i8
  %v2_bd44 = load i32, i32* @r6, align 4
  %v3_bd44 = add i32 %v2_bd44, 2
  %v4_bd44 = inttoptr i32 %v3_bd44 to i8*
  store i8 %v1_bd44, i8* %v4_bd44, align 1
  %v0_bd48 = call i32 @function_fc1c()
  %v1_bd48 = trunc i32 %v0_bd48 to i8
  store i32 %v0_bd48, i32* %r0.global-to-local, align 4
  store i32 %v1_b810, i32* %r1.global-to-local, align 4
  %v0_bd50 = load i32, i32* @r6, align 4
  %v1_bd50 = add i32 %v0_bd50, 13
  %v2_bd50 = inttoptr i32 %v1_bd50 to i8*
  %v3_bd50 = load i8, i8* %v2_bd50, align 1
  %v4_bd50 = zext i8 %v3_bd50 to i32
  store i32 %v1_bd54, i32* %r2.global-to-local, align 4
  %v1_bd58 = and i32 %v4_bd50, 223
  %v5_bd5c = or i32 %v1_bd58, %v4_bd5c
  store i32 %v5_bd5c, i32* %r3.global-to-local, align 4
  %v1_bd60 = trunc i32 %v5_bd5c to i8
  store i8 %v1_bd60, i8* %v2_bd50, align 1
  store i32 %v1_b830, i32* %ip.global-to-local, align 4
  %v0_bd68 = load i32, i32* @r6, align 4
  %v1_bd68 = add i32 %v0_bd68, 13
  %v2_bd68 = inttoptr i32 %v1_bd68 to i8*
  %v3_bd68 = load i8, i8* %v2_bd68, align 1
  %v4_bd68 = zext i8 %v3_bd68 to i32
  store i32 %v1_bd6c, i32* %r3.global-to-local, align 4
  %v1_bd70 = and i32 %v4_bd68, 239
  %v5_bd74 = or i32 %v1_bd70, %v4_bd74
  store i32 %v5_bd74, i32* %r2.global-to-local, align 4
  %v1_bd78 = trunc i32 %v5_bd74 to i8
  store i8 %v1_bd78, i8* %v2_bd68, align 1
  store i32 %v1_b850, i32* %r1.global-to-local, align 4
  %v0_bd80 = load i32, i32* @r6, align 4
  %v1_bd80 = add i32 %v0_bd80, 13
  %v2_bd80 = inttoptr i32 %v1_bd80 to i8*
  %v3_bd80 = load i8, i8* %v2_bd80, align 1
  %v4_bd80 = zext i8 %v3_bd80 to i32
  store i32 %v1_bd84, i32* %r2.global-to-local, align 4
  %v1_bd88 = and i32 %v4_bd80, 247
  %v5_bd8c = or i32 %v1_bd88, %v4_bd8c
  store i32 %v5_bd8c, i32* %r3.global-to-local, align 4
  %v1_bd90 = trunc i32 %v5_bd8c to i8
  store i8 %v1_bd90, i8* %v2_bd80, align 1
  store i32 %v1_b870, i32* %ip.global-to-local, align 4
  %v0_bd98 = load i32, i32* @r6, align 4
  %v1_bd98 = add i32 %v0_bd98, 13
  %v2_bd98 = inttoptr i32 %v1_bd98 to i8*
  %v3_bd98 = load i8, i8* %v2_bd98, align 1
  %v4_bd98 = zext i8 %v3_bd98 to i32
  store i32 %v1_bd9c, i32* %r3.global-to-local, align 4
  %v1_bda0 = and i32 %v4_bd98, 251
  %v5_bda4 = or i32 %v1_bda0, %v4_bda4
  store i32 %v5_bda4, i32* %r2.global-to-local, align 4
  %v1_bda8 = trunc i32 %v5_bda4 to i8
  store i8 %v1_bda8, i8* %v2_bd98, align 1
  store i32 %v1_b890, i32* %r1.global-to-local, align 4
  %v0_bdb0 = load i32, i32* @r6, align 4
  %v1_bdb0 = add i32 %v0_bdb0, 13
  %v2_bdb0 = inttoptr i32 %v1_bdb0 to i8*
  %v3_bdb0 = load i8, i8* %v2_bdb0, align 1
  %v4_bdb0 = zext i8 %v3_bdb0 to i32
  store i32 %v1_bdb4, i32* %r2.global-to-local, align 4
  %v1_bdb8 = and i32 %v4_bdb0, 253
  %v4_bdbc = or i32 %v1_bdb8, %v3_bdbc
  store i32 %v4_bdbc, i32* %r3.global-to-local, align 4
  %v1_bdc0 = trunc i32 %v4_bdbc to i8
  store i8 %v1_bdc0, i8* %v2_bdb0, align 1
  %v0_bdc4 = load i32, i32* @r6, align 4
  %v1_bdc4 = add i32 %v0_bdc4, 13
  %v2_bdc4 = inttoptr i32 %v1_bdc4 to i8*
  %v3_bdc4 = load i8, i8* %v2_bdc4, align 1
  %v4_bdc4 = zext i8 %v3_bdc4 to i32
  %v0_bdc8 = load i32, i32* @r8, align 4
  %v1_bdc8 = urem i32 %v0_bdc8, 2
  %v1_bdcc = and i32 %v4_bdc4, 254
  store i32 %v1_bdcc, i32* %r2.global-to-local, align 4
  %v4_bdd036 = udiv i32 %v0_bd48, 256
  %v2_bdd4 = or i32 %v1_bdcc, %v1_bdc8
  store i32 %v2_bdd4, i32* %r3.global-to-local, align 4
  %v1_bdd8 = trunc i32 %v4_bdd036 to i8
  %v3_bdd8 = add i32 %v0_bdc4, 15
  %v4_bdd8 = inttoptr i32 %v3_bdd8 to i8*
  store i8 %v1_bdd8, i8* %v4_bdd8, align 1
  %v3_bddc = load i32, i32* @r6, align 4
  %v4_bddc = add i32 %v3_bddc, 14
  %v5_bddc = inttoptr i32 %v4_bddc to i8*
  store i8 %v1_bd48, i8* %v5_bddc, align 1
  %v0_bde0 = load i32, i32* %r3.global-to-local, align 4
  %v1_bde0 = trunc i32 %v0_bde0 to i8
  %v2_bde0 = load i32, i32* @r6, align 4
  %v3_bde0 = add i32 %v2_bde0, 13
  %v4_bde0 = inttoptr i32 %v3_bde0 to i8*
  store i8 %v1_bde0, i8* %v4_bde0, align 1
  %v0_bde4 = load i32, i32* @r4, align 4
  %v1_bde4 = add i32 %v0_bde4, 40
  store i32 %v1_bde4, i32* %r0.global-to-local, align 4
  %v0_bde8 = load i32, i32* @sb, align 4
  store i32 %v0_bde8, i32* @r1, align 4
  %v1_bdec = inttoptr i32 %v1_bde4 to i8*
  %v2_bdec = call i32 @function_fdf8(i8* %v1_bdec)
  store i32 %v2_bdec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bdf0

dec_label_pc_bdf0:                                ; preds = %dec_label_pc_b980, %bb94
  %v3_bdf0 = load i32, i32* %stack_var_-40, align 4
  %v1_bdf4 = add i32 %v3_bdf0, 1
  store i32 %v1_bdf4, i32* %r3.global-to-local, align 4
  %v1_bdf8 = load i32, i32* @fp, align 4
  %v9_bdf8 = icmp eq i32 %v1_bdf4, %v1_bdf8
  store i1 %v9_bdf8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bdf4, i32* %stack_var_-40, align 4
  %v5_be00 = icmp slt i32 %v1_bdf4, %v1_bdf8
  br i1 %v5_be00, label %dec_label_pc_b964, label %dec_label_pc_be04

dec_label_pc_be04:                                ; preds = %dec_label_pc_bdf0, %.thread26
  %v0_be0c20 = phi i32 [ %v0_b938, %.thread26 ], [ %v1_bdf8, %dec_label_pc_bdf0 ]
  %v0_be04 = load i32, i32* @sb, align 4
  %v1_be04 = add i32 %v0_be04, 40
  store i32 %v1_be04, i32* @sl, align 4
  %v1_be08 = add i32 %v0_be04, 20
  store i32 %v1_be08, i32* @r7, align 4
  %v2_bf84 = icmp eq i32 %v1_b8e8, 0
  %v6_be38 = inttoptr i32 %v2_b758 to i32*
  %v3_be40 = icmp eq i32 %v3_b940, 65535
  br label %dec_label_pc_be0c

dec_label_pc_be0c:                                ; preds = %dec_label_pc_be68, %dec_label_pc_be04
  %v0_be0c = phi i32 [ %v1_bf48, %dec_label_pc_be68 ], [ %v0_be0c20, %dec_label_pc_be04 ]
  %v2_be0c = icmp eq i32 %v0_be0c, 0
  store i1 %v2_be0c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp95 = icmp slt i32 %v0_be0c, 1
  br label %dec_label_pc_be14

dec_label_pc_be14:                                ; preds = %dec_label_pc_be14, %dec_label_pc_be0c
  br i1 %tmp95, label %dec_label_pc_be14, label %dec_label_pc_be18

dec_label_pc_be18:                                ; preds = %dec_label_pc_be14
  %v0_be18 = load i32, i32* @r7, align 4
  %tmp96 = mul i32 %v0_be18, 256
  %v1_be20 = and i32 %tmp96, 65280
  %tmp97 = udiv i32 %v0_be18, 256
  %v4_be24 = urem i32 %tmp97, 256
  %v5_be24 = or i32 %v4_be24, %v1_be20
  store i32 %v5_be24, i32* @r8, align 4
  store i32 %v2_b758, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b940, i32* %ip.global-to-local, align 4
  %v7_be38 = load i32, i32* %v6_be38, align 4
  store i32 %v7_be38, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_be40, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_be4c = add i32 %v7_be38, 20
  store i32 %v1_be4c, i32* @r5, align 4
  br i1 %v3_be40, label %dec_label_pc_bf74, label %dec_label_pc_be54

dec_label_pc_be54:                                ; preds = %dec_label_pc_bf54, %dec_label_pc_be18
  %v0_be60 = phi i32 [ %v7_bf60, %dec_label_pc_bf54 ], [ %v7_be38, %dec_label_pc_be18 ]
  store i1 %v2_bf84, i1* %cpsr_z.global-to-local, align 1
  %v0_be5c = load i32, i32* @sb, align 4
  store i32 %v0_be5c, i32* @r1, align 4
  %v1_be60 = add i32 %v0_be60, 40
  store i32 %v1_be60, i32* %r0.global-to-local, align 4
  br i1 %v2_bf84, label %dec_label_pc_be68, label %dec_label_pc_bf98

dec_label_pc_be68:                                ; preds = %dec_label_pc_be54, %dec_label_pc_bf74, %dec_label_pc_bf98
  %v2_be68 = phi i32 [ %v0_be60, %dec_label_pc_be54 ], [ %v0_bf8c, %dec_label_pc_bf74 ], [ %v2_be68.pre, %dec_label_pc_bf98 ]
  %v0_be68 = load i32, i32* @r6, align 4
  %v1_be68 = trunc i32 %v0_be68 to i8
  %v3_be68 = add i32 %v2_be68, 10
  %v4_be68 = inttoptr i32 %v3_be68 to i8*
  store i8 %v1_be68, i8* %v4_be68, align 1
  %v0_be6c = load i32, i32* @r6, align 4
  %v1_be6c = trunc i32 %v0_be6c to i8
  %v2_be6c = load i32, i32* @r4, align 4
  %v3_be6c = add i32 %v2_be6c, 11
  %v4_be6c = inttoptr i32 %v3_be6c to i8*
  store i8 %v1_be6c, i8* %v4_be6c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_be74 = load i32, i32* @r4, align 4
  store i32 %v0_be74, i32* @r0, align 4
  %v2_be78 = call i32 @function_e444(i32 %v0_be74, i32 20)
  %v3_be78 = trunc i32 %v2_be78 to i8
  store i32 %v2_be78, i32* %r0.global-to-local, align 4
  %v3_be7c = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b748, i32* %r2.global-to-local, align 4
  %v3_be84 = mul i32 %v3_be7c, 16
  %v2_be88 = add i32 %v3_be84, %v2_b748
  store i32 %v2_be88, i32* %r1.global-to-local, align 4
  %v1_be8c = add i32 %v2_be88, 4
  %v2_be8c = inttoptr i32 %v1_be8c to i32*
  %v3_be8c = load i32, i32* %v2_be8c, align 4
  %v3_be90 = mul i32 %v3_be8c, 65536
  store i32 %v3_be90, i32* %ip.global-to-local, align 4
  %tmp98 = mul i32 %v3_be8c, 256
  %v1_be98 = and i32 %tmp98, 65280
  %tmp99 = udiv i32 %v3_be8c, 256
  %v4_be9c = urem i32 %tmp99, 256
  %v5_be9c = or i32 %v4_be9c, %v1_be98
  store i32 %v5_be9c, i32* %r2.global-to-local, align 4
  %v1_bea0 = add i32 %v3_be8c, 1
  store i32 %v1_bea0, i32* %r3.global-to-local, align 4
  store i32 %v1_bea0, i32* %v2_be8c, align 4
  %v0_bea8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bea8 = load i32, i32* @r5, align 4
  %v2_bea8 = add i32 %v1_bea8, 4
  %v3_bea8 = inttoptr i32 %v2_bea8 to i32*
  store i32 %v0_bea8, i32* %v3_bea8, align 4
  %v0_beac = load i32, i32* %r1.global-to-local, align 4
  %v1_beac = add i32 %v0_beac, 8
  %v2_beac = inttoptr i32 %v1_beac to i32*
  %v3_beac = load i32, i32* %v2_beac, align 4
  %tmp100 = mul i32 %v3_beac, 256
  %v1_beb8 = and i32 %tmp100, 65280
  %tmp101 = udiv i32 %v3_beac, 256
  %v4_bebc = urem i32 %tmp101, 256
  %v5_bebc = or i32 %v4_bebc, %v1_beb8
  store i32 %v5_bebc, i32* %r2.global-to-local, align 4
  %v4_bec037 = udiv i32 %v2_be78, 256
  %v1_bec4 = trunc i32 %v4_bec037 to i8
  %v2_bec4 = load i32, i32* @r4, align 4
  %v3_bec4 = add i32 %v2_bec4, 11
  %v4_bec4 = inttoptr i32 %v3_bec4 to i8*
  store i8 %v1_bec4, i8* %v4_bec4, align 1
  %v3_bec8 = load i32, i32* @r4, align 4
  %v4_bec8 = add i32 %v3_bec8, 10
  %v5_bec8 = inttoptr i32 %v4_bec8 to i8*
  store i8 %v3_be78, i8* %v5_bec8, align 1
  %v0_becc = load i32, i32* %r2.global-to-local, align 4
  %v1_becc = load i32, i32* @r5, align 4
  %v2_becc = add i32 %v1_becc, 8
  %v3_becc = inttoptr i32 %v2_becc to i32*
  store i32 %v0_becc, i32* %v3_becc, align 4
  %v0_bed0 = load i32, i32* @r5, align 4
  store i32 %v0_bed0, i32* @r1, align 4
  %v0_bed4 = load i32, i32* @r8, align 4
  store i32 %v0_bed4, i32* %r2.global-to-local, align 4
  %v0_bed8 = load i32, i32* @r7, align 4
  store i32 %v0_bed8, i32* %r3.global-to-local, align 4
  %v0_bedc = load i32, i32* @r4, align 4
  store i32 %v0_bedc, i32* %r0.global-to-local, align 4
  %v0_bee0 = load i32, i32* @r6, align 4
  %v1_bee0 = trunc i32 %v0_bee0 to i8
  %v3_bee0 = add i32 %v0_bed0, 16
  %v4_bee0 = inttoptr i32 %v3_bee0 to i8*
  store i8 %v1_bee0, i8* %v4_bee0, align 1
  %v0_bee4 = load i32, i32* @r6, align 4
  %v1_bee4 = trunc i32 %v0_bee4 to i8
  %v2_bee4 = load i32, i32* @r5, align 4
  %v3_bee4 = add i32 %v2_bee4, 17
  %v4_bee4 = inttoptr i32 %v3_bee4 to i8*
  store i8 %v1_bee4, i8* %v4_bee4, align 1
  %v4_bee8 = call i32 @function_e4a0(i32 %v0_bedc, i32 %v0_bed0, i32 %v0_bed4, i32 %v0_bed8)
  %v5_bee8 = trunc i32 %v4_bee8 to i8
  store i32 %v4_bee8, i32* %r0.global-to-local, align 4
  %v4_beec38 = udiv i32 %v4_bee8, 256
  %v1_bef0 = trunc i32 %v4_beec38 to i8
  %v2_bef0 = load i32, i32* @r5, align 4
  %v3_bef0 = add i32 %v2_bef0, 17
  %v4_bef0 = inttoptr i32 %v3_bef0 to i8*
  store i8 %v1_bef0, i8* %v4_bef0, align 1
  %v3_bef4 = load i32, i32* @r5, align 4
  %v4_bef4 = add i32 %v3_bef4, 16
  %v5_bef4 = inttoptr i32 %v4_bef4 to i8*
  store i8 %v5_bee8, i8* %v5_bef4, align 1
  %v3_bef8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bef8, i32* %r3.global-to-local, align 4
  %v0_befc = load i32, i32* @r4, align 4
  %v1_befc = add i32 %v0_befc, 20
  %v2_befc = inttoptr i32 %v1_befc to i32*
  %v3_befc = load i32, i32* %v2_befc, align 4
  %v5_bf04 = mul i32 %v3_bef8, 24
  %v3_bf0c = udiv i32 %v3_befc, 65536
  store i32 %v3_bf0c, i32* %r2.global-to-local, align 4
  %v2_bf10 = add i32 %v5_bf04, %arg2
  store i32 %v2_bf10, i32* %ip.global-to-local, align 4
  %v3_bf146 = udiv i32 %v3_befc, 16777216
  %v1_bf18 = trunc i32 %v3_bf146 to i8
  %v3_bf18 = add i32 %v2_bf10, 3
  %v4_bf18 = inttoptr i32 %v3_bf18 to i8*
  store i8 %v1_bf18, i8* %v4_bf18, align 1
  %v0_bf1c = load i32, i32* %r2.global-to-local, align 4
  %v1_bf1c = trunc i32 %v0_bf1c to i8
  %v2_bf1c = load i32, i32* %ip.global-to-local, align 4
  %v3_bf1c = add i32 %v2_bf1c, 2
  %v4_bf1c = inttoptr i32 %v3_bf1c to i8*
  store i8 %v1_bf1c, i8* %v4_bf1c, align 1
  %v0_bf20 = load i32, i32* @r4, align 4
  store i32 %v0_bf20, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b8f8, i32* %r0.global-to-local, align 4
  %v0_bf2c = load i32, i32* @sl, align 4
  store i32 %v0_bf2c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_bf34 = load i32, i32* %ip.global-to-local, align 4
  %v6_bf3c = inttoptr i32 %v0_bf20 to i32*
  %v7_bf3c = call i32 @function_13d4c(i32 %v3_b8f8, i32* %v6_bf3c, i32 %v0_bf2c, i32 16384, i32 %v0_bf34, i32 16)
  %v3_bf40 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bf40, i32* %r3.global-to-local, align 4
  %v1_bf44 = add i32 %v3_bf40, 1
  store i32 %v1_bf44, i32* %r0.global-to-local, align 4
  %v1_bf48 = load i32, i32* @fp, align 4
  %v9_bf48 = icmp eq i32 %v1_bf44, %v1_bf48
  store i1 %v9_bf48, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bf44, i32* %stack_var_-40, align 4
  %v6_bf50 = icmp slt i32 %v1_bf44, %v1_bf48
  br i1 %v6_bf50, label %dec_label_pc_bf54, label %dec_label_pc_be0c

dec_label_pc_bf54:                                ; preds = %dec_label_pc_be68
  store i32 %v2_b758, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b940, i32* %ip.global-to-local, align 4
  %v4_bf60 = mul i32 %v1_bf44, 4
  %v5_bf60 = add i32 %v4_bf60, %v2_b758
  %v6_bf60 = inttoptr i32 %v5_bf60 to i32*
  %v7_bf60 = load i32, i32* %v6_bf60, align 4
  store i32 %v7_bf60, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_be40, i1* %cpsr_z.global-to-local, align 1
  %v1_bf6c = add i32 %v7_bf60, 20
  store i32 %v1_bf6c, i32* @r5, align 4
  br i1 %v3_be40, label %dec_label_pc_bf74, label %dec_label_pc_be54

dec_label_pc_bf74:                                ; preds = %dec_label_pc_bf54, %dec_label_pc_be18
  %v0_bf74 = call i32 @function_fc1c()
  %v1_bf74 = trunc i32 %v0_bf74 to i8
  %v4_bf78 = sdiv i32 %v0_bf74, 256
  store i32 %v4_bf78, i32* %r3.global-to-local, align 4
  %v3_bf7c = load i32, i32* @r4, align 4
  %v4_bf7c = add i32 %v3_bf7c, 4
  %v5_bf7c = inttoptr i32 %v4_bf7c to i8*
  store i8 %v1_bf74, i8* %v5_bf7c, align 1
  store i1 %v2_bf84, i1* %cpsr_z.global-to-local, align 1
  %v0_bf88 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf88 = trunc i32 %v0_bf88 to i8
  %v2_bf88 = load i32, i32* @r4, align 4
  %v3_bf88 = add i32 %v2_bf88, 5
  %v4_bf88 = inttoptr i32 %v3_bf88 to i8*
  store i8 %v1_bf88, i8* %v4_bf88, align 1
  %v0_bf8c = load i32, i32* @r4, align 4
  %v1_bf8c = add i32 %v0_bf8c, 40
  store i32 %v1_bf8c, i32* %r0.global-to-local, align 4
  %v0_bf90 = load i32, i32* @sb, align 4
  store i32 %v0_bf90, i32* @r1, align 4
  %v0_bf94 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bf94, label %dec_label_pc_be68, label %dec_label_pc_bf98

dec_label_pc_bf98:                                ; preds = %dec_label_pc_be54, %dec_label_pc_bf74
  %v0_bf98 = phi i32 [ %v1_be60, %dec_label_pc_be54 ], [ %v1_bf8c, %dec_label_pc_bf74 ]
  %v1_bf98 = inttoptr i32 %v0_bf98 to i8*
  %v2_bf98 = call i32 @function_fdf8(i8* %v1_bf98)
  store i32 %v2_bf98, i32* %r0.global-to-local, align 4
  %v2_be68.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_be68

; uselistorder directives
  uselistorder i32 %v0_bf8c, { 1, 0 }
  uselistorder i32 %v7_bf60, { 1, 2, 0 }
  uselistorder i32 %v1_bf48, { 1, 2, 0 }
  uselistorder i32 %v1_bf44, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_bee8, { 0, 2, 1 }
  uselistorder i32 %v0_bed0, { 1, 0, 2 }
  uselistorder i32 %v3_beac, { 1, 0 }
  uselistorder i32 %v3_be8c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_be78, { 0, 2, 1 }
  uselistorder i32 %v0_be60, { 1, 0 }
  uselistorder i32 %v0_be18, { 1, 0 }
  uselistorder i32 %v0_be0c, { 1, 0 }
  uselistorder i1 %v3_be40, { 2, 3, 1, 0 }
  uselistorder i1 %v2_bf84, { 2, 1, 0 }
  uselistorder i32 %v1_bdf4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bd48, { 0, 2, 1 }
  uselistorder i32 %v3_bd28, { 1, 0 }
  uselistorder i32 %v0_bcfc, { 1, 0, 2 }
  uselistorder i32 %v3_bcf0, { 1, 0 }
  uselistorder i32 %v1_bc54, { 1, 0 }
  uselistorder i32 %v0_bc48, { 1, 2, 0 }
  uselistorder i32 %v3_bc0c, { 1, 0 }
  uselistorder i32 %v2_bbf8, { 1, 0 }
  uselistorder i32 %v3_bbdc, { 1, 0, 2, 3 }
  uselistorder i32 %v2_bbd4, { 1, 0 }
  uselistorder i32 %v3_bbb0, { 1, 0, 2 }
  uselistorder i32 %v3_bba8, { 1, 0 }
  uselistorder i32 %v4_bb90, { 1, 0 }
  uselistorder i32 %v0_bb8c, { 0, 2, 1 }
  uselistorder i1 %v7_bafc, { 1, 0 }
  uselistorder i32 %v7_baf4, { 0, 2, 1, 3 }
  uselistorder i32 %v5_bb40, { 1, 0 }
  uselistorder i1 %v9_bb24, { 1, 0 }
  uselistorder i32 %v4_bb38, { 1, 0 }
  uselistorder i32 %v4_bb34, { 1, 0 }
  uselistorder i32 %v8_ba2c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_ba18, { 1, 0 }
  uselistorder i32 %v0_ba08, { 2, 0, 3, 1 }
  uselistorder i1 %v7_b990, { 1, 0 }
  uselistorder i32 %v3_b98c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_bdb4, { 1, 0 }
  uselistorder i32 %v1_bd9c, { 1, 0 }
  uselistorder i32 %v1_bd84, { 1, 0 }
  uselistorder i32 %v1_bd6c, { 1, 0 }
  uselistorder i32 %v1_bd54, { 1, 0 }
  uselistorder i32 %v5_bb3c, { 1, 0 }
  uselistorder i32 %v3_ba74106, { 1, 0 }
  uselistorder i1 %v2_bb54, { 1, 0 }
  uselistorder i32 %v1_bb50, { 1, 0 }
  uselistorder i32 %v4_bb4c, { 2, 0, 1 }
  uselistorder i32 %v4_bb30, { 1, 0 }
  uselistorder i1 %v3_ba5c, { 1, 0 }
  uselistorder i32 %v1_b970, { 2, 1, 0 }
  uselistorder i32 %v8_b94c, { 2, 1, 0 }
  uselistorder i32 %v8_b948, { 1, 2, 0 }
  uselistorder i32 %v3_b940, { 1, 2, 3, 0 }
  uselistorder i32 %v0_b93c, { 1, 0, 3, 2 }
  uselistorder i1 %v7_b930, { 1, 0 }
  uselistorder i1 %v7_b900, { 1, 0 }
  uselistorder i32 %v3_b8fc, { 2, 3, 0, 1 }
  uselistorder i32 %v3_b8f8, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_b8e8, { 1, 0 }
  uselistorder i32 %v1_b890, { 1, 0 }
  uselistorder i32 %v1_b870, { 1, 0 }
  uselistorder i32 %v1_b850, { 1, 0 }
  uselistorder i32 %v1_b830, { 1, 0 }
  uselistorder i32 %v1_b810, { 1, 0 }
  uselistorder i32 %v1_b7d8, { 1, 0 }
  uselistorder i32 %v2_b758, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_b748, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_b72c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 46, 45, 47, 49, 48, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 20, 12, 13, 14, 15, 16, 17, 18, 19, 24, 21, 22, 23, 25, 27, 26, 29, 28, 32, 30, 33, 34, 31, 36, 35, 37, 38, 39, 41, 40, 42, 46, 43, 44, 45, 47, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder label %dec_label_pc_bf98, { 1, 0 }
  uselistorder label %dec_label_pc_be68, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bdf0, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %.thread9, { 2, 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %dec_label_pc_bb84, { 2, 0, 1 }
  uselistorder label %dec_label_pc_babc, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_ba50, { 1, 0 }
}

define i32 @function_bfa4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bfa4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_bfa8 = urem i32 %arg1, 256
  store i32 %v1_bfa8, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_bfc0 = urem i32 %arg3, 256
  store i32 %v1_bfc0, i32* @r4, align 4
  %v2_bfc4 = call i32 @function_140b4(i32 %v1_bfa8, i32 4)
  %v0_bfc8 = load i32, i32* @r5, align 4
  store i32 %v0_bfc8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bfd8 = load i32, i32* @r4, align 4
  %v5_bfdc = inttoptr i32 %v0_bfc8 to i32*
  %v6_bfdc = call i32 @function_a4e8(i32 %v0_bfd8, i32* %v5_bfdc, i32 2, i32 0)
  %v1_bfe8 = urem i32 %v6_bfdc, 256
  store i32 %v1_bfe8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_bff4 = load i32, i32* @r5, align 4
  store i32 %v0_bff4, i32* %r1.global-to-local, align 4
  %v0_bff8 = load i32, i32* @r4, align 4
  %v5_bffc = trunc i32 %v6_bfdc to i8
  %v6_c000 = inttoptr i32 %v0_bff4 to i32*
  %v7_c000 = call i32 @function_a4e8(i32 %v0_bff8, i32* %v6_c000, i32 3, i32 65535)
  %v0_c004 = load i32, i32* @r5, align 4
  store i32 %v0_c004, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c000, i32* @r8, align 4
  %v0_c014 = load i32, i32* @r4, align 4
  %v4_c018 = inttoptr i32 %v0_c004 to i32*
  %v5_c018 = call i32 @function_a4e8(i32 %v0_c014, i32* %v4_c018, i32 4, i32 64)
  %v1_c020 = urem i32 %v5_c018, 256
  store i32 %v1_c020, i32* %ip.global-to-local, align 4
  %v0_c024 = load i32, i32* @r5, align 4
  store i32 %v0_c024, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c030 = load i32, i32* @r4, align 4
  %v6_c038 = inttoptr i32 %v0_c024 to i32*
  %v7_c038 = call i32 @function_a4e8(i32 %v0_c030, i32* %v6_c038, i32 5, i32 0)
  %v1_c044 = urem i32 %v7_c038, 256
  store i32 %v1_c044, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c050 = load i32, i32* @r5, align 4
  store i32 %v0_c050, i32* %r1.global-to-local, align 4
  %v0_c054 = load i32, i32* @r4, align 4
  %v5_c05c = inttoptr i32 %v0_c050 to i32*
  %v6_c05c = call i32 @function_a4e8(i32 %v0_c054, i32* %v5_c05c, i32 6, i32 65535)
  %v0_c064 = load i32, i32* @r5, align 4
  store i32 %v0_c064, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c05c, i32* @r7, align 4
  %v0_c074 = load i32, i32* @r4, align 4
  %v4_c078 = inttoptr i32 %v0_c064 to i32*
  %v5_c078 = call i32 @function_a4e8(i32 %v0_c074, i32* %v4_c078, i32 7, i32 65535)
  %v0_c080 = load i32, i32* @r5, align 4
  store i32 %v0_c080, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c078, i32* @r6, align 4
  %v0_c090 = load i32, i32* @r4, align 4
  %v4_c094 = inttoptr i32 %v0_c080 to i32*
  %v5_c094 = call i32 @function_a4e8(i32 %v0_c090, i32* %v4_c094, i32 17, i32 65535)
  %v0_c0a0 = load i32, i32* @r5, align 4
  store i32 %v0_c0a0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_c0ac = load i32, i32* @r4, align 4
  %v5_c0b0 = inttoptr i32 %v0_c0a0 to i32*
  %v6_c0b0 = call i32 @function_a4e8(i32 %v0_c0ac, i32* %v5_c0b0, i32 18, i32 65535)
  %v0_c0b4 = load i32, i32* @r5, align 4
  store i32 %v0_c0b4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c0c4 = load i32, i32* @r4, align 4
  %v5_c0c8 = inttoptr i32 %v0_c0b4 to i32*
  %v6_c0c8 = call i32 @function_a4e8(i32 %v0_c0c4, i32* %v5_c0c8, i32 11, i32 0)
  %v0_c0cc = load i32, i32* @r5, align 4
  store i32 %v0_c0cc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c0dc = load i32, i32* @r4, align 4
  %v5_c0e0 = inttoptr i32 %v0_c0cc to i32*
  %v6_c0e0 = call i32 @function_a4e8(i32 %v0_c0dc, i32* %v5_c0e0, i32 12, i32 1)
  %v0_c0e4 = load i32, i32* @r5, align 4
  store i32 %v0_c0e4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c0f4 = load i32, i32* @r4, align 4
  %v5_c0f8 = inttoptr i32 %v0_c0e4 to i32*
  %v6_c0f8 = call i32 @function_a4e8(i32 %v0_c0f4, i32* %v5_c0f8, i32 13, i32 0)
  %v0_c0fc = load i32, i32* @r5, align 4
  store i32 %v0_c0fc, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c10c = load i32, i32* @r4, align 4
  %v5_c110 = inttoptr i32 %v0_c0fc to i32*
  %v6_c110 = call i32 @function_a4e8(i32 %v0_c10c, i32* %v5_c110, i32 14, i32 0)
  %v0_c114 = load i32, i32* @r5, align 4
  store i32 %v0_c114, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c124 = load i32, i32* @r4, align 4
  %v5_c128 = inttoptr i32 %v0_c114 to i32*
  %v6_c128 = call i32 @function_a4e8(i32 %v0_c124, i32* %v5_c128, i32 15, i32 0)
  %v0_c12c = load i32, i32* @r5, align 4
  store i32 %v0_c12c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c13c = load i32, i32* @r4, align 4
  %v5_c140 = inttoptr i32 %v0_c12c to i32*
  %v6_c140 = call i32 @function_a4e8(i32 %v0_c13c, i32* %v5_c140, i32 16, i32 0)
  %v0_c144 = load i32, i32* @r5, align 4
  store i32 %v0_c144, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_c154 = load i32, i32* @r4, align 4
  %v5_c158 = inttoptr i32 %v0_c144 to i32*
  %v6_c158 = call i32 @function_a4e8(i32 %v0_c154, i32* %v5_c158, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c168 = load i32, i32* @r5, align 4
  store i32 %v0_c168, i32* %r1.global-to-local, align 4
  %v0_c16c = load i32, i32* @r4, align 4
  %v4_c170 = inttoptr i32 %v0_c168 to i32*
  %v5_c170 = call i32 @function_a4e8(i32 %v0_c16c, i32* %v4_c170, i32 1, i32 1)
  %v2_c17c = load i32, i32* @global_var_1eafc.85, align 4
  store i32 %v2_c17c, i32* %r3.global-to-local, align 4
  %v1_c180 = urem i32 %v5_c170, 256
  store i32 %v1_c180, i32* %ip.global-to-local, align 4
  %v0_c184 = load i32, i32* @r5, align 4
  store i32 %v0_c184, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c18c = load i32, i32* @r4, align 4
  %v5_c194 = inttoptr i32 %v0_c184 to i32*
  %v6_c194 = call i32 @function_a47c(i32 %v0_c18c, i32* %v5_c194, i32 25, i32 %v2_c17c, i32 %v1_c180)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c1a8 = call i32 @function_13db0(i32 2, i32 3, i32 6)
  %v7_c1ac = icmp eq i32 %v3_c1a8, -1
  store i1 %v7_c1ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c1ac, label %dec_label_pc_c5e4, label %dec_label_pc_c1b8

dec_label_pc_c1b8:                                ; preds = %dec_label_pc_bfa4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c1c0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c1c0, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c1d4 = call i32 @function_13d80(i32 %v3_c1a8, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_c1d8 = icmp eq i32 %v6_c1d4, -1
  store i1 %v7_c1d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c1d8, label %dec_label_pc_c5dc, label %dec_label_pc_c1e0

dec_label_pc_c1e0:                                ; preds = %dec_label_pc_c1b8
  %v0_c1e0 = load i32, i32* @r8, align 4
  %v0_c1e4 = load i32, i32* @r7, align 4
  %v0_c1e8 = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_c1f0 = urem i32 %v0_c1e0, 65536
  store i32 %v3_c1f0, i32* %r2.global-to-local, align 4
  %v3_c1f4 = urem i32 %v0_c1e4, 65536
  store i32 %v3_c1f4, i32* %r3.global-to-local, align 4
  %v3_c1f8 = urem i32 %v0_c1e8, 65536
  store i32 %v3_c1f8, i32* %ip.global-to-local, align 4
  %v0_c1fc = load i32, i32* @fp, align 4
  %v2_c1fc = icmp eq i32 %v0_c1fc, 0
  store i1 %v2_c1fc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp75 = icmp slt i32 %v0_c1fc, 1
  br i1 %tmp75, label %dec_label_pc_c6fc, label %dec_label_pc_c214

dec_label_pc_c214:                                ; preds = %dec_label_pc_c1e0
  %v1_c21c = add i32 %v6_c158, 40
  %tmp76 = mul i32 %v1_c21c, 256
  %v1_c230 = urem i32 %v0_c1e4, 256
  %v1_c234 = and i32 %tmp76, 65280
  %v3_c238 = mul nuw nsw i32 %v1_c230, 256
  %v1_c240 = urem i32 %v0_c1e8, 256
  %tmp77 = udiv i32 %v0_c1e8, 256
  %v3_c244 = urem i32 %tmp77, 256
  %tmp78 = udiv i32 %v1_c21c, 256
  %v4_c248 = urem i32 %tmp78, 256
  %v5_c248 = or i32 %v4_c248, %v1_c234
  store i32 %v5_c248, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_c1e4, 256
  %v4_c24c = urem i32 %tmp79, 256
  %v5_c24c = or i32 %v4_c24c, %v3_c238
  store i32 %v5_c24c, i32* @sl, align 4
  %v4_c250 = mul nuw nsw i32 %v1_c240, 256
  %v5_c250 = or i32 %v4_c250, %v3_c244
  store i32 %v5_c250, i32* @r6, align 4
  %tmp80 = udiv i32 %v0_c1e0, 256
  %v3_c260 = urem i32 %tmp80, 256
  %v1_c264 = urem i32 %v0_c1e0, 256
  %tmp81 = mul i32 %v5_c094, 256
  %v1_c26c = and i32 %tmp81, 65280
  %v1_c270 = urem i32 %v6_c0c8, 2
  %v1_c274 = urem i32 %v6_c0e0, 2
  %v1_c278 = urem i32 %v6_c0f8, 2
  %tmp82 = udiv i32 %v5_c094, 256
  %v4_c27c = urem i32 %tmp82, 256
  %v5_c27c = or i32 %v4_c27c, %v1_c26c
  store i32 %v5_c27c, i32* @r8, align 4
  %v1_c29c = urem i32 %v6_c110, 2
  %v1_c2a0 = urem i32 %v6_c128, 2
  %v1_c2a4 = urem i32 %v6_c140, 2
  %v1_c2a8 = urem i32 %v6_c0f8, 256
  %v4_c2ac = mul nuw nsw i32 %v1_c264, 256
  %v5_c2ac = or i32 %v4_c2ac, %v3_c260
  store i32 %v5_c2ac, i32* @r5, align 4
  %v3_c2c025 = udiv i32 %v1_c234, 256
  store i32 %v3_c2c025, i32* %r3.global-to-local, align 4
  store i32 %v1_c264, i32* %ip.global-to-local, align 4
  store i32 %v1_c230, i32* %r1.global-to-local, align 4
  store i32 %v1_c240, i32* %r2.global-to-local, align 4
  %v5_c2dc = trunc i32 %v0_c1e4 to i8
  store i32 0, i32* @r4, align 4
  %sext8 = mul i32 %v5_c018, 16777216
  %v4_c338 = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %v0_c1e0, 16777216
  %v4_c344 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %tmp78, 16777216
  %v4_c358 = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v1_c21c, 16777216
  %v4_c35c = sdiv i32 %sext11, 16777216
  %tmp = sub nsw i32 0, %v1_c270
  %v4_c3ac = and i32 %tmp, 32
  %tmp93 = sub nsw i32 0, %v1_c274
  %v4_c3c0 = and i32 %tmp93, 16
  %tmp94 = sub nsw i32 0, %v1_c278
  %v4_c3d4 = and i32 %tmp94, 8
  %tmp95 = sub nsw i32 0, %v1_c29c
  %v4_c3e8 = and i32 %tmp95, 4
  %tmp96 = sub nsw i32 0, %v1_c2a0
  %v3_c3fc = and i32 %tmp96, 2
  %sext12 = mul i32 %v0_c1e8, 16777216
  %v7_c42c = sdiv i32 %sext12, 16777216
  %v1_c340 = trunc i32 %v4_c338 to i8
  %extract.t = trunc i32 %v4_c344 to i8
  %v3_c42c = sext i8 %v5_c2dc to i32
  %v2_c450 = icmp eq i32 %v1_c2a8, 0
  br label %dec_label_pc_c2e8

dec_label_pc_c2e8:                                ; preds = %bb89, %dec_label_pc_c214
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_c2f4 = call i32 @function_140b4(i32 1510, i32 1)
  store i32 %v2_bfc4, i32* %ip.global-to-local, align 4
  %v2_c300 = load i32, i32* @r4, align 4
  %v5_c300 = mul i32 %v2_c300, 4
  %v6_c300 = add i32 %v5_c300, %v2_bfc4
  %v7_c300 = inttoptr i32 %v6_c300 to i32*
  store i32 %v2_c2f4, i32* %v7_c300, align 4
  %v3_c304 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c304, i32* %r3.global-to-local, align 4
  %v0_c308 = load i32, i32* %ip.global-to-local, align 4
  %v4_c308 = mul i32 %v3_c304, 4
  %v5_c308 = add i32 %v0_c308, %v4_c308
  %v6_c308 = inttoptr i32 %v5_c308 to i32*
  %v7_c308 = load i32, i32* %v6_c308, align 4
  store i32 %v7_c308, i32* @r7, align 4
  %v1_c30c = inttoptr i32 %v7_c308 to i8*
  %v2_c30c = load i8, i8* %v1_c30c, align 1
  %tmp97 = urem i8 %v2_c30c, 16
  %v1_c310 = zext i8 %tmp97 to i32
  %v1_c314 = or i32 %v1_c310, 64
  store i32 %v1_c314, i32* %r2.global-to-local, align 4
  %v1_c318 = trunc i32 %v1_c314 to i8
  store i8 %v1_c318, i8* %v1_c30c, align 1
  %v0_c31c = load i32, i32* @r7, align 4
  %v1_c31c = inttoptr i32 %v0_c31c to i8*
  %v2_c31c = load i8, i8* %v1_c31c, align 1
  %v1_c320 = and i8 %v2_c31c, -16
  %v1_c324 = or i8 %v1_c320, 5
  store i32 %v1_c044, i32* %r1.global-to-local, align 4
  store i8 %v1_c324, i8* %v1_c31c, align 1
  %v2_c334 = load i32, i32* @r7, align 4
  %v3_c334 = add i32 %v2_c334, 1
  %v4_c334 = inttoptr i32 %v3_c334 to i8*
  store i8 %v5_bffc, i8* %v4_c334, align 1
  store i32 %v4_c338, i32* %r3.global-to-local, align 4
  %v0_c33c = load i32, i32* %r1.global-to-local, align 4
  %v2_c33c = icmp eq i32 %v0_c33c, 0
  store i1 %v2_c33c, i1* %cpsr_z.global-to-local, align 1
  %v2_c340 = load i32, i32* @r7, align 4
  %v3_c340 = add i32 %v2_c340, 8
  %v4_c340 = inttoptr i32 %v3_c340 to i8*
  store i8 %v1_c340, i8* %v4_c340, align 1
  store i32 %v4_c344, i32* %r2.global-to-local, align 4
  %v0_c348 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c348, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c2e8
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c34c = load i32, i32* @r7, align 4
  %v4_c34c = add i32 %v3_c34c, 6
  %v5_c34c = inttoptr i32 %v4_c34c to i8*
  store i8 64, i8* %v5_c34c, align 1
  %v0_c354.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t26 = trunc i32 %v0_c354.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c2e8, %bb
  %v0_c354.off0 = phi i8 [ %extract.t, %dec_label_pc_c2e8 ], [ %extract.t26, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_c354 = load i32, i32* @r7, align 4
  %v3_c354 = add i32 %v2_c354, 5
  %v4_c354 = inttoptr i32 %v3_c354 to i8*
  store i8 %v0_c354.off0, i8* %v4_c354, align 1
  store i32 %v4_c358, i32* %ip.global-to-local, align 4
  store i32 %v4_c35c, i32* %r1.global-to-local, align 4
  %v0_c360 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c360, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  %v0_c364 = load i32, i32* %r3.global-to-local, align 4
  %v1_c364 = trunc i32 %v0_c364 to i8
  %v2_c364 = load i32, i32* @r7, align 4
  %v3_c364 = add i32 %v2_c364, 9
  %v4_c364 = inttoptr i32 %v3_c364 to i8*
  store i8 %v1_c364, i8* %v4_c364, align 1
  %v0_c368 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c368, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_c368 = load i32, i32* %r2.global-to-local, align 4
  %v2_c368 = trunc i32 %v1_c368 to i8
  %v3_c368 = load i32, i32* @r7, align 4
  %v4_c368 = add i32 %v3_c368, 7
  %v5_c368 = inttoptr i32 %v4_c368 to i8*
  store i8 %v2_c368, i8* %v5_c368, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_c36c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c36c, i32* %r2.global-to-local, align 4
  %v0_c370 = load i32, i32* %ip.global-to-local, align 4
  %v1_c370 = trunc i32 %v0_c370 to i8
  %v2_c370 = load i32, i32* @r7, align 4
  %v3_c370 = add i32 %v2_c370, 2
  %v4_c370 = inttoptr i32 %v3_c370 to i8*
  store i8 %v1_c370, i8* %v4_c370, align 1
  store i32 %v6_c194, i32* %ip.global-to-local, align 4
  %v0_c378 = load i32, i32* %r2.global-to-local, align 4
  %v3_c378 = mul i32 %v0_c378, 32
  store i32 %v3_c378, i32* %r3.global-to-local, align 4
  %v1_c37c = load i32, i32* @r7, align 4
  %v2_c37c = add i32 %v1_c37c, 12
  %v3_c37c = inttoptr i32 %v2_c37c to i32*
  store i32 %v6_c194, i32* %v3_c37c, align 4
  %v0_c380 = load i32, i32* %r3.global-to-local, align 4
  %v1_c380 = load i32, i32* %r2.global-to-local, align 4
  %tmp98 = mul i32 %v1_c380, -8
  %v5_c380 = add i32 %v0_c380, %tmp98
  %v1_c384 = load i32, i32* @sb, align 4
  %v2_c384 = add i32 %v1_c384, %v5_c380
  store i32 %v2_c384, i32* %r3.global-to-local, align 4
  %v1_c388 = add i32 %v2_c384, 16
  %v2_c388 = inttoptr i32 %v1_c388 to i32*
  %v3_c388 = load i32, i32* %v2_c388, align 4
  store i32 %v3_c388, i32* %r2.global-to-local, align 4
  %v0_c38c = load i32, i32* %r1.global-to-local, align 4
  %v1_c38c = trunc i32 %v0_c38c to i8
  %v2_c38c = load i32, i32* @r7, align 4
  %v3_c38c = add i32 %v2_c38c, 3
  %v4_c38c = inttoptr i32 %v3_c38c to i8*
  store i8 %v1_c38c, i8* %v4_c38c, align 1
  %v0_c390 = load i32, i32* @r5, align 4
  %v1_c390 = trunc i32 %v0_c390 to i8
  %v2_c390 = load i32, i32* @r7, align 4
  %v3_c390 = add i32 %v2_c390, 4
  %v4_c390 = inttoptr i32 %v3_c390 to i8*
  store i8 %v1_c390, i8* %v4_c390, align 1
  %v0_c394 = load i32, i32* %r2.global-to-local, align 4
  %v1_c394 = load i32, i32* @r7, align 4
  %v2_c394 = add i32 %v1_c394, 16
  %v3_c394 = inttoptr i32 %v2_c394 to i32*
  store i32 %v0_c394, i32* %v3_c394, align 4
  %v0_c398 = load i32, i32* @sl, align 4
  %v1_c398 = trunc i32 %v0_c398 to i8
  %v2_c398 = load i32, i32* @r7, align 4
  %v3_c398 = add i32 %v2_c398, 20
  %v4_c398 = inttoptr i32 %v3_c398 to i8*
  store i8 %v1_c398, i8* %v4_c398, align 1
  %v0_c39c = load i32, i32* @r7, align 4
  %v1_c39c = add i32 %v0_c39c, 20
  store i32 %v1_c39c, i32* @r4, align 4
  %v1_c3a0 = add i32 %v0_c39c, 33
  %v2_c3a0 = inttoptr i32 %v1_c3a0 to i8*
  %v3_c3a0 = load i8, i8* %v2_c3a0, align 1
  %v4_c3a0 = zext i8 %v3_c3a0 to i32
  store i32 %v1_c270, i32* %r1.global-to-local, align 4
  %v1_c3a8 = and i32 %v4_c3a0, 223
  %v5_c3ac = or i32 %v1_c3a8, %v4_c3ac
  store i32 %v5_c3ac, i32* %r3.global-to-local, align 4
  %v1_c3b0 = trunc i32 %v5_c3ac to i8
  store i8 %v1_c3b0, i8* %v2_c3a0, align 1
  %v0_c3b4 = load i32, i32* @r4, align 4
  %v1_c3b4 = add i32 %v0_c3b4, 13
  %v2_c3b4 = inttoptr i32 %v1_c3b4 to i8*
  %v3_c3b4 = load i8, i8* %v2_c3b4, align 1
  %v4_c3b4 = zext i8 %v3_c3b4 to i32
  store i32 %v1_c274, i32* %r3.global-to-local, align 4
  %v1_c3bc = and i32 %v4_c3b4, 239
  %v5_c3c0 = or i32 %v1_c3bc, %v4_c3c0
  store i32 %v5_c3c0, i32* %r2.global-to-local, align 4
  %v1_c3c4 = trunc i32 %v5_c3c0 to i8
  store i8 %v1_c3c4, i8* %v2_c3b4, align 1
  %v0_c3c8 = load i32, i32* @r4, align 4
  %v1_c3c8 = add i32 %v0_c3c8, 13
  %v2_c3c8 = inttoptr i32 %v1_c3c8 to i8*
  %v3_c3c8 = load i8, i8* %v2_c3c8, align 1
  %v4_c3c8 = zext i8 %v3_c3c8 to i32
  store i32 %v1_c278, i32* %ip.global-to-local, align 4
  %v1_c3d0 = and i32 %v4_c3c8, 247
  %v5_c3d4 = or i32 %v1_c3d0, %v4_c3d4
  store i32 %v5_c3d4, i32* %r3.global-to-local, align 4
  %v1_c3d8 = trunc i32 %v5_c3d4 to i8
  store i8 %v1_c3d8, i8* %v2_c3c8, align 1
  %v0_c3dc = load i32, i32* @r4, align 4
  %v1_c3dc = add i32 %v0_c3dc, 13
  %v2_c3dc = inttoptr i32 %v1_c3dc to i8*
  %v3_c3dc = load i8, i8* %v2_c3dc, align 1
  %v4_c3dc = zext i8 %v3_c3dc to i32
  store i32 %v1_c29c, i32* %r1.global-to-local, align 4
  %v1_c3e4 = and i32 %v4_c3dc, 251
  %v5_c3e8 = or i32 %v1_c3e4, %v4_c3e8
  store i32 %v5_c3e8, i32* %r2.global-to-local, align 4
  %v1_c3ec = trunc i32 %v5_c3e8 to i8
  store i8 %v1_c3ec, i8* %v2_c3dc, align 1
  %v0_c3f0 = load i32, i32* @r4, align 4
  %v1_c3f0 = add i32 %v0_c3f0, 13
  %v2_c3f0 = inttoptr i32 %v1_c3f0 to i8*
  %v3_c3f0 = load i8, i8* %v2_c3f0, align 1
  %v4_c3f0 = zext i8 %v3_c3f0 to i32
  store i32 %v1_c2a0, i32* %r2.global-to-local, align 4
  %v1_c3f8 = and i32 %v4_c3f0, 253
  %v4_c3fc = or i32 %v1_c3f8, %v3_c3fc
  store i32 %v4_c3fc, i32* %r3.global-to-local, align 4
  %v1_c400 = trunc i32 %v4_c3fc to i8
  store i8 %v1_c400, i8* %v2_c3f0, align 1
  %v0_c404 = load i32, i32* @r4, align 4
  %v1_c404 = add i32 %v0_c404, 12
  %v2_c404 = inttoptr i32 %v1_c404 to i8*
  %v3_c404 = load i8, i8* %v2_c404, align 1
  %v4_c404 = zext i8 %v3_c404 to i32
  store i32 %v4_c404, i32* %r2.global-to-local, align 4
  %v1_c408 = add i32 %v0_c404, 13
  %v2_c408 = inttoptr i32 %v1_c408 to i8*
  %v3_c408 = load i8, i8* %v2_c408, align 1
  %v4_c408 = zext i8 %v3_c408 to i32
  store i32 %v1_c2a4, i32* %ip.global-to-local, align 4
  %tmp99 = urem i8 %v3_c404, 16
  %v1_c410 = zext i8 %tmp99 to i32
  %v1_c414 = and i32 %v4_c408, 254
  %v2_c418 = or i32 %v1_c414, %v1_c2a4
  store i32 %v2_c418, i32* %r3.global-to-local, align 4
  %v1_c41c = or i32 %v1_c410, 80
  store i32 %v1_c41c, i32* %r2.global-to-local, align 4
  %v1_c420 = trunc i32 %v2_c418 to i8
  store i8 %v1_c420, i8* %v2_c408, align 1
  %v0_c424 = load i32, i32* %r2.global-to-local, align 4
  %v1_c424 = trunc i32 %v0_c424 to i8
  %v2_c424 = load i32, i32* @r4, align 4
  %v3_c424 = add i32 %v2_c424, 12
  %v4_c424 = inttoptr i32 %v3_c424 to i8*
  store i8 %v1_c424, i8* %v4_c424, align 1
  store i32 %v3_c42c, i32* %r1.global-to-local, align 4
  store i32 %v7_c42c, i32* %r2.global-to-local, align 4
  %v2_c430 = load i32, i32* @r4, align 4
  %v3_c430 = add i32 %v2_c430, 1
  %v4_c430 = inttoptr i32 %v3_c430 to i8*
  store i8 %v5_c2dc, i8* %v4_c430, align 1
  %v0_c434 = load i32, i32* %r2.global-to-local, align 4
  %v1_c434 = trunc i32 %v0_c434 to i8
  %v2_c434 = load i32, i32* @r4, align 4
  %v3_c434 = add i32 %v2_c434, 3
  %v4_c434 = inttoptr i32 %v3_c434 to i8*
  store i8 %v1_c434, i8* %v4_c434, align 1
  %v0_c438 = load i32, i32* @r6, align 4
  %v1_c438 = trunc i32 %v0_c438 to i8
  %v2_c438 = load i32, i32* @r4, align 4
  %v3_c438 = add i32 %v2_c438, 2
  %v4_c438 = inttoptr i32 %v3_c438 to i8*
  store i8 %v1_c438, i8* %v4_c438, align 1
  %v0_c43c = load i32, i32* @r8, align 4
  %v1_c43c = load i32, i32* @r4, align 4
  %v2_c43c = add i32 %v1_c43c, 4
  %v3_c43c = inttoptr i32 %v2_c43c to i32*
  store i32 %v0_c43c, i32* %v3_c43c, align 4
  %v0_c440 = call i32 @function_fc1c()
  store i32 %v1_c2a8, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_c440, 16777216
  %v1_c448 = sdiv i32 %sext, 16777216
  store i32 %v1_c448, i32* %r2.global-to-local, align 4
  %v3_c44c = ashr i32 %sext, 31
  store i32 %v3_c44c, i32* %r3.global-to-local, align 4
  store i1 %v2_c450, i1* %cpsr_z.global-to-local, align 1
  %v1_c454 = trunc i32 %v3_c44c to i8
  %v2_c454 = load i32, i32* @r4, align 4
  %v3_c454 = add i32 %v2_c454, 15
  %v4_c454 = inttoptr i32 %v3_c454 to i8*
  store i8 %v1_c454, i8* %v4_c454, align 1
  %v0_c458 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_c464.pre = load i32, i32* @r4, align 4
  br i1 %v0_c458, label %.thread13, label %bb87

bb87:                                             ; preds = %bb86
  %v2_c458 = add i32 %v2_c464.pre, 13
  %v3_c458 = inttoptr i32 %v2_c458 to i8*
  %v4_c458 = load i8, i8* %v3_c458, align 1
  %v5_c458 = zext i8 %v4_c458 to i32
  %v2_c45c = or i32 %v5_c458, 8
  store i32 %v2_c45c, i32* %r3.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %bb86, %bb87
  store i32 %v6_c158, i32* @r1, align 4
  %v0_c464 = load i32, i32* %r2.global-to-local, align 4
  %v1_c464 = trunc i32 %v0_c464 to i8
  %v3_c464 = add i32 %v2_c464.pre, 14
  %v4_c464 = inttoptr i32 %v3_c464 to i8*
  store i8 %v1_c464, i8* %v4_c464, align 1
  %v0_c468 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c468, label %bb89, label %bb88

bb88:                                             ; preds = %.thread13
  %v1_c468 = load i32, i32* %r3.global-to-local, align 4
  %v2_c468 = trunc i32 %v1_c468 to i8
  %v3_c468 = load i32, i32* @r4, align 4
  %v4_c468 = add i32 %v3_c468, 13
  %v5_c468 = inttoptr i32 %v4_c468 to i8*
  store i8 %v2_c468, i8* %v5_c468, align 1
  br label %bb89

bb89:                                             ; preds = %.thread13, %bb88
  %v0_c46c = load i32, i32* @r7, align 4
  %v1_c46c = add i32 %v0_c46c, 40
  %v1_c470 = inttoptr i32 %v1_c46c to i8*
  %v2_c470 = call i32 @function_fdf8(i8* %v1_c470)
  %v3_c474 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c474, i32* %r3.global-to-local, align 4
  %v1_c478 = add i32 %v3_c474, 1
  store i32 %v1_c478, i32* @r4, align 4
  %v0_c47c = load i32, i32* @fp, align 4
  %v9_c47c = icmp eq i32 %v0_c47c, %v1_c478
  store i1 %v9_c47c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c478, i32* %stack_var_-40, align 4
  %v8_c484 = icmp sgt i32 %v0_c47c, %v1_c478
  br i1 %v8_c484, label %dec_label_pc_c2e8, label %dec_label_pc_c488

dec_label_pc_c488:                                ; preds = %bb89
  store i32 %v6_c158, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c490.preheader

dec_label_pc_c490.preheader:                      ; preds = %dec_label_pc_c488, %dec_label_pc_c6fc
  %v0_c49017 = phi i32 [ %v0_c47c, %dec_label_pc_c488 ], [ %v0_c1fc, %dec_label_pc_c6fc ]
  %stack_var_-168.0.ph = phi i32 [ %v1_c21c, %dec_label_pc_c488 ], [ %v1_c704, %dec_label_pc_c6fc ]
  %storemerge = add i32 %v6_c158, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_c648 = icmp eq i32 %v6_c194, -1
  %v8_c648 = icmp eq i32 %v6_c194, -1
  %v3_c664 = icmp eq i32 %v3_c1f0, 65535
  %v2_c6e0 = icmp eq i32 %v1_c180, 0
  br label %dec_label_pc_c490

dec_label_pc_c490:                                ; preds = %dec_label_pc_c538, %dec_label_pc_c490.preheader
  %v0_c490 = phi i32 [ %v0_c49017, %dec_label_pc_c490.preheader ], [ %v0_c5cc, %dec_label_pc_c538 ]
  %v2_c490 = icmp eq i32 %v0_c490, 0
  store i1 %v2_c490, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp90 = icmp slt i32 %v0_c490, 1
  br label %dec_label_pc_c498

dec_label_pc_c498:                                ; preds = %dec_label_pc_c498, %dec_label_pc_c490
  br i1 %tmp90, label %dec_label_pc_c498, label %dec_label_pc_c49c

dec_label_pc_c49c:                                ; preds = %dec_label_pc_c498
  %v0_c49c = load i32, i32* @r8, align 4
  %v3_c49c = mul i32 %v0_c49c, 65536
  store i32 %v3_c49c, i32* %r2.global-to-local, align 4
  %tmp91 = mul i32 %v0_c49c, 256
  %v1_c4a4 = and i32 %tmp91, 65280
  store i32 %v1_c4a4, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp92 = udiv i32 %v0_c49c, 256
  %v4_c4b0 = urem i32 %tmp92, 256
  %v5_c4b0 = or i32 %v4_c4b0, %v1_c4a4
  store i32 %v5_c4b0, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c4b8

dec_label_pc_c4b8:                                ; preds = %dec_label_pc_c538, %dec_label_pc_c49c
  %v1_c4cc = phi i32 [ %v1_c5c8, %dec_label_pc_c538 ], [ 0, %dec_label_pc_c49c ]
  %v5_c4bc = mul i32 %v1_c4cc, 24
  %v1_c4c0 = load i32, i32* @sb, align 4
  %v2_c4c0 = add i32 %v1_c4c0, %v5_c4bc
  store i32 %v2_c4c0, i32* %r3.global-to-local, align 4
  store i32 %v2_bfc4, i32* %ip.global-to-local, align 4
  %v1_c4c8 = add i32 %v2_c4c0, 20
  %v2_c4c8 = inttoptr i32 %v1_c4c8 to i8*
  %v3_c4c8 = load i8, i8* %v2_c4c8, align 1
  %v4_c4c8 = zext i8 %v3_c4c8 to i32
  store i32 %v4_c4c8, i32* %r2.global-to-local, align 4
  %v4_c4cc = mul i32 %v1_c4cc, 4
  %v5_c4cc = add i32 %v4_c4cc, %v2_bfc4
  %v6_c4cc = inttoptr i32 %v5_c4cc to i32*
  %v7_c4cc = load i32, i32* %v6_c4cc, align 4
  store i32 %v7_c4cc, i32* @r5, align 4
  %v7_c4d0 = icmp eq i8 %v3_c4c8, 31
  store i1 %v7_c4d0, i1* %cpsr_z.global-to-local, align 1
  %v1_c4d4 = add i32 %v7_c4cc, 20
  store i32 %v1_c4d4, i32* @r6, align 4
  %tmp100 = icmp ult i8 %v3_c4c8, 32
  br i1 %tmp100, label %dec_label_pc_c5ec, label %dec_label_pc_c4dc

dec_label_pc_c4dc:                                ; preds = %dec_label_pc_c4b8
  store i32 %v6_c194, i32* %r1.global-to-local, align 4
  store i1 %v8_c648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c648, label %dec_label_pc_c654, label %dec_label_pc_c4e8

dec_label_pc_c4e8:                                ; preds = %dec_label_pc_c5ec, %dec_label_pc_c4dc
  store i32 %v3_c1f0, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c664, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c664, label %dec_label_pc_c670, label %dec_label_pc_c4fc

dec_label_pc_c4fc:                                ; preds = %dec_label_pc_c654.dec_label_pc_c4fc_crit_edge, %dec_label_pc_c4e8
  %v1_c500 = phi i32 [ %v1_c500.pre, %dec_label_pc_c654.dec_label_pc_c4fc_crit_edge ], [ 65535, %dec_label_pc_c4e8 ]
  store i32 %v3_c1f4, i32* %r3.global-to-local, align 4
  %v9_c500 = icmp eq i32 %v3_c1f4, %v1_c500
  store i1 %v9_c500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c500, label %dec_label_pc_c68c, label %dec_label_pc_c508

dec_label_pc_c508:                                ; preds = %dec_label_pc_c670.dec_label_pc_c508_crit_edge, %dec_label_pc_c4fc
  %v1_c50c = phi i32 [ %v1_c50c.pre, %dec_label_pc_c670.dec_label_pc_c508_crit_edge ], [ %v1_c500, %dec_label_pc_c4fc ]
  store i32 %v3_c1f8, i32* %ip.global-to-local, align 4
  %v9_c50c = icmp eq i32 %v3_c1f8, %v1_c50c
  store i1 %v9_c50c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c50c, label %dec_label_pc_c6a8, label %dec_label_pc_c514

dec_label_pc_c514:                                ; preds = %dec_label_pc_c68c.dec_label_pc_c514_crit_edge, %dec_label_pc_c508
  %v1_c518 = phi i32 [ %v1_c518.pre, %dec_label_pc_c68c.dec_label_pc_c514_crit_edge ], [ %v1_c50c, %dec_label_pc_c508 ]
  store i32 %v5_c094, i32* %r1.global-to-local, align 4
  %v9_c518 = icmp eq i32 %v5_c094, %v1_c518
  store i1 %v9_c518, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c518, label %dec_label_pc_c6c4, label %dec_label_pc_c520

dec_label_pc_c520:                                ; preds = %dec_label_pc_c6a8.dec_label_pc_c520_crit_edge, %dec_label_pc_c514
  %v1_c524 = phi i32 [ %v1_c524.pre, %dec_label_pc_c6a8.dec_label_pc_c520_crit_edge ], [ %v1_c518, %dec_label_pc_c514 ]
  store i32 %v6_c0b0, i32* %r2.global-to-local, align 4
  %v9_c524 = icmp eq i32 %v6_c0b0, %v1_c524
  store i1 %v9_c524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c524, label %dec_label_pc_c6d8, label %dec_label_pc_c52c

dec_label_pc_c52c:                                ; preds = %dec_label_pc_c6c4, %dec_label_pc_c520
  store i32 %v1_c180, i32* %r3.global-to-local, align 4
  store i1 %v2_c6e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c6e0, label %dec_label_pc_c538, label %dec_label_pc_c6ec

dec_label_pc_c538:                                ; preds = %dec_label_pc_c52c, %dec_label_pc_c6d8, %dec_label_pc_c6ec
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c53c = load i32, i32* @r7, align 4
  %v1_c53c = trunc i32 %v0_c53c to i8
  %v2_c53c = load i32, i32* @r5, align 4
  %v3_c53c = add i32 %v2_c53c, 10
  %v4_c53c = inttoptr i32 %v3_c53c to i8*
  store i8 %v1_c53c, i8* %v4_c53c, align 1
  %v0_c540 = load i32, i32* @r7, align 4
  %v1_c540 = trunc i32 %v0_c540 to i8
  %v2_c540 = load i32, i32* @r5, align 4
  %v3_c540 = add i32 %v2_c540, 11
  %v4_c540 = inttoptr i32 %v3_c540 to i8*
  store i8 %v1_c540, i8* %v4_c540, align 1
  %v0_c544 = load i32, i32* @r5, align 4
  store i32 %v0_c544, i32* @r0, align 4
  %v2_c548 = call i32 @function_e444(i32 %v0_c544, i32 20)
  %v3_c548 = trunc i32 %v2_c548 to i8
  %v4_c54c28 = udiv i32 %v2_c548, 256
  %v1_c550 = trunc i32 %v4_c54c28 to i8
  %v2_c550 = load i32, i32* @r5, align 4
  %v3_c550 = add i32 %v2_c550, 11
  %v4_c550 = inttoptr i32 %v3_c550 to i8*
  store i8 %v1_c550, i8* %v4_c550, align 1
  %v3_c554 = load i32, i32* @r5, align 4
  %v4_c554 = add i32 %v3_c554, 10
  %v5_c554 = inttoptr i32 %v4_c554 to i8*
  store i8 %v3_c548, i8* %v5_c554, align 1
  %v0_c558 = load i32, i32* @r6, align 4
  store i32 %v0_c558, i32* @r1, align 4
  %v0_c55c = load i32, i32* @sl, align 4
  store i32 %v0_c55c, i32* %r2.global-to-local, align 4
  %v0_c560 = load i32, i32* @r8, align 4
  store i32 %v0_c560, i32* %r3.global-to-local, align 4
  %v0_c564 = load i32, i32* @r7, align 4
  %v1_c564 = trunc i32 %v0_c564 to i8
  %v3_c564 = add i32 %v0_c558, 16
  %v4_c564 = inttoptr i32 %v3_c564 to i8*
  store i8 %v1_c564, i8* %v4_c564, align 1
  %v0_c568 = load i32, i32* @r7, align 4
  %v1_c568 = trunc i32 %v0_c568 to i8
  %v2_c568 = load i32, i32* @r6, align 4
  %v3_c568 = add i32 %v2_c568, 17
  %v4_c568 = inttoptr i32 %v3_c568 to i8*
  store i8 %v1_c568, i8* %v4_c568, align 1
  %v0_c56c = load i32, i32* @r5, align 4
  %v4_c570 = call i32 @function_e4a0(i32 %v0_c56c, i32 %v0_c558, i32 %v0_c55c, i32 %v0_c560)
  %v5_c570 = trunc i32 %v4_c570 to i8
  %v4_c57429 = udiv i32 %v4_c570, 256
  %v1_c578 = trunc i32 %v4_c57429 to i8
  %v2_c578 = load i32, i32* @r6, align 4
  %v3_c578 = add i32 %v2_c578, 17
  %v4_c578 = inttoptr i32 %v3_c578 to i8*
  store i8 %v1_c578, i8* %v4_c578, align 1
  %v3_c57c = load i32, i32* @r6, align 4
  %v4_c57c = add i32 %v3_c57c, 16
  %v5_c57c = inttoptr i32 %v4_c57c to i8*
  store i8 %v5_c570, i8* %v5_c57c, align 1
  %v3_c580 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c580, i32* %r3.global-to-local, align 4
  %v0_c584 = load i32, i32* @r5, align 4
  %v1_c584 = add i32 %v0_c584, 20
  %v2_c584 = inttoptr i32 %v1_c584 to i32*
  %v3_c584 = load i32, i32* %v2_c584, align 4
  %v3_c58c = udiv i32 %v3_c584, 65536
  store i32 %v3_c58c, i32* %r2.global-to-local, align 4
  %v5_c590 = mul i32 %v3_c580, 24
  %v1_c594 = load i32, i32* @sb, align 4
  %v2_c594 = add i32 %v1_c594, %v5_c590
  store i32 %v2_c594, i32* %ip.global-to-local, align 4
  %v3_c59827 = udiv i32 %v3_c584, 16777216
  %v1_c59c = trunc i32 %v3_c59827 to i8
  %v3_c59c = add i32 %v2_c594, 3
  %v4_c59c = inttoptr i32 %v3_c59c to i8*
  store i8 %v1_c59c, i8* %v4_c59c, align 1
  %v0_c5a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c5a0 = trunc i32 %v0_c5a0 to i8
  %v2_c5a0 = load i32, i32* %ip.global-to-local, align 4
  %v3_c5a0 = add i32 %v2_c5a0, 2
  %v4_c5a0 = inttoptr i32 %v3_c5a0 to i8*
  store i8 %v1_c5a0, i8* %v4_c5a0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c5a8 = load i32, i32* @r5, align 4
  store i32 %v0_c5a8, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c5b8 = load i32, i32* %ip.global-to-local, align 4
  %v6_c5c0 = inttoptr i32 %v0_c5a8 to i32*
  %v7_c5c0 = call i32 @function_13d4c(i32 %v3_c1a8, i32* %v6_c5c0, i32 %stack_var_-168.0.ph, i32 16384, i32 %v0_c5b8, i32 16)
  %v3_c5c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c5c4, i32* %r3.global-to-local, align 4
  %v1_c5c8 = add i32 %v3_c5c4, 1
  %v0_c5cc = load i32, i32* @fp, align 4
  %v9_c5cc = icmp eq i32 %v0_c5cc, %v1_c5c8
  store i1 %v9_c5cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c5c8, i32* %stack_var_-40, align 4
  %v7_c5d4 = icmp sgt i32 %v0_c5cc, %v1_c5c8
  br i1 %v7_c5d4, label %dec_label_pc_c4b8, label %dec_label_pc_c490

dec_label_pc_c5dc:                                ; preds = %dec_label_pc_c1b8
  %v1_c5e0 = call i32 @function_134b0(i32 %v3_c1a8)
  br label %dec_label_pc_c5e4

dec_label_pc_c5e4:                                ; preds = %dec_label_pc_bfa4, %dec_label_pc_c5dc
  %v29_c5e8 = phi i32 [ %v3_c1a8, %dec_label_pc_bfa4 ], [ %v1_c5e0, %dec_label_pc_c5dc ]
  ret i32 %v29_c5e8

dec_label_pc_c5ec:                                ; preds = %dec_label_pc_c4b8
  %v1_c5ec = add i32 %v2_c4c0, 16
  %v2_c5ec = inttoptr i32 %v1_c5ec to i32*
  %v3_c5ec = load i32, i32* %v2_c5ec, align 4
  %v0_c5f0 = call i32 @function_fc1c()
  %v3_c5f4 = load i32, i32* %stack_var_-40, align 4
  %v5_c5fc = mul i32 %v3_c5f4, 24
  %v1_c604 = load i32, i32* @sb, align 4
  %v2_c604 = add i32 %v1_c604, %v5_c5fc
  store i32 %v2_c604, i32* %r1.global-to-local, align 4
  %v1_c608 = and i32 %v3_c5ec, 65280
  store i32 %v1_c608, i32* %r3.global-to-local, align 4
  %v1_c600 = udiv i32 %v3_c5ec, 256
  %v3_c60c = and i32 %v1_c600, 65280
  store i32 %v3_c60c, i32* %r2.global-to-local, align 4
  %v3_c610 = mul i32 %v3_c5ec, 16777216
  store i32 %v3_c610, i32* %ip.global-to-local, align 4
  %v1_c614 = add i32 %v2_c604, 20
  %v2_c614 = inttoptr i32 %v1_c614 to i8*
  %v3_c614 = load i8, i8* %v2_c614, align 1
  %v4_c614 = zext i8 %v3_c614 to i32
  %v4_c618 = mul nuw nsw i32 %v1_c608, 256
  %v5_c618 = or i32 %v4_c618, %v3_c610
  store i32 %v5_c618, i32* %ip.global-to-local, align 4
  %v2_c620 = call i32 @llvm.bswap.i32(i32 %v3_c5ec)
  %v7_c624 = lshr i32 %v0_c5f0, %v4_c614
  %v8_c624 = add i32 %v7_c624, %v2_c620
  store i32 %v8_c624, i32* %r2.global-to-local, align 4
  %v2_c640 = call i32 @llvm.bswap.i32(i32 %v8_c624)
  store i32 %v2_c640, i32* %r3.global-to-local, align 4
  store i32 %v6_c194, i32* %r1.global-to-local, align 4
  store i1 %v8_c648, i1* %cpsr_z.global-to-local, align 1
  %v1_c64c = load i32, i32* @r5, align 4
  %v2_c64c = add i32 %v1_c64c, 16
  %v3_c64c = inttoptr i32 %v2_c64c to i32*
  store i32 %v2_c640, i32* %v3_c64c, align 4
  br i1 %v3_c648, label %dec_label_pc_c654, label %dec_label_pc_c4e8

dec_label_pc_c654:                                ; preds = %dec_label_pc_c5ec, %dec_label_pc_c4dc
  %v0_c654 = call i32 @function_fc1c()
  store i32 %v3_c1f0, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c664, i1* %cpsr_z.global-to-local, align 1
  %v1_c668 = load i32, i32* @r5, align 4
  %v2_c668 = add i32 %v1_c668, 12
  %v3_c668 = inttoptr i32 %v2_c668 to i32*
  store i32 %v0_c654, i32* %v3_c668, align 4
  br i1 %v3_c664, label %dec_label_pc_c670, label %dec_label_pc_c654.dec_label_pc_c4fc_crit_edge

dec_label_pc_c654.dec_label_pc_c4fc_crit_edge:    ; preds = %dec_label_pc_c654
  %v1_c500.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c4fc

dec_label_pc_c670:                                ; preds = %dec_label_pc_c654, %dec_label_pc_c4e8
  %v0_c670 = call i32 @function_fc1c()
  %v1_c670 = trunc i32 %v0_c670 to i8
  %v4_c67430 = udiv i32 %v0_c670, 256
  %v1_c678 = trunc i32 %v4_c67430 to i8
  %v2_c678 = load i32, i32* @r5, align 4
  %v3_c678 = add i32 %v2_c678, 5
  %v4_c678 = inttoptr i32 %v3_c678 to i8*
  store i8 %v1_c678, i8* %v4_c678, align 1
  store i32 %v3_c1f4, i32* %r3.global-to-local, align 4
  %v1_c680 = load i32, i32* @r4, align 4
  %v9_c680 = icmp eq i32 %v3_c1f4, %v1_c680
  store i1 %v9_c680, i1* %cpsr_z.global-to-local, align 1
  %v3_c684 = load i32, i32* @r5, align 4
  %v4_c684 = add i32 %v3_c684, 4
  %v5_c684 = inttoptr i32 %v4_c684 to i8*
  store i8 %v1_c670, i8* %v5_c684, align 1
  %v0_c688 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c688, label %dec_label_pc_c68c, label %dec_label_pc_c670.dec_label_pc_c508_crit_edge

dec_label_pc_c670.dec_label_pc_c508_crit_edge:    ; preds = %dec_label_pc_c670
  %v1_c50c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c508

dec_label_pc_c68c:                                ; preds = %dec_label_pc_c670, %dec_label_pc_c4fc
  %v0_c68c = call i32 @function_fc1c()
  %v1_c68c = trunc i32 %v0_c68c to i8
  store i32 %v3_c1f8, i32* %ip.global-to-local, align 4
  %v4_c694 = sdiv i32 %v0_c68c, 256
  store i32 %v4_c694, i32* %r3.global-to-local, align 4
  %v1_c698 = load i32, i32* @r4, align 4
  %v9_c698 = icmp eq i32 %v3_c1f8, %v1_c698
  store i1 %v9_c698, i1* %cpsr_z.global-to-local, align 1
  %v3_c69c = load i32, i32* @r5, align 4
  %v4_c69c = add i32 %v3_c69c, 20
  %v5_c69c = inttoptr i32 %v4_c69c to i8*
  store i8 %v1_c68c, i8* %v5_c69c, align 1
  %v0_c6a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c6a0 = trunc i32 %v0_c6a0 to i8
  %v2_c6a0 = load i32, i32* @r6, align 4
  %v3_c6a0 = add i32 %v2_c6a0, 1
  %v4_c6a0 = inttoptr i32 %v3_c6a0 to i8*
  store i8 %v1_c6a0, i8* %v4_c6a0, align 1
  %v0_c6a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c6a4, label %dec_label_pc_c6a8, label %dec_label_pc_c68c.dec_label_pc_c514_crit_edge

dec_label_pc_c68c.dec_label_pc_c514_crit_edge:    ; preds = %dec_label_pc_c68c
  %v1_c518.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c514

dec_label_pc_c6a8:                                ; preds = %dec_label_pc_c68c, %dec_label_pc_c508
  %v0_c6a8 = call i32 @function_fc1c()
  %v1_c6a8 = trunc i32 %v0_c6a8 to i8
  store i32 %v5_c094, i32* %r1.global-to-local, align 4
  %v4_c6b0 = sdiv i32 %v0_c6a8, 256
  store i32 %v4_c6b0, i32* %r3.global-to-local, align 4
  %v1_c6b4 = load i32, i32* @r4, align 4
  %v9_c6b4 = icmp eq i32 %v5_c094, %v1_c6b4
  store i1 %v9_c6b4, i1* %cpsr_z.global-to-local, align 1
  %v1_c6b8 = trunc i32 %v4_c6b0 to i8
  %v2_c6b8 = load i32, i32* @r6, align 4
  %v3_c6b8 = add i32 %v2_c6b8, 3
  %v4_c6b8 = inttoptr i32 %v3_c6b8 to i8*
  store i8 %v1_c6b8, i8* %v4_c6b8, align 1
  %v3_c6bc = load i32, i32* @r6, align 4
  %v4_c6bc = add i32 %v3_c6bc, 2
  %v5_c6bc = inttoptr i32 %v4_c6bc to i8*
  store i8 %v1_c6a8, i8* %v5_c6bc, align 1
  %v0_c6c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c6c0, label %dec_label_pc_c6c4, label %dec_label_pc_c6a8.dec_label_pc_c520_crit_edge

dec_label_pc_c6a8.dec_label_pc_c520_crit_edge:    ; preds = %dec_label_pc_c6a8
  %v1_c524.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c520

dec_label_pc_c6c4:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c514
  %v0_c6c4 = call i32 @function_fc1c()
  store i32 %v6_c0b0, i32* %r2.global-to-local, align 4
  %v1_c6cc = load i32, i32* @r4, align 4
  %v9_c6cc = icmp eq i32 %v6_c0b0, %v1_c6cc
  store i1 %v9_c6cc, i1* %cpsr_z.global-to-local, align 1
  %v1_c6d0 = load i32, i32* @r6, align 4
  %v2_c6d0 = add i32 %v1_c6d0, 4
  %v3_c6d0 = inttoptr i32 %v2_c6d0 to i32*
  store i32 %v0_c6c4, i32* %v3_c6d0, align 4
  br i1 %v9_c6cc, label %dec_label_pc_c6d8, label %dec_label_pc_c52c

dec_label_pc_c6d8:                                ; preds = %dec_label_pc_c6c4, %dec_label_pc_c520
  %v0_c6d8 = call i32 @function_fc1c()
  store i32 %v1_c180, i32* %r3.global-to-local, align 4
  store i1 %v2_c6e0, i1* %cpsr_z.global-to-local, align 1
  %v1_c6e4 = load i32, i32* @r6, align 4
  %v2_c6e4 = add i32 %v1_c6e4, 8
  %v3_c6e4 = inttoptr i32 %v2_c6e4 to i32*
  store i32 %v0_c6d8, i32* %v3_c6e4, align 4
  br i1 %v2_c6e0, label %dec_label_pc_c538, label %dec_label_pc_c6ec

dec_label_pc_c6ec:                                ; preds = %dec_label_pc_c52c, %dec_label_pc_c6d8
  %v0_c6ec = load i32, i32* @r5, align 4
  %v1_c6ec = add i32 %v0_c6ec, 40
  store i32 %v6_c158, i32* @r1, align 4
  %v1_c6f4 = inttoptr i32 %v1_c6ec to i8*
  %v2_c6f4 = call i32 @function_fdf8(i8* %v1_c6f4)
  br label %dec_label_pc_c538

dec_label_pc_c6fc:                                ; preds = %dec_label_pc_c1e0
  store i32 %v6_c158, i32* %r3.global-to-local, align 4
  %v1_c704 = add i32 %v6_c158, 40
  store i32 %v1_c704, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c490.preheader

; uselistorder directives
  uselistorder i32 %v1_c704, { 1, 0 }
  uselistorder i32 %v4_c6b0, { 1, 0 }
  uselistorder i32 %v2_c640, { 1, 0 }
  uselistorder i32 %v3_c610, { 1, 0 }
  uselistorder i32 %v3_c5ec, { 1, 3, 2, 0 }
  uselistorder i32 %v0_c5cc, { 1, 2, 0 }
  uselistorder i32 %v1_c5c8, { 2, 0, 3, 1 }
  uselistorder i32 %v0_c558, { 1, 0, 2 }
  uselistorder i32 %v0_c49c, { 2, 0, 1 }
  uselistorder i32 %v0_c490, { 1, 0 }
  uselistorder i1 %v2_c6e0, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c664, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c478, { 1, 0, 2, 3 }
  uselistorder i8 %v5_c2dc, { 1, 0 }
  uselistorder i32 %v1_c2a4, { 1, 0 }
  uselistorder i32 %v1_c2a0, { 1, 0 }
  uselistorder i32 %v1_c29c, { 1, 0 }
  uselistorder i32 %v1_c278, { 1, 0 }
  uselistorder i32 %v1_c274, { 1, 0 }
  uselistorder i32 %v1_c270, { 1, 0 }
  uselistorder i32 %v1_c264, { 1, 0 }
  uselistorder i32 %v1_c240, { 1, 0 }
  uselistorder i32 %v1_c230, { 1, 0 }
  uselistorder i32 %v1_c21c, { 3, 0, 2, 1 }
  uselistorder i32 %v0_c1fc, { 1, 0, 2 }
  uselistorder i32 %v3_c1f0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c1e4, { 3, 0, 1, 2 }
  uselistorder i32 %v0_c1e0, { 0, 2, 1, 3 }
  uselistorder i1 %v7_c1d8, { 1, 0 }
  uselistorder i1 %v7_c1ac, { 1, 0 }
  uselistorder i32 %v3_c1a8, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_c194, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_c180, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_c158, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_c0b0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c094, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_c044, { 1, 0 }
  uselistorder i32 %v6_bfdc, { 1, 0 }
  uselistorder i32 %v2_bfc4, { 0, 3, 1, 2 }
  uselistorder i32 %v1_bfa8, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 18, 19, 20, 21, 22, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 14, 15, 16, 17, 18, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 37, 36, 38, 39, 10, 11, 13, 12, 15, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 8, 9, 10 }
  uselistorder label %dec_label_pc_c6ec, { 1, 0 }
  uselistorder label %dec_label_pc_c5e4, { 1, 0 }
  uselistorder label %dec_label_pc_c538, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c490.preheader, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c718(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c718:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c718 = load i32, i32* @r4, align 4
  %v12_c718 = load i32, i32* @r7, align 4
  %v1_c71c = urem i32 %arg1, 256
  store i32 %v1_c71c, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_c71c, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c734 = urem i32 %arg3, 256
  store i32 %v1_c734, i32* @r4, align 4
  %v2_c738 = call i32 @function_140b4(i32 %v1_c71c, i32 4)
  %v0_c73c = load i32, i32* @r5, align 4
  store i32 %v0_c73c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c738, i32* %fp.global-to-local, align 4
  %v0_c74c = load i32, i32* @r4, align 4
  store i32 %v0_c74c, i32* %r0.global-to-local, align 4
  %v4_c750 = inttoptr i32 %v0_c73c to i32*
  %v5_c750 = call i32 @function_a4e8(i32 %v0_c74c, i32* %v4_c750, i32 2, i32 0)
  %v1_c75c = urem i32 %v5_c750, 256
  store i32 %v1_c75c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c768 = load i32, i32* @r5, align 4
  store i32 %v0_c768, i32* %r1.global-to-local, align 4
  %v0_c76c = load i32, i32* @r4, align 4
  store i32 %v0_c76c, i32* %r0.global-to-local, align 4
  %v5_c770 = trunc i32 %v5_c750 to i8
  %v6_c774 = inttoptr i32 %v0_c768 to i32*
  %v7_c774 = call i32 @function_a4e8(i32 %v0_c76c, i32* %v6_c774, i32 3, i32 65535)
  %v0_c778 = load i32, i32* @r5, align 4
  store i32 %v0_c778, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c788 = load i32, i32* @r4, align 4
  store i32 %v0_c788, i32* %r0.global-to-local, align 4
  %v5_c78c = inttoptr i32 %v0_c778 to i32*
  %v6_c78c = call i32 @function_a4e8(i32 %v0_c788, i32* %v5_c78c, i32 4, i32 64)
  %v1_c794 = urem i32 %v6_c78c, 256
  store i32 %v1_c794, i32* %ip.global-to-local, align 4
  %v0_c798 = load i32, i32* @r5, align 4
  store i32 %v0_c798, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c7a4 = load i32, i32* @r4, align 4
  store i32 %v0_c7a4, i32* %r0.global-to-local, align 4
  %v6_c7ac = inttoptr i32 %v0_c798 to i32*
  %v7_c7ac = call i32 @function_a4e8(i32 %v0_c7a4, i32* %v6_c7ac, i32 5, i32 1)
  %v1_c7b8 = urem i32 %v7_c7ac, 256
  store i32 %v1_c7b8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c7c4 = load i32, i32* @r5, align 4
  store i32 %v0_c7c4, i32* %r1.global-to-local, align 4
  %v0_c7c8 = load i32, i32* @r4, align 4
  store i32 %v0_c7c8, i32* %r0.global-to-local, align 4
  %v5_c7d0 = inttoptr i32 %v0_c7c4 to i32*
  %v6_c7d0 = call i32 @function_a4e8(i32 %v0_c7c8, i32* %v5_c7d0, i32 6, i32 65535)
  %v0_c7d8 = load i32, i32* @r5, align 4
  store i32 %v0_c7d8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c7d0, i32* @r7, align 4
  %v0_c7e8 = load i32, i32* @r4, align 4
  store i32 %v0_c7e8, i32* %r0.global-to-local, align 4
  %v4_c7ec = inttoptr i32 %v0_c7d8 to i32*
  %v5_c7ec = call i32 @function_a4e8(i32 %v0_c7e8, i32* %v4_c7ec, i32 7, i32 65535)
  %v0_c7f4 = load i32, i32* @r5, align 4
  store i32 %v0_c7f4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c7ec, i32* @r6, align 4
  %v0_c804 = load i32, i32* @r4, align 4
  store i32 %v0_c804, i32* %r0.global-to-local, align 4
  %v4_c808 = inttoptr i32 %v0_c7f4 to i32*
  %v5_c808 = call i32 @function_a4e8(i32 %v0_c804, i32* %v4_c808, i32 17, i32 65535)
  %v0_c80c = load i32, i32* @r5, align 4
  store i32 %v0_c80c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c81c = load i32, i32* @r4, align 4
  store i32 %v0_c81c, i32* %r0.global-to-local, align 4
  %v5_c820 = inttoptr i32 %v0_c80c to i32*
  %v6_c820 = call i32 @function_a4e8(i32 %v0_c81c, i32* %v5_c820, i32 18, i32 0)
  %v0_c824 = load i32, i32* @r5, align 4
  store i32 %v0_c824, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c834 = load i32, i32* @r4, align 4
  store i32 %v0_c834, i32* %r0.global-to-local, align 4
  %v5_c838 = inttoptr i32 %v0_c824 to i32*
  %v6_c838 = call i32 @function_a4e8(i32 %v0_c834, i32* %v5_c838, i32 11, i32 0)
  %v0_c83c = load i32, i32* @r5, align 4
  store i32 %v0_c83c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c84c = load i32, i32* @r4, align 4
  store i32 %v0_c84c, i32* %r0.global-to-local, align 4
  %v5_c850 = inttoptr i32 %v0_c83c to i32*
  %v6_c850 = call i32 @function_a4e8(i32 %v0_c84c, i32* %v5_c850, i32 12, i32 0)
  %v0_c854 = load i32, i32* @r5, align 4
  store i32 %v0_c854, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c864 = load i32, i32* @r4, align 4
  store i32 %v0_c864, i32* %r0.global-to-local, align 4
  %v5_c868 = inttoptr i32 %v0_c854 to i32*
  %v6_c868 = call i32 @function_a4e8(i32 %v0_c864, i32* %v5_c868, i32 13, i32 0)
  %v0_c86c = load i32, i32* @r5, align 4
  store i32 %v0_c86c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c87c = load i32, i32* @r4, align 4
  store i32 %v0_c87c, i32* %r0.global-to-local, align 4
  %v5_c880 = inttoptr i32 %v0_c86c to i32*
  %v6_c880 = call i32 @function_a4e8(i32 %v0_c87c, i32* %v5_c880, i32 14, i32 0)
  %v0_c884 = load i32, i32* @r5, align 4
  store i32 %v0_c884, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c894 = load i32, i32* @r4, align 4
  store i32 %v0_c894, i32* %r0.global-to-local, align 4
  %v5_c898 = inttoptr i32 %v0_c884 to i32*
  %v6_c898 = call i32 @function_a4e8(i32 %v0_c894, i32* %v5_c898, i32 15, i32 1)
  %v0_c89c = load i32, i32* @r5, align 4
  store i32 %v0_c89c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c8ac = load i32, i32* @r4, align 4
  store i32 %v0_c8ac, i32* %r0.global-to-local, align 4
  %v5_c8b0 = inttoptr i32 %v0_c89c to i32*
  %v6_c8b0 = call i32 @function_a4e8(i32 %v0_c8ac, i32* %v5_c8b0, i32 16, i32 0)
  %v2_c8bc = load i32, i32* @global_var_1eafc.85, align 4
  store i32 %v2_c8bc, i32* %r3.global-to-local, align 4
  %v0_c8c0 = load i32, i32* @r5, align 4
  store i32 %v0_c8c0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c8c8 = load i32, i32* @r4, align 4
  store i32 %v0_c8c8, i32* %r0.global-to-local, align 4
  %v5_c8cc = inttoptr i32 %v0_c8c0 to i32*
  %v6_c8cc = call i32 @function_a47c(i32 %v0_c8c8, i32* %v5_c8cc, i32 25, i32 %v2_c8bc, i32 %v6_c8b0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c8e0 = call i32 @function_13db0(i32 2, i32 3, i32 6)
  store i32 %v3_c8e0, i32* %r0.global-to-local, align 4
  %v7_c8e4 = icmp eq i32 %v3_c8e0, -1
  store i1 %v7_c8e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c8e0, i32* %sb.global-to-local, align 4
  br i1 %v7_c8e4, label %dec_label_pc_ce50, label %dec_label_pc_c8f0

dec_label_pc_c8f0:                                ; preds = %dec_label_pc_c718
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c8f8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c8f8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c90c = call i32 @function_13d80(i32 %v3_c8e0, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c90c, i32* %r0.global-to-local, align 4
  %v7_c910 = icmp eq i32 %v6_c90c, -1
  store i1 %v7_c910, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c910, label %dec_label_pc_ce48, label %dec_label_pc_c918

dec_label_pc_c918:                                ; preds = %dec_label_pc_c8f0
  store i32 0, i32* %stack_var_-40, align 4
  %v0_c92c = load i32, i32* @r7, align 4
  %v3_c92c = mul i32 %v0_c92c, 65536
  store i32 %v3_c92c, i32* %r4.global-to-local, align 4
  %v0_c930 = load i32, i32* @r6, align 4
  %v3_c934 = urem i32 %v7_c774, 65536
  store i32 %v3_c934, i32* %r3.global-to-local, align 4
  %v3_c938 = urem i32 %v0_c92c, 65536
  store i32 %v3_c938, i32* %ip.global-to-local, align 4
  %v3_c93c = urem i32 %v0_c930, 65536
  store i32 %v3_c93c, i32* %r0.global-to-local, align 4
  %v1_c940 = urem i32 %v6_c838, 256
  store i32 %v1_c940, i32* %r2.global-to-local, align 4
  %v0_c944 = load i32, i32* @sl, align 4
  %v2_c944 = icmp eq i32 %v0_c944, 0
  store i1 %v2_c944, i1* %cpsr_z.global-to-local, align 1
  %tmp69 = icmp slt i32 %v0_c944, 1
  br i1 %tmp69, label %dec_label_pc_cbf4, label %dec_label_pc_c95c

dec_label_pc_c95c:                                ; preds = %dec_label_pc_c918
  %v1_c96c = urem i32 %v0_c92c, 256
  %v1_c974 = urem i32 %v7_c774, 256
  %v1_c978 = urem i32 %v0_c930, 256
  %tmp70 = mul i32 %v5_c808, 256
  %v3_c980 = mul nuw nsw i32 %v1_c978, 256
  %v1_c984 = and i32 %tmp70, 65280
  %tmp71 = udiv i32 %v0_c930, 256
  %v4_c988 = urem i32 %tmp71, 256
  %v5_c988 = or i32 %v4_c988, %v3_c980
  store i32 %v5_c988, i32* @r6, align 4
  %tmp72 = udiv i32 %v5_c808, 256
  %v4_c98c = urem i32 %tmp72, 256
  %v5_c98c = or i32 %v4_c98c, %v1_c984
  store i32 %v5_c98c, i32* @r5, align 4
  %v3_c998 = mul nuw nsw i32 %v1_c974, 256
  %v1_c99c = urem i32 %v6_c838, 2
  %tmp73 = udiv i32 %v7_c774, 256
  %v4_c9a0 = urem i32 %tmp73, 256
  %v5_c9a0 = or i32 %v4_c9a0, %v3_c998
  store i32 %v5_c9a0, i32* @lr, align 4
  %v1_c9a4 = urem i32 %v6_c850, 2
  %v3_c9b4 = mul nuw nsw i32 %v1_c96c, 256
  store i32 %v3_c9b4, i32* %r1.global-to-local, align 4
  %tmp74 = udiv i32 %v0_c92c, 256
  %v4_c9c0 = urem i32 %tmp74, 256
  %v5_c9c0 = or i32 %v4_c9c0, %v3_c9b4
  store i32 %v5_c9c0, i32* @r7, align 4
  %v1_c9c4 = urem i32 %v6_c868, 2
  %v1_c9c8 = urem i32 %v6_c880, 2
  %v1_c9cc = urem i32 %v6_c898, 2
  %v1_c9dc = urem i32 %v6_c8b0, 2
  store i32 %v1_c9dc, i32* %r0.global-to-local, align 4
  store i32 %v1_c974, i32* %r2.global-to-local, align 4
  store i32 %v1_c96c, i32* %r3.global-to-local, align 4
  store i32 %v1_c978, i32* %ip.global-to-local, align 4
  %v5_c9ec = trunc i32 %tmp73 to i8
  %v5_c9fc = trunc i32 %v0_c930 to i8
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_c78c, 16777216
  %v4_ca4c = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v7_c774, 16777216
  %v4_ca64 = sdiv i32 %sext8, 16777216
  %tmp = sub nsw i32 0, %v1_c99c
  %v4_cac0 = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_c9a4
  %v4_cad4 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_c9c4
  %v4_cae8 = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_c9c8
  %v4_cafc = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_c9cc
  %v3_cb10 = and i32 %tmp81, 2
  %v7_cb40 = sext i8 %v5_c9fc to i32
  %sext77 = mul i32 %v0_c92c, 16777216
  %v3_cb40 = sdiv i32 %sext77, 16777216
  br label %dec_label_pc_ca04

dec_label_pc_ca04:                                ; preds = %bb76, %dec_label_pc_c95c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_ca0c = call i32 @function_140b4(i32 128, i32 1)
  store i32 %v2_ca0c, i32* %r0.global-to-local, align 4
  %v3_ca10 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ca10, i32* %r2.global-to-local, align 4
  %v1_ca14 = load i32, i32* %fp.global-to-local, align 4
  %v2_ca14 = load i32, i32* @r4, align 4
  %v5_ca14 = mul i32 %v2_ca14, 4
  %v6_ca14 = add i32 %v5_ca14, %v1_ca14
  %v7_ca14 = inttoptr i32 %v6_ca14 to i32*
  store i32 %v2_ca0c, i32* %v7_ca14, align 4
  %v0_ca18 = load i32, i32* %fp.global-to-local, align 4
  %v1_ca18 = load i32, i32* %r2.global-to-local, align 4
  %v4_ca18 = mul i32 %v1_ca18, 4
  %v5_ca18 = add i32 %v4_ca18, %v0_ca18
  %v6_ca18 = inttoptr i32 %v5_ca18 to i32*
  %v7_ca18 = load i32, i32* %v6_ca18, align 4
  store i32 %v7_ca18, i32* %r4.global-to-local, align 4
  %v1_ca1c = inttoptr i32 %v7_ca18 to i8*
  %v2_ca1c = load i8, i8* %v1_ca1c, align 1
  %tmp82 = urem i8 %v2_ca1c, 16
  %v1_ca20 = zext i8 %tmp82 to i32
  %v1_ca24 = or i32 %v1_ca20, 64
  store i32 %v1_ca24, i32* %r3.global-to-local, align 4
  %v1_ca28 = trunc i32 %v1_ca24 to i8
  store i8 %v1_ca28, i8* %v1_ca1c, align 1
  %v0_ca2c = load i32, i32* %r4.global-to-local, align 4
  %v1_ca2c = inttoptr i32 %v0_ca2c to i8*
  %v2_ca2c = load i8, i8* %v1_ca2c, align 1
  %v1_ca30 = and i8 %v2_ca2c, -16
  %v1_ca34 = or i8 %v1_ca30, 5
  store i32 %v1_c7b8, i32* %r0.global-to-local, align 4
  store i8 %v1_ca34, i8* %v1_ca2c, align 1
  %v2_ca44 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca44 = add i32 %v2_ca44, 1
  %v4_ca44 = inttoptr i32 %v3_ca44 to i8*
  store i8 %v5_c770, i8* %v4_ca44, align 1
  store i32 %v4_ca4c, i32* %r2.global-to-local, align 4
  %v2_ca50 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca50 = add i32 %v2_ca50, 4
  %v4_ca50 = inttoptr i32 %v3_ca50 to i8*
  store i8 %v5_c9ec, i8* %v4_ca50, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_ca5c = load i32, i32* %r0.global-to-local, align 4
  %v2_ca5c = icmp eq i32 %v0_ca5c, 0
  store i1 %v2_ca5c, i1* %cpsr_z.global-to-local, align 1
  %v2_ca60 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca60 = add i32 %v2_ca60, 3
  %v4_ca60 = inttoptr i32 %v3_ca60 to i8*
  store i8 60, i8* %v4_ca60, align 1
  store i32 %v4_ca64, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca6c = load i32, i32* %r2.global-to-local, align 4
  %v1_ca6c = trunc i32 %v0_ca6c to i8
  %v2_ca6c = load i32, i32* %r4.global-to-local, align 4
  %v3_ca6c = add i32 %v2_ca6c, 8
  %v4_ca6c = inttoptr i32 %v3_ca6c to i8*
  store i8 %v1_ca6c, i8* %v4_ca6c, align 1
  %v0_ca70 = load i32, i32* %ip.global-to-local, align 4
  %v1_ca70 = trunc i32 %v0_ca70 to i8
  %v2_ca70 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca70 = add i32 %v2_ca70, 9
  %v4_ca70 = inttoptr i32 %v3_ca70 to i8*
  store i8 %v1_ca70, i8* %v4_ca70, align 1
  %v0_ca74 = load i32, i32* %r3.global-to-local, align 4
  %v1_ca74 = trunc i32 %v0_ca74 to i8
  %v2_ca74 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca74 = add i32 %v2_ca74, 2
  %v4_ca74 = inttoptr i32 %v3_ca74 to i8*
  store i8 %v1_ca74, i8* %v4_ca74, align 1
  %v3_ca78 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ca78, i32* %r2.global-to-local, align 4
  %v0_ca7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca7c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_ca04
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ca80 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca80 = add i32 %v3_ca80, 6
  %v5_ca80 = inttoptr i32 %v4_ca80 to i8*
  store i8 64, i8* %v5_ca80, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ca04, %bb
  %v0_ca84 = load i32, i32* %r0.global-to-local, align 4
  %v1_ca84 = trunc i32 %v0_ca84 to i8
  %v2_ca84 = load i32, i32* %r4.global-to-local, align 4
  %v3_ca84 = add i32 %v2_ca84, 5
  %v4_ca84 = inttoptr i32 %v3_ca84 to i8*
  store i8 %v1_ca84, i8* %v4_ca84, align 1
  %v0_ca88 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ca88, label %.thread9, label %bb75

.thread9:                                         ; preds = %.thread
  store i32 %v6_c8cc, i32* %r0.global-to-local, align 4
  br label %bb76

bb75:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_c8cc, i32* %r0.global-to-local, align 4
  %v3_ca90 = load i32, i32* %r4.global-to-local, align 4
  %v4_ca90 = add i32 %v3_ca90, 7
  %v5_ca90 = inttoptr i32 %v4_ca90 to i8*
  store i8 0, i8* %v5_ca90, align 1
  %v0_ca98.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %.thread9, %bb75
  %v0_ca98 = phi i32 [ %v6_c8cc, %.thread9 ], [ %v0_ca98.pre, %bb75 ]
  %v0_ca94 = load i32, i32* %r2.global-to-local, align 4
  %v3_ca94 = mul i32 %v0_ca94, 32
  store i32 %v3_ca94, i32* %r3.global-to-local, align 4
  %v1_ca98 = load i32, i32* %r4.global-to-local, align 4
  %v2_ca98 = add i32 %v1_ca98, 12
  %v3_ca98 = inttoptr i32 %v2_ca98 to i32*
  store i32 %v0_ca98, i32* %v3_ca98, align 4
  %v0_ca9c = load i32, i32* %r3.global-to-local, align 4
  %v1_ca9c = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_ca9c, -8
  %v5_ca9c = add i32 %v0_ca9c, %tmp83
  %v1_caa0 = load i32, i32* @r8, align 4
  %v2_caa0 = add i32 %v1_caa0, %v5_ca9c
  store i32 %v2_caa0, i32* %r3.global-to-local, align 4
  %v1_caa4 = add i32 %v2_caa0, 16
  %v2_caa4 = inttoptr i32 %v1_caa4 to i32*
  %v3_caa4 = load i32, i32* %v2_caa4, align 4
  store i32 %v3_caa4, i32* %r2.global-to-local, align 4
  %v0_caa8 = load i32, i32* @r7, align 4
  %v1_caa8 = trunc i32 %v0_caa8 to i8
  %v2_caa8 = load i32, i32* %r4.global-to-local, align 4
  %v3_caa8 = add i32 %v2_caa8, 20
  %v4_caa8 = inttoptr i32 %v3_caa8 to i8*
  store i8 %v1_caa8, i8* %v4_caa8, align 1
  %v0_caac = load i32, i32* %r2.global-to-local, align 4
  %v1_caac = load i32, i32* %r4.global-to-local, align 4
  %v2_caac = add i32 %v1_caac, 16
  %v3_caac = inttoptr i32 %v2_caac to i32*
  store i32 %v0_caac, i32* %v3_caac, align 4
  %v0_cab0 = load i32, i32* %r4.global-to-local, align 4
  %v1_cab0 = add i32 %v0_cab0, 20
  store i32 %v1_cab0, i32* %r1.global-to-local, align 4
  %v1_cab4 = add i32 %v0_cab0, 33
  %v2_cab4 = inttoptr i32 %v1_cab4 to i8*
  %v3_cab4 = load i8, i8* %v2_cab4, align 1
  %v4_cab4 = zext i8 %v3_cab4 to i32
  store i32 %v1_c99c, i32* %r2.global-to-local, align 4
  %v1_cabc = and i32 %v4_cab4, 223
  %v5_cac0 = or i32 %v1_cabc, %v4_cac0
  store i32 %v5_cac0, i32* %r3.global-to-local, align 4
  %v1_cac4 = trunc i32 %v5_cac0 to i8
  store i8 %v1_cac4, i8* %v2_cab4, align 1
  %v0_cac8 = load i32, i32* %r1.global-to-local, align 4
  %v1_cac8 = add i32 %v0_cac8, 13
  %v2_cac8 = inttoptr i32 %v1_cac8 to i8*
  %v3_cac8 = load i8, i8* %v2_cac8, align 1
  %v4_cac8 = zext i8 %v3_cac8 to i32
  store i32 %v1_c9a4, i32* %r3.global-to-local, align 4
  %v1_cad0 = and i32 %v4_cac8, 239
  %v5_cad4 = or i32 %v1_cad0, %v4_cad4
  store i32 %v5_cad4, i32* %r2.global-to-local, align 4
  %v1_cad8 = trunc i32 %v5_cad4 to i8
  store i8 %v1_cad8, i8* %v2_cac8, align 1
  %v0_cadc = load i32, i32* %r1.global-to-local, align 4
  %v1_cadc = add i32 %v0_cadc, 13
  %v2_cadc = inttoptr i32 %v1_cadc to i8*
  %v3_cadc = load i8, i8* %v2_cadc, align 1
  %v4_cadc = zext i8 %v3_cadc to i32
  store i32 %v1_c9c4, i32* %ip.global-to-local, align 4
  %v1_cae4 = and i32 %v4_cadc, 247
  %v5_cae8 = or i32 %v1_cae4, %v4_cae8
  store i32 %v5_cae8, i32* %r3.global-to-local, align 4
  %v1_caec = trunc i32 %v5_cae8 to i8
  store i8 %v1_caec, i8* %v2_cadc, align 1
  %v0_caf0 = load i32, i32* %r1.global-to-local, align 4
  %v1_caf0 = add i32 %v0_caf0, 13
  %v2_caf0 = inttoptr i32 %v1_caf0 to i8*
  %v3_caf0 = load i8, i8* %v2_caf0, align 1
  %v4_caf0 = zext i8 %v3_caf0 to i32
  store i32 %v1_c9c8, i32* %r0.global-to-local, align 4
  %v1_caf8 = and i32 %v4_caf0, 251
  %v5_cafc = or i32 %v1_caf8, %v4_cafc
  store i32 %v5_cafc, i32* %r2.global-to-local, align 4
  %v1_cb00 = trunc i32 %v5_cafc to i8
  store i8 %v1_cb00, i8* %v2_caf0, align 1
  %v0_cb04 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb04 = add i32 %v0_cb04, 13
  %v2_cb04 = inttoptr i32 %v1_cb04 to i8*
  %v3_cb04 = load i8, i8* %v2_cb04, align 1
  %v4_cb04 = zext i8 %v3_cb04 to i32
  store i32 %v1_c9cc, i32* %r2.global-to-local, align 4
  %v1_cb0c = and i32 %v4_cb04, 253
  %v4_cb10 = or i32 %v1_cb0c, %v3_cb10
  store i32 %v4_cb10, i32* %r3.global-to-local, align 4
  %v1_cb14 = trunc i32 %v4_cb10 to i8
  store i8 %v1_cb14, i8* %v2_cb04, align 1
  %v0_cb18 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb18 = add i32 %v0_cb18, 12
  %v2_cb18 = inttoptr i32 %v1_cb18 to i8*
  %v3_cb18 = load i8, i8* %v2_cb18, align 1
  %v4_cb18 = zext i8 %v3_cb18 to i32
  store i32 %v4_cb18, i32* %r2.global-to-local, align 4
  %v1_cb1c = add i32 %v0_cb18, 13
  %v2_cb1c = inttoptr i32 %v1_cb1c to i8*
  %v3_cb1c = load i8, i8* %v2_cb1c, align 1
  %v4_cb1c = zext i8 %v3_cb1c to i32
  %tmp84 = urem i8 %v3_cb18, 16
  %v1_cb24 = zext i8 %tmp84 to i32
  %v1_cb28 = and i32 %v4_cb1c, 254
  %v2_cb2c = or i32 %v1_cb28, %v1_c9dc
  %v1_cb30 = or i32 %v1_cb24, 160
  store i32 %v1_cb30, i32* %r2.global-to-local, align 4
  %v1_cb34 = trunc i32 %v2_cb2c to i8
  store i8 %v1_cb34, i8* %v2_cb1c, align 1
  %v0_cb38 = load i32, i32* %r2.global-to-local, align 4
  %v1_cb38 = trunc i32 %v0_cb38 to i8
  %v2_cb38 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb38 = add i32 %v2_cb38, 12
  %v4_cb38 = inttoptr i32 %v3_cb38 to i8*
  store i8 %v1_cb38, i8* %v4_cb38, align 1
  store i32 %v3_cb40, i32* %r0.global-to-local, align 4
  store i32 %v7_cb40, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_cb4c = load i32, i32* %r1.global-to-local, align 4
  %v3_cb4c = add i32 %v2_cb4c, 3
  %v4_cb4c = inttoptr i32 %v3_cb4c to i8*
  store i8 %v5_c9fc, i8* %v4_cb4c, align 1
  %v0_cb50 = load i32, i32* %r0.global-to-local, align 4
  %v1_cb50 = trunc i32 %v0_cb50 to i8
  %v2_cb50 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb50 = add i32 %v2_cb50, 1
  %v4_cb50 = inttoptr i32 %v3_cb50 to i8*
  store i8 %v1_cb50, i8* %v4_cb50, align 1
  %v0_cb54 = load i32, i32* @r6, align 4
  %v1_cb54 = trunc i32 %v0_cb54 to i8
  %v2_cb54 = load i32, i32* %r1.global-to-local, align 4
  %v3_cb54 = add i32 %v2_cb54, 2
  %v4_cb54 = inttoptr i32 %v3_cb54 to i8*
  store i8 %v1_cb54, i8* %v4_cb54, align 1
  %v0_cb58 = load i32, i32* @r5, align 4
  %v1_cb58 = load i32, i32* %r1.global-to-local, align 4
  %v2_cb58 = add i32 %v1_cb58, 4
  %v3_cb58 = inttoptr i32 %v2_cb58 to i32*
  store i32 %v0_cb58, i32* %v3_cb58, align 4
  %v0_cb5c = load i32, i32* %ip.global-to-local, align 4
  %v1_cb5c = trunc i32 %v0_cb5c to i8
  %v2_cb5c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb5c = add i32 %v2_cb5c, 41
  %v4_cb5c = inttoptr i32 %v3_cb5c to i8*
  store i8 %v1_cb5c, i8* %v4_cb5c, align 1
  %v0_cb60 = load i32, i32* %r3.global-to-local, align 4
  %v1_cb60 = trunc i32 %v0_cb60 to i8
  %v2_cb60 = load i32, i32* %r4.global-to-local, align 4
  %v3_cb60 = add i32 %v2_cb60, 40
  %v4_cb60 = inttoptr i32 %v3_cb60 to i8*
  store i8 %v1_cb60, i8* %v4_cb60, align 1
  %v0_cb64 = call i32 @function_fc1c()
  %v1_cb68 = mul i32 %v0_cb64, 256
  %v1_cb6c = and i32 %v1_cb68, 3840
  %v1_cb70 = or i32 %v1_cb6c, 28672
  %v3_cb78 = add nuw nsw i32 %v1_cb70, 2048
  %v3_cb847 = udiv i32 %v3_cb78, 256
  store i32 %v3_cb847, i32* %r1.global-to-local, align 4
  %v0_cb88 = load i32, i32* %r4.global-to-local, align 4
  %v1_cb88 = add i32 %v0_cb88, 42
  store i32 %v1_cb88, i32* %r2.global-to-local, align 4
  %v4_cb8c = inttoptr i32 %v1_cb88 to i8*
  store i8 5, i8* %v4_cb8c, align 1
  %v0_cb90 = load i32, i32* %r1.global-to-local, align 4
  %v1_cb90 = trunc i32 %v0_cb90 to i8
  %v2_cb90 = load i32, i32* %r2.global-to-local, align 4
  %v3_cb90 = add i32 %v2_cb90, 1
  %v4_cb90 = inttoptr i32 %v3_cb90 to i8*
  store i8 %v1_cb90, i8* %v4_cb90, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_cb9c = load i32, i32* %r4.global-to-local, align 4
  %v3_cb9c = add i32 %v2_cb9c, 47
  %v4_cb9c = inttoptr i32 %v3_cb9c to i8*
  store i8 10, i8* %v4_cb9c, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_cba8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cba8 = trunc i32 %v0_cba8 to i8
  %v2_cba8 = load i32, i32* %r4.global-to-local, align 4
  %v3_cba8 = add i32 %v2_cba8, 46
  %v4_cba8 = inttoptr i32 %v3_cba8 to i8*
  store i8 %v1_cba8, i8* %v4_cba8, align 1
  %v0_cbac = load i32, i32* %r2.global-to-local, align 4
  %v1_cbac = trunc i32 %v0_cbac to i8
  %v2_cbac = load i32, i32* %r4.global-to-local, align 4
  %v3_cbac = add i32 %v2_cbac, 45
  %v4_cbac = inttoptr i32 %v3_cbac to i8*
  store i8 %v1_cbac, i8* %v4_cbac, align 1
  %v0_cbb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_cbb0 = trunc i32 %v0_cbb0 to i8
  %v2_cbb0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cbb0 = add i32 %v2_cbb0, 44
  %v4_cbb0 = inttoptr i32 %v3_cbb0 to i8*
  store i8 %v1_cbb0, i8* %v4_cbb0, align 1
  %v0_cbb4 = call i32 @function_fc1c()
  store i32 %v0_cbb4, i32* %r0.global-to-local, align 4
  %v2_cbbc = load i32, i32* %r4.global-to-local, align 4
  %v3_cbbc = add i32 %v2_cbbc, 56
  %v4_cbbc = inttoptr i32 %v3_cbbc to i8*
  store i8 1, i8* %v4_cbbc, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_cbcc = load i32, i32* %r4.global-to-local, align 4
  %v2_cbcc = add i32 %v1_cbcc, 48
  %v3_cbcc = inttoptr i32 %v2_cbcc to i32*
  store i32 %v0_cbb4, i32* %v3_cbcc, align 4
  %v0_cbd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_cbd0 = trunc i32 %v0_cbd0 to i8
  %v2_cbd0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cbd0 = add i32 %v2_cbd0, 58
  %v4_cbd0 = inttoptr i32 %v3_cbd0 to i8*
  store i8 %v1_cbd0, i8* %v4_cbd0, align 1
  %v0_cbd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_cbd4 = trunc i32 %v0_cbd4 to i8
  %v2_cbd4 = load i32, i32* %r4.global-to-local, align 4
  %v3_cbd4 = add i32 %v2_cbd4, 59
  %v4_cbd4 = inttoptr i32 %v3_cbd4 to i8*
  store i8 %v1_cbd4, i8* %v4_cbd4, align 1
  %v0_cbd8 = load i32, i32* %ip.global-to-local, align 4
  %v1_cbd8 = load i32, i32* %r4.global-to-local, align 4
  %v2_cbd8 = add i32 %v1_cbd8, 52
  %v3_cbd8 = inttoptr i32 %v2_cbd8 to i32*
  store i32 %v0_cbd8, i32* %v3_cbd8, align 4
  %v0_cbdc = load i32, i32* %r2.global-to-local, align 4
  %v1_cbdc = trunc i32 %v0_cbdc to i8
  %v2_cbdc = load i32, i32* %r4.global-to-local, align 4
  %v3_cbdc = add i32 %v2_cbdc, 57
  %v4_cbdc = inttoptr i32 %v3_cbdc to i8*
  store i8 %v1_cbdc, i8* %v4_cbdc, align 1
  %v3_cbe0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cbe0, i32* %r3.global-to-local, align 4
  %v1_cbe4 = add i32 %v3_cbe0, 1
  store i32 %v1_cbe4, i32* @r4, align 4
  %v0_cbe8 = load i32, i32* @sl, align 4
  %v9_cbe8 = icmp eq i32 %v0_cbe8, %v1_cbe4
  store i1 %v9_cbe8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cbe4, i32* %stack_var_-40, align 4
  %v8_cbf0 = icmp sgt i32 %v0_cbe8, %v1_cbe4
  br i1 %v8_cbf0, label %dec_label_pc_ca04, label %dec_label_pc_cbf4

dec_label_pc_cbf4:                                ; preds = %bb76, %dec_label_pc_c918
  %v0_cbf4 = phi i32 [ %v0_c944, %dec_label_pc_c918 ], [ %v0_cbe8, %bb76 ]
  %v2_cbf4 = icmp eq i32 %v0_cbf4, 0
  store i1 %v2_cbf4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_cdac = icmp eq i32 %v3_c934, 65535
  %v2_ce28 = icmp eq i32 %v1_c940, 0
  %v2_cc30 = icmp eq i32 %v6_c8cc, -1
  %v7_cc30 = icmp eq i32 %v6_c8cc, -1
  br label %dec_label_pc_cbfc.outer

dec_label_pc_cbfc.outer:                          ; preds = %dec_label_pc_cd28, %dec_label_pc_cbf4
  %v1_cbfc.ph.in = phi i32 [ %v0_cd1c, %dec_label_pc_cd28 ], [ %v0_cbf4, %dec_label_pc_cbf4 ]
  %v0_cbfc.ph = phi i1 [ %v2_cd28, %dec_label_pc_cd28 ], [ %v2_cbf4, %dec_label_pc_cbf4 ]
  %v1_cbfc.ph = icmp slt i32 %v1_cbfc.ph.in, 0
  %v4_cbfc = or i1 %v1_cbfc.ph, %v0_cbfc.ph
  br label %dec_label_pc_cbfc

dec_label_pc_cbfc:                                ; preds = %dec_label_pc_cbfc.outer, %dec_label_pc_cbfc
  br i1 %v4_cbfc, label %dec_label_pc_cbfc, label %dec_label_pc_cc00

dec_label_pc_cc00:                                ; preds = %dec_label_pc_cbfc
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_cc0c

dec_label_pc_cc0c:                                ; preds = %dec_label_pc_cc88, %dec_label_pc_cc00
  %v1_cc1c = phi i32 [ %v1_cd18, %dec_label_pc_cc88 ], [ 0, %dec_label_pc_cc00 ]
  %v5_cc10 = mul i32 %v1_cc1c, 24
  %v1_cc14 = load i32, i32* @r8, align 4
  %v2_cc14 = add i32 %v1_cc14, %v5_cc10
  store i32 %v2_cc14, i32* %r3.global-to-local, align 4
  %v1_cc18 = add i32 %v2_cc14, 20
  %v2_cc18 = inttoptr i32 %v1_cc18 to i8*
  %v3_cc18 = load i8, i8* %v2_cc18, align 1
  %v4_cc18 = zext i8 %v3_cc18 to i32
  store i32 %v4_cc18, i32* %r2.global-to-local, align 4
  %v0_cc1c = load i32, i32* %fp.global-to-local, align 4
  %v4_cc1c = mul i32 %v1_cc1c, 4
  %v5_cc1c = add i32 %v0_cc1c, %v4_cc1c
  %v6_cc1c = inttoptr i32 %v5_cc1c to i32*
  %v7_cc1c = load i32, i32* %v6_cc1c, align 4
  store i32 %v7_cc1c, i32* @r5, align 4
  %v7_cc20 = icmp eq i8 %v3_cc18, 31
  store i1 %v7_cc20, i1* %cpsr_z.global-to-local, align 1
  %v1_cc24 = add i32 %v7_cc1c, 20
  store i32 %v1_cc24, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_cc18, 32
  br i1 %tmp85, label %dec_label_pc_cd34, label %dec_label_pc_cc2c

dec_label_pc_cc2c:                                ; preds = %dec_label_pc_cc0c
  store i32 %v6_c8cc, i32* %r0.global-to-local, align 4
  store i1 %v7_cc30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cc30, label %dec_label_pc_cd9c, label %dec_label_pc_cc38

dec_label_pc_cc38:                                ; preds = %dec_label_pc_cd34, %dec_label_pc_cc2c
  store i32 %v3_c934, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cdac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_cdac, label %dec_label_pc_cdb8, label %dec_label_pc_cc4c

dec_label_pc_cc4c:                                ; preds = %dec_label_pc_cd9c.dec_label_pc_cc4c_crit_edge, %dec_label_pc_cc38
  %v1_cc50 = phi i32 [ %v1_cc50.pre, %dec_label_pc_cd9c.dec_label_pc_cc4c_crit_edge ], [ 65535, %dec_label_pc_cc38 ]
  store i32 %v3_c938, i32* %r3.global-to-local, align 4
  %v9_cc50 = icmp eq i32 %v3_c938, %v1_cc50
  store i1 %v9_cc50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc50, label %dec_label_pc_cdd4, label %dec_label_pc_cc58

dec_label_pc_cc58:                                ; preds = %dec_label_pc_cdb8.dec_label_pc_cc58_crit_edge, %dec_label_pc_cc4c
  %v1_cc5c = phi i32 [ %v1_cc5c.pre, %dec_label_pc_cdb8.dec_label_pc_cc58_crit_edge ], [ %v1_cc50, %dec_label_pc_cc4c ]
  store i32 %v3_c93c, i32* %ip.global-to-local, align 4
  %v9_cc5c = icmp eq i32 %v3_c93c, %v1_cc5c
  store i1 %v9_cc5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc5c, label %dec_label_pc_cdf0, label %dec_label_pc_cc64

dec_label_pc_cc64:                                ; preds = %dec_label_pc_cdd4.dec_label_pc_cc64_crit_edge, %dec_label_pc_cc58
  %v1_cc68 = phi i32 [ %v1_cc68.pre, %dec_label_pc_cdd4.dec_label_pc_cc64_crit_edge ], [ %v1_cc5c, %dec_label_pc_cc58 ]
  store i32 %v5_c808, i32* %r0.global-to-local, align 4
  %v9_cc68 = icmp eq i32 %v5_c808, %v1_cc68
  store i1 %v9_cc68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc68, label %dec_label_pc_ce0c, label %dec_label_pc_cc70

dec_label_pc_cc70:                                ; preds = %dec_label_pc_cdf0.dec_label_pc_cc70_crit_edge, %dec_label_pc_cc64
  %v1_cc74 = phi i32 [ %v1_cc74.pre, %dec_label_pc_cdf0.dec_label_pc_cc70_crit_edge ], [ %v1_cc68, %dec_label_pc_cc64 ]
  store i32 %v6_c820, i32* %r2.global-to-local, align 4
  %v9_cc74 = icmp eq i32 %v6_c820, %v1_cc74
  store i1 %v9_cc74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cc74, label %dec_label_pc_ce20, label %dec_label_pc_cc7c

dec_label_pc_cc7c:                                ; preds = %dec_label_pc_ce0c, %dec_label_pc_cc70
  store i32 %v1_c940, i32* %r3.global-to-local, align 4
  store i1 %v2_ce28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ce28, label %dec_label_pc_cc88, label %dec_label_pc_ce34

dec_label_pc_cc88:                                ; preds = %dec_label_pc_cc7c, %dec_label_pc_ce20, %dec_label_pc_ce34
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cc8c = load i32, i32* %r7.global-to-local, align 4
  %v1_cc8c = trunc i32 %v0_cc8c to i8
  %v2_cc8c = load i32, i32* @r5, align 4
  %v3_cc8c = add i32 %v2_cc8c, 10
  %v4_cc8c = inttoptr i32 %v3_cc8c to i8*
  store i8 %v1_cc8c, i8* %v4_cc8c, align 1
  %v0_cc90 = load i32, i32* %r7.global-to-local, align 4
  %v1_cc90 = trunc i32 %v0_cc90 to i8
  %v2_cc90 = load i32, i32* @r5, align 4
  %v3_cc90 = add i32 %v2_cc90, 11
  %v4_cc90 = inttoptr i32 %v3_cc90 to i8*
  store i8 %v1_cc90, i8* %v4_cc90, align 1
  %v0_cc94 = load i32, i32* @r5, align 4
  store i32 %v0_cc94, i32* @r0, align 4
  %v2_cc98 = call i32 @function_e444(i32 %v0_cc94, i32 20)
  %v3_cc98 = trunc i32 %v2_cc98 to i8
  %v4_cc9c27 = udiv i32 %v2_cc98, 256
  %v1_cca0 = trunc i32 %v4_cc9c27 to i8
  %v2_cca0 = load i32, i32* @r5, align 4
  %v3_cca0 = add i32 %v2_cca0, 11
  %v4_cca0 = inttoptr i32 %v3_cca0 to i8*
  store i8 %v1_cca0, i8* %v4_cca0, align 1
  %v3_cca4 = load i32, i32* @r5, align 4
  %v4_cca4 = add i32 %v3_cca4, 10
  %v5_cca4 = inttoptr i32 %v4_cca4 to i8*
  store i8 %v3_cc98, i8* %v5_cca4, align 1
  %v0_cca8 = load i32, i32* @r6, align 4
  store i32 %v0_cca8, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_ccb4 = load i32, i32* %r7.global-to-local, align 4
  %v1_ccb4 = trunc i32 %v0_ccb4 to i8
  %v3_ccb4 = add i32 %v0_cca8, 16
  %v4_ccb4 = inttoptr i32 %v3_ccb4 to i8*
  store i8 %v1_ccb4, i8* %v4_ccb4, align 1
  %v0_ccb8 = load i32, i32* %r7.global-to-local, align 4
  %v1_ccb8 = trunc i32 %v0_ccb8 to i8
  %v2_ccb8 = load i32, i32* @r6, align 4
  %v3_ccb8 = add i32 %v2_ccb8, 17
  %v4_ccb8 = inttoptr i32 %v3_ccb8 to i8*
  store i8 %v1_ccb8, i8* %v4_ccb8, align 1
  %v0_ccbc = load i32, i32* @r5, align 4
  store i32 %v0_ccbc, i32* %r0.global-to-local, align 4
  %v4_ccc0 = call i32 @function_e4a0(i32 %v0_ccbc, i32 %v0_cca8, i32 10240, i32 40)
  %v5_ccc0 = trunc i32 %v4_ccc0 to i8
  store i32 %v4_ccc0, i32* %r0.global-to-local, align 4
  %v4_ccc428 = udiv i32 %v4_ccc0, 256
  %v1_ccc8 = trunc i32 %v4_ccc428 to i8
  %v2_ccc8 = load i32, i32* @r6, align 4
  %v3_ccc8 = add i32 %v2_ccc8, 17
  %v4_ccc8 = inttoptr i32 %v3_ccc8 to i8*
  store i8 %v1_ccc8, i8* %v4_ccc8, align 1
  %v3_cccc = load i32, i32* @r6, align 4
  %v4_cccc = add i32 %v3_cccc, 16
  %v5_cccc = inttoptr i32 %v4_cccc to i8*
  store i8 %v5_ccc0, i8* %v5_cccc, align 1
  %v3_ccd0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ccd0, i32* %r3.global-to-local, align 4
  %v0_ccd4 = load i32, i32* @r5, align 4
  %v1_ccd4 = add i32 %v0_ccd4, 20
  %v2_ccd4 = inttoptr i32 %v1_ccd4 to i32*
  %v3_ccd4 = load i32, i32* %v2_ccd4, align 4
  %v3_ccdc = udiv i32 %v3_ccd4, 65536
  store i32 %v3_ccdc, i32* %r2.global-to-local, align 4
  %v5_cce0 = mul i32 %v3_ccd0, 24
  %v1_cce4 = load i32, i32* @r8, align 4
  %v2_cce4 = add i32 %v1_cce4, %v5_cce0
  store i32 %v2_cce4, i32* %ip.global-to-local, align 4
  %v3_cce826 = udiv i32 %v3_ccd4, 16777216
  %v1_ccec = trunc i32 %v3_cce826 to i8
  %v3_ccec = add i32 %v2_cce4, 3
  %v4_ccec = inttoptr i32 %v3_ccec to i8*
  store i8 %v1_ccec, i8* %v4_ccec, align 1
  %v0_ccf0 = load i32, i32* %r2.global-to-local, align 4
  %v1_ccf0 = trunc i32 %v0_ccf0 to i8
  %v2_ccf0 = load i32, i32* %ip.global-to-local, align 4
  %v3_ccf0 = add i32 %v2_ccf0, 2
  %v4_ccf0 = inttoptr i32 %v3_ccf0 to i8*
  store i8 %v1_ccf0, i8* %v4_ccf0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ccf8 = load i32, i32* @r5, align 4
  store i32 %v0_ccf8, i32* %r1.global-to-local, align 4
  %v0_ccfc = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ccfc, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_cd08 = load i32, i32* %ip.global-to-local, align 4
  %v6_cd10 = inttoptr i32 %v0_ccf8 to i32*
  %v7_cd10 = call i32 @function_13d4c(i32 %v0_ccfc, i32* %v6_cd10, i32 60, i32 16384, i32 %v0_cd08, i32 16)
  %v3_cd14 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cd14, i32* %r3.global-to-local, align 4
  %v1_cd18 = add i32 %v3_cd14, 1
  store i32 %v1_cd18, i32* %r0.global-to-local, align 4
  %v0_cd1c = load i32, i32* @sl, align 4
  %v9_cd1c = icmp eq i32 %v0_cd1c, %v1_cd18
  store i1 %v9_cd1c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cd18, i32* %stack_var_-40, align 4
  %v8_cd24 = icmp sgt i32 %v0_cd1c, %v1_cd18
  br i1 %v8_cd24, label %dec_label_pc_cc0c, label %dec_label_pc_cd28

dec_label_pc_cd28:                                ; preds = %dec_label_pc_cc88
  %v2_cd28 = icmp eq i32 %v0_cd1c, 0
  store i1 %v2_cd28, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_cbfc.outer

dec_label_pc_cd34:                                ; preds = %dec_label_pc_cc0c
  %v1_cd34 = add i32 %v2_cc14, 16
  %v2_cd34 = inttoptr i32 %v1_cd34 to i32*
  %v3_cd34 = load i32, i32* %v2_cd34, align 4
  store i32 %v3_cd34, i32* %r4.global-to-local, align 4
  %v0_cd38 = call i32 @function_fc1c()
  store i32 %v0_cd38, i32* %r0.global-to-local, align 4
  %v3_cd3c = load i32, i32* %stack_var_-40, align 4
  %v5_cd44 = mul i32 %v3_cd3c, 24
  %v0_cd48 = load i32, i32* %r4.global-to-local, align 4
  %v1_cd4c = load i32, i32* @r8, align 4
  %v2_cd4c = add i32 %v1_cd4c, %v5_cd44
  store i32 %v2_cd4c, i32* %r1.global-to-local, align 4
  %v1_cd50 = and i32 %v0_cd48, 65280
  store i32 %v1_cd50, i32* %r3.global-to-local, align 4
  %v1_cd48 = udiv i32 %v0_cd48, 256
  %v3_cd54 = and i32 %v1_cd48, 65280
  store i32 %v3_cd54, i32* %r2.global-to-local, align 4
  %v3_cd58 = mul i32 %v0_cd48, 16777216
  store i32 %v3_cd58, i32* %ip.global-to-local, align 4
  %v1_cd5c = add i32 %v2_cd4c, 20
  %v2_cd5c = inttoptr i32 %v1_cd5c to i8*
  %v3_cd5c = load i8, i8* %v2_cd5c, align 1
  %v4_cd5c = zext i8 %v3_cd5c to i32
  %v4_cd60 = mul nuw nsw i32 %v1_cd50, 256
  %v5_cd60 = or i32 %v4_cd60, %v3_cd58
  store i32 %v5_cd60, i32* %ip.global-to-local, align 4
  %v2_cd68 = call i32 @llvm.bswap.i32(i32 %v0_cd48)
  %v7_cd6c = lshr i32 %v0_cd38, %v4_cd5c
  %v8_cd6c = add i32 %v7_cd6c, %v2_cd68
  store i32 %v8_cd6c, i32* %r2.global-to-local, align 4
  %v3_cd78 = mul i32 %v8_cd6c, 16777216
  %v1_cd70 = mul i32 %v8_cd6c, 256
  %v4_cd7c = and i32 %v1_cd70, 16711680
  %v5_cd7c = or i32 %v4_cd7c, %v3_cd78
  store i32 %v5_cd7c, i32* %r1.global-to-local, align 4
  store i32 %v6_c8cc, i32* %r0.global-to-local, align 4
  %v2_cd8c = call i32 @llvm.bswap.i32(i32 %v8_cd6c)
  store i32 %v2_cd8c, i32* %r3.global-to-local, align 4
  store i1 %v7_cc30, i1* %cpsr_z.global-to-local, align 1
  %v1_cd94 = load i32, i32* @r5, align 4
  %v2_cd94 = add i32 %v1_cd94, 16
  %v3_cd94 = inttoptr i32 %v2_cd94 to i32*
  store i32 %v2_cd8c, i32* %v3_cd94, align 4
  br i1 %v2_cc30, label %dec_label_pc_cd9c, label %dec_label_pc_cc38

dec_label_pc_cd9c:                                ; preds = %dec_label_pc_cd34, %dec_label_pc_cc2c
  %v0_cd9c = call i32 @function_fc1c()
  store i32 %v0_cd9c, i32* %r0.global-to-local, align 4
  store i32 %v3_c934, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_cdac, i1* %cpsr_z.global-to-local, align 1
  %v1_cdb0 = load i32, i32* @r5, align 4
  %v2_cdb0 = add i32 %v1_cdb0, 12
  %v3_cdb0 = inttoptr i32 %v2_cdb0 to i32*
  store i32 %v0_cd9c, i32* %v3_cdb0, align 4
  br i1 %v3_cdac, label %dec_label_pc_cdb8, label %dec_label_pc_cd9c.dec_label_pc_cc4c_crit_edge

dec_label_pc_cd9c.dec_label_pc_cc4c_crit_edge:    ; preds = %dec_label_pc_cd9c
  %v1_cc50.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc4c

dec_label_pc_cdb8:                                ; preds = %dec_label_pc_cd9c, %dec_label_pc_cc38
  %v0_cdb8 = call i32 @function_fc1c()
  %v1_cdb8 = trunc i32 %v0_cdb8 to i8
  store i32 %v0_cdb8, i32* %r0.global-to-local, align 4
  %v4_cdbc29 = udiv i32 %v0_cdb8, 256
  %v1_cdc0 = trunc i32 %v4_cdbc29 to i8
  %v2_cdc0 = load i32, i32* @r5, align 4
  %v3_cdc0 = add i32 %v2_cdc0, 5
  %v4_cdc0 = inttoptr i32 %v3_cdc0 to i8*
  store i8 %v1_cdc0, i8* %v4_cdc0, align 1
  store i32 %v3_c938, i32* %r3.global-to-local, align 4
  %v1_cdc8 = load i32, i32* @r4, align 4
  %v9_cdc8 = icmp eq i32 %v3_c938, %v1_cdc8
  store i1 %v9_cdc8, i1* %cpsr_z.global-to-local, align 1
  %v3_cdcc = load i32, i32* @r5, align 4
  %v4_cdcc = add i32 %v3_cdcc, 4
  %v5_cdcc = inttoptr i32 %v4_cdcc to i8*
  store i8 %v1_cdb8, i8* %v5_cdcc, align 1
  %v0_cdd0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cdd0, label %dec_label_pc_cdd4, label %dec_label_pc_cdb8.dec_label_pc_cc58_crit_edge

dec_label_pc_cdb8.dec_label_pc_cc58_crit_edge:    ; preds = %dec_label_pc_cdb8
  %v1_cc5c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc58

dec_label_pc_cdd4:                                ; preds = %dec_label_pc_cdb8, %dec_label_pc_cc4c
  %v0_cdd4 = call i32 @function_fc1c()
  %v1_cdd4 = trunc i32 %v0_cdd4 to i8
  store i32 %v0_cdd4, i32* %r0.global-to-local, align 4
  store i32 %v3_c93c, i32* %ip.global-to-local, align 4
  %v4_cddc = sdiv i32 %v0_cdd4, 256
  store i32 %v4_cddc, i32* %r3.global-to-local, align 4
  %v1_cde0 = load i32, i32* @r4, align 4
  %v9_cde0 = icmp eq i32 %v3_c93c, %v1_cde0
  store i1 %v9_cde0, i1* %cpsr_z.global-to-local, align 1
  %v3_cde4 = load i32, i32* @r5, align 4
  %v4_cde4 = add i32 %v3_cde4, 20
  %v5_cde4 = inttoptr i32 %v4_cde4 to i8*
  store i8 %v1_cdd4, i8* %v5_cde4, align 1
  %v0_cde8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cde8 = trunc i32 %v0_cde8 to i8
  %v2_cde8 = load i32, i32* @r6, align 4
  %v3_cde8 = add i32 %v2_cde8, 1
  %v4_cde8 = inttoptr i32 %v3_cde8 to i8*
  store i8 %v1_cde8, i8* %v4_cde8, align 1
  %v0_cdec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cdec, label %dec_label_pc_cdf0, label %dec_label_pc_cdd4.dec_label_pc_cc64_crit_edge

dec_label_pc_cdd4.dec_label_pc_cc64_crit_edge:    ; preds = %dec_label_pc_cdd4
  %v1_cc68.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc64

dec_label_pc_cdf0:                                ; preds = %dec_label_pc_cdd4, %dec_label_pc_cc58
  %v0_cdf0 = call i32 @function_fc1c()
  %v1_cdf0 = trunc i32 %v0_cdf0 to i8
  %v4_cdf4 = sdiv i32 %v0_cdf0, 256
  store i32 %v4_cdf4, i32* %r3.global-to-local, align 4
  %v3_cdf8 = load i32, i32* @r6, align 4
  %v4_cdf8 = add i32 %v3_cdf8, 2
  %v5_cdf8 = inttoptr i32 %v4_cdf8 to i8*
  store i8 %v1_cdf0, i8* %v5_cdf8, align 1
  store i32 %v5_c808, i32* %r0.global-to-local, align 4
  %v1_ce00 = load i32, i32* @r4, align 4
  %v9_ce00 = icmp eq i32 %v5_c808, %v1_ce00
  store i1 %v9_ce00, i1* %cpsr_z.global-to-local, align 1
  %v0_ce04 = load i32, i32* %r3.global-to-local, align 4
  %v1_ce04 = trunc i32 %v0_ce04 to i8
  %v2_ce04 = load i32, i32* @r6, align 4
  %v3_ce04 = add i32 %v2_ce04, 3
  %v4_ce04 = inttoptr i32 %v3_ce04 to i8*
  store i8 %v1_ce04, i8* %v4_ce04, align 1
  %v0_ce08 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ce08, label %dec_label_pc_ce0c, label %dec_label_pc_cdf0.dec_label_pc_cc70_crit_edge

dec_label_pc_cdf0.dec_label_pc_cc70_crit_edge:    ; preds = %dec_label_pc_cdf0
  %v1_cc74.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cc70

dec_label_pc_ce0c:                                ; preds = %dec_label_pc_cdf0, %dec_label_pc_cc64
  %v0_ce0c = call i32 @function_fc1c()
  store i32 %v0_ce0c, i32* %r0.global-to-local, align 4
  store i32 %v6_c820, i32* %r2.global-to-local, align 4
  %v1_ce14 = load i32, i32* @r4, align 4
  %v9_ce14 = icmp eq i32 %v6_c820, %v1_ce14
  store i1 %v9_ce14, i1* %cpsr_z.global-to-local, align 1
  %v1_ce18 = load i32, i32* @r6, align 4
  %v2_ce18 = add i32 %v1_ce18, 4
  %v3_ce18 = inttoptr i32 %v2_ce18 to i32*
  store i32 %v0_ce0c, i32* %v3_ce18, align 4
  br i1 %v9_ce14, label %dec_label_pc_ce20, label %dec_label_pc_cc7c

dec_label_pc_ce20:                                ; preds = %dec_label_pc_ce0c, %dec_label_pc_cc70
  %v0_ce20 = call i32 @function_fc1c()
  store i32 %v0_ce20, i32* %r0.global-to-local, align 4
  store i32 %v1_c940, i32* %r3.global-to-local, align 4
  store i1 %v2_ce28, i1* %cpsr_z.global-to-local, align 1
  %v1_ce2c = load i32, i32* @r6, align 4
  %v2_ce2c = add i32 %v1_ce2c, 8
  %v3_ce2c = inttoptr i32 %v2_ce2c to i32*
  store i32 %v0_ce20, i32* %v3_ce2c, align 4
  br i1 %v2_ce28, label %dec_label_pc_cc88, label %dec_label_pc_ce34

dec_label_pc_ce34:                                ; preds = %dec_label_pc_cc7c, %dec_label_pc_ce20
  %v0_ce34 = call i32 @function_fc1c()
  %v1_ce34 = trunc i32 %v0_ce34 to i8
  store i32 %v0_ce34, i32* %r0.global-to-local, align 4
  %v4_ce38 = sdiv i32 %v0_ce34, 256
  store i32 %v4_ce38, i32* %r3.global-to-local, align 4
  %v1_ce3c = trunc i32 %v4_ce38 to i8
  %v2_ce3c = load i32, i32* @r6, align 4
  %v3_ce3c = add i32 %v2_ce3c, 19
  %v4_ce3c = inttoptr i32 %v3_ce3c to i8*
  store i8 %v1_ce3c, i8* %v4_ce3c, align 1
  %v3_ce40 = load i32, i32* @r6, align 4
  %v4_ce40 = add i32 %v3_ce40, 18
  %v5_ce40 = inttoptr i32 %v4_ce40 to i8*
  store i8 %v1_ce34, i8* %v5_ce40, align 1
  br label %dec_label_pc_cc88

dec_label_pc_ce48:                                ; preds = %dec_label_pc_c8f0
  %v0_ce48 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_ce48, i32* %r0.global-to-local, align 4
  %v1_ce4c = call i32 @function_134b0(i32 %v0_ce48)
  store i32 %v1_ce4c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ce50

dec_label_pc_ce50:                                ; preds = %dec_label_pc_c718, %dec_label_pc_ce48
  %v29_ce54 = phi i32 [ %v3_c8e0, %dec_label_pc_c718 ], [ %v1_ce4c, %dec_label_pc_ce48 ]
  store i32 %v3_c718, i32* %r4.global-to-local, align 4
  store i32 %v12_c718, i32* %r7.global-to-local, align 4
  ret i32 %v29_ce54

; uselistorder directives
  uselistorder i32 %v4_ce38, { 1, 0 }
  uselistorder i32 %v0_ce34, { 0, 2, 1 }
  uselistorder i32 %v0_cdd4, { 0, 2, 1 }
  uselistorder i32 %v0_cdb8, { 0, 2, 1 }
  uselistorder i32 %v2_cd8c, { 1, 0 }
  uselistorder i32 %v8_cd6c, { 2, 0, 1, 3 }
  uselistorder i32 %v3_cd58, { 1, 0 }
  uselistorder i32 %v0_cd48, { 2, 0, 1, 3 }
  uselistorder i1 %v2_cd28, { 1, 0 }
  uselistorder i32 %v0_cd1c, { 1, 2, 3, 0 }
  uselistorder i32 %v1_cd18, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_ccc0, { 0, 2, 1 }
  uselistorder i32 %v0_cca8, { 1, 0, 2 }
  uselistorder i1 %v7_cc30, { 2, 1, 0 }
  uselistorder i1 %v2_ce28, { 2, 3, 1, 0 }
  uselistorder i1 %v3_cdac, { 1, 0, 2, 3 }
  uselistorder i32 %v1_cbe4, { 1, 0, 2, 3 }
  uselistorder i8 %v5_c9fc, { 1, 0 }
  uselistorder i32 %v1_c9dc, { 1, 0 }
  uselistorder i32 %v1_c9cc, { 1, 0 }
  uselistorder i32 %v1_c9c8, { 1, 0 }
  uselistorder i32 %v1_c9c4, { 1, 0 }
  uselistorder i32 %v3_c9b4, { 1, 0 }
  uselistorder i32 %v1_c9a4, { 1, 0 }
  uselistorder i32 %v1_c99c, { 1, 0 }
  uselistorder i32 %v1_c978, { 1, 0 }
  uselistorder i32 %v1_c974, { 1, 0 }
  uselistorder i32 %v1_c96c, { 1, 0 }
  uselistorder i32 %v1_c940, { 2, 1, 3, 0 }
  uselistorder i32 %v3_c934, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c930, { 3, 0, 1, 2 }
  uselistorder i32 %v0_c92c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_c910, { 1, 0 }
  uselistorder i1 %v7_c8e4, { 1, 0 }
  uselistorder i32 %v3_c8e0, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_c8cc, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_c820, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c808, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_c7b8, { 1, 0 }
  uselistorder i32 %v5_c750, { 1, 0 }
  uselistorder i32 %v1_c71c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 6, 4, 7, 8, 10, 9, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 54, 27, 28, 29, 30, 34, 31, 32, 33, 35, 37, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32 10240, { 0, 6, 2, 7, 5, 8, 3, 9, 4, 10, 1, 11 }
  uselistorder i32 42, { 2, 0, 3, 1, 4 }
  uselistorder label %dec_label_pc_ce50, { 1, 0 }
  uselistorder label %dec_label_pc_ce34, { 1, 0 }
  uselistorder label %dec_label_pc_cc88, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cbfc, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ce5c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ce5c:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_ce5c = load i32, i32* @fp, align 4
  %v1_ce60 = urem i32 %arg1, 256
  store i32 %v1_ce60, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_ce78 = urem i32 %arg3, 256
  store i32 %v1_ce78, i32* @r4, align 4
  %v2_ce7c = call i32 @function_140b4(i32 %v1_ce60, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_ce7c, i32* @sl, align 4
  %v0_ce88 = load i32, i32* @r7, align 4
  %v2_ce8c = call i32 @function_140b4(i32 %v0_ce88, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_ce98 = load i32, i32* @r6, align 4
  store i32 %v0_ce98, i32* %r1.global-to-local, align 4
  store i32 %v2_ce8c, i32* @sb, align 4
  %v0_cea8 = load i32, i32* @r4, align 4
  %v4_ceac = inttoptr i32 %v0_ce98 to i32*
  %v5_ceac = call i32 @function_a4e8(i32 %v0_cea8, i32* %v4_ceac, i32 7, i32 65535)
  %v3_ceb4 = urem i32 %v5_ceac, 65536
  %v0_ceb8 = load i32, i32* @r6, align 4
  store i32 %v0_ceb8, i32* %r1.global-to-local, align 4
  %v0_cec0 = load i32, i32* @r5, align 4
  %v0_cec4 = load i32, i32* @r4, align 4
  %v5_cecc = inttoptr i32 %v0_ceb8 to i32*
  %v6_cecc = call i32 @function_a4e8(i32 %v0_cec4, i32* %v5_cecc, i32 6, i32 %v0_cec0)
  %v0_ced0 = load i32, i32* @r6, align 4
  store i32 %v0_ced0, i32* %r1.global-to-local, align 4
  %v3_ced4 = mul i32 %v6_cecc, 65536
  store i32 %v3_ced4, i32* %fp.global-to-local, align 4
  %v0_cee0 = load i32, i32* @r4, align 4
  %v4_cee4 = inttoptr i32 %v0_ced0 to i32*
  %v5_cee4 = call i32 @function_a4e8(i32 %v0_cee0, i32* %v4_cee4, i32 0, i32 512)
  %v0_cef0 = load i32, i32* @r6, align 4
  store i32 %v0_cef0, i32* %r1.global-to-local, align 4
  %v0_cef4 = load i32, i32* @r4, align 4
  %v3_cefc = urem i32 %v5_cee4, 65536
  store i32 %v3_cefc, i32* @r6, align 4
  %v4_cf00 = inttoptr i32 %v0_cef0 to i32*
  %v5_cf00 = call i32 @function_a4e8(i32 %v0_cef4, i32* %v4_cf00, i32 1, i32 1)
  %v0_cf04 = load i32, i32* %fp.global-to-local, align 4
  %v3_cf04 = udiv i32 %v0_cf04, 65536
  store i32 %v3_cf04, i32* @r4, align 4
  %v1_cf0c = load i32, i32* @r5, align 4
  %v9_cf0c = icmp eq i32 %v3_cf04, %v1_cf0c
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_cf0c, label %dec_label_pc_cf34, label %bb

bb:                                               ; preds = %dec_label_pc_ce5c
  %v2_cf20 = mul nuw nsw i32 %v3_cf04, 256
  %v4_cf24 = and i32 %v2_cf20, 65280
  %v1_cf28 = urem i32 %v5_cf00, 256
  store i32 %v1_cf28, i32* @r8, align 4
  %v5_cf2c = udiv i32 %v0_cf04, 16777216
  %v6_cf2c = or i32 %v4_cf24, %v5_cf2c
  br label %dec_label_pc_cf40

dec_label_pc_cf34:                                ; preds = %dec_label_pc_ce5c
  %v1_cf287 = urem i32 %v5_cf00, 256
  store i32 %v1_cf287, i32* @r8, align 4
  %v0_cf34 = call i32 @function_fc1c()
  %v3_cf3c = urem i32 %v0_cf34, 65536
  br label %dec_label_pc_cf40

dec_label_pc_cf40:                                ; preds = %bb, %dec_label_pc_cf34
  %storemerge17 = phi i32 [ %v6_cf2c, %bb ], [ %v3_cf3c, %dec_label_pc_cf34 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_cf40 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_cf40, 1
  br i1 %tmp41, label %dec_label_pc_d0ec.preheader, label %dec_label_pc_cf48

dec_label_pc_d0ec.preheader:                      ; preds = %dec_label_pc_d048, %dec_label_pc_cf40
  %storemerge3.in12.ph = phi i32 [ %v0_cf40, %dec_label_pc_cf40 ], [ %v1_cf9c, %dec_label_pc_d048 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_d0b4, label %dec_label_pc_d0b8.lr.ph

dec_label_pc_cf48:                                ; preds = %dec_label_pc_cf40
  store i32 %v3_ceb4, i32* %r1.global-to-local, align 4
  %v3_cf4c = udiv i32 %v5_ceac, 256
  %v5_cf58 = trunc i32 %v3_cf4c to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_cf70 = udiv i32 %v5_ceac, 65536
  store i32 %v3_cf70, i32* @lr, align 4
  %v4_cf80 = trunc i32 %v3_cf70 to i8
  store i8 %v4_cf80, i8* %stack_var_-80, align 1
  %v3_d094 = icmp eq i32 %v3_ceb4, 65535
  %v2_cfb8 = ptrtoint i32* %stack_var_-52 to i32
  %v3_cfec = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_d078

dec_label_pc_cf88:                                ; preds = %dec_label_pc_d078
  %v2_cf88 = load i8, i8* %stack_var_-80, align 1
  %v3_cf88 = sext i8 %v2_cf88 to i32
  store i32 %v3_cf88, i32* %r1.global-to-local, align 4
  %v2_cf8c = load i32, i32* @r5, align 4
  %v3_cf8c = add i32 %v2_cf8c, 2
  %v4_cf8c = inttoptr i32 %v3_cf8c to i8*
  store i8 %v5_cf58, i8* %v4_cf8c, align 1
  %v0_cf90 = load i32, i32* %r1.global-to-local, align 4
  %v1_cf90 = trunc i32 %v0_cf90 to i8
  %v2_cf90 = load i32, i32* @r5, align 4
  %v3_cf90 = add i32 %v2_cf90, 3
  %v4_cf90 = inttoptr i32 %v3_cf90 to i8*
  store i8 %v1_cf90, i8* %v4_cf90, align 1
  br label %dec_label_pc_cf94

dec_label_pc_cf94:                                ; preds = %dec_label_pc_d0a0, %dec_label_pc_cf88
  %v1_cf9c = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_cfac = call i32 @function_13db0(i32 2, i32 2, i32 17)
  %v7_cfb4 = icmp eq i32 %v3_cfac, -1
  store i32 %v2_cfb8, i32* %r1.global-to-local, align 4
  %v2_cfc4 = load i32, i32* @sb, align 4
  %v3_cfc4 = add i32 %v2_cfc4, %stack_var_-60.0
  %v4_cfc4 = inttoptr i32 %v3_cfc4 to i32*
  store i32 %v3_cfac, i32* %v4_cfc4, align 4
  br i1 %v7_cfb4, label %dec_label_pc_d0f8, label %dec_label_pc_cfcc

dec_label_pc_cfcc:                                ; preds = %dec_label_pc_cf94
  store i32 2, i32* %stack_var_-52, align 4
  store i32 0, i32* @lr, align 4
  %v4_cfec = call i32 @function_13be0(i32 %v3_cfac, %sockaddr* %v3_cfec, i32 16)
  %v0_cff0 = load i32, i32* @r5, align 4
  %v1_cff0 = add i32 %v0_cff0, 20
  %v2_cff0 = inttoptr i32 %v1_cff0 to i8*
  %v3_cff0 = load i8, i8* %v2_cff0, align 1
  %tmp = icmp ugt i8 %v3_cff0, 31
  br i1 %tmp, label %dec_label_pc_d048, label %dec_label_pc_cffc

dec_label_pc_cffc:                                ; preds = %dec_label_pc_cfcc
  %v1_cffc = add i32 %v0_cff0, 16
  %v2_cffc = inttoptr i32 %v1_cffc to i32*
  %v3_cffc = load i32, i32* %v2_cffc, align 4
  store i32 %v3_cffc, i32* @r4, align 4
  %v0_d000 = call i32 @function_fc1c()
  %v0_d004 = load i32, i32* @r4, align 4
  %v1_d008 = and i32 %v0_d004, 65280
  %v3_d010 = mul i32 %v0_d004, 16777216
  %v4_d014 = mul nuw nsw i32 %v1_d008, 256
  %v5_d014 = or i32 %v4_d014, %v3_d010
  store i32 %v5_d014, i32* %r1.global-to-local, align 4
  %v0_d01c = load i32, i32* @r5, align 4
  %v1_d01c = add i32 %v0_d01c, 20
  %v2_d01c = inttoptr i32 %v1_d01c to i8*
  %v3_d01c = load i8, i8* %v2_d01c, align 1
  %v4_d01c = zext i8 %v3_d01c to i32
  %v2_d020 = call i32 @llvm.bswap.i32(i32 %v0_d004)
  %v7_d024 = lshr i32 %v0_d000, %v4_d01c
  %v8_d024 = add i32 %v7_d024, %v2_d020
  %v3_d030 = mul i32 %v8_d024, 16777216
  %v1_d034 = and i32 %v8_d024, 65280
  %v4_d038 = mul nuw nsw i32 %v1_d034, 256
  %v5_d038 = or i32 %v4_d038, %v3_d030
  store i32 %v5_d038, i32* %r1.global-to-local, align 4
  %v2_d040 = call i32 @llvm.bswap.i32(i32 %v8_d024)
  %v2_d044 = add i32 %v0_d01c, 4
  %v3_d044 = inttoptr i32 %v2_d044 to i32*
  store i32 %v2_d040, i32* %v3_d044, align 4
  %v0_d054.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_d048

dec_label_pc_d048:                                ; preds = %dec_label_pc_cfcc, %dec_label_pc_cffc
  %v0_d054 = phi i32 [ %v0_cff0, %dec_label_pc_cfcc ], [ %v0_d054.pre, %dec_label_pc_cffc ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_d050 = load i32, i32* @sb, align 4
  %v2_d050 = add i32 %v1_d050, %stack_var_-60.0
  %v3_d050 = inttoptr i32 %v2_d050 to i32*
  %v4_d050 = load i32, i32* %v3_d050, align 4
  store i32 %v0_d054, i32* %r1.global-to-local, align 4
  %v3_d058 = inttoptr i32 %v0_d054 to %sockaddr*
  %v4_d058 = call i32 @function_13c0c(i32 %v4_d050, %sockaddr* %v3_d058, i32 16)
  %v1_d064 = add i32 %stack_var_-60.0, 4
  %v1_d068 = load i32, i32* @r7, align 4
  %v9_d068 = icmp eq i32 %v1_cf9c, %v1_d068
  %v0_d070 = load i32, i32* @r5, align 4
  %v1_d070 = add i32 %v0_d070, 24
  store i32 %v1_d070, i32* @r5, align 4
  br i1 %v9_d068, label %dec_label_pc_d0ec.preheader, label %dec_label_pc_d078

dec_label_pc_d078:                                ; preds = %dec_label_pc_d048, %dec_label_pc_cf48
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_cf48 ], [ %v1_d064, %dec_label_pc_d048 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_cf48 ], [ %v1_cf9c, %dec_label_pc_d048 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d084 = call i32 @function_140b4(i32 65535, i32 1)
  store i32 %v3_ceb4, i32* %r1.global-to-local, align 4
  %v2_d098 = load i32, i32* @sl, align 4
  %v3_d098 = add i32 %v2_d098, %stack_var_-60.0
  %v4_d098 = inttoptr i32 %v3_d098 to i32*
  store i32 %v2_d084, i32* %v4_d098, align 4
  br i1 %v3_d094, label %dec_label_pc_d0a0, label %dec_label_pc_cf88

dec_label_pc_d0a0:                                ; preds = %dec_label_pc_d078
  %v0_d0a0 = call i32 @function_fc1c()
  %v1_d0a0 = trunc i32 %v0_d0a0 to i8
  %v4_d0a4 = sdiv i32 %v0_d0a0, 256
  %v1_d0a8 = trunc i32 %v4_d0a4 to i8
  %v2_d0a8 = load i32, i32* @r5, align 4
  %v3_d0a8 = add i32 %v2_d0a8, 3
  %v4_d0a8 = inttoptr i32 %v3_d0a8 to i8*
  store i8 %v1_d0a8, i8* %v4_d0a8, align 1
  %v3_d0ac = load i32, i32* @r5, align 4
  %v4_d0ac = add i32 %v3_d0ac, 2
  %v5_d0ac = inttoptr i32 %v4_d0ac to i8*
  store i8 %v1_d0a0, i8* %v5_d0ac, align 1
  br label %dec_label_pc_cf94

dec_label_pc_d0b4:                                ; preds = %dec_label_pc_d0ec.loopexit, %dec_label_pc_d0ec.preheader, %dec_label_pc_d0f0.loopexit, %dec_label_pc_d0b4
  br label %dec_label_pc_d0b4

dec_label_pc_d0b8:                                ; preds = %dec_label_pc_d0b8.lr.ph, %dec_label_pc_d0f0.loopexit
  %v0_d0b8 = load i32, i32* @r8, align 4
  %v2_d0b8 = icmp eq i32 %v0_d0b8, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_d0b8, label %dec_label_pc_d0c0, label %dec_label_pc_d100

dec_label_pc_d0c0:                                ; preds = %dec_label_pc_d0b8
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_d0c8

dec_label_pc_d0c8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0c0
  %v0_d0d0 = phi i32 [ %v1_d0d0, %dec_label_pc_d0c8 ], [ 0, %dec_label_pc_d0c0 ]
  %v0_d0c8 = phi i32 [ %v1_d0e4, %dec_label_pc_d0c8 ], [ 0, %dec_label_pc_d0c0 ]
  %v1_d0c8 = load i32, i32* @sb, align 4
  %v2_d0c8 = add i32 %v1_d0c8, %v0_d0c8
  %v3_d0c8 = inttoptr i32 %v2_d0c8 to i32*
  %v4_d0c8 = load i32, i32* %v3_d0c8, align 4
  %v1_d0cc = load i32, i32* @sl, align 4
  %v2_d0cc = add i32 %v1_d0cc, %v0_d0c8
  %v3_d0cc = inttoptr i32 %v2_d0cc to i32*
  %v4_d0cc = load i32, i32* %v3_d0cc, align 4
  store i32 %v4_d0cc, i32* %r1.global-to-local, align 4
  %v1_d0d0 = add i32 %v0_d0d0, 1
  %v0_d0d4 = load i32, i32* @r6, align 4
  %v4_d0dc = inttoptr i32 %v4_d0cc to i32*
  %v5_d0dc = call i32 @function_13d20(i32 %v4_d0c8, i32* %v4_d0dc, i32 %v0_d0d4, i32 16384)
  %v1_d0e0 = load i32, i32* @r7, align 4
  %v9_d0e0 = icmp eq i32 %v1_d0d0, %v1_d0e0
  %v0_d0e4 = load i32, i32* @r4, align 4
  %v1_d0e4 = add i32 %v0_d0e4, 4
  store i32 %v1_d0e4, i32* @r4, align 4
  br i1 %v9_d0e0, label %dec_label_pc_d0ec.loopexit, label %dec_label_pc_d0c8

dec_label_pc_d0ec.loopexit:                       ; preds = %dec_label_pc_d0c8
  %tmp4247 = icmp slt i32 %v1_d0d0, 1
  br i1 %tmp4247, label %dec_label_pc_d0b4, label %dec_label_pc_d0b8.lr.ph

dec_label_pc_d0b8.lr.ph:                          ; preds = %dec_label_pc_d0ec.preheader, %dec_label_pc_d0ec.loopexit
  br label %dec_label_pc_d0b8

dec_label_pc_d0f0.loopexit:                       ; preds = %dec_label_pc_d108
  %tmp42 = icmp slt i32 %v0_d130, 1
  br i1 %tmp42, label %dec_label_pc_d0b4, label %dec_label_pc_d0b8

dec_label_pc_d0f8:                                ; preds = %dec_label_pc_cf94
  store i32 %v24_ce5c, i32* %fp.global-to-local, align 4
  ret i32 %v3_cfac

dec_label_pc_d100:                                ; preds = %dec_label_pc_d0b8
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_d108

dec_label_pc_d108:                                ; preds = %dec_label_pc_d108, %dec_label_pc_d100
  %v0_d108 = phi i32 [ %v1_d134, %dec_label_pc_d108 ], [ 0, %dec_label_pc_d100 ]
  %v1_d108 = load i32, i32* @sl, align 4
  %v2_d108 = add i32 %v1_d108, %v0_d108
  %v3_d108 = inttoptr i32 %v2_d108 to i32*
  %v4_d108 = load i32, i32* %v3_d108, align 4
  store i32 %v4_d108, i32* @r4, align 4
  %v0_d10c = load i32, i32* @r6, align 4
  store i32 %v0_d10c, i32* @r1, align 4
  %v1_d114 = inttoptr i32 %v4_d108 to i8*
  %v2_d114 = call i32 @function_fdf8(i8* %v1_d114)
  %v0_d118 = load i32, i32* @r5, align 4
  %v1_d118 = add i32 %v0_d118, 1
  store i32 %v1_d118, i32* @r5, align 4
  %v0_d11c = load i32, i32* @fp, align 4
  %v1_d11c = load i32, i32* @sb, align 4
  %v2_d11c = add i32 %v1_d11c, %v0_d11c
  %v3_d11c = inttoptr i32 %v2_d11c to i32*
  %v4_d11c = load i32, i32* %v3_d11c, align 4
  %v0_d120 = load i32, i32* @r4, align 4
  store i32 %v0_d120, i32* %r1.global-to-local, align 4
  %v0_d124 = load i32, i32* @r6, align 4
  %v4_d12c = inttoptr i32 %v0_d120 to i32*
  %v5_d12c = call i32 @function_13d20(i32 %v4_d11c, i32* %v4_d12c, i32 %v0_d124, i32 16384)
  %v0_d130 = load i32, i32* @r5, align 4
  %v1_d130 = load i32, i32* @r7, align 4
  %v9_d130 = icmp eq i32 %v0_d130, %v1_d130
  %v0_d134 = load i32, i32* @fp, align 4
  %v1_d134 = add i32 %v0_d134, 4
  store i32 %v1_d134, i32* @fp, align 4
  br i1 %v9_d130, label %dec_label_pc_d0f0.loopexit, label %dec_label_pc_d108

; uselistorder directives
  uselistorder i32 %v1_d134, { 1, 0 }
  uselistorder i32 %v0_d130, { 1, 0 }
  uselistorder i32 %v1_d0e4, { 1, 0 }
  uselistorder i32 %v1_d0d0, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 4, 1, 3 }
  uselistorder i32 %v0_d054, { 1, 0 }
  uselistorder i32 %v8_d024, { 1, 2, 0 }
  uselistorder i32 %v0_d004, { 1, 0, 2 }
  uselistorder i32 %v3_cfac, { 1, 3, 2, 0 }
  uselistorder i32 %v1_cf9c, { 1, 2, 0 }
  uselistorder i32 %v3_cf70, { 1, 0 }
  uselistorder i32 %v3_cf04, { 0, 2, 1 }
  uselistorder i32 %v3_ceb4, { 0, 2, 1 }
  uselistorder i32 %v1_ce60, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_d0b8.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_d0b8, { 1, 0 }
  uselistorder label %dec_label_pc_d0b4, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_d048, { 1, 0 }
  uselistorder label %dec_label_pc_cf40, { 1, 0 }
}

define i32 @function_d144(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d144:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_d144 = load i32, i32* @sb, align 4
  %v24_d144 = load i32, i32* @fp, align 4
  %v1_d148 = urem i32 %arg1, 256
  store i32 %v1_d148, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_d148, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_d160 = urem i32 %arg3, 256
  store i32 %v1_d160, i32* @r4, align 4
  %v2_d164 = call i32 @function_140b4(i32 %v1_d148, i32 4)
  %v0_d168 = load i32, i32* @r5, align 4
  store i32 %v0_d168, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d178 = load i32, i32* @r4, align 4
  store i32 %v0_d178, i32* %r0.global-to-local, align 4
  %v5_d17c = inttoptr i32 %v0_d168 to i32*
  %v6_d17c = call i32 @function_a4e8(i32 %v0_d178, i32* %v5_d17c, i32 2, i32 0)
  %v1_d188 = urem i32 %v6_d17c, 256
  store i32 %v1_d188, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d194 = load i32, i32* @r5, align 4
  store i32 %v0_d194, i32* %r1.global-to-local, align 4
  %v0_d198 = load i32, i32* @r4, align 4
  store i32 %v0_d198, i32* %r0.global-to-local, align 4
  %v5_d19c = trunc i32 %v6_d17c to i8
  %v6_d1a0 = inttoptr i32 %v0_d194 to i32*
  %v7_d1a0 = call i32 @function_a4e8(i32 %v0_d198, i32* %v6_d1a0, i32 3, i32 65535)
  %v0_d1a4 = load i32, i32* @r5, align 4
  store i32 %v0_d1a4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_d1a0, i32* %fp.global-to-local, align 4
  %v0_d1b4 = load i32, i32* @r4, align 4
  store i32 %v0_d1b4, i32* %r0.global-to-local, align 4
  %v4_d1b8 = inttoptr i32 %v0_d1a4 to i32*
  %v5_d1b8 = call i32 @function_a4e8(i32 %v0_d1b4, i32* %v4_d1b8, i32 4, i32 64)
  %v1_d1c0 = urem i32 %v5_d1b8, 256
  store i32 %v1_d1c0, i32* %ip.global-to-local, align 4
  %v0_d1c4 = load i32, i32* @r5, align 4
  store i32 %v0_d1c4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d1d0 = load i32, i32* @r4, align 4
  store i32 %v0_d1d0, i32* %r0.global-to-local, align 4
  %v5_d1d4 = trunc i32 %v5_d1b8 to i8
  %v6_d1d8 = inttoptr i32 %v0_d1c4 to i32*
  %v7_d1d8 = call i32 @function_a4e8(i32 %v0_d1d0, i32* %v6_d1d8, i32 5, i32 0)
  %v1_d1e4 = urem i32 %v7_d1d8, 256
  store i32 %v1_d1e4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d1f0 = load i32, i32* @r5, align 4
  store i32 %v0_d1f0, i32* %r1.global-to-local, align 4
  %v0_d1f4 = load i32, i32* @r4, align 4
  store i32 %v0_d1f4, i32* %r0.global-to-local, align 4
  %v5_d1fc = inttoptr i32 %v0_d1f0 to i32*
  %v6_d1fc = call i32 @function_a4e8(i32 %v0_d1f4, i32* %v5_d1fc, i32 6, i32 65535)
  %v0_d204 = load i32, i32* @r5, align 4
  store i32 %v0_d204, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_d1fc, i32* @r7, align 4
  %v0_d214 = load i32, i32* @r4, align 4
  store i32 %v0_d214, i32* %r0.global-to-local, align 4
  %v4_d218 = inttoptr i32 %v0_d204 to i32*
  %v5_d218 = call i32 @function_a4e8(i32 %v0_d214, i32* %v4_d218, i32 7, i32 65535)
  %v0_d21c = load i32, i32* @r5, align 4
  store i32 %v0_d21c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_d218, i32* %sb.global-to-local, align 4
  %v0_d22c = load i32, i32* @r4, align 4
  store i32 %v0_d22c, i32* %r0.global-to-local, align 4
  %v4_d230 = inttoptr i32 %v0_d21c to i32*
  %v5_d230 = call i32 @function_a4e8(i32 %v0_d22c, i32* %v4_d230, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d23c = load i32, i32* @r5, align 4
  store i32 %v0_d23c, i32* %r1.global-to-local, align 4
  store i32 %v5_d230, i32* @r6, align 4
  %v0_d244 = load i32, i32* @r4, align 4
  store i32 %v0_d244, i32* %r0.global-to-local, align 4
  %v4_d248 = inttoptr i32 %v0_d23c to i32*
  %v5_d248 = call i32 @function_a4e8(i32 %v0_d244, i32* %v4_d248, i32 1, i32 1)
  %v2_d254 = load i32, i32* @global_var_1eafc.85, align 4
  store i32 %v2_d254, i32* %r3.global-to-local, align 4
  %v1_d258 = urem i32 %v5_d248, 256
  store i32 %v1_d258, i32* %ip.global-to-local, align 4
  %v0_d25c = load i32, i32* @r5, align 4
  store i32 %v0_d25c, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_d264 = load i32, i32* @r4, align 4
  store i32 %v0_d264, i32* %r0.global-to-local, align 4
  %v5_d26c = inttoptr i32 %v0_d25c to i32*
  %v6_d26c = call i32 @function_a4e8(i32 %v0_d264, i32* %v5_d26c, i32 25, i32 %v2_d254)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_d280 = call i32 @function_13db0(i32 2, i32 3, i32 17)
  store i32 %v3_d280, i32* %r0.global-to-local, align 4
  %v7_d284 = icmp eq i32 %v3_d280, -1
  store i1 %v7_d284, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d284, label %dec_label_pc_d6ac, label %dec_label_pc_d290

dec_label_pc_d290:                                ; preds = %dec_label_pc_d144
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d298 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d298, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d2ac = call i32 @function_13d80(i32 %v3_d280, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_d2ac, i32* %r0.global-to-local, align 4
  %v7_d2b0 = icmp eq i32 %v6_d2ac, -1
  store i1 %v7_d2b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d2b0, label %dec_label_pc_d6a4, label %dec_label_pc_d2b8

dec_label_pc_d2b8:                                ; preds = %dec_label_pc_d290
  %v0_d2b8 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_d2c4 = urem i32 %v0_d2b8, 65536
  store i32 %v3_d2c4, i32* %r2.global-to-local, align 4
  %v3_d2c8 = icmp ugt i32 %v3_d2c4, 1459
  %v9_d2c8 = icmp eq i32 %v3_d2c4, 1460
  store i1 %v9_d2c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d2c8, label %bb, label %bb70

bb:                                               ; preds = %dec_label_pc_d2b8
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb70

bb70:                                             ; preds = %dec_label_pc_d2b8, %bb
  %v0_d2d0 = phi i32 [ %v3_d2c4, %dec_label_pc_d2b8 ], [ 1460, %bb ]
  %v0_d2d4 = load i32, i32* @r7, align 4
  %v3_d2d8 = urem i32 %v0_d2d4, 65536
  store i32 %v3_d2d8, i32* %r3.global-to-local, align 4
  %v0_d2dc = load i32, i32* @sl, align 4
  %v2_d2dc = icmp eq i32 %v0_d2dc, 0
  store i1 %v2_d2dc, i1* %cpsr_z.global-to-local, align 1
  %v0_d2e0 = load i32, i32* %fp.global-to-local, align 4
  %v3_d2e0 = mul i32 %v0_d2e0, 65536
  store i32 %v3_d2e0, i32* %r0.global-to-local, align 4
  %v0_d2e4 = load i32, i32* %sb.global-to-local, align 4
  %tmp71 = icmp slt i32 %v0_d2dc, 1
  br i1 %tmp71, label %bb72, label %bb73

bb72:                                             ; preds = %bb70
  store i32 %v0_d2d0, i32* %r3.global-to-local, align 4
  br label %bb73

bb73:                                             ; preds = %bb70, %bb72
  %v5_d30c = phi i32 [ %v3_d2d8, %bb70 ], [ %v0_d2d0, %bb72 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d2f4 = urem i32 %v0_d2e0, 65536
  store i32 %v3_d2f4, i32* %r2.global-to-local, align 4
  %v3_d2f8 = urem i32 %v0_d2e4, 65536
  store i32 %v3_d2f8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp71, label %.thread, label %dec_label_pc_d314

.thread:                                          ; preds = %bb73
  %v6_d308 = add nsw i32 %v5_d30c, 28
  store i32 %v6_d308, i32* @fp, align 4
  %v6_d30c = add nsw i32 %v5_d30c, 8
  store i32 %v6_d30c, i32* @sb, align 4
  br label %dec_label_pc_d488

dec_label_pc_d314:                                ; preds = %bb73
  %v1_d318 = add nuw nsw i32 %v0_d2d0, 28
  store i32 %v1_d318, i32* @fp, align 4
  %tmp74 = mul nuw nsw i32 %v1_d318, 256
  %v1_d324 = and i32 %tmp74, 65280
  %tmp75 = udiv i32 %v0_d2e0, 256
  %v3_d328 = urem i32 %tmp75, 256
  %v2_d33c = icmp eq i32 %v1_d1e4, 0
  store i1 %v2_d33c, i1* %cpsr_z.global-to-local, align 1
  %v1_d340 = urem i32 %v0_d2e0, 256
  %v1_d348 = add nuw nsw i32 %v0_d2d0, 8
  store i32 %v1_d348, i32* @sb, align 4
  %v1_d350 = urem i32 %v0_d2d4, 256
  %v1_d354 = urem i32 %v0_d2e4, 256
  store i32 %v1_d354, i32* %ip.global-to-local, align 4
  store i32 %v1_d324, i32* %r3.global-to-local, align 4
  %tmp76 = mul nuw nsw i32 %v1_d348, 256
  %v4_d360 = mul nuw nsw i32 %v1_d340, 256
  %v5_d360 = or i32 %v4_d360, %v3_d328
  store i32 %v5_d360, i32* %r0.global-to-local, align 4
  %v3_d364 = mul nuw nsw i32 %v1_d350, 256
  store i32 %v3_d364, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_d2e4, 256
  %v3_d368 = urem i32 %tmp77, 256
  %v1_d36c = and i32 %tmp76, 65280
  store i32 %v1_d36c, i32* %r1.global-to-local, align 4
  %tmp78 = udiv i32 %v1_d318, 256
  %v4_d370 = urem i32 %tmp78, 256
  %v5_d370 = or i32 %v4_d370, %v1_d324
  store i32 %v5_d370, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_d2d4, 256
  %v4_d374 = urem i32 %tmp79, 256
  %v5_d374 = or i32 %v4_d374, %v3_d364
  store i32 %v5_d374, i32* @r4, align 4
  %v5_d378 = trunc i32 %tmp78 to i8
  %v5_d37c = trunc i32 %tmp75 to i8
  %v4_d380 = mul nuw nsw i32 %v1_d354, 256
  %v5_d380 = or i32 %v4_d380, %v3_d368
  store i32 %v5_d380, i32* @r5, align 4
  %tmp80 = udiv i32 %v1_d348, 256
  %v4_d384 = urem i32 %tmp80, 256
  %v5_d384 = or i32 %v4_d384, %v1_d36c
  store i32 %v5_d384, i32* @r7, align 4
  br i1 %v2_d33c, label %dec_label_pc_d38c, label %dec_label_pc_d6b4

dec_label_pc_d38c:                                ; preds = %dec_label_pc_d314
  %v3_d38c35 = udiv i32 %v1_d324, 256
  store i32 %v3_d38c35, i32* %ip.global-to-local, align 4
  store i32 %v1_d340, i32* %r0.global-to-local, align 4
  store i32 %v1_d350, i32* %r1.global-to-local, align 4
  store i32 %v1_d354, i32* %r2.global-to-local, align 4
  %v3_d39c36 = udiv i32 %v1_d36c, 256
  store i32 %v3_d39c36, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_d400 = sext i8 %v5_d19c to i32
  %v4_d440 = sext i8 %v5_d37c to i32
  %sext14 = mul i32 %v0_d2e0, 16777216
  %v4_d444 = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v0_d2d4, 16777216
  %v4_d45c = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v1_d348, 16777216
  %v4_d460 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_d2e4, 16777216
  %v4_d464 = sdiv i32 %sext17, 16777216
  %v1_d44c = trunc i32 %v1_d318 to i8
  %v1_d46c = trunc i32 %v4_d460 to i8
  br label %dec_label_pc_d3b8

dec_label_pc_d3b8:                                ; preds = %dec_label_pc_d3b8, %dec_label_pc_d38c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d3c4 = call i32 @function_140b4(i32 1510, i32 1)
  store i32 %v2_d3c4, i32* %r0.global-to-local, align 4
  store i32 %v2_d164, i32* %ip.global-to-local, align 4
  %v3_d3cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d3cc, i32* %r2.global-to-local, align 4
  %v2_d3d0 = load i32, i32* @r6, align 4
  %v5_d3d0 = mul i32 %v2_d3d0, 4
  %v6_d3d0 = add i32 %v5_d3d0, %v2_d164
  %v7_d3d0 = inttoptr i32 %v6_d3d0 to i32*
  store i32 %v2_d3c4, i32* %v7_d3d0, align 4
  %v0_d3d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_d3d4 = load i32, i32* %r2.global-to-local, align 4
  %v4_d3d4 = mul i32 %v1_d3d4, 4
  %v5_d3d4 = add i32 %v4_d3d4, %v0_d3d4
  %v6_d3d4 = inttoptr i32 %v5_d3d4 to i32*
  %v7_d3d4 = load i32, i32* %v6_d3d4, align 4
  store i32 %v7_d3d4, i32* %r1.global-to-local, align 4
  %v1_d3d8 = inttoptr i32 %v7_d3d4 to i8*
  %v2_d3d8 = load i8, i8* %v1_d3d8, align 1
  %tmp = urem i8 %v2_d3d8, 16
  %v1_d3dc = zext i8 %tmp to i32
  %v1_d3e0 = or i32 %v1_d3dc, 64
  store i32 %v1_d3e0, i32* %r3.global-to-local, align 4
  %v1_d3e4 = trunc i32 %v1_d3e0 to i8
  store i8 %v1_d3e4, i8* %v1_d3d8, align 1
  %v0_d3e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d3e8 = inttoptr i32 %v0_d3e8 to i8*
  %v2_d3e8 = load i8, i8* %v1_d3e8, align 1
  %v3_d3e8 = zext i8 %v2_d3e8 to i32
  %v1_d3ec = and i32 %v3_d3e8, 240
  %v1_d3f0 = or i32 %v1_d3ec, 5
  store i32 %v1_d3f0, i32* %r2.global-to-local, align 4
  %v3_d3f8 = add i32 %v0_d3e8, 9
  %v4_d3f8 = inttoptr i32 %v3_d3f8 to i8*
  store i8 17, i8* %v4_d3f8, align 1
  %v0_d3fc = load i32, i32* %r2.global-to-local, align 4
  %v1_d3fc = trunc i32 %v0_d3fc to i8
  %v2_d3fc = load i32, i32* %r1.global-to-local, align 4
  %v3_d3fc = inttoptr i32 %v2_d3fc to i8*
  store i8 %v1_d3fc, i8* %v3_d3fc, align 1
  store i32 %v4_d400, i32* %r0.global-to-local, align 4
  %v2_d404 = load i32, i32* %r1.global-to-local, align 4
  %v3_d404 = add i32 %v2_d404, 1
  %v4_d404 = inttoptr i32 %v3_d404 to i8*
  store i8 %v5_d19c, i8* %v4_d404, align 1
  %v2_d40c = load i32, i32* %r1.global-to-local, align 4
  %v3_d40c = add i32 %v2_d40c, 8
  %v4_d40c = inttoptr i32 %v3_d40c to i8*
  store i8 %v5_d1d4, i8* %v4_d40c, align 1
  %v3_d410 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d410, i32* %r2.global-to-local, align 4
  store i32 %v6_d26c, i32* %ip.global-to-local, align 4
  %v3_d418 = mul i32 %v3_d410, 32
  store i32 %v3_d418, i32* %r3.global-to-local, align 4
  %v1_d41c = load i32, i32* %r1.global-to-local, align 4
  %v2_d41c = add i32 %v1_d41c, 12
  %v3_d41c = inttoptr i32 %v2_d41c to i32*
  store i32 %v6_d26c, i32* %v3_d41c, align 4
  %v0_d420 = load i32, i32* %r3.global-to-local, align 4
  %v1_d420 = load i32, i32* %r2.global-to-local, align 4
  %tmp82 = mul i32 %v1_d420, -8
  %v5_d420 = add i32 %v0_d420, %tmp82
  %v1_d424 = load i32, i32* @r8, align 4
  %v2_d424 = add i32 %v5_d420, %v1_d424
  store i32 %v2_d424, i32* %r3.global-to-local, align 4
  %v1_d428 = add i32 %v2_d424, 16
  %v2_d428 = inttoptr i32 %v1_d428 to i32*
  %v3_d428 = load i32, i32* %v2_d428, align 4
  %v1_d42c = load i32, i32* %r1.global-to-local, align 4
  %v2_d42c = add i32 %v1_d42c, 16
  %v3_d42c = inttoptr i32 %v2_d42c to i32*
  store i32 %v3_d428, i32* %v3_d42c, align 4
  %v0_d434 = load i32, i32* %r2.global-to-local, align 4
  %v1_d434 = add i32 %v0_d434, 1
  store i32 %v1_d434, i32* @r6, align 4
  %v2_d438 = load i32, i32* %r1.global-to-local, align 4
  %v3_d438 = add i32 %v2_d438, 2
  %v4_d438 = inttoptr i32 %v3_d438 to i8*
  store i8 %v5_d378, i8* %v4_d438, align 1
  store i32 %v4_d440, i32* %ip.global-to-local, align 4
  store i32 %v4_d444, i32* %r0.global-to-local, align 4
  %v0_d448 = load i32, i32* %r1.global-to-local, align 4
  %v1_d448 = add i32 %v0_d448, 20
  store i32 %v1_d448, i32* %r3.global-to-local, align 4
  %v3_d44c = add i32 %v0_d448, 3
  %v4_d44c = inttoptr i32 %v3_d44c to i8*
  store i8 %v1_d44c, i8* %v4_d44c, align 1
  %v0_d450 = load i32, i32* %ip.global-to-local, align 4
  %v1_d450 = trunc i32 %v0_d450 to i8
  %v2_d450 = load i32, i32* %r1.global-to-local, align 4
  %v3_d450 = add i32 %v2_d450, 4
  %v4_d450 = inttoptr i32 %v3_d450 to i8*
  store i8 %v1_d450, i8* %v4_d450, align 1
  %v0_d454 = load i32, i32* %r0.global-to-local, align 4
  %v1_d454 = trunc i32 %v0_d454 to i8
  %v2_d454 = load i32, i32* %r1.global-to-local, align 4
  %v3_d454 = add i32 %v2_d454, 5
  %v4_d454 = inttoptr i32 %v3_d454 to i8*
  store i8 %v1_d454, i8* %v4_d454, align 1
  %v0_d458 = load i32, i32* @r4, align 4
  %v1_d458 = trunc i32 %v0_d458 to i8
  %v2_d458 = load i32, i32* %r1.global-to-local, align 4
  %v3_d458 = add i32 %v2_d458, 20
  %v4_d458 = inttoptr i32 %v3_d458 to i8*
  store i8 %v1_d458, i8* %v4_d458, align 1
  store i32 %v4_d45c, i32* %r2.global-to-local, align 4
  store i32 %v4_d460, i32* %r1.global-to-local, align 4
  store i32 %v4_d464, i32* %ip.global-to-local, align 4
  %v0_d468 = load i32, i32* @r6, align 4
  %v1_d468 = load i32, i32* @sl, align 4
  %v9_d468 = icmp eq i32 %v0_d468, %v1_d468
  store i1 %v9_d468, i1* %cpsr_z.global-to-local, align 1
  %v2_d46c = load i32, i32* %r3.global-to-local, align 4
  %v3_d46c = add i32 %v2_d46c, 5
  %v4_d46c = inttoptr i32 %v3_d46c to i8*
  store i8 %v1_d46c, i8* %v4_d46c, align 1
  %v0_d470 = load i32, i32* %r2.global-to-local, align 4
  %v1_d470 = trunc i32 %v0_d470 to i8
  %v2_d470 = load i32, i32* %r3.global-to-local, align 4
  %v3_d470 = add i32 %v2_d470, 1
  %v4_d470 = inttoptr i32 %v3_d470 to i8*
  store i8 %v1_d470, i8* %v4_d470, align 1
  %v0_d474 = load i32, i32* @r5, align 4
  %v1_d474 = trunc i32 %v0_d474 to i8
  %v2_d474 = load i32, i32* %r3.global-to-local, align 4
  %v3_d474 = add i32 %v2_d474, 2
  %v4_d474 = inttoptr i32 %v3_d474 to i8*
  store i8 %v1_d474, i8* %v4_d474, align 1
  %v0_d478 = load i32, i32* %ip.global-to-local, align 4
  %v1_d478 = trunc i32 %v0_d478 to i8
  %v2_d478 = load i32, i32* %r3.global-to-local, align 4
  %v3_d478 = add i32 %v2_d478, 3
  %v4_d478 = inttoptr i32 %v3_d478 to i8*
  store i8 %v1_d478, i8* %v4_d478, align 1
  %v0_d47c = load i32, i32* @r7, align 4
  %v1_d47c = trunc i32 %v0_d47c to i8
  %v2_d47c = load i32, i32* %r3.global-to-local, align 4
  %v3_d47c = add i32 %v2_d47c, 4
  %v4_d47c = inttoptr i32 %v3_d47c to i8*
  store i8 %v1_d47c, i8* %v4_d47c, align 1
  %v0_d480 = load i32, i32* @r6, align 4
  store i32 %v0_d480, i32* %stack_var_-40, align 4
  %v5_d484 = icmp slt i32 %v0_d468, %v1_d468
  br i1 %v5_d484, label %dec_label_pc_d3b8, label %dec_label_pc_d488

dec_label_pc_d488:                                ; preds = %dec_label_pc_d6e8, %dec_label_pc_d3b8, %.thread
  %v0_d488 = load i32, i32* @sl, align 4
  %v2_d488 = icmp eq i32 %v0_d488, 0
  store i1 %v2_d488, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_d634 = icmp eq i32 %v3_d2f4, 65535
  %v2_d500 = icmp eq i32 %v1_d258, 0
  %v2_d4c8 = icmp eq i32 %v6_d26c, -1
  %v7_d4c8 = icmp eq i32 %v6_d26c, -1
  br label %dec_label_pc_d490.outer

dec_label_pc_d490.outer:                          ; preds = %dec_label_pc_d5b0, %dec_label_pc_d488
  %v1_d490.ph.in = phi i32 [ %v1_d5a4, %dec_label_pc_d5b0 ], [ %v0_d488, %dec_label_pc_d488 ]
  %v0_d490.ph = phi i1 [ %v2_d5b0, %dec_label_pc_d5b0 ], [ %v2_d488, %dec_label_pc_d488 ]
  %v1_d490.ph = icmp slt i32 %v1_d490.ph.in, 0
  %v4_d490 = or i1 %v1_d490.ph, %v0_d490.ph
  br label %dec_label_pc_d490

dec_label_pc_d490:                                ; preds = %dec_label_pc_d490.outer, %dec_label_pc_d490
  br i1 %v4_d490, label %dec_label_pc_d490, label %dec_label_pc_d494

dec_label_pc_d494:                                ; preds = %dec_label_pc_d490
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_d4a0

dec_label_pc_d4a0:                                ; preds = %dec_label_pc_d508, %dec_label_pc_d494
  %v1_d4b4 = phi i32 [ %v1_d5a0, %dec_label_pc_d508 ], [ 0, %dec_label_pc_d494 ]
  %v5_d4a4 = mul i32 %v1_d4b4, 24
  %v1_d4a8 = load i32, i32* @r8, align 4
  %v2_d4a8 = add i32 %v1_d4a8, %v5_d4a4
  store i32 %v2_d4a8, i32* %r3.global-to-local, align 4
  store i32 %v2_d164, i32* %ip.global-to-local, align 4
  %v1_d4b0 = add i32 %v2_d4a8, 20
  %v2_d4b0 = inttoptr i32 %v1_d4b0 to i8*
  %v3_d4b0 = load i8, i8* %v2_d4b0, align 1
  %v4_d4b0 = zext i8 %v3_d4b0 to i32
  store i32 %v4_d4b0, i32* %r2.global-to-local, align 4
  %v4_d4b4 = mul i32 %v1_d4b4, 4
  %v5_d4b4 = add i32 %v4_d4b4, %v2_d164
  %v6_d4b4 = inttoptr i32 %v5_d4b4 to i32*
  %v7_d4b4 = load i32, i32* %v6_d4b4, align 4
  store i32 %v7_d4b4, i32* @r5, align 4
  %v7_d4b8 = icmp eq i8 %v3_d4b0, 31
  store i1 %v7_d4b8, i1* %cpsr_z.global-to-local, align 1
  %v1_d4bc = add i32 %v7_d4b4, 20
  store i32 %v1_d4bc, i32* @r6, align 4
  %tmp83 = icmp ult i8 %v3_d4b0, 32
  br i1 %tmp83, label %dec_label_pc_d5bc, label %dec_label_pc_d4c4

dec_label_pc_d4c4:                                ; preds = %dec_label_pc_d4a0
  store i32 %v6_d26c, i32* %r0.global-to-local, align 4
  store i1 %v7_d4c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d4c8, label %dec_label_pc_d624, label %dec_label_pc_d4d0

dec_label_pc_d4d0:                                ; preds = %dec_label_pc_d5bc, %dec_label_pc_d4c4
  store i32 %v3_d2f4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d634, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d634, label %dec_label_pc_d640, label %dec_label_pc_d4e4

dec_label_pc_d4e4:                                ; preds = %dec_label_pc_d624.dec_label_pc_d4e4_crit_edge, %dec_label_pc_d4d0
  %v1_d4e8 = phi i32 [ %v1_d4e8.pre, %dec_label_pc_d624.dec_label_pc_d4e4_crit_edge ], [ 65535, %dec_label_pc_d4d0 ]
  store i32 %v3_d2d8, i32* %r2.global-to-local, align 4
  %v9_d4e8 = icmp eq i32 %v3_d2d8, %v1_d4e8
  store i1 %v9_d4e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4e8, label %dec_label_pc_d65c, label %dec_label_pc_d4f0

dec_label_pc_d4f0:                                ; preds = %dec_label_pc_d640.dec_label_pc_d4f0_crit_edge, %dec_label_pc_d4e4
  %v1_d4f4 = phi i32 [ %v1_d4f4.pre, %dec_label_pc_d640.dec_label_pc_d4f0_crit_edge ], [ %v1_d4e8, %dec_label_pc_d4e4 ]
  store i32 %v3_d2f8, i32* %r3.global-to-local, align 4
  %v9_d4f4 = icmp eq i32 %v3_d2f8, %v1_d4f4
  store i1 %v9_d4f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4f4, label %dec_label_pc_d678, label %dec_label_pc_d4fc

dec_label_pc_d4fc:                                ; preds = %dec_label_pc_d65c, %dec_label_pc_d4f0
  store i32 %v1_d258, i32* %ip.global-to-local, align 4
  store i1 %v2_d500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d500, label %dec_label_pc_d508, label %dec_label_pc_d694

dec_label_pc_d508:                                ; preds = %dec_label_pc_d4fc, %dec_label_pc_d678, %dec_label_pc_d694
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d50c = load i32, i32* @r7, align 4
  %v1_d50c = trunc i32 %v0_d50c to i8
  %v2_d50c = load i32, i32* @r5, align 4
  %v3_d50c = add i32 %v2_d50c, 10
  %v4_d50c = inttoptr i32 %v3_d50c to i8*
  store i8 %v1_d50c, i8* %v4_d50c, align 1
  %v0_d510 = load i32, i32* @r7, align 4
  %v1_d510 = trunc i32 %v0_d510 to i8
  %v2_d510 = load i32, i32* @r5, align 4
  %v3_d510 = add i32 %v2_d510, 11
  %v4_d510 = inttoptr i32 %v3_d510 to i8*
  store i8 %v1_d510, i8* %v4_d510, align 1
  %v0_d514 = load i32, i32* @r5, align 4
  store i32 %v0_d514, i32* @r0, align 4
  %v2_d518 = call i32 @function_e444(i32 %v0_d514, i32 20)
  %v3_d518 = trunc i32 %v2_d518 to i8
  store i32 %v2_d518, i32* %r0.global-to-local, align 4
  %v4_d51c = sdiv i32 %v2_d518, 256
  store i32 %v4_d51c, i32* %r3.global-to-local, align 4
  %v1_d520 = trunc i32 %v4_d51c to i8
  %v2_d520 = load i32, i32* @r5, align 4
  %v3_d520 = add i32 %v2_d520, 11
  %v4_d520 = inttoptr i32 %v3_d520 to i8*
  store i8 %v1_d520, i8* %v4_d520, align 1
  %v3_d524 = load i32, i32* @r5, align 4
  %v4_d524 = add i32 %v3_d524, 10
  %v5_d524 = inttoptr i32 %v4_d524 to i8*
  store i8 %v3_d518, i8* %v5_d524, align 1
  %v0_d528 = load i32, i32* @r7, align 4
  %v1_d528 = trunc i32 %v0_d528 to i8
  %v2_d528 = load i32, i32* @r6, align 4
  %v3_d528 = add i32 %v2_d528, 6
  %v4_d528 = inttoptr i32 %v3_d528 to i8*
  store i8 %v1_d528, i8* %v4_d528, align 1
  %v0_d52c = load i32, i32* @r7, align 4
  %v1_d52c = trunc i32 %v0_d52c to i8
  %v2_d52c = load i32, i32* @r6, align 4
  %v3_d52c = add i32 %v2_d52c, 7
  %v4_d52c = inttoptr i32 %v3_d52c to i8*
  store i8 %v1_d52c, i8* %v4_d52c, align 1
  %v0_d530 = load i32, i32* @r5, align 4
  %v1_d530 = add i32 %v0_d530, 24
  %v2_d530 = inttoptr i32 %v1_d530 to i8*
  %v3_d530 = load i8, i8* %v2_d530, align 1
  %v4_d530 = zext i8 %v3_d530 to i32
  store i32 %v4_d530, i32* %r3.global-to-local, align 4
  %v1_d534 = add i32 %v0_d530, 25
  %v2_d534 = inttoptr i32 %v1_d534 to i8*
  %v3_d534 = load i8, i8* %v2_d534, align 1
  %v4_d534 = zext i8 %v3_d534 to i32
  %v0_d538 = load i32, i32* @r6, align 4
  store i32 %v0_d538, i32* @r1, align 4
  %v4_d53c = mul nuw nsw i32 %v4_d534, 256
  %v5_d53c = or i32 %v4_d53c, %v4_d530
  store i32 %v5_d53c, i32* %r2.global-to-local, align 4
  store i32 %v0_d530, i32* %r0.global-to-local, align 4
  %v0_d544 = load i32, i32* @sb, align 4
  store i32 %v0_d544, i32* %r3.global-to-local, align 4
  %v4_d548 = call i32 @function_e4a0(i32 %v0_d530, i32 %v0_d538, i32 %v5_d53c, i32 %v0_d544)
  %v5_d548 = trunc i32 %v4_d548 to i8
  store i32 %v4_d548, i32* %r0.global-to-local, align 4
  %v4_d54c37 = udiv i32 %v4_d548, 256
  %v1_d550 = trunc i32 %v4_d54c37 to i8
  %v2_d550 = load i32, i32* @r6, align 4
  %v3_d550 = add i32 %v2_d550, 7
  %v4_d550 = inttoptr i32 %v3_d550 to i8*
  store i8 %v1_d550, i8* %v4_d550, align 1
  %v3_d554 = load i32, i32* @r6, align 4
  %v4_d554 = add i32 %v3_d554, 6
  %v5_d554 = inttoptr i32 %v4_d554 to i8*
  store i8 %v5_d548, i8* %v5_d554, align 1
  %v3_d558 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d558, i32* %r3.global-to-local, align 4
  %v0_d55c = load i32, i32* @r5, align 4
  %v1_d55c = add i32 %v0_d55c, 20
  %v2_d55c = inttoptr i32 %v1_d55c to i32*
  %v3_d55c = load i32, i32* %v2_d55c, align 4
  %v3_d564 = udiv i32 %v3_d55c, 65536
  store i32 %v3_d564, i32* %r2.global-to-local, align 4
  %v5_d568 = mul i32 %v3_d558, 24
  %v1_d56c = load i32, i32* @r8, align 4
  %v2_d56c = add i32 %v1_d56c, %v5_d568
  store i32 %v2_d56c, i32* %ip.global-to-local, align 4
  %v3_d57034 = udiv i32 %v3_d55c, 16777216
  %v1_d574 = trunc i32 %v3_d57034 to i8
  %v3_d574 = add i32 %v2_d56c, 3
  %v4_d574 = inttoptr i32 %v3_d574 to i8*
  store i8 %v1_d574, i8* %v4_d574, align 1
  %v0_d578 = load i32, i32* %r2.global-to-local, align 4
  %v1_d578 = trunc i32 %v0_d578 to i8
  %v2_d578 = load i32, i32* %ip.global-to-local, align 4
  %v3_d578 = add i32 %v2_d578, 2
  %v4_d578 = inttoptr i32 %v3_d578 to i8*
  store i8 %v1_d578, i8* %v4_d578, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d580 = load i32, i32* @r5, align 4
  store i32 %v0_d580, i32* %r1.global-to-local, align 4
  store i32 %v3_d280, i32* %r0.global-to-local, align 4
  %v0_d588 = load i32, i32* @fp, align 4
  store i32 %v0_d588, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_d590 = load i32, i32* %ip.global-to-local, align 4
  %v6_d598 = inttoptr i32 %v0_d580 to i32*
  %v7_d598 = call i32 @function_13d4c(i32 %v3_d280, i32* %v6_d598, i32 %v0_d588, i32 16384, i32 %v0_d590, i32 16)
  %v3_d59c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d59c, i32* %r3.global-to-local, align 4
  %v1_d5a0 = add i32 %v3_d59c, 1
  store i32 %v1_d5a0, i32* %r0.global-to-local, align 4
  %v1_d5a4 = load i32, i32* @sl, align 4
  %v9_d5a4 = icmp eq i32 %v1_d5a0, %v1_d5a4
  store i1 %v9_d5a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d5a0, i32* %stack_var_-40, align 4
  %v5_d5ac = icmp slt i32 %v1_d5a0, %v1_d5a4
  br i1 %v5_d5ac, label %dec_label_pc_d4a0, label %dec_label_pc_d5b0

dec_label_pc_d5b0:                                ; preds = %dec_label_pc_d508
  %v2_d5b0 = icmp eq i32 %v1_d5a4, 0
  store i1 %v2_d5b0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_d490.outer

dec_label_pc_d5bc:                                ; preds = %dec_label_pc_d4a0
  %v1_d5bc = add i32 %v2_d4a8, 16
  %v2_d5bc = inttoptr i32 %v1_d5bc to i32*
  %v3_d5bc = load i32, i32* %v2_d5bc, align 4
  %v0_d5c0 = call i32 @function_fc1c()
  store i32 %v0_d5c0, i32* %r0.global-to-local, align 4
  %v3_d5c4 = load i32, i32* %stack_var_-40, align 4
  %v5_d5cc = mul i32 %v3_d5c4, 24
  %v1_d5d4 = load i32, i32* @r8, align 4
  %v2_d5d4 = add i32 %v1_d5d4, %v5_d5cc
  store i32 %v2_d5d4, i32* %r1.global-to-local, align 4
  %v1_d5d8 = and i32 %v3_d5bc, 65280
  store i32 %v1_d5d8, i32* %r3.global-to-local, align 4
  %v1_d5d0 = udiv i32 %v3_d5bc, 256
  %v3_d5dc = and i32 %v1_d5d0, 65280
  store i32 %v3_d5dc, i32* %r2.global-to-local, align 4
  %v3_d5e0 = mul i32 %v3_d5bc, 16777216
  store i32 %v3_d5e0, i32* %ip.global-to-local, align 4
  %v1_d5e4 = add i32 %v2_d5d4, 20
  %v2_d5e4 = inttoptr i32 %v1_d5e4 to i8*
  %v3_d5e4 = load i8, i8* %v2_d5e4, align 1
  %v4_d5e4 = zext i8 %v3_d5e4 to i32
  %v4_d5e8 = mul nuw nsw i32 %v1_d5d8, 256
  %v5_d5e8 = or i32 %v4_d5e8, %v3_d5e0
  store i32 %v5_d5e8, i32* %ip.global-to-local, align 4
  %v2_d5f0 = call i32 @llvm.bswap.i32(i32 %v3_d5bc)
  %v7_d5f4 = lshr i32 %v0_d5c0, %v4_d5e4
  %v8_d5f4 = add i32 %v7_d5f4, %v2_d5f0
  store i32 %v8_d5f4, i32* %r2.global-to-local, align 4
  %v3_d600 = mul i32 %v8_d5f4, 16777216
  %v1_d5f8 = mul i32 %v8_d5f4, 256
  %v4_d604 = and i32 %v1_d5f8, 16711680
  %v5_d604 = or i32 %v4_d604, %v3_d600
  store i32 %v5_d604, i32* %r1.global-to-local, align 4
  store i32 %v6_d26c, i32* %r0.global-to-local, align 4
  %v2_d614 = call i32 @llvm.bswap.i32(i32 %v8_d5f4)
  store i32 %v2_d614, i32* %r3.global-to-local, align 4
  store i1 %v7_d4c8, i1* %cpsr_z.global-to-local, align 1
  %v1_d61c = load i32, i32* @r5, align 4
  %v2_d61c = add i32 %v1_d61c, 16
  %v3_d61c = inttoptr i32 %v2_d61c to i32*
  store i32 %v2_d614, i32* %v3_d61c, align 4
  br i1 %v2_d4c8, label %dec_label_pc_d624, label %dec_label_pc_d4d0

dec_label_pc_d624:                                ; preds = %dec_label_pc_d5bc, %dec_label_pc_d4c4
  %v0_d624 = call i32 @function_fc1c()
  store i32 %v0_d624, i32* %r0.global-to-local, align 4
  store i32 %v3_d2f4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d634, i1* %cpsr_z.global-to-local, align 1
  %v1_d638 = load i32, i32* @r5, align 4
  %v2_d638 = add i32 %v1_d638, 12
  %v3_d638 = inttoptr i32 %v2_d638 to i32*
  store i32 %v0_d624, i32* %v3_d638, align 4
  br i1 %v3_d634, label %dec_label_pc_d640, label %dec_label_pc_d624.dec_label_pc_d4e4_crit_edge

dec_label_pc_d624.dec_label_pc_d4e4_crit_edge:    ; preds = %dec_label_pc_d624
  %v1_d4e8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4e4

dec_label_pc_d640:                                ; preds = %dec_label_pc_d624, %dec_label_pc_d4d0
  %v0_d640 = call i32 @function_fc1c()
  %v1_d640 = trunc i32 %v0_d640 to i8
  store i32 %v0_d640, i32* %r0.global-to-local, align 4
  store i32 %v3_d2d8, i32* %r2.global-to-local, align 4
  %v4_d648 = sdiv i32 %v0_d640, 256
  store i32 %v4_d648, i32* %r3.global-to-local, align 4
  %v1_d64c = load i32, i32* @r4, align 4
  %v9_d64c = icmp eq i32 %v3_d2d8, %v1_d64c
  store i1 %v9_d64c, i1* %cpsr_z.global-to-local, align 1
  %v1_d650 = trunc i32 %v4_d648 to i8
  %v2_d650 = load i32, i32* @r5, align 4
  %v3_d650 = add i32 %v2_d650, 5
  %v4_d650 = inttoptr i32 %v3_d650 to i8*
  store i8 %v1_d650, i8* %v4_d650, align 1
  %v3_d654 = load i32, i32* @r5, align 4
  %v4_d654 = add i32 %v3_d654, 4
  %v5_d654 = inttoptr i32 %v4_d654 to i8*
  store i8 %v1_d640, i8* %v5_d654, align 1
  %v0_d658 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d658, label %dec_label_pc_d65c, label %dec_label_pc_d640.dec_label_pc_d4f0_crit_edge

dec_label_pc_d640.dec_label_pc_d4f0_crit_edge:    ; preds = %dec_label_pc_d640
  %v1_d4f4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4f0

dec_label_pc_d65c:                                ; preds = %dec_label_pc_d640, %dec_label_pc_d4e4
  %v0_d65c = call i32 @function_fc1c()
  %v1_d65c = trunc i32 %v0_d65c to i8
  store i32 %v0_d65c, i32* %r0.global-to-local, align 4
  %v4_d660 = sdiv i32 %v0_d65c, 256
  store i32 %v4_d660, i32* %r3.global-to-local, align 4
  %v3_d664 = load i32, i32* @r5, align 4
  %v4_d664 = add i32 %v3_d664, 20
  %v5_d664 = inttoptr i32 %v4_d664 to i8*
  store i8 %v1_d65c, i8* %v5_d664, align 1
  %v0_d668 = load i32, i32* %r3.global-to-local, align 4
  %v1_d668 = trunc i32 %v0_d668 to i8
  %v2_d668 = load i32, i32* @r6, align 4
  %v3_d668 = add i32 %v2_d668, 1
  %v4_d668 = inttoptr i32 %v3_d668 to i8*
  store i8 %v1_d668, i8* %v4_d668, align 1
  store i32 %v3_d2f8, i32* %r3.global-to-local, align 4
  %v1_d670 = load i32, i32* @r4, align 4
  %v9_d670 = icmp eq i32 %v3_d2f8, %v1_d670
  store i1 %v9_d670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d670, label %dec_label_pc_d678, label %dec_label_pc_d4fc

dec_label_pc_d678:                                ; preds = %dec_label_pc_d65c, %dec_label_pc_d4f0
  %v0_d678 = call i32 @function_fc1c()
  %v1_d678 = trunc i32 %v0_d678 to i8
  store i32 %v0_d678, i32* %r0.global-to-local, align 4
  store i32 %v1_d258, i32* %ip.global-to-local, align 4
  %v4_d680 = sdiv i32 %v0_d678, 256
  store i32 %v4_d680, i32* %r3.global-to-local, align 4
  store i1 %v2_d500, i1* %cpsr_z.global-to-local, align 1
  %v1_d688 = trunc i32 %v4_d680 to i8
  %v2_d688 = load i32, i32* @r6, align 4
  %v3_d688 = add i32 %v2_d688, 3
  %v4_d688 = inttoptr i32 %v3_d688 to i8*
  store i8 %v1_d688, i8* %v4_d688, align 1
  %v3_d68c = load i32, i32* @r6, align 4
  %v4_d68c = add i32 %v3_d68c, 2
  %v5_d68c = inttoptr i32 %v4_d68c to i8*
  store i8 %v1_d678, i8* %v5_d68c, align 1
  %v0_d690 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d690, label %dec_label_pc_d508, label %dec_label_pc_d694

dec_label_pc_d694:                                ; preds = %dec_label_pc_d4fc, %dec_label_pc_d678
  %v0_d694 = load i32, i32* @r5, align 4
  %v1_d694 = add i32 %v0_d694, 28
  store i32 %v1_d694, i32* %r0.global-to-local, align 4
  store i32 %v0_d2d0, i32* @r1, align 4
  %v1_d69c = inttoptr i32 %v1_d694 to i8*
  %v2_d69c = call i32 @function_fdf8(i8* %v1_d69c)
  store i32 %v2_d69c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d508

dec_label_pc_d6a4:                                ; preds = %dec_label_pc_d290
  store i32 %v3_d280, i32* %r0.global-to-local, align 4
  %v1_d6a8 = call i32 @function_134b0(i32 %v3_d280)
  store i32 %v1_d6a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d6ac

dec_label_pc_d6ac:                                ; preds = %dec_label_pc_d144, %dec_label_pc_d6a4
  %v29_d6b0 = phi i32 [ %v3_d280, %dec_label_pc_d144 ], [ %v1_d6a8, %dec_label_pc_d6a4 ]
  store i32 %v18_d144, i32* %sb.global-to-local, align 4
  store i32 %v24_d144, i32* %fp.global-to-local, align 4
  ret i32 %v29_d6b0

dec_label_pc_d6b4:                                ; preds = %dec_label_pc_d314
  %v3_d6b8 = sext i8 %v5_d378 to i32
  %v7_d6b8 = sext i8 %v5_d37c to i32
  %v3_d6bc = sdiv i32 %v3_d6b8, 256
  store i32 %v3_d6bc, i32* %r0.global-to-local, align 4
  %v3_d6c0 = sdiv i32 %v7_d6b8, 256
  store i32 %v3_d6c0, i32* %r1.global-to-local, align 4
  store i32 %v1_d350, i32* %r2.global-to-local, align 4
  store i32 %v1_d354, i32* %r3.global-to-local, align 4
  %v3_d6cc33 = udiv i32 %v1_d36c, 256
  store i32 %v3_d6cc33, i32* %ip.global-to-local, align 4
  %v5_d6e0 = trunc i32 %v3_d6cc33 to i8
  store i32 0, i32* @r6, align 4
  %v4_d738 = sext i8 %v5_d1d4 to i32
  %sext11 = mul i32 %v0_d2d4, 16777216
  %v4_d7a0 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v0_d2e4, 16777216
  %v4_d7b0 = sdiv i32 %sext12, 16777216
  %v1_d7b8 = trunc i32 %v4_d7b0 to i8
  br label %dec_label_pc_d6e8

dec_label_pc_d6e8:                                ; preds = %dec_label_pc_d6e8, %dec_label_pc_d6b4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_d6f4 = call i32 @function_140b4(i32 1510, i32 1)
  store i32 %v2_d6f4, i32* %r0.global-to-local, align 4
  store i32 %v2_d164, i32* %r1.global-to-local, align 4
  %v3_d6fc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d6fc, i32* %r2.global-to-local, align 4
  %v2_d700 = load i32, i32* @r6, align 4
  %v5_d700 = mul i32 %v2_d700, 4
  %v6_d700 = add i32 %v5_d700, %v2_d164
  %v7_d700 = inttoptr i32 %v6_d700 to i32*
  store i32 %v2_d6f4, i32* %v7_d700, align 4
  %v0_d704 = load i32, i32* %r1.global-to-local, align 4
  %v1_d704 = load i32, i32* %r2.global-to-local, align 4
  %v4_d704 = mul i32 %v1_d704, 4
  %v5_d704 = add i32 %v4_d704, %v0_d704
  %v6_d704 = inttoptr i32 %v5_d704 to i32*
  %v7_d704 = load i32, i32* %v6_d704, align 4
  store i32 %v7_d704, i32* %r1.global-to-local, align 4
  %v1_d708 = inttoptr i32 %v7_d704 to i8*
  %v2_d708 = load i8, i8* %v1_d708, align 1
  %tmp84 = urem i8 %v2_d708, 16
  %v1_d70c = zext i8 %tmp84 to i32
  %v1_d710 = or i32 %v1_d70c, 64
  store i32 %v1_d710, i32* %r3.global-to-local, align 4
  %v1_d714 = trunc i32 %v1_d710 to i8
  store i8 %v1_d714, i8* %v1_d708, align 1
  %v0_d718 = load i32, i32* %r1.global-to-local, align 4
  %v1_d718 = inttoptr i32 %v0_d718 to i8*
  %v2_d718 = load i8, i8* %v1_d718, align 1
  %v3_d718 = zext i8 %v2_d718 to i32
  %v1_d71c = and i32 %v3_d718, 240
  %v1_d720 = or i32 %v1_d71c, 5
  store i32 %v1_d720, i32* %r2.global-to-local, align 4
  %v3_d728 = add i32 %v0_d718, 9
  %v4_d728 = inttoptr i32 %v3_d728 to i8*
  store i8 17, i8* %v4_d728, align 1
  %v0_d72c = load i32, i32* %r2.global-to-local, align 4
  %v1_d72c = trunc i32 %v0_d72c to i8
  %v2_d72c = load i32, i32* %r1.global-to-local, align 4
  %v3_d72c = inttoptr i32 %v2_d72c to i8*
  store i8 %v1_d72c, i8* %v3_d72c, align 1
  %v2_d734 = load i32, i32* %r1.global-to-local, align 4
  %v3_d734 = add i32 %v2_d734, 1
  %v4_d734 = inttoptr i32 %v3_d734 to i8*
  store i8 %v5_d19c, i8* %v4_d734, align 1
  store i32 %v4_d738, i32* %r0.global-to-local, align 4
  %v2_d73c = load i32, i32* %r1.global-to-local, align 4
  %v3_d73c = add i32 %v2_d73c, 8
  %v4_d73c = inttoptr i32 %v3_d73c to i8*
  store i8 %v5_d1d4, i8* %v4_d73c, align 1
  %v3_d740 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d740, i32* %r2.global-to-local, align 4
  store i32 %v6_d26c, i32* %ip.global-to-local, align 4
  %v3_d748 = mul i32 %v3_d740, 32
  store i32 %v3_d748, i32* %r3.global-to-local, align 4
  %v1_d74c = load i32, i32* %r1.global-to-local, align 4
  %v2_d74c = add i32 %v1_d74c, 12
  %v3_d74c = inttoptr i32 %v2_d74c to i32*
  store i32 %v6_d26c, i32* %v3_d74c, align 4
  %v0_d750 = load i32, i32* %r3.global-to-local, align 4
  %v1_d750 = load i32, i32* %r2.global-to-local, align 4
  %tmp85 = mul i32 %v1_d750, -8
  %v5_d750 = add i32 %v0_d750, %tmp85
  %v1_d754 = load i32, i32* @r8, align 4
  %v2_d754 = add i32 %v5_d750, %v1_d754
  store i32 %v2_d754, i32* %r3.global-to-local, align 4
  %v1_d758 = add i32 %v2_d754, 16
  %v2_d758 = inttoptr i32 %v1_d758 to i32*
  %v3_d758 = load i32, i32* %v2_d758, align 4
  %v1_d75c = load i32, i32* %r1.global-to-local, align 4
  %v2_d75c = add i32 %v1_d75c, 16
  %v3_d75c = inttoptr i32 %v2_d75c to i32*
  store i32 %v3_d758, i32* %v3_d75c, align 4
  %v0_d764 = load i32, i32* %r2.global-to-local, align 4
  %v1_d764 = add i32 %v0_d764, 1
  store i32 %v1_d764, i32* @r6, align 4
  store i32 %v7_d6b8, i32* %ip.global-to-local, align 4
  store i32 %v3_d6bc, i32* %r2.global-to-local, align 4
  %v2_d770 = load i32, i32* %r1.global-to-local, align 4
  %v3_d770 = add i32 %v2_d770, 2
  %v4_d770 = inttoptr i32 %v3_d770 to i8*
  store i8 %v5_d378, i8* %v4_d770, align 1
  store i32 %v3_d6c0, i32* %r0.global-to-local, align 4
  %v0_d778 = load i32, i32* %r2.global-to-local, align 4
  %v1_d778 = trunc i32 %v0_d778 to i8
  %v2_d778 = load i32, i32* %r1.global-to-local, align 4
  %v3_d778 = add i32 %v2_d778, 3
  %v4_d778 = inttoptr i32 %v3_d778 to i8*
  store i8 %v1_d778, i8* %v4_d778, align 1
  %v0_d77c = load i32, i32* %ip.global-to-local, align 4
  %v1_d77c = trunc i32 %v0_d77c to i8
  %v2_d77c = load i32, i32* %r1.global-to-local, align 4
  %v3_d77c = add i32 %v2_d77c, 4
  %v4_d77c = inttoptr i32 %v3_d77c to i8*
  store i8 %v1_d77c, i8* %v4_d77c, align 1
  store i32 64, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_d788 = load i32, i32* %r1.global-to-local, align 4
  %v1_d788 = add i32 %v0_d788, 20
  store i32 %v1_d788, i32* %r3.global-to-local, align 4
  %v0_d78c = load i32, i32* %r0.global-to-local, align 4
  %v1_d78c = trunc i32 %v0_d78c to i8
  %v3_d78c = add i32 %v0_d788, 5
  %v4_d78c = inttoptr i32 %v3_d78c to i8*
  store i8 %v1_d78c, i8* %v4_d78c, align 1
  %v0_d790 = load i32, i32* %r2.global-to-local, align 4
  %v1_d790 = trunc i32 %v0_d790 to i8
  %v2_d790 = load i32, i32* %r1.global-to-local, align 4
  %v3_d790 = add i32 %v2_d790, 6
  %v4_d790 = inttoptr i32 %v3_d790 to i8*
  store i8 %v1_d790, i8* %v4_d790, align 1
  %v0_d794 = load i32, i32* %ip.global-to-local, align 4
  %v1_d794 = trunc i32 %v0_d794 to i8
  %v2_d794 = load i32, i32* %r1.global-to-local, align 4
  %v3_d794 = add i32 %v2_d794, 7
  %v4_d794 = inttoptr i32 %v3_d794 to i8*
  store i8 %v1_d794, i8* %v4_d794, align 1
  %v0_d798 = load i32, i32* @r4, align 4
  %v1_d798 = trunc i32 %v0_d798 to i8
  %v2_d798 = load i32, i32* %r1.global-to-local, align 4
  %v3_d798 = add i32 %v2_d798, 20
  %v4_d798 = inttoptr i32 %v3_d798 to i8*
  store i8 %v1_d798, i8* %v4_d798, align 1
  store i32 %v3_d6cc33, i32* %r0.global-to-local, align 4
  store i32 %v4_d7a0, i32* %r1.global-to-local, align 4
  %v2_d7a4 = load i32, i32* %r3.global-to-local, align 4
  %v3_d7a4 = add i32 %v2_d7a4, 5
  %v4_d7a4 = inttoptr i32 %v3_d7a4 to i8*
  store i8 %v5_d6e0, i8* %v4_d7a4, align 1
  %v0_d7a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_d7a8 = trunc i32 %v0_d7a8 to i8
  %v2_d7a8 = load i32, i32* %r3.global-to-local, align 4
  %v3_d7a8 = add i32 %v2_d7a8, 1
  %v4_d7a8 = inttoptr i32 %v3_d7a8 to i8*
  store i8 %v1_d7a8, i8* %v4_d7a8, align 1
  %v0_d7ac = load i32, i32* @r5, align 4
  %v1_d7ac = trunc i32 %v0_d7ac to i8
  %v2_d7ac = load i32, i32* %r3.global-to-local, align 4
  %v3_d7ac = add i32 %v2_d7ac, 2
  %v4_d7ac = inttoptr i32 %v3_d7ac to i8*
  store i8 %v1_d7ac, i8* %v4_d7ac, align 1
  store i32 %v4_d7b0, i32* %r2.global-to-local, align 4
  %v0_d7b4 = load i32, i32* @r6, align 4
  %v1_d7b4 = load i32, i32* @sl, align 4
  %v9_d7b4 = icmp eq i32 %v0_d7b4, %v1_d7b4
  store i1 %v9_d7b4, i1* %cpsr_z.global-to-local, align 1
  %v2_d7b8 = load i32, i32* %r3.global-to-local, align 4
  %v3_d7b8 = add i32 %v2_d7b8, 3
  %v4_d7b8 = inttoptr i32 %v3_d7b8 to i8*
  store i8 %v1_d7b8, i8* %v4_d7b8, align 1
  %v0_d7bc = load i32, i32* @r7, align 4
  %v1_d7bc = trunc i32 %v0_d7bc to i8
  %v2_d7bc = load i32, i32* %r3.global-to-local, align 4
  %v3_d7bc = add i32 %v2_d7bc, 4
  %v4_d7bc = inttoptr i32 %v3_d7bc to i8*
  store i8 %v1_d7bc, i8* %v4_d7bc, align 1
  %v0_d7c0 = load i32, i32* @r6, align 4
  store i32 %v0_d7c0, i32* %stack_var_-40, align 4
  %v5_d7c4 = icmp slt i32 %v0_d7b4, %v1_d7b4
  br i1 %v5_d7c4, label %dec_label_pc_d6e8, label %dec_label_pc_d488

; uselistorder directives
  uselistorder i32 %v3_d6cc33, { 2, 0, 1 }
  uselistorder i32 %v3_d6c0, { 1, 0 }
  uselistorder i32 %v3_d6bc, { 1, 0 }
  uselistorder i32 %v7_d6b8, { 1, 0 }
  uselistorder i32 %v4_d680, { 1, 0 }
  uselistorder i32 %v0_d678, { 0, 2, 1 }
  uselistorder i32 %v0_d65c, { 0, 2, 1 }
  uselistorder i32 %v4_d648, { 1, 0 }
  uselistorder i32 %v0_d640, { 0, 2, 1 }
  uselistorder i32 %v2_d614, { 1, 0 }
  uselistorder i32 %v8_d5f4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_d5e0, { 1, 0 }
  uselistorder i32 %v3_d5bc, { 1, 3, 2, 0 }
  uselistorder i1 %v2_d5b0, { 1, 0 }
  uselistorder i32 %v1_d5a4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_d5a0, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_d548, { 0, 2, 1 }
  uselistorder i32 %v0_d530, { 1, 0, 2, 3 }
  uselistorder i32 %v4_d51c, { 1, 0 }
  uselistorder i32 %v2_d518, { 0, 2, 1 }
  uselistorder i1 %v7_d4c8, { 2, 1, 0 }
  uselistorder i1 %v3_d634, { 1, 0, 2, 3 }
  uselistorder i8 %v5_d378, { 0, 2, 1 }
  uselistorder i32 %v3_d364, { 1, 0 }
  uselistorder i32 %v1_d354, { 2, 3, 0, 1 }
  uselistorder i32 %v1_d350, { 1, 2, 0 }
  uselistorder i32 %v1_d348, { 0, 2, 1, 3 }
  uselistorder i32 %v1_d340, { 1, 0 }
  uselistorder i32 %v1_d318, { 2, 1, 0, 3 }
  uselistorder i32 %v3_d2f8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_d2f4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_d2e0, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v3_d2d8, { 5, 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_d2d0, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_d2c4, { 3, 1, 2, 0 }
  uselistorder i1 %v7_d2b0, { 1, 0 }
  uselistorder i1 %v7_d284, { 1, 0 }
  uselistorder i32 %v3_d280, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_d26c, { 2, 1, 7, 5, 0, 6, 4, 3 }
  uselistorder i32 %v1_d258, { 3, 1, 2, 0 }
  uselistorder i32 %v1_d1e4, { 1, 0 }
  uselistorder i8 %v5_d1d4, { 1, 0, 2 }
  uselistorder i32 %v5_d1b8, { 1, 0 }
  uselistorder i8 %v5_d19c, { 0, 2, 1 }
  uselistorder i32 %v6_d17c, { 1, 0 }
  uselistorder i32 %v2_d164, { 0, 3, 1, 5, 2, 4 }
  uselistorder i32 %v1_d148, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 51, 53, 52, 55, 54, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 7, 5, 6, 9, 8, 11, 10, 12, 13, 14, 16, 15, 18, 17, 19, 21, 20, 27, 22, 23, 24, 25, 26, 32, 28, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_d6ac, { 1, 0 }
  uselistorder label %dec_label_pc_d694, { 1, 0 }
  uselistorder label %dec_label_pc_d508, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d490, { 1, 0 }
  uselistorder label %bb73, { 1, 0 }
  uselistorder label %bb70, { 1, 0 }
}

define i32 @function_d7d0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d7d0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_d7d0 = load i32, i32* @r4, align 4
  %v12_d7d0 = load i32, i32* @r7, align 4
  %v1_d7d4 = urem i32 %arg1, 256
  store i32 %v1_d7d4, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_d7e8 = urem i32 %arg3, 256
  store i32 %v1_d7e8, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_d7f0 = call i32 @function_140b4(i32 %v1_d7d4, i32 4)
  %v0_d7f4 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_d800 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_d808 = inttoptr i32 %v0_d7f4 to i32*
  %v6_d808 = call i32 @function_a4e8(i32 %v0_d800, i32* %v5_d808, i32 2, i32 0)
  %v1_d814 = urem i32 %v6_d808, 256
  store i32 %v1_d814, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d820 = load i32, i32* @r4, align 4
  %v0_d824 = load i32, i32* @r5, align 4
  %v5_d828 = trunc i32 %v6_d808 to i8
  %v6_d82c = inttoptr i32 %v0_d824 to i32*
  %v7_d82c = call i32 @function_a4e8(i32 %v0_d820, i32* %v6_d82c, i32 3, i32 65535)
  %v0_d830 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_d82c, i32* @r7, align 4
  %v0_d840 = load i32, i32* @r4, align 4
  %v4_d844 = inttoptr i32 %v0_d830 to i32*
  %v5_d844 = call i32 @function_a4e8(i32 %v0_d840, i32* %v4_d844, i32 4, i32 64)
  %v1_d84c = urem i32 %v5_d844, 256
  store i32 %v1_d84c, i32* %ip.global-to-local, align 4
  %v0_d850 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d85c = load i32, i32* @r4, align 4
  %v5_d860 = trunc i32 %v5_d844 to i8
  %v6_d864 = inttoptr i32 %v0_d850 to i32*
  %v7_d864 = call i32 @function_a4e8(i32 %v0_d85c, i32* %v6_d864, i32 5, i32 0)
  %v1_d870 = urem i32 %v7_d864, 256
  store i32 %v1_d870, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d87c = load i32, i32* @r4, align 4
  %v0_d880 = load i32, i32* @r5, align 4
  %v5_d888 = inttoptr i32 %v0_d880 to i32*
  %v6_d888 = call i32 @function_a4e8(i32 %v0_d87c, i32* %v5_d888, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_d898 = load i32, i32* @r5, align 4
  store i32 %v6_d888, i32* @r6, align 4
  %v0_d8a0 = load i32, i32* @r4, align 4
  %v4_d8a4 = inttoptr i32 %v0_d898 to i32*
  %v5_d8a4 = call i32 @function_a4e8(i32 %v0_d8a0, i32* %v4_d8a4, i32 7, i32 27015)
  store i32 %v5_d8a4, i32* @r4, align 4
  %v1_d8b0 = call i32 @function_121c4(i32 29)
  %v3_d8bc = call i32 @function_120e0(i32 29, i32* nonnull %stack_var_-44)
  store i32 %v3_d8bc, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_d8d0 = call i32 @function_13db0(i32 2, i32 3, i32 17)
  %v7_d8d4 = icmp eq i32 %v3_d8d0, -1
  store i1 %v7_d8d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d8d0, i32* %fp.global-to-local, align 4
  br i1 %v7_d8d4, label %dec_label_pc_dc88, label %dec_label_pc_d8e0

dec_label_pc_d8e0:                                ; preds = %dec_label_pc_d7d0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d8e8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d8e8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d8fc = call i32 @function_13d80(i32 %v3_d8d0, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_d900 = icmp eq i32 %v6_d8fc, -1
  store i1 %v7_d900, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_d900, label %dec_label_pc_dc80, label %dec_label_pc_d908

dec_label_pc_d908:                                ; preds = %dec_label_pc_d8e0
  %v0_d908 = load i32, i32* @r4, align 4
  %v3_d908 = mul i32 %v0_d908, 65536
  store i32 %v3_d908, i32* @lr, align 4
  %v0_d90c = load i32, i32* @r7, align 4
  %v0_d910 = load i32, i32* @r6, align 4
  %v3_d910 = mul i32 %v0_d910, 65536
  store i32 %v3_d910, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_d918 = urem i32 %v0_d90c, 65536
  %v3_d91c = urem i32 %v0_d910, 65536
  store i32 %v3_d91c, i32* %r2.global-to-local, align 4
  %v3_d920 = urem i32 %v0_d908, 65536
  store i32 %v3_d920, i32* %r3.global-to-local, align 4
  %v0_d924 = load i32, i32* %sb.global-to-local, align 4
  %v2_d924 = icmp eq i32 %v0_d924, 0
  store i1 %v2_d924, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp50 = icmp slt i32 %v0_d924, 1
  br i1 %tmp50, label %dec_label_pc_daa8, label %dec_label_pc_d93c

dec_label_pc_d93c:                                ; preds = %dec_label_pc_d908
  %v1_d940 = urem i32 %v0_d908, 256
  %v1_d944 = urem i32 %v0_d90c, 256
  %v3_d948 = mul nuw nsw i32 %v1_d940, 256
  %v1_d94c = urem i32 %v0_d910, 256
  %tmp51 = udiv i32 %v0_d90c, 256
  %v3_d950 = urem i32 %tmp51, 256
  %tmp52 = udiv i32 %v0_d910, 256
  %v3_d954 = urem i32 %tmp52, 256
  store i32 %v3_d954, i32* %ip.global-to-local, align 4
  %v4_d958 = mul nuw nsw i32 %v1_d944, 256
  %v5_d958 = or i32 %v4_d958, %v3_d950
  store i32 %v5_d958, i32* @r7, align 4
  %v4_d95c = mul nuw nsw i32 %v1_d94c, 256
  %v5_d95c = or i32 %v4_d95c, %v3_d954
  store i32 %v5_d95c, i32* @r6, align 4
  %tmp53 = udiv i32 %v0_d908, 256
  %v4_d960 = urem i32 %tmp53, 256
  %v5_d960 = or i32 %v4_d960, %v3_d948
  store i32 %v5_d960, i32* @r5, align 4
  store i32 %v1_d94c, i32* %r2.global-to-local, align 4
  store i32 %v1_d940, i32* %r3.global-to-local, align 4
  %v2_d9dc = icmp eq i32 %v1_d870, 0
  %v4_d9e0 = sext i8 %v5_d860 to i32
  %sext = mul i32 %v0_d90c, 16777216
  %v4_d9fc = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v0_d910, 16777216
  %v4_da58 = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_d908, 16777216
  %v4_da78 = sdiv i32 %sext7, 16777216
  br label %dec_label_pc_d97c

dec_label_pc_d97c:                                ; preds = %bb57, %dec_label_pc_d93c
  %v2_d984 = call i32 @function_140b4(i32 128, i32 1)
  store i32 %v2_d7f0, i32* %r2.global-to-local, align 4
  %v3_d98c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d98c, i32* %r3.global-to-local, align 4
  %v2_d990 = load i32, i32* @r4, align 4
  %v5_d990 = mul i32 %v2_d990, 4
  %v6_d990 = add i32 %v5_d990, %v2_d7f0
  %v7_d990 = inttoptr i32 %v6_d990 to i32*
  store i32 %v2_d984, i32* %v7_d990, align 4
  %v0_d994 = load i32, i32* %r2.global-to-local, align 4
  %v1_d994 = load i32, i32* %r3.global-to-local, align 4
  %v4_d994 = mul i32 %v1_d994, 4
  %v5_d994 = add i32 %v4_d994, %v0_d994
  %v6_d994 = inttoptr i32 %v5_d994 to i32*
  %v7_d994 = load i32, i32* %v6_d994, align 4
  store i32 %v7_d994, i32* @lr, align 4
  %v1_d998 = inttoptr i32 %v7_d994 to i8*
  %v2_d998 = load i8, i8* %v1_d998, align 1
  %tmp = urem i8 %v2_d998, 16
  %v1_d99c = zext i8 %tmp to i32
  %v1_d9a0 = or i32 %v1_d99c, 64
  store i32 %v1_d9a0, i32* %r3.global-to-local, align 4
  %v1_d9a4 = trunc i32 %v1_d9a0 to i8
  store i8 %v1_d9a4, i8* %v1_d998, align 1
  %v0_d9a8 = load i32, i32* @lr, align 4
  %v1_d9a8 = inttoptr i32 %v0_d9a8 to i8*
  %v2_d9a8 = load i8, i8* %v1_d9a8, align 1
  %v1_d9ac = and i8 %v2_d9a8, -16
  %v1_d9b0 = or i8 %v1_d9ac, 5
  store i8 %v1_d9b0, i8* %v1_d9a8, align 1
  %v2_d9bc = load i32, i32* @lr, align 4
  %v3_d9bc = add i32 %v2_d9bc, 1
  %v4_d9bc = inttoptr i32 %v3_d9bc to i8*
  store i8 %v5_d828, i8* %v4_d9bc, align 1
  %v3_d9c0 = load i32, i32* %stack_var_-44, align 4
  %v1_d9c4 = add i32 %v3_d9c0, 32
  %tmp54 = mul i32 %v1_d9c4, 256
  %v1_d9d0 = and i32 %tmp54, 65280
  %tmp55 = udiv i32 %v1_d9c4, 256
  %v4_d9d4 = urem i32 %tmp55, 256
  %v5_d9d4 = or i32 %v4_d9d4, %v1_d9d0
  store i32 %v5_d9d4, i32* %r2.global-to-local, align 4
  store i1 %v2_d9dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_d9e0, i32* %r3.global-to-local, align 4
  %v2_d9e4 = load i32, i32* @lr, align 4
  %v3_d9e4 = add i32 %v2_d9e4, 8
  %v4_d9e4 = inttoptr i32 %v3_d9e4 to i8*
  store i8 %v5_d860, i8* %v4_d9e4, align 1
  %v0_d9e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d9e8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d97c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d9ec = load i32, i32* @lr, align 4
  %v4_d9ec = add i32 %v3_d9ec, 6
  %v5_d9ec = inttoptr i32 %v4_d9ec to i8*
  store i8 64, i8* %v5_d9ec, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d97c, %bb
  %v0_d9f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_d9f0 = trunc i32 %v0_d9f0 to i8
  %v2_d9f0 = load i32, i32* @lr, align 4
  %v3_d9f0 = add i32 %v2_d9f0, 2
  %v4_d9f0 = inttoptr i32 %v3_d9f0 to i8*
  store i8 %v1_d9f0, i8* %v4_d9f0, align 1
  %v0_d9f4 = load i32, i32* %r2.global-to-local, align 4
  %v3_d9f4 = sdiv i32 %v0_d9f4, 256
  store i32 %v3_d9f4, i32* %ip.global-to-local, align 4
  store i32 %v4_d9fc, i32* %r2.global-to-local, align 4
  %v2_da00 = load i32, i32* @lr, align 4
  %v3_da00 = add i32 %v2_da00, 9
  %v4_da00 = inttoptr i32 %v3_da00 to i8*
  store i8 17, i8* %v4_da00, align 1
  store i32 ptrtoint (i32* @global_var_1eafc.85 to i32), i32* %r3.global-to-local, align 4
  %v0_da08 = load i32, i32* %r2.global-to-local, align 4
  %v1_da08 = trunc i32 %v0_da08 to i8
  %v2_da08 = load i32, i32* @lr, align 4
  %v3_da08 = add i32 %v2_da08, 5
  %v4_da08 = inttoptr i32 %v3_da08 to i8*
  store i8 %v1_da08, i8* %v4_da08, align 1
  %v0_da0c = load i32, i32* %ip.global-to-local, align 4
  %v1_da0c = trunc i32 %v0_da0c to i8
  %v2_da0c = load i32, i32* @lr, align 4
  %v3_da0c = add i32 %v2_da0c, 3
  %v4_da0c = inttoptr i32 %v3_da0c to i8*
  store i8 %v1_da0c, i8* %v4_da0c, align 1
  %v0_da10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da10, label %.thread8, label %bb56

.thread8:                                         ; preds = %.thread
  %v3_da149 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da149, i32* %ip.global-to-local, align 4
  br label %bb57

bb56:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_da14 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da14, i32* %ip.global-to-local, align 4
  %v3_da18 = load i32, i32* @lr, align 4
  %v4_da18 = add i32 %v3_da18, 7
  %v5_da18 = inttoptr i32 %v4_da18 to i8*
  store i8 0, i8* %v5_da18, align 1
  %v0_da20.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %bb56
  %v0_da20 = phi i32 [ %v3_da149, %.thread8 ], [ %v0_da20.pre, %bb56 ]
  %v2_da1c = load i32, i32* @global_var_1eafc.85, align 4
  store i32 %v2_da1c, i32* %r2.global-to-local, align 4
  %v3_da20 = mul i32 %v0_da20, 32
  store i32 %v3_da20, i32* %r3.global-to-local, align 4
  %v1_da24 = load i32, i32* @lr, align 4
  %v2_da24 = add i32 %v1_da24, 12
  %v3_da24 = inttoptr i32 %v2_da24 to i32*
  store i32 %v2_da1c, i32* %v3_da24, align 4
  %v0_da28 = load i32, i32* %r3.global-to-local, align 4
  %v1_da28 = load i32, i32* %ip.global-to-local, align 4
  %tmp60 = mul i32 %v1_da28, -8
  %v5_da28 = add i32 %v0_da28, %tmp60
  %v1_da2c = load i32, i32* @sl, align 4
  %v2_da2c = add i32 %v5_da28, %v1_da2c
  store i32 %v2_da2c, i32* %r3.global-to-local, align 4
  %v1_da30 = add i32 %v2_da2c, 16
  %v2_da30 = inttoptr i32 %v1_da30 to i32*
  %v3_da30 = load i32, i32* %v2_da30, align 4
  %v1_da34 = load i32, i32* @lr, align 4
  %v2_da34 = add i32 %v1_da34, 16
  %v3_da34 = inttoptr i32 %v2_da34 to i32*
  store i32 %v3_da30, i32* %v3_da34, align 4
  %v3_da38 = load i32, i32* %stack_var_-44, align 4
  %v1_da3c = add i32 %v3_da38, 12
  %tmp58 = mul i32 %v1_da3c, 256
  %v1_da4c = and i32 %tmp58, 65280
  %tmp59 = udiv i32 %v1_da3c, 256
  %v4_da50 = urem i32 %tmp59, 256
  %v5_da50 = or i32 %v4_da50, %v1_da4c
  store i32 %v5_da50, i32* %ip.global-to-local, align 4
  %v1_da54 = load i32, i32* @lr, align 4
  %v2_da54 = add i32 %v1_da54, 28
  %v3_da54 = inttoptr i32 %v2_da54 to i32*
  store i32 -1, i32* %v3_da54, align 4
  store i32 %v4_da58, i32* %r2.global-to-local, align 4
  %v0_da5c = load i32, i32* @lr, align 4
  %v1_da5c = add i32 %v0_da5c, 20
  store i32 %v1_da5c, i32* %r4.global-to-local, align 4
  %v0_da60 = load i32, i32* %ip.global-to-local, align 4
  %v3_da60 = sdiv i32 %v0_da60, 256
  store i32 %v3_da60, i32* %r3.global-to-local, align 4
  %v0_da64 = load i32, i32* @r7, align 4
  %v1_da64 = trunc i32 %v0_da64 to i8
  %v3_da64 = add i32 %v0_da5c, 4
  %v4_da64 = inttoptr i32 %v3_da64 to i8*
  store i8 %v1_da64, i8* %v4_da64, align 1
  %v0_da68 = load i32, i32* @r6, align 4
  %v1_da68 = trunc i32 %v0_da68 to i8
  %v2_da68 = load i32, i32* @lr, align 4
  %v3_da68 = add i32 %v2_da68, 20
  %v4_da68 = inttoptr i32 %v3_da68 to i8*
  store i8 %v1_da68, i8* %v4_da68, align 1
  %v0_da6c = load i32, i32* %r3.global-to-local, align 4
  %v1_da6c = trunc i32 %v0_da6c to i8
  %v2_da6c = load i32, i32* %r4.global-to-local, align 4
  %v3_da6c = add i32 %v2_da6c, 5
  %v4_da6c = inttoptr i32 %v3_da6c to i8*
  store i8 %v1_da6c, i8* %v4_da6c, align 1
  %v0_da70 = load i32, i32* @r5, align 4
  %v1_da70 = trunc i32 %v0_da70 to i8
  %v2_da70 = load i32, i32* %r4.global-to-local, align 4
  %v3_da70 = add i32 %v2_da70, 2
  %v4_da70 = inttoptr i32 %v3_da70 to i8*
  store i8 %v1_da70, i8* %v4_da70, align 1
  %v0_da74 = load i32, i32* %r2.global-to-local, align 4
  %v1_da74 = trunc i32 %v0_da74 to i8
  %v2_da74 = load i32, i32* %r4.global-to-local, align 4
  %v3_da74 = add i32 %v2_da74, 1
  %v4_da74 = inttoptr i32 %v3_da74 to i8*
  store i8 %v1_da74, i8* %v4_da74, align 1
  store i32 %v4_da78, i32* %r3.global-to-local, align 4
  %v0_da7c = load i32, i32* %ip.global-to-local, align 4
  %v1_da7c = trunc i32 %v0_da7c to i8
  %v2_da7c = load i32, i32* %r4.global-to-local, align 4
  %v3_da7c = add i32 %v2_da7c, 4
  %v4_da7c = inttoptr i32 %v3_da7c to i8*
  store i8 %v1_da7c, i8* %v4_da7c, align 1
  %v0_da80 = load i32, i32* %r3.global-to-local, align 4
  %v1_da80 = trunc i32 %v0_da80 to i8
  %v2_da80 = load i32, i32* %r4.global-to-local, align 4
  %v3_da80 = add i32 %v2_da80, 3
  %v4_da80 = inttoptr i32 %v3_da80 to i8*
  store i8 %v1_da80, i8* %v4_da80, align 1
  %v0_da84 = load i32, i32* %r8.global-to-local, align 4
  %v0_da88 = load i32, i32* @lr, align 4
  %v1_da88 = add i32 %v0_da88, 32
  %v3_da8c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_da8c, i32* %r2.global-to-local, align 4
  %v3_da90 = call i32 @function_12b6c(i32 %v1_da88, i32 %v0_da84, i32 %v3_da8c)
  %v3_da94 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da94, i32* %r3.global-to-local, align 4
  %v1_da98 = add i32 %v3_da94, 1
  store i32 %v1_da98, i32* @r4, align 4
  %v1_da9c = load i32, i32* %sb.global-to-local, align 4
  %v9_da9c = icmp eq i32 %v1_da98, %v1_da9c
  store i1 %v9_da9c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_da98, i32* %stack_var_-40, align 4
  %v5_daa4 = icmp slt i32 %v1_da98, %v1_da9c
  br i1 %v5_daa4, label %dec_label_pc_d97c, label %dec_label_pc_daa8

dec_label_pc_daa8:                                ; preds = %bb57, %dec_label_pc_d908
  %v0_daa8 = phi i32 [ %v0_d924, %dec_label_pc_d908 ], [ %v1_da9c, %bb57 ]
  %v2_daa8 = icmp eq i32 %v0_daa8, 0
  store i1 %v2_daa8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_daf0 = icmp eq i32 %v3_d918, 65535
  br label %dec_label_pc_dab0.outer

dec_label_pc_dab0.outer:                          ; preds = %dec_label_pc_dbc0, %dec_label_pc_daa8
  %v1_dab0.ph.in = phi i32 [ %v1_dbb4, %dec_label_pc_dbc0 ], [ %v0_daa8, %dec_label_pc_daa8 ]
  %v0_dab0.ph = phi i1 [ %v2_dbc0, %dec_label_pc_dbc0 ], [ %v2_daa8, %dec_label_pc_daa8 ]
  %v1_dab0.ph = icmp slt i32 %v1_dab0.ph.in, 0
  %v4_dab0 = or i1 %v1_dab0.ph, %v0_dab0.ph
  br label %dec_label_pc_dab0

dec_label_pc_dab0:                                ; preds = %dec_label_pc_dab0.outer, %dec_label_pc_dab0
  br i1 %v4_dab0, label %dec_label_pc_dab0, label %dec_label_pc_dab4

dec_label_pc_dab4:                                ; preds = %dec_label_pc_dab0
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_dac0

dec_label_pc_dac0:                                ; preds = %dec_label_pc_db10, %dec_label_pc_dab4
  %v1_dad4 = phi i32 [ %v1_dbb0, %dec_label_pc_db10 ], [ 0, %dec_label_pc_dab4 ]
  %v5_dac4 = mul i32 %v1_dad4, 24
  %v1_dac8 = load i32, i32* @sl, align 4
  %v2_dac8 = add i32 %v1_dac8, %v5_dac4
  store i32 %v2_dac8, i32* %r3.global-to-local, align 4
  %v1_dad0 = add i32 %v2_dac8, 20
  %v2_dad0 = inttoptr i32 %v1_dad0 to i8*
  %v3_dad0 = load i8, i8* %v2_dad0, align 1
  %v4_dad0 = zext i8 %v3_dad0 to i32
  store i32 %v4_dad0, i32* %r2.global-to-local, align 4
  %v4_dad4 = mul i32 %v1_dad4, 4
  %v5_dad4 = add i32 %v4_dad4, %v2_d7f0
  %v6_dad4 = inttoptr i32 %v5_dad4 to i32*
  %v7_dad4 = load i32, i32* %v6_dad4, align 4
  store i32 %v7_dad4, i32* @r5, align 4
  %v7_dadc = icmp eq i8 %v3_dad0, 31
  store i1 %v7_dadc, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_dae4 = add i32 %v7_dad4, 20
  store i32 %v1_dae4, i32* @r6, align 4
  %tmp61 = icmp ult i8 %v3_dad0, 32
  br i1 %tmp61, label %dec_label_pc_dbcc, label %dec_label_pc_daec

dec_label_pc_daec:                                ; preds = %dec_label_pc_dac0
  store i32 %v3_d918, i32* %r2.global-to-local, align 4
  store i1 %v3_daf0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_daf0, label %dec_label_pc_dc34, label %dec_label_pc_daf8

dec_label_pc_daf8:                                ; preds = %dec_label_pc_dbcc.dec_label_pc_daf8_crit_edge, %dec_label_pc_daec
  %v1_dafc = phi i32 [ %v1_dafc.pre, %dec_label_pc_dbcc.dec_label_pc_daf8_crit_edge ], [ 65535, %dec_label_pc_daec ]
  store i32 %v3_d91c, i32* %r3.global-to-local, align 4
  %v9_dafc = icmp eq i32 %v3_d91c, %v1_dafc
  store i1 %v9_dafc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dafc, label %dec_label_pc_dc50, label %dec_label_pc_db04

dec_label_pc_db04:                                ; preds = %dec_label_pc_dc34.dec_label_pc_db04_crit_edge, %dec_label_pc_daf8
  %v1_db08 = phi i32 [ %v1_db08.pre, %dec_label_pc_dc34.dec_label_pc_db04_crit_edge ], [ %v1_dafc, %dec_label_pc_daf8 ]
  %v9_db08 = icmp eq i32 %v3_d920, %v1_db08
  store i1 %v9_db08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_db08, label %dec_label_pc_dc6c, label %dec_label_pc_db10

dec_label_pc_db10:                                ; preds = %dec_label_pc_dc50, %dec_label_pc_db04, %dec_label_pc_dc6c
  %v0_db14 = load i32, i32* %r8.global-to-local, align 4
  %v1_db14 = trunc i32 %v0_db14 to i8
  %v2_db14 = load i32, i32* @r5, align 4
  %v3_db14 = add i32 %v2_db14, 10
  %v4_db14 = inttoptr i32 %v3_db14 to i8*
  store i8 %v1_db14, i8* %v4_db14, align 1
  %v0_db18 = load i32, i32* %r8.global-to-local, align 4
  %v1_db18 = trunc i32 %v0_db18 to i8
  %v2_db18 = load i32, i32* @r5, align 4
  %v3_db18 = add i32 %v2_db18, 11
  %v4_db18 = inttoptr i32 %v3_db18 to i8*
  store i8 %v1_db18, i8* %v4_db18, align 1
  %v0_db1c = load i32, i32* @r5, align 4
  store i32 %v0_db1c, i32* @r0, align 4
  %v2_db20 = call i32 @function_e444(i32 %v0_db1c, i32 20)
  %v3_db20 = trunc i32 %v2_db20 to i8
  %v4_db24 = sdiv i32 %v2_db20, 256
  store i32 %v4_db24, i32* %r3.global-to-local, align 4
  %v1_db28 = trunc i32 %v4_db24 to i8
  %v2_db28 = load i32, i32* @r5, align 4
  %v3_db28 = add i32 %v2_db28, 11
  %v4_db28 = inttoptr i32 %v3_db28 to i8*
  store i8 %v1_db28, i8* %v4_db28, align 1
  %v3_db2c = load i32, i32* @r5, align 4
  %v4_db2c = add i32 %v3_db2c, 10
  %v5_db2c = inttoptr i32 %v4_db2c to i8*
  store i8 %v3_db20, i8* %v5_db2c, align 1
  %v0_db30 = load i32, i32* %r8.global-to-local, align 4
  %v1_db30 = trunc i32 %v0_db30 to i8
  %v2_db30 = load i32, i32* @r6, align 4
  %v3_db30 = add i32 %v2_db30, 6
  %v4_db30 = inttoptr i32 %v3_db30 to i8*
  store i8 %v1_db30, i8* %v4_db30, align 1
  %v0_db34 = load i32, i32* %r8.global-to-local, align 4
  %v1_db34 = trunc i32 %v0_db34 to i8
  %v2_db34 = load i32, i32* @r6, align 4
  %v3_db34 = add i32 %v2_db34, 7
  %v4_db34 = inttoptr i32 %v3_db34 to i8*
  store i8 %v1_db34, i8* %v4_db34, align 1
  %v0_db38 = load i32, i32* @r5, align 4
  %v1_db38 = add i32 %v0_db38, 24
  %v2_db38 = inttoptr i32 %v1_db38 to i8*
  %v3_db38 = load i8, i8* %v2_db38, align 1
  %v4_db38 = zext i8 %v3_db38 to i32
  store i32 %v4_db38, i32* %r3.global-to-local, align 4
  %v1_db3c = add i32 %v0_db38, 25
  %v2_db3c = inttoptr i32 %v1_db3c to i8*
  %v3_db3c = load i8, i8* %v2_db3c, align 1
  %v4_db3c = zext i8 %v3_db3c to i32
  %v4_db40 = mul nuw nsw i32 %v4_db3c, 256
  %v5_db40 = or i32 %v4_db40, %v4_db38
  store i32 %v5_db40, i32* %r2.global-to-local, align 4
  %v3_db44 = load i32, i32* %stack_var_-44, align 4
  %v0_db48 = load i32, i32* @r6, align 4
  store i32 %v0_db48, i32* @r1, align 4
  %v1_db4c = add i32 %v3_db44, 12
  store i32 %v1_db4c, i32* %r3.global-to-local, align 4
  %v4_db54 = call i32 @function_e4a0(i32 %v0_db38, i32 %v0_db48, i32 %v5_db40, i32 %v1_db4c)
  %v5_db54 = trunc i32 %v4_db54 to i8
  %v4_db5824 = udiv i32 %v4_db54, 256
  %v1_db5c = trunc i32 %v4_db5824 to i8
  %v2_db5c = load i32, i32* @r6, align 4
  %v3_db5c = add i32 %v2_db5c, 7
  %v4_db5c = inttoptr i32 %v3_db5c to i8*
  store i8 %v1_db5c, i8* %v4_db5c, align 1
  %v3_db60 = load i32, i32* @r6, align 4
  %v4_db60 = add i32 %v3_db60, 6
  %v5_db60 = inttoptr i32 %v4_db60 to i8*
  store i8 %v5_db54, i8* %v5_db60, align 1
  %v3_db64 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_db64, i32* %r3.global-to-local, align 4
  %v0_db68 = load i32, i32* @r5, align 4
  %v1_db68 = add i32 %v0_db68, 20
  %v2_db68 = inttoptr i32 %v1_db68 to i32*
  %v3_db68 = load i32, i32* %v2_db68, align 4
  %v5_db70 = mul i32 %v3_db64, 24
  %v1_db74 = load i32, i32* @sl, align 4
  %v2_db74 = add i32 %v1_db74, %v5_db70
  store i32 %v2_db74, i32* %ip.global-to-local, align 4
  %v3_db78 = udiv i32 %v3_db68, 65536
  store i32 %v3_db78, i32* %r2.global-to-local, align 4
  %v1_db7c = trunc i32 %v3_db78 to i8
  %v3_db7c = add i32 %v2_db74, 2
  %v4_db7c = inttoptr i32 %v3_db7c to i8*
  store i8 %v1_db7c, i8* %v4_db7c, align 1
  %v0_db80 = load i32, i32* %r2.global-to-local, align 4
  %v3_db8025 = udiv i32 %v0_db80, 256
  %v3_db84 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_db84, i32* %r2.global-to-local, align 4
  %v1_db88 = trunc i32 %v3_db8025 to i8
  %v2_db88 = load i32, i32* %ip.global-to-local, align 4
  %v3_db88 = add i32 %v2_db88, 3
  %v4_db88 = inttoptr i32 %v3_db88 to i8*
  store i8 %v1_db88, i8* %v4_db88, align 1
  %v0_db8c = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_db94 = load i32, i32* %r2.global-to-local, align 4
  %v1_db94 = add i32 %v0_db94, 32
  store i32 %v1_db94, i32* %r2.global-to-local, align 4
  %v0_db98 = load i32, i32* %fp.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_dba0 = load i32, i32* %ip.global-to-local, align 4
  %v6_dba8 = inttoptr i32 %v0_db8c to i32*
  %v7_dba8 = call i32 @function_13d4c(i32 %v0_db98, i32* %v6_dba8, i32 %v1_db94, i32 16384, i32 %v0_dba0, i32 16)
  %v3_dbac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dbac, i32* %r3.global-to-local, align 4
  %v1_dbb0 = add i32 %v3_dbac, 1
  %v1_dbb4 = load i32, i32* %sb.global-to-local, align 4
  %v9_dbb4 = icmp eq i32 %v1_dbb0, %v1_dbb4
  store i1 %v9_dbb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dbb0, i32* %stack_var_-40, align 4
  %v5_dbbc = icmp slt i32 %v1_dbb0, %v1_dbb4
  br i1 %v5_dbbc, label %dec_label_pc_dac0, label %dec_label_pc_dbc0

dec_label_pc_dbc0:                                ; preds = %dec_label_pc_db10
  %v2_dbc0 = icmp eq i32 %v1_dbb4, 0
  store i1 %v2_dbc0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_dab0.outer

dec_label_pc_dbcc:                                ; preds = %dec_label_pc_dac0
  %v1_dbcc = add i32 %v2_dac8, 16
  %v2_dbcc = inttoptr i32 %v1_dbcc to i32*
  %v3_dbcc = load i32, i32* %v2_dbcc, align 4
  store i32 %v3_dbcc, i32* @r4, align 4
  %v0_dbd0 = call i32 @function_fc1c()
  %v3_dbd4 = load i32, i32* %stack_var_-40, align 4
  %v5_dbdc = mul i32 %v3_dbd4, 24
  %v0_dbe0 = load i32, i32* @r4, align 4
  %v1_dbe4 = and i32 %v0_dbe0, 65280
  store i32 %v1_dbe4, i32* %r3.global-to-local, align 4
  %v1_dbe0 = udiv i32 %v0_dbe0, 256
  %v3_dbe8 = and i32 %v1_dbe0, 65280
  store i32 %v3_dbe8, i32* %r2.global-to-local, align 4
  %v1_dbec = load i32, i32* @sl, align 4
  %v2_dbec = add i32 %v1_dbec, %v5_dbdc
  store i32 %v2_dbec, i32* %ip.global-to-local, align 4
  %v1_dbf8 = add i32 %v2_dbec, 20
  %v2_dbf8 = inttoptr i32 %v1_dbf8 to i8*
  %v3_dbf8 = load i8, i8* %v2_dbf8, align 1
  %v4_dbf8 = zext i8 %v3_dbf8 to i32
  %v2_dc00 = call i32 @llvm.bswap.i32(i32 %v0_dbe0)
  %v7_dc04 = lshr i32 %v0_dbd0, %v4_dbf8
  %v8_dc04 = add i32 %v7_dc04, %v2_dc00
  store i32 %v3_d918, i32* %r2.global-to-local, align 4
  %v2_dc24 = call i32 @llvm.bswap.i32(i32 %v8_dc04)
  store i32 %v2_dc24, i32* %r3.global-to-local, align 4
  %v1_dc28 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc28 = icmp eq i32 %v3_d918, %v1_dc28
  store i1 %v9_dc28, i1* %cpsr_z.global-to-local, align 1
  %v1_dc2c = load i32, i32* @r5, align 4
  %v2_dc2c = add i32 %v1_dc2c, 16
  %v3_dc2c = inttoptr i32 %v2_dc2c to i32*
  store i32 %v2_dc24, i32* %v3_dc2c, align 4
  br i1 %v9_dc28, label %dec_label_pc_dc34, label %dec_label_pc_dbcc.dec_label_pc_daf8_crit_edge

dec_label_pc_dbcc.dec_label_pc_daf8_crit_edge:    ; preds = %dec_label_pc_dbcc
  %v1_dafc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_daf8

dec_label_pc_dc34:                                ; preds = %dec_label_pc_dbcc, %dec_label_pc_daec
  %v0_dc34 = call i32 @function_fc1c()
  %v1_dc34 = trunc i32 %v0_dc34 to i8
  %v4_dc3826 = udiv i32 %v0_dc34, 256
  %v1_dc3c = trunc i32 %v4_dc3826 to i8
  %v2_dc3c = load i32, i32* @r5, align 4
  %v3_dc3c = add i32 %v2_dc3c, 5
  %v4_dc3c = inttoptr i32 %v3_dc3c to i8*
  store i8 %v1_dc3c, i8* %v4_dc3c, align 1
  store i32 %v3_d91c, i32* %r3.global-to-local, align 4
  %v1_dc44 = load i32, i32* %r7.global-to-local, align 4
  %v9_dc44 = icmp eq i32 %v3_d91c, %v1_dc44
  store i1 %v9_dc44, i1* %cpsr_z.global-to-local, align 1
  %v3_dc48 = load i32, i32* @r5, align 4
  %v4_dc48 = add i32 %v3_dc48, 4
  %v5_dc48 = inttoptr i32 %v4_dc48 to i8*
  store i8 %v1_dc34, i8* %v5_dc48, align 1
  %v0_dc4c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dc4c, label %dec_label_pc_dc50, label %dec_label_pc_dc34.dec_label_pc_db04_crit_edge

dec_label_pc_dc34.dec_label_pc_db04_crit_edge:    ; preds = %dec_label_pc_dc34
  %v1_db08.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_db04

dec_label_pc_dc50:                                ; preds = %dec_label_pc_dc34, %dec_label_pc_daf8
  %v0_dc50 = call i32 @function_fc1c()
  %v1_dc50 = trunc i32 %v0_dc50 to i8
  %v4_dc58 = sdiv i32 %v0_dc50, 256
  store i32 %v4_dc58, i32* %r3.global-to-local, align 4
  %v1_dc5c = load i32, i32* %r7.global-to-local, align 4
  %v9_dc5c = icmp eq i32 %v3_d920, %v1_dc5c
  store i1 %v9_dc5c, i1* %cpsr_z.global-to-local, align 1
  %v3_dc60 = load i32, i32* @r5, align 4
  %v4_dc60 = add i32 %v3_dc60, 20
  %v5_dc60 = inttoptr i32 %v4_dc60 to i8*
  store i8 %v1_dc50, i8* %v5_dc60, align 1
  %v0_dc64 = load i32, i32* %r3.global-to-local, align 4
  %v1_dc64 = trunc i32 %v0_dc64 to i8
  %v2_dc64 = load i32, i32* @r6, align 4
  %v3_dc64 = add i32 %v2_dc64, 1
  %v4_dc64 = inttoptr i32 %v3_dc64 to i8*
  store i8 %v1_dc64, i8* %v4_dc64, align 1
  %v0_dc68 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dc68, label %dec_label_pc_dc6c, label %dec_label_pc_db10

dec_label_pc_dc6c:                                ; preds = %dec_label_pc_dc50, %dec_label_pc_db04
  %v0_dc6c = call i32 @function_fc1c()
  %v1_dc6c = trunc i32 %v0_dc6c to i8
  %v4_dc70 = sdiv i32 %v0_dc6c, 256
  store i32 %v4_dc70, i32* %r3.global-to-local, align 4
  %v1_dc74 = trunc i32 %v4_dc70 to i8
  %v2_dc74 = load i32, i32* @r6, align 4
  %v3_dc74 = add i32 %v2_dc74, 3
  %v4_dc74 = inttoptr i32 %v3_dc74 to i8*
  store i8 %v1_dc74, i8* %v4_dc74, align 1
  %v3_dc78 = load i32, i32* @r6, align 4
  %v4_dc78 = add i32 %v3_dc78, 2
  %v5_dc78 = inttoptr i32 %v4_dc78 to i8*
  store i8 %v1_dc6c, i8* %v5_dc78, align 1
  br label %dec_label_pc_db10

dec_label_pc_dc80:                                ; preds = %dec_label_pc_d8e0
  %v0_dc80 = load i32, i32* %fp.global-to-local, align 4
  %v1_dc84 = call i32 @function_134b0(i32 %v0_dc80)
  br label %dec_label_pc_dc88

dec_label_pc_dc88:                                ; preds = %dec_label_pc_d7d0, %dec_label_pc_dc80
  %v29_dc8c = phi i32 [ %v3_d8d0, %dec_label_pc_d7d0 ], [ %v1_dc84, %dec_label_pc_dc80 ]
  store i32 %v3_d7d0, i32* %r4.global-to-local, align 4
  store i32 %v12_d7d0, i32* %r7.global-to-local, align 4
  ret i32 %v29_dc8c

; uselistorder directives
  uselistorder i32 %v4_dc70, { 1, 0 }
  uselistorder i32 %v2_dc24, { 1, 0 }
  uselistorder i32 %v0_dbe0, { 1, 0, 2 }
  uselistorder i1 %v2_dbc0, { 1, 0 }
  uselistorder i32 %v1_dbb4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_dbb0, { 2, 0, 3, 1 }
  uselistorder i32 %v3_db78, { 1, 0 }
  uselistorder i32 %v4_db24, { 1, 0 }
  uselistorder i1 %v3_daf0, { 1, 0 }
  uselistorder i32 %v1_da98, { 1, 0, 2, 3 }
  uselistorder i32 %v1_da3c, { 1, 0 }
  uselistorder i32 %v1_d9c4, { 1, 0 }
  uselistorder i32 %v1_d94c, { 1, 0 }
  uselistorder i32 %v1_d940, { 1, 0 }
  uselistorder i32 %v0_d910, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_d908, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_d900, { 1, 0 }
  uselistorder i1 %v7_d8d4, { 1, 0 }
  uselistorder i32 %v3_d8d0, { 1, 2, 3, 0 }
  uselistorder i32 %v1_d870, { 1, 0 }
  uselistorder i8 %v5_d860, { 1, 0 }
  uselistorder i32 %v5_d844, { 1, 0 }
  uselistorder i32 %v6_d808, { 1, 0 }
  uselistorder i32 %v1_d7d4, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 5, 3, 1, 4, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 17, 7, 8, 18, 9, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder label %dec_label_pc_dc88, { 1, 0 }
  uselistorder label %dec_label_pc_db10, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dab0, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_dc94(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_dc94:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_dc94 = load i32, i32* @r4, align 4
  %v15_dc94 = load i32, i32* @r8, align 4
  %v18_dc94 = load i32, i32* @sb, align 4
  %v21_dc94 = load i32, i32* @sl, align 4
  %v24_dc94 = load i32, i32* @fp, align 4
  %v1_dca0 = urem i32 %arg1, 256
  store i32 %v1_dca0, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_dcac = urem i32 %arg3, 256
  store i32 %v1_dcac, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_dcb8 = call i32 @function_140b4(i32 %v1_dca0, i32 4)
  %v0_dcbc = load i32, i32* @r5, align 4
  store i32 %v0_dcbc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_dcc8 = load i32, i32* @r4, align 4
  store i32 %v0_dcc8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_dcd0 = inttoptr i32 %v0_dcbc to i32*
  %v6_dcd0 = call i32 @function_a4e8(i32 %v0_dcc8, i32* %v5_dcd0, i32 2, i32 0)
  %v1_dcdc = urem i32 %v6_dcd0, 256
  store i32 %v1_dcdc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_dce8 = load i32, i32* @r4, align 4
  store i32 %v0_dce8, i32* %r0.global-to-local, align 4
  %v0_dcec = load i32, i32* @r5, align 4
  store i32 %v0_dcec, i32* %r1.global-to-local, align 4
  %v5_dcf0 = trunc i32 %v6_dcd0 to i8
  %v6_dcf4 = inttoptr i32 %v0_dcec to i32*
  %v7_dcf4 = call i32 @function_a4e8(i32 %v0_dce8, i32* %v6_dcf4, i32 3, i32 65535)
  %v0_dcf8 = load i32, i32* @r5, align 4
  store i32 %v0_dcf8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_dd04 = load i32, i32* @r4, align 4
  store i32 %v0_dd04, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_dd0c = inttoptr i32 %v0_dcf8 to i32*
  %v6_dd0c = call i32 @function_a4e8(i32 %v0_dd04, i32* %v5_dd0c, i32 4, i32 64)
  %v1_dd14 = urem i32 %v6_dd0c, 256
  store i32 %v1_dd14, i32* %ip.global-to-local, align 4
  %v0_dd18 = load i32, i32* @r5, align 4
  store i32 %v0_dd18, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_dd24 = load i32, i32* @r4, align 4
  store i32 %v0_dd24, i32* %r0.global-to-local, align 4
  %v6_dd2c = inttoptr i32 %v0_dd18 to i32*
  %v7_dd2c = call i32 @function_a4e8(i32 %v0_dd24, i32* %v6_dd2c, i32 5, i32 0)
  %v1_dd38 = urem i32 %v7_dd2c, 256
  store i32 %v1_dd38, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_dd44 = load i32, i32* @r4, align 4
  store i32 %v0_dd44, i32* %r0.global-to-local, align 4
  %v0_dd48 = load i32, i32* @r5, align 4
  store i32 %v0_dd48, i32* %r1.global-to-local, align 4
  %v5_dd50 = inttoptr i32 %v0_dd48 to i32*
  %v6_dd50 = call i32 @function_a4e8(i32 %v0_dd44, i32* %v5_dd50, i32 6, i32 65535)
  %v0_dd54 = load i32, i32* @r5, align 4
  store i32 %v0_dd54, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_dd50, i32* %fp.global-to-local, align 4
  %v0_dd64 = load i32, i32* @r4, align 4
  store i32 %v0_dd64, i32* %r0.global-to-local, align 4
  %v4_dd68 = inttoptr i32 %v0_dd54 to i32*
  %v5_dd68 = call i32 @function_a4e8(i32 %v0_dd64, i32* %v4_dd68, i32 7, i32 53)
  %v0_dd70 = load i32, i32* @r5, align 4
  store i32 %v0_dd70, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v5_dd68, i32* %sb.global-to-local, align 4
  %v0_dd80 = load i32, i32* @r4, align 4
  store i32 %v0_dd80, i32* %r0.global-to-local, align 4
  %v4_dd84 = inttoptr i32 %v0_dd70 to i32*
  %v5_dd84 = call i32 @function_a4e8(i32 %v0_dd80, i32* %v4_dd84, i32 9, i32 65535)
  %v0_dd88 = load i32, i32* @r5, align 4
  store i32 %v0_dd88, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v5_dd84, i32* @sl, align 4
  %v0_dd98 = load i32, i32* @r4, align 4
  store i32 %v0_dd98, i32* %r0.global-to-local, align 4
  %v4_dd9c = inttoptr i32 %v0_dd88 to i32*
  %v5_dd9c = call i32 @function_a4e8(i32 %v0_dd98, i32* %v4_dd9c, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_dda8 = load i32, i32* @r5, align 4
  store i32 %v0_dda8, i32* %r1.global-to-local, align 4
  store i32 %v5_dd9c, i32* %r8.global-to-local, align 4
  %v0_ddb0 = load i32, i32* @r4, align 4
  store i32 %v0_ddb0, i32* %r0.global-to-local, align 4
  %v5_ddb4 = inttoptr i32 %v0_dda8 to i32*
  %v6_ddb4 = call i32 @function_9f84(i32 %v0_ddb0, i32* %v5_ddb4, i32 8, i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_ddc0 = call i32 @function_121c4(i32 30)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_ddcc = call i32 @function_120e0(i32 30, i32* null)
  store i32 %v3_ddcc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_ddd4 = inttoptr i32 %v3_ddcc to i8*
  %v3_ddd4 = call i32 @function_135dc(i8* %v2_ddd4, i32 0)
  store i32 %v3_ddd4, i32* @r4, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_dde0 = call i32 @function_1210c(i32 30)
  store i32 %v1_dde0, i32* %r0.global-to-local, align 4
  %v0_dde4 = load i32, i32* @r4, align 4
  %v1_dde4 = icmp slt i32 %v0_dde4, 0
  %v2_dde4 = icmp eq i32 %v0_dde4, 0
  store i1 %v2_dde4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_dde4, label %dec_label_pc_e3b0, label %dec_label_pc_ddec

dec_label_pc_ddec:                                ; preds = %dec_label_pc_dc94
  %v2_ddf0 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_ddf0, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_ddf0, i32* %r1.global-to-local, align 4
  store i32 %v0_dde4, i32* %r0.global-to-local, align 4
  %v4_de00 = call i32 @function_13678(i32 %v0_dde4, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_de00, i32* @r5, align 4
  %v0_de08 = load i32, i32* @r4, align 4
  store i32 %v0_de08, i32* %r0.global-to-local, align 4
  %v1_de0c = call i32 @function_134b0(i32 %v0_de08)
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_de14 = call i32 @function_121c4(i32 31)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_de20 = call i32 @function_120e0(i32 31, i32* null)
  %v0_de24 = load i32, i32* @r5, align 4
  store i32 %v0_de24, i32* @r1, align 4
  store i32 %v3_de20, i32* %r2.global-to-local, align 4
  store i32 %v2_ddf0, i32* %r0.global-to-local, align 4
  %v3_de30 = bitcast i32* %stack_var_-2120 to i8*
  %v4_de30 = call i32 @function_12e44(i8* %v3_de30, i32 %v0_de24, i32 %v3_de20)
  store i32 %v4_de30, i32* @r4, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_de3c = call i32 @function_1210c(i32 31)
  store i32 %v1_de3c, i32* %r0.global-to-local, align 4
  %v0_de40 = load i32, i32* @r4, align 4
  %v7_de40 = icmp eq i32 %v0_de40, -1
  store i1 %v7_de40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_de40, label %dec_label_pc_e3b0, label %dec_label_pc_de48

dec_label_pc_de48:                                ; preds = %dec_label_pc_ddec
  %v0_de48 = load i32, i32* @r5, align 4
  %v9_de48 = icmp eq i32 %v0_de48, %v0_de40
  store i1 %v9_de48, i1* %cpsr_z.global-to-local, align 1
  %v7_de4c = icmp sgt i32 %v0_de48, %v0_de40
  br i1 %v7_de4c, label %dec_label_pc_de50, label %dec_label_pc_e3b0

dec_label_pc_de50:                                ; preds = %dec_label_pc_de48
  store i32 %v0_de48, i32* %r3.global-to-local, align 4
  store i32 %v0_de40, i32* %r2.global-to-local, align 4
  %v0_de60 = load i32, i32* @r6, align 4
  %v2_de60 = add i32 %v0_de60, %v0_de40
  store i32 %v2_de60, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_de68 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_de68, i32* @r7, align 4
  %v1_de98 = add i32 %v0_de48, -1
  br label %dec_label_pc_de90

dec_label_pc_de74:                                ; preds = %dec_label_pc_deb8, %bb138
  %v9_de74 = icmp eq i32 %v0_de80, %v1_de98
  store i1 %v9_de74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_de74, label %dec_label_pc_dec4, label %dec_label_pc_de7c

dec_label_pc_de7c:                                ; preds = %dec_label_pc_dea8, %dec_label_pc_de74, %bb
  %v0_deb442 = phi i32 [ %v0_deb4, %dec_label_pc_dea8 ], [ %v0_deb443, %dec_label_pc_de74 ], [ %v0_deb4, %bb ]
  %v0_de9438 = phi i32 [ 0, %dec_label_pc_dea8 ], [ %v0_de9439, %dec_label_pc_de74 ], [ 0, %bb ]
  store i32 %v0_de48, i32* %r0.global-to-local, align 4
  %v1_de80 = add i32 %v0_de80, 1
  store i32 %v1_de80, i32* %r2.global-to-local, align 4
  %v9_de84 = icmp eq i32 %v0_de48, %v1_de80
  store i1 %v9_de84, i1* %cpsr_z.global-to-local, align 1
  %v1_de88 = add i32 %v0_de88, 1
  store i32 %v1_de88, i32* @r7, align 4
  br i1 %v9_de84, label %dec_label_pc_e3b0, label %dec_label_pc_de90

dec_label_pc_de90:                                ; preds = %dec_label_pc_de7c, %dec_label_pc_de50
  %v0_de88 = phi i32 [ %v1_de88, %dec_label_pc_de7c ], [ %v2_de68, %dec_label_pc_de50 ]
  %v0_de80 = phi i32 [ %v1_de80, %dec_label_pc_de7c ], [ %v0_de40, %dec_label_pc_de50 ]
  %v0_deb4 = phi i32 [ %v0_deb442, %dec_label_pc_de7c ], [ 0, %dec_label_pc_de50 ]
  %v0_de94 = phi i32 [ %v0_de9438, %dec_label_pc_de7c ], [ 0, %dec_label_pc_de50 ]
  %v0_de9c = phi i32 [ %v1_de9c, %dec_label_pc_de7c ], [ %v2_de60, %dec_label_pc_de50 ]
  %v1_de90 = inttoptr i32 %v0_de9c to i8*
  %v2_de90 = load i8, i8* %v1_de90, align 1
  %v3_de90 = zext i8 %v2_de90 to i32
  store i32 %v3_de90, i32* %r3.global-to-local, align 4
  %v2_de94 = icmp eq i32 %v0_de94, 0
  store i1 %v2_de94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_de98, i32* %ip.global-to-local, align 4
  %v1_de9c = add i32 %v0_de9c, 1
  store i32 %v1_de9c, i32* %r1.global-to-local, align 4
  %v1_dea0 = add nsw i32 %v3_de90, -48
  store i32 %v1_dea0, i32* %r0.global-to-local, align 4
  br i1 %v2_de94, label %dec_label_pc_dea8, label %dec_label_pc_deb8

dec_label_pc_dea8:                                ; preds = %dec_label_pc_de90
  %v7_dea8 = icmp eq i8 %v2_de90, 9
  store i1 %v7_dea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_dea8, label %dec_label_pc_de7c, label %bb

bb:                                               ; preds = %dec_label_pc_dea8
  %v8_deac = icmp eq i8 %v2_de90, 32
  store i1 %v8_deac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_deac, label %dec_label_pc_de7c, label %dec_label_pc_deb4

dec_label_pc_deb4:                                ; preds = %bb
  %v1_deb4 = add i32 %v0_deb4, 1
  store i32 %v1_deb4, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_deb8

dec_label_pc_deb8:                                ; preds = %dec_label_pc_de90, %dec_label_pc_deb4
  %v0_deb443 = phi i32 [ %v0_deb4, %dec_label_pc_de90 ], [ %v1_deb4, %dec_label_pc_deb4 ]
  %v0_de9439 = phi i32 [ %v0_de94, %dec_label_pc_de90 ], [ %v1_deb4, %dec_label_pc_deb4 ]
  %v7_deb8 = icmp eq i8 %v2_de90, 46
  store i1 %v7_deb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_deb8, label %dec_label_pc_de74, label %bb138

bb138:                                            ; preds = %dec_label_pc_deb8
  %v8_debc = icmp eq i32 %v1_dea0, 9
  store i1 %v8_debc, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_dea0, 10
  br i1 %tmp, label %dec_label_pc_de74, label %dec_label_pc_dec4

dec_label_pc_dec4:                                ; preds = %dec_label_pc_de74, %bb138
  %v0_de80.lcssa = phi i32 [ %v1_de98, %dec_label_pc_de74 ], [ %v0_de80, %bb138 ]
  %v2_dec8 = sub i32 %v0_de80.lcssa, %v0_de40
  store i32 %v2_dec8, i32* %r2.global-to-local, align 4
  store i32 %v2_de60, i32* %r1.global-to-local, align 4
  store i32 %v2_de68, i32* %r0.global-to-local, align 4
  %v3_ded4 = call i32 @function_12b6c(i32 %v2_de68, i32 %v2_de60, i32 %v2_dec8)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_de68, i32* @r0, align 4
  %v2_dee4 = load i32, i32* @r7, align 4
  %v3_dee4 = inttoptr i32 %v2_dee4 to i8*
  store i8 0, i8* %v3_dee4, align 1
  %v1_dee8 = call i32 @function_13b90(i32 %v2_de68)
  store i32 %v1_dee8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_def0

dec_label_pc_def020:                              ; preds = %dec_label_pc_e3b0
  unreachable

dec_label_pc_def0:                                ; preds = %dec_label_pc_e428, %dec_label_pc_e418, %dec_label_pc_e40c, %dec_label_pc_e3f8, %dec_label_pc_dec4
  %v29_e3f474 = phi i32 [ %v1_e3b4, %dec_label_pc_e428 ], [ %v1_e3b4, %dec_label_pc_e418 ], [ %v1_e3b4, %dec_label_pc_e40c ], [ %v1_e3b4, %dec_label_pc_e3f8 ], [ %v1_dee8, %dec_label_pc_dec4 ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_e428 ], [ 104859200, %dec_label_pc_e418 ], [ 707416650, %dec_label_pc_e40c ], [ 134744072, %dec_label_pc_e3f8 ], [ %v1_dee8, %dec_label_pc_dec4 ]
  store i32 %v6_ddb4, i32* %ip.global-to-local, align 4
  %v2_def4 = icmp eq i32 %v6_ddb4, 0
  store i1 %v2_def4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_def4, label %dec_label_pc_e3ec, label %dec_label_pc_defc

dec_label_pc_defc:                                ; preds = %dec_label_pc_def0
  store i32 %v6_ddb4, i32* %r0.global-to-local, align 4
  %v1_df00 = inttoptr i32 %v6_ddb4 to i8*
  %v2_df00 = call i32 @function_12af0(i8* %v1_df00)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_df14 = call i32 @function_13db0(i32 2, i32 3, i32 17)
  store i32 %v3_df14, i32* %r0.global-to-local, align 4
  %v7_df18 = icmp eq i32 %v3_df14, -1
  store i1 %v7_df18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df18, label %dec_label_pc_e3ec, label %dec_label_pc_df24

dec_label_pc_df24:                                ; preds = %dec_label_pc_defc
  store i32 1, i32* %stack_var_-40, align 4
  %v6_df30 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_df30, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_df44 = call i32 @function_13d80(i32 %v3_df14, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_df44, i32* %r0.global-to-local, align 4
  %v7_df48 = icmp eq i32 %v6_df44, -1
  store i1 %v7_df48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_df48, label %dec_label_pc_e3e4, label %dec_label_pc_df50

dec_label_pc_df50:                                ; preds = %dec_label_pc_df24
  store i32 %v1_dca0, i32* %r0.global-to-local, align 4
  %v3_df58 = mul i32 %v7_dcf4, 65536
  store i32 %v3_df58, i32* %lr.global-to-local, align 4
  %v0_df5c = load i32, i32* @sl, align 4
  %v3_df5c = mul i32 %v0_df5c, 65536
  store i32 %v3_df5c, i32* %sl.global-to-local, align 4
  %v0_df60 = load i32, i32* %r8.global-to-local, align 4
  %v0_df64 = load i32, i32* %fp.global-to-local, align 4
  %v0_df68 = load i32, i32* %sb.global-to-local, align 4
  %v3_df68 = mul i32 %v0_df68, 65536
  store i32 %v3_df68, i32* %sb.global-to-local, align 4
  %v5_df6c = trunc i32 %v0_df60 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_df74 = urem i32 %v7_dcf4, 65536
  store i32 %v3_df74, i32* %r2.global-to-local, align 4
  %v3_df78 = urem i32 %v0_df64, 65536
  store i32 %v3_df78, i32* %r3.global-to-local, align 4
  %v3_df7c = urem i32 %v0_df68, 65536
  store i32 %v3_df7c, i32* %r4.global-to-local, align 4
  %v3_df80 = urem i32 %v0_df5c, 65536
  store i32 %v3_df80, i32* %r8.global-to-local, align 4
  %v2_df84 = icmp eq i32 %v1_dca0, 0
  store i1 %v2_df84, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_df84, label %dec_label_pc_e3d4, label %dec_label_pc_dfa8

dec_label_pc_dfa8:                                ; preds = %dec_label_pc_df50
  %v4_dfac = sext i8 %v5_df6c to i32
  %v2_dfb0 = add i32 %v4_dfac, %v2_df00
  store i32 %v2_dfb0, i32* @fp, align 4
  %v3_dfb4 = mul i32 %v2_dfb0, 65536
  %v1_dfb8 = add i32 %v3_dfb4, 1769472
  store i32 %v1_dfb8, i32* @r6, align 4
  %v1_dfbc = add i32 %v3_dfb4, 3080192
  %v1_dfd0 = urem i32 %v0_df5c, 256
  %v3_dfe0 = udiv i32 %v1_dfb8, 256
  %v1_dfe4 = urem i32 %v7_dcf4, 256
  %v1_dfe8 = and i32 %v3_dfe0, 65280
  %v1_dfec = urem i32 %v0_df68, 256
  %v3_dff0 = mul nuw nsw i32 %v1_dfd0, 256
  %v1_dff8 = urem i32 %v0_df64, 256
  %v3_dffc = mul nuw nsw i32 %v1_dfec, 256
  %tmp139 = udiv i32 %v0_df5c, 256
  %v4_e000 = urem i32 %tmp139, 256
  %v5_e000 = or i32 %v4_e000, %v3_dff0
  store i32 %v5_e000, i32* %r8.global-to-local, align 4
  %v4_e004 = udiv i32 %v1_dfb8, 16777216
  %v5_e004 = or i32 %v1_dfe8, %v4_e004
  store i32 %v5_e004, i32* %sl.global-to-local, align 4
  %tmp140 = udiv i32 %v0_df64, 256
  %v3_e010 = urem i32 %tmp140, 256
  %v4_e014 = sdiv i32 %v1_dfbc, 16777216
  %tmp141 = udiv i32 %v7_dcf4, 256
  %v4_e01c = mul nuw nsw i32 %v1_dff8, 256
  %v5_e01c = or i32 %v4_e01c, %v3_e010
  store i32 %v5_e01c, i32* @r5, align 4
  %tmp142 = udiv i32 %v0_df68, 256
  %v4_e020 = urem i32 %tmp142, 256
  %v5_e020 = or i32 %v4_e020, %v3_dffc
  store i32 %v5_e020, i32* %sb.global-to-local, align 4
  store i32 %v1_dfe4, i32* %r0.global-to-local, align 4
  %v1_e02c = add i32 %v2_df00, 1
  store i32 %v1_e02c, i32* @r7, align 4
  %v3_e030 = ashr i32 %v1_dfbc, 31
  store i32 %v3_e030, i32* @lr, align 4
  store i32 %v1_dff8, i32* %r1.global-to-local, align 4
  store i32 %v1_dfec, i32* %r2.global-to-local, align 4
  %v3_e03c75 = udiv i32 %v1_dfe8, 256
  store i32 %v3_e03c75, i32* %r3.global-to-local, align 4
  store i32 %v1_dfd0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_e0a0 = sext i8 %v5_dcf0 to i32
  %sext13 = mul i32 %v6_dd0c, 16777216
  %v4_e0b8 = sdiv i32 %sext13, 16777216
  %sext14 = mul i32 %tmp141, 16777216
  %v4_e0cc = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v7_dcf4, 16777216
  %v4_e0d0 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v1_dfb8, 256
  %v4_e100 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_df68, 16777216
  %v4_e104 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_df64, 16777216
  %v4_e128 = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v0_df5c, 16777216
  %v4_e134 = sdiv i32 %sext19, 16777216
  %v1_e0b0 = trunc i32 %v4_e014 to i8
  %extract.t = trunc i32 %v3_e030 to i8
  br label %dec_label_pc_e060

dec_label_pc_e060:                                ; preds = %dec_label_pc_e1c8, %dec_label_pc_dfa8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_e068 = call i32 @function_140b4(i32 600, i32 1)
  store i32 %v2_e068, i32* %r0.global-to-local, align 4
  store i32 %v2_dcb8, i32* %lr.global-to-local, align 4
  %v3_e070 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_e070, i32* %r3.global-to-local, align 4
  %v2_e074 = load i32, i32* @r4, align 4
  %v5_e074 = mul i32 %v2_e074, 4
  %v6_e074 = add i32 %v5_e074, %v2_dcb8
  %v7_e074 = inttoptr i32 %v6_e074 to i32*
  store i32 %v2_e068, i32* %v7_e074, align 4
  %v0_e078 = load i32, i32* %lr.global-to-local, align 4
  %v1_e078 = load i32, i32* %r3.global-to-local, align 4
  %v4_e078 = mul i32 %v1_e078, 4
  %v5_e078 = add i32 %v4_e078, %v0_e078
  %v6_e078 = inttoptr i32 %v5_e078 to i32*
  %v7_e078 = load i32, i32* %v6_e078, align 4
  store i32 %v7_e078, i32* %r1.global-to-local, align 4
  %v1_e07c = inttoptr i32 %v7_e078 to i8*
  %v2_e07c = load i8, i8* %v1_e07c, align 1
  %tmp154 = urem i8 %v2_e07c, 16
  %v1_e080 = zext i8 %tmp154 to i32
  %v1_e084 = or i32 %v1_e080, 64
  store i32 %v1_e084, i32* %r2.global-to-local, align 4
  %v1_e088 = trunc i32 %v1_e084 to i8
  store i8 %v1_e088, i8* %v1_e07c, align 1
  %v0_e08c = load i32, i32* %r1.global-to-local, align 4
  %v1_e08c = inttoptr i32 %v0_e08c to i8*
  %v2_e08c = load i8, i8* %v1_e08c, align 1
  %v1_e090 = and i8 %v2_e08c, -16
  %v1_e094 = or i8 %v1_e090, 5
  store i32 %v1_dd38, i32* %r0.global-to-local, align 4
  store i8 %v1_e094, i8* %v1_e08c, align 1
  store i32 %v4_e0a0, i32* %r2.global-to-local, align 4
  %v2_e0a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0a4 = add i32 %v2_e0a4, 1
  %v4_e0a4 = inttoptr i32 %v3_e0a4 to i8*
  store i8 %v5_dcf0, i8* %v4_e0a4, align 1
  store i32 %v4_e014, i32* %r3.global-to-local, align 4
  %v0_e0ac = load i32, i32* %r0.global-to-local, align 4
  %v2_e0ac = icmp eq i32 %v0_e0ac, 0
  store i1 %v2_e0ac, i1* %cpsr_z.global-to-local, align 1
  %v2_e0b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0b0 = add i32 %v2_e0b0, 2
  %v4_e0b0 = inttoptr i32 %v3_e0b0 to i8*
  store i8 %v1_e0b0, i8* %v4_e0b0, align 1
  store i32 %v3_e030, i32* %r4.global-to-local, align 4
  store i32 %v4_e0b8, i32* %r0.global-to-local, align 4
  %v0_e0bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e0bc, label %.thread21, label %bb143

bb143:                                            ; preds = %dec_label_pc_e060
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_e0c0 = load i32, i32* %r1.global-to-local, align 4
  %v4_e0c0 = add i32 %v3_e0c0, 6
  %v5_e0c0 = inttoptr i32 %v4_e0c0 to i8*
  store i8 64, i8* %v5_e0c0, align 1
  %v0_e0c8.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t76 = trunc i32 %v0_e0c8.pre to i8
  br label %.thread21

.thread21:                                        ; preds = %dec_label_pc_e060, %bb143
  %v0_e0c8.off0 = phi i8 [ %extract.t, %dec_label_pc_e060 ], [ %extract.t76, %bb143 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_e0c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0c8 = add i32 %v2_e0c8, 3
  %v4_e0c8 = inttoptr i32 %v3_e0c8 to i8*
  store i8 %v0_e0c8.off0, i8* %v4_e0c8, align 1
  store i32 %v4_e0cc, i32* %ip.global-to-local, align 4
  store i32 %v4_e0d0, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1eafc.85 to i32), i32* %r4.global-to-local, align 4
  %v0_e0d8 = load i32, i32* %r0.global-to-local, align 4
  %v1_e0d8 = trunc i32 %v0_e0d8 to i8
  %v2_e0d8 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0d8 = add i32 %v2_e0d8, 8
  %v4_e0d8 = inttoptr i32 %v3_e0d8 to i8*
  store i8 %v1_e0d8, i8* %v4_e0d8, align 1
  %v0_e0dc = load i32, i32* %r3.global-to-local, align 4
  %v1_e0dc = trunc i32 %v0_e0dc to i8
  %v2_e0dc = load i32, i32* %r1.global-to-local, align 4
  %v3_e0dc = add i32 %v2_e0dc, 9
  %v4_e0dc = inttoptr i32 %v3_e0dc to i8*
  store i8 %v1_e0dc, i8* %v4_e0dc, align 1
  %v0_e0e0 = load i32, i32* %lr.global-to-local, align 4
  %v1_e0e0 = trunc i32 %v0_e0e0 to i8
  %v2_e0e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_e0e0 = add i32 %v2_e0e0, 5
  %v4_e0e0 = inttoptr i32 %v3_e0e0 to i8*
  store i8 %v1_e0e0, i8* %v4_e0e0, align 1
  %v0_e0e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e0e4, label %.thread22, label %bb144

.thread22:                                        ; preds = %.thread21
  %v2_e0e823 = load i32, i32* @global_var_1eafc.85, align 4
  store i32 %v2_e0e823, i32* %r3.global-to-local, align 4
  store i32 %v4_dfac, i32* %lr.global-to-local, align 4
  br label %bb145

bb144:                                            ; preds = %.thread21
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_e0e8 = load i32, i32* @global_var_1eafc.85, align 4
  store i32 %v2_e0e8, i32* %r3.global-to-local, align 4
  store i32 %v4_dfac, i32* %lr.global-to-local, align 4
  %v3_e0f0 = load i32, i32* %r1.global-to-local, align 4
  %v4_e0f0 = add i32 %v3_e0f0, 7
  %v5_e0f0 = inttoptr i32 %v4_e0f0 to i8*
  store i8 0, i8* %v5_e0f0, align 1
  %v0_e0f8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_e0fc.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb145

bb145:                                            ; preds = %.thread22, %bb144
  %v0_e0fc = phi i32 [ %v2_e0e823, %.thread22 ], [ %v0_e0fc.pre, %bb144 ]
  %v0_e0f8 = phi i32 [ %v4_dfac, %.thread22 ], [ %v0_e0f8.pre, %bb144 ]
  %v0_e0f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_e0f4 = add i32 %v0_e0f8, 41
  %v2_e0f8 = add i32 %v1_e0f4, %v0_e0f4
  store i32 %v2_e0f8, i32* %r4.global-to-local, align 4
  %v2_e0fc = add i32 %v0_e0f4, 12
  %v3_e0fc = inttoptr i32 %v2_e0fc to i32*
  store i32 %v0_e0fc, i32* %v3_e0fc, align 4
  store i32 %v4_e100, i32* %r2.global-to-local, align 4
  store i32 %v4_e104, i32* %r3.global-to-local, align 4
  %v0_e108 = load i32, i32* %r1.global-to-local, align 4
  %v1_e108 = add i32 %v0_e108, 20
  store i32 %v1_e108, i32* %r0.global-to-local, align 4
  %v0_e10c = load i32, i32* %ip.global-to-local, align 4
  %v1_e10c = trunc i32 %v0_e10c to i8
  %v3_e10c = add i32 %v0_e108, 4
  %v4_e10c = inttoptr i32 %v3_e10c to i8*
  store i8 %v1_e10c, i8* %v4_e10c, align 1
  %v0_e110 = load i32, i32* %r2.global-to-local, align 4
  %v1_e110 = trunc i32 %v0_e110 to i8
  %v2_e110 = load i32, i32* %r0.global-to-local, align 4
  %v3_e110 = add i32 %v2_e110, 5
  %v4_e110 = inttoptr i32 %v3_e110 to i8*
  store i8 %v1_e110, i8* %v4_e110, align 1
  %v0_e114 = load i32, i32* %r3.global-to-local, align 4
  %v1_e114 = trunc i32 %v0_e114 to i8
  %v2_e114 = load i32, i32* %r0.global-to-local, align 4
  %v3_e114 = add i32 %v2_e114, 3
  %v4_e114 = inttoptr i32 %v3_e114 to i8*
  store i8 %v1_e114, i8* %v4_e114, align 1
  %v0_e118 = load i32, i32* %sb.global-to-local, align 4
  %v1_e118 = trunc i32 %v0_e118 to i8
  %v2_e118 = load i32, i32* %r0.global-to-local, align 4
  %v3_e118 = add i32 %v2_e118, 2
  %v4_e118 = inttoptr i32 %v3_e118 to i8*
  store i8 %v1_e118, i8* %v4_e118, align 1
  %v0_e11c = load i32, i32* %sl.global-to-local, align 4
  %v1_e11c = trunc i32 %v0_e11c to i8
  %v2_e11c = load i32, i32* %r0.global-to-local, align 4
  %v3_e11c = add i32 %v2_e11c, 4
  %v4_e11c = inttoptr i32 %v3_e11c to i8*
  store i8 %v1_e11c, i8* %v4_e11c, align 1
  %v0_e120 = load i32, i32* @r5, align 4
  %v1_e120 = trunc i32 %v0_e120 to i8
  %v2_e120 = load i32, i32* %r1.global-to-local, align 4
  %v3_e120 = add i32 %v2_e120, 20
  %v4_e120 = inttoptr i32 %v3_e120 to i8*
  store i8 %v1_e120, i8* %v4_e120, align 1
  store i32 %v4_e128, i32* %r2.global-to-local, align 4
  %v1_e12c = load i32, i32* %r1.global-to-local, align 4
  %v2_e12c = add i32 %v1_e12c, 16
  %v3_e12c = inttoptr i32 %v2_e12c to i32*
  store i32 %stack_var_-2176.0, i32* %v3_e12c, align 4
  %v0_e130 = load i32, i32* %r2.global-to-local, align 4
  %v1_e130 = trunc i32 %v0_e130 to i8
  %v2_e130 = load i32, i32* %r0.global-to-local, align 4
  %v3_e130 = add i32 %v2_e130, 1
  %v4_e130 = inttoptr i32 %v3_e130 to i8*
  store i8 %v1_e130, i8* %v4_e130, align 1
  store i32 %v4_e134, i32* %lr.global-to-local, align 4
  store i32 %v4_dfac, i32* %r0.global-to-local, align 4
  %v0_e13c = load i32, i32* %r1.global-to-local, align 4
  %v1_e13c = add i32 %v0_e13c, 28
  store i32 %v1_e13c, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_e148 = load i32, i32* %r8.global-to-local, align 4
  %v1_e148 = trunc i32 %v0_e148 to i8
  %v4_e148 = inttoptr i32 %v1_e13c to i8*
  store i8 %v1_e148, i8* %v4_e148, align 1
  %v0_e14c = load i32, i32* %r3.global-to-local, align 4
  %v1_e14c = trunc i32 %v0_e14c to i8
  %v2_e14c = load i32, i32* %ip.global-to-local, align 4
  %v3_e14c = add i32 %v2_e14c, 5
  %v4_e14c = inttoptr i32 %v3_e14c to i8*
  store i8 %v1_e14c, i8* %v4_e14c, align 1
  %v0_e150 = load i32, i32* %lr.global-to-local, align 4
  %v1_e150 = trunc i32 %v0_e150 to i8
  %v2_e150 = load i32, i32* %ip.global-to-local, align 4
  %v3_e150 = add i32 %v2_e150, 1
  %v4_e150 = inttoptr i32 %v3_e150 to i8*
  store i8 %v1_e150, i8* %v4_e150, align 1
  %v0_e154 = load i32, i32* %r3.global-to-local, align 4
  %v1_e154 = trunc i32 %v0_e154 to i8
  %v2_e154 = load i32, i32* %ip.global-to-local, align 4
  %v3_e154 = add i32 %v2_e154, 2
  %v4_e154 = inttoptr i32 %v3_e154 to i8*
  store i8 %v1_e154, i8* %v4_e154, align 1
  %v0_e158 = load i32, i32* @r6, align 4
  %v1_e158 = trunc i32 %v0_e158 to i8
  %v2_e158 = load i32, i32* %ip.global-to-local, align 4
  %v3_e158 = add i32 %v2_e158, 3
  %v4_e158 = inttoptr i32 %v3_e158 to i8*
  store i8 %v1_e158, i8* %v4_e158, align 1
  %v0_e15c = load i32, i32* @r6, align 4
  %v1_e15c = trunc i32 %v0_e15c to i8
  %v2_e15c = load i32, i32* %ip.global-to-local, align 4
  %v3_e15c = add i32 %v2_e15c, 4
  %v4_e15c = inttoptr i32 %v3_e15c to i8*
  store i8 %v1_e15c, i8* %v4_e15c, align 1
  %v0_e160 = load i32, i32* %r0.global-to-local, align 4
  %v1_e160 = trunc i32 %v0_e160 to i8
  %v2_e160 = load i32, i32* %r1.global-to-local, align 4
  %v3_e160 = add i32 %v2_e160, 40
  %v4_e160 = inttoptr i32 %v3_e160 to i8*
  store i8 %v1_e160, i8* %v4_e160, align 1
  store i32 %v6_ddb4, i32* %r1.global-to-local, align 4
  %v0_e168 = load i32, i32* @r7, align 4
  store i32 %v0_e168, i32* %r2.global-to-local, align 4
  %v0_e16c = load i32, i32* %r4.global-to-local, align 4
  %v1_e16c = add i32 %v0_e16c, 1
  store i32 %v1_e16c, i32* %r0.global-to-local, align 4
  %v3_e170 = call i32 @function_12b6c(i32 %v1_e16c, i32 %v6_ddb4, i32 %v0_e168)
  store i32 %v3_e170, i32* %r0.global-to-local, align 4
  store i32 %v2_df00, i32* %r1.global-to-local, align 4
  %v1_e178 = load i32, i32* @r6, align 4
  %v9_e178 = icmp eq i32 %v2_df00, %v1_e178
  store i1 %v9_e178, i1* %cpsr_z.global-to-local, align 1
  %v7_e17c = icmp sgt i32 %v2_df00, %v1_e178
  store i32 %v1_e178, i32* %lr.global-to-local, align 4
  %v0_e18c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e18c, i32* %r2.global-to-local, align 4
  %extract.t78 = trunc i32 %v1_e178 to i8
  br i1 %v7_e17c, label %dec_label_pc_e188, label %dec_label_pc_e1c8

dec_label_pc_e188:                                ; preds = %bb145
  store i32 %v1_e178, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e194

dec_label_pc_e194:                                ; preds = %bb148, %dec_label_pc_e188
  %v0_e1b085151 = phi i32 [ %v0_e1b085152, %bb148 ], [ %v1_e178, %dec_label_pc_e188 ]
  %v1_e1a433 = phi i32 [ %v1_e1b491, %bb148 ], [ %v1_e178, %dec_label_pc_e188 ]
  %v1_e1a0.off0 = phi i8 [ %v1_e1a056.off0, %bb148 ], [ %extract.t78, %dec_label_pc_e188 ]
  %v0_e1a432 = phi i32 [ %v0_e1a4325488, %bb148 ], [ %v0_e18c, %dec_label_pc_e188 ]
  store i32 %v6_ddb4, i32* %ip.global-to-local, align 4
  %v2_e198 = add i32 %v1_e1a433, %v6_ddb4
  %v3_e198 = inttoptr i32 %v2_e198 to i8*
  %v4_e198 = load i8, i8* %v3_e198, align 1
  %v6_e198 = zext i8 %v4_e198 to i32
  store i32 %v6_e198, i32* %r3.global-to-local, align 4
  %v7_e19c = icmp eq i8 %v4_e198, 46
  store i1 %v7_e19c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e19c, label %bb146, label %.thread31

.thread31:                                        ; preds = %dec_label_pc_e194
  %v2_e1a434 = add i32 %v1_e1a433, %v0_e1a432
  store i32 %v2_e1a434, i32* %r0.global-to-local, align 4
  br label %.thread35

bb146:                                            ; preds = %dec_label_pc_e194
  %v3_e1a0 = load i32, i32* %r2.global-to-local, align 4
  %v4_e1a0 = inttoptr i32 %v3_e1a0 to i8*
  store i8 %v1_e1a0.off0, i8* %v4_e1a0, align 1
  %v0_e1a8.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_e1a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_e1a4 = load i32, i32* %r1.global-to-local, align 4
  %v2_e1a4 = add i32 %v1_e1a4, %v0_e1a4
  store i32 %v2_e1a4, i32* %r0.global-to-local, align 4
  br i1 %v0_e1a8.pr, label %bb147, label %bb146..thread35_crit_edge

bb146..thread35_crit_edge:                        ; preds = %bb146
  %v0_e1b085.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread35

bb147:                                            ; preds = %bb146
  %v2_e1a8 = add i32 %v2_e1a4, 1
  store i32 %v2_e1a8, i32* %r2.global-to-local, align 4
  store i32 %v2_df00, i32* %r0.global-to-local, align 4
  %v0_e1b0 = load i32, i32* %lr.global-to-local, align 4
  %v1_e1b0 = add i32 %v0_e1b0, 1
  store i32 %v1_e1b0, i32* %ip.global-to-local, align 4
  %v1_e1b4 = add i32 %v1_e1a4, 1
  store i32 %v1_e1b4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb148

.thread35:                                        ; preds = %bb146..thread35_crit_edge, %.thread31
  %v0_e1b085 = phi i32 [ %v0_e1b085.pre, %bb146..thread35_crit_edge ], [ %v0_e1b085151, %.thread31 ]
  %v0_e1b4.ph = phi i32 [ %v1_e1a4, %bb146..thread35_crit_edge ], [ %v1_e1a433, %.thread31 ]
  %v0_e1a43254.ph = phi i32 [ %v0_e1a4, %bb146..thread35_crit_edge ], [ %v0_e1a432, %.thread31 ]
  store i32 %v2_df00, i32* %r0.global-to-local, align 4
  %v1_e1b086 = add i32 %v0_e1b085, 1
  store i32 %v1_e1b086, i32* %ip.global-to-local, align 4
  %v1_e1b487 = add i32 %v0_e1b4.ph, 1
  store i32 %v1_e1b487, i32* %r1.global-to-local, align 4
  %v2_e1bc = urem i32 %v1_e1b086, 256
  store i32 %v2_e1bc, i32* %lr.global-to-local, align 4
  %extract.t81 = trunc i32 %v1_e1b086 to i8
  br label %bb148

bb148:                                            ; preds = %bb147, %.thread35
  %v0_e1b085152 = phi i32 [ 0, %bb147 ], [ %v2_e1bc, %.thread35 ]
  %v1_e1b491 = phi i32 [ %v1_e1b4, %bb147 ], [ %v1_e1b487, %.thread35 ]
  %v0_e1a4325488 = phi i32 [ %v0_e1a4, %bb147 ], [ %v0_e1a43254.ph, %.thread35 ]
  %v1_e1a056.off0 = phi i8 [ 0, %bb147 ], [ %extract.t81, %.thread35 ]
  %v9_e1c0 = icmp eq i32 %v2_df00, %v1_e1b491
  store i1 %v9_e1c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e1c0, label %dec_label_pc_e1c8.loopexit, label %dec_label_pc_e194

dec_label_pc_e1c8.loopexit:                       ; preds = %bb148
  %v2_e1c8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e1c8

dec_label_pc_e1c8:                                ; preds = %dec_label_pc_e1c8.loopexit, %bb145
  %v2_e1c8 = phi i32 [ %v2_e1c8.pre, %dec_label_pc_e1c8.loopexit ], [ %v0_e18c, %bb145 ]
  %v0_e1c8.off0 = phi i8 [ %v1_e1a056.off0, %dec_label_pc_e1c8.loopexit ], [ %extract.t78, %bb145 ]
  %v3_e1c8 = inttoptr i32 %v2_e1c8 to i8*
  store i8 %v0_e1c8.off0, i8* %v3_e1c8, align 1
  %v3_e1cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_df00, i32* %r1.global-to-local, align 4
  %v0_e1d4 = load i32, i32* %r4.global-to-local, align 4
  %v2_e1d4 = add i32 %v0_e1d4, %v2_df00
  store i32 %v2_e1d4, i32* %r3.global-to-local, align 4
  %v1_e1d8 = add i32 %v3_e1cc, 1
  store i32 %v1_e1d8, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v9_e1e8 = icmp eq i32 %v1_dca0, %v1_e1d8
  store i1 %v9_e1e8, i1* %cpsr_z.global-to-local, align 1
  %v1_e1ec = add i32 %v2_e1d4, 2
  store i32 %v1_e1ec, i32* %r2.global-to-local, align 4
  %v4_e1f0 = inttoptr i32 %v1_e1ec to i8*
  store i8 0, i8* %v4_e1f0, align 1
  %v0_e1f4 = load i32, i32* @lr, align 4
  %v1_e1f4 = trunc i32 %v0_e1f4 to i8
  %v2_e1f4 = load i32, i32* %r2.global-to-local, align 4
  %v3_e1f4 = add i32 %v2_e1f4, 3
  %v4_e1f4 = inttoptr i32 %v3_e1f4 to i8*
  store i8 %v1_e1f4, i8* %v4_e1f4, align 1
  %v0_e1f8 = load i32, i32* @lr, align 4
  %v1_e1f8 = trunc i32 %v0_e1f8 to i8
  %v2_e1f8 = load i32, i32* %r2.global-to-local, align 4
  %v3_e1f8 = add i32 %v2_e1f8, 1
  %v4_e1f8 = inttoptr i32 %v3_e1f8 to i8*
  store i8 %v1_e1f8, i8* %v4_e1f8, align 1
  %v0_e1fc = load i32, i32* %ip.global-to-local, align 4
  %v1_e1fc = trunc i32 %v0_e1fc to i8
  %v2_e1fc = load i32, i32* %r2.global-to-local, align 4
  %v3_e1fc = add i32 %v2_e1fc, 2
  %v4_e1fc = inttoptr i32 %v3_e1fc to i8*
  store i8 %v1_e1fc, i8* %v4_e1fc, align 1
  %v0_e200 = load i32, i32* @r4, align 4
  store i32 %v0_e200, i32* %stack_var_-40, align 4
  %v8_e204 = icmp sgt i32 %v1_dca0, %v1_e1d8
  br i1 %v8_e204, label %dec_label_pc_e060, label %dec_label_pc_e208

dec_label_pc_e208:                                ; preds = %dec_label_pc_e1c8, %dec_label_pc_e3d4
  %v4_e278.pre-phi = phi i32 [ %v4_e3d8, %dec_label_pc_e3d4 ], [ %v4_dfac, %dec_label_pc_e1c8 ]
  store i32 %v1_dca0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_df84, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e214

dec_label_pc_e214:                                ; preds = %dec_label_pc_e214, %dec_label_pc_e338, %dec_label_pc_e208
  br i1 %v2_df84, label %dec_label_pc_e214, label %dec_label_pc_e218

dec_label_pc_e218:                                ; preds = %dec_label_pc_e214
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_e228 = load i32, i32* @fp, align 4
  %v1_e228 = add i32 %v0_e228, 27
  store i32 %v1_e228, i32* @sb, align 4
  %v1_e22c = add i32 %v0_e228, 47
  store i32 %v1_e22c, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_e234

dec_label_pc_e234:                                ; preds = %dec_label_pc_e274.dec_label_pc_e234_crit_edge, %dec_label_pc_e218
  %v1_e254 = phi i32 [ %v1_e240.pre, %dec_label_pc_e274.dec_label_pc_e234_crit_edge ], [ 65535, %dec_label_pc_e218 ]
  %v1_e23c = phi i32 [ %v1_e324, %dec_label_pc_e274.dec_label_pc_e234_crit_edge ], [ 0, %dec_label_pc_e218 ]
  store i32 %v2_dcb8, i32* %r3.global-to-local, align 4
  store i32 %v3_df74, i32* %r8.global-to-local, align 4
  %v4_e23c = mul i32 %v1_e23c, 4
  %v5_e23c = add i32 %v4_e23c, %v2_dcb8
  %v6_e23c = inttoptr i32 %v5_e23c to i32*
  %v7_e23c = load i32, i32* %v6_e23c, align 4
  store i32 %v7_e23c, i32* @r4, align 4
  %v9_e240 = icmp eq i32 %v3_df74, %v1_e254
  store i1 %v9_e240, i1* %cpsr_z.global-to-local, align 1
  %v1_e244 = add i32 %v7_e23c, 20
  store i32 %v1_e244, i32* @r5, align 4
  %v1_e248 = add i32 %v7_e23c, 28
  store i32 %v1_e248, i32* @r8, align 4
  br i1 %v9_e240, label %dec_label_pc_e348, label %dec_label_pc_e250

dec_label_pc_e250:                                ; preds = %dec_label_pc_e234
  store i32 %v3_df78, i32* %ip.global-to-local, align 4
  %v9_e254 = icmp eq i32 %v3_df78, %v1_e254
  store i1 %v9_e254, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e254, label %dec_label_pc_e364, label %dec_label_pc_e25c

dec_label_pc_e25c:                                ; preds = %dec_label_pc_e348.dec_label_pc_e25c_crit_edge, %dec_label_pc_e250
  %v1_e260 = phi i32 [ %v1_e260.pre, %dec_label_pc_e348.dec_label_pc_e25c_crit_edge ], [ %v1_e254, %dec_label_pc_e250 ]
  store i32 %v3_df7c, i32* @lr, align 4
  %v9_e260 = icmp eq i32 %v3_df7c, %v1_e260
  store i1 %v9_e260, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e260, label %dec_label_pc_e380, label %dec_label_pc_e268

dec_label_pc_e268:                                ; preds = %dec_label_pc_e364.dec_label_pc_e268_crit_edge, %dec_label_pc_e25c
  %v1_e26c = phi i32 [ %v1_e26c.pre, %dec_label_pc_e364.dec_label_pc_e268_crit_edge ], [ %v1_e260, %dec_label_pc_e25c ]
  store i32 %v3_df80, i32* %r0.global-to-local, align 4
  %v9_e26c = icmp eq i32 %v3_df80, %v1_e26c
  store i1 %v9_e26c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_e26c, label %dec_label_pc_e39c, label %dec_label_pc_e274

dec_label_pc_e274:                                ; preds = %dec_label_pc_e380, %dec_label_pc_e268, %dec_label_pc_e39c
  %v0_e274 = load i32, i32* @r4, align 4
  %v1_e274 = add i32 %v0_e274, 41
  store i32 %v1_e274, i32* %r0.global-to-local, align 4
  store i32 %v4_e278.pre-phi, i32* %r1.global-to-local, align 4
  %v2_e27c = call i32 @function_fcd0(i32 %v1_e274, i32 %v4_e278.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_e284 = load i32, i32* @r7, align 4
  %v1_e284 = trunc i32 %v0_e284 to i8
  %v2_e284 = load i32, i32* @r4, align 4
  %v3_e284 = add i32 %v2_e284, 10
  %v4_e284 = inttoptr i32 %v3_e284 to i8*
  store i8 %v1_e284, i8* %v4_e284, align 1
  %v0_e288 = load i32, i32* @r7, align 4
  %v1_e288 = trunc i32 %v0_e288 to i8
  %v2_e288 = load i32, i32* @r4, align 4
  %v3_e288 = add i32 %v2_e288, 11
  %v4_e288 = inttoptr i32 %v3_e288 to i8*
  store i8 %v1_e288, i8* %v4_e288, align 1
  %v0_e28c = load i32, i32* @r4, align 4
  store i32 %v0_e28c, i32* @r0, align 4
  %v2_e290 = call i32 @function_e444(i32 %v0_e28c, i32 20)
  %v3_e290 = trunc i32 %v2_e290 to i8
  store i32 %v2_e290, i32* %r0.global-to-local, align 4
  %v4_e294 = sdiv i32 %v2_e290, 256
  store i32 %v4_e294, i32* %r3.global-to-local, align 4
  %v1_e298 = trunc i32 %v4_e294 to i8
  %v2_e298 = load i32, i32* @r4, align 4
  %v3_e298 = add i32 %v2_e298, 11
  %v4_e298 = inttoptr i32 %v3_e298 to i8*
  store i8 %v1_e298, i8* %v4_e298, align 1
  %v3_e29c = load i32, i32* @r4, align 4
  %v4_e29c = add i32 %v3_e29c, 10
  %v5_e29c = inttoptr i32 %v4_e29c to i8*
  store i8 %v3_e290, i8* %v5_e29c, align 1
  %v0_e2a0 = load i32, i32* @r7, align 4
  %v1_e2a0 = trunc i32 %v0_e2a0 to i8
  %v2_e2a0 = load i32, i32* @r5, align 4
  %v3_e2a0 = add i32 %v2_e2a0, 6
  %v4_e2a0 = inttoptr i32 %v3_e2a0 to i8*
  store i8 %v1_e2a0, i8* %v4_e2a0, align 1
  %v0_e2a4 = load i32, i32* @r7, align 4
  %v1_e2a4 = trunc i32 %v0_e2a4 to i8
  %v2_e2a4 = load i32, i32* @r5, align 4
  %v3_e2a4 = add i32 %v2_e2a4, 7
  %v4_e2a4 = inttoptr i32 %v3_e2a4 to i8*
  store i8 %v1_e2a4, i8* %v4_e2a4, align 1
  %v0_e2a8 = load i32, i32* @r4, align 4
  %v1_e2a8 = add i32 %v0_e2a8, 24
  %v2_e2a8 = inttoptr i32 %v1_e2a8 to i8*
  %v3_e2a8 = load i8, i8* %v2_e2a8, align 1
  %v4_e2a8 = zext i8 %v3_e2a8 to i32
  store i32 %v4_e2a8, i32* %r3.global-to-local, align 4
  %v1_e2ac = add i32 %v0_e2a8, 25
  %v2_e2ac = inttoptr i32 %v1_e2ac to i8*
  %v3_e2ac = load i8, i8* %v2_e2ac, align 1
  %v4_e2ac = zext i8 %v3_e2ac to i32
  %v0_e2b0 = load i32, i32* @r5, align 4
  store i32 %v0_e2b0, i32* @r1, align 4
  %v4_e2b4 = mul nuw nsw i32 %v4_e2ac, 256
  %v5_e2b4 = or i32 %v4_e2b4, %v4_e2a8
  store i32 %v5_e2b4, i32* %r2.global-to-local, align 4
  store i32 %v0_e2a8, i32* %r0.global-to-local, align 4
  %v0_e2bc = load i32, i32* @sb, align 4
  store i32 %v0_e2bc, i32* %r3.global-to-local, align 4
  %v4_e2c0 = call i32 @function_e4a0(i32 %v0_e2a8, i32 %v0_e2b0, i32 %v5_e2b4, i32 %v0_e2bc)
  %v5_e2c0 = trunc i32 %v4_e2c0 to i8
  store i32 %v4_e2c0, i32* %r0.global-to-local, align 4
  %v3_e2c4 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_e2d4 = mul i32 %v3_e2c4, 24
  %v2_e2d8 = add i32 %v5_e2d4, %arg2
  store i32 %v2_e2d8, i32* %lr.global-to-local, align 4
  %v4_e2dc = sdiv i32 %v4_e2c0, 256
  store i32 %v4_e2dc, i32* %r3.global-to-local, align 4
  %v3_e2e0 = load i32, i32* @r5, align 4
  %v4_e2e0 = add i32 %v3_e2e0, 6
  %v5_e2e0 = inttoptr i32 %v4_e2e0 to i8*
  store i8 %v5_e2c0, i8* %v5_e2e0, align 1
  %v0_e2e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e2e4 = trunc i32 %v0_e2e4 to i8
  %v2_e2e4 = load i32, i32* @r5, align 4
  %v3_e2e4 = add i32 %v2_e2e4, 7
  %v4_e2e4 = inttoptr i32 %v3_e2e4 to i8*
  store i8 %v1_e2e4, i8* %v4_e2e4, align 1
  %v0_e2e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_e2e8 = load i32, i32* %lr.global-to-local, align 4
  %v2_e2e8 = add i32 %v1_e2e8, 4
  %v3_e2e8 = inttoptr i32 %v2_e2e8 to i32*
  store i32 %v0_e2e8, i32* %v3_e2e8, align 4
  %v0_e2ec = load i32, i32* @r4, align 4
  %v1_e2ec = add i32 %v0_e2ec, 20
  %v2_e2ec = inttoptr i32 %v1_e2ec to i32*
  %v3_e2ec = load i32, i32* %v2_e2ec, align 4
  %v3_e2f0 = udiv i32 %v3_e2ec, 65536
  store i32 %v3_e2f0, i32* %r3.global-to-local, align 4
  %v3_e2f412 = udiv i32 %v3_e2ec, 16777216
  %v1_e2f8 = trunc i32 %v3_e2f412 to i8
  %v2_e2f8 = load i32, i32* %lr.global-to-local, align 4
  %v3_e2f8 = add i32 %v2_e2f8, 3
  %v4_e2f8 = inttoptr i32 %v3_e2f8 to i8*
  store i8 %v1_e2f8, i8* %v4_e2f8, align 1
  %v0_e2fc = load i32, i32* %r3.global-to-local, align 4
  %v1_e2fc = trunc i32 %v0_e2fc to i8
  %v2_e2fc = load i32, i32* %lr.global-to-local, align 4
  %v3_e2fc = add i32 %v2_e2fc, 2
  %v4_e2fc = inttoptr i32 %v3_e2fc to i8*
  store i8 %v1_e2fc, i8* %v4_e2fc, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e308 = load i32, i32* @r4, align 4
  store i32 %v0_e308, i32* %r1.global-to-local, align 4
  store i32 %v3_df14, i32* %r0.global-to-local, align 4
  %v0_e310 = load i32, i32* @sl, align 4
  store i32 %v0_e310, i32* %r2.global-to-local, align 4
  %v0_e314 = load i32, i32* %lr.global-to-local, align 4
  %v6_e31c = inttoptr i32 %v0_e308 to i32*
  %v7_e31c = call i32 @function_13d4c(i32 %v3_df14, i32* %v6_e31c, i32 %v0_e310, i32 16384, i32 %v0_e314, i32 16)
  %v3_e320 = load i32, i32* %stack_var_-40, align 4
  %v1_e324 = add i32 %v3_e320, 1
  store i32 %v1_e324, i32* %r0.global-to-local, align 4
  store i32 %v1_dca0, i32* %r3.global-to-local, align 4
  %v9_e32c = icmp eq i32 %v1_dca0, %v1_e324
  store i1 %v9_e32c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_e324, i32* %stack_var_-40, align 4
  %v8_e334 = icmp sgt i32 %v1_dca0, %v1_e324
  br i1 %v8_e334, label %dec_label_pc_e274.dec_label_pc_e234_crit_edge, label %dec_label_pc_e338

dec_label_pc_e274.dec_label_pc_e234_crit_edge:    ; preds = %dec_label_pc_e274
  %v1_e240.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e234

dec_label_pc_e338:                                ; preds = %dec_label_pc_e274
  store i32 %v1_dca0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_e214

dec_label_pc_e348:                                ; preds = %dec_label_pc_e234
  %v0_e348 = call i32 @function_fc1c()
  %v1_e348 = trunc i32 %v0_e348 to i8
  store i32 %v0_e348, i32* %r0.global-to-local, align 4
  store i32 %v3_df78, i32* %ip.global-to-local, align 4
  %v4_e350 = sdiv i32 %v0_e348, 256
  store i32 %v4_e350, i32* %r3.global-to-local, align 4
  %v1_e354 = load i32, i32* @r6, align 4
  %v9_e354 = icmp eq i32 %v3_df78, %v1_e354
  store i1 %v9_e354, i1* %cpsr_z.global-to-local, align 1
  %v1_e358 = trunc i32 %v4_e350 to i8
  %v2_e358 = load i32, i32* @r4, align 4
  %v3_e358 = add i32 %v2_e358, 5
  %v4_e358 = inttoptr i32 %v3_e358 to i8*
  store i8 %v1_e358, i8* %v4_e358, align 1
  %v3_e35c = load i32, i32* @r4, align 4
  %v4_e35c = add i32 %v3_e35c, 4
  %v5_e35c = inttoptr i32 %v4_e35c to i8*
  store i8 %v1_e348, i8* %v5_e35c, align 1
  %v0_e360 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e360, label %dec_label_pc_e364, label %dec_label_pc_e348.dec_label_pc_e25c_crit_edge

dec_label_pc_e348.dec_label_pc_e25c_crit_edge:    ; preds = %dec_label_pc_e348
  %v1_e260.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e25c

dec_label_pc_e364:                                ; preds = %dec_label_pc_e348, %dec_label_pc_e250
  %v0_e364 = call i32 @function_fc1c()
  %v1_e364 = trunc i32 %v0_e364 to i8
  store i32 %v0_e364, i32* %r0.global-to-local, align 4
  store i32 %v3_df7c, i32* @lr, align 4
  %v4_e36c = sdiv i32 %v0_e364, 256
  store i32 %v4_e36c, i32* %r3.global-to-local, align 4
  %v1_e370 = load i32, i32* @r6, align 4
  %v9_e370 = icmp eq i32 %v3_df7c, %v1_e370
  store i1 %v9_e370, i1* %cpsr_z.global-to-local, align 1
  %v3_e374 = load i32, i32* @r4, align 4
  %v4_e374 = add i32 %v3_e374, 20
  %v5_e374 = inttoptr i32 %v4_e374 to i8*
  store i8 %v1_e364, i8* %v5_e374, align 1
  %v0_e378 = load i32, i32* %r3.global-to-local, align 4
  %v1_e378 = trunc i32 %v0_e378 to i8
  %v2_e378 = load i32, i32* @r5, align 4
  %v3_e378 = add i32 %v2_e378, 1
  %v4_e378 = inttoptr i32 %v3_e378 to i8*
  store i8 %v1_e378, i8* %v4_e378, align 1
  %v0_e37c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e37c, label %dec_label_pc_e380, label %dec_label_pc_e364.dec_label_pc_e268_crit_edge

dec_label_pc_e364.dec_label_pc_e268_crit_edge:    ; preds = %dec_label_pc_e364
  %v1_e26c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e268

dec_label_pc_e380:                                ; preds = %dec_label_pc_e364, %dec_label_pc_e25c
  %v0_e380 = call i32 @function_fc1c()
  %v1_e380 = trunc i32 %v0_e380 to i8
  %v4_e384 = sdiv i32 %v0_e380, 256
  store i32 %v4_e384, i32* %r3.global-to-local, align 4
  %v3_e388 = load i32, i32* @r5, align 4
  %v4_e388 = add i32 %v3_e388, 2
  %v5_e388 = inttoptr i32 %v4_e388 to i8*
  store i8 %v1_e380, i8* %v5_e388, align 1
  store i32 %v3_df80, i32* %r0.global-to-local, align 4
  %v1_e390 = load i32, i32* @r6, align 4
  %v9_e390 = icmp eq i32 %v3_df80, %v1_e390
  store i1 %v9_e390, i1* %cpsr_z.global-to-local, align 1
  %v0_e394 = load i32, i32* %r3.global-to-local, align 4
  %v1_e394 = trunc i32 %v0_e394 to i8
  %v2_e394 = load i32, i32* @r5, align 4
  %v3_e394 = add i32 %v2_e394, 3
  %v4_e394 = inttoptr i32 %v3_e394 to i8*
  store i8 %v1_e394, i8* %v4_e394, align 1
  %v0_e398 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e398, label %dec_label_pc_e39c, label %dec_label_pc_e274

dec_label_pc_e39c:                                ; preds = %dec_label_pc_e380, %dec_label_pc_e268
  %v0_e39c = call i32 @function_fc1c()
  %v1_e39c = trunc i32 %v0_e39c to i8
  store i32 %v0_e39c, i32* %r0.global-to-local, align 4
  %v4_e3a0 = sdiv i32 %v0_e39c, 256
  store i32 %v4_e3a0, i32* %r3.global-to-local, align 4
  %v3_e3a4 = load i32, i32* @r4, align 4
  %v4_e3a4 = add i32 %v3_e3a4, 28
  %v5_e3a4 = inttoptr i32 %v4_e3a4 to i8*
  store i8 %v1_e39c, i8* %v5_e3a4, align 1
  %v0_e3a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_e3a8 = trunc i32 %v0_e3a8 to i8
  %v2_e3a8 = load i32, i32* @r8, align 4
  %v3_e3a8 = add i32 %v2_e3a8, 1
  %v4_e3a8 = inttoptr i32 %v3_e3a8 to i8*
  store i8 %v1_e3a8, i8* %v4_e3a8, align 1
  br label %dec_label_pc_e274

dec_label_pc_e3b0:                                ; preds = %dec_label_pc_de7c, %dec_label_pc_de48, %dec_label_pc_ddec, %dec_label_pc_dc94
  %v0_e3b0 = call i32 @function_fc1c()
  %v1_e3b4 = urem i32 %v0_e3b0, 4
  store i32 %v1_e3b4, i32* %r0.global-to-local, align 4
  %v2_e3b8 = icmp eq i32 %v1_e3b4, 3
  store i1 %v2_e3b8, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_e3b0 to i2
  switch i2 %trunc, label %dec_label_pc_def020 [
    i2 0, label %dec_label_pc_e3f8
    i2 1, label %dec_label_pc_e40c
    i2 -2, label %dec_label_pc_e418
    i2 -1, label %dec_label_pc_e428
  ]

dec_label_pc_e3d4:                                ; preds = %dec_label_pc_df50
  store i32 %v2_df00, i32* %r0.global-to-local, align 4
  %v4_e3d8 = sext i8 %v5_df6c to i32
  store i32 %v4_e3d8, i32* %r1.global-to-local, align 4
  %v2_e3dc = add i32 %v4_e3d8, %v2_df00
  store i32 %v2_e3dc, i32* @fp, align 4
  br label %dec_label_pc_e208

dec_label_pc_e3e4:                                ; preds = %dec_label_pc_df24
  store i32 %v3_df14, i32* %r0.global-to-local, align 4
  %v1_e3e8 = call i32 @function_134b0(i32 %v3_df14)
  store i32 %v1_e3e8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e3ec

dec_label_pc_e3ec:                                ; preds = %dec_label_pc_defc, %dec_label_pc_def0, %dec_label_pc_e3e4
  %v29_e3f4 = phi i32 [ %v3_df14, %dec_label_pc_defc ], [ %v29_e3f474, %dec_label_pc_def0 ], [ %v1_e3e8, %dec_label_pc_e3e4 ]
  store i32 %v3_dc94, i32* %r4.global-to-local, align 4
  store i32 %v15_dc94, i32* %r8.global-to-local, align 4
  store i32 %v18_dc94, i32* %sb.global-to-local, align 4
  store i32 %v21_dc94, i32* %sl.global-to-local, align 4
  store i32 %v24_dc94, i32* %fp.global-to-local, align 4
  ret i32 %v29_e3f4

dec_label_pc_e3f8:                                ; preds = %dec_label_pc_e3b0
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_def0

dec_label_pc_e40c:                                ; preds = %dec_label_pc_e3b0
  store i32 707416650, i32* @r4, align 4
  br label %dec_label_pc_def0

dec_label_pc_e418:                                ; preds = %dec_label_pc_e3b0
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_def0

dec_label_pc_e428:                                ; preds = %dec_label_pc_e3b0
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_def0

; uselistorder directives
  uselistorder i32 %v4_e3d8, { 0, 2, 1 }
  uselistorder i32 %v1_e3b4, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_e3b0, { 1, 0 }
  uselistorder i32 %v0_e39c, { 0, 2, 1 }
  uselistorder i32 %v0_e364, { 0, 2, 1 }
  uselistorder i32 %v4_e350, { 1, 0 }
  uselistorder i32 %v0_e348, { 0, 2, 1 }
  uselistorder i32 %v1_e324, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_e2c0, { 0, 2, 1 }
  uselistorder i32 %v0_e2a8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_e294, { 1, 0 }
  uselistorder i32 %v2_e290, { 0, 2, 1 }
  uselistorder i32 %v7_e23c, { 1, 0, 2 }
  uselistorder i32 %v4_e278.pre-phi, { 1, 0 }
  uselistorder i32 %v2_e1bc, { 1, 0 }
  uselistorder i32 %v1_e1b086, { 1, 0, 2 }
  uselistorder i32 %v1_e1a4, { 2, 1, 0 }
  uselistorder i32 %v0_e1a4, { 1, 2, 0 }
  uselistorder i32 %v0_e1a432, { 1, 0 }
  uselistorder i32 %v1_e1a433, { 2, 0, 1 }
  uselistorder i8 %extract.t78, { 1, 0 }
  uselistorder i32 %v1_e178, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_e0f4, { 1, 0 }
  uselistorder i32 %v3_e030, { 1, 0, 2 }
  uselistorder i32 %v1_dff8, { 1, 0 }
  uselistorder i32 %v1_dfec, { 1, 0 }
  uselistorder i32 %v1_dfd0, { 1, 0 }
  uselistorder i32 %v1_dfbc, { 1, 0 }
  uselistorder i32 %v3_dfb4, { 1, 0 }
  uselistorder i32 %v4_dfac, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_df6c, { 1, 0 }
  uselistorder i32 %v0_df68, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_df5c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_df48, { 1, 0 }
  uselistorder i1 %v7_df18, { 1, 0 }
  uselistorder i32 %v3_df14, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_df00, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v1_dee8, { 1, 0, 2 }
  uselistorder i1 %v7_deb8, { 1, 0 }
  uselistorder i32 %v1_deb4, { 1, 0, 2 }
  uselistorder i1 %v8_deac, { 1, 0 }
  uselistorder i1 %v7_dea8, { 1, 0 }
  uselistorder i32 %v1_de9c, { 1, 0 }
  uselistorder i8 %v2_de90, { 2, 0, 1, 3 }
  uselistorder i32 %v0_de94, { 1, 0 }
  uselistorder i32 %v0_deb4, { 3, 0, 2, 1 }
  uselistorder i32 %v0_de80, { 0, 2, 1 }
  uselistorder i32 %v1_de98, { 0, 2, 1 }
  uselistorder i32 %v2_de68, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v2_de60, { 1, 0, 2, 3 }
  uselistorder i32 %v0_de48, { 1, 2, 0, 3, 4, 5 }
  uselistorder i1 %v7_de40, { 1, 0 }
  uselistorder i32 %v0_de40, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder i32 %v0_dde4, { 1, 0, 3, 2 }
  uselistorder i32 %v6_ddb4, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_dd38, { 1, 0 }
  uselistorder i32 %v7_dcf4, { 0, 1, 2, 4, 3 }
  uselistorder i8 %v5_dcf0, { 1, 0 }
  uselistorder i32 %v6_dcd0, { 1, 0 }
  uselistorder i32 %v2_dcb8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_dca0, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 9, 6, 7, 8 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 51, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 46, 45, 47, 49, 48, 51, 50, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 2, 3, 4, 7, 6, 8, 10, 9, 11, 13, 12, 14, 15, 16, 17, 1, 18, 19, 68, 33, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 34, 35, 36, 38, 40, 39, 41, 42, 43, 45, 44, 47, 46, 48, 49, 51, 50, 52, 54, 53, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 21, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 41, { 4, 5, 6, 0, 2, 7, 1, 8, 3, 9 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_a4e8, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 90, 91 }
  uselistorder label %dec_label_pc_e3ec, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e274, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e214, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e208, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %.thread21, { 1, 0 }
  uselistorder label %dec_label_pc_dec4, { 1, 0 }
  uselistorder label %dec_label_pc_deb8, { 1, 0 }
  uselistorder label %dec_label_pc_de7c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_de74, { 1, 0 }
}

define i32 @function_e444(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e444:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_e474, label %dec_label_pc_e450

dec_label_pc_e450:                                ; preds = %dec_label_pc_e444
  %v0_e454.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_e454

dec_label_pc_e454:                                ; preds = %dec_label_pc_e454, %dec_label_pc_e450
  %v0_e468 = phi i32 [ %v2_e468, %dec_label_pc_e454 ], [ 0, %dec_label_pc_e450 ]
  %v0_e45c = phi i32 [ %v1_e45c, %dec_label_pc_e454 ], [ %arg1, %dec_label_pc_e450 ]
  %v0_e46c = phi i32 [ %v1_e46c, %dec_label_pc_e454 ], [ %v0_e454.pre, %dec_label_pc_e450 ]
  %v1_e454 = inttoptr i32 %v0_e46c to i8*
  %v2_e454 = load i8, i8* %v1_e454, align 1
  %v3_e454 = zext i8 %v2_e454 to i32
  %v1_e458 = add i32 %v0_e46c, 1
  %v2_e458 = inttoptr i32 %v1_e458 to i8*
  %v3_e458 = load i8, i8* %v2_e458, align 1
  %v4_e458 = zext i8 %v3_e458 to i32
  %v1_e45c = add i32 %v0_e45c, -2
  %v4_e460 = mul nuw nsw i32 %v4_e458, 256
  %v5_e460 = or i32 %v4_e460, %v3_e454
  %v2_e468 = add i32 %v5_e460, %v0_e468
  %v1_e46c = add i32 %v0_e46c, 2
  store i32 %v1_e46c, i32* @r0, align 4
  %v1_e45c.cmp = icmp ugt i32 %v1_e45c, 1
  br i1 %v1_e45c.cmp, label %dec_label_pc_e454, label %dec_label_pc_e474

dec_label_pc_e474:                                ; preds = %dec_label_pc_e454, %dec_label_pc_e444
  %v1_e47c = phi i32 [ 0, %dec_label_pc_e444 ], [ %v2_e468, %dec_label_pc_e454 ]
  %v0_e474 = phi i32 [ %arg1, %dec_label_pc_e444 ], [ %v1_e45c, %dec_label_pc_e454 ]
  %v7_e474 = icmp eq i32 %v0_e474, 1
  br i1 %v7_e474, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e474
  %v1_e478 = load i32, i32* @r0, align 4
  %v2_e478 = inttoptr i32 %v1_e478 to i8*
  %v3_e478 = load i8, i8* %v2_e478, align 1
  %v4_e478 = zext i8 %v3_e478 to i32
  %v3_e47c = add i32 %v1_e47c, %v4_e478
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e474, %bb
  %v0_e480 = phi i32 [ %v1_e47c, %dec_label_pc_e474 ], [ %v3_e47c, %bb ]
  %v3_e484 = urem i32 %v0_e480, 65536
  %v4_e488 = udiv i32 %v0_e480, 65536
  %v5_e488 = add nuw nsw i32 %v4_e488, %v3_e484
  %v4_e48c = udiv i32 %v5_e488, 65536
  %v5_e48c = add nuw nsw i32 %v4_e48c, %v5_e488
  %v1_e490 = urem i32 %v5_e48c, 65536
  %v3_e498 = xor i32 %v1_e490, 65535
  ret i32 %v3_e498

; uselistorder directives
  uselistorder i32 %v5_e488, { 1, 0 }
  uselistorder i32 %v1_e46c, { 1, 0 }
  uselistorder i32 %v1_e45c, { 1, 0, 2 }
  uselistorder i32 %v0_e46c, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_e4a0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_e4a0:
  %v3_e4b0 = urem i32 %arg2, 65536
  %v1_e4b4 = add i32 %arg1, 12
  %v1_e4b8 = inttoptr i32 %v1_e4b4 to i32*
  %v2_e4b8 = load i32, i32* %v1_e4b8, align 4
  %v3_e4b8 = add i32 %arg1, 16
  %v4_e4b8 = inttoptr i32 %v3_e4b8 to i32*
  %v5_e4b8 = load i32, i32* %v4_e4b8, align 4
  %v7_e4bc = icmp sgt i32 %arg3, 1
  br i1 %v7_e4bc, label %dec_label_pc_e4c8.preheader, label %dec_label_pc_e4e8

dec_label_pc_e4c8.preheader:                      ; preds = %dec_label_pc_e4a0
  %v0_e4c8.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_e4c8

dec_label_pc_e4c8:                                ; preds = %dec_label_pc_e4c8.preheader, %dec_label_pc_e4c8
  %v0_e4dc = phi i32 [ 0, %dec_label_pc_e4c8.preheader ], [ %v2_e4dc, %dec_label_pc_e4c8 ]
  %v0_e4d0 = phi i32 [ %arg3, %dec_label_pc_e4c8.preheader ], [ %v1_e4d0, %dec_label_pc_e4c8 ]
  %v0_e4e0 = phi i32 [ %v0_e4c8.pre, %dec_label_pc_e4c8.preheader ], [ %v1_e4e0, %dec_label_pc_e4c8 ]
  %v1_e4c8 = inttoptr i32 %v0_e4e0 to i8*
  %v2_e4c8 = load i8, i8* %v1_e4c8, align 1
  %v3_e4c8 = zext i8 %v2_e4c8 to i32
  %v1_e4cc = add i32 %v0_e4e0, 1
  %v2_e4cc = inttoptr i32 %v1_e4cc to i8*
  %v3_e4cc = load i8, i8* %v2_e4cc, align 1
  %v4_e4cc = zext i8 %v3_e4cc to i32
  %v1_e4d0 = add nsw i32 %v0_e4d0, -2
  %v4_e4d4 = mul nuw nsw i32 %v4_e4cc, 256
  %v5_e4d4 = or i32 %v4_e4d4, %v3_e4c8
  %v2_e4dc = add i32 %v5_e4d4, %v0_e4dc
  %v1_e4e0 = add i32 %v0_e4e0, 2
  store i32 %v1_e4e0, i32* @r1, align 4
  %v8_e4e4 = icmp sgt i32 %v1_e4d0, 1
  br i1 %v8_e4e4, label %dec_label_pc_e4c8, label %dec_label_pc_e4e8

dec_label_pc_e4e8:                                ; preds = %dec_label_pc_e4c8, %dec_label_pc_e4a0
  %v1_e4f0 = phi i32 [ 0, %dec_label_pc_e4a0 ], [ %v2_e4dc, %dec_label_pc_e4c8 ]
  %v0_e4e8 = phi i32 [ %arg3, %dec_label_pc_e4a0 ], [ %v1_e4d0, %dec_label_pc_e4c8 ]
  %v7_e4e8 = icmp eq i32 %v0_e4e8, 1
  br i1 %v7_e4e8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_e4e8
  %v1_e4ec = load i32, i32* @r1, align 4
  %v2_e4ec = inttoptr i32 %v1_e4ec to i8*
  %v3_e4ec = load i8, i8* %v2_e4ec, align 1
  %v4_e4ec = zext i8 %v3_e4ec to i32
  %v3_e4f0 = add i32 %v4_e4ec, %v1_e4f0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e4e8, %bb
  %v0_e514 = phi i32 [ %v1_e4f0, %dec_label_pc_e4e8 ], [ %v3_e4f0, %bb ]
  %v3_e4f8 = urem i32 %v2_e4b8, 65536
  %v1_e500 = add i32 %arg1, 9
  %v2_e500 = inttoptr i32 %v1_e500 to i8*
  %v3_e500 = load i8, i8* %v2_e500, align 1
  %v4_e500 = zext i8 %v3_e500 to i32
  %v3_e504 = urem i32 %v5_e4b8, 65536
  %v4_e508 = udiv i32 %v2_e4b8, 65536
  %v3_e510 = mul nuw nsw i32 %v4_e500, 256
  %v4_e514 = udiv i32 %v5_e4b8, 65536
  %v5_e514 = add i32 %v0_e514, %v4_e514
  %v2_e518 = add i32 %v5_e514, %v3_e510
  %v5_e508 = add nuw nsw i32 %v3_e4f8, %v3_e4b0
  %v2_e50c = add nuw nsw i32 %v5_e508, %v4_e508
  %v2_e51c = add nuw nsw i32 %v2_e50c, %v3_e504
  %v2_e520 = add i32 %v2_e518, %v2_e51c
  %tmp = icmp ult i32 %v2_e520, 65536
  br i1 %tmp, label %dec_label_pc_e540, label %dec_label_pc_e52c

dec_label_pc_e52c:                                ; preds = %.thread, %dec_label_pc_e52c
  %v2_e5341 = phi i32 [ %v2_e534, %dec_label_pc_e52c ], [ %v2_e520, %.thread ]
  %v3_e5382.in = phi i32 [ %v2_e534, %dec_label_pc_e52c ], [ %v2_e520, %.thread ]
  %v3_e5382 = udiv i32 %v3_e5382.in, 65536
  %v3_e530 = urem i32 %v2_e5341, 65536
  %v2_e534 = add nuw nsw i32 %v3_e530, %v3_e5382
  %tmp14 = icmp ult i32 %v2_e534, 65536
  br i1 %tmp14, label %dec_label_pc_e540.loopexit, label %dec_label_pc_e52c

dec_label_pc_e540.loopexit:                       ; preds = %dec_label_pc_e52c
  br label %dec_label_pc_e540

dec_label_pc_e540:                                ; preds = %dec_label_pc_e540.loopexit, %.thread
  %v0_e540 = phi i32 [ %v2_e534, %dec_label_pc_e540.loopexit ], [ %v2_e520, %.thread ]
  %v1_e540 = urem i32 %v0_e540, 65536
  %v3_e548 = xor i32 %v1_e540, 65535
  ret i32 %v3_e548

; uselistorder directives
  uselistorder i32 %v2_e534, { 2, 1, 3, 0 }
  uselistorder i32 %v2_e520, { 3, 0, 2, 1 }
  uselistorder i32 %v1_e4f0, { 1, 0 }
  uselistorder i32 %v1_e4e0, { 1, 0 }
  uselistorder i32 %v1_e4d0, { 0, 2, 1 }
  uselistorder i32 %v0_e4e0, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_e52c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e4c8, { 1, 0 }
}

define i32 @function_e550(i32 %arg1) local_unnamed_addr {
dec_label_pc_e550:
  %v2_e554 = load i32, i32* @global_var_1eb04.96, align 4
  %v2_e55c = call i32 @function_135b0(i32 %v2_e554, i32 9)
  %v0_e560 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e560, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_e550
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_e550, %bb
  ret i32 %v2_e55c

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_e564(i32 %arg1) local_unnamed_addr {
dec_label_pc_e564:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e564 = load i32, i32* @r4, align 4
  store i32 %v3_e564, i32* %stack_var_-36, align 4
  %v6_e564 = load i32, i32* @r5, align 4
  %v9_e564 = load i32, i32* @r6, align 4
  %v12_e564 = load i32, i32* @r7, align 4
  %v15_e564 = load i32, i32* @r8, align 4
  %v18_e564 = load i32, i32* @sb, align 4
  %v21_e564 = load i32, i32* @sl, align 4
  %v24_e564 = load i32, i32* @fp, align 4
  %v2_e578 = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_e578, i32* @sl, align 4
  %v3_e580 = mul i32 %arg1, 65536
  store i32 %v3_e580, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_e58c = ptrtoint i32* %stack_var_-8773 to i32
  %v2_e598 = bitcast i32* %stack_var_-4677 to i8*
  %v3_e598 = call i32 @function_13af0(i8* %v2_e598, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_e5b0 = bitcast i32* %stack_var_-8773 to i8*
  %v3_e5b0 = call i32 @function_13af0(i8* %v2_e5b0, i32 0)
  %v2_e5b4 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_e5b4, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_e5d4 = call i32 @function_13af0(i8* nonnull %stack_var_-581, i32 0)
  %v2_e5d8 = ptrtoint i8* %stack_var_-68 to i32
  %v1_e5e0 = load i32, i32* @r5, align 4
  %v4_e5e0 = udiv i32 %v1_e5e0, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_e600 = trunc i32 %v4_e5e0 to i8
  %v4_e600 = call i32 @function_12fe4(i8 %v3_e600, i32 16, i32 %v2_e5d8)
  %v2_e608 = call i32 @function_12af0(i8* nonnull %stack_var_-68)
  %v7_e60c = icmp eq i32 %v2_e608, 2
  br i1 %v7_e60c, label %dec_label_pc_eaa0, label %dec_label_pc_e614

dec_label_pc_e614:                                ; preds = %dec_label_pc_e564, %dec_label_pc_eaa0
  %v1_e618 = call i32 @function_121c4(i32 6)
  %v1_e620 = call i32 @function_121c4(i32 7)
  %v1_e628 = call i32 @function_121c4(i32 9)
  %v0_e630 = load i32, i32* @r4, align 4
  %v4_e634 = call i32 @function_135dc(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_15dc0.98, i32 0, i32 0), i32 %v0_e630)
  %v7_e638 = icmp eq i32 %v4_e634, -1
  store i32 %v4_e634, i32* @r8, align 4
  br i1 %v7_e638, label %dec_label_pc_ea60, label %dec_label_pc_e644.preheader

dec_label_pc_e644.preheader:                      ; preds = %dec_label_pc_e614
  %v4_e65058 = call i32 @function_12d48(i8* nonnull %stack_var_-581, i32 512, i32 %v4_e634)
  %v2_e65460 = icmp eq i32 %v4_e65058, 0
  br i1 %v2_e65460, label %dec_label_pc_e7e4.loopexit, label %dec_label_pc_e65c.lr.ph

dec_label_pc_e65c.lr.ph:                          ; preds = %dec_label_pc_e644.preheader
  %v2_e6a4 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_e65c

dec_label_pc_e65c:                                ; preds = %dec_label_pc_e65c.lr.ph, %dec_label_pc_e644.backedge
  %v3_e660 = load i8, i8* %stack_var_-581, align 1
  %v4_e660 = sext i8 %v3_e660 to i32
  %v2_e664 = icmp eq i8 %v3_e660, 0
  br i1 %v2_e664, label %bb130, label %bb

bb:                                               ; preds = %dec_label_pc_e65c
  %v8_e668 = icmp eq i8 %v3_e660, 58
  br i1 %v8_e668, label %.thread6, label %dec_label_pc_e67c

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_e694

bb130:                                            ; preds = %dec_label_pc_e65c
  br label %dec_label_pc_e694

dec_label_pc_e67c:                                ; preds = %bb
  %v1_e684.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e680

dec_label_pc_e680:                                ; preds = %bb131, %dec_label_pc_e67c
  %v0_e680 = phi i32 [ %v1_e680, %bb131 ], [ 0, %dec_label_pc_e67c ]
  %v1_e680 = add i32 %v0_e680, 1
  %v2_e684 = add i32 %v1_e680, %v1_e684.pre
  %v3_e684 = inttoptr i32 %v2_e684 to i8*
  %v4_e684 = load i8, i8* %v3_e684, align 1
  %v6_e684 = zext i8 %v4_e684 to i32
  %v2_e688 = icmp eq i8 %v4_e684, 0
  br i1 %v2_e688, label %dec_label_pc_e694, label %bb131

bb131:                                            ; preds = %dec_label_pc_e680
  %v8_e68c = icmp eq i8 %v4_e684, 58
  br i1 %v8_e68c, label %dec_label_pc_e694, label %dec_label_pc_e680

dec_label_pc_e694:                                ; preds = %dec_label_pc_e680, %bb131, %bb130, %.thread6
  %v1_e6c0 = phi i32 [ 0, %.thread6 ], [ 0, %bb130 ], [ %v1_e680, %bb131 ], [ %v1_e680, %dec_label_pc_e680 ]
  %v0_e694 = phi i32 [ %v4_e660, %.thread6 ], [ %v4_e660, %bb130 ], [ %v6_e684, %bb131 ], [ %v6_e684, %dec_label_pc_e680 ]
  %v2_e694 = icmp eq i32 %v0_e694, 0
  br i1 %v2_e694, label %dec_label_pc_e644.backedge, label %dec_label_pc_e69c

dec_label_pc_e644.backedge:                       ; preds = %dec_label_pc_e694, %dec_label_pc_e76c, %dec_label_pc_e7b8, %dec_label_pc_e6e0
  %v0_e64c = load i32, i32* @r8, align 4
  %v4_e650 = call i32 @function_12d48(i8* nonnull %stack_var_-581, i32 512, i32 %v0_e64c)
  %v2_e654 = icmp eq i32 %v4_e650, 0
  br i1 %v2_e654, label %dec_label_pc_e7e4.loopexit, label %dec_label_pc_e65c

dec_label_pc_e69c:                                ; preds = %dec_label_pc_e694
  %v1_e6a0 = add i32 %v1_e6c0, 2
  %v2_e6a8 = add i32 %v1_e6a0, %v2_e6a4
  %v1_e6ac = add i32 %v2_e6a8, -545
  %v2_e6ac = inttoptr i32 %v1_e6ac to i8*
  %v3_e6ac = load i8, i8* %v2_e6ac, align 1
  %v2_e6b0 = icmp eq i8 %v3_e6ac, 0
  br i1 %v2_e6b0, label %bb133, label %bb132

bb132:                                            ; preds = %dec_label_pc_e69c
  %v8_e6b4 = icmp eq i8 %v3_e6ac, 32
  br i1 %v8_e6b4, label %.thread10, label %dec_label_pc_e6c0

.thread10:                                        ; preds = %bb132
  store i32 %v1_e6a0, i32* @r5, align 4
  br label %dec_label_pc_e6e0

bb133:                                            ; preds = %dec_label_pc_e69c
  store i32 %v1_e6a0, i32* @r5, align 4
  br label %dec_label_pc_e6e0

dec_label_pc_e6c0:                                ; preds = %bb132
  %v0_e6c0 = load i32, i32* @r6, align 4
  %v2_e6c0 = add i32 %v0_e6c0, %v1_e6c0
  br label %dec_label_pc_e6c4

dec_label_pc_e6c4:                                ; preds = %bb134, %dec_label_pc_e6c0
  %v0_e6d013 = phi i32 [ %v1_e6d0, %bb134 ], [ %v2_e6c0, %dec_label_pc_e6c0 ]
  %v1_e6c4 = add i32 %v0_e6d013, 3
  %v2_e6c4 = inttoptr i32 %v1_e6c4 to i8*
  %v3_e6c4 = load i8, i8* %v2_e6c4, align 1
  %v2_e6c8 = icmp eq i8 %v3_e6c4, 0
  br i1 %v2_e6c8, label %.thread12, label %bb134

.thread12:                                        ; preds = %dec_label_pc_e6c4
  %v1_e6d014 = add i32 %v0_e6d013, 1
  br label %dec_label_pc_e6d8

bb134:                                            ; preds = %dec_label_pc_e6c4
  %v8_e6cc = icmp eq i8 %v3_e6c4, 32
  %v1_e6d0 = add i32 %v0_e6d013, 1
  br i1 %v8_e6cc, label %dec_label_pc_e6d8, label %dec_label_pc_e6c4

dec_label_pc_e6d8:                                ; preds = %bb134, %.thread12
  %v1_e6d015 = phi i32 [ %v1_e6d014, %.thread12 ], [ %v1_e6d0, %bb134 ]
  %v2_e6d8 = sub i32 %v1_e6d015, %v0_e6c0
  %v1_e6dc = add i32 %v2_e6d8, 2
  store i32 %v1_e6dc, i32* @r5, align 4
  br label %dec_label_pc_e6e0

dec_label_pc_e6e0:                                ; preds = %bb133, %.thread10, %dec_label_pc_e6d8
  %v1_e6ec = phi i32 [ %v1_e6a0, %.thread10 ], [ %v1_e6a0, %bb133 ], [ %v1_e6dc, %dec_label_pc_e6d8 ]
  %v0_e6e0 = load i32, i32* @r6, align 4
  %v2_e6e0 = add i32 %v0_e6e0, %v1_e6a0
  store i32 %v2_e6e0, i32* @r4, align 4
  %v2_e6ec = add i32 %v1_e6ec, %v2_e6a4
  store i32 0, i32* @r7, align 4
  %v3_e6f8 = add i32 %v2_e6ec, -545
  %v4_e6f8 = inttoptr i32 %v3_e6f8 to i8*
  store i8 0, i8* %v4_e6f8, align 1
  %v1_e6fc = inttoptr i32 %v2_e6e0 to i8*
  %v2_e6fc = call i32 @function_12af0(i8* %v1_e6fc)
  store i32 %v2_e6fc, i32* @r1, align 4
  %v0_e708 = load i32, i32* @r4, align 4
  %v3_e70c = inttoptr i32 %v0_e708 to i8*
  %v4_e70c = call i32 @function_12e44(i8* %v3_e70c, i32 %v2_e6fc, i32 %v2_e5d8)
  %v7_e710 = icmp eq i32 %v4_e70c, -1
  br i1 %v7_e710, label %dec_label_pc_e644.backedge, label %dec_label_pc_e72c.preheader

dec_label_pc_e72c.preheader:                      ; preds = %dec_label_pc_e6e0
  %v1_e714 = load i32, i32* @r7, align 4
  %v1_e718 = load i32, i32* @r6, align 4
  %v2_e718 = load i32, i32* @r5, align 4
  %v3_e718 = add i32 %v2_e718, %v1_e718
  store i32 %v1_e714, i32* @lr, align 4
  store i32 %v1_e714, i32* @r4, align 4
  %v1_e72c50 = add i32 %v3_e718, 2
  %v2_e72c51 = inttoptr i32 %v1_e72c50 to i8*
  %v3_e72c52 = load i8, i8* %v2_e72c51, align 1
  %v2_e73054 = icmp eq i8 %v3_e72c52, 0
  %v1_e73456 = add i32 %v2_e718, 2
  br i1 %v2_e73054, label %dec_label_pc_e76c, label %dec_label_pc_e73c

dec_label_pc_e73c:                                ; preds = %dec_label_pc_e72c.preheader, %dec_label_pc_e72c.backedge
  %v0_e76c86 = phi i32 [ %v0_e76c85, %dec_label_pc_e72c.backedge ], [ %v1_e714, %dec_label_pc_e72c.preheader ]
  %v0_e754.pr = phi i32 [ %v0_e754.pr71, %dec_label_pc_e72c.backedge ], [ %v1_e714, %dec_label_pc_e72c.preheader ]
  %v0_ea70 = phi i32 [ %v0_ea7074, %dec_label_pc_e72c.backedge ], [ %v1_e714, %dec_label_pc_e72c.preheader ]
  %v0_e73482 = phi i32 [ %v1_e734, %dec_label_pc_e72c.backedge ], [ %v1_e73456, %dec_label_pc_e72c.preheader ]
  %v0_e764 = phi i32 [ %v0_e72c, %dec_label_pc_e72c.backedge ], [ %v3_e718, %dec_label_pc_e72c.preheader ]
  %v1_e740.in = phi i8 [ %v3_e72c, %dec_label_pc_e72c.backedge ], [ %v3_e72c52, %dec_label_pc_e72c.preheader ]
  %v7_e73c = icmp eq i8 %v1_e740.in, 9
  br i1 %v7_e73c, label %.thread23, label %bb135

bb135:                                            ; preds = %dec_label_pc_e73c
  %v8_e740 = icmp eq i8 %v1_e740.in, 32
  br i1 %v8_e740, label %.thread23.thread35, label %dec_label_pc_e754

.thread23.thread35:                               ; preds = %bb135
  br label %dec_label_pc_e760

.thread23:                                        ; preds = %dec_label_pc_e73c
  br label %dec_label_pc_e760

dec_label_pc_e754:                                ; preds = %bb135
  %v7_e754 = icmp eq i32 %v0_e754.pr, 1
  br i1 %v7_e754, label %dec_label_pc_ea70, label %dec_label_pc_e75c

dec_label_pc_e75c:                                ; preds = %dec_label_pc_ea70, %dec_label_pc_e754
  %v0_e76079 = phi i32 [ %v1_ea70, %dec_label_pc_ea70 ], [ %v0_ea70, %dec_label_pc_e754 ]
  br label %dec_label_pc_e760

dec_label_pc_e760:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_e75c
  %v0_e760 = phi i32 [ %v0_ea70, %.thread23.thread35 ], [ %v0_ea70, %.thread23 ], [ %v0_e76079, %dec_label_pc_e75c ]
  %v0_e754.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_e75c ]
  %v7_e768 = icmp sgt i32 %v0_e760, 6
  br i1 %v7_e768, label %dec_label_pc_e76c, label %dec_label_pc_e72c.backedge

dec_label_pc_e76c:                                ; preds = %dec_label_pc_e72c.backedge, %dec_label_pc_e760, %dec_label_pc_e72c.preheader
  %v1_e7bc = phi i32 [ %v1_e73456, %dec_label_pc_e72c.preheader ], [ %v1_e734, %dec_label_pc_e72c.backedge ], [ %v0_e73482, %dec_label_pc_e760 ]
  %v0_e76c = phi i32 [ %v1_e714, %dec_label_pc_e72c.preheader ], [ %v0_e76c85, %dec_label_pc_e72c.backedge ], [ %v0_e76c86, %dec_label_pc_e760 ]
  %v2_e76c = icmp eq i32 %v0_e76c, 0
  br i1 %v2_e76c, label %dec_label_pc_e644.backedge, label %dec_label_pc_e778

dec_label_pc_e778:                                ; preds = %dec_label_pc_e76c
  %v2_e780 = add i32 %v1_e7bc, %v2_e6a4
  %v1_e784 = add i32 %v2_e780, -545
  %v2_e784 = inttoptr i32 %v1_e784 to i8*
  %v3_e784 = load i8, i8* %v2_e784, align 1
  %v2_e788 = icmp eq i8 %v3_e784, 0
  br i1 %v2_e788, label %dec_label_pc_e7b8, label %bb136

bb136:                                            ; preds = %dec_label_pc_e778
  %v8_e78c = icmp eq i8 %v3_e784, 32
  br i1 %v8_e78c, label %dec_label_pc_e7b8, label %dec_label_pc_e794

dec_label_pc_e794:                                ; preds = %bb136
  %v2_e794 = add i32 %v1_e7bc, %v1_e718
  br label %dec_label_pc_e798

dec_label_pc_e798:                                ; preds = %bb137, %dec_label_pc_e794
  %v0_e7a428 = phi i32 [ %v1_e7a4, %bb137 ], [ %v1_e7bc, %dec_label_pc_e794 ]
  %v0_e798 = phi i32 [ %v1_e798, %bb137 ], [ %v2_e794, %dec_label_pc_e794 ]
  %v1_e798 = add i32 %v0_e798, 1
  %v2_e798 = inttoptr i32 %v1_e798 to i8*
  %v3_e798 = load i8, i8* %v2_e798, align 1
  %v2_e79c = icmp eq i8 %v3_e798, 0
  br i1 %v2_e79c, label %.thread27, label %bb137

.thread27:                                        ; preds = %dec_label_pc_e798
  %v1_e7a429 = add i32 %v0_e7a428, 1
  br label %dec_label_pc_e7ac

bb137:                                            ; preds = %dec_label_pc_e798
  %v8_e7a0 = icmp eq i8 %v3_e798, 32
  %v1_e7a4 = add i32 %v0_e7a428, 1
  br i1 %v8_e7a0, label %dec_label_pc_e7ac, label %dec_label_pc_e798

dec_label_pc_e7ac:                                ; preds = %bb137, %.thread27
  %v1_e7b4 = phi i32 [ %v1_e7a429, %.thread27 ], [ %v1_e7a4, %bb137 ]
  %v2_e7b4 = add i32 %v1_e7b4, %v2_e6a4
  br label %dec_label_pc_e7b8

dec_label_pc_e7b8:                                ; preds = %dec_label_pc_e778, %bb136, %dec_label_pc_e7ac
  %v2_e7c4 = phi i32 [ %v2_e780, %dec_label_pc_e778 ], [ %v2_e780, %bb136 ], [ %v2_e7b4, %dec_label_pc_e7ac ]
  %v2_e7bc = add i32 %v1_e7bc, %v1_e718
  store i32 %v2_e7bc, i32* @r4, align 4
  %v3_e7c4 = add i32 %v2_e7c4, -545
  %v4_e7c4 = inttoptr i32 %v3_e7c4 to i8*
  store i8 0, i8* %v4_e7c4, align 1
  %v1_e7c8 = inttoptr i32 %v2_e7bc to i8*
  %v2_e7c8 = call i32 @function_12af0(i8* %v1_e7c8)
  %v8_e7d0 = icmp sgt i32 %v2_e7c8, 15
  br i1 %v8_e7d0, label %dec_label_pc_e644.backedge, label %dec_label_pc_e7d4

dec_label_pc_e7d4:                                ; preds = %dec_label_pc_e7b8
  %v0_e7d8 = load i32, i32* @r4, align 4
  %v2_e7dc = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e7dc, i32* @r0, align 4
  %v2_e7e0 = bitcast i32* %stack_var_-52 to i8*
  %v3_e7e0 = call i32 @function_12b18(i8* %v2_e7e0, i32 %v0_e7d8)
  br label %dec_label_pc_e7e4

dec_label_pc_e7e4.loopexit:                       ; preds = %dec_label_pc_e644.backedge, %dec_label_pc_e644.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre99 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_e7e4

dec_label_pc_e7e4:                                ; preds = %dec_label_pc_e7e4.loopexit, %dec_label_pc_e7d4
  %v1_e7f4.pre-phi = phi i8* [ %.pre99, %dec_label_pc_e7e4.loopexit ], [ %v2_e7e0, %dec_label_pc_e7d4 ]
  %v2_e7f0.pre-phi = phi i32 [ %.pre, %dec_label_pc_e7e4.loopexit ], [ %v2_e7dc, %dec_label_pc_e7d4 ]
  %v0_e7e4 = load i32, i32* @r8, align 4
  %v1_e7e8 = call i32 @function_134b0(i32 %v0_e7e4)
  %v2_e7f4 = call i32 @function_12af0(i8* %v1_e7f4.pre-phi)
  store i32 %v2_e7f4, i32* @r4, align 4
  %v2_e7f8 = icmp eq i32 %v2_e7f4, 0
  br i1 %v2_e7f8, label %dec_label_pc_ea48, label %dec_label_pc_e800

dec_label_pc_e800:                                ; preds = %dec_label_pc_e7e4
  %v3_e808 = call i32 @function_120e0(i32 6, i32* null)
  store i32 %v3_e808, i32* @r0, align 4
  %v1_e80c = call i32 @function_138b8(i32 %v3_e808)
  store i32 %v1_e80c, i32* @r8, align 4
  %v2_e810 = icmp eq i32 %v1_e80c, 0
  br i1 %v2_e810, label %dec_label_pc_ea40, label %dec_label_pc_e820.preheader

dec_label_pc_e820.preheader:                      ; preds = %dec_label_pc_e800
  store i32 0, i32* @r5, align 4
  %v1_e82445 = inttoptr i32 %v1_e80c to i32*
  %v2_e82446 = call i32 @function_139b4(i32* %v1_e82445)
  %v2_e82848 = icmp eq i32 %v2_e82446, 0
  br i1 %v2_e82848, label %dec_label_pc_ea34, label %dec_label_pc_e830.preheader

dec_label_pc_e820.loopexit:                       ; preds = %dec_label_pc_e838, %dec_label_pc_e84c, %dec_label_pc_e8b4
  %v0_e820 = load i32, i32* @r8, align 4
  %v1_e824 = inttoptr i32 %v0_e820 to i32*
  %v2_e824 = call i32 @function_139b4(i32* %v1_e824)
  %v2_e828 = icmp eq i32 %v2_e824, 0
  br i1 %v2_e828, label %dec_label_pc_ea34, label %dec_label_pc_e830.preheader

dec_label_pc_e830.preheader:                      ; preds = %dec_label_pc_e820.preheader, %dec_label_pc_e820.loopexit
  %v0_e83894 = phi i32 [ %v2_e824, %dec_label_pc_e820.loopexit ], [ %v2_e82446, %dec_label_pc_e820.preheader ]
  br label %dec_label_pc_e830

dec_label_pc_e830:                                ; preds = %dec_label_pc_e830.preheader, %dec_label_pc_ea1c
  %v0_e844 = phi i32 [ %v0_e83894, %dec_label_pc_e830.preheader ], [ %v2_ea28, %dec_label_pc_ea1c ]
  %v0_e830 = load i32, i32* @r5, align 4
  %v2_e830 = icmp eq i32 %v0_e830, 0
  br i1 %v2_e830, label %dec_label_pc_e838, label %dec_label_pc_ea34

dec_label_pc_e838:                                ; preds = %dec_label_pc_e830
  %v1_e838 = add i32 %v0_e844, 11
  %v2_e838 = inttoptr i32 %v1_e838 to i8*
  %v3_e838 = load i8, i8* %v2_e838, align 1
  %v4_e838 = zext i8 %v3_e838 to i32
  %v1_e83c = add nsw i32 %v4_e838, -48
  store i32 %v1_e838, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_e83c, 9
  br i1 %tmp, label %dec_label_pc_e820.loopexit, label %dec_label_pc_e84c

dec_label_pc_e84c:                                ; preds = %dec_label_pc_e838
  %v3_e854 = call i32 @function_120e0(i32 6, i32* null)
  store i32 %v2_e578, i32* @r0, align 4
  %v3_e860 = call i32 @function_12b18(i8* %v2_e598, i32 %v3_e854)
  %v2_e868 = call i32 @function_12af0(i8* %v2_e598)
  %v0_e86c = load i32, i32* @r7, align 4
  %v0_e870 = load i32, i32* @sl, align 4
  %v2_e870 = add i32 %v0_e870, %v2_e868
  store i32 %v2_e870, i32* @r0, align 4
  %v2_e874 = inttoptr i32 %v2_e870 to i8*
  %v3_e874 = call i32 @function_12b18(i8* %v2_e874, i32 %v0_e86c)
  %v2_e87c = call i32 @function_12af0(i8* %v2_e598)
  %v0_e880 = load i32, i32* @r5, align 4
  store i32 %v2_e87c, i32* @r4, align 4
  %v2_e88c = inttoptr i32 %v0_e880 to i32*
  %v3_e88c = call i32 @function_120e0(i32 7, i32* %v2_e88c)
  %v0_e894 = load i32, i32* @sl, align 4
  %v1_e894 = load i32, i32* @r4, align 4
  %v2_e894 = add i32 %v1_e894, %v0_e894
  store i32 %v2_e894, i32* @r0, align 4
  %v2_e898 = inttoptr i32 %v2_e894 to i8*
  %v3_e898 = call i32 @function_12b18(i8* %v2_e898, i32 %v3_e88c)
  %v4_e8a8 = call i32 @function_136a4(i8* %v2_e598, i32 %v2_e58c, i32 4096)
  %v7_e8ac = icmp eq i32 %v4_e8a8, -1
  br i1 %v7_e8ac, label %dec_label_pc_e820.loopexit, label %dec_label_pc_e8b4

dec_label_pc_e8b4:                                ; preds = %dec_label_pc_e84c
  %v0_e8b4 = load i32, i32* @r5, align 4
  %v2_e8bc = inttoptr i32 %v0_e8b4 to i32*
  %v3_e8bc = call i32 @function_120e0(i32 6, i32* %v2_e8bc)
  store i32 %v2_e578, i32* @r0, align 4
  %v3_e8c8 = call i32 @function_12b18(i8* %v2_e598, i32 %v3_e8bc)
  %v2_e8d0 = call i32 @function_12af0(i8* %v2_e598)
  %v0_e8d4 = load i32, i32* @r7, align 4
  %v0_e8d8 = load i32, i32* @sl, align 4
  %v2_e8d8 = add i32 %v0_e8d8, %v2_e8d0
  store i32 %v2_e8d8, i32* @r0, align 4
  %v2_e8dc = inttoptr i32 %v2_e8d8 to i8*
  %v3_e8dc = call i32 @function_12b18(i8* %v2_e8dc, i32 %v0_e8d4)
  %v2_e8e4 = call i32 @function_12af0(i8* %v2_e598)
  %v0_e8e8 = load i32, i32* @r5, align 4
  store i32 %v2_e8e4, i32* @r4, align 4
  %v2_e8f4 = inttoptr i32 %v0_e8e8 to i32*
  %v3_e8f4 = call i32 @function_120e0(i32 9, i32* %v2_e8f4)
  %v0_e8fc = load i32, i32* @sl, align 4
  %v1_e8fc = load i32, i32* @r4, align 4
  %v2_e8fc = add i32 %v1_e8fc, %v0_e8fc
  store i32 %v2_e8fc, i32* @r0, align 4
  %v2_e900 = inttoptr i32 %v2_e8fc to i8*
  %v3_e900 = call i32 @function_12b18(i8* %v2_e900, i32 %v3_e8f4)
  store i32 %v2_e578, i32* @r0, align 4
  %v1_e908 = call i32 @function_138b8(i32 %v2_e578)
  store i32 %v1_e908, i32* @sb, align 4
  %v2_e90c = icmp eq i32 %v1_e908, 0
  br i1 %v2_e90c, label %dec_label_pc_e820.loopexit, label %dec_label_pc_e914.preheader

dec_label_pc_e914.preheader:                      ; preds = %dec_label_pc_e8b4
  %v1_e91840 = inttoptr i32 %v1_e908 to i32*
  %v2_e91841 = call i32 @function_139b4(i32* %v1_e91840)
  store i32 %v2_e91841, i32* @r6, align 4
  %v2_e91c43 = icmp eq i32 %v2_e91841, 0
  br i1 %v2_e91c43, label %dec_label_pc_ea1c, label %dec_label_pc_e92cthread-pre-split

dec_label_pc_e914.loopexit:                       ; preds = %dec_label_pc_e934, %dec_label_pc_e9cc
  %v0_e914 = load i32, i32* @sb, align 4
  %v1_e918 = inttoptr i32 %v0_e914 to i32*
  %v2_e918 = call i32 @function_139b4(i32* %v1_e918)
  store i32 %v2_e918, i32* @r6, align 4
  %v2_e91c = icmp eq i32 %v2_e918, 0
  br i1 %v2_e91c, label %dec_label_pc_ea1c, label %dec_label_pc_e92cthread-pre-split

dec_label_pc_e92cthread-pre-split:                ; preds = %dec_label_pc_e914.preheader, %dec_label_pc_e914.loopexit
  %v0_e92c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_e92c

dec_label_pc_e92c:                                ; preds = %dec_label_pc_e92cthread-pre-split, %dec_label_pc_e9f4
  %v0_e92c = phi i32 [ %v0_e92c.pr, %dec_label_pc_e92cthread-pre-split ], [ 1, %dec_label_pc_e9f4 ]
  %v2_e92c = icmp eq i32 %v0_e92c, 0
  br i1 %v2_e92c, label %dec_label_pc_e934, label %dec_label_pc_ea1c

dec_label_pc_e934:                                ; preds = %dec_label_pc_e92c
  %v2_e934 = call i32 @function_12b90(i32 %v2_e58c, i32 4096)
  %v0_e938 = load i32, i32* @r5, align 4
  %v2_e940 = inttoptr i32 %v0_e938 to i32*
  %v3_e940 = call i32 @function_120e0(i32 6, i32* %v2_e940)
  store i32 %v2_e578, i32* @r0, align 4
  %v3_e94c = call i32 @function_12b18(i8* %v2_e598, i32 %v3_e940)
  %v2_e954 = call i32 @function_12af0(i8* %v2_e598)
  %v0_e958 = load i32, i32* @r7, align 4
  %v0_e95c = load i32, i32* @sl, align 4
  %v2_e95c = add i32 %v0_e95c, %v2_e954
  store i32 %v2_e95c, i32* @r0, align 4
  %v2_e960 = inttoptr i32 %v2_e95c to i8*
  %v3_e960 = call i32 @function_12b18(i8* %v2_e960, i32 %v0_e958)
  %v2_e968 = call i32 @function_12af0(i8* %v2_e598)
  %v0_e96c = load i32, i32* @r5, align 4
  store i32 %v2_e968, i32* @r4, align 4
  %v2_e978 = inttoptr i32 %v0_e96c to i32*
  %v3_e978 = call i32 @function_120e0(i32 9, i32* %v2_e978)
  %v0_e980 = load i32, i32* @sl, align 4
  %v1_e980 = load i32, i32* @r4, align 4
  %v2_e980 = add i32 %v1_e980, %v0_e980
  store i32 %v2_e980, i32* @r0, align 4
  %v2_e984 = inttoptr i32 %v2_e980 to i8*
  %v3_e984 = call i32 @function_12b18(i8* %v2_e984, i32 %v3_e978)
  %v2_e98c = call i32 @function_12af0(i8* %v2_e598)
  %v0_e994 = load i32, i32* @sl, align 4
  %v2_e994 = add i32 %v0_e994, %v2_e98c
  store i32 %v2_e994, i32* @r0, align 4
  %v2_e998 = inttoptr i32 %v2_e994 to i8*
  %v3_e998 = call i32 @function_12b18(i8* %v2_e998, i32 ptrtoint ([2 x i8]* @global_var_15d80.23 to i32))
  %v2_e9a0 = call i32 @function_12af0(i8* %v2_e598)
  %v0_e9a4 = load i32, i32* @r6, align 4
  %v1_e9a4 = add i32 %v0_e9a4, 11
  %v0_e9a8 = load i32, i32* @sl, align 4
  %v2_e9a8 = add i32 %v0_e9a8, %v2_e9a0
  store i32 %v2_e9a8, i32* @r0, align 4
  %v2_e9ac = inttoptr i32 %v2_e9a8 to i8*
  %v3_e9ac = call i32 @function_12b18(i8* %v2_e9ac, i32 %v1_e9a4)
  %v4_e9bc = call i32 @function_136a4(i8* %v2_e598, i32 %v2_e58c, i32 4096)
  %v7_e9c0 = icmp eq i32 %v4_e9bc, -1
  br i1 %v7_e9c0, label %dec_label_pc_e914.loopexit, label %dec_label_pc_e9cc

dec_label_pc_e9cc:                                ; preds = %dec_label_pc_e934
  %v2_e9cc = call i32 @function_12af0(i8* %v2_e5b0)
  store i32 %v2_e9cc, i32* @r1, align 4
  %v4_e9e0 = call i32 @function_12e44(i8* %v2_e5b0, i32 %v2_e9cc, i32 %v2_e7f0.pre-phi)
  %v7_e9e4 = icmp eq i32 %v4_e9e0, -1
  br i1 %v7_e9e4, label %dec_label_pc_e914.loopexit, label %dec_label_pc_e9f4

dec_label_pc_e9f4:                                ; preds = %dec_label_pc_e9cc
  %v0_e9ec = load i32, i32* @r7, align 4
  %v2_e9f4 = inttoptr i32 %v0_e9ec to i8*
  %v3_e9f4 = call i32 @function_12c1c(i8* %v2_e9f4, i32 10)
  %v2_e9fc = call i32 @function_135b0(i32 %v3_e9f4, i32 9)
  %v0_ea00 = load i32, i32* @sb, align 4
  %v1_ea04 = inttoptr i32 %v0_ea00 to i32*
  %v2_ea04 = call i32 @function_139b4(i32* %v1_ea04)
  store i32 %v2_ea04, i32* @r6, align 4
  %v2_ea08 = icmp eq i32 %v2_ea04, 0
  store i32 1, i32* @r5, align 4
  br i1 %v2_ea08, label %dec_label_pc_ea1c, label %dec_label_pc_e92c

dec_label_pc_ea1c:                                ; preds = %dec_label_pc_e914.loopexit, %dec_label_pc_e9f4, %dec_label_pc_e92c, %dec_label_pc_e914.preheader
  %v0_ea1c = load i32, i32* @sb, align 4
  %v1_ea20 = inttoptr i32 %v0_ea1c to i32*
  %v2_ea20 = call i32 @function_13804(i32* %v1_ea20)
  %v0_ea24 = load i32, i32* @r8, align 4
  %v1_ea28 = inttoptr i32 %v0_ea24 to i32*
  %v2_ea28 = call i32 @function_139b4(i32* %v1_ea28)
  %v2_ea2c = icmp eq i32 %v2_ea28, 0
  br i1 %v2_ea2c, label %dec_label_pc_ea34, label %dec_label_pc_e830

dec_label_pc_ea34:                                ; preds = %dec_label_pc_e820.loopexit, %dec_label_pc_ea1c, %dec_label_pc_e830, %dec_label_pc_e820.preheader
  %v0_ea34 = load i32, i32* @r8, align 4
  %v1_ea38 = inttoptr i32 %v0_ea34 to i32*
  %v2_ea38 = call i32 @function_13804(i32* %v1_ea38)
  %v0_ea3c = load i32, i32* @r5, align 4
  %v1_ea3c = urem i32 %v0_ea3c, 256
  br label %dec_label_pc_ea40

dec_label_pc_ea40:                                ; preds = %dec_label_pc_e800, %dec_label_pc_ea34
  %storemerge = phi i32 [ %v1_ea3c, %dec_label_pc_ea34 ], [ 0, %dec_label_pc_e800 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ea44 = call i32 @function_148e4(i32 1)
  br label %dec_label_pc_ea48

dec_label_pc_ea48:                                ; preds = %dec_label_pc_e7e4, %dec_label_pc_ea40
  %v1_ea4c = call i32 @function_1210c(i32 6)
  %v1_ea54 = call i32 @function_1210c(i32 7)
  %v1_ea5c = call i32 @function_1210c(i32 9)
  br label %dec_label_pc_ea60

dec_label_pc_ea60:                                ; preds = %dec_label_pc_e614, %dec_label_pc_ea48
  %v0_ea60 = load i32, i32* @r4, align 4
  %v2_ea6c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ea6c, i32* @r4, align 4
  store i32 %v6_e564, i32* @r5, align 4
  store i32 %v9_e564, i32* @r6, align 4
  store i32 %v12_e564, i32* @r7, align 4
  store i32 %v15_e564, i32* @r8, align 4
  store i32 %v18_e564, i32* @sb, align 4
  store i32 %v21_e564, i32* @sl, align 4
  store i32 %v24_e564, i32* @fp, align 4
  ret i32 %v0_ea60

dec_label_pc_ea70:                                ; preds = %dec_label_pc_e754
  %v1_ea70 = add i32 %v0_ea70, 1
  store i32 %v1_ea70, i32* @lr, align 4
  %v7_ea74 = icmp eq i32 %v0_ea70, 0
  br i1 %v7_ea74, label %dec_label_pc_ea7c, label %dec_label_pc_e75c

dec_label_pc_ea7c:                                ; preds = %dec_label_pc_ea70
  %v1_ea7c = add i32 %v0_e764, 3
  %v2_ea7c = inttoptr i32 %v1_ea7c to i8*
  %v3_ea7c = load i8, i8* %v2_ea7c, align 1
  %v7_ea80 = icmp eq i8 %v3_ea7c, 65
  br i1 %v7_ea80, label %dec_label_pc_ea90, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_ea7c
  br label %dec_label_pc_e72c.backedge

dec_label_pc_ea90:                                ; preds = %dec_label_pc_ea7c
  store i32 %v1_ea70, i32* @r4, align 4
  br label %dec_label_pc_e72c.backedge

dec_label_pc_e72c.backedge:                       ; preds = %.thread33, %dec_label_pc_ea90, %dec_label_pc_e760
  %v0_e76c85 = phi i32 [ %v1_ea70, %dec_label_pc_ea90 ], [ %v0_e76c86, %dec_label_pc_e760 ], [ %v0_e76c86, %.thread33 ]
  %v0_ea7074 = phi i32 [ %v1_ea70, %dec_label_pc_ea90 ], [ %v0_e760, %dec_label_pc_e760 ], [ %v1_ea70, %.thread33 ]
  %v0_e754.pr71 = phi i32 [ 0, %dec_label_pc_ea90 ], [ %v0_e754.pr72, %dec_label_pc_e760 ], [ 0, %.thread33 ]
  %v0_e72c = add i32 %v0_e764, 1
  %v1_e72c = add i32 %v0_e764, 3
  %v2_e72c = inttoptr i32 %v1_e72c to i8*
  %v3_e72c = load i8, i8* %v2_e72c, align 1
  %v2_e730 = icmp eq i8 %v3_e72c, 0
  %v1_e734 = add i32 %v0_e73482, 1
  br i1 %v2_e730, label %dec_label_pc_e76c, label %dec_label_pc_e73c

dec_label_pc_eaa0:                                ; preds = %dec_label_pc_e564
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_e614

; uselistorder directives
  uselistorder i32 %v1_e734, { 1, 0 }
  uselistorder i8 %v3_e72c, { 1, 0 }
  uselistorder i32 %v0_e76c85, { 1, 0 }
  uselistorder i32 %v1_ea70, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_ea28, { 1, 0 }
  uselistorder i32 %v1_e798, { 1, 0 }
  uselistorder i32 %v0_e7a428, { 1, 0 }
  uselistorder i32 %v1_e7bc, { 0, 3, 1, 2 }
  uselistorder i32 %v0_e760, { 1, 0 }
  uselistorder i32 %v0_e73482, { 1, 0 }
  uselistorder i32 %v0_ea70, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_e76c86, { 1, 2, 0 }
  uselistorder i32 %v1_e73456, { 1, 0 }
  uselistorder i32 %v2_e718, { 1, 0 }
  uselistorder i32 %v1_e714, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_e6d013, { 1, 0, 2 }
  uselistorder i32 %v0_e6c0, { 1, 0 }
  uselistorder i32 %v1_e6a0, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v4_e634, { 1, 2, 0 }
  uselistorder i32 %v2_e58c, { 1, 0, 2 }
  uselistorder i32 %v2_e578, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_12c1c, { 1, 0, 2, 4, 3 }
  uselistorder i32 ptrtoint ([2 x i8]* @global_var_15d80.23 to i32), { 2, 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_12d48, { 1, 0 }
  uselistorder label %dec_label_pc_e72c.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ea60, { 1, 0 }
  uselistorder label %dec_label_pc_ea48, { 1, 0 }
  uselistorder label %dec_label_pc_ea40, { 1, 0 }
  uselistorder label %dec_label_pc_ea34, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ea1c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e92c, { 1, 0 }
  uselistorder label %dec_label_pc_e92cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_e914.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_e830, { 1, 0 }
  uselistorder label %dec_label_pc_e830.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e820.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e7b8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e760, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e73c, { 1, 0 }
  uselistorder label %dec_label_pc_e6e0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e644.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_e694, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e65c, { 1, 0 }
  uselistorder label %dec_label_pc_e614, { 1, 0 }
}

define i32 @function_ead0(i32 %arg1) local_unnamed_addr {
dec_label_pc_ead0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-4312 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-8408 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-8428 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ead0 = load i32, i32* @r4, align 4
  store i32 %v3_ead0, i32* %stack_var_-36, align 4
  %v6_ead0 = load i32, i32* @r5, align 4
  %v9_ead0 = load i32, i32* @r6, align 4
  %v12_ead0 = load i32, i32* @r7, align 4
  %v15_ead0 = load i32, i32* @r8, align 4
  %v18_ead0 = load i32, i32* @sb, align 4
  %v21_ead0 = load i32, i32* @sl, align 4
  %v24_ead0 = load i32, i32* @fp, align 4
  %v2_eae0 = call i32 @function_13780(i32* null)
  store i32 %v2_eae0, i32* @r7, align 4
  %v0_eae8 = call i32 @function_134dc()
  %v7_eaec = icmp eq i32 %v0_eae8, -1
  %. = zext i1 %v7_eaec to i32
  %tmp212 = icmp slt i32 %v0_eae8, 1
  %storemerge174 = select i1 %tmp212, i32 %., i32 1
  store i32 %storemerge174, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1eb04.96 to i32), i32* %r3.global-to-local, align 4
  %v2_eb08 = icmp eq i32 %storemerge174, 0
  store i32 %v0_eae8, i32* @global_var_1eb04.96, align 4
  br i1 %v2_eb08, label %dec_label_pc_eb20, label %dec_label_pc_eb14

dec_label_pc_eb14:                                ; preds = %dec_label_pc_ec9c, %dec_label_pc_eb84, %dec_label_pc_ead0
  %v29_eb1c = phi i32 [ %v3_ec28, %dec_label_pc_eb84 ], [ %v0_eae8, %dec_label_pc_ead0 ], [ 0, %dec_label_pc_ec9c ]
  %v2_eb1c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_eb1c, i32* @r4, align 4
  store i32 %v6_ead0, i32* @r5, align 4
  store i32 %v9_ead0, i32* @r6, align 4
  store i32 %v12_ead0, i32* @r7, align 4
  store i32 %v15_ead0, i32* @r8, align 4
  store i32 %v18_ead0, i32* @sb, align 4
  store i32 %v21_ead0, i32* @sl, align 4
  store i32 %v24_ead0, i32* @fp, align 4
  ret i32 %v29_eb1c

dec_label_pc_eb20:                                ; preds = %dec_label_pc_ead0
  %v2_eb20 = ptrtoint i32* %stack_var_-236 to i32
  store i32 %v2_eb20, i32* %r1.global-to-local, align 4
  store i32 2, i32* @r4, align 4
  store i32 2, i32* %stack_var_-72, align 4
  %v1_eb38 = call i32 @function_e564(i32 5888)
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_eb44 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_eb4c = load i32, i32* @r5, align 4
  store i32 %v0_eb4c, i32* %r2.global-to-local, align 4
  %v3_eb58 = call i32 @function_13db0(i32 %v0_eb44, i32 1, i32 %v0_eb4c)
  %v7_eb5c = icmp eq i32 %v3_eb58, -1
  store i32 %v3_eb58, i32* @r4, align 4
  br i1 %v7_eb5c, label %dec_label_pc_eb84, label %dec_label_pc_eb68

dec_label_pc_eb68:                                ; preds = %dec_label_pc_eb20
  %v2_eb6c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_eb6c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_eb74 = bitcast i32* %stack_var_-72 to %sockaddr*
  %v4_eb74 = call i32 @function_13be0(i32 %v3_eb58, %sockaddr* %v3_eb74, i32 16)
  %v0_eb78 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_eb80 = call i32 @function_13c94(i32 %v0_eb78, i32 1)
  br label %dec_label_pc_eb84

dec_label_pc_eb84:                                ; preds = %dec_label_pc_eb20, %dec_label_pc_eb68
  %v1_eb88 = call i32 @function_148e4(i32 5)
  %v1_eb90 = call i32 @function_13f60(i32 4096)
  store i32 ptrtoint (i32* @global_var_1ea68.102 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1eb00.104 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_eb90, i32* %r2.global-to-local, align 4
  %v0_eba0 = load i32, i32* @r5, align 4
  %v1_eba0 = trunc i32 %v0_eba0 to i8
  %v3_eba0 = inttoptr i32 %v1_eb90 to i8*
  store i8 %v1_eba0, i8* %v3_eba0, align 1
  %v0_eba8 = load i32, i32* @r5, align 4
  %v1_eba8 = load i32, i32* %r3.global-to-local, align 4
  %v2_eba8 = inttoptr i32 %v1_eba8 to i32*
  store i32 %v0_eba8, i32* %v2_eba8, align 4
  %v0_ebac = load i32, i32* %r2.global-to-local, align 4
  %v1_ebac = load i32, i32* %r1.global-to-local, align 4
  %v2_ebac = inttoptr i32 %v1_ebac to i32*
  store i32 %v0_ebac, i32* %v2_ebac, align 4
  %v1_ebb0 = call i32 @function_121c4(i32 6)
  %v1_ebb8 = call i32 @function_121c4(i32 7)
  %v0_ebbc = load i32, i32* @r5, align 4
  store i32 %v0_ebbc, i32* %r1.global-to-local, align 4
  %v2_ebc4 = inttoptr i32 %v0_ebbc to i32*
  %v3_ebc4 = call i32 @function_120e0(i32 6, i32* %v2_ebc4)
  %v2_ebcc = ptrtoint i32* %stack_var_-8408 to i32
  store i32 %v2_ebcc, i32* @r8, align 4
  store i32 %v3_ebc4, i32* %r1.global-to-local, align 4
  store i32 %v2_ebcc, i32* @r0, align 4
  %v2_ebd8 = bitcast i32* %stack_var_-8408 to i8*
  %v3_ebd8 = call i32 @function_12b18(i8* %v2_ebd8, i32 %v3_ebc4)
  %v0_ebdc = load i32, i32* @r8, align 4
  %v2_ebdc = add i32 %v0_ebdc, %v3_ebd8
  store i32 %v2_ebdc, i32* @r4, align 4
  %v0_ebe0 = call i32 @function_13508()
  %v2_ebe8 = ptrtoint i32* %stack_var_-88 to i32
  store i32 %v2_ebe8, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_ebf0 = trunc i32 %v0_ebe0 to i8
  %v4_ebf0 = call i32 @function_12fe4(i8 %v3_ebf0, i32 10, i32 %v2_ebe8)
  store i32 %v4_ebf0, i32* %r1.global-to-local, align 4
  %v0_ebf8 = load i32, i32* @r4, align 4
  store i32 %v0_ebf8, i32* @r0, align 4
  %v2_ebfc = inttoptr i32 %v0_ebf8 to i8*
  %v3_ebfc = call i32 @function_12b18(i8* %v2_ebfc, i32 %v4_ebf0)
  %v0_ec00 = load i32, i32* @r5, align 4
  store i32 %v0_ec00, i32* %r1.global-to-local, align 4
  %v0_ec04 = load i32, i32* @r4, align 4
  %v2_ec04 = add i32 %v0_ec04, %v3_ebfc
  store i32 %v2_ec04, i32* @r4, align 4
  %v2_ec0c = inttoptr i32 %v0_ec00 to i32*
  %v3_ec0c = call i32 @function_120e0(i32 7, i32* %v2_ec0c)
  store i32 %v3_ec0c, i32* %r1.global-to-local, align 4
  %v0_ec14 = load i32, i32* @r4, align 4
  store i32 %v0_ec14, i32* @r0, align 4
  %v2_ec18 = inttoptr i32 %v0_ec14 to i8*
  %v3_ec18 = call i32 @function_12b18(i8* %v2_ec18, i32 %v3_ec0c)
  %v0_ec1c = load i32, i32* @r5, align 4
  store i32 %v0_ec1c, i32* %r1.global-to-local, align 4
  store i32 %v3_ec18, i32* @r6, align 4
  %v3_ec28 = call i32 @function_135dc(i8* %v2_ebd8, i32 %v0_ec1c)
  %v7_ec2c = icmp eq i32 %v3_ec28, -1
  br i1 %v7_ec2c, label %dec_label_pc_eb14, label %dec_label_pc_ec34

dec_label_pc_ec34:                                ; preds = %dec_label_pc_eb84
  %v1_ec34 = call i32 @function_134b0(i32 %v3_ec28)
  %v1_ec3c = call i32 @function_1210c(i32 6)
  %v1_ec44 = call i32 @function_1210c(i32 7)
  store i32 ptrtoint (i32* @global_var_1eb00.104 to i32), i32* %r3.global-to-local, align 4
  %v2_ec50 = load i32, i32* @global_var_1eb00.104, align 4
  store i32 %v2_ec50, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v4_ec5c = call i32 @function_136a4(i8* %v2_ebd8, i32 %v2_ec50, i32 4095)
  %v7_ec60 = icmp eq i32 %v4_ec5c, -1
  br i1 %v7_ec60, label %.thread5.thread, label %bb215

.thread5.thread:                                  ; preds = %dec_label_pc_ec34
  %v0_ec6c54 = load i32, i32* @r4, align 4
  %v1_ec6c55 = load i32, i32* @r6, align 4
  %v2_ec6c56 = add i32 %v1_ec6c55, %v0_ec6c54
  store i32 %v2_ec6c56, i32* %r1.global-to-local, align 4
  br label %bb216

bb215:                                            ; preds = %dec_label_pc_ec34
  %v3_ec68 = load i32, i32* @global_var_1eb00.104, align 4
  store i32 %v3_ec68, i32* %r3.global-to-local, align 4
  %v0_ec6c = load i32, i32* @r4, align 4
  %v1_ec6c = load i32, i32* @r6, align 4
  %v2_ec6c = add i32 %v1_ec6c, %v0_ec6c
  store i32 %v2_ec6c, i32* %r1.global-to-local, align 4
  %v1_ec70 = load i32, i32* @r5, align 4
  %v2_ec70 = trunc i32 %v1_ec70 to i8
  %v5_ec70 = add i32 %v3_ec68, %v4_ec5c
  %v6_ec70 = inttoptr i32 %v5_ec70 to i8*
  store i8 %v2_ec70, i8* %v6_ec70, align 1
  %v1_ec74.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb216

bb216:                                            ; preds = %.thread5.thread, %bb215
  %v1_ec74 = phi i32 [ %v2_ec6c56, %.thread5.thread ], [ %v1_ec74.pre, %bb215 ]
  %v0_ec74 = load i32, i32* @r8, align 4
  %v2_ec74 = sub i32 %v1_ec74, %v0_ec74
  store i32 %v2_ec74, i32* %r1.global-to-local, align 4
  %v2_ec7c = call i32 @function_12b90(i32 %v2_ebcc, i32 %v2_ec74)
  %v2_ec88 = ptrtoint i32* %stack_var_-4312 to i32
  store i32 %v2_ec88, i32* %r1.global-to-local, align 4
  store i32 %v2_ec88, i32* %stack_var_-8428, align 4
  %v0_ec90 = load i32, i32* @r5, align 4
  %v0_ec94 = load i32, i32* @r7, align 4
  store i32 %v0_ec94, i32* @r4, align 4
  store i32 400, i32* @r5, align 4
  %v2_ed90 = ptrtoint i32* %stack_var_-152 to i32
  %v2_ed94 = bitcast i32* %stack_var_-152 to i8*
  %v2_ede0 = ptrtoint i32* %stack_var_-216 to i32
  %v2_ede4 = bitcast i32* %stack_var_-216 to i8*
  %v2_ef54 = ptrtoint i32* %stack_var_-44 to i32
  %v2_ef64 = ptrtoint i32* %stack_var_-48 to i32
  %v2_ef78 = ptrtoint i32* %stack_var_-52 to i32
  %v2_ef8c = ptrtoint i32* %stack_var_-40 to i32
  %v2_efa4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_ee5c = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_ec9c

dec_label_pc_ec9c:                                ; preds = %dec_label_pc_ed54, %bb216
  %stack_var_-8420.0 = phi i32 [ %v0_ec90, %bb216 ], [ %stack_var_-8420.3, %dec_label_pc_ed54 ]
  %v1_eca0 = call i32 @function_121c4(i32 6)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ecac = call i32 @function_120e0(i32 6, i32* null)
  store i32 %v3_ecac, i32* @r0, align 4
  %v1_ecb0 = call i32 @function_138b8(i32 %v3_ecac)
  store i32 %v1_ecb0, i32* @sl, align 4
  %v2_ecb4 = icmp eq i32 %v1_ecb0, 0
  br i1 %v2_ecb4, label %dec_label_pc_eb14, label %dec_label_pc_ecbc

dec_label_pc_ecbc:                                ; preds = %dec_label_pc_ec9c
  %v1_ecc0 = call i32 @function_1210c(i32 6)
  %v0_ecc4117 = load i32, i32* @sl, align 4
  %v1_ecc8118 = inttoptr i32 %v0_ecc4117 to i32*
  %v2_ecc8119 = call i32 @function_139b4(i32* %v1_ecc8118)
  %v2_eccc121 = icmp eq i32 %v2_ecc8119, 0
  br i1 %v2_eccc121, label %dec_label_pc_ed54, label %dec_label_pc_ecd4.preheader

dec_label_pc_ecd4.preheader:                      ; preds = %dec_label_pc_ecbc, %dec_label_pc_ecc4.backedge
  %v0_ecd4133 = phi i32 [ %v2_ecc8, %dec_label_pc_ecc4.backedge ], [ %v2_ecc8119, %dec_label_pc_ecbc ]
  %stack_var_-8420.1122 = phi i32 [ %stack_var_-8420.1.be, %dec_label_pc_ecc4.backedge ], [ %stack_var_-8420.0, %dec_label_pc_ecbc ]
  br label %dec_label_pc_ecd4

dec_label_pc_ecd4:                                ; preds = %dec_label_pc_ecd4.preheader, %dec_label_pc_ed3c
  %v0_ece4 = phi i32 [ %v2_ed48, %dec_label_pc_ed3c ], [ %v0_ecd4133, %dec_label_pc_ecd4.preheader ]
  %stack_var_-8420.2 = phi i32 [ %v1_ecf8, %dec_label_pc_ed3c ], [ %stack_var_-8420.1122, %dec_label_pc_ecd4.preheader ]
  %v1_ecd4 = add i32 %v0_ece4, 11
  %v2_ecd4 = inttoptr i32 %v1_ecd4 to i8*
  %v3_ecd4 = load i8, i8* %v2_ecd4, align 1
  %v4_ecd4 = zext i8 %v3_ecd4 to i32
  %v1_ecd8 = add nsw i32 %v4_ecd4, -48
  store i32 %v1_ecd8, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_ecd8, 9
  br i1 %tmp, label %dec_label_pc_ecc4.backedge, label %dec_label_pc_ece4

dec_label_pc_ece4:                                ; preds = %dec_label_pc_ecd4
  store i32 %v1_ecd4, i32* @r6, align 4
  %v2_ecec = call i32 @function_146a4(i8* %v2_ecd4)
  %v0_ecf4 = load i32, i32* @r5, align 4
  %v1_ecf8 = add i32 %stack_var_-8420.2, 1
  store i32 %v1_ecf8, i32* %r2.global-to-local, align 4
  store i32 %v2_ecec, i32* @r7, align 4
  %v5_ed04 = icmp slt i32 %v0_ecf4, %v2_ecec
  %v2_ed64 = call i32 @function_13780(i32* null)
  br i1 %v5_ed04, label %dec_label_pc_ed60, label %dec_label_pc_ed08

dec_label_pc_ed08:                                ; preds = %dec_label_pc_ece4
  %v0_ed10 = load i32, i32* @r4, align 4
  %v2_ed10 = sub i32 %v2_ed64, %v0_ed10
  %v7_ed18 = icmp slt i32 %v2_ed10, 601
  br i1 %v7_ed18, label %dec_label_pc_ed20, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_ed08
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_ecc4.backedge

dec_label_pc_ed20:                                ; preds = %dec_label_pc_ed08
  %v0_ed20 = load i32, i32* @r7, align 4
  %v7_ed24 = icmp slt i32 %v0_ed20, 401
  br i1 %v7_ed24, label %dec_label_pc_ecc4.backedge, label %dec_label_pc_ed28

dec_label_pc_ed28:                                ; preds = %dec_label_pc_ed20
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_ed30 = call i32 @function_1320c(i32 %v1_ecf8, i32 10)
  %v2_ed34 = icmp eq i32 %v2_ed30, 0
  br i1 %v2_ed34, label %dec_label_pc_ed3c, label %dec_label_pc_ecc4.backedge

dec_label_pc_ed3c:                                ; preds = %dec_label_pc_ed28
  %v1_ed40 = call i32 @function_148e4(i32 1)
  %v0_ed44 = load i32, i32* @sl, align 4
  %v1_ed48 = inttoptr i32 %v0_ed44 to i32*
  %v2_ed48 = call i32 @function_139b4(i32* %v1_ed48)
  %v2_ed4c = icmp eq i32 %v2_ed48, 0
  br i1 %v2_ed4c, label %dec_label_pc_ed54, label %dec_label_pc_ecd4

dec_label_pc_ed54:                                ; preds = %dec_label_pc_ecc4.backedge, %dec_label_pc_ed3c, %dec_label_pc_ecbc
  %stack_var_-8420.3 = phi i32 [ %stack_var_-8420.0, %dec_label_pc_ecbc ], [ %v1_ecf8, %dec_label_pc_ed3c ], [ %stack_var_-8420.1.be, %dec_label_pc_ecc4.backedge ]
  %v0_ed54 = load i32, i32* @sl, align 4
  %v1_ed58 = inttoptr i32 %v0_ed54 to i32*
  %v2_ed58 = call i32 @function_13804(i32* %v1_ed58)
  br label %dec_label_pc_ec9c

dec_label_pc_ed60:                                ; preds = %dec_label_pc_ece4
  %v1_ed70 = call i32 @function_121c4(i32 6)
  %v1_ed78 = call i32 @function_121c4(i32 7)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ed84 = call i32 @function_120e0(i32 6, i32* null)
  store i32 %v3_ed84, i32* %r1.global-to-local, align 4
  store i32 %v2_ed90, i32* @r0, align 4
  %v3_ed94 = call i32 @function_12b18(i8* %v2_ed94, i32 %v3_ed84)
  store i32 %v2_ed90, i32* %r3.global-to-local, align 4
  %v2_eda0 = add i32 %v3_ed94, %v2_ed90
  store i32 %v2_eda0, i32* %r5.global-to-local, align 4
  %v0_eda4 = load i32, i32* @r6, align 4
  store i32 %v0_eda4, i32* %r1.global-to-local, align 4
  store i32 %v2_eda0, i32* @r0, align 4
  %v2_edac = inttoptr i32 %v2_eda0 to i8*
  %v3_edac = call i32 @function_12b18(i8* %v2_edac, i32 %v0_eda4)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_edbc = call i32 @function_120e0(i32 7, i32* null)
  store i32 %v3_edbc, i32* %r1.global-to-local, align 4
  %v0_edc4 = load i32, i32* %r5.global-to-local, align 4
  %v2_edc4 = add i32 %v3_edac, %v0_edc4
  store i32 %v2_edc4, i32* @r0, align 4
  %v2_edc8 = inttoptr i32 %v2_edc4 to i8*
  %v3_edc8 = call i32 @function_12b18(i8* %v2_edc8, i32 %v3_edbc)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_edd4 = call i32 @function_120e0(i32 6, i32* null)
  store i32 %v3_edd4, i32* %r1.global-to-local, align 4
  store i32 %v2_ede0, i32* @r0, align 4
  %v3_ede4 = call i32 @function_12b18(i8* %v2_ede4, i32 %v3_edd4)
  %v2_edf0 = add i32 %v3_ede4, %v2_ede0
  store i32 %v2_edf0, i32* @r5, align 4
  %v0_edf4 = load i32, i32* @r6, align 4
  store i32 %v0_edf4, i32* %r1.global-to-local, align 4
  store i32 %v2_edf0, i32* @r0, align 4
  %v2_edfc = inttoptr i32 %v2_edf0 to i8*
  %v3_edfc = call i32 @function_12b18(i8* %v2_edfc, i32 %v0_edf4)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_edfc, i32* @r4, align 4
  %v3_ee0c = call i32 @function_120e0(i32 11, i32* null)
  store i32 %v3_ee0c, i32* %r1.global-to-local, align 4
  %v0_ee14 = load i32, i32* @r5, align 4
  %v1_ee14 = load i32, i32* @r4, align 4
  %v2_ee14 = add i32 %v1_ee14, %v0_ee14
  store i32 %v2_ee14, i32* @r0, align 4
  %v2_ee18 = inttoptr i32 %v2_ee14 to i8*
  %v3_ee18 = call i32 @function_12b18(i8* %v2_ee18, i32 %v3_ee0c)
  %v1_ee20 = call i32 @function_1210c(i32 6)
  %v1_ee28 = call i32 @function_1210c(i32 7)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_ee3c = load i32, i32* %stack_var_-8428, align 4
  store i32 %v2_ee3c, i32* %r1.global-to-local, align 4
  %v4_ee40 = call i32 @function_136a4(i8* %v2_ed94, i32 %v2_ee3c, i32 4095)
  %v7_ee48 = icmp eq i32 %v4_ee40, -1
  store i32 %v4_ee40, i32* @r5, align 4
  store i32 -4276, i32* @r2, align 4
  br i1 %v7_ee48, label %dec_label_pc_ef10, label %dec_label_pc_ee58

dec_label_pc_ee58:                                ; preds = %dec_label_pc_ed60
  store i32 %v2_ee5c, i32* %r1.global-to-local, align 4
  %v2_ee60 = add i32 %v4_ee40, %v2_ee5c
  store i32 %v2_ee60, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ee68 = add i32 %v2_ee60, -4276
  %v5_ee68 = inttoptr i32 %v4_ee68 to i8*
  store i8 0, i8* %v5_ee68, align 1
  %v1_ee70 = call i32 @function_121c4(i32 10)
  %v0_ee74 = load i32, i32* @r4, align 4
  store i32 %v0_ee74, i32* %r1.global-to-local, align 4
  %v2_ee7c = inttoptr i32 %v0_ee74 to i32*
  %v3_ee7c = call i32 @function_120e0(i32 10, i32* %v2_ee7c)
  %v0_ee80 = load i32, i32* @r5, align 4
  %v1_ee80 = add i32 %v0_ee80, -1
  store i32 %v1_ee80, i32* @r1, align 4
  store i32 %v3_ee7c, i32* %r2.global-to-local, align 4
  %v2_ee88 = load i32, i32* %stack_var_-8428, align 4
  %v3_ee8c = inttoptr i32 %v2_ee88 to i8*
  %v4_ee8c = call i32 @function_12e44(i8* %v3_ee8c, i32 %v1_ee80, i32 %v3_ee7c)
  %v7_ee90 = icmp eq i32 %v4_ee8c, -1
  br i1 %v7_ee90, label %dec_label_pc_eeac, label %dec_label_pc_ee98

dec_label_pc_ee98:                                ; preds = %dec_label_pc_ee58
  %v2_ee98 = load i32, i32* %stack_var_-8428, align 4
  %v1_ee9c = inttoptr i32 %v2_ee98 to i8*
  %v2_ee9c = call i32 @function_137ac(i8* %v1_ee9c)
  %v0_eea0 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_eea8 = call i32 @function_135b0(i32 %v0_eea0, i32 9)
  br label %dec_label_pc_eeac

dec_label_pc_eeac:                                ; preds = %dec_label_pc_ee58, %dec_label_pc_ee98
  %v1_eeb0 = call i32 @function_1210c(i32 10)
  %v0_eeb4 = call i32 @function_13508()
  %v0_eeb8 = load i32, i32* @r7, align 4
  %v9_eeb8 = icmp eq i32 %v0_eeb8, %v0_eeb4
  br i1 %v9_eeb8, label %dec_label_pc_eee4, label %dec_label_pc_eec0

dec_label_pc_eec0:                                ; preds = %dec_label_pc_eeac
  %v0_eec0 = call i32 @function_13534()
  %v0_eec4 = load i32, i32* @r7, align 4
  %v9_eec4 = icmp eq i32 %v0_eec4, %v0_eec0
  br i1 %v9_eec4, label %dec_label_pc_eee4, label %dec_label_pc_eecc

dec_label_pc_eecc:                                ; preds = %dec_label_pc_eec0
  store i32 ptrtoint (i32* @global_var_1eb00.104 to i32), i32* %r2.global-to-local, align 4
  %v2_eed0 = load i32, i32* %stack_var_-8428, align 4
  %v2_eed4 = load i32, i32* @global_var_1eb00.104, align 4
  store i32 %v2_eed4, i32* %r1.global-to-local, align 4
  %v2_eed8 = inttoptr i32 %v2_eed0 to i8*
  %v3_eed8 = call i32 @function_12ed0(i8* %v2_eed8, i32 %v2_eed4)
  %v2_eedc = icmp eq i32 %v3_eed8, 0
  br i1 %v2_eedc, label %dec_label_pc_eef0, label %dec_label_pc_eecc.dec_label_pc_eee4_crit_edge

dec_label_pc_eecc.dec_label_pc_eee4_crit_edge:    ; preds = %dec_label_pc_eecc
  %v0_eee8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_eee4

dec_label_pc_eee4:                                ; preds = %dec_label_pc_eecc.dec_label_pc_eee4_crit_edge, %dec_label_pc_eec0, %dec_label_pc_eeac
  %v0_eee8 = phi i32 [ %v0_eee8.pre, %dec_label_pc_eecc.dec_label_pc_eee4_crit_edge ], [ %v0_eec0, %dec_label_pc_eec0 ], [ %v0_eeb4, %dec_label_pc_eeac ]
  store i32 %v2_ed64, i32* @r4, align 4
  store i32 %v0_eee8, i32* @r5, align 4
  br label %dec_label_pc_ecc4.backedge

dec_label_pc_ecc4.backedge:                       ; preds = %dec_label_pc_ed28, %dec_label_pc_ed20, %dec_label_pc_ecd4, %dec_label_pc_eee4, %dec_label_pc_f194, %.thread11
  %stack_var_-8420.1.be = phi i32 [ %v1_ecf8, %dec_label_pc_f194 ], [ %v1_ecf8, %dec_label_pc_eee4 ], [ %v1_ecf8, %.thread11 ], [ %stack_var_-8420.2, %dec_label_pc_ecd4 ], [ %v1_ecf8, %dec_label_pc_ed20 ], [ %v1_ecf8, %dec_label_pc_ed28 ]
  %v0_ecc4 = load i32, i32* @sl, align 4
  %v1_ecc8 = inttoptr i32 %v0_ecc4 to i32*
  %v2_ecc8 = call i32 @function_139b4(i32* %v1_ecc8)
  %v2_eccc = icmp eq i32 %v2_ecc8, 0
  br i1 %v2_eccc, label %dec_label_pc_ed54, label %dec_label_pc_ecd4.preheader

dec_label_pc_eef0:                                ; preds = %dec_label_pc_eecc
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_eef4 = load i32, i32* %stack_var_-8428, align 4
  %v2_eef8 = inttoptr i32 %v2_eef4 to i8*
  %v3_eef8 = call i32 @function_135dc(i8* %v2_eef8, i32 0)
  %v7_eefc = icmp eq i32 %v3_eef8, -1
  store i32 %v3_eef8, i32* @r4, align 4
  br i1 %v7_eefc, label %dec_label_pc_f1c8, label %dec_label_pc_ef08

dec_label_pc_ef08:                                ; preds = %dec_label_pc_eef0, %dec_label_pc_f1c8
  %v0_ef08 = phi i32 [ %v3_eef8, %dec_label_pc_eef0 ], [ %v0_ef08.pre, %dec_label_pc_f1c8 ]
  %v1_ef0c = call i32 @function_134b0(i32 %v0_ef08)
  br label %dec_label_pc_ef10

dec_label_pc_ef10:                                ; preds = %dec_label_pc_ed60, %dec_label_pc_ef08
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ef1c = call i32 @function_135dc(i8* %v2_ed94, i32 0)
  %v7_ef20 = icmp eq i32 %v3_ef1c, -1
  br i1 %v7_ef20, label %dec_label_pc_f194, label %dec_label_pc_ef2c

dec_label_pc_ef2c:                                ; preds = %dec_label_pc_ef10
  %v1_ef30 = call i32 @function_121c4(i32 12)
  %v1_ef38 = call i32 @function_121c4(i32 13)
  %v1_ef40 = call i32 @function_121c4(i32 14)
  %v1_ef48 = call i32 @function_121c4(i32 15)
  %v1_ef50 = call i32 @function_121c4(i32 16)
  store i32 %v2_ef54, i32* %r1.global-to-local, align 4
  %v3_ef5c = call i32 @function_120e0(i32 12, i32* nonnull %stack_var_-44)
  store i32 %v2_ef64, i32* %r1.global-to-local, align 4
  store i32 %v3_ef5c, i32* @r5, align 4
  %v3_ef70 = call i32 @function_120e0(i32 13, i32* nonnull %stack_var_-48)
  store i32 %v2_ef78, i32* %r1.global-to-local, align 4
  store i32 %v3_ef70, i32* @r6, align 4
  %v3_ef84 = call i32 @function_120e0(i32 14, i32* nonnull %stack_var_-52)
  store i32 %v2_ef8c, i32* %r1.global-to-local, align 4
  store i32 %v3_ef84, i32* @sb, align 4
  %v3_ef98 = call i32 @function_120e0(i32 15, i32* nonnull %stack_var_-40)
  store i32 %v3_ef98, i32* @fp, align 4
  store i32 %v2_efa4, i32* %r1.global-to-local, align 4
  %v3_efac = call i32 @function_120e0(i32 16, i32* nonnull %stack_var_-56)
  store i32 %v2_ebcc, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_efc0114 = call i32 @function_13678(i32 %v3_ef1c, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp217 = icmp slt i32 %v4_efc0114, 1
  br i1 %tmp217, label %dec_label_pc_f1d8, label %dec_label_pc_efcc

dec_label_pc_efcc:                                ; preds = %dec_label_pc_ef2c, %dec_label_pc_efb4.backedge
  %v0_f054105 = phi i32 [ %v4_efc0, %dec_label_pc_efb4.backedge ], [ %v4_efc0114, %dec_label_pc_ef2c ]
  store i32 %v2_eb20, i32* %r3.global-to-local, align 4
  %v3_efd0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_efd0, i32* @r4, align 4
  %v5_efd8 = icmp slt i32 %v0_f054105, %v3_efd0
  br i1 %v5_efd8, label %dec_label_pc_efe8, label %dec_label_pc_f094.lr.ph

dec_label_pc_f094.lr.ph:                          ; preds = %dec_label_pc_efcc
  %v1_f08c70 = add i32 %v0_f054105, -1
  store i32 %v1_f08c70, i32* %r1.global-to-local, align 4
  %v0_f094.pre = load i32, i32* @r5, align 4
  %v1_f098.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f094

dec_label_pc_efe8:                                ; preds = %dec_label_pc_f08c.backedge, %dec_label_pc_efcc
  %v3_efec = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_efec, i32* @r4, align 4
  %v5_eff4 = icmp slt i32 %v0_f054105, %v3_efec
  br i1 %v5_eff4, label %dec_label_pc_f004, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_efe8
  %v1_f0c079 = add i32 %v0_f054105, -1
  store i32 %v1_f0c079, i32* %r1.global-to-local, align 4
  %v2_f0c080 = icmp eq i32 %v0_f054105, 0
  br i1 %v2_f0c080, label %dec_label_pc_f004, label %dec_label_pc_f0c8.lr.ph

dec_label_pc_f0c8.lr.ph:                          ; preds = %.thread28
  %v0_f0c8.pre = load i32, i32* @r6, align 4
  %v1_f0cc.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f0c8

dec_label_pc_f004:                                ; preds = %dec_label_pc_f0c0.backedge, %.thread28, %dec_label_pc_efe8
  store i32 %v2_eb20, i32* %r1.global-to-local, align 4
  %v3_f008 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f008, i32* @r4, align 4
  %v5_f010 = icmp slt i32 %v0_f054105, %v3_f008
  br i1 %v5_f010, label %dec_label_pc_f020, label %.thread37

.thread37:                                        ; preds = %dec_label_pc_f004
  %v1_f0f488 = add i32 %v0_f054105, -1
  store i32 %v1_f0f488, i32* %r1.global-to-local, align 4
  %v2_f0f489 = icmp eq i32 %v0_f054105, 0
  br i1 %v2_f0f489, label %dec_label_pc_f020, label %dec_label_pc_f0fc.lr.ph

dec_label_pc_f0fc.lr.ph:                          ; preds = %.thread37
  %v0_f0fc.pre = load i32, i32* @sb, align 4
  %v1_f100.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f0fc

dec_label_pc_f020:                                ; preds = %dec_label_pc_f0f4.backedge, %.thread37, %dec_label_pc_f004
  store i32 %v2_eb20, i32* %r2.global-to-local, align 4
  %v3_f024 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_f024, i32* @r4, align 4
  %v5_f02c = icmp slt i32 %v0_f054105, %v3_f024
  br i1 %v5_f02c, label %dec_label_pc_f03c, label %.thread46

.thread46:                                        ; preds = %dec_label_pc_f020
  %v1_f12897 = add i32 %v0_f054105, -1
  store i32 %v1_f12897, i32* %r1.global-to-local, align 4
  %v2_f12898 = icmp eq i32 %v0_f054105, 0
  br i1 %v2_f12898, label %dec_label_pc_f03c, label %dec_label_pc_f130.lr.ph

dec_label_pc_f130.lr.ph:                          ; preds = %.thread46
  %v0_f130.pre = load i32, i32* @fp, align 4
  %v1_f134.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f130

dec_label_pc_f03c:                                ; preds = %dec_label_pc_f128.backedge, %.thread46, %dec_label_pc_f020
  store i32 %v2_eb20, i32* %r3.global-to-local, align 4
  %v3_f040 = load i32, i32* %stack_var_-56, align 4
  %v5_f048 = icmp slt i32 %v0_f054105, %v3_f040
  br i1 %v5_f048, label %dec_label_pc_efb4.backedge, label %.thread52

dec_label_pc_efb4.backedge:                       ; preds = %dec_label_pc_f078, %.thread52, %dec_label_pc_f03c
  store i32 %v2_ebcc, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_efc0 = call i32 @function_13678(i32 %v3_ef1c, i32* nonnull %stack_var_-8408, i32 4096)
  %tmp218 = icmp slt i32 %v4_efc0, 1
  br i1 %tmp218, label %dec_label_pc_f1d8, label %dec_label_pc_efcc

.thread52:                                        ; preds = %dec_label_pc_f03c
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_f054107 = icmp eq i32 %v0_f054105, 0
  br i1 %v2_f054107, label %dec_label_pc_efb4.backedge, label %dec_label_pc_f05c.lr.ph

dec_label_pc_f05c.lr.ph:                          ; preds = %.thread52
  %v1_f064.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f05c

dec_label_pc_f05c:                                ; preds = %dec_label_pc_f078, %dec_label_pc_f05c.lr.ph
  %v0_f054.in = phi i32 [ %v0_f054105, %dec_label_pc_f05c.lr.ph ], [ %v0_f054, %dec_label_pc_f078 ]
  %v0_f078 = phi i32 [ 0, %dec_label_pc_f05c.lr.ph ], [ %v1_f078, %dec_label_pc_f078 ]
  %v0_f06c = phi i32 [ 0, %dec_label_pc_f05c.lr.ph ], [ %v1_f06c., %dec_label_pc_f078 ]
  %v0_f054 = add i32 %v0_f054.in, -1
  store i32 %v3_efac, i32* %r3.global-to-local, align 4
  %v2_f060 = add i32 %v0_f06c, %v3_efac
  %v3_f060 = inttoptr i32 %v2_f060 to i8*
  %v4_f060 = load i8, i8* %v3_f060, align 1
  %v6_f060 = zext i8 %v4_f060 to i32
  store i32 %v6_f060, i32* %r2.global-to-local, align 4
  %v2_f064 = add i32 %v0_f078, %v1_f064.pre
  %v3_f064 = inttoptr i32 %v2_f064 to i8*
  %v4_f064 = load i8, i8* %v3_f064, align 1
  %v6_f064 = zext i8 %v4_f064 to i32
  store i32 %v6_f064, i32* %r3.global-to-local, align 4
  %v9_f068 = icmp eq i8 %v4_f064, %v4_f060
  %v1_f06c = add i32 %v0_f06c, 1
  %v1_f06c. = select i1 %v9_f068, i32 %v1_f06c, i32 0
  store i32 %v1_f06c., i32* %r1.global-to-local, align 4
  br i1 %v9_f068, label %dec_label_pc_f150, label %dec_label_pc_f078

dec_label_pc_f078:                                ; preds = %dec_label_pc_f150, %dec_label_pc_f05c
  %v1_f078 = add i32 %v0_f078, 1
  %v2_f054 = icmp eq i32 %v0_f054, 0
  br i1 %v2_f054, label %dec_label_pc_efb4.backedge, label %dec_label_pc_f05c

dec_label_pc_f080:                                ; preds = %dec_label_pc_f094
  %v9_f080 = icmp eq i32 %v3_efd0, %v1_f0a0.
  br i1 %v9_f080, label %dec_label_pc_f158, label %dec_label_pc_f08c.backedge

dec_label_pc_f08c.backedge:                       ; preds = %dec_label_pc_f094, %dec_label_pc_f080
  %storemerge125 = add i32 %storemerge125.in, 1
  %v1_f08c = add i32 %v0_f08c, -1
  store i32 %v1_f08c, i32* %r1.global-to-local, align 4
  %v2_f08c = icmp eq i32 %v0_f08c, 0
  br i1 %v2_f08c, label %dec_label_pc_efe8, label %dec_label_pc_f094

dec_label_pc_f094:                                ; preds = %dec_label_pc_f08c.backedge, %dec_label_pc_f094.lr.ph
  %v0_f08c = phi i32 [ %v1_f08c70, %dec_label_pc_f094.lr.ph ], [ %v1_f08c, %dec_label_pc_f08c.backedge ]
  %storemerge125.in = phi i32 [ 0, %dec_label_pc_f094.lr.ph ], [ %storemerge125, %dec_label_pc_f08c.backedge ]
  %v0_f0a0 = phi i32 [ 0, %dec_label_pc_f094.lr.ph ], [ %v1_f0a0., %dec_label_pc_f08c.backedge ]
  %v2_f094 = add i32 %v0_f0a0, %v0_f094.pre
  %v3_f094 = inttoptr i32 %v2_f094 to i8*
  %v4_f094 = load i8, i8* %v3_f094, align 1
  %v6_f094 = zext i8 %v4_f094 to i32
  store i32 %v6_f094, i32* %r2.global-to-local, align 4
  %v2_f098 = add i32 %storemerge125.in, %v1_f098.pre
  %v3_f098 = inttoptr i32 %v2_f098 to i8*
  %v4_f098 = load i8, i8* %v3_f098, align 1
  %v6_f098 = zext i8 %v4_f098 to i32
  store i32 %v6_f098, i32* %r3.global-to-local, align 4
  %v9_f09c = icmp eq i8 %v4_f098, %v4_f094
  %v1_f0a0 = add i32 %v0_f0a0, 1
  %v1_f0a0. = select i1 %v9_f09c, i32 %v1_f0a0, i32 0
  br i1 %v9_f09c, label %dec_label_pc_f080, label %dec_label_pc_f08c.backedge

dec_label_pc_f0b4:                                ; preds = %dec_label_pc_f0c8
  %v9_f0b4 = icmp eq i32 %v3_efec, %v1_f0d4.
  br i1 %v9_f0b4, label %dec_label_pc_f158, label %dec_label_pc_f0c0.backedge

dec_label_pc_f0c0.backedge:                       ; preds = %dec_label_pc_f0c8, %dec_label_pc_f0b4
  %storemerge124 = add i32 %storemerge124.in, 1
  %v1_f0c0 = add i32 %v0_f0c0, -1
  store i32 %v1_f0c0, i32* %r1.global-to-local, align 4
  %v2_f0c0 = icmp eq i32 %v0_f0c0, 0
  br i1 %v2_f0c0, label %dec_label_pc_f004, label %dec_label_pc_f0c8

dec_label_pc_f0c8:                                ; preds = %dec_label_pc_f0c0.backedge, %dec_label_pc_f0c8.lr.ph
  %v0_f0c0 = phi i32 [ %v1_f0c079, %dec_label_pc_f0c8.lr.ph ], [ %v1_f0c0, %dec_label_pc_f0c0.backedge ]
  %storemerge124.in = phi i32 [ 0, %dec_label_pc_f0c8.lr.ph ], [ %storemerge124, %dec_label_pc_f0c0.backedge ]
  %v0_f0d4 = phi i32 [ 0, %dec_label_pc_f0c8.lr.ph ], [ %v1_f0d4., %dec_label_pc_f0c0.backedge ]
  %v2_f0c8 = add i32 %v0_f0d4, %v0_f0c8.pre
  %v3_f0c8 = inttoptr i32 %v2_f0c8 to i8*
  %v4_f0c8 = load i8, i8* %v3_f0c8, align 1
  %v6_f0c8 = zext i8 %v4_f0c8 to i32
  store i32 %v6_f0c8, i32* %r2.global-to-local, align 4
  %v2_f0cc = add i32 %storemerge124.in, %v1_f0cc.pre
  %v3_f0cc = inttoptr i32 %v2_f0cc to i8*
  %v4_f0cc = load i8, i8* %v3_f0cc, align 1
  %v6_f0cc = zext i8 %v4_f0cc to i32
  store i32 %v6_f0cc, i32* %r3.global-to-local, align 4
  %v9_f0d0 = icmp eq i8 %v4_f0cc, %v4_f0c8
  %v1_f0d4 = add i32 %v0_f0d4, 1
  %v1_f0d4. = select i1 %v9_f0d0, i32 %v1_f0d4, i32 0
  br i1 %v9_f0d0, label %dec_label_pc_f0b4, label %dec_label_pc_f0c0.backedge

dec_label_pc_f0e8:                                ; preds = %dec_label_pc_f0fc
  %v9_f0e8 = icmp eq i32 %v3_f008, %v1_f108.
  br i1 %v9_f0e8, label %dec_label_pc_f158, label %dec_label_pc_f0f4.backedge

dec_label_pc_f0f4.backedge:                       ; preds = %dec_label_pc_f0fc, %dec_label_pc_f0e8
  %storemerge123 = add i32 %storemerge123.in, 1
  %v1_f0f4 = add i32 %v0_f0f4, -1
  store i32 %v1_f0f4, i32* %r1.global-to-local, align 4
  %v2_f0f4 = icmp eq i32 %v0_f0f4, 0
  br i1 %v2_f0f4, label %dec_label_pc_f020, label %dec_label_pc_f0fc

dec_label_pc_f0fc:                                ; preds = %dec_label_pc_f0f4.backedge, %dec_label_pc_f0fc.lr.ph
  %v0_f0f4 = phi i32 [ %v1_f0f488, %dec_label_pc_f0fc.lr.ph ], [ %v1_f0f4, %dec_label_pc_f0f4.backedge ]
  %storemerge123.in = phi i32 [ 0, %dec_label_pc_f0fc.lr.ph ], [ %storemerge123, %dec_label_pc_f0f4.backedge ]
  %v0_f108 = phi i32 [ 0, %dec_label_pc_f0fc.lr.ph ], [ %v1_f108., %dec_label_pc_f0f4.backedge ]
  %v2_f0fc = add i32 %v0_f108, %v0_f0fc.pre
  %v3_f0fc = inttoptr i32 %v2_f0fc to i8*
  %v4_f0fc = load i8, i8* %v3_f0fc, align 1
  %v6_f0fc = zext i8 %v4_f0fc to i32
  store i32 %v6_f0fc, i32* %r2.global-to-local, align 4
  %v2_f100 = add i32 %storemerge123.in, %v1_f100.pre
  %v3_f100 = inttoptr i32 %v2_f100 to i8*
  %v4_f100 = load i8, i8* %v3_f100, align 1
  %v6_f100 = zext i8 %v4_f100 to i32
  store i32 %v6_f100, i32* %r3.global-to-local, align 4
  %v9_f104 = icmp eq i8 %v4_f100, %v4_f0fc
  %v1_f108 = add i32 %v0_f108, 1
  %v1_f108. = select i1 %v9_f104, i32 %v1_f108, i32 0
  br i1 %v9_f104, label %dec_label_pc_f0e8, label %dec_label_pc_f0f4.backedge

dec_label_pc_f11c:                                ; preds = %dec_label_pc_f130
  %v9_f11c = icmp eq i32 %v3_f024, %v1_f13c.
  br i1 %v9_f11c, label %dec_label_pc_f158, label %dec_label_pc_f128.backedge

dec_label_pc_f128.backedge:                       ; preds = %dec_label_pc_f130, %dec_label_pc_f11c
  %storemerge = add i32 %storemerge.in, 1
  %v1_f128 = add i32 %v0_f128, -1
  store i32 %v1_f128, i32* %r1.global-to-local, align 4
  %v2_f128 = icmp eq i32 %v0_f128, 0
  br i1 %v2_f128, label %dec_label_pc_f03c, label %dec_label_pc_f130

dec_label_pc_f130:                                ; preds = %dec_label_pc_f128.backedge, %dec_label_pc_f130.lr.ph
  %v0_f128 = phi i32 [ %v1_f12897, %dec_label_pc_f130.lr.ph ], [ %v1_f128, %dec_label_pc_f128.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_f130.lr.ph ], [ %storemerge, %dec_label_pc_f128.backedge ]
  %v0_f13c = phi i32 [ 0, %dec_label_pc_f130.lr.ph ], [ %v1_f13c., %dec_label_pc_f128.backedge ]
  %v2_f130 = add i32 %v0_f13c, %v0_f130.pre
  %v3_f130 = inttoptr i32 %v2_f130 to i8*
  %v4_f130 = load i8, i8* %v3_f130, align 1
  %v6_f130 = zext i8 %v4_f130 to i32
  store i32 %v6_f130, i32* %r2.global-to-local, align 4
  %v2_f134 = add i32 %storemerge.in, %v1_f134.pre
  %v3_f134 = inttoptr i32 %v2_f134 to i8*
  %v4_f134 = load i8, i8* %v3_f134, align 1
  %v6_f134 = zext i8 %v4_f134 to i32
  store i32 %v6_f134, i32* %r3.global-to-local, align 4
  %v9_f138 = icmp eq i8 %v4_f134, %v4_f130
  %v1_f13c = add i32 %v0_f13c, 1
  %v1_f13c. = select i1 %v9_f138, i32 %v1_f13c, i32 0
  br i1 %v9_f138, label %dec_label_pc_f11c, label %dec_label_pc_f128.backedge

dec_label_pc_f150:                                ; preds = %dec_label_pc_f05c
  %v9_f150 = icmp eq i32 %v3_f040, %v1_f06c.
  br i1 %v9_f150, label %dec_label_pc_f158, label %dec_label_pc_f078

dec_label_pc_f158:                                ; preds = %dec_label_pc_f080, %dec_label_pc_f0b4, %dec_label_pc_f0e8, %dec_label_pc_f11c, %dec_label_pc_f150
  %v1_f15c = call i32 @function_1210c(i32 12)
  %v1_f164 = call i32 @function_1210c(i32 13)
  %v1_f16c = call i32 @function_1210c(i32 14)
  %v1_f174 = call i32 @function_1210c(i32 15)
  %v1_f17c = call i32 @function_1210c(i32 16)
  %v1_f184 = call i32 @function_134b0(i32 %v3_ef1c)
  %v0_f188 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_f190 = call i32 @function_135b0(i32 %v0_f188, i32 9)
  br label %dec_label_pc_f194

dec_label_pc_f194:                                ; preds = %dec_label_pc_ef10, %dec_label_pc_f1d8, %dec_label_pc_f158
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_f1a0 = call i32 @function_12b90(i32 %v2_ed90, i32 64)
  store i32 64, i32* %r1.global-to-local, align 4
  %v2_f1b0 = call i32 @function_12b90(i32 %v2_ede0, i32 64)
  %v1_f1b8 = call i32 @function_148e4(i32 1)
  store i32 %v2_ed64, i32* @r4, align 4
  %v0_f1c0 = load i32, i32* @r7, align 4
  store i32 %v0_f1c0, i32* @r5, align 4
  br label %dec_label_pc_ecc4.backedge

dec_label_pc_f1c8:                                ; preds = %dec_label_pc_eef0
  %v0_f1c8 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_f1d0 = call i32 @function_135b0(i32 %v0_f1c8, i32 9)
  %v0_ef08.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ef08

dec_label_pc_f1d8:                                ; preds = %dec_label_pc_efb4.backedge, %dec_label_pc_ef2c
  %v1_f1dc = call i32 @function_1210c(i32 12)
  %v1_f1e4 = call i32 @function_1210c(i32 13)
  %v1_f1ec = call i32 @function_1210c(i32 14)
  %v1_f1f4 = call i32 @function_1210c(i32 15)
  %v1_f1fc = call i32 @function_1210c(i32 16)
  %v1_f204 = call i32 @function_134b0(i32 %v3_ef1c)
  br label %dec_label_pc_f194

; uselistorder directives
  uselistorder i32 %v1_f13c., { 1, 0 }
  uselistorder i1 %v9_f138, { 1, 0 }
  uselistorder i32 %v0_f13c, { 1, 0 }
  uselistorder i32 %v1_f108., { 1, 0 }
  uselistorder i1 %v9_f104, { 1, 0 }
  uselistorder i32 %v0_f108, { 1, 0 }
  uselistorder i32 %v1_f0d4., { 1, 0 }
  uselistorder i1 %v9_f0d0, { 1, 0 }
  uselistorder i32 %v0_f0d4, { 1, 0 }
  uselistorder i32 %v1_f0a0., { 1, 0 }
  uselistorder i1 %v9_f09c, { 1, 0 }
  uselistorder i32 %v0_f0a0, { 1, 0 }
  uselistorder i32 %v1_f06c., { 1, 2, 0 }
  uselistorder i1 %v9_f068, { 1, 0 }
  uselistorder i32 %v0_f06c, { 1, 0 }
  uselistorder i32 %v0_f078, { 1, 0 }
  uselistorder i32 %v4_efc0, { 1, 0 }
  uselistorder i32 %v3_ef1c, { 3, 2, 4, 1, 0 }
  uselistorder i32 %v3_eef8, { 1, 2, 0 }
  uselistorder i32 %v2_ecc8, { 1, 0 }
  uselistorder i32 %stack_var_-8420.1.be, { 1, 0 }
  uselistorder i32 %v4_ee40, { 1, 2, 0 }
  uselistorder i32 %v2_ed48, { 1, 0 }
  uselistorder i32 %v1_ecf8, { 0, 1, 5, 4, 3, 2, 7, 8, 6 }
  uselistorder i32 %stack_var_-8420.0, { 1, 0 }
  uselistorder i32 %v2_ede0, { 1, 0, 2 }
  uselistorder i32 %v2_ed90, { 1, 0, 2, 3 }
  uselistorder i32 %v4_ec5c, { 1, 0 }
  uselistorder i32 %v3_ec28, { 2, 0, 1 }
  uselistorder i32 %v2_ebcc, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v3_eb58, { 1, 2, 0 }
  uselistorder i32 %storemerge174, { 1, 0 }
  uselistorder i32 %v0_eae8, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-72, { 0, 2, 1 }
  uselistorder i32* %stack_var_-8408, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 58, 15, 3, 2, 14, 1, 0, 4, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 30, 29, 31, 32, 33, 35, 34, 36, 37, 38, 40, 39, 41, 42, 43, 59, 44, 45, 46, 47, 49, 48, 50, 51, 52, 53, 54, 55, 56, 57 }
  uselistorder i32 (i8*, i32, i32)* @function_12e44, { 0, 1, 2, 3, 4, 5, 6, 21, 22, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 (i32*)* @function_139b4, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_138b8, { 2, 1, 0 }
  uselistorder i32* @global_var_1eb00.104, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_1eb04.96, { 0, 2, 1 }
  uselistorder label %dec_label_pc_f194, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f158, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_efcc, { 1, 0 }
  uselistorder label %dec_label_pc_ef10, { 1, 0 }
  uselistorder label %dec_label_pc_ef08, { 1, 0 }
  uselistorder label %dec_label_pc_ecc4.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_eeac, { 1, 0 }
  uselistorder label %dec_label_pc_ecd4, { 1, 0 }
  uselistorder label %dec_label_pc_ecd4.preheader, { 1, 0 }
  uselistorder label %bb216, { 1, 0 }
  uselistorder label %dec_label_pc_eb84, { 1, 0 }
}

define i32 @function_f218(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f218:
  store i32 ptrtoint (i32* @global_var_f3a0.106 to i32), i32* @global_var_1e8d4.108, align 4
  ret i32 %arg1
}

define i32 @function_f230(i32 %arg1) local_unnamed_addr {
dec_label_pc_f230:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_f230 = load i32, i32* @r4, align 4
  %v6_f230 = load i32, i32* @r5, align 4
  %v9_f230 = load i32, i32* @r6, align 4
  %v15_f230 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_f24c = call i32 @function_13db0(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1e8cc.110 to i32), i32* @r6, align 4
  %v7_f254 = icmp eq i32 %v3_f24c, -1
  store i32 %v3_f24c, i32* @global_var_1e8cc.110, align 4
  br i1 %v7_f254, label %dec_label_pc_f314, label %dec_label_pc_f260

dec_label_pc_f260:                                ; preds = %dec_label_pc_f230
  %v0_f264 = load i32, i32* @r4, align 4
  %v6_f274 = call i32 @function_13d80(i32 %v3_f24c, i32 %v0_f264, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_f278 = load i32, i32* @global_var_1e8cc.110, align 4
  store i32 %v2_f278, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_f288 = call i32 @function_133c0(i32 %v2_f278, i32 3)
  %v1_f290 = or i32 %v2_f288, 2048
  store i32 %v1_f290, i32* @r2, align 4
  %v0_f294 = load i32, i32* @r4, align 4
  %v2_f298 = call i32 @function_133c0(i32 %v0_f294, i32 4)
  store i32 ptrtoint (i8** @global_var_1e8d8.112 to i32), i32* @r8, align 4
  %v2_f2a0 = load i8, i8* bitcast (i8** @global_var_1e8d8.112 to i8*), align 4
  %v2_f2a4 = icmp eq i8 %v2_f2a0, 0
  br i1 %v2_f2a4, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_f260
  br label %bb

.thread:                                          ; preds = %dec_label_pc_f260
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_f2dc = call i32 @function_13a84()
  %v0_f2e0 = load i32, i32* @r5, align 4
  %v2_f2e0 = inttoptr i32 %v0_f2dc to i32*
  store i32 %v0_f2e0, i32* %v2_f2e0, align 4
  %v2_f2e4 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_f2e4, i32* @r7, align 4
  store i32 %v0_f2dc, i32* @r4, align 4
  %v2_f2f0 = load i32, i32* @global_var_1e8cc.110, align 4
  %v3_f2f8 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_f2f8 = call i32 @function_13be0(i32 %v2_f2f0, %sockaddr* %v3_f2f8, i32 16)
  %v7_f2fc = icmp eq i32 %v4_f2f8, -1
  br i1 %v7_f2fc, label %dec_label_pc_f31c, label %dec_label_pc_f304

dec_label_pc_f304:                                ; preds = %bb
  %v2_f30c = load i32, i32* @global_var_1e8cc.110, align 4
  %v2_f310 = call i32 @function_13c94(i32 %v2_f30c, i32 1)
  br label %dec_label_pc_f314

dec_label_pc_f314:                                ; preds = %dec_label_pc_f230, %dec_label_pc_f328, %dec_label_pc_f304
  %v20_f318 = phi i32 [ %v3_f24c, %dec_label_pc_f230 ], [ %v1_f378, %dec_label_pc_f328 ], [ %v2_f310, %dec_label_pc_f304 ]
  store i32 %v3_f230, i32* @r4, align 4
  store i32 %v6_f230, i32* @r5, align 4
  store i32 %v9_f230, i32* @r6, align 4
  store i32 %v15_f230, i32* @r8, align 4
  ret i32 %v20_f318

dec_label_pc_f31c:                                ; preds = %bb
  %v0_f31c = load i32, i32* @r4, align 4
  %v1_f31c = inttoptr i32 %v0_f31c to i32*
  %v2_f31c = load i32, i32* %v1_f31c, align 4
  %v7_f320 = icmp eq i32 %v2_f31c, 99
  br i1 %v7_f320, label %dec_label_pc_f380, label %dec_label_pc_f328

dec_label_pc_f328:                                ; preds = %dec_label_pc_f380, %bb21, %dec_label_pc_f31c
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_f340 = load i32, i32* @global_var_1e8cc.110, align 4
  %v4_f358 = call i32 @function_13c0c(i32 %v2_f340, %sockaddr* %v3_f2f8, i32 16)
  %v1_f360 = call i32 @function_148e4(i32 5)
  %v2_f364 = load i32, i32* @global_var_1e8cc.110, align 4
  %v1_f368 = call i32 @function_134b0(i32 %v2_f364)
  %v1_f374 = call i32 @function_e564(i32 58811)
  %v1_f378 = call i32 @function_f230(i32 %v1_f374)
  br label %dec_label_pc_f314

dec_label_pc_f380:                                ; preds = %dec_label_pc_f31c
  %v2_f380 = load i8, i8* bitcast (i8** @global_var_1e8d8.112 to i8*), align 4
  %v3_f380 = zext i8 %v2_f380 to i32
  %v1_f384 = load i32, i32* @r5, align 4
  %v9_f384 = icmp eq i32 %v3_f380, %v1_f384
  br i1 %v9_f384, label %dec_label_pc_f328, label %bb21

bb21:                                             ; preds = %dec_label_pc_f380
  %v2_f38c = trunc i32 %v1_f384 to i8
  store i8 %v2_f38c, i8* bitcast (i8** @global_var_1e8d8.112 to i8*), align 4
  br label %dec_label_pc_f328

; uselistorder directives
  uselistorder i32 %v3_f24c, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_e564, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_13c94, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1e8d8.112 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1e8d8.112, { 1, 0 }
  uselistorder label %dec_label_pc_f328, { 1, 0, 2 }
  uselistorder label %dec_label_pc_f314, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_f3a0() local_unnamed_addr {
dec_label_pc_f3a0:
  %stack_var_-16 = alloca i32, align 4
  %v3_f3a0 = load i32, i32* @r4, align 4
  store i32 %v3_f3a0, i32* %stack_var_-16, align 4
  %v1_f3a8 = call i32 @function_121c4(i32 3)
  %v3_f3b4 = call i32 @function_120e0(i32 3, i32* null)
  %v1_f3b8 = inttoptr i32 %v3_f3b4 to i8*
  %v2_f3b8 = call i32 @function_ff00(i8* %v1_f3b8)
  store i32 %v2_f3b8, i32* @r5, align 4
  %v1_f3c4 = call i32 @function_1210c(i32 3)
  %v0_f3c8 = load i32, i32* @r5, align 4
  %v2_f3c8 = icmp eq i32 %v0_f3c8, 0
  store i32 ptrtoint (i8** @global_var_1eb08.115 to i32), i32* @r6, align 4
  br i1 %v2_f3c8, label %bb, label %bb5

bb:                                               ; preds = %dec_label_pc_f3a0
  ret i32 %v1_f3c4

bb5:                                              ; preds = %dec_label_pc_f3a0
  %v1_f3d4 = add i32 %v0_f3c8, 4
  %v2_f3d4 = inttoptr i32 %v1_f3d4 to i32*
  %v3_f3d4 = load i32, i32* %v2_f3d4, align 4
  store i32 %v3_f3d4, i32* @r4, align 4
  %v0_f3d8 = call i32 @function_fc1c()
  %v0_f3dc = load i32, i32* @r5, align 4
  %v1_f3dc = inttoptr i32 %v0_f3dc to i8*
  %v2_f3dc = load i8, i8* %v1_f3dc, align 1
  %v3_f3dc = zext i8 %v2_f3dc to i32
  %v2_f3e0 = call i32 @function_1320c(i32 %v0_f3d8, i32 %v3_f3dc)
  %v0_f3e4 = load i32, i32* @r4, align 4
  %v4_f3e4 = mul i32 %v2_f3e0, 4
  %v5_f3e4 = add i32 %v0_f3e4, %v4_f3e4
  %v6_f3e4 = inttoptr i32 %v5_f3e4 to i32*
  %v7_f3e4 = load i32, i32* %v6_f3e4, align 4
  %v0_f3e8 = load i32, i32* @r5, align 4
  store i32 %v7_f3e4, i32* @global_var_1eb0c.116, align 4
  %v1_f3f0 = call i32 @function_fedc(i32 %v0_f3e8)
  %v1_f3f8 = call i32 @function_121c4(i32 4)
  %v3_f404 = call i32 @function_120e0(i32 4, i32* null)
  %v4_f404 = inttoptr i32 %v3_f404 to i8*
  %v2_f408 = add i32 %v3_f404, 1
  %v3_f408 = inttoptr i32 %v2_f408 to i8*
  %v4_f408 = load i8, i8* %v3_f408, align 1
  %v3_f40c = load i8, i8* %v4_f404, align 1
  store i8 %v4_f408, i8* bitcast (i32* @global_var_1eb0b.117 to i8*), align 4
  store i8 %v3_f40c, i8* bitcast (i32* @global_var_1eb0a.118 to i8*), align 4
  %v2_f424 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f424, i32* @r4, align 4
  %v1_f428 = call i32 @function_1210c(i32 4)
  %v0_f42c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f42c, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  br label %bb7

bb7:                                              ; preds = %bb5, %bb6
  ret i32 %v1_f428

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_f430(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_f430:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %tmp11 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-38 = alloca i8, align 1
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-536 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f430 = load i32, i32* @r4, align 4
  store i32 %v3_f430, i32* %stack_var_-36, align 4
  %v6_f430 = load i32, i32* @r5, align 4
  %v21_f430 = load i32, i32* @sl, align 4
  %v2_f440 = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_f440, i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_f448 = load i32, i32* %arg2, align 4
  store i32 %tmp, i32* @r6, align 4
  %v1_f450 = inttoptr i32 %v2_f448 to i8*
  %v2_f450 = call i32 @function_137ac(i8* %v1_f450)
  store i32 %v2_f440, i32* @r0, align 4
  %v1_f458 = call i32 @function_13e24(i32 %v2_f440)
  store i32 %v2_f440, i32* @r0, align 4
  %v2_f464 = call i32 @function_13df4(i32 %v2_f440, i32 2)
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f474 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  %v4_f474 = call i32 @function_1372c(i32 0, %_TYPEDEF_sigset_t* %v3_f474, i32 0)
  %v2_f480 = call i32 @function_13e3c(i32 17, i32 1)
  %v2_f48c = call i32 @function_13e3c(i32 5, i32 ptrtoint (i32* @global_var_f218.120 to i32))
  %v4_f498 = call i32 @function_135dc(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_15dd0.122, i32 0, i32 0), i32 2)
  %v7_f49c = icmp eq i32 %v4_f498, -1
  store i32 %v4_f498, i32* @r4, align 4
  br i1 %v7_f49c, label %dec_label_pc_f61c, label %dec_label_pc_f4a8

dec_label_pc_f4a8:                                ; preds = %dec_label_pc_f61c, %dec_label_pc_f430
  %v0_f4bc = phi i32 [ %v4_f624, %dec_label_pc_f61c ], [ %v4_f498, %dec_label_pc_f430 ]
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f4c0 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_f4c0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %stack_var_-48, align 4
  %v5_f4c8 = call i32 @function_13560(i32 %v0_f4bc, i32 -2147199228, i32 %v2_f4c0, i32 1, i32 1)
  %v0_f4cc = load i32, i32* @r4, align 4
  %v1_f4d0 = call i32 @function_134b0(i32 %v0_f4cc)
  br label %dec_label_pc_f4d4

dec_label_pc_f4d4:                                ; preds = %dec_label_pc_f61c, %dec_label_pc_f4a8
  %v2_f4d8 = call i32 @function_13484(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_var_15d80.23, i32 0, i32 0))
  %v0_f4dc = call i32 @function_12da8()
  store i32 902487617, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1eafc.85 to i32), i32* @fp, align 4
  store i8 80, i8* bitcast (i32* @global_var_1eb0b.117 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1eb08.115 to i8*), align 4
  store i32 902487617, i32* @global_var_1eb0c.116, align 4
  store i8 0, i8* bitcast (i32* @global_var_1eb0a.118 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1eb09.127 to i8*), align 4
  store i32 %v0_f4dc, i32* @global_var_1eafc.85, align 4
  %v6_f514 = call i32 @function_1227c(i32 %v0_f4dc, i32 ptrtoint (i8** @global_var_1eb08.115 to i32), i32 902487617, i32 2)
  %v2_f518 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_f518, i32* @r8, align 4
  %v1_f520 = call i32 @function_13ddc(i32 5)
  %v1_f524 = call i32 @function_f230(i32 %v1_f520)
  %v1_f528 = call i32 @function_fc74(i32 %v1_f524)
  %v2_f534 = call i32 @function_12b90(i32 %v2_f518, i32 32)
  %v0_f538 = load i32, i32* @r5, align 4
  %v7_f538 = icmp eq i32 %v0_f538, 2
  br i1 %v7_f538, label %dec_label_pc_f638, label %dec_label_pc_f540

dec_label_pc_f540:                                ; preds = %dec_label_pc_f638, %dec_label_pc_f4d4, %dec_label_pc_f648
  %v0_f540 = call i32 @function_fc1c()
  %v1_f544 = mul i32 %v0_f540, 4
  %v3_f548 = and i32 %v1_f544, 12
  %v2_f550 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_f550, i32* @r5, align 4
  %v1_f554 = add nuw nsw i32 %v3_f548, 12
  store i32 %v1_f554, i32* @r4, align 4
  %v2_f560 = call i32 @function_fcd0(i32 %v2_f550, i32 %v1_f554)
  %v2_f568 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_f568, i32* %r2.global-to-local, align 4
  %v1_f56c = load i32, i32* @r4, align 4
  %v2_f56c = add i32 %v1_f56c, %v2_f568
  store i32 %v2_f56c, i32* %r3.global-to-local, align 4
  %v0_f570 = load i32, i32* @r6, align 4
  %v1_f570 = inttoptr i32 %v0_f570 to i32*
  %v2_f570 = load i32, i32* %v1_f570, align 4
  store i32 %v2_f570, i32* @r0, align 4
  store i32 0, i32* @r6, align 4
  %v3_f578 = add i32 %v2_f56c, -72
  %v4_f578 = inttoptr i32 %v3_f578 to i8*
  store i8 0, i8* %v4_f578, align 1
  %v2_f580 = inttoptr i32 %v2_f570 to i8*
  %v3_f580 = call i32 @function_12b18(i8* %v2_f580, i32 %v2_f550)
  %v0_f584 = call i32 @function_fc1c()
  %v2_f58c = call i32 @function_1320c(i32 %v0_f584, i32 6)
  %v3_f590 = mul i32 %v2_f58c, 4
  %v1_f594 = add i32 %v3_f590, 12
  store i32 %v1_f594, i32* @r4, align 4
  %v2_f5a0 = call i32 @function_fcd0(i32 %v2_f550, i32 %v1_f594)
  %v1_f5ac = load i32, i32* @r4, align 4
  %v2_f5ac = add i32 %v1_f5ac, %v2_f568
  store i32 %v2_f5ac, i32* @r3, align 4
  %v0_f5b0 = load i32, i32* @r6, align 4
  %v1_f5b0 = trunc i32 %v0_f5b0 to i8
  %v3_f5b0 = add i32 %v2_f5ac, -72
  %v4_f5b0 = inttoptr i32 %v3_f5b0 to i8*
  store i8 %v1_f5b0, i8* %v4_f5b0, align 1
  %v2_f5bc = call i32 @function_13648(i32 15, i32 %v2_f550)
  %v1_f5c4 = call i32 @function_121c4(i32 2)
  %v3_f5d4 = call i32 @function_120e0(i32 2, i32* nonnull %stack_var_-44)
  %v3_f5d8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f5d8, i32* %r2.global-to-local, align 4
  %v3_f5e4 = inttoptr i32 %v3_f5d4 to i32*
  %v4_f5e4 = call i32 @function_137d8(i32 1, i32* %v3_f5e4, i32 %v3_f5d8)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f5f4 = call i32 @function_137d8(i32 1, i32* nonnull @global_var_15df4.129, i32 1)
  %v1_f5fc = call i32 @function_1210c(i32 2)
  %v0_f600 = call i32 @function_134dc()
  %v1_f604 = load i32, i32* @r6, align 4
  %v7_f608 = icmp sgt i32 %v0_f600, %v1_f604
  br i1 %v7_f608, label %dec_label_pc_f60c, label %dec_label_pc_f670

dec_label_pc_f60c:                                ; preds = %dec_label_pc_f540
  store i32 %v6_f430, i32* %r5.global-to-local, align 4
  store i32 %v21_f430, i32* %sl.global-to-local, align 4
  ret i32 0

dec_label_pc_f61c:                                ; preds = %dec_label_pc_f430
  %v4_f624 = call i32 @function_135dc(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_var_15de0.131, i32 0, i32 0), i32 2)
  %v3_f628 = icmp eq i32 %v4_f624, -1
  store i32 %v4_f624, i32* @r4, align 4
  br i1 %v3_f628, label %dec_label_pc_f4d4, label %dec_label_pc_f4a8

dec_label_pc_f638:                                ; preds = %dec_label_pc_f4d4
  %v0_f638 = load i32, i32* @r6, align 4
  %v1_f638 = add i32 %v0_f638, 4
  %v2_f638 = inttoptr i32 %v1_f638 to i32*
  %v3_f638 = load i32, i32* %v2_f638, align 4
  %v1_f63c = inttoptr i32 %v3_f638 to i8*
  %v2_f63c = call i32 @function_12af0(i8* %v1_f63c)
  %v8_f644 = icmp sgt i32 %v2_f63c, 31
  br i1 %v8_f644, label %dec_label_pc_f540, label %dec_label_pc_f648

dec_label_pc_f648:                                ; preds = %dec_label_pc_f638
  %v0_f648 = load i32, i32* @r6, align 4
  %v1_f648 = add i32 %v0_f648, 4
  %v2_f648 = inttoptr i32 %v1_f648 to i32*
  %v3_f648 = load i32, i32* %v2_f648, align 4
  store i32 %v2_f518, i32* @r0, align 4
  %v2_f650 = bitcast i32* %stack_var_-140 to i8*
  %v3_f650 = call i32 @function_12b18(i8* %v2_f650, i32 %v3_f648)
  %v0_f654 = load i32, i32* @r6, align 4
  %v1_f654 = add i32 %v0_f654, 4
  %v2_f654 = inttoptr i32 %v1_f654 to i32*
  %v3_f654 = load i32, i32* %v2_f654, align 4
  %v1_f65c = inttoptr i32 %v3_f654 to i8*
  %v2_f65c = call i32 @function_12af0(i8* %v1_f65c)
  %v2_f668 = call i32 @function_12b90(i32 %v3_f654, i32 %v2_f65c)
  br label %dec_label_pc_f540

dec_label_pc_f670:                                ; preds = %dec_label_pc_f540
  %v1_f670 = call i32 @function_13700(i32 %v0_f600)
  %v0_f678 = load i32, i32* @r6, align 4
  %v1_f67c = call i32 @function_134b0(i32 %v0_f678)
  %v1_f684 = call i32 @function_134b0(i32 1)
  %v1_f68c = call i32 @function_134b0(i32 2)
  %v2_f690 = ptrtoint i32* %stack_var_-536 to i32
  store i32 %v2_f690, i32* @r7, align 4
  %v1_f694 = call i32 @function_a558(i32 %v1_f68c)
  store i32 ptrtoint (i32* @global_var_1e8d0.133 to i32), i32* @sb, align 4
  %v1_f69c = call i32 @function_ead0(i32 %v1_f694)
  %v0_f6a0 = call i32 @function_106d8()
  %v0_f6a4 = load i32, i32* @r6, align 4
  %v2_f6ac = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_f6ac, i32* @r6, align 4
  %v2_f6b0 = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_f6b0, i32* @r7, align 4
  %v2_f790 = ptrtoint i32* %stack_var_-60 to i32
  %v5_fa50 = bitcast i8* %stack_var_-38 to i32*
  %v2_f978 = ptrtoint i32* %stack_var_-1548 to i32
  %v2_fa68 = ptrtoint i32* %stack_var_-48 to i32
  %v2_fa6c = ptrtoint i32* %stack_var_-52 to i32
  %v1_fafc = bitcast i32* %stack_var_-140 to i8*
  %v5_fad0 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v1_fae8 = sub i32 0, %v1_f670
  br label %dec_label_pc_f6b4

dec_label_pc_f6b4:                                ; preds = %dec_label_pc_f6b4.backedge, %dec_label_pc_f670
  %v2_f6bc51 = phi i32 [ %v2_f6ac, %dec_label_pc_f670 ], [ %v2_f6bc51.pre, %dec_label_pc_f6b4.backedge ]
  %stack_var_-37.0 = phi i8 [ %tmp11, %dec_label_pc_f670 ], [ %stack_var_-37.0.be, %dec_label_pc_f6b4.backedge ]
  %stack_var_-1552.0 = phi i32 [ %v0_f6a4, %dec_label_pc_f670 ], [ %stack_var_-1552.0.be, %dec_label_pc_f6b4.backedge ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_f6bc53 = inttoptr i32 %v2_f6bc51 to i32*
  store i32 0, i32* %v4_f6bc53, align 4
  %v0_f6c054 = load i32, i32* %r3.global-to-local, align 4
  %v1_f6c055 = add i32 %v0_f6c054, 4
  store i32 %v1_f6c055, i32* %r3.global-to-local, align 4
  %v7_f6c456 = icmp eq i32 %v1_f6c055, 128
  br i1 %v7_f6c456, label %dec_label_pc_f6cc, label %dec_label_pc_f6bc.dec_label_pc_f6bc_crit_edge

dec_label_pc_f6bc.dec_label_pc_f6bc_crit_edge:    ; preds = %dec_label_pc_f6b4, %dec_label_pc_f6bc.dec_label_pc_f6bc_crit_edge
  %v1_f6c057 = phi i32 [ %v1_f6c0, %dec_label_pc_f6bc.dec_label_pc_f6bc_crit_edge ], [ %v1_f6c055, %dec_label_pc_f6b4 ]
  %v0_f6bc.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_f6bc = load i32, i32* @r6, align 4
  %v3_f6bc = add i32 %v2_f6bc, %v1_f6c057
  %v4_f6bc = inttoptr i32 %v3_f6bc to i32*
  store i32 %v0_f6bc.pre, i32* %v4_f6bc, align 4
  %v0_f6c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_f6c0 = add i32 %v0_f6c0, 4
  store i32 %v1_f6c0, i32* %r3.global-to-local, align 4
  %v7_f6c4 = icmp eq i32 %v1_f6c0, 128
  br i1 %v7_f6c4, label %dec_label_pc_f6cc, label %dec_label_pc_f6bc.dec_label_pc_f6bc_crit_edge

dec_label_pc_f6cc:                                ; preds = %dec_label_pc_f6bc.dec_label_pc_f6bc_crit_edge, %dec_label_pc_f6b4
  %v0_f6cc = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f6cc, i32* %r3.global-to-local, align 4
  store i32 %v0_f6cc, i32* @r4, align 4
  %v2_f6d458 = load i32, i32* @r7, align 4
  %v3_f6d459 = add i32 %v2_f6d458, %v0_f6cc
  %v4_f6d460 = inttoptr i32 %v3_f6d459 to i32*
  store i32 %v0_f6cc, i32* %v4_f6d460, align 4
  %v0_f6d861 = load i32, i32* %r3.global-to-local, align 4
  %v1_f6d862 = add i32 %v0_f6d861, 4
  store i32 %v1_f6d862, i32* %r3.global-to-local, align 4
  %v7_f6dc63 = icmp eq i32 %v1_f6d862, 128
  br i1 %v7_f6dc63, label %dec_label_pc_f6e4, label %dec_label_pc_f6d4.dec_label_pc_f6d4_crit_edge

dec_label_pc_f6d4.dec_label_pc_f6d4_crit_edge:    ; preds = %dec_label_pc_f6cc, %dec_label_pc_f6d4.dec_label_pc_f6d4_crit_edge
  %v1_f6d864 = phi i32 [ %v1_f6d8, %dec_label_pc_f6d4.dec_label_pc_f6d4_crit_edge ], [ %v1_f6d862, %dec_label_pc_f6cc ]
  %v0_f6d4.pre = load i32, i32* @r4, align 4
  %v2_f6d4 = load i32, i32* @r7, align 4
  %v3_f6d4 = add i32 %v2_f6d4, %v1_f6d864
  %v4_f6d4 = inttoptr i32 %v3_f6d4 to i32*
  store i32 %v0_f6d4.pre, i32* %v4_f6d4, align 4
  %v0_f6d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_f6d8 = add i32 %v0_f6d8, 4
  store i32 %v1_f6d8, i32* %r3.global-to-local, align 4
  %v7_f6dc = icmp eq i32 %v1_f6d8, 128
  br i1 %v7_f6dc, label %dec_label_pc_f6e4, label %dec_label_pc_f6d4.dec_label_pc_f6d4_crit_edge

dec_label_pc_f6e4:                                ; preds = %dec_label_pc_f6d4.dec_label_pc_f6d4_crit_edge, %dec_label_pc_f6cc
  store i32 ptrtoint (i32* @global_var_1e8cc.110 to i32), i32* %r2.global-to-local, align 4
  %v2_f6e8 = load i32, i32* @global_var_1e8cc.110, align 4
  %v7_f6ec = icmp eq i32 %v2_f6e8, -1
  br i1 %v7_f6ec, label %dec_label_pc_f71c, label %dec_label_pc_f6f4

dec_label_pc_f6f4:                                ; preds = %dec_label_pc_f6e4
  %v3_f6f4 = udiv i32 %v2_f6e8, 32
  %v3_f6fc = mul nuw nsw i32 %v3_f6f4, 4
  %v2_f704 = add i32 %v3_f6fc, %v2_f568
  store i32 %v2_f704, i32* %r3.global-to-local, align 4
  %v1_f708 = add i32 %v2_f704, -360
  %v2_f708 = inttoptr i32 %v1_f708 to i32*
  %v3_f708 = load i32, i32* %v2_f708, align 4
  %v1_f70c = urem i32 %v2_f6e8, 32
  %v7_f714 = shl i32 1, %v1_f70c
  %v8_f714 = or i32 %v3_f708, %v7_f714
  store i32 %v8_f714, i32* %r2.global-to-local, align 4
  store i32 %v8_f714, i32* %v2_f708, align 4
  br label %dec_label_pc_f71c

dec_label_pc_f71c:                                ; preds = %dec_label_pc_f6e4, %dec_label_pc_f6f4
  %v2_f71c = load i32, i32* @global_var_1e8d0.133, align 4
  store i32 %v2_f71c, i32* %r3.global-to-local, align 4
  %v7_f720 = icmp eq i32 %v2_f71c, -1
  store i32 ptrtoint (i32* @global_var_1e8d0.133 to i32), i32* %sl.global-to-local, align 4
  br i1 %v7_f720, label %dec_label_pc_f9c8, label %dec_label_pc_f72c

dec_label_pc_f72c:                                ; preds = %dec_label_pc_f9c8, %dec_label_pc_f71c, %.thread
  store i32 ptrtoint (i8** @global_var_1ea6c.136 to i32), i32* %r2.global-to-local, align 4
  %v2_f730 = load i8, i8* bitcast (i8** @global_var_1ea6c.136 to i8*), align 4
  %v3_f730 = zext i8 %v2_f730 to i32
  store i32 %v3_f730, i32* %r3.global-to-local, align 4
  %v2_f734 = icmp eq i8 %v2_f730, 0
  %v2_f888 = load i32, i32* @global_var_1e8d0.133, align 4
  %v3_f890 = udiv i32 %v2_f888, 32
  br i1 %v2_f734, label %dec_label_pc_f888, label %dec_label_pc_f73c

dec_label_pc_f73c:                                ; preds = %dec_label_pc_f72c
  %v3_f748 = mul nuw nsw i32 %v3_f890, 4
  %v2_f750 = add i32 %v3_f748, %v2_f568
  store i32 %v2_f750, i32* %r3.global-to-local, align 4
  %v1_f754 = add i32 %v2_f750, -488
  %v2_f754 = inttoptr i32 %v1_f754 to i32*
  %v3_f754 = load i32, i32* %v2_f754, align 4
  %v1_f758 = urem i32 %v2_f888, 32
  %v7_f760 = shl i32 1, %v1_f758
  %v8_f760 = or i32 %v3_f754, %v7_f760
  store i32 %v8_f760, i32* %r2.global-to-local, align 4
  store i32 %v8_f760, i32* %v2_f754, align 4
  br label %dec_label_pc_f768

dec_label_pc_f768:                                ; preds = %dec_label_pc_f888, %dec_label_pc_f73c
  %v2_f76c = load i32, i32* @global_var_1e8cc.110, align 4
  %v2_f770 = load i32, i32* @global_var_1e8d0.133, align 4
  store i32 %v2_f770, i32* %r3.global-to-local, align 4
  %v5_f77c = icmp slt i32 %v2_f76c, %v2_f770
  br i1 %v5_f77c, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_f768
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_f768, %bb
  %v0_f794 = phi i32 [ %v2_f76c, %dec_label_pc_f768 ], [ %v2_f770, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f794 = add i32 %v0_f794, 1
  store i32 %v2_f6b0, i32* %r2.global-to-local, align 4
  %v5_f7a8 = call i32 @function_136d0(i32 %v1_f794, i32 %v2_f6ac, i32 %v2_f6b0, i32 0, i32 %v2_f790)
  %v7_f7ac = icmp eq i32 %v5_f7a8, -1
  %v1_f7b0 = trunc i32 %v5_f7a8 to i8
  store i32 %v5_f7a8, i32* %r3.global-to-local, align 4
  br i1 %v7_f7ac, label %dec_label_pc_f6b4.backedge, label %dec_label_pc_f7b8

dec_label_pc_f7b8:                                ; preds = %bb48
  %v2_f7b8 = icmp eq i32 %v5_f7a8, 0
  br i1 %v2_f7b8, label %dec_label_pc_f7c0, label %dec_label_pc_f7e8

dec_label_pc_f7c0:                                ; preds = %dec_label_pc_f7b8
  store i8 %v1_f7b0, i8* %stack_var_-38, align 1
  %v4_f7d0 = sext i8 %v1_f7b0 to i32
  %v5_f7d0 = call i32 @function_132d8(i32 %stack_var_-1552.0, i32 6, i32 %v2_f6b0, i32 %v4_f7d0)
  %v2_f7d8 = icmp eq i32 %v5_f7d0, 0
  %v1_f7dc = add i32 %stack_var_-1552.0, 1
  store i32 %v1_f7dc, i32* %r2.global-to-local, align 4
  br i1 %v2_f7d8, label %dec_label_pc_fa38, label %dec_label_pc_f7e8

dec_label_pc_f7e8:                                ; preds = %dec_label_pc_f7b8, %dec_label_pc_f7c0, %dec_label_pc_fa38
  %stack_var_-37.1 = phi i8 [ %v1_f7b0, %dec_label_pc_fa38 ], [ %v1_f7b0, %dec_label_pc_f7c0 ], [ %stack_var_-37.0, %dec_label_pc_f7b8 ]
  %stack_var_-1552.1 = phi i32 [ %v1_f7dc, %dec_label_pc_fa38 ], [ %v1_f7dc, %dec_label_pc_f7c0 ], [ %stack_var_-1552.0, %dec_label_pc_f7b8 ]
  store i32 ptrtoint (i32* @global_var_1e8cc.110 to i32), i32* %r3.global-to-local, align 4
  %v2_f7ec = load i32, i32* @global_var_1e8cc.110, align 4
  %v7_f7f0 = icmp eq i32 %v2_f7ec, -1
  br i1 %v7_f7f0, label %dec_label_pc_f820, label %dec_label_pc_f7f8

dec_label_pc_f7f8:                                ; preds = %dec_label_pc_f7e8
  %v3_f7f8 = udiv i32 %v2_f7ec, 32
  %v3_f800 = mul nuw nsw i32 %v3_f7f8, 4
  %v2_f808 = add i32 %v3_f800, %v2_f568
  store i32 %v2_f808, i32* %r3.global-to-local, align 4
  %v1_f80c = add i32 %v2_f808, -360
  %v2_f80c = inttoptr i32 %v1_f80c to i32*
  %v3_f80c = load i32, i32* %v2_f80c, align 4
  %v1_f810 = urem i32 %v2_f7ec, 32
  %v6_f814 = lshr i32 %v3_f80c, %v1_f810
  store i32 %v6_f814, i32* %r2.global-to-local, align 4
  %v1_f818 = urem i32 %v6_f814, 2
  %v2_f818 = icmp eq i32 %v1_f818, 0
  br i1 %v2_f818, label %dec_label_pc_f820, label %dec_label_pc_fab8

dec_label_pc_f820:                                ; preds = %dec_label_pc_f7f8, %dec_label_pc_f7e8
  store i32 ptrtoint (i8** @global_var_1ea6c.136 to i32), i32* %r3.global-to-local, align 4
  %v2_f824 = load i8, i8* bitcast (i8** @global_var_1ea6c.136 to i8*), align 4
  %v3_f824 = zext i8 %v2_f824 to i32
  store i32 %v3_f824, i32* @r4, align 4
  %v2_f828 = icmp eq i8 %v2_f824, 0
  %v2_f8b8 = load i32, i32* @global_var_1e8d0.133, align 4
  br i1 %v2_f828, label %dec_label_pc_f8b8, label %dec_label_pc_f830

dec_label_pc_f830:                                ; preds = %dec_label_pc_f820
  %v3_f838 = udiv i32 %v2_f8b8, 32
  %v3_f840 = mul nuw nsw i32 %v3_f838, 4
  %v2_f844 = add i32 %v3_f840, %v2_f568
  store i32 %v2_f844, i32* %r3.global-to-local, align 4
  %v1_f848 = add i32 %v2_f844, -488
  %v2_f848 = inttoptr i32 %v1_f848 to i32*
  %v3_f848 = load i32, i32* %v2_f848, align 4
  %v1_f84c = urem i32 %v2_f8b8, 32
  %v6_f850 = lshr i32 %v3_f848, %v1_f84c
  store i32 %v6_f850, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1ea6c.136 to i32), i32* %r3.global-to-local, align 4
  %v1_f85c = urem i32 %v6_f850, 2
  %v2_f85c = icmp eq i32 %v1_f85c, 0
  store i8 0, i8* bitcast (i8** @global_var_1ea6c.136 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1e8d0.133 to i32), i32* @r5, align 4
  br i1 %v2_f85c, label %dec_label_pc_f86c, label %dec_label_pc_fa58

dec_label_pc_f86c:                                ; preds = %dec_label_pc_f830
  store i32 63604, i32* @lr, align 4
  %v1_f870 = icmp ne i32 %v2_f8b8, -1
  call void @__pseudo_cond_branch(i1 %v1_f870, i32 ptrtoint (i32* @global_var_134b0.25 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f878 = load i32, i32* @r5, align 4
  %v2_f878 = inttoptr i32 %v1_f878 to i32*
  store i32 -1, i32* %v2_f878, align 4
  %v1_f880 = call i32 @function_148e4(i32 1)
  br label %dec_label_pc_f6b4.backedge

dec_label_pc_f888:                                ; preds = %dec_label_pc_f72c
  store i32 %v2_f568, i32* %r2.global-to-local, align 4
  %v3_f898 = mul nuw nsw i32 %v3_f890, 4
  %v2_f89c = add i32 %v3_f898, %v2_f568
  store i32 %v2_f89c, i32* %r3.global-to-local, align 4
  %v1_f8a0 = add i32 %v2_f89c, -360
  %v2_f8a0 = inttoptr i32 %v1_f8a0 to i32*
  %v3_f8a0 = load i32, i32* %v2_f8a0, align 4
  %v1_f8a4 = urem i32 %v2_f888, 32
  %v7_f8ac = shl i32 1, %v1_f8a4
  %v8_f8ac = or i32 %v3_f8a0, %v7_f8ac
  store i32 %v8_f8ac, i32* %r2.global-to-local, align 4
  store i32 %v8_f8ac, i32* %v2_f8a0, align 4
  br label %dec_label_pc_f768

dec_label_pc_f8b8:                                ; preds = %dec_label_pc_f820
  %v7_f8bc = icmp eq i32 %v2_f8b8, -1
  store i32 ptrtoint (i32* @global_var_1e8d0.133 to i32), i32* @r5, align 4
  br i1 %v7_f8bc, label %dec_label_pc_f6b4.backedge, label %dec_label_pc_f8c8

dec_label_pc_f8c8:                                ; preds = %dec_label_pc_f8b8
  %v3_f8c8 = udiv i32 %v2_f8b8, 32
  store i32 %v2_f568, i32* %r2.global-to-local, align 4
  %v3_f8d4 = mul nuw nsw i32 %v3_f8c8, 4
  %v2_f8d8 = add i32 %v3_f8d4, %v2_f568
  store i32 %v2_f8d8, i32* %r3.global-to-local, align 4
  %v1_f8dc = add i32 %v2_f8d8, -360
  %v2_f8dc = inttoptr i32 %v1_f8dc to i32*
  %v3_f8dc = load i32, i32* %v2_f8dc, align 4
  %v1_f8e0 = urem i32 %v2_f8b8, 32
  %v6_f8e4 = lshr i32 %v3_f8dc, %v1_f8e0
  store i32 %v6_f8e4, i32* %r2.global-to-local, align 4
  %v1_f8e8 = urem i32 %v6_f8e4, 2
  %v2_f8e8 = icmp eq i32 %v1_f8e8, 0
  br i1 %v2_f8e8, label %dec_label_pc_f6b4.backedge, label %dec_label_pc_f8f0

dec_label_pc_f8f0:                                ; preds = %dec_label_pc_f8c8
  %v0_f8f0 = call i32 @function_13a84()
  %v0_f8f4 = load i32, i32* @r4, align 4
  %v2_f8f4 = inttoptr i32 %v0_f8f0 to i32*
  store i32 %v0_f8f4, i32* %v2_f8f4, align 4
  store i32 %v0_f8f0, i32* @sl, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f908 = load i32, i32* @global_var_1e8d0.133, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_f914 = call i32 @function_13cc0(i32 %v2_f908, i32* %v5_fa50, i32 2, i32 16386)
  %v7_f918 = icmp eq i32 %v5_f914, -1
  br i1 %v7_f918, label %dec_label_pc_fb58, label %dec_label_pc_f920

dec_label_pc_f920:                                ; preds = %dec_label_pc_f8f0
  %v2_f920 = icmp eq i32 %v5_f914, 0
  br i1 %v2_f920, label %dec_label_pc_f9a4, label %dec_label_pc_f928

dec_label_pc_f928:                                ; preds = %dec_label_pc_f920
  %v3_f928 = load i8, i8* %stack_var_-38, align 1
  %v4_f928 = sext i8 %v3_f928 to i32
  %v4_f92c = zext i8 %stack_var_-37.1 to i32
  store i32 %v4_f92c, i32* %r3.global-to-local, align 4
  %v4_f930 = mul nuw nsw i32 %v4_f92c, 256
  %v5_f930 = or i32 %v4_f928, %v4_f930
  store i32 %v5_f930, i32* %r2.global-to-local, align 4
  %v7_f930 = icmp eq i32 %v5_f930, 0
  br i1 %v7_f930, label %dec_label_pc_fb6c, label %dec_label_pc_f938

dec_label_pc_f938:                                ; preds = %dec_label_pc_f928
  %v1_f938 = mul nsw i32 %v4_f928, 256
  %v3_f93c = and i32 %v1_f938, 65280
  %v4_f940 = udiv i32 %v5_f930, 256
  %v5_f940 = or i32 %v3_f93c, %v4_f940
  store i32 %v5_f940, i32* %r3.global-to-local, align 4
  %v3_f9442 = udiv i32 %v5_f940, 256
  store i32 %v3_f9442, i32* %r2.global-to-local, align 4
  %v1_f94c = trunc i32 %v3_f9442 to i8
  %v6_f950 = trunc i32 %v4_f940 to i8
  store i8 %v6_f950, i8* %stack_var_-38, align 1
  %tmp67 = icmp ult i32 %v5_f940, 1025
  br i1 %tmp67, label %dec_label_pc_f968, label %dec_label_pc_f958

dec_label_pc_f958:                                ; preds = %dec_label_pc_f938
  %v2_f958 = load i32, i32* @global_var_1e8d0.133, align 4
  %v1_f95c = call i32 @function_134b0(i32 %v2_f958)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f964 = load i32, i32* @r5, align 4
  %v2_f964 = inttoptr i32 %v1_f964 to i32*
  store i32 -1, i32* %v2_f964, align 4
  %v3_f970.pre = load i8, i8* %stack_var_-38, align 1
  br label %dec_label_pc_f968

dec_label_pc_f968:                                ; preds = %dec_label_pc_f938, %dec_label_pc_f958
  %v3_f970 = phi i8 [ %v6_f950, %dec_label_pc_f938 ], [ %v3_f970.pre, %dec_label_pc_f958 ]
  %v0_f968 = load i32, i32* @r4, align 4
  %v1_f968 = load i32, i32* @sl, align 4
  %v2_f968 = inttoptr i32 %v1_f968 to i32*
  store i32 %v0_f968, i32* %v2_f968, align 4
  %v4_f96c = urem i32 %v3_f9442, 256
  %v4_f970 = sext i8 %v3_f970 to i32
  store i32 %v2_f978, i32* @r4, align 4
  %v4_f980 = mul nuw nsw i32 %v4_f96c, 256
  %v5_f980 = or i32 %v4_f970, %v4_f980
  store i32 %v5_f980, i32* %r2.global-to-local, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f988 = load i32, i32* @global_var_1e8d0.133, align 4
  %v5_f990 = call i32 @function_13cc0(i32 %v2_f988, i32* nonnull %stack_var_-1548, i32 %v5_f980, i32 16386)
  %v7_f994 = icmp eq i32 %v5_f990, -1
  br i1 %v7_f994, label %dec_label_pc_fb58, label %dec_label_pc_f99c

dec_label_pc_f99c:                                ; preds = %dec_label_pc_f968
  %v2_f99c = icmp eq i32 %v5_f990, 0
  br i1 %v2_f99c, label %dec_label_pc_f9a4, label %dec_label_pc_fb88

dec_label_pc_f9a4:                                ; preds = %bb50, %dec_label_pc_f99c, %dec_label_pc_f920
  %stack_var_-37.2 = phi i8 [ %stack_var_-37.3, %bb50 ], [ %stack_var_-37.1, %dec_label_pc_f920 ], [ %v1_f94c, %dec_label_pc_f99c ]
  %v2_f9a4 = load i32, i32* @global_var_1e8d0.133, align 4
  store i32 63920, i32* @lr, align 4
  %v1_f9ac = icmp ne i32 %v2_f9a4, -1
  call void @__pseudo_cond_branch(i1 %v1_f9ac, i32 ptrtoint (i32* @global_var_134b0.25 to i32))
  store i32 ptrtoint (i32* @global_var_1e8d0.133 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1e8d0.133, align 4
  %v1_f9c0 = call i32 @function_148e4(i32 1)
  br label %dec_label_pc_f6b4.backedge

dec_label_pc_f9c8:                                ; preds = %dec_label_pc_f71c
  %v0_f9d0 = load i32, i32* @r4, align 4
  store i32 %v0_f9d0, i32* %r2.global-to-local, align 4
  %v3_f9d4 = call i32 @function_13db0(i32 2, i32 1, i32 %v0_f9d0)
  %v7_f9d8 = icmp eq i32 %v3_f9d4, -1
  store i32 %v3_f9d4, i32* %r5.global-to-local, align 4
  %v1_f9e0 = load i32, i32* %sl.global-to-local, align 4
  %v2_f9e0 = inttoptr i32 %v1_f9e0 to i32*
  store i32 %v3_f9d4, i32* %v2_f9e0, align 4
  br i1 %v7_f9d8, label %dec_label_pc_f72c, label %dec_label_pc_f9e8

dec_label_pc_f9e8:                                ; preds = %dec_label_pc_f9c8
  %v0_f9e8 = load i32, i32* @r4, align 4
  store i32 %v0_f9e8, i32* @r2, align 4
  %v2_f9f0 = call i32 @function_133c0(i32 %v3_f9d4, i32 3)
  %v1_f9f8 = or i32 %v2_f9f0, 2048
  store i32 %v1_f9f8, i32* @r2, align 4
  %v0_f9fc = load i32, i32* %r5.global-to-local, align 4
  %v2_fa00 = call i32 @function_133c0(i32 %v0_f9fc, i32 4)
  %v2_fa08 = load i32, i32* @global_var_1e8d4.108, align 4
  store i32 %v2_fa08, i32* %r3.global-to-local, align 4
  %v2_fa0c = icmp eq i32 %v2_fa08, 0
  br i1 %v2_fa0c, label %.thread, label %bb49

bb49:                                             ; preds = %dec_label_pc_f9e8
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_12da8.138 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f9e8, %bb49
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_fa20 = load i32, i32* @global_var_1e8d0.133, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1ea6c.136 to i8*), align 4
  %v5_fa30 = call i32 @function_13c0c(i32 %v2_fa20, %sockaddr* bitcast (i8** @global_var_1eb08.115 to %sockaddr*), i32 16)
  br label %dec_label_pc_f72c

dec_label_pc_fa38:                                ; preds = %dec_label_pc_f7c0
  %v2_fa40 = load i32, i32* @global_var_1e8d0.133, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_fa50 = call i32 @function_13d20(i32 %v2_fa40, i32* nonnull %v5_fa50, i32 2, i32 16384)
  br label %dec_label_pc_f7e8

dec_label_pc_fa58:                                ; preds = %dec_label_pc_f830
  store i32 4, i32* @r4, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 %v2_fa68, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_fa80 = call i32 @function_13c64(i32 %v2_f8b8, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_fa6c)
  %v3_fa84 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_fa84, i32* %r3.global-to-local, align 4
  %v2_fa88 = icmp eq i32 %v3_fa84, 0
  br i1 %v2_fa88, label %dec_label_pc_faf8, label %dec_label_pc_fa90

dec_label_pc_fa90:                                ; preds = %dec_label_pc_fa58
  %v2_fa90 = load i32, i32* @global_var_1e8d0.133, align 4
  %v1_fa94 = call i32 @function_134b0(i32 %v2_fa90)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_fa9c = load i32, i32* @r5, align 4
  %v2_fa9c = inttoptr i32 %v1_fa9c to i32*
  store i32 -1, i32* %v2_fa9c, align 4
  %v0_faa0 = call i32 @function_fc1c()
  %v2_faa8 = call i32 @function_1320c(i32 %v0_faa0, i32 10)
  %v1_faac = add i32 %v2_faa8, 1
  %v1_fab0 = call i32 @function_148e4(i32 %v1_faac)
  br label %dec_label_pc_f6b4.backedge

dec_label_pc_fab8:                                ; preds = %dec_label_pc_f7f8
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_fa68, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_fad0 = call i32 @function_13bb4(i32 %v2_f7ec, %sockaddr* %v5_fad0, i32 %v2_fa68, i32 16, i32 16)
  %v1_fad4 = call i32 @function_1044c(i32 %v6_fad0)
  %v1_fad8 = call i32 @function_e550(i32 %v1_fad4)
  %v1_fadc = call i32 @function_a32c(i32 %v1_fad8)
  store i32 %v1_f670, i32* %r2.global-to-local, align 4
  %v2_faec = call i32 @function_135b0(i32 %v1_fae8, i32 9)
  %v1_faf4 = call i32 @function_14850(i32 0)
  br label %dec_label_pc_faf8

dec_label_pc_faf8:                                ; preds = %dec_label_pc_fa58, %dec_label_pc_fab8
  %v2_fafc = call i32 @function_12af0(i8* %v1_fafc)
  %v3_fafc = trunc i32 %v2_fafc to i8
  store i8 %v3_fafc, i8* %stack_var_-38, align 1
  %v0_fb04 = call i32 @function_12da8()
  %v0_fb08 = load i32, i32* @r4, align 4
  store i32 %v0_fb08, i32* %r2.global-to-local, align 4
  %v1_fb0c = load i32, i32* @fp, align 4
  %v2_fb0c = inttoptr i32 %v1_fb0c to i32*
  store i32 %v0_fb04, i32* %v2_fb0c, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fb18 = load i32, i32* @r5, align 4
  %v1_fb18 = inttoptr i32 %v0_fb18 to i32*
  %v2_fb18 = load i32, i32* %v1_fb18, align 4
  %v5_fb1c = call i32 @function_13d20(i32 %v2_fb18, i32* nonnull @global_var_15df8.140, i32 %v0_fb08, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_fb28 = load i32, i32* @r5, align 4
  %v1_fb28 = inttoptr i32 %v0_fb28 to i32*
  %v2_fb28 = load i32, i32* %v1_fb28, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fb34 = call i32 @function_13d20(i32 %v2_fb28, i32* %v5_fa50, i32 1, i32 16384)
  %v3_fb38 = load i8, i8* %stack_var_-38, align 1
  %v4_fb38 = sext i8 %v3_fb38 to i32
  store i32 %v4_fb38, i32* %r2.global-to-local, align 4
  %v2_fb3c = icmp eq i8 %v3_fb38, 0
  br i1 %v2_fb3c, label %dec_label_pc_f6b4.backedge, label %dec_label_pc_fb44

dec_label_pc_fb44:                                ; preds = %dec_label_pc_faf8
  %v0_fb44 = load i32, i32* @r5, align 4
  %v1_fb44 = inttoptr i32 %v0_fb44 to i32*
  %v2_fb44 = load i32, i32* %v1_fb44, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fb50 = call i32 @function_13d20(i32 %v2_fb44, i32* nonnull %stack_var_-140, i32 %v4_fb38, i32 16384)
  br label %dec_label_pc_f6b4.backedge

dec_label_pc_fb58:                                ; preds = %dec_label_pc_f968, %dec_label_pc_f8f0
  %stack_var_-37.3 = phi i8 [ %stack_var_-37.1, %dec_label_pc_f8f0 ], [ %v1_f94c, %dec_label_pc_f968 ]
  %v0_fb58 = load i32, i32* @sl, align 4
  %v1_fb58 = inttoptr i32 %v0_fb58 to i32*
  %v2_fb58 = load i32, i32* %v1_fb58, align 4
  store i32 %v2_fb58, i32* %r3.global-to-local, align 4
  %v7_fb5c = icmp eq i32 %v2_fb58, 4
  br i1 %v7_fb5c, label %dec_label_pc_f6b4.backedge, label %bb50

bb50:                                             ; preds = %dec_label_pc_fb58
  %v8_fb60 = icmp eq i32 %v2_fb58, 11
  br i1 %v8_fb60, label %dec_label_pc_f6b4.backedge, label %dec_label_pc_f9a4

dec_label_pc_fb6c:                                ; preds = %dec_label_pc_f928
  %v2_fb70 = load i32, i32* @global_var_1e8d0.133, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_fb80 = call i32 @function_13cc0(i32 %v2_fb70, i32* nonnull %v5_fa50, i32 2, i32 16384)
  br label %dec_label_pc_f6b4.backedge

dec_label_pc_f6b4.backedge:                       ; preds = %dec_label_pc_fb6c, %dec_label_pc_fbdc, %dec_label_pc_f86c, %dec_label_pc_f9a4, %dec_label_pc_fa90, %dec_label_pc_fb44, %dec_label_pc_fb88, %bb48, %dec_label_pc_f8b8, %dec_label_pc_f8c8, %dec_label_pc_faf8, %bb50, %dec_label_pc_fb58
  %stack_var_-37.0.be = phi i8 [ %stack_var_-37.0, %bb48 ], [ %stack_var_-37.1, %dec_label_pc_f8b8 ], [ %stack_var_-37.1, %dec_label_pc_f8c8 ], [ %stack_var_-37.3, %bb50 ], [ %stack_var_-37.2, %dec_label_pc_f9a4 ], [ %stack_var_-37.1, %dec_label_pc_fb6c ], [ %v3_fba0, %dec_label_pc_fb88 ], [ %v3_fba0, %dec_label_pc_fbdc ], [ %stack_var_-37.1, %dec_label_pc_f86c ], [ %stack_var_-37.1, %dec_label_pc_faf8 ], [ %stack_var_-37.1, %dec_label_pc_fb44 ], [ %stack_var_-37.1, %dec_label_pc_fa90 ], [ %stack_var_-37.3, %dec_label_pc_fb58 ]
  %stack_var_-1552.0.be = phi i32 [ %stack_var_-1552.0, %bb48 ], [ %stack_var_-1552.1, %dec_label_pc_f8b8 ], [ %stack_var_-1552.1, %dec_label_pc_f8c8 ], [ %stack_var_-1552.1, %bb50 ], [ %stack_var_-1552.1, %dec_label_pc_f9a4 ], [ %stack_var_-1552.1, %dec_label_pc_fb6c ], [ %stack_var_-1552.1, %dec_label_pc_fb88 ], [ %stack_var_-1552.1, %dec_label_pc_fbdc ], [ %stack_var_-1552.1, %dec_label_pc_f86c ], [ %stack_var_-1552.1, %dec_label_pc_faf8 ], [ %stack_var_-1552.1, %dec_label_pc_fb44 ], [ %stack_var_-1552.1, %dec_label_pc_fa90 ], [ %stack_var_-1552.1, %dec_label_pc_fb58 ]
  %v2_f6bc51.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f6b4

dec_label_pc_fb88:                                ; preds = %dec_label_pc_f99c
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_fb98 = load i32, i32* @global_var_1e8d0.133, align 4
  %v5_fb9c = call i32 @function_13cc0(i32 %v2_fb98, i32* nonnull %v5_fa50, i32 2, i32 16384)
  %v3_fba0 = load i8, i8* %stack_var_-38, align 1
  %v4_fba0 = sext i8 %v3_fba0 to i32
  %v4_fba8 = mul nsw i32 %v4_fba0, 256
  %v5_fba8 = or i32 %v4_fba8, %v4_f96c
  store i32 %v5_fba8, i32* %r2.global-to-local, align 4
  store i32 %v4_fba0, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_fbbc = load i32, i32* @global_var_1e8d0.133, align 4
  store i8 %v1_f94c, i8* %stack_var_-38, align 1
  %v8_fbc8 = call i32 @function_13cc0(i32 %v2_fbbc, i32* nonnull %stack_var_-1548, i32 %v5_fba8, i32 16384)
  %v3_fbcc = load i8, i8* %stack_var_-38, align 1
  %v4_fbcc = sext i8 %v3_fbcc to i32
  store i32 %v4_fbcc, i32* %r2.global-to-local, align 4
  %v4_fbd0 = zext i8 %v3_fba0 to i32
  store i32 %v4_fbd0, i32* %r3.global-to-local, align 4
  %v4_fbd4 = mul nuw nsw i32 %v4_fbd0, 256
  %v5_fbd4 = or i32 %v4_fbcc, %v4_fbd4
  %v7_fbd4 = icmp eq i32 %v5_fbd4, 0
  br i1 %v7_fbd4, label %dec_label_pc_f6b4.backedge, label %dec_label_pc_fbdc

dec_label_pc_fbdc:                                ; preds = %dec_label_pc_fb88
  %v5_fbe0 = call i32 @function_a0d8(i32* nonnull %stack_var_-1548, i32 %v5_fbd4, i32 %v4_fbcc, i32 %v4_fbd0)
  br label %dec_label_pc_f6b4.backedge

; uselistorder directives
  uselistorder i32 %v4_fbd0, { 1, 0, 2 }
  uselistorder i32 %v4_fbcc, { 1, 0, 2 }
  uselistorder i32 %v4_fba0, { 1, 0 }
  uselistorder i8 %v3_fba0, { 2, 3, 1, 0 }
  uselistorder i32 %v3_f9d4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_f990, { 1, 0 }
  uselistorder i32 %v4_f96c, { 1, 0 }
  uselistorder i8 %v1_f94c, { 0, 2, 1 }
  uselistorder i32 %v3_f9442, { 0, 2, 1 }
  uselistorder i32 %v4_f940, { 1, 0 }
  uselistorder i32 %v5_f914, { 1, 0 }
  uselistorder i32 %v2_f8b8, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_f7ec, { 3, 2, 1, 0 }
  uselistorder i8 %stack_var_-37.1, { 0, 1, 2, 3, 4, 5, 6, 9, 8, 7 }
  uselistorder i8 %v1_f7b0, { 0, 1, 3, 2 }
  uselistorder i32 %v5_f7a8, { 3, 1, 2, 0 }
  uselistorder i32 %v2_f6e8, { 2, 1, 0 }
  uselistorder i32 %v1_f6d8, { 1, 2, 0 }
  uselistorder i32 %v1_f6c0, { 1, 2, 0 }
  uselistorder i32 %stack_var_-1552.0, { 0, 2, 1, 3 }
  uselistorder i32 %v2_fa68, { 1, 0, 2 }
  uselistorder i32* %v5_fa50, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_f6b0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_f6ac, { 1, 0, 2 }
  uselistorder i32 %v4_f624, { 1, 2, 0 }
  uselistorder i32 %v2_f568, { 0, 8, 1, 9, 2, 3, 4, 5, 6, 7, 10 }
  uselistorder i32 %v4_f498, { 1, 2, 0 }
  uselistorder i32 %v2_f440, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 5, 4, 6 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0 }
  uselistorder i8* %stack_var_-38, { 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 45, 46, 47, 48, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 28, 26, 27, 29, 30, 31, 32, 43, 44, 36, 37, 33, 41, 42, 34, 35, 38, 39, 40 }
  uselistorder i32* %r2.global-to-local, { 35, 36, 37, 38, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* @global_var_1e8d4.108, { 1, 0 }
  uselistorder i32 16386, { 1, 0, 2, 4, 3, 5 }
  uselistorder i8* bitcast (i8** @global_var_1ea6c.136 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1ea6c.136, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1ea6c.136 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1e8cc.110, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32* @global_var_1e8d0.133, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 (i8*, i32)* @function_12b18, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 66, 36, 37, 38, 39, 40, 61, 62, 63, 64, 65, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 }
  uselistorder i32 (i32, i32)* @function_fcd0, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_f230, { 1, 0 }
  uselistorder [2 x i8]* @global_var_15d80.23, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_13e3c, { 1, 0 }
  uselistorder label %dec_label_pc_f6b4.backedge, { 1, 6, 0, 11, 12, 5, 10, 4, 3, 9, 8, 2, 7 }
  uselistorder label %dec_label_pc_faf8, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f968, { 1, 0 }
  uselistorder label %dec_label_pc_f7e8, { 2, 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %dec_label_pc_f72c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f71c, { 1, 0 }
  uselistorder label %dec_label_pc_f6d4.dec_label_pc_f6d4_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f6bc.dec_label_pc_f6bc_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f540, { 2, 0, 1 }
}

define i32 @function_fc1c() local_unnamed_addr {
dec_label_pc_fc1c:
  %v2_fc28 = load i32, i32* @global_var_1ea70.142, align 4
  %v2_fc2c = load i32, i32* @global_var_1ea7c.144, align 4
  store i32 ptrtoint (i32* @global_var_1ea74.146 to i32), i32* @lr, align 4
  %v4_fc38 = mul i32 %v2_fc28, 2048
  %v5_fc38 = xor i32 %v4_fc38, %v2_fc28
  %v4_fc3c = udiv i32 %v2_fc2c, 524288
  %v5_fc3c = xor i32 %v4_fc3c, %v2_fc2c
  %v2_fc40 = load i32, i32* @global_var_1ea74.146, align 4
  %v2_fc44 = load i32, i32* @global_var_1ea78.148, align 4
  %v2_fc48 = xor i32 %v5_fc3c, %v5_fc38
  %v4_fc4c = udiv i32 %v5_fc38, 256
  %v5_fc4c = xor i32 %v2_fc48, %v4_fc4c
  store i32 %v2_fc40, i32* @global_var_1ea70.142, align 4
  store i32 %v2_fc44, i32* @global_var_1ea74.146, align 4
  store i32 %v2_fc2c, i32* @global_var_1ea78.148, align 4
  store i32 %v5_fc4c, i32* @global_var_1ea7c.144, align 4
  ret i32 %v5_fc4c

; uselistorder directives
  uselistorder i32 %v2_fc2c, { 2, 1, 0 }
  uselistorder i32 %v2_fc28, { 1, 0 }
}

define i32 @function_fc74(i32 %arg1) local_unnamed_addr {
dec_label_pc_fc74:
  %stack_var_-12 = alloca i32, align 4
  %v3_fc74 = load i32, i32* @r4, align 4
  store i32 %v3_fc74, i32* %stack_var_-12, align 4
  %v2_fc7c = call i32 @function_13780(i32* null)
  store i32 %v2_fc7c, i32* @global_var_1ea70.142, align 4
  %v0_fc88 = call i32 @function_13508()
  store i32 %v0_fc88, i32* @r4, align 4
  %v0_fc90 = call i32 @function_13534()
  %v0_fc98 = load i32, i32* @r4, align 4
  %v2_fc98 = xor i32 %v0_fc98, %v0_fc90
  store i32 %v2_fc98, i32* @r4, align 4
  store i32 %v2_fc98, i32* @global_var_1ea74.146, align 4
  %v1_fca0 = call i32 @function_13a90(i32 %v0_fc90)
  %v2_fca4 = load i32, i32* @global_var_1ea74.146, align 4
  %v2_fcb0 = xor i32 %v2_fca4, %v1_fca0
  store i32 %v2_fcb0, i32* @global_var_1ea7c.144, align 4
  store i32 %v1_fca0, i32* @global_var_1ea78.148, align 4
  %v2_fcbc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_fcbc, i32* @r4, align 4
  ret i32 %v1_fca0

; uselistorder directives
  uselistorder i32 %v1_fca0, { 1, 2, 0 }
  uselistorder i32 %v0_fc90, { 1, 0 }
  uselistorder i32 ()* @function_13534, { 1, 2, 0 }
}

define i32 @function_fcd0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_fcd0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-69 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_fcd0 = load i32, i32* @r4, align 4
  store i32 %v3_fcd0, i32* %stack_var_-36, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  store i32 ptrtoint ([33 x i8]* @global_var_15e00.154 to i32), i32* @r1, align 4
  %v2_fce4 = ptrtoint i32* %stack_var_-69 to i32
  store i32 %v2_fce4, i32* @r0, align 4
  store i32 33, i32* @r2, align 4
  %v4_fcec = call i32 @function_13ad0(i32 %v2_fce4, i32 ptrtoint ([33 x i8]* @global_var_15e00.154 to i32), i32 33)
  store i32 %v4_fcec, i32* %r0.global-to-local, align 4
  %v0_fcf0 = load i32, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_fcf0 = icmp slt i32 %v0_fcf0, 0
  store i1 %v1_fcf0, i1* %cpsr_n.global-to-local, align 1
  %v2_fcf0 = icmp eq i32 %v0_fcf0, 0
  store i1 %v2_fcf0, i1* %cpsr_z.global-to-local, align 1
  %tmp20 = icmp slt i32 %v0_fcf0, 1
  br i1 %tmp20, label %dec_label_pc_fddc, label %dec_label_pc_fcf8

dec_label_pc_fcf8:                                ; preds = %dec_label_pc_fcd0
  store i32 ptrtoint (i32* @global_var_1ea7c.144 to i32), i32* %fp.global-to-local, align 4
  %v2_fd04 = load i32, i32* @global_var_1ea78.148, align 4
  store i32 %v2_fd04, i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea70.142 to i32), i32* %r3.global-to-local, align 4
  %v2_fd0c = load i32, i32* @global_var_1ea74.146, align 4
  store i32 %v2_fd0c, i32* %sl.global-to-local, align 4
  %v2_fd10 = load i32, i32* @global_var_1ea7c.144, align 4
  store i32 %v2_fd10, i32* %r6.global-to-local, align 4
  %v2_fd14 = load i32, i32* @global_var_1ea70.142, align 4
  store i32 %v2_fd14, i32* %ip.global-to-local, align 4
  %v0_fd18 = load i32, i32* @r4, align 4
  %v1_fd18 = add i32 %v0_fd18, 1
  store i32 %v1_fd18, i32* %r7.global-to-local, align 4
  %v2_fd24 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_fd84

dec_label_pc_fd20:                                ; preds = %dec_label_pc_fd84
  %v1_fd20 = udiv i32 %v5_fd90, 8
  %v4_fd28 = urem i32 %v1_fd20, 32
  %v5_fd28 = add i32 %v4_fd28, %v2_fd24
  store i32 %v5_fd28, i32* %r0.global-to-local, align 4
  store i32 %v2_fd24, i32* %r3.global-to-local, align 4
  %v3_fd34 = mul i32 %v5_fd90, 256
  store i32 %v3_fd34, i32* %r1.global-to-local, align 4
  %tmp21 = udiv i32 %v5_fd90, 2048
  %v4_fd38 = urem i32 %tmp21, 32
  %v5_fd38 = add i32 %v4_fd38, %v2_fd24
  store i32 %v5_fd38, i32* %ip.global-to-local, align 4
  %tmp22 = udiv i32 %v5_fd90, 524288
  %v4_fd3c = urem i32 %tmp22, 32
  %v5_fd3c = add i32 %v4_fd3c, %v2_fd24
  store i32 %v5_fd3c, i32* @lr, align 4
  %v4_fd40 = udiv i32 %v2_fd8c, 134217728
  %v5_fd40 = add i32 %v4_fd40, %v2_fd24
  %v1_fd44 = add i32 %v5_fd38, -33
  %v2_fd44 = inttoptr i32 %v1_fd44 to i8*
  %v3_fd44 = load i8, i8* %v2_fd44, align 1
  %v4_fd44 = zext i8 %v3_fd44 to i32
  store i32 %v4_fd44, i32* @r2, align 4
  %v1_fd48 = add i32 %v5_fd28, -33
  %v2_fd48 = inttoptr i32 %v1_fd48 to i8*
  %v3_fd48 = load i8, i8* %v2_fd48, align 1
  %v4_fd48 = zext i8 %v3_fd48 to i32
  store i32 %v4_fd48, i32* %r3.global-to-local, align 4
  %v1_fd4c = add i32 %v5_fd3c, -33
  %v2_fd4c = inttoptr i32 %v1_fd4c to i8*
  %v3_fd4c = load i8, i8* %v2_fd4c, align 1
  %v4_fd4c = zext i8 %v3_fd4c to i32
  store i32 %v4_fd4c, i32* %r1.global-to-local, align 4
  %v1_fd50 = add i32 %v5_fd40, -33
  %v2_fd50 = inttoptr i32 %v1_fd50 to i8*
  %v3_fd50 = load i8, i8* %v2_fd50, align 1
  %v4_fd50 = zext i8 %v3_fd50 to i32
  store i32 %v4_fd50, i32* %r0.global-to-local, align 4
  %v1_fd54 = add i32 %v0_fd54, -4
  store i32 %v1_fd54, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_fd58 = icmp slt i32 %v1_fd54, 0
  store i1 %v1_fd58, i1* %cpsr_n.global-to-local, align 1
  %v2_fd58 = icmp eq i32 %v1_fd54, 0
  store i1 %v2_fd58, i1* %cpsr_z.global-to-local, align 1
  %v3_fd5c = add i32 %v2_fd5c, -1
  %v4_fd5c = inttoptr i32 %v3_fd5c to i8*
  store i8 %v3_fd48, i8* %v4_fd5c, align 1
  %v0_fd60 = load i32, i32* @r2, align 4
  %v1_fd60 = trunc i32 %v0_fd60 to i8
  %v2_fd60 = load i32, i32* %r7.global-to-local, align 4
  %v3_fd60 = inttoptr i32 %v2_fd60 to i8*
  store i8 %v1_fd60, i8* %v3_fd60, align 1
  %v0_fd64 = load i32, i32* %r1.global-to-local, align 4
  %v1_fd64 = trunc i32 %v0_fd64 to i8
  %v2_fd64 = load i32, i32* %r7.global-to-local, align 4
  %v3_fd64 = add i32 %v2_fd64, 1
  %v4_fd64 = inttoptr i32 %v3_fd64 to i8*
  store i8 %v1_fd64, i8* %v4_fd64, align 1
  %v0_fd68 = load i32, i32* %r0.global-to-local, align 4
  %v1_fd68 = trunc i32 %v0_fd68 to i8
  %v2_fd68 = load i32, i32* %r7.global-to-local, align 4
  %v3_fd68 = add i32 %v2_fd68, 2
  %v4_fd68 = inttoptr i32 %v3_fd68 to i8*
  store i8 %v1_fd68, i8* %v4_fd68, align 1
  %v0_fd6c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_fd6c, i32* %ip.global-to-local, align 4
  %v0_fd70 = load i32, i32* %r7.global-to-local, align 4
  %v1_fd70 = add i32 %v0_fd70, 4
  store i32 %v1_fd70, i32* %r7.global-to-local, align 4
  %v0_fd74 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_fd74 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_fd74 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_fd74 = xor i1 %v1_fd74, %v2_fd74
  %v4_fd74 = or i1 %v0_fd74, %v3_fd74
  br i1 %v4_fd74, label %dec_label_pc_fdc0, label %dec_label_pc_fd78

dec_label_pc_fd78:                                ; preds = %dec_label_pc_fda4, %dec_label_pc_fd20
  %v2_fd5c6 = phi i32 [ %v1_fdb8, %dec_label_pc_fda4 ], [ %v1_fd70, %dec_label_pc_fd20 ]
  %v0_fd842 = phi i32 [ %v0_fdb4, %dec_label_pc_fda4 ], [ %v0_fd6c, %dec_label_pc_fd20 ]
  %v0_fd78 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_fd78, i32* %sl.global-to-local, align 4
  %v0_fd7c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_fd7c, i32* %sb.global-to-local, align 4
  %v0_fd80 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_fd80, i32* %r6.global-to-local, align 4
  %v0_fd94.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_fd84

dec_label_pc_fd84:                                ; preds = %dec_label_pc_fcf8, %dec_label_pc_fd78
  %v2_fd5c = phi i32 [ %v1_fd18, %dec_label_pc_fcf8 ], [ %v2_fd5c6, %dec_label_pc_fd78 ]
  %v0_fd54 = phi i32 [ %v0_fcf0, %dec_label_pc_fcf8 ], [ %v0_fd94.pre, %dec_label_pc_fd78 ]
  %v0_fd88 = phi i32 [ %v2_fd10, %dec_label_pc_fcf8 ], [ %v0_fd80, %dec_label_pc_fd78 ]
  %v0_fd84 = phi i32 [ %v2_fd14, %dec_label_pc_fcf8 ], [ %v0_fd842, %dec_label_pc_fd78 ]
  %v4_fd84 = mul i32 %v0_fd84, 2048
  %v5_fd84 = xor i32 %v4_fd84, %v0_fd84
  store i32 %v5_fd84, i32* %r3.global-to-local, align 4
  %v4_fd88 = udiv i32 %v0_fd88, 524288
  %v5_fd88 = xor i32 %v4_fd88, %v0_fd88
  %v2_fd8c = xor i32 %v5_fd88, %v5_fd84
  %v4_fd90 = udiv i32 %v5_fd84, 256
  %v5_fd90 = xor i32 %v4_fd90, %v2_fd8c
  store i32 %v5_fd90, i32* %r5.global-to-local, align 4
  %v1_fd94 = add i32 %v0_fd54, -3
  %v2_fd94 = icmp ugt i32 %v0_fd54, 2
  %v3_fd94 = sub i32 2, %v0_fd54
  %v4_fd94 = and i32 %v3_fd94, %v0_fd54
  %v5_fd94 = icmp slt i32 %v4_fd94, 0
  store i1 %v5_fd94, i1* %cpsr_v.global-to-local, align 1
  %v6_fd94 = icmp slt i32 %v1_fd94, 0
  store i1 %v6_fd94, i1* %cpsr_n.global-to-local, align 1
  %v7_fd94 = icmp eq i32 %v0_fd54, 3
  store i1 %v7_fd94, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_fd90, i32* %r0.global-to-local, align 4
  store i32 33, i32* %r1.global-to-local, align 4
  %v2_fda0 = xor i1 %v7_fd94, true
  %v3_fda0 = and i1 %v2_fd94, %v2_fda0
  br i1 %v3_fda0, label %dec_label_pc_fd20, label %dec_label_pc_fda4

dec_label_pc_fda4:                                ; preds = %dec_label_pc_fd84
  %v2_fda4 = call i32 @function_1320c(i32 %v5_fd90, i32 33)
  store i32 %v2_fda4, i32* %r0.global-to-local, align 4
  %v0_fda8 = load i32, i32* %r8.global-to-local, align 4
  %v1_fda8 = add i32 %v0_fda8, -1
  store i32 %v1_fda8, i32* %r8.global-to-local, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v1_fdac = icmp slt i32 %v1_fda8, 0
  store i1 %v1_fdac, i1* %cpsr_n.global-to-local, align 1
  %v2_fdac = icmp eq i32 %v1_fda8, 0
  store i1 %v2_fdac, i1* %cpsr_z.global-to-local, align 1
  %v1_fdb0 = trunc i32 %v2_fda4 to i8
  %v2_fdb0 = load i32, i32* %r7.global-to-local, align 4
  %v3_fdb0 = add i32 %v2_fdb0, -1
  %v4_fdb0 = inttoptr i32 %v3_fdb0 to i8*
  store i8 %v1_fdb0, i8* %v4_fdb0, align 1
  %v0_fdb4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v0_fdb4, i32* %ip.global-to-local, align 4
  %v0_fdb8 = load i32, i32* %r7.global-to-local, align 4
  %v1_fdb8 = add i32 %v0_fdb8, 1
  store i32 %v1_fdb8, i32* %r7.global-to-local, align 4
  %v0_fdbc = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_fdbc = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_fdbc = load i1, i1* %cpsr_v.global-to-local, align 1
  %v3_fdbc = xor i1 %v1_fdbc, %v2_fdbc
  %v4_fdbc = or i1 %v0_fdbc, %v3_fdbc
  br i1 %v4_fdbc, label %dec_label_pc_fdc0, label %dec_label_pc_fd78

dec_label_pc_fdc0:                                ; preds = %dec_label_pc_fda4, %dec_label_pc_fd20
  store i32 ptrtoint (i32* @global_var_1ea74.146 to i32), i32* %r3.global-to-local, align 4
  %v0_fdc8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_fdc8, i32* @global_var_1ea78.148, align 4
  store i32 ptrtoint (i32* @global_var_1ea70.142 to i32), i32* %ip.global-to-local, align 4
  %v0_fdd0 = load i32, i32* %r5.global-to-local, align 4
  %v1_fdd0 = load i32, i32* %fp.global-to-local, align 4
  %v2_fdd0 = inttoptr i32 %v1_fdd0 to i32*
  store i32 %v0_fdd0, i32* %v2_fdd0, align 4
  %v0_fdd4 = load i32, i32* %sb.global-to-local, align 4
  %v1_fdd4 = load i32, i32* %r3.global-to-local, align 4
  %v2_fdd4 = inttoptr i32 %v1_fdd4 to i32*
  store i32 %v0_fdd4, i32* %v2_fdd4, align 4
  %v0_fdd8 = load i32, i32* %sl.global-to-local, align 4
  %v1_fdd8 = load i32, i32* %ip.global-to-local, align 4
  %v2_fdd8 = inttoptr i32 %v1_fdd8 to i32*
  store i32 %v0_fdd8, i32* %v2_fdd8, align 4
  %v2_fde0.pre = load i32, i32* %stack_var_-36, align 4
  %v29_fde0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fddc

dec_label_pc_fddc:                                ; preds = %dec_label_pc_fcd0, %dec_label_pc_fdc0
  %v29_fde0 = phi i32 [ %v29_fde0.pre, %dec_label_pc_fdc0 ], [ %v4_fcec, %dec_label_pc_fcd0 ]
  %v2_fde0 = phi i32 [ %v2_fde0.pre, %dec_label_pc_fdc0 ], [ %v3_fcd0, %dec_label_pc_fcd0 ]
  store i32 %v2_fde0, i32* @r4, align 4
  ret i32 %v29_fde0

; uselistorder directives
  uselistorder i32 %v1_fdb8, { 1, 0 }
  uselistorder i32 %v0_fdb4, { 1, 0 }
  uselistorder i32 %v5_fd90, { 5, 4, 6, 3, 0, 2, 1 }
  uselistorder i32 %v2_fd8c, { 1, 0 }
  uselistorder i32 %v0_fd84, { 1, 0 }
  uselistorder i32 %v0_fd88, { 1, 0 }
  uselistorder i32 %v0_fd54, { 2, 0, 5, 4, 3, 1 }
  uselistorder i32 %v2_fd24, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_fcf0, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %sb.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r8.global-to-local, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 8 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 4, 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 4, 1, 2, 3, 7, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_v.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1* %cpsr_n.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 -33, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_fddc, { 1, 0 }
  uselistorder label %dec_label_pc_fd84, { 1, 0 }
}

define i32 @function_fdf8(i8* %arg1) local_unnamed_addr {
dec_label_pc_fdf8:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_fdf8 = load i32, i32* @r4, align 4
  store i32 %v3_fdf8, i32* %stack_var_-36, align 4
  %v9_fdf8 = load i32, i32* @r6, align 4
  %v12_fdf8 = load i32, i32* @r7, align 4
  %v15_fdf8 = load i32, i32* @r8, align 4
  %v18_fdf8 = load i32, i32* @sb, align 4
  %v21_fdf8 = load i32, i32* @sl, align 4
  %v24_fdf8 = load i32, i32* @fp, align 4
  %v0_fdfc = load i32, i32* @r1, align 4
  store i32 %v0_fdfc, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_fdfc, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_fdf8
  store i32 %v3_fdf8, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_fdf8
  store i32 ptrtoint (i32* @global_var_1ea7c.144 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea78.148 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea74.146 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea70.142 to i32), i32* %r8.global-to-local, align 4
  %v2_fe18 = load i32, i32* @global_var_1ea7c.144, align 4
  store i32 %v2_fe18, i32* @lr, align 4
  %v2_fe1c = load i32, i32* @global_var_1ea78.148, align 4
  store i32 %v2_fe1c, i32* %r7.global-to-local, align 4
  %v2_fe20 = load i32, i32* @global_var_1ea74.146, align 4
  store i32 %v2_fe20, i32* %r6.global-to-local, align 4
  %v2_fe24 = load i32, i32* @global_var_1ea70.142, align 4
  br label %dec_label_pc_fe50

dec_label_pc_fe2c:                                ; preds = %dec_label_pc_fe7c
  %v3_fe84 = sdiv i32 %v5_fe68, 256
  %v1_fe2c = trunc i32 %v3_fe84 to i8
  %v3_fe2c = add i32 %v9_fe70, 1
  %v4_fe2c = inttoptr i32 %v3_fe2c to i8*
  store i8 %v1_fe2c, i8* %v4_fe2c, align 1
  %v0_fe30 = load i32, i32* %r3.global-to-local, align 4
  %v1_fe30 = trunc i32 %v0_fe30 to i8
  %v2_fe30 = load i32, i32* %r5.global-to-local, align 4
  %v3_fe30 = inttoptr i32 %v2_fe30 to i8*
  store i8 %v1_fe30, i8* %v3_fe30, align 1
  %v0_fe34 = load i32, i32* %r5.global-to-local, align 4
  %v1_fe34 = add i32 %v0_fe34, 2
  store i32 %v1_fe34, i32* %r5.global-to-local, align 4
  %v0_fe38.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fe38

dec_label_pc_fe38:                                ; preds = %.thread, %dec_label_pc_fe2c
  %v0_fe38 = phi i32 [ %v9_fe74, %.thread ], [ %v0_fe38.pre, %dec_label_pc_fe2c ]
  %v2_fe2c7 = phi i32 [ %v12_fe70, %.thread ], [ %v1_fe34, %dec_label_pc_fe2c ]
  %tmp22 = icmp slt i32 %v0_fe38, 1
  br i1 %tmp22, label %dec_label_pc_feb8, label %dec_label_pc_fe44

dec_label_pc_fe44:                                ; preds = %dec_label_pc_fe38
  %v0_fe3c = load i32, i32* %r6.global-to-local, align 4
  %v0_fe44 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_fe44, i32* %r6.global-to-local, align 4
  %v0_fe48 = load i32, i32* @lr, align 4
  store i32 %v0_fe48, i32* %r7.global-to-local, align 4
  %v0_fe4c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_fe4c, i32* @lr, align 4
  br label %dec_label_pc_fe50

dec_label_pc_fe50:                                ; preds = %bb21, %dec_label_pc_fe44
  %v0_fea0 = phi i32 [ %v2_fe20, %bb21 ], [ %v0_fe44, %dec_label_pc_fe44 ]
  %v9_fe70 = phi i32 [ %tmp, %bb21 ], [ %v2_fe2c7, %dec_label_pc_fe44 ]
  %v0_fe88 = phi i32 [ %v0_fdfc, %bb21 ], [ %v0_fe38, %dec_label_pc_fe44 ]
  %v0_fe94 = phi i32 [ %v2_fe18, %bb21 ], [ %v0_fe4c, %dec_label_pc_fe44 ]
  %v0_fe90 = phi i32 [ %v2_fe24, %bb21 ], [ %v0_fe3c, %dec_label_pc_fe44 ]
  %v4_fe50 = mul i32 %v0_fe90, 2048
  %v5_fe50 = xor i32 %v4_fe50, %v0_fe90
  %v4_fe54 = udiv i32 %v0_fe94, 524288
  %v5_fe54 = xor i32 %v4_fe54, %v0_fe94
  %v2_fe58 = xor i32 %v5_fe54, %v5_fe50
  %v4_fe68 = udiv i32 %v5_fe50, 256
  %v5_fe68 = xor i32 %v4_fe68, %v2_fe58
  store i32 %v5_fe68, i32* %r3.global-to-local, align 4
  %v7_fe70 = icmp sgt i32 %v0_fe88, 3
  br i1 %v7_fe70, label %.thread, label %dec_label_pc_fe7c

.thread:                                          ; preds = %dec_label_pc_fe50
  %v10_fe70 = inttoptr i32 %v9_fe70 to i32*
  store i32 %v5_fe68, i32* %v10_fe70, align 4
  %v11_fe70 = load i32, i32* %r5.global-to-local, align 4
  %v12_fe70 = add i32 %v11_fe70, 4
  store i32 %v12_fe70, i32* %r5.global-to-local, align 4
  %v8_fe74 = load i32, i32* %r4.global-to-local, align 4
  %v9_fe74 = add i32 %v8_fe74, -4
  store i32 %v9_fe74, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fe38

dec_label_pc_fe7c:                                ; preds = %dec_label_pc_fe50
  store i32 %v5_fe68, i32* %r3.global-to-local, align 4
  %v7_fe80 = icmp eq i32 %v0_fe88, 1
  %v1_fe88 = add i32 %v0_fe88, -2
  store i32 %v1_fe88, i32* %r4.global-to-local, align 4
  br i1 %v7_fe80, label %dec_label_pc_fe90, label %dec_label_pc_fe2c

dec_label_pc_fe90:                                ; preds = %dec_label_pc_fe7c
  store i32 %v5_fe68, i32* %r3.global-to-local, align 4
  %v1_fea0 = load i32, i32* %r8.global-to-local, align 4
  %v2_fea0 = inttoptr i32 %v1_fea0 to i32*
  store i32 %v0_fea0, i32* %v2_fea0, align 4
  %v0_fea4 = load i32, i32* %r7.global-to-local, align 4
  %v1_fea4 = load i32, i32* %sl.global-to-local, align 4
  %v2_fea4 = inttoptr i32 %v1_fea4 to i32*
  store i32 %v0_fea4, i32* %v2_fea4, align 4
  %v0_fea8 = load i32, i32* @lr, align 4
  %v1_fea8 = load i32, i32* %sb.global-to-local, align 4
  %v2_fea8 = inttoptr i32 %v1_fea8 to i32*
  store i32 %v0_fea8, i32* %v2_fea8, align 4
  %v0_feac = load i32, i32* %r3.global-to-local, align 4
  %v1_feac = load i32, i32* %fp.global-to-local, align 4
  %v2_feac = inttoptr i32 %v1_feac to i32*
  store i32 %v0_feac, i32* %v2_feac, align 4
  %v0_feb0 = load i32, i32* %r3.global-to-local, align 4
  %v1_feb0 = trunc i32 %v0_feb0 to i8
  %v2_feb0 = load i32, i32* %r5.global-to-local, align 4
  %v3_feb0 = inttoptr i32 %v2_feb0 to i8*
  store i8 %v1_feb0, i8* %v3_feb0, align 1
  %v2_feb4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_feb4, i32* @r4, align 4
  store i32 %v9_fdf8, i32* @r6, align 4
  store i32 %v12_fdf8, i32* @r7, align 4
  store i32 %v15_fdf8, i32* @r8, align 4
  store i32 %v18_fdf8, i32* @sb, align 4
  store i32 %v21_fdf8, i32* @sl, align 4
  store i32 %v24_fdf8, i32* @fp, align 4
  ret i32 %v5_fe50

dec_label_pc_feb8:                                ; preds = %dec_label_pc_fe38
  %v0_feb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_feb8 = load i32, i32* %fp.global-to-local, align 4
  %v2_feb8 = inttoptr i32 %v1_feb8 to i32*
  store i32 %v0_feb8, i32* %v2_feb8, align 4
  %v0_febc = load i32, i32* @lr, align 4
  %v1_febc = load i32, i32* %sb.global-to-local, align 4
  %v2_febc = inttoptr i32 %v1_febc to i32*
  store i32 %v0_febc, i32* %v2_febc, align 4
  %v0_fec0 = load i32, i32* %r7.global-to-local, align 4
  %v1_fec0 = load i32, i32* %sl.global-to-local, align 4
  %v2_fec0 = inttoptr i32 %v1_fec0 to i32*
  store i32 %v0_fec0, i32* %v2_fec0, align 4
  %v0_fec4 = load i32, i32* %r6.global-to-local, align 4
  %v1_fec4 = load i32, i32* %r8.global-to-local, align 4
  %v2_fec4 = inttoptr i32 %v1_fec4 to i32*
  store i32 %v0_fec4, i32* %v2_fec4, align 4
  %v2_fec8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_fec8, i32* @r4, align 4
  store i32 %v9_fdf8, i32* @r6, align 4
  store i32 %v12_fdf8, i32* @r7, align 4
  store i32 %v15_fdf8, i32* @r8, align 4
  store i32 %v18_fdf8, i32* @sb, align 4
  store i32 %v21_fdf8, i32* @sl, align 4
  store i32 %v24_fdf8, i32* @fp, align 4
  ret i32 %v5_fe50

; uselistorder directives
  uselistorder i32 %v9_fe74, { 1, 0 }
  uselistorder i32 %v12_fe70, { 1, 0 }
  uselistorder i32 %v5_fe68, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_fe50, { 1, 2, 0, 3 }
  uselistorder i32 %v0_fe90, { 1, 0 }
  uselistorder i32 %v0_fe94, { 1, 0 }
  uselistorder i32 %v0_fe38, { 1, 0 }
  uselistorder i32 %v24_fdf8, { 1, 0 }
  uselistorder i32 %v21_fdf8, { 1, 0 }
  uselistorder i32 %v18_fdf8, { 1, 0 }
  uselistorder i32 %v15_fdf8, { 1, 0 }
  uselistorder i32 %v12_fdf8, { 1, 0 }
  uselistorder i32 %v9_fdf8, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 5, 0, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* @global_var_1ea70.142, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1ea74.146, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1ea78.148, { 3, 6, 1, 4, 2, 0, 5 }
  uselistorder i32* @global_var_1ea7c.144, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_fe50, { 1, 0 }
}

define i32 @function_fedc(i32 %arg1) local_unnamed_addr {
dec_label_pc_fedc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_fedc = load i32, i32* @r4, align 4
  store i32 %v3_fedc, i32* %stack_var_-8, align 4
  %v6_fedc = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_fee0 = icmp eq i32 %arg1, 0
  br i1 %v2_fee0, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_fedc
  store i32 %v3_fedc, i32* @r4, align 4
  ret i32 0

bb3:                                              ; preds = %dec_label_pc_fedc
  %v1_fee8 = add i32 %arg1, 4
  %v2_fee8 = inttoptr i32 %v1_fee8 to i32*
  %v3_fee8 = load i32, i32* %v2_fee8, align 4
  %v1_fef0 = icmp ne i32 %v3_fee8, 0
  call void @__pseudo_cond_branch(i1 %v1_fef0, i32 ptrtoint (i32* @global_var_1410c.58 to i32))
  %v0_fef4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_fef4, i32* @r0, align 4
  %v2_fef8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_fef8, i32* @r4, align 4
  store i32 %v6_fedc, i32* @lr, align 4
  %v0_fefc = call i32 @function_1410c()
  ret i32 %v0_fefc
}

define i32 @function_ff00(i8* %arg1) local_unnamed_addr {
dec_label_pc_ff00:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-4288 = alloca i8, align 1
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2227 = alloca i32, align 4
  %stack_var_-2240 = alloca i8, align 1
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ff00 = load i32, i32* @r4, align 4
  store i32 %v3_ff00, i32* %stack_var_-36, align 4
  %v6_ff00 = load i32, i32* @r5, align 4
  %v9_ff00 = load i32, i32* @r6, align 4
  %v12_ff00 = load i32, i32* @r7, align 4
  %v15_ff00 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_ff18 = call i32 @function_140b4(i32 1, i32 8)
  %v0_ff20 = load i32, i32* @r4, align 4
  %v1_ff20 = inttoptr i32 %v0_ff20 to i8*
  store i32 %v0_ff20, i32* %r0.global-to-local, align 4
  %v3_ff24 = call i32 @function_12af0(i8* %v1_ff20)
  %v2_ff2c = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_ff2c, i32* %fp.global-to-local, align 4
  %v2_ff30 = ptrtoint i8* %stack_var_-2240 to i32
  %v1_ff34 = add i32 %v3_ff24, 1
  store i32 %v1_ff34, i32* %r0.global-to-local, align 4
  %v2_ff38 = ptrtoint i32* %stack_var_-2227 to i32
  store i32 %v2_ff38, i32* %r2.global-to-local, align 4
  store i32 %v2_ff2c, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_ff78162 = icmp eq i32 %v1_ff34, 0
  store i1 %v2_ff78162, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_ff80163 = or i32 %v2_ff38, 1
  store i32 %v1_ff80163, i32* %r1.global-to-local, align 4
  %tmp124164 = icmp slt i32 %v1_ff34, 1
  br i1 %tmp124164, label %dec_label_pc_ff88, label %dec_label_pc_ff48.lr.ph

dec_label_pc_ff48.lr.ph:                          ; preds = %dec_label_pc_ff00
  %v0_ff48.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ff48

dec_label_pc_ff48:                                ; preds = %dec_label_pc_ff48.lr.ph, %.thread12
  %v1_ff5c176.off0 = phi i8 [ 0, %dec_label_pc_ff48.lr.ph ], [ %extract.t179, %.thread12 ]
  %v0_ff48 = phi i32 [ %v0_ff48.pre, %dec_label_pc_ff48.lr.ph ], [ %v1_ff6c, %.thread12 ]
  %v2_ff8c165 = phi i32 [ %v2_ff38, %dec_label_pc_ff48.lr.ph ], [ %v0_ff74, %.thread12 ]
  %v1_ff48 = inttoptr i32 %v0_ff48 to i8*
  %v2_ff48 = load i8, i8* %v1_ff48, align 1
  %v3_ff48 = zext i8 %v2_ff48 to i32
  store i32 %v3_ff48, i32* %r3.global-to-local, align 4
  %v2_ff4c = icmp eq i8 %v2_ff48, 0
  store i1 %v2_ff4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff4c, label %.thread6, label %bb

bb:                                               ; preds = %dec_label_pc_ff48
  %v8_ff50 = icmp eq i8 %v2_ff48, 46
  store i1 %v8_ff50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ff50, label %.thread6, label %.thread

.thread:                                          ; preds = %bb
  %v4_ff54 = inttoptr i32 %v2_ff8c165 to i8*
  store i8 %v2_ff48, i8* %v4_ff54, align 1
  %v5_ff54 = load i32, i32* %r2.global-to-local, align 4
  %v6_ff54 = add i32 %v5_ff54, 1
  store i32 %v6_ff54, i32* %r2.global-to-local, align 4
  %v0_ff58.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ff58.pr.pr, label %.thread..thread6_crit_edge, label %bb122

.thread..thread6_crit_edge:                       ; preds = %.thread
  %v1_ff5c.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t = trunc i32 %v1_ff5c.pre to i8
  br label %.thread6

.thread6:                                         ; preds = %.thread..thread6_crit_edge, %bb, %dec_label_pc_ff48
  %v1_ff5c.off0 = phi i8 [ %extract.t, %.thread..thread6_crit_edge ], [ %v1_ff5c176.off0, %bb ], [ %v1_ff5c176.off0, %dec_label_pc_ff48 ]
  %v3_ff5c = load i32, i32* %r5.global-to-local, align 4
  %v4_ff5c = inttoptr i32 %v3_ff5c to i8*
  store i8 %v1_ff5c.off0, i8* %v4_ff5c, align 1
  %v0_ff60.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ff60.pr, label %bb123, label %..thread12_crit_edge

bb122:                                            ; preds = %.thread
  store i32 %v6_ff54, i32* %r1.global-to-local, align 4
  %v1_ff60 = load i32, i32* %ip.global-to-local, align 4
  %v2_ff60 = urem i32 %v1_ff60, 256
  store i32 %v2_ff60, i32* %lr.global-to-local, align 4
  br label %.thread12

..thread12_crit_edge:                             ; preds = %.thread6
  %v1_ff6010 = load i32, i32* %ip.global-to-local, align 4
  %v2_ff6011 = urem i32 %v1_ff6010, 256
  store i32 %v2_ff6011, i32* %lr.global-to-local, align 4
  br label %.thread12

bb123:                                            ; preds = %.thread6
  %v1_ff64.pre = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_ff64.pre, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb122, %..thread12_crit_edge, %bb123
  %v0_ff7c.pre = phi i32 [ %v2_ff6011, %..thread12_crit_edge ], [ %v2_ff60, %bb122 ], [ 0, %bb123 ]
  %v0_ff6c = load i32, i32* @r4, align 4
  %v1_ff6c = add i32 %v0_ff6c, 1
  store i32 %v1_ff6c, i32* @r4, align 4
  %v0_ff70 = load i32, i32* %r0.global-to-local, align 4
  %v1_ff70 = add i32 %v0_ff70, -1
  store i32 %v1_ff70, i32* %r0.global-to-local, align 4
  %v0_ff74 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_ff74, i32* %r2.global-to-local, align 4
  %v2_ff78 = icmp eq i32 %v1_ff70, 0
  store i1 %v2_ff78, i1* %cpsr_z.global-to-local, align 1
  %v1_ff7c = add nuw nsw i32 %v0_ff7c.pre, 1
  store i32 %v1_ff7c, i32* %ip.global-to-local, align 4
  %v1_ff80 = add i32 %v0_ff74, 1
  store i32 %v1_ff80, i32* %r1.global-to-local, align 4
  %tmp124 = icmp slt i32 %v1_ff70, 1
  %extract.t179 = trunc i32 %v0_ff7c.pre to i8
  br i1 %tmp124, label %dec_label_pc_ff88, label %dec_label_pc_ff48

dec_label_pc_ff88:                                ; preds = %.thread12, %dec_label_pc_ff00
  %v2_ff8c.lcssa = phi i32 [ %v2_ff38, %dec_label_pc_ff00 ], [ %v0_ff74, %.thread12 ]
  %v3_ff18 = inttoptr i32 %v2_ff18 to i8*
  store i32 0, i32* @r4, align 4
  %v3_ff8c = inttoptr i32 %v2_ff8c.lcssa to i8*
  store i8 0, i8* %v3_ff8c, align 1
  store i32 %v2_ff2c, i32* %r0.global-to-local, align 4
  %v1_ff94 = bitcast i32* %stack_var_-2228 to i8*
  %v2_ff94 = call i32 @function_12af0(i8* %v1_ff94)
  %v2_ff98 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_ff98, i32* %r1.global-to-local, align 4
  %v0_ff9c = load i32, i32* %fp.global-to-local, align 4
  %v2_ff9c = add i32 %v0_ff9c, %v2_ff94
  store i32 %v2_ff9c, i32* @r5, align 4
  %v0_ffa0 = load i32, i32* @r4, align 4
  store i32 %v0_ffa0, i32* %stack_var_-64, align 4
  store i32 %v2_ff2c, i32* %r0.global-to-local, align 4
  %v2_ffb4 = call i32 @function_12af0(i8* %v1_ff94)
  %v1_ffb8 = add i32 %v2_ffb4, 17
  store i32 %v1_ffb8, i32* %r0.global-to-local, align 4
  %v0_ffc0 = call i32 @function_fc1c()
  store i32 %v0_ffc0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r1.global-to-local, align 4
  %v2_ffcc = call i32 @function_1320c(i32 %v0_ffc0, i32 65535)
  store i32 16, i32* %r1.global-to-local, align 4
  %v6_ffd8 = urem i32 %v2_ffcc, 65536
  store i32 %v6_ffd8, i32* %r3.global-to-local, align 4
  %v2_ffe0 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_ffe0, i32* %r0.global-to-local, align 4
  %v2_ffe8 = call i32 @function_12b90(i32 %v2_ffe0, i32 16)
  %sext = mul i32 %v2_ffcc, 16777216
  %v4_ffec = sdiv i32 %sext, 16777216
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %v2_ff98, i32* %r3.global-to-local, align 4
  store i32 53, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v4_ffec, i32* %lr.global-to-local, align 4
  %v0_10034 = load i32, i32* @r5, align 4
  %v2_10034 = add i32 %v0_10034, 1
  store i32 %v2_10034, i32* %ip.global-to-local, align 4
  %v2_10038 = ptrtoint i8* %stack_var_-4288 to i32
  store i32 %v2_10038, i32* %r1.global-to-local, align 4
  %v5_1003c = trunc i32 %v4_ffec to i8
  store i8 %v5_1003c, i8* %stack_var_-2240, align 1
  %v0_10054 = load i32, i32* @r4, align 4
  %v1_10054 = trunc i32 %v0_10054 to i8
  %v4_10054 = inttoptr i32 %v2_10034 to i8*
  store i8 %v1_10054, i8* %v4_10054, align 1
  %v0_10058 = load i32, i32* @r4, align 4
  %v1_10058 = trunc i32 %v0_10058 to i8
  %v2_10058 = load i32, i32* %ip.global-to-local, align 4
  %v3_10058 = add i32 %v2_10058, 2
  %v4_10058 = inttoptr i32 %v3_10058 to i8*
  store i8 %v1_10058, i8* %v4_10058, align 1
  %v0_1005c = load i32, i32* %r0.global-to-local, align 4
  %v1_1005c = trunc i32 %v0_1005c to i8
  %v2_1005c = load i32, i32* %ip.global-to-local, align 4
  %v3_1005c = add i32 %v2_1005c, 3
  %v4_1005c = inttoptr i32 %v3_1005c to i8*
  store i8 %v1_1005c, i8* %v4_1005c, align 1
  %v0_10060 = load i32, i32* %r0.global-to-local, align 4
  %v1_10060 = trunc i32 %v0_10060 to i8
  %v2_10060 = load i32, i32* %ip.global-to-local, align 4
  %v3_10060 = add i32 %v2_10060, 1
  %v4_10060 = inttoptr i32 %v3_10060 to i8*
  store i8 %v1_10060, i8* %v4_10060, align 1
  %v0_10068 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10068, i32* %sl.global-to-local, align 4
  %v2_10070 = ptrtoint i32* %stack_var_-192 to i32
  store i32 %v2_10070, i32* @r6, align 4
  %v3_100a8 = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_100c4 = bitcast i8* %stack_var_-2240 to i32*
  %v2_10114 = ptrtoint i32* %stack_var_-36 to i32
  %v2_10140 = ptrtoint i32* %stack_var_-48 to i32
  %v6_1019c = bitcast i8* %stack_var_-4288 to i32*
  %v1_10218 = add i32 %v2_10038, 12
  %v1_10220 = inttoptr i32 %v1_10218 to i8*
  %v1_10234 = add i32 %v2_10038, 1
  %v2_10234 = inttoptr i32 %v1_10234 to i8*
  %v1_10250 = add i32 %v2_10038, 6
  %v2_10250 = inttoptr i32 %v1_10250 to i8*
  %v1_10254 = add i32 %v2_10038, 7
  %v2_10254 = inttoptr i32 %v1_10254 to i8*
  br label %dec_label_pc_10074

dec_label_pc_10074:                               ; preds = %dec_label_pc_101c8, %dec_label_pc_ff88
  %v1_10078 = phi i32 [ %v0_10074.pre, %dec_label_pc_101c8 ], [ -1, %dec_label_pc_ff88 ]
  %v7_10074 = icmp eq i32 %v1_10078, -1
  store i1 %v7_10074, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10074, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_10074
  store i32 %v1_10078, i32* %r0.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_10074, %bb125
  store i32 65664, i32* @lr, align 4
  %v1_1007c = xor i1 %v7_10074, true
  call void @__pseudo_cond_branch(i1 %v1_1007c, i32 ptrtoint (i32* @global_var_134b0.25 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_1008c = call i32 @function_13db0(i32 2, i32 2, i32 0)
  store i32 %v3_1008c, i32* %r0.global-to-local, align 4
  %v7_10090 = icmp eq i32 %v3_1008c, -1
  store i1 %v7_10090, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_1008c, i32* @r7, align 4
  br i1 %v7_10090, label %dec_label_pc_10208, label %dec_label_pc_1009c

dec_label_pc_1009c:                               ; preds = %bb126
  store i32 %v2_ffe0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_100a8 = call i32 @function_13c0c(i32 %v3_1008c, %sockaddr* %v3_100a8, i32 16)
  store i32 %v4_100a8, i32* %r0.global-to-local, align 4
  %v7_100ac = icmp eq i32 %v4_100a8, -1
  store i1 %v7_100ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100ac, label %dec_label_pc_101d0, label %dec_label_pc_100b4

dec_label_pc_100b4:                               ; preds = %dec_label_pc_1009c
  %v0_100b4 = load i32, i32* @r7, align 4
  store i32 %v0_100b4, i32* %r0.global-to-local, align 4
  store i32 %v2_ff30, i32* %r1.global-to-local, align 4
  store i32 %v1_ffb8, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_100c4 = call i32 @function_13d20(i32 %v0_100b4, i32* %v4_100c4, i32 %v1_ffb8, i32 16384)
  store i32 %v5_100c4, i32* %r0.global-to-local, align 4
  %v7_100c8 = icmp eq i32 %v5_100c4, -1
  store i1 %v7_100c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100c8, label %dec_label_pc_101d0, label %dec_label_pc_100d0

dec_label_pc_100d0:                               ; preds = %dec_label_pc_100b4
  %v0_100d0 = load i32, i32* @r7, align 4
  store i32 %v0_100d0, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_100dc = call i32 @function_133c0(i32 3, i32 %v0_100d0)
  store i32 0, i32* @r4, align 4
  %v1_100e4 = or i32 %v2_100dc, 2048
  store i32 %v1_100e4, i32* @r2, align 4
  %v0_100e8 = load i32, i32* @r7, align 4
  store i32 %v0_100e8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_100f0 = call i32 @function_133c0(i32 4, i32 %v0_100e8)
  store i32 %v2_100f0, i32* %r0.global-to-local, align 4
  %v0_100f4 = load i32, i32* @r4, align 4
  store i32 %v0_100f4, i32* %r3.global-to-local, align 4
  %v2_100f8154 = load i32, i32* @r6, align 4
  %v3_100f8155 = add i32 %v2_100f8154, %v0_100f4
  %v4_100f8156 = inttoptr i32 %v3_100f8155 to i32*
  store i32 %v0_100f4, i32* %v4_100f8156, align 4
  %v0_100fc157 = load i32, i32* %r3.global-to-local, align 4
  %v1_100fc158 = add i32 %v0_100fc157, 4
  store i32 %v1_100fc158, i32* %r3.global-to-local, align 4
  %v7_10100159 = icmp eq i32 %v1_100fc158, 128
  br i1 %v7_10100159, label %dec_label_pc_10108, label %dec_label_pc_100f8.dec_label_pc_100f8_crit_edge

dec_label_pc_100f8.dec_label_pc_100f8_crit_edge:  ; preds = %dec_label_pc_100d0, %dec_label_pc_100f8.dec_label_pc_100f8_crit_edge
  %v1_100fc160 = phi i32 [ %v1_100fc, %dec_label_pc_100f8.dec_label_pc_100f8_crit_edge ], [ %v1_100fc158, %dec_label_pc_100d0 ]
  %v0_100f8.pre = load i32, i32* @r4, align 4
  %v2_100f8 = load i32, i32* @r6, align 4
  %v3_100f8 = add i32 %v2_100f8, %v1_100fc160
  %v4_100f8 = inttoptr i32 %v3_100f8 to i32*
  store i32 %v0_100f8.pre, i32* %v4_100f8, align 4
  %v0_100fc = load i32, i32* %r3.global-to-local, align 4
  %v1_100fc = add i32 %v0_100fc, 4
  store i32 %v1_100fc, i32* %r3.global-to-local, align 4
  %v7_10100 = icmp eq i32 %v1_100fc, 128
  br i1 %v7_10100, label %dec_label_pc_10108, label %dec_label_pc_100f8.dec_label_pc_100f8_crit_edge

dec_label_pc_10108:                               ; preds = %dec_label_pc_100f8.dec_label_pc_100f8_crit_edge, %dec_label_pc_100d0
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_10108 = load i32, i32* @r7, align 4
  %v3_10108 = udiv i32 %v0_10108, 32
  %v3_10110 = mul nuw nsw i32 %v3_10108, 4
  store i32 %v3_10110, i32* %r3.global-to-local, align 4
  store i32 %v2_10114, i32* %r2.global-to-local, align 4
  %v2_10118 = add i32 %v3_10110, %v2_10114
  store i32 %v2_10118, i32* @r5, align 4
  %v1_1011c = add i32 %v2_10118, -156
  %v2_1011c = inttoptr i32 %v1_1011c to i32*
  %v3_1011c = load i32, i32* %v2_1011c, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_10124 = urem i32 %v0_10108, 32
  store i32 %v1_10124, i32* @r8, align 4
  %v7_10128 = shl i32 1, %v1_10124
  %v8_10128 = or i32 %v3_1011c, %v7_10128
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_10128, i32* %v2_1011c, align 4
  %v0_10138 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_10138, i32* %stack_var_-48, align 4
  store i32 %v2_10140, i32* @lr, align 4
  store i32 %v2_ff98, i32* %ip.global-to-local, align 4
  %v0_10148 = load i32, i32* @r7, align 4
  %v1_10148 = load i32, i32* %r3.global-to-local, align 4
  %v2_10148 = add i32 %v1_10148, %v0_10148
  store i32 %v2_10148, i32* %r0.global-to-local, align 4
  store i32 %v2_10070, i32* %r1.global-to-local, align 4
  %v0_10154 = load i32, i32* @r4, align 4
  store i32 %v0_10154, i32* %r2.global-to-local, align 4
  store i32 %v0_10154, i32* %r3.global-to-local, align 4
  %v5_10160 = call i32 @function_136d0(i32 %v2_10148, i32 %v2_10070, i32 %v0_10154, i32 %v0_10154, i32 %v2_10140)
  store i32 %v5_10160, i32* %r0.global-to-local, align 4
  %v7_10164 = icmp eq i32 %v5_10160, -1
  store i1 %v7_10164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10164, label %dec_label_pc_101e0, label %dec_label_pc_1016c

dec_label_pc_1016c:                               ; preds = %dec_label_pc_10108
  %v2_1016c = icmp eq i32 %v5_10160, 0
  store i1 %v2_1016c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1016c, label %dec_label_pc_101c0, label %dec_label_pc_10174

dec_label_pc_10174:                               ; preds = %dec_label_pc_1016c
  %v0_10174 = load i32, i32* @r5, align 4
  %v1_10174 = add i32 %v0_10174, -156
  %v2_10174 = inttoptr i32 %v1_10174 to i32*
  %v3_10174 = load i32, i32* %v2_10174, align 4
  %v1_10178 = load i32, i32* @r8, align 4
  %v6_10178 = ashr i32 %v3_10174, %v1_10178
  store i32 %v6_10178, i32* %r3.global-to-local, align 4
  %v1_1017c = urem i32 %v6_10178, 2
  %v2_1017c = icmp eq i32 %v1_1017c, 0
  store i1 %v2_1017c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1017c, label %dec_label_pc_101e0, label %dec_label_pc_10184

dec_label_pc_10184:                               ; preds = %dec_label_pc_10174
  store i32 %v2_10038, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10190 = load i32, i32* @r7, align 4
  store i32 %v0_10190, i32* %r0.global-to-local, align 4
  %v0_10194 = load i32, i32* @r4, align 4
  %v7_1019c = call i32 @function_13cec(i32 %v0_10190, i32* %v6_1019c, i32 2048, i32 16384, i32 %v0_10194, i32 %v0_10194)
  store i32 %v7_1019c, i32* %r4.global-to-local, align 4
  %v0_101a4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_101a4, i32* %r0.global-to-local, align 4
  %v1_101a8 = inttoptr i32 %v0_101a4 to i8*
  %v2_101a8 = call i32 @function_12af0(i8* %v1_101a8)
  %v1_101ac = add i32 %v2_101a8, 17
  store i32 %v1_101ac, i32* %r0.global-to-local, align 4
  %v0_101b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_101b0 = icmp ult i32 %v0_101b0, %v1_101ac
  %v9_101b0 = icmp eq i32 %v0_101b0, %v1_101ac
  store i1 %v9_101b0, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_101b0, label %dec_label_pc_101c0, label %dec_label_pc_10214

dec_label_pc_101c0:                               ; preds = %dec_label_pc_10184, %dec_label_pc_10214, %dec_label_pc_10250, %dec_label_pc_1016c, %dec_label_pc_10208
  %v0_101c0 = load i32, i32* %sl.global-to-local, align 4
  %v7_101c0 = icmp eq i32 %v0_101c0, 5
  store i1 %v7_101c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101c0, label %dec_label_pc_101e0, label %dec_label_pc_101c8

dec_label_pc_101c8:                               ; preds = %dec_label_pc_101d0, %dec_label_pc_101c0
  %v0_101c8 = phi i32 [ %v0_101d8, %dec_label_pc_101d0 ], [ %v0_101c0, %dec_label_pc_101c0 ]
  %v1_101c8 = add i32 %v0_101c8, 1
  store i32 %v1_101c8, i32* %sl.global-to-local, align 4
  %v0_10074.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10074

dec_label_pc_101d0:                               ; preds = %dec_label_pc_100b4, %dec_label_pc_1009c
  %v0_101d0 = phi i32 [ %v5_100c4, %dec_label_pc_100b4 ], [ %v4_100a8, %dec_label_pc_1009c ]
  %v1_101d0 = add i32 %v0_101d0, 2
  store i32 %v1_101d0, i32* %r0.global-to-local, align 4
  %v1_101d4 = call i32 @function_148e4(i32 %v1_101d0)
  store i32 %v1_101d4, i32* %r0.global-to-local, align 4
  %v0_101d8 = load i32, i32* %sl.global-to-local, align 4
  %v7_101d8 = icmp eq i32 %v0_101d8, 5
  store i1 %v7_101d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101d8, label %dec_label_pc_101e0, label %dec_label_pc_101c8

dec_label_pc_101e0:                               ; preds = %dec_label_pc_101d0, %dec_label_pc_101c0, %dec_label_pc_10174, %dec_label_pc_10108, %dec_label_pc_10260, %dec_label_pc_1026c.backedge
  %v0_101e0 = load i32, i32* @r7, align 4
  store i32 %v0_101e0, i32* %r0.global-to-local, align 4
  %v1_101e4 = call i32 @function_134b0(i32 %v0_101e0)
  store i32 %v1_101e4, i32* %r0.global-to-local, align 4
  store i32 %v2_ff18, i32* %r2.global-to-local, align 4
  %v2_101ec = load i8, i8* %v3_ff18, align 1
  %v3_101ec = zext i8 %v2_101ec to i32
  store i32 %v3_101ec, i32* @r4, align 4
  %v2_101f0 = icmp eq i8 %v2_101ec, 0
  store i1 %v2_101f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_101f0, label %dec_label_pc_1034c, label %dec_label_pc_101f8

dec_label_pc_101f8:                               ; preds = %dec_label_pc_101e0, %dec_label_pc_1034c
  %stack_var_-4300.0 = phi i8* [ %v5_10360, %dec_label_pc_1034c ], [ %v3_ff18, %dec_label_pc_101e0 ]
  %v4_101f8 = ptrtoint i8* %stack_var_-4300.0 to i32
  store i32 %v4_101f8, i32* %r0.global-to-local, align 4
  %v2_10204 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_10204, i32* @r4, align 4
  store i32 %v6_ff00, i32* @r5, align 4
  store i32 %v9_ff00, i32* @r6, align 4
  store i32 %v12_ff00, i32* @r7, align 4
  store i32 %v15_ff00, i32* @r8, align 4
  ret i32 %v4_101f8

dec_label_pc_10208:                               ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_1020c = call i32 @function_148e4(i32 1)
  store i32 %v1_1020c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_101c0

dec_label_pc_10214:                               ; preds = %dec_label_pc_10184
  store i32 %v2_10038, i32* %lr.global-to-local, align 4
  store i32 %v1_10218, i32* %fp.global-to-local, align 4
  store i32 %v1_10218, i32* %r0.global-to-local, align 4
  %v2_10220 = call i32 @function_12af0(i8* %v1_10220)
  store i32 %v2_10220, i32* %r0.global-to-local, align 4
  store i32 %v2_10038, i32* %ip.global-to-local, align 4
  store i32 %v2_10114, i32* %r1.global-to-local, align 4
  %v4_10230 = load i8, i8* %stack_var_-4288, align 1
  %v5_10230 = sext i8 %v4_10230 to i32
  store i32 %v5_10230, i32* %r3.global-to-local, align 4
  %v3_10234 = load i8, i8* %v2_10234, align 1
  %v4_10234 = zext i8 %v3_10234 to i32
  store i32 %v4_10234, i32* %r2.global-to-local, align 4
  store i32 %v4_ffec, i32* @lr, align 4
  %v4_1023c = mul nuw nsw i32 %v4_10234, 256
  %v5_1023c = or i32 %v4_1023c, %v5_10230
  store i32 %v5_1023c, i32* %r3.global-to-local, align 4
  %v0_10240 = load i32, i32* %fp.global-to-local, align 4
  %v9_10244 = icmp eq i32 %v5_1023c, %v4_ffec
  store i1 %v9_10244, i1* %cpsr_z.global-to-local, align 1
  %v2_10240 = add i32 %v2_10220, 5
  %v1_10248 = add i32 %v2_10240, %v0_10240
  store i32 %v1_10248, i32* %r0.global-to-local, align 4
  br i1 %v9_10244, label %dec_label_pc_10250, label %dec_label_pc_101c0

dec_label_pc_10250:                               ; preds = %dec_label_pc_10214
  %v3_10250 = load i8, i8* %v2_10250, align 1
  %v4_10250 = zext i8 %v3_10250 to i32
  store i32 %v4_10250, i32* %r2.global-to-local, align 4
  %v3_10254 = load i8, i8* %v2_10254, align 1
  %v4_10254 = zext i8 %v3_10254 to i32
  store i32 %v4_10254, i32* %r3.global-to-local, align 4
  %v4_10258 = mul nuw nsw i32 %v4_10254, 256
  %v5_10258 = or i32 %v4_10258, %v4_10250
  store i32 %v5_10258, i32* %r2.global-to-local, align 4
  %v7_10258 = icmp eq i32 %v5_10258, 0
  store i1 %v7_10258, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10258, label %dec_label_pc_101c0, label %dec_label_pc_10260

dec_label_pc_10260:                               ; preds = %dec_label_pc_10250
  %v3_10264 = mul nuw nsw i32 %v4_10250, 256
  %v5_10268 = or i32 %v4_10254, %v3_10264
  %v1_10320 = add i32 %v2_10038, -49152
  %v1_1026c143 = add nsw i32 %v5_10268, -1
  %v3_10270144 = mul i32 %v1_1026c143, 65536
  store i32 %v3_10270144, i32* %r3.global-to-local, align 4
  %v7_10274150 = icmp eq i32 %v3_10270144, -65536
  store i1 %v7_10274150, i1* %cpsr_z.global-to-local, align 1
  %v3_10278151 = urem i32 %v1_1026c143, 65536
  store i32 %v3_10278151, i32* @r6, align 4
  br i1 %v7_10274150, label %dec_label_pc_101e0, label %dec_label_pc_10280.lr.ph

dec_label_pc_10280.lr.ph:                         ; preds = %dec_label_pc_10260
  %v1_103fc = add i32 %v2_ff18, 4
  %v2_103fc = inttoptr i32 %v1_103fc to i32*
  br label %dec_label_pc_10280

dec_label_pc_10280:                               ; preds = %dec_label_pc_10280.lr.ph, %dec_label_pc_1026c.backedge
  %v3_10278153 = phi i32 [ %v3_10278151, %dec_label_pc_10280.lr.ph ], [ %v3_10278, %dec_label_pc_1026c.backedge ]
  %v0_102d4152 = phi i32 [ %v1_10248, %dec_label_pc_10280.lr.ph ], [ %storemerge, %dec_label_pc_1026c.backedge ]
  store i32 %v0_102d4152, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_1028c17 = inttoptr i32 %v0_102d4152 to i8*
  %v2_1028c18 = load i8, i8* %v1_1028c17, align 1
  %v3_1028c19 = zext i8 %v2_1028c18 to i32
  store i32 %v3_1028c19, i32* %r2.global-to-local, align 4
  %v2_1029020 = icmp eq i8 %v2_1028c18, 0
  store i1 %v2_1029020, i1* %cpsr_z.global-to-local, align 1
  %v3_1029421 = mul nuw nsw i32 %v3_1028c19, 256
  store i32 %v3_1029421, i32* %r1.global-to-local, align 4
  br i1 %v2_1029020, label %dec_label_pc_102cc, label %dec_label_pc_1029c.preheader

dec_label_pc_1029c.preheader:                     ; preds = %dec_label_pc_10280, %dec_label_pc_1028c.backedge
  %v1_10370 = phi i32 [ %v1_1037049, %dec_label_pc_1028c.backedge ], [ 1, %dec_label_pc_10280 ]
  %v0_1036847 = phi i32 [ %v0_10368, %dec_label_pc_1028c.backedge ], [ 0, %dec_label_pc_10280 ]
  %v0_102a845 = phi i32 [ %v3_10294, %dec_label_pc_1028c.backedge ], [ %v3_1029421, %dec_label_pc_10280 ]
  %v0_102a443 = phi i32 [ %v1_1036c, %dec_label_pc_1028c.backedge ], [ %v0_102d4152, %dec_label_pc_10280 ]
  %v0_1029c41 = phi i32 [ %v3_1028c, %dec_label_pc_1028c.backedge ], [ %v3_1028c19, %dec_label_pc_10280 ]
  br label %dec_label_pc_1029c

dec_label_pc_1029c:                               ; preds = %dec_label_pc_1029c.preheader, %dec_label_pc_102a4
  %v0_10368 = phi i32 [ %v0_1036847, %dec_label_pc_1029c.preheader ], [ 1, %dec_label_pc_102a4 ]
  %v0_102a8 = phi i32 [ %v0_102a845, %dec_label_pc_1029c.preheader ], [ %v3_102c4, %dec_label_pc_102a4 ]
  %v0_1036c = phi i32 [ %v0_102a443, %dec_label_pc_1029c.preheader ], [ %v2_102b4, %dec_label_pc_102a4 ]
  %v0_1029c = phi i32 [ %v0_1029c41, %dec_label_pc_1029c.preheader ], [ %v3_102b8, %dec_label_pc_102a4 ]
  %v7_1029c = icmp eq i32 %v0_1029c, 191
  store i1 %v7_1029c, i1* %cpsr_z.global-to-local, align 1
  %tmp180 = icmp ult i32 %v0_1029c, 192
  br i1 %tmp180, label %dec_label_pc_10368, label %dec_label_pc_102a4

dec_label_pc_102a4:                               ; preds = %dec_label_pc_1029c
  %v1_102a4 = add i32 %v0_1036c, 1
  %v2_102a4 = inttoptr i32 %v1_102a4 to i8*
  %v3_102a4 = load i8, i8* %v2_102a4, align 1
  %v4_102a4 = zext i8 %v3_102a4 to i32
  store i32 %v2_10038, i32* %r1.global-to-local, align 4
  %v2_102a8 = add i32 %v0_102a8, %v1_10320
  %v2_102b4 = add i32 %v2_102a8, %v4_102a4
  store i32 %v2_102b4, i32* %r3.global-to-local, align 4
  %v1_102b8 = inttoptr i32 %v2_102b4 to i8*
  %v2_102b8 = load i8, i8* %v1_102b8, align 1
  %v3_102b8 = zext i8 %v2_102b8 to i32
  store i32 %v3_102b8, i32* %r2.global-to-local, align 4
  %v2_102bc = icmp eq i8 %v2_102b8, 0
  store i1 %v2_102bc, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_102c4 = mul nuw nsw i32 %v3_102b8, 256
  store i32 %v3_102c4, i32* %r1.global-to-local, align 4
  br i1 %v2_102bc, label %dec_label_pc_102cc, label %dec_label_pc_1029c

dec_label_pc_102cc:                               ; preds = %dec_label_pc_1028c.backedge, %dec_label_pc_102a4, %dec_label_pc_10280
  %v1_102d0 = phi i32 [ 1, %dec_label_pc_10280 ], [ %v1_10370, %dec_label_pc_102a4 ], [ %v1_1037049, %dec_label_pc_1028c.backedge ]
  %v0_102cc = phi i32 [ 0, %dec_label_pc_10280 ], [ 1, %dec_label_pc_102a4 ], [ %v0_10368, %dec_label_pc_1028c.backedge ]
  %v7_102cc = icmp eq i32 %v0_102cc, 1
  store i1 %v7_102cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102cc, label %bb127, label %bb128

bb127:                                            ; preds = %dec_label_pc_102cc
  %v2_102d0 = add i32 %v1_102d0, 1
  store i32 %v2_102d0, i32* %ip.global-to-local, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_102cc, %bb127
  %v1_102d4 = phi i32 [ %v1_102d0, %dec_label_pc_102cc ], [ %v2_102d0, %bb127 ]
  %v2_102d4 = add i32 %v1_102d4, %v0_102d4152
  store i32 %v2_102d4, i32* @r4, align 4
  %v3_102d8 = inttoptr i32 %v2_102d4 to i8*
  %v4_102d8 = load i8, i8* %v3_102d8, align 1
  %v6_102d8 = zext i8 %v4_102d8 to i32
  store i32 %v6_102d8, i32* %r3.global-to-local, align 4
  %v1_102dc = add i32 %v2_102d4, 1
  %v2_102dc = inttoptr i32 %v1_102dc to i8*
  %v3_102dc = load i8, i8* %v2_102dc, align 1
  %v4_102dc = zext i8 %v3_102dc to i32
  store i32 %v4_102dc, i32* %r2.global-to-local, align 4
  %v4_102e0 = mul nuw nsw i32 %v4_102dc, 256
  %v5_102e0 = or i32 %v4_102e0, %v6_102d8
  store i32 %v5_102e0, i32* %r3.global-to-local, align 4
  %v7_102e4 = icmp eq i32 %v5_102e0, 256
  store i1 %v7_102e4, i1* %cpsr_z.global-to-local, align 1
  %v1_102e8 = add i32 %v2_102d4, 10
  store i32 %v1_102e8, i32* @r5, align 4
  br i1 %v7_102e4, label %dec_label_pc_10388, label %dec_label_pc_102f0

dec_label_pc_102f0:                               ; preds = %dec_label_pc_10388, %bb128
  store i32 %v1_102e8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_102fc23 = inttoptr i32 %v1_102e8 to i8*
  %v2_102fc24 = load i8, i8* %v1_102fc23, align 1
  %v3_102fc25 = zext i8 %v2_102fc24 to i32
  store i32 %v3_102fc25, i32* %r2.global-to-local, align 4
  %v2_1030026 = icmp eq i8 %v2_102fc24, 0
  store i1 %v2_1030026, i1* %cpsr_z.global-to-local, align 1
  %v3_1030427 = mul nuw nsw i32 %v3_102fc25, 256
  store i32 %v3_1030427, i32* %r1.global-to-local, align 4
  br i1 %v2_1030026, label %dec_label_pc_1033c, label %dec_label_pc_1030c.preheader

dec_label_pc_1030c.preheader:                     ; preds = %dec_label_pc_102f0, %dec_label_pc_102fc.backedge
  %v1_10380 = phi i32 [ %v1_1038064, %dec_label_pc_102fc.backedge ], [ 1, %dec_label_pc_102f0 ]
  %v0_1037862 = phi i32 [ %v0_10378, %dec_label_pc_102fc.backedge ], [ 0, %dec_label_pc_102f0 ]
  %v0_1031860 = phi i32 [ %v3_10304, %dec_label_pc_102fc.backedge ], [ %v3_1030427, %dec_label_pc_102f0 ]
  %v0_1031458 = phi i32 [ %v1_1037c, %dec_label_pc_102fc.backedge ], [ %v1_102e8, %dec_label_pc_102f0 ]
  %v0_1030c56 = phi i32 [ %v3_102fc, %dec_label_pc_102fc.backedge ], [ %v3_102fc25, %dec_label_pc_102f0 ]
  br label %dec_label_pc_1030c

dec_label_pc_1030c:                               ; preds = %dec_label_pc_1030c.preheader, %dec_label_pc_10314
  %v0_10378 = phi i32 [ %v0_1037862, %dec_label_pc_1030c.preheader ], [ 1, %dec_label_pc_10314 ]
  %v0_10318 = phi i32 [ %v0_1031860, %dec_label_pc_1030c.preheader ], [ %v3_10334, %dec_label_pc_10314 ]
  %v0_1037c = phi i32 [ %v0_1031458, %dec_label_pc_1030c.preheader ], [ %v2_10324, %dec_label_pc_10314 ]
  %v0_1030c = phi i32 [ %v0_1030c56, %dec_label_pc_1030c.preheader ], [ %v3_10328, %dec_label_pc_10314 ]
  %v7_1030c = icmp eq i32 %v0_1030c, 191
  store i1 %v7_1030c, i1* %cpsr_z.global-to-local, align 1
  %tmp181 = icmp ult i32 %v0_1030c, 192
  br i1 %tmp181, label %dec_label_pc_10378, label %dec_label_pc_10314

dec_label_pc_10314:                               ; preds = %dec_label_pc_1030c
  %v1_10314 = add i32 %v0_1037c, 1
  %v2_10314 = inttoptr i32 %v1_10314 to i8*
  %v3_10314 = load i8, i8* %v2_10314, align 1
  %v4_10314 = zext i8 %v3_10314 to i32
  store i32 %v2_10038, i32* %r1.global-to-local, align 4
  %v2_10318 = add i32 %v0_10318, %v1_10320
  %v2_10324 = add i32 %v2_10318, %v4_10314
  store i32 %v2_10324, i32* %r3.global-to-local, align 4
  %v1_10328 = inttoptr i32 %v2_10324 to i8*
  %v2_10328 = load i8, i8* %v1_10328, align 1
  %v3_10328 = zext i8 %v2_10328 to i32
  store i32 %v3_10328, i32* %r2.global-to-local, align 4
  %v2_1032c = icmp eq i8 %v2_10328, 0
  store i1 %v2_1032c, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_10334 = mul nuw nsw i32 %v3_10328, 256
  store i32 %v3_10334, i32* %r1.global-to-local, align 4
  br i1 %v2_1032c, label %dec_label_pc_1033c, label %dec_label_pc_1030c

dec_label_pc_1033c:                               ; preds = %dec_label_pc_102fc.backedge, %dec_label_pc_10314, %dec_label_pc_102f0
  %v1_10340 = phi i32 [ 1, %dec_label_pc_102f0 ], [ %v1_10380, %dec_label_pc_10314 ], [ %v1_1038064, %dec_label_pc_102fc.backedge ]
  %v0_1033c = phi i32 [ 0, %dec_label_pc_102f0 ], [ 1, %dec_label_pc_10314 ], [ %v0_10378, %dec_label_pc_102fc.backedge ]
  %v7_1033c = icmp eq i32 %v0_1033c, 1
  store i1 %v7_1033c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1033c, label %bb129, label %bb130

bb129:                                            ; preds = %dec_label_pc_1033c
  %v2_10340 = add i32 %v1_10340, 1
  store i32 %v2_10340, i32* %r0.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_1033c, %bb129
  %v1_10344 = phi i32 [ %v1_10340, %dec_label_pc_1033c ], [ %v2_10340, %bb129 ]
  %v2_10344 = add i32 %v1_10344, %v1_102e8
  br label %dec_label_pc_1026c.backedge

dec_label_pc_1026c.backedge:                      ; preds = %bb130, %dec_label_pc_10430
  %v0_1026c.pre = phi i32 [ %v3_10278153, %bb130 ], [ %v0_1026c.pre.pre, %dec_label_pc_10430 ]
  %storemerge = phi i32 [ %v2_10344, %bb130 ], [ %v2_10444, %dec_label_pc_10430 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_1026c = add i32 %v0_1026c.pre, -1
  %v3_10270 = mul i32 %v1_1026c, 65536
  store i32 %v3_10270, i32* %r3.global-to-local, align 4
  %v7_10274 = icmp eq i32 %v3_10270, -65536
  store i1 %v7_10274, i1* %cpsr_z.global-to-local, align 1
  %v3_10278 = urem i32 %v1_1026c, 65536
  store i32 %v3_10278, i32* @r6, align 4
  br i1 %v7_10274, label %dec_label_pc_101e0, label %dec_label_pc_10280

dec_label_pc_1034c:                               ; preds = %dec_label_pc_101e0
  %v1_1034c = add i32 %v2_ff18, 4
  %v2_1034c = inttoptr i32 %v1_1034c to i32*
  %v3_1034c = load i32, i32* %v2_1034c, align 4
  store i32 %v3_1034c, i32* %r0.global-to-local, align 4
  %v2_10350 = icmp eq i32 %v3_1034c, 0
  store i1 %v2_10350, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_10358.163 to i32), i32* @lr, align 4
  %v1_10354 = xor i1 %v2_10350, true
  call void @__pseudo_cond_branch(i1 %v1_10354, i32 ptrtoint (i32* @global_var_1410c.58 to i32))
  store i32 %v2_ff18, i32* @r0, align 4
  %v0_1035c = call i32 @function_1410c()
  store i32 %v0_1035c, i32* %r0.global-to-local, align 4
  %v0_10360 = load i32, i32* @r4, align 4
  %v5_10360 = inttoptr i32 %v0_10360 to i8*
  br label %dec_label_pc_101f8

dec_label_pc_10368:                               ; preds = %dec_label_pc_1029c
  %v2_10368 = icmp eq i32 %v0_10368, 0
  store i1 %v2_10368, i1* %cpsr_z.global-to-local, align 1
  %v1_1036c = add i32 %v0_1036c, 1
  store i32 %v1_1036c, i32* %r3.global-to-local, align 4
  br i1 %v2_10368, label %bb131, label %dec_label_pc_1028c.backedge

dec_label_pc_1028c.backedge:                      ; preds = %dec_label_pc_10368, %bb131
  %v1_1037049 = phi i32 [ %v1_10370, %dec_label_pc_10368 ], [ %v2_10370, %bb131 ]
  %v1_1028c = inttoptr i32 %v1_1036c to i8*
  %v2_1028c = load i8, i8* %v1_1028c, align 1
  %v3_1028c = zext i8 %v2_1028c to i32
  store i32 %v3_1028c, i32* %r2.global-to-local, align 4
  %v2_10290 = icmp eq i8 %v2_1028c, 0
  store i1 %v2_10290, i1* %cpsr_z.global-to-local, align 1
  %v3_10294 = mul nuw nsw i32 %v3_1028c, 256
  store i32 %v3_10294, i32* %r1.global-to-local, align 4
  br i1 %v2_10290, label %dec_label_pc_102cc, label %dec_label_pc_1029c.preheader

bb131:                                            ; preds = %dec_label_pc_10368
  %v2_10370 = add i32 %v1_10370, 1
  store i32 %v2_10370, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1028c.backedge

dec_label_pc_10378:                               ; preds = %dec_label_pc_1030c
  %v2_10378 = icmp eq i32 %v0_10378, 0
  store i1 %v2_10378, i1* %cpsr_z.global-to-local, align 1
  %v1_1037c = add i32 %v0_1037c, 1
  store i32 %v1_1037c, i32* %r3.global-to-local, align 4
  br i1 %v2_10378, label %bb132, label %dec_label_pc_102fc.backedge

dec_label_pc_102fc.backedge:                      ; preds = %dec_label_pc_10378, %bb132
  %v1_1038064 = phi i32 [ %v1_10380, %dec_label_pc_10378 ], [ %v2_10380, %bb132 ]
  %v1_102fc = inttoptr i32 %v1_1037c to i8*
  %v2_102fc = load i8, i8* %v1_102fc, align 1
  %v3_102fc = zext i8 %v2_102fc to i32
  store i32 %v3_102fc, i32* %r2.global-to-local, align 4
  %v2_10300 = icmp eq i8 %v2_102fc, 0
  store i1 %v2_10300, i1* %cpsr_z.global-to-local, align 1
  %v3_10304 = mul nuw nsw i32 %v3_102fc, 256
  store i32 %v3_10304, i32* %r1.global-to-local, align 4
  br i1 %v2_10300, label %dec_label_pc_1033c, label %dec_label_pc_1030c.preheader

bb132:                                            ; preds = %dec_label_pc_10378
  %v2_10380 = add i32 %v1_10380, 1
  store i32 %v2_10380, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_102fc.backedge

dec_label_pc_10388:                               ; preds = %bb128
  %v1_10388 = add i32 %v2_102d4, 2
  %v2_10388 = inttoptr i32 %v1_10388 to i8*
  %v3_10388 = load i8, i8* %v2_10388, align 1
  %v4_10388 = zext i8 %v3_10388 to i32
  store i32 %v4_10388, i32* %r3.global-to-local, align 4
  %v1_1038c = add i32 %v2_102d4, 3
  %v2_1038c = inttoptr i32 %v1_1038c to i8*
  %v3_1038c = load i8, i8* %v2_1038c, align 1
  %v4_1038c = zext i8 %v3_1038c to i32
  store i32 %v4_1038c, i32* %r2.global-to-local, align 4
  %v4_10390 = mul nuw nsw i32 %v4_1038c, 256
  %v5_10390 = or i32 %v4_10390, %v4_10388
  store i32 %v5_10390, i32* %r3.global-to-local, align 4
  %v7_10394 = icmp eq i32 %v5_10390, 256
  store i1 %v7_10394, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10394, label %dec_label_pc_1039c, label %dec_label_pc_102f0

dec_label_pc_1039c:                               ; preds = %dec_label_pc_10388
  %v1_1039c = add i32 %v2_102d4, 8
  %v2_1039c = inttoptr i32 %v1_1039c to i8*
  %v3_1039c = load i8, i8* %v2_1039c, align 1
  %v4_1039c = zext i8 %v3_1039c to i32
  store i32 %v4_1039c, i32* %r1.global-to-local, align 4
  %v1_103a0 = add i32 %v2_102d4, 9
  %v2_103a0 = inttoptr i32 %v1_103a0 to i8*
  %v3_103a0 = load i8, i8* %v2_103a0, align 1
  %v4_103a0 = zext i8 %v3_103a0 to i32
  store i32 %v4_103a0, i32* %r0.global-to-local, align 4
  %v4_103a4 = mul nuw nsw i32 %v4_103a0, 256
  %v5_103a4 = or i32 %v4_103a4, %v4_1039c
  %v3_103a8 = mul i32 %v5_103a4, 65536
  store i32 %v3_103a8, i32* %r2.global-to-local, align 4
  %v3_103ac = mul nuw nsw i32 %v4_1039c, 256
  %v5_103b4 = or i32 %v4_103a0, %v3_103ac
  store i32 %v5_103b4, i32* %r3.global-to-local, align 4
  %v7_103b8 = icmp eq i32 %v5_103b4, 4
  store i1 %v7_103b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103b8, label %dec_label_pc_103c0, label %dec_label_pc_10430

dec_label_pc_103c0:                               ; preds = %dec_label_pc_1039c
  %v2_103c0 = inttoptr i32 %v1_102e8 to i8*
  %v3_103c0 = load i8, i8* %v2_103c0, align 1
  %v4_103c0 = zext i8 %v3_103c0 to i32
  store i32 %v4_103c0, i32* %r3.global-to-local, align 4
  store i32 %v2_ff98, i32* %r2.global-to-local, align 4
  %v1_103cc = add i32 %v2_102d4, 11
  %v2_103cc = inttoptr i32 %v1_103cc to i8*
  %v3_103cc = load i8, i8* %v2_103cc, align 1
  %v4_103cc = zext i8 %v3_103cc to i32
  store i32 %v4_103cc, i32* %r2.global-to-local, align 4
  store i32 %v2_ff98, i32* %r3.global-to-local, align 4
  %v1_103d8 = add i32 %v2_102d4, 12
  %v2_103d8 = inttoptr i32 %v1_103d8 to i8*
  %v3_103d8 = load i8, i8* %v2_103d8, align 1
  %v4_103d8 = zext i8 %v3_103d8 to i32
  store i32 %v4_103d8, i32* %r3.global-to-local, align 4
  store i32 %v2_ff98, i32* %ip.global-to-local, align 4
  %v1_103e4 = add i32 %v2_102d4, 13
  %v2_103e4 = inttoptr i32 %v1_103e4 to i8*
  %v3_103e4 = load i8, i8* %v2_103e4, align 1
  %v4_103e4 = zext i8 %v3_103e4 to i32
  store i32 %v4_103e4, i32* %r2.global-to-local, align 4
  store i32 %v2_ff18, i32* @lr, align 4
  %v2_103f0 = load i8, i8* %v3_ff18, align 1
  %v3_103f0 = zext i8 %v2_103f0 to i32
  %v3_103f4 = mul nuw nsw i32 %v3_103f0, 4
  %v1_103f8 = add nuw nsw i32 %v3_103f4, 4
  store i32 %v1_103f8, i32* %r1.global-to-local, align 4
  %v3_103fc = load i32, i32* %v2_103fc, align 4
  store i32 %v3_103fc, i32* %r0.global-to-local, align 4
  %v3_10400 = sext i8 %v3_103e4 to i32
  %v5_10400 = sext i8 %v3_103d8 to i32
  %v10_10400 = call i32 @function_141fc(i32 %v3_103fc, i32 %v1_103f8, i32 %v3_10400, i32 %v5_10400)
  store i32 %v10_10400, i32* %r0.global-to-local, align 4
  store i32 %v2_ff18, i32* %r1.global-to-local, align 4
  store i32 %v2_ff98, i32* %ip.global-to-local, align 4
  %v2_1040c = load i8, i8* %v3_ff18, align 1
  %v3_1040c = zext i8 %v2_1040c to i32
  store i32 %v3_1040c, i32* %r2.global-to-local, align 4
  %v4_10410 = sext i8 %v3_103c0 to i32
  store i32 %v4_10410, i32* %r3.global-to-local, align 4
  store i32 %v2_ff18, i32* @lr, align 4
  %v1_10418 = add nuw nsw i32 %v3_1040c, 1
  store i32 %v1_10418, i32* %r1.global-to-local, align 4
  %v5_1041c = mul nuw nsw i32 %v3_1040c, 4
  %v6_1041c = add i32 %v5_1041c, %v10_10400
  %v7_1041c = inttoptr i32 %v6_1041c to i32*
  store i32 %v4_10410, i32* %v7_1041c, align 4
  %v1_10420 = load i32, i32* @lr, align 4
  %v2_10420 = add i32 %v1_10420, 4
  %v3_10420 = inttoptr i32 %v2_10420 to i32*
  store i32 %v10_10400, i32* %v3_10420, align 4
  %v0_10424 = load i32, i32* %r1.global-to-local, align 4
  %v1_10424 = trunc i32 %v0_10424 to i8
  %v2_10424 = load i32, i32* @lr, align 4
  %v3_10424 = inttoptr i32 %v2_10424 to i8*
  store i8 %v1_10424, i8* %v3_10424, align 1
  %v0_10428 = load i32, i32* @r4, align 4
  %v1_10428 = add i32 %v0_10428, 9
  %v2_10428 = inttoptr i32 %v1_10428 to i8*
  %v3_10428 = load i8, i8* %v2_10428, align 1
  %v4_10428 = zext i8 %v3_10428 to i32
  store i32 %v4_10428, i32* %r0.global-to-local, align 4
  %v1_1042c = add i32 %v0_10428, 8
  %v2_1042c = inttoptr i32 %v1_1042c to i8*
  %v3_1042c = load i8, i8* %v2_1042c, align 1
  %v4_1042c = zext i8 %v3_1042c to i32
  store i32 %v4_1042c, i32* %r1.global-to-local, align 4
  %v0_10444.pre = load i32, i32* @r5, align 4
  %v0_1026c.pre.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_10430

dec_label_pc_10430:                               ; preds = %dec_label_pc_1039c, %dec_label_pc_103c0
  %v0_1026c.pre.pre = phi i32 [ %v3_10278153, %dec_label_pc_1039c ], [ %v0_1026c.pre.pre.pre, %dec_label_pc_103c0 ]
  %v0_10444 = phi i32 [ %v1_102e8, %dec_label_pc_1039c ], [ %v0_10444.pre, %dec_label_pc_103c0 ]
  %v1_10430 = phi i32 [ %v4_103a0, %dec_label_pc_1039c ], [ %v4_10428, %dec_label_pc_103c0 ]
  %v0_10430 = phi i32 [ %v4_1039c, %dec_label_pc_1039c ], [ %v4_1042c, %dec_label_pc_103c0 ]
  %v4_10430 = mul nuw nsw i32 %v1_10430, 256
  %v5_10430 = or i32 %v4_10430, %v0_10430
  %v3_10434 = mul i32 %v5_10430, 65536
  store i32 %v3_10434, i32* %r2.global-to-local, align 4
  %tmp133 = mul nuw nsw i32 %v0_10430, 256
  %v5_10440 = or i32 %tmp133, %v1_10430
  store i32 %v5_10440, i32* %r3.global-to-local, align 4
  %v2_10444 = add i32 %v5_10440, %v0_10444
  br label %dec_label_pc_1026c.backedge

; uselistorder directives
  uselistorder i32 %v1_10430, { 1, 0 }
  uselistorder i32 %v3_1040c, { 1, 0, 2 }
  uselistorder i32 %v10_10400, { 1, 0, 2 }
  uselistorder i32 %v4_103a0, { 2, 1, 0, 3 }
  uselistorder i32 %v4_1039c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_10380, { 1, 0 }
  uselistorder i32 %v3_102fc, { 0, 2, 1 }
  uselistorder i32 %v1_1038064, { 1, 0 }
  uselistorder i32 %v1_1037c, { 1, 2, 0 }
  uselistorder i32 %v2_10370, { 1, 0 }
  uselistorder i32 %v3_1028c, { 0, 2, 1 }
  uselistorder i32 %v1_1037049, { 1, 0 }
  uselistorder i32 %v1_1036c, { 1, 2, 0 }
  uselistorder i1 %v7_10274, { 1, 0 }
  uselistorder i32 %v1_1026c, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v3_10328, { 0, 2, 1 }
  uselistorder i32 %v2_10324, { 1, 2, 0 }
  uselistorder i32 %v0_10378, { 2, 0, 1 }
  uselistorder i32 %v1_10380, { 1, 2, 0 }
  uselistorder i32 %v3_1030427, { 1, 0 }
  uselistorder i32 %v3_102fc25, { 1, 0, 2 }
  uselistorder i32 %v1_102e8, { 2, 3, 1, 0, 5, 4, 6 }
  uselistorder i32 %v2_102d4, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_102b8, { 0, 2, 1 }
  uselistorder i32 %v2_102b4, { 1, 2, 0 }
  uselistorder i32 %v0_10368, { 2, 0, 1 }
  uselistorder i32 %v1_10370, { 1, 2, 0 }
  uselistorder i32 %v3_1029421, { 1, 0 }
  uselistorder i32 %v3_1028c19, { 1, 0, 2 }
  uselistorder i32 %v0_102d4152, { 3, 0, 1, 2 }
  uselistorder i32 %v3_10278151, { 1, 0 }
  uselistorder i1 %v7_10274150, { 1, 0 }
  uselistorder i32 %v1_1026c143, { 1, 0 }
  uselistorder i32 %v4_10254, { 1, 0, 2 }
  uselistorder i32 %v0_101d8, { 1, 0 }
  uselistorder i32 %v0_101b0, { 1, 0 }
  uselistorder i1 %v7_10164, { 1, 0 }
  uselistorder i32 %v5_10160, { 1, 0, 2 }
  uselistorder i32 %v1_10124, { 1, 0 }
  uselistorder i32 %v3_10110, { 1, 0 }
  uselistorder i32 %v0_10108, { 1, 0 }
  uselistorder i32 %v1_100fc, { 1, 2, 0 }
  uselistorder i1 %v7_100c8, { 1, 0 }
  uselistorder i32 %v5_100c4, { 1, 0, 2 }
  uselistorder i1 %v7_100ac, { 1, 0 }
  uselistorder i32 %v4_100a8, { 1, 0, 2 }
  uselistorder i1 %v7_10090, { 1, 0 }
  uselistorder i32 %v3_1008c, { 2, 1, 0, 3 }
  uselistorder i1 %v7_10074, { 2, 1, 0 }
  uselistorder i32 %v1_10078, { 1, 0 }
  uselistorder i32 %v1_10218, { 1, 2, 0 }
  uselistorder i32 %v2_10114, { 1, 0, 2 }
  uselistorder i32 %v2_10070, { 1, 0, 2 }
  uselistorder i32 %v2_10038, { 4, 3, 2, 5, 7, 9, 1, 0, 6, 8, 10 }
  uselistorder i32 %v4_ffec, { 3, 0, 2, 1 }
  uselistorder i32 %v1_ffb8, { 1, 0, 2 }
  uselistorder i32 %v0_ff74, { 0, 1, 3, 2 }
  uselistorder i32 %v1_ff70, { 1, 0, 2 }
  uselistorder i32 %v1_ff6c, { 1, 0 }
  uselistorder i32 %v2_ff6011, { 1, 0 }
  uselistorder i32 %v2_ff60, { 1, 0 }
  uselistorder i1 %v8_ff50, { 1, 0 }
  uselistorder i32 %v2_ff38, { 0, 2, 1, 3 }
  uselistorder i32 %v0_ff20, { 1, 0 }
  uselistorder i32 %v2_ff18, { 2, 3, 4, 5, 0, 1, 6, 7 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-2240, { 0, 2, 1 }
  uselistorder i32* %stack_var_-64, { 0, 1, 3, 2 }
  uselistorder i8* %stack_var_-4288, { 2, 0, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 13, 11, 12, 14, 16, 33, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 34, 35, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 11, 7, 29, 9, 10, 24, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 25, 27, 28 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 11, 6, 7, 28, 9, 10, 26, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 29, 24, 30, 27 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 10, 6, 48, 7, 8, 9, 12, 11, 15, 14, 13, 17, 16, 20, 18, 19, 21, 22, 24, 23, 26, 25, 27, 29, 28, 30, 37, 32, 31, 33, 34, 35, 36, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 6, 3, 5, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 9, 3, 14, 4, 5, 15, 6, 7, 8, 35, 10, 11, 12, 13, 33, 36, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 25, 26, 27, 28, 34, 31, 29, 30, 32, 37 }
  uselistorder i32 (i32)* @function_148e4, { 8, 7, 11, 10, 9, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10430, { 1, 0 }
  uselistorder label %dec_label_pc_102fc.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_1028c.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_1026c.backedge, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_1030c, { 1, 0 }
  uselistorder label %dec_label_pc_1030c.preheader, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %dec_label_pc_1029c, { 1, 0 }
  uselistorder label %dec_label_pc_1029c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10280, { 1, 0 }
  uselistorder label %dec_label_pc_101f8, { 1, 0 }
  uselistorder label %dec_label_pc_101e0, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_101c0, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_100f8.dec_label_pc_100f8_crit_edge, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ff48, { 1, 0 }
}

define i32 @function_1044c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1044c:
  %v2_10450 = load i32, i32* @global_var_1eb20.165, align 4
  %v2_10458 = call i32 @function_135b0(i32 %v2_10450, i32 9)
  %v0_1045c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1045c, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_1044c
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_1044c, %bb
  ret i32 %v2_10458

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_10460() local_unnamed_addr {
dec_label_pc_10460:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10460 = load i32, i32* @r4, align 4
  store i32 %v3_10460, i32* %stack_var_-16, align 4
  %v0_10464 = load i32, i32* @r0, align 4
  store i32 %v0_10464, i32* %r5.global-to-local, align 4
  %v1_10468 = add i32 %v0_10464, 4
  %v2_10468 = inttoptr i32 %v1_10468 to i32*
  %v3_10468 = load i32, i32* %v2_10468, align 4
  store i32 %v3_10468, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 66700, i32* @lr, align 4
  %v1_10488 = icmp ne i32 %v3_10468, -1
  call void @__pseudo_cond_branch(i1 %v1_10488, i32 ptrtoint (i32* @global_var_134b0.25 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_10498 = call i32 @function_13db0(i32 2, i32 1, i32 0)
  store i32 %v3_10498, i32* %r3.global-to-local, align 4
  %v7_104a0 = icmp eq i32 %v3_10498, -1
  %v0_104a8 = load i32, i32* %r5.global-to-local, align 4
  %v1_104a8 = add i32 %v0_104a8, 28
  store i32 %v1_104a8, i32* %r0.global-to-local, align 4
  %v2_104ac = add i32 %v0_104a8, 4
  %v3_104ac = inttoptr i32 %v2_104ac to i32*
  store i32 %v3_10498, i32* %v3_104ac, align 4
  br i1 %v7_104a0, label %dec_label_pc_10460.dec_label_pc_10528_crit_edge, label %dec_label_pc_104b4

dec_label_pc_10460.dec_label_pc_10528_crit_edge:  ; preds = %dec_label_pc_10460
  %v14_1052c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10528

dec_label_pc_104b4:                               ; preds = %dec_label_pc_10460
  %v0_104b4 = load i32, i32* %r6.global-to-local, align 4
  %v1_104b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_104b4 = add i32 %v1_104b4, 24
  %v3_104b4 = inttoptr i32 %v2_104b4 to i32*
  store i32 %v0_104b4, i32* %v3_104b4, align 4
  %v0_104b8 = load i32, i32* %r0.global-to-local, align 4
  %v2_104b8 = call i32 @function_12b90(i32 %v0_104b8, i32 512)
  store i32 %v2_104b8, i32* %r0.global-to-local, align 4
  %v0_104bc = load i32, i32* %r5.global-to-local, align 4
  %v1_104bc = add i32 %v0_104bc, 4
  %v2_104bc = inttoptr i32 %v1_104bc to i32*
  %v3_104bc = load i32, i32* %v2_104bc, align 4
  store i32 %v3_104bc, i32* @r4, align 4
  %v0_104c4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_104c4, i32* @r2, align 4
  store i32 %v3_104bc, i32* %r0.global-to-local, align 4
  %v2_104cc = call i32 @function_133c0(i32 %v3_104bc, i32 3)
  %v1_104d4 = or i32 %v2_104cc, 2048
  store i32 %v1_104d4, i32* @r2, align 4
  %v0_104d8 = load i32, i32* @r4, align 4
  store i32 %v0_104d8, i32* %r0.global-to-local, align 4
  %v2_104dc = call i32 @function_133c0(i32 %v0_104d8, i32 4)
  store i32 %v2_104dc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1eab4.167 to i32), i32* %r3.global-to-local, align 4
  %v0_104e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_104e4 = add i32 %v0_104e4, 20
  %v2_104e4 = inttoptr i32 %v1_104e4 to i32*
  %v3_104e4 = load i32, i32* %v2_104e4, align 4
  store i32 %v3_104e4, i32* @r4, align 4
  %v2_104e8 = load i32, i32* @global_var_1eab4.167, align 4
  %v1_104ec = add i32 %v0_104e4, 16
  %v2_104ec = inttoptr i32 %v1_104ec to i32*
  %v3_104ec = load i32, i32* %v2_104ec, align 4
  store i32 %v3_104ec, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_104f4 = add i32 %v0_104e4, 8
  %v3_104f4 = inttoptr i32 %v2_104f4 to i32*
  store i32 %v2_104e8, i32* %v3_104f4, align 4
  %v0_104f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_104f8 = load i32, i32* %r5.global-to-local, align 4
  %v2_104f8 = add i32 %v1_104f8, 12
  %v3_104f8 = inttoptr i32 %v2_104f8 to i32*
  store i32 %v0_104f8, i32* %v3_104f8, align 4
  %v0_10500 = load i32, i32* %r5.global-to-local, align 4
  %v1_10500 = add i32 %v0_10500, 4
  %v2_10500 = inttoptr i32 %v1_10500 to i32*
  %v3_10500 = load i32, i32* %v2_10500, align 4
  store i32 %v3_10500, i32* %r0.global-to-local, align 4
  %v0_10504 = load i32, i32* %r3.global-to-local, align 4
  %v2_10504 = mul i32 %v0_10504, 2
  store i32 %v2_10504, i32* %r3.global-to-local, align 4
  store i32 %v2_10504, i32* %stack_var_-32, align 4
  %v3_10524 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_10524 = call i32 @function_13c0c(i32 %v3_10500, %sockaddr* %v3_10524, i32 16)
  store i32 %v4_10524, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10528

dec_label_pc_10528:                               ; preds = %dec_label_pc_10460.dec_label_pc_10528_crit_edge, %dec_label_pc_104b4
  %v14_1052c = phi i32 [ %v14_1052c.pre, %dec_label_pc_10460.dec_label_pc_10528_crit_edge ], [ %v4_10524, %dec_label_pc_104b4 ]
  %v2_1052c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1052c, i32* @r4, align 4
  ret i32 %v14_1052c

; uselistorder directives
  uselistorder i32 %v2_10504, { 1, 0 }
  uselistorder i32 %v3_10498, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 8, 5, 6, 7, 9, 10 }
  uselistorder i32 (i32, i32)* @function_12b90, { 7, 12, 14, 13, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10528, { 1, 0 }
}

define i32 @function_10534(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10534:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_10534 = load i32, i32* @r4, align 4
  %v6_10534 = load i32, i32* @r5, align 4
  %v9_10534 = load i32, i32* @r6, align 4
  %v12_10534 = load i32, i32* @r7, align 4
  %v15_10534 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1ea80.169 to i32), i32* @r8, align 4
  %v2_1053c = load i32, i32* @global_var_1ea80.169, align 4
  store i32 ptrtoint (i32* @global_var_1eaac.171 to i32), i32* %sb.global-to-local, align 4
  %v3_10548 = mul i32 %v2_1053c, 16
  store i32 %v3_10548, i32* %r3.global-to-local, align 4
  %v3_10550 = urem i32 %arg3, 65536
  store i32 %v3_10550, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_1055c = load i32, i32* @global_var_1eaac.171, align 4
  %v1_10560 = add i32 %v3_10548, 16
  store i32 %v1_10560, i32* %r1.global-to-local, align 4
  store i32 %v3_10550, i32* %stack_var_-44, align 4
  %v8_10568 = call i32 @function_141fc(i32 %v2_1055c, i32 %v1_10560, i32 %v3_10550, i32 %v3_10548)
  store i32 %v8_10568, i32* %sl.global-to-local, align 4
  %v0_10570 = load i32, i32* @r5, align 4
  %v1_10574 = load i32, i32* %sb.global-to-local, align 4
  %v2_10574 = inttoptr i32 %v1_10574 to i32*
  store i32 %v8_10568, i32* %v2_10574, align 4
  %v2_10578 = load i32, i32* @global_var_1ea80.169, align 4
  store i32 %v2_10578, i32* %fp.global-to-local, align 4
  %v1_1057c = inttoptr i32 %v0_10570 to i8*
  %v2_1057c = call i32 @function_12af0(i8* %v1_1057c)
  %sext = mul i32 %v2_1057c, 16777216
  %v1_10580 = sdiv i32 %sext, 16777216
  %v2_10580 = add nsw i32 %v1_10580, 1
  store i32 %v2_10580, i32* @r4, align 4
  store i32 %v1_10580, i32* @r7, align 4
  %v1_1058c = call i32 @function_13f60(i32 %v2_10580)
  %v0_10590 = load i32, i32* @r5, align 4
  store i32 %v0_10590, i32* %r1.global-to-local, align 4
  %v0_10594 = load i32, i32* @r4, align 4
  store i32 %v0_10594, i32* %r2.global-to-local, align 4
  store i32 %v1_1058c, i32* @r6, align 4
  %v3_1059c = call i32 @function_12b6c(i32 %v1_1058c, i32 %v0_10590, i32 %v0_10594)
  %v0_105a0 = load i32, i32* @r7, align 4
  %tmp21 = icmp slt i32 %v0_105a0, 1
  %extract.t6 = trunc i32 %v0_105a0 to i8
  br i1 %tmp21, label %dec_label_pc_105c4, label %dec_label_pc_105a8

dec_label_pc_105a8:                               ; preds = %dec_label_pc_10534
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_105ac

dec_label_pc_105ac:                               ; preds = %dec_label_pc_105ac, %dec_label_pc_105a8
  %v2_105b4 = phi i32 [ %v1_105b8, %dec_label_pc_105ac ], [ 0, %dec_label_pc_105a8 ]
  %v1_105ac = load i32, i32* @r6, align 4
  %v2_105ac = add i32 %v1_105ac, %v2_105b4
  %v3_105ac = inttoptr i32 %v2_105ac to i8*
  %v4_105ac = load i8, i8* %v3_105ac, align 1
  %v6_105ac = zext i8 %v4_105ac to i32
  %v1_105b0 = xor i32 %v6_105ac, 34
  store i32 %v1_105b0, i32* %r3.global-to-local, align 4
  %v1_105b4 = trunc i32 %v1_105b0 to i8
  store i8 %v1_105b4, i8* %v3_105ac, align 1
  %v0_105b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_105b8 = add i32 %v0_105b8, 1
  store i32 %v1_105b8, i32* %r2.global-to-local, align 4
  %v0_105bc = load i32, i32* @r7, align 4
  %v9_105bc = icmp eq i32 %v0_105bc, %v1_105b8
  br i1 %v9_105bc, label %dec_label_pc_105c4.loopexit, label %dec_label_pc_105ac

dec_label_pc_105c4.loopexit:                      ; preds = %dec_label_pc_105ac
  %extract.t = trunc i32 %v1_105b8 to i8
  br label %dec_label_pc_105c4

dec_label_pc_105c4:                               ; preds = %dec_label_pc_105c4.loopexit, %dec_label_pc_10534
  %v0_105d4.off0 = phi i8 [ %extract.t, %dec_label_pc_105c4.loopexit ], [ %extract.t6, %dec_label_pc_10534 ]
  %v2_105c4 = load i32, i32* @global_var_1ea80.169, align 4
  %v2_105c8 = load i32, i32* @global_var_1eaac.171, align 4
  store i32 %v2_105c8, i32* %r2.global-to-local, align 4
  %v3_105cc = mul i32 %v2_105c4, 16
  %v2_105d0 = add i32 %v2_105c8, %v3_105cc
  store i32 %v2_105d0, i32* %r3.global-to-local, align 4
  %v3_105d4 = add i32 %v2_105d0, 12
  %v4_105d4 = inttoptr i32 %v3_105d4 to i8*
  store i8 %v0_105d4.off0, i8* %v4_105d4, align 1
  %v0_105d8 = load i32, i32* @r6, align 4
  %v1_105d8 = load i32, i32* %sl.global-to-local, align 4
  %v2_105d8 = load i32, i32* %fp.global-to-local, align 4
  %v5_105d8 = mul i32 %v2_105d8, 16
  %v6_105d8 = add i32 %v5_105d8, %v1_105d8
  %v7_105d8 = inttoptr i32 %v6_105d8 to i32*
  store i32 %v0_105d8, i32* %v7_105d8, align 4
  %v2_105e0 = load i32, i32* @global_var_1ea80.169, align 4
  store i32 %v2_105e0, i32* @r7, align 4
  %v2_105e4 = load i32, i32* @global_var_1eaac.171, align 4
  store i32 %v2_105e4, i32* %sl.global-to-local, align 4
  %v1_105e8 = inttoptr i32 %arg2 to i8*
  %v2_105e8 = call i32 @function_12af0(i8* %v1_105e8)
  %sext1 = mul i32 %v2_105e8, 16777216
  %v1_105ec = sdiv i32 %sext1, 16777216
  %v2_105ec = add nsw i32 %v1_105ec, 1
  store i32 %v2_105ec, i32* @r4, align 4
  store i32 %v1_105ec, i32* @r5, align 4
  %v1_105f8 = call i32 @function_13f60(i32 %v2_105ec)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_10600 = load i32, i32* @r4, align 4
  store i32 %v0_10600, i32* %r2.global-to-local, align 4
  store i32 %v1_105f8, i32* %r6.global-to-local, align 4
  %v3_10608 = call i32 @function_12b6c(i32 %v1_105f8, i32 %arg2, i32 %v0_10600)
  %v0_1060c = load i32, i32* @r5, align 4
  %tmp22 = icmp slt i32 %v0_1060c, 1
  %extract.t8 = trunc i32 %v0_1060c to i8
  br i1 %tmp22, label %dec_label_pc_10630, label %dec_label_pc_10614

dec_label_pc_10614:                               ; preds = %dec_label_pc_105c4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10618

dec_label_pc_10618:                               ; preds = %dec_label_pc_10618, %dec_label_pc_10614
  %v2_10620 = phi i32 [ %v1_10624, %dec_label_pc_10618 ], [ 0, %dec_label_pc_10614 ]
  %v1_10618 = load i32, i32* %r6.global-to-local, align 4
  %v2_10618 = add i32 %v1_10618, %v2_10620
  %v3_10618 = inttoptr i32 %v2_10618 to i8*
  %v4_10618 = load i8, i8* %v3_10618, align 1
  %v6_10618 = zext i8 %v4_10618 to i32
  %v1_1061c = xor i32 %v6_10618, 34
  store i32 %v1_1061c, i32* %r3.global-to-local, align 4
  %v1_10620 = trunc i32 %v1_1061c to i8
  store i8 %v1_10620, i8* %v3_10618, align 1
  %v0_10624 = load i32, i32* %r2.global-to-local, align 4
  %v1_10624 = add i32 %v0_10624, 1
  store i32 %v1_10624, i32* %r2.global-to-local, align 4
  %v0_10628 = load i32, i32* @r5, align 4
  %v9_10628 = icmp eq i32 %v0_10628, %v1_10624
  br i1 %v9_10628, label %dec_label_pc_10630.loopexit, label %dec_label_pc_10618

dec_label_pc_10630.loopexit:                      ; preds = %dec_label_pc_10618
  %extract.t7 = trunc i32 %v1_10624 to i8
  br label %dec_label_pc_10630

dec_label_pc_10630:                               ; preds = %dec_label_pc_10630.loopexit, %dec_label_pc_105c4
  %v0_10640.off0 = phi i8 [ %extract.t7, %dec_label_pc_10630.loopexit ], [ %extract.t8, %dec_label_pc_105c4 ]
  %v2_10630 = load i32, i32* @global_var_1ea80.169, align 4
  %v2_10634 = load i32, i32* @global_var_1eaac.171, align 4
  %v3_10638 = mul i32 %v2_10630, 16
  %v2_1063c = or i32 %v3_10638, 13
  %v3_10640 = add i32 %v2_1063c, %v2_10634
  %v4_10640 = inttoptr i32 %v3_10640 to i8*
  store i8 %v0_10640.off0, i8* %v4_10640, align 1
  %v2_10648 = load i32, i32* @global_var_1ea80.169, align 4
  store i32 %v2_10648, i32* %lr.global-to-local, align 4
  %v4_1064c = load i8, i8* @global_var_1eab1.174, align 1
  %v5_1064c = zext i8 %v4_1064c to i32
  %v3_10650 = load i8, i8* bitcast (i8** @global_var_1eab0.173 to i8*), align 4
  %v4_10650 = zext i8 %v3_10650 to i32
  %v2_10654 = load i32, i32* @global_var_1eaac.171, align 4
  %v4_10658 = mul nuw nsw i32 %v5_1064c, 256
  %v5_10658 = or i32 %v4_10650, %v4_10658
  store i32 %v5_10658, i32* %r2.global-to-local, align 4
  %v3_1065c = mul i32 %v2_10648, 16
  %v2_10660 = add i32 %v2_10654, %v3_1065c
  store i32 %v2_10660, i32* %r1.global-to-local, align 4
  %v3_10668 = add i32 %v2_10660, 9
  %v4_10668 = inttoptr i32 %v3_10668 to i8*
  store i8 %v4_1064c, i8* %v4_10668, align 1
  %v0_1066c = load i32, i32* %r2.global-to-local, align 4
  %v1_1066c = trunc i32 %v0_1066c to i8
  %v2_1066c = load i32, i32* %r1.global-to-local, align 4
  %v3_1066c = add i32 %v2_1066c, 8
  %v4_1066c = inttoptr i32 %v3_1066c to i8*
  store i8 %v1_1066c, i8* %v4_1066c, align 1
  %v4_10670 = load i8, i8* @global_var_1eab1.174, align 1
  %v5_10670 = zext i8 %v4_10670 to i32
  %v3_10674 = load i8, i8* bitcast (i8** @global_var_1eab0.173 to i8*), align 4
  %v4_10674 = zext i8 %v3_10674 to i32
  %v4_10678 = mul nuw nsw i32 %v5_10670, 256
  %v5_10678 = or i32 %v4_10674, %v4_10678
  %v2_1067c = load i32, i32* %stack_var_-44, align 4
  %v2_10680 = add i32 %v5_10678, %v2_1067c
  store i32 %v2_10680, i32* %r3.global-to-local, align 4
  %v3_106849 = udiv i32 %v2_10680, 256
  %v1_10688 = trunc i32 %v3_106849 to i8
  %v2_10688 = load i32, i32* %r1.global-to-local, align 4
  %v3_10688 = add i32 %v2_10688, 11
  %v4_10688 = inttoptr i32 %v3_10688 to i8*
  store i8 %v1_10688, i8* %v4_10688, align 1
  %v0_1068c = load i32, i32* %r3.global-to-local, align 4
  %v1_1068c = trunc i32 %v0_1068c to i8
  %v2_1068c = load i32, i32* %r1.global-to-local, align 4
  %v3_1068c = add i32 %v2_1068c, 10
  %v4_1068c = inttoptr i32 %v3_1068c to i8*
  store i8 %v1_1068c, i8* %v4_1068c, align 1
  %v4_10690 = load i8, i8* @global_var_1eab1.174, align 1
  %v5_10690 = zext i8 %v4_10690 to i32
  %v3_10694 = load i8, i8* bitcast (i8** @global_var_1eab0.173 to i8*), align 4
  %v4_10694 = zext i8 %v3_10694 to i32
  %v4_10698 = mul nuw nsw i32 %v5_10690, 256
  %v5_10698 = or i32 %v4_10694, %v4_10698
  %v2_1069c = load i32, i32* %stack_var_-44, align 4
  %v2_106a0 = add i32 %v5_10698, %v2_1069c
  store i32 %v2_106a0, i32* %r2.global-to-local, align 4
  %v0_106a4 = load i32, i32* @r7, align 4
  %v3_106a4 = mul i32 %v0_106a4, 16
  %v1_106a8 = load i32, i32* %sl.global-to-local, align 4
  %v2_106a8 = add i32 %v1_106a8, %v3_106a4
  store i32 %v2_106a8, i32* %r3.global-to-local, align 4
  %v0_106ac = load i32, i32* %lr.global-to-local, align 4
  %v1_106ac = add i32 %v0_106ac, 1
  store i32 %v1_106ac, i32* @lr, align 4
  %v3_106b0 = sdiv i32 %v2_106a0, 256
  store i32 %v3_106b0, i32* %r1.global-to-local, align 4
  %v0_106b4 = load i32, i32* %r6.global-to-local, align 4
  %v2_106b4 = add i32 %v2_106a8, 4
  %v3_106b4 = inttoptr i32 %v2_106b4 to i32*
  store i32 %v0_106b4, i32* %v3_106b4, align 4
  %v0_106b8 = load i32, i32* @lr, align 4
  %v1_106b8 = load i32, i32* @r8, align 4
  %v2_106b8 = inttoptr i32 %v1_106b8 to i32*
  store i32 %v0_106b8, i32* %v2_106b8, align 4
  %v0_106bc = load i32, i32* %r1.global-to-local, align 4
  %v1_106bc = trunc i32 %v0_106bc to i8
  store i8 %v1_106bc, i8* @global_var_1eab1.174, align 1
  %v0_106c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_106c0 = trunc i32 %v0_106c0 to i8
  store i8 %v1_106c0, i8* bitcast (i8** @global_var_1eab0.173 to i8*), align 4
  store i32 %v3_10534, i32* @r4, align 4
  store i32 %v6_10534, i32* @r5, align 4
  store i32 %v9_10534, i32* @r6, align 4
  store i32 %v12_10534, i32* @r7, align 4
  store i32 %v15_10534, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1eab0.173 to i32)

; uselistorder directives
  uselistorder i32 %v1_10624, { 0, 2, 3, 1 }
  uselistorder i32 %v1_105f8, { 1, 0 }
  uselistorder i32 %v1_105b8, { 0, 2, 3, 1 }
  uselistorder i32 %v1_1058c, { 1, 0 }
  uselistorder i32 %v3_10550, { 1, 2, 0 }
  uselistorder i32 %v3_10548, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_12af0, { 22, 23, 3, 4, 5, 6, 7, 0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 80, 43, 44, 45, 46, 47, 48, 49, 50, 72, 73, 74, 75, 76, 77, 78, 79, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71 }
  uselistorder i32 (i32, i32, i32, i32)* @function_141fc, { 0, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_106d8() local_unnamed_addr {
dec_label_pc_106d8:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp232 = call i32 @__decompiler_undefined_function_0()
  %tmp239 = call i32 @__decompiler_undefined_function_0()
  %tmp240 = call i8* @__decompiler_undefined_function_2()
  %tmp241 = call i32 @__decompiler_undefined_function_0()
  %tmp242 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_106d8 = load i32, i32* @r4, align 4
  store i32 %v3_106d8, i32* %stack_var_-36, align 4
  %v6_106d8 = load i32, i32* @r5, align 4
  %v9_106d8 = load i32, i32* @r6, align 4
  %v12_106d8 = load i32, i32* @r7, align 4
  %v15_106d8 = load i32, i32* @r8, align 4
  %v18_106d8 = load i32, i32* @sb, align 4
  %v21_106d8 = load i32, i32* @sl, align 4
  %v24_106d8 = load i32, i32* @fp, align 4
  %v0_106e0 = call i32 @function_134dc()
  store i32 %v0_106e0, i32* %r0.global-to-local, align 4
  %v7_106e4 = icmp eq i32 %v0_106e0, -1
  %. = zext i1 %v7_106e4 to i32
  %tmp273 = icmp slt i32 %v0_106e0, 1
  %storemerge229 = select i1 %tmp273, i32 %., i32 1
  store i32 %storemerge229, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1eb20.165 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10700 = icmp eq i32 %storemerge229, 0
  store i1 %v2_10700, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_106e0, i32* @global_var_1eb20.165, align 4
  br i1 %v2_10700, label %dec_label_pc_10714, label %dec_label_pc_1070c

dec_label_pc_1070c:                               ; preds = %dec_label_pc_106d8
  store i32 %v3_106d8, i32* @r4, align 4
  store i32 %v6_106d8, i32* %r5.global-to-local, align 4
  store i32 %v9_106d8, i32* @r6, align 4
  store i32 %v12_106d8, i32* @r7, align 4
  store i32 %v15_106d8, i32* @r8, align 4
  store i32 %v18_106d8, i32* @sb, align 4
  store i32 %v21_106d8, i32* @sl, align 4
  store i32 %v24_106d8, i32* @fp, align 4
  ret i32 %v0_106e0

dec_label_pc_10714:                               ; preds = %dec_label_pc_106d8
  %v0_10714 = call i32 @function_12da8()
  store i32 %v0_10714, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1eafc.85 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_10714, i32* @global_var_1eafc.85, align 4
  %v1_10720 = call i32 @function_fc74(i32 %v0_10714)
  %v0_10724 = load i32, i32* @r4, align 4
  store i32 %v0_10724, i32* %r0.global-to-local, align 4
  %v1_10728 = inttoptr i32 %v0_10724 to i32*
  %v2_10728 = call i32 @function_13780(i32* %v1_10728)
  store i32 ptrtoint (i32* @global_var_1eab4.167 to i32), i32* %r2.global-to-local, align 4
  store i32 544, i32* %r1.global-to-local, align 4
  store i32 %v2_10728, i32* @global_var_1eab4.167, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_1073c = call i32 @function_140b4(i32 256, i32 544)
  store i32 %v2_1073c, i32* %lr.global-to-local, align 4
  %v0_10748 = load i32, i32* @r4, align 4
  store i32 %v0_10748, i32* %stack_var_-52, align 4
  store i32 %v2_1073c, i32* @global_var_1eb18.179, align 4
  store i32 %v0_10748, i32* %r3.global-to-local, align 4
  store i32 %v0_10748, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_10748, i32* %ip.global-to-local, align 4
  %v1_10760 = add i32 %v2_1073c, 4
  store i32 %v1_10760, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10764

dec_label_pc_10764:                               ; preds = %dec_label_pc_10764.dec_label_pc_10764_crit_edge, %dec_label_pc_10714
  %v0_1077c = phi i32 [ %v0_1077c.pre, %dec_label_pc_10764.dec_label_pc_10764_crit_edge ], [ %v0_10748, %dec_label_pc_10714 ]
  %v0_1076c = phi i32 [ %v0_10784, %dec_label_pc_10764.dec_label_pc_10764_crit_edge ], [ %v0_10748, %dec_label_pc_10714 ]
  %v1_10774 = phi i32 [ %v1_10774.pre, %dec_label_pc_10764.dec_label_pc_10764_crit_edge ], [ %v2_1073c, %dec_label_pc_10714 ]
  %v3_10764 = mul i32 %v0_1076c, 512
  store i32 %v3_10764, i32* %r2.global-to-local, align 4
  %v1_1076c = add i32 %v0_1076c, 1
  store i32 %v1_1076c, i32* %ip.global-to-local, align 4
  %v2_10770 = mul i32 %v0_1076c, 544
  %v2_10774 = add i32 %v1_10774, 12
  %v2_1077c = add i32 %v2_10774, %v2_10770
  %v3_1077c = inttoptr i32 %v2_1077c to i32*
  store i32 %v0_1077c, i32* %v3_1077c, align 4
  %v0_10780 = load i32, i32* %r0.global-to-local, align 4
  %v1_10780 = load i32, i32* %r1.global-to-local, align 4
  %v2_10780 = inttoptr i32 %v1_10780 to i32*
  store i32 %v0_10780, i32* %v2_10780, align 4
  %v3_10780 = load i32, i32* %r1.global-to-local, align 4
  %v4_10780 = add i32 %v3_10780, 544
  store i32 %v4_10780, i32* %r1.global-to-local, align 4
  %v0_10784 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_10784, i32* %r3.global-to-local, align 4
  %v7_10788 = icmp sgt i32 %v1_1076c, 255
  br i1 %v7_10788, label %dec_label_pc_1078c, label %dec_label_pc_10764.dec_label_pc_10764_crit_edge

dec_label_pc_10764.dec_label_pc_10764_crit_edge:  ; preds = %dec_label_pc_10764
  %v1_10774.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_1077c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10764

dec_label_pc_1078c:                               ; preds = %dec_label_pc_10764
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_10784, i32* %stack_var_-52, align 4
  %v3_1079c = call i32 @function_13db0(i32 2, i32 3, i32 6)
  store i32 %v3_1079c, i32* %r0.global-to-local, align 4
  %v2_107a4 = icmp eq i32 %v3_1079c, -1
  store i1 %v2_107a4, i1* %cpsr_c.global-to-local, align 1
  %v7_107a4 = icmp eq i32 %v3_1079c, -1
  store i1 %v7_107a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_1079c, i32* @r4, align 4
  store i32 %v3_1079c, i32* @global_var_1eb1c.181, align 4
  br i1 %v7_107a4, label %dec_label_pc_111bc, label %dec_label_pc_107b4

dec_label_pc_107b4:                               ; preds = %dec_label_pc_1078c
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_107b8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_107b8, i32* @r2, align 4
  %v2_107bc = call i32 @function_133c0(i32 %v3_1079c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_107c4 = or i32 %v2_107bc, 2048
  store i32 %v1_107c4, i32* @r2, align 4
  %v0_107c8 = load i32, i32* @r4, align 4
  store i32 %v0_107c8, i32* %r0.global-to-local, align 4
  %v2_107cc = call i32 @function_133c0(i32 %v0_107c8, i32 4)
  store i32 1, i32* %ip.global-to-local, align 4
  %v2_107d8 = load i32, i32* @global_var_1eb1c.181, align 4
  store i32 %v2_107d8, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_107e0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_107e0, i32* %r1.global-to-local, align 4
  %v2_107e4 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_107e4, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_107f4 = call i32 @function_13d80(i32 %v2_107d8, i32 %v0_107e0, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_107f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_107f8 = icmp eq i32 %v6_107f4, 0
  store i1 %v2_107f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_107f8, label %dec_label_pc_10800, label %dec_label_pc_111b0

dec_label_pc_10800:                               ; preds = %dec_label_pc_107b4, %dec_label_pc_10800
  %v0_10800 = call i32 @function_fc1c()
  %v3_10804 = mul i32 %v0_10800, 65536
  store i32 %v3_10804, i32* %r0.global-to-local, align 4
  %v1_10810 = mul i32 %v0_10800, 256
  %v3_10814 = and i32 %v1_10810, 65280
  %tmp276 = udiv i32 %v0_10800, 256
  %v4_10818 = urem i32 %tmp276, 256
  %v5_10818 = or i32 %v4_10818, %v3_10814
  store i32 %v5_10818, i32* %r3.global-to-local, align 4
  %v2_1081c = icmp ugt i32 %v5_10818, 1023
  store i1 %v2_1081c, i1* %cpsr_c.global-to-local, align 1
  %v7_1081c = icmp eq i32 %v5_10818, 1024
  store i1 %v7_1081c, i1* %cpsr_z.global-to-local, align 1
  %v3_10820 = icmp ult i32 %v5_10818, 1022
  br i1 %v3_10820, label %dec_label_pc_10800, label %dec_label_pc_10824

dec_label_pc_10824:                               ; preds = %dec_label_pc_10800
  %v5_1080c.le = trunc i32 %v0_10800 to i8
  store i32 ptrtoint (i8** @global_var_1ea84.183 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1ea84.183 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1ea87.184 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1ea86.185 to i8*), align 4
  %v0_10858 = call i32 @function_fc1c()
  %v1_10858 = trunc i32 %v0_10858 to i8
  store i32 %v0_10858, i32* %r0.global-to-local, align 4
  %v4_10860 = sext i8 %v5_1080c.le to i32
  %v3_10864 = load i8, i8* @global_var_1eaa4.188, align 1
  store i32 ptrtoint (i8** @global_var_1ea84.183 to i32), i32* %lr.global-to-local, align 4
  %v3_1086c228 = udiv i32 %v4_10860, 256
  store i8 64, i8* bitcast (i32* @global_var_1ea8c.189 to i8*), align 4
  %v2_10878 = and i32 %v0_10858, 128
  %v3_10878 = icmp ne i32 %v2_10878, 0
  store i1 %v3_10878, i1* %cpsr_c.global-to-local, align 1
  %v4_10878227 = udiv i32 %v0_10858, 256
  store i32 ptrtoint (i32* @global_var_1ea98.187 to i32), i32* %r3.global-to-local, align 4
  %tmp = urem i8 %v3_10864, 16
  %v1_10880 = zext i8 %tmp to i32
  %v1_10884 = trunc i32 %v4_10878227 to i8
  store i8 %v1_10884, i8* bitcast (i32* @global_var_1ea89.190 to i8*), align 4
  %v1_10888 = or i32 %v1_10880, 80
  store i32 %v1_10888, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r2.global-to-local, align 4
  store i32 6, i32* @r6, align 4
  %v1_10894 = trunc i32 %v1_10888 to i8
  store i8 %v1_10894, i8* @global_var_1eaa4.188, align 1
  %v1_10898 = trunc i32 %v3_1086c228 to i8
  store i8 %v1_10898, i8* bitcast (i32* @global_var_1ea99.191 to i8*), align 4
  store i8 23, i8* bitcast (i32* @global_var_1ea9b.192 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1ea8d.193 to i8*), align 4
  store i32 %v4_10860, i32* %ip.global-to-local, align 4
  store i8 %v1_10858, i8* bitcast (i32* @global_var_1ea88.194 to i8*), align 4
  store i8 %v5_1080c.le, i8* bitcast (i32* @global_var_1ea98.187 to i8*), align 4
  %v0_108b0 = load i32, i32* @r5, align 4
  %v1_108b0 = trunc i32 %v0_108b0 to i8
  store i8 %v1_108b0, i8* bitcast (i32* @global_var_1ea9a.195 to i8*), align 4
  %v0_108b4 = call i32 @function_fc1c()
  %v1_108b4 = trunc i32 %v0_108b4 to i8
  store i32 ptrtoint (i32* @global_var_1ea98.187 to i32), i32* @lr, align 4
  %v3_108bc = load i8, i8* @global_var_1eaa5.196, align 1
  %v4_108bc = zext i8 %v3_108bc to i32
  %v2_108c0 = and i32 %v0_108b4, 128
  %v3_108c0 = icmp ne i32 %v2_108c0, 0
  store i1 %v3_108c0, i1* %cpsr_c.global-to-local, align 1
  %v4_108c0 = sdiv i32 %v0_108b4, 256
  store i32 %v4_108c0, i32* %ip.global-to-local, align 4
  %v1_108c4 = or i32 %v4_108bc, 2
  store i32 %v1_108c4, i32* %r3.global-to-local, align 4
  store i32 %v0_108b4, i32* @r4, align 4
  %v1_108cc = trunc i32 %v4_108c0 to i8
  store i8 %v1_108cc, i8* bitcast (i32* @global_var_1eaa7.197 to i8*), align 4
  %v1_108d0 = trunc i32 %v1_108c4 to i8
  store i8 %v1_108d0, i8* @global_var_1eaa5.196, align 1
  store i8 %v1_108b4, i8* bitcast (i32* @global_var_1eaa6.198 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee0.202 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_108e4 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15ee0.202 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r1.global-to-local, align 4
  %v5_108f4 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee4.204 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10904 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15ee4.204 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f5c.206 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v4_10914 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15f5c.206 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15eec.208 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10924 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15eec.208 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ef4.210 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10934 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15ef4.210 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ee0.202 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10944 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15ee0.202 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ef8.212 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10954 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15ef8.212 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f00.214 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_10964 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15f00.214 to i32), i32 15)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f08.216 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v4_10974 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15f08.216 to i32), i32 12)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15f10.218 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10984 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint ([7 x i8]* @global_var_15f10.218 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f18.220 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10994 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15f18.220 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f24.222 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_109a4 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15f24.222 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f30.224 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_109b4 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15f30.224 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f38.226 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_109c4 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15f38.226 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f44.228 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_109d4 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15f44.228 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15f50.230 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_109e4 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint ([8 x i8]* @global_var_15f50.230 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f58.232 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_109f4 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15f58.232 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15f60.234 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10a04 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint ([7 x i8]* @global_var_15f60.234 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15f68.236 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_10a14 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint ([6 x i8]* @global_var_15f68.236 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f70.238 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v5_10a24 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint ([5 x i8]* @global_var_15f70.238 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15f78.240 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10a34 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint ([8 x i8]* @global_var_15f78.240 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f80.242 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_10a44 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15f80.242 to i32), i32 15)
  %v0_10a48 = load i32, i32* @r6, align 4
  store i32 %v0_10a48, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15f88.244 to i32), i32* %r1.global-to-local, align 4
  %v5_10a54 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint ([6 x i8]* @global_var_15f88.244 to i32), i32 %v0_10a48)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10a64 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 5)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f98.248 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_10a74 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint ([5 x i8]* @global_var_15f98.248 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15fa0.250 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_10a84 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint ([8 x i8]* @global_var_15fa0.250 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fa8.252 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10a94 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15fa8.252 to i32), i32 3)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fb0.254 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_10aa4 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15fb0.254 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15fb8.256 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10ab4 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint ([9 x i8]* @global_var_15fb8.256 to i32), i32 1)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fc4.258 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_10ac4 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15fc4.258 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fd0.260 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_10ad4 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15fd0.260 to i32), i32 2)
  store i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fdc.262 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10ae4 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), i32 ptrtoint (i32* @global_var_15fdc.262 to i32), i32 7)
  store i32 ptrtoint ([11 x i8]* @global_var_15fec.264 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ff8.266 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_10af4 = call i32 @function_10534(i32 ptrtoint ([11 x i8]* @global_var_15fec.264 to i32), i32 ptrtoint (i32* @global_var_15ff8.266 to i32), i32 2)
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15f98.248 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v5_10b04 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 ptrtoint ([5 x i8]* @global_var_15f98.248 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15eec.208 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10b14 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 ptrtoint (i32* @global_var_15eec.208 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ef8.212 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10b24 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 ptrtoint (i32* @global_var_15ef8.212 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f00.214 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10b34 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 ptrtoint (i32* @global_var_15f00.214 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f08.216 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10b44 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 ptrtoint (i32* @global_var_15f08.216 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f24.222 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_10b54 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 ptrtoint (i32* @global_var_15f24.222 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16004.268 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10b64 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 ptrtoint (i32* @global_var_16004.268 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15fb8.256 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_10b74 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 ptrtoint ([9 x i8]* @global_var_15fb8.256 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1600c.270 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10b84 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 ptrtoint (i32* @global_var_1600c.270 to i32), i32 5)
  store i32 ptrtoint ([14 x i8]* @global_var_16014.272 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d98.274 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10b94 = call i32 @function_10534(i32 ptrtoint ([14 x i8]* @global_var_16014.272 to i32), i32 ptrtoint (i32* @global_var_15d98.274 to i32), i32 5)
  store i32 ptrtoint ([14 x i8]* @global_var_15e24.276 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ef8.212 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10ba4 = call i32 @function_10534(i32 ptrtoint ([14 x i8]* @global_var_15e24.276 to i32), i32 ptrtoint (i32* @global_var_15ef8.212 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15e34.278 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15e34.278 to i32), i32* %r1.global-to-local, align 4
  %v5_10bb4 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15e34.278 to i32), i32 ptrtoint ([6 x i8]* @global_var_15e34.278 to i32), i32 3)
  store i32 ptrtoint ([4 x i8]* @global_var_15e3c.280 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d98.274 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10bc4 = call i32 @function_10534(i32 ptrtoint ([4 x i8]* @global_var_15e3c.280 to i32), i32 ptrtoint (i32* @global_var_15d98.274 to i32), i32 5)
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r1.global-to-local, align 4
  %v5_10bd4 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 15)
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15fdc.262 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10be4 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 ptrtoint (i32* @global_var_15fdc.262 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15e40.282 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v5_10bf4 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 ptrtoint ([9 x i8]* @global_var_15e40.282 to i32), i32 4)
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e4c.284 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10c04 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 ptrtoint (i32* @global_var_15e4c.284 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e58.286 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10c14 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 ptrtoint (i32* @global_var_15e58.286 to i32), i32 1)
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e64.288 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10c24 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 ptrtoint (i32* @global_var_15e64.288 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15e6c.290 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10c34 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), i32 ptrtoint (i32* @global_var_15e6c.290 to i32), i32 1)
  store i32 ptrtoint (i32* @global_var_15e78.292 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15e80.294 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_10c44 = call i32 @function_10534(i32 ptrtoint (i32* @global_var_15e78.292 to i32), i32 ptrtoint ([7 x i8]* @global_var_15e80.294 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_15f50.230 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d98.274 to i32), i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v4_10c54 = call i32 @function_10534(i32 ptrtoint ([8 x i8]* @global_var_15f50.230 to i32), i32 ptrtoint (i32* @global_var_15d98.274 to i32), i32 5)
  store i32 ptrtoint ([8 x i8]* @global_var_15e88.296 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15e88.296 to i32), i32* %r1.global-to-local, align 4
  %v5_10c64 = call i32 @function_10534(i32 ptrtoint ([8 x i8]* @global_var_15e88.296 to i32), i32 ptrtoint ([8 x i8]* @global_var_15e88.296 to i32), i32 10)
  store i32 ptrtoint ([8 x i8]* @global_var_15e88.296 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ef8.212 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10c74 = call i32 @function_10534(i32 ptrtoint ([8 x i8]* @global_var_15e88.296 to i32), i32 ptrtoint (i32* @global_var_15ef8.212 to i32), i32 7)
  store i32 ptrtoint ([8 x i8]* @global_var_15e88.296 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f08.216 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10c84 = call i32 @function_10534(i32 ptrtoint ([8 x i8]* @global_var_15e88.296 to i32), i32 ptrtoint (i32* @global_var_15f08.216 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_15e90.298 to i32), i32* %r0.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15e90.298 to i32), i32* %r1.global-to-local, align 4
  %v5_10c94 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15e90.298 to i32), i32 ptrtoint ([5 x i8]* @global_var_15e90.298 to i32), i32 15)
  store i32 ptrtoint ([5 x i8]* @global_var_15e90.298 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f08.216 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v4_10ca4 = call i32 @function_10534(i32 ptrtoint ([5 x i8]* @global_var_15e90.298 to i32), i32 ptrtoint (i32* @global_var_15f08.216 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_15e98.300 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15eec.208 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10cb4 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15e98.300 to i32), i32 ptrtoint (i32* @global_var_15eec.208 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15e98.300 to i32), i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15e98.300 to i32), i32* %r1.global-to-local, align 4
  %v5_10cc4 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15e98.300 to i32), i32 ptrtoint ([6 x i8]* @global_var_15e98.300 to i32), i32 3)
  store i32 ptrtoint ([6 x i8]* @global_var_15e98.300 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f00.214 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10cd4 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15e98.300 to i32), i32 ptrtoint (i32* @global_var_15f00.214 to i32), i32 10)
  store i32 ptrtoint ([6 x i8]* @global_var_15e98.300 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15f08.216 to i32), i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_10ce4 = call i32 @function_10534(i32 ptrtoint ([6 x i8]* @global_var_15e98.300 to i32), i32 ptrtoint (i32* @global_var_15f08.216 to i32), i32 1)
  store i32 ptrtoint ([7 x i8]* @global_var_15ea0.302 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d98.274 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_10cf4 = call i32 @function_10534(i32 ptrtoint ([7 x i8]* @global_var_15ea0.302 to i32), i32 ptrtoint (i32* @global_var_15d98.274 to i32), i32 7)
  store i32 ptrtoint (i32* @global_var_15ef8.212 to i32), i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15ef8.212 to i32), i32* %r1.global-to-local, align 4
  %v3_10d04 = call i32 @function_10534(i32 ptrtoint (i32* @global_var_15ef8.212 to i32), i32 ptrtoint (i32* @global_var_15ef8.212 to i32), i32 2)
  store i32 ptrtoint ([4 x i8]* @global_var_15ea8.304 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_15d98.274 to i32), i32* %r1.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v4_10d14 = call i32 @function_10534(i32 ptrtoint ([4 x i8]* @global_var_15ea8.304 to i32), i32 ptrtoint (i32* @global_var_15d98.274 to i32), i32 10)
  store i32 ptrtoint ([7 x i8]* @global_var_15eac.306 to i32), i32* %r0.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_15eac.306 to i32), i32* %r1.global-to-local, align 4
  %v5_10d24 = call i32 @function_10534(i32 ptrtoint ([7 x i8]* @global_var_15eac.306 to i32), i32 ptrtoint ([7 x i8]* @global_var_15eac.306 to i32), i32 5)
  store i32 ptrtoint ([9 x i8]* @global_var_15eb4.308 to i32), i32* %r0.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_15eb4.308 to i32), i32* %r1.global-to-local, align 4
  %v5_10d34 = call i32 @function_10534(i32 ptrtoint ([9 x i8]* @global_var_15eb4.308 to i32), i32 ptrtoint ([9 x i8]* @global_var_15eb4.308 to i32), i32 1)
  %v2_10d3c = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_10d3c, i32* %r0.global-to-local, align 4
  %v2_10d40 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_10d40, i32* %r1.global-to-local, align 4
  %tmp277 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_10d4c

dec_label_pc_10d4c:                               ; preds = %dec_label_pc_113a4, %dec_label_pc_10824
  %stack_var_-1872.0 = phi i32 [ %tmp239, %dec_label_pc_10824 ], [ %stack_var_-1872.2, %dec_label_pc_113a4 ]
  %stack_var_-1884.0 = phi i8* [ %tmp277, %dec_label_pc_10824 ], [ %stack_var_-1884.1, %dec_label_pc_113a4 ]
  %v0_1107c = phi i32 [ %v2_10d3c, %dec_label_pc_10824 ], [ %stack_var_-1880.1, %dec_label_pc_113a4 ]
  %stack_var_-1876.0 = phi i8 [ %v5_1080c.le, %dec_label_pc_10824 ], [ %stack_var_-1876.1, %dec_label_pc_113a4 ]
  store i32 ptrtoint (i32* @global_var_1eab4.167 to i32), i32* %r2.global-to-local, align 4
  store i32 %stack_var_-1872.0, i32* %r3.global-to-local, align 4
  %v2_10d54 = load i32, i32* @global_var_1eab4.167, align 4
  store i32 %v2_10d54, i32* @r8, align 4
  %v3_10d58 = icmp uge i32 %stack_var_-1872.0, %v2_10d54
  store i1 %v3_10d58, i1* %cpsr_c.global-to-local, align 1
  %v9_10d58 = icmp eq i32 %stack_var_-1872.0, %v2_10d54
  store i1 %v9_10d58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10d58, label %dec_label_pc_11004, label %dec_label_pc_10d60

dec_label_pc_10d60:                               ; preds = %dec_label_pc_10d4c
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_10fd4 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_10d6c

dec_label_pc_10d6c:                               ; preds = %.thread47.dec_label_pc_10d6c_crit_edge, %dec_label_pc_10d60
  %v0_10d6c = phi i32 [ %v0_10d6c.pre, %.thread47.dec_label_pc_10d6c_crit_edge ], [ 0, %dec_label_pc_10d60 ]
  store i32 %v0_10d6c, i32* %stack_var_-92, align 4
  store i32 %v0_10d6c, i32* %stack_var_-84, align 4
  %v0_10d7c = call i32 @function_fc1c()
  %v1_10d7c = trunc i32 %v0_10d7c to i8
  store i32 %v0_10d7c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1eafc.85 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1ea84.183 to i32), i32* %r1.global-to-local, align 4
  %v2_10d88 = load i32, i32* @global_var_1eafc.85, align 4
  store i32 %v2_10d88, i32* %r2.global-to-local, align 4
  %v2_10d8c = and i32 %v0_10d7c, 128
  %v3_10d8c = icmp ne i32 %v2_10d8c, 0
  store i1 %v3_10d8c, i1* %cpsr_c.global-to-local, align 1
  %v4_10d8c = sdiv i32 %v0_10d7c, 256
  store i32 %v4_10d8c, i32* %r3.global-to-local, align 4
  %v1_10d90 = trunc i32 %v4_10d8c to i8
  store i8 %v1_10d90, i8* bitcast (i32* @global_var_1ea89.190 to i8*), align 4
  store i32 %v2_10d88, i32* @global_var_1ea90.309, align 4
  store i8 %v1_10d7c, i8* bitcast (i32* @global_var_1ea88.194 to i8*), align 4
  br label %dec_label_pc_10d9c

dec_label_pc_10d9c:                               ; preds = %dec_label_pc_10e70, %dec_label_pc_10dcc, %dec_label_pc_10ea4, %dec_label_pc_10e98, %dec_label_pc_10e8c, %dec_label_pc_10e80, %.thread32, %bb296, %bb295, %bb294, %bb293, %bb292, %dec_label_pc_10e68, %dec_label_pc_10e60, %bb288, %dec_label_pc_10e30, %dec_label_pc_10e0c, %bb281, %dec_label_pc_10ddc, %bb280, %dec_label_pc_10dc4, %bb279, %bb298, %dec_label_pc_10d6c
  %v0_10d9c = call i32 @function_fc1c()
  store i32 %v0_10d9c, i32* %r0.global-to-local, align 4
  %v1_10da0 = urem i32 %v0_10d9c, 256
  store i32 %v1_10da0, i32* %r1.global-to-local, align 4
  %v3_10da4 = udiv i32 %v0_10d9c, 256
  store i32 %v3_10da4, i32* %r3.global-to-local, align 4
  %v3_10da8 = udiv i32 %v0_10d9c, 65536
  store i32 %v3_10da8, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10dac = icmp eq i32 %v1_10da0, 0
  store i1 %v2_10dac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10dac, label %bb279, label %bb278

bb278:                                            ; preds = %dec_label_pc_10d9c
  %v3_10db0 = icmp ugt i32 %v1_10da0, 126
  store i1 %v3_10db0, i1* %cpsr_c.global-to-local, align 1
  %v8_10db0 = icmp eq i32 %v1_10da0, 127
  store i1 %v8_10db0, i1* %cpsr_z.global-to-local, align 1
  br label %bb279

bb279:                                            ; preds = %dec_label_pc_10d9c, %bb278
  %v0_10dc0 = phi i1 [ true, %dec_label_pc_10d9c ], [ %v8_10db0, %bb278 ]
  %v1_10db4 = urem i32 %v3_10da4, 256
  store i32 %v1_10db4, i32* %ip.global-to-local, align 4
  %v1_10db8 = urem i32 %v3_10da8, 256
  store i32 %v1_10db8, i32* %r2.global-to-local, align 4
  %v1_10dbc = and i32 %v0_10d9c, 8388608
  %v2_10dbc = icmp ne i32 %v1_10dbc, 0
  store i1 %v2_10dbc, i1* %cpsr_c.global-to-local, align 1
  %v3_10dbc = udiv i32 %v0_10d9c, 16777216
  store i32 %v3_10dbc, i32* %r0.global-to-local, align 4
  br i1 %v0_10dc0, label %dec_label_pc_10d9c, label %dec_label_pc_10dc4

dec_label_pc_10dc4:                               ; preds = %bb279
  %v2_10dc4 = icmp ugt i32 %v1_10da0, 2
  store i1 %v2_10dc4, i1* %cpsr_c.global-to-local, align 1
  %v7_10dc4 = icmp eq i32 %v1_10da0, 3
  store i1 %v7_10dc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10dc4, label %dec_label_pc_10d9c, label %dec_label_pc_10dcc

dec_label_pc_10dcc:                               ; preds = %dec_label_pc_10dc4
  %v1_10dcc = add nsw i32 %v1_10da0, -15
  store i32 %v1_10dcc, i32* %r3.global-to-local, align 4
  %v2_10dd0 = icmp ugt i32 %v1_10da0, 55
  store i1 %v2_10dd0, i1* %cpsr_c.global-to-local, align 1
  %v7_10dd0 = icmp eq i32 %v1_10da0, 56
  store i1 %v7_10dd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10dd0, label %dec_label_pc_10d9c, label %bb280

bb280:                                            ; preds = %dec_label_pc_10dcc
  %v3_10dd4 = icmp ne i32 %v1_10dcc, 0
  store i1 %v3_10dd4, i1* %cpsr_c.global-to-local, align 1
  %v8_10dd4 = icmp eq i32 %v1_10dcc, 1
  store i1 %v8_10dd4, i1* %cpsr_z.global-to-local, align 1
  %v2_10dd8 = xor i1 %v3_10dd4, true
  %v3_10dd8 = or i1 %v8_10dd4, %v2_10dd8
  br i1 %v3_10dd8, label %dec_label_pc_10d9c, label %dec_label_pc_10ddc

dec_label_pc_10ddc:                               ; preds = %bb280
  %v2_10ddc = icmp ugt i32 %v1_10da0, 9
  store i1 %v2_10ddc, i1* %cpsr_c.global-to-local, align 1
  %v7_10ddc = icmp eq i32 %v1_10da0, 10
  store i1 %v7_10ddc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ddc, label %dec_label_pc_10d9c, label %dec_label_pc_10de4

dec_label_pc_10de4:                               ; preds = %dec_label_pc_10ddc
  %v2_10de4 = icmp ugt i32 %v1_10da0, 191
  store i1 %v2_10de4, i1* %cpsr_c.global-to-local, align 1
  %v7_10de4 = icmp eq i32 %v1_10da0, 192
  store i1 %v7_10de4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10de4, label %bb281, label %dec_label_pc_10df0

bb281:                                            ; preds = %dec_label_pc_10de4
  %v3_10de8 = icmp ugt i32 %v1_10db4, 167
  store i1 %v3_10de8, i1* %cpsr_c.global-to-local, align 1
  %v8_10de8 = icmp eq i32 %v1_10db4, 168
  store i1 %v8_10de8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10de8, label %dec_label_pc_10d9c, label %dec_label_pc_10df0

dec_label_pc_10df0:                               ; preds = %dec_label_pc_10de4, %bb281
  %v7_10df0 = icmp eq i32 %v1_10da0, 172
  %.347 = zext i1 %v7_10df0 to i32
  store i32 %.347, i32* %r3.global-to-local, align 4
  %v2_10dfc = icmp ugt i32 %v1_10db4, 14
  store i1 %v2_10dfc, i1* %cpsr_c.global-to-local, align 1
  %v7_10dfc = icmp eq i32 %v1_10db4, 15
  store i1 %v7_10dfc, i1* %cpsr_z.global-to-local, align 1
  %v2_10e00 = xor i1 %v2_10dfc, true
  %v3_10e00 = or i1 %v7_10dfc, %v2_10e00
  br i1 %v3_10e00, label %.thread10, label %bb284

.thread10:                                        ; preds = %dec_label_pc_10df0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10e14

bb284:                                            ; preds = %dec_label_pc_10df0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e04 = icmp eq i1 %v7_10df0, false
  store i1 %v2_10e04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e04, label %dec_label_pc_10e14, label %dec_label_pc_10e0c

dec_label_pc_10e0c:                               ; preds = %bb284
  %v2_10e0c = icmp ugt i32 %v1_10db4, 30
  store i1 %v2_10e0c, i1* %cpsr_c.global-to-local, align 1
  %v7_10e0c = icmp eq i32 %v1_10db4, 31
  store i1 %v7_10e0c, i1* %cpsr_z.global-to-local, align 1
  %v2_10e10 = xor i1 %v2_10e0c, true
  %v3_10e10 = or i1 %v7_10e0c, %v2_10e10
  br i1 %v3_10e10, label %dec_label_pc_10d9c, label %dec_label_pc_10e14

dec_label_pc_10e14:                               ; preds = %.thread10, %dec_label_pc_10e0c, %bb284
  %v7_10e14 = icmp eq i32 %v1_10da0, 100
  %.348 = zext i1 %v7_10e14 to i32
  store i32 %.348, i32* %r3.global-to-local, align 4
  %v2_10e20 = icmp ugt i32 %v1_10db4, 62
  store i1 %v2_10e20, i1* %cpsr_c.global-to-local, align 1
  %v7_10e20 = icmp eq i32 %v1_10db4, 63
  store i1 %v7_10e20, i1* %cpsr_z.global-to-local, align 1
  %v2_10e24 = xor i1 %v2_10e20, true
  %v3_10e24 = or i1 %v7_10e20, %v2_10e24
  br i1 %v3_10e24, label %.thread15, label %bb287

.thread15:                                        ; preds = %dec_label_pc_10e14
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10e38

bb287:                                            ; preds = %dec_label_pc_10e14
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e28 = icmp eq i1 %v7_10e14, false
  store i1 %v2_10e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e28, label %dec_label_pc_10e38, label %dec_label_pc_10e30

dec_label_pc_10e30:                               ; preds = %bb287
  %v2_10e30 = icmp ugt i32 %v1_10db4, 125
  store i1 %v2_10e30, i1* %cpsr_c.global-to-local, align 1
  %v7_10e30 = icmp eq i32 %v1_10db4, 126
  store i1 %v7_10e30, i1* %cpsr_z.global-to-local, align 1
  %v2_10e34 = xor i1 %v2_10e30, true
  %v3_10e34 = or i1 %v7_10e30, %v2_10e34
  br i1 %v3_10e34, label %dec_label_pc_10d9c, label %dec_label_pc_10e38

dec_label_pc_10e38:                               ; preds = %.thread15, %dec_label_pc_10e30, %bb287
  %v2_10e38 = icmp ugt i32 %v1_10da0, 168
  store i1 %v2_10e38, i1* %cpsr_c.global-to-local, align 1
  %v7_10e38 = icmp eq i32 %v1_10da0, 169
  store i1 %v7_10e38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e38, label %bb288, label %dec_label_pc_10e44

bb288:                                            ; preds = %dec_label_pc_10e38
  %v3_10e3c = icmp eq i32 %v1_10db4, 255
  store i1 %v3_10e3c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10e3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10e3c, label %dec_label_pc_10d9c, label %dec_label_pc_10e44

dec_label_pc_10e44:                               ; preds = %dec_label_pc_10e38, %bb288
  %v7_10e44 = icmp eq i32 %v1_10da0, 198
  %.349 = zext i1 %v7_10e44 to i32
  store i32 %.349, i32* %r3.global-to-local, align 4
  %v2_10e50 = icmp ugt i32 %v1_10db4, 16
  store i1 %v2_10e50, i1* %cpsr_c.global-to-local, align 1
  %v7_10e50 = icmp eq i32 %v1_10db4, 17
  store i1 %v7_10e50, i1* %cpsr_z.global-to-local, align 1
  %v2_10e54 = xor i1 %v2_10e50, true
  %v3_10e54 = or i1 %v7_10e50, %v2_10e54
  br i1 %v3_10e54, label %.thread21, label %bb291

.thread21:                                        ; preds = %dec_label_pc_10e44
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10e68

bb291:                                            ; preds = %dec_label_pc_10e44
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e58 = icmp eq i1 %v7_10e44, false
  store i1 %v2_10e58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10e58, label %dec_label_pc_10e68, label %dec_label_pc_10e60

dec_label_pc_10e60:                               ; preds = %bb291
  %v2_10e60 = icmp ugt i32 %v1_10db4, 18
  store i1 %v2_10e60, i1* %cpsr_c.global-to-local, align 1
  %v7_10e60 = icmp eq i32 %v1_10db4, 19
  store i1 %v7_10e60, i1* %cpsr_z.global-to-local, align 1
  %v2_10e64 = xor i1 %v2_10e60, true
  %v3_10e64 = or i1 %v7_10e60, %v2_10e64
  br i1 %v3_10e64, label %dec_label_pc_10d9c, label %dec_label_pc_10e68

dec_label_pc_10e68:                               ; preds = %.thread21, %dec_label_pc_10e60, %bb291
  %v2_10e68 = icmp ugt i32 %v1_10da0, 222
  store i1 %v2_10e68, i1* %cpsr_c.global-to-local, align 1
  %v7_10e68 = icmp eq i32 %v1_10da0, 223
  store i1 %v7_10e68, i1* %cpsr_z.global-to-local, align 1
  %v2_10e6c = xor i1 %v7_10e68, true
  %v3_10e6c = and i1 %v2_10e68, %v2_10e6c
  br i1 %v3_10e6c, label %dec_label_pc_10d9c, label %dec_label_pc_10e70

dec_label_pc_10e70:                               ; preds = %dec_label_pc_10e68
  %v1_10e70 = add nsw i32 %v1_10da0, -6
  store i32 %v1_10e70, i32* %r3.global-to-local, align 4
  %v2_10e74 = icmp ugt i32 %v1_10da0, 10
  store i1 %v2_10e74, i1* %cpsr_c.global-to-local, align 1
  %v7_10e74 = icmp eq i32 %v1_10da0, 11
  store i1 %v7_10e74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e74, label %dec_label_pc_10d9c, label %bb292

bb292:                                            ; preds = %dec_label_pc_10e70
  %v3_10e78 = icmp ne i32 %v1_10e70, 0
  store i1 %v3_10e78, i1* %cpsr_c.global-to-local, align 1
  %v8_10e78 = icmp eq i32 %v1_10e70, 1
  store i1 %v8_10e78, i1* %cpsr_z.global-to-local, align 1
  %v2_10e7c = xor i1 %v3_10e78, true
  %v3_10e7c = or i1 %v8_10e78, %v2_10e7c
  br i1 %v3_10e7c, label %dec_label_pc_10d9c, label %dec_label_pc_10e80

dec_label_pc_10e80:                               ; preds = %bb292
  %v2_10e80 = icmp ugt i32 %v1_10da0, 21
  store i1 %v2_10e80, i1* %cpsr_c.global-to-local, align 1
  %v7_10e80 = icmp eq i32 %v1_10da0, 22
  store i1 %v7_10e80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e80, label %dec_label_pc_10d9c, label %bb293

bb293:                                            ; preds = %dec_label_pc_10e80
  %v3_10e84 = icmp ugt i32 %v1_10da0, 20
  store i1 %v3_10e84, i1* %cpsr_c.global-to-local, align 1
  %v8_10e84 = icmp eq i32 %v1_10da0, 21
  store i1 %v8_10e84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10e84, label %dec_label_pc_10d9c, label %dec_label_pc_10e8c

dec_label_pc_10e8c:                               ; preds = %bb293
  %v2_10e8c = icmp ugt i32 %v1_10da0, 27
  store i1 %v2_10e8c, i1* %cpsr_c.global-to-local, align 1
  %v7_10e8c = icmp eq i32 %v1_10da0, 28
  store i1 %v7_10e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e8c, label %dec_label_pc_10d9c, label %bb294

bb294:                                            ; preds = %dec_label_pc_10e8c
  %v3_10e90 = icmp ugt i32 %v1_10da0, 25
  store i1 %v3_10e90, i1* %cpsr_c.global-to-local, align 1
  %v8_10e90 = icmp eq i32 %v1_10da0, 26
  store i1 %v8_10e90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10e90, label %dec_label_pc_10d9c, label %dec_label_pc_10e98

dec_label_pc_10e98:                               ; preds = %bb294
  %v2_10e98 = icmp ugt i32 %v1_10da0, 29
  store i1 %v2_10e98, i1* %cpsr_c.global-to-local, align 1
  %v7_10e98 = icmp eq i32 %v1_10da0, 30
  store i1 %v7_10e98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e98, label %dec_label_pc_10d9c, label %bb295

bb295:                                            ; preds = %dec_label_pc_10e98
  %v3_10e9c = icmp ugt i32 %v1_10da0, 28
  store i1 %v3_10e9c, i1* %cpsr_c.global-to-local, align 1
  %v8_10e9c = icmp eq i32 %v1_10da0, 29
  store i1 %v8_10e9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10e9c, label %dec_label_pc_10d9c, label %dec_label_pc_10ea4

dec_label_pc_10ea4:                               ; preds = %bb295
  %v2_10ea4 = icmp ugt i32 %v1_10da0, 54
  store i1 %v2_10ea4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ea4 = icmp eq i32 %v1_10da0, 55
  store i1 %v7_10ea4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ea4, label %dec_label_pc_10d9c, label %bb296

bb296:                                            ; preds = %dec_label_pc_10ea4
  %v3_10ea8 = icmp ugt i32 %v1_10da0, 32
  store i1 %v3_10ea8, i1* %cpsr_c.global-to-local, align 1
  %v8_10ea8 = icmp eq i32 %v1_10da0, 33
  store i1 %v8_10ea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10ea8, label %dec_label_pc_10d9c, label %dec_label_pc_10eb0

dec_label_pc_10eb0:                               ; preds = %bb296
  %v2_10eb0 = icmp ugt i32 %v1_10da0, 214
  store i1 %v2_10eb0, i1* %cpsr_c.global-to-local, align 1
  %v7_10eb0 = icmp eq i32 %v1_10da0, 215
  store i1 %v7_10eb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10eb0, label %.thread32, label %bb297

bb297:                                            ; preds = %dec_label_pc_10eb0
  %v3_10eb4 = icmp ugt i32 %v1_10da0, 213
  store i1 %v3_10eb4, i1* %cpsr_c.global-to-local, align 1
  %v8_10eb4 = icmp eq i32 %v1_10da0, 214
  store i1 %v8_10eb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10eb4, label %bb298, label %dec_label_pc_10ec4

.thread32:                                        ; preds = %dec_label_pc_10eb0
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10d9c

bb298:                                            ; preds = %bb297
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10d9c

dec_label_pc_10ec4:                               ; preds = %bb297
  store i32 0, i32* @r4, align 4
  %v5_10ed0 = call i32 @llvm.bswap.i32(i32 %v0_10d9c)
  store i32 %v5_10ed0, i32* %r3.global-to-local, align 4
  %tmp299 = and i32 %v0_10d9c, 65280
  %tmp300 = call i32 @llvm.bswap.i32(i32 %tmp299)
  %tmp301 = and i32 %v0_10d9c, 16711680
  %tmp302 = call i32 @llvm.bswap.i32(i32 %tmp301)
  %v3_10edc = mul nuw i32 %v3_10dbc, 16777216
  %v3_10ee0 = udiv i32 %tmp300, 256
  %v4_10ee4 = mul nuw nsw i32 %tmp302, 256
  %tmp303 = and i32 %v0_10d9c, 32768
  %v3_10ee8 = icmp ne i32 %tmp303, 0
  store i1 %v3_10ee8, i1* %cpsr_c.global-to-local, align 1
  %v4_10ee8 = udiv i32 %v5_10ed0, 16777216
  store i32 ptrtoint (i8** @global_var_1ea84.183 to i32), i32* @r0, align 4
  %v5_10ee8 = or i32 %v4_10ee8, %v3_10edc
  %v5_10ee4 = or i32 %v5_10ee8, %v4_10ee4
  %v2_10ef0 = or i32 %v5_10ee4, %v3_10ee0
  store i32 %v2_10ef0, i32* %r2.global-to-local, align 4
  %v5_10ef4 = trunc i32 %v4_10ee8 to i8
  store i8 %v5_10ef4, i8* @global_var_1ea94.310, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1ea8e.311 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1ea8f.312 to i8*), align 4
  %v3_10f04 = call i32 @function_e444(i32 ptrtoint (i8** @global_var_1ea84.183 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1ea84.183 to i32), i32* %ip.global-to-local, align 4
  %sext6 = mul i32 %v3_10f04, 16777216
  %v1_10f0c = sdiv i32 %sext6, 16777216
  store i32 %v1_10f0c, i32* %r3.global-to-local, align 4
  %v2_10f10 = and i32 %v1_10f0c, 128
  %v3_10f10 = icmp ne i32 %v2_10f10, 0
  store i1 %v3_10f10, i1* %cpsr_c.global-to-local, align 1
  %v4_10f10 = ashr i32 %sext6, 31
  store i32 %v4_10f10, i32* %r2.global-to-local, align 4
  %v1_10f14 = trunc i32 %v1_10f0c to i8
  store i8 %v1_10f14, i8* bitcast (i32* @global_var_1ea8e.311 to i8*), align 4
  %v1_10f18 = trunc i32 %v4_10f10 to i8
  store i8 %v1_10f18, i8* bitcast (i32* @global_var_1ea8f.312 to i8*), align 4
  %v3_10f1c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_10f1c, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_10f24 = call i32 @function_132d8(i32 %v3_10f1c, i32 10, i32 %v4_10f10, i32 %v1_10f0c)
  store i32 %v4_10f24, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10f28 = icmp eq i32 %v4_10f24, 0
  store i1 %v2_10f28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10f28, label %.thread198, label %bb304

.thread198:                                       ; preds = %dec_label_pc_10ec4
  store i32 ptrtoint (i32* @global_var_1ea98.187 to i32), i32* @lr, align 4
  br label %.thread42.thread73

bb304:                                            ; preds = %dec_label_pc_10ec4
  store i32 ptrtoint (i32* @global_var_1ea98.187 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_10f38 = load i32, i32* @r4, align 4
  %v2_10f38 = trunc i32 %v1_10f38 to i8
  store i8 %v2_10f38, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1ea98.187 to i32), i32 2) to i8*), align 2
  %v0_10f3c.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10f3c.pr.pre, label %.thread42.thread73, label %.thread39

.thread39:                                        ; preds = %bb304
  %v1_10f3c = load i32, i32* %r3.global-to-local, align 4
  %v2_10f3c = trunc i32 %v1_10f3c to i8
  %v3_10f3c = load i32, i32* %r0.global-to-local, align 4
  %v4_10f3c = add i32 %v3_10f3c, 3
  %v5_10f3c = inttoptr i32 %v4_10f3c to i8*
  store i8 %v2_10f3c, i8* %v5_10f3c, align 1
  %v0_10f44.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1ea84.183 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_10f44.pr.pr, label %.thread45, label %.thread47

.thread42.thread73:                               ; preds = %bb304, %.thread198
  store i32 ptrtoint (i8** @global_var_1ea84.183 to i32), i32* %r0.global-to-local, align 4
  br label %.thread45

.thread45:                                        ; preds = %.thread39, %.thread42.thread73
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_10f4c = load i32, i32* @lr, align 4
  %v4_10f4c = add i32 %v3_10f4c, 2
  %v5_10f4c = inttoptr i32 %v4_10f4c to i8*
  store i8 9, i8* %v5_10f4c, align 1
  %v0_10f50.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10f50.pr.pr, label %bb305, label %.thread47

bb305:                                            ; preds = %.thread45
  %v1_10f50 = load i32, i32* %r2.global-to-local, align 4
  %v2_10f50 = trunc i32 %v1_10f50 to i8
  %v3_10f50 = load i32, i32* @lr, align 4
  %v4_10f50 = add i32 %v3_10f50, 3
  %v5_10f50 = inttoptr i32 %v4_10f50 to i8*
  store i8 %v2_10f50, i8* %v5_10f50, align 1
  br label %.thread47

.thread47:                                        ; preds = %.thread39, %.thread45, %bb305
  %v4_10f54 = load i8, i8* @global_var_1ea94.310, align 1
  %v5_10f54 = sext i8 %v4_10f54 to i32
  store i32 %v5_10f54, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea98.187 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea98.187 to i32), i32* @r1, align 4
  store i8 %v4_10f54, i8* @global_var_1ea9c.313, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_10f6c = load i32, i32* %sl.global-to-local, align 4
  %v1_10f6c = trunc i32 %v0_10f6c to i8
  store i8 %v1_10f6c, i8* bitcast (i32* @global_var_1eaa8.314 to i8*), align 4
  store i8 %v1_10f6c, i8* bitcast (i32* @global_var_1eaa9.315 to i8*), align 4
  %v5_10f74 = call i32 @function_e4a0(i32 ptrtoint (i8** @global_var_1ea84.183 to i32), i32 ptrtoint (i32* @global_var_1ea98.187 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_10f74, 16777216
  %v1_10f7c = sdiv i32 %sext, 16777216
  %v3_10f84 = ashr i32 %sext, 31
  %v2_10f88 = load i32, i32* @global_var_1ea98.187, align 4
  %v1_10f90 = trunc i32 %v3_10f84 to i8
  store i8 %v1_10f90, i8* bitcast (i32* @global_var_1eaa9.315 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_10fa4 = load i8, i8* @global_var_1ea94.310, align 1
  %v4_10fa4 = sext i8 %v3_10fa4 to i32
  store i32 %v4_10fa4, i32* @r4, align 4
  %v2_10fa8 = load i32, i32* @global_var_1eb1c.181, align 4
  store i32 %v2_10fa8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ea98.187 to i32), i32* %ip.global-to-local, align 4
  %v1_10fb8 = and i32 %v2_10f88, 8388608
  %v2_10fb8 = icmp ne i32 %v1_10fb8, 0
  store i1 %v2_10fb8, i1* %cpsr_c.global-to-local, align 1
  %v1_10fc0 = trunc i32 %v1_10f7c to i8
  store i8 %v1_10fc0, i8* bitcast (i32* @global_var_1eaa8.314 to i8*), align 4
  store i32 ptrtoint (i8** @global_var_1ea84.183 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_10fd4, i32* %lr.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v8_10fe8 = call i32 @function_13d4c(i32 %v2_10fa8, i32* bitcast (i8** @global_var_1ea84.183 to i32*), i32 40, i32 16384, i32 %v2_10fd4, i32 16)
  store i32 %v8_10fe8, i32* %r0.global-to-local, align 4
  %v3_10fec = load i32, i32* %stack_var_-52, align 4
  %v1_10ff0 = add i32 %v3_10fec, 1
  store i32 %v1_10ff0, i32* %r3.global-to-local, align 4
  %v3_10ff4 = icmp ugt i32 %v1_10ff0, 319
  store i1 %v3_10ff4, i1* %cpsr_c.global-to-local, align 1
  %v8_10ff4 = icmp eq i32 %v1_10ff0, 320
  store i1 %v8_10ff4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_10ff0, i32* %stack_var_-52, align 4
  %v5_10ffc = icmp slt i32 %v1_10ff0, 320
  br i1 %v5_10ffc, label %.thread47.dec_label_pc_10d6c_crit_edge, label %dec_label_pc_11000

.thread47.dec_label_pc_10d6c_crit_edge:           ; preds = %.thread47
  %v0_10d6c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_10d6c

dec_label_pc_11000:                               ; preds = %.thread47
  %v0_11000 = load i32, i32* @r8, align 4
  br label %dec_label_pc_11004

dec_label_pc_11004:                               ; preds = %dec_label_pc_10d4c, %dec_label_pc_11000
  %stack_var_-1872.1 = phi i32 [ %stack_var_-1872.0, %dec_label_pc_10d4c ], [ %v0_11000, %dec_label_pc_11000 ]
  %v0_11004 = call i32 @function_13a84()
  store i32 %v0_11004, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_11018 = inttoptr i32 %v0_11004 to i32*
  %v6_11040 = inttoptr i32 %v0_1107c to i32*
  %v1_1106c = add i32 %v0_1107c, 16
  %v2_1106c = inttoptr i32 %v1_1106c to i32*
  %v4_11088 = ptrtoint i8* %stack_var_-1884.0 to i32
  %v1_11090 = add i32 %v4_11088, 1
  %v2_11090 = inttoptr i32 %v1_11090 to i8*
  %v1_110b4 = add i32 %v4_11088, 2
  %v2_110b4 = inttoptr i32 %v1_110b4 to i8*
  %v1_110b8 = add i32 %v4_11088, 3
  %v2_110b8 = inttoptr i32 %v1_110b8 to i8*
  %v4_110bc = sext i8 %stack_var_-1876.0 to i32
  %v1_11198 = bitcast i8* %stack_var_-1884.0 to i32*
  %v1_1107c = add i32 %v0_1107c, 9
  %v2_1107c = inttoptr i32 %v1_1107c to i8*
  %v1_110cc = add i32 %v4_11088, 13
  %v2_110cc = inttoptr i32 %v1_110cc to i8*
  %v1_110f0 = add i32 %v4_11088, 8
  %v2_110f0 = inttoptr i32 %v1_110f0 to i32*
  %v1_11130 = add i32 %v0_1107c, 12
  %v2_11130 = inttoptr i32 %v1_11130 to i32*
  br label %dec_label_pc_11010

dec_label_pc_11010:                               ; preds = %dec_label_pc_110f0, %dec_label_pc_110e8, %dec_label_pc_110e0, %dec_label_pc_110b0, %dec_label_pc_110a0, %dec_label_pc_1107c, %dec_label_pc_11064, %dec_label_pc_110d8, %dec_label_pc_110cc, %dec_label_pc_1105c, %dec_label_pc_11190, %dec_label_pc_11004
  store i32 0, i32* %v2_11018, align 4
  %v2_11020 = load i32, i32* @global_var_1eb1c.181, align 4
  store i32 %v2_11020, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_1107c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_11040 = call i32 @function_13cec(i32 %v2_11020, i32* %v6_11040, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_11040, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11044 = icmp eq i32 %v7_11040, 0
  store i1 %v2_11044, i1* %cpsr_z.global-to-local, align 1
  %tmp306 = icmp slt i32 %v7_11040, 1
  br i1 %tmp306, label %dec_label_pc_111c4, label %dec_label_pc_1104c

dec_label_pc_1104c:                               ; preds = %dec_label_pc_11010
  store i32 %v0_11004, i32* %lr.global-to-local, align 4
  %v2_11050 = load i32, i32* %v2_11018, align 4
  store i32 %v2_11050, i32* %r3.global-to-local, align 4
  %v2_11054 = icmp ugt i32 %v2_11050, 10
  store i1 %v2_11054, i1* %cpsr_c.global-to-local, align 1
  %v7_11054 = icmp eq i32 %v2_11050, 11
  store i1 %v7_11054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11054, label %dec_label_pc_111c4, label %dec_label_pc_1105c

dec_label_pc_1105c:                               ; preds = %dec_label_pc_1104c
  %v2_1105c = icmp ugt i32 %v7_11040, 38
  store i1 %v2_1105c, i1* %cpsr_c.global-to-local, align 1
  %v7_1105c = icmp eq i32 %v7_11040, 39
  store i1 %v7_1105c, i1* %cpsr_z.global-to-local, align 1
  %v2_11060 = xor i1 %v2_1105c, true
  %v3_11060 = or i1 %v7_1105c, %v2_11060
  br i1 %v3_11060, label %dec_label_pc_11010, label %dec_label_pc_11064

dec_label_pc_11064:                               ; preds = %dec_label_pc_1105c
  store i32 %v0_1107c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1eafc.85 to i32), i32* %r1.global-to-local, align 4
  %v3_1106c = load i32, i32* %v2_1106c, align 4
  store i32 %v3_1106c, i32* %r2.global-to-local, align 4
  %v2_11070 = load i32, i32* @global_var_1eafc.85, align 4
  store i32 %v2_11070, i32* %r3.global-to-local, align 4
  %v3_11074 = icmp uge i32 %v3_1106c, %v2_11070
  store i1 %v3_11074, i1* %cpsr_c.global-to-local, align 1
  %v9_11074 = icmp eq i32 %v3_1106c, %v2_11070
  store i1 %v9_11074, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11074, label %dec_label_pc_1107c, label %dec_label_pc_11010

dec_label_pc_1107c:                               ; preds = %dec_label_pc_11064
  %v3_1107c = load i8, i8* %v2_1107c, align 1
  %v4_1107c = zext i8 %v3_1107c to i32
  store i32 %v4_1107c, i32* %r3.global-to-local, align 4
  %v2_11080 = icmp ugt i8 %v3_1107c, 5
  store i1 %v2_11080, i1* %cpsr_c.global-to-local, align 1
  %v7_11080 = icmp eq i8 %v3_1107c, 6
  store i1 %v7_11080, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11080, label %dec_label_pc_11088, label %dec_label_pc_11010

dec_label_pc_11088:                               ; preds = %dec_label_pc_1107c
  store i32 %v4_11088, i32* %r3.global-to-local, align 4
  %v2_1108c = load i8, i8* %stack_var_-1884.0, align 1
  %v3_1108c = zext i8 %v2_1108c to i32
  store i32 %v3_1108c, i32* %r2.global-to-local, align 4
  %v3_11090 = load i8, i8* %v2_11090, align 1
  %v4_11090 = zext i8 %v3_11090 to i32
  store i32 %v4_11090, i32* %r3.global-to-local, align 4
  %v4_11094 = mul nuw nsw i32 %v4_11090, 256
  %v5_11094 = or i32 %v4_11094, %v3_1108c
  store i32 %v5_11094, i32* %r2.global-to-local, align 4
  %v2_11098 = icmp ugt i32 %v5_11094, 5887
  store i1 %v2_11098, i1* %cpsr_c.global-to-local, align 1
  %v7_11098 = icmp eq i32 %v5_11094, 5888
  store i1 %v7_11098, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11098, label %dec_label_pc_110b0, label %dec_label_pc_110a0

dec_label_pc_110a0:                               ; preds = %dec_label_pc_11088
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_110a8 = icmp ugt i32 %v5_11094, 4872
  store i1 %v3_110a8, i1* %cpsr_c.global-to-local, align 1
  %v9_110a8 = icmp eq i32 %v5_11094, 4873
  store i1 %v9_110a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_110a8, label %dec_label_pc_110b0, label %dec_label_pc_11010

dec_label_pc_110b0:                               ; preds = %dec_label_pc_110a0, %dec_label_pc_11088
  store i32 %v4_11088, i32* %ip.global-to-local, align 4
  %v3_110b4 = load i8, i8* %v2_110b4, align 1
  %v4_110b4 = zext i8 %v3_110b4 to i32
  store i32 %v4_110b4, i32* %r3.global-to-local, align 4
  %v3_110b8 = load i8, i8* %v2_110b8, align 1
  %v4_110b8 = zext i8 %v3_110b8 to i32
  store i32 %v4_110b8, i32* %r2.global-to-local, align 4
  store i32 %v4_110bc, i32* %lr.global-to-local, align 4
  %v4_110c0 = mul nuw nsw i32 %v4_110b8, 256
  %v5_110c0 = or i32 %v4_110c0, %v4_110b4
  store i32 %v5_110c0, i32* %r3.global-to-local, align 4
  %v3_110c4 = icmp uge i32 %v5_110c0, %v4_110bc
  store i1 %v3_110c4, i1* %cpsr_c.global-to-local, align 1
  %v9_110c4 = icmp eq i32 %v5_110c0, %v4_110bc
  store i1 %v9_110c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_110c4, label %dec_label_pc_110cc, label %dec_label_pc_11010

dec_label_pc_110cc:                               ; preds = %dec_label_pc_110b0
  %v3_110cc = load i8, i8* %v2_110cc, align 1
  %v4_110cc = zext i8 %v3_110cc to i32
  store i32 %v4_110cc, i32* %r3.global-to-local, align 4
  %v1_110d0 = and i32 %v4_110cc, 2
  %v2_110d0 = icmp eq i32 %v1_110d0, 0
  store i1 %v2_110d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_110d0, label %dec_label_pc_11010, label %dec_label_pc_110d8

dec_label_pc_110d8:                               ; preds = %dec_label_pc_110cc
  %v1_110d8 = and i32 %v4_110cc, 16
  %v2_110d8 = icmp eq i32 %v1_110d8, 0
  store i1 %v2_110d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_110d8, label %dec_label_pc_11010, label %dec_label_pc_110e0

dec_label_pc_110e0:                               ; preds = %dec_label_pc_110d8
  %v1_110e0 = and i32 %v4_110cc, 4
  %v2_110e0 = icmp eq i32 %v1_110e0, 0
  store i1 %v2_110e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_110e0, label %dec_label_pc_110e8, label %dec_label_pc_11010

dec_label_pc_110e8:                               ; preds = %dec_label_pc_110e0
  %tmp450 = urem i8 %v3_110cc, 2
  %v2_110e8 = icmp eq i8 %tmp450, 0
  store i1 %v2_110e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_110e8, label %dec_label_pc_110f0, label %dec_label_pc_11010

dec_label_pc_110f0:                               ; preds = %dec_label_pc_110e8
  %v3_110f0 = load i32, i32* %v2_110f0, align 4
  %v2_1110c = call i32 @llvm.bswap.i32(i32 %v3_110f0)
  %v1_11110 = add i32 %v2_1110c, -1
  %v1_11114 = udiv i32 %v1_11110, 256
  %v3_11118 = and i32 %v1_11114, 65280
  %v1_1111c = and i32 %v1_11110, 65280
  store i32 %v1_1111c, i32* %r2.global-to-local, align 4
  %v3_11120 = mul i32 %v1_11110, 16777216
  %v4_11124 = udiv i32 %v1_11110, 16777216
  %v5_11124 = or i32 %v3_11118, %v4_11124
  store i32 %v5_11124, i32* %r1.global-to-local, align 4
  store i32 %v0_1107c, i32* %r3.global-to-local, align 4
  %v4_1112c = mul nuw nsw i32 %v1_1111c, 256
  %v5_1112c = or i32 %v4_1112c, %v3_11120
  store i32 %v5_1112c, i32* %r0.global-to-local, align 4
  %v3_11130 = load i32, i32* %v2_11130, align 4
  store i32 %v3_11130, i32* %r2.global-to-local, align 4
  %v2_11134 = call i32 @llvm.bswap.i32(i32 %v1_11110)
  store i32 %v2_11134, i32* %ip.global-to-local, align 4
  %v3_11138 = icmp uge i32 %v2_11134, %v3_11130
  store i1 %v3_11138, i1* %cpsr_c.global-to-local, align 1
  %v9_11138 = icmp eq i32 %v2_11134, %v3_11130
  store i1 %v9_11138, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_11138, label %dec_label_pc_11140, label %dec_label_pc_11010

dec_label_pc_11140:                               ; preds = %dec_label_pc_110f0
  %v0_11140 = load i32, i32* @r4, align 4
  %v2_11140 = icmp ugt i32 %v0_11140, 254
  store i1 %v2_11140, i1* %cpsr_c.global-to-local, align 1
  %v7_11140 = icmp eq i32 %v0_11140, 255
  store i1 %v7_11140, i1* %cpsr_z.global-to-local, align 1
  %v8_11144 = icmp sgt i32 %v0_11140, 255
  br i1 %v8_11144, label %dec_label_pc_111c4, label %dec_label_pc_11148

dec_label_pc_11148:                               ; preds = %dec_label_pc_11140
  store i32 ptrtoint (i32* @global_var_1eb18.179 to i32), i32* %lr.global-to-local, align 4
  %v3_1114c = mul i32 %v0_11140, 512
  store i32 %v3_1114c, i32* %r2.global-to-local, align 4
  %v2_11150 = load i32, i32* @global_var_1eb18.179, align 4
  store i32 %v2_11150, i32* %r1.global-to-local, align 4
  %v2_11158 = mul i32 %v0_11140, 544
  store i32 %v2_11158, i32* %r3.global-to-local, align 4
  %v2_1115c = add i32 %v2_11150, %v2_11158
  store i32 %v2_1115c, i32* @r0, align 4
  %v1_11160 = add i32 %v2_1115c, 12
  %v2_11160 = inttoptr i32 %v1_11160 to i32*
  %v3_11160 = load i32, i32* %v2_11160, align 4
  store i32 %v3_11160, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11164 = icmp eq i32 %v3_11160, 0
  store i1 %v2_11164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11164, label %dec_label_pc_11190, label %dec_label_pc_11170.preheader

dec_label_pc_11170.preheader:                     ; preds = %dec_label_pc_11148
  %v2_11168 = add i32 %v2_1115c, 544
  store i32 %v2_11168, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11170

dec_label_pc_11170:                               ; preds = %dec_label_pc_11170.preheader, %dec_label_pc_1117c
  %v0_1117c = phi i32 [ %v2_11168, %dec_label_pc_11170.preheader ], [ %v1_11188, %dec_label_pc_1117c ]
  %v0_11170 = phi i32 [ %v0_11140, %dec_label_pc_11170.preheader ], [ %v1_11170, %dec_label_pc_1117c ]
  %v1_11170 = add i32 %v0_11170, 1
  store i32 %v1_11170, i32* @r4, align 4
  %v7_11174 = icmp eq i32 %v1_11170, 256
  br i1 %v7_11174, label %dec_label_pc_111c4.loopexit, label %dec_label_pc_1117c

dec_label_pc_1117c:                               ; preds = %dec_label_pc_11170
  store i32 %v0_1117c, i32* @r0, align 4
  %v1_11180 = add i32 %v0_1117c, 12
  %v2_11180 = inttoptr i32 %v1_11180 to i32*
  %v3_11180 = load i32, i32* %v2_11180, align 4
  %v2_11184 = icmp eq i32 %v3_11180, 0
  %v1_11188 = add i32 %v0_1117c, 544
  store i32 %v1_11188, i32* %r3.global-to-local, align 4
  br i1 %v2_11184, label %dec_label_pc_11190.loopexit, label %dec_label_pc_11170

dec_label_pc_11190.loopexit:                      ; preds = %dec_label_pc_1117c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11190

dec_label_pc_11190:                               ; preds = %dec_label_pc_11190.loopexit, %dec_label_pc_11148
  %v1_11190 = phi i32 [ %v0_1117c, %dec_label_pc_11190.loopexit ], [ %v2_1115c, %dec_label_pc_11148 ]
  %v2_11190 = add i32 %v1_11190, 16
  %v3_11190 = inttoptr i32 %v2_11190 to i32*
  store i32 %v3_11130, i32* %v3_11190, align 4
  store i32 %v4_11088, i32* %r1.global-to-local, align 4
  %v2_11198 = load i32, i32* %v1_11198, align 4
  store i32 %v2_11198, i32* %r2.global-to-local, align 4
  %v1_1119c = and i32 %v2_11198, 128
  %v2_1119c = icmp ne i32 %v1_1119c, 0
  store i1 %v2_1119c, i1* %cpsr_c.global-to-local, align 1
  %v3_1119c = sdiv i32 %v2_11198, 256
  store i32 %v3_1119c, i32* %r3.global-to-local, align 4
  %v1_111a0 = trunc i32 %v3_1119c to i8
  %v2_111a0 = load i32, i32* @r0, align 4
  %v3_111a0 = add i32 %v2_111a0, 21
  %v4_111a0 = inttoptr i32 %v3_111a0 to i8*
  store i8 %v1_111a0, i8* %v4_111a0, align 1
  %v0_111a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_111a4 = trunc i32 %v0_111a4 to i8
  %v2_111a4 = load i32, i32* @r0, align 4
  %v3_111a4 = add i32 %v2_111a4, 20
  %v4_111a4 = inttoptr i32 %v3_111a4 to i8*
  store i8 %v1_111a4, i8* %v4_111a4, align 1
  %v0_111a8 = call i32 @function_10460()
  store i32 %v0_111a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11010

dec_label_pc_111b0:                               ; preds = %dec_label_pc_107b4
  store i32 ptrtoint (i32* @global_var_1eb1c.181 to i32), i32* %r2.global-to-local, align 4
  %v2_111b4 = load i32, i32* @global_var_1eb1c.181, align 4
  store i32 %v2_111b4, i32* %r0.global-to-local, align 4
  %v1_111b8 = call i32 @function_134b0(i32 %v2_111b4)
  store i32 %v1_111b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_111bc

dec_label_pc_111bc:                               ; preds = %dec_label_pc_1078c, %dec_label_pc_111b0
  %v0_111bc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_111bc, i32* %r0.global-to-local, align 4
  %v1_111c0 = call i32 @function_14850(i32 %v0_111bc)
  store i32 %v1_111c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_111c4

dec_label_pc_111c4.loopexit:                      ; preds = %dec_label_pc_11170
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_111c4

dec_label_pc_111c4:                               ; preds = %dec_label_pc_11140, %dec_label_pc_1104c, %dec_label_pc_11010, %dec_label_pc_111c4.loopexit, %dec_label_pc_111bc
  %stack_var_-1868.0 = phi i32 [ %tmp232, %dec_label_pc_111bc ], [ %v0_11004, %dec_label_pc_111c4.loopexit ], [ %v0_11004, %dec_label_pc_11010 ], [ %v0_11004, %dec_label_pc_1104c ], [ %v0_11004, %dec_label_pc_11140 ]
  %stack_var_-1872.2 = phi i32 [ %tmp239, %dec_label_pc_111bc ], [ %stack_var_-1872.1, %dec_label_pc_111c4.loopexit ], [ %stack_var_-1872.1, %dec_label_pc_11010 ], [ %stack_var_-1872.1, %dec_label_pc_1104c ], [ %stack_var_-1872.1, %dec_label_pc_11140 ]
  %stack_var_-1884.1 = phi i8* [ %tmp240, %dec_label_pc_111bc ], [ %stack_var_-1884.0, %dec_label_pc_111c4.loopexit ], [ %stack_var_-1884.0, %dec_label_pc_11010 ], [ %stack_var_-1884.0, %dec_label_pc_1104c ], [ %stack_var_-1884.0, %dec_label_pc_11140 ]
  %stack_var_-1880.1 = phi i32 [ %tmp241, %dec_label_pc_111bc ], [ %v0_1107c, %dec_label_pc_111c4.loopexit ], [ %v0_1107c, %dec_label_pc_11010 ], [ %v0_1107c, %dec_label_pc_1104c ], [ %v0_1107c, %dec_label_pc_11140 ]
  %stack_var_-1876.1 = phi i8 [ %tmp242, %dec_label_pc_111bc ], [ %stack_var_-1876.0, %dec_label_pc_111c4.loopexit ], [ %stack_var_-1876.0, %dec_label_pc_11010 ], [ %stack_var_-1876.0, %dec_label_pc_1104c ], [ %stack_var_-1876.0, %dec_label_pc_11140 ]
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1672, i32* %ip.global-to-local, align 4
  %v2_111dc406 = load i32, i32* @sp, align 4
  %v3_111dc407 = add i32 %v2_111dc406, 1672
  %v4_111dc408 = inttoptr i32 %v3_111dc407 to i32*
  store i32 0, i32* %v4_111dc408, align 4
  br label %dec_label_pc_111cc.dec_label_pc_111cc_crit_edge

dec_label_pc_111cc.dec_label_pc_111cc_crit_edge:  ; preds = %dec_label_pc_111c4, %dec_label_pc_111cc.dec_label_pc_111cc_crit_edge
  %v0_111cc.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_111dc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_111d0 = add i32 %v0_111cc.pre, 4
  store i32 %v1_111d0, i32* %r3.global-to-local, align 4
  %v1_111d4 = add i32 %v0_111cc.pre, 1672
  store i32 %v1_111d4, i32* %ip.global-to-local, align 4
  %v7_111d8 = icmp eq i32 %v1_111d0, 128
  %v2_111dc = load i32, i32* @sp, align 4
  %v3_111dc = add i32 %v2_111dc, %v1_111d4
  %v4_111dc = inttoptr i32 %v3_111dc to i32*
  store i32 %v0_111dc.pre, i32* %v4_111dc, align 4
  br i1 %v7_111d8, label %dec_label_pc_111e4, label %dec_label_pc_111cc.dec_label_pc_111cc_crit_edge

dec_label_pc_111e4:                               ; preds = %dec_label_pc_111cc.dec_label_pc_111cc_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_111e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_111ec400 = add i32 %v0_111e4, 4
  store i32 %v1_111ec400, i32* %r3.global-to-local, align 4
  %v1_111f0401 = add i32 %v0_111e4, 1544
  store i32 %v1_111f0401, i32* %lr.global-to-local, align 4
  %v7_111f4402 = icmp eq i32 %v1_111ec400, 128
  %v2_111f8403 = load i32, i32* @sp, align 4
  %v3_111f8404 = add i32 %v2_111f8403, %v1_111f0401
  %v4_111f8405 = inttoptr i32 %v3_111f8404 to i32*
  store i32 %v0_111e4, i32* %v4_111f8405, align 4
  br i1 %v7_111f4402, label %dec_label_pc_11200, label %dec_label_pc_111e8.dec_label_pc_111e8_crit_edge

dec_label_pc_111e8.dec_label_pc_111e8_crit_edge:  ; preds = %dec_label_pc_111e4, %dec_label_pc_111e8.dec_label_pc_111e8_crit_edge
  %v0_111e8.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_111f8.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_111ec = add i32 %v0_111e8.pre, 4
  store i32 %v1_111ec, i32* %r3.global-to-local, align 4
  %v1_111f0 = add i32 %v0_111e8.pre, 1544
  store i32 %v1_111f0, i32* %lr.global-to-local, align 4
  %v7_111f4 = icmp eq i32 %v1_111ec, 128
  %v2_111f8 = load i32, i32* @sp, align 4
  %v3_111f8 = add i32 %v2_111f8, %v1_111f0
  %v4_111f8 = inttoptr i32 %v3_111f8 to i32*
  store i32 %v0_111f8.pre, i32* %v4_111f8, align 4
  br i1 %v7_111f4, label %dec_label_pc_11200, label %dec_label_pc_111e8.dec_label_pc_111e8_crit_edge

dec_label_pc_11200:                               ; preds = %dec_label_pc_111e8.dec_label_pc_111e8_crit_edge, %dec_label_pc_111e4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_11200 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_11200, i32* @r6, align 4
  store i32 %v0_11200, i32* @r5, align 4
  store i32 %v0_11200, i32* @r7, align 4
  store i32 %v0_11200, i32* %stack_var_-52, align 4
  %v2_112bc = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_11278

dec_label_pc_11214:                               ; preds = %dec_label_pc_112a0, %dec_label_pc_11278
  %storemerge222 = phi i32 [ 30, %dec_label_pc_11278 ], [ 5, %dec_label_pc_112a0 ]
  store i32 %storemerge222, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1eab4.167 to i32), i32* %r2.global-to-local, align 4
  %v2_11218 = load i32, i32* @global_var_1eab4.167, align 4
  store i32 %v2_11218, i32* %r3.global-to-local, align 4
  %v1_1121c = add i32 %v2_1128c, 8
  %v2_1121c = inttoptr i32 %v1_1121c to i32*
  %v3_1121c = load i32, i32* %v2_1121c, align 4
  store i32 %v3_1121c, i32* %r2.global-to-local, align 4
  %v2_11220 = sub i32 %v2_11218, %v3_1121c
  store i32 %v2_11220, i32* %r3.global-to-local, align 4
  %v3_11224 = icmp uge i32 %v2_11220, %storemerge222
  store i1 %v3_11224, i1* %cpsr_c.global-to-local, align 1
  %v9_11224 = icmp eq i32 %v2_11220, %storemerge222
  store i1 %v9_11224, i1* %cpsr_z.global-to-local, align 1
  %v2_11228 = xor i1 %v9_11224, true
  %v3_11228 = and i1 %v3_11224, %v2_11228
  br i1 %v3_11228, label %dec_label_pc_112e0, label %dec_label_pc_1122c

dec_label_pc_1122c:                               ; preds = %dec_label_pc_11214
  store i1 %v2_11294, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_11294, i1* %cpsr_z.global-to-local, align 1
  %v1_112b0 = add i32 %v2_1128c, 4
  %v2_112b0 = inttoptr i32 %v1_112b0 to i32*
  %v3_112b0 = load i32, i32* %v2_112b0, align 4
  br i1 %v7_11294, label %dec_label_pc_112b0, label %dec_label_pc_11234

dec_label_pc_11234:                               ; preds = %dec_label_pc_1122c
  store i32 %v3_112b0, i32* %ip.global-to-local, align 4
  %v3_11238 = udiv i32 %v3_112b0, 32
  store i32 %v2_112bc, i32* %r0.global-to-local, align 4
  %v3_11240 = mul nuw nsw i32 %v3_11238, 4
  %v2_11244 = add i32 %v3_11240, %v2_112bc
  store i32 %v2_11244, i32* %r3.global-to-local, align 4
  %v1_11248 = add i32 %v2_11244, -184
  %v2_11248 = inttoptr i32 %v1_11248 to i32*
  %v3_11248 = load i32, i32* %v2_11248, align 4
  %v1_1124c = urem i32 %v3_112b0, 32
  store i32 %v1_1124c, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_11254 = shl i32 1, %v1_1124c
  %v8_11254 = or i32 %v3_11248, %v7_11254
  store i32 %v8_11254, i32* %r2.global-to-local, align 4
  store i32 %v8_11254, i32* %v2_11248, align 4
  %v0_1125c = load i32, i32* @r6, align 4
  %v1_1125c = load i32, i32* %ip.global-to-local, align 4
  %v3_1125c = icmp uge i32 %v0_1125c, %v1_1125c
  store i1 %v3_1125c, i1* %cpsr_c.global-to-local, align 1
  %v9_1125c = icmp eq i32 %v0_1125c, %v1_1125c
  store i1 %v9_1125c, i1* %cpsr_z.global-to-local, align 1
  %v5_11260 = icmp slt i32 %v0_1125c, %v1_1125c
  br i1 %v5_11260, label %bb308, label %bb309

bb308:                                            ; preds = %dec_label_pc_11234
  store i32 %v1_1125c, i32* @r6, align 4
  br label %bb309

bb309:                                            ; preds = %dec_label_pc_112a0, %dec_label_pc_11f58, %dec_label_pc_11314, %bb311, %dec_label_pc_11234, %bb308
  %v3_11264 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_11264, i32* %r3.global-to-local, align 4
  %v1_11268 = add i32 %v3_11264, 1
  store i32 %v1_11268, i32* %r2.global-to-local, align 4
  %v2_1126c = icmp ugt i32 %v1_11268, 254
  store i1 %v2_1126c, i1* %cpsr_c.global-to-local, align 1
  %v7_1126c = icmp eq i32 %v1_11268, 255
  store i1 %v7_1126c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_11268, i32* %stack_var_-52, align 4
  %v8_11274 = icmp sgt i32 %v1_11268, 255
  br i1 %v8_11274, label %dec_label_pc_11320, label %dec_label_pc_11278

dec_label_pc_11278:                               ; preds = %bb309, %dec_label_pc_11200
  %v0_11284 = phi i32 [ %v1_11268, %bb309 ], [ %v0_11200, %dec_label_pc_11200 ]
  store i32 ptrtoint (i32* @global_var_1eb18.179 to i32), i32* %r0.global-to-local, align 4
  %v3_1127c = mul i32 %v0_11284, 512
  store i32 %v3_1127c, i32* %r3.global-to-local, align 4
  %v2_11280 = load i32, i32* @global_var_1eb18.179, align 4
  store i32 %v2_11280, i32* %r1.global-to-local, align 4
  %v2_11288 = mul i32 %v0_11284, 544
  store i32 %v2_11288, i32* %r2.global-to-local, align 4
  %v2_1128c = add i32 %v2_11280, %v2_11288
  store i32 %v2_1128c, i32* @r4, align 4
  %v1_11290 = add i32 %v2_1128c, 12
  %v2_11290 = inttoptr i32 %v1_11290 to i32*
  %v3_11290 = load i32, i32* %v2_11290, align 4
  store i32 %v3_11290, i32* %ip.global-to-local, align 4
  %v2_11294 = icmp ne i32 %v3_11290, 0
  store i1 %v2_11294, i1* %cpsr_c.global-to-local, align 1
  %v7_11294 = icmp eq i32 %v3_11290, 1
  store i1 %v7_11294, i1* %cpsr_z.global-to-local, align 1
  %v2_11298 = xor i1 %v7_11294, true
  %v3_11298 = and i1 %v2_11294, %v2_11298
  br i1 %v3_11298, label %dec_label_pc_11214, label %dec_label_pc_112a0

dec_label_pc_112a0:                               ; preds = %dec_label_pc_11278
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_112a0 = icmp eq i32 %v3_11290, 0
  store i1 %v2_112a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_112a0, label %bb309, label %dec_label_pc_11214

dec_label_pc_112b0:                               ; preds = %dec_label_pc_1122c
  store i32 %v3_112b0, i32* %r0.global-to-local, align 4
  %v3_112b4 = udiv i32 %v3_112b0, 32
  %v3_112b8 = mul nuw nsw i32 %v3_112b4, 4
  store i32 %v2_112bc, i32* %lr.global-to-local, align 4
  %v2_112c0 = add i32 %v3_112b8, %v2_112bc
  store i32 %v2_112c0, i32* %r3.global-to-local, align 4
  %v1_112c4 = add i32 %v2_112c0, -312
  %v2_112c4 = inttoptr i32 %v1_112c4 to i32*
  %v3_112c4 = load i32, i32* %v2_112c4, align 4
  %v1_112c8 = urem i32 %v3_112b0, 32
  store i32 %v1_112c8, i32* %r1.global-to-local, align 4
  %v7_112cc = shl i32 1, %v1_112c8
  %v8_112cc = or i32 %v3_112c4, %v7_112cc
  store i32 %v8_112cc, i32* %r2.global-to-local, align 4
  %v0_112d0 = load i32, i32* @r5, align 4
  %v3_112d0 = icmp uge i32 %v0_112d0, %v3_112b0
  store i1 %v3_112d0, i1* %cpsr_c.global-to-local, align 1
  %v9_112d0 = icmp eq i32 %v0_112d0, %v3_112b0
  store i1 %v9_112d0, i1* %cpsr_z.global-to-local, align 1
  %v5_112d4 = icmp slt i32 %v0_112d0, %v3_112b0
  br i1 %v5_112d4, label %bb310, label %bb311

bb310:                                            ; preds = %dec_label_pc_112b0
  store i32 %v3_112b0, i32* @r5, align 4
  br label %bb311

bb311:                                            ; preds = %dec_label_pc_112b0, %bb310
  store i32 %v8_112cc, i32* %v2_112c4, align 4
  br label %bb309

dec_label_pc_112e0:                               ; preds = %dec_label_pc_11214
  %v1_112e0 = add i32 %v2_1128c, 4
  %v2_112e0 = inttoptr i32 %v1_112e0 to i32*
  %v3_112e0 = load i32, i32* %v2_112e0, align 4
  store i32 %v3_112e0, i32* %r0.global-to-local, align 4
  %v1_112e4 = call i32 @function_134b0(i32 %v3_112e0)
  store i32 %v1_112e4, i32* %r0.global-to-local, align 4
  %v0_112e8 = load i32, i32* @r4, align 4
  %v1_112e8 = add i32 %v0_112e8, 12
  %v2_112e8 = inttoptr i32 %v1_112e8 to i32*
  %v3_112e8 = load i32, i32* %v2_112e8, align 4
  store i32 %v3_112e8, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_112f0 = icmp ugt i32 %v3_112e8, 1
  store i1 %v2_112f0, i1* %cpsr_c.global-to-local, align 1
  %v7_112f0 = icmp eq i32 %v3_112e8, 2
  store i1 %v7_112f0, i1* %cpsr_z.global-to-local, align 1
  %v2_112f4 = add i32 %v0_112e8, 4
  %v3_112f4 = inttoptr i32 %v2_112f4 to i32*
  store i32 -1, i32* %v3_112f4, align 4
  %v2_112f8 = xor i1 %v2_112f0, true
  %v3_112f8 = or i1 %v7_112f0, %v2_112f8
  br i1 %v3_112f8, label %dec_label_pc_11f58, label %dec_label_pc_112fc

dec_label_pc_112fc:                               ; preds = %dec_label_pc_112e0
  %v0_112fc = load i32, i32* @r4, align 4
  %v1_112fc = add i32 %v0_112fc, 540
  %v2_112fc = inttoptr i32 %v1_112fc to i8*
  %v3_112fc = load i8, i8* %v2_112fc, align 1
  %v4_112fc = zext i8 %v3_112fc to i32
  %v1_11300 = add nuw nsw i32 %v4_112fc, 1
  %v1_11304 = urem i32 %v1_11300, 256
  store i32 %v1_11304, i32* %r3.global-to-local, align 4
  %v2_11308 = icmp ugt i32 %v1_11304, 9
  store i1 %v2_11308, i1* %cpsr_c.global-to-local, align 1
  %v7_11308 = icmp eq i32 %v1_11304, 10
  store i1 %v7_11308, i1* %cpsr_z.global-to-local, align 1
  %v1_1130c = trunc i32 %v1_11300 to i8
  store i8 %v1_1130c, i8* %v2_112fc, align 1
  %v0_11310 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11310, label %dec_label_pc_11f58, label %dec_label_pc_11314

dec_label_pc_11314:                               ; preds = %dec_label_pc_112fc
  %v0_11314 = load i32, i32* @r4, align 4
  store i32 %v0_11314, i32* @r0, align 4
  %v0_11318 = call i32 @function_10460()
  store i32 %v0_11318, i32* %r0.global-to-local, align 4
  br label %bb309

dec_label_pc_11320:                               ; preds = %bb309
  store i32 1, i32* %stack_var_-64, align 4
  %v0_11328 = load i32, i32* @r6, align 4
  %v1_11328 = load i32, i32* @r5, align 4
  %v3_11328 = icmp uge i32 %v0_11328, %v1_11328
  store i1 %v3_11328, i1* %cpsr_c.global-to-local, align 1
  %v9_11328 = icmp eq i32 %v0_11328, %v1_11328
  store i1 %v9_11328, i1* %cpsr_z.global-to-local, align 1
  %v5_1132c = icmp slt i32 %v0_11328, %v1_11328
  %storemerge75 = select i1 %v5_1132c, i32 %v1_11328, i32 %v0_11328
  %v2_11340 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_11340, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_11348 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_11348, i32* %ip.global-to-local, align 4
  %v2_1134c = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_1134c, i32* %r1.global-to-local, align 4
  %v1_11350 = add i32 %storemerge75, 1
  store i32 %v1_11350, i32* %r0.global-to-local, align 4
  %v5_1135c = call i32 @function_136d0(i32 %v1_11350, i32 %v2_1134c, i32 %v2_11340, i32 0, i32 %v2_11348)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_11364 = call i32 @function_13780(i32* null)
  store i32 ptrtoint (i32* @global_var_1eab4.167 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_11364, i32* @global_var_1eab4.167, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_1152c = inttoptr i32 %stack_var_-1868.0 to i32*
  %v2_115d4 = ptrtoint i32* %stack_var_-41 to i32
  %v2_11ddc = ptrtoint i32* %stack_var_-84 to i32
  %v2_11de4 = ptrtoint i32* %stack_var_-73 to i32
  %v2_11958 = ptrtoint i32* %stack_var_-56 to i32
  %v2_11a0c = ptrtoint i32* %stack_var_-48 to i32
  br label %dec_label_pc_113b8

dec_label_pc_11380:                               ; preds = %dec_label_pc_113dc, %dec_label_pc_11f68
  %v0_11394 = phi i32 [ %v3_113d0, %dec_label_pc_113dc ], [ %v0_11380.pre, %dec_label_pc_11f68 ]
  %v3_11380 = udiv i32 %v0_11394, 32
  %v3_11384 = mul nuw nsw i32 %v3_11380, 4
  store i32 %v2_112bc, i32* @lr, align 4
  %v2_1138c = add i32 %v3_11384, %v2_112bc
  store i32 %v2_1138c, i32* %r3.global-to-local, align 4
  %v1_11390 = add i32 %v2_1138c, -184
  %v2_11390 = inttoptr i32 %v1_11390 to i32*
  %v3_11390 = load i32, i32* %v2_11390, align 4
  %v1_11394 = urem i32 %v0_11394, 32
  store i32 %v1_11394, i32* %r1.global-to-local, align 4
  %v2_11398 = add nsw i32 %v1_11394, -1
  %v3_11398 = shl i32 1, %v2_11398
  %v4_11398 = and i32 %v3_11398, %v3_11390
  %v5_11398 = icmp ne i32 %v4_11398, 0
  store i1 %v5_11398, i1* %cpsr_c.global-to-local, align 1
  %v6_11398 = lshr i32 %v3_11390, %v1_11394
  store i32 %v6_11398, i32* %r2.global-to-local, align 4
  %v1_1139c = urem i32 %v6_11398, 2
  %v2_1139c = icmp eq i32 %v1_1139c, 0
  store i1 %v2_1139c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1139c, label %dec_label_pc_113a4, label %dec_label_pc_11508.preheader

dec_label_pc_11508.preheader:                     ; preds = %dec_label_pc_11380
  %v0_11508101 = load i32, i32* @r5, align 4
  %v1_11508102 = add i32 %v0_11508101, 12
  %v2_11508103 = inttoptr i32 %v1_11508102 to i32*
  %v3_11508104 = load i32, i32* %v2_11508103, align 4
  store i32 %v3_11508104, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1150c100106 = icmp eq i32 %v3_11508104, 0
  store i1 %v2_1150c100106, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1150c100106, label %dec_label_pc_113a4, label %dec_label_pc_11514.lr.ph

dec_label_pc_113a4:                               ; preds = %dec_label_pc_11508.loopexit, %dec_label_pc_11508.preheader, %dec_label_pc_11380, %bb346, %dec_label_pc_11e84, %dec_label_pc_113b8, %dec_label_pc_11f7c, %dec_label_pc_11ec8
  %v3_113a4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_113a4, i32* %r3.global-to-local, align 4
  %v1_113a8 = add i32 %v3_113a4, 1
  store i32 %v1_113a8, i32* %r2.global-to-local, align 4
  %v2_113ac = icmp ugt i32 %v1_113a8, 254
  store i1 %v2_113ac, i1* %cpsr_c.global-to-local, align 1
  %v7_113ac = icmp eq i32 %v1_113a8, 255
  store i1 %v7_113ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_113a8, i32* %stack_var_-52, align 4
  %v8_113b4 = icmp sgt i32 %v1_113a8, 255
  br i1 %v8_113b4, label %dec_label_pc_10d4c, label %dec_label_pc_113b8

dec_label_pc_113b8:                               ; preds = %dec_label_pc_113a4, %dec_label_pc_11320
  %v0_113c4 = phi i32 [ %v1_113a8, %dec_label_pc_113a4 ], [ 0, %dec_label_pc_11320 ]
  store i32 ptrtoint (i32* @global_var_1eb18.179 to i32), i32* %ip.global-to-local, align 4
  %v3_113bc = mul i32 %v0_113c4, 512
  store i32 %v3_113bc, i32* %r3.global-to-local, align 4
  %v2_113c0 = load i32, i32* @global_var_1eb18.179, align 4
  store i32 %v2_113c0, i32* %r1.global-to-local, align 4
  %v2_113c8 = mul i32 %v0_113c4, 544
  store i32 %v2_113c8, i32* %r2.global-to-local, align 4
  %v2_113cc = add i32 %v2_113c0, %v2_113c8
  store i32 %v2_113cc, i32* @r5, align 4
  %v1_113d0 = add i32 %v2_113cc, 4
  %v2_113d0 = inttoptr i32 %v1_113d0 to i32*
  %v3_113d0 = load i32, i32* %v2_113d0, align 4
  store i32 %v3_113d0, i32* @r4, align 4
  %v2_113d4 = icmp eq i32 %v3_113d0, -1
  store i1 %v2_113d4, i1* %cpsr_c.global-to-local, align 1
  %v7_113d4 = icmp eq i32 %v3_113d0, -1
  store i1 %v7_113d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_113d4, label %dec_label_pc_113a4, label %dec_label_pc_113dc

dec_label_pc_113dc:                               ; preds = %dec_label_pc_113b8
  %v3_113dc = udiv i32 %v3_113d0, 32
  %v3_113e0 = mul nuw nsw i32 %v3_113dc, 4
  store i32 %v2_112bc, i32* %lr.global-to-local, align 4
  %v2_113e8 = add i32 %v3_113e0, %v2_112bc
  store i32 %v2_113e8, i32* %r3.global-to-local, align 4
  %v1_113ec = add i32 %v2_113e8, -312
  %v2_113ec = inttoptr i32 %v1_113ec to i32*
  %v3_113ec = load i32, i32* %v2_113ec, align 4
  %v1_113f0 = urem i32 %v3_113d0, 32
  store i32 %v1_113f0, i32* %r1.global-to-local, align 4
  %v2_113f4 = add nsw i32 %v1_113f0, -1
  %v3_113f4 = shl i32 1, %v2_113f4
  %v4_113f4 = and i32 %v3_113ec, %v3_113f4
  %v5_113f4 = icmp ne i32 %v4_113f4, 0
  store i1 %v5_113f4, i1* %cpsr_c.global-to-local, align 1
  %v6_113f4 = lshr i32 %v3_113ec, %v1_113f0
  store i32 %v6_113f4, i32* %r2.global-to-local, align 4
  %v1_113f8 = urem i32 %v6_113f4, 2
  %v2_113f8 = icmp eq i32 %v1_113f8, 0
  store i1 %v2_113f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_113f8, label %dec_label_pc_11380, label %dec_label_pc_11400

dec_label_pc_11400:                               ; preds = %dec_label_pc_113dc
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_11a0c, i32* %r3.global-to-local, align 4
  store i32 %v2_11958, i32* %ip.global-to-local, align 4
  store i32 %v3_113d0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_11430 = call i32 @function_13c64(i32 %v3_113d0, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_11958)
  %v3_11434 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_11434, i32* %r3.global-to-local, align 4
  %v2_11438 = or i32 %v3_11434, %v6_11430
  store i32 %v2_11438, i32* %r0.global-to-local, align 4
  %v4_11438 = icmp eq i32 %v2_11438, 0
  store i1 %v4_11438, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_11438, label %dec_label_pc_11440, label %dec_label_pc_11f7c

dec_label_pc_11440:                               ; preds = %dec_label_pc_11400
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_11444 = load i32, i32* @r5, align 4
  %v2_11444 = add i32 %v1_11444, 12
  %v3_11444 = inttoptr i32 %v2_11444 to i32*
  store i32 2, i32* %v3_11444, align 4
  %v0_11448 = call i32 @function_fc1c()
  store i32 %v0_11448, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1eab0.173 to i32), i32* %r3.global-to-local, align 4
  %v3_11450 = load i8, i8* @global_var_1eab1.174, align 1
  %v4_11450 = zext i8 %v3_11450 to i32
  store i32 %v4_11450, i32* %r2.global-to-local, align 4
  %v2_11454 = load i8, i8* bitcast (i8** @global_var_1eab0.173 to i8*), align 4
  %v3_11454 = zext i8 %v2_11454 to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_11458 = mul nuw nsw i32 %v4_11450, 256
  %v5_11458 = or i32 %v3_11454, %v4_11458
  store i32 %v5_11458, i32* %r1.global-to-local, align 4
  %v2_1145c = call i32 @function_1320c(i32 %v0_11448, i32 %v5_11458)
  store i32 ptrtoint (i32* @global_var_1ea80.169 to i32), i32* %r3.global-to-local, align 4
  %v2_11464 = load i32, i32* @global_var_1ea80.169, align 4
  store i32 %v2_11464, i32* %lr.global-to-local, align 4
  %v1_1146c = load i32, i32* @r6, align 4
  %v9_1146c = icmp eq i32 %v2_11464, %v1_1146c
  store i1 %v9_1146c, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_11470 = urem i32 %v2_1145c, 65536
  store i32 %v3_11470, i32* %r0.global-to-local, align 4
  %v7_11474 = icmp sgt i32 %v2_11464, %v1_1146c
  br i1 %v7_11474, label %dec_label_pc_11478, label %dec_label_pc_11f64

dec_label_pc_11478:                               ; preds = %dec_label_pc_11440
  %v2_1147c = load i32, i32* @global_var_1eaac.171, align 4
  store i32 %v2_1147c, i32* %r3.global-to-local, align 4
  store i32 %v1_1146c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11498

dec_label_pc_11488:                               ; preds = %dec_label_pc_114b0, %dec_label_pc_11498
  %v1_11488 = add i32 %v0_11488, 1
  store i32 %v1_11488, i32* %ip.global-to-local, align 4
  %v3_1148c = icmp uge i32 %v1_11488, %v2_11464
  store i1 %v3_1148c, i1* %cpsr_c.global-to-local, align 1
  %v9_1148c = icmp eq i32 %v1_11488, %v2_11464
  store i1 %v9_1148c, i1* %cpsr_z.global-to-local, align 1
  %v1_11490 = add i32 %v0_11490, 16
  store i32 %v1_11490, i32* %r3.global-to-local, align 4
  br i1 %v9_1148c, label %dec_label_pc_11f64, label %dec_label_pc_11498

dec_label_pc_11498:                               ; preds = %dec_label_pc_11488, %dec_label_pc_11478
  %v0_11488 = phi i32 [ %v1_11488, %dec_label_pc_11488 ], [ %v1_1146c, %dec_label_pc_11478 ]
  %v0_11490 = phi i32 [ %v1_11490, %dec_label_pc_11488 ], [ %v2_1147c, %dec_label_pc_11478 ]
  store i32 %v0_11490, i32* %r1.global-to-local, align 4
  %v1_1149c = add i32 %v0_11490, 9
  %v2_1149c = inttoptr i32 %v1_1149c to i8*
  %v3_1149c = load i8, i8* %v2_1149c, align 1
  %v4_1149c = zext i8 %v3_1149c to i32
  store i32 %v4_1149c, i32* %r2.global-to-local, align 4
  %v1_114a0 = add i32 %v0_11490, 8
  %v2_114a0 = inttoptr i32 %v1_114a0 to i8*
  %v3_114a0 = load i8, i8* %v2_114a0, align 1
  %v4_114a0 = zext i8 %v3_114a0 to i32
  %v4_114a4 = mul nuw nsw i32 %v4_1149c, 256
  %v5_114a4 = or i32 %v4_114a0, %v4_114a4
  store i32 %v5_114a4, i32* %r3.global-to-local, align 4
  %v3_114a8 = icmp uge i32 %v5_114a4, %v3_11470
  store i1 %v3_114a8, i1* %cpsr_c.global-to-local, align 1
  %v9_114a8 = icmp eq i32 %v5_114a4, %v3_11470
  store i1 %v9_114a8, i1* %cpsr_z.global-to-local, align 1
  %v2_114ac = xor i1 %v9_114a8, true
  %v3_114ac = and i1 %v3_114a8, %v2_114ac
  br i1 %v3_114ac, label %dec_label_pc_11488, label %dec_label_pc_114b0

dec_label_pc_114b0:                               ; preds = %dec_label_pc_11498
  %v1_114b0 = add i32 %v0_11490, 10
  %v2_114b0 = inttoptr i32 %v1_114b0 to i8*
  %v3_114b0 = load i8, i8* %v2_114b0, align 1
  %v4_114b0 = zext i8 %v3_114b0 to i32
  store i32 %v4_114b0, i32* %r3.global-to-local, align 4
  %v1_114b4 = add i32 %v0_11490, 11
  %v2_114b4 = inttoptr i32 %v1_114b4 to i8*
  %v3_114b4 = load i8, i8* %v2_114b4, align 1
  %v4_114b4 = zext i8 %v3_114b4 to i32
  store i32 %v4_114b4, i32* %r2.global-to-local, align 4
  %v4_114b8 = mul nuw nsw i32 %v4_114b4, 256
  %v5_114b8 = or i32 %v4_114b8, %v4_114b0
  store i32 %v5_114b8, i32* %r3.global-to-local, align 4
  %v3_114bc = icmp uge i32 %v5_114b8, %v3_11470
  store i1 %v3_114bc, i1* %cpsr_c.global-to-local, align 1
  %v9_114bc = icmp eq i32 %v5_114b8, %v3_11470
  store i1 %v9_114bc, i1* %cpsr_z.global-to-local, align 1
  %v2_114c0 = xor i1 %v3_114bc, true
  %v3_114c0 = or i1 %v9_114bc, %v2_114c0
  br i1 %v3_114c0, label %dec_label_pc_11488, label %dec_label_pc_11f68

dec_label_pc_114c8:                               ; preds = %dec_label_pc_117f4, %dec_label_pc_116ac, %dec_label_pc_11810
  store i32 %v3_116ac, i32* %r1.global-to-local, align 4
  %v0_114cc = load i32, i32* @sb, align 4
  store i32 %v0_114cc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_15ec0.320 to i32), i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v5_114d8 = call i32 @function_12bb4(i32 %v0_114cc, i32 %v3_116ac, i32 ptrtoint ([5 x i8]* @global_var_15ec0.320 to i32), i32 4)
  store i32 %v5_114d8, i32* %r0.global-to-local, align 4
  %v3_114dc = icmp eq i32 %v5_114d8, -1
  store i1 %v3_114dc, i1* %cpsr_c.global-to-local, align 1
  %v8_114dc = icmp eq i32 %v5_114d8, -1
  store i1 %v8_114dc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_114d8, i32* @r7, align 4
  br i1 %v3_114dc, label %dec_label_pc_114e8, label %dec_label_pc_1181c

dec_label_pc_114e8:                               ; preds = %dec_label_pc_114c8
  %v0_114e8 = load i32, i32* @sb, align 4
  store i32 %v0_114e8, i32* %r0.global-to-local, align 4
  %v0_114ec = load i32, i32* @r5, align 4
  %v1_114ec = add i32 %v0_114ec, 24
  %v2_114ec = inttoptr i32 %v1_114ec to i32*
  %v3_114ec = load i32, i32* %v2_114ec, align 4
  store i32 %v3_114ec, i32* %r1.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_15ec8.322 to i32), i32* %r2.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v5_114f8 = call i32 @function_12bb4(i32 %v0_114e8, i32 %v3_114ec, i32 ptrtoint ([6 x i8]* @global_var_15ec8.322 to i32), i32 5)
  store i32 %v5_114f8, i32* %r0.global-to-local, align 4
  %v3_114fc = icmp eq i32 %v5_114f8, -1
  store i1 %v3_114fc, i1* %cpsr_c.global-to-local, align 1
  %v8_114fc = icmp eq i32 %v5_114f8, -1
  store i1 %v8_114fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_114f8, i32* @r7, align 4
  br i1 %v3_114fc, label %dec_label_pc_11508.loopexit, label %dec_label_pc_1181c

dec_label_pc_11508.loopexit:                      ; preds = %dec_label_pc_1169c, %dec_label_pc_11bf8, %dec_label_pc_1158c, %dec_label_pc_114e8, %dec_label_pc_11ed4
  %v0_11508 = load i32, i32* @r5, align 4
  %v1_11508 = add i32 %v0_11508, 12
  %v2_11508 = inttoptr i32 %v1_11508 to i32*
  %v3_11508 = load i32, i32* %v2_11508, align 4
  store i32 %v3_11508, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1150c100 = icmp eq i32 %v3_11508, 0
  store i1 %v2_1150c100, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1150c100, label %dec_label_pc_113a4, label %dec_label_pc_11514.lr.ph

dec_label_pc_11514.lr.ph:                         ; preds = %dec_label_pc_11508.preheader, %dec_label_pc_11508.loopexit
  %v0_11514132 = phi i32 [ %v0_11508, %dec_label_pc_11508.loopexit ], [ %v0_11508101, %dec_label_pc_11508.preheader ]
  br label %dec_label_pc_11514

dec_label_pc_1150cthread-pre-split.thread:        ; preds = %dec_label_pc_118f0, %dec_label_pc_119a4, %dec_label_pc_11a58, %dec_label_pc_11b0c, %dec_label_pc_11d18
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11514

dec_label_pc_1150cthread-pre-split:               ; preds = %dec_label_pc_11938, %dec_label_pc_119ec, %dec_label_pc_11aa0, %dec_label_pc_11b54, %dec_label_pc_11d60, %dec_label_pc_11d44, %dec_label_pc_11a84, %dec_label_pc_11b38, %dec_label_pc_119d0, %dec_label_pc_1191c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11514

dec_label_pc_11514:                               ; preds = %dec_label_pc_1150cthread-pre-split.thread, %dec_label_pc_1150cthread-pre-split, %dec_label_pc_11514.lr.ph
  %v0_11f20 = phi i32 [ %v0_11514132, %dec_label_pc_11514.lr.ph ], [ %v0_1158c, %dec_label_pc_1150cthread-pre-split ], [ %v0_1158c, %dec_label_pc_1150cthread-pre-split.thread ]
  %v1_11514 = add i32 %v0_11f20, 24
  %v2_11514 = inttoptr i32 %v1_11514 to i32*
  %v3_11514 = load i32, i32* %v2_11514, align 4
  store i32 %v3_11514, i32* %r3.global-to-local, align 4
  %v2_11518 = icmp ugt i32 %v3_11514, 511
  store i1 %v2_11518, i1* %cpsr_c.global-to-local, align 1
  %v7_11518 = icmp eq i32 %v3_11514, 512
  store i1 %v7_11518, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_11f20, 28
  store i32 %.pre, i32* @sb, align 4
  br i1 %v7_11518, label %dec_label_pc_11f20, label %dec_label_pc_11524

dec_label_pc_11524:                               ; preds = %dec_label_pc_11514, %dec_label_pc_11f20
  store i32 %stack_var_-1868.0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 0, i32* %v2_1152c, align 4
  %v0_11530 = load i32, i32* @r5, align 4
  %v1_11530 = add i32 %v0_11530, 24
  %v2_11530 = inttoptr i32 %v1_11530 to i32*
  %v3_11530 = load i32, i32* %v2_11530, align 4
  store i32 %v3_11530, i32* %r2.global-to-local, align 4
  %v0_11534 = load i32, i32* @sb, align 4
  %v2_11534 = add i32 %v0_11534, %v3_11530
  store i32 %v2_11534, i32* @r4, align 4
  %v1_11538 = add i32 %v0_11530, 4
  %v2_11538 = inttoptr i32 %v1_11538 to i32*
  %v3_11538 = load i32, i32* %v2_11538, align 4
  store i32 %v3_11538, i32* %r0.global-to-local, align 4
  %v1_1153c = sub i32 512, %v3_11530
  store i32 %v1_1153c, i32* %r2.global-to-local, align 4
  store i32 %v2_11534, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11548 = inttoptr i32 %v2_11534 to i32*
  %v5_11548 = call i32 @function_13cc0(i32 %v3_11538, i32* %v4_11548, i32 %v1_1153c, i32 16384)
  store i32 %v5_11548, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1154c = icmp eq i32 %v5_11548, 0
  store i1 %v2_1154c, i1* %cpsr_z.global-to-local, align 1
  %tmp312 = icmp slt i32 %v5_11548, 1
  br i1 %tmp312, label %dec_label_pc_11e78, label %dec_label_pc_11554

dec_label_pc_11554:                               ; preds = %dec_label_pc_11524
  %v0_11554 = load i32, i32* @r6, align 4
  store i32 %v0_11554, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1155c

dec_label_pc_1155c:                               ; preds = %bb314, %dec_label_pc_11554
  %v3_11564 = phi i32 [ %v1_11568, %bb314 ], [ %v0_11554, %dec_label_pc_11554 ]
  %v1_1155c = load i32, i32* @r4, align 4
  %v2_1155c = add i32 %v1_1155c, %v3_11564
  %v3_1155c = inttoptr i32 %v2_1155c to i8*
  %v4_1155c = load i8, i8* %v3_1155c, align 1
  %v6_1155c = zext i8 %v4_1155c to i32
  store i32 %v6_1155c, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11560 = icmp eq i8 %v4_1155c, 0
  store i1 %v2_11560, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11560, label %bb313, label %bb314

bb313:                                            ; preds = %dec_label_pc_1155c
  %v1_11564 = load i32, i32* %r1.global-to-local, align 4
  %v2_11564 = trunc i32 %v1_11564 to i8
  store i8 %v2_11564, i8* %v3_1155c, align 1
  %v0_11568.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb314

bb314:                                            ; preds = %dec_label_pc_1155c, %bb313
  %v0_11568 = phi i32 [ %v3_11564, %dec_label_pc_1155c ], [ %v0_11568.pre, %bb313 ]
  %v1_11568 = add i32 %v0_11568, 1
  store i32 %v1_11568, i32* %r2.global-to-local, align 4
  %v3_1156c = icmp uge i32 %v5_11548, %v1_11568
  store i1 %v3_1156c, i1* %cpsr_c.global-to-local, align 1
  %v9_1156c = icmp eq i32 %v5_11548, %v1_11568
  store i1 %v9_1156c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1156c, label %dec_label_pc_11574, label %dec_label_pc_1155c

dec_label_pc_11574:                               ; preds = %bb314, %dec_label_pc_11e7c
  store i32 ptrtoint (i32* @global_var_1eab4.167 to i32), i32* @lr, align 4
  %v0_11578 = load i32, i32* @r5, align 4
  %v1_11578 = add i32 %v0_11578, 24
  %v2_11578 = inttoptr i32 %v1_11578 to i32*
  %v3_11578 = load i32, i32* %v2_11578, align 4
  %v2_1157c = load i32, i32* @global_var_1eab4.167, align 4
  store i32 %v2_1157c, i32* %r3.global-to-local, align 4
  %v2_11580 = add i32 %v3_11578, %v5_11548
  store i32 %v2_11580, i32* %ip.global-to-local, align 4
  store i32 %v2_11580, i32* %v2_11578, align 4
  %v0_11588 = load i32, i32* %r3.global-to-local, align 4
  %v1_11588 = load i32, i32* @r5, align 4
  %v2_11588 = add i32 %v1_11588, 8
  %v3_11588 = inttoptr i32 %v2_11588 to i32*
  store i32 %v0_11588, i32* %v3_11588, align 4
  br label %dec_label_pc_1158c

dec_label_pc_1158c:                               ; preds = %dec_label_pc_11cf4, %dec_label_pc_11574
  %v0_1158c = load i32, i32* @r5, align 4
  %v1_1158c = add i32 %v0_1158c, 12
  %v2_1158c = inttoptr i32 %v1_1158c to i32*
  %v3_1158c = load i32, i32* %v2_1158c, align 4
  store i32 %v3_1158c, i32* %r2.global-to-local, align 4
  %v1_11590 = add i32 %v3_1158c, -2
  store i32 %v1_11590, i32* %r3.global-to-local, align 4
  %v7_11594 = icmp eq i32 %v1_11590, 8
  store i1 %v7_11594, i1* %cpsr_z.global-to-local, align 1
  %v5_11598 = and i32 %v1_11590, 1073741824
  %v6_11598 = icmp ne i32 %v5_11598, 0
  store i1 %v6_11598, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_1158c, label %dec_label_pc_11508.loopexit [
    i32 2, label %dec_label_pc_115c4
    i32 3, label %dec_label_pc_116ac
    i32 4, label %dec_label_pc_11860
    i32 5, label %dec_label_pc_118f0
    i32 6, label %dec_label_pc_119a4
    i32 7, label %dec_label_pc_11b0c
    i32 8, label %dec_label_pc_11a58
    i32 9, label %dec_label_pc_11d18
    i32 10, label %dec_label_pc_11bc0
  ]

dec_label_pc_115c4:                               ; preds = %dec_label_pc_1158c
  %v1_115c8 = add i32 %v0_1158c, 24
  %v2_115c8 = inttoptr i32 %v1_115c8 to i32*
  %v3_115c8 = load i32, i32* %v2_115c8, align 4
  store i32 %v3_115c8, i32* %ip.global-to-local, align 4
  %v0_115cc = load i32, i32* @sb, align 4
  store i32 %v0_115cc, i32* @r6, align 4
  store i32 0, i32* @r7, align 4
  store i32 -3, i32* %sl.global-to-local, align 4
  store i32 -4, i32* @r8, align 4
  %v1_115e0 = add i32 %v0_1158c, 29
  store i32 %v1_115e0, i32* @r4, align 4
  %v3_115e491 = icmp eq i32 %v3_115c8, 0
  store i1 %v3_115e491, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_115e491, i1* %cpsr_z.global-to-local, align 1
  %v6_115e898 = icmp sgt i32 %v3_115c8, 0
  br i1 %v6_115e898, label %dec_label_pc_115ec.preheader, label %dec_label_pc_1168c

dec_label_pc_115e4.loopexit:                      ; preds = %dec_label_pc_11604
  %v2_1160c = add i32 %v1_1160c, 2
  store i32 %v2_1160c, i32* @r6, align 4
  %v2_11610 = add i32 %v1_11610, 2
  store i32 %v2_11610, i32* @r4, align 4
  %v2_11614 = add i32 %v1_11614, 2
  store i32 %v2_11614, i32* @r7, align 4
  %v3_115e4 = icmp uge i32 %v2_11614, %v1_115e4
  store i1 %v3_115e4, i1* %cpsr_c.global-to-local, align 1
  %v9_115e4 = icmp eq i32 %v2_11614, %v1_115e4
  store i1 %v9_115e4, i1* %cpsr_z.global-to-local, align 1
  %v6_115e8 = icmp slt i32 %v2_11614, %v1_115e4
  br i1 %v6_115e8, label %dec_label_pc_115ec.preheader, label %dec_label_pc_1168c

dec_label_pc_115ec.preheader:                     ; preds = %dec_label_pc_115c4, %dec_label_pc_115e4.loopexit
  %v6_11694168 = phi i32 [ %v6_11694169, %dec_label_pc_115e4.loopexit ], [ %v0_1158c, %dec_label_pc_115c4 ]
  %v1_11614157 = phi i32 [ %v2_11614, %dec_label_pc_115e4.loopexit ], [ 0, %dec_label_pc_115c4 ]
  %v1_1160c155 = phi i32 [ %v2_1160c, %dec_label_pc_115e4.loopexit ], [ %v0_115cc, %dec_label_pc_115c4 ]
  %v1_115f8153 = phi i32 [ %v1_115e4, %dec_label_pc_115e4.loopexit ], [ %v3_115c8, %dec_label_pc_115c4 ]
  %v0_115ec151 = phi i32 [ %v2_11610, %dec_label_pc_115e4.loopexit ], [ %v1_115e0, %dec_label_pc_115c4 ]
  br label %dec_label_pc_115ec

dec_label_pc_115ec:                               ; preds = %dec_label_pc_115ec.preheader, %dec_label_pc_1166c
  %v6_11694169 = phi i32 [ %v6_11694168, %dec_label_pc_115ec.preheader ], [ %v0_11674, %dec_label_pc_1166c ]
  %v1_11614 = phi i32 [ %v1_11614157, %dec_label_pc_115ec.preheader ], [ %v1_11678, %dec_label_pc_1166c ]
  %v1_1160c = phi i32 [ %v1_1160c155, %dec_label_pc_115ec.preheader ], [ %v1_11680, %dec_label_pc_1166c ]
  %v1_115e4 = phi i32 [ %v1_115f8153, %dec_label_pc_115ec.preheader ], [ %v3_11674, %dec_label_pc_1166c ]
  %v1_11610 = phi i32 [ %v0_115ec151, %dec_label_pc_115ec.preheader ], [ %v1_11684, %dec_label_pc_1166c ]
  %v1_115ec = add i32 %v1_11610, -1
  %v2_115ec = inttoptr i32 %v1_115ec to i8*
  %v3_115ec = load i8, i8* %v2_115ec, align 1
  %v4_115ec = zext i8 %v3_115ec to i32
  store i32 %v4_115ec, i32* %r3.global-to-local, align 4
  %v2_115f0 = icmp eq i8 %v3_115ec, -1
  store i1 %v2_115f0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_115f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_115f0, label %dec_label_pc_115f8, label %dec_label_pc_1168c

dec_label_pc_115f8:                               ; preds = %dec_label_pc_115ec
  %v0_115f8 = load i32, i32* @sb, align 4
  %v2_115f8 = add i32 %v0_115f8, %v1_115e4
  store i32 %v2_115f8, i32* %r2.global-to-local, align 4
  %v3_115fc = icmp uge i32 %v2_115f8, %v1_11610
  store i1 %v3_115fc, i1* %cpsr_c.global-to-local, align 1
  %v9_115fc = icmp eq i32 %v2_115f8, %v1_11610
  store i1 %v9_115fc, i1* %cpsr_z.global-to-local, align 1
  %v2_11600 = xor i1 %v3_115fc, true
  %v3_11600 = or i1 %v9_115fc, %v2_11600
  br i1 %v3_11600, label %dec_label_pc_1168c, label %dec_label_pc_11604

dec_label_pc_11604:                               ; preds = %dec_label_pc_115f8
  %v1_11604 = inttoptr i32 %v1_11610 to i8*
  %v2_11604 = load i8, i8* %v1_11604, align 1
  %v3_11604 = zext i8 %v2_11604 to i32
  store i32 %v3_11604, i32* %r3.global-to-local, align 4
  %v2_11608 = icmp eq i8 %v2_11604, -1
  store i1 %v2_11608, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_11608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11608, label %dec_label_pc_115e4.loopexit, label %dec_label_pc_1161c

dec_label_pc_1161c:                               ; preds = %dec_label_pc_11604
  %v2_1161c = icmp ugt i8 %v2_11604, -4
  store i1 %v2_1161c, i1* %cpsr_c.global-to-local, align 1
  %v7_1161c = icmp eq i8 %v2_11604, -3
  store i1 %v7_1161c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1161c, label %dec_label_pc_11dcc, label %dec_label_pc_11624

dec_label_pc_11624:                               ; preds = %dec_label_pc_1161c
  %v1_11624 = add i32 %v1_1160c, 2
  store i32 %v1_11624, i32* %r3.global-to-local, align 4
  %v3_11628 = icmp uge i32 %v2_115f8, %v1_11624
  store i1 %v3_11628, i1* %cpsr_c.global-to-local, align 1
  %v9_11628 = icmp eq i32 %v2_115f8, %v1_11624
  store i1 %v9_11628, i1* %cpsr_z.global-to-local, align 1
  %v2_1162c = xor i1 %v3_11628, true
  %v3_1162c = or i1 %v9_11628, %v2_1162c
  br i1 %v3_1162c, label %dec_label_pc_1168c, label %dec_label_pc_11630

dec_label_pc_11630:                               ; preds = %bb344, %dec_label_pc_11e20, %bb343, %dec_label_pc_11624
  %v0_11630 = load i32, i32* @r4, align 4
  %v1_11630 = inttoptr i32 %v0_11630 to i8*
  %v2_11630 = load i8, i8* %v1_11630, align 1
  %v3_11630 = zext i8 %v2_11630 to i32
  store i32 %v3_11630, i32* %r3.global-to-local, align 4
  %v2_11634 = icmp ugt i8 %v2_11630, -4
  store i1 %v2_11634, i1* %cpsr_c.global-to-local, align 1
  %v7_11634 = icmp eq i8 %v2_11630, -3
  store i1 %v7_11634, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11634, label %bb315, label %dec_label_pc_11640

bb315:                                            ; preds = %dec_label_pc_11630
  %v1_11638 = load i32, i32* @r8, align 4
  %v2_11638 = trunc i32 %v1_11638 to i8
  store i8 %v2_11638, i8* %v1_11630, align 1
  %v0_1163c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1163c.pr, label %bb317, label %.dec_label_pc_11640_crit_edge

.dec_label_pc_11640_crit_edge:                    ; preds = %bb315
  %v0_11640.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11640

dec_label_pc_11640:                               ; preds = %.dec_label_pc_11640_crit_edge, %dec_label_pc_11630
  %v0_11640 = phi i32 [ %v0_11640.pre, %.dec_label_pc_11640_crit_edge ], [ %v3_11630, %dec_label_pc_11630 ]
  %v2_11640 = icmp ugt i32 %v0_11640, 250
  store i1 %v2_11640, i1* %cpsr_c.global-to-local, align 1
  %v7_11640 = icmp eq i32 %v0_11640, 251
  store i1 %v7_11640, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11640, label %bb316, label %bb317

bb316:                                            ; preds = %dec_label_pc_11640
  %v1_11644 = load i32, i32* %sl.global-to-local, align 4
  %v2_11644 = trunc i32 %v1_11644 to i8
  %v3_11644 = load i32, i32* @r4, align 4
  %v4_11644 = inttoptr i32 %v3_11644 to i8*
  store i8 %v2_11644, i8* %v4_11644, align 1
  br label %bb317

bb317:                                            ; preds = %bb315, %dec_label_pc_11640, %bb316
  %v0_11648 = load i32, i32* @r4, align 4
  %v1_11648 = add i32 %v0_11648, 1
  %v2_11648 = inttoptr i32 %v1_11648 to i8*
  %v3_11648 = load i8, i8* %v2_11648, align 1
  %v4_11648 = zext i8 %v3_11648 to i32
  store i32 %v4_11648, i32* %r3.global-to-local, align 4
  %v2_1164c = icmp ugt i8 %v3_11648, -4
  store i1 %v2_1164c, i1* %cpsr_c.global-to-local, align 1
  %v7_1164c = icmp eq i8 %v3_11648, -3
  store i1 %v7_1164c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1164c, label %bb318, label %dec_label_pc_11658

bb318:                                            ; preds = %bb317
  %v1_11650 = load i32, i32* @r8, align 4
  %v2_11650 = trunc i32 %v1_11650 to i8
  store i8 %v2_11650, i8* %v2_11648, align 1
  %v0_11654.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11654.pr, label %bb320, label %.dec_label_pc_11658_crit_edge

.dec_label_pc_11658_crit_edge:                    ; preds = %bb318
  %v0_11658.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11658

dec_label_pc_11658:                               ; preds = %.dec_label_pc_11658_crit_edge, %bb317
  %v0_11658 = phi i32 [ %v0_11658.pre, %.dec_label_pc_11658_crit_edge ], [ %v4_11648, %bb317 ]
  %v2_11658 = icmp ugt i32 %v0_11658, 250
  store i1 %v2_11658, i1* %cpsr_c.global-to-local, align 1
  %v7_11658 = icmp eq i32 %v0_11658, 251
  store i1 %v7_11658, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11658, label %bb319, label %bb320

bb319:                                            ; preds = %dec_label_pc_11658
  %v1_1165c = load i32, i32* %sl.global-to-local, align 4
  %v2_1165c = trunc i32 %v1_1165c to i8
  %v3_1165c = load i32, i32* @r4, align 4
  %v4_1165c = add i32 %v3_1165c, 1
  %v5_1165c = inttoptr i32 %v4_1165c to i8*
  store i8 %v2_1165c, i8* %v5_1165c, align 1
  br label %bb320

bb320:                                            ; preds = %bb318, %dec_label_pc_11658, %bb319
  %v0_11660 = load i32, i32* @r5, align 4
  %v1_11660 = add i32 %v0_11660, 4
  %v2_11660 = inttoptr i32 %v1_11660 to i32*
  %v3_11660 = load i32, i32* %v2_11660, align 4
  store i32 %v3_11660, i32* %r0.global-to-local, align 4
  %v0_11664 = load i32, i32* @r6, align 4
  br label %dec_label_pc_1166c

dec_label_pc_1166c:                               ; preds = %dec_label_pc_11ef8, %bb320
  %v0_11670 = phi i32 [ %v3_11f10, %dec_label_pc_11ef8 ], [ %v3_11660, %bb320 ]
  %storemerge5 = phi i32 [ %v2_11de4, %dec_label_pc_11ef8 ], [ %v0_11664, %bb320 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_11ef8 ], [ 3, %bb320 ]
  store i32 %storemerge5, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11670 = inttoptr i32 %storemerge5 to i32*
  %v5_11670 = call i32 @function_13d20(i32 %v0_11670, i32* %v4_11670, i32 %storemerge, i32 16384)
  store i32 %v5_11670, i32* %r0.global-to-local, align 4
  %v0_11674 = load i32, i32* @r5, align 4
  %v1_11674 = add i32 %v0_11674, 24
  %v2_11674 = inttoptr i32 %v1_11674 to i32*
  %v3_11674 = load i32, i32* %v2_11674, align 4
  store i32 %v3_11674, i32* %ip.global-to-local, align 4
  %v0_11678 = load i32, i32* @r7, align 4
  %v1_11678 = add i32 %v0_11678, 3
  store i32 %v1_11678, i32* @r7, align 4
  %v3_1167c = icmp uge i32 %v1_11678, %v3_11674
  store i1 %v3_1167c, i1* %cpsr_c.global-to-local, align 1
  %v9_1167c = icmp eq i32 %v1_11678, %v3_11674
  store i1 %v9_1167c, i1* %cpsr_z.global-to-local, align 1
  %v0_11680 = load i32, i32* @r6, align 4
  %v1_11680 = add i32 %v0_11680, 3
  store i32 %v1_11680, i32* @r6, align 4
  %v0_11684 = load i32, i32* @r4, align 4
  %v1_11684 = add i32 %v0_11684, 3
  store i32 %v1_11684, i32* @r4, align 4
  %v5_11688 = icmp slt i32 %v1_11678, %v3_11674
  br i1 %v5_11688, label %dec_label_pc_115ec, label %dec_label_pc_1168c

dec_label_pc_1168c:                               ; preds = %dec_label_pc_115e4.loopexit, %dec_label_pc_115ec, %dec_label_pc_1166c, %dec_label_pc_11624, %dec_label_pc_115f8, %dec_label_pc_115c4, %dec_label_pc_11dcc.dec_label_pc_1168c.loopexit_crit_edge
  %v6_11694 = phi i32 [ %v0_11df0, %dec_label_pc_11dcc.dec_label_pc_1168c.loopexit_crit_edge ], [ %v0_1158c, %dec_label_pc_115c4 ], [ %v6_11694169, %dec_label_pc_115ec ], [ %v0_11674, %dec_label_pc_1166c ], [ %v6_11694169, %dec_label_pc_11624 ], [ %v6_11694169, %dec_label_pc_115f8 ], [ %v6_11694169, %dec_label_pc_115e4.loopexit ]
  %v0_1169c.pre = phi i32 [ %v0_1168c.pre.pre, %dec_label_pc_11dcc.dec_label_pc_1168c.loopexit_crit_edge ], [ 0, %dec_label_pc_115c4 ], [ %v1_11614, %dec_label_pc_115ec ], [ %v1_11678, %dec_label_pc_1166c ], [ %v1_11614, %dec_label_pc_11624 ], [ %v1_11614, %dec_label_pc_115f8 ], [ %v2_11614, %dec_label_pc_115e4.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1168c = icmp eq i32 %v0_1169c.pre, 0
  store i1 %v2_1168c, i1* %cpsr_z.global-to-local, align 1
  %tmp321 = icmp slt i32 %v0_1169c.pre, 1
  br i1 %tmp321, label %dec_label_pc_1169c, label %.thread204

.thread204:                                       ; preds = %dec_label_pc_1168c
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_11694 = add i32 %v6_11694, 12
  %v8_11694 = inttoptr i32 %v7_11694 to i32*
  store i32 3, i32* %v8_11694, align 4
  br label %dec_label_pc_11cf4

dec_label_pc_1169c:                               ; preds = %dec_label_pc_1168c, %dec_label_pc_11d6c, %dec_label_pc_11c44, %dec_label_pc_11b60, %dec_label_pc_11aac, %dec_label_pc_119f8, %dec_label_pc_11944, %dec_label_pc_118ac, %dec_label_pc_1181c
  %v0_1169c = phi i32 [ %v1_11d60, %dec_label_pc_11d6c ], [ %v0_11c3c, %dec_label_pc_11c44 ], [ %v1_11b54, %dec_label_pc_11b60 ], [ %v1_11aa0, %dec_label_pc_11aac ], [ %v1_119ec, %dec_label_pc_119f8 ], [ %v1_11938, %dec_label_pc_11944 ], [ %v0_118ac, %dec_label_pc_118ac ], [ %v0_1181c, %dec_label_pc_1181c ], [ %v0_1169c.pre, %dec_label_pc_1168c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1169c = icmp eq i32 %v0_1169c, 0
  store i1 %v2_1169c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1169c, label %dec_label_pc_11508.loopexit, label %dec_label_pc_116a4

dec_label_pc_116a4:                               ; preds = %dec_label_pc_1169c
  %v0_116a4 = load i32, i32* @r5, align 4
  %v1_116a4 = add i32 %v0_116a4, 24
  %v2_116a4 = inttoptr i32 %v1_116a4 to i32*
  %v3_116a4 = load i32, i32* %v2_116a4, align 4
  store i32 %v3_116a4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11cf4

dec_label_pc_116ac:                               ; preds = %dec_label_pc_1158c
  %v1_116ac = add i32 %v0_1158c, 24
  %v2_116ac = inttoptr i32 %v1_116ac to i32*
  %v3_116ac = load i32, i32* %v2_116ac, align 4
  store i32 %v3_116ac, i32* %ip.global-to-local, align 4
  %v1_116b0 = add i32 %v3_116ac, -1
  store i32 %v1_116b0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_116b4 = icmp eq i32 %v1_116b0, 0
  store i1 %v2_116b4, i1* %cpsr_z.global-to-local, align 1
  %v5_116b8 = icmp sgt i32 %v1_116b0, 0
  br i1 %v5_116b8, label %dec_label_pc_117fc, label %dec_label_pc_114c8

dec_label_pc_117dc:                               ; preds = %bb322
  %v2_117dc = icmp ugt i8 %v3_11800, 35
  store i1 %v2_117dc, i1* %cpsr_c.global-to-local, align 1
  %v7_117dc = icmp eq i8 %v3_11800, 36
  store i1 %v7_117dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117dc, label %dec_label_pc_11810, label %dec_label_pc_117e4

dec_label_pc_117e4:                               ; preds = %dec_label_pc_117dc
  %v2_117e4 = icmp ugt i8 %v3_11800, 34
  store i1 %v2_117e4, i1* %cpsr_c.global-to-local, align 1
  %v7_117e4 = icmp eq i8 %v3_11800, 35
  store i1 %v7_117e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117e4, label %dec_label_pc_11810, label %dec_label_pc_117ec

dec_label_pc_117ec:                               ; preds = %dec_label_pc_117e4
  %v2_117ec = icmp ugt i8 %v3_11800, 36
  store i1 %v2_117ec, i1* %cpsr_c.global-to-local, align 1
  %v7_117ec = icmp eq i8 %v3_11800, 37
  store i1 %v7_117ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117ec, label %dec_label_pc_11810, label %dec_label_pc_117f4

dec_label_pc_117f4:                               ; preds = %dec_label_pc_117ec
  %v1_117f4 = add i32 %v0_11810, -1
  store i32 %v1_117f4, i32* %r0.global-to-local, align 4
  %v2_117f4 = icmp ne i32 %v0_11810, 0
  store i1 %v2_117f4, i1* %cpsr_c.global-to-local, align 1
  %v7_117f4 = icmp eq i32 %v0_11810, 1
  store i1 %v7_117f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_117f4, label %dec_label_pc_114c8, label %dec_label_pc_117fc

dec_label_pc_117fc:                               ; preds = %dec_label_pc_116ac, %dec_label_pc_117f4
  %v0_11810 = phi i32 [ %v1_117f4, %dec_label_pc_117f4 ], [ %v1_116b0, %dec_label_pc_116ac ]
  %v2_117fc = add i32 %v0_11810, %v0_1158c
  store i32 %v2_117fc, i32* %r3.global-to-local, align 4
  %v1_11800 = add i32 %v2_117fc, 28
  %v2_11800 = inttoptr i32 %v1_11800 to i8*
  %v3_11800 = load i8, i8* %v2_11800, align 1
  %v4_11800 = zext i8 %v3_11800 to i32
  store i32 %v4_11800, i32* %r3.global-to-local, align 4
  %v2_11804 = icmp ugt i8 %v3_11800, 61
  store i1 %v2_11804, i1* %cpsr_c.global-to-local, align 1
  %v7_11804 = icmp eq i8 %v3_11800, 62
  store i1 %v7_11804, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11804, label %dec_label_pc_11810, label %bb322

bb322:                                            ; preds = %dec_label_pc_117fc
  %v3_11808 = icmp ugt i8 %v3_11800, 57
  store i1 %v3_11808, i1* %cpsr_c.global-to-local, align 1
  %v8_11808 = icmp eq i8 %v3_11800, 58
  store i1 %v8_11808, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11808, label %dec_label_pc_11810, label %dec_label_pc_117dc

dec_label_pc_11810:                               ; preds = %dec_label_pc_117fc, %bb322, %dec_label_pc_117ec, %dec_label_pc_117e4, %dec_label_pc_117dc
  %v1_11810 = add i32 %v0_11810, 1
  store i32 %v1_11810, i32* @r7, align 4
  %v2_11814 = icmp eq i32 %v1_11810, -1
  store i1 %v2_11814, i1* %cpsr_c.global-to-local, align 1
  %v7_11814 = icmp eq i32 %v0_11810, -2
  store i1 %v7_11814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11814, label %dec_label_pc_114c8, label %dec_label_pc_1181c

dec_label_pc_1181c:                               ; preds = %dec_label_pc_11810, %dec_label_pc_114e8, %dec_label_pc_114c8
  %v0_1181c = phi i32 [ %v5_114f8, %dec_label_pc_114e8 ], [ %v5_114d8, %dec_label_pc_114c8 ], [ %v1_11810, %dec_label_pc_11810 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1181c = icmp eq i32 %v0_1181c, 0
  store i1 %v2_1181c, i1* %cpsr_z.global-to-local, align 1
  %tmp323 = icmp slt i32 %v0_1181c, 1
  br i1 %tmp323, label %dec_label_pc_1169c, label %dec_label_pc_11824

dec_label_pc_11824:                               ; preds = %dec_label_pc_1181c
  %v0_11824 = load i32, i32* @r5, align 4
  %v1_11824 = inttoptr i32 %v0_11824 to i32*
  %v2_11824 = load i32, i32* %v1_11824, align 4
  store i32 %v2_11824, i32* %r3.global-to-local, align 4
  %v1_11828 = add i32 %v0_11824, 4
  %v2_11828 = inttoptr i32 %v1_11828 to i32*
  %v3_11828 = load i32, i32* %v2_11828, align 4
  store i32 %v3_11828, i32* %r0.global-to-local, align 4
  %v1_1182c = add i32 %v2_11824, 12
  %v2_1182c = inttoptr i32 %v1_1182c to i8*
  %v3_1182c = load i8, i8* %v2_1182c, align 1
  %v4_1182c = zext i8 %v3_1182c to i32
  store i32 %v4_1182c, i32* %r2.global-to-local, align 4
  %v1_11830 = inttoptr i32 %v2_11824 to i32*
  %v2_11830 = load i32, i32* %v1_11830, align 4
  store i32 %v2_11830, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_11838 = inttoptr i32 %v2_11830 to i32*
  %v5_11838 = call i32 @function_13d20(i32 %v3_11828, i32* %v4_11838, i32 %v4_1182c, i32 16384)
  store i32 %v5_11838, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_11840 = load i32, i32* @r5, align 4
  %v1_11840 = add i32 %v0_11840, 4
  %v2_11840 = inttoptr i32 %v1_11840 to i32*
  %v3_11840 = load i32, i32* %v2_11840, align 4
  store i32 %v3_11840, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_1184c = call i32 @function_13d20(i32 %v3_11840, i32* bitcast ([3 x i8]* @global_var_15d70.33 to i32*), i32 2, i32 16384)
  store i32 %v5_1184c, i32* %r0.global-to-local, align 4
  %v0_11850 = load i32, i32* @r5, align 4
  %v1_11850 = add i32 %v0_11850, 24
  %v2_11850 = inttoptr i32 %v1_11850 to i32*
  %v3_11850 = load i32, i32* %v2_11850, align 4
  store i32 %v3_11850, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_11858 = add i32 %v0_11850, 12
  %v3_11858 = inttoptr i32 %v2_11858 to i32*
  store i32 4, i32* %v3_11858, align 4
  br label %dec_label_pc_11cf4

dec_label_pc_11860:                               ; preds = %dec_label_pc_1158c
  %v1_11860 = add i32 %v0_1158c, 24
  %v2_11860 = inttoptr i32 %v1_11860 to i32*
  %v3_11860 = load i32, i32* %v2_11860, align 4
  store i32 %v3_11860, i32* %ip.global-to-local, align 4
  %v1_11864 = add i32 %v3_11860, -1
  store i32 %v1_11864, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11868 = icmp eq i32 %v1_11864, 0
  store i1 %v2_11868, i1* %cpsr_z.global-to-local, align 1
  %v5_1186c = icmp sgt i32 %v1_11864, 0
  br i1 %v5_1186c, label %dec_label_pc_1188c, label %dec_label_pc_11ed4

dec_label_pc_11874:                               ; preds = %bb324
  %v2_11874 = icmp ugt i8 %v3_11890, 35
  store i1 %v2_11874, i1* %cpsr_c.global-to-local, align 1
  %v7_11874 = icmp eq i8 %v3_11890, 36
  store i1 %v7_11874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11874, label %dec_label_pc_118a0, label %dec_label_pc_1187c

dec_label_pc_1187c:                               ; preds = %dec_label_pc_11874
  %v2_1187c = icmp ugt i8 %v3_11890, 34
  store i1 %v2_1187c, i1* %cpsr_c.global-to-local, align 1
  %v7_1187c = icmp eq i8 %v3_11890, 35
  store i1 %v7_1187c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1187c, label %dec_label_pc_118a0, label %dec_label_pc_11884

dec_label_pc_11884:                               ; preds = %dec_label_pc_1187c
  %v1_11884 = add i32 %v0_118a0, -1
  store i32 %v1_11884, i32* %r0.global-to-local, align 4
  %v2_11884 = icmp ne i32 %v0_118a0, 0
  store i1 %v2_11884, i1* %cpsr_c.global-to-local, align 1
  %v7_11884 = icmp eq i32 %v0_118a0, 1
  store i1 %v7_11884, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11884, label %dec_label_pc_11ed4, label %dec_label_pc_1188c

dec_label_pc_1188c:                               ; preds = %dec_label_pc_11860, %dec_label_pc_11884
  %v0_118a0 = phi i32 [ %v1_11884, %dec_label_pc_11884 ], [ %v1_11864, %dec_label_pc_11860 ]
  %v2_1188c = add i32 %v0_118a0, %v0_1158c
  store i32 %v2_1188c, i32* %r3.global-to-local, align 4
  %v1_11890 = add i32 %v2_1188c, 28
  %v2_11890 = inttoptr i32 %v1_11890 to i8*
  %v3_11890 = load i8, i8* %v2_11890, align 1
  %v4_11890 = zext i8 %v3_11890 to i32
  store i32 %v4_11890, i32* %r3.global-to-local, align 4
  %v2_11894 = icmp ugt i8 %v3_11890, 61
  store i1 %v2_11894, i1* %cpsr_c.global-to-local, align 1
  %v7_11894 = icmp eq i8 %v3_11890, 62
  store i1 %v7_11894, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11894, label %dec_label_pc_118a0, label %bb324

bb324:                                            ; preds = %dec_label_pc_1188c
  %v3_11898 = icmp ugt i8 %v3_11890, 57
  store i1 %v3_11898, i1* %cpsr_c.global-to-local, align 1
  %v8_11898 = icmp eq i8 %v3_11890, 58
  store i1 %v8_11898, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11898, label %dec_label_pc_118a0, label %dec_label_pc_11874

dec_label_pc_118a0:                               ; preds = %dec_label_pc_1188c, %bb324, %dec_label_pc_1187c, %dec_label_pc_11874
  %v1_118a0 = add i32 %v0_118a0, 1
  store i32 %v1_118a0, i32* @r7, align 4
  %v2_118a4 = icmp eq i32 %v1_118a0, -1
  store i1 %v2_118a4, i1* %cpsr_c.global-to-local, align 1
  %v7_118a4 = icmp eq i32 %v0_118a0, -2
  store i1 %v7_118a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_118a4, label %dec_label_pc_11ed4, label %dec_label_pc_118ac

dec_label_pc_118ac:                               ; preds = %dec_label_pc_118a0, %dec_label_pc_11ed4
  %v0_118ac = phi i32 [ %v5_11ee4, %dec_label_pc_11ed4 ], [ %v1_118a0, %dec_label_pc_118a0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_118ac = icmp eq i32 %v0_118ac, 0
  store i1 %v2_118ac, i1* %cpsr_z.global-to-local, align 1
  %tmp325 = icmp slt i32 %v0_118ac, 1
  br i1 %tmp325, label %dec_label_pc_1169c, label %dec_label_pc_118b4

dec_label_pc_118b4:                               ; preds = %dec_label_pc_118ac
  %v0_118b4 = load i32, i32* @r5, align 4
  %v1_118b4 = inttoptr i32 %v0_118b4 to i32*
  %v2_118b4 = load i32, i32* %v1_118b4, align 4
  store i32 %v2_118b4, i32* %r3.global-to-local, align 4
  %v1_118b8 = add i32 %v0_118b4, 4
  %v2_118b8 = inttoptr i32 %v1_118b8 to i32*
  %v3_118b8 = load i32, i32* %v2_118b8, align 4
  store i32 %v3_118b8, i32* %r0.global-to-local, align 4
  %v1_118bc = add i32 %v2_118b4, 13
  %v2_118bc = inttoptr i32 %v1_118bc to i8*
  %v3_118bc = load i8, i8* %v2_118bc, align 1
  %v4_118bc = zext i8 %v3_118bc to i32
  store i32 %v4_118bc, i32* %r2.global-to-local, align 4
  %v1_118c0 = add i32 %v2_118b4, 4
  %v2_118c0 = inttoptr i32 %v1_118c0 to i32*
  %v3_118c0 = load i32, i32* %v2_118c0, align 4
  store i32 %v3_118c0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_118c8 = inttoptr i32 %v3_118c0 to i32*
  %v5_118c8 = call i32 @function_13d20(i32 %v3_118b8, i32* %v4_118c8, i32 %v4_118bc, i32 16384)
  store i32 %v5_118c8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_118d0 = load i32, i32* @r5, align 4
  %v1_118d0 = add i32 %v0_118d0, 4
  %v2_118d0 = inttoptr i32 %v1_118d0 to i32*
  %v3_118d0 = load i32, i32* %v2_118d0, align 4
  store i32 %v3_118d0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_118dc = call i32 @function_13d20(i32 %v3_118d0, i32* bitcast ([3 x i8]* @global_var_15d70.33 to i32*), i32 2, i32 16384)
  store i32 %v5_118dc, i32* %r0.global-to-local, align 4
  %v0_118e0 = load i32, i32* @r5, align 4
  %v1_118e0 = add i32 %v0_118e0, 24
  %v2_118e0 = inttoptr i32 %v1_118e0 to i32*
  %v3_118e0 = load i32, i32* %v2_118e0, align 4
  store i32 %v3_118e0, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_118e8 = add i32 %v0_118e0, 12
  %v3_118e8 = inttoptr i32 %v2_118e8 to i32*
  store i32 5, i32* %v3_118e8, align 4
  br label %dec_label_pc_11cf4

dec_label_pc_118f0:                               ; preds = %dec_label_pc_1158c
  %v1_118f0 = add i32 %v0_1158c, 24
  %v2_118f0 = inttoptr i32 %v1_118f0 to i32*
  %v3_118f0 = load i32, i32* %v2_118f0, align 4
  store i32 %v3_118f0, i32* %ip.global-to-local, align 4
  %v1_118f4 = add i32 %v3_118f0, -1
  store i32 %v1_118f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_118f8 = icmp eq i32 %v1_118f4, 0
  store i1 %v2_118f8, i1* %cpsr_z.global-to-local, align 1
  %v5_118fc = icmp sgt i32 %v1_118f4, 0
  br i1 %v5_118fc, label %dec_label_pc_11924, label %dec_label_pc_1150cthread-pre-split.thread

dec_label_pc_11904:                               ; preds = %bb326
  %v2_11904 = icmp ugt i8 %v3_11928, 35
  store i1 %v2_11904, i1* %cpsr_c.global-to-local, align 1
  %v7_11904 = icmp eq i8 %v3_11928, 36
  store i1 %v7_11904, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11904, label %dec_label_pc_11938, label %dec_label_pc_1190c

dec_label_pc_1190c:                               ; preds = %dec_label_pc_11904
  %v2_1190c = icmp ugt i8 %v3_11928, 34
  store i1 %v2_1190c, i1* %cpsr_c.global-to-local, align 1
  %v7_1190c = icmp eq i8 %v3_11928, 35
  store i1 %v7_1190c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1190c, label %dec_label_pc_11938, label %dec_label_pc_11914

dec_label_pc_11914:                               ; preds = %dec_label_pc_1190c
  %v2_11914 = icmp ugt i8 %v3_11928, 36
  store i1 %v2_11914, i1* %cpsr_c.global-to-local, align 1
  %v7_11914 = icmp eq i8 %v3_11928, 37
  store i1 %v7_11914, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11914, label %dec_label_pc_11938, label %dec_label_pc_1191c

dec_label_pc_1191c:                               ; preds = %dec_label_pc_11914
  %v1_1191c = add i32 %v0_11938, -1
  store i32 %v1_1191c, i32* %r0.global-to-local, align 4
  %v2_1191c = icmp ne i32 %v0_11938, 0
  store i1 %v2_1191c, i1* %cpsr_c.global-to-local, align 1
  %v7_1191c = icmp eq i32 %v0_11938, 1
  store i1 %v7_1191c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1191c, label %dec_label_pc_1150cthread-pre-split, label %dec_label_pc_11924

dec_label_pc_11924:                               ; preds = %dec_label_pc_118f0, %dec_label_pc_1191c
  %v0_11938 = phi i32 [ %v1_1191c, %dec_label_pc_1191c ], [ %v1_118f4, %dec_label_pc_118f0 ]
  %v2_11924 = add i32 %v0_11938, %v0_1158c
  store i32 %v2_11924, i32* %r3.global-to-local, align 4
  %v1_11928 = add i32 %v2_11924, 28
  %v2_11928 = inttoptr i32 %v1_11928 to i8*
  %v3_11928 = load i8, i8* %v2_11928, align 1
  %v4_11928 = zext i8 %v3_11928 to i32
  store i32 %v4_11928, i32* %r3.global-to-local, align 4
  %v2_1192c = icmp ugt i8 %v3_11928, 61
  store i1 %v2_1192c, i1* %cpsr_c.global-to-local, align 1
  %v7_1192c = icmp eq i8 %v3_11928, 62
  store i1 %v7_1192c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1192c, label %dec_label_pc_11938, label %bb326

bb326:                                            ; preds = %dec_label_pc_11924
  %v3_11930 = icmp ugt i8 %v3_11928, 57
  store i1 %v3_11930, i1* %cpsr_c.global-to-local, align 1
  %v8_11930 = icmp eq i8 %v3_11928, 58
  store i1 %v8_11930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11930, label %dec_label_pc_11938, label %dec_label_pc_11904

dec_label_pc_11938:                               ; preds = %dec_label_pc_11924, %bb326, %dec_label_pc_11914, %dec_label_pc_1190c, %dec_label_pc_11904
  %v1_11938 = add i32 %v0_11938, 1
  store i32 %v1_11938, i32* @r7, align 4
  %v2_1193c = icmp eq i32 %v1_11938, -1
  store i1 %v2_1193c, i1* %cpsr_c.global-to-local, align 1
  %v7_1193c = icmp eq i32 %v0_11938, -2
  store i1 %v7_1193c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1193c, label %dec_label_pc_1150cthread-pre-split, label %dec_label_pc_11944

dec_label_pc_11944:                               ; preds = %dec_label_pc_11938
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11944 = icmp eq i32 %v1_11938, 0
  store i1 %v2_11944, i1* %cpsr_z.global-to-local, align 1
  %tmp327 = icmp slt i32 %v1_11938, 1
  br i1 %tmp327, label %dec_label_pc_1169c, label %dec_label_pc_1194c

dec_label_pc_1194c:                               ; preds = %dec_label_pc_11944
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_11950 = call i32 @function_121c4(i32 21)
  store i32 %v2_11958, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_11960 = call i32 @function_120e0(i32 21, i32* nonnull %stack_var_-56)
  store i32 %v3_11960, i32* %r0.global-to-local, align 4
  %v3_11964 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11964, i32* %r2.global-to-local, align 4
  store i32 %v3_11960, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11970 = load i32, i32* @r5, align 4
  %v1_11970 = add i32 %v0_11970, 4
  %v2_11970 = inttoptr i32 %v1_11970 to i32*
  %v3_11970 = load i32, i32* %v2_11970, align 4
  store i32 %v3_11970, i32* %r0.global-to-local, align 4
  %v4_11974 = inttoptr i32 %v3_11960 to i32*
  %v5_11974 = call i32 @function_13d20(i32 %v3_11970, i32* %v4_11974, i32 %v3_11964, i32 16384)
  store i32 %v5_11974, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11984 = load i32, i32* @r5, align 4
  %v1_11984 = add i32 %v0_11984, 4
  %v2_11984 = inttoptr i32 %v1_11984 to i32*
  %v3_11984 = load i32, i32* %v2_11984, align 4
  store i32 %v3_11984, i32* %r0.global-to-local, align 4
  %v5_11988 = call i32 @function_13d20(i32 %v3_11984, i32* bitcast ([3 x i8]* @global_var_15d70.33 to i32*), i32 2, i32 16384)
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_11990 = call i32 @function_1210c(i32 21)
  store i32 %v1_11990, i32* %r0.global-to-local, align 4
  %v0_11994 = load i32, i32* @r5, align 4
  %v1_11994 = add i32 %v0_11994, 24
  %v2_11994 = inttoptr i32 %v1_11994 to i32*
  %v3_11994 = load i32, i32* %v2_11994, align 4
  store i32 %v3_11994, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_1199c = add i32 %v0_11994, 12
  %v3_1199c = inttoptr i32 %v2_1199c to i32*
  store i32 6, i32* %v3_1199c, align 4
  br label %dec_label_pc_11cf4

dec_label_pc_119a4:                               ; preds = %dec_label_pc_1158c
  %v1_119a4 = add i32 %v0_1158c, 24
  %v2_119a4 = inttoptr i32 %v1_119a4 to i32*
  %v3_119a4 = load i32, i32* %v2_119a4, align 4
  store i32 %v3_119a4, i32* %ip.global-to-local, align 4
  %v1_119a8 = add i32 %v3_119a4, -1
  store i32 %v1_119a8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_119ac = icmp eq i32 %v1_119a8, 0
  store i1 %v2_119ac, i1* %cpsr_z.global-to-local, align 1
  %v5_119b0 = icmp sgt i32 %v1_119a8, 0
  br i1 %v5_119b0, label %dec_label_pc_119d8, label %dec_label_pc_1150cthread-pre-split.thread

dec_label_pc_119b8:                               ; preds = %bb328
  %v2_119b8 = icmp ugt i8 %v3_119dc, 35
  store i1 %v2_119b8, i1* %cpsr_c.global-to-local, align 1
  %v7_119b8 = icmp eq i8 %v3_119dc, 36
  store i1 %v7_119b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119b8, label %dec_label_pc_119ec, label %dec_label_pc_119c0

dec_label_pc_119c0:                               ; preds = %dec_label_pc_119b8
  %v2_119c0 = icmp ugt i8 %v3_119dc, 34
  store i1 %v2_119c0, i1* %cpsr_c.global-to-local, align 1
  %v7_119c0 = icmp eq i8 %v3_119dc, 35
  store i1 %v7_119c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119c0, label %dec_label_pc_119ec, label %dec_label_pc_119c8

dec_label_pc_119c8:                               ; preds = %dec_label_pc_119c0
  %v2_119c8 = icmp ugt i8 %v3_119dc, 36
  store i1 %v2_119c8, i1* %cpsr_c.global-to-local, align 1
  %v7_119c8 = icmp eq i8 %v3_119dc, 37
  store i1 %v7_119c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119c8, label %dec_label_pc_119ec, label %dec_label_pc_119d0

dec_label_pc_119d0:                               ; preds = %dec_label_pc_119c8
  %v1_119d0 = add i32 %v0_119ec, -1
  store i32 %v1_119d0, i32* %r0.global-to-local, align 4
  %v2_119d0 = icmp ne i32 %v0_119ec, 0
  store i1 %v2_119d0, i1* %cpsr_c.global-to-local, align 1
  %v7_119d0 = icmp eq i32 %v0_119ec, 1
  store i1 %v7_119d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119d0, label %dec_label_pc_1150cthread-pre-split, label %dec_label_pc_119d8

dec_label_pc_119d8:                               ; preds = %dec_label_pc_119a4, %dec_label_pc_119d0
  %v0_119ec = phi i32 [ %v1_119d0, %dec_label_pc_119d0 ], [ %v1_119a8, %dec_label_pc_119a4 ]
  %v2_119d8 = add i32 %v0_119ec, %v0_1158c
  store i32 %v2_119d8, i32* %r3.global-to-local, align 4
  %v1_119dc = add i32 %v2_119d8, 28
  %v2_119dc = inttoptr i32 %v1_119dc to i8*
  %v3_119dc = load i8, i8* %v2_119dc, align 1
  %v4_119dc = zext i8 %v3_119dc to i32
  store i32 %v4_119dc, i32* %r3.global-to-local, align 4
  %v2_119e0 = icmp ugt i8 %v3_119dc, 61
  store i1 %v2_119e0, i1* %cpsr_c.global-to-local, align 1
  %v7_119e0 = icmp eq i8 %v3_119dc, 62
  store i1 %v7_119e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119e0, label %dec_label_pc_119ec, label %bb328

bb328:                                            ; preds = %dec_label_pc_119d8
  %v3_119e4 = icmp ugt i8 %v3_119dc, 57
  store i1 %v3_119e4, i1* %cpsr_c.global-to-local, align 1
  %v8_119e4 = icmp eq i8 %v3_119dc, 58
  store i1 %v8_119e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_119e4, label %dec_label_pc_119ec, label %dec_label_pc_119b8

dec_label_pc_119ec:                               ; preds = %dec_label_pc_119d8, %bb328, %dec_label_pc_119c8, %dec_label_pc_119c0, %dec_label_pc_119b8
  %v1_119ec = add i32 %v0_119ec, 1
  store i32 %v1_119ec, i32* @r7, align 4
  %v2_119f0 = icmp eq i32 %v1_119ec, -1
  store i1 %v2_119f0, i1* %cpsr_c.global-to-local, align 1
  %v7_119f0 = icmp eq i32 %v0_119ec, -2
  store i1 %v7_119f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119f0, label %dec_label_pc_1150cthread-pre-split, label %dec_label_pc_119f8

dec_label_pc_119f8:                               ; preds = %dec_label_pc_119ec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_119f8 = icmp eq i32 %v1_119ec, 0
  store i1 %v2_119f8, i1* %cpsr_z.global-to-local, align 1
  %tmp329 = icmp slt i32 %v1_119ec, 1
  br i1 %tmp329, label %dec_label_pc_1169c, label %dec_label_pc_11a00

dec_label_pc_11a00:                               ; preds = %dec_label_pc_119f8
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_11a04 = call i32 @function_121c4(i32 22)
  store i32 %v2_11a0c, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_11a14 = call i32 @function_120e0(i32 22, i32* nonnull %stack_var_-48)
  store i32 %v3_11a14, i32* %r0.global-to-local, align 4
  %v3_11a18 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_11a18, i32* %r2.global-to-local, align 4
  store i32 %v3_11a14, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11a24 = load i32, i32* @r5, align 4
  %v1_11a24 = add i32 %v0_11a24, 4
  %v2_11a24 = inttoptr i32 %v1_11a24 to i32*
  %v3_11a24 = load i32, i32* %v2_11a24, align 4
  store i32 %v3_11a24, i32* %r0.global-to-local, align 4
  %v4_11a28 = inttoptr i32 %v3_11a14 to i32*
  %v5_11a28 = call i32 @function_13d20(i32 %v3_11a24, i32* %v4_11a28, i32 %v3_11a18, i32 16384)
  store i32 %v5_11a28, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11a38 = load i32, i32* @r5, align 4
  %v1_11a38 = add i32 %v0_11a38, 4
  %v2_11a38 = inttoptr i32 %v1_11a38 to i32*
  %v3_11a38 = load i32, i32* %v2_11a38, align 4
  store i32 %v3_11a38, i32* %r0.global-to-local, align 4
  %v5_11a3c = call i32 @function_13d20(i32 %v3_11a38, i32* bitcast ([3 x i8]* @global_var_15d70.33 to i32*), i32 2, i32 16384)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_11a44 = call i32 @function_1210c(i32 22)
  store i32 %v1_11a44, i32* %r0.global-to-local, align 4
  %v0_11a48 = load i32, i32* @r5, align 4
  %v1_11a48 = add i32 %v0_11a48, 24
  %v2_11a48 = inttoptr i32 %v1_11a48 to i32*
  %v3_11a48 = load i32, i32* %v2_11a48, align 4
  store i32 %v3_11a48, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_11a50 = add i32 %v0_11a48, 12
  %v3_11a50 = inttoptr i32 %v2_11a50 to i32*
  store i32 7, i32* %v3_11a50, align 4
  br label %dec_label_pc_11cf4

dec_label_pc_11a58:                               ; preds = %dec_label_pc_1158c
  %v1_11a58 = add i32 %v0_1158c, 24
  %v2_11a58 = inttoptr i32 %v1_11a58 to i32*
  %v3_11a58 = load i32, i32* %v2_11a58, align 4
  store i32 %v3_11a58, i32* %ip.global-to-local, align 4
  %v1_11a5c = add i32 %v3_11a58, -1
  store i32 %v1_11a5c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11a60 = icmp eq i32 %v1_11a5c, 0
  store i1 %v2_11a60, i1* %cpsr_z.global-to-local, align 1
  %v5_11a64 = icmp sgt i32 %v1_11a5c, 0
  br i1 %v5_11a64, label %dec_label_pc_11a8c, label %dec_label_pc_1150cthread-pre-split.thread

dec_label_pc_11a6c:                               ; preds = %bb330
  %v2_11a6c = icmp ugt i8 %v3_11a90, 35
  store i1 %v2_11a6c, i1* %cpsr_c.global-to-local, align 1
  %v7_11a6c = icmp eq i8 %v3_11a90, 36
  store i1 %v7_11a6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a6c, label %dec_label_pc_11aa0, label %dec_label_pc_11a74

dec_label_pc_11a74:                               ; preds = %dec_label_pc_11a6c
  %v2_11a74 = icmp ugt i8 %v3_11a90, 34
  store i1 %v2_11a74, i1* %cpsr_c.global-to-local, align 1
  %v7_11a74 = icmp eq i8 %v3_11a90, 35
  store i1 %v7_11a74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a74, label %dec_label_pc_11aa0, label %dec_label_pc_11a7c

dec_label_pc_11a7c:                               ; preds = %dec_label_pc_11a74
  %v2_11a7c = icmp ugt i8 %v3_11a90, 36
  store i1 %v2_11a7c, i1* %cpsr_c.global-to-local, align 1
  %v7_11a7c = icmp eq i8 %v3_11a90, 37
  store i1 %v7_11a7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a7c, label %dec_label_pc_11aa0, label %dec_label_pc_11a84

dec_label_pc_11a84:                               ; preds = %dec_label_pc_11a7c
  %v1_11a84 = add i32 %v0_11aa0, -1
  store i32 %v1_11a84, i32* %r0.global-to-local, align 4
  %v2_11a84 = icmp ne i32 %v0_11aa0, 0
  store i1 %v2_11a84, i1* %cpsr_c.global-to-local, align 1
  %v7_11a84 = icmp eq i32 %v0_11aa0, 1
  store i1 %v7_11a84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a84, label %dec_label_pc_1150cthread-pre-split, label %dec_label_pc_11a8c

dec_label_pc_11a8c:                               ; preds = %dec_label_pc_11a58, %dec_label_pc_11a84
  %v0_11aa0 = phi i32 [ %v1_11a84, %dec_label_pc_11a84 ], [ %v1_11a5c, %dec_label_pc_11a58 ]
  %v2_11a8c = add i32 %v0_11aa0, %v0_1158c
  store i32 %v2_11a8c, i32* %r3.global-to-local, align 4
  %v1_11a90 = add i32 %v2_11a8c, 28
  %v2_11a90 = inttoptr i32 %v1_11a90 to i8*
  %v3_11a90 = load i8, i8* %v2_11a90, align 1
  %v4_11a90 = zext i8 %v3_11a90 to i32
  store i32 %v4_11a90, i32* %r3.global-to-local, align 4
  %v2_11a94 = icmp ugt i8 %v3_11a90, 61
  store i1 %v2_11a94, i1* %cpsr_c.global-to-local, align 1
  %v7_11a94 = icmp eq i8 %v3_11a90, 62
  store i1 %v7_11a94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a94, label %dec_label_pc_11aa0, label %bb330

bb330:                                            ; preds = %dec_label_pc_11a8c
  %v3_11a98 = icmp ugt i8 %v3_11a90, 57
  store i1 %v3_11a98, i1* %cpsr_c.global-to-local, align 1
  %v8_11a98 = icmp eq i8 %v3_11a90, 58
  store i1 %v8_11a98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11a98, label %dec_label_pc_11aa0, label %dec_label_pc_11a6c

dec_label_pc_11aa0:                               ; preds = %dec_label_pc_11a8c, %bb330, %dec_label_pc_11a7c, %dec_label_pc_11a74, %dec_label_pc_11a6c
  %v1_11aa0 = add i32 %v0_11aa0, 1
  store i32 %v1_11aa0, i32* @r7, align 4
  %v2_11aa4 = icmp eq i32 %v1_11aa0, -1
  store i1 %v2_11aa4, i1* %cpsr_c.global-to-local, align 1
  %v7_11aa4 = icmp eq i32 %v0_11aa0, -2
  store i1 %v7_11aa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11aa4, label %dec_label_pc_1150cthread-pre-split, label %dec_label_pc_11aac

dec_label_pc_11aac:                               ; preds = %dec_label_pc_11aa0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11aac = icmp eq i32 %v1_11aa0, 0
  store i1 %v2_11aac, i1* %cpsr_z.global-to-local, align 1
  %tmp331 = icmp slt i32 %v1_11aa0, 1
  br i1 %tmp331, label %dec_label_pc_1169c, label %dec_label_pc_11ab4

dec_label_pc_11ab4:                               ; preds = %dec_label_pc_11aac
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_11ab8 = call i32 @function_121c4(i32 23)
  store i32 %v2_11958, i32* %r1.global-to-local, align 4
  store i32 23, i32* %r0.global-to-local, align 4
  %v3_11ac8 = call i32 @function_120e0(i32 23, i32* nonnull %stack_var_-56)
  store i32 %v3_11ac8, i32* %r0.global-to-local, align 4
  %v3_11acc = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11acc, i32* %r2.global-to-local, align 4
  store i32 %v3_11ac8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11ad8 = load i32, i32* @r5, align 4
  %v1_11ad8 = add i32 %v0_11ad8, 4
  %v2_11ad8 = inttoptr i32 %v1_11ad8 to i32*
  %v3_11ad8 = load i32, i32* %v2_11ad8, align 4
  store i32 %v3_11ad8, i32* %r0.global-to-local, align 4
  %v4_11adc = inttoptr i32 %v3_11ac8 to i32*
  %v5_11adc = call i32 @function_13d20(i32 %v3_11ad8, i32* %v4_11adc, i32 %v3_11acc, i32 16384)
  store i32 %v5_11adc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11aec = load i32, i32* @r5, align 4
  %v1_11aec = add i32 %v0_11aec, 4
  %v2_11aec = inttoptr i32 %v1_11aec to i32*
  %v3_11aec = load i32, i32* %v2_11aec, align 4
  store i32 %v3_11aec, i32* %r0.global-to-local, align 4
  %v5_11af0 = call i32 @function_13d20(i32 %v3_11aec, i32* bitcast ([3 x i8]* @global_var_15d70.33 to i32*), i32 2, i32 16384)
  store i32 23, i32* %r0.global-to-local, align 4
  %v1_11af8 = call i32 @function_1210c(i32 23)
  store i32 %v1_11af8, i32* %r0.global-to-local, align 4
  %v0_11afc = load i32, i32* @r5, align 4
  %v1_11afc = add i32 %v0_11afc, 24
  %v2_11afc = inttoptr i32 %v1_11afc to i32*
  %v3_11afc = load i32, i32* %v2_11afc, align 4
  store i32 %v3_11afc, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_11b04 = add i32 %v0_11afc, 12
  %v3_11b04 = inttoptr i32 %v2_11b04 to i32*
  store i32 9, i32* %v3_11b04, align 4
  br label %dec_label_pc_11cf4

dec_label_pc_11b0c:                               ; preds = %dec_label_pc_1158c
  %v1_11b0c = add i32 %v0_1158c, 24
  %v2_11b0c = inttoptr i32 %v1_11b0c to i32*
  %v3_11b0c = load i32, i32* %v2_11b0c, align 4
  store i32 %v3_11b0c, i32* %ip.global-to-local, align 4
  %v1_11b10 = add i32 %v3_11b0c, -1
  store i32 %v1_11b10, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11b14 = icmp eq i32 %v1_11b10, 0
  store i1 %v2_11b14, i1* %cpsr_z.global-to-local, align 1
  %v5_11b18 = icmp sgt i32 %v1_11b10, 0
  br i1 %v5_11b18, label %dec_label_pc_11b40, label %dec_label_pc_1150cthread-pre-split.thread

dec_label_pc_11b20:                               ; preds = %bb332
  %v2_11b20 = icmp ugt i8 %v3_11b44, 35
  store i1 %v2_11b20, i1* %cpsr_c.global-to-local, align 1
  %v7_11b20 = icmp eq i8 %v3_11b44, 36
  store i1 %v7_11b20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b20, label %dec_label_pc_11b54, label %dec_label_pc_11b28

dec_label_pc_11b28:                               ; preds = %dec_label_pc_11b20
  %v2_11b28 = icmp ugt i8 %v3_11b44, 34
  store i1 %v2_11b28, i1* %cpsr_c.global-to-local, align 1
  %v7_11b28 = icmp eq i8 %v3_11b44, 35
  store i1 %v7_11b28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b28, label %dec_label_pc_11b54, label %dec_label_pc_11b30

dec_label_pc_11b30:                               ; preds = %dec_label_pc_11b28
  %v2_11b30 = icmp ugt i8 %v3_11b44, 36
  store i1 %v2_11b30, i1* %cpsr_c.global-to-local, align 1
  %v7_11b30 = icmp eq i8 %v3_11b44, 37
  store i1 %v7_11b30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b30, label %dec_label_pc_11b54, label %dec_label_pc_11b38

dec_label_pc_11b38:                               ; preds = %dec_label_pc_11b30
  %v1_11b38 = add i32 %v0_11b54, -1
  store i32 %v1_11b38, i32* %r0.global-to-local, align 4
  %v2_11b38 = icmp ne i32 %v0_11b54, 0
  store i1 %v2_11b38, i1* %cpsr_c.global-to-local, align 1
  %v7_11b38 = icmp eq i32 %v0_11b54, 1
  store i1 %v7_11b38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b38, label %dec_label_pc_1150cthread-pre-split, label %dec_label_pc_11b40

dec_label_pc_11b40:                               ; preds = %dec_label_pc_11b0c, %dec_label_pc_11b38
  %v0_11b54 = phi i32 [ %v1_11b38, %dec_label_pc_11b38 ], [ %v1_11b10, %dec_label_pc_11b0c ]
  %v2_11b40 = add i32 %v0_11b54, %v0_1158c
  store i32 %v2_11b40, i32* %r3.global-to-local, align 4
  %v1_11b44 = add i32 %v2_11b40, 28
  %v2_11b44 = inttoptr i32 %v1_11b44 to i8*
  %v3_11b44 = load i8, i8* %v2_11b44, align 1
  %v4_11b44 = zext i8 %v3_11b44 to i32
  store i32 %v4_11b44, i32* %r3.global-to-local, align 4
  %v2_11b48 = icmp ugt i8 %v3_11b44, 61
  store i1 %v2_11b48, i1* %cpsr_c.global-to-local, align 1
  %v7_11b48 = icmp eq i8 %v3_11b44, 62
  store i1 %v7_11b48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b48, label %dec_label_pc_11b54, label %bb332

bb332:                                            ; preds = %dec_label_pc_11b40
  %v3_11b4c = icmp ugt i8 %v3_11b44, 57
  store i1 %v3_11b4c, i1* %cpsr_c.global-to-local, align 1
  %v8_11b4c = icmp eq i8 %v3_11b44, 58
  store i1 %v8_11b4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11b4c, label %dec_label_pc_11b54, label %dec_label_pc_11b20

dec_label_pc_11b54:                               ; preds = %dec_label_pc_11b40, %bb332, %dec_label_pc_11b30, %dec_label_pc_11b28, %dec_label_pc_11b20
  %v1_11b54 = add i32 %v0_11b54, 1
  store i32 %v1_11b54, i32* @r7, align 4
  %v2_11b58 = icmp eq i32 %v1_11b54, -1
  store i1 %v2_11b58, i1* %cpsr_c.global-to-local, align 1
  %v7_11b58 = icmp eq i32 %v0_11b54, -2
  store i1 %v7_11b58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11b58, label %dec_label_pc_1150cthread-pre-split, label %dec_label_pc_11b60

dec_label_pc_11b60:                               ; preds = %dec_label_pc_11b54
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11b60 = icmp eq i32 %v1_11b54, 0
  store i1 %v2_11b60, i1* %cpsr_z.global-to-local, align 1
  %tmp333 = icmp slt i32 %v1_11b54, 1
  br i1 %tmp333, label %dec_label_pc_1169c, label %dec_label_pc_11b68

dec_label_pc_11b68:                               ; preds = %dec_label_pc_11b60
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_11b6c = call i32 @function_121c4(i32 20)
  store i32 %v2_11a0c, i32* %r1.global-to-local, align 4
  store i32 20, i32* %r0.global-to-local, align 4
  %v3_11b7c = call i32 @function_120e0(i32 20, i32* nonnull %stack_var_-48)
  store i32 %v3_11b7c, i32* %r0.global-to-local, align 4
  %v3_11b80 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_11b80, i32* %r2.global-to-local, align 4
  store i32 %v3_11b7c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11b8c = load i32, i32* @r5, align 4
  %v1_11b8c = add i32 %v0_11b8c, 4
  %v2_11b8c = inttoptr i32 %v1_11b8c to i32*
  %v3_11b8c = load i32, i32* %v2_11b8c, align 4
  store i32 %v3_11b8c, i32* %r0.global-to-local, align 4
  %v4_11b90 = inttoptr i32 %v3_11b7c to i32*
  %v5_11b90 = call i32 @function_13d20(i32 %v3_11b8c, i32* %v4_11b90, i32 %v3_11b80, i32 16384)
  store i32 %v5_11b90, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11ba0 = load i32, i32* @r5, align 4
  %v1_11ba0 = add i32 %v0_11ba0, 4
  %v2_11ba0 = inttoptr i32 %v1_11ba0 to i32*
  %v3_11ba0 = load i32, i32* %v2_11ba0, align 4
  store i32 %v3_11ba0, i32* %r0.global-to-local, align 4
  %v5_11ba4 = call i32 @function_13d20(i32 %v3_11ba0, i32* bitcast ([3 x i8]* @global_var_15d70.33 to i32*), i32 2, i32 16384)
  store i32 20, i32* %r0.global-to-local, align 4
  %v1_11bac = call i32 @function_1210c(i32 20)
  store i32 %v1_11bac, i32* %r0.global-to-local, align 4
  %v0_11bb0 = load i32, i32* @r5, align 4
  %v1_11bb0 = add i32 %v0_11bb0, 24
  %v2_11bb0 = inttoptr i32 %v1_11bb0 to i32*
  %v3_11bb0 = load i32, i32* %v2_11bb0, align 4
  store i32 %v3_11bb0, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_11bb8 = add i32 %v0_11bb0, 12
  %v3_11bb8 = inttoptr i32 %v2_11bb8 to i32*
  store i32 8, i32* %v3_11bb8, align 4
  br label %dec_label_pc_11cf4

dec_label_pc_11bc0:                               ; preds = %dec_label_pc_1158c
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11bc4 = call i32 @function_121c4(i32 26)
  store i32 %v2_11958, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_11bd4 = call i32 @function_120e0(i32 26, i32* nonnull %stack_var_-56)
  %v3_11bd8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11bd4, i32* %r2.global-to-local, align 4
  %v1_11be0 = add i32 %v3_11bd8, -1
  store i32 %v1_11be0, i32* %r3.global-to-local, align 4
  %v0_11be4 = load i32, i32* @sb, align 4
  store i32 %v0_11be4, i32* %r0.global-to-local, align 4
  %v0_11be8 = load i32, i32* @r5, align 4
  %v1_11be8 = add i32 %v0_11be8, 24
  %v2_11be8 = inttoptr i32 %v1_11be8 to i32*
  %v3_11be8 = load i32, i32* %v2_11be8, align 4
  store i32 %v3_11be8, i32* %r1.global-to-local, align 4
  %v4_11bec = call i32 @function_12bb4(i32 %v0_11be4, i32 %v3_11be8, i32 %v3_11bd4, i32 %v1_11be0)
  %v3_11bf0 = icmp eq i32 %v4_11bec, -1
  store i1 %v3_11bf0, i1* %cpsr_c.global-to-local, align 1
  %v8_11bf0 = icmp eq i32 %v4_11bec, -1
  store i1 %v8_11bf0, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_11bfc = call i32 @function_1210c(i32 26)
  br i1 %v3_11bf0, label %dec_label_pc_11bf8, label %dec_label_pc_11e2c

dec_label_pc_11bf8:                               ; preds = %dec_label_pc_11bc0
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_11c04 = call i32 @function_121c4(i32 25)
  store i32 %v2_11958, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_11c14 = call i32 @function_120e0(i32 25, i32* nonnull %stack_var_-56)
  store i32 %v3_11c14, i32* %r0.global-to-local, align 4
  %v3_11c18 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11c14, i32* %r2.global-to-local, align 4
  %v1_11c20 = add i32 %v3_11c18, -1
  store i32 %v1_11c20, i32* %r3.global-to-local, align 4
  %v0_11c24 = load i32, i32* @r5, align 4
  %v1_11c24 = add i32 %v0_11c24, 24
  %v2_11c24 = inttoptr i32 %v1_11c24 to i32*
  %v3_11c24 = load i32, i32* %v2_11c24, align 4
  store i32 %v3_11c24, i32* %r1.global-to-local, align 4
  %v0_11c28 = load i32, i32* @sb, align 4
  store i32 %v0_11c28, i32* %r0.global-to-local, align 4
  %v4_11c2c = call i32 @function_12bb4(i32 %v0_11c28, i32 %v3_11c24, i32 %v3_11c14, i32 %v1_11c20)
  store i32 %v4_11c2c, i32* @r7, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_11c38 = call i32 @function_1210c(i32 25)
  store i32 %v1_11c38, i32* %r0.global-to-local, align 4
  %v0_11c3c = load i32, i32* @r7, align 4
  %v2_11c3c = icmp eq i32 %v0_11c3c, -1
  store i1 %v2_11c3c, i1* %cpsr_c.global-to-local, align 1
  %v7_11c3c = icmp eq i32 %v0_11c3c, -1
  store i1 %v7_11c3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c3c, label %dec_label_pc_11508.loopexit, label %dec_label_pc_11c44

dec_label_pc_11c44:                               ; preds = %dec_label_pc_11bf8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c44 = icmp eq i32 %v0_11c3c, 0
  store i1 %v2_11c44, i1* %cpsr_z.global-to-local, align 1
  %tmp334 = icmp slt i32 %v0_11c3c, 1
  br i1 %tmp334, label %dec_label_pc_1169c, label %dec_label_pc_11c4c

dec_label_pc_11c4c:                               ; preds = %dec_label_pc_11c44
  %v0_11c4c = load i32, i32* @r5, align 4
  %v1_11c4c = add i32 %v0_11c4c, 21
  %v2_11c4c = inttoptr i32 %v1_11c4c to i8*
  %v3_11c4c = load i8, i8* %v2_11c4c, align 1
  %v4_11c4c = zext i8 %v3_11c4c to i32
  store i32 %v4_11c4c, i32* %r3.global-to-local, align 4
  %v1_11c50 = add i32 %v0_11c4c, 20
  %v2_11c50 = inttoptr i32 %v1_11c50 to i8*
  %v3_11c50 = load i8, i8* %v2_11c50, align 1
  %v4_11c50 = zext i8 %v3_11c50 to i32
  store i32 %v4_11c50, i32* %r2.global-to-local, align 4
  %v1_11c54 = add i32 %v0_11c4c, 16
  %v2_11c54 = inttoptr i32 %v1_11c54 to i32*
  %v3_11c54 = load i32, i32* %v2_11c54, align 4
  store i32 %v3_11c54, i32* %r1.global-to-local, align 4
  %v4_11c58 = mul nuw nsw i32 %v4_11c4c, 256
  %v5_11c58 = or i32 %v4_11c50, %v4_11c58
  store i32 %v5_11c58, i32* %r2.global-to-local, align 4
  %v1_11c5c = and i32 %v4_11c50, 128
  %v2_11c5c = icmp ne i32 %v1_11c5c, 0
  store i1 %v2_11c5c, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_11c4c, i32* %r3.global-to-local, align 4
  store i32 %v3_11c54, i32* %stack_var_-48, align 4
  store i32 %v5_11c58, i32* %stack_var_-38, align 4
  %v1_11c6c = inttoptr i32 %v0_11c4c to i32*
  %v2_11c6c = load i32, i32* %v1_11c6c, align 4
  store i32 %v2_11c6c, i32* @fp, align 4
  %v0_11c70 = call i32 @function_134dc()
  store i32 %v0_11c70, i32* %r0.global-to-local, align 4
  %v7_11c74 = icmp eq i32 %v0_11c70, -1
  %.350 = zext i1 %v7_11c74 to i32
  store i32 %.350, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c80 = icmp eq i32 %v0_11c70, 0
  store i1 %v2_11c80, i1* %cpsr_z.global-to-local, align 1
  %tmp337 = icmp slt i32 %v0_11c70, 1
  br i1 %tmp337, label %bb338, label %.thread68

.thread68:                                        ; preds = %dec_label_pc_11c4c
  store i32 1, i32* %sl.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11cd8

bb338:                                            ; preds = %dec_label_pc_11c4c
  store i32 %.350, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11c8c = icmp eq i1 %v7_11c74, false
  store i1 %v2_11c8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11c8c, label %dec_label_pc_11c94, label %dec_label_pc_11cd8

dec_label_pc_11c94:                               ; preds = %bb338
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_11ca0 = call i32 @function_13db0(i32 2, i32 1, i32 0)
  store i32 %v3_11ca0, i32* %r0.global-to-local, align 4
  %v2_11ca4 = icmp eq i32 %v3_11ca0, -1
  store i1 %v2_11ca4, i1* %cpsr_c.global-to-local, align 1
  %v7_11ca4 = icmp eq i32 %v3_11ca0, -1
  store i1 %v7_11ca4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_11ca0, i32* @r6, align 4
  br i1 %v7_11ca4, label %dec_label_pc_120d8, label %dec_label_pc_11cb0

dec_label_pc_11cb0:                               ; preds = %dec_label_pc_11c94
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_11cb4 = call i32 @function_121c4(i32 18)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_11cbc = call i32 @function_121c4(i32 19)
  %v0_11cc0 = load i32, i32* @sl, align 4
  store i32 %v0_11cc0, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r0.global-to-local, align 4
  %v2_11cc8 = inttoptr i32 %v0_11cc0 to i32*
  %v3_11cc8 = call i32 @function_120e0(i32 18, i32* %v2_11cc8)
  store i32 %v3_11cc8, i32* %r0.global-to-local, align 4
  %v1_11ccc = inttoptr i32 %v3_11cc8 to i8*
  %v2_11ccc = call i32 @function_ff00(i8* %v1_11ccc)
  store i32 %v2_11ccc, i32* %r0.global-to-local, align 4
  store i32 %v2_11ccc, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_11cd0 = icmp eq i32 %v2_11ccc, 0
  store i1 %v3_11cd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11cd0, label %dec_label_pc_11cd8, label %dec_label_pc_11fa8

dec_label_pc_11cd8:                               ; preds = %.thread68, %dec_label_pc_11cb0, %bb338
  %v0_11cd8 = load i32, i32* @r5, align 4
  %v1_11cd8 = add i32 %v0_11cd8, 4
  %v2_11cd8 = inttoptr i32 %v1_11cd8 to i32*
  %v3_11cd8 = load i32, i32* %v2_11cd8, align 4
  store i32 %v3_11cd8, i32* %r0.global-to-local, align 4
  %v1_11cdc = call i32 @function_134b0(i32 %v3_11cd8)
  store i32 %v1_11cdc, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_11ce8 = load i32, i32* @r5, align 4
  %v1_11ce8 = add i32 %v0_11ce8, 24
  %v2_11ce8 = inttoptr i32 %v1_11ce8 to i32*
  %v3_11ce8 = load i32, i32* %v2_11ce8, align 4
  store i32 %v3_11ce8, i32* %ip.global-to-local, align 4
  %v2_11cec = add i32 %v0_11ce8, 4
  %v3_11cec = inttoptr i32 %v2_11cec to i32*
  store i32 -1, i32* %v3_11cec, align 4
  %v0_11cf0 = load i32, i32* %r2.global-to-local, align 4
  %v1_11cf0 = load i32, i32* @r5, align 4
  %v2_11cf0 = add i32 %v1_11cf0, 12
  %v3_11cf0 = inttoptr i32 %v2_11cf0 to i32*
  store i32 %v0_11cf0, i32* %v3_11cf0, align 4
  br label %dec_label_pc_11cf4

dec_label_pc_11cf4:                               ; preds = %.thread204, %dec_label_pc_11d74, %dec_label_pc_11f44, %dec_label_pc_11e5c, %dec_label_pc_11b68, %dec_label_pc_11ab4, %dec_label_pc_11a00, %dec_label_pc_1194c, %dec_label_pc_118b4, %dec_label_pc_11824, %dec_label_pc_116a4, %dec_label_pc_11cd8
  %v0_11cf4 = load i32, i32* %ip.global-to-local, align 4
  %v1_11cf4 = load i32, i32* @r7, align 4
  %v2_11cf4 = sub i32 %v0_11cf4, %v1_11cf4
  %v3_11cf4 = icmp uge i32 %v0_11cf4, %v1_11cf4
  store i1 %v3_11cf4, i1* %cpsr_c.global-to-local, align 1
  %v4_11cf4 = xor i32 %v1_11cf4, %v0_11cf4
  %v5_11cf4 = xor i32 %v2_11cf4, %v0_11cf4
  %v6_11cf4 = and i32 %v5_11cf4, %v4_11cf4
  %v7_11cf4 = icmp slt i32 %v6_11cf4, 0
  %v8_11cf4 = icmp slt i32 %v2_11cf4, 0
  %v9_11cf4 = icmp eq i32 %v0_11cf4, %v1_11cf4
  store i1 %v9_11cf4, i1* %cpsr_z.global-to-local, align 1
  %v2_11cf8 = xor i1 %v8_11cf4, %v7_11cf4
  %v0_11cf4.v1_11cf4 = select i1 %v2_11cf8, i32 %v0_11cf4, i32 %v1_11cf4
  store i32 %v0_11cf4.v1_11cf4, i32* %r1.global-to-local, align 4
  %v2_11d00 = sub i32 %v0_11cf4, %v0_11cf4.v1_11cf4
  store i32 %v2_11d00, i32* @r2, align 4
  %v1_11d04 = load i32, i32* @r5, align 4
  %v2_11d04 = add i32 %v1_11d04, 24
  %v3_11d04 = inttoptr i32 %v2_11d04 to i32*
  store i32 %v2_11d00, i32* %v3_11d04, align 4
  %v0_11d08 = load i32, i32* @sb, align 4
  %v1_11d08 = load i32, i32* %r1.global-to-local, align 4
  %v2_11d08 = add i32 %v1_11d08, %v0_11d08
  store i32 %v2_11d08, i32* @r1, align 4
  store i32 %v0_11d08, i32* @r0, align 4
  %v3_11d10 = call i32 @function_13ae0(i32 %v0_11d08, i32 %v2_11d08, i32 %v2_11d00)
  store i32 %v3_11d10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1158c

dec_label_pc_11d18:                               ; preds = %dec_label_pc_1158c
  %v1_11d18 = add i32 %v0_1158c, 24
  %v2_11d18 = inttoptr i32 %v1_11d18 to i32*
  %v3_11d18 = load i32, i32* %v2_11d18, align 4
  store i32 %v3_11d18, i32* %ip.global-to-local, align 4
  %v1_11d1c = add i32 %v3_11d18, -1
  store i32 %v1_11d1c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11d20 = icmp eq i32 %v1_11d1c, 0
  store i1 %v2_11d20, i1* %cpsr_z.global-to-local, align 1
  %v5_11d24 = icmp sgt i32 %v1_11d1c, 0
  br i1 %v5_11d24, label %dec_label_pc_11d4c, label %dec_label_pc_1150cthread-pre-split.thread

dec_label_pc_11d2c:                               ; preds = %bb341
  %v2_11d2c = icmp ugt i8 %v3_11d50, 35
  store i1 %v2_11d2c, i1* %cpsr_c.global-to-local, align 1
  %v7_11d2c = icmp eq i8 %v3_11d50, 36
  store i1 %v7_11d2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d2c, label %dec_label_pc_11d60, label %dec_label_pc_11d34

dec_label_pc_11d34:                               ; preds = %dec_label_pc_11d2c
  %v2_11d34 = icmp ugt i8 %v3_11d50, 34
  store i1 %v2_11d34, i1* %cpsr_c.global-to-local, align 1
  %v7_11d34 = icmp eq i8 %v3_11d50, 35
  store i1 %v7_11d34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d34, label %dec_label_pc_11d60, label %dec_label_pc_11d3c

dec_label_pc_11d3c:                               ; preds = %dec_label_pc_11d34
  %v2_11d3c = icmp ugt i8 %v3_11d50, 36
  store i1 %v2_11d3c, i1* %cpsr_c.global-to-local, align 1
  %v7_11d3c = icmp eq i8 %v3_11d50, 37
  store i1 %v7_11d3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d3c, label %dec_label_pc_11d60, label %dec_label_pc_11d44

dec_label_pc_11d44:                               ; preds = %dec_label_pc_11d3c
  %v1_11d44 = add i32 %v0_11d60, -1
  store i32 %v1_11d44, i32* %r0.global-to-local, align 4
  %v2_11d44 = icmp ne i32 %v0_11d60, 0
  store i1 %v2_11d44, i1* %cpsr_c.global-to-local, align 1
  %v7_11d44 = icmp eq i32 %v0_11d60, 1
  store i1 %v7_11d44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d44, label %dec_label_pc_1150cthread-pre-split, label %dec_label_pc_11d4c

dec_label_pc_11d4c:                               ; preds = %dec_label_pc_11d18, %dec_label_pc_11d44
  %v0_11d60 = phi i32 [ %v1_11d44, %dec_label_pc_11d44 ], [ %v1_11d1c, %dec_label_pc_11d18 ]
  %v2_11d4c = add i32 %v0_11d60, %v0_1158c
  store i32 %v2_11d4c, i32* %r3.global-to-local, align 4
  %v1_11d50 = add i32 %v2_11d4c, 28
  %v2_11d50 = inttoptr i32 %v1_11d50 to i8*
  %v3_11d50 = load i8, i8* %v2_11d50, align 1
  %v4_11d50 = zext i8 %v3_11d50 to i32
  store i32 %v4_11d50, i32* %r3.global-to-local, align 4
  %v2_11d54 = icmp ugt i8 %v3_11d50, 61
  store i1 %v2_11d54, i1* %cpsr_c.global-to-local, align 1
  %v7_11d54 = icmp eq i8 %v3_11d50, 62
  store i1 %v7_11d54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d54, label %dec_label_pc_11d60, label %bb341

bb341:                                            ; preds = %dec_label_pc_11d4c
  %v3_11d58 = icmp ugt i8 %v3_11d50, 57
  store i1 %v3_11d58, i1* %cpsr_c.global-to-local, align 1
  %v8_11d58 = icmp eq i8 %v3_11d50, 58
  store i1 %v8_11d58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_11d58, label %dec_label_pc_11d60, label %dec_label_pc_11d2c

dec_label_pc_11d60:                               ; preds = %dec_label_pc_11d4c, %bb341, %dec_label_pc_11d3c, %dec_label_pc_11d34, %dec_label_pc_11d2c
  %v1_11d60 = add i32 %v0_11d60, 1
  store i32 %v1_11d60, i32* @r7, align 4
  %v2_11d64 = icmp eq i32 %v1_11d60, -1
  store i1 %v2_11d64, i1* %cpsr_c.global-to-local, align 1
  %v7_11d64 = icmp eq i32 %v0_11d60, -2
  store i1 %v7_11d64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11d64, label %dec_label_pc_1150cthread-pre-split, label %dec_label_pc_11d6c

dec_label_pc_11d6c:                               ; preds = %dec_label_pc_11d60
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11d6c = icmp eq i32 %v1_11d60, 0
  store i1 %v2_11d6c, i1* %cpsr_z.global-to-local, align 1
  %tmp342 = icmp slt i32 %v1_11d60, 1
  br i1 %tmp342, label %dec_label_pc_1169c, label %dec_label_pc_11d74

dec_label_pc_11d74:                               ; preds = %dec_label_pc_11d6c
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_11d78 = call i32 @function_121c4(i32 24)
  store i32 %v2_11958, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r0.global-to-local, align 4
  %v3_11d88 = call i32 @function_120e0(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v3_11d88, i32* %r0.global-to-local, align 4
  %v3_11d8c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11d8c, i32* %r2.global-to-local, align 4
  store i32 %v3_11d88, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11d98 = load i32, i32* @r5, align 4
  %v1_11d98 = add i32 %v0_11d98, 4
  %v2_11d98 = inttoptr i32 %v1_11d98 to i32*
  %v3_11d98 = load i32, i32* %v2_11d98, align 4
  store i32 %v3_11d98, i32* %r0.global-to-local, align 4
  %v4_11d9c = inttoptr i32 %v3_11d88 to i32*
  %v5_11d9c = call i32 @function_13d20(i32 %v3_11d98, i32* %v4_11d9c, i32 %v3_11d8c, i32 16384)
  store i32 %v5_11d9c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_11dac = load i32, i32* @r5, align 4
  %v1_11dac = add i32 %v0_11dac, 4
  %v2_11dac = inttoptr i32 %v1_11dac to i32*
  %v3_11dac = load i32, i32* %v2_11dac, align 4
  store i32 %v3_11dac, i32* %r0.global-to-local, align 4
  %v5_11db0 = call i32 @function_13d20(i32 %v3_11dac, i32* bitcast ([3 x i8]* @global_var_15d70.33 to i32*), i32 2, i32 16384)
  store i32 24, i32* %r0.global-to-local, align 4
  %v1_11db8 = call i32 @function_1210c(i32 24)
  store i32 %v1_11db8, i32* %r0.global-to-local, align 4
  %v0_11dbc = load i32, i32* @r5, align 4
  %v1_11dbc = add i32 %v0_11dbc, 24
  %v2_11dbc = inttoptr i32 %v1_11dbc to i32*
  %v3_11dbc = load i32, i32* %v2_11dbc, align 4
  store i32 %v3_11dbc, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_11dc4 = add i32 %v0_11dbc, 12
  %v3_11dc4 = inttoptr i32 %v2_11dc4 to i32*
  store i32 10, i32* %v3_11dc4, align 4
  br label %dec_label_pc_11cf4

dec_label_pc_11dcc:                               ; preds = %dec_label_pc_1161c
  store i32 ptrtoint (i32* @global_var_1602b.326 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_115d4, i32* @r0, align 4
  %v3_11dd8 = call i32 @function_13ad0(i32 %v2_115d4, i32 ptrtoint (i32* @global_var_1602b.326 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_11de4, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_16022.328 to i32), i32* @r1, align 4
  %v3_11dec = call i32 @function_13ad0(i32 %v2_11de4, i32 ptrtoint (i32* @global_var_16022.328 to i32), i32 9)
  store i32 %v3_11dec, i32* %r0.global-to-local, align 4
  %v0_11df0 = load i32, i32* @r5, align 4
  %v1_11df0 = add i32 %v0_11df0, 24
  %v2_11df0 = inttoptr i32 %v1_11df0 to i32*
  %v3_11df0 = load i32, i32* %v2_11df0, align 4
  store i32 %v3_11df0, i32* %ip.global-to-local, align 4
  %v0_11df4 = load i32, i32* @r6, align 4
  %v1_11df4 = add i32 %v0_11df4, 2
  store i32 %v1_11df4, i32* %r2.global-to-local, align 4
  %v0_11df8 = load i32, i32* @sb, align 4
  %v2_11df8 = add i32 %v0_11df8, %v3_11df0
  store i32 %v2_11df8, i32* %r3.global-to-local, align 4
  %v3_11dfc = icmp uge i32 %v2_11df8, %v1_11df4
  store i1 %v3_11dfc, i1* %cpsr_c.global-to-local, align 1
  %v9_11dfc = icmp eq i32 %v2_11df8, %v1_11df4
  store i1 %v9_11dfc, i1* %cpsr_z.global-to-local, align 1
  %v2_11e00 = xor i1 %v3_11dfc, true
  %v3_11e00 = or i1 %v9_11dfc, %v2_11e00
  br i1 %v3_11e00, label %dec_label_pc_11dcc.dec_label_pc_1168c.loopexit_crit_edge, label %dec_label_pc_11e04

dec_label_pc_11dcc.dec_label_pc_1168c.loopexit_crit_edge: ; preds = %dec_label_pc_11dcc
  %v0_1168c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1168c

dec_label_pc_11e04:                               ; preds = %dec_label_pc_11dcc
  %v0_11e04 = load i32, i32* @r4, align 4
  %v1_11e04 = add i32 %v0_11e04, 1
  %v2_11e04 = inttoptr i32 %v1_11e04 to i8*
  %v3_11e04 = load i8, i8* %v2_11e04, align 1
  %v4_11e04 = zext i8 %v3_11e04 to i32
  store i32 %v4_11e04, i32* %r3.global-to-local, align 4
  %v2_11e08 = icmp ugt i8 %v3_11e04, 30
  store i1 %v2_11e08, i1* %cpsr_c.global-to-local, align 1
  %v7_11e08 = icmp eq i8 %v3_11e04, 31
  store i1 %v7_11e08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e08, label %dec_label_pc_11ef8, label %dec_label_pc_11e10

dec_label_pc_11e10:                               ; preds = %dec_label_pc_11e04
  %v1_11e10 = add i32 %v0_11e04, -1
  %v2_11e10 = inttoptr i32 %v1_11e10 to i8*
  %v3_11e10 = load i8, i8* %v2_11e10, align 1
  %v4_11e10 = zext i8 %v3_11e10 to i32
  store i32 %v4_11e10, i32* %r3.global-to-local, align 4
  %v2_11e14 = icmp ugt i8 %v3_11e10, -4
  store i1 %v2_11e14, i1* %cpsr_c.global-to-local, align 1
  %v7_11e14 = icmp eq i8 %v3_11e10, -3
  store i1 %v7_11e14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e14, label %bb343, label %dec_label_pc_11e20

bb343:                                            ; preds = %dec_label_pc_11e10
  %v1_11e18 = load i32, i32* @r8, align 4
  %v2_11e18 = trunc i32 %v1_11e18 to i8
  store i8 %v2_11e18, i8* %v2_11e10, align 1
  %v0_11e1c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11e1c.pr, label %dec_label_pc_11630, label %.dec_label_pc_11e20_crit_edge

.dec_label_pc_11e20_crit_edge:                    ; preds = %bb343
  %v0_11e20.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_11e20

dec_label_pc_11e20:                               ; preds = %.dec_label_pc_11e20_crit_edge, %dec_label_pc_11e10
  %v0_11e20 = phi i32 [ %v0_11e20.pre, %.dec_label_pc_11e20_crit_edge ], [ %v4_11e10, %dec_label_pc_11e10 ]
  %v2_11e20 = icmp ugt i32 %v0_11e20, 250
  store i1 %v2_11e20, i1* %cpsr_c.global-to-local, align 1
  %v7_11e20 = icmp eq i32 %v0_11e20, 251
  store i1 %v7_11e20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e20, label %bb344, label %dec_label_pc_11630

bb344:                                            ; preds = %dec_label_pc_11e20
  %v1_11e24 = load i32, i32* %sl.global-to-local, align 4
  %v2_11e24 = trunc i32 %v1_11e24 to i8
  %v3_11e24 = load i32, i32* @r4, align 4
  %v4_11e24 = add i32 %v3_11e24, -1
  %v5_11e24 = inttoptr i32 %v4_11e24 to i8*
  store i8 %v2_11e24, i8* %v5_11e24, align 1
  br label %dec_label_pc_11630

dec_label_pc_11e2c:                               ; preds = %dec_label_pc_11bc0
  store i32 %v1_11bfc, i32* %r0.global-to-local, align 4
  %v0_11e34 = load i32, i32* @r5, align 4
  %v1_11e34 = add i32 %v0_11e34, 4
  %v2_11e34 = inttoptr i32 %v1_11e34 to i32*
  %v3_11e34 = load i32, i32* %v2_11e34, align 4
  store i32 %v3_11e34, i32* %r0.global-to-local, align 4
  %v1_11e38 = call i32 @function_134b0(i32 %v3_11e34)
  store i32 %v1_11e38, i32* %r0.global-to-local, align 4
  %v0_11e3c = load i32, i32* @r5, align 4
  %v1_11e3c = add i32 %v0_11e3c, 540
  %v2_11e3c = inttoptr i32 %v1_11e3c to i8*
  %v3_11e3c = load i8, i8* %v2_11e3c, align 1
  %v4_11e3c = zext i8 %v3_11e3c to i32
  %v1_11e40 = add nuw nsw i32 %v4_11e3c, 1
  %v1_11e44 = urem i32 %v1_11e40, 256
  store i32 %v1_11e44, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_11e4c = icmp ugt i32 %v1_11e44, 9
  store i1 %v2_11e4c, i1* %cpsr_c.global-to-local, align 1
  %v7_11e4c = icmp eq i32 %v1_11e44, 10
  store i1 %v7_11e4c, i1* %cpsr_z.global-to-local, align 1
  %v2_11e50 = add i32 %v0_11e3c, 4
  %v3_11e50 = inttoptr i32 %v2_11e50 to i32*
  store i32 -1, i32* %v3_11e50, align 4
  %v0_11e54 = load i32, i32* %r3.global-to-local, align 4
  %v1_11e54 = trunc i32 %v0_11e54 to i8
  %v2_11e54 = load i32, i32* @r5, align 4
  %v3_11e54 = add i32 %v2_11e54, 540
  %v4_11e54 = inttoptr i32 %v3_11e54 to i8*
  store i8 %v1_11e54, i8* %v4_11e54, align 1
  %v0_11e58 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_11e5c = load i32, i32* @r5, align 4
  br i1 %v0_11e58, label %dec_label_pc_11e5c, label %dec_label_pc_11f44

dec_label_pc_11e5c:                               ; preds = %dec_label_pc_11e2c
  %v1_11e5c = add i32 %v0_11e5c, 24
  %v2_11e5c = inttoptr i32 %v1_11e5c to i32*
  %v3_11e5c = load i32, i32* %v2_11e5c, align 4
  store i32 %v3_11e5c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -1, i32* @r7, align 4
  %v3_11e6c = add i32 %v0_11e5c, 540
  %v4_11e6c = inttoptr i32 %v3_11e6c to i8*
  store i8 0, i8* %v4_11e6c, align 1
  %v0_11e70 = load i32, i32* %r1.global-to-local, align 4
  %v1_11e70 = load i32, i32* @r5, align 4
  %v2_11e70 = add i32 %v1_11e70, 12
  %v3_11e70 = inttoptr i32 %v2_11e70 to i32*
  store i32 %v0_11e70, i32* %v3_11e70, align 4
  br label %dec_label_pc_11cf4

dec_label_pc_11e78:                               ; preds = %dec_label_pc_11524
  br i1 %v2_1154c, label %dec_label_pc_11f98, label %dec_label_pc_11e7c

dec_label_pc_11e7c:                               ; preds = %dec_label_pc_11e78
  %v3_11e7c = icmp eq i32 %v5_11548, -1
  store i1 %v3_11e7c, i1* %cpsr_c.global-to-local, align 1
  %v8_11e7c = icmp eq i32 %v5_11548, -1
  store i1 %v8_11e7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11e7c, label %dec_label_pc_11e84, label %dec_label_pc_11574

dec_label_pc_11e84:                               ; preds = %dec_label_pc_11e7c
  store i32 %stack_var_-1868.0, i32* %r2.global-to-local, align 4
  %v2_11e88 = load i32, i32* %v2_1152c, align 4
  store i32 %v2_11e88, i32* %r3.global-to-local, align 4
  %v2_11e8c = icmp ugt i32 %v2_11e88, 10
  store i1 %v2_11e8c, i1* %cpsr_c.global-to-local, align 1
  %v7_11e8c = icmp eq i32 %v2_11e88, 11
  store i1 %v7_11e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11e8c, label %dec_label_pc_113a4, label %dec_label_pc_11e94

dec_label_pc_11e94:                               ; preds = %dec_label_pc_11e84, %dec_label_pc_11f98
  %v0_11e94 = load i32, i32* @r5, align 4
  %v1_11e94 = add i32 %v0_11e94, 4
  %v2_11e94 = inttoptr i32 %v1_11e94 to i32*
  %v3_11e94 = load i32, i32* %v2_11e94, align 4
  store i32 %v3_11e94, i32* %r0.global-to-local, align 4
  %v1_11e98 = call i32 @function_134b0(i32 %v3_11e94)
  store i32 %v1_11e98, i32* %r0.global-to-local, align 4
  %v0_11e9c = load i32, i32* @r5, align 4
  %v1_11e9c = add i32 %v0_11e9c, 540
  %v2_11e9c = inttoptr i32 %v1_11e9c to i8*
  %v3_11e9c = load i8, i8* %v2_11e9c, align 1
  %v4_11e9c = zext i8 %v3_11e9c to i32
  %v1_11ea0 = add nuw nsw i32 %v4_11e9c, 1
  %v1_11ea4 = urem i32 %v1_11ea0, 256
  store i32 %v1_11ea4, i32* %r3.global-to-local, align 4
  %v2_11ea8 = icmp ugt i32 %v1_11ea4, 8
  store i1 %v2_11ea8, i1* %cpsr_c.global-to-local, align 1
  %v7_11ea8 = icmp eq i32 %v1_11ea4, 9
  store i1 %v7_11ea8, i1* %cpsr_z.global-to-local, align 1
  %v1_11eac = trunc i32 %v1_11ea0 to i8
  store i8 %v1_11eac, i8* %v2_11e9c, align 1
  store i32 -1, i32* @r4, align 4
  %v0_11eb4 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_11eb4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_11eb4 = xor i1 %v1_11eb4, true
  %v3_11eb4 = and i1 %v0_11eb4, %v2_11eb4
  br i1 %v3_11eb4, label %bb345, label %.thread217

.thread217:                                       ; preds = %dec_label_pc_11e94
  %v1_11eb8213218 = load i32, i32* @r5, align 4
  %v2_11eb8214219 = add i32 %v1_11eb8213218, 4
  %v3_11eb8215220 = inttoptr i32 %v2_11eb8214219 to i32*
  store i32 -1, i32* %v3_11eb8215220, align 4
  br label %bb346

bb345:                                            ; preds = %dec_label_pc_11e94
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_11eb8209 = load i32, i32* @r5, align 4
  %v2_11eb8210 = add i32 %v1_11eb8209, 4
  %v3_11eb8211 = inttoptr i32 %v2_11eb8210 to i32*
  store i32 -1, i32* %v3_11eb8211, align 4
  %v4_11ebc = load i32, i32* %r3.global-to-local, align 4
  %v5_11ebc = load i32, i32* @r5, align 4
  %v6_11ebc = add i32 %v5_11ebc, 12
  %v7_11ebc = inttoptr i32 %v6_11ebc to i32*
  store i32 %v4_11ebc, i32* %v7_11ebc, align 4
  %v4_11ec0 = load i32, i32* %r3.global-to-local, align 4
  %v5_11ec0 = trunc i32 %v4_11ec0 to i8
  %v6_11ec0 = load i32, i32* @r5, align 4
  %v7_11ec0 = add i32 %v6_11ec0, 540
  %v8_11ec0 = inttoptr i32 %v7_11ec0 to i8*
  store i8 %v5_11ec0, i8* %v8_11ec0, align 1
  %v0_11ec4.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_11ec4.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %bb346

bb346:                                            ; preds = %.thread217, %bb345
  %v1_11ec4 = phi i1 [ %v1_11ec4.pre, %bb345 ], [ %v1_11eb4, %.thread217 ]
  %v0_11ec4 = phi i1 [ %v0_11ec4.pre, %bb345 ], [ %v0_11eb4, %.thread217 ]
  %v2_11ec4 = xor i1 %v1_11ec4, true
  %v3_11ec4 = and i1 %v0_11ec4, %v2_11ec4
  br i1 %v3_11ec4, label %dec_label_pc_113a4, label %dec_label_pc_11ec8

dec_label_pc_11ec8:                               ; preds = %bb346
  %v0_11ec8 = load i32, i32* @r5, align 4
  store i32 %v0_11ec8, i32* @r0, align 4
  %v0_11ecc = call i32 @function_10460()
  store i32 %v0_11ecc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_113a4

dec_label_pc_11ed4:                               ; preds = %dec_label_pc_11884, %dec_label_pc_11860, %dec_label_pc_118a0
  store i32 %v3_11860, i32* %r1.global-to-local, align 4
  %v0_11ed8 = load i32, i32* @sb, align 4
  store i32 %v0_11ed8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_15ed0.330 to i32), i32* %r2.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v5_11ee4 = call i32 @function_12bb4(i32 %v0_11ed8, i32 %v3_11860, i32 ptrtoint ([8 x i8]* @global_var_15ed0.330 to i32), i32 7)
  store i32 %v5_11ee4, i32* %r0.global-to-local, align 4
  %v3_11ee8 = icmp eq i32 %v5_11ee4, -1
  store i1 %v3_11ee8, i1* %cpsr_c.global-to-local, align 1
  %v8_11ee8 = icmp eq i32 %v5_11ee4, -1
  store i1 %v8_11ee8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_11ee4, i32* @r7, align 4
  br i1 %v3_11ee8, label %dec_label_pc_11508.loopexit, label %dec_label_pc_118ac

dec_label_pc_11ef8:                               ; preds = %dec_label_pc_11e04
  store i32 %v2_115d4, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_11f04 = add i32 %v0_11df0, 4
  %v2_11f04 = inttoptr i32 %v1_11f04 to i32*
  %v3_11f04 = load i32, i32* %v2_11f04, align 4
  store i32 %v3_11f04, i32* %r0.global-to-local, align 4
  %v5_11f08 = call i32 @function_13d20(i32 %v3_11f04, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_11f08, i32* %r0.global-to-local, align 4
  store i32 %v2_11ddc, i32* %r1.global-to-local, align 4
  %v0_11f10 = load i32, i32* @r5, align 4
  %v1_11f10 = add i32 %v0_11f10, 4
  %v2_11f10 = inttoptr i32 %v1_11f10 to i32*
  %v3_11f10 = load i32, i32* %v2_11f10, align 4
  store i32 %v3_11f10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1166c

dec_label_pc_11f20:                               ; preds = %dec_label_pc_11514
  store i32 %.pre, i32* @r0, align 4
  %v1_11f28 = add i32 %v0_11f20, 156
  store i32 %v1_11f28, i32* @r1, align 4
  store i32 384, i32* @r2, align 4
  %v3_11f30 = call i32 @function_13ae0(i32 %.pre, i32 %v1_11f28, i32 384)
  store i32 %v3_11f30, i32* %r0.global-to-local, align 4
  %v0_11f34 = load i32, i32* @r5, align 4
  %v1_11f34 = add i32 %v0_11f34, 24
  %v2_11f34 = inttoptr i32 %v1_11f34 to i32*
  %v3_11f34 = load i32, i32* %v2_11f34, align 4
  store i32 %v3_11f34, i32* %r3.global-to-local, align 4
  %v1_11f38 = add i32 %v3_11f34, -128
  store i32 %v1_11f38, i32* %ip.global-to-local, align 4
  store i32 %v1_11f38, i32* %v2_11f34, align 4
  br label %dec_label_pc_11524

dec_label_pc_11f44:                               ; preds = %dec_label_pc_11e2c
  store i32 %v0_11e5c, i32* @r0, align 4
  %v0_11f48 = call i32 @function_10460()
  store i32 %v0_11f48, i32* %r0.global-to-local, align 4
  %v0_11f4c = load i32, i32* @r5, align 4
  %v1_11f4c = add i32 %v0_11f4c, 24
  %v2_11f4c = inttoptr i32 %v1_11f4c to i32*
  %v3_11f4c = load i32, i32* %v2_11f4c, align 4
  store i32 %v3_11f4c, i32* %ip.global-to-local, align 4
  %v0_11f50 = load i32, i32* @r4, align 4
  store i32 %v0_11f50, i32* @r7, align 4
  br label %dec_label_pc_11cf4

dec_label_pc_11f58:                               ; preds = %dec_label_pc_112fc, %dec_label_pc_112e0
  %v0_11f58 = load i32, i32* @r7, align 4
  %v1_11f58 = load i32, i32* @r4, align 4
  %v2_11f58 = add i32 %v1_11f58, 12
  %v3_11f58 = inttoptr i32 %v2_11f58 to i32*
  store i32 %v0_11f58, i32* %v3_11f58, align 4
  %v0_11f5c = load i32, i32* @r7, align 4
  %v1_11f5c = trunc i32 %v0_11f5c to i8
  %v2_11f5c = load i32, i32* @r4, align 4
  %v3_11f5c = add i32 %v2_11f5c, 540
  %v4_11f5c = inttoptr i32 %v3_11f5c to i8*
  store i8 %v1_11f5c, i8* %v4_11f5c, align 1
  br label %bb309

dec_label_pc_11f64:                               ; preds = %dec_label_pc_11488, %dec_label_pc_11440
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11f68

dec_label_pc_11f68:                               ; preds = %dec_label_pc_114b0, %dec_label_pc_11f64
  %v0_11f70 = phi i32 [ 0, %dec_label_pc_11f64 ], [ %v0_11490, %dec_label_pc_114b0 ]
  %v0_11f68 = load i32, i32* @r5, align 4
  %v1_11f68 = add i32 %v0_11f68, 4
  %v2_11f68 = inttoptr i32 %v1_11f68 to i32*
  %v3_11f68 = load i32, i32* %v2_11f68, align 4
  store i32 %v3_11f68, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_11f70 = inttoptr i32 %v0_11f68 to i32*
  store i32 %v0_11f70, i32* %v2_11f70, align 4
  %v0_11f74 = load i32, i32* %ip.global-to-local, align 4
  %v1_11f74 = load i32, i32* @r5, align 4
  %v2_11f74 = add i32 %v1_11f74, 24
  %v3_11f74 = inttoptr i32 %v2_11f74 to i32*
  store i32 %v0_11f74, i32* %v3_11f74, align 4
  %v0_11380.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_11380

dec_label_pc_11f7c:                               ; preds = %dec_label_pc_11400
  %v0_11f7c = load i32, i32* @r5, align 4
  %v1_11f7c = add i32 %v0_11f7c, 4
  %v2_11f7c = inttoptr i32 %v1_11f7c to i32*
  %v3_11f7c = load i32, i32* %v2_11f7c, align 4
  store i32 %v3_11f7c, i32* %r0.global-to-local, align 4
  %v1_11f80 = call i32 @function_134b0(i32 %v3_11f7c)
  store i32 %v1_11f80, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_11f88 = load i32, i32* @r6, align 4
  %v1_11f88 = load i32, i32* @r5, align 4
  %v2_11f88 = add i32 %v1_11f88, 12
  %v3_11f88 = inttoptr i32 %v2_11f88 to i32*
  store i32 %v0_11f88, i32* %v3_11f88, align 4
  %v0_11f8c = load i32, i32* %r4.global-to-local, align 4
  %v1_11f8c = load i32, i32* @r5, align 4
  %v2_11f8c = add i32 %v1_11f8c, 4
  %v3_11f8c = inttoptr i32 %v2_11f8c to i32*
  store i32 %v0_11f8c, i32* %v3_11f8c, align 4
  %v0_11f90 = load i32, i32* @r6, align 4
  %v1_11f90 = trunc i32 %v0_11f90 to i8
  %v2_11f90 = load i32, i32* @r5, align 4
  %v3_11f90 = add i32 %v2_11f90, 540
  %v4_11f90 = inttoptr i32 %v3_11f90 to i8*
  store i8 %v1_11f90, i8* %v4_11f90, align 1
  br label %dec_label_pc_113a4

dec_label_pc_11f98:                               ; preds = %dec_label_pc_11e78
  store i32 %stack_var_-1868.0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_1152c, align 4
  br label %dec_label_pc_11e94

dec_label_pc_11fa8:                               ; preds = %dec_label_pc_11cb0
  store i32 2, i32* @r5, align 4
  %v1_11fac = add i32 %v2_11ccc, 4
  %v2_11fac = inttoptr i32 %v1_11fac to i32*
  %v3_11fac = load i32, i32* %v2_11fac, align 4
  store i32 %v3_11fac, i32* @r4, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v0_11fb8 = call i32 @function_fc1c()
  store i32 %v0_11fb8, i32* %r0.global-to-local, align 4
  %v0_11fbc = load i32, i32* @r8, align 4
  %v1_11fbc = inttoptr i32 %v0_11fbc to i8*
  %v2_11fbc = load i8, i8* %v1_11fbc, align 1
  %v3_11fbc = zext i8 %v2_11fbc to i32
  store i32 %v3_11fbc, i32* %r1.global-to-local, align 4
  %v2_11fc0 = call i32 @function_1320c(i32 %v0_11fb8, i32 %v3_11fbc)
  store i32 %v2_11fc0, i32* %r0.global-to-local, align 4
  %v0_11fc4 = load i32, i32* @r4, align 4
  %v2_11fc4 = and i32 %v2_11fc0, 1073741824
  %v3_11fc4 = icmp ne i32 %v2_11fc4, 0
  store i1 %v3_11fc4, i1* %cpsr_c.global-to-local, align 1
  %v4_11fc4 = mul i32 %v2_11fc0, 4
  %v5_11fc4 = add i32 %v0_11fc4, %v4_11fc4
  %v6_11fc4 = inttoptr i32 %v5_11fc4 to i32*
  %v7_11fc4 = load i32, i32* %v6_11fc4, align 4
  store i32 %v7_11fc4, i32* %r3.global-to-local, align 4
  %v0_11fc8 = load i32, i32* @sl, align 4
  store i32 %v0_11fc8, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r0.global-to-local, align 4
  %v2_11fd4 = inttoptr i32 %v0_11fc8 to i32*
  %v3_11fd4 = call i32 @function_120e0(i32 19, i32* %v2_11fd4)
  %v4_11fd4 = inttoptr i32 %v3_11fd4 to i8*
  store i32 %v3_11fd4, i32* %r0.global-to-local, align 4
  %v2_11fd8 = add i32 %v3_11fd4, 1
  %v3_11fd8 = inttoptr i32 %v2_11fd8 to i8*
  %v4_11fd8 = load i8, i8* %v3_11fd8, align 1
  %v5_11fd8 = zext i8 %v4_11fd8 to i32
  store i32 %v5_11fd8, i32* %r2.global-to-local, align 4
  %v3_11fdc = load i8, i8* %v4_11fd4, align 1
  %v4_11fdc = zext i8 %v3_11fdc to i32
  %v4_11fe0 = mul nuw nsw i32 %v5_11fd8, 256
  %v5_11fe0 = or i32 %v4_11fdc, %v4_11fe0
  store i32 %v5_11fe0, i32* %r3.global-to-local, align 4
  %v1_11fe4 = and i32 %v4_11fdc, 128
  %v2_11fe4 = icmp ne i32 %v1_11fe4, 0
  store i1 %v2_11fe4, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_11fd8, i32* %r1.global-to-local, align 4
  %v0_11fe8 = load i32, i32* @r8, align 4
  store i32 %v0_11fe8, i32* %r0.global-to-local, align 4
  %v6_11ff4 = call i32 @function_fedc(i32 %v0_11fe8)
  store i32 18, i32* %r0.global-to-local, align 4
  %v1_11ffc = call i32 @function_1210c(i32 18)
  store i32 19, i32* %r0.global-to-local, align 4
  %v1_12004 = call i32 @function_1210c(i32 19)
  %v0_1200c = load i32, i32* @r6, align 4
  store i32 %v0_1200c, i32* %r0.global-to-local, align 4
  %v2_12010 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_12010, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_12018 = bitcast i32* %stack_var_-92 to %sockaddr*
  %v4_12018 = call i32 @function_13c0c(i32 %v0_1200c, %sockaddr* %v3_12018, i32 16)
  store i32 %v4_12018, i32* %r0.global-to-local, align 4
  %v3_1201c = icmp eq i32 %v4_12018, -1
  store i1 %v3_1201c, i1* %cpsr_c.global-to-local, align 1
  %v8_1201c = icmp eq i32 %v4_12018, -1
  store i1 %v8_1201c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1201c, label %dec_label_pc_12024, label %dec_label_pc_12034

dec_label_pc_12024:                               ; preds = %dec_label_pc_11fa8
  %v0_12024 = load i32, i32* @r6, align 4
  store i32 %v0_12024, i32* %r0.global-to-local, align 4
  %v1_12028 = call i32 @function_134b0(i32 %v0_12024)
  %v0_1202c = load i32, i32* @sl, align 4
  store i32 %v0_1202c, i32* %r0.global-to-local, align 4
  %v1_12030 = call i32 @function_14850(i32 %v0_1202c)
  store i32 %v1_12030, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12034

dec_label_pc_12034:                               ; preds = %dec_label_pc_11fa8, %dec_label_pc_12024
  store i32 %v2_11958, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12044 = load i32, i32* @r6, align 4
  store i32 %v0_12044, i32* %r0.global-to-local, align 4
  %v0_12048 = load i32, i32* @sl, align 4
  store i32 %v0_12048, i32* %stack_var_-56, align 4
  %v6_1204c = call i32 @function_13d20(i32 %v0_12044, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_11a0c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12060 = load i32, i32* @r6, align 4
  store i32 %v0_12060, i32* %r0.global-to-local, align 4
  %v5_12064 = call i32 @function_13d20(i32 %v0_12060, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_1206c = load i32, i32* @r5, align 4
  store i32 %v0_1206c, i32* %r2.global-to-local, align 4
  %v2_12070 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_12070, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_12078 = load i32, i32* @r6, align 4
  store i32 %v0_12078, i32* %r0.global-to-local, align 4
  %v5_1207c = call i32 @function_13d20(i32 %v0_12078, i32* nonnull %stack_var_-38, i32 %v0_1206c, i32 16384)
  %v0_12080 = load i32, i32* @fp, align 4
  %v1_12080 = add i32 %v0_12080, 12
  store i32 %v1_12080, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1208c = load i32, i32* @r6, align 4
  store i32 %v0_1208c, i32* %r0.global-to-local, align 4
  %v4_12090 = inttoptr i32 %v1_12080 to i32*
  %v5_12090 = call i32 @function_13d20(i32 %v0_1208c, i32* %v4_12090, i32 1, i32 16384)
  store i32 %v5_12090, i32* %r0.global-to-local, align 4
  %v0_12094 = load i32, i32* @fp, align 4
  %v1_12094 = inttoptr i32 %v0_12094 to i32*
  %v2_12094 = load i32, i32* %v1_12094, align 4
  store i32 %v2_12094, i32* %r1.global-to-local, align 4
  %v1_12098 = add i32 %v0_12094, 12
  %v2_12098 = inttoptr i32 %v1_12098 to i8*
  %v3_12098 = load i8, i8* %v2_12098, align 1
  %v4_12098 = zext i8 %v3_12098 to i32
  store i32 %v4_12098, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_120a0 = load i32, i32* @r6, align 4
  store i32 %v0_120a0, i32* %r0.global-to-local, align 4
  %v4_120a4 = inttoptr i32 %v2_12094 to i32*
  %v5_120a4 = call i32 @function_13d20(i32 %v0_120a0, i32* %v4_120a4, i32 %v4_12098, i32 16384)
  %v0_120a8 = load i32, i32* @fp, align 4
  %v1_120a8 = add i32 %v0_120a8, 13
  store i32 %v1_120a8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_120b4 = load i32, i32* @r6, align 4
  store i32 %v0_120b4, i32* %r0.global-to-local, align 4
  %v4_120b8 = inttoptr i32 %v1_120a8 to i32*
  %v5_120b8 = call i32 @function_13d20(i32 %v0_120b4, i32* %v4_120b8, i32 1, i32 16384)
  %v0_120bc = load i32, i32* @r6, align 4
  store i32 %v0_120bc, i32* %r0.global-to-local, align 4
  %v0_120c0 = load i32, i32* @fp, align 4
  %v1_120c0 = add i32 %v0_120c0, 13
  %v2_120c0 = inttoptr i32 %v1_120c0 to i8*
  %v3_120c0 = load i8, i8* %v2_120c0, align 1
  %v4_120c0 = zext i8 %v3_120c0 to i32
  store i32 %v4_120c0, i32* %r2.global-to-local, align 4
  %v1_120c4 = add i32 %v0_120c0, 4
  %v2_120c4 = inttoptr i32 %v1_120c4 to i32*
  %v3_120c4 = load i32, i32* %v2_120c4, align 4
  store i32 %v3_120c4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_120cc = inttoptr i32 %v3_120c4 to i32*
  %v5_120cc = call i32 @function_13d20(i32 %v0_120bc, i32* %v4_120cc, i32 %v4_120c0, i32 16384)
  %v0_120d0 = load i32, i32* @r6, align 4
  store i32 %v0_120d0, i32* %r0.global-to-local, align 4
  %v1_120d4 = call i32 @function_134b0(i32 %v0_120d0)
  store i32 %v1_120d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_120d8

dec_label_pc_120d8:                               ; preds = %dec_label_pc_11c94, %dec_label_pc_12034
  %v0_120d8 = load i32, i32* @sl, align 4
  store i32 %v0_120d8, i32* %r0.global-to-local, align 4
  %v1_120dc = call i32 @function_14850(i32 %v0_120d8)
  store i32 %v1_120dc, i32* %r0.global-to-local, align 4
  ret i32 %v1_120dc

; uselistorder directives
  uselistorder i32 %v4_11fdc, { 1, 0 }
  uselistorder i32 %v5_11fd8, { 1, 0, 2 }
  uselistorder i32 %v2_11fc0, { 1, 0, 2 }
  uselistorder i32 %v3_11f10, { 1, 0 }
  uselistorder i32 %v5_11ee4, { 2, 0, 3, 4, 1 }
  uselistorder i1 %v1_11eb4, { 1, 0 }
  uselistorder i32 %v1_11ea4, { 2, 1, 0 }
  uselistorder i32 %v1_11ea0, { 1, 0 }
  uselistorder i32 %v0_11e5c, { 1, 0, 2 }
  uselistorder i32 %v1_11e44, { 2, 1, 0 }
  uselistorder i32 %v0_11df0, { 1, 2, 0 }
  uselistorder i1 %v7_11d64, { 1, 0 }
  uselistorder i32 %v1_11d60, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11d58, { 1, 0 }
  uselistorder i8 %v3_11d50, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11d60, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11d3c, { 1, 0 }
  uselistorder i1 %v7_11d34, { 1, 0 }
  uselistorder i1 %v7_11d2c, { 1, 0 }
  uselistorder i32 %v0_11d08, { 1, 2, 0 }
  uselistorder i32 %v2_11cf4, { 1, 0 }
  uselistorder i32 %v1_11cf4, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_11cf4, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i1 %v7_11ca4, { 1, 0 }
  uselistorder i32 %v3_11ca0, { 1, 0, 2, 3 }
  uselistorder i1 %v2_11c8c, { 1, 0 }
  uselistorder i32 %.350, { 1, 0 }
  uselistorder i1 %v7_11c74, { 1, 0 }
  uselistorder i32 %v0_11c70, { 2, 1, 0, 3 }
  uselistorder i32 %v4_11c50, { 1, 0, 2 }
  uselistorder i32 %v4_11c4c, { 1, 0, 2 }
  uselistorder i1 %v7_11c3c, { 1, 0 }
  uselistorder i32 %v0_11c3c, { 3, 2, 0, 4, 1 }
  uselistorder i1 %v7_11b58, { 1, 0 }
  uselistorder i32 %v1_11b54, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11b4c, { 1, 0 }
  uselistorder i8 %v3_11b44, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11b54, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11b30, { 1, 0 }
  uselistorder i1 %v7_11b28, { 1, 0 }
  uselistorder i1 %v7_11b20, { 1, 0 }
  uselistorder i1 %v7_11aa4, { 1, 0 }
  uselistorder i32 %v1_11aa0, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11a98, { 1, 0 }
  uselistorder i8 %v3_11a90, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11aa0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11a7c, { 1, 0 }
  uselistorder i1 %v7_11a74, { 1, 0 }
  uselistorder i1 %v7_11a6c, { 1, 0 }
  uselistorder i1 %v7_119f0, { 1, 0 }
  uselistorder i32 %v1_119ec, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_119e4, { 1, 0 }
  uselistorder i8 %v3_119dc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_119ec, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_119c8, { 1, 0 }
  uselistorder i1 %v7_119c0, { 1, 0 }
  uselistorder i1 %v7_119b8, { 1, 0 }
  uselistorder i1 %v7_1193c, { 1, 0 }
  uselistorder i32 %v1_11938, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_11930, { 1, 0 }
  uselistorder i8 %v3_11928, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11938, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_11914, { 1, 0 }
  uselistorder i1 %v7_1190c, { 1, 0 }
  uselistorder i1 %v7_11904, { 1, 0 }
  uselistorder i32 %v0_118ac, { 2, 1, 0 }
  uselistorder i1 %v7_118a4, { 1, 0 }
  uselistorder i1 %v8_11898, { 1, 0 }
  uselistorder i8 %v3_11890, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_118a0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_1187c, { 1, 0 }
  uselistorder i1 %v7_11874, { 1, 0 }
  uselistorder i32 %v3_11860, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1181c, { 2, 1, 0 }
  uselistorder i1 %v7_11814, { 1, 0 }
  uselistorder i1 %v8_11808, { 1, 0 }
  uselistorder i8 %v3_11800, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_11810, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_117ec, { 1, 0 }
  uselistorder i1 %v7_117e4, { 1, 0 }
  uselistorder i1 %v7_117dc, { 1, 0 }
  uselistorder i32 %v3_116ac, { 2, 3, 0, 1 }
  uselistorder i32 %v0_1169c.pre, { 0, 2, 1 }
  uselistorder i32 %v1_11684, { 1, 0 }
  uselistorder i32 %v1_11680, { 1, 0 }
  uselistorder i32 %v1_11678, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_11674, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_11674, { 0, 2, 1 }
  uselistorder i1 %v7_1161c, { 1, 0 }
  uselistorder i1 %v2_11608, { 1, 0, 2 }
  uselistorder i1 %v2_115f0, { 1, 0, 2 }
  uselistorder i32 %v1_11610, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_115e4, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_1160c, { 1, 0 }
  uselistorder i32 %v2_11614, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_1158c, { 4, 19, 5, 17, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 0, 11, 12, 20, 2, 1 }
  uselistorder i32 %v1_11568, { 1, 2, 3, 0 }
  uselistorder i32 %v3_11564, { 1, 0 }
  uselistorder i32 %v5_11548, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_11534, { 1, 0, 2 }
  uselistorder i32 %v3_11530, { 1, 0, 2 }
  uselistorder i32 %v0_11f20, { 1, 0, 2 }
  uselistorder i32 %v5_114f8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v5_114d8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11490, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_11470, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_11464, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_113f0, { 2, 1, 0 }
  uselistorder i32 %v3_113ec, { 1, 0 }
  uselistorder i1 %v7_113d4, { 1, 0 }
  uselistorder i32 %v3_113d0, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_113c4, { 1, 0 }
  uselistorder i32 %v1_113a8, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_11394, { 2, 1, 0 }
  uselistorder i32 %v3_11390, { 1, 0 }
  uselistorder i32 %v0_11394, { 1, 0 }
  uselistorder i32 %v2_11a0c, { 0, 2, 3, 1 }
  uselistorder i32 %v2_11958, { 4, 5, 3, 2, 6, 7, 1, 0 }
  uselistorder i32 %v2_11de4, { 1, 2, 0 }
  uselistorder i32 %v2_115d4, { 0, 2, 1 }
  uselistorder i32 %v1_11328, { 0, 1, 3, 2 }
  uselistorder i32 %v0_11328, { 0, 1, 3, 2 }
  uselistorder i32 %v1_11304, { 2, 1, 0 }
  uselistorder i32 %v1_11300, { 1, 0 }
  uselistorder i32 %v0_112d0, { 0, 2, 1 }
  uselistorder i32 %v1_112c8, { 1, 0 }
  uselistorder i1 %v7_11294, { 0, 3, 1, 2 }
  uselistorder i1 %v2_11294, { 1, 2, 0 }
  uselistorder i32 %v2_1128c, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_11284, { 1, 0 }
  uselistorder i32 %v1_11268, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_1125c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1125c, { 0, 2, 1 }
  uselistorder i32 %v1_1124c, { 1, 0 }
  uselistorder i32 %v3_112b0, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge222, { 1, 0, 2 }
  uselistorder i32 %v2_112bc, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %stack_var_-1868.0, { 1, 0, 2, 3 }
  uselistorder i32 %v3_1119c, { 1, 0 }
  uselistorder i32 %v1_11188, { 1, 0 }
  uselistorder i32 %v1_11170, { 1, 2, 0 }
  uselistorder i32 %v0_1117c, { 0, 3, 2, 1 }
  uselistorder i32 %v0_11140, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_11134, { 2, 1, 0 }
  uselistorder i32 %v1_11110, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_110e8, { 1, 0 }
  uselistorder i32 %v4_11088, { 2, 3, 7, 0, 1, 5, 4, 6 }
  uselistorder i32 %v1_10ff0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_10f10, { 0, 2, 1 }
  uselistorder i32 %v1_10f0c, { 3, 2, 0, 1 }
  uselistorder i32 %v4_10ee8, { 1, 0 }
  uselistorder i1 %v2_10e58, { 1, 0 }
  uselistorder i1 %v3_10e3c, { 1, 0, 2 }
  uselistorder i1 %v2_10e28, { 1, 0 }
  uselistorder i1 %v2_10e04, { 1, 0 }
  uselistorder i32 %v1_10db4, { 14, 13, 12, 11, 15, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_10da0, { 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 21, 22, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10d9c, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_10d8c, { 1, 0 }
  uselistorder i32 %v0_10d7c, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10d6c, { 1, 0 }
  uselistorder i32 %v0_1107c, { 0, 1, 2, 5, 6, 7, 9, 3, 4, 8, 10 }
  uselistorder i8* %stack_var_-1884.0, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 %stack_var_-1872.0, { 0, 3, 2, 1 }
  uselistorder i32 %v4_108c0, { 1, 0 }
  uselistorder i32 %v0_108b4, { 2, 0, 1, 3 }
  uselistorder i32 %v4_10860, { 1, 0 }
  uselistorder i32 %v0_10858, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10800, { 3, 2, 0, 1 }
  uselistorder i1 %v7_107a4, { 1, 0 }
  uselistorder i32 %v3_1079c, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_10784, { 0, 2, 1 }
  uselistorder i32 %v0_1076c, { 2, 1, 0 }
  uselistorder i32 %v0_10748, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge229, { 1, 0 }
  uselistorder i32 %v0_106e0, { 3, 2, 1, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 4, 5, 3, 6, 2, 7, 0, 8, 9 }
  uselistorder i32* %stack_var_-56, { 0, 6, 7, 3, 8, 4, 9, 5, 10, 2, 11, 1, 12, 13 }
  uselistorder i32* %stack_var_-84, { 1, 0 }
  uselistorder i32* %stack_var_-38, { 0, 2, 1 }
  uselistorder i32 %tmp239, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 64, 65, 44, 36, 66, 67, 68, 69, 70, 13, 14, 45, 46, 47, 48, 0, 1, 2, 3, 15, 137, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 57, 58, 59, 42, 43, 49, 50, 51, 52, 53, 54, 55, 56, 71, 72, 73, 74, 75, 76, 60, 61, 77, 78, 80, 79, 81, 82, 83, 84, 85, 87, 89, 88, 86, 90, 91, 92, 93, 99, 94, 95, 96, 97, 101, 100, 62, 103, 102, 63, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 136, 122, 123, 124, 125, 126, 127, 129, 128, 131, 130, 98, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145 }
  uselistorder i32* %r2.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 35, 31, 47, 36, 0, 1, 2, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 24, 23, 25, 27, 26, 28, 30, 29, 32, 34, 33, 40, 42, 41, 37, 38, 39, 48, 49, 50, 51, 52, 53, 54, 43, 68, 55, 56, 57, 58, 59, 61, 63, 62, 46, 60, 64, 65, 66, 67, 72, 69, 70, 71, 73, 76, 75, 77, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 44, 45, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 47, 48, 39, 40, 36, 15, 16, 1, 2, 3, 45, 46, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 41, 42, 0, 49, 50, 51, 43, 44, 52, 53, 54, 56, 57, 55, 58, 59, 61, 60, 154, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153 }
  uselistorder i32* %r0.global-to-local, { 11, 10, 13, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 26, 25, 27, 29, 28, 31, 30, 32, 33, 126, 125, 35, 127, 108, 111, 110, 100, 99, 128, 130, 129, 34, 37, 36, 38, 112, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 115, 40, 39, 41, 43, 42, 44, 45, 47, 46, 48, 50, 49, 51, 53, 52, 54, 55, 56, 57, 58, 59, 61, 60, 63, 62, 65, 64, 66, 67, 68, 69, 71, 70, 73, 72, 75, 74, 76, 77, 78, 79, 81, 80, 83, 82, 85, 84, 86, 87, 88, 89, 91, 90, 93, 92, 95, 94, 96, 97, 98, 102, 101, 109, 103, 104, 105, 117, 116, 119, 118, 106, 107, 114, 113, 134, 131, 132, 121, 120, 122, 123, 133, 136, 135, 137, 138, 140, 139, 141, 147, 142, 143, 146, 144, 145, 148, 150, 151, 149, 124, 152, 153, 250, 154, 155, 249, 156, 234, 157, 158, 159, 161, 160, 162, 163, 165, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 237, 240, 239, 241, 245, 244, 242, 243, 246, 247, 251, 248 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %ip.global-to-local, { 23, 24, 2, 25, 3, 16, 0, 1, 20, 4, 5, 7, 6, 9, 8, 11, 10, 12, 13, 14, 19, 15, 21, 17, 18, 26, 27, 28, 29, 30, 31, 34, 32, 33, 35, 22, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i1* %cpsr_z.global-to-local, { 9, 55, 105, 106, 107, 108, 109, 10, 11, 72, 73, 74, 75, 76, 0, 1, 6, 7, 2, 3, 4, 5, 8, 91, 12, 13, 14, 189, 15, 16, 17, 18, 19, 20, 25, 26, 21, 22, 23, 24, 27, 28, 29, 34, 35, 30, 31, 32, 33, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 56, 57, 61, 62, 58, 59, 60, 63, 93, 64, 69, 70, 65, 66, 67, 68, 71, 92, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 102, 110, 111, 112, 113, 114, 115, 101, 103, 94, 95, 116, 118, 117, 119, 120, 122, 124, 123, 104, 121, 125, 126, 127, 128, 129, 130, 135, 131, 132, 133, 134, 98, 99, 96, 97, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 195, 171, 172, 173, 174, 175, 194, 176, 177, 178, 196, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 100, 193 }
  uselistorder i1* %cpsr_c.global-to-local, { 9, 10, 11, 57, 104, 105, 106, 107, 108, 12, 74, 75, 76, 77, 0, 1, 6, 7, 2, 3, 4, 5, 8, 90, 13, 14, 15, 186, 16, 17, 18, 19, 20, 21, 22, 27, 28, 23, 24, 25, 26, 29, 30, 31, 36, 37, 32, 33, 34, 35, 38, 39, 40, 45, 46, 41, 42, 43, 44, 47, 48, 49, 54, 55, 50, 51, 52, 53, 56, 58, 59, 63, 64, 60, 61, 62, 65, 92, 66, 71, 72, 67, 68, 69, 70, 73, 91, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 100, 109, 110, 111, 112, 113, 114, 101, 102, 93, 94, 115, 117, 116, 118, 119, 121, 123, 122, 103, 120, 124, 125, 126, 127, 128, 133, 129, 130, 131, 132, 97, 98, 95, 134, 96, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 195, 166, 167, 168, 169, 170, 193, 171, 172, 173, 192, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 99, 194 }
  uselistorder i32 (i32)* @function_fedc, { 1, 0 }
  uselistorder i32 104, { 0, 3, 1, 4, 2, 5 }
  uselistorder i8 31, { 7, 1, 2, 0, 3, 4, 8, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 (i32)* @function_1210c, { 39, 38, 40, 37, 36, 35, 34, 33, 32, 31, 41, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_120e0, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 61, 62, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 56, 57, 58, 59 }
  uselistorder i32 (i32)* @function_121c4, { 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_15d70.33 to i32*), { 4, 2, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_15d70.33, { 1, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_15d70.33 to i32), { 16, 17, 18, 19, 20, 21, 22, 12, 23, 3, 24, 15, 25, 13, 26, 14, 27, 0, 28, 1, 29, 2, 30, 4, 31, 5, 32, 6, 33, 7, 34, 8, 35, 9, 36, 10, 37, 11, 38 }
  uselistorder i8 58, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 62, { 6, 4, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 6, 4, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 37, { 5, 3, 4, 2, 1, 0 }
  uselistorder i8 34, { 6, 4, 5, 3, 2, 1, 0, 7, 8, 9, 10 }
  uselistorder i8 36, { 11, 12, 7, 8, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 12, 13, 8, 9, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_13d20, { 2, 3, 4, 5, 6, 7, 8, 19, 0, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 20, 27, 23, 24, 25, 26, 28, 29, 30 }
  uselistorder i32 251, { 3, 4, 5, 0, 1, 2 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 1073741824, { 2, 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_13cc0, { 5, 2, 3, 4, 0, 1, 6, 9, 7, 8 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12bb4, { 22, 24, 23, 21, 20, 19, 18, 17, 16, 2, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i8* bitcast (i8** @global_var_1eab0.173 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1eab1.174, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1eab0.173 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_13c64, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_136d0, { 1, 2, 3, 0 }
  uselistorder i32 540, { 3, 4, 5, 6, 0, 1, 2, 7 }
  uselistorder i32 1544, { 1, 0 }
  uselistorder i32 1672, { 2, 0, 1 }
  uselistorder i32 ()* @function_10460, { 3, 2, 1, 0 }
  uselistorder i32 254, { 8, 9, 10, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8 2, { 0, 4, 3, 2, 1 }
  uselistorder i32 5888, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_13cec, { 2, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_13d4c, { 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 16384, { 32, 52, 33, 53, 34, 54, 35, 55, 36, 56, 37, 57, 13, 58, 12, 69, 11, 50, 0, 51, 1, 59, 2, 60, 3, 61, 4, 62, 5, 63, 6, 64, 7, 65, 8, 66, 30, 67, 31, 68, 28, 71, 29, 72, 27, 70, 38, 91, 9, 92, 10, 93, 14, 80, 39, 81, 16, 73, 42, 74, 41, 75, 43, 76, 44, 77, 15, 78, 40, 79, 17, 82, 18, 83, 19, 84, 45, 46, 20, 85, 21, 86, 23, 87, 22, 88, 24, 89, 25, 90, 48, 94, 49, 95, 26, 96, 47, 97 }
  uselistorder i32 (i32, i32, i32, i32)* @function_e4a0, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_132d8, { 1, 2, 0 }
  uselistorder i32 (i32, i32)* @function_e444, { 0, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* @global_var_1ea94.310, { 2, 1, 0 }
  uselistorder i32 16711680, { 3, 0, 1, 2 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 223, { 3, 0, 1, 2 }
  uselistorder i32 192, { 2, 0, 1 }
  uselistorder i32 127, { 5, 0, 6, 3, 7, 1, 8, 2, 9, 4, 10 }
  uselistorder i32 126, { 11, 5, 0, 6, 1, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15e98.300 to i32), { 0, 6, 1, 7, 2, 3, 4, 8, 5, 9 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15e90.298 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15e88.296 to i32), { 0, 5, 1, 6, 2, 3, 4, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_15d98.274 to i32), { 0, 5, 1, 6, 2, 7, 3, 8, 4, 9 }
  uselistorder i32 ptrtoint (i32* @global_var_15fdc.262 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([9 x i8]* @global_var_15fb8.256 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15f98.248 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_15f90.246 to i32), { 0, 19, 1, 20, 2, 21, 3, 22, 4, 23, 5, 24, 6, 7, 8, 25, 9, 26, 10, 27, 11, 28, 12, 29, 13, 30, 14, 31, 15, 32, 16, 33, 17, 34, 18, 35 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_15f50.230 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15f24.222 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_15f08.216 to i32), { 0, 5, 1, 6, 2, 7, 3, 8, 4, 9 }
  uselistorder i32 ptrtoint (i32* @global_var_15f00.214 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_15ef8.212 to i32), { 0, 1, 2, 7, 3, 8, 4, 9, 5, 10, 6, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_15eec.208 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 (i32, i32, i32)* @function_10534, { 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_15ee0.202 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_15ed8.200 to i32), { 0, 35, 1, 36, 2, 37, 3, 38, 4, 39, 5, 40, 6, 41, 7, 42, 8, 43, 9, 44, 10, 45, 11, 46, 12, 47, 13, 48, 14, 49, 15, 50, 16, 51, 17, 52, 18, 53, 19, 54, 20, 55, 21, 56, 22, 57, 23, 58, 24, 59, 25, 60, 26, 61, 27, 62, 28, 63, 29, 64, 30, 65, 31, 32, 33, 66, 34, 67 }
  uselistorder i8* @global_var_1eaa5.196, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1ea98.187 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8 64, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder i8* @global_var_1eaa4.188, { 1, 0 }
  uselistorder i8** @global_var_1ea84.183, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1ea84.183 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 1023, { 4, 0, 1, 2, 5, 3, 6 }
  uselistorder i32 65280, { 48, 1, 14, 0, 2, 28, 3, 29, 21, 22, 4, 30, 15, 23, 31, 32, 5, 6, 33, 16, 7, 34, 24, 17, 18, 25, 26, 27, 35, 36, 37, 38, 8, 9, 39, 10, 40, 41, 19, 42, 43, 11, 44, 45, 20, 46, 47, 12, 49, 13, 50 }
  uselistorder i32 ()* @function_fc1c, { 69, 12, 11, 10, 9, 8, 7, 65, 68, 67, 66, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 2, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_13d80, { 8, 0, 1, 2, 3, 4, 9, 5, 6, 7, 10 }
  uselistorder i32 2048, { 14, 13, 5, 8, 9, 0, 1, 2, 3, 7, 10, 6, 11, 4, 12, 15 }
  uselistorder i32* @global_var_1eb1c.181, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1eb18.179, { 1, 2, 3, 4, 0 }
  uselistorder i32 544, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1eab4.167, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @function_13780, { 4, 5, 6, 0, 1, 2, 3, 7, 8, 9 }
  uselistorder i32* @global_var_1eafc.85, { 3, 4, 2, 0, 5, 1, 6, 13, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ()* @function_12da8, { 0, 2, 1 }
  uselistorder i32* @global_var_1eb20.165, { 0, 2, 1 }
  uselistorder i32 ()* @function_134dc, { 5, 2, 4, 3, 1, 0 }
  uselistorder i32* @fp, { 3, 4, 5, 6, 7, 48, 49, 41, 42, 43, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 1, 38, 39, 40, 44, 2, 45, 46, 47 }
  uselistorder i32* @sl, { 2, 3, 4, 5, 6, 7, 83, 84, 67, 68, 69, 8, 9, 10, 11, 14, 12, 13, 1, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 0, 104, 105, 106, 107 }
  uselistorder i32* @sb, { 3, 4, 7, 1, 2, 5, 6, 59, 58, 8, 9, 60, 61, 49, 50, 51, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71 }
  uselistorder label %dec_label_pc_120d8, { 1, 0 }
  uselistorder label %dec_label_pc_12034, { 1, 0 }
  uselistorder label %dec_label_pc_11f68, { 1, 0 }
  uselistorder label %dec_label_pc_11ed4, { 2, 0, 1 }
  uselistorder label %bb346, { 1, 0 }
  uselistorder label %dec_label_pc_11e94, { 1, 0 }
  uselistorder label %dec_label_pc_11d60, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11d4c, { 1, 0 }
  uselistorder label %dec_label_pc_11cf4, { 2, 3, 1, 11, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_11cd8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11b54, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11b40, { 1, 0 }
  uselistorder label %dec_label_pc_11aa0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11a8c, { 1, 0 }
  uselistorder label %dec_label_pc_119ec, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_119d8, { 1, 0 }
  uselistorder label %dec_label_pc_11938, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_11924, { 1, 0 }
  uselistorder label %dec_label_pc_118ac, { 1, 0 }
  uselistorder label %dec_label_pc_118a0, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_1188c, { 1, 0 }
  uselistorder label %dec_label_pc_11810, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_117fc, { 1, 0 }
  uselistorder label %dec_label_pc_1169c, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_1168c, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb320, { 2, 1, 0 }
  uselistorder label %bb317, { 2, 1, 0 }
  uselistorder label %dec_label_pc_115ec, { 1, 0 }
  uselistorder label %dec_label_pc_115ec.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_11574, { 1, 0 }
  uselistorder label %bb314, { 1, 0 }
  uselistorder label %dec_label_pc_11524, { 1, 0 }
  uselistorder label %dec_label_pc_11514, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1150cthread-pre-split, { 4, 5, 3, 7, 2, 6, 1, 8, 0, 9 }
  uselistorder label %dec_label_pc_1150cthread-pre-split.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_11514.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_11508.loopexit, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_114c8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_113a4, { 6, 7, 3, 4, 0, 5, 1, 2 }
  uselistorder label %dec_label_pc_11380, { 1, 0 }
  uselistorder label %bb311, { 1, 0 }
  uselistorder label %bb309, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_111e8.dec_label_pc_111e8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_111cc.dec_label_pc_111cc_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_111c4, { 3, 4, 0, 1, 2 }
  uselistorder label %dec_label_pc_111bc, { 1, 0 }
  uselistorder label %dec_label_pc_11170, { 1, 0 }
  uselistorder label %dec_label_pc_11010, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_11004, { 1, 0 }
  uselistorder label %.thread47, { 2, 1, 0 }
  uselistorder label %.thread45, { 1, 0 }
  uselistorder label %dec_label_pc_10e68, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10e44, { 1, 0 }
  uselistorder label %dec_label_pc_10e38, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10e14, { 1, 2, 0 }
  uselistorder label %dec_label_pc_10df0, { 1, 0 }
  uselistorder label %bb279, { 1, 0 }
  uselistorder label %dec_label_pc_10d9c, { 22, 6, 7, 2, 8, 3, 9, 4, 10, 5, 11, 0, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 23 }
  uselistorder label %dec_label_pc_10800, { 1, 0 }
}

define i32 @function_120e0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_120e0:
  %v3_120e4 = mul i32 %arg1, 8
  %v2_120e8 = add i32 %v3_120e4, ptrtoint (i32* @global_var_1eb28.332 to i32)
  %v2_120ec = icmp eq i32* %arg2, null
  br i1 %v2_120ec, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_120e0
  %v3_120f811 = inttoptr i32 %v2_120e8 to i32*
  %v4_120f812 = load i32, i32* %v3_120f811, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_120e0
  %v2_120f0 = add i32 %v3_120e4, add (i32 ptrtoint (i32* @global_var_1eb28.332 to i32), i32 5)
  %v3_120f0 = inttoptr i32 %v2_120f0 to i8*
  %v4_120f0 = load i8, i8* %v3_120f0, align 1
  %v5_120f0 = zext i8 %v4_120f0 to i32
  store i32 %v5_120f0, i32* @r2, align 4
  %v2_120f4 = add i32 %v3_120e4, add (i32 ptrtoint (i32* @global_var_1eb28.332 to i32), i32 4)
  %v3_120f4 = inttoptr i32 %v2_120f4 to i8*
  %v4_120f4 = load i8, i8* %v3_120f4, align 4
  %v5_120f4 = zext i8 %v4_120f4 to i32
  %v3_120f8 = inttoptr i32 %v2_120e8 to i32*
  %v4_120f8 = load i32, i32* %v3_120f8, align 4
  %v5_120fc = mul nuw nsw i32 %v5_120f0, 256
  %v6_120fc = or i32 %v5_120f4, %v5_120fc
  store i32 %v6_120fc, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_120f8714 = phi i32 [ %v4_120f812, %.thread ], [ %v4_120f8, %bb ]
  ret i32 %v4_120f8714

; uselistorder directives
  uselistorder i32 %v2_120e8, { 1, 0 }
  uselistorder i32 %v3_120e4, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_1210c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1210c:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1210c = mul i32 %arg1, 8
  %v3_12110 = load i32, i32* @r4, align 4
  store i32 %v3_12110, i32* %stack_var_-20, align 4
  %v3_12120 = and i32 %v3_1210c, 2040
  %v2_12124 = add i32 %v3_12120, ptrtoint (i32* @global_var_1eb28.332 to i32)
  store i32 %v2_12124, i32* @lr, align 4
  %v1_1212c = add i32 %v3_12120, add (i32 ptrtoint (i32* @global_var_1eb28.332 to i32), i32 4)
  store i32 %v1_1212c, i32* %r7.global-to-local, align 4
  %v2_12130 = load i32, i32* @global_var_1e8dc.335, align 4
  %v2_12134 = inttoptr i32 %v1_1212c to i8*
  %v3_12134 = load i8, i8* %v2_12134, align 4
  %v4_12134 = zext i8 %v3_12134 to i32
  store i32 %v4_12134, i32* @r1, align 4
  %v1_12138 = add i32 %v3_12120, add (i32 ptrtoint (i32* @global_var_1eb28.332 to i32), i32 5)
  %v2_12138 = inttoptr i32 %v1_12138 to i8*
  %v3_12138 = load i8, i8* %v2_12138, align 1
  %v4_12138 = zext i8 %v3_12138 to i32
  %v3_1213c = udiv i32 %v2_12130, 256
  %v4_12140 = mul nuw nsw i32 %v4_12138, 256
  %v5_12140 = or i32 %v4_12140, %v4_12134
  %v7_12140 = icmp eq i32 %v5_12140, 0
  store i1 %v7_12140, i1* @cpsr_z, align 1
  %v3_12144 = udiv i32 %v2_12130, 65536
  %v1_12148 = urem i32 %v3_1213c, 256
  store i32 %v1_12148, i32* %r6.global-to-local, align 4
  %v1_1214c = urem i32 %v3_12144, 256
  store i32 %v1_1214c, i32* %r5.global-to-local, align 4
  %v3_12150 = udiv i32 %v2_12130, 16777216
  store i32 %v3_12150, i32* %r4.global-to-local, align 4
  %v1_12154 = urem i32 %v2_12130, 256
  br i1 %v7_12140, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_1210c
  store i32 %v3_12110, i32* @r4, align 4
  ret i32 %v1_12154

bb8:                                              ; preds = %dec_label_pc_1210c
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12160

dec_label_pc_12160:                               ; preds = %dec_label_pc_12160, %bb8
  %v2_1216c = phi i32 [ %v1_121a8, %dec_label_pc_12160 ], [ 0, %bb8 ]
  %v0_12160 = phi i32 [ %v0_121a0, %dec_label_pc_12160 ], [ %v2_12124, %bb8 ]
  %v1_12160 = inttoptr i32 %v0_12160 to i32*
  %v2_12160 = load i32, i32* %v1_12160, align 4
  %v2_12164 = add i32 %v2_12160, %v2_1216c
  %v3_12164 = inttoptr i32 %v2_12164 to i8*
  %v4_12164 = load i8, i8* %v3_12164, align 1
  %v6_12164 = zext i8 %v4_12164 to i32
  %v2_12168 = xor i32 %v6_12164, %v1_12154
  %v1_1216c = trunc i32 %v2_12168 to i8
  store i8 %v1_1216c, i8* %v3_12164, align 1
  %v0_12170 = load i32, i32* @lr, align 4
  %v1_12170 = inttoptr i32 %v0_12170 to i32*
  %v2_12170 = load i32, i32* %v1_12170, align 4
  %v0_12174 = load i32, i32* %ip.global-to-local, align 4
  %v2_12174 = add i32 %v0_12174, %v2_12170
  %v3_12174 = inttoptr i32 %v2_12174 to i8*
  %v4_12174 = load i8, i8* %v3_12174, align 1
  %v6_12174 = zext i8 %v4_12174 to i32
  %v0_12178 = load i32, i32* %r6.global-to-local, align 4
  %v2_12178 = xor i32 %v0_12178, %v6_12174
  %v1_1217c = trunc i32 %v2_12178 to i8
  store i8 %v1_1217c, i8* %v3_12174, align 1
  %v0_12180 = load i32, i32* @lr, align 4
  %v1_12180 = inttoptr i32 %v0_12180 to i32*
  %v2_12180 = load i32, i32* %v1_12180, align 4
  %v0_12184 = load i32, i32* %ip.global-to-local, align 4
  %v2_12184 = add i32 %v0_12184, %v2_12180
  %v3_12184 = inttoptr i32 %v2_12184 to i8*
  %v4_12184 = load i8, i8* %v3_12184, align 1
  %v6_12184 = zext i8 %v4_12184 to i32
  %v0_12188 = load i32, i32* %r5.global-to-local, align 4
  %v2_12188 = xor i32 %v0_12188, %v6_12184
  %v1_1218c = trunc i32 %v2_12188 to i8
  store i8 %v1_1218c, i8* %v3_12184, align 1
  %v0_12190 = load i32, i32* @lr, align 4
  %v1_12190 = inttoptr i32 %v0_12190 to i32*
  %v2_12190 = load i32, i32* %v1_12190, align 4
  store i32 %v2_12190, i32* @r1, align 4
  %v0_12194 = load i32, i32* %ip.global-to-local, align 4
  %v2_12194 = add i32 %v0_12194, %v2_12190
  %v3_12194 = inttoptr i32 %v2_12194 to i8*
  %v4_12194 = load i8, i8* %v3_12194, align 1
  %v6_12194 = zext i8 %v4_12194 to i32
  %v0_12198 = load i32, i32* %r4.global-to-local, align 4
  %v2_12198 = xor i32 %v0_12198, %v6_12194
  %v1_1219c = trunc i32 %v2_12198 to i8
  store i8 %v1_1219c, i8* %v3_12194, align 1
  %v0_121a0 = load i32, i32* @lr, align 4
  %v1_121a0 = add i32 %v0_121a0, 4
  %v2_121a0 = inttoptr i32 %v1_121a0 to i8*
  %v3_121a0 = load i8, i8* %v2_121a0, align 1
  %v4_121a0 = zext i8 %v3_121a0 to i32
  %v0_121a4 = load i32, i32* %r7.global-to-local, align 4
  %v1_121a4 = add i32 %v0_121a4, 1
  %v2_121a4 = inttoptr i32 %v1_121a4 to i8*
  %v3_121a4 = load i8, i8* %v2_121a4, align 1
  %v4_121a4 = zext i8 %v3_121a4 to i32
  %v0_121a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_121a8 = add i32 %v0_121a8, 1
  store i32 %v1_121a8, i32* %ip.global-to-local, align 4
  %v4_121ac = mul nuw nsw i32 %v4_121a4, 256
  %v5_121ac = or i32 %v4_121ac, %v4_121a0
  %v9_121b0 = icmp eq i32 %v5_121ac, %v1_121a8
  store i1 %v9_121b0, i1* @cpsr_z, align 1
  %v8_121b4 = icmp sgt i32 %v5_121ac, %v1_121a8
  br i1 %v8_121b4, label %dec_label_pc_12160, label %dec_label_pc_121b8

dec_label_pc_121b8:                               ; preds = %dec_label_pc_12160
  %v2_121b8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_121b8, i32* @r4, align 4
  ret i32 %v1_12154

; uselistorder directives
  uselistorder i32 %v1_121a8, { 1, 2, 3, 0 }
  uselistorder i32 %v0_121a0, { 1, 0 }
  uselistorder i32 %v1_12154, { 0, 2, 1 }
  uselistorder i32 %v2_12130, { 3, 0, 1, 2 }
}

define i32 @function_121c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_121c4:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_121c4 = mul i32 %arg1, 8
  %v3_121c8 = load i32, i32* @r4, align 4
  store i32 %v3_121c8, i32* %stack_var_-20, align 4
  %v3_121d8 = and i32 %v3_121c4, 2040
  %v2_121dc = add i32 %v3_121d8, ptrtoint (i32* @global_var_1eb28.332 to i32)
  store i32 %v2_121dc, i32* @lr, align 4
  %v1_121e4 = add i32 %v3_121d8, add (i32 ptrtoint (i32* @global_var_1eb28.332 to i32), i32 4)
  store i32 %v1_121e4, i32* %r7.global-to-local, align 4
  %v2_121e8 = load i32, i32* @global_var_1e8dc.335, align 4
  store i32 %v2_121e8, i32* @r2, align 4
  %v2_121ec = inttoptr i32 %v1_121e4 to i8*
  %v3_121ec = load i8, i8* %v2_121ec, align 4
  %v4_121ec = zext i8 %v3_121ec to i32
  %v1_121f0 = add i32 %v3_121d8, add (i32 ptrtoint (i32* @global_var_1eb28.332 to i32), i32 5)
  %v2_121f0 = inttoptr i32 %v1_121f0 to i8*
  %v3_121f0 = load i8, i8* %v2_121f0, align 1
  %v4_121f0 = zext i8 %v3_121f0 to i32
  %v3_121f4 = udiv i32 %v2_121e8, 256
  %v4_121f8 = mul nuw nsw i32 %v4_121f0, 256
  %v5_121f8 = or i32 %v4_121f8, %v4_121ec
  %v7_121f8 = icmp eq i32 %v5_121f8, 0
  %v3_121fc = udiv i32 %v2_121e8, 65536
  %v1_12200 = urem i32 %v3_121f4, 256
  store i32 %v1_12200, i32* %r6.global-to-local, align 4
  %v1_12204 = urem i32 %v3_121fc, 256
  store i32 %v1_12204, i32* %r5.global-to-local, align 4
  %v3_12208 = udiv i32 %v2_121e8, 16777216
  store i32 %v3_12208, i32* %r4.global-to-local, align 4
  %v1_1220c = urem i32 %v2_121e8, 256
  br i1 %v7_121f8, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_121c4
  store i32 %v3_121c8, i32* @r4, align 4
  ret i32 %v1_1220c

bb8:                                              ; preds = %dec_label_pc_121c4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12218

dec_label_pc_12218:                               ; preds = %dec_label_pc_12218, %bb8
  %v2_12224 = phi i32 [ %v1_12260, %dec_label_pc_12218 ], [ 0, %bb8 ]
  %v0_12218 = phi i32 [ %v0_12258, %dec_label_pc_12218 ], [ %v2_121dc, %bb8 ]
  %v1_12218 = inttoptr i32 %v0_12218 to i32*
  %v2_12218 = load i32, i32* %v1_12218, align 4
  %v2_1221c = add i32 %v2_12218, %v2_12224
  %v3_1221c = inttoptr i32 %v2_1221c to i8*
  %v4_1221c = load i8, i8* %v3_1221c, align 1
  %v6_1221c = zext i8 %v4_1221c to i32
  %v2_12220 = xor i32 %v6_1221c, %v1_1220c
  %v1_12224 = trunc i32 %v2_12220 to i8
  store i8 %v1_12224, i8* %v3_1221c, align 1
  %v0_12228 = load i32, i32* @lr, align 4
  %v1_12228 = inttoptr i32 %v0_12228 to i32*
  %v2_12228 = load i32, i32* %v1_12228, align 4
  %v0_1222c = load i32, i32* %ip.global-to-local, align 4
  %v2_1222c = add i32 %v0_1222c, %v2_12228
  %v3_1222c = inttoptr i32 %v2_1222c to i8*
  %v4_1222c = load i8, i8* %v3_1222c, align 1
  %v6_1222c = zext i8 %v4_1222c to i32
  %v0_12230 = load i32, i32* %r6.global-to-local, align 4
  %v2_12230 = xor i32 %v0_12230, %v6_1222c
  %v1_12234 = trunc i32 %v2_12230 to i8
  store i8 %v1_12234, i8* %v3_1222c, align 1
  %v0_12238 = load i32, i32* @lr, align 4
  %v1_12238 = inttoptr i32 %v0_12238 to i32*
  %v2_12238 = load i32, i32* %v1_12238, align 4
  %v0_1223c = load i32, i32* %ip.global-to-local, align 4
  %v2_1223c = add i32 %v0_1223c, %v2_12238
  %v3_1223c = inttoptr i32 %v2_1223c to i8*
  %v4_1223c = load i8, i8* %v3_1223c, align 1
  %v6_1223c = zext i8 %v4_1223c to i32
  %v0_12240 = load i32, i32* %r5.global-to-local, align 4
  %v2_12240 = xor i32 %v0_12240, %v6_1223c
  %v1_12244 = trunc i32 %v2_12240 to i8
  store i8 %v1_12244, i8* %v3_1223c, align 1
  %v0_12248 = load i32, i32* @lr, align 4
  %v1_12248 = inttoptr i32 %v0_12248 to i32*
  %v2_12248 = load i32, i32* %v1_12248, align 4
  %v0_1224c = load i32, i32* %ip.global-to-local, align 4
  %v2_1224c = add i32 %v0_1224c, %v2_12248
  %v3_1224c = inttoptr i32 %v2_1224c to i8*
  %v4_1224c = load i8, i8* %v3_1224c, align 1
  %v6_1224c = zext i8 %v4_1224c to i32
  %v0_12250 = load i32, i32* %r4.global-to-local, align 4
  %v2_12250 = xor i32 %v0_12250, %v6_1224c
  %v1_12254 = trunc i32 %v2_12250 to i8
  store i8 %v1_12254, i8* %v3_1224c, align 1
  %v0_12258 = load i32, i32* @lr, align 4
  %v1_12258 = add i32 %v0_12258, 4
  %v2_12258 = inttoptr i32 %v1_12258 to i8*
  %v3_12258 = load i8, i8* %v2_12258, align 1
  %v4_12258 = zext i8 %v3_12258 to i32
  %v0_1225c = load i32, i32* %r7.global-to-local, align 4
  %v1_1225c = add i32 %v0_1225c, 1
  %v2_1225c = inttoptr i32 %v1_1225c to i8*
  %v3_1225c = load i8, i8* %v2_1225c, align 1
  %v4_1225c = zext i8 %v3_1225c to i32
  %v0_12260 = load i32, i32* %ip.global-to-local, align 4
  %v1_12260 = add i32 %v0_12260, 1
  store i32 %v1_12260, i32* %ip.global-to-local, align 4
  %v4_12264 = mul nuw nsw i32 %v4_1225c, 256
  %v5_12264 = or i32 %v4_12264, %v4_12258
  store i32 %v5_12264, i32* @r2, align 4
  %v8_1226c = icmp sgt i32 %v5_12264, %v1_12260
  br i1 %v8_1226c, label %dec_label_pc_12218, label %dec_label_pc_12270

dec_label_pc_12270:                               ; preds = %dec_label_pc_12218
  %v2_12270 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12270, i32* @r4, align 4
  ret i32 %v1_1220c

; uselistorder directives
  uselistorder i32 %v1_12260, { 1, 2, 0 }
  uselistorder i32 %v0_12258, { 1, 0 }
  uselistorder i32 %v1_1220c, { 0, 2, 1 }
  uselistorder i32 %v2_121e8, { 3, 0, 1, 2, 4 }
}

define i32 @function_1227c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1227c:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_1227c = load i32, i32* @r4, align 4
  store i32 %v3_1227c, i32* %stack_var_-36, align 4
  %v6_1227c = load i32, i32* @r5, align 4
  %v9_1227c = load i32, i32* @r6, align 4
  %v12_1227c = load i32, i32* @r7, align 4
  %v1_12284 = call i32 @function_13f60(i32 20)
  store i32 ptrtoint (i32* @global_var_1eb28.332 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v1_12284, i32* @r5, align 4
  %v4_1229c = call i32 @function_12b6c(i32 %v1_12284, i32 ptrtoint ([21 x i8]* @global_var_16030.340 to i32), i32 20)
  store i8 20, i8* bitcast (i32* @global_var_1eb44.341 to i8*), align 4
  %v0_122ac = load i32, i32* @r5, align 4
  store i32 %v0_122ac, i32* @global_var_1eb40.342, align 4
  %v0_122b0 = load i32, i32* @r6, align 4
  %v1_122b0 = trunc i32 %v0_122b0 to i8
  store i8 %v1_122b0, i8* bitcast (i32* @global_var_1eb45.343 to i8*), align 4
  %v1_122b4 = call i32 @function_13f60(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 %v1_122b4, i32* @r7, align 4
  %v4_122c8 = call i32 @function_12b6c(i32 %v1_122b4, i32 ptrtoint ([3 x i8]* @global_var_16048.345 to i32), i32 2)
  %v0_122d0 = load i32, i32* @r7, align 4
  store i32 %v0_122d0, i32* @global_var_1eb48.346, align 4
  %v0_122d4 = load i32, i32* @r5, align 4
  %v1_122d4 = trunc i32 %v0_122d4 to i8
  store i8 %v1_122d4, i8* bitcast (i32* @global_var_1eb4c.347 to i8*), align 4
  %v0_122d8 = load i32, i32* @r6, align 4
  %v1_122d8 = trunc i32 %v0_122d8 to i8
  store i8 %v1_122d8, i8* bitcast (i32* @global_var_1eb4d.348 to i8*), align 4
  %v1_122dc = call i32 @function_13f60(i32 23)
  store i32 %v1_122dc, i32* @r7, align 4
  %v4_122ec = call i32 @function_12b6c(i32 %v1_122dc, i32 ptrtoint ([24 x i8]* @global_var_1604c.350 to i32), i32 23)
  %v0_122f4 = load i32, i32* @r5, align 4
  store i8 23, i8* bitcast (i32* @global_var_1ebbc.351 to i8*), align 4
  %v0_122fc = load i32, i32* @r7, align 4
  store i32 %v0_122fc, i32* @global_var_1ebb8.352, align 4
  %v0_12300 = load i32, i32* @r6, align 4
  %v1_12300 = trunc i32 %v0_12300 to i8
  store i8 %v1_12300, i8* bitcast (i32* @global_var_1ebbd.353 to i8*), align 4
  %v1_12304 = call i32 @function_13f60(i32 %v0_122f4)
  %v0_12308 = load i32, i32* @r5, align 4
  store i32 %v1_12304, i32* @r7, align 4
  %v3_12314 = call i32 @function_12b6c(i32 %v1_12304, i32 ptrtoint (i32* @global_var_16064.355 to i32), i32 %v0_12308)
  %v0_1231c = load i32, i32* @r7, align 4
  store i32 %v0_1231c, i32* @global_var_1ebc0.356, align 4
  %v0_12320 = load i32, i32* @r5, align 4
  %v1_12320 = trunc i32 %v0_12320 to i8
  store i8 %v1_12320, i8* bitcast (i32* @global_var_1ebc4.357 to i8*), align 4
  %v0_12324 = load i32, i32* @r6, align 4
  %v1_12324 = trunc i32 %v0_12324 to i8
  store i8 %v1_12324, i8* bitcast (i32* @global_var_1ebc5.358 to i8*), align 4
  %v1_12328 = call i32 @function_13f60(i32 15)
  store i32 %v1_12328, i32* @r5, align 4
  %v3_12338 = call i32 @function_12b6c(i32 %v1_12328, i32 ptrtoint (i32* @global_var_16068.360 to i32), i32 15)
  store i8 15, i8* bitcast (i32* @global_var_1eb3c.361 to i8*), align 4
  %v0_12348 = load i32, i32* @r5, align 4
  store i32 %v0_12348, i32* @global_var_1eb38.362, align 4
  %v0_1234c = load i32, i32* @r6, align 4
  %v1_1234c = trunc i32 %v0_1234c to i8
  store i8 %v1_1234c, i8* bitcast (i32* @global_var_1eb3d.363 to i8*), align 4
  %v1_12350 = call i32 @function_13f60(i32 29)
  store i32 %v1_12350, i32* @r5, align 4
  %v3_12360 = call i32 @function_12b6c(i32 %v1_12350, i32 ptrtoint (i32* @global_var_16078.365 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1eb54.366 to i8*), align 4
  %v0_12370 = load i32, i32* @r5, align 4
  store i32 %v0_12370, i32* @global_var_1eb50.367, align 4
  %v0_12374 = load i32, i32* @r6, align 4
  %v1_12374 = trunc i32 %v0_12374 to i8
  store i8 %v1_12374, i8* bitcast (i32* @global_var_1eb55.368 to i8*), align 4
  %v1_12378 = call i32 @function_13f60(i32 7)
  store i32 7, i32* @r7, align 4
  store i32 %v1_12378, i32* @r5, align 4
  %v4_1238c = call i32 @function_12b6c(i32 %v1_12378, i32 ptrtoint ([8 x i8]* @global_var_16098.370 to i32), i32 7)
  %v0_12394 = load i32, i32* @r5, align 4
  store i32 %v0_12394, i32* @global_var_1eb58.371, align 4
  %v0_12398 = load i32, i32* @r7, align 4
  %v1_12398 = trunc i32 %v0_12398 to i8
  store i8 %v1_12398, i8* bitcast (i32* @global_var_1eb5c.372 to i8*), align 4
  %v0_1239c = load i32, i32* @r6, align 4
  %v1_1239c = trunc i32 %v0_1239c to i8
  store i8 %v1_1239c, i8* bitcast (i32* @global_var_1eb5d.373 to i8*), align 4
  %v1_123a0 = call i32 @function_13f60(i32 5)
  store i32 %v1_123a0, i32* @r5, align 4
  %v4_123b0 = call i32 @function_12b6c(i32 %v1_123a0, i32 ptrtoint ([6 x i8]* @global_var_160a0.375 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1eb64.376 to i8*), align 4
  %v0_123c0 = load i32, i32* @r5, align 4
  store i32 %v0_123c0, i32* @global_var_1eb60.377, align 4
  %v0_123c4 = load i32, i32* @r6, align 4
  %v1_123c4 = trunc i32 %v0_123c4 to i8
  store i8 %v1_123c4, i8* bitcast (i32* @global_var_1eb65.378 to i8*), align 4
  %v1_123c8 = call i32 @function_13f60(i32 11)
  store i32 %v1_123c8, i32* @r5, align 4
  %v3_123d8 = call i32 @function_12b6c(i32 %v1_123c8, i32 ptrtoint (i32* @global_var_160a8.380 to i32), i32 11)
  store i8 11, i8* bitcast (i32* @global_var_1eb6c.381 to i8*), align 4
  %v0_123e8 = load i32, i32* @r5, align 4
  store i32 %v0_123e8, i32* @global_var_1eb68.382, align 4
  %v0_123ec = load i32, i32* @r6, align 4
  %v1_123ec = trunc i32 %v0_123ec to i8
  store i8 %v1_123ec, i8* bitcast (i32* @global_var_1eb6d.383 to i8*), align 4
  %v1_123f0 = call i32 @function_13f60(i32 4)
  store i32 %v1_123f0, i32* @r5, align 4
  %v4_12400 = call i32 @function_12b6c(i32 %v1_123f0, i32 ptrtoint ([5 x i8]* @global_var_160b4.385 to i32), i32 4)
  %v0_12408 = load i32, i32* @r7, align 4
  store i8 4, i8* bitcast (i32* @global_var_1eb74.386 to i8*), align 4
  %v0_12410 = load i32, i32* @r5, align 4
  store i32 %v0_12410, i32* @global_var_1eb70.387, align 4
  %v0_12414 = load i32, i32* @r6, align 4
  %v1_12414 = trunc i32 %v0_12414 to i8
  store i8 %v1_12414, i8* bitcast (i32* @global_var_1eb75.388 to i8*), align 4
  %v1_12418 = call i32 @function_13f60(i32 %v0_12408)
  %v0_1241c = load i32, i32* @r7, align 4
  store i32 %v1_12418, i32* @r5, align 4
  %v4_12428 = call i32 @function_12b6c(i32 %v1_12418, i32 ptrtoint ([8 x i8]* @global_var_160bc.390 to i32), i32 %v0_1241c)
  %v0_12430 = load i32, i32* @r5, align 4
  store i32 %v0_12430, i32* @global_var_1eb78.391, align 4
  %v0_12434 = load i32, i32* @r7, align 4
  %v1_12434 = trunc i32 %v0_12434 to i8
  store i8 %v1_12434, i8* bitcast (i32* @global_var_1eb7c.392 to i8*), align 4
  %v0_12438 = load i32, i32* @r6, align 4
  %v1_12438 = trunc i32 %v0_12438 to i8
  store i8 %v1_12438, i8* bitcast (i32* @global_var_1eb7d.393 to i8*), align 4
  %v1_1243c = call i32 @function_13f60(i32 8)
  store i32 %v1_1243c, i32* @r5, align 4
  %v4_1244c = call i32 @function_12b6c(i32 %v1_1243c, i32 ptrtoint ([9 x i8]* @global_var_160c4.395 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1eb84.396 to i8*), align 4
  %v0_1245c = load i32, i32* @r5, align 4
  store i32 %v0_1245c, i32* @global_var_1eb80.397, align 4
  %v0_12460 = load i32, i32* @r6, align 4
  %v1_12460 = trunc i32 %v0_12460 to i8
  store i8 %v1_12460, i8* bitcast (i32* @global_var_1eb85.398 to i8*), align 4
  %v1_12464 = call i32 @function_13f60(i32 13)
  store i32 %v1_12464, i32* @r5, align 4
  %v3_12474 = call i32 @function_12b6c(i32 %v1_12464, i32 ptrtoint (i32* @global_var_160d0.400 to i32), i32 13)
  store i8 13, i8* bitcast (i32* @global_var_1eb8c.401 to i8*), align 4
  %v0_12484 = load i32, i32* @r5, align 4
  store i32 %v0_12484, i32* @global_var_1eb88.402, align 4
  %v0_12488 = load i32, i32* @r6, align 4
  %v1_12488 = trunc i32 %v0_12488 to i8
  store i8 %v1_12488, i8* bitcast (i32* @global_var_1eb8d.403 to i8*), align 4
  %v1_1248c = call i32 @function_13f60(i32 10)
  store i32 10, i32* %r8.global-to-local, align 4
  store i32 %v1_1248c, i32* @r5, align 4
  %v4_124a0 = call i32 @function_12b6c(i32 %v1_1248c, i32 ptrtoint ([11 x i8]* @global_var_160e0.405 to i32), i32 10)
  %v0_124a8 = load i32, i32* @r5, align 4
  store i32 %v0_124a8, i32* @global_var_1eb90.406, align 4
  store i8 10, i8* bitcast (i32* @global_var_1eb94.407 to i8*), align 4
  %v0_124b0 = load i32, i32* @r6, align 4
  %v1_124b0 = trunc i32 %v0_124b0 to i8
  store i8 %v1_124b0, i8* bitcast (i32* @global_var_1eb95.408 to i8*), align 4
  %v1_124b4 = call i32 @function_13f60(i32 10)
  %v0_124bc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_124b4, i32* @r5, align 4
  %v4_124c4 = call i32 @function_12b6c(i32 %v1_124b4, i32 ptrtoint ([11 x i8]* @global_var_160ec.410 to i32), i32 %v0_124bc)
  %v0_124cc = load i32, i32* @r5, align 4
  store i32 %v0_124cc, i32* @global_var_1eb98.411, align 4
  %v1_124d0 = trunc i32 %v0_124bc to i8
  store i8 %v1_124d0, i8* bitcast (i32* @global_var_1eb9c.412 to i8*), align 4
  %v0_124d4 = load i32, i32* @r6, align 4
  %v1_124d4 = trunc i32 %v0_124d4 to i8
  store i8 %v1_124d4, i8* bitcast (i32* @global_var_1eb9d.413 to i8*), align 4
  %v1_124d8 = call i32 @function_13f60(i32 33)
  store i32 %v1_124d8, i32* @r5, align 4
  %v3_124e8 = call i32 @function_12b6c(i32 %v1_124d8, i32 ptrtoint (i32* @global_var_160f8.415 to i32), i32 33)
  store i8 33, i8* bitcast (i32* @global_var_1eba4.416 to i8*), align 4
  %v0_124f8 = load i32, i32* @r5, align 4
  store i32 %v0_124f8, i32* @global_var_1eba0.417, align 4
  %v0_124fc = load i32, i32* @r6, align 4
  %v1_124fc = trunc i32 %v0_124fc to i8
  store i8 %v1_124fc, i8* bitcast (i32* @global_var_1eba5.418 to i8*), align 4
  %v1_12500 = call i32 @function_13f60(i32 8)
  store i32 %v1_12500, i32* @r5, align 4
  %v4_12510 = call i32 @function_12b6c(i32 %v1_12500, i32 ptrtoint ([9 x i8]* @global_var_1611c.420 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1ebac.421 to i8*), align 4
  %v0_12520 = load i32, i32* @r5, align 4
  store i32 %v0_12520, i32* @global_var_1eba8.422, align 4
  %v0_12524 = load i32, i32* @r6, align 4
  %v1_12524 = trunc i32 %v0_12524 to i8
  store i8 %v1_12524, i8* bitcast (i32* @global_var_1ebad.423 to i8*), align 4
  %v1_12528 = call i32 @function_13f60(i32 11)
  store i32 %v1_12528, i32* @r5, align 4
  %v4_12538 = call i32 @function_12b6c(i32 %v1_12528, i32 ptrtoint ([12 x i8]* @global_var_16128.425 to i32), i32 11)
  store i8 11, i8* bitcast (i32* @global_var_1ebb4.426 to i8*), align 4
  %v0_12548 = load i32, i32* @r5, align 4
  store i32 %v0_12548, i32* @global_var_1ebb0.427, align 4
  %v0_1254c = load i32, i32* @r6, align 4
  %v1_1254c = trunc i32 %v0_1254c to i8
  store i8 %v1_1254c, i8* bitcast (i32* @global_var_1ebb5.428 to i8*), align 4
  %v1_12550 = call i32 @function_13f60(i32 6)
  store i32 %v1_12550, i32* @r5, align 4
  %v4_12560 = call i32 @function_12b6c(i32 %v1_12550, i32 ptrtoint ([7 x i8]* @global_var_16134.430 to i32), i32 6)
  %v0_12568 = load i32, i32* @r7, align 4
  store i8 6, i8* bitcast (i32* @global_var_1ebcc.431 to i8*), align 4
  %v0_12570 = load i32, i32* @r5, align 4
  store i32 %v0_12570, i32* @global_var_1ebc8.432, align 4
  %v0_12574 = load i32, i32* @r6, align 4
  %v1_12574 = trunc i32 %v0_12574 to i8
  store i8 %v1_12574, i8* bitcast (i32* @global_var_1ebcd.433 to i8*), align 4
  %v1_12578 = call i32 @function_13f60(i32 %v0_12568)
  %v0_1257c = load i32, i32* @r7, align 4
  store i32 %v1_12578, i32* @r5, align 4
  %v4_12588 = call i32 @function_12b6c(i32 %v1_12578, i32 ptrtoint ([8 x i8]* @global_var_1613c.435 to i32), i32 %v0_1257c)
  %v0_1258c = load i32, i32* @r7, align 4
  %v0_12590 = load i32, i32* @r5, align 4
  store i32 %v0_12590, i32* @global_var_1ebd0.436, align 4
  %v1_12594 = trunc i32 %v0_1258c to i8
  store i8 %v1_12594, i8* bitcast (i32* @global_var_1ebd4.437 to i8*), align 4
  %v0_12598 = load i32, i32* @r6, align 4
  %v1_12598 = trunc i32 %v0_12598 to i8
  store i8 %v1_12598, i8* bitcast (i32* @global_var_1ebd5.438 to i8*), align 4
  %v1_1259c = call i32 @function_13f60(i32 %v0_1258c)
  %v0_125a0 = load i32, i32* @r7, align 4
  store i32 %v1_1259c, i32* @r5, align 4
  %v4_125ac = call i32 @function_12b6c(i32 %v1_1259c, i32 ptrtoint ([8 x i8]* @global_var_16144.440 to i32), i32 %v0_125a0)
  %v0_125b4 = load i32, i32* @r5, align 4
  store i32 %v0_125b4, i32* @global_var_1ebd8.441, align 4
  %v0_125b8 = load i32, i32* @r7, align 4
  %v1_125b8 = trunc i32 %v0_125b8 to i8
  store i8 %v1_125b8, i8* bitcast (i32* @global_var_1ebdc.442 to i8*), align 4
  %v0_125bc = load i32, i32* @r6, align 4
  %v1_125bc = trunc i32 %v0_125bc to i8
  store i8 %v1_125bc, i8* bitcast (i32* @global_var_1ebdd.443 to i8*), align 4
  %v1_125c0 = call i32 @function_13f60(i32 3)
  store i32 %v1_125c0, i32* @r5, align 4
  %v4_125d0 = call i32 @function_12b6c(i32 %v1_125c0, i32 ptrtoint ([4 x i8]* @global_var_1614c.445 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1ebe4.446 to i8*), align 4
  %v0_125e0 = load i32, i32* @r5, align 4
  store i32 %v0_125e0, i32* @global_var_1ebe0.447, align 4
  %v0_125e4 = load i32, i32* @r6, align 4
  %v1_125e4 = trunc i32 %v0_125e4 to i8
  store i8 %v1_125e4, i8* bitcast (i32* @global_var_1ebe5.448 to i8*), align 4
  %v1_125e8 = call i32 @function_13f60(i32 19)
  store i32 %v1_125e8, i32* @r5, align 4
  store i32 19, i32* %sb.global-to-local, align 4
  %v3_125fc = call i32 @function_12b6c(i32 %v1_125e8, i32 ptrtoint (i32* @global_var_16150.450 to i32), i32 19)
  %v0_12604 = load i32, i32* @r5, align 4
  store i32 %v0_12604, i32* @global_var_1ebe8.451, align 4
  store i8 19, i8* bitcast (i32* @global_var_1ebec.452 to i8*), align 4
  %v0_1260c = load i32, i32* @r6, align 4
  %v1_1260c = trunc i32 %v0_1260c to i8
  store i8 %v1_1260c, i8* bitcast (i32* @global_var_1ebed.453 to i8*), align 4
  %v1_12610 = call i32 @function_13f60(i32 24)
  store i32 %v1_12610, i32* @r5, align 4
  %v3_12620 = call i32 @function_12b6c(i32 %v1_12610, i32 ptrtoint (i32* @global_var_16164.455 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1ebf4.456 to i8*), align 4
  %v0_12630 = load i32, i32* @r5, align 4
  store i32 %v0_12630, i32* @global_var_1ebf0.457, align 4
  %v0_12634 = load i32, i32* @r6, align 4
  %v1_12634 = trunc i32 %v0_12634 to i8
  store i8 %v1_12634, i8* bitcast (i32* @global_var_1ebf5.458 to i8*), align 4
  %v1_12638 = call i32 @function_13f60(i32 9)
  store i32 %v1_12638, i32* @r5, align 4
  store i32 9, i32* %sl.global-to-local, align 4
  %v4_1264c = call i32 @function_12b6c(i32 %v1_12638, i32 ptrtoint ([10 x i8]* @global_var_16180.460 to i32), i32 9)
  %v0_12654 = load i32, i32* @r5, align 4
  store i32 %v0_12654, i32* @global_var_1ebf8.461, align 4
  store i8 9, i8* bitcast (i32* @global_var_1ebfc.462 to i8*), align 4
  %v0_1265c = load i32, i32* @r6, align 4
  %v1_1265c = trunc i32 %v0_1265c to i8
  store i8 %v1_1265c, i8* bitcast (i32* @global_var_1ebfd.463 to i8*), align 4
  %v1_12660 = call i32 @function_13f60(i32 16)
  store i32 %v1_12660, i32* @r5, align 4
  store i32 16, i32* %fp.global-to-local, align 4
  %v3_12674 = call i32 @function_12b6c(i32 %v1_12660, i32 ptrtoint (i32* @global_var_1618c.465 to i32), i32 16)
  %v0_1267c = load i32, i32* @r5, align 4
  store i32 %v0_1267c, i32* @global_var_1ec00.466, align 4
  store i8 16, i8* bitcast (i32* @global_var_1ec04.467 to i8*), align 4
  %v0_12684 = load i32, i32* @r6, align 4
  %v1_12684 = trunc i32 %v0_12684 to i8
  store i8 %v1_12684, i8* bitcast (i32* @global_var_1ec05.468 to i8*), align 4
  %v1_12688 = call i32 @function_13f60(i32 22)
  store i32 %v1_12688, i32* @r5, align 4
  %v3_12698 = call i32 @function_12b6c(i32 %v1_12688, i32 ptrtoint (i32* @global_var_161a0.470 to i32), i32 22)
  store i8 22, i8* bitcast (i32* @global_var_1ec0c.471 to i8*), align 4
  %v0_126a8 = load i32, i32* @r5, align 4
  store i32 %v0_126a8, i32* @global_var_1ec08.472, align 4
  %v0_126ac = load i32, i32* @r6, align 4
  %v1_126ac = trunc i32 %v0_126ac to i8
  store i8 %v1_126ac, i8* bitcast (i32* @global_var_1ec0d.473 to i8*), align 4
  %v1_126b0 = call i32 @function_13f60(i32 21)
  store i32 %v1_126b0, i32* @r5, align 4
  %v3_126c0 = call i32 @function_12b6c(i32 %v1_126b0, i32 ptrtoint (i32* @global_var_161b8.475 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1ec14.476 to i8*), align 4
  %v0_126d0 = load i32, i32* @r5, align 4
  store i32 %v0_126d0, i32* @global_var_1ec10.477, align 4
  %v0_126d4 = load i32, i32* @r6, align 4
  %v1_126d4 = trunc i32 %v0_126d4 to i8
  store i8 %v1_126d4, i8* bitcast (i32* @global_var_1ec15.478 to i8*), align 4
  %v1_126d8 = call i32 @function_13f60(i32 17)
  store i32 %v1_126d8, i32* @r5, align 4
  %v4_126e8 = call i32 @function_12b6c(i32 %v1_126d8, i32 ptrtoint ([18 x i8]* @global_var_161d0.480 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1ec1c.481 to i8*), align 4
  %v0_126f8 = load i32, i32* @r5, align 4
  store i32 %v0_126f8, i32* @global_var_1ec18.482, align 4
  %v0_126fc = load i32, i32* @r6, align 4
  %v1_126fc = trunc i32 %v0_126fc to i8
  store i8 %v1_126fc, i8* bitcast (i32* @global_var_1ec1d.483 to i8*), align 4
  %v1_12700 = call i32 @function_13f60(i32 12)
  %v0_1270c = load i32, i32* @r7, align 4
  %v1_1270c = add i32 %v0_1270c, 5
  store i32 %v1_1270c, i32* @r7, align 4
  store i32 %v1_12700, i32* @r5, align 4
  %v3_12714 = call i32 @function_12b6c(i32 %v1_12700, i32 ptrtoint (i32* @global_var_161e4.485 to i32), i32 12)
  %v0_1271c = load i32, i32* @r5, align 4
  store i32 %v0_1271c, i32* @global_var_1ec20.486, align 4
  %v0_12720 = load i32, i32* @r7, align 4
  %v1_12720 = trunc i32 %v0_12720 to i8
  store i8 %v1_12720, i8* bitcast (i32* @global_var_1ec24.487 to i8*), align 4
  %v0_12724 = load i32, i32* @r6, align 4
  %v1_12724 = trunc i32 %v0_12724 to i8
  store i8 %v1_12724, i8* bitcast (i32* @global_var_1ec25.488 to i8*), align 4
  %v1_12728 = call i32 @function_13f60(i32 23)
  store i32 %v1_12728, i32* @r5, align 4
  %v3_12738 = call i32 @function_12b6c(i32 %v1_12728, i32 ptrtoint (i32* @global_var_161f4.490 to i32), i32 23)
  store i8 23, i8* bitcast (i32* @global_var_1ec2c.491 to i8*), align 4
  %v0_12748 = load i32, i32* @r5, align 4
  store i32 %v0_12748, i32* @global_var_1ec28.492, align 4
  %v0_1274c = load i32, i32* @r6, align 4
  %v1_1274c = trunc i32 %v0_1274c to i8
  store i8 %v1_1274c, i8* bitcast (i32* @global_var_1ec2d.493 to i8*), align 4
  %v1_12750 = call i32 @function_13f60(i32 83)
  store i32 %v1_12750, i32* @r5, align 4
  %v3_12760 = call i32 @function_12b6c(i32 %v1_12750, i32 ptrtoint (i32* @global_var_1620c.495 to i32), i32 83)
  store i8 83, i8* bitcast (i32* @global_var_1ec34.496 to i8*), align 4
  %v0_12770 = load i32, i32* @r5, align 4
  store i32 %v0_12770, i32* @global_var_1ec30.497, align 4
  %v0_12774 = load i32, i32* @r6, align 4
  %v1_12774 = trunc i32 %v0_12774 to i8
  store i8 %v1_12774, i8* bitcast (i32* @global_var_1ec35.498 to i8*), align 4
  %v1_12778 = call i32 @function_13f60(i32 32)
  store i32 %v1_12778, i32* @r5, align 4
  %v3_12788 = call i32 @function_12b6c(i32 %v1_12778, i32 ptrtoint (i32* @global_var_16260.500 to i32), i32 32)
  store i8 32, i8* bitcast (i32* @global_var_1ec3c.501 to i8*), align 4
  %v0_12798 = load i32, i32* @r5, align 4
  store i32 %v0_12798, i32* @global_var_1ec38.502, align 4
  %v0_1279c = load i32, i32* @r6, align 4
  %v1_1279c = trunc i32 %v0_1279c to i8
  store i8 %v1_1279c, i8* bitcast (i32* @global_var_1ec3d.503 to i8*), align 4
  %v1_127a0 = call i32 @function_13f60(i32 48)
  store i32 %v1_127a0, i32* @r5, align 4
  %v3_127b0 = call i32 @function_12b6c(i32 %v1_127a0, i32 ptrtoint (i32* @global_var_16284.505 to i32), i32 48)
  %v0_127b8 = load i32, i32* @r7, align 4
  store i8 48, i8* bitcast (i32* @global_var_1ec44.506 to i8*), align 4
  %v0_127c0 = load i32, i32* @r5, align 4
  store i32 %v0_127c0, i32* @global_var_1ec40.507, align 4
  %v0_127c4 = load i32, i32* @r6, align 4
  %v1_127c4 = trunc i32 %v0_127c4 to i8
  store i8 %v1_127c4, i8* bitcast (i32* @global_var_1ec45.508 to i8*), align 4
  %v1_127c8 = call i32 @function_13f60(i32 %v0_127b8)
  %v0_127cc = load i32, i32* @r7, align 4
  store i32 %v1_127c8, i32* @r5, align 4
  %v3_127d8 = call i32 @function_12b6c(i32 %v1_127c8, i32 ptrtoint (i32* @global_var_162b8.510 to i32), i32 %v0_127cc)
  %v0_127dc = load i32, i32* %sl.global-to-local, align 4
  %v0_127e0 = load i32, i32* @r5, align 4
  store i32 %v0_127e0, i32* @global_var_1ec48.511, align 4
  %v0_127e4 = load i32, i32* @r7, align 4
  %v1_127e4 = trunc i32 %v0_127e4 to i8
  store i8 %v1_127e4, i8* bitcast (i32* @global_var_1ec4c.512 to i8*), align 4
  %v0_127e8 = load i32, i32* @r6, align 4
  %v1_127e8 = trunc i32 %v0_127e8 to i8
  store i8 %v1_127e8, i8* bitcast (i32* @global_var_1ec4d.513 to i8*), align 4
  %v1_127ec = call i32 @function_13f60(i32 %v0_127dc)
  %v0_127f4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_127ec, i32* @r5, align 4
  %v3_127fc = call i32 @function_12b6c(i32 %v1_127ec, i32 ptrtoint (i32* @global_var_162c8.515 to i32), i32 %v0_127f4)
  %v0_12800 = load i32, i32* %r8.global-to-local, align 4
  %v0_12804 = load i32, i32* @r5, align 4
  store i32 %v0_12804, i32* @global_var_1ec50.516, align 4
  %v1_12808 = trunc i32 %v0_127f4 to i8
  store i8 %v1_12808, i8* bitcast (i32* @global_var_1ec54.517 to i8*), align 4
  %v0_1280c = load i32, i32* @r6, align 4
  %v1_1280c = trunc i32 %v0_1280c to i8
  store i8 %v1_1280c, i8* bitcast (i32* @global_var_1ec55.518 to i8*), align 4
  %v1_12810 = call i32 @function_13f60(i32 %v0_12800)
  %v0_12818 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_12810, i32* @r5, align 4
  %v3_12820 = call i32 @function_12b6c(i32 %v1_12810, i32 ptrtoint (i32* @global_var_162d4.520 to i32), i32 %v0_12818)
  %v0_12824 = load i32, i32* @r7, align 4
  %v0_12828 = load i32, i32* @r5, align 4
  store i32 %v0_12828, i32* @global_var_1ec58.521, align 4
  %v1_1282c = trunc i32 %v0_12818 to i8
  store i8 %v1_1282c, i8* bitcast (i32* @global_var_1ec5c.522 to i8*), align 4
  %v0_12830 = load i32, i32* @r6, align 4
  %v1_12830 = trunc i32 %v0_12830 to i8
  store i8 %v1_12830, i8* bitcast (i32* @global_var_1ec5d.523 to i8*), align 4
  %v1_12834 = call i32 @function_13f60(i32 %v0_12824)
  %v0_12838 = load i32, i32* @r7, align 4
  store i32 %v1_12834, i32* @r5, align 4
  %v3_12844 = call i32 @function_12b6c(i32 %v1_12834, i32 ptrtoint (i32* @global_var_162e0.525 to i32), i32 %v0_12838)
  %v0_12848 = load i32, i32* %fp.global-to-local, align 4
  %v0_1284c = load i32, i32* @r5, align 4
  store i32 %v0_1284c, i32* @global_var_1ec60.526, align 4
  %v0_12850 = load i32, i32* @r7, align 4
  %v1_12850 = trunc i32 %v0_12850 to i8
  store i8 %v1_12850, i8* bitcast (i32* @global_var_1ec64.527 to i8*), align 4
  %v0_12854 = load i32, i32* @r6, align 4
  %v1_12854 = trunc i32 %v0_12854 to i8
  store i8 %v1_12854, i8* bitcast (i32* @global_var_1ec65.528 to i8*), align 4
  %v1_12858 = call i32 @function_13f60(i32 %v0_12848)
  %v0_12860 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_12858, i32* @r5, align 4
  %v3_12868 = call i32 @function_12b6c(i32 %v1_12858, i32 ptrtoint (i32* @global_var_162f0.530 to i32), i32 %v0_12860)
  %v0_1286c = load i32, i32* %sb.global-to-local, align 4
  %v0_12870 = load i32, i32* @r5, align 4
  store i32 %v0_12870, i32* @global_var_1ec68.531, align 4
  %v1_12874 = trunc i32 %v0_12860 to i8
  store i8 %v1_12874, i8* bitcast (i32* @global_var_1ec6c.532 to i8*), align 4
  %v0_12878 = load i32, i32* @r6, align 4
  %v1_12878 = trunc i32 %v0_12878 to i8
  store i8 %v1_12878, i8* bitcast (i32* @global_var_1ec6d.533 to i8*), align 4
  %v1_1287c = call i32 @function_13f60(i32 %v0_1286c)
  %v0_12884 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_1287c, i32* @r5, align 4
  %v3_1288c = call i32 @function_12b6c(i32 %v1_1287c, i32 ptrtoint (i32* @global_var_16304.535 to i32), i32 %v0_12884)
  %v0_12894 = load i32, i32* @r5, align 4
  store i32 %v0_12894, i32* @global_var_1ec70.536, align 4
  %v1_12898 = trunc i32 %v0_12884 to i8
  store i8 %v1_12898, i8* bitcast (i32* @global_var_1ec74.537 to i8*), align 4
  %v0_1289c = load i32, i32* @r6, align 4
  %v1_1289c = trunc i32 %v0_1289c to i8
  store i8 %v1_1289c, i8* bitcast (i32* @global_var_1ec75.538 to i8*), align 4
  %v1_128a0 = call i32 @function_13f60(i32 8)
  store i32 %v1_128a0, i32* @r5, align 4
  %v4_128b0 = call i32 @function_12b6c(i32 %v1_128a0, i32 ptrtoint ([9 x i8]* @global_var_16318.540 to i32), i32 8)
  store i8 8, i8* bitcast (i32* @global_var_1ec7c.541 to i8*), align 4
  %v0_128c0 = load i32, i32* @r5, align 4
  store i32 %v0_128c0, i32* @global_var_1ec78.542, align 4
  %v0_128c4 = load i32, i32* @r6, align 4
  %v1_128c4 = trunc i32 %v0_128c4 to i8
  store i8 %v1_128c4, i8* bitcast (i32* @global_var_1ec7d.543 to i8*), align 4
  %v1_128c8 = call i32 @function_13f60(i32 11)
  store i32 %v1_128c8, i32* @r5, align 4
  %v3_128d8 = call i32 @function_12b6c(i32 %v1_128c8, i32 ptrtoint (i32* @global_var_16200.545 to i32), i32 11)
  %v0_128e0 = load i32, i32* @r7, align 4
  store i8 11, i8* bitcast (i32* @global_var_1ec84.546 to i8*), align 4
  %v0_128e8 = load i32, i32* @r5, align 4
  store i32 %v0_128e8, i32* @global_var_1ec80.547, align 4
  %v0_128ec = load i32, i32* @r6, align 4
  %v1_128ec = trunc i32 %v0_128ec to i8
  store i8 %v1_128ec, i8* bitcast (i32* @global_var_1ec85.548 to i8*), align 4
  %v1_128f0 = call i32 @function_13f60(i32 %v0_128e0)
  %v0_128f4 = load i32, i32* @r7, align 4
  store i32 %v1_128f0, i32* @r5, align 4
  %v3_12900 = call i32 @function_12b6c(i32 %v1_128f0, i32 ptrtoint (i32* @global_var_16324.550 to i32), i32 %v0_128f4)
  %v0_12908 = load i32, i32* @r5, align 4
  store i32 %v0_12908, i32* @global_var_1ec88.551, align 4
  %v0_1290c = load i32, i32* @r7, align 4
  %v1_1290c = trunc i32 %v0_1290c to i8
  store i8 %v1_1290c, i8* bitcast (i32* @global_var_1ec8c.552 to i8*), align 4
  %v0_12910 = load i32, i32* @r6, align 4
  %v1_12910 = trunc i32 %v0_12910 to i8
  store i8 %v1_12910, i8* bitcast (i32* @global_var_1ec8d.553 to i8*), align 4
  %v1_12914 = call i32 @function_13f60(i32 18)
  store i32 %v1_12914, i32* @r5, align 4
  %v3_12924 = call i32 @function_12b6c(i32 %v1_12914, i32 ptrtoint (i32* @global_var_16334.555 to i32), i32 18)
  store i8 18, i8* bitcast (i32* @global_var_1ec94.556 to i8*), align 4
  %v0_12934 = load i32, i32* @r5, align 4
  store i32 %v0_12934, i32* @global_var_1ec90.557, align 4
  %v0_12938 = load i32, i32* @r6, align 4
  %v1_12938 = trunc i32 %v0_12938 to i8
  store i8 %v1_12938, i8* bitcast (i32* @global_var_1ec95.558 to i8*), align 4
  %v1_1293c = call i32 @function_13f60(i32 25)
  store i32 %v1_1293c, i32* @r5, align 4
  %v3_1294c = call i32 @function_12b6c(i32 %v1_1293c, i32 ptrtoint (i32* @global_var_16348.560 to i32), i32 25)
  store i8 25, i8* bitcast (i32* @global_var_1ec9c.561 to i8*), align 4
  %v0_1295c = load i32, i32* @r5, align 4
  store i32 %v0_1295c, i32* @global_var_1ec98.562, align 4
  %v0_12960 = load i32, i32* @r6, align 4
  %v1_12960 = trunc i32 %v0_12960 to i8
  store i8 %v1_12960, i8* bitcast (i32* @global_var_1ec9d.563 to i8*), align 4
  %v1_12964 = call i32 @function_13f60(i32 111)
  store i32 111, i32* @r5, align 4
  store i32 %v1_12964, i32* @r7, align 4
  %v3_12978 = call i32 @function_12b6c(i32 %v1_12964, i32 ptrtoint (i32* @global_var_16364.565 to i32), i32 111)
  %v0_1297c = load i32, i32* @r5, align 4
  %v0_12980 = load i32, i32* @r7, align 4
  store i32 %v0_12980, i32* @global_var_1eca0.566, align 4
  %v1_12984 = trunc i32 %v0_1297c to i8
  store i8 %v1_12984, i8* bitcast (i32* @global_var_1eca4.567 to i8*), align 4
  %v0_12988 = load i32, i32* @r6, align 4
  %v1_12988 = trunc i32 %v0_12988 to i8
  store i8 %v1_12988, i8* bitcast (i32* @global_var_1eca5.568 to i8*), align 4
  %v1_1298c = call i32 @function_13f60(i32 %v0_1297c)
  %v0_12990 = load i32, i32* @r5, align 4
  store i32 %v1_1298c, i32* @r7, align 4
  %v3_1299c = call i32 @function_12b6c(i32 %v1_1298c, i32 ptrtoint (i32* @global_var_163d4.570 to i32), i32 %v0_12990)
  %v0_129a4 = load i32, i32* @r7, align 4
  store i32 %v0_129a4, i32* @global_var_1eca8.571, align 4
  %v0_129a8 = load i32, i32* @r5, align 4
  %v1_129a8 = trunc i32 %v0_129a8 to i8
  store i8 %v1_129a8, i8* bitcast (i32* @global_var_1ecac.572 to i8*), align 4
  %v0_129ac = load i32, i32* @r6, align 4
  %v1_129ac = trunc i32 %v0_129ac to i8
  store i8 %v1_129ac, i8* bitcast (i32* @global_var_1ecad.573 to i8*), align 4
  %v1_129b0 = call i32 @function_13f60(i32 110)
  %v0_129b4 = load i32, i32* @r5, align 4
  %v1_129b4 = add i32 %v0_129b4, -1
  store i32 %v1_129b4, i32* @r5, align 4
  store i32 %v1_129b0, i32* @r7, align 4
  %v3_129c4 = call i32 @function_12b6c(i32 %v1_129b0, i32 ptrtoint (i32* @global_var_16444.575 to i32), i32 %v1_129b4)
  %v0_129c8 = load i32, i32* @r5, align 4
  %v0_129cc = load i32, i32* @r7, align 4
  store i32 %v0_129cc, i32* @global_var_1ecb0.576, align 4
  %v1_129d0 = trunc i32 %v0_129c8 to i8
  store i8 %v1_129d0, i8* bitcast (i32* @global_var_1ecb4.577 to i8*), align 4
  %v0_129d4 = load i32, i32* @r6, align 4
  %v1_129d4 = trunc i32 %v0_129d4 to i8
  store i8 %v1_129d4, i8* bitcast (i32* @global_var_1ecb5.578 to i8*), align 4
  %v1_129d8 = call i32 @function_13f60(i32 %v0_129c8)
  %v0_129dc = load i32, i32* @r5, align 4
  store i32 %v1_129d8, i32* @r7, align 4
  %v3_129e8 = call i32 @function_12b6c(i32 %v1_129d8, i32 ptrtoint (i32* @global_var_164b4.580 to i32), i32 %v0_129dc)
  %v0_129f0 = load i32, i32* @r5, align 4
  %v1_129f0 = trunc i32 %v0_129f0 to i8
  store i8 %v1_129f0, i8* bitcast (i32* @global_var_1ecbc.581 to i8*), align 4
  %v0_129f4 = load i32, i32* @r7, align 4
  store i32 %v0_129f4, i32* @global_var_1ecb8.582, align 4
  %v0_129f8 = load i32, i32* @r6, align 4
  %v1_129f8 = trunc i32 %v0_129f8 to i8
  store i8 %v1_129f8, i8* bitcast (i32* @global_var_1ecbd.583 to i8*), align 4
  %v1_129fc = call i32 @function_13f60(i32 117)
  %v3_12a0c = call i32 @function_12b6c(i32 %v1_129fc, i32 ptrtoint (i32* @global_var_16524.585 to i32), i32 117)
  %v0_12a14 = load i32, i32* @r6, align 4
  %v1_12a14 = trunc i32 %v0_12a14 to i8
  store i8 %v1_12a14, i8* bitcast (i32* @global_var_1ecc5.586 to i8*), align 4
  store i32 %v1_129fc, i32* @global_var_1ecc0.587, align 4
  store i8 117, i8* bitcast (i32* @global_var_1ecc4.588 to i8*), align 4
  %v2_12a20 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12a20, i32* @r4, align 4
  store i32 %v6_1227c, i32* @r5, align 4
  store i32 %v9_1227c, i32* @r6, align 4
  store i32 %v12_1227c, i32* @r7, align 4
  ret i32 %v3_12a0c

; uselistorder directives
  uselistorder i32 %v1_129d8, { 1, 0 }
  uselistorder i32 %v1_129b0, { 1, 0 }
  uselistorder i32 %v1_1298c, { 1, 0 }
  uselistorder i32 %v1_12964, { 1, 0 }
  uselistorder i32 %v1_128f0, { 1, 0 }
  uselistorder i32 %v1_1287c, { 1, 0 }
  uselistorder i32 %v1_12858, { 1, 0 }
  uselistorder i32 %v1_12834, { 1, 0 }
  uselistorder i32 %v1_12810, { 1, 0 }
  uselistorder i32 %v1_127ec, { 1, 0 }
  uselistorder i32 %v1_127c8, { 1, 0 }
  uselistorder i32 %v1_12700, { 1, 0 }
  uselistorder i32 %v1_1259c, { 1, 0 }
  uselistorder i32 %v1_12578, { 1, 0 }
  uselistorder i32 %v1_124b4, { 1, 0 }
  uselistorder i32 %v1_1248c, { 1, 0 }
  uselistorder i32 %v1_12418, { 1, 0 }
  uselistorder i32 %v1_12378, { 1, 0 }
  uselistorder i32 %v1_12304, { 1, 0 }
  uselistorder i32 %v1_122b4, { 1, 0 }
  uselistorder i32 %v1_12284, { 1, 0 }
  uselistorder i32 117, { 1, 0 }
  uselistorder i32 111, { 1, 2, 0 }
  uselistorder i8 16, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i8 3, { 2, 1, 0 }
  uselistorder i8 6, { 6, 7, 4, 5, 8, 0, 9, 10, 1, 2, 3 }
  uselistorder i8 4, { 4, 3, 2, 0, 1 }
  uselistorder i8 11, { 2, 3, 4, 0, 1 }
  uselistorder i8 5, { 12, 13, 0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 11, 14, 9 }
  uselistorder i8 23, { 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_12b6c, { 59, 58, 57, 56, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 55, 54, 53, 52, 51, 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_1eb28.332 to i32), { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_12af0(i8* %arg1) local_unnamed_addr {
dec_label_pc_12af0:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_12af4 = load i8, i8* %arg1, align 1
  %v4_12af4 = zext i8 %v3_12af4 to i32
  %v2_12af8 = icmp eq i8 %v3_12af4, 0
  br i1 %v2_12af8, label %dec_label_pc_12b14, label %bb

dec_label_pc_12b14:                               ; preds = %dec_label_pc_12b04, %dec_label_pc_12af0
  %merge = phi i32 [ %v4_12af4, %dec_label_pc_12af0 ], [ %v1_12b04, %dec_label_pc_12b04 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_12af0
  br label %dec_label_pc_12b04

dec_label_pc_12b04:                               ; preds = %dec_label_pc_12b04, %bb
  %v0_12b04 = phi i32 [ %v1_12b04, %dec_label_pc_12b04 ], [ 0, %bb ]
  %v1_12b04 = add i32 %v0_12b04, 1
  %v2_12b08 = add i32 %v1_12b04, %tmp
  %v3_12b08 = inttoptr i32 %v2_12b08 to i8*
  %v4_12b08 = load i8, i8* %v3_12b08, align 1
  %v2_12b0c = icmp eq i8 %v4_12b08, 0
  br i1 %v2_12b0c, label %dec_label_pc_12b14, label %dec_label_pc_12b04

; uselistorder directives
  uselistorder i32 %v1_12b04, { 1, 0, 2 }
}

define i32 @function_12b18(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12b18:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12b18 = load i8, i8* %arg1, align 1
  %v3_12b18 = zext i8 %v2_12b18 to i32
  %v2_12b1c = icmp eq i8 %v2_12b18, 0
  br i1 %v2_12b1c, label %dec_label_pc_12b60, label %dec_label_pc_12b24

dec_label_pc_12b24:                               ; preds = %dec_label_pc_12b18
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12b28

dec_label_pc_12b28:                               ; preds = %dec_label_pc_12b28, %dec_label_pc_12b24
  %v0_12b28 = phi i32 [ %v1_12b28, %dec_label_pc_12b28 ], [ 0, %dec_label_pc_12b24 ]
  %v1_12b28 = add i32 %v0_12b28, 1
  store i32 %v1_12b28, i32* %ip.global-to-local, align 4
  %v2_12b2c = add i32 %v1_12b28, %tmp
  %v3_12b2c = inttoptr i32 %v2_12b2c to i8*
  %v4_12b2c = load i8, i8* %v3_12b2c, align 1
  %v2_12b30 = icmp eq i8 %v4_12b2c, 0
  br i1 %v2_12b30, label %dec_label_pc_12b38, label %dec_label_pc_12b28

dec_label_pc_12b38:                               ; preds = %dec_label_pc_12b28
  %v7_12b38 = icmp eq i32 %v0_12b28, -2
  br i1 %v7_12b38, label %dec_label_pc_12b58, label %dec_label_pc_12b44.preheader

dec_label_pc_12b44.preheader:                     ; preds = %dec_label_pc_12b38, %dec_label_pc_12b60
  %storemerge = phi i32 [ %v3_12b18, %dec_label_pc_12b60 ], [ %v1_12b28, %dec_label_pc_12b38 ]
  %v2_12b50.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_12b44

dec_label_pc_12b44:                               ; preds = %dec_label_pc_12b44.dec_label_pc_12b44_crit_edge, %dec_label_pc_12b44.preheader
  %v2_12b50 = phi i32 [ %v5_12b50, %dec_label_pc_12b44.dec_label_pc_12b44_crit_edge ], [ %v2_12b50.pre, %dec_label_pc_12b44.preheader ]
  %v0_12b48 = phi i32 [ %v0_12b48.pre, %dec_label_pc_12b44.dec_label_pc_12b44_crit_edge ], [ %tmp, %dec_label_pc_12b44.preheader ]
  %v0_12b44 = phi i32 [ %v0_12b44.pre, %dec_label_pc_12b44.dec_label_pc_12b44_crit_edge ], [ %storemerge, %dec_label_pc_12b44.preheader ]
  %v1_12b44 = add i32 %v0_12b44, -1
  store i32 %v1_12b44, i32* @r2, align 4
  %v1_12b48 = inttoptr i32 %v0_12b48 to i8*
  %v2_12b48 = load i8, i8* %v1_12b48, align 1
  %v5_12b48 = add i32 %v0_12b48, 1
  store i32 %v5_12b48, i32* %r1.global-to-local, align 4
  %v3_12b4c = icmp eq i32 %v0_12b44, 0
  %v3_12b50 = inttoptr i32 %v2_12b50 to i8*
  store i8 %v2_12b48, i8* %v3_12b50, align 1
  %v4_12b50 = load i32, i32* @r0, align 4
  %v5_12b50 = add i32 %v4_12b50, 1
  store i32 %v5_12b50, i32* @r0, align 4
  br i1 %v3_12b4c, label %dec_label_pc_12b58.loopexit, label %dec_label_pc_12b44.dec_label_pc_12b44_crit_edge

dec_label_pc_12b44.dec_label_pc_12b44_crit_edge:  ; preds = %dec_label_pc_12b44
  %v0_12b44.pre = load i32, i32* @r2, align 4
  %v0_12b48.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12b44

dec_label_pc_12b58.loopexit:                      ; preds = %dec_label_pc_12b44
  %v0_12b58.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12b58

dec_label_pc_12b58:                               ; preds = %dec_label_pc_12b58.loopexit, %dec_label_pc_12b38
  %v0_12b58 = phi i32 [ %v0_12b58.pre, %dec_label_pc_12b58.loopexit ], [ %v1_12b28, %dec_label_pc_12b38 ]
  ret i32 %v0_12b58

dec_label_pc_12b60:                               ; preds = %dec_label_pc_12b18
  store i32 %v3_12b18, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12b44.preheader

; uselistorder directives
  uselistorder i32 %v5_12b50, { 1, 0 }
  uselistorder i32 %v0_12b48, { 1, 0 }
  uselistorder i32 %v1_12b28, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_12b18, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12b44.preheader, { 1, 0 }
}

define i32 @function_12b6c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12b6c:
  %ip.global-to-local = alloca i32, align 4
  %v2_12b6c = icmp eq i32 %arg3, 0
  br i1 %v2_12b6c, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12b78, %dec_label_pc_12b6c
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12b6c
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12b78

dec_label_pc_12b78:                               ; preds = %dec_label_pc_12b78, %bb
  %v0_12b78 = phi i32 [ %v1_12b80, %dec_label_pc_12b78 ], [ 0, %bb ]
  %v2_12b78 = add i32 %v0_12b78, %arg2
  %v3_12b78 = inttoptr i32 %v2_12b78 to i8*
  %v4_12b78 = load i8, i8* %v3_12b78, align 1
  %v4_12b7c = add i32 %v0_12b78, %arg1
  %v5_12b7c = inttoptr i32 %v4_12b7c to i8*
  store i8 %v4_12b78, i8* %v5_12b7c, align 1
  %v0_12b80 = load i32, i32* %ip.global-to-local, align 4
  %v1_12b80 = add i32 %v0_12b80, 1
  store i32 %v1_12b80, i32* %ip.global-to-local, align 4
  %v9_12b84 = icmp eq i32 %v1_12b80, %arg3
  br i1 %v9_12b84, label %.loopexit, label %dec_label_pc_12b78

; uselistorder directives
  uselistorder i32 %v1_12b80, { 1, 2, 0 }
}

define i32 @function_12b90(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12b90:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v2_12b90 = icmp eq i32 %arg2, 0
  br i1 %v2_12b90, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_12ba0, %dec_label_pc_12b90
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_12b90
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12ba0

dec_label_pc_12ba0:                               ; preds = %dec_label_pc_12ba0.dec_label_pc_12ba0_crit_edge, %bb
  %v2_12ba0 = phi i32 [ %v1_12ba4, %dec_label_pc_12ba0.dec_label_pc_12ba0_crit_edge ], [ 0, %bb ]
  %v0_12ba0.off0 = phi i8 [ %extract.t, %dec_label_pc_12ba0.dec_label_pc_12ba0_crit_edge ], [ 0, %bb ]
  %v4_12ba0 = add i32 %v2_12ba0, %arg1
  %v5_12ba0 = inttoptr i32 %v4_12ba0 to i8*
  store i8 %v0_12ba0.off0, i8* %v5_12ba0, align 1
  %v0_12ba4 = load i32, i32* %r3.global-to-local, align 4
  %v1_12ba4 = add i32 %v0_12ba4, 1
  store i32 %v1_12ba4, i32* %r3.global-to-local, align 4
  %v9_12ba8 = icmp eq i32 %v1_12ba4, %arg2
  br i1 %v9_12ba8, label %.loopexit, label %dec_label_pc_12ba0.dec_label_pc_12ba0_crit_edge

dec_label_pc_12ba0.dec_label_pc_12ba0_crit_edge:  ; preds = %dec_label_pc_12ba0
  %v0_12ba0.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_12ba0.pre to i8
  br label %dec_label_pc_12ba0

; uselistorder directives
  uselistorder i32 %v1_12ba4, { 1, 2, 0 }
}

define i32 @function_12bb4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12bb4:
  store i32 %arg4, i32* @lr, align 4
  %v7_12bc8 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_12bc8, label %dec_label_pc_12bcc, label %dec_label_pc_12bd4

dec_label_pc_12bcc:                               ; preds = %dec_label_pc_12be8, %dec_label_pc_12bb4, %dec_label_pc_12bd4
  ret i32 -1

dec_label_pc_12bd4:                               ; preds = %dec_label_pc_12bb4
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_12bcc, label %dec_label_pc_12bdc

dec_label_pc_12bdc:                               ; preds = %dec_label_pc_12bd4
  br label %dec_label_pc_12bf4

dec_label_pc_12be8:                               ; preds = %dec_label_pc_12c0c, %dec_label_pc_12bf4
  %v1_12be8 = add i32 %v0_12c14, 1
  %v9_12bec = icmp eq i32 %v1_12be8, %arg2
  br i1 %v9_12bec, label %dec_label_pc_12bcc, label %dec_label_pc_12bf4

dec_label_pc_12bf4:                               ; preds = %dec_label_pc_12be8, %dec_label_pc_12bdc
  %v0_12c14 = phi i32 [ %v1_12be8, %dec_label_pc_12be8 ], [ 0, %dec_label_pc_12bdc ]
  %v0_12c00 = phi i32 [ %v1_12c00., %dec_label_pc_12be8 ], [ 0, %dec_label_pc_12bdc ]
  %v2_12bf4 = add i32 %v0_12c00, %arg3
  %v3_12bf4 = inttoptr i32 %v2_12bf4 to i8*
  %v4_12bf4 = load i8, i8* %v3_12bf4, align 1
  %v2_12bf8 = add i32 %v0_12c14, %arg1
  %v3_12bf8 = inttoptr i32 %v2_12bf8 to i8*
  %v4_12bf8 = load i8, i8* %v3_12bf8, align 1
  %v9_12bfc = icmp eq i8 %v4_12bf8, %v4_12bf4
  %v1_12c00 = add i32 %v0_12c00, 1
  %v1_12c00. = select i1 %v9_12bfc, i32 %v1_12c00, i32 0
  br i1 %v9_12bfc, label %dec_label_pc_12c0c, label %dec_label_pc_12be8

dec_label_pc_12c0c:                               ; preds = %dec_label_pc_12bf4
  %v9_12c0c = icmp eq i32 %v1_12c00., %arg4
  br i1 %v9_12c0c, label %dec_label_pc_12c14, label %dec_label_pc_12be8

dec_label_pc_12c14:                               ; preds = %dec_label_pc_12c0c
  %v1_12c14 = add i32 %v0_12c14, 1
  ret i32 %v1_12c14

; uselistorder directives
  uselistorder i1 %v9_12bfc, { 1, 0 }
  uselistorder i32 %v0_12c00, { 1, 0 }
  uselistorder i32 %arg4, { 0, 2, 1 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_12bcc, { 0, 2, 1 }
}

define i32 @function_12c1c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12c1c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_12c1c = load i32, i32* @r4, align 4
  store i32 %v3_12c1c, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12c28

dec_label_pc_12c28:                               ; preds = %.thread, %dec_label_pc_12c40, %bb, %dec_label_pc_12c1c
  %v0_12c28 = phi i32 [ %tmp, %dec_label_pc_12c1c ], [ %v5_12c28, %bb ], [ %v5_12c28, %dec_label_pc_12c40 ], [ %v5_12c28, %.thread ]
  %v1_12c28 = inttoptr i32 %v0_12c28 to i8*
  %v2_12c28 = load i8, i8* %v1_12c28, align 1
  %v3_12c28 = zext i8 %v2_12c28 to i32
  %v5_12c28 = add i32 %v0_12c28, 1
  store i32 %v5_12c28, i32* %r5.global-to-local, align 4
  %v7_12c30 = icmp eq i8 %v2_12c28, 9
  br i1 %v7_12c30, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12c28
  store i32 %v3_12c28, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12c28

bb:                                               ; preds = %dec_label_pc_12c28
  %v8_12c34 = icmp eq i8 %v2_12c28, 32
  store i32 %v3_12c28, i32* %r4.global-to-local, align 4
  br i1 %v8_12c34, label %dec_label_pc_12c28, label %dec_label_pc_12c40

dec_label_pc_12c40:                               ; preds = %bb
  %v7_12c40 = icmp eq i8 %v2_12c28, 10
  br i1 %v7_12c40, label %dec_label_pc_12c28, label %dec_label_pc_12c48

dec_label_pc_12c48:                               ; preds = %dec_label_pc_12c40
  %v7_12c48 = icmp eq i8 %v2_12c28, 45
  br i1 %v7_12c48, label %dec_label_pc_12d28, label %dec_label_pc_12c50

dec_label_pc_12c50:                               ; preds = %dec_label_pc_12c48
  %v7_12c50 = icmp eq i8 %v2_12c28, 43
  br i1 %v7_12c50, label %bb48, label %dec_label_pc_12c60

bb48:                                             ; preds = %dec_label_pc_12c50
  %v2_12c54 = inttoptr i32 %v5_12c28 to i8*
  %v3_12c54 = load i8, i8* %v2_12c54, align 1
  %v4_12c54 = zext i8 %v3_12c54 to i32
  store i32 %v4_12c54, i32* %r4.global-to-local, align 4
  %v6_12c54 = add i32 %v0_12c28, 2
  store i32 %v6_12c54, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12c60

dec_label_pc_12c60:                               ; preds = %bb48, %dec_label_pc_12c50, %dec_label_pc_12d28
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_12d28 ], [ 2147483647, %dec_label_pc_12c50 ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_12d28 ], [ 0, %dec_label_pc_12c50 ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_12c68 = call i32 @function_1320c(i32 %storemerge1, i32 %arg2)
  %v0_12c6c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_12c6c, i32* @r1, align 4
  store i32 %v2_12c68, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_12c78 = call i32 @function_130fc()
  store i32 %v0_12c78, i32* @lr, align 4
  %v0_12c88.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12c88

dec_label_pc_12c88:                               ; preds = %.thread8, %dec_label_pc_12c60
  %v2_12d0411 = phi i32 [ %v1_12d2026, %.thread8 ], [ 0, %dec_label_pc_12c60 ]
  %v1_12ce0 = phi i32 [ %v0_12d1424, %.thread8 ], [ 0, %dec_label_pc_12c60 ]
  %v1_12cc8 = phi i32 [ %v3_12d0c, %.thread8 ], [ %v0_12c88.pre, %dec_label_pc_12c60 ]
  %v1_12c88 = urem i32 %v1_12cc8, 256
  %v1_12c8c = add nsw i32 %v1_12c88, -48
  %v1_12c94 = add nsw i32 %v1_12c88, -97
  %v1_12c98 = add i32 %v1_12cc8, -48
  %v1_12c9c = add nsw i32 %v1_12c88, -65
  %tmp71 = icmp ult i32 %v1_12c8c, 10
  br i1 %tmp71, label %dec_label_pc_12ccc, label %dec_label_pc_12ca4

dec_label_pc_12ca4:                               ; preds = %dec_label_pc_12c88
  %v2_12ca4 = icmp ugt i32 %v1_12c9c, 24
  %v7_12ca4 = icmp eq i32 %v1_12c9c, 25
  %v2_12ca8 = xor i1 %v7_12ca4, true
  %v3_12ca8 = and i1 %v2_12ca4, %v2_12ca8
  br i1 %v3_12ca8, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_12ca4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_12ca4, %bb49
  %v0_12cbc20 = phi i32 [ %v1_12c98, %dec_label_pc_12ca4 ], [ 0, %bb49 ]
  %v2_12cac = xor i1 %v2_12ca4, true
  %v3_12cac = or i1 %v7_12ca4, %v2_12cac
  br i1 %v3_12cac, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_12cbc = phi i32 [ %v0_12cbc20, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_12ca8, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_12cb4 = icmp ugt i32 %v1_12c94, 24
  %v11_12cb4 = icmp eq i32 %v1_12c94, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_12cb8 = phi i1 [ %v7_12ca4, %bb52 ], [ %v11_12cb4, %bb53 ]
  %v0_12cb8 = phi i1 [ %v2_12ca4, %bb52 ], [ %v6_12cb4, %bb53 ]
  %v2_12cb8 = xor i1 %v1_12cb8, true
  %v3_12cb8 = and i1 %v0_12cb8, %v2_12cb8
  br i1 %v3_12cb8, label %dec_label_pc_12d14, label %dec_label_pc_12cbc

dec_label_pc_12cbc:                               ; preds = %bb54
  %v2_12cbc = icmp eq i32 %v0_12cbc, 0
  %. = select i1 %v2_12cbc, i32 87, i32 55
  %v2_12cc8 = sub i32 %v1_12cc8, %.
  br label %dec_label_pc_12ccc

dec_label_pc_12ccc:                               ; preds = %dec_label_pc_12c88, %dec_label_pc_12cbc
  %v0_12ce034 = phi i32 [ %v1_12c9c, %dec_label_pc_12c88 ], [ %., %dec_label_pc_12cbc ]
  %v3_12d0412 = phi i32 [ %v1_12c98, %dec_label_pc_12c88 ], [ %v2_12cc8, %dec_label_pc_12cbc ]
  %v1_12ccc = load i32, i32* %r6.global-to-local, align 4
  %v6_12cd0 = icmp slt i32 %v3_12d0412, %v1_12ccc
  br i1 %v6_12cd0, label %dec_label_pc_12cd4, label %dec_label_pc_12d14

dec_label_pc_12cd4:                               ; preds = %dec_label_pc_12ccc
  %v3_12cd4 = icmp uge i32 %v2_12d0411, %v0_12c78
  %v9_12cd4 = icmp eq i32 %v2_12d0411, %v0_12c78
  %v2_12cd8 = xor i1 %v3_12cd4, true
  %v3_12cd8 = or i1 %v9_12cd4, %v2_12cd8
  br i1 %v3_12cd8, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_12cd4
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_12cd4, %bb57
  %v0_12ce033 = phi i32 [ %v0_12ce034, %dec_label_pc_12cd4 ], [ 0, %bb57 ]
  %v2_12cdc = xor i1 %v9_12cd4, true
  %v3_12cdc = and i1 %v3_12cd4, %v2_12cdc
  br i1 %v3_12cdc, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_12ce0 = phi i32 [ %v0_12ce033, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_12ce0, 0
  %v4_12ce0 = zext i1 %tmp72 to i32
  %v5_12ce0 = or i32 %v0_12ce0, %v4_12ce0
  %v7_12ce0 = icmp eq i32 %v5_12ce0, 0
  br i1 %v7_12ce0, label %dec_label_pc_12cec, label %.thread8

dec_label_pc_12cec:                               ; preds = %bb60
  %v1_12cf8 = load i32, i32* %r8.global-to-local, align 4
  %v7_12cfc = icmp sgt i32 %v3_12d0412, %v1_12cf8
  br i1 %v7_12cfc, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_12cec
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_12cec
  %v2_12d00 = icmp eq i1 %v9_12cd4, false
  br i1 %v2_12d00, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_12d0413 = mul i32 %v1_12ccc, %v2_12d0411
  %v5_12d0414 = add i32 %v4_12d0413, %v3_12d0412
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_12d2026 = phi i32 [ %v2_12d0411, %bb63 ], [ %v2_12d0411, %bb60 ], [ %v5_12d0414, %bb64 ]
  %v0_12d1424 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_12d0c = load i32, i32* %r5.global-to-local, align 4
  %v1_12d0c = inttoptr i32 %v0_12d0c to i8*
  %v2_12d0c = load i8, i8* %v1_12d0c, align 1
  %v3_12d0c = zext i8 %v2_12d0c to i32
  store i32 %v3_12d0c, i32* %r4.global-to-local, align 4
  %v5_12d0c = add i32 %v0_12d0c, 1
  store i32 %v5_12d0c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12c88

dec_label_pc_12d14:                               ; preds = %dec_label_pc_12ccc, %bb54
  %v1_12d14 = icmp slt i32 %v1_12ce0, 0
  %v0_12d38 = load i32, i32* %sl.global-to-local, align 4
  %v2_12d38 = icmp eq i32 %v0_12d38, 0
  br i1 %v1_12d14, label %dec_label_pc_12d38, label %dec_label_pc_12d1c

dec_label_pc_12d1c:                               ; preds = %dec_label_pc_12d14
  br i1 %v2_12d38, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_12d1c
  %v2_12d20 = sub i32 0, %v2_12d0411
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_12d1c, %bb65
  %v23_12d24 = phi i32 [ %v2_12d0411, %dec_label_pc_12d1c ], [ %v2_12d20, %bb65 ]
  %v2_12d24 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12d24, i32* @r4, align 4
  ret i32 %v23_12d24

dec_label_pc_12d28:                               ; preds = %dec_label_pc_12c48
  %v1_12d28 = inttoptr i32 %v5_12c28 to i8*
  %v2_12d28 = load i8, i8* %v1_12d28, align 1
  %v3_12d28 = zext i8 %v2_12d28 to i32
  store i32 %v3_12d28, i32* %r4.global-to-local, align 4
  %v5_12d28 = add i32 %v0_12c28, 2
  store i32 %v5_12d28, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12c60

dec_label_pc_12d38:                               ; preds = %dec_label_pc_12d14
  %.70 = select i1 %v2_12d38, i32 2147483647, i32 -2147483648
  %v2_12d44 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_12d44, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_12d0c, { 1, 0 }
  uselistorder i1 %v9_12cd4, { 1, 0, 2 }
  uselistorder i1 %v3_12cd4, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_12ca4, { 1, 2, 0 }
  uselistorder i1 %v2_12ca4, { 1, 0, 2 }
  uselistorder i32 %v1_12c88, { 1, 2, 0 }
  uselistorder i32 %v1_12cc8, { 1, 2, 0 }
  uselistorder i32 %v1_12ce0, { 1, 0 }
  uselistorder i32 %v2_12d0411, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_12c78, { 1, 0, 2 }
  uselistorder i32 %v5_12c28, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_12c28, { 1, 0 }
  uselistorder i32 %v0_12c28, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 7, 0, 5, 1, 2, 6, 3, 4 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_12ccc, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_12c60, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12c28, { 1, 2, 0, 3 }
}

define i32 @function_12d48(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12d48:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_12d48 = load i32, i32* @r4, align 4
  store i32 %v3_12d48, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_12d60

dec_label_pc_12d60:                               ; preds = %dec_label_pc_12d8c.dec_label_pc_12d60_crit_edge, %dec_label_pc_12d48
  %v0_12d64 = phi i32 [ %v0_12d64.pre, %dec_label_pc_12d8c.dec_label_pc_12d60_crit_edge ], [ %arg3, %dec_label_pc_12d48 ]
  %v0_12d60 = phi i32 [ %v1_12d78, %dec_label_pc_12d8c.dec_label_pc_12d60_crit_edge ], [ %tmp, %dec_label_pc_12d48 ]
  %tmp12 = inttoptr i32 %v0_12d60 to i32*
  %v5_12d6c = call i32 @function_13678(i32 %v0_12d64, i32* %tmp12, i32 1)
  %v7_12d70 = icmp eq i32 %v5_12d6c, 1
  %v0_12d74 = load i32, i32* @r4, align 4
  %v1_12d78 = add i32 %v0_12d74, 1
  store i32 %v1_12d78, i32* @r4, align 4
  %v0_12d80 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_12d70, label %dec_label_pc_12d80, label %dec_label_pc_12d98

dec_label_pc_12d80:                               ; preds = %dec_label_pc_12d60
  %v1_12d80 = add i32 %v0_12d80, 1
  store i32 %v1_12d80, i32* %r5.global-to-local, align 4
  %v0_12d84 = load i32, i32* %r7.global-to-local, align 4
  %v7_12d88 = icmp sgt i32 %v0_12d84, %v1_12d80
  br i1 %v7_12d88, label %dec_label_pc_12d8c, label %dec_label_pc_12d98

dec_label_pc_12d8c:                               ; preds = %dec_label_pc_12d80
  %v1_12d8c = inttoptr i32 %v0_12d74 to i8*
  %v2_12d8c = load i8, i8* %v1_12d8c, align 1
  %v7_12d90 = icmp eq i8 %v2_12d8c, 10
  br i1 %v7_12d90, label %dec_label_pc_12d98, label %dec_label_pc_12d8c.dec_label_pc_12d60_crit_edge

dec_label_pc_12d8c.dec_label_pc_12d60_crit_edge:  ; preds = %dec_label_pc_12d8c
  %v0_12d64.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12d60

dec_label_pc_12d98:                               ; preds = %dec_label_pc_12d60, %dec_label_pc_12d8c, %dec_label_pc_12d80
  %v0_12d98 = phi i32 [ %v1_12d80, %dec_label_pc_12d8c ], [ %v1_12d80, %dec_label_pc_12d80 ], [ %v0_12d80, %dec_label_pc_12d60 ]
  %v2_12d98 = icmp eq i32 %v0_12d98, 0
  %v1_12d9c = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_12d98, i32 0, i32 %v1_12d9c
  %v2_12da4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12da4, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_12d78, { 1, 0 }
  uselistorder i8 10, { 8, 1, 0, 9, 7, 10, 2, 3, 4, 5, 6 }
  uselistorder i32 (i32, i32*, i32)* @function_13678, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_12d98, { 1, 2, 0 }
}

define i32 @function_12da8() local_unnamed_addr {
dec_label_pc_12da8:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12da8 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_12db8 = call i32 @function_13a84()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_12dc0 = inttoptr i32 %v0_12db8 to i32*
  store i32 0, i32* %v2_12dc0, align 4
  %v0_12dcc = load i32, i32* %r6.global-to-local, align 4
  %v3_12dd0 = call i32 @function_13db0(i32 2, i32 2, i32 %v0_12dcc)
  %v7_12ddc = icmp eq i32 %v3_12dd0, -1
  store i32 %v3_12dd0, i32* %r5.global-to-local, align 4
  %v2_12de8 = load i32, i32* @r4, align 4
  br i1 %v7_12ddc, label %dec_label_pc_12e38, label %dec_label_pc_12dfc

dec_label_pc_12dfc:                               ; preds = %dec_label_pc_12da8
  %v7_12de8 = shl i32 2056, %v2_12de8
  %v8_12de8 = or i32 %v7_12de8, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_12e18 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_12e18 = call i32 @function_13c0c(i32 %v3_12dd0, %sockaddr* %v3_12e18, i32 %v2_12de8)
  %v2_12e20 = ptrtoint i32* %stack_var_-24 to i32
  %v0_12e24 = load i32, i32* %r5.global-to-local, align 4
  %v4_12e28 = call i32 @function_13c38(i32 %v0_12e24, %sockaddr* %v3_12e18, i32 %v2_12e20)
  %v1_12e30 = call i32 @function_134b0(i32 %v0_12e24)
  br label %dec_label_pc_12e38

dec_label_pc_12e38:                               ; preds = %dec_label_pc_12da8, %dec_label_pc_12dfc
  %v0_12e38 = phi i32 [ %v0_12dcc, %dec_label_pc_12da8 ], [ %v8_12de8, %dec_label_pc_12dfc ]
  store i32 %v3_12da8, i32* @r4, align 4
  ret i32 %v0_12e38

; uselistorder directives
  uselistorder i32 %v3_12dd0, { 2, 1, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_13c0c, { 6, 0, 7, 2, 1, 3, 4, 5, 8 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_13db0, { 4, 18, 2, 3, 16, 17, 15, 14, 13, 12, 11, 10, 9, 1, 8, 7, 6, 5, 0 }
  uselistorder label %dec_label_pc_12e38, { 1, 0 }
}

define i32 @function_12e44(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12e44:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_12e48 = load i8, i8* %tmp, align 1
  %v2_12e4c = icmp eq i8 %v3_12e48, 0
  br i1 %v2_12e4c, label %bb, label %dec_label_pc_12e60

bb:                                               ; preds = %dec_label_pc_12e44
  %v4_12e48 = zext i8 %v3_12e48 to i32
  br label %dec_label_pc_12e74

dec_label_pc_12e60:                               ; preds = %dec_label_pc_12e44
  br label %dec_label_pc_12e64

dec_label_pc_12e64:                               ; preds = %dec_label_pc_12e64, %dec_label_pc_12e60
  %v0_12e64 = phi i32 [ %v1_12e64, %dec_label_pc_12e64 ], [ 0, %dec_label_pc_12e60 ]
  %v1_12e64 = add i32 %v0_12e64, 1
  %v2_12e68 = add i32 %v1_12e64, %arg2
  %v3_12e68 = inttoptr i32 %v2_12e68 to i8*
  %v4_12e68 = load i8, i8* %v3_12e68, align 1
  %v2_12e6c = icmp eq i8 %v4_12e68, 0
  br i1 %v2_12e6c, label %dec_label_pc_12e74, label %dec_label_pc_12e64

dec_label_pc_12e74:                               ; preds = %dec_label_pc_12e64, %bb
  %v0_12eb818 = phi i32 [ %v4_12e48, %bb ], [ %v1_12e64, %dec_label_pc_12e64 ]
  %v0_12e7c1 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_12e7c1, 1
  br i1 %tmp27, label %dec_label_pc_12ec8, label %dec_label_pc_12e88

dec_label_pc_12e88:                               ; preds = %dec_label_pc_12e74, %dec_label_pc_12e7c.backedge
  %v0_12e80.in = phi i32 [ %v0_12e80, %dec_label_pc_12e7c.backedge ], [ %v0_12e7c1, %dec_label_pc_12e74 ]
  %v0_12eac = phi i32 [ %v1_12eac., %dec_label_pc_12e7c.backedge ], [ 0, %dec_label_pc_12e74 ]
  %v0_12e88 = phi i32 [ %v5_12e88, %dec_label_pc_12e7c.backedge ], [ %tmp20, %dec_label_pc_12e74 ]
  %v0_12e80 = add i32 %v0_12e80.in, -1
  %v1_12e88 = inttoptr i32 %v0_12e88 to i8*
  %v2_12e88 = load i8, i8* %v1_12e88, align 1
  %v3_12e88 = zext i8 %v2_12e88 to i32
  store i32 %v3_12e88, i32* @lr, align 4
  %v5_12e88 = add i32 %v0_12e88, 1
  %v2_12e8c = add i32 %v0_12eac, %arg2
  %v3_12e8c = inttoptr i32 %v2_12e8c to i8*
  %v4_12e8c = load i8, i8* %v3_12e8c, align 1
  %v6_12e8c = zext i8 %v4_12e8c to i32
  %v1_12e90 = add nsw i32 %v3_12e88, -65
  %v1_12e94 = add nsw i32 %v6_12e8c, -65
  %tmp35 = icmp ult i32 %v1_12e90, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_12e88
  %v5_12e9c = or i32 %v3_12e88, 96
  store i32 %v5_12e9c, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_12e88, %bb28
  %v0_12ea8 = phi i32 [ %v3_12e88, %dec_label_pc_12e88 ], [ %v5_12e9c, %bb28 ]
  %tmp36 = icmp ult i32 %v1_12e94, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_12ea4 = or i32 %v6_12e8c, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_12ea8 = phi i32 [ %v6_12e8c, %bb29 ], [ %v5_12ea4, %bb30 ]
  %v9_12ea8 = icmp eq i32 %v0_12ea8, %v1_12ea8
  %v1_12eac = add i32 %v0_12eac, 1
  %v1_12eac. = select i1 %v9_12ea8, i32 %v1_12eac, i32 0
  br i1 %v9_12ea8, label %dec_label_pc_12eb8, label %dec_label_pc_12e7c.backedge

dec_label_pc_12e7c.backedge:                      ; preds = %bb31, %dec_label_pc_12eb8
  %tmp32 = icmp slt i32 %v0_12e80, 1
  br i1 %tmp32, label %dec_label_pc_12ec8, label %dec_label_pc_12e88

dec_label_pc_12eb8:                               ; preds = %bb31
  %v9_12eb8 = icmp eq i32 %v0_12eb818, %v1_12eac.
  br i1 %v9_12eb8, label %dec_label_pc_12ec0, label %dec_label_pc_12e7c.backedge

dec_label_pc_12ec0:                               ; preds = %dec_label_pc_12eb8
  %v2_12ec0 = sub i32 %v5_12e88, %tmp20
  ret i32 %v2_12ec0

dec_label_pc_12ec8:                               ; preds = %dec_label_pc_12e7c.backedge, %dec_label_pc_12e74
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_12eac., { 1, 0 }
  uselistorder i32 %v0_12e88, { 1, 0 }
  uselistorder i32 %v0_12eac, { 1, 0 }
  uselistorder i8 %v3_12e48, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_12e7c.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_12e88, { 1, 0 }
}

define i32 @function_12ed0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12ed0:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_12ed0 = load i8, i8* %arg1, align 1
  %v2_12ed4 = icmp eq i8 %v2_12ed0, 0
  br i1 %v2_12ed4, label %bb, label %dec_label_pc_12ee0

bb:                                               ; preds = %dec_label_pc_12ed0
  %v3_12ed0 = zext i8 %v2_12ed0 to i32
  br label %dec_label_pc_12ef4

dec_label_pc_12ee0:                               ; preds = %dec_label_pc_12ed0
  br label %dec_label_pc_12ee4

dec_label_pc_12ee4:                               ; preds = %dec_label_pc_12ee4, %dec_label_pc_12ee0
  %v0_12ee4 = phi i32 [ %v1_12ee4, %dec_label_pc_12ee4 ], [ 0, %dec_label_pc_12ee0 ]
  %v1_12ee4 = add i32 %v0_12ee4, 1
  %v2_12ee8 = add i32 %v1_12ee4, %tmp
  %v3_12ee8 = inttoptr i32 %v2_12ee8 to i8*
  %v4_12ee8 = load i8, i8* %v3_12ee8, align 1
  %v2_12eec = icmp eq i8 %v4_12ee8, 0
  br i1 %v2_12eec, label %dec_label_pc_12ef4, label %dec_label_pc_12ee4

dec_label_pc_12ef4:                               ; preds = %dec_label_pc_12ee4, %bb
  %v1_12f18 = phi i32 [ %v3_12ed0, %bb ], [ %v1_12ee4, %dec_label_pc_12ee4 ]
  %v1_12ef4 = inttoptr i32 %arg2 to i8*
  %v2_12ef4 = load i8, i8* %v1_12ef4, align 1
  %v3_12ef4 = zext i8 %v2_12ef4 to i32
  %v2_12ef8 = icmp eq i8 %v2_12ef4, 0
  br i1 %v2_12ef8, label %bb22, label %dec_label_pc_12f04

bb22:                                             ; preds = %dec_label_pc_12ef4
  store i32 %v3_12ef4, i32* @r2, align 4
  br label %dec_label_pc_12f18

dec_label_pc_12f04:                               ; preds = %dec_label_pc_12ef4
  br label %dec_label_pc_12f08

dec_label_pc_12f08:                               ; preds = %dec_label_pc_12f08, %dec_label_pc_12f04
  %v0_12f08 = phi i32 [ %v1_12f08, %dec_label_pc_12f08 ], [ 0, %dec_label_pc_12f04 ]
  %v1_12f08 = add i32 %v0_12f08, 1
  store i32 %v1_12f08, i32* @r2, align 4
  %v2_12f0c = add i32 %v1_12f08, %arg2
  %v3_12f0c = inttoptr i32 %v2_12f0c to i8*
  %v4_12f0c = load i8, i8* %v3_12f0c, align 1
  %v2_12f10 = icmp eq i8 %v4_12f0c, 0
  br i1 %v2_12f10, label %dec_label_pc_12f18, label %dec_label_pc_12f08

dec_label_pc_12f18:                               ; preds = %dec_label_pc_12f08, %bb22
  %v0_12f444 = phi i32 [ %v3_12ef4, %bb22 ], [ %v1_12f08, %dec_label_pc_12f08 ]
  %v9_12f18 = icmp eq i32 %v0_12f444, %v1_12f18
  br i1 %v9_12f18, label %dec_label_pc_12f44.preheader, label %dec_label_pc_12f24

dec_label_pc_12f44.preheader:                     ; preds = %dec_label_pc_12f18
  %v2_12f446 = icmp eq i32 %v1_12f18, 0
  br i1 %v2_12f446, label %dec_label_pc_12f4c, label %dec_label_pc_12f2c

dec_label_pc_12f24:                               ; preds = %dec_label_pc_12f2c, %dec_label_pc_12f18
  ret i32 0

dec_label_pc_12f2c:                               ; preds = %dec_label_pc_12f3c, %dec_label_pc_12f44.preheader
  %v0_12f44.in = phi i32 [ %v0_12f44, %dec_label_pc_12f3c ], [ %v1_12f18, %dec_label_pc_12f44.preheader ]
  %v0_12f40 = phi i32 [ %v1_12f40, %dec_label_pc_12f3c ], [ %arg2, %dec_label_pc_12f44.preheader ]
  %v0_12f3c = phi i32 [ %v1_12f3c, %dec_label_pc_12f3c ], [ %tmp, %dec_label_pc_12f44.preheader ]
  %v0_12f44 = add i32 %v0_12f44.in, -1
  %v1_12f2c = inttoptr i32 %v0_12f3c to i8*
  %v2_12f2c = load i8, i8* %v1_12f2c, align 1
  %v3_12f2c = zext i8 %v2_12f2c to i32
  store i32 %v3_12f2c, i32* @r2, align 4
  %v1_12f30 = inttoptr i32 %v0_12f40 to i8*
  %v2_12f30 = load i8, i8* %v1_12f30, align 1
  %v9_12f34 = icmp eq i8 %v2_12f2c, %v2_12f30
  br i1 %v9_12f34, label %dec_label_pc_12f3c, label %dec_label_pc_12f24

dec_label_pc_12f3c:                               ; preds = %dec_label_pc_12f2c
  %v1_12f3c = add i32 %v0_12f3c, 1
  %v1_12f40 = add i32 %v0_12f40, 1
  %v2_12f44 = icmp eq i32 %v0_12f44, 0
  br i1 %v2_12f44, label %dec_label_pc_12f4c, label %dec_label_pc_12f2c

dec_label_pc_12f4c:                               ; preds = %dec_label_pc_12f3c, %dec_label_pc_12f44.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_12f08, { 0, 1, 3, 2 }
  uselistorder i8 %v2_12ed0, { 1, 0 }
}

define i32 @function_12f54(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12f54:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_12f58 = load i8, i8* %arg1, align 1
  %v2_12f5c = icmp eq i8 %v2_12f58, 0
  %v0_12f60 = load i32, i32* %r2.global-to-local, align 4
  br i1 %v2_12f5c, label %bb, label %dec_label_pc_12f6c

bb:                                               ; preds = %dec_label_pc_12f54
  %v3_12f58 = zext i8 %v2_12f58 to i32
  br label %dec_label_pc_12f80

dec_label_pc_12f6c:                               ; preds = %dec_label_pc_12f54
  br label %dec_label_pc_12f70

dec_label_pc_12f70:                               ; preds = %dec_label_pc_12f70, %dec_label_pc_12f6c
  %v0_12f70 = phi i32 [ %v1_12f70, %dec_label_pc_12f70 ], [ 0, %dec_label_pc_12f6c ]
  %v1_12f70 = add i32 %v0_12f70, 1
  %v2_12f74 = add i32 %v1_12f70, %tmp
  %v3_12f74 = inttoptr i32 %v2_12f74 to i8*
  %v4_12f74 = load i8, i8* %v3_12f74, align 1
  %v2_12f78 = icmp eq i8 %v4_12f74, 0
  br i1 %v2_12f78, label %dec_label_pc_12f80, label %dec_label_pc_12f70

dec_label_pc_12f80:                               ; preds = %dec_label_pc_12f70, %bb
  %v9_12fa8 = phi i32 [ %v3_12f58, %bb ], [ %v1_12f70, %dec_label_pc_12f70 ]
  %v0_12f80 = load i32, i32* %r1.global-to-local, align 4
  %v1_12f80 = inttoptr i32 %v0_12f80 to i8*
  %v2_12f80 = load i8, i8* %v1_12f80, align 1
  %v3_12f80 = zext i8 %v2_12f80 to i32
  %v2_12f84 = icmp eq i8 %v2_12f80, 0
  br i1 %v2_12f84, label %bb26, label %dec_label_pc_12f90

bb26:                                             ; preds = %dec_label_pc_12f80
  store i32 %v3_12f80, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12fa4

dec_label_pc_12f90:                               ; preds = %dec_label_pc_12f80
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12f94

dec_label_pc_12f94:                               ; preds = %dec_label_pc_12f94, %dec_label_pc_12f90
  %v0_12f94 = phi i32 [ %v1_12f94, %dec_label_pc_12f94 ], [ 0, %dec_label_pc_12f90 ]
  %v1_12f94 = add i32 %v0_12f94, 1
  store i32 %v1_12f94, i32* %r2.global-to-local, align 4
  %v2_12f98 = add i32 %v1_12f94, %v0_12f80
  %v3_12f98 = inttoptr i32 %v2_12f98 to i8*
  %v4_12f98 = load i8, i8* %v3_12f98, align 1
  %v2_12f9c = icmp eq i8 %v4_12f98, 0
  br i1 %v2_12f9c, label %dec_label_pc_12fa4, label %dec_label_pc_12f94

dec_label_pc_12fa4:                               ; preds = %dec_label_pc_12f94, %bb26
  %v1_12fa4 = phi i32 [ %v3_12f80, %bb26 ], [ %v1_12f94, %dec_label_pc_12f94 ]
  %v2_12fa4 = sub i32 %v0_12f60, %v1_12fa4
  %v4_12fa4 = xor i32 %v1_12fa4, %v0_12f60
  %v5_12fa4 = xor i32 %v2_12fa4, %v0_12f60
  %v6_12fa4 = and i32 %v5_12fa4, %v4_12fa4
  %v7_12fa8 = icmp sgt i32 %v0_12f60, %v1_12fa4
  br i1 %v7_12fa8, label %bb28, label %bb27

bb27:                                             ; preds = %dec_label_pc_12fa4
  %v10_12fa8 = sub i32 %v0_12f60, %v9_12fa8
  %v12_12fa8 = xor i32 %v9_12fa8, %v0_12f60
  %v13_12fa8 = xor i32 %v10_12fa8, %v0_12f60
  %v14_12fa8 = and i32 %v13_12fa8, %v12_12fa8
  br label %bb28

bb28:                                             ; preds = %dec_label_pc_12fa4, %bb27
  %v2_12fac.in = phi i32 [ %v6_12fa4, %dec_label_pc_12fa4 ], [ %v14_12fa8, %bb27 ]
  %v1_12fac.in = phi i32 [ %v2_12fa4, %dec_label_pc_12fa4 ], [ %v10_12fa8, %bb27 ]
  %v1_12fa4.pn = phi i32 [ %v1_12fa4, %dec_label_pc_12fa4 ], [ %v9_12fa8, %bb27 ]
  %v0_12fac = icmp eq i32 %v0_12f60, %v1_12fa4.pn
  %v1_12fac = icmp slt i32 %v1_12fac.in, 0
  %v2_12fac = icmp slt i32 %v2_12fac.in, 0
  %v3_12fac = xor i1 %v2_12fac, %v1_12fac
  %v4_12fac = or i1 %v0_12fac, %v3_12fac
  br i1 %v4_12fac, label %dec_label_pc_12fbc.preheader, label %dec_label_pc_12fd4

dec_label_pc_12fbc.preheader:                     ; preds = %bb28
  %v2_12fbc5 = icmp eq i32 %v0_12f60, 0
  br i1 %v2_12fbc5, label %dec_label_pc_12fdc, label %dec_label_pc_12fc4

dec_label_pc_12fb4:                               ; preds = %dec_label_pc_12fc4
  %v1_12fb4 = add i32 %v0_12fb4, 1
  %v1_12fb8 = add i32 %v0_12fb8, 1
  store i32 %v1_12fb8, i32* %r1.global-to-local, align 4
  %v2_12fbc = icmp eq i32 %v0_12fbc, 0
  br i1 %v2_12fbc, label %dec_label_pc_12fdc, label %dec_label_pc_12fc4

dec_label_pc_12fc4:                               ; preds = %dec_label_pc_12fb4, %dec_label_pc_12fbc.preheader
  %v0_12fbc.in = phi i32 [ %v0_12fbc, %dec_label_pc_12fb4 ], [ %v0_12f60, %dec_label_pc_12fbc.preheader ]
  %v0_12fb8 = phi i32 [ %v1_12fb8, %dec_label_pc_12fb4 ], [ %v0_12f80, %dec_label_pc_12fbc.preheader ]
  %v0_12fb4 = phi i32 [ %v1_12fb4, %dec_label_pc_12fb4 ], [ %tmp, %dec_label_pc_12fbc.preheader ]
  %v0_12fbc = add i32 %v0_12fbc.in, -1
  %v1_12fc4 = inttoptr i32 %v0_12fb4 to i8*
  %v2_12fc4 = load i8, i8* %v1_12fc4, align 1
  %v3_12fc4 = zext i8 %v2_12fc4 to i32
  store i32 %v3_12fc4, i32* %r2.global-to-local, align 4
  %v1_12fc8 = inttoptr i32 %v0_12fb8 to i8*
  %v2_12fc8 = load i8, i8* %v1_12fc8, align 1
  %v9_12fcc = icmp eq i8 %v2_12fc4, %v2_12fc8
  br i1 %v9_12fcc, label %dec_label_pc_12fb4, label %dec_label_pc_12fd4

dec_label_pc_12fd4:                               ; preds = %dec_label_pc_12fc4, %bb28
  ret i32 0

dec_label_pc_12fdc:                               ; preds = %dec_label_pc_12fb4, %dec_label_pc_12fbc.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v0_12fb4, { 1, 0 }
  uselistorder i32 %v0_12fb8, { 1, 0 }
  uselistorder i32 %v1_12fa4, { 0, 3, 1, 2 }
  uselistorder i32 %v1_12f94, { 0, 1, 3, 2 }
  uselistorder i32 %v0_12f60, { 0, 6, 1, 2, 3, 7, 9, 4, 5, 8 }
  uselistorder i8 %v2_12f58, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 5, 4, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %bb28, { 1, 0 }
}

define i32 @function_12fe4(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12fe4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_12fe4 = load i32, i32* @r4, align 4
  store i32 %v3_12fe4, i32* %stack_var_-28, align 4
  %v22_12fe4 = ptrtoint i32* %stack_var_-28 to i32
  %v0_12fe8 = load i32, i32* @r2, align 4
  store i32 %v0_12fe8, i32* %r8.global-to-local, align 4
  %v2_12fe8 = icmp eq i32 %v0_12fe8, 0
  store i1 %v2_12fe8, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_12fe8, label %dec_label_pc_130d8, label %dec_label_pc_12ff8

dec_label_pc_12ff8:                               ; preds = %dec_label_pc_12fe4
  %v3_12ff8 = icmp eq i8 %arg1, 0
  store i1 %v3_12ff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12ff8, label %.thread, label %dec_label_pc_1300c

.thread:                                          ; preds = %dec_label_pc_12ff8
  %v4_13000 = inttoptr i32 %v0_12fe8 to i8*
  store i8 48, i8* %v4_13000, align 1
  %v0_13004.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13004.pr.pr, label %.thread1, label %dec_label_pc_1300c

.thread1:                                         ; preds = %.thread
  %v4_13004 = load i32, i32* %r8.global-to-local, align 4
  %v5_13004 = add i32 %v4_13004, 1
  %v6_13004 = inttoptr i32 %v5_13004 to i8*
  store i8 0, i8* %v6_13004, align 1
  %v0_13008.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13008.pr.pr, label %dec_label_pc_130d8, label %dec_label_pc_1300c

dec_label_pc_1300c:                               ; preds = %dec_label_pc_12ff8, %.thread, %.thread1
  %v7_13010 = icmp eq i32 %arg2, 10
  store i1 %v7_13010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13010, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_1300c
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_1300c
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_13034

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13044

dec_label_pc_13034:                               ; preds = %bb
  %v2_13034 = sub nsw i32 0, %tmp
  store i32 %v2_13034, i32* %r4.global-to-local, align 4
  store i1 %v3_12ff8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_12ff8, label %dec_label_pc_130e4, label %dec_label_pc_13044

dec_label_pc_13044:                               ; preds = %dec_label_pc_13034, %.thread4
  %v0_1304c10 = phi i32 [ %tmp, %.thread4 ], [ %v2_13034, %dec_label_pc_13034 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_13034 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_13048 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_13048, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1304c

dec_label_pc_1304c:                               ; preds = %bb37, %dec_label_pc_13044
  %v0_1304c = phi i32 [ %v0_13070, %bb37 ], [ %v0_1304c10, %dec_label_pc_13044 ]
  store i32 %v0_1304c, i32* %r0.global-to-local, align 4
  %v0_13050 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13050, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_1304c, 16777216
  %v1_13054 = sdiv i32 %sext, 16777216
  %v3_13054 = call i32 @function_1320c(i32 %v1_13054, i32 %v0_13050)
  store i32 %v3_13054, i32* %r0.global-to-local, align 4
  %v7_13058 = icmp eq i32 %v3_13054, 9
  store i1 %v7_13058, i1* %cpsr_z.global-to-local, align 1
  %v1_1305c = add i32 %v3_13054, 48
  %v0_13060 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13060, i32* @r1, align 4
  %v7_13064 = icmp sgt i32 %v3_13054, 9
  %extract.t = trunc i32 %v1_1305c to i8
  br i1 %v7_13064, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_1304c
  %v9_13064 = add i32 %v3_13054, 55
  %extract.t20 = trunc i32 %v9_13064 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_1304c, %bb36
  %v0_1306c.off0 = phi i8 [ %extract.t, %dec_label_pc_1304c ], [ %extract.t20, %bb36 ]
  %v0_13068 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13068, i32* @r0, align 4
  %v2_1306c = load i32, i32* %r7.global-to-local, align 4
  %v3_1306c = inttoptr i32 %v2_1306c to i8*
  store i8 %v0_1306c.off0, i8* %v3_1306c, align 1
  %v4_1306c = load i32, i32* %r7.global-to-local, align 4
  %v5_1306c = add i32 %v4_1306c, -1
  store i32 %v5_1306c, i32* %r7.global-to-local, align 4
  %v0_13070 = call i32 @function_130fc()
  store i32 %v0_13070, i32* %r0.global-to-local, align 4
  store i32 %v0_13070, i32* %r4.global-to-local, align 4
  %v2_13074 = icmp eq i32 %v0_13070, 0
  store i1 %v2_13074, i1* %cpsr_z.global-to-local, align 1
  %v0_13078 = load i32, i32* %r6.global-to-local, align 4
  %v1_13078 = add i32 %v0_13078, -1
  store i32 %v1_13078, i32* %r6.global-to-local, align 4
  br i1 %v2_13074, label %dec_label_pc_13080, label %dec_label_pc_1304c

dec_label_pc_13080:                               ; preds = %bb37
  %v0_13080 = load i32, i32* %sl.global-to-local, align 4
  %v2_13080 = icmp eq i32 %v0_13080, 0
  store i1 %v2_13080, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13080, label %bb38, label %dec_label_pc_130e8

bb38:                                             ; preds = %dec_label_pc_13080
  store i32 %v0_13078, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1308c

dec_label_pc_1308c:                               ; preds = %bb38, %dec_label_pc_130e8
  %v1_13098 = phi i32 [ %v0_13078, %bb38 ], [ %v1_13090.pre, %dec_label_pc_130e8 ]
  %v2_1308c = ptrtoint i32* %stack_var_-62 to i32
  %v2_13090 = add i32 %v1_13098, %v2_1308c
  %v3_13090 = inttoptr i32 %v2_13090 to i8*
  %v4_13090 = load i8, i8* %v3_13090, align 1
  %v6_13090 = zext i8 %v4_13090 to i32
  %v2_13094 = icmp eq i8 %v4_13090, 0
  store i1 %v2_13094, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_13090, i32* %r1.global-to-local, align 4
  br i1 %v2_13094, label %dec_label_pc_130bc, label %dec_label_pc_130a0

dec_label_pc_130a0:                               ; preds = %dec_label_pc_1308c
  br label %dec_label_pc_130a4

dec_label_pc_130a4:                               ; preds = %dec_label_pc_130a4, %dec_label_pc_130a0
  %v0_130a4 = phi i32 [ %v1_130a4, %dec_label_pc_130a4 ], [ 0, %dec_label_pc_130a0 ]
  %v1_130a4 = add i32 %v0_130a4, 1
  store i32 %v1_130a4, i32* @r2, align 4
  %v2_130a8 = add i32 %v1_130a4, %v2_13090
  %v3_130a8 = inttoptr i32 %v2_130a8 to i8*
  %v4_130a8 = load i8, i8* %v3_130a8, align 1
  %v2_130ac = icmp eq i8 %v4_130a8, 0
  store i1 %v2_130ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_130ac, label %dec_label_pc_130b4, label %dec_label_pc_130a4

dec_label_pc_130b4:                               ; preds = %dec_label_pc_130a4
  %v7_130b4 = icmp eq i32 %v0_130a4, -2
  store i1 %v7_130b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_130b4, label %dec_label_pc_130d8, label %dec_label_pc_130bc

dec_label_pc_130bc:                               ; preds = %dec_label_pc_130b4, %dec_label_pc_1308c
  %v0_130c417 = phi i32 [ %v1_130a4, %dec_label_pc_130b4 ], [ %v6_13090, %dec_label_pc_1308c ]
  store i32 %v2_13090, i32* %r0.global-to-local, align 4
  %v0_130c0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_130c0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_130c4

dec_label_pc_130c4:                               ; preds = %dec_label_pc_130c4.dec_label_pc_130c4_crit_edge, %dec_label_pc_130bc
  %v2_130d0 = phi i32 [ %v5_130d0, %dec_label_pc_130c4.dec_label_pc_130c4_crit_edge ], [ %v0_130c0, %dec_label_pc_130bc ]
  %v0_130c8 = phi i32 [ %v0_130c8.pre, %dec_label_pc_130c4.dec_label_pc_130c4_crit_edge ], [ %v2_13090, %dec_label_pc_130bc ]
  %v0_130c4 = phi i32 [ %v0_130c4.pre, %dec_label_pc_130c4.dec_label_pc_130c4_crit_edge ], [ %v0_130c417, %dec_label_pc_130bc ]
  %v1_130c4 = add i32 %v0_130c4, -1
  store i32 %v1_130c4, i32* @r2, align 4
  %v1_130c8 = inttoptr i32 %v0_130c8 to i8*
  %v2_130c8 = load i8, i8* %v1_130c8, align 1
  %v5_130c8 = add i32 %v0_130c8, 1
  store i32 %v5_130c8, i32* %r0.global-to-local, align 4
  %v3_130cc = icmp eq i32 %v0_130c4, 0
  store i1 %v3_130cc, i1* %cpsr_z.global-to-local, align 1
  %v3_130d0 = inttoptr i32 %v2_130d0 to i8*
  store i8 %v2_130c8, i8* %v3_130d0, align 1
  %v4_130d0 = load i32, i32* %r1.global-to-local, align 4
  %v5_130d0 = add i32 %v4_130d0, 1
  store i32 %v5_130d0, i32* %r1.global-to-local, align 4
  br i1 %v3_130cc, label %dec_label_pc_130d8, label %dec_label_pc_130c4.dec_label_pc_130c4_crit_edge

dec_label_pc_130c4.dec_label_pc_130c4_crit_edge:  ; preds = %dec_label_pc_130c4
  %v0_130c4.pre = load i32, i32* @r2, align 4
  %v0_130c8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_130c4

dec_label_pc_130d8:                               ; preds = %dec_label_pc_130c4, %dec_label_pc_130b4, %.thread1, %dec_label_pc_12fe4
  %v0_130d8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_130d8, i32* %r0.global-to-local, align 4
  %v2_130e0 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_130e0, i32* @r4, align 4
  ret i32 %v0_130d8

dec_label_pc_130e4:                               ; preds = %dec_label_pc_13034
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_130e8

dec_label_pc_130e8:                               ; preds = %dec_label_pc_13080, %dec_label_pc_130e4
  %v1_130ec = phi i32 [ %v1_13078, %dec_label_pc_13080 ], [ 32, %dec_label_pc_130e4 ]
  %v2_130ec = add i32 %v1_130ec, %v22_12fe4
  %v3_130f4 = add i32 %v2_130ec, -34
  %v4_130f4 = inttoptr i32 %v3_130f4 to i8*
  store i8 45, i8* %v4_130f4, align 1
  %v1_13090.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1308c

; uselistorder directives
  uselistorder i32 %v5_130d0, { 1, 0 }
  uselistorder i1 %v3_130cc, { 1, 0 }
  uselistorder i32 %v0_130c8, { 1, 0 }
  uselistorder i1 %v7_130b4, { 1, 0 }
  uselistorder i32 %v1_130a4, { 0, 1, 3, 2 }
  uselistorder i32 %v2_13090, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_13070, { 1, 2, 3, 0 }
  uselistorder i32 %v3_13054, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_12ff8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12fe8, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 1, 2, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_130e8, { 1, 0 }
  uselistorder label %dec_label_pc_1308c, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_1300c, { 2, 1, 0 }
}

define i32 @function_130fc() local_unnamed_addr {
dec_label_pc_130fc:
  %v0_130fc = load i32, i32* @r1, align 4
  %v1_130fc = add i32 %v0_130fc, -1
  %v7_130fc = icmp eq i32 %v0_130fc, 1
  br i1 %v7_130fc, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_130fc
  %v2_13100 = load i32, i32* @r0, align 4
  ret i32 %v2_13100

bb82:                                             ; preds = %dec_label_pc_130fc
  %v2_130fc = icmp eq i32 %v0_130fc, 0
  br i1 %v2_130fc, label %dec_label_pc_131e4, label %dec_label_pc_13108

dec_label_pc_13108:                               ; preds = %bb82
  %v0_13108 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_13108, %v0_130fc
  br i1 %tmp, label %dec_label_pc_13110, label %dec_label_pc_1319c

dec_label_pc_13110:                               ; preds = %dec_label_pc_13108
  %v2_13110 = and i32 %v1_130fc, %v0_130fc
  %v4_13110 = icmp eq i32 %v2_13110, 0
  br i1 %v4_13110, label %dec_label_pc_131a8, label %dec_label_pc_13118

dec_label_pc_13118:                               ; preds = %dec_label_pc_13110
  %v3_13118 = icmp ult i32 %v0_130fc, 536870912
  br i1 %v3_13118, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_13118
  %v4_1311c = mul i32 %v0_130fc, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_13118, %.thread
  %v0_1313c.pr36.ph = phi i32 [ %v4_1311c, %.thread ], [ %v0_130fc, %dec_label_pc_13118 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_13118 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_1313c.pr36 = phi i32 [ %v4_13130, %bb85 ], [ %v0_1313c.pr36.ph, %.preheader.preheader ]
  %v1_13134 = phi i32 [ %v4_13134, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_13128 = icmp ugt i32 %v0_1313c.pr36, 268435455
  br i1 %v2_13128, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_1313cthread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_1312c = icmp ult i32 %v0_1313c.pr36, %v0_13108
  br i1 %v4_1312c, label %bb84, label %dec_label_pc_1313cthread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_13130 = and i32 %v0_1313c.pr36, 268435456
  %v3_13130 = icmp eq i32 %v2_13130, 0
  %v4_13130 = mul i32 %v0_1313c.pr36, 16
  br i1 %v3_13130, label %bb85, label %dec_label_pc_1313c.loopexit

bb85:                                             ; preds = %bb84
  %v2_13134 = and i32 %v1_13134, 268435456
  %v3_13134 = icmp eq i32 %v2_13134, 0
  %v4_13134 = mul i32 %v1_13134, 16
  br i1 %v3_13134, label %.preheader, label %dec_label_pc_1313cthread-pre-split.loopexit.loopexit

dec_label_pc_1313cthread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_1314848.ph = phi i32 [ %v1_13134, %bb83 ], [ %v4_13134, %bb85 ]
  %v0_1313c.pr38.ph = phi i32 [ %v0_1313c.pr36, %bb83 ], [ %v4_13130, %bb85 ]
  br label %dec_label_pc_1313cthread-pre-split.loopexit

dec_label_pc_1313cthread-pre-split.loopexit:      ; preds = %dec_label_pc_1313cthread-pre-split.loopexit.loopexit, %.thread2
  %v1_1314848 = phi i32 [ %v1_13134, %.thread2 ], [ %v1_1314848.ph, %dec_label_pc_1313cthread-pre-split.loopexit.loopexit ]
  %v0_1313c.pr38 = phi i32 [ %v0_1313c.pr36, %.thread2 ], [ %v0_1313c.pr38.ph, %dec_label_pc_1313cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_1313cthread-pre-split

dec_label_pc_1313cthread-pre-split:               ; preds = %dec_label_pc_1313cthread-pre-split.loopexit, %bb87
  %v1_1314846 = phi i32 [ %v1_1314848, %dec_label_pc_1313cthread-pre-split.loopexit ], [ %v3_13148, %bb87 ]
  %v0_1313c.pr = phi i32 [ %v0_1313c.pr38, %dec_label_pc_1313cthread-pre-split.loopexit ], [ %v3_13144, %bb87 ]
  br label %dec_label_pc_1313c

dec_label_pc_1313c.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_1313c

dec_label_pc_1313c:                               ; preds = %dec_label_pc_1313c.loopexit, %dec_label_pc_1313cthread-pre-split
  %v1_13148 = phi i32 [ %v1_1314846, %dec_label_pc_1313cthread-pre-split ], [ %v1_13134, %dec_label_pc_1313c.loopexit ]
  %v1_13144 = phi i32 [ %v0_1313c.pr, %dec_label_pc_1313cthread-pre-split ], [ %v4_13130, %dec_label_pc_1313c.loopexit ]
  %v2_1313c = icmp slt i32 %v1_13144, 0
  br i1 %v2_1313c, label %dec_label_pc_13150, label %bb86

bb86:                                             ; preds = %dec_label_pc_1313c
  %v4_13140 = icmp ult i32 %v1_13144, %v0_13108
  br i1 %v4_13140, label %bb87, label %dec_label_pc_13150

bb87:                                             ; preds = %bb86
  %v3_13144 = mul i32 %v1_13144, 2
  %v2_13148 = icmp slt i32 %v1_13148, 0
  %v3_13148 = mul i32 %v1_13148, 2
  br i1 %v2_13148, label %dec_label_pc_13150, label %dec_label_pc_1313cthread-pre-split

dec_label_pc_13150:                               ; preds = %bb86, %dec_label_pc_1313c, %bb87
  %v2_1315c59 = phi i32 [ %v3_13148, %bb87 ], [ %v1_13148, %bb86 ], [ %v1_13148, %dec_label_pc_1313c ]
  %v1_1315451 = phi i32 [ %v3_13144, %bb87 ], [ %v1_13144, %bb86 ], [ %v1_13144, %dec_label_pc_1313c ]
  br label %dec_label_pc_13154

dec_label_pc_13154:                               ; preds = %.thread11, %dec_label_pc_13150
  %v1_13188 = phi i32 [ %v4_13188, %.thread11 ], [ %v2_1315c59, %dec_label_pc_13150 ]
  %v1_1315c = phi i32 [ %v0_13194, %.thread11 ], [ 0, %dec_label_pc_13150 ]
  %v1_1318c = phi i32 [ %v4_1318c, %.thread11 ], [ %v1_1315451, %dec_label_pc_13150 ]
  %v1_13158 = phi i32 [ %v0_13184, %.thread11 ], [ %v0_13108, %dec_label_pc_13150 ]
  %v3_13154 = icmp ult i32 %v1_13158, %v1_1318c
  br i1 %v3_13154, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_13154
  %v3_13158 = sub i32 %v1_13158, %v1_1318c
  %v3_1315c = or i32 %v1_1315c, %v1_13188
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_13154, %bb88
  %v1_13164 = phi i32 [ %v1_13158, %dec_label_pc_13154 ], [ %v3_13158, %bb88 ]
  %v1_13168 = phi i32 [ %v1_1315c, %dec_label_pc_13154 ], [ %v3_1315c, %bb88 ]
  %v4_13160 = udiv i32 %v1_1318c, 2
  %v6_13160 = icmp ult i32 %v1_13164, %v4_13160
  br i1 %v6_13160, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_13164 = urem i32 %v1_1318c, 2
  %v4_13164 = icmp eq i32 %v3_13164, 0
  %v6_13164 = sub i32 %v1_13164, %v4_13160
  br i1 %v4_13164, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_13168 = udiv i32 %v1_13188, 2
  %v6_13168 = or i32 %v1_13168, %v5_13168
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_13170 = phi i32 [ %v6_13164, %bb89 ], [ %v1_13164, %.thread7 ], [ %v6_13164, %bb90 ]
  %v1_13174 = phi i32 [ %v1_13168, %bb89 ], [ %v1_13168, %.thread7 ], [ %v6_13168, %bb90 ]
  %v4_1316c = udiv i32 %v1_1318c, 4
  %v6_1316c = icmp ult i32 %v1_13170, %v4_1316c
  br i1 %v6_1316c, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_13170 = and i32 %v1_1318c, 2
  %v4_13170 = icmp eq i32 %v3_13170, 0
  %v6_13170 = sub i32 %v1_13170, %v4_1316c
  br i1 %v4_13170, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_13174 = udiv i32 %v1_13188, 4
  %v6_13174 = or i32 %v1_13174, %v5_13174
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_1317c = phi i32 [ %v6_13170, %bb91 ], [ %v1_13170, %.thread8 ], [ %v6_13170, %bb92 ]
  %v1_13180 = phi i32 [ %v1_13174, %bb91 ], [ %v1_13174, %.thread8 ], [ %v6_13174, %bb92 ]
  %v4_13178 = udiv i32 %v1_1318c, 8
  %v6_13178 = icmp ult i32 %v1_1317c, %v4_13178
  br i1 %v6_13178, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_1317c = and i32 %v1_1318c, 4
  %v4_1317c = icmp eq i32 %v3_1317c, 0
  %v6_1317c = sub i32 %v1_1317c, %v4_13178
  br i1 %v4_1317c, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_13180 = udiv i32 %v1_13188, 8
  %v6_13180 = or i32 %v1_13180, %v5_13180
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_13194 = phi i32 [ %v1_13180, %bb93 ], [ %v1_13180, %.thread9 ], [ %v6_13180, %bb94 ]
  %v0_13184 = phi i32 [ %v6_1317c, %bb93 ], [ %v1_1317c, %.thread9 ], [ %v6_1317c, %bb94 ]
  %v2_13184 = icmp eq i32 %v0_13184, 0
  br i1 %v2_13184, label %dec_label_pc_13194, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_13188, 16
  br i1 %tmp142, label %dec_label_pc_13194, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_13188 = udiv i32 %v1_13188, 16
  %v4_1318c = udiv i32 %v1_1318c, 16
  br label %dec_label_pc_13154

dec_label_pc_13194:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_13194

dec_label_pc_1319c:                               ; preds = %dec_label_pc_13108
  %v9_13108 = icmp eq i32 %v0_13108, %v0_130fc
  %. = zext i1 %v9_13108 to i32
  ret i32 %.

dec_label_pc_131a8:                               ; preds = %dec_label_pc_13110
  %v2_131a8 = icmp ugt i32 %v0_130fc, 65535
  br i1 %v2_131a8, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_131a8
  %v2_131ac = and i32 %v0_130fc, 32768
  %v3_131ac = icmp eq i32 %v2_131ac, 0
  %v4_131ac = udiv i32 %v0_130fc, 65536
  br i1 %v3_131ac, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_131a8
  %v0_131b865 = phi i32 [ %v0_130fc, %dec_label_pc_131a8 ], [ %v4_131ac, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_131bc = phi i32 [ %v0_131b865, %.thread16 ], [ %v4_131ac, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  %v2_131b8 = icmp ugt i32 %v1_131bc, 255
  br i1 %v2_131b8, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_131bc = and i32 %v1_131bc, 128
  %v3_131bc = icmp eq i32 %v2_131bc, 0
  %v4_131bc = udiv i32 %v1_131bc, 256
  br i1 %v3_131bc, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_131c0 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_131cc = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_131c0, %bb102 ]
  %v1_131c8 = phi i32 [ %v1_131bc, %bb100 ], [ %v4_131bc, %bb101 ], [ %v4_131bc, %bb102 ]
  %v2_131c4 = icmp ugt i32 %v1_131c8, 15
  br i1 %v2_131c4, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_131c8 = and i32 %v1_131c8, 8
  %v3_131c8 = icmp eq i32 %v2_131c8, 0
  %v4_131c8 = udiv i32 %v1_131c8, 16
  br i1 %v3_131c8, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_131cc = add nsw i32 %v1_131cc, 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_131d4 = phi i32 [ %v1_131cc, %.thread17 ], [ %v1_131cc, %bb103 ], [ %v2_131cc, %bb104 ]
  %v5_131d8 = phi i32 [ %v1_131c8, %.thread17 ], [ %v4_131c8, %bb103 ], [ %v4_131c8, %bb104 ]
  %v2_131d0 = icmp ugt i32 %v5_131d8, 3
  %v7_131d0 = icmp eq i32 %v5_131d8, 4
  %v2_131d4 = xor i1 %v7_131d0, true
  %v3_131d4 = and i1 %v2_131d0, %v2_131d4
  br i1 %v3_131d4, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_131d4 = add nsw i32 %v4_131d4, 3
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_131d8 = phi i32 [ %v4_131d4, %.thread18 ], [ %v5_131d4, %bb105 ]
  %v2_131d8 = xor i1 %v2_131d0, true
  %v3_131d8 = or i1 %v7_131d0, %v2_131d8
  br i1 %v3_131d8, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_131d8 = udiv i32 %v5_131d8, 2
  %v9_131d8 = add i32 %v4_131d8, %v8_131d8
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_131dc = phi i32 [ %v4_131d8, %bb106 ], [ %v9_131d8, %bb107 ]
  %v6_131dc = lshr i32 %v0_13108, %v1_131dc
  ret i32 %v6_131dc

dec_label_pc_131e4:                               ; preds = %bb82
  %v0_131e4 = load i32, i32* @lr, align 4
  %v0_131e8 = call i32 @function_133bc()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_131e4)
  %v9_131f4 = load i32, i32* @lr, align 4
  %v0_131f8 = call i32 @function_130fc()
  store i32 %v9_131f4, i32* @lr, align 4
  ret i32 %v0_131f8

; uselistorder directives
  uselistorder i32 %v4_131d8, { 1, 0 }
  uselistorder i1 %v7_131d0, { 1, 0 }
  uselistorder i32 %v4_131c8, { 1, 0 }
  uselistorder i32 %v1_131c8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_131bc, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_131bc, { 1, 0, 2, 3 }
  uselistorder i32 %v4_131ac, { 1, 0 }
  uselistorder i32 %v0_13184, { 1, 0 }
  uselistorder i32 %v4_13178, { 1, 0 }
  uselistorder i32 %v1_13180, { 1, 2, 0 }
  uselistorder i32 %v4_1316c, { 1, 0 }
  uselistorder i32 %v1_13174, { 1, 2, 0 }
  uselistorder i32 %v4_13160, { 1, 0 }
  uselistorder i32 %v1_13168, { 1, 2, 0 }
  uselistorder i32 %v1_1318c, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_1315c, { 1, 0 }
  uselistorder i32 %v1_13188, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_13148, { 1, 0 }
  uselistorder i32 %v3_13144, { 1, 0 }
  uselistorder i32 %v1_13144, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_13148, { 1, 2, 0, 3 }
  uselistorder i32 %v4_13134, { 1, 0 }
  uselistorder i32 %v4_13130, { 2, 1, 0 }
  uselistorder i32 %v1_13134, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_1313c.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_13108, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_130fc, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 92, 47, 48, 0, 1, 11, 49, 24, 50, 23, 51, 22, 52, 12, 13, 2, 26, 53, 25, 54, 55, 14, 56, 3, 27, 57, 28, 58, 29, 59, 60, 4, 30, 61, 62, 15, 63, 5, 34, 64, 31, 65, 32, 66, 33, 67, 68, 16, 69, 6, 70, 71, 38, 72, 37, 73, 35, 74, 36, 75, 17, 18, 7, 76, 39, 77, 40, 78, 79, 80, 19, 81, 82, 8, 43, 83, 41, 84, 42, 85, 86, 20, 87, 9, 10, 46, 88, 44, 89, 45, 90, 21, 91 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_13194, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_13150, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1313cthread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_1320c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1320c:
  store i32 %arg1, i32* @r0, align 4
  %v1_1320c = add i32 %arg2, -1
  store i32 %v1_1320c, i32* @r2, align 4
  %v2_1320c = icmp eq i32 %arg2, 0
  br i1 %v2_1320c, label %dec_label_pc_132c8, label %dec_label_pc_13214

dec_label_pc_13214:                               ; preds = %dec_label_pc_1320c
  %v7_1320c = icmp eq i32 %arg2, 1
  br i1 %v7_1320c, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_13214
  %v1_13214 = load i32, i32* @r0, align 4
  %v10_13214 = icmp eq i32 %v1_13214, %arg2
  br i1 %v10_13214, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_13214, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_13214 = icmp ult i32 %v1_13214, %arg2
  br i1 %v4_13214, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_1321c = and i32 %v1_1320c, %arg2
  %v8_1321c = icmp eq i32 %v6_1321c, 0
  br i1 %v8_1321c, label %.thread67, label %dec_label_pc_1322c.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_13220 = phi i32 [ %v1_13214, %bb75 ], [ 0, %.thread65 ]
  %v3_13220 = and i32 %v1_13220, %v1_1320c
  br label %bb76

dec_label_pc_1322c.preheader:                     ; preds = %bb75
  %v2_1322c99 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1322c99, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_132bc, %bb74, %bb89, %bb84, %dec_label_pc_1328c, %.thread67
  %v5_13224 = phi i32 [ %v1_13214, %bb74 ], [ %v3_13220, %.thread67 ], [ %v1_13268.v6_13268.v6_13270.v6_13278, %dec_label_pc_1328c ], [ 0, %bb84 ], [ %v1_132c0, %dec_label_pc_132bc ], [ %v2_132bc, %bb89 ]
  ret i32 %v5_13224

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_1322c.preheader
  %v0_13240.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_1322c.preheader ], [ %v4_13234, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_1322c.preheader ], [ %v2_1323811, %.thread1.thread9 ]
  br label %dec_label_pc_13240thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_1322c.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_1323811, %.thread1.thread9 ], [ 0, %dec_label_pc_1322c.preheader ]
  %v0_13240.pr33100 = phi i32 [ %v4_13234, %.thread1.thread9 ], [ %arg2, %dec_label_pc_1322c.preheader ]
  %v4_13230 = icmp ult i32 %v0_13240.pr33100, %v1_13214
  br i1 %v4_13230, label %bb78, label %dec_label_pc_13240thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_13234 = and i32 %v0_13240.pr33100, 268435456
  %v3_13234 = icmp eq i32 %v2_13234, 0
  %v4_13234 = mul i32 %v0_13240.pr33100, 16
  br i1 %v3_13234, label %.thread1.thread9, label %dec_label_pc_13240.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_1323811 = add i32 %storemerge101, 4
  %v2_1322c = icmp ugt i32 %v4_13234, 268435455
  br i1 %v2_1322c, label %.thread, label %bb77

dec_label_pc_13240thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_13240thread-pre-split.loopexit

dec_label_pc_13240thread-pre-split.loopexit:      ; preds = %dec_label_pc_13240thread-pre-split.loopexit.loopexit, %.thread
  %v0_13240.pr3398 = phi i32 [ %v0_13240.pr33.lcssa, %.thread ], [ %v0_13240.pr33100, %dec_label_pc_13240thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_13240thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_13240thread-pre-split

dec_label_pc_13240thread-pre-split:               ; preds = %.thread4, %dec_label_pc_13240thread-pre-split.loopexit
  %v1_1324c39 = phi i32 [ %storemerge95, %dec_label_pc_13240thread-pre-split.loopexit ], [ %v2_1324c, %.thread4 ]
  %v0_13240.pr = phi i32 [ %v0_13240.pr3398, %dec_label_pc_13240thread-pre-split.loopexit ], [ %v3_13248, %.thread4 ]
  br label %dec_label_pc_13240

dec_label_pc_13240.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_13240

dec_label_pc_13240:                               ; preds = %dec_label_pc_13240.loopexit, %dec_label_pc_13240thread-pre-split
  %v0_13254.pr = phi i32 [ %v1_1324c39, %dec_label_pc_13240thread-pre-split ], [ %storemerge101, %dec_label_pc_13240.loopexit ]
  %v1_13248 = phi i32 [ %v0_13240.pr, %dec_label_pc_13240thread-pre-split ], [ %v4_13234, %dec_label_pc_13240.loopexit ]
  %v2_13240 = icmp slt i32 %v1_13248, 0
  br i1 %v2_13240, label %dec_label_pc_13254, label %bb79

bb79:                                             ; preds = %dec_label_pc_13240
  %v4_13244 = icmp ult i32 %v1_13248, %v1_13214
  br i1 %v4_13244, label %.thread4, label %dec_label_pc_13254

.thread4:                                         ; preds = %bb79
  %v3_13248 = mul i32 %v1_13248, 2
  %v2_1324c = add i32 %v0_13254.pr, 1
  br label %dec_label_pc_13240thread-pre-split

dec_label_pc_13254:                               ; preds = %bb79, %dec_label_pc_13240
  %v2_13254 = add i32 %v0_13254.pr, -3
  store i32 %v2_13254, i32* @r2, align 4
  %v5_13258 = icmp slt i32 %v0_13254.pr, 3
  br i1 %v5_13258, label %dec_label_pc_13298, label %dec_label_pc_1325c

dec_label_pc_1325c:                               ; preds = %dec_label_pc_13254, %bb83
  %v6_13284 = phi i32 [ %v0_1328c, %bb83 ], [ %v2_13254, %dec_label_pc_13254 ]
  %v1_13260 = phi i32 [ %v1_13268.v6_13268.v6_13270.v6_13278, %bb83 ], [ %v1_13214, %dec_label_pc_13254 ]
  %v3_1328012 = phi i32 [ %v3_13280, %bb83 ], [ %v1_13248, %dec_label_pc_13254 ]
  %v3_1325c = icmp ult i32 %v1_13260, %v3_1328012
  %v3_13260 = select i1 %v3_1325c, i32 0, i32 %v3_1328012
  %v1_13268 = sub i32 %v1_13260, %v3_13260
  %v4_13264 = udiv i32 %v3_1328012, 2
  %v6_13264 = icmp ult i32 %v1_13268, %v4_13264
  %v6_13268 = select i1 %v6_13264, i32 0, i32 %v4_13264
  %v1_13268.v6_13268 = sub i32 %v1_13268, %v6_13268
  %.demorgan = and i1 %v3_1325c, %v6_13264
  %v4_1326c = udiv i32 %v3_1328012, 4
  %v6_1326c = icmp ult i32 %v1_13268.v6_13268, %v4_1326c
  %v6_13270 = select i1 %v6_1326c, i32 0, i32 %v4_1326c
  %v1_13268.v6_13268.v6_13270 = sub i32 %v1_13268.v6_13268, %v6_13270
  %.demorgan71 = and i1 %.demorgan, %v6_1326c
  %v4_13274 = udiv i32 %v3_1328012, 8
  %v6_13274 = icmp ult i32 %v1_13268.v6_13268.v6_13270, %v4_13274
  %v6_13278 = select i1 %v6_13274, i32 0, i32 %v4_13274
  %v1_13268.v6_13268.v6_13270.v6_13278 = sub i32 %v1_13268.v6_13268.v6_13270, %v6_13278
  %.demorgan72 = and i1 %.demorgan71, %v6_13274
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_1325c
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_1325c, %bb80
  %v2_1327c = add i32 %v1_13268.v6_13268.v6_13270.v6_13278, -1
  %v4_1327c = sub i32 0, %v1_13268.v6_13268.v6_13270.v6_13278
  %v5_1327c = and i32 %v1_13268.v6_13268.v6_13270.v6_13278, %v4_1327c
  %v3_13280 = udiv i32 %v3_1328012, 16
  %v5_13284 = icmp slt i32 %v1_13268.v6_13268.v6_13270.v6_13278, 1
  br i1 %v5_13284, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_13284 = add i32 %v6_13284, -4
  store i32 %v7_13284, i32* @r2, align 4
  %v9_13284 = sub i32 3, %v6_13284
  %v10_13284 = and i32 %v9_13284, %v6_13284
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_1328c = phi i32 [ %v6_13284, %bb81 ], [ %v7_13284, %bb82 ]
  %v0_1328815.in = phi i32 [ %v2_1327c, %bb81 ], [ %v7_13284, %bb82 ]
  %v1_1328814.in = phi i32 [ %v5_1327c, %bb81 ], [ %v10_13284, %bb82 ]
  %v1_1328814 = icmp slt i32 %v1_1328814.in, 0
  %v0_1328815 = icmp slt i32 %v0_1328815.in, 0
  %v2_13288 = xor i1 %v0_1328815, %v1_1328814
  br i1 %v2_13288, label %dec_label_pc_1328c, label %dec_label_pc_1325c

dec_label_pc_1328c:                               ; preds = %bb83
  %v1_1328c = urem i32 %v0_1328c, 4
  %v2_1328c = icmp eq i32 %v1_1328c, 0
  br i1 %v2_1328c, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_1328c
  %v3_13290 = icmp eq i32 %v1_13268.v6_13268.v6_13270.v6_13278, 0
  br i1 %v3_13290, label %bb76, label %dec_label_pc_13298

dec_label_pc_13298:                               ; preds = %bb84, %dec_label_pc_13254
  %v0_132ac = phi i32 [ %v3_13280, %bb84 ], [ %v1_13248, %dec_label_pc_13254 ]
  %v1_132a8 = phi i32 [ %v1_13268.v6_13268.v6_13270.v6_13278, %bb84 ], [ %v1_13214, %dec_label_pc_13254 ]
  %v0_13298 = phi i32 [ %v0_1328c, %bb84 ], [ %v2_13254, %dec_label_pc_13254 ]
  %v5_1329c = icmp slt i32 %v0_13298, -2
  br i1 %v5_1329c, label %dec_label_pc_132bc, label %dec_label_pc_132a0

dec_label_pc_132a0:                               ; preds = %dec_label_pc_13298
  %v8_13298 = icmp eq i32 %v0_13298, -2
  br i1 %v8_13298, label %dec_label_pc_132b0, label %dec_label_pc_132a4

dec_label_pc_132a4:                               ; preds = %dec_label_pc_132a0
  %v3_132a4 = icmp ult i32 %v1_132a8, %v0_132ac
  br i1 %v3_132a4, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_132a4
  %v2_132a4 = sub i32 %v1_132a8, %v0_132ac
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_132a4, %bb85
  %v0_132b052 = phi i32 [ %v1_132a8, %dec_label_pc_132a4 ], [ %v2_132a4, %bb85 ]
  %v3_132ac = udiv i32 %v0_132ac, 2
  br label %dec_label_pc_132b0

dec_label_pc_132b0:                               ; preds = %dec_label_pc_132a0, %bb86
  %v0_132b8 = phi i32 [ %v0_132ac, %dec_label_pc_132a0 ], [ %v3_132ac, %bb86 ]
  %v1_132b4 = phi i32 [ %v1_132a8, %dec_label_pc_132a0 ], [ %v0_132b052, %bb86 ]
  %v3_132b0 = icmp ult i32 %v1_132b4, %v0_132b8
  br i1 %v3_132b0, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_132b0
  %v2_132b0 = sub i32 %v1_132b4, %v0_132b8
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_132b0, %bb87
  %v0_132bc55 = phi i32 [ %v1_132b4, %dec_label_pc_132b0 ], [ %v2_132b0, %bb87 ]
  %v3_132b8 = udiv i32 %v0_132b8, 2
  br label %dec_label_pc_132bc

dec_label_pc_132bc:                               ; preds = %dec_label_pc_13298, %bb88
  %v2_132c0 = phi i32 [ %v0_132ac, %dec_label_pc_13298 ], [ %v3_132b8, %bb88 ]
  %v1_132c0 = phi i32 [ %v1_132a8, %dec_label_pc_13298 ], [ %v0_132bc55, %bb88 ]
  %v3_132bc = icmp ult i32 %v1_132c0, %v2_132c0
  br i1 %v3_132bc, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_132bc
  %v2_132bc = sub i32 %v1_132c0, %v2_132c0
  br label %bb76

dec_label_pc_132c8:                               ; preds = %dec_label_pc_1320c
  %v0_132c8 = load i32, i32* @lr, align 4
  %v0_132cc = call i32 @function_133bc()
  call void @__pseudo_branch(i32 %v0_132c8)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_132c0, { 1, 2, 0 }
  uselistorder i32 %v0_132ac, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_1328c, { 1, 0, 2 }
  uselistorder i32 %v7_13284, { 1, 0, 2 }
  uselistorder i32 %v3_13280, { 1, 0 }
  uselistorder i32 %v1_13268.v6_13268.v6_13270.v6_13278, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_13274, { 1, 0 }
  uselistorder i32 %v4_1326c, { 1, 0 }
  uselistorder i32 %v4_13264, { 1, 0 }
  uselistorder i32 %v6_13284, { 3, 0, 2, 1 }
  uselistorder i32 %v2_13254, { 1, 0, 2 }
  uselistorder i32 %v1_13248, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_13234, { 1, 0, 3, 2 }
  uselistorder i32 %v0_13240.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_13214, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_132bc, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_132b0, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_1325c, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_132d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_132d8:
  store i32 %arg1, i32* @r0, align 4
  %v2_132d8 = icmp eq i32 %arg2, 0
  br i1 %v2_132d8, label %dec_label_pc_133ac, label %dec_label_pc_132e0

dec_label_pc_132e0:                               ; preds = %dec_label_pc_132d8
  %v1_132d8 = icmp slt i32 %arg2, 0
  br i1 %v1_132d8, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_132e0
  %v2_132e0 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_132e0, %bb
  %v4_132f8 = phi i32 [ %arg2, %dec_label_pc_132e0 ], [ %v2_132e0, %bb ]
  %v0_132e4 = load i32, i32* @r0, align 4
  %v1_132e4 = icmp slt i32 %v0_132e4, 0
  br i1 %v1_132e4, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_132e8 = sub i32 0, %v0_132e4
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_132f0 = phi i32 [ %v0_132e4, %bb79 ], [ %v2_132e8, %bb80 ]
  %v1_132ec = add i32 %v4_132f8, -1
  %v7_132ec = icmp eq i32 %v4_132f8, 1
  br i1 %v7_132ec, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_132f0 = icmp eq i32 %v1_132f0, %v4_132f8
  br i1 %v10_132f0, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_132f0 = icmp ult i32 %v1_132f0, %v4_132f8
  br i1 %v4_132f0, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_132f8 = and i32 %v1_132ec, %v4_132f8
  %v8_132f8 = icmp eq i32 %v6_132f8, 0
  br i1 %v8_132f8, label %.thread72, label %dec_label_pc_13308.preheader

dec_label_pc_13308.preheader:                     ; preds = %bb84
  %v2_13308109 = icmp ugt i32 %v4_132f8, 268435455
  br i1 %v2_13308109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_132fc64 = phi i32 [ %v1_132f0, %bb84 ], [ 0, %.thread70 ]
  %v3_132fc = and i32 %v1_132fc64, %v1_132ec
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_13308.preheader
  %v0_1331c.pr35.lcssa = phi i32 [ %v4_132f8, %dec_label_pc_13308.preheader ], [ %v4_13310, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_13308.preheader ], [ %v2_133149, %.thread2.thread7 ]
  br label %dec_label_pc_1331cthread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_13308.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_133149, %.thread2.thread7 ], [ 0, %dec_label_pc_13308.preheader ]
  %v0_1331c.pr35110 = phi i32 [ %v4_13310, %.thread2.thread7 ], [ %v4_132f8, %dec_label_pc_13308.preheader ]
  %v4_1330c = icmp ult i32 %v0_1331c.pr35110, %v1_132f0
  br i1 %v4_1330c, label %bb86, label %dec_label_pc_1331cthread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_13310 = and i32 %v0_1331c.pr35110, 268435456
  %v3_13310 = icmp eq i32 %v2_13310, 0
  %v4_13310 = mul i32 %v0_1331c.pr35110, 16
  br i1 %v3_13310, label %.thread2.thread7, label %dec_label_pc_1331c.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_133149 = add i32 %storemerge111, 4
  %v2_13308 = icmp ugt i32 %v4_13310, 268435455
  br i1 %v2_13308, label %.thread1, label %bb85

dec_label_pc_1331cthread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_1331cthread-pre-split.loopexit

dec_label_pc_1331cthread-pre-split.loopexit:      ; preds = %dec_label_pc_1331cthread-pre-split.loopexit.loopexit, %.thread1
  %v0_1331c.pr35108 = phi i32 [ %v0_1331c.pr35.lcssa, %.thread1 ], [ %v0_1331c.pr35110, %dec_label_pc_1331cthread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_1331cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_1331cthread-pre-split

dec_label_pc_1331cthread-pre-split:               ; preds = %.thread4, %dec_label_pc_1331cthread-pre-split.loopexit
  %v1_1332841 = phi i32 [ %storemerge105, %dec_label_pc_1331cthread-pre-split.loopexit ], [ %v2_13328, %.thread4 ]
  %v2_1332036 = phi i32 [ %v1_132f0, %dec_label_pc_1331cthread-pre-split.loopexit ], [ %v2_13320, %.thread4 ]
  %v0_1331c.pr = phi i32 [ %v0_1331c.pr35108, %dec_label_pc_1331cthread-pre-split.loopexit ], [ %v3_13324, %.thread4 ]
  br label %dec_label_pc_1331c

dec_label_pc_1331c.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_1331c

dec_label_pc_1331c:                               ; preds = %dec_label_pc_1331c.loopexit, %dec_label_pc_1331cthread-pre-split
  %v0_13330.pr = phi i32 [ %v1_1332841, %dec_label_pc_1331cthread-pre-split ], [ %storemerge111, %dec_label_pc_1331c.loopexit ]
  %v2_13320 = phi i32 [ %v2_1332036, %dec_label_pc_1331cthread-pre-split ], [ %v1_132f0, %dec_label_pc_1331c.loopexit ]
  %v1_13324 = phi i32 [ %v0_1331c.pr, %dec_label_pc_1331cthread-pre-split ], [ %v4_13310, %dec_label_pc_1331c.loopexit ]
  %v2_1331c = icmp slt i32 %v1_13324, 0
  br i1 %v2_1331c, label %dec_label_pc_13330, label %bb87

bb87:                                             ; preds = %dec_label_pc_1331c
  %v4_13320 = icmp ult i32 %v1_13324, %v2_13320
  br i1 %v4_13320, label %.thread4, label %dec_label_pc_13330

.thread4:                                         ; preds = %bb87
  %v3_13324 = mul i32 %v1_13324, 2
  %v2_13328 = add i32 %v0_13330.pr, 1
  br label %dec_label_pc_1331cthread-pre-split

dec_label_pc_13330:                               ; preds = %bb87, %dec_label_pc_1331c
  %v2_13330 = add i32 %v0_13330.pr, -3
  %v5_13334 = icmp slt i32 %v0_13330.pr, 3
  br i1 %v5_13334, label %dec_label_pc_13374, label %dec_label_pc_13338

dec_label_pc_13338:                               ; preds = %dec_label_pc_13330, %bb91
  %v6_13360 = phi i32 [ %v0_13368, %bb91 ], [ %v2_13330, %dec_label_pc_13330 ]
  %v1_1333c = phi i32 [ %v1_13344.v6_13344.v6_1334c.v6_13354, %bb91 ], [ %v2_13320, %dec_label_pc_13330 ]
  %v3_1335c10 = phi i32 [ %v3_1335c, %bb91 ], [ %v1_13324, %dec_label_pc_13330 ]
  %v3_13338 = icmp ult i32 %v1_1333c, %v3_1335c10
  %v3_1333c = select i1 %v3_13338, i32 0, i32 %v3_1335c10
  %v1_13344 = sub i32 %v1_1333c, %v3_1333c
  %v4_13340 = udiv i32 %v3_1335c10, 2
  %v6_13340 = icmp ult i32 %v1_13344, %v4_13340
  %v6_13344 = select i1 %v6_13340, i32 0, i32 %v4_13340
  %v1_13344.v6_13344 = sub i32 %v1_13344, %v6_13344
  %.demorgan = and i1 %v3_13338, %v6_13340
  %v4_13348 = udiv i32 %v3_1335c10, 4
  %v6_13348 = icmp ult i32 %v1_13344.v6_13344, %v4_13348
  %v6_1334c = select i1 %v6_13348, i32 0, i32 %v4_13348
  %v1_13344.v6_13344.v6_1334c = sub i32 %v1_13344.v6_13344, %v6_1334c
  %.demorgan76 = and i1 %.demorgan, %v6_13348
  %v4_13350 = udiv i32 %v3_1335c10, 8
  %v6_13350 = icmp ult i32 %v1_13344.v6_13344.v6_1334c, %v4_13350
  %v6_13354 = select i1 %v6_13350, i32 0, i32 %v4_13350
  %v1_13344.v6_13344.v6_1334c.v6_13354 = sub i32 %v1_13344.v6_13344.v6_1334c, %v6_13354
  %.demorgan77 = and i1 %.demorgan76, %v6_13350
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_13338
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_13338, %bb88
  %v2_13358 = add i32 %v1_13344.v6_13344.v6_1334c.v6_13354, -1
  %v4_13358 = sub i32 0, %v1_13344.v6_13344.v6_1334c.v6_13354
  %v5_13358 = and i32 %v1_13344.v6_13344.v6_1334c.v6_13354, %v4_13358
  %v3_1335c = udiv i32 %v3_1335c10, 16
  %v5_13360 = icmp slt i32 %v1_13344.v6_13344.v6_1334c.v6_13354, 1
  br i1 %v5_13360, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_13360 = add i32 %v6_13360, -4
  %v9_13360 = sub i32 3, %v6_13360
  %v10_13360 = and i32 %v9_13360, %v6_13360
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_13368 = phi i32 [ %v6_13360, %bb89 ], [ %v7_13360, %bb90 ]
  %v0_1336413.in = phi i32 [ %v2_13358, %bb89 ], [ %v7_13360, %bb90 ]
  %v1_1336412.in = phi i32 [ %v5_13358, %bb89 ], [ %v10_13360, %bb90 ]
  %v1_1336412 = icmp slt i32 %v1_1336412.in, 0
  %v0_1336413 = icmp slt i32 %v0_1336413.in, 0
  %v2_13364 = xor i1 %v0_1336413, %v1_1336412
  br i1 %v2_13364, label %dec_label_pc_13368, label %dec_label_pc_13338

dec_label_pc_13368:                               ; preds = %bb91
  %v1_13368 = urem i32 %v0_13368, 4
  %v2_13368 = icmp eq i32 %v1_13368, 0
  br i1 %v2_13368, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_13368
  %v3_1336c = icmp eq i32 %v1_13344.v6_13344.v6_1334c.v6_13354, 0
  br i1 %v3_1336c, label %.thread6, label %dec_label_pc_13374

dec_label_pc_13374:                               ; preds = %bb92, %dec_label_pc_13330
  %v0_13388 = phi i32 [ %v3_1335c, %bb92 ], [ %v1_13324, %dec_label_pc_13330 ]
  %v1_13384 = phi i32 [ %v1_13344.v6_13344.v6_1334c.v6_13354, %bb92 ], [ %v2_13320, %dec_label_pc_13330 ]
  %v0_13374 = phi i32 [ %v0_13368, %bb92 ], [ %v2_13330, %dec_label_pc_13330 ]
  %v5_13378 = icmp slt i32 %v0_13374, -2
  br i1 %v5_13378, label %dec_label_pc_13398, label %dec_label_pc_1337c

dec_label_pc_1337c:                               ; preds = %dec_label_pc_13374
  %v8_13374 = icmp eq i32 %v0_13374, -2
  br i1 %v8_13374, label %dec_label_pc_1338c, label %dec_label_pc_13380

dec_label_pc_13380:                               ; preds = %dec_label_pc_1337c
  %v3_13380 = icmp ult i32 %v1_13384, %v0_13388
  br i1 %v3_13380, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_13380
  %v2_13380 = sub i32 %v1_13384, %v0_13388
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_13380, %bb93
  %v0_1338c54 = phi i32 [ %v1_13384, %dec_label_pc_13380 ], [ %v2_13380, %bb93 ]
  %v3_13388 = udiv i32 %v0_13388, 2
  br label %dec_label_pc_1338c

dec_label_pc_1338c:                               ; preds = %dec_label_pc_1337c, %bb94
  %v0_13394 = phi i32 [ %v0_13388, %dec_label_pc_1337c ], [ %v3_13388, %bb94 ]
  %v1_13390 = phi i32 [ %v1_13384, %dec_label_pc_1337c ], [ %v0_1338c54, %bb94 ]
  %v3_1338c = icmp ult i32 %v1_13390, %v0_13394
  br i1 %v3_1338c, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_1338c
  %v2_1338c = sub i32 %v1_13390, %v0_13394
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_1338c, %bb95
  %v0_1339857 = phi i32 [ %v1_13390, %dec_label_pc_1338c ], [ %v2_1338c, %bb95 ]
  %v3_13394 = udiv i32 %v0_13394, 2
  br label %dec_label_pc_13398

dec_label_pc_13398:                               ; preds = %dec_label_pc_13374, %bb96
  %v2_1339c = phi i32 [ %v0_13388, %dec_label_pc_13374 ], [ %v3_13394, %bb96 ]
  %v1_1339c = phi i32 [ %v1_13384, %dec_label_pc_13374 ], [ %v0_1339857, %bb96 ]
  %v3_13398 = icmp ult i32 %v1_1339c, %v2_1339c
  br i1 %v3_13398, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_13398
  %v2_13398 = sub i32 %v1_1339c, %v2_1339c
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_13398, %bb83, %.thread72, %dec_label_pc_13368, %bb92, %bb97
  %v1_133a4 = phi i32 [ %v1_13344.v6_13344.v6_1334c.v6_13354, %dec_label_pc_13368 ], [ 0, %bb92 ], [ %v1_1339c, %dec_label_pc_13398 ], [ %v2_13398, %bb97 ], [ %v3_132fc, %.thread72 ], [ %v1_132f0, %bb83 ]
  br i1 %v1_132e4, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_133a4 = sub i32 0, %v1_133a4
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_133a8 = phi i32 [ %v1_133a4, %.thread6 ], [ %v2_133a4, %bb98 ]
  ret i32 %v1_133a8

dec_label_pc_133ac:                               ; preds = %dec_label_pc_132d8
  %v0_133ac = load i32, i32* @lr, align 4
  %v0_133b0 = call i32 @function_133bc()
  call void @__pseudo_branch(i32 %v0_133ac)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_13388, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_13368, { 1, 0, 2 }
  uselistorder i32 %v7_13360, { 1, 0 }
  uselistorder i32 %v3_1335c, { 1, 0 }
  uselistorder i32 %v1_13344.v6_13344.v6_1334c.v6_13354, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_13350, { 1, 0 }
  uselistorder i32 %v4_13348, { 1, 0 }
  uselistorder i32 %v4_13340, { 1, 0 }
  uselistorder i32 %v6_13360, { 3, 0, 2, 1 }
  uselistorder i32 %v2_13330, { 1, 0 }
  uselistorder i32 %v1_13324, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_13320, { 1, 0, 3, 2 }
  uselistorder i32 %v4_13310, { 1, 0, 3, 2 }
  uselistorder i32 %v0_1331c.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_132f0, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_132f8, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_133bc, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_13398, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_1338c, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_13338, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_133bc() local_unnamed_addr {
dec_label_pc_133bc:
  %v1_133bc = load i32, i32* @r0, align 4
  ret i32 %v1_133bc
}

define i32 @function_133c0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_133c0:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_133c0 = load i32, i32* @r2, align 4
  %v1_133d0 = add i32 %arg2, -12
  store i32 %v6_133c0, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_133d0, 2
  br i1 %tmp, label %dec_label_pc_133f8, label %dec_label_pc_133f0

dec_label_pc_133f0:                               ; preds = %dec_label_pc_133c0
  %v0_133f0 = call i32 @function_13434()
  br label %dec_label_pc_13424

dec_label_pc_133f8:                               ; preds = %dec_label_pc_133c0
  %v2_13400 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_13400, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_13400, -4095
  br i1 %tmp8, label %dec_label_pc_13424, label %dec_label_pc_13410

dec_label_pc_13410:                               ; preds = %dec_label_pc_133f8
  %v0_13410 = call i32 @function_13a84()
  %v0_13414 = load i32, i32* %r4.global-to-local, align 4
  %v1_13414 = sub i32 0, %v0_13414
  %v2_13418 = inttoptr i32 %v0_13410 to i32*
  store i32 %v1_13414, i32* %v2_13418, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13424

dec_label_pc_13424:                               ; preds = %dec_label_pc_13410, %dec_label_pc_133f8, %dec_label_pc_133f0
  %storemerge = phi i32 [ %v0_133f0, %dec_label_pc_133f0 ], [ %v2_13400, %dec_label_pc_133f8 ], [ -1, %dec_label_pc_13410 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_13400, { 1, 0, 2 }
}

define i32 @function_13434() local_unnamed_addr {
dec_label_pc_13434:
  %r4.global-to-local = alloca i32, align 4
  %v0_13454 = load i32, i32* @r0, align 4
  store i32 %v0_13454, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13454, -4095
  br i1 %tmp, label %dec_label_pc_13470, label %dec_label_pc_13460

dec_label_pc_13460:                               ; preds = %dec_label_pc_13434
  %v0_13460 = call i32 @function_13a84()
  %v0_13464 = load i32, i32* %r4.global-to-local, align 4
  %v1_13464 = sub i32 0, %v0_13464
  %v2_13468 = inttoptr i32 %v0_13460 to i32*
  store i32 %v1_13464, i32* %v2_13468, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13470

dec_label_pc_13470:                               ; preds = %dec_label_pc_13434, %dec_label_pc_13460
  %v0_13470 = phi i32 [ %v0_13454, %dec_label_pc_13434 ], [ -1, %dec_label_pc_13460 ]
  ret i32 %v0_13470

; uselistorder directives
  uselistorder i32 %v0_13454, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13470, { 1, 0 }
}

define i32 @function_13484(i8* %arg1) local_unnamed_addr {
dec_label_pc_13484:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13484 = load i32, i32* @r4, align 4
  store i32 %v3_13484, i32* %stack_var_-8, align 4
  %v3_13488 = call i32 @chdir(i8* %arg1)
  store i32 %v3_13488, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_13488, -4095
  br i1 %tmp, label %dec_label_pc_134a8, label %dec_label_pc_13498

dec_label_pc_13498:                               ; preds = %dec_label_pc_13484
  %v0_13498 = call i32 @function_13a84()
  %v0_1349c = load i32, i32* %r4.global-to-local, align 4
  %v1_1349c = sub i32 0, %v0_1349c
  %v2_134a0 = inttoptr i32 %v0_13498 to i32*
  store i32 %v1_1349c, i32* %v2_134a0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_134a8

dec_label_pc_134a8:                               ; preds = %dec_label_pc_13484, %dec_label_pc_13498
  %v0_134a8 = phi i32 [ %v3_13488, %dec_label_pc_13484 ], [ -1, %dec_label_pc_13498 ]
  %v2_134ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_134ac, i32* @r4, align 4
  ret i32 %v0_134a8

; uselistorder directives
  uselistorder i32 %v3_13488, { 1, 0, 2 }
  uselistorder label %dec_label_pc_134a8, { 1, 0 }
}

define i32 @function_134b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_134b0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_134b0 = load i32, i32* @r4, align 4
  store i32 %v3_134b0, i32* %stack_var_-8, align 4
  %v1_134b4 = call i32 @close(i32 %arg1)
  store i32 %v1_134b4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_134b4, -4095
  br i1 %tmp, label %dec_label_pc_134d4, label %dec_label_pc_134c4

dec_label_pc_134c4:                               ; preds = %dec_label_pc_134b0
  %v0_134c4 = call i32 @function_13a84()
  %v0_134c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_134c8 = sub i32 0, %v0_134c8
  %v2_134cc = inttoptr i32 %v0_134c4 to i32*
  store i32 %v1_134c8, i32* %v2_134cc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_134d4

dec_label_pc_134d4:                               ; preds = %dec_label_pc_134b0, %dec_label_pc_134c4
  %v0_134d4 = phi i32 [ %v1_134b4, %dec_label_pc_134b0 ], [ -1, %dec_label_pc_134c4 ]
  %v2_134d8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_134d8, i32* @r4, align 4
  ret i32 %v0_134d4

; uselistorder directives
  uselistorder i32 %v1_134b4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_134d4, { 1, 0 }
}

define i32 @function_134dc() local_unnamed_addr {
dec_label_pc_134dc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_134dc = load i32, i32* @r4, align 4
  store i32 %v3_134dc, i32* %stack_var_-8, align 4
  %v0_134e0 = call i32 @fork()
  store i32 %v0_134e0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_134e0, -4095
  br i1 %tmp, label %dec_label_pc_13500, label %dec_label_pc_134f0

dec_label_pc_134f0:                               ; preds = %dec_label_pc_134dc
  %v0_134f0 = call i32 @function_13a84()
  %v0_134f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_134f4 = sub i32 0, %v0_134f4
  %v2_134f8 = inttoptr i32 %v0_134f0 to i32*
  store i32 %v1_134f4, i32* %v2_134f8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13500

dec_label_pc_13500:                               ; preds = %dec_label_pc_134dc, %dec_label_pc_134f0
  %v0_13500 = phi i32 [ %v0_134e0, %dec_label_pc_134dc ], [ -1, %dec_label_pc_134f0 ]
  %v2_13504 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13504, i32* @r4, align 4
  ret i32 %v0_13500

; uselistorder directives
  uselistorder i32 %v0_134e0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13500, { 1, 0 }
}

define i32 @function_13508() local_unnamed_addr {
dec_label_pc_13508:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13508 = load i32, i32* @r4, align 4
  store i32 %v3_13508, i32* %stack_var_-8, align 4
  %v0_1350c = call i32 @getpid()
  store i32 %v0_1350c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1350c, -4095
  br i1 %tmp, label %dec_label_pc_1352c, label %dec_label_pc_1351c

dec_label_pc_1351c:                               ; preds = %dec_label_pc_13508
  %v0_1351c = call i32 @function_13a84()
  %v0_13520 = load i32, i32* %r4.global-to-local, align 4
  %v1_13520 = sub i32 0, %v0_13520
  %v2_13524 = inttoptr i32 %v0_1351c to i32*
  store i32 %v1_13520, i32* %v2_13524, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1352c

dec_label_pc_1352c:                               ; preds = %dec_label_pc_13508, %dec_label_pc_1351c
  %v0_1352c = phi i32 [ %v0_1350c, %dec_label_pc_13508 ], [ -1, %dec_label_pc_1351c ]
  %v2_13530 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13530, i32* @r4, align 4
  ret i32 %v0_1352c

; uselistorder directives
  uselistorder i32 %v0_1350c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1352c, { 1, 0 }
}

define i32 @function_13534() local_unnamed_addr {
dec_label_pc_13534:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13534 = load i32, i32* @r4, align 4
  store i32 %v3_13534, i32* %stack_var_-8, align 4
  %v0_13538 = call i32 @getppid()
  store i32 %v0_13538, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13538, -4095
  br i1 %tmp, label %dec_label_pc_13558, label %dec_label_pc_13548

dec_label_pc_13548:                               ; preds = %dec_label_pc_13534
  %v0_13548 = call i32 @function_13a84()
  %v0_1354c = load i32, i32* %r4.global-to-local, align 4
  %v1_1354c = sub i32 0, %v0_1354c
  %v2_13550 = inttoptr i32 %v0_13548 to i32*
  store i32 %v1_1354c, i32* %v2_13550, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13558

dec_label_pc_13558:                               ; preds = %dec_label_pc_13534, %dec_label_pc_13548
  %v0_13558 = phi i32 [ %v0_13538, %dec_label_pc_13534 ], [ -1, %dec_label_pc_13548 ]
  %v2_1355c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1355c, i32* @r4, align 4
  ret i32 %v0_13558

; uselistorder directives
  uselistorder i32 %v0_13538, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13558, { 1, 0 }
}

define i32 @function_13560(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13560:
  %r4.global-to-local = alloca i32, align 4
  %v2_1357c = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_1357c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_1357c, -4095
  br i1 %tmp, label %dec_label_pc_1359c, label %dec_label_pc_1358c

dec_label_pc_1358c:                               ; preds = %dec_label_pc_13560
  %v0_1358c = call i32 @function_13a84()
  %v0_13590 = load i32, i32* %r4.global-to-local, align 4
  %v1_13590 = sub i32 0, %v0_13590
  %v2_13594 = inttoptr i32 %v0_1358c to i32*
  store i32 %v1_13590, i32* %v2_13594, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1359c

dec_label_pc_1359c:                               ; preds = %dec_label_pc_13560, %dec_label_pc_1358c
  %v0_1359c = phi i32 [ %v2_1357c, %dec_label_pc_13560 ], [ -1, %dec_label_pc_1358c ]
  ret i32 %v0_1359c

; uselistorder directives
  uselistorder i32 %v2_1357c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1359c, { 1, 0 }
}

define i32 @function_135b0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_135b0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_135b0 = load i32, i32* @r4, align 4
  store i32 %v3_135b0, i32* %stack_var_-8, align 4
  %v2_135b4 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_135b8 = icmp eq i32 %v2_135b4, -4096
  store i1 %v7_135b8, i1* @cpsr_z, align 1
  store i32 %v2_135b4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_135b4, -4095
  br i1 %tmp, label %dec_label_pc_135d4, label %dec_label_pc_135c4

dec_label_pc_135c4:                               ; preds = %dec_label_pc_135b0
  %v0_135c4 = call i32 @function_13a84()
  %v0_135c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_135c8 = sub i32 0, %v0_135c8
  %v2_135cc = inttoptr i32 %v0_135c4 to i32*
  store i32 %v1_135c8, i32* %v2_135cc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_135d4

dec_label_pc_135d4:                               ; preds = %dec_label_pc_135b0, %dec_label_pc_135c4
  %v0_135d4 = phi i32 [ %v2_135b4, %dec_label_pc_135b0 ], [ -1, %dec_label_pc_135c4 ]
  %v2_135d8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_135d8, i32* @r4, align 4
  ret i32 %v0_135d4

; uselistorder directives
  uselistorder i32 %v2_135b4, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_135d4, { 1, 0 }
}

define i32 @function_135dc(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_135dc:
  %r4.global-to-local = alloca i32, align 4
  %v1_135ec = and i32 %arg2, 64
  %v2_135ec = icmp eq i32 %v1_135ec, 0
  br i1 %v2_135ec, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_135dc
  %v6_135dc = load i32, i32* @r2, align 4
  %phitmp = urem i32 %v6_135dc, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_135dc, %bb
  %v0_135fc = phi i32 [ 0, %dec_label_pc_135dc ], [ %phitmp, %bb ]
  store i32 %v0_135fc, i32* @r2, align 4
  %v4_13604 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_13608 = icmp eq i32 %v4_13604, -4096
  store i1 %v7_13608, i1* @cpsr_z, align 1
  store i32 %v4_13604, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_13604, -4095
  br i1 %tmp, label %dec_label_pc_13624, label %dec_label_pc_13614

dec_label_pc_13614:                               ; preds = %.thread1
  %v0_13614 = call i32 @function_13a84()
  %v0_13618 = load i32, i32* %r4.global-to-local, align 4
  %v1_13618 = sub i32 0, %v0_13618
  %v2_1361c = inttoptr i32 %v0_13614 to i32*
  store i32 %v1_13618, i32* %v2_1361c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13624

dec_label_pc_13624:                               ; preds = %.thread1, %dec_label_pc_13614
  %v0_13624 = phi i32 [ %v4_13604, %.thread1 ], [ -1, %dec_label_pc_13614 ]
  ret i32 %v0_13624

; uselistorder directives
  uselistorder i32 %v4_13604, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_13624, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_13638(i32 %arg1) local_unnamed_addr {
dec_label_pc_13638:
  store i32 %arg1, i32* @r2, align 4
  %v0_13640 = load i32, i32* @r0, align 4
  %v2_13640 = inttoptr i32 %v0_13640 to i8*
  %v3_13640 = call i32 @function_135dc(i8* %v2_13640, i32 577)
  %v0_13644 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13644, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_13638
  %v6_13644 = and i32 %v3_13640, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_13638, %bb
  %v7_13644 = phi i32 [ %v3_13640, %dec_label_pc_13638 ], [ %v6_13644, %bb ]
  ret i32 %v7_13644

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_13648(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13648:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13648 = load i32, i32* @r4, align 4
  store i32 %v3_13648, i32* %stack_var_-8, align 4
  %v2_13650 = load i32, i32* @r2, align 4
  %v3_13650 = load i32, i32* @r3, align 4
  %v4_13650 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_13650, i32 %v3_13650, i32 0)
  store i32 %v4_13650, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_13650, -4095
  br i1 %tmp, label %dec_label_pc_13670, label %dec_label_pc_13660

dec_label_pc_13660:                               ; preds = %dec_label_pc_13648
  %v0_13660 = call i32 @function_13a84()
  %v0_13664 = load i32, i32* %r4.global-to-local, align 4
  %v1_13664 = sub i32 0, %v0_13664
  %v2_13668 = inttoptr i32 %v0_13660 to i32*
  store i32 %v1_13664, i32* %v2_13668, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13670

dec_label_pc_13670:                               ; preds = %dec_label_pc_13648, %dec_label_pc_13660
  %v0_13670 = phi i32 [ %v4_13650, %dec_label_pc_13648 ], [ -1, %dec_label_pc_13660 ]
  %v2_13674 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13674, i32* @r4, align 4
  ret i32 %v0_13670

; uselistorder directives
  uselistorder i32 %v4_13650, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13670, { 1, 0 }
}

define i32 @function_13678(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13678:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13678 = load i32, i32* @r4, align 4
  store i32 %v3_13678, i32* %stack_var_-8, align 4
  %v4_1367c = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_1367c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_1367c, -4095
  br i1 %tmp, label %dec_label_pc_1369c, label %dec_label_pc_1368c

dec_label_pc_1368c:                               ; preds = %dec_label_pc_13678
  %v0_1368c = call i32 @function_13a84()
  %v0_13690 = load i32, i32* %r4.global-to-local, align 4
  %v1_13690 = sub i32 0, %v0_13690
  %v2_13694 = inttoptr i32 %v0_1368c to i32*
  store i32 %v1_13690, i32* %v2_13694, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1369c

dec_label_pc_1369c:                               ; preds = %dec_label_pc_13678, %dec_label_pc_1368c
  %v0_1369c = phi i32 [ %v4_1367c, %dec_label_pc_13678 ], [ -1, %dec_label_pc_1368c ]
  %v2_136a0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_136a0, i32* @r4, align 4
  ret i32 %v0_1369c

; uselistorder directives
  uselistorder i32 %v4_1367c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1369c, { 1, 0 }
}

define i32 @function_136a4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_136a4:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_136a4 = load i32, i32* @r4, align 4
  store i32 %v3_136a4, i32* %stack_var_-8, align 4
  %v7_136a8 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_136a8, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_136a8, -4095
  br i1 %tmp6, label %dec_label_pc_136c8, label %dec_label_pc_136b8

dec_label_pc_136b8:                               ; preds = %dec_label_pc_136a4
  %v0_136b8 = call i32 @function_13a84()
  %v0_136bc = load i32, i32* %r4.global-to-local, align 4
  %v1_136bc = sub i32 0, %v0_136bc
  %v2_136c0 = inttoptr i32 %v0_136b8 to i32*
  store i32 %v1_136bc, i32* %v2_136c0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_136c8

dec_label_pc_136c8:                               ; preds = %dec_label_pc_136a4, %dec_label_pc_136b8
  %v0_136c8 = phi i32 [ %v7_136a8, %dec_label_pc_136a4 ], [ -1, %dec_label_pc_136b8 ]
  %v2_136cc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_136cc, i32* @r4, align 4
  ret i32 %v0_136c8

; uselistorder directives
  uselistorder i32 %v7_136a8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_136c8, { 1, 0 }
}

define i32 @function_136d0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_136d0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_136d0 = load i32, i32* @r4, align 4
  store i32 %v3_136d0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_136f8, label %dec_label_pc_136e8

dec_label_pc_136e8:                               ; preds = %dec_label_pc_136d0
  %v0_136e8 = call i32 @function_13a84()
  %v0_136ec = load i32, i32* %r4.global-to-local, align 4
  %v1_136ec = sub i32 0, %v0_136ec
  %v2_136f0 = inttoptr i32 %v0_136e8 to i32*
  store i32 %v1_136ec, i32* %v2_136f0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_136fc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_136f8

dec_label_pc_136f8:                               ; preds = %dec_label_pc_136d0, %dec_label_pc_136e8
  %v2_136fc = phi i32 [ %v3_136d0, %dec_label_pc_136d0 ], [ %v2_136fc.pre, %dec_label_pc_136e8 ]
  %v0_136f8 = phi i32 [ %arg1, %dec_label_pc_136d0 ], [ -1, %dec_label_pc_136e8 ]
  store i32 %v2_136fc, i32* @r4, align 4
  ret i32 %v0_136f8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_136f8, { 1, 0 }
}

define i32 @function_13700(i32 %arg1) local_unnamed_addr {
dec_label_pc_13700:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13700 = load i32, i32* @r4, align 4
  store i32 %v3_13700, i32* %stack_var_-8, align 4
  %v0_13704 = call i32 @setsid()
  store i32 %v0_13704, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13704, -4095
  br i1 %tmp, label %dec_label_pc_13724, label %dec_label_pc_13714

dec_label_pc_13714:                               ; preds = %dec_label_pc_13700
  %v0_13714 = call i32 @function_13a84()
  %v0_13718 = load i32, i32* %r4.global-to-local, align 4
  %v1_13718 = sub i32 0, %v0_13718
  %v2_1371c = inttoptr i32 %v0_13714 to i32*
  store i32 %v1_13718, i32* %v2_1371c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13724

dec_label_pc_13724:                               ; preds = %dec_label_pc_13700, %dec_label_pc_13714
  %v0_13724 = phi i32 [ %v0_13704, %dec_label_pc_13700 ], [ -1, %dec_label_pc_13714 ]
  %v2_13728 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13728, i32* @r4, align 4
  ret i32 %v0_13724

; uselistorder directives
  uselistorder i32 %v0_13704, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13724, { 1, 0 }
}

define i32 @function_1372c(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1372c:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1372c = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_1372c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1372c
  %v3_137345 = load i32, i32* @r4, align 4
  store i32 %v3_137345, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13754

bb:                                               ; preds = %dec_label_pc_1372c
  %v3_13734 = load i32, i32* @r4, align 4
  store i32 %v3_13734, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_13754, label %dec_label_pc_13740

dec_label_pc_13740:                               ; preds = %bb
  %v0_13740 = call i32 @function_13a84()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_1374c = inttoptr i32 %v0_13740 to i32*
  store i32 22, i32* %v2_1374c, align 4
  %v0_13778.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13778

dec_label_pc_13754:                               ; preds = %.thread, %bb
  %v7_13754 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_13754, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_13754, -4095
  br i1 %tmp13, label %dec_label_pc_13774, label %dec_label_pc_13764

dec_label_pc_13764:                               ; preds = %dec_label_pc_13754
  %v0_13764 = call i32 @function_13a84()
  %v0_13768 = load i32, i32* %r4.global-to-local, align 4
  %v1_13768 = sub i32 0, %v0_13768
  %v2_1376c = inttoptr i32 %v0_13764 to i32*
  store i32 %v1_13768, i32* %v2_1376c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13774

dec_label_pc_13774:                               ; preds = %dec_label_pc_13754, %dec_label_pc_13764
  %v0_13774 = phi i32 [ %v7_13754, %dec_label_pc_13754 ], [ -1, %dec_label_pc_13764 ]
  store i32 %v0_13774, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13778

dec_label_pc_13778:                               ; preds = %dec_label_pc_13740, %dec_label_pc_13774
  %v0_13778 = phi i32 [ %v0_13778.pre, %dec_label_pc_13740 ], [ %v0_13774, %dec_label_pc_13774 ]
  %v2_1377c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1377c, i32* @r4, align 4
  ret i32 %v0_13778

; uselistorder directives
  uselistorder i32 %v7_13754, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_13778, { 1, 0 }
  uselistorder label %dec_label_pc_13774, { 1, 0 }
  uselistorder label %dec_label_pc_13754, { 1, 0 }
}

define i32 @function_13780(i32* %arg1) local_unnamed_addr {
dec_label_pc_13780:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13780 = load i32, i32* @r4, align 4
  store i32 %v3_13780, i32* %stack_var_-8, align 4
  %v2_13784 = call i32 @time(i32* %arg1)
  store i32 %v2_13784, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_13784, -4095
  br i1 %tmp, label %dec_label_pc_137a4, label %dec_label_pc_13794

dec_label_pc_13794:                               ; preds = %dec_label_pc_13780
  %v0_13794 = call i32 @function_13a84()
  %v0_13798 = load i32, i32* %r4.global-to-local, align 4
  %v1_13798 = sub i32 0, %v0_13798
  %v2_1379c = inttoptr i32 %v0_13794 to i32*
  store i32 %v1_13798, i32* %v2_1379c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137a4

dec_label_pc_137a4:                               ; preds = %dec_label_pc_13780, %dec_label_pc_13794
  %v0_137a4 = phi i32 [ %v2_13784, %dec_label_pc_13780 ], [ -1, %dec_label_pc_13794 ]
  %v2_137a8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_137a8, i32* @r4, align 4
  ret i32 %v0_137a4

; uselistorder directives
  uselistorder i32 %v2_13784, { 1, 0, 2 }
  uselistorder label %dec_label_pc_137a4, { 1, 0 }
}

define i32 @function_137ac(i8* %arg1) local_unnamed_addr {
dec_label_pc_137ac:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_137ac = load i32, i32* @r4, align 4
  store i32 %v3_137ac, i32* %stack_var_-8, align 4
  %v3_137b0 = call i32 @unlink(i8* %arg1)
  store i32 %v3_137b0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_137b0, -4095
  br i1 %tmp, label %dec_label_pc_137d0, label %dec_label_pc_137c0

dec_label_pc_137c0:                               ; preds = %dec_label_pc_137ac
  %v0_137c0 = call i32 @function_13a84()
  %v0_137c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_137c4 = sub i32 0, %v0_137c4
  %v2_137c8 = inttoptr i32 %v0_137c0 to i32*
  store i32 %v1_137c4, i32* %v2_137c8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137d0

dec_label_pc_137d0:                               ; preds = %dec_label_pc_137ac, %dec_label_pc_137c0
  %v0_137d0 = phi i32 [ %v3_137b0, %dec_label_pc_137ac ], [ -1, %dec_label_pc_137c0 ]
  %v2_137d4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_137d4, i32* @r4, align 4
  ret i32 %v0_137d0

; uselistorder directives
  uselistorder i32 %v3_137b0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_137d0, { 1, 0 }
}

define i32 @function_137d8(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_137d8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_137d8 = load i32, i32* @r4, align 4
  store i32 %v3_137d8, i32* %stack_var_-8, align 4
  %v4_137dc = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_137dc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_137dc, -4095
  br i1 %tmp, label %dec_label_pc_137fc, label %dec_label_pc_137ec

dec_label_pc_137ec:                               ; preds = %dec_label_pc_137d8
  %v0_137ec = call i32 @function_13a84()
  %v0_137f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_137f0 = sub i32 0, %v0_137f0
  %v2_137f4 = inttoptr i32 %v0_137ec to i32*
  store i32 %v1_137f0, i32* %v2_137f4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137fc

dec_label_pc_137fc:                               ; preds = %dec_label_pc_137d8, %dec_label_pc_137ec
  %v0_137fc = phi i32 [ %v4_137dc, %dec_label_pc_137d8 ], [ -1, %dec_label_pc_137ec ]
  %v2_13800 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13800, i32* @r4, align 4
  ret i32 %v0_137fc

; uselistorder directives
  uselistorder i32 %v4_137dc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_137fc, { 1, 0 }
}

define i32 @function_13804(i32* %arg1) local_unnamed_addr {
dec_label_pc_13804:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13804 = load i32, i32* @r4, align 4
  store i32 %v3_13804, i32* %stack_var_-20, align 4
  %v6_13804 = load i32, i32* @r5, align 4
  %v9_13804 = load i32, i32* @r6, align 4
  %v12_13804 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_1380c = load i32, i32* %arg1, align 4
  store i32 %v2_1380c, i32* %r4.global-to-local, align 4
  %v2_13810 = ptrtoint i32* %stack_var_-36 to i32
  %v1_13814 = add i32 %tmp, 24
  store i32 %v1_13814, i32* @r6, align 4
  %v3_13818 = icmp eq i32 %v2_1380c, -1
  store i32 %v2_13810, i32* @r7, align 4
  store i32 %v1_13814, i32* %r2.global-to-local, align 4
  store i32 %v2_13810, i32* @r0, align 4
  br i1 %v3_13818, label %dec_label_pc_13830, label %dec_label_pc_13844

dec_label_pc_13830:                               ; preds = %dec_label_pc_13804
  %v0_13830 = call i32 @function_13a84()
  %v0_13838 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_13838, i32* %r2.global-to-local, align 4
  %v2_1383c = inttoptr i32 %v0_13830 to i32*
  store i32 9, i32* %v2_1383c, align 4
  %v0_1389c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1389c

dec_label_pc_13844:                               ; preds = %dec_label_pc_13804
  %v8_1384c = call i32 @function_14afc(i32 %v2_13810, i32 ptrtoint (i32* @global_var_14af4.591 to i32), i32 %v1_13814, i32 84732, i32 %v3_13804, i32 %v6_13804, i32 %v9_13804)
  %v1_1385c = call i32 @function_14af4()
  %v0_13868 = load i32, i32* @r5, align 4
  %v1_13868 = inttoptr i32 %v0_13868 to i32*
  %v2_13868 = load i32, i32* %v1_13868, align 4
  store i32 %v2_13868, i32* @r4, align 4
  store i32 %v2_13810, i32* @r0, align 4
  store i32 -1, i32* %v1_13868, align 4
  store i32 ptrtoint (i32* @global_var_13880.595 to i32), i32* @lr, align 4
  %v8_1387c = call i32 @function_14afc(i32 %v2_13810, i32 1, i32 %v1_13814, i32 84732, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_13880 = load i32, i32* @r5, align 4
  %v1_13880 = add i32 %v0_13880, 12
  %v2_13880 = inttoptr i32 %v1_13880 to i32*
  %v3_13880 = load i32, i32* %v2_13880, align 4
  store i32 %v3_13880, i32* @r0, align 4
  %v0_13884 = call i32 @function_1410c()
  %v0_13888 = load i32, i32* @r5, align 4
  store i32 %v0_13888, i32* @r0, align 4
  %v0_1388c = call i32 @function_1410c()
  %v0_13890 = load i32, i32* @r4, align 4
  %v1_13894 = call i32 @function_134b0(i32 %v0_13890)
  store i32 %v1_13894, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1389c

dec_label_pc_1389c:                               ; preds = %dec_label_pc_13830, %dec_label_pc_13844
  %v0_1389c = phi i32 [ %v0_1389c.pre, %dec_label_pc_13830 ], [ %v1_13894, %dec_label_pc_13844 ]
  %v2_138a4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_138a4, i32* @r4, align 4
  store i32 %v6_13804, i32* @r5, align 4
  store i32 %v9_13804, i32* @r6, align 4
  store i32 %v12_13804, i32* @r7, align 4
  ret i32 %v0_1389c

; uselistorder directives
  uselistorder i32 %v1_13814, { 2, 1, 0, 3 }
  uselistorder i32 %v2_13810, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_13804, { 1, 0 }
  uselistorder i32 %v6_13804, { 1, 0 }
  uselistorder label %dec_label_pc_1389c, { 1, 0 }
}

define i32 @function_138b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_138b8:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_138b8 = load i32, i32* @r4, align 4
  %v9_138b8 = load i32, i32* @r6, align 4
  %v12_138b8 = load i32, i32* @r7, align 4
  %v0_138c4 = load i32, i32* @r0, align 4
  %v2_138c4 = inttoptr i32 %v0_138c4 to i8*
  %v3_138c4 = call i32 @function_135dc(i8* %v2_138c4, i32 18432)
  store i32 %v3_138c4, i32* @r0, align 4
  store i32 %v3_138c4, i32* @r7, align 4
  %v1_138c8 = icmp slt i32 %v3_138c4, 0
  br i1 %v1_138c8, label %.thread1, label %dec_label_pc_138d4

.thread1:                                         ; preds = %dec_label_pc_138b8
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_139a4

dec_label_pc_138d4:                               ; preds = %dec_label_pc_138b8
  %v2_138c0 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_138c0, i32* @r1, align 4
  %v0_138d8 = call i32 @function_14f20()
  %v1_138dc = icmp slt i32 %v0_138d8, 0
  br i1 %v1_138dc, label %dec_label_pc_138fc, label %dec_label_pc_138e4

dec_label_pc_138e4:                               ; preds = %dec_label_pc_138d4
  %v0_138e4 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_138f0 = call i32 @function_133c0(i32 %v0_138e4, i32 2)
  %v1_138f4 = icmp slt i32 %v2_138f0, 0
  br i1 %v1_138f4, label %dec_label_pc_138fc, label %dec_label_pc_1391c

dec_label_pc_138fc:                               ; preds = %dec_label_pc_138e4, %dec_label_pc_138d4
  %v0_138fc = call i32 @function_13a84()
  store i32 %v0_138fc, i32* %r5.global-to-local, align 4
  %v0_13904 = load i32, i32* @r7, align 4
  %v1_13908 = inttoptr i32 %v0_138fc to i32*
  %v2_13908 = load i32, i32* %v1_13908, align 4
  store i32 %v2_13908, i32* @r4, align 4
  %v1_1390c = call i32 @function_134b0(i32 %v0_13904)
  store i32 0, i32* @r6, align 4
  %v0_13914 = load i32, i32* @r4, align 4
  %v1_13914 = load i32, i32* %r5.global-to-local, align 4
  %v2_13914 = inttoptr i32 %v1_13914 to i32*
  store i32 %v0_13914, i32* %v2_13914, align 4
  br label %dec_label_pc_139a4

dec_label_pc_1391c:                               ; preds = %dec_label_pc_138e4
  %v1_13920 = call i32 @function_13f60(i32 48)
  store i32 %v1_13920, i32* @r6, align 4
  %v2_13924 = icmp eq i32 %v1_13920, 0
  br i1 %v2_13924, label %dec_label_pc_13974, label %dec_label_pc_1392c

dec_label_pc_1392c:                               ; preds = %dec_label_pc_1391c
  store i32 0, i32* @r4, align 4
  %v2_13930 = add i32 %v1_13920, 16
  %v3_13930 = inttoptr i32 %v2_13930 to i32*
  store i32 0, i32* %v3_13930, align 4
  %v2_13938 = icmp ugt i32 %tmp, 511
  %v1_1393c = load i32, i32* @r6, align 4
  %v2_1393c = add i32 %v1_1393c, 20
  %v3_1393c = inttoptr i32 %v2_1393c to i32*
  store i32 %tmp, i32* %v3_1393c, align 4
  br i1 %v2_13938, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_1392c
  %v2_13944 = load i32, i32* @r6, align 4
  %v3_13944 = add i32 %v2_13944, 20
  %v4_13944 = inttoptr i32 %v3_13944 to i32*
  store i32 512, i32* %v4_13944, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1392c, %bb
  %v0_13948 = load i32, i32* @r7, align 4
  %v1_13948 = load i32, i32* @r6, align 4
  %v2_13948 = inttoptr i32 %v1_13948 to i32*
  store i32 %v0_13948, i32* %v2_13948, align 4
  %v0_1394c = load i32, i32* @r4, align 4
  %v1_1394c = load i32, i32* @r6, align 4
  %v2_1394c = add i32 %v1_1394c, 8
  %v3_1394c = inttoptr i32 %v2_1394c to i32*
  store i32 %v0_1394c, i32* %v3_1394c, align 4
  %v0_13950 = load i32, i32* @r4, align 4
  %v1_13950 = load i32, i32* @r6, align 4
  %v2_13950 = add i32 %v1_13950, 4
  %v3_13950 = inttoptr i32 %v2_13950 to i32*
  store i32 %v0_13950, i32* %v3_13950, align 4
  %v0_13958 = load i32, i32* @r6, align 4
  %v1_13958 = add i32 %v0_13958, 20
  %v2_13958 = inttoptr i32 %v1_13958 to i32*
  %v3_13958 = load i32, i32* %v2_13958, align 4
  %v2_1395c = call i32 @function_140b4(i32 1, i32 %v3_13958)
  %v2_13960 = icmp eq i32 %v2_1395c, 0
  %v1_13964 = load i32, i32* @r6, align 4
  %v2_13964 = add i32 %v1_13964, 12
  %v3_13964 = inttoptr i32 %v2_13964 to i32*
  store i32 %v2_1395c, i32* %v3_13964, align 4
  br i1 %v2_13960, label %dec_label_pc_1396c, label %dec_label_pc_13990

dec_label_pc_1396c:                               ; preds = %.thread
  %v0_1396c = load i32, i32* @r6, align 4
  store i32 %v0_1396c, i32* @r0, align 4
  %v0_13970 = call i32 @function_1410c()
  br label %dec_label_pc_13974

dec_label_pc_13974:                               ; preds = %dec_label_pc_1391c, %dec_label_pc_1396c
  %v0_13974 = load i32, i32* @r7, align 4
  %v1_13978 = call i32 @function_134b0(i32 %v0_13974)
  %v0_1397c = call i32 @function_13a84()
  store i32 0, i32* @r6, align 4
  %v2_13988 = inttoptr i32 %v0_1397c to i32*
  store i32 12, i32* %v2_13988, align 4
  br label %dec_label_pc_139a4

dec_label_pc_13990:                               ; preds = %.thread
  store i32 80292, i32* @lr, align 4
  %v1_139a0 = call i32 @function_14af4()
  br label %dec_label_pc_139a4

dec_label_pc_139a4:                               ; preds = %.thread1, %dec_label_pc_13974, %dec_label_pc_138fc, %dec_label_pc_13990
  %v0_139a4 = load i32, i32* @r6, align 4
  store i32 %v3_138b8, i32* @r4, align 4
  store i32 %v9_138b8, i32* @r6, align 4
  store i32 %v12_138b8, i32* @r7, align 4
  ret i32 %v0_139a4

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_140b4, { 35, 6, 36, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 1, 22, 21, 20, 19, 18, 2, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5, 4, 3, 0 }
  uselistorder i32 512, { 4, 17, 18, 0, 1, 2, 3, 6, 10, 5, 7, 13, 11, 12, 14, 8, 15, 9, 16 }
  uselistorder i32 (i32)* @function_134b0, { 25, 24, 23, 10, 41, 40, 9, 8, 39, 38, 7, 6, 31, 37, 36, 35, 34, 33, 32, 30, 29, 28, 27, 26, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_139a4, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_13974, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_139b4(i32* %arg1) local_unnamed_addr {
dec_label_pc_139b4:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_139b4 = load i32, i32* @r4, align 4
  %v6_139b4 = load i32, i32* @r5, align 4
  %v9_139b4 = load i32, i32* @lr, align 4
  %v1_139b8 = add i32 %tmp, 24
  store i32 %v1_139b8, i32* @r4, align 4
  %v2_139bc = ptrtoint i32* %stack_var_-28 to i32
  store i32 84732, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_139bc, i32* @r0, align 4
  store i32 %v1_139b8, i32* %r2.global-to-local, align 4
  %v8_139d8 = call i32 @function_14afc(i32 %v2_139bc, i32 ptrtoint (i32* @global_var_14af4.591 to i32), i32 %v1_139b8, i32 84732, i32 %v3_139b4, i32 %v6_139b4, i32 %v9_139b4)
  %v0_139dc = load i32, i32* @r4, align 4
  store i32 %v0_139dc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14af4.591 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_139ec.600 to i32), i32* @lr, align 4
  %v1_139e8 = call i32 @function_14af4()
  store i32 %v1_139e8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_139ec

dec_label_pc_139ec:                               ; preds = %dec_label_pc_13a20, %dec_label_pc_139b4
  %v0_139ec = load i32, i32* @r5, align 4
  %v1_139ec = add i32 %v0_139ec, 4
  %v2_139ec = inttoptr i32 %v1_139ec to i32*
  %v3_139ec = load i32, i32* %v2_139ec, align 4
  store i32 %v3_139ec, i32* %r2.global-to-local, align 4
  %v4_139ec = add i32 %v0_139ec, 8
  %v5_139ec = inttoptr i32 %v4_139ec to i32*
  %v6_139ec = load i32, i32* %v5_139ec, align 4
  store i32 %v6_139ec, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_139ec, %v3_139ec
  br i1 %tmp8, label %dec_label_pc_13a20, label %dec_label_pc_139f8

dec_label_pc_139f8:                               ; preds = %dec_label_pc_139ec
  %v1_139f8 = inttoptr i32 %v0_139ec to i32*
  %v2_139f8 = load i32, i32* %v1_139f8, align 4
  store i32 %v2_139f8, i32* @r0, align 4
  %v1_139fc = add i32 %v0_139ec, 12
  %v2_139fc = inttoptr i32 %v1_139fc to i32*
  %v3_139fc = load i32, i32* %v2_139fc, align 4
  %v1_13a00 = add i32 %v0_139ec, 20
  %v2_13a00 = inttoptr i32 %v1_13a00 to i32*
  %v3_13a00 = load i32, i32* %v2_13a00, align 4
  store i32 %v3_13a00, i32* @r2, align 4
  %v4_13a04 = call i32 @function_14f70(i32 %v2_139f8, i32 %v3_139fc, i32 %v3_13a00, i32 %v6_139ec)
  store i32 %v4_13a04, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_13a04, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_13a14

.thread:                                          ; preds = %dec_label_pc_139f8
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_13a54

dec_label_pc_13a14:                               ; preds = %dec_label_pc_139f8
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13a18 = load i32, i32* @r5, align 4
  %v2_13a18 = add i32 %v1_13a18, 4
  %v3_13a18 = inttoptr i32 %v2_13a18 to i32*
  store i32 0, i32* %v3_13a18, align 4
  %v1_13a1c = load i32, i32* @r5, align 4
  %v2_13a1c = add i32 %v1_13a1c, 8
  %v3_13a1c = inttoptr i32 %v2_13a1c to i32*
  store i32 %v4_13a04, i32* %v3_13a1c, align 4
  %v0_13a20.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_13a20

dec_label_pc_13a20:                               ; preds = %dec_label_pc_139ec, %dec_label_pc_13a14
  %v1_13a38 = phi i32 [ %v0_139ec, %dec_label_pc_139ec ], [ %v0_13a20.pre, %dec_label_pc_13a14 ]
  %v1_13a20 = add i32 %v1_13a38, 4
  %v2_13a20 = inttoptr i32 %v1_13a20 to i32*
  %v3_13a20 = load i32, i32* %v2_13a20, align 4
  store i32 %v3_13a20, i32* %r2.global-to-local, align 4
  %v1_13a24 = add i32 %v1_13a38, 12
  %v2_13a24 = inttoptr i32 %v1_13a24 to i32*
  %v3_13a24 = load i32, i32* %v2_13a24, align 4
  store i32 %v3_13a24, i32* %ip.global-to-local, align 4
  %v2_13a28 = add i32 %v3_13a24, %v3_13a20
  store i32 %v2_13a28, i32* @r4, align 4
  %v1_13a2c = add i32 %v2_13a28, 4
  %v2_13a2c = inttoptr i32 %v1_13a2c to i32*
  %v3_13a2c = load i32, i32* %v2_13a2c, align 4
  %v1_13a30 = add i32 %v2_13a28, 8
  %v2_13a30 = inttoptr i32 %v1_13a30 to i8*
  %v3_13a30 = load i8, i8* %v2_13a30, align 1
  %v4_13a30 = zext i8 %v3_13a30 to i32
  store i32 %v4_13a30, i32* %r3.global-to-local, align 4
  %v1_13a34 = add i32 %v2_13a28, 9
  %v2_13a34 = inttoptr i32 %v1_13a34 to i8*
  %v3_13a34 = load i8, i8* %v2_13a34, align 1
  %v4_13a34 = zext i8 %v3_13a34 to i32
  store i32 %v4_13a34, i32* %r0.global-to-local, align 4
  %v2_13a38 = add i32 %v1_13a38, 16
  %v3_13a38 = inttoptr i32 %v2_13a38 to i32*
  store i32 %v3_13a2c, i32* %v3_13a38, align 4
  %v0_13a3c = load i32, i32* %r2.global-to-local, align 4
  %v1_13a3c = load i32, i32* %ip.global-to-local, align 4
  %v2_13a3c = add i32 %v1_13a3c, %v0_13a3c
  %v3_13a3c = inttoptr i32 %v2_13a3c to i32*
  %v4_13a3c = load i32, i32* %v3_13a3c, align 4
  %v0_13a40 = load i32, i32* %r3.global-to-local, align 4
  %v1_13a40 = load i32, i32* %r0.global-to-local, align 4
  %v4_13a40 = mul i32 %v1_13a40, 256
  %v5_13a40 = or i32 %v4_13a40, %v0_13a40
  store i32 %v5_13a40, i32* %r3.global-to-local, align 4
  %v2_13a44 = add i32 %v5_13a40, %v0_13a3c
  store i32 %v2_13a44, i32* @r2, align 4
  %v2_13a48 = icmp eq i32 %v4_13a3c, 0
  %v1_13a4c = load i32, i32* @r5, align 4
  %v2_13a4c = add i32 %v1_13a4c, 4
  %v3_13a4c = inttoptr i32 %v2_13a4c to i32*
  store i32 %v2_13a44, i32* %v3_13a4c, align 4
  br i1 %v2_13a48, label %dec_label_pc_139ec, label %dec_label_pc_13a54

dec_label_pc_13a54:                               ; preds = %dec_label_pc_13a20, %.thread
  store i32 %v2_139bc, i32* @r0, align 4
  store i32 84732, i32* %r3.global-to-local, align 4
  store i32 80488, i32* @lr, align 4
  %v3_13a64 = load i32, i32* @r2, align 4
  %v8_13a64 = call i32 @function_14afc(i32 %v2_139bc, i32 1, i32 %v3_13a64, i32 84732, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_13a68 = load i32, i32* @r4, align 4
  store i32 %v0_13a68, i32* %r0.global-to-local, align 4
  store i32 %v3_139b4, i32* @r4, align 4
  store i32 %v6_139b4, i32* @r5, align 4
  ret i32 %v0_13a68

; uselistorder directives
  uselistorder i32 %v1_13a38, { 0, 2, 1 }
  uselistorder i32 %v6_139ec, { 1, 0, 2 }
  uselistorder i32 %v0_139ec, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_139bc, { 1, 0, 3, 2 }
  uselistorder i32 %v1_139b8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 6, 4, 5, 0 }
  uselistorder label %dec_label_pc_13a20, { 1, 0 }
}

define i32 @function_13a84() local_unnamed_addr {
dec_label_pc_13a84:
  ret i32 ptrtoint (i32* @global_var_1eaf0.603 to i32)
}

define i32 @function_13a90(i32 %arg1) local_unnamed_addr {
dec_label_pc_13a90:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_13a9c = bitcast i32* %stack_var_-20 to %tms*
  %v2_13a9c = call i32 @function_15300(%tms* %v1_13a9c)
  %v2_13aa4 = load i32, i32* %stack_var_-20, align 4
  %v2_13aa8 = add i32 %v2_13aa4, %tmp
  %v2_13ab0 = mul i32 %v2_13aa8, 10000
  %v1_13ab4 = and i32 %v2_13ab0, 2147483632
  ret i32 %v1_13ab4

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_13ad0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13ad0:
  %v0_13ad0 = call i32 @function_15710()
  ret i32 %v0_13ad0
}

define i32 @function_13ae0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13ae0:
  %v0_13ae0 = call i32 @function_15710()
  ret i32 %v0_13ae0

; uselistorder directives
  uselistorder i32 ()* @function_15710, { 1, 0 }
}

define i32 @function_13af0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13af0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_13af4 = load i32, i32* @r2, align 4
  %v8_13af4 = icmp eq i32 %v0_13af4, 8
  store i1 %v8_13af4, i1* %cpsr_z.global-to-local, align 1
  %v5_13af8 = icmp slt i32 %v0_13af4, 8
  br i1 %v5_13af8, label %dec_label_pc_13b58, label %dec_label_pc_13afc

dec_label_pc_13afc:                               ; preds = %dec_label_pc_13af0
  %v4_13afc = mul i32 %arg2, 256
  %v5_13afc = or i32 %v4_13afc, %arg2
  %v4_13b00 = mul i32 %v5_13afc, 65536
  %v5_13b00 = or i32 %v4_13b00, %v5_13afc
  store i32 %v5_13b00, i32* %r1.global-to-local, align 4
  %v1_13b0457 = urem i32 %tmp, 4
  %v2_13b0458 = icmp eq i32 %v1_13b0457, 0
  store i1 %v2_13b0458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_13b0458, label %dec_label_pc_13b14, label %bb

bb:                                               ; preds = %dec_label_pc_13afc, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_13afc ]
  %v3_13b0859 = phi i32 [ %v6_13b08, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_13afc ]
  %v4_13b08 = inttoptr i32 %v3_13b0859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_13b08, align 1
  %v5_13b08 = load i32, i32* %r3.global-to-local, align 4
  %v6_13b08 = add i32 %v5_13b08, 1
  store i32 %v6_13b08, i32* %r3.global-to-local, align 4
  %v0_13b0c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_13b18.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_13b0c.pr, label %dec_label_pc_13b14, label %.thread

.thread:                                          ; preds = %bb
  %v2_13b0c = add i32 %v0_13b18.pr.pre, -1
  store i32 %v2_13b0c, i32* @r2, align 4
  %v1_13b04 = urem i32 %v6_13b08, 4
  %v2_13b04 = icmp eq i32 %v1_13b04, 0
  store i1 %v2_13b04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13b04, label %dec_label_pc_13b14, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_13b08.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_13b08.pre to i8
  br label %bb

dec_label_pc_13b14:                               ; preds = %.thread, %bb, %dec_label_pc_13afc
  %v0_13b2028 = phi i32 [ %tmp, %dec_label_pc_13afc ], [ %v6_13b08, %bb ], [ %v6_13b08, %.thread ]
  %v0_13b18.pr = phi i32 [ %v0_13af4, %dec_label_pc_13afc ], [ %v0_13b18.pr.pre, %bb ], [ %v2_13b0c, %.thread ]
  %v0_13b14 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_13b14, i32* %ip.global-to-local, align 4
  %v8_13b1810 = icmp eq i32 %v0_13b18.pr, 8
  store i1 %v8_13b1810, i1* %cpsr_z.global-to-local, align 1
  %v5_13b1c11 = icmp slt i32 %v0_13b18.pr, 8
  br i1 %v5_13b1c11, label %dec_label_pc_13b58, label %dec_label_pc_13b20.preheader

dec_label_pc_13b20.preheader:                     ; preds = %dec_label_pc_13b14
  %v1_13b2046 = inttoptr i32 %v0_13b2028 to i32*
  store i32 %v0_13b14, i32* %v1_13b2046, align 4
  %v3_13b2047 = add i32 %v0_13b2028, 4
  %v4_13b2048 = inttoptr i32 %v3_13b2047 to i32*
  %v5_13b2049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13b2049, i32* %v4_13b2048, align 4
  %v6_13b2050 = add i32 %v0_13b2028, 8
  store i32 %v6_13b2050, i32* %r3.global-to-local, align 4
  %v0_13b2451 = load i32, i32* @r2, align 4
  %v1_13b2452 = add i32 %v0_13b2451, -8
  store i32 %v1_13b2452, i32* %r2.global-to-local, align 4
  %v5_13b2c53 = icmp slt i32 %v1_13b2452, 8
  br i1 %v5_13b2c53, label %dec_label_pc_13b20.dec_label_pc_13b58.loopexit_crit_edge, label %dec_label_pc_13b30

dec_label_pc_13b30:                               ; preds = %dec_label_pc_13b20.preheader, %dec_label_pc_13b18.dec_label_pc_13b20_crit_edge
  %v6_13b2055 = phi i32 [ %v6_13b20, %dec_label_pc_13b18.dec_label_pc_13b20_crit_edge ], [ %v6_13b2050, %dec_label_pc_13b20.preheader ]
  %v0_13b2054 = phi i32 [ %v12_13b4c, %dec_label_pc_13b18.dec_label_pc_13b20_crit_edge ], [ %v0_13b2028, %dec_label_pc_13b20.preheader ]
  %v1_13b30 = inttoptr i32 %v6_13b2055 to i32*
  %v2_13b30 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13b30, i32* %v1_13b30, align 4
  %v3_13b30 = add i32 %v0_13b2054, 12
  %v4_13b30 = inttoptr i32 %v3_13b30 to i32*
  %v5_13b30 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13b30, i32* %v4_13b30, align 4
  %v6_13b30 = add i32 %v0_13b2054, 16
  store i32 %v6_13b30, i32* %r3.global-to-local, align 4
  %v0_13b34 = load i32, i32* %r2.global-to-local, align 4
  %v1_13b34 = add i32 %v0_13b34, -8
  store i32 %v1_13b34, i32* %r2.global-to-local, align 4
  %v5_13b3c = icmp slt i32 %v1_13b34, 8
  br i1 %v5_13b3c, label %dec_label_pc_13b30.dec_label_pc_13b58.loopexit_crit_edge, label %dec_label_pc_13b40

dec_label_pc_13b40:                               ; preds = %dec_label_pc_13b30
  %v1_13b40 = inttoptr i32 %v6_13b30 to i32*
  %v2_13b40 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_13b40, i32* %v1_13b40, align 4
  %v3_13b40 = add i32 %v0_13b2054, 20
  %v4_13b40 = inttoptr i32 %v3_13b40 to i32*
  %v5_13b40 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13b40, i32* %v4_13b40, align 4
  %v6_13b40 = add i32 %v0_13b2054, 24
  store i32 %v6_13b40, i32* %r3.global-to-local, align 4
  %v0_13b44 = load i32, i32* %r2.global-to-local, align 4
  %v1_13b44 = add i32 %v0_13b44, -8
  store i32 %v1_13b44, i32* %r2.global-to-local, align 4
  %v5_13b4c = icmp slt i32 %v1_13b44, 8
  br i1 %v5_13b4c, label %dec_label_pc_13b40.dec_label_pc_13b58.loopexit_crit_edge, label %dec_label_pc_13b18

dec_label_pc_13b18:                               ; preds = %dec_label_pc_13b40
  %v7_13b4c = inttoptr i32 %v6_13b40 to i32*
  %v8_13b4c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_13b4c, i32* %v7_13b4c, align 4
  %v9_13b4c = add i32 %v0_13b2054, 28
  %v10_13b4c = inttoptr i32 %v9_13b4c to i32*
  %v11_13b4c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_13b4c, i32* %v10_13b4c, align 4
  %v12_13b4c = add i32 %v0_13b2054, 32
  store i32 %v12_13b4c, i32* %r3.global-to-local, align 4
  %v6_13b50 = load i32, i32* %r2.global-to-local, align 4
  %v7_13b50 = add i32 %v6_13b50, -8
  store i32 %v7_13b50, i32* %r2.global-to-local, align 4
  %v5_13b1c = icmp slt i32 %v7_13b50, 8
  br i1 %v5_13b1c, label %dec_label_pc_13b18.dec_label_pc_13b58.loopexit_crit_edge, label %dec_label_pc_13b18.dec_label_pc_13b20_crit_edge

dec_label_pc_13b18.dec_label_pc_13b20_crit_edge:  ; preds = %dec_label_pc_13b18
  %v2_13b20.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13b20 = inttoptr i32 %v12_13b4c to i32*
  store i32 %v2_13b20.pre, i32* %v1_13b20, align 4
  %v3_13b20 = add i32 %v0_13b2054, 36
  %v4_13b20 = inttoptr i32 %v3_13b20 to i32*
  %v5_13b20 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_13b20, i32* %v4_13b20, align 4
  %v6_13b20 = add i32 %v0_13b2054, 40
  store i32 %v6_13b20, i32* %r3.global-to-local, align 4
  %v0_13b24 = load i32, i32* %r2.global-to-local, align 4
  %v1_13b24 = add i32 %v0_13b24, -8
  store i32 %v1_13b24, i32* %r2.global-to-local, align 4
  %v5_13b2c = icmp slt i32 %v1_13b24, 8
  br i1 %v5_13b2c, label %dec_label_pc_13b20.dec_label_pc_13b58.loopexit_crit_edge, label %dec_label_pc_13b30

dec_label_pc_13b20.dec_label_pc_13b58.loopexit_crit_edge: ; preds = %dec_label_pc_13b18.dec_label_pc_13b20_crit_edge, %dec_label_pc_13b20.preheader
  %v1_13b24.lcssa = phi i32 [ %v1_13b2452, %dec_label_pc_13b20.preheader ], [ %v1_13b24, %dec_label_pc_13b18.dec_label_pc_13b20_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13b58

dec_label_pc_13b18.dec_label_pc_13b58.loopexit_crit_edge: ; preds = %dec_label_pc_13b18
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13b58

dec_label_pc_13b30.dec_label_pc_13b58.loopexit_crit_edge: ; preds = %dec_label_pc_13b30
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13b58

dec_label_pc_13b40.dec_label_pc_13b58.loopexit_crit_edge: ; preds = %dec_label_pc_13b40
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13b58

dec_label_pc_13b58:                               ; preds = %dec_label_pc_13b14, %dec_label_pc_13b20.dec_label_pc_13b58.loopexit_crit_edge, %dec_label_pc_13b18.dec_label_pc_13b58.loopexit_crit_edge, %dec_label_pc_13b30.dec_label_pc_13b58.loopexit_crit_edge, %dec_label_pc_13b40.dec_label_pc_13b58.loopexit_crit_edge, %dec_label_pc_13af0
  %v0_13b60 = phi i32 [ %v0_13af4, %dec_label_pc_13af0 ], [ %v1_13b44, %dec_label_pc_13b40.dec_label_pc_13b58.loopexit_crit_edge ], [ %v1_13b34, %dec_label_pc_13b30.dec_label_pc_13b58.loopexit_crit_edge ], [ %v7_13b50, %dec_label_pc_13b18.dec_label_pc_13b58.loopexit_crit_edge ], [ %v1_13b24.lcssa, %dec_label_pc_13b20.dec_label_pc_13b58.loopexit_crit_edge ], [ %v0_13b18.pr, %dec_label_pc_13b14 ]
  %v2_13b58 = icmp eq i32 %v0_13b60, 0
  store i1 %v2_13b58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13b58, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_13b58
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_13b58
  %v1_13b60 = sub i32 7, %v0_13b60
  store i32 %v1_13b60, i32* %r2.global-to-local, align 4
  %v3_13b64 = mul i32 %v1_13b60, 4
  %v4_13b64 = add i32 %v3_13b64, ptrtoint (i32* @global_var_13b6c.605 to i32)
  call void @__pseudo_branch(i32 %v4_13b64)
  %v0_13b6c = load i32, i32* %r1.global-to-local, align 4
  %v1_13b6c = trunc i32 %v0_13b6c to i8
  %v2_13b6c = load i32, i32* %r3.global-to-local, align 4
  %v3_13b6c = inttoptr i32 %v2_13b6c to i8*
  store i8 %v1_13b6c, i8* %v3_13b6c, align 1
  %v4_13b6c = load i32, i32* %r3.global-to-local, align 4
  %v5_13b6c = add i32 %v4_13b6c, 1
  store i32 %v5_13b6c, i32* %r3.global-to-local, align 4
  %v0_13b70 = load i32, i32* %r1.global-to-local, align 4
  %v1_13b70 = trunc i32 %v0_13b70 to i8
  %v3_13b70 = inttoptr i32 %v5_13b6c to i8*
  store i8 %v1_13b70, i8* %v3_13b70, align 1
  %v4_13b70 = load i32, i32* %r3.global-to-local, align 4
  %v5_13b70 = add i32 %v4_13b70, 1
  store i32 %v5_13b70, i32* %r3.global-to-local, align 4
  %v0_13b74 = load i32, i32* %r1.global-to-local, align 4
  %v1_13b74 = trunc i32 %v0_13b74 to i8
  %v3_13b74 = inttoptr i32 %v5_13b70 to i8*
  store i8 %v1_13b74, i8* %v3_13b74, align 1
  %v4_13b74 = load i32, i32* %r3.global-to-local, align 4
  %v5_13b74 = add i32 %v4_13b74, 1
  store i32 %v5_13b74, i32* %r3.global-to-local, align 4
  %v0_13b78 = load i32, i32* %r1.global-to-local, align 4
  %v1_13b78 = trunc i32 %v0_13b78 to i8
  %v3_13b78 = inttoptr i32 %v5_13b74 to i8*
  store i8 %v1_13b78, i8* %v3_13b78, align 1
  %v4_13b78 = load i32, i32* %r3.global-to-local, align 4
  %v5_13b78 = add i32 %v4_13b78, 1
  store i32 %v5_13b78, i32* %r3.global-to-local, align 4
  %v0_13b7c = load i32, i32* %r1.global-to-local, align 4
  %v1_13b7c = trunc i32 %v0_13b7c to i8
  %v3_13b7c = inttoptr i32 %v5_13b78 to i8*
  store i8 %v1_13b7c, i8* %v3_13b7c, align 1
  %v4_13b7c = load i32, i32* %r3.global-to-local, align 4
  %v5_13b7c = add i32 %v4_13b7c, 1
  store i32 %v5_13b7c, i32* %r3.global-to-local, align 4
  %v0_13b80 = load i32, i32* %r1.global-to-local, align 4
  %v1_13b80 = trunc i32 %v0_13b80 to i8
  %v3_13b80 = inttoptr i32 %v5_13b7c to i8*
  store i8 %v1_13b80, i8* %v3_13b80, align 1
  %v4_13b80 = load i32, i32* %r3.global-to-local, align 4
  %v5_13b80 = add i32 %v4_13b80, 1
  store i32 %v5_13b80, i32* %r3.global-to-local, align 4
  %v0_13b84 = load i32, i32* %r1.global-to-local, align 4
  %v1_13b84 = trunc i32 %v0_13b84 to i8
  %v3_13b84 = inttoptr i32 %v5_13b80 to i8*
  store i8 %v1_13b84, i8* %v3_13b84, align 1
  %v4_13b84 = load i32, i32* %r3.global-to-local, align 4
  %v5_13b84 = add i32 %v4_13b84, 1
  store i32 %v5_13b84, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_13b20, { 1, 0 }
  uselistorder i32 %v12_13b4c, { 1, 2, 0 }
  uselistorder i32 %v0_13b2054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_13b18.pr, { 0, 2, 1 }
  uselistorder i32 %v6_13b08, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_13afc, { 1, 0 }
  uselistorder i32 %v0_13af4, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 9, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 2, 1, 3, 0, 4, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_13b58, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_13b30, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_13b90(i32 %arg1) local_unnamed_addr {
dec_label_pc_13b90:
  %stack_var_-8 = alloca i32, align 4
  %v2_13b94 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_13b94, i32* @r1, align 4
  %v0_13b9c = call i32 @function_15ba0()
  %v2_13ba0 = icmp eq i32 %v0_13b9c, 0
  br i1 %v2_13ba0, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_13b90
  %v3_13ba8 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_13b90, %bb
  %v5_13bb0 = phi i32 [ -1, %dec_label_pc_13b90 ], [ %v3_13ba8, %bb ]
  ret i32 %v5_13bb0

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_13bb4(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13bb4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13bb4 = load i32, i32* @r4, align 4
  store i32 %v3_13bb4, i32* %stack_var_-8, align 4
  %v5_13bb8 = inttoptr i32 %arg3 to i32*
  %v6_13bb8 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_13bb8)
  store i32 %v6_13bb8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_13bb8, -4095
  br i1 %tmp, label %dec_label_pc_13bd8, label %dec_label_pc_13bc8

dec_label_pc_13bc8:                               ; preds = %dec_label_pc_13bb4
  %v0_13bc8 = call i32 @function_13a84()
  %v0_13bcc = load i32, i32* %r4.global-to-local, align 4
  %v1_13bcc = sub i32 0, %v0_13bcc
  %v2_13bd0 = inttoptr i32 %v0_13bc8 to i32*
  store i32 %v1_13bcc, i32* %v2_13bd0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13bd8

dec_label_pc_13bd8:                               ; preds = %dec_label_pc_13bb4, %dec_label_pc_13bc8
  %v0_13bd8 = phi i32 [ %v6_13bb8, %dec_label_pc_13bb4 ], [ -1, %dec_label_pc_13bc8 ]
  %v2_13bdc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13bdc, i32* @r4, align 4
  ret i32 %v0_13bd8

; uselistorder directives
  uselistorder i32 %v6_13bb8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13bd8, { 1, 0 }
}

define i32 @function_13be0(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13be0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13be0 = load i32, i32* @r4, align 4
  store i32 %v3_13be0, i32* %stack_var_-8, align 4
  %v5_13be4 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_13be4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13be4, -4095
  br i1 %tmp, label %dec_label_pc_13c04, label %dec_label_pc_13bf4

dec_label_pc_13bf4:                               ; preds = %dec_label_pc_13be0
  %v0_13bf4 = call i32 @function_13a84()
  %v0_13bf8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13bf8 = sub i32 0, %v0_13bf8
  %v2_13bfc = inttoptr i32 %v0_13bf4 to i32*
  store i32 %v1_13bf8, i32* %v2_13bfc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c04

dec_label_pc_13c04:                               ; preds = %dec_label_pc_13be0, %dec_label_pc_13bf4
  %v0_13c04 = phi i32 [ %v5_13be4, %dec_label_pc_13be0 ], [ -1, %dec_label_pc_13bf4 ]
  %v2_13c08 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13c08, i32* @r4, align 4
  ret i32 %v0_13c04

; uselistorder directives
  uselistorder i32 %v5_13be4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13c04, { 1, 0 }
}

define i32 @function_13c0c(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13c0c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13c0c = load i32, i32* @r4, align 4
  store i32 %v3_13c0c, i32* %stack_var_-8, align 4
  %v5_13c10 = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_13c10, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13c10, -4095
  br i1 %tmp, label %dec_label_pc_13c30, label %dec_label_pc_13c20

dec_label_pc_13c20:                               ; preds = %dec_label_pc_13c0c
  %v0_13c20 = call i32 @function_13a84()
  %v0_13c24 = load i32, i32* %r4.global-to-local, align 4
  %v1_13c24 = sub i32 0, %v0_13c24
  %v2_13c28 = inttoptr i32 %v0_13c20 to i32*
  store i32 %v1_13c24, i32* %v2_13c28, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c30

dec_label_pc_13c30:                               ; preds = %dec_label_pc_13c0c, %dec_label_pc_13c20
  %v0_13c30 = phi i32 [ %v5_13c10, %dec_label_pc_13c0c ], [ -1, %dec_label_pc_13c20 ]
  %v2_13c34 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13c34, i32* @r4, align 4
  ret i32 %v0_13c30

; uselistorder directives
  uselistorder i32 %v5_13c10, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13c30, { 1, 0 }
}

define i32 @function_13c38(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13c38:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13c38 = load i32, i32* @r4, align 4
  store i32 %v3_13c38, i32* %stack_var_-8, align 4
  %v5_13c3c = inttoptr i32 %arg3 to i32*
  %v6_13c3c = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_13c3c)
  store i32 %v6_13c3c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_13c3c, -4095
  br i1 %tmp, label %dec_label_pc_13c5c, label %dec_label_pc_13c4c

dec_label_pc_13c4c:                               ; preds = %dec_label_pc_13c38
  %v0_13c4c = call i32 @function_13a84()
  %v0_13c50 = load i32, i32* %r4.global-to-local, align 4
  %v1_13c50 = sub i32 0, %v0_13c50
  %v2_13c54 = inttoptr i32 %v0_13c4c to i32*
  store i32 %v1_13c50, i32* %v2_13c54, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c5c

dec_label_pc_13c5c:                               ; preds = %dec_label_pc_13c38, %dec_label_pc_13c4c
  %v0_13c5c = phi i32 [ %v6_13c3c, %dec_label_pc_13c38 ], [ -1, %dec_label_pc_13c4c ]
  %v2_13c60 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13c60, i32* @r4, align 4
  ret i32 %v0_13c5c

; uselistorder directives
  uselistorder i32 %v6_13c3c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13c5c, { 1, 0 }
}

define i32 @function_13c64(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13c64:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13c64 = load i32, i32* @r4, align 4
  store i32 %v3_13c64, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13c6c = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_13c6c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13c6c, -4095
  br i1 %tmp, label %dec_label_pc_13c8c, label %dec_label_pc_13c7c

dec_label_pc_13c7c:                               ; preds = %dec_label_pc_13c64
  %v0_13c7c = call i32 @function_13a84()
  %v0_13c80 = load i32, i32* %r4.global-to-local, align 4
  %v1_13c80 = sub i32 0, %v0_13c80
  %v2_13c84 = inttoptr i32 %v0_13c7c to i32*
  store i32 %v1_13c80, i32* %v2_13c84, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c8c

dec_label_pc_13c8c:                               ; preds = %dec_label_pc_13c64, %dec_label_pc_13c7c
  %v0_13c8c = phi i32 [ %v5_13c6c, %dec_label_pc_13c64 ], [ -1, %dec_label_pc_13c7c ]
  %v2_13c90 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13c90, i32* @r4, align 4
  ret i32 %v0_13c8c

; uselistorder directives
  uselistorder i32 %v5_13c6c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13c8c, { 1, 0 }
}

define i32 @function_13c94(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13c94:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13c94 = load i32, i32* @r4, align 4
  store i32 %v3_13c94, i32* %stack_var_-8, align 4
  %v2_13c98 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_13c98, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_13c98, -4095
  br i1 %tmp, label %dec_label_pc_13cb8, label %dec_label_pc_13ca8

dec_label_pc_13ca8:                               ; preds = %dec_label_pc_13c94
  %v0_13ca8 = call i32 @function_13a84()
  %v0_13cac = load i32, i32* %r4.global-to-local, align 4
  %v1_13cac = sub i32 0, %v0_13cac
  %v2_13cb0 = inttoptr i32 %v0_13ca8 to i32*
  store i32 %v1_13cac, i32* %v2_13cb0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13cb8

dec_label_pc_13cb8:                               ; preds = %dec_label_pc_13c94, %dec_label_pc_13ca8
  %v0_13cb8 = phi i32 [ %v2_13c98, %dec_label_pc_13c94 ], [ -1, %dec_label_pc_13ca8 ]
  %v2_13cbc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13cbc, i32* @r4, align 4
  ret i32 %v0_13cb8

; uselistorder directives
  uselistorder i32 %v2_13c98, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13cb8, { 1, 0 }
}

define i32 @function_13cc0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13cc0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13cc0 = load i32, i32* @r4, align 4
  store i32 %v3_13cc0, i32* %stack_var_-8, align 4
  %v5_13cc4 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_13cc4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13cc4, -4095
  br i1 %tmp, label %dec_label_pc_13ce4, label %dec_label_pc_13cd4

dec_label_pc_13cd4:                               ; preds = %dec_label_pc_13cc0
  %v0_13cd4 = call i32 @function_13a84()
  %v0_13cd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13cd8 = sub i32 0, %v0_13cd8
  %v2_13cdc = inttoptr i32 %v0_13cd4 to i32*
  store i32 %v1_13cd8, i32* %v2_13cdc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13ce4

dec_label_pc_13ce4:                               ; preds = %dec_label_pc_13cc0, %dec_label_pc_13cd4
  %v0_13ce4 = phi i32 [ %v5_13cc4, %dec_label_pc_13cc0 ], [ -1, %dec_label_pc_13cd4 ]
  %v2_13ce8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13ce8, i32* @r4, align 4
  ret i32 %v0_13ce4

; uselistorder directives
  uselistorder i32 %v5_13cc4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13ce4, { 1, 0 }
}

define i32 @function_13cec(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13cec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13cec = load i32, i32* @r4, align 4
  store i32 %v3_13cec, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13cf8 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_13cf8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13cf8, -4095
  br i1 %tmp, label %dec_label_pc_13d18, label %dec_label_pc_13d08

dec_label_pc_13d08:                               ; preds = %dec_label_pc_13cec
  %v0_13d08 = call i32 @function_13a84()
  %v0_13d0c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d0c = sub i32 0, %v0_13d0c
  %v2_13d10 = inttoptr i32 %v0_13d08 to i32*
  store i32 %v1_13d0c, i32* %v2_13d10, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d18

dec_label_pc_13d18:                               ; preds = %dec_label_pc_13cec, %dec_label_pc_13d08
  %v0_13d18 = phi i32 [ %v5_13cf8, %dec_label_pc_13cec ], [ -1, %dec_label_pc_13d08 ]
  %v2_13d1c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13d1c, i32* @r4, align 4
  ret i32 %v0_13d18

; uselistorder directives
  uselistorder i32 %v5_13cf8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d18, { 1, 0 }
}

define i32 @function_13d20(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13d20:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d20 = load i32, i32* @r4, align 4
  store i32 %v3_13d20, i32* %stack_var_-8, align 4
  %v5_13d24 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_13d24, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13d24, -4095
  br i1 %tmp, label %dec_label_pc_13d44, label %dec_label_pc_13d34

dec_label_pc_13d34:                               ; preds = %dec_label_pc_13d20
  %v0_13d34 = call i32 @function_13a84()
  %v0_13d38 = load i32, i32* %r4.global-to-local, align 4
  %v1_13d38 = sub i32 0, %v0_13d38
  %v2_13d3c = inttoptr i32 %v0_13d34 to i32*
  store i32 %v1_13d38, i32* %v2_13d3c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d44

dec_label_pc_13d44:                               ; preds = %dec_label_pc_13d20, %dec_label_pc_13d34
  %v0_13d44 = phi i32 [ %v5_13d24, %dec_label_pc_13d20 ], [ -1, %dec_label_pc_13d34 ]
  %v2_13d48 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13d48, i32* @r4, align 4
  ret i32 %v0_13d44

; uselistorder directives
  uselistorder i32 %v5_13d24, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d44, { 1, 0 }
}

define i32 @function_13d4c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_13d4c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13d58 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_13d58, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13d58, -4095
  br i1 %tmp, label %dec_label_pc_13d78, label %dec_label_pc_13d68

dec_label_pc_13d68:                               ; preds = %dec_label_pc_13d4c
  %v0_13d68 = call i32 @function_13a84()
  %v0_13d6c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d6c = sub i32 0, %v0_13d6c
  %v2_13d70 = inttoptr i32 %v0_13d68 to i32*
  store i32 %v1_13d6c, i32* %v2_13d70, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13d78

dec_label_pc_13d78:                               ; preds = %dec_label_pc_13d4c, %dec_label_pc_13d68
  %v0_13d78 = phi i32 [ %v5_13d58, %dec_label_pc_13d4c ], [ -1, %dec_label_pc_13d68 ]
  ret i32 %v0_13d78

; uselistorder directives
  uselistorder i32 %v5_13d58, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13d78, { 1, 0 }
}

define i32 @function_13d80(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_13d80:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13d80 = load i32, i32* @r4, align 4
  store i32 %v3_13d80, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_13d88 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_13d88, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13d88, -4095
  br i1 %tmp, label %dec_label_pc_13da8, label %dec_label_pc_13d98

dec_label_pc_13d98:                               ; preds = %dec_label_pc_13d80
  %v0_13d98 = call i32 @function_13a84()
  %v0_13d9c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d9c = sub i32 0, %v0_13d9c
  %v2_13da0 = inttoptr i32 %v0_13d98 to i32*
  store i32 %v1_13d9c, i32* %v2_13da0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13da8

dec_label_pc_13da8:                               ; preds = %dec_label_pc_13d80, %dec_label_pc_13d98
  %v0_13da8 = phi i32 [ %v5_13d88, %dec_label_pc_13d80 ], [ -1, %dec_label_pc_13d98 ]
  %v2_13dac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13dac, i32* @r4, align 4
  ret i32 %v0_13da8

; uselistorder directives
  uselistorder i32 %v5_13d88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13da8, { 1, 0 }
}

define i32 @function_13db0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13db0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13db0 = load i32, i32* @r4, align 4
  store i32 %v3_13db0, i32* %stack_var_-8, align 4
  %v3_13db4 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_13db4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_13db4, -4095
  br i1 %tmp, label %dec_label_pc_13dd4, label %dec_label_pc_13dc4

dec_label_pc_13dc4:                               ; preds = %dec_label_pc_13db0
  %v0_13dc4 = call i32 @function_13a84()
  %v0_13dc8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13dc8 = sub i32 0, %v0_13dc8
  %v2_13dcc = inttoptr i32 %v0_13dc4 to i32*
  store i32 %v1_13dc8, i32* %v2_13dcc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13dd4

dec_label_pc_13dd4:                               ; preds = %dec_label_pc_13db0, %dec_label_pc_13dc4
  %v0_13dd4 = phi i32 [ %v3_13db4, %dec_label_pc_13db0 ], [ -1, %dec_label_pc_13dc4 ]
  %v2_13dd8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13dd8, i32* @r4, align 4
  ret i32 %v0_13dd4

; uselistorder directives
  uselistorder i32 %v3_13db4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13dd4, { 1, 0 }
}

define i32 @function_13ddc(i32 %arg1) local_unnamed_addr {
dec_label_pc_13ddc:
  %v3_13ddc = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_13de4 = call i32 @function_13508()
  %v0_13de8 = load i32, i32* @r4, align 4
  store i32 %v3_13ddc, i32* @r4, align 4
  %v2_13df0 = call i32 @function_135b0(i32 %v0_13de4, i32 %v0_13de8)
  ret i32 %v2_13df0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_135b0, { 14, 15, 13, 12, 11, 10, 9, 16, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @function_13508, { 0, 1, 3, 2 }
}

define i32 @function_13df4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13df4:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_13e10, label %dec_label_pc_13e00

dec_label_pc_13e00:                               ; preds = %dec_label_pc_13df4
  %v8_13e04 = icmp sgt i32 %arg1, 64
  br i1 %v8_13e04, label %dec_label_pc_13e10, label %dec_label_pc_13e08

dec_label_pc_13e08:                               ; preds = %dec_label_pc_13e00
  %v0_13e0c = call i32 @function_13f18()
  br label %dec_label_pc_13e10

dec_label_pc_13e10:                               ; preds = %dec_label_pc_13e00, %dec_label_pc_13df4, %dec_label_pc_13e08
  %v0_13e10 = call i32 @function_13a84()
  %v2_13e18 = inttoptr i32 %v0_13e10 to i32*
  store i32 22, i32* %v2_13e18, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13e10, { 2, 0, 1 }
}

define i32 @function_13e24(i32 %arg1) local_unnamed_addr {
dec_label_pc_13e24:
  store i32 128, i32* @r2, align 4
  %v0_13e30 = load i32, i32* @r0, align 4
  %v2_13e30 = inttoptr i32 %v0_13e30 to i8*
  %v3_13e30 = call i32 @function_13af0(i8* %v2_13e30, i32 0)
  ret i32 0
}

define i32 @function_13e3c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13e3c:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13e3c = load i32, i32* @r4, align 4
  store i32 %v3_13e3c, i32* %stack_var_-12, align 4
  %v6_13e3c = load i32, i32* @r5, align 4
  %v10_13e3c = ptrtoint i32* %stack_var_-12 to i32
  %v7_13e40 = icmp eq i32 %arg2, -1
  %v0_13e4c.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_13e40, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_13e3c
  br label %dec_label_pc_13e64

bb:                                               ; preds = %dec_label_pc_13e3c
  %v2_13e48 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_13e4c.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_13e4c.pre, 1
  br i1 %tmp19, label %dec_label_pc_13e64, label %dec_label_pc_13e54

dec_label_pc_13e54:                               ; preds = %bb
  %v7_13e58 = icmp sgt i32 %v0_13e4c.pre, 64
  br i1 %v7_13e58, label %dec_label_pc_13e64, label %bb20

bb20:                                             ; preds = %dec_label_pc_13e54
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_13e8824 = add i32 %v10_13e3c, 124
  br label %dec_label_pc_13e78

dec_label_pc_13e64:                               ; preds = %.thread, %dec_label_pc_13e54, %bb
  %v0_13e64 = call i32 @function_13a84()
  store i32 %v0_13e64, i32* %r0.global-to-local, align 4
  store i32 -1, i32* @r2, align 4
  %v2_13e70 = inttoptr i32 %v0_13e64 to i32*
  store i32 22, i32* %v2_13e70, align 4
  %v0_13ee4.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_13ee4

dec_label_pc_13e78:                               ; preds = %bb20, %dec_label_pc_13e78
  %v5_13e8825 = phi i32 [ %v5_13e8824, %bb20 ], [ %v5_13e88, %dec_label_pc_13e78 ]
  %v2_13e7c = add i32 %v5_13e8825, -136
  %v3_13e7c = inttoptr i32 %v2_13e7c to i32*
  store i32 0, i32* %v3_13e7c, align 4
  %v0_13e80.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_13e80 = add i32 %v0_13e80.pre, -1
  store i32 %v1_13e80, i32* %r0.global-to-local, align 4
  %v6_13e80 = icmp slt i32 %v1_13e80, 0
  %v4_13e88 = mul i32 %v1_13e80, 4
  %v5_13e88 = add i32 %v4_13e88, %v10_13e3c
  br i1 %v6_13e80, label %dec_label_pc_13e90, label %dec_label_pc_13e78

dec_label_pc_13e90:                               ; preds = %dec_label_pc_13e78
  %v2_13e90 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_13e90, i32* @r5, align 4
  %v2_13e94 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_13e94, i32* @r0, align 4
  %v0_13e98 = load i32, i32* @r4, align 4
  store i32 %v0_13e98, i32* @r1, align 4
  %v0_13e9c = call i32 @function_13f18()
  store i32 %v0_13e9c, i32* %r0.global-to-local, align 4
  %v1_13ea0 = icmp slt i32 %v0_13e9c, 0
  br i1 %v1_13ea0, label %dec_label_pc_13ee0, label %dec_label_pc_13ea8

dec_label_pc_13ea8:                               ; preds = %dec_label_pc_13e90
  %v0_13ea8 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1ecc8.607 to i32), i32* %r0.global-to-local, align 4
  %v2_13eb0 = call i32 @function_13ef4(i32 ptrtoint (i32* @global_var_1ecc8.607 to i32), i32 %v0_13ea8)
  %v0_13ec8 = load i32, i32* @r4, align 4
  store i32 %v0_13ec8, i32* %r0.global-to-local, align 4
  %v4_13ed0 = call i32 @function_14de0(i32 %v0_13ec8, i32* nonnull %stack_var_-152, i32 %v2_13e48)
  store i32 %v4_13ed0, i32* %r0.global-to-local, align 4
  %v1_13ed4 = icmp slt i32 %v4_13ed0, 0
  br i1 %v1_13ed4, label %dec_label_pc_13ee0, label %bb23

bb23:                                             ; preds = %dec_label_pc_13ea8
  %v5_13ed8 = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_13ed8, i32* @r2, align 4
  br label %dec_label_pc_13ee4

dec_label_pc_13ee0:                               ; preds = %dec_label_pc_13ea8, %dec_label_pc_13e90
  store i32 -1, i32* @r2, align 4
  br label %dec_label_pc_13ee4

dec_label_pc_13ee4:                               ; preds = %bb23, %dec_label_pc_13e64, %dec_label_pc_13ee0
  %v0_13ee4 = phi i32 [ %v5_13ed8, %bb23 ], [ %v0_13ee4.pre, %dec_label_pc_13e64 ], [ -1, %dec_label_pc_13ee0 ]
  store i32 %v0_13ee4, i32* %r0.global-to-local, align 4
  %v2_13eec = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13eec, i32* @r4, align 4
  store i32 %v6_13e3c, i32* @r5, align 4
  ret i32 %v0_13ee4

; uselistorder directives
  uselistorder i32 %v0_13ee4, { 1, 0 }
  uselistorder i32 %v1_13e80, { 0, 2, 1 }
  uselistorder i32 %v0_13e4c.pre, { 1, 0, 2 }
  uselistorder i32 %v10_13e3c, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_13ee4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13e78, { 1, 0 }
  uselistorder label %dec_label_pc_13e64, { 1, 2, 0 }
}

define i32 @function_13ef4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13ef4:
  %v1_13ef4 = add i32 %arg2, -1
  %v3_13ef8 = udiv i32 %v1_13ef4, 32
  %v4_13efc = mul nuw nsw i32 %v3_13ef8, 4
  %v5_13efc = add i32 %v4_13efc, %arg1
  %v6_13efc = inttoptr i32 %v5_13efc to i32*
  %v7_13efc = load i32, i32* %v6_13efc, align 4
  %v1_13f00 = urem i32 %v1_13ef4, 32
  %v7_13f08 = shl i32 1, %v1_13f00
  %v8_13f08 = and i32 %v7_13efc, %v7_13f08
  %v10_13f08 = icmp ne i32 %v8_13f08, 0
  %. = zext i1 %v10_13f08 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_13ef4, { 1, 0 }
}

define i32 @function_13f18() local_unnamed_addr {
dec_label_pc_13f18:
  %v0_13f18 = load i32, i32* @r1, align 4
  %v1_13f18 = add i32 %v0_13f18, -1
  %v3_13f1c = udiv i32 %v1_13f18, 32
  store i32 %v3_13f1c, i32* @ip, align 4
  %v0_13f20 = load i32, i32* @r0, align 4
  %v4_13f20 = mul nuw nsw i32 %v3_13f1c, 4
  %v5_13f20 = add i32 %v0_13f20, %v4_13f20
  %v6_13f20 = inttoptr i32 %v5_13f20 to i32*
  %v7_13f20 = load i32, i32* %v6_13f20, align 4
  %v1_13f24 = urem i32 %v1_13f18, 32
  %v7_13f2c = shl i32 1, %v1_13f24
  %v8_13f2c = or i32 %v7_13f20, %v7_13f2c
  store i32 %v8_13f2c, i32* %v6_13f20, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_13f1c, { 1, 0 }
  uselistorder i32 %v1_13f18, { 1, 0 }
}

define i32 @function_13f3c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13f3c:
  %v1_13f3c = add i32 %arg2, -1
  %v3_13f40 = udiv i32 %v1_13f3c, 32
  %v4_13f44 = mul nuw nsw i32 %v3_13f40, 4
  %v5_13f44 = add i32 %v4_13f44, %arg1
  %v6_13f44 = inttoptr i32 %v5_13f44 to i32*
  %v7_13f44 = load i32, i32* %v6_13f44, align 4
  %v1_13f48 = urem i32 %v1_13f3c, 32
  %tmp = shl i32 -1, %v1_13f48
  %v8_13f50 = add i32 %tmp, -1
  %v9_13f50 = and i32 %v7_13f44, %v8_13f50
  store i32 %v9_13f50, i32* %v6_13f44, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_13f3c, { 1, 0 }
}

define i32 @function_13f60(i32 %arg1) local_unnamed_addr {
dec_label_pc_13f60:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13f60 = load i32, i32* @r4, align 4
  %v6_13f60 = load i32, i32* @r5, align 4
  %v9_13f60 = load i32, i32* @r6, align 4
  %v0_13f64 = load i32, i32* %r0.global-to-local, align 4
  %v2_13f64 = icmp eq i32 %v0_13f64, 0
  %v2_13f68 = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_13f64, label %bb, label %dec_label_pc_13f74

bb:                                               ; preds = %dec_label_pc_13f60
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13f7c

dec_label_pc_13f74:                               ; preds = %dec_label_pc_13f60
  %tmp = icmp ugt i32 %v0_13f64, -8
  br i1 %tmp, label %dec_label_pc_14080, label %dec_label_pc_13f7c

dec_label_pc_13f7c:                               ; preds = %bb, %dec_label_pc_13f74
  %v0_13f7c = phi i32 [ %v0_13f64, %dec_label_pc_13f74 ], [ 1, %bb ]
  %v1_13f7c = add i32 %v0_13f7c, 4
  store i32 %v1_13f7c, i32* %stack_var_-20, align 4
  store i32 %v2_13f68, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1eab8.609 to i32), i32* %r0.global-to-local, align 4
  %v1_13f94 = call i32 @function_14af4()
  store i32 ptrtoint (i32** @global_var_1e8e0.613 to i32), i32* %r0.global-to-local, align 4
  %v3_13fa0 = call i32 @function_14314(i32* bitcast (i32** @global_var_1e8e0.613 to i32*), i32 %v2_13f68)
  store i32 %v3_13fa0, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1eab8.609 to i32), i32* %r0.global-to-local, align 4
  store i32 81848, i32* @lr, align 4
  %v1_13fb4 = call i32 @function_14af4()
  store i32 %v1_13fb4, i32* %r0.global-to-local, align 4
  %v2_13fb8 = icmp eq i32 %v3_13fa0, 0
  br i1 %v2_13fb8, label %dec_label_pc_13fc0, label %dec_label_pc_14070

dec_label_pc_13fc0:                               ; preds = %dec_label_pc_13f7c
  %v2_13fc4 = load i32, i32* @global_var_1eae0.616, align 4
  store i32 %v2_13fc4, i32* @r4, align 4
  %v2_13fc8 = load i32, i32* %stack_var_-20, align 4
  %v3_13fcc = icmp ult i32 %v2_13fc8, %v2_13fc4
  br i1 %v3_13fcc, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_13fc0
  %v3_13fd0 = add i32 %v2_13fc4, -1
  %v2_13fd4 = add i32 %v3_13fd0, %v2_13fc8
  %v2_13fd8 = sub i32 0, %v2_13fc4
  %v3_13fdc = and i32 %v2_13fd4, %v2_13fd8
  store i32 %v3_13fdc, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_13fc0, %bb14
  store i32 ptrtoint (i32* @global_var_1ed48.618 to i32), i32* %r0.global-to-local, align 4
  %v1_13fe8 = call i32 @function_14af4()
  %v0_13fec = load i32, i32* @r4, align 4
  store i32 %v0_13fec, i32* %r0.global-to-local, align 4
  %v1_13ff0 = call i32 @function_152a8(i32 %v0_13fec)
  store i32 %v1_13ff0, i32* %r0.global-to-local, align 4
  %v7_13ff4 = icmp eq i32 %v1_13ff0, -1
  br i1 %v7_13ff4, label %bb15, label %dec_label_pc_14000

bb15:                                             ; preds = %.thread3
  store i32 %v1_13ff0, i32* @r5, align 4
  br label %dec_label_pc_14014

dec_label_pc_14000:                               ; preds = %.thread3
  %v1_14000 = add i32 %v1_13ff0, 3
  %v1_14004 = and i32 %v1_14000, -4
  store i32 %v1_14004, i32* @r5, align 4
  %v9_14008 = icmp eq i32 %v1_14004, %v1_13ff0
  br i1 %v9_14008, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_14000
  %v3_1400c = sub i32 %v1_14004, %v1_13ff0
  store i32 %v3_1400c, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_14000, %bb16
  %v1_14010 = xor i1 %v9_14008, true
  call void @__pseudo_cond_branch(i1 %v1_14010, i32 ptrtoint (i32* @global_var_152a8.619 to i32))
  br label %dec_label_pc_14014

dec_label_pc_14014:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1ed48.618 to i32), i32* %r0.global-to-local, align 4
  store i32 81956, i32* @lr, align 4
  %v1_14020 = call i32 @function_14af4()
  store i32 %v1_14020, i32* %r0.global-to-local, align 4
  %v0_14024 = load i32, i32* @r5, align 4
  %v7_14024 = icmp eq i32 %v0_14024, -1
  br i1 %v7_14024, label %dec_label_pc_14080, label %dec_label_pc_1402c

dec_label_pc_1402c:                               ; preds = %dec_label_pc_14014
  store i32 ptrtoint (i32* @global_var_1eab8.609 to i32), i32* %r0.global-to-local, align 4
  %v1_14038 = call i32 @function_14af4()
  %v0_1403c = load i32, i32* @r4, align 4
  %v0_14040 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1e8e0.613 to i32), i32* %r0.global-to-local, align 4
  %v4_14048 = call i32 @function_14468(i32* bitcast (i32** @global_var_1e8e0.613 to i32*), i32 %v0_14040, i32 %v0_1403c)
  store i32 ptrtoint (i32** @global_var_1e8e0.613 to i32), i32* %r0.global-to-local, align 4
  %v3_14054 = call i32 @function_14314(i32* bitcast (i32** @global_var_1e8e0.613 to i32*), i32 %v2_13f68)
  store i32 %v3_14054, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1eab8.609 to i32), i32* %r0.global-to-local, align 4
  store i32 82024, i32* @lr, align 4
  %v1_14064 = call i32 @function_14af4()
  store i32 %v1_14064, i32* %r0.global-to-local, align 4
  %v2_14068 = icmp eq i32 %v3_14054, 0
  br i1 %v2_14068, label %dec_label_pc_14080, label %dec_label_pc_14070

dec_label_pc_14070:                               ; preds = %dec_label_pc_13f7c, %dec_label_pc_1402c
  %v1_14074 = phi i32 [ %v3_13fa0, %dec_label_pc_13f7c ], [ %v3_14054, %dec_label_pc_1402c ]
  %v2_14070 = load i32, i32* %stack_var_-20, align 4
  %v2_14074 = inttoptr i32 %v1_14074 to i32*
  store i32 %v2_14070, i32* %v2_14074, align 4
  %v3_14074 = load i32, i32* %r4.global-to-local, align 4
  %v4_14074 = add i32 %v3_14074, 4
  store i32 %v4_14074, i32* %r4.global-to-local, align 4
  %v2_14078 = icmp eq i32 %v4_14074, 0
  br i1 %v2_14078, label %dec_label_pc_14080, label %dec_label_pc_14090

dec_label_pc_14080:                               ; preds = %dec_label_pc_14070, %dec_label_pc_1402c, %dec_label_pc_14014, %dec_label_pc_13f74
  %v0_14080 = call i32 @function_13a84()
  store i32 %v0_14080, i32* %r0.global-to-local, align 4
  %v2_14088 = inttoptr i32 %v0_14080 to i32*
  store i32 12, i32* %v2_14088, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14090

dec_label_pc_14090:                               ; preds = %dec_label_pc_14070, %dec_label_pc_14080
  %v0_14090 = phi i32 [ %v4_14074, %dec_label_pc_14070 ], [ 0, %dec_label_pc_14080 ]
  store i32 %v0_14090, i32* %r0.global-to-local, align 4
  store i32 %v3_13f60, i32* @r4, align 4
  store i32 %v6_13f60, i32* @r5, align 4
  store i32 %v9_13f60, i32* @r6, align 4
  ret i32 %v0_14090

; uselistorder directives
  uselistorder i32 %v0_14090, { 1, 0 }
  uselistorder i32 %v3_14054, { 1, 0, 2 }
  uselistorder i32 %v1_14004, { 1, 0, 2 }
  uselistorder i32 %v1_13ff0, { 3, 0, 4, 2, 1, 5 }
  uselistorder i32 %v3_13fa0, { 1, 0, 2 }
  uselistorder i32 %v0_13f64, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 7, 3, 5, 6, 8, 11, 10, 9, 19, 13, 12, 16, 14, 15, 17, 18, 0, 1 }
  uselistorder label %dec_label_pc_14090, { 1, 0 }
  uselistorder label %dec_label_pc_14070, { 1, 0 }
  uselistorder label %dec_label_pc_14014, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_13f7c, { 1, 0 }
}

define i32 @function_140b4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_140b4:
  %stack_var_-12 = alloca i32, align 4
  %v3_140b4 = load i32, i32* @r4, align 4
  store i32 %v3_140b4, i32* %stack_var_-12, align 4
  %v6_140b4 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_140bc = mul i32 %arg2, %arg1
  store i32 %v2_140bc, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_140c0 = icmp eq i32 %arg1, 0
  store i32 %v2_140bc, i32* @r0, align 4
  br i1 %v2_140c0, label %dec_label_pc_140ec, label %dec_label_pc_140cc

dec_label_pc_140cc:                               ; preds = %dec_label_pc_140b4
  %v0_140cc = call i32 @function_130fc()
  %v0_140d0 = load i32, i32* @r5, align 4
  %v9_140d0 = icmp eq i32 %v0_140d0, %v0_140cc
  store i32 0, i32* @r5, align 4
  br i1 %v9_140d0, label %dec_label_pc_140cc.dec_label_pc_140ec_crit_edge, label %dec_label_pc_140dc

dec_label_pc_140cc.dec_label_pc_140ec_crit_edge:  ; preds = %dec_label_pc_140cc
  %v0_140ec.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_140ec

dec_label_pc_140dc:                               ; preds = %dec_label_pc_140cc
  %v0_140dc = call i32 @function_13a84()
  %v2_140e4 = inttoptr i32 %v0_140dc to i32*
  store i32 12, i32* %v2_140e4, align 4
  br label %dec_label_pc_14104

dec_label_pc_140ec:                               ; preds = %dec_label_pc_140cc.dec_label_pc_140ec_crit_edge, %dec_label_pc_140b4
  %v0_140ec = phi i32 [ %v0_140ec.pre, %dec_label_pc_140cc.dec_label_pc_140ec_crit_edge ], [ %v2_140bc, %dec_label_pc_140b4 ]
  %v1_140f0 = call i32 @function_13f60(i32 %v0_140ec)
  store i32 %v1_140f0, i32* @r5, align 4
  store i32 82180, i32* @lr, align 4
  %v1_14100 = icmp ne i32 %v1_140f0, 0
  call void @__pseudo_cond_branch(i1 %v1_14100, i32 ptrtoint (i32* @global_var_13af0.620 to i32))
  br label %dec_label_pc_14104

dec_label_pc_14104:                               ; preds = %dec_label_pc_140dc, %dec_label_pc_140ec
  %v0_14104 = load i32, i32* @r5, align 4
  %v2_14108 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14108, i32* @r4, align 4
  store i32 %v6_140b4, i32* @r5, align 4
  ret i32 %v0_14104

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14104, { 1, 0 }
}

define i32 @function_1410c() local_unnamed_addr {
dec_label_pc_1410c:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_1410c = load i32, i32* @r0, align 4
  %v2_1410c = icmp eq i32 %v0_1410c, 0
  %v3_14110 = load i32, i32* @r4, align 4
  store i32 %v3_14110, i32* %stack_var_-24, align 4
  %v6_14110 = load i32, i32* @r5, align 4
  %v9_14110 = load i32, i32* @r6, align 4
  %v15_14110 = load i32, i32* @r8, align 4
  br i1 %v2_1410c, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_1410c
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_1410c
  %v1_14118 = add i32 %v0_1410c, -4
  %v2_14118 = inttoptr i32 %v1_14118 to i32*
  %v3_14118 = load i32, i32* %v2_14118, align 4
  store i32 %v3_14118, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1e8e0.613 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_14118, i32* @r4, align 4
  %v1_14130 = call i32 @function_14af4()
  %v0_14134 = load i32, i32* @r4, align 4
  %v0_14138 = load i32, i32* @r5, align 4
  %v4_14140 = call i32 @function_14468(i32* bitcast (i32** @global_var_1e8e0.613 to i32*), i32 %v0_14134, i32 %v0_14138)
  %v1_14148 = inttoptr i32 %v4_14140 to i32*
  %v2_14148 = load i32, i32* %v1_14148, align 4
  store i32 %v2_14148, i32* %r6.global-to-local, align 4
  %v2_1414c = load i32, i32* @global_var_1eae0.616, align 4
  %v4_14150 = mul i32 %v2_1414c, 8
  %v6_14150 = icmp ult i32 %v2_14148, %v4_14150
  store i32 %v4_14140, i32* @r4, align 4
  br i1 %v6_14150, label %dec_label_pc_14190, label %dec_label_pc_1415c

dec_label_pc_1415c:                               ; preds = %bb11
  %v1_14164 = call i32 @function_14af4()
  %v1_1416c = call i32 @function_152a8(i32 0)
  %v0_14170 = load i32, i32* @r4, align 4
  %v1_14170 = add i32 %v0_14170, 12
  store i32 %v1_14170, i32* @r5, align 4
  %v9_14174 = icmp eq i32 %v1_14170, %v1_1416c
  br i1 %v9_14174, label %dec_label_pc_14198, label %dec_label_pc_1417c

dec_label_pc_1417c:                               ; preds = %dec_label_pc_1415c
  %v1_14188 = call i32 @function_14af4()
  br label %dec_label_pc_14190

dec_label_pc_14190:                               ; preds = %bb11, %dec_label_pc_1417c, %bb14
  %v2_14190 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14190, i32* @r4, align 4
  store i32 %v6_14110, i32* @r5, align 4
  store i32 %v9_14110, i32* %r6.global-to-local, align 4
  store i32 %v15_14110, i32* %r8.global-to-local, align 4
  %v0_14194 = call i32 @function_14af4()
  %v0_14198.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14198

dec_label_pc_14198:                               ; preds = %dec_label_pc_1415c, %dec_label_pc_14190
  %v1_141a0 = phi i32 [ %v0_14170, %dec_label_pc_1415c ], [ %v0_14198.pre, %dec_label_pc_14190 ]
  %v1_14198 = add i32 %v1_141a0, 4
  %v2_14198 = inttoptr i32 %v1_14198 to i32*
  %v3_14198 = load i32, i32* %v2_14198, align 4
  %v2_1419c = icmp eq i32 %v3_14198, 0
  br i1 %v2_1419c, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_14198
  %v2_141a0 = add i32 %v1_141a0, 8
  %v3_141a0 = inttoptr i32 %v2_141a0 to i32*
  %v4_141a0 = load i32, i32* %v3_141a0, align 4
  %v3_141a4 = add i32 %v3_14198, 8
  %v4_141a4 = inttoptr i32 %v3_141a4 to i32*
  store i32 %v4_141a0, i32* %v4_141a4, align 4
  %v0_141a8.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14198, %bb12
  %v0_141a8 = phi i32 [ %v1_141a0, %dec_label_pc_14198 ], [ %v0_141a8.pre, %bb12 ]
  %v1_141a8 = add i32 %v0_141a8, 8
  %v2_141a8 = inttoptr i32 %v1_141a8 to i32*
  %v3_141a8 = load i32, i32* %v2_141a8, align 4
  %v1_141ac = add i32 %v0_141a8, 4
  %v2_141ac = inttoptr i32 %v1_141ac to i32*
  %v3_141ac = load i32, i32* %v2_141ac, align 4
  %v2_141b0 = icmp eq i32 %v3_141a8, 0
  br i1 %v2_141b0, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_141b4 = add i32 %v3_141a8, 4
  %v4_141b4 = inttoptr i32 %v3_141b4 to i32*
  store i32 %v3_141ac, i32* %v4_141b4, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_141b8 = load i32, i32* %r8.global-to-local, align 4
  %v3_141b8 = inttoptr i32 %v2_141b8 to i32*
  store i32 %v3_141ac, i32* %v3_141b8, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_141c8 = call i32 @function_14af4()
  %v0_141cc = load i32, i32* %r6.global-to-local, align 4
  %v1_141cc = load i32, i32* @r4, align 4
  %v0_141d4 = load i32, i32* @r5, align 4
  %v2_141cc = sub i32 12, %v0_141cc
  %v1_141d0 = add i32 %v2_141cc, %v1_141cc
  %v2_141d4 = sub i32 %v1_141d0, %v0_141d4
  %v1_141d8 = call i32 @function_152a8(i32 %v2_141d4)
  br label %dec_label_pc_14190

; uselistorder directives
  uselistorder i32 %v0_141a8, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_152a8, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_14198, { 1, 0 }
  uselistorder label %dec_label_pc_14190, { 2, 1, 0 }
}

define i32 @function_141fc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_141fc:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_141fc = load i32, i32* @r4, align 4
  store i32 %v3_141fc, i32* %stack_var_-24, align 4
  %v6_141fc = load i32, i32* @r5, align 4
  %v9_141fc = load i32, i32* @r6, align 4
  %v12_141fc = load i32, i32* @r7, align 4
  %v15_141fc = load i32, i32* @r8, align 4
  %v18_141fc = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_14200 = icmp eq i32 %arg2, 0
  %v0_14204 = load i32, i32* @r0, align 4
  store i32 %v0_14204, i32* @r7, align 4
  br i1 %v2_14200, label %dec_label_pc_1420c, label %dec_label_pc_14214

dec_label_pc_1420c:                               ; preds = %dec_label_pc_141fc
  %v0_1420c = call i32 @function_1410c()
  %v0_1421c.pre = load i32, i32* @r4, align 4
  %v2_14220.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_1421c

dec_label_pc_14214:                               ; preds = %dec_label_pc_141fc
  %v2_14214 = icmp eq i32 %v0_14204, 0
  br i1 %v2_14214, label %dec_label_pc_1421c, label %dec_label_pc_14228

dec_label_pc_1421c:                               ; preds = %dec_label_pc_14214, %dec_label_pc_1420c
  %v2_14220 = phi i32 [ %v3_141fc, %dec_label_pc_14214 ], [ %v2_14220.pre, %dec_label_pc_1420c ]
  %v0_1421c = phi i32 [ %arg2, %dec_label_pc_14214 ], [ %v0_1421c.pre, %dec_label_pc_1420c ]
  store i32 %v2_14220, i32* @r4, align 4
  store i32 %v6_141fc, i32* @r5, align 4
  store i32 %v9_141fc, i32* @r6, align 4
  store i32 %v12_141fc, i32* @r7, align 4
  store i32 %v18_141fc, i32* @lr, align 4
  %v1_14224 = call i32 @function_13f60(i32 %v0_1421c)
  %v0_14228.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14228

dec_label_pc_14228:                               ; preds = %dec_label_pc_14214, %dec_label_pc_1421c
  %v0_14240 = phi i32 [ %v0_14204, %dec_label_pc_14214 ], [ %v1_14224, %dec_label_pc_1421c ]
  %v0_14228 = phi i32 [ %arg2, %dec_label_pc_14214 ], [ %v0_14228.pre, %dec_label_pc_1421c ]
  %v1_14228 = add i32 %v0_14228, 7
  %v1_1422c = and i32 %v1_14228, -4
  store i32 %v1_1422c, i32* @r5, align 4
  %v2_14230 = icmp ugt i32 %v1_1422c, 10
  %v1_14234 = add i32 %v0_14240, -4
  %v2_14234 = inttoptr i32 %v1_14234 to i32*
  %v3_14234 = load i32, i32* %v2_14234, align 4
  store i32 %v3_14234, i32* @r6, align 4
  br i1 %v2_14230, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_14228
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_14228, %bb
  %v0_142bc = phi i32 [ %v1_1422c, %dec_label_pc_14228 ], [ 12, %bb ]
  store i32 %v1_14234, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_142bc, %v3_14234
  br i1 %tmp, label %dec_label_pc_14248, label %dec_label_pc_142bc

dec_label_pc_14248:                               ; preds = %bb14
  %v2_1423c = sub i32 %v0_142bc, %v3_14234
  %v1_14258 = call i32 @function_14af4()
  %v0_14260 = load i32, i32* @r8, align 4
  %v1_14260 = load i32, i32* @r6, align 4
  %v2_14260 = add i32 %v1_14260, %v0_14260
  %v4_14268 = call i32 @function_143a8(i32* bitcast (i32** @global_var_1e8e0.613 to i32*), i32 %v2_14260, i32 %v2_1423c)
  store i32 %v4_14268, i32* @r4, align 4
  store i32 82560, i32* @lr, align 4
  %v1_1427c = call i32 @function_14af4()
  %v0_14280 = load i32, i32* @r4, align 4
  %v2_14280 = icmp eq i32 %v0_14280, 0
  br i1 %v2_14280, label %dec_label_pc_14290, label %.thread

.thread:                                          ; preds = %dec_label_pc_14248
  %v1_14284 = load i32, i32* @r6, align 4
  %v3_14284 = add i32 %v1_14284, %v0_14280
  %v2_14288 = load i32, i32* @r7, align 4
  %v3_14288 = add i32 %v2_14288, -4
  %v4_14288 = inttoptr i32 %v3_14288 to i32*
  store i32 %v3_14284, i32* %v4_14288, align 4
  br label %dec_label_pc_142fc

dec_label_pc_14290:                               ; preds = %dec_label_pc_14248
  %v0_14290 = load i32, i32* @r5, align 4
  %v1_14290 = add i32 %v0_14290, -4
  %v1_14294 = call i32 @function_13f60(i32 %v1_14290)
  store i32 %v1_14294, i32* @r0, align 4
  store i32 %v1_14294, i32* @r4, align 4
  %v2_14298 = icmp eq i32 %v1_14294, 0
  br i1 %v2_14298, label %dec_label_pc_142b4, label %dec_label_pc_142a0

dec_label_pc_142a0:                               ; preds = %dec_label_pc_14290
  %v0_142a0 = load i32, i32* @r6, align 4
  %v1_142a0 = add i32 %v0_142a0, -4
  store i32 %v1_142a0, i32* @r2, align 4
  %v0_142a4 = load i32, i32* @r7, align 4
  store i32 %v0_142a4, i32* @r1, align 4
  %v3_142a8 = call i32 @function_13ad0(i32 %v1_14294, i32 %v0_142a4, i32 %v1_142a0)
  %v0_142ac = load i32, i32* @r7, align 4
  store i32 %v0_142ac, i32* @r0, align 4
  %v0_142b0 = call i32 @function_1410c()
  %v0_142b4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_142b4

dec_label_pc_142b4:                               ; preds = %dec_label_pc_14290, %dec_label_pc_142a0
  %v0_142b4 = phi i32 [ 0, %dec_label_pc_14290 ], [ %v0_142b4.pre, %dec_label_pc_142a0 ]
  store i32 %v0_142b4, i32* @r7, align 4
  br label %dec_label_pc_142fc

dec_label_pc_142bc:                               ; preds = %bb14
  %v1_142bc = add i32 %v0_142bc, 28
  %tmp15 = icmp ugt i32 %v1_142bc, %v3_14234
  br i1 %tmp15, label %dec_label_pc_142fc, label %dec_label_pc_142c8

dec_label_pc_142c8:                               ; preds = %dec_label_pc_142bc
  %v1_142d4 = call i32 @function_14af4()
  %v0_142d8 = load i32, i32* @r8, align 4
  %v1_142d8 = load i32, i32* @r5, align 4
  %v2_142d8 = add i32 %v1_142d8, %v0_142d8
  %v1_142dc = load i32, i32* @r6, align 4
  %v2_142dc = sub i32 %v1_142dc, %v1_142d8
  %v4_142e4 = call i32 @function_14468(i32* bitcast (i32** @global_var_1e8e0.613 to i32*), i32 %v2_142d8, i32 %v2_142dc)
  store i32 82680, i32* @lr, align 4
  %v1_142f4 = call i32 @function_14af4()
  %v0_142f8 = load i32, i32* @r5, align 4
  %v1_142f8 = load i32, i32* @r7, align 4
  %v2_142f8 = add i32 %v1_142f8, -4
  %v3_142f8 = inttoptr i32 %v2_142f8 to i32*
  store i32 %v0_142f8, i32* %v3_142f8, align 4
  br label %dec_label_pc_142fc

dec_label_pc_142fc:                               ; preds = %.thread, %dec_label_pc_142bc, %dec_label_pc_142b4, %dec_label_pc_142c8
  %v0_142fc = load i32, i32* @r7, align 4
  %v2_14300 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_14300, i32* @r4, align 4
  store i32 %v6_141fc, i32* @r5, align 4
  store i32 %v9_141fc, i32* @r6, align 4
  store i32 %v12_141fc, i32* @r7, align 4
  store i32 %v15_141fc, i32* @r8, align 4
  ret i32 %v0_142fc

; uselistorder directives
  uselistorder i32 %v1_142d8, { 1, 0 }
  uselistorder i32 %v0_142bc, { 1, 2, 0 }
  uselistorder i32 %v3_14234, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1e8e0.613, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1e8e0.613 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_13f60, { 3, 57, 0, 51, 56, 55, 54, 53, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 1, 52, 50 }
  uselistorder i32 ()* @function_1410c, { 1, 0, 4, 3, 2, 5, 7, 6 }
  uselistorder i32* @r8, { 86, 87, 88, 89, 90, 99, 7, 8, 10, 9, 11, 12, 13, 91, 92, 97, 98, 93, 94, 95, 96, 15, 16, 17, 18, 75, 76, 77, 14, 19, 20, 21, 0, 1, 2, 3, 4, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 6, 46, 47, 48, 49, 50, 51, 52, 53, 5, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 142, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 166, 169, 170, 171, 172, 173, 174, 175 }
  uselistorder i32* @r7, { 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 229, 230, 6, 14, 7, 1, 5, 21, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 231, 239, 240, 232, 233, 234, 235, 236, 237, 238, 65, 66, 2, 67, 68, 69, 70, 71, 72, 73, 74, 190, 191, 192, 62, 0, 63, 64, 75, 76, 77, 78, 3, 79, 80, 81, 82, 83, 84, 85, 86, 87, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 4, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284 }
  uselistorder label %dec_label_pc_142fc, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_142b4, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_14228, { 1, 0 }
}

define i32 @function_14314(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14314:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_14314 = inttoptr i32 %arg2 to i32*
  %v2_14314 = load i32, i32* %v1_14314, align 4
  %v3_14318 = load i32, i32* @r4, align 4
  store i32 %v3_14318, i32* %stack_var_-8, align 4
  %v1_1431c = add i32 %v2_14314, 3
  %v1_14320 = and i32 %v1_1431c, -4
  store i32 %v1_14320, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_14328 = icmp ugt i32 %v1_14320, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_14330 = load i32, i32* %arg1, align 4
  store i32 %v2_14330, i32* %r0.global-to-local, align 4
  br i1 %v2_14328, label %dec_label_pc_1439c.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_14314
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1439c.preheader

dec_label_pc_1439c.preheader:                     ; preds = %dec_label_pc_14314, %bb
  %v1_14350 = phi i32 [ %v1_14320, %dec_label_pc_14314 ], [ 12, %bb ]
  %v2_1439c9 = icmp eq i32 %v2_14330, 0
  br i1 %v2_1439c9, label %dec_label_pc_143a4, label %dec_label_pc_1433c

dec_label_pc_1433c:                               ; preds = %dec_label_pc_1439c.preheader, %dec_label_pc_14398
  %v2_14354 = phi i32 [ %v3_14398, %dec_label_pc_14398 ], [ %v2_14330, %dec_label_pc_1439c.preheader ]
  %v1_1433c = inttoptr i32 %v2_14354 to i32*
  %v2_1433c = load i32, i32* %v1_1433c, align 4
  store i32 %v2_1433c, i32* %ip.global-to-local, align 4
  %v3_14340 = icmp ult i32 %v2_1433c, %v1_14350
  br i1 %v3_14340, label %dec_label_pc_14398, label %dec_label_pc_14348

dec_label_pc_14348:                               ; preds = %dec_label_pc_1433c
  %v1_14348 = add i32 %v1_14350, 44
  %v3_1434c = icmp ult i32 %v2_1433c, %v1_14348
  br i1 %v3_1434c, label %dec_label_pc_1435c, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_14348
  %v2_14340.le = sub i32 %v2_1433c, %v1_14350
  store i32 %v2_14340.le, i32* %v1_1433c, align 4
  %v0_14388.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_14390.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_1435c:                               ; preds = %dec_label_pc_14348
  %v1_1435c = add i32 %v2_14354, 4
  %v2_1435c = inttoptr i32 %v1_1435c to i32*
  %v3_1435c = load i32, i32* %v2_1435c, align 4
  store i32 %v3_1435c, i32* %r2.global-to-local, align 4
  %v2_14360 = icmp eq i32 %v3_1435c, 0
  br i1 %v2_14360, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_1435c
  %v2_14364 = add i32 %v2_14354, 8
  %v3_14364 = inttoptr i32 %v2_14364 to i32*
  %v4_14364 = load i32, i32* %v3_14364, align 4
  %v3_14368 = add i32 %v3_1435c, 8
  %v4_14368 = inttoptr i32 %v3_14368 to i32*
  store i32 %v4_14364, i32* %v4_14368, align 4
  %v0_1436c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1435c, %bb27
  %v0_1436c = phi i32 [ %v2_14354, %dec_label_pc_1435c ], [ %v0_1436c.pre, %bb27 ]
  %v1_1436c = add i32 %v0_1436c, 8
  %v2_1436c = inttoptr i32 %v1_1436c to i32*
  %v3_1436c = load i32, i32* %v2_1436c, align 4
  %v1_14370 = add i32 %v0_1436c, 4
  %v2_14370 = inttoptr i32 %v1_14370 to i32*
  %v3_14370 = load i32, i32* %v2_14370, align 4
  %v2_14374 = icmp eq i32 %v3_1436c, 0
  br i1 %v2_14374, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_14378 = add i32 %v3_1436c, 4
  %v4_14378 = inttoptr i32 %v3_14378 to i32*
  store i32 %v3_14370, i32* %v4_14378, align 4
  %v1_14380 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_14380, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_1437c = load i32, i32* %r1.global-to-local, align 4
  %v3_1437c = inttoptr i32 %v2_1437c to i32*
  store i32 %v3_14370, i32* %v3_1437c, align 4
  %v1_14384.pre = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_14384.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_14390 = phi i32 [ %v0_14390.pre, %.thread._crit_edge ], [ %v1_14380, %bb28 ], [ %v1_14384.pre, %.thread5 ]
  %v0_14388 = phi i32 [ %v0_14388.pre, %.thread._crit_edge ], [ %v1_14380, %bb28 ], [ %v1_14384.pre, %.thread5 ]
  %v1_14388 = load i32, i32* %r0.global-to-local, align 4
  %v2_14388 = sub i32 %v1_14388, %v0_14388
  %v1_1438c = add i32 %v2_14388, 12
  store i32 %v1_1438c, i32* %r0.global-to-local, align 4
  %v1_14390 = load i32, i32* %r4.global-to-local, align 4
  %v2_14390 = inttoptr i32 %v1_14390 to i32*
  store i32 %v0_14390, i32* %v2_14390, align 4
  %v2_14394 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14394, i32* %r4.global-to-local, align 4
  ret i32 %v1_1438c

dec_label_pc_14398:                               ; preds = %dec_label_pc_1433c
  %v1_14398 = add i32 %v2_14354, 4
  %v2_14398 = inttoptr i32 %v1_14398 to i32*
  %v3_14398 = load i32, i32* %v2_14398, align 4
  store i32 %v3_14398, i32* %r0.global-to-local, align 4
  %v2_1439c = icmp eq i32 %v3_14398, 0
  br i1 %v2_1439c, label %dec_label_pc_1439c.dec_label_pc_143a4_crit_edge, label %dec_label_pc_1433c

dec_label_pc_1439c.dec_label_pc_143a4_crit_edge:  ; preds = %dec_label_pc_14398
  br label %dec_label_pc_143a4

dec_label_pc_143a4:                               ; preds = %dec_label_pc_1439c.dec_label_pc_143a4_crit_edge, %dec_label_pc_1439c.preheader
  store i32 %v3_14318, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_14398, { 1, 2, 0 }
  uselistorder i32 %v0_1436c, { 1, 0 }
  uselistorder i32 %v2_1433c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_14354, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_14350, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_1433c, { 1, 0 }
  uselistorder label %dec_label_pc_1439c.preheader, { 1, 0 }
}

define i32 @function_143a8(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_143a8:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_143ac = load i32, i32* %arg1, align 4
  store i32 %v2_143ac, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_144246 = icmp eq i32 %v2_143ac, 0
  br i1 %v2_144246, label %dec_label_pc_1442c, label %dec_label_pc_143b8

dec_label_pc_143b8:                               ; preds = %dec_label_pc_143a8, %dec_label_pc_14420
  %v0_143f8 = phi i32 [ %v3_14420, %dec_label_pc_14420 ], [ %v2_143ac, %dec_label_pc_143a8 ]
  %v1_143b8 = inttoptr i32 %v0_143f8 to i32*
  %v2_143b8 = load i32, i32* %v1_143b8, align 4
  store i32 %v2_143b8, i32* %r0.global-to-local, align 4
  %v2_143bc = sub i32 %v0_143f8, %v2_143b8
  %v1_143c0 = add i32 %v2_143bc, 12
  %v3_143c4 = icmp uge i32 %v1_143c0, %arg2
  %v9_143c4 = icmp eq i32 %v1_143c0, %arg2
  %v2_143c8 = xor i1 %v9_143c4, true
  %v3_143c8 = and i1 %v3_143c4, %v2_143c8
  br i1 %v3_143c8, label %dec_label_pc_14420, label %dec_label_pc_143cc

dec_label_pc_143cc:                               ; preds = %dec_label_pc_143b8
  br i1 %v9_143c4, label %dec_label_pc_143d0, label %dec_label_pc_1442c

dec_label_pc_143d0:                               ; preds = %dec_label_pc_143cc
  %v1_143d0 = add i32 %arg3, 3
  %v1_143d4 = and i32 %v1_143d0, -4
  store i32 %v1_143d4, i32* %r2.global-to-local, align 4
  %v2_143d8 = sub i32 %v2_143b8, %v1_143d4
  %v3_143d8 = icmp ult i32 %v2_143b8, %v1_143d4
  br i1 %v3_143d8, label %dec_label_pc_1442c, label %dec_label_pc_143e0

dec_label_pc_143e0:                               ; preds = %dec_label_pc_143d0
  %v1_143e0 = add i32 %v1_143d4, 44
  %v3_143e4 = icmp ult i32 %v2_143b8, %v1_143e0
  br i1 %v3_143e4, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_143e0
  store i32 %v2_143d8, i32* %v1_143b8, align 4
  %v1_143f0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_143f0, i32* %r0.global-to-local, align 4
  ret i32 %v1_143f0

.thread2:                                         ; preds = %dec_label_pc_143e0
  %v1_143f8 = add i32 %v0_143f8, 4
  %v2_143f8 = inttoptr i32 %v1_143f8 to i32*
  %v3_143f8 = load i32, i32* %v2_143f8, align 4
  store i32 %v3_143f8, i32* %r2.global-to-local, align 4
  %v2_143fc = icmp eq i32 %v3_143f8, 0
  br i1 %v2_143fc, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_14400 = add i32 %v0_143f8, 8
  %v3_14400 = inttoptr i32 %v2_14400 to i32*
  %v4_14400 = load i32, i32* %v3_14400, align 4
  %v3_14404 = add i32 %v3_143f8, 8
  %v4_14404 = inttoptr i32 %v3_14404 to i32*
  store i32 %v4_14400, i32* %v4_14404, align 4
  %v0_14408.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_14408 = phi i32 [ %v0_143f8, %.thread2 ], [ %v0_14408.pre, %bb17 ]
  %v1_14408 = add i32 %v0_14408, 8
  %v2_14408 = inttoptr i32 %v1_14408 to i32*
  %v3_14408 = load i32, i32* %v2_14408, align 4
  store i32 %v3_14408, i32* %r2.global-to-local, align 4
  %v1_1440c = add i32 %v0_14408, 4
  %v2_1440c = inttoptr i32 %v1_1440c to i32*
  %v3_1440c = load i32, i32* %v2_1440c, align 4
  %v2_14410 = icmp eq i32 %v3_14408, 0
  br i1 %v2_14410, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_14414 = add i32 %v3_14408, 4
  %v4_14414 = inttoptr i32 %v3_14414 to i32*
  store i32 %v3_1440c, i32* %v4_14414, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_14418 = load i32, i32* %lr.global-to-local, align 4
  %v3_14418 = inttoptr i32 %v2_14418 to i32*
  store i32 %v3_1440c, i32* %v3_14418, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_1441c = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_1441c

dec_label_pc_14420:                               ; preds = %dec_label_pc_143b8
  %v1_14420 = add i32 %v0_143f8, 4
  %v2_14420 = inttoptr i32 %v1_14420 to i32*
  %v3_14420 = load i32, i32* %v2_14420, align 4
  store i32 %v3_14420, i32* %ip.global-to-local, align 4
  %v2_14424 = icmp eq i32 %v3_14420, 0
  br i1 %v2_14424, label %dec_label_pc_14424.dec_label_pc_1442c.loopexit_crit_edge, label %dec_label_pc_143b8

dec_label_pc_14424.dec_label_pc_1442c.loopexit_crit_edge: ; preds = %dec_label_pc_14420
  br label %dec_label_pc_1442c

dec_label_pc_1442c:                               ; preds = %dec_label_pc_143d0, %dec_label_pc_143a8, %dec_label_pc_14424.dec_label_pc_1442c.loopexit_crit_edge, %dec_label_pc_143cc
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_14420, { 1, 2, 0 }
  uselistorder i32 %v0_14408, { 1, 0 }
  uselistorder i32 %v1_143d4, { 0, 2, 1, 3 }
  uselistorder i1 %v9_143c4, { 1, 0 }
  uselistorder i32 %v2_143b8, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_143f8, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_1442c, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_143b8, { 1, 0 }
}

define i32 @function_14434() local_unnamed_addr {
dec_label_pc_14434:
  %v0_14434 = load i32, i32* @r2, align 4
  %v2_14434 = icmp eq i32 %v0_14434, 0
  %v0_14438 = load i32, i32* @r3, align 4
  %v1_14438 = load i32, i32* @r1, align 4
  %v2_14438 = add i32 %v1_14438, 4
  %v3_14438 = inttoptr i32 %v2_14438 to i32*
  store i32 %v0_14438, i32* %v3_14438, align 4
  %v0_1443c = load i32, i32* @r2, align 4
  %v1_1443c = load i32, i32* @r1, align 4
  %v2_1443c = add i32 %v1_1443c, 8
  %v3_1443c = inttoptr i32 %v2_1443c to i32*
  store i32 %v0_1443c, i32* %v3_1443c, align 4
  %v1_14444 = load i32, i32* @r1, align 4
  br i1 %v2_14434, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_14434
  %v2_14440 = load i32, i32* @r2, align 4
  %v3_14440 = add i32 %v2_14440, 4
  %v4_14440 = inttoptr i32 %v3_14440 to i32*
  store i32 %v1_14444, i32* %v4_14440, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_14434
  %v2_14444 = load i32, i32* @r0, align 4
  %v3_14444 = inttoptr i32 %v2_14444 to i32*
  store i32 %v1_14444, i32* %v3_14444, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_14448 = load i32, i32* @r3, align 4
  %v2_14448 = icmp eq i32 %v0_14448, 0
  br i1 %v2_14448, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_1444c = load i32, i32* @r1, align 4
  %v3_1444c = add i32 %v0_14448, 8
  %v4_1444c = inttoptr i32 %v3_1444c to i32*
  store i32 %v1_1444c, i32* %v4_1444c, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_14450 = load i32, i32* @r0, align 4
  ret i32 %v1_14450

; uselistorder directives
  uselistorder i32 %v1_14444, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_14454() local_unnamed_addr {
dec_label_pc_14454:
  %v0_14454 = load i32, i32* @r2, align 4
  %v2_14454 = icmp eq i32 %v0_14454, 0
  %v1_14458 = load i32, i32* @r1, align 4
  br i1 %v2_14454, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14454
  %v2_14458 = load i32, i32* @r0, align 4
  %v3_14458 = inttoptr i32 %v2_14458 to i32*
  store i32 %v1_14458, i32* %v3_14458, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_14454
  %v3_1445c = add i32 %v0_14454, 4
  %v4_1445c = inttoptr i32 %v3_1445c to i32*
  store i32 %v1_14458, i32* %v4_1445c, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_14460 = load i32, i32* @r2, align 4
  %v1_14460 = load i32, i32* @r1, align 4
  %v2_14460 = add i32 %v1_14460, 8
  %v3_14460 = inttoptr i32 %v2_14460 to i32*
  store i32 %v0_14460, i32* %v3_14460, align 4
  %v1_14464 = load i32, i32* @r0, align 4
  ret i32 %v1_14464

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_14468(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14468:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_14468 = load i32, i32* @r4, align 4
  store i32 %v3_14468, i32* %stack_var_-20, align 4
  %v2_1446c = load i32, i32* %arg1, align 4
  store i32 %v2_1446c, i32* %r4.global-to-local, align 4
  %v2_14470 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_1448c2 = icmp eq i32 %v2_1446c, 0
  br i1 %v2_1448c2, label %dec_label_pc_1453c, label %dec_label_pc_1447c

dec_label_pc_1447c:                               ; preds = %dec_label_pc_14468, %dec_label_pc_14484
  %v0_144cc = phi i32 [ %v0_144d4, %dec_label_pc_14484 ], [ 0, %dec_label_pc_14468 ]
  %v0_144d4 = phi i32 [ %v3_14488, %dec_label_pc_14484 ], [ %v2_1446c, %dec_label_pc_14468 ]
  %v1_144905.in = phi i32 [ %v3_14488, %dec_label_pc_14484 ], [ %v2_1446c, %dec_label_pc_14468 ]
  %v1_144905 = add i32 %v1_144905.in, 12
  %v3_1447c = icmp ult i32 %v1_144905, %arg2
  br i1 %v3_1447c, label %dec_label_pc_14484, label %dec_label_pc_1449c

dec_label_pc_14484:                               ; preds = %dec_label_pc_1447c
  store i32 %v0_144d4, i32* %r6.global-to-local, align 4
  %v1_14488 = add i32 %v0_144d4, 4
  %v2_14488 = inttoptr i32 %v1_14488 to i32*
  %v3_14488 = load i32, i32* %v2_14488, align 4
  store i32 %v3_14488, i32* %r4.global-to-local, align 4
  %v2_1448c = icmp eq i32 %v3_14488, 0
  br i1 %v2_1448c, label %dec_label_pc_1448c.dec_label_pc_1453c.loopexit_crit_edge, label %dec_label_pc_1447c

dec_label_pc_1449c:                               ; preds = %dec_label_pc_1447c
  %v1_1449c = inttoptr i32 %v0_144d4 to i32*
  %v2_1449c = load i32, i32* %v1_1449c, align 4
  %v2_144a0 = sub i32 %v0_144d4, %v2_1449c
  %v1_144a4 = add i32 %v2_144a0, 12
  %v3_144a8 = icmp uge i32 %v1_144a4, %v2_14470
  %v9_144a8 = icmp eq i32 %v1_144a4, %v2_14470
  %v2_144ac = xor i1 %v9_144a8, true
  %v3_144ac = and i1 %v3_144a8, %v2_144ac
  br i1 %v3_144ac, label %dec_label_pc_1453c, label %dec_label_pc_144b0

dec_label_pc_144b0:                               ; preds = %dec_label_pc_1449c
  %v2_144b0 = add i32 %v2_1449c, %arg3
  store i32 %v2_144b0, i32* %r7.global-to-local, align 4
  br i1 %v9_144a8, label %dec_label_pc_144b8, label %dec_label_pc_144e4

dec_label_pc_144b8:                               ; preds = %dec_label_pc_144b0
  %v2_144b8 = icmp eq i32 %v0_144cc, 0
  br i1 %v2_144b8, label %dec_label_pc_14530, label %dec_label_pc_144c0

dec_label_pc_144c0:                               ; preds = %dec_label_pc_144b8
  %v1_144c0 = add i32 %v0_144cc, 12
  %v9_144c4 = icmp eq i32 %v1_144c0, %arg2
  br i1 %v9_144c4, label %dec_label_pc_144cc, label %dec_label_pc_14530

dec_label_pc_144cc:                               ; preds = %dec_label_pc_144c0
  %v1_144cc = inttoptr i32 %v0_144cc to i32*
  %v2_144cc = load i32, i32* %v1_144cc, align 4
  %v1_144d0 = add i32 %v0_144cc, 8
  %v2_144d0 = inttoptr i32 %v1_144d0 to i32*
  %v3_144d0 = load i32, i32* %v2_144d0, align 4
  store i32 %v3_144d0, i32* @r2, align 4
  store i32 %v0_144d4, i32* @r1, align 4
  %v2_144d8 = add i32 %v2_144cc, %v2_144b0
  store i32 %v2_144d8, i32* %r7.global-to-local, align 4
  %v0_144dc = call i32 @function_14454()
  br label %dec_label_pc_14530

dec_label_pc_144e4:                               ; preds = %dec_label_pc_144b0
  %v1_144e4 = add i32 %v0_144d4, 4
  %v2_144e4 = inttoptr i32 %v1_144e4 to i32*
  %v3_144e4 = load i32, i32* %v2_144e4, align 4
  store i32 %v3_144e4, i32* %r5.global-to-local, align 4
  %v2_144e8 = icmp eq i32 %v3_144e4, 0
  br i1 %v2_144e8, label %dec_label_pc_1451c, label %dec_label_pc_144f0

dec_label_pc_144f0:                               ; preds = %dec_label_pc_144e4
  %v1_144f0 = inttoptr i32 %v3_144e4 to i32*
  %v2_144f0 = load i32, i32* %v1_144f0, align 4
  %v2_144f4 = sub i32 %v3_144e4, %v2_144f0
  %v1_144f8 = add i32 %v2_144f4, 12
  %v9_144fc = icmp eq i32 %v2_14470, %v1_144f8
  br i1 %v9_144fc, label %dec_label_pc_14504, label %dec_label_pc_1451c

dec_label_pc_14504:                               ; preds = %dec_label_pc_144f0
  store i32 %v0_144cc, i32* @r2, align 4
  store i32 %v3_144e4, i32* @r1, align 4
  %v2_1450c = add i32 %v2_144f0, %v2_144b0
  store i32 %v2_1450c, i32* %r7.global-to-local, align 4
  %v0_14510 = call i32 @function_14454()
  %v0_14514 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_14514, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14530

dec_label_pc_1451c:                               ; preds = %dec_label_pc_144f0, %dec_label_pc_144e4
  %v2_1451c = add i32 %v0_144d4, %arg3
  store i32 %v2_1451c, i32* %r4.global-to-local, align 4
  store i32 %v3_144e4, i32* @r3, align 4
  store i32 %v0_144cc, i32* @r2, align 4
  store i32 %v2_1451c, i32* @r1, align 4
  %v0_1452c = call i32 @function_14434()
  br label %dec_label_pc_14530

dec_label_pc_14530:                               ; preds = %dec_label_pc_144c0, %dec_label_pc_144b8, %dec_label_pc_14504, %dec_label_pc_144cc, %dec_label_pc_1451c
  %v0_14530 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14530, i32* %r5.global-to-local, align 4
  %v0_14534 = load i32, i32* %r7.global-to-local, align 4
  %v2_14534 = inttoptr i32 %v0_14530 to i32*
  store i32 %v0_14534, i32* %v2_14534, align 4
  br label %dec_label_pc_14554

dec_label_pc_1448c.dec_label_pc_1453c.loopexit_crit_edge: ; preds = %dec_label_pc_14484
  br label %dec_label_pc_1453c

dec_label_pc_1453c:                               ; preds = %dec_label_pc_14468, %dec_label_pc_1448c.dec_label_pc_1453c.loopexit_crit_edge, %dec_label_pc_1449c
  %v1_1453c = add i32 %v2_14470, -12
  store i32 %v1_1453c, i32* %r5.global-to-local, align 4
  %v3_14540 = inttoptr i32 %v1_1453c to i32*
  store i32 %arg3, i32* %v3_14540, align 4
  %v0_14544 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14544, i32* @r3, align 4
  %v0_14548 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_14548, i32* @r2, align 4
  %v0_1454c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1454c, i32* @r1, align 4
  %v0_14550 = call i32 @function_14434()
  br label %dec_label_pc_14554

dec_label_pc_14554:                               ; preds = %dec_label_pc_14530, %dec_label_pc_1453c
  %v0_14554 = load i32, i32* %r5.global-to-local, align 4
  %v2_14558 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_14558, i32* @r4, align 4
  ret i32 %v0_14554

; uselistorder directives
  uselistorder i32 %v3_144e4, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_144a8, { 1, 0 }
  uselistorder i32 %v3_14488, { 2, 3, 1, 0 }
  uselistorder i32 %v0_144d4, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_144cc, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_14434, { 1, 0 }
  uselistorder i32* @r3, { 2, 5, 3, 4, 0, 6, 1 }
  uselistorder i32 ()* @function_14454, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14554, { 1, 0 }
  uselistorder label %dec_label_pc_1453c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14530, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_1447c, { 1, 0 }
}

define i32 @function_1455c() local_unnamed_addr {
dec_label_pc_14578.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_1455c = ptrtoint i32* %stack_var_-268 to i32
  %v1_1456c = call i32 @function_14af4()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_14578 = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_14578

dec_label_pc_14578:                               ; preds = %dec_label_pc_14578.lr.ph, %dec_label_pc_14578
  %v1_1457c = phi i32 [ 31, %dec_label_pc_14578.lr.ph ], [ %v1_14588, %dec_label_pc_14578 ]
  %v4_1457c = mul i32 %v1_1457c, 4
  %v5_1457c = add i32 %v4_1457c, %v2_14578
  %v2_14584 = add i32 %v5_1457c, -128
  %v3_14584 = inttoptr i32 %v2_14584 to i32*
  store i32 0, i32* %v3_14584, align 4
  %v0_14588 = load i32, i32* %r1.global-to-local, align 4
  %v1_14588 = add i32 %v0_14588, -1
  store i32 %v1_14588, i32* %r1.global-to-local, align 4
  %v6_14588 = icmp slt i32 %v1_14588, 0
  br i1 %v6_14588, label %dec_label_pc_14590, label %dec_label_pc_14578

dec_label_pc_14590:                               ; preds = %dec_label_pc_14578
  %v2_14590 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_14590, i32* @r4, align 4
  store i32 %v2_14590, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_1459c = call i32 @function_13f18()
  %v2_145a0 = icmp eq i32 %v0_1459c, 0
  br i1 %v2_145a0, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_14590
  store i32 %v2_14590, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14590, %bb
  store i32 83380, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_145a0, i32 ptrtoint (i32* @global_var_1372c.635 to i32))
  %v2_145b8 = load i32, i32* @global_var_1ead0.637, align 4
  %v2_145bc = icmp eq i32 %v2_145b8, 0
  br i1 %v2_145bc, label %dec_label_pc_145c4, label %dec_label_pc_145f4

dec_label_pc_145c4:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1ead0.637, align 4
  br label %dec_label_pc_145cc

dec_label_pc_145cc:                               ; preds = %dec_label_pc_14644, %dec_label_pc_145c4
  %v1_145d8 = call i32 @function_14af4()
  %v1_145e0 = call i32 @function_13ddc(i32 6)
  store i32 83444, i32* @lr, align 4
  %v1_145f0 = call i32 @function_14af4()
  %v2_145f8.pre = load i32, i32* @global_var_1ead0.637, align 4
  br label %dec_label_pc_145f4

dec_label_pc_145f4:                               ; preds = %.thread1, %dec_label_pc_145cc
  %v0_14668 = phi i32 [ %v2_145b8, %.thread1 ], [ %v2_145f8.pre, %dec_label_pc_145cc ]
  store i32 ptrtoint (i32* @global_var_1ead0.637 to i32), i32* %ip.global-to-local, align 4
  %v7_145fc = icmp eq i32 %v0_14668, 1
  br i1 %v7_145fc, label %dec_label_pc_1462c.lr.ph, label %dec_label_pc_14660

dec_label_pc_1462c.lr.ph:                         ; preds = %dec_label_pc_145f4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1ead0.637, align 4
  %v2_14618 = bitcast i32* %stack_var_-268 to i8*
  %v3_14618 = call i32 @function_13af0(i8* %v2_14618, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1462c

dec_label_pc_1462c:                               ; preds = %dec_label_pc_1462c.lr.ph, %dec_label_pc_1462c
  %v1_14630 = phi i32 [ 31, %dec_label_pc_1462c.lr.ph ], [ %v1_1463c, %dec_label_pc_1462c ]
  %v4_14630 = mul i32 %v1_14630, 4
  %v5_14630 = add i32 %v4_14630, %v2_14578
  %v2_14638 = add i32 %v5_14630, -264
  %v3_14638 = inttoptr i32 %v2_14638 to i32*
  store i32 -1, i32* %v3_14638, align 4
  %v0_1463c = load i32, i32* %r1.global-to-local, align 4
  %v1_1463c = add i32 %v0_1463c, -1
  store i32 %v1_1463c, i32* %r1.global-to-local, align 4
  %v6_1463c = icmp slt i32 %v1_1463c, 0
  br i1 %v6_1463c, label %dec_label_pc_14644, label %dec_label_pc_1462c

dec_label_pc_14644:                               ; preds = %dec_label_pc_1462c
  store i32 %v2_1455c, i32* %r1.global-to-local, align 4
  %v4_14658 = call i32 @function_14de0(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_145cc

dec_label_pc_14660:                               ; preds = %dec_label_pc_145f4
  %v7_14660 = icmp eq i32 %v0_14668, 2
  br i1 %v7_14660, label %dec_label_pc_14668, label %dec_label_pc_14674

dec_label_pc_14668:                               ; preds = %dec_label_pc_14660
  store i32 3, i32* @global_var_1ead0.637, align 4
  %v0_14670 = call i32 @function_1455c()
  %v2_14674.pre = load i32, i32* @global_var_1ead0.637, align 4
  br label %dec_label_pc_14674

dec_label_pc_14674:                               ; preds = %dec_label_pc_14660, %dec_label_pc_14668
  %v1_1467c = phi i32 [ %v0_14668, %dec_label_pc_14660 ], [ %v2_14674.pre, %dec_label_pc_14668 ]
  %v7_14678 = icmp eq i32 %v1_1467c, 3
  br i1 %v7_14678, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_14674
  %v2_14684 = load i32, i32* %ip.global-to-local, align 4
  %v3_14684 = inttoptr i32 %v2_14684 to i32*
  store i32 4, i32* %v3_14684, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14674, %bb27
  call void @__pseudo_cond_branch(i1 %v7_14678, i32 ptrtoint (i32* @global_var_14ef8.639 to i32))
  br label %dec_label_pc_1468c

dec_label_pc_1468c:                               ; preds = %dec_label_pc_1468c, %.thread3
  %v0_1468c = call i32 @function_1455c()
  br label %dec_label_pc_1468c

; uselistorder directives
  uselistorder i32 %v1_1463c, { 2, 1, 0 }
  uselistorder i32 %v1_14588, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1ead0.637, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder i32 -128, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14674, { 1, 0 }
  uselistorder label %dec_label_pc_1462c, { 1, 0 }
  uselistorder label %dec_label_pc_145f4, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_14578, { 1, 0 }
}

define i32 @function_146a4(i8* %arg1) local_unnamed_addr {
dec_label_pc_146a4:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_146b8 = load i32, i32* @r4, align 4
  store i32 %v3_146b8, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_146dc.pre = load i32, i32* bitcast (i32** @global_var_1ea20.642 to i32*), align 4
  br label %dec_label_pc_146d4

dec_label_pc_146d4:                               ; preds = %dec_label_pc_146d4, %dec_label_pc_146a4
  %v0_1470c = phi i32 [ %tmp, %dec_label_pc_146a4 ], [ %v1_146d0, %dec_label_pc_146d4 ]
  store i32 %v0_1470c, i32* %r4.global-to-local, align 4
  %v1_146d8 = inttoptr i32 %v0_1470c to i8*
  %v2_146d8 = load i8, i8* %v1_146d8, align 1
  %v3_146d8 = zext i8 %v2_146d8 to i32
  %v3_146e0 = mul nuw nsw i32 %v3_146d8, 2
  %v4_146e0 = add i32 %v3_146e0, %v2_146dc.pre
  %v5_146e0 = inttoptr i32 %v4_146e0 to i8*
  %v6_146e0 = load i8, i8* %v5_146e0, align 1
  %v1_146e4 = and i8 %v6_146e0, 32
  %v2_146e4 = icmp eq i8 %v1_146e4, 0
  %v1_146d0 = add i32 %v0_1470c, 1
  br i1 %v2_146e4, label %dec_label_pc_146ec, label %dec_label_pc_146d4

dec_label_pc_146ec:                               ; preds = %dec_label_pc_146d4
  %v7_146ec = icmp eq i8 %v2_146d8, 43
  br i1 %v7_146ec, label %dec_label_pc_1470c, label %dec_label_pc_146f4

dec_label_pc_146f4:                               ; preds = %dec_label_pc_146ec
  %v7_146f4 = icmp eq i8 %v2_146d8, 45
  br i1 %v7_146f4, label %dec_label_pc_1470c, label %bb

bb:                                               ; preds = %dec_label_pc_146f4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14768

dec_label_pc_1470c:                               ; preds = %dec_label_pc_146ec, %dec_label_pc_146f4
  %storemerge30 = phi i32 [ 1, %dec_label_pc_146f4 ], [ 0, %dec_label_pc_146ec ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_146d0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14768

dec_label_pc_14768:                               ; preds = %bb, %dec_label_pc_1470c
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_14770 = call i32 @function_1320c(i32 -1, i32 10)
  %v0_14774 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_14774, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_14780 = urem i32 %v2_14770, 256
  store i32 %v1_14780, i32* %sl.global-to-local, align 4
  %v0_14784 = call i32 @function_130fc()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_14784, i32* %r8.global-to-local, align 4
  %v0_14798.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14798

dec_label_pc_14794:                               ; preds = %bb48, %dec_label_pc_147f4
  %v0_14794 = phi i32 [ %v1_147c4, %bb48 ], [ %v0_14794.pre, %dec_label_pc_147f4 ]
  store i32 %v0_14794, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14798

dec_label_pc_14798:                               ; preds = %dec_label_pc_14768, %dec_label_pc_14794
  %v0_147c4 = phi i32 [ %v0_14798.pre, %dec_label_pc_14768 ], [ %v0_14794, %dec_label_pc_14794 ]
  %v1_14798 = inttoptr i32 %v0_147c4 to i8*
  %v2_14798 = load i8, i8* %v1_14798, align 1
  %v3_14798 = zext i8 %v2_14798 to i32
  %v1_1479c = add nsw i32 %v3_14798, -48
  %v1_147a0 = urem i32 %v1_1479c, 256
  %v1_147a8 = or i32 %v3_14798, 32
  %tmp56 = icmp ult i32 %v1_147a0, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_147b0

dec_label_pc_147b0:                               ; preds = %dec_label_pc_14798
  %tmp57 = icmp ugt i32 %v1_147a8, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_147b0
  %v1_147b4 = add nsw i32 %v1_147a8, -87
  %v5_147bc = urem i32 %v1_147b4, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_14798, %dec_label_pc_147b0, %bb42
  %v3_147ec = phi i32 [ %v1_147a0, %dec_label_pc_14798 ], [ 40, %dec_label_pc_147b0 ], [ %v5_147bc, %bb42 ]
  %v1_147c0 = load i32, i32* %r5.global-to-local, align 4
  %v1_147c4 = add i32 %v0_147c4, 1
  store i32 %v1_147c4, i32* %r4.global-to-local, align 4
  %v6_147c8 = icmp slt i32 %v3_147ec, %v1_147c0
  br i1 %v6_147c8, label %dec_label_pc_147cc, label %dec_label_pc_1480c

dec_label_pc_147cc:                               ; preds = %bb43
  %v0_147cc = load i32, i32* %ip.global-to-local, align 4
  %v1_147cc = load i32, i32* %r8.global-to-local, align 4
  %v9_147cc = icmp eq i32 %v0_147cc, %v1_147cc
  br i1 %v9_147cc, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_147cc
  br label %dec_label_pc_147dc

bb44:                                             ; preds = %dec_label_pc_147cc
  %v3_147cc = icmp ult i32 %v0_147cc, %v1_147cc
  br i1 %v3_147cc, label %dec_label_pc_147dc, label %dec_label_pc_147f4

dec_label_pc_147dc:                               ; preds = %bb44, %.thread
  %v4_147e41727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_147dc = load i32, i32* %sl.global-to-local, align 4
  %v3_147dc = icmp uge i32 %v3_147ec, %v1_147dc
  %v9_147dc = icmp eq i32 %v3_147ec, %v1_147dc
  %v2_147e0 = xor i1 %v3_147dc, true
  %v3_147e0 = or i1 %v9_147dc, %v2_147e0
  br i1 %v3_147e0, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_147dc
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_147dc, %bb45
  %v4_147e4 = phi i32 [ %v4_147e41727, %dec_label_pc_147dc ], [ 0, %bb45 ]
  %v2_147e4 = xor i1 %v9_147dc, true
  %v3_147e4 = and i1 %v3_147dc, %v2_147e4
  br i1 %v3_147e4, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_147e4 = urem i32 %v4_147e4, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_147e8 = phi i32 [ %v5_147e4, %bb47 ], [ %v4_147e4, %bb46 ]
  %v2_147e8 = icmp eq i32 %v0_147e8, 0
  br i1 %v2_147e8, label %bb48, label %dec_label_pc_147f4

bb48:                                             ; preds = %thread-pre-split
  %v4_147ec = mul i32 %v0_147cc, %v1_147c0
  %v5_147ec = add i32 %v4_147ec, %v3_147ec
  store i32 %v5_147ec, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_14794

dec_label_pc_147f4:                               ; preds = %bb44, %thread-pre-split
  %v0_147f4 = call i32 @function_13a84()
  %v0_147f8 = load i32, i32* %r7.global-to-local, align 4
  %v1_147f8 = load i32, i32* %fp.global-to-local, align 4
  %v2_147f8 = and i32 %v1_147f8, %v0_147f8
  store i32 %v2_147f8, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_14804 = inttoptr i32 %v0_147f4 to i32*
  store i32 34, i32* %v2_14804, align 4
  %v0_14794.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14794

dec_label_pc_1480c:                               ; preds = %bb43
  %v0_1480c.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_1480c = icmp eq i32 %v0_1480c.pre, 0
  br i1 %v2_1480c, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_1480c
  %v1_14810 = load i32, i32* %r6.global-to-local, align 4
  %v3_14810 = inttoptr i32 %v0_1480c.pre to i32*
  store i32 %v1_14810, i32* %v3_14810, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_1480c, %bb49
  %v0_14814 = load i32, i32* %r7.global-to-local, align 4
  %v2_14814 = icmp eq i32 %v0_14814, 0
  %. = select i1 %v2_14814, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_14820 = load i32, i32* %fp.global-to-local, align 4
  %v2_14820 = icmp eq i32 %v0_14820, 0
  %v0_14844.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_14820, label %dec_label_pc_1483c, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_14844.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_1482c, label %dec_label_pc_1483c

dec_label_pc_1482c:                               ; preds = %bb53
  %v0_1482c = call i32 @function_13a84()
  %v2_14834 = inttoptr i32 %v0_1482c to i32*
  store i32 34, i32* %v2_14834, align 4
  %v0_14838 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14838, i32* %ip.global-to-local, align 4
  %v0_1483c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1483c

dec_label_pc_1483c:                               ; preds = %bb53, %bb50, %dec_label_pc_1482c
  %v0_14844.pre = phi i32 [ %v0_14844.pre.pre, %bb53 ], [ %v0_14838, %dec_label_pc_1482c ], [ %v0_14844.pre.pre, %bb50 ]
  %v0_1483c = phi i32 [ %v0_14814, %bb53 ], [ %v0_1483c.pre, %dec_label_pc_1482c ], [ %v0_14814, %bb50 ]
  %v2_1483c = icmp eq i32 %v0_1483c, 0
  br i1 %v2_1483c, label %dec_label_pc_1483c._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_1483c
  %v2_14840 = sub i32 0, %v0_14844.pre
  store i32 %v2_14840, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1483c._crit_edge

dec_label_pc_1483c._crit_edge:                    ; preds = %dec_label_pc_1483c, %bb54
  %v0_14844 = phi i32 [ %v2_14840, %bb54 ], [ %v0_14844.pre, %dec_label_pc_1483c ]
  %v2_14848 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_14848, i32* @r4, align 4
  ret i32 %v0_14844

; uselistorder directives
  uselistorder i32 %v0_14844.pre, { 1, 0 }
  uselistorder i32 %v0_14844.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_1480c.pre, { 1, 0 }
  uselistorder i32 %v4_147e4, { 1, 0 }
  uselistorder i1 %v3_147dc, { 1, 0 }
  uselistorder i32 %v1_147dc, { 1, 0 }
  uselistorder i32 %v1_147c4, { 1, 0 }
  uselistorder i32 %v1_147a8, { 1, 0 }
  uselistorder i32 %v1_147a0, { 1, 0 }
  uselistorder i32 %v0_14794, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 4, 2, 1, 3, 0, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 5, 6, 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 4, 2, 3, 5, 6 }
  uselistorder i32 ()* @function_130fc, { 3, 2, 4, 1, 0 }
  uselistorder i32 (i32, i32)* @function_1320c, { 6, 2, 1, 11, 3, 8, 4, 10, 9, 7, 5, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 8, 14, 9, 10, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 }
  uselistorder label %dec_label_pc_1483c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1483c, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_147f4, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14798, { 1, 0 }
  uselistorder label %dec_label_pc_14794, { 1, 0 }
  uselistorder label %dec_label_pc_14768, { 1, 0 }
  uselistorder label %dec_label_pc_1470c, { 1, 0 }
}

define i32 @function_14850(i32 %arg1) local_unnamed_addr {
dec_label_pc_14850:
  %stack_var_-16 = alloca i32, align 4
  %v2_14850 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_14850, i32* @r0, align 4
  %v8_1486c = call i32 @function_14afc(i32 %v2_14850, i32 ptrtoint (i32* @global_var_14af4.591 to i32), i32 ptrtoint (i32* @global_var_1ea00.645 to i32), i32 84732, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_1487c = call i32 @function_14af4()
  %v2_14884 = load i32, i32* @global_var_1ead4.649, align 4
  %v2_14888 = icmp eq i32 %v2_14884, 0
  br i1 %v2_14888, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_14850
  call void @__pseudo_branch(i32 %v2_14884)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14850, %bb
  store i32 %v2_14850, i32* @r0, align 4
  %v8_148a8 = call i32 @function_14afc(i32 %v2_14850, i32 1, i32 ptrtoint (i32* @global_var_1ea00.645 to i32), i32 84732, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_148a8, i32* @r0, align 4
  %v1_148ac = call i32 @function_14a88(i32 %v8_148a8)
  %v0_148c0 = load i32, i32* @r4, align 4
  %v1_148c4 = call i32 @function_14ef8(i32 %v0_148c0)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_14850, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_14af4, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_14afc, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 84732, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1ea00.645 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_14af4.591 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_148e4(i32 %arg1) local_unnamed_addr {
dec_label_pc_148e4:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_148e4 = load i32, i32* @r4, align 4
  store i32 %v3_148e4, i32* %stack_var_-20, align 4
  %v6_148e4 = load i32, i32* @r5, align 4
  %v9_148e4 = load i32, i32* @r6, align 4
  %v16_148e4 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @ip, align 4
  %v2_148e8 = icmp eq i32 %arg1, 0
  %v2_148ec = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_148e8, label %dec_label_pc_14a70, label %dec_label_pc_14904.preheader

dec_label_pc_14904.preheader:                     ; preds = %dec_label_pc_148e4
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_1490c17 = add i32 %v16_148e4, 124
  br label %dec_label_pc_148fc

dec_label_pc_148fc:                               ; preds = %dec_label_pc_14904.preheader, %dec_label_pc_148fc
  %v5_1490c18 = phi i32 [ %v5_1490c17, %dec_label_pc_14904.preheader ], [ %v5_1490c, %dec_label_pc_148fc ]
  %v2_14900 = add i32 %v5_1490c18, -136
  %v3_14900 = inttoptr i32 %v2_14900 to i32*
  store i32 0, i32* %v3_14900, align 4
  %v0_14904.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_14904 = add i32 %v0_14904.pre, -1
  store i32 %v1_14904, i32* %r1.global-to-local, align 4
  %v6_14904 = icmp slt i32 %v1_14904, 0
  %v4_1490c = mul i32 %v1_14904, 4
  %v5_1490c = add i32 %v4_1490c, %v16_148e4
  br i1 %v6_14904, label %dec_label_pc_14914, label %dec_label_pc_148fc

dec_label_pc_14914:                               ; preds = %dec_label_pc_148fc
  %v2_14914 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_14914, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_14924 = load i32, i32* @ip, align 4
  store i32 %v0_14924, i32* %stack_var_-28, align 4
  %v0_1492c = call i32 @function_13f18()
  store i32 %v0_1492c, i32* %r0.global-to-local, align 4
  %v1_14930 = load i32, i32* @r5, align 4
  %v5_14934 = icmp slt i32 %v0_1492c, %v1_14930
  br i1 %v5_14934, label %dec_label_pc_14a78, label %dec_label_pc_14938

dec_label_pc_14938:                               ; preds = %dec_label_pc_14914
  %v2_14938 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_14938, i32* @r4, align 4
  store i32 %v1_14930, i32* %r0.global-to-local, align 4
  store i32 %v2_14914, i32* %r1.global-to-local, align 4
  %v3_14948 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_14948 = call i32 @function_1372c(i32 %v1_14930, %_TYPEDEF_sigset_t* %v3_14948, i32 %v2_14938)
  store i32 %v4_14948, i32* %r0.global-to-local, align 4
  %v1_1494c = load i32, i32* @r5, align 4
  %v9_1494c = icmp eq i32 %v4_14948, %v1_1494c
  br i1 %v9_1494c, label %dec_label_pc_14954, label %dec_label_pc_14a78

dec_label_pc_14954:                               ; preds = %dec_label_pc_14938
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_14938, i32* %r0.global-to-local, align 4
  %v2_1495c = call i32 @function_13ef4(i32 %v2_14938, i32 17)
  store i32 %v2_1495c, i32* %r0.global-to-local, align 4
  %v1_14960 = load i32, i32* @r5, align 4
  %v9_14960 = icmp eq i32 %v2_1495c, %v1_14960
  br i1 %v9_14960, label %dec_label_pc_14978.preheader, label %dec_label_pc_14954.dec_label_pc_14a40_crit_edge

dec_label_pc_14954.dec_label_pc_14a40_crit_edge:  ; preds = %dec_label_pc_14954
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_14a40

dec_label_pc_14978.preheader:                     ; preds = %dec_label_pc_14954
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14970

dec_label_pc_14970:                               ; preds = %dec_label_pc_14978.preheader, %dec_label_pc_14970
  %v5_1498016 = phi i32 [ %v5_1490c17, %dec_label_pc_14978.preheader ], [ %v5_14980, %dec_label_pc_14970 ]
  %v2_14974 = add i32 %v5_1498016, -136
  %v3_14974 = inttoptr i32 %v2_14974 to i32*
  store i32 0, i32* %v3_14974, align 4
  %v0_14978.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_14978 = add i32 %v0_14978.pre, -1
  store i32 %v1_14978, i32* %r1.global-to-local, align 4
  %v6_14978 = icmp slt i32 %v1_14978, 0
  %v4_14980 = mul i32 %v1_14978, 4
  %v5_14980 = add i32 %v4_14980, %v16_148e4
  br i1 %v6_14978, label %dec_label_pc_14988, label %dec_label_pc_14970

dec_label_pc_14988:                               ; preds = %dec_label_pc_14970
  store i32 %v2_14914, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_14990 = call i32 @function_13f18()
  store i32 %v0_14990, i32* %r0.global-to-local, align 4
  %v1_14994 = icmp slt i32 %v0_14990, 0
  br i1 %v1_14994, label %dec_label_pc_14a78, label %dec_label_pc_1499c

dec_label_pc_1499c:                               ; preds = %dec_label_pc_14988
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_149a8 = call i32 @function_14de0(i32 17, i32* null, i32 %v2_148ec)
  store i32 %v4_149a8, i32* %r0.global-to-local, align 4
  %v1_149ac = icmp slt i32 %v4_149a8, 0
  br i1 %v1_149ac, label %dec_label_pc_149b4, label %dec_label_pc_149dc

dec_label_pc_149b4:                               ; preds = %dec_label_pc_1499c
  %v0_149b4 = call i32 @function_13a84()
  store i32 %v2_14938, i32* %r1.global-to-local, align 4
  store i32 %v0_149b4, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_149c8 = inttoptr i32 %v0_149b4 to i32*
  %v2_149c8 = load i32, i32* %v1_149c8, align 4
  store i32 %v2_149c8, i32* @r4, align 4
  %v3_149cc = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_149cc = call i32 @function_1372c(i32 2, %_TYPEDEF_sigset_t* %v3_149cc, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_149d4 = load i32, i32* @r4, align 4
  %v1_149d4 = load i32, i32* %r5.global-to-local, align 4
  %v2_149d4 = inttoptr i32 %v1_149d4 to i32*
  store i32 %v0_149d4, i32* %v2_149d4, align 4
  %v17_14a80.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14a7c

dec_label_pc_149dc:                               ; preds = %dec_label_pc_1499c
  %v2_149dc = load i32, i32* %stack_var_-424, align 4
  %v7_149e0 = icmp eq i32 %v2_149dc, 1
  %v2_149e8 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_149e8, i32* @r4, align 4
  br i1 %v7_149e0, label %dec_label_pc_149f0, label %dec_label_pc_14a24

dec_label_pc_149f0:                               ; preds = %dec_label_pc_149dc
  store i32 %v2_149e8, i32* %r1.global-to-local, align 4
  store i32 %v2_149e8, i32* %r0.global-to-local, align 4
  %v2_149f8 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_149f8 = call i32 @function_1527c(%timespec* %v2_149f8, i32 %v2_149e8)
  store i32 %v3_149f8, i32* %r0.global-to-local, align 4
  store i32 %v3_149f8, i32* %r6.global-to-local, align 4
  %v0_14a00 = call i32 @function_13a84()
  store i32 %v2_14938, i32* %r1.global-to-local, align 4
  store i32 %v0_14a00, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_14a14 = inttoptr i32 %v0_14a00 to i32*
  %v2_14a14 = load i32, i32* %v1_14a14, align 4
  store i32 %v2_14a14, i32* @r4, align 4
  %v3_14a18 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_14a18 = call i32 @function_1372c(i32 2, %_TYPEDEF_sigset_t* %v3_14a18, i32 0)
  store i32 %v4_14a18, i32* %r0.global-to-local, align 4
  %v0_14a1c = load i32, i32* @r4, align 4
  %v1_14a1c = load i32, i32* %r5.global-to-local, align 4
  %v2_14a1c = inttoptr i32 %v1_14a1c to i32*
  store i32 %v0_14a1c, i32* %v2_14a1c, align 4
  %v0_14a4c.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14a4c

dec_label_pc_14a24:                               ; preds = %dec_label_pc_149dc
  store i32 %v2_14938, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_14a30 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_14a30 = call i32 @function_1372c(i32 2, %_TYPEDEF_sigset_t* %v3_14a30, i32 0)
  store i32 %v4_14a30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14a40

dec_label_pc_14a40:                               ; preds = %dec_label_pc_14954.dec_label_pc_14a40_crit_edge, %dec_label_pc_14a24
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_14954.dec_label_pc_14a40_crit_edge ], [ %v2_149e8, %dec_label_pc_14a24 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_14a44 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_14a44 = call i32 @function_1527c(%timespec* %v2_14a44, i32 %storemerge.pre-phi)
  store i32 %v3_14a44, i32* %r0.global-to-local, align 4
  store i32 %v3_14a44, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14a4c

dec_label_pc_14a4c:                               ; preds = %dec_label_pc_149f0, %dec_label_pc_14a40
  %v0_14a4c = phi i32 [ %v0_14a4c.pr, %dec_label_pc_149f0 ], [ %v3_14a44, %dec_label_pc_14a40 ]
  %v2_14a4c = icmp eq i32 %v0_14a4c, 0
  br i1 %v2_14a4c, label %dec_label_pc_14a70, label %dec_label_pc_14a54

dec_label_pc_14a54:                               ; preds = %dec_label_pc_14a4c
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_14a5c = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_14a5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14a7c

dec_label_pc_14a70:                               ; preds = %dec_label_pc_148e4, %dec_label_pc_14a4c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14a7c

dec_label_pc_14a78:                               ; preds = %dec_label_pc_14938, %dec_label_pc_14988, %dec_label_pc_14914
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14a7c

dec_label_pc_14a7c:                               ; preds = %dec_label_pc_14a54, %dec_label_pc_14a70, %dec_label_pc_149b4, %dec_label_pc_14a78
  %v17_14a80 = phi i32 [ %v3_14a5c, %dec_label_pc_14a54 ], [ 0, %dec_label_pc_14a70 ], [ %v17_14a80.pre, %dec_label_pc_149b4 ], [ -1, %dec_label_pc_14a78 ]
  %v2_14a80 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_14a80, i32* @r4, align 4
  store i32 %v6_148e4, i32* @r5, align 4
  store i32 %v9_148e4, i32* @r6, align 4
  ret i32 %v17_14a80

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_149e8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_14978, { 0, 2, 1 }
  uselistorder i32 %v2_14938, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_14930, { 1, 0, 2 }
  uselistorder i32 %v1_14904, { 0, 2, 1 }
  uselistorder i32 %v16_148e4, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 10, 9, 0, 11, 12, 14, 13, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 0, 7, 6, 9, 8, 20, 10, 12, 13, 11, 15, 14, 16, 22, 17, 21, 18, 19, 1 }
  uselistorder i32 (i32, i32*, i32)* @function_14de0, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_1372c, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_13f18, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14a7c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_14a78, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14a70, { 1, 0 }
  uselistorder label %dec_label_pc_14a4c, { 1, 0 }
  uselistorder label %dec_label_pc_14a40, { 1, 0 }
  uselistorder label %dec_label_pc_14970, { 1, 0 }
  uselistorder label %dec_label_pc_148fc, { 1, 0 }
}

define i32 @function_14a88(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ab4:
  %stack_var_-8 = alloca i32, align 4
  %v3_14a88 = load i32, i32* @r4, align 4
  store i32 %v3_14a88, i32* %stack_var_-8, align 4
  %v2_14ab8 = load i32, i32* @global_var_1eae4.658, align 4
  %v2_14abc = icmp eq i32 %v2_14ab8, 0
  br i1 %v2_14abc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_14ab4
  call void @__pseudo_branch(i32 %v2_14ab8)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14ab4, %bb
  %v2_14acc = load i32, i32* @global_var_1eae8.660, align 4
  %v2_14ad0 = icmp eq i32 %v2_14acc, 0
  br i1 %v2_14ad0, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_14ad4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_14ad4, i32* @r4, align 4
  %v9_14ad4 = load i32, i32* @r0, align 4
  ret i32 %v9_14ad4

bb13:                                             ; preds = %.thread
  call void @__pseudo_branch(i32 %v2_14acc)
  %v2_14ae0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14ae0, i32* @r4, align 4
  %v8_14ae0 = load i32, i32* @r0, align 4
  ret i32 %v8_14ae0

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_14af4() local_unnamed_addr {
dec_label_pc_14af4:
  ret i32 0
}

define i32 @function_14afc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14afc:
  %v1_14afc = load i32, i32* @r0, align 4
  ret i32 %v1_14afc
}

define i32 @function_14b00(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14b00:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_14b00 = load i32, i32* @r4, align 4
  store i32 %v3_14b00, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_14b10 = call i32 @function_133c0(i32 %arg1, i32 1)
  %v7_14b14 = icmp eq i32 %v2_14b10, -1
  br i1 %v7_14b14, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_14b00
  %v3_14b18 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_14b18, i32* @r4, align 4
  ret i32 %v2_14b10

bb4:                                              ; preds = %dec_label_pc_14b00
  %v0_14b1c = load i32, i32* @r4, align 4
  %v4_14b24 = call i32 @function_135dc(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_1659c.663, i32 0, i32 0), i32 %v0_14b1c)
  %v1_14b28 = load i32, i32* %r5.global-to-local, align 4
  %v9_14b28 = icmp eq i32 %v4_14b24, %v1_14b28
  br i1 %v9_14b28, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_14b2c = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_14b2c, i32* @r4, align 4
  ret i32 %v4_14b24

bb6:                                              ; preds = %bb4
  %v0_14b30 = call i32 @function_1455c()
  %v0_14b34 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14b34, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_14b30

; uselistorder directives
  uselistorder i32 %v2_14b10, { 1, 0 }
  uselistorder i1* @cpsr_z, { 7, 0, 9, 8, 4, 5, 1, 2, 3, 6 }
  uselistorder i32 ()* @function_1455c, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_135dc, { 9, 6, 0, 1, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 (i32, i32)* @function_133c0, { 0, 9, 4, 3, 6, 5, 13, 12, 15, 14, 11, 10, 8, 7, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_14b38(i32 %arg1) local_unnamed_addr {
dec_label_pc_14b38:
  %v2_14b3c = load i32, i32* @global_var_1eaec.665, align 4
  %v2_14b40 = icmp eq i32 %v2_14b3c, 0
  br i1 %v2_14b40, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_14b38
  %v6_14b4c = load i32, i32* @r0, align 4
  ret i32 %v6_14b4c

bb2:                                              ; preds = %dec_label_pc_14b38
  store i32 1, i32* @global_var_1eaec.665, align 4
  store i32 4096, i32* @global_var_1eae0.616, align 4
  ret i32 undef
}

define i32 @function_14b94(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14b94:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_14b98 = mul i32 %arg2, 4
  %v5_14b98 = add i32 %tmp, %v4_14b98
  %v2_14b9c = load i32, i32* %arg3, align 4
  %v2_14ba0 = ptrtoint i32* %stack_var_-120 to i32
  %v1_14ba4 = add i32 %v5_14b98, 4
  %v9_14ba8 = icmp eq i32 %v1_14ba4, %v2_14b9c
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1ead8.670, align 4
  store i32 %v1_14ba4, i32* @global_var_1eadc.672, align 4
  store i32 %arg6, i32* @global_var_1eae8.660, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_14ba8, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_14b94
  store i32 %v5_14b98, i32* @global_var_1eadc.672, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_14b94, %bb
  %v2_14be8 = bitcast i32* %stack_var_-120 to i8*
  %v3_14be8 = call i32 @function_13af0(i8* %v2_14be8, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1eadc.672, align 4
  br label %dec_label_pc_14bf8

dec_label_pc_14bf8:                               ; preds = %dec_label_pc_14bf8, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_14bf8, %dec_label_pc_14bf8 ]
  %v1_14bf8 = inttoptr i32 %storemerge to i32*
  %v2_14bf8 = load i32, i32* %v1_14bf8, align 4
  %v4_14bf8 = add i32 %storemerge, 4
  %v2_14bfc = icmp eq i32 %v2_14bf8, 0
  br i1 %v2_14bfc, label %dec_label_pc_14c08, label %dec_label_pc_14bf8

dec_label_pc_14c08:                               ; preds = %dec_label_pc_14bf8
  store i32 %v4_14bf8, i32* @r4, align 4
  %v1_14c2822 = inttoptr i32 %v4_14bf8 to i32*
  %v2_14c2823 = load i32, i32* %v1_14c2822, align 4
  %v2_14c2c25 = icmp eq i32 %v2_14c2823, 0
  br i1 %v2_14c2c25, label %dec_label_pc_14c34, label %dec_label_pc_14c10

dec_label_pc_14c10:                               ; preds = %dec_label_pc_14c08, %dec_label_pc_14c28
  %v5_14c14 = phi i32 [ %v2_14c28, %dec_label_pc_14c28 ], [ %v2_14c2823, %dec_label_pc_14c08 ]
  %v2_14c10 = icmp ugt i32 %v5_14c14, 13
  %v7_14c10 = icmp eq i32 %v5_14c14, 14
  %v2_14c14 = xor i1 %v2_14c10, true
  %v3_14c14 = or i1 %v7_14c10, %v2_14c14
  br i1 %v3_14c14, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_14c10
  %v6_14c14 = and i32 %v5_14c14, 536870912
  %v7_14c14 = icmp ne i32 %v6_14c14, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_14c10, %bb42
  %v1_14c20 = phi i1 [ %v2_14c10, %dec_label_pc_14c10 ], [ %v7_14c14, %bb42 ]
  %v2_14c18 = xor i1 %v1_14c20, true
  %v3_14c18 = or i1 %v7_14c10, %v2_14c18
  br i1 %v3_14c18, label %bb44, label %dec_label_pc_14c28

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_14c28

dec_label_pc_14c28:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_14c18, i32 ptrtoint (i32* @global_var_13ad0.674 to i32))
  %v0_14c24 = load i32, i32* @r4, align 4
  %v1_14c24 = add i32 %v0_14c24, 8
  store i32 %v1_14c24, i32* @r4, align 4
  %v1_14c28 = inttoptr i32 %v1_14c24 to i32*
  %v2_14c28 = load i32, i32* %v1_14c28, align 4
  %v2_14c2c = icmp eq i32 %v2_14c28, 0
  br i1 %v2_14c2c, label %dec_label_pc_14c34, label %dec_label_pc_14c10

dec_label_pc_14c34:                               ; preds = %dec_label_pc_14c28, %dec_label_pc_14c08
  %v1_14c38 = call i32 @function_15c8c(i32 %v2_14ba0)
  store i32 %v1_14c38, i32* @r0, align 4
  %v1_14c3c = call i32 @function_14b38(i32 %v1_14c38)
  store i32 %v1_14c3c, i32* @r0, align 4
  %v2_14c48 = icmp eq i32 %tmp37, 0
  br i1 %v2_14c48, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_14c34
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_14c34, %bb45
  %v0_14c58 = phi i32 [ %tmp37, %dec_label_pc_14c34 ], [ 4096, %bb45 ]
  %v3_14c50 = icmp eq i32 %tmp36, -1
  %v8_14c50 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1eae0.616 to i32), i32* @r2, align 4
  store i32 %v0_14c58, i32* @global_var_1eae0.616, align 4
  br i1 %v3_14c50, label %dec_label_pc_14c60, label %dec_label_pc_14c88

dec_label_pc_14c60:                               ; preds = %bb46
  %v0_14c60 = call i32 @function_151ec()
  store i32 %v0_14c60, i32* @r0, align 4
  store i32 %v0_14c60, i32* @r4, align 4
  %v0_14c68 = call i32 @function_15194()
  %v0_14c6c = load i32, i32* @r4, align 4
  %v9_14c6c = icmp eq i32 %v0_14c6c, %v0_14c68
  br i1 %v9_14c6c, label %dec_label_pc_14c74, label %dec_label_pc_14cb0

dec_label_pc_14c74:                               ; preds = %dec_label_pc_14c60
  %v1_14c74 = call i32 @function_151c0(i32 %v0_14c68)
  store i32 %v1_14c74, i32* @r0, align 4
  store i32 %v1_14c74, i32* @r4, align 4
  %v0_14c7c = call i32 @function_15168()
  %v0_14c80 = load i32, i32* @r4, align 4
  %v9_14c80 = icmp eq i32 %v0_14c80, %v0_14c7c
  br i1 %v9_14c80, label %dec_label_pc_14c88, label %dec_label_pc_14cb0

dec_label_pc_14c88:                               ; preds = %dec_label_pc_14c74, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_14c50, label %dec_label_pc_14d1c, label %dec_label_pc_14c94

dec_label_pc_14c94:                               ; preds = %dec_label_pc_14c88
  %v9_14c98 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_14c98, label %dec_label_pc_14ca0, label %dec_label_pc_14cb0

dec_label_pc_14ca0:                               ; preds = %dec_label_pc_14c94
  br label %dec_label_pc_14cb0

dec_label_pc_14cb0:                               ; preds = %dec_label_pc_14ca0, %dec_label_pc_14c94, %dec_label_pc_14c74, %dec_label_pc_14c60
  %v2_14cb8 = call i32 @function_14b00(i32 0, i32 32768)
  %v2_14cc4 = call i32 @function_14b00(i32 1, i32 32770)
  %v2_14cd0 = call i32 @function_14b00(i32 2, i32 32770)
  br label %dec_label_pc_14d1c

dec_label_pc_14d1c:                               ; preds = %dec_label_pc_14cb0, %dec_label_pc_14c88
  %v0_14ce0 = load i32, i32* %r6.global-to-local, align 4
  %v1_14ce0 = inttoptr i32 %v0_14ce0 to i32*
  %v2_14ce0 = load i32, i32* %v1_14ce0, align 4
  store i32 %v2_14ce0, i32* @global_var_1ea18, align 4
  store i32 %arg5, i32* @global_var_1eae4.658, align 4
  %v2_14d1c = icmp eq i32 %arg4, 0
  br i1 %v2_14d1c, label %dec_label_pc_14d58, label %bb47

bb47:                                             ; preds = %dec_label_pc_14d1c
  br label %dec_label_pc_14d58

dec_label_pc_14d58:                               ; preds = %dec_label_pc_14d1c, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_14d68 = call i32 @function_13a84()
  %v2_14d70 = inttoptr i32 %v1_14d68 to i32*
  store i32 0, i32* %v2_14d70, align 4
  %v0_14d9c = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_14da8 = call i32 @function_14850(i32 %v0_14d9c)
  ret i32 %v1_14da8

; uselistorder directives
  uselistorder i32 %v2_14c28, { 1, 0 }
  uselistorder i32 %v1_14c24, { 1, 0 }
  uselistorder i1 %v2_14c10, { 1, 0 }
  uselistorder i32 %v4_14bf8, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_14850, { 0, 7, 6, 4, 5, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_14b00, { 2, 1, 0 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1eae0.616, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 5, 9, 3, 4, 6, 7, 2, 8, 10, 11 }
  uselistorder i32 536870912, { 1, 0, 2 }
  uselistorder i1 true, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 49, 9, 10, 11, 12, 13, 17, 18, 19, 76, 77, 78, 79, 68, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 20, 21, 96, 97, 98, 50, 67, 15, 16, 66, 14, 99, 33, 32, 55, 61, 56, 62, 53, 60, 54, 65, 100, 22, 101, 102, 23, 24, 25, 103, 69, 70, 26, 27, 104, 71, 72, 28, 29, 105, 73, 74, 30, 31, 52, 106, 107, 63, 108, 34, 57, 35, 36, 51, 37, 38, 39, 109, 110, 111, 112, 58, 113, 114, 115, 116, 117, 118, 119, 120, 44, 121, 45, 46, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 43, 136, 137, 138, 139, 140, 141, 42, 142, 48, 143, 59, 64, 47, 144, 40, 41, 75, 145 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_14d58, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_14c28, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_14c10, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_14de0(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14de0:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_14de0 = load i32, i32* @r4, align 4
  %v6_14de0 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_14de4 = icmp eq i32* %arg2, null
  %v2_14de8 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_14de4, label %dec_label_pc_14e54, label %dec_label_pc_14df8

dec_label_pc_14df8:                               ; preds = %dec_label_pc_14de0
  %v2_14dfc = load i32, i32* %arg2, align 4
  %v4_14dfc = add i32 %tmp, 4
  store i32 %v4_14dfc, i32* @r1, align 4
  %v2_14e00 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_14e00, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_14dfc, i32* %stack_var_-156, align 4
  %v3_14e0c = call i32 @function_13ad0(i32 %v2_14e00, i32 %v4_14dfc, i32 128)
  store i32 %v3_14e0c, i32* %r0.global-to-local, align 4
  %v0_14e10 = load i32, i32* @r4, align 4
  %v1_14e10 = add i32 %v0_14e10, 132
  %v2_14e10 = inttoptr i32 %v1_14e10 to i32*
  %v3_14e10 = load i32, i32* %v2_14e10, align 4
  %v1_14e14 = and i32 %v3_14e10, 67108864
  %v2_14e14 = icmp eq i32 %v1_14e14, 0
  br i1 %v2_14e14, label %dec_label_pc_14e28, label %bb

bb:                                               ; preds = %dec_label_pc_14df8
  br label %dec_label_pc_14e44

dec_label_pc_14e28:                               ; preds = %dec_label_pc_14df8
  %v1_14e30 = and i32 %v3_14e10, 4
  %v2_14e30 = icmp eq i32 %v1_14e30, 0
  br i1 %v2_14e30, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_14e28
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_14e28, %bb20
  br label %dec_label_pc_14e44

dec_label_pc_14e44:                               ; preds = %bb, %bb21
  %v2_14e44 = icmp eq i32 %v0_14e10, 0
  %v3_14e48 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_14e48 = select i1 %v2_14e44, i32 0, i32 %v3_14e48
  %v0_14e54.pre = load i32, i32* @r5, align 4
  %v0_14e64.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14e54

dec_label_pc_14e54:                               ; preds = %dec_label_pc_14e44, %dec_label_pc_14de0
  %v0_14e64 = phi i32 [ %arg1, %dec_label_pc_14de0 ], [ %v0_14e64.pre, %dec_label_pc_14e44 ]
  %v0_14e54 = phi i32 [ %arg3, %dec_label_pc_14de0 ], [ %v0_14e54.pre, %dec_label_pc_14e44 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_14de0 ], [ %.v3_14e48, %dec_label_pc_14e44 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_14e54 = icmp eq i32 %v0_14e54, 0
  %.v2_14de8 = select i1 %v2_14e54, i32 0, i32 %v2_14de8
  store i32 %.v2_14de8, i32* @r2, align 4
  store i32 %v0_14e64, i32* %r0.global-to-local, align 4
  %v1_14e68 = call i32 @function_14ecc(i32 %v0_14e64)
  store i32 %v1_14e68, i32* %r0.global-to-local, align 4
  %v0_14e6c = load i32, i32* @r5, align 4
  %v2_14e6c = icmp eq i32 %v0_14e6c, 0
  br i1 %v2_14e6c, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_14e54
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_14e54, %bb25
  %v0_14e7c.pr = phi i32 [ 0, %dec_label_pc_14e54 ], [ 1, %bb25 ]
  %v1_14e74 = icmp slt i32 %v1_14e68, 0
  br i1 %v1_14e74, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_14eb0

thread-pre-split:                                 ; preds = %bb26
  %v2_14e7c = icmp eq i32 %v0_14e7c.pr, 0
  store i32 %v1_14e68, i32* @r4, align 4
  br i1 %v2_14e7c, label %dec_label_pc_14eb0, label %dec_label_pc_14e88

dec_label_pc_14e88:                               ; preds = %thread-pre-split
  %v2_14e88 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_14e6c, i32* %r0.global-to-local, align 4
  %v2_14e90 = inttoptr i32 %v0_14e6c to i32*
  store i32 %v2_14e88, i32* %v2_14e90, align 4
  %v3_14e90 = load i32, i32* %r0.global-to-local, align 4
  %v4_14e90 = add i32 %v3_14e90, 4
  store i32 %v4_14e90, i32* @r0, align 4
  %v2_14e94 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_14e94, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_14e9c = call i32 @function_13ad0(i32 %v4_14e90, i32 %v2_14e94, i32 128)
  store i32 %v3_14e9c, i32* %r0.global-to-local, align 4
  %v1_14ea4 = load i32, i32* @r5, align 4
  %v2_14ea4 = add i32 %v1_14ea4, 136
  %v3_14ea4 = inttoptr i32 %v2_14ea4 to i32*
  %v1_14eac = load i32, i32* @r5, align 4
  %v2_14eac = add i32 %v1_14eac, 132
  %v3_14eac = inttoptr i32 %v2_14eac to i32*
  %v0_14eb0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14eb0

dec_label_pc_14eb0:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_14e88
  %v0_14eb0 = phi i32 [ %v1_14e68, %thread-pre-split ], [ %v0_14eb0.pre, %dec_label_pc_14e88 ], [ %v1_14e68, %thread-pre-split.thread ]
  store i32 %v0_14eb0, i32* %r0.global-to-local, align 4
  store i32 %v3_14de0, i32* @r4, align 4
  store i32 %v6_14de0, i32* @r5, align 4
  ret i32 %v0_14eb0

; uselistorder directives
  uselistorder i32 %v0_14eb0, { 1, 0 }
  uselistorder i32 %v0_14e6c, { 1, 0, 2 }
  uselistorder i32 %v0_14e64, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 2, 7, 1, 0 }
  uselistorder label %dec_label_pc_14eb0, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_14e44, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_14ecc(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ecc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14ecc = load i32, i32* @r4, align 4
  store i32 %v3_14ecc, i32* %stack_var_-8, align 4
  %v1_14ed0 = load i32, i32* @r1, align 4
  %v2_14ed0 = inttoptr i32 %v1_14ed0 to %sigaction*
  %v3_14ed0 = load i32, i32* @r2, align 4
  %v4_14ed0 = inttoptr i32 %v3_14ed0 to %sigaction*
  %v5_14ed0 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_14ed0, %sigaction* %v4_14ed0)
  store i32 %v5_14ed0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_14ed0, -4095
  br i1 %tmp, label %dec_label_pc_14ef0, label %dec_label_pc_14ee0

dec_label_pc_14ee0:                               ; preds = %dec_label_pc_14ecc
  %v0_14ee0 = call i32 @function_13a84()
  %v0_14ee4 = load i32, i32* %r4.global-to-local, align 4
  %v1_14ee4 = sub i32 0, %v0_14ee4
  %v2_14ee8 = inttoptr i32 %v0_14ee0 to i32*
  store i32 %v1_14ee4, i32* %v2_14ee8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14ef0

dec_label_pc_14ef0:                               ; preds = %dec_label_pc_14ecc, %dec_label_pc_14ee0
  %v0_14ef0 = phi i32 [ %v5_14ed0, %dec_label_pc_14ecc ], [ -1, %dec_label_pc_14ee0 ]
  %v2_14ef4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14ef4, i32* %r4.global-to-local, align 4
  ret i32 %v0_14ef0

; uselistorder directives
  uselistorder i32 %v5_14ed0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14ef0, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_14ef8(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_14ef8:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_14f20() local_unnamed_addr {
dec_label_pc_14f20:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_14f30 = load i32, i32* @r0, align 4
  %v4_14f30 = call i32 @fstat(i32 %v0_14f30, %stat* %tmp4)
  store i32 %v4_14f30, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_14f30, -4095
  br i1 %tmp, label %dec_label_pc_14f54, label %dec_label_pc_14f40

dec_label_pc_14f40:                               ; preds = %dec_label_pc_14f20
  %v0_14f40 = call i32 @function_13a84()
  %v0_14f44 = load i32, i32* %r4.global-to-local, align 4
  %v1_14f44 = sub i32 0, %v0_14f44
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_14f4c = inttoptr i32 %v0_14f40 to i32*
  store i32 %v1_14f44, i32* %v2_14f4c, align 4
  br label %dec_label_pc_14f64

dec_label_pc_14f54:                               ; preds = %dec_label_pc_14f20
  %v2_14f54 = icmp eq i32 %v4_14f30, 0
  store i32 85860, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_14f54, i32 ptrtoint (i32* @global_var_1563c.690 to i32))
  br label %dec_label_pc_14f64

dec_label_pc_14f64:                               ; preds = %dec_label_pc_14f40, %dec_label_pc_14f54
  %v0_14f64 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_14f64

; uselistorder directives
  uselistorder i32 %v4_14f30, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 5, 16, 14, 15, 9, 10, 6, 2, 3, 4, 0, 1, 7, 8, 11, 12, 13 }
  uselistorder label %dec_label_pc_14f64, { 1, 0 }
}

define i32 @function_14f70(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14f70:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_14f70 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_14f78 = call i32 @function_15004()
  store i32 %v0_14f78, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_14f78, 1
  br i1 %tmp8, label %dec_label_pc_14ffc, label %dec_label_pc_14fe8.preheader

dec_label_pc_14fe8.preheader:                     ; preds = %dec_label_pc_14f70
  %v5_14f80 = load i32, i32* @r4, align 4
  %v7_14f80 = add i32 %v5_14f80, %v0_14f78
  store i32 %v7_14f80, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14fe8

dec_label_pc_14f8c:                               ; preds = %dec_label_pc_14fe8
  %v1_14f8c = add i32 %v2_14f9c, 16
  %v2_14f8c = inttoptr i32 %v1_14f8c to i32*
  %v3_14f8c = load i32, i32* %v2_14f8c, align 4
  store i32 %v3_14f8c, i32* @lr, align 4
  %v2_14f90 = inttoptr i32 %v1_14fec to i32*
  %v3_14f90 = load i32, i32* %v2_14f90, align 4
  store i32 %v3_14f90, i32* %r2.global-to-local, align 4
  %v1_14f94 = add i32 %v2_14f9c, 18
  %v2_14f94 = inttoptr i32 %v1_14f94 to i8*
  %v3_14f94 = load i8, i8* %v2_14f94, align 1
  %v4_14f94 = zext i8 %v3_14f94 to i32
  store i32 %v4_14f94, i32* %ip.global-to-local, align 4
  %v3_14f98 = sdiv i32 %v3_14f8c, 256
  store i32 %v3_14f98, i32* %r3.global-to-local, align 4
  %v1_14f9c = trunc i32 %v3_14f8c to i8
  %v4_14f9c = inttoptr i32 %v1_14fec to i8*
  store i8 %v1_14f9c, i8* %v4_14f9c, align 1
  %v0_14fa0 = load i32, i32* %r2.global-to-local, align 4
  %v1_14fa0 = load i32, i32* @r4, align 4
  %v2_14fa0 = add i32 %v1_14fa0, 4
  %v3_14fa0 = inttoptr i32 %v2_14fa0 to i32*
  store i32 %v0_14fa0, i32* %v3_14fa0, align 4
  %v0_14fa4 = load i32, i32* %ip.global-to-local, align 4
  %v1_14fa4 = trunc i32 %v0_14fa4 to i8
  %v2_14fa4 = load i32, i32* @r4, align 4
  %v3_14fa4 = add i32 %v2_14fa4, 10
  %v4_14fa4 = inttoptr i32 %v3_14fa4 to i8*
  store i8 %v1_14fa4, i8* %v4_14fa4, align 1
  %v0_14fa8 = load i32, i32* %r3.global-to-local, align 4
  %v1_14fa8 = trunc i32 %v0_14fa8 to i8
  %v2_14fa8 = load i32, i32* @r4, align 4
  %v3_14fa8 = add i32 %v2_14fa8, 9
  %v4_14fa8 = inttoptr i32 %v3_14fa8 to i8*
  store i8 %v1_14fa8, i8* %v4_14fa8, align 1
  %v0_14fac = load i32, i32* @r4, align 4
  %v1_14fac = add i32 %v0_14fac, 8
  %v2_14fac = inttoptr i32 %v1_14fac to i8*
  %v3_14fac = load i8, i8* %v2_14fac, align 1
  %v4_14fac = zext i8 %v3_14fac to i32
  store i32 %v4_14fac, i32* %r2.global-to-local, align 4
  %v0_14fb0 = load i32, i32* @r5, align 4
  %v1_14fb0 = add i32 %v0_14fb0, 1
  %v2_14fb0 = inttoptr i32 %v1_14fb0 to i8*
  %v3_14fb0 = load i8, i8* %v2_14fb0, align 1
  %v4_14fb0 = zext i8 %v3_14fb0 to i32
  store i32 %v4_14fb0, i32* %r3.global-to-local, align 4
  %v4_14fb4 = mul nuw nsw i32 %v4_14fb0, 256
  %v5_14fb4 = or i32 %v4_14fb4, %v4_14fac
  %v1_14fb8 = add nsw i32 %v5_14fb4, -19
  store i32 %v1_14fb8, i32* @r2, align 4
  %v3_14fbc = call i32 @function_13ae0(i32 %v1_14ff4, i32 %v1_14ff0, i32 %v1_14fb8)
  %v0_14fc0 = load i32, i32* @r4, align 4
  %v1_14fc0 = add i32 %v0_14fc0, 8
  %v2_14fc0 = inttoptr i32 %v1_14fc0 to i8*
  %v3_14fc0 = load i8, i8* %v2_14fc0, align 1
  %v4_14fc0 = zext i8 %v3_14fc0 to i32
  store i32 %v4_14fc0, i32* %r3.global-to-local, align 4
  %v0_14fc4 = load i32, i32* @r5, align 4
  %v1_14fc4 = add i32 %v0_14fc4, 1
  %v2_14fc4 = inttoptr i32 %v1_14fc4 to i8*
  %v3_14fc4 = load i8, i8* %v2_14fc4, align 1
  %v4_14fc4 = zext i8 %v3_14fc4 to i32
  store i32 %v0_14fc0, i32* @r0, align 4
  %v4_14fcc = mul nuw nsw i32 %v4_14fc4, 256
  %v5_14fcc = or i32 %v4_14fcc, %v4_14fc0
  store i32 %v5_14fcc, i32* @r2, align 4
  store i32 %v0_14fc0, i32* @r1, align 4
  %v3_14fd4 = call i32 @function_13ae0(i32 %v0_14fc0, i32 %v0_14fc0, i32 %v5_14fcc)
  %v0_14fd8 = load i32, i32* @r4, align 4
  %v1_14fd8 = add i32 %v0_14fd8, 8
  %v2_14fd8 = inttoptr i32 %v1_14fd8 to i8*
  %v3_14fd8 = load i8, i8* %v2_14fd8, align 1
  %v4_14fd8 = zext i8 %v3_14fd8 to i32
  store i32 %v4_14fd8, i32* %r3.global-to-local, align 4
  %v0_14fdc = load i32, i32* @r5, align 4
  %v1_14fdc = add i32 %v0_14fdc, 1
  %v2_14fdc = inttoptr i32 %v1_14fdc to i8*
  %v3_14fdc = load i8, i8* %v2_14fdc, align 1
  %v4_14fdc = zext i8 %v3_14fdc to i32
  store i32 %v4_14fdc, i32* @r2, align 4
  %v4_14fe0 = mul nuw nsw i32 %v4_14fdc, 256
  %v5_14fe0 = or i32 %v4_14fe0, %v4_14fd8
  store i32 %v5_14fe0, i32* %r3.global-to-local, align 4
  %v2_14fe4 = add i32 %v5_14fe0, %v0_14fd8
  store i32 %v2_14fe4, i32* @r4, align 4
  %v1_14fe8.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_14fe8

dec_label_pc_14fe8:                               ; preds = %dec_label_pc_14fe8.preheader, %dec_label_pc_14f8c
  %v1_14fe8 = phi i32 [ %v7_14f80, %dec_label_pc_14fe8.preheader ], [ %v1_14fe8.pre, %dec_label_pc_14f8c ]
  %v2_14f9c = phi i32 [ %v5_14f80, %dec_label_pc_14fe8.preheader ], [ %v2_14fe4, %dec_label_pc_14f8c ]
  %v3_14fe8 = icmp ult i32 %v2_14f9c, %v1_14fe8
  %v1_14fec = add i32 %v2_14f9c, 8
  store i32 %v1_14fec, i32* @r5, align 4
  %v1_14ff0 = add i32 %v2_14f9c, 19
  store i32 %v1_14ff0, i32* @r1, align 4
  %v1_14ff4 = add i32 %v2_14f9c, 11
  store i32 %v1_14ff4, i32* @r0, align 4
  br i1 %v3_14fe8, label %dec_label_pc_14f8c, label %dec_label_pc_14ffc.loopexit

dec_label_pc_14ffc.loopexit:                      ; preds = %dec_label_pc_14fe8
  %v0_14ffc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_14ffc

dec_label_pc_14ffc:                               ; preds = %dec_label_pc_14f70, %dec_label_pc_14ffc.loopexit
  %v0_14ffc = phi i32 [ %v0_14ffc.pre, %dec_label_pc_14ffc.loopexit ], [ %v0_14f78, %dec_label_pc_14f70 ]
  store i32 %v6_14f70, i32* @r5, align 4
  ret i32 %v0_14ffc

; uselistorder directives
  uselistorder i32 %v1_14ff4, { 1, 0 }
  uselistorder i32 %v1_14ff0, { 1, 0 }
  uselistorder i32 %v1_14fec, { 2, 1, 0 }
  uselistorder i32 %v2_14f9c, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_14fc0, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_14f8c, { 1, 0, 2 }
  uselistorder i32 %v5_14f80, { 1, 0 }
  uselistorder i32 %v0_14f78, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_13ae0, { 7, 6, 5, 8, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_14ffc, { 1, 0 }
  uselistorder label %dec_label_pc_14fe8, { 1, 0 }
}

define i32 @function_15004() local_unnamed_addr {
dec_label_pc_15004:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_15008 = load i32, i32* @r4, align 4
  %v9_15008 = load i32, i32* @r6, align 4
  %v0_1500c = load i32, i32* @r2, align 4
  %v1_1500c = add i32 %v0_1500c, 6
  %v2_15014 = ptrtoint i32* %stack_var_-60 to i32
  %v1_15018 = and i32 %v1_1500c, -4
  store i32 %v1_15018, i32* %r3.global-to-local, align 4
  %v2_1501c = sub i32 %v2_15014, %v1_15018
  %v0_15020 = load i32, i32* @r1, align 4
  store i32 %v0_15020, i32* %r8.global-to-local, align 4
  store i32 %v0_1500c, i32* %stack_var_-60, align 4
  store i32 %v2_1501c, i32* %sl.global-to-local, align 4
  %v0_1502c = load i32, i32* @r0, align 4
  %v1_15030 = inttoptr i32 %v2_1501c to %linux_dirent64*
  store i32 %v2_1501c, i32* %r1.global-to-local, align 4
  %v5_15034 = call i32 @getdents64(i32 %v0_1502c, %linux_dirent64* %v1_15030, i32 %v0_1500c)
  store i32 %v5_15034, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_15034, -4095
  br i1 %tmp, label %dec_label_pc_15058, label %dec_label_pc_15044

dec_label_pc_15044:                               ; preds = %dec_label_pc_15004
  %v0_15044 = call i32 @function_13a84()
  %v0_15048 = load i32, i32* @r6, align 4
  %v1_15048 = sub i32 0, %v0_15048
  store i32 %v1_15048, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_15050 = inttoptr i32 %v0_15044 to i32*
  store i32 %v1_15048, i32* %v2_15050, align 4
  %v0_15060.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15060

dec_label_pc_15058:                               ; preds = %dec_label_pc_15004
  br i1 false, label %dec_label_pc_15060, label %dec_label_pc_15068

dec_label_pc_15060:                               ; preds = %dec_label_pc_15058, %dec_label_pc_15044
  %v0_15060 = phi i32 [ -1, %dec_label_pc_15058 ], [ %v0_15060.pre, %dec_label_pc_15044 ]
  store i32 %v0_15060, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1515c

dec_label_pc_15068:                               ; preds = %dec_label_pc_15058
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_15070 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_15070, i32* @r5, align 4
  %v0_15074 = load i32, i32* @sp, align 4
  store i32 %v0_15074, i32* @r4, align 4
  br label %dec_label_pc_15138

dec_label_pc_15084:                               ; preds = %dec_label_pc_15138
  %v2_15150 = add i32 %v3_1513c, %v0_15150
  %v1_15084 = add i32 %v0_15088, 17
  %v2_15084 = inttoptr i32 %v1_15084 to i8*
  %v3_15084 = load i8, i8* %v2_15084, align 1
  %v4_15084 = zext i8 %v3_15084 to i32
  %v2_15088 = inttoptr i32 %v1_15144 to i8*
  %v3_15088 = load i8, i8* %v2_15088, align 1
  %v4_15088 = zext i8 %v3_15088 to i32
  %v4_1508c = mul nuw nsw i32 %v4_15084, 256
  %v5_1508c = or i32 %v4_15088, %v4_1508c
  %v1_15090 = add nuw nsw i32 %v5_1508c, 3
  %v1_15094 = and i32 %v1_15090, 131068
  store i32 %v1_15094, i32* %r3.global-to-local, align 4
  %v2_15098 = add i32 %v1_15094, %v2_150d8
  store i32 %v2_15098, i32* %sb.global-to-local, align 4
  %v9_1509c = icmp eq i32 %v2_15098, %v2_15150
  %v1_150a0 = and i32 %v1_15090, 128
  %v2_150a4 = icmp eq i32 %v1_150a0, 0
  %v3_150a4 = or i1 %v9_1509c, %v2_150a4
  br i1 %v3_150a4, label %dec_label_pc_150d8, label %dec_label_pc_150a8

dec_label_pc_150a8:                               ; preds = %dec_label_pc_15084
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_150b8 = call i32 @function_15218(i32 %v0_1502c, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_150bc = load i32, i32* @r5, align 4
  %v1_150bc = load i32, i32* %r8.global-to-local, align 4
  %v9_150bc = icmp eq i32 %v0_150bc, %v1_150bc
  br i1 %v9_150bc, label %dec_label_pc_150c4, label %dec_label_pc_15158

dec_label_pc_150c4:                               ; preds = %dec_label_pc_150a8
  %v0_150c4 = call i32 @function_13a84()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_150d0 = inttoptr i32 %v0_150c4 to i32*
  store i32 22, i32* %v2_150d0, align 4
  %v0_1515c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1515c

dec_label_pc_150d8:                               ; preds = %dec_label_pc_15084
  %v3_150a011 = udiv i32 %v1_15090, 256
  %v1_150d8 = trunc i32 %v3_150a011 to i8
  %v3_150d8 = add i32 %v2_150d8, 17
  %v4_150d8 = inttoptr i32 %v3_150d8 to i8*
  store i8 %v1_150d8, i8* %v4_150d8, align 1
  %v0_150dc = load i32, i32* %r3.global-to-local, align 4
  %v1_150dc = trunc i32 %v0_150dc to i8
  %v2_150dc = load i32, i32* @r5, align 4
  %v3_150dc = add i32 %v2_150dc, 16
  %v4_150dc = inttoptr i32 %v3_150dc to i8*
  store i8 %v1_150dc, i8* %v4_150dc, align 1
  %v0_150e0 = load i32, i32* @r4, align 4
  %v1_150e0 = add i32 %v0_150e0, 8
  %v1_150e4 = inttoptr i32 %v1_150e0 to i32*
  %v2_150e4 = load i32, i32* %v1_150e4, align 4
  %v3_150e4 = add i32 %v0_150e0, 12
  %v4_150e4 = inttoptr i32 %v3_150e4 to i32*
  %v5_150e4 = load i32, i32* %v4_150e4, align 4
  store i32 %v5_150e4, i32* %r3.global-to-local, align 4
  %v1_150f0 = inttoptr i32 %v0_150e0 to i32*
  %v2_150f0 = load i32, i32* %v1_150f0, align 4
  %v3_150f0 = add i32 %v0_150e0, 4
  %v4_150f0 = inttoptr i32 %v3_150f0 to i32*
  %v5_150f0 = load i32, i32* %v4_150f0, align 4
  store i32 %v5_150f0, i32* %r3.global-to-local, align 4
  %v0_150f4 = load i32, i32* @r5, align 4
  %v1_150f4 = inttoptr i32 %v0_150f4 to i32*
  store i32 %v2_150f0, i32* %v1_150f4, align 4
  %v3_150f4 = add i32 %v0_150f4, 4
  %v4_150f4 = inttoptr i32 %v3_150f4 to i32*
  %v5_150f4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_150f4, i32* %v4_150f4, align 4
  %v0_150f8 = load i32, i32* @r4, align 4
  %v1_150f8 = add i32 %v0_150f8, 8
  %v1_150fc = inttoptr i32 %v1_150f8 to i32*
  %v2_150fc = load i32, i32* %v1_150fc, align 4
  %v3_150fc = add i32 %v0_150f8, 12
  %v4_150fc = inttoptr i32 %v3_150fc to i32*
  %v5_150fc = load i32, i32* %v4_150fc, align 4
  store i32 %v5_150fc, i32* %r3.global-to-local, align 4
  %v1_15100 = load i32, i32* @r5, align 4
  %v2_15100 = add i32 %v1_15100, 8
  %v3_15100 = inttoptr i32 %v2_15100 to i32*
  store i32 %v2_150fc, i32* %v3_15100, align 4
  %v0_15104 = load i32, i32* %r3.global-to-local, align 4
  %v1_15104 = load i32, i32* @r5, align 4
  %v2_15104 = add i32 %v1_15104, 12
  %v3_15104 = inttoptr i32 %v2_15104 to i32*
  store i32 %v0_15104, i32* %v3_15104, align 4
  %v0_15108 = load i32, i32* @r4, align 4
  %v1_15108 = add i32 %v0_15108, 18
  %v2_15108 = inttoptr i32 %v1_15108 to i8*
  %v3_15108 = load i8, i8* %v2_15108, align 1
  %v4_15108 = zext i8 %v3_15108 to i32
  store i32 %v4_15108, i32* %r3.global-to-local, align 4
  %v2_1510c = load i32, i32* @r5, align 4
  %v3_1510c = add i32 %v2_1510c, 18
  %v4_1510c = inttoptr i32 %v3_1510c to i8*
  store i8 %v3_15108, i8* %v4_1510c, align 1
  %v0_15110 = load i32, i32* @r4, align 4
  %v1_15110 = add i32 %v0_15110, 16
  %v2_15110 = inttoptr i32 %v1_15110 to i8*
  %v3_15110 = load i8, i8* %v2_15110, align 1
  %v4_15110 = zext i8 %v3_15110 to i32
  %v0_15114 = load i32, i32* %r7.global-to-local, align 4
  %v1_15114 = add i32 %v0_15114, 1
  %v2_15114 = inttoptr i32 %v1_15114 to i8*
  %v3_15114 = load i8, i8* %v2_15114, align 1
  %v4_15114 = zext i8 %v3_15114 to i32
  store i32 %v4_15114, i32* %r3.global-to-local, align 4
  %v4_15118 = mul nuw nsw i32 %v4_15114, 256
  %v5_15118 = or i32 %v4_15118, %v4_15110
  %v1_1511c = add nsw i32 %v5_15118, -19
  store i32 %v1_1511c, i32* @r2, align 4
  %v3_15120 = call i32 @function_13ad0(i32 %v1_15148, i32 %v1_1514c, i32 %v1_1511c)
  %v0_15124 = load i32, i32* @r4, align 4
  %v1_15124 = add i32 %v0_15124, 16
  %v2_15124 = inttoptr i32 %v1_15124 to i8*
  %v3_15124 = load i8, i8* %v2_15124, align 1
  %v4_15124 = zext i8 %v3_15124 to i32
  store i32 %v4_15124, i32* %r3.global-to-local, align 4
  %v0_15128 = load i32, i32* %r7.global-to-local, align 4
  %v1_15128 = add i32 %v0_15128, 1
  %v2_15128 = inttoptr i32 %v1_15128 to i8*
  %v3_15128 = load i8, i8* %v2_15128, align 1
  %v4_15128 = zext i8 %v3_15128 to i32
  %v4_1512c = mul nuw nsw i32 %v4_15128, 256
  %v5_1512c = or i32 %v4_1512c, %v4_15124
  store i32 %v5_1512c, i32* %r3.global-to-local, align 4
  %v2_15130 = add i32 %v5_1512c, %v0_15124
  store i32 %v2_15130, i32* @r4, align 4
  %v0_15134 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_15134, i32* @r5, align 4
  %v1_15138.pre = load i32, i32* @r6, align 4
  %v0_15150.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_15138

dec_label_pc_15138:                               ; preds = %dec_label_pc_15068, %dec_label_pc_150d8
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_15068 ], [ %v2_150e4, %dec_label_pc_150d8 ]
  %v0_15150 = phi i32 [ %v0_15070, %dec_label_pc_15068 ], [ %v0_15150.pre, %dec_label_pc_150d8 ]
  %v2_150d8 = phi i32 [ %v0_15070, %dec_label_pc_15068 ], [ %v0_15134, %dec_label_pc_150d8 ]
  %v0_15088 = phi i32 [ %v0_15074, %dec_label_pc_15068 ], [ %v2_15130, %dec_label_pc_150d8 ]
  %v1_15138 = phi i32 [ %v5_15034, %dec_label_pc_15068 ], [ %v1_15138.pre, %dec_label_pc_150d8 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_15068 ], [ %v5_150e4, %dec_label_pc_150d8 ]
  %v0_15138 = load i32, i32* %sl.global-to-local, align 4
  %v2_15138 = add i32 %v0_15138, %v1_15138
  store i32 %v2_15138, i32* %r3.global-to-local, align 4
  %v3_1513c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_1513c, i32* @r2, align 4
  %v3_15140 = icmp ult i32 %v0_15088, %v2_15138
  %v1_15144 = add i32 %v0_15088, 16
  store i32 %v1_15144, i32* %r7.global-to-local, align 4
  %v1_15148 = add i32 %v2_150d8, 19
  store i32 %v1_15148, i32* @r0, align 4
  %v1_1514c = add i32 %v0_15088, 19
  store i32 %v1_1514c, i32* @r1, align 4
  br i1 %v3_15140, label %dec_label_pc_15084, label %dec_label_pc_15158

dec_label_pc_15158:                               ; preds = %dec_label_pc_15138, %dec_label_pc_150a8
  %v1_15158 = phi i32 [ %v0_150bc, %dec_label_pc_150a8 ], [ %v2_150d8, %dec_label_pc_15138 ]
  %v0_15158 = phi i32 [ %v1_150bc, %dec_label_pc_150a8 ], [ %v0_15150, %dec_label_pc_15138 ]
  %v2_15158 = sub i32 %v1_15158, %v0_15158
  store i32 %v2_15158, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1515c

dec_label_pc_1515c:                               ; preds = %dec_label_pc_150c4, %dec_label_pc_15060, %dec_label_pc_15158
  %v0_1515c = phi i32 [ %v0_1515c.pre, %dec_label_pc_150c4 ], [ %v0_15060, %dec_label_pc_15060 ], [ %v2_15158, %dec_label_pc_15158 ]
  store i32 %v3_15008, i32* @r4, align 4
  store i32 %v9_15008, i32* %r6.global-to-local, align 4
  ret i32 %v0_1515c

; uselistorder directives
  uselistorder i32 %v1_1514c, { 1, 0 }
  uselistorder i32 %v1_15148, { 1, 0 }
  uselistorder i32 %v1_15144, { 1, 0 }
  uselistorder i32 %v3_1513c, { 1, 0 }
  uselistorder i32 %v0_15088, { 2, 1, 3, 0 }
  uselistorder i32 %v2_150d8, { 0, 3, 1, 2 }
  uselistorder i32 %v0_150e0, { 1, 0, 2, 3 }
  uselistorder i32 %v0_15070, { 1, 0, 2 }
  uselistorder i32 %v5_15034, { 1, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_13ad0, { 5, 1, 0, 3, 7, 6, 4, 2 }
  uselistorder i32 128, { 12, 13, 36, 14, 37, 26, 17, 18, 19, 32, 2, 33, 20, 21, 22, 23, 24, 29, 3, 27, 4, 28, 5, 15, 16, 30, 31, 7, 0, 1, 8, 9, 10, 34, 6, 35, 25, 11 }
  uselistorder i32* @sp, { 4, 5, 1, 6, 0, 7, 2, 8, 3 }
  uselistorder i32* @r6, { 3, 116, 117, 118, 356, 357, 316, 317, 318, 319, 320, 321, 322, 323, 343, 358, 359, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 324, 325, 28, 27, 29, 30, 31, 32, 33, 326, 327, 328, 329, 330, 331, 332, 333, 334, 340, 341, 342, 335, 336, 337, 338, 339, 4, 99, 2, 100, 101, 1, 102, 103, 278, 279, 280, 0, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 104, 105, 106, 107, 5, 108, 109, 110, 111, 112, 15, 113, 114, 115, 137, 138, 139, 140, 14, 141, 142, 143, 6, 144, 145, 146, 7, 147, 8, 148, 9, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 344, 347, 345, 346, 348, 349, 16, 350, 351, 352, 353, 354, 355, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 10, 370, 371, 372, 373, 374, 375, 377, 11, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 12, 13, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424 }
  uselistorder label %dec_label_pc_1515c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15138, { 1, 0 }
}

define i32 @function_15168() local_unnamed_addr {
dec_label_pc_15168:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15168 = load i32, i32* @r4, align 4
  store i32 %v3_15168, i32* %stack_var_-8, align 4
  %v0_15170 = load i32, i32* @r0, align 4
  store i32 %v0_15170, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_15170, -4095
  br i1 %tmp, label %dec_label_pc_1518c, label %dec_label_pc_1517c

dec_label_pc_1517c:                               ; preds = %dec_label_pc_15168
  %v0_1517c = call i32 @function_13a84()
  %v0_15180 = load i32, i32* %r4.global-to-local, align 4
  %v1_15180 = sub i32 0, %v0_15180
  %v2_15184 = inttoptr i32 %v0_1517c to i32*
  store i32 %v1_15180, i32* %v2_15184, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15190.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1518c

dec_label_pc_1518c:                               ; preds = %dec_label_pc_15168, %dec_label_pc_1517c
  %v2_15190 = phi i32 [ %v3_15168, %dec_label_pc_15168 ], [ %v2_15190.pre, %dec_label_pc_1517c ]
  %v0_1518c = phi i32 [ %v0_15170, %dec_label_pc_15168 ], [ -1, %dec_label_pc_1517c ]
  store i32 %v2_15190, i32* @r4, align 4
  ret i32 %v0_1518c

; uselistorder directives
  uselistorder i32 %v0_15170, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1518c, { 1, 0 }
}

define i32 @function_15194() local_unnamed_addr {
dec_label_pc_15194:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15194 = load i32, i32* @r4, align 4
  store i32 %v3_15194, i32* %stack_var_-8, align 4
  %v0_1519c = load i32, i32* @r0, align 4
  store i32 %v0_1519c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1519c, -4095
  br i1 %tmp, label %dec_label_pc_151b8, label %dec_label_pc_151a8

dec_label_pc_151a8:                               ; preds = %dec_label_pc_15194
  %v0_151a8 = call i32 @function_13a84()
  %v0_151ac = load i32, i32* %r4.global-to-local, align 4
  %v1_151ac = sub i32 0, %v0_151ac
  %v2_151b0 = inttoptr i32 %v0_151a8 to i32*
  store i32 %v1_151ac, i32* %v2_151b0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_151bc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_151b8

dec_label_pc_151b8:                               ; preds = %dec_label_pc_15194, %dec_label_pc_151a8
  %v2_151bc = phi i32 [ %v3_15194, %dec_label_pc_15194 ], [ %v2_151bc.pre, %dec_label_pc_151a8 ]
  %v0_151b8 = phi i32 [ %v0_1519c, %dec_label_pc_15194 ], [ -1, %dec_label_pc_151a8 ]
  store i32 %v2_151bc, i32* @r4, align 4
  ret i32 %v0_151b8

; uselistorder directives
  uselistorder i32 %v0_1519c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_151b8, { 1, 0 }
}

define i32 @function_151c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_151c0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_151c0 = load i32, i32* @r4, align 4
  store i32 %v3_151c0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_151e4, label %dec_label_pc_151d4

dec_label_pc_151d4:                               ; preds = %dec_label_pc_151c0
  %v0_151d4 = call i32 @function_13a84()
  %v0_151d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_151d8 = sub i32 0, %v0_151d8
  %v2_151dc = inttoptr i32 %v0_151d4 to i32*
  store i32 %v1_151d8, i32* %v2_151dc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_151e8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_151e4

dec_label_pc_151e4:                               ; preds = %dec_label_pc_151c0, %dec_label_pc_151d4
  %v2_151e8 = phi i32 [ %v3_151c0, %dec_label_pc_151c0 ], [ %v2_151e8.pre, %dec_label_pc_151d4 ]
  %v0_151e4 = phi i32 [ %arg1, %dec_label_pc_151c0 ], [ -1, %dec_label_pc_151d4 ]
  store i32 %v2_151e8, i32* %r4.global-to-local, align 4
  ret i32 %v0_151e4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_151e4, { 1, 0 }
}

define i32 @function_151ec() local_unnamed_addr {
dec_label_pc_151ec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_151ec = load i32, i32* @r4, align 4
  store i32 %v3_151ec, i32* %stack_var_-8, align 4
  %v0_151f4 = load i32, i32* @r0, align 4
  store i32 %v0_151f4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_151f4, -4095
  br i1 %tmp, label %dec_label_pc_15210, label %dec_label_pc_15200

dec_label_pc_15200:                               ; preds = %dec_label_pc_151ec
  %v0_15200 = call i32 @function_13a84()
  %v0_15204 = load i32, i32* %r4.global-to-local, align 4
  %v1_15204 = sub i32 0, %v0_15204
  %v2_15208 = inttoptr i32 %v0_15200 to i32*
  store i32 %v1_15204, i32* %v2_15208, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15214.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_15210

dec_label_pc_15210:                               ; preds = %dec_label_pc_151ec, %dec_label_pc_15200
  %v2_15214 = phi i32 [ %v3_151ec, %dec_label_pc_151ec ], [ %v2_15214.pre, %dec_label_pc_15200 ]
  %v0_15210 = phi i32 [ %v0_151f4, %dec_label_pc_151ec ], [ -1, %dec_label_pc_15200 ]
  store i32 %v2_15214, i32* %r4.global-to-local, align 4
  ret i32 %v0_15210

; uselistorder directives
  uselistorder i32 %v0_151f4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15210, { 1, 0 }
}

define i32 @function_15218(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15218:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_1525c, label %dec_label_pc_15248

dec_label_pc_15248:                               ; preds = %dec_label_pc_15218
  %v0_15248 = call i32 @function_13a84()
  %v0_1524c = load i32, i32* %r4.global-to-local, align 4
  %v1_1524c = sub i32 0, %v0_1524c
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_15254 = inttoptr i32 %v0_15248 to i32*
  store i32 %v1_1524c, i32* %v2_15254, align 4
  %v0_15264.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15264

dec_label_pc_1525c:                               ; preds = %dec_label_pc_15218
  %v2_1525c = icmp eq i32 %arg1, 0
  br i1 %v2_1525c, label %dec_label_pc_15270, label %dec_label_pc_15264

dec_label_pc_15264:                               ; preds = %dec_label_pc_1525c, %dec_label_pc_15248
  %v0_15264 = phi i32 [ %arg1, %dec_label_pc_1525c ], [ %v0_15264.pre, %dec_label_pc_15248 ]
  br label %dec_label_pc_15274

dec_label_pc_15270:                               ; preds = %dec_label_pc_1525c
  br label %dec_label_pc_15274

dec_label_pc_15274:                               ; preds = %dec_label_pc_15264, %dec_label_pc_15270
  %v14_15278 = phi i32 [ %v0_15264, %dec_label_pc_15264 ], [ %tmp9, %dec_label_pc_15270 ]
  ret i32 %v14_15278

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_15274, { 1, 0 }
}

define i32 @function_1527c(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1527c:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_1527c = load i32, i32* @r4, align 4
  store i32 %v3_1527c, i32* %stack_var_-8, align 4
  %v6_15280 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_15280, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_15280, -4095
  br i1 %tmp6, label %dec_label_pc_152a0, label %dec_label_pc_15290

dec_label_pc_15290:                               ; preds = %dec_label_pc_1527c
  %v0_15290 = call i32 @function_13a84()
  %v0_15294 = load i32, i32* %r4.global-to-local, align 4
  %v1_15294 = sub i32 0, %v0_15294
  %v2_15298 = inttoptr i32 %v0_15290 to i32*
  store i32 %v1_15294, i32* %v2_15298, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_152a0

dec_label_pc_152a0:                               ; preds = %dec_label_pc_1527c, %dec_label_pc_15290
  %v0_152a0 = phi i32 [ %v6_15280, %dec_label_pc_1527c ], [ -1, %dec_label_pc_15290 ]
  %v2_152a4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_152a4, i32* %r4.global-to-local, align 4
  ret i32 %v0_152a0

; uselistorder directives
  uselistorder i32 %v6_15280, { 1, 0, 2 }
  uselistorder label %dec_label_pc_152a0, { 1, 0 }
}

define i32 @function_152a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_152a8:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_152a8 = load i32, i32* @r4, align 4
  store i32 %v3_152a8, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1eaf8.692 to i32), i32* %r4.global-to-local, align 4
  %v2_152b0 = load i32, i32* @global_var_1eaf8.692, align 4
  %v2_152b4 = icmp eq i32 %v2_152b0, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_152b4, label %dec_label_pc_152c4, label %dec_label_pc_152d0

dec_label_pc_152c4:                               ; preds = %dec_label_pc_152a8
  %v2_152c4 = call i32 @function_15cb0(i32* null)
  %v1_152c8 = icmp slt i32 %v2_152c4, 0
  br i1 %v1_152c8, label %dec_label_pc_152f0, label %dec_label_pc_152d0thread-pre-split

dec_label_pc_152d0thread-pre-split:               ; preds = %dec_label_pc_152c4
  %v0_152d4.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_152d0.pre = load i32, i32* @global_var_1eaf8.692, align 4
  br label %dec_label_pc_152d0

dec_label_pc_152d0:                               ; preds = %dec_label_pc_152d0thread-pre-split, %dec_label_pc_152a8
  %v2_152d0 = phi i32 [ %v2_152d0.pre, %dec_label_pc_152d0thread-pre-split ], [ %v2_152b0, %dec_label_pc_152a8 ]
  %v1_152dc = phi i32 [ %v0_152d4.pr, %dec_label_pc_152d0thread-pre-split ], [ %arg1, %dec_label_pc_152a8 ]
  %v2_152d4 = icmp eq i32 %v1_152dc, 0
  store i32 %v2_152d0, i32* %r4.global-to-local, align 4
  br i1 %v2_152d4, label %dec_label_pc_152f4, label %dec_label_pc_152e4

dec_label_pc_152e4:                               ; preds = %dec_label_pc_152d0
  %v2_152dc = add i32 %v1_152dc, %v2_152d0
  %v1_152e4 = inttoptr i32 %v2_152dc to i32*
  %v2_152e4 = call i32 @function_15cb0(i32* %v1_152e4)
  %v1_152e8 = icmp slt i32 %v2_152e4, 0
  br i1 %v1_152e8, label %dec_label_pc_152f0, label %dec_label_pc_152e4.dec_label_pc_152f4_crit_edge

dec_label_pc_152e4.dec_label_pc_152f4_crit_edge:  ; preds = %dec_label_pc_152e4
  %v0_152f4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_152f4

dec_label_pc_152f0:                               ; preds = %dec_label_pc_152e4, %dec_label_pc_152c4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_152f4

dec_label_pc_152f4:                               ; preds = %dec_label_pc_152e4.dec_label_pc_152f4_crit_edge, %dec_label_pc_152d0, %dec_label_pc_152f0
  %v0_152f4 = phi i32 [ %v0_152f4.pre, %dec_label_pc_152e4.dec_label_pc_152f4_crit_edge ], [ %v2_152d0, %dec_label_pc_152d0 ], [ -1, %dec_label_pc_152f0 ]
  %v2_152f8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_152f8, i32* @r4, align 4
  ret i32 %v0_152f4

; uselistorder directives
  uselistorder i32 %v2_152d0, { 1, 0, 2 }
  uselistorder i32* null, { 0, 3, 8, 39, 40, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 2, 5, 26, 25, 24, 23, 38, 7, 27, 28, 29, 36, 30, 31, 32, 33, 34, 35, 6, 37 }
  uselistorder label %dec_label_pc_152f4, { 2, 0, 1 }
}

define i32 @function_15300(%tms* %arg1) local_unnamed_addr {
dec_label_pc_15300:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15300 = load i32, i32* @r4, align 4
  store i32 %v3_15300, i32* %stack_var_-8, align 4
  %v3_15304 = call i32 @times(%tms* %arg1)
  store i32 %v3_15304, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_15304, -4095
  br i1 %tmp, label %dec_label_pc_15324, label %dec_label_pc_15314

dec_label_pc_15314:                               ; preds = %dec_label_pc_15300
  %v0_15314 = call i32 @function_13a84()
  %v0_15318 = load i32, i32* %r4.global-to-local, align 4
  %v1_15318 = sub i32 0, %v0_15318
  %v2_1531c = inttoptr i32 %v0_15314 to i32*
  store i32 %v1_15318, i32* %v2_1531c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15324

dec_label_pc_15324:                               ; preds = %dec_label_pc_15300, %dec_label_pc_15314
  %v0_15324 = phi i32 [ %v3_15304, %dec_label_pc_15300 ], [ -1, %dec_label_pc_15314 ]
  %v2_15328 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15328, i32* %r4.global-to-local, align 4
  ret i32 %v0_15324

; uselistorder directives
  uselistorder i32 %v3_15304, { 1, 0, 2 }
  uselistorder label %dec_label_pc_15324, { 1, 0 }
}

define i32 @function_1532c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1532c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_15348 = inttoptr i32 %arg2 to i8*
  %v3_15348 = call i32 @function_13af0(i8* %v2_15348, i32 0)
  %v1_1534c = add i32 %tmp, 1
  %v2_1534c = inttoptr i32 %v1_1534c to i8*
  %v3_1534c = load i8, i8* %v2_1534c, align 1
  %v4_1534c = zext i8 %v3_1534c to i32
  %v1_15350 = add i32 %tmp, 5
  %v2_15350 = inttoptr i32 %v1_15350 to i8*
  %v3_15350 = load i8, i8* %v2_15350, align 1
  %v4_15350 = zext i8 %v3_15350 to i32
  %v2_15354 = load i8, i8* %arg1, align 1
  %v3_15354 = zext i8 %v2_15354 to i32
  %v1_15358 = add i32 %tmp, 4
  %v2_15358 = inttoptr i32 %v1_15358 to i8*
  %v3_15358 = load i8, i8* %v2_15358, align 1
  %v4_15358 = zext i8 %v3_15358 to i32
  %v1_1535c = add i32 %tmp, 2
  %v2_1535c = inttoptr i32 %v1_1535c to i8*
  %v3_1535c = load i8, i8* %v2_1535c, align 1
  %v4_1535c = zext i8 %v3_1535c to i32
  %v1_15360 = add i32 %tmp, 6
  %v2_15360 = inttoptr i32 %v1_15360 to i8*
  %v3_15360 = load i8, i8* %v2_15360, align 1
  %v4_15360 = zext i8 %v3_15360 to i32
  %v1_15364 = add i32 %tmp, 3
  %v2_15364 = inttoptr i32 %v1_15364 to i8*
  %v3_15364 = load i8, i8* %v2_15364, align 1
  %v4_15364 = zext i8 %v3_15364 to i32
  %v4_15368 = mul nuw nsw i32 %v4_1534c, 256
  %v5_15368 = or i32 %v3_15354, %v4_15368
  %v4_1536c = mul nuw nsw i32 %v4_15350, 256
  %v5_1536c = or i32 %v4_15358, %v4_1536c
  %v1_15370 = add i32 %tmp, 7
  %v2_15370 = inttoptr i32 %v1_15370 to i8*
  %v3_15370 = load i8, i8* %v2_15370, align 1
  %v4_15370 = zext i8 %v3_15370 to i32
  %v4_15374 = mul nuw nsw i32 %v4_1535c, 65536
  %v5_15374 = or i32 %v4_15374, %v5_15368
  %v4_15378 = mul nuw nsw i32 %v4_15360, 65536
  %v5_15378 = or i32 %v4_15378, %v5_1536c
  %v4_1537c = mul nuw i32 %v4_15364, 16777216
  %v5_1537c = or i32 %v4_1537c, %v5_15374
  %v4_15380 = mul nuw i32 %v4_15370, 16777216
  %v5_15380 = or i32 %v4_15380, %v5_15378
  store i32 %v5_15380, i32* %r3.global-to-local, align 4
  %v0_15384 = load i32, i32* %r7.global-to-local, align 4
  %v1_15384 = inttoptr i32 %v0_15384 to i32*
  store i32 %v5_1537c, i32* %v1_15384, align 4
  %v3_15384 = add i32 %v0_15384, 4
  %v4_15384 = inttoptr i32 %v3_15384 to i32*
  %v5_15384 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_15384, i32* %v4_15384, align 4
  %v0_15388 = load i32, i32* %r4.global-to-local, align 4
  %v1_15388 = add i32 %v0_15388, 89
  %v2_15388 = inttoptr i32 %v1_15388 to i8*
  %v3_15388 = load i8, i8* %v2_15388, align 1
  %v4_15388 = zext i8 %v3_15388 to i32
  %v1_1538c = add i32 %v0_15388, 93
  %v2_1538c = inttoptr i32 %v1_1538c to i8*
  %v3_1538c = load i8, i8* %v2_1538c, align 1
  %v4_1538c = zext i8 %v3_1538c to i32
  %v1_15390 = add i32 %v0_15388, 88
  %v2_15390 = inttoptr i32 %v1_15390 to i8*
  %v3_15390 = load i8, i8* %v2_15390, align 1
  %v4_15390 = zext i8 %v3_15390 to i32
  %v1_15394 = add i32 %v0_15388, 92
  %v2_15394 = inttoptr i32 %v1_15394 to i8*
  %v3_15394 = load i8, i8* %v2_15394, align 1
  %v4_15394 = zext i8 %v3_15394 to i32
  store i32 %v4_15394, i32* %r3.global-to-local, align 4
  %v1_15398 = add i32 %v0_15388, 94
  %v2_15398 = inttoptr i32 %v1_15398 to i8*
  %v3_15398 = load i8, i8* %v2_15398, align 1
  %v4_15398 = zext i8 %v3_15398 to i32
  %v1_1539c = add i32 %v0_15388, 90
  %v2_1539c = inttoptr i32 %v1_1539c to i8*
  %v3_1539c = load i8, i8* %v2_1539c, align 1
  %v4_1539c = zext i8 %v3_1539c to i32
  %v1_153a0 = add i32 %v0_15388, 91
  %v2_153a0 = inttoptr i32 %v1_153a0 to i8*
  %v3_153a0 = load i8, i8* %v2_153a0, align 1
  %v4_153a0 = zext i8 %v3_153a0 to i32
  %v4_153a4 = mul nuw nsw i32 %v4_15388, 256
  %v5_153a4 = or i32 %v4_15390, %v4_153a4
  %v4_153a8 = mul nuw nsw i32 %v4_1538c, 256
  %v5_153a8 = or i32 %v4_15394, %v4_153a8
  store i32 %v5_153a8, i32* %r3.global-to-local, align 4
  %v1_153ac = add i32 %v0_15388, 95
  %v2_153ac = inttoptr i32 %v1_153ac to i8*
  %v3_153ac = load i8, i8* %v2_153ac, align 1
  %v4_153ac = zext i8 %v3_153ac to i32
  %v4_153b0 = mul nuw nsw i32 %v4_15398, 65536
  %v5_153b0 = or i32 %v4_153b0, %v5_153a8
  store i32 %v5_153b0, i32* %r3.global-to-local, align 4
  %v4_153b4 = mul nuw nsw i32 %v4_1539c, 65536
  %v5_153b4 = or i32 %v4_153b4, %v5_153a4
  %v4_153b8 = mul nuw i32 %v4_153a0, 16777216
  %v5_153b8 = or i32 %v4_153b8, %v5_153b4
  %v4_153bc = mul nuw i32 %v4_153ac, 16777216
  %v5_153bc = or i32 %v4_153bc, %v5_153b0
  store i32 %v5_153bc, i32* %r6.global-to-local, align 4
  %v1_153c0 = load i32, i32* %r7.global-to-local, align 4
  %v2_153c0 = add i32 %v1_153c0, 88
  %v3_153c0 = inttoptr i32 %v2_153c0 to i32*
  store i32 %v5_153b8, i32* %v3_153c0, align 4
  %v0_153c4 = load i32, i32* %r6.global-to-local, align 4
  %v1_153c4 = load i32, i32* %r7.global-to-local, align 4
  %v2_153c4 = add i32 %v1_153c4, 92
  %v3_153c4 = inttoptr i32 %v2_153c4 to i32*
  store i32 %v0_153c4, i32* %v3_153c4, align 4
  %v0_153c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_153c8 = add i32 %v0_153c8, 13
  %v2_153c8 = inttoptr i32 %v1_153c8 to i8*
  %v3_153c8 = load i8, i8* %v2_153c8, align 1
  %v4_153c8 = zext i8 %v3_153c8 to i32
  %v1_153cc = add i32 %v0_153c8, 12
  %v2_153cc = inttoptr i32 %v1_153cc to i8*
  %v3_153cc = load i8, i8* %v2_153cc, align 1
  %v4_153cc = zext i8 %v3_153cc to i32
  store i32 %v4_153cc, i32* %r3.global-to-local, align 4
  %v1_153d0 = add i32 %v0_153c8, 14
  %v2_153d0 = inttoptr i32 %v1_153d0 to i8*
  %v3_153d0 = load i8, i8* %v2_153d0, align 1
  %v4_153d0 = zext i8 %v3_153d0 to i32
  %v4_153d4 = mul nuw nsw i32 %v4_153c8, 256
  %v5_153d4 = or i32 %v4_153cc, %v4_153d4
  store i32 %v5_153d4, i32* %r3.global-to-local, align 4
  %v1_153d8 = add i32 %v0_153c8, 15
  %v2_153d8 = inttoptr i32 %v1_153d8 to i8*
  %v3_153d8 = load i8, i8* %v2_153d8, align 1
  %v4_153d8 = zext i8 %v3_153d8 to i32
  %v4_153dc = mul nuw nsw i32 %v4_153d0, 65536
  %v5_153dc = or i32 %v4_153dc, %v5_153d4
  %v4_153e0 = mul nuw i32 %v4_153d8, 16777216
  %v5_153e0 = or i32 %v5_153dc, %v4_153e0
  store i32 %v5_153e0, i32* %r3.global-to-local, align 4
  %v1_153e4 = load i32, i32* %r7.global-to-local, align 4
  %v2_153e4 = add i32 %v1_153e4, 12
  %v3_153e4 = inttoptr i32 %v2_153e4 to i32*
  store i32 %v5_153e0, i32* %v3_153e4, align 4
  %v0_153e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_153e8 = add i32 %v0_153e8, 17
  %v2_153e8 = inttoptr i32 %v1_153e8 to i8*
  %v3_153e8 = load i8, i8* %v2_153e8, align 1
  %v4_153e8 = zext i8 %v3_153e8 to i32
  %v1_153ec = add i32 %v0_153e8, 16
  %v2_153ec = inttoptr i32 %v1_153ec to i8*
  %v3_153ec = load i8, i8* %v2_153ec, align 1
  %v4_153ec = zext i8 %v3_153ec to i32
  store i32 %v4_153ec, i32* %r3.global-to-local, align 4
  %v1_153f0 = add i32 %v0_153e8, 18
  %v2_153f0 = inttoptr i32 %v1_153f0 to i8*
  %v3_153f0 = load i8, i8* %v2_153f0, align 1
  %v4_153f0 = zext i8 %v3_153f0 to i32
  %v4_153f4 = mul nuw nsw i32 %v4_153e8, 256
  %v5_153f4 = or i32 %v4_153ec, %v4_153f4
  store i32 %v5_153f4, i32* %r3.global-to-local, align 4
  %v1_153f8 = add i32 %v0_153e8, 19
  %v2_153f8 = inttoptr i32 %v1_153f8 to i8*
  %v3_153f8 = load i8, i8* %v2_153f8, align 1
  %v4_153f8 = zext i8 %v3_153f8 to i32
  %v4_153fc = mul nuw nsw i32 %v4_153f0, 65536
  %v5_153fc = or i32 %v4_153fc, %v5_153f4
  %v4_15400 = mul nuw i32 %v4_153f8, 16777216
  %v5_15400 = or i32 %v5_153fc, %v4_15400
  store i32 %v5_15400, i32* %r3.global-to-local, align 4
  %v1_15404 = load i32, i32* %r7.global-to-local, align 4
  %v2_15404 = add i32 %v1_15404, 16
  %v3_15404 = inttoptr i32 %v2_15404 to i32*
  store i32 %v5_15400, i32* %v3_15404, align 4
  %v0_15408 = load i32, i32* %r4.global-to-local, align 4
  %v1_15408 = add i32 %v0_15408, 21
  %v2_15408 = inttoptr i32 %v1_15408 to i8*
  %v3_15408 = load i8, i8* %v2_15408, align 1
  %v4_15408 = zext i8 %v3_15408 to i32
  %v1_1540c = add i32 %v0_15408, 20
  %v2_1540c = inttoptr i32 %v1_1540c to i8*
  %v3_1540c = load i8, i8* %v2_1540c, align 1
  %v4_1540c = zext i8 %v3_1540c to i32
  store i32 %v4_1540c, i32* %r3.global-to-local, align 4
  %v1_15410 = add i32 %v0_15408, 22
  %v2_15410 = inttoptr i32 %v1_15410 to i8*
  %v3_15410 = load i8, i8* %v2_15410, align 1
  %v4_15410 = zext i8 %v3_15410 to i32
  %v4_15414 = mul nuw nsw i32 %v4_15408, 256
  %v5_15414 = or i32 %v4_1540c, %v4_15414
  store i32 %v5_15414, i32* %r3.global-to-local, align 4
  %v1_15418 = add i32 %v0_15408, 23
  %v2_15418 = inttoptr i32 %v1_15418 to i8*
  %v3_15418 = load i8, i8* %v2_15418, align 1
  %v4_15418 = zext i8 %v3_15418 to i32
  %v4_1541c = mul nuw nsw i32 %v4_15410, 65536
  %v5_1541c = or i32 %v4_1541c, %v5_15414
  %v4_15420 = mul nuw i32 %v4_15418, 16777216
  %v5_15420 = or i32 %v5_1541c, %v4_15420
  store i32 %v5_15420, i32* %r3.global-to-local, align 4
  %v1_15424 = load i32, i32* %r7.global-to-local, align 4
  %v2_15424 = add i32 %v1_15424, 20
  %v3_15424 = inttoptr i32 %v2_15424 to i32*
  store i32 %v5_15420, i32* %v3_15424, align 4
  %v0_15428 = load i32, i32* %r4.global-to-local, align 4
  %v1_15428 = add i32 %v0_15428, 25
  %v2_15428 = inttoptr i32 %v1_15428 to i8*
  %v3_15428 = load i8, i8* %v2_15428, align 1
  %v4_15428 = zext i8 %v3_15428 to i32
  %v1_1542c = add i32 %v0_15428, 24
  %v2_1542c = inttoptr i32 %v1_1542c to i8*
  %v3_1542c = load i8, i8* %v2_1542c, align 1
  %v4_1542c = zext i8 %v3_1542c to i32
  store i32 %v4_1542c, i32* %r3.global-to-local, align 4
  %v1_15430 = add i32 %v0_15428, 26
  %v2_15430 = inttoptr i32 %v1_15430 to i8*
  %v3_15430 = load i8, i8* %v2_15430, align 1
  %v4_15430 = zext i8 %v3_15430 to i32
  %v4_15434 = mul nuw nsw i32 %v4_15428, 256
  %v5_15434 = or i32 %v4_1542c, %v4_15434
  store i32 %v5_15434, i32* %r3.global-to-local, align 4
  %v1_15438 = add i32 %v0_15428, 27
  %v2_15438 = inttoptr i32 %v1_15438 to i8*
  %v3_15438 = load i8, i8* %v2_15438, align 1
  %v4_15438 = zext i8 %v3_15438 to i32
  %v4_1543c = mul nuw nsw i32 %v4_15430, 65536
  %v5_1543c = or i32 %v4_1543c, %v5_15434
  %v4_15440 = mul nuw i32 %v4_15438, 16777216
  %v5_15440 = or i32 %v5_1543c, %v4_15440
  store i32 %v5_15440, i32* %r3.global-to-local, align 4
  %v1_15444 = load i32, i32* %r7.global-to-local, align 4
  %v2_15444 = add i32 %v1_15444, 24
  %v3_15444 = inttoptr i32 %v2_15444 to i32*
  store i32 %v5_15440, i32* %v3_15444, align 4
  %v0_15448 = load i32, i32* %r4.global-to-local, align 4
  %v1_15448 = add i32 %v0_15448, 29
  %v2_15448 = inttoptr i32 %v1_15448 to i8*
  %v3_15448 = load i8, i8* %v2_15448, align 1
  %v4_15448 = zext i8 %v3_15448 to i32
  %v1_1544c = add i32 %v0_15448, 28
  %v2_1544c = inttoptr i32 %v1_1544c to i8*
  %v3_1544c = load i8, i8* %v2_1544c, align 1
  %v4_1544c = zext i8 %v3_1544c to i32
  store i32 %v4_1544c, i32* %r3.global-to-local, align 4
  %v1_15450 = add i32 %v0_15448, 30
  %v2_15450 = inttoptr i32 %v1_15450 to i8*
  %v3_15450 = load i8, i8* %v2_15450, align 1
  %v4_15450 = zext i8 %v3_15450 to i32
  %v4_15454 = mul nuw nsw i32 %v4_15448, 256
  %v5_15454 = or i32 %v4_1544c, %v4_15454
  store i32 %v5_15454, i32* %r3.global-to-local, align 4
  %v1_15458 = add i32 %v0_15448, 31
  %v2_15458 = inttoptr i32 %v1_15458 to i8*
  %v3_15458 = load i8, i8* %v2_15458, align 1
  %v4_15458 = zext i8 %v3_15458 to i32
  %v4_1545c = mul nuw nsw i32 %v4_15450, 65536
  %v5_1545c = or i32 %v4_1545c, %v5_15454
  %v4_15460 = mul nuw i32 %v4_15458, 16777216
  %v5_15460 = or i32 %v5_1545c, %v4_15460
  store i32 %v5_15460, i32* %r3.global-to-local, align 4
  %v1_15464 = load i32, i32* %r7.global-to-local, align 4
  %v2_15464 = add i32 %v1_15464, 28
  %v3_15464 = inttoptr i32 %v2_15464 to i32*
  store i32 %v5_15460, i32* %v3_15464, align 4
  %v0_15468 = load i32, i32* %r4.global-to-local, align 4
  %v1_15468 = add i32 %v0_15468, 33
  %v2_15468 = inttoptr i32 %v1_15468 to i8*
  %v3_15468 = load i8, i8* %v2_15468, align 1
  %v4_15468 = zext i8 %v3_15468 to i32
  %v1_1546c = add i32 %v0_15468, 37
  %v2_1546c = inttoptr i32 %v1_1546c to i8*
  %v3_1546c = load i8, i8* %v2_1546c, align 1
  %v4_1546c = zext i8 %v3_1546c to i32
  %v1_15470 = add i32 %v0_15468, 32
  %v2_15470 = inttoptr i32 %v1_15470 to i8*
  %v3_15470 = load i8, i8* %v2_15470, align 1
  %v4_15470 = zext i8 %v3_15470 to i32
  %v1_15474 = add i32 %v0_15468, 36
  %v2_15474 = inttoptr i32 %v1_15474 to i8*
  %v3_15474 = load i8, i8* %v2_15474, align 1
  %v4_15474 = zext i8 %v3_15474 to i32
  store i32 %v4_15474, i32* %r3.global-to-local, align 4
  %v1_15478 = add i32 %v0_15468, 34
  %v2_15478 = inttoptr i32 %v1_15478 to i8*
  %v3_15478 = load i8, i8* %v2_15478, align 1
  %v4_15478 = zext i8 %v3_15478 to i32
  %v1_1547c = add i32 %v0_15468, 38
  %v2_1547c = inttoptr i32 %v1_1547c to i8*
  %v3_1547c = load i8, i8* %v2_1547c, align 1
  %v4_1547c = zext i8 %v3_1547c to i32
  %v1_15480 = add i32 %v0_15468, 35
  %v2_15480 = inttoptr i32 %v1_15480 to i8*
  %v3_15480 = load i8, i8* %v2_15480, align 1
  %v4_15480 = zext i8 %v3_15480 to i32
  %v4_15484 = mul nuw nsw i32 %v4_15468, 256
  %v5_15484 = or i32 %v4_15470, %v4_15484
  %v4_15488 = mul nuw nsw i32 %v4_1546c, 256
  %v5_15488 = or i32 %v4_15474, %v4_15488
  store i32 %v5_15488, i32* %r3.global-to-local, align 4
  %v1_1548c = add i32 %v0_15468, 39
  %v2_1548c = inttoptr i32 %v1_1548c to i8*
  %v3_1548c = load i8, i8* %v2_1548c, align 1
  %v4_1548c = zext i8 %v3_1548c to i32
  %v4_15490 = mul nuw nsw i32 %v4_15478, 65536
  %v5_15490 = or i32 %v4_15490, %v5_15484
  %v4_15494 = mul nuw nsw i32 %v4_1547c, 65536
  %v5_15494 = or i32 %v4_15494, %v5_15488
  %v4_15498 = mul nuw i32 %v4_15480, 16777216
  %v5_15498 = or i32 %v5_15490, %v4_15498
  %v4_1549c = mul nuw i32 %v4_1548c, 16777216
  %v5_1549c = or i32 %v5_15494, %v4_1549c
  store i32 %v5_1549c, i32* %r3.global-to-local, align 4
  %v1_154b0 = load i32, i32* %r7.global-to-local, align 4
  %v2_154b0 = add i32 %v1_154b0, 32
  %v3_154b0 = inttoptr i32 %v2_154b0 to i32*
  store i32 %v5_15498, i32* %v3_154b0, align 4
  %v0_154b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_154b4 = load i32, i32* %r7.global-to-local, align 4
  %v2_154b4 = add i32 %v1_154b4, 36
  %v3_154b4 = inttoptr i32 %v2_154b4 to i32*
  store i32 %v0_154b4, i32* %v3_154b4, align 4
  %v0_154b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_154b8 = add i32 %v0_154b8, 45
  %v2_154b8 = inttoptr i32 %v1_154b8 to i8*
  %v3_154b8 = load i8, i8* %v2_154b8, align 1
  %v4_154b8 = zext i8 %v3_154b8 to i32
  %v1_154bc = add i32 %v0_154b8, 49
  %v2_154bc = inttoptr i32 %v1_154bc to i8*
  %v3_154bc = load i8, i8* %v2_154bc, align 1
  %v4_154bc = zext i8 %v3_154bc to i32
  %v1_154c0 = add i32 %v0_154b8, 44
  %v2_154c0 = inttoptr i32 %v1_154c0 to i8*
  %v3_154c0 = load i8, i8* %v2_154c0, align 1
  %v4_154c0 = zext i8 %v3_154c0 to i32
  %v1_154c4 = add i32 %v0_154b8, 48
  %v2_154c4 = inttoptr i32 %v1_154c4 to i8*
  %v3_154c4 = load i8, i8* %v2_154c4, align 1
  %v4_154c4 = zext i8 %v3_154c4 to i32
  store i32 %v4_154c4, i32* %r3.global-to-local, align 4
  %v1_154c8 = add i32 %v0_154b8, 46
  %v2_154c8 = inttoptr i32 %v1_154c8 to i8*
  %v3_154c8 = load i8, i8* %v2_154c8, align 1
  %v4_154c8 = zext i8 %v3_154c8 to i32
  %v1_154cc = add i32 %v0_154b8, 50
  %v2_154cc = inttoptr i32 %v1_154cc to i8*
  %v3_154cc = load i8, i8* %v2_154cc, align 1
  %v4_154cc = zext i8 %v3_154cc to i32
  %v1_154d0 = add i32 %v0_154b8, 47
  %v2_154d0 = inttoptr i32 %v1_154d0 to i8*
  %v3_154d0 = load i8, i8* %v2_154d0, align 1
  %v4_154d0 = zext i8 %v3_154d0 to i32
  %v4_154d4 = mul nuw nsw i32 %v4_154b8, 256
  %v5_154d4 = or i32 %v4_154c0, %v4_154d4
  %v4_154d8 = mul nuw nsw i32 %v4_154bc, 256
  %v5_154d8 = or i32 %v4_154c4, %v4_154d8
  store i32 %v5_154d8, i32* %r3.global-to-local, align 4
  %v1_154dc = add i32 %v0_154b8, 51
  %v2_154dc = inttoptr i32 %v1_154dc to i8*
  %v3_154dc = load i8, i8* %v2_154dc, align 1
  %v4_154dc = zext i8 %v3_154dc to i32
  %v4_154e0 = mul nuw nsw i32 %v4_154c8, 65536
  %v5_154e0 = or i32 %v4_154e0, %v5_154d4
  %v4_154e4 = mul nuw nsw i32 %v4_154cc, 65536
  %v5_154e4 = or i32 %v4_154e4, %v5_154d8
  %v4_154e8 = mul nuw i32 %v4_154d0, 16777216
  %v5_154e8 = or i32 %v5_154e0, %v4_154e8
  %v4_154ec = mul nuw i32 %v4_154dc, 16777216
  %v5_154ec = or i32 %v5_154e4, %v4_154ec
  store i32 %v5_154ec, i32* %r3.global-to-local, align 4
  %v1_15500 = load i32, i32* %r7.global-to-local, align 4
  %v2_15500 = add i32 %v1_15500, 44
  %v3_15500 = inttoptr i32 %v2_15500 to i32*
  store i32 %v5_154e8, i32* %v3_15500, align 4
  %v0_15504 = load i32, i32* %r3.global-to-local, align 4
  %v1_15504 = load i32, i32* %r7.global-to-local, align 4
  %v2_15504 = add i32 %v1_15504, 48
  %v3_15504 = inttoptr i32 %v2_15504 to i32*
  store i32 %v0_15504, i32* %v3_15504, align 4
  %v0_15508 = load i32, i32* %r4.global-to-local, align 4
  %v1_15508 = add i32 %v0_15508, 53
  %v2_15508 = inttoptr i32 %v1_15508 to i8*
  %v3_15508 = load i8, i8* %v2_15508, align 1
  %v4_15508 = zext i8 %v3_15508 to i32
  %v1_1550c = add i32 %v0_15508, 52
  %v2_1550c = inttoptr i32 %v1_1550c to i8*
  %v3_1550c = load i8, i8* %v2_1550c, align 1
  %v4_1550c = zext i8 %v3_1550c to i32
  store i32 %v4_1550c, i32* %r3.global-to-local, align 4
  %v1_15510 = add i32 %v0_15508, 54
  %v2_15510 = inttoptr i32 %v1_15510 to i8*
  %v3_15510 = load i8, i8* %v2_15510, align 1
  %v4_15510 = zext i8 %v3_15510 to i32
  %v4_15514 = mul nuw nsw i32 %v4_15508, 256
  %v5_15514 = or i32 %v4_1550c, %v4_15514
  store i32 %v5_15514, i32* %r3.global-to-local, align 4
  %v1_15518 = add i32 %v0_15508, 55
  %v2_15518 = inttoptr i32 %v1_15518 to i8*
  %v3_15518 = load i8, i8* %v2_15518, align 1
  %v4_15518 = zext i8 %v3_15518 to i32
  %v4_1551c = mul nuw nsw i32 %v4_15510, 65536
  %v5_1551c = or i32 %v4_1551c, %v5_15514
  %v4_15520 = mul nuw i32 %v4_15518, 16777216
  %v5_15520 = or i32 %v5_1551c, %v4_15520
  store i32 %v5_15520, i32* %r3.global-to-local, align 4
  %v1_15524 = load i32, i32* %r7.global-to-local, align 4
  %v2_15524 = add i32 %v1_15524, 52
  %v3_15524 = inttoptr i32 %v2_15524 to i32*
  store i32 %v5_15520, i32* %v3_15524, align 4
  %v0_15528 = load i32, i32* %r4.global-to-local, align 4
  %v1_15528 = add i32 %v0_15528, 57
  %v2_15528 = inttoptr i32 %v1_15528 to i8*
  %v3_15528 = load i8, i8* %v2_15528, align 1
  %v4_15528 = zext i8 %v3_15528 to i32
  %v1_1552c = add i32 %v0_15528, 56
  %v2_1552c = inttoptr i32 %v1_1552c to i8*
  %v3_1552c = load i8, i8* %v2_1552c, align 1
  %v4_1552c = zext i8 %v3_1552c to i32
  %v1_15530 = add i32 %v0_15528, 60
  %v2_15530 = inttoptr i32 %v1_15530 to i8*
  %v3_15530 = load i8, i8* %v2_15530, align 1
  %v4_15530 = zext i8 %v3_15530 to i32
  store i32 %v4_15530, i32* %r3.global-to-local, align 4
  %v1_15534 = add i32 %v0_15528, 61
  %v2_15534 = inttoptr i32 %v1_15534 to i8*
  %v3_15534 = load i8, i8* %v2_15534, align 1
  %v4_15534 = zext i8 %v3_15534 to i32
  %v1_15538 = add i32 %v0_15528, 58
  %v2_15538 = inttoptr i32 %v1_15538 to i8*
  %v3_15538 = load i8, i8* %v2_15538, align 1
  %v4_15538 = zext i8 %v3_15538 to i32
  %v1_1553c = add i32 %v0_15528, 62
  %v2_1553c = inttoptr i32 %v1_1553c to i8*
  %v3_1553c = load i8, i8* %v2_1553c, align 1
  %v4_1553c = zext i8 %v3_1553c to i32
  %v1_15540 = add i32 %v0_15528, 59
  %v2_15540 = inttoptr i32 %v1_15540 to i8*
  %v3_15540 = load i8, i8* %v2_15540, align 1
  %v4_15540 = zext i8 %v3_15540 to i32
  %v4_15544 = mul nuw nsw i32 %v4_15528, 256
  %v5_15544 = or i32 %v4_1552c, %v4_15544
  %v4_15548 = mul nuw nsw i32 %v4_15534, 256
  %v5_15548 = or i32 %v4_15548, %v4_15530
  store i32 %v5_15548, i32* %r3.global-to-local, align 4
  %v1_1554c = add i32 %v0_15528, 63
  %v2_1554c = inttoptr i32 %v1_1554c to i8*
  %v3_1554c = load i8, i8* %v2_1554c, align 1
  %v4_1554c = zext i8 %v3_1554c to i32
  %v4_15550 = mul nuw nsw i32 %v4_15538, 65536
  %v5_15550 = or i32 %v4_15550, %v5_15544
  %v4_15554 = mul nuw nsw i32 %v4_1553c, 65536
  %v5_15554 = or i32 %v4_15554, %v5_15548
  %v4_15558 = mul nuw i32 %v4_1554c, 16777216
  %v5_15558 = or i32 %v5_15554, %v4_15558
  %v4_1555c = mul nuw i32 %v4_15540, 16777216
  %v5_1555c = or i32 %v5_15550, %v4_1555c
  store i32 %v5_15558, i32* %r3.global-to-local, align 4
  %v1_1556c = load i32, i32* %r7.global-to-local, align 4
  %v2_1556c = add i32 %v1_1556c, 56
  %v3_1556c = inttoptr i32 %v2_1556c to i32*
  store i32 %v5_1555c, i32* %v3_1556c, align 4
  %v0_15570 = load i32, i32* %r3.global-to-local, align 4
  %v1_15570 = load i32, i32* %r7.global-to-local, align 4
  %v2_15570 = add i32 %v1_15570, 60
  %v3_15570 = inttoptr i32 %v2_15570 to i32*
  store i32 %v0_15570, i32* %v3_15570, align 4
  %v0_15574 = load i32, i32* %r4.global-to-local, align 4
  %v1_15574 = add i32 %v0_15574, 65
  %v2_15574 = inttoptr i32 %v1_15574 to i8*
  %v3_15574 = load i8, i8* %v2_15574, align 1
  %v4_15574 = zext i8 %v3_15574 to i32
  %v1_15578 = add i32 %v0_15574, 64
  %v2_15578 = inttoptr i32 %v1_15578 to i8*
  %v3_15578 = load i8, i8* %v2_15578, align 1
  %v4_15578 = zext i8 %v3_15578 to i32
  store i32 %v4_15578, i32* %r3.global-to-local, align 4
  %v1_1557c = add i32 %v0_15574, 66
  %v2_1557c = inttoptr i32 %v1_1557c to i8*
  %v3_1557c = load i8, i8* %v2_1557c, align 1
  %v4_1557c = zext i8 %v3_1557c to i32
  %v4_15580 = mul nuw nsw i32 %v4_15574, 256
  %v5_15580 = or i32 %v4_15578, %v4_15580
  store i32 %v5_15580, i32* %r3.global-to-local, align 4
  %v1_15584 = add i32 %v0_15574, 67
  %v2_15584 = inttoptr i32 %v1_15584 to i8*
  %v3_15584 = load i8, i8* %v2_15584, align 1
  %v4_15584 = zext i8 %v3_15584 to i32
  %v4_15588 = mul nuw nsw i32 %v4_1557c, 65536
  %v5_15588 = or i32 %v4_15588, %v5_15580
  %v4_1558c = mul nuw i32 %v4_15584, 16777216
  %v5_1558c = or i32 %v5_15588, %v4_1558c
  store i32 %v5_1558c, i32* %r3.global-to-local, align 4
  %v1_15590 = load i32, i32* %r7.global-to-local, align 4
  %v2_15590 = add i32 %v1_15590, 64
  %v3_15590 = inttoptr i32 %v2_15590 to i32*
  store i32 %v5_1558c, i32* %v3_15590, align 4
  %v0_15594 = load i32, i32* %r4.global-to-local, align 4
  %v1_15594 = add i32 %v0_15594, 73
  %v2_15594 = inttoptr i32 %v1_15594 to i8*
  %v3_15594 = load i8, i8* %v2_15594, align 1
  %v4_15594 = zext i8 %v3_15594 to i32
  %v1_15598 = add i32 %v0_15594, 72
  %v2_15598 = inttoptr i32 %v1_15598 to i8*
  %v3_15598 = load i8, i8* %v2_15598, align 1
  %v4_15598 = zext i8 %v3_15598 to i32
  store i32 %v4_15598, i32* %r3.global-to-local, align 4
  %v1_1559c = add i32 %v0_15594, 74
  %v2_1559c = inttoptr i32 %v1_1559c to i8*
  %v3_1559c = load i8, i8* %v2_1559c, align 1
  %v4_1559c = zext i8 %v3_1559c to i32
  %v4_155a0 = mul nuw nsw i32 %v4_15594, 256
  %v5_155a0 = or i32 %v4_15598, %v4_155a0
  store i32 %v5_155a0, i32* %r3.global-to-local, align 4
  %v1_155a4 = add i32 %v0_15594, 75
  %v2_155a4 = inttoptr i32 %v1_155a4 to i8*
  %v3_155a4 = load i8, i8* %v2_155a4, align 1
  %v4_155a4 = zext i8 %v3_155a4 to i32
  %v4_155a8 = mul nuw nsw i32 %v4_1559c, 65536
  %v5_155a8 = or i32 %v4_155a8, %v5_155a0
  %v4_155ac = mul nuw i32 %v4_155a4, 16777216
  %v5_155ac = or i32 %v5_155a8, %v4_155ac
  store i32 %v5_155ac, i32* %r3.global-to-local, align 4
  %v1_155b0 = load i32, i32* %r7.global-to-local, align 4
  %v2_155b0 = add i32 %v1_155b0, 72
  %v3_155b0 = inttoptr i32 %v2_155b0 to i32*
  store i32 %v5_155ac, i32* %v3_155b0, align 4
  %v0_155b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_155b4 = add i32 %v0_155b4, 81
  %v2_155b4 = inttoptr i32 %v1_155b4 to i8*
  %v3_155b4 = load i8, i8* %v2_155b4, align 1
  %v4_155b4 = zext i8 %v3_155b4 to i32
  %v1_155b8 = add i32 %v0_155b4, 80
  %v2_155b8 = inttoptr i32 %v1_155b8 to i8*
  %v3_155b8 = load i8, i8* %v2_155b8, align 1
  %v4_155b8 = zext i8 %v3_155b8 to i32
  store i32 %v4_155b8, i32* %r3.global-to-local, align 4
  %v1_155bc = add i32 %v0_155b4, 82
  %v2_155bc = inttoptr i32 %v1_155bc to i8*
  %v3_155bc = load i8, i8* %v2_155bc, align 1
  %v4_155bc = zext i8 %v3_155bc to i32
  %v4_155c0 = mul nuw nsw i32 %v4_155b4, 256
  %v5_155c0 = or i32 %v4_155b8, %v4_155c0
  store i32 %v5_155c0, i32* %r3.global-to-local, align 4
  %v1_155c4 = add i32 %v0_155b4, 83
  %v2_155c4 = inttoptr i32 %v1_155c4 to i8*
  %v3_155c4 = load i8, i8* %v2_155c4, align 1
  %v4_155c4 = zext i8 %v3_155c4 to i32
  %v4_155c8 = mul nuw nsw i32 %v4_155bc, 65536
  %v5_155c8 = or i32 %v4_155c8, %v5_155c0
  %v4_155cc = mul nuw i32 %v4_155c4, 16777216
  %v5_155cc = or i32 %v5_155c8, %v4_155cc
  store i32 %v5_155cc, i32* %r3.global-to-local, align 4
  %v1_155d0 = load i32, i32* %r7.global-to-local, align 4
  %v2_155d0 = add i32 %v1_155d0, 80
  %v3_155d0 = inttoptr i32 %v2_155d0 to i32*
  store i32 %v5_155cc, i32* %v3_155d0, align 4
  %v0_155d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_155d4 = add i32 %v0_155d4, 69
  %v2_155d4 = inttoptr i32 %v1_155d4 to i8*
  %v3_155d4 = load i8, i8* %v2_155d4, align 1
  %v4_155d4 = zext i8 %v3_155d4 to i32
  %v1_155d8 = add i32 %v0_155d4, 68
  %v2_155d8 = inttoptr i32 %v1_155d8 to i8*
  %v3_155d8 = load i8, i8* %v2_155d8, align 1
  %v4_155d8 = zext i8 %v3_155d8 to i32
  store i32 %v4_155d8, i32* %r3.global-to-local, align 4
  %v1_155dc = add i32 %v0_155d4, 70
  %v2_155dc = inttoptr i32 %v1_155dc to i8*
  %v3_155dc = load i8, i8* %v2_155dc, align 1
  %v4_155dc = zext i8 %v3_155dc to i32
  %v4_155e0 = mul nuw nsw i32 %v4_155d4, 256
  %v5_155e0 = or i32 %v4_155d8, %v4_155e0
  store i32 %v5_155e0, i32* %r3.global-to-local, align 4
  %v1_155e4 = add i32 %v0_155d4, 71
  %v2_155e4 = inttoptr i32 %v1_155e4 to i8*
  %v3_155e4 = load i8, i8* %v2_155e4, align 1
  %v4_155e4 = zext i8 %v3_155e4 to i32
  %v4_155e8 = mul nuw nsw i32 %v4_155dc, 65536
  %v5_155e8 = or i32 %v4_155e8, %v5_155e0
  %v4_155ec = mul nuw i32 %v4_155e4, 16777216
  %v5_155ec = or i32 %v5_155e8, %v4_155ec
  store i32 %v5_155ec, i32* %r3.global-to-local, align 4
  %v1_155f0 = load i32, i32* %r7.global-to-local, align 4
  %v2_155f0 = add i32 %v1_155f0, 68
  %v3_155f0 = inttoptr i32 %v2_155f0 to i32*
  store i32 %v5_155ec, i32* %v3_155f0, align 4
  %v0_155f4 = load i32, i32* %r4.global-to-local, align 4
  %v1_155f4 = add i32 %v0_155f4, 77
  %v2_155f4 = inttoptr i32 %v1_155f4 to i8*
  %v3_155f4 = load i8, i8* %v2_155f4, align 1
  %v4_155f4 = zext i8 %v3_155f4 to i32
  %v1_155f8 = add i32 %v0_155f4, 76
  %v2_155f8 = inttoptr i32 %v1_155f8 to i8*
  %v3_155f8 = load i8, i8* %v2_155f8, align 1
  %v4_155f8 = zext i8 %v3_155f8 to i32
  store i32 %v4_155f8, i32* %r3.global-to-local, align 4
  %v1_155fc = add i32 %v0_155f4, 78
  %v2_155fc = inttoptr i32 %v1_155fc to i8*
  %v3_155fc = load i8, i8* %v2_155fc, align 1
  %v4_155fc = zext i8 %v3_155fc to i32
  %v4_15600 = mul nuw nsw i32 %v4_155f4, 256
  %v5_15600 = or i32 %v4_155f8, %v4_15600
  store i32 %v5_15600, i32* %r3.global-to-local, align 4
  %v1_15604 = add i32 %v0_155f4, 79
  %v2_15604 = inttoptr i32 %v1_15604 to i8*
  %v3_15604 = load i8, i8* %v2_15604, align 1
  %v4_15604 = zext i8 %v3_15604 to i32
  %v4_15608 = mul nuw nsw i32 %v4_155fc, 65536
  %v5_15608 = or i32 %v4_15608, %v5_15600
  %v4_1560c = mul nuw i32 %v4_15604, 16777216
  %v5_1560c = or i32 %v5_15608, %v4_1560c
  store i32 %v5_1560c, i32* %r3.global-to-local, align 4
  %v1_15610 = load i32, i32* %r7.global-to-local, align 4
  %v2_15610 = add i32 %v1_15610, 76
  %v3_15610 = inttoptr i32 %v2_15610 to i32*
  store i32 %v5_1560c, i32* %v3_15610, align 4
  %v0_15614 = load i32, i32* %r4.global-to-local, align 4
  %v1_15614 = add i32 %v0_15614, 85
  %v2_15614 = inttoptr i32 %v1_15614 to i8*
  %v3_15614 = load i8, i8* %v2_15614, align 1
  %v4_15614 = zext i8 %v3_15614 to i32
  %v1_15618 = add i32 %v0_15614, 84
  %v2_15618 = inttoptr i32 %v1_15618 to i8*
  %v3_15618 = load i8, i8* %v2_15618, align 1
  %v4_15618 = zext i8 %v3_15618 to i32
  store i32 %v4_15618, i32* %r3.global-to-local, align 4
  %v1_1561c = add i32 %v0_15614, 86
  %v2_1561c = inttoptr i32 %v1_1561c to i8*
  %v3_1561c = load i8, i8* %v2_1561c, align 1
  %v4_1561c = zext i8 %v3_1561c to i32
  %v4_15620 = mul nuw nsw i32 %v4_15614, 256
  %v5_15620 = or i32 %v4_15618, %v4_15620
  store i32 %v5_15620, i32* %r3.global-to-local, align 4
  %v1_15624 = add i32 %v0_15614, 87
  %v2_15624 = inttoptr i32 %v1_15624 to i8*
  %v3_15624 = load i8, i8* %v2_15624, align 1
  %v4_15624 = zext i8 %v3_15624 to i32
  %v4_15628 = mul nuw nsw i32 %v4_1561c, 65536
  %v5_15628 = or i32 %v4_15628, %v5_15620
  %v4_1562c = mul nuw i32 %v4_15624, 16777216
  %v5_1562c = or i32 %v5_15628, %v4_1562c
  store i32 %v5_1562c, i32* %r3.global-to-local, align 4
  %v1_15630 = load i32, i32* %r7.global-to-local, align 4
  %v2_15630 = add i32 %v1_15630, 84
  %v3_15630 = inttoptr i32 %v2_15630 to i32*
  store i32 %v5_1562c, i32* %v3_15630, align 4
  ret i32 %v4_15534

; uselistorder directives
  uselistorder i32 %v4_15534, { 1, 0 }
  uselistorder i32 %v0_15528, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_154b8, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_15468, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_15388, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 83, { 2, 1, 0 }
  uselistorder i32 80, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 59, { 1, 2, 0 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 2, 0, 3 }
  uselistorder i32 51, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 47, { 4, 5, 6, 0, 7, 1, 8, 2, 9, 10, 3 }
  uselistorder i32 50, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 46, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 49, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 45, { 2, 3, 0, 4, 1, 5 }
  uselistorder i32 39, { 5, 6, 0, 1, 7, 2, 8, 3, 9, 4 }
  uselistorder i32 35, { 3, 0, 4, 1, 5, 2, 6 }
  uselistorder i32 38, { 4, 3, 5, 6, 7, 8, 0, 9, 1, 10, 2, 11 }
  uselistorder i32 34, { 5, 0, 1, 6, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 37, { 3, 0, 4, 1, 5, 6, 7, 8, 2, 9 }
  uselistorder i32 33, { 9, 2, 0, 12, 1, 10, 3, 11, 4, 5, 6, 13, 7, 14, 8, 15, 16 }
  uselistorder i32 30, { 5, 0, 9, 4, 1, 6, 2, 7, 3, 8, 10 }
  uselistorder i32 29, { 7, 1, 0, 8, 9, 5, 2, 3, 4, 6 }
  uselistorder i32 26, { 5, 0, 1, 2, 6, 3, 7, 4, 8, 9 }
  uselistorder i32 25, { 12, 24, 25, 3, 0, 4, 13, 5, 14, 6, 15, 11, 16, 17, 18, 1, 19, 7, 20, 2, 21, 8, 9, 22, 10, 23, 26, 27 }
  uselistorder i32 23, { 8, 2, 0, 3, 1, 4, 9, 5, 10, 6, 11, 13, 14, 12, 7 }
  uselistorder i32 22, { 11, 1, 15, 2, 3, 4, 5, 0, 6, 12, 7, 13, 8, 14, 16, 9, 10, 17 }
  uselistorder i32 21, { 8, 3, 1, 9, 4, 10, 5, 11, 6, 12, 13, 14, 7, 0, 15, 2, 16 }
  uselistorder i32 19, { 9, 14, 15, 16, 4, 13, 1, 5, 10, 6, 11, 7, 12, 0, 20, 17, 2, 18, 3, 19, 8 }
  uselistorder i32 18, { 9, 13, 14, 15, 1, 0, 2, 10, 3, 11, 4, 12, 8, 16, 5, 17, 6, 18, 7, 19 }
  uselistorder i32 17, { 12, 15, 0, 4, 31, 32, 5, 33, 34, 6, 1, 30, 13, 14, 7, 16, 8, 17, 9, 18, 10, 19, 11, 20, 21, 2, 22, 23, 24, 3, 25, 26, 27, 28, 29 }
  uselistorder i32 6, { 40, 43, 13, 14, 88, 15, 2, 16, 41, 0, 82, 17, 83, 42, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 3, 29, 30, 31, 32, 33, 4, 34, 44, 45, 46, 5, 47, 48, 49, 50, 6, 51, 52, 53, 54, 7, 55, 8, 56, 57, 58, 35, 59, 9, 60, 61, 62, 36, 63, 10, 64, 65, 66, 37, 67, 68, 69, 70, 71, 38, 72, 11, 73, 74, 75, 76, 77, 78, 39, 79, 12, 80, 1, 81, 84, 85, 86, 87 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_1563c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1563c:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1563c = load i32, i32* @r4, align 4
  store i32 %v3_1563c, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_15654 = inttoptr i32 %arg2 to i8*
  %v3_15654 = call i32 @function_13af0(i8* %v2_15654, i32 0)
  store i32 %v3_15654, i32* %r0.global-to-local, align 4
  %v0_15658 = load i32, i32* %r5.global-to-local, align 4
  %v1_15658 = inttoptr i32 %v0_15658 to i32*
  %v2_15658 = load i32, i32* %v1_15658, align 4
  store i32 %v2_15658, i32* %r3.global-to-local, align 4
  %v1_1565c = add i32 %v0_15658, 4
  %v2_1565c = inttoptr i32 %v1_1565c to i32*
  %v3_1565c = load i32, i32* %v2_1565c, align 4
  store i32 %v3_1565c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_15664 = load i32, i32* %r6.global-to-local, align 4
  %v1_15664 = inttoptr i32 %v0_15664 to i32*
  store i32 %v2_15658, i32* %v1_15664, align 4
  %v3_15664 = add i32 %v0_15664, 4
  %v4_15664 = inttoptr i32 %v3_15664 to i32*
  %v5_15664 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15664, i32* %v4_15664, align 4
  %v0_15668 = load i32, i32* %r2.global-to-local, align 4
  %v1_15668 = load i32, i32* %r6.global-to-local, align 4
  %v2_15668 = add i32 %v1_15668, 12
  %v3_15668 = inttoptr i32 %v2_15668 to i32*
  store i32 %v0_15668, i32* %v3_15668, align 4
  %v0_1566c = load i32, i32* %r5.global-to-local, align 4
  %v1_1566c = add i32 %v0_1566c, 9
  %v2_1566c = inttoptr i32 %v1_1566c to i8*
  %v3_1566c = load i8, i8* %v2_1566c, align 1
  %v4_1566c = zext i8 %v3_1566c to i32
  store i32 %v4_1566c, i32* %r2.global-to-local, align 4
  %v1_15670 = add i32 %v0_1566c, 8
  %v2_15670 = inttoptr i32 %v1_15670 to i8*
  %v3_15670 = load i8, i8* %v2_15670, align 1
  %v4_15670 = zext i8 %v3_15670 to i32
  %v4_15674 = mul nuw nsw i32 %v4_1566c, 256
  %v5_15674 = or i32 %v4_15670, %v4_15674
  store i32 %v5_15674, i32* %r3.global-to-local, align 4
  %v1_15678 = load i32, i32* %r6.global-to-local, align 4
  %v2_15678 = add i32 %v1_15678, 16
  %v3_15678 = inttoptr i32 %v2_15678 to i32*
  store i32 %v5_15674, i32* %v3_15678, align 4
  %v0_1567c = load i32, i32* %r5.global-to-local, align 4
  %v1_1567c = add i32 %v0_1567c, 11
  %v2_1567c = inttoptr i32 %v1_1567c to i8*
  %v3_1567c = load i8, i8* %v2_1567c, align 1
  %v4_1567c = zext i8 %v3_1567c to i32
  store i32 %v4_1567c, i32* %r2.global-to-local, align 4
  %v1_15680 = add i32 %v0_1567c, 10
  %v2_15680 = inttoptr i32 %v1_15680 to i8*
  %v3_15680 = load i8, i8* %v2_15680, align 1
  %v4_15680 = zext i8 %v3_15680 to i32
  %v4_15684 = mul nuw nsw i32 %v4_1567c, 256
  %v5_15684 = or i32 %v4_15680, %v4_15684
  store i32 %v5_15684, i32* %r3.global-to-local, align 4
  %v1_15688 = load i32, i32* %r6.global-to-local, align 4
  %v2_15688 = add i32 %v1_15688, 20
  %v3_15688 = inttoptr i32 %v2_15688 to i32*
  store i32 %v5_15684, i32* %v3_15688, align 4
  %v0_1568c = load i32, i32* %r5.global-to-local, align 4
  %v1_1568c = add i32 %v0_1568c, 13
  %v2_1568c = inttoptr i32 %v1_1568c to i8*
  %v3_1568c = load i8, i8* %v2_1568c, align 1
  %v4_1568c = zext i8 %v3_1568c to i32
  store i32 %v4_1568c, i32* %r2.global-to-local, align 4
  %v1_15690 = add i32 %v0_1568c, 12
  %v2_15690 = inttoptr i32 %v1_15690 to i8*
  %v3_15690 = load i8, i8* %v2_15690, align 1
  %v4_15690 = zext i8 %v3_15690 to i32
  %v4_15694 = mul nuw nsw i32 %v4_1568c, 256
  %v5_15694 = or i32 %v4_15690, %v4_15694
  store i32 %v5_15694, i32* %r3.global-to-local, align 4
  %v1_15698 = load i32, i32* %r6.global-to-local, align 4
  %v2_15698 = add i32 %v1_15698, 24
  %v3_15698 = inttoptr i32 %v2_15698 to i32*
  store i32 %v5_15694, i32* %v3_15698, align 4
  %v0_1569c = load i32, i32* %r5.global-to-local, align 4
  %v1_1569c = add i32 %v0_1569c, 20
  %v2_1569c = inttoptr i32 %v1_1569c to i32*
  %v3_1569c = load i32, i32* %v2_1569c, align 4
  store i32 %v3_1569c, i32* %r3.global-to-local, align 4
  %v1_156a0 = add i32 %v0_1569c, 14
  %v2_156a0 = inttoptr i32 %v1_156a0 to i8*
  %v3_156a0 = load i8, i8* %v2_156a0, align 1
  %v4_156a0 = zext i8 %v3_156a0 to i32
  store i32 %v4_156a0, i32* %r0.global-to-local, align 4
  %v1_156a4 = add i32 %v0_1569c, 15
  %v2_156a4 = inttoptr i32 %v1_156a4 to i8*
  %v3_156a4 = load i8, i8* %v2_156a4, align 1
  %v4_156a4 = zext i8 %v3_156a4 to i32
  store i32 %v4_156a4, i32* %ip.global-to-local, align 4
  %v1_156a8 = add i32 %v0_1569c, 16
  %v2_156a8 = inttoptr i32 %v1_156a8 to i32*
  %v3_156a8 = load i32, i32* %v2_156a8, align 4
  store i32 %v3_156a8, i32* %r1.global-to-local, align 4
  %v1_156ac = load i32, i32* %r6.global-to-local, align 4
  %v2_156ac = add i32 %v1_156ac, 44
  %v3_156ac = inttoptr i32 %v2_156ac to i32*
  store i32 %v3_1569c, i32* %v3_156ac, align 4
  %v0_156b0 = load i32, i32* %r5.global-to-local, align 4
  %v1_156b0 = add i32 %v0_156b0, 24
  %v2_156b0 = inttoptr i32 %v1_156b0 to i32*
  %v3_156b0 = load i32, i32* %v2_156b0, align 4
  store i32 %v3_156b0, i32* %r3.global-to-local, align 4
  %v1_156b4 = load i32, i32* %r6.global-to-local, align 4
  %v2_156b4 = add i32 %v1_156b4, 48
  %v3_156b4 = inttoptr i32 %v2_156b4 to i32*
  store i32 %v3_156b0, i32* %v3_156b4, align 4
  %v0_156b8 = load i32, i32* %r5.global-to-local, align 4
  %v1_156b8 = add i32 %v0_156b8, 28
  %v2_156b8 = inttoptr i32 %v1_156b8 to i32*
  %v3_156b8 = load i32, i32* %v2_156b8, align 4
  store i32 %v3_156b8, i32* %r3.global-to-local, align 4
  %v1_156bc = load i32, i32* %r6.global-to-local, align 4
  %v2_156bc = add i32 %v1_156bc, 52
  %v3_156bc = inttoptr i32 %v2_156bc to i32*
  store i32 %v3_156b8, i32* %v3_156bc, align 4
  %v0_156c0 = load i32, i32* %r5.global-to-local, align 4
  %v1_156c0 = add i32 %v0_156c0, 32
  %v2_156c0 = inttoptr i32 %v1_156c0 to i32*
  %v3_156c0 = load i32, i32* %v2_156c0, align 4
  store i32 %v3_156c0, i32* %r3.global-to-local, align 4
  %v1_156c4 = load i32, i32* %r6.global-to-local, align 4
  %v2_156c4 = add i32 %v1_156c4, 56
  %v3_156c4 = inttoptr i32 %v2_156c4 to i32*
  store i32 %v3_156c0, i32* %v3_156c4, align 4
  %v0_156c8 = load i32, i32* %r5.global-to-local, align 4
  %v1_156c8 = add i32 %v0_156c8, 40
  %v2_156c8 = inttoptr i32 %v1_156c8 to i32*
  %v3_156c8 = load i32, i32* %v2_156c8, align 4
  store i32 %v3_156c8, i32* %r3.global-to-local, align 4
  %v1_156cc = load i32, i32* %r6.global-to-local, align 4
  %v2_156cc = add i32 %v1_156cc, 64
  %v3_156cc = inttoptr i32 %v2_156cc to i32*
  store i32 %v3_156c8, i32* %v3_156cc, align 4
  %v0_156d0 = load i32, i32* %r5.global-to-local, align 4
  %v1_156d0 = add i32 %v0_156d0, 48
  %v2_156d0 = inttoptr i32 %v1_156d0 to i32*
  %v3_156d0 = load i32, i32* %v2_156d0, align 4
  store i32 %v3_156d0, i32* %r3.global-to-local, align 4
  %v1_156d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_156d4 = add i32 %v1_156d4, 72
  %v3_156d4 = inttoptr i32 %v2_156d4 to i32*
  store i32 %v3_156d0, i32* %v3_156d4, align 4
  %v0_156d8 = load i32, i32* %r5.global-to-local, align 4
  %v1_156d8 = add i32 %v0_156d8, 36
  %v2_156d8 = inttoptr i32 %v1_156d8 to i32*
  %v3_156d8 = load i32, i32* %v2_156d8, align 4
  store i32 %v3_156d8, i32* %r3.global-to-local, align 4
  %v1_156dc = load i32, i32* %r6.global-to-local, align 4
  %v2_156dc = add i32 %v1_156dc, 60
  %v3_156dc = inttoptr i32 %v2_156dc to i32*
  store i32 %v3_156d8, i32* %v3_156dc, align 4
  %v0_156e0 = load i32, i32* %r5.global-to-local, align 4
  %v1_156e0 = add i32 %v0_156e0, 44
  %v2_156e0 = inttoptr i32 %v1_156e0 to i32*
  %v3_156e0 = load i32, i32* %v2_156e0, align 4
  store i32 %v3_156e0, i32* %r3.global-to-local, align 4
  %v0_156e4 = load i32, i32* %r0.global-to-local, align 4
  %v1_156e4 = load i32, i32* %ip.global-to-local, align 4
  %v4_156e4 = mul i32 %v1_156e4, 256
  %v5_156e4 = or i32 %v4_156e4, %v0_156e4
  store i32 %v5_156e4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_156ec = load i32, i32* %r6.global-to-local, align 4
  %v2_156ec = add i32 %v1_156ec, 28
  %v3_156ec = inttoptr i32 %v2_156ec to i32*
  store i32 %v5_156e4, i32* %v3_156ec, align 4
  %v0_156f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_156f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_156f0 = add i32 %v1_156f0, 32
  %v3_156f0 = inttoptr i32 %v2_156f0 to i32*
  store i32 %v0_156f0, i32* %v3_156f0, align 4
  %v0_156f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_156f4 = load i32, i32* %r6.global-to-local, align 4
  %v2_156f4 = add i32 %v1_156f4, 36
  %v3_156f4 = inttoptr i32 %v2_156f4 to i32*
  store i32 %v0_156f4, i32* %v3_156f4, align 4
  %v0_156f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_156f8 = load i32, i32* %r6.global-to-local, align 4
  %v2_156f8 = add i32 %v1_156f8, 68
  %v3_156f8 = inttoptr i32 %v2_156f8 to i32*
  store i32 %v0_156f8, i32* %v3_156f8, align 4
  %v0_156fc = load i32, i32* %r5.global-to-local, align 4
  %v1_156fc = add i32 %v0_156fc, 52
  %v2_156fc = inttoptr i32 %v1_156fc to i32*
  %v3_156fc = load i32, i32* %v2_156fc, align 4
  store i32 %v3_156fc, i32* %r3.global-to-local, align 4
  %v1_15700 = load i32, i32* %r6.global-to-local, align 4
  %v2_15700 = add i32 %v1_15700, 76
  %v3_15700 = inttoptr i32 %v2_15700 to i32*
  store i32 %v3_156fc, i32* %v3_15700, align 4
  %v2_15704 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15704, i32* %r4.global-to-local, align 4
  ret i32 %v5_156e4

; uselistorder directives
  uselistorder i32 %v0_1569c, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 16, 12, 13, 0, 7, 47, 8, 14, 9, 15, 17, 18, 10, 19, 20, 21, 1, 22, 23, 24, 25, 2, 26, 27, 28, 11, 29, 30, 31, 3, 32, 33, 34, 4, 35, 36, 37, 38, 39, 5, 40, 41, 42, 43, 44, 6, 45, 46 }
  uselistorder i32 56, { 4, 2, 3, 6, 5, 0, 1 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32 15, { 18, 17, 16, 2, 0, 26, 3, 27, 4, 28, 5, 29, 6, 30, 7, 31, 8, 9, 10, 11, 12, 13, 14, 19, 20, 15, 21, 22, 23, 24, 1, 25 }
  uselistorder i32 14, { 9, 8, 17, 7, 1, 2, 3, 4, 5, 10, 11, 6, 12, 13, 14, 15, 0, 16 }
  uselistorder i32 13, { 16, 12, 11, 4, 2, 13, 14, 15, 46, 0, 1, 5, 6, 7, 8, 17, 18, 19, 20, 21, 9, 22, 23, 24, 25, 26, 27, 28, 29, 10, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 3, 44, 45 }
  uselistorder i32 9, { 45, 46, 47, 10, 5, 67, 6, 39, 7, 62, 34, 12, 38, 13, 37, 11, 3, 63, 35, 64, 2, 36, 66, 14, 40, 41, 15, 16, 42, 17, 43, 18, 44, 0, 19, 20, 21, 22, 1, 23, 24, 65, 48, 49, 8, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 4, 61, 25, 26, 27, 28, 29, 30, 31, 32, 33, 68, 69, 9, 70 }
  uselistorder i32 (i8*, i32)* @function_13af0, { 2, 0, 8, 7, 1, 3, 4, 5, 6 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_15708(i32 %arg1) local_unnamed_addr {
dec_label_pc_15708:
  ret i32 %arg1
}

define i32 @function_15710() local_unnamed_addr {
dec_label_pc_15710:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_15710 = load i32, i32* @r1, align 4
  %v1_15710 = load i32, i32* @r0, align 4
  %v2_15710 = sub i32 %v0_15710, %v1_15710
  %v3_15710 = icmp ult i32 %v0_15710, %v1_15710
  %v4_15710 = xor i32 %v1_15710, %v0_15710
  %v5_15710 = xor i32 %v2_15710, %v0_15710
  %v6_15710 = and i32 %v5_15710, %v4_15710
  %v7_15710 = icmp slt i32 %v6_15710, 0
  store i1 %v7_15710, i1* %cpsr_v.global-to-local, align 1
  %v8_15710 = icmp slt i32 %v2_15710, 0
  store i1 %v8_15710, i1* %cpsr_n.global-to-local, align 1
  %v9_15710 = icmp eq i32 %v0_15710, %v1_15710
  store i1 %v9_15710, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_15710, label %dec_label_pc_1595c, label %dec_label_pc_15718

dec_label_pc_15718:                               ; preds = %dec_label_pc_15710
  br i1 %v9_15710, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_15718
  %merge = phi i32 [ %v0_15710, %dec_label_pc_15718 ], [ %v2_159f0, %bb141 ], [ %v11_15a0c, %bb144 ], [ %v7_15a0c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_15718
  store i32 %v1_15710, i32* %stack_var_-8, align 4
  %v0_15720 = load i32, i32* @r2, align 4
  %v2_15720 = add i32 %v0_15720, -4
  store i32 %v2_15720, i32* %r2.global-to-local, align 4
  %v4_15720 = sub i32 3, %v0_15720
  %v5_15720 = and i32 %v4_15720, %v0_15720
  %v6_15720 = icmp slt i32 %v5_15720, 0
  store i1 %v6_15720, i1* %cpsr_v.global-to-local, align 1
  %v7_15720 = icmp slt i32 %v2_15720, 0
  store i1 %v7_15720, i1* %cpsr_n.global-to-local, align 1
  %v8_15720 = icmp eq i32 %v0_15720, 4
  store i1 %v8_15720, i1* %cpsr_z.global-to-local, align 1
  %v5_15724 = icmp slt i32 %v0_15720, 4
  br i1 %v5_15724, label %bb131, label %dec_label_pc_15728

dec_label_pc_15728:                               ; preds = %bb
  %v1_15728 = urem i32 %v1_15710, 4
  store i32 %v1_15728, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15728 = icmp eq i32 %v1_15728, 0
  store i1 %v2_15728, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15728, label %dec_label_pc_15730, label %dec_label_pc_157d4

dec_label_pc_15730:                               ; preds = %dec_label_pc_15728
  %v1_15730 = urem i32 %v0_15710, 4
  store i32 %v1_15730, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15730 = icmp eq i32 %v1_15730, 0
  store i1 %v2_15730, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_15710 to i2
  br i1 %v2_15730, label %dec_label_pc_15738, label %dec_label_pc_15804

dec_label_pc_15738:                               ; preds = %dec_label_pc_15730, %dec_label_pc_157fc
  %v0_1575092 = phi i32 [ %v1_15710, %dec_label_pc_15730 ], [ %v0_1584c75, %dec_label_pc_157fc ]
  %v0_1574c91 = phi i32 [ %v0_15710, %dec_label_pc_15730 ], [ %v0_157fc, %dec_label_pc_157fc ]
  %v0_15738 = phi i32 [ %v2_15720, %dec_label_pc_15730 ], [ %v2_157f4, %dec_label_pc_157fc ]
  %v2_15738 = add i32 %v0_15738, -8
  store i32 %v2_15738, i32* %r2.global-to-local, align 4
  %v4_15738 = sub i32 7, %v0_15738
  %v5_15738 = and i32 %v4_15738, %v0_15738
  %v6_15738 = icmp slt i32 %v5_15738, 0
  store i1 %v6_15738, i1* %cpsr_v.global-to-local, align 1
  %v7_15738 = icmp slt i32 %v2_15738, 0
  store i1 %v7_15738, i1* %cpsr_n.global-to-local, align 1
  %v8_15738 = icmp eq i32 %v0_15738, 8
  store i1 %v8_15738, i1* %cpsr_z.global-to-local, align 1
  %v5_1573c = icmp slt i32 %v0_15738, 8
  br i1 %v5_1573c, label %dec_label_pc_1578c, label %dec_label_pc_15740

dec_label_pc_15740:                               ; preds = %dec_label_pc_15738
  %v2_15740 = add i32 %v0_15738, -28
  store i32 %v2_15740, i32* %r2.global-to-local, align 4
  %v4_15740 = sub i32 27, %v0_15738
  %v5_15740 = and i32 %v4_15740, %v2_15738
  %v6_15740 = icmp slt i32 %v5_15740, 0
  store i1 %v6_15740, i1* %cpsr_v.global-to-local, align 1
  %v7_15740 = icmp slt i32 %v2_15740, 0
  store i1 %v7_15740, i1* %cpsr_n.global-to-local, align 1
  %v8_15740 = icmp eq i32 %v2_15738, 20
  store i1 %v8_15740, i1* %cpsr_z.global-to-local, align 1
  %v5_15744 = icmp slt i32 %v2_15738, 20
  br i1 %v5_15744, label %dec_label_pc_15778, label %dec_label_pc_15748

dec_label_pc_15748:                               ; preds = %dec_label_pc_15740
  %v0_15748 = load i32, i32* @r4, align 4
  store i32 %v0_15748, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1574c

dec_label_pc_1574c:                               ; preds = %dec_label_pc_1574c.dec_label_pc_1574c_crit_edge, %dec_label_pc_15748
  %v0_15750 = phi i32 [ %v12_15758, %dec_label_pc_1574c.dec_label_pc_1574c_crit_edge ], [ %v0_1575092, %dec_label_pc_15748 ]
  %v0_1574c = phi i32 [ %v0_1574c.pre, %dec_label_pc_1574c.dec_label_pc_1574c_crit_edge ], [ %v0_1574c91, %dec_label_pc_15748 ]
  %v1_1574c = inttoptr i32 %v0_1574c to i32*
  %v2_1574c = load i32, i32* %v1_1574c, align 4
  store i32 %v2_1574c, i32* %r3.global-to-local, align 4
  %v3_1574c = add i32 %v0_1574c, 4
  %v4_1574c = inttoptr i32 %v3_1574c to i32*
  %v5_1574c = load i32, i32* %v4_1574c, align 4
  store i32 %v5_1574c, i32* %r4.global-to-local, align 4
  %v6_1574c = add i32 %v0_1574c, 8
  %v7_1574c = inttoptr i32 %v6_1574c to i32*
  %v8_1574c = load i32, i32* %v7_1574c, align 4
  store i32 %v8_1574c, i32* %ip.global-to-local, align 4
  %v9_1574c = add i32 %v0_1574c, 12
  %v10_1574c = inttoptr i32 %v9_1574c to i32*
  %v11_1574c = load i32, i32* %v10_1574c, align 4
  store i32 %v11_1574c, i32* %lr.global-to-local, align 4
  %v12_1574c = add i32 %v0_1574c, 16
  store i32 %v12_1574c, i32* %r1.global-to-local, align 4
  %v1_15750 = inttoptr i32 %v0_15750 to i32*
  store i32 %v2_1574c, i32* %v1_15750, align 4
  %v3_15750 = add i32 %v0_15750, 4
  %v4_15750 = inttoptr i32 %v3_15750 to i32*
  %v5_15750 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15750, i32* %v4_15750, align 4
  %v6_15750 = add i32 %v0_15750, 8
  %v7_15750 = inttoptr i32 %v6_15750 to i32*
  %v8_15750 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_15750, i32* %v7_15750, align 4
  %v9_15750 = add i32 %v0_15750, 12
  %v10_15750 = inttoptr i32 %v9_15750 to i32*
  %v11_15750 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_15750, i32* %v10_15750, align 4
  %v12_15750 = add i32 %v0_15750, 16
  store i32 %v12_15750, i32* %r0.global-to-local, align 4
  %v0_15754 = load i32, i32* %r1.global-to-local, align 4
  %v1_15754 = inttoptr i32 %v0_15754 to i32*
  %v2_15754 = load i32, i32* %v1_15754, align 4
  store i32 %v2_15754, i32* %r3.global-to-local, align 4
  %v3_15754 = add i32 %v0_15754, 4
  %v4_15754 = inttoptr i32 %v3_15754 to i32*
  %v5_15754 = load i32, i32* %v4_15754, align 4
  store i32 %v5_15754, i32* %r4.global-to-local, align 4
  %v6_15754 = add i32 %v0_15754, 8
  %v7_15754 = inttoptr i32 %v6_15754 to i32*
  %v8_15754 = load i32, i32* %v7_15754, align 4
  store i32 %v8_15754, i32* @ip, align 4
  %v9_15754 = add i32 %v0_15754, 12
  %v10_15754 = inttoptr i32 %v9_15754 to i32*
  %v11_15754 = load i32, i32* %v10_15754, align 4
  store i32 %v11_15754, i32* @lr, align 4
  %v12_15754 = add i32 %v0_15754, 16
  store i32 %v12_15754, i32* @r1, align 4
  %v1_15758 = inttoptr i32 %v12_15750 to i32*
  store i32 %v2_15754, i32* %v1_15758, align 4
  %v3_15758 = add i32 %v0_15750, 20
  %v4_15758 = inttoptr i32 %v3_15758 to i32*
  %v5_15758 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15758, i32* %v4_15758, align 4
  %v6_15758 = add i32 %v0_15750, 24
  %v7_15758 = inttoptr i32 %v6_15758 to i32*
  %v8_15758 = load i32, i32* @ip, align 4
  store i32 %v8_15758, i32* %v7_15758, align 4
  %v9_15758 = add i32 %v0_15750, 28
  %v10_15758 = inttoptr i32 %v9_15758 to i32*
  %v11_15758 = load i32, i32* @lr, align 4
  store i32 %v11_15758, i32* %v10_15758, align 4
  %v12_15758 = add i32 %v0_15750, 32
  store i32 %v12_15758, i32* @r0, align 4
  %v0_1575c = load i32, i32* %r2.global-to-local, align 4
  %v2_1575c = add i32 %v0_1575c, -32
  store i32 %v2_1575c, i32* %r2.global-to-local, align 4
  %v6_15760 = icmp slt i32 %v0_1575c, 32
  br i1 %v6_15760, label %dec_label_pc_15764, label %dec_label_pc_1574c.dec_label_pc_1574c_crit_edge

dec_label_pc_1574c.dec_label_pc_1574c_crit_edge:  ; preds = %dec_label_pc_1574c
  %v0_1574c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1574c

dec_label_pc_15764:                               ; preds = %dec_label_pc_1574c
  %v4_15764 = add i32 %v0_1575c, -16
  %v6_15764 = add i32 %v0_1575c, 2147483616
  %v7_15764 = and i32 %v4_15764, %v6_15764
  %v8_15764 = icmp slt i32 %v7_15764, 0
  store i1 %v8_15764, i1* %cpsr_v.global-to-local, align 1
  %v9_15764 = icmp slt i32 %v4_15764, 0
  store i1 %v9_15764, i1* %cpsr_n.global-to-local, align 1
  %v10_15764 = icmp eq i32 %v4_15764, 0
  store i1 %v10_15764, i1* %cpsr_z.global-to-local, align 1
  %v5_15768 = icmp slt i32 %v2_1575c, -16
  br i1 %v5_15768, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_15764
  %v6_15768 = load i32, i32* @r1, align 4
  %v7_15768 = inttoptr i32 %v6_15768 to i32*
  %v8_15768 = load i32, i32* %v7_15768, align 4
  store i32 %v8_15768, i32* %r3.global-to-local, align 4
  %v9_15768 = add i32 %v6_15768, 4
  %v10_15768 = inttoptr i32 %v9_15768 to i32*
  %v11_15768 = load i32, i32* %v10_15768, align 4
  store i32 %v11_15768, i32* %r4.global-to-local, align 4
  %v12_15768 = add i32 %v6_15768, 8
  %v13_15768 = inttoptr i32 %v12_15768 to i32*
  %v14_15768 = load i32, i32* %v13_15768, align 4
  store i32 %v14_15768, i32* @ip, align 4
  %v15_15768 = add i32 %v6_15768, 12
  %v16_15768 = inttoptr i32 %v15_15768 to i32*
  %v17_15768 = load i32, i32* %v16_15768, align 4
  store i32 %v17_15768, i32* @lr, align 4
  %v18_15768 = add i32 %v6_15768, 16
  store i32 %v18_15768, i32* @r1, align 4
  %v7_1576c = inttoptr i32 %v12_15758 to i32*
  store i32 %v8_15768, i32* %v7_1576c, align 4
  %v9_1576c = add i32 %v0_15750, 36
  %v10_1576c = inttoptr i32 %v9_1576c to i32*
  %v11_1576c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_1576c, i32* %v10_1576c, align 4
  %v12_1576c = add i32 %v0_15750, 40
  %v13_1576c = inttoptr i32 %v12_1576c to i32*
  %v14_1576c = load i32, i32* @ip, align 4
  store i32 %v14_1576c, i32* %v13_1576c, align 4
  %v15_1576c = add i32 %v0_15750, 44
  %v16_1576c = inttoptr i32 %v15_1576c to i32*
  %v17_1576c = load i32, i32* @lr, align 4
  store i32 %v17_1576c, i32* %v16_1576c, align 4
  %v18_1576c = add i32 %v0_15750, 48
  store i32 %v18_1576c, i32* @r0, align 4
  %v6_15770 = load i32, i32* %r2.global-to-local, align 4
  %v7_15770 = add i32 %v6_15770, -16
  store i32 %v7_15770, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_15764, %bb128
  %v3_15780101 = phi i32 [ %v12_15758, %dec_label_pc_15764 ], [ %v18_1576c, %bb128 ]
  %v0_1577895 = phi i32 [ %v2_1575c, %dec_label_pc_15764 ], [ %v7_15770, %bb128 ]
  %v2_15774 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15774, i32* @r4, align 4
  br label %dec_label_pc_15778

dec_label_pc_15778:                               ; preds = %dec_label_pc_15740, %.thread1
  %v3_15780100 = phi i32 [ %v0_1575092, %dec_label_pc_15740 ], [ %v3_15780101, %.thread1 ]
  %v0_15778 = phi i32 [ %v2_15740, %dec_label_pc_15740 ], [ %v0_1577895, %.thread1 ]
  %v1_15778 = add i32 %v0_15778, 20
  store i32 %v1_15778, i32* %r2.global-to-local, align 4
  %v3_15778 = sub i32 0, %v0_15778
  %v4_15778 = and i32 %v1_15778, %v3_15778
  %v5_15778 = icmp slt i32 %v4_15778, 0
  store i1 %v5_15778, i1* %cpsr_v.global-to-local, align 1
  %v6_15778 = icmp slt i32 %v1_15778, 0
  store i1 %v6_15778, i1* %cpsr_n.global-to-local, align 1
  %v7_15778 = icmp eq i32 %v1_15778, 0
  store i1 %v7_15778, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1577c

dec_label_pc_1577c:                               ; preds = %.thread117, %dec_label_pc_15778
  %v0_1578c.pre147 = phi i32 [ %v0_1578c.pre, %.thread117 ], [ %v1_15778, %dec_label_pc_15778 ]
  %v3_15780 = phi i32 [ %v3_1578098118, %.thread117 ], [ %v3_15780100, %dec_label_pc_15778 ]
  %v1_15784 = phi i1 [ %v1_15788, %.thread117 ], [ %v5_15778, %dec_label_pc_15778 ]
  %v0_15784 = phi i1 [ %v0_15788, %.thread117 ], [ %v6_15778, %dec_label_pc_15778 ]
  %v2_1577c = xor i1 %v1_15784, %v0_15784
  br i1 %v2_1577c, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_1577c
  %v3_1577c = load i32, i32* @r1, align 4
  %v4_1577c = inttoptr i32 %v3_1577c to i32*
  %v5_1577c = load i32, i32* %v4_1577c, align 4
  store i32 %v5_1577c, i32* %r3.global-to-local, align 4
  %v6_1577c = add i32 %v3_1577c, 4
  %v7_1577c = inttoptr i32 %v6_1577c to i32*
  %v8_1577c = load i32, i32* %v7_1577c, align 4
  store i32 %v8_1577c, i32* @ip, align 4
  %v9_1577c = add i32 %v3_1577c, 8
  %v10_1577c = inttoptr i32 %v9_1577c to i32*
  %v11_1577c = load i32, i32* %v10_1577c, align 4
  store i32 %v11_1577c, i32* @lr, align 4
  %v12_1577c = add i32 %v3_1577c, 12
  store i32 %v12_1577c, i32* @r1, align 4
  %v4_15780 = inttoptr i32 %v3_15780 to i32*
  store i32 %v5_1577c, i32* %v4_15780, align 4
  %v6_15780 = add i32 %v3_15780, 4
  %v7_15780 = inttoptr i32 %v6_15780 to i32*
  %v8_15780 = load i32, i32* @ip, align 4
  store i32 %v8_15780, i32* %v7_15780, align 4
  %v9_15780 = add i32 %v3_15780, 8
  %v10_15780 = inttoptr i32 %v9_15780 to i32*
  %v11_15780 = load i32, i32* @lr, align 4
  store i32 %v11_15780, i32* %v10_15780, align 4
  %v12_15780 = add i32 %v3_15780, 12
  store i32 %v12_15780, i32* @r0, align 4
  %v3_15784 = load i32, i32* %r2.global-to-local, align 4
  %v4_15784 = add i32 %v3_15784, -12
  store i32 %v4_15784, i32* %r2.global-to-local, align 4
  %v6_15784 = sub i32 11, %v3_15784
  %v7_15784 = and i32 %v6_15784, %v3_15784
  %v8_15784 = icmp slt i32 %v7_15784, 0
  store i1 %v8_15784, i1* %cpsr_v.global-to-local, align 1
  %v9_15784 = icmp slt i32 %v4_15784, 0
  store i1 %v9_15784, i1* %cpsr_n.global-to-local, align 1
  %v10_15784 = icmp eq i32 %v3_15784, 12
  store i1 %v10_15784, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_1577c, %bb129
  %v0_1578c.pre = phi i32 [ %v4_15784, %bb129 ], [ %v0_1578c.pre147, %dec_label_pc_1577c ]
  %v3_1578098118 = phi i32 [ %v12_15780, %bb129 ], [ %v3_15780, %dec_label_pc_1577c ]
  %v1_15788 = phi i1 [ %v8_15784, %bb129 ], [ %v1_15784, %dec_label_pc_1577c ]
  %v0_15788 = phi i1 [ %v9_15784, %bb129 ], [ %v0_15784, %dec_label_pc_1577c ]
  %v2_15788 = xor i1 %v1_15788, %v0_15788
  br i1 %v2_15788, label %dec_label_pc_1578c, label %dec_label_pc_1577c

dec_label_pc_1578c:                               ; preds = %.thread117, %dec_label_pc_15738
  %v7_1579c = phi i32 [ %v0_1575092, %dec_label_pc_15738 ], [ %v3_1578098118, %.thread117 ]
  %v0_1578c = phi i32 [ %v2_15738, %dec_label_pc_15738 ], [ %v0_1578c.pre, %.thread117 ]
  %v2_1578c = add i32 %v0_1578c, 8
  store i32 %v2_1578c, i32* %r2.global-to-local, align 4
  %v4_1578c = sub i32 0, %v0_1578c
  %v5_1578c = and i32 %v2_1578c, %v4_1578c
  %v6_1578c = icmp slt i32 %v5_1578c, 0
  store i1 %v6_1578c, i1* %cpsr_v.global-to-local, align 1
  %v7_1578c = icmp slt i32 %v2_1578c, 0
  store i1 %v7_1578c, i1* %cpsr_n.global-to-local, align 1
  %v8_1578c = icmp eq i32 %v2_1578c, 0
  store i1 %v8_1578c, i1* %cpsr_z.global-to-local, align 1
  %v5_15790 = icmp slt i32 %v0_1578c, -8
  br i1 %v5_15790, label %bb131, label %dec_label_pc_15794

dec_label_pc_15794:                               ; preds = %dec_label_pc_1578c
  %v6_15794 = add i32 %v0_1578c, 4
  store i32 %v6_15794, i32* %r2.global-to-local, align 4
  %v8_15794 = sub i32 -5, %v0_1578c
  %v9_15794 = and i32 %v8_15794, %v2_1578c
  %v10_15794 = icmp slt i32 %v9_15794, 0
  store i1 %v10_15794, i1* %cpsr_v.global-to-local, align 1
  %v11_15794 = icmp slt i32 %v6_15794, 0
  store i1 %v11_15794, i1* %cpsr_n.global-to-local, align 1
  %v12_15794 = icmp eq i32 %v2_1578c, 4
  store i1 %v12_15794, i1* %cpsr_z.global-to-local, align 1
  %v5_15798 = icmp slt i32 %v2_1578c, 4
  %v6_15798 = load i32, i32* @r1, align 4
  %v7_15798 = inttoptr i32 %v6_15798 to i32*
  %v8_15798 = load i32, i32* %v7_15798, align 4
  store i32 %v8_15798, i32* %r3.global-to-local, align 4
  %v10_15798 = add i32 %v6_15798, 4
  br i1 %v5_15798, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_15794
  store i32 %v10_15798, i32* @r1, align 4
  %v8_1579c = inttoptr i32 %v7_1579c to i32*
  store i32 %v8_15798, i32* %v8_1579c, align 4
  %v9_1579c = load i32, i32* @r0, align 4
  %v10_1579c = add i32 %v9_1579c, 4
  store i32 %v10_1579c, i32* @r0, align 4
  %v0_157ac.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_15794
  %v10_157a0 = inttoptr i32 %v10_15798 to i32*
  %v11_157a0 = load i32, i32* %v10_157a0, align 4
  store i32 %v11_157a0, i32* @ip, align 4
  %v12_157a0 = add i32 %v6_15798, 8
  store i32 %v12_157a0, i32* @r1, align 4
  %v7_157a4 = inttoptr i32 %v7_1579c to i32*
  store i32 %v8_15798, i32* %v7_157a4, align 4
  %v9_157a4 = add i32 %v7_1579c, 4
  %v10_157a4 = inttoptr i32 %v9_157a4 to i32*
  %v11_157a4 = load i32, i32* @ip, align 4
  store i32 %v11_157a4, i32* %v10_157a4, align 4
  %v12_157a4 = add i32 %v7_1579c, 8
  store i32 %v12_157a4, i32* @r0, align 4
  %v6_157a8 = load i32, i32* %r2.global-to-local, align 4
  %v7_157a8 = add i32 %v6_157a8, -4
  store i32 %v7_157a8, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_1578c, %bb, %dec_label_pc_15954, %dec_label_pc_158e8, %dec_label_pc_1587c, %bb130
  %v2_157bc = phi i32 [ %v10_1579c, %.thread5 ], [ %v0_1584c75, %.thread11 ], [ %v7_1579c, %dec_label_pc_1578c ], [ %v1_15710, %bb ], [ %v2_157bc113, %dec_label_pc_15954 ], [ %v2_157bc112, %dec_label_pc_158e8 ], [ %v2_157bc111, %dec_label_pc_1587c ], [ %v12_157a4, %bb130 ]
  %v0_157ac = phi i32 [ %v0_157ac.pre, %.thread5 ], [ %v2_157f4, %.thread11 ], [ %v2_1578c, %dec_label_pc_1578c ], [ %v2_15720, %bb ], [ %v0_157ac109, %dec_label_pc_15954 ], [ %v0_157ac108, %dec_label_pc_158e8 ], [ %v0_157ac107, %dec_label_pc_1587c ], [ %v7_157a8, %bb130 ]
  %v1_157ac = add i32 %v0_157ac, 4
  store i32 %v1_157ac, i32* @r2, align 4
  %v3_157ac = sub i32 0, %v0_157ac
  %v4_157ac = and i32 %v1_157ac, %v3_157ac
  %v5_157ac = icmp slt i32 %v4_157ac, 0
  store i1 %v5_157ac, i1* %cpsr_v.global-to-local, align 1
  %v6_157ac = icmp slt i32 %v1_157ac, 0
  store i1 %v6_157ac, i1* %cpsr_n.global-to-local, align 1
  %v7_157ac = icmp eq i32 %v1_157ac, 0
  store i1 %v7_157ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_157ac, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_157b0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_157b0, i32* %r0.global-to-local, align 4
  ret i32 %v3_157b0

bb133:                                            ; preds = %bb131
  %v1_157b4 = add i32 %v0_157ac, 2
  %v3_157b4 = sub i32 -3, %v0_157ac
  %v4_157b4 = and i32 %v3_157b4, %v1_157ac
  %v5_157b4 = icmp slt i32 %v4_157b4, 0
  store i1 %v5_157b4, i1* %cpsr_v.global-to-local, align 1
  %v6_157b4 = icmp slt i32 %v1_157b4, 0
  store i1 %v6_157b4, i1* %cpsr_n.global-to-local, align 1
  %v7_157b4 = icmp eq i32 %v1_157ac, 2
  store i1 %v7_157b4, i1* %cpsr_z.global-to-local, align 1
  %v0_157b8 = load i32, i32* @r1, align 4
  %v1_157b8 = inttoptr i32 %v0_157b8 to i8*
  %v2_157b8 = load i8, i8* %v1_157b8, align 1
  %v3_157b8 = zext i8 %v2_157b8 to i32
  store i32 %v3_157b8, i32* %r3.global-to-local, align 4
  %v5_157b8 = add i32 %v0_157b8, 1
  store i32 %v5_157b8, i32* %r1.global-to-local, align 4
  %v3_157bc = inttoptr i32 %v2_157bc to i8*
  store i8 %v2_157b8, i8* %v3_157bc, align 1
  %v4_157bc = load i32, i32* @r0, align 4
  %v5_157bc = add i32 %v4_157bc, 1
  store i32 %v5_157bc, i32* %r0.global-to-local, align 4
  %v0_157c0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_157c0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_157c0 = xor i1 %v0_157c0, %v1_157c0
  br i1 %v2_157c0, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_157c0 = load i32, i32* %r1.global-to-local, align 4
  %v4_157c0 = inttoptr i32 %v3_157c0 to i8*
  %v5_157c0 = load i8, i8* %v4_157c0, align 1
  %v6_157c0 = zext i8 %v5_157c0 to i32
  store i32 %v6_157c0, i32* %r3.global-to-local, align 4
  %v8_157c0 = add i32 %v3_157c0, 1
  store i32 %v8_157c0, i32* %r1.global-to-local, align 4
  %v6_157c4 = inttoptr i32 %v5_157bc to i8*
  store i8 %v5_157c0, i8* %v6_157c4, align 1
  %v7_157c4 = load i32, i32* %r0.global-to-local, align 4
  %v8_157c4 = add i32 %v7_157c4, 1
  store i32 %v8_157c4, i32* %r0.global-to-local, align 4
  %v1_157c8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_157c8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_157cc = phi i32 [ %v8_157c4, %bb134 ], [ %v5_157bc, %bb133 ]
  %v2_157cc = phi i1 [ %v2_157c8.pre, %bb134 ], [ %v1_157c0, %bb133 ]
  %v1_157cc = phi i1 [ %v1_157c8.pre, %bb134 ], [ %v0_157c0, %bb133 ]
  %v0_157c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_157c8 = xor i1 %v2_157cc, %v1_157cc
  %v4_157c8 = or i1 %v0_157c8, %v3_157c8
  br i1 %v4_157c8, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_157c8 = load i32, i32* %r1.global-to-local, align 4
  %v6_157c8 = inttoptr i32 %v5_157c8 to i8*
  %v7_157c8 = load i8, i8* %v6_157c8, align 1
  %v8_157c8 = zext i8 %v7_157c8 to i32
  store i32 %v8_157c8, i32* %r3.global-to-local, align 4
  %v10_157c8 = add i32 %v5_157c8, 1
  store i32 %v10_157c8, i32* %r1.global-to-local, align 4
  %v8_157cc = inttoptr i32 %v7_157cc to i8*
  store i8 %v7_157c8, i8* %v8_157cc, align 1
  %v9_157cc = load i32, i32* %r0.global-to-local, align 4
  %v10_157cc = add i32 %v9_157cc, 1
  store i32 %v10_157cc, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_157d0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_157d0, i32* %r0.global-to-local, align 4
  ret i32 %v2_157d0

dec_label_pc_157d4:                               ; preds = %dec_label_pc_15728
  %v1_157d4 = sub nsw i32 4, %v1_15728
  store i32 %v1_157d4, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_157d8 = icmp ult i32 %v1_157d4, 2
  store i1 %v8_157d8, i1* %cpsr_n.global-to-local, align 1
  %v9_157d8 = icmp eq i32 %v1_157d4, 2
  store i1 %v9_157d8, i1* %cpsr_z.global-to-local, align 1
  %v1_157dc = inttoptr i32 %v0_15710 to i8*
  %v2_157dc = load i8, i8* %v1_157dc, align 1
  %v3_157dc = zext i8 %v2_157dc to i32
  store i32 %v3_157dc, i32* %r3.global-to-local, align 4
  %v5_157dc = add i32 %v0_15710, 1
  store i32 %v5_157dc, i32* @r1, align 4
  %v3_157e0 = inttoptr i32 %v1_15710 to i8*
  store i8 %v2_157dc, i8* %v3_157e0, align 1
  %v4_157e0 = load i32, i32* @r0, align 4
  %v5_157e0 = add i32 %v4_157e0, 1
  store i32 %v5_157e0, i32* @r0, align 4
  br i1 %v8_157d8, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_157d4
  %v6_157e4 = load i32, i32* @r1, align 4
  %v7_157e4 = inttoptr i32 %v6_157e4 to i8*
  %v8_157e4 = load i8, i8* %v7_157e4, align 1
  %v9_157e4 = zext i8 %v8_157e4 to i32
  store i32 %v9_157e4, i32* %r3.global-to-local, align 4
  %v11_157e4 = add i32 %v6_157e4, 1
  store i32 %v11_157e4, i32* @r1, align 4
  %v9_157e8 = inttoptr i32 %v5_157e0 to i8*
  store i8 %v8_157e4, i8* %v9_157e8, align 1
  %v10_157e8 = load i32, i32* @r0, align 4
  %v11_157e8 = add i32 %v10_157e8, 1
  store i32 %v11_157e8, i32* @r0, align 4
  br i1 %v9_157d8, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_157ec = load i32, i32* @r1, align 4
  %v9_157ec = inttoptr i32 %v8_157ec to i8*
  %v10_157ec = load i8, i8* %v9_157ec, align 1
  %v11_157ec = zext i8 %v10_157ec to i32
  store i32 %v11_157ec, i32* %r3.global-to-local, align 4
  %v13_157ec = add i32 %v8_157ec, 1
  store i32 %v13_157ec, i32* @r1, align 4
  %v11_157f0 = inttoptr i32 %v11_157e8 to i8*
  store i8 %v10_157ec, i8* %v11_157f0, align 1
  %v12_157f0 = load i32, i32* @r0, align 4
  %v13_157f0 = add i32 %v12_157f0, 1
  store i32 %v13_157f0, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_157d4, %bb137
  %v0_1584c75 = phi i32 [ %v11_157e8, %bb136 ], [ %v5_157e0, %dec_label_pc_157d4 ], [ %v13_157f0, %bb137 ]
  %v0_157f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_157f4 = load i32, i32* @ip, align 4
  %v2_157f4 = sub i32 %v0_157f4, %v1_157f4
  store i32 %v2_157f4, i32* %r2.global-to-local, align 4
  %v4_157f4 = xor i32 %v1_157f4, %v0_157f4
  %v5_157f4 = xor i32 %v2_157f4, %v0_157f4
  %v6_157f4 = and i32 %v5_157f4, %v4_157f4
  %v7_157f4 = icmp slt i32 %v6_157f4, 0
  store i1 %v7_157f4, i1* %cpsr_v.global-to-local, align 1
  %v8_157f4 = icmp slt i32 %v2_157f4, 0
  store i1 %v8_157f4, i1* %cpsr_n.global-to-local, align 1
  %v9_157f4 = icmp eq i32 %v0_157f4, %v1_157f4
  store i1 %v9_157f4, i1* %cpsr_z.global-to-local, align 1
  %v5_157f8 = icmp slt i32 %v0_157f4, %v1_157f4
  br i1 %v5_157f8, label %bb131, label %dec_label_pc_157fc

dec_label_pc_157fc:                               ; preds = %.thread11
  %v0_157fc = load i32, i32* @r1, align 4
  %v1_157fc = urem i32 %v0_157fc, 4
  store i32 %v1_157fc, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_157fc = icmp eq i32 %v1_157fc, 0
  store i1 %v2_157fc, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_157fc to i2
  br i1 %v2_157fc, label %dec_label_pc_15738, label %dec_label_pc_15804

dec_label_pc_15804:                               ; preds = %dec_label_pc_15730, %dec_label_pc_157fc
  %v0_1584c74 = phi i32 [ %v1_15710, %dec_label_pc_15730 ], [ %v0_1584c75, %dec_label_pc_157fc ]
  %v0_158f8 = phi i32 [ %v2_15720, %dec_label_pc_15730 ], [ %v2_157f4, %dec_label_pc_157fc ]
  %v0_1580c.off0 = phi i2 [ %extract.t, %dec_label_pc_15730 ], [ %extract.t123, %dec_label_pc_157fc ]
  %v0_15804 = phi i32 [ %v0_15710, %dec_label_pc_15730 ], [ %v0_157fc, %dec_label_pc_157fc ]
  %v1_15804 = and i32 %v0_15804, -4
  store i32 %v1_15804, i32* %r1.global-to-local, align 4
  %v1_15808 = inttoptr i32 %v1_15804 to i32*
  %v2_15808 = load i32, i32* %v1_15808, align 4
  store i32 %v2_15808, i32* @lr, align 4
  %v4_15808 = add i32 %v1_15804, 4
  store i32 %v4_15808, i32* %r1.global-to-local, align 4
  %v2_158f0 = add i32 %v0_158f8, -12
  %v4_158f0 = sub i32 11, %v0_158f8
  %v5_158f0 = and i32 %v4_158f0, %v0_158f8
  %v6_158f0 = icmp slt i32 %v5_158f0, 0
  store i1 %v6_158f0, i1* %cpsr_v.global-to-local, align 1
  %v7_158f0 = icmp slt i32 %v2_158f0, 0
  store i1 %v7_158f0, i1* %cpsr_n.global-to-local, align 1
  %v8_158f0 = icmp eq i32 %v0_158f8, 12
  store i1 %v8_158f0, i1* %cpsr_z.global-to-local, align 1
  %v5_158f4 = icmp slt i32 %v0_158f8, 12
  switch i2 %v0_1580c.off0, label %dec_label_pc_15818 [
    i2 -1, label %dec_label_pc_158f0
    i2 -2, label %dec_label_pc_15884
  ]

dec_label_pc_15818:                               ; preds = %dec_label_pc_15804
  br i1 %v5_158f4, label %dec_label_pc_15864, label %dec_label_pc_15820

dec_label_pc_15820:                               ; preds = %dec_label_pc_15818
  store i32 %v2_158f0, i32* %r2.global-to-local, align 4
  %v3_15824 = load i32, i32* @r4, align 4
  store i32 %v3_15824, i32* %stack_var_-16, align 4
  %v6_15824 = load i32, i32* @r5, align 4
  store i32 %v6_15824, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15828

dec_label_pc_15828:                               ; preds = %dec_label_pc_15828.dec_label_pc_15828_crit_edge, %dec_label_pc_15820
  %v0_1584c = phi i32 [ %v12_1584c, %dec_label_pc_15828.dec_label_pc_15828_crit_edge ], [ %v0_1584c74, %dec_label_pc_15820 ]
  %v0_1582c = phi i32 [ %v0_1582c.pre, %dec_label_pc_15828.dec_label_pc_15828_crit_edge ], [ %v4_15808, %dec_label_pc_15820 ]
  %v0_15828 = phi i32 [ %v0_15828.pre, %dec_label_pc_15828.dec_label_pc_15828_crit_edge ], [ %v2_15808, %dec_label_pc_15820 ]
  %v3_15828 = udiv i32 %v0_15828, 256
  store i32 %v3_15828, i32* %r3.global-to-local, align 4
  %v1_1582c = inttoptr i32 %v0_1582c to i32*
  %v2_1582c = load i32, i32* %v1_1582c, align 4
  store i32 %v2_1582c, i32* %r4.global-to-local, align 4
  %v3_1582c = add i32 %v0_1582c, 4
  %v4_1582c = inttoptr i32 %v3_1582c to i32*
  %v5_1582c = load i32, i32* %v4_1582c, align 4
  store i32 %v5_1582c, i32* %r5.global-to-local, align 4
  %v6_1582c = add i32 %v0_1582c, 8
  %v7_1582c = inttoptr i32 %v6_1582c to i32*
  %v8_1582c = load i32, i32* %v7_1582c, align 4
  store i32 %v8_1582c, i32* %ip.global-to-local, align 4
  %v9_1582c = add i32 %v0_1582c, 12
  %v10_1582c = inttoptr i32 %v9_1582c to i32*
  %v11_1582c = load i32, i32* %v10_1582c, align 4
  store i32 %v11_1582c, i32* @lr, align 4
  %v12_1582c = add i32 %v0_1582c, 16
  store i32 %v12_1582c, i32* %r1.global-to-local, align 4
  %v4_15830 = mul i32 %v2_1582c, 16777216
  %v5_15830 = or i32 %v4_15830, %v3_15828
  store i32 %v5_15830, i32* %r3.global-to-local, align 4
  %v3_15834 = udiv i32 %v2_1582c, 256
  %v4_15838 = mul i32 %v5_1582c, 16777216
  %v5_15838 = or i32 %v4_15838, %v3_15834
  store i32 %v5_15838, i32* %r4.global-to-local, align 4
  %v3_1583c = udiv i32 %v5_1582c, 256
  %v4_15840 = mul i32 %v8_1582c, 16777216
  %v5_15840 = or i32 %v4_15840, %v3_1583c
  store i32 %v5_15840, i32* %r5.global-to-local, align 4
  %v3_15844 = udiv i32 %v8_1582c, 256
  %v4_15848 = mul i32 %v11_1582c, 16777216
  %v5_15848 = or i32 %v4_15848, %v3_15844
  store i32 %v5_15848, i32* @ip, align 4
  %v1_1584c = inttoptr i32 %v0_1584c to i32*
  store i32 %v5_15830, i32* %v1_1584c, align 4
  %v3_1584c = add i32 %v0_1584c, 4
  %v4_1584c = inttoptr i32 %v3_1584c to i32*
  %v5_1584c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1584c, i32* %v4_1584c, align 4
  %v6_1584c = add i32 %v0_1584c, 8
  %v7_1584c = inttoptr i32 %v6_1584c to i32*
  %v8_1584c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1584c, i32* %v7_1584c, align 4
  %v9_1584c = add i32 %v0_1584c, 12
  %v10_1584c = inttoptr i32 %v9_1584c to i32*
  %v11_1584c = load i32, i32* @ip, align 4
  store i32 %v11_1584c, i32* %v10_1584c, align 4
  %v12_1584c = add i32 %v0_1584c, 16
  store i32 %v12_1584c, i32* @r0, align 4
  %v0_15850 = load i32, i32* %r2.global-to-local, align 4
  %v2_15850 = add i32 %v0_15850, -16
  store i32 %v2_15850, i32* %r2.global-to-local, align 4
  %v6_15854 = icmp slt i32 %v0_15850, 16
  br i1 %v6_15854, label %dec_label_pc_15858, label %dec_label_pc_15828.dec_label_pc_15828_crit_edge

dec_label_pc_15828.dec_label_pc_15828_crit_edge:  ; preds = %dec_label_pc_15828
  %v0_15828.pre = load i32, i32* @lr, align 4
  %v0_1582c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15828

dec_label_pc_15858:                               ; preds = %dec_label_pc_15828
  %v2_15858 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15858, i32* @r4, align 4
  %v5_15858 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15858, i32* @r5, align 4
  %v2_1585c = add i32 %v0_15850, -4
  store i32 %v2_1585c, i32* %r2.global-to-local, align 4
  %v4_1585c = add i32 %v0_15850, 2147483632
  %v5_1585c = and i32 %v2_1585c, %v4_1585c
  %v6_1585c = icmp slt i32 %v5_1585c, 0
  store i1 %v6_1585c, i1* %cpsr_v.global-to-local, align 1
  %v7_1585c = icmp slt i32 %v2_1585c, 0
  store i1 %v7_1585c, i1* %cpsr_n.global-to-local, align 1
  %v8_1585c = icmp eq i32 %v2_1585c, 0
  store i1 %v8_1585c, i1* %cpsr_z.global-to-local, align 1
  %v5_15860 = icmp slt i32 %v2_15850, -12
  br i1 %v5_15860, label %dec_label_pc_1587c, label %dec_label_pc_15864

dec_label_pc_15864:                               ; preds = %dec_label_pc_15858, %dec_label_pc_15818, %dec_label_pc_15864
  %v1_15870 = phi i32 [ %v4_15870, %dec_label_pc_15864 ], [ %v12_1584c, %dec_label_pc_15858 ], [ %v0_1584c74, %dec_label_pc_15818 ]
  %v0_15864 = load i32, i32* @lr, align 4
  %v3_15864 = udiv i32 %v0_15864, 256
  store i32 %v3_15864, i32* %ip.global-to-local, align 4
  %v0_15868 = load i32, i32* %r1.global-to-local, align 4
  %v1_15868 = inttoptr i32 %v0_15868 to i32*
  %v2_15868 = load i32, i32* %v1_15868, align 4
  store i32 %v2_15868, i32* @lr, align 4
  %v4_15868 = add i32 %v0_15868, 4
  store i32 %v4_15868, i32* %r1.global-to-local, align 4
  %v4_1586c = mul i32 %v2_15868, 16777216
  %v5_1586c = or i32 %v4_1586c, %v3_15864
  store i32 %v5_1586c, i32* @ip, align 4
  %v2_15870 = inttoptr i32 %v1_15870 to i32*
  store i32 %v5_1586c, i32* %v2_15870, align 4
  %v3_15870 = load i32, i32* @r0, align 4
  %v4_15870 = add i32 %v3_15870, 4
  store i32 %v4_15870, i32* @r0, align 4
  %v0_15874 = load i32, i32* %r2.global-to-local, align 4
  %v2_15874 = add i32 %v0_15874, -4
  store i32 %v2_15874, i32* %r2.global-to-local, align 4
  %v6_15878 = icmp slt i32 %v0_15874, 4
  br i1 %v6_15878, label %dec_label_pc_1587c.loopexit, label %dec_label_pc_15864

dec_label_pc_1587c.loopexit:                      ; preds = %dec_label_pc_15864
  %v4_15874 = sub i32 3, %v0_15874
  %v5_15874 = and i32 %v4_15874, %v0_15874
  %v6_15874 = icmp slt i32 %v5_15874, 0
  %v7_15874 = icmp slt i32 %v2_15874, 0
  store i1 %v6_15874, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15874, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1587c

dec_label_pc_1587c:                               ; preds = %dec_label_pc_1587c.loopexit, %dec_label_pc_15858
  %v2_157bc111 = phi i32 [ %v4_15870, %dec_label_pc_1587c.loopexit ], [ %v12_1584c, %dec_label_pc_15858 ]
  %v0_157ac107 = phi i32 [ %v2_15874, %dec_label_pc_1587c.loopexit ], [ %v2_1585c, %dec_label_pc_15858 ]
  %v0_1587c = load i32, i32* %r1.global-to-local, align 4
  %v1_1587c = add i32 %v0_1587c, -3
  store i32 %v1_1587c, i32* @r1, align 4
  br label %bb131

dec_label_pc_15884:                               ; preds = %dec_label_pc_15804
  br i1 %v5_158f4, label %dec_label_pc_158d0, label %dec_label_pc_1588c

dec_label_pc_1588c:                               ; preds = %dec_label_pc_15884
  store i32 %v2_158f0, i32* %r2.global-to-local, align 4
  %v3_15890 = load i32, i32* @r4, align 4
  store i32 %v3_15890, i32* %stack_var_-16, align 4
  %v6_15890 = load i32, i32* @r5, align 4
  store i32 %v6_15890, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15894

dec_label_pc_15894:                               ; preds = %dec_label_pc_15894.dec_label_pc_15894_crit_edge, %dec_label_pc_1588c
  %v0_158b8 = phi i32 [ %v12_158b8, %dec_label_pc_15894.dec_label_pc_15894_crit_edge ], [ %v0_1584c74, %dec_label_pc_1588c ]
  %v0_15898 = phi i32 [ %v0_15898.pre, %dec_label_pc_15894.dec_label_pc_15894_crit_edge ], [ %v4_15808, %dec_label_pc_1588c ]
  %v0_15894 = phi i32 [ %v0_15894.pre, %dec_label_pc_15894.dec_label_pc_15894_crit_edge ], [ %v2_15808, %dec_label_pc_1588c ]
  %v3_15894 = udiv i32 %v0_15894, 65536
  store i32 %v3_15894, i32* %r3.global-to-local, align 4
  %v1_15898 = inttoptr i32 %v0_15898 to i32*
  %v2_15898 = load i32, i32* %v1_15898, align 4
  store i32 %v2_15898, i32* %r4.global-to-local, align 4
  %v3_15898 = add i32 %v0_15898, 4
  %v4_15898 = inttoptr i32 %v3_15898 to i32*
  %v5_15898 = load i32, i32* %v4_15898, align 4
  store i32 %v5_15898, i32* %r5.global-to-local, align 4
  %v6_15898 = add i32 %v0_15898, 8
  %v7_15898 = inttoptr i32 %v6_15898 to i32*
  %v8_15898 = load i32, i32* %v7_15898, align 4
  store i32 %v8_15898, i32* %ip.global-to-local, align 4
  %v9_15898 = add i32 %v0_15898, 12
  %v10_15898 = inttoptr i32 %v9_15898 to i32*
  %v11_15898 = load i32, i32* %v10_15898, align 4
  store i32 %v11_15898, i32* @lr, align 4
  %v12_15898 = add i32 %v0_15898, 16
  store i32 %v12_15898, i32* %r1.global-to-local, align 4
  %v4_1589c = mul i32 %v2_15898, 65536
  %v5_1589c = or i32 %v4_1589c, %v3_15894
  store i32 %v5_1589c, i32* %r3.global-to-local, align 4
  %v3_158a0 = udiv i32 %v2_15898, 65536
  %v4_158a4 = mul i32 %v5_15898, 65536
  %v5_158a4 = or i32 %v4_158a4, %v3_158a0
  store i32 %v5_158a4, i32* %r4.global-to-local, align 4
  %v3_158a8 = udiv i32 %v5_15898, 65536
  %v4_158ac = mul i32 %v8_15898, 65536
  %v5_158ac = or i32 %v4_158ac, %v3_158a8
  store i32 %v5_158ac, i32* %r5.global-to-local, align 4
  %v3_158b0 = udiv i32 %v8_15898, 65536
  %v4_158b4 = mul i32 %v11_15898, 65536
  %v5_158b4 = or i32 %v4_158b4, %v3_158b0
  store i32 %v5_158b4, i32* @ip, align 4
  %v1_158b8 = inttoptr i32 %v0_158b8 to i32*
  store i32 %v5_1589c, i32* %v1_158b8, align 4
  %v3_158b8 = add i32 %v0_158b8, 4
  %v4_158b8 = inttoptr i32 %v3_158b8 to i32*
  %v5_158b8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_158b8, i32* %v4_158b8, align 4
  %v6_158b8 = add i32 %v0_158b8, 8
  %v7_158b8 = inttoptr i32 %v6_158b8 to i32*
  %v8_158b8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_158b8, i32* %v7_158b8, align 4
  %v9_158b8 = add i32 %v0_158b8, 12
  %v10_158b8 = inttoptr i32 %v9_158b8 to i32*
  %v11_158b8 = load i32, i32* @ip, align 4
  store i32 %v11_158b8, i32* %v10_158b8, align 4
  %v12_158b8 = add i32 %v0_158b8, 16
  store i32 %v12_158b8, i32* @r0, align 4
  %v0_158bc = load i32, i32* %r2.global-to-local, align 4
  %v2_158bc = add i32 %v0_158bc, -16
  store i32 %v2_158bc, i32* %r2.global-to-local, align 4
  %v6_158c0 = icmp slt i32 %v0_158bc, 16
  br i1 %v6_158c0, label %dec_label_pc_158c4, label %dec_label_pc_15894.dec_label_pc_15894_crit_edge

dec_label_pc_15894.dec_label_pc_15894_crit_edge:  ; preds = %dec_label_pc_15894
  %v0_15894.pre = load i32, i32* @lr, align 4
  %v0_15898.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15894

dec_label_pc_158c4:                               ; preds = %dec_label_pc_15894
  %v2_158c4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_158c4, i32* @r4, align 4
  %v5_158c4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_158c4, i32* @r5, align 4
  %v2_158c8 = add i32 %v0_158bc, -4
  store i32 %v2_158c8, i32* %r2.global-to-local, align 4
  %v4_158c8 = add i32 %v0_158bc, 2147483632
  %v5_158c8 = and i32 %v2_158c8, %v4_158c8
  %v6_158c8 = icmp slt i32 %v5_158c8, 0
  store i1 %v6_158c8, i1* %cpsr_v.global-to-local, align 1
  %v7_158c8 = icmp slt i32 %v2_158c8, 0
  store i1 %v7_158c8, i1* %cpsr_n.global-to-local, align 1
  %v8_158c8 = icmp eq i32 %v2_158c8, 0
  store i1 %v8_158c8, i1* %cpsr_z.global-to-local, align 1
  %v5_158cc = icmp slt i32 %v2_158bc, -12
  br i1 %v5_158cc, label %dec_label_pc_158e8, label %dec_label_pc_158d0

dec_label_pc_158d0:                               ; preds = %dec_label_pc_158c4, %dec_label_pc_15884, %dec_label_pc_158d0
  %v1_158dc = phi i32 [ %v4_158dc, %dec_label_pc_158d0 ], [ %v12_158b8, %dec_label_pc_158c4 ], [ %v0_1584c74, %dec_label_pc_15884 ]
  %v0_158d0 = load i32, i32* @lr, align 4
  %v3_158d0 = udiv i32 %v0_158d0, 65536
  store i32 %v3_158d0, i32* %ip.global-to-local, align 4
  %v0_158d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_158d4 = inttoptr i32 %v0_158d4 to i32*
  %v2_158d4 = load i32, i32* %v1_158d4, align 4
  store i32 %v2_158d4, i32* @lr, align 4
  %v4_158d4 = add i32 %v0_158d4, 4
  store i32 %v4_158d4, i32* %r1.global-to-local, align 4
  %v4_158d8 = mul i32 %v2_158d4, 65536
  %v5_158d8 = or i32 %v4_158d8, %v3_158d0
  store i32 %v5_158d8, i32* @ip, align 4
  %v2_158dc = inttoptr i32 %v1_158dc to i32*
  store i32 %v5_158d8, i32* %v2_158dc, align 4
  %v3_158dc = load i32, i32* @r0, align 4
  %v4_158dc = add i32 %v3_158dc, 4
  store i32 %v4_158dc, i32* @r0, align 4
  %v0_158e0 = load i32, i32* %r2.global-to-local, align 4
  %v2_158e0 = add i32 %v0_158e0, -4
  store i32 %v2_158e0, i32* %r2.global-to-local, align 4
  %v6_158e4 = icmp slt i32 %v0_158e0, 4
  br i1 %v6_158e4, label %dec_label_pc_158e8.loopexit, label %dec_label_pc_158d0

dec_label_pc_158e8.loopexit:                      ; preds = %dec_label_pc_158d0
  %v4_158e0 = sub i32 3, %v0_158e0
  %v5_158e0 = and i32 %v4_158e0, %v0_158e0
  %v6_158e0 = icmp slt i32 %v5_158e0, 0
  %v7_158e0 = icmp slt i32 %v2_158e0, 0
  store i1 %v6_158e0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_158e0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_158e8

dec_label_pc_158e8:                               ; preds = %dec_label_pc_158e8.loopexit, %dec_label_pc_158c4
  %v2_157bc112 = phi i32 [ %v4_158dc, %dec_label_pc_158e8.loopexit ], [ %v12_158b8, %dec_label_pc_158c4 ]
  %v0_157ac108 = phi i32 [ %v2_158e0, %dec_label_pc_158e8.loopexit ], [ %v2_158c8, %dec_label_pc_158c4 ]
  %v0_158e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_158e8 = add i32 %v0_158e8, -2
  store i32 %v1_158e8, i32* @r1, align 4
  br label %bb131

dec_label_pc_158f0:                               ; preds = %dec_label_pc_15804
  br i1 %v5_158f4, label %dec_label_pc_1593c, label %dec_label_pc_158f8

dec_label_pc_158f8:                               ; preds = %dec_label_pc_158f0
  store i32 %v2_158f0, i32* %r2.global-to-local, align 4
  %v3_158fc = load i32, i32* @r4, align 4
  store i32 %v3_158fc, i32* %stack_var_-16, align 4
  %v6_158fc = load i32, i32* @r5, align 4
  store i32 %v6_158fc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15900

dec_label_pc_15900:                               ; preds = %dec_label_pc_15900.dec_label_pc_15900_crit_edge, %dec_label_pc_158f8
  %v0_15924 = phi i32 [ %v12_15924, %dec_label_pc_15900.dec_label_pc_15900_crit_edge ], [ %v0_1584c74, %dec_label_pc_158f8 ]
  %v0_15904 = phi i32 [ %v0_15904.pre, %dec_label_pc_15900.dec_label_pc_15900_crit_edge ], [ %v4_15808, %dec_label_pc_158f8 ]
  %v0_15900 = phi i32 [ %v0_15900.pre, %dec_label_pc_15900.dec_label_pc_15900_crit_edge ], [ %v2_15808, %dec_label_pc_158f8 ]
  %v3_15900 = udiv i32 %v0_15900, 16777216
  store i32 %v3_15900, i32* %r3.global-to-local, align 4
  %v1_15904 = inttoptr i32 %v0_15904 to i32*
  %v2_15904 = load i32, i32* %v1_15904, align 4
  store i32 %v2_15904, i32* %r4.global-to-local, align 4
  %v3_15904 = add i32 %v0_15904, 4
  %v4_15904 = inttoptr i32 %v3_15904 to i32*
  %v5_15904 = load i32, i32* %v4_15904, align 4
  store i32 %v5_15904, i32* %r5.global-to-local, align 4
  %v6_15904 = add i32 %v0_15904, 8
  %v7_15904 = inttoptr i32 %v6_15904 to i32*
  %v8_15904 = load i32, i32* %v7_15904, align 4
  store i32 %v8_15904, i32* %ip.global-to-local, align 4
  %v9_15904 = add i32 %v0_15904, 12
  %v10_15904 = inttoptr i32 %v9_15904 to i32*
  %v11_15904 = load i32, i32* %v10_15904, align 4
  store i32 %v11_15904, i32* @lr, align 4
  %v12_15904 = add i32 %v0_15904, 16
  store i32 %v12_15904, i32* %r1.global-to-local, align 4
  %v4_15908 = mul i32 %v2_15904, 256
  %v5_15908 = or i32 %v4_15908, %v3_15900
  store i32 %v5_15908, i32* %r3.global-to-local, align 4
  %v3_1590c = udiv i32 %v2_15904, 16777216
  %v4_15910 = mul i32 %v5_15904, 256
  %v5_15910 = or i32 %v4_15910, %v3_1590c
  store i32 %v5_15910, i32* %r4.global-to-local, align 4
  %v3_15914 = udiv i32 %v5_15904, 16777216
  %v4_15918 = mul i32 %v8_15904, 256
  %v5_15918 = or i32 %v4_15918, %v3_15914
  store i32 %v5_15918, i32* %r5.global-to-local, align 4
  %v3_1591c = udiv i32 %v8_15904, 16777216
  %v4_15920 = mul i32 %v11_15904, 256
  %v5_15920 = or i32 %v4_15920, %v3_1591c
  store i32 %v5_15920, i32* @ip, align 4
  %v1_15924 = inttoptr i32 %v0_15924 to i32*
  store i32 %v5_15908, i32* %v1_15924, align 4
  %v3_15924 = add i32 %v0_15924, 4
  %v4_15924 = inttoptr i32 %v3_15924 to i32*
  %v5_15924 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15924, i32* %v4_15924, align 4
  %v6_15924 = add i32 %v0_15924, 8
  %v7_15924 = inttoptr i32 %v6_15924 to i32*
  %v8_15924 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15924, i32* %v7_15924, align 4
  %v9_15924 = add i32 %v0_15924, 12
  %v10_15924 = inttoptr i32 %v9_15924 to i32*
  %v11_15924 = load i32, i32* @ip, align 4
  store i32 %v11_15924, i32* %v10_15924, align 4
  %v12_15924 = add i32 %v0_15924, 16
  store i32 %v12_15924, i32* @r0, align 4
  %v0_15928 = load i32, i32* %r2.global-to-local, align 4
  %v2_15928 = add i32 %v0_15928, -16
  store i32 %v2_15928, i32* %r2.global-to-local, align 4
  %v6_1592c = icmp slt i32 %v0_15928, 16
  br i1 %v6_1592c, label %dec_label_pc_15930, label %dec_label_pc_15900.dec_label_pc_15900_crit_edge

dec_label_pc_15900.dec_label_pc_15900_crit_edge:  ; preds = %dec_label_pc_15900
  %v0_15900.pre = load i32, i32* @lr, align 4
  %v0_15904.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15900

dec_label_pc_15930:                               ; preds = %dec_label_pc_15900
  %v2_15930 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15930, i32* @r4, align 4
  %v5_15930 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15930, i32* @r5, align 4
  %v2_15934 = add i32 %v0_15928, -4
  store i32 %v2_15934, i32* %r2.global-to-local, align 4
  %v4_15934 = add i32 %v0_15928, 2147483632
  %v5_15934 = and i32 %v2_15934, %v4_15934
  %v6_15934 = icmp slt i32 %v5_15934, 0
  store i1 %v6_15934, i1* %cpsr_v.global-to-local, align 1
  %v7_15934 = icmp slt i32 %v2_15934, 0
  store i1 %v7_15934, i1* %cpsr_n.global-to-local, align 1
  %v8_15934 = icmp eq i32 %v2_15934, 0
  store i1 %v8_15934, i1* %cpsr_z.global-to-local, align 1
  %v5_15938 = icmp slt i32 %v2_15928, -12
  br i1 %v5_15938, label %dec_label_pc_15954, label %dec_label_pc_1593c

dec_label_pc_1593c:                               ; preds = %dec_label_pc_15930, %dec_label_pc_158f0, %dec_label_pc_1593c
  %v1_15948 = phi i32 [ %v4_15948, %dec_label_pc_1593c ], [ %v12_15924, %dec_label_pc_15930 ], [ %v0_1584c74, %dec_label_pc_158f0 ]
  %v0_1593c = load i32, i32* @lr, align 4
  %v3_1593c = udiv i32 %v0_1593c, 16777216
  store i32 %v3_1593c, i32* %ip.global-to-local, align 4
  %v0_15940 = load i32, i32* %r1.global-to-local, align 4
  %v1_15940 = inttoptr i32 %v0_15940 to i32*
  %v2_15940 = load i32, i32* %v1_15940, align 4
  store i32 %v2_15940, i32* @lr, align 4
  %v4_15940 = add i32 %v0_15940, 4
  store i32 %v4_15940, i32* %r1.global-to-local, align 4
  %v4_15944 = mul i32 %v2_15940, 256
  %v5_15944 = or i32 %v4_15944, %v3_1593c
  store i32 %v5_15944, i32* @ip, align 4
  %v2_15948 = inttoptr i32 %v1_15948 to i32*
  store i32 %v5_15944, i32* %v2_15948, align 4
  %v3_15948 = load i32, i32* @r0, align 4
  %v4_15948 = add i32 %v3_15948, 4
  store i32 %v4_15948, i32* @r0, align 4
  %v0_1594c = load i32, i32* %r2.global-to-local, align 4
  %v2_1594c = add i32 %v0_1594c, -4
  store i32 %v2_1594c, i32* %r2.global-to-local, align 4
  %v6_15950 = icmp slt i32 %v0_1594c, 4
  br i1 %v6_15950, label %dec_label_pc_15954.loopexit, label %dec_label_pc_1593c

dec_label_pc_15954.loopexit:                      ; preds = %dec_label_pc_1593c
  %v4_1594c = sub i32 3, %v0_1594c
  %v5_1594c = and i32 %v4_1594c, %v0_1594c
  %v6_1594c = icmp slt i32 %v5_1594c, 0
  %v7_1594c = icmp slt i32 %v2_1594c, 0
  store i1 %v6_1594c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1594c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15954

dec_label_pc_15954:                               ; preds = %dec_label_pc_15954.loopexit, %dec_label_pc_15930
  %v2_157bc113 = phi i32 [ %v4_15948, %dec_label_pc_15954.loopexit ], [ %v12_15924, %dec_label_pc_15930 ]
  %v0_157ac109 = phi i32 [ %v2_1594c, %dec_label_pc_15954.loopexit ], [ %v2_15934, %dec_label_pc_15930 ]
  %v0_15954 = load i32, i32* %r1.global-to-local, align 4
  %v1_15954 = add i32 %v0_15954, -1
  store i32 %v1_15954, i32* @r1, align 4
  br label %bb131

dec_label_pc_1595c:                               ; preds = %dec_label_pc_15710
  %v1_1595c = load i32, i32* @r2, align 4
  %v2_1595c = add i32 %v1_1595c, %v0_15710
  store i32 %v2_1595c, i32* %r1.global-to-local, align 4
  %v2_15960 = add i32 %v1_1595c, %v1_15710
  store i32 %v2_15960, i32* %r0.global-to-local, align 4
  %v2_15964 = add i32 %v1_1595c, -4
  store i32 %v2_15964, i32* %r2.global-to-local, align 4
  %v4_15964 = sub i32 3, %v1_1595c
  %v5_15964 = and i32 %v4_15964, %v1_1595c
  %v6_15964 = icmp slt i32 %v5_15964, 0
  store i1 %v6_15964, i1* %cpsr_v.global-to-local, align 1
  %v7_15964 = icmp slt i32 %v2_15964, 0
  store i1 %v7_15964, i1* %cpsr_n.global-to-local, align 1
  %v8_15964 = icmp eq i32 %v1_1595c, 4
  store i1 %v8_15964, i1* %cpsr_z.global-to-local, align 1
  %v5_15968 = icmp slt i32 %v1_1595c, 4
  br i1 %v5_15968, label %bb141, label %dec_label_pc_1596c

dec_label_pc_1596c:                               ; preds = %dec_label_pc_1595c
  %v1_1596c = urem i32 %v2_15960, 4
  store i32 %v1_1596c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1596c = icmp eq i32 %v1_1596c, 0
  store i1 %v2_1596c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1596c, label %dec_label_pc_15974, label %dec_label_pc_15a14

dec_label_pc_15974:                               ; preds = %dec_label_pc_1596c
  %v1_15974 = urem i32 %v2_1595c, 4
  store i32 %v1_15974, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15974 = icmp eq i32 %v1_15974, 0
  store i1 %v2_15974, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15974, label %dec_label_pc_1597c, label %dec_label_pc_15a40

dec_label_pc_1597c:                               ; preds = %dec_label_pc_15974, %dec_label_pc_15a38
  %v0_1599448 = phi i32 [ %v2_15960, %dec_label_pc_15974 ], [ %v0_15a8831, %dec_label_pc_15a38 ]
  %v0_1599047 = phi i32 [ %v2_1595c, %dec_label_pc_15974 ], [ %v0_15a38, %dec_label_pc_15a38 ]
  %v0_1597c = phi i32 [ %v2_15964, %dec_label_pc_15974 ], [ %v2_15a30, %dec_label_pc_15a38 ]
  %v2_1597c = add i32 %v0_1597c, -8
  store i32 %v2_1597c, i32* %r2.global-to-local, align 4
  %v4_1597c = sub i32 7, %v0_1597c
  %v5_1597c = and i32 %v4_1597c, %v0_1597c
  %v6_1597c = icmp slt i32 %v5_1597c, 0
  store i1 %v6_1597c, i1* %cpsr_v.global-to-local, align 1
  %v7_1597c = icmp slt i32 %v2_1597c, 0
  store i1 %v7_1597c, i1* %cpsr_n.global-to-local, align 1
  %v8_1597c = icmp eq i32 %v0_1597c, 8
  store i1 %v8_1597c, i1* %cpsr_z.global-to-local, align 1
  %v5_15980 = icmp slt i32 %v0_1597c, 8
  br i1 %v5_15980, label %dec_label_pc_159cc, label %dec_label_pc_15984

dec_label_pc_15984:                               ; preds = %dec_label_pc_1597c
  %v3_15984 = load i32, i32* @r4, align 4
  store i32 %v3_15984, i32* %stack_var_-8, align 4
  %v6_15984 = load i32, i32* @lr, align 4
  %v2_15988 = add i32 %v0_1597c, -28
  store i32 %v2_15988, i32* %r2.global-to-local, align 4
  %v4_15988 = sub i32 27, %v0_1597c
  %v5_15988 = and i32 %v4_15988, %v2_1597c
  %v6_15988 = icmp slt i32 %v5_15988, 0
  store i1 %v6_15988, i1* %cpsr_v.global-to-local, align 1
  %v7_15988 = icmp slt i32 %v2_15988, 0
  store i1 %v7_15988, i1* %cpsr_n.global-to-local, align 1
  %v8_15988 = icmp eq i32 %v2_1597c, 20
  store i1 %v8_15988, i1* %cpsr_z.global-to-local, align 1
  %v5_1598c = icmp slt i32 %v2_1597c, 20
  br i1 %v5_1598c, label %dec_label_pc_159a8, label %dec_label_pc_15990

dec_label_pc_15990:                               ; preds = %dec_label_pc_15984, %dec_label_pc_15990.dec_label_pc_15990_crit_edge
  %v0_15994 = phi i32 [ %v1_1599c, %dec_label_pc_15990.dec_label_pc_15990_crit_edge ], [ %v0_1599448, %dec_label_pc_15984 ]
  %v0_15990 = phi i32 [ %v0_15990.pre, %dec_label_pc_15990.dec_label_pc_15990_crit_edge ], [ %v0_1599047, %dec_label_pc_15984 ]
  %v1_15990 = add i32 %v0_15990, -4
  %v2_15990 = inttoptr i32 %v1_15990 to i32*
  %v3_15990 = load i32, i32* %v2_15990, align 4
  store i32 %v3_15990, i32* %r3.global-to-local, align 4
  %v4_15990 = add i32 %v0_15990, -8
  %v5_15990 = inttoptr i32 %v4_15990 to i32*
  %v6_15990 = load i32, i32* %v5_15990, align 4
  store i32 %v6_15990, i32* %r4.global-to-local, align 4
  %v7_15990 = add i32 %v0_15990, -12
  %v8_15990 = inttoptr i32 %v7_15990 to i32*
  %v9_15990 = load i32, i32* %v8_15990, align 4
  store i32 %v9_15990, i32* %ip.global-to-local, align 4
  %v10_15990 = add i32 %v0_15990, -16
  %v11_15990 = inttoptr i32 %v10_15990 to i32*
  %v12_15990 = load i32, i32* %v11_15990, align 4
  store i32 %v12_15990, i32* %lr.global-to-local, align 4
  store i32 %v10_15990, i32* %r1.global-to-local, align 4
  %v1_15994 = add i32 %v0_15994, -16
  %v2_15994 = inttoptr i32 %v1_15994 to i32*
  store i32 %v3_15990, i32* %v2_15994, align 4
  %v4_15994 = add i32 %v0_15994, -12
  %v5_15994 = inttoptr i32 %v4_15994 to i32*
  %v6_15994 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_15994, i32* %v5_15994, align 4
  %v7_15994 = add i32 %v0_15994, -8
  %v8_15994 = inttoptr i32 %v7_15994 to i32*
  %v9_15994 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_15994, i32* %v8_15994, align 4
  %v10_15994 = add i32 %v0_15994, -4
  %v11_15994 = inttoptr i32 %v10_15994 to i32*
  %v12_15994 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15994, i32* %v11_15994, align 4
  store i32 %v1_15994, i32* %r0.global-to-local, align 4
  %v0_15998 = load i32, i32* %r1.global-to-local, align 4
  %v1_15998 = add i32 %v0_15998, -4
  %v2_15998 = inttoptr i32 %v1_15998 to i32*
  %v3_15998 = load i32, i32* %v2_15998, align 4
  store i32 %v3_15998, i32* %r3.global-to-local, align 4
  %v4_15998 = add i32 %v0_15998, -8
  %v5_15998 = inttoptr i32 %v4_15998 to i32*
  %v6_15998 = load i32, i32* %v5_15998, align 4
  store i32 %v6_15998, i32* %r4.global-to-local, align 4
  %v7_15998 = add i32 %v0_15998, -12
  %v8_15998 = inttoptr i32 %v7_15998 to i32*
  %v9_15998 = load i32, i32* %v8_15998, align 4
  store i32 %v9_15998, i32* @ip, align 4
  %v10_15998 = add i32 %v0_15998, -16
  %v11_15998 = inttoptr i32 %v10_15998 to i32*
  %v12_15998 = load i32, i32* %v11_15998, align 4
  store i32 %v12_15998, i32* %lr.global-to-local, align 4
  store i32 %v10_15998, i32* %r1.global-to-local, align 4
  %v1_1599c = add i32 %v0_15994, -32
  %v2_1599c = inttoptr i32 %v1_1599c to i32*
  store i32 %v3_15998, i32* %v2_1599c, align 4
  %v4_1599c = add i32 %v0_15994, -28
  %v5_1599c = inttoptr i32 %v4_1599c to i32*
  %v6_1599c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_1599c, i32* %v5_1599c, align 4
  %v7_1599c = add i32 %v0_15994, -24
  %v8_1599c = inttoptr i32 %v7_1599c to i32*
  %v9_1599c = load i32, i32* @ip, align 4
  store i32 %v9_1599c, i32* %v8_1599c, align 4
  %v10_1599c = add i32 %v0_15994, -20
  %v11_1599c = inttoptr i32 %v10_1599c to i32*
  %v12_1599c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1599c, i32* %v11_1599c, align 4
  store i32 %v1_1599c, i32* %r0.global-to-local, align 4
  %v0_159a0 = load i32, i32* %r2.global-to-local, align 4
  %v2_159a0 = add i32 %v0_159a0, -32
  store i32 %v2_159a0, i32* %r2.global-to-local, align 4
  %v6_159a4 = icmp slt i32 %v0_159a0, 32
  br i1 %v6_159a4, label %dec_label_pc_159a8.loopexit, label %dec_label_pc_15990.dec_label_pc_15990_crit_edge

dec_label_pc_15990.dec_label_pc_15990_crit_edge:  ; preds = %dec_label_pc_15990
  %v0_15990.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15990

dec_label_pc_159a8.loopexit:                      ; preds = %dec_label_pc_15990
  %v4_159a0 = sub i32 31, %v0_159a0
  %v5_159a0 = and i32 %v4_159a0, %v0_159a0
  %v6_159a0 = icmp slt i32 %v5_159a0, 0
  %v7_159a0 = icmp slt i32 %v2_159a0, 0
  store i1 %v6_159a0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_159a0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_159a8

dec_label_pc_159a8:                               ; preds = %dec_label_pc_159a8.loopexit, %dec_label_pc_15984
  %v6_159b0 = phi i32 [ %v1_1599c, %dec_label_pc_159a8.loopexit ], [ %v0_1599448, %dec_label_pc_15984 ]
  %v0_159b8.pr = phi i32 [ %v2_159a0, %dec_label_pc_159a8.loopexit ], [ %v2_15988, %dec_label_pc_15984 ]
  %v4_159a8 = add i32 %v0_159b8.pr, 16
  %v6_159a8 = sub i32 0, %v0_159b8.pr
  %v7_159a8 = and i32 %v4_159a8, %v6_159a8
  %v8_159a8 = icmp slt i32 %v7_159a8, 0
  store i1 %v8_159a8, i1* %cpsr_v.global-to-local, align 1
  %v9_159a8 = icmp slt i32 %v4_159a8, 0
  store i1 %v9_159a8, i1* %cpsr_n.global-to-local, align 1
  %v10_159a8 = icmp eq i32 %v4_159a8, 0
  store i1 %v10_159a8, i1* %cpsr_z.global-to-local, align 1
  %v5_159ac = icmp slt i32 %v0_159b8.pr, -16
  br i1 %v5_159ac, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_159a8
  %v6_159ac = load i32, i32* %r1.global-to-local, align 4
  %v7_159ac = add i32 %v6_159ac, -4
  %v8_159ac = inttoptr i32 %v7_159ac to i32*
  %v9_159ac = load i32, i32* %v8_159ac, align 4
  store i32 %v9_159ac, i32* %r3.global-to-local, align 4
  %v10_159ac = add i32 %v6_159ac, -8
  %v11_159ac = inttoptr i32 %v10_159ac to i32*
  %v12_159ac = load i32, i32* %v11_159ac, align 4
  store i32 %v12_159ac, i32* %r4.global-to-local, align 4
  %v13_159ac = add i32 %v6_159ac, -12
  %v14_159ac = inttoptr i32 %v13_159ac to i32*
  %v15_159ac = load i32, i32* %v14_159ac, align 4
  store i32 %v15_159ac, i32* @ip, align 4
  %v16_159ac = add i32 %v6_159ac, -16
  %v17_159ac = inttoptr i32 %v16_159ac to i32*
  %v18_159ac = load i32, i32* %v17_159ac, align 4
  store i32 %v18_159ac, i32* %lr.global-to-local, align 4
  store i32 %v16_159ac, i32* %r1.global-to-local, align 4
  %v7_159b0 = add i32 %v6_159b0, -16
  %v8_159b0 = inttoptr i32 %v7_159b0 to i32*
  store i32 %v9_159ac, i32* %v8_159b0, align 4
  %v10_159b0 = add i32 %v6_159b0, -12
  %v11_159b0 = inttoptr i32 %v10_159b0 to i32*
  %v12_159b0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_159b0, i32* %v11_159b0, align 4
  %v13_159b0 = add i32 %v6_159b0, -8
  %v14_159b0 = inttoptr i32 %v13_159b0 to i32*
  %v15_159b0 = load i32, i32* @ip, align 4
  store i32 %v15_159b0, i32* %v14_159b0, align 4
  %v16_159b0 = add i32 %v6_159b0, -4
  %v17_159b0 = inttoptr i32 %v16_159b0 to i32*
  %v18_159b0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_159b0, i32* %v17_159b0, align 4
  store i32 %v7_159b0, i32* %r0.global-to-local, align 4
  %v6_159b4 = load i32, i32* %r2.global-to-local, align 4
  %v7_159b4 = add i32 %v6_159b4, -16
  store i32 %v7_159b4, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_159a8, %bb138
  %v6_159c0 = phi i32 [ %v7_159b0, %bb138 ], [ %v6_159b0, %dec_label_pc_159a8 ]
  %v0_159b8 = phi i32 [ %v7_159b4, %bb138 ], [ %v0_159b8.pr, %dec_label_pc_159a8 ]
  %v4_159b8 = add i32 %v0_159b8, 20
  store i32 %v4_159b8, i32* %r2.global-to-local, align 4
  %v6_159b8 = sub i32 0, %v0_159b8
  %v7_159b8 = and i32 %v4_159b8, %v6_159b8
  %v8_159b8 = icmp slt i32 %v7_159b8, 0
  store i1 %v8_159b8, i1* %cpsr_v.global-to-local, align 1
  %v9_159b8 = icmp slt i32 %v4_159b8, 0
  store i1 %v9_159b8, i1* %cpsr_n.global-to-local, align 1
  %v10_159b8 = icmp eq i32 %v4_159b8, 0
  store i1 %v10_159b8, i1* %cpsr_z.global-to-local, align 1
  %v5_159bc = icmp slt i32 %v0_159b8, -20
  br i1 %v5_159bc, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_159bc = load i32, i32* %r1.global-to-local, align 4
  %v7_159bc = add i32 %v6_159bc, -4
  %v8_159bc = inttoptr i32 %v7_159bc to i32*
  %v9_159bc = load i32, i32* %v8_159bc, align 4
  store i32 %v9_159bc, i32* %r3.global-to-local, align 4
  %v10_159bc = add i32 %v6_159bc, -8
  %v11_159bc = inttoptr i32 %v10_159bc to i32*
  %v12_159bc = load i32, i32* %v11_159bc, align 4
  store i32 %v12_159bc, i32* @ip, align 4
  %v13_159bc = add i32 %v6_159bc, -12
  %v14_159bc = inttoptr i32 %v13_159bc to i32*
  %v15_159bc = load i32, i32* %v14_159bc, align 4
  store i32 %v15_159bc, i32* %lr.global-to-local, align 4
  store i32 %v13_159bc, i32* %r1.global-to-local, align 4
  %v7_159c0 = add i32 %v6_159c0, -12
  %v8_159c0 = inttoptr i32 %v7_159c0 to i32*
  store i32 %v9_159bc, i32* %v8_159c0, align 4
  %v10_159c0 = add i32 %v6_159c0, -8
  %v11_159c0 = inttoptr i32 %v10_159c0 to i32*
  %v12_159c0 = load i32, i32* @ip, align 4
  store i32 %v12_159c0, i32* %v11_159c0, align 4
  %v13_159c0 = add i32 %v6_159c0, -4
  %v14_159c0 = inttoptr i32 %v13_159c0 to i32*
  %v15_159c0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_159c0, i32* %v14_159c0, align 4
  store i32 %v7_159c0, i32* %r0.global-to-local, align 4
  %v6_159c4 = load i32, i32* %r2.global-to-local, align 4
  %v7_159c4 = add i32 %v6_159c4, -12
  store i32 %v7_159c4, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_159e456 = phi i32 [ %v6_159c0, %.thread13 ], [ %v7_159c0, %bb139 ]
  %v0_159cc54 = phi i32 [ %v4_159b8, %.thread13 ], [ %v7_159c4, %bb139 ]
  %v2_159c8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_159c8, i32* @r4, align 4
  store i32 %v6_15984, i32* @lr, align 4
  br label %dec_label_pc_159cc

dec_label_pc_159cc:                               ; preds = %dec_label_pc_1597c, %.thread15
  %v7_159dc = phi i32 [ %v0_1599448, %dec_label_pc_1597c ], [ %v6_159e456, %.thread15 ]
  %v0_159cc = phi i32 [ %v2_1597c, %dec_label_pc_1597c ], [ %v0_159cc54, %.thread15 ]
  %v2_159cc = add i32 %v0_159cc, 8
  store i32 %v2_159cc, i32* %r2.global-to-local, align 4
  %v4_159cc = sub i32 0, %v0_159cc
  %v5_159cc = and i32 %v2_159cc, %v4_159cc
  %v6_159cc = icmp slt i32 %v5_159cc, 0
  store i1 %v6_159cc, i1* %cpsr_v.global-to-local, align 1
  %v7_159cc = icmp slt i32 %v2_159cc, 0
  store i1 %v7_159cc, i1* %cpsr_n.global-to-local, align 1
  %v8_159cc = icmp eq i32 %v2_159cc, 0
  store i1 %v8_159cc, i1* %cpsr_z.global-to-local, align 1
  %v5_159d0 = icmp slt i32 %v0_159cc, -8
  br i1 %v5_159d0, label %bb141, label %dec_label_pc_159d4

dec_label_pc_159d4:                               ; preds = %dec_label_pc_159cc
  %v6_159d4 = add i32 %v0_159cc, 4
  store i32 %v6_159d4, i32* %r2.global-to-local, align 4
  %v8_159d4 = sub i32 -5, %v0_159cc
  %v9_159d4 = and i32 %v8_159d4, %v2_159cc
  %v10_159d4 = icmp slt i32 %v9_159d4, 0
  store i1 %v10_159d4, i1* %cpsr_v.global-to-local, align 1
  %v11_159d4 = icmp slt i32 %v6_159d4, 0
  store i1 %v11_159d4, i1* %cpsr_n.global-to-local, align 1
  %v12_159d4 = icmp eq i32 %v2_159cc, 4
  store i1 %v12_159d4, i1* %cpsr_z.global-to-local, align 1
  %v5_159d8 = icmp slt i32 %v2_159cc, 4
  %v6_159d8 = load i32, i32* %r1.global-to-local, align 4
  %v7_159d8 = add i32 %v6_159d8, -4
  %v8_159d8 = inttoptr i32 %v7_159d8 to i32*
  %v9_159d8 = load i32, i32* %v8_159d8, align 4
  store i32 %v9_159d8, i32* %r3.global-to-local, align 4
  br i1 %v5_159d8, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_159d4
  store i32 %v7_159d8, i32* %r1.global-to-local, align 4
  %v8_159dc = add i32 %v7_159dc, -4
  %v9_159dc = inttoptr i32 %v8_159dc to i32*
  store i32 %v9_159d8, i32* %v9_159dc, align 4
  %v10_159dc = load i32, i32* %r0.global-to-local, align 4
  %v11_159dc = add i32 %v10_159dc, -4
  store i32 %v11_159dc, i32* %r0.global-to-local, align 4
  %v0_159ec.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_159d4
  %v10_159e0 = add i32 %v6_159d8, -8
  %v11_159e0 = inttoptr i32 %v10_159e0 to i32*
  %v12_159e0 = load i32, i32* %v11_159e0, align 4
  store i32 %v12_159e0, i32* @ip, align 4
  store i32 %v10_159e0, i32* %r1.global-to-local, align 4
  %v7_159e4 = add i32 %v7_159dc, -8
  %v8_159e4 = inttoptr i32 %v7_159e4 to i32*
  store i32 %v9_159d8, i32* %v8_159e4, align 4
  %v10_159e4 = add i32 %v7_159dc, -4
  %v11_159e4 = inttoptr i32 %v10_159e4 to i32*
  %v12_159e4 = load i32, i32* @ip, align 4
  store i32 %v12_159e4, i32* %v11_159e4, align 4
  store i32 %v7_159e4, i32* %r0.global-to-local, align 4
  %v6_159e8 = load i32, i32* %r2.global-to-local, align 4
  %v7_159e8 = add i32 %v6_159e8, -4
  store i32 %v7_159e8, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_1595c, %dec_label_pc_159cc, %dec_label_pc_15b90, %dec_label_pc_15b24, %dec_label_pc_15ab8, %bb140
  %v2_159f0 = phi i32 [ %v11_159dc, %.thread19 ], [ %v0_15a8831, %.thread25 ], [ %v2_15960, %dec_label_pc_1595c ], [ %v7_159dc, %dec_label_pc_159cc ], [ %v2_159fc64, %dec_label_pc_15b90 ], [ %v2_159fc63, %dec_label_pc_15b24 ], [ %v2_159fc62, %dec_label_pc_15ab8 ], [ %v7_159e4, %bb140 ]
  %v0_159ec = phi i32 [ %v0_159ec.pre, %.thread19 ], [ %v2_15a30, %.thread25 ], [ %v2_15964, %dec_label_pc_1595c ], [ %v2_159cc, %dec_label_pc_159cc ], [ %v0_159ec60, %dec_label_pc_15b90 ], [ %v0_159ec59, %dec_label_pc_15b24 ], [ %v0_159ec58, %dec_label_pc_15ab8 ], [ %v7_159e8, %bb140 ]
  %v1_159ec = add i32 %v0_159ec, 4
  store i32 %v1_159ec, i32* @r2, align 4
  %v3_159ec = sub i32 0, %v0_159ec
  %v4_159ec = and i32 %v1_159ec, %v3_159ec
  %v5_159ec = icmp slt i32 %v4_159ec, 0
  store i1 %v5_159ec, i1* %cpsr_v.global-to-local, align 1
  %v6_159ec = icmp slt i32 %v1_159ec, 0
  store i1 %v6_159ec, i1* %cpsr_n.global-to-local, align 1
  %v7_159ec = icmp eq i32 %v1_159ec, 0
  store i1 %v7_159ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_159ec, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_159f4 = add i32 %v0_159ec, 2
  %v3_159f4 = sub i32 -3, %v0_159ec
  %v4_159f4 = and i32 %v3_159f4, %v1_159ec
  %v5_159f4 = icmp slt i32 %v4_159f4, 0
  store i1 %v5_159f4, i1* %cpsr_v.global-to-local, align 1
  %v6_159f4 = icmp slt i32 %v1_159f4, 0
  store i1 %v6_159f4, i1* %cpsr_n.global-to-local, align 1
  %v7_159f4 = icmp eq i32 %v1_159ec, 2
  store i1 %v7_159f4, i1* %cpsr_z.global-to-local, align 1
  %v0_159f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_159f8 = add i32 %v0_159f8, -1
  %v2_159f8 = inttoptr i32 %v1_159f8 to i8*
  %v3_159f8 = load i8, i8* %v2_159f8, align 1
  %v4_159f8 = zext i8 %v3_159f8 to i32
  store i32 %v4_159f8, i32* %r3.global-to-local, align 4
  store i32 %v1_159f8, i32* %r1.global-to-local, align 4
  %v3_159fc = add i32 %v2_159f0, -1
  %v4_159fc = inttoptr i32 %v3_159fc to i8*
  store i8 %v3_159f8, i8* %v4_159fc, align 1
  %v5_159fc = load i32, i32* %r0.global-to-local, align 4
  %v6_159fc = add i32 %v5_159fc, -1
  store i32 %v6_159fc, i32* %r0.global-to-local, align 4
  %v0_15a00 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15a00 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15a00 = xor i1 %v0_15a00, %v1_15a00
  br i1 %v2_15a00, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_15a00 = load i32, i32* %r1.global-to-local, align 4
  %v4_15a00 = add i32 %v3_15a00, -1
  %v5_15a00 = inttoptr i32 %v4_15a00 to i8*
  %v6_15a00 = load i8, i8* %v5_15a00, align 1
  %v7_15a00 = zext i8 %v6_15a00 to i32
  store i32 %v7_15a00, i32* %r3.global-to-local, align 4
  store i32 %v4_15a00, i32* %r1.global-to-local, align 4
  %v6_15a04 = add i32 %v5_159fc, -2
  %v7_15a04 = inttoptr i32 %v6_15a04 to i8*
  store i8 %v6_15a00, i8* %v7_15a04, align 1
  %v8_15a04 = load i32, i32* %r0.global-to-local, align 4
  %v9_15a04 = add i32 %v8_15a04, -1
  store i32 %v9_15a04, i32* %r0.global-to-local, align 4
  %v1_15a08.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15a08.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_15a0c = phi i32 [ %v9_15a04, %bb143 ], [ %v6_159fc, %bb142 ]
  %v2_15a0c = phi i1 [ %v2_15a08.pre, %bb143 ], [ %v1_15a00, %bb142 ]
  %v1_15a0c = phi i1 [ %v1_15a08.pre, %bb143 ], [ %v0_15a00, %bb142 ]
  %v0_15a08 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15a08 = xor i1 %v2_15a0c, %v1_15a0c
  %v4_15a08 = or i1 %v0_15a08, %v3_15a08
  br i1 %v4_15a08, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_15a08 = load i32, i32* %r1.global-to-local, align 4
  %v6_15a08 = add i32 %v5_15a08, -1
  %v7_15a08 = inttoptr i32 %v6_15a08 to i8*
  %v8_15a08 = load i8, i8* %v7_15a08, align 1
  %v9_15a08 = zext i8 %v8_15a08 to i32
  store i32 %v9_15a08, i32* %r3.global-to-local, align 4
  store i32 %v6_15a08, i32* %r1.global-to-local, align 4
  %v8_15a0c = add i32 %v7_15a0c, -1
  %v9_15a0c = inttoptr i32 %v8_15a0c to i8*
  store i8 %v8_15a08, i8* %v9_15a0c, align 1
  %v10_15a0c = load i32, i32* %r0.global-to-local, align 4
  %v11_15a0c = add i32 %v10_15a0c, -1
  store i32 %v11_15a0c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_15a14:                               ; preds = %dec_label_pc_1596c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_15a14 = icmp eq i32 %v1_1596c, 1
  store i1 %v8_15a14, i1* %cpsr_n.global-to-local, align 1
  %v9_15a14 = icmp eq i32 %v1_1596c, 2
  store i1 %v9_15a14, i1* %cpsr_z.global-to-local, align 1
  %v1_15a18 = add i32 %v2_1595c, -1
  %v2_15a18 = inttoptr i32 %v1_15a18 to i8*
  %v3_15a18 = load i8, i8* %v2_15a18, align 1
  %v4_15a18 = zext i8 %v3_15a18 to i32
  store i32 %v4_15a18, i32* %r3.global-to-local, align 4
  store i32 %v1_15a18, i32* %r1.global-to-local, align 4
  %v3_15a1c = add i32 %v2_15960, -1
  %v4_15a1c = inttoptr i32 %v3_15a1c to i8*
  store i8 %v3_15a18, i8* %v4_15a1c, align 1
  %v5_15a1c = load i32, i32* %r0.global-to-local, align 4
  %v6_15a1c = add i32 %v5_15a1c, -1
  store i32 %v6_15a1c, i32* %r0.global-to-local, align 4
  br i1 %v8_15a14, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_15a14
  %v6_15a20 = load i32, i32* %r1.global-to-local, align 4
  %v7_15a20 = add i32 %v6_15a20, -1
  %v8_15a20 = inttoptr i32 %v7_15a20 to i8*
  %v9_15a20 = load i8, i8* %v8_15a20, align 1
  %v10_15a20 = zext i8 %v9_15a20 to i32
  store i32 %v10_15a20, i32* %r3.global-to-local, align 4
  store i32 %v7_15a20, i32* %r1.global-to-local, align 4
  %v9_15a24 = add i32 %v5_15a1c, -2
  %v10_15a24 = inttoptr i32 %v9_15a24 to i8*
  store i8 %v9_15a20, i8* %v10_15a24, align 1
  %v11_15a24 = load i32, i32* %r0.global-to-local, align 4
  %v12_15a24 = add i32 %v11_15a24, -1
  store i32 %v12_15a24, i32* %r0.global-to-local, align 4
  br i1 %v9_15a14, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_15a28 = load i32, i32* %r1.global-to-local, align 4
  %v9_15a28 = add i32 %v8_15a28, -1
  %v10_15a28 = inttoptr i32 %v9_15a28 to i8*
  %v11_15a28 = load i8, i8* %v10_15a28, align 1
  %v12_15a28 = zext i8 %v11_15a28 to i32
  store i32 %v12_15a28, i32* %r3.global-to-local, align 4
  store i32 %v9_15a28, i32* %r1.global-to-local, align 4
  %v11_15a2c = add i32 %v11_15a24, -2
  %v12_15a2c = inttoptr i32 %v11_15a2c to i8*
  store i8 %v11_15a28, i8* %v12_15a2c, align 1
  %v13_15a2c = load i32, i32* %r0.global-to-local, align 4
  %v14_15a2c = add i32 %v13_15a2c, -1
  store i32 %v14_15a2c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_15a14, %bb146
  %v0_15a8831 = phi i32 [ %v12_15a24, %bb145 ], [ %v6_15a1c, %dec_label_pc_15a14 ], [ %v14_15a2c, %bb146 ]
  %v0_15a30 = load i32, i32* %r2.global-to-local, align 4
  %v1_15a30 = load i32, i32* @ip, align 4
  %v2_15a30 = sub i32 %v0_15a30, %v1_15a30
  store i32 %v2_15a30, i32* %r2.global-to-local, align 4
  %v4_15a30 = xor i32 %v1_15a30, %v0_15a30
  %v5_15a30 = xor i32 %v2_15a30, %v0_15a30
  %v6_15a30 = and i32 %v5_15a30, %v4_15a30
  %v7_15a30 = icmp slt i32 %v6_15a30, 0
  store i1 %v7_15a30, i1* %cpsr_v.global-to-local, align 1
  %v8_15a30 = icmp slt i32 %v2_15a30, 0
  store i1 %v8_15a30, i1* %cpsr_n.global-to-local, align 1
  %v9_15a30 = icmp eq i32 %v0_15a30, %v1_15a30
  store i1 %v9_15a30, i1* %cpsr_z.global-to-local, align 1
  %v5_15a34 = icmp slt i32 %v0_15a30, %v1_15a30
  br i1 %v5_15a34, label %bb141, label %dec_label_pc_15a38

dec_label_pc_15a38:                               ; preds = %.thread25
  %v0_15a38 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a38 = urem i32 %v0_15a38, 4
  store i32 %v1_15a38, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15a38 = icmp eq i32 %v1_15a38, 0
  store i1 %v2_15a38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15a38, label %dec_label_pc_1597c, label %dec_label_pc_15a40

dec_label_pc_15a40:                               ; preds = %dec_label_pc_15974, %dec_label_pc_15a38
  %v0_15a8830 = phi i32 [ %v2_15960, %dec_label_pc_15974 ], [ %v0_15a8831, %dec_label_pc_15a38 ]
  %v0_15b34 = phi i32 [ %v2_15964, %dec_label_pc_15974 ], [ %v2_15a30, %dec_label_pc_15a38 ]
  %v0_15a40 = phi i32 [ %v2_1595c, %dec_label_pc_15974 ], [ %v0_15a38, %dec_label_pc_15a38 ]
  %v0_15a48 = phi i32 [ %v1_15974, %dec_label_pc_15974 ], [ %v1_15a38, %dec_label_pc_15a38 ]
  %v1_15a40 = and i32 %v0_15a40, -4
  store i32 %v1_15a40, i32* %r1.global-to-local, align 4
  %v1_15a44 = inttoptr i32 %v1_15a40 to i32*
  %v2_15a44 = load i32, i32* %v1_15a44, align 4
  store i32 %v2_15a44, i32* %r3.global-to-local, align 4
  %v7_15a48 = icmp ult i32 %v0_15a48, 2
  %v2_15b2c = add i32 %v0_15b34, -12
  %v4_15b2c = sub i32 11, %v0_15b34
  %v5_15b2c = and i32 %v4_15b2c, %v0_15b34
  %v6_15b2c = icmp slt i32 %v5_15b2c, 0
  store i1 %v6_15b2c, i1* %cpsr_v.global-to-local, align 1
  %v7_15b2c = icmp slt i32 %v2_15b2c, 0
  store i1 %v7_15b2c, i1* %cpsr_n.global-to-local, align 1
  %v8_15b2c = icmp eq i32 %v0_15b34, 12
  store i1 %v8_15b2c, i1* %cpsr_z.global-to-local, align 1
  %v5_15b30 = icmp slt i32 %v0_15b34, 12
  br i1 %v7_15a48, label %dec_label_pc_15b2c, label %dec_label_pc_15a50

dec_label_pc_15a50:                               ; preds = %dec_label_pc_15a40
  %v8_15a48 = icmp eq i32 %v0_15a48, 2
  br i1 %v8_15a48, label %dec_label_pc_15ac0, label %dec_label_pc_15a54

dec_label_pc_15a54:                               ; preds = %dec_label_pc_15a50
  br i1 %v5_15b30, label %dec_label_pc_15aa0, label %dec_label_pc_15a5c

dec_label_pc_15a5c:                               ; preds = %dec_label_pc_15a54
  store i32 %v2_15b2c, i32* %r2.global-to-local, align 4
  %v3_15a60 = load i32, i32* @r4, align 4
  store i32 %v3_15a60, i32* %stack_var_-12, align 4
  %v6_15a60 = load i32, i32* @r5, align 4
  store i32 %v6_15a60, i32* %stack_var_-8, align 4
  %v9_15a60 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15a64

dec_label_pc_15a64:                               ; preds = %dec_label_pc_15a64.dec_label_pc_15a64_crit_edge, %dec_label_pc_15a5c
  %v0_15a88 = phi i32 [ %v1_15a88, %dec_label_pc_15a64.dec_label_pc_15a64_crit_edge ], [ %v0_15a8830, %dec_label_pc_15a5c ]
  %v0_15a68 = phi i32 [ %v0_15a68.pre, %dec_label_pc_15a64.dec_label_pc_15a64_crit_edge ], [ %v1_15a40, %dec_label_pc_15a5c ]
  %v0_15a64 = phi i32 [ %v0_15a64.pre, %dec_label_pc_15a64.dec_label_pc_15a64_crit_edge ], [ %v2_15a44, %dec_label_pc_15a5c ]
  %v3_15a64 = mul i32 %v0_15a64, 256
  store i32 %v3_15a64, i32* %lr.global-to-local, align 4
  %v1_15a68 = add i32 %v0_15a68, -4
  %v2_15a68 = inttoptr i32 %v1_15a68 to i32*
  %v3_15a68 = load i32, i32* %v2_15a68, align 4
  store i32 %v3_15a68, i32* %r3.global-to-local, align 4
  %v4_15a68 = add i32 %v0_15a68, -8
  %v5_15a68 = inttoptr i32 %v4_15a68 to i32*
  %v6_15a68 = load i32, i32* %v5_15a68, align 4
  store i32 %v6_15a68, i32* %r4.global-to-local, align 4
  %v7_15a68 = add i32 %v0_15a68, -12
  %v8_15a68 = inttoptr i32 %v7_15a68 to i32*
  %v9_15a68 = load i32, i32* %v8_15a68, align 4
  store i32 %v9_15a68, i32* %r5.global-to-local, align 4
  %v10_15a68 = add i32 %v0_15a68, -16
  %v11_15a68 = inttoptr i32 %v10_15a68 to i32*
  %v12_15a68 = load i32, i32* %v11_15a68, align 4
  store i32 %v10_15a68, i32* %r1.global-to-local, align 4
  %v4_15a6c = udiv i32 %v12_15a68, 16777216
  %v5_15a6c = or i32 %v4_15a6c, %v3_15a64
  store i32 %v5_15a6c, i32* %lr.global-to-local, align 4
  %v3_15a70 = mul i32 %v12_15a68, 256
  %v4_15a74 = udiv i32 %v9_15a68, 16777216
  %v5_15a74 = or i32 %v3_15a70, %v4_15a74
  store i32 %v5_15a74, i32* @ip, align 4
  %v3_15a78 = mul i32 %v9_15a68, 256
  %v4_15a7c = udiv i32 %v6_15a68, 16777216
  %v5_15a7c = or i32 %v3_15a78, %v4_15a7c
  store i32 %v5_15a7c, i32* %r5.global-to-local, align 4
  %v3_15a80 = mul i32 %v6_15a68, 256
  %v4_15a84 = udiv i32 %v3_15a68, 16777216
  %v5_15a84 = or i32 %v3_15a80, %v4_15a84
  store i32 %v5_15a84, i32* %r4.global-to-local, align 4
  %v1_15a88 = add i32 %v0_15a88, -16
  %v2_15a88 = inttoptr i32 %v1_15a88 to i32*
  store i32 %v5_15a84, i32* %v2_15a88, align 4
  %v4_15a88 = add i32 %v0_15a88, -12
  %v5_15a88 = inttoptr i32 %v4_15a88 to i32*
  %v6_15a88 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15a88, i32* %v5_15a88, align 4
  %v7_15a88 = add i32 %v0_15a88, -8
  %v8_15a88 = inttoptr i32 %v7_15a88 to i32*
  %v9_15a88 = load i32, i32* @ip, align 4
  store i32 %v9_15a88, i32* %v8_15a88, align 4
  %v10_15a88 = add i32 %v0_15a88, -4
  %v11_15a88 = inttoptr i32 %v10_15a88 to i32*
  %v12_15a88 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15a88, i32* %v11_15a88, align 4
  store i32 %v1_15a88, i32* %r0.global-to-local, align 4
  %v0_15a8c = load i32, i32* %r2.global-to-local, align 4
  %v2_15a8c = add i32 %v0_15a8c, -16
  store i32 %v2_15a8c, i32* %r2.global-to-local, align 4
  %v6_15a90 = icmp slt i32 %v0_15a8c, 16
  br i1 %v6_15a90, label %dec_label_pc_15a94, label %dec_label_pc_15a64.dec_label_pc_15a64_crit_edge

dec_label_pc_15a64.dec_label_pc_15a64_crit_edge:  ; preds = %dec_label_pc_15a64
  %v0_15a64.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15a68.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15a64

dec_label_pc_15a94:                               ; preds = %dec_label_pc_15a64
  %v2_15a94 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15a94, i32* @r4, align 4
  %v5_15a94 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15a94, i32* @r5, align 4
  store i32 %v9_15a60, i32* @lr, align 4
  %v2_15a98 = add i32 %v0_15a8c, -4
  store i32 %v2_15a98, i32* %r2.global-to-local, align 4
  %v4_15a98 = add i32 %v0_15a8c, 2147483632
  %v5_15a98 = and i32 %v2_15a98, %v4_15a98
  %v6_15a98 = icmp slt i32 %v5_15a98, 0
  store i1 %v6_15a98, i1* %cpsr_v.global-to-local, align 1
  %v7_15a98 = icmp slt i32 %v2_15a98, 0
  store i1 %v7_15a98, i1* %cpsr_n.global-to-local, align 1
  %v8_15a98 = icmp eq i32 %v2_15a98, 0
  store i1 %v8_15a98, i1* %cpsr_z.global-to-local, align 1
  %v5_15a9c = icmp slt i32 %v2_15a8c, -12
  br i1 %v5_15a9c, label %dec_label_pc_15ab8, label %dec_label_pc_15aa0

dec_label_pc_15aa0:                               ; preds = %dec_label_pc_15a94, %dec_label_pc_15a54, %dec_label_pc_15aa0
  %v1_15aac = phi i32 [ %v5_15aac, %dec_label_pc_15aa0 ], [ %v1_15a88, %dec_label_pc_15a94 ], [ %v0_15a8830, %dec_label_pc_15a54 ]
  %v0_15aa0 = load i32, i32* %r3.global-to-local, align 4
  %v3_15aa0 = mul i32 %v0_15aa0, 256
  store i32 %v3_15aa0, i32* %ip.global-to-local, align 4
  %v0_15aa4 = load i32, i32* %r1.global-to-local, align 4
  %v1_15aa4 = add i32 %v0_15aa4, -4
  %v2_15aa4 = inttoptr i32 %v1_15aa4 to i32*
  %v3_15aa4 = load i32, i32* %v2_15aa4, align 4
  store i32 %v3_15aa4, i32* %r3.global-to-local, align 4
  store i32 %v1_15aa4, i32* %r1.global-to-local, align 4
  %v4_15aa8 = udiv i32 %v3_15aa4, 16777216
  %v5_15aa8 = or i32 %v4_15aa8, %v3_15aa0
  store i32 %v5_15aa8, i32* @ip, align 4
  %v2_15aac = add i32 %v1_15aac, -4
  %v3_15aac = inttoptr i32 %v2_15aac to i32*
  store i32 %v5_15aa8, i32* %v3_15aac, align 4
  %v4_15aac = load i32, i32* %r0.global-to-local, align 4
  %v5_15aac = add i32 %v4_15aac, -4
  store i32 %v5_15aac, i32* %r0.global-to-local, align 4
  %v0_15ab0 = load i32, i32* %r2.global-to-local, align 4
  %v2_15ab0 = add i32 %v0_15ab0, -4
  store i32 %v2_15ab0, i32* %r2.global-to-local, align 4
  %v6_15ab4 = icmp slt i32 %v0_15ab0, 4
  br i1 %v6_15ab4, label %dec_label_pc_15ab8.loopexit, label %dec_label_pc_15aa0

dec_label_pc_15ab8.loopexit:                      ; preds = %dec_label_pc_15aa0
  %v4_15ab0 = sub i32 3, %v0_15ab0
  %v5_15ab0 = and i32 %v4_15ab0, %v0_15ab0
  %v6_15ab0 = icmp slt i32 %v5_15ab0, 0
  %v7_15ab0 = icmp slt i32 %v2_15ab0, 0
  store i1 %v6_15ab0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15ab0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15ab8

dec_label_pc_15ab8:                               ; preds = %dec_label_pc_15ab8.loopexit, %dec_label_pc_15a94
  %v2_159fc62 = phi i32 [ %v5_15aac, %dec_label_pc_15ab8.loopexit ], [ %v1_15a88, %dec_label_pc_15a94 ]
  %v0_159ec58 = phi i32 [ %v2_15ab0, %dec_label_pc_15ab8.loopexit ], [ %v2_15a98, %dec_label_pc_15a94 ]
  %v0_15ab8 = load i32, i32* %r1.global-to-local, align 4
  %v1_15ab8 = add i32 %v0_15ab8, 3
  store i32 %v1_15ab8, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_15ac0:                               ; preds = %dec_label_pc_15a50
  br i1 %v5_15b30, label %dec_label_pc_15b0c, label %dec_label_pc_15ac8

dec_label_pc_15ac8:                               ; preds = %dec_label_pc_15ac0
  store i32 %v2_15b2c, i32* %r2.global-to-local, align 4
  %v3_15acc = load i32, i32* @r4, align 4
  store i32 %v3_15acc, i32* %stack_var_-12, align 4
  %v6_15acc = load i32, i32* @r5, align 4
  store i32 %v6_15acc, i32* %stack_var_-8, align 4
  %v9_15acc = load i32, i32* @lr, align 4
  br label %dec_label_pc_15ad0

dec_label_pc_15ad0:                               ; preds = %dec_label_pc_15ad0.dec_label_pc_15ad0_crit_edge, %dec_label_pc_15ac8
  %v0_15af4 = phi i32 [ %v1_15af4, %dec_label_pc_15ad0.dec_label_pc_15ad0_crit_edge ], [ %v0_15a8830, %dec_label_pc_15ac8 ]
  %v0_15ad4 = phi i32 [ %v0_15ad4.pre, %dec_label_pc_15ad0.dec_label_pc_15ad0_crit_edge ], [ %v1_15a40, %dec_label_pc_15ac8 ]
  %v0_15ad0 = phi i32 [ %v0_15ad0.pre, %dec_label_pc_15ad0.dec_label_pc_15ad0_crit_edge ], [ %v2_15a44, %dec_label_pc_15ac8 ]
  %v3_15ad0 = mul i32 %v0_15ad0, 65536
  store i32 %v3_15ad0, i32* %lr.global-to-local, align 4
  %v1_15ad4 = add i32 %v0_15ad4, -4
  %v2_15ad4 = inttoptr i32 %v1_15ad4 to i32*
  %v3_15ad4 = load i32, i32* %v2_15ad4, align 4
  store i32 %v3_15ad4, i32* %r3.global-to-local, align 4
  %v4_15ad4 = add i32 %v0_15ad4, -8
  %v5_15ad4 = inttoptr i32 %v4_15ad4 to i32*
  %v6_15ad4 = load i32, i32* %v5_15ad4, align 4
  store i32 %v6_15ad4, i32* %r4.global-to-local, align 4
  %v7_15ad4 = add i32 %v0_15ad4, -12
  %v8_15ad4 = inttoptr i32 %v7_15ad4 to i32*
  %v9_15ad4 = load i32, i32* %v8_15ad4, align 4
  store i32 %v9_15ad4, i32* %r5.global-to-local, align 4
  %v10_15ad4 = add i32 %v0_15ad4, -16
  %v11_15ad4 = inttoptr i32 %v10_15ad4 to i32*
  %v12_15ad4 = load i32, i32* %v11_15ad4, align 4
  store i32 %v10_15ad4, i32* %r1.global-to-local, align 4
  %v4_15ad8 = udiv i32 %v12_15ad4, 65536
  %v5_15ad8 = or i32 %v4_15ad8, %v3_15ad0
  store i32 %v5_15ad8, i32* %lr.global-to-local, align 4
  %v3_15adc = mul i32 %v12_15ad4, 65536
  %v4_15ae0 = udiv i32 %v9_15ad4, 65536
  %v5_15ae0 = or i32 %v3_15adc, %v4_15ae0
  store i32 %v5_15ae0, i32* @ip, align 4
  %v3_15ae4 = mul i32 %v9_15ad4, 65536
  %v4_15ae8 = udiv i32 %v6_15ad4, 65536
  %v5_15ae8 = or i32 %v3_15ae4, %v4_15ae8
  store i32 %v5_15ae8, i32* %r5.global-to-local, align 4
  %v3_15aec = mul i32 %v6_15ad4, 65536
  %v4_15af0 = udiv i32 %v3_15ad4, 65536
  %v5_15af0 = or i32 %v3_15aec, %v4_15af0
  store i32 %v5_15af0, i32* %r4.global-to-local, align 4
  %v1_15af4 = add i32 %v0_15af4, -16
  %v2_15af4 = inttoptr i32 %v1_15af4 to i32*
  store i32 %v5_15af0, i32* %v2_15af4, align 4
  %v4_15af4 = add i32 %v0_15af4, -12
  %v5_15af4 = inttoptr i32 %v4_15af4 to i32*
  %v6_15af4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15af4, i32* %v5_15af4, align 4
  %v7_15af4 = add i32 %v0_15af4, -8
  %v8_15af4 = inttoptr i32 %v7_15af4 to i32*
  %v9_15af4 = load i32, i32* @ip, align 4
  store i32 %v9_15af4, i32* %v8_15af4, align 4
  %v10_15af4 = add i32 %v0_15af4, -4
  %v11_15af4 = inttoptr i32 %v10_15af4 to i32*
  %v12_15af4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15af4, i32* %v11_15af4, align 4
  store i32 %v1_15af4, i32* %r0.global-to-local, align 4
  %v0_15af8 = load i32, i32* %r2.global-to-local, align 4
  %v2_15af8 = add i32 %v0_15af8, -16
  store i32 %v2_15af8, i32* %r2.global-to-local, align 4
  %v6_15afc = icmp slt i32 %v0_15af8, 16
  br i1 %v6_15afc, label %dec_label_pc_15b00, label %dec_label_pc_15ad0.dec_label_pc_15ad0_crit_edge

dec_label_pc_15ad0.dec_label_pc_15ad0_crit_edge:  ; preds = %dec_label_pc_15ad0
  %v0_15ad0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15ad4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15ad0

dec_label_pc_15b00:                               ; preds = %dec_label_pc_15ad0
  %v2_15b00 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15b00, i32* @r4, align 4
  %v5_15b00 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15b00, i32* @r5, align 4
  store i32 %v9_15acc, i32* @lr, align 4
  %v2_15b04 = add i32 %v0_15af8, -4
  store i32 %v2_15b04, i32* %r2.global-to-local, align 4
  %v4_15b04 = add i32 %v0_15af8, 2147483632
  %v5_15b04 = and i32 %v2_15b04, %v4_15b04
  %v6_15b04 = icmp slt i32 %v5_15b04, 0
  store i1 %v6_15b04, i1* %cpsr_v.global-to-local, align 1
  %v7_15b04 = icmp slt i32 %v2_15b04, 0
  store i1 %v7_15b04, i1* %cpsr_n.global-to-local, align 1
  %v8_15b04 = icmp eq i32 %v2_15b04, 0
  store i1 %v8_15b04, i1* %cpsr_z.global-to-local, align 1
  %v5_15b08 = icmp slt i32 %v2_15af8, -12
  br i1 %v5_15b08, label %dec_label_pc_15b24, label %dec_label_pc_15b0c

dec_label_pc_15b0c:                               ; preds = %dec_label_pc_15b00, %dec_label_pc_15ac0, %dec_label_pc_15b0c
  %v1_15b18 = phi i32 [ %v5_15b18, %dec_label_pc_15b0c ], [ %v1_15af4, %dec_label_pc_15b00 ], [ %v0_15a8830, %dec_label_pc_15ac0 ]
  %v0_15b0c = load i32, i32* %r3.global-to-local, align 4
  %v3_15b0c = mul i32 %v0_15b0c, 65536
  store i32 %v3_15b0c, i32* %ip.global-to-local, align 4
  %v0_15b10 = load i32, i32* %r1.global-to-local, align 4
  %v1_15b10 = add i32 %v0_15b10, -4
  %v2_15b10 = inttoptr i32 %v1_15b10 to i32*
  %v3_15b10 = load i32, i32* %v2_15b10, align 4
  store i32 %v3_15b10, i32* %r3.global-to-local, align 4
  store i32 %v1_15b10, i32* %r1.global-to-local, align 4
  %v4_15b14 = udiv i32 %v3_15b10, 65536
  %v5_15b14 = or i32 %v4_15b14, %v3_15b0c
  store i32 %v5_15b14, i32* @ip, align 4
  %v2_15b18 = add i32 %v1_15b18, -4
  %v3_15b18 = inttoptr i32 %v2_15b18 to i32*
  store i32 %v5_15b14, i32* %v3_15b18, align 4
  %v4_15b18 = load i32, i32* %r0.global-to-local, align 4
  %v5_15b18 = add i32 %v4_15b18, -4
  store i32 %v5_15b18, i32* %r0.global-to-local, align 4
  %v0_15b1c = load i32, i32* %r2.global-to-local, align 4
  %v2_15b1c = add i32 %v0_15b1c, -4
  store i32 %v2_15b1c, i32* %r2.global-to-local, align 4
  %v6_15b20 = icmp slt i32 %v0_15b1c, 4
  br i1 %v6_15b20, label %dec_label_pc_15b24.loopexit, label %dec_label_pc_15b0c

dec_label_pc_15b24.loopexit:                      ; preds = %dec_label_pc_15b0c
  %v4_15b1c = sub i32 3, %v0_15b1c
  %v5_15b1c = and i32 %v4_15b1c, %v0_15b1c
  %v6_15b1c = icmp slt i32 %v5_15b1c, 0
  %v7_15b1c = icmp slt i32 %v2_15b1c, 0
  store i1 %v6_15b1c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15b1c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15b24

dec_label_pc_15b24:                               ; preds = %dec_label_pc_15b24.loopexit, %dec_label_pc_15b00
  %v2_159fc63 = phi i32 [ %v5_15b18, %dec_label_pc_15b24.loopexit ], [ %v1_15af4, %dec_label_pc_15b00 ]
  %v0_159ec59 = phi i32 [ %v2_15b1c, %dec_label_pc_15b24.loopexit ], [ %v2_15b04, %dec_label_pc_15b00 ]
  %v0_15b24 = load i32, i32* %r1.global-to-local, align 4
  %v1_15b24 = add i32 %v0_15b24, 2
  store i32 %v1_15b24, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_15b2c:                               ; preds = %dec_label_pc_15a40
  br i1 %v5_15b30, label %dec_label_pc_15b78, label %dec_label_pc_15b34

dec_label_pc_15b34:                               ; preds = %dec_label_pc_15b2c
  store i32 %v2_15b2c, i32* %r2.global-to-local, align 4
  %v3_15b38 = load i32, i32* @r4, align 4
  store i32 %v3_15b38, i32* %stack_var_-12, align 4
  %v6_15b38 = load i32, i32* @r5, align 4
  store i32 %v6_15b38, i32* %stack_var_-8, align 4
  %v9_15b38 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15b3c

dec_label_pc_15b3c:                               ; preds = %dec_label_pc_15b3c.dec_label_pc_15b3c_crit_edge, %dec_label_pc_15b34
  %v0_15b60 = phi i32 [ %v1_15b60, %dec_label_pc_15b3c.dec_label_pc_15b3c_crit_edge ], [ %v0_15a8830, %dec_label_pc_15b34 ]
  %v0_15b40 = phi i32 [ %v0_15b40.pre, %dec_label_pc_15b3c.dec_label_pc_15b3c_crit_edge ], [ %v1_15a40, %dec_label_pc_15b34 ]
  %v0_15b3c = phi i32 [ %v0_15b3c.pre, %dec_label_pc_15b3c.dec_label_pc_15b3c_crit_edge ], [ %v2_15a44, %dec_label_pc_15b34 ]
  %v3_15b3c = mul i32 %v0_15b3c, 16777216
  store i32 %v3_15b3c, i32* %lr.global-to-local, align 4
  %v1_15b40 = add i32 %v0_15b40, -4
  %v2_15b40 = inttoptr i32 %v1_15b40 to i32*
  %v3_15b40 = load i32, i32* %v2_15b40, align 4
  store i32 %v3_15b40, i32* %r3.global-to-local, align 4
  %v4_15b40 = add i32 %v0_15b40, -8
  %v5_15b40 = inttoptr i32 %v4_15b40 to i32*
  %v6_15b40 = load i32, i32* %v5_15b40, align 4
  store i32 %v6_15b40, i32* %r4.global-to-local, align 4
  %v7_15b40 = add i32 %v0_15b40, -12
  %v8_15b40 = inttoptr i32 %v7_15b40 to i32*
  %v9_15b40 = load i32, i32* %v8_15b40, align 4
  store i32 %v9_15b40, i32* %r5.global-to-local, align 4
  %v10_15b40 = add i32 %v0_15b40, -16
  %v11_15b40 = inttoptr i32 %v10_15b40 to i32*
  %v12_15b40 = load i32, i32* %v11_15b40, align 4
  store i32 %v10_15b40, i32* %r1.global-to-local, align 4
  %v4_15b44 = udiv i32 %v12_15b40, 256
  %v5_15b44 = or i32 %v4_15b44, %v3_15b3c
  store i32 %v5_15b44, i32* %lr.global-to-local, align 4
  %v3_15b48 = mul i32 %v12_15b40, 16777216
  %v4_15b4c = udiv i32 %v9_15b40, 256
  %v5_15b4c = or i32 %v3_15b48, %v4_15b4c
  store i32 %v5_15b4c, i32* @ip, align 4
  %v3_15b50 = mul i32 %v9_15b40, 16777216
  %v4_15b54 = udiv i32 %v6_15b40, 256
  %v5_15b54 = or i32 %v3_15b50, %v4_15b54
  store i32 %v5_15b54, i32* %r5.global-to-local, align 4
  %v3_15b58 = mul i32 %v6_15b40, 16777216
  %v4_15b5c = udiv i32 %v3_15b40, 256
  %v5_15b5c = or i32 %v3_15b58, %v4_15b5c
  store i32 %v5_15b5c, i32* %r4.global-to-local, align 4
  %v1_15b60 = add i32 %v0_15b60, -16
  %v2_15b60 = inttoptr i32 %v1_15b60 to i32*
  store i32 %v5_15b5c, i32* %v2_15b60, align 4
  %v4_15b60 = add i32 %v0_15b60, -12
  %v5_15b60 = inttoptr i32 %v4_15b60 to i32*
  %v6_15b60 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15b60, i32* %v5_15b60, align 4
  %v7_15b60 = add i32 %v0_15b60, -8
  %v8_15b60 = inttoptr i32 %v7_15b60 to i32*
  %v9_15b60 = load i32, i32* @ip, align 4
  store i32 %v9_15b60, i32* %v8_15b60, align 4
  %v10_15b60 = add i32 %v0_15b60, -4
  %v11_15b60 = inttoptr i32 %v10_15b60 to i32*
  %v12_15b60 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15b60, i32* %v11_15b60, align 4
  store i32 %v1_15b60, i32* %r0.global-to-local, align 4
  %v0_15b64 = load i32, i32* %r2.global-to-local, align 4
  %v2_15b64 = add i32 %v0_15b64, -16
  store i32 %v2_15b64, i32* %r2.global-to-local, align 4
  %v6_15b68 = icmp slt i32 %v0_15b64, 16
  br i1 %v6_15b68, label %dec_label_pc_15b6c, label %dec_label_pc_15b3c.dec_label_pc_15b3c_crit_edge

dec_label_pc_15b3c.dec_label_pc_15b3c_crit_edge:  ; preds = %dec_label_pc_15b3c
  %v0_15b3c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_15b40.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15b3c

dec_label_pc_15b6c:                               ; preds = %dec_label_pc_15b3c
  %v2_15b6c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15b6c, i32* @r4, align 4
  %v5_15b6c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_15b6c, i32* @r5, align 4
  store i32 %v9_15b38, i32* @lr, align 4
  %v2_15b70 = add i32 %v0_15b64, -4
  store i32 %v2_15b70, i32* %r2.global-to-local, align 4
  %v4_15b70 = add i32 %v0_15b64, 2147483632
  %v5_15b70 = and i32 %v2_15b70, %v4_15b70
  %v6_15b70 = icmp slt i32 %v5_15b70, 0
  store i1 %v6_15b70, i1* %cpsr_v.global-to-local, align 1
  %v7_15b70 = icmp slt i32 %v2_15b70, 0
  store i1 %v7_15b70, i1* %cpsr_n.global-to-local, align 1
  %v8_15b70 = icmp eq i32 %v2_15b70, 0
  store i1 %v8_15b70, i1* %cpsr_z.global-to-local, align 1
  %v5_15b74 = icmp slt i32 %v2_15b64, -12
  br i1 %v5_15b74, label %dec_label_pc_15b90, label %dec_label_pc_15b78

dec_label_pc_15b78:                               ; preds = %dec_label_pc_15b6c, %dec_label_pc_15b2c, %dec_label_pc_15b78
  %v1_15b84 = phi i32 [ %v5_15b84, %dec_label_pc_15b78 ], [ %v1_15b60, %dec_label_pc_15b6c ], [ %v0_15a8830, %dec_label_pc_15b2c ]
  %v0_15b78 = load i32, i32* %r3.global-to-local, align 4
  %v3_15b78 = mul i32 %v0_15b78, 16777216
  store i32 %v3_15b78, i32* %ip.global-to-local, align 4
  %v0_15b7c = load i32, i32* %r1.global-to-local, align 4
  %v1_15b7c = add i32 %v0_15b7c, -4
  %v2_15b7c = inttoptr i32 %v1_15b7c to i32*
  %v3_15b7c = load i32, i32* %v2_15b7c, align 4
  store i32 %v3_15b7c, i32* %r3.global-to-local, align 4
  store i32 %v1_15b7c, i32* %r1.global-to-local, align 4
  %v4_15b80 = udiv i32 %v3_15b7c, 256
  %v5_15b80 = or i32 %v4_15b80, %v3_15b78
  store i32 %v5_15b80, i32* @ip, align 4
  %v2_15b84 = add i32 %v1_15b84, -4
  %v3_15b84 = inttoptr i32 %v2_15b84 to i32*
  store i32 %v5_15b80, i32* %v3_15b84, align 4
  %v4_15b84 = load i32, i32* %r0.global-to-local, align 4
  %v5_15b84 = add i32 %v4_15b84, -4
  store i32 %v5_15b84, i32* %r0.global-to-local, align 4
  %v0_15b88 = load i32, i32* %r2.global-to-local, align 4
  %v2_15b88 = add i32 %v0_15b88, -4
  store i32 %v2_15b88, i32* %r2.global-to-local, align 4
  %v6_15b8c = icmp slt i32 %v0_15b88, 4
  br i1 %v6_15b8c, label %dec_label_pc_15b90.loopexit, label %dec_label_pc_15b78

dec_label_pc_15b90.loopexit:                      ; preds = %dec_label_pc_15b78
  %v4_15b88 = sub i32 3, %v0_15b88
  %v5_15b88 = and i32 %v4_15b88, %v0_15b88
  %v6_15b88 = icmp slt i32 %v5_15b88, 0
  %v7_15b88 = icmp slt i32 %v2_15b88, 0
  store i1 %v6_15b88, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15b88, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15b90

dec_label_pc_15b90:                               ; preds = %dec_label_pc_15b90.loopexit, %dec_label_pc_15b6c
  %v2_159fc64 = phi i32 [ %v5_15b84, %dec_label_pc_15b90.loopexit ], [ %v1_15b60, %dec_label_pc_15b6c ]
  %v0_159ec60 = phi i32 [ %v2_15b88, %dec_label_pc_15b90.loopexit ], [ %v2_15b70, %dec_label_pc_15b6c ]
  %v0_15b90 = load i32, i32* %r1.global-to-local, align 4
  %v1_15b90 = add i32 %v0_15b90, 1
  store i32 %v1_15b90, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_15b84, { 0, 2, 1 }
  uselistorder i32 %v3_15b78, { 1, 0 }
  uselistorder i32 %v2_15b70, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15b60, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15b40, { 1, 0 }
  uselistorder i32 %v3_15b3c, { 1, 0 }
  uselistorder i32 %v0_15b40, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15b60, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15b18, { 0, 2, 1 }
  uselistorder i32 %v3_15b0c, { 1, 0 }
  uselistorder i32 %v2_15b04, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15af4, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15ad4, { 1, 0 }
  uselistorder i32 %v3_15ad0, { 1, 0 }
  uselistorder i32 %v0_15ad4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15af4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15aac, { 0, 2, 1 }
  uselistorder i32 %v3_15aa0, { 1, 0 }
  uselistorder i32 %v2_15a98, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15a88, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15a68, { 1, 0 }
  uselistorder i32 %v3_15a64, { 1, 0 }
  uselistorder i32 %v0_15a68, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15a88, { 3, 2, 1, 0 }
  uselistorder i1 %v5_15b30, { 2, 0, 1 }
  uselistorder i32 %v0_15a48, { 1, 0 }
  uselistorder i32 %v0_15b34, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_15a8830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_15a38, { 2, 1, 0 }
  uselistorder i32 %v0_15a38, { 2, 0, 1 }
  uselistorder i32 %v2_15a30, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_15a30, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15a30, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_15a8831, { 2, 1, 0 }
  uselistorder i32 %v11_15a0c, { 1, 0 }
  uselistorder i32 %v7_15a0c, { 1, 0 }
  uselistorder i32 %v1_159ec, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_159ec, { 1, 2, 0, 3 }
  uselistorder i32 %v2_159f0, { 1, 0 }
  uselistorder i32 %v7_159e4, { 0, 2, 1 }
  uselistorder i32 %v10_159e0, { 1, 0 }
  uselistorder i32 %v9_159d8, { 1, 0, 2 }
  uselistorder i32 %v6_159d4, { 1, 0 }
  uselistorder i32 %v2_159cc, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_159cc, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_159dc, { 0, 3, 2, 1 }
  uselistorder i32 %v7_159c0, { 0, 2, 1 }
  uselistorder i32 %v13_159bc, { 1, 0 }
  uselistorder i32 %v4_159b8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_159b8, { 2, 0, 1 }
  uselistorder i32 %v6_159c0, { 0, 3, 2, 1 }
  uselistorder i32 %v7_159b0, { 0, 2, 1 }
  uselistorder i32 %v16_159ac, { 1, 0 }
  uselistorder i32 %v4_159a8, { 1, 2, 0 }
  uselistorder i32 %v0_159b8.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_159b0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_1599c, { 0, 3, 2, 1 }
  uselistorder i32 %v10_15998, { 1, 0 }
  uselistorder i32 %v1_15994, { 1, 0 }
  uselistorder i32 %v10_15990, { 1, 0 }
  uselistorder i32 %v0_15990, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15994, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_15988, { 0, 2, 1 }
  uselistorder i32 %v2_1597c, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_1597c, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_1599448, { 1, 2, 0 }
  uselistorder i32 %v1_15974, { 2, 1, 0 }
  uselistorder i32 %v1_1596c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_15964, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_15960, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_1595c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_1595c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_15948, { 0, 2, 1 }
  uselistorder i32 %v3_1593c, { 1, 0 }
  uselistorder i32 %v2_15934, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_15924, { 1, 0, 3, 2 }
  uselistorder i32 %v8_15904, { 1, 0, 2 }
  uselistorder i32 %v5_15904, { 1, 0, 2 }
  uselistorder i32 %v2_15904, { 1, 0, 2 }
  uselistorder i32 %v3_15900, { 1, 0 }
  uselistorder i32 %v0_15904, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15924, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_158dc, { 0, 2, 1 }
  uselistorder i32 %v3_158d0, { 1, 0 }
  uselistorder i32 %v2_158c8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_158b8, { 1, 0, 3, 2 }
  uselistorder i32 %v8_15898, { 1, 0, 2 }
  uselistorder i32 %v5_15898, { 1, 0, 2 }
  uselistorder i32 %v2_15898, { 1, 0, 2 }
  uselistorder i32 %v3_15894, { 1, 0 }
  uselistorder i32 %v0_15898, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_158b8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_15870, { 0, 2, 1 }
  uselistorder i32 %v3_15864, { 1, 0 }
  uselistorder i32 %v2_1585c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_1584c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_1582c, { 1, 0, 2 }
  uselistorder i32 %v5_1582c, { 1, 0, 2 }
  uselistorder i32 %v2_1582c, { 1, 0, 2 }
  uselistorder i32 %v3_15828, { 1, 0 }
  uselistorder i32 %v0_1582c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1584c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_158f4, { 2, 0, 1 }
  uselistorder i32 %v0_158f8, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1584c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_157fc, { 1, 0 }
  uselistorder i32 %v0_157fc, { 3, 1, 0, 2 }
  uselistorder i32 %v2_157f4, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_157f4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_157f4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1584c75, { 2, 1, 0 }
  uselistorder i32 %v1_157d4, { 1, 0, 2 }
  uselistorder i32 %v1_157ac, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_157ac, { 1, 2, 0, 3 }
  uselistorder i32 %v8_15798, { 1, 0, 2 }
  uselistorder i32 %v6_15794, { 1, 0 }
  uselistorder i32 %v2_1578c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_1578c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_1579c, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_15784, { 0, 2, 1 }
  uselistorder i32 %v3_15784, { 3, 0, 1, 2 }
  uselistorder i1 %v0_15784, { 1, 0 }
  uselistorder i1 %v1_15784, { 1, 0 }
  uselistorder i32 %v3_15780, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15778, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_15764, { 1, 2, 0 }
  uselistorder i32 %v12_15758, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1574c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15750, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_15740, { 0, 2, 1 }
  uselistorder i32 %v2_15738, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_15738, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_15730, { 1, 0 }
  uselistorder i32 %v1_15728, { 2, 1, 0 }
  uselistorder i32 %v2_15720, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_15720, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_15710, { 1, 0 }
  uselistorder i32 %v1_15710, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_15710, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r3.global-to-local, { 0, 9, 1, 2, 3, 10, 4, 5, 6, 11, 7, 8, 12, 13, 35, 36, 37, 38, 39, 40, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 25, 1, 2, 3, 4, 5, 26, 6, 7, 8, 9, 10, 27, 11, 12, 13, 14, 15, 28, 65, 67, 66, 68, 69, 16, 17, 18, 19, 21, 20, 22, 23, 24, 29, 30, 60, 31, 32, 33, 34, 35, 61, 36, 37, 38, 39, 40, 62, 41, 42, 43, 44, 45, 63, 46, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 15, 2, 4, 6, 8, 5, 16, 7, 9, 11, 13, 10, 17, 12, 14, 18, 56, 19, 20, 21, 55, 58, 59, 61, 60, 62, 63, 65, 64, 66, 57, 22, 53, 23, 54, 24, 25, 26, 27, 28, 30, 29, 41, 31, 32, 35, 33, 42, 34, 36, 39, 37, 43, 38, 40, 44, 45, 46, 48, 47, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 23, 1, 2, 24, 3, 4, 25, 5, 6, 7, 8, 26, 28, 13, 29, 31, 30, 32, 33, 35, 34, 36, 27, 9, 10, 11, 12, 14, 15, 16, 18, 17, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 41, 42, 43, 44, 45, 46, 13, 14, 3, 15, 16, 17, 18, 19, 0, 20, 1, 22, 2, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 36, 37, 38, 39, 40, 41, 42, 12, 13, 3, 14, 15, 16, 0, 17, 1, 19, 2, 20, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 10, 8, 11, 12, 42, 43, 44, 45, 46, 47, 48, 13, 14, 3, 15, 16, 17, 18, 19, 0, 20, 1, 22, 2, 23, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 31, { 22, 23, 1, 0, 10, 12, 11, 13, 2, 16, 15, 27, 17, 6, 18, 24, 19, 25, 20, 26, 21, 14, 7, 3, 8, 4, 5, 9 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 23, 0, 15, 1, 16, 2, 3, 10, 8, 9, 7, 6, 5, 4, 24, 25, 26, 27, 14, 22, 21, 20, 19, 18, 17 }
  uselistorder i32 65536, { 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 59, 62, 61, 63, 64, 65, 1, 66, 0, 2, 67, 68, 69, 70, 71, 74, 72, 73, 75, 76, 77, 81, 82, 83, 84, 78, 79, 80, 85, 88, 89, 90, 86, 87, 91, 92, 93, 94, 95, 96, 3, 97, 99, 100, 98, 101, 102, 104, 105, 106, 103, 107, 108, 109, 110, 111, 136, 113, 112, 137, 114, 115, 117, 116, 119, 118, 120, 4, 121, 123, 124, 125, 122, 126, 5, 127, 131, 132, 133, 128, 129, 130, 135, 134 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 47, 46, 49, 48, 53, 50, 52, 51, 54, 56, 55, 58, 57, 60, 59, 61, 62, 70, 63, 71, 64, 72, 65, 73, 74, 66, 75, 67, 76, 68, 77, 69, 81, 78, 82, 79, 83, 80, 86, 84, 87, 85, 88, 89, 90, 95, 91, 96, 92, 97, 93, 98, 94, 99, 100, 101, 102, 103, 104, 108, 105, 109, 106, 110, 107, 111, 112, 114, 113, 120, 115, 121, 116, 122, 117, 123, 118, 124, 119, 125, 128, 126, 127, 129, 130, 135, 131, 136, 132, 137, 133, 134, 138, 145, 139, 146, 147, 140, 148, 143, 149, 141, 150, 151, 142, 144, 152, 153, 157, 154, 158, 159, 155, 156, 160, 161, 162, 164, 163, 167, 165, 168, 166, 169, 170, 171 }
  uselistorder i32* @r5, { 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 220, 221, 222, 224, 743, 744, 745, 746, 747, 0, 748, 749, 611, 612, 613, 614, 615, 616, 546, 547, 548, 549, 550, 551, 552, 553, 590, 591, 592, 593, 594, 595, 617, 618, 619, 626, 627, 628, 629, 620, 621, 622, 623, 624, 625, 60, 61, 62, 225, 226, 4, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 21, 22, 554, 555, 556, 557, 558, 559, 23, 560, 50, 561, 562, 563, 3, 2, 564, 565, 24, 25, 26, 27, 28, 51, 18, 19, 20, 54, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 52, 53, 566, 567, 568, 569, 570, 59, 571, 572, 13, 573, 574, 575, 576, 585, 586, 587, 577, 578, 579, 580, 581, 582, 583, 584, 5, 175, 176, 177, 178, 179, 180, 181, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 6, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 1, 210, 238, 239, 240, 241, 242, 15, 243, 244, 245, 246, 247, 248, 249, 250, 16, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 7, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 588, 589, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 630, 631, 610, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 11, 669, 670, 671, 672, 673, 674, 675, 14, 676, 677, 8, 678, 679, 9, 680, 681, 10, 682, 683, 684, 685, 686, 687, 17, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 12, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 6, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 13, 14, 15, 18, 19, 4, 1, 5, 2, 6, 3, 45, 46, 47, 48, 49, 0, 16, 7, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 8, 30, 31, 32, 9, 33, 34, 35, 10, 36, 37, 38, 39, 40, 41, 42, 43, 44, 11, 50, 51, 52, 12, 53 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 9, 10, 7, 8, 2, 15, 3, 1, 11, 4, 12, 5, 13, 6, 14 }
  uselistorder i32 40, { 1, 9, 2, 0, 4, 23, 24, 10, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 6, 25, 7, 26, 5, 27, 8, 28 }
  uselistorder i32 36, { 1, 8, 9, 6, 7, 0, 2, 3, 10, 4, 11, 5, 12 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32 24, { 0, 67, 68, 37, 38, 1, 69, 70, 34, 35, 13, 12, 81, 44, 82, 45, 60, 39, 14, 40, 15, 41, 16, 42, 43, 63, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 59, 65, 61, 62, 83, 84, 85, 66, 86, 2, 71, 17, 3, 72, 18, 19, 4, 73, 20, 74, 21, 5, 22, 23, 6, 24, 7, 25, 8, 26, 9, 75, 27, 76, 77, 78, 28, 29, 10, 79, 30, 80, 31, 87, 88, 89, 90, 91, 32, 92, 11, 36, 33, 93 }
  uselistorder i32* @lr, { 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 0, 135, 136, 137, 1, 138, 139, 140, 2, 141, 142, 143, 144, 145, 146, 147, 148, 22, 23, 149, 150, 67, 68, 69, 70, 86, 87, 88, 89, 24, 25, 26, 27, 28, 90, 91, 4, 5, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 71, 72, 75, 76, 3, 79, 77, 78, 73, 74, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 61, 62, 63, 64, 65, 31, 107, 6, 7, 8, 9, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 66, 108, 109, 110, 80, 81, 82, 83, 84, 85, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124 }
  uselistorder i32 16, { 27, 28, 29, 175, 30, 176, 177, 31, 178, 179, 32, 180, 181, 182, 183, 184, 185, 81, 82, 71, 72, 86, 83, 84, 85, 87, 22, 88, 89, 4, 5, 6, 7, 8, 21, 9, 10, 0, 11, 12, 45, 157, 46, 75, 33, 47, 73, 74, 158, 160, 161, 162, 23, 70, 13, 14, 20, 68, 15, 163, 16, 48, 159, 49, 78, 34, 79, 37, 36, 35, 76, 38, 77, 39, 50, 51, 52, 53, 54, 55, 80, 56, 57, 24, 90, 91, 92, 93, 58, 94, 95, 96, 97, 98, 99, 100, 59, 101, 102, 103, 41, 104, 40, 105, 106, 61, 107, 108, 109, 110, 111, 1, 60, 112, 113, 114, 63, 115, 116, 117, 118, 119, 2, 62, 120, 64, 121, 122, 123, 17, 124, 18, 125, 69, 19, 65, 66, 126, 127, 3, 43, 128, 42, 129, 130, 131, 132, 133, 134, 25, 135, 136, 137, 138, 140, 139, 141, 142, 143, 144, 145, 146, 147, 26, 148, 149, 150, 151, 152, 154, 153, 155, 156, 164, 165, 166, 167, 168, 67, 169, 44, 170, 171, 172, 173, 174 }
  uselistorder i32 20, { 114, 3, 115, 116, 0, 4, 117, 30, 31, 24, 25, 1, 32, 33, 34, 35, 5, 17, 26, 18, 27, 19, 28, 20, 29, 97, 6, 98, 7, 99, 23, 96, 36, 37, 8, 38, 39, 40, 41, 42, 43, 44, 9, 45, 46, 47, 48, 49, 50, 51, 52, 53, 10, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 11, 64, 65, 66, 67, 68, 69, 70, 71, 12, 72, 73, 74, 2, 75, 76, 77, 78, 21, 79, 80, 81, 82, 83, 84, 85, 86, 14, 87, 13, 88, 89, 90, 91, 16, 92, 15, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 22, 113 }
  uselistorder i32 27, { 1, 0, 3, 2, 4 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 40, 41, 43, 77, 93, 4, 46, 5, 16, 45, 17, 44, 2, 18, 78, 19, 79, 20, 80, 21, 81, 22, 82, 23, 83, 24, 84, 25, 85, 26, 86, 27, 87, 28, 88, 47, 29, 30, 31, 32, 33, 34, 35, 36, 37, 48, 49, 50, 6, 51, 52, 53, 54, 7, 55, 56, 57, 58, 8, 59, 9, 60, 10, 61, 62, 11, 63, 64, 12, 65, 66, 67, 68, 69, 13, 70, 71, 72, 73, 74, 14, 75, 3, 76, 0, 38, 89, 1, 39, 90, 91, 42, 15, 92 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 7, 13, 12, 11, 10, 22, 23, 24, 25, 8, 26, 0, 29, 9, 27, 28, 6, 1, 3, 2, 4, 5 }
  uselistorder i32* @ip, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 4, 5, 48, 1, 0, 2, 3 }
  uselistorder i1 false, { 42, 43, 44, 79, 14, 41, 80, 81, 38, 39, 40, 82, 13, 83, 84, 0, 47, 46, 48, 45, 1, 3, 4, 50, 2, 11, 15, 51, 5, 6, 7, 49, 85, 86, 87, 10, 8, 9, 88, 54, 89, 90, 55, 91, 20, 21, 22, 23, 56, 92, 93, 72, 94, 95, 96, 61, 97, 25, 26, 62, 98, 63, 99, 57, 58, 59, 24, 100, 60, 101, 102, 71, 103, 104, 105, 106, 107, 108, 64, 65, 109, 110, 66, 111, 67, 68, 112, 69, 113, 70, 114, 52, 53, 115, 116, 117, 118, 119, 120, 27, 28, 73, 121, 122, 74, 34, 123, 75, 17, 18, 29, 19, 30, 31, 32, 12, 33, 124, 35, 36, 76, 77, 125, 16, 78, 126, 37, 127 }
  uselistorder i32 4, { 87, 78, 79, 5, 439, 80, 440, 64, 6, 7, 81, 441, 82, 442, 443, 444, 445, 83, 446, 447, 448, 449, 84, 450, 451, 452, 453, 454, 8, 455, 456, 457, 458, 459, 85, 460, 63, 461, 462, 463, 464, 465, 466, 9, 10, 86, 467, 244, 245, 199, 200, 246, 247, 248, 468, 469, 470, 471, 472, 147, 148, 149, 65, 150, 151, 401, 403, 402, 399, 400, 358, 359, 360, 361, 404, 405, 406, 407, 389, 390, 391, 408, 409, 152, 153, 154, 155, 156, 53, 11, 12, 249, 250, 251, 252, 253, 254, 13, 14, 73, 15, 16, 74, 410, 411, 197, 17, 18, 108, 88, 412, 413, 66, 203, 109, 204, 157, 205, 362, 363, 364, 221, 222, 62, 61, 365, 206, 207, 201, 202, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 110, 224, 225, 226, 223, 75, 366, 111, 227, 89, 112, 113, 19, 367, 20, 368, 369, 21, 22, 370, 371, 55, 372, 54, 377, 114, 378, 115, 379, 116, 380, 117, 381, 118, 383, 119, 384, 385, 382, 373, 120, 374, 375, 376, 235, 158, 237, 23, 238, 239, 236, 24, 240, 56, 121, 241, 242, 321, 255, 228, 69, 68, 67, 229, 122, 25, 26, 27, 28, 29, 30, 230, 57, 231, 58, 232, 233, 234, 31, 32, 90, 123, 124, 159, 243, 0, 125, 33, 256, 257, 160, 258, 259, 260, 161, 162, 127, 261, 126, 262, 91, 263, 264, 163, 265, 266, 164, 165, 267, 92, 268, 93, 269, 270, 166, 167, 271, 168, 272, 273, 169, 170, 128, 274, 94, 275, 95, 276, 277, 278, 279, 280, 129, 281, 96, 282, 283, 284, 171, 285, 286, 287, 288, 172, 173, 2, 289, 130, 290, 97, 291, 292, 293, 174, 294, 295, 175, 176, 3, 131, 296, 98, 297, 99, 298, 299, 177, 300, 301, 302, 303, 304, 178, 179, 305, 306, 133, 307, 4, 132, 308, 100, 309, 134, 310, 311, 312, 313, 314, 180, 315, 316, 317, 181, 182, 136, 318, 135, 101, 319, 102, 320, 322, 323, 324, 325, 326, 138, 327, 139, 328, 183, 329, 330, 331, 184, 185, 140, 332, 137, 333, 103, 334, 104, 335, 186, 336, 337, 34, 187, 338, 339, 35, 188, 340, 341, 36, 189, 342, 343, 37, 190, 76, 344, 345, 38, 346, 191, 347, 348, 39, 192, 349, 350, 40, 193, 351, 352, 41, 194, 353, 354, 42, 195, 355, 356, 43, 414, 357, 386, 387, 388, 392, 393, 394, 44, 395, 396, 1, 397, 196, 398, 415, 416, 107, 417, 418, 77, 419, 141, 420, 421, 422, 423, 105, 424, 142, 425, 426, 427, 106, 428, 143, 429, 45, 46, 47, 430, 431, 72, 71, 70, 432, 48, 49, 50, 144, 433, 145, 434, 51, 52, 435, 59, 436, 60, 146, 437, 438, 198 }
  uselistorder i32* @r2, { 83, 84, 85, 86, 26, 10, 27, 29, 28, 30, 31, 32, 33, 8, 87, 2, 88, 93, 94, 97, 89, 51, 55, 56, 59, 57, 58, 52, 53, 54, 45, 15, 16, 0, 17, 18, 1, 95, 3, 96, 6, 34, 35, 36, 9, 11, 90, 91, 92, 60, 61, 62, 4, 63, 64, 65, 7, 66, 67, 68, 5, 69, 70, 71, 72, 73, 46, 12, 13, 14, 49, 50, 47, 48, 21, 22, 40, 41, 42, 19, 20, 23, 24, 25, 37, 38, 39, 43, 44, 74, 75, 76, 77, 78, 79, 80, 81, 82 }
  uselistorder label %dec_label_pc_15b78, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15b0c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15aa0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15a40, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 3, 2 }
  uselistorder label %dec_label_pc_159cc, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_15990, { 1, 0 }
  uselistorder label %dec_label_pc_1597c, { 1, 0 }
  uselistorder label %dec_label_pc_1593c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_158d0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15864, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15804, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_15778, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_15738, { 1, 0 }
}

define i32 @function_15b98(i32 %arg1) local_unnamed_addr {
dec_label_pc_15b98:
  ret i32 %arg1
}

define i32 @function_15ba0() local_unnamed_addr {
dec_label_pc_15ba0:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_15ba0 = load i32, i32* @r0, align 4
  %v2_15ba0 = icmp eq i32 %v0_15ba0, 0
  %v3_15ba4 = load i32, i32* @r4, align 4
  store i32 %v3_15ba4, i32* %stack_var_-20, align 4
  %v0_15ba8 = load i32, i32* @r1, align 4
  br i1 %v2_15ba0, label %dec_label_pc_15c80, label %dec_label_pc_15bbc.lr.ph

dec_label_pc_15bbc:                               ; preds = %dec_label_pc_15bbc.lr.ph, %dec_label_pc_15c40
  %v1_15c40 = phi i32 [ 0, %dec_label_pc_15bbc.lr.ph ], [ %v5_15c40, %dec_label_pc_15c40 ]
  %v0_15c44 = phi i32 [ 1, %dec_label_pc_15bbc.lr.ph ], [ %v1_15c44, %dec_label_pc_15c40 ]
  %v0_15bc4 = phi i32 [ %v0_15ba0, %dec_label_pc_15bbc.lr.ph ], [ %v0_15bc425, %dec_label_pc_15c40 ]
  %v1_15bc4 = inttoptr i32 %v0_15bc4 to i8*
  %v2_15bc4 = load i8, i8* %v1_15bc4, align 1
  %v3_15bc4 = zext i8 %v2_15bc4 to i32
  %v3_15bc8 = mul nuw nsw i32 %v3_15bc4, 2
  %v4_15bc8 = add i32 %v3_15bc8, %v2_15bc0.pre
  %v5_15bc8 = inttoptr i32 %v4_15bc8 to i8*
  %v6_15bc8 = load i8, i8* %v5_15bc8, align 1
  %v1_15bcc = and i8 %v6_15bc8, 8
  %v2_15bcc = icmp eq i8 %v1_15bcc, 0
  br i1 %v2_15bcc, label %dec_label_pc_15c80, label %dec_label_pc_15bd4

dec_label_pc_15bd4:                               ; preds = %dec_label_pc_15bbc
  br label %dec_label_pc_15bf4

dec_label_pc_15bdc:                               ; preds = %dec_label_pc_15bf4
  %v3_15be0 = mul i32 %v0_15c40, 10
  %v4_15be0 = add i32 %v3_15bf4, %v3_15be0
  %v1_15be4 = add i32 %v4_15be0, -48
  %v8_15bec = icmp sgt i32 %v1_15be4, 255
  br i1 %v8_15bec, label %dec_label_pc_15c80, label %dec_label_pc_15bf0

dec_label_pc_15bf0:                               ; preds = %dec_label_pc_15bdc
  %v1_15bf0 = add i32 %v0_15c30, 1
  store i32 %v1_15bf0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15bf4

dec_label_pc_15bf4:                               ; preds = %dec_label_pc_15bd4, %dec_label_pc_15bf0
  %v0_15c40 = phi i32 [ 0, %dec_label_pc_15bd4 ], [ %v1_15be4, %dec_label_pc_15bf0 ]
  %v0_15c30 = phi i32 [ %v0_15bc4, %dec_label_pc_15bd4 ], [ %v1_15bf0, %dec_label_pc_15bf0 ]
  %v1_15bf4 = inttoptr i32 %v0_15c30 to i8*
  %v2_15bf4 = load i8, i8* %v1_15bf4, align 1
  %v3_15bf4 = zext i8 %v2_15bf4 to i32
  %v2_15bf8 = mul nuw nsw i32 %v3_15bf4, 2
  %v2_15bfc = add i32 %v2_15bf8, %v2_15bc0.pre
  %v3_15c00 = inttoptr i32 %v2_15bfc to i8*
  %v4_15c00 = load i8, i8* %v3_15c00, align 1
  %v6_15c00 = zext i8 %v4_15c00 to i32
  %v1_15c0c = and i32 %v6_15c00, 8
  %v2_15c0c = icmp eq i32 %v1_15c0c, 0
  br i1 %v2_15c0c, label %dec_label_pc_15c14, label %dec_label_pc_15bdc

dec_label_pc_15c14:                               ; preds = %dec_label_pc_15bf4
  %v8_15c18 = icmp sgt i32 %v0_15c44, 3
  br i1 %v8_15c18, label %dec_label_pc_15c2c, label %dec_label_pc_15c1c

dec_label_pc_15c1c:                               ; preds = %dec_label_pc_15c14
  %v7_15c1c = icmp eq i8 %v2_15bf4, 46
  br i1 %v7_15c1c, label %dec_label_pc_15c24, label %dec_label_pc_15c80

dec_label_pc_15c24:                               ; preds = %dec_label_pc_15c1c
  %v1_15c24 = add i32 %v0_15c30, 1
  store i32 %v1_15c24, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_15c40

dec_label_pc_15c2c:                               ; preds = %dec_label_pc_15c14
  %v2_15c2c = icmp eq i8 %v2_15bf4, 0
  %v1_15c30 = add i32 %v0_15c30, 1
  store i32 %v1_15c30, i32* %r0.global-to-local, align 4
  br i1 %v2_15c2c, label %dec_label_pc_15c40, label %dec_label_pc_15c38

dec_label_pc_15c38:                               ; preds = %dec_label_pc_15c2c
  %v1_15c38 = and i32 %v6_15c00, 32
  %v2_15c38 = icmp eq i32 %v1_15c38, 0
  br i1 %v2_15c38, label %dec_label_pc_15c80, label %dec_label_pc_15c40

dec_label_pc_15c40:                               ; preds = %dec_label_pc_15c38, %dec_label_pc_15c2c, %dec_label_pc_15c24
  %v0_15bc425 = phi i32 [ %v1_15c30, %dec_label_pc_15c38 ], [ %v1_15c30, %dec_label_pc_15c2c ], [ %v1_15c24, %dec_label_pc_15c24 ]
  %v4_15c40 = mul i32 %v1_15c40, 256
  %v5_15c40 = or i32 %v0_15c40, %v4_15c40
  %v1_15c44 = add nuw nsw i32 %v0_15c44, 1
  %v7_15c4c = icmp slt i32 %v1_15c44, 5
  br i1 %v7_15c4c, label %dec_label_pc_15bbc, label %dec_label_pc_15c50

dec_label_pc_15bbc.lr.ph:                         ; preds = %dec_label_pc_15ba0
  %v2_15bc0.pre = load i32, i32* bitcast (i32** @global_var_1ea20.642 to i32*), align 4
  br label %dec_label_pc_15bbc

dec_label_pc_15c50:                               ; preds = %dec_label_pc_15c40
  %v2_15c50 = icmp eq i32 %v0_15ba8, 0
  br i1 %v2_15c50, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_15c50
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_15c50
  %v3_15c6c = call i32 @llvm.bswap.i32(i32 %v5_15c40)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_15c78 = inttoptr i32 %v0_15ba8 to i32*
  store i32 %v3_15c6c, i32* %v3_15c78, align 4
  %v2_15c7c.pre = load i32, i32* %stack_var_-20, align 4
  %v17_15c7c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_15c7c = phi i32 [ 1, %bb ], [ %v17_15c7c.pre, %bb40 ]
  %v2_15c7c = phi i32 [ %v3_15ba4, %bb ], [ %v2_15c7c.pre, %bb40 ]
  store i32 %v2_15c7c, i32* @r4, align 4
  ret i32 %v17_15c7c

dec_label_pc_15c80:                               ; preds = %dec_label_pc_15c1c, %dec_label_pc_15c38, %dec_label_pc_15bbc, %dec_label_pc_15bdc, %dec_label_pc_15ba0
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_15ba4, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_15bc0.pre, { 1, 0 }
  uselistorder i32 %v1_15c44, { 1, 0 }
  uselistorder i32 %v0_15c30, { 0, 1, 3, 2 }
  uselistorder i32 %v3_15ba4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 5, { 15, 37, 40, 16, 6, 3, 18, 38, 4, 17, 39, 1, 19, 86, 20, 87, 21, 88, 22, 89, 23, 90, 24, 91, 25, 92, 26, 93, 27, 94, 28, 95, 29, 96, 30, 97, 31, 98, 0, 41, 42, 43, 32, 33, 34, 35, 44, 45, 46, 47, 7, 48, 49, 50, 51, 8, 52, 53, 54, 55, 56, 57, 58, 59, 9, 60, 61, 62, 10, 63, 64, 65, 11, 66, 67, 68, 69, 12, 70, 71, 72, 73, 74, 75, 76, 13, 77, 78, 79, 80, 81, 82, 83, 14, 84, 5, 85, 99, 2, 100, 101, 36, 102 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 63, 64, 68, 71, 72, 73, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 454, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 95, 96, 100, 99, 98, 449, 455, 105, 101, 104, 102, 103, 106, 107, 108, 109, 451, 110, 111, 112, 113, 114, 452, 115, 116, 117, 118, 119, 120, 121, 122, 124, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 144, 146, 147, 148, 152, 158, 153, 149, 154, 159, 155, 160, 156, 150, 161, 151, 162, 163, 157, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 174, 177, 180, 181, 179, 178, 182, 185, 184, 183, 192, 189, 186, 187, 193, 190, 194, 191, 195, 188, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 212, 214, 215, 216, 227, 222, 217, 228, 223, 229, 224, 230, 225, 218, 219, 220, 231, 232, 233, 234, 226, 221, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 259, 269, 265, 261, 270, 266, 262, 271, 267, 272, 268, 263, 264, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 290, 289, 297, 292, 303, 304, 298, 293, 305, 306, 299, 294, 307, 300, 308, 301, 309, 302, 310, 295, 311, 296, 312, 313, 314, 315, 316, 317, 318, 321, 322, 325, 323, 319, 326, 324, 320, 329, 328, 327, 332, 333, 330, 334, 331, 335, 340, 338, 341, 339, 336, 337, 342, 447, 453, 343, 344, 345, 346, 350, 347, 348, 349, 352, 353, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 368, 370, 371, 373, 372, 374, 375, 376, 377, 380, 387, 381, 382, 378, 383, 384, 385, 379, 388, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 401, 403, 404, 405, 409, 416, 410, 411, 417, 412, 406, 407, 413, 408, 414, 418, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 431, 433, 434, 435, 436, 438, 437, 439, 440, 441, 442, 443, 446, 456, 448, 457, 444, 445, 450 }
  uselistorder i32 32, { 74, 56, 57, 54, 69, 70, 66, 67, 68, 4, 3, 6, 5, 8, 7, 55, 53, 75, 76, 59, 58, 10, 9, 12, 11, 14, 13, 16, 15, 65, 18, 17, 19, 20, 21, 23, 22, 24, 26, 25, 28, 27, 29, 30, 32, 31, 60, 71, 72, 33, 73, 34, 35, 36, 0, 37, 1, 2, 38, 39, 40, 41, 42, 44, 43, 61, 77, 62, 78, 63, 79, 46, 45, 48, 47, 49, 50, 51, 52, 64 }
  uselistorder i8 46, { 0, 1, 7, 2, 3, 4, 5, 6, 8, 9, 10 }
  uselistorder i32 3, { 36, 71, 72, 188, 73, 74, 75, 76, 77, 78, 91, 101, 189, 4, 164, 183, 184, 0, 79, 21, 80, 22, 185, 86, 37, 23, 25, 92, 40, 93, 2, 94, 95, 96, 97, 38, 5, 165, 166, 167, 168, 41, 169, 42, 170, 43, 171, 44, 172, 45, 173, 46, 174, 47, 175, 48, 176, 49, 177, 50, 178, 24, 179, 51, 180, 39, 181, 52, 98, 53, 99, 100, 26, 104, 54, 55, 56, 57, 58, 1, 102, 103, 59, 105, 106, 107, 108, 109, 110, 60, 111, 61, 112, 27, 113, 114, 115, 116, 117, 7, 6, 62, 28, 118, 119, 120, 121, 122, 123, 124, 9, 8, 63, 125, 29, 126, 127, 128, 129, 130, 131, 132, 133, 11, 10, 64, 134, 30, 135, 136, 137, 138, 139, 13, 12, 65, 140, 31, 141, 142, 143, 144, 66, 145, 15, 14, 33, 146, 32, 147, 148, 149, 150, 151, 152, 17, 16, 67, 153, 34, 154, 155, 156, 157, 158, 159, 160, 19, 18, 68, 161, 35, 162, 20, 163, 3, 182, 186, 81, 87, 82, 88, 83, 89, 84, 90, 69, 187, 70, 85 }
  uselistorder i32 8, { 124, 163, 29, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 30, 180, 71, 72, 73, 74, 78, 75, 76, 77, 181, 149, 148, 146, 147, 125, 126, 127, 150, 151, 152, 140, 141, 142, 6, 33, 34, 31, 32, 17, 18, 26, 27, 35, 182, 79, 80, 81, 82, 7, 8, 62, 21, 9, 10, 16, 11, 51, 36, 52, 37, 53, 38, 12, 13, 14, 63, 54, 67, 28, 128, 129, 130, 131, 133, 55, 134, 135, 132, 68, 69, 56, 70, 15, 83, 39, 84, 85, 86, 87, 88, 89, 90, 91, 92, 3, 93, 94, 95, 4, 96, 97, 98, 99, 100, 101, 102, 5, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 40, 114, 41, 115, 42, 116, 43, 117, 44, 118, 45, 119, 46, 120, 47, 121, 48, 122, 57, 123, 0, 1, 136, 137, 138, 139, 60, 143, 144, 58, 145, 2, 19, 22, 23, 153, 20, 24, 25, 154, 59, 64, 65, 155, 156, 158, 157, 159, 160, 49, 161, 61, 66, 50, 162 }
  uselistorder i32 255, { 2, 16, 3, 18, 4, 19, 5, 20, 0, 1, 8, 21, 9, 22, 6, 23, 7, 24, 12, 25, 13, 26, 10, 27, 11, 28, 15, 17, 14, 29 }
  uselistorder i32 10, { 14, 48, 49, 0, 4, 5, 35, 36, 84, 1, 2, 15, 44, 10, 37, 43, 16, 42, 8, 73, 74, 38, 17, 75, 39, 76, 18, 77, 19, 78, 20, 79, 21, 80, 22, 81, 82, 45, 23, 6, 24, 25, 26, 27, 46, 28, 47, 11, 50, 51, 3, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 29, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 9, 72, 12, 85, 83, 86, 7, 33, 40, 87, 31, 88, 34, 41, 13, 89, 30, 90, 32 }
  uselistorder i8 0, { 5, 0, 1, 29, 30, 2, 10, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 6, 42, 43, 44, 45, 46, 47, 3, 12, 11, 13, 50, 52, 49, 20, 51, 21, 53, 54, 48, 4, 55, 56, 57, 58, 59, 24, 23, 60, 61, 64, 25, 62, 63, 22, 65, 66, 67, 68, 69, 14, 7, 15, 70, 16, 17, 27, 71, 72, 73, 75, 76, 9, 79, 19, 85, 80, 81, 77, 78, 18, 26, 82, 83, 84, 8, 86, 87, 74, 28, 88, 89, 90, 91, 92, 93, 94 }
  uselistorder i32 2, { 4, 151, 285, 286, 59, 287, 288, 49, 289, 48, 290, 47, 157, 77, 78, 270, 79, 271, 80, 272, 5, 152, 291, 54, 81, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 154, 15, 16, 17, 18, 19, 83, 84, 82, 50, 51, 65, 172, 66, 87, 159, 166, 67, 158, 86, 160, 68, 161, 69, 162, 70, 163, 71, 164, 72, 165, 73, 171, 167, 168, 169, 170, 60, 88, 252, 20, 21, 253, 255, 256, 89, 258, 55, 155, 90, 260, 91, 261, 92, 262, 93, 263, 94, 264, 95, 265, 96, 266, 267, 85, 268, 22, 97, 254, 178, 179, 23, 98, 99, 100, 180, 181, 101, 240, 153, 156, 186, 103, 173, 106, 174, 105, 175, 102, 107, 176, 24, 25, 26, 108, 104, 109, 110, 111, 177, 61, 112, 113, 114, 62, 116, 117, 115, 118, 182, 52, 58, 183, 184, 185, 257, 259, 187, 188, 189, 190, 191, 192, 193, 120, 194, 119, 195, 196, 197, 198, 199, 122, 121, 200, 201, 202, 203, 204, 205, 206, 124, 207, 123, 208, 209, 125, 126, 74, 127, 210, 211, 212, 213, 214, 215, 216, 1, 27, 28, 29, 30, 31, 32, 128, 217, 75, 218, 219, 220, 221, 222, 2, 33, 34, 35, 36, 37, 38, 130, 129, 223, 224, 39, 225, 226, 56, 227, 132, 228, 3, 40, 41, 42, 43, 44, 133, 229, 131, 230, 231, 232, 233, 234, 235, 236, 237, 135, 238, 134, 239, 241, 242, 243, 137, 244, 138, 245, 246, 247, 248, 139, 249, 136, 250, 63, 251, 140, 64, 269, 53, 141, 273, 274, 76, 275, 148, 276, 142, 277, 143, 144, 278, 145, 279, 146, 280, 147, 281, 57, 282, 45, 46, 283, 149, 284, 150 }
  uselistorder i32* @r1, { 40, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 1, 107, 108, 13, 14, 16, 15, 4, 6, 109, 0, 110, 47, 48, 11, 112, 49, 54, 55, 58, 56, 57, 50, 51, 52, 53, 42, 59, 111, 10, 5, 41, 17, 60, 61, 3, 62, 63, 64, 43, 7, 8, 9, 46, 37, 20, 12, 18, 19, 44, 45, 2, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89 }
  uselistorder label %dec_label_pc_15c80, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_15bf4, { 1, 0 }
}

define i32 @function_15c8c(i32 %arg1) local_unnamed_addr {
dec_label_pc_15c8c:
  %v1_15c8c = add i32 %arg1, 28
  %v2_15c8c = inttoptr i32 %v1_15c8c to i32*
  %v3_15c8c = load i32, i32* %v2_15c8c, align 4
  %v1_15c94 = add i32 %arg1, 44
  %v2_15c94 = inttoptr i32 %v1_15c94 to i32*
  %v3_15c94 = load i32, i32* %v2_15c94, align 4
  store i32 %v3_15c8c, i32* @global_var_1ed60.695, align 4
  store i32 %v3_15c94, i32* @global_var_1ed64.697, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 17, 0, 6, 7, 4, 5, 12, 13, 8, 9, 10, 11, 2, 14, 1, 15, 3, 16 }
  uselistorder i32 28, { 28, 0, 13, 14, 4, 5, 22, 1, 6, 7, 8, 9, 10, 11, 12, 2, 3, 24, 23, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27 }
}

define i32 @function_15cb0(i32* %arg1) local_unnamed_addr {
dec_label_pc_15cb0:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_15cb8 = call i32 @brk(i32* %arg1)
  %v3_15cbc = icmp ult i32 %v2_15cb8, %tmp
  store i32 %v2_15cb8, i32* @global_var_1eaf8.692, align 4
  br i1 %v3_15cbc, label %dec_label_pc_15cd0, label %dec_label_pc_15ce0

dec_label_pc_15cd0:                               ; preds = %dec_label_pc_15cb0
  %v0_15cd0 = call i32 @function_13a84()
  %v2_15cd8 = inttoptr i32 %v0_15cd0 to i32*
  store i32 12, i32* %v2_15cd8, align 4
  br label %dec_label_pc_15ce0

dec_label_pc_15ce0:                               ; preds = %dec_label_pc_15cb0, %dec_label_pc_15cd0
  %v0_15ce0 = phi i32 [ 0, %dec_label_pc_15cb0 ], [ -1, %dec_label_pc_15cd0 ]
  ret i32 %v0_15ce0

; uselistorder directives
  uselistorder i32 12, { 18, 12, 124, 125, 126, 128, 129, 130, 131, 13, 127, 132, 133, 134, 135, 136, 137, 138, 49, 50, 31, 32, 51, 19, 20, 109, 110, 111, 0, 87, 112, 9, 113, 10, 88, 4, 108, 21, 22, 7, 52, 53, 23, 54, 55, 14, 15, 34, 35, 89, 90, 91, 36, 33, 37, 38, 39, 40, 41, 42, 44, 45, 43, 92, 93, 94, 11, 95, 96, 98, 99, 100, 24, 102, 5, 103, 97, 8, 48, 46, 47, 6, 25, 26, 27, 28, 101, 56, 16, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 29, 68, 69, 70, 71, 72, 30, 73, 74, 75, 76, 77, 78, 17, 79, 80, 81, 82, 83, 84, 85, 86, 1, 2, 104, 105, 106, 107, 3, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123 }
  uselistorder i32 ()* @function_13a84, { 28, 37, 27, 47, 12, 11, 10, 9, 46, 45, 44, 8, 62, 26, 25, 51, 50, 23, 24, 61, 60, 22, 21, 36, 20, 35, 19, 49, 18, 34, 17, 38, 59, 43, 42, 41, 58, 48, 16, 5, 4, 57, 15, 40, 39, 56, 3, 7, 55, 30, 6, 29, 14, 54, 2, 1, 33, 32, 53, 52, 31, 0, 13 }
  uselistorder i32* @global_var_1eaf8.692, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_15ce0, { 1, 0 }
}

define i32 @function_15cec(i32 %arg1) local_unnamed_addr {
dec_label_pc_15cec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_15cf0 = load i32, i32* @global_var_1e8ac.655, align 4
  %v7_15cf4 = icmp eq i32 %v3_15cf0, -1
  %v3_15cf8 = load i32, i32* @r4, align 4
  store i32 %v3_15cf8, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1e8ac.655 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_15cf4, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_15cec
  store i32 %v3_15cf8, i32* %r4.global-to-local, align 4
  ret i32 %arg1

.preheader:                                       ; preds = %dec_label_pc_15cec, %.preheader
  %v0_15d08 = phi i32 [ %v3_15d0c, %.preheader ], [ %v3_15cf0, %dec_label_pc_15cec ]
  call void @__pseudo_branch(i32 %v0_15d08)
  %v0_15d0c = load i32, i32* %r4.global-to-local, align 4
  %v1_15d0c = add i32 %v0_15d0c, -4
  %v2_15d0c = inttoptr i32 %v1_15d0c to i32*
  %v3_15d0c = load i32, i32* %v2_15d0c, align 4
  store i32 %v1_15d0c, i32* %r4.global-to-local, align 4
  %v3_15d10 = icmp eq i32 %v3_15d0c, -1
  br i1 %v3_15d10, label %dec_label_pc_15d18, label %.preheader

dec_label_pc_15d18:                               ; preds = %.preheader
  %v2_15d18 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_15d18, i32* %r4.global-to-local, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v3_15d0c, { 1, 0 }
  uselistorder i32 %v3_15cf0, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 54, 16, 55, 56, 57, 3, 17, 18, 19, 58, 59, 60, 4, 20, 21, 22, 61, 62, 63, 5, 23, 24, 64, 15, 14, 65, 66, 67, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 68, 9, 32, 42, 43, 49, 44, 33, 34, 45, 46, 47, 48, 50, 8, 7, 41, 6, 35, 36, 37, 51, 38, 39, 52, 53, 40 }
  uselistorder i32 -1, { 170, 0, 95, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 171, 96, 315, 97, 325, 98, 326, 305, 99, 364, 100, 365, 101, 366, 102, 367, 149, 91, 306, 307, 103, 308, 309, 104, 368, 1, 172, 2, 105, 327, 328, 173, 174, 301, 302, 151, 175, 152, 176, 3, 4, 90, 82, 83, 177, 178, 179, 88, 289, 180, 290, 5, 6, 106, 329, 107, 330, 108, 316, 109, 331, 110, 317, 111, 332, 112, 303, 113, 333, 114, 318, 115, 334, 116, 314, 117, 291, 118, 169, 119, 181, 120, 292, 121, 304, 122, 335, 123, 371, 372, 124, 293, 125, 336, 126, 310, 127, 311, 128, 294, 129, 373, 130, 369, 131, 295, 132, 323, 133, 370, 134, 324, 135, 337, 136, 296, 137, 374, 92, 375, 182, 183, 184, 185, 186, 187, 188, 189, 7, 8, 9, 10, 11, 138, 139, 12, 190, 191, 17, 192, 319, 16, 193, 94, 93, 320, 13, 194, 283, 141, 284, 286, 287, 195, 196, 197, 140, 285, 18, 198, 84, 19, 199, 200, 20, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 288, 14, 221, 15, 222, 223, 21, 224, 225, 142, 321, 226, 22, 227, 322, 85, 23, 24, 228, 89, 25, 26, 27, 28, 29, 143, 229, 312, 230, 313, 155, 297, 30, 153, 298, 31, 32, 154, 299, 33, 34, 156, 300, 35, 36, 37, 38, 39, 231, 40, 41, 42, 232, 233, 234, 235, 43, 145, 146, 147, 148, 44, 45, 46, 236, 47, 48, 49, 50, 86, 51, 52, 53, 54, 55, 56, 57, 237, 58, 144, 59, 60, 61, 238, 62, 63, 64, 65, 239, 66, 67, 68, 240, 69, 70, 71, 72, 73, 74, 75, 241, 76, 77, 78, 242, 79, 80, 243, 244, 245, 246, 81, 87, 338, 339, 162, 340, 160, 341, 161, 342, 158, 343, 247, 248, 249, 250, 251, 163, 344, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 157, 345, 164, 346, 278, 279, 280, 281, 282, 159, 347, 150, 165, 348, 166, 167, 168 }
  uselistorder i32* @global_var_1e8ac.655, { 1, 0 }
  uselistorder i32 1, { 597, 87, 372, 432, 967, 968, 969, 970, 971, 396, 598, 300, 1134, 378, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 601, 600, 599, 323, 325, 329, 333, 328, 327, 324, 326, 330, 332, 331, 602, 213, 212, 208, 210, 209, 211, 214, 207, 783, 218, 215, 217, 216, 603, 200, 604, 98, 99, 605, 123, 289, 606, 301, 607, 134, 608, 322, 609, 302, 861, 862, 610, 340, 336, 341, 337, 338, 342, 339, 863, 864, 865, 481, 75, 76, 72, 74, 73, 611, 346, 612, 71, 0, 616, 615, 614, 613, 31, 30, 482, 617, 261, 262, 397, 483, 618, 19, 619, 1028, 624, 623, 622, 621, 620, 119, 120, 121, 122, 484, 625, 373, 850, 367, 851, 398, 626, 126, 132, 125, 129, 128, 131, 133, 127, 130, 1147, 399, 629, 628, 627, 306, 305, 630, 25, 26, 24, 27, 229, 230, 231, 232, 631, 91, 92, 90, 89, 88, 632, 633, 344, 343, 634, 400, 1029, 635, 63, 64, 485, 486, 371, 639, 638, 637, 636, 9, 379, 640, 290, 641, 124, 267, 642, 28, 643, 292, 644, 109, 645, 100, 646, 177, 647, 178, 648, 201, 649, 241, 650, 242, 651, 784, 785, 786, 787, 788, 789, 790, 1148, 259, 260, 256, 257, 258, 652, 487, 488, 653, 204, 203, 205, 202, 442, 866, 654, 13, 443, 656, 655, 11, 10, 657, 206, 658, 233, 659, 149, 660, 243, 244, 661, 108, 662, 70, 663, 286, 664, 287, 665, 107, 116, 666, 29, 291, 667, 303, 668, 347, 669, 345, 670, 288, 671, 227, 304, 77, 444, 1030, 1031, 445, 1032, 1033, 351, 1034, 1035, 1036, 1037, 368, 1038, 674, 673, 672, 150, 158, 152, 153, 155, 154, 151, 156, 157, 1, 1039, 1040, 1041, 1042, 118, 117, 2, 1043, 1044, 1045, 1046, 380, 1047, 1048, 381, 1049, 676, 675, 335, 334, 867, 868, 869, 489, 677, 266, 265, 264, 263, 1050, 401, 402, 3, 480, 1051, 678, 169, 167, 170, 171, 168, 1052, 1054, 1053, 490, 1055, 102, 101, 1015, 255, 1056, 1057, 1058, 114, 115, 1059, 679, 95, 96, 97, 94, 1060, 1061, 680, 175, 174, 173, 172, 176, 1062, 1063, 681, 68, 67, 66, 65, 69, 491, 793, 492, 794, 446, 795, 796, 973, 797, 811, 500, 791, 792, 501, 798, 404, 502, 503, 498, 799, 800, 499, 801, 802, 497, 803, 804, 496, 805, 806, 495, 807, 808, 494, 809, 810, 493, 812, 813, 974, 504, 975, 505, 976, 978, 979, 977, 980, 506, 981, 782, 403, 984, 982, 507, 983, 986, 508, 987, 988, 993, 434, 994, 995, 509, 996, 510, 997, 511, 998, 512, 999, 513, 1000, 514, 1001, 515, 1002, 516, 1003, 517, 1004, 518, 1005, 519, 1006, 520, 1007, 405, 1013, 1014, 369, 521, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 682, 307, 311, 308, 312, 316, 314, 317, 310, 309, 315, 313, 1008, 1009, 522, 1010, 1011, 523, 1012, 696, 226, 225, 220, 224, 223, 222, 219, 221, 985, 524, 698, 697, 319, 321, 318, 320, 820, 821, 822, 823, 824, 825, 826, 352, 362, 827, 828, 406, 353, 829, 830, 831, 832, 354, 361, 833, 834, 407, 355, 835, 525, 837, 838, 526, 839, 836, 840, 439, 841, 382, 844, 845, 842, 843, 357, 356, 358, 846, 527, 847, 705, 704, 592, 703, 702, 701, 591, 700, 699, 53, 54, 52, 58, 55, 61, 57, 62, 60, 56, 59, 706, 93, 957, 383, 956, 433, 707, 82, 83, 81, 80, 79, 85, 86, 78, 84, 878, 879, 880, 528, 709, 708, 140, 142, 147, 137, 139, 136, 141, 135, 148, 138, 143, 144, 146, 145, 710, 451, 814, 815, 447, 816, 529, 531, 530, 532, 817, 818, 533, 534, 535, 536, 537, 538, 539, 450, 449, 448, 819, 540, 723, 722, 721, 720, 719, 718, 717, 716, 715, 714, 593, 713, 712, 711, 110, 111, 112, 113, 848, 724, 543, 542, 541, 849, 726, 725, 544, 852, 417, 853, 416, 854, 415, 855, 414, 856, 857, 545, 423, 408, 858, 546, 859, 547, 860, 370, 548, 740, 739, 738, 737, 736, 735, 734, 733, 732, 731, 730, 729, 728, 727, 103, 105, 104, 106, 875, 5, 870, 549, 871, 4, 872, 435, 873, 374, 375, 874, 876, 436, 877, 744, 743, 742, 594, 595, 741, 989, 452, 990, 453, 991, 6, 992, 7, 8, 881, 882, 883, 884, 885, 886, 376, 377, 887, 888, 889, 890, 891, 892, 893, 894, 550, 895, 896, 551, 897, 900, 898, 899, 747, 746, 745, 179, 182, 181, 190, 187, 185, 186, 189, 188, 184, 183, 180, 901, 902, 903, 904, 905, 552, 384, 553, 749, 748, 198, 195, 191, 192, 196, 197, 199, 193, 194, 906, 907, 908, 554, 909, 910, 911, 912, 913, 914, 555, 915, 385, 556, 455, 454, 557, 916, 750, 160, 163, 164, 166, 165, 162, 161, 159, 917, 440, 360, 918, 558, 920, 919, 359, 559, 457, 456, 596, 751, 285, 284, 921, 922, 923, 924, 925, 926, 560, 927, 386, 561, 562, 928, 458, 929, 752, 44, 42, 43, 48, 49, 50, 51, 46, 47, 45, 930, 931, 418, 932, 933, 934, 563, 935, 387, 564, 460, 459, 565, 936, 566, 937, 753, 17, 16, 18, 15, 14, 938, 939, 419, 940, 941, 942, 567, 943, 388, 568, 465, 464, 569, 944, 461, 945, 462, 946, 463, 947, 758, 757, 756, 755, 754, 296, 297, 299, 298, 293, 295, 294, 948, 949, 950, 420, 951, 952, 953, 389, 570, 468, 467, 571, 954, 466, 955, 759, 34, 33, 36, 37, 39, 38, 32, 35, 958, 959, 960, 421, 961, 962, 963, 390, 572, 471, 470, 573, 964, 469, 965, 764, 763, 762, 761, 760, 252, 251, 247, 248, 249, 250, 254, 245, 253, 246, 966, 472, 574, 765, 21, 22, 23, 20, 1064, 12, 972, 234, 766, 40, 41, 1016, 575, 1019, 576, 1020, 1021, 1017, 1018, 1022, 1023, 1024, 1025, 391, 1026, 392, 235, 238, 240, 236, 237, 239, 1027, 577, 1065, 228, 1066, 363, 581, 424, 425, 1067, 364, 579, 426, 427, 580, 1068, 409, 1069, 422, 1070, 365, 428, 584, 429, 438, 366, 582, 430, 431, 583, 1071, 410, 1072, 1073, 479, 1074, 1075, 1076, 474, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 475, 1089, 1090, 1091, 1092, 1093, 394, 1094, 585, 1095, 586, 587, 1096, 1097, 1098, 1099, 1100, 476, 1101, 1102, 1103, 411, 1104, 477, 1105, 1106, 1107, 412, 1108, 478, 1109, 1110, 1111, 413, 1112, 1113, 1114, 1115, 395, 1116, 1117, 1118, 393, 578, 473, 1119, 1121, 1123, 1122, 1120, 588, 1124, 1125, 1126, 589, 1127, 1128, 1129, 1130, 781, 441, 1131, 1132, 437, 590, 1133, 778, 777, 776, 775, 774, 773, 772, 771, 770, 769, 768, 767, 270, 269, 275, 268, 272, 283, 276, 277, 282, 273, 274, 271, 278, 280, 279, 281, 779, 780, 350, 349, 348 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_15d20() local_unnamed_addr {
dec_label_pc_15d20:
  %v5_15d24 = load i32, i32* @r0, align 4
  ret i32 %v5_15d24

; uselistorder directives
  uselistorder i32* @r0, { 3, 91, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 54, 55, 57, 56, 23, 197, 198, 29, 30, 31, 32, 15, 2, 17, 18, 113, 114, 24, 199, 200, 44, 202, 7, 10, 116, 11, 115, 93, 28, 94, 20, 106, 117, 201, 37, 6, 58, 59, 60, 61, 26, 14, 62, 63, 64, 65, 13, 203, 9, 16, 118, 12, 119, 19, 120, 121, 8, 122, 123, 124, 125, 0, 33, 95, 96, 34, 35, 36, 97, 99, 100, 101, 102, 105, 98, 42, 43, 79, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 25, 51, 52, 53, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 27, 78, 103, 104, 1, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 107, 108, 109, 110, 111, 126, 112, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 5, 4, 21, 22 }
}

define i32 @function_15d28() local_unnamed_addr {
entry:
  %v3_15d2c = load i32, i32* @r4, align 4
  %v0_15d34 = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_15d2c)
  ret i32 %v0_15d34

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 12, 13, 9, 10, 11, 14, 4, 5, 6, 2, 3, 1, 8 }
  uselistorder i32 0, { 145, 0, 962, 963, 964, 965, 147, 146, 966, 1436, 1437, 1438, 1439, 1440, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1441, 1442, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 38, 1461, 1462, 1463, 1464, 1465, 39, 1466, 1467, 1468, 40, 1469, 1470, 1471, 41, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1487, 1488, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 42, 1507, 1508, 1509, 1510, 1511, 43, 1512, 1513, 1514, 1515, 1516, 44, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 780, 781, 322, 782, 323, 970, 1066, 1067, 1068, 1069, 1070, 783, 784, 1530, 1531, 1532, 1533, 324, 785, 1, 786, 787, 788, 1534, 1535, 1536, 148, 1537, 98, 1538, 96, 97, 1539, 1540, 1541, 325, 1545, 326, 1558, 1560, 630, 256, 1561, 327, 1559, 328, 329, 2, 1542, 1543, 149, 1071, 278, 1072, 332, 280, 279, 1073, 1074, 1075, 1076, 331, 1078, 1079, 330, 1080, 1544, 758, 759, 760, 761, 762, 763, 151, 115, 764, 99, 150, 152, 334, 1546, 335, 281, 1547, 1550, 1552, 1553, 333, 1083, 1085, 1086, 74, 257, 1087, 1084, 1081, 1082, 3, 971, 974, 972, 973, 258, 4, 1090, 1088, 1089, 259, 153, 975, 976, 977, 978, 1042, 1043, 336, 5, 1044, 6, 1097, 1098, 154, 1091, 1092, 1093, 1094, 1095, 1096, 7, 8, 1077, 713, 714, 715, 337, 9, 338, 1099, 1100, 624, 979, 625, 1101, 980, 1102, 765, 1103, 981, 1104, 876, 716, 967, 1562, 1563, 88, 789, 339, 790, 791, 792, 793, 340, 794, 795, 796, 797, 798, 799, 800, 717, 766, 1105, 1551, 718, 1106, 801, 819, 719, 626, 1554, 102, 1555, 1548, 720, 1058, 1549, 1059, 1107, 721, 1556, 1557, 10, 1108, 116, 1109, 1110, 253, 252, 631, 103, 104, 105, 106, 656, 632, 76, 75, 117, 1111, 1112, 1113, 1114, 1116, 1115, 11, 1117, 1118, 255, 254, 633, 107, 108, 109, 110, 657, 634, 78, 77, 73, 85, 1119, 658, 1120, 1121, 1122, 111, 1123, 1124, 1125, 1126, 1127, 155, 635, 659, 636, 637, 1128, 660, 125, 156, 1129, 1130, 112, 1131, 1132, 12, 661, 260, 14, 13, 157, 1133, 158, 662, 15, 261, 159, 160, 313, 79, 161, 341, 982, 100, 802, 803, 1135, 1134, 1136, 1137, 45, 162, 1138, 165, 164, 163, 314, 315, 316, 167, 166, 168, 342, 1139, 1140, 169, 1045, 1046, 126, 170, 1141, 171, 722, 172, 1142, 1143, 173, 1144, 1145, 688, 638, 983, 118, 984, 985, 689, 690, 686, 663, 349, 687, 709, 710, 691, 692, 174, 175, 693, 694, 695, 696, 664, 347, 697, 698, 665, 348, 699, 700, 666, 346, 701, 702, 667, 345, 703, 704, 668, 344, 705, 712, 669, 343, 706, 711, 707, 93, 80, 127, 128, 708, 629, 986, 350, 987, 263, 988, 351, 989, 992, 993, 177, 262, 990, 991, 352, 353, 994, 995, 282, 996, 997, 670, 89, 354, 999, 1000, 1001, 1002, 1003, 1004, 1005, 274, 273, 1006, 355, 1007, 113, 1008, 1009, 129, 1010, 655, 1011, 1012, 1013, 654, 1014, 1015, 1016, 176, 356, 357, 1017, 1020, 1021, 1022, 1023, 1024, 178, 1018, 179, 1019, 16, 180, 998, 738, 739, 740, 95, 81, 741, 94, 82, 742, 743, 744, 745, 746, 747, 358, 748, 749, 751, 181, 750, 90, 752, 18, 17, 753, 820, 821, 824, 825, 822, 823, 826, 827, 723, 360, 725, 182, 726, 727, 728, 729, 730, 731, 732, 733, 734, 283, 361, 735, 91, 362, 736, 724, 365, 366, 19, 737, 71, 72, 367, 368, 363, 359, 364, 754, 755, 756, 757, 369, 317, 186, 185, 671, 318, 188, 187, 672, 319, 190, 189, 673, 320, 192, 191, 674, 675, 321, 184, 183, 265, 272, 266, 267, 268, 370, 767, 193, 194, 776, 768, 769, 770, 771, 772, 773, 774, 775, 264, 777, 778, 83, 779, 195, 196, 371, 101, 804, 805, 806, 807, 271, 808, 809, 810, 270, 811, 812, 813, 814, 121, 815, 817, 816, 119, 120, 197, 269, 373, 374, 372, 818, 286, 284, 285, 122, 198, 86, 199, 828, 133, 132, 130, 131, 829, 830, 87, 831, 832, 833, 834, 835, 200, 836, 837, 375, 838, 839, 840, 841, 204, 201, 202, 203, 842, 843, 844, 845, 376, 846, 847, 289, 848, 288, 849, 287, 850, 377, 851, 852, 853, 136, 134, 135, 20, 854, 855, 856, 857, 205, 858, 859, 291, 290, 860, 378, 861, 862, 863, 864, 865, 140, 137, 138, 139, 21, 866, 867, 868, 206, 869, 207, 870, 871, 294, 872, 293, 873, 292, 874, 379, 875, 212, 381, 210, 211, 208, 209, 877, 214, 213, 878, 215, 380, 880, 881, 144, 141, 142, 143, 22, 879, 882, 883, 884, 885, 886, 887, 23, 24, 25, 26, 27, 888, 889, 382, 296, 890, 383, 891, 384, 892, 385, 893, 386, 894, 387, 895, 388, 896, 295, 897, 216, 217, 218, 899, 900, 898, 902, 903, 901, 28, 29, 30, 31, 32, 904, 219, 905, 906, 298, 907, 389, 908, 390, 909, 391, 910, 392, 911, 393, 912, 394, 913, 297, 914, 395, 915, 221, 220, 222, 917, 918, 916, 919, 920, 84, 922, 923, 924, 925, 396, 926, 33, 34, 35, 36, 37, 921, 223, 123, 927, 928, 303, 929, 302, 930, 301, 931, 300, 932, 299, 933, 397, 934, 398, 935, 224, 227, 226, 225, 938, 939, 937, 936, 399, 941, 940, 942, 228, 943, 944, 306, 945, 305, 946, 304, 947, 400, 948, 229, 232, 231, 230, 951, 952, 950, 949, 401, 954, 953, 955, 956, 233, 309, 957, 308, 958, 307, 959, 402, 960, 275, 961, 1146, 234, 1147, 968, 235, 969, 1025, 1026, 1027, 1028, 1029, 1030, 236, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 237, 238, 1039, 1040, 1041, 1047, 239, 1048, 1049, 1050, 240, 403, 1051, 1052, 46, 1053, 1054, 1055, 1056, 1057, 404, 1060, 241, 1148, 1061, 1062, 1063, 1064, 1149, 1150, 1065, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 405, 1164, 639, 640, 641, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 47, 1206, 1207, 1208, 242, 243, 1209, 406, 1210, 1211, 1212, 1213, 642, 676, 1214, 1215, 1216, 48, 1217, 1218, 1219, 1220, 49, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 50, 1228, 1229, 248, 1230, 1231, 1232, 1233, 1234, 1235, 51, 1236, 1237, 1238, 52, 1239, 1240, 1241, 53, 1242, 1243, 1244, 1245, 409, 1259, 1260, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 643, 677, 1255, 1256, 1257, 1258, 644, 678, 1261, 1262, 1263, 54, 1264, 1265, 410, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 645, 679, 1274, 1275, 1276, 55, 1277, 1278, 1279, 1280, 56, 1281, 646, 1282, 1283, 1286, 1287, 647, 244, 1284, 1285, 245, 246, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 648, 680, 1299, 1300, 1301, 57, 1302, 1303, 1304, 1305, 1306, 1307, 58, 1308, 124, 1309, 1310, 1311, 1312, 649, 681, 1313, 1314, 1315, 59, 1316, 247, 1317, 1318, 1319, 60, 1320, 1321, 1322, 1323, 1324, 650, 682, 1325, 1326, 1327, 61, 1328, 1329, 1330, 62, 407, 408, 1331, 1332, 1333, 1334, 1335, 651, 683, 1336, 1337, 1338, 63, 1339, 1340, 1341, 64, 1342, 1343, 1344, 65, 1345, 1346, 1347, 66, 1348, 1349, 1350, 1351, 67, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1364, 1365, 652, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 276, 1377, 1380, 1381, 1384, 1385, 1386, 68, 1382, 1383, 1378, 1379, 1387, 1388, 250, 249, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 69, 251, 1399, 1400, 1401, 70, 1402, 1403, 1404, 1405, 1407, 92, 411, 1408, 1406, 1362, 1363, 114, 627, 628, 1409, 1410, 1411, 653, 277, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 310, 1432, 311, 1433, 312, 1434, 1435, 684, 685, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578 }
  uselistorder i32* @r4, {}
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @chdir(i8*) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
